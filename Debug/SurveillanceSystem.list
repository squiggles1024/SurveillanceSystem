
SurveillanceSystem.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000234  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013274  08000234  08000234  00010234  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000738  080134a8  080134a8  000234a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08013be0  08013be0  00023be0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08013be8  08013be8  00023be8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08013bec  08013bec  00023bec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .trace        00000000  20000000  20000000  00030078  2**0
                  CONTENTS
  7 .data         00000078  20000000  08013bf0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .bss          00003518  20000078  08013c68  00030078  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  20003590  08013c68  00033590  2**0
                  ALLOC
 10 .ARM.attributes 00000036  00000000  00000000  00030078  2**0
                  CONTENTS, READONLY
 11 .debug_info   00041107  00000000  00000000  000300ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00009f06  00000000  00000000  000711b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 000029b0  00000000  00000000  0007b0c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_ranges 000023d0  00000000  00000000  0007da70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00040a6a  00000000  00000000  0007fe40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00041eed  00000000  00000000  000c08aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00168016  00000000  00000000  00102797  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000050  00000000  00000000  0026a7ad  2**0
                  CONTENTS, READONLY
 19 .debug_frame  0000a59c  00000000  00000000  0026a800  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000234 <__do_global_dtors_aux>:
 8000234:	b510      	push	{r4, lr}
 8000236:	4c05      	ldr	r4, [pc, #20]	; (800024c <__do_global_dtors_aux+0x18>)
 8000238:	7823      	ldrb	r3, [r4, #0]
 800023a:	b933      	cbnz	r3, 800024a <__do_global_dtors_aux+0x16>
 800023c:	4b04      	ldr	r3, [pc, #16]	; (8000250 <__do_global_dtors_aux+0x1c>)
 800023e:	b113      	cbz	r3, 8000246 <__do_global_dtors_aux+0x12>
 8000240:	4804      	ldr	r0, [pc, #16]	; (8000254 <__do_global_dtors_aux+0x20>)
 8000242:	e000      	b.n	8000246 <__do_global_dtors_aux+0x12>
 8000244:	bf00      	nop
 8000246:	2301      	movs	r3, #1
 8000248:	7023      	strb	r3, [r4, #0]
 800024a:	bd10      	pop	{r4, pc}
 800024c:	20000078 	.word	0x20000078
 8000250:	00000000 	.word	0x00000000
 8000254:	08013490 	.word	0x08013490

08000258 <frame_dummy>:
 8000258:	b508      	push	{r3, lr}
 800025a:	4b03      	ldr	r3, [pc, #12]	; (8000268 <frame_dummy+0x10>)
 800025c:	b11b      	cbz	r3, 8000266 <frame_dummy+0xe>
 800025e:	4903      	ldr	r1, [pc, #12]	; (800026c <frame_dummy+0x14>)
 8000260:	4803      	ldr	r0, [pc, #12]	; (8000270 <frame_dummy+0x18>)
 8000262:	e000      	b.n	8000266 <frame_dummy+0xe>
 8000264:	bf00      	nop
 8000266:	bd08      	pop	{r3, pc}
 8000268:	00000000 	.word	0x00000000
 800026c:	2000007c 	.word	0x2000007c
 8000270:	08013490 	.word	0x08013490

08000274 <_tx_initialize_low_level>:
    .thumb_func
.type _tx_initialize_low_level, function
_tx_initialize_low_level:

    /* Disable interrupts during ThreadX initialization.  */
    CPSID   i
 8000274:	b672      	cpsid	i
    LDR     r1, =__RAM_segment_used_end__           // Build first free address
    ADD     r1, r1, #4                              //
    STR     r1, [r0]                                // Setup first unused memory pointer
#endif
    /* Setup Vector Table Offset Register.  */
    MOV     r0, #0xE000E000                         // Build address of NVIC registers
 8000276:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
    LDR     r1, =g_pfnVectors                       // Pickup address of vector table
 800027a:	4917      	ldr	r1, [pc, #92]	; (80002d8 <__tx_DBGHandler+0x4>)
    STR     r1, [r0, #0xD08]                        // Set vector table address
 800027c:	f8c0 1d08 	str.w	r1, [r0, #3336]	; 0xd08

    /* Enable the cycle count register.  */
    LDR     r0, =0xE0001000                         // Build address of DWT register
 8000280:	4816      	ldr	r0, [pc, #88]	; (80002dc <__tx_DBGHandler+0x8>)
    LDR     r1, [r0]                                // Pickup the current value
 8000282:	6801      	ldr	r1, [r0, #0]
    ORR     r1, r1, #1                              // Set the CYCCNTENA bit
 8000284:	f041 0101 	orr.w	r1, r1, #1
    STR     r1, [r0]                                // Enable the cycle count register
 8000288:	6001      	str	r1, [r0, #0]

    /* Set system stack pointer from vector value.  */
    LDR     r0, =_tx_thread_system_stack_ptr        // Build address of system stack pointer
 800028a:	4815      	ldr	r0, [pc, #84]	; (80002e0 <__tx_DBGHandler+0xc>)
    LDR     r1, =g_pfnVectors                       // Pickup address of vector table
 800028c:	4912      	ldr	r1, [pc, #72]	; (80002d8 <__tx_DBGHandler+0x4>)
    LDR     r1, [r1]                                // Pickup reset stack pointer
 800028e:	6809      	ldr	r1, [r1, #0]
    STR     r1, [r0]                                // Save system stack pointer
 8000290:	6001      	str	r1, [r0, #0]

    /* Configure SysTick.  */
    MOV     r0, #0xE000E000                         // Build address of NVIC registers
 8000292:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
    LDR     r1, =SYSTICK_CYCLES
 8000296:	4913      	ldr	r1, [pc, #76]	; (80002e4 <__tx_DBGHandler+0x10>)
    STR     r1, [r0, #0x14]                         // Setup SysTick Reload Value
 8000298:	6141      	str	r1, [r0, #20]
    MOV     r1, #0x7                                // Build SysTick Control Enable Value
 800029a:	f04f 0107 	mov.w	r1, #7
    STR     r1, [r0, #0x10]                         // Setup SysTick Control
 800029e:	6101      	str	r1, [r0, #16]

    /* Configure handler priorities.  */
    LDR     r1, =0x00000000                         // Rsrv, UsgF, BusF, MemM
 80002a0:	f04f 0100 	mov.w	r1, #0
    STR     r1, [r0, #0xD18]                        // Setup System Handlers 4-7 Priority Registers
 80002a4:	f8c0 1d18 	str.w	r1, [r0, #3352]	; 0xd18

    LDR     r1, =0xFF000000                         // SVCl, Rsrv, Rsrv, Rsrv
 80002a8:	f04f 417f 	mov.w	r1, #4278190080	; 0xff000000
    STR     r1, [r0, #0xD1C]                        // Setup System Handlers 8-11 Priority Registers
 80002ac:	f8c0 1d1c 	str.w	r1, [r0, #3356]	; 0xd1c
                                                    // Note: SVC must be lowest priority, which is 0xFF

    LDR     r1, =0x40FF0000                         // SysT, PnSV, Rsrv, DbgM
 80002b0:	490d      	ldr	r1, [pc, #52]	; (80002e8 <__tx_DBGHandler+0x14>)
    STR     r1, [r0, #0xD20]                        // Setup System Handlers 12-15 Priority Registers
 80002b2:	f8c0 1d20 	str.w	r1, [r0, #3360]	; 0xd20
                                                    // Note: PnSV must be lowest priority, which is 0xFF

    /* Return to caller.  */
    BX      lr
 80002b6:	4770      	bx	lr

080002b8 <__tx_BadHandler>:
    .eabi_attribute Tag_ABI_align_preserved, 1
    .global  __tx_BadHandler
    .thumb_func
.type __tx_BadHandler, function
__tx_BadHandler:
    B       __tx_BadHandler
 80002b8:	f7ff bffe 	b.w	80002b8 <__tx_BadHandler>

080002bc <__tx_IntHandler>:
    .thumb_func
.type __tx_IntHandler, function
__tx_IntHandler:
// VOID InterruptHandler (VOID)
// {
    PUSH    {r0,lr}     // Save LR (and dummy r0 to maintain stack alignment)
 80002bc:	b501      	push	{r0, lr}
    /* Do interrupt handler work here */
    /* .... */
#if (defined(TX_ENABLE_EXECUTION_CHANGE_NOTIFY) || defined(TX_EXECUTION_PROFILE_ENABLE))
    BL      _tx_execution_isr_exit              // Call the ISR exit function
#endif
    POP     {r0,lr}
 80002be:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    BX      lr
 80002c2:	4770      	bx	lr

080002c4 <SysTick_Handler>:
    .thumb_func
.type SysTick_Handler, function
SysTick_Handler:
// VOID TimerInterruptHandler (VOID)
// {
    PUSH    {r0,lr}     // Save LR (and dummy r0 to maintain stack alignment)
 80002c4:	b501      	push	{r0, lr}
#if (defined(TX_ENABLE_EXECUTION_CHANGE_NOTIFY) || defined(TX_EXECUTION_PROFILE_ENABLE))
    BL      _tx_execution_isr_enter             // Call the ISR enter function
#endif
    BL      _tx_timer_interrupt
 80002c6:	f000 f897 	bl	80003f8 <_tx_timer_interrupt>
#if (defined(TX_ENABLE_EXECUTION_CHANGE_NOTIFY) || defined(TX_EXECUTION_PROFILE_ENABLE))
    BL      _tx_execution_isr_exit              // Call the ISR exit function
#endif
    POP     {r0,lr}
 80002ca:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    BX      lr
 80002ce:	4770      	bx	lr

080002d0 <__tx_NMIHandler>:
    .eabi_attribute Tag_ABI_align_preserved, 1
    .global  __tx_NMIHandler
    .thumb_func
.type __tx_NMIHandler, function
__tx_NMIHandler:
    B       __tx_NMIHandler
 80002d0:	f7ff bffe 	b.w	80002d0 <__tx_NMIHandler>

080002d4 <__tx_DBGHandler>:
    .eabi_attribute Tag_ABI_align_preserved, 1
    .global  __tx_DBGHandler
    .thumb_func
.type __tx_DBGHandler, function
__tx_DBGHandler:
    B       __tx_DBGHandler
 80002d4:	f7ff bffe 	b.w	80002d4 <__tx_DBGHandler>
    LDR     r1, =g_pfnVectors                       // Pickup address of vector table
 80002d8:	08000000 	.word	0x08000000
    LDR     r0, =0xE0001000                         // Build address of DWT register
 80002dc:	e0001000 	.word	0xe0001000
    LDR     r0, =_tx_thread_system_stack_ptr        // Build address of system stack pointer
 80002e0:	20002f74 	.word	0x20002f74
    LDR     r1, =SYSTICK_CYCLES
 80002e4:	001869ff 	.word	0x001869ff
    LDR     r1, =0x40FF0000                         // SysT, PnSV, Rsrv, DbgM
 80002e8:	40ff0000 	.word	0x40ff0000

080002ec <_tx_thread_schedule>:
    /* This function should only ever be called on Cortex-M
       from the first schedule request. Subsequent scheduling occurs
       from the PendSV handling routine below. */

    /* Clear the preempt-disable flag to enable rescheduling after initialization on Cortex-M targets.  */
    MOV     r0, #0                                  // Build value for TX_FALSE
 80002ec:	f04f 0000 	mov.w	r0, #0
    LDR     r2, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 80002f0:	4a2d      	ldr	r2, [pc, #180]	; (80003a8 <_tx_vfp_access+0x4>)
    STR     r0, [r2, #0]                            // Clear preempt disable flag
 80002f2:	6010      	str	r0, [r2, #0]

#ifdef __ARM_FP
    /* Clear CONTROL.FPCA bit so VFP registers aren't unnecessarily stacked.  */
    MRS     r0, CONTROL                             // Pickup current CONTROL register
 80002f4:	f3ef 8014 	mrs	r0, CONTROL
    BIC     r0, r0, #4                              // Clear the FPCA bit
 80002f8:	f020 0004 	bic.w	r0, r0, #4
    MSR     CONTROL, r0                             // Setup new CONTROL register
 80002fc:	f380 8814 	msr	CONTROL, r0
#endif

    /* Enable interrupts */
    CPSIE   i
 8000300:	b662      	cpsie	i

    /* Enter the scheduler for the first time.  */
    MOV     r0, #0x10000000                         // Load PENDSVSET bit
 8000302:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    MOV     r1, #0xE000E000                         // Load NVIC base
 8000306:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    STR     r0, [r1, #0xD04]                        // Set PENDSVBIT in ICSR
 800030a:	f8c1 0d04 	str.w	r0, [r1, #3332]	; 0xd04
    DSB                                             // Complete all memory accesses
 800030e:	f3bf 8f4f 	dsb	sy
    ISB                                             // Flush pipeline
 8000312:	f3bf 8f6f 	isb	sy

08000316 <__tx_wait_here>:

    /* Wait here for the PendSV to take place.  */

__tx_wait_here:
    B       __tx_wait_here                          // Wait for the PendSV to happen
 8000316:	e7fe      	b.n	8000316 <__tx_wait_here>

08000318 <PendSV_Handler>:
    BL      _tx_execution_thread_exit               // Call the thread exit function
    POP     {r0, lr}                                // Recover LR
    CPSIE   i                                       // Enable interrupts
#endif

    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 8000318:	4824      	ldr	r0, [pc, #144]	; (80003ac <_tx_vfp_access+0x8>)
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 800031a:	4a25      	ldr	r2, [pc, #148]	; (80003b0 <_tx_vfp_access+0xc>)
    MOV     r3, #0                                  // Build NULL value
 800031c:	f04f 0300 	mov.w	r3, #0
    LDR     r1, [r0]                                // Pickup current thread pointer
 8000320:	6801      	ldr	r1, [r0, #0]

    /* Determine if there is a current thread to finish preserving.  */

    CBZ     r1, __tx_ts_new                         // If NULL, skip preservation
 8000322:	b191      	cbz	r1, 800034a <__tx_ts_new>

    /* Recover PSP and preserve current thread context.  */

    STR     r3, [r0]                                // Set _tx_thread_current_ptr to NULL
 8000324:	6003      	str	r3, [r0, #0]
    MRS     r12, PSP                                // Pickup PSP pointer (thread's stack pointer)
 8000326:	f3ef 8c09 	mrs	ip, PSP
    STMDB   r12!, {r4-r11}                          // Save its remaining registers
 800032a:	e92c 0ff0 	stmdb	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
#ifdef __ARM_FP
    TST     LR, #0x10                               // Determine if the VFP extended frame is present
 800032e:	f01e 0f10 	tst.w	lr, #16
    BNE     _skip_vfp_save
 8000332:	d101      	bne.n	8000338 <_skip_vfp_save>
    VSTMDB  r12!,{s16-s31}                          // Yes, save additional VFP registers
 8000334:	ed2c 8a10 	vstmdb	ip!, {s16-s31}

08000338 <_skip_vfp_save>:
_skip_vfp_save:
#endif
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 8000338:	4c1e      	ldr	r4, [pc, #120]	; (80003b4 <_tx_vfp_access+0x10>)
    STMDB   r12!, {LR}                              // Save LR on the stack
 800033a:	f84c ed04 	str.w	lr, [ip, #-4]!
    STR     r12, [r1, #8]                           // Save the thread stack pointer
 800033e:	f8c1 c008 	str.w	ip, [r1, #8]
_skip_secure_save:
#endif

    /* Determine if time-slice is active. If it isn't, skip time handling processing.  */

    LDR     r5, [r4]                                // Pickup current time-slice
 8000342:	6825      	ldr	r5, [r4, #0]
    CBZ     r5, __tx_ts_new                         // If not active, skip processing
 8000344:	b10d      	cbz	r5, 800034a <__tx_ts_new>

    /* Time-slice is active, save the current thread's time-slice and clear the global time-slice variable.  */

    STR     r5, [r1, #24]                           // Save current time-slice
 8000346:	618d      	str	r5, [r1, #24]

    /* Clear the global time-slice.  */

    STR     r3, [r4]                                // Clear time-slice
 8000348:	6023      	str	r3, [r4, #0]

0800034a <__tx_ts_new>:

__tx_ts_new:

    /* Now we are looking for a new thread to execute!  */

    CPSID   i                                       // Disable interrupts
 800034a:	b672      	cpsid	i
    LDR     r1, [r2]                                // Is there another thread ready to execute?
 800034c:	6811      	ldr	r1, [r2, #0]
    CBZ     r1, __tx_ts_wait                        // No, skip to the wait processing
 800034e:	b1d1      	cbz	r1, 8000386 <__tx_ts_wait>

    /* Yes, another thread is ready for else, make the current thread the new thread.  */

    STR     r1, [r0]                                // Setup the current thread pointer to the new thread
 8000350:	6001      	str	r1, [r0, #0]
    CPSIE   i                                       // Enable interrupts
 8000352:	b662      	cpsie	i

08000354 <__tx_ts_restore>:

    /* Increment the thread run count.  */

__tx_ts_restore:
    LDR     r7, [r1, #4]                            // Pickup the current thread run count
 8000354:	684f      	ldr	r7, [r1, #4]
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 8000356:	4c17      	ldr	r4, [pc, #92]	; (80003b4 <_tx_vfp_access+0x10>)
    LDR     r5, [r1, #24]                           // Pickup thread's current time-slice
 8000358:	698d      	ldr	r5, [r1, #24]
    ADD     r7, r7, #1                              // Increment the thread run count
 800035a:	f107 0701 	add.w	r7, r7, #1
    STR     r7, [r1, #4]                            // Store the new run count
 800035e:	604f      	str	r7, [r1, #4]

    /* Setup global time-slice with thread's current time-slice.  */

    STR     r5, [r4]                                // Setup global time-slice
 8000360:	6025      	str	r5, [r4, #0]
    POP     {r0,r1}                                 // Restore r1 (and dummy r0)
_skip_secure_restore:
#endif

    /* Restore the thread context and PSP.  */
    LDR     r12, [r1, #12]                          // Get stack start
 8000362:	f8d1 c00c 	ldr.w	ip, [r1, #12]
    MSR     PSPLIM, r12                             // Set stack limit
 8000366:	f38c 880b 	msr	PSPLIM, ip
    LDR     r12, [r1, #8]                           // Pickup thread's stack pointer
 800036a:	f8d1 c008 	ldr.w	ip, [r1, #8]
    LDMIA   r12!, {LR}                              // Pickup LR
 800036e:	f85c eb04 	ldr.w	lr, [ip], #4
#ifdef __ARM_FP
    TST     LR, #0x10                               // Determine if the VFP extended frame is present
 8000372:	f01e 0f10 	tst.w	lr, #16
    BNE     _skip_vfp_restore                       // If not, skip VFP restore
 8000376:	d101      	bne.n	800037c <_skip_vfp_restore>
    VLDMIA  r12!, {s16-s31}                         // Yes, restore additional VFP registers
 8000378:	ecbc 8a10 	vldmia	ip!, {s16-s31}

0800037c <_skip_vfp_restore>:
_skip_vfp_restore:
#endif
    LDMIA   r12!, {r4-r11}                          // Recover thread's registers
 800037c:	e8bc 0ff0 	ldmia.w	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
    MSR     PSP, r12                                // Setup the thread's stack pointer
 8000380:	f38c 8809 	msr	PSP, ip

    BX      lr                                      // Return to thread!
 8000384:	4770      	bx	lr

08000386 <__tx_ts_wait>:
    /* The following is the idle wait processing... in this case, no threads are ready for execution and the
       system will simply be idle until an interrupt occurs that makes a thread ready. Note that interrupts
       are disabled to allow use of WFI for waiting for a thread to arrive.  */

__tx_ts_wait:
    CPSID   i                                       // Disable interrupts
 8000386:	b672      	cpsid	i
    LDR     r1, [r2]                                // Pickup the next thread to execute pointer
 8000388:	6811      	ldr	r1, [r2, #0]
    STR     r1, [r0]                                // Store it in the current pointer
 800038a:	6001      	str	r1, [r0, #0]
    CBNZ    r1, __tx_ts_ready                       // If non-NULL, a new thread is ready!
 800038c:	b909      	cbnz	r1, 8000392 <__tx_ts_ready>
    PUSH    {r0-r3}
    BL      tx_low_power_exit                       // Exit low power mode
    POP     {r0-r3}
#endif

    CPSIE   i                                       // Enable interrupts
 800038e:	b662      	cpsie	i
    B       __tx_ts_wait                            // Loop to continue waiting
 8000390:	e7f9      	b.n	8000386 <__tx_ts_wait>

08000392 <__tx_ts_ready>:

    /* At this point, we have a new thread ready to go. Clear any newly pended PendSV - since we are
       already in the handler!  */
__tx_ts_ready:
    MOV     r7, #0x08000000                         // Build clear PendSV value
 8000392:	f04f 6700 	mov.w	r7, #134217728	; 0x8000000
    MOV     r8, #0xE000E000                         // Build base NVIC address
 8000396:	f04f 28e0 	mov.w	r8, #3758153728	; 0xe000e000
    STR     r7, [r8, #0xD04]                        // Clear any PendSV
 800039a:	f8c8 7d04 	str.w	r7, [r8, #3332]	; 0xd04

    /* Re-enable interrupts and restore new thread.  */
    CPSIE   i                                       // Enable interrupts
 800039e:	b662      	cpsie	i
    B       __tx_ts_restore                         // Restore the thread
 80003a0:	e7d8      	b.n	8000354 <__tx_ts_restore>
 80003a2:	bf00      	nop

080003a4 <_tx_vfp_access>:
.type _tx_vfp_access, function
_tx_vfp_access:
#if TX_ENABLE_FPU_SUPPORT
    VMOV.F32 s0, s0                                 // Simply access the VFP
#endif
    BX       lr                                     // Return to caller
 80003a4:	4770      	bx	lr
 80003a6:	0000      	.short	0x0000
    LDR     r2, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 80003a8:	20003010 	.word	0x20003010
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 80003ac:	20002f78 	.word	0x20002f78
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 80003b0:	20002f7c 	.word	0x20002f7c
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 80003b4:	2000357c 	.word	0x2000357c

080003b8 <_tx_thread_stack_build>:
                       pc          Initial value for pc
                       xPSR        Initial value for xPSR

    Stack Bottom: (higher memory address)  */

    LDR     r2, [r0, #16]                           // Pickup end of stack area
 80003b8:	6902      	ldr	r2, [r0, #16]
    BIC     r2, r2, #0x7                            // Align frame for 8-byte alignment
 80003ba:	f022 0207 	bic.w	r2, r2, #7
    SUB     r2, r2, #68                             // Subtract frame size
 80003be:	f1a2 0244 	sub.w	r2, r2, #68	; 0x44
#ifdef TX_SINGLE_MODE_SECURE
    LDR     r3, =0xFFFFFFFD                         // Build initial LR value for secure mode
#else
    LDR     r3, =0xFFFFFFBC                         // Build initial LR value to return to non-secure PSP
 80003c2:	f06f 0343 	mvn.w	r3, #67	; 0x43
#endif
    STR     r3, [r2, #0]                            // Save on the stack
 80003c6:	6013      	str	r3, [r2, #0]

    /* Actually build the stack frame.  */

    MOV     r3, #0                                  // Build initial register value
 80003c8:	f04f 0300 	mov.w	r3, #0
    STR     r3, [r2, #4]                            // Store initial r4
 80003cc:	6053      	str	r3, [r2, #4]
    STR     r3, [r2, #8]                            // Store initial r5
 80003ce:	6093      	str	r3, [r2, #8]
    STR     r3, [r2, #12]                           // Store initial r6
 80003d0:	60d3      	str	r3, [r2, #12]
    STR     r3, [r2, #16]                           // Store initial r7
 80003d2:	6113      	str	r3, [r2, #16]
    STR     r3, [r2, #20]                           // Store initial r8
 80003d4:	6153      	str	r3, [r2, #20]
    STR     r3, [r2, #24]                           // Store initial r9
 80003d6:	6193      	str	r3, [r2, #24]
    STR     r3, [r2, #28]                           // Store initial r10
 80003d8:	61d3      	str	r3, [r2, #28]
    STR     r3, [r2, #32]                           // Store initial r11
 80003da:	6213      	str	r3, [r2, #32]

    /* Hardware stack follows.  */

    STR     r3, [r2, #36]                           // Store initial r0
 80003dc:	6253      	str	r3, [r2, #36]	; 0x24
    STR     r3, [r2, #40]                           // Store initial r1
 80003de:	6293      	str	r3, [r2, #40]	; 0x28
    STR     r3, [r2, #44]                           // Store initial r2
 80003e0:	62d3      	str	r3, [r2, #44]	; 0x2c
    STR     r3, [r2, #48]                           // Store initial r3
 80003e2:	6313      	str	r3, [r2, #48]	; 0x30
    STR     r3, [r2, #52]                           // Store initial r12
 80003e4:	6353      	str	r3, [r2, #52]	; 0x34
    MOV     r3, #0xFFFFFFFF                         // Poison EXC_RETURN value
 80003e6:	f04f 33ff 	mov.w	r3, #4294967295
    STR     r3, [r2, #56]                           // Store initial lr
 80003ea:	6393      	str	r3, [r2, #56]	; 0x38
    STR     r1, [r2, #60]                           // Store initial pc
 80003ec:	63d1      	str	r1, [r2, #60]	; 0x3c
    MOV     r3, #0x01000000                         // Only T-bit need be set
 80003ee:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    STR     r3, [r2, #64]                           // Store initial xPSR
 80003f2:	6413      	str	r3, [r2, #64]	; 0x40

    /* Setup stack pointer.  */
    // thread_ptr -> tx_thread_stack_ptr =  r2;

    STR     r2, [r0, #8]                            // Save stack pointer in thread's
 80003f4:	6082      	str	r2, [r0, #8]
                                                    //   control block
    BX      lr                                      // Return to caller
 80003f6:	4770      	bx	lr

080003f8 <_tx_timer_interrupt>:
       for use.  */

    /* Increment the system clock.  */
    // _tx_timer_system_clock++;

    LDR     r1, =_tx_timer_system_clock             // Pickup address of system clock
 80003f8:	4922      	ldr	r1, [pc, #136]	; (8000484 <__tx_timer_nothing_expired+0x8>)
    LDR     r0, [r1, #0]                            // Pickup system clock
 80003fa:	6808      	ldr	r0, [r1, #0]
    ADD     r0, r0, #1                              // Increment system clock
 80003fc:	f100 0001 	add.w	r0, r0, #1
    STR     r0, [r1, #0]                            // Store new system clock
 8000400:	6008      	str	r0, [r1, #0]

    /* Test for time-slice expiration.  */
    // if (_tx_timer_time_slice)
    // {

    LDR     r3, =_tx_timer_time_slice               // Pickup address of time-slice
 8000402:	4b21      	ldr	r3, [pc, #132]	; (8000488 <__tx_timer_nothing_expired+0xc>)
    LDR     r2, [r3, #0]                            // Pickup time-slice
 8000404:	681a      	ldr	r2, [r3, #0]
    CBZ     r2, __tx_timer_no_time_slice            // Is it non-active?
 8000406:	b13a      	cbz	r2, 8000418 <__tx_timer_no_time_slice>
                                                    // Yes, skip time-slice processing

       /* Decrement the time_slice.  */
       // _tx_timer_time_slice--;

    SUB     r2, r2, #1                              // Decrement the time-slice
 8000408:	f1a2 0201 	sub.w	r2, r2, #1
    STR     r2, [r3, #0]                            // Store new time-slice value
 800040c:	601a      	str	r2, [r3, #0]

       /* Check for expiration.  */
       // if (__tx_timer_time_slice == 0)

    CBNZ    r2, __tx_timer_no_time_slice            // Has it expired?
 800040e:	b91a      	cbnz	r2, 8000418 <__tx_timer_no_time_slice>
                                                    // No, skip expiration processing

       /* Set the time-slice expired flag.  */
       // _tx_timer_expired_time_slice =  TX_TRUE;

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup address of expired flag
 8000410:	4b1e      	ldr	r3, [pc, #120]	; (800048c <__tx_timer_nothing_expired+0x10>)
    MOV     r0, #1                                  // Build expired value
 8000412:	f04f 0001 	mov.w	r0, #1
    STR     r0, [r3, #0]                            // Set time-slice expiration flag
 8000416:	6018      	str	r0, [r3, #0]

08000418 <__tx_timer_no_time_slice>:

    /* Test for timer expiration.  */
    // if (*_tx_timer_current_ptr)
    // {

    LDR     r1, =_tx_timer_current_ptr              // Pickup current timer pointer address
 8000418:	491d      	ldr	r1, [pc, #116]	; (8000490 <__tx_timer_nothing_expired+0x14>)
    LDR     r0, [r1, #0]                            // Pickup current timer
 800041a:	6808      	ldr	r0, [r1, #0]
    LDR     r2, [r0, #0]                            // Pickup timer list entry
 800041c:	6802      	ldr	r2, [r0, #0]
    CBZ     r2, __tx_timer_no_timer                 // Is there anything in the list?
 800041e:	b122      	cbz	r2, 800042a <__tx_timer_no_timer>
                                                    // No, just increment the timer

        /* Set expiration flag.  */
        // _tx_timer_expired =  TX_TRUE;

    LDR     r3, =_tx_timer_expired                  // Pickup expiration flag address
 8000420:	4b1c      	ldr	r3, [pc, #112]	; (8000494 <__tx_timer_nothing_expired+0x18>)
    MOV     r2, #1                                  // Build expired value
 8000422:	f04f 0201 	mov.w	r2, #1
    STR     r2, [r3, #0]                            // Set expired flag
 8000426:	601a      	str	r2, [r3, #0]
    B       __tx_timer_done                         // Finished timer processing
 8000428:	e008      	b.n	800043c <__tx_timer_done>

0800042a <__tx_timer_no_timer>:
__tx_timer_no_timer:

        /* No timer expired, increment the timer pointer.  */
        // _tx_timer_current_ptr++;

    ADD     r0, r0, #4                              // Move to next timer
 800042a:	f100 0004 	add.w	r0, r0, #4

        /* Check for wrap-around.  */
        // if (_tx_timer_current_ptr == _tx_timer_list_end)

    LDR     r3, =_tx_timer_list_end                 // Pickup addr of timer list end
 800042e:	4b1a      	ldr	r3, [pc, #104]	; (8000498 <__tx_timer_nothing_expired+0x1c>)
    LDR     r2, [r3, #0]                            // Pickup list end
 8000430:	681a      	ldr	r2, [r3, #0]
    CMP     r0, r2                                  // Are we at list end?
 8000432:	4290      	cmp	r0, r2
    BNE     __tx_timer_skip_wrap                    // No, skip wrap-around logic
 8000434:	d101      	bne.n	800043a <__tx_timer_skip_wrap>

            /* Wrap to beginning of list.  */
            // _tx_timer_current_ptr =  _tx_timer_list_start;

    LDR     r3, =_tx_timer_list_start               // Pickup addr of timer list start
 8000436:	4b19      	ldr	r3, [pc, #100]	; (800049c <__tx_timer_nothing_expired+0x20>)
    LDR     r0, [r3, #0]                            // Set current pointer to list start
 8000438:	6818      	ldr	r0, [r3, #0]

0800043a <__tx_timer_skip_wrap>:

__tx_timer_skip_wrap:

    STR     r0, [r1, #0]                            // Store new current timer pointer
 800043a:	6008      	str	r0, [r1, #0]

0800043c <__tx_timer_done>:

    /* See if anything has expired.  */
    // if ((_tx_timer_expired_time_slice) || (_tx_timer_expired))
    // {

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup addr of expired flag
 800043c:	4b13      	ldr	r3, [pc, #76]	; (800048c <__tx_timer_nothing_expired+0x10>)
    LDR     r2, [r3, #0]                            // Pickup time-slice expired flag
 800043e:	681a      	ldr	r2, [r3, #0]
    CBNZ    r2, __tx_something_expired              // Did a time-slice expire?
 8000440:	b912      	cbnz	r2, 8000448 <__tx_something_expired>
                                                    // If non-zero, time-slice expired
    LDR     r1, =_tx_timer_expired                  // Pickup addr of other expired flag
 8000442:	4914      	ldr	r1, [pc, #80]	; (8000494 <__tx_timer_nothing_expired+0x18>)
    LDR     r0, [r1, #0]                            // Pickup timer expired flag
 8000444:	6808      	ldr	r0, [r1, #0]
    CBZ     r0, __tx_timer_nothing_expired          // Did a timer expire?
 8000446:	b1c8      	cbz	r0, 800047c <__tx_timer_nothing_expired>

08000448 <__tx_something_expired>:
                                                    // No, nothing expired

__tx_something_expired:

    PUSH    {r0, lr}                                // Save the lr register on the stack
 8000448:	b501      	push	{r0, lr}

    /* Did a timer expire?  */
    // if (_tx_timer_expired)
    // {

    LDR     r1, =_tx_timer_expired                  // Pickup addr of expired flag
 800044a:	4912      	ldr	r1, [pc, #72]	; (8000494 <__tx_timer_nothing_expired+0x18>)
    LDR     r0, [r1, #0]                            // Pickup timer expired flag
 800044c:	6808      	ldr	r0, [r1, #0]
    CBZ     r0, __tx_timer_dont_activate            // Check for timer expiration
 800044e:	b108      	cbz	r0, 8000454 <__tx_timer_dont_activate>
                                                    // If not set, skip timer activation

        /* Process timer expiration.  */
        // _tx_timer_expiration_process();

    BL      _tx_timer_expiration_process            // Call the timer expiration handling routine
 8000450:	f011 fcfa 	bl	8011e48 <_tx_timer_expiration_process>

08000454 <__tx_timer_dont_activate>:

    /* Did time slice expire?  */
    // if (_tx_timer_expired_time_slice)
    // {

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup addr of time-slice expired
 8000454:	4b0d      	ldr	r3, [pc, #52]	; (800048c <__tx_timer_nothing_expired+0x10>)
    LDR     r2, [r3, #0]                            // Pickup the actual flag
 8000456:	681a      	ldr	r2, [r3, #0]
    CBZ     r2, __tx_timer_not_ts_expiration        // See if the flag is set
 8000458:	b172      	cbz	r2, 8000478 <__tx_timer_not_ts_expiration>
                                                    // No, skip time-slice processing

        /* Time slice interrupted thread.  */
        // _tx_thread_time_slice();

    BL      _tx_thread_time_slice                   // Call time-slice processing
 800045a:	f011 fc67 	bl	8011d2c <_tx_thread_time_slice>
    LDR     r0, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 800045e:	4810      	ldr	r0, [pc, #64]	; (80004a0 <__tx_timer_nothing_expired+0x24>)
    LDR     r1, [r0]                                // Is the preempt disable flag set?
 8000460:	6801      	ldr	r1, [r0, #0]
    CBNZ    r1, __tx_timer_skip_time_slice          // Yes, skip the PendSV logic
 8000462:	b949      	cbnz	r1, 8000478 <__tx_timer_not_ts_expiration>
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 8000464:	480f      	ldr	r0, [pc, #60]	; (80004a4 <__tx_timer_nothing_expired+0x28>)
    LDR     r1, [r0]                                // Pickup the current thread pointer
 8000466:	6801      	ldr	r1, [r0, #0]
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 8000468:	4a0f      	ldr	r2, [pc, #60]	; (80004a8 <__tx_timer_nothing_expired+0x2c>)
    LDR     r3, [r2]                                // Pickup the execute thread pointer
 800046a:	6813      	ldr	r3, [r2, #0]
    LDR     r0, =0xE000ED04                         // Build address of control register
 800046c:	480f      	ldr	r0, [pc, #60]	; (80004ac <__tx_timer_nothing_expired+0x30>)
    LDR     r2, =0x10000000                         // Build value for PendSV bit
 800046e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    CMP     r1, r3                                  // Are they the same?
 8000472:	4299      	cmp	r1, r3
    BEQ     __tx_timer_skip_time_slice              // If the same, there was no time-slice performed
 8000474:	d000      	beq.n	8000478 <__tx_timer_not_ts_expiration>
    STR     r2, [r0]                                // Not the same, issue the PendSV for preemption
 8000476:	6002      	str	r2, [r0, #0]

08000478 <__tx_timer_not_ts_expiration>:
__tx_timer_skip_time_slice:
    // }

__tx_timer_not_ts_expiration:

    POP     {r0, lr}                                // Recover lr register (r0 is just there for
 8000478:	e8bd 4001 	ldmia.w	sp!, {r0, lr}

0800047c <__tx_timer_nothing_expired>:

    // }

__tx_timer_nothing_expired:

    DSB                                             // Complete all memory access
 800047c:	f3bf 8f4f 	dsb	sy
    BX      lr                                      // Return to caller
 8000480:	4770      	bx	lr
 8000482:	0000      	.short	0x0000
    LDR     r1, =_tx_timer_system_clock             // Pickup address of system clock
 8000484:	2000301c 	.word	0x2000301c
    LDR     r3, =_tx_timer_time_slice               // Pickup address of time-slice
 8000488:	2000357c 	.word	0x2000357c
    LDR     r3, =_tx_timer_expired_time_slice       // Pickup address of expired flag
 800048c:	20003020 	.word	0x20003020
    LDR     r1, =_tx_timer_current_ptr              // Pickup current timer pointer address
 8000490:	200030ac 	.word	0x200030ac
    LDR     r3, =_tx_timer_expired                  // Pickup expiration flag address
 8000494:	200030b0 	.word	0x200030b0
    LDR     r3, =_tx_timer_list_end                 // Pickup addr of timer list end
 8000498:	200030a8 	.word	0x200030a8
    LDR     r3, =_tx_timer_list_start               // Pickup addr of timer list start
 800049c:	200030a4 	.word	0x200030a4
    LDR     r0, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 80004a0:	20003010 	.word	0x20003010
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 80004a4:	20002f78 	.word	0x20002f78
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 80004a8:	20002f7c 	.word	0x20002f7c
    LDR     r0, =0xE000ED04                         // Build address of control register
 80004ac:	e000ed04 	.word	0xe000ed04

080004b0 <__aeabi_drsub>:
 80004b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80004b4:	e002      	b.n	80004bc <__adddf3>
 80004b6:	bf00      	nop

080004b8 <__aeabi_dsub>:
 80004b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080004bc <__adddf3>:
 80004bc:	b530      	push	{r4, r5, lr}
 80004be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	bf1f      	itttt	ne
 80004d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80004d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80004da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80004de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004e2:	f000 80e2 	beq.w	80006aa <__adddf3+0x1ee>
 80004e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80004ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80004ee:	bfb8      	it	lt
 80004f0:	426d      	neglt	r5, r5
 80004f2:	dd0c      	ble.n	800050e <__adddf3+0x52>
 80004f4:	442c      	add	r4, r5
 80004f6:	ea80 0202 	eor.w	r2, r0, r2
 80004fa:	ea81 0303 	eor.w	r3, r1, r3
 80004fe:	ea82 0000 	eor.w	r0, r2, r0
 8000502:	ea83 0101 	eor.w	r1, r3, r1
 8000506:	ea80 0202 	eor.w	r2, r0, r2
 800050a:	ea81 0303 	eor.w	r3, r1, r3
 800050e:	2d36      	cmp	r5, #54	; 0x36
 8000510:	bf88      	it	hi
 8000512:	bd30      	pophi	{r4, r5, pc}
 8000514:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000518:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800051c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000520:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000524:	d002      	beq.n	800052c <__adddf3+0x70>
 8000526:	4240      	negs	r0, r0
 8000528:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800052c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000530:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000534:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000538:	d002      	beq.n	8000540 <__adddf3+0x84>
 800053a:	4252      	negs	r2, r2
 800053c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000540:	ea94 0f05 	teq	r4, r5
 8000544:	f000 80a7 	beq.w	8000696 <__adddf3+0x1da>
 8000548:	f1a4 0401 	sub.w	r4, r4, #1
 800054c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000550:	db0d      	blt.n	800056e <__adddf3+0xb2>
 8000552:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000556:	fa22 f205 	lsr.w	r2, r2, r5
 800055a:	1880      	adds	r0, r0, r2
 800055c:	f141 0100 	adc.w	r1, r1, #0
 8000560:	fa03 f20e 	lsl.w	r2, r3, lr
 8000564:	1880      	adds	r0, r0, r2
 8000566:	fa43 f305 	asr.w	r3, r3, r5
 800056a:	4159      	adcs	r1, r3
 800056c:	e00e      	b.n	800058c <__adddf3+0xd0>
 800056e:	f1a5 0520 	sub.w	r5, r5, #32
 8000572:	f10e 0e20 	add.w	lr, lr, #32
 8000576:	2a01      	cmp	r2, #1
 8000578:	fa03 fc0e 	lsl.w	ip, r3, lr
 800057c:	bf28      	it	cs
 800057e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000582:	fa43 f305 	asr.w	r3, r3, r5
 8000586:	18c0      	adds	r0, r0, r3
 8000588:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800058c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000590:	d507      	bpl.n	80005a2 <__adddf3+0xe6>
 8000592:	f04f 0e00 	mov.w	lr, #0
 8000596:	f1dc 0c00 	rsbs	ip, ip, #0
 800059a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800059e:	eb6e 0101 	sbc.w	r1, lr, r1
 80005a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80005a6:	d31b      	bcc.n	80005e0 <__adddf3+0x124>
 80005a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80005ac:	d30c      	bcc.n	80005c8 <__adddf3+0x10c>
 80005ae:	0849      	lsrs	r1, r1, #1
 80005b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80005b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005b8:	f104 0401 	add.w	r4, r4, #1
 80005bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80005c4:	f080 809a 	bcs.w	80006fc <__adddf3+0x240>
 80005c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80005cc:	bf08      	it	eq
 80005ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80005d2:	f150 0000 	adcs.w	r0, r0, #0
 80005d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005da:	ea41 0105 	orr.w	r1, r1, r5
 80005de:	bd30      	pop	{r4, r5, pc}
 80005e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80005e4:	4140      	adcs	r0, r0
 80005e6:	eb41 0101 	adc.w	r1, r1, r1
 80005ea:	3c01      	subs	r4, #1
 80005ec:	bf28      	it	cs
 80005ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80005f2:	d2e9      	bcs.n	80005c8 <__adddf3+0x10c>
 80005f4:	f091 0f00 	teq	r1, #0
 80005f8:	bf04      	itt	eq
 80005fa:	4601      	moveq	r1, r0
 80005fc:	2000      	moveq	r0, #0
 80005fe:	fab1 f381 	clz	r3, r1
 8000602:	bf08      	it	eq
 8000604:	3320      	addeq	r3, #32
 8000606:	f1a3 030b 	sub.w	r3, r3, #11
 800060a:	f1b3 0220 	subs.w	r2, r3, #32
 800060e:	da0c      	bge.n	800062a <__adddf3+0x16e>
 8000610:	320c      	adds	r2, #12
 8000612:	dd08      	ble.n	8000626 <__adddf3+0x16a>
 8000614:	f102 0c14 	add.w	ip, r2, #20
 8000618:	f1c2 020c 	rsb	r2, r2, #12
 800061c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000620:	fa21 f102 	lsr.w	r1, r1, r2
 8000624:	e00c      	b.n	8000640 <__adddf3+0x184>
 8000626:	f102 0214 	add.w	r2, r2, #20
 800062a:	bfd8      	it	le
 800062c:	f1c2 0c20 	rsble	ip, r2, #32
 8000630:	fa01 f102 	lsl.w	r1, r1, r2
 8000634:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000638:	bfdc      	itt	le
 800063a:	ea41 010c 	orrle.w	r1, r1, ip
 800063e:	4090      	lslle	r0, r2
 8000640:	1ae4      	subs	r4, r4, r3
 8000642:	bfa2      	ittt	ge
 8000644:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000648:	4329      	orrge	r1, r5
 800064a:	bd30      	popge	{r4, r5, pc}
 800064c:	ea6f 0404 	mvn.w	r4, r4
 8000650:	3c1f      	subs	r4, #31
 8000652:	da1c      	bge.n	800068e <__adddf3+0x1d2>
 8000654:	340c      	adds	r4, #12
 8000656:	dc0e      	bgt.n	8000676 <__adddf3+0x1ba>
 8000658:	f104 0414 	add.w	r4, r4, #20
 800065c:	f1c4 0220 	rsb	r2, r4, #32
 8000660:	fa20 f004 	lsr.w	r0, r0, r4
 8000664:	fa01 f302 	lsl.w	r3, r1, r2
 8000668:	ea40 0003 	orr.w	r0, r0, r3
 800066c:	fa21 f304 	lsr.w	r3, r1, r4
 8000670:	ea45 0103 	orr.w	r1, r5, r3
 8000674:	bd30      	pop	{r4, r5, pc}
 8000676:	f1c4 040c 	rsb	r4, r4, #12
 800067a:	f1c4 0220 	rsb	r2, r4, #32
 800067e:	fa20 f002 	lsr.w	r0, r0, r2
 8000682:	fa01 f304 	lsl.w	r3, r1, r4
 8000686:	ea40 0003 	orr.w	r0, r0, r3
 800068a:	4629      	mov	r1, r5
 800068c:	bd30      	pop	{r4, r5, pc}
 800068e:	fa21 f004 	lsr.w	r0, r1, r4
 8000692:	4629      	mov	r1, r5
 8000694:	bd30      	pop	{r4, r5, pc}
 8000696:	f094 0f00 	teq	r4, #0
 800069a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800069e:	bf06      	itte	eq
 80006a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80006a4:	3401      	addeq	r4, #1
 80006a6:	3d01      	subne	r5, #1
 80006a8:	e74e      	b.n	8000548 <__adddf3+0x8c>
 80006aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006ae:	bf18      	it	ne
 80006b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006b4:	d029      	beq.n	800070a <__adddf3+0x24e>
 80006b6:	ea94 0f05 	teq	r4, r5
 80006ba:	bf08      	it	eq
 80006bc:	ea90 0f02 	teqeq	r0, r2
 80006c0:	d005      	beq.n	80006ce <__adddf3+0x212>
 80006c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80006c6:	bf04      	itt	eq
 80006c8:	4619      	moveq	r1, r3
 80006ca:	4610      	moveq	r0, r2
 80006cc:	bd30      	pop	{r4, r5, pc}
 80006ce:	ea91 0f03 	teq	r1, r3
 80006d2:	bf1e      	ittt	ne
 80006d4:	2100      	movne	r1, #0
 80006d6:	2000      	movne	r0, #0
 80006d8:	bd30      	popne	{r4, r5, pc}
 80006da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80006de:	d105      	bne.n	80006ec <__adddf3+0x230>
 80006e0:	0040      	lsls	r0, r0, #1
 80006e2:	4149      	adcs	r1, r1
 80006e4:	bf28      	it	cs
 80006e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80006ea:	bd30      	pop	{r4, r5, pc}
 80006ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80006f0:	bf3c      	itt	cc
 80006f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80006f6:	bd30      	popcc	{r4, r5, pc}
 80006f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000700:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000704:	f04f 0000 	mov.w	r0, #0
 8000708:	bd30      	pop	{r4, r5, pc}
 800070a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800070e:	bf1a      	itte	ne
 8000710:	4619      	movne	r1, r3
 8000712:	4610      	movne	r0, r2
 8000714:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000718:	bf1c      	itt	ne
 800071a:	460b      	movne	r3, r1
 800071c:	4602      	movne	r2, r0
 800071e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000722:	bf06      	itte	eq
 8000724:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000728:	ea91 0f03 	teqeq	r1, r3
 800072c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000730:	bd30      	pop	{r4, r5, pc}
 8000732:	bf00      	nop

08000734 <__aeabi_ui2d>:
 8000734:	f090 0f00 	teq	r0, #0
 8000738:	bf04      	itt	eq
 800073a:	2100      	moveq	r1, #0
 800073c:	4770      	bxeq	lr
 800073e:	b530      	push	{r4, r5, lr}
 8000740:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000744:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000748:	f04f 0500 	mov.w	r5, #0
 800074c:	f04f 0100 	mov.w	r1, #0
 8000750:	e750      	b.n	80005f4 <__adddf3+0x138>
 8000752:	bf00      	nop

08000754 <__aeabi_i2d>:
 8000754:	f090 0f00 	teq	r0, #0
 8000758:	bf04      	itt	eq
 800075a:	2100      	moveq	r1, #0
 800075c:	4770      	bxeq	lr
 800075e:	b530      	push	{r4, r5, lr}
 8000760:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000764:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000768:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800076c:	bf48      	it	mi
 800076e:	4240      	negmi	r0, r0
 8000770:	f04f 0100 	mov.w	r1, #0
 8000774:	e73e      	b.n	80005f4 <__adddf3+0x138>
 8000776:	bf00      	nop

08000778 <__aeabi_f2d>:
 8000778:	0042      	lsls	r2, r0, #1
 800077a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800077e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000782:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000786:	bf1f      	itttt	ne
 8000788:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800078c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000790:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000794:	4770      	bxne	lr
 8000796:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800079a:	bf08      	it	eq
 800079c:	4770      	bxeq	lr
 800079e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80007a2:	bf04      	itt	eq
 80007a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80007a8:	4770      	bxeq	lr
 80007aa:	b530      	push	{r4, r5, lr}
 80007ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80007b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80007b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007b8:	e71c      	b.n	80005f4 <__adddf3+0x138>
 80007ba:	bf00      	nop

080007bc <__aeabi_ul2d>:
 80007bc:	ea50 0201 	orrs.w	r2, r0, r1
 80007c0:	bf08      	it	eq
 80007c2:	4770      	bxeq	lr
 80007c4:	b530      	push	{r4, r5, lr}
 80007c6:	f04f 0500 	mov.w	r5, #0
 80007ca:	e00a      	b.n	80007e2 <__aeabi_l2d+0x16>

080007cc <__aeabi_l2d>:
 80007cc:	ea50 0201 	orrs.w	r2, r0, r1
 80007d0:	bf08      	it	eq
 80007d2:	4770      	bxeq	lr
 80007d4:	b530      	push	{r4, r5, lr}
 80007d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80007da:	d502      	bpl.n	80007e2 <__aeabi_l2d+0x16>
 80007dc:	4240      	negs	r0, r0
 80007de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80007ee:	f43f aed8 	beq.w	80005a2 <__adddf3+0xe6>
 80007f2:	f04f 0203 	mov.w	r2, #3
 80007f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007fa:	bf18      	it	ne
 80007fc:	3203      	addne	r2, #3
 80007fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000802:	bf18      	it	ne
 8000804:	3203      	addne	r2, #3
 8000806:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800080a:	f1c2 0320 	rsb	r3, r2, #32
 800080e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000812:	fa20 f002 	lsr.w	r0, r0, r2
 8000816:	fa01 fe03 	lsl.w	lr, r1, r3
 800081a:	ea40 000e 	orr.w	r0, r0, lr
 800081e:	fa21 f102 	lsr.w	r1, r1, r2
 8000822:	4414      	add	r4, r2
 8000824:	e6bd      	b.n	80005a2 <__adddf3+0xe6>
 8000826:	bf00      	nop

08000828 <__aeabi_dmul>:
 8000828:	b570      	push	{r4, r5, r6, lr}
 800082a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800082e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000832:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000836:	bf1d      	ittte	ne
 8000838:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800083c:	ea94 0f0c 	teqne	r4, ip
 8000840:	ea95 0f0c 	teqne	r5, ip
 8000844:	f000 f8de 	bleq	8000a04 <__aeabi_dmul+0x1dc>
 8000848:	442c      	add	r4, r5
 800084a:	ea81 0603 	eor.w	r6, r1, r3
 800084e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000852:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000856:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800085a:	bf18      	it	ne
 800085c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000860:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000864:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000868:	d038      	beq.n	80008dc <__aeabi_dmul+0xb4>
 800086a:	fba0 ce02 	umull	ip, lr, r0, r2
 800086e:	f04f 0500 	mov.w	r5, #0
 8000872:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000876:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800087a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800087e:	f04f 0600 	mov.w	r6, #0
 8000882:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000886:	f09c 0f00 	teq	ip, #0
 800088a:	bf18      	it	ne
 800088c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000890:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000894:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000898:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800089c:	d204      	bcs.n	80008a8 <__aeabi_dmul+0x80>
 800089e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80008a2:	416d      	adcs	r5, r5
 80008a4:	eb46 0606 	adc.w	r6, r6, r6
 80008a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80008ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80008b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80008b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80008b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80008bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c0:	bf88      	it	hi
 80008c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008c6:	d81e      	bhi.n	8000906 <__aeabi_dmul+0xde>
 80008c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80008cc:	bf08      	it	eq
 80008ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80008d2:	f150 0000 	adcs.w	r0, r0, #0
 80008d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008da:	bd70      	pop	{r4, r5, r6, pc}
 80008dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80008e0:	ea46 0101 	orr.w	r1, r6, r1
 80008e4:	ea40 0002 	orr.w	r0, r0, r2
 80008e8:	ea81 0103 	eor.w	r1, r1, r3
 80008ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80008f0:	bfc2      	ittt	gt
 80008f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fa:	bd70      	popgt	{r4, r5, r6, pc}
 80008fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000900:	f04f 0e00 	mov.w	lr, #0
 8000904:	3c01      	subs	r4, #1
 8000906:	f300 80ab 	bgt.w	8000a60 <__aeabi_dmul+0x238>
 800090a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800090e:	bfde      	ittt	le
 8000910:	2000      	movle	r0, #0
 8000912:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000916:	bd70      	pople	{r4, r5, r6, pc}
 8000918:	f1c4 0400 	rsb	r4, r4, #0
 800091c:	3c20      	subs	r4, #32
 800091e:	da35      	bge.n	800098c <__aeabi_dmul+0x164>
 8000920:	340c      	adds	r4, #12
 8000922:	dc1b      	bgt.n	800095c <__aeabi_dmul+0x134>
 8000924:	f104 0414 	add.w	r4, r4, #20
 8000928:	f1c4 0520 	rsb	r5, r4, #32
 800092c:	fa00 f305 	lsl.w	r3, r0, r5
 8000930:	fa20 f004 	lsr.w	r0, r0, r4
 8000934:	fa01 f205 	lsl.w	r2, r1, r5
 8000938:	ea40 0002 	orr.w	r0, r0, r2
 800093c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000940:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000944:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000948:	fa21 f604 	lsr.w	r6, r1, r4
 800094c:	eb42 0106 	adc.w	r1, r2, r6
 8000950:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000954:	bf08      	it	eq
 8000956:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800095a:	bd70      	pop	{r4, r5, r6, pc}
 800095c:	f1c4 040c 	rsb	r4, r4, #12
 8000960:	f1c4 0520 	rsb	r5, r4, #32
 8000964:	fa00 f304 	lsl.w	r3, r0, r4
 8000968:	fa20 f005 	lsr.w	r0, r0, r5
 800096c:	fa01 f204 	lsl.w	r2, r1, r4
 8000970:	ea40 0002 	orr.w	r0, r0, r2
 8000974:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000978:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800097c:	f141 0100 	adc.w	r1, r1, #0
 8000980:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000984:	bf08      	it	eq
 8000986:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800098a:	bd70      	pop	{r4, r5, r6, pc}
 800098c:	f1c4 0520 	rsb	r5, r4, #32
 8000990:	fa00 f205 	lsl.w	r2, r0, r5
 8000994:	ea4e 0e02 	orr.w	lr, lr, r2
 8000998:	fa20 f304 	lsr.w	r3, r0, r4
 800099c:	fa01 f205 	lsl.w	r2, r1, r5
 80009a0:	ea43 0302 	orr.w	r3, r3, r2
 80009a4:	fa21 f004 	lsr.w	r0, r1, r4
 80009a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80009ac:	fa21 f204 	lsr.w	r2, r1, r4
 80009b0:	ea20 0002 	bic.w	r0, r0, r2
 80009b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80009b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80009bc:	bf08      	it	eq
 80009be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80009c2:	bd70      	pop	{r4, r5, r6, pc}
 80009c4:	f094 0f00 	teq	r4, #0
 80009c8:	d10f      	bne.n	80009ea <__aeabi_dmul+0x1c2>
 80009ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80009ce:	0040      	lsls	r0, r0, #1
 80009d0:	eb41 0101 	adc.w	r1, r1, r1
 80009d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009d8:	bf08      	it	eq
 80009da:	3c01      	subeq	r4, #1
 80009dc:	d0f7      	beq.n	80009ce <__aeabi_dmul+0x1a6>
 80009de:	ea41 0106 	orr.w	r1, r1, r6
 80009e2:	f095 0f00 	teq	r5, #0
 80009e6:	bf18      	it	ne
 80009e8:	4770      	bxne	lr
 80009ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80009ee:	0052      	lsls	r2, r2, #1
 80009f0:	eb43 0303 	adc.w	r3, r3, r3
 80009f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80009f8:	bf08      	it	eq
 80009fa:	3d01      	subeq	r5, #1
 80009fc:	d0f7      	beq.n	80009ee <__aeabi_dmul+0x1c6>
 80009fe:	ea43 0306 	orr.w	r3, r3, r6
 8000a02:	4770      	bx	lr
 8000a04:	ea94 0f0c 	teq	r4, ip
 8000a08:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0c:	bf18      	it	ne
 8000a0e:	ea95 0f0c 	teqne	r5, ip
 8000a12:	d00c      	beq.n	8000a2e <__aeabi_dmul+0x206>
 8000a14:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a18:	bf18      	it	ne
 8000a1a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a1e:	d1d1      	bne.n	80009c4 <__aeabi_dmul+0x19c>
 8000a20:	ea81 0103 	eor.w	r1, r1, r3
 8000a24:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000a28:	f04f 0000 	mov.w	r0, #0
 8000a2c:	bd70      	pop	{r4, r5, r6, pc}
 8000a2e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a32:	bf06      	itte	eq
 8000a34:	4610      	moveq	r0, r2
 8000a36:	4619      	moveq	r1, r3
 8000a38:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a3c:	d019      	beq.n	8000a72 <__aeabi_dmul+0x24a>
 8000a3e:	ea94 0f0c 	teq	r4, ip
 8000a42:	d102      	bne.n	8000a4a <__aeabi_dmul+0x222>
 8000a44:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000a48:	d113      	bne.n	8000a72 <__aeabi_dmul+0x24a>
 8000a4a:	ea95 0f0c 	teq	r5, ip
 8000a4e:	d105      	bne.n	8000a5c <__aeabi_dmul+0x234>
 8000a50:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000a54:	bf1c      	itt	ne
 8000a56:	4610      	movne	r0, r2
 8000a58:	4619      	movne	r1, r3
 8000a5a:	d10a      	bne.n	8000a72 <__aeabi_dmul+0x24a>
 8000a5c:	ea81 0103 	eor.w	r1, r1, r3
 8000a60:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000a64:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000a68:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000a6c:	f04f 0000 	mov.w	r0, #0
 8000a70:	bd70      	pop	{r4, r5, r6, pc}
 8000a72:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000a76:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000a7a:	bd70      	pop	{r4, r5, r6, pc}

08000a7c <__aeabi_ddiv>:
 8000a7c:	b570      	push	{r4, r5, r6, lr}
 8000a7e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000a82:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000a86:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000a8a:	bf1d      	ittte	ne
 8000a8c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000a90:	ea94 0f0c 	teqne	r4, ip
 8000a94:	ea95 0f0c 	teqne	r5, ip
 8000a98:	f000 f8a7 	bleq	8000bea <__aeabi_ddiv+0x16e>
 8000a9c:	eba4 0405 	sub.w	r4, r4, r5
 8000aa0:	ea81 0e03 	eor.w	lr, r1, r3
 8000aa4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000aa8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000aac:	f000 8088 	beq.w	8000bc0 <__aeabi_ddiv+0x144>
 8000ab0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000ab4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000ab8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000abc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000ac0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000ac4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000ac8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000acc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000ad0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000ad4:	429d      	cmp	r5, r3
 8000ad6:	bf08      	it	eq
 8000ad8:	4296      	cmpeq	r6, r2
 8000ada:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000ade:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000ae2:	d202      	bcs.n	8000aea <__aeabi_ddiv+0x6e>
 8000ae4:	085b      	lsrs	r3, r3, #1
 8000ae6:	ea4f 0232 	mov.w	r2, r2, rrx
 8000aea:	1ab6      	subs	r6, r6, r2
 8000aec:	eb65 0503 	sbc.w	r5, r5, r3
 8000af0:	085b      	lsrs	r3, r3, #1
 8000af2:	ea4f 0232 	mov.w	r2, r2, rrx
 8000af6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000afa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000afe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000b02:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000b06:	bf22      	ittt	cs
 8000b08:	1ab6      	subcs	r6, r6, r2
 8000b0a:	4675      	movcs	r5, lr
 8000b0c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000b10:	085b      	lsrs	r3, r3, #1
 8000b12:	ea4f 0232 	mov.w	r2, r2, rrx
 8000b16:	ebb6 0e02 	subs.w	lr, r6, r2
 8000b1a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000b1e:	bf22      	ittt	cs
 8000b20:	1ab6      	subcs	r6, r6, r2
 8000b22:	4675      	movcs	r5, lr
 8000b24:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000b28:	085b      	lsrs	r3, r3, #1
 8000b2a:	ea4f 0232 	mov.w	r2, r2, rrx
 8000b2e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000b32:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000b36:	bf22      	ittt	cs
 8000b38:	1ab6      	subcs	r6, r6, r2
 8000b3a:	4675      	movcs	r5, lr
 8000b3c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000b40:	085b      	lsrs	r3, r3, #1
 8000b42:	ea4f 0232 	mov.w	r2, r2, rrx
 8000b46:	ebb6 0e02 	subs.w	lr, r6, r2
 8000b4a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000b4e:	bf22      	ittt	cs
 8000b50:	1ab6      	subcs	r6, r6, r2
 8000b52:	4675      	movcs	r5, lr
 8000b54:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000b58:	ea55 0e06 	orrs.w	lr, r5, r6
 8000b5c:	d018      	beq.n	8000b90 <__aeabi_ddiv+0x114>
 8000b5e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000b62:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000b66:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000b6a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000b6e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000b72:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000b76:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000b7a:	d1c0      	bne.n	8000afe <__aeabi_ddiv+0x82>
 8000b7c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000b80:	d10b      	bne.n	8000b9a <__aeabi_ddiv+0x11e>
 8000b82:	ea41 0100 	orr.w	r1, r1, r0
 8000b86:	f04f 0000 	mov.w	r0, #0
 8000b8a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000b8e:	e7b6      	b.n	8000afe <__aeabi_ddiv+0x82>
 8000b90:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000b94:	bf04      	itt	eq
 8000b96:	4301      	orreq	r1, r0
 8000b98:	2000      	moveq	r0, #0
 8000b9a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000b9e:	bf88      	it	hi
 8000ba0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000ba4:	f63f aeaf 	bhi.w	8000906 <__aeabi_dmul+0xde>
 8000ba8:	ebb5 0c03 	subs.w	ip, r5, r3
 8000bac:	bf04      	itt	eq
 8000bae:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000bb2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000bb6:	f150 0000 	adcs.w	r0, r0, #0
 8000bba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000bbe:	bd70      	pop	{r4, r5, r6, pc}
 8000bc0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000bc4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000bc8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000bcc:	bfc2      	ittt	gt
 8000bce:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000bd2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000bd6:	bd70      	popgt	{r4, r5, r6, pc}
 8000bd8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bdc:	f04f 0e00 	mov.w	lr, #0
 8000be0:	3c01      	subs	r4, #1
 8000be2:	e690      	b.n	8000906 <__aeabi_dmul+0xde>
 8000be4:	ea45 0e06 	orr.w	lr, r5, r6
 8000be8:	e68d      	b.n	8000906 <__aeabi_dmul+0xde>
 8000bea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000bee:	ea94 0f0c 	teq	r4, ip
 8000bf2:	bf08      	it	eq
 8000bf4:	ea95 0f0c 	teqeq	r5, ip
 8000bf8:	f43f af3b 	beq.w	8000a72 <__aeabi_dmul+0x24a>
 8000bfc:	ea94 0f0c 	teq	r4, ip
 8000c00:	d10a      	bne.n	8000c18 <__aeabi_ddiv+0x19c>
 8000c02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000c06:	f47f af34 	bne.w	8000a72 <__aeabi_dmul+0x24a>
 8000c0a:	ea95 0f0c 	teq	r5, ip
 8000c0e:	f47f af25 	bne.w	8000a5c <__aeabi_dmul+0x234>
 8000c12:	4610      	mov	r0, r2
 8000c14:	4619      	mov	r1, r3
 8000c16:	e72c      	b.n	8000a72 <__aeabi_dmul+0x24a>
 8000c18:	ea95 0f0c 	teq	r5, ip
 8000c1c:	d106      	bne.n	8000c2c <__aeabi_ddiv+0x1b0>
 8000c1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000c22:	f43f aefd 	beq.w	8000a20 <__aeabi_dmul+0x1f8>
 8000c26:	4610      	mov	r0, r2
 8000c28:	4619      	mov	r1, r3
 8000c2a:	e722      	b.n	8000a72 <__aeabi_dmul+0x24a>
 8000c2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000c30:	bf18      	it	ne
 8000c32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000c36:	f47f aec5 	bne.w	80009c4 <__aeabi_dmul+0x19c>
 8000c3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000c3e:	f47f af0d 	bne.w	8000a5c <__aeabi_dmul+0x234>
 8000c42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000c46:	f47f aeeb 	bne.w	8000a20 <__aeabi_dmul+0x1f8>
 8000c4a:	e712      	b.n	8000a72 <__aeabi_dmul+0x24a>

08000c4c <__aeabi_d2f>:
 8000c4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c50:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c54:	bf24      	itt	cs
 8000c56:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c5a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c5e:	d90d      	bls.n	8000c7c <__aeabi_d2f+0x30>
 8000c60:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c64:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c68:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c6c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c70:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c74:	bf08      	it	eq
 8000c76:	f020 0001 	biceq.w	r0, r0, #1
 8000c7a:	4770      	bx	lr
 8000c7c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c80:	d121      	bne.n	8000cc6 <__aeabi_d2f+0x7a>
 8000c82:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c86:	bfbc      	itt	lt
 8000c88:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	4770      	bxlt	lr
 8000c8e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c92:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c96:	f1c2 0218 	rsb	r2, r2, #24
 8000c9a:	f1c2 0c20 	rsb	ip, r2, #32
 8000c9e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ca2:	fa20 f002 	lsr.w	r0, r0, r2
 8000ca6:	bf18      	it	ne
 8000ca8:	f040 0001 	orrne.w	r0, r0, #1
 8000cac:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000cb0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000cb4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000cb8:	ea40 000c 	orr.w	r0, r0, ip
 8000cbc:	fa23 f302 	lsr.w	r3, r3, r2
 8000cc0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cc4:	e7cc      	b.n	8000c60 <__aeabi_d2f+0x14>
 8000cc6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cca:	d107      	bne.n	8000cdc <__aeabi_d2f+0x90>
 8000ccc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cd0:	bf1e      	ittt	ne
 8000cd2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cd6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cda:	4770      	bxne	lr
 8000cdc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ce0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ce4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ce8:	4770      	bx	lr
 8000cea:	bf00      	nop

08000cec <__aeabi_uldivmod>:
 8000cec:	b953      	cbnz	r3, 8000d04 <__aeabi_uldivmod+0x18>
 8000cee:	b94a      	cbnz	r2, 8000d04 <__aeabi_uldivmod+0x18>
 8000cf0:	2900      	cmp	r1, #0
 8000cf2:	bf08      	it	eq
 8000cf4:	2800      	cmpeq	r0, #0
 8000cf6:	bf1c      	itt	ne
 8000cf8:	f04f 31ff 	movne.w	r1, #4294967295
 8000cfc:	f04f 30ff 	movne.w	r0, #4294967295
 8000d00:	f000 b982 	b.w	8001008 <__aeabi_idiv0>
 8000d04:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d08:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d0c:	f000 f806 	bl	8000d1c <__udivmoddi4>
 8000d10:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d14:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d18:	b004      	add	sp, #16
 8000d1a:	4770      	bx	lr

08000d1c <__udivmoddi4>:
 8000d1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000d20:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8000d22:	4604      	mov	r4, r0
 8000d24:	460f      	mov	r7, r1
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d148      	bne.n	8000dbc <__udivmoddi4+0xa0>
 8000d2a:	428a      	cmp	r2, r1
 8000d2c:	4694      	mov	ip, r2
 8000d2e:	d961      	bls.n	8000df4 <__udivmoddi4+0xd8>
 8000d30:	fab2 f382 	clz	r3, r2
 8000d34:	b143      	cbz	r3, 8000d48 <__udivmoddi4+0x2c>
 8000d36:	f1c3 0120 	rsb	r1, r3, #32
 8000d3a:	409f      	lsls	r7, r3
 8000d3c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d40:	409c      	lsls	r4, r3
 8000d42:	fa20 f101 	lsr.w	r1, r0, r1
 8000d46:	430f      	orrs	r7, r1
 8000d48:	ea4f 411c 	mov.w	r1, ip, lsr #16
 8000d4c:	fa1f fe8c 	uxth.w	lr, ip
 8000d50:	0c22      	lsrs	r2, r4, #16
 8000d52:	fbb7 f6f1 	udiv	r6, r7, r1
 8000d56:	fb01 7716 	mls	r7, r1, r6, r7
 8000d5a:	fb06 f00e 	mul.w	r0, r6, lr
 8000d5e:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d62:	4290      	cmp	r0, r2
 8000d64:	d908      	bls.n	8000d78 <__udivmoddi4+0x5c>
 8000d66:	eb1c 0202 	adds.w	r2, ip, r2
 8000d6a:	f106 37ff 	add.w	r7, r6, #4294967295
 8000d6e:	d202      	bcs.n	8000d76 <__udivmoddi4+0x5a>
 8000d70:	4290      	cmp	r0, r2
 8000d72:	f200 8137 	bhi.w	8000fe4 <__udivmoddi4+0x2c8>
 8000d76:	463e      	mov	r6, r7
 8000d78:	1a12      	subs	r2, r2, r0
 8000d7a:	b2a4      	uxth	r4, r4
 8000d7c:	fbb2 f0f1 	udiv	r0, r2, r1
 8000d80:	fb01 2210 	mls	r2, r1, r0, r2
 8000d84:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d88:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d8c:	45a6      	cmp	lr, r4
 8000d8e:	d908      	bls.n	8000da2 <__udivmoddi4+0x86>
 8000d90:	eb1c 0404 	adds.w	r4, ip, r4
 8000d94:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d98:	d202      	bcs.n	8000da0 <__udivmoddi4+0x84>
 8000d9a:	45a6      	cmp	lr, r4
 8000d9c:	f200 811c 	bhi.w	8000fd8 <__udivmoddi4+0x2bc>
 8000da0:	4610      	mov	r0, r2
 8000da2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000da6:	eba4 040e 	sub.w	r4, r4, lr
 8000daa:	2600      	movs	r6, #0
 8000dac:	b11d      	cbz	r5, 8000db6 <__udivmoddi4+0x9a>
 8000dae:	40dc      	lsrs	r4, r3
 8000db0:	2300      	movs	r3, #0
 8000db2:	e9c5 4300 	strd	r4, r3, [r5]
 8000db6:	4631      	mov	r1, r6
 8000db8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000dbc:	428b      	cmp	r3, r1
 8000dbe:	d909      	bls.n	8000dd4 <__udivmoddi4+0xb8>
 8000dc0:	2d00      	cmp	r5, #0
 8000dc2:	f000 80fd 	beq.w	8000fc0 <__udivmoddi4+0x2a4>
 8000dc6:	2600      	movs	r6, #0
 8000dc8:	e9c5 0100 	strd	r0, r1, [r5]
 8000dcc:	4630      	mov	r0, r6
 8000dce:	4631      	mov	r1, r6
 8000dd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000dd4:	fab3 f683 	clz	r6, r3
 8000dd8:	2e00      	cmp	r6, #0
 8000dda:	d14b      	bne.n	8000e74 <__udivmoddi4+0x158>
 8000ddc:	428b      	cmp	r3, r1
 8000dde:	f0c0 80f2 	bcc.w	8000fc6 <__udivmoddi4+0x2aa>
 8000de2:	4282      	cmp	r2, r0
 8000de4:	f240 80ef 	bls.w	8000fc6 <__udivmoddi4+0x2aa>
 8000de8:	4630      	mov	r0, r6
 8000dea:	2d00      	cmp	r5, #0
 8000dec:	d0e3      	beq.n	8000db6 <__udivmoddi4+0x9a>
 8000dee:	e9c5 4700 	strd	r4, r7, [r5]
 8000df2:	e7e0      	b.n	8000db6 <__udivmoddi4+0x9a>
 8000df4:	b902      	cbnz	r2, 8000df8 <__udivmoddi4+0xdc>
 8000df6:	deff      	udf	#255	; 0xff
 8000df8:	fab2 f382 	clz	r3, r2
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	f040 809d 	bne.w	8000f3c <__udivmoddi4+0x220>
 8000e02:	1a89      	subs	r1, r1, r2
 8000e04:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8000e08:	b297      	uxth	r7, r2
 8000e0a:	2601      	movs	r6, #1
 8000e0c:	0c20      	lsrs	r0, r4, #16
 8000e0e:	fbb1 f2fe 	udiv	r2, r1, lr
 8000e12:	fb0e 1112 	mls	r1, lr, r2, r1
 8000e16:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e1a:	fb07 f002 	mul.w	r0, r7, r2
 8000e1e:	4288      	cmp	r0, r1
 8000e20:	d90f      	bls.n	8000e42 <__udivmoddi4+0x126>
 8000e22:	eb1c 0101 	adds.w	r1, ip, r1
 8000e26:	f102 38ff 	add.w	r8, r2, #4294967295
 8000e2a:	bf2c      	ite	cs
 8000e2c:	f04f 0901 	movcs.w	r9, #1
 8000e30:	f04f 0900 	movcc.w	r9, #0
 8000e34:	4288      	cmp	r0, r1
 8000e36:	d903      	bls.n	8000e40 <__udivmoddi4+0x124>
 8000e38:	f1b9 0f00 	cmp.w	r9, #0
 8000e3c:	f000 80cf 	beq.w	8000fde <__udivmoddi4+0x2c2>
 8000e40:	4642      	mov	r2, r8
 8000e42:	1a09      	subs	r1, r1, r0
 8000e44:	b2a4      	uxth	r4, r4
 8000e46:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e4a:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e4e:	fb00 f707 	mul.w	r7, r0, r7
 8000e52:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e56:	42a7      	cmp	r7, r4
 8000e58:	d908      	bls.n	8000e6c <__udivmoddi4+0x150>
 8000e5a:	eb1c 0404 	adds.w	r4, ip, r4
 8000e5e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e62:	d202      	bcs.n	8000e6a <__udivmoddi4+0x14e>
 8000e64:	42a7      	cmp	r7, r4
 8000e66:	f200 80b4 	bhi.w	8000fd2 <__udivmoddi4+0x2b6>
 8000e6a:	4608      	mov	r0, r1
 8000e6c:	1be4      	subs	r4, r4, r7
 8000e6e:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8000e72:	e79b      	b.n	8000dac <__udivmoddi4+0x90>
 8000e74:	f1c6 0720 	rsb	r7, r6, #32
 8000e78:	40b3      	lsls	r3, r6
 8000e7a:	fa01 f406 	lsl.w	r4, r1, r6
 8000e7e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e82:	40f9      	lsrs	r1, r7
 8000e84:	40b2      	lsls	r2, r6
 8000e86:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e8a:	fa20 f307 	lsr.w	r3, r0, r7
 8000e8e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e92:	431c      	orrs	r4, r3
 8000e94:	fa1f fe8c 	uxth.w	lr, ip
 8000e98:	fa00 f306 	lsl.w	r3, r0, r6
 8000e9c:	0c20      	lsrs	r0, r4, #16
 8000e9e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000ea2:	fb09 1118 	mls	r1, r9, r8, r1
 8000ea6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000eaa:	fb08 f00e 	mul.w	r0, r8, lr
 8000eae:	4288      	cmp	r0, r1
 8000eb0:	d90f      	bls.n	8000ed2 <__udivmoddi4+0x1b6>
 8000eb2:	eb1c 0101 	adds.w	r1, ip, r1
 8000eb6:	f108 3aff 	add.w	sl, r8, #4294967295
 8000eba:	bf2c      	ite	cs
 8000ebc:	f04f 0b01 	movcs.w	fp, #1
 8000ec0:	f04f 0b00 	movcc.w	fp, #0
 8000ec4:	4288      	cmp	r0, r1
 8000ec6:	d903      	bls.n	8000ed0 <__udivmoddi4+0x1b4>
 8000ec8:	f1bb 0f00 	cmp.w	fp, #0
 8000ecc:	f000 808d 	beq.w	8000fea <__udivmoddi4+0x2ce>
 8000ed0:	46d0      	mov	r8, sl
 8000ed2:	1a09      	subs	r1, r1, r0
 8000ed4:	b2a4      	uxth	r4, r4
 8000ed6:	fbb1 f0f9 	udiv	r0, r1, r9
 8000eda:	fb09 1110 	mls	r1, r9, r0, r1
 8000ede:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ee2:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000ee6:	458e      	cmp	lr, r1
 8000ee8:	d907      	bls.n	8000efa <__udivmoddi4+0x1de>
 8000eea:	eb1c 0101 	adds.w	r1, ip, r1
 8000eee:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ef2:	d201      	bcs.n	8000ef8 <__udivmoddi4+0x1dc>
 8000ef4:	458e      	cmp	lr, r1
 8000ef6:	d87f      	bhi.n	8000ff8 <__udivmoddi4+0x2dc>
 8000ef8:	4620      	mov	r0, r4
 8000efa:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000efe:	eba1 010e 	sub.w	r1, r1, lr
 8000f02:	fba0 9802 	umull	r9, r8, r0, r2
 8000f06:	4541      	cmp	r1, r8
 8000f08:	464c      	mov	r4, r9
 8000f0a:	46c6      	mov	lr, r8
 8000f0c:	d302      	bcc.n	8000f14 <__udivmoddi4+0x1f8>
 8000f0e:	d106      	bne.n	8000f1e <__udivmoddi4+0x202>
 8000f10:	454b      	cmp	r3, r9
 8000f12:	d204      	bcs.n	8000f1e <__udivmoddi4+0x202>
 8000f14:	3801      	subs	r0, #1
 8000f16:	ebb9 0402 	subs.w	r4, r9, r2
 8000f1a:	eb68 0e0c 	sbc.w	lr, r8, ip
 8000f1e:	2d00      	cmp	r5, #0
 8000f20:	d070      	beq.n	8001004 <__udivmoddi4+0x2e8>
 8000f22:	1b1a      	subs	r2, r3, r4
 8000f24:	eb61 010e 	sbc.w	r1, r1, lr
 8000f28:	fa22 f306 	lsr.w	r3, r2, r6
 8000f2c:	fa01 f707 	lsl.w	r7, r1, r7
 8000f30:	40f1      	lsrs	r1, r6
 8000f32:	2600      	movs	r6, #0
 8000f34:	431f      	orrs	r7, r3
 8000f36:	e9c5 7100 	strd	r7, r1, [r5]
 8000f3a:	e73c      	b.n	8000db6 <__udivmoddi4+0x9a>
 8000f3c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f40:	f1c3 0020 	rsb	r0, r3, #32
 8000f44:	fa01 f203 	lsl.w	r2, r1, r3
 8000f48:	fa21 f600 	lsr.w	r6, r1, r0
 8000f4c:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000f50:	fa24 f100 	lsr.w	r1, r4, r0
 8000f54:	fa1f f78c 	uxth.w	r7, ip
 8000f58:	409c      	lsls	r4, r3
 8000f5a:	4311      	orrs	r1, r2
 8000f5c:	fbb6 f0fe 	udiv	r0, r6, lr
 8000f60:	0c0a      	lsrs	r2, r1, #16
 8000f62:	fb0e 6610 	mls	r6, lr, r0, r6
 8000f66:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 8000f6a:	fb00 f607 	mul.w	r6, r0, r7
 8000f6e:	4296      	cmp	r6, r2
 8000f70:	d90e      	bls.n	8000f90 <__udivmoddi4+0x274>
 8000f72:	eb1c 0202 	adds.w	r2, ip, r2
 8000f76:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f7a:	bf2c      	ite	cs
 8000f7c:	f04f 0901 	movcs.w	r9, #1
 8000f80:	f04f 0900 	movcc.w	r9, #0
 8000f84:	4296      	cmp	r6, r2
 8000f86:	d902      	bls.n	8000f8e <__udivmoddi4+0x272>
 8000f88:	f1b9 0f00 	cmp.w	r9, #0
 8000f8c:	d031      	beq.n	8000ff2 <__udivmoddi4+0x2d6>
 8000f8e:	4640      	mov	r0, r8
 8000f90:	1b92      	subs	r2, r2, r6
 8000f92:	b289      	uxth	r1, r1
 8000f94:	fbb2 f6fe 	udiv	r6, r2, lr
 8000f98:	fb0e 2216 	mls	r2, lr, r6, r2
 8000f9c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8000fa0:	fb06 f207 	mul.w	r2, r6, r7
 8000fa4:	428a      	cmp	r2, r1
 8000fa6:	d907      	bls.n	8000fb8 <__udivmoddi4+0x29c>
 8000fa8:	eb1c 0101 	adds.w	r1, ip, r1
 8000fac:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fb0:	d201      	bcs.n	8000fb6 <__udivmoddi4+0x29a>
 8000fb2:	428a      	cmp	r2, r1
 8000fb4:	d823      	bhi.n	8000ffe <__udivmoddi4+0x2e2>
 8000fb6:	4646      	mov	r6, r8
 8000fb8:	1a89      	subs	r1, r1, r2
 8000fba:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fbe:	e725      	b.n	8000e0c <__udivmoddi4+0xf0>
 8000fc0:	462e      	mov	r6, r5
 8000fc2:	4628      	mov	r0, r5
 8000fc4:	e6f7      	b.n	8000db6 <__udivmoddi4+0x9a>
 8000fc6:	1a84      	subs	r4, r0, r2
 8000fc8:	eb61 0303 	sbc.w	r3, r1, r3
 8000fcc:	2001      	movs	r0, #1
 8000fce:	461f      	mov	r7, r3
 8000fd0:	e70b      	b.n	8000dea <__udivmoddi4+0xce>
 8000fd2:	4464      	add	r4, ip
 8000fd4:	3802      	subs	r0, #2
 8000fd6:	e749      	b.n	8000e6c <__udivmoddi4+0x150>
 8000fd8:	4464      	add	r4, ip
 8000fda:	3802      	subs	r0, #2
 8000fdc:	e6e1      	b.n	8000da2 <__udivmoddi4+0x86>
 8000fde:	3a02      	subs	r2, #2
 8000fe0:	4461      	add	r1, ip
 8000fe2:	e72e      	b.n	8000e42 <__udivmoddi4+0x126>
 8000fe4:	3e02      	subs	r6, #2
 8000fe6:	4462      	add	r2, ip
 8000fe8:	e6c6      	b.n	8000d78 <__udivmoddi4+0x5c>
 8000fea:	f1a8 0802 	sub.w	r8, r8, #2
 8000fee:	4461      	add	r1, ip
 8000ff0:	e76f      	b.n	8000ed2 <__udivmoddi4+0x1b6>
 8000ff2:	3802      	subs	r0, #2
 8000ff4:	4462      	add	r2, ip
 8000ff6:	e7cb      	b.n	8000f90 <__udivmoddi4+0x274>
 8000ff8:	3802      	subs	r0, #2
 8000ffa:	4461      	add	r1, ip
 8000ffc:	e77d      	b.n	8000efa <__udivmoddi4+0x1de>
 8000ffe:	3e02      	subs	r6, #2
 8001000:	4461      	add	r1, ip
 8001002:	e7d9      	b.n	8000fb8 <__udivmoddi4+0x29c>
 8001004:	462e      	mov	r6, r5
 8001006:	e6d6      	b.n	8000db6 <__udivmoddi4+0x9a>

08001008 <__aeabi_idiv0>:
 8001008:	4770      	bx	lr
 800100a:	bf00      	nop

0800100c <tx_application_define>:
  * @brief  Define the initial system.
  * @param  first_unused_memory : Pointer to the first unused memory
  * @retval None
  */
VOID tx_application_define(VOID *first_unused_memory)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b086      	sub	sp, #24
 8001010:	af02      	add	r7, sp, #8
 8001012:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN  tx_application_define_1*/

  /* USER CODE END  tx_application_define_1 */
#if (USE_STATIC_ALLOCATION == 1)
  UINT status = TX_SUCCESS;
 8001014:	2300      	movs	r3, #0
 8001016:	60fb      	str	r3, [r7, #12]
  VOID *memory_ptr;

  if (tx_byte_pool_create(&tx_app_byte_pool, "Tx App memory pool", tx_byte_pool_buffer, TX_APP_MEM_POOL_SIZE) != TX_SUCCESS)
 8001018:	2334      	movs	r3, #52	; 0x34
 800101a:	9300      	str	r3, [sp, #0]
 800101c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001020:	4a0a      	ldr	r2, [pc, #40]	; (800104c <tx_application_define+0x40>)
 8001022:	490b      	ldr	r1, [pc, #44]	; (8001050 <tx_application_define+0x44>)
 8001024:	480b      	ldr	r0, [pc, #44]	; (8001054 <tx_application_define+0x48>)
 8001026:	f011 f945 	bl	80122b4 <_txe_byte_pool_create>
 800102a:	4603      	mov	r3, r0
 800102c:	2b00      	cmp	r3, #0
 800102e:	d109      	bne.n	8001044 <tx_application_define+0x38>
  {
    /* USER CODE BEGIN TX_Byte_Pool_Success */

    /* USER CODE END TX_Byte_Pool_Success */

    memory_ptr = (VOID *)&tx_app_byte_pool;
 8001030:	4b08      	ldr	r3, [pc, #32]	; (8001054 <tx_application_define+0x48>)
 8001032:	60bb      	str	r3, [r7, #8]
    status = App_ThreadX_Init(memory_ptr);
 8001034:	68b8      	ldr	r0, [r7, #8]
 8001036:	f003 f961 	bl	80042fc <App_ThreadX_Init>
 800103a:	60f8      	str	r0, [r7, #12]
    if (status != TX_SUCCESS)
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	2b00      	cmp	r3, #0
 8001040:	d000      	beq.n	8001044 <tx_application_define+0x38>
    {
      /* USER CODE BEGIN  App_ThreadX_Init_Error */
      while(1)
 8001042:	e7fe      	b.n	8001042 <tx_application_define+0x36>
  /* USER CODE BEGIN DYNAMIC_MEM_ALLOC */
  (void)first_unused_memory;
  /* USER CODE END DYNAMIC_MEM_ALLOC */
#endif

}
 8001044:	bf00      	nop
 8001046:	3710      	adds	r7, #16
 8001048:	46bd      	mov	sp, r7
 800104a:	bd80      	pop	{r7, pc}
 800104c:	20000094 	.word	0x20000094
 8001050:	080134a8 	.word	0x080134a8
 8001054:	20000494 	.word	0x20000494

08001058 <BSP_I2C1_Init>:
#define i2c_initialized (1)
#define i2c_uninitialized (0)


void BSP_I2C1_Init(void)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	af00      	add	r7, sp, #0
	if(hi2c1.State == HAL_I2C_STATE_RESET)
 800105c:	4b04      	ldr	r3, [pc, #16]	; (8001070 <BSP_I2C1_Init+0x18>)
 800105e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001062:	b2db      	uxtb	r3, r3
 8001064:	2b00      	cmp	r3, #0
 8001066:	d101      	bne.n	800106c <BSP_I2C1_Init+0x14>
	{
        I2C1_Init();
 8001068:	f004 fad6 	bl	8005618 <I2C1_Init>
	}
}
 800106c:	bf00      	nop
 800106e:	bd80      	pop	{r7, pc}
 8001070:	20002cbc 	.word	0x20002cbc

08001074 <BSP_I2C1_DeInit>:

void BSP_I2C1_DeInit(void)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	af00      	add	r7, sp, #0
	HAL_I2C_DeInit(&hi2c1);
 8001078:	4802      	ldr	r0, [pc, #8]	; (8001084 <BSP_I2C1_DeInit+0x10>)
 800107a:	f007 fd50 	bl	8008b1e <HAL_I2C_DeInit>
}
 800107e:	bf00      	nop
 8001080:	bd80      	pop	{r7, pc}
 8001082:	bf00      	nop
 8001084:	20002cbc 	.word	0x20002cbc

08001088 <BSP_I2C2_Init>:

void BSP_I2C2_Init(void)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	af00      	add	r7, sp, #0
	if(hi2c2.State == HAL_I2C_STATE_RESET)
 800108c:	4b04      	ldr	r3, [pc, #16]	; (80010a0 <BSP_I2C2_Init+0x18>)
 800108e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001092:	b2db      	uxtb	r3, r3
 8001094:	2b00      	cmp	r3, #0
 8001096:	d101      	bne.n	800109c <BSP_I2C2_Init+0x14>
	{
        I2C2_Init();
 8001098:	f004 fafe 	bl	8005698 <I2C2_Init>
	}
}
 800109c:	bf00      	nop
 800109e:	bd80      	pop	{r7, pc}
 80010a0:	20002d08 	.word	0x20002d08

080010a4 <BSP_I2C2_DeInit>:

void BSP_I2C2_DeInit(void)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	af00      	add	r7, sp, #0
	HAL_I2C_DeInit(&hi2c2);
 80010a8:	4802      	ldr	r0, [pc, #8]	; (80010b4 <BSP_I2C2_DeInit+0x10>)
 80010aa:	f007 fd38 	bl	8008b1e <HAL_I2C_DeInit>
}
 80010ae:	bf00      	nop
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	bf00      	nop
 80010b4:	20002d08 	.word	0x20002d08

080010b8 <BSP_I2C1_WriteReg16>:
int32_t BSP_I2C1_ReadReg(uint16_t Address, uint16_t Reg, uint8_t *pData, uint16_t Length){
    int32_t ret = HAL_I2C_Mem_Read(&hi2c1, Address, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length, 1000);
    return ret;
}

int32_t BSP_I2C1_WriteReg16(uint16_t Address, uint16_t Reg, uint8_t *pData, uint16_t Length){
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b08a      	sub	sp, #40	; 0x28
 80010bc:	af04      	add	r7, sp, #16
 80010be:	60ba      	str	r2, [r7, #8]
 80010c0:	461a      	mov	r2, r3
 80010c2:	4603      	mov	r3, r0
 80010c4:	81fb      	strh	r3, [r7, #14]
 80010c6:	460b      	mov	r3, r1
 80010c8:	81bb      	strh	r3, [r7, #12]
 80010ca:	4613      	mov	r3, r2
 80010cc:	80fb      	strh	r3, [r7, #6]
    int32_t ret = HAL_I2C_Mem_Write(&hi2c1, Address, Reg, I2C_MEMADD_SIZE_16BIT, pData, Length, 1000);
 80010ce:	89ba      	ldrh	r2, [r7, #12]
 80010d0:	89f9      	ldrh	r1, [r7, #14]
 80010d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010d6:	9302      	str	r3, [sp, #8]
 80010d8:	88fb      	ldrh	r3, [r7, #6]
 80010da:	9301      	str	r3, [sp, #4]
 80010dc:	68bb      	ldr	r3, [r7, #8]
 80010de:	9300      	str	r3, [sp, #0]
 80010e0:	2302      	movs	r3, #2
 80010e2:	4805      	ldr	r0, [pc, #20]	; (80010f8 <BSP_I2C1_WriteReg16+0x40>)
 80010e4:	f007 fd4a 	bl	8008b7c <HAL_I2C_Mem_Write>
 80010e8:	4603      	mov	r3, r0
 80010ea:	617b      	str	r3, [r7, #20]
    return ret;
 80010ec:	697b      	ldr	r3, [r7, #20]
}
 80010ee:	4618      	mov	r0, r3
 80010f0:	3718      	adds	r7, #24
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	20002cbc 	.word	0x20002cbc

080010fc <BSP_I2C1_ReadReg16>:

int32_t BSP_I2C1_ReadReg16(uint16_t Address, uint16_t Reg, uint8_t *pData, uint16_t Length){
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b08a      	sub	sp, #40	; 0x28
 8001100:	af04      	add	r7, sp, #16
 8001102:	60ba      	str	r2, [r7, #8]
 8001104:	461a      	mov	r2, r3
 8001106:	4603      	mov	r3, r0
 8001108:	81fb      	strh	r3, [r7, #14]
 800110a:	460b      	mov	r3, r1
 800110c:	81bb      	strh	r3, [r7, #12]
 800110e:	4613      	mov	r3, r2
 8001110:	80fb      	strh	r3, [r7, #6]
    int32_t ret = HAL_I2C_Mem_Read(&hi2c1, Address, Reg, I2C_MEMADD_SIZE_16BIT, pData, Length, 1000);
 8001112:	89ba      	ldrh	r2, [r7, #12]
 8001114:	89f9      	ldrh	r1, [r7, #14]
 8001116:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800111a:	9302      	str	r3, [sp, #8]
 800111c:	88fb      	ldrh	r3, [r7, #6]
 800111e:	9301      	str	r3, [sp, #4]
 8001120:	68bb      	ldr	r3, [r7, #8]
 8001122:	9300      	str	r3, [sp, #0]
 8001124:	2302      	movs	r3, #2
 8001126:	4805      	ldr	r0, [pc, #20]	; (800113c <BSP_I2C1_ReadReg16+0x40>)
 8001128:	f007 fe3c 	bl	8008da4 <HAL_I2C_Mem_Read>
 800112c:	4603      	mov	r3, r0
 800112e:	617b      	str	r3, [r7, #20]
    return ret;
 8001130:	697b      	ldr	r3, [r7, #20]
}
 8001132:	4618      	mov	r0, r3
 8001134:	3718      	adds	r7, #24
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}
 800113a:	bf00      	nop
 800113c:	20002cbc 	.word	0x20002cbc

08001140 <BSP_I2C2_WriteRegHTS221>:

int32_t BSP_I2C2_WriteRegHTS221(uint8_t Reg, uint8_t *pData, uint8_t Length){
 8001140:	b580      	push	{r7, lr}
 8001142:	b088      	sub	sp, #32
 8001144:	af04      	add	r7, sp, #16
 8001146:	4603      	mov	r3, r0
 8001148:	6039      	str	r1, [r7, #0]
 800114a:	71fb      	strb	r3, [r7, #7]
 800114c:	4613      	mov	r3, r2
 800114e:	71bb      	strb	r3, [r7, #6]
    int32_t ret = HAL_I2C_Mem_Write(&hi2c2, HTS221_I2C_ADDR, Reg | 0x80, I2C_MEMADD_SIZE_8BIT, pData, Length, 100);
 8001150:	79fb      	ldrb	r3, [r7, #7]
 8001152:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001156:	b2db      	uxtb	r3, r3
 8001158:	b29a      	uxth	r2, r3
 800115a:	79bb      	ldrb	r3, [r7, #6]
 800115c:	b29b      	uxth	r3, r3
 800115e:	2164      	movs	r1, #100	; 0x64
 8001160:	9102      	str	r1, [sp, #8]
 8001162:	9301      	str	r3, [sp, #4]
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	9300      	str	r3, [sp, #0]
 8001168:	2301      	movs	r3, #1
 800116a:	21be      	movs	r1, #190	; 0xbe
 800116c:	4804      	ldr	r0, [pc, #16]	; (8001180 <BSP_I2C2_WriteRegHTS221+0x40>)
 800116e:	f007 fd05 	bl	8008b7c <HAL_I2C_Mem_Write>
 8001172:	4603      	mov	r3, r0
 8001174:	60fb      	str	r3, [r7, #12]
    return ret;
 8001176:	68fb      	ldr	r3, [r7, #12]
}
 8001178:	4618      	mov	r0, r3
 800117a:	3710      	adds	r7, #16
 800117c:	46bd      	mov	sp, r7
 800117e:	bd80      	pop	{r7, pc}
 8001180:	20002d08 	.word	0x20002d08

08001184 <BSP_I2C2_ReadRegHTS221>:

int32_t BSP_I2C2_ReadRegHTS221(uint8_t Reg, uint8_t *pData, uint8_t Length){
 8001184:	b580      	push	{r7, lr}
 8001186:	b088      	sub	sp, #32
 8001188:	af04      	add	r7, sp, #16
 800118a:	4603      	mov	r3, r0
 800118c:	6039      	str	r1, [r7, #0]
 800118e:	71fb      	strb	r3, [r7, #7]
 8001190:	4613      	mov	r3, r2
 8001192:	71bb      	strb	r3, [r7, #6]
    int32_t ret = HAL_I2C_Mem_Read(&hi2c2, HTS221_I2C_ADDR, Reg | 0x80, I2C_MEMADD_SIZE_8BIT, pData, Length, 100);
 8001194:	79fb      	ldrb	r3, [r7, #7]
 8001196:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800119a:	b2db      	uxtb	r3, r3
 800119c:	b29a      	uxth	r2, r3
 800119e:	79bb      	ldrb	r3, [r7, #6]
 80011a0:	b29b      	uxth	r3, r3
 80011a2:	2164      	movs	r1, #100	; 0x64
 80011a4:	9102      	str	r1, [sp, #8]
 80011a6:	9301      	str	r3, [sp, #4]
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	9300      	str	r3, [sp, #0]
 80011ac:	2301      	movs	r3, #1
 80011ae:	21be      	movs	r1, #190	; 0xbe
 80011b0:	4804      	ldr	r0, [pc, #16]	; (80011c4 <BSP_I2C2_ReadRegHTS221+0x40>)
 80011b2:	f007 fdf7 	bl	8008da4 <HAL_I2C_Mem_Read>
 80011b6:	4603      	mov	r3, r0
 80011b8:	60fb      	str	r3, [r7, #12]
    return ret;
 80011ba:	68fb      	ldr	r3, [r7, #12]
}
 80011bc:	4618      	mov	r0, r3
 80011be:	3710      	adds	r7, #16
 80011c0:	46bd      	mov	sp, r7
 80011c2:	bd80      	pop	{r7, pc}
 80011c4:	20002d08 	.word	0x20002d08

080011c8 <BSP_I2C2_ReadRegISM330DHCX>:

int32_t BSP_I2C2_ReadRegISM330DHCX(uint8_t Reg, uint8_t *pData, uint8_t Length)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b088      	sub	sp, #32
 80011cc:	af04      	add	r7, sp, #16
 80011ce:	4603      	mov	r3, r0
 80011d0:	6039      	str	r1, [r7, #0]
 80011d2:	71fb      	strb	r3, [r7, #7]
 80011d4:	4613      	mov	r3, r2
 80011d6:	71bb      	strb	r3, [r7, #6]
	int32_t ret = HAL_I2C_Mem_Read(&hi2c2, ISM330DHCX_I2C_ADDR, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length, 100);
 80011d8:	79fb      	ldrb	r3, [r7, #7]
 80011da:	b29a      	uxth	r2, r3
 80011dc:	79bb      	ldrb	r3, [r7, #6]
 80011de:	b29b      	uxth	r3, r3
 80011e0:	2164      	movs	r1, #100	; 0x64
 80011e2:	9102      	str	r1, [sp, #8]
 80011e4:	9301      	str	r3, [sp, #4]
 80011e6:	683b      	ldr	r3, [r7, #0]
 80011e8:	9300      	str	r3, [sp, #0]
 80011ea:	2301      	movs	r3, #1
 80011ec:	21d6      	movs	r1, #214	; 0xd6
 80011ee:	4805      	ldr	r0, [pc, #20]	; (8001204 <BSP_I2C2_ReadRegISM330DHCX+0x3c>)
 80011f0:	f007 fdd8 	bl	8008da4 <HAL_I2C_Mem_Read>
 80011f4:	4603      	mov	r3, r0
 80011f6:	60fb      	str	r3, [r7, #12]
    return ret;
 80011f8:	68fb      	ldr	r3, [r7, #12]
}
 80011fa:	4618      	mov	r0, r3
 80011fc:	3710      	adds	r7, #16
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}
 8001202:	bf00      	nop
 8001204:	20002d08 	.word	0x20002d08

08001208 <BSP_I2C2_WriteRegISM330DHCX>:

int32_t BSP_I2C2_WriteRegISM330DHCX(uint8_t Reg, uint8_t *pData, uint8_t Length)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b088      	sub	sp, #32
 800120c:	af04      	add	r7, sp, #16
 800120e:	4603      	mov	r3, r0
 8001210:	6039      	str	r1, [r7, #0]
 8001212:	71fb      	strb	r3, [r7, #7]
 8001214:	4613      	mov	r3, r2
 8001216:	71bb      	strb	r3, [r7, #6]
	int32_t ret = HAL_I2C_Mem_Write(&hi2c2, ISM330DHCX_I2C_ADDR, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length, 100);
 8001218:	79fb      	ldrb	r3, [r7, #7]
 800121a:	b29a      	uxth	r2, r3
 800121c:	79bb      	ldrb	r3, [r7, #6]
 800121e:	b29b      	uxth	r3, r3
 8001220:	2164      	movs	r1, #100	; 0x64
 8001222:	9102      	str	r1, [sp, #8]
 8001224:	9301      	str	r3, [sp, #4]
 8001226:	683b      	ldr	r3, [r7, #0]
 8001228:	9300      	str	r3, [sp, #0]
 800122a:	2301      	movs	r3, #1
 800122c:	21d6      	movs	r1, #214	; 0xd6
 800122e:	4805      	ldr	r0, [pc, #20]	; (8001244 <BSP_I2C2_WriteRegISM330DHCX+0x3c>)
 8001230:	f007 fca4 	bl	8008b7c <HAL_I2C_Mem_Write>
 8001234:	4603      	mov	r3, r0
 8001236:	60fb      	str	r3, [r7, #12]
    return ret;
 8001238:	68fb      	ldr	r3, [r7, #12]
}
 800123a:	4618      	mov	r0, r3
 800123c:	3710      	adds	r7, #16
 800123e:	46bd      	mov	sp, r7
 8001240:	bd80      	pop	{r7, pc}
 8001242:	bf00      	nop
 8001244:	20002d08 	.word	0x20002d08

08001248 <BSP_ReadPinISM330DHCX>:

int32_t BSP_ReadPinISM330DHCX(void)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	af00      	add	r7, sp, #0
    return HAL_GPIO_ReadPin(Mems_ISM330DLC_INT1_GPIO_Port, Mems_ISM330DLC_INT1_Pin);
 800124c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001250:	4802      	ldr	r0, [pc, #8]	; (800125c <BSP_ReadPinISM330DHCX+0x14>)
 8001252:	f007 fb8b 	bl	800896c <HAL_GPIO_ReadPin>
 8001256:	4603      	mov	r3, r0
}
 8001258:	4618      	mov	r0, r3
 800125a:	bd80      	pop	{r7, pc}
 800125c:	42021000 	.word	0x42021000

08001260 <BSP_ISM330DHCX_IO_Init>:

void BSP_ISM330DHCX_IO_Init(void)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	af00      	add	r7, sp, #0
    MotionSensor_GPIO_Init();
 8001264:	f004 f872 	bl	800534c <MotionSensor_GPIO_Init>
	BSP_I2C2_Init();
 8001268:	f7ff ff0e 	bl	8001088 <BSP_I2C2_Init>
}
 800126c:	bf00      	nop
 800126e:	bd80      	pop	{r7, pc}

08001270 <BSP_LPS22HH_IO_Init>:

void BSP_LPS22HH_IO_Init(void)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	af00      	add	r7, sp, #0
	PressureSensor_GPIO_Init();
 8001274:	f004 f88a 	bl	800538c <PressureSensor_GPIO_Init>
	BSP_I2C2_Init();
 8001278:	f7ff ff06 	bl	8001088 <BSP_I2C2_Init>
}
 800127c:	bf00      	nop
 800127e:	bd80      	pop	{r7, pc}

08001280 <BSP_I2C2_ReadRegLPS22HH>:

int32_t BSP_I2C2_ReadRegLPS22HH(uint8_t Reg, uint8_t *pData, uint8_t Length)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b088      	sub	sp, #32
 8001284:	af04      	add	r7, sp, #16
 8001286:	4603      	mov	r3, r0
 8001288:	6039      	str	r1, [r7, #0]
 800128a:	71fb      	strb	r3, [r7, #7]
 800128c:	4613      	mov	r3, r2
 800128e:	71bb      	strb	r3, [r7, #6]
	int32_t ret = HAL_I2C_Mem_Read(&hi2c2, LPS22HH_I2C_ADDR, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length, 100);
 8001290:	79fb      	ldrb	r3, [r7, #7]
 8001292:	b29a      	uxth	r2, r3
 8001294:	79bb      	ldrb	r3, [r7, #6]
 8001296:	b29b      	uxth	r3, r3
 8001298:	2164      	movs	r1, #100	; 0x64
 800129a:	9102      	str	r1, [sp, #8]
 800129c:	9301      	str	r3, [sp, #4]
 800129e:	683b      	ldr	r3, [r7, #0]
 80012a0:	9300      	str	r3, [sp, #0]
 80012a2:	2301      	movs	r3, #1
 80012a4:	21ba      	movs	r1, #186	; 0xba
 80012a6:	4805      	ldr	r0, [pc, #20]	; (80012bc <BSP_I2C2_ReadRegLPS22HH+0x3c>)
 80012a8:	f007 fd7c 	bl	8008da4 <HAL_I2C_Mem_Read>
 80012ac:	4603      	mov	r3, r0
 80012ae:	60fb      	str	r3, [r7, #12]
    return ret;
 80012b0:	68fb      	ldr	r3, [r7, #12]
}
 80012b2:	4618      	mov	r0, r3
 80012b4:	3710      	adds	r7, #16
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	bf00      	nop
 80012bc:	20002d08 	.word	0x20002d08

080012c0 <BSP_I2C2_WriteRegLPS22HH>:

int32_t BSP_I2C2_WriteRegLPS22HH(uint8_t Reg, uint8_t *pData, uint8_t Length)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b088      	sub	sp, #32
 80012c4:	af04      	add	r7, sp, #16
 80012c6:	4603      	mov	r3, r0
 80012c8:	6039      	str	r1, [r7, #0]
 80012ca:	71fb      	strb	r3, [r7, #7]
 80012cc:	4613      	mov	r3, r2
 80012ce:	71bb      	strb	r3, [r7, #6]
	int32_t ret = HAL_I2C_Mem_Write(&hi2c2, LPS22HH_I2C_ADDR, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length, 100);
 80012d0:	79fb      	ldrb	r3, [r7, #7]
 80012d2:	b29a      	uxth	r2, r3
 80012d4:	79bb      	ldrb	r3, [r7, #6]
 80012d6:	b29b      	uxth	r3, r3
 80012d8:	2164      	movs	r1, #100	; 0x64
 80012da:	9102      	str	r1, [sp, #8]
 80012dc:	9301      	str	r3, [sp, #4]
 80012de:	683b      	ldr	r3, [r7, #0]
 80012e0:	9300      	str	r3, [sp, #0]
 80012e2:	2301      	movs	r3, #1
 80012e4:	21ba      	movs	r1, #186	; 0xba
 80012e6:	4813      	ldr	r0, [pc, #76]	; (8001334 <BSP_I2C2_WriteRegLPS22HH+0x74>)
 80012e8:	f007 fc48 	bl	8008b7c <HAL_I2C_Mem_Write>
 80012ec:	4603      	mov	r3, r0
 80012ee:	60fb      	str	r3, [r7, #12]
	if(ret != HAL_OK && hi2c2.ErrorCode == HAL_I2C_ERROR_AF)
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d013      	beq.n	800131e <BSP_I2C2_WriteRegLPS22HH+0x5e>
 80012f6:	4b0f      	ldr	r3, [pc, #60]	; (8001334 <BSP_I2C2_WriteRegLPS22HH+0x74>)
 80012f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012fa:	2b04      	cmp	r3, #4
 80012fc:	d10f      	bne.n	800131e <BSP_I2C2_WriteRegLPS22HH+0x5e>
	{
		ret = HAL_I2C_Mem_Write(&hi2c2, LPS22HH_I2C_ADDR, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length, 100); //Retry
 80012fe:	79fb      	ldrb	r3, [r7, #7]
 8001300:	b29a      	uxth	r2, r3
 8001302:	79bb      	ldrb	r3, [r7, #6]
 8001304:	b29b      	uxth	r3, r3
 8001306:	2164      	movs	r1, #100	; 0x64
 8001308:	9102      	str	r1, [sp, #8]
 800130a:	9301      	str	r3, [sp, #4]
 800130c:	683b      	ldr	r3, [r7, #0]
 800130e:	9300      	str	r3, [sp, #0]
 8001310:	2301      	movs	r3, #1
 8001312:	21ba      	movs	r1, #186	; 0xba
 8001314:	4807      	ldr	r0, [pc, #28]	; (8001334 <BSP_I2C2_WriteRegLPS22HH+0x74>)
 8001316:	f007 fc31 	bl	8008b7c <HAL_I2C_Mem_Write>
 800131a:	4603      	mov	r3, r0
 800131c:	60fb      	str	r3, [r7, #12]
	}

	if(ret != HAL_OK)
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	2b00      	cmp	r3, #0
 8001322:	d002      	beq.n	800132a <BSP_I2C2_WriteRegLPS22HH+0x6a>
	{
		return hi2c2.ErrorCode;
 8001324:	4b03      	ldr	r3, [pc, #12]	; (8001334 <BSP_I2C2_WriteRegLPS22HH+0x74>)
 8001326:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001328:	e000      	b.n	800132c <BSP_I2C2_WriteRegLPS22HH+0x6c>
	}
    return ret;
 800132a:	68fb      	ldr	r3, [r7, #12]
}
 800132c:	4618      	mov	r0, r3
 800132e:	3710      	adds	r7, #16
 8001330:	46bd      	mov	sp, r7
 8001332:	bd80      	pop	{r7, pc}
 8001334:	20002d08 	.word	0x20002d08

08001338 <BSP_ReadPinLPS22HH>:

int32_t BSP_ReadPinLPS22HH(void)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	af00      	add	r7, sp, #0
	return HAL_GPIO_ReadPin(Mems_INT_LPS22HH_GPIO_Port, Mems_INT_LPS22HH_Pin);
 800133c:	2104      	movs	r1, #4
 800133e:	4803      	ldr	r0, [pc, #12]	; (800134c <BSP_ReadPinLPS22HH+0x14>)
 8001340:	f007 fb14 	bl	800896c <HAL_GPIO_ReadPin>
 8001344:	4603      	mov	r3, r0
}
 8001346:	4618      	mov	r0, r3
 8001348:	bd80      	pop	{r7, pc}
 800134a:	bf00      	nop
 800134c:	42021800 	.word	0x42021800

08001350 <BSP_IIS2MDC_IO_Init>:

void BSP_IIS2MDC_IO_Init(void)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	af00      	add	r7, sp, #0
	MagSensor_GPIO_Init();
 8001354:	f004 f83a 	bl	80053cc <MagSensor_GPIO_Init>
	BSP_I2C2_Init();
 8001358:	f7ff fe96 	bl	8001088 <BSP_I2C2_Init>
}
 800135c:	bf00      	nop
 800135e:	bd80      	pop	{r7, pc}

08001360 <BSP_I2C2_ReadRegIIS2MDC>:

int32_t BSP_I2C2_ReadRegIIS2MDC(uint8_t Reg, uint8_t *pData, uint8_t Length)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b088      	sub	sp, #32
 8001364:	af04      	add	r7, sp, #16
 8001366:	4603      	mov	r3, r0
 8001368:	6039      	str	r1, [r7, #0]
 800136a:	71fb      	strb	r3, [r7, #7]
 800136c:	4613      	mov	r3, r2
 800136e:	71bb      	strb	r3, [r7, #6]
	int32_t ret = HAL_I2C_Mem_Read(&hi2c2, IIS2MDC_I2C_ADDR, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length, 100);
 8001370:	79fb      	ldrb	r3, [r7, #7]
 8001372:	b29a      	uxth	r2, r3
 8001374:	79bb      	ldrb	r3, [r7, #6]
 8001376:	b29b      	uxth	r3, r3
 8001378:	2164      	movs	r1, #100	; 0x64
 800137a:	9102      	str	r1, [sp, #8]
 800137c:	9301      	str	r3, [sp, #4]
 800137e:	683b      	ldr	r3, [r7, #0]
 8001380:	9300      	str	r3, [sp, #0]
 8001382:	2301      	movs	r3, #1
 8001384:	213c      	movs	r1, #60	; 0x3c
 8001386:	4808      	ldr	r0, [pc, #32]	; (80013a8 <BSP_I2C2_ReadRegIIS2MDC+0x48>)
 8001388:	f007 fd0c 	bl	8008da4 <HAL_I2C_Mem_Read>
 800138c:	4603      	mov	r3, r0
 800138e:	60fb      	str	r3, [r7, #12]
	if(ret != HAL_OK)
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	2b00      	cmp	r3, #0
 8001394:	d002      	beq.n	800139c <BSP_I2C2_ReadRegIIS2MDC+0x3c>
	{
		return hi2c2.ErrorCode;
 8001396:	4b04      	ldr	r3, [pc, #16]	; (80013a8 <BSP_I2C2_ReadRegIIS2MDC+0x48>)
 8001398:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800139a:	e000      	b.n	800139e <BSP_I2C2_ReadRegIIS2MDC+0x3e>
	}
    return ret;
 800139c:	68fb      	ldr	r3, [r7, #12]
}
 800139e:	4618      	mov	r0, r3
 80013a0:	3710      	adds	r7, #16
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bd80      	pop	{r7, pc}
 80013a6:	bf00      	nop
 80013a8:	20002d08 	.word	0x20002d08

080013ac <BSP_I2C2_WriteRegIIS2MDC>:

int32_t BSP_I2C2_WriteRegIIS2MDC(uint8_t Reg, uint8_t *pData, uint8_t Length)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b088      	sub	sp, #32
 80013b0:	af04      	add	r7, sp, #16
 80013b2:	4603      	mov	r3, r0
 80013b4:	6039      	str	r1, [r7, #0]
 80013b6:	71fb      	strb	r3, [r7, #7]
 80013b8:	4613      	mov	r3, r2
 80013ba:	71bb      	strb	r3, [r7, #6]
	int32_t ret = HAL_I2C_Mem_Write(&hi2c2, IIS2MDC_I2C_ADDR, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length, 100);
 80013bc:	79fb      	ldrb	r3, [r7, #7]
 80013be:	b29a      	uxth	r2, r3
 80013c0:	79bb      	ldrb	r3, [r7, #6]
 80013c2:	b29b      	uxth	r3, r3
 80013c4:	2164      	movs	r1, #100	; 0x64
 80013c6:	9102      	str	r1, [sp, #8]
 80013c8:	9301      	str	r3, [sp, #4]
 80013ca:	683b      	ldr	r3, [r7, #0]
 80013cc:	9300      	str	r3, [sp, #0]
 80013ce:	2301      	movs	r3, #1
 80013d0:	213c      	movs	r1, #60	; 0x3c
 80013d2:	4808      	ldr	r0, [pc, #32]	; (80013f4 <BSP_I2C2_WriteRegIIS2MDC+0x48>)
 80013d4:	f007 fbd2 	bl	8008b7c <HAL_I2C_Mem_Write>
 80013d8:	4603      	mov	r3, r0
 80013da:	60fb      	str	r3, [r7, #12]
	if(ret != HAL_OK)
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d002      	beq.n	80013e8 <BSP_I2C2_WriteRegIIS2MDC+0x3c>
	{
		return hi2c2.ErrorCode;
 80013e2:	4b04      	ldr	r3, [pc, #16]	; (80013f4 <BSP_I2C2_WriteRegIIS2MDC+0x48>)
 80013e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013e6:	e000      	b.n	80013ea <BSP_I2C2_WriteRegIIS2MDC+0x3e>
	}
    return ret;
 80013e8:	68fb      	ldr	r3, [r7, #12]
}
 80013ea:	4618      	mov	r0, r3
 80013ec:	3710      	adds	r7, #16
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}
 80013f2:	bf00      	nop
 80013f4:	20002d08 	.word	0x20002d08

080013f8 <BSP_ReadPinIIS2MDC>:

int32_t BSP_ReadPinIIS2MDC(void)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	af00      	add	r7, sp, #0
	return HAL_GPIO_ReadPin(Mems_INT_IIS2MDC_GPIO_Port, Mems_INT_IIS2MDC_Pin);
 80013fc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001400:	4802      	ldr	r0, [pc, #8]	; (800140c <BSP_ReadPinIIS2MDC+0x14>)
 8001402:	f007 fab3 	bl	800896c <HAL_GPIO_ReadPin>
 8001406:	4603      	mov	r3, r0
}
 8001408:	4618      	mov	r0, r3
 800140a:	bd80      	pop	{r7, pc}
 800140c:	42020c00 	.word	0x42020c00

08001410 <BSP_GetTick>:

uint32_t BSP_GetTick(void)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	af00      	add	r7, sp, #0
    return HAL_GetTick();
 8001414:	f005 f878 	bl	8006508 <HAL_GetTick>
 8001418:	4603      	mov	r3, r0
}
 800141a:	4618      	mov	r0, r3
 800141c:	bd80      	pop	{r7, pc}

0800141e <BSP_CameraInit>:

static void BSP_CameraHwReset(void);
static void BSP_CameraHWInit(void);

BSP_CameraStatus_t BSP_CameraInit(void)
{
 800141e:	b580      	push	{r7, lr}
 8001420:	af00      	add	r7, sp, #0
	MX_GPDMA1_Init();
 8001422:	f003 fbfb 	bl	8004c1c <MX_GPDMA1_Init>
	MX_DCMI_Init();
 8001426:	f003 facb 	bl	80049c0 <MX_DCMI_Init>
	BSP_CameraHwReset();//Reset it
 800142a:	f000 f817 	bl	800145c <BSP_CameraHwReset>
    BSP_CameraHWInit(); //Init OV5460 driver
 800142e:	f000 f839 	bl	80014a4 <BSP_CameraHWInit>
	return CameraOK;
 8001432:	2300      	movs	r3, #0
}
 8001434:	4618      	mov	r0, r3
 8001436:	bd80      	pop	{r7, pc}

08001438 <BSP_CameraStart>:

void BSP_CameraStart(uint8_t* Buffer){
 8001438:	b580      	push	{r7, lr}
 800143a:	b082      	sub	sp, #8
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
	  HAL_DCMI_Start_DMA(&hdcmi, DCMI_MODE_CONTINUOUS, (uint32_t)Buffer, CAMERA_DATA_SIZE);
 8001440:	687a      	ldr	r2, [r7, #4]
 8001442:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 8001446:	2100      	movs	r1, #0
 8001448:	4803      	ldr	r0, [pc, #12]	; (8001458 <BSP_CameraStart+0x20>)
 800144a:	f005 facf 	bl	80069ec <HAL_DCMI_Start_DMA>
}
 800144e:	bf00      	nop
 8001450:	3708      	adds	r7, #8
 8001452:	46bd      	mov	sp, r7
 8001454:	bd80      	pop	{r7, pc}
 8001456:	bf00      	nop
 8001458:	20002bf4 	.word	0x20002bf4

0800145c <BSP_CameraHwReset>:
void BSP_CameraStop(void){
	  HAL_DCMI_Stop(&hdcmi);
}

static void BSP_CameraHwReset(void)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	af00      	add	r7, sp, #0
    /* Camera sensor RESET sequence */
    /* Assert the camera STANDBY and RSTI pins */

    HAL_GPIO_WritePin(CAM_XSDN_GPIO_Port, CAM_XSDN_Pin, GPIO_PIN_SET);
 8001460:	2201      	movs	r2, #1
 8001462:	2108      	movs	r1, #8
 8001464:	480e      	ldr	r0, [pc, #56]	; (80014a0 <BSP_CameraHwReset+0x44>)
 8001466:	f007 fa99 	bl	800899c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(CAM_RSTI_GPIO_Port, CAM_RSTI_Pin, GPIO_PIN_RESET);
 800146a:	2200      	movs	r2, #0
 800146c:	2104      	movs	r1, #4
 800146e:	480c      	ldr	r0, [pc, #48]	; (80014a0 <BSP_CameraHwReset+0x44>)
 8001470:	f007 fa94 	bl	800899c <HAL_GPIO_WritePin>
    HAL_Delay(100);   /* RST and XSDN signals asserted during 100ms */
 8001474:	2064      	movs	r0, #100	; 0x64
 8001476:	f005 f853 	bl	8006520 <HAL_Delay>

    /* De-assert the camera STANDBY pin (active high) */
    HAL_GPIO_WritePin(CAM_XSDN_GPIO_Port, CAM_XSDN_Pin, GPIO_PIN_RESET);
 800147a:	2200      	movs	r2, #0
 800147c:	2108      	movs	r1, #8
 800147e:	4808      	ldr	r0, [pc, #32]	; (80014a0 <BSP_CameraHwReset+0x44>)
 8001480:	f007 fa8c 	bl	800899c <HAL_GPIO_WritePin>
    HAL_Delay(3);     /* RST de-asserted and XSDN de-asserted during 3ms */
 8001484:	2003      	movs	r0, #3
 8001486:	f005 f84b 	bl	8006520 <HAL_Delay>

    /* De-assert the camera RSTI pin (active low) */
    HAL_GPIO_WritePin(CAM_RSTI_GPIO_Port, CAM_RSTI_Pin, GPIO_PIN_SET);
 800148a:	2201      	movs	r2, #1
 800148c:	2104      	movs	r1, #4
 800148e:	4804      	ldr	r0, [pc, #16]	; (80014a0 <BSP_CameraHwReset+0x44>)
 8001490:	f007 fa84 	bl	800899c <HAL_GPIO_WritePin>
    HAL_Delay(20);     /* RST de-asserted during 20ms */
 8001494:	2014      	movs	r0, #20
 8001496:	f005 f843 	bl	8006520 <HAL_Delay>
}
 800149a:	bf00      	nop
 800149c:	bd80      	pop	{r7, pc}
 800149e:	bf00      	nop
 80014a0:	42022000 	.word	0x42022000

080014a4 <BSP_CameraHWInit>:

static void BSP_CameraHWInit(void){
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b088      	sub	sp, #32
 80014a8:	af00      	add	r7, sp, #0
	  uint32_t temp = 0;
 80014aa:	2300      	movs	r3, #0
 80014ac:	61fb      	str	r3, [r7, #28]
	  OV5640_IO_t              IO;
	  static OV5640_Handle_t   OV5640_Handle;
	  IO.Address = CAMERA_OV5640_ADDRESS;
 80014ae:	2378      	movs	r3, #120	; 0x78
 80014b0:	80bb      	strh	r3, [r7, #4]
	  IO.Init = BSP_I2C1_Init;
 80014b2:	4b0f      	ldr	r3, [pc, #60]	; (80014f0 <BSP_CameraHWInit+0x4c>)
 80014b4:	60bb      	str	r3, [r7, #8]
	  IO.DeInit = BSP_I2C1_DeInit;
 80014b6:	4b0f      	ldr	r3, [pc, #60]	; (80014f4 <BSP_CameraHWInit+0x50>)
 80014b8:	60fb      	str	r3, [r7, #12]
      IO.Read = BSP_I2C1_ReadReg16;
 80014ba:	4b0f      	ldr	r3, [pc, #60]	; (80014f8 <BSP_CameraHWInit+0x54>)
 80014bc:	617b      	str	r3, [r7, #20]
      IO.Write = BSP_I2C1_WriteReg16;
 80014be:	4b0f      	ldr	r3, [pc, #60]	; (80014fc <BSP_CameraHWInit+0x58>)
 80014c0:	613b      	str	r3, [r7, #16]
      IO.GetTick = BSP_GetTick;
 80014c2:	4b0f      	ldr	r3, [pc, #60]	; (8001500 <BSP_CameraHWInit+0x5c>)
 80014c4:	61bb      	str	r3, [r7, #24]
      OV5640_LinkBus(&OV5640_Handle, &IO);
 80014c6:	1d3b      	adds	r3, r7, #4
 80014c8:	4619      	mov	r1, r3
 80014ca:	480e      	ldr	r0, [pc, #56]	; (8001504 <BSP_CameraHWInit+0x60>)
 80014cc:	f002 faea 	bl	8003aa4 <OV5640_LinkBus>
      OV5640_ReadID(&OV5640_Handle,&temp);
 80014d0:	f107 031c 	add.w	r3, r7, #28
 80014d4:	4619      	mov	r1, r3
 80014d6:	480b      	ldr	r0, [pc, #44]	; (8001504 <BSP_CameraHWInit+0x60>)
 80014d8:	f002 fec0 	bl	800425c <OV5640_ReadID>
      OV5640_Init(&OV5640_Handle, OV5640_R480x272, CAMERA_PF);
 80014dc:	2200      	movs	r2, #0
 80014de:	2102      	movs	r1, #2
 80014e0:	4808      	ldr	r0, [pc, #32]	; (8001504 <BSP_CameraHWInit+0x60>)
 80014e2:	f002 fb03 	bl	8003aec <OV5640_Init>
}
 80014e6:	bf00      	nop
 80014e8:	3720      	adds	r7, #32
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd80      	pop	{r7, pc}
 80014ee:	bf00      	nop
 80014f0:	08001059 	.word	0x08001059
 80014f4:	08001075 	.word	0x08001075
 80014f8:	080010fd 	.word	0x080010fd
 80014fc:	080010b9 	.word	0x080010b9
 8001500:	08001411 	.word	0x08001411
 8001504:	200004c8 	.word	0x200004c8

08001508 <HAL_DCMI_FrameEventCallback>:

void HAL_DCMI_FrameEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8001508:	b480      	push	{r7}
 800150a:	b083      	sub	sp, #12
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
    UNUSED(hdcmi);
}
 8001510:	bf00      	nop
 8001512:	370c      	adds	r7, #12
 8001514:	46bd      	mov	sp, r7
 8001516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151a:	4770      	bx	lr

0800151c <BSP_TempHumSensorInit>:

static IIS2MDC_Handle_t Magnetometer = {0};


int32_t BSP_TempHumSensorInit(void)
{
 800151c:	b5b0      	push	{r4, r5, r7, lr}
 800151e:	b08a      	sub	sp, #40	; 0x28
 8001520:	af00      	add	r7, sp, #0
	int32_t ret = 0;
 8001522:	2300      	movs	r3, #0
 8001524:	627b      	str	r3, [r7, #36]	; 0x24
	HTS221_IO_t TempSensor_IO = {.Init = BSP_I2C2_Init,
 8001526:	4b0f      	ldr	r3, [pc, #60]	; (8001564 <BSP_TempHumSensorInit+0x48>)
 8001528:	f107 040c 	add.w	r4, r7, #12
 800152c:	461d      	mov	r5, r3
 800152e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001530:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001532:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001536:	e884 0003 	stmia.w	r4, {r0, r1}
								 .Write = BSP_I2C2_WriteRegHTS221,
								 .GetTick = BSP_GetTick,
								 .ReadPin = NULL
	};

	HTS221_Init_Struct_t Settings = { .DataReadyConfig = HTS221_DataReadyDisable,
 800153a:	4a0b      	ldr	r2, [pc, #44]	; (8001568 <BSP_TempHumSensorInit+0x4c>)
 800153c:	1d3b      	adds	r3, r7, #4
 800153e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001542:	6018      	str	r0, [r3, #0]
 8001544:	3304      	adds	r3, #4
 8001546:	8019      	strh	r1, [r3, #0]
									  .HumidityResolution = HTS221_Hum64Samples,
									  .OutputDataRate = HTS221_1_0Hz,
									  .TemperatureResolution = HTS221_Temp32amples

	};
	ret = HTS221_Init(&TempSensor_Handle, Settings, &TempSensor_IO);
 8001548:	f107 030c 	add.w	r3, r7, #12
 800154c:	1d3a      	adds	r2, r7, #4
 800154e:	ca06      	ldmia	r2, {r1, r2}
 8001550:	4806      	ldr	r0, [pc, #24]	; (800156c <BSP_TempHumSensorInit+0x50>)
 8001552:	f000 f9fb 	bl	800194c <HTS221_Init>
 8001556:	6278      	str	r0, [r7, #36]	; 0x24
	return ret;
 8001558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800155a:	4618      	mov	r0, r3
 800155c:	3728      	adds	r7, #40	; 0x28
 800155e:	46bd      	mov	sp, r7
 8001560:	bdb0      	pop	{r4, r5, r7, pc}
 8001562:	bf00      	nop
 8001564:	080134bc 	.word	0x080134bc
 8001568:	080134d4 	.word	0x080134d4
 800156c:	200004ec 	.word	0x200004ec

08001570 <BSP_ReadTemperature>:

int32_t BSP_ReadTemperature(float *result)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b082      	sub	sp, #8
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
	return HTS221_ReadTemperature(&TempSensor_Handle, result);
 8001578:	6879      	ldr	r1, [r7, #4]
 800157a:	4804      	ldr	r0, [pc, #16]	; (800158c <BSP_ReadTemperature+0x1c>)
 800157c:	f000 fa48 	bl	8001a10 <HTS221_ReadTemperature>
 8001580:	4603      	mov	r3, r0
}
 8001582:	4618      	mov	r0, r3
 8001584:	3708      	adds	r7, #8
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}
 800158a:	bf00      	nop
 800158c:	200004ec 	.word	0x200004ec

08001590 <BSP_ReadHumidity>:


int32_t BSP_ReadHumidity(float *result)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b082      	sub	sp, #8
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
	return HTS221_ReadHumidity(&TempSensor_Handle, result);
 8001598:	6879      	ldr	r1, [r7, #4]
 800159a:	4804      	ldr	r0, [pc, #16]	; (80015ac <BSP_ReadHumidity+0x1c>)
 800159c:	f000 fa7d 	bl	8001a9a <HTS221_ReadHumidity>
 80015a0:	4603      	mov	r3, r0
}
 80015a2:	4618      	mov	r0, r3
 80015a4:	3708      	adds	r7, #8
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}
 80015aa:	bf00      	nop
 80015ac:	200004ec 	.word	0x200004ec

080015b0 <BSP_PressureSensorInit>:
{
	return HTS221_DisableHeater(&TempSensor_Handle);
}

int32_t BSP_PressureSensorInit(void)
{
 80015b0:	b5b0      	push	{r4, r5, r7, lr}
 80015b2:	b090      	sub	sp, #64	; 0x40
 80015b4:	af04      	add	r7, sp, #16
	LPS22HH_IO_t PressureSensor_IO =
 80015b6:	4b13      	ldr	r3, [pc, #76]	; (8001604 <BSP_PressureSensorInit+0x54>)
 80015b8:	f107 0414 	add.w	r4, r7, #20
 80015bc:	461d      	mov	r5, r3
 80015be:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80015c0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80015c2:	e895 0003 	ldmia.w	r5, {r0, r1}
 80015c6:	e884 0003 	stmia.w	r4, {r0, r1}
			.Write = BSP_I2C2_WriteRegLPS22HH,
			.GetTick = BSP_GetTick,
			.ReadPin = BSP_ReadPinLPS22HH
	};

	LPS22HH_Init_Struct_t PressureSettings =
 80015ca:	4b0f      	ldr	r3, [pc, #60]	; (8001608 <BSP_PressureSensorInit+0x58>)
 80015cc:	463c      	mov	r4, r7
 80015ce:	461d      	mov	r5, r3
 80015d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80015d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80015d4:	682b      	ldr	r3, [r5, #0]
 80015d6:	6023      	str	r3, [r4, #0]
			.F_MODE = LPS22HH_FifoBypass,
			.WTM = LPS22HH_DefaultSetting,
			.REF_P = LPS22HH_DefaultSetting
	};

	int32_t ret = LPS22HH_Init(&PressureSensor, PressureSettings, &PressureSensor_IO);
 80015d8:	f107 0314 	add.w	r3, r7, #20
 80015dc:	9302      	str	r3, [sp, #8]
 80015de:	466a      	mov	r2, sp
 80015e0:	f107 030c 	add.w	r3, r7, #12
 80015e4:	e893 0003 	ldmia.w	r3, {r0, r1}
 80015e8:	e882 0003 	stmia.w	r2, {r0, r1}
 80015ec:	463b      	mov	r3, r7
 80015ee:	cb0e      	ldmia	r3, {r1, r2, r3}
 80015f0:	4806      	ldr	r0, [pc, #24]	; (800160c <BSP_PressureSensorInit+0x5c>)
 80015f2:	f001 fe9f 	bl	8003334 <LPS22HH_Init>
 80015f6:	62f8      	str	r0, [r7, #44]	; 0x2c
	return ret;
 80015f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80015fa:	4618      	mov	r0, r3
 80015fc:	3730      	adds	r7, #48	; 0x30
 80015fe:	46bd      	mov	sp, r7
 8001600:	bdb0      	pop	{r4, r5, r7, pc}
 8001602:	bf00      	nop
 8001604:	080134dc 	.word	0x080134dc
 8001608:	080134f4 	.word	0x080134f4
 800160c:	20000514 	.word	0x20000514

08001610 <BSP_ReadPressure>:

int32_t BSP_ReadPressure(float *result)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b084      	sub	sp, #16
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
	int32_t ret = LPS22HH_ReadPressure(&PressureSensor, result);
 8001618:	6879      	ldr	r1, [r7, #4]
 800161a:	4804      	ldr	r0, [pc, #16]	; (800162c <BSP_ReadPressure+0x1c>)
 800161c:	f001 ff14 	bl	8003448 <LPS22HH_ReadPressure>
 8001620:	60f8      	str	r0, [r7, #12]
	return ret;
 8001622:	68fb      	ldr	r3, [r7, #12]
}
 8001624:	4618      	mov	r0, r3
 8001626:	3710      	adds	r7, #16
 8001628:	46bd      	mov	sp, r7
 800162a:	bd80      	pop	{r7, pc}
 800162c:	20000514 	.word	0x20000514

08001630 <BSP_MagnetometerInit>:
    return ret;
}
*/

int32_t BSP_MagnetometerInit(void)
{
 8001630:	b5b0      	push	{r4, r5, r7, lr}
 8001632:	b090      	sub	sp, #64	; 0x40
 8001634:	af04      	add	r7, sp, #16
    IIS2MDC_IO_t MagnetometerIO =
 8001636:	4b13      	ldr	r3, [pc, #76]	; (8001684 <BSP_MagnetometerInit+0x54>)
 8001638:	f107 0414 	add.w	r4, r7, #20
 800163c:	461d      	mov	r5, r3
 800163e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001640:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001642:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001646:	e884 0003 	stmia.w	r4, {r0, r1}
			.Write = BSP_I2C2_WriteRegIIS2MDC,
			.GetTick = BSP_GetTick,
			.ReadPin = BSP_ReadPinIIS2MDC
    };

    IIS2MDC_InitStruct_t MagnetometerSettings =
 800164a:	4b0f      	ldr	r3, [pc, #60]	; (8001688 <BSP_MagnetometerInit+0x58>)
 800164c:	463c      	mov	r4, r7
 800164e:	461d      	mov	r5, r3
 8001650:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001652:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001654:	682b      	ldr	r3, [r5, #0]
 8001656:	6023      	str	r3, [r4, #0]
			.OffsetX = 0,
			.OffsetY = 0,
			.OffsetZ = 0
    };

    int32_t ret = IIS2MDC_Init(&Magnetometer, MagnetometerSettings, &MagnetometerIO);
 8001658:	f107 0314 	add.w	r3, r7, #20
 800165c:	9302      	str	r3, [sp, #8]
 800165e:	466a      	mov	r2, sp
 8001660:	f107 030c 	add.w	r3, r7, #12
 8001664:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001668:	e882 0003 	stmia.w	r2, {r0, r1}
 800166c:	463b      	mov	r3, r7
 800166e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001670:	4806      	ldr	r0, [pc, #24]	; (800168c <BSP_MagnetometerInit+0x5c>)
 8001672:	f000 fd61 	bl	8002138 <IIS2MDC_Init>
 8001676:	62f8      	str	r0, [r7, #44]	; 0x2c
    return ret;
 8001678:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800167a:	4618      	mov	r0, r3
 800167c:	3730      	adds	r7, #48	; 0x30
 800167e:	46bd      	mov	sp, r7
 8001680:	bdb0      	pop	{r4, r5, r7, pc}
 8001682:	bf00      	nop
 8001684:	08013508 	.word	0x08013508
 8001688:	08013520 	.word	0x08013520
 800168c:	2000053c 	.word	0x2000053c

08001690 <BSP_ReadMagnetometerXYZ>:

int32_t BSP_ReadMagnetometerXYZ(float *Mx, float *My, float *Mz)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b086      	sub	sp, #24
 8001694:	af00      	add	r7, sp, #0
 8001696:	60f8      	str	r0, [r7, #12]
 8001698:	60b9      	str	r1, [r7, #8]
 800169a:	607a      	str	r2, [r7, #4]
    int32_t ret = IIS2MDC_ReadMagnetismXYZ(&Magnetometer, Mx, My, Mz);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	68ba      	ldr	r2, [r7, #8]
 80016a0:	68f9      	ldr	r1, [r7, #12]
 80016a2:	4804      	ldr	r0, [pc, #16]	; (80016b4 <BSP_ReadMagnetometerXYZ+0x24>)
 80016a4:	f000 fe3e 	bl	8002324 <IIS2MDC_ReadMagnetismXYZ>
 80016a8:	6178      	str	r0, [r7, #20]
    return ret;
 80016aa:	697b      	ldr	r3, [r7, #20]
}
 80016ac:	4618      	mov	r0, r3
 80016ae:	3718      	adds	r7, #24
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bd80      	pop	{r7, pc}
 80016b4:	2000053c 	.word	0x2000053c

080016b8 <BSP_GetTempPeriod>:
	int32_t ret = IIS2MDC_ReadMagnetismZ(&Magnetometer, Mz);
	return ret;
}

int32_t BSP_GetTempPeriod(uint32_t *Period)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b084      	sub	sp, #16
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
    int32_t ret = HTS221_GetSamplePeriod(&TempSensor_Handle, Period);
 80016c0:	6879      	ldr	r1, [r7, #4]
 80016c2:	4804      	ldr	r0, [pc, #16]	; (80016d4 <BSP_GetTempPeriod+0x1c>)
 80016c4:	f000 fc88 	bl	8001fd8 <HTS221_GetSamplePeriod>
 80016c8:	60f8      	str	r0, [r7, #12]
    return ret;
 80016ca:	68fb      	ldr	r3, [r7, #12]
}
 80016cc:	4618      	mov	r0, r3
 80016ce:	3710      	adds	r7, #16
 80016d0:	46bd      	mov	sp, r7
 80016d2:	bd80      	pop	{r7, pc}
 80016d4:	200004ec 	.word	0x200004ec

080016d8 <BSP_GetMagneticPeriod>:


int32_t BSP_GetMagneticPeriod(uint32_t *Period)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b084      	sub	sp, #16
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
    int32_t ret = IIS2MDC_GetSamplePeriod(&Magnetometer, Period);
 80016e0:	6879      	ldr	r1, [r7, #4]
 80016e2:	4804      	ldr	r0, [pc, #16]	; (80016f4 <BSP_GetMagneticPeriod+0x1c>)
 80016e4:	f001 f804 	bl	80026f0 <IIS2MDC_GetSamplePeriod>
 80016e8:	60f8      	str	r0, [r7, #12]
    return ret;
 80016ea:	68fb      	ldr	r3, [r7, #12]
}
 80016ec:	4618      	mov	r0, r3
 80016ee:	3710      	adds	r7, #16
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bd80      	pop	{r7, pc}
 80016f4:	2000053c 	.word	0x2000053c

080016f8 <BSP_GetPressurePeriod>:

int32_t BSP_GetPressurePeriod(uint32_t *Period){
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b084      	sub	sp, #16
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
    int32_t ret = LPS22HH_GetSamplePeriod(&PressureSensor, Period);
 8001700:	6879      	ldr	r1, [r7, #4]
 8001702:	4804      	ldr	r0, [pc, #16]	; (8001714 <BSP_GetPressurePeriod+0x1c>)
 8001704:	f002 f8fa 	bl	80038fc <LPS22HH_GetSamplePeriod>
 8001708:	60f8      	str	r0, [r7, #12]
    return ret;
 800170a:	68fb      	ldr	r3, [r7, #12]
}
 800170c:	4618      	mov	r0, r3
 800170e:	3710      	adds	r7, #16
 8001710:	46bd      	mov	sp, r7
 8001712:	bd80      	pop	{r7, pc}
 8001714:	20000514 	.word	0x20000514

08001718 <BSP_MotionSensorInit>:
#include "tim.h"

static ISM330DHCX_Handle_t MotionSensor;

int32_t BSP_MotionSensorInit(void)
{
 8001718:	b5b0      	push	{r4, r5, r7, lr}
 800171a:	b0a6      	sub	sp, #152	; 0x98
 800171c:	af0c      	add	r7, sp, #48	; 0x30
	int32_t ret = 0;
 800171e:	2300      	movs	r3, #0
 8001720:	663b      	str	r3, [r7, #96]	; 0x60
	float JunkData[3];
	uint8_t DiscardedXLSamples = 0;
 8001722:	2300      	movs	r3, #0
 8001724:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	uint8_t DiscardedGyroSamples = 0;
 8001728:	2300      	movs	r3, #0
 800172a:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
	ISM330DHCX_IO_t SensorIO =
 800172e:	4b38      	ldr	r3, [pc, #224]	; (8001810 <BSP_MotionSensorInit+0xf8>)
 8001730:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8001734:	461d      	mov	r5, r3
 8001736:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001738:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800173a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800173e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
			.GetTick = BSP_GetTick,
			.ReadInt1Pin = BSP_ReadPinISM330DHCX,
			.ReadInt2Pin = NULL
	};

	ISM330DHCX_Init_Struct_t Init =
 8001742:	1d3b      	adds	r3, r7, #4
 8001744:	2234      	movs	r2, #52	; 0x34
 8001746:	2100      	movs	r1, #0
 8001748:	4618      	mov	r0, r3
 800174a:	f011 f99d 	bl	8012a88 <memset>
 800174e:	2304      	movs	r3, #4
 8001750:	71bb      	strb	r3, [r7, #6]
 8001752:	2330      	movs	r3, #48	; 0x30
 8001754:	773b      	strb	r3, [r7, #28]
 8001756:	2302      	movs	r3, #2
 8001758:	77fb      	strb	r3, [r7, #31]
 800175a:	230c      	movs	r3, #12
 800175c:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
 8001760:	2330      	movs	r3, #48	; 0x30
 8001762:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 8001766:	2308      	movs	r3, #8
 8001768:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800176c:	2303      	movs	r3, #3
 800176e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

			.TIMESTAMP_EN = ISM330DHCX_DefaultSetting

	};

	ret = ISM330DHCX_Init(&MotionSensor, Init, &SensorIO);
 8001772:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001776:	930a      	str	r3, [sp, #40]	; 0x28
 8001778:	466d      	mov	r5, sp
 800177a:	f107 0410 	add.w	r4, r7, #16
 800177e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001780:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001782:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001784:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001786:	e894 0003 	ldmia.w	r4, {r0, r1}
 800178a:	e885 0003 	stmia.w	r5, {r0, r1}
 800178e:	1d3b      	adds	r3, r7, #4
 8001790:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001792:	4820      	ldr	r0, [pc, #128]	; (8001814 <BSP_MotionSensorInit+0xfc>)
 8001794:	f001 f880 	bl	8002898 <ISM330DHCX_Init>
 8001798:	6638      	str	r0, [r7, #96]	; 0x60
	if(ret !=ISM330DHCX_Ok)
 800179a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800179c:	2b00      	cmp	r3, #0
 800179e:	d029      	beq.n	80017f4 <BSP_MotionSensorInit+0xdc>
	{
		return ret;
 80017a0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80017a2:	e030      	b.n	8001806 <BSP_MotionSensorInit+0xee>
	}

	//Discard Junk Samples
	while(DiscardedXLSamples < 6 && DiscardedGyroSamples < 6)
	{
        if(BSP_ReadAccelXYZ(&JunkData[0],&JunkData[1],&JunkData[2]) ==ISM330DHCX_DataReady)
 80017a4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80017a8:	f103 0208 	add.w	r2, r3, #8
 80017ac:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80017b0:	1d19      	adds	r1, r3, #4
 80017b2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80017b6:	4618      	mov	r0, r3
 80017b8:	f000 f82e 	bl	8001818 <BSP_ReadAccelXYZ>
 80017bc:	4603      	mov	r3, r0
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d104      	bne.n	80017cc <BSP_MotionSensorInit+0xb4>
        {
        	DiscardedXLSamples++;
 80017c2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80017c6:	3301      	adds	r3, #1
 80017c8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        }

        if(BSP_ReadGyroXYZ(&JunkData[0],&JunkData[1],&JunkData[2]) ==ISM330DHCX_DataReady)
 80017cc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80017d0:	f103 0208 	add.w	r2, r3, #8
 80017d4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80017d8:	1d19      	adds	r1, r3, #4
 80017da:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80017de:	4618      	mov	r0, r3
 80017e0:	f000 f836 	bl	8001850 <BSP_ReadGyroXYZ>
 80017e4:	4603      	mov	r3, r0
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d104      	bne.n	80017f4 <BSP_MotionSensorInit+0xdc>
        {
        	DiscardedGyroSamples++;
 80017ea:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 80017ee:	3301      	adds	r3, #1
 80017f0:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
	while(DiscardedXLSamples < 6 && DiscardedGyroSamples < 6)
 80017f4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80017f8:	2b05      	cmp	r3, #5
 80017fa:	d803      	bhi.n	8001804 <BSP_MotionSensorInit+0xec>
 80017fc:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8001800:	2b05      	cmp	r3, #5
 8001802:	d9cf      	bls.n	80017a4 <BSP_MotionSensorInit+0x8c>
        }
	}
	return ISM330DHCX_Ok;
 8001804:	2300      	movs	r3, #0
}
 8001806:	4618      	mov	r0, r3
 8001808:	3768      	adds	r7, #104	; 0x68
 800180a:	46bd      	mov	sp, r7
 800180c:	bdb0      	pop	{r4, r5, r7, pc}
 800180e:	bf00      	nop
 8001810:	08013534 	.word	0x08013534
 8001814:	20000564 	.word	0x20000564

08001818 <BSP_ReadAccelXYZ>:

int32_t BSP_ReadAccelXYZ(float *Ax, float *Ay, float *Az)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b086      	sub	sp, #24
 800181c:	af00      	add	r7, sp, #0
 800181e:	60f8      	str	r0, [r7, #12]
 8001820:	60b9      	str	r1, [r7, #8]
 8001822:	607a      	str	r2, [r7, #4]
    int32_t ret = 0;
 8001824:	2300      	movs	r3, #0
 8001826:	617b      	str	r3, [r7, #20]
    ret = ISM330DHCX_ReadAccel(&MotionSensor, Ax, Ay, Az);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	68ba      	ldr	r2, [r7, #8]
 800182c:	68f9      	ldr	r1, [r7, #12]
 800182e:	4807      	ldr	r0, [pc, #28]	; (800184c <BSP_ReadAccelXYZ+0x34>)
 8001830:	f001 f8e2 	bl	80029f8 <ISM330DHCX_ReadAccel>
 8001834:	6178      	str	r0, [r7, #20]
    if(ret != ISM330DHCX_DataReady)
 8001836:	697b      	ldr	r3, [r7, #20]
 8001838:	2b00      	cmp	r3, #0
 800183a:	d001      	beq.n	8001840 <BSP_ReadAccelXYZ+0x28>
    {
    	return ret;
 800183c:	697b      	ldr	r3, [r7, #20]
 800183e:	e000      	b.n	8001842 <BSP_ReadAccelXYZ+0x2a>
    }
    return ISM330DHCX_DataReady;
 8001840:	2300      	movs	r3, #0

}
 8001842:	4618      	mov	r0, r3
 8001844:	3718      	adds	r7, #24
 8001846:	46bd      	mov	sp, r7
 8001848:	bd80      	pop	{r7, pc}
 800184a:	bf00      	nop
 800184c:	20000564 	.word	0x20000564

08001850 <BSP_ReadGyroXYZ>:

int32_t BSP_ReadGyroXYZ(float *Wx, float *Wy, float *Wz)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b086      	sub	sp, #24
 8001854:	af00      	add	r7, sp, #0
 8001856:	60f8      	str	r0, [r7, #12]
 8001858:	60b9      	str	r1, [r7, #8]
 800185a:	607a      	str	r2, [r7, #4]
    int32_t ret = 0;
 800185c:	2300      	movs	r3, #0
 800185e:	617b      	str	r3, [r7, #20]
    ret = ISM330DHCX_ReadGyro(&MotionSensor, Wx, Wy, Wz);
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	68ba      	ldr	r2, [r7, #8]
 8001864:	68f9      	ldr	r1, [r7, #12]
 8001866:	4807      	ldr	r0, [pc, #28]	; (8001884 <BSP_ReadGyroXYZ+0x34>)
 8001868:	f001 f925 	bl	8002ab6 <ISM330DHCX_ReadGyro>
 800186c:	6178      	str	r0, [r7, #20]
    if(ret != ISM330DHCX_DataReady)
 800186e:	697b      	ldr	r3, [r7, #20]
 8001870:	2b00      	cmp	r3, #0
 8001872:	d001      	beq.n	8001878 <BSP_ReadGyroXYZ+0x28>
    {
    	return ret;
 8001874:	697b      	ldr	r3, [r7, #20]
 8001876:	e000      	b.n	800187a <BSP_ReadGyroXYZ+0x2a>
    }
    return ISM330DHCX_DataReady;
 8001878:	2300      	movs	r3, #0

}
 800187a:	4618      	mov	r0, r3
 800187c:	3718      	adds	r7, #24
 800187e:	46bd      	mov	sp, r7
 8001880:	bd80      	pop	{r7, pc}
 8001882:	bf00      	nop
 8001884:	20000564 	.word	0x20000564

08001888 <BSP_SynchronizeIRQ>:
	int32_t ret = ISM330DHCX_GetGyroPeriod(&MotionSensor, Period);
	return ret;
}

void BSP_SynchronizeIRQ(void)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b084      	sub	sp, #16
 800188c:	af00      	add	r7, sp, #0
    float dummy_data[3];
    //Read any data thats available
    BSP_ReadAccelXYZ(&dummy_data[0],&dummy_data[1],&dummy_data[2]);
 800188e:	1d3b      	adds	r3, r7, #4
 8001890:	f103 0208 	add.w	r2, r3, #8
 8001894:	1d3b      	adds	r3, r7, #4
 8001896:	1d19      	adds	r1, r3, #4
 8001898:	1d3b      	adds	r3, r7, #4
 800189a:	4618      	mov	r0, r3
 800189c:	f7ff ffbc 	bl	8001818 <BSP_ReadAccelXYZ>
    BSP_ReadGyroXYZ(&dummy_data[0],&dummy_data[1],&dummy_data[2]);
 80018a0:	1d3b      	adds	r3, r7, #4
 80018a2:	f103 0208 	add.w	r2, r3, #8
 80018a6:	1d3b      	adds	r3, r7, #4
 80018a8:	1d19      	adds	r1, r3, #4
 80018aa:	1d3b      	adds	r3, r7, #4
 80018ac:	4618      	mov	r0, r3
 80018ae:	f7ff ffcf 	bl	8001850 <BSP_ReadGyroXYZ>
    //Wait for New Data
    while(BSP_ReadAccelXYZ(&dummy_data[0],&dummy_data[1],&dummy_data[2]) == ISM330DHCX_DataNotReady);
 80018b2:	bf00      	nop
 80018b4:	1d3b      	adds	r3, r7, #4
 80018b6:	f103 0208 	add.w	r2, r3, #8
 80018ba:	1d3b      	adds	r3, r7, #4
 80018bc:	1d19      	adds	r1, r3, #4
 80018be:	1d3b      	adds	r3, r7, #4
 80018c0:	4618      	mov	r0, r3
 80018c2:	f7ff ffa9 	bl	8001818 <BSP_ReadAccelXYZ>
 80018c6:	4603      	mov	r3, r0
 80018c8:	f64b 62ef 	movw	r2, #48879	; 0xbeef
 80018cc:	4293      	cmp	r3, r2
 80018ce:	d0f1      	beq.n	80018b4 <BSP_SynchronizeIRQ+0x2c>
    BSP_ReadGyroXYZ(&dummy_data[0],&dummy_data[1],&dummy_data[2]);
 80018d0:	1d3b      	adds	r3, r7, #4
 80018d2:	f103 0208 	add.w	r2, r3, #8
 80018d6:	1d3b      	adds	r3, r7, #4
 80018d8:	1d19      	adds	r1, r3, #4
 80018da:	1d3b      	adds	r3, r7, #4
 80018dc:	4618      	mov	r0, r3
 80018de:	f7ff ffb7 	bl	8001850 <BSP_ReadGyroXYZ>
    HAL_TIM_Base_Start_IT(&htim7);
 80018e2:	4803      	ldr	r0, [pc, #12]	; (80018f0 <BSP_SynchronizeIRQ+0x68>)
 80018e4:	f00d f9a6 	bl	800ec34 <HAL_TIM_Base_Start_IT>
}
 80018e8:	bf00      	nop
 80018ea:	3710      	adds	r7, #16
 80018ec:	46bd      	mov	sp, r7
 80018ee:	bd80      	pop	{r7, pc}
 80018f0:	20002e60 	.word	0x20002e60

080018f4 <BSP_RamInit>:
#include "octospi.h"
#include <stdint.h>



void BSP_RamInit(void){
 80018f4:	b580      	push	{r7, lr}
 80018f6:	af00      	add	r7, sp, #0
    Ram_GPIO_Init();
 80018f8:	f003 fc2e 	bl	8005158 <Ram_GPIO_Init>
    OSPI_RamInit();
 80018fc:	f004 f9e8 	bl	8005cd0 <OSPI_RamInit>
    OSPI_DelayBlockConfig();
 8001900:	f004 faae 	bl	8005e60 <OSPI_DelayBlockConfig>
    OSPI_EnableMemMappedMode();
 8001904:	f004 fa50 	bl	8005da8 <OSPI_EnableMemMappedMode>
    BSP_RamErase();
 8001908:	f000 f802 	bl	8001910 <BSP_RamErase>
}
 800190c:	bf00      	nop
 800190e:	bd80      	pop	{r7, pc}

08001910 <BSP_RamErase>:

void BSP_RamErase(void){
 8001910:	b480      	push	{r7}
 8001912:	b083      	sub	sp, #12
 8001914:	af00      	add	r7, sp, #0
	  uint32_t *pRam = (uint32_t*)OSPI1_RAM_BASE;
 8001916:	f04f 4310 	mov.w	r3, #2415919104	; 0x90000000
 800191a:	603b      	str	r3, [r7, #0]
	  for(uint32_t i = 0; i < (OSPI1_RAM_LENGTH / 4); i = i + 1){
 800191c:	2300      	movs	r3, #0
 800191e:	607b      	str	r3, [r7, #4]
 8001920:	e008      	b.n	8001934 <BSP_RamErase+0x24>
		  *(pRam + i) = 0;
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	009b      	lsls	r3, r3, #2
 8001926:	683a      	ldr	r2, [r7, #0]
 8001928:	4413      	add	r3, r2
 800192a:	2200      	movs	r2, #0
 800192c:	601a      	str	r2, [r3, #0]
	  for(uint32_t i = 0; i < (OSPI1_RAM_LENGTH / 4); i = i + 1){
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	3301      	adds	r3, #1
 8001932:	607b      	str	r3, [r7, #4]
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800193a:	d3f2      	bcc.n	8001922 <BSP_RamErase+0x12>
	  }
}
 800193c:	bf00      	nop
 800193e:	bf00      	nop
 8001940:	370c      	adds	r7, #12
 8001942:	46bd      	mov	sp, r7
 8001944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001948:	4770      	bx	lr
	...

0800194c <HTS221_Init>:
static int32_t HTS221_CalculateTemperature(HTS221_Handle_t *Handle, float *temperature);
static int32_t HTS221_CalculateHumidity(HTS221_Handle_t *Handle, float *humidity);


int32_t HTS221_Init(HTS221_Handle_t *Handle, HTS221_Init_Struct_t Settings, HTS221_IO_t *IO)
{
 800194c:	b5b0      	push	{r4, r5, r7, lr}
 800194e:	b084      	sub	sp, #16
 8001950:	af00      	add	r7, sp, #0
 8001952:	60f8      	str	r0, [r7, #12]
 8001954:	1d38      	adds	r0, r7, #4
 8001956:	e880 0006 	stmia.w	r0, {r1, r2}
 800195a:	603b      	str	r3, [r7, #0]
    if(Handle == NULL)
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	2b00      	cmp	r3, #0
 8001960:	d102      	bne.n	8001968 <HTS221_Init+0x1c>
    {
    	return HTS221_Error;
 8001962:	f04f 33ff 	mov.w	r3, #4294967295
 8001966:	e036      	b.n	80019d6 <HTS221_Init+0x8a>
    }
    Handle->IO = *IO;
 8001968:	68fa      	ldr	r2, [r7, #12]
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	4614      	mov	r4, r2
 800196e:	461d      	mov	r5, r3
 8001970:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001972:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001974:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001978:	e884 0003 	stmia.w	r4, {r0, r1}
    Handle->Context.Handle = Handle;
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	68fa      	ldr	r2, [r7, #12]
 8001980:	619a      	str	r2, [r3, #24]
    Handle->Context.Read = HTS221_ReadRegWrapper;
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	4a16      	ldr	r2, [pc, #88]	; (80019e0 <HTS221_Init+0x94>)
 8001986:	61da      	str	r2, [r3, #28]
    Handle->Context.Write = HTS221_WriteRegWrapper;
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	4a16      	ldr	r2, [pc, #88]	; (80019e4 <HTS221_Init+0x98>)
 800198c:	621a      	str	r2, [r3, #32]

    if(Settings.DataReadyConfig == HTS221_DataReadyEnable && Handle->IO.ReadPin == NULL)
 800198e:	7a7b      	ldrb	r3, [r7, #9]
 8001990:	2b04      	cmp	r3, #4
 8001992:	d106      	bne.n	80019a2 <HTS221_Init+0x56>
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	695b      	ldr	r3, [r3, #20]
 8001998:	2b00      	cmp	r3, #0
 800199a:	d102      	bne.n	80019a2 <HTS221_Init+0x56>
    {
    	return HTS221_Error; //Must provide a read pin function if using the data ready pin
 800199c:	f04f 33ff 	mov.w	r3, #4294967295
 80019a0:	e019      	b.n	80019d6 <HTS221_Init+0x8a>
    }
    Handle->DRDY_Config = Settings.DataReadyConfig;
 80019a2:	7a7a      	ldrb	r2, [r7, #9]
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    Handle->DRDY_Polarity = Settings.DataReadySignalPolarity;
 80019aa:	79fa      	ldrb	r2, [r7, #7]
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    //Initialized Bus
    if(Handle->IO.Init != NULL)
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d002      	beq.n	80019c0 <HTS221_Init+0x74>
    {
        Handle->IO.Init();
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	4798      	blx	r3
    }

    Handle->OutputDataRate = Settings.OutputDataRate;
 80019c0:	79ba      	ldrb	r2, [r7, #6]
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

    //Initialize Device
    return HTS221_RegisterInit(Handle, Settings);
 80019c8:	1d3b      	adds	r3, r7, #4
 80019ca:	e893 0006 	ldmia.w	r3, {r1, r2}
 80019ce:	68f8      	ldr	r0, [r7, #12]
 80019d0:	f000 f8d6 	bl	8001b80 <HTS221_RegisterInit>
 80019d4:	4603      	mov	r3, r0
}
 80019d6:	4618      	mov	r0, r3
 80019d8:	3710      	adds	r7, #16
 80019da:	46bd      	mov	sp, r7
 80019dc:	bdb0      	pop	{r4, r5, r7, pc}
 80019de:	bf00      	nop
 80019e0:	08001b25 	.word	0x08001b25
 80019e4:	08001b53 	.word	0x08001b53

080019e8 <HTS221_ResetRegisters>:
	temp &= ~HTS221_HEATER_ENABLE;                                           //Modify Reg
	return HTS221_WriteReg(&Handle->Context,HTS221_REG_CTRL_REG2, &temp, 1); //Store Reg
}

int32_t HTS221_ResetRegisters(HTS221_Handle_t *Handle)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b084      	sub	sp, #16
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
	uint8_t temp = HTS221_RebootSignal;
 80019f0:	2380      	movs	r3, #128	; 0x80
 80019f2:	73fb      	strb	r3, [r7, #15]
    return HTS221_WriteReg(&Handle->Context, HTS221_REG_CTRL_REG2, &temp, 1);
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	f103 0018 	add.w	r0, r3, #24
 80019fa:	f107 020f 	add.w	r2, r7, #15
 80019fe:	2301      	movs	r3, #1
 8001a00:	2121      	movs	r1, #33	; 0x21
 8001a02:	f000 fb44 	bl	800208e <HTS221_WriteReg>
 8001a06:	4603      	mov	r3, r0
}
 8001a08:	4618      	mov	r0, r3
 8001a0a:	3710      	adds	r7, #16
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	bd80      	pop	{r7, pc}

08001a10 <HTS221_ReadTemperature>:
	//turn on
	return HTS221_PowerUp(Handle);
}

int32_t HTS221_ReadTemperature(HTS221_Handle_t *Handle, float *temperature)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b086      	sub	sp, #24
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
 8001a18:	6039      	str	r1, [r7, #0]
    int32_t ret = 0;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	617b      	str	r3, [r7, #20]
    uint8_t reg = 0;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	73fb      	strb	r3, [r7, #15]
	//Check if DRDY is used
	if(Handle->DRDY_Config == HTS221_DataReadyEnable)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001a28:	2b04      	cmp	r3, #4
 8001a2a:	d116      	bne.n	8001a5a <HTS221_ReadTemperature+0x4a>
	{
		//If its used, read it.
		int32_t PinState = Handle->IO.ReadPin();
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	695b      	ldr	r3, [r3, #20]
 8001a30:	4798      	blx	r3
 8001a32:	6138      	str	r0, [r7, #16]
		//If Its High and Polarity is Active Low OR If its Low and Polarity is Active High, return data not ready
        if((Handle->DRDY_Polarity == HTS221_DataActiveHigh && PinState == 0) || (Handle->DRDY_Polarity == HTS221_DataActiveLow && PinState != 0))
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d102      	bne.n	8001a44 <HTS221_ReadTemperature+0x34>
 8001a3e:	693b      	ldr	r3, [r7, #16]
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d007      	beq.n	8001a54 <HTS221_ReadTemperature+0x44>
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001a4a:	2b80      	cmp	r3, #128	; 0x80
 8001a4c:	d11c      	bne.n	8001a88 <HTS221_ReadTemperature+0x78>
 8001a4e:	693b      	ldr	r3, [r7, #16]
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d019      	beq.n	8001a88 <HTS221_ReadTemperature+0x78>
        {
            return HTS221_DataNotReady;
 8001a54:	f64b 63ef 	movw	r3, #48879	; 0xbeef
 8001a58:	e01b      	b.n	8001a92 <HTS221_ReadTemperature+0x82>
        }
	} else
	{
		//Otherwise, read the status reg
        ret = HTS221_ReadReg(&Handle->Context, HTS221_REG_STATUS_REG, &reg, 1);
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	f103 0018 	add.w	r0, r3, #24
 8001a60:	f107 020f 	add.w	r2, r7, #15
 8001a64:	2301      	movs	r3, #1
 8001a66:	2127      	movs	r1, #39	; 0x27
 8001a68:	f000 fae8 	bl	800203c <HTS221_ReadReg>
 8001a6c:	6178      	str	r0, [r7, #20]
        if(ret != HTS221_Ok)
 8001a6e:	697b      	ldr	r3, [r7, #20]
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d001      	beq.n	8001a78 <HTS221_ReadTemperature+0x68>
        {
        	return ret;
 8001a74:	697b      	ldr	r3, [r7, #20]
 8001a76:	e00c      	b.n	8001a92 <HTS221_ReadTemperature+0x82>
        } else if ((reg & HTS221_TEMPDATA_Msk) == 0)
 8001a78:	7bfb      	ldrb	r3, [r7, #15]
 8001a7a:	f003 0301 	and.w	r3, r3, #1
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d102      	bne.n	8001a88 <HTS221_ReadTemperature+0x78>
        {
        	return HTS221_DataNotReady;
 8001a82:	f64b 63ef 	movw	r3, #48879	; 0xbeef
 8001a86:	e004      	b.n	8001a92 <HTS221_ReadTemperature+0x82>
        }
	}
    return HTS221_CalculateTemperature(Handle, temperature);
 8001a88:	6839      	ldr	r1, [r7, #0]
 8001a8a:	6878      	ldr	r0, [r7, #4]
 8001a8c:	f000 f8b6 	bl	8001bfc <HTS221_CalculateTemperature>
 8001a90:	4603      	mov	r3, r0
}
 8001a92:	4618      	mov	r0, r3
 8001a94:	3718      	adds	r7, #24
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bd80      	pop	{r7, pc}

08001a9a <HTS221_ReadHumidity>:
int32_t HTS221_ReadHumidity(HTS221_Handle_t *Handle, float *humidity)
{
 8001a9a:	b580      	push	{r7, lr}
 8001a9c:	b086      	sub	sp, #24
 8001a9e:	af00      	add	r7, sp, #0
 8001aa0:	6078      	str	r0, [r7, #4]
 8001aa2:	6039      	str	r1, [r7, #0]
    int32_t ret = 0;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	617b      	str	r3, [r7, #20]
    uint8_t reg = 0;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	73fb      	strb	r3, [r7, #15]
	//Check if DRDY is used
	if(Handle->DRDY_Config == HTS221_DataReadyEnable)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001ab2:	2b04      	cmp	r3, #4
 8001ab4:	d116      	bne.n	8001ae4 <HTS221_ReadHumidity+0x4a>
	{
		//If its used, read it.
		int32_t PinState = Handle->IO.ReadPin();
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	695b      	ldr	r3, [r3, #20]
 8001aba:	4798      	blx	r3
 8001abc:	6138      	str	r0, [r7, #16]
		//If Its High and Polarity is Active Low OR If its Low and Polarity is Active High, return data not ready
        if((Handle->DRDY_Polarity == HTS221_DataActiveHigh && PinState == 0) || (Handle->DRDY_Polarity == HTS221_DataActiveLow && PinState != 0))
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d102      	bne.n	8001ace <HTS221_ReadHumidity+0x34>
 8001ac8:	693b      	ldr	r3, [r7, #16]
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d007      	beq.n	8001ade <HTS221_ReadHumidity+0x44>
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001ad4:	2b80      	cmp	r3, #128	; 0x80
 8001ad6:	d11c      	bne.n	8001b12 <HTS221_ReadHumidity+0x78>
 8001ad8:	693b      	ldr	r3, [r7, #16]
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d019      	beq.n	8001b12 <HTS221_ReadHumidity+0x78>
        {
            return HTS221_DataNotReady;
 8001ade:	f64b 63ef 	movw	r3, #48879	; 0xbeef
 8001ae2:	e01b      	b.n	8001b1c <HTS221_ReadHumidity+0x82>
        }
	} else
	{
		//Otherwise, read the status reg
        ret = HTS221_ReadReg(&Handle->Context, HTS221_REG_STATUS_REG, &reg, 1);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	f103 0018 	add.w	r0, r3, #24
 8001aea:	f107 020f 	add.w	r2, r7, #15
 8001aee:	2301      	movs	r3, #1
 8001af0:	2127      	movs	r1, #39	; 0x27
 8001af2:	f000 faa3 	bl	800203c <HTS221_ReadReg>
 8001af6:	6178      	str	r0, [r7, #20]
        if(ret != HTS221_Ok)
 8001af8:	697b      	ldr	r3, [r7, #20]
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d001      	beq.n	8001b02 <HTS221_ReadHumidity+0x68>
        {
        	return ret;
 8001afe:	697b      	ldr	r3, [r7, #20]
 8001b00:	e00c      	b.n	8001b1c <HTS221_ReadHumidity+0x82>
        } else if ((reg & HTS221_HUMDATA_Msk) == 0)
 8001b02:	7bfb      	ldrb	r3, [r7, #15]
 8001b04:	f003 0302 	and.w	r3, r3, #2
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d102      	bne.n	8001b12 <HTS221_ReadHumidity+0x78>
        {
        	return HTS221_DataNotReady;
 8001b0c:	f64b 63ef 	movw	r3, #48879	; 0xbeef
 8001b10:	e004      	b.n	8001b1c <HTS221_ReadHumidity+0x82>
        }
	}

	return HTS221_CalculateHumidity(Handle, humidity);
 8001b12:	6839      	ldr	r1, [r7, #0]
 8001b14:	6878      	ldr	r0, [r7, #4]
 8001b16:	f000 f96b 	bl	8001df0 <HTS221_CalculateHumidity>
 8001b1a:	4603      	mov	r3, r0
}
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	3718      	adds	r7, #24
 8001b20:	46bd      	mov	sp, r7
 8001b22:	bd80      	pop	{r7, pc}

08001b24 <HTS221_ReadRegWrapper>:
	return HTS221_WriteReg(&Handle->Context,HTS221_REG_CTRL_REG1, &temp, 1); //Store Reg
}


static int32_t HTS221_ReadRegWrapper(void *Handle, uint8_t Reg, uint8_t *Buffer, uint8_t Length)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b086      	sub	sp, #24
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	60f8      	str	r0, [r7, #12]
 8001b2c:	607a      	str	r2, [r7, #4]
 8001b2e:	461a      	mov	r2, r3
 8001b30:	460b      	mov	r3, r1
 8001b32:	72fb      	strb	r3, [r7, #11]
 8001b34:	4613      	mov	r3, r2
 8001b36:	72bb      	strb	r3, [r7, #10]
	HTS221_Handle_t *HTS221_Handle = Handle;
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	617b      	str	r3, [r7, #20]
	return HTS221_Handle->IO.Read(Reg, Buffer, Length);
 8001b3c:	697b      	ldr	r3, [r7, #20]
 8001b3e:	68db      	ldr	r3, [r3, #12]
 8001b40:	7aba      	ldrb	r2, [r7, #10]
 8001b42:	7af8      	ldrb	r0, [r7, #11]
 8001b44:	6879      	ldr	r1, [r7, #4]
 8001b46:	4798      	blx	r3
 8001b48:	4603      	mov	r3, r0
}
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	3718      	adds	r7, #24
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bd80      	pop	{r7, pc}

08001b52 <HTS221_WriteRegWrapper>:

static int32_t HTS221_WriteRegWrapper(void *Handle, uint8_t Reg, uint8_t *Buffer, uint8_t Length)
{
 8001b52:	b580      	push	{r7, lr}
 8001b54:	b086      	sub	sp, #24
 8001b56:	af00      	add	r7, sp, #0
 8001b58:	60f8      	str	r0, [r7, #12]
 8001b5a:	607a      	str	r2, [r7, #4]
 8001b5c:	461a      	mov	r2, r3
 8001b5e:	460b      	mov	r3, r1
 8001b60:	72fb      	strb	r3, [r7, #11]
 8001b62:	4613      	mov	r3, r2
 8001b64:	72bb      	strb	r3, [r7, #10]
	HTS221_Handle_t *HTS221_Handle = Handle;
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	617b      	str	r3, [r7, #20]
	return HTS221_Handle->IO.Write(Reg, Buffer, Length);
 8001b6a:	697b      	ldr	r3, [r7, #20]
 8001b6c:	689b      	ldr	r3, [r3, #8]
 8001b6e:	7aba      	ldrb	r2, [r7, #10]
 8001b70:	7af8      	ldrb	r0, [r7, #11]
 8001b72:	6879      	ldr	r1, [r7, #4]
 8001b74:	4798      	blx	r3
 8001b76:	4603      	mov	r3, r0
}
 8001b78:	4618      	mov	r0, r3
 8001b7a:	3718      	adds	r7, #24
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	bd80      	pop	{r7, pc}

08001b80 <HTS221_RegisterInit>:

static int32_t HTS221_RegisterInit(HTS221_Handle_t *Handle, HTS221_Init_Struct_t Settings)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b086      	sub	sp, #24
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	60f8      	str	r0, [r7, #12]
 8001b88:	1d3b      	adds	r3, r7, #4
 8001b8a:	e883 0006 	stmia.w	r3, {r1, r2}
    int32_t ret =  0;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	617b      	str	r3, [r7, #20]
    uint8_t temp = 0;
 8001b92:	2300      	movs	r3, #0
 8001b94:	74fb      	strb	r3, [r7, #19]

    //reset registers to factory default
    ret = HTS221_ResetRegisters(Handle);
 8001b96:	68f8      	ldr	r0, [r7, #12]
 8001b98:	f7ff ff26 	bl	80019e8 <HTS221_ResetRegisters>
 8001b9c:	6178      	str	r0, [r7, #20]
    if(ret != HTS221_Ok)
 8001b9e:	697b      	ldr	r3, [r7, #20]
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d001      	beq.n	8001ba8 <HTS221_RegisterInit+0x28>
    {
    	return ret;
 8001ba4:	697b      	ldr	r3, [r7, #20]
 8001ba6:	e025      	b.n	8001bf4 <HTS221_RegisterInit+0x74>
    }

    temp = HTS221_BDU_ENABLE | Settings.OutputDataRate;
 8001ba8:	79bb      	ldrb	r3, [r7, #6]
 8001baa:	f043 0304 	orr.w	r3, r3, #4
 8001bae:	b2db      	uxtb	r3, r3
 8001bb0:	74fb      	strb	r3, [r7, #19]
    ret = HTS221_WriteReg(&Handle->Context, HTS221_REG_CTRL_REG1, &temp,1);
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	f103 0018 	add.w	r0, r3, #24
 8001bb8:	f107 0213 	add.w	r2, r7, #19
 8001bbc:	2301      	movs	r3, #1
 8001bbe:	2120      	movs	r1, #32
 8001bc0:	f000 fa65 	bl	800208e <HTS221_WriteReg>
 8001bc4:	6178      	str	r0, [r7, #20]
    if(ret != HTS221_Ok)
 8001bc6:	697b      	ldr	r3, [r7, #20]
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d001      	beq.n	8001bd0 <HTS221_RegisterInit+0x50>
    {
    	return ret;
 8001bcc:	697b      	ldr	r3, [r7, #20]
 8001bce:	e011      	b.n	8001bf4 <HTS221_RegisterInit+0x74>
    }

    temp = Settings.DataReadySignalPolarity | Settings.DataReadyOutputMode | Settings.DataReadyConfig;
 8001bd0:	79fa      	ldrb	r2, [r7, #7]
 8001bd2:	7a3b      	ldrb	r3, [r7, #8]
 8001bd4:	4313      	orrs	r3, r2
 8001bd6:	b2da      	uxtb	r2, r3
 8001bd8:	7a7b      	ldrb	r3, [r7, #9]
 8001bda:	4313      	orrs	r3, r2
 8001bdc:	b2db      	uxtb	r3, r3
 8001bde:	74fb      	strb	r3, [r7, #19]
    return HTS221_WriteReg(&Handle->Context, HTS221_REG_CTRL_REG3, &temp,1);
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	f103 0018 	add.w	r0, r3, #24
 8001be6:	f107 0213 	add.w	r2, r7, #19
 8001bea:	2301      	movs	r3, #1
 8001bec:	2122      	movs	r1, #34	; 0x22
 8001bee:	f000 fa4e 	bl	800208e <HTS221_WriteReg>
 8001bf2:	4603      	mov	r3, r0
}
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	3718      	adds	r7, #24
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	bd80      	pop	{r7, pc}

08001bfc <HTS221_CalculateTemperature>:

static int32_t HTS221_CalculateTemperature(HTS221_Handle_t *Handle, float *temperature)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b08a      	sub	sp, #40	; 0x28
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
 8001c04:	6039      	str	r1, [r7, #0]
	int32_t ret = 0;
 8001c06:	2300      	movs	r3, #0
 8001c08:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t Buffer[2] = {0};
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	81bb      	strh	r3, [r7, #12]
	int16_t temp = 0;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	847b      	strh	r3, [r7, #34]	; 0x22
    float T0_OUT = 0, T1_OUT = 0;
 8001c12:	f04f 0300 	mov.w	r3, #0
 8001c16:	61fb      	str	r3, [r7, #28]
 8001c18:	f04f 0300 	mov.w	r3, #0
 8001c1c:	61bb      	str	r3, [r7, #24]
    float T1_DEGC = 0,  T0_DEGC = 0;
 8001c1e:	f04f 0300 	mov.w	r3, #0
 8001c22:	617b      	str	r3, [r7, #20]
 8001c24:	f04f 0300 	mov.w	r3, #0
 8001c28:	613b      	str	r3, [r7, #16]


    //Fetch T0
    ret = HTS221_ReadReg(&Handle->Context, HTS221_REG_T0_OUT, Buffer, 2);
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	f103 0018 	add.w	r0, r3, #24
 8001c30:	f107 020c 	add.w	r2, r7, #12
 8001c34:	2302      	movs	r3, #2
 8001c36:	213c      	movs	r1, #60	; 0x3c
 8001c38:	f000 fa00 	bl	800203c <HTS221_ReadReg>
 8001c3c:	6278      	str	r0, [r7, #36]	; 0x24
    if(ret != HTS221_Ok)
 8001c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d001      	beq.n	8001c48 <HTS221_CalculateTemperature+0x4c>
    {
    	return ret;
 8001c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c46:	e0ce      	b.n	8001de6 <HTS221_CalculateTemperature+0x1ea>
    }
    temp = (Buffer[1] << 8) + Buffer[0];
 8001c48:	7b7b      	ldrb	r3, [r7, #13]
 8001c4a:	b29b      	uxth	r3, r3
 8001c4c:	021b      	lsls	r3, r3, #8
 8001c4e:	b29a      	uxth	r2, r3
 8001c50:	7b3b      	ldrb	r3, [r7, #12]
 8001c52:	b29b      	uxth	r3, r3
 8001c54:	4413      	add	r3, r2
 8001c56:	b29b      	uxth	r3, r3
 8001c58:	847b      	strh	r3, [r7, #34]	; 0x22
    T0_OUT = temp * 1.0f;
 8001c5a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8001c5e:	ee07 3a90 	vmov	s15, r3
 8001c62:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c66:	edc7 7a07 	vstr	s15, [r7, #28]

    //Fetch T1
    ret = HTS221_ReadReg(&Handle->Context, HTS221_REG_T1_OUT, Buffer, 2);
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	f103 0018 	add.w	r0, r3, #24
 8001c70:	f107 020c 	add.w	r2, r7, #12
 8001c74:	2302      	movs	r3, #2
 8001c76:	213e      	movs	r1, #62	; 0x3e
 8001c78:	f000 f9e0 	bl	800203c <HTS221_ReadReg>
 8001c7c:	6278      	str	r0, [r7, #36]	; 0x24
    if(ret != HTS221_Ok)
 8001c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d001      	beq.n	8001c88 <HTS221_CalculateTemperature+0x8c>
    {
    	return ret;
 8001c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c86:	e0ae      	b.n	8001de6 <HTS221_CalculateTemperature+0x1ea>
    }
    temp = (Buffer[1] << 8) + Buffer[0];
 8001c88:	7b7b      	ldrb	r3, [r7, #13]
 8001c8a:	b29b      	uxth	r3, r3
 8001c8c:	021b      	lsls	r3, r3, #8
 8001c8e:	b29a      	uxth	r2, r3
 8001c90:	7b3b      	ldrb	r3, [r7, #12]
 8001c92:	b29b      	uxth	r3, r3
 8001c94:	4413      	add	r3, r2
 8001c96:	b29b      	uxth	r3, r3
 8001c98:	847b      	strh	r3, [r7, #34]	; 0x22
    T1_OUT = temp * 1.0f;
 8001c9a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8001c9e:	ee07 3a90 	vmov	s15, r3
 8001ca2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ca6:	edc7 7a06 	vstr	s15, [r7, #24]

    //Fetch T0DegC
    ret = HTS221_ReadReg(&Handle->Context, HTS221_REG_T0_degC_x8, Buffer, 1); //Get LSB, store in Buffer16
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	f103 0018 	add.w	r0, r3, #24
 8001cb0:	f107 020c 	add.w	r2, r7, #12
 8001cb4:	2301      	movs	r3, #1
 8001cb6:	2132      	movs	r1, #50	; 0x32
 8001cb8:	f000 f9c0 	bl	800203c <HTS221_ReadReg>
 8001cbc:	6278      	str	r0, [r7, #36]	; 0x24
    if(ret != HTS221_Ok)
 8001cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d001      	beq.n	8001cc8 <HTS221_CalculateTemperature+0xcc>
    {
    	return ret;
 8001cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cc6:	e08e      	b.n	8001de6 <HTS221_CalculateTemperature+0x1ea>
    }

    ret = HTS221_ReadReg(&Handle->Context, HTS221_REG_T1_T0_msb, &Buffer[1], 1);  //Get MSB, store in Buffer8
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	f103 0018 	add.w	r0, r3, #24
 8001cce:	f107 030c 	add.w	r3, r7, #12
 8001cd2:	1c5a      	adds	r2, r3, #1
 8001cd4:	2301      	movs	r3, #1
 8001cd6:	2135      	movs	r1, #53	; 0x35
 8001cd8:	f000 f9b0 	bl	800203c <HTS221_ReadReg>
 8001cdc:	6278      	str	r0, [r7, #36]	; 0x24
    if(ret != HTS221_Ok)
 8001cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d001      	beq.n	8001ce8 <HTS221_CalculateTemperature+0xec>
    {
    	return ret;
 8001ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ce6:	e07e      	b.n	8001de6 <HTS221_CalculateTemperature+0x1ea>
    }
    temp = ((Buffer[1] & 0x03) << 8) + Buffer[0];
 8001ce8:	7b7b      	ldrb	r3, [r7, #13]
 8001cea:	021b      	lsls	r3, r3, #8
 8001cec:	b29b      	uxth	r3, r3
 8001cee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001cf2:	b29a      	uxth	r2, r3
 8001cf4:	7b3b      	ldrb	r3, [r7, #12]
 8001cf6:	b29b      	uxth	r3, r3
 8001cf8:	4413      	add	r3, r2
 8001cfa:	b29b      	uxth	r3, r3
 8001cfc:	847b      	strh	r3, [r7, #34]	; 0x22
    T0_DEGC = temp / 8.0f; //Calculate
 8001cfe:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8001d02:	ee07 3a90 	vmov	s15, r3
 8001d06:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001d0a:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 8001d0e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001d12:	edc7 7a04 	vstr	s15, [r7, #16]

    //Fetch T1DegC
    ret = HTS221_ReadReg(&Handle->Context, HTS221_REG_T1_degC_x8, Buffer, 1); //Get LSB, store in Buffer16
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	f103 0018 	add.w	r0, r3, #24
 8001d1c:	f107 020c 	add.w	r2, r7, #12
 8001d20:	2301      	movs	r3, #1
 8001d22:	2133      	movs	r1, #51	; 0x33
 8001d24:	f000 f98a 	bl	800203c <HTS221_ReadReg>
 8001d28:	6278      	str	r0, [r7, #36]	; 0x24
    if(ret != HTS221_Ok)
 8001d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d001      	beq.n	8001d34 <HTS221_CalculateTemperature+0x138>
    {
    	return ret;
 8001d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d32:	e058      	b.n	8001de6 <HTS221_CalculateTemperature+0x1ea>
    }
    temp = ((Buffer[1] & 0x0C) << 6) + Buffer[0];
 8001d34:	7b7b      	ldrb	r3, [r7, #13]
 8001d36:	019b      	lsls	r3, r3, #6
 8001d38:	b29b      	uxth	r3, r3
 8001d3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d3e:	b29a      	uxth	r2, r3
 8001d40:	7b3b      	ldrb	r3, [r7, #12]
 8001d42:	b29b      	uxth	r3, r3
 8001d44:	4413      	add	r3, r2
 8001d46:	b29b      	uxth	r3, r3
 8001d48:	847b      	strh	r3, [r7, #34]	; 0x22
    T1_DEGC = temp / 8.0f; //Calculate
 8001d4a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8001d4e:	ee07 3a90 	vmov	s15, r3
 8001d52:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001d56:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 8001d5a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001d5e:	edc7 7a05 	vstr	s15, [r7, #20]

    ret = HTS221_ReadReg(&Handle->Context, HTS221_REG_TEMP_OUT_L, Buffer, 2);
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	f103 0018 	add.w	r0, r3, #24
 8001d68:	f107 020c 	add.w	r2, r7, #12
 8001d6c:	2302      	movs	r3, #2
 8001d6e:	212a      	movs	r1, #42	; 0x2a
 8001d70:	f000 f964 	bl	800203c <HTS221_ReadReg>
 8001d74:	6278      	str	r0, [r7, #36]	; 0x24
    if(ret != HTS221_Ok)
 8001d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d001      	beq.n	8001d80 <HTS221_CalculateTemperature+0x184>
    {
    	return ret;
 8001d7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d7e:	e032      	b.n	8001de6 <HTS221_CalculateTemperature+0x1ea>
    }
    temp = (Buffer[1] << 8) + Buffer[0];
 8001d80:	7b7b      	ldrb	r3, [r7, #13]
 8001d82:	b29b      	uxth	r3, r3
 8001d84:	021b      	lsls	r3, r3, #8
 8001d86:	b29a      	uxth	r2, r3
 8001d88:	7b3b      	ldrb	r3, [r7, #12]
 8001d8a:	b29b      	uxth	r3, r3
 8001d8c:	4413      	add	r3, r2
 8001d8e:	b29b      	uxth	r3, r3
 8001d90:	847b      	strh	r3, [r7, #34]	; 0x22
    *temperature = (((T1_DEGC - T0_DEGC) * temp) + ((T1_OUT * T0_DEGC) - (T0_OUT * T1_DEGC))) / (T1_OUT - T0_OUT); //Linear Interpolation
 8001d92:	ed97 7a05 	vldr	s14, [r7, #20]
 8001d96:	edd7 7a04 	vldr	s15, [r7, #16]
 8001d9a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001d9e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8001da2:	ee07 3a90 	vmov	s15, r3
 8001da6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001daa:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001dae:	edd7 6a06 	vldr	s13, [r7, #24]
 8001db2:	edd7 7a04 	vldr	s15, [r7, #16]
 8001db6:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001dba:	ed97 6a07 	vldr	s12, [r7, #28]
 8001dbe:	edd7 7a05 	vldr	s15, [r7, #20]
 8001dc2:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001dc6:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001dca:	ee77 6a27 	vadd.f32	s13, s14, s15
 8001dce:	ed97 7a06 	vldr	s14, [r7, #24]
 8001dd2:	edd7 7a07 	vldr	s15, [r7, #28]
 8001dd6:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001dda:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	edc3 7a00 	vstr	s15, [r3]
    return HTS221_Ok;
 8001de4:	2300      	movs	r3, #0
}
 8001de6:	4618      	mov	r0, r3
 8001de8:	3728      	adds	r7, #40	; 0x28
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bd80      	pop	{r7, pc}
	...

08001df0 <HTS221_CalculateHumidity>:

static int32_t HTS221_CalculateHumidity(HTS221_Handle_t *Handle, float *humidity)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b08a      	sub	sp, #40	; 0x28
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
 8001df8:	6039      	str	r1, [r7, #0]
	int32_t ret = 0;
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t Buffer[2] = {0};
 8001dfe:	2300      	movs	r3, #0
 8001e00:	813b      	strh	r3, [r7, #8]
	int16_t temp = 0;
 8001e02:	2300      	movs	r3, #0
 8001e04:	847b      	strh	r3, [r7, #34]	; 0x22
    float H0_OUT = 0, H1_OUT = 0;
 8001e06:	f04f 0300 	mov.w	r3, #0
 8001e0a:	61fb      	str	r3, [r7, #28]
 8001e0c:	f04f 0300 	mov.w	r3, #0
 8001e10:	61bb      	str	r3, [r7, #24]
    float H1_REL = 0,  H0_REL = 0;
 8001e12:	f04f 0300 	mov.w	r3, #0
 8001e16:	617b      	str	r3, [r7, #20]
 8001e18:	f04f 0300 	mov.w	r3, #0
 8001e1c:	613b      	str	r3, [r7, #16]
    float result = 0;
 8001e1e:	f04f 0300 	mov.w	r3, #0
 8001e22:	60fb      	str	r3, [r7, #12]

    //Fetch H0
    ret = HTS221_ReadReg(&Handle->Context, HTS221_REG_H0_T0_OUT, Buffer, 2);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	f103 0018 	add.w	r0, r3, #24
 8001e2a:	f107 0208 	add.w	r2, r7, #8
 8001e2e:	2302      	movs	r3, #2
 8001e30:	2136      	movs	r1, #54	; 0x36
 8001e32:	f000 f903 	bl	800203c <HTS221_ReadReg>
 8001e36:	6278      	str	r0, [r7, #36]	; 0x24
    if(ret != HTS221_Ok)
 8001e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d001      	beq.n	8001e42 <HTS221_CalculateHumidity+0x52>
    {
    	return ret;
 8001e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e40:	e0c1      	b.n	8001fc6 <HTS221_CalculateHumidity+0x1d6>
    }
    temp = (Buffer[1] << 8) + Buffer[0];
 8001e42:	7a7b      	ldrb	r3, [r7, #9]
 8001e44:	b29b      	uxth	r3, r3
 8001e46:	021b      	lsls	r3, r3, #8
 8001e48:	b29a      	uxth	r2, r3
 8001e4a:	7a3b      	ldrb	r3, [r7, #8]
 8001e4c:	b29b      	uxth	r3, r3
 8001e4e:	4413      	add	r3, r2
 8001e50:	b29b      	uxth	r3, r3
 8001e52:	847b      	strh	r3, [r7, #34]	; 0x22
    H0_OUT = temp * 1.0f;
 8001e54:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8001e58:	ee07 3a90 	vmov	s15, r3
 8001e5c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e60:	edc7 7a07 	vstr	s15, [r7, #28]

    //Fetch H1
    ret = HTS221_ReadReg(&Handle->Context, HTS221_REG_H1_T0_OUT, Buffer, 2);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	f103 0018 	add.w	r0, r3, #24
 8001e6a:	f107 0208 	add.w	r2, r7, #8
 8001e6e:	2302      	movs	r3, #2
 8001e70:	213a      	movs	r1, #58	; 0x3a
 8001e72:	f000 f8e3 	bl	800203c <HTS221_ReadReg>
 8001e76:	6278      	str	r0, [r7, #36]	; 0x24
    if(ret != HTS221_Ok)
 8001e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d001      	beq.n	8001e82 <HTS221_CalculateHumidity+0x92>
    {
    	return ret;
 8001e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e80:	e0a1      	b.n	8001fc6 <HTS221_CalculateHumidity+0x1d6>
    }
    temp = (Buffer[1] << 8) + Buffer[0];
 8001e82:	7a7b      	ldrb	r3, [r7, #9]
 8001e84:	b29b      	uxth	r3, r3
 8001e86:	021b      	lsls	r3, r3, #8
 8001e88:	b29a      	uxth	r2, r3
 8001e8a:	7a3b      	ldrb	r3, [r7, #8]
 8001e8c:	b29b      	uxth	r3, r3
 8001e8e:	4413      	add	r3, r2
 8001e90:	b29b      	uxth	r3, r3
 8001e92:	847b      	strh	r3, [r7, #34]	; 0x22
    H1_OUT = temp * 1.0f;
 8001e94:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8001e98:	ee07 3a90 	vmov	s15, r3
 8001e9c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ea0:	edc7 7a06 	vstr	s15, [r7, #24]

    //Fetch H0_Rh
    ret = HTS221_ReadReg(&Handle->Context, HTS221_REG_H0_rH_x2, Buffer, 1);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	f103 0018 	add.w	r0, r3, #24
 8001eaa:	f107 0208 	add.w	r2, r7, #8
 8001eae:	2301      	movs	r3, #1
 8001eb0:	2130      	movs	r1, #48	; 0x30
 8001eb2:	f000 f8c3 	bl	800203c <HTS221_ReadReg>
 8001eb6:	6278      	str	r0, [r7, #36]	; 0x24
    if(ret != HTS221_Ok)
 8001eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d001      	beq.n	8001ec2 <HTS221_CalculateHumidity+0xd2>
    {
    	return ret;
 8001ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ec0:	e081      	b.n	8001fc6 <HTS221_CalculateHumidity+0x1d6>
    }
    H0_REL = Buffer[0] / 2.0f;
 8001ec2:	7a3b      	ldrb	r3, [r7, #8]
 8001ec4:	ee07 3a90 	vmov	s15, r3
 8001ec8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001ecc:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001ed0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001ed4:	edc7 7a04 	vstr	s15, [r7, #16]

    //Fetch H0_Rh
    ret = HTS221_ReadReg(&Handle->Context, HTS221_REG_H1_rH_x2, Buffer, 1);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	f103 0018 	add.w	r0, r3, #24
 8001ede:	f107 0208 	add.w	r2, r7, #8
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	2131      	movs	r1, #49	; 0x31
 8001ee6:	f000 f8a9 	bl	800203c <HTS221_ReadReg>
 8001eea:	6278      	str	r0, [r7, #36]	; 0x24
    if(ret != HTS221_Ok)
 8001eec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d001      	beq.n	8001ef6 <HTS221_CalculateHumidity+0x106>
    {
    	return ret;
 8001ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ef4:	e067      	b.n	8001fc6 <HTS221_CalculateHumidity+0x1d6>
    }
    H1_REL = Buffer[0] / 2.0f;
 8001ef6:	7a3b      	ldrb	r3, [r7, #8]
 8001ef8:	ee07 3a90 	vmov	s15, r3
 8001efc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f00:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001f04:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001f08:	edc7 7a05 	vstr	s15, [r7, #20]

    //Fetch Measurement
    ret = HTS221_ReadReg(&Handle->Context, HTS221_REG_HUMIDITY_OUT_L, Buffer, 2);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	f103 0018 	add.w	r0, r3, #24
 8001f12:	f107 0208 	add.w	r2, r7, #8
 8001f16:	2302      	movs	r3, #2
 8001f18:	2128      	movs	r1, #40	; 0x28
 8001f1a:	f000 f88f 	bl	800203c <HTS221_ReadReg>
 8001f1e:	6278      	str	r0, [r7, #36]	; 0x24
    if(ret != HTS221_Ok)
 8001f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d001      	beq.n	8001f2a <HTS221_CalculateHumidity+0x13a>
    {
    	return ret;
 8001f26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f28:	e04d      	b.n	8001fc6 <HTS221_CalculateHumidity+0x1d6>
    }
    temp = (Buffer[1] << 8) + Buffer[0];
 8001f2a:	7a7b      	ldrb	r3, [r7, #9]
 8001f2c:	b29b      	uxth	r3, r3
 8001f2e:	021b      	lsls	r3, r3, #8
 8001f30:	b29a      	uxth	r2, r3
 8001f32:	7a3b      	ldrb	r3, [r7, #8]
 8001f34:	b29b      	uxth	r3, r3
 8001f36:	4413      	add	r3, r2
 8001f38:	b29b      	uxth	r3, r3
 8001f3a:	847b      	strh	r3, [r7, #34]	; 0x22
    result = (((H1_REL - H0_REL) * temp) + ((H1_OUT * H0_REL) - (H0_OUT * H1_REL))) / (H1_OUT - H0_OUT); //Linear Interpolation
 8001f3c:	ed97 7a05 	vldr	s14, [r7, #20]
 8001f40:	edd7 7a04 	vldr	s15, [r7, #16]
 8001f44:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001f48:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8001f4c:	ee07 3a90 	vmov	s15, r3
 8001f50:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f54:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001f58:	edd7 6a06 	vldr	s13, [r7, #24]
 8001f5c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001f60:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001f64:	ed97 6a07 	vldr	s12, [r7, #28]
 8001f68:	edd7 7a05 	vldr	s15, [r7, #20]
 8001f6c:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001f70:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001f74:	ee77 6a27 	vadd.f32	s13, s14, s15
 8001f78:	ed97 7a06 	vldr	s14, [r7, #24]
 8001f7c:	edd7 7a07 	vldr	s15, [r7, #28]
 8001f80:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001f84:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001f88:	edc7 7a03 	vstr	s15, [r7, #12]
    if(result > 100.0)
 8001f8c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001f90:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8001fd0 <HTS221_CalculateHumidity+0x1e0>
 8001f94:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001f98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f9c:	dd03      	ble.n	8001fa6 <HTS221_CalculateHumidity+0x1b6>
    {
    	*humidity = 100.0;
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	4a0c      	ldr	r2, [pc, #48]	; (8001fd4 <HTS221_CalculateHumidity+0x1e4>)
 8001fa2:	601a      	str	r2, [r3, #0]
 8001fa4:	e00e      	b.n	8001fc4 <HTS221_CalculateHumidity+0x1d4>
    } else if (result < 0.0)
 8001fa6:	edd7 7a03 	vldr	s15, [r7, #12]
 8001faa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001fae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fb2:	d504      	bpl.n	8001fbe <HTS221_CalculateHumidity+0x1ce>
    {
    	*humidity = 0.0;
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	f04f 0200 	mov.w	r2, #0
 8001fba:	601a      	str	r2, [r3, #0]
 8001fbc:	e002      	b.n	8001fc4 <HTS221_CalculateHumidity+0x1d4>
    } else
    {
    	*humidity = result;
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	68fa      	ldr	r2, [r7, #12]
 8001fc2:	601a      	str	r2, [r3, #0]
    }

    return HTS221_Ok;
 8001fc4:	2300      	movs	r3, #0
}
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	3728      	adds	r7, #40	; 0x28
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	bd80      	pop	{r7, pc}
 8001fce:	bf00      	nop
 8001fd0:	42c80000 	.word	0x42c80000
 8001fd4:	42c80000 	.word	0x42c80000

08001fd8 <HTS221_GetSamplePeriod>:

int32_t HTS221_GetSamplePeriod(HTS221_Handle_t *Handle, uint32_t *Period)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	b083      	sub	sp, #12
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
 8001fe0:	6039      	str	r1, [r7, #0]
	switch(Handle->OutputDataRate)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8001fe8:	2b03      	cmp	r3, #3
 8001fea:	d81d      	bhi.n	8002028 <HTS221_GetSamplePeriod+0x50>
 8001fec:	a201      	add	r2, pc, #4	; (adr r2, 8001ff4 <HTS221_GetSamplePeriod+0x1c>)
 8001fee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ff2:	bf00      	nop
 8001ff4:	08002005 	.word	0x08002005
 8001ff8:	0800200f 	.word	0x0800200f
 8001ffc:	08002019 	.word	0x08002019
 8002000:	08002021 	.word	0x08002021
	{
	case(HTS221_OneShotMode):
			*Period = 0;
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	2200      	movs	r2, #0
 8002008:	601a      	str	r2, [r3, #0]
	        return HTS221_PeriodOneShot;
 800200a:	2301      	movs	r3, #1
 800200c:	e010      	b.n	8002030 <HTS221_GetSamplePeriod+0x58>
			break;
	case(HTS221_1_0Hz):
			*Period = 1000;
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002014:	601a      	str	r2, [r3, #0]
			break;
 8002016:	e00a      	b.n	800202e <HTS221_GetSamplePeriod+0x56>
	case(HTS221_7_0p0Hz):
			*Period = 143;
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	228f      	movs	r2, #143	; 0x8f
 800201c:	601a      	str	r2, [r3, #0]
	        break;
 800201e:	e006      	b.n	800202e <HTS221_GetSamplePeriod+0x56>
	case(HTS221_12_5Hz):
			*Period = 80;
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	2250      	movs	r2, #80	; 0x50
 8002024:	601a      	str	r2, [r3, #0]
	        break;
 8002026:	e002      	b.n	800202e <HTS221_GetSamplePeriod+0x56>
	default:
		   return HTS221_ODR_Error;
 8002028:	f06f 0301 	mvn.w	r3, #1
 800202c:	e000      	b.n	8002030 <HTS221_GetSamplePeriod+0x58>
	}
	return HTS221_Ok;
 800202e:	2300      	movs	r3, #0
}
 8002030:	4618      	mov	r0, r3
 8002032:	370c      	adds	r7, #12
 8002034:	46bd      	mov	sp, r7
 8002036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203a:	4770      	bx	lr

0800203c <HTS221_ReadReg>:
#include "stddef.h"

static int32_t HTS221_ValidateParams(uint8_t Reg, uint8_t *Buffer, uint8_t Length);

int32_t HTS221_ReadReg(HTS221_Context_t *Context, uint8_t Reg, uint8_t *Buffer, uint8_t Length)
{
 800203c:	b590      	push	{r4, r7, lr}
 800203e:	b087      	sub	sp, #28
 8002040:	af00      	add	r7, sp, #0
 8002042:	60f8      	str	r0, [r7, #12]
 8002044:	607a      	str	r2, [r7, #4]
 8002046:	461a      	mov	r2, r3
 8002048:	460b      	mov	r3, r1
 800204a:	72fb      	strb	r3, [r7, #11]
 800204c:	4613      	mov	r3, r2
 800204e:	72bb      	strb	r3, [r7, #10]
	int32_t ret = HTS221_ValidateParams(Reg,Buffer,Length);
 8002050:	7aba      	ldrb	r2, [r7, #10]
 8002052:	7afb      	ldrb	r3, [r7, #11]
 8002054:	6879      	ldr	r1, [r7, #4]
 8002056:	4618      	mov	r0, r3
 8002058:	f000 f842 	bl	80020e0 <HTS221_ValidateParams>
 800205c:	6178      	str	r0, [r7, #20]
	if(ret != HTS221_REG_NO_ERR)
 800205e:	697b      	ldr	r3, [r7, #20]
 8002060:	2b00      	cmp	r3, #0
 8002062:	d001      	beq.n	8002068 <HTS221_ReadReg+0x2c>
	{
        return ret;
 8002064:	697b      	ldr	r3, [r7, #20]
 8002066:	e00e      	b.n	8002086 <HTS221_ReadReg+0x4a>
	}

    if(Context->Read != NULL)
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	685b      	ldr	r3, [r3, #4]
 800206c:	2b00      	cmp	r3, #0
 800206e:	d009      	beq.n	8002084 <HTS221_ReadReg+0x48>
    {
        return Context->Read(Context->Handle, Reg, Buffer, Length);
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	685c      	ldr	r4, [r3, #4]
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	6818      	ldr	r0, [r3, #0]
 8002078:	7abb      	ldrb	r3, [r7, #10]
 800207a:	7af9      	ldrb	r1, [r7, #11]
 800207c:	687a      	ldr	r2, [r7, #4]
 800207e:	47a0      	blx	r4
 8002080:	4603      	mov	r3, r0
 8002082:	e000      	b.n	8002086 <HTS221_ReadReg+0x4a>
    }

    return HTS221_REG_CONTEXT_ERR;
 8002084:	2308      	movs	r3, #8
}
 8002086:	4618      	mov	r0, r3
 8002088:	371c      	adds	r7, #28
 800208a:	46bd      	mov	sp, r7
 800208c:	bd90      	pop	{r4, r7, pc}

0800208e <HTS221_WriteReg>:

int32_t HTS221_WriteReg(HTS221_Context_t *Context,uint8_t Reg, uint8_t *Buffer, uint8_t Length)
{
 800208e:	b590      	push	{r4, r7, lr}
 8002090:	b087      	sub	sp, #28
 8002092:	af00      	add	r7, sp, #0
 8002094:	60f8      	str	r0, [r7, #12]
 8002096:	607a      	str	r2, [r7, #4]
 8002098:	461a      	mov	r2, r3
 800209a:	460b      	mov	r3, r1
 800209c:	72fb      	strb	r3, [r7, #11]
 800209e:	4613      	mov	r3, r2
 80020a0:	72bb      	strb	r3, [r7, #10]
	int32_t ret = HTS221_ValidateParams(Reg,Buffer,Length);
 80020a2:	7aba      	ldrb	r2, [r7, #10]
 80020a4:	7afb      	ldrb	r3, [r7, #11]
 80020a6:	6879      	ldr	r1, [r7, #4]
 80020a8:	4618      	mov	r0, r3
 80020aa:	f000 f819 	bl	80020e0 <HTS221_ValidateParams>
 80020ae:	6178      	str	r0, [r7, #20]
	if(ret != HTS221_REG_NO_ERR)
 80020b0:	697b      	ldr	r3, [r7, #20]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d001      	beq.n	80020ba <HTS221_WriteReg+0x2c>
	{
        return ret;
 80020b6:	697b      	ldr	r3, [r7, #20]
 80020b8:	e00e      	b.n	80020d8 <HTS221_WriteReg+0x4a>
	}

	if(Context->Write != NULL)
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	689b      	ldr	r3, [r3, #8]
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d009      	beq.n	80020d6 <HTS221_WriteReg+0x48>
	{
	    return Context->Write(Context->Handle, Reg, Buffer, Length);
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	689c      	ldr	r4, [r3, #8]
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	6818      	ldr	r0, [r3, #0]
 80020ca:	7abb      	ldrb	r3, [r7, #10]
 80020cc:	7af9      	ldrb	r1, [r7, #11]
 80020ce:	687a      	ldr	r2, [r7, #4]
 80020d0:	47a0      	blx	r4
 80020d2:	4603      	mov	r3, r0
 80020d4:	e000      	b.n	80020d8 <HTS221_WriteReg+0x4a>
	}

	return HTS221_REG_CONTEXT_ERR;
 80020d6:	2308      	movs	r3, #8
}
 80020d8:	4618      	mov	r0, r3
 80020da:	371c      	adds	r7, #28
 80020dc:	46bd      	mov	sp, r7
 80020de:	bd90      	pop	{r4, r7, pc}

080020e0 <HTS221_ValidateParams>:

static int32_t HTS221_ValidateParams(uint8_t Reg, uint8_t *Buffer, uint8_t Length)
{
 80020e0:	b480      	push	{r7}
 80020e2:	b085      	sub	sp, #20
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	4603      	mov	r3, r0
 80020e8:	6039      	str	r1, [r7, #0]
 80020ea:	71fb      	strb	r3, [r7, #7]
 80020ec:	4613      	mov	r3, r2
 80020ee:	71bb      	strb	r3, [r7, #6]
	uint32_t ret = 0;
 80020f0:	2300      	movs	r3, #0
 80020f2:	60fb      	str	r3, [r7, #12]

	if(Reg < HTS221_REG_WHO_AM_I || Reg > 0x3F)
 80020f4:	79fb      	ldrb	r3, [r7, #7]
 80020f6:	2b0e      	cmp	r3, #14
 80020f8:	d902      	bls.n	8002100 <HTS221_ValidateParams+0x20>
 80020fa:	79fb      	ldrb	r3, [r7, #7]
 80020fc:	2b3f      	cmp	r3, #63	; 0x3f
 80020fe:	d903      	bls.n	8002108 <HTS221_ValidateParams+0x28>
	{
		 ret |= HTS221_REG_PARAM_ERR;
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	f043 0301 	orr.w	r3, r3, #1
 8002106:	60fb      	str	r3, [r7, #12]
	}

	if(Buffer == NULL)
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	2b00      	cmp	r3, #0
 800210c:	d103      	bne.n	8002116 <HTS221_ValidateParams+0x36>
	{
		ret |= HTS221_BUFFER_PARAM_ERR;
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	f043 0302 	orr.w	r3, r3, #2
 8002114:	60fb      	str	r3, [r7, #12]
	}

	if(Length == 0 || Length > (0x3F - HTS221_REG_WHO_AM_I))
 8002116:	79bb      	ldrb	r3, [r7, #6]
 8002118:	2b00      	cmp	r3, #0
 800211a:	d002      	beq.n	8002122 <HTS221_ValidateParams+0x42>
 800211c:	79bb      	ldrb	r3, [r7, #6]
 800211e:	2b30      	cmp	r3, #48	; 0x30
 8002120:	d903      	bls.n	800212a <HTS221_ValidateParams+0x4a>
	{  //0x3F - 0x0F = 0x30 readable registers
        ret |= HTS221_LENGTH_PARAM_ERR;
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	f043 0304 	orr.w	r3, r3, #4
 8002128:	60fb      	str	r3, [r7, #12]
	}

	return ret;
 800212a:	68fb      	ldr	r3, [r7, #12]
}
 800212c:	4618      	mov	r0, r3
 800212e:	3714      	adds	r7, #20
 8002130:	46bd      	mov	sp, r7
 8002132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002136:	4770      	bx	lr

08002138 <IIS2MDC_Init>:
static void ConvertMagData(uint8_t *buffer, float *magnetism);
static void DeConvertMagData(float magnetism, uint8_t *buffer);


int32_t IIS2MDC_Init(IIS2MDC_Handle_t *Handle, IIS2MDC_InitStruct_t Settings, IIS2MDC_IO_t *IO)
{
 8002138:	b084      	sub	sp, #16
 800213a:	b5b0      	push	{r4, r5, r7, lr}
 800213c:	b086      	sub	sp, #24
 800213e:	af02      	add	r7, sp, #8
 8002140:	6078      	str	r0, [r7, #4]
 8002142:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8002146:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    if(Handle->Status != IIS2MDC_Initialized)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002150:	2b01      	cmp	r3, #1
 8002152:	f000 80a5 	beq.w	80022a0 <IIS2MDC_Init+0x168>
    {
        if(Handle == NULL)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	2b00      	cmp	r3, #0
 800215a:	d102      	bne.n	8002162 <IIS2MDC_Init+0x2a>
        {
            return IIS2MDC_HandleError;
 800215c:	f04f 33ff 	mov.w	r3, #4294967295
 8002160:	e09f      	b.n	80022a2 <IIS2MDC_Init+0x16a>
        }

        if(IO->Read == NULL || IO->Write == NULL || IO->GetTick == NULL)
 8002162:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002164:	68db      	ldr	r3, [r3, #12]
 8002166:	2b00      	cmp	r3, #0
 8002168:	d007      	beq.n	800217a <IIS2MDC_Init+0x42>
 800216a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800216c:	689b      	ldr	r3, [r3, #8]
 800216e:	2b00      	cmp	r3, #0
 8002170:	d003      	beq.n	800217a <IIS2MDC_Init+0x42>
 8002172:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002174:	695b      	ldr	r3, [r3, #20]
 8002176:	2b00      	cmp	r3, #0
 8002178:	d102      	bne.n	8002180 <IIS2MDC_Init+0x48>
        {
        	return IIS2MDC_IOError;
 800217a:	f06f 0301 	mvn.w	r3, #1
 800217e:	e090      	b.n	80022a2 <IIS2MDC_Init+0x16a>
        }

        if(Settings.IntThreshold > 49150.5  || Settings.OffsetX > 49150.5 || Settings.OffsetY > 49150.5  || Settings.OffsetZ > 49150.5)
 8002180:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8002184:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 80022b0 <IIS2MDC_Init+0x178>
 8002188:	eef4 7ac7 	vcmpe.f32	s15, s14
 800218c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002190:	dc1a      	bgt.n	80021c8 <IIS2MDC_Init+0x90>
 8002192:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002196:	ed9f 7a46 	vldr	s14, [pc, #280]	; 80022b0 <IIS2MDC_Init+0x178>
 800219a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800219e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021a2:	dc11      	bgt.n	80021c8 <IIS2MDC_Init+0x90>
 80021a4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80021a8:	ed9f 7a41 	vldr	s14, [pc, #260]	; 80022b0 <IIS2MDC_Init+0x178>
 80021ac:	eef4 7ac7 	vcmpe.f32	s15, s14
 80021b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021b4:	dc08      	bgt.n	80021c8 <IIS2MDC_Init+0x90>
 80021b6:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80021ba:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 80022b0 <IIS2MDC_Init+0x178>
 80021be:	eef4 7ac7 	vcmpe.f32	s15, s14
 80021c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021c6:	dd02      	ble.n	80021ce <IIS2MDC_Init+0x96>
        {
        	return IIS2MDC_FloatError;
 80021c8:	f06f 0303 	mvn.w	r3, #3
 80021cc:	e069      	b.n	80022a2 <IIS2MDC_Init+0x16a>
        }

        if(Settings.IntThreshold < -49150.5 || Settings.OffsetX < -49150.5 || Settings.OffsetY < -49150.5  || Settings.OffsetZ < -49150.5)
 80021ce:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80021d2:	ed9f 7a38 	vldr	s14, [pc, #224]	; 80022b4 <IIS2MDC_Init+0x17c>
 80021d6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80021da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021de:	d41a      	bmi.n	8002216 <IIS2MDC_Init+0xde>
 80021e0:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80021e4:	ed9f 7a33 	vldr	s14, [pc, #204]	; 80022b4 <IIS2MDC_Init+0x17c>
 80021e8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80021ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021f0:	d411      	bmi.n	8002216 <IIS2MDC_Init+0xde>
 80021f2:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80021f6:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 80022b4 <IIS2MDC_Init+0x17c>
 80021fa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80021fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002202:	d408      	bmi.n	8002216 <IIS2MDC_Init+0xde>
 8002204:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8002208:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 80022b4 <IIS2MDC_Init+0x17c>
 800220c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002210:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002214:	d502      	bpl.n	800221c <IIS2MDC_Init+0xe4>
        {
        	return IIS2MDC_FloatError;
 8002216:	f06f 0303 	mvn.w	r3, #3
 800221a:	e042      	b.n	80022a2 <IIS2MDC_Init+0x16a>
        }

        Handle->IO = *IO;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002220:	f103 040c 	add.w	r4, r3, #12
 8002224:	4615      	mov	r5, r2
 8002226:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002228:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800222a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800222e:	e884 0003 	stmia.w	r4, {r0, r1}
        Handle->Context.Handle = Handle;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	687a      	ldr	r2, [r7, #4]
 8002236:	601a      	str	r2, [r3, #0]
        Handle->Context.Read = IIS2MDC_ReadRegWrapper;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	4a1f      	ldr	r2, [pc, #124]	; (80022b8 <IIS2MDC_Init+0x180>)
 800223c:	605a      	str	r2, [r3, #4]
        Handle->Context.Write = IIS2MDC_WriteRegWrapper;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	4a1e      	ldr	r2, [pc, #120]	; (80022bc <IIS2MDC_Init+0x184>)
 8002242:	609a      	str	r2, [r3, #8]
        if((Settings.ConfigRegA & IIS2MDC_ODR_Msk) == IIS2MDC_ODR_OneShot)
 8002244:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8002248:	f003 030f 	and.w	r3, r3, #15
 800224c:	2b01      	cmp	r3, #1
 800224e:	d104      	bne.n	800225a <IIS2MDC_Init+0x122>
        {
        	Handle->DataMode = IIS2MDC_OneShotMode;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	2200      	movs	r2, #0
 8002254:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
 8002258:	e003      	b.n	8002262 <IIS2MDC_Init+0x12a>
        } else
        {
        	Handle->DataMode = IIS2MDC_Continuous;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	2201      	movs	r2, #1
 800225e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
        }

        Handle->OutputDataRate = Settings.ConfigRegA & IIS2MDC_ODR_Msk;
 8002262:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8002266:	f003 030f 	and.w	r3, r3, #15
 800226a:	b2da      	uxtb	r2, r3
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
        int32_t ret = IIS2MDC_RegisterInit(Handle, Settings);
 8002272:	466a      	mov	r2, sp
 8002274:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002278:	e893 0003 	ldmia.w	r3, {r0, r1}
 800227c:	e882 0003 	stmia.w	r2, {r0, r1}
 8002280:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002284:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002286:	6878      	ldr	r0, [r7, #4]
 8002288:	f000 f8d8 	bl	800243c <IIS2MDC_RegisterInit>
 800228c:	60f8      	str	r0, [r7, #12]
        if(ret != IIS2MDC_Ok)
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	2b00      	cmp	r3, #0
 8002292:	d001      	beq.n	8002298 <IIS2MDC_Init+0x160>
        {
        	return ret;
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	e004      	b.n	80022a2 <IIS2MDC_Init+0x16a>
        }
        Handle->Status = IIS2MDC_Initialized;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	2201      	movs	r2, #1
 800229c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    }
    return IIS2MDC_Ok;
 80022a0:	2300      	movs	r3, #0
}
 80022a2:	4618      	mov	r0, r3
 80022a4:	3710      	adds	r7, #16
 80022a6:	46bd      	mov	sp, r7
 80022a8:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 80022ac:	b004      	add	sp, #16
 80022ae:	4770      	bx	lr
 80022b0:	473ffe80 	.word	0x473ffe80
 80022b4:	c73ffe80 	.word	0xc73ffe80
 80022b8:	08002401 	.word	0x08002401
 80022bc:	080023c5 	.word	0x080023c5

080022c0 <IIS2MDC_ResetDevice>:

    return IIS2MDC_Ok;
}

int32_t IIS2MDC_ResetDevice(IIS2MDC_Handle_t *Handle)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b084      	sub	sp, #16
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
	int32_t ret = IIS2MDC_Ok;
 80022c8:	2300      	movs	r3, #0
 80022ca:	60fb      	str	r3, [r7, #12]
	if(Handle == NULL)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d102      	bne.n	80022d8 <IIS2MDC_ResetDevice+0x18>
	{
		return IIS2MDC_HandleError;
 80022d2:	f04f 33ff 	mov.w	r3, #4294967295
 80022d6:	e021      	b.n	800231c <IIS2MDC_ResetDevice+0x5c>
	}

    if(Handle->IO.Write == NULL || Handle->IO.Read == NULL || Handle->IO.GetTick == NULL)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	695b      	ldr	r3, [r3, #20]
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d007      	beq.n	80022f0 <IIS2MDC_ResetDevice+0x30>
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	699b      	ldr	r3, [r3, #24]
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d003      	beq.n	80022f0 <IIS2MDC_ResetDevice+0x30>
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	6a1b      	ldr	r3, [r3, #32]
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d102      	bne.n	80022f6 <IIS2MDC_ResetDevice+0x36>
    {
    	return IIS2MDC_IOError;
 80022f0:	f06f 0301 	mvn.w	r3, #1
 80022f4:	e012      	b.n	800231c <IIS2MDC_ResetDevice+0x5c>
    }

	ret = IIS2MDC_Reboot(Handle);
 80022f6:	6878      	ldr	r0, [r7, #4]
 80022f8:	f000 f98b 	bl	8002612 <IIS2MDC_Reboot>
 80022fc:	60f8      	str	r0, [r7, #12]
	if(ret != IIS2MDC_Ok)
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	2b00      	cmp	r3, #0
 8002302:	d001      	beq.n	8002308 <IIS2MDC_ResetDevice+0x48>
	{
		return ret;
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	e009      	b.n	800231c <IIS2MDC_ResetDevice+0x5c>
	}


	ret = IIS2MDC_SWReset(Handle);
 8002308:	6878      	ldr	r0, [r7, #4]
 800230a:	f000 f94b 	bl	80025a4 <IIS2MDC_SWReset>
 800230e:	60f8      	str	r0, [r7, #12]
	if(ret != IIS2MDC_Ok)
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	2b00      	cmp	r3, #0
 8002314:	d001      	beq.n	800231a <IIS2MDC_ResetDevice+0x5a>
	{
		return ret;
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	e000      	b.n	800231c <IIS2MDC_ResetDevice+0x5c>
	}

	return IIS2MDC_Ok;
 800231a:	2300      	movs	r3, #0
}
 800231c:	4618      	mov	r0, r3
 800231e:	3710      	adds	r7, #16
 8002320:	46bd      	mov	sp, r7
 8002322:	bd80      	pop	{r7, pc}

08002324 <IIS2MDC_ReadMagnetismXYZ>:
	}
	return IIS2MDC_Ok;
}

int32_t IIS2MDC_ReadMagnetismXYZ(IIS2MDC_Handle_t *Handle, float *Mx, float *My, float *Mz)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b088      	sub	sp, #32
 8002328:	af00      	add	r7, sp, #0
 800232a:	60f8      	str	r0, [r7, #12]
 800232c:	60b9      	str	r1, [r7, #8]
 800232e:	607a      	str	r2, [r7, #4]
 8002330:	603b      	str	r3, [r7, #0]
	if(Handle->Status != IIS2MDC_Initialized)
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002338:	2b01      	cmp	r3, #1
 800233a:	d002      	beq.n	8002342 <IIS2MDC_ReadMagnetismXYZ+0x1e>
	{
		return IIS2MDC_InitError;
 800233c:	f06f 0302 	mvn.w	r3, #2
 8002340:	e03c      	b.n	80023bc <IIS2MDC_ReadMagnetismXYZ+0x98>
	}

	uint8_t Buffer[6] = {0};
 8002342:	2300      	movs	r3, #0
 8002344:	617b      	str	r3, [r7, #20]
 8002346:	2300      	movs	r3, #0
 8002348:	833b      	strh	r3, [r7, #24]
	uint32_t ret = IIS2MDC_ReadReg(&Handle->Context, IIS2MDC_REG_STATUS_REG, Buffer, 1);
 800234a:	68f8      	ldr	r0, [r7, #12]
 800234c:	f107 0214 	add.w	r2, r7, #20
 8002350:	2301      	movs	r3, #1
 8002352:	2167      	movs	r1, #103	; 0x67
 8002354:	f000 fa58 	bl	8002808 <IIS2MDC_ReadReg>
 8002358:	4603      	mov	r3, r0
 800235a:	61fb      	str	r3, [r7, #28]
	if(ret != IIS2MDC_Ok)
 800235c:	69fb      	ldr	r3, [r7, #28]
 800235e:	2b00      	cmp	r3, #0
 8002360:	d001      	beq.n	8002366 <IIS2MDC_ReadMagnetismXYZ+0x42>
	{
		return ret;
 8002362:	69fb      	ldr	r3, [r7, #28]
 8002364:	e02a      	b.n	80023bc <IIS2MDC_ReadMagnetismXYZ+0x98>
	}
	if(Buffer[0] & (IIS2MDC_XDATA_Msk | IIS2MDC_YDATA_Msk | IIS2MDC_ZDATA_Msk))
 8002366:	7d3b      	ldrb	r3, [r7, #20]
 8002368:	f003 0307 	and.w	r3, r3, #7
 800236c:	2b00      	cmp	r3, #0
 800236e:	d023      	beq.n	80023b8 <IIS2MDC_ReadMagnetismXYZ+0x94>
	{
		ret = IIS2MDC_ReadReg(&Handle->Context, IIS2MDC_REG_OUTX_L_REG, Buffer, 6);
 8002370:	68f8      	ldr	r0, [r7, #12]
 8002372:	f107 0214 	add.w	r2, r7, #20
 8002376:	2306      	movs	r3, #6
 8002378:	2168      	movs	r1, #104	; 0x68
 800237a:	f000 fa45 	bl	8002808 <IIS2MDC_ReadReg>
 800237e:	4603      	mov	r3, r0
 8002380:	61fb      	str	r3, [r7, #28]
		if(ret != IIS2MDC_Ok)
 8002382:	69fb      	ldr	r3, [r7, #28]
 8002384:	2b00      	cmp	r3, #0
 8002386:	d001      	beq.n	800238c <IIS2MDC_ReadMagnetismXYZ+0x68>
		{
			return ret;
 8002388:	69fb      	ldr	r3, [r7, #28]
 800238a:	e017      	b.n	80023bc <IIS2MDC_ReadMagnetismXYZ+0x98>
		}
		ConvertMagData(Buffer, Mx);
 800238c:	f107 0314 	add.w	r3, r7, #20
 8002390:	68b9      	ldr	r1, [r7, #8]
 8002392:	4618      	mov	r0, r3
 8002394:	f000 f965 	bl	8002662 <ConvertMagData>
		ConvertMagData(&Buffer[2], My);
 8002398:	f107 0314 	add.w	r3, r7, #20
 800239c:	3302      	adds	r3, #2
 800239e:	6879      	ldr	r1, [r7, #4]
 80023a0:	4618      	mov	r0, r3
 80023a2:	f000 f95e 	bl	8002662 <ConvertMagData>
		ConvertMagData(&Buffer[4], Mz);
 80023a6:	f107 0314 	add.w	r3, r7, #20
 80023aa:	3304      	adds	r3, #4
 80023ac:	6839      	ldr	r1, [r7, #0]
 80023ae:	4618      	mov	r0, r3
 80023b0:	f000 f957 	bl	8002662 <ConvertMagData>
		return IIS2MDC_DataReady;
 80023b4:	2300      	movs	r3, #0
 80023b6:	e001      	b.n	80023bc <IIS2MDC_ReadMagnetismXYZ+0x98>
	}
	return IIS2MDC_DataNotReady;
 80023b8:	f64b 63ef 	movw	r3, #48879	; 0xbeef
}
 80023bc:	4618      	mov	r0, r3
 80023be:	3720      	adds	r7, #32
 80023c0:	46bd      	mov	sp, r7
 80023c2:	bd80      	pop	{r7, pc}

080023c4 <IIS2MDC_WriteRegWrapper>:
	return IIS2MDC_DataNotReady;
}


static int32_t IIS2MDC_WriteRegWrapper(void *Handle,uint8_t Reg, uint8_t *Buffer, uint8_t Length)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b086      	sub	sp, #24
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	60f8      	str	r0, [r7, #12]
 80023cc:	607a      	str	r2, [r7, #4]
 80023ce:	461a      	mov	r2, r3
 80023d0:	460b      	mov	r3, r1
 80023d2:	72fb      	strb	r3, [r7, #11]
 80023d4:	4613      	mov	r3, r2
 80023d6:	72bb      	strb	r3, [r7, #10]
	IIS2MDC_Handle_t *Dev= Handle;
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	617b      	str	r3, [r7, #20]
	if(Dev->IO.Write != NULL)
 80023dc:	697b      	ldr	r3, [r7, #20]
 80023de:	695b      	ldr	r3, [r3, #20]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d007      	beq.n	80023f4 <IIS2MDC_WriteRegWrapper+0x30>
	{
		return Dev->IO.Write(Reg,Buffer,Length);
 80023e4:	697b      	ldr	r3, [r7, #20]
 80023e6:	695b      	ldr	r3, [r3, #20]
 80023e8:	7aba      	ldrb	r2, [r7, #10]
 80023ea:	7af8      	ldrb	r0, [r7, #11]
 80023ec:	6879      	ldr	r1, [r7, #4]
 80023ee:	4798      	blx	r3
 80023f0:	4603      	mov	r3, r0
 80023f2:	e001      	b.n	80023f8 <IIS2MDC_WriteRegWrapper+0x34>
	}
    return IIS2MDC_IOError;
 80023f4:	f06f 0301 	mvn.w	r3, #1
}
 80023f8:	4618      	mov	r0, r3
 80023fa:	3718      	adds	r7, #24
 80023fc:	46bd      	mov	sp, r7
 80023fe:	bd80      	pop	{r7, pc}

08002400 <IIS2MDC_ReadRegWrapper>:

static int32_t IIS2MDC_ReadRegWrapper(void *Handle,uint8_t Reg, uint8_t *Buffer, uint8_t Length)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b086      	sub	sp, #24
 8002404:	af00      	add	r7, sp, #0
 8002406:	60f8      	str	r0, [r7, #12]
 8002408:	607a      	str	r2, [r7, #4]
 800240a:	461a      	mov	r2, r3
 800240c:	460b      	mov	r3, r1
 800240e:	72fb      	strb	r3, [r7, #11]
 8002410:	4613      	mov	r3, r2
 8002412:	72bb      	strb	r3, [r7, #10]
	IIS2MDC_Handle_t *Dev= Handle;
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	617b      	str	r3, [r7, #20]
	if(Dev->IO.Read != NULL)
 8002418:	697b      	ldr	r3, [r7, #20]
 800241a:	699b      	ldr	r3, [r3, #24]
 800241c:	2b00      	cmp	r3, #0
 800241e:	d007      	beq.n	8002430 <IIS2MDC_ReadRegWrapper+0x30>
	{
		return Dev->IO.Read(Reg,Buffer,Length);
 8002420:	697b      	ldr	r3, [r7, #20]
 8002422:	699b      	ldr	r3, [r3, #24]
 8002424:	7aba      	ldrb	r2, [r7, #10]
 8002426:	7af8      	ldrb	r0, [r7, #11]
 8002428:	6879      	ldr	r1, [r7, #4]
 800242a:	4798      	blx	r3
 800242c:	4603      	mov	r3, r0
 800242e:	e001      	b.n	8002434 <IIS2MDC_ReadRegWrapper+0x34>
	}
    return IIS2MDC_IOError;
 8002430:	f06f 0301 	mvn.w	r3, #1
}
 8002434:	4618      	mov	r0, r3
 8002436:	3718      	adds	r7, #24
 8002438:	46bd      	mov	sp, r7
 800243a:	bd80      	pop	{r7, pc}

0800243c <IIS2MDC_RegisterInit>:

static int32_t IIS2MDC_RegisterInit(IIS2MDC_Handle_t *Handle, IIS2MDC_InitStruct_t Settings)
{
 800243c:	b084      	sub	sp, #16
 800243e:	b580      	push	{r7, lr}
 8002440:	b084      	sub	sp, #16
 8002442:	af00      	add	r7, sp, #0
 8002444:	6078      	str	r0, [r7, #4]
 8002446:	f107 001c 	add.w	r0, r7, #28
 800244a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	int32_t ret = IIS2MDC_ResetDevice(Handle);
 800244e:	6878      	ldr	r0, [r7, #4]
 8002450:	f7ff ff36 	bl	80022c0 <IIS2MDC_ResetDevice>
 8002454:	60f8      	str	r0, [r7, #12]
	if(ret != IIS2MDC_Ok)
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	2b00      	cmp	r3, #0
 800245a:	d001      	beq.n	8002460 <IIS2MDC_RegisterInit+0x24>
	{
		return ret;
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	e09a      	b.n	8002596 <IIS2MDC_RegisterInit+0x15a>
	}

	uint8_t Buffer[2] = {0};
 8002460:	2300      	movs	r3, #0
 8002462:	813b      	strh	r3, [r7, #8]

	DeConvertMagData(Settings.IntThreshold, Buffer);
 8002464:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8002468:	f107 0308 	add.w	r3, r7, #8
 800246c:	4618      	mov	r0, r3
 800246e:	eeb0 0a67 	vmov.f32	s0, s15
 8002472:	f000 f91a 	bl	80026aa <DeConvertMagData>
	ret = IIS2MDC_WriteReg(&Handle->Context,IIS2MDC_REG_INT_THS_H_REG,Buffer,2);
 8002476:	6878      	ldr	r0, [r7, #4]
 8002478:	f107 0208 	add.w	r2, r7, #8
 800247c:	2302      	movs	r3, #2
 800247e:	2166      	movs	r1, #102	; 0x66
 8002480:	f000 f9e6 	bl	8002850 <IIS2MDC_WriteReg>
 8002484:	60f8      	str	r0, [r7, #12]
	if(ret != IIS2MDC_Ok)
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	2b00      	cmp	r3, #0
 800248a:	d001      	beq.n	8002490 <IIS2MDC_RegisterInit+0x54>
	{
		return ret;
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	e082      	b.n	8002596 <IIS2MDC_RegisterInit+0x15a>
	}


	DeConvertMagData(Settings.OffsetX, Buffer);
 8002490:	edd7 7a07 	vldr	s15, [r7, #28]
 8002494:	f107 0308 	add.w	r3, r7, #8
 8002498:	4618      	mov	r0, r3
 800249a:	eeb0 0a67 	vmov.f32	s0, s15
 800249e:	f000 f904 	bl	80026aa <DeConvertMagData>
	ret = IIS2MDC_WriteReg(&Handle->Context,IIS2MDC_REG_OFFSET_X_REG_L,Buffer,2);
 80024a2:	6878      	ldr	r0, [r7, #4]
 80024a4:	f107 0208 	add.w	r2, r7, #8
 80024a8:	2302      	movs	r3, #2
 80024aa:	2145      	movs	r1, #69	; 0x45
 80024ac:	f000 f9d0 	bl	8002850 <IIS2MDC_WriteReg>
 80024b0:	60f8      	str	r0, [r7, #12]
	if(ret != IIS2MDC_Ok)
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d001      	beq.n	80024bc <IIS2MDC_RegisterInit+0x80>
	{
		return ret;
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	e06c      	b.n	8002596 <IIS2MDC_RegisterInit+0x15a>
	}

	DeConvertMagData(Settings.OffsetY, Buffer);
 80024bc:	edd7 7a08 	vldr	s15, [r7, #32]
 80024c0:	f107 0308 	add.w	r3, r7, #8
 80024c4:	4618      	mov	r0, r3
 80024c6:	eeb0 0a67 	vmov.f32	s0, s15
 80024ca:	f000 f8ee 	bl	80026aa <DeConvertMagData>
	ret = IIS2MDC_WriteReg(&Handle->Context,IIS2MDC_REG_OFFSET_Y_REG_L,Buffer,2);
 80024ce:	6878      	ldr	r0, [r7, #4]
 80024d0:	f107 0208 	add.w	r2, r7, #8
 80024d4:	2302      	movs	r3, #2
 80024d6:	2147      	movs	r1, #71	; 0x47
 80024d8:	f000 f9ba 	bl	8002850 <IIS2MDC_WriteReg>
 80024dc:	60f8      	str	r0, [r7, #12]
	if(ret != IIS2MDC_Ok)
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d001      	beq.n	80024e8 <IIS2MDC_RegisterInit+0xac>
	{
		return ret;
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	e056      	b.n	8002596 <IIS2MDC_RegisterInit+0x15a>
	}

	DeConvertMagData(Settings.OffsetZ, Buffer);
 80024e8:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80024ec:	f107 0308 	add.w	r3, r7, #8
 80024f0:	4618      	mov	r0, r3
 80024f2:	eeb0 0a67 	vmov.f32	s0, s15
 80024f6:	f000 f8d8 	bl	80026aa <DeConvertMagData>
	ret = IIS2MDC_WriteReg(&Handle->Context,IIS2MDC_REG_OFFSET_Z_REG_L,Buffer,2);
 80024fa:	6878      	ldr	r0, [r7, #4]
 80024fc:	f107 0208 	add.w	r2, r7, #8
 8002500:	2302      	movs	r3, #2
 8002502:	2149      	movs	r1, #73	; 0x49
 8002504:	f000 f9a4 	bl	8002850 <IIS2MDC_WriteReg>
 8002508:	60f8      	str	r0, [r7, #12]
	if(ret != IIS2MDC_Ok)
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	2b00      	cmp	r3, #0
 800250e:	d001      	beq.n	8002514 <IIS2MDC_RegisterInit+0xd8>
	{
		return ret;
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	e040      	b.n	8002596 <IIS2MDC_RegisterInit+0x15a>
	}

	Buffer[0] = Settings.ConfigRegA;
 8002514:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002518:	723b      	strb	r3, [r7, #8]
	ret = IIS2MDC_WriteReg(&Handle->Context,IIS2MDC_REG_CFG_REG_A,Buffer,1);
 800251a:	6878      	ldr	r0, [r7, #4]
 800251c:	f107 0208 	add.w	r2, r7, #8
 8002520:	2301      	movs	r3, #1
 8002522:	2160      	movs	r1, #96	; 0x60
 8002524:	f000 f994 	bl	8002850 <IIS2MDC_WriteReg>
 8002528:	60f8      	str	r0, [r7, #12]
	if(ret != IIS2MDC_Ok)
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	2b00      	cmp	r3, #0
 800252e:	d001      	beq.n	8002534 <IIS2MDC_RegisterInit+0xf8>
	{
		return ret;
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	e030      	b.n	8002596 <IIS2MDC_RegisterInit+0x15a>
	}

	Buffer[0] = Settings.ConfigRegB;
 8002534:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8002538:	723b      	strb	r3, [r7, #8]
	ret = IIS2MDC_WriteReg(&Handle->Context,IIS2MDC_REG_CFG_REG_B,Buffer,1);
 800253a:	6878      	ldr	r0, [r7, #4]
 800253c:	f107 0208 	add.w	r2, r7, #8
 8002540:	2301      	movs	r3, #1
 8002542:	2161      	movs	r1, #97	; 0x61
 8002544:	f000 f984 	bl	8002850 <IIS2MDC_WriteReg>
 8002548:	60f8      	str	r0, [r7, #12]
	if(ret != IIS2MDC_Ok)
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	2b00      	cmp	r3, #0
 800254e:	d001      	beq.n	8002554 <IIS2MDC_RegisterInit+0x118>
	{
		return ret;
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	e020      	b.n	8002596 <IIS2MDC_RegisterInit+0x15a>
	}

	Buffer[0] = Settings.ConfigRegC;
 8002554:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8002558:	723b      	strb	r3, [r7, #8]
	ret = IIS2MDC_WriteReg(&Handle->Context,IIS2MDC_REG_CFG_REG_C,Buffer,1);
 800255a:	6878      	ldr	r0, [r7, #4]
 800255c:	f107 0208 	add.w	r2, r7, #8
 8002560:	2301      	movs	r3, #1
 8002562:	2162      	movs	r1, #98	; 0x62
 8002564:	f000 f974 	bl	8002850 <IIS2MDC_WriteReg>
 8002568:	60f8      	str	r0, [r7, #12]
	if(ret != IIS2MDC_Ok)
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	2b00      	cmp	r3, #0
 800256e:	d001      	beq.n	8002574 <IIS2MDC_RegisterInit+0x138>
	{
		return ret;
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	e010      	b.n	8002596 <IIS2MDC_RegisterInit+0x15a>
	}

	Buffer[0] = Settings.IntCtrlReg;
 8002574:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002578:	723b      	strb	r3, [r7, #8]
	ret = IIS2MDC_WriteReg(&Handle->Context,IIS2MDC_REG_INT_CTRL_REG,Buffer,1);
 800257a:	6878      	ldr	r0, [r7, #4]
 800257c:	f107 0208 	add.w	r2, r7, #8
 8002580:	2301      	movs	r3, #1
 8002582:	2163      	movs	r1, #99	; 0x63
 8002584:	f000 f964 	bl	8002850 <IIS2MDC_WriteReg>
 8002588:	60f8      	str	r0, [r7, #12]
	if(ret != IIS2MDC_Ok)
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	2b00      	cmp	r3, #0
 800258e:	d001      	beq.n	8002594 <IIS2MDC_RegisterInit+0x158>
	{
		return ret;
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	e000      	b.n	8002596 <IIS2MDC_RegisterInit+0x15a>
	}

    return IIS2MDC_Ok;
 8002594:	2300      	movs	r3, #0
}
 8002596:	4618      	mov	r0, r3
 8002598:	3710      	adds	r7, #16
 800259a:	46bd      	mov	sp, r7
 800259c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80025a0:	b004      	add	sp, #16
 80025a2:	4770      	bx	lr

080025a4 <IIS2MDC_SWReset>:

static int32_t IIS2MDC_SWReset(IIS2MDC_Handle_t *Handle)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b086      	sub	sp, #24
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
    int32_t ret = 0;
 80025ac:	2300      	movs	r3, #0
 80025ae:	617b      	str	r3, [r7, #20]
    uint8_t Buffer = IIS2MDC_ResetSignal;
 80025b0:	2320      	movs	r3, #32
 80025b2:	73fb      	strb	r3, [r7, #15]
    ret = IIS2MDC_WriteReg(&Handle->Context, IIS2MDC_REG_CFG_REG_A, &Buffer, 1);
 80025b4:	6878      	ldr	r0, [r7, #4]
 80025b6:	f107 020f 	add.w	r2, r7, #15
 80025ba:	2301      	movs	r3, #1
 80025bc:	2160      	movs	r1, #96	; 0x60
 80025be:	f000 f947 	bl	8002850 <IIS2MDC_WriteReg>
 80025c2:	6178      	str	r0, [r7, #20]
    if(ret != IIS2MDC_Ok)
 80025c4:	697b      	ldr	r3, [r7, #20]
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d001      	beq.n	80025ce <IIS2MDC_SWReset+0x2a>
    {
    	return ret;
 80025ca:	697b      	ldr	r3, [r7, #20]
 80025cc:	e01d      	b.n	800260a <IIS2MDC_SWReset+0x66>
    }

    uint32_t timeout = Handle->IO.GetTick();
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6a1b      	ldr	r3, [r3, #32]
 80025d2:	4798      	blx	r3
 80025d4:	6138      	str	r0, [r7, #16]
    while(Buffer & IIS2MDC_ResetSignal)
 80025d6:	e012      	b.n	80025fe <IIS2MDC_SWReset+0x5a>
    {
        ret = IIS2MDC_ReadReg(&Handle->Context, IIS2MDC_REG_CFG_REG_A, &Buffer, 1);
 80025d8:	6878      	ldr	r0, [r7, #4]
 80025da:	f107 020f 	add.w	r2, r7, #15
 80025de:	2301      	movs	r3, #1
 80025e0:	2160      	movs	r1, #96	; 0x60
 80025e2:	f000 f911 	bl	8002808 <IIS2MDC_ReadReg>
 80025e6:	6178      	str	r0, [r7, #20]
        if(Handle->IO.GetTick() > timeout + 100)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	6a1b      	ldr	r3, [r3, #32]
 80025ec:	4798      	blx	r3
 80025ee:	4602      	mov	r2, r0
 80025f0:	693b      	ldr	r3, [r7, #16]
 80025f2:	3364      	adds	r3, #100	; 0x64
 80025f4:	429a      	cmp	r2, r3
 80025f6:	d902      	bls.n	80025fe <IIS2MDC_SWReset+0x5a>
        {
        	return IIS2MDC_Timeout;
 80025f8:	f06f 0305 	mvn.w	r3, #5
 80025fc:	e005      	b.n	800260a <IIS2MDC_SWReset+0x66>
    while(Buffer & IIS2MDC_ResetSignal)
 80025fe:	7bfb      	ldrb	r3, [r7, #15]
 8002600:	f003 0320 	and.w	r3, r3, #32
 8002604:	2b00      	cmp	r3, #0
 8002606:	d1e7      	bne.n	80025d8 <IIS2MDC_SWReset+0x34>
        }
    }
    return IIS2MDC_Ok;
 8002608:	2300      	movs	r3, #0
}
 800260a:	4618      	mov	r0, r3
 800260c:	3718      	adds	r7, #24
 800260e:	46bd      	mov	sp, r7
 8002610:	bd80      	pop	{r7, pc}

08002612 <IIS2MDC_Reboot>:

static int32_t IIS2MDC_Reboot(IIS2MDC_Handle_t *Handle)
{
 8002612:	b590      	push	{r4, r7, lr}
 8002614:	b087      	sub	sp, #28
 8002616:	af00      	add	r7, sp, #0
 8002618:	6078      	str	r0, [r7, #4]
    int32_t ret = 0;
 800261a:	2300      	movs	r3, #0
 800261c:	617b      	str	r3, [r7, #20]
    uint8_t Buffer = IIS2MDC_RebootSignal;
 800261e:	2340      	movs	r3, #64	; 0x40
 8002620:	73fb      	strb	r3, [r7, #15]
    ret = IIS2MDC_WriteReg(&Handle->Context, IIS2MDC_REG_CFG_REG_A, &Buffer, 1);
 8002622:	6878      	ldr	r0, [r7, #4]
 8002624:	f107 020f 	add.w	r2, r7, #15
 8002628:	2301      	movs	r3, #1
 800262a:	2160      	movs	r1, #96	; 0x60
 800262c:	f000 f910 	bl	8002850 <IIS2MDC_WriteReg>
 8002630:	6178      	str	r0, [r7, #20]
    if(ret != IIS2MDC_Ok)
 8002632:	697b      	ldr	r3, [r7, #20]
 8002634:	2b00      	cmp	r3, #0
 8002636:	d001      	beq.n	800263c <IIS2MDC_Reboot+0x2a>
    {
    	return ret;
 8002638:	697b      	ldr	r3, [r7, #20]
 800263a:	e00e      	b.n	800265a <IIS2MDC_Reboot+0x48>
    }
    uint32_t timeout = Handle->IO.GetTick();
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	6a1b      	ldr	r3, [r3, #32]
 8002640:	4798      	blx	r3
 8002642:	6138      	str	r0, [r7, #16]
    while((timeout + 20) > Handle->IO.GetTick()); //Delay 20ms
 8002644:	bf00      	nop
 8002646:	693b      	ldr	r3, [r7, #16]
 8002648:	f103 0414 	add.w	r4, r3, #20
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6a1b      	ldr	r3, [r3, #32]
 8002650:	4798      	blx	r3
 8002652:	4603      	mov	r3, r0
 8002654:	429c      	cmp	r4, r3
 8002656:	d8f6      	bhi.n	8002646 <IIS2MDC_Reboot+0x34>
    return IIS2MDC_Ok;
 8002658:	2300      	movs	r3, #0
}
 800265a:	4618      	mov	r0, r3
 800265c:	371c      	adds	r7, #28
 800265e:	46bd      	mov	sp, r7
 8002660:	bd90      	pop	{r4, r7, pc}

08002662 <ConvertMagData>:

static void ConvertMagData(uint8_t *buffer, float *magnetism)
{
 8002662:	b480      	push	{r7}
 8002664:	b085      	sub	sp, #20
 8002666:	af00      	add	r7, sp, #0
 8002668:	6078      	str	r0, [r7, #4]
 800266a:	6039      	str	r1, [r7, #0]
	int16_t result = (buffer[1] * 256) + buffer[0];
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	3301      	adds	r3, #1
 8002670:	781b      	ldrb	r3, [r3, #0]
 8002672:	b29b      	uxth	r3, r3
 8002674:	021b      	lsls	r3, r3, #8
 8002676:	b29a      	uxth	r2, r3
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	781b      	ldrb	r3, [r3, #0]
 800267c:	b29b      	uxth	r3, r3
 800267e:	4413      	add	r3, r2
 8002680:	b29b      	uxth	r3, r3
 8002682:	81fb      	strh	r3, [r7, #14]
	*magnetism = result * 1.5f;
 8002684:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002688:	ee07 3a90 	vmov	s15, r3
 800268c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002690:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8002694:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	edc3 7a00 	vstr	s15, [r3]
}
 800269e:	bf00      	nop
 80026a0:	3714      	adds	r7, #20
 80026a2:	46bd      	mov	sp, r7
 80026a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a8:	4770      	bx	lr

080026aa <DeConvertMagData>:

static void DeConvertMagData(float magnetism, uint8_t *buffer)
{
 80026aa:	b480      	push	{r7}
 80026ac:	b085      	sub	sp, #20
 80026ae:	af00      	add	r7, sp, #0
 80026b0:	ed87 0a01 	vstr	s0, [r7, #4]
 80026b4:	6038      	str	r0, [r7, #0]
    int16_t result = magnetism / 1.5f;
 80026b6:	ed97 7a01 	vldr	s14, [r7, #4]
 80026ba:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 80026be:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80026c2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80026c6:	ee17 3a90 	vmov	r3, s15
 80026ca:	81fb      	strh	r3, [r7, #14]
    buffer[1] = (result & 0xFF00) >> 8;
 80026cc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80026d0:	121a      	asrs	r2, r3, #8
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	3301      	adds	r3, #1
 80026d6:	b2d2      	uxtb	r2, r2
 80026d8:	701a      	strb	r2, [r3, #0]
    buffer[0] = result & 0x00FF;
 80026da:	89fb      	ldrh	r3, [r7, #14]
 80026dc:	b2da      	uxtb	r2, r3
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	701a      	strb	r2, [r3, #0]
}
 80026e2:	bf00      	nop
 80026e4:	3714      	adds	r7, #20
 80026e6:	46bd      	mov	sp, r7
 80026e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ec:	4770      	bx	lr
	...

080026f0 <IIS2MDC_GetSamplePeriod>:

int32_t IIS2MDC_GetSamplePeriod(IIS2MDC_Handle_t *Handle, uint32_t *Period)
{
 80026f0:	b480      	push	{r7}
 80026f2:	b083      	sub	sp, #12
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
 80026f8:	6039      	str	r1, [r7, #0]
	if(Handle->Status != IIS2MDC_Initialized)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002700:	2b01      	cmp	r3, #1
 8002702:	d002      	beq.n	800270a <IIS2MDC_GetSamplePeriod+0x1a>
	{
		return IIS2MDC_InitError;
 8002704:	f06f 0302 	mvn.w	r3, #2
 8002708:	e03a      	b.n	8002780 <IIS2MDC_GetSamplePeriod+0x90>
	}

	switch(Handle->OutputDataRate)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8002710:	2b0c      	cmp	r3, #12
 8002712:	d832      	bhi.n	800277a <IIS2MDC_GetSamplePeriod+0x8a>
 8002714:	a201      	add	r2, pc, #4	; (adr r2, 800271c <IIS2MDC_GetSamplePeriod+0x2c>)
 8002716:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800271a:	bf00      	nop
 800271c:	0800275b 	.word	0x0800275b
 8002720:	08002751 	.word	0x08002751
 8002724:	0800277b 	.word	0x0800277b
 8002728:	0800277b 	.word	0x0800277b
 800272c:	08002763 	.word	0x08002763
 8002730:	0800277b 	.word	0x0800277b
 8002734:	0800277b 	.word	0x0800277b
 8002738:	0800277b 	.word	0x0800277b
 800273c:	0800276b 	.word	0x0800276b
 8002740:	0800277b 	.word	0x0800277b
 8002744:	0800277b 	.word	0x0800277b
 8002748:	0800277b 	.word	0x0800277b
 800274c:	08002773 	.word	0x08002773
	{
	case(IIS2MDC_ODR_OneShot):
			*Period = 0;
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	2200      	movs	r2, #0
 8002754:	601a      	str	r2, [r3, #0]
	        return IIS2MDC_ODR_PeriodOneShot;
 8002756:	2301      	movs	r3, #1
 8002758:	e012      	b.n	8002780 <IIS2MDC_GetSamplePeriod+0x90>
	case(IIS2MDC_ODR_10Hz):
			*Period =  (1000 / 10);
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	2264      	movs	r2, #100	; 0x64
 800275e:	601a      	str	r2, [r3, #0]
	        break;
 8002760:	e00d      	b.n	800277e <IIS2MDC_GetSamplePeriod+0x8e>
	case(IIS2MDC_ODR_20Hz):
			*Period = (1000 / 20);
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	2232      	movs	r2, #50	; 0x32
 8002766:	601a      	str	r2, [r3, #0]
	        break;
 8002768:	e009      	b.n	800277e <IIS2MDC_GetSamplePeriod+0x8e>
	case(IIS2MDC_ODR_50Hz):
			*Period = (1000 / 50);
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	2214      	movs	r2, #20
 800276e:	601a      	str	r2, [r3, #0]
	        break;
 8002770:	e005      	b.n	800277e <IIS2MDC_GetSamplePeriod+0x8e>
	case(IIS2MDC_ODR_100Hz):
			*Period = (1000 / 100);
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	220a      	movs	r2, #10
 8002776:	601a      	str	r2, [r3, #0]
	        break;
 8002778:	e001      	b.n	800277e <IIS2MDC_GetSamplePeriod+0x8e>
	default:
		    return IIS2MDC_ODR_Error;
 800277a:	2302      	movs	r3, #2
 800277c:	e000      	b.n	8002780 <IIS2MDC_GetSamplePeriod+0x90>
	}

	return IIS2MDC_Ok;
 800277e:	2300      	movs	r3, #0
}
 8002780:	4618      	mov	r0, r3
 8002782:	370c      	adds	r7, #12
 8002784:	46bd      	mov	sp, r7
 8002786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278a:	4770      	bx	lr

0800278c <IIS2MDC_ValidateParams>:

#include "IIS2MDC_Registers.h"
#include <stddef.h>

static int32_t IIS2MDC_ValidateParams(IIS2MDC_Context_t *Context, uint8_t Reg, uint8_t *Buffer, uint8_t Length)
{
 800278c:	b480      	push	{r7}
 800278e:	b087      	sub	sp, #28
 8002790:	af00      	add	r7, sp, #0
 8002792:	60f8      	str	r0, [r7, #12]
 8002794:	607a      	str	r2, [r7, #4]
 8002796:	461a      	mov	r2, r3
 8002798:	460b      	mov	r3, r1
 800279a:	72fb      	strb	r3, [r7, #11]
 800279c:	4613      	mov	r3, r2
 800279e:	72bb      	strb	r3, [r7, #10]
	int32_t ret = IIS2MDC_REG_OK;
 80027a0:	2300      	movs	r3, #0
 80027a2:	617b      	str	r3, [r7, #20]
    if(Context == NULL || Context->Read == NULL || Context->Write == NULL || Context->Handle == NULL)
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d00b      	beq.n	80027c2 <IIS2MDC_ValidateParams+0x36>
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	685b      	ldr	r3, [r3, #4]
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d007      	beq.n	80027c2 <IIS2MDC_ValidateParams+0x36>
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	689b      	ldr	r3, [r3, #8]
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d003      	beq.n	80027c2 <IIS2MDC_ValidateParams+0x36>
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d103      	bne.n	80027ca <IIS2MDC_ValidateParams+0x3e>
    {
    	ret |= IIS2MDC_REG_CONTEXT_ERR;
 80027c2:	697b      	ldr	r3, [r7, #20]
 80027c4:	f043 4308 	orr.w	r3, r3, #2281701376	; 0x88000000
 80027c8:	617b      	str	r3, [r7, #20]
    }

    if(Reg < IIS2MDC_REG_OFFSET_X_REG_L || Reg > IIS2MDC_REG_TEMP_OUT_H_REG)
 80027ca:	7afb      	ldrb	r3, [r7, #11]
 80027cc:	2b44      	cmp	r3, #68	; 0x44
 80027ce:	d902      	bls.n	80027d6 <IIS2MDC_ValidateParams+0x4a>
 80027d0:	7afb      	ldrb	r3, [r7, #11]
 80027d2:	2b6f      	cmp	r3, #111	; 0x6f
 80027d4:	d903      	bls.n	80027de <IIS2MDC_ValidateParams+0x52>
    {
    	ret |= IIS2MDC_REG_ADDR_ERR;
 80027d6:	697b      	ldr	r3, [r7, #20]
 80027d8:	f043 4310 	orr.w	r3, r3, #2415919104	; 0x90000000
 80027dc:	617b      	str	r3, [r7, #20]
    }

    if(Buffer == NULL)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d103      	bne.n	80027ec <IIS2MDC_ValidateParams+0x60>
    {
    	ret |= IIS2MDC_REG_BUFFER_ERR;
 80027e4:	697b      	ldr	r3, [r7, #20]
 80027e6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80027ea:	617b      	str	r3, [r7, #20]
    }

    if(Length == 0)
 80027ec:	7abb      	ldrb	r3, [r7, #10]
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d103      	bne.n	80027fa <IIS2MDC_ValidateParams+0x6e>
    {
       ret |= IIS2MDC_REG_LENGTH_ERR;
 80027f2:	697b      	ldr	r3, [r7, #20]
 80027f4:	f043 4320 	orr.w	r3, r3, #2684354560	; 0xa0000000
 80027f8:	617b      	str	r3, [r7, #20]
    }

    return ret;
 80027fa:	697b      	ldr	r3, [r7, #20]

}
 80027fc:	4618      	mov	r0, r3
 80027fe:	371c      	adds	r7, #28
 8002800:	46bd      	mov	sp, r7
 8002802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002806:	4770      	bx	lr

08002808 <IIS2MDC_ReadReg>:

int32_t IIS2MDC_ReadReg(IIS2MDC_Context_t *Context, uint8_t Reg, uint8_t *Buffer, uint8_t Length)
{
 8002808:	b590      	push	{r4, r7, lr}
 800280a:	b087      	sub	sp, #28
 800280c:	af00      	add	r7, sp, #0
 800280e:	60f8      	str	r0, [r7, #12]
 8002810:	607a      	str	r2, [r7, #4]
 8002812:	461a      	mov	r2, r3
 8002814:	460b      	mov	r3, r1
 8002816:	72fb      	strb	r3, [r7, #11]
 8002818:	4613      	mov	r3, r2
 800281a:	72bb      	strb	r3, [r7, #10]
	int32_t ret = IIS2MDC_ValidateParams(Context,Reg,Buffer,Length);
 800281c:	7abb      	ldrb	r3, [r7, #10]
 800281e:	7af9      	ldrb	r1, [r7, #11]
 8002820:	687a      	ldr	r2, [r7, #4]
 8002822:	68f8      	ldr	r0, [r7, #12]
 8002824:	f7ff ffb2 	bl	800278c <IIS2MDC_ValidateParams>
 8002828:	6178      	str	r0, [r7, #20]
	if(ret != IIS2MDC_REG_OK)
 800282a:	697b      	ldr	r3, [r7, #20]
 800282c:	2b00      	cmp	r3, #0
 800282e:	d001      	beq.n	8002834 <IIS2MDC_ReadReg+0x2c>
	{
		return ret;
 8002830:	697b      	ldr	r3, [r7, #20]
 8002832:	e009      	b.n	8002848 <IIS2MDC_ReadReg+0x40>
	}

	ret = Context->Read(Context->Handle, Reg, Buffer, Length);
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	685c      	ldr	r4, [r3, #4]
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	6818      	ldr	r0, [r3, #0]
 800283c:	7abb      	ldrb	r3, [r7, #10]
 800283e:	7af9      	ldrb	r1, [r7, #11]
 8002840:	687a      	ldr	r2, [r7, #4]
 8002842:	47a0      	blx	r4
 8002844:	6178      	str	r0, [r7, #20]
	return ret;
 8002846:	697b      	ldr	r3, [r7, #20]
}
 8002848:	4618      	mov	r0, r3
 800284a:	371c      	adds	r7, #28
 800284c:	46bd      	mov	sp, r7
 800284e:	bd90      	pop	{r4, r7, pc}

08002850 <IIS2MDC_WriteReg>:

int32_t IIS2MDC_WriteReg(IIS2MDC_Context_t *Context, uint8_t Reg, uint8_t *Buffer, uint8_t Length)
{
 8002850:	b590      	push	{r4, r7, lr}
 8002852:	b087      	sub	sp, #28
 8002854:	af00      	add	r7, sp, #0
 8002856:	60f8      	str	r0, [r7, #12]
 8002858:	607a      	str	r2, [r7, #4]
 800285a:	461a      	mov	r2, r3
 800285c:	460b      	mov	r3, r1
 800285e:	72fb      	strb	r3, [r7, #11]
 8002860:	4613      	mov	r3, r2
 8002862:	72bb      	strb	r3, [r7, #10]
	int32_t ret = IIS2MDC_ValidateParams(Context,Reg,Buffer,Length);
 8002864:	7abb      	ldrb	r3, [r7, #10]
 8002866:	7af9      	ldrb	r1, [r7, #11]
 8002868:	687a      	ldr	r2, [r7, #4]
 800286a:	68f8      	ldr	r0, [r7, #12]
 800286c:	f7ff ff8e 	bl	800278c <IIS2MDC_ValidateParams>
 8002870:	6178      	str	r0, [r7, #20]
	if(ret != IIS2MDC_REG_OK)
 8002872:	697b      	ldr	r3, [r7, #20]
 8002874:	2b00      	cmp	r3, #0
 8002876:	d001      	beq.n	800287c <IIS2MDC_WriteReg+0x2c>
	{
		return ret;
 8002878:	697b      	ldr	r3, [r7, #20]
 800287a:	e009      	b.n	8002890 <IIS2MDC_WriteReg+0x40>
	}

	ret = Context->Write(Context->Handle, Reg, Buffer, Length);
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	689c      	ldr	r4, [r3, #8]
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	6818      	ldr	r0, [r3, #0]
 8002884:	7abb      	ldrb	r3, [r7, #10]
 8002886:	7af9      	ldrb	r1, [r7, #11]
 8002888:	687a      	ldr	r2, [r7, #4]
 800288a:	47a0      	blx	r4
 800288c:	6178      	str	r0, [r7, #20]
	return ret;
 800288e:	697b      	ldr	r3, [r7, #20]
}
 8002890:	4618      	mov	r0, r3
 8002892:	371c      	adds	r7, #28
 8002894:	46bd      	mov	sp, r7
 8002896:	bd90      	pop	{r4, r7, pc}

08002898 <ISM330DHCX_Init>:
#define T_DATA_MASK  (4U)
#define ISM330DHCX_BOOT_BIT_MSK (0x80)


int32_t ISM330DHCX_Init(ISM330DHCX_Handle_t *Handle, ISM330DHCX_Init_Struct_t Settings, ISM330DHCX_IO_t *IO)
{
 8002898:	b084      	sub	sp, #16
 800289a:	b5b0      	push	{r4, r5, r7, lr}
 800289c:	b08c      	sub	sp, #48	; 0x30
 800289e:	af0a      	add	r7, sp, #40	; 0x28
 80028a0:	6078      	str	r0, [r7, #4]
 80028a2:	f107 001c 	add.w	r0, r7, #28
 80028a6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    if(Handle == NULL)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d102      	bne.n	80028b6 <ISM330DHCX_Init+0x1e>
    {
    	return ISM330DHCX_Error;
 80028b0:	f04f 33ff 	mov.w	r3, #4294967295
 80028b4:	e071      	b.n	800299a <ISM330DHCX_Init+0x102>
    }


    if(ISM330DHCX_RegisterIOBus(Handle, IO) != ISM330DHCX_Ok)
 80028b6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80028b8:	6878      	ldr	r0, [r7, #4]
 80028ba:	f000 f879 	bl	80029b0 <ISM330DHCX_RegisterIOBus>
 80028be:	4603      	mov	r3, r0
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d002      	beq.n	80028ca <ISM330DHCX_Init+0x32>
    {
    	return ISM330DHCX_ParamError;
 80028c4:	f06f 0302 	mvn.w	r3, #2
 80028c8:	e067      	b.n	800299a <ISM330DHCX_Init+0x102>
    }

    //Validate if using INT1
    if(Settings.INT1_CTRL != 0 || ((Settings.INT2_CTRL != 0) && (Settings.INT2_on_INT1 == ISM330DHCX_IRQOnBothPins)))
 80028ca:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d107      	bne.n	80028e2 <ISM330DHCX_Init+0x4a>
 80028d2:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d00a      	beq.n	80028f0 <ISM330DHCX_Init+0x58>
 80028da:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80028de:	2b20      	cmp	r3, #32
 80028e0:	d106      	bne.n	80028f0 <ISM330DHCX_Init+0x58>
    {
    	if(IO->ReadInt1Pin == NULL){
 80028e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80028e4:	691b      	ldr	r3, [r3, #16]
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d102      	bne.n	80028f0 <ISM330DHCX_Init+0x58>
        	return ISM330DHCX_ParamError; //If INT1 is used in any capacity, ReadInt1Pin is required
 80028ea:	f06f 0302 	mvn.w	r3, #2
 80028ee:	e054      	b.n	800299a <ISM330DHCX_Init+0x102>
    	}

    }

    //Validate if using INT2
    if(Settings.INT2_CTRL != 0 && IO->ReadInt2Pin == NULL)
 80028f0:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d006      	beq.n	8002906 <ISM330DHCX_Init+0x6e>
 80028f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80028fa:	695b      	ldr	r3, [r3, #20]
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d102      	bne.n	8002906 <ISM330DHCX_Init+0x6e>
    {
    	return ISM330DHCX_ParamError; //If INT2 is used in any capacity, ReadInt2Pin is required
 8002900:	f06f 0302 	mvn.w	r3, #2
 8002904:	e049      	b.n	800299a <ISM330DHCX_Init+0x102>
    }

    Handle->Context.Read = ISM330DHCX_ReadWrapper;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	4a27      	ldr	r2, [pc, #156]	; (80029a8 <ISM330DHCX_Init+0x110>)
 800290a:	625a      	str	r2, [r3, #36]	; 0x24
    Handle->Context.Write = ISM330DHCX_WriteWrapper;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	4a27      	ldr	r2, [pc, #156]	; (80029ac <ISM330DHCX_Init+0x114>)
 8002910:	621a      	str	r2, [r3, #32]
    Handle->Context.Handle = Handle;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	687a      	ldr	r2, [r7, #4]
 8002916:	61da      	str	r2, [r3, #28]
    Handle->AccelResolution = Settings.FS_XL;
 8002918:	f897 2040 	ldrb.w	r2, [r7, #64]	; 0x40
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
    Handle->GyroResolution = Settings.FS_G;
 8002922:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    Handle->Int1Mode = Settings.INT1_CTRL;
 800292c:	f897 204b 	ldrb.w	r2, [r7, #75]	; 0x4b
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
    Handle->Int2Mode = Settings.INT2_CTRL;
 8002936:	f897 204c 	ldrb.w	r2, [r7, #76]	; 0x4c
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
    Handle->IntPinMux = Settings.INT2_on_INT1;
 8002940:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    Handle->IntPolarity = Settings.H_LACTIVE;
 800294a:	f897 2049 	ldrb.w	r2, [r7, #73]	; 0x49
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    Handle->GyroDataRate = Settings.ODR_G;
 8002954:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
    Handle->AccelDataRate = Settings.ODR_XL;
 800295e:	f897 2034 	ldrb.w	r2, [r7, #52]	; 0x34
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

    //Initialize Bus
    if(Handle->IO.Init != NULL)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	2b00      	cmp	r3, #0
 800296e:	d002      	beq.n	8002976 <ISM330DHCX_Init+0xde>
    {
    	Handle->IO.Init();
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	4798      	blx	r3
    }

    return ISM330DHCX_RegisterInit(Handle, Settings);
 8002976:	466d      	mov	r5, sp
 8002978:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800297c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800297e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002980:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002982:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002984:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002988:	e885 0003 	stmia.w	r5, {r0, r1}
 800298c:	f107 031c 	add.w	r3, r7, #28
 8002990:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002992:	6878      	ldr	r0, [r7, #4]
 8002994:	f000 f9d5 	bl	8002d42 <ISM330DHCX_RegisterInit>
 8002998:	4603      	mov	r3, r0

}
 800299a:	4618      	mov	r0, r3
 800299c:	3708      	adds	r7, #8
 800299e:	46bd      	mov	sp, r7
 80029a0:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 80029a4:	b004      	add	sp, #16
 80029a6:	4770      	bx	lr
 80029a8:	08002ccb 	.word	0x08002ccb
 80029ac:	08002d07 	.word	0x08002d07

080029b0 <ISM330DHCX_RegisterIOBus>:
    ISM330DHCX_DeInit(Handle);
    return ISM330DHCX_Init(Handle, Settings, IO);
}

int32_t ISM330DHCX_RegisterIOBus(ISM330DHCX_Handle_t *Handle, ISM330DHCX_IO_t *IO)
{
 80029b0:	b4b0      	push	{r4, r5, r7}
 80029b2:	b083      	sub	sp, #12
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
 80029b8:	6039      	str	r1, [r7, #0]
    //Validate if Read/Write/GetTick have been provided
    if(IO->Read == NULL || IO->Write==NULL || IO->GetTick == NULL)
 80029ba:	683b      	ldr	r3, [r7, #0]
 80029bc:	689b      	ldr	r3, [r3, #8]
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d007      	beq.n	80029d2 <ISM330DHCX_RegisterIOBus+0x22>
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	68db      	ldr	r3, [r3, #12]
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d003      	beq.n	80029d2 <ISM330DHCX_RegisterIOBus+0x22>
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	699b      	ldr	r3, [r3, #24]
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d102      	bne.n	80029d8 <ISM330DHCX_RegisterIOBus+0x28>
    {
    	return ISM330DHCX_ParamError; //Write, Read, GetTick are required for basic device functionality
 80029d2:	f06f 0302 	mvn.w	r3, #2
 80029d6:	e00a      	b.n	80029ee <ISM330DHCX_RegisterIOBus+0x3e>
    }

    Handle->IO = *IO;
 80029d8:	687a      	ldr	r2, [r7, #4]
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	4614      	mov	r4, r2
 80029de:	461d      	mov	r5, r3
 80029e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80029e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80029e4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80029e8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    return ISM330DHCX_Ok;
 80029ec:	2300      	movs	r3, #0
}
 80029ee:	4618      	mov	r0, r3
 80029f0:	370c      	adds	r7, #12
 80029f2:	46bd      	mov	sp, r7
 80029f4:	bcb0      	pop	{r4, r5, r7}
 80029f6:	4770      	bx	lr

080029f8 <ISM330DHCX_ReadAccel>:

int32_t ISM330DHCX_ReadAccel(ISM330DHCX_Handle_t *Handle, float *Ax, float *Ay, float *Az)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b088      	sub	sp, #32
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	60f8      	str	r0, [r7, #12]
 8002a00:	60b9      	str	r1, [r7, #8]
 8002a02:	607a      	str	r2, [r7, #4]
 8002a04:	603b      	str	r3, [r7, #0]
	int32_t ret = ISM330DHCX_Ok;
 8002a06:	2300      	movs	r3, #0
 8002a08:	61fb      	str	r3, [r7, #28]
	int16_t buffer[3] = {0,0,0};
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	82bb      	strh	r3, [r7, #20]
 8002a0e:	2300      	movs	r3, #0
 8002a10:	82fb      	strh	r3, [r7, #22]
 8002a12:	2300      	movs	r3, #0
 8002a14:	833b      	strh	r3, [r7, #24]
    if(Handle == NULL)
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d102      	bne.n	8002a22 <ISM330DHCX_ReadAccel+0x2a>
    {
    	return ISM330DHCX_ParamError;
 8002a1c:	f06f 0302 	mvn.w	r3, #2
 8002a20:	e045      	b.n	8002aae <ISM330DHCX_ReadAccel+0xb6>
    }

    //Read Status register
    ret = ISM330DHCX_ReadReg(&Handle->Context, ISM330DHCX_REG_STATUS_REG, (uint8_t*)buffer, 1);
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	f103 001c 	add.w	r0, r3, #28
 8002a28:	f107 0214 	add.w	r2, r7, #20
 8002a2c:	2301      	movs	r3, #1
 8002a2e:	211e      	movs	r1, #30
 8002a30:	f000 fc02 	bl	8003238 <ISM330DHCX_ReadReg>
 8002a34:	61f8      	str	r0, [r7, #28]
    if(ret != ISM330DHCX_Ok)
 8002a36:	69fb      	ldr	r3, [r7, #28]
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d001      	beq.n	8002a40 <ISM330DHCX_ReadAccel+0x48>
    {
        return ret;
 8002a3c:	69fb      	ldr	r3, [r7, #28]
 8002a3e:	e036      	b.n	8002aae <ISM330DHCX_ReadAccel+0xb6>
    }
    //Check the XL Bit
    if(!(buffer[0] & XL_DATA_MASK))
 8002a40:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002a44:	b29b      	uxth	r3, r3
 8002a46:	f003 0301 	and.w	r3, r3, #1
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d102      	bne.n	8002a54 <ISM330DHCX_ReadAccel+0x5c>
    {
        return ISM330DHCX_DataNotReady;
 8002a4e:	f64b 63ef 	movw	r3, #48879	; 0xbeef
 8002a52:	e02c      	b.n	8002aae <ISM330DHCX_ReadAccel+0xb6>
    }

    //Read the data
    ret = ISM330DHCX_ReadReg(&Handle->Context, ISM330DHCX_REG_OUTX_L_A, (uint8_t*)buffer, 6);
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	f103 001c 	add.w	r0, r3, #28
 8002a5a:	f107 0214 	add.w	r2, r7, #20
 8002a5e:	2306      	movs	r3, #6
 8002a60:	2128      	movs	r1, #40	; 0x28
 8002a62:	f000 fbe9 	bl	8003238 <ISM330DHCX_ReadReg>
 8002a66:	61f8      	str	r0, [r7, #28]
    if(ret != ISM330DHCX_Ok)
 8002a68:	69fb      	ldr	r3, [r7, #28]
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d001      	beq.n	8002a72 <ISM330DHCX_ReadAccel+0x7a>
    {
    	return ret;
 8002a6e:	69fb      	ldr	r3, [r7, #28]
 8002a70:	e01d      	b.n	8002aae <ISM330DHCX_ReadAccel+0xb6>
    }
    //Convert the data to Gs
    ConvertXLData(Handle->AccelResolution, &buffer[0], Ax);
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8002a78:	f107 0114 	add.w	r1, r7, #20
 8002a7c:	68ba      	ldr	r2, [r7, #8]
 8002a7e:	4618      	mov	r0, r3
 8002a80:	f000 fb4a 	bl	8003118 <ConvertXLData>
    ConvertXLData(Handle->AccelResolution, &buffer[1], Ay);
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	f893 0029 	ldrb.w	r0, [r3, #41]	; 0x29
 8002a8a:	f107 0314 	add.w	r3, r7, #20
 8002a8e:	3302      	adds	r3, #2
 8002a90:	687a      	ldr	r2, [r7, #4]
 8002a92:	4619      	mov	r1, r3
 8002a94:	f000 fb40 	bl	8003118 <ConvertXLData>
    ConvertXLData(Handle->AccelResolution, &buffer[2], Az);
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	f893 0029 	ldrb.w	r0, [r3, #41]	; 0x29
 8002a9e:	f107 0314 	add.w	r3, r7, #20
 8002aa2:	3304      	adds	r3, #4
 8002aa4:	683a      	ldr	r2, [r7, #0]
 8002aa6:	4619      	mov	r1, r3
 8002aa8:	f000 fb36 	bl	8003118 <ConvertXLData>
    return ISM330DHCX_DataReady;
 8002aac:	2300      	movs	r3, #0
}
 8002aae:	4618      	mov	r0, r3
 8002ab0:	3720      	adds	r7, #32
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	bd80      	pop	{r7, pc}

08002ab6 <ISM330DHCX_ReadGyro>:

int32_t ISM330DHCX_ReadGyro(ISM330DHCX_Handle_t *Handle, float *Wx, float *Wy, float *Wz)
{
 8002ab6:	b580      	push	{r7, lr}
 8002ab8:	b088      	sub	sp, #32
 8002aba:	af00      	add	r7, sp, #0
 8002abc:	60f8      	str	r0, [r7, #12]
 8002abe:	60b9      	str	r1, [r7, #8]
 8002ac0:	607a      	str	r2, [r7, #4]
 8002ac2:	603b      	str	r3, [r7, #0]
	int32_t ret = ISM330DHCX_Ok;
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	61fb      	str	r3, [r7, #28]
	int16_t buffer[3] = {0,0,0};
 8002ac8:	2300      	movs	r3, #0
 8002aca:	82bb      	strh	r3, [r7, #20]
 8002acc:	2300      	movs	r3, #0
 8002ace:	82fb      	strh	r3, [r7, #22]
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	833b      	strh	r3, [r7, #24]
    if(Handle == NULL)
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d102      	bne.n	8002ae0 <ISM330DHCX_ReadGyro+0x2a>
    {
    	return ISM330DHCX_ParamError;
 8002ada:	f06f 0302 	mvn.w	r3, #2
 8002ade:	e045      	b.n	8002b6c <ISM330DHCX_ReadGyro+0xb6>
    }

    //Read Status register
    ret = ISM330DHCX_ReadReg(&Handle->Context, ISM330DHCX_REG_STATUS_REG, (uint8_t*)buffer, 1);
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	f103 001c 	add.w	r0, r3, #28
 8002ae6:	f107 0214 	add.w	r2, r7, #20
 8002aea:	2301      	movs	r3, #1
 8002aec:	211e      	movs	r1, #30
 8002aee:	f000 fba3 	bl	8003238 <ISM330DHCX_ReadReg>
 8002af2:	61f8      	str	r0, [r7, #28]
    if(ret != ISM330DHCX_Ok)
 8002af4:	69fb      	ldr	r3, [r7, #28]
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d001      	beq.n	8002afe <ISM330DHCX_ReadGyro+0x48>
    {
        return ret;
 8002afa:	69fb      	ldr	r3, [r7, #28]
 8002afc:	e036      	b.n	8002b6c <ISM330DHCX_ReadGyro+0xb6>
    }
    //Check the XL Bit
    if(!(buffer[0] & G_DATA_MASK))
 8002afe:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002b02:	b29b      	uxth	r3, r3
 8002b04:	f003 0302 	and.w	r3, r3, #2
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d102      	bne.n	8002b12 <ISM330DHCX_ReadGyro+0x5c>
    {
        return ISM330DHCX_DataNotReady;
 8002b0c:	f64b 63ef 	movw	r3, #48879	; 0xbeef
 8002b10:	e02c      	b.n	8002b6c <ISM330DHCX_ReadGyro+0xb6>
    }

    //Read the data
    ret = ISM330DHCX_ReadReg(&Handle->Context, ISM330DHCX_REG_OUTX_L_G, (uint8_t*)buffer, 6);
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	f103 001c 	add.w	r0, r3, #28
 8002b18:	f107 0214 	add.w	r2, r7, #20
 8002b1c:	2306      	movs	r3, #6
 8002b1e:	2122      	movs	r1, #34	; 0x22
 8002b20:	f000 fb8a 	bl	8003238 <ISM330DHCX_ReadReg>
 8002b24:	61f8      	str	r0, [r7, #28]
    if(ret != ISM330DHCX_Ok)
 8002b26:	69fb      	ldr	r3, [r7, #28]
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d001      	beq.n	8002b30 <ISM330DHCX_ReadGyro+0x7a>
    {
    	return ret;
 8002b2c:	69fb      	ldr	r3, [r7, #28]
 8002b2e:	e01d      	b.n	8002b6c <ISM330DHCX_ReadGyro+0xb6>
    }
    //Convert Gyro Data to DPS
    ConvertGData(Handle->GyroResolution, &buffer[0], Wx);
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002b36:	f107 0114 	add.w	r1, r7, #20
 8002b3a:	68ba      	ldr	r2, [r7, #8]
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	f000 fb2b 	bl	8003198 <ConvertGData>
    ConvertGData(Handle->GyroResolution, &buffer[1], Wy);
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	f893 0028 	ldrb.w	r0, [r3, #40]	; 0x28
 8002b48:	f107 0314 	add.w	r3, r7, #20
 8002b4c:	3302      	adds	r3, #2
 8002b4e:	687a      	ldr	r2, [r7, #4]
 8002b50:	4619      	mov	r1, r3
 8002b52:	f000 fb21 	bl	8003198 <ConvertGData>
    ConvertGData(Handle->GyroResolution, &buffer[2], Wz);
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	f893 0028 	ldrb.w	r0, [r3, #40]	; 0x28
 8002b5c:	f107 0314 	add.w	r3, r7, #20
 8002b60:	3304      	adds	r3, #4
 8002b62:	683a      	ldr	r2, [r7, #0]
 8002b64:	4619      	mov	r1, r3
 8002b66:	f000 fb17 	bl	8003198 <ConvertGData>
    return ISM330DHCX_DataReady;
 8002b6a:	2300      	movs	r3, #0
}
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	3720      	adds	r7, #32
 8002b70:	46bd      	mov	sp, r7
 8002b72:	bd80      	pop	{r7, pc}

08002b74 <ISM330DHCX_Reboot>:
    ConvertTData(buffer, Data);
    return ISM330DHCX_DataReady;
}

int32_t ISM330DHCX_Reboot(ISM330DHCX_Handle_t *Handle)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b084      	sub	sp, #16
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
    //Put Gyro / Accel In power down mode
	uint32_t ret = ISM330DHCX_Ok;
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	60fb      	str	r3, [r7, #12]
    uint8_t buffer = 0;
 8002b80:	2300      	movs	r3, #0
 8002b82:	72fb      	strb	r3, [r7, #11]
    ret = ISM330DHCX_WriteReg(&Handle->Context, ISM330DHCX_REG_CTRL1_XL, &buffer, 1);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	f103 001c 	add.w	r0, r3, #28
 8002b8a:	f107 020b 	add.w	r2, r7, #11
 8002b8e:	2301      	movs	r3, #1
 8002b90:	2110      	movs	r1, #16
 8002b92:	f000 fb7a 	bl	800328a <ISM330DHCX_WriteReg>
 8002b96:	4603      	mov	r3, r0
 8002b98:	60fb      	str	r3, [r7, #12]
    if(ret != ISM330DHCX_Ok)
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d001      	beq.n	8002ba4 <ISM330DHCX_Reboot+0x30>
    {
    	return ret;
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	e038      	b.n	8002c16 <ISM330DHCX_Reboot+0xa2>
    }

    buffer = 0;
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	72fb      	strb	r3, [r7, #11]
    ret = ISM330DHCX_WriteReg(&Handle->Context, ISM330DHCX_REG_CTRL2_G, &buffer, 1);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	f103 001c 	add.w	r0, r3, #28
 8002bae:	f107 020b 	add.w	r2, r7, #11
 8002bb2:	2301      	movs	r3, #1
 8002bb4:	2111      	movs	r1, #17
 8002bb6:	f000 fb68 	bl	800328a <ISM330DHCX_WriteReg>
 8002bba:	4603      	mov	r3, r0
 8002bbc:	60fb      	str	r3, [r7, #12]
    if(ret != ISM330DHCX_Ok)
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d001      	beq.n	8002bc8 <ISM330DHCX_Reboot+0x54>
    {
    	return ret;
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	e026      	b.n	8002c16 <ISM330DHCX_Reboot+0xa2>
    }

	//Set BOOT bit in ctrl 3
    buffer = ISM330DHCX_BOOT_BIT_MSK;
 8002bc8:	2380      	movs	r3, #128	; 0x80
 8002bca:	72fb      	strb	r3, [r7, #11]
    ret = ISM330DHCX_WriteReg(&Handle->Context, ISM330DHCX_REG_CTRL3_C, &buffer, 1);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	f103 001c 	add.w	r0, r3, #28
 8002bd2:	f107 020b 	add.w	r2, r7, #11
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	2112      	movs	r1, #18
 8002bda:	f000 fb56 	bl	800328a <ISM330DHCX_WriteReg>
 8002bde:	4603      	mov	r3, r0
 8002be0:	60fb      	str	r3, [r7, #12]
    if(ret != ISM330DHCX_Ok)
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d011      	beq.n	8002c0c <ISM330DHCX_Reboot+0x98>
    {
    	return ret;
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	e014      	b.n	8002c16 <ISM330DHCX_Reboot+0xa2>
    }

	//Wait for boot bit to become 0
    while(buffer & ISM330DHCX_BOOT_BIT_MSK)
    {
        ret = ISM330DHCX_ReadReg(&Handle->Context, ISM330DHCX_REG_CTRL3_C, &buffer, 1);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	f103 001c 	add.w	r0, r3, #28
 8002bf2:	f107 020b 	add.w	r2, r7, #11
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	2112      	movs	r1, #18
 8002bfa:	f000 fb1d 	bl	8003238 <ISM330DHCX_ReadReg>
 8002bfe:	4603      	mov	r3, r0
 8002c00:	60fb      	str	r3, [r7, #12]
        if(ret != ISM330DHCX_Ok)
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d001      	beq.n	8002c0c <ISM330DHCX_Reboot+0x98>
        {
        	return ret;
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	e004      	b.n	8002c16 <ISM330DHCX_Reboot+0xa2>
    while(buffer & ISM330DHCX_BOOT_BIT_MSK)
 8002c0c:	7afb      	ldrb	r3, [r7, #11]
 8002c0e:	b25b      	sxtb	r3, r3
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	dbeb      	blt.n	8002bec <ISM330DHCX_Reboot+0x78>
        }
    }
    return ISM330DHCX_Ok;
 8002c14:	2300      	movs	r3, #0
}
 8002c16:	4618      	mov	r0, r3
 8002c18:	3710      	adds	r7, #16
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	bd80      	pop	{r7, pc}

08002c1e <ISM330DHCX_Reset>:

int32_t ISM330DHCX_Reset(ISM330DHCX_Handle_t *Handle)
{
 8002c1e:	b580      	push	{r7, lr}
 8002c20:	b084      	sub	sp, #16
 8002c22:	af00      	add	r7, sp, #0
 8002c24:	6078      	str	r0, [r7, #4]
	//Put Gyro / Accel in power down mode
	uint32_t ret = ISM330DHCX_Ok;
 8002c26:	2300      	movs	r3, #0
 8002c28:	60fb      	str	r3, [r7, #12]
    uint8_t buffer = 0;
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	72fb      	strb	r3, [r7, #11]
    ret = ISM330DHCX_WriteReg(&Handle->Context, ISM330DHCX_REG_CTRL1_XL, &buffer, 1);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	f103 001c 	add.w	r0, r3, #28
 8002c34:	f107 020b 	add.w	r2, r7, #11
 8002c38:	2301      	movs	r3, #1
 8002c3a:	2110      	movs	r1, #16
 8002c3c:	f000 fb25 	bl	800328a <ISM330DHCX_WriteReg>
 8002c40:	4603      	mov	r3, r0
 8002c42:	60fb      	str	r3, [r7, #12]
    if(ret != ISM330DHCX_Ok)
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d001      	beq.n	8002c4e <ISM330DHCX_Reset+0x30>
    {
    	return ret;
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	e039      	b.n	8002cc2 <ISM330DHCX_Reset+0xa4>
    }

    buffer = 0;
 8002c4e:	2300      	movs	r3, #0
 8002c50:	72fb      	strb	r3, [r7, #11]
    ret = ISM330DHCX_WriteReg(&Handle->Context, ISM330DHCX_REG_CTRL2_G, &buffer, 1);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	f103 001c 	add.w	r0, r3, #28
 8002c58:	f107 020b 	add.w	r2, r7, #11
 8002c5c:	2301      	movs	r3, #1
 8002c5e:	2111      	movs	r1, #17
 8002c60:	f000 fb13 	bl	800328a <ISM330DHCX_WriteReg>
 8002c64:	4603      	mov	r3, r0
 8002c66:	60fb      	str	r3, [r7, #12]
    if(ret != ISM330DHCX_Ok)
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d001      	beq.n	8002c72 <ISM330DHCX_Reset+0x54>
    {
    	return ret;
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	e027      	b.n	8002cc2 <ISM330DHCX_Reset+0xa4>
    }
	//Set SW Reset bit in CTRL3
    buffer = ISM330DHCX_ResetSignal;
 8002c72:	2301      	movs	r3, #1
 8002c74:	72fb      	strb	r3, [r7, #11]
    ret = ISM330DHCX_WriteReg(&Handle->Context, ISM330DHCX_REG_CTRL3_C, &buffer, 1);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	f103 001c 	add.w	r0, r3, #28
 8002c7c:	f107 020b 	add.w	r2, r7, #11
 8002c80:	2301      	movs	r3, #1
 8002c82:	2112      	movs	r1, #18
 8002c84:	f000 fb01 	bl	800328a <ISM330DHCX_WriteReg>
 8002c88:	4603      	mov	r3, r0
 8002c8a:	60fb      	str	r3, [r7, #12]
    if(ret != ISM330DHCX_Ok)
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d011      	beq.n	8002cb6 <ISM330DHCX_Reset+0x98>
    {
    	return ret;
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	e015      	b.n	8002cc2 <ISM330DHCX_Reset+0xa4>
    }
	//Poll SW Reset bit
    while(buffer & ISM330DHCX_ResetSignal)
    {
        ret = ISM330DHCX_ReadReg(&Handle->Context, ISM330DHCX_REG_CTRL3_C, &buffer, 1);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	f103 001c 	add.w	r0, r3, #28
 8002c9c:	f107 020b 	add.w	r2, r7, #11
 8002ca0:	2301      	movs	r3, #1
 8002ca2:	2112      	movs	r1, #18
 8002ca4:	f000 fac8 	bl	8003238 <ISM330DHCX_ReadReg>
 8002ca8:	4603      	mov	r3, r0
 8002caa:	60fb      	str	r3, [r7, #12]
        if(ret != ISM330DHCX_Ok)
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d001      	beq.n	8002cb6 <ISM330DHCX_Reset+0x98>
        {
        	return ret;
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	e005      	b.n	8002cc2 <ISM330DHCX_Reset+0xa4>
    while(buffer & ISM330DHCX_ResetSignal)
 8002cb6:	7afb      	ldrb	r3, [r7, #11]
 8002cb8:	f003 0301 	and.w	r3, r3, #1
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d1ea      	bne.n	8002c96 <ISM330DHCX_Reset+0x78>
        }
    }
    return ISM330DHCX_Ok;
 8002cc0:	2300      	movs	r3, #0
}
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	3710      	adds	r7, #16
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	bd80      	pop	{r7, pc}

08002cca <ISM330DHCX_ReadWrapper>:

static int32_t ISM330DHCX_ReadWrapper(void *Handle, uint8_t Reg, uint8_t *Buffer, uint8_t Length)
{
 8002cca:	b580      	push	{r7, lr}
 8002ccc:	b086      	sub	sp, #24
 8002cce:	af00      	add	r7, sp, #0
 8002cd0:	60f8      	str	r0, [r7, #12]
 8002cd2:	607a      	str	r2, [r7, #4]
 8002cd4:	461a      	mov	r2, r3
 8002cd6:	460b      	mov	r3, r1
 8002cd8:	72fb      	strb	r3, [r7, #11]
 8002cda:	4613      	mov	r3, r2
 8002cdc:	72bb      	strb	r3, [r7, #10]
    ISM330DHCX_Handle_t *DevicePtr = (ISM330DHCX_Handle_t*)Handle;
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	617b      	str	r3, [r7, #20]
    if(DevicePtr->IO.Read != NULL)
 8002ce2:	697b      	ldr	r3, [r7, #20]
 8002ce4:	689b      	ldr	r3, [r3, #8]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d007      	beq.n	8002cfa <ISM330DHCX_ReadWrapper+0x30>
    {
        return DevicePtr->IO.Read(Reg,Buffer,Length);
 8002cea:	697b      	ldr	r3, [r7, #20]
 8002cec:	689b      	ldr	r3, [r3, #8]
 8002cee:	7aba      	ldrb	r2, [r7, #10]
 8002cf0:	7af8      	ldrb	r0, [r7, #11]
 8002cf2:	6879      	ldr	r1, [r7, #4]
 8002cf4:	4798      	blx	r3
 8002cf6:	4603      	mov	r3, r0
 8002cf8:	e001      	b.n	8002cfe <ISM330DHCX_ReadWrapper+0x34>
    }
    return ISM330DHCX_ReadRegErr;
 8002cfa:	f06f 0301 	mvn.w	r3, #1
}
 8002cfe:	4618      	mov	r0, r3
 8002d00:	3718      	adds	r7, #24
 8002d02:	46bd      	mov	sp, r7
 8002d04:	bd80      	pop	{r7, pc}

08002d06 <ISM330DHCX_WriteWrapper>:

static int32_t ISM330DHCX_WriteWrapper(void *Handle, uint8_t Reg, uint8_t *Buffer, uint8_t Length)
{
 8002d06:	b580      	push	{r7, lr}
 8002d08:	b086      	sub	sp, #24
 8002d0a:	af00      	add	r7, sp, #0
 8002d0c:	60f8      	str	r0, [r7, #12]
 8002d0e:	607a      	str	r2, [r7, #4]
 8002d10:	461a      	mov	r2, r3
 8002d12:	460b      	mov	r3, r1
 8002d14:	72fb      	strb	r3, [r7, #11]
 8002d16:	4613      	mov	r3, r2
 8002d18:	72bb      	strb	r3, [r7, #10]
    ISM330DHCX_Handle_t *DevicePtr = (ISM330DHCX_Handle_t*)Handle;
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	617b      	str	r3, [r7, #20]
    if(DevicePtr->IO.Write != NULL)
 8002d1e:	697b      	ldr	r3, [r7, #20]
 8002d20:	68db      	ldr	r3, [r3, #12]
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d007      	beq.n	8002d36 <ISM330DHCX_WriteWrapper+0x30>
    {
        return DevicePtr->IO.Write(Reg,Buffer,Length);
 8002d26:	697b      	ldr	r3, [r7, #20]
 8002d28:	68db      	ldr	r3, [r3, #12]
 8002d2a:	7aba      	ldrb	r2, [r7, #10]
 8002d2c:	7af8      	ldrb	r0, [r7, #11]
 8002d2e:	6879      	ldr	r1, [r7, #4]
 8002d30:	4798      	blx	r3
 8002d32:	4603      	mov	r3, r0
 8002d34:	e001      	b.n	8002d3a <ISM330DHCX_WriteWrapper+0x34>
    }
    return ISM330DHCX_ReadRegErr;
 8002d36:	f06f 0301 	mvn.w	r3, #1
}
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	3718      	adds	r7, #24
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	bd80      	pop	{r7, pc}

08002d42 <ISM330DHCX_RegisterInit>:

static int32_t ISM330DHCX_RegisterInit(ISM330DHCX_Handle_t *Handle,ISM330DHCX_Init_Struct_t Settings)
{
 8002d42:	b084      	sub	sp, #16
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b086      	sub	sp, #24
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
 8002d4c:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8002d50:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    int32_t ret = ISM330DHCX_Ok;
 8002d54:	2300      	movs	r3, #0
 8002d56:	617b      	str	r3, [r7, #20]
    uint8_t buffer[12] = {0};
 8002d58:	2300      	movs	r3, #0
 8002d5a:	60bb      	str	r3, [r7, #8]
 8002d5c:	f107 030c 	add.w	r3, r7, #12
 8002d60:	2200      	movs	r2, #0
 8002d62:	601a      	str	r2, [r3, #0]
 8002d64:	605a      	str	r2, [r3, #4]
    ISM330DHCX_Reboot(Handle);
 8002d66:	6878      	ldr	r0, [r7, #4]
 8002d68:	f7ff ff04 	bl	8002b74 <ISM330DHCX_Reboot>
    ISM330DHCX_Reset(Handle);
 8002d6c:	6878      	ldr	r0, [r7, #4]
 8002d6e:	f7ff ff56 	bl	8002c1e <ISM330DHCX_Reset>

    buffer[0] = Settings.SDO_PU_EN | 0x3F;
 8002d72:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002d76:	f043 033f 	orr.w	r3, r3, #63	; 0x3f
 8002d7a:	b2db      	uxtb	r3, r3
 8002d7c:	723b      	strb	r3, [r7, #8]
    ret = ISM330DHCX_WriteReg(&Handle->Context, ISM330DHCX_REG_PIN_CTRL, buffer, 1);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	f103 001c 	add.w	r0, r3, #28
 8002d84:	f107 0208 	add.w	r2, r7, #8
 8002d88:	2301      	movs	r3, #1
 8002d8a:	2102      	movs	r1, #2
 8002d8c:	f000 fa7d 	bl	800328a <ISM330DHCX_WriteReg>
 8002d90:	6178      	str	r0, [r7, #20]
    if(ret != ISM330DHCX_Ok)
 8002d92:	697b      	ldr	r3, [r7, #20]
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d001      	beq.n	8002d9c <ISM330DHCX_RegisterInit+0x5a>
    {
    	return ret;
 8002d98:	697b      	ldr	r3, [r7, #20]
 8002d9a:	e1b5      	b.n	8003108 <ISM330DHCX_RegisterInit+0x3c6>
    }


    buffer[0] = Settings.WTM & 0x00FF; //WTM Threshold is a 9 bit number
 8002d9c:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8002d9e:	b2db      	uxtb	r3, r3
 8002da0:	723b      	strb	r3, [r7, #8]
    ret = ISM330DHCX_WriteReg(&Handle->Context, ISM330DHCX_REG_FIFO_CTRL1, buffer, 1);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	f103 001c 	add.w	r0, r3, #28
 8002da8:	f107 0208 	add.w	r2, r7, #8
 8002dac:	2301      	movs	r3, #1
 8002dae:	2107      	movs	r1, #7
 8002db0:	f000 fa6b 	bl	800328a <ISM330DHCX_WriteReg>
 8002db4:	6178      	str	r0, [r7, #20]
    if(ret != ISM330DHCX_Ok)
 8002db6:	697b      	ldr	r3, [r7, #20]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d001      	beq.n	8002dc0 <ISM330DHCX_RegisterInit+0x7e>
    {
    	return ret;
 8002dbc:	697b      	ldr	r3, [r7, #20]
 8002dbe:	e1a3      	b.n	8003108 <ISM330DHCX_RegisterInit+0x3c6>
    }


    if(Settings.WTM > 0x00FF)
 8002dc0:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8002dc2:	2bff      	cmp	r3, #255	; 0xff
 8002dc4:	d906      	bls.n	8002dd4 <ISM330DHCX_RegisterInit+0x92>
    {
    	buffer[0] = Settings.STOP_ON_WTM | 0x01;
 8002dc6:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8002dca:	f043 0301 	orr.w	r3, r3, #1
 8002dce:	b2db      	uxtb	r3, r3
 8002dd0:	723b      	strb	r3, [r7, #8]
 8002dd2:	e002      	b.n	8002dda <ISM330DHCX_RegisterInit+0x98>
    } else
    {
    	buffer[0] = Settings.STOP_ON_WTM;
 8002dd4:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8002dd8:	723b      	strb	r3, [r7, #8]
    }
    ret = ISM330DHCX_WriteReg(&Handle->Context, ISM330DHCX_REG_FIFO_CTRL2, buffer, 1);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	f103 001c 	add.w	r0, r3, #28
 8002de0:	f107 0208 	add.w	r2, r7, #8
 8002de4:	2301      	movs	r3, #1
 8002de6:	2108      	movs	r1, #8
 8002de8:	f000 fa4f 	bl	800328a <ISM330DHCX_WriteReg>
 8002dec:	6178      	str	r0, [r7, #20]
    if(ret != ISM330DHCX_Ok)
 8002dee:	697b      	ldr	r3, [r7, #20]
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d001      	beq.n	8002df8 <ISM330DHCX_RegisterInit+0xb6>
    {
    	return ret;
 8002df4:	697b      	ldr	r3, [r7, #20]
 8002df6:	e187      	b.n	8003108 <ISM330DHCX_RegisterInit+0x3c6>
    }


    buffer[0] = Settings.BDR_GY | Settings.BDR_XL;
 8002df8:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 8002dfc:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002e00:	4313      	orrs	r3, r2
 8002e02:	b2db      	uxtb	r3, r3
 8002e04:	723b      	strb	r3, [r7, #8]
    ret = ISM330DHCX_WriteReg(&Handle->Context, ISM330DHCX_REG_FIFO_CTRL3, buffer, 1);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	f103 001c 	add.w	r0, r3, #28
 8002e0c:	f107 0208 	add.w	r2, r7, #8
 8002e10:	2301      	movs	r3, #1
 8002e12:	2109      	movs	r1, #9
 8002e14:	f000 fa39 	bl	800328a <ISM330DHCX_WriteReg>
 8002e18:	6178      	str	r0, [r7, #20]
    if(ret != ISM330DHCX_Ok)
 8002e1a:	697b      	ldr	r3, [r7, #20]
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d001      	beq.n	8002e24 <ISM330DHCX_RegisterInit+0xe2>
    {
    	return ret;
 8002e20:	697b      	ldr	r3, [r7, #20]
 8002e22:	e171      	b.n	8003108 <ISM330DHCX_RegisterInit+0x3c6>
    }


    buffer[0] = Settings.DEC_TS_BATCH | Settings.ODR_T_BATCH | Settings.FIFO_MODE;
 8002e24:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8002e28:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8002e2c:	4313      	orrs	r3, r2
 8002e2e:	b2da      	uxtb	r2, r3
 8002e30:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8002e34:	4313      	orrs	r3, r2
 8002e36:	b2db      	uxtb	r3, r3
 8002e38:	723b      	strb	r3, [r7, #8]
    ret = ISM330DHCX_WriteReg(&Handle->Context, ISM330DHCX_REG_FIFO_CTRL4, buffer, 1);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	f103 001c 	add.w	r0, r3, #28
 8002e40:	f107 0208 	add.w	r2, r7, #8
 8002e44:	2301      	movs	r3, #1
 8002e46:	210a      	movs	r1, #10
 8002e48:	f000 fa1f 	bl	800328a <ISM330DHCX_WriteReg>
 8002e4c:	6178      	str	r0, [r7, #20]
    if(ret != ISM330DHCX_Ok)
 8002e4e:	697b      	ldr	r3, [r7, #20]
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d001      	beq.n	8002e58 <ISM330DHCX_RegisterInit+0x116>
    {
    	return ret;
 8002e54:	697b      	ldr	r3, [r7, #20]
 8002e56:	e157      	b.n	8003108 <ISM330DHCX_RegisterInit+0x3c6>
    }


    buffer[0] = Settings.CNT_BDR_TH & 0x00FF;
 8002e58:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8002e5a:	b2db      	uxtb	r3, r3
 8002e5c:	723b      	strb	r3, [r7, #8]
    ret = ISM330DHCX_WriteReg(&Handle->Context, ISM330DHCX_REG_COUNTER_BDR_REG2, buffer, 1);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	f103 001c 	add.w	r0, r3, #28
 8002e64:	f107 0208 	add.w	r2, r7, #8
 8002e68:	2301      	movs	r3, #1
 8002e6a:	210c      	movs	r1, #12
 8002e6c:	f000 fa0d 	bl	800328a <ISM330DHCX_WriteReg>
 8002e70:	6178      	str	r0, [r7, #20]
    if(ret != ISM330DHCX_Ok)
 8002e72:	697b      	ldr	r3, [r7, #20]
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d001      	beq.n	8002e7c <ISM330DHCX_RegisterInit+0x13a>
    {
    	return ret;
 8002e78:	697b      	ldr	r3, [r7, #20]
 8002e7a:	e145      	b.n	8003108 <ISM330DHCX_RegisterInit+0x3c6>
    }


    buffer[0] = ((Settings.CNT_BDR_TH & 0x0700) >> 8) | Settings.dataready_pulsed | Settings.TRIG_COUNTER_BDR;
 8002e7c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8002e7e:	121b      	asrs	r3, r3, #8
 8002e80:	b25b      	sxtb	r3, r3
 8002e82:	f003 0307 	and.w	r3, r3, #7
 8002e86:	b25a      	sxtb	r2, r3
 8002e88:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002e8c:	b25b      	sxtb	r3, r3
 8002e8e:	4313      	orrs	r3, r2
 8002e90:	b25a      	sxtb	r2, r3
 8002e92:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8002e96:	b25b      	sxtb	r3, r3
 8002e98:	4313      	orrs	r3, r2
 8002e9a:	b25b      	sxtb	r3, r3
 8002e9c:	b2db      	uxtb	r3, r3
 8002e9e:	723b      	strb	r3, [r7, #8]
    ret = ISM330DHCX_WriteReg(&Handle->Context, ISM330DHCX_REG_COUNTER_BDR_REG1, buffer, 1);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	f103 001c 	add.w	r0, r3, #28
 8002ea6:	f107 0208 	add.w	r2, r7, #8
 8002eaa:	2301      	movs	r3, #1
 8002eac:	210b      	movs	r1, #11
 8002eae:	f000 f9ec 	bl	800328a <ISM330DHCX_WriteReg>
 8002eb2:	6178      	str	r0, [r7, #20]
    if(ret != ISM330DHCX_Ok)
 8002eb4:	697b      	ldr	r3, [r7, #20]
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d001      	beq.n	8002ebe <ISM330DHCX_RegisterInit+0x17c>
    {
    	return ret;
 8002eba:	697b      	ldr	r3, [r7, #20]
 8002ebc:	e124      	b.n	8003108 <ISM330DHCX_RegisterInit+0x3c6>
    }


    buffer[0] = Settings.INT1_CTRL;
 8002ebe:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8002ec2:	723b      	strb	r3, [r7, #8]
    ret = ISM330DHCX_WriteReg(&Handle->Context, ISM330DHCX_REG_INT1_CTRL, buffer, 1);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	f103 001c 	add.w	r0, r3, #28
 8002eca:	f107 0208 	add.w	r2, r7, #8
 8002ece:	2301      	movs	r3, #1
 8002ed0:	210d      	movs	r1, #13
 8002ed2:	f000 f9da 	bl	800328a <ISM330DHCX_WriteReg>
 8002ed6:	6178      	str	r0, [r7, #20]
    if(ret != ISM330DHCX_Ok)
 8002ed8:	697b      	ldr	r3, [r7, #20]
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d001      	beq.n	8002ee2 <ISM330DHCX_RegisterInit+0x1a0>
    {
    	return ret;
 8002ede:	697b      	ldr	r3, [r7, #20]
 8002ee0:	e112      	b.n	8003108 <ISM330DHCX_RegisterInit+0x3c6>
    }


    buffer[0] = Settings.INT2_CTRL;
 8002ee2:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8002ee6:	723b      	strb	r3, [r7, #8]
    ret = ISM330DHCX_WriteReg(&Handle->Context, ISM330DHCX_REG_INT2_CTRL, buffer, 1);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	f103 001c 	add.w	r0, r3, #28
 8002eee:	f107 0208 	add.w	r2, r7, #8
 8002ef2:	2301      	movs	r3, #1
 8002ef4:	210e      	movs	r1, #14
 8002ef6:	f000 f9c8 	bl	800328a <ISM330DHCX_WriteReg>
 8002efa:	6178      	str	r0, [r7, #20]
    if(ret != ISM330DHCX_Ok)
 8002efc:	697b      	ldr	r3, [r7, #20]
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d001      	beq.n	8002f06 <ISM330DHCX_RegisterInit+0x1c4>
    {
    	return ret;
 8002f02:	697b      	ldr	r3, [r7, #20]
 8002f04:	e100      	b.n	8003108 <ISM330DHCX_RegisterInit+0x3c6>
    }


    buffer[0] = 0x40 | Settings.PP_OD | Settings.H_LACTIVE | Settings.SIM | Settings.IF_INC;
 8002f06:	f897 2052 	ldrb.w	r2, [r7, #82]	; 0x52
 8002f0a:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
 8002f0e:	4313      	orrs	r3, r2
 8002f10:	b2da      	uxtb	r2, r3
 8002f12:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8002f16:	4313      	orrs	r3, r2
 8002f18:	b2da      	uxtb	r2, r3
 8002f1a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002f1e:	4313      	orrs	r3, r2
 8002f20:	b2db      	uxtb	r3, r3
 8002f22:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002f26:	b2db      	uxtb	r3, r3
 8002f28:	723b      	strb	r3, [r7, #8]
    ret = ISM330DHCX_WriteReg(&Handle->Context, ISM330DHCX_REG_CTRL3_C, buffer, 1);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	f103 001c 	add.w	r0, r3, #28
 8002f30:	f107 0208 	add.w	r2, r7, #8
 8002f34:	2301      	movs	r3, #1
 8002f36:	2112      	movs	r1, #18
 8002f38:	f000 f9a7 	bl	800328a <ISM330DHCX_WriteReg>
 8002f3c:	6178      	str	r0, [r7, #20]
    if(ret != ISM330DHCX_Ok)
 8002f3e:	697b      	ldr	r3, [r7, #20]
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d001      	beq.n	8002f48 <ISM330DHCX_RegisterInit+0x206>
    {
    	return ret;
 8002f44:	697b      	ldr	r3, [r7, #20]
 8002f46:	e0df      	b.n	8003108 <ISM330DHCX_RegisterInit+0x3c6>
    }


    buffer[0] = Settings.TriggerMode | Settings.XL_HM_MODE | Settings.USR_OFF_W | Settings.FTYPE;
 8002f48:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8002f4c:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8002f50:	4313      	orrs	r3, r2
 8002f52:	b2da      	uxtb	r2, r3
 8002f54:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 8002f58:	4313      	orrs	r3, r2
 8002f5a:	b2da      	uxtb	r2, r3
 8002f5c:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8002f60:	4313      	orrs	r3, r2
 8002f62:	b2db      	uxtb	r3, r3
 8002f64:	723b      	strb	r3, [r7, #8]
    ret = ISM330DHCX_WriteReg(&Handle->Context, ISM330DHCX_REG_CTRL6_C, buffer, 1);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	f103 001c 	add.w	r0, r3, #28
 8002f6c:	f107 0208 	add.w	r2, r7, #8
 8002f70:	2301      	movs	r3, #1
 8002f72:	2115      	movs	r1, #21
 8002f74:	f000 f989 	bl	800328a <ISM330DHCX_WriteReg>
 8002f78:	6178      	str	r0, [r7, #20]
    if(ret != ISM330DHCX_Ok)
 8002f7a:	697b      	ldr	r3, [r7, #20]
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d001      	beq.n	8002f84 <ISM330DHCX_RegisterInit+0x242>
    {
    	return ret;
 8002f80:	697b      	ldr	r3, [r7, #20]
 8002f82:	e0c1      	b.n	8003108 <ISM330DHCX_RegisterInit+0x3c6>
    }


    buffer[0] = Settings.G_HM_MODE | Settings.HP_EN_G | Settings.HPM_G | Settings.USR_OFF_ON_OUT;
 8002f84:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 8002f88:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8002f8c:	4313      	orrs	r3, r2
 8002f8e:	b2da      	uxtb	r2, r3
 8002f90:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8002f94:	4313      	orrs	r3, r2
 8002f96:	b2da      	uxtb	r2, r3
 8002f98:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 8002f9c:	4313      	orrs	r3, r2
 8002f9e:	b2db      	uxtb	r3, r3
 8002fa0:	723b      	strb	r3, [r7, #8]
    ret = ISM330DHCX_WriteReg(&Handle->Context, ISM330DHCX_REG_CTRL7_G, buffer, 1);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	f103 001c 	add.w	r0, r3, #28
 8002fa8:	f107 0208 	add.w	r2, r7, #8
 8002fac:	2301      	movs	r3, #1
 8002fae:	2116      	movs	r1, #22
 8002fb0:	f000 f96b 	bl	800328a <ISM330DHCX_WriteReg>
 8002fb4:	6178      	str	r0, [r7, #20]
    if(ret != ISM330DHCX_Ok)
 8002fb6:	697b      	ldr	r3, [r7, #20]
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d001      	beq.n	8002fc0 <ISM330DHCX_RegisterInit+0x27e>
    {
    	return ret;
 8002fbc:	697b      	ldr	r3, [r7, #20]
 8002fbe:	e0a3      	b.n	8003108 <ISM330DHCX_RegisterInit+0x3c6>
    }


    buffer[0] = Settings.HPCF_XL | Settings.HP_REF_MODE_XL | Settings.FASTSETTL_MODE_XL | Settings.HP_SLOPE_XL_EN;
 8002fc0:	f897 2040 	ldrb.w	r2, [r7, #64]	; 0x40
 8002fc4:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8002fc8:	4313      	orrs	r3, r2
 8002fca:	b2da      	uxtb	r2, r3
 8002fcc:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002fd0:	4313      	orrs	r3, r2
 8002fd2:	b2da      	uxtb	r2, r3
 8002fd4:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8002fd8:	4313      	orrs	r3, r2
 8002fda:	b2db      	uxtb	r3, r3
 8002fdc:	723b      	strb	r3, [r7, #8]
    ret = ISM330DHCX_WriteReg(&Handle->Context, ISM330DHCX_REG_CTRL8_XL, buffer, 1);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	f103 001c 	add.w	r0, r3, #28
 8002fe4:	f107 0208 	add.w	r2, r7, #8
 8002fe8:	2301      	movs	r3, #1
 8002fea:	2117      	movs	r1, #23
 8002fec:	f000 f94d 	bl	800328a <ISM330DHCX_WriteReg>
 8002ff0:	6178      	str	r0, [r7, #20]
    if(ret != ISM330DHCX_Ok)
 8002ff2:	697b      	ldr	r3, [r7, #20]
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d001      	beq.n	8002ffc <ISM330DHCX_RegisterInit+0x2ba>
    {
    	return ret;
 8002ff8:	697b      	ldr	r3, [r7, #20]
 8002ffa:	e085      	b.n	8003108 <ISM330DHCX_RegisterInit+0x3c6>
    }


    buffer[0] = Settings.DEN_X | Settings.DEN_Y | Settings.DEN_Z | Settings.DEN_XL_G | Settings.DEN_XL_EN | Settings.DEN_LH;
 8002ffc:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8003000:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8003004:	4313      	orrs	r3, r2
 8003006:	b2da      	uxtb	r2, r3
 8003008:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800300c:	4313      	orrs	r3, r2
 800300e:	b2da      	uxtb	r2, r3
 8003010:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003014:	4313      	orrs	r3, r2
 8003016:	b2da      	uxtb	r2, r3
 8003018:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800301c:	4313      	orrs	r3, r2
 800301e:	b2da      	uxtb	r2, r3
 8003020:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003024:	4313      	orrs	r3, r2
 8003026:	b2db      	uxtb	r3, r3
 8003028:	723b      	strb	r3, [r7, #8]
    ret = ISM330DHCX_WriteReg(&Handle->Context, ISM330DHCX_REG_CTRL9_XL, buffer, 1);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	f103 001c 	add.w	r0, r3, #28
 8003030:	f107 0208 	add.w	r2, r7, #8
 8003034:	2301      	movs	r3, #1
 8003036:	2118      	movs	r1, #24
 8003038:	f000 f927 	bl	800328a <ISM330DHCX_WriteReg>
 800303c:	6178      	str	r0, [r7, #20]
    if(ret != ISM330DHCX_Ok)
 800303e:	697b      	ldr	r3, [r7, #20]
 8003040:	2b00      	cmp	r3, #0
 8003042:	d001      	beq.n	8003048 <ISM330DHCX_RegisterInit+0x306>
    {
    	return ret;
 8003044:	697b      	ldr	r3, [r7, #20]
 8003046:	e05f      	b.n	8003108 <ISM330DHCX_RegisterInit+0x3c6>
    }


    buffer[0] = Settings.TIMESTAMP_EN;
 8003048:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 800304c:	723b      	strb	r3, [r7, #8]
    ret = ISM330DHCX_WriteReg(&Handle->Context, ISM330DHCX_REG_CTRL10_C, buffer, 1);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	f103 001c 	add.w	r0, r3, #28
 8003054:	f107 0208 	add.w	r2, r7, #8
 8003058:	2301      	movs	r3, #1
 800305a:	2119      	movs	r1, #25
 800305c:	f000 f915 	bl	800328a <ISM330DHCX_WriteReg>
 8003060:	6178      	str	r0, [r7, #20]
    if(ret != ISM330DHCX_Ok)
 8003062:	697b      	ldr	r3, [r7, #20]
 8003064:	2b00      	cmp	r3, #0
 8003066:	d001      	beq.n	800306c <ISM330DHCX_RegisterInit+0x32a>
    {
    	return ret;
 8003068:	697b      	ldr	r3, [r7, #20]
 800306a:	e04d      	b.n	8003108 <ISM330DHCX_RegisterInit+0x3c6>
    }


    buffer[0] = Settings.ODR_XL | Settings.FS_XL | Settings.LPF2_XL_EN;
 800306c:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 8003070:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8003074:	4313      	orrs	r3, r2
 8003076:	b2da      	uxtb	r2, r3
 8003078:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800307c:	4313      	orrs	r3, r2
 800307e:	b2db      	uxtb	r3, r3
 8003080:	723b      	strb	r3, [r7, #8]
    ret = ISM330DHCX_WriteReg(&Handle->Context, ISM330DHCX_REG_CTRL1_XL, buffer, 1);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	f103 001c 	add.w	r0, r3, #28
 8003088:	f107 0208 	add.w	r2, r7, #8
 800308c:	2301      	movs	r3, #1
 800308e:	2110      	movs	r1, #16
 8003090:	f000 f8fb 	bl	800328a <ISM330DHCX_WriteReg>
 8003094:	6178      	str	r0, [r7, #20]
    if(ret != ISM330DHCX_Ok)
 8003096:	697b      	ldr	r3, [r7, #20]
 8003098:	2b00      	cmp	r3, #0
 800309a:	d001      	beq.n	80030a0 <ISM330DHCX_RegisterInit+0x35e>
    {
    	return ret;
 800309c:	697b      	ldr	r3, [r7, #20]
 800309e:	e033      	b.n	8003108 <ISM330DHCX_RegisterInit+0x3c6>
    }


    buffer[0] = Settings.ODR_G | Settings.FS_G;
 80030a0:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 80030a4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80030a8:	4313      	orrs	r3, r2
 80030aa:	b2db      	uxtb	r3, r3
 80030ac:	723b      	strb	r3, [r7, #8]
    ret = ISM330DHCX_WriteReg(&Handle->Context, ISM330DHCX_REG_CTRL2_G, buffer, 1);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	f103 001c 	add.w	r0, r3, #28
 80030b4:	f107 0208 	add.w	r2, r7, #8
 80030b8:	2301      	movs	r3, #1
 80030ba:	2111      	movs	r1, #17
 80030bc:	f000 f8e5 	bl	800328a <ISM330DHCX_WriteReg>
 80030c0:	6178      	str	r0, [r7, #20]
    if(ret != ISM330DHCX_Ok)
 80030c2:	697b      	ldr	r3, [r7, #20]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d001      	beq.n	80030cc <ISM330DHCX_RegisterInit+0x38a>
    {
    	return ret;
 80030c8:	697b      	ldr	r3, [r7, #20]
 80030ca:	e01d      	b.n	8003108 <ISM330DHCX_RegisterInit+0x3c6>
    }

    ret = ISM330DHCX_ReadReg(&Handle->Context, ISM330DHCX_REG_OUTX_L_G, buffer, 1);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	f103 001c 	add.w	r0, r3, #28
 80030d2:	f107 0208 	add.w	r2, r7, #8
 80030d6:	2301      	movs	r3, #1
 80030d8:	2122      	movs	r1, #34	; 0x22
 80030da:	f000 f8ad 	bl	8003238 <ISM330DHCX_ReadReg>
 80030de:	6178      	str	r0, [r7, #20]
    //Discard Data that was collected during configuration
    ret = ISM330DHCX_ReadReg(&Handle->Context, ISM330DHCX_REG_OUTX_L_G, buffer, 12);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	f103 001c 	add.w	r0, r3, #28
 80030e6:	f107 0208 	add.w	r2, r7, #8
 80030ea:	230c      	movs	r3, #12
 80030ec:	2122      	movs	r1, #34	; 0x22
 80030ee:	f000 f8a3 	bl	8003238 <ISM330DHCX_ReadReg>
 80030f2:	6178      	str	r0, [r7, #20]
    if(ret != ISM330DHCX_Ok)
 80030f4:	697b      	ldr	r3, [r7, #20]
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d001      	beq.n	80030fe <ISM330DHCX_RegisterInit+0x3bc>
    {
    	return ret;
 80030fa:	697b      	ldr	r3, [r7, #20]
 80030fc:	e004      	b.n	8003108 <ISM330DHCX_RegisterInit+0x3c6>
    }
    Handle->Status = ISM330DHCX_Initialized;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	2201      	movs	r2, #1
 8003102:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return ISM330DHCX_Ok;
 8003106:	2300      	movs	r3, #0
}
 8003108:	4618      	mov	r0, r3
 800310a:	3718      	adds	r7, #24
 800310c:	46bd      	mov	sp, r7
 800310e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003112:	b004      	add	sp, #16
 8003114:	4770      	bx	lr
	...

08003118 <ConvertXLData>:

static void ConvertXLData(ISM330DHCX_AccelFullscale_t AccelResolution, int16_t *buffer, float *data)
{
 8003118:	b480      	push	{r7}
 800311a:	b087      	sub	sp, #28
 800311c:	af00      	add	r7, sp, #0
 800311e:	4603      	mov	r3, r0
 8003120:	60b9      	str	r1, [r7, #8]
 8003122:	607a      	str	r2, [r7, #4]
 8003124:	73fb      	strb	r3, [r7, #15]
      float ConversionFactor = 0;
 8003126:	f04f 0300 	mov.w	r3, #0
 800312a:	617b      	str	r3, [r7, #20]
      if(AccelResolution == ISM330DHCX_XL_2g)
 800312c:	7bfb      	ldrb	r3, [r7, #15]
 800312e:	2b00      	cmp	r3, #0
 8003130:	d102      	bne.n	8003138 <ConvertXLData+0x20>
      {
    	  ConversionFactor = 0.061;
 8003132:	4b14      	ldr	r3, [pc, #80]	; (8003184 <ConvertXLData+0x6c>)
 8003134:	617b      	str	r3, [r7, #20]
 8003136:	e00d      	b.n	8003154 <ConvertXLData+0x3c>
      }else if(AccelResolution == ISM330DHCX_XL_16g)
 8003138:	7bfb      	ldrb	r3, [r7, #15]
 800313a:	2b04      	cmp	r3, #4
 800313c:	d102      	bne.n	8003144 <ConvertXLData+0x2c>
	  {
    	  ConversionFactor = 0.488;
 800313e:	4b12      	ldr	r3, [pc, #72]	; (8003188 <ConvertXLData+0x70>)
 8003140:	617b      	str	r3, [r7, #20]
 8003142:	e007      	b.n	8003154 <ConvertXLData+0x3c>
	  }else if(AccelResolution == ISM330DHCX_XL_8g)
 8003144:	7bfb      	ldrb	r3, [r7, #15]
 8003146:	2b0c      	cmp	r3, #12
 8003148:	d102      	bne.n	8003150 <ConvertXLData+0x38>
	  {
		  ConversionFactor = 0.244;
 800314a:	4b10      	ldr	r3, [pc, #64]	; (800318c <ConvertXLData+0x74>)
 800314c:	617b      	str	r3, [r7, #20]
 800314e:	e001      	b.n	8003154 <ConvertXLData+0x3c>
	  }else //4g
	  {
		  ConversionFactor = 0.122;
 8003150:	4b0f      	ldr	r3, [pc, #60]	; (8003190 <ConvertXLData+0x78>)
 8003152:	617b      	str	r3, [r7, #20]
	  }
      *data = (ConversionFactor * (*buffer)) / 1000.0; //Div by 1000 to convert g, not mg
 8003154:	68bb      	ldr	r3, [r7, #8]
 8003156:	f9b3 3000 	ldrsh.w	r3, [r3]
 800315a:	ee07 3a90 	vmov	s15, r3
 800315e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003162:	edd7 7a05 	vldr	s15, [r7, #20]
 8003166:	ee27 7a27 	vmul.f32	s14, s14, s15
 800316a:	eddf 6a0a 	vldr	s13, [pc, #40]	; 8003194 <ConvertXLData+0x7c>
 800316e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	edc3 7a00 	vstr	s15, [r3]
}
 8003178:	bf00      	nop
 800317a:	371c      	adds	r7, #28
 800317c:	46bd      	mov	sp, r7
 800317e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003182:	4770      	bx	lr
 8003184:	3d79db23 	.word	0x3d79db23
 8003188:	3ef9db23 	.word	0x3ef9db23
 800318c:	3e79db23 	.word	0x3e79db23
 8003190:	3df9db23 	.word	0x3df9db23
 8003194:	447a0000 	.word	0x447a0000

08003198 <ConvertGData>:

static void ConvertGData(ISM330DHCX_GyroFullScale_t GyroResolution, int16_t *buffer, float *data)
{
 8003198:	b480      	push	{r7}
 800319a:	b087      	sub	sp, #28
 800319c:	af00      	add	r7, sp, #0
 800319e:	4603      	mov	r3, r0
 80031a0:	60b9      	str	r1, [r7, #8]
 80031a2:	607a      	str	r2, [r7, #4]
 80031a4:	73fb      	strb	r3, [r7, #15]

      float ConversionFactor = 0;
 80031a6:	f04f 0300 	mov.w	r3, #0
 80031aa:	617b      	str	r3, [r7, #20]
      if(GyroResolution == ISM330DHCX_G_125DPS)
 80031ac:	7bfb      	ldrb	r3, [r7, #15]
 80031ae:	2b02      	cmp	r3, #2
 80031b0:	d102      	bne.n	80031b8 <ConvertGData+0x20>
      {
    	  ConversionFactor = 0.004375;
 80031b2:	4b1a      	ldr	r3, [pc, #104]	; (800321c <ConvertGData+0x84>)
 80031b4:	617b      	str	r3, [r7, #20]
 80031b6:	e019      	b.n	80031ec <ConvertGData+0x54>
      }else if(GyroResolution == ISM330DHCX_G_250DPS)
 80031b8:	7bfb      	ldrb	r3, [r7, #15]
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d102      	bne.n	80031c4 <ConvertGData+0x2c>
	  {
    	  ConversionFactor = 0.00875;
 80031be:	4b18      	ldr	r3, [pc, #96]	; (8003220 <ConvertGData+0x88>)
 80031c0:	617b      	str	r3, [r7, #20]
 80031c2:	e013      	b.n	80031ec <ConvertGData+0x54>
	  }else if(GyroResolution == ISM330DHCX_G_500DPS)
 80031c4:	7bfb      	ldrb	r3, [r7, #15]
 80031c6:	2b04      	cmp	r3, #4
 80031c8:	d102      	bne.n	80031d0 <ConvertGData+0x38>
	  {
		  ConversionFactor = 0.0175;
 80031ca:	4b16      	ldr	r3, [pc, #88]	; (8003224 <ConvertGData+0x8c>)
 80031cc:	617b      	str	r3, [r7, #20]
 80031ce:	e00d      	b.n	80031ec <ConvertGData+0x54>
	  }else if(GyroResolution == ISM330DHCX_G_1000DPS)
 80031d0:	7bfb      	ldrb	r3, [r7, #15]
 80031d2:	2b08      	cmp	r3, #8
 80031d4:	d102      	bne.n	80031dc <ConvertGData+0x44>
	  {
		  ConversionFactor = 0.035;
 80031d6:	4b14      	ldr	r3, [pc, #80]	; (8003228 <ConvertGData+0x90>)
 80031d8:	617b      	str	r3, [r7, #20]
 80031da:	e007      	b.n	80031ec <ConvertGData+0x54>
	  }else if(GyroResolution == ISM330DHCX_G_2000DPS)
 80031dc:	7bfb      	ldrb	r3, [r7, #15]
 80031de:	2b0c      	cmp	r3, #12
 80031e0:	d102      	bne.n	80031e8 <ConvertGData+0x50>
	  {
		  ConversionFactor = 0.070;
 80031e2:	4b12      	ldr	r3, [pc, #72]	; (800322c <ConvertGData+0x94>)
 80031e4:	617b      	str	r3, [r7, #20]
 80031e6:	e001      	b.n	80031ec <ConvertGData+0x54>
	  }else //4000DPS
	  {
		  ConversionFactor = 0.140;
 80031e8:	4b11      	ldr	r3, [pc, #68]	; (8003230 <ConvertGData+0x98>)
 80031ea:	617b      	str	r3, [r7, #20]
	  }
      *data = ConversionFactor * (*buffer) / 1000.0; //Div by 1000 to convert to DPS from mDPS
 80031ec:	68bb      	ldr	r3, [r7, #8]
 80031ee:	f9b3 3000 	ldrsh.w	r3, [r3]
 80031f2:	ee07 3a90 	vmov	s15, r3
 80031f6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80031fa:	edd7 7a05 	vldr	s15, [r7, #20]
 80031fe:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003202:	eddf 6a0c 	vldr	s13, [pc, #48]	; 8003234 <ConvertGData+0x9c>
 8003206:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	edc3 7a00 	vstr	s15, [r3]
}
 8003210:	bf00      	nop
 8003212:	371c      	adds	r7, #28
 8003214:	46bd      	mov	sp, r7
 8003216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321a:	4770      	bx	lr
 800321c:	3b8f5c29 	.word	0x3b8f5c29
 8003220:	3c0f5c29 	.word	0x3c0f5c29
 8003224:	3c8f5c29 	.word	0x3c8f5c29
 8003228:	3d0f5c29 	.word	0x3d0f5c29
 800322c:	3d8f5c29 	.word	0x3d8f5c29
 8003230:	3e0f5c29 	.word	0x3e0f5c29
 8003234:	447a0000 	.word	0x447a0000

08003238 <ISM330DHCX_ReadReg>:
#include <stddef.h>

static int32_t ISM330DHCX_ValidateParams(uint8_t Reg, uint8_t *Buffer, uint8_t Length);

int32_t ISM330DHCX_ReadReg(ISM330DHCX_Context_t *Context, uint8_t Reg, uint8_t *Buffer, uint8_t Length)
{
 8003238:	b590      	push	{r4, r7, lr}
 800323a:	b087      	sub	sp, #28
 800323c:	af00      	add	r7, sp, #0
 800323e:	60f8      	str	r0, [r7, #12]
 8003240:	607a      	str	r2, [r7, #4]
 8003242:	461a      	mov	r2, r3
 8003244:	460b      	mov	r3, r1
 8003246:	72fb      	strb	r3, [r7, #11]
 8003248:	4613      	mov	r3, r2
 800324a:	72bb      	strb	r3, [r7, #10]
	if(Context->Read == NULL)
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	689b      	ldr	r3, [r3, #8]
 8003250:	2b00      	cmp	r3, #0
 8003252:	d101      	bne.n	8003258 <ISM330DHCX_ReadReg+0x20>
	{
		return ISM330DHCX_REG_CONTEXT_ERR;
 8003254:	2308      	movs	r3, #8
 8003256:	e014      	b.n	8003282 <ISM330DHCX_ReadReg+0x4a>
	}

	int32_t ret = ISM330DHCX_ValidateParams(Reg,Buffer,Length);
 8003258:	7aba      	ldrb	r2, [r7, #10]
 800325a:	7afb      	ldrb	r3, [r7, #11]
 800325c:	6879      	ldr	r1, [r7, #4]
 800325e:	4618      	mov	r0, r3
 8003260:	f000 f83c 	bl	80032dc <ISM330DHCX_ValidateParams>
 8003264:	6178      	str	r0, [r7, #20]
	if(ret != ISM330DHCX_REG_NO_ERR)
 8003266:	697b      	ldr	r3, [r7, #20]
 8003268:	2b00      	cmp	r3, #0
 800326a:	d001      	beq.n	8003270 <ISM330DHCX_ReadReg+0x38>
	{
        return ret;
 800326c:	697b      	ldr	r3, [r7, #20]
 800326e:	e008      	b.n	8003282 <ISM330DHCX_ReadReg+0x4a>
	}

	return Context->Read(Context->Handle, Reg, Buffer, Length);
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	689c      	ldr	r4, [r3, #8]
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	6818      	ldr	r0, [r3, #0]
 8003278:	7abb      	ldrb	r3, [r7, #10]
 800327a:	7af9      	ldrb	r1, [r7, #11]
 800327c:	687a      	ldr	r2, [r7, #4]
 800327e:	47a0      	blx	r4
 8003280:	4603      	mov	r3, r0
}
 8003282:	4618      	mov	r0, r3
 8003284:	371c      	adds	r7, #28
 8003286:	46bd      	mov	sp, r7
 8003288:	bd90      	pop	{r4, r7, pc}

0800328a <ISM330DHCX_WriteReg>:

int32_t ISM330DHCX_WriteReg(ISM330DHCX_Context_t *Context, uint8_t Reg, uint8_t *Buffer, uint8_t Length)
{
 800328a:	b590      	push	{r4, r7, lr}
 800328c:	b087      	sub	sp, #28
 800328e:	af00      	add	r7, sp, #0
 8003290:	60f8      	str	r0, [r7, #12]
 8003292:	607a      	str	r2, [r7, #4]
 8003294:	461a      	mov	r2, r3
 8003296:	460b      	mov	r3, r1
 8003298:	72fb      	strb	r3, [r7, #11]
 800329a:	4613      	mov	r3, r2
 800329c:	72bb      	strb	r3, [r7, #10]
	if(Context->Write == NULL)
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	685b      	ldr	r3, [r3, #4]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d101      	bne.n	80032aa <ISM330DHCX_WriteReg+0x20>
	{
		return ISM330DHCX_REG_CONTEXT_ERR;
 80032a6:	2308      	movs	r3, #8
 80032a8:	e014      	b.n	80032d4 <ISM330DHCX_WriteReg+0x4a>
	}

	int32_t ret = ISM330DHCX_ValidateParams(Reg,Buffer,Length);
 80032aa:	7aba      	ldrb	r2, [r7, #10]
 80032ac:	7afb      	ldrb	r3, [r7, #11]
 80032ae:	6879      	ldr	r1, [r7, #4]
 80032b0:	4618      	mov	r0, r3
 80032b2:	f000 f813 	bl	80032dc <ISM330DHCX_ValidateParams>
 80032b6:	6178      	str	r0, [r7, #20]
	if(ret != ISM330DHCX_REG_NO_ERR)
 80032b8:	697b      	ldr	r3, [r7, #20]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d001      	beq.n	80032c2 <ISM330DHCX_WriteReg+0x38>
	{
        return ret;
 80032be:	697b      	ldr	r3, [r7, #20]
 80032c0:	e008      	b.n	80032d4 <ISM330DHCX_WriteReg+0x4a>
	}

	return Context->Write(Context->Handle, Reg, Buffer, Length);
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	685c      	ldr	r4, [r3, #4]
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	6818      	ldr	r0, [r3, #0]
 80032ca:	7abb      	ldrb	r3, [r7, #10]
 80032cc:	7af9      	ldrb	r1, [r7, #11]
 80032ce:	687a      	ldr	r2, [r7, #4]
 80032d0:	47a0      	blx	r4
 80032d2:	4603      	mov	r3, r0
}
 80032d4:	4618      	mov	r0, r3
 80032d6:	371c      	adds	r7, #28
 80032d8:	46bd      	mov	sp, r7
 80032da:	bd90      	pop	{r4, r7, pc}

080032dc <ISM330DHCX_ValidateParams>:

static int32_t ISM330DHCX_ValidateParams(uint8_t Reg, uint8_t *Buffer, uint8_t Length)
{
 80032dc:	b480      	push	{r7}
 80032de:	b085      	sub	sp, #20
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	4603      	mov	r3, r0
 80032e4:	6039      	str	r1, [r7, #0]
 80032e6:	71fb      	strb	r3, [r7, #7]
 80032e8:	4613      	mov	r3, r2
 80032ea:	71bb      	strb	r3, [r7, #6]
	int32_t ret = 0;
 80032ec:	2300      	movs	r3, #0
 80032ee:	60fb      	str	r3, [r7, #12]
	if(Reg < ISM330DHCX_REG_FUNC_CFG_ACCESS || Reg > ISM330DHCX_REG_FIFO_OUT_Z_H)
 80032f0:	79fb      	ldrb	r3, [r7, #7]
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d002      	beq.n	80032fc <ISM330DHCX_ValidateParams+0x20>
 80032f6:	79fb      	ldrb	r3, [r7, #7]
 80032f8:	2b7e      	cmp	r3, #126	; 0x7e
 80032fa:	d903      	bls.n	8003304 <ISM330DHCX_ValidateParams+0x28>
	{
		ret |= ISM330DHCX_REG_PARAM_ERR;
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	f043 0301 	orr.w	r3, r3, #1
 8003302:	60fb      	str	r3, [r7, #12]
	}

	if(Buffer == NULL)
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	2b00      	cmp	r3, #0
 8003308:	d103      	bne.n	8003312 <ISM330DHCX_ValidateParams+0x36>
	{
        ret |= ISM330DHCX_BUFFER_PARAM_ERR;
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	f043 0302 	orr.w	r3, r3, #2
 8003310:	60fb      	str	r3, [r7, #12]
	}

	if( Length == 0 || Length > (ISM330DHCX_REG_FIFO_OUT_Z_H - ISM330DHCX_REG_FUNC_CFG_ACCESS))
 8003312:	79bb      	ldrb	r3, [r7, #6]
 8003314:	2b00      	cmp	r3, #0
 8003316:	d002      	beq.n	800331e <ISM330DHCX_ValidateParams+0x42>
 8003318:	79bb      	ldrb	r3, [r7, #6]
 800331a:	2b7d      	cmp	r3, #125	; 0x7d
 800331c:	d903      	bls.n	8003326 <ISM330DHCX_ValidateParams+0x4a>
	{
		ret |= ISM330DHCX_LENGTH_PARAM_ERR;
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	f043 0304 	orr.w	r3, r3, #4
 8003324:	60fb      	str	r3, [r7, #12]
	}

	return ret;
 8003326:	68fb      	ldr	r3, [r7, #12]
}
 8003328:	4618      	mov	r0, r3
 800332a:	3714      	adds	r7, #20
 800332c:	46bd      	mov	sp, r7
 800332e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003332:	4770      	bx	lr

08003334 <LPS22HH_Init>:
static int32_t LPS22HH_ReadRegWrapper(void *Handle,uint8_t Reg, uint8_t *Buffer, uint8_t Length);
static int32_t LPS22HH_RegisterInit(LPS22HH_Handle_t *Handle, LPS22HH_Init_Struct_t Settings);
static void ConvertPressureData(uint8_t *buffer, float *pressure);

int32_t LPS22HH_Init(LPS22HH_Handle_t *Handle, LPS22HH_Init_Struct_t Settings, LPS22HH_IO_t *IO)
{
 8003334:	b084      	sub	sp, #16
 8003336:	b5b0      	push	{r4, r5, r7, lr}
 8003338:	b086      	sub	sp, #24
 800333a:	af02      	add	r7, sp, #8
 800333c:	6078      	str	r0, [r7, #4]
 800333e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8003342:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	if(Handle->Status != LPS22HH_Initialized)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800334c:	2b01      	cmp	r3, #1
 800334e:	d04a      	beq.n	80033e6 <LPS22HH_Init+0xb2>
	    {

	    if(Handle == NULL)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2b00      	cmp	r3, #0
 8003354:	d102      	bne.n	800335c <LPS22HH_Init+0x28>
	    {
		    return LPS22HH_HandleError;
 8003356:	f04f 33ff 	mov.w	r3, #4294967295
 800335a:	e045      	b.n	80033e8 <LPS22HH_Init+0xb4>
	    }

	    if(IO->Write == NULL || IO->Read == NULL || IO->GetTick == NULL)
 800335c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800335e:	68db      	ldr	r3, [r3, #12]
 8003360:	2b00      	cmp	r3, #0
 8003362:	d007      	beq.n	8003374 <LPS22HH_Init+0x40>
 8003364:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003366:	689b      	ldr	r3, [r3, #8]
 8003368:	2b00      	cmp	r3, #0
 800336a:	d003      	beq.n	8003374 <LPS22HH_Init+0x40>
 800336c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800336e:	691b      	ldr	r3, [r3, #16]
 8003370:	2b00      	cmp	r3, #0
 8003372:	d102      	bne.n	800337a <LPS22HH_Init+0x46>
	    {
            return LPS22HH_IOError;
 8003374:	f06f 0301 	mvn.w	r3, #1
 8003378:	e036      	b.n	80033e8 <LPS22HH_Init+0xb4>
	    }

	    Handle->IO = *IO;
 800337a:	687a      	ldr	r2, [r7, #4]
 800337c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800337e:	4614      	mov	r4, r2
 8003380:	461d      	mov	r5, r3
 8003382:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003384:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003386:	e895 0003 	ldmia.w	r5, {r0, r1}
 800338a:	e884 0003 	stmia.w	r4, {r0, r1}
	    Handle->DataRate = Settings.ODR;
 800338e:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	    Handle->Context.Handle = Handle;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	687a      	ldr	r2, [r7, #4]
 800339c:	619a      	str	r2, [r3, #24]
	    Handle->Context.Read = LPS22HH_ReadRegWrapper;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	4a15      	ldr	r2, [pc, #84]	; (80033f8 <LPS22HH_Init+0xc4>)
 80033a2:	61da      	str	r2, [r3, #28]
	    Handle->Context.Write = LPS22HH_WriteRegWrapper;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	4a15      	ldr	r2, [pc, #84]	; (80033fc <LPS22HH_Init+0xc8>)
 80033a8:	621a      	str	r2, [r3, #32]

	    if(Handle->IO.Init != NULL)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d002      	beq.n	80033b8 <LPS22HH_Init+0x84>
	    {
	    	Handle->IO.Init();
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	4798      	blx	r3
	    }

        int32_t ret = LPS22HH_RegisterInit(Handle, Settings);
 80033b8:	466a      	mov	r2, sp
 80033ba:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80033be:	e893 0003 	ldmia.w	r3, {r0, r1}
 80033c2:	e882 0003 	stmia.w	r2, {r0, r1}
 80033c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80033ca:	cb0e      	ldmia	r3, {r1, r2, r3}
 80033cc:	6878      	ldr	r0, [r7, #4]
 80033ce:	f000 f95f 	bl	8003690 <LPS22HH_RegisterInit>
 80033d2:	60f8      	str	r0, [r7, #12]
        if(ret != LPS22HH_Ok)
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d001      	beq.n	80033de <LPS22HH_Init+0xaa>
        {
        	return ret;
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	e004      	b.n	80033e8 <LPS22HH_Init+0xb4>
        }

	    Handle->Status = LPS22HH_Initialized;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	2201      	movs	r2, #1
 80033e2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	    }
	return LPS22HH_Ok;
 80033e6:	2300      	movs	r3, #0
}
 80033e8:	4618      	mov	r0, r3
 80033ea:	3710      	adds	r7, #16
 80033ec:	46bd      	mov	sp, r7
 80033ee:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 80033f2:	b004      	add	sp, #16
 80033f4:	4770      	bx	lr
 80033f6:	bf00      	nop
 80033f8:	08003653 	.word	0x08003653
 80033fc:	08003617 	.word	0x08003617

08003400 <LPS22HH_ResetDevice>:
	Handle->Status = LPS22HH_Uninitialized;
	return LPS22HH_Ok;
}

int32_t LPS22HH_ResetDevice(LPS22HH_Handle_t *Handle)
{
 8003400:	b580      	push	{r7, lr}
 8003402:	b084      	sub	sp, #16
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
	int32_t ret = LPS22HH_Ok;
 8003408:	2300      	movs	r3, #0
 800340a:	60fb      	str	r3, [r7, #12]
	if(Handle == NULL)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2b00      	cmp	r3, #0
 8003410:	d102      	bne.n	8003418 <LPS22HH_ResetDevice+0x18>
	{
		return LPS22HH_HandleError;
 8003412:	f04f 33ff 	mov.w	r3, #4294967295
 8003416:	e012      	b.n	800343e <LPS22HH_ResetDevice+0x3e>
	}

	ret = LPS22HH_Reboot(Handle);
 8003418:	6878      	ldr	r0, [r7, #4]
 800341a:	f000 f8ab 	bl	8003574 <LPS22HH_Reboot>
 800341e:	60f8      	str	r0, [r7, #12]
	if(ret != LPS22HH_Ok)
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	2b00      	cmp	r3, #0
 8003424:	d001      	beq.n	800342a <LPS22HH_ResetDevice+0x2a>
	{
		return ret;
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	e009      	b.n	800343e <LPS22HH_ResetDevice+0x3e>
	}


	ret = LPS22HH_SWReset(Handle);
 800342a:	6878      	ldr	r0, [r7, #4]
 800342c:	f000 f850 	bl	80034d0 <LPS22HH_SWReset>
 8003430:	60f8      	str	r0, [r7, #12]
	if(ret != LPS22HH_Ok)
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	2b00      	cmp	r3, #0
 8003436:	d001      	beq.n	800343c <LPS22HH_ResetDevice+0x3c>
	{
		return ret;
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	e000      	b.n	800343e <LPS22HH_ResetDevice+0x3e>
	}

	return LPS22HH_Ok;
 800343c:	2300      	movs	r3, #0
}
 800343e:	4618      	mov	r0, r3
 8003440:	3710      	adds	r7, #16
 8003442:	46bd      	mov	sp, r7
 8003444:	bd80      	pop	{r7, pc}
	...

08003448 <LPS22HH_ReadPressure>:

	return LPS22HH_WriteReg(&Handle->Context,LPS22HH_REG_CTRL_REG2, &buffer, 1); //Store

}
int32_t LPS22HH_ReadPressure(LPS22HH_Handle_t *Handle, float *Pressure)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	b084      	sub	sp, #16
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
 8003450:	6039      	str	r1, [r7, #0]
	if(Handle->Status != LPS22HH_Initialized)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003458:	2b01      	cmp	r3, #1
 800345a:	d002      	beq.n	8003462 <LPS22HH_ReadPressure+0x1a>
	{
		return LPS22HH_InitError;
 800345c:	f06f 0302 	mvn.w	r3, #2
 8003460:	e030      	b.n	80034c4 <LPS22HH_ReadPressure+0x7c>
	}

	uint8_t buffer[3] = {0};
 8003462:	4b1a      	ldr	r3, [pc, #104]	; (80034cc <LPS22HH_ReadPressure+0x84>)
 8003464:	881b      	ldrh	r3, [r3, #0]
 8003466:	813b      	strh	r3, [r7, #8]
 8003468:	2300      	movs	r3, #0
 800346a:	72bb      	strb	r3, [r7, #10]

	int32_t ret = LPS22HH_ReadReg(&Handle->Context, LPS22HH_REG_STATUS, buffer, 1);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	f103 0018 	add.w	r0, r3, #24
 8003472:	f107 0208 	add.w	r2, r7, #8
 8003476:	2301      	movs	r3, #1
 8003478:	2127      	movs	r1, #39	; 0x27
 800347a:	f000 fac8 	bl	8003a0e <LPS22HH_ReadReg>
 800347e:	60f8      	str	r0, [r7, #12]
	if(ret != LPS22HH_Ok)
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	2b00      	cmp	r3, #0
 8003484:	d001      	beq.n	800348a <LPS22HH_ReadPressure+0x42>
	{
		return ret;
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	e01c      	b.n	80034c4 <LPS22HH_ReadPressure+0x7c>
	}

	if(!(buffer[0] & LPS22HH_PDATA_Msk))
 800348a:	7a3b      	ldrb	r3, [r7, #8]
 800348c:	f003 0301 	and.w	r3, r3, #1
 8003490:	2b00      	cmp	r3, #0
 8003492:	d101      	bne.n	8003498 <LPS22HH_ReadPressure+0x50>
	{
		return LPS22HH_NoNewData;
 8003494:	2301      	movs	r3, #1
 8003496:	e015      	b.n	80034c4 <LPS22HH_ReadPressure+0x7c>
	}

	ret = LPS22HH_ReadReg(&Handle->Context, LPS22HH_REG_PRESSURE_OUT_XL, buffer, 3);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	f103 0018 	add.w	r0, r3, #24
 800349e:	f107 0208 	add.w	r2, r7, #8
 80034a2:	2303      	movs	r3, #3
 80034a4:	2128      	movs	r1, #40	; 0x28
 80034a6:	f000 fab2 	bl	8003a0e <LPS22HH_ReadReg>
 80034aa:	60f8      	str	r0, [r7, #12]
	if(ret != LPS22HH_Ok)
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d001      	beq.n	80034b6 <LPS22HH_ReadPressure+0x6e>
	{
		return ret;
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	e006      	b.n	80034c4 <LPS22HH_ReadPressure+0x7c>
	}

	ConvertPressureData(buffer, Pressure);
 80034b6:	f107 0308 	add.w	r3, r7, #8
 80034ba:	6839      	ldr	r1, [r7, #0]
 80034bc:	4618      	mov	r0, r3
 80034be:	f000 f9e5 	bl	800388c <ConvertPressureData>
	return LPS22HH_Ok;
 80034c2:	2300      	movs	r3, #0
}
 80034c4:	4618      	mov	r0, r3
 80034c6:	3710      	adds	r7, #16
 80034c8:	46bd      	mov	sp, r7
 80034ca:	bd80      	pop	{r7, pc}
 80034cc:	08013550 	.word	0x08013550

080034d0 <LPS22HH_SWReset>:


static int32_t LPS22HH_SWReset(LPS22HH_Handle_t *Handle)
{
 80034d0:	b590      	push	{r4, r7, lr}
 80034d2:	b087      	sub	sp, #28
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
    if(Handle == NULL)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d102      	bne.n	80034e4 <LPS22HH_SWReset+0x14>
    {
        return LPS22HH_HandleError;
 80034de:	f04f 33ff 	mov.w	r3, #4294967295
 80034e2:	e043      	b.n	800356c <LPS22HH_SWReset+0x9c>
    }

    if(Handle->Context.Read == NULL || Handle->Context.Write == NULL)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	69db      	ldr	r3, [r3, #28]
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d003      	beq.n	80034f4 <LPS22HH_SWReset+0x24>
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6a1b      	ldr	r3, [r3, #32]
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d102      	bne.n	80034fa <LPS22HH_SWReset+0x2a>
    {
    	return LPS22HH_IOError;
 80034f4:	f06f 0301 	mvn.w	r3, #1
 80034f8:	e038      	b.n	800356c <LPS22HH_SWReset+0x9c>
    }


    int32_t ret = 0;
 80034fa:	2300      	movs	r3, #0
 80034fc:	617b      	str	r3, [r7, #20]
    uint8_t buffer = LPS22HH_ResetSignal;
 80034fe:	2304      	movs	r3, #4
 8003500:	73fb      	strb	r3, [r7, #15]
    ret = LPS22HH_WriteReg(&Handle->Context, LPS22HH_REG_CTRL_REG2, &buffer, 1);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	f103 0018 	add.w	r0, r3, #24
 8003508:	f107 020f 	add.w	r2, r7, #15
 800350c:	2301      	movs	r3, #1
 800350e:	2111      	movs	r1, #17
 8003510:	f000 faa2 	bl	8003a58 <LPS22HH_WriteReg>
 8003514:	6178      	str	r0, [r7, #20]
    if(ret != LPS22HH_Ok)
 8003516:	697b      	ldr	r3, [r7, #20]
 8003518:	2b00      	cmp	r3, #0
 800351a:	d001      	beq.n	8003520 <LPS22HH_SWReset+0x50>
    {
    	return ret;
 800351c:	697b      	ldr	r3, [r7, #20]
 800351e:	e025      	b.n	800356c <LPS22HH_SWReset+0x9c>
    }

    uint32_t timer = Handle->IO.GetTick();
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	691b      	ldr	r3, [r3, #16]
 8003524:	4798      	blx	r3
 8003526:	6138      	str	r0, [r7, #16]
    while(buffer & LPS22HH_ResetSignal)
 8003528:	e01a      	b.n	8003560 <LPS22HH_SWReset+0x90>
    {
    	ret = LPS22HH_ReadReg(&Handle->Context, LPS22HH_REG_CTRL_REG2, &buffer, 1);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	f103 0018 	add.w	r0, r3, #24
 8003530:	f107 020f 	add.w	r2, r7, #15
 8003534:	2301      	movs	r3, #1
 8003536:	2111      	movs	r1, #17
 8003538:	f000 fa69 	bl	8003a0e <LPS22HH_ReadReg>
 800353c:	6178      	str	r0, [r7, #20]
    	if(ret != LPS22HH_Ok)
 800353e:	697b      	ldr	r3, [r7, #20]
 8003540:	2b00      	cmp	r3, #0
 8003542:	d001      	beq.n	8003548 <LPS22HH_SWReset+0x78>
    	{
    		return ret;
 8003544:	697b      	ldr	r3, [r7, #20]
 8003546:	e011      	b.n	800356c <LPS22HH_SWReset+0x9c>
    	}

    	if(timer + 100 < Handle->IO.GetTick())
 8003548:	693b      	ldr	r3, [r7, #16]
 800354a:	f103 0464 	add.w	r4, r3, #100	; 0x64
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	691b      	ldr	r3, [r3, #16]
 8003552:	4798      	blx	r3
 8003554:	4603      	mov	r3, r0
 8003556:	429c      	cmp	r4, r3
 8003558:	d202      	bcs.n	8003560 <LPS22HH_SWReset+0x90>
    	{
    		return LPS22HH_Timeout;
 800355a:	f06f 0305 	mvn.w	r3, #5
 800355e:	e005      	b.n	800356c <LPS22HH_SWReset+0x9c>
    while(buffer & LPS22HH_ResetSignal)
 8003560:	7bfb      	ldrb	r3, [r7, #15]
 8003562:	f003 0304 	and.w	r3, r3, #4
 8003566:	2b00      	cmp	r3, #0
 8003568:	d1df      	bne.n	800352a <LPS22HH_SWReset+0x5a>
    	}
    }
    return ret;
 800356a:	697b      	ldr	r3, [r7, #20]
}
 800356c:	4618      	mov	r0, r3
 800356e:	371c      	adds	r7, #28
 8003570:	46bd      	mov	sp, r7
 8003572:	bd90      	pop	{r4, r7, pc}

08003574 <LPS22HH_Reboot>:

static int32_t LPS22HH_Reboot(LPS22HH_Handle_t *Handle)
{
 8003574:	b590      	push	{r4, r7, lr}
 8003576:	b087      	sub	sp, #28
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
    if(Handle == NULL)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2b00      	cmp	r3, #0
 8003580:	d102      	bne.n	8003588 <LPS22HH_Reboot+0x14>
    {
        return LPS22HH_HandleError;
 8003582:	f04f 33ff 	mov.w	r3, #4294967295
 8003586:	e042      	b.n	800360e <LPS22HH_Reboot+0x9a>
    }

    if(Handle->Context.Read == NULL || Handle->Context.Write == NULL)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	69db      	ldr	r3, [r3, #28]
 800358c:	2b00      	cmp	r3, #0
 800358e:	d003      	beq.n	8003598 <LPS22HH_Reboot+0x24>
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6a1b      	ldr	r3, [r3, #32]
 8003594:	2b00      	cmp	r3, #0
 8003596:	d102      	bne.n	800359e <LPS22HH_Reboot+0x2a>
    {
    	return LPS22HH_IOError;
 8003598:	f06f 0301 	mvn.w	r3, #1
 800359c:	e037      	b.n	800360e <LPS22HH_Reboot+0x9a>
    }

    int32_t ret = 0;
 800359e:	2300      	movs	r3, #0
 80035a0:	617b      	str	r3, [r7, #20]
    uint8_t buffer = LPS22HH_RebootSignal;
 80035a2:	2380      	movs	r3, #128	; 0x80
 80035a4:	73fb      	strb	r3, [r7, #15]
    ret = LPS22HH_WriteReg(&Handle->Context, LPS22HH_REG_CTRL_REG2, &buffer, 1);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	f103 0018 	add.w	r0, r3, #24
 80035ac:	f107 020f 	add.w	r2, r7, #15
 80035b0:	2301      	movs	r3, #1
 80035b2:	2111      	movs	r1, #17
 80035b4:	f000 fa50 	bl	8003a58 <LPS22HH_WriteReg>
 80035b8:	6178      	str	r0, [r7, #20]
    if(ret != LPS22HH_Ok)
 80035ba:	697b      	ldr	r3, [r7, #20]
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d001      	beq.n	80035c4 <LPS22HH_Reboot+0x50>
    {
    	return ret;
 80035c0:	697b      	ldr	r3, [r7, #20]
 80035c2:	e024      	b.n	800360e <LPS22HH_Reboot+0x9a>
    }

    uint32_t timer = Handle->IO.GetTick();
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	691b      	ldr	r3, [r3, #16]
 80035c8:	4798      	blx	r3
 80035ca:	6138      	str	r0, [r7, #16]
    while(buffer & LPS22HH_RebootSignal)
 80035cc:	e01a      	b.n	8003604 <LPS22HH_Reboot+0x90>
    {
    	ret = LPS22HH_ReadReg(&Handle->Context, LPS22HH_REG_INT_SOURCE, &buffer, 1);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	f103 0018 	add.w	r0, r3, #24
 80035d4:	f107 020f 	add.w	r2, r7, #15
 80035d8:	2301      	movs	r3, #1
 80035da:	2124      	movs	r1, #36	; 0x24
 80035dc:	f000 fa17 	bl	8003a0e <LPS22HH_ReadReg>
 80035e0:	6178      	str	r0, [r7, #20]
    	if(ret != LPS22HH_Ok)
 80035e2:	697b      	ldr	r3, [r7, #20]
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d001      	beq.n	80035ec <LPS22HH_Reboot+0x78>
    	{
    		return ret;
 80035e8:	697b      	ldr	r3, [r7, #20]
 80035ea:	e010      	b.n	800360e <LPS22HH_Reboot+0x9a>
    	}

    	if(timer + 100 < Handle->IO.GetTick())
 80035ec:	693b      	ldr	r3, [r7, #16]
 80035ee:	f103 0464 	add.w	r4, r3, #100	; 0x64
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	691b      	ldr	r3, [r3, #16]
 80035f6:	4798      	blx	r3
 80035f8:	4603      	mov	r3, r0
 80035fa:	429c      	cmp	r4, r3
 80035fc:	d202      	bcs.n	8003604 <LPS22HH_Reboot+0x90>
    	{
    		return LPS22HH_Timeout;
 80035fe:	f06f 0305 	mvn.w	r3, #5
 8003602:	e004      	b.n	800360e <LPS22HH_Reboot+0x9a>
    while(buffer & LPS22HH_RebootSignal)
 8003604:	7bfb      	ldrb	r3, [r7, #15]
 8003606:	b25b      	sxtb	r3, r3
 8003608:	2b00      	cmp	r3, #0
 800360a:	dbe0      	blt.n	80035ce <LPS22HH_Reboot+0x5a>
    	}

    }
    return ret;
 800360c:	697b      	ldr	r3, [r7, #20]
}
 800360e:	4618      	mov	r0, r3
 8003610:	371c      	adds	r7, #28
 8003612:	46bd      	mov	sp, r7
 8003614:	bd90      	pop	{r4, r7, pc}

08003616 <LPS22HH_WriteRegWrapper>:

static int32_t LPS22HH_WriteRegWrapper(void *Handle, uint8_t Reg, uint8_t *Buffer, uint8_t Length)
{
 8003616:	b580      	push	{r7, lr}
 8003618:	b086      	sub	sp, #24
 800361a:	af00      	add	r7, sp, #0
 800361c:	60f8      	str	r0, [r7, #12]
 800361e:	607a      	str	r2, [r7, #4]
 8003620:	461a      	mov	r2, r3
 8003622:	460b      	mov	r3, r1
 8003624:	72fb      	strb	r3, [r7, #11]
 8003626:	4613      	mov	r3, r2
 8003628:	72bb      	strb	r3, [r7, #10]
	LPS22HH_Handle_t *Dev = Handle;
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	617b      	str	r3, [r7, #20]
	if(Dev->IO.Write != NULL)
 800362e:	697b      	ldr	r3, [r7, #20]
 8003630:	68db      	ldr	r3, [r3, #12]
 8003632:	2b00      	cmp	r3, #0
 8003634:	d007      	beq.n	8003646 <LPS22HH_WriteRegWrapper+0x30>
	{
		return Dev->IO.Write(Reg, Buffer, Length);
 8003636:	697b      	ldr	r3, [r7, #20]
 8003638:	68db      	ldr	r3, [r3, #12]
 800363a:	7aba      	ldrb	r2, [r7, #10]
 800363c:	7af8      	ldrb	r0, [r7, #11]
 800363e:	6879      	ldr	r1, [r7, #4]
 8003640:	4798      	blx	r3
 8003642:	4603      	mov	r3, r0
 8003644:	e001      	b.n	800364a <LPS22HH_WriteRegWrapper+0x34>
	}
    return LPS22HH_IOError;
 8003646:	f06f 0301 	mvn.w	r3, #1
}
 800364a:	4618      	mov	r0, r3
 800364c:	3718      	adds	r7, #24
 800364e:	46bd      	mov	sp, r7
 8003650:	bd80      	pop	{r7, pc}

08003652 <LPS22HH_ReadRegWrapper>:

static int32_t LPS22HH_ReadRegWrapper(void *Handle,uint8_t Reg, uint8_t *Buffer, uint8_t Length)
{
 8003652:	b580      	push	{r7, lr}
 8003654:	b086      	sub	sp, #24
 8003656:	af00      	add	r7, sp, #0
 8003658:	60f8      	str	r0, [r7, #12]
 800365a:	607a      	str	r2, [r7, #4]
 800365c:	461a      	mov	r2, r3
 800365e:	460b      	mov	r3, r1
 8003660:	72fb      	strb	r3, [r7, #11]
 8003662:	4613      	mov	r3, r2
 8003664:	72bb      	strb	r3, [r7, #10]
	LPS22HH_Handle_t *Dev = Handle;
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	617b      	str	r3, [r7, #20]
	if(Dev->IO.Read != NULL)
 800366a:	697b      	ldr	r3, [r7, #20]
 800366c:	689b      	ldr	r3, [r3, #8]
 800366e:	2b00      	cmp	r3, #0
 8003670:	d007      	beq.n	8003682 <LPS22HH_ReadRegWrapper+0x30>
	{
		return Dev->IO.Read(Reg, Buffer, Length);
 8003672:	697b      	ldr	r3, [r7, #20]
 8003674:	689b      	ldr	r3, [r3, #8]
 8003676:	7aba      	ldrb	r2, [r7, #10]
 8003678:	7af8      	ldrb	r0, [r7, #11]
 800367a:	6879      	ldr	r1, [r7, #4]
 800367c:	4798      	blx	r3
 800367e:	4603      	mov	r3, r0
 8003680:	e001      	b.n	8003686 <LPS22HH_ReadRegWrapper+0x34>
	}
    return LPS22HH_IOError;
 8003682:	f06f 0301 	mvn.w	r3, #1
}
 8003686:	4618      	mov	r0, r3
 8003688:	3718      	adds	r7, #24
 800368a:	46bd      	mov	sp, r7
 800368c:	bd80      	pop	{r7, pc}
	...

08003690 <LPS22HH_RegisterInit>:

static int32_t LPS22HH_RegisterInit(LPS22HH_Handle_t *Handle, LPS22HH_Init_Struct_t Settings)
{
 8003690:	b084      	sub	sp, #16
 8003692:	b580      	push	{r7, lr}
 8003694:	b084      	sub	sp, #16
 8003696:	af00      	add	r7, sp, #0
 8003698:	6078      	str	r0, [r7, #4]
 800369a:	f107 001c 	add.w	r0, r7, #28
 800369e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	int32_t ret = LPS22HH_ResetDevice(Handle);
 80036a2:	6878      	ldr	r0, [r7, #4]
 80036a4:	f7ff feac 	bl	8003400 <LPS22HH_ResetDevice>
 80036a8:	60f8      	str	r0, [r7, #12]
	if(ret != LPS22HH_Ok)
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d001      	beq.n	80036b4 <LPS22HH_RegisterInit+0x24>
	{
		return ret;
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	e0df      	b.n	8003874 <LPS22HH_RegisterInit+0x1e4>
	}

	uint8_t buffer[2] = {0};
 80036b4:	2300      	movs	r3, #0
 80036b6:	813b      	strh	r3, [r7, #8]
    buffer[0] = Settings.INTERRUPT_CFG;
 80036b8:	7f3b      	ldrb	r3, [r7, #28]
 80036ba:	723b      	strb	r3, [r7, #8]
	ret = LPS22HH_WriteReg(&Handle->Context, LPS22HH_REG_INTERRUPT_CFG, &buffer[0], 1);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	f103 0018 	add.w	r0, r3, #24
 80036c2:	f107 0208 	add.w	r2, r7, #8
 80036c6:	2301      	movs	r3, #1
 80036c8:	210b      	movs	r1, #11
 80036ca:	f000 f9c5 	bl	8003a58 <LPS22HH_WriteReg>
 80036ce:	60f8      	str	r0, [r7, #12]
	if(ret != LPS22HH_Ok)
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d001      	beq.n	80036da <LPS22HH_RegisterInit+0x4a>
	{
		return ret;
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	e0cc      	b.n	8003874 <LPS22HH_RegisterInit+0x1e4>
	}

	if(Settings.THS_P > 32767)
 80036da:	8bfb      	ldrh	r3, [r7, #30]
 80036dc:	b21b      	sxth	r3, r3
 80036de:	2b00      	cmp	r3, #0
 80036e0:	da04      	bge.n	80036ec <LPS22HH_RegisterInit+0x5c>
	{
		buffer[0] = 32767 & 0x00FF;
 80036e2:	23ff      	movs	r3, #255	; 0xff
 80036e4:	723b      	strb	r3, [r7, #8]
		buffer[1] = (32767 & 0xFF00) >> 8;
 80036e6:	237f      	movs	r3, #127	; 0x7f
 80036e8:	727b      	strb	r3, [r7, #9]
 80036ea:	e007      	b.n	80036fc <LPS22HH_RegisterInit+0x6c>
	} else
	{
		buffer[0] = Settings.THS_P & 0x00FF;
 80036ec:	8bfb      	ldrh	r3, [r7, #30]
 80036ee:	b2db      	uxtb	r3, r3
 80036f0:	723b      	strb	r3, [r7, #8]
		buffer[1] = (Settings.THS_P & 0xFF00) >> 8;
 80036f2:	8bfb      	ldrh	r3, [r7, #30]
 80036f4:	0a1b      	lsrs	r3, r3, #8
 80036f6:	b29b      	uxth	r3, r3
 80036f8:	b2db      	uxtb	r3, r3
 80036fa:	727b      	strb	r3, [r7, #9]
	}
	ret = LPS22HH_WriteReg(&Handle->Context, LPS22HH_REG_THS_P_L, &buffer[0], 2);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	f103 0018 	add.w	r0, r3, #24
 8003702:	f107 0208 	add.w	r2, r7, #8
 8003706:	2302      	movs	r3, #2
 8003708:	210c      	movs	r1, #12
 800370a:	f000 f9a5 	bl	8003a58 <LPS22HH_WriteReg>
 800370e:	60f8      	str	r0, [r7, #12]
	if(ret != LPS22HH_Ok)
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	2b00      	cmp	r3, #0
 8003714:	d001      	beq.n	800371a <LPS22HH_RegisterInit+0x8a>
	{
		return ret;
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	e0ac      	b.n	8003874 <LPS22HH_RegisterInit+0x1e4>
	}

	buffer[0] = Settings.IF_CTRL;
 800371a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800371e:	723b      	strb	r3, [r7, #8]
	ret = LPS22HH_WriteReg(&Handle->Context, LPS22HH_REG_IF_CTRL, &buffer[0], 1);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	f103 0018 	add.w	r0, r3, #24
 8003726:	f107 0208 	add.w	r2, r7, #8
 800372a:	2301      	movs	r3, #1
 800372c:	210e      	movs	r1, #14
 800372e:	f000 f993 	bl	8003a58 <LPS22HH_WriteReg>
 8003732:	60f8      	str	r0, [r7, #12]
	if(ret != LPS22HH_Ok)
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	2b00      	cmp	r3, #0
 8003738:	d001      	beq.n	800373e <LPS22HH_RegisterInit+0xae>
	{
		return ret;
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	e09a      	b.n	8003874 <LPS22HH_RegisterInit+0x1e4>
	}

	buffer[0] = Settings.ODR | Settings.LPFP | 0x02 | Settings.SIM; //Enable BDU = 0x02
 800373e:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8003742:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8003746:	4313      	orrs	r3, r2
 8003748:	b2da      	uxtb	r2, r3
 800374a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800374e:	4313      	orrs	r3, r2
 8003750:	b2db      	uxtb	r3, r3
 8003752:	f043 0302 	orr.w	r3, r3, #2
 8003756:	b2db      	uxtb	r3, r3
 8003758:	723b      	strb	r3, [r7, #8]
	ret = LPS22HH_WriteReg(&Handle->Context, LPS22HH_REG_CTRL_REG1, &buffer[0], 1);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	f103 0018 	add.w	r0, r3, #24
 8003760:	f107 0208 	add.w	r2, r7, #8
 8003764:	2301      	movs	r3, #1
 8003766:	2110      	movs	r1, #16
 8003768:	f000 f976 	bl	8003a58 <LPS22HH_WriteReg>
 800376c:	60f8      	str	r0, [r7, #12]
	if(ret != LPS22HH_Ok)
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	2b00      	cmp	r3, #0
 8003772:	d001      	beq.n	8003778 <LPS22HH_RegisterInit+0xe8>
	{
		return ret;
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	e07d      	b.n	8003874 <LPS22HH_RegisterInit+0x1e4>
	}

	buffer[0] = Settings.CTRL_REG2;
 8003778:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800377c:	723b      	strb	r3, [r7, #8]
	ret = LPS22HH_WriteReg(&Handle->Context, LPS22HH_REG_CTRL_REG2, &buffer[0], 1);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	f103 0018 	add.w	r0, r3, #24
 8003784:	f107 0208 	add.w	r2, r7, #8
 8003788:	2301      	movs	r3, #1
 800378a:	2111      	movs	r1, #17
 800378c:	f000 f964 	bl	8003a58 <LPS22HH_WriteReg>
 8003790:	60f8      	str	r0, [r7, #12]
	if(ret != LPS22HH_Ok)
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	2b00      	cmp	r3, #0
 8003796:	d001      	beq.n	800379c <LPS22HH_RegisterInit+0x10c>
	{
		return ret;
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	e06b      	b.n	8003874 <LPS22HH_RegisterInit+0x1e4>
	}

	buffer[0] = Settings.INT_DRDY_Control | Settings.INT_S;
 800379c:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 80037a0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80037a4:	4313      	orrs	r3, r2
 80037a6:	b2db      	uxtb	r3, r3
 80037a8:	723b      	strb	r3, [r7, #8]
	ret = LPS22HH_WriteReg(&Handle->Context, LPS22HH_REG_CTRL_REG3, &buffer[0], 1);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	f103 0018 	add.w	r0, r3, #24
 80037b0:	f107 0208 	add.w	r2, r7, #8
 80037b4:	2301      	movs	r3, #1
 80037b6:	2112      	movs	r1, #18
 80037b8:	f000 f94e 	bl	8003a58 <LPS22HH_WriteReg>
 80037bc:	60f8      	str	r0, [r7, #12]
	if(ret != LPS22HH_Ok)
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d001      	beq.n	80037c8 <LPS22HH_RegisterInit+0x138>
	{
		return ret;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	e055      	b.n	8003874 <LPS22HH_RegisterInit+0x1e4>
	}

	buffer[0] = Settings.STOP_ON_WTM | Settings.F_MODE;
 80037c8:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80037cc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80037d0:	4313      	orrs	r3, r2
 80037d2:	b2db      	uxtb	r3, r3
 80037d4:	723b      	strb	r3, [r7, #8]
	ret = LPS22HH_WriteReg(&Handle->Context, LPS22HH_REG_FIFO_CTRL, &buffer[0], 1);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	f103 0018 	add.w	r0, r3, #24
 80037dc:	f107 0208 	add.w	r2, r7, #8
 80037e0:	2301      	movs	r3, #1
 80037e2:	2113      	movs	r1, #19
 80037e4:	f000 f938 	bl	8003a58 <LPS22HH_WriteReg>
 80037e8:	60f8      	str	r0, [r7, #12]
	if(ret != LPS22HH_Ok)
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d001      	beq.n	80037f4 <LPS22HH_RegisterInit+0x164>
	{
		return ret;
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	e03f      	b.n	8003874 <LPS22HH_RegisterInit+0x1e4>
	if(Settings.WTM > 255)
	{
		buffer[0] = 255;
	} else
	{
		buffer[0] = Settings.WTM;
 80037f4:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 80037f8:	723b      	strb	r3, [r7, #8]
	}
	ret = LPS22HH_WriteReg(&Handle->Context, LPS22HH_REG_FIFO_WTM, &buffer[0], 1);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	f103 0018 	add.w	r0, r3, #24
 8003800:	f107 0208 	add.w	r2, r7, #8
 8003804:	2301      	movs	r3, #1
 8003806:	2114      	movs	r1, #20
 8003808:	f000 f926 	bl	8003a58 <LPS22HH_WriteReg>
 800380c:	60f8      	str	r0, [r7, #12]
	if(ret != LPS22HH_Ok)
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	2b00      	cmp	r3, #0
 8003812:	d001      	beq.n	8003818 <LPS22HH_RegisterInit+0x188>
	{
		return ret;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	e02d      	b.n	8003874 <LPS22HH_RegisterInit+0x1e4>
	}

	if((Settings.REF_P * 4096) > 65535) //float -> LSB = multiply by 4096
 8003818:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800381c:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8003884 <LPS22HH_RegisterInit+0x1f4>
 8003820:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003824:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8003888 <LPS22HH_RegisterInit+0x1f8>
 8003828:	eef4 7ac7 	vcmpe.f32	s15, s14
 800382c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003830:	dd02      	ble.n	8003838 <LPS22HH_RegisterInit+0x1a8>
	{
		return LPS22HH_RefPError;
 8003832:	f06f 0303 	mvn.w	r3, #3
 8003836:	e01d      	b.n	8003874 <LPS22HH_RegisterInit+0x1e4>
	}

	*((uint16_t*)&buffer) = Settings.REF_P * 4096;
 8003838:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800383c:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8003884 <LPS22HH_RegisterInit+0x1f4>
 8003840:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003844:	f107 0308 	add.w	r3, r7, #8
 8003848:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800384c:	ee17 2a90 	vmov	r2, s15
 8003850:	b292      	uxth	r2, r2
 8003852:	801a      	strh	r2, [r3, #0]
	ret = LPS22HH_WriteReg(&Handle->Context, LPS22HH_REG_REF_P_L, &buffer[0], 2);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	f103 0018 	add.w	r0, r3, #24
 800385a:	f107 0208 	add.w	r2, r7, #8
 800385e:	2302      	movs	r3, #2
 8003860:	2115      	movs	r1, #21
 8003862:	f000 f8f9 	bl	8003a58 <LPS22HH_WriteReg>
 8003866:	60f8      	str	r0, [r7, #12]
	if(ret != LPS22HH_Ok)
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	2b00      	cmp	r3, #0
 800386c:	d001      	beq.n	8003872 <LPS22HH_RegisterInit+0x1e2>
	{
		return ret;
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	e000      	b.n	8003874 <LPS22HH_RegisterInit+0x1e4>
	}

	return LPS22HH_Ok;
 8003872:	2300      	movs	r3, #0
}
 8003874:	4618      	mov	r0, r3
 8003876:	3710      	adds	r7, #16
 8003878:	46bd      	mov	sp, r7
 800387a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800387e:	b004      	add	sp, #16
 8003880:	4770      	bx	lr
 8003882:	bf00      	nop
 8003884:	45800000 	.word	0x45800000
 8003888:	477fff00 	.word	0x477fff00

0800388c <ConvertPressureData>:

static void ConvertPressureData(uint8_t *buffer, float *pressure)
{
 800388c:	b580      	push	{r7, lr}
 800388e:	b084      	sub	sp, #16
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
 8003894:	6039      	str	r1, [r7, #0]
	int32_t Data;
	//determine sign
	if(buffer[2] & 0x80)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	3302      	adds	r3, #2
 800389a:	781b      	ldrb	r3, [r3, #0]
 800389c:	b25b      	sxtb	r3, r3
 800389e:	2b00      	cmp	r3, #0
 80038a0:	da03      	bge.n	80038aa <ConvertPressureData+0x1e>
	{
		Data = 0xFF000000; //Sign Extend if MSB of 24 Bit number is set
 80038a2:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 80038a6:	60fb      	str	r3, [r7, #12]
 80038a8:	e001      	b.n	80038ae <ConvertPressureData+0x22>
	} else
	{
		Data = 0;
 80038aa:	2300      	movs	r3, #0
 80038ac:	60fb      	str	r3, [r7, #12]
	}
	Data = Data + buffer[2] * 65536 + buffer[1] * 256 + buffer[0]; //Data = Data + Concat buffer[2:0]
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	3302      	adds	r3, #2
 80038b2:	781b      	ldrb	r3, [r3, #0]
 80038b4:	041a      	lsls	r2, r3, #16
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	441a      	add	r2, r3
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	3301      	adds	r3, #1
 80038be:	781b      	ldrb	r3, [r3, #0]
 80038c0:	021b      	lsls	r3, r3, #8
 80038c2:	4413      	add	r3, r2
 80038c4:	687a      	ldr	r2, [r7, #4]
 80038c6:	7812      	ldrb	r2, [r2, #0]
 80038c8:	4413      	add	r3, r2
 80038ca:	60fb      	str	r3, [r7, #12]
	*pressure = Data / 4096.0;
 80038cc:	68f8      	ldr	r0, [r7, #12]
 80038ce:	f7fc ff41 	bl	8000754 <__aeabi_i2d>
 80038d2:	f04f 0200 	mov.w	r2, #0
 80038d6:	4b08      	ldr	r3, [pc, #32]	; (80038f8 <ConvertPressureData+0x6c>)
 80038d8:	f7fd f8d0 	bl	8000a7c <__aeabi_ddiv>
 80038dc:	4602      	mov	r2, r0
 80038de:	460b      	mov	r3, r1
 80038e0:	4610      	mov	r0, r2
 80038e2:	4619      	mov	r1, r3
 80038e4:	f7fd f9b2 	bl	8000c4c <__aeabi_d2f>
 80038e8:	4602      	mov	r2, r0
 80038ea:	683b      	ldr	r3, [r7, #0]
 80038ec:	601a      	str	r2, [r3, #0]
}
 80038ee:	bf00      	nop
 80038f0:	3710      	adds	r7, #16
 80038f2:	46bd      	mov	sp, r7
 80038f4:	bd80      	pop	{r7, pc}
 80038f6:	bf00      	nop
 80038f8:	40b00000 	.word	0x40b00000

080038fc <LPS22HH_GetSamplePeriod>:

int32_t LPS22HH_GetSamplePeriod(LPS22HH_Handle_t *Handle, uint32_t *Period)
{
 80038fc:	b480      	push	{r7}
 80038fe:	b083      	sub	sp, #12
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
 8003904:	6039      	str	r1, [r7, #0]
	if(Handle->Status != LPS22HH_Initialized)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800390c:	2b01      	cmp	r3, #1
 800390e:	d002      	beq.n	8003916 <LPS22HH_GetSamplePeriod+0x1a>
	{
		return LPS22HH_InitError;
 8003910:	f06f 0302 	mvn.w	r3, #2
 8003914:	e043      	b.n	800399e <LPS22HH_GetSamplePeriod+0xa2>
	}

	switch(Handle->DataRate)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800391c:	2b70      	cmp	r3, #112	; 0x70
 800391e:	d039      	beq.n	8003994 <LPS22HH_GetSamplePeriod+0x98>
 8003920:	2b70      	cmp	r3, #112	; 0x70
 8003922:	dc3b      	bgt.n	800399c <LPS22HH_GetSamplePeriod+0xa0>
 8003924:	2b60      	cmp	r3, #96	; 0x60
 8003926:	d031      	beq.n	800398c <LPS22HH_GetSamplePeriod+0x90>
 8003928:	2b60      	cmp	r3, #96	; 0x60
 800392a:	dc37      	bgt.n	800399c <LPS22HH_GetSamplePeriod+0xa0>
 800392c:	2b50      	cmp	r3, #80	; 0x50
 800392e:	d029      	beq.n	8003984 <LPS22HH_GetSamplePeriod+0x88>
 8003930:	2b50      	cmp	r3, #80	; 0x50
 8003932:	dc33      	bgt.n	800399c <LPS22HH_GetSamplePeriod+0xa0>
 8003934:	2b40      	cmp	r3, #64	; 0x40
 8003936:	d021      	beq.n	800397c <LPS22HH_GetSamplePeriod+0x80>
 8003938:	2b40      	cmp	r3, #64	; 0x40
 800393a:	dc2f      	bgt.n	800399c <LPS22HH_GetSamplePeriod+0xa0>
 800393c:	2b30      	cmp	r3, #48	; 0x30
 800393e:	d019      	beq.n	8003974 <LPS22HH_GetSamplePeriod+0x78>
 8003940:	2b30      	cmp	r3, #48	; 0x30
 8003942:	dc2b      	bgt.n	800399c <LPS22HH_GetSamplePeriod+0xa0>
 8003944:	2b20      	cmp	r3, #32
 8003946:	d011      	beq.n	800396c <LPS22HH_GetSamplePeriod+0x70>
 8003948:	2b20      	cmp	r3, #32
 800394a:	dc27      	bgt.n	800399c <LPS22HH_GetSamplePeriod+0xa0>
 800394c:	2b00      	cmp	r3, #0
 800394e:	d002      	beq.n	8003956 <LPS22HH_GetSamplePeriod+0x5a>
 8003950:	2b10      	cmp	r3, #16
 8003952:	d006      	beq.n	8003962 <LPS22HH_GetSamplePeriod+0x66>
 8003954:	e022      	b.n	800399c <LPS22HH_GetSamplePeriod+0xa0>
	{
	case(LPS22HH_OneShot):
			*Period = 0;
 8003956:	683b      	ldr	r3, [r7, #0]
 8003958:	2200      	movs	r2, #0
 800395a:	601a      	str	r2, [r3, #0]
	        return LPS22HH_OneShotError;
 800395c:	f06f 0304 	mvn.w	r3, #4
 8003960:	e01d      	b.n	800399e <LPS22HH_GetSamplePeriod+0xa2>
			break;
	case(LPS22HH_1Hz):
			*Period = 1000 / 1;
 8003962:	683b      	ldr	r3, [r7, #0]
 8003964:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003968:	601a      	str	r2, [r3, #0]
			break;
 800396a:	e017      	b.n	800399c <LPS22HH_GetSamplePeriod+0xa0>
	case(LPS22HH_10Hz):
			*Period = 1000 / 10;
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	2264      	movs	r2, #100	; 0x64
 8003970:	601a      	str	r2, [r3, #0]
			break;
 8003972:	e013      	b.n	800399c <LPS22HH_GetSamplePeriod+0xa0>
	case(LPS22HH_25Hz):
			*Period = 1000 / 25;
 8003974:	683b      	ldr	r3, [r7, #0]
 8003976:	2228      	movs	r2, #40	; 0x28
 8003978:	601a      	str	r2, [r3, #0]
			break;
 800397a:	e00f      	b.n	800399c <LPS22HH_GetSamplePeriod+0xa0>
	case(LPS22HH_50Hz):
			*Period = 1000 / 50;
 800397c:	683b      	ldr	r3, [r7, #0]
 800397e:	2214      	movs	r2, #20
 8003980:	601a      	str	r2, [r3, #0]
			break;
 8003982:	e00b      	b.n	800399c <LPS22HH_GetSamplePeriod+0xa0>
	case(LPS22HH_75Hz):
			*Period = 1000 / 75;
 8003984:	683b      	ldr	r3, [r7, #0]
 8003986:	220d      	movs	r2, #13
 8003988:	601a      	str	r2, [r3, #0]
	        break;
 800398a:	e007      	b.n	800399c <LPS22HH_GetSamplePeriod+0xa0>
	case(LPS22HH_100Hz):
			*Period = 1000 / 100;
 800398c:	683b      	ldr	r3, [r7, #0]
 800398e:	220a      	movs	r2, #10
 8003990:	601a      	str	r2, [r3, #0]
			break;
 8003992:	e003      	b.n	800399c <LPS22HH_GetSamplePeriod+0xa0>
	case(LPS22HH_200Hz):
			*Period = 1000 / 200;
 8003994:	683b      	ldr	r3, [r7, #0]
 8003996:	2205      	movs	r2, #5
 8003998:	601a      	str	r2, [r3, #0]
			break;
 800399a:	bf00      	nop
	}
	return LPS22HH_Ok;
 800399c:	2300      	movs	r3, #0
}
 800399e:	4618      	mov	r0, r3
 80039a0:	370c      	adds	r7, #12
 80039a2:	46bd      	mov	sp, r7
 80039a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a8:	4770      	bx	lr

080039aa <LPS22HH_ValidateParams>:

#include "LPS22HH_Registers.h"
#include <stddef.h>

static uint32_t LPS22HH_ValidateParams(LPS22HH_Context_t *Context, uint8_t Reg, uint8_t *Buffer, uint8_t Length)
{
 80039aa:	b480      	push	{r7}
 80039ac:	b087      	sub	sp, #28
 80039ae:	af00      	add	r7, sp, #0
 80039b0:	60f8      	str	r0, [r7, #12]
 80039b2:	607a      	str	r2, [r7, #4]
 80039b4:	461a      	mov	r2, r3
 80039b6:	460b      	mov	r3, r1
 80039b8:	72fb      	strb	r3, [r7, #11]
 80039ba:	4613      	mov	r3, r2
 80039bc:	72bb      	strb	r3, [r7, #10]
    int32_t ret_status = LPS22HH_REG_OK;
 80039be:	2300      	movs	r3, #0
 80039c0:	617b      	str	r3, [r7, #20]

    if(Context == NULL)
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d103      	bne.n	80039d0 <LPS22HH_ValidateParams+0x26>
    {
    	ret_status |= LPS22HH_REG_CONTEXT_ERR;
 80039c8:	697b      	ldr	r3, [r7, #20]
 80039ca:	f043 0308 	orr.w	r3, r3, #8
 80039ce:	617b      	str	r3, [r7, #20]
    }

    if(Reg < LPS22HH_REG_INTERRUPT_CFG || Reg > LPS22HH_REG_FIFO_DATA_OUT_TEMP_H)
 80039d0:	7afb      	ldrb	r3, [r7, #11]
 80039d2:	2b0a      	cmp	r3, #10
 80039d4:	d902      	bls.n	80039dc <LPS22HH_ValidateParams+0x32>
 80039d6:	7afb      	ldrb	r3, [r7, #11]
 80039d8:	2b7c      	cmp	r3, #124	; 0x7c
 80039da:	d903      	bls.n	80039e4 <LPS22HH_ValidateParams+0x3a>
    {
    	ret_status |= LPS22HH_REG_REGADDR_ERR;
 80039dc:	697b      	ldr	r3, [r7, #20]
 80039de:	f043 0301 	orr.w	r3, r3, #1
 80039e2:	617b      	str	r3, [r7, #20]
    }

    if(Buffer == NULL)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d103      	bne.n	80039f2 <LPS22HH_ValidateParams+0x48>
    {
    	ret_status |= LPS22HH_REG_BUFF_ERR;
 80039ea:	697b      	ldr	r3, [r7, #20]
 80039ec:	f043 0304 	orr.w	r3, r3, #4
 80039f0:	617b      	str	r3, [r7, #20]
    }

    if(Length == 0)
 80039f2:	7abb      	ldrb	r3, [r7, #10]
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d103      	bne.n	8003a00 <LPS22HH_ValidateParams+0x56>
    {
    	ret_status |= LPS22HH_REG_LENGTH_ERR;
 80039f8:	697b      	ldr	r3, [r7, #20]
 80039fa:	f043 0302 	orr.w	r3, r3, #2
 80039fe:	617b      	str	r3, [r7, #20]
    }

    return ret_status;
 8003a00:	697b      	ldr	r3, [r7, #20]
}
 8003a02:	4618      	mov	r0, r3
 8003a04:	371c      	adds	r7, #28
 8003a06:	46bd      	mov	sp, r7
 8003a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0c:	4770      	bx	lr

08003a0e <LPS22HH_ReadReg>:

int32_t LPS22HH_ReadReg(LPS22HH_Context_t *Context, uint8_t Reg, uint8_t *Buffer, uint8_t Length)
{
 8003a0e:	b590      	push	{r4, r7, lr}
 8003a10:	b087      	sub	sp, #28
 8003a12:	af00      	add	r7, sp, #0
 8003a14:	60f8      	str	r0, [r7, #12]
 8003a16:	607a      	str	r2, [r7, #4]
 8003a18:	461a      	mov	r2, r3
 8003a1a:	460b      	mov	r3, r1
 8003a1c:	72fb      	strb	r3, [r7, #11]
 8003a1e:	4613      	mov	r3, r2
 8003a20:	72bb      	strb	r3, [r7, #10]
	int32_t ret = LPS22HH_ValidateParams(Context,Reg,Buffer,Length);
 8003a22:	7abb      	ldrb	r3, [r7, #10]
 8003a24:	7af9      	ldrb	r1, [r7, #11]
 8003a26:	687a      	ldr	r2, [r7, #4]
 8003a28:	68f8      	ldr	r0, [r7, #12]
 8003a2a:	f7ff ffbe 	bl	80039aa <LPS22HH_ValidateParams>
 8003a2e:	4603      	mov	r3, r0
 8003a30:	617b      	str	r3, [r7, #20]
    if(ret != LPS22HH_REG_OK)
 8003a32:	697b      	ldr	r3, [r7, #20]
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d001      	beq.n	8003a3c <LPS22HH_ReadReg+0x2e>
    {
    	return ret;
 8003a38:	697b      	ldr	r3, [r7, #20]
 8003a3a:	e009      	b.n	8003a50 <LPS22HH_ReadReg+0x42>
    }

	ret = Context->Read(Context->Handle, Reg, Buffer, Length);
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	685c      	ldr	r4, [r3, #4]
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	6818      	ldr	r0, [r3, #0]
 8003a44:	7abb      	ldrb	r3, [r7, #10]
 8003a46:	7af9      	ldrb	r1, [r7, #11]
 8003a48:	687a      	ldr	r2, [r7, #4]
 8003a4a:	47a0      	blx	r4
 8003a4c:	6178      	str	r0, [r7, #20]
	return ret;
 8003a4e:	697b      	ldr	r3, [r7, #20]
}
 8003a50:	4618      	mov	r0, r3
 8003a52:	371c      	adds	r7, #28
 8003a54:	46bd      	mov	sp, r7
 8003a56:	bd90      	pop	{r4, r7, pc}

08003a58 <LPS22HH_WriteReg>:

int32_t LPS22HH_WriteReg(LPS22HH_Context_t *Context, uint8_t Reg, uint8_t *Buffer, uint8_t Length)
{
 8003a58:	b590      	push	{r4, r7, lr}
 8003a5a:	b087      	sub	sp, #28
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	60f8      	str	r0, [r7, #12]
 8003a60:	607a      	str	r2, [r7, #4]
 8003a62:	461a      	mov	r2, r3
 8003a64:	460b      	mov	r3, r1
 8003a66:	72fb      	strb	r3, [r7, #11]
 8003a68:	4613      	mov	r3, r2
 8003a6a:	72bb      	strb	r3, [r7, #10]
	int32_t ret = LPS22HH_ValidateParams(Context,Reg,Buffer,Length);
 8003a6c:	7abb      	ldrb	r3, [r7, #10]
 8003a6e:	7af9      	ldrb	r1, [r7, #11]
 8003a70:	687a      	ldr	r2, [r7, #4]
 8003a72:	68f8      	ldr	r0, [r7, #12]
 8003a74:	f7ff ff99 	bl	80039aa <LPS22HH_ValidateParams>
 8003a78:	4603      	mov	r3, r0
 8003a7a:	617b      	str	r3, [r7, #20]
    if(ret != LPS22HH_REG_OK)
 8003a7c:	697b      	ldr	r3, [r7, #20]
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d001      	beq.n	8003a86 <LPS22HH_WriteReg+0x2e>
    {
    	return ret;
 8003a82:	697b      	ldr	r3, [r7, #20]
 8003a84:	e009      	b.n	8003a9a <LPS22HH_WriteReg+0x42>
    }

	ret = Context->Write(Context->Handle, Reg, Buffer, Length);
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	689c      	ldr	r4, [r3, #8]
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	6818      	ldr	r0, [r3, #0]
 8003a8e:	7abb      	ldrb	r3, [r7, #10]
 8003a90:	7af9      	ldrb	r1, [r7, #11]
 8003a92:	687a      	ldr	r2, [r7, #4]
 8003a94:	47a0      	blx	r4
 8003a96:	6178      	str	r0, [r7, #20]
	return ret;
 8003a98:	697b      	ldr	r3, [r7, #20]
}
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	371c      	adds	r7, #28
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	bd90      	pop	{r4, r7, pc}
	...

08003aa4 <OV5640_LinkBus>:
#define  OV5640_ID                                 0x5640U
static int32_t OV5640_ReadWrapper(void *Handle, uint16_t Reg, uint8_t *Data, uint16_t Length);
static int32_t OV5640_WriteWrapper(void *Handle, uint16_t Reg, uint8_t *Data, uint16_t Length);

void OV5640_LinkBus(OV5640_Handle_t *OV5640_Handle, OV5640_IO_t *CameraIO)
{
 8003aa4:	b5b0      	push	{r4, r5, r7, lr}
 8003aa6:	b082      	sub	sp, #8
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]
 8003aac:	6039      	str	r1, [r7, #0]
	OV5640_Handle->IO               = *CameraIO;
 8003aae:	687a      	ldr	r2, [r7, #4]
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	4614      	mov	r4, r2
 8003ab4:	461d      	mov	r5, r3
 8003ab6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003ab8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003aba:	e895 0003 	ldmia.w	r5, {r0, r1}
 8003abe:	e884 0003 	stmia.w	r4, {r0, r1}

	OV5640_Handle->Context.Read  = OV5640_ReadWrapper;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	4a07      	ldr	r2, [pc, #28]	; (8003ae4 <OV5640_LinkBus+0x40>)
 8003ac6:	61da      	str	r2, [r3, #28]
	OV5640_Handle->Context.Write = OV5640_WriteWrapper;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	4a07      	ldr	r2, [pc, #28]	; (8003ae8 <OV5640_LinkBus+0x44>)
 8003acc:	619a      	str	r2, [r3, #24]
	OV5640_Handle->Context.Handle   = OV5640_Handle;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	687a      	ldr	r2, [r7, #4]
 8003ad2:	621a      	str	r2, [r3, #32]

	OV5640_Handle->IO.Init();
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	685b      	ldr	r3, [r3, #4]
 8003ad8:	4798      	blx	r3
}
 8003ada:	bf00      	nop
 8003adc:	3708      	adds	r7, #8
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	bdb0      	pop	{r4, r5, r7, pc}
 8003ae2:	bf00      	nop
 8003ae4:	08003c29 	.word	0x08003c29
 8003ae8:	08003c5b 	.word	0x08003c5b

08003aec <OV5640_Init>:

int32_t OV5640_Init(OV5640_Handle_t *OV5640, uint32_t Resolution, uint32_t PixelFormat)
{
 8003aec:	b580      	push	{r7, lr}
 8003aee:	b088      	sub	sp, #32
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	60f8      	str	r0, [r7, #12]
 8003af4:	60b9      	str	r1, [r7, #8]
 8003af6:	607a      	str	r2, [r7, #4]
  uint32_t index;
  int32_t ret = OV5640_OK;
 8003af8:	2300      	movs	r3, #0
 8003afa:	61bb      	str	r3, [r7, #24]
    {OV5640_SYSTEM_CTROL0, 0x02},
  };
  uint8_t tmp;

    /* Check if resolution is supported */
    if ((Resolution > OV5640_R800x480) ||
 8003afc:	68bb      	ldr	r3, [r7, #8]
 8003afe:	2b04      	cmp	r3, #4
 8003b00:	d80e      	bhi.n	8003b20 <OV5640_Init+0x34>
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d00f      	beq.n	8003b28 <OV5640_Init+0x3c>
        ((PixelFormat != OV5640_RGB565) && (PixelFormat != OV5640_YUV422) &&
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2b02      	cmp	r3, #2
 8003b0c:	d00c      	beq.n	8003b28 <OV5640_Init+0x3c>
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	2b01      	cmp	r3, #1
 8003b12:	d009      	beq.n	8003b28 <OV5640_Init+0x3c>
         (PixelFormat != OV5640_RGB888) && (PixelFormat != OV5640_Y8) &&
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	2b07      	cmp	r3, #7
 8003b18:	d006      	beq.n	8003b28 <OV5640_Init+0x3c>
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	2b08      	cmp	r3, #8
 8003b1e:	d003      	beq.n	8003b28 <OV5640_Init+0x3c>
         (PixelFormat != OV5640_JPEG)))
    {
      ret = OV5640_ERROR;
 8003b20:	f04f 33ff 	mov.w	r3, #4294967295
 8003b24:	61bb      	str	r3, [r7, #24]
 8003b26:	e04a      	b.n	8003bbe <OV5640_Init+0xd2>
    }
    else
    {
      /* Set common parameters for all resolutions */
      for (index = 0; index < (sizeof(OV5640_Common) / 4U) ; index++)
 8003b28:	2300      	movs	r3, #0
 8003b2a:	61fb      	str	r3, [r7, #28]
 8003b2c:	e01f      	b.n	8003b6e <OV5640_Init+0x82>
      {
        if (ret != OV5640_ERROR)
 8003b2e:	69bb      	ldr	r3, [r7, #24]
 8003b30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b34:	d018      	beq.n	8003b68 <OV5640_Init+0x7c>
        {
          tmp = (uint8_t)OV5640_Common[index][1];
 8003b36:	4a24      	ldr	r2, [pc, #144]	; (8003bc8 <OV5640_Init+0xdc>)
 8003b38:	69fb      	ldr	r3, [r7, #28]
 8003b3a:	009b      	lsls	r3, r3, #2
 8003b3c:	4413      	add	r3, r2
 8003b3e:	885b      	ldrh	r3, [r3, #2]
 8003b40:	b2db      	uxtb	r3, r3
 8003b42:	75fb      	strb	r3, [r7, #23]

          if (OV5640_WriteReg(&OV5640->Context, OV5640_Common[index][0], &tmp, 1) != OV5640_OK)
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	f103 0018 	add.w	r0, r3, #24
 8003b4a:	4a1f      	ldr	r2, [pc, #124]	; (8003bc8 <OV5640_Init+0xdc>)
 8003b4c:	69fb      	ldr	r3, [r7, #28]
 8003b4e:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8003b52:	f107 0217 	add.w	r2, r7, #23
 8003b56:	2301      	movs	r3, #1
 8003b58:	f000 f84f 	bl	8003bfa <OV5640_WriteReg>
 8003b5c:	4603      	mov	r3, r0
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d002      	beq.n	8003b68 <OV5640_Init+0x7c>
          {
            ret = OV5640_ERROR;
 8003b62:	f04f 33ff 	mov.w	r3, #4294967295
 8003b66:	61bb      	str	r3, [r7, #24]
      for (index = 0; index < (sizeof(OV5640_Common) / 4U) ; index++)
 8003b68:	69fb      	ldr	r3, [r7, #28]
 8003b6a:	3301      	adds	r3, #1
 8003b6c:	61fb      	str	r3, [r7, #28]
 8003b6e:	69fb      	ldr	r3, [r7, #28]
 8003b70:	2bfd      	cmp	r3, #253	; 0xfd
 8003b72:	d9dc      	bls.n	8003b2e <OV5640_Init+0x42>
          }
        }
      }

      if (ret == OV5640_OK)
 8003b74:	69bb      	ldr	r3, [r7, #24]
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d121      	bne.n	8003bbe <OV5640_Init+0xd2>
      {
        /* Set specific parameters for each resolution */
        if (OV5640_SetResolution(OV5640, Resolution) != OV5640_OK)
 8003b7a:	68b9      	ldr	r1, [r7, #8]
 8003b7c:	68f8      	ldr	r0, [r7, #12]
 8003b7e:	f000 f89d 	bl	8003cbc <OV5640_SetResolution>
 8003b82:	4603      	mov	r3, r0
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d003      	beq.n	8003b90 <OV5640_Init+0xa4>
        {
          ret = OV5640_ERROR;
 8003b88:	f04f 33ff 	mov.w	r3, #4294967295
 8003b8c:	61bb      	str	r3, [r7, #24]
 8003b8e:	e016      	b.n	8003bbe <OV5640_Init+0xd2>
        }/* Set specific parameters for each pixel format */
        else if (OV5640_SetPixelFormat(OV5640, PixelFormat) != OV5640_OK)
 8003b90:	6879      	ldr	r1, [r7, #4]
 8003b92:	68f8      	ldr	r0, [r7, #12]
 8003b94:	f000 f988 	bl	8003ea8 <OV5640_SetPixelFormat>
 8003b98:	4603      	mov	r3, r0
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d003      	beq.n	8003ba6 <OV5640_Init+0xba>
        {
          ret = OV5640_ERROR;
 8003b9e:	f04f 33ff 	mov.w	r3, #4294967295
 8003ba2:	61bb      	str	r3, [r7, #24]
 8003ba4:	e00b      	b.n	8003bbe <OV5640_Init+0xd2>
        }/* Set PixelClock, Href and VSync Polarity */
        else if (OV5640_SetPolarities(OV5640, OV5640_POLARITY_PCLK_HIGH, OV5640_POLARITY_HREF_HIGH,
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	2201      	movs	r2, #1
 8003baa:	2101      	movs	r1, #1
 8003bac:	68f8      	ldr	r0, [r7, #12]
 8003bae:	f000 fb0f 	bl	80041d0 <OV5640_SetPolarities>
 8003bb2:	4603      	mov	r3, r0
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d002      	beq.n	8003bbe <OV5640_Init+0xd2>
                                      OV5640_POLARITY_VSYNC_HIGH) != OV5640_OK)
        {
          ret = OV5640_ERROR;
 8003bb8:	f04f 33ff 	mov.w	r3, #4294967295
 8003bbc:	61bb      	str	r3, [r7, #24]
        }
      }
    }


  return ret;
 8003bbe:	69bb      	ldr	r3, [r7, #24]
}
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	3720      	adds	r7, #32
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	bd80      	pop	{r7, pc}
 8003bc8:	0801360c 	.word	0x0801360c

08003bcc <OV5640_ReadReg>:

int32_t OV5640_ReadReg(OV5650_Context_t *Context, uint16_t reg, uint8_t *pdata, uint16_t length)
{
 8003bcc:	b590      	push	{r4, r7, lr}
 8003bce:	b085      	sub	sp, #20
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	60f8      	str	r0, [r7, #12]
 8003bd4:	607a      	str	r2, [r7, #4]
 8003bd6:	461a      	mov	r2, r3
 8003bd8:	460b      	mov	r3, r1
 8003bda:	817b      	strh	r3, [r7, #10]
 8003bdc:	4613      	mov	r3, r2
 8003bde:	813b      	strh	r3, [r7, #8]
  return Context->Read(Context->Handle, reg, pdata, length);
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	685c      	ldr	r4, [r3, #4]
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	6898      	ldr	r0, [r3, #8]
 8003be8:	893b      	ldrh	r3, [r7, #8]
 8003bea:	8979      	ldrh	r1, [r7, #10]
 8003bec:	687a      	ldr	r2, [r7, #4]
 8003bee:	47a0      	blx	r4
 8003bf0:	4603      	mov	r3, r0
}
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	3714      	adds	r7, #20
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	bd90      	pop	{r4, r7, pc}

08003bfa <OV5640_WriteReg>:


int32_t OV5640_WriteReg(OV5650_Context_t *Context, uint16_t reg, uint8_t *pdata, uint16_t length)
{
 8003bfa:	b590      	push	{r4, r7, lr}
 8003bfc:	b085      	sub	sp, #20
 8003bfe:	af00      	add	r7, sp, #0
 8003c00:	60f8      	str	r0, [r7, #12]
 8003c02:	607a      	str	r2, [r7, #4]
 8003c04:	461a      	mov	r2, r3
 8003c06:	460b      	mov	r3, r1
 8003c08:	817b      	strh	r3, [r7, #10]
 8003c0a:	4613      	mov	r3, r2
 8003c0c:	813b      	strh	r3, [r7, #8]
  return Context->Write(Context->Handle, reg, pdata, length);
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	681c      	ldr	r4, [r3, #0]
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	6898      	ldr	r0, [r3, #8]
 8003c16:	893b      	ldrh	r3, [r7, #8]
 8003c18:	8979      	ldrh	r1, [r7, #10]
 8003c1a:	687a      	ldr	r2, [r7, #4]
 8003c1c:	47a0      	blx	r4
 8003c1e:	4603      	mov	r3, r0
}
 8003c20:	4618      	mov	r0, r3
 8003c22:	3714      	adds	r7, #20
 8003c24:	46bd      	mov	sp, r7
 8003c26:	bd90      	pop	{r4, r7, pc}

08003c28 <OV5640_ReadWrapper>:

static int32_t OV5640_ReadWrapper(void *Handle, uint16_t Reg, uint8_t *Data, uint16_t Length){
 8003c28:	b590      	push	{r4, r7, lr}
 8003c2a:	b087      	sub	sp, #28
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	60f8      	str	r0, [r7, #12]
 8003c30:	607a      	str	r2, [r7, #4]
 8003c32:	461a      	mov	r2, r3
 8003c34:	460b      	mov	r3, r1
 8003c36:	817b      	strh	r3, [r7, #10]
 8003c38:	4613      	mov	r3, r2
 8003c3a:	813b      	strh	r3, [r7, #8]
	OV5640_Handle_t *OV5640 = (OV5640_Handle_t*)Handle;
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	617b      	str	r3, [r7, #20]
    return OV5640->IO.Read(OV5640->IO.Address,Reg,Data,Length);
 8003c40:	697b      	ldr	r3, [r7, #20]
 8003c42:	691c      	ldr	r4, [r3, #16]
 8003c44:	697b      	ldr	r3, [r7, #20]
 8003c46:	8818      	ldrh	r0, [r3, #0]
 8003c48:	893b      	ldrh	r3, [r7, #8]
 8003c4a:	8979      	ldrh	r1, [r7, #10]
 8003c4c:	687a      	ldr	r2, [r7, #4]
 8003c4e:	47a0      	blx	r4
 8003c50:	4603      	mov	r3, r0
}
 8003c52:	4618      	mov	r0, r3
 8003c54:	371c      	adds	r7, #28
 8003c56:	46bd      	mov	sp, r7
 8003c58:	bd90      	pop	{r4, r7, pc}

08003c5a <OV5640_WriteWrapper>:

static int32_t OV5640_WriteWrapper(void *Handle, uint16_t Reg, uint8_t *Data, uint16_t Length){
 8003c5a:	b590      	push	{r4, r7, lr}
 8003c5c:	b087      	sub	sp, #28
 8003c5e:	af00      	add	r7, sp, #0
 8003c60:	60f8      	str	r0, [r7, #12]
 8003c62:	607a      	str	r2, [r7, #4]
 8003c64:	461a      	mov	r2, r3
 8003c66:	460b      	mov	r3, r1
 8003c68:	817b      	strh	r3, [r7, #10]
 8003c6a:	4613      	mov	r3, r2
 8003c6c:	813b      	strh	r3, [r7, #8]
	OV5640_Handle_t *OV5640 = (OV5640_Handle_t*)Handle;
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	617b      	str	r3, [r7, #20]
	return OV5640->IO.Write(OV5640->IO.Address,Reg,Data,Length);
 8003c72:	697b      	ldr	r3, [r7, #20]
 8003c74:	68dc      	ldr	r4, [r3, #12]
 8003c76:	697b      	ldr	r3, [r7, #20]
 8003c78:	8818      	ldrh	r0, [r3, #0]
 8003c7a:	893b      	ldrh	r3, [r7, #8]
 8003c7c:	8979      	ldrh	r1, [r7, #10]
 8003c7e:	687a      	ldr	r2, [r7, #4]
 8003c80:	47a0      	blx	r4
 8003c82:	4603      	mov	r3, r0
}
 8003c84:	4618      	mov	r0, r3
 8003c86:	371c      	adds	r7, #28
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	bd90      	pop	{r4, r7, pc}

08003c8c <OV5640_Delay>:

static int32_t OV5640_Delay(OV5640_Handle_t *OV5640, uint32_t Delay)
{
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	b084      	sub	sp, #16
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
 8003c94:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  tickstart = OV5640->IO.GetTick();
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	695b      	ldr	r3, [r3, #20]
 8003c9a:	4798      	blx	r3
 8003c9c:	60f8      	str	r0, [r7, #12]
  while ((OV5640->IO.GetTick() - tickstart) < Delay)
 8003c9e:	bf00      	nop
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	695b      	ldr	r3, [r3, #20]
 8003ca4:	4798      	blx	r3
 8003ca6:	4602      	mov	r2, r0
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	1ad3      	subs	r3, r2, r3
 8003cac:	683a      	ldr	r2, [r7, #0]
 8003cae:	429a      	cmp	r2, r3
 8003cb0:	d8f6      	bhi.n	8003ca0 <OV5640_Delay+0x14>
  {
  }
  return OV5640_OK;
 8003cb2:	2300      	movs	r3, #0
}
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	3710      	adds	r7, #16
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	bd80      	pop	{r7, pc}

08003cbc <OV5640_SetResolution>:

int32_t OV5640_SetResolution(OV5640_Handle_t *OV5640, uint32_t Resolution)
{
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	b086      	sub	sp, #24
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
 8003cc4:	6039      	str	r1, [r7, #0]
  int32_t ret = OV5640_OK;
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	617b      	str	r3, [r7, #20]
    {OV5640_TIMING_DVPVO_HIGH, 0x00},
    {OV5640_TIMING_DVPVO_LOW, 0x78},
  };

  /* Check if resolution is supported */
  if (Resolution > OV5640_R800x480)
 8003cca:	683b      	ldr	r3, [r7, #0]
 8003ccc:	2b04      	cmp	r3, #4
 8003cce:	d903      	bls.n	8003cd8 <OV5640_SetResolution+0x1c>
  {
    ret = OV5640_ERROR;
 8003cd0:	f04f 33ff 	mov.w	r3, #4294967295
 8003cd4:	617b      	str	r3, [r7, #20]
 8003cd6:	e0d8      	b.n	8003e8a <OV5640_SetResolution+0x1ce>
  }
  else
  {
    /* Initialize OV5640 */
    switch (Resolution)
 8003cd8:	683b      	ldr	r3, [r7, #0]
 8003cda:	2b04      	cmp	r3, #4
 8003cdc:	f200 80d1 	bhi.w	8003e82 <OV5640_SetResolution+0x1c6>
 8003ce0:	a201      	add	r2, pc, #4	; (adr r2, 8003ce8 <OV5640_SetResolution+0x2c>)
 8003ce2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ce6:	bf00      	nop
 8003ce8:	08003cfd 	.word	0x08003cfd
 8003cec:	08003d4b 	.word	0x08003d4b
 8003cf0:	08003d99 	.word	0x08003d99
 8003cf4:	08003de7 	.word	0x08003de7
 8003cf8:	08003e35 	.word	0x08003e35
    {
      case OV5640_R160x120:
        for (index = 0; index < (sizeof(OV5640_QQVGA) / 4U); index++)
 8003cfc:	2300      	movs	r3, #0
 8003cfe:	613b      	str	r3, [r7, #16]
 8003d00:	e01f      	b.n	8003d42 <OV5640_SetResolution+0x86>
        {
          if (ret != OV5640_ERROR)
 8003d02:	697b      	ldr	r3, [r7, #20]
 8003d04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d08:	d018      	beq.n	8003d3c <OV5640_SetResolution+0x80>
          {
            tmp = (uint8_t)OV5640_QQVGA[index][1];
 8003d0a:	4a62      	ldr	r2, [pc, #392]	; (8003e94 <OV5640_SetResolution+0x1d8>)
 8003d0c:	693b      	ldr	r3, [r7, #16]
 8003d0e:	009b      	lsls	r3, r3, #2
 8003d10:	4413      	add	r3, r2
 8003d12:	885b      	ldrh	r3, [r3, #2]
 8003d14:	b2db      	uxtb	r3, r3
 8003d16:	73fb      	strb	r3, [r7, #15]
            if (OV5640_WriteReg(&OV5640->Context, OV5640_QQVGA[index][0], &tmp, 1) != OV5640_OK)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	f103 0018 	add.w	r0, r3, #24
 8003d1e:	4a5d      	ldr	r2, [pc, #372]	; (8003e94 <OV5640_SetResolution+0x1d8>)
 8003d20:	693b      	ldr	r3, [r7, #16]
 8003d22:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8003d26:	f107 020f 	add.w	r2, r7, #15
 8003d2a:	2301      	movs	r3, #1
 8003d2c:	f7ff ff65 	bl	8003bfa <OV5640_WriteReg>
 8003d30:	4603      	mov	r3, r0
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d002      	beq.n	8003d3c <OV5640_SetResolution+0x80>
            {
              ret = OV5640_ERROR;
 8003d36:	f04f 33ff 	mov.w	r3, #4294967295
 8003d3a:	617b      	str	r3, [r7, #20]
        for (index = 0; index < (sizeof(OV5640_QQVGA) / 4U); index++)
 8003d3c:	693b      	ldr	r3, [r7, #16]
 8003d3e:	3301      	adds	r3, #1
 8003d40:	613b      	str	r3, [r7, #16]
 8003d42:	693b      	ldr	r3, [r7, #16]
 8003d44:	2b03      	cmp	r3, #3
 8003d46:	d9dc      	bls.n	8003d02 <OV5640_SetResolution+0x46>
            }
          }
        }
        break;
 8003d48:	e09f      	b.n	8003e8a <OV5640_SetResolution+0x1ce>
      case OV5640_R320x240:
        for (index = 0; index < (sizeof(OV5640_QVGA) / 4U); index++)
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	613b      	str	r3, [r7, #16]
 8003d4e:	e01f      	b.n	8003d90 <OV5640_SetResolution+0xd4>
        {
          if (ret != OV5640_ERROR)
 8003d50:	697b      	ldr	r3, [r7, #20]
 8003d52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d56:	d018      	beq.n	8003d8a <OV5640_SetResolution+0xce>
          {
            tmp = (uint8_t)OV5640_QVGA[index][1];
 8003d58:	4a4f      	ldr	r2, [pc, #316]	; (8003e98 <OV5640_SetResolution+0x1dc>)
 8003d5a:	693b      	ldr	r3, [r7, #16]
 8003d5c:	009b      	lsls	r3, r3, #2
 8003d5e:	4413      	add	r3, r2
 8003d60:	885b      	ldrh	r3, [r3, #2]
 8003d62:	b2db      	uxtb	r3, r3
 8003d64:	73fb      	strb	r3, [r7, #15]
            if (OV5640_WriteReg(&OV5640->Context, OV5640_QVGA[index][0], &tmp, 1) != OV5640_OK)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	f103 0018 	add.w	r0, r3, #24
 8003d6c:	4a4a      	ldr	r2, [pc, #296]	; (8003e98 <OV5640_SetResolution+0x1dc>)
 8003d6e:	693b      	ldr	r3, [r7, #16]
 8003d70:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8003d74:	f107 020f 	add.w	r2, r7, #15
 8003d78:	2301      	movs	r3, #1
 8003d7a:	f7ff ff3e 	bl	8003bfa <OV5640_WriteReg>
 8003d7e:	4603      	mov	r3, r0
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d002      	beq.n	8003d8a <OV5640_SetResolution+0xce>
            {
              ret = OV5640_ERROR;
 8003d84:	f04f 33ff 	mov.w	r3, #4294967295
 8003d88:	617b      	str	r3, [r7, #20]
        for (index = 0; index < (sizeof(OV5640_QVGA) / 4U); index++)
 8003d8a:	693b      	ldr	r3, [r7, #16]
 8003d8c:	3301      	adds	r3, #1
 8003d8e:	613b      	str	r3, [r7, #16]
 8003d90:	693b      	ldr	r3, [r7, #16]
 8003d92:	2b03      	cmp	r3, #3
 8003d94:	d9dc      	bls.n	8003d50 <OV5640_SetResolution+0x94>
            }
          }
        }
        break;
 8003d96:	e078      	b.n	8003e8a <OV5640_SetResolution+0x1ce>
      case OV5640_R480x272:
        for (index = 0; index < (sizeof(OV5640_480x272) / 4U); index++)
 8003d98:	2300      	movs	r3, #0
 8003d9a:	613b      	str	r3, [r7, #16]
 8003d9c:	e01f      	b.n	8003dde <OV5640_SetResolution+0x122>
        {
          if (ret != OV5640_ERROR)
 8003d9e:	697b      	ldr	r3, [r7, #20]
 8003da0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003da4:	d018      	beq.n	8003dd8 <OV5640_SetResolution+0x11c>
          {
            tmp = (uint8_t)OV5640_480x272[index][1];
 8003da6:	4a3d      	ldr	r2, [pc, #244]	; (8003e9c <OV5640_SetResolution+0x1e0>)
 8003da8:	693b      	ldr	r3, [r7, #16]
 8003daa:	009b      	lsls	r3, r3, #2
 8003dac:	4413      	add	r3, r2
 8003dae:	885b      	ldrh	r3, [r3, #2]
 8003db0:	b2db      	uxtb	r3, r3
 8003db2:	73fb      	strb	r3, [r7, #15]
            if (OV5640_WriteReg(&OV5640->Context, OV5640_480x272[index][0], &tmp, 1) != OV5640_OK)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	f103 0018 	add.w	r0, r3, #24
 8003dba:	4a38      	ldr	r2, [pc, #224]	; (8003e9c <OV5640_SetResolution+0x1e0>)
 8003dbc:	693b      	ldr	r3, [r7, #16]
 8003dbe:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8003dc2:	f107 020f 	add.w	r2, r7, #15
 8003dc6:	2301      	movs	r3, #1
 8003dc8:	f7ff ff17 	bl	8003bfa <OV5640_WriteReg>
 8003dcc:	4603      	mov	r3, r0
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d002      	beq.n	8003dd8 <OV5640_SetResolution+0x11c>
            {
              ret = OV5640_ERROR;
 8003dd2:	f04f 33ff 	mov.w	r3, #4294967295
 8003dd6:	617b      	str	r3, [r7, #20]
        for (index = 0; index < (sizeof(OV5640_480x272) / 4U); index++)
 8003dd8:	693b      	ldr	r3, [r7, #16]
 8003dda:	3301      	adds	r3, #1
 8003ddc:	613b      	str	r3, [r7, #16]
 8003dde:	693b      	ldr	r3, [r7, #16]
 8003de0:	2b03      	cmp	r3, #3
 8003de2:	d9dc      	bls.n	8003d9e <OV5640_SetResolution+0xe2>
            }
          }
        }
        break;
 8003de4:	e051      	b.n	8003e8a <OV5640_SetResolution+0x1ce>
      case OV5640_R640x480:
        for (index = 0; index < (sizeof(OV5640_VGA) / 4U); index++)
 8003de6:	2300      	movs	r3, #0
 8003de8:	613b      	str	r3, [r7, #16]
 8003dea:	e01f      	b.n	8003e2c <OV5640_SetResolution+0x170>
        {
          if (ret != OV5640_ERROR)
 8003dec:	697b      	ldr	r3, [r7, #20]
 8003dee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003df2:	d018      	beq.n	8003e26 <OV5640_SetResolution+0x16a>
          {
            tmp = (uint8_t)OV5640_VGA[index][1];
 8003df4:	4a2a      	ldr	r2, [pc, #168]	; (8003ea0 <OV5640_SetResolution+0x1e4>)
 8003df6:	693b      	ldr	r3, [r7, #16]
 8003df8:	009b      	lsls	r3, r3, #2
 8003dfa:	4413      	add	r3, r2
 8003dfc:	885b      	ldrh	r3, [r3, #2]
 8003dfe:	b2db      	uxtb	r3, r3
 8003e00:	73fb      	strb	r3, [r7, #15]
            if (OV5640_WriteReg(&OV5640->Context, OV5640_VGA[index][0], &tmp, 1) != OV5640_OK)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	f103 0018 	add.w	r0, r3, #24
 8003e08:	4a25      	ldr	r2, [pc, #148]	; (8003ea0 <OV5640_SetResolution+0x1e4>)
 8003e0a:	693b      	ldr	r3, [r7, #16]
 8003e0c:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8003e10:	f107 020f 	add.w	r2, r7, #15
 8003e14:	2301      	movs	r3, #1
 8003e16:	f7ff fef0 	bl	8003bfa <OV5640_WriteReg>
 8003e1a:	4603      	mov	r3, r0
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d002      	beq.n	8003e26 <OV5640_SetResolution+0x16a>
            {
              ret = OV5640_ERROR;
 8003e20:	f04f 33ff 	mov.w	r3, #4294967295
 8003e24:	617b      	str	r3, [r7, #20]
        for (index = 0; index < (sizeof(OV5640_VGA) / 4U); index++)
 8003e26:	693b      	ldr	r3, [r7, #16]
 8003e28:	3301      	adds	r3, #1
 8003e2a:	613b      	str	r3, [r7, #16]
 8003e2c:	693b      	ldr	r3, [r7, #16]
 8003e2e:	2b03      	cmp	r3, #3
 8003e30:	d9dc      	bls.n	8003dec <OV5640_SetResolution+0x130>
            }
          }
        }
        break;
 8003e32:	e02a      	b.n	8003e8a <OV5640_SetResolution+0x1ce>
      case OV5640_R800x480:
        for (index = 0; index < (sizeof(OV5640_WVGA) / 4U); index++)
 8003e34:	2300      	movs	r3, #0
 8003e36:	613b      	str	r3, [r7, #16]
 8003e38:	e01f      	b.n	8003e7a <OV5640_SetResolution+0x1be>
        {
          if (ret != OV5640_ERROR)
 8003e3a:	697b      	ldr	r3, [r7, #20]
 8003e3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e40:	d018      	beq.n	8003e74 <OV5640_SetResolution+0x1b8>
          {
            tmp = (uint8_t)OV5640_WVGA[index][1];
 8003e42:	4a18      	ldr	r2, [pc, #96]	; (8003ea4 <OV5640_SetResolution+0x1e8>)
 8003e44:	693b      	ldr	r3, [r7, #16]
 8003e46:	009b      	lsls	r3, r3, #2
 8003e48:	4413      	add	r3, r2
 8003e4a:	885b      	ldrh	r3, [r3, #2]
 8003e4c:	b2db      	uxtb	r3, r3
 8003e4e:	73fb      	strb	r3, [r7, #15]
            if (OV5640_WriteReg(&OV5640->Context, OV5640_WVGA[index][0], &tmp, 1) != OV5640_OK)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	f103 0018 	add.w	r0, r3, #24
 8003e56:	4a13      	ldr	r2, [pc, #76]	; (8003ea4 <OV5640_SetResolution+0x1e8>)
 8003e58:	693b      	ldr	r3, [r7, #16]
 8003e5a:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8003e5e:	f107 020f 	add.w	r2, r7, #15
 8003e62:	2301      	movs	r3, #1
 8003e64:	f7ff fec9 	bl	8003bfa <OV5640_WriteReg>
 8003e68:	4603      	mov	r3, r0
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d002      	beq.n	8003e74 <OV5640_SetResolution+0x1b8>
            {
              ret = OV5640_ERROR;
 8003e6e:	f04f 33ff 	mov.w	r3, #4294967295
 8003e72:	617b      	str	r3, [r7, #20]
        for (index = 0; index < (sizeof(OV5640_WVGA) / 4U); index++)
 8003e74:	693b      	ldr	r3, [r7, #16]
 8003e76:	3301      	adds	r3, #1
 8003e78:	613b      	str	r3, [r7, #16]
 8003e7a:	693b      	ldr	r3, [r7, #16]
 8003e7c:	2b03      	cmp	r3, #3
 8003e7e:	d9dc      	bls.n	8003e3a <OV5640_SetResolution+0x17e>
            }
          }
        }
        break;
 8003e80:	e003      	b.n	8003e8a <OV5640_SetResolution+0x1ce>
      default:
        ret = OV5640_ERROR;
 8003e82:	f04f 33ff 	mov.w	r3, #4294967295
 8003e86:	617b      	str	r3, [r7, #20]
        break;
 8003e88:	bf00      	nop
    }
  }

  return ret;
 8003e8a:	697b      	ldr	r3, [r7, #20]
}
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	3718      	adds	r7, #24
 8003e90:	46bd      	mov	sp, r7
 8003e92:	bd80      	pop	{r7, pc}
 8003e94:	08013a04 	.word	0x08013a04
 8003e98:	08013a14 	.word	0x08013a14
 8003e9c:	08013a24 	.word	0x08013a24
 8003ea0:	08013a34 	.word	0x08013a34
 8003ea4:	08013a44 	.word	0x08013a44

08003ea8 <OV5640_SetPixelFormat>:

int32_t OV5640_SetPixelFormat(OV5640_Handle_t *OV5640, uint32_t PixelFormat)
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b086      	sub	sp, #24
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]
 8003eb0:	6039      	str	r1, [r7, #0]
  int32_t ret = OV5640_OK;
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	617b      	str	r3, [r7, #20]
    {OV5640_FORMAT_CTRL00, 0x30},
    {OV5640_FORMAT_MUX_CTRL, 0x00},
  };

  /* Check if PixelFormat is supported */
  if ((PixelFormat != OV5640_RGB565) && (PixelFormat != OV5640_YUV422) &&
 8003eb6:	683b      	ldr	r3, [r7, #0]
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d00f      	beq.n	8003edc <OV5640_SetPixelFormat+0x34>
 8003ebc:	683b      	ldr	r3, [r7, #0]
 8003ebe:	2b02      	cmp	r3, #2
 8003ec0:	d00c      	beq.n	8003edc <OV5640_SetPixelFormat+0x34>
 8003ec2:	683b      	ldr	r3, [r7, #0]
 8003ec4:	2b01      	cmp	r3, #1
 8003ec6:	d009      	beq.n	8003edc <OV5640_SetPixelFormat+0x34>
      (PixelFormat != OV5640_RGB888) && (PixelFormat != OV5640_Y8) &&
 8003ec8:	683b      	ldr	r3, [r7, #0]
 8003eca:	2b07      	cmp	r3, #7
 8003ecc:	d006      	beq.n	8003edc <OV5640_SetPixelFormat+0x34>
 8003ece:	683b      	ldr	r3, [r7, #0]
 8003ed0:	2b08      	cmp	r3, #8
 8003ed2:	d003      	beq.n	8003edc <OV5640_SetPixelFormat+0x34>
      (PixelFormat != OV5640_JPEG))
  {
    /* Pixel format not supported */
    ret = OV5640_ERROR;
 8003ed4:	f04f 33ff 	mov.w	r3, #4294967295
 8003ed8:	617b      	str	r3, [r7, #20]
 8003eda:	e16a      	b.n	80041b2 <OV5640_SetPixelFormat+0x30a>
  }
  else
  {
    /* Set specific parameters for each PixelFormat */
    switch (PixelFormat)
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	3b01      	subs	r3, #1
 8003ee0:	2b07      	cmp	r3, #7
 8003ee2:	f200 80c3 	bhi.w	800406c <OV5640_SetPixelFormat+0x1c4>
 8003ee6:	a201      	add	r2, pc, #4	; (adr r2, 8003eec <OV5640_SetPixelFormat+0x44>)
 8003ee8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003eec:	08003f65 	.word	0x08003f65
 8003ef0:	08003f0d 	.word	0x08003f0d
 8003ef4:	0800406d 	.word	0x0800406d
 8003ef8:	0800406d 	.word	0x0800406d
 8003efc:	0800406d 	.word	0x0800406d
 8003f00:	0800406d 	.word	0x0800406d
 8003f04:	08003fbd 	.word	0x08003fbd
 8003f08:	08004015 	.word	0x08004015
    {
      case OV5640_YUV422:
        for (index = 0; index < (sizeof(OV5640_PF_YUV422) / 4U); index++)
 8003f0c:	2300      	movs	r3, #0
 8003f0e:	613b      	str	r3, [r7, #16]
 8003f10:	e024      	b.n	8003f5c <OV5640_SetPixelFormat+0xb4>
        {
          if (ret != OV5640_ERROR)
 8003f12:	697b      	ldr	r3, [r7, #20]
 8003f14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f18:	d01d      	beq.n	8003f56 <OV5640_SetPixelFormat+0xae>
          {
            tmp = (uint8_t)OV5640_PF_YUV422[index][1];
 8003f1a:	4aa8      	ldr	r2, [pc, #672]	; (80041bc <OV5640_SetPixelFormat+0x314>)
 8003f1c:	693b      	ldr	r3, [r7, #16]
 8003f1e:	009b      	lsls	r3, r3, #2
 8003f20:	4413      	add	r3, r2
 8003f22:	885b      	ldrh	r3, [r3, #2]
 8003f24:	b2db      	uxtb	r3, r3
 8003f26:	73fb      	strb	r3, [r7, #15]
            if (OV5640_WriteReg(&OV5640->Context, OV5640_PF_YUV422[index][0], &tmp, 1) != OV5640_OK)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	f103 0018 	add.w	r0, r3, #24
 8003f2e:	4aa3      	ldr	r2, [pc, #652]	; (80041bc <OV5640_SetPixelFormat+0x314>)
 8003f30:	693b      	ldr	r3, [r7, #16]
 8003f32:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8003f36:	f107 020f 	add.w	r2, r7, #15
 8003f3a:	2301      	movs	r3, #1
 8003f3c:	f7ff fe5d 	bl	8003bfa <OV5640_WriteReg>
 8003f40:	4603      	mov	r3, r0
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d003      	beq.n	8003f4e <OV5640_SetPixelFormat+0xa6>
            {
              ret = OV5640_ERROR;
 8003f46:	f04f 33ff 	mov.w	r3, #4294967295
 8003f4a:	617b      	str	r3, [r7, #20]
 8003f4c:	e003      	b.n	8003f56 <OV5640_SetPixelFormat+0xae>
            }
            else
            {
              (void)OV5640_Delay(OV5640, 1);
 8003f4e:	2101      	movs	r1, #1
 8003f50:	6878      	ldr	r0, [r7, #4]
 8003f52:	f7ff fe9b 	bl	8003c8c <OV5640_Delay>
        for (index = 0; index < (sizeof(OV5640_PF_YUV422) / 4U); index++)
 8003f56:	693b      	ldr	r3, [r7, #16]
 8003f58:	3301      	adds	r3, #1
 8003f5a:	613b      	str	r3, [r7, #16]
 8003f5c:	693b      	ldr	r3, [r7, #16]
 8003f5e:	2b01      	cmp	r3, #1
 8003f60:	d9d7      	bls.n	8003f12 <OV5640_SetPixelFormat+0x6a>
            }
          }
        }
        break;
 8003f62:	e0af      	b.n	80040c4 <OV5640_SetPixelFormat+0x21c>

      case OV5640_RGB888:
        for (index = 0; index < (sizeof(OV5640_PF_RGB888) / 4U); index++)
 8003f64:	2300      	movs	r3, #0
 8003f66:	613b      	str	r3, [r7, #16]
 8003f68:	e024      	b.n	8003fb4 <OV5640_SetPixelFormat+0x10c>
        {
          if (ret != OV5640_ERROR)
 8003f6a:	697b      	ldr	r3, [r7, #20]
 8003f6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f70:	d01d      	beq.n	8003fae <OV5640_SetPixelFormat+0x106>
          {
            tmp = (uint8_t)OV5640_PF_RGB888[index][1];
 8003f72:	4a93      	ldr	r2, [pc, #588]	; (80041c0 <OV5640_SetPixelFormat+0x318>)
 8003f74:	693b      	ldr	r3, [r7, #16]
 8003f76:	009b      	lsls	r3, r3, #2
 8003f78:	4413      	add	r3, r2
 8003f7a:	885b      	ldrh	r3, [r3, #2]
 8003f7c:	b2db      	uxtb	r3, r3
 8003f7e:	73fb      	strb	r3, [r7, #15]
            if (OV5640_WriteReg(&OV5640->Context, OV5640_PF_RGB888[index][0], &tmp, 1) != OV5640_OK)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	f103 0018 	add.w	r0, r3, #24
 8003f86:	4a8e      	ldr	r2, [pc, #568]	; (80041c0 <OV5640_SetPixelFormat+0x318>)
 8003f88:	693b      	ldr	r3, [r7, #16]
 8003f8a:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8003f8e:	f107 020f 	add.w	r2, r7, #15
 8003f92:	2301      	movs	r3, #1
 8003f94:	f7ff fe31 	bl	8003bfa <OV5640_WriteReg>
 8003f98:	4603      	mov	r3, r0
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d003      	beq.n	8003fa6 <OV5640_SetPixelFormat+0xfe>
            {
              ret = OV5640_ERROR;
 8003f9e:	f04f 33ff 	mov.w	r3, #4294967295
 8003fa2:	617b      	str	r3, [r7, #20]
 8003fa4:	e003      	b.n	8003fae <OV5640_SetPixelFormat+0x106>
            }
            else
            {
              (void)OV5640_Delay(OV5640, 1);
 8003fa6:	2101      	movs	r1, #1
 8003fa8:	6878      	ldr	r0, [r7, #4]
 8003faa:	f7ff fe6f 	bl	8003c8c <OV5640_Delay>
        for (index = 0; index < (sizeof(OV5640_PF_RGB888) / 4U); index++)
 8003fae:	693b      	ldr	r3, [r7, #16]
 8003fb0:	3301      	adds	r3, #1
 8003fb2:	613b      	str	r3, [r7, #16]
 8003fb4:	693b      	ldr	r3, [r7, #16]
 8003fb6:	2b01      	cmp	r3, #1
 8003fb8:	d9d7      	bls.n	8003f6a <OV5640_SetPixelFormat+0xc2>
            }
          }
        }
        break;
 8003fba:	e083      	b.n	80040c4 <OV5640_SetPixelFormat+0x21c>

      case OV5640_Y8:
        for (index = 0; index < (sizeof(OV5640_PF_Y8) / 4U); index++)
 8003fbc:	2300      	movs	r3, #0
 8003fbe:	613b      	str	r3, [r7, #16]
 8003fc0:	e024      	b.n	800400c <OV5640_SetPixelFormat+0x164>
        {
          if (ret != OV5640_ERROR)
 8003fc2:	697b      	ldr	r3, [r7, #20]
 8003fc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fc8:	d01d      	beq.n	8004006 <OV5640_SetPixelFormat+0x15e>
          {
            tmp = (uint8_t)OV5640_PF_Y8[index][1];
 8003fca:	4a7e      	ldr	r2, [pc, #504]	; (80041c4 <OV5640_SetPixelFormat+0x31c>)
 8003fcc:	693b      	ldr	r3, [r7, #16]
 8003fce:	009b      	lsls	r3, r3, #2
 8003fd0:	4413      	add	r3, r2
 8003fd2:	885b      	ldrh	r3, [r3, #2]
 8003fd4:	b2db      	uxtb	r3, r3
 8003fd6:	73fb      	strb	r3, [r7, #15]
            if (OV5640_WriteReg(&OV5640->Context, OV5640_PF_Y8[index][0], &tmp, 1) != OV5640_OK)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	f103 0018 	add.w	r0, r3, #24
 8003fde:	4a79      	ldr	r2, [pc, #484]	; (80041c4 <OV5640_SetPixelFormat+0x31c>)
 8003fe0:	693b      	ldr	r3, [r7, #16]
 8003fe2:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8003fe6:	f107 020f 	add.w	r2, r7, #15
 8003fea:	2301      	movs	r3, #1
 8003fec:	f7ff fe05 	bl	8003bfa <OV5640_WriteReg>
 8003ff0:	4603      	mov	r3, r0
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d003      	beq.n	8003ffe <OV5640_SetPixelFormat+0x156>
            {
              ret = OV5640_ERROR;
 8003ff6:	f04f 33ff 	mov.w	r3, #4294967295
 8003ffa:	617b      	str	r3, [r7, #20]
 8003ffc:	e003      	b.n	8004006 <OV5640_SetPixelFormat+0x15e>
            }
            else
            {
              (void)OV5640_Delay(OV5640, 1);
 8003ffe:	2101      	movs	r1, #1
 8004000:	6878      	ldr	r0, [r7, #4]
 8004002:	f7ff fe43 	bl	8003c8c <OV5640_Delay>
        for (index = 0; index < (sizeof(OV5640_PF_Y8) / 4U); index++)
 8004006:	693b      	ldr	r3, [r7, #16]
 8004008:	3301      	adds	r3, #1
 800400a:	613b      	str	r3, [r7, #16]
 800400c:	693b      	ldr	r3, [r7, #16]
 800400e:	2b01      	cmp	r3, #1
 8004010:	d9d7      	bls.n	8003fc2 <OV5640_SetPixelFormat+0x11a>
            }
          }
        }
        break;
 8004012:	e057      	b.n	80040c4 <OV5640_SetPixelFormat+0x21c>

      case OV5640_JPEG:
        for (index = 0; index < (sizeof(OV5640_PF_JPEG) / 4U); index++)
 8004014:	2300      	movs	r3, #0
 8004016:	613b      	str	r3, [r7, #16]
 8004018:	e024      	b.n	8004064 <OV5640_SetPixelFormat+0x1bc>
        {
          if (ret != OV5640_ERROR)
 800401a:	697b      	ldr	r3, [r7, #20]
 800401c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004020:	d01d      	beq.n	800405e <OV5640_SetPixelFormat+0x1b6>
          {
            tmp = (uint8_t)OV5640_PF_JPEG[index][1];
 8004022:	4a69      	ldr	r2, [pc, #420]	; (80041c8 <OV5640_SetPixelFormat+0x320>)
 8004024:	693b      	ldr	r3, [r7, #16]
 8004026:	009b      	lsls	r3, r3, #2
 8004028:	4413      	add	r3, r2
 800402a:	885b      	ldrh	r3, [r3, #2]
 800402c:	b2db      	uxtb	r3, r3
 800402e:	73fb      	strb	r3, [r7, #15]
            if (OV5640_WriteReg(&OV5640->Context, OV5640_PF_JPEG[index][0], &tmp, 1) != OV5640_OK)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	f103 0018 	add.w	r0, r3, #24
 8004036:	4a64      	ldr	r2, [pc, #400]	; (80041c8 <OV5640_SetPixelFormat+0x320>)
 8004038:	693b      	ldr	r3, [r7, #16]
 800403a:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 800403e:	f107 020f 	add.w	r2, r7, #15
 8004042:	2301      	movs	r3, #1
 8004044:	f7ff fdd9 	bl	8003bfa <OV5640_WriteReg>
 8004048:	4603      	mov	r3, r0
 800404a:	2b00      	cmp	r3, #0
 800404c:	d003      	beq.n	8004056 <OV5640_SetPixelFormat+0x1ae>
            {
              ret = OV5640_ERROR;
 800404e:	f04f 33ff 	mov.w	r3, #4294967295
 8004052:	617b      	str	r3, [r7, #20]
 8004054:	e003      	b.n	800405e <OV5640_SetPixelFormat+0x1b6>
            }
            else
            {
              (void)OV5640_Delay(OV5640, 1);
 8004056:	2101      	movs	r1, #1
 8004058:	6878      	ldr	r0, [r7, #4]
 800405a:	f7ff fe17 	bl	8003c8c <OV5640_Delay>
        for (index = 0; index < (sizeof(OV5640_PF_JPEG) / 4U); index++)
 800405e:	693b      	ldr	r3, [r7, #16]
 8004060:	3301      	adds	r3, #1
 8004062:	613b      	str	r3, [r7, #16]
 8004064:	693b      	ldr	r3, [r7, #16]
 8004066:	2b01      	cmp	r3, #1
 8004068:	d9d7      	bls.n	800401a <OV5640_SetPixelFormat+0x172>
            }
          }
        }
        break;
 800406a:	e02b      	b.n	80040c4 <OV5640_SetPixelFormat+0x21c>

      case OV5640_RGB565:
      default:
        for (index = 0; index < (sizeof(OV5640_PF_RGB565) / 4U); index++)
 800406c:	2300      	movs	r3, #0
 800406e:	613b      	str	r3, [r7, #16]
 8004070:	e024      	b.n	80040bc <OV5640_SetPixelFormat+0x214>
        {
          if (ret != OV5640_ERROR)
 8004072:	697b      	ldr	r3, [r7, #20]
 8004074:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004078:	d01d      	beq.n	80040b6 <OV5640_SetPixelFormat+0x20e>
          {
            tmp = (uint8_t)OV5640_PF_RGB565[index][1];
 800407a:	4a54      	ldr	r2, [pc, #336]	; (80041cc <OV5640_SetPixelFormat+0x324>)
 800407c:	693b      	ldr	r3, [r7, #16]
 800407e:	009b      	lsls	r3, r3, #2
 8004080:	4413      	add	r3, r2
 8004082:	885b      	ldrh	r3, [r3, #2]
 8004084:	b2db      	uxtb	r3, r3
 8004086:	73fb      	strb	r3, [r7, #15]
            if (OV5640_WriteReg(&OV5640->Context, OV5640_PF_RGB565[index][0], &tmp, 1) != OV5640_OK)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	f103 0018 	add.w	r0, r3, #24
 800408e:	4a4f      	ldr	r2, [pc, #316]	; (80041cc <OV5640_SetPixelFormat+0x324>)
 8004090:	693b      	ldr	r3, [r7, #16]
 8004092:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8004096:	f107 020f 	add.w	r2, r7, #15
 800409a:	2301      	movs	r3, #1
 800409c:	f7ff fdad 	bl	8003bfa <OV5640_WriteReg>
 80040a0:	4603      	mov	r3, r0
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d003      	beq.n	80040ae <OV5640_SetPixelFormat+0x206>
            {
              ret = OV5640_ERROR;
 80040a6:	f04f 33ff 	mov.w	r3, #4294967295
 80040aa:	617b      	str	r3, [r7, #20]
 80040ac:	e003      	b.n	80040b6 <OV5640_SetPixelFormat+0x20e>
            }
            else
            {
              (void)OV5640_Delay(OV5640, 1);
 80040ae:	2101      	movs	r1, #1
 80040b0:	6878      	ldr	r0, [r7, #4]
 80040b2:	f7ff fdeb 	bl	8003c8c <OV5640_Delay>
        for (index = 0; index < (sizeof(OV5640_PF_RGB565) / 4U); index++)
 80040b6:	693b      	ldr	r3, [r7, #16]
 80040b8:	3301      	adds	r3, #1
 80040ba:	613b      	str	r3, [r7, #16]
 80040bc:	693b      	ldr	r3, [r7, #16]
 80040be:	2b01      	cmp	r3, #1
 80040c0:	d9d7      	bls.n	8004072 <OV5640_SetPixelFormat+0x1ca>
            }
          }
        }
        break;
 80040c2:	bf00      	nop

    }

    if (PixelFormat == OV5640_JPEG)
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	2b08      	cmp	r3, #8
 80040c8:	d173      	bne.n	80041b2 <OV5640_SetPixelFormat+0x30a>
    {
      if (OV5640_ReadReg(&OV5640->Context, OV5640_TIMING_TC_REG21, &tmp, 1) != OV5640_OK)
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	f103 0018 	add.w	r0, r3, #24
 80040d0:	f107 020f 	add.w	r2, r7, #15
 80040d4:	2301      	movs	r3, #1
 80040d6:	f643 0121 	movw	r1, #14369	; 0x3821
 80040da:	f7ff fd77 	bl	8003bcc <OV5640_ReadReg>
 80040de:	4603      	mov	r3, r0
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d003      	beq.n	80040ec <OV5640_SetPixelFormat+0x244>
      {
        ret = OV5640_ERROR;
 80040e4:	f04f 33ff 	mov.w	r3, #4294967295
 80040e8:	617b      	str	r3, [r7, #20]
 80040ea:	e062      	b.n	80041b2 <OV5640_SetPixelFormat+0x30a>
      }
      else
      {
        tmp |= (1 << 5);
 80040ec:	7bfb      	ldrb	r3, [r7, #15]
 80040ee:	f043 0320 	orr.w	r3, r3, #32
 80040f2:	b2db      	uxtb	r3, r3
 80040f4:	73fb      	strb	r3, [r7, #15]
        if (OV5640_WriteReg(&OV5640->Context, OV5640_TIMING_TC_REG21, &tmp, 1) != OV5640_OK)
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	f103 0018 	add.w	r0, r3, #24
 80040fc:	f107 020f 	add.w	r2, r7, #15
 8004100:	2301      	movs	r3, #1
 8004102:	f643 0121 	movw	r1, #14369	; 0x3821
 8004106:	f7ff fd78 	bl	8003bfa <OV5640_WriteReg>
 800410a:	4603      	mov	r3, r0
 800410c:	2b00      	cmp	r3, #0
 800410e:	d003      	beq.n	8004118 <OV5640_SetPixelFormat+0x270>
        {
          ret = OV5640_ERROR;
 8004110:	f04f 33ff 	mov.w	r3, #4294967295
 8004114:	617b      	str	r3, [r7, #20]
 8004116:	e04c      	b.n	80041b2 <OV5640_SetPixelFormat+0x30a>
        }
        else
        {
          if (OV5640_ReadReg(&OV5640->Context, OV5640_SYSREM_RESET02, &tmp, 1) != OV5640_OK)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	f103 0018 	add.w	r0, r3, #24
 800411e:	f107 020f 	add.w	r2, r7, #15
 8004122:	2301      	movs	r3, #1
 8004124:	f243 0102 	movw	r1, #12290	; 0x3002
 8004128:	f7ff fd50 	bl	8003bcc <OV5640_ReadReg>
 800412c:	4603      	mov	r3, r0
 800412e:	2b00      	cmp	r3, #0
 8004130:	d003      	beq.n	800413a <OV5640_SetPixelFormat+0x292>
          {
            ret = OV5640_ERROR;
 8004132:	f04f 33ff 	mov.w	r3, #4294967295
 8004136:	617b      	str	r3, [r7, #20]
 8004138:	e03b      	b.n	80041b2 <OV5640_SetPixelFormat+0x30a>
          }
          else
          {
            tmp &= ~((1 << 4) | (1 << 3) | (1 << 2));
 800413a:	7bfb      	ldrb	r3, [r7, #15]
 800413c:	f023 031c 	bic.w	r3, r3, #28
 8004140:	b2db      	uxtb	r3, r3
 8004142:	73fb      	strb	r3, [r7, #15]
            if (OV5640_WriteReg(&OV5640->Context, OV5640_SYSREM_RESET02, &tmp, 1) != OV5640_OK)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	f103 0018 	add.w	r0, r3, #24
 800414a:	f107 020f 	add.w	r2, r7, #15
 800414e:	2301      	movs	r3, #1
 8004150:	f243 0102 	movw	r1, #12290	; 0x3002
 8004154:	f7ff fd51 	bl	8003bfa <OV5640_WriteReg>
 8004158:	4603      	mov	r3, r0
 800415a:	2b00      	cmp	r3, #0
 800415c:	d003      	beq.n	8004166 <OV5640_SetPixelFormat+0x2be>
            {
              ret = OV5640_ERROR;
 800415e:	f04f 33ff 	mov.w	r3, #4294967295
 8004162:	617b      	str	r3, [r7, #20]
 8004164:	e025      	b.n	80041b2 <OV5640_SetPixelFormat+0x30a>
            }
            else
            {
              if (OV5640_ReadReg(&OV5640->Context, OV5640_CLOCK_ENABLE02, &tmp, 1) != OV5640_OK)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	f103 0018 	add.w	r0, r3, #24
 800416c:	f107 020f 	add.w	r2, r7, #15
 8004170:	2301      	movs	r3, #1
 8004172:	f243 0106 	movw	r1, #12294	; 0x3006
 8004176:	f7ff fd29 	bl	8003bcc <OV5640_ReadReg>
 800417a:	4603      	mov	r3, r0
 800417c:	2b00      	cmp	r3, #0
 800417e:	d003      	beq.n	8004188 <OV5640_SetPixelFormat+0x2e0>
              {
                ret = OV5640_ERROR;
 8004180:	f04f 33ff 	mov.w	r3, #4294967295
 8004184:	617b      	str	r3, [r7, #20]
 8004186:	e014      	b.n	80041b2 <OV5640_SetPixelFormat+0x30a>
              }
              else
              {
                tmp |= ((1 << 5) | (1 << 3));
 8004188:	7bfb      	ldrb	r3, [r7, #15]
 800418a:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 800418e:	b2db      	uxtb	r3, r3
 8004190:	73fb      	strb	r3, [r7, #15]
                if (OV5640_WriteReg(&OV5640->Context, OV5640_CLOCK_ENABLE02, &tmp, 1) != OV5640_OK)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	f103 0018 	add.w	r0, r3, #24
 8004198:	f107 020f 	add.w	r2, r7, #15
 800419c:	2301      	movs	r3, #1
 800419e:	f243 0106 	movw	r1, #12294	; 0x3006
 80041a2:	f7ff fd2a 	bl	8003bfa <OV5640_WriteReg>
 80041a6:	4603      	mov	r3, r0
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d002      	beq.n	80041b2 <OV5640_SetPixelFormat+0x30a>
                {
                  ret = OV5640_ERROR;
 80041ac:	f04f 33ff 	mov.w	r3, #4294967295
 80041b0:	617b      	str	r3, [r7, #20]
          }
        }
      }
    }
  }
  return ret;
 80041b2:	697b      	ldr	r3, [r7, #20]
}
 80041b4:	4618      	mov	r0, r3
 80041b6:	3718      	adds	r7, #24
 80041b8:	46bd      	mov	sp, r7
 80041ba:	bd80      	pop	{r7, pc}
 80041bc:	08013a54 	.word	0x08013a54
 80041c0:	08013a5c 	.word	0x08013a5c
 80041c4:	08013a64 	.word	0x08013a64
 80041c8:	08013a6c 	.word	0x08013a6c
 80041cc:	08013a74 	.word	0x08013a74

080041d0 <OV5640_SetPolarities>:

int32_t OV5640_SetPolarities(OV5640_Handle_t *OV5640, uint32_t PclkPolarity, uint32_t HrefPolarity,
                             uint32_t VsyncPolarity)
{
 80041d0:	b580      	push	{r7, lr}
 80041d2:	b086      	sub	sp, #24
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	60f8      	str	r0, [r7, #12]
 80041d8:	60b9      	str	r1, [r7, #8]
 80041da:	607a      	str	r2, [r7, #4]
 80041dc:	603b      	str	r3, [r7, #0]
  uint8_t tmp;
  int32_t ret = OV5640_OK;
 80041de:	2300      	movs	r3, #0
 80041e0:	617b      	str	r3, [r7, #20]

  if ((OV5640 == NULL) || ((PclkPolarity != OV5640_POLARITY_PCLK_LOW) && (PclkPolarity != OV5640_POLARITY_PCLK_HIGH)) ||
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d011      	beq.n	800420c <OV5640_SetPolarities+0x3c>
 80041e8:	68bb      	ldr	r3, [r7, #8]
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d002      	beq.n	80041f4 <OV5640_SetPolarities+0x24>
 80041ee:	68bb      	ldr	r3, [r7, #8]
 80041f0:	2b01      	cmp	r3, #1
 80041f2:	d10b      	bne.n	800420c <OV5640_SetPolarities+0x3c>
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d002      	beq.n	8004200 <OV5640_SetPolarities+0x30>
      ((HrefPolarity != OV5640_POLARITY_HREF_LOW) && (HrefPolarity != OV5640_POLARITY_HREF_HIGH)) ||
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	2b01      	cmp	r3, #1
 80041fe:	d105      	bne.n	800420c <OV5640_SetPolarities+0x3c>
 8004200:	683b      	ldr	r3, [r7, #0]
 8004202:	2b01      	cmp	r3, #1
 8004204:	d006      	beq.n	8004214 <OV5640_SetPolarities+0x44>
      ((VsyncPolarity != OV5640_POLARITY_VSYNC_LOW) && (VsyncPolarity != OV5640_POLARITY_VSYNC_HIGH)))
 8004206:	683b      	ldr	r3, [r7, #0]
 8004208:	2b00      	cmp	r3, #0
 800420a:	d003      	beq.n	8004214 <OV5640_SetPolarities+0x44>
  {
    ret = OV5640_ERROR;
 800420c:	f04f 33ff 	mov.w	r3, #4294967295
 8004210:	617b      	str	r3, [r7, #20]
 8004212:	e01e      	b.n	8004252 <OV5640_SetPolarities+0x82>
  }
  else
  {
    tmp = (uint8_t)(PclkPolarity << 5U) | (HrefPolarity << 1U) | VsyncPolarity;
 8004214:	68bb      	ldr	r3, [r7, #8]
 8004216:	b2db      	uxtb	r3, r3
 8004218:	015b      	lsls	r3, r3, #5
 800421a:	b2da      	uxtb	r2, r3
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	b2db      	uxtb	r3, r3
 8004220:	005b      	lsls	r3, r3, #1
 8004222:	b2db      	uxtb	r3, r3
 8004224:	4313      	orrs	r3, r2
 8004226:	b2da      	uxtb	r2, r3
 8004228:	683b      	ldr	r3, [r7, #0]
 800422a:	b2db      	uxtb	r3, r3
 800422c:	4313      	orrs	r3, r2
 800422e:	b2db      	uxtb	r3, r3
 8004230:	74fb      	strb	r3, [r7, #19]

    if (OV5640_WriteReg(&OV5640->Context, OV5640_POLARITY_CTRL, &tmp, 1) != OV5640_OK)
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	f103 0018 	add.w	r0, r3, #24
 8004238:	f107 0213 	add.w	r2, r7, #19
 800423c:	2301      	movs	r3, #1
 800423e:	f244 7140 	movw	r1, #18240	; 0x4740
 8004242:	f7ff fcda 	bl	8003bfa <OV5640_WriteReg>
 8004246:	4603      	mov	r3, r0
 8004248:	2b00      	cmp	r3, #0
 800424a:	d002      	beq.n	8004252 <OV5640_SetPolarities+0x82>
    {
      ret = OV5640_ERROR;
 800424c:	f04f 33ff 	mov.w	r3, #4294967295
 8004250:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 8004252:	697b      	ldr	r3, [r7, #20]
}
 8004254:	4618      	mov	r0, r3
 8004256:	3718      	adds	r7, #24
 8004258:	46bd      	mov	sp, r7
 800425a:	bd80      	pop	{r7, pc}

0800425c <OV5640_ReadID>:

int32_t OV5640_ReadID(OV5640_Handle_t *OV5640, uint32_t *Id)
{
 800425c:	b580      	push	{r7, lr}
 800425e:	b084      	sub	sp, #16
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]
 8004264:	6039      	str	r1, [r7, #0]

  /* Initialize I2C */
  //OV5640->IO.Init();

  /* Prepare the camera to be configured */
  tmp = 0x80;
 8004266:	2380      	movs	r3, #128	; 0x80
 8004268:	72fb      	strb	r3, [r7, #11]
  if (OV5640_WriteReg(&OV5640->Context, OV5640_SYSTEM_CTROL0, &tmp, 1) != OV5640_OK)
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	f103 0018 	add.w	r0, r3, #24
 8004270:	f107 020b 	add.w	r2, r7, #11
 8004274:	2301      	movs	r3, #1
 8004276:	f243 0108 	movw	r1, #12296	; 0x3008
 800427a:	f7ff fcbe 	bl	8003bfa <OV5640_WriteReg>
 800427e:	4603      	mov	r3, r0
 8004280:	2b00      	cmp	r3, #0
 8004282:	d003      	beq.n	800428c <OV5640_ReadID+0x30>
  {
    ret = OV5640_ERROR;
 8004284:	f04f 33ff 	mov.w	r3, #4294967295
 8004288:	60fb      	str	r3, [r7, #12]
 800428a:	e032      	b.n	80042f2 <OV5640_ReadID+0x96>
  }
  else
  {
    (void)OV5640_Delay(OV5640, 500);
 800428c:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8004290:	6878      	ldr	r0, [r7, #4]
 8004292:	f7ff fcfb 	bl	8003c8c <OV5640_Delay>

    if (OV5640_ReadReg(&OV5640->Context, OV5640_CHIP_ID_HIGH_BYTE, &tmp, 1) != OV5640_OK)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	f103 0018 	add.w	r0, r3, #24
 800429c:	f107 020b 	add.w	r2, r7, #11
 80042a0:	2301      	movs	r3, #1
 80042a2:	f243 010a 	movw	r1, #12298	; 0x300a
 80042a6:	f7ff fc91 	bl	8003bcc <OV5640_ReadReg>
 80042aa:	4603      	mov	r3, r0
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d003      	beq.n	80042b8 <OV5640_ReadID+0x5c>
    {
      ret = OV5640_ERROR;
 80042b0:	f04f 33ff 	mov.w	r3, #4294967295
 80042b4:	60fb      	str	r3, [r7, #12]
 80042b6:	e01c      	b.n	80042f2 <OV5640_ReadID+0x96>
    }
    else
    {
      *Id = (uint32_t)tmp << 8U;
 80042b8:	7afb      	ldrb	r3, [r7, #11]
 80042ba:	021a      	lsls	r2, r3, #8
 80042bc:	683b      	ldr	r3, [r7, #0]
 80042be:	601a      	str	r2, [r3, #0]
      if (OV5640_ReadReg(&OV5640->Context, OV5640_CHIP_ID_LOW_BYTE, &tmp, 1) != OV5640_OK)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	f103 0018 	add.w	r0, r3, #24
 80042c6:	f107 020b 	add.w	r2, r7, #11
 80042ca:	2301      	movs	r3, #1
 80042cc:	f243 010b 	movw	r1, #12299	; 0x300b
 80042d0:	f7ff fc7c 	bl	8003bcc <OV5640_ReadReg>
 80042d4:	4603      	mov	r3, r0
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d003      	beq.n	80042e2 <OV5640_ReadID+0x86>
      {
        ret = OV5640_ERROR;
 80042da:	f04f 33ff 	mov.w	r3, #4294967295
 80042de:	60fb      	str	r3, [r7, #12]
 80042e0:	e007      	b.n	80042f2 <OV5640_ReadID+0x96>
      }
      else
      {
        *Id |= tmp;
 80042e2:	683b      	ldr	r3, [r7, #0]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	7afa      	ldrb	r2, [r7, #11]
 80042e8:	431a      	orrs	r2, r3
 80042ea:	683b      	ldr	r3, [r7, #0]
 80042ec:	601a      	str	r2, [r3, #0]
        ret = OV5640_OK;
 80042ee:	2300      	movs	r3, #0
 80042f0:	60fb      	str	r3, [r7, #12]
      }
    }
  }

  /* Component status */
  return ret;
 80042f2:	68fb      	ldr	r3, [r7, #12]
}
 80042f4:	4618      	mov	r0, r3
 80042f6:	3710      	adds	r7, #16
 80042f8:	46bd      	mov	sp, r7
 80042fa:	bd80      	pop	{r7, pc}

080042fc <App_ThreadX_Init>:
  * @brief  Application ThreadX Initialization.
  * @param memory_ptr: memory pointer
  * @retval int
  */
UINT App_ThreadX_Init(VOID *memory_ptr)
{
 80042fc:	b580      	push	{r7, lr}
 80042fe:	b08c      	sub	sp, #48	; 0x30
 8004300:	af08      	add	r7, sp, #32
 8004302:	6078      	str	r0, [r7, #4]
  UINT ret = TX_SUCCESS;
 8004304:	2300      	movs	r3, #0
 8004306:	60fb      	str	r3, [r7, #12]
  TX_BYTE_POOL *byte_pool = (TX_BYTE_POOL*)memory_ptr;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	60bb      	str	r3, [r7, #8]
   /* USER CODE BEGIN App_ThreadX_MEM_POOL */
  (void)byte_pool;
  /* USER CODE END App_ThreadX_MEM_POOL */

  /* USER CODE BEGIN App_ThreadX_Init */
  tx_event_flags_create(&LED_Evt, "LED Event");
 800430c:	2224      	movs	r2, #36	; 0x24
 800430e:	4961      	ldr	r1, [pc, #388]	; (8004494 <App_ThreadX_Init+0x198>)
 8004310:	4861      	ldr	r0, [pc, #388]	; (8004498 <App_ThreadX_Init+0x19c>)
 8004312:	f00e f86f 	bl	80123f4 <_txe_event_flags_create>
  ret = tx_thread_create(&thread_ptr1,           //Thread Ptr
 8004316:	23b0      	movs	r3, #176	; 0xb0
 8004318:	9306      	str	r3, [sp, #24]
 800431a:	2301      	movs	r3, #1
 800431c:	9305      	str	r3, [sp, #20]
 800431e:	2301      	movs	r3, #1
 8004320:	9304      	str	r3, [sp, #16]
 8004322:	230f      	movs	r3, #15
 8004324:	9303      	str	r3, [sp, #12]
 8004326:	230f      	movs	r3, #15
 8004328:	9302      	str	r3, [sp, #8]
 800432a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800432e:	9301      	str	r3, [sp, #4]
 8004330:	4b5a      	ldr	r3, [pc, #360]	; (800449c <App_ThreadX_Init+0x1a0>)
 8004332:	9300      	str	r3, [sp, #0]
 8004334:	f64b 63ef 	movw	r3, #48879	; 0xbeef
 8004338:	4a59      	ldr	r2, [pc, #356]	; (80044a0 <App_ThreadX_Init+0x1a4>)
 800433a:	495a      	ldr	r1, [pc, #360]	; (80044a4 <App_ThreadX_Init+0x1a8>)
 800433c:	485a      	ldr	r0, [pc, #360]	; (80044a8 <App_ThreadX_Init+0x1ac>)
 800433e:	f00e fa4b 	bl	80127d8 <_txe_thread_create>
 8004342:	60f8      	str	r0, [r7, #12]
					15,                    //Priority
					15,                    //Preempt Threshold
					1,                     //Time Slize
					TX_AUTO_START);        //Auto Start or Auto Activate

  ret = tx_thread_create(&thread_ptr2,
 8004344:	23b0      	movs	r3, #176	; 0xb0
 8004346:	9306      	str	r3, [sp, #24]
 8004348:	2301      	movs	r3, #1
 800434a:	9305      	str	r3, [sp, #20]
 800434c:	2301      	movs	r3, #1
 800434e:	9304      	str	r3, [sp, #16]
 8004350:	230f      	movs	r3, #15
 8004352:	9303      	str	r3, [sp, #12]
 8004354:	230f      	movs	r3, #15
 8004356:	9302      	str	r3, [sp, #8]
 8004358:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800435c:	9301      	str	r3, [sp, #4]
 800435e:	4b53      	ldr	r3, [pc, #332]	; (80044ac <App_ThreadX_Init+0x1b0>)
 8004360:	9300      	str	r3, [sp, #0]
 8004362:	f64b 63ef 	movw	r3, #48879	; 0xbeef
 8004366:	4a52      	ldr	r2, [pc, #328]	; (80044b0 <App_ThreadX_Init+0x1b4>)
 8004368:	4952      	ldr	r1, [pc, #328]	; (80044b4 <App_ThreadX_Init+0x1b8>)
 800436a:	4853      	ldr	r0, [pc, #332]	; (80044b8 <App_ThreadX_Init+0x1bc>)
 800436c:	f00e fa34 	bl	80127d8 <_txe_thread_create>
 8004370:	60f8      	str	r0, [r7, #12]
					15,
					15,
					1,
					TX_AUTO_START);

  ret = tx_thread_create(&thread_ptr3,
 8004372:	23b0      	movs	r3, #176	; 0xb0
 8004374:	9306      	str	r3, [sp, #24]
 8004376:	2301      	movs	r3, #1
 8004378:	9305      	str	r3, [sp, #20]
 800437a:	2301      	movs	r3, #1
 800437c:	9304      	str	r3, [sp, #16]
 800437e:	230f      	movs	r3, #15
 8004380:	9303      	str	r3, [sp, #12]
 8004382:	230f      	movs	r3, #15
 8004384:	9302      	str	r3, [sp, #8]
 8004386:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800438a:	9301      	str	r3, [sp, #4]
 800438c:	4b4b      	ldr	r3, [pc, #300]	; (80044bc <App_ThreadX_Init+0x1c0>)
 800438e:	9300      	str	r3, [sp, #0]
 8004390:	f64b 63ef 	movw	r3, #48879	; 0xbeef
 8004394:	4a4a      	ldr	r2, [pc, #296]	; (80044c0 <App_ThreadX_Init+0x1c4>)
 8004396:	494b      	ldr	r1, [pc, #300]	; (80044c4 <App_ThreadX_Init+0x1c8>)
 8004398:	484b      	ldr	r0, [pc, #300]	; (80044c8 <App_ThreadX_Init+0x1cc>)
 800439a:	f00e fa1d 	bl	80127d8 <_txe_thread_create>
 800439e:	60f8      	str	r0, [r7, #12]
					15,
					1,
					TX_AUTO_START);

  //Motion
  ret = tx_thread_create(&Read_MotionThreadPtr,     //Thread Ptr
 80043a0:	23b0      	movs	r3, #176	; 0xb0
 80043a2:	9306      	str	r3, [sp, #24]
 80043a4:	2301      	movs	r3, #1
 80043a6:	9305      	str	r3, [sp, #20]
 80043a8:	2305      	movs	r3, #5
 80043aa:	9304      	str	r3, [sp, #16]
 80043ac:	230a      	movs	r3, #10
 80043ae:	9303      	str	r3, [sp, #12]
 80043b0:	230a      	movs	r3, #10
 80043b2:	9302      	str	r3, [sp, #8]
 80043b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80043b8:	9301      	str	r3, [sp, #4]
 80043ba:	4b44      	ldr	r3, [pc, #272]	; (80044cc <App_ThreadX_Init+0x1d0>)
 80043bc:	9300      	str	r3, [sp, #0]
 80043be:	2300      	movs	r3, #0
 80043c0:	4a43      	ldr	r2, [pc, #268]	; (80044d0 <App_ThreadX_Init+0x1d4>)
 80043c2:	4944      	ldr	r1, [pc, #272]	; (80044d4 <App_ThreadX_Init+0x1d8>)
 80043c4:	4844      	ldr	r0, [pc, #272]	; (80044d8 <App_ThreadX_Init+0x1dc>)
 80043c6:	f00e fa07 	bl	80127d8 <_txe_thread_create>
 80043ca:	60f8      	str	r0, [r7, #12]
					10,                    //Preempt Threshold
				    5,                     //Time Slize
					TX_AUTO_START);        //Auto Start or Auto Activate

  //Temp
  ret = tx_thread_create(&Read_TemperatureThreadPtr,   //Thread Ptr
 80043cc:	23b0      	movs	r3, #176	; 0xb0
 80043ce:	9306      	str	r3, [sp, #24]
 80043d0:	2301      	movs	r3, #1
 80043d2:	9305      	str	r3, [sp, #20]
 80043d4:	2301      	movs	r3, #1
 80043d6:	9304      	str	r3, [sp, #16]
 80043d8:	230f      	movs	r3, #15
 80043da:	9303      	str	r3, [sp, #12]
 80043dc:	230f      	movs	r3, #15
 80043de:	9302      	str	r3, [sp, #8]
 80043e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80043e4:	9301      	str	r3, [sp, #4]
 80043e6:	4b3d      	ldr	r3, [pc, #244]	; (80044dc <App_ThreadX_Init+0x1e0>)
 80043e8:	9300      	str	r3, [sp, #0]
 80043ea:	2300      	movs	r3, #0
 80043ec:	4a3c      	ldr	r2, [pc, #240]	; (80044e0 <App_ThreadX_Init+0x1e4>)
 80043ee:	493d      	ldr	r1, [pc, #244]	; (80044e4 <App_ThreadX_Init+0x1e8>)
 80043f0:	483d      	ldr	r0, [pc, #244]	; (80044e8 <App_ThreadX_Init+0x1ec>)
 80043f2:	f00e f9f1 	bl	80127d8 <_txe_thread_create>
 80043f6:	60f8      	str	r0, [r7, #12]
					15,                    //Priority
					15,                    //Preempt Threshold
				    1,                     //Time Slize
					TX_AUTO_START);        //Auto Start or Auto Activate
  //Humidity
  ret = tx_thread_create(&Read_HumidityThreadPtr,   //Thread Ptr
 80043f8:	23b0      	movs	r3, #176	; 0xb0
 80043fa:	9306      	str	r3, [sp, #24]
 80043fc:	2301      	movs	r3, #1
 80043fe:	9305      	str	r3, [sp, #20]
 8004400:	2301      	movs	r3, #1
 8004402:	9304      	str	r3, [sp, #16]
 8004404:	230f      	movs	r3, #15
 8004406:	9303      	str	r3, [sp, #12]
 8004408:	230f      	movs	r3, #15
 800440a:	9302      	str	r3, [sp, #8]
 800440c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004410:	9301      	str	r3, [sp, #4]
 8004412:	4b36      	ldr	r3, [pc, #216]	; (80044ec <App_ThreadX_Init+0x1f0>)
 8004414:	9300      	str	r3, [sp, #0]
 8004416:	2300      	movs	r3, #0
 8004418:	4a35      	ldr	r2, [pc, #212]	; (80044f0 <App_ThreadX_Init+0x1f4>)
 800441a:	4936      	ldr	r1, [pc, #216]	; (80044f4 <App_ThreadX_Init+0x1f8>)
 800441c:	4836      	ldr	r0, [pc, #216]	; (80044f8 <App_ThreadX_Init+0x1fc>)
 800441e:	f00e f9db 	bl	80127d8 <_txe_thread_create>
 8004422:	60f8      	str	r0, [r7, #12]
					15,                    //Priority
					15,                    //Preempt Threshold
				    1,                     //Time Slize
					TX_AUTO_START);        //Auto Start or Auto Activate
  //Pressure
  ret = tx_thread_create(&Read_PressureThreadPtr,   //Thread Ptr
 8004424:	23b0      	movs	r3, #176	; 0xb0
 8004426:	9306      	str	r3, [sp, #24]
 8004428:	2301      	movs	r3, #1
 800442a:	9305      	str	r3, [sp, #20]
 800442c:	2301      	movs	r3, #1
 800442e:	9304      	str	r3, [sp, #16]
 8004430:	230f      	movs	r3, #15
 8004432:	9303      	str	r3, [sp, #12]
 8004434:	230f      	movs	r3, #15
 8004436:	9302      	str	r3, [sp, #8]
 8004438:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800443c:	9301      	str	r3, [sp, #4]
 800443e:	4b2f      	ldr	r3, [pc, #188]	; (80044fc <App_ThreadX_Init+0x200>)
 8004440:	9300      	str	r3, [sp, #0]
 8004442:	2300      	movs	r3, #0
 8004444:	4a2e      	ldr	r2, [pc, #184]	; (8004500 <App_ThreadX_Init+0x204>)
 8004446:	492f      	ldr	r1, [pc, #188]	; (8004504 <App_ThreadX_Init+0x208>)
 8004448:	482f      	ldr	r0, [pc, #188]	; (8004508 <App_ThreadX_Init+0x20c>)
 800444a:	f00e f9c5 	bl	80127d8 <_txe_thread_create>
 800444e:	60f8      	str	r0, [r7, #12]
					15,                    //Preempt Threshold
				    1,                     //Time Slize
					TX_AUTO_START);        //Auto Start or Auto Activate

  //Magnet
  ret = tx_thread_create(&Read_MagneticThreadPtr,   //Thread Ptr
 8004450:	23b0      	movs	r3, #176	; 0xb0
 8004452:	9306      	str	r3, [sp, #24]
 8004454:	2301      	movs	r3, #1
 8004456:	9305      	str	r3, [sp, #20]
 8004458:	2301      	movs	r3, #1
 800445a:	9304      	str	r3, [sp, #16]
 800445c:	230f      	movs	r3, #15
 800445e:	9303      	str	r3, [sp, #12]
 8004460:	230f      	movs	r3, #15
 8004462:	9302      	str	r3, [sp, #8]
 8004464:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004468:	9301      	str	r3, [sp, #4]
 800446a:	4b28      	ldr	r3, [pc, #160]	; (800450c <App_ThreadX_Init+0x210>)
 800446c:	9300      	str	r3, [sp, #0]
 800446e:	2300      	movs	r3, #0
 8004470:	4a27      	ldr	r2, [pc, #156]	; (8004510 <App_ThreadX_Init+0x214>)
 8004472:	4928      	ldr	r1, [pc, #160]	; (8004514 <App_ThreadX_Init+0x218>)
 8004474:	4828      	ldr	r0, [pc, #160]	; (8004518 <App_ThreadX_Init+0x21c>)
 8004476:	f00e f9af 	bl	80127d8 <_txe_thread_create>
 800447a:	60f8      	str	r0, [r7, #12]
					15,                    //Priority
					15,                    //Preempt Threshold
				    1,                     //Time Slize
					TX_AUTO_START);        //Auto Start or Auto Activate

  ret = tx_mutex_create(&MutexI2C2, "I2C2 Mutex", TX_INHERIT);
 800447c:	2334      	movs	r3, #52	; 0x34
 800447e:	2201      	movs	r2, #1
 8004480:	4926      	ldr	r1, [pc, #152]	; (800451c <App_ThreadX_Init+0x220>)
 8004482:	4827      	ldr	r0, [pc, #156]	; (8004520 <App_ThreadX_Init+0x224>)
 8004484:	f00e f876 	bl	8012574 <_txe_mutex_create>
 8004488:	60f8      	str	r0, [r7, #12]
  /* USER CODE END App_ThreadX_Init */

  return ret;
 800448a:	68fb      	ldr	r3, [r7, #12]
}
 800448c:	4618      	mov	r0, r3
 800448e:	3710      	adds	r7, #16
 8004490:	46bd      	mov	sp, r7
 8004492:	bd80      	pop	{r7, pc}
 8004494:	08013554 	.word	0x08013554
 8004498:	20002b7c 	.word	0x20002b7c
 800449c:	20000598 	.word	0x20000598
 80044a0:	08004531 	.word	0x08004531
 80044a4:	08013560 	.word	0x08013560
 80044a8:	200025c8 	.word	0x200025c8
 80044ac:	20000998 	.word	0x20000998
 80044b0:	08004555 	.word	0x08004555
 80044b4:	08013568 	.word	0x08013568
 80044b8:	20002678 	.word	0x20002678
 80044bc:	20000d98 	.word	0x20000d98
 80044c0:	08004579 	.word	0x08004579
 80044c4:	08013570 	.word	0x08013570
 80044c8:	20002728 	.word	0x20002728
 80044cc:	20001d98 	.word	0x20001d98
 80044d0:	08004849 	.word	0x08004849
 80044d4:	08013578 	.word	0x08013578
 80044d8:	200029e8 	.word	0x200029e8
 80044dc:	20001198 	.word	0x20001198
 80044e0:	080045d1 	.word	0x080045d1
 80044e4:	08013588 	.word	0x08013588
 80044e8:	200027d8 	.word	0x200027d8
 80044ec:	20001598 	.word	0x20001598
 80044f0:	08004665 	.word	0x08004665
 80044f4:	08013594 	.word	0x08013594
 80044f8:	20002888 	.word	0x20002888
 80044fc:	20001998 	.word	0x20001998
 8004500:	080046f9 	.word	0x080046f9
 8004504:	080135a4 	.word	0x080135a4
 8004508:	20002938 	.word	0x20002938
 800450c:	20002198 	.word	0x20002198
 8004510:	0800478d 	.word	0x0800478d
 8004514:	080135b4 	.word	0x080135b4
 8004518:	20002a98 	.word	0x20002a98
 800451c:	080135c4 	.word	0x080135c4
 8004520:	20002b48 	.word	0x20002b48

08004524 <MX_ThreadX_Init>:
  * @brief  MX_ThreadX_Init
  * @param  None
  * @retval None
  */
void MX_ThreadX_Init(void)
{
 8004524:	b580      	push	{r7, lr}
 8004526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN  Before_Kernel_Start */

  /* USER CODE END  Before_Kernel_Start */

  tx_kernel_enter();
 8004528:	f00c f8fe 	bl	8010728 <_tx_initialize_kernel_enter>

  /* USER CODE BEGIN  Kernel_Start_Error */

  /* USER CODE END  Kernel_Start_Error */
}
 800452c:	bf00      	nop
 800452e:	bd80      	pop	{r7, pc}

08004530 <thread1_evt>:

/* USER CODE BEGIN 1 */
VOID thread1_evt(ULONG initial_input){
 8004530:	b580      	push	{r7, lr}
 8004532:	b082      	sub	sp, #8
 8004534:	af00      	add	r7, sp, #0
 8004536:	6078      	str	r0, [r7, #4]
	while(1)
	{
		tx_event_flags_set(&LED_Evt,1,TX_OR);
 8004538:	2200      	movs	r2, #0
 800453a:	2101      	movs	r1, #1
 800453c:	4803      	ldr	r0, [pc, #12]	; (800454c <thread1_evt+0x1c>)
 800453e:	f00d ffeb 	bl	8012518 <_txe_event_flags_set>
		tx_thread_suspend(&thread_ptr1);
 8004542:	4803      	ldr	r0, [pc, #12]	; (8004550 <thread1_evt+0x20>)
 8004544:	f00e fa58 	bl	80129f8 <_txe_thread_suspend>
		tx_event_flags_set(&LED_Evt,1,TX_OR);
 8004548:	e7f6      	b.n	8004538 <thread1_evt+0x8>
 800454a:	bf00      	nop
 800454c:	20002b7c 	.word	0x20002b7c
 8004550:	200025c8 	.word	0x200025c8

08004554 <thread2_evt>:
	}
}

VOID thread2_evt(ULONG initial_input){
 8004554:	b580      	push	{r7, lr}
 8004556:	b082      	sub	sp, #8
 8004558:	af00      	add	r7, sp, #0
 800455a:	6078      	str	r0, [r7, #4]
	while(1)
	{
		tx_event_flags_set(&LED_Evt,2,TX_OR);
 800455c:	2200      	movs	r2, #0
 800455e:	2102      	movs	r1, #2
 8004560:	4803      	ldr	r0, [pc, #12]	; (8004570 <thread2_evt+0x1c>)
 8004562:	f00d ffd9 	bl	8012518 <_txe_event_flags_set>
		tx_thread_suspend(&thread_ptr2);
 8004566:	4803      	ldr	r0, [pc, #12]	; (8004574 <thread2_evt+0x20>)
 8004568:	f00e fa46 	bl	80129f8 <_txe_thread_suspend>
		tx_event_flags_set(&LED_Evt,2,TX_OR);
 800456c:	e7f6      	b.n	800455c <thread2_evt+0x8>
 800456e:	bf00      	nop
 8004570:	20002b7c 	.word	0x20002b7c
 8004574:	20002678 	.word	0x20002678

08004578 <thread_LED>:
	}
}

VOID thread_LED(ULONG initial_input){
 8004578:	b580      	push	{r7, lr}
 800457a:	b084      	sub	sp, #16
 800457c:	af00      	add	r7, sp, #0
 800457e:	6078      	str	r0, [r7, #4]
	uint32_t FlagValue = 0;
 8004580:	2300      	movs	r3, #0
 8004582:	60fb      	str	r3, [r7, #12]
	while(1)
	{
		FlagValue = LED_Evt.tx_event_flags_group_current;
 8004584:	4b0e      	ldr	r3, [pc, #56]	; (80045c0 <thread_LED+0x48>)
 8004586:	689b      	ldr	r3, [r3, #8]
 8004588:	60fb      	str	r3, [r7, #12]

	    if(FlagValue == 3){
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	2b03      	cmp	r3, #3
 800458e:	d1f9      	bne.n	8004584 <thread_LED+0xc>
	        HAL_GPIO_TogglePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin);
 8004590:	2180      	movs	r1, #128	; 0x80
 8004592:	480c      	ldr	r0, [pc, #48]	; (80045c4 <thread_LED+0x4c>)
 8004594:	f004 fa1a 	bl	80089cc <HAL_GPIO_TogglePin>
	        HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
 8004598:	2140      	movs	r1, #64	; 0x40
 800459a:	480a      	ldr	r0, [pc, #40]	; (80045c4 <thread_LED+0x4c>)
 800459c:	f004 fa16 	bl	80089cc <HAL_GPIO_TogglePin>
	        tx_event_flags_set(&LED_Evt, 0xFFFC, TX_AND);
 80045a0:	2202      	movs	r2, #2
 80045a2:	f64f 71fc 	movw	r1, #65532	; 0xfffc
 80045a6:	4806      	ldr	r0, [pc, #24]	; (80045c0 <thread_LED+0x48>)
 80045a8:	f00d ffb6 	bl	8012518 <_txe_event_flags_set>
	        tx_thread_resume(&thread_ptr1);
 80045ac:	4806      	ldr	r0, [pc, #24]	; (80045c8 <thread_LED+0x50>)
 80045ae:	f00e fa05 	bl	80129bc <_txe_thread_resume>
	        tx_thread_resume(&thread_ptr2);
 80045b2:	4806      	ldr	r0, [pc, #24]	; (80045cc <thread_LED+0x54>)
 80045b4:	f00e fa02 	bl	80129bc <_txe_thread_resume>
	        tx_thread_sleep(100);
 80045b8:	2064      	movs	r0, #100	; 0x64
 80045ba:	f00d f875 	bl	80116a8 <_tx_thread_sleep>
		FlagValue = LED_Evt.tx_event_flags_group_current;
 80045be:	e7e1      	b.n	8004584 <thread_LED+0xc>
 80045c0:	20002b7c 	.word	0x20002b7c
 80045c4:	42021c00 	.word	0x42021c00
 80045c8:	200025c8 	.word	0x200025c8
 80045cc:	20002678 	.word	0x20002678

080045d0 <ReadTemperatureThread>:

	}
}

VOID ReadTemperatureThread(ULONG init)
{
 80045d0:	b580      	push	{r7, lr}
 80045d2:	b086      	sub	sp, #24
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
	int32_t ret = HTS221_Ok;
 80045d8:	2300      	movs	r3, #0
 80045da:	617b      	str	r3, [r7, #20]
	uint32_t SleepTime = 0;
 80045dc:	2300      	movs	r3, #0
 80045de:	613b      	str	r3, [r7, #16]
	float Temperature = 0;
 80045e0:	f04f 0300 	mov.w	r3, #0
 80045e4:	60fb      	str	r3, [r7, #12]
	while(1)
	{
		//Take I2C Mutex (if available)
		tx_mutex_get(&MutexI2C2,TX_WAIT_FOREVER);
 80045e6:	f04f 31ff 	mov.w	r1, #4294967295
 80045ea:	481b      	ldr	r0, [pc, #108]	; (8004658 <ReadTemperatureThread+0x88>)
 80045ec:	f00e f860 	bl	80126b0 <_txe_mutex_get>
		ret = BSP_ReadTemperature(&Temperature);
 80045f0:	f107 030c 	add.w	r3, r7, #12
 80045f4:	4618      	mov	r0, r3
 80045f6:	f7fc ffbb 	bl	8001570 <BSP_ReadTemperature>
 80045fa:	6178      	str	r0, [r7, #20]
		tx_mutex_put(&MutexI2C2);
 80045fc:	4816      	ldr	r0, [pc, #88]	; (8004658 <ReadTemperatureThread+0x88>)
 80045fe:	f00e f8b1 	bl	8012764 <_txe_mutex_put>
		if(ret == HTS221_DataReady)
 8004602:	697b      	ldr	r3, [r7, #20]
 8004604:	2b00      	cmp	r3, #0
 8004606:	d102      	bne.n	800460e <ReadTemperatureThread+0x3e>
		{
			temp_data = Temperature;
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	4a14      	ldr	r2, [pc, #80]	; (800465c <ReadTemperatureThread+0x8c>)
 800460c:	6013      	str	r3, [r2, #0]
		}
		ret = BSP_GetTempPeriod(&SleepTime);
 800460e:	f107 0310 	add.w	r3, r7, #16
 8004612:	4618      	mov	r0, r3
 8004614:	f7fd f850 	bl	80016b8 <BSP_GetTempPeriod>
 8004618:	6178      	str	r0, [r7, #20]
		if(ret == HTS221_Ok)
 800461a:	697b      	ldr	r3, [r7, #20]
 800461c:	2b00      	cmp	r3, #0
 800461e:	d1e2      	bne.n	80045e6 <ReadTemperatureThread+0x16>
		{
			//Sleep Time given in milliseconds. OS Timeslice = 10 ms, +1 is to handle possible non-zero remainders.
			if(SleepTime % 10 == 0)
 8004620:	6939      	ldr	r1, [r7, #16]
 8004622:	4b0f      	ldr	r3, [pc, #60]	; (8004660 <ReadTemperatureThread+0x90>)
 8004624:	fba3 2301 	umull	r2, r3, r3, r1
 8004628:	08da      	lsrs	r2, r3, #3
 800462a:	4613      	mov	r3, r2
 800462c:	009b      	lsls	r3, r3, #2
 800462e:	4413      	add	r3, r2
 8004630:	005b      	lsls	r3, r3, #1
 8004632:	1aca      	subs	r2, r1, r3
 8004634:	2a00      	cmp	r2, #0
 8004636:	d104      	bne.n	8004642 <ReadTemperatureThread+0x72>
			{
				tx_thread_sleep(SleepTime);
 8004638:	693b      	ldr	r3, [r7, #16]
 800463a:	4618      	mov	r0, r3
 800463c:	f00d f834 	bl	80116a8 <_tx_thread_sleep>
 8004640:	e7d1      	b.n	80045e6 <ReadTemperatureThread+0x16>
			} else
			{
				tx_thread_sleep((SleepTime / 10) + 1);
 8004642:	693b      	ldr	r3, [r7, #16]
 8004644:	4a06      	ldr	r2, [pc, #24]	; (8004660 <ReadTemperatureThread+0x90>)
 8004646:	fba2 2303 	umull	r2, r3, r2, r3
 800464a:	08db      	lsrs	r3, r3, #3
 800464c:	3301      	adds	r3, #1
 800464e:	4618      	mov	r0, r3
 8004650:	f00d f82a 	bl	80116a8 <_tx_thread_sleep>
		tx_mutex_get(&MutexI2C2,TX_WAIT_FOREVER);
 8004654:	e7c7      	b.n	80045e6 <ReadTemperatureThread+0x16>
 8004656:	bf00      	nop
 8004658:	20002b48 	.word	0x20002b48
 800465c:	20002598 	.word	0x20002598
 8004660:	cccccccd 	.word	0xcccccccd

08004664 <ReadHumidityThread>:
		}
	}
}

VOID ReadHumidityThread(ULONG init)
{
 8004664:	b580      	push	{r7, lr}
 8004666:	b086      	sub	sp, #24
 8004668:	af00      	add	r7, sp, #0
 800466a:	6078      	str	r0, [r7, #4]
	int32_t ret = HTS221_Ok;
 800466c:	2300      	movs	r3, #0
 800466e:	617b      	str	r3, [r7, #20]
	uint32_t SleepTime = 0;
 8004670:	2300      	movs	r3, #0
 8004672:	613b      	str	r3, [r7, #16]
	float Humidity = 0;
 8004674:	f04f 0300 	mov.w	r3, #0
 8004678:	60fb      	str	r3, [r7, #12]
	while(1)
	{
		//Take I2C Mutex (if available)
		tx_mutex_get(&MutexI2C2,TX_WAIT_FOREVER);
 800467a:	f04f 31ff 	mov.w	r1, #4294967295
 800467e:	481b      	ldr	r0, [pc, #108]	; (80046ec <ReadHumidityThread+0x88>)
 8004680:	f00e f816 	bl	80126b0 <_txe_mutex_get>
		ret = BSP_ReadHumidity(&Humidity);
 8004684:	f107 030c 	add.w	r3, r7, #12
 8004688:	4618      	mov	r0, r3
 800468a:	f7fc ff81 	bl	8001590 <BSP_ReadHumidity>
 800468e:	6178      	str	r0, [r7, #20]
		tx_mutex_put(&MutexI2C2);
 8004690:	4816      	ldr	r0, [pc, #88]	; (80046ec <ReadHumidityThread+0x88>)
 8004692:	f00e f867 	bl	8012764 <_txe_mutex_put>
		if(ret == HTS221_DataReady)
 8004696:	697b      	ldr	r3, [r7, #20]
 8004698:	2b00      	cmp	r3, #0
 800469a:	d102      	bne.n	80046a2 <ReadHumidityThread+0x3e>
		{
			humidity_data = Humidity;
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	4a14      	ldr	r2, [pc, #80]	; (80046f0 <ReadHumidityThread+0x8c>)
 80046a0:	6013      	str	r3, [r2, #0]
		}
		ret = BSP_GetTempPeriod(&SleepTime);
 80046a2:	f107 0310 	add.w	r3, r7, #16
 80046a6:	4618      	mov	r0, r3
 80046a8:	f7fd f806 	bl	80016b8 <BSP_GetTempPeriod>
 80046ac:	6178      	str	r0, [r7, #20]
		if(ret == HTS221_Ok)
 80046ae:	697b      	ldr	r3, [r7, #20]
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d1e2      	bne.n	800467a <ReadHumidityThread+0x16>
		{
			//Sleep Time given in milliseconds. OS Timeslice = 10 ms, +1 is to handle possible non-zero remainders.
			if(SleepTime % 10 == 0)
 80046b4:	6939      	ldr	r1, [r7, #16]
 80046b6:	4b0f      	ldr	r3, [pc, #60]	; (80046f4 <ReadHumidityThread+0x90>)
 80046b8:	fba3 2301 	umull	r2, r3, r3, r1
 80046bc:	08da      	lsrs	r2, r3, #3
 80046be:	4613      	mov	r3, r2
 80046c0:	009b      	lsls	r3, r3, #2
 80046c2:	4413      	add	r3, r2
 80046c4:	005b      	lsls	r3, r3, #1
 80046c6:	1aca      	subs	r2, r1, r3
 80046c8:	2a00      	cmp	r2, #0
 80046ca:	d104      	bne.n	80046d6 <ReadHumidityThread+0x72>
			{
				tx_thread_sleep(SleepTime);
 80046cc:	693b      	ldr	r3, [r7, #16]
 80046ce:	4618      	mov	r0, r3
 80046d0:	f00c ffea 	bl	80116a8 <_tx_thread_sleep>
 80046d4:	e7d1      	b.n	800467a <ReadHumidityThread+0x16>
			} else
			{
				tx_thread_sleep((SleepTime / 10) + 1);
 80046d6:	693b      	ldr	r3, [r7, #16]
 80046d8:	4a06      	ldr	r2, [pc, #24]	; (80046f4 <ReadHumidityThread+0x90>)
 80046da:	fba2 2303 	umull	r2, r3, r2, r3
 80046de:	08db      	lsrs	r3, r3, #3
 80046e0:	3301      	adds	r3, #1
 80046e2:	4618      	mov	r0, r3
 80046e4:	f00c ffe0 	bl	80116a8 <_tx_thread_sleep>
		tx_mutex_get(&MutexI2C2,TX_WAIT_FOREVER);
 80046e8:	e7c7      	b.n	800467a <ReadHumidityThread+0x16>
 80046ea:	bf00      	nop
 80046ec:	20002b48 	.word	0x20002b48
 80046f0:	2000259c 	.word	0x2000259c
 80046f4:	cccccccd 	.word	0xcccccccd

080046f8 <ReadPressureThread>:
		}
	}
}

VOID ReadPressureThread(ULONG init)
{
 80046f8:	b580      	push	{r7, lr}
 80046fa:	b086      	sub	sp, #24
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]
	int32_t ret = LPS22HH_Ok;
 8004700:	2300      	movs	r3, #0
 8004702:	617b      	str	r3, [r7, #20]
	uint32_t SleepTime = 0;
 8004704:	2300      	movs	r3, #0
 8004706:	613b      	str	r3, [r7, #16]
	float Pressure = 0;
 8004708:	f04f 0300 	mov.w	r3, #0
 800470c:	60fb      	str	r3, [r7, #12]
	while(1)
	{
		tx_mutex_get(&MutexI2C2,TX_WAIT_FOREVER);
 800470e:	f04f 31ff 	mov.w	r1, #4294967295
 8004712:	481b      	ldr	r0, [pc, #108]	; (8004780 <ReadPressureThread+0x88>)
 8004714:	f00d ffcc 	bl	80126b0 <_txe_mutex_get>
		ret = BSP_ReadPressure(&Pressure);
 8004718:	f107 030c 	add.w	r3, r7, #12
 800471c:	4618      	mov	r0, r3
 800471e:	f7fc ff77 	bl	8001610 <BSP_ReadPressure>
 8004722:	6178      	str	r0, [r7, #20]
		tx_mutex_put(&MutexI2C2);
 8004724:	4816      	ldr	r0, [pc, #88]	; (8004780 <ReadPressureThread+0x88>)
 8004726:	f00e f81d 	bl	8012764 <_txe_mutex_put>
		if(ret == LPS22HH_DataReady)
 800472a:	697b      	ldr	r3, [r7, #20]
 800472c:	2b00      	cmp	r3, #0
 800472e:	d102      	bne.n	8004736 <ReadPressureThread+0x3e>
		{
			pressure_data = Pressure;
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	4a14      	ldr	r2, [pc, #80]	; (8004784 <ReadPressureThread+0x8c>)
 8004734:	6013      	str	r3, [r2, #0]
		}
		ret = BSP_GetPressurePeriod(&SleepTime);
 8004736:	f107 0310 	add.w	r3, r7, #16
 800473a:	4618      	mov	r0, r3
 800473c:	f7fc ffdc 	bl	80016f8 <BSP_GetPressurePeriod>
 8004740:	6178      	str	r0, [r7, #20]
		if(ret == LPS22HH_Ok)
 8004742:	697b      	ldr	r3, [r7, #20]
 8004744:	2b00      	cmp	r3, #0
 8004746:	d1e2      	bne.n	800470e <ReadPressureThread+0x16>
		{
			//Sleep Time given in milliseconds. OS Timeslice = 10 ms, +1 is to handle possible non-zero remainders.
			if(SleepTime % 10 == 0)
 8004748:	6939      	ldr	r1, [r7, #16]
 800474a:	4b0f      	ldr	r3, [pc, #60]	; (8004788 <ReadPressureThread+0x90>)
 800474c:	fba3 2301 	umull	r2, r3, r3, r1
 8004750:	08da      	lsrs	r2, r3, #3
 8004752:	4613      	mov	r3, r2
 8004754:	009b      	lsls	r3, r3, #2
 8004756:	4413      	add	r3, r2
 8004758:	005b      	lsls	r3, r3, #1
 800475a:	1aca      	subs	r2, r1, r3
 800475c:	2a00      	cmp	r2, #0
 800475e:	d104      	bne.n	800476a <ReadPressureThread+0x72>
			{
				tx_thread_sleep(SleepTime);
 8004760:	693b      	ldr	r3, [r7, #16]
 8004762:	4618      	mov	r0, r3
 8004764:	f00c ffa0 	bl	80116a8 <_tx_thread_sleep>
 8004768:	e7d1      	b.n	800470e <ReadPressureThread+0x16>
			} else
			{
				tx_thread_sleep((SleepTime / 10) + 1);
 800476a:	693b      	ldr	r3, [r7, #16]
 800476c:	4a06      	ldr	r2, [pc, #24]	; (8004788 <ReadPressureThread+0x90>)
 800476e:	fba2 2303 	umull	r2, r3, r2, r3
 8004772:	08db      	lsrs	r3, r3, #3
 8004774:	3301      	adds	r3, #1
 8004776:	4618      	mov	r0, r3
 8004778:	f00c ff96 	bl	80116a8 <_tx_thread_sleep>
		tx_mutex_get(&MutexI2C2,TX_WAIT_FOREVER);
 800477c:	e7c7      	b.n	800470e <ReadPressureThread+0x16>
 800477e:	bf00      	nop
 8004780:	20002b48 	.word	0x20002b48
 8004784:	200025a0 	.word	0x200025a0
 8004788:	cccccccd 	.word	0xcccccccd

0800478c <ReadMagneticThread>:
		}
	}
}

VOID ReadMagneticThread(ULONG init)
{
 800478c:	b580      	push	{r7, lr}
 800478e:	b088      	sub	sp, #32
 8004790:	af00      	add	r7, sp, #0
 8004792:	6078      	str	r0, [r7, #4]
	int32_t ret = IIS2MDC_Ok;
 8004794:	2300      	movs	r3, #0
 8004796:	61fb      	str	r3, [r7, #28]
	uint32_t SleepTime = 0;
 8004798:	2300      	movs	r3, #0
 800479a:	61bb      	str	r3, [r7, #24]
	float MagX = 0;
 800479c:	f04f 0300 	mov.w	r3, #0
 80047a0:	617b      	str	r3, [r7, #20]
	float MagY = 0;
 80047a2:	f04f 0300 	mov.w	r3, #0
 80047a6:	613b      	str	r3, [r7, #16]
	float MagZ = 0;
 80047a8:	f04f 0300 	mov.w	r3, #0
 80047ac:	60fb      	str	r3, [r7, #12]
	while(1)
	{
		tx_mutex_get(&MutexI2C2,TX_WAIT_FOREVER);
 80047ae:	f04f 31ff 	mov.w	r1, #4294967295
 80047b2:	4820      	ldr	r0, [pc, #128]	; (8004834 <ReadMagneticThread+0xa8>)
 80047b4:	f00d ff7c 	bl	80126b0 <_txe_mutex_get>
		ret = BSP_ReadMagnetometerXYZ(&MagX, &MagY, &MagZ);
 80047b8:	f107 020c 	add.w	r2, r7, #12
 80047bc:	f107 0110 	add.w	r1, r7, #16
 80047c0:	f107 0314 	add.w	r3, r7, #20
 80047c4:	4618      	mov	r0, r3
 80047c6:	f7fc ff63 	bl	8001690 <BSP_ReadMagnetometerXYZ>
 80047ca:	61f8      	str	r0, [r7, #28]
		tx_mutex_put(&MutexI2C2);
 80047cc:	4819      	ldr	r0, [pc, #100]	; (8004834 <ReadMagneticThread+0xa8>)
 80047ce:	f00d ffc9 	bl	8012764 <_txe_mutex_put>
		if(ret == IIS2MDC_DataReady)
 80047d2:	69fb      	ldr	r3, [r7, #28]
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d108      	bne.n	80047ea <ReadMagneticThread+0x5e>
		{
			magx = MagX;
 80047d8:	697b      	ldr	r3, [r7, #20]
 80047da:	4a17      	ldr	r2, [pc, #92]	; (8004838 <ReadMagneticThread+0xac>)
 80047dc:	6013      	str	r3, [r2, #0]
			magy = MagY;
 80047de:	693b      	ldr	r3, [r7, #16]
 80047e0:	4a16      	ldr	r2, [pc, #88]	; (800483c <ReadMagneticThread+0xb0>)
 80047e2:	6013      	str	r3, [r2, #0]
			magz = MagZ;
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	4a16      	ldr	r2, [pc, #88]	; (8004840 <ReadMagneticThread+0xb4>)
 80047e8:	6013      	str	r3, [r2, #0]
		}
		ret = BSP_GetMagneticPeriod(&SleepTime);
 80047ea:	f107 0318 	add.w	r3, r7, #24
 80047ee:	4618      	mov	r0, r3
 80047f0:	f7fc ff72 	bl	80016d8 <BSP_GetMagneticPeriod>
 80047f4:	61f8      	str	r0, [r7, #28]
		if(ret == IIS2MDC_Ok)
 80047f6:	69fb      	ldr	r3, [r7, #28]
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d1d8      	bne.n	80047ae <ReadMagneticThread+0x22>
		{
			//Sleep Time given in milliseconds. OS Timeslice = 10 ms, +1 is to handle possible non-zero remainders.
			if(SleepTime % 10 == 0)
 80047fc:	69b9      	ldr	r1, [r7, #24]
 80047fe:	4b11      	ldr	r3, [pc, #68]	; (8004844 <ReadMagneticThread+0xb8>)
 8004800:	fba3 2301 	umull	r2, r3, r3, r1
 8004804:	08da      	lsrs	r2, r3, #3
 8004806:	4613      	mov	r3, r2
 8004808:	009b      	lsls	r3, r3, #2
 800480a:	4413      	add	r3, r2
 800480c:	005b      	lsls	r3, r3, #1
 800480e:	1aca      	subs	r2, r1, r3
 8004810:	2a00      	cmp	r2, #0
 8004812:	d104      	bne.n	800481e <ReadMagneticThread+0x92>
			{
				tx_thread_sleep(SleepTime);
 8004814:	69bb      	ldr	r3, [r7, #24]
 8004816:	4618      	mov	r0, r3
 8004818:	f00c ff46 	bl	80116a8 <_tx_thread_sleep>
 800481c:	e7c7      	b.n	80047ae <ReadMagneticThread+0x22>
			} else
			{
				tx_thread_sleep((SleepTime / 10) + 1);
 800481e:	69bb      	ldr	r3, [r7, #24]
 8004820:	4a08      	ldr	r2, [pc, #32]	; (8004844 <ReadMagneticThread+0xb8>)
 8004822:	fba2 2303 	umull	r2, r3, r2, r3
 8004826:	08db      	lsrs	r3, r3, #3
 8004828:	3301      	adds	r3, #1
 800482a:	4618      	mov	r0, r3
 800482c:	f00c ff3c 	bl	80116a8 <_tx_thread_sleep>
		tx_mutex_get(&MutexI2C2,TX_WAIT_FOREVER);
 8004830:	e7bd      	b.n	80047ae <ReadMagneticThread+0x22>
 8004832:	bf00      	nop
 8004834:	20002b48 	.word	0x20002b48
 8004838:	200025bc 	.word	0x200025bc
 800483c:	200025c0 	.word	0x200025c0
 8004840:	200025c4 	.word	0x200025c4
 8004844:	cccccccd 	.word	0xcccccccd

08004848 <ReadMotionThread>:
		}
	}
}

VOID ReadMotionThread(ULONG init)
{
 8004848:	b580      	push	{r7, lr}
 800484a:	b08a      	sub	sp, #40	; 0x28
 800484c:	af00      	add	r7, sp, #0
 800484e:	6078      	str	r0, [r7, #4]
	int32_t ret = IIS2MDC_Ok;
 8004850:	2300      	movs	r3, #0
 8004852:	627b      	str	r3, [r7, #36]	; 0x24
	float AccelX = 0;
 8004854:	f04f 0300 	mov.w	r3, #0
 8004858:	623b      	str	r3, [r7, #32]
	float AccelY = 0;
 800485a:	f04f 0300 	mov.w	r3, #0
 800485e:	61fb      	str	r3, [r7, #28]
	float AccelZ = 0;
 8004860:	f04f 0300 	mov.w	r3, #0
 8004864:	61bb      	str	r3, [r7, #24]
	float GyroX = 0;
 8004866:	f04f 0300 	mov.w	r3, #0
 800486a:	617b      	str	r3, [r7, #20]
	float GyroY = 0;
 800486c:	f04f 0300 	mov.w	r3, #0
 8004870:	613b      	str	r3, [r7, #16]
	float GyroZ = 0;
 8004872:	f04f 0300 	mov.w	r3, #0
 8004876:	60fb      	str	r3, [r7, #12]
	//Synchronize with hardware timer
	BSP_SynchronizeIRQ();
 8004878:	f7fd f806 	bl	8001888 <BSP_SynchronizeIRQ>
	while(1)
	{
	    tx_mutex_get(&MutexI2C2,TX_NO_WAIT);
 800487c:	2100      	movs	r1, #0
 800487e:	481b      	ldr	r0, [pc, #108]	; (80048ec <ReadMotionThread+0xa4>)
 8004880:	f00d ff16 	bl	80126b0 <_txe_mutex_get>
	    ret = BSP_ReadAccelXYZ(&AccelX, &AccelY, &AccelZ);
 8004884:	f107 0218 	add.w	r2, r7, #24
 8004888:	f107 011c 	add.w	r1, r7, #28
 800488c:	f107 0320 	add.w	r3, r7, #32
 8004890:	4618      	mov	r0, r3
 8004892:	f7fc ffc1 	bl	8001818 <BSP_ReadAccelXYZ>
 8004896:	6278      	str	r0, [r7, #36]	; 0x24
	    if(ret == ISM330DHCX_DataReady)
 8004898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800489a:	2b00      	cmp	r3, #0
 800489c:	d108      	bne.n	80048b0 <ReadMotionThread+0x68>
	    {
		    accelx = AccelX;
 800489e:	6a3b      	ldr	r3, [r7, #32]
 80048a0:	4a13      	ldr	r2, [pc, #76]	; (80048f0 <ReadMotionThread+0xa8>)
 80048a2:	6013      	str	r3, [r2, #0]
		    accely = AccelY;
 80048a4:	69fb      	ldr	r3, [r7, #28]
 80048a6:	4a13      	ldr	r2, [pc, #76]	; (80048f4 <ReadMotionThread+0xac>)
 80048a8:	6013      	str	r3, [r2, #0]
		    accelz = AccelZ;
 80048aa:	69bb      	ldr	r3, [r7, #24]
 80048ac:	4a12      	ldr	r2, [pc, #72]	; (80048f8 <ReadMotionThread+0xb0>)
 80048ae:	6013      	str	r3, [r2, #0]
	    }
	    ret = BSP_ReadGyroXYZ(&GyroX, &GyroY, &GyroZ);
 80048b0:	f107 020c 	add.w	r2, r7, #12
 80048b4:	f107 0110 	add.w	r1, r7, #16
 80048b8:	f107 0314 	add.w	r3, r7, #20
 80048bc:	4618      	mov	r0, r3
 80048be:	f7fc ffc7 	bl	8001850 <BSP_ReadGyroXYZ>
 80048c2:	6278      	str	r0, [r7, #36]	; 0x24
	    if(ret == ISM330DHCX_DataReady)
 80048c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d108      	bne.n	80048dc <ReadMotionThread+0x94>
	    {
		    gyrox = GyroX;
 80048ca:	697b      	ldr	r3, [r7, #20]
 80048cc:	4a0b      	ldr	r2, [pc, #44]	; (80048fc <ReadMotionThread+0xb4>)
 80048ce:	6013      	str	r3, [r2, #0]
		    gyroy = GyroY;
 80048d0:	693b      	ldr	r3, [r7, #16]
 80048d2:	4a0b      	ldr	r2, [pc, #44]	; (8004900 <ReadMotionThread+0xb8>)
 80048d4:	6013      	str	r3, [r2, #0]
		    gyroz = GyroZ;
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	4a0a      	ldr	r2, [pc, #40]	; (8004904 <ReadMotionThread+0xbc>)
 80048da:	6013      	str	r3, [r2, #0]
	    }
	    tx_mutex_put(&MutexI2C2);
 80048dc:	4803      	ldr	r0, [pc, #12]	; (80048ec <ReadMotionThread+0xa4>)
 80048de:	f00d ff41 	bl	8012764 <_txe_mutex_put>
	    tx_thread_suspend(&Read_MotionThreadPtr);
 80048e2:	4809      	ldr	r0, [pc, #36]	; (8004908 <ReadMotionThread+0xc0>)
 80048e4:	f00e f888 	bl	80129f8 <_txe_thread_suspend>
	    tx_mutex_get(&MutexI2C2,TX_NO_WAIT);
 80048e8:	e7c8      	b.n	800487c <ReadMotionThread+0x34>
 80048ea:	bf00      	nop
 80048ec:	20002b48 	.word	0x20002b48
 80048f0:	200025a4 	.word	0x200025a4
 80048f4:	200025a8 	.word	0x200025a8
 80048f8:	200025ac 	.word	0x200025ac
 80048fc:	200025b0 	.word	0x200025b0
 8004900:	200025b4 	.word	0x200025b4
 8004904:	200025b8 	.word	0x200025b8
 8004908:	200029e8 	.word	0x200029e8

0800490c <TIM7_ResumeMotionThread>:
	}
}


void TIM7_ResumeMotionThread(void)
{
 800490c:	b580      	push	{r7, lr}
 800490e:	af00      	add	r7, sp, #0
	if(Read_MotionThreadPtr.tx_thread_state == TX_SUSPENDED)
 8004910:	4b04      	ldr	r3, [pc, #16]	; (8004924 <TIM7_ResumeMotionThread+0x18>)
 8004912:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004914:	2b03      	cmp	r3, #3
 8004916:	d102      	bne.n	800491e <TIM7_ResumeMotionThread+0x12>
	{
	    tx_thread_resume(&Read_MotionThreadPtr);
 8004918:	4802      	ldr	r0, [pc, #8]	; (8004924 <TIM7_ResumeMotionThread+0x18>)
 800491a:	f00e f84f 	bl	80129bc <_txe_thread_resume>
	}
}
 800491e:	bf00      	nop
 8004920:	bd80      	pop	{r7, pc}
 8004922:	bf00      	nop
 8004924:	200029e8 	.word	0x200029e8

08004928 <MX_CORDIC_Init>:

CORDIC_HandleTypeDef hcordic;

/* CORDIC init function */
void MX_CORDIC_Init(void)
{
 8004928:	b580      	push	{r7, lr}
 800492a:	af00      	add	r7, sp, #0
  /* USER CODE END CORDIC_Init 0 */

  /* USER CODE BEGIN CORDIC_Init 1 */

  /* USER CODE END CORDIC_Init 1 */
  hcordic.Instance = CORDIC;
 800492c:	4b06      	ldr	r3, [pc, #24]	; (8004948 <MX_CORDIC_Init+0x20>)
 800492e:	4a07      	ldr	r2, [pc, #28]	; (800494c <MX_CORDIC_Init+0x24>)
 8004930:	601a      	str	r2, [r3, #0]
  if (HAL_CORDIC_Init(&hcordic) != HAL_OK)
 8004932:	4805      	ldr	r0, [pc, #20]	; (8004948 <MX_CORDIC_Init+0x20>)
 8004934:	f001 fe18 	bl	8006568 <HAL_CORDIC_Init>
 8004938:	4603      	mov	r3, r0
 800493a:	2b00      	cmp	r3, #0
 800493c:	d001      	beq.n	8004942 <MX_CORDIC_Init+0x1a>
  {
    Error_Handler();
 800493e:	f001 f849 	bl	80059d4 <Error_Handler>
  }
  /* USER CODE BEGIN CORDIC_Init 2 */

  /* USER CODE END CORDIC_Init 2 */

}
 8004942:	bf00      	nop
 8004944:	bd80      	pop	{r7, pc}
 8004946:	bf00      	nop
 8004948:	20002ba0 	.word	0x20002ba0
 800494c:	40021000 	.word	0x40021000

08004950 <HAL_CORDIC_MspInit>:

void HAL_CORDIC_MspInit(CORDIC_HandleTypeDef* cordicHandle)
{
 8004950:	b480      	push	{r7}
 8004952:	b085      	sub	sp, #20
 8004954:	af00      	add	r7, sp, #0
 8004956:	6078      	str	r0, [r7, #4]

  if(cordicHandle->Instance==CORDIC)
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	4a0b      	ldr	r2, [pc, #44]	; (800498c <HAL_CORDIC_MspInit+0x3c>)
 800495e:	4293      	cmp	r3, r2
 8004960:	d10e      	bne.n	8004980 <HAL_CORDIC_MspInit+0x30>
  {
  /* USER CODE BEGIN CORDIC_MspInit 0 */

  /* USER CODE END CORDIC_MspInit 0 */
    /* CORDIC clock enable */
    __HAL_RCC_CORDIC_CLK_ENABLE();
 8004962:	4b0b      	ldr	r3, [pc, #44]	; (8004990 <HAL_CORDIC_MspInit+0x40>)
 8004964:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004968:	4a09      	ldr	r2, [pc, #36]	; (8004990 <HAL_CORDIC_MspInit+0x40>)
 800496a:	f043 0302 	orr.w	r3, r3, #2
 800496e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8004972:	4b07      	ldr	r3, [pc, #28]	; (8004990 <HAL_CORDIC_MspInit+0x40>)
 8004974:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004978:	f003 0302 	and.w	r3, r3, #2
 800497c:	60fb      	str	r3, [r7, #12]
 800497e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CORDIC_MspInit 1 */

  /* USER CODE END CORDIC_MspInit 1 */
  }
}
 8004980:	bf00      	nop
 8004982:	3714      	adds	r7, #20
 8004984:	46bd      	mov	sp, r7
 8004986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498a:	4770      	bx	lr
 800498c:	40021000 	.word	0x40021000
 8004990:	46020c00 	.word	0x46020c00

08004994 <MX_DCACHE1_Init>:

DCACHE_HandleTypeDef hdcache1;

/* DCACHE1 init function */
void MX_DCACHE1_Init(void)
{
 8004994:	b580      	push	{r7, lr}
 8004996:	af00      	add	r7, sp, #0
  /* USER CODE END DCACHE1_Init 0 */

  /* USER CODE BEGIN DCACHE1_Init 1 */

  /* USER CODE END DCACHE1_Init 1 */
  hdcache1.Instance = DCACHE1;
 8004998:	4b07      	ldr	r3, [pc, #28]	; (80049b8 <MX_DCACHE1_Init+0x24>)
 800499a:	4a08      	ldr	r2, [pc, #32]	; (80049bc <MX_DCACHE1_Init+0x28>)
 800499c:	601a      	str	r2, [r3, #0]
  hdcache1.Init.ReadBurstType = DCACHE_READ_BURST_WRAP;
 800499e:	4b06      	ldr	r3, [pc, #24]	; (80049b8 <MX_DCACHE1_Init+0x24>)
 80049a0:	2200      	movs	r2, #0
 80049a2:	605a      	str	r2, [r3, #4]
  if (HAL_DCACHE_Init(&hdcache1) != HAL_OK)
 80049a4:	4804      	ldr	r0, [pc, #16]	; (80049b8 <MX_DCACHE1_Init+0x24>)
 80049a6:	f001 fef1 	bl	800678c <HAL_DCACHE_Init>
 80049aa:	4603      	mov	r3, r0
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d001      	beq.n	80049b4 <MX_DCACHE1_Init+0x20>
  {
    Error_Handler();
 80049b0:	f001 f810 	bl	80059d4 <Error_Handler>
  }
  /* USER CODE BEGIN DCACHE1_Init 2 */

  /* USER CODE END DCACHE1_Init 2 */

}
 80049b4:	bf00      	nop
 80049b6:	bd80      	pop	{r7, pc}
 80049b8:	20002bc8 	.word	0x20002bc8
 80049bc:	40031400 	.word	0x40031400

080049c0 <MX_DCMI_Init>:

DCMI_HandleTypeDef hdcmi;

/* DCMI init function */
void MX_DCMI_Init(void)
{
 80049c0:	b580      	push	{r7, lr}
 80049c2:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */

  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 80049c4:	4b16      	ldr	r3, [pc, #88]	; (8004a20 <MX_DCMI_Init+0x60>)
 80049c6:	4a17      	ldr	r2, [pc, #92]	; (8004a24 <MX_DCMI_Init+0x64>)
 80049c8:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 80049ca:	4b15      	ldr	r3, [pc, #84]	; (8004a20 <MX_DCMI_Init+0x60>)
 80049cc:	2200      	movs	r2, #0
 80049ce:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_RISING;
 80049d0:	4b13      	ldr	r3, [pc, #76]	; (8004a20 <MX_DCMI_Init+0x60>)
 80049d2:	2220      	movs	r2, #32
 80049d4:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_HIGH;
 80049d6:	4b12      	ldr	r3, [pc, #72]	; (8004a20 <MX_DCMI_Init+0x60>)
 80049d8:	2280      	movs	r2, #128	; 0x80
 80049da:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_HIGH;
 80049dc:	4b10      	ldr	r3, [pc, #64]	; (8004a20 <MX_DCMI_Init+0x60>)
 80049de:	2240      	movs	r2, #64	; 0x40
 80049e0:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 80049e2:	4b0f      	ldr	r3, [pc, #60]	; (8004a20 <MX_DCMI_Init+0x60>)
 80049e4:	2200      	movs	r2, #0
 80049e6:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 80049e8:	4b0d      	ldr	r3, [pc, #52]	; (8004a20 <MX_DCMI_Init+0x60>)
 80049ea:	2200      	movs	r2, #0
 80049ec:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 80049ee:	4b0c      	ldr	r3, [pc, #48]	; (8004a20 <MX_DCMI_Init+0x60>)
 80049f0:	2200      	movs	r2, #0
 80049f2:	621a      	str	r2, [r3, #32]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 80049f4:	4b0a      	ldr	r3, [pc, #40]	; (8004a20 <MX_DCMI_Init+0x60>)
 80049f6:	2200      	movs	r2, #0
 80049f8:	625a      	str	r2, [r3, #36]	; 0x24
  hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 80049fa:	4b09      	ldr	r3, [pc, #36]	; (8004a20 <MX_DCMI_Init+0x60>)
 80049fc:	2200      	movs	r2, #0
 80049fe:	629a      	str	r2, [r3, #40]	; 0x28
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 8004a00:	4b07      	ldr	r3, [pc, #28]	; (8004a20 <MX_DCMI_Init+0x60>)
 8004a02:	2200      	movs	r2, #0
 8004a04:	62da      	str	r2, [r3, #44]	; 0x2c
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 8004a06:	4b06      	ldr	r3, [pc, #24]	; (8004a20 <MX_DCMI_Init+0x60>)
 8004a08:	2200      	movs	r2, #0
 8004a0a:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 8004a0c:	4804      	ldr	r0, [pc, #16]	; (8004a20 <MX_DCMI_Init+0x60>)
 8004a0e:	f001 ff73 	bl	80068f8 <HAL_DCMI_Init>
 8004a12:	4603      	mov	r3, r0
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d001      	beq.n	8004a1c <MX_DCMI_Init+0x5c>
  {
    Error_Handler();
 8004a18:	f000 ffdc 	bl	80059d4 <Error_Handler>
  }
  /* USER CODE BEGIN DCMI_Init 2 */

  /* USER CODE END DCMI_Init 2 */

}
 8004a1c:	bf00      	nop
 8004a1e:	bd80      	pop	{r7, pc}
 8004a20:	20002bf4 	.word	0x20002bf4
 8004a24:	4202c000 	.word	0x4202c000

08004a28 <HAL_DCMI_MspInit>:

void HAL_DCMI_MspInit(DCMI_HandleTypeDef* dcmiHandle)
{
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	b08e      	sub	sp, #56	; 0x38
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004a30:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004a34:	2200      	movs	r2, #0
 8004a36:	601a      	str	r2, [r3, #0]
 8004a38:	605a      	str	r2, [r3, #4]
 8004a3a:	609a      	str	r2, [r3, #8]
 8004a3c:	60da      	str	r2, [r3, #12]
 8004a3e:	611a      	str	r2, [r3, #16]
  if(dcmiHandle->Instance==DCMI)
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	4a6d      	ldr	r2, [pc, #436]	; (8004bfc <HAL_DCMI_MspInit+0x1d4>)
 8004a46:	4293      	cmp	r3, r2
 8004a48:	f040 80d3 	bne.w	8004bf2 <HAL_DCMI_MspInit+0x1ca>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */

  /* USER CODE END DCMI_MspInit 0 */
    /* DCMI clock enable */
    __HAL_RCC_DCMI_PSSI_CLK_ENABLE();
 8004a4c:	4b6c      	ldr	r3, [pc, #432]	; (8004c00 <HAL_DCMI_MspInit+0x1d8>)
 8004a4e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004a52:	4a6b      	ldr	r2, [pc, #428]	; (8004c00 <HAL_DCMI_MspInit+0x1d8>)
 8004a54:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004a58:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004a5c:	4b68      	ldr	r3, [pc, #416]	; (8004c00 <HAL_DCMI_MspInit+0x1d8>)
 8004a5e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004a62:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004a66:	623b      	str	r3, [r7, #32]
 8004a68:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOI_CLK_ENABLE();
 8004a6a:	4b65      	ldr	r3, [pc, #404]	; (8004c00 <HAL_DCMI_MspInit+0x1d8>)
 8004a6c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004a70:	4a63      	ldr	r2, [pc, #396]	; (8004c00 <HAL_DCMI_MspInit+0x1d8>)
 8004a72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a76:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004a7a:	4b61      	ldr	r3, [pc, #388]	; (8004c00 <HAL_DCMI_MspInit+0x1d8>)
 8004a7c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004a80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a84:	61fb      	str	r3, [r7, #28]
 8004a86:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8004a88:	4b5d      	ldr	r3, [pc, #372]	; (8004c00 <HAL_DCMI_MspInit+0x1d8>)
 8004a8a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004a8e:	4a5c      	ldr	r2, [pc, #368]	; (8004c00 <HAL_DCMI_MspInit+0x1d8>)
 8004a90:	f043 0310 	orr.w	r3, r3, #16
 8004a94:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004a98:	4b59      	ldr	r3, [pc, #356]	; (8004c00 <HAL_DCMI_MspInit+0x1d8>)
 8004a9a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004a9e:	f003 0310 	and.w	r3, r3, #16
 8004aa2:	61bb      	str	r3, [r7, #24]
 8004aa4:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8004aa6:	4b56      	ldr	r3, [pc, #344]	; (8004c00 <HAL_DCMI_MspInit+0x1d8>)
 8004aa8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004aac:	4a54      	ldr	r2, [pc, #336]	; (8004c00 <HAL_DCMI_MspInit+0x1d8>)
 8004aae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ab2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004ab6:	4b52      	ldr	r3, [pc, #328]	; (8004c00 <HAL_DCMI_MspInit+0x1d8>)
 8004ab8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004abc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ac0:	617b      	str	r3, [r7, #20]
 8004ac2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004ac4:	4b4e      	ldr	r3, [pc, #312]	; (8004c00 <HAL_DCMI_MspInit+0x1d8>)
 8004ac6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004aca:	4a4d      	ldr	r2, [pc, #308]	; (8004c00 <HAL_DCMI_MspInit+0x1d8>)
 8004acc:	f043 0302 	orr.w	r3, r3, #2
 8004ad0:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004ad4:	4b4a      	ldr	r3, [pc, #296]	; (8004c00 <HAL_DCMI_MspInit+0x1d8>)
 8004ad6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004ada:	f003 0302 	and.w	r3, r3, #2
 8004ade:	613b      	str	r3, [r7, #16]
 8004ae0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004ae2:	4b47      	ldr	r3, [pc, #284]	; (8004c00 <HAL_DCMI_MspInit+0x1d8>)
 8004ae4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004ae8:	4a45      	ldr	r2, [pc, #276]	; (8004c00 <HAL_DCMI_MspInit+0x1d8>)
 8004aea:	f043 0304 	orr.w	r3, r3, #4
 8004aee:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004af2:	4b43      	ldr	r3, [pc, #268]	; (8004c00 <HAL_DCMI_MspInit+0x1d8>)
 8004af4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004af8:	f003 0304 	and.w	r3, r3, #4
 8004afc:	60fb      	str	r3, [r7, #12]
 8004afe:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004b00:	4b3f      	ldr	r3, [pc, #252]	; (8004c00 <HAL_DCMI_MspInit+0x1d8>)
 8004b02:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004b06:	4a3e      	ldr	r2, [pc, #248]	; (8004c00 <HAL_DCMI_MspInit+0x1d8>)
 8004b08:	f043 0301 	orr.w	r3, r3, #1
 8004b0c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004b10:	4b3b      	ldr	r3, [pc, #236]	; (8004c00 <HAL_DCMI_MspInit+0x1d8>)
 8004b12:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004b16:	f003 0301 	and.w	r3, r3, #1
 8004b1a:	60bb      	str	r3, [r7, #8]
 8004b1c:	68bb      	ldr	r3, [r7, #8]
    PC8     ------> DCMI_D2
    PC7     ------> DCMI_D1
    PC6     ------> DCMI_D0
    PA6     ------> DCMI_PIXCLK
    */
    GPIO_InitStruct.Pin = CAM_D6_Pin|CAM_D5_Pin|CAM_D7_Pin;
 8004b1e:	23d0      	movs	r3, #208	; 0xd0
 8004b20:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b22:	2302      	movs	r3, #2
 8004b24:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b26:	2300      	movs	r3, #0
 8004b28:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004b2a:	2303      	movs	r3, #3
 8004b2c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_DCMI;
 8004b2e:	230a      	movs	r3, #10
 8004b30:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8004b32:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004b36:	4619      	mov	r1, r3
 8004b38:	4832      	ldr	r0, [pc, #200]	; (8004c04 <HAL_DCMI_MspInit+0x1dc>)
 8004b3a:	f003 fc61 	bl	8008400 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CAM_D3_Pin;
 8004b3e:	2302      	movs	r3, #2
 8004b40:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b42:	2302      	movs	r3, #2
 8004b44:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b46:	2300      	movs	r3, #0
 8004b48:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004b4a:	2303      	movs	r3, #3
 8004b4c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_DCMI;
 8004b4e:	230a      	movs	r3, #10
 8004b50:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(CAM_D3_GPIO_Port, &GPIO_InitStruct);
 8004b52:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004b56:	4619      	mov	r1, r3
 8004b58:	482b      	ldr	r0, [pc, #172]	; (8004c08 <HAL_DCMI_MspInit+0x1e0>)
 8004b5a:	f003 fc51 	bl	8008400 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CAM_D4_Pin|CAM_HSYNC_Pin;
 8004b5e:	f44f 4382 	mov.w	r3, #16640	; 0x4100
 8004b62:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b64:	2302      	movs	r3, #2
 8004b66:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b68:	2300      	movs	r3, #0
 8004b6a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004b6c:	2303      	movs	r3, #3
 8004b6e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_DCMI;
 8004b70:	230a      	movs	r3, #10
 8004b72:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8004b74:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004b78:	4619      	mov	r1, r3
 8004b7a:	4824      	ldr	r0, [pc, #144]	; (8004c0c <HAL_DCMI_MspInit+0x1e4>)
 8004b7c:	f003 fc40 	bl	8008400 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CAM_VSYNC_Pin;
 8004b80:	2380      	movs	r3, #128	; 0x80
 8004b82:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b84:	2302      	movs	r3, #2
 8004b86:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b88:	2300      	movs	r3, #0
 8004b8a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004b8c:	2303      	movs	r3, #3
 8004b8e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_DCMI;
 8004b90:	230a      	movs	r3, #10
 8004b92:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(CAM_VSYNC_GPIO_Port, &GPIO_InitStruct);
 8004b94:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004b98:	4619      	mov	r1, r3
 8004b9a:	481d      	ldr	r0, [pc, #116]	; (8004c10 <HAL_DCMI_MspInit+0x1e8>)
 8004b9c:	f003 fc30 	bl	8008400 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CAM_D2_Pin|CAM_D1_Pin|CAM_D0_Pin;
 8004ba0:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8004ba4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ba6:	2302      	movs	r3, #2
 8004ba8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004baa:	2300      	movs	r3, #0
 8004bac:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004bae:	2303      	movs	r3, #3
 8004bb0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_DCMI;
 8004bb2:	230a      	movs	r3, #10
 8004bb4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004bb6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004bba:	4619      	mov	r1, r3
 8004bbc:	4815      	ldr	r0, [pc, #84]	; (8004c14 <HAL_DCMI_MspInit+0x1ec>)
 8004bbe:	f003 fc1f 	bl	8008400 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CAM_PIXCLK_Pin;
 8004bc2:	2340      	movs	r3, #64	; 0x40
 8004bc4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004bc6:	2302      	movs	r3, #2
 8004bc8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004bca:	2300      	movs	r3, #0
 8004bcc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004bce:	2303      	movs	r3, #3
 8004bd0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_DCMI;
 8004bd2:	2304      	movs	r3, #4
 8004bd4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(CAM_PIXCLK_GPIO_Port, &GPIO_InitStruct);
 8004bd6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004bda:	4619      	mov	r1, r3
 8004bdc:	480e      	ldr	r0, [pc, #56]	; (8004c18 <HAL_DCMI_MspInit+0x1f0>)
 8004bde:	f003 fc0f 	bl	8008400 <HAL_GPIO_Init>

    /* DCMI interrupt Init */
    HAL_NVIC_SetPriority(DCMI_PSSI_IRQn, 15, 0);
 8004be2:	2200      	movs	r2, #0
 8004be4:	210f      	movs	r1, #15
 8004be6:	2077      	movs	r0, #119	; 0x77
 8004be8:	f001 fda8 	bl	800673c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DCMI_PSSI_IRQn);
 8004bec:	2077      	movs	r0, #119	; 0x77
 8004bee:	f001 fdbf 	bl	8006770 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DCMI_MspInit 1 */

  /* USER CODE END DCMI_MspInit 1 */
  }
}
 8004bf2:	bf00      	nop
 8004bf4:	3738      	adds	r7, #56	; 0x38
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	bd80      	pop	{r7, pc}
 8004bfa:	bf00      	nop
 8004bfc:	4202c000 	.word	0x4202c000
 8004c00:	46020c00 	.word	0x46020c00
 8004c04:	42022000 	.word	0x42022000
 8004c08:	42021000 	.word	0x42021000
 8004c0c:	42021c00 	.word	0x42021c00
 8004c10:	42020400 	.word	0x42020400
 8004c14:	42020800 	.word	0x42020800
 8004c18:	42020000 	.word	0x42020000

08004c1c <MX_GPDMA1_Init>:
DMA_HandleTypeDef handle_GPDMA1_Channel12;
DMA_HandleTypeDef handle_GPDMA1_Channel12;

/* GPDMA1 init function */
void MX_GPDMA1_Init(void)
{
 8004c1c:	b580      	push	{r7, lr}
 8004c1e:	b082      	sub	sp, #8
 8004c20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Init 0 */

  /* USER CODE END GPDMA1_Init 0 */

  /* Peripheral clock enable */
  __HAL_RCC_GPDMA1_CLK_ENABLE();
 8004c22:	4b26      	ldr	r3, [pc, #152]	; (8004cbc <MX_GPDMA1_Init+0xa0>)
 8004c24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c28:	4a24      	ldr	r2, [pc, #144]	; (8004cbc <MX_GPDMA1_Init+0xa0>)
 8004c2a:	f043 0301 	orr.w	r3, r3, #1
 8004c2e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8004c32:	4b22      	ldr	r3, [pc, #136]	; (8004cbc <MX_GPDMA1_Init+0xa0>)
 8004c34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c38:	f003 0301 	and.w	r3, r3, #1
 8004c3c:	607b      	str	r3, [r7, #4]
 8004c3e:	687b      	ldr	r3, [r7, #4]

  /* GPDMA1 interrupt Init */
    HAL_NVIC_SetPriority(GPDMA1_Channel12_IRQn, 15, 0);
 8004c40:	2200      	movs	r2, #0
 8004c42:	210f      	movs	r1, #15
 8004c44:	2054      	movs	r0, #84	; 0x54
 8004c46:	f001 fd79 	bl	800673c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel12_IRQn);
 8004c4a:	2054      	movs	r0, #84	; 0x54
 8004c4c:	f001 fd90 	bl	8006770 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN GPDMA1_Init 1 */

  /* USER CODE END GPDMA1_Init 1 */
  handle_GPDMA1_Channel12.Instance = GPDMA1_Channel12;
 8004c50:	4b1b      	ldr	r3, [pc, #108]	; (8004cc0 <MX_GPDMA1_Init+0xa4>)
 8004c52:	4a1c      	ldr	r2, [pc, #112]	; (8004cc4 <MX_GPDMA1_Init+0xa8>)
 8004c54:	601a      	str	r2, [r3, #0]
  handle_GPDMA1_Channel12.InitLinkedList.Priority = DMA_LOW_PRIORITY_LOW_WEIGHT;
 8004c56:	4b1a      	ldr	r3, [pc, #104]	; (8004cc0 <MX_GPDMA1_Init+0xa4>)
 8004c58:	2200      	movs	r2, #0
 8004c5a:	639a      	str	r2, [r3, #56]	; 0x38
  handle_GPDMA1_Channel12.InitLinkedList.LinkStepMode = DMA_LSM_FULL_EXECUTION;
 8004c5c:	4b18      	ldr	r3, [pc, #96]	; (8004cc0 <MX_GPDMA1_Init+0xa4>)
 8004c5e:	2200      	movs	r2, #0
 8004c60:	63da      	str	r2, [r3, #60]	; 0x3c
  handle_GPDMA1_Channel12.InitLinkedList.LinkAllocatedPort = DMA_LINK_ALLOCATED_PORT1;
 8004c62:	4b17      	ldr	r3, [pc, #92]	; (8004cc0 <MX_GPDMA1_Init+0xa4>)
 8004c64:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004c68:	641a      	str	r2, [r3, #64]	; 0x40
  handle_GPDMA1_Channel12.InitLinkedList.TransferEventMode = DMA_TCEM_LAST_LL_ITEM_TRANSFER;
 8004c6a:	4b15      	ldr	r3, [pc, #84]	; (8004cc0 <MX_GPDMA1_Init+0xa4>)
 8004c6c:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
 8004c70:	645a      	str	r2, [r3, #68]	; 0x44
  handle_GPDMA1_Channel12.InitLinkedList.LinkedListMode = DMA_LINKEDLIST_CIRCULAR;
 8004c72:	4b13      	ldr	r3, [pc, #76]	; (8004cc0 <MX_GPDMA1_Init+0xa4>)
 8004c74:	2281      	movs	r2, #129	; 0x81
 8004c76:	649a      	str	r2, [r3, #72]	; 0x48
  if (HAL_DMAEx_List_Init(&handle_GPDMA1_Channel12) != HAL_OK)
 8004c78:	4811      	ldr	r0, [pc, #68]	; (8004cc0 <MX_GPDMA1_Init+0xa4>)
 8004c7a:	f002 fc87 	bl	800758c <HAL_DMAEx_List_Init>
 8004c7e:	4603      	mov	r3, r0
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d001      	beq.n	8004c88 <MX_GPDMA1_Init+0x6c>
  {
    Error_Handler();
 8004c84:	f000 fea6 	bl	80059d4 <Error_Handler>
  }
  if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel12, DMA_CHANNEL_PRIV) != HAL_OK)
 8004c88:	2111      	movs	r1, #17
 8004c8a:	480d      	ldr	r0, [pc, #52]	; (8004cc0 <MX_GPDMA1_Init+0xa4>)
 8004c8c:	f002 fc1c 	bl	80074c8 <HAL_DMA_ConfigChannelAttributes>
 8004c90:	4603      	mov	r3, r0
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d001      	beq.n	8004c9a <MX_GPDMA1_Init+0x7e>
  {
    Error_Handler();
 8004c96:	f000 fe9d 	bl	80059d4 <Error_Handler>
  }
  /* USER CODE BEGIN GPDMA1_Init 2 */
  MX_ProjectDMAQueue_Config();
 8004c9a:	f000 fd49 	bl	8005730 <MX_ProjectDMAQueue_Config>
  HAL_DMAEx_List_LinkQ(&handle_GPDMA1_Channel12, &ProjectDMAQueue);
 8004c9e:	490a      	ldr	r1, [pc, #40]	; (8004cc8 <MX_GPDMA1_Init+0xac>)
 8004ca0:	4807      	ldr	r0, [pc, #28]	; (8004cc0 <MX_GPDMA1_Init+0xa4>)
 8004ca2:	f002 ff31 	bl	8007b08 <HAL_DMAEx_List_LinkQ>
  //HAL_DMAEx_List_Start(&handle_GPDMA1_Channel12);
  __HAL_LINKDMA(&hdcmi, DMA_Handle, handle_GPDMA1_Channel12);
 8004ca6:	4b09      	ldr	r3, [pc, #36]	; (8004ccc <MX_GPDMA1_Init+0xb0>)
 8004ca8:	4a05      	ldr	r2, [pc, #20]	; (8004cc0 <MX_GPDMA1_Init+0xa4>)
 8004caa:	649a      	str	r2, [r3, #72]	; 0x48
 8004cac:	4b04      	ldr	r3, [pc, #16]	; (8004cc0 <MX_GPDMA1_Init+0xa4>)
 8004cae:	4a07      	ldr	r2, [pc, #28]	; (8004ccc <MX_GPDMA1_Init+0xb0>)
 8004cb0:	65da      	str	r2, [r3, #92]	; 0x5c
  /* USER CODE END GPDMA1_Init 2 */

}
 8004cb2:	bf00      	nop
 8004cb4:	3708      	adds	r7, #8
 8004cb6:	46bd      	mov	sp, r7
 8004cb8:	bd80      	pop	{r7, pc}
 8004cba:	bf00      	nop
 8004cbc:	46020c00 	.word	0x46020c00
 8004cc0:	20002c44 	.word	0x20002c44
 8004cc4:	40020650 	.word	0x40020650
 8004cc8:	20002d78 	.word	0x20002d78
 8004ccc:	20002bf4 	.word	0x20002bf4

08004cd0 <MX_GPIO_Init>:
     PB12   ------> SPI2_NSS
     PB15   ------> UCPD1_CC2
     PB1   ------> MDF1_SDI0
*/
void MX_GPIO_Init(void)
{
 8004cd0:	b580      	push	{r7, lr}
 8004cd2:	b08e      	sub	sp, #56	; 0x38
 8004cd4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004cd6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004cda:	2200      	movs	r2, #0
 8004cdc:	601a      	str	r2, [r3, #0]
 8004cde:	605a      	str	r2, [r3, #4]
 8004ce0:	609a      	str	r2, [r3, #8]
 8004ce2:	60da      	str	r2, [r3, #12]
 8004ce4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8004ce6:	4bbf      	ldr	r3, [pc, #764]	; (8004fe4 <MX_GPIO_Init+0x314>)
 8004ce8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004cec:	4abd      	ldr	r2, [pc, #756]	; (8004fe4 <MX_GPIO_Init+0x314>)
 8004cee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004cf2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004cf6:	4bbb      	ldr	r3, [pc, #748]	; (8004fe4 <MX_GPIO_Init+0x314>)
 8004cf8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004cfc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d00:	623b      	str	r3, [r7, #32]
 8004d02:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8004d04:	4bb7      	ldr	r3, [pc, #732]	; (8004fe4 <MX_GPIO_Init+0x314>)
 8004d06:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004d0a:	4ab6      	ldr	r2, [pc, #728]	; (8004fe4 <MX_GPIO_Init+0x314>)
 8004d0c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004d10:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004d14:	4bb3      	ldr	r3, [pc, #716]	; (8004fe4 <MX_GPIO_Init+0x314>)
 8004d16:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004d1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d1e:	61fb      	str	r3, [r7, #28]
 8004d20:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004d22:	4bb0      	ldr	r3, [pc, #704]	; (8004fe4 <MX_GPIO_Init+0x314>)
 8004d24:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004d28:	4aae      	ldr	r2, [pc, #696]	; (8004fe4 <MX_GPIO_Init+0x314>)
 8004d2a:	f043 0304 	orr.w	r3, r3, #4
 8004d2e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004d32:	4bac      	ldr	r3, [pc, #688]	; (8004fe4 <MX_GPIO_Init+0x314>)
 8004d34:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004d38:	f003 0304 	and.w	r3, r3, #4
 8004d3c:	61bb      	str	r3, [r7, #24]
 8004d3e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004d40:	4ba8      	ldr	r3, [pc, #672]	; (8004fe4 <MX_GPIO_Init+0x314>)
 8004d42:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004d46:	4aa7      	ldr	r2, [pc, #668]	; (8004fe4 <MX_GPIO_Init+0x314>)
 8004d48:	f043 0301 	orr.w	r3, r3, #1
 8004d4c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004d50:	4ba4      	ldr	r3, [pc, #656]	; (8004fe4 <MX_GPIO_Init+0x314>)
 8004d52:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004d56:	f003 0301 	and.w	r3, r3, #1
 8004d5a:	617b      	str	r3, [r7, #20]
 8004d5c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8004d5e:	4ba1      	ldr	r3, [pc, #644]	; (8004fe4 <MX_GPIO_Init+0x314>)
 8004d60:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004d64:	4a9f      	ldr	r2, [pc, #636]	; (8004fe4 <MX_GPIO_Init+0x314>)
 8004d66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d6a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004d6e:	4b9d      	ldr	r3, [pc, #628]	; (8004fe4 <MX_GPIO_Init+0x314>)
 8004d70:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004d74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d78:	613b      	str	r3, [r7, #16]
 8004d7a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8004d7c:	4b99      	ldr	r3, [pc, #612]	; (8004fe4 <MX_GPIO_Init+0x314>)
 8004d7e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004d82:	4a98      	ldr	r2, [pc, #608]	; (8004fe4 <MX_GPIO_Init+0x314>)
 8004d84:	f043 0310 	orr.w	r3, r3, #16
 8004d88:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004d8c:	4b95      	ldr	r3, [pc, #596]	; (8004fe4 <MX_GPIO_Init+0x314>)
 8004d8e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004d92:	f003 0310 	and.w	r3, r3, #16
 8004d96:	60fb      	str	r3, [r7, #12]
 8004d98:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004d9a:	4b92      	ldr	r3, [pc, #584]	; (8004fe4 <MX_GPIO_Init+0x314>)
 8004d9c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004da0:	4a90      	ldr	r2, [pc, #576]	; (8004fe4 <MX_GPIO_Init+0x314>)
 8004da2:	f043 0302 	orr.w	r3, r3, #2
 8004da6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004daa:	4b8e      	ldr	r3, [pc, #568]	; (8004fe4 <MX_GPIO_Init+0x314>)
 8004dac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004db0:	f003 0302 	and.w	r3, r3, #2
 8004db4:	60bb      	str	r3, [r7, #8]
 8004db6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004db8:	4b8a      	ldr	r3, [pc, #552]	; (8004fe4 <MX_GPIO_Init+0x314>)
 8004dba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004dbe:	4a89      	ldr	r2, [pc, #548]	; (8004fe4 <MX_GPIO_Init+0x314>)
 8004dc0:	f043 0308 	orr.w	r3, r3, #8
 8004dc4:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004dc8:	4b86      	ldr	r3, [pc, #536]	; (8004fe4 <MX_GPIO_Init+0x314>)
 8004dca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004dce:	f003 0308 	and.w	r3, r3, #8
 8004dd2:	607b      	str	r3, [r7, #4]
 8004dd4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8004dd6:	4b83      	ldr	r3, [pc, #524]	; (8004fe4 <MX_GPIO_Init+0x314>)
 8004dd8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004ddc:	4a81      	ldr	r2, [pc, #516]	; (8004fe4 <MX_GPIO_Init+0x314>)
 8004dde:	f043 0320 	orr.w	r3, r3, #32
 8004de2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004de6:	4b7f      	ldr	r3, [pc, #508]	; (8004fe4 <MX_GPIO_Init+0x314>)
 8004de8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004dec:	f003 0320 	and.w	r3, r3, #32
 8004df0:	603b      	str	r3, [r7, #0]
 8004df2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(UCPD_PWR_GPIO_Port, UCPD_PWR_Pin, GPIO_PIN_RESET);
 8004df4:	2200      	movs	r2, #0
 8004df6:	2120      	movs	r1, #32
 8004df8:	487b      	ldr	r0, [pc, #492]	; (8004fe8 <MX_GPIO_Init+0x318>)
 8004dfa:	f003 fdcf 	bl	800899c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CAM_XSDN_GPIO_Port, CAM_XSDN_Pin, GPIO_PIN_RESET);
 8004dfe:	2200      	movs	r2, #0
 8004e00:	2108      	movs	r1, #8
 8004e02:	487a      	ldr	r0, [pc, #488]	; (8004fec <MX_GPIO_Init+0x31c>)
 8004e04:	f003 fdca 	bl	800899c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CAM_RSTI_GPIO_Port, CAM_RSTI_Pin, GPIO_PIN_SET);
 8004e08:	2201      	movs	r2, #1
 8004e0a:	2104      	movs	r1, #4
 8004e0c:	4877      	ldr	r0, [pc, #476]	; (8004fec <MX_GPIO_Init+0x31c>)
 8004e0e:	f003 fdc5 	bl	800899c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, LED_RED_Pin|LED_GREEN_Pin|Mems_VL53_xshut_Pin, GPIO_PIN_RESET);
 8004e12:	2200      	movs	r2, #0
 8004e14:	21c2      	movs	r1, #194	; 0xc2
 8004e16:	4876      	ldr	r0, [pc, #472]	; (8004ff0 <MX_GPIO_Init+0x320>)
 8004e18:	f003 fdc0 	bl	800899c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(WRLS_WKUP_B_GPIO_Port, WRLS_WKUP_B_Pin, GPIO_PIN_RESET);
 8004e1c:	2200      	movs	r2, #0
 8004e1e:	2140      	movs	r1, #64	; 0x40
 8004e20:	4874      	ldr	r0, [pc, #464]	; (8004ff4 <MX_GPIO_Init+0x324>)
 8004e22:	f003 fdbb 	bl	800899c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, Mems_STSAFE_RESET_Pin|WRLS_WKUP_W_Pin, GPIO_PIN_RESET);
 8004e26:	2200      	movs	r2, #0
 8004e28:	f44f 4108 	mov.w	r1, #34816	; 0x8800
 8004e2c:	4872      	ldr	r0, [pc, #456]	; (8004ff8 <MX_GPIO_Init+0x328>)
 8004e2e:	f003 fdb5 	bl	800899c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = WRLS_FLOW_Pin|Mems_VLX_GPIO_Pin|Mems_INT_LPS22HH_Pin;
 8004e32:	f248 0324 	movw	r3, #32804	; 0x8024
 8004e36:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004e38:	2300      	movs	r3, #0
 8004e3a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e3c:	2300      	movs	r3, #0
 8004e3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8004e40:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004e44:	4619      	mov	r1, r3
 8004e46:	486b      	ldr	r0, [pc, #428]	; (8004ff4 <MX_GPIO_Init+0x324>)
 8004e48:	f003 fada 	bl	8008400 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = WRLS_UART4_RX_Pin|WRLS_UART4_TX_Pin;
 8004e4c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8004e50:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e52:	2302      	movs	r3, #2
 8004e54:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e56:	2300      	movs	r3, #0
 8004e58:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004e5a:	2300      	movs	r3, #0
 8004e5c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8004e5e:	2308      	movs	r3, #8
 8004e60:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004e62:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004e66:	4619      	mov	r1, r3
 8004e68:	4864      	ldr	r0, [pc, #400]	; (8004ffc <MX_GPIO_Init+0x32c>)
 8004e6a:	f003 fac9 	bl	8008400 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_UCPD_CC1_Pin;
 8004e6e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004e72:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004e74:	2303      	movs	r3, #3
 8004e76:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e78:	2300      	movs	r3, #0
 8004e7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_UCPD_CC1_GPIO_Port, &GPIO_InitStruct);
 8004e7c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004e80:	4619      	mov	r1, r3
 8004e82:	485f      	ldr	r0, [pc, #380]	; (8005000 <MX_GPIO_Init+0x330>)
 8004e84:	f003 fabc 	bl	8008400 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CAM_PLUG_Pin;
 8004e88:	2302      	movs	r3, #2
 8004e8a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004e8c:	2300      	movs	r3, #0
 8004e8e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004e90:	2301      	movs	r3, #1
 8004e92:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CAM_PLUG_GPIO_Port, &GPIO_InitStruct);
 8004e94:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004e98:	4619      	mov	r1, r3
 8004e9a:	4854      	ldr	r0, [pc, #336]	; (8004fec <MX_GPIO_Init+0x31c>)
 8004e9c:	f003 fab0 	bl	8008400 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OCTOSPI_F_NCS_Pin;
 8004ea0:	2320      	movs	r3, #32
 8004ea2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ea4:	2302      	movs	r3, #2
 8004ea6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ea8:	2300      	movs	r3, #0
 8004eaa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004eac:	2303      	movs	r3, #3
 8004eae:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_OCTOSPI2;
 8004eb0:	2305      	movs	r3, #5
 8004eb2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OCTOSPI_F_NCS_GPIO_Port, &GPIO_InitStruct);
 8004eb4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004eb8:	4619      	mov	r1, r3
 8004eba:	484c      	ldr	r0, [pc, #304]	; (8004fec <MX_GPIO_Init+0x31c>)
 8004ebc:	f003 faa0 	bl	8008400 <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin PHPin PHPin */
  GPIO_InitStruct.Pin = OCTOSPI_F_IO7_Pin|OCTOSPI_F_IO5_Pin|OCTOSPI_F_IO6_Pin|OCTOSPI_F_IO4_Pin;
 8004ec0:	f44f 53f0 	mov.w	r3, #7680	; 0x1e00
 8004ec4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ec6:	2302      	movs	r3, #2
 8004ec8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004eca:	2300      	movs	r3, #0
 8004ecc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004ece:	2303      	movs	r3, #3
 8004ed0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_OCTOSPI2;
 8004ed2:	2305      	movs	r3, #5
 8004ed4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8004ed6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004eda:	4619      	mov	r1, r3
 8004edc:	4844      	ldr	r0, [pc, #272]	; (8004ff0 <MX_GPIO_Init+0x320>)
 8004ede:	f003 fa8f 	bl	8008400 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PH3_BOOT0_Pin;
 8004ee2:	2308      	movs	r3, #8
 8004ee4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004ee6:	2300      	movs	r3, #0
 8004ee8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004eea:	2300      	movs	r3, #0
 8004eec:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PH3_BOOT0_GPIO_Port, &GPIO_InitStruct);
 8004eee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004ef2:	4619      	mov	r1, r3
 8004ef4:	483e      	ldr	r0, [pc, #248]	; (8004ff0 <MX_GPIO_Init+0x320>)
 8004ef6:	f003 fa83 	bl	8008400 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = UCPD_PWR_Pin;
 8004efa:	2320      	movs	r3, #32
 8004efc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004efe:	2301      	movs	r3, #1
 8004f00:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f02:	2300      	movs	r3, #0
 8004f04:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004f06:	2300      	movs	r3, #0
 8004f08:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(UCPD_PWR_GPIO_Port, &GPIO_InitStruct);
 8004f0a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004f0e:	4619      	mov	r1, r3
 8004f10:	4835      	ldr	r0, [pc, #212]	; (8004fe8 <MX_GPIO_Init+0x318>)
 8004f12:	f003 fa75 	bl	8008400 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = WRLS_SPI2_MOSI_Pin|WRLS_SPI2_MISO_Pin|WRLS_SPI2_SCK_Pin;
 8004f16:	231a      	movs	r3, #26
 8004f18:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f1a:	2302      	movs	r3, #2
 8004f1c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f1e:	2300      	movs	r3, #0
 8004f20:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004f22:	2300      	movs	r3, #0
 8004f24:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8004f26:	2305      	movs	r3, #5
 8004f28:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004f2a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004f2e:	4619      	mov	r1, r3
 8004f30:	4834      	ldr	r0, [pc, #208]	; (8005004 <MX_GPIO_Init+0x334>)
 8004f32:	f003 fa65 	bl	8008400 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CAM_XSDN_Pin;
 8004f36:	2308      	movs	r3, #8
 8004f38:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004f3a:	2301      	movs	r3, #1
 8004f3c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8004f3e:	2302      	movs	r3, #2
 8004f40:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004f42:	2300      	movs	r3, #0
 8004f44:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(CAM_XSDN_GPIO_Port, &GPIO_InitStruct);
 8004f46:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004f4a:	4619      	mov	r1, r3
 8004f4c:	4827      	ldr	r0, [pc, #156]	; (8004fec <MX_GPIO_Init+0x31c>)
 8004f4e:	f003 fa57 	bl	8008400 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CAM_RSTI_Pin;
 8004f52:	2304      	movs	r3, #4
 8004f54:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004f56:	2301      	movs	r3, #1
 8004f58:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004f5a:	2301      	movs	r3, #1
 8004f5c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004f5e:	2300      	movs	r3, #0
 8004f60:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(CAM_RSTI_GPIO_Port, &GPIO_InitStruct);
 8004f62:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004f66:	4619      	mov	r1, r3
 8004f68:	4820      	ldr	r0, [pc, #128]	; (8004fec <MX_GPIO_Init+0x31c>)
 8004f6a:	f003 fa49 	bl	8008400 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin PFPin PFPin
                           PFPin PFPin */
  GPIO_InitStruct.Pin = OCTOSPI_F_IO0_Pin|OCTOSPI_F_IO1_Pin|OCTOSPI_F_IO2_Pin|OCTOSPI_F_IO3_Pin
 8004f6e:	f241 031f 	movw	r3, #4127	; 0x101f
 8004f72:	627b      	str	r3, [r7, #36]	; 0x24
                          |OCTOSPI_F_CLK_P_Pin|OCTOSPI_F_DQS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f74:	2302      	movs	r3, #2
 8004f76:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f78:	2300      	movs	r3, #0
 8004f7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004f7c:	2303      	movs	r3, #3
 8004f7e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_OCTOSPI2;
 8004f80:	2305      	movs	r3, #5
 8004f82:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8004f84:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004f88:	4619      	mov	r1, r3
 8004f8a:	481b      	ldr	r0, [pc, #108]	; (8004ff8 <MX_GPIO_Init+0x328>)
 8004f8c:	f003 fa38 	bl	8008400 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Button_Pin;
 8004f90:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004f94:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004f96:	2300      	movs	r3, #0
 8004f98:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f9a:	2300      	movs	r3, #0
 8004f9c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USER_Button_GPIO_Port, &GPIO_InitStruct);
 8004f9e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004fa2:	4619      	mov	r1, r3
 8004fa4:	4815      	ldr	r0, [pc, #84]	; (8004ffc <MX_GPIO_Init+0x32c>)
 8004fa6:	f003 fa2b 	bl	8008400 <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin PHPin */
  GPIO_InitStruct.Pin = LED_RED_Pin|LED_GREEN_Pin|Mems_VL53_xshut_Pin;
 8004faa:	23c2      	movs	r3, #194	; 0xc2
 8004fac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004fae:	2301      	movs	r3, #1
 8004fb0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004fb2:	2300      	movs	r3, #0
 8004fb4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004fb6:	2300      	movs	r3, #0
 8004fb8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8004fba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004fbe:	4619      	mov	r1, r3
 8004fc0:	480b      	ldr	r0, [pc, #44]	; (8004ff0 <MX_GPIO_Init+0x320>)
 8004fc2:	f003 fa1d 	bl	8008400 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = USB_C_P_Pin|USB_C_PA11_Pin;
 8004fc6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8004fca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004fcc:	2302      	movs	r3, #2
 8004fce:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004fd0:	2300      	movs	r3, #0
 8004fd2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004fd4:	2300      	movs	r3, #0
 8004fd6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8004fd8:	230a      	movs	r3, #10
 8004fda:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004fdc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004fe0:	4619      	mov	r1, r3
 8004fe2:	e011      	b.n	8005008 <MX_GPIO_Init+0x338>
 8004fe4:	46020c00 	.word	0x46020c00
 8004fe8:	42020400 	.word	0x42020400
 8004fec:	42022000 	.word	0x42022000
 8004ff0:	42021c00 	.word	0x42021c00
 8004ff4:	42021800 	.word	0x42021800
 8004ff8:	42021400 	.word	0x42021400
 8004ffc:	42020800 	.word	0x42020800
 8005000:	42020000 	.word	0x42020000
 8005004:	42020c00 	.word	0x42020c00
 8005008:	484d      	ldr	r0, [pc, #308]	; (8005140 <MX_GPIO_Init+0x470>)
 800500a:	f003 f9f9 	bl	8008400 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MIC_CCK1_Pin;
 800500e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005012:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005014:	2302      	movs	r3, #2
 8005016:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005018:	2300      	movs	r3, #0
 800501a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800501c:	2300      	movs	r3, #0
 800501e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_MDF1;
 8005020:	2306      	movs	r3, #6
 8005022:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(MIC_CCK1_GPIO_Port, &GPIO_InitStruct);
 8005024:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005028:	4619      	mov	r1, r3
 800502a:	4846      	ldr	r0, [pc, #280]	; (8005144 <MX_GPIO_Init+0x474>)
 800502c:	f003 f9e8 	bl	8008400 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = MIC_SDINx_Pin|MIC_CCK0_Pin;
 8005030:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8005034:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005036:	2302      	movs	r3, #2
 8005038:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800503a:	2300      	movs	r3, #0
 800503c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800503e:	2300      	movs	r3, #0
 8005040:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF3_ADF1;
 8005042:	2303      	movs	r3, #3
 8005044:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005046:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800504a:	4619      	mov	r1, r3
 800504c:	483e      	ldr	r0, [pc, #248]	; (8005148 <MX_GPIO_Init+0x478>)
 800504e:	f003 f9d7 	bl	8008400 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = WRLS_WKUP_B_Pin;
 8005052:	2340      	movs	r3, #64	; 0x40
 8005054:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005056:	2301      	movs	r3, #1
 8005058:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800505a:	2300      	movs	r3, #0
 800505c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800505e:	2300      	movs	r3, #0
 8005060:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(WRLS_WKUP_B_GPIO_Port, &GPIO_InitStruct);
 8005062:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005066:	4619      	mov	r1, r3
 8005068:	4838      	ldr	r0, [pc, #224]	; (800514c <MX_GPIO_Init+0x47c>)
 800506a:	f003 f9c9 	bl	8008400 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = WRLS_NOTIFY_Pin|Mems_INT_IIS2MDC_Pin|USB_IANA_Pin;
 800506e:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 8005072:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005074:	2300      	movs	r3, #0
 8005076:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005078:	2300      	movs	r3, #0
 800507a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800507c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005080:	4619      	mov	r1, r3
 8005082:	4833      	ldr	r0, [pc, #204]	; (8005150 <MX_GPIO_Init+0x480>)
 8005084:	f003 f9bc 	bl	8008400 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = USB_UCPD_FLT_Pin|Mems_ISM330DLC_INT1_Pin;
 8005088:	f44f 6310 	mov.w	r3, #2304	; 0x900
 800508c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800508e:	2300      	movs	r3, #0
 8005090:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005092:	2300      	movs	r3, #0
 8005094:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005096:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800509a:	4619      	mov	r1, r3
 800509c:	482a      	ldr	r0, [pc, #168]	; (8005148 <MX_GPIO_Init+0x478>)
 800509e:	f003 f9af 	bl	8008400 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_VBUS_SENSE_Pin;
 80050a2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80050a6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80050a8:	2300      	movs	r3, #0
 80050aa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050ac:	2300      	movs	r3, #0
 80050ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_VBUS_SENSE_GPIO_Port, &GPIO_InitStruct);
 80050b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80050b4:	4619      	mov	r1, r3
 80050b6:	4823      	ldr	r0, [pc, #140]	; (8005144 <MX_GPIO_Init+0x474>)
 80050b8:	f003 f9a2 	bl	8008400 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = WRLS_SPI2_NSS_Pin;
 80050bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80050c0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80050c2:	2302      	movs	r3, #2
 80050c4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050c6:	2300      	movs	r3, #0
 80050c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80050ca:	2300      	movs	r3, #0
 80050cc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80050ce:	2305      	movs	r3, #5
 80050d0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(WRLS_SPI2_NSS_GPIO_Port, &GPIO_InitStruct);
 80050d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80050d6:	4619      	mov	r1, r3
 80050d8:	481e      	ldr	r0, [pc, #120]	; (8005154 <MX_GPIO_Init+0x484>)
 80050da:	f003 f991 	bl	8008400 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_UCPD_CC2_Pin;
 80050de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80050e2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80050e4:	2303      	movs	r3, #3
 80050e6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050e8:	2300      	movs	r3, #0
 80050ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_UCPD_CC2_GPIO_Port, &GPIO_InitStruct);
 80050ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80050f0:	4619      	mov	r1, r3
 80050f2:	4818      	ldr	r0, [pc, #96]	; (8005154 <MX_GPIO_Init+0x484>)
 80050f4:	f003 f984 	bl	8008400 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin */
  GPIO_InitStruct.Pin = Mems_STSAFE_RESET_Pin|WRLS_WKUP_W_Pin;
 80050f8:	f44f 4308 	mov.w	r3, #34816	; 0x8800
 80050fc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80050fe:	2301      	movs	r3, #1
 8005100:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005102:	2300      	movs	r3, #0
 8005104:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005106:	2300      	movs	r3, #0
 8005108:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800510a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800510e:	4619      	mov	r1, r3
 8005110:	480c      	ldr	r0, [pc, #48]	; (8005144 <MX_GPIO_Init+0x474>)
 8005112:	f003 f975 	bl	8008400 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MIC_SDIN0_Pin;
 8005116:	2302      	movs	r3, #2
 8005118:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800511a:	2302      	movs	r3, #2
 800511c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800511e:	2300      	movs	r3, #0
 8005120:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005122:	2300      	movs	r3, #0
 8005124:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_MDF1;
 8005126:	2306      	movs	r3, #6
 8005128:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(MIC_SDIN0_GPIO_Port, &GPIO_InitStruct);
 800512a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800512e:	4619      	mov	r1, r3
 8005130:	4808      	ldr	r0, [pc, #32]	; (8005154 <MX_GPIO_Init+0x484>)
 8005132:	f003 f965 	bl	8008400 <HAL_GPIO_Init>

}
 8005136:	bf00      	nop
 8005138:	3738      	adds	r7, #56	; 0x38
 800513a:	46bd      	mov	sp, r7
 800513c:	bd80      	pop	{r7, pc}
 800513e:	bf00      	nop
 8005140:	42020000 	.word	0x42020000
 8005144:	42021400 	.word	0x42021400
 8005148:	42021000 	.word	0x42021000
 800514c:	42021800 	.word	0x42021800
 8005150:	42020c00 	.word	0x42020c00
 8005154:	42020400 	.word	0x42020400

08005158 <Ram_GPIO_Init>:
     InitStruct.Alternate = GPIO_AF4_DCMI;
     HAL_GPIO_Init(CAM_PIXCLK_GPIO_Port, &InitStruct);

}

void Ram_GPIO_Init(void){
 8005158:	b580      	push	{r7, lr}
 800515a:	b08c      	sub	sp, #48	; 0x30
 800515c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef InitStruct = {0};
 800515e:	f107 031c 	add.w	r3, r7, #28
 8005162:	2200      	movs	r2, #0
 8005164:	601a      	str	r2, [r3, #0]
 8005166:	605a      	str	r2, [r3, #4]
 8005168:	609a      	str	r2, [r3, #8]
 800516a:	60da      	str	r2, [r3, #12]
 800516c:	611a      	str	r2, [r3, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 800516e:	4b6f      	ldr	r3, [pc, #444]	; (800532c <Ram_GPIO_Init+0x1d4>)
 8005170:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005174:	4a6d      	ldr	r2, [pc, #436]	; (800532c <Ram_GPIO_Init+0x1d4>)
 8005176:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800517a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800517e:	4b6b      	ldr	r3, [pc, #428]	; (800532c <Ram_GPIO_Init+0x1d4>)
 8005180:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005184:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005188:	61bb      	str	r3, [r7, #24]
 800518a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800518c:	4b67      	ldr	r3, [pc, #412]	; (800532c <Ram_GPIO_Init+0x1d4>)
 800518e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005192:	4a66      	ldr	r2, [pc, #408]	; (800532c <Ram_GPIO_Init+0x1d4>)
 8005194:	f043 0310 	orr.w	r3, r3, #16
 8005198:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800519c:	4b63      	ldr	r3, [pc, #396]	; (800532c <Ram_GPIO_Init+0x1d4>)
 800519e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80051a2:	f003 0310 	and.w	r3, r3, #16
 80051a6:	617b      	str	r3, [r7, #20]
 80051a8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80051aa:	4b60      	ldr	r3, [pc, #384]	; (800532c <Ram_GPIO_Init+0x1d4>)
 80051ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80051b0:	4a5e      	ldr	r2, [pc, #376]	; (800532c <Ram_GPIO_Init+0x1d4>)
 80051b2:	f043 0308 	orr.w	r3, r3, #8
 80051b6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80051ba:	4b5c      	ldr	r3, [pc, #368]	; (800532c <Ram_GPIO_Init+0x1d4>)
 80051bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80051c0:	f003 0308 	and.w	r3, r3, #8
 80051c4:	613b      	str	r3, [r7, #16]
 80051c6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80051c8:	4b58      	ldr	r3, [pc, #352]	; (800532c <Ram_GPIO_Init+0x1d4>)
 80051ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80051ce:	4a57      	ldr	r2, [pc, #348]	; (800532c <Ram_GPIO_Init+0x1d4>)
 80051d0:	f043 0320 	orr.w	r3, r3, #32
 80051d4:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80051d8:	4b54      	ldr	r3, [pc, #336]	; (800532c <Ram_GPIO_Init+0x1d4>)
 80051da:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80051de:	f003 0320 	and.w	r3, r3, #32
 80051e2:	60fb      	str	r3, [r7, #12]
 80051e4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80051e6:	4b51      	ldr	r3, [pc, #324]	; (800532c <Ram_GPIO_Init+0x1d4>)
 80051e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80051ec:	4a4f      	ldr	r2, [pc, #316]	; (800532c <Ram_GPIO_Init+0x1d4>)
 80051ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80051f2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80051f6:	4b4d      	ldr	r3, [pc, #308]	; (800532c <Ram_GPIO_Init+0x1d4>)
 80051f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80051fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005200:	60bb      	str	r3, [r7, #8]
 8005202:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005204:	4b49      	ldr	r3, [pc, #292]	; (800532c <Ram_GPIO_Init+0x1d4>)
 8005206:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800520a:	4a48      	ldr	r2, [pc, #288]	; (800532c <Ram_GPIO_Init+0x1d4>)
 800520c:	f043 0304 	orr.w	r3, r3, #4
 8005210:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8005214:	4b45      	ldr	r3, [pc, #276]	; (800532c <Ram_GPIO_Init+0x1d4>)
 8005216:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800521a:	f003 0304 	and.w	r3, r3, #4
 800521e:	607b      	str	r3, [r7, #4]
 8005220:	687b      	ldr	r3, [r7, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005222:	4b42      	ldr	r3, [pc, #264]	; (800532c <Ram_GPIO_Init+0x1d4>)
 8005224:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005228:	4a40      	ldr	r2, [pc, #256]	; (800532c <Ram_GPIO_Init+0x1d4>)
 800522a:	f043 0302 	orr.w	r3, r3, #2
 800522e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8005232:	4b3e      	ldr	r3, [pc, #248]	; (800532c <Ram_GPIO_Init+0x1d4>)
 8005234:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005238:	f003 0302 	and.w	r3, r3, #2
 800523c:	603b      	str	r3, [r7, #0]
 800523e:	683b      	ldr	r3, [r7, #0]

    InitStruct.Pin = OCTOSPI_R_IO5_Pin;
 8005240:	2301      	movs	r3, #1
 8005242:	61fb      	str	r3, [r7, #28]
    InitStruct.Mode = GPIO_MODE_AF_PP;
 8005244:	2302      	movs	r3, #2
 8005246:	623b      	str	r3, [r7, #32]
    InitStruct.Pull = GPIO_NOPULL;
 8005248:	2300      	movs	r3, #0
 800524a:	627b      	str	r3, [r7, #36]	; 0x24
    InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800524c:	2303      	movs	r3, #3
 800524e:	62bb      	str	r3, [r7, #40]	; 0x28
    InitStruct.Alternate = GPIO_AF3_OCTOSPI1;
 8005250:	2303      	movs	r3, #3
 8005252:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(OCTOSPI_R_IO5_GPIO_Port, &InitStruct);
 8005254:	f107 031c 	add.w	r3, r7, #28
 8005258:	4619      	mov	r1, r3
 800525a:	4835      	ldr	r0, [pc, #212]	; (8005330 <Ram_GPIO_Init+0x1d8>)
 800525c:	f003 f8d0 	bl	8008400 <HAL_GPIO_Init>

    InitStruct.Pin = OCTOSPI_R_DQS_Pin;
 8005260:	2308      	movs	r3, #8
 8005262:	61fb      	str	r3, [r7, #28]
    InitStruct.Mode = GPIO_MODE_AF_PP;
 8005264:	2302      	movs	r3, #2
 8005266:	623b      	str	r3, [r7, #32]
    InitStruct.Pull = GPIO_NOPULL;
 8005268:	2300      	movs	r3, #0
 800526a:	627b      	str	r3, [r7, #36]	; 0x24
    InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800526c:	2303      	movs	r3, #3
 800526e:	62bb      	str	r3, [r7, #40]	; 0x28
    InitStruct.Alternate = GPIO_AF3_OCTOSPI1;
 8005270:	2303      	movs	r3, #3
 8005272:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(OCTOSPI_R_DQS_GPIO_Port, &InitStruct);
 8005274:	f107 031c 	add.w	r3, r7, #28
 8005278:	4619      	mov	r1, r3
 800527a:	482e      	ldr	r0, [pc, #184]	; (8005334 <Ram_GPIO_Init+0x1dc>)
 800527c:	f003 f8c0 	bl	8008400 <HAL_GPIO_Init>

    InitStruct.Pin = OCTOSPI_R_IO7_Pin;
 8005280:	2380      	movs	r3, #128	; 0x80
 8005282:	61fb      	str	r3, [r7, #28]
    InitStruct.Mode = GPIO_MODE_AF_PP;
 8005284:	2302      	movs	r3, #2
 8005286:	623b      	str	r3, [r7, #32]
    InitStruct.Pull = GPIO_NOPULL;
 8005288:	2300      	movs	r3, #0
 800528a:	627b      	str	r3, [r7, #36]	; 0x24
    InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800528c:	2303      	movs	r3, #3
 800528e:	62bb      	str	r3, [r7, #40]	; 0x28
    InitStruct.Alternate = GPIO_AF10_OCTOSPI1;
 8005290:	230a      	movs	r3, #10
 8005292:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(OCTOSPI_R_IO7_GPIO_Port, &InitStruct);
 8005294:	f107 031c 	add.w	r3, r7, #28
 8005298:	4619      	mov	r1, r3
 800529a:	4827      	ldr	r0, [pc, #156]	; (8005338 <Ram_GPIO_Init+0x1e0>)
 800529c:	f003 f8b0 	bl	8008400 <HAL_GPIO_Init>

    InitStruct.Pin = OCTOSPI_R_IO0_Pin|OCTOSPI_R_IO2_Pin|OCTOSPI_R_IO1_Pin|OCTOSPI_R_IO3_Pin;
 80052a0:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 80052a4:	61fb      	str	r3, [r7, #28]
    InitStruct.Mode = GPIO_MODE_AF_PP;
 80052a6:	2302      	movs	r3, #2
 80052a8:	623b      	str	r3, [r7, #32]
    InitStruct.Pull = GPIO_NOPULL;
 80052aa:	2300      	movs	r3, #0
 80052ac:	627b      	str	r3, [r7, #36]	; 0x24
    InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80052ae:	2303      	movs	r3, #3
 80052b0:	62bb      	str	r3, [r7, #40]	; 0x28
    InitStruct.Alternate = GPIO_AF10_OCTOSPI1;
 80052b2:	230a      	movs	r3, #10
 80052b4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &InitStruct);
 80052b6:	f107 031c 	add.w	r3, r7, #28
 80052ba:	4619      	mov	r1, r3
 80052bc:	481f      	ldr	r0, [pc, #124]	; (800533c <Ram_GPIO_Init+0x1e4>)
 80052be:	f003 f89f 	bl	8008400 <HAL_GPIO_Init>

    InitStruct.Pin = OCTOSPI_R_IO4_Pin;
 80052c2:	2304      	movs	r3, #4
 80052c4:	61fb      	str	r3, [r7, #28]
    InitStruct.Mode = GPIO_MODE_AF_PP;
 80052c6:	2302      	movs	r3, #2
 80052c8:	623b      	str	r3, [r7, #32]
    InitStruct.Pull = GPIO_NOPULL;
 80052ca:	2300      	movs	r3, #0
 80052cc:	627b      	str	r3, [r7, #36]	; 0x24
    InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80052ce:	2303      	movs	r3, #3
 80052d0:	62bb      	str	r3, [r7, #40]	; 0x28
    InitStruct.Alternate = GPIO_AF3_OCTOSPI1;
 80052d2:	2303      	movs	r3, #3
 80052d4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(OCTOSPI_R_IO4_GPIO_Port, &InitStruct);
 80052d6:	f107 031c 	add.w	r3, r7, #28
 80052da:	4619      	mov	r1, r3
 80052dc:	4818      	ldr	r0, [pc, #96]	; (8005340 <Ram_GPIO_Init+0x1e8>)
 80052de:	f003 f88f 	bl	8008400 <HAL_GPIO_Init>

    InitStruct.Pin = OCTOSPI_R_IO6_Pin;
 80052e2:	2308      	movs	r3, #8
 80052e4:	61fb      	str	r3, [r7, #28]
    InitStruct.Mode = GPIO_MODE_AF_PP;
 80052e6:	2302      	movs	r3, #2
 80052e8:	623b      	str	r3, [r7, #32]
    InitStruct.Pull = GPIO_NOPULL;
 80052ea:	2300      	movs	r3, #0
 80052ec:	627b      	str	r3, [r7, #36]	; 0x24
    InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80052ee:	2303      	movs	r3, #3
 80052f0:	62bb      	str	r3, [r7, #40]	; 0x28
    InitStruct.Alternate = GPIO_AF10_OCTOSPI1;
 80052f2:	230a      	movs	r3, #10
 80052f4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(OCTOSPI_R_IO6_GPIO_Port, &InitStruct);
 80052f6:	f107 031c 	add.w	r3, r7, #28
 80052fa:	4619      	mov	r1, r3
 80052fc:	4811      	ldr	r0, [pc, #68]	; (8005344 <Ram_GPIO_Init+0x1ec>)
 80052fe:	f003 f87f 	bl	8008400 <HAL_GPIO_Init>

    InitStruct.Pin = OCTOSPI_R_CLK_P_Pin|OCTOSPI_R_NCS_Pin;
 8005302:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8005306:	61fb      	str	r3, [r7, #28]
    InitStruct.Mode = GPIO_MODE_AF_PP;
 8005308:	2302      	movs	r3, #2
 800530a:	623b      	str	r3, [r7, #32]
    InitStruct.Pull = GPIO_NOPULL;
 800530c:	2300      	movs	r3, #0
 800530e:	627b      	str	r3, [r7, #36]	; 0x24
    InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005310:	2303      	movs	r3, #3
 8005312:	62bb      	str	r3, [r7, #40]	; 0x28
    InitStruct.Alternate = GPIO_AF10_OCTOSPI1;
 8005314:	230a      	movs	r3, #10
 8005316:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &InitStruct);
 8005318:	f107 031c 	add.w	r3, r7, #28
 800531c:	4619      	mov	r1, r3
 800531e:	480a      	ldr	r0, [pc, #40]	; (8005348 <Ram_GPIO_Init+0x1f0>)
 8005320:	f003 f86e 	bl	8008400 <HAL_GPIO_Init>
}
 8005324:	bf00      	nop
 8005326:	3730      	adds	r7, #48	; 0x30
 8005328:	46bd      	mov	sp, r7
 800532a:	bd80      	pop	{r7, pc}
 800532c:	46020c00 	.word	0x46020c00
 8005330:	42022000 	.word	0x42022000
 8005334:	42021000 	.word	0x42021000
 8005338:	42020c00 	.word	0x42020c00
 800533c:	42021400 	.word	0x42021400
 8005340:	42021c00 	.word	0x42021c00
 8005344:	42020800 	.word	0x42020800
 8005348:	42020400 	.word	0x42020400

0800534c <MotionSensor_GPIO_Init>:

void MotionSensor_GPIO_Init(void)
{
 800534c:	b580      	push	{r7, lr}
 800534e:	b086      	sub	sp, #24
 8005350:	af00      	add	r7, sp, #0
	  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005352:	1d3b      	adds	r3, r7, #4
 8005354:	2200      	movs	r2, #0
 8005356:	601a      	str	r2, [r3, #0]
 8005358:	605a      	str	r2, [r3, #4]
 800535a:	609a      	str	r2, [r3, #8]
 800535c:	60da      	str	r2, [r3, #12]
 800535e:	611a      	str	r2, [r3, #16]
	  GPIO_InitStruct.Pin = Mems_ISM330DLC_INT1_Pin;
 8005360:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005364:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005366:	2300      	movs	r3, #0
 8005368:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800536a:	2300      	movs	r3, #0
 800536c:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800536e:	2300      	movs	r3, #0
 8005370:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005372:	2300      	movs	r3, #0
 8005374:	60fb      	str	r3, [r7, #12]
	  HAL_GPIO_Init(Mems_ISM330DLC_INT1_GPIO_Port, &GPIO_InitStruct);
 8005376:	1d3b      	adds	r3, r7, #4
 8005378:	4619      	mov	r1, r3
 800537a:	4803      	ldr	r0, [pc, #12]	; (8005388 <MotionSensor_GPIO_Init+0x3c>)
 800537c:	f003 f840 	bl	8008400 <HAL_GPIO_Init>
}
 8005380:	bf00      	nop
 8005382:	3718      	adds	r7, #24
 8005384:	46bd      	mov	sp, r7
 8005386:	bd80      	pop	{r7, pc}
 8005388:	42021000 	.word	0x42021000

0800538c <PressureSensor_GPIO_Init>:

void PressureSensor_GPIO_Init(void)
{
 800538c:	b580      	push	{r7, lr}
 800538e:	b086      	sub	sp, #24
 8005390:	af00      	add	r7, sp, #0
	  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005392:	1d3b      	adds	r3, r7, #4
 8005394:	2200      	movs	r2, #0
 8005396:	601a      	str	r2, [r3, #0]
 8005398:	605a      	str	r2, [r3, #4]
 800539a:	609a      	str	r2, [r3, #8]
 800539c:	60da      	str	r2, [r3, #12]
 800539e:	611a      	str	r2, [r3, #16]
	  GPIO_InitStruct.Pin = Mems_INT_LPS22HH_Pin;
 80053a0:	2304      	movs	r3, #4
 80053a2:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80053a4:	2300      	movs	r3, #0
 80053a6:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80053a8:	2300      	movs	r3, #0
 80053aa:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80053ac:	2300      	movs	r3, #0
 80053ae:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80053b0:	2300      	movs	r3, #0
 80053b2:	60fb      	str	r3, [r7, #12]
	  HAL_GPIO_Init(Mems_INT_LPS22HH_GPIO_Port, &GPIO_InitStruct);
 80053b4:	1d3b      	adds	r3, r7, #4
 80053b6:	4619      	mov	r1, r3
 80053b8:	4803      	ldr	r0, [pc, #12]	; (80053c8 <PressureSensor_GPIO_Init+0x3c>)
 80053ba:	f003 f821 	bl	8008400 <HAL_GPIO_Init>
}
 80053be:	bf00      	nop
 80053c0:	3718      	adds	r7, #24
 80053c2:	46bd      	mov	sp, r7
 80053c4:	bd80      	pop	{r7, pc}
 80053c6:	bf00      	nop
 80053c8:	42021800 	.word	0x42021800

080053cc <MagSensor_GPIO_Init>:

void MagSensor_GPIO_Init(void)
{
 80053cc:	b580      	push	{r7, lr}
 80053ce:	b086      	sub	sp, #24
 80053d0:	af00      	add	r7, sp, #0
	  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80053d2:	1d3b      	adds	r3, r7, #4
 80053d4:	2200      	movs	r2, #0
 80053d6:	601a      	str	r2, [r3, #0]
 80053d8:	605a      	str	r2, [r3, #4]
 80053da:	609a      	str	r2, [r3, #8]
 80053dc:	60da      	str	r2, [r3, #12]
 80053de:	611a      	str	r2, [r3, #16]
	  GPIO_InitStruct.Pin = Mems_INT_IIS2MDC_Pin;
 80053e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80053e4:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80053e6:	2300      	movs	r3, #0
 80053e8:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80053ea:	2300      	movs	r3, #0
 80053ec:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80053ee:	2300      	movs	r3, #0
 80053f0:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80053f2:	2300      	movs	r3, #0
 80053f4:	60fb      	str	r3, [r7, #12]
	  HAL_GPIO_Init(Mems_INT_IIS2MDC_GPIO_Port, &GPIO_InitStruct);
 80053f6:	1d3b      	adds	r3, r7, #4
 80053f8:	4619      	mov	r1, r3
 80053fa:	4803      	ldr	r0, [pc, #12]	; (8005408 <MagSensor_GPIO_Init+0x3c>)
 80053fc:	f003 f800 	bl	8008400 <HAL_GPIO_Init>
}
 8005400:	bf00      	nop
 8005402:	3718      	adds	r7, #24
 8005404:	46bd      	mov	sp, r7
 8005406:	bd80      	pop	{r7, pc}
 8005408:	42020c00 	.word	0x42020c00

0800540c <HAL_I2C_MspInit>:
  /* USER CODE END I2C2_Init 2 */

}

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800540c:	b580      	push	{r7, lr}
 800540e:	b0be      	sub	sp, #248	; 0xf8
 8005410:	af00      	add	r7, sp, #0
 8005412:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005414:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8005418:	2200      	movs	r2, #0
 800541a:	601a      	str	r2, [r3, #0]
 800541c:	605a      	str	r2, [r3, #4]
 800541e:	609a      	str	r2, [r3, #8]
 8005420:	60da      	str	r2, [r3, #12]
 8005422:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8005424:	f107 0318 	add.w	r3, r7, #24
 8005428:	22c8      	movs	r2, #200	; 0xc8
 800542a:	2100      	movs	r1, #0
 800542c:	4618      	mov	r0, r3
 800542e:	f00d fb2b 	bl	8012a88 <memset>
  if(i2cHandle->Instance==I2C1)
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	4a53      	ldr	r2, [pc, #332]	; (8005584 <HAL_I2C_MspInit+0x178>)
 8005438:	4293      	cmp	r3, r2
 800543a:	d153      	bne.n	80054e4 <HAL_I2C_MspInit+0xd8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800543c:	f04f 0240 	mov.w	r2, #64	; 0x40
 8005440:	f04f 0300 	mov.w	r3, #0
 8005444:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8005448:	2300      	movs	r3, #0
 800544a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800544e:	f107 0318 	add.w	r3, r7, #24
 8005452:	4618      	mov	r0, r3
 8005454:	f006 ff4c 	bl	800c2f0 <HAL_RCCEx_PeriphCLKConfig>
 8005458:	4603      	mov	r3, r0
 800545a:	2b00      	cmp	r3, #0
 800545c:	d001      	beq.n	8005462 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 800545e:	f000 fab9 	bl	80059d4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005462:	4b49      	ldr	r3, [pc, #292]	; (8005588 <HAL_I2C_MspInit+0x17c>)
 8005464:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005468:	4a47      	ldr	r2, [pc, #284]	; (8005588 <HAL_I2C_MspInit+0x17c>)
 800546a:	f043 0302 	orr.w	r3, r3, #2
 800546e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8005472:	4b45      	ldr	r3, [pc, #276]	; (8005588 <HAL_I2C_MspInit+0x17c>)
 8005474:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005478:	f003 0302 	and.w	r3, r3, #2
 800547c:	617b      	str	r3, [r7, #20]
 800547e:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB9     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_8;
 8005480:	f44f 7340 	mov.w	r3, #768	; 0x300
 8005484:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005488:	2312      	movs	r3, #18
 800548a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800548e:	2300      	movs	r3, #0
 8005490:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005494:	2300      	movs	r3, #0
 8005496:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800549a:	2304      	movs	r3, #4
 800549c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80054a0:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80054a4:	4619      	mov	r1, r3
 80054a6:	4839      	ldr	r0, [pc, #228]	; (800558c <HAL_I2C_MspInit+0x180>)
 80054a8:	f002 ffaa 	bl	8008400 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80054ac:	4b36      	ldr	r3, [pc, #216]	; (8005588 <HAL_I2C_MspInit+0x17c>)
 80054ae:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80054b2:	4a35      	ldr	r2, [pc, #212]	; (8005588 <HAL_I2C_MspInit+0x17c>)
 80054b4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80054b8:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80054bc:	4b32      	ldr	r3, [pc, #200]	; (8005588 <HAL_I2C_MspInit+0x17c>)
 80054be:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80054c2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80054c6:	613b      	str	r3, [r7, #16]
 80054c8:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C1_MspInit 1 */
    __HAL_RCC_I2C1_FORCE_RESET();
 80054ca:	4b2f      	ldr	r3, [pc, #188]	; (8005588 <HAL_I2C_MspInit+0x17c>)
 80054cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80054ce:	4a2e      	ldr	r2, [pc, #184]	; (8005588 <HAL_I2C_MspInit+0x17c>)
 80054d0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80054d4:	6753      	str	r3, [r2, #116]	; 0x74
    __HAL_RCC_I2C1_RELEASE_RESET();
 80054d6:	4b2c      	ldr	r3, [pc, #176]	; (8005588 <HAL_I2C_MspInit+0x17c>)
 80054d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80054da:	4a2b      	ldr	r2, [pc, #172]	; (8005588 <HAL_I2C_MspInit+0x17c>)
 80054dc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80054e0:	6753      	str	r3, [r2, #116]	; 0x74
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 80054e2:	e04a      	b.n	800557a <HAL_I2C_MspInit+0x16e>
  else if(i2cHandle->Instance==I2C2)
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	4a29      	ldr	r2, [pc, #164]	; (8005590 <HAL_I2C_MspInit+0x184>)
 80054ea:	4293      	cmp	r3, r2
 80054ec:	d145      	bne.n	800557a <HAL_I2C_MspInit+0x16e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80054ee:	f04f 0280 	mov.w	r2, #128	; 0x80
 80054f2:	f04f 0300 	mov.w	r3, #0
 80054f6:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80054fa:	2300      	movs	r3, #0
 80054fc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005500:	f107 0318 	add.w	r3, r7, #24
 8005504:	4618      	mov	r0, r3
 8005506:	f006 fef3 	bl	800c2f0 <HAL_RCCEx_PeriphCLKConfig>
 800550a:	4603      	mov	r3, r0
 800550c:	2b00      	cmp	r3, #0
 800550e:	d001      	beq.n	8005514 <HAL_I2C_MspInit+0x108>
      Error_Handler();
 8005510:	f000 fa60 	bl	80059d4 <Error_Handler>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8005514:	4b1c      	ldr	r3, [pc, #112]	; (8005588 <HAL_I2C_MspInit+0x17c>)
 8005516:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800551a:	4a1b      	ldr	r2, [pc, #108]	; (8005588 <HAL_I2C_MspInit+0x17c>)
 800551c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005520:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8005524:	4b18      	ldr	r3, [pc, #96]	; (8005588 <HAL_I2C_MspInit+0x17c>)
 8005526:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800552a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800552e:	60fb      	str	r3, [r7, #12]
 8005530:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8005532:	2330      	movs	r3, #48	; 0x30
 8005534:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005538:	2312      	movs	r3, #18
 800553a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800553e:	2300      	movs	r3, #0
 8005540:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005544:	2300      	movs	r3, #0
 8005546:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800554a:	2304      	movs	r3, #4
 800554c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8005550:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8005554:	4619      	mov	r1, r3
 8005556:	480f      	ldr	r0, [pc, #60]	; (8005594 <HAL_I2C_MspInit+0x188>)
 8005558:	f002 ff52 	bl	8008400 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800555c:	4b0a      	ldr	r3, [pc, #40]	; (8005588 <HAL_I2C_MspInit+0x17c>)
 800555e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005562:	4a09      	ldr	r2, [pc, #36]	; (8005588 <HAL_I2C_MspInit+0x17c>)
 8005564:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005568:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 800556c:	4b06      	ldr	r3, [pc, #24]	; (8005588 <HAL_I2C_MspInit+0x17c>)
 800556e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005572:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005576:	60bb      	str	r3, [r7, #8]
 8005578:	68bb      	ldr	r3, [r7, #8]
}
 800557a:	bf00      	nop
 800557c:	37f8      	adds	r7, #248	; 0xf8
 800557e:	46bd      	mov	sp, r7
 8005580:	bd80      	pop	{r7, pc}
 8005582:	bf00      	nop
 8005584:	40005400 	.word	0x40005400
 8005588:	46020c00 	.word	0x46020c00
 800558c:	42020400 	.word	0x42020400
 8005590:	40005800 	.word	0x40005800
 8005594:	42021c00 	.word	0x42021c00

08005598 <HAL_I2C_MspDeInit>:

void HAL_I2C_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8005598:	b580      	push	{r7, lr}
 800559a:	b082      	sub	sp, #8
 800559c:	af00      	add	r7, sp, #0
 800559e:	6078      	str	r0, [r7, #4]

  if(i2cHandle->Instance==I2C1)
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	4a17      	ldr	r2, [pc, #92]	; (8005604 <HAL_I2C_MspDeInit+0x6c>)
 80055a6:	4293      	cmp	r3, r2
 80055a8:	d112      	bne.n	80055d0 <HAL_I2C_MspDeInit+0x38>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 80055aa:	4b17      	ldr	r3, [pc, #92]	; (8005608 <HAL_I2C_MspDeInit+0x70>)
 80055ac:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80055b0:	4a15      	ldr	r2, [pc, #84]	; (8005608 <HAL_I2C_MspDeInit+0x70>)
 80055b2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80055b6:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c

    /**I2C1 GPIO Configuration
    PB9     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_9);
 80055ba:	f44f 7100 	mov.w	r1, #512	; 0x200
 80055be:	4813      	ldr	r0, [pc, #76]	; (800560c <HAL_I2C_MspDeInit+0x74>)
 80055c0:	f003 f8f6 	bl	80087b0 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_8);
 80055c4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80055c8:	4810      	ldr	r0, [pc, #64]	; (800560c <HAL_I2C_MspDeInit+0x74>)
 80055ca:	f003 f8f1 	bl	80087b0 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
  }
}
 80055ce:	e014      	b.n	80055fa <HAL_I2C_MspDeInit+0x62>
  else if(i2cHandle->Instance==I2C2)
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	4a0e      	ldr	r2, [pc, #56]	; (8005610 <HAL_I2C_MspDeInit+0x78>)
 80055d6:	4293      	cmp	r3, r2
 80055d8:	d10f      	bne.n	80055fa <HAL_I2C_MspDeInit+0x62>
    __HAL_RCC_I2C2_CLK_DISABLE();
 80055da:	4b0b      	ldr	r3, [pc, #44]	; (8005608 <HAL_I2C_MspDeInit+0x70>)
 80055dc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80055e0:	4a09      	ldr	r2, [pc, #36]	; (8005608 <HAL_I2C_MspDeInit+0x70>)
 80055e2:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80055e6:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
    HAL_GPIO_DeInit(GPIOH, GPIO_PIN_4);
 80055ea:	2110      	movs	r1, #16
 80055ec:	4809      	ldr	r0, [pc, #36]	; (8005614 <HAL_I2C_MspDeInit+0x7c>)
 80055ee:	f003 f8df 	bl	80087b0 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOH, GPIO_PIN_5);
 80055f2:	2120      	movs	r1, #32
 80055f4:	4807      	ldr	r0, [pc, #28]	; (8005614 <HAL_I2C_MspDeInit+0x7c>)
 80055f6:	f003 f8db 	bl	80087b0 <HAL_GPIO_DeInit>
}
 80055fa:	bf00      	nop
 80055fc:	3708      	adds	r7, #8
 80055fe:	46bd      	mov	sp, r7
 8005600:	bd80      	pop	{r7, pc}
 8005602:	bf00      	nop
 8005604:	40005400 	.word	0x40005400
 8005608:	46020c00 	.word	0x46020c00
 800560c:	42020400 	.word	0x42020400
 8005610:	40005800 	.word	0x40005800
 8005614:	42021c00 	.word	0x42021c00

08005618 <I2C1_Init>:

/* USER CODE BEGIN 1 */
void I2C1_Init(void){
 8005618:	b580      	push	{r7, lr}
 800561a:	af00      	add	r7, sp, #0

	  hi2c1.Instance = I2C1;
 800561c:	4b1b      	ldr	r3, [pc, #108]	; (800568c <I2C1_Init+0x74>)
 800561e:	4a1c      	ldr	r2, [pc, #112]	; (8005690 <I2C1_Init+0x78>)
 8005620:	601a      	str	r2, [r3, #0]
	  hi2c1.Init.Timing = 0xB0C03E40;
 8005622:	4b1a      	ldr	r3, [pc, #104]	; (800568c <I2C1_Init+0x74>)
 8005624:	4a1b      	ldr	r2, [pc, #108]	; (8005694 <I2C1_Init+0x7c>)
 8005626:	605a      	str	r2, [r3, #4]
	  hi2c1.Init.OwnAddress1 = 0;
 8005628:	4b18      	ldr	r3, [pc, #96]	; (800568c <I2C1_Init+0x74>)
 800562a:	2200      	movs	r2, #0
 800562c:	609a      	str	r2, [r3, #8]
	  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800562e:	4b17      	ldr	r3, [pc, #92]	; (800568c <I2C1_Init+0x74>)
 8005630:	2201      	movs	r2, #1
 8005632:	60da      	str	r2, [r3, #12]
	  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8005634:	4b15      	ldr	r3, [pc, #84]	; (800568c <I2C1_Init+0x74>)
 8005636:	2200      	movs	r2, #0
 8005638:	611a      	str	r2, [r3, #16]
	  hi2c1.Init.OwnAddress2 = 0;
 800563a:	4b14      	ldr	r3, [pc, #80]	; (800568c <I2C1_Init+0x74>)
 800563c:	2200      	movs	r2, #0
 800563e:	615a      	str	r2, [r3, #20]
	  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8005640:	4b12      	ldr	r3, [pc, #72]	; (800568c <I2C1_Init+0x74>)
 8005642:	2200      	movs	r2, #0
 8005644:	619a      	str	r2, [r3, #24]
	  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8005646:	4b11      	ldr	r3, [pc, #68]	; (800568c <I2C1_Init+0x74>)
 8005648:	2200      	movs	r2, #0
 800564a:	61da      	str	r2, [r3, #28]
	  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800564c:	4b0f      	ldr	r3, [pc, #60]	; (800568c <I2C1_Init+0x74>)
 800564e:	2200      	movs	r2, #0
 8005650:	621a      	str	r2, [r3, #32]
	  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8005652:	480e      	ldr	r0, [pc, #56]	; (800568c <I2C1_Init+0x74>)
 8005654:	f003 f9d4 	bl	8008a00 <HAL_I2C_Init>
 8005658:	4603      	mov	r3, r0
 800565a:	2b00      	cmp	r3, #0
 800565c:	d001      	beq.n	8005662 <I2C1_Init+0x4a>
	  {
	    Error_Handler();
 800565e:	f000 f9b9 	bl	80059d4 <Error_Handler>
	  }

	  /** Configure Analogue filter
	  */
	  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8005662:	2100      	movs	r1, #0
 8005664:	4809      	ldr	r0, [pc, #36]	; (800568c <I2C1_Init+0x74>)
 8005666:	f003 ff5d 	bl	8009524 <HAL_I2CEx_ConfigAnalogFilter>
 800566a:	4603      	mov	r3, r0
 800566c:	2b00      	cmp	r3, #0
 800566e:	d001      	beq.n	8005674 <I2C1_Init+0x5c>
	  {
	    Error_Handler();
 8005670:	f000 f9b0 	bl	80059d4 <Error_Handler>
	  }

	  /** Configure Digital filter
	  */
	  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8005674:	2100      	movs	r1, #0
 8005676:	4805      	ldr	r0, [pc, #20]	; (800568c <I2C1_Init+0x74>)
 8005678:	f003 ff9f 	bl	80095ba <HAL_I2CEx_ConfigDigitalFilter>
 800567c:	4603      	mov	r3, r0
 800567e:	2b00      	cmp	r3, #0
 8005680:	d001      	beq.n	8005686 <I2C1_Init+0x6e>
	  {
	    Error_Handler();
 8005682:	f000 f9a7 	bl	80059d4 <Error_Handler>
	  }

}
 8005686:	bf00      	nop
 8005688:	bd80      	pop	{r7, pc}
 800568a:	bf00      	nop
 800568c:	20002cbc 	.word	0x20002cbc
 8005690:	40005400 	.word	0x40005400
 8005694:	b0c03e40 	.word	0xb0c03e40

08005698 <I2C2_Init>:

void I2C2_Init(void){
 8005698:	b580      	push	{r7, lr}
 800569a:	af00      	add	r7, sp, #0

	  hi2c2.Instance = I2C2;
 800569c:	4b1b      	ldr	r3, [pc, #108]	; (800570c <I2C2_Init+0x74>)
 800569e:	4a1c      	ldr	r2, [pc, #112]	; (8005710 <I2C2_Init+0x78>)
 80056a0:	601a      	str	r2, [r3, #0]
	  hi2c2.Init.Timing = 0x30909DEC;
 80056a2:	4b1a      	ldr	r3, [pc, #104]	; (800570c <I2C2_Init+0x74>)
 80056a4:	4a1b      	ldr	r2, [pc, #108]	; (8005714 <I2C2_Init+0x7c>)
 80056a6:	605a      	str	r2, [r3, #4]
	  hi2c2.Init.OwnAddress1 = 0;
 80056a8:	4b18      	ldr	r3, [pc, #96]	; (800570c <I2C2_Init+0x74>)
 80056aa:	2200      	movs	r2, #0
 80056ac:	609a      	str	r2, [r3, #8]
	  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80056ae:	4b17      	ldr	r3, [pc, #92]	; (800570c <I2C2_Init+0x74>)
 80056b0:	2201      	movs	r2, #1
 80056b2:	60da      	str	r2, [r3, #12]
	  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80056b4:	4b15      	ldr	r3, [pc, #84]	; (800570c <I2C2_Init+0x74>)
 80056b6:	2200      	movs	r2, #0
 80056b8:	611a      	str	r2, [r3, #16]
	  hi2c2.Init.OwnAddress2 = 0;
 80056ba:	4b14      	ldr	r3, [pc, #80]	; (800570c <I2C2_Init+0x74>)
 80056bc:	2200      	movs	r2, #0
 80056be:	615a      	str	r2, [r3, #20]
	  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80056c0:	4b12      	ldr	r3, [pc, #72]	; (800570c <I2C2_Init+0x74>)
 80056c2:	2200      	movs	r2, #0
 80056c4:	619a      	str	r2, [r3, #24]
	  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80056c6:	4b11      	ldr	r3, [pc, #68]	; (800570c <I2C2_Init+0x74>)
 80056c8:	2200      	movs	r2, #0
 80056ca:	61da      	str	r2, [r3, #28]
	  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80056cc:	4b0f      	ldr	r3, [pc, #60]	; (800570c <I2C2_Init+0x74>)
 80056ce:	2200      	movs	r2, #0
 80056d0:	621a      	str	r2, [r3, #32]
	  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80056d2:	480e      	ldr	r0, [pc, #56]	; (800570c <I2C2_Init+0x74>)
 80056d4:	f003 f994 	bl	8008a00 <HAL_I2C_Init>
 80056d8:	4603      	mov	r3, r0
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d001      	beq.n	80056e2 <I2C2_Init+0x4a>
	  {
	    Error_Handler();
 80056de:	f000 f979 	bl	80059d4 <Error_Handler>
	  }

	  /** Configure Analogue filter
	  */
	  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80056e2:	2100      	movs	r1, #0
 80056e4:	4809      	ldr	r0, [pc, #36]	; (800570c <I2C2_Init+0x74>)
 80056e6:	f003 ff1d 	bl	8009524 <HAL_I2CEx_ConfigAnalogFilter>
 80056ea:	4603      	mov	r3, r0
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d001      	beq.n	80056f4 <I2C2_Init+0x5c>
	  {
	    Error_Handler();
 80056f0:	f000 f970 	bl	80059d4 <Error_Handler>
	  }

	  /** Configure Digital filter
	  */
	  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80056f4:	2100      	movs	r1, #0
 80056f6:	4805      	ldr	r0, [pc, #20]	; (800570c <I2C2_Init+0x74>)
 80056f8:	f003 ff5f 	bl	80095ba <HAL_I2CEx_ConfigDigitalFilter>
 80056fc:	4603      	mov	r3, r0
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d001      	beq.n	8005706 <I2C2_Init+0x6e>
	  {
	    Error_Handler();
 8005702:	f000 f967 	bl	80059d4 <Error_Handler>
	  }

}
 8005706:	bf00      	nop
 8005708:	bd80      	pop	{r7, pc}
 800570a:	bf00      	nop
 800570c:	20002d08 	.word	0x20002d08
 8005710:	40005800 	.word	0x40005800
 8005714:	30909dec 	.word	0x30909dec

08005718 <MX_ICACHE_Init>:

/* USER CODE END 0 */

/* ICACHE init function */
void MX_ICACHE_Init(void)
{
 8005718:	b580      	push	{r7, lr}
 800571a:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache (default 2-ways set associative cache)
  */
  if (HAL_ICACHE_Enable() != HAL_OK)
 800571c:	f003 ff9a 	bl	8009654 <HAL_ICACHE_Enable>
 8005720:	4603      	mov	r3, r0
 8005722:	2b00      	cmp	r3, #0
 8005724:	d001      	beq.n	800572a <MX_ICACHE_Init+0x12>
  {
    Error_Handler();
 8005726:	f000 f955 	bl	80059d4 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 800572a:	bf00      	nop
 800572c:	bd80      	pop	{r7, pc}
	...

08005730 <MX_ProjectDMAQueue_Config>:
  * @brief  DMA Linked-list ProjectDMAQueue configuration
  * @param  None
  * @retval None
  */
HAL_StatusTypeDef MX_ProjectDMAQueue_Config(void)
{
 8005730:	b580      	push	{r7, lr}
 8005732:	b09c      	sub	sp, #112	; 0x70
 8005734:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef ret = HAL_OK;
 8005736:	2300      	movs	r3, #0
 8005738:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  /* DMA node configuration declaration */
  DMA_NodeConfTypeDef pNodeConfig;

  /* Set node configuration ################################################*/
  pNodeConfig.NodeType = DMA_GPDMA_2D_NODE;
 800573c:	2322      	movs	r3, #34	; 0x22
 800573e:	603b      	str	r3, [r7, #0]
  pNodeConfig.Init.Request = GPDMA1_REQUEST_DCMI;
 8005740:	2356      	movs	r3, #86	; 0x56
 8005742:	607b      	str	r3, [r7, #4]
  pNodeConfig.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 8005744:	2300      	movs	r3, #0
 8005746:	60bb      	str	r3, [r7, #8]
  pNodeConfig.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005748:	2300      	movs	r3, #0
 800574a:	60fb      	str	r3, [r7, #12]
  pNodeConfig.Init.SrcInc = DMA_SINC_FIXED;
 800574c:	2300      	movs	r3, #0
 800574e:	613b      	str	r3, [r7, #16]
  pNodeConfig.Init.DestInc = DMA_DINC_INCREMENTED;
 8005750:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8005754:	617b      	str	r3, [r7, #20]
  pNodeConfig.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_WORD;
 8005756:	2302      	movs	r3, #2
 8005758:	61bb      	str	r3, [r7, #24]
  pNodeConfig.Init.DestDataWidth = DMA_DEST_DATAWIDTH_WORD;
 800575a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800575e:	61fb      	str	r3, [r7, #28]
  pNodeConfig.Init.SrcBurstLength = 1;
 8005760:	2301      	movs	r3, #1
 8005762:	627b      	str	r3, [r7, #36]	; 0x24
  pNodeConfig.Init.DestBurstLength = 1;
 8005764:	2301      	movs	r3, #1
 8005766:	62bb      	str	r3, [r7, #40]	; 0x28
  pNodeConfig.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT0;
 8005768:	2300      	movs	r3, #0
 800576a:	62fb      	str	r3, [r7, #44]	; 0x2c
  pNodeConfig.Init.TransferEventMode = DMA_TCEM_EACH_LL_ITEM_TRANSFER;
 800576c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005770:	633b      	str	r3, [r7, #48]	; 0x30
  pNodeConfig.RepeatBlockConfig.RepeatCount = 1;
 8005772:	2301      	movs	r3, #1
 8005774:	64fb      	str	r3, [r7, #76]	; 0x4c
  pNodeConfig.RepeatBlockConfig.SrcAddrOffset = 0;
 8005776:	2300      	movs	r3, #0
 8005778:	653b      	str	r3, [r7, #80]	; 0x50
  pNodeConfig.RepeatBlockConfig.DestAddrOffset = 0;
 800577a:	2300      	movs	r3, #0
 800577c:	657b      	str	r3, [r7, #84]	; 0x54
  pNodeConfig.RepeatBlockConfig.BlkSrcAddrOffset = 0;
 800577e:	2300      	movs	r3, #0
 8005780:	65bb      	str	r3, [r7, #88]	; 0x58
  pNodeConfig.RepeatBlockConfig.BlkDestAddrOffset = 0;
 8005782:	2300      	movs	r3, #0
 8005784:	65fb      	str	r3, [r7, #92]	; 0x5c
  pNodeConfig.TriggerConfig.TriggerPolarity = DMA_TRIG_POLARITY_MASKED;
 8005786:	2300      	movs	r3, #0
 8005788:	647b      	str	r3, [r7, #68]	; 0x44
  pNodeConfig.DataHandlingConfig.DataExchange = DMA_EXCHANGE_NONE;
 800578a:	2300      	movs	r3, #0
 800578c:	63bb      	str	r3, [r7, #56]	; 0x38
  pNodeConfig.DataHandlingConfig.DataAlignment = DMA_DATA_RIGHTALIGN_ZEROPADDED;
 800578e:	2300      	movs	r3, #0
 8005790:	63fb      	str	r3, [r7, #60]	; 0x3c
  pNodeConfig.SrcAddress = 0;
 8005792:	2300      	movs	r3, #0
 8005794:	663b      	str	r3, [r7, #96]	; 0x60
  pNodeConfig.DstAddress = 0;
 8005796:	2300      	movs	r3, #0
 8005798:	667b      	str	r3, [r7, #100]	; 0x64
  pNodeConfig.DataSize = 0;
 800579a:	2300      	movs	r3, #0
 800579c:	66bb      	str	r3, [r7, #104]	; 0x68

  /* Build DCMItoMemoryPing Node */
  ret |= HAL_DMAEx_List_BuildNode(&pNodeConfig, &DCMItoMemoryPing);
 800579e:	463b      	mov	r3, r7
 80057a0:	491e      	ldr	r1, [pc, #120]	; (800581c <MX_ProjectDMAQueue_Config+0xec>)
 80057a2:	4618      	mov	r0, r3
 80057a4:	f002 f8b4 	bl	8007910 <HAL_DMAEx_List_BuildNode>
 80057a8:	4603      	mov	r3, r0
 80057aa:	461a      	mov	r2, r3
 80057ac:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80057b0:	4313      	orrs	r3, r2
 80057b2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

  /* Insert DCMItoMemoryPing to Queue */
  ret |= HAL_DMAEx_List_InsertNode_Tail(&ProjectDMAQueue, &DCMItoMemoryPing);
 80057b6:	4919      	ldr	r1, [pc, #100]	; (800581c <MX_ProjectDMAQueue_Config+0xec>)
 80057b8:	4819      	ldr	r0, [pc, #100]	; (8005820 <MX_ProjectDMAQueue_Config+0xf0>)
 80057ba:	f002 f8bf 	bl	800793c <HAL_DMAEx_List_InsertNode_Tail>
 80057be:	4603      	mov	r3, r0
 80057c0:	461a      	mov	r2, r3
 80057c2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80057c6:	4313      	orrs	r3, r2
 80057c8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

  /* Set node configuration ################################################*/

  /* Build DCMItoMemoryPong Node */
  ret |= HAL_DMAEx_List_BuildNode(&pNodeConfig, &DCMItoMemoryPong);
 80057cc:	463b      	mov	r3, r7
 80057ce:	4915      	ldr	r1, [pc, #84]	; (8005824 <MX_ProjectDMAQueue_Config+0xf4>)
 80057d0:	4618      	mov	r0, r3
 80057d2:	f002 f89d 	bl	8007910 <HAL_DMAEx_List_BuildNode>
 80057d6:	4603      	mov	r3, r0
 80057d8:	461a      	mov	r2, r3
 80057da:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80057de:	4313      	orrs	r3, r2
 80057e0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

  /* Insert DCMItoMemoryPong to Queue */
  ret |= HAL_DMAEx_List_InsertNode_Tail(&ProjectDMAQueue, &DCMItoMemoryPong);
 80057e4:	490f      	ldr	r1, [pc, #60]	; (8005824 <MX_ProjectDMAQueue_Config+0xf4>)
 80057e6:	480e      	ldr	r0, [pc, #56]	; (8005820 <MX_ProjectDMAQueue_Config+0xf0>)
 80057e8:	f002 f8a8 	bl	800793c <HAL_DMAEx_List_InsertNode_Tail>
 80057ec:	4603      	mov	r3, r0
 80057ee:	461a      	mov	r2, r3
 80057f0:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80057f4:	4313      	orrs	r3, r2
 80057f6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

  ret |= HAL_DMAEx_List_SetCircularModeConfig(&ProjectDMAQueue, &DCMItoMemoryPing);
 80057fa:	4908      	ldr	r1, [pc, #32]	; (800581c <MX_ProjectDMAQueue_Config+0xec>)
 80057fc:	4808      	ldr	r0, [pc, #32]	; (8005820 <MX_ProjectDMAQueue_Config+0xf0>)
 80057fe:	f002 f915 	bl	8007a2c <HAL_DMAEx_List_SetCircularModeConfig>
 8005802:	4603      	mov	r3, r0
 8005804:	461a      	mov	r2, r3
 8005806:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800580a:	4313      	orrs	r3, r2
 800580c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

   return ret;
 8005810:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 8005814:	4618      	mov	r0, r3
 8005816:	3770      	adds	r7, #112	; 0x70
 8005818:	46bd      	mov	sp, r7
 800581a:	bd80      	pop	{r7, pc}
 800581c:	20002d54 	.word	0x20002d54
 8005820:	20002d78 	.word	0x20002d78
 8005824:	20002d90 	.word	0x20002d90

08005828 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8005828:	b580      	push	{r7, lr}
 800582a:	b082      	sub	sp, #8
 800582c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800582e:	f000 fe29 	bl	8006484 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8005832:	f000 f841 	bl	80058b8 <SystemClock_Config>

  /* Configure the System Power */
  SystemPower_Config();
 8005836:	f000 f89b 	bl	8005970 <SystemPower_Config>

  /* USER CODE BEGIN SysInit */
  __HAL_RCC_PWR_CLK_ENABLE();
 800583a:	4b1b      	ldr	r3, [pc, #108]	; (80058a8 <main+0x80>)
 800583c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005840:	4a19      	ldr	r2, [pc, #100]	; (80058a8 <main+0x80>)
 8005842:	f043 0304 	orr.w	r3, r3, #4
 8005846:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800584a:	4b17      	ldr	r3, [pc, #92]	; (80058a8 <main+0x80>)
 800584c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005850:	f003 0304 	and.w	r3, r3, #4
 8005854:	607b      	str	r3, [r7, #4]
 8005856:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddA();
 8005858:	f005 fa56 	bl	800ad08 <HAL_PWREx_EnableVddA>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800585c:	f7ff fa38 	bl	8004cd0 <MX_GPIO_Init>
  //MX_DCMI_Init();
  //MX_GPDMA1_Init();
  //MX_OCTOSPI1_Init();
  MX_ICACHE_Init();
 8005860:	f7ff ff5a 	bl	8005718 <MX_ICACHE_Init>
  MX_DCACHE1_Init();
 8005864:	f7ff f896 	bl	8004994 <MX_DCACHE1_Init>
  //MX_I2C1_Init();
  //MX_I2C2_Init();
  MX_CORDIC_Init();
 8005868:	f7ff f85e 	bl	8004928 <MX_CORDIC_Init>
  MX_USART1_UART_Init();
 800586c:	f000 fd2c 	bl	80062c8 <MX_USART1_UART_Init>
  MX_TIM7_Init();
 8005870:	f000 fccc 	bl	800620c <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */
  printf("System Starting\r\n");
 8005874:	480d      	ldr	r0, [pc, #52]	; (80058ac <main+0x84>)
 8005876:	f00d f97d 	bl	8012b74 <puts>
  BSP_TempHumSensorInit();
 800587a:	f7fb fe4f 	bl	800151c <BSP_TempHumSensorInit>
  BSP_MagnetometerInit();
 800587e:	f7fb fed7 	bl	8001630 <BSP_MagnetometerInit>
  BSP_MotionSensorInit();
 8005882:	f7fb ff49 	bl	8001718 <BSP_MotionSensorInit>
  BSP_PressureSensorInit();
 8005886:	f7fb fe93 	bl	80015b0 <BSP_PressureSensorInit>
  BSP_RamInit();
 800588a:	f7fc f833 	bl	80018f4 <BSP_RamInit>
  BSP_CameraInit();
 800588e:	f7fb fdc6 	bl	800141e <BSP_CameraInit>
  printf("System Initialized\r\n");
 8005892:	4807      	ldr	r0, [pc, #28]	; (80058b0 <main+0x88>)
 8005894:	f00d f96e 	bl	8012b74 <puts>


  /***********Camera Test********/
  BSP_CameraStart((uint8_t*)CameraBuff);
 8005898:	4b06      	ldr	r3, [pc, #24]	; (80058b4 <main+0x8c>)
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	4618      	mov	r0, r3
 800589e:	f7fb fdcb 	bl	8001438 <BSP_CameraStart>

  /* USER CODE END 2 */

  MX_ThreadX_Init();
 80058a2:	f7fe fe3f 	bl	8004524 <MX_ThreadX_Init>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
 80058a6:	e7fe      	b.n	80058a6 <main+0x7e>
 80058a8:	46020c00 	.word	0x46020c00
 80058ac:	080135d0 	.word	0x080135d0
 80058b0:	080135e4 	.word	0x080135e4
 80058b4:	20000000 	.word	0x20000000

080058b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80058b8:	b580      	push	{r7, lr}
 80058ba:	b09e      	sub	sp, #120	; 0x78
 80058bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80058be:	f107 0318 	add.w	r3, r7, #24
 80058c2:	2260      	movs	r2, #96	; 0x60
 80058c4:	2100      	movs	r1, #0
 80058c6:	4618      	mov	r0, r3
 80058c8:	f00d f8de 	bl	8012a88 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80058cc:	463b      	mov	r3, r7
 80058ce:	2200      	movs	r2, #0
 80058d0:	601a      	str	r2, [r3, #0]
 80058d2:	605a      	str	r2, [r3, #4]
 80058d4:	609a      	str	r2, [r3, #8]
 80058d6:	60da      	str	r2, [r3, #12]
 80058d8:	611a      	str	r2, [r3, #16]
 80058da:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80058dc:	f44f 3040 	mov.w	r0, #196608	; 0x30000
 80058e0:	f005 f930 	bl	800ab44 <HAL_PWREx_ControlVoltageScaling>
 80058e4:	4603      	mov	r3, r0
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d001      	beq.n	80058ee <SystemClock_Config+0x36>
  {
    Error_Handler();
 80058ea:	f000 f873 	bl	80059d4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80058ee:	2310      	movs	r3, #16
 80058f0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80058f2:	2301      	movs	r3, #1
 80058f4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80058f6:	2310      	movs	r3, #16
 80058f8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_4;
 80058fa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80058fe:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005900:	2302      	movs	r3, #2
 8005902:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8005904:	2301      	movs	r3, #1
 8005906:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLMBOOST = RCC_PLLMBOOST_DIV1;
 8005908:	2300      	movs	r3, #0
 800590a:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLM = 1;
 800590c:	2301      	movs	r3, #1
 800590e:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 80;
 8005910:	2350      	movs	r3, #80	; 0x50
 8005912:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLP = 2;
 8005914:	2302      	movs	r3, #2
 8005916:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8005918:	2302      	movs	r3, #2
 800591a:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLR = 2;
 800591c:	2302      	movs	r3, #2
 800591e:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLLVCIRANGE_0;
 8005920:	2300      	movs	r3, #0
 8005922:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8005924:	2300      	movs	r3, #0
 8005926:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005928:	f107 0318 	add.w	r3, r7, #24
 800592c:	4618      	mov	r0, r3
 800592e:	f005 f9fb 	bl	800ad28 <HAL_RCC_OscConfig>
 8005932:	4603      	mov	r3, r0
 8005934:	2b00      	cmp	r3, #0
 8005936:	d001      	beq.n	800593c <SystemClock_Config+0x84>
  {
    Error_Handler();
 8005938:	f000 f84c 	bl	80059d4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800593c:	231f      	movs	r3, #31
 800593e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005940:	2303      	movs	r3, #3
 8005942:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005944:	2300      	movs	r3, #0
 8005946:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8005948:	2300      	movs	r3, #0
 800594a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800594c:	2300      	movs	r3, #0
 800594e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 8005950:	2300      	movs	r3, #0
 8005952:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8005954:	463b      	mov	r3, r7
 8005956:	2104      	movs	r1, #4
 8005958:	4618      	mov	r0, r3
 800595a:	f006 f8bb 	bl	800bad4 <HAL_RCC_ClockConfig>
 800595e:	4603      	mov	r3, r0
 8005960:	2b00      	cmp	r3, #0
 8005962:	d001      	beq.n	8005968 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8005964:	f000 f836 	bl	80059d4 <Error_Handler>
  }
}
 8005968:	bf00      	nop
 800596a:	3778      	adds	r7, #120	; 0x78
 800596c:	46bd      	mov	sp, r7
 800596e:	bd80      	pop	{r7, pc}

08005970 <SystemPower_Config>:
/**
  * @brief Power Configuration
  * @retval None
  */
static void SystemPower_Config(void)
{
 8005970:	b580      	push	{r7, lr}
 8005972:	af00      	add	r7, sp, #0
  HAL_PWREx_EnableVddIO2();
 8005974:	f005 f9b8 	bl	800ace8 <HAL_PWREx_EnableVddIO2>

  /*
   * Switch to SMPS regulator instead of LDO
   */
  if (HAL_PWREx_ConfigSupply(PWR_SMPS_SUPPLY) != HAL_OK)
 8005978:	2002      	movs	r0, #2
 800597a:	f005 f965 	bl	800ac48 <HAL_PWREx_ConfigSupply>
 800597e:	4603      	mov	r3, r0
 8005980:	2b00      	cmp	r3, #0
 8005982:	d001      	beq.n	8005988 <SystemPower_Config+0x18>
  {
    Error_Handler();
 8005984:	f000 f826 	bl	80059d4 <Error_Handler>
  }
}
 8005988:	bf00      	nop
 800598a:	bd80      	pop	{r7, pc}

0800598c <__io_putchar>:

/* USER CODE BEGIN 4 */
int __io_putchar(int ch)
{
 800598c:	b580      	push	{r7, lr}
 800598e:	b082      	sub	sp, #8
 8005990:	af00      	add	r7, sp, #0
 8005992:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 8005994:	1d39      	adds	r1, r7, #4
 8005996:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800599a:	2201      	movs	r2, #1
 800599c:	4803      	ldr	r0, [pc, #12]	; (80059ac <__io_putchar+0x20>)
 800599e:	f009 fde3 	bl	800f568 <HAL_UART_Transmit>
  return ch;
 80059a2:	687b      	ldr	r3, [r7, #4]
}
 80059a4:	4618      	mov	r0, r3
 80059a6:	3708      	adds	r7, #8
 80059a8:	46bd      	mov	sp, r7
 80059aa:	bd80      	pop	{r7, pc}
 80059ac:	20002eac 	.word	0x20002eac

080059b0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80059b0:	b580      	push	{r7, lr}
 80059b2:	b082      	sub	sp, #8
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	4a04      	ldr	r2, [pc, #16]	; (80059d0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80059be:	4293      	cmp	r3, r2
 80059c0:	d101      	bne.n	80059c6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80059c2:	f000 fd8d 	bl	80064e0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80059c6:	bf00      	nop
 80059c8:	3708      	adds	r7, #8
 80059ca:	46bd      	mov	sp, r7
 80059cc:	bd80      	pop	{r7, pc}
 80059ce:	bf00      	nop
 80059d0:	40001000 	.word	0x40001000

080059d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80059d4:	b480      	push	{r7}
 80059d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80059d8:	b672      	cpsid	i
}
 80059da:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80059dc:	e7fe      	b.n	80059dc <Error_Handler+0x8>
	...

080059e0 <HAL_OSPI_MspInit>:
  /* USER CODE END OCTOSPI1_Init 2 */

}

void HAL_OSPI_MspInit(OSPI_HandleTypeDef* ospiHandle)
{
 80059e0:	b580      	push	{r7, lr}
 80059e2:	b0c4      	sub	sp, #272	; 0x110
 80059e4:	af00      	add	r7, sp, #0
 80059e6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80059ea:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80059ee:	6018      	str	r0, [r3, #0]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80059f0:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80059f4:	2200      	movs	r2, #0
 80059f6:	601a      	str	r2, [r3, #0]
 80059f8:	605a      	str	r2, [r3, #4]
 80059fa:	609a      	str	r2, [r3, #8]
 80059fc:	60da      	str	r2, [r3, #12]
 80059fe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8005a00:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005a04:	22c8      	movs	r2, #200	; 0xc8
 8005a06:	2100      	movs	r1, #0
 8005a08:	4618      	mov	r0, r3
 8005a0a:	f00d f83d 	bl	8012a88 <memset>
  if(ospiHandle->Instance==OCTOSPI1)
 8005a0e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005a12:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	4aa4      	ldr	r2, [pc, #656]	; (8005cac <HAL_OSPI_MspInit+0x2cc>)
 8005a1c:	4293      	cmp	r3, r2
 8005a1e:	f040 813f 	bne.w	8005ca0 <HAL_OSPI_MspInit+0x2c0>

  /* USER CODE END OCTOSPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_OSPI;
 8005a22:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8005a26:	f04f 0300 	mov.w	r3, #0
 8005a2a:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    PeriphClkInit.OspiClockSelection = RCC_OSPICLKSOURCE_SYSCLK;
 8005a2e:	2300      	movs	r3, #0
 8005a30:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005a34:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005a38:	4618      	mov	r0, r3
 8005a3a:	f006 fc59 	bl	800c2f0 <HAL_RCCEx_PeriphCLKConfig>
 8005a3e:	4603      	mov	r3, r0
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d001      	beq.n	8005a48 <HAL_OSPI_MspInit+0x68>
    {
      Error_Handler();
 8005a44:	f7ff ffc6 	bl	80059d4 <Error_Handler>
    }

    /* OCTOSPI1 clock enable */
    __HAL_RCC_OSPIM_CLK_ENABLE();
 8005a48:	4b99      	ldr	r3, [pc, #612]	; (8005cb0 <HAL_OSPI_MspInit+0x2d0>)
 8005a4a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005a4e:	4a98      	ldr	r2, [pc, #608]	; (8005cb0 <HAL_OSPI_MspInit+0x2d0>)
 8005a50:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005a54:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8005a58:	4b95      	ldr	r3, [pc, #596]	; (8005cb0 <HAL_OSPI_MspInit+0x2d0>)
 8005a5a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005a5e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005a62:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005a64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    __HAL_RCC_OSPI1_CLK_ENABLE();
 8005a66:	4b92      	ldr	r3, [pc, #584]	; (8005cb0 <HAL_OSPI_MspInit+0x2d0>)
 8005a68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a6c:	4a90      	ldr	r2, [pc, #576]	; (8005cb0 <HAL_OSPI_MspInit+0x2d0>)
 8005a6e:	f043 0310 	orr.w	r3, r3, #16
 8005a72:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005a76:	4b8e      	ldr	r3, [pc, #568]	; (8005cb0 <HAL_OSPI_MspInit+0x2d0>)
 8005a78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a7c:	f003 0310 	and.w	r3, r3, #16
 8005a80:	62bb      	str	r3, [r7, #40]	; 0x28
 8005a82:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOI_CLK_ENABLE();
 8005a84:	4b8a      	ldr	r3, [pc, #552]	; (8005cb0 <HAL_OSPI_MspInit+0x2d0>)
 8005a86:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005a8a:	4a89      	ldr	r2, [pc, #548]	; (8005cb0 <HAL_OSPI_MspInit+0x2d0>)
 8005a8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005a90:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8005a94:	4b86      	ldr	r3, [pc, #536]	; (8005cb0 <HAL_OSPI_MspInit+0x2d0>)
 8005a96:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005a9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a9e:	627b      	str	r3, [r7, #36]	; 0x24
 8005aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8005aa2:	4b83      	ldr	r3, [pc, #524]	; (8005cb0 <HAL_OSPI_MspInit+0x2d0>)
 8005aa4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005aa8:	4a81      	ldr	r2, [pc, #516]	; (8005cb0 <HAL_OSPI_MspInit+0x2d0>)
 8005aaa:	f043 0310 	orr.w	r3, r3, #16
 8005aae:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8005ab2:	4b7f      	ldr	r3, [pc, #508]	; (8005cb0 <HAL_OSPI_MspInit+0x2d0>)
 8005ab4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005ab8:	f003 0310 	and.w	r3, r3, #16
 8005abc:	623b      	str	r3, [r7, #32]
 8005abe:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8005ac0:	4b7b      	ldr	r3, [pc, #492]	; (8005cb0 <HAL_OSPI_MspInit+0x2d0>)
 8005ac2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005ac6:	4a7a      	ldr	r2, [pc, #488]	; (8005cb0 <HAL_OSPI_MspInit+0x2d0>)
 8005ac8:	f043 0308 	orr.w	r3, r3, #8
 8005acc:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8005ad0:	4b77      	ldr	r3, [pc, #476]	; (8005cb0 <HAL_OSPI_MspInit+0x2d0>)
 8005ad2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005ad6:	f003 0308 	and.w	r3, r3, #8
 8005ada:	61fb      	str	r3, [r7, #28]
 8005adc:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8005ade:	4b74      	ldr	r3, [pc, #464]	; (8005cb0 <HAL_OSPI_MspInit+0x2d0>)
 8005ae0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005ae4:	4a72      	ldr	r2, [pc, #456]	; (8005cb0 <HAL_OSPI_MspInit+0x2d0>)
 8005ae6:	f043 0320 	orr.w	r3, r3, #32
 8005aea:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8005aee:	4b70      	ldr	r3, [pc, #448]	; (8005cb0 <HAL_OSPI_MspInit+0x2d0>)
 8005af0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005af4:	f003 0320 	and.w	r3, r3, #32
 8005af8:	61bb      	str	r3, [r7, #24]
 8005afa:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8005afc:	4b6c      	ldr	r3, [pc, #432]	; (8005cb0 <HAL_OSPI_MspInit+0x2d0>)
 8005afe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005b02:	4a6b      	ldr	r2, [pc, #428]	; (8005cb0 <HAL_OSPI_MspInit+0x2d0>)
 8005b04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b08:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8005b0c:	4b68      	ldr	r3, [pc, #416]	; (8005cb0 <HAL_OSPI_MspInit+0x2d0>)
 8005b0e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005b12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b16:	617b      	str	r3, [r7, #20]
 8005b18:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005b1a:	4b65      	ldr	r3, [pc, #404]	; (8005cb0 <HAL_OSPI_MspInit+0x2d0>)
 8005b1c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005b20:	4a63      	ldr	r2, [pc, #396]	; (8005cb0 <HAL_OSPI_MspInit+0x2d0>)
 8005b22:	f043 0304 	orr.w	r3, r3, #4
 8005b26:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8005b2a:	4b61      	ldr	r3, [pc, #388]	; (8005cb0 <HAL_OSPI_MspInit+0x2d0>)
 8005b2c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005b30:	f003 0204 	and.w	r2, r3, #4
 8005b34:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005b38:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8005b3c:	601a      	str	r2, [r3, #0]
 8005b3e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005b42:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8005b46:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005b48:	4b59      	ldr	r3, [pc, #356]	; (8005cb0 <HAL_OSPI_MspInit+0x2d0>)
 8005b4a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005b4e:	4a58      	ldr	r2, [pc, #352]	; (8005cb0 <HAL_OSPI_MspInit+0x2d0>)
 8005b50:	f043 0302 	orr.w	r3, r3, #2
 8005b54:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8005b58:	4b55      	ldr	r3, [pc, #340]	; (8005cb0 <HAL_OSPI_MspInit+0x2d0>)
 8005b5a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005b5e:	f003 0202 	and.w	r2, r3, #2
 8005b62:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005b66:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005b6a:	601a      	str	r2, [r3, #0]
 8005b6c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005b70:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005b74:	681b      	ldr	r3, [r3, #0]
    PF6     ------> OCTOSPIM_P1_IO3
    PC3     ------> OCTOSPIM_P1_IO6
    PB10     ------> OCTOSPIM_P1_CLK
    PB11     ------> OCTOSPIM_P1_NCS
    */
    GPIO_InitStruct.Pin = OCTOSPI_R_IO5_Pin;
 8005b76:	2301      	movs	r3, #1
 8005b78:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005b7c:	2302      	movs	r3, #2
 8005b7e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005b82:	2300      	movs	r3, #0
 8005b84:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005b88:	2303      	movs	r3, #3
 8005b8a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    GPIO_InitStruct.Alternate = GPIO_AF3_OCTOSPI1;
 8005b8e:	2303      	movs	r3, #3
 8005b90:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    HAL_GPIO_Init(OCTOSPI_R_IO5_GPIO_Port, &GPIO_InitStruct);
 8005b94:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8005b98:	4619      	mov	r1, r3
 8005b9a:	4846      	ldr	r0, [pc, #280]	; (8005cb4 <HAL_OSPI_MspInit+0x2d4>)
 8005b9c:	f002 fc30 	bl	8008400 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OCTOSPI_R_DQS_Pin;
 8005ba0:	2308      	movs	r3, #8
 8005ba2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005ba6:	2302      	movs	r3, #2
 8005ba8:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005bac:	2300      	movs	r3, #0
 8005bae:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005bb2:	2303      	movs	r3, #3
 8005bb4:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    GPIO_InitStruct.Alternate = GPIO_AF3_OCTOSPI1;
 8005bb8:	2303      	movs	r3, #3
 8005bba:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    HAL_GPIO_Init(OCTOSPI_R_DQS_GPIO_Port, &GPIO_InitStruct);
 8005bbe:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8005bc2:	4619      	mov	r1, r3
 8005bc4:	483c      	ldr	r0, [pc, #240]	; (8005cb8 <HAL_OSPI_MspInit+0x2d8>)
 8005bc6:	f002 fc1b 	bl	8008400 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OCTOSPI_R_IO7_Pin;
 8005bca:	2380      	movs	r3, #128	; 0x80
 8005bcc:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005bd0:	2302      	movs	r3, #2
 8005bd2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005bd6:	2300      	movs	r3, #0
 8005bd8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005bdc:	2303      	movs	r3, #3
 8005bde:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPI1;
 8005be2:	230a      	movs	r3, #10
 8005be4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    HAL_GPIO_Init(OCTOSPI_R_IO7_GPIO_Port, &GPIO_InitStruct);
 8005be8:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8005bec:	4619      	mov	r1, r3
 8005bee:	4833      	ldr	r0, [pc, #204]	; (8005cbc <HAL_OSPI_MspInit+0x2dc>)
 8005bf0:	f002 fc06 	bl	8008400 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OCTOSPI_R_IO0_Pin|OCTOSPI_R_IO2_Pin|OCTOSPI_R_IO1_Pin|OCTOSPI_R_IO3_Pin;
 8005bf4:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8005bf8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005bfc:	2302      	movs	r3, #2
 8005bfe:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c02:	2300      	movs	r3, #0
 8005c04:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005c08:	2303      	movs	r3, #3
 8005c0a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPI1;
 8005c0e:	230a      	movs	r3, #10
 8005c10:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8005c14:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8005c18:	4619      	mov	r1, r3
 8005c1a:	4829      	ldr	r0, [pc, #164]	; (8005cc0 <HAL_OSPI_MspInit+0x2e0>)
 8005c1c:	f002 fbf0 	bl	8008400 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OCTOSPI_R_IO4_Pin;
 8005c20:	2304      	movs	r3, #4
 8005c22:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005c26:	2302      	movs	r3, #2
 8005c28:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c2c:	2300      	movs	r3, #0
 8005c2e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005c32:	2303      	movs	r3, #3
 8005c34:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    GPIO_InitStruct.Alternate = GPIO_AF3_OCTOSPI1;
 8005c38:	2303      	movs	r3, #3
 8005c3a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    HAL_GPIO_Init(OCTOSPI_R_IO4_GPIO_Port, &GPIO_InitStruct);
 8005c3e:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8005c42:	4619      	mov	r1, r3
 8005c44:	481f      	ldr	r0, [pc, #124]	; (8005cc4 <HAL_OSPI_MspInit+0x2e4>)
 8005c46:	f002 fbdb 	bl	8008400 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OCTOSPI_R_IO6_Pin;
 8005c4a:	2308      	movs	r3, #8
 8005c4c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005c50:	2302      	movs	r3, #2
 8005c52:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c56:	2300      	movs	r3, #0
 8005c58:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005c5c:	2303      	movs	r3, #3
 8005c5e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPI1;
 8005c62:	230a      	movs	r3, #10
 8005c64:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    HAL_GPIO_Init(OCTOSPI_R_IO6_GPIO_Port, &GPIO_InitStruct);
 8005c68:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8005c6c:	4619      	mov	r1, r3
 8005c6e:	4816      	ldr	r0, [pc, #88]	; (8005cc8 <HAL_OSPI_MspInit+0x2e8>)
 8005c70:	f002 fbc6 	bl	8008400 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OCTOSPI_R_CLK_P_Pin|OCTOSPI_R_NCS_Pin;
 8005c74:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8005c78:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005c7c:	2302      	movs	r3, #2
 8005c7e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c82:	2300      	movs	r3, #0
 8005c84:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005c88:	2303      	movs	r3, #3
 8005c8a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPI1;
 8005c8e:	230a      	movs	r3, #10
 8005c90:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005c94:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8005c98:	4619      	mov	r1, r3
 8005c9a:	480c      	ldr	r0, [pc, #48]	; (8005ccc <HAL_OSPI_MspInit+0x2ec>)
 8005c9c:	f002 fbb0 	bl	8008400 <HAL_GPIO_Init>

  /* USER CODE BEGIN OCTOSPI1_MspInit 1 */

  /* USER CODE END OCTOSPI1_MspInit 1 */
  }
}
 8005ca0:	bf00      	nop
 8005ca2:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8005ca6:	46bd      	mov	sp, r7
 8005ca8:	bd80      	pop	{r7, pc}
 8005caa:	bf00      	nop
 8005cac:	420d1400 	.word	0x420d1400
 8005cb0:	46020c00 	.word	0x46020c00
 8005cb4:	42022000 	.word	0x42022000
 8005cb8:	42021000 	.word	0x42021000
 8005cbc:	42020c00 	.word	0x42020c00
 8005cc0:	42021400 	.word	0x42021400
 8005cc4:	42021c00 	.word	0x42021c00
 8005cc8:	42020800 	.word	0x42020800
 8005ccc:	42020400 	.word	0x42020400

08005cd0 <OSPI_RamInit>:
  /* USER CODE END OCTOSPI1_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void OSPI_RamInit(void){
 8005cd0:	b580      	push	{r7, lr}
 8005cd2:	b088      	sub	sp, #32
 8005cd4:	af00      	add	r7, sp, #0
	  OSPIM_CfgTypeDef sOspiManagerCfg = {0};
 8005cd6:	f107 0308 	add.w	r3, r7, #8
 8005cda:	2200      	movs	r2, #0
 8005cdc:	601a      	str	r2, [r3, #0]
 8005cde:	605a      	str	r2, [r3, #4]
 8005ce0:	609a      	str	r2, [r3, #8]
 8005ce2:	60da      	str	r2, [r3, #12]
 8005ce4:	611a      	str	r2, [r3, #16]
 8005ce6:	615a      	str	r2, [r3, #20]
	  HAL_OSPI_DLYB_CfgTypeDef HAL_OSPI_DLYB_Cfg_Struct = {0};
 8005ce8:	463b      	mov	r3, r7
 8005cea:	2200      	movs	r2, #0
 8005cec:	601a      	str	r2, [r3, #0]
 8005cee:	605a      	str	r2, [r3, #4]

	  hospi1.Instance = OCTOSPI1;
 8005cf0:	4b2a      	ldr	r3, [pc, #168]	; (8005d9c <OSPI_RamInit+0xcc>)
 8005cf2:	4a2b      	ldr	r2, [pc, #172]	; (8005da0 <OSPI_RamInit+0xd0>)
 8005cf4:	601a      	str	r2, [r3, #0]
	  hospi1.Init.FifoThreshold = 1;
 8005cf6:	4b29      	ldr	r3, [pc, #164]	; (8005d9c <OSPI_RamInit+0xcc>)
 8005cf8:	2201      	movs	r2, #1
 8005cfa:	605a      	str	r2, [r3, #4]
	  hospi1.Init.DualQuad = HAL_OSPI_DUALQUAD_DISABLE;
 8005cfc:	4b27      	ldr	r3, [pc, #156]	; (8005d9c <OSPI_RamInit+0xcc>)
 8005cfe:	2200      	movs	r2, #0
 8005d00:	609a      	str	r2, [r3, #8]
	  hospi1.Init.MemoryType = HAL_OSPI_MEMTYPE_APMEMORY;
 8005d02:	4b26      	ldr	r3, [pc, #152]	; (8005d9c <OSPI_RamInit+0xcc>)
 8005d04:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005d08:	60da      	str	r2, [r3, #12]
	  hospi1.Init.DeviceSize = 23;
 8005d0a:	4b24      	ldr	r3, [pc, #144]	; (8005d9c <OSPI_RamInit+0xcc>)
 8005d0c:	2217      	movs	r2, #23
 8005d0e:	611a      	str	r2, [r3, #16]
	  hospi1.Init.ChipSelectHighTime = 1;
 8005d10:	4b22      	ldr	r3, [pc, #136]	; (8005d9c <OSPI_RamInit+0xcc>)
 8005d12:	2201      	movs	r2, #1
 8005d14:	615a      	str	r2, [r3, #20]
	  hospi1.Init.FreeRunningClock = HAL_OSPI_FREERUNCLK_DISABLE;
 8005d16:	4b21      	ldr	r3, [pc, #132]	; (8005d9c <OSPI_RamInit+0xcc>)
 8005d18:	2200      	movs	r2, #0
 8005d1a:	619a      	str	r2, [r3, #24]
	  hospi1.Init.ClockMode = HAL_OSPI_CLOCK_MODE_0;
 8005d1c:	4b1f      	ldr	r3, [pc, #124]	; (8005d9c <OSPI_RamInit+0xcc>)
 8005d1e:	2200      	movs	r2, #0
 8005d20:	61da      	str	r2, [r3, #28]
	  hospi1.Init.WrapSize = HAL_OSPI_WRAP_NOT_SUPPORTED;
 8005d22:	4b1e      	ldr	r3, [pc, #120]	; (8005d9c <OSPI_RamInit+0xcc>)
 8005d24:	2200      	movs	r2, #0
 8005d26:	621a      	str	r2, [r3, #32]
	  hospi1.Init.ClockPrescaler = 2;
 8005d28:	4b1c      	ldr	r3, [pc, #112]	; (8005d9c <OSPI_RamInit+0xcc>)
 8005d2a:	2202      	movs	r2, #2
 8005d2c:	625a      	str	r2, [r3, #36]	; 0x24
	  hospi1.Init.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 8005d2e:	4b1b      	ldr	r3, [pc, #108]	; (8005d9c <OSPI_RamInit+0xcc>)
 8005d30:	2200      	movs	r2, #0
 8005d32:	629a      	str	r2, [r3, #40]	; 0x28
	  hospi1.Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_ENABLE;
 8005d34:	4b19      	ldr	r3, [pc, #100]	; (8005d9c <OSPI_RamInit+0xcc>)
 8005d36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d3a:	62da      	str	r2, [r3, #44]	; 0x2c
	  hospi1.Init.ChipSelectBoundary = 0;
 8005d3c:	4b17      	ldr	r3, [pc, #92]	; (8005d9c <OSPI_RamInit+0xcc>)
 8005d3e:	2200      	movs	r2, #0
 8005d40:	631a      	str	r2, [r3, #48]	; 0x30
	  hospi1.Init.DelayBlockBypass = HAL_OSPI_DELAY_BLOCK_USED;
 8005d42:	4b16      	ldr	r3, [pc, #88]	; (8005d9c <OSPI_RamInit+0xcc>)
 8005d44:	2200      	movs	r2, #0
 8005d46:	635a      	str	r2, [r3, #52]	; 0x34
	  hospi1.Init.MaxTran = 0;
 8005d48:	4b14      	ldr	r3, [pc, #80]	; (8005d9c <OSPI_RamInit+0xcc>)
 8005d4a:	2200      	movs	r2, #0
 8005d4c:	639a      	str	r2, [r3, #56]	; 0x38
	  hospi1.Init.Refresh = 320;
 8005d4e:	4b13      	ldr	r3, [pc, #76]	; (8005d9c <OSPI_RamInit+0xcc>)
 8005d50:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8005d54:	63da      	str	r2, [r3, #60]	; 0x3c
	  HAL_OSPI_Init(&hospi1);
 8005d56:	4811      	ldr	r0, [pc, #68]	; (8005d9c <OSPI_RamInit+0xcc>)
 8005d58:	f003 fcac 	bl	80096b4 <HAL_OSPI_Init>

	  sOspiManagerCfg.ClkPort = 1;
 8005d5c:	2301      	movs	r3, #1
 8005d5e:	60bb      	str	r3, [r7, #8]
	  sOspiManagerCfg.DQSPort = 1;
 8005d60:	2301      	movs	r3, #1
 8005d62:	60fb      	str	r3, [r7, #12]
	  sOspiManagerCfg.NCSPort = 1;
 8005d64:	2301      	movs	r3, #1
 8005d66:	613b      	str	r3, [r7, #16]
	  sOspiManagerCfg.IOLowPort = HAL_OSPIM_IOPORT_1_LOW;
 8005d68:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 8005d6c:	617b      	str	r3, [r7, #20]
	  sOspiManagerCfg.IOHighPort = HAL_OSPIM_IOPORT_1_HIGH;
 8005d6e:	4b0d      	ldr	r3, [pc, #52]	; (8005da4 <OSPI_RamInit+0xd4>)
 8005d70:	61bb      	str	r3, [r7, #24]
	  HAL_OSPIM_Config(&hospi1, &sOspiManagerCfg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE);
 8005d72:	f107 0308 	add.w	r3, r7, #8
 8005d76:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d7a:	4619      	mov	r1, r3
 8005d7c:	4807      	ldr	r0, [pc, #28]	; (8005d9c <OSPI_RamInit+0xcc>)
 8005d7e:	f003 feb3 	bl	8009ae8 <HAL_OSPIM_Config>

	  HAL_OSPI_DLYB_Cfg_Struct.Units = 0;
 8005d82:	2300      	movs	r3, #0
 8005d84:	603b      	str	r3, [r7, #0]
	  HAL_OSPI_DLYB_Cfg_Struct.PhaseSel = 0;
 8005d86:	2300      	movs	r3, #0
 8005d88:	607b      	str	r3, [r7, #4]
	  HAL_OSPI_DLYB_SetConfig(&hospi1, &HAL_OSPI_DLYB_Cfg_Struct);
 8005d8a:	463b      	mov	r3, r7
 8005d8c:	4619      	mov	r1, r3
 8005d8e:	4803      	ldr	r0, [pc, #12]	; (8005d9c <OSPI_RamInit+0xcc>)
 8005d90:	f004 fe10 	bl	800a9b4 <HAL_OSPI_DLYB_SetConfig>


}
 8005d94:	bf00      	nop
 8005d96:	3720      	adds	r7, #32
 8005d98:	46bd      	mov	sp, r7
 8005d9a:	bd80      	pop	{r7, pc}
 8005d9c:	20002db4 	.word	0x20002db4
 8005da0:	420d1400 	.word	0x420d1400
 8005da4:	01000001 	.word	0x01000001

08005da8 <OSPI_EnableMemMappedMode>:

void OSPI_EnableMemMappedMode(void){
 8005da8:	b580      	push	{r7, lr}
 8005daa:	b096      	sub	sp, #88	; 0x58
 8005dac:	af00      	add	r7, sp, #0
	OSPI_RegularCmdTypeDef sCommand;
	OSPI_MemoryMappedTypeDef sMemMappedCfg;
	  sCommand.OperationType      = HAL_OSPI_OPTYPE_WRITE_CFG;
 8005dae:	2302      	movs	r3, #2
 8005db0:	60bb      	str	r3, [r7, #8]
	  sCommand.FlashId            = HAL_OSPI_FLASH_ID_1;
 8005db2:	2300      	movs	r3, #0
 8005db4:	60fb      	str	r3, [r7, #12]
	  sCommand.Instruction        = WRITE_CMD;
 8005db6:	2380      	movs	r3, #128	; 0x80
 8005db8:	613b      	str	r3, [r7, #16]
	  sCommand.InstructionMode    = HAL_OSPI_INSTRUCTION_8_LINES;
 8005dba:	2304      	movs	r3, #4
 8005dbc:	617b      	str	r3, [r7, #20]
	  sCommand.InstructionSize    = HAL_OSPI_INSTRUCTION_8_BITS;
 8005dbe:	2300      	movs	r3, #0
 8005dc0:	61bb      	str	r3, [r7, #24]
	  sCommand.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8005dc2:	2300      	movs	r3, #0
 8005dc4:	61fb      	str	r3, [r7, #28]
	  sCommand.AddressMode        = HAL_OSPI_ADDRESS_8_LINES;
 8005dc6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005dca:	627b      	str	r3, [r7, #36]	; 0x24
	  sCommand.AddressSize        = HAL_OSPI_ADDRESS_32_BITS;
 8005dcc:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8005dd0:	62bb      	str	r3, [r7, #40]	; 0x28
	  sCommand.AddressDtrMode     = HAL_OSPI_ADDRESS_DTR_ENABLE;
 8005dd2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005dd6:	62fb      	str	r3, [r7, #44]	; 0x2c
	  sCommand.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 8005dd8:	2300      	movs	r3, #0
 8005dda:	637b      	str	r3, [r7, #52]	; 0x34
	  sCommand.DataMode           = HAL_OSPI_DATA_8_LINES;
 8005ddc:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8005de0:	643b      	str	r3, [r7, #64]	; 0x40
	  sCommand.DataDtrMode        = HAL_OSPI_DATA_DTR_ENABLE;
 8005de2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005de6:	64bb      	str	r3, [r7, #72]	; 0x48
	  sCommand.DummyCycles        = DUMMY_CLOCK_CYCLES_WRITE;
 8005de8:	2304      	movs	r3, #4
 8005dea:	64fb      	str	r3, [r7, #76]	; 0x4c
	  sCommand.DQSMode            = HAL_OSPI_DQS_ENABLE;
 8005dec:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8005df0:	653b      	str	r3, [r7, #80]	; 0x50
	  sCommand.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 8005df2:	2300      	movs	r3, #0
 8005df4:	657b      	str	r3, [r7, #84]	; 0x54

	  if (HAL_OSPI_Command(&hospi1, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005df6:	f107 0308 	add.w	r3, r7, #8
 8005dfa:	f241 3288 	movw	r2, #5000	; 0x1388
 8005dfe:	4619      	mov	r1, r3
 8005e00:	4816      	ldr	r0, [pc, #88]	; (8005e5c <OSPI_EnableMemMappedMode+0xb4>)
 8005e02:	f003 fd13 	bl	800982c <HAL_OSPI_Command>
 8005e06:	4603      	mov	r3, r0
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d001      	beq.n	8005e10 <OSPI_EnableMemMappedMode+0x68>
	  {
	    Error_Handler();
 8005e0c:	f7ff fde2 	bl	80059d4 <Error_Handler>
	  }

	  sCommand.OperationType = HAL_OSPI_OPTYPE_READ_CFG;
 8005e10:	2301      	movs	r3, #1
 8005e12:	60bb      	str	r3, [r7, #8]
	  sCommand.Instruction   = READ_CMD;
 8005e14:	2300      	movs	r3, #0
 8005e16:	613b      	str	r3, [r7, #16]
	  sCommand.DummyCycles   = DUMMY_CLOCK_CYCLES_READ;
 8005e18:	2305      	movs	r3, #5
 8005e1a:	64fb      	str	r3, [r7, #76]	; 0x4c

	  if (HAL_OSPI_Command(&hospi1, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005e1c:	f107 0308 	add.w	r3, r7, #8
 8005e20:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e24:	4619      	mov	r1, r3
 8005e26:	480d      	ldr	r0, [pc, #52]	; (8005e5c <OSPI_EnableMemMappedMode+0xb4>)
 8005e28:	f003 fd00 	bl	800982c <HAL_OSPI_Command>
 8005e2c:	4603      	mov	r3, r0
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d001      	beq.n	8005e36 <OSPI_EnableMemMappedMode+0x8e>
	  {
	    Error_Handler();
 8005e32:	f7ff fdcf 	bl	80059d4 <Error_Handler>
	  }

	  sMemMappedCfg.TimeOutActivation = HAL_OSPI_TIMEOUT_COUNTER_ENABLE;
 8005e36:	2308      	movs	r3, #8
 8005e38:	603b      	str	r3, [r7, #0]
	  sMemMappedCfg.TimeOutPeriod     = 0x34;
 8005e3a:	2334      	movs	r3, #52	; 0x34
 8005e3c:	607b      	str	r3, [r7, #4]

	  if (HAL_OSPI_MemoryMapped(&hospi1, &sMemMappedCfg) != HAL_OK)
 8005e3e:	463b      	mov	r3, r7
 8005e40:	4619      	mov	r1, r3
 8005e42:	4806      	ldr	r0, [pc, #24]	; (8005e5c <OSPI_EnableMemMappedMode+0xb4>)
 8005e44:	f003 fd7f 	bl	8009946 <HAL_OSPI_MemoryMapped>
 8005e48:	4603      	mov	r3, r0
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d001      	beq.n	8005e52 <OSPI_EnableMemMappedMode+0xaa>
	  {
	    Error_Handler();
 8005e4e:	f7ff fdc1 	bl	80059d4 <Error_Handler>
	  }
}
 8005e52:	bf00      	nop
 8005e54:	3758      	adds	r7, #88	; 0x58
 8005e56:	46bd      	mov	sp, r7
 8005e58:	bd80      	pop	{r7, pc}
 8005e5a:	bf00      	nop
 8005e5c:	20002db4 	.word	0x20002db4

08005e60 <OSPI_DelayBlockConfig>:

void OSPI_DelayBlockConfig(void){
 8005e60:	b580      	push	{r7, lr}
 8005e62:	b084      	sub	sp, #16
 8005e64:	af00      	add	r7, sp, #0
	  LL_DLYB_CfgTypeDef dlyb_cfg,dlyb_cfg_test;
	  /* Delay block configuration ------------------------------------------------ */
	  HAL_OSPI_DLYB_GetClockPeriod(&hospi1,&dlyb_cfg);
 8005e66:	f107 0308 	add.w	r3, r7, #8
 8005e6a:	4619      	mov	r1, r3
 8005e6c:	4813      	ldr	r0, [pc, #76]	; (8005ebc <OSPI_DelayBlockConfig+0x5c>)
 8005e6e:	f004 fe15 	bl	800aa9c <HAL_OSPI_DLYB_GetClockPeriod>

	  /*when DTR, PhaseSel is divided by 4 (emperic value)*/
	  dlyb_cfg.PhaseSel /=4;
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	089b      	lsrs	r3, r3, #2
 8005e76:	60fb      	str	r3, [r7, #12]

	  /* save the present configuration for check*/
	  dlyb_cfg_test = dlyb_cfg;
 8005e78:	463b      	mov	r3, r7
 8005e7a:	f107 0208 	add.w	r2, r7, #8
 8005e7e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005e82:	e883 0003 	stmia.w	r3, {r0, r1}

	  /*set delay block configuration*/
	  HAL_OSPI_DLYB_SetConfig(&hospi1,&dlyb_cfg);
 8005e86:	f107 0308 	add.w	r3, r7, #8
 8005e8a:	4619      	mov	r1, r3
 8005e8c:	480b      	ldr	r0, [pc, #44]	; (8005ebc <OSPI_DelayBlockConfig+0x5c>)
 8005e8e:	f004 fd91 	bl	800a9b4 <HAL_OSPI_DLYB_SetConfig>

	  /*check the set value*/
	  HAL_OSPI_DLYB_GetConfig(&hospi1,&dlyb_cfg);
 8005e92:	f107 0308 	add.w	r3, r7, #8
 8005e96:	4619      	mov	r1, r3
 8005e98:	4808      	ldr	r0, [pc, #32]	; (8005ebc <OSPI_DelayBlockConfig+0x5c>)
 8005e9a:	f004 fdd3 	bl	800aa44 <HAL_OSPI_DLYB_GetConfig>
	  if ((dlyb_cfg.PhaseSel != dlyb_cfg_test.PhaseSel) || (dlyb_cfg.Units != dlyb_cfg_test.Units))
 8005e9e:	68fa      	ldr	r2, [r7, #12]
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	429a      	cmp	r2, r3
 8005ea4:	d103      	bne.n	8005eae <OSPI_DelayBlockConfig+0x4e>
 8005ea6:	68ba      	ldr	r2, [r7, #8]
 8005ea8:	683b      	ldr	r3, [r7, #0]
 8005eaa:	429a      	cmp	r2, r3
 8005eac:	d001      	beq.n	8005eb2 <OSPI_DelayBlockConfig+0x52>
	  {
	    Error_Handler();
 8005eae:	f7ff fd91 	bl	80059d4 <Error_Handler>
	  }
}
 8005eb2:	bf00      	nop
 8005eb4:	3710      	adds	r7, #16
 8005eb6:	46bd      	mov	sp, r7
 8005eb8:	bd80      	pop	{r7, pc}
 8005eba:	bf00      	nop
 8005ebc:	20002db4 	.word	0x20002db4

08005ec0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005ec0:	b480      	push	{r7}
 8005ec2:	b083      	sub	sp, #12
 8005ec4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8005ec6:	4b0a      	ldr	r3, [pc, #40]	; (8005ef0 <HAL_MspInit+0x30>)
 8005ec8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005ecc:	4a08      	ldr	r2, [pc, #32]	; (8005ef0 <HAL_MspInit+0x30>)
 8005ece:	f043 0304 	orr.w	r3, r3, #4
 8005ed2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8005ed6:	4b06      	ldr	r3, [pc, #24]	; (8005ef0 <HAL_MspInit+0x30>)
 8005ed8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005edc:	f003 0304 	and.w	r3, r3, #4
 8005ee0:	607b      	str	r3, [r7, #4]
 8005ee2:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005ee4:	bf00      	nop
 8005ee6:	370c      	adds	r7, #12
 8005ee8:	46bd      	mov	sp, r7
 8005eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eee:	4770      	bx	lr
 8005ef0:	46020c00 	.word	0x46020c00

08005ef4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005ef4:	b580      	push	{r7, lr}
 8005ef6:	b08e      	sub	sp, #56	; 0x38
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8005efc:	2300      	movs	r3, #0
 8005efe:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t              uwPrescalerValue = 0;
 8005f00:	2300      	movs	r3, #0
 8005f02:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8005f04:	4b2e      	ldr	r3, [pc, #184]	; (8005fc0 <HAL_InitTick+0xcc>)
 8005f06:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005f0a:	4a2d      	ldr	r2, [pc, #180]	; (8005fc0 <HAL_InitTick+0xcc>)
 8005f0c:	f043 0310 	orr.w	r3, r3, #16
 8005f10:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8005f14:	4b2a      	ldr	r3, [pc, #168]	; (8005fc0 <HAL_InitTick+0xcc>)
 8005f16:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005f1a:	f003 0310 	and.w	r3, r3, #16
 8005f1e:	60fb      	str	r3, [r7, #12]
 8005f20:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8005f22:	f107 0210 	add.w	r2, r7, #16
 8005f26:	f107 0314 	add.w	r3, r7, #20
 8005f2a:	4611      	mov	r1, r2
 8005f2c:	4618      	mov	r0, r3
 8005f2e:	f006 f921 	bl	800c174 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8005f32:	f006 f8e3 	bl	800c0fc <HAL_RCC_GetPCLK1Freq>
 8005f36:	6338      	str	r0, [r7, #48]	; 0x30
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8005f38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f3a:	4a22      	ldr	r2, [pc, #136]	; (8005fc4 <HAL_InitTick+0xd0>)
 8005f3c:	fba2 2303 	umull	r2, r3, r2, r3
 8005f40:	0c9b      	lsrs	r3, r3, #18
 8005f42:	3b01      	subs	r3, #1
 8005f44:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8005f46:	4b20      	ldr	r3, [pc, #128]	; (8005fc8 <HAL_InitTick+0xd4>)
 8005f48:	4a20      	ldr	r2, [pc, #128]	; (8005fcc <HAL_InitTick+0xd8>)
 8005f4a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8005f4c:	4b1e      	ldr	r3, [pc, #120]	; (8005fc8 <HAL_InitTick+0xd4>)
 8005f4e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8005f52:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8005f54:	4a1c      	ldr	r2, [pc, #112]	; (8005fc8 <HAL_InitTick+0xd4>)
 8005f56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f58:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8005f5a:	4b1b      	ldr	r3, [pc, #108]	; (8005fc8 <HAL_InitTick+0xd4>)
 8005f5c:	2200      	movs	r2, #0
 8005f5e:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005f60:	4b19      	ldr	r3, [pc, #100]	; (8005fc8 <HAL_InitTick+0xd4>)
 8005f62:	2200      	movs	r2, #0
 8005f64:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
 8005f66:	4818      	ldr	r0, [pc, #96]	; (8005fc8 <HAL_InitTick+0xd4>)
 8005f68:	f008 fe0c 	bl	800eb84 <HAL_TIM_Base_Init>
 8005f6c:	4603      	mov	r3, r0
 8005f6e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  if (status == HAL_OK)
 8005f72:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d118      	bne.n	8005fac <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8005f7a:	4813      	ldr	r0, [pc, #76]	; (8005fc8 <HAL_InitTick+0xd4>)
 8005f7c:	f008 fe5a 	bl	800ec34 <HAL_TIM_Base_Start_IT>
 8005f80:	4603      	mov	r3, r0
 8005f82:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if (status == HAL_OK)
 8005f86:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d10e      	bne.n	8005fac <HAL_InitTick+0xb8>
    {
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	2b0f      	cmp	r3, #15
 8005f92:	d808      	bhi.n	8005fa6 <HAL_InitTick+0xb2>
      {
        /* Enable the TIM6 global Interrupt */
        HAL_NVIC_SetPriority(TIM6_IRQn, TickPriority, 0U);
 8005f94:	2200      	movs	r2, #0
 8005f96:	6879      	ldr	r1, [r7, #4]
 8005f98:	2031      	movs	r0, #49	; 0x31
 8005f9a:	f000 fbcf 	bl	800673c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8005f9e:	4a0c      	ldr	r2, [pc, #48]	; (8005fd0 <HAL_InitTick+0xdc>)
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	6013      	str	r3, [r2, #0]
 8005fa4:	e002      	b.n	8005fac <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 8005fa6:	2301      	movs	r3, #1
 8005fa8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
      }
    }
  }
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_IRQn);
 8005fac:	2031      	movs	r0, #49	; 0x31
 8005fae:	f000 fbdf 	bl	8006770 <HAL_NVIC_EnableIRQ>

 /* Return function status */
  return status;
 8005fb2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 8005fb6:	4618      	mov	r0, r3
 8005fb8:	3738      	adds	r7, #56	; 0x38
 8005fba:	46bd      	mov	sp, r7
 8005fbc:	bd80      	pop	{r7, pc}
 8005fbe:	bf00      	nop
 8005fc0:	46020c00 	.word	0x46020c00
 8005fc4:	431bde83 	.word	0x431bde83
 8005fc8:	20002e10 	.word	0x20002e10
 8005fcc:	40001000 	.word	0x40001000
 8005fd0:	20000008 	.word	0x20000008

08005fd4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005fd4:	b480      	push	{r7}
 8005fd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8005fd8:	e7fe      	b.n	8005fd8 <NMI_Handler+0x4>

08005fda <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005fda:	b480      	push	{r7}
 8005fdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005fde:	e7fe      	b.n	8005fde <HardFault_Handler+0x4>

08005fe0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005fe0:	b480      	push	{r7}
 8005fe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005fe4:	e7fe      	b.n	8005fe4 <MemManage_Handler+0x4>

08005fe6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005fe6:	b480      	push	{r7}
 8005fe8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005fea:	e7fe      	b.n	8005fea <BusFault_Handler+0x4>

08005fec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005fec:	b480      	push	{r7}
 8005fee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005ff0:	e7fe      	b.n	8005ff0 <UsageFault_Handler+0x4>

08005ff2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005ff2:	b480      	push	{r7}
 8005ff4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005ff6:	bf00      	nop
 8005ff8:	46bd      	mov	sp, r7
 8005ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ffe:	4770      	bx	lr

08006000 <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 8006000:	b580      	push	{r7, lr}
 8006002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8006004:	4802      	ldr	r0, [pc, #8]	; (8006010 <TIM6_IRQHandler+0x10>)
 8006006:	f008 feb5 	bl	800ed74 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 800600a:	bf00      	nop
 800600c:	bd80      	pop	{r7, pc}
 800600e:	bf00      	nop
 8006010:	20002e10 	.word	0x20002e10

08006014 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8006014:	b580      	push	{r7, lr}
 8006016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8006018:	4803      	ldr	r0, [pc, #12]	; (8006028 <TIM7_IRQHandler+0x14>)
 800601a:	f008 feab 	bl	800ed74 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */
  TIM7_ResumeMotionThread();
 800601e:	f7fe fc75 	bl	800490c <TIM7_ResumeMotionThread>
  /* USER CODE END TIM7_IRQn 1 */
}
 8006022:	bf00      	nop
 8006024:	bd80      	pop	{r7, pc}
 8006026:	bf00      	nop
 8006028:	20002e60 	.word	0x20002e60

0800602c <GPDMA1_Channel12_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 12 global interrupt.
  */
void GPDMA1_Channel12_IRQHandler(void)
{
 800602c:	b580      	push	{r7, lr}
 800602e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel12_IRQn 0 */

  /* USER CODE END GPDMA1_Channel12_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel12);
 8006030:	4802      	ldr	r0, [pc, #8]	; (800603c <GPDMA1_Channel12_IRQHandler+0x10>)
 8006032:	f001 f8d5 	bl	80071e0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel12_IRQn 1 */

  /* USER CODE END GPDMA1_Channel12_IRQn 1 */
}
 8006036:	bf00      	nop
 8006038:	bd80      	pop	{r7, pc}
 800603a:	bf00      	nop
 800603c:	20002c44 	.word	0x20002c44

08006040 <DCMI_PSSI_IRQHandler>:

/**
  * @brief This function handles DCMI/PSSI global interrupt.
  */
void DCMI_PSSI_IRQHandler(void)
{
 8006040:	b580      	push	{r7, lr}
 8006042:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DCMI_PSSI_IRQn 0 */

  /* USER CODE END DCMI_PSSI_IRQn 0 */
  HAL_DCMI_IRQHandler(&hdcmi);
 8006044:	4802      	ldr	r0, [pc, #8]	; (8006050 <DCMI_PSSI_IRQHandler+0x10>)
 8006046:	f000 fe73 	bl	8006d30 <HAL_DCMI_IRQHandler>
  /* USER CODE BEGIN DCMI_PSSI_IRQn 1 */

  /* USER CODE END DCMI_PSSI_IRQn 1 */
}
 800604a:	bf00      	nop
 800604c:	bd80      	pop	{r7, pc}
 800604e:	bf00      	nop
 8006050:	20002bf4 	.word	0x20002bf4

08006054 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8006054:	b580      	push	{r7, lr}
 8006056:	b086      	sub	sp, #24
 8006058:	af00      	add	r7, sp, #0
 800605a:	60f8      	str	r0, [r7, #12]
 800605c:	60b9      	str	r1, [r7, #8]
 800605e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006060:	2300      	movs	r3, #0
 8006062:	617b      	str	r3, [r7, #20]
 8006064:	e00a      	b.n	800607c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8006066:	e000      	b.n	800606a <_read+0x16>
 8006068:	bf00      	nop
 800606a:	4601      	mov	r1, r0
 800606c:	68bb      	ldr	r3, [r7, #8]
 800606e:	1c5a      	adds	r2, r3, #1
 8006070:	60ba      	str	r2, [r7, #8]
 8006072:	b2ca      	uxtb	r2, r1
 8006074:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006076:	697b      	ldr	r3, [r7, #20]
 8006078:	3301      	adds	r3, #1
 800607a:	617b      	str	r3, [r7, #20]
 800607c:	697a      	ldr	r2, [r7, #20]
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	429a      	cmp	r2, r3
 8006082:	dbf0      	blt.n	8006066 <_read+0x12>
	}

return len;
 8006084:	687b      	ldr	r3, [r7, #4]
}
 8006086:	4618      	mov	r0, r3
 8006088:	3718      	adds	r7, #24
 800608a:	46bd      	mov	sp, r7
 800608c:	bd80      	pop	{r7, pc}

0800608e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800608e:	b580      	push	{r7, lr}
 8006090:	b086      	sub	sp, #24
 8006092:	af00      	add	r7, sp, #0
 8006094:	60f8      	str	r0, [r7, #12]
 8006096:	60b9      	str	r1, [r7, #8]
 8006098:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800609a:	2300      	movs	r3, #0
 800609c:	617b      	str	r3, [r7, #20]
 800609e:	e009      	b.n	80060b4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80060a0:	68bb      	ldr	r3, [r7, #8]
 80060a2:	1c5a      	adds	r2, r3, #1
 80060a4:	60ba      	str	r2, [r7, #8]
 80060a6:	781b      	ldrb	r3, [r3, #0]
 80060a8:	4618      	mov	r0, r3
 80060aa:	f7ff fc6f 	bl	800598c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80060ae:	697b      	ldr	r3, [r7, #20]
 80060b0:	3301      	adds	r3, #1
 80060b2:	617b      	str	r3, [r7, #20]
 80060b4:	697a      	ldr	r2, [r7, #20]
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	429a      	cmp	r2, r3
 80060ba:	dbf1      	blt.n	80060a0 <_write+0x12>
	}
	return len;
 80060bc:	687b      	ldr	r3, [r7, #4]
}
 80060be:	4618      	mov	r0, r3
 80060c0:	3718      	adds	r7, #24
 80060c2:	46bd      	mov	sp, r7
 80060c4:	bd80      	pop	{r7, pc}

080060c6 <_close>:

int _close(int file)
{
 80060c6:	b480      	push	{r7}
 80060c8:	b083      	sub	sp, #12
 80060ca:	af00      	add	r7, sp, #0
 80060cc:	6078      	str	r0, [r7, #4]
	return -1;
 80060ce:	f04f 33ff 	mov.w	r3, #4294967295
}
 80060d2:	4618      	mov	r0, r3
 80060d4:	370c      	adds	r7, #12
 80060d6:	46bd      	mov	sp, r7
 80060d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060dc:	4770      	bx	lr

080060de <_fstat>:


int _fstat(int file, struct stat *st)
{
 80060de:	b480      	push	{r7}
 80060e0:	b083      	sub	sp, #12
 80060e2:	af00      	add	r7, sp, #0
 80060e4:	6078      	str	r0, [r7, #4]
 80060e6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80060e8:	683b      	ldr	r3, [r7, #0]
 80060ea:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80060ee:	605a      	str	r2, [r3, #4]
	return 0;
 80060f0:	2300      	movs	r3, #0
}
 80060f2:	4618      	mov	r0, r3
 80060f4:	370c      	adds	r7, #12
 80060f6:	46bd      	mov	sp, r7
 80060f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060fc:	4770      	bx	lr

080060fe <_isatty>:

int _isatty(int file)
{
 80060fe:	b480      	push	{r7}
 8006100:	b083      	sub	sp, #12
 8006102:	af00      	add	r7, sp, #0
 8006104:	6078      	str	r0, [r7, #4]
	return 1;
 8006106:	2301      	movs	r3, #1
}
 8006108:	4618      	mov	r0, r3
 800610a:	370c      	adds	r7, #12
 800610c:	46bd      	mov	sp, r7
 800610e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006112:	4770      	bx	lr

08006114 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8006114:	b480      	push	{r7}
 8006116:	b085      	sub	sp, #20
 8006118:	af00      	add	r7, sp, #0
 800611a:	60f8      	str	r0, [r7, #12]
 800611c:	60b9      	str	r1, [r7, #8]
 800611e:	607a      	str	r2, [r7, #4]
	return 0;
 8006120:	2300      	movs	r3, #0
}
 8006122:	4618      	mov	r0, r3
 8006124:	3714      	adds	r7, #20
 8006126:	46bd      	mov	sp, r7
 8006128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800612c:	4770      	bx	lr
	...

08006130 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8006130:	b580      	push	{r7, lr}
 8006132:	b086      	sub	sp, #24
 8006134:	af00      	add	r7, sp, #0
 8006136:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8006138:	4a14      	ldr	r2, [pc, #80]	; (800618c <_sbrk+0x5c>)
 800613a:	4b15      	ldr	r3, [pc, #84]	; (8006190 <_sbrk+0x60>)
 800613c:	1ad3      	subs	r3, r2, r3
 800613e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8006140:	697b      	ldr	r3, [r7, #20]
 8006142:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8006144:	4b13      	ldr	r3, [pc, #76]	; (8006194 <_sbrk+0x64>)
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	2b00      	cmp	r3, #0
 800614a:	d102      	bne.n	8006152 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800614c:	4b11      	ldr	r3, [pc, #68]	; (8006194 <_sbrk+0x64>)
 800614e:	4a12      	ldr	r2, [pc, #72]	; (8006198 <_sbrk+0x68>)
 8006150:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8006152:	4b10      	ldr	r3, [pc, #64]	; (8006194 <_sbrk+0x64>)
 8006154:	681a      	ldr	r2, [r3, #0]
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	4413      	add	r3, r2
 800615a:	693a      	ldr	r2, [r7, #16]
 800615c:	429a      	cmp	r2, r3
 800615e:	d207      	bcs.n	8006170 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8006160:	f00c fc68 	bl	8012a34 <__errno>
 8006164:	4603      	mov	r3, r0
 8006166:	220c      	movs	r2, #12
 8006168:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800616a:	f04f 33ff 	mov.w	r3, #4294967295
 800616e:	e009      	b.n	8006184 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8006170:	4b08      	ldr	r3, [pc, #32]	; (8006194 <_sbrk+0x64>)
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8006176:	4b07      	ldr	r3, [pc, #28]	; (8006194 <_sbrk+0x64>)
 8006178:	681a      	ldr	r2, [r3, #0]
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	4413      	add	r3, r2
 800617e:	4a05      	ldr	r2, [pc, #20]	; (8006194 <_sbrk+0x64>)
 8006180:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8006182:	68fb      	ldr	r3, [r7, #12]
}
 8006184:	4618      	mov	r0, r3
 8006186:	3718      	adds	r7, #24
 8006188:	46bd      	mov	sp, r7
 800618a:	bd80      	pop	{r7, pc}
 800618c:	200c0000 	.word	0x200c0000
 8006190:	00000400 	.word	0x00000400
 8006194:	20002e5c 	.word	0x20002e5c
 8006198:	20003590 	.word	0x20003590

0800619c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800619c:	b480      	push	{r7}
 800619e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80061a0:	4b18      	ldr	r3, [pc, #96]	; (8006204 <SystemInit+0x68>)
 80061a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061a6:	4a17      	ldr	r2, [pc, #92]	; (8006204 <SystemInit+0x68>)
 80061a8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80061ac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 80061b0:	4b15      	ldr	r3, [pc, #84]	; (8006208 <SystemInit+0x6c>)
 80061b2:	2201      	movs	r2, #1
 80061b4:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 80061b6:	4b14      	ldr	r3, [pc, #80]	; (8006208 <SystemInit+0x6c>)
 80061b8:	2200      	movs	r2, #0
 80061ba:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 80061bc:	4b12      	ldr	r3, [pc, #72]	; (8006208 <SystemInit+0x6c>)
 80061be:	2200      	movs	r2, #0
 80061c0:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 80061c2:	4b11      	ldr	r3, [pc, #68]	; (8006208 <SystemInit+0x6c>)
 80061c4:	2200      	movs	r2, #0
 80061c6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 80061c8:	4b0f      	ldr	r3, [pc, #60]	; (8006208 <SystemInit+0x6c>)
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	4a0e      	ldr	r2, [pc, #56]	; (8006208 <SystemInit+0x6c>)
 80061ce:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80061d2:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80061d6:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 80061d8:	4b0b      	ldr	r3, [pc, #44]	; (8006208 <SystemInit+0x6c>)
 80061da:	2200      	movs	r2, #0
 80061dc:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 80061de:	4b0a      	ldr	r3, [pc, #40]	; (8006208 <SystemInit+0x6c>)
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	4a09      	ldr	r2, [pc, #36]	; (8006208 <SystemInit+0x6c>)
 80061e4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80061e8:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 80061ea:	4b07      	ldr	r3, [pc, #28]	; (8006208 <SystemInit+0x6c>)
 80061ec:	2200      	movs	r2, #0
 80061ee:	651a      	str	r2, [r3, #80]	; 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80061f0:	4b04      	ldr	r3, [pc, #16]	; (8006204 <SystemInit+0x68>)
 80061f2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80061f6:	609a      	str	r2, [r3, #8]
  #endif
}
 80061f8:	bf00      	nop
 80061fa:	46bd      	mov	sp, r7
 80061fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006200:	4770      	bx	lr
 8006202:	bf00      	nop
 8006204:	e000ed00 	.word	0xe000ed00
 8006208:	46020c00 	.word	0x46020c00

0800620c <MX_TIM7_Init>:

TIM_HandleTypeDef htim7;

/* TIM7 init function */
void MX_TIM7_Init(void)
{
 800620c:	b580      	push	{r7, lr}
 800620e:	b084      	sub	sp, #16
 8006210:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006212:	1d3b      	adds	r3, r7, #4
 8006214:	2200      	movs	r2, #0
 8006216:	601a      	str	r2, [r3, #0]
 8006218:	605a      	str	r2, [r3, #4]
 800621a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 800621c:	4b14      	ldr	r3, [pc, #80]	; (8006270 <MX_TIM7_Init+0x64>)
 800621e:	4a15      	ldr	r2, [pc, #84]	; (8006274 <MX_TIM7_Init+0x68>)
 8006220:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 54944;
 8006222:	4b13      	ldr	r3, [pc, #76]	; (8006270 <MX_TIM7_Init+0x64>)
 8006224:	f24d 62a0 	movw	r2, #54944	; 0xd6a0
 8006228:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800622a:	4b11      	ldr	r3, [pc, #68]	; (8006270 <MX_TIM7_Init+0x64>)
 800622c:	2200      	movs	r2, #0
 800622e:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 51;
 8006230:	4b0f      	ldr	r3, [pc, #60]	; (8006270 <MX_TIM7_Init+0x64>)
 8006232:	2233      	movs	r2, #51	; 0x33
 8006234:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006236:	4b0e      	ldr	r3, [pc, #56]	; (8006270 <MX_TIM7_Init+0x64>)
 8006238:	2200      	movs	r2, #0
 800623a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 800623c:	480c      	ldr	r0, [pc, #48]	; (8006270 <MX_TIM7_Init+0x64>)
 800623e:	f008 fca1 	bl	800eb84 <HAL_TIM_Base_Init>
 8006242:	4603      	mov	r3, r0
 8006244:	2b00      	cmp	r3, #0
 8006246:	d001      	beq.n	800624c <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8006248:	f7ff fbc4 	bl	80059d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800624c:	2300      	movs	r3, #0
 800624e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006250:	2300      	movs	r3, #0
 8006252:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8006254:	1d3b      	adds	r3, r7, #4
 8006256:	4619      	mov	r1, r3
 8006258:	4805      	ldr	r0, [pc, #20]	; (8006270 <MX_TIM7_Init+0x64>)
 800625a:	f009 f82d 	bl	800f2b8 <HAL_TIMEx_MasterConfigSynchronization>
 800625e:	4603      	mov	r3, r0
 8006260:	2b00      	cmp	r3, #0
 8006262:	d001      	beq.n	8006268 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8006264:	f7ff fbb6 	bl	80059d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8006268:	bf00      	nop
 800626a:	3710      	adds	r7, #16
 800626c:	46bd      	mov	sp, r7
 800626e:	bd80      	pop	{r7, pc}
 8006270:	20002e60 	.word	0x20002e60
 8006274:	40001400 	.word	0x40001400

08006278 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8006278:	b580      	push	{r7, lr}
 800627a:	b084      	sub	sp, #16
 800627c:	af00      	add	r7, sp, #0
 800627e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM7)
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	4a0e      	ldr	r2, [pc, #56]	; (80062c0 <HAL_TIM_Base_MspInit+0x48>)
 8006286:	4293      	cmp	r3, r2
 8006288:	d116      	bne.n	80062b8 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* TIM7 clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 800628a:	4b0e      	ldr	r3, [pc, #56]	; (80062c4 <HAL_TIM_Base_MspInit+0x4c>)
 800628c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006290:	4a0c      	ldr	r2, [pc, #48]	; (80062c4 <HAL_TIM_Base_MspInit+0x4c>)
 8006292:	f043 0320 	orr.w	r3, r3, #32
 8006296:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 800629a:	4b0a      	ldr	r3, [pc, #40]	; (80062c4 <HAL_TIM_Base_MspInit+0x4c>)
 800629c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80062a0:	f003 0320 	and.w	r3, r3, #32
 80062a4:	60fb      	str	r3, [r7, #12]
 80062a6:	68fb      	ldr	r3, [r7, #12]

    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 8, 0);
 80062a8:	2200      	movs	r2, #0
 80062aa:	2108      	movs	r1, #8
 80062ac:	2032      	movs	r0, #50	; 0x32
 80062ae:	f000 fa45 	bl	800673c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80062b2:	2032      	movs	r0, #50	; 0x32
 80062b4:	f000 fa5c 	bl	8006770 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 80062b8:	bf00      	nop
 80062ba:	3710      	adds	r7, #16
 80062bc:	46bd      	mov	sp, r7
 80062be:	bd80      	pop	{r7, pc}
 80062c0:	40001400 	.word	0x40001400
 80062c4:	46020c00 	.word	0x46020c00

080062c8 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80062c8:	b580      	push	{r7, lr}
 80062ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80062cc:	4b22      	ldr	r3, [pc, #136]	; (8006358 <MX_USART1_UART_Init+0x90>)
 80062ce:	4a23      	ldr	r2, [pc, #140]	; (800635c <MX_USART1_UART_Init+0x94>)
 80062d0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80062d2:	4b21      	ldr	r3, [pc, #132]	; (8006358 <MX_USART1_UART_Init+0x90>)
 80062d4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80062d8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80062da:	4b1f      	ldr	r3, [pc, #124]	; (8006358 <MX_USART1_UART_Init+0x90>)
 80062dc:	2200      	movs	r2, #0
 80062de:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80062e0:	4b1d      	ldr	r3, [pc, #116]	; (8006358 <MX_USART1_UART_Init+0x90>)
 80062e2:	2200      	movs	r2, #0
 80062e4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80062e6:	4b1c      	ldr	r3, [pc, #112]	; (8006358 <MX_USART1_UART_Init+0x90>)
 80062e8:	2200      	movs	r2, #0
 80062ea:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80062ec:	4b1a      	ldr	r3, [pc, #104]	; (8006358 <MX_USART1_UART_Init+0x90>)
 80062ee:	220c      	movs	r2, #12
 80062f0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80062f2:	4b19      	ldr	r3, [pc, #100]	; (8006358 <MX_USART1_UART_Init+0x90>)
 80062f4:	2200      	movs	r2, #0
 80062f6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80062f8:	4b17      	ldr	r3, [pc, #92]	; (8006358 <MX_USART1_UART_Init+0x90>)
 80062fa:	2200      	movs	r2, #0
 80062fc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80062fe:	4b16      	ldr	r3, [pc, #88]	; (8006358 <MX_USART1_UART_Init+0x90>)
 8006300:	2200      	movs	r2, #0
 8006302:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8006304:	4b14      	ldr	r3, [pc, #80]	; (8006358 <MX_USART1_UART_Init+0x90>)
 8006306:	2200      	movs	r2, #0
 8006308:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800630a:	4b13      	ldr	r3, [pc, #76]	; (8006358 <MX_USART1_UART_Init+0x90>)
 800630c:	2200      	movs	r2, #0
 800630e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8006310:	4811      	ldr	r0, [pc, #68]	; (8006358 <MX_USART1_UART_Init+0x90>)
 8006312:	f009 f8d9 	bl	800f4c8 <HAL_UART_Init>
 8006316:	4603      	mov	r3, r0
 8006318:	2b00      	cmp	r3, #0
 800631a:	d001      	beq.n	8006320 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 800631c:	f7ff fb5a 	bl	80059d4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8006320:	2100      	movs	r1, #0
 8006322:	480d      	ldr	r0, [pc, #52]	; (8006358 <MX_USART1_UART_Init+0x90>)
 8006324:	f009 fd56 	bl	800fdd4 <HAL_UARTEx_SetTxFifoThreshold>
 8006328:	4603      	mov	r3, r0
 800632a:	2b00      	cmp	r3, #0
 800632c:	d001      	beq.n	8006332 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800632e:	f7ff fb51 	bl	80059d4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8006332:	2100      	movs	r1, #0
 8006334:	4808      	ldr	r0, [pc, #32]	; (8006358 <MX_USART1_UART_Init+0x90>)
 8006336:	f009 fd8b 	bl	800fe50 <HAL_UARTEx_SetRxFifoThreshold>
 800633a:	4603      	mov	r3, r0
 800633c:	2b00      	cmp	r3, #0
 800633e:	d001      	beq.n	8006344 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8006340:	f7ff fb48 	bl	80059d4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8006344:	4804      	ldr	r0, [pc, #16]	; (8006358 <MX_USART1_UART_Init+0x90>)
 8006346:	f009 fd0c 	bl	800fd62 <HAL_UARTEx_DisableFifoMode>
 800634a:	4603      	mov	r3, r0
 800634c:	2b00      	cmp	r3, #0
 800634e:	d001      	beq.n	8006354 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8006350:	f7ff fb40 	bl	80059d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8006354:	bf00      	nop
 8006356:	bd80      	pop	{r7, pc}
 8006358:	20002eac 	.word	0x20002eac
 800635c:	40013800 	.word	0x40013800

08006360 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8006360:	b580      	push	{r7, lr}
 8006362:	b0bc      	sub	sp, #240	; 0xf0
 8006364:	af00      	add	r7, sp, #0
 8006366:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006368:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800636c:	2200      	movs	r2, #0
 800636e:	601a      	str	r2, [r3, #0]
 8006370:	605a      	str	r2, [r3, #4]
 8006372:	609a      	str	r2, [r3, #8]
 8006374:	60da      	str	r2, [r3, #12]
 8006376:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8006378:	f107 0310 	add.w	r3, r7, #16
 800637c:	22c8      	movs	r2, #200	; 0xc8
 800637e:	2100      	movs	r1, #0
 8006380:	4618      	mov	r0, r3
 8006382:	f00c fb81 	bl	8012a88 <memset>
  if(uartHandle->Instance==USART1)
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	4a26      	ldr	r2, [pc, #152]	; (8006424 <HAL_UART_MspInit+0xc4>)
 800638c:	4293      	cmp	r3, r2
 800638e:	d145      	bne.n	800641c <HAL_UART_MspInit+0xbc>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8006390:	f04f 0201 	mov.w	r2, #1
 8006394:	f04f 0300 	mov.w	r3, #0
 8006398:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800639c:	2300      	movs	r3, #0
 800639e:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80063a0:	f107 0310 	add.w	r3, r7, #16
 80063a4:	4618      	mov	r0, r3
 80063a6:	f005 ffa3 	bl	800c2f0 <HAL_RCCEx_PeriphCLKConfig>
 80063aa:	4603      	mov	r3, r0
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d001      	beq.n	80063b4 <HAL_UART_MspInit+0x54>
    {
      Error_Handler();
 80063b0:	f7ff fb10 	bl	80059d4 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80063b4:	4b1c      	ldr	r3, [pc, #112]	; (8006428 <HAL_UART_MspInit+0xc8>)
 80063b6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80063ba:	4a1b      	ldr	r2, [pc, #108]	; (8006428 <HAL_UART_MspInit+0xc8>)
 80063bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80063c0:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
 80063c4:	4b18      	ldr	r3, [pc, #96]	; (8006428 <HAL_UART_MspInit+0xc8>)
 80063c6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80063ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80063ce:	60fb      	str	r3, [r7, #12]
 80063d0:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80063d2:	4b15      	ldr	r3, [pc, #84]	; (8006428 <HAL_UART_MspInit+0xc8>)
 80063d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80063d8:	4a13      	ldr	r2, [pc, #76]	; (8006428 <HAL_UART_MspInit+0xc8>)
 80063da:	f043 0301 	orr.w	r3, r3, #1
 80063de:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80063e2:	4b11      	ldr	r3, [pc, #68]	; (8006428 <HAL_UART_MspInit+0xc8>)
 80063e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80063e8:	f003 0301 	and.w	r3, r3, #1
 80063ec:	60bb      	str	r3, [r7, #8]
 80063ee:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = T_VCP_RX_Pin|T_VCP_TX_Pin;
 80063f0:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80063f4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80063f8:	2302      	movs	r3, #2
 80063fa:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80063fe:	2300      	movs	r3, #0
 8006400:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006404:	2300      	movs	r3, #0
 8006406:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800640a:	2307      	movs	r3, #7
 800640c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006410:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8006414:	4619      	mov	r1, r3
 8006416:	4805      	ldr	r0, [pc, #20]	; (800642c <HAL_UART_MspInit+0xcc>)
 8006418:	f001 fff2 	bl	8008400 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800641c:	bf00      	nop
 800641e:	37f0      	adds	r7, #240	; 0xf0
 8006420:	46bd      	mov	sp, r7
 8006422:	bd80      	pop	{r7, pc}
 8006424:	40013800 	.word	0x40013800
 8006428:	46020c00 	.word	0x46020c00
 800642c:	42020000 	.word	0x42020000

08006430 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8006430:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006468 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8006434:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8006436:	e003      	b.n	8006440 <LoopCopyDataInit>

08006438 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8006438:	4b0c      	ldr	r3, [pc, #48]	; (800646c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800643a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800643c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800643e:	3104      	adds	r1, #4

08006440 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8006440:	480b      	ldr	r0, [pc, #44]	; (8006470 <LoopForever+0xa>)
	ldr	r3, =_edata
 8006442:	4b0c      	ldr	r3, [pc, #48]	; (8006474 <LoopForever+0xe>)
	adds	r2, r0, r1
 8006444:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8006446:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8006448:	d3f6      	bcc.n	8006438 <CopyDataInit>
	ldr	r2, =_sbss
 800644a:	4a0b      	ldr	r2, [pc, #44]	; (8006478 <LoopForever+0x12>)
	b	LoopFillZerobss
 800644c:	e002      	b.n	8006454 <LoopFillZerobss>

0800644e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800644e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8006450:	f842 3b04 	str.w	r3, [r2], #4

08006454 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8006454:	4b09      	ldr	r3, [pc, #36]	; (800647c <LoopForever+0x16>)
	cmp	r2, r3
 8006456:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8006458:	d3f9      	bcc.n	800644e <FillZerobss>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800645a:	f7ff fe9f 	bl	800619c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800645e:	f00c faef 	bl	8012a40 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8006462:	f7ff f9e1 	bl	8005828 <main>

08006466 <LoopForever>:

LoopForever:
    b LoopForever
 8006466:	e7fe      	b.n	8006466 <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8006468:	200c0000 	.word	0x200c0000
	ldr	r3, =_sidata
 800646c:	08013bf0 	.word	0x08013bf0
	ldr	r0, =_sdata
 8006470:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8006474:	20000078 	.word	0x20000078
	ldr	r2, =_sbss
 8006478:	20000078 	.word	0x20000078
	ldr	r3, = _ebss
 800647c:	20003590 	.word	0x20003590

08006480 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8006480:	e7fe      	b.n	8006480 <ADC1_IRQHandler>
	...

08006484 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006484:	b580      	push	{r7, lr}
 8006486:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006488:	4b11      	ldr	r3, [pc, #68]	; (80064d0 <HAL_Init+0x4c>)
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	4a10      	ldr	r2, [pc, #64]	; (80064d0 <HAL_Init+0x4c>)
 800648e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006492:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006494:	2003      	movs	r0, #3
 8006496:	f000 f946 	bl	8006726 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800649a:	f005 fd0d 	bl	800beb8 <HAL_RCC_GetSysClockFreq>
 800649e:	4602      	mov	r2, r0
 80064a0:	4b0c      	ldr	r3, [pc, #48]	; (80064d4 <HAL_Init+0x50>)
 80064a2:	6a1b      	ldr	r3, [r3, #32]
 80064a4:	f003 030f 	and.w	r3, r3, #15
 80064a8:	490b      	ldr	r1, [pc, #44]	; (80064d8 <HAL_Init+0x54>)
 80064aa:	5ccb      	ldrb	r3, [r1, r3]
 80064ac:	fa22 f303 	lsr.w	r3, r2, r3
 80064b0:	4a0a      	ldr	r2, [pc, #40]	; (80064dc <HAL_Init+0x58>)
 80064b2:	6013      	str	r3, [r2, #0]

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80064b4:	200f      	movs	r0, #15
 80064b6:	f7ff fd1d 	bl	8005ef4 <HAL_InitTick>
 80064ba:	4603      	mov	r3, r0
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d001      	beq.n	80064c4 <HAL_Init+0x40>
  {
    return HAL_ERROR;
 80064c0:	2301      	movs	r3, #1
 80064c2:	e002      	b.n	80064ca <HAL_Init+0x46>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80064c4:	f7ff fcfc 	bl	8005ec0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80064c8:	2300      	movs	r3, #0
}
 80064ca:	4618      	mov	r0, r3
 80064cc:	bd80      	pop	{r7, pc}
 80064ce:	bf00      	nop
 80064d0:	40022000 	.word	0x40022000
 80064d4:	46020c00 	.word	0x46020c00
 80064d8:	08013a7c 	.word	0x08013a7c
 80064dc:	20000004 	.word	0x20000004

080064e0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80064e0:	b480      	push	{r7}
 80064e2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80064e4:	4b06      	ldr	r3, [pc, #24]	; (8006500 <HAL_IncTick+0x20>)
 80064e6:	781b      	ldrb	r3, [r3, #0]
 80064e8:	461a      	mov	r2, r3
 80064ea:	4b06      	ldr	r3, [pc, #24]	; (8006504 <HAL_IncTick+0x24>)
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	4413      	add	r3, r2
 80064f0:	4a04      	ldr	r2, [pc, #16]	; (8006504 <HAL_IncTick+0x24>)
 80064f2:	6013      	str	r3, [r2, #0]
}
 80064f4:	bf00      	nop
 80064f6:	46bd      	mov	sp, r7
 80064f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064fc:	4770      	bx	lr
 80064fe:	bf00      	nop
 8006500:	2000000c 	.word	0x2000000c
 8006504:	20002f3c 	.word	0x20002f3c

08006508 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006508:	b480      	push	{r7}
 800650a:	af00      	add	r7, sp, #0
  return uwTick;
 800650c:	4b03      	ldr	r3, [pc, #12]	; (800651c <HAL_GetTick+0x14>)
 800650e:	681b      	ldr	r3, [r3, #0]
}
 8006510:	4618      	mov	r0, r3
 8006512:	46bd      	mov	sp, r7
 8006514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006518:	4770      	bx	lr
 800651a:	bf00      	nop
 800651c:	20002f3c 	.word	0x20002f3c

08006520 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006520:	b580      	push	{r7, lr}
 8006522:	b084      	sub	sp, #16
 8006524:	af00      	add	r7, sp, #0
 8006526:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006528:	f7ff ffee 	bl	8006508 <HAL_GetTick>
 800652c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006538:	d005      	beq.n	8006546 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800653a:	4b0a      	ldr	r3, [pc, #40]	; (8006564 <HAL_Delay+0x44>)
 800653c:	781b      	ldrb	r3, [r3, #0]
 800653e:	461a      	mov	r2, r3
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	4413      	add	r3, r2
 8006544:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8006546:	bf00      	nop
 8006548:	f7ff ffde 	bl	8006508 <HAL_GetTick>
 800654c:	4602      	mov	r2, r0
 800654e:	68bb      	ldr	r3, [r7, #8]
 8006550:	1ad3      	subs	r3, r2, r3
 8006552:	68fa      	ldr	r2, [r7, #12]
 8006554:	429a      	cmp	r2, r3
 8006556:	d8f7      	bhi.n	8006548 <HAL_Delay+0x28>
  {
  }
}
 8006558:	bf00      	nop
 800655a:	bf00      	nop
 800655c:	3710      	adds	r7, #16
 800655e:	46bd      	mov	sp, r7
 8006560:	bd80      	pop	{r7, pc}
 8006562:	bf00      	nop
 8006564:	2000000c 	.word	0x2000000c

08006568 <HAL_CORDIC_Init>:
  * @brief  Initialize the CORDIC peripheral and the associated handle.
  * @param  hcordic pointer to a CORDIC_HandleTypeDef structure.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CORDIC_Init(CORDIC_HandleTypeDef *hcordic)
{
 8006568:	b580      	push	{r7, lr}
 800656a:	b082      	sub	sp, #8
 800656c:	af00      	add	r7, sp, #0
 800656e:	6078      	str	r0, [r7, #4]
  /* Check the CORDIC handle allocation */
  if (hcordic == NULL)
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	2b00      	cmp	r3, #0
 8006574:	d101      	bne.n	800657a <HAL_CORDIC_Init+0x12>
  {
    /* Return error status */
    return HAL_ERROR;
 8006576:	2301      	movs	r3, #1
 8006578:	e023      	b.n	80065c2 <HAL_CORDIC_Init+0x5a>

    /* Initialize the low level hardware */
    hcordic->MspInitCallback(hcordic);
  }
#else
  if (hcordic->State == HAL_CORDIC_STATE_RESET)
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8006580:	b2db      	uxtb	r3, r3
 8006582:	2b00      	cmp	r3, #0
 8006584:	d106      	bne.n	8006594 <HAL_CORDIC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hcordic->Lock = HAL_UNLOCKED;
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	2200      	movs	r2, #0
 800658a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize the low level hardware */
    HAL_CORDIC_MspInit(hcordic);
 800658e:	6878      	ldr	r0, [r7, #4]
 8006590:	f7fe f9de 	bl	8004950 <HAL_CORDIC_MspInit>
  }
#endif /* (USE_HAL_CORDIC_REGISTER_CALLBACKS) */

  /* Set CORDIC error code to none */
  hcordic->ErrorCode = HAL_CORDIC_ERROR_NONE;
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	2200      	movs	r2, #0
 8006598:	625a      	str	r2, [r3, #36]	; 0x24

  /* Reset pInBuff and pOutBuff */
  hcordic->pInBuff = NULL;
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	2200      	movs	r2, #0
 800659e:	605a      	str	r2, [r3, #4]
  hcordic->pOutBuff = NULL;
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	2200      	movs	r2, #0
 80065a4:	609a      	str	r2, [r3, #8]

  /* Reset NbCalcToOrder and NbCalcToGet */
  hcordic->NbCalcToOrder = 0U;
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	2200      	movs	r2, #0
 80065aa:	60da      	str	r2, [r3, #12]
  hcordic->NbCalcToGet = 0U;
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	2200      	movs	r2, #0
 80065b0:	611a      	str	r2, [r3, #16]

  /* Reset DMADirection */
  hcordic->DMADirection = CORDIC_DMA_DIR_NONE;
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	2200      	movs	r2, #0
 80065b6:	615a      	str	r2, [r3, #20]

  /* Change CORDIC peripheral state */
  hcordic->State = HAL_CORDIC_STATE_READY;
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	2201      	movs	r2, #1
 80065bc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Return function status */
  return HAL_OK;
 80065c0:	2300      	movs	r3, #0
}
 80065c2:	4618      	mov	r0, r3
 80065c4:	3708      	adds	r7, #8
 80065c6:	46bd      	mov	sp, r7
 80065c8:	bd80      	pop	{r7, pc}
	...

080065cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80065cc:	b480      	push	{r7}
 80065ce:	b085      	sub	sp, #20
 80065d0:	af00      	add	r7, sp, #0
 80065d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	f003 0307 	and.w	r3, r3, #7
 80065da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80065dc:	4b0c      	ldr	r3, [pc, #48]	; (8006610 <__NVIC_SetPriorityGrouping+0x44>)
 80065de:	68db      	ldr	r3, [r3, #12]
 80065e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80065e2:	68ba      	ldr	r2, [r7, #8]
 80065e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80065e8:	4013      	ands	r3, r2
 80065ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80065f0:	68bb      	ldr	r3, [r7, #8]
 80065f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80065f4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80065f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80065fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80065fe:	4a04      	ldr	r2, [pc, #16]	; (8006610 <__NVIC_SetPriorityGrouping+0x44>)
 8006600:	68bb      	ldr	r3, [r7, #8]
 8006602:	60d3      	str	r3, [r2, #12]
}
 8006604:	bf00      	nop
 8006606:	3714      	adds	r7, #20
 8006608:	46bd      	mov	sp, r7
 800660a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800660e:	4770      	bx	lr
 8006610:	e000ed00 	.word	0xe000ed00

08006614 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006614:	b480      	push	{r7}
 8006616:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006618:	4b04      	ldr	r3, [pc, #16]	; (800662c <__NVIC_GetPriorityGrouping+0x18>)
 800661a:	68db      	ldr	r3, [r3, #12]
 800661c:	0a1b      	lsrs	r3, r3, #8
 800661e:	f003 0307 	and.w	r3, r3, #7
}
 8006622:	4618      	mov	r0, r3
 8006624:	46bd      	mov	sp, r7
 8006626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800662a:	4770      	bx	lr
 800662c:	e000ed00 	.word	0xe000ed00

08006630 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006630:	b480      	push	{r7}
 8006632:	b083      	sub	sp, #12
 8006634:	af00      	add	r7, sp, #0
 8006636:	4603      	mov	r3, r0
 8006638:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800663a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800663e:	2b00      	cmp	r3, #0
 8006640:	db0b      	blt.n	800665a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006642:	79fb      	ldrb	r3, [r7, #7]
 8006644:	f003 021f 	and.w	r2, r3, #31
 8006648:	4907      	ldr	r1, [pc, #28]	; (8006668 <__NVIC_EnableIRQ+0x38>)
 800664a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800664e:	095b      	lsrs	r3, r3, #5
 8006650:	2001      	movs	r0, #1
 8006652:	fa00 f202 	lsl.w	r2, r0, r2
 8006656:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800665a:	bf00      	nop
 800665c:	370c      	adds	r7, #12
 800665e:	46bd      	mov	sp, r7
 8006660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006664:	4770      	bx	lr
 8006666:	bf00      	nop
 8006668:	e000e100 	.word	0xe000e100

0800666c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800666c:	b480      	push	{r7}
 800666e:	b083      	sub	sp, #12
 8006670:	af00      	add	r7, sp, #0
 8006672:	4603      	mov	r3, r0
 8006674:	6039      	str	r1, [r7, #0]
 8006676:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006678:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800667c:	2b00      	cmp	r3, #0
 800667e:	db0a      	blt.n	8006696 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006680:	683b      	ldr	r3, [r7, #0]
 8006682:	b2da      	uxtb	r2, r3
 8006684:	490c      	ldr	r1, [pc, #48]	; (80066b8 <__NVIC_SetPriority+0x4c>)
 8006686:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800668a:	0112      	lsls	r2, r2, #4
 800668c:	b2d2      	uxtb	r2, r2
 800668e:	440b      	add	r3, r1
 8006690:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006694:	e00a      	b.n	80066ac <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006696:	683b      	ldr	r3, [r7, #0]
 8006698:	b2da      	uxtb	r2, r3
 800669a:	4908      	ldr	r1, [pc, #32]	; (80066bc <__NVIC_SetPriority+0x50>)
 800669c:	79fb      	ldrb	r3, [r7, #7]
 800669e:	f003 030f 	and.w	r3, r3, #15
 80066a2:	3b04      	subs	r3, #4
 80066a4:	0112      	lsls	r2, r2, #4
 80066a6:	b2d2      	uxtb	r2, r2
 80066a8:	440b      	add	r3, r1
 80066aa:	761a      	strb	r2, [r3, #24]
}
 80066ac:	bf00      	nop
 80066ae:	370c      	adds	r7, #12
 80066b0:	46bd      	mov	sp, r7
 80066b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b6:	4770      	bx	lr
 80066b8:	e000e100 	.word	0xe000e100
 80066bc:	e000ed00 	.word	0xe000ed00

080066c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80066c0:	b480      	push	{r7}
 80066c2:	b089      	sub	sp, #36	; 0x24
 80066c4:	af00      	add	r7, sp, #0
 80066c6:	60f8      	str	r0, [r7, #12]
 80066c8:	60b9      	str	r1, [r7, #8]
 80066ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	f003 0307 	and.w	r3, r3, #7
 80066d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80066d4:	69fb      	ldr	r3, [r7, #28]
 80066d6:	f1c3 0307 	rsb	r3, r3, #7
 80066da:	2b04      	cmp	r3, #4
 80066dc:	bf28      	it	cs
 80066de:	2304      	movcs	r3, #4
 80066e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80066e2:	69fb      	ldr	r3, [r7, #28]
 80066e4:	3304      	adds	r3, #4
 80066e6:	2b06      	cmp	r3, #6
 80066e8:	d902      	bls.n	80066f0 <NVIC_EncodePriority+0x30>
 80066ea:	69fb      	ldr	r3, [r7, #28]
 80066ec:	3b03      	subs	r3, #3
 80066ee:	e000      	b.n	80066f2 <NVIC_EncodePriority+0x32>
 80066f0:	2300      	movs	r3, #0
 80066f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80066f4:	f04f 32ff 	mov.w	r2, #4294967295
 80066f8:	69bb      	ldr	r3, [r7, #24]
 80066fa:	fa02 f303 	lsl.w	r3, r2, r3
 80066fe:	43da      	mvns	r2, r3
 8006700:	68bb      	ldr	r3, [r7, #8]
 8006702:	401a      	ands	r2, r3
 8006704:	697b      	ldr	r3, [r7, #20]
 8006706:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006708:	f04f 31ff 	mov.w	r1, #4294967295
 800670c:	697b      	ldr	r3, [r7, #20]
 800670e:	fa01 f303 	lsl.w	r3, r1, r3
 8006712:	43d9      	mvns	r1, r3
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006718:	4313      	orrs	r3, r2
         );
}
 800671a:	4618      	mov	r0, r3
 800671c:	3724      	adds	r7, #36	; 0x24
 800671e:	46bd      	mov	sp, r7
 8006720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006724:	4770      	bx	lr

08006726 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006726:	b580      	push	{r7, lr}
 8006728:	b082      	sub	sp, #8
 800672a:	af00      	add	r7, sp, #0
 800672c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800672e:	6878      	ldr	r0, [r7, #4]
 8006730:	f7ff ff4c 	bl	80065cc <__NVIC_SetPriorityGrouping>
}
 8006734:	bf00      	nop
 8006736:	3708      	adds	r7, #8
 8006738:	46bd      	mov	sp, r7
 800673a:	bd80      	pop	{r7, pc}

0800673c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800673c:	b580      	push	{r7, lr}
 800673e:	b086      	sub	sp, #24
 8006740:	af00      	add	r7, sp, #0
 8006742:	4603      	mov	r3, r0
 8006744:	60b9      	str	r1, [r7, #8]
 8006746:	607a      	str	r2, [r7, #4]
 8006748:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800674a:	f7ff ff63 	bl	8006614 <__NVIC_GetPriorityGrouping>
 800674e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006750:	687a      	ldr	r2, [r7, #4]
 8006752:	68b9      	ldr	r1, [r7, #8]
 8006754:	6978      	ldr	r0, [r7, #20]
 8006756:	f7ff ffb3 	bl	80066c0 <NVIC_EncodePriority>
 800675a:	4602      	mov	r2, r0
 800675c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006760:	4611      	mov	r1, r2
 8006762:	4618      	mov	r0, r3
 8006764:	f7ff ff82 	bl	800666c <__NVIC_SetPriority>
}
 8006768:	bf00      	nop
 800676a:	3718      	adds	r7, #24
 800676c:	46bd      	mov	sp, r7
 800676e:	bd80      	pop	{r7, pc}

08006770 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006770:	b580      	push	{r7, lr}
 8006772:	b082      	sub	sp, #8
 8006774:	af00      	add	r7, sp, #0
 8006776:	4603      	mov	r3, r0
 8006778:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800677a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800677e:	4618      	mov	r0, r3
 8006780:	f7ff ff56 	bl	8006630 <__NVIC_EnableIRQ>
}
 8006784:	bf00      	nop
 8006786:	3708      	adds	r7, #8
 8006788:	46bd      	mov	sp, r7
 800678a:	bd80      	pop	{r7, pc}

0800678c <HAL_DCACHE_Init>:
  * @param  hdcache Pointer to a DCACHE_HandleTypeDef structure that contains
  *                 the configuration information for the specified DCACHE.
  * @retval HAL status
  */
HAL_StatusTypeDef  HAL_DCACHE_Init(DCACHE_HandleTypeDef *hdcache)
{
 800678c:	b580      	push	{r7, lr}
 800678e:	b084      	sub	sp, #16
 8006790:	af00      	add	r7, sp, #0
 8006792:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the DCACHE handle allocation */
  if (hdcache == NULL)
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	2b00      	cmp	r3, #0
 8006798:	d101      	bne.n	800679e <HAL_DCACHE_Init+0x12>
  {
    return HAL_ERROR;
 800679a:	2301      	movs	r3, #1
 800679c:	e037      	b.n	800680e <HAL_DCACHE_Init+0x82>

  /* Check the parameters */
  assert_param(IS_DCACHE_ALL_INSTANCE(hdcache->Instance));
  assert_param(IS_DCACHE_READ_BURST_TYPE(hdcache->Init.ReadBurstType));

  if (hdcache->State == HAL_DCACHE_STATE_RESET)
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80067a4:	b2db      	uxtb	r3, r3
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d119      	bne.n	80067de <HAL_DCACHE_Init+0x52>
  {
    /* Init the DCACHE Callback settings with legacy weak */
    hdcache->ErrorCallback                      = HAL_DCACHE_ErrorCallback;
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	4a1a      	ldr	r2, [pc, #104]	; (8006818 <HAL_DCACHE_Init+0x8c>)
 80067ae:	609a      	str	r2, [r3, #8]
    hdcache->CleanByAddrCallback                = HAL_DCACHE_CleanByAddrCallback;
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	4a1a      	ldr	r2, [pc, #104]	; (800681c <HAL_DCACHE_Init+0x90>)
 80067b4:	60da      	str	r2, [r3, #12]
    hdcache->InvalidateByAddrCallback           = HAL_DCACHE_InvalidateByAddrCallback;
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	4a19      	ldr	r2, [pc, #100]	; (8006820 <HAL_DCACHE_Init+0x94>)
 80067ba:	611a      	str	r2, [r3, #16]
    hdcache->InvalidateCompleteCallback         = HAL_DCACHE_InvalidateCompleteCallback;
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	4a19      	ldr	r2, [pc, #100]	; (8006824 <HAL_DCACHE_Init+0x98>)
 80067c0:	615a      	str	r2, [r3, #20]
    hdcache->CleanAndInvalidateByAddrCallback   = HAL_DCACHE_CleanAndInvalidateByAddrCallback;
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	4a18      	ldr	r2, [pc, #96]	; (8006828 <HAL_DCACHE_Init+0x9c>)
 80067c6:	619a      	str	r2, [r3, #24]

    if (hdcache->MspInitCallback == NULL)
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	69db      	ldr	r3, [r3, #28]
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d102      	bne.n	80067d6 <HAL_DCACHE_Init+0x4a>
    {
      hdcache->MspInitCallback = HAL_DCACHE_MspInit;
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	4a16      	ldr	r2, [pc, #88]	; (800682c <HAL_DCACHE_Init+0xa0>)
 80067d4:	61da      	str	r2, [r3, #28]
    }

    /* Init the low level hardware */
    hdcache->MspInitCallback(hdcache);
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	69db      	ldr	r3, [r3, #28]
 80067da:	6878      	ldr	r0, [r7, #4]
 80067dc:	4798      	blx	r3
  }

  /* Init the error code */
  hdcache->ErrorCode = HAL_DCACHE_ERROR_NONE;
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	2200      	movs	r2, #0
 80067e2:	629a      	str	r2, [r3, #40]	; 0x28

  /* Init the DCACHE handle state */
  hdcache->State = HAL_DCACHE_STATE_READY;
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	2201      	movs	r2, #1
 80067e8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  /* Set requested read burst type */
  MODIFY_REG(hdcache->Instance->CR, DCACHE_CR_HBURST, hdcache->Init.ReadBurstType);
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	685a      	ldr	r2, [r3, #4]
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	430a      	orrs	r2, r1
 8006800:	601a      	str	r2, [r3, #0]

  /* Enable the selected DCACHE peripheral */
  status = HAL_DCACHE_Enable(hdcache);
 8006802:	6878      	ldr	r0, [r7, #4]
 8006804:	f000 f81e 	bl	8006844 <HAL_DCACHE_Enable>
 8006808:	4603      	mov	r3, r0
 800680a:	73fb      	strb	r3, [r7, #15]

  return status;
 800680c:	7bfb      	ldrb	r3, [r7, #15]
}
 800680e:	4618      	mov	r0, r3
 8006810:	3710      	adds	r7, #16
 8006812:	46bd      	mov	sp, r7
 8006814:	bd80      	pop	{r7, pc}
 8006816:	bf00      	nop
 8006818:	080068e3 	.word	0x080068e3
 800681c:	08006893 	.word	0x08006893
 8006820:	080068a7 	.word	0x080068a7
 8006824:	080068cf 	.word	0x080068cf
 8006828:	080068bb 	.word	0x080068bb
 800682c:	08006831 	.word	0x08006831

08006830 <HAL_DCACHE_MspInit>:
  * @param  hdcache Pointer to a DCACHE_HandleTypeDef structure that contains
  *                 the configuration information for the specified DCACHEx peripheral.
  * @retval None
  */
__weak void HAL_DCACHE_MspInit(DCACHE_HandleTypeDef *hdcache)
{
 8006830:	b480      	push	{r7}
 8006832:	b083      	sub	sp, #12
 8006834:	af00      	add	r7, sp, #0
 8006836:	6078      	str	r0, [r7, #4]
  UNUSED(hdcache);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DCACHE_MspInit can be implemented in the user file
   */
}
 8006838:	bf00      	nop
 800683a:	370c      	adds	r7, #12
 800683c:	46bd      	mov	sp, r7
 800683e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006842:	4770      	bx	lr

08006844 <HAL_DCACHE_Enable>:
  * @param  hdcache Pointer to a DCACHE_HandleTypeDef structure that contains
  *                 the configuration information for the specified DCACHEx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCACHE_Enable(DCACHE_HandleTypeDef *hdcache)
{
 8006844:	b480      	push	{r7}
 8006846:	b085      	sub	sp, #20
 8006848:	af00      	add	r7, sp, #0
 800684a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800684c:	2300      	movs	r3, #0
 800684e:	73fb      	strb	r3, [r7, #15]

  /* Check the dcache handle allocation */
  if (hdcache == NULL)
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	2b00      	cmp	r3, #0
 8006854:	d101      	bne.n	800685a <HAL_DCACHE_Enable+0x16>
  {
    return HAL_ERROR;
 8006856:	2301      	movs	r3, #1
 8006858:	e015      	b.n	8006886 <HAL_DCACHE_Enable+0x42>

  /* Check the parameters */
  assert_param(IS_DCACHE_ALL_INSTANCE(hdcache->Instance));

  /* Check no ongoing operation */
  if (READ_BIT(hdcache->Instance->SR, (DCACHE_SR_BUSYF | DCACHE_SR_BUSYCMDF)) != 0U)
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	685b      	ldr	r3, [r3, #4]
 8006860:	f003 0309 	and.w	r3, r3, #9
 8006864:	2b00      	cmp	r3, #0
 8006866:	d002      	beq.n	800686e <HAL_DCACHE_Enable+0x2a>
  {
    /* Return busy status */
    status =  HAL_BUSY;
 8006868:	2302      	movs	r3, #2
 800686a:	73fb      	strb	r3, [r7, #15]
 800686c:	e00a      	b.n	8006884 <HAL_DCACHE_Enable+0x40>
  }
  else
  {
    /* Update the error code */
    hdcache->ErrorCode = HAL_DCACHE_ERROR_NONE;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	2200      	movs	r2, #0
 8006872:	629a      	str	r2, [r3, #40]	; 0x28

    /* Enable the selected DCACHE peripheral */
    SET_BIT(hdcache->Instance->CR, DCACHE_CR_EN);
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	681a      	ldr	r2, [r3, #0]
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	f042 0201 	orr.w	r2, r2, #1
 8006882:	601a      	str	r2, [r3, #0]
  }

  return status;
 8006884:	7bfb      	ldrb	r3, [r7, #15]
}
 8006886:	4618      	mov	r0, r3
 8006888:	3714      	adds	r7, #20
 800688a:	46bd      	mov	sp, r7
 800688c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006890:	4770      	bx	lr

08006892 <HAL_DCACHE_CleanByAddrCallback>:
  * @param  hdcache Pointer to a DCACHE_HandleTypeDef structure that contains
  *                 the configuration information for the specified DCACHEx peripheral.
  * @retval None
  */
__weak void HAL_DCACHE_CleanByAddrCallback(DCACHE_HandleTypeDef *hdcache)
{
 8006892:	b480      	push	{r7}
 8006894:	b083      	sub	sp, #12
 8006896:	af00      	add	r7, sp, #0
 8006898:	6078      	str	r0, [r7, #4]
  UNUSED(hdcache);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DCACHE_CleanByAddrCallback() should be implemented in the user file
   */
}
 800689a:	bf00      	nop
 800689c:	370c      	adds	r7, #12
 800689e:	46bd      	mov	sp, r7
 80068a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a4:	4770      	bx	lr

080068a6 <HAL_DCACHE_InvalidateByAddrCallback>:
  * @param  hdcache Pointer to a DCACHE_HandleTypeDef structure that contains
  *                 the configuration information for the specified DCACHEx peripheral.
  * @retval None
  */
__weak void HAL_DCACHE_InvalidateByAddrCallback(DCACHE_HandleTypeDef *hdcache)
{
 80068a6:	b480      	push	{r7}
 80068a8:	b083      	sub	sp, #12
 80068aa:	af00      	add	r7, sp, #0
 80068ac:	6078      	str	r0, [r7, #4]
  UNUSED(hdcache);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DCACHE_InvalidateByAddrCallback() should be implemented in the user file
   */
}
 80068ae:	bf00      	nop
 80068b0:	370c      	adds	r7, #12
 80068b2:	46bd      	mov	sp, r7
 80068b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b8:	4770      	bx	lr

080068ba <HAL_DCACHE_CleanAndInvalidateByAddrCallback>:
  * @param  hdcache Pointer to a DCACHE_HandleTypeDef structure that contains
  *                 the configuration information for the specified DCACHEx peripheral.
  * @retval None
  */
__weak void HAL_DCACHE_CleanAndInvalidateByAddrCallback(DCACHE_HandleTypeDef *hdcache)
{
 80068ba:	b480      	push	{r7}
 80068bc:	b083      	sub	sp, #12
 80068be:	af00      	add	r7, sp, #0
 80068c0:	6078      	str	r0, [r7, #4]
  UNUSED(hdcache);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DCACHE_CleanAndInvalidateByAddrCallback() should be implemented in the user file
   */
}
 80068c2:	bf00      	nop
 80068c4:	370c      	adds	r7, #12
 80068c6:	46bd      	mov	sp, r7
 80068c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068cc:	4770      	bx	lr

080068ce <HAL_DCACHE_InvalidateCompleteCallback>:
  * @param  hdcache Pointer to a DCACHE_HandleTypeDef structure that contains
  *                 the configuration information for the specified DCACHEx peripheral.
  * @retval None
  */
__weak void HAL_DCACHE_InvalidateCompleteCallback(DCACHE_HandleTypeDef *hdcache)
{
 80068ce:	b480      	push	{r7}
 80068d0:	b083      	sub	sp, #12
 80068d2:	af00      	add	r7, sp, #0
 80068d4:	6078      	str	r0, [r7, #4]
  UNUSED(hdcache);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DCACHE_InvalidateCompleteCallback() should be implemented in the user file
   */
}
 80068d6:	bf00      	nop
 80068d8:	370c      	adds	r7, #12
 80068da:	46bd      	mov	sp, r7
 80068dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e0:	4770      	bx	lr

080068e2 <HAL_DCACHE_ErrorCallback>:
  * @param  hdcache Pointer to a DCACHE_HandleTypeDef structure that contains
  *                 the configuration information for the specified DCACHEx peripheral.
  * @retval None
  */
__weak void HAL_DCACHE_ErrorCallback(DCACHE_HandleTypeDef *hdcache)
{
 80068e2:	b480      	push	{r7}
 80068e4:	b083      	sub	sp, #12
 80068e6:	af00      	add	r7, sp, #0
 80068e8:	6078      	str	r0, [r7, #4]
  UNUSED(hdcache);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DCACHE_ErrorCallback() should be implemented in the user file
   */
}
 80068ea:	bf00      	nop
 80068ec:	370c      	adds	r7, #12
 80068ee:	46bd      	mov	sp, r7
 80068f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f4:	4770      	bx	lr
	...

080068f8 <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 80068f8:	b580      	push	{r7, lr}
 80068fa:	b082      	sub	sp, #8
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if (hdcmi == NULL)
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	2b00      	cmp	r3, #0
 8006904:	d101      	bne.n	800690a <HAL_DCMI_Init+0x12>
  {
    return HAL_ERROR;
 8006906:	2301      	movs	r3, #1
 8006908:	e069      	b.n	80069de <HAL_DCMI_Init+0xe6>
  assert_param(IS_DCMI_BYTE_SELECT_MODE(hdcmi->Init.ByteSelectMode));
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));

  if (hdcmi->State == HAL_DCMI_STATE_RESET)
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006910:	b2db      	uxtb	r3, r3
 8006912:	2b00      	cmp	r3, #0
 8006914:	d102      	bne.n	800691c <HAL_DCMI_Init+0x24>
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 8006916:	6878      	ldr	r0, [r7, #4]
 8006918:	f7fe f886 	bl	8004a28 <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	2202      	movs	r2, #2
 8006920:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  if (hdcmi->Init.ExtendedDataMode != DCMI_EXTEND_DATA_8B)
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	699b      	ldr	r3, [r3, #24]
 8006928:	2b00      	cmp	r3, #0
 800692a:	d002      	beq.n	8006932 <HAL_DCMI_Init+0x3a>
  {
    /* Byte select mode must be programmed to the reset value if the extended mode
    is not set to 8-bit data capture on every pixel clock */
    hdcmi->Init.ByteSelectMode = DCMI_BSM_ALL;
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	2200      	movs	r2, #0
 8006930:	625a      	str	r2, [r3, #36]	; 0x24
  }
  /* Configures the HS, VS, DE and PC polarity */
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 | \
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	6819      	ldr	r1, [r3, #0]
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681a      	ldr	r2, [r3, #0]
 800693c:	4b2a      	ldr	r3, [pc, #168]	; (80069e8 <HAL_DCMI_Init+0xf0>)
 800693e:	400b      	ands	r3, r1
 8006940:	6013      	str	r3, [r2, #0]
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  | \
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS | \
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	6819      	ldr	r1, [r3, #0]
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	685a      	ldr	r2, [r3, #4]
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	695b      	ldr	r3, [r3, #20]
 8006950:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8006956:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	691b      	ldr	r3, [r3, #16]
 800695c:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	689b      	ldr	r3, [r3, #8]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8006962:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	699b      	ldr	r3, [r3, #24]
 8006968:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	6a1b      	ldr	r3, [r3, #32]
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 800696e:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006974:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 800697a:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006980:	431a      	orrs	r2, r3
                                    hdcmi->Init.LineSelectStart);
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8006986:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	430a      	orrs	r2, r1
 800698e:	601a      	str	r2, [r3, #0]

  if (hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	685b      	ldr	r3, [r3, #4]
 8006994:	2b10      	cmp	r3, #16
 8006996:	d112      	bne.n	80069be <HAL_DCMI_Init+0xc6>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	7f1b      	ldrb	r3, [r3, #28]
 800699c:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	7f5b      	ldrb	r3, [r3, #29]
 80069a2:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 80069a4:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	7f9b      	ldrb	r3, [r3, #30]
 80069aa:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 80069ac:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	7fdb      	ldrb	r3, [r3, #31]
 80069b4:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 80069ba:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 80069bc:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	68da      	ldr	r2, [r3, #12]
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	f042 021e 	orr.w	r2, r2, #30
 80069cc:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	2200      	movs	r2, #0
 80069d2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	2201      	movs	r2, #1
 80069d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80069dc:	2300      	movs	r3, #0
}
 80069de:	4618      	mov	r0, r3
 80069e0:	3708      	adds	r7, #8
 80069e2:	46bd      	mov	sp, r7
 80069e4:	bd80      	pop	{r7, pc}
 80069e6:	bf00      	nop
 80069e8:	ffe0f007 	.word	0xffe0f007

080069ec <HAL_DCMI_Start_DMA>:
  * @param  pData     The destination memory Buffer address (LCD Frame buffer).
  * @param  Length    The length of capture to be transferred.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Start_DMA(DCMI_HandleTypeDef *hdcmi, uint32_t DCMI_Mode, uint32_t pData, uint32_t Length)
{
 80069ec:	b580      	push	{r7, lr}
 80069ee:	b08a      	sub	sp, #40	; 0x28
 80069f0:	af00      	add	r7, sp, #0
 80069f2:	60f8      	str	r0, [r7, #12]
 80069f4:	60b9      	str	r1, [r7, #8]
 80069f6:	607a      	str	r2, [r7, #4]
 80069f8:	603b      	str	r3, [r7, #0]
  uint32_t tmp_length = Length;
 80069fa:	683b      	ldr	r3, [r7, #0]
 80069fc:	623b      	str	r3, [r7, #32]
  HAL_StatusTypeDef status = HAL_OK;
 80069fe:	2300      	movs	r3, #0
 8006a00:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check function parameters */
  assert_param(IS_DCMI_CAPTURE_MODE(DCMI_Mode));

  /* Process Locked */
  __HAL_LOCK(hdcmi);
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006a0a:	2b01      	cmp	r3, #1
 8006a0c:	d101      	bne.n	8006a12 <HAL_DCMI_Start_DMA+0x26>
 8006a0e:	2302      	movs	r3, #2
 8006a10:	e189      	b.n	8006d26 <HAL_DCMI_Start_DMA+0x33a>
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	2201      	movs	r2, #1
 8006a16:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Lock the DCMI peripheral state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	2202      	movs	r2, #2
 8006a1e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Enable DCMI by setting DCMIEN bit */
  __HAL_DCMI_ENABLE(hdcmi);
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	681a      	ldr	r2, [r3, #0]
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006a30:	601a      	str	r2, [r3, #0]

  /* Configure the DCMI Mode */
  hdcmi->Instance->CR &= ~(DCMI_CR_CM);
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	681a      	ldr	r2, [r3, #0]
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	f022 0202 	bic.w	r2, r2, #2
 8006a40:	601a      	str	r2, [r3, #0]
  hdcmi->Instance->CR |= (uint32_t)(DCMI_Mode);
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	6819      	ldr	r1, [r3, #0]
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	68ba      	ldr	r2, [r7, #8]
 8006a4e:	430a      	orrs	r2, r1
 8006a50:	601a      	str	r2, [r3, #0]

  /* Set the DMA memory0 conversion complete callback */
  hdcmi->DMA_Handle->XferCpltCallback = DCMI_DMAXferCplt;
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006a56:	4a99      	ldr	r2, [pc, #612]	; (8006cbc <HAL_DCMI_Start_DMA+0x2d0>)
 8006a58:	661a      	str	r2, [r3, #96]	; 0x60

  /* Set the DMA error callback */
  hdcmi->DMA_Handle->XferErrorCallback = DCMI_DMAError;
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006a5e:	4a98      	ldr	r2, [pc, #608]	; (8006cc0 <HAL_DCMI_Start_DMA+0x2d4>)
 8006a60:	669a      	str	r2, [r3, #104]	; 0x68

  /* Set the dma abort callback */
  hdcmi->DMA_Handle->XferAbortCallback = NULL;
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006a66:	2200      	movs	r2, #0
 8006a68:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset transfer counters value */
  hdcmi->XferCount = 0;
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	2200      	movs	r2, #0
 8006a6e:	639a      	str	r2, [r3, #56]	; 0x38
  hdcmi->XferTransferNumber = 0;
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	2200      	movs	r2, #0
 8006a74:	641a      	str	r2, [r3, #64]	; 0x40
  hdcmi->XferSize = 0;
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	2200      	movs	r2, #0
 8006a7a:	63da      	str	r2, [r3, #60]	; 0x3c
  hdcmi->pBuffPtr = 0;
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	2200      	movs	r2, #0
 8006a80:	645a      	str	r2, [r3, #68]	; 0x44

  /* Length should be converted to number of bytes */
  tmp_length = tmp_length * 4U;
 8006a82:	6a3b      	ldr	r3, [r7, #32]
 8006a84:	009b      	lsls	r3, r3, #2
 8006a86:	623b      	str	r3, [r7, #32]

  if (tmp_length <= 0xFFFFU)
 8006a88:	6a3b      	ldr	r3, [r7, #32]
 8006a8a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006a8e:	d24c      	bcs.n	8006b2a <HAL_DCMI_Start_DMA+0x13e>
  {
    /* Continuoues Mode */
    /* Enable the DMA Stream */
    if ((hdcmi->DMA_Handle->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006a94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d037      	beq.n	8006b0e <HAL_DCMI_Start_DMA+0x122>
    {
      if ((hdcmi->DMA_Handle->LinkedListQueue != 0U) && (hdcmi->DMA_Handle->LinkedListQueue->Head != 0U))
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006aa2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d023      	beq.n	8006af0 <HAL_DCMI_Start_DMA+0x104>
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006aac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d01d      	beq.n	8006af0 <HAL_DCMI_Start_DMA+0x104>
      {
        /* Set Source , Destination , Length for DMA Xfer */

        /* Set DMA data size           */
        hdcmi->DMA_Handle->LinkedListQueue->Head->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = tmp_length;
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006ab8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	6a3a      	ldr	r2, [r7, #32]
 8006abe:	609a      	str	r2, [r3, #8]
        /* Set DMA source address      */
        hdcmi->DMA_Handle->LinkedListQueue->Head->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] = \
            (uint32_t)&hdcmi->Instance->DR;
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	f103 0228 	add.w	r2, r3, #40	; 0x28
        hdcmi->DMA_Handle->LinkedListQueue->Head->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] = \
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006acc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	60da      	str	r2, [r3, #12]
        /* Set DMA destination address */
        hdcmi->DMA_Handle->LinkedListQueue->Head->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = (uint32_t)pData;
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006ad6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	687a      	ldr	r2, [r7, #4]
 8006adc:	611a      	str	r2, [r3, #16]

        status = HAL_DMAEx_List_Start_IT(hdcmi->DMA_Handle);
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006ae2:	4618      	mov	r0, r3
 8006ae4:	f000 fe80 	bl	80077e8 <HAL_DMAEx_List_Start_IT>
 8006ae8:	4603      	mov	r3, r0
 8006aea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006aee:	e0f9      	b.n	8006ce4 <HAL_DCMI_Start_DMA+0x2f8>
      }
      else
      {
        /* Set Error Code */
        hdcmi->ErrorCode = HAL_DCMI_ERROR_DMA;
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	2240      	movs	r2, #64	; 0x40
 8006af4:	64da      	str	r2, [r3, #76]	; 0x4c
        /* Change DCMI state */
        hdcmi->State = HAL_DCMI_STATE_READY;
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	2201      	movs	r2, #1
 8006afa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        /* Release Lock */
        __HAL_UNLOCK(hdcmi);
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	2200      	movs	r2, #0
 8006b02:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        /* Return function status */
        status = HAL_ERROR;
 8006b06:	2301      	movs	r3, #1
 8006b08:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006b0c:	e0ea      	b.n	8006ce4 <HAL_DCMI_Start_DMA+0x2f8>
      }
    }
    else
    {
      status = HAL_DMA_Start_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, (uint32_t)pData, tmp_length);
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	3328      	adds	r3, #40	; 0x28
 8006b18:	4619      	mov	r1, r3
 8006b1a:	6a3b      	ldr	r3, [r7, #32]
 8006b1c:	687a      	ldr	r2, [r7, #4]
 8006b1e:	f000 fa5a 	bl	8006fd6 <HAL_DMA_Start_IT>
 8006b22:	4603      	mov	r3, r0
 8006b24:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006b28:	e0dc      	b.n	8006ce4 <HAL_DCMI_Start_DMA+0x2f8>
  {
    /* Double buffering is used through 2 Nodes
       Calculate the elementary size to be transferred by each node */

    /* Initialize transfer parameters */
    hdcmi->XferCount = 1;
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	2201      	movs	r2, #1
 8006b2e:	639a      	str	r2, [r3, #56]	; 0x38
    hdcmi->XferSize = tmp_length;
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	6a3a      	ldr	r2, [r7, #32]
 8006b34:	63da      	str	r2, [r3, #60]	; 0x3c
    hdcmi->pBuffPtr = pData;
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	687a      	ldr	r2, [r7, #4]
 8006b3a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Get the number of buffer */
    while (hdcmi->XferSize > 0xFFFFU)
 8006b3c:	e009      	b.n	8006b52 <HAL_DCMI_Start_DMA+0x166>
    {
      hdcmi->XferSize = (hdcmi->XferSize / 2U);
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b42:	085a      	lsrs	r2, r3, #1
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	63da      	str	r2, [r3, #60]	; 0x3c
      hdcmi->XferCount = hdcmi->XferCount * 2U;
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b4c:	005a      	lsls	r2, r3, #1
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	639a      	str	r2, [r3, #56]	; 0x38
    while (hdcmi->XferSize > 0xFFFFU)
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b56:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006b5a:	d2f0      	bcs.n	8006b3e <HAL_DCMI_Start_DMA+0x152>
    }

    /* Update DCMI counter  and transfer number*/
    hdcmi->XferCount = (hdcmi->XferCount - 1U);
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b60:	1e5a      	subs	r2, r3, #1
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	639a      	str	r2, [r3, #56]	; 0x38
    hdcmi->XferTransferNumber = hdcmi->XferCount;
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	641a      	str	r2, [r3, #64]	; 0x40

    if ((hdcmi->DMA_Handle->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006b72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	f000 80a3 	beq.w	8006cc4 <HAL_DCMI_Start_DMA+0x2d8>
    {
      if ((hdcmi->DMA_Handle->LinkedListQueue != 0U) && (hdcmi->DMA_Handle->LinkedListQueue->Head != 0U))
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006b82:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	f000 808a 	beq.w	8006c9e <HAL_DCMI_Start_DMA+0x2b2>
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006b8e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	f000 8083 	beq.w	8006c9e <HAL_DCMI_Start_DMA+0x2b2>
      {
        /* Update first node */

        /* Set DMA Data size */
        hdcmi->DMA_Handle->LinkedListQueue->Head->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = hdcmi->XferSize ;
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006b9c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	68fa      	ldr	r2, [r7, #12]
 8006ba2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8006ba4:	609a      	str	r2, [r3, #8]

        /* Set DMA Source address */
        hdcmi->DMA_Handle->LinkedListQueue->Head->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] = \
            (uint32_t)&hdcmi->Instance->DR;
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	f103 0228 	add.w	r2, r3, #40	; 0x28
        hdcmi->DMA_Handle->LinkedListQueue->Head->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] = \
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006bb2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	60da      	str	r2, [r3, #12]

        /* Set DMA Destination address */
        hdcmi->DMA_Handle->LinkedListQueue->Head->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = (uint32_t)pData;
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006bbc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	687a      	ldr	r2, [r7, #4]
 8006bc2:	611a      	str	r2, [r3, #16]

        /* Get CLLR offset */
        cllr_offset = (hdcmi->DMA_Handle->LinkedListQueue->Head->NodeInfo & NODE_CLLR_IDX) >> 8U;
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006bc8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	6a1b      	ldr	r3, [r3, #32]
 8006bce:	0a1b      	lsrs	r3, r3, #8
 8006bd0:	f003 0307 	and.w	r3, r3, #7
 8006bd4:	61fb      	str	r3, [r7, #28]

        /* Update second node */
        if (hdcmi->DMA_Handle->LinkedListQueue->Head->LinkRegisters[cllr_offset] != 0U)
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006bda:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	69fa      	ldr	r2, [r7, #28]
 8006be0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d04b      	beq.n	8006c80 <HAL_DCMI_Start_DMA+0x294>
        {
          tmp1 = (uint32_t)hdcmi->DMA_Handle->LinkedListQueue->Head ;
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006bec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	61bb      	str	r3, [r7, #24]
          tmp2 = hdcmi->DMA_Handle->LinkedListQueue->Head->LinkRegisters[cllr_offset];
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006bf6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	69fa      	ldr	r2, [r7, #28]
 8006bfc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c00:	617b      	str	r3, [r7, #20]
          /* Update second node */

          /* Set DMA Data size */
          ((DMA_NodeTypeDef *)((tmp1 & DMA_CLBAR_LBA) + \
 8006c02:	69bb      	ldr	r3, [r7, #24]
 8006c04:	0c1b      	lsrs	r3, r3, #16
 8006c06:	041b      	lsls	r3, r3, #16
                               (tmp2 & DMA_CLLR_LA)))->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = hdcmi->XferSize;
 8006c08:	6979      	ldr	r1, [r7, #20]
 8006c0a:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 8006c0e:	400a      	ands	r2, r1
          ((DMA_NodeTypeDef *)((tmp1 & DMA_CLBAR_LBA) + \
 8006c10:	4313      	orrs	r3, r2
 8006c12:	461a      	mov	r2, r3
                               (tmp2 & DMA_CLLR_LA)))->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = hdcmi->XferSize;
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c18:	6093      	str	r3, [r2, #8]

          /* Set DMA Source address */
          ((DMA_NodeTypeDef *)((tmp1 & DMA_CLBAR_LBA) + \
                               (tmp2 & DMA_CLLR_LA)))->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] = \
                                   (uint32_t)&hdcmi->Instance->DR;
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	f103 0028 	add.w	r0, r3, #40	; 0x28
          ((DMA_NodeTypeDef *)((tmp1 & DMA_CLBAR_LBA) + \
 8006c22:	69bb      	ldr	r3, [r7, #24]
 8006c24:	0c1b      	lsrs	r3, r3, #16
 8006c26:	041b      	lsls	r3, r3, #16
                               (tmp2 & DMA_CLLR_LA)))->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] = \
 8006c28:	6979      	ldr	r1, [r7, #20]
 8006c2a:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 8006c2e:	400a      	ands	r2, r1
          ((DMA_NodeTypeDef *)((tmp1 & DMA_CLBAR_LBA) + \
 8006c30:	4313      	orrs	r3, r2
                                   (uint32_t)&hdcmi->Instance->DR;
 8006c32:	4602      	mov	r2, r0
                               (tmp2 & DMA_CLLR_LA)))->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] = \
 8006c34:	60da      	str	r2, [r3, #12]

          /* Set DMA Destination address */
          ((DMA_NodeTypeDef *)((tmp1 & DMA_CLBAR_LBA) + \
                               (tmp2 & DMA_CLLR_LA)))->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = \
                                   (uint32_t)pData + hdcmi->XferSize;
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
          ((DMA_NodeTypeDef *)((tmp1 & DMA_CLBAR_LBA) + \
 8006c3a:	69bb      	ldr	r3, [r7, #24]
 8006c3c:	0c1b      	lsrs	r3, r3, #16
 8006c3e:	041b      	lsls	r3, r3, #16
                               (tmp2 & DMA_CLLR_LA)))->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = \
 8006c40:	6978      	ldr	r0, [r7, #20]
 8006c42:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 8006c46:	4002      	ands	r2, r0
          ((DMA_NodeTypeDef *)((tmp1 & DMA_CLBAR_LBA) + \
 8006c48:	4313      	orrs	r3, r2
 8006c4a:	461a      	mov	r2, r3
                                   (uint32_t)pData + hdcmi->XferSize;
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	440b      	add	r3, r1
                               (tmp2 & DMA_CLLR_LA)))->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = \
 8006c50:	6113      	str	r3, [r2, #16]

          if (HAL_DMAEx_List_Start_IT(hdcmi->DMA_Handle) != HAL_OK)
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c56:	4618      	mov	r0, r3
 8006c58:	f000 fdc6 	bl	80077e8 <HAL_DMAEx_List_Start_IT>
 8006c5c:	4603      	mov	r3, r0
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d03f      	beq.n	8006ce2 <HAL_DCMI_Start_DMA+0x2f6>
          {
            /* Set Error Code */
            hdcmi->ErrorCode = HAL_DCMI_ERROR_DMA;
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	2240      	movs	r2, #64	; 0x40
 8006c66:	64da      	str	r2, [r3, #76]	; 0x4c
            /* Change DCMI state */
            hdcmi->State = HAL_DCMI_STATE_READY;
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	2201      	movs	r2, #1
 8006c6c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
            /* Release Lock */
            __HAL_UNLOCK(hdcmi);
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	2200      	movs	r2, #0
 8006c74:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
            /* Return function status */
            status = HAL_ERROR;
 8006c78:	2301      	movs	r3, #1
 8006c7a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (hdcmi->DMA_Handle->LinkedListQueue->Head->LinkRegisters[cllr_offset] != 0U)
 8006c7e:	e030      	b.n	8006ce2 <HAL_DCMI_Start_DMA+0x2f6>
          }
        }
        else
        {
          /* Set Error Code */
          hdcmi->ErrorCode = HAL_DCMI_ERROR_DMA;
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	2240      	movs	r2, #64	; 0x40
 8006c84:	64da      	str	r2, [r3, #76]	; 0x4c
          /* Change DCMI state */
          hdcmi->State = HAL_DCMI_STATE_READY;
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	2201      	movs	r2, #1
 8006c8a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          /* Release Lock */
          __HAL_UNLOCK(hdcmi);
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	2200      	movs	r2, #0
 8006c92:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          /* Return function status */
          status = HAL_ERROR;
 8006c96:	2301      	movs	r3, #1
 8006c98:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (hdcmi->DMA_Handle->LinkedListQueue->Head->LinkRegisters[cllr_offset] != 0U)
 8006c9c:	e021      	b.n	8006ce2 <HAL_DCMI_Start_DMA+0x2f6>
        }
      }
      else
      {
        /* Set Error Code */
        hdcmi->ErrorCode = HAL_DCMI_ERROR_DMA;
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	2240      	movs	r2, #64	; 0x40
 8006ca2:	64da      	str	r2, [r3, #76]	; 0x4c
        /* Change DCMI state */
        hdcmi->State = HAL_DCMI_STATE_READY;
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	2201      	movs	r2, #1
 8006ca8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        /* Release Lock */
        __HAL_UNLOCK(hdcmi);
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	2200      	movs	r2, #0
 8006cb0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        /* Return function status */
        status = HAL_ERROR;
 8006cb4:	2301      	movs	r3, #1
 8006cb6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006cba:	e013      	b.n	8006ce4 <HAL_DCMI_Start_DMA+0x2f8>
 8006cbc:	08006e91 	.word	0x08006e91
 8006cc0:	08006f9d 	.word	0x08006f9d
      }
    }
    else
    {
      /* Set Error Code */
      hdcmi->ErrorCode = HAL_DCMI_ERROR_DMA;
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	2240      	movs	r2, #64	; 0x40
 8006cc8:	64da      	str	r2, [r3, #76]	; 0x4c
      /* Change DCMI state */
      hdcmi->State = HAL_DCMI_STATE_READY;
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	2201      	movs	r2, #1
 8006cce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      /* Release Lock */
      __HAL_UNLOCK(hdcmi);
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	2200      	movs	r2, #0
 8006cd6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      /* Return function status */
      status = HAL_ERROR;
 8006cda:	2301      	movs	r3, #1
 8006cdc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006ce0:	e000      	b.n	8006ce4 <HAL_DCMI_Start_DMA+0x2f8>
        if (hdcmi->DMA_Handle->LinkedListQueue->Head->LinkRegisters[cllr_offset] != 0U)
 8006ce2:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 8006ce4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d10c      	bne.n	8006d06 <HAL_DCMI_Start_DMA+0x31a>
  {
    /* Enable Capture */
    hdcmi->Instance->CR |= DCMI_CR_CAPTURE;
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	681a      	ldr	r2, [r3, #0]
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	f042 0201 	orr.w	r2, r2, #1
 8006cfa:	601a      	str	r2, [r3, #0]

    /* Release Lock */
    __HAL_UNLOCK(hdcmi);
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	2200      	movs	r2, #0
 8006d00:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 8006d04:	e00d      	b.n	8006d22 <HAL_DCMI_Start_DMA+0x336>
  }
  else
  {
    /* Set Error Code */
    hdcmi->ErrorCode = HAL_DCMI_ERROR_DMA;
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	2240      	movs	r2, #64	; 0x40
 8006d0a:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_READY;
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	2201      	movs	r2, #1
 8006d10:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    /* Release Lock */
    __HAL_UNLOCK(hdcmi);
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	2200      	movs	r2, #0
 8006d18:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    /* Return function status */
    status = HAL_ERROR;
 8006d1c:	2301      	movs	r3, #1
 8006d1e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Return function status */
  return status;
 8006d22:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8006d26:	4618      	mov	r0, r3
 8006d28:	3728      	adds	r7, #40	; 0x28
 8006d2a:	46bd      	mov	sp, r7
 8006d2c:	bd80      	pop	{r7, pc}
 8006d2e:	bf00      	nop

08006d30 <HAL_DCMI_IRQHandler>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for the DCMI.
  * @retval None
  */
void HAL_DCMI_IRQHandler(DCMI_HandleTypeDef *hdcmi)
{
 8006d30:	b580      	push	{r7, lr}
 8006d32:	b084      	sub	sp, #16
 8006d34:	af00      	add	r7, sp, #0
 8006d36:	6078      	str	r0, [r7, #4]
  uint32_t isr_value = READ_REG(hdcmi->Instance->MISR);
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	691b      	ldr	r3, [r3, #16]
 8006d3e:	60fb      	str	r3, [r7, #12]

  /* Synchronization error interrupt management *******************************/
  if ((isr_value & DCMI_FLAG_ERRRI) == DCMI_FLAG_ERRRI)
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	f003 0304 	and.w	r3, r3, #4
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d01e      	beq.n	8006d88 <HAL_DCMI_IRQHandler+0x58>
  {
    /* Clear the Synchronization error flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_ERRRI);
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	2204      	movs	r2, #4
 8006d50:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_SYNC;
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d56:	f043 0202 	orr.w	r2, r3, #2
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	2204      	movs	r2, #4
 8006d62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Set the synchronization error callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006d6a:	4a39      	ldr	r2, [pc, #228]	; (8006e50 <HAL_DCMI_IRQHandler+0x120>)
 8006d6c:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Abort the DMA Transfer */
    if (HAL_DMA_Abort_IT(hdcmi->DMA_Handle) != HAL_OK)
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006d72:	4618      	mov	r0, r3
 8006d74:	f000 fa0b 	bl	800718e <HAL_DMA_Abort_IT>
 8006d78:	4603      	mov	r3, r0
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d004      	beq.n	8006d88 <HAL_DCMI_IRQHandler+0x58>
    {
      DCMI_DMAError(hdcmi->DMA_Handle);
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006d82:	4618      	mov	r0, r3
 8006d84:	f000 f90a 	bl	8006f9c <DCMI_DMAError>
    }
  }
  /* Overflow interrupt management ********************************************/
  if ((isr_value & DCMI_FLAG_OVRRI) == DCMI_FLAG_OVRRI)
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	f003 0302 	and.w	r3, r3, #2
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d01e      	beq.n	8006dd0 <HAL_DCMI_IRQHandler+0xa0>
  {
    /* Clear the Overflow flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_OVRRI);
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	2202      	movs	r2, #2
 8006d98:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_OVR;
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d9e:	f043 0201 	orr.w	r2, r3, #1
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	2204      	movs	r2, #4
 8006daa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Set the overflow callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006db2:	4a27      	ldr	r2, [pc, #156]	; (8006e50 <HAL_DCMI_IRQHandler+0x120>)
 8006db4:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Abort the DMA Transfer */
    if (HAL_DMA_Abort_IT(hdcmi->DMA_Handle) != HAL_OK)
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006dba:	4618      	mov	r0, r3
 8006dbc:	f000 f9e7 	bl	800718e <HAL_DMA_Abort_IT>
 8006dc0:	4603      	mov	r3, r0
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d004      	beq.n	8006dd0 <HAL_DCMI_IRQHandler+0xa0>
    {
      DCMI_DMAError(hdcmi->DMA_Handle);
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006dca:	4618      	mov	r0, r3
 8006dcc:	f000 f8e6 	bl	8006f9c <DCMI_DMAError>
    }
  }
  /* Line Interrupt management ************************************************/
  if ((isr_value & DCMI_FLAG_LINERI) == DCMI_FLAG_LINERI)
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	f003 0310 	and.w	r3, r3, #16
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d006      	beq.n	8006de8 <HAL_DCMI_IRQHandler+0xb8>
  {
    /* Clear the Line interrupt flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_LINERI);
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	2210      	movs	r2, #16
 8006de0:	615a      	str	r2, [r3, #20]
    /* Line interrupt Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI line event callback*/
    hdcmi->LineEventCallback(hdcmi);
#else
    HAL_DCMI_LineEventCallback(hdcmi);
 8006de2:	6878      	ldr	r0, [r7, #4]
 8006de4:	f000 f840 	bl	8006e68 <HAL_DCMI_LineEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
  /* VSYNC interrupt management ***********************************************/
  if ((isr_value & DCMI_FLAG_VSYNCRI) == DCMI_FLAG_VSYNCRI)
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	f003 0308 	and.w	r3, r3, #8
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d006      	beq.n	8006e00 <HAL_DCMI_IRQHandler+0xd0>
  {
    /* Clear the VSYNC flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_VSYNCRI);
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	2208      	movs	r2, #8
 8006df8:	615a      	str	r2, [r3, #20]
    /* VSYNC Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI vsync event callback*/
    hdcmi->VsyncEventCallback(hdcmi);
#else
    HAL_DCMI_VsyncEventCallback(hdcmi);
 8006dfa:	6878      	ldr	r0, [r7, #4]
 8006dfc:	f000 f83e 	bl	8006e7c <HAL_DCMI_VsyncEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
  /* FRAME interrupt management ***********************************************/
  if ((isr_value & DCMI_FLAG_FRAMERI) == DCMI_FLAG_FRAMERI)
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	f003 0301 	and.w	r3, r3, #1
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d01d      	beq.n	8006e46 <HAL_DCMI_IRQHandler+0x116>
  {
    /* When snapshot mode, disable Vsync, Error and Overrun interrupts */
    if ((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	f003 0302 	and.w	r3, r3, #2
 8006e14:	2b02      	cmp	r3, #2
 8006e16:	d107      	bne.n	8006e28 <HAL_DCMI_IRQHandler+0xf8>
    {
      /* Disable the Line, Vsync, Error and Overrun interrupts */
      __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	68da      	ldr	r2, [r3, #12]
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	f022 021e 	bic.w	r2, r2, #30
 8006e26:	60da      	str	r2, [r3, #12]
    }

    /* Disable the Frame interrupt */
    __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_FRAME);
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	68da      	ldr	r2, [r3, #12]
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	f022 0201 	bic.w	r2, r2, #1
 8006e36:	60da      	str	r2, [r3, #12]

    /* Clear the End of Frame flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_FRAMERI);
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	2201      	movs	r2, #1
 8006e3e:	615a      	str	r2, [r3, #20]
    /* Frame Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI frame event callback*/
    hdcmi->FrameEventCallback(hdcmi);
#else
    HAL_DCMI_FrameEventCallback(hdcmi);
 8006e40:	6878      	ldr	r0, [r7, #4]
 8006e42:	f7fa fb61 	bl	8001508 <HAL_DCMI_FrameEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
}
 8006e46:	bf00      	nop
 8006e48:	3710      	adds	r7, #16
 8006e4a:	46bd      	mov	sp, r7
 8006e4c:	bd80      	pop	{r7, pc}
 8006e4e:	bf00      	nop
 8006e50:	08006f9d 	.word	0x08006f9d

08006e54 <HAL_DCMI_ErrorCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_ErrorCallback(DCMI_HandleTypeDef *hdcmi)
{
 8006e54:	b480      	push	{r7}
 8006e56:	b083      	sub	sp, #12
 8006e58:	af00      	add	r7, sp, #0
 8006e5a:	6078      	str	r0, [r7, #4]
  UNUSED(hdcmi);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_ErrorCallback could be implemented in the user file
   */
}
 8006e5c:	bf00      	nop
 8006e5e:	370c      	adds	r7, #12
 8006e60:	46bd      	mov	sp, r7
 8006e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e66:	4770      	bx	lr

08006e68 <HAL_DCMI_LineEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_LineEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8006e68:	b480      	push	{r7}
 8006e6a:	b083      	sub	sp, #12
 8006e6c:	af00      	add	r7, sp, #0
 8006e6e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_LineEventCallback could be implemented in the user file
   */
}
 8006e70:	bf00      	nop
 8006e72:	370c      	adds	r7, #12
 8006e74:	46bd      	mov	sp, r7
 8006e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e7a:	4770      	bx	lr

08006e7c <HAL_DCMI_VsyncEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_VsyncEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8006e7c:	b480      	push	{r7}
 8006e7e:	b083      	sub	sp, #12
 8006e80:	af00      	add	r7, sp, #0
 8006e82:	6078      	str	r0, [r7, #4]
  UNUSED(hdcmi);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_VsyncEventCallback could be implemented in the user file
   */
}
 8006e84:	bf00      	nop
 8006e86:	370c      	adds	r7, #12
 8006e88:	46bd      	mov	sp, r7
 8006e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e8e:	4770      	bx	lr

08006e90 <DCMI_DMAXferCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8006e90:	b480      	push	{r7}
 8006e92:	b08b      	sub	sp, #44	; 0x2c
 8006e94:	af00      	add	r7, sp, #0
 8006e96:	6078      	str	r0, [r7, #4]

  DCMI_HandleTypeDef *hdcmi = (DCMI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e9c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t transfernumber;
  uint32_t transfercount;
  uint32_t transfersize ;

  /* Update Nodes destinations */
  if (hdcmi->XferSize != 0U)
 8006e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ea0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d061      	beq.n	8006f6a <DCMI_DMAXferCplt+0xda>
  {
    pbuff          = hdcmi->pBuffPtr;
 8006ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ea8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006eaa:	623b      	str	r3, [r7, #32]
    transfernumber = hdcmi->XferTransferNumber;
 8006eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006eb0:	61fb      	str	r3, [r7, #28]
    transfercount  = hdcmi->XferCount;
 8006eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006eb6:	61bb      	str	r3, [r7, #24]
    transfersize   = hdcmi->XferSize;
 8006eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ebc:	617b      	str	r3, [r7, #20]

    tmp1 = hdcmi->DMA_Handle->Instance->CLLR & DMA_CLLR_LA;
 8006ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ec0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8006ec6:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 8006eca:	4013      	ands	r3, r2
 8006ecc:	613b      	str	r3, [r7, #16]
    tmp2 = hdcmi->DMA_Handle->Instance->CLBAR & DMA_CLBAR_LBA;
 8006ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ed0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	0c1b      	lsrs	r3, r3, #16
 8006ed8:	041b      	lsls	r3, r3, #16
 8006eda:	60fb      	str	r3, [r7, #12]
    pnode = (DMA_NodeTypeDef *)(uint32_t)(tmp1 | tmp2);
 8006edc:	693a      	ldr	r2, [r7, #16]
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	4313      	orrs	r3, r2
 8006ee2:	60bb      	str	r3, [r7, #8]

    if (hdcmi->XferCount > 1U)
 8006ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ee6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ee8:	2b01      	cmp	r3, #1
 8006eea:	d910      	bls.n	8006f0e <DCMI_DMAXferCplt+0x7e>
    {
      pnode->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = pbuff + ((transfernumber - transfercount + 2U) * transfersize);
 8006eec:	69fa      	ldr	r2, [r7, #28]
 8006eee:	69bb      	ldr	r3, [r7, #24]
 8006ef0:	1ad3      	subs	r3, r2, r3
 8006ef2:	3302      	adds	r3, #2
 8006ef4:	697a      	ldr	r2, [r7, #20]
 8006ef6:	fb03 f202 	mul.w	r2, r3, r2
 8006efa:	6a3b      	ldr	r3, [r7, #32]
 8006efc:	441a      	add	r2, r3
 8006efe:	68bb      	ldr	r3, [r7, #8]
 8006f00:	611a      	str	r2, [r3, #16]
      hdcmi->XferCount--;
 8006f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f06:	1e5a      	subs	r2, r3, #1
 8006f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f0a:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
    {
      hdcmi->State = HAL_DCMI_STATE_READY;
    }
  }
}
 8006f0c:	e040      	b.n	8006f90 <DCMI_DMAXferCplt+0x100>
    else if (hdcmi->XferCount == 1U)
 8006f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f12:	2b01      	cmp	r3, #1
 8006f14:	d109      	bne.n	8006f2a <DCMI_DMAXferCplt+0x9a>
      pnode->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = hdcmi->pBuffPtr;
 8006f16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f18:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006f1a:	68bb      	ldr	r3, [r7, #8]
 8006f1c:	611a      	str	r2, [r3, #16]
      hdcmi->XferCount--;
 8006f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f22:	1e5a      	subs	r2, r3, #1
 8006f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f26:	639a      	str	r2, [r3, #56]	; 0x38
}
 8006f28:	e032      	b.n	8006f90 <DCMI_DMAXferCplt+0x100>
      pnode->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = hdcmi->pBuffPtr + hdcmi->XferSize;
 8006f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f2c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f32:	441a      	add	r2, r3
 8006f34:	68bb      	ldr	r3, [r7, #8]
 8006f36:	611a      	str	r2, [r3, #16]
      if ((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_CONTINUOUS)
 8006f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	f003 0302 	and.w	r3, r3, #2
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d104      	bne.n	8006f50 <DCMI_DMAXferCplt+0xc0>
        hdcmi->XferCount = hdcmi->XferTransferNumber ;
 8006f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f48:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f4c:	639a      	str	r2, [r3, #56]	; 0x38
 8006f4e:	e003      	b.n	8006f58 <DCMI_DMAXferCplt+0xc8>
        hdcmi->State = HAL_DCMI_STATE_READY;
 8006f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f52:	2201      	movs	r2, #1
 8006f54:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_FRAME);
 8006f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	68da      	ldr	r2, [r3, #12]
 8006f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	f042 0201 	orr.w	r2, r2, #1
 8006f66:	60da      	str	r2, [r3, #12]
}
 8006f68:	e012      	b.n	8006f90 <DCMI_DMAXferCplt+0x100>
    __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_FRAME);
 8006f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	68da      	ldr	r2, [r3, #12]
 8006f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	f042 0201 	orr.w	r2, r2, #1
 8006f78:	60da      	str	r2, [r3, #12]
    if ((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 8006f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	f003 0302 	and.w	r3, r3, #2
 8006f84:	2b02      	cmp	r3, #2
 8006f86:	d103      	bne.n	8006f90 <DCMI_DMAXferCplt+0x100>
      hdcmi->State = HAL_DCMI_STATE_READY;
 8006f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f8a:	2201      	movs	r2, #1
 8006f8c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
}
 8006f90:	bf00      	nop
 8006f92:	372c      	adds	r7, #44	; 0x2c
 8006f94:	46bd      	mov	sp, r7
 8006f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f9a:	4770      	bx	lr

08006f9c <DCMI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAError(DMA_HandleTypeDef *hdma)
{
 8006f9c:	b580      	push	{r7, lr}
 8006f9e:	b084      	sub	sp, #16
 8006fa0:	af00      	add	r7, sp, #0
 8006fa2:	6078      	str	r0, [r7, #4]
  DCMI_HandleTypeDef *hdcmi = (DCMI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006fa8:	60fb      	str	r3, [r7, #12]

  if (hdcmi->DMA_Handle->ErrorCode != HAL_DMA_ERROR_ULE)
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006fae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006fb0:	2b02      	cmp	r3, #2
 8006fb2:	d009      	beq.n	8006fc8 <DCMI_DMAError+0x2c>
  {
    /* Initialize the DCMI state*/
    hdcmi->State = HAL_DCMI_STATE_READY;
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	2201      	movs	r2, #1
 8006fb8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Set DCMI Error Code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_DMA;
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006fc0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	64da      	str	r2, [r3, #76]	; 0x4c
  /* DCMI error Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
  /*Call registered DCMI error callback*/
  hdcmi->ErrorCallback(hdcmi);
#else
  HAL_DCMI_ErrorCallback(hdcmi);
 8006fc8:	68f8      	ldr	r0, [r7, #12]
 8006fca:	f7ff ff43 	bl	8006e54 <HAL_DCMI_ErrorCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */

}
 8006fce:	bf00      	nop
 8006fd0:	3710      	adds	r7, #16
 8006fd2:	46bd      	mov	sp, r7
 8006fd4:	bd80      	pop	{r7, pc}

08006fd6 <HAL_DMA_Start_IT>:
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *const hdma,
                                   uint32_t SrcAddress,
                                   uint32_t DstAddress,
                                   uint32_t SrcDataSize)
{
 8006fd6:	b580      	push	{r7, lr}
 8006fd8:	b084      	sub	sp, #16
 8006fda:	af00      	add	r7, sp, #0
 8006fdc:	60f8      	str	r0, [r7, #12]
 8006fde:	60b9      	str	r1, [r7, #8]
 8006fe0:	607a      	str	r2, [r7, #4]
 8006fe2:	603b      	str	r3, [r7, #0]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d101      	bne.n	8006fee <HAL_DMA_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006fea:	2301      	movs	r3, #1
 8006fec:	e04f      	b.n	800708e <HAL_DMA_Start_IT+0xb8>

  /* Check the parameters */
  assert_param(IS_DMA_BLOCK_SIZE(SrcDataSize));

  /* Process locked */
  __HAL_LOCK(hdma);
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8006ff4:	2b01      	cmp	r3, #1
 8006ff6:	d101      	bne.n	8006ffc <HAL_DMA_Start_IT+0x26>
 8006ff8:	2302      	movs	r3, #2
 8006ffa:	e048      	b.n	800708e <HAL_DMA_Start_IT+0xb8>
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	2201      	movs	r2, #1
 8007000:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  /* Check DMA channel state */
  if (hdma->State == HAL_DMA_STATE_READY)
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800700a:	b2db      	uxtb	r3, r3
 800700c:	2b01      	cmp	r3, #1
 800700e:	d136      	bne.n	800707e <HAL_DMA_Start_IT+0xa8>
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	2202      	movs	r2, #2
 8007014:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	2200      	movs	r2, #0
 800701c:	659a      	str	r2, [r3, #88]	; 0x58

    /* Configure the source address, destination address, the data size and clear flags */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, SrcDataSize);
 800701e:	683b      	ldr	r3, [r7, #0]
 8007020:	687a      	ldr	r2, [r7, #4]
 8007022:	68b9      	ldr	r1, [r7, #8]
 8007024:	68f8      	ldr	r0, [r7, #12]
 8007026:	f000 fa8b 	bl	8007540 <DMA_SetConfig>

    /* Enable common interrupts: Transfer Complete and Transfer Errors ITs */
    __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_DTE | DMA_IT_ULE | DMA_IT_USE | DMA_IT_TO));
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	695a      	ldr	r2, [r3, #20]
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	f442 42ba 	orr.w	r2, r2, #23808	; 0x5d00
 8007038:	615a      	str	r2, [r3, #20]

    /* Check half transfer complete callback */
    if (hdma->XferHalfCpltCallback != NULL)
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800703e:	2b00      	cmp	r3, #0
 8007040:	d007      	beq.n	8007052 <HAL_DMA_Start_IT+0x7c>
    {
      /* If Half Transfer complete callback is set, enable the corresponding IT */
      __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	695a      	ldr	r2, [r3, #20]
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007050:	615a      	str	r2, [r3, #20]
    }

    /* Check Half suspend callback */
    if (hdma->XferSuspendCallback != NULL)
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007056:	2b00      	cmp	r3, #0
 8007058:	d007      	beq.n	800706a <HAL_DMA_Start_IT+0x94>
    {
      /* If Transfer suspend callback is set, enable the corresponding IT */
      __HAL_DMA_ENABLE_IT(hdma, DMA_IT_SUSP);
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	695a      	ldr	r2, [r3, #20]
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007068:	615a      	str	r2, [r3, #20]
    }

    /* Enable DMA channel */
    __HAL_DMA_ENABLE(hdma);
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	695a      	ldr	r2, [r3, #20]
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	f042 0201 	orr.w	r2, r2, #1
 8007078:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hdma);

    return HAL_ERROR;
  }

  return HAL_OK;
 800707a:	2300      	movs	r3, #0
 800707c:	e007      	b.n	800708e <HAL_DMA_Start_IT+0xb8>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	2240      	movs	r2, #64	; 0x40
 8007082:	659a      	str	r2, [r3, #88]	; 0x58
    __HAL_UNLOCK(hdma);
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	2200      	movs	r2, #0
 8007088:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    return HAL_ERROR;
 800708c:	2301      	movs	r3, #1
}
 800708e:	4618      	mov	r0, r3
 8007090:	3710      	adds	r7, #16
 8007092:	46bd      	mov	sp, r7
 8007094:	bd80      	pop	{r7, pc}

08007096 <HAL_DMA_Abort>:
  *         is suspended while a data transfer is on-going, the current data will be transferred and the channel will be
  *         effectively suspended only after the transfer of any on-going data is finished.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *const hdma)
{
 8007096:	b580      	push	{r7, lr}
 8007098:	b084      	sub	sp, #16
 800709a:	af00      	add	r7, sp, #0
 800709c:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart =  HAL_GetTick();
 800709e:	f7ff fa33 	bl	8006508 <HAL_GetTick>
 80070a2:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d101      	bne.n	80070ae <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80070aa:	2301      	movs	r3, #1
 80070ac:	e06b      	b.n	8007186 <HAL_DMA_Abort+0xf0>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80070b4:	b2db      	uxtb	r3, r3
 80070b6:	2b02      	cmp	r3, #2
 80070b8:	d008      	beq.n	80070cc <HAL_DMA_Abort+0x36>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	2220      	movs	r2, #32
 80070be:	659a      	str	r2, [r3, #88]	; 0x58

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	2200      	movs	r2, #0
 80070c4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

    return HAL_ERROR;
 80070c8:	2301      	movs	r3, #1
 80070ca:	e05c      	b.n	8007186 <HAL_DMA_Abort+0xf0>
  }
  else
  {
    /* Suspend the channel */
    hdma->Instance->CCR |= DMA_CCR_SUSP;
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	695a      	ldr	r2, [r3, #20]
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	f042 0204 	orr.w	r2, r2, #4
 80070da:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_SUSPEND;
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	2205      	movs	r2, #5
 80070e0:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Check if the DMA Channel is suspended */
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 80070e4:	e020      	b.n	8007128 <HAL_DMA_Abort+0x92>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 80070e6:	f7ff fa0f 	bl	8006508 <HAL_GetTick>
 80070ea:	4602      	mov	r2, r0
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	1ad3      	subs	r3, r2, r3
 80070f0:	2b05      	cmp	r3, #5
 80070f2:	d919      	bls.n	8007128 <HAL_DMA_Abort+0x92>
      {
        /* Update the DMA channel error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TIMEOUT;
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80070f8:	f043 0210 	orr.w	r2, r3, #16
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	659a      	str	r2, [r3, #88]	; 0x58

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	2203      	movs	r2, #3
 8007104:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800710c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007110:	2b00      	cmp	r3, #0
 8007112:	d003      	beq.n	800711c <HAL_DMA_Abort+0x86>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007118:	2201      	movs	r2, #1
 800711a:	731a      	strb	r2, [r3, #12]
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	2200      	movs	r2, #0
 8007120:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        return HAL_ERROR;
 8007124:	2301      	movs	r3, #1
 8007126:	e02e      	b.n	8007186 <HAL_DMA_Abort+0xf0>
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	691b      	ldr	r3, [r3, #16]
 800712e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007132:	2b00      	cmp	r3, #0
 8007134:	d0d7      	beq.n	80070e6 <HAL_DMA_Abort+0x50>
      }
    }

    /* Reset the channel */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	695a      	ldr	r2, [r3, #20]
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	f042 0202 	orr.w	r2, r2, #2
 8007144:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	2204      	movs	r2, #4
 800714a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Clear all status flags */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	f44f 42fe 	mov.w	r2, #32512	; 0x7f00
 8007156:	60da      	str	r2, [r3, #12]
                                DMA_FLAG_TO));

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	2201      	movs	r2, #1
 800715c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007164:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007168:	2b00      	cmp	r3, #0
 800716a:	d007      	beq.n	800717c <HAL_DMA_Abort+0xe6>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007170:	2201      	movs	r2, #1
 8007172:	731a      	strb	r2, [r3, #12]

      /* Clear remaining data size to ensure loading linked-list from memory next start */
      hdma->Instance->CBR1 = 0U;
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	2200      	movs	r2, #0
 800717a:	649a      	str	r2, [r3, #72]	; 0x48
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	2200      	movs	r2, #0
 8007180:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8007184:	2300      	movs	r3, #0
}
 8007186:	4618      	mov	r0, r3
 8007188:	3710      	adds	r7, #16
 800718a:	46bd      	mov	sp, r7
 800718c:	bd80      	pop	{r7, pc}

0800718e <HAL_DMA_Abort_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *const hdma)
{
 800718e:	b480      	push	{r7}
 8007190:	b083      	sub	sp, #12
 8007192:	af00      	add	r7, sp, #0
 8007194:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	2b00      	cmp	r3, #0
 800719a:	d101      	bne.n	80071a0 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800719c:	2301      	movs	r3, #1
 800719e:	e019      	b.n	80071d4 <HAL_DMA_Abort_IT+0x46>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80071a6:	b2db      	uxtb	r3, r3
 80071a8:	2b02      	cmp	r3, #2
 80071aa:	d004      	beq.n	80071b6 <HAL_DMA_Abort_IT+0x28>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	2220      	movs	r2, #32
 80071b0:	659a      	str	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 80071b2:	2301      	movs	r3, #1
 80071b4:	e00e      	b.n	80071d4 <HAL_DMA_Abort_IT+0x46>
  }
  else
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	2204      	movs	r2, #4
 80071ba:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Suspend the channel and activate suspend interrupt */
    hdma->Instance->CCR |= (DMA_CCR_SUSP | DMA_CCR_SUSPIE);
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	695b      	ldr	r3, [r3, #20]
 80071c4:	687a      	ldr	r2, [r7, #4]
 80071c6:	6812      	ldr	r2, [r2, #0]
 80071c8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80071cc:	f043 0304 	orr.w	r3, r3, #4
 80071d0:	6153      	str	r3, [r2, #20]
  }

  return HAL_OK;
 80071d2:	2300      	movs	r3, #0
}
 80071d4:	4618      	mov	r0, r3
 80071d6:	370c      	adds	r7, #12
 80071d8:	46bd      	mov	sp, r7
 80071da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071de:	4770      	bx	lr

080071e0 <HAL_DMA_IRQHandler>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *const hdma)
{
 80071e0:	b580      	push	{r7, lr}
 80071e2:	b084      	sub	sp, #16
 80071e4:	af00      	add	r7, sp, #0
 80071e6:	6078      	str	r0, [r7, #4]
  DMA_TypeDef *p_dma_instance = GET_DMA_INSTANCE(hdma);
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80071f0:	f023 030f 	bic.w	r3, r3, #15
 80071f4:	60fb      	str	r3, [r7, #12]
  uint32_t global_it_flag =  1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80071fe:	3b50      	subs	r3, #80	; 0x50
 8007200:	09db      	lsrs	r3, r3, #7
 8007202:	f003 031f 	and.w	r3, r3, #31
 8007206:	2201      	movs	r2, #1
 8007208:	fa02 f303 	lsl.w	r3, r2, r3
 800720c:	60bb      	str	r3, [r7, #8]

  /* Global Interrupt Flag management *********************************************************************************/
  if (IS_DMA_GLOBAL_ACTIVE_FLAG(p_dma_instance, global_it_flag) == 0U)
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	68da      	ldr	r2, [r3, #12]
 8007212:	68bb      	ldr	r3, [r7, #8]
 8007214:	4013      	ands	r3, r2
 8007216:	2b00      	cmp	r3, #0
 8007218:	f000 8150 	beq.w	80074bc <HAL_DMA_IRQHandler+0x2dc>
  {
    return; /* the global interrupt flag for the current channel is down , nothing to do */
  }

  /* Data Transfer Error Interrupt management *************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_DTE) != 0U))
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	691b      	ldr	r3, [r3, #16]
 8007222:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007226:	2b00      	cmp	r3, #0
 8007228:	d011      	beq.n	800724e <HAL_DMA_IRQHandler+0x6e>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DTE) != 0U)
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	695b      	ldr	r3, [r3, #20]
 8007230:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007234:	2b00      	cmp	r3, #0
 8007236:	d00a      	beq.n	800724e <HAL_DMA_IRQHandler+0x6e>
    {
      /* Clear the transfer error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_DTE);
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007240:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DTE;
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007246:	f043 0201 	orr.w	r2, r3, #1
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }

  /* Update Linked-list Error Interrupt management ********************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_ULE) != 0U))
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	691b      	ldr	r3, [r3, #16]
 8007254:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007258:	2b00      	cmp	r3, #0
 800725a:	d011      	beq.n	8007280 <HAL_DMA_IRQHandler+0xa0>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_ULE) != 0U)
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	695b      	ldr	r3, [r3, #20]
 8007262:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007266:	2b00      	cmp	r3, #0
 8007268:	d00a      	beq.n	8007280 <HAL_DMA_IRQHandler+0xa0>
    {
      /* Clear the update linked-list error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_ULE);
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007272:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_ULE;
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007278:	f043 0202 	orr.w	r2, r3, #2
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }

  /* User Setting Error Interrupt management **************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_USE) != 0U))
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	691b      	ldr	r3, [r3, #16]
 8007286:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800728a:	2b00      	cmp	r3, #0
 800728c:	d011      	beq.n	80072b2 <HAL_DMA_IRQHandler+0xd2>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_USE) != 0U)
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	695b      	ldr	r3, [r3, #20]
 8007294:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007298:	2b00      	cmp	r3, #0
 800729a:	d00a      	beq.n	80072b2 <HAL_DMA_IRQHandler+0xd2>
    {
      /* Clear the user setting error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_USE);
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80072a4:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_USE;
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80072aa:	f043 0204 	orr.w	r2, r3, #4
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }

  /* Trigger Overrun Interrupt management *****************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TO) != 0U))
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	691b      	ldr	r3, [r3, #16]
 80072b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d011      	beq.n	80072e4 <HAL_DMA_IRQHandler+0x104>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TO) != 0U)
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	695b      	ldr	r3, [r3, #20]
 80072c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d00a      	beq.n	80072e4 <HAL_DMA_IRQHandler+0x104>
    {
      /* Clear the trigger overrun flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_TO);
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80072d6:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TO;
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80072dc:	f043 0208 	orr.w	r2, r3, #8
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }

  /* Half Transfer Complete Interrupt management **********************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_HT) != 0U))
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	691b      	ldr	r3, [r3, #16]
 80072ea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d013      	beq.n	800731a <HAL_DMA_IRQHandler+0x13a>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	695b      	ldr	r3, [r3, #20]
 80072f8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d00c      	beq.n	800731a <HAL_DMA_IRQHandler+0x13a>
    {
      /* Clear the half transfer flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_HT);
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007308:	60da      	str	r2, [r3, #12]

      /* Check half transfer complete callback */
      if (hdma->XferHalfCpltCallback != NULL)
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800730e:	2b00      	cmp	r3, #0
 8007310:	d003      	beq.n	800731a <HAL_DMA_IRQHandler+0x13a>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007316:	6878      	ldr	r0, [r7, #4]
 8007318:	4798      	blx	r3
      }
    }
  }

  /* Suspend Transfer Interrupt management ****************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_SUSP) != 0U))
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	691b      	ldr	r3, [r3, #16]
 8007320:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007324:	2b00      	cmp	r3, #0
 8007326:	d055      	beq.n	80073d4 <HAL_DMA_IRQHandler+0x1f4>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_SUSP) != 0U)
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	695b      	ldr	r3, [r3, #20]
 800732e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007332:	2b00      	cmp	r3, #0
 8007334:	d04e      	beq.n	80073d4 <HAL_DMA_IRQHandler+0x1f4>
    {
      /* Clear the block transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_SUSP);
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800733e:	60da      	str	r2, [r3, #12]

      /* Check DMA channel state */
      if (hdma->State == HAL_DMA_STATE_ABORT)
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8007346:	b2db      	uxtb	r3, r3
 8007348:	2b04      	cmp	r3, #4
 800734a:	d137      	bne.n	80073bc <HAL_DMA_IRQHandler+0x1dc>
      {
        /* Disable the suspend transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_SUSP);
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	695a      	ldr	r2, [r3, #20]
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800735a:	615a      	str	r2, [r3, #20]

        /* Reset the channel internal state and reset the FIFO */
        hdma->Instance->CCR |= DMA_CCR_RESET;
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	695a      	ldr	r2, [r3, #20]
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	f042 0202 	orr.w	r2, r2, #2
 800736a:	615a      	str	r2, [r3, #20]

        if ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	695b      	ldr	r3, [r3, #20]
 8007372:	f003 0301 	and.w	r3, r3, #1
 8007376:	2b00      	cmp	r3, #0
 8007378:	d004      	beq.n	8007384 <HAL_DMA_IRQHandler+0x1a4>
        {
          /* Update the DMA channel state */
          hdma->State = HAL_DMA_STATE_ERROR;
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	2203      	movs	r2, #3
 800737e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 8007382:	e003      	b.n	800738c <HAL_DMA_IRQHandler+0x1ac>
        }
        else
        {
          /* Update the DMA channel state */
          hdma->State = HAL_DMA_STATE_READY;
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	2201      	movs	r2, #1
 8007388:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
        }

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007390:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007394:	2b00      	cmp	r3, #0
 8007396:	d003      	beq.n	80073a0 <HAL_DMA_IRQHandler+0x1c0>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800739c:	2201      	movs	r2, #1
 800739e:	731a      	strb	r2, [r3, #12]
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	2200      	movs	r2, #0
 80073a4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        /* Check transfer abort callback */
        if (hdma->XferAbortCallback != NULL)
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	f000 8087 	beq.w	80074c0 <HAL_DMA_IRQHandler+0x2e0>
        {
          /* Transfer abort callback */
          hdma->XferAbortCallback(hdma);
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80073b6:	6878      	ldr	r0, [r7, #4]
 80073b8:	4798      	blx	r3
        }

        return;
 80073ba:	e081      	b.n	80074c0 <HAL_DMA_IRQHandler+0x2e0>
      }
      else
      {
        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_SUSPEND;
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	2205      	movs	r2, #5
 80073c0:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

        /* Check transfer suspend callback */
        if (hdma->XferSuspendCallback != NULL)
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d003      	beq.n	80073d4 <HAL_DMA_IRQHandler+0x1f4>
        {
          /* Transfer suspend callback */
          hdma->XferSuspendCallback(hdma);
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073d0:	6878      	ldr	r0, [r7, #4]
 80073d2:	4798      	blx	r3
      }
    }
  }

  /* Transfer Complete Interrupt management ***************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TC) != 0U))
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	691b      	ldr	r3, [r3, #16]
 80073da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d039      	beq.n	8007456 <HAL_DMA_IRQHandler+0x276>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	695b      	ldr	r3, [r3, #20]
 80073e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d032      	beq.n	8007456 <HAL_DMA_IRQHandler+0x276>
    {
      /* Check DMA channel transfer mode */
      if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80073f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d012      	beq.n	8007422 <HAL_DMA_IRQHandler+0x242>
      {
        /* If linked-list transfer */
        if (hdma->Instance->CLLR == 0U)
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007402:	2b00      	cmp	r3, #0
 8007404:	d116      	bne.n	8007434 <HAL_DMA_IRQHandler+0x254>
        {
          if (hdma->Instance->CBR1 == 0U)
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800740c:	2b00      	cmp	r3, #0
 800740e:	d111      	bne.n	8007434 <HAL_DMA_IRQHandler+0x254>
          {
            /* Update the DMA channel state */
            hdma->State = HAL_DMA_STATE_READY;
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	2201      	movs	r2, #1
 8007414:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

            /* Update the linked-list queue state */
            hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800741c:	2201      	movs	r2, #1
 800741e:	731a      	strb	r2, [r3, #12]
 8007420:	e008      	b.n	8007434 <HAL_DMA_IRQHandler+0x254>
        }
      }
      else
      {
        /* If normal transfer */
        if (hdma->Instance->CBR1 == 0U)
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007428:	2b00      	cmp	r3, #0
 800742a:	d103      	bne.n	8007434 <HAL_DMA_IRQHandler+0x254>
        {
          /* Update the DMA channel state */
          hdma->State = HAL_DMA_STATE_READY;
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	2201      	movs	r2, #1
 8007430:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
        }
      }

      /* Clear TC and HT transfer flags */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT));
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	f44f 7240 	mov.w	r2, #768	; 0x300
 800743c:	60da      	str	r2, [r3, #12]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	2200      	movs	r2, #0
 8007442:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

      /* Check transfer complete callback */
      if (hdma->XferCpltCallback != NULL)
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800744a:	2b00      	cmp	r3, #0
 800744c:	d003      	beq.n	8007456 <HAL_DMA_IRQHandler+0x276>
      {
        /* Channel Transfer Complete callback */
        hdma->XferCpltCallback(hdma);
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007452:	6878      	ldr	r0, [r7, #4]
 8007454:	4798      	blx	r3
      }
    }
  }

  /* Manage error case ************************************************************************************************/
  if (hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800745a:	2b00      	cmp	r3, #0
 800745c:	d031      	beq.n	80074c2 <HAL_DMA_IRQHandler+0x2e2>
  {
    /* Reset the channel internal state and reset the FIFO */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	695a      	ldr	r2, [r3, #20]
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	f042 0202 	orr.w	r2, r2, #2
 800746c:	615a      	str	r2, [r3, #20]

    if ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	695b      	ldr	r3, [r3, #20]
 8007474:	f003 0301 	and.w	r3, r3, #1
 8007478:	2b00      	cmp	r3, #0
 800747a:	d004      	beq.n	8007486 <HAL_DMA_IRQHandler+0x2a6>
    {
      /* Update the DMA channel state */
      hdma->State = HAL_DMA_STATE_ERROR;
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	2203      	movs	r2, #3
 8007480:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 8007484:	e003      	b.n	800748e <HAL_DMA_IRQHandler+0x2ae>
    }
    else
    {
      /* Update the DMA channel state */
      hdma->State = HAL_DMA_STATE_READY;
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	2201      	movs	r2, #1
 800748a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
    }

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007492:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007496:	2b00      	cmp	r3, #0
 8007498:	d003      	beq.n	80074a2 <HAL_DMA_IRQHandler+0x2c2>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800749e:	2201      	movs	r2, #1
 80074a0:	731a      	strb	r2, [r3, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	2200      	movs	r2, #0
 80074a6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

    /* Check transfer error callback */
    if (hdma->XferErrorCallback != NULL)
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d007      	beq.n	80074c2 <HAL_DMA_IRQHandler+0x2e2>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80074b6:	6878      	ldr	r0, [r7, #4]
 80074b8:	4798      	blx	r3
 80074ba:	e002      	b.n	80074c2 <HAL_DMA_IRQHandler+0x2e2>
    return; /* the global interrupt flag for the current channel is down , nothing to do */
 80074bc:	bf00      	nop
 80074be:	e000      	b.n	80074c2 <HAL_DMA_IRQHandler+0x2e2>
        return;
 80074c0:	bf00      	nop
    }
  }
}
 80074c2:	3710      	adds	r7, #16
 80074c4:	46bd      	mov	sp, r7
 80074c6:	bd80      	pop	{r7, pc}

080074c8 <HAL_DMA_ConfigChannelAttributes>:
  * @param  ChannelAttributes : Specifies the DMA channel secure/privilege attributes.
  *                             This parameter can be a one or a combination of @ref DMA_Channel_Attributes.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_DMA_ConfigChannelAttributes(DMA_HandleTypeDef *const hdma, uint32_t ChannelAttributes)
{
 80074c8:	b480      	push	{r7}
 80074ca:	b085      	sub	sp, #20
 80074cc:	af00      	add	r7, sp, #0
 80074ce:	6078      	str	r0, [r7, #4]
 80074d0:	6039      	str	r1, [r7, #0]
  DMA_TypeDef *p_dma_instance;
  uint32_t channel_idx;

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d101      	bne.n	80074dc <HAL_DMA_ConfigChannelAttributes+0x14>
  {
    return HAL_ERROR;
 80074d8:	2301      	movs	r3, #1
 80074da:	e02b      	b.n	8007534 <HAL_DMA_ConfigChannelAttributes+0x6c>

  /* Check the parameters */
  assert_param(IS_DMA_ATTRIBUTES(ChannelAttributes));

  /* Get DMA instance */
  p_dma_instance = GET_DMA_INSTANCE(hdma);
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80074e4:	f023 030f 	bic.w	r3, r3, #15
 80074e8:	60fb      	str	r3, [r7, #12]

  /* Get channel index */
  channel_idx = 1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80074f2:	3b50      	subs	r3, #80	; 0x50
 80074f4:	09db      	lsrs	r3, r3, #7
 80074f6:	f003 031f 	and.w	r3, r3, #31
 80074fa:	2201      	movs	r2, #1
 80074fc:	fa02 f303 	lsl.w	r3, r2, r3
 8007500:	60bb      	str	r3, [r7, #8]

  /* Check DMA channel privilege attribute management */
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) == DMA_CHANNEL_ATTR_PRIV_MASK)
 8007502:	683b      	ldr	r3, [r7, #0]
 8007504:	f003 0310 	and.w	r3, r3, #16
 8007508:	2b00      	cmp	r3, #0
 800750a:	d012      	beq.n	8007532 <HAL_DMA_ConfigChannelAttributes+0x6a>
  {
    /* Configure DMA channel privilege attribute */
    if ((ChannelAttributes & DMA_CHANNEL_PRIV) == DMA_CHANNEL_PRIV)
 800750c:	683b      	ldr	r3, [r7, #0]
 800750e:	f003 0311 	and.w	r3, r3, #17
 8007512:	2b11      	cmp	r3, #17
 8007514:	d106      	bne.n	8007524 <HAL_DMA_ConfigChannelAttributes+0x5c>
    {
      p_dma_instance->PRIVCFGR |= channel_idx;
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	685a      	ldr	r2, [r3, #4]
 800751a:	68bb      	ldr	r3, [r7, #8]
 800751c:	431a      	orrs	r2, r3
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	605a      	str	r2, [r3, #4]
 8007522:	e006      	b.n	8007532 <HAL_DMA_ConfigChannelAttributes+0x6a>
    }
    else
    {
      p_dma_instance->PRIVCFGR &= (~channel_idx);
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	685a      	ldr	r2, [r3, #4]
 8007528:	68bb      	ldr	r3, [r7, #8]
 800752a:	43db      	mvns	r3, r3
 800752c:	401a      	ands	r2, r3
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	605a      	str	r2, [r3, #4]
      hdma->Instance->CTR1 &= (~DMA_CTR1_DSEC);
    }
  }
#endif /* defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  return HAL_OK;
 8007532:	2300      	movs	r3, #0
}
 8007534:	4618      	mov	r0, r3
 8007536:	3714      	adds	r7, #20
 8007538:	46bd      	mov	sp, r7
 800753a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800753e:	4770      	bx	lr

08007540 <DMA_SetConfig>:
  */
static void DMA_SetConfig(DMA_HandleTypeDef const *const hdma,
                          uint32_t SrcAddress,
                          uint32_t DstAddress,
                          uint32_t SrcDataSize)
{
 8007540:	b480      	push	{r7}
 8007542:	b085      	sub	sp, #20
 8007544:	af00      	add	r7, sp, #0
 8007546:	60f8      	str	r0, [r7, #12]
 8007548:	60b9      	str	r1, [r7, #8]
 800754a:	607a      	str	r2, [r7, #4]
 800754c:	603b      	str	r3, [r7, #0]
  /* Configure the DMA channel data size */
  MODIFY_REG(hdma->Instance->CBR1, DMA_CBR1_BNDT, (SrcDataSize & DMA_CBR1_BNDT));
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007554:	0c1b      	lsrs	r3, r3, #16
 8007556:	041b      	lsls	r3, r3, #16
 8007558:	683a      	ldr	r2, [r7, #0]
 800755a:	b291      	uxth	r1, r2
 800755c:	68fa      	ldr	r2, [r7, #12]
 800755e:	6812      	ldr	r2, [r2, #0]
 8007560:	430b      	orrs	r3, r1
 8007562:	6493      	str	r3, [r2, #72]	; 0x48

  /* Clear all interrupt flags */
  __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	f44f 42fe 	mov.w	r2, #32512	; 0x7f00
 800756c:	60da      	str	r2, [r3, #12]
                       DMA_FLAG_TO);

  /* Configure DMA channel source address */
  hdma->Instance->CSAR = SrcAddress;
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	68ba      	ldr	r2, [r7, #8]
 8007574:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure DMA channel destination address */
  hdma->Instance->CDAR = DstAddress;
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	687a      	ldr	r2, [r7, #4]
 800757c:	651a      	str	r2, [r3, #80]	; 0x50
}
 800757e:	bf00      	nop
 8007580:	3714      	adds	r7, #20
 8007582:	46bd      	mov	sp, r7
 8007584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007588:	4770      	bx	lr
	...

0800758c <HAL_DMAEx_List_Init>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_Init(DMA_HandleTypeDef *const hdma)
{
 800758c:	b580      	push	{r7, lr}
 800758e:	b084      	sub	sp, #16
 8007590:	af00      	add	r7, sp, #0
 8007592:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart = HAL_GetTick();
 8007594:	f7fe ffb8 	bl	8006508 <HAL_GetTick>
 8007598:	60f8      	str	r0, [r7, #12]

  /* Check the DMA channel handle parameter */
  if (hdma == NULL)
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	2b00      	cmp	r3, #0
 800759e:	d101      	bne.n	80075a4 <HAL_DMAEx_List_Init+0x18>
  {
    return HAL_ERROR;
 80075a0:	2301      	movs	r3, #1
 80075a2:	e0dc      	b.n	800775e <HAL_DMAEx_List_Init+0x1d2>
  assert_param(IS_DMA_PRIORITY(hdma->InitLinkedList.Priority));
  assert_param(IS_DMA_LINK_STEP_MODE(hdma->InitLinkedList.LinkStepMode));
  assert_param(IS_DMA_TCEM_LINKEDLIST_EVENT_MODE(hdma->InitLinkedList.TransferEventMode));
  assert_param(IS_DMA_LINKEDLIST_MODE(hdma->InitLinkedList.LinkedListMode));
  /* Check DMA channel instance */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	4a6f      	ldr	r2, [pc, #444]	; (8007768 <HAL_DMAEx_List_Init+0x1dc>)
 80075aa:	4293      	cmp	r3, r2
 80075ac:	f000 809f 	beq.w	80076ee <HAL_DMAEx_List_Init+0x162>
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	4a6d      	ldr	r2, [pc, #436]	; (800776c <HAL_DMAEx_List_Init+0x1e0>)
 80075b6:	4293      	cmp	r3, r2
 80075b8:	f000 8099 	beq.w	80076ee <HAL_DMAEx_List_Init+0x162>
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	4a6b      	ldr	r2, [pc, #428]	; (8007770 <HAL_DMAEx_List_Init+0x1e4>)
 80075c2:	4293      	cmp	r3, r2
 80075c4:	f000 8093 	beq.w	80076ee <HAL_DMAEx_List_Init+0x162>
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	4a69      	ldr	r2, [pc, #420]	; (8007774 <HAL_DMAEx_List_Init+0x1e8>)
 80075ce:	4293      	cmp	r3, r2
 80075d0:	f000 808d 	beq.w	80076ee <HAL_DMAEx_List_Init+0x162>
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	4a67      	ldr	r2, [pc, #412]	; (8007778 <HAL_DMAEx_List_Init+0x1ec>)
 80075da:	4293      	cmp	r3, r2
 80075dc:	f000 8087 	beq.w	80076ee <HAL_DMAEx_List_Init+0x162>
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	4a65      	ldr	r2, [pc, #404]	; (800777c <HAL_DMAEx_List_Init+0x1f0>)
 80075e6:	4293      	cmp	r3, r2
 80075e8:	f000 8081 	beq.w	80076ee <HAL_DMAEx_List_Init+0x162>
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	4a63      	ldr	r2, [pc, #396]	; (8007780 <HAL_DMAEx_List_Init+0x1f4>)
 80075f2:	4293      	cmp	r3, r2
 80075f4:	d07b      	beq.n	80076ee <HAL_DMAEx_List_Init+0x162>
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	4a62      	ldr	r2, [pc, #392]	; (8007784 <HAL_DMAEx_List_Init+0x1f8>)
 80075fc:	4293      	cmp	r3, r2
 80075fe:	d076      	beq.n	80076ee <HAL_DMAEx_List_Init+0x162>
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	4a60      	ldr	r2, [pc, #384]	; (8007788 <HAL_DMAEx_List_Init+0x1fc>)
 8007606:	4293      	cmp	r3, r2
 8007608:	d071      	beq.n	80076ee <HAL_DMAEx_List_Init+0x162>
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	4a5f      	ldr	r2, [pc, #380]	; (800778c <HAL_DMAEx_List_Init+0x200>)
 8007610:	4293      	cmp	r3, r2
 8007612:	d06c      	beq.n	80076ee <HAL_DMAEx_List_Init+0x162>
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	4a5d      	ldr	r2, [pc, #372]	; (8007790 <HAL_DMAEx_List_Init+0x204>)
 800761a:	4293      	cmp	r3, r2
 800761c:	d067      	beq.n	80076ee <HAL_DMAEx_List_Init+0x162>
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	4a5c      	ldr	r2, [pc, #368]	; (8007794 <HAL_DMAEx_List_Init+0x208>)
 8007624:	4293      	cmp	r3, r2
 8007626:	d062      	beq.n	80076ee <HAL_DMAEx_List_Init+0x162>
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	4a5a      	ldr	r2, [pc, #360]	; (8007798 <HAL_DMAEx_List_Init+0x20c>)
 800762e:	4293      	cmp	r3, r2
 8007630:	d05d      	beq.n	80076ee <HAL_DMAEx_List_Init+0x162>
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	4a59      	ldr	r2, [pc, #356]	; (800779c <HAL_DMAEx_List_Init+0x210>)
 8007638:	4293      	cmp	r3, r2
 800763a:	d058      	beq.n	80076ee <HAL_DMAEx_List_Init+0x162>
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	4a57      	ldr	r2, [pc, #348]	; (80077a0 <HAL_DMAEx_List_Init+0x214>)
 8007642:	4293      	cmp	r3, r2
 8007644:	d053      	beq.n	80076ee <HAL_DMAEx_List_Init+0x162>
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	4a56      	ldr	r2, [pc, #344]	; (80077a4 <HAL_DMAEx_List_Init+0x218>)
 800764c:	4293      	cmp	r3, r2
 800764e:	d04e      	beq.n	80076ee <HAL_DMAEx_List_Init+0x162>
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	4a54      	ldr	r2, [pc, #336]	; (80077a8 <HAL_DMAEx_List_Init+0x21c>)
 8007656:	4293      	cmp	r3, r2
 8007658:	d049      	beq.n	80076ee <HAL_DMAEx_List_Init+0x162>
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	4a53      	ldr	r2, [pc, #332]	; (80077ac <HAL_DMAEx_List_Init+0x220>)
 8007660:	4293      	cmp	r3, r2
 8007662:	d044      	beq.n	80076ee <HAL_DMAEx_List_Init+0x162>
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	4a51      	ldr	r2, [pc, #324]	; (80077b0 <HAL_DMAEx_List_Init+0x224>)
 800766a:	4293      	cmp	r3, r2
 800766c:	d03f      	beq.n	80076ee <HAL_DMAEx_List_Init+0x162>
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	4a50      	ldr	r2, [pc, #320]	; (80077b4 <HAL_DMAEx_List_Init+0x228>)
 8007674:	4293      	cmp	r3, r2
 8007676:	d03a      	beq.n	80076ee <HAL_DMAEx_List_Init+0x162>
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	4a4e      	ldr	r2, [pc, #312]	; (80077b8 <HAL_DMAEx_List_Init+0x22c>)
 800767e:	4293      	cmp	r3, r2
 8007680:	d035      	beq.n	80076ee <HAL_DMAEx_List_Init+0x162>
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	4a4d      	ldr	r2, [pc, #308]	; (80077bc <HAL_DMAEx_List_Init+0x230>)
 8007688:	4293      	cmp	r3, r2
 800768a:	d030      	beq.n	80076ee <HAL_DMAEx_List_Init+0x162>
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	4a4b      	ldr	r2, [pc, #300]	; (80077c0 <HAL_DMAEx_List_Init+0x234>)
 8007692:	4293      	cmp	r3, r2
 8007694:	d02b      	beq.n	80076ee <HAL_DMAEx_List_Init+0x162>
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	4a4a      	ldr	r2, [pc, #296]	; (80077c4 <HAL_DMAEx_List_Init+0x238>)
 800769c:	4293      	cmp	r3, r2
 800769e:	d026      	beq.n	80076ee <HAL_DMAEx_List_Init+0x162>
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	4a48      	ldr	r2, [pc, #288]	; (80077c8 <HAL_DMAEx_List_Init+0x23c>)
 80076a6:	4293      	cmp	r3, r2
 80076a8:	d021      	beq.n	80076ee <HAL_DMAEx_List_Init+0x162>
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	4a47      	ldr	r2, [pc, #284]	; (80077cc <HAL_DMAEx_List_Init+0x240>)
 80076b0:	4293      	cmp	r3, r2
 80076b2:	d01c      	beq.n	80076ee <HAL_DMAEx_List_Init+0x162>
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	4a45      	ldr	r2, [pc, #276]	; (80077d0 <HAL_DMAEx_List_Init+0x244>)
 80076ba:	4293      	cmp	r3, r2
 80076bc:	d017      	beq.n	80076ee <HAL_DMAEx_List_Init+0x162>
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	4a44      	ldr	r2, [pc, #272]	; (80077d4 <HAL_DMAEx_List_Init+0x248>)
 80076c4:	4293      	cmp	r3, r2
 80076c6:	d012      	beq.n	80076ee <HAL_DMAEx_List_Init+0x162>
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	4a42      	ldr	r2, [pc, #264]	; (80077d8 <HAL_DMAEx_List_Init+0x24c>)
 80076ce:	4293      	cmp	r3, r2
 80076d0:	d00d      	beq.n	80076ee <HAL_DMAEx_List_Init+0x162>
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	4a41      	ldr	r2, [pc, #260]	; (80077dc <HAL_DMAEx_List_Init+0x250>)
 80076d8:	4293      	cmp	r3, r2
 80076da:	d008      	beq.n	80076ee <HAL_DMAEx_List_Init+0x162>
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	4a3f      	ldr	r2, [pc, #252]	; (80077e0 <HAL_DMAEx_List_Init+0x254>)
 80076e2:	4293      	cmp	r3, r2
 80076e4:	d003      	beq.n	80076ee <HAL_DMAEx_List_Init+0x162>
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	4a3e      	ldr	r2, [pc, #248]	; (80077e4 <HAL_DMAEx_List_Init+0x258>)
 80076ec:	4293      	cmp	r3, r2
 80076ee:	bf00      	nop
  {
    assert_param(IS_DMA_LINK_ALLOCATED_PORT(hdma->InitLinkedList.LinkAllocatedPort));
  }

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	2200      	movs	r2, #0
 80076f4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	2202      	movs	r2, #2
 80076fc:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Disable the DMA channel */
  __HAL_DMA_DISABLE(hdma);
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	695a      	ldr	r2, [r3, #20]
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	f042 0206 	orr.w	r2, r2, #6
 800770e:	615a      	str	r2, [r3, #20]

  /* Check if the DMA channel is effectively disabled */
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 8007710:	e00f      	b.n	8007732 <HAL_DMAEx_List_Init+0x1a6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 8007712:	f7fe fef9 	bl	8006508 <HAL_GetTick>
 8007716:	4602      	mov	r2, r0
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	1ad3      	subs	r3, r2, r3
 800771c:	2b05      	cmp	r3, #5
 800771e:	d908      	bls.n	8007732 <HAL_DMAEx_List_Init+0x1a6>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	2210      	movs	r2, #16
 8007724:	659a      	str	r2, [r3, #88]	; 0x58

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_ERROR;
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	2203      	movs	r2, #3
 800772a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

      return HAL_ERROR;
 800772e:	2301      	movs	r3, #1
 8007730:	e015      	b.n	800775e <HAL_DMAEx_List_Init+0x1d2>
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	695b      	ldr	r3, [r3, #20]
 8007738:	f003 0301 	and.w	r3, r3, #1
 800773c:	2b00      	cmp	r3, #0
 800773e:	d1e8      	bne.n	8007712 <HAL_DMAEx_List_Init+0x186>
    }
  }

  /* Initialize the DMA channel registers */
  DMA_List_Init(hdma);
 8007740:	6878      	ldr	r0, [r7, #4]
 8007742:	f000 fa77 	bl	8007c34 <DMA_List_Init>

  /* Update DMA channel operation mode */
  hdma->Mode = hdma->InitLinkedList.LinkedListMode;
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	651a      	str	r2, [r3, #80]	; 0x50

  /* Update the DMA channel error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	2200      	movs	r2, #0
 8007752:	659a      	str	r2, [r3, #88]	; 0x58

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_READY;
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	2201      	movs	r2, #1
 8007758:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 800775c:	2300      	movs	r3, #0
}
 800775e:	4618      	mov	r0, r3
 8007760:	3710      	adds	r7, #16
 8007762:	46bd      	mov	sp, r7
 8007764:	bd80      	pop	{r7, pc}
 8007766:	bf00      	nop
 8007768:	40020050 	.word	0x40020050
 800776c:	50020050 	.word	0x50020050
 8007770:	400200d0 	.word	0x400200d0
 8007774:	500200d0 	.word	0x500200d0
 8007778:	40020150 	.word	0x40020150
 800777c:	50020150 	.word	0x50020150
 8007780:	400201d0 	.word	0x400201d0
 8007784:	500201d0 	.word	0x500201d0
 8007788:	40020250 	.word	0x40020250
 800778c:	50020250 	.word	0x50020250
 8007790:	400202d0 	.word	0x400202d0
 8007794:	500202d0 	.word	0x500202d0
 8007798:	40020350 	.word	0x40020350
 800779c:	50020350 	.word	0x50020350
 80077a0:	400203d0 	.word	0x400203d0
 80077a4:	500203d0 	.word	0x500203d0
 80077a8:	40020450 	.word	0x40020450
 80077ac:	50020450 	.word	0x50020450
 80077b0:	400204d0 	.word	0x400204d0
 80077b4:	500204d0 	.word	0x500204d0
 80077b8:	40020550 	.word	0x40020550
 80077bc:	50020550 	.word	0x50020550
 80077c0:	400205d0 	.word	0x400205d0
 80077c4:	500205d0 	.word	0x500205d0
 80077c8:	40020650 	.word	0x40020650
 80077cc:	50020650 	.word	0x50020650
 80077d0:	400206d0 	.word	0x400206d0
 80077d4:	500206d0 	.word	0x500206d0
 80077d8:	40020750 	.word	0x40020750
 80077dc:	50020750 	.word	0x50020750
 80077e0:	400207d0 	.word	0x400207d0
 80077e4:	500207d0 	.word	0x500207d0

080077e8 <HAL_DMAEx_List_Start_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_Start_IT(DMA_HandleTypeDef *const hdma)
{
 80077e8:	b580      	push	{r7, lr}
 80077ea:	b086      	sub	sp, #24
 80077ec:	af00      	add	r7, sp, #0
 80077ee:	6078      	str	r0, [r7, #4]
  HAL_DMA_StateTypeDef dma_state;
  uint32_t ccr_value;
  uint32_t cllr_mask;

  /* Check the DMA peripheral handle and the linked-list queue parameters */
  if ((hdma == NULL) || (hdma->LinkedListQueue == NULL))
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d003      	beq.n	80077fe <HAL_DMAEx_List_Start_IT+0x16>
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d101      	bne.n	8007802 <HAL_DMAEx_List_Start_IT+0x1a>
  {
    return HAL_ERROR;
 80077fe:	2301      	movs	r3, #1
 8007800:	e082      	b.n	8007908 <HAL_DMAEx_List_Start_IT+0x120>
  }

  /* Check DMA channel state */
  dma_state = hdma->State;
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8007808:	75fb      	strb	r3, [r7, #23]
  ccr_value = hdma->Instance->CCR & DMA_CCR_LSM;
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	695b      	ldr	r3, [r3, #20]
 8007810:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007814:	613b      	str	r3, [r7, #16]
  if ((dma_state == HAL_DMA_STATE_READY) || ((dma_state == HAL_DMA_STATE_BUSY) && (ccr_value != 0U)))
 8007816:	7dfb      	ldrb	r3, [r7, #23]
 8007818:	2b01      	cmp	r3, #1
 800781a:	d005      	beq.n	8007828 <HAL_DMAEx_List_Start_IT+0x40>
 800781c:	7dfb      	ldrb	r3, [r7, #23]
 800781e:	2b02      	cmp	r3, #2
 8007820:	d16a      	bne.n	80078f8 <HAL_DMAEx_List_Start_IT+0x110>
 8007822:	693b      	ldr	r3, [r7, #16]
 8007824:	2b00      	cmp	r3, #0
 8007826:	d067      	beq.n	80078f8 <HAL_DMAEx_List_Start_IT+0x110>
  {
    /* Check DMA channel state is ready */
    if (hdma->State == HAL_DMA_STATE_READY)
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800782e:	b2db      	uxtb	r3, r3
 8007830:	2b01      	cmp	r3, #1
 8007832:	d157      	bne.n	80078e4 <HAL_DMAEx_List_Start_IT+0xfc>
    {
      /* Process locked */
      __HAL_LOCK(hdma);
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800783a:	2b01      	cmp	r3, #1
 800783c:	d101      	bne.n	8007842 <HAL_DMAEx_List_Start_IT+0x5a>
 800783e:	2302      	movs	r3, #2
 8007840:	e062      	b.n	8007908 <HAL_DMAEx_List_Start_IT+0x120>
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	2201      	movs	r2, #1
 8007846:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

      /* Update the DMA channel and the queue states */
      hdma->State                  = HAL_DMA_STATE_BUSY;
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	2202      	movs	r2, #2
 800784e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_BUSY;
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007856:	2202      	movs	r2, #2
 8007858:	731a      	strb	r2, [r3, #12]

      /* Update the DMA channel and the queue error codes */
      hdma->ErrorCode                  = HAL_DMA_ERROR_NONE;
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	2200      	movs	r2, #0
 800785e:	659a      	str	r2, [r3, #88]	; 0x58
      hdma->LinkedListQueue->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007864:	2200      	movs	r2, #0
 8007866:	611a      	str	r2, [r3, #16]

      /* Enable common interrupts: Transfer Complete and Transfer Errors ITs */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_DTE | DMA_IT_ULE | DMA_IT_USE | DMA_IT_TO));
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	695a      	ldr	r2, [r3, #20]
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	f442 42ba 	orr.w	r2, r2, #23808	; 0x5d00
 8007876:	615a      	str	r2, [r3, #20]

      /* Check half transfer complete callback */
      if (hdma->XferHalfCpltCallback != NULL)
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800787c:	2b00      	cmp	r3, #0
 800787e:	d007      	beq.n	8007890 <HAL_DMAEx_List_Start_IT+0xa8>
      {
        /* If half transfer complete callback is set, enable the corresponding IT */
        __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	695a      	ldr	r2, [r3, #20]
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800788e:	615a      	str	r2, [r3, #20]
      }

      /* Check suspend callback */
      if (hdma->XferSuspendCallback != NULL)
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007894:	2b00      	cmp	r3, #0
 8007896:	d007      	beq.n	80078a8 <HAL_DMAEx_List_Start_IT+0xc0>
      {
        /* If transfer suspend callback is set, enable the corresponding IT */
        __HAL_DMA_ENABLE_IT(hdma, DMA_IT_SUSP);
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	695a      	ldr	r2, [r3, #20]
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80078a6:	615a      	str	r2, [r3, #20]
      }

      /* Get CLLR register mask and offset */
      DMA_List_GetCLLRNodeInfo(hdma->LinkedListQueue->Head, &cllr_mask, NULL);
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	f107 010c 	add.w	r1, r7, #12
 80078b2:	2200      	movs	r2, #0
 80078b4:	4618      	mov	r0, r3
 80078b6:	f000 fcd3 	bl	8008260 <DMA_List_GetCLLRNodeInfo>

      /* Update DMA registers for linked-list transfer */
      hdma->Instance->CLBAR = ((uint32_t)hdma->LinkedListQueue->Head & DMA_CLBAR_LBA);
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	4619      	mov	r1, r3
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	681a      	ldr	r2, [r3, #0]
 80078c6:	0c0b      	lsrs	r3, r1, #16
 80078c8:	041b      	lsls	r3, r3, #16
 80078ca:	6013      	str	r3, [r2, #0]
      hdma->Instance->CLLR  = ((uint32_t)hdma->LinkedListQueue->Head & DMA_CLLR_LA) | cllr_mask;
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	461a      	mov	r2, r3
 80078d4:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 80078d8:	4013      	ands	r3, r2
 80078da:	68f9      	ldr	r1, [r7, #12]
 80078dc:	687a      	ldr	r2, [r7, #4]
 80078de:	6812      	ldr	r2, [r2, #0]
 80078e0:	430b      	orrs	r3, r1
 80078e2:	67d3      	str	r3, [r2, #124]	; 0x7c
    }

    /* Enable DMA channel */
    __HAL_DMA_ENABLE(hdma);
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	695a      	ldr	r2, [r3, #20]
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	f042 0201 	orr.w	r2, r2, #1
 80078f2:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hdma);

    return HAL_ERROR;
  }

  return HAL_OK;
 80078f4:	2300      	movs	r3, #0
 80078f6:	e007      	b.n	8007908 <HAL_DMAEx_List_Start_IT+0x120>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	2240      	movs	r2, #64	; 0x40
 80078fc:	659a      	str	r2, [r3, #88]	; 0x58
    __HAL_UNLOCK(hdma);
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	2200      	movs	r2, #0
 8007902:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    return HAL_ERROR;
 8007906:	2301      	movs	r3, #1
}
 8007908:	4618      	mov	r0, r3
 800790a:	3718      	adds	r7, #24
 800790c:	46bd      	mov	sp, r7
 800790e:	bd80      	pop	{r7, pc}

08007910 <HAL_DMAEx_List_BuildNode>:
  *                       configurations.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_BuildNode(DMA_NodeConfTypeDef const *const pNodeConfig,
                                           DMA_NodeTypeDef *const pNode)
{
 8007910:	b580      	push	{r7, lr}
 8007912:	b082      	sub	sp, #8
 8007914:	af00      	add	r7, sp, #0
 8007916:	6078      	str	r0, [r7, #4]
 8007918:	6039      	str	r1, [r7, #0]
  /* Check the node configuration and physical node parameters */
  if ((pNodeConfig == NULL) || (pNode == NULL))
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	2b00      	cmp	r3, #0
 800791e:	d002      	beq.n	8007926 <HAL_DMAEx_List_BuildNode+0x16>
 8007920:	683b      	ldr	r3, [r7, #0]
 8007922:	2b00      	cmp	r3, #0
 8007924:	d101      	bne.n	800792a <HAL_DMAEx_List_BuildNode+0x1a>
  {
    return HAL_ERROR;
 8007926:	2301      	movs	r3, #1
 8007928:	e004      	b.n	8007934 <HAL_DMAEx_List_BuildNode+0x24>
  assert_param(IS_DMA_ATTRIBUTES(pNodeConfig->SrcSecure));
  assert_param(IS_DMA_ATTRIBUTES(pNodeConfig->DestSecure));
#endif /* defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  /* Build the DMA channel node */
  DMA_List_BuildNode(pNodeConfig, pNode);
 800792a:	6839      	ldr	r1, [r7, #0]
 800792c:	6878      	ldr	r0, [r7, #4]
 800792e:	f000 fad9 	bl	8007ee4 <DMA_List_BuildNode>

  return HAL_OK;
 8007932:	2300      	movs	r3, #0
}
 8007934:	4618      	mov	r0, r3
 8007936:	3708      	adds	r7, #8
 8007938:	46bd      	mov	sp, r7
 800793a:	bd80      	pop	{r7, pc}

0800793c <HAL_DMAEx_List_InsertNode_Tail>:
  *                     configurations.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_InsertNode_Tail(DMA_QListTypeDef *const pQList,
                                                 DMA_NodeTypeDef *const pNewNode)
{
 800793c:	b580      	push	{r7, lr}
 800793e:	b08a      	sub	sp, #40	; 0x28
 8007940:	af00      	add	r7, sp, #0
 8007942:	6078      	str	r0, [r7, #4]
 8007944:	6039      	str	r1, [r7, #0]
  uint32_t cllr_mask;
  uint32_t cllr_offset;
  DMA_NodeInQInfoTypeDef node_info;

  /* Check the queue and the new node parameters */
  if ((pQList == NULL) || (pNewNode == NULL))
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	2b00      	cmp	r3, #0
 800794a:	d002      	beq.n	8007952 <HAL_DMAEx_List_InsertNode_Tail+0x16>
 800794c:	683b      	ldr	r3, [r7, #0]
 800794e:	2b00      	cmp	r3, #0
 8007950:	d101      	bne.n	8007956 <HAL_DMAEx_List_InsertNode_Tail+0x1a>
  {
    return HAL_ERROR;
 8007952:	2301      	movs	r3, #1
 8007954:	e066      	b.n	8007a24 <HAL_DMAEx_List_InsertNode_Tail+0xe8>
  }

  /* Check queue type */
  if (pQList->Type == QUEUE_TYPE_DYNAMIC)
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	695b      	ldr	r3, [r3, #20]
 800795a:	2b01      	cmp	r3, #1
 800795c:	d104      	bne.n	8007968 <HAL_DMAEx_List_InsertNode_Tail+0x2c>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	2204      	movs	r2, #4
 8007962:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8007964:	2301      	movs	r3, #1
 8007966:	e05d      	b.n	8007a24 <HAL_DMAEx_List_InsertNode_Tail+0xe8>
  }

  /* Check nodes base addresses */
  if (DMA_List_CheckNodesBaseAddresses(pQList->Head, pNewNode, NULL) != 0U)
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	2200      	movs	r2, #0
 800796e:	6839      	ldr	r1, [r7, #0]
 8007970:	4618      	mov	r0, r3
 8007972:	f000 fc09 	bl	8008188 <DMA_List_CheckNodesBaseAddresses>
 8007976:	4603      	mov	r3, r0
 8007978:	2b00      	cmp	r3, #0
 800797a:	d004      	beq.n	8007986 <HAL_DMAEx_List_InsertNode_Tail+0x4a>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_OUTOFRANGE;
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	2205      	movs	r2, #5
 8007980:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8007982:	2301      	movs	r3, #1
 8007984:	e04e      	b.n	8007a24 <HAL_DMAEx_List_InsertNode_Tail+0xe8>
  }

  /* Check nodes types compatibility */
  if (DMA_List_CheckNodesTypes(pQList->Head, pNewNode, NULL) != 0U)
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	2200      	movs	r2, #0
 800798c:	6839      	ldr	r1, [r7, #0]
 800798e:	4618      	mov	r0, r3
 8007990:	f000 fc2a 	bl	80081e8 <DMA_List_CheckNodesTypes>
 8007994:	4603      	mov	r3, r0
 8007996:	2b00      	cmp	r3, #0
 8007998:	d004      	beq.n	80079a4 <HAL_DMAEx_List_InsertNode_Tail+0x68>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	2204      	movs	r2, #4
 800799e:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 80079a0:	2301      	movs	r3, #1
 80079a2:	e03f      	b.n	8007a24 <HAL_DMAEx_List_InsertNode_Tail+0xe8>
  }

  /* Empty queue */
  if (pQList->Head == NULL)
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d103      	bne.n	80079b4 <HAL_DMAEx_List_InsertNode_Tail+0x78>
  {
    pQList->Head = pNewNode;
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	683a      	ldr	r2, [r7, #0]
 80079b0:	601a      	str	r2, [r3, #0]
 80079b2:	e02b      	b.n	8007a0c <HAL_DMAEx_List_InsertNode_Tail+0xd0>
  }
  /* Not empty queue */
  else
  {
    /* Get CLLR register mask and offset */
    DMA_List_GetCLLRNodeInfo(pNewNode, &cllr_mask, &cllr_offset);
 80079b4:	f107 0220 	add.w	r2, r7, #32
 80079b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80079bc:	4619      	mov	r1, r3
 80079be:	6838      	ldr	r0, [r7, #0]
 80079c0:	f000 fc4e 	bl	8008260 <DMA_List_GetCLLRNodeInfo>

    /* Find node and get its position in selected queue */
    node_info.cllr_offset = cllr_offset;
 80079c4:	6a3b      	ldr	r3, [r7, #32]
 80079c6:	60fb      	str	r3, [r7, #12]
    (void)DMA_List_FindNode(pQList, NULL, &node_info);
 80079c8:	f107 030c 	add.w	r3, r7, #12
 80079cc:	461a      	mov	r2, r3
 80079ce:	2100      	movs	r1, #0
 80079d0:	6878      	ldr	r0, [r7, #4]
 80079d2:	f000 fc75 	bl	80082c0 <DMA_List_FindNode>

    /* Check if queue is circular */
    if (pQList->FirstCircularNode != NULL)
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	685b      	ldr	r3, [r3, #4]
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d00b      	beq.n	80079f6 <HAL_DMAEx_List_InsertNode_Tail+0xba>
    {
      pNewNode->LinkRegisters[cllr_offset] = ((uint32_t)pQList->FirstCircularNode & DMA_CLLR_LA) | cllr_mask;
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	685b      	ldr	r3, [r3, #4]
 80079e2:	461a      	mov	r2, r3
 80079e4:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 80079e8:	4013      	ands	r3, r2
 80079ea:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80079ec:	6a3a      	ldr	r2, [r7, #32]
 80079ee:	4319      	orrs	r1, r3
 80079f0:	683b      	ldr	r3, [r7, #0]
 80079f2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    }

    ((DMA_NodeTypeDef *)node_info.currentnode_addr)->LinkRegisters[cllr_offset] =
      ((uint32_t)pNewNode & DMA_CLLR_LA) | cllr_mask;
 80079f6:	683a      	ldr	r2, [r7, #0]
 80079f8:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 80079fc:	4013      	ands	r3, r2
 80079fe:	6a79      	ldr	r1, [r7, #36]	; 0x24
    ((DMA_NodeTypeDef *)node_info.currentnode_addr)->LinkRegisters[cllr_offset] =
 8007a00:	69ba      	ldr	r2, [r7, #24]
 8007a02:	4610      	mov	r0, r2
 8007a04:	6a3a      	ldr	r2, [r7, #32]
      ((uint32_t)pNewNode & DMA_CLLR_LA) | cllr_mask;
 8007a06:	430b      	orrs	r3, r1
    ((DMA_NodeTypeDef *)node_info.currentnode_addr)->LinkRegisters[cllr_offset] =
 8007a08:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
  }

  /* Increment queue node number */
  pQList->NodeNumber++;
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	689b      	ldr	r3, [r3, #8]
 8007a10:	1c5a      	adds	r2, r3, #1
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	609a      	str	r2, [r3, #8]

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	2200      	movs	r2, #0
 8007a1a:	611a      	str	r2, [r3, #16]

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_READY;
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	2201      	movs	r2, #1
 8007a20:	731a      	strb	r2, [r3, #12]

  /* Prevent MISRA-C2012-Rule-2.2_b */
  UNUSED(node_info);

  return HAL_OK;
 8007a22:	2300      	movs	r3, #0
}
 8007a24:	4618      	mov	r0, r3
 8007a26:	3728      	adds	r7, #40	; 0x28
 8007a28:	46bd      	mov	sp, r7
 8007a2a:	bd80      	pop	{r7, pc}

08007a2c <HAL_DMAEx_List_SetCircularModeConfig>:
  *                              registers configurations.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_SetCircularModeConfig(DMA_QListTypeDef *const pQList,
                                                       DMA_NodeTypeDef *const pFirstCircularNode)
{
 8007a2c:	b580      	push	{r7, lr}
 8007a2e:	b08a      	sub	sp, #40	; 0x28
 8007a30:	af00      	add	r7, sp, #0
 8007a32:	6078      	str	r0, [r7, #4]
 8007a34:	6039      	str	r1, [r7, #0]
  uint32_t cllr_mask;
  uint32_t cllr_offset;
  DMA_NodeInQInfoTypeDef node_info;

  /* Check the queue and the first circular node parameters */
  if ((pQList == NULL) || (pFirstCircularNode == NULL))
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d002      	beq.n	8007a42 <HAL_DMAEx_List_SetCircularModeConfig+0x16>
 8007a3c:	683b      	ldr	r3, [r7, #0]
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d101      	bne.n	8007a46 <HAL_DMAEx_List_SetCircularModeConfig+0x1a>
  {
    return HAL_ERROR;
 8007a42:	2301      	movs	r3, #1
 8007a44:	e05c      	b.n	8007b00 <HAL_DMAEx_List_SetCircularModeConfig+0xd4>
  }

  /* Check the queue */
  if (pQList->Head == NULL)
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d104      	bne.n	8007a58 <HAL_DMAEx_List_SetCircularModeConfig+0x2c>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_EMPTY;
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	2202      	movs	r2, #2
 8007a52:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8007a54:	2301      	movs	r3, #1
 8007a56:	e053      	b.n	8007b00 <HAL_DMAEx_List_SetCircularModeConfig+0xd4>
  }

  /* Check queue circular mode */
  if (pQList->FirstCircularNode != NULL)
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	685b      	ldr	r3, [r3, #4]
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d00b      	beq.n	8007a78 <HAL_DMAEx_List_SetCircularModeConfig+0x4c>
  {
    if (pQList->FirstCircularNode == pFirstCircularNode)
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	685b      	ldr	r3, [r3, #4]
 8007a64:	683a      	ldr	r2, [r7, #0]
 8007a66:	429a      	cmp	r2, r3
 8007a68:	d101      	bne.n	8007a6e <HAL_DMAEx_List_SetCircularModeConfig+0x42>
    {
      return HAL_OK;
 8007a6a:	2300      	movs	r3, #0
 8007a6c:	e048      	b.n	8007b00 <HAL_DMAEx_List_SetCircularModeConfig+0xd4>
    }
    else
    {
      /* Update the queue error code */
      pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	2204      	movs	r2, #4
 8007a72:	611a      	str	r2, [r3, #16]

      return HAL_ERROR;
 8007a74:	2301      	movs	r3, #1
 8007a76:	e043      	b.n	8007b00 <HAL_DMAEx_List_SetCircularModeConfig+0xd4>
    }
  }

  /* Check queue type */
  if (pQList->Type == QUEUE_TYPE_DYNAMIC)
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	695b      	ldr	r3, [r3, #20]
 8007a7c:	2b01      	cmp	r3, #1
 8007a7e:	d104      	bne.n	8007a8a <HAL_DMAEx_List_SetCircularModeConfig+0x5e>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	2204      	movs	r2, #4
 8007a84:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8007a86:	2301      	movs	r3, #1
 8007a88:	e03a      	b.n	8007b00 <HAL_DMAEx_List_SetCircularModeConfig+0xd4>
  }

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_BUSY;
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	2202      	movs	r2, #2
 8007a8e:	731a      	strb	r2, [r3, #12]

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	2200      	movs	r2, #0
 8007a94:	611a      	str	r2, [r3, #16]

  /* Get CLLR register mask and offset */
  DMA_List_GetCLLRNodeInfo(pFirstCircularNode, &cllr_mask, &cllr_offset);
 8007a96:	f107 0220 	add.w	r2, r7, #32
 8007a9a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007a9e:	4619      	mov	r1, r3
 8007aa0:	6838      	ldr	r0, [r7, #0]
 8007aa2:	f000 fbdd 	bl	8008260 <DMA_List_GetCLLRNodeInfo>

  /* Find the first circular node and get its position in selected queue */
  node_info.cllr_offset = cllr_offset;
 8007aa6:	6a3b      	ldr	r3, [r7, #32]
 8007aa8:	60fb      	str	r3, [r7, #12]
  if (DMA_List_FindNode(pQList, pFirstCircularNode, &node_info) == 0U)
 8007aaa:	f107 030c 	add.w	r3, r7, #12
 8007aae:	461a      	mov	r2, r3
 8007ab0:	6839      	ldr	r1, [r7, #0]
 8007ab2:	6878      	ldr	r0, [r7, #4]
 8007ab4:	f000 fc04 	bl	80082c0 <DMA_List_FindNode>
 8007ab8:	4603      	mov	r3, r0
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d11c      	bne.n	8007af8 <HAL_DMAEx_List_SetCircularModeConfig+0xcc>
  {
    /* Find the last queue node and get its position in selected queue */
    (void)DMA_List_FindNode(pQList, NULL, &node_info);
 8007abe:	f107 030c 	add.w	r3, r7, #12
 8007ac2:	461a      	mov	r2, r3
 8007ac4:	2100      	movs	r1, #0
 8007ac6:	6878      	ldr	r0, [r7, #4]
 8007ac8:	f000 fbfa 	bl	80082c0 <DMA_List_FindNode>

    /* Set circular mode */
    ((DMA_NodeTypeDef *)(node_info.currentnode_addr))->LinkRegisters[cllr_offset] =
      ((uint32_t)pFirstCircularNode & DMA_CLLR_LA) | cllr_mask;
 8007acc:	683a      	ldr	r2, [r7, #0]
 8007ace:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 8007ad2:	4013      	ands	r3, r2
 8007ad4:	6a79      	ldr	r1, [r7, #36]	; 0x24
    ((DMA_NodeTypeDef *)(node_info.currentnode_addr))->LinkRegisters[cllr_offset] =
 8007ad6:	69ba      	ldr	r2, [r7, #24]
 8007ad8:	4610      	mov	r0, r2
 8007ada:	6a3a      	ldr	r2, [r7, #32]
      ((uint32_t)pFirstCircularNode & DMA_CLLR_LA) | cllr_mask;
 8007adc:	430b      	orrs	r3, r1
    ((DMA_NodeTypeDef *)(node_info.currentnode_addr))->LinkRegisters[cllr_offset] =
 8007ade:	f840 3022 	str.w	r3, [r0, r2, lsl #2]

    /* Update first circular node in queue */
    pQList->FirstCircularNode = pFirstCircularNode;
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	683a      	ldr	r2, [r7, #0]
 8007ae6:	605a      	str	r2, [r3, #4]

    return HAL_ERROR;
  }

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	2200      	movs	r2, #0
 8007aec:	611a      	str	r2, [r3, #16]

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_READY;
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	2201      	movs	r2, #1
 8007af2:	731a      	strb	r2, [r3, #12]

  /* Prevent MISRA-C2012-Rule-2.2_b */
  UNUSED(node_info);

  return HAL_OK;
 8007af4:	2300      	movs	r3, #0
 8007af6:	e003      	b.n	8007b00 <HAL_DMAEx_List_SetCircularModeConfig+0xd4>
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NOTFOUND;
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	2206      	movs	r2, #6
 8007afc:	611a      	str	r2, [r3, #16]
    return HAL_ERROR;
 8007afe:	2301      	movs	r3, #1
}
 8007b00:	4618      	mov	r0, r3
 8007b02:	3728      	adds	r7, #40	; 0x28
 8007b04:	46bd      	mov	sp, r7
 8007b06:	bd80      	pop	{r7, pc}

08007b08 <HAL_DMAEx_List_LinkQ>:
  * @param  pQList : Pointer to a DMA_QListTypeDef structure that contains queue information.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_LinkQ(DMA_HandleTypeDef *const hdma,
                                       DMA_QListTypeDef *const pQList)
{
 8007b08:	b480      	push	{r7}
 8007b0a:	b085      	sub	sp, #20
 8007b0c:	af00      	add	r7, sp, #0
 8007b0e:	6078      	str	r0, [r7, #4]
 8007b10:	6039      	str	r1, [r7, #0]
  HAL_DMA_StateTypeDef state;

  /* Check the DMA channel handle and the queue parameters */
  if ((hdma == NULL) || (pQList == NULL))
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d002      	beq.n	8007b1e <HAL_DMAEx_List_LinkQ+0x16>
 8007b18:	683b      	ldr	r3, [r7, #0]
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d101      	bne.n	8007b22 <HAL_DMAEx_List_LinkQ+0x1a>
  {
    return HAL_ERROR;
 8007b1e:	2301      	movs	r3, #1
 8007b20:	e072      	b.n	8007c08 <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Get DMA state */
  state = hdma->State;
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8007b28:	73fb      	strb	r3, [r7, #15]

  /* Check DMA channel state */
  if ((hdma->State == HAL_DMA_STATE_BUSY) || (state == HAL_DMA_STATE_SUSPEND))
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8007b30:	b2db      	uxtb	r3, r3
 8007b32:	2b02      	cmp	r3, #2
 8007b34:	d002      	beq.n	8007b3c <HAL_DMAEx_List_LinkQ+0x34>
 8007b36:	7bfb      	ldrb	r3, [r7, #15]
 8007b38:	2b05      	cmp	r3, #5
 8007b3a:	d108      	bne.n	8007b4e <HAL_DMAEx_List_LinkQ+0x46>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	2240      	movs	r2, #64	; 0x40
 8007b40:	659a      	str	r2, [r3, #88]	; 0x58

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	2200      	movs	r2, #0
 8007b46:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

    return HAL_ERROR;
 8007b4a:	2301      	movs	r3, #1
 8007b4c:	e05c      	b.n	8007c08 <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Check queue state */
  if (pQList->State == HAL_DMA_QUEUE_STATE_BUSY)
 8007b4e:	683b      	ldr	r3, [r7, #0]
 8007b50:	7b1b      	ldrb	r3, [r3, #12]
 8007b52:	b2db      	uxtb	r3, r3
 8007b54:	2b02      	cmp	r3, #2
 8007b56:	d104      	bne.n	8007b62 <HAL_DMAEx_List_LinkQ+0x5a>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_BUSY;
 8007b58:	683b      	ldr	r3, [r7, #0]
 8007b5a:	2201      	movs	r2, #1
 8007b5c:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8007b5e:	2301      	movs	r3, #1
 8007b60:	e052      	b.n	8007c08 <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Check linearity compatibility */
  if ((IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) == 0U) &&
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	4a2b      	ldr	r2, [pc, #172]	; (8007c14 <HAL_DMAEx_List_LinkQ+0x10c>)
 8007b68:	4293      	cmp	r3, r2
 8007b6a:	d022      	beq.n	8007bb2 <HAL_DMAEx_List_LinkQ+0xaa>
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	4a29      	ldr	r2, [pc, #164]	; (8007c18 <HAL_DMAEx_List_LinkQ+0x110>)
 8007b72:	4293      	cmp	r3, r2
 8007b74:	d01d      	beq.n	8007bb2 <HAL_DMAEx_List_LinkQ+0xaa>
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	4a28      	ldr	r2, [pc, #160]	; (8007c1c <HAL_DMAEx_List_LinkQ+0x114>)
 8007b7c:	4293      	cmp	r3, r2
 8007b7e:	d018      	beq.n	8007bb2 <HAL_DMAEx_List_LinkQ+0xaa>
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	4a26      	ldr	r2, [pc, #152]	; (8007c20 <HAL_DMAEx_List_LinkQ+0x118>)
 8007b86:	4293      	cmp	r3, r2
 8007b88:	d013      	beq.n	8007bb2 <HAL_DMAEx_List_LinkQ+0xaa>
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	4a25      	ldr	r2, [pc, #148]	; (8007c24 <HAL_DMAEx_List_LinkQ+0x11c>)
 8007b90:	4293      	cmp	r3, r2
 8007b92:	d00e      	beq.n	8007bb2 <HAL_DMAEx_List_LinkQ+0xaa>
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	4a23      	ldr	r2, [pc, #140]	; (8007c28 <HAL_DMAEx_List_LinkQ+0x120>)
 8007b9a:	4293      	cmp	r3, r2
 8007b9c:	d009      	beq.n	8007bb2 <HAL_DMAEx_List_LinkQ+0xaa>
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	4a22      	ldr	r2, [pc, #136]	; (8007c2c <HAL_DMAEx_List_LinkQ+0x124>)
 8007ba4:	4293      	cmp	r3, r2
 8007ba6:	d004      	beq.n	8007bb2 <HAL_DMAEx_List_LinkQ+0xaa>
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	4a20      	ldr	r2, [pc, #128]	; (8007c30 <HAL_DMAEx_List_LinkQ+0x128>)
 8007bae:	4293      	cmp	r3, r2
 8007bb0:	d101      	bne.n	8007bb6 <HAL_DMAEx_List_LinkQ+0xae>
 8007bb2:	2301      	movs	r3, #1
 8007bb4:	e000      	b.n	8007bb8 <HAL_DMAEx_List_LinkQ+0xb0>
 8007bb6:	2300      	movs	r3, #0
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d10b      	bne.n	8007bd4 <HAL_DMAEx_List_LinkQ+0xcc>
      ((pQList->Head->NodeInfo & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR))
 8007bbc:	683b      	ldr	r3, [r7, #0]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	6a1b      	ldr	r3, [r3, #32]
 8007bc2:	f003 0302 	and.w	r3, r3, #2
  if ((IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) == 0U) &&
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d004      	beq.n	8007bd4 <HAL_DMAEx_List_LinkQ+0xcc>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_UNSUPPORTED;
 8007bca:	683b      	ldr	r3, [r7, #0]
 8007bcc:	2203      	movs	r2, #3
 8007bce:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8007bd0:	2301      	movs	r3, #1
 8007bd2:	e019      	b.n	8007c08 <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Check circularity compatibility */
  if (hdma->Mode == DMA_LINKEDLIST_CIRCULAR)
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007bd8:	2b81      	cmp	r3, #129	; 0x81
 8007bda:	d108      	bne.n	8007bee <HAL_DMAEx_List_LinkQ+0xe6>
  {
    /* Check first circular node */
    if (pQList->FirstCircularNode == NULL)
 8007bdc:	683b      	ldr	r3, [r7, #0]
 8007bde:	685b      	ldr	r3, [r3, #4]
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d10d      	bne.n	8007c00 <HAL_DMAEx_List_LinkQ+0xf8>
    {
      /* Update the queue error code */
      pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8007be4:	683b      	ldr	r3, [r7, #0]
 8007be6:	2204      	movs	r2, #4
 8007be8:	611a      	str	r2, [r3, #16]

      return HAL_ERROR;
 8007bea:	2301      	movs	r3, #1
 8007bec:	e00c      	b.n	8007c08 <HAL_DMAEx_List_LinkQ+0x100>
    }
  }
  else
  {
    /* Check first circular node */
    if (pQList->FirstCircularNode != NULL)
 8007bee:	683b      	ldr	r3, [r7, #0]
 8007bf0:	685b      	ldr	r3, [r3, #4]
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d004      	beq.n	8007c00 <HAL_DMAEx_List_LinkQ+0xf8>
    {
      /* Update the queue error code */
      pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8007bf6:	683b      	ldr	r3, [r7, #0]
 8007bf8:	2204      	movs	r2, #4
 8007bfa:	611a      	str	r2, [r3, #16]

      return HAL_ERROR;
 8007bfc:	2301      	movs	r3, #1
 8007bfe:	e003      	b.n	8007c08 <HAL_DMAEx_List_LinkQ+0x100>
    }
  }

  /* Register queue to DMA handle */
  hdma->LinkedListQueue = pQList;
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	683a      	ldr	r2, [r7, #0]
 8007c04:	675a      	str	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8007c06:	2300      	movs	r3, #0
}
 8007c08:	4618      	mov	r0, r3
 8007c0a:	3714      	adds	r7, #20
 8007c0c:	46bd      	mov	sp, r7
 8007c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c12:	4770      	bx	lr
 8007c14:	40020650 	.word	0x40020650
 8007c18:	50020650 	.word	0x50020650
 8007c1c:	400206d0 	.word	0x400206d0
 8007c20:	500206d0 	.word	0x500206d0
 8007c24:	40020750 	.word	0x40020750
 8007c28:	50020750 	.word	0x50020750
 8007c2c:	400207d0 	.word	0x400207d0
 8007c30:	500207d0 	.word	0x500207d0

08007c34 <DMA_List_Init>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
static void DMA_List_Init(DMA_HandleTypeDef const *const hdma)
{
 8007c34:	b480      	push	{r7}
 8007c36:	b085      	sub	sp, #20
 8007c38:	af00      	add	r7, sp, #0
 8007c3a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Prepare DMA Channel Control Register (CCR) value */
  tmpreg = hdma->InitLinkedList.Priority | hdma->InitLinkedList.LinkStepMode;
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c44:	4313      	orrs	r3, r2
 8007c46:	60fb      	str	r3, [r7, #12]

  /* Check DMA channel instance */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	4a85      	ldr	r2, [pc, #532]	; (8007e64 <DMA_List_Init+0x230>)
 8007c4e:	4293      	cmp	r3, r2
 8007c50:	f000 80a0 	beq.w	8007d94 <DMA_List_Init+0x160>
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	4a83      	ldr	r2, [pc, #524]	; (8007e68 <DMA_List_Init+0x234>)
 8007c5a:	4293      	cmp	r3, r2
 8007c5c:	f000 809a 	beq.w	8007d94 <DMA_List_Init+0x160>
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	4a81      	ldr	r2, [pc, #516]	; (8007e6c <DMA_List_Init+0x238>)
 8007c66:	4293      	cmp	r3, r2
 8007c68:	f000 8094 	beq.w	8007d94 <DMA_List_Init+0x160>
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	4a7f      	ldr	r2, [pc, #508]	; (8007e70 <DMA_List_Init+0x23c>)
 8007c72:	4293      	cmp	r3, r2
 8007c74:	f000 808e 	beq.w	8007d94 <DMA_List_Init+0x160>
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	4a7d      	ldr	r2, [pc, #500]	; (8007e74 <DMA_List_Init+0x240>)
 8007c7e:	4293      	cmp	r3, r2
 8007c80:	f000 8088 	beq.w	8007d94 <DMA_List_Init+0x160>
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	4a7b      	ldr	r2, [pc, #492]	; (8007e78 <DMA_List_Init+0x244>)
 8007c8a:	4293      	cmp	r3, r2
 8007c8c:	f000 8082 	beq.w	8007d94 <DMA_List_Init+0x160>
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	4a79      	ldr	r2, [pc, #484]	; (8007e7c <DMA_List_Init+0x248>)
 8007c96:	4293      	cmp	r3, r2
 8007c98:	d07c      	beq.n	8007d94 <DMA_List_Init+0x160>
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	4a78      	ldr	r2, [pc, #480]	; (8007e80 <DMA_List_Init+0x24c>)
 8007ca0:	4293      	cmp	r3, r2
 8007ca2:	d077      	beq.n	8007d94 <DMA_List_Init+0x160>
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	4a76      	ldr	r2, [pc, #472]	; (8007e84 <DMA_List_Init+0x250>)
 8007caa:	4293      	cmp	r3, r2
 8007cac:	d072      	beq.n	8007d94 <DMA_List_Init+0x160>
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	4a75      	ldr	r2, [pc, #468]	; (8007e88 <DMA_List_Init+0x254>)
 8007cb4:	4293      	cmp	r3, r2
 8007cb6:	d06d      	beq.n	8007d94 <DMA_List_Init+0x160>
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	4a73      	ldr	r2, [pc, #460]	; (8007e8c <DMA_List_Init+0x258>)
 8007cbe:	4293      	cmp	r3, r2
 8007cc0:	d068      	beq.n	8007d94 <DMA_List_Init+0x160>
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	4a72      	ldr	r2, [pc, #456]	; (8007e90 <DMA_List_Init+0x25c>)
 8007cc8:	4293      	cmp	r3, r2
 8007cca:	d063      	beq.n	8007d94 <DMA_List_Init+0x160>
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	4a70      	ldr	r2, [pc, #448]	; (8007e94 <DMA_List_Init+0x260>)
 8007cd2:	4293      	cmp	r3, r2
 8007cd4:	d05e      	beq.n	8007d94 <DMA_List_Init+0x160>
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	4a6f      	ldr	r2, [pc, #444]	; (8007e98 <DMA_List_Init+0x264>)
 8007cdc:	4293      	cmp	r3, r2
 8007cde:	d059      	beq.n	8007d94 <DMA_List_Init+0x160>
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	4a6d      	ldr	r2, [pc, #436]	; (8007e9c <DMA_List_Init+0x268>)
 8007ce6:	4293      	cmp	r3, r2
 8007ce8:	d054      	beq.n	8007d94 <DMA_List_Init+0x160>
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	4a6c      	ldr	r2, [pc, #432]	; (8007ea0 <DMA_List_Init+0x26c>)
 8007cf0:	4293      	cmp	r3, r2
 8007cf2:	d04f      	beq.n	8007d94 <DMA_List_Init+0x160>
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	4a6a      	ldr	r2, [pc, #424]	; (8007ea4 <DMA_List_Init+0x270>)
 8007cfa:	4293      	cmp	r3, r2
 8007cfc:	d04a      	beq.n	8007d94 <DMA_List_Init+0x160>
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	4a69      	ldr	r2, [pc, #420]	; (8007ea8 <DMA_List_Init+0x274>)
 8007d04:	4293      	cmp	r3, r2
 8007d06:	d045      	beq.n	8007d94 <DMA_List_Init+0x160>
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	4a67      	ldr	r2, [pc, #412]	; (8007eac <DMA_List_Init+0x278>)
 8007d0e:	4293      	cmp	r3, r2
 8007d10:	d040      	beq.n	8007d94 <DMA_List_Init+0x160>
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	4a66      	ldr	r2, [pc, #408]	; (8007eb0 <DMA_List_Init+0x27c>)
 8007d18:	4293      	cmp	r3, r2
 8007d1a:	d03b      	beq.n	8007d94 <DMA_List_Init+0x160>
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	4a64      	ldr	r2, [pc, #400]	; (8007eb4 <DMA_List_Init+0x280>)
 8007d22:	4293      	cmp	r3, r2
 8007d24:	d036      	beq.n	8007d94 <DMA_List_Init+0x160>
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	4a63      	ldr	r2, [pc, #396]	; (8007eb8 <DMA_List_Init+0x284>)
 8007d2c:	4293      	cmp	r3, r2
 8007d2e:	d031      	beq.n	8007d94 <DMA_List_Init+0x160>
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	4a61      	ldr	r2, [pc, #388]	; (8007ebc <DMA_List_Init+0x288>)
 8007d36:	4293      	cmp	r3, r2
 8007d38:	d02c      	beq.n	8007d94 <DMA_List_Init+0x160>
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	4a60      	ldr	r2, [pc, #384]	; (8007ec0 <DMA_List_Init+0x28c>)
 8007d40:	4293      	cmp	r3, r2
 8007d42:	d027      	beq.n	8007d94 <DMA_List_Init+0x160>
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	4a5e      	ldr	r2, [pc, #376]	; (8007ec4 <DMA_List_Init+0x290>)
 8007d4a:	4293      	cmp	r3, r2
 8007d4c:	d022      	beq.n	8007d94 <DMA_List_Init+0x160>
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	4a5d      	ldr	r2, [pc, #372]	; (8007ec8 <DMA_List_Init+0x294>)
 8007d54:	4293      	cmp	r3, r2
 8007d56:	d01d      	beq.n	8007d94 <DMA_List_Init+0x160>
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	4a5b      	ldr	r2, [pc, #364]	; (8007ecc <DMA_List_Init+0x298>)
 8007d5e:	4293      	cmp	r3, r2
 8007d60:	d018      	beq.n	8007d94 <DMA_List_Init+0x160>
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	4a5a      	ldr	r2, [pc, #360]	; (8007ed0 <DMA_List_Init+0x29c>)
 8007d68:	4293      	cmp	r3, r2
 8007d6a:	d013      	beq.n	8007d94 <DMA_List_Init+0x160>
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	4a58      	ldr	r2, [pc, #352]	; (8007ed4 <DMA_List_Init+0x2a0>)
 8007d72:	4293      	cmp	r3, r2
 8007d74:	d00e      	beq.n	8007d94 <DMA_List_Init+0x160>
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	4a57      	ldr	r2, [pc, #348]	; (8007ed8 <DMA_List_Init+0x2a4>)
 8007d7c:	4293      	cmp	r3, r2
 8007d7e:	d009      	beq.n	8007d94 <DMA_List_Init+0x160>
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	4a55      	ldr	r2, [pc, #340]	; (8007edc <DMA_List_Init+0x2a8>)
 8007d86:	4293      	cmp	r3, r2
 8007d88:	d004      	beq.n	8007d94 <DMA_List_Init+0x160>
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	4a54      	ldr	r2, [pc, #336]	; (8007ee0 <DMA_List_Init+0x2ac>)
 8007d90:	4293      	cmp	r3, r2
 8007d92:	d101      	bne.n	8007d98 <DMA_List_Init+0x164>
 8007d94:	2301      	movs	r3, #1
 8007d96:	e000      	b.n	8007d9a <DMA_List_Init+0x166>
 8007d98:	2300      	movs	r3, #0
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d004      	beq.n	8007da8 <DMA_List_Init+0x174>
  {
    tmpreg |= hdma->InitLinkedList.LinkAllocatedPort;
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007da2:	68fa      	ldr	r2, [r7, #12]
 8007da4:	4313      	orrs	r3, r2
 8007da6:	60fb      	str	r3, [r7, #12]
  }

  /* Write DMA Channel Control Register (CCR) */
  MODIFY_REG(hdma->Instance->CCR, DMA_CCR_PRIO | DMA_CCR_LAP | DMA_CCR_LSM, tmpreg);
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	695b      	ldr	r3, [r3, #20]
 8007dae:	f423 0143 	bic.w	r1, r3, #12779520	; 0xc30000
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	68fa      	ldr	r2, [r7, #12]
 8007db8:	430a      	orrs	r2, r1
 8007dba:	615a      	str	r2, [r3, #20]

  /* Write DMA Channel Control Register (CTR1) */
  WRITE_REG(hdma->Instance->CTR1, 0U);
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	2200      	movs	r2, #0
 8007dc2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write DMA Channel Control Register (CTR2) */
  WRITE_REG(hdma->Instance->CTR2, hdma->InitLinkedList.TransferEventMode);
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	687a      	ldr	r2, [r7, #4]
 8007dca:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8007dcc:	645a      	str	r2, [r3, #68]	; 0x44

  /* Write DMA Channel Control Register (CBR1) */
  WRITE_REG(hdma->Instance->CBR1, 0U);
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	2200      	movs	r2, #0
 8007dd4:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write DMA Channel Control Register (CSAR) */
  WRITE_REG(hdma->Instance->CSAR, 0U);
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	2200      	movs	r2, #0
 8007ddc:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write DMA Channel Control Register (CDAR) */
  WRITE_REG(hdma->Instance->CDAR, 0U);
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	2200      	movs	r2, #0
 8007de4:	651a      	str	r2, [r3, #80]	; 0x50

  /* If 2D Addressing is supported by current channel */
  if (IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) != 0U)
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	4a36      	ldr	r2, [pc, #216]	; (8007ec4 <DMA_List_Init+0x290>)
 8007dec:	4293      	cmp	r3, r2
 8007dee:	d022      	beq.n	8007e36 <DMA_List_Init+0x202>
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	4a34      	ldr	r2, [pc, #208]	; (8007ec8 <DMA_List_Init+0x294>)
 8007df6:	4293      	cmp	r3, r2
 8007df8:	d01d      	beq.n	8007e36 <DMA_List_Init+0x202>
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	4a33      	ldr	r2, [pc, #204]	; (8007ecc <DMA_List_Init+0x298>)
 8007e00:	4293      	cmp	r3, r2
 8007e02:	d018      	beq.n	8007e36 <DMA_List_Init+0x202>
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	4a31      	ldr	r2, [pc, #196]	; (8007ed0 <DMA_List_Init+0x29c>)
 8007e0a:	4293      	cmp	r3, r2
 8007e0c:	d013      	beq.n	8007e36 <DMA_List_Init+0x202>
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	4a30      	ldr	r2, [pc, #192]	; (8007ed4 <DMA_List_Init+0x2a0>)
 8007e14:	4293      	cmp	r3, r2
 8007e16:	d00e      	beq.n	8007e36 <DMA_List_Init+0x202>
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	4a2e      	ldr	r2, [pc, #184]	; (8007ed8 <DMA_List_Init+0x2a4>)
 8007e1e:	4293      	cmp	r3, r2
 8007e20:	d009      	beq.n	8007e36 <DMA_List_Init+0x202>
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	4a2d      	ldr	r2, [pc, #180]	; (8007edc <DMA_List_Init+0x2a8>)
 8007e28:	4293      	cmp	r3, r2
 8007e2a:	d004      	beq.n	8007e36 <DMA_List_Init+0x202>
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	4a2b      	ldr	r2, [pc, #172]	; (8007ee0 <DMA_List_Init+0x2ac>)
 8007e32:	4293      	cmp	r3, r2
 8007e34:	d101      	bne.n	8007e3a <DMA_List_Init+0x206>
 8007e36:	2301      	movs	r3, #1
 8007e38:	e000      	b.n	8007e3c <DMA_List_Init+0x208>
 8007e3a:	2300      	movs	r3, #0
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d007      	beq.n	8007e50 <DMA_List_Init+0x21c>
  {
    /* Write DMA Channel Control Register (CTR3) */
    WRITE_REG(hdma->Instance->CTR3, 0U);
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	2200      	movs	r2, #0
 8007e46:	655a      	str	r2, [r3, #84]	; 0x54

    /* Write DMA Channel Control Register (CBR2) */
    WRITE_REG(hdma->Instance->CBR2, 0U);
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	2200      	movs	r2, #0
 8007e4e:	659a      	str	r2, [r3, #88]	; 0x58
  }

  /* Write DMA Channel linked-list address register (CLLR) */
  WRITE_REG(hdma->Instance->CLLR, 0U);
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	2200      	movs	r2, #0
 8007e56:	67da      	str	r2, [r3, #124]	; 0x7c
}
 8007e58:	bf00      	nop
 8007e5a:	3714      	adds	r7, #20
 8007e5c:	46bd      	mov	sp, r7
 8007e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e62:	4770      	bx	lr
 8007e64:	40020050 	.word	0x40020050
 8007e68:	50020050 	.word	0x50020050
 8007e6c:	400200d0 	.word	0x400200d0
 8007e70:	500200d0 	.word	0x500200d0
 8007e74:	40020150 	.word	0x40020150
 8007e78:	50020150 	.word	0x50020150
 8007e7c:	400201d0 	.word	0x400201d0
 8007e80:	500201d0 	.word	0x500201d0
 8007e84:	40020250 	.word	0x40020250
 8007e88:	50020250 	.word	0x50020250
 8007e8c:	400202d0 	.word	0x400202d0
 8007e90:	500202d0 	.word	0x500202d0
 8007e94:	40020350 	.word	0x40020350
 8007e98:	50020350 	.word	0x50020350
 8007e9c:	400203d0 	.word	0x400203d0
 8007ea0:	500203d0 	.word	0x500203d0
 8007ea4:	40020450 	.word	0x40020450
 8007ea8:	50020450 	.word	0x50020450
 8007eac:	400204d0 	.word	0x400204d0
 8007eb0:	500204d0 	.word	0x500204d0
 8007eb4:	40020550 	.word	0x40020550
 8007eb8:	50020550 	.word	0x50020550
 8007ebc:	400205d0 	.word	0x400205d0
 8007ec0:	500205d0 	.word	0x500205d0
 8007ec4:	40020650 	.word	0x40020650
 8007ec8:	50020650 	.word	0x50020650
 8007ecc:	400206d0 	.word	0x400206d0
 8007ed0:	500206d0 	.word	0x500206d0
 8007ed4:	40020750 	.word	0x40020750
 8007ed8:	50020750 	.word	0x50020750
 8007edc:	400207d0 	.word	0x400207d0
 8007ee0:	500207d0 	.word	0x500207d0

08007ee4 <DMA_List_BuildNode>:
  *                       configurations.
  * @retval None.
  */
static void DMA_List_BuildNode(DMA_NodeConfTypeDef const *const pNodeConfig,
                               DMA_NodeTypeDef *const pNode)
{
 8007ee4:	b480      	push	{r7}
 8007ee6:	b085      	sub	sp, #20
 8007ee8:	af00      	add	r7, sp, #0
 8007eea:	6078      	str	r0, [r7, #4]
 8007eec:	6039      	str	r1, [r7, #0]
  int32_t blockoffset;

  /* Update CTR1 register value ***************************************************************************************/
  /* Prepare DMA channel transfer register (CTR1) value */
  pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] = pNodeConfig->Init.DestInc                     |
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	695a      	ldr	r2, [r3, #20]
                                                   pNodeConfig->Init.DestDataWidth               |
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	69db      	ldr	r3, [r3, #28]
  pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] = pNodeConfig->Init.DestInc                     |
 8007ef6:	431a      	orrs	r2, r3
                                                   pNodeConfig->DataHandlingConfig.DataAlignment |
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                                                   pNodeConfig->Init.DestDataWidth               |
 8007efc:	431a      	orrs	r2, r3
                                                   pNodeConfig->Init.SrcInc                      |
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	691b      	ldr	r3, [r3, #16]
                                                   pNodeConfig->DataHandlingConfig.DataAlignment |
 8007f02:	431a      	orrs	r2, r3
                                                   pNodeConfig->Init.SrcDataWidth;
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	699b      	ldr	r3, [r3, #24]
                                                   pNodeConfig->Init.SrcInc                      |
 8007f08:	431a      	orrs	r2, r3
  pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] = pNodeConfig->Init.DestInc                     |
 8007f0a:	683b      	ldr	r3, [r7, #0]
 8007f0c:	601a      	str	r2, [r3, #0]
    pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] |= DMA_CTR1_DSEC;
  }
#endif /* defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  /* Add parameters related to DMA configuration */
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_GPDMA) == DMA_CHANNEL_TYPE_GPDMA)
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	f003 0320 	and.w	r3, r3, #32
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d017      	beq.n	8007f4a <DMA_List_BuildNode+0x66>
  {
    /* Prepare DMA channel transfer register (CTR1) value */
    pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] |=
 8007f1a:	683b      	ldr	r3, [r7, #0]
 8007f1c:	681a      	ldr	r2, [r3, #0]
      (pNodeConfig->Init.TransferAllocatedPort | pNodeConfig->DataHandlingConfig.DataExchange |
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f26:	4319      	orrs	r1, r3
       (((pNodeConfig->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1)    |
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f2c:	3b01      	subs	r3, #1
 8007f2e:	051b      	lsls	r3, r3, #20
 8007f30:	f003 737c 	and.w	r3, r3, #66060288	; 0x3f00000
      (pNodeConfig->Init.TransferAllocatedPort | pNodeConfig->DataHandlingConfig.DataExchange |
 8007f34:	4319      	orrs	r1, r3
       (((pNodeConfig->Init.SrcBurstLength - 1U) << DMA_CTR1_SBL_1_Pos) & DMA_CTR1_SBL_1));
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f3a:	3b01      	subs	r3, #1
 8007f3c:	011b      	lsls	r3, r3, #4
 8007f3e:	f403 737c 	and.w	r3, r3, #1008	; 0x3f0
       (((pNodeConfig->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1)    |
 8007f42:	430b      	orrs	r3, r1
    pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] |=
 8007f44:	431a      	orrs	r2, r3
 8007f46:	683b      	ldr	r3, [r7, #0]
 8007f48:	601a      	str	r2, [r3, #0]
  /*********************************************************************************** CTR1 register value is updated */


  /* Update CTR2 register value ***************************************************************************************/
  /* Prepare DMA channel transfer register 2 (CTR2) value */
  pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] = pNodeConfig->Init.TransferEventMode |
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
                                                   (pNodeConfig->Init.Request & (DMA_CTR2_REQSEL | DMA_CTR2_SWREQ));
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	6859      	ldr	r1, [r3, #4]
 8007f52:	f240 237f 	movw	r3, #639	; 0x27f
 8007f56:	400b      	ands	r3, r1
  pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] = pNodeConfig->Init.TransferEventMode |
 8007f58:	431a      	orrs	r2, r3
 8007f5a:	683b      	ldr	r3, [r7, #0]
 8007f5c:	605a      	str	r2, [r3, #4]

  /* Check for memory to peripheral transfer */
  if ((pNodeConfig->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	68db      	ldr	r3, [r3, #12]
 8007f62:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007f66:	d10c      	bne.n	8007f82 <DMA_List_BuildNode+0x9e>
  {
    /* Check for GPDMA */
    if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_GPDMA) == DMA_CHANNEL_TYPE_GPDMA)
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	f003 0320 	and.w	r3, r3, #32
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d011      	beq.n	8007f98 <DMA_List_BuildNode+0xb4>
    {
      pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |= DMA_CTR2_DREQ;
 8007f74:	683b      	ldr	r3, [r7, #0]
 8007f76:	685b      	ldr	r3, [r3, #4]
 8007f78:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8007f7c:	683b      	ldr	r3, [r7, #0]
 8007f7e:	605a      	str	r2, [r3, #4]
 8007f80:	e00a      	b.n	8007f98 <DMA_List_BuildNode+0xb4>
    }
  }
  /* Memory to memory transfer */
  else if ((pNodeConfig->Init.Direction) == DMA_MEMORY_TO_MEMORY)
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	68db      	ldr	r3, [r3, #12]
 8007f86:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007f8a:	d105      	bne.n	8007f98 <DMA_List_BuildNode+0xb4>
  {
    pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |= DMA_CTR2_SWREQ;
 8007f8c:	683b      	ldr	r3, [r7, #0]
 8007f8e:	685b      	ldr	r3, [r3, #4]
 8007f90:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8007f94:	683b      	ldr	r3, [r7, #0]
 8007f96:	605a      	str	r2, [r3, #4]
  {
    /* Prevent MISRA-C2012-Rule-15.7 */
  }

  /* Check if trigger feature is active */
  if (pNodeConfig->TriggerConfig.TriggerPolarity != DMA_TRIG_POLARITY_MASKED)
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d00f      	beq.n	8007fc0 <DMA_List_BuildNode+0xdc>
  {
    /* Prepare DMA channel transfer register 2 (CTR2) value */
    pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |=
 8007fa0:	683b      	ldr	r3, [r7, #0]
 8007fa2:	685a      	ldr	r2, [r3, #4]
      pNodeConfig->TriggerConfig.TriggerMode | pNodeConfig->TriggerConfig.TriggerPolarity |
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007fac:	4319      	orrs	r1, r3
      ((pNodeConfig->TriggerConfig.TriggerSelection << DMA_CTR2_TRIGSEL_Pos) & DMA_CTR2_TRIGSEL);
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007fb2:	041b      	lsls	r3, r3, #16
 8007fb4:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
      pNodeConfig->TriggerConfig.TriggerMode | pNodeConfig->TriggerConfig.TriggerPolarity |
 8007fb8:	430b      	orrs	r3, r1
    pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |=
 8007fba:	431a      	orrs	r2, r3
 8007fbc:	683b      	ldr	r3, [r7, #0]
 8007fbe:	605a      	str	r2, [r3, #4]
  /*********************************************************************************** CTR2 register value is updated */


  /* Update CBR1 register value ***************************************************************************************/
  /* Prepare DMA channel block register 1 (CBR1) value */
  pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = (pNodeConfig->DataSize & DMA_CBR1_BNDT);
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007fc4:	b29a      	uxth	r2, r3
 8007fc6:	683b      	ldr	r3, [r7, #0]
 8007fc8:	609a      	str	r2, [r3, #8]

  /* If 2D addressing is supported by the selected DMA channel */
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	f003 0302 	and.w	r3, r3, #2
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d04e      	beq.n	8008074 <DMA_List_BuildNode+0x190>
  {
    /* Set the new CBR1 Register value */
    pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |=
 8007fd6:	683b      	ldr	r3, [r7, #0]
 8007fd8:	689a      	ldr	r2, [r3, #8]
      (((pNodeConfig->RepeatBlockConfig.RepeatCount - 1U) << DMA_CBR1_BRC_Pos) & DMA_CBR1_BRC);
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007fde:	3b01      	subs	r3, #1
 8007fe0:	0419      	lsls	r1, r3, #16
 8007fe2:	4b67      	ldr	r3, [pc, #412]	; (8008180 <DMA_List_BuildNode+0x29c>)
 8007fe4:	400b      	ands	r3, r1
    pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |=
 8007fe6:	431a      	orrs	r2, r3
 8007fe8:	683b      	ldr	r3, [r7, #0]
 8007fea:	609a      	str	r2, [r3, #8]

    /* If the source address offset is negative, set SDEC bit */
    if (pNodeConfig->RepeatBlockConfig.SrcAddrOffset < 0)
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	da06      	bge.n	8008002 <DMA_List_BuildNode+0x11e>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_SDEC;
 8007ff4:	683b      	ldr	r3, [r7, #0]
 8007ff6:	689b      	ldr	r3, [r3, #8]
 8007ff8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8007ffc:	683b      	ldr	r3, [r7, #0]
 8007ffe:	609a      	str	r2, [r3, #8]
 8008000:	e005      	b.n	800800e <DMA_List_BuildNode+0x12a>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_SDEC);
 8008002:	683b      	ldr	r3, [r7, #0]
 8008004:	689b      	ldr	r3, [r3, #8]
 8008006:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800800a:	683b      	ldr	r3, [r7, #0]
 800800c:	609a      	str	r2, [r3, #8]
    }

    /* If the destination address offset is negative, set DDEC bit */
    if (pNodeConfig->RepeatBlockConfig.DestAddrOffset < 0)
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008012:	2b00      	cmp	r3, #0
 8008014:	da06      	bge.n	8008024 <DMA_List_BuildNode+0x140>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_DDEC;
 8008016:	683b      	ldr	r3, [r7, #0]
 8008018:	689b      	ldr	r3, [r3, #8]
 800801a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800801e:	683b      	ldr	r3, [r7, #0]
 8008020:	609a      	str	r2, [r3, #8]
 8008022:	e005      	b.n	8008030 <DMA_List_BuildNode+0x14c>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_DDEC);
 8008024:	683b      	ldr	r3, [r7, #0]
 8008026:	689b      	ldr	r3, [r3, #8]
 8008028:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800802c:	683b      	ldr	r3, [r7, #0]
 800802e:	609a      	str	r2, [r3, #8]
    }

    /* If the repeated block source address offset is negative, set BRSEC bit */
    if (pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset < 0)
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008034:	2b00      	cmp	r3, #0
 8008036:	da06      	bge.n	8008046 <DMA_List_BuildNode+0x162>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_BRSDEC;
 8008038:	683b      	ldr	r3, [r7, #0]
 800803a:	689b      	ldr	r3, [r3, #8]
 800803c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008040:	683b      	ldr	r3, [r7, #0]
 8008042:	609a      	str	r2, [r3, #8]
 8008044:	e005      	b.n	8008052 <DMA_List_BuildNode+0x16e>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_BRSDEC);
 8008046:	683b      	ldr	r3, [r7, #0]
 8008048:	689b      	ldr	r3, [r3, #8]
 800804a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800804e:	683b      	ldr	r3, [r7, #0]
 8008050:	609a      	str	r2, [r3, #8]
    }

    /* if the repeated block destination address offset is negative, set BRDEC bit */
    if (pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset < 0)
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008056:	2b00      	cmp	r3, #0
 8008058:	da06      	bge.n	8008068 <DMA_List_BuildNode+0x184>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_BRDDEC;
 800805a:	683b      	ldr	r3, [r7, #0]
 800805c:	689b      	ldr	r3, [r3, #8]
 800805e:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8008062:	683b      	ldr	r3, [r7, #0]
 8008064:	609a      	str	r2, [r3, #8]
 8008066:	e005      	b.n	8008074 <DMA_List_BuildNode+0x190>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_BRDDEC);
 8008068:	683b      	ldr	r3, [r7, #0]
 800806a:	689b      	ldr	r3, [r3, #8]
 800806c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8008070:	683b      	ldr	r3, [r7, #0]
 8008072:	609a      	str	r2, [r3, #8]
  }
  /*********************************************************************************** CBR1 register value is updated */


  /* Update CSAR register value ***************************************************************************************/
  pNode->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] = pNodeConfig->SrcAddress;
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8008078:	683b      	ldr	r3, [r7, #0]
 800807a:	60da      	str	r2, [r3, #12]
  /*********************************************************************************** CSAR register value is updated */


  /* Update CDAR register value ***************************************************************************************/
  pNode->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = pNodeConfig->DstAddress;
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8008080:	683b      	ldr	r3, [r7, #0]
 8008082:	611a      	str	r2, [r3, #16]
  /*********************************************************************************** CDAR register value is updated */


  /* Check if the selected channel is 2D addressing */
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	f003 0302 	and.w	r3, r3, #2
 800808c:	2b00      	cmp	r3, #0
 800808e:	d059      	beq.n	8008144 <DMA_List_BuildNode+0x260>
  {
    /* Update CTR3 register value *************************************************************************************/
    /* Write new CTR3 Register value : source address offset */
    if (pNodeConfig->RepeatBlockConfig.SrcAddrOffset < 0)
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008094:	2b00      	cmp	r3, #0
 8008096:	da09      	bge.n	80080ac <DMA_List_BuildNode+0x1c8>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.SrcAddrOffset);
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800809c:	425b      	negs	r3, r3
 800809e:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] = ((uint32_t)blockoffset & DMA_CTR3_SAO);
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	f3c3 020c 	ubfx	r2, r3, #0, #13
 80080a6:	683b      	ldr	r3, [r7, #0]
 80080a8:	615a      	str	r2, [r3, #20]
 80080aa:	e005      	b.n	80080b8 <DMA_List_BuildNode+0x1d4>
    }
    else
    {
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] =
        ((uint32_t)pNodeConfig->RepeatBlockConfig.SrcAddrOffset & DMA_CTR3_SAO);
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80080b0:	f3c3 020c 	ubfx	r2, r3, #0, #13
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] =
 80080b4:	683b      	ldr	r3, [r7, #0]
 80080b6:	615a      	str	r2, [r3, #20]
    }

    /* Write new CTR3 Register value : destination address offset */
    if (pNodeConfig->RepeatBlockConfig.DestAddrOffset < 0)
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80080bc:	2b00      	cmp	r3, #0
 80080be:	da0d      	bge.n	80080dc <DMA_List_BuildNode+0x1f8>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.DestAddrOffset);
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80080c4:	425b      	negs	r3, r3
 80080c6:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] |= (((uint32_t)blockoffset << DMA_CTR3_DAO_Pos) & DMA_CTR3_DAO);
 80080c8:	683b      	ldr	r3, [r7, #0]
 80080ca:	695a      	ldr	r2, [r3, #20]
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	0419      	lsls	r1, r3, #16
 80080d0:	4b2c      	ldr	r3, [pc, #176]	; (8008184 <DMA_List_BuildNode+0x2a0>)
 80080d2:	400b      	ands	r3, r1
 80080d4:	431a      	orrs	r2, r3
 80080d6:	683b      	ldr	r3, [r7, #0]
 80080d8:	615a      	str	r2, [r3, #20]
 80080da:	e009      	b.n	80080f0 <DMA_List_BuildNode+0x20c>
    }
    else
    {
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] |=
 80080dc:	683b      	ldr	r3, [r7, #0]
 80080de:	695a      	ldr	r2, [r3, #20]
        (((uint32_t)pNodeConfig->RepeatBlockConfig.DestAddrOffset << DMA_CTR3_DAO_Pos) & DMA_CTR3_DAO);
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80080e4:	0419      	lsls	r1, r3, #16
 80080e6:	4b27      	ldr	r3, [pc, #156]	; (8008184 <DMA_List_BuildNode+0x2a0>)
 80080e8:	400b      	ands	r3, r1
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] |=
 80080ea:	431a      	orrs	r2, r3
 80080ec:	683b      	ldr	r3, [r7, #0]
 80080ee:	615a      	str	r2, [r3, #20]
    /********************************************************************************* CTR3 register value is updated */


    /* Update CBR2 register value *************************************************************************************/
    /* Write new CBR2 Register value : repeated block source address offset */
    if (pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset < 0)
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	da08      	bge.n	800810a <DMA_List_BuildNode+0x226>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset);
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80080fc:	425b      	negs	r3, r3
 80080fe:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] = ((uint32_t)blockoffset & DMA_CBR2_BRSAO);
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	b29a      	uxth	r2, r3
 8008104:	683b      	ldr	r3, [r7, #0]
 8008106:	619a      	str	r2, [r3, #24]
 8008108:	e004      	b.n	8008114 <DMA_List_BuildNode+0x230>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] =
        ((uint32_t)pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset & DMA_CBR2_BRSAO);
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800810e:	b29a      	uxth	r2, r3
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] =
 8008110:	683b      	ldr	r3, [r7, #0]
 8008112:	619a      	str	r2, [r3, #24]
    }

    /* Write new CBR2 Register value : repeated block destination address offset */
    if (pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset < 0)
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008118:	2b00      	cmp	r3, #0
 800811a:	da0b      	bge.n	8008134 <DMA_List_BuildNode+0x250>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset);
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008120:	425b      	negs	r3, r3
 8008122:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 8008124:	683b      	ldr	r3, [r7, #0]
 8008126:	699a      	ldr	r2, [r3, #24]
        (((uint32_t)blockoffset & DMA_CBR2_BRSAO) << DMA_CBR2_BRDAO_Pos);
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	041b      	lsls	r3, r3, #16
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 800812c:	431a      	orrs	r2, r3
 800812e:	683b      	ldr	r3, [r7, #0]
 8008130:	619a      	str	r2, [r3, #24]
 8008132:	e007      	b.n	8008144 <DMA_List_BuildNode+0x260>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 8008134:	683b      	ldr	r3, [r7, #0]
 8008136:	699a      	ldr	r2, [r3, #24]
        (((uint32_t)pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset << DMA_CBR2_BRDAO_Pos) & DMA_CBR2_BRDAO);
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800813c:	041b      	lsls	r3, r3, #16
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 800813e:	431a      	orrs	r2, r3
 8008140:	683b      	ldr	r3, [r7, #0]
 8008142:	619a      	str	r2, [r3, #24]
  }


  /* Update node information value ************************************************************************************/
  /* Set node information */
  pNode->NodeInfo = pNodeConfig->NodeType;
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	681a      	ldr	r2, [r3, #0]
 8008148:	683b      	ldr	r3, [r7, #0]
 800814a:	621a      	str	r2, [r3, #32]
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	f003 0302 	and.w	r3, r3, #2
 8008154:	2b00      	cmp	r3, #0
 8008156:	d006      	beq.n	8008166 <DMA_List_BuildNode+0x282>
  {
    pNode->NodeInfo |= (NODE_CLLR_2D_DEFAULT_OFFSET << NODE_CLLR_IDX_POS);
 8008158:	683b      	ldr	r3, [r7, #0]
 800815a:	6a1b      	ldr	r3, [r3, #32]
 800815c:	f443 62e0 	orr.w	r2, r3, #1792	; 0x700
 8008160:	683b      	ldr	r3, [r7, #0]
 8008162:	621a      	str	r2, [r3, #32]
  else
  {
    pNode->NodeInfo |= (NODE_CLLR_LINEAR_DEFAULT_OFFSET << NODE_CLLR_IDX_POS);
  }
  /******************************************************************************** Node information value is updated */
}
 8008164:	e005      	b.n	8008172 <DMA_List_BuildNode+0x28e>
    pNode->NodeInfo |= (NODE_CLLR_LINEAR_DEFAULT_OFFSET << NODE_CLLR_IDX_POS);
 8008166:	683b      	ldr	r3, [r7, #0]
 8008168:	6a1b      	ldr	r3, [r3, #32]
 800816a:	f443 62a0 	orr.w	r2, r3, #1280	; 0x500
 800816e:	683b      	ldr	r3, [r7, #0]
 8008170:	621a      	str	r2, [r3, #32]
}
 8008172:	bf00      	nop
 8008174:	3714      	adds	r7, #20
 8008176:	46bd      	mov	sp, r7
 8008178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800817c:	4770      	bx	lr
 800817e:	bf00      	nop
 8008180:	07ff0000 	.word	0x07ff0000
 8008184:	1fff0000 	.word	0x1fff0000

08008188 <DMA_List_CheckNodesBaseAddresses>:
  * @retval Return 0 when nodes addresses are compatible, 1 otherwise.
  */
static uint32_t DMA_List_CheckNodesBaseAddresses(DMA_NodeTypeDef const *const pNode1,
                                                 DMA_NodeTypeDef const *const pNode2,
                                                 DMA_NodeTypeDef const *const pNode3)
{
 8008188:	b480      	push	{r7}
 800818a:	b087      	sub	sp, #28
 800818c:	af00      	add	r7, sp, #0
 800818e:	60f8      	str	r0, [r7, #12]
 8008190:	60b9      	str	r1, [r7, #8]
 8008192:	607a      	str	r2, [r7, #4]
  uint32_t temp = (((uint32_t)pNode1 | (uint32_t)pNode2 | (uint32_t)pNode3) & DMA_CLBAR_LBA);
 8008194:	68fa      	ldr	r2, [r7, #12]
 8008196:	68bb      	ldr	r3, [r7, #8]
 8008198:	431a      	orrs	r2, r3
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	4313      	orrs	r3, r2
 800819e:	0c1b      	lsrs	r3, r3, #16
 80081a0:	041b      	lsls	r3, r3, #16
 80081a2:	613b      	str	r3, [r7, #16]
  uint32_t ref  = 0U;
 80081a4:	2300      	movs	r3, #0
 80081a6:	617b      	str	r3, [r7, #20]

  /* Check node 1 address */
  if ((uint32_t)pNode1 != 0U)
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d002      	beq.n	80081b4 <DMA_List_CheckNodesBaseAddresses+0x2c>
  {
    ref = (uint32_t)pNode1;
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	617b      	str	r3, [r7, #20]
 80081b2:	e00a      	b.n	80081ca <DMA_List_CheckNodesBaseAddresses+0x42>
  }
  /* Check node 2 address */
  else if ((uint32_t)pNode2 != 0U)
 80081b4:	68bb      	ldr	r3, [r7, #8]
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d002      	beq.n	80081c0 <DMA_List_CheckNodesBaseAddresses+0x38>
  {
    ref = (uint32_t)pNode2;
 80081ba:	68bb      	ldr	r3, [r7, #8]
 80081bc:	617b      	str	r3, [r7, #20]
 80081be:	e004      	b.n	80081ca <DMA_List_CheckNodesBaseAddresses+0x42>
  }
  /* Check node 3 address */
  else if ((uint32_t)pNode3 != 0U)
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d001      	beq.n	80081ca <DMA_List_CheckNodesBaseAddresses+0x42>
  {
    ref = (uint32_t)pNode3;
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	617b      	str	r3, [r7, #20]
  {
    /* Prevent MISRA-C2012-Rule-15.7 */
  }

  /* Check addresses compatibility */
  if (temp != ((uint32_t)ref & DMA_CLBAR_LBA))
 80081ca:	697b      	ldr	r3, [r7, #20]
 80081cc:	0c1b      	lsrs	r3, r3, #16
 80081ce:	041b      	lsls	r3, r3, #16
 80081d0:	693a      	ldr	r2, [r7, #16]
 80081d2:	429a      	cmp	r2, r3
 80081d4:	d001      	beq.n	80081da <DMA_List_CheckNodesBaseAddresses+0x52>
  {
    return 1U;
 80081d6:	2301      	movs	r3, #1
 80081d8:	e000      	b.n	80081dc <DMA_List_CheckNodesBaseAddresses+0x54>
  }

  return 0U;
 80081da:	2300      	movs	r3, #0
}
 80081dc:	4618      	mov	r0, r3
 80081de:	371c      	adds	r7, #28
 80081e0:	46bd      	mov	sp, r7
 80081e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081e6:	4770      	bx	lr

080081e8 <DMA_List_CheckNodesTypes>:
  * @retval Return 0 when nodes types are compatible, otherwise nodes types are not compatible.
  */
static uint32_t DMA_List_CheckNodesTypes(DMA_NodeTypeDef const *const pNode1,
                                         DMA_NodeTypeDef const *const pNode2,
                                         DMA_NodeTypeDef const *const pNode3)
{
 80081e8:	b480      	push	{r7}
 80081ea:	b087      	sub	sp, #28
 80081ec:	af00      	add	r7, sp, #0
 80081ee:	60f8      	str	r0, [r7, #12]
 80081f0:	60b9      	str	r1, [r7, #8]
 80081f2:	607a      	str	r2, [r7, #4]
  uint32_t ref = 0U;
 80081f4:	2300      	movs	r3, #0
 80081f6:	617b      	str	r3, [r7, #20]

  /* Check node 1 parameter */
  if (pNode1 != NULL)
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d004      	beq.n	8008208 <DMA_List_CheckNodesTypes+0x20>
  {
    ref = pNode1->NodeInfo & NODE_TYPE_MASK;
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	6a1b      	ldr	r3, [r3, #32]
 8008202:	b2db      	uxtb	r3, r3
 8008204:	617b      	str	r3, [r7, #20]
 8008206:	e00e      	b.n	8008226 <DMA_List_CheckNodesTypes+0x3e>
  }
  /* Check node 2 parameter */
  else if (pNode2 != NULL)
 8008208:	68bb      	ldr	r3, [r7, #8]
 800820a:	2b00      	cmp	r3, #0
 800820c:	d004      	beq.n	8008218 <DMA_List_CheckNodesTypes+0x30>
  {
    ref = pNode2->NodeInfo & NODE_TYPE_MASK;
 800820e:	68bb      	ldr	r3, [r7, #8]
 8008210:	6a1b      	ldr	r3, [r3, #32]
 8008212:	b2db      	uxtb	r3, r3
 8008214:	617b      	str	r3, [r7, #20]
 8008216:	e006      	b.n	8008226 <DMA_List_CheckNodesTypes+0x3e>
  }
  /* Check node 3 parameter */
  else if (pNode3 != NULL)
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	2b00      	cmp	r3, #0
 800821c:	d003      	beq.n	8008226 <DMA_List_CheckNodesTypes+0x3e>
  {
    ref = pNode3->NodeInfo & NODE_TYPE_MASK;
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	6a1b      	ldr	r3, [r3, #32]
 8008222:	b2db      	uxtb	r3, r3
 8008224:	617b      	str	r3, [r7, #20]
  {
    /* Prevent MISRA-C2012-Rule-15.7 */
  }

  /* Check node 2 parameter */
  if (pNode2 != NULL)
 8008226:	68bb      	ldr	r3, [r7, #8]
 8008228:	2b00      	cmp	r3, #0
 800822a:	d007      	beq.n	800823c <DMA_List_CheckNodesTypes+0x54>
  {
    /* Check node type compatibility */
    if (ref != (pNode2->NodeInfo & NODE_TYPE_MASK))
 800822c:	68bb      	ldr	r3, [r7, #8]
 800822e:	6a1b      	ldr	r3, [r3, #32]
 8008230:	b2db      	uxtb	r3, r3
 8008232:	697a      	ldr	r2, [r7, #20]
 8008234:	429a      	cmp	r2, r3
 8008236:	d001      	beq.n	800823c <DMA_List_CheckNodesTypes+0x54>
    {
      return 2U;
 8008238:	2302      	movs	r3, #2
 800823a:	e00b      	b.n	8008254 <DMA_List_CheckNodesTypes+0x6c>
    }
  }

  /* Check node 3 parameter */
  if (pNode3 != NULL)
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	2b00      	cmp	r3, #0
 8008240:	d007      	beq.n	8008252 <DMA_List_CheckNodesTypes+0x6a>
  {
    /* Check node type compatibility */
    if (ref != (pNode3->NodeInfo & NODE_TYPE_MASK))
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	6a1b      	ldr	r3, [r3, #32]
 8008246:	b2db      	uxtb	r3, r3
 8008248:	697a      	ldr	r2, [r7, #20]
 800824a:	429a      	cmp	r2, r3
 800824c:	d001      	beq.n	8008252 <DMA_List_CheckNodesTypes+0x6a>
    {
      return 3U;
 800824e:	2303      	movs	r3, #3
 8008250:	e000      	b.n	8008254 <DMA_List_CheckNodesTypes+0x6c>
    }
  }

  return 0U;
 8008252:	2300      	movs	r3, #0
}
 8008254:	4618      	mov	r0, r3
 8008256:	371c      	adds	r7, #28
 8008258:	46bd      	mov	sp, r7
 800825a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800825e:	4770      	bx	lr

08008260 <DMA_List_GetCLLRNodeInfo>:
  * @retval None.
  */
static void DMA_List_GetCLLRNodeInfo(DMA_NodeTypeDef const *const pNode,
                                     uint32_t *const cllr_mask,
                                     uint32_t *const cllr_offset)
{
 8008260:	b480      	push	{r7}
 8008262:	b085      	sub	sp, #20
 8008264:	af00      	add	r7, sp, #0
 8008266:	60f8      	str	r0, [r7, #12]
 8008268:	60b9      	str	r1, [r7, #8]
 800826a:	607a      	str	r2, [r7, #4]
  /* Check node type */
  if ((pNode->NodeInfo & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	6a1b      	ldr	r3, [r3, #32]
 8008270:	f003 0302 	and.w	r3, r3, #2
 8008274:	2b00      	cmp	r3, #0
 8008276:	d00c      	beq.n	8008292 <DMA_List_GetCLLRNodeInfo+0x32>
  {
    /* Update CLLR register mask value */
    if (cllr_mask != NULL)
 8008278:	68bb      	ldr	r3, [r7, #8]
 800827a:	2b00      	cmp	r3, #0
 800827c:	d002      	beq.n	8008284 <DMA_List_GetCLLRNodeInfo+0x24>
    {
      *cllr_mask = DMA_CLLR_UT1 | DMA_CLLR_UT2 | DMA_CLLR_UB1 | DMA_CLLR_USA | DMA_CLLR_UDA | DMA_CLLR_UT3 |
 800827e:	68bb      	ldr	r3, [r7, #8]
 8008280:	4a0d      	ldr	r2, [pc, #52]	; (80082b8 <DMA_List_GetCLLRNodeInfo+0x58>)
 8008282:	601a      	str	r2, [r3, #0]
                   DMA_CLLR_UB2 | DMA_CLLR_ULL;
    }

    /* Update CLLR register offset */
    if (cllr_offset != NULL)
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	2b00      	cmp	r3, #0
 8008288:	d00f      	beq.n	80082aa <DMA_List_GetCLLRNodeInfo+0x4a>
    {
      *cllr_offset = NODE_CLLR_2D_DEFAULT_OFFSET;
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	2207      	movs	r2, #7
 800828e:	601a      	str	r2, [r3, #0]
    if (cllr_offset != NULL)
    {
      *cllr_offset = NODE_CLLR_LINEAR_DEFAULT_OFFSET;
    }
  }
}
 8008290:	e00b      	b.n	80082aa <DMA_List_GetCLLRNodeInfo+0x4a>
    if (cllr_mask != NULL)
 8008292:	68bb      	ldr	r3, [r7, #8]
 8008294:	2b00      	cmp	r3, #0
 8008296:	d002      	beq.n	800829e <DMA_List_GetCLLRNodeInfo+0x3e>
      *cllr_mask = DMA_CLLR_UT1 | DMA_CLLR_UT2 | DMA_CLLR_UB1 | DMA_CLLR_USA | DMA_CLLR_UDA | DMA_CLLR_ULL;
 8008298:	68bb      	ldr	r3, [r7, #8]
 800829a:	4a08      	ldr	r2, [pc, #32]	; (80082bc <DMA_List_GetCLLRNodeInfo+0x5c>)
 800829c:	601a      	str	r2, [r3, #0]
    if (cllr_offset != NULL)
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d002      	beq.n	80082aa <DMA_List_GetCLLRNodeInfo+0x4a>
      *cllr_offset = NODE_CLLR_LINEAR_DEFAULT_OFFSET;
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	2205      	movs	r2, #5
 80082a8:	601a      	str	r2, [r3, #0]
}
 80082aa:	bf00      	nop
 80082ac:	3714      	adds	r7, #20
 80082ae:	46bd      	mov	sp, r7
 80082b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082b4:	4770      	bx	lr
 80082b6:	bf00      	nop
 80082b8:	fe010000 	.word	0xfe010000
 80082bc:	f8010000 	.word	0xf8010000

080082c0 <DMA_List_FindNode>:
  * @retval Return 0 when node is found in selected queue, otherwise node is not found.
  */
static uint32_t DMA_List_FindNode(DMA_QListTypeDef const *const pQList,
                                  DMA_NodeTypeDef const *const pNode,
                                  DMA_NodeInQInfoTypeDef *const NodeInfo)
{
 80082c0:	b480      	push	{r7}
 80082c2:	b089      	sub	sp, #36	; 0x24
 80082c4:	af00      	add	r7, sp, #0
 80082c6:	60f8      	str	r0, [r7, #12]
 80082c8:	60b9      	str	r1, [r7, #8]
 80082ca:	607a      	str	r2, [r7, #4]
  uint32_t node_idx = 0U;
 80082cc:	2300      	movs	r3, #0
 80082ce:	61fb      	str	r3, [r7, #28]
  uint32_t currentnode_address  = 0U;
 80082d0:	2300      	movs	r3, #0
 80082d2:	61bb      	str	r3, [r7, #24]
  uint32_t previousnode_address  = 0U;
 80082d4:	2300      	movs	r3, #0
 80082d6:	617b      	str	r3, [r7, #20]
  uint32_t cllr_offset = NodeInfo->cllr_offset;
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	613b      	str	r3, [r7, #16]

  /* Find last node in queue */
  if (pNode ==  NULL)
 80082de:	68bb      	ldr	r3, [r7, #8]
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d142      	bne.n	800836a <DMA_List_FindNode+0xaa>
  {
    /* Check that previous node is linked to the selected queue */
    while (node_idx < pQList->NodeNumber)
 80082e4:	e01d      	b.n	8008322 <DMA_List_FindNode+0x62>
    {
      /* Get head node address */
      if (node_idx == 0U)
 80082e6:	69fb      	ldr	r3, [r7, #28]
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d107      	bne.n	80082fc <DMA_List_FindNode+0x3c>
      {
        currentnode_address = (uint32_t)pQList->Head & DMA_CLLR_LA;
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	461a      	mov	r2, r3
 80082f2:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 80082f6:	4013      	ands	r3, r2
 80082f8:	61bb      	str	r3, [r7, #24]
 80082fa:	e00f      	b.n	800831c <DMA_List_FindNode+0x5c>
      }
      /* Calculate nodes addresses */
      else
      {
        previousnode_address = currentnode_address;
 80082fc:	69bb      	ldr	r3, [r7, #24]
 80082fe:	617b      	str	r3, [r7, #20]
        currentnode_address =
          ((DMA_NodeTypeDef *)(currentnode_address +
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	0c1b      	lsrs	r3, r3, #16
 8008306:	041b      	lsls	r3, r3, #16
          ((DMA_NodeTypeDef *)(currentnode_address +
 8008308:	69ba      	ldr	r2, [r7, #24]
 800830a:	4413      	add	r3, r2
 800830c:	461a      	mov	r2, r3
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 800830e:	693b      	ldr	r3, [r7, #16]
 8008310:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
        currentnode_address =
 8008314:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 8008318:	4013      	ands	r3, r2
 800831a:	61bb      	str	r3, [r7, #24]
      }

      /* Increment node index */
      node_idx++;
 800831c:	69fb      	ldr	r3, [r7, #28]
 800831e:	3301      	adds	r3, #1
 8008320:	61fb      	str	r3, [r7, #28]
    while (node_idx < pQList->NodeNumber)
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	689b      	ldr	r3, [r3, #8]
 8008326:	69fa      	ldr	r2, [r7, #28]
 8008328:	429a      	cmp	r2, r3
 800832a:	d3dc      	bcc.n	80082e6 <DMA_List_FindNode+0x26>
 800832c:	e029      	b.n	8008382 <DMA_List_FindNode+0xc2>
  {
    /* Check that previous node is linked to the selected queue */
    while ((node_idx < pQList->NodeNumber) && (currentnode_address != ((uint32_t)pNode & DMA_CLLR_LA)))
    {
      /* Get head node address */
      if (node_idx == 0U)
 800832e:	69fb      	ldr	r3, [r7, #28]
 8008330:	2b00      	cmp	r3, #0
 8008332:	d107      	bne.n	8008344 <DMA_List_FindNode+0x84>
      {
        currentnode_address = (uint32_t)pQList->Head & DMA_CLLR_LA;
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	461a      	mov	r2, r3
 800833a:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 800833e:	4013      	ands	r3, r2
 8008340:	61bb      	str	r3, [r7, #24]
 8008342:	e00f      	b.n	8008364 <DMA_List_FindNode+0xa4>
      }
      /* Calculate nodes addresses */
      else
      {
        previousnode_address = currentnode_address;
 8008344:	69bb      	ldr	r3, [r7, #24]
 8008346:	617b      	str	r3, [r7, #20]
        currentnode_address =
          ((DMA_NodeTypeDef *)(currentnode_address +
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	0c1b      	lsrs	r3, r3, #16
 800834e:	041b      	lsls	r3, r3, #16
          ((DMA_NodeTypeDef *)(currentnode_address +
 8008350:	69ba      	ldr	r2, [r7, #24]
 8008352:	4413      	add	r3, r2
 8008354:	461a      	mov	r2, r3
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 8008356:	693b      	ldr	r3, [r7, #16]
 8008358:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
        currentnode_address =
 800835c:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 8008360:	4013      	ands	r3, r2
 8008362:	61bb      	str	r3, [r7, #24]
      }

      /* Increment node index */
      node_idx++;
 8008364:	69fb      	ldr	r3, [r7, #28]
 8008366:	3301      	adds	r3, #1
 8008368:	61fb      	str	r3, [r7, #28]
    while ((node_idx < pQList->NodeNumber) && (currentnode_address != ((uint32_t)pNode & DMA_CLLR_LA)))
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	689b      	ldr	r3, [r3, #8]
 800836e:	69fa      	ldr	r2, [r7, #28]
 8008370:	429a      	cmp	r2, r3
 8008372:	d206      	bcs.n	8008382 <DMA_List_FindNode+0xc2>
 8008374:	68ba      	ldr	r2, [r7, #8]
 8008376:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 800837a:	4013      	ands	r3, r2
 800837c:	69ba      	ldr	r2, [r7, #24]
 800837e:	429a      	cmp	r2, r3
 8008380:	d1d5      	bne.n	800832e <DMA_List_FindNode+0x6e>
    }
  }

  /* Check stored address */
  if (pNode != NULL)
 8008382:	68bb      	ldr	r3, [r7, #8]
 8008384:	2b00      	cmp	r3, #0
 8008386:	d008      	beq.n	800839a <DMA_List_FindNode+0xda>
  {
    if (currentnode_address != ((uint32_t)pNode & DMA_CLLR_LA))
 8008388:	68ba      	ldr	r2, [r7, #8]
 800838a:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 800838e:	4013      	ands	r3, r2
 8008390:	69ba      	ldr	r2, [r7, #24]
 8008392:	429a      	cmp	r2, r3
 8008394:	d001      	beq.n	800839a <DMA_List_FindNode+0xda>
    {
      return 1U;
 8008396:	2301      	movs	r3, #1
 8008398:	e02b      	b.n	80083f2 <DMA_List_FindNode+0x132>
    }
  }

  /* Update current node position */
  NodeInfo->currentnode_pos = node_idx;
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	69fa      	ldr	r2, [r7, #28]
 800839e:	609a      	str	r2, [r3, #8]

  /* Update previous node address */
  NodeInfo->previousnode_addr = previousnode_address | ((uint32_t)pQList->Head & DMA_CLBAR_LBA);
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	0c1b      	lsrs	r3, r3, #16
 80083a6:	041b      	lsls	r3, r3, #16
 80083a8:	697a      	ldr	r2, [r7, #20]
 80083aa:	431a      	orrs	r2, r3
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	605a      	str	r2, [r3, #4]

  /* Update current node address */
  NodeInfo->currentnode_addr = currentnode_address | ((uint32_t)pQList->Head & DMA_CLBAR_LBA);
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	0c1b      	lsrs	r3, r3, #16
 80083b6:	041b      	lsls	r3, r3, #16
 80083b8:	69ba      	ldr	r2, [r7, #24]
 80083ba:	431a      	orrs	r2, r3
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	60da      	str	r2, [r3, #12]

  /* Update next node address */
  if (((DMA_NodeTypeDef *)NodeInfo->currentnode_addr)->LinkRegisters[cllr_offset] != 0U)
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	68db      	ldr	r3, [r3, #12]
 80083c4:	461a      	mov	r2, r3
 80083c6:	693b      	ldr	r3, [r7, #16]
 80083c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d00f      	beq.n	80083f0 <DMA_List_FindNode+0x130>
  {
    NodeInfo->nextnode_addr = (((DMA_NodeTypeDef *)NodeInfo->currentnode_addr)->LinkRegisters[cllr_offset] &
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	68db      	ldr	r3, [r3, #12]
 80083d4:	461a      	mov	r2, r3
 80083d6:	693b      	ldr	r3, [r7, #16]
 80083d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80083dc:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 80083e0:	401a      	ands	r2, r3
                               DMA_CLLR_LA) | ((uint32_t)pQList->Head & DMA_CLBAR_LBA);
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	0c1b      	lsrs	r3, r3, #16
 80083e8:	041b      	lsls	r3, r3, #16
 80083ea:	431a      	orrs	r2, r3
    NodeInfo->nextnode_addr = (((DMA_NodeTypeDef *)NodeInfo->currentnode_addr)->LinkRegisters[cllr_offset] &
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	611a      	str	r2, [r3, #16]
  }

  return 0U;
 80083f0:	2300      	movs	r3, #0
}
 80083f2:	4618      	mov	r0, r3
 80083f4:	3724      	adds	r7, #36	; 0x24
 80083f6:	46bd      	mov	sp, r7
 80083f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083fc:	4770      	bx	lr
	...

08008400 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8008400:	b480      	push	{r7}
 8008402:	b089      	sub	sp, #36	; 0x24
 8008404:	af00      	add	r7, sp, #0
 8008406:	6078      	str	r0, [r7, #4]
 8008408:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 800840a:	2300      	movs	r3, #0
 800840c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8008412:	e1ba      	b.n	800878a <HAL_GPIO_Init+0x38a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8008414:	683b      	ldr	r3, [r7, #0]
 8008416:	681a      	ldr	r2, [r3, #0]
 8008418:	2101      	movs	r1, #1
 800841a:	697b      	ldr	r3, [r7, #20]
 800841c:	fa01 f303 	lsl.w	r3, r1, r3
 8008420:	4013      	ands	r3, r2
 8008422:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 8008424:	697b      	ldr	r3, [r7, #20]
 8008426:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	2b00      	cmp	r3, #0
 800842c:	f000 81aa 	beq.w	8008784 <HAL_GPIO_Init+0x384>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	4a55      	ldr	r2, [pc, #340]	; (8008588 <HAL_GPIO_Init+0x188>)
 8008434:	4293      	cmp	r3, r2
 8008436:	d15d      	bne.n	80084f4 <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 800843e:	2201      	movs	r2, #1
 8008440:	697b      	ldr	r3, [r7, #20]
 8008442:	fa02 f303 	lsl.w	r3, r2, r3
 8008446:	43db      	mvns	r3, r3
 8008448:	69fa      	ldr	r2, [r7, #28]
 800844a:	4013      	ands	r3, r2
 800844c:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 800844e:	683b      	ldr	r3, [r7, #0]
 8008450:	685b      	ldr	r3, [r3, #4]
 8008452:	f003 0201 	and.w	r2, r3, #1
 8008456:	697b      	ldr	r3, [r7, #20]
 8008458:	fa02 f303 	lsl.w	r3, r2, r3
 800845c:	69fa      	ldr	r2, [r7, #28]
 800845e:	4313      	orrs	r3, r2
 8008460:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	69fa      	ldr	r2, [r7, #28]
 8008466:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 8008468:	4a48      	ldr	r2, [pc, #288]	; (800858c <HAL_GPIO_Init+0x18c>)
 800846a:	697b      	ldr	r3, [r7, #20]
 800846c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008470:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 8008472:	4a46      	ldr	r2, [pc, #280]	; (800858c <HAL_GPIO_Init+0x18c>)
 8008474:	697b      	ldr	r3, [r7, #20]
 8008476:	00db      	lsls	r3, r3, #3
 8008478:	4413      	add	r3, r2
 800847a:	685b      	ldr	r3, [r3, #4]
 800847c:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 800847e:	69bb      	ldr	r3, [r7, #24]
 8008480:	08da      	lsrs	r2, r3, #3
 8008482:	693b      	ldr	r3, [r7, #16]
 8008484:	3208      	adds	r2, #8
 8008486:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800848a:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 800848c:	69bb      	ldr	r3, [r7, #24]
 800848e:	f003 0307 	and.w	r3, r3, #7
 8008492:	009b      	lsls	r3, r3, #2
 8008494:	220f      	movs	r2, #15
 8008496:	fa02 f303 	lsl.w	r3, r2, r3
 800849a:	43db      	mvns	r3, r3
 800849c:	69fa      	ldr	r2, [r7, #28]
 800849e:	4013      	ands	r3, r2
 80084a0:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 80084a2:	69bb      	ldr	r3, [r7, #24]
 80084a4:	f003 0307 	and.w	r3, r3, #7
 80084a8:	009b      	lsls	r3, r3, #2
 80084aa:	220b      	movs	r2, #11
 80084ac:	fa02 f303 	lsl.w	r3, r2, r3
 80084b0:	69fa      	ldr	r2, [r7, #28]
 80084b2:	4313      	orrs	r3, r2
 80084b4:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 80084b6:	69bb      	ldr	r3, [r7, #24]
 80084b8:	08da      	lsrs	r2, r3, #3
 80084ba:	693b      	ldr	r3, [r7, #16]
 80084bc:	3208      	adds	r2, #8
 80084be:	69f9      	ldr	r1, [r7, #28]
 80084c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 80084c4:	693b      	ldr	r3, [r7, #16]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 80084ca:	69bb      	ldr	r3, [r7, #24]
 80084cc:	005b      	lsls	r3, r3, #1
 80084ce:	2203      	movs	r2, #3
 80084d0:	fa02 f303 	lsl.w	r3, r2, r3
 80084d4:	43db      	mvns	r3, r3
 80084d6:	69fa      	ldr	r2, [r7, #28]
 80084d8:	4013      	ands	r3, r2
 80084da:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * 2U));
 80084dc:	69bb      	ldr	r3, [r7, #24]
 80084de:	005b      	lsls	r3, r3, #1
 80084e0:	2202      	movs	r2, #2
 80084e2:	fa02 f303 	lsl.w	r3, r2, r3
 80084e6:	69fa      	ldr	r2, [r7, #28]
 80084e8:	4313      	orrs	r3, r2
 80084ea:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 80084ec:	693b      	ldr	r3, [r7, #16]
 80084ee:	69fa      	ldr	r2, [r7, #28]
 80084f0:	601a      	str	r2, [r3, #0]
 80084f2:	e067      	b.n	80085c4 <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80084f4:	683b      	ldr	r3, [r7, #0]
 80084f6:	685b      	ldr	r3, [r3, #4]
 80084f8:	2b02      	cmp	r3, #2
 80084fa:	d003      	beq.n	8008504 <HAL_GPIO_Init+0x104>
 80084fc:	683b      	ldr	r3, [r7, #0]
 80084fe:	685b      	ldr	r3, [r3, #4]
 8008500:	2b12      	cmp	r3, #18
 8008502:	d145      	bne.n	8008590 <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8008504:	697b      	ldr	r3, [r7, #20]
 8008506:	08da      	lsrs	r2, r3, #3
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	3208      	adds	r2, #8
 800850c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008510:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * 4U));
 8008512:	697b      	ldr	r3, [r7, #20]
 8008514:	f003 0307 	and.w	r3, r3, #7
 8008518:	009b      	lsls	r3, r3, #2
 800851a:	220f      	movs	r2, #15
 800851c:	fa02 f303 	lsl.w	r3, r2, r3
 8008520:	43db      	mvns	r3, r3
 8008522:	69fa      	ldr	r2, [r7, #28]
 8008524:	4013      	ands	r3, r2
 8008526:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 8008528:	683b      	ldr	r3, [r7, #0]
 800852a:	691b      	ldr	r3, [r3, #16]
 800852c:	f003 020f 	and.w	r2, r3, #15
 8008530:	697b      	ldr	r3, [r7, #20]
 8008532:	f003 0307 	and.w	r3, r3, #7
 8008536:	009b      	lsls	r3, r3, #2
 8008538:	fa02 f303 	lsl.w	r3, r2, r3
 800853c:	69fa      	ldr	r2, [r7, #28]
 800853e:	4313      	orrs	r3, r2
 8008540:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 8008542:	697b      	ldr	r3, [r7, #20]
 8008544:	08da      	lsrs	r2, r3, #3
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	3208      	adds	r2, #8
 800854a:	69f9      	ldr	r1, [r7, #28]
 800854c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8008550:	693b      	ldr	r3, [r7, #16]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 8008556:	69bb      	ldr	r3, [r7, #24]
 8008558:	005b      	lsls	r3, r3, #1
 800855a:	2203      	movs	r2, #3
 800855c:	fa02 f303 	lsl.w	r3, r2, r3
 8008560:	43db      	mvns	r3, r3
 8008562:	69fa      	ldr	r2, [r7, #28]
 8008564:	4013      	ands	r3, r2
 8008566:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 8008568:	683b      	ldr	r3, [r7, #0]
 800856a:	685b      	ldr	r3, [r3, #4]
 800856c:	f003 0203 	and.w	r2, r3, #3
 8008570:	69bb      	ldr	r3, [r7, #24]
 8008572:	005b      	lsls	r3, r3, #1
 8008574:	fa02 f303 	lsl.w	r3, r2, r3
 8008578:	69fa      	ldr	r2, [r7, #28]
 800857a:	4313      	orrs	r3, r2
 800857c:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 800857e:	693b      	ldr	r3, [r7, #16]
 8008580:	69fa      	ldr	r2, [r7, #28]
 8008582:	601a      	str	r2, [r3, #0]
 8008584:	e01e      	b.n	80085c4 <HAL_GPIO_Init+0x1c4>
 8008586:	bf00      	nop
 8008588:	46020000 	.word	0x46020000
 800858c:	08013ad4 	.word	0x08013ad4
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 8008590:	693b      	ldr	r3, [r7, #16]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 8008596:	69bb      	ldr	r3, [r7, #24]
 8008598:	005b      	lsls	r3, r3, #1
 800859a:	2203      	movs	r2, #3
 800859c:	fa02 f303 	lsl.w	r3, r2, r3
 80085a0:	43db      	mvns	r3, r3
 80085a2:	69fa      	ldr	r2, [r7, #28]
 80085a4:	4013      	ands	r3, r2
 80085a6:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 80085a8:	683b      	ldr	r3, [r7, #0]
 80085aa:	685b      	ldr	r3, [r3, #4]
 80085ac:	f003 0203 	and.w	r2, r3, #3
 80085b0:	69bb      	ldr	r3, [r7, #24]
 80085b2:	005b      	lsls	r3, r3, #1
 80085b4:	fa02 f303 	lsl.w	r3, r2, r3
 80085b8:	69fa      	ldr	r2, [r7, #28]
 80085ba:	4313      	orrs	r3, r2
 80085bc:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 80085be:	693b      	ldr	r3, [r7, #16]
 80085c0:	69fa      	ldr	r2, [r7, #28]
 80085c2:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80085c4:	683b      	ldr	r3, [r7, #0]
 80085c6:	685b      	ldr	r3, [r3, #4]
 80085c8:	2b01      	cmp	r3, #1
 80085ca:	d00b      	beq.n	80085e4 <HAL_GPIO_Init+0x1e4>
 80085cc:	683b      	ldr	r3, [r7, #0]
 80085ce:	685b      	ldr	r3, [r3, #4]
 80085d0:	2b02      	cmp	r3, #2
 80085d2:	d007      	beq.n	80085e4 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80085d4:	683b      	ldr	r3, [r7, #0]
 80085d6:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80085d8:	2b11      	cmp	r3, #17
 80085da:	d003      	beq.n	80085e4 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80085dc:	683b      	ldr	r3, [r7, #0]
 80085de:	685b      	ldr	r3, [r3, #4]
 80085e0:	2b12      	cmp	r3, #18
 80085e2:	d130      	bne.n	8008646 <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 80085e4:	693b      	ldr	r3, [r7, #16]
 80085e6:	689b      	ldr	r3, [r3, #8]
 80085e8:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * 2U));
 80085ea:	69bb      	ldr	r3, [r7, #24]
 80085ec:	005b      	lsls	r3, r3, #1
 80085ee:	2203      	movs	r2, #3
 80085f0:	fa02 f303 	lsl.w	r3, r2, r3
 80085f4:	43db      	mvns	r3, r3
 80085f6:	69fa      	ldr	r2, [r7, #28]
 80085f8:	4013      	ands	r3, r2
 80085fa:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * 2U));
 80085fc:	683b      	ldr	r3, [r7, #0]
 80085fe:	68da      	ldr	r2, [r3, #12]
 8008600:	69bb      	ldr	r3, [r7, #24]
 8008602:	005b      	lsls	r3, r3, #1
 8008604:	fa02 f303 	lsl.w	r3, r2, r3
 8008608:	69fa      	ldr	r2, [r7, #28]
 800860a:	4313      	orrs	r3, r2
 800860c:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 800860e:	693b      	ldr	r3, [r7, #16]
 8008610:	69fa      	ldr	r2, [r7, #28]
 8008612:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 8008614:	693b      	ldr	r3, [r7, #16]
 8008616:	685b      	ldr	r3, [r3, #4]
 8008618:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 800861a:	2201      	movs	r2, #1
 800861c:	69bb      	ldr	r3, [r7, #24]
 800861e:	fa02 f303 	lsl.w	r3, r2, r3
 8008622:	43db      	mvns	r3, r3
 8008624:	69fa      	ldr	r2, [r7, #28]
 8008626:	4013      	ands	r3, r2
 8008628:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 800862a:	683b      	ldr	r3, [r7, #0]
 800862c:	685b      	ldr	r3, [r3, #4]
 800862e:	091b      	lsrs	r3, r3, #4
 8008630:	f003 0201 	and.w	r2, r3, #1
 8008634:	69bb      	ldr	r3, [r7, #24]
 8008636:	fa02 f303 	lsl.w	r3, r2, r3
 800863a:	69fa      	ldr	r2, [r7, #28]
 800863c:	4313      	orrs	r3, r2
 800863e:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 8008640:	693b      	ldr	r3, [r7, #16]
 8008642:	69fa      	ldr	r2, [r7, #28]
 8008644:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8008646:	683b      	ldr	r3, [r7, #0]
 8008648:	685b      	ldr	r3, [r3, #4]
 800864a:	2b03      	cmp	r3, #3
 800864c:	d017      	beq.n	800867e <HAL_GPIO_Init+0x27e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 800864e:	693b      	ldr	r3, [r7, #16]
 8008650:	68db      	ldr	r3, [r3, #12]
 8008652:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * 2U));
 8008654:	69bb      	ldr	r3, [r7, #24]
 8008656:	005b      	lsls	r3, r3, #1
 8008658:	2203      	movs	r2, #3
 800865a:	fa02 f303 	lsl.w	r3, r2, r3
 800865e:	43db      	mvns	r3, r3
 8008660:	69fa      	ldr	r2, [r7, #28]
 8008662:	4013      	ands	r3, r2
 8008664:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * 2U));
 8008666:	683b      	ldr	r3, [r7, #0]
 8008668:	689a      	ldr	r2, [r3, #8]
 800866a:	69bb      	ldr	r3, [r7, #24]
 800866c:	005b      	lsls	r3, r3, #1
 800866e:	fa02 f303 	lsl.w	r3, r2, r3
 8008672:	69fa      	ldr	r2, [r7, #28]
 8008674:	4313      	orrs	r3, r2
 8008676:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 8008678:	693b      	ldr	r3, [r7, #16]
 800867a:	69fa      	ldr	r2, [r7, #28]
 800867c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800867e:	683b      	ldr	r3, [r7, #0]
 8008680:	685b      	ldr	r3, [r3, #4]
 8008682:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008686:	2b00      	cmp	r3, #0
 8008688:	d07c      	beq.n	8008784 <HAL_GPIO_Init+0x384>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 800868a:	4a47      	ldr	r2, [pc, #284]	; (80087a8 <HAL_GPIO_Init+0x3a8>)
 800868c:	697b      	ldr	r3, [r7, #20]
 800868e:	089b      	lsrs	r3, r3, #2
 8008690:	3318      	adds	r3, #24
 8008692:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008696:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 8008698:	697b      	ldr	r3, [r7, #20]
 800869a:	f003 0303 	and.w	r3, r3, #3
 800869e:	00db      	lsls	r3, r3, #3
 80086a0:	220f      	movs	r2, #15
 80086a2:	fa02 f303 	lsl.w	r3, r2, r3
 80086a6:	43db      	mvns	r3, r3
 80086a8:	69fa      	ldr	r2, [r7, #28]
 80086aa:	4013      	ands	r3, r2
 80086ac:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	0a9a      	lsrs	r2, r3, #10
 80086b2:	4b3e      	ldr	r3, [pc, #248]	; (80087ac <HAL_GPIO_Init+0x3ac>)
 80086b4:	4013      	ands	r3, r2
 80086b6:	697a      	ldr	r2, [r7, #20]
 80086b8:	f002 0203 	and.w	r2, r2, #3
 80086bc:	00d2      	lsls	r2, r2, #3
 80086be:	4093      	lsls	r3, r2
 80086c0:	69fa      	ldr	r2, [r7, #28]
 80086c2:	4313      	orrs	r3, r2
 80086c4:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 80086c6:	4938      	ldr	r1, [pc, #224]	; (80087a8 <HAL_GPIO_Init+0x3a8>)
 80086c8:	697b      	ldr	r3, [r7, #20]
 80086ca:	089b      	lsrs	r3, r3, #2
 80086cc:	3318      	adds	r3, #24
 80086ce:	69fa      	ldr	r2, [r7, #28]
 80086d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 80086d4:	4b34      	ldr	r3, [pc, #208]	; (80087a8 <HAL_GPIO_Init+0x3a8>)
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	43db      	mvns	r3, r3
 80086de:	69fa      	ldr	r2, [r7, #28]
 80086e0:	4013      	ands	r3, r2
 80086e2:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80086e4:	683b      	ldr	r3, [r7, #0]
 80086e6:	685b      	ldr	r3, [r3, #4]
 80086e8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d003      	beq.n	80086f8 <HAL_GPIO_Init+0x2f8>
        {
          tmp |= iocurrent;
 80086f0:	69fa      	ldr	r2, [r7, #28]
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	4313      	orrs	r3, r2
 80086f6:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 80086f8:	4a2b      	ldr	r2, [pc, #172]	; (80087a8 <HAL_GPIO_Init+0x3a8>)
 80086fa:	69fb      	ldr	r3, [r7, #28]
 80086fc:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 80086fe:	4b2a      	ldr	r3, [pc, #168]	; (80087a8 <HAL_GPIO_Init+0x3a8>)
 8008700:	685b      	ldr	r3, [r3, #4]
 8008702:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	43db      	mvns	r3, r3
 8008708:	69fa      	ldr	r2, [r7, #28]
 800870a:	4013      	ands	r3, r2
 800870c:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800870e:	683b      	ldr	r3, [r7, #0]
 8008710:	685b      	ldr	r3, [r3, #4]
 8008712:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008716:	2b00      	cmp	r3, #0
 8008718:	d003      	beq.n	8008722 <HAL_GPIO_Init+0x322>
        {
          tmp |= iocurrent;
 800871a:	69fa      	ldr	r2, [r7, #28]
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	4313      	orrs	r3, r2
 8008720:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 8008722:	4a21      	ldr	r2, [pc, #132]	; (80087a8 <HAL_GPIO_Init+0x3a8>)
 8008724:	69fb      	ldr	r3, [r7, #28]
 8008726:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8008728:	4b1f      	ldr	r3, [pc, #124]	; (80087a8 <HAL_GPIO_Init+0x3a8>)
 800872a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800872e:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	43db      	mvns	r3, r3
 8008734:	69fa      	ldr	r2, [r7, #28]
 8008736:	4013      	ands	r3, r2
 8008738:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800873a:	683b      	ldr	r3, [r7, #0]
 800873c:	685b      	ldr	r3, [r3, #4]
 800873e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008742:	2b00      	cmp	r3, #0
 8008744:	d003      	beq.n	800874e <HAL_GPIO_Init+0x34e>
        {
          tmp |= iocurrent;
 8008746:	69fa      	ldr	r2, [r7, #28]
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	4313      	orrs	r3, r2
 800874c:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 800874e:	4a16      	ldr	r2, [pc, #88]	; (80087a8 <HAL_GPIO_Init+0x3a8>)
 8008750:	69fb      	ldr	r3, [r7, #28]
 8008752:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        tmp = EXTI->IMR1;
 8008756:	4b14      	ldr	r3, [pc, #80]	; (80087a8 <HAL_GPIO_Init+0x3a8>)
 8008758:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800875c:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	43db      	mvns	r3, r3
 8008762:	69fa      	ldr	r2, [r7, #28]
 8008764:	4013      	ands	r3, r2
 8008766:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8008768:	683b      	ldr	r3, [r7, #0]
 800876a:	685b      	ldr	r3, [r3, #4]
 800876c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008770:	2b00      	cmp	r3, #0
 8008772:	d003      	beq.n	800877c <HAL_GPIO_Init+0x37c>
        {
          tmp |= iocurrent;
 8008774:	69fa      	ldr	r2, [r7, #28]
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	4313      	orrs	r3, r2
 800877a:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 800877c:	4a0a      	ldr	r2, [pc, #40]	; (80087a8 <HAL_GPIO_Init+0x3a8>)
 800877e:	69fb      	ldr	r3, [r7, #28]
 8008780:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      }
    }
    position++;
 8008784:	697b      	ldr	r3, [r7, #20]
 8008786:	3301      	adds	r3, #1
 8008788:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 800878a:	683b      	ldr	r3, [r7, #0]
 800878c:	681a      	ldr	r2, [r3, #0]
 800878e:	697b      	ldr	r3, [r7, #20]
 8008790:	fa22 f303 	lsr.w	r3, r2, r3
 8008794:	2b00      	cmp	r3, #0
 8008796:	f47f ae3d 	bne.w	8008414 <HAL_GPIO_Init+0x14>
  }
}
 800879a:	bf00      	nop
 800879c:	bf00      	nop
 800879e:	3724      	adds	r7, #36	; 0x24
 80087a0:	46bd      	mov	sp, r7
 80087a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087a6:	4770      	bx	lr
 80087a8:	46022000 	.word	0x46022000
 80087ac:	002f7f7f 	.word	0x002f7f7f

080087b0 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80087b0:	b480      	push	{r7}
 80087b2:	b089      	sub	sp, #36	; 0x24
 80087b4:	af00      	add	r7, sp, #0
 80087b6:	6078      	str	r0, [r7, #4]
 80087b8:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 80087ba:	2300      	movs	r3, #0
 80087bc:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	617b      	str	r3, [r7, #20]

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0U)
 80087c2:	e0bc      	b.n	800893e <HAL_GPIO_DeInit+0x18e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1UL << position);
 80087c4:	2201      	movs	r2, #1
 80087c6:	69bb      	ldr	r3, [r7, #24]
 80087c8:	fa02 f303 	lsl.w	r3, r2, r3
 80087cc:	683a      	ldr	r2, [r7, #0]
 80087ce:	4013      	ands	r3, r2
 80087d0:	613b      	str	r3, [r7, #16]

    /*Save Pin Position */
    pin_position = position;
 80087d2:	69bb      	ldr	r3, [r7, #24]
 80087d4:	61fb      	str	r3, [r7, #28]

    if (iocurrent != 0U)
 80087d6:	693b      	ldr	r3, [r7, #16]
 80087d8:	2b00      	cmp	r3, #0
 80087da:	f000 80ad 	beq.w	8008938 <HAL_GPIO_DeInit+0x188>
    {
      /* In case of LPGPIO port selected */
      if (GPIOx == LPGPIO1)
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	4a5e      	ldr	r2, [pc, #376]	; (800895c <HAL_GPIO_DeInit+0x1ac>)
 80087e2:	4293      	cmp	r3, r2
 80087e4:	d115      	bne.n	8008812 <HAL_GPIO_DeInit+0x62>
      {
        /* Configure LP/IO in Input Mode */
        p_gpio  = LPGPIO_Map[pin_position].GPIO_PORT;
 80087e6:	4a5e      	ldr	r2, [pc, #376]	; (8008960 <HAL_GPIO_DeInit+0x1b0>)
 80087e8:	69fb      	ldr	r3, [r7, #28]
 80087ea:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80087ee:	617b      	str	r3, [r7, #20]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 80087f0:	4a5b      	ldr	r2, [pc, #364]	; (8008960 <HAL_GPIO_DeInit+0x1b0>)
 80087f2:	69bb      	ldr	r3, [r7, #24]
 80087f4:	00db      	lsls	r3, r3, #3
 80087f6:	4413      	add	r3, r2
 80087f8:	685b      	ldr	r3, [r3, #4]
 80087fa:	61fb      	str	r3, [r7, #28]
        LPGPIO1->MODER &= ~(1U << pin_position);
 80087fc:	4b57      	ldr	r3, [pc, #348]	; (800895c <HAL_GPIO_DeInit+0x1ac>)
 80087fe:	681a      	ldr	r2, [r3, #0]
 8008800:	2101      	movs	r1, #1
 8008802:	69fb      	ldr	r3, [r7, #28]
 8008804:	fa01 f303 	lsl.w	r3, r1, r3
 8008808:	43db      	mvns	r3, r3
 800880a:	4954      	ldr	r1, [pc, #336]	; (800895c <HAL_GPIO_DeInit+0x1ac>)
 800880c:	4013      	ands	r3, r2
 800880e:	600b      	str	r3, [r1, #0]
 8008810:	e053      	b.n	80088ba <HAL_GPIO_DeInit+0x10a>
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /*------------------------- EXTI Mode Configuration --------------------*/
        /* Clear the External Interrupt or Event for the current IO */
        tmp = EXTI->EXTICR[position >> 2U];
 8008812:	4a54      	ldr	r2, [pc, #336]	; (8008964 <HAL_GPIO_DeInit+0x1b4>)
 8008814:	69bb      	ldr	r3, [r7, #24]
 8008816:	089b      	lsrs	r3, r3, #2
 8008818:	3318      	adds	r3, #24
 800881a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800881e:	60fb      	str	r3, [r7, #12]
        tmp &= ((0x0FUL) << (8U * (position & 0x03U)));
 8008820:	69bb      	ldr	r3, [r7, #24]
 8008822:	f003 0303 	and.w	r3, r3, #3
 8008826:	00db      	lsls	r3, r3, #3
 8008828:	220f      	movs	r2, #15
 800882a:	fa02 f303 	lsl.w	r3, r2, r3
 800882e:	68fa      	ldr	r2, [r7, #12]
 8008830:	4013      	ands	r3, r2
 8008832:	60fb      	str	r3, [r7, #12]
        if (tmp == (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U))))
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	0a9a      	lsrs	r2, r3, #10
 8008838:	4b4b      	ldr	r3, [pc, #300]	; (8008968 <HAL_GPIO_DeInit+0x1b8>)
 800883a:	4013      	ands	r3, r2
 800883c:	69ba      	ldr	r2, [r7, #24]
 800883e:	f002 0203 	and.w	r2, r2, #3
 8008842:	00d2      	lsls	r2, r2, #3
 8008844:	4093      	lsls	r3, r2
 8008846:	68fa      	ldr	r2, [r7, #12]
 8008848:	429a      	cmp	r2, r3
 800884a:	d136      	bne.n	80088ba <HAL_GPIO_DeInit+0x10a>
        {
          /* Clear EXTI line configuration */
          EXTI->IMR1 &= ~(iocurrent);
 800884c:	4b45      	ldr	r3, [pc, #276]	; (8008964 <HAL_GPIO_DeInit+0x1b4>)
 800884e:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8008852:	693b      	ldr	r3, [r7, #16]
 8008854:	43db      	mvns	r3, r3
 8008856:	4943      	ldr	r1, [pc, #268]	; (8008964 <HAL_GPIO_DeInit+0x1b4>)
 8008858:	4013      	ands	r3, r2
 800885a:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
          EXTI->EMR1 &= ~(iocurrent);
 800885e:	4b41      	ldr	r3, [pc, #260]	; (8008964 <HAL_GPIO_DeInit+0x1b4>)
 8008860:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8008864:	693b      	ldr	r3, [r7, #16]
 8008866:	43db      	mvns	r3, r3
 8008868:	493e      	ldr	r1, [pc, #248]	; (8008964 <HAL_GPIO_DeInit+0x1b4>)
 800886a:	4013      	ands	r3, r2
 800886c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

          /* Clear Rising Falling edge configuration */
          EXTI->RTSR1 &= ~(iocurrent);
 8008870:	4b3c      	ldr	r3, [pc, #240]	; (8008964 <HAL_GPIO_DeInit+0x1b4>)
 8008872:	681a      	ldr	r2, [r3, #0]
 8008874:	693b      	ldr	r3, [r7, #16]
 8008876:	43db      	mvns	r3, r3
 8008878:	493a      	ldr	r1, [pc, #232]	; (8008964 <HAL_GPIO_DeInit+0x1b4>)
 800887a:	4013      	ands	r3, r2
 800887c:	600b      	str	r3, [r1, #0]
          EXTI->FTSR1 &= ~(iocurrent);
 800887e:	4b39      	ldr	r3, [pc, #228]	; (8008964 <HAL_GPIO_DeInit+0x1b4>)
 8008880:	685a      	ldr	r2, [r3, #4]
 8008882:	693b      	ldr	r3, [r7, #16]
 8008884:	43db      	mvns	r3, r3
 8008886:	4937      	ldr	r1, [pc, #220]	; (8008964 <HAL_GPIO_DeInit+0x1b4>)
 8008888:	4013      	ands	r3, r2
 800888a:	604b      	str	r3, [r1, #4]

          tmp = (0x0FUL) << (8U * (position & 0x03U));
 800888c:	69bb      	ldr	r3, [r7, #24]
 800888e:	f003 0303 	and.w	r3, r3, #3
 8008892:	00db      	lsls	r3, r3, #3
 8008894:	220f      	movs	r2, #15
 8008896:	fa02 f303 	lsl.w	r3, r2, r3
 800889a:	60fb      	str	r3, [r7, #12]
          EXTI->EXTICR[position >> 2U] &= ~tmp;
 800889c:	4a31      	ldr	r2, [pc, #196]	; (8008964 <HAL_GPIO_DeInit+0x1b4>)
 800889e:	69bb      	ldr	r3, [r7, #24]
 80088a0:	089b      	lsrs	r3, r3, #2
 80088a2:	3318      	adds	r3, #24
 80088a4:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	43da      	mvns	r2, r3
 80088ac:	482d      	ldr	r0, [pc, #180]	; (8008964 <HAL_GPIO_DeInit+0x1b4>)
 80088ae:	69bb      	ldr	r3, [r7, #24]
 80088b0:	089b      	lsrs	r3, r3, #2
 80088b2:	400a      	ands	r2, r1
 80088b4:	3318      	adds	r3, #24
 80088b6:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
        }
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      p_gpio->MODER |= (GPIO_MODER_MODE0 << (pin_position * 2U));
 80088ba:	697b      	ldr	r3, [r7, #20]
 80088bc:	681a      	ldr	r2, [r3, #0]
 80088be:	69fb      	ldr	r3, [r7, #28]
 80088c0:	005b      	lsls	r3, r3, #1
 80088c2:	2103      	movs	r1, #3
 80088c4:	fa01 f303 	lsl.w	r3, r1, r3
 80088c8:	431a      	orrs	r2, r3
 80088ca:	697b      	ldr	r3, [r7, #20]
 80088cc:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      p_gpio->AFR[pin_position >> 3U] &= ~(0x0FUL << ((pin_position & 0x07U) * 4U));
 80088ce:	69fb      	ldr	r3, [r7, #28]
 80088d0:	08da      	lsrs	r2, r3, #3
 80088d2:	697b      	ldr	r3, [r7, #20]
 80088d4:	3208      	adds	r2, #8
 80088d6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80088da:	69fb      	ldr	r3, [r7, #28]
 80088dc:	f003 0307 	and.w	r3, r3, #7
 80088e0:	009b      	lsls	r3, r3, #2
 80088e2:	220f      	movs	r2, #15
 80088e4:	fa02 f303 	lsl.w	r3, r2, r3
 80088e8:	43db      	mvns	r3, r3
 80088ea:	69fa      	ldr	r2, [r7, #28]
 80088ec:	08d2      	lsrs	r2, r2, #3
 80088ee:	4019      	ands	r1, r3
 80088f0:	697b      	ldr	r3, [r7, #20]
 80088f2:	3208      	adds	r2, #8
 80088f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      p_gpio->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * 2U));
 80088f8:	697b      	ldr	r3, [r7, #20]
 80088fa:	689a      	ldr	r2, [r3, #8]
 80088fc:	69fb      	ldr	r3, [r7, #28]
 80088fe:	005b      	lsls	r3, r3, #1
 8008900:	2103      	movs	r1, #3
 8008902:	fa01 f303 	lsl.w	r3, r1, r3
 8008906:	43db      	mvns	r3, r3
 8008908:	401a      	ands	r2, r3
 800890a:	697b      	ldr	r3, [r7, #20]
 800890c:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      p_gpio->OTYPER  &= ~(GPIO_OTYPER_OT0 << pin_position);
 800890e:	697b      	ldr	r3, [r7, #20]
 8008910:	685a      	ldr	r2, [r3, #4]
 8008912:	2101      	movs	r1, #1
 8008914:	69fb      	ldr	r3, [r7, #28]
 8008916:	fa01 f303 	lsl.w	r3, r1, r3
 800891a:	43db      	mvns	r3, r3
 800891c:	401a      	ands	r2, r3
 800891e:	697b      	ldr	r3, [r7, #20]
 8008920:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      p_gpio->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (pin_position * 2U));
 8008922:	697b      	ldr	r3, [r7, #20]
 8008924:	68da      	ldr	r2, [r3, #12]
 8008926:	69fb      	ldr	r3, [r7, #28]
 8008928:	005b      	lsls	r3, r3, #1
 800892a:	2103      	movs	r1, #3
 800892c:	fa01 f303 	lsl.w	r3, r1, r3
 8008930:	43db      	mvns	r3, r3
 8008932:	401a      	ands	r2, r3
 8008934:	697b      	ldr	r3, [r7, #20]
 8008936:	60da      	str	r2, [r3, #12]
    }

    position++;
 8008938:	69bb      	ldr	r3, [r7, #24]
 800893a:	3301      	adds	r3, #1
 800893c:	61bb      	str	r3, [r7, #24]
  while ((GPIO_Pin >> position) != 0U)
 800893e:	683a      	ldr	r2, [r7, #0]
 8008940:	69bb      	ldr	r3, [r7, #24]
 8008942:	fa22 f303 	lsr.w	r3, r2, r3
 8008946:	2b00      	cmp	r3, #0
 8008948:	f47f af3c 	bne.w	80087c4 <HAL_GPIO_DeInit+0x14>
  }
}
 800894c:	bf00      	nop
 800894e:	bf00      	nop
 8008950:	3724      	adds	r7, #36	; 0x24
 8008952:	46bd      	mov	sp, r7
 8008954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008958:	4770      	bx	lr
 800895a:	bf00      	nop
 800895c:	46020000 	.word	0x46020000
 8008960:	08013ad4 	.word	0x08013ad4
 8008964:	46022000 	.word	0x46022000
 8008968:	002f7f7f 	.word	0x002f7f7f

0800896c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800896c:	b480      	push	{r7}
 800896e:	b085      	sub	sp, #20
 8008970:	af00      	add	r7, sp, #0
 8008972:	6078      	str	r0, [r7, #4]
 8008974:	460b      	mov	r3, r1
 8008976:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0U)
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	691a      	ldr	r2, [r3, #16]
 800897c:	887b      	ldrh	r3, [r7, #2]
 800897e:	4013      	ands	r3, r2
 8008980:	2b00      	cmp	r3, #0
 8008982:	d002      	beq.n	800898a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8008984:	2301      	movs	r3, #1
 8008986:	73fb      	strb	r3, [r7, #15]
 8008988:	e001      	b.n	800898e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800898a:	2300      	movs	r3, #0
 800898c:	73fb      	strb	r3, [r7, #15]
  }

  return bitstatus;
 800898e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008990:	4618      	mov	r0, r3
 8008992:	3714      	adds	r7, #20
 8008994:	46bd      	mov	sp, r7
 8008996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800899a:	4770      	bx	lr

0800899c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800899c:	b480      	push	{r7}
 800899e:	b083      	sub	sp, #12
 80089a0:	af00      	add	r7, sp, #0
 80089a2:	6078      	str	r0, [r7, #4]
 80089a4:	460b      	mov	r3, r1
 80089a6:	807b      	strh	r3, [r7, #2]
 80089a8:	4613      	mov	r3, r2
 80089aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80089ac:	787b      	ldrb	r3, [r7, #1]
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d003      	beq.n	80089ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80089b2:	887a      	ldrh	r2, [r7, #2]
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
  }
}
 80089b8:	e002      	b.n	80089c0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
 80089ba:	887a      	ldrh	r2, [r7, #2]
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	629a      	str	r2, [r3, #40]	; 0x28
}
 80089c0:	bf00      	nop
 80089c2:	370c      	adds	r7, #12
 80089c4:	46bd      	mov	sp, r7
 80089c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ca:	4770      	bx	lr

080089cc <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80089cc:	b480      	push	{r7}
 80089ce:	b085      	sub	sp, #20
 80089d0:	af00      	add	r7, sp, #0
 80089d2:	6078      	str	r0, [r7, #4]
 80089d4:	460b      	mov	r3, r1
 80089d6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	695b      	ldr	r3, [r3, #20]
 80089dc:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80089de:	887a      	ldrh	r2, [r7, #2]
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	4013      	ands	r3, r2
 80089e4:	041a      	lsls	r2, r3, #16
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	43d9      	mvns	r1, r3
 80089ea:	887b      	ldrh	r3, [r7, #2]
 80089ec:	400b      	ands	r3, r1
 80089ee:	431a      	orrs	r2, r3
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	619a      	str	r2, [r3, #24]
}
 80089f4:	bf00      	nop
 80089f6:	3714      	adds	r7, #20
 80089f8:	46bd      	mov	sp, r7
 80089fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089fe:	4770      	bx	lr

08008a00 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8008a00:	b580      	push	{r7, lr}
 8008a02:	b082      	sub	sp, #8
 8008a04:	af00      	add	r7, sp, #0
 8008a06:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d101      	bne.n	8008a12 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8008a0e:	2301      	movs	r3, #1
 8008a10:	e081      	b.n	8008b16 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008a18:	b2db      	uxtb	r3, r3
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d106      	bne.n	8008a2c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	2200      	movs	r2, #0
 8008a22:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8008a26:	6878      	ldr	r0, [r7, #4]
 8008a28:	f7fc fcf0 	bl	800540c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	2224      	movs	r2, #36	; 0x24
 8008a30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	681a      	ldr	r2, [r3, #0]
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	f022 0201 	bic.w	r2, r2, #1
 8008a42:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	685a      	ldr	r2, [r3, #4]
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8008a50:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	689a      	ldr	r2, [r3, #8]
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008a60:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	68db      	ldr	r3, [r3, #12]
 8008a66:	2b01      	cmp	r3, #1
 8008a68:	d107      	bne.n	8008a7a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	689a      	ldr	r2, [r3, #8]
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008a76:	609a      	str	r2, [r3, #8]
 8008a78:	e006      	b.n	8008a88 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	689a      	ldr	r2, [r3, #8]
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8008a86:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	68db      	ldr	r3, [r3, #12]
 8008a8c:	2b02      	cmp	r3, #2
 8008a8e:	d104      	bne.n	8008a9a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008a98:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	685b      	ldr	r3, [r3, #4]
 8008aa0:	687a      	ldr	r2, [r7, #4]
 8008aa2:	6812      	ldr	r2, [r2, #0]
 8008aa4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8008aa8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008aac:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	68da      	ldr	r2, [r3, #12]
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008abc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	691a      	ldr	r2, [r3, #16]
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	695b      	ldr	r3, [r3, #20]
 8008ac6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	699b      	ldr	r3, [r3, #24]
 8008ace:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	430a      	orrs	r2, r1
 8008ad6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	69d9      	ldr	r1, [r3, #28]
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	6a1a      	ldr	r2, [r3, #32]
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	430a      	orrs	r2, r1
 8008ae6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	681a      	ldr	r2, [r3, #0]
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	f042 0201 	orr.w	r2, r2, #1
 8008af6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	2200      	movs	r2, #0
 8008afc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	2220      	movs	r2, #32
 8008b02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	2200      	movs	r2, #0
 8008b0a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	2200      	movs	r2, #0
 8008b10:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8008b14:	2300      	movs	r3, #0
}
 8008b16:	4618      	mov	r0, r3
 8008b18:	3708      	adds	r7, #8
 8008b1a:	46bd      	mov	sp, r7
 8008b1c:	bd80      	pop	{r7, pc}

08008b1e <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8008b1e:	b580      	push	{r7, lr}
 8008b20:	b082      	sub	sp, #8
 8008b22:	af00      	add	r7, sp, #0
 8008b24:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d101      	bne.n	8008b30 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8008b2c:	2301      	movs	r3, #1
 8008b2e:	e021      	b.n	8008b74 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	2224      	movs	r2, #36	; 0x24
 8008b34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	681a      	ldr	r2, [r3, #0]
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	f022 0201 	bic.w	r2, r2, #1
 8008b46:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8008b48:	6878      	ldr	r0, [r7, #4]
 8008b4a:	f7fc fd25 	bl	8005598 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	2200      	movs	r2, #0
 8008b52:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	2200      	movs	r2, #0
 8008b58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	2200      	movs	r2, #0
 8008b60:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	2200      	movs	r2, #0
 8008b66:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	2200      	movs	r2, #0
 8008b6e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8008b72:	2300      	movs	r3, #0
}
 8008b74:	4618      	mov	r0, r3
 8008b76:	3708      	adds	r7, #8
 8008b78:	46bd      	mov	sp, r7
 8008b7a:	bd80      	pop	{r7, pc}

08008b7c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008b7c:	b580      	push	{r7, lr}
 8008b7e:	b088      	sub	sp, #32
 8008b80:	af02      	add	r7, sp, #8
 8008b82:	60f8      	str	r0, [r7, #12]
 8008b84:	4608      	mov	r0, r1
 8008b86:	4611      	mov	r1, r2
 8008b88:	461a      	mov	r2, r3
 8008b8a:	4603      	mov	r3, r0
 8008b8c:	817b      	strh	r3, [r7, #10]
 8008b8e:	460b      	mov	r3, r1
 8008b90:	813b      	strh	r3, [r7, #8]
 8008b92:	4613      	mov	r3, r2
 8008b94:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008b9c:	b2db      	uxtb	r3, r3
 8008b9e:	2b20      	cmp	r3, #32
 8008ba0:	f040 80f9 	bne.w	8008d96 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8008ba4:	6a3b      	ldr	r3, [r7, #32]
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d002      	beq.n	8008bb0 <HAL_I2C_Mem_Write+0x34>
 8008baa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d105      	bne.n	8008bbc <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008bb6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8008bb8:	2301      	movs	r3, #1
 8008bba:	e0ed      	b.n	8008d98 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008bc2:	2b01      	cmp	r3, #1
 8008bc4:	d101      	bne.n	8008bca <HAL_I2C_Mem_Write+0x4e>
 8008bc6:	2302      	movs	r3, #2
 8008bc8:	e0e6      	b.n	8008d98 <HAL_I2C_Mem_Write+0x21c>
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	2201      	movs	r2, #1
 8008bce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8008bd2:	f7fd fc99 	bl	8006508 <HAL_GetTick>
 8008bd6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8008bd8:	697b      	ldr	r3, [r7, #20]
 8008bda:	9300      	str	r3, [sp, #0]
 8008bdc:	2319      	movs	r3, #25
 8008bde:	2201      	movs	r2, #1
 8008be0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008be4:	68f8      	ldr	r0, [r7, #12]
 8008be6:	f000 fac3 	bl	8009170 <I2C_WaitOnFlagUntilTimeout>
 8008bea:	4603      	mov	r3, r0
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d001      	beq.n	8008bf4 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8008bf0:	2301      	movs	r3, #1
 8008bf2:	e0d1      	b.n	8008d98 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	2221      	movs	r2, #33	; 0x21
 8008bf8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	2240      	movs	r2, #64	; 0x40
 8008c00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	2200      	movs	r2, #0
 8008c08:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	6a3a      	ldr	r2, [r7, #32]
 8008c0e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8008c14:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	2200      	movs	r2, #0
 8008c1a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8008c1c:	88f8      	ldrh	r0, [r7, #6]
 8008c1e:	893a      	ldrh	r2, [r7, #8]
 8008c20:	8979      	ldrh	r1, [r7, #10]
 8008c22:	697b      	ldr	r3, [r7, #20]
 8008c24:	9301      	str	r3, [sp, #4]
 8008c26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c28:	9300      	str	r3, [sp, #0]
 8008c2a:	4603      	mov	r3, r0
 8008c2c:	68f8      	ldr	r0, [r7, #12]
 8008c2e:	f000 f9d3 	bl	8008fd8 <I2C_RequestMemoryWrite>
 8008c32:	4603      	mov	r3, r0
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	d005      	beq.n	8008c44 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	2200      	movs	r2, #0
 8008c3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8008c40:	2301      	movs	r3, #1
 8008c42:	e0a9      	b.n	8008d98 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008c48:	b29b      	uxth	r3, r3
 8008c4a:	2bff      	cmp	r3, #255	; 0xff
 8008c4c:	d90e      	bls.n	8008c6c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	22ff      	movs	r2, #255	; 0xff
 8008c52:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008c58:	b2da      	uxtb	r2, r3
 8008c5a:	8979      	ldrh	r1, [r7, #10]
 8008c5c:	2300      	movs	r3, #0
 8008c5e:	9300      	str	r3, [sp, #0]
 8008c60:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008c64:	68f8      	ldr	r0, [r7, #12]
 8008c66:	f000 fc2b 	bl	80094c0 <I2C_TransferConfig>
 8008c6a:	e00f      	b.n	8008c8c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008c70:	b29a      	uxth	r2, r3
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008c7a:	b2da      	uxtb	r2, r3
 8008c7c:	8979      	ldrh	r1, [r7, #10]
 8008c7e:	2300      	movs	r3, #0
 8008c80:	9300      	str	r3, [sp, #0]
 8008c82:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008c86:	68f8      	ldr	r0, [r7, #12]
 8008c88:	f000 fc1a 	bl	80094c0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008c8c:	697a      	ldr	r2, [r7, #20]
 8008c8e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008c90:	68f8      	ldr	r0, [r7, #12]
 8008c92:	f000 faad 	bl	80091f0 <I2C_WaitOnTXISFlagUntilTimeout>
 8008c96:	4603      	mov	r3, r0
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d001      	beq.n	8008ca0 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8008c9c:	2301      	movs	r3, #1
 8008c9e:	e07b      	b.n	8008d98 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ca4:	781a      	ldrb	r2, [r3, #0]
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cb0:	1c5a      	adds	r2, r3, #1
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008cba:	b29b      	uxth	r3, r3
 8008cbc:	3b01      	subs	r3, #1
 8008cbe:	b29a      	uxth	r2, r3
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008cc8:	3b01      	subs	r3, #1
 8008cca:	b29a      	uxth	r2, r3
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008cd4:	b29b      	uxth	r3, r3
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d034      	beq.n	8008d44 <HAL_I2C_Mem_Write+0x1c8>
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d130      	bne.n	8008d44 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8008ce2:	697b      	ldr	r3, [r7, #20]
 8008ce4:	9300      	str	r3, [sp, #0]
 8008ce6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ce8:	2200      	movs	r2, #0
 8008cea:	2180      	movs	r1, #128	; 0x80
 8008cec:	68f8      	ldr	r0, [r7, #12]
 8008cee:	f000 fa3f 	bl	8009170 <I2C_WaitOnFlagUntilTimeout>
 8008cf2:	4603      	mov	r3, r0
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d001      	beq.n	8008cfc <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8008cf8:	2301      	movs	r3, #1
 8008cfa:	e04d      	b.n	8008d98 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008d00:	b29b      	uxth	r3, r3
 8008d02:	2bff      	cmp	r3, #255	; 0xff
 8008d04:	d90e      	bls.n	8008d24 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	22ff      	movs	r2, #255	; 0xff
 8008d0a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008d10:	b2da      	uxtb	r2, r3
 8008d12:	8979      	ldrh	r1, [r7, #10]
 8008d14:	2300      	movs	r3, #0
 8008d16:	9300      	str	r3, [sp, #0]
 8008d18:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008d1c:	68f8      	ldr	r0, [r7, #12]
 8008d1e:	f000 fbcf 	bl	80094c0 <I2C_TransferConfig>
 8008d22:	e00f      	b.n	8008d44 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008d28:	b29a      	uxth	r2, r3
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008d32:	b2da      	uxtb	r2, r3
 8008d34:	8979      	ldrh	r1, [r7, #10]
 8008d36:	2300      	movs	r3, #0
 8008d38:	9300      	str	r3, [sp, #0]
 8008d3a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008d3e:	68f8      	ldr	r0, [r7, #12]
 8008d40:	f000 fbbe 	bl	80094c0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008d48:	b29b      	uxth	r3, r3
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d19e      	bne.n	8008c8c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008d4e:	697a      	ldr	r2, [r7, #20]
 8008d50:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008d52:	68f8      	ldr	r0, [r7, #12]
 8008d54:	f000 fa8c 	bl	8009270 <I2C_WaitOnSTOPFlagUntilTimeout>
 8008d58:	4603      	mov	r3, r0
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d001      	beq.n	8008d62 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8008d5e:	2301      	movs	r3, #1
 8008d60:	e01a      	b.n	8008d98 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	2220      	movs	r2, #32
 8008d68:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008d6a:	68fb      	ldr	r3, [r7, #12]
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	6859      	ldr	r1, [r3, #4]
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	681a      	ldr	r2, [r3, #0]
 8008d74:	4b0a      	ldr	r3, [pc, #40]	; (8008da0 <HAL_I2C_Mem_Write+0x224>)
 8008d76:	400b      	ands	r3, r1
 8008d78:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	2220      	movs	r2, #32
 8008d7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	2200      	movs	r2, #0
 8008d86:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	2200      	movs	r2, #0
 8008d8e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008d92:	2300      	movs	r3, #0
 8008d94:	e000      	b.n	8008d98 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8008d96:	2302      	movs	r3, #2
  }
}
 8008d98:	4618      	mov	r0, r3
 8008d9a:	3718      	adds	r7, #24
 8008d9c:	46bd      	mov	sp, r7
 8008d9e:	bd80      	pop	{r7, pc}
 8008da0:	fe00e800 	.word	0xfe00e800

08008da4 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008da4:	b580      	push	{r7, lr}
 8008da6:	b088      	sub	sp, #32
 8008da8:	af02      	add	r7, sp, #8
 8008daa:	60f8      	str	r0, [r7, #12]
 8008dac:	4608      	mov	r0, r1
 8008dae:	4611      	mov	r1, r2
 8008db0:	461a      	mov	r2, r3
 8008db2:	4603      	mov	r3, r0
 8008db4:	817b      	strh	r3, [r7, #10]
 8008db6:	460b      	mov	r3, r1
 8008db8:	813b      	strh	r3, [r7, #8]
 8008dba:	4613      	mov	r3, r2
 8008dbc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008dc4:	b2db      	uxtb	r3, r3
 8008dc6:	2b20      	cmp	r3, #32
 8008dc8:	f040 80fd 	bne.w	8008fc6 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8008dcc:	6a3b      	ldr	r3, [r7, #32]
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d002      	beq.n	8008dd8 <HAL_I2C_Mem_Read+0x34>
 8008dd2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d105      	bne.n	8008de4 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008dde:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8008de0:	2301      	movs	r3, #1
 8008de2:	e0f1      	b.n	8008fc8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008dea:	2b01      	cmp	r3, #1
 8008dec:	d101      	bne.n	8008df2 <HAL_I2C_Mem_Read+0x4e>
 8008dee:	2302      	movs	r3, #2
 8008df0:	e0ea      	b.n	8008fc8 <HAL_I2C_Mem_Read+0x224>
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	2201      	movs	r2, #1
 8008df6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8008dfa:	f7fd fb85 	bl	8006508 <HAL_GetTick>
 8008dfe:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8008e00:	697b      	ldr	r3, [r7, #20]
 8008e02:	9300      	str	r3, [sp, #0]
 8008e04:	2319      	movs	r3, #25
 8008e06:	2201      	movs	r2, #1
 8008e08:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008e0c:	68f8      	ldr	r0, [r7, #12]
 8008e0e:	f000 f9af 	bl	8009170 <I2C_WaitOnFlagUntilTimeout>
 8008e12:	4603      	mov	r3, r0
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d001      	beq.n	8008e1c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8008e18:	2301      	movs	r3, #1
 8008e1a:	e0d5      	b.n	8008fc8 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	2222      	movs	r2, #34	; 0x22
 8008e20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	2240      	movs	r2, #64	; 0x40
 8008e28:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	2200      	movs	r2, #0
 8008e30:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	6a3a      	ldr	r2, [r7, #32]
 8008e36:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8008e3c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	2200      	movs	r2, #0
 8008e42:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8008e44:	88f8      	ldrh	r0, [r7, #6]
 8008e46:	893a      	ldrh	r2, [r7, #8]
 8008e48:	8979      	ldrh	r1, [r7, #10]
 8008e4a:	697b      	ldr	r3, [r7, #20]
 8008e4c:	9301      	str	r3, [sp, #4]
 8008e4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e50:	9300      	str	r3, [sp, #0]
 8008e52:	4603      	mov	r3, r0
 8008e54:	68f8      	ldr	r0, [r7, #12]
 8008e56:	f000 f913 	bl	8009080 <I2C_RequestMemoryRead>
 8008e5a:	4603      	mov	r3, r0
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d005      	beq.n	8008e6c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	2200      	movs	r2, #0
 8008e64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8008e68:	2301      	movs	r3, #1
 8008e6a:	e0ad      	b.n	8008fc8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008e70:	b29b      	uxth	r3, r3
 8008e72:	2bff      	cmp	r3, #255	; 0xff
 8008e74:	d90e      	bls.n	8008e94 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	22ff      	movs	r2, #255	; 0xff
 8008e7a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008e80:	b2da      	uxtb	r2, r3
 8008e82:	8979      	ldrh	r1, [r7, #10]
 8008e84:	4b52      	ldr	r3, [pc, #328]	; (8008fd0 <HAL_I2C_Mem_Read+0x22c>)
 8008e86:	9300      	str	r3, [sp, #0]
 8008e88:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008e8c:	68f8      	ldr	r0, [r7, #12]
 8008e8e:	f000 fb17 	bl	80094c0 <I2C_TransferConfig>
 8008e92:	e00f      	b.n	8008eb4 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008e98:	b29a      	uxth	r2, r3
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008ea2:	b2da      	uxtb	r2, r3
 8008ea4:	8979      	ldrh	r1, [r7, #10]
 8008ea6:	4b4a      	ldr	r3, [pc, #296]	; (8008fd0 <HAL_I2C_Mem_Read+0x22c>)
 8008ea8:	9300      	str	r3, [sp, #0]
 8008eaa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008eae:	68f8      	ldr	r0, [r7, #12]
 8008eb0:	f000 fb06 	bl	80094c0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8008eb4:	697b      	ldr	r3, [r7, #20]
 8008eb6:	9300      	str	r3, [sp, #0]
 8008eb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008eba:	2200      	movs	r2, #0
 8008ebc:	2104      	movs	r1, #4
 8008ebe:	68f8      	ldr	r0, [r7, #12]
 8008ec0:	f000 f956 	bl	8009170 <I2C_WaitOnFlagUntilTimeout>
 8008ec4:	4603      	mov	r3, r0
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d001      	beq.n	8008ece <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8008eca:	2301      	movs	r3, #1
 8008ecc:	e07c      	b.n	8008fc8 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ed8:	b2d2      	uxtb	r2, r2
 8008eda:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ee0:	1c5a      	adds	r2, r3, #1
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8008ee6:	68fb      	ldr	r3, [r7, #12]
 8008ee8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008eea:	3b01      	subs	r3, #1
 8008eec:	b29a      	uxth	r2, r3
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008ef6:	b29b      	uxth	r3, r3
 8008ef8:	3b01      	subs	r3, #1
 8008efa:	b29a      	uxth	r2, r3
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008f04:	b29b      	uxth	r3, r3
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d034      	beq.n	8008f74 <HAL_I2C_Mem_Read+0x1d0>
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d130      	bne.n	8008f74 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8008f12:	697b      	ldr	r3, [r7, #20]
 8008f14:	9300      	str	r3, [sp, #0]
 8008f16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f18:	2200      	movs	r2, #0
 8008f1a:	2180      	movs	r1, #128	; 0x80
 8008f1c:	68f8      	ldr	r0, [r7, #12]
 8008f1e:	f000 f927 	bl	8009170 <I2C_WaitOnFlagUntilTimeout>
 8008f22:	4603      	mov	r3, r0
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	d001      	beq.n	8008f2c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8008f28:	2301      	movs	r3, #1
 8008f2a:	e04d      	b.n	8008fc8 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008f30:	b29b      	uxth	r3, r3
 8008f32:	2bff      	cmp	r3, #255	; 0xff
 8008f34:	d90e      	bls.n	8008f54 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	22ff      	movs	r2, #255	; 0xff
 8008f3a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008f40:	b2da      	uxtb	r2, r3
 8008f42:	8979      	ldrh	r1, [r7, #10]
 8008f44:	2300      	movs	r3, #0
 8008f46:	9300      	str	r3, [sp, #0]
 8008f48:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008f4c:	68f8      	ldr	r0, [r7, #12]
 8008f4e:	f000 fab7 	bl	80094c0 <I2C_TransferConfig>
 8008f52:	e00f      	b.n	8008f74 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008f58:	b29a      	uxth	r2, r3
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008f62:	b2da      	uxtb	r2, r3
 8008f64:	8979      	ldrh	r1, [r7, #10]
 8008f66:	2300      	movs	r3, #0
 8008f68:	9300      	str	r3, [sp, #0]
 8008f6a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008f6e:	68f8      	ldr	r0, [r7, #12]
 8008f70:	f000 faa6 	bl	80094c0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008f78:	b29b      	uxth	r3, r3
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d19a      	bne.n	8008eb4 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008f7e:	697a      	ldr	r2, [r7, #20]
 8008f80:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008f82:	68f8      	ldr	r0, [r7, #12]
 8008f84:	f000 f974 	bl	8009270 <I2C_WaitOnSTOPFlagUntilTimeout>
 8008f88:	4603      	mov	r3, r0
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d001      	beq.n	8008f92 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8008f8e:	2301      	movs	r3, #1
 8008f90:	e01a      	b.n	8008fc8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	2220      	movs	r2, #32
 8008f98:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	6859      	ldr	r1, [r3, #4]
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	681a      	ldr	r2, [r3, #0]
 8008fa4:	4b0b      	ldr	r3, [pc, #44]	; (8008fd4 <HAL_I2C_Mem_Read+0x230>)
 8008fa6:	400b      	ands	r3, r1
 8008fa8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	2220      	movs	r2, #32
 8008fae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	2200      	movs	r2, #0
 8008fb6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	2200      	movs	r2, #0
 8008fbe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008fc2:	2300      	movs	r3, #0
 8008fc4:	e000      	b.n	8008fc8 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8008fc6:	2302      	movs	r3, #2
  }
}
 8008fc8:	4618      	mov	r0, r3
 8008fca:	3718      	adds	r7, #24
 8008fcc:	46bd      	mov	sp, r7
 8008fce:	bd80      	pop	{r7, pc}
 8008fd0:	80002400 	.word	0x80002400
 8008fd4:	fe00e800 	.word	0xfe00e800

08008fd8 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8008fd8:	b580      	push	{r7, lr}
 8008fda:	b086      	sub	sp, #24
 8008fdc:	af02      	add	r7, sp, #8
 8008fde:	60f8      	str	r0, [r7, #12]
 8008fe0:	4608      	mov	r0, r1
 8008fe2:	4611      	mov	r1, r2
 8008fe4:	461a      	mov	r2, r3
 8008fe6:	4603      	mov	r3, r0
 8008fe8:	817b      	strh	r3, [r7, #10]
 8008fea:	460b      	mov	r3, r1
 8008fec:	813b      	strh	r3, [r7, #8]
 8008fee:	4613      	mov	r3, r2
 8008ff0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8008ff2:	88fb      	ldrh	r3, [r7, #6]
 8008ff4:	b2da      	uxtb	r2, r3
 8008ff6:	8979      	ldrh	r1, [r7, #10]
 8008ff8:	4b20      	ldr	r3, [pc, #128]	; (800907c <I2C_RequestMemoryWrite+0xa4>)
 8008ffa:	9300      	str	r3, [sp, #0]
 8008ffc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009000:	68f8      	ldr	r0, [r7, #12]
 8009002:	f000 fa5d 	bl	80094c0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009006:	69fa      	ldr	r2, [r7, #28]
 8009008:	69b9      	ldr	r1, [r7, #24]
 800900a:	68f8      	ldr	r0, [r7, #12]
 800900c:	f000 f8f0 	bl	80091f0 <I2C_WaitOnTXISFlagUntilTimeout>
 8009010:	4603      	mov	r3, r0
 8009012:	2b00      	cmp	r3, #0
 8009014:	d001      	beq.n	800901a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8009016:	2301      	movs	r3, #1
 8009018:	e02c      	b.n	8009074 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800901a:	88fb      	ldrh	r3, [r7, #6]
 800901c:	2b01      	cmp	r3, #1
 800901e:	d105      	bne.n	800902c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8009020:	893b      	ldrh	r3, [r7, #8]
 8009022:	b2da      	uxtb	r2, r3
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	629a      	str	r2, [r3, #40]	; 0x28
 800902a:	e015      	b.n	8009058 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800902c:	893b      	ldrh	r3, [r7, #8]
 800902e:	0a1b      	lsrs	r3, r3, #8
 8009030:	b29b      	uxth	r3, r3
 8009032:	b2da      	uxtb	r2, r3
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800903a:	69fa      	ldr	r2, [r7, #28]
 800903c:	69b9      	ldr	r1, [r7, #24]
 800903e:	68f8      	ldr	r0, [r7, #12]
 8009040:	f000 f8d6 	bl	80091f0 <I2C_WaitOnTXISFlagUntilTimeout>
 8009044:	4603      	mov	r3, r0
 8009046:	2b00      	cmp	r3, #0
 8009048:	d001      	beq.n	800904e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800904a:	2301      	movs	r3, #1
 800904c:	e012      	b.n	8009074 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800904e:	893b      	ldrh	r3, [r7, #8]
 8009050:	b2da      	uxtb	r2, r3
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8009058:	69fb      	ldr	r3, [r7, #28]
 800905a:	9300      	str	r3, [sp, #0]
 800905c:	69bb      	ldr	r3, [r7, #24]
 800905e:	2200      	movs	r2, #0
 8009060:	2180      	movs	r1, #128	; 0x80
 8009062:	68f8      	ldr	r0, [r7, #12]
 8009064:	f000 f884 	bl	8009170 <I2C_WaitOnFlagUntilTimeout>
 8009068:	4603      	mov	r3, r0
 800906a:	2b00      	cmp	r3, #0
 800906c:	d001      	beq.n	8009072 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800906e:	2301      	movs	r3, #1
 8009070:	e000      	b.n	8009074 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8009072:	2300      	movs	r3, #0
}
 8009074:	4618      	mov	r0, r3
 8009076:	3710      	adds	r7, #16
 8009078:	46bd      	mov	sp, r7
 800907a:	bd80      	pop	{r7, pc}
 800907c:	80002000 	.word	0x80002000

08009080 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8009080:	b580      	push	{r7, lr}
 8009082:	b086      	sub	sp, #24
 8009084:	af02      	add	r7, sp, #8
 8009086:	60f8      	str	r0, [r7, #12]
 8009088:	4608      	mov	r0, r1
 800908a:	4611      	mov	r1, r2
 800908c:	461a      	mov	r2, r3
 800908e:	4603      	mov	r3, r0
 8009090:	817b      	strh	r3, [r7, #10]
 8009092:	460b      	mov	r3, r1
 8009094:	813b      	strh	r3, [r7, #8]
 8009096:	4613      	mov	r3, r2
 8009098:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800909a:	88fb      	ldrh	r3, [r7, #6]
 800909c:	b2da      	uxtb	r2, r3
 800909e:	8979      	ldrh	r1, [r7, #10]
 80090a0:	4b20      	ldr	r3, [pc, #128]	; (8009124 <I2C_RequestMemoryRead+0xa4>)
 80090a2:	9300      	str	r3, [sp, #0]
 80090a4:	2300      	movs	r3, #0
 80090a6:	68f8      	ldr	r0, [r7, #12]
 80090a8:	f000 fa0a 	bl	80094c0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80090ac:	69fa      	ldr	r2, [r7, #28]
 80090ae:	69b9      	ldr	r1, [r7, #24]
 80090b0:	68f8      	ldr	r0, [r7, #12]
 80090b2:	f000 f89d 	bl	80091f0 <I2C_WaitOnTXISFlagUntilTimeout>
 80090b6:	4603      	mov	r3, r0
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d001      	beq.n	80090c0 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80090bc:	2301      	movs	r3, #1
 80090be:	e02c      	b.n	800911a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80090c0:	88fb      	ldrh	r3, [r7, #6]
 80090c2:	2b01      	cmp	r3, #1
 80090c4:	d105      	bne.n	80090d2 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80090c6:	893b      	ldrh	r3, [r7, #8]
 80090c8:	b2da      	uxtb	r2, r3
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	629a      	str	r2, [r3, #40]	; 0x28
 80090d0:	e015      	b.n	80090fe <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80090d2:	893b      	ldrh	r3, [r7, #8]
 80090d4:	0a1b      	lsrs	r3, r3, #8
 80090d6:	b29b      	uxth	r3, r3
 80090d8:	b2da      	uxtb	r2, r3
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80090e0:	69fa      	ldr	r2, [r7, #28]
 80090e2:	69b9      	ldr	r1, [r7, #24]
 80090e4:	68f8      	ldr	r0, [r7, #12]
 80090e6:	f000 f883 	bl	80091f0 <I2C_WaitOnTXISFlagUntilTimeout>
 80090ea:	4603      	mov	r3, r0
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d001      	beq.n	80090f4 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80090f0:	2301      	movs	r3, #1
 80090f2:	e012      	b.n	800911a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80090f4:	893b      	ldrh	r3, [r7, #8]
 80090f6:	b2da      	uxtb	r2, r3
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80090fe:	69fb      	ldr	r3, [r7, #28]
 8009100:	9300      	str	r3, [sp, #0]
 8009102:	69bb      	ldr	r3, [r7, #24]
 8009104:	2200      	movs	r2, #0
 8009106:	2140      	movs	r1, #64	; 0x40
 8009108:	68f8      	ldr	r0, [r7, #12]
 800910a:	f000 f831 	bl	8009170 <I2C_WaitOnFlagUntilTimeout>
 800910e:	4603      	mov	r3, r0
 8009110:	2b00      	cmp	r3, #0
 8009112:	d001      	beq.n	8009118 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8009114:	2301      	movs	r3, #1
 8009116:	e000      	b.n	800911a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8009118:	2300      	movs	r3, #0
}
 800911a:	4618      	mov	r0, r3
 800911c:	3710      	adds	r7, #16
 800911e:	46bd      	mov	sp, r7
 8009120:	bd80      	pop	{r7, pc}
 8009122:	bf00      	nop
 8009124:	80002000 	.word	0x80002000

08009128 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8009128:	b480      	push	{r7}
 800912a:	b083      	sub	sp, #12
 800912c:	af00      	add	r7, sp, #0
 800912e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	699b      	ldr	r3, [r3, #24]
 8009136:	f003 0302 	and.w	r3, r3, #2
 800913a:	2b02      	cmp	r3, #2
 800913c:	d103      	bne.n	8009146 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	2200      	movs	r2, #0
 8009144:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	699b      	ldr	r3, [r3, #24]
 800914c:	f003 0301 	and.w	r3, r3, #1
 8009150:	2b01      	cmp	r3, #1
 8009152:	d007      	beq.n	8009164 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	699a      	ldr	r2, [r3, #24]
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	f042 0201 	orr.w	r2, r2, #1
 8009162:	619a      	str	r2, [r3, #24]
  }
}
 8009164:	bf00      	nop
 8009166:	370c      	adds	r7, #12
 8009168:	46bd      	mov	sp, r7
 800916a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800916e:	4770      	bx	lr

08009170 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8009170:	b580      	push	{r7, lr}
 8009172:	b084      	sub	sp, #16
 8009174:	af00      	add	r7, sp, #0
 8009176:	60f8      	str	r0, [r7, #12]
 8009178:	60b9      	str	r1, [r7, #8]
 800917a:	603b      	str	r3, [r7, #0]
 800917c:	4613      	mov	r3, r2
 800917e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009180:	e022      	b.n	80091c8 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009182:	683b      	ldr	r3, [r7, #0]
 8009184:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009188:	d01e      	beq.n	80091c8 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800918a:	f7fd f9bd 	bl	8006508 <HAL_GetTick>
 800918e:	4602      	mov	r2, r0
 8009190:	69bb      	ldr	r3, [r7, #24]
 8009192:	1ad3      	subs	r3, r2, r3
 8009194:	683a      	ldr	r2, [r7, #0]
 8009196:	429a      	cmp	r2, r3
 8009198:	d302      	bcc.n	80091a0 <I2C_WaitOnFlagUntilTimeout+0x30>
 800919a:	683b      	ldr	r3, [r7, #0]
 800919c:	2b00      	cmp	r3, #0
 800919e:	d113      	bne.n	80091c8 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80091a4:	f043 0220 	orr.w	r2, r3, #32
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	2220      	movs	r2, #32
 80091b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	2200      	movs	r2, #0
 80091b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	2200      	movs	r2, #0
 80091c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80091c4:	2301      	movs	r3, #1
 80091c6:	e00f      	b.n	80091e8 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	699a      	ldr	r2, [r3, #24]
 80091ce:	68bb      	ldr	r3, [r7, #8]
 80091d0:	4013      	ands	r3, r2
 80091d2:	68ba      	ldr	r2, [r7, #8]
 80091d4:	429a      	cmp	r2, r3
 80091d6:	bf0c      	ite	eq
 80091d8:	2301      	moveq	r3, #1
 80091da:	2300      	movne	r3, #0
 80091dc:	b2db      	uxtb	r3, r3
 80091de:	461a      	mov	r2, r3
 80091e0:	79fb      	ldrb	r3, [r7, #7]
 80091e2:	429a      	cmp	r2, r3
 80091e4:	d0cd      	beq.n	8009182 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80091e6:	2300      	movs	r3, #0
}
 80091e8:	4618      	mov	r0, r3
 80091ea:	3710      	adds	r7, #16
 80091ec:	46bd      	mov	sp, r7
 80091ee:	bd80      	pop	{r7, pc}

080091f0 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80091f0:	b580      	push	{r7, lr}
 80091f2:	b084      	sub	sp, #16
 80091f4:	af00      	add	r7, sp, #0
 80091f6:	60f8      	str	r0, [r7, #12]
 80091f8:	60b9      	str	r1, [r7, #8]
 80091fa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80091fc:	e02c      	b.n	8009258 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80091fe:	687a      	ldr	r2, [r7, #4]
 8009200:	68b9      	ldr	r1, [r7, #8]
 8009202:	68f8      	ldr	r0, [r7, #12]
 8009204:	f000 f870 	bl	80092e8 <I2C_IsErrorOccurred>
 8009208:	4603      	mov	r3, r0
 800920a:	2b00      	cmp	r3, #0
 800920c:	d001      	beq.n	8009212 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800920e:	2301      	movs	r3, #1
 8009210:	e02a      	b.n	8009268 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009212:	68bb      	ldr	r3, [r7, #8]
 8009214:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009218:	d01e      	beq.n	8009258 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800921a:	f7fd f975 	bl	8006508 <HAL_GetTick>
 800921e:	4602      	mov	r2, r0
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	1ad3      	subs	r3, r2, r3
 8009224:	68ba      	ldr	r2, [r7, #8]
 8009226:	429a      	cmp	r2, r3
 8009228:	d302      	bcc.n	8009230 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800922a:	68bb      	ldr	r3, [r7, #8]
 800922c:	2b00      	cmp	r3, #0
 800922e:	d113      	bne.n	8009258 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009234:	f043 0220 	orr.w	r2, r3, #32
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	2220      	movs	r2, #32
 8009240:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	2200      	movs	r2, #0
 8009248:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	2200      	movs	r2, #0
 8009250:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8009254:	2301      	movs	r3, #1
 8009256:	e007      	b.n	8009268 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	699b      	ldr	r3, [r3, #24]
 800925e:	f003 0302 	and.w	r3, r3, #2
 8009262:	2b02      	cmp	r3, #2
 8009264:	d1cb      	bne.n	80091fe <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8009266:	2300      	movs	r3, #0
}
 8009268:	4618      	mov	r0, r3
 800926a:	3710      	adds	r7, #16
 800926c:	46bd      	mov	sp, r7
 800926e:	bd80      	pop	{r7, pc}

08009270 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8009270:	b580      	push	{r7, lr}
 8009272:	b084      	sub	sp, #16
 8009274:	af00      	add	r7, sp, #0
 8009276:	60f8      	str	r0, [r7, #12]
 8009278:	60b9      	str	r1, [r7, #8]
 800927a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800927c:	e028      	b.n	80092d0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800927e:	687a      	ldr	r2, [r7, #4]
 8009280:	68b9      	ldr	r1, [r7, #8]
 8009282:	68f8      	ldr	r0, [r7, #12]
 8009284:	f000 f830 	bl	80092e8 <I2C_IsErrorOccurred>
 8009288:	4603      	mov	r3, r0
 800928a:	2b00      	cmp	r3, #0
 800928c:	d001      	beq.n	8009292 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800928e:	2301      	movs	r3, #1
 8009290:	e026      	b.n	80092e0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009292:	f7fd f939 	bl	8006508 <HAL_GetTick>
 8009296:	4602      	mov	r2, r0
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	1ad3      	subs	r3, r2, r3
 800929c:	68ba      	ldr	r2, [r7, #8]
 800929e:	429a      	cmp	r2, r3
 80092a0:	d302      	bcc.n	80092a8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80092a2:	68bb      	ldr	r3, [r7, #8]
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	d113      	bne.n	80092d0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80092ac:	f043 0220 	orr.w	r2, r3, #32
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80092b4:	68fb      	ldr	r3, [r7, #12]
 80092b6:	2220      	movs	r2, #32
 80092b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	2200      	movs	r2, #0
 80092c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	2200      	movs	r2, #0
 80092c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80092cc:	2301      	movs	r3, #1
 80092ce:	e007      	b.n	80092e0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	699b      	ldr	r3, [r3, #24]
 80092d6:	f003 0320 	and.w	r3, r3, #32
 80092da:	2b20      	cmp	r3, #32
 80092dc:	d1cf      	bne.n	800927e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80092de:	2300      	movs	r3, #0
}
 80092e0:	4618      	mov	r0, r3
 80092e2:	3710      	adds	r7, #16
 80092e4:	46bd      	mov	sp, r7
 80092e6:	bd80      	pop	{r7, pc}

080092e8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80092e8:	b580      	push	{r7, lr}
 80092ea:	b08a      	sub	sp, #40	; 0x28
 80092ec:	af00      	add	r7, sp, #0
 80092ee:	60f8      	str	r0, [r7, #12]
 80092f0:	60b9      	str	r1, [r7, #8]
 80092f2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80092f4:	2300      	movs	r3, #0
 80092f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	699b      	ldr	r3, [r3, #24]
 8009300:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8009302:	2300      	movs	r3, #0
 8009304:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800930a:	69bb      	ldr	r3, [r7, #24]
 800930c:	f003 0310 	and.w	r3, r3, #16
 8009310:	2b00      	cmp	r3, #0
 8009312:	d075      	beq.n	8009400 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	2210      	movs	r2, #16
 800931a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800931c:	e056      	b.n	80093cc <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800931e:	68bb      	ldr	r3, [r7, #8]
 8009320:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009324:	d052      	beq.n	80093cc <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8009326:	f7fd f8ef 	bl	8006508 <HAL_GetTick>
 800932a:	4602      	mov	r2, r0
 800932c:	69fb      	ldr	r3, [r7, #28]
 800932e:	1ad3      	subs	r3, r2, r3
 8009330:	68ba      	ldr	r2, [r7, #8]
 8009332:	429a      	cmp	r2, r3
 8009334:	d302      	bcc.n	800933c <I2C_IsErrorOccurred+0x54>
 8009336:	68bb      	ldr	r3, [r7, #8]
 8009338:	2b00      	cmp	r3, #0
 800933a:	d147      	bne.n	80093cc <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	685b      	ldr	r3, [r3, #4]
 8009342:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009346:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800934e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	699b      	ldr	r3, [r3, #24]
 8009356:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800935a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800935e:	d12e      	bne.n	80093be <I2C_IsErrorOccurred+0xd6>
 8009360:	697b      	ldr	r3, [r7, #20]
 8009362:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009366:	d02a      	beq.n	80093be <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8009368:	7cfb      	ldrb	r3, [r7, #19]
 800936a:	2b20      	cmp	r3, #32
 800936c:	d027      	beq.n	80093be <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800936e:	68fb      	ldr	r3, [r7, #12]
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	685a      	ldr	r2, [r3, #4]
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800937c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800937e:	f7fd f8c3 	bl	8006508 <HAL_GetTick>
 8009382:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009384:	e01b      	b.n	80093be <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8009386:	f7fd f8bf 	bl	8006508 <HAL_GetTick>
 800938a:	4602      	mov	r2, r0
 800938c:	69fb      	ldr	r3, [r7, #28]
 800938e:	1ad3      	subs	r3, r2, r3
 8009390:	2b19      	cmp	r3, #25
 8009392:	d914      	bls.n	80093be <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009398:	f043 0220 	orr.w	r2, r3, #32
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	2220      	movs	r2, #32
 80093a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	2200      	movs	r2, #0
 80093ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	2200      	movs	r2, #0
 80093b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 80093b8:	2301      	movs	r3, #1
 80093ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	699b      	ldr	r3, [r3, #24]
 80093c4:	f003 0320 	and.w	r3, r3, #32
 80093c8:	2b20      	cmp	r3, #32
 80093ca:	d1dc      	bne.n	8009386 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	699b      	ldr	r3, [r3, #24]
 80093d2:	f003 0320 	and.w	r3, r3, #32
 80093d6:	2b20      	cmp	r3, #32
 80093d8:	d003      	beq.n	80093e2 <I2C_IsErrorOccurred+0xfa>
 80093da:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80093de:	2b00      	cmp	r3, #0
 80093e0:	d09d      	beq.n	800931e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80093e2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	d103      	bne.n	80093f2 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	2220      	movs	r2, #32
 80093f0:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80093f2:	6a3b      	ldr	r3, [r7, #32]
 80093f4:	f043 0304 	orr.w	r3, r3, #4
 80093f8:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80093fa:	2301      	movs	r3, #1
 80093fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	699b      	ldr	r3, [r3, #24]
 8009406:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8009408:	69bb      	ldr	r3, [r7, #24]
 800940a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800940e:	2b00      	cmp	r3, #0
 8009410:	d00b      	beq.n	800942a <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8009412:	6a3b      	ldr	r3, [r7, #32]
 8009414:	f043 0301 	orr.w	r3, r3, #1
 8009418:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800941a:	68fb      	ldr	r3, [r7, #12]
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009422:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009424:	2301      	movs	r3, #1
 8009426:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800942a:	69bb      	ldr	r3, [r7, #24]
 800942c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009430:	2b00      	cmp	r3, #0
 8009432:	d00b      	beq.n	800944c <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8009434:	6a3b      	ldr	r3, [r7, #32]
 8009436:	f043 0308 	orr.w	r3, r3, #8
 800943a:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800943c:	68fb      	ldr	r3, [r7, #12]
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009444:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009446:	2301      	movs	r3, #1
 8009448:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800944c:	69bb      	ldr	r3, [r7, #24]
 800944e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009452:	2b00      	cmp	r3, #0
 8009454:	d00b      	beq.n	800946e <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8009456:	6a3b      	ldr	r3, [r7, #32]
 8009458:	f043 0302 	orr.w	r3, r3, #2
 800945c:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009466:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009468:	2301      	movs	r3, #1
 800946a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800946e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009472:	2b00      	cmp	r3, #0
 8009474:	d01c      	beq.n	80094b0 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8009476:	68f8      	ldr	r0, [r7, #12]
 8009478:	f7ff fe56 	bl	8009128 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	6859      	ldr	r1, [r3, #4]
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	681a      	ldr	r2, [r3, #0]
 8009486:	4b0d      	ldr	r3, [pc, #52]	; (80094bc <I2C_IsErrorOccurred+0x1d4>)
 8009488:	400b      	ands	r3, r1
 800948a:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009490:	6a3b      	ldr	r3, [r7, #32]
 8009492:	431a      	orrs	r2, r3
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8009498:	68fb      	ldr	r3, [r7, #12]
 800949a:	2220      	movs	r2, #32
 800949c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	2200      	movs	r2, #0
 80094a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	2200      	movs	r2, #0
 80094ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80094b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80094b4:	4618      	mov	r0, r3
 80094b6:	3728      	adds	r7, #40	; 0x28
 80094b8:	46bd      	mov	sp, r7
 80094ba:	bd80      	pop	{r7, pc}
 80094bc:	fe00e800 	.word	0xfe00e800

080094c0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80094c0:	b480      	push	{r7}
 80094c2:	b087      	sub	sp, #28
 80094c4:	af00      	add	r7, sp, #0
 80094c6:	60f8      	str	r0, [r7, #12]
 80094c8:	607b      	str	r3, [r7, #4]
 80094ca:	460b      	mov	r3, r1
 80094cc:	817b      	strh	r3, [r7, #10]
 80094ce:	4613      	mov	r3, r2
 80094d0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80094d2:	897b      	ldrh	r3, [r7, #10]
 80094d4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80094d8:	7a7b      	ldrb	r3, [r7, #9]
 80094da:	041b      	lsls	r3, r3, #16
 80094dc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80094e0:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80094e6:	6a3b      	ldr	r3, [r7, #32]
 80094e8:	4313      	orrs	r3, r2
 80094ea:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80094ee:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	685a      	ldr	r2, [r3, #4]
 80094f6:	6a3b      	ldr	r3, [r7, #32]
 80094f8:	0d5b      	lsrs	r3, r3, #21
 80094fa:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80094fe:	4b08      	ldr	r3, [pc, #32]	; (8009520 <I2C_TransferConfig+0x60>)
 8009500:	430b      	orrs	r3, r1
 8009502:	43db      	mvns	r3, r3
 8009504:	ea02 0103 	and.w	r1, r2, r3
 8009508:	68fb      	ldr	r3, [r7, #12]
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	697a      	ldr	r2, [r7, #20]
 800950e:	430a      	orrs	r2, r1
 8009510:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8009512:	bf00      	nop
 8009514:	371c      	adds	r7, #28
 8009516:	46bd      	mov	sp, r7
 8009518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800951c:	4770      	bx	lr
 800951e:	bf00      	nop
 8009520:	03ff63ff 	.word	0x03ff63ff

08009524 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8009524:	b480      	push	{r7}
 8009526:	b083      	sub	sp, #12
 8009528:	af00      	add	r7, sp, #0
 800952a:	6078      	str	r0, [r7, #4]
 800952c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009534:	b2db      	uxtb	r3, r3
 8009536:	2b20      	cmp	r3, #32
 8009538:	d138      	bne.n	80095ac <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009540:	2b01      	cmp	r3, #1
 8009542:	d101      	bne.n	8009548 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8009544:	2302      	movs	r3, #2
 8009546:	e032      	b.n	80095ae <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	2201      	movs	r2, #1
 800954c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	2224      	movs	r2, #36	; 0x24
 8009554:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	681a      	ldr	r2, [r3, #0]
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	f022 0201 	bic.w	r2, r2, #1
 8009566:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	681a      	ldr	r2, [r3, #0]
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8009576:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	6819      	ldr	r1, [r3, #0]
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	683a      	ldr	r2, [r7, #0]
 8009584:	430a      	orrs	r2, r1
 8009586:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	681a      	ldr	r2, [r3, #0]
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	f042 0201 	orr.w	r2, r2, #1
 8009596:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	2220      	movs	r2, #32
 800959c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	2200      	movs	r2, #0
 80095a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80095a8:	2300      	movs	r3, #0
 80095aa:	e000      	b.n	80095ae <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80095ac:	2302      	movs	r3, #2
  }
}
 80095ae:	4618      	mov	r0, r3
 80095b0:	370c      	adds	r7, #12
 80095b2:	46bd      	mov	sp, r7
 80095b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095b8:	4770      	bx	lr

080095ba <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80095ba:	b480      	push	{r7}
 80095bc:	b085      	sub	sp, #20
 80095be:	af00      	add	r7, sp, #0
 80095c0:	6078      	str	r0, [r7, #4]
 80095c2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80095ca:	b2db      	uxtb	r3, r3
 80095cc:	2b20      	cmp	r3, #32
 80095ce:	d139      	bne.n	8009644 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80095d6:	2b01      	cmp	r3, #1
 80095d8:	d101      	bne.n	80095de <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80095da:	2302      	movs	r3, #2
 80095dc:	e033      	b.n	8009646 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	2201      	movs	r2, #1
 80095e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	2224      	movs	r2, #36	; 0x24
 80095ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	681a      	ldr	r2, [r3, #0]
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	f022 0201 	bic.w	r2, r2, #1
 80095fc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800960c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800960e:	683b      	ldr	r3, [r7, #0]
 8009610:	021b      	lsls	r3, r3, #8
 8009612:	68fa      	ldr	r2, [r7, #12]
 8009614:	4313      	orrs	r3, r2
 8009616:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	68fa      	ldr	r2, [r7, #12]
 800961e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	681a      	ldr	r2, [r3, #0]
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	f042 0201 	orr.w	r2, r2, #1
 800962e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	2220      	movs	r2, #32
 8009634:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	2200      	movs	r2, #0
 800963c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009640:	2300      	movs	r3, #0
 8009642:	e000      	b.n	8009646 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8009644:	2302      	movs	r3, #2
  }
}
 8009646:	4618      	mov	r0, r3
 8009648:	3714      	adds	r7, #20
 800964a:	46bd      	mov	sp, r7
 800964c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009650:	4770      	bx	lr
	...

08009654 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 8009654:	b480      	push	{r7}
 8009656:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 8009658:	4b05      	ldr	r3, [pc, #20]	; (8009670 <HAL_ICACHE_Enable+0x1c>)
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	4a04      	ldr	r2, [pc, #16]	; (8009670 <HAL_ICACHE_Enable+0x1c>)
 800965e:	f043 0301 	orr.w	r3, r3, #1
 8009662:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8009664:	2300      	movs	r3, #0
}
 8009666:	4618      	mov	r0, r3
 8009668:	46bd      	mov	sp, r7
 800966a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800966e:	4770      	bx	lr
 8009670:	40030400 	.word	0x40030400

08009674 <LL_DLYB_Enable>:
  * @param  DLYBx DLYB Instance
  * @retval None
  */

__STATIC_INLINE void LL_DLYB_Enable(DLYB_TypeDef *DLYBx)
{
 8009674:	b480      	push	{r7}
 8009676:	b083      	sub	sp, #12
 8009678:	af00      	add	r7, sp, #0
 800967a:	6078      	str	r0, [r7, #4]
  SET_BIT(DLYBx->CR, DLYB_CR_DEN);
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	f043 0201 	orr.w	r2, r3, #1
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	601a      	str	r2, [r3, #0]
}
 8009688:	bf00      	nop
 800968a:	370c      	adds	r7, #12
 800968c:	46bd      	mov	sp, r7
 800968e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009692:	4770      	bx	lr

08009694 <LL_DLYB_Disable>:
  * @param  DLYBx DLYB Instance.
  * @retval None
  */

__STATIC_INLINE void LL_DLYB_Disable(DLYB_TypeDef *DLYBx)
{
 8009694:	b480      	push	{r7}
 8009696:	b083      	sub	sp, #12
 8009698:	af00      	add	r7, sp, #0
 800969a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(DLYBx->CR, DLYB_CR_DEN);
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	f023 0201 	bic.w	r2, r3, #1
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	601a      	str	r2, [r3, #0]
}
 80096a8:	bf00      	nop
 80096aa:	370c      	adds	r7, #12
 80096ac:	46bd      	mov	sp, r7
 80096ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096b2:	4770      	bx	lr

080096b4 <HAL_OSPI_Init>:
  *         in the OSPI_InitTypeDef and initialize the associated handle.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Init(OSPI_HandleTypeDef *hospi)
{
 80096b4:	b580      	push	{r7, lr}
 80096b6:	b086      	sub	sp, #24
 80096b8:	af02      	add	r7, sp, #8
 80096ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80096bc:	2300      	movs	r3, #0
 80096be:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 80096c0:	f7fc ff22 	bl	8006508 <HAL_GetTick>
 80096c4:	60b8      	str	r0, [r7, #8]

  /* Check the OSPI handle allocation */
  if (hospi == NULL)
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	d102      	bne.n	80096d2 <HAL_OSPI_Init+0x1e>
  {
    status = HAL_ERROR;
 80096cc:	2301      	movs	r3, #1
 80096ce:	73fb      	strb	r3, [r7, #15]
 80096d0:	e0a5      	b.n	800981e <HAL_OSPI_Init+0x16a>
    assert_param(IS_OSPI_CS_BOUNDARY(hospi->Init.ChipSelectBoundary));
    assert_param(IS_OSPI_DLYBYP(hospi->Init.DelayBlockBypass));
    assert_param(IS_OSPI_MAXTRAN(hospi->Init.MaxTran));

    /* Initialize error code */
    hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	2200      	movs	r2, #0
 80096d6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Check if the state is the reset state */
    if (hospi->State == HAL_OSPI_STATE_RESET)
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80096dc:	2b00      	cmp	r3, #0
 80096de:	f040 809e 	bne.w	800981e <HAL_OSPI_Init+0x16a>

      /* Init the low level hardware */
      hospi->MspInitCallback(hospi);
#else
      /* Initialization of the low level hardware */
      HAL_OSPI_MspInit(hospi);
 80096e2:	6878      	ldr	r0, [r7, #4]
 80096e4:	f7fc f97c 	bl	80059e0 <HAL_OSPI_MspInit>
#endif /* defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */

      /* Configure the default timeout for the OSPI memory access */
      (void)HAL_OSPI_SetTimeout(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE);
 80096e8:	f241 3188 	movw	r1, #5000	; 0x1388
 80096ec:	6878      	ldr	r0, [r7, #4]
 80096ee:	f000 f9ec 	bl	8009aca <HAL_OSPI_SetTimeout>

      /* Configure memory type, device size, chip select high time, delay block bypass,
         free running clock, clock mode */
      MODIFY_REG(hospi->Instance->DCR1,
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	689a      	ldr	r2, [r3, #8]
 80096f8:	4b4b      	ldr	r3, [pc, #300]	; (8009828 <HAL_OSPI_Init+0x174>)
 80096fa:	4013      	ands	r3, r2
 80096fc:	687a      	ldr	r2, [r7, #4]
 80096fe:	68d1      	ldr	r1, [r2, #12]
 8009700:	687a      	ldr	r2, [r7, #4]
 8009702:	6912      	ldr	r2, [r2, #16]
 8009704:	3a01      	subs	r2, #1
 8009706:	0412      	lsls	r2, r2, #16
 8009708:	4311      	orrs	r1, r2
 800970a:	687a      	ldr	r2, [r7, #4]
 800970c:	6952      	ldr	r2, [r2, #20]
 800970e:	3a01      	subs	r2, #1
 8009710:	0212      	lsls	r2, r2, #8
 8009712:	4311      	orrs	r1, r2
 8009714:	687a      	ldr	r2, [r7, #4]
 8009716:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8009718:	4311      	orrs	r1, r2
 800971a:	687a      	ldr	r2, [r7, #4]
 800971c:	69d2      	ldr	r2, [r2, #28]
 800971e:	4311      	orrs	r1, r2
 8009720:	687a      	ldr	r2, [r7, #4]
 8009722:	6812      	ldr	r2, [r2, #0]
 8009724:	430b      	orrs	r3, r1
 8009726:	6093      	str	r3, [r2, #8]
                 (hospi->Init.MemoryType | ((hospi->Init.DeviceSize - 1U) << OCTOSPI_DCR1_DEVSIZE_Pos) |
                  ((hospi->Init.ChipSelectHighTime - 1U) << OCTOSPI_DCR1_CSHT_Pos) |
                  hospi->Init.DelayBlockBypass | hospi->Init.ClockMode));

      /* Configure wrap size */
      MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_WRAPSIZE, hospi->Init.WrapSize);
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	68db      	ldr	r3, [r3, #12]
 800972e:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	6a1a      	ldr	r2, [r3, #32]
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	430a      	orrs	r2, r1
 800973c:	60da      	str	r2, [r3, #12]

      /* Configure chip select boundary and maximum transfer */
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009742:	0419      	lsls	r1, r3, #16
                               (hospi->Init.MaxTran << OCTOSPI_DCR3_MAXTRAN_Pos));
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	6b9a      	ldr	r2, [r3, #56]	; 0x38
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	430a      	orrs	r2, r1
 800974e:	611a      	str	r2, [r3, #16]

      /* Configure refresh */
      hospi->Instance->DCR4 = hospi->Init.Refresh;
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	687a      	ldr	r2, [r7, #4]
 8009756:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8009758:	615a      	str	r2, [r3, #20]

      /* Configure FIFO threshold */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FTHRES, ((hospi->Init.FifoThreshold - 1U) << OCTOSPI_CR_FTHRES_Pos));
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	685b      	ldr	r3, [r3, #4]
 8009768:	3b01      	subs	r3, #1
 800976a:	021a      	lsls	r2, r3, #8
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	430a      	orrs	r2, r1
 8009772:	601a      	str	r2, [r3, #0]

      /* Wait till busy flag is reset */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009778:	9300      	str	r3, [sp, #0]
 800977a:	68bb      	ldr	r3, [r7, #8]
 800977c:	2200      	movs	r2, #0
 800977e:	2120      	movs	r1, #32
 8009780:	6878      	ldr	r0, [r7, #4]
 8009782:	f000 fea3 	bl	800a4cc <OSPI_WaitFlagStateUntilTimeout>
 8009786:	4603      	mov	r3, r0
 8009788:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 800978a:	7bfb      	ldrb	r3, [r7, #15]
 800978c:	2b00      	cmp	r3, #0
 800978e:	d146      	bne.n	800981e <HAL_OSPI_Init+0x16a>
      {
        /* Configure clock prescaler */
        MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_PRESCALER,
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	68db      	ldr	r3, [r3, #12]
 8009796:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800979e:	1e5a      	subs	r2, r3, #1
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	430a      	orrs	r2, r1
 80097a6:	60da      	str	r2, [r3, #12]
                   ((hospi->Init.ClockPrescaler - 1U) << OCTOSPI_DCR2_PRESCALER_Pos));

        /* Configure Dual Quad mode */
        MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_DMM, hospi->Init.DualQuad);
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	f023 0140 	bic.w	r1, r3, #64	; 0x40
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	689a      	ldr	r2, [r3, #8]
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	430a      	orrs	r2, r1
 80097bc:	601a      	str	r2, [r3, #0]

        /* Configure sample shifting and delay hold quarter cycle */
        MODIFY_REG(hospi->Instance->TCR, (OCTOSPI_TCR_SSHIFT | OCTOSPI_TCR_DHQC),
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80097c6:	f023 41a0 	bic.w	r1, r3, #1342177280	; 0x50000000
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097d2:	431a      	orrs	r2, r3
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	430a      	orrs	r2, r1
 80097da:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
                   (hospi->Init.SampleShifting | hospi->Init.DelayHoldQuarterCycle));

        /* Enable OctoSPI */
        __HAL_OSPI_ENABLE(hospi);
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	681a      	ldr	r2, [r3, #0]
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	f042 0201 	orr.w	r2, r2, #1
 80097ec:	601a      	str	r2, [r3, #0]

        /* Enable free running clock if needed : must be done after OSPI enable */
        if (hospi->Init.FreeRunningClock == HAL_OSPI_FREERUNCLK_ENABLE)
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	699b      	ldr	r3, [r3, #24]
 80097f2:	2b02      	cmp	r3, #2
 80097f4:	d107      	bne.n	8009806 <HAL_OSPI_Init+0x152>
        {
          SET_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	689a      	ldr	r2, [r3, #8]
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	f042 0202 	orr.w	r2, r2, #2
 8009804:	609a      	str	r2, [r3, #8]
        }

        /* Initialize the OSPI state */
        if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	68db      	ldr	r3, [r3, #12]
 800980a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800980e:	d103      	bne.n	8009818 <HAL_OSPI_Init+0x164>
        {
          hospi->State = HAL_OSPI_STATE_HYPERBUS_INIT;
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	2201      	movs	r2, #1
 8009814:	651a      	str	r2, [r3, #80]	; 0x50
 8009816:	e002      	b.n	800981e <HAL_OSPI_Init+0x16a>
        }
        else
        {
          hospi->State = HAL_OSPI_STATE_READY;
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	2202      	movs	r2, #2
 800981c:	651a      	str	r2, [r3, #80]	; 0x50
      }
    }
  }

  /* Return function status */
  return status;
 800981e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009820:	4618      	mov	r0, r3
 8009822:	3710      	adds	r7, #16
 8009824:	46bd      	mov	sp, r7
 8009826:	bd80      	pop	{r7, pc}
 8009828:	f8e0c0f4 	.word	0xf8e0c0f4

0800982c <HAL_OSPI_Command>:
  * @param  cmd     : structure that contains the command configuration information
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Command(OSPI_HandleTypeDef *hospi, OSPI_RegularCmdTypeDef *cmd, uint32_t Timeout)
{
 800982c:	b580      	push	{r7, lr}
 800982e:	b08a      	sub	sp, #40	; 0x28
 8009830:	af02      	add	r7, sp, #8
 8009832:	60f8      	str	r0, [r7, #12]
 8009834:	60b9      	str	r1, [r7, #8]
 8009836:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t state;
  uint32_t tickstart = HAL_GetTick();
 8009838:	f7fc fe66 	bl	8006508 <HAL_GetTick>
 800983c:	61b8      	str	r0, [r7, #24]
    assert_param(IS_OSPI_ALT_BYTES_SIZE(cmd->AlternateBytesSize));
    assert_param(IS_OSPI_ALT_BYTES_DTR_MODE(cmd->AlternateBytesDtrMode));
  }

  assert_param(IS_OSPI_DATA_MODE(cmd->DataMode));
  if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 800983e:	68bb      	ldr	r3, [r7, #8]
 8009840:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009842:	2b00      	cmp	r3, #0

  assert_param(IS_OSPI_DQS_MODE(cmd->DQSMode));
  assert_param(IS_OSPI_SIOO_MODE(cmd->SIOOMode));

  /* Check the state of the driver */
  state = hospi->State;
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009848:	617b      	str	r3, [r7, #20]
  if (((state == HAL_OSPI_STATE_READY)         && (hospi->Init.MemoryType != HAL_OSPI_MEMTYPE_HYPERBUS)) ||
 800984a:	697b      	ldr	r3, [r7, #20]
 800984c:	2b02      	cmp	r3, #2
 800984e:	d104      	bne.n	800985a <HAL_OSPI_Command+0x2e>
 8009850:	68fb      	ldr	r3, [r7, #12]
 8009852:	68db      	ldr	r3, [r3, #12]
 8009854:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009858:	d115      	bne.n	8009886 <HAL_OSPI_Command+0x5a>
 800985a:	697b      	ldr	r3, [r7, #20]
 800985c:	2b14      	cmp	r3, #20
 800985e:	d107      	bne.n	8009870 <HAL_OSPI_Command+0x44>
      ((state == HAL_OSPI_STATE_READ_CMD_CFG)  && ((cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG)
 8009860:	68bb      	ldr	r3, [r7, #8]
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	2b02      	cmp	r3, #2
 8009866:	d00e      	beq.n	8009886 <HAL_OSPI_Command+0x5a>
                                                   || (cmd->OperationType == HAL_OSPI_OPTYPE_WRAP_CFG))) ||
 8009868:	68bb      	ldr	r3, [r7, #8]
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	2b03      	cmp	r3, #3
 800986e:	d00a      	beq.n	8009886 <HAL_OSPI_Command+0x5a>
 8009870:	697b      	ldr	r3, [r7, #20]
 8009872:	2b24      	cmp	r3, #36	; 0x24
 8009874:	d15b      	bne.n	800992e <HAL_OSPI_Command+0x102>
      ((state == HAL_OSPI_STATE_WRITE_CMD_CFG) && ((cmd->OperationType == HAL_OSPI_OPTYPE_READ_CFG)  ||
 8009876:	68bb      	ldr	r3, [r7, #8]
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	2b01      	cmp	r3, #1
 800987c:	d003      	beq.n	8009886 <HAL_OSPI_Command+0x5a>
                                                   (cmd->OperationType == HAL_OSPI_OPTYPE_WRAP_CFG))))
 800987e:	68bb      	ldr	r3, [r7, #8]
 8009880:	681b      	ldr	r3, [r3, #0]
      ((state == HAL_OSPI_STATE_WRITE_CMD_CFG) && ((cmd->OperationType == HAL_OSPI_OPTYPE_READ_CFG)  ||
 8009882:	2b03      	cmp	r3, #3
 8009884:	d153      	bne.n	800992e <HAL_OSPI_Command+0x102>
  {
    /* Wait till busy flag is reset */
    status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	9300      	str	r3, [sp, #0]
 800988a:	69bb      	ldr	r3, [r7, #24]
 800988c:	2200      	movs	r2, #0
 800988e:	2120      	movs	r1, #32
 8009890:	68f8      	ldr	r0, [r7, #12]
 8009892:	f000 fe1b 	bl	800a4cc <OSPI_WaitFlagStateUntilTimeout>
 8009896:	4603      	mov	r3, r0
 8009898:	77fb      	strb	r3, [r7, #31]

    if (status == HAL_OK)
 800989a:	7ffb      	ldrb	r3, [r7, #31]
 800989c:	2b00      	cmp	r3, #0
 800989e:	d14c      	bne.n	800993a <HAL_OSPI_Command+0x10e>
    {
      /* Initialize error code */
      hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 80098a0:	68fb      	ldr	r3, [r7, #12]
 80098a2:	2200      	movs	r2, #0
 80098a4:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the registers */
      status = OSPI_ConfigCmd(hospi, cmd);
 80098a6:	68b9      	ldr	r1, [r7, #8]
 80098a8:	68f8      	ldr	r0, [r7, #12]
 80098aa:	f000 fe4f 	bl	800a54c <OSPI_ConfigCmd>
 80098ae:	4603      	mov	r3, r0
 80098b0:	77fb      	strb	r3, [r7, #31]

      if (status == HAL_OK)
 80098b2:	7ffb      	ldrb	r3, [r7, #31]
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	d140      	bne.n	800993a <HAL_OSPI_Command+0x10e>
      {
        if (cmd->DataMode == HAL_OSPI_DATA_NONE)
 80098b8:	68bb      	ldr	r3, [r7, #8]
 80098ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098bc:	2b00      	cmp	r3, #0
 80098be:	d10e      	bne.n	80098de <HAL_OSPI_Command+0xb2>
        {
          /* When there is no data phase, the transfer start as soon as the configuration is done
             so wait until TC flag is set to go back in idle state */
          status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, Timeout);
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	9300      	str	r3, [sp, #0]
 80098c4:	69bb      	ldr	r3, [r7, #24]
 80098c6:	2201      	movs	r2, #1
 80098c8:	2102      	movs	r1, #2
 80098ca:	68f8      	ldr	r0, [r7, #12]
 80098cc:	f000 fdfe 	bl	800a4cc <OSPI_WaitFlagStateUntilTimeout>
 80098d0:	4603      	mov	r3, r0
 80098d2:	77fb      	strb	r3, [r7, #31]

          __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 80098d4:	68fb      	ldr	r3, [r7, #12]
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	2202      	movs	r2, #2
 80098da:	625a      	str	r2, [r3, #36]	; 0x24
    if (status == HAL_OK)
 80098dc:	e02d      	b.n	800993a <HAL_OSPI_Command+0x10e>
        }
        else
        {
          /* Update the state */
          if (cmd->OperationType == HAL_OSPI_OPTYPE_COMMON_CFG)
 80098de:	68bb      	ldr	r3, [r7, #8]
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	d103      	bne.n	80098ee <HAL_OSPI_Command+0xc2>
          {
            hospi->State = HAL_OSPI_STATE_CMD_CFG;
 80098e6:	68fb      	ldr	r3, [r7, #12]
 80098e8:	2204      	movs	r2, #4
 80098ea:	651a      	str	r2, [r3, #80]	; 0x50
    if (status == HAL_OK)
 80098ec:	e025      	b.n	800993a <HAL_OSPI_Command+0x10e>
          }
          else if (cmd->OperationType == HAL_OSPI_OPTYPE_READ_CFG)
 80098ee:	68bb      	ldr	r3, [r7, #8]
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	2b01      	cmp	r3, #1
 80098f4:	d10b      	bne.n	800990e <HAL_OSPI_Command+0xe2>
          {
            if (hospi->State == HAL_OSPI_STATE_WRITE_CMD_CFG)
 80098f6:	68fb      	ldr	r3, [r7, #12]
 80098f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80098fa:	2b24      	cmp	r3, #36	; 0x24
 80098fc:	d103      	bne.n	8009906 <HAL_OSPI_Command+0xda>
            {
              hospi->State = HAL_OSPI_STATE_CMD_CFG;
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	2204      	movs	r2, #4
 8009902:	651a      	str	r2, [r3, #80]	; 0x50
    if (status == HAL_OK)
 8009904:	e019      	b.n	800993a <HAL_OSPI_Command+0x10e>
            }
            else
            {
              hospi->State = HAL_OSPI_STATE_READ_CMD_CFG;
 8009906:	68fb      	ldr	r3, [r7, #12]
 8009908:	2214      	movs	r2, #20
 800990a:	651a      	str	r2, [r3, #80]	; 0x50
    if (status == HAL_OK)
 800990c:	e015      	b.n	800993a <HAL_OSPI_Command+0x10e>
            }
          }
          else if (cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG)
 800990e:	68bb      	ldr	r3, [r7, #8]
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	2b02      	cmp	r3, #2
 8009914:	d111      	bne.n	800993a <HAL_OSPI_Command+0x10e>
          {
            if (hospi->State == HAL_OSPI_STATE_READ_CMD_CFG)
 8009916:	68fb      	ldr	r3, [r7, #12]
 8009918:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800991a:	2b14      	cmp	r3, #20
 800991c:	d103      	bne.n	8009926 <HAL_OSPI_Command+0xfa>
            {
              hospi->State = HAL_OSPI_STATE_CMD_CFG;
 800991e:	68fb      	ldr	r3, [r7, #12]
 8009920:	2204      	movs	r2, #4
 8009922:	651a      	str	r2, [r3, #80]	; 0x50
    if (status == HAL_OK)
 8009924:	e009      	b.n	800993a <HAL_OSPI_Command+0x10e>
            }
            else
            {
              hospi->State = HAL_OSPI_STATE_WRITE_CMD_CFG;
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	2224      	movs	r2, #36	; 0x24
 800992a:	651a      	str	r2, [r3, #80]	; 0x50
    if (status == HAL_OK)
 800992c:	e005      	b.n	800993a <HAL_OSPI_Command+0x10e>
      }
    }
  }
  else
  {
    status = HAL_ERROR;
 800992e:	2301      	movs	r3, #1
 8009930:	77fb      	strb	r3, [r7, #31]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8009932:	68fb      	ldr	r3, [r7, #12]
 8009934:	2210      	movs	r2, #16
 8009936:	655a      	str	r2, [r3, #84]	; 0x54
 8009938:	e000      	b.n	800993c <HAL_OSPI_Command+0x110>
    if (status == HAL_OK)
 800993a:	bf00      	nop
  }

  /* Return function status */
  return status;
 800993c:	7ffb      	ldrb	r3, [r7, #31]
}
 800993e:	4618      	mov	r0, r3
 8009940:	3720      	adds	r7, #32
 8009942:	46bd      	mov	sp, r7
 8009944:	bd80      	pop	{r7, pc}

08009946 <HAL_OSPI_MemoryMapped>:
  * @param  cfg   : structure that contains the memory mapped configuration information.
  * @note   This function is used only in Memory mapped Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_MemoryMapped(OSPI_HandleTypeDef *hospi, OSPI_MemoryMappedTypeDef *cfg)
{
 8009946:	b580      	push	{r7, lr}
 8009948:	b086      	sub	sp, #24
 800994a:	af02      	add	r7, sp, #8
 800994c:	6078      	str	r0, [r7, #4]
 800994e:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8009950:	f7fc fdda 	bl	8006508 <HAL_GetTick>
 8009954:	60b8      	str	r0, [r7, #8]

  /* Check the parameters of the memory-mapped configuration structure */
  assert_param(IS_OSPI_TIMEOUT_ACTIVATION(cfg->TimeOutActivation));

  /* Check the state */
  if (hospi->State == HAL_OSPI_STATE_CMD_CFG)
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800995a:	2b04      	cmp	r3, #4
 800995c:	d136      	bne.n	80099cc <HAL_OSPI_MemoryMapped+0x86>
  {
    /* Wait till busy flag is reset */
    status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009962:	9300      	str	r3, [sp, #0]
 8009964:	68bb      	ldr	r3, [r7, #8]
 8009966:	2200      	movs	r2, #0
 8009968:	2120      	movs	r1, #32
 800996a:	6878      	ldr	r0, [r7, #4]
 800996c:	f000 fdae 	bl	800a4cc <OSPI_WaitFlagStateUntilTimeout>
 8009970:	4603      	mov	r3, r0
 8009972:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8009974:	7bfb      	ldrb	r3, [r7, #15]
 8009976:	2b00      	cmp	r3, #0
 8009978:	d12d      	bne.n	80099d6 <HAL_OSPI_MemoryMapped+0x90>
    {
      /* Update state */
      hospi->State = HAL_OSPI_STATE_BUSY_MEM_MAPPED;
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	2288      	movs	r2, #136	; 0x88
 800997e:	651a      	str	r2, [r3, #80]	; 0x50

      if (cfg->TimeOutActivation == HAL_OSPI_TIMEOUT_COUNTER_ENABLE)
 8009980:	683b      	ldr	r3, [r7, #0]
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	2b08      	cmp	r3, #8
 8009986:	d111      	bne.n	80099ac <HAL_OSPI_MemoryMapped+0x66>
      {
        assert_param(IS_OSPI_TIMEOUT_PERIOD(cfg->TimeOutPeriod));

        /* Configure register */
        WRITE_REG(hospi->Instance->LPTR, cfg->TimeOutPeriod);
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	683a      	ldr	r2, [r7, #0]
 800998e:	6852      	ldr	r2, [r2, #4]
 8009990:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130

        /* Clear flags related to interrupt */
        __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TO);
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	2210      	movs	r2, #16
 800999a:	625a      	str	r2, [r3, #36]	; 0x24

        /* Enable the timeout interrupt */
        __HAL_OSPI_ENABLE_IT(hospi, HAL_OSPI_IT_TO);
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	681a      	ldr	r2, [r3, #0]
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80099aa:	601a      	str	r2, [r3, #0]
      }

      /* Configure CR register with functional mode as memory-mapped */
      MODIFY_REG(hospi->Instance->CR, (OCTOSPI_CR_TCEN | OCTOSPI_CR_FMODE),
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 80099b6:	f023 0308 	bic.w	r3, r3, #8
 80099ba:	683a      	ldr	r2, [r7, #0]
 80099bc:	6812      	ldr	r2, [r2, #0]
 80099be:	431a      	orrs	r2, r3
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 80099c8:	601a      	str	r2, [r3, #0]
 80099ca:	e004      	b.n	80099d6 <HAL_OSPI_MemoryMapped+0x90>
                 (cfg->TimeOutActivation | OSPI_FUNCTIONAL_MODE_MEMORY_MAPPED));
    }
  }
  else
  {
    status = HAL_ERROR;
 80099cc:	2301      	movs	r3, #1
 80099ce:	73fb      	strb	r3, [r7, #15]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	2210      	movs	r2, #16
 80099d4:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Return function status */
  return status;
 80099d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80099d8:	4618      	mov	r0, r3
 80099da:	3710      	adds	r7, #16
 80099dc:	46bd      	mov	sp, r7
 80099de:	bd80      	pop	{r7, pc}

080099e0 <HAL_OSPI_Abort>:
  * @brief  Abort the current transmission.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Abort(OSPI_HandleTypeDef *hospi)
{
 80099e0:	b580      	push	{r7, lr}
 80099e2:	b088      	sub	sp, #32
 80099e4:	af02      	add	r7, sp, #8
 80099e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80099e8:	2300      	movs	r3, #0
 80099ea:	75fb      	strb	r3, [r7, #23]
  uint32_t state;
  uint32_t tickstart = HAL_GetTick();
 80099ec:	f7fc fd8c 	bl	8006508 <HAL_GetTick>
 80099f0:	6138      	str	r0, [r7, #16]

  /* Check if the state is in one of the busy or configured states */
  state = hospi->State;
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80099f6:	60fb      	str	r3, [r7, #12]
  if (((state & OSPI_BUSY_STATE_MASK) != 0U) || ((state & OSPI_CFG_STATE_MASK) != 0U))
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	f003 0308 	and.w	r3, r3, #8
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	d104      	bne.n	8009a0c <HAL_OSPI_Abort+0x2c>
 8009a02:	68fb      	ldr	r3, [r7, #12]
 8009a04:	f003 0304 	and.w	r3, r3, #4
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	d052      	beq.n	8009ab2 <HAL_OSPI_Abort+0xd2>
  {
    /* Check if the DMA is enabled */
    if ((hospi->Instance->CR & OCTOSPI_CR_DMAEN) != 0U)
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	f003 0304 	and.w	r3, r3, #4
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	d014      	beq.n	8009a44 <HAL_OSPI_Abort+0x64>
    {
      /* Disable the DMA transfer on the OctoSPI side */
      CLEAR_BIT(hospi->Instance->CR, OCTOSPI_CR_DMAEN);
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	681a      	ldr	r2, [r3, #0]
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	f022 0204 	bic.w	r2, r2, #4
 8009a28:	601a      	str	r2, [r3, #0]

      /* Disable the DMA transfer on the DMA side */
      status = HAL_DMA_Abort(hospi->hdma);
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009a2e:	4618      	mov	r0, r3
 8009a30:	f7fd fb31 	bl	8007096 <HAL_DMA_Abort>
 8009a34:	4603      	mov	r3, r0
 8009a36:	75fb      	strb	r3, [r7, #23]
      if (status != HAL_OK)
 8009a38:	7dfb      	ldrb	r3, [r7, #23]
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	d002      	beq.n	8009a44 <HAL_OSPI_Abort+0x64>
      {
        hospi->ErrorCode = HAL_OSPI_ERROR_DMA;
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	2204      	movs	r2, #4
 8009a42:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }

    if (__HAL_OSPI_GET_FLAG(hospi, HAL_OSPI_FLAG_BUSY) != RESET)
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	6a1b      	ldr	r3, [r3, #32]
 8009a4a:	f003 0320 	and.w	r3, r3, #32
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	d02b      	beq.n	8009aaa <HAL_OSPI_Abort+0xca>
    {
      /* Perform an abort of the OctoSPI */
      SET_BIT(hospi->Instance->CR, OCTOSPI_CR_ABORT);
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	681a      	ldr	r2, [r3, #0]
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	f042 0202 	orr.w	r2, r2, #2
 8009a60:	601a      	str	r2, [r3, #0]

      /* Wait until the transfer complete flag is set to go back in idle state */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, hospi->Timeout);
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009a66:	9300      	str	r3, [sp, #0]
 8009a68:	693b      	ldr	r3, [r7, #16]
 8009a6a:	2201      	movs	r2, #1
 8009a6c:	2102      	movs	r1, #2
 8009a6e:	6878      	ldr	r0, [r7, #4]
 8009a70:	f000 fd2c 	bl	800a4cc <OSPI_WaitFlagStateUntilTimeout>
 8009a74:	4603      	mov	r3, r0
 8009a76:	75fb      	strb	r3, [r7, #23]

      if (status == HAL_OK)
 8009a78:	7dfb      	ldrb	r3, [r7, #23]
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	d11f      	bne.n	8009abe <HAL_OSPI_Abort+0xde>
      {
        /* Clear transfer complete flag */
        __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	2202      	movs	r2, #2
 8009a84:	625a      	str	r2, [r3, #36]	; 0x24

        /* Wait until the busy flag is reset to go back in idle state */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009a8a:	9300      	str	r3, [sp, #0]
 8009a8c:	693b      	ldr	r3, [r7, #16]
 8009a8e:	2200      	movs	r2, #0
 8009a90:	2120      	movs	r1, #32
 8009a92:	6878      	ldr	r0, [r7, #4]
 8009a94:	f000 fd1a 	bl	800a4cc <OSPI_WaitFlagStateUntilTimeout>
 8009a98:	4603      	mov	r3, r0
 8009a9a:	75fb      	strb	r3, [r7, #23]

        if (status == HAL_OK)
 8009a9c:	7dfb      	ldrb	r3, [r7, #23]
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d10d      	bne.n	8009abe <HAL_OSPI_Abort+0xde>
        {
          /* Update state */
          hospi->State = HAL_OSPI_STATE_READY;
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	2202      	movs	r2, #2
 8009aa6:	651a      	str	r2, [r3, #80]	; 0x50
    if (__HAL_OSPI_GET_FLAG(hospi, HAL_OSPI_FLAG_BUSY) != RESET)
 8009aa8:	e009      	b.n	8009abe <HAL_OSPI_Abort+0xde>
      }
    }
    else
    {
      /* Update state */
      hospi->State = HAL_OSPI_STATE_READY;
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	2202      	movs	r2, #2
 8009aae:	651a      	str	r2, [r3, #80]	; 0x50
    if (__HAL_OSPI_GET_FLAG(hospi, HAL_OSPI_FLAG_BUSY) != RESET)
 8009ab0:	e005      	b.n	8009abe <HAL_OSPI_Abort+0xde>
    }
  }
  else
  {
    status = HAL_ERROR;
 8009ab2:	2301      	movs	r3, #1
 8009ab4:	75fb      	strb	r3, [r7, #23]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	2210      	movs	r2, #16
 8009aba:	655a      	str	r2, [r3, #84]	; 0x54
 8009abc:	e000      	b.n	8009ac0 <HAL_OSPI_Abort+0xe0>
    if (__HAL_OSPI_GET_FLAG(hospi, HAL_OSPI_FLAG_BUSY) != RESET)
 8009abe:	bf00      	nop
  }

  /* Return function status */
  return status;
 8009ac0:	7dfb      	ldrb	r3, [r7, #23]
}
 8009ac2:	4618      	mov	r0, r3
 8009ac4:	3718      	adds	r7, #24
 8009ac6:	46bd      	mov	sp, r7
 8009ac8:	bd80      	pop	{r7, pc}

08009aca <HAL_OSPI_SetTimeout>:
  * @param  hospi   : OSPI handle.
  * @param  Timeout : Timeout for the memory access.
  * @retval None
  */
HAL_StatusTypeDef HAL_OSPI_SetTimeout(OSPI_HandleTypeDef *hospi, uint32_t Timeout)
{
 8009aca:	b480      	push	{r7}
 8009acc:	b083      	sub	sp, #12
 8009ace:	af00      	add	r7, sp, #0
 8009ad0:	6078      	str	r0, [r7, #4]
 8009ad2:	6039      	str	r1, [r7, #0]
  hospi->Timeout = Timeout;
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	683a      	ldr	r2, [r7, #0]
 8009ad8:	659a      	str	r2, [r3, #88]	; 0x58
  return HAL_OK;
 8009ada:	2300      	movs	r3, #0
}
 8009adc:	4618      	mov	r0, r3
 8009ade:	370c      	adds	r7, #12
 8009ae0:	46bd      	mov	sp, r7
 8009ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ae6:	4770      	bx	lr

08009ae8 <HAL_OSPIM_Config>:
  * @param  cfg     : Configuration of the IO Manager for the instance
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPIM_Config(OSPI_HandleTypeDef *hospi, OSPIM_CfgTypeDef *cfg, uint32_t Timeout)
{
 8009ae8:	b580      	push	{r7, lr}
 8009aea:	b094      	sub	sp, #80	; 0x50
 8009aec:	af00      	add	r7, sp, #0
 8009aee:	60f8      	str	r0, [r7, #12]
 8009af0:	60b9      	str	r1, [r7, #8]
 8009af2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009af4:	2300      	movs	r3, #0
 8009af6:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  uint32_t instance;
  uint8_t index;
  uint8_t ospi_enabled = 0U;
 8009afa:	2300      	movs	r3, #0
 8009afc:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
  assert_param(IS_OSPIM_DQS_PORT(cfg->DQSPort));
  assert_param(IS_OSPIM_PORT(cfg->NCSPort));
  assert_param(IS_OSPIM_IO_PORT(cfg->IOLowPort));
  assert_param(IS_OSPIM_IO_PORT(cfg->IOHighPort));

  if (hospi->Instance == (OCTOSPI_TypeDef *)OCTOSPI1)
 8009b00:	68fb      	ldr	r3, [r7, #12]
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	4a9d      	ldr	r2, [pc, #628]	; (8009d7c <HAL_OSPIM_Config+0x294>)
 8009b06:	4293      	cmp	r3, r2
 8009b08:	d105      	bne.n	8009b16 <HAL_OSPIM_Config+0x2e>
  {
    instance = 0U;
 8009b0a:	2300      	movs	r3, #0
 8009b0c:	64bb      	str	r3, [r7, #72]	; 0x48
    other_instance = 1U;
 8009b0e:	2301      	movs	r3, #1
 8009b10:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 8009b14:	e004      	b.n	8009b20 <HAL_OSPIM_Config+0x38>
  }
  else
  {
    instance = 1U;
 8009b16:	2301      	movs	r3, #1
 8009b18:	64bb      	str	r3, [r7, #72]	; 0x48
    other_instance = 0U;
 8009b1a:	2300      	movs	r3, #0
 8009b1c:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  }

  /**************** Get current configuration of the instances ****************/
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 8009b20:	2300      	movs	r3, #0
 8009b22:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8009b26:	e01d      	b.n	8009b64 <HAL_OSPIM_Config+0x7c>
  {
    if (OSPIM_GetConfig(index + 1U, &(IOM_cfg[index])) != HAL_OK)
 8009b28:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8009b2c:	3301      	adds	r3, #1
 8009b2e:	b2d8      	uxtb	r0, r3
 8009b30:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 8009b34:	f107 0114 	add.w	r1, r7, #20
 8009b38:	4613      	mov	r3, r2
 8009b3a:	005b      	lsls	r3, r3, #1
 8009b3c:	4413      	add	r3, r2
 8009b3e:	00db      	lsls	r3, r3, #3
 8009b40:	440b      	add	r3, r1
 8009b42:	4619      	mov	r1, r3
 8009b44:	f000 fe7c 	bl	800a840 <OSPIM_GetConfig>
 8009b48:	4603      	mov	r3, r0
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	d005      	beq.n	8009b5a <HAL_OSPIM_Config+0x72>
    {
      status = HAL_ERROR;
 8009b4e:	2301      	movs	r3, #1
 8009b50:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 8009b54:	68fb      	ldr	r3, [r7, #12]
 8009b56:	2208      	movs	r2, #8
 8009b58:	655a      	str	r2, [r3, #84]	; 0x54
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 8009b5a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8009b5e:	3301      	adds	r3, #1
 8009b60:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8009b64:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8009b68:	2b01      	cmp	r3, #1
 8009b6a:	d9dd      	bls.n	8009b28 <HAL_OSPIM_Config+0x40>
    }
  }

  if (status == HAL_OK)
 8009b6c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	f040 849e 	bne.w	800a4b2 <HAL_OSPIM_Config+0x9ca>
  {
    /********** Disable both OctoSPI to configure OctoSPI IO Manager **********/
    if ((OCTOSPI1->CR & OCTOSPI_CR_EN) != 0U)
 8009b76:	4b81      	ldr	r3, [pc, #516]	; (8009d7c <HAL_OSPIM_Config+0x294>)
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	f003 0301 	and.w	r3, r3, #1
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	d00b      	beq.n	8009b9a <HAL_OSPIM_Config+0xb2>
    {
      CLEAR_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 8009b82:	4b7e      	ldr	r3, [pc, #504]	; (8009d7c <HAL_OSPIM_Config+0x294>)
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	4a7d      	ldr	r2, [pc, #500]	; (8009d7c <HAL_OSPIM_Config+0x294>)
 8009b88:	f023 0301 	bic.w	r3, r3, #1
 8009b8c:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x1U;
 8009b8e:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8009b92:	f043 0301 	orr.w	r3, r3, #1
 8009b96:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    }
    if ((OCTOSPI2->CR & OCTOSPI_CR_EN) != 0U)
 8009b9a:	4b79      	ldr	r3, [pc, #484]	; (8009d80 <HAL_OSPIM_Config+0x298>)
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	f003 0301 	and.w	r3, r3, #1
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	d00b      	beq.n	8009bbe <HAL_OSPIM_Config+0xd6>
    {
      CLEAR_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 8009ba6:	4b76      	ldr	r3, [pc, #472]	; (8009d80 <HAL_OSPIM_Config+0x298>)
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	4a75      	ldr	r2, [pc, #468]	; (8009d80 <HAL_OSPIM_Config+0x298>)
 8009bac:	f023 0301 	bic.w	r3, r3, #1
 8009bb0:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x2U;
 8009bb2:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8009bb6:	f043 0302 	orr.w	r3, r3, #2
 8009bba:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    }

    /***************** Deactivation of previous configuration *****************/
    CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].NCSPort - 1U)], OCTOSPIM_PCR_NCSEN);
 8009bbe:	4971      	ldr	r1, [pc, #452]	; (8009d84 <HAL_OSPIM_Config+0x29c>)
 8009bc0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009bc2:	4613      	mov	r3, r2
 8009bc4:	005b      	lsls	r3, r3, #1
 8009bc6:	4413      	add	r3, r2
 8009bc8:	00db      	lsls	r3, r3, #3
 8009bca:	3350      	adds	r3, #80	; 0x50
 8009bcc:	443b      	add	r3, r7
 8009bce:	3b34      	subs	r3, #52	; 0x34
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	3b01      	subs	r3, #1
 8009bd4:	009b      	lsls	r3, r3, #2
 8009bd6:	440b      	add	r3, r1
 8009bd8:	6859      	ldr	r1, [r3, #4]
 8009bda:	486a      	ldr	r0, [pc, #424]	; (8009d84 <HAL_OSPIM_Config+0x29c>)
 8009bdc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009bde:	4613      	mov	r3, r2
 8009be0:	005b      	lsls	r3, r3, #1
 8009be2:	4413      	add	r3, r2
 8009be4:	00db      	lsls	r3, r3, #3
 8009be6:	3350      	adds	r3, #80	; 0x50
 8009be8:	443b      	add	r3, r7
 8009bea:	3b34      	subs	r3, #52	; 0x34
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	3b01      	subs	r3, #1
 8009bf0:	f421 7280 	bic.w	r2, r1, #256	; 0x100
 8009bf4:	009b      	lsls	r3, r3, #2
 8009bf6:	4403      	add	r3, r0
 8009bf8:	605a      	str	r2, [r3, #4]
    if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) != 0U)
 8009bfa:	4b62      	ldr	r3, [pc, #392]	; (8009d84 <HAL_OSPIM_Config+0x29c>)
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	f003 0301 	and.w	r3, r3, #1
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	f000 80c0 	beq.w	8009d88 <HAL_OSPIM_Config+0x2a0>
    {
      /* De-multiplexing should be performed */
      CLEAR_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
 8009c08:	4b5e      	ldr	r3, [pc, #376]	; (8009d84 <HAL_OSPIM_Config+0x29c>)
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	4a5d      	ldr	r2, [pc, #372]	; (8009d84 <HAL_OSPIM_Config+0x29c>)
 8009c0e:	f023 0301 	bic.w	r3, r3, #1
 8009c12:	6013      	str	r3, [r2, #0]

      if (other_instance == 1U)
 8009c14:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8009c18:	2b01      	cmp	r3, #1
 8009c1a:	f040 8162 	bne.w	8009ee2 <HAL_OSPIM_Config+0x3fa>
      {
        SET_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKSRC);
 8009c1e:	4959      	ldr	r1, [pc, #356]	; (8009d84 <HAL_OSPIM_Config+0x29c>)
 8009c20:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8009c24:	4613      	mov	r3, r2
 8009c26:	005b      	lsls	r3, r3, #1
 8009c28:	4413      	add	r3, r2
 8009c2a:	00db      	lsls	r3, r3, #3
 8009c2c:	3350      	adds	r3, #80	; 0x50
 8009c2e:	443b      	add	r3, r7
 8009c30:	3b3c      	subs	r3, #60	; 0x3c
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	3b01      	subs	r3, #1
 8009c36:	009b      	lsls	r3, r3, #2
 8009c38:	440b      	add	r3, r1
 8009c3a:	6859      	ldr	r1, [r3, #4]
 8009c3c:	4851      	ldr	r0, [pc, #324]	; (8009d84 <HAL_OSPIM_Config+0x29c>)
 8009c3e:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8009c42:	4613      	mov	r3, r2
 8009c44:	005b      	lsls	r3, r3, #1
 8009c46:	4413      	add	r3, r2
 8009c48:	00db      	lsls	r3, r3, #3
 8009c4a:	3350      	adds	r3, #80	; 0x50
 8009c4c:	443b      	add	r3, r7
 8009c4e:	3b3c      	subs	r3, #60	; 0x3c
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	3b01      	subs	r3, #1
 8009c54:	f041 0202 	orr.w	r2, r1, #2
 8009c58:	009b      	lsls	r3, r3, #2
 8009c5a:	4403      	add	r3, r0
 8009c5c:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 8009c5e:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8009c62:	4613      	mov	r3, r2
 8009c64:	005b      	lsls	r3, r3, #1
 8009c66:	4413      	add	r3, r2
 8009c68:	00db      	lsls	r3, r3, #3
 8009c6a:	3350      	adds	r3, #80	; 0x50
 8009c6c:	443b      	add	r3, r7
 8009c6e:	3b38      	subs	r3, #56	; 0x38
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	d01f      	beq.n	8009cb6 <HAL_OSPIM_Config+0x1ce>
        {
          SET_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSSRC);
 8009c76:	4943      	ldr	r1, [pc, #268]	; (8009d84 <HAL_OSPIM_Config+0x29c>)
 8009c78:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8009c7c:	4613      	mov	r3, r2
 8009c7e:	005b      	lsls	r3, r3, #1
 8009c80:	4413      	add	r3, r2
 8009c82:	00db      	lsls	r3, r3, #3
 8009c84:	3350      	adds	r3, #80	; 0x50
 8009c86:	443b      	add	r3, r7
 8009c88:	3b38      	subs	r3, #56	; 0x38
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	3b01      	subs	r3, #1
 8009c8e:	009b      	lsls	r3, r3, #2
 8009c90:	440b      	add	r3, r1
 8009c92:	6859      	ldr	r1, [r3, #4]
 8009c94:	483b      	ldr	r0, [pc, #236]	; (8009d84 <HAL_OSPIM_Config+0x29c>)
 8009c96:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8009c9a:	4613      	mov	r3, r2
 8009c9c:	005b      	lsls	r3, r3, #1
 8009c9e:	4413      	add	r3, r2
 8009ca0:	00db      	lsls	r3, r3, #3
 8009ca2:	3350      	adds	r3, #80	; 0x50
 8009ca4:	443b      	add	r3, r7
 8009ca6:	3b38      	subs	r3, #56	; 0x38
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	3b01      	subs	r3, #1
 8009cac:	f041 0220 	orr.w	r2, r1, #32
 8009cb0:	009b      	lsls	r3, r3, #2
 8009cb2:	4403      	add	r3, r0
 8009cb4:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8009cb6:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8009cba:	4613      	mov	r3, r2
 8009cbc:	005b      	lsls	r3, r3, #1
 8009cbe:	4413      	add	r3, r2
 8009cc0:	00db      	lsls	r3, r3, #3
 8009cc2:	3350      	adds	r3, #80	; 0x50
 8009cc4:	443b      	add	r3, r7
 8009cc6:	3b30      	subs	r3, #48	; 0x30
 8009cc8:	681b      	ldr	r3, [r3, #0]
 8009cca:	2b00      	cmp	r3, #0
 8009ccc:	d023      	beq.n	8009d16 <HAL_OSPIM_Config+0x22e>
        {
          SET_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 8009cce:	492d      	ldr	r1, [pc, #180]	; (8009d84 <HAL_OSPIM_Config+0x29c>)
 8009cd0:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8009cd4:	4613      	mov	r3, r2
 8009cd6:	005b      	lsls	r3, r3, #1
 8009cd8:	4413      	add	r3, r2
 8009cda:	00db      	lsls	r3, r3, #3
 8009cdc:	3350      	adds	r3, #80	; 0x50
 8009cde:	443b      	add	r3, r7
 8009ce0:	3b30      	subs	r3, #48	; 0x30
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	3b01      	subs	r3, #1
 8009ce6:	f003 0301 	and.w	r3, r3, #1
 8009cea:	009b      	lsls	r3, r3, #2
 8009cec:	440b      	add	r3, r1
 8009cee:	6859      	ldr	r1, [r3, #4]
 8009cf0:	4824      	ldr	r0, [pc, #144]	; (8009d84 <HAL_OSPIM_Config+0x29c>)
 8009cf2:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8009cf6:	4613      	mov	r3, r2
 8009cf8:	005b      	lsls	r3, r3, #1
 8009cfa:	4413      	add	r3, r2
 8009cfc:	00db      	lsls	r3, r3, #3
 8009cfe:	3350      	adds	r3, #80	; 0x50
 8009d00:	443b      	add	r3, r7
 8009d02:	3b30      	subs	r3, #48	; 0x30
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	3b01      	subs	r3, #1
 8009d08:	f003 0301 	and.w	r3, r3, #1
 8009d0c:	f441 2280 	orr.w	r2, r1, #262144	; 0x40000
 8009d10:	009b      	lsls	r3, r3, #2
 8009d12:	4403      	add	r3, r0
 8009d14:	605a      	str	r2, [r3, #4]
                  OCTOSPIM_PCR_IOLSRC_1);
        }
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8009d16:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8009d1a:	4613      	mov	r3, r2
 8009d1c:	005b      	lsls	r3, r3, #1
 8009d1e:	4413      	add	r3, r2
 8009d20:	00db      	lsls	r3, r3, #3
 8009d22:	3350      	adds	r3, #80	; 0x50
 8009d24:	443b      	add	r3, r7
 8009d26:	3b2c      	subs	r3, #44	; 0x2c
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	f000 80d9 	beq.w	8009ee2 <HAL_OSPIM_Config+0x3fa>
        {
          SET_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 8009d30:	4914      	ldr	r1, [pc, #80]	; (8009d84 <HAL_OSPIM_Config+0x29c>)
 8009d32:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8009d36:	4613      	mov	r3, r2
 8009d38:	005b      	lsls	r3, r3, #1
 8009d3a:	4413      	add	r3, r2
 8009d3c:	00db      	lsls	r3, r3, #3
 8009d3e:	3350      	adds	r3, #80	; 0x50
 8009d40:	443b      	add	r3, r7
 8009d42:	3b2c      	subs	r3, #44	; 0x2c
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	3b01      	subs	r3, #1
 8009d48:	f003 0301 	and.w	r3, r3, #1
 8009d4c:	009b      	lsls	r3, r3, #2
 8009d4e:	440b      	add	r3, r1
 8009d50:	6859      	ldr	r1, [r3, #4]
 8009d52:	480c      	ldr	r0, [pc, #48]	; (8009d84 <HAL_OSPIM_Config+0x29c>)
 8009d54:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8009d58:	4613      	mov	r3, r2
 8009d5a:	005b      	lsls	r3, r3, #1
 8009d5c:	4413      	add	r3, r2
 8009d5e:	00db      	lsls	r3, r3, #3
 8009d60:	3350      	adds	r3, #80	; 0x50
 8009d62:	443b      	add	r3, r7
 8009d64:	3b2c      	subs	r3, #44	; 0x2c
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	3b01      	subs	r3, #1
 8009d6a:	f003 0301 	and.w	r3, r3, #1
 8009d6e:	f041 6280 	orr.w	r2, r1, #67108864	; 0x4000000
 8009d72:	009b      	lsls	r3, r3, #2
 8009d74:	4403      	add	r3, r0
 8009d76:	605a      	str	r2, [r3, #4]
 8009d78:	e0b3      	b.n	8009ee2 <HAL_OSPIM_Config+0x3fa>
 8009d7a:	bf00      	nop
 8009d7c:	420d1400 	.word	0x420d1400
 8009d80:	420d2400 	.word	0x420d2400
 8009d84:	420c4000 	.word	0x420c4000
        }
      }
    }
    else
    {
      if (IOM_cfg[instance].ClkPort != 0U)
 8009d88:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009d8a:	4613      	mov	r3, r2
 8009d8c:	005b      	lsls	r3, r3, #1
 8009d8e:	4413      	add	r3, r2
 8009d90:	00db      	lsls	r3, r3, #3
 8009d92:	3350      	adds	r3, #80	; 0x50
 8009d94:	443b      	add	r3, r7
 8009d96:	3b3c      	subs	r3, #60	; 0x3c
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	2b00      	cmp	r3, #0
 8009d9c:	f000 80a1 	beq.w	8009ee2 <HAL_OSPIM_Config+0x3fa>
      {
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKEN);
 8009da0:	4993      	ldr	r1, [pc, #588]	; (8009ff0 <HAL_OSPIM_Config+0x508>)
 8009da2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009da4:	4613      	mov	r3, r2
 8009da6:	005b      	lsls	r3, r3, #1
 8009da8:	4413      	add	r3, r2
 8009daa:	00db      	lsls	r3, r3, #3
 8009dac:	3350      	adds	r3, #80	; 0x50
 8009dae:	443b      	add	r3, r7
 8009db0:	3b3c      	subs	r3, #60	; 0x3c
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	3b01      	subs	r3, #1
 8009db6:	009b      	lsls	r3, r3, #2
 8009db8:	440b      	add	r3, r1
 8009dba:	6859      	ldr	r1, [r3, #4]
 8009dbc:	488c      	ldr	r0, [pc, #560]	; (8009ff0 <HAL_OSPIM_Config+0x508>)
 8009dbe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009dc0:	4613      	mov	r3, r2
 8009dc2:	005b      	lsls	r3, r3, #1
 8009dc4:	4413      	add	r3, r2
 8009dc6:	00db      	lsls	r3, r3, #3
 8009dc8:	3350      	adds	r3, #80	; 0x50
 8009dca:	443b      	add	r3, r7
 8009dcc:	3b3c      	subs	r3, #60	; 0x3c
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	3b01      	subs	r3, #1
 8009dd2:	f021 0201 	bic.w	r2, r1, #1
 8009dd6:	009b      	lsls	r3, r3, #2
 8009dd8:	4403      	add	r3, r0
 8009dda:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[instance].DQSPort != 0U)
 8009ddc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009dde:	4613      	mov	r3, r2
 8009de0:	005b      	lsls	r3, r3, #1
 8009de2:	4413      	add	r3, r2
 8009de4:	00db      	lsls	r3, r3, #3
 8009de6:	3350      	adds	r3, #80	; 0x50
 8009de8:	443b      	add	r3, r7
 8009dea:	3b38      	subs	r3, #56	; 0x38
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	d01d      	beq.n	8009e2e <HAL_OSPIM_Config+0x346>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSEN);
 8009df2:	497f      	ldr	r1, [pc, #508]	; (8009ff0 <HAL_OSPIM_Config+0x508>)
 8009df4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009df6:	4613      	mov	r3, r2
 8009df8:	005b      	lsls	r3, r3, #1
 8009dfa:	4413      	add	r3, r2
 8009dfc:	00db      	lsls	r3, r3, #3
 8009dfe:	3350      	adds	r3, #80	; 0x50
 8009e00:	443b      	add	r3, r7
 8009e02:	3b38      	subs	r3, #56	; 0x38
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	3b01      	subs	r3, #1
 8009e08:	009b      	lsls	r3, r3, #2
 8009e0a:	440b      	add	r3, r1
 8009e0c:	6859      	ldr	r1, [r3, #4]
 8009e0e:	4878      	ldr	r0, [pc, #480]	; (8009ff0 <HAL_OSPIM_Config+0x508>)
 8009e10:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009e12:	4613      	mov	r3, r2
 8009e14:	005b      	lsls	r3, r3, #1
 8009e16:	4413      	add	r3, r2
 8009e18:	00db      	lsls	r3, r3, #3
 8009e1a:	3350      	adds	r3, #80	; 0x50
 8009e1c:	443b      	add	r3, r7
 8009e1e:	3b38      	subs	r3, #56	; 0x38
 8009e20:	681b      	ldr	r3, [r3, #0]
 8009e22:	3b01      	subs	r3, #1
 8009e24:	f021 0210 	bic.w	r2, r1, #16
 8009e28:	009b      	lsls	r3, r3, #2
 8009e2a:	4403      	add	r3, r0
 8009e2c:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8009e2e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009e30:	4613      	mov	r3, r2
 8009e32:	005b      	lsls	r3, r3, #1
 8009e34:	4413      	add	r3, r2
 8009e36:	00db      	lsls	r3, r3, #3
 8009e38:	3350      	adds	r3, #80	; 0x50
 8009e3a:	443b      	add	r3, r7
 8009e3c:	3b30      	subs	r3, #48	; 0x30
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	d021      	beq.n	8009e88 <HAL_OSPIM_Config+0x3a0>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOLEN);
 8009e44:	496a      	ldr	r1, [pc, #424]	; (8009ff0 <HAL_OSPIM_Config+0x508>)
 8009e46:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009e48:	4613      	mov	r3, r2
 8009e4a:	005b      	lsls	r3, r3, #1
 8009e4c:	4413      	add	r3, r2
 8009e4e:	00db      	lsls	r3, r3, #3
 8009e50:	3350      	adds	r3, #80	; 0x50
 8009e52:	443b      	add	r3, r7
 8009e54:	3b30      	subs	r3, #48	; 0x30
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	3b01      	subs	r3, #1
 8009e5a:	f003 0301 	and.w	r3, r3, #1
 8009e5e:	009b      	lsls	r3, r3, #2
 8009e60:	440b      	add	r3, r1
 8009e62:	6859      	ldr	r1, [r3, #4]
 8009e64:	4862      	ldr	r0, [pc, #392]	; (8009ff0 <HAL_OSPIM_Config+0x508>)
 8009e66:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009e68:	4613      	mov	r3, r2
 8009e6a:	005b      	lsls	r3, r3, #1
 8009e6c:	4413      	add	r3, r2
 8009e6e:	00db      	lsls	r3, r3, #3
 8009e70:	3350      	adds	r3, #80	; 0x50
 8009e72:	443b      	add	r3, r7
 8009e74:	3b30      	subs	r3, #48	; 0x30
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	3b01      	subs	r3, #1
 8009e7a:	f003 0301 	and.w	r3, r3, #1
 8009e7e:	f421 3280 	bic.w	r2, r1, #65536	; 0x10000
 8009e82:	009b      	lsls	r3, r3, #2
 8009e84:	4403      	add	r3, r0
 8009e86:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8009e88:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009e8a:	4613      	mov	r3, r2
 8009e8c:	005b      	lsls	r3, r3, #1
 8009e8e:	4413      	add	r3, r2
 8009e90:	00db      	lsls	r3, r3, #3
 8009e92:	3350      	adds	r3, #80	; 0x50
 8009e94:	443b      	add	r3, r7
 8009e96:	3b2c      	subs	r3, #44	; 0x2c
 8009e98:	681b      	ldr	r3, [r3, #0]
 8009e9a:	2b00      	cmp	r3, #0
 8009e9c:	d021      	beq.n	8009ee2 <HAL_OSPIM_Config+0x3fa>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOHEN);
 8009e9e:	4954      	ldr	r1, [pc, #336]	; (8009ff0 <HAL_OSPIM_Config+0x508>)
 8009ea0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009ea2:	4613      	mov	r3, r2
 8009ea4:	005b      	lsls	r3, r3, #1
 8009ea6:	4413      	add	r3, r2
 8009ea8:	00db      	lsls	r3, r3, #3
 8009eaa:	3350      	adds	r3, #80	; 0x50
 8009eac:	443b      	add	r3, r7
 8009eae:	3b2c      	subs	r3, #44	; 0x2c
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	3b01      	subs	r3, #1
 8009eb4:	f003 0301 	and.w	r3, r3, #1
 8009eb8:	009b      	lsls	r3, r3, #2
 8009eba:	440b      	add	r3, r1
 8009ebc:	6859      	ldr	r1, [r3, #4]
 8009ebe:	484c      	ldr	r0, [pc, #304]	; (8009ff0 <HAL_OSPIM_Config+0x508>)
 8009ec0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009ec2:	4613      	mov	r3, r2
 8009ec4:	005b      	lsls	r3, r3, #1
 8009ec6:	4413      	add	r3, r2
 8009ec8:	00db      	lsls	r3, r3, #3
 8009eca:	3350      	adds	r3, #80	; 0x50
 8009ecc:	443b      	add	r3, r7
 8009ece:	3b2c      	subs	r3, #44	; 0x2c
 8009ed0:	681b      	ldr	r3, [r3, #0]
 8009ed2:	3b01      	subs	r3, #1
 8009ed4:	f003 0301 	and.w	r3, r3, #1
 8009ed8:	f021 7280 	bic.w	r2, r1, #16777216	; 0x1000000
 8009edc:	009b      	lsls	r3, r3, #2
 8009ede:	4403      	add	r3, r0
 8009ee0:	605a      	str	r2, [r3, #4]
        }
      }
    }

    /********************* Deactivation of other instance *********************/
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 8009ee2:	68bb      	ldr	r3, [r7, #8]
 8009ee4:	6819      	ldr	r1, [r3, #0]
 8009ee6:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8009eea:	4613      	mov	r3, r2
 8009eec:	005b      	lsls	r3, r3, #1
 8009eee:	4413      	add	r3, r2
 8009ef0:	00db      	lsls	r3, r3, #3
 8009ef2:	3350      	adds	r3, #80	; 0x50
 8009ef4:	443b      	add	r3, r7
 8009ef6:	3b3c      	subs	r3, #60	; 0x3c
 8009ef8:	681b      	ldr	r3, [r3, #0]
 8009efa:	4299      	cmp	r1, r3
 8009efc:	d038      	beq.n	8009f70 <HAL_OSPIM_Config+0x488>
 8009efe:	68bb      	ldr	r3, [r7, #8]
 8009f00:	6859      	ldr	r1, [r3, #4]
 8009f02:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8009f06:	4613      	mov	r3, r2
 8009f08:	005b      	lsls	r3, r3, #1
 8009f0a:	4413      	add	r3, r2
 8009f0c:	00db      	lsls	r3, r3, #3
 8009f0e:	3350      	adds	r3, #80	; 0x50
 8009f10:	443b      	add	r3, r7
 8009f12:	3b38      	subs	r3, #56	; 0x38
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	4299      	cmp	r1, r3
 8009f18:	d02a      	beq.n	8009f70 <HAL_OSPIM_Config+0x488>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8009f1a:	68bb      	ldr	r3, [r7, #8]
 8009f1c:	6899      	ldr	r1, [r3, #8]
 8009f1e:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8009f22:	4613      	mov	r3, r2
 8009f24:	005b      	lsls	r3, r3, #1
 8009f26:	4413      	add	r3, r2
 8009f28:	00db      	lsls	r3, r3, #3
 8009f2a:	3350      	adds	r3, #80	; 0x50
 8009f2c:	443b      	add	r3, r7
 8009f2e:	3b34      	subs	r3, #52	; 0x34
 8009f30:	681b      	ldr	r3, [r3, #0]
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 8009f32:	4299      	cmp	r1, r3
 8009f34:	d01c      	beq.n	8009f70 <HAL_OSPIM_Config+0x488>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8009f36:	68bb      	ldr	r3, [r7, #8]
 8009f38:	68d9      	ldr	r1, [r3, #12]
 8009f3a:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8009f3e:	4613      	mov	r3, r2
 8009f40:	005b      	lsls	r3, r3, #1
 8009f42:	4413      	add	r3, r2
 8009f44:	00db      	lsls	r3, r3, #3
 8009f46:	3350      	adds	r3, #80	; 0x50
 8009f48:	443b      	add	r3, r7
 8009f4a:	3b30      	subs	r3, #48	; 0x30
 8009f4c:	681b      	ldr	r3, [r3, #0]
 8009f4e:	4299      	cmp	r1, r3
 8009f50:	d00e      	beq.n	8009f70 <HAL_OSPIM_Config+0x488>
        (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
 8009f52:	68bb      	ldr	r3, [r7, #8]
 8009f54:	6919      	ldr	r1, [r3, #16]
 8009f56:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8009f5a:	4613      	mov	r3, r2
 8009f5c:	005b      	lsls	r3, r3, #1
 8009f5e:	4413      	add	r3, r2
 8009f60:	00db      	lsls	r3, r3, #3
 8009f62:	3350      	adds	r3, #80	; 0x50
 8009f64:	443b      	add	r3, r7
 8009f66:	3b2c      	subs	r3, #44	; 0x2c
 8009f68:	681b      	ldr	r3, [r3, #0]
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8009f6a:	4299      	cmp	r1, r3
 8009f6c:	f040 810e 	bne.w	800a18c <HAL_OSPIM_Config+0x6a4>
    {
      if ((cfg->ClkPort   == IOM_cfg[other_instance].ClkPort)   &&
 8009f70:	68bb      	ldr	r3, [r7, #8]
 8009f72:	6819      	ldr	r1, [r3, #0]
 8009f74:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8009f78:	4613      	mov	r3, r2
 8009f7a:	005b      	lsls	r3, r3, #1
 8009f7c:	4413      	add	r3, r2
 8009f7e:	00db      	lsls	r3, r3, #3
 8009f80:	3350      	adds	r3, #80	; 0x50
 8009f82:	443b      	add	r3, r7
 8009f84:	3b3c      	subs	r3, #60	; 0x3c
 8009f86:	681b      	ldr	r3, [r3, #0]
 8009f88:	4299      	cmp	r1, r3
 8009f8a:	d133      	bne.n	8009ff4 <HAL_OSPIM_Config+0x50c>
          (cfg->DQSPort    == IOM_cfg[other_instance].DQSPort)  &&
 8009f8c:	68bb      	ldr	r3, [r7, #8]
 8009f8e:	6859      	ldr	r1, [r3, #4]
 8009f90:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8009f94:	4613      	mov	r3, r2
 8009f96:	005b      	lsls	r3, r3, #1
 8009f98:	4413      	add	r3, r2
 8009f9a:	00db      	lsls	r3, r3, #3
 8009f9c:	3350      	adds	r3, #80	; 0x50
 8009f9e:	443b      	add	r3, r7
 8009fa0:	3b38      	subs	r3, #56	; 0x38
 8009fa2:	681b      	ldr	r3, [r3, #0]
      if ((cfg->ClkPort   == IOM_cfg[other_instance].ClkPort)   &&
 8009fa4:	4299      	cmp	r1, r3
 8009fa6:	d125      	bne.n	8009ff4 <HAL_OSPIM_Config+0x50c>
          (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) &&
 8009fa8:	68bb      	ldr	r3, [r7, #8]
 8009faa:	68d9      	ldr	r1, [r3, #12]
 8009fac:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8009fb0:	4613      	mov	r3, r2
 8009fb2:	005b      	lsls	r3, r3, #1
 8009fb4:	4413      	add	r3, r2
 8009fb6:	00db      	lsls	r3, r3, #3
 8009fb8:	3350      	adds	r3, #80	; 0x50
 8009fba:	443b      	add	r3, r7
 8009fbc:	3b30      	subs	r3, #48	; 0x30
 8009fbe:	681b      	ldr	r3, [r3, #0]
          (cfg->DQSPort    == IOM_cfg[other_instance].DQSPort)  &&
 8009fc0:	4299      	cmp	r1, r3
 8009fc2:	d117      	bne.n	8009ff4 <HAL_OSPIM_Config+0x50c>
          (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
 8009fc4:	68bb      	ldr	r3, [r7, #8]
 8009fc6:	6919      	ldr	r1, [r3, #16]
 8009fc8:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8009fcc:	4613      	mov	r3, r2
 8009fce:	005b      	lsls	r3, r3, #1
 8009fd0:	4413      	add	r3, r2
 8009fd2:	00db      	lsls	r3, r3, #3
 8009fd4:	3350      	adds	r3, #80	; 0x50
 8009fd6:	443b      	add	r3, r7
 8009fd8:	3b2c      	subs	r3, #44	; 0x2c
 8009fda:	681b      	ldr	r3, [r3, #0]
          (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) &&
 8009fdc:	4299      	cmp	r1, r3
 8009fde:	d109      	bne.n	8009ff4 <HAL_OSPIM_Config+0x50c>
      {
        /* Multiplexing should be performed */
        SET_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
 8009fe0:	4b03      	ldr	r3, [pc, #12]	; (8009ff0 <HAL_OSPIM_Config+0x508>)
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	4a02      	ldr	r2, [pc, #8]	; (8009ff0 <HAL_OSPIM_Config+0x508>)
 8009fe6:	f043 0301 	orr.w	r3, r3, #1
 8009fea:	6013      	str	r3, [r2, #0]
 8009fec:	e0ce      	b.n	800a18c <HAL_OSPIM_Config+0x6a4>
 8009fee:	bf00      	nop
 8009ff0:	420c4000 	.word	0x420c4000
      }
      else
      {
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKEN);
 8009ff4:	49a4      	ldr	r1, [pc, #656]	; (800a288 <HAL_OSPIM_Config+0x7a0>)
 8009ff6:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8009ffa:	4613      	mov	r3, r2
 8009ffc:	005b      	lsls	r3, r3, #1
 8009ffe:	4413      	add	r3, r2
 800a000:	00db      	lsls	r3, r3, #3
 800a002:	3350      	adds	r3, #80	; 0x50
 800a004:	443b      	add	r3, r7
 800a006:	3b3c      	subs	r3, #60	; 0x3c
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	3b01      	subs	r3, #1
 800a00c:	009b      	lsls	r3, r3, #2
 800a00e:	440b      	add	r3, r1
 800a010:	6859      	ldr	r1, [r3, #4]
 800a012:	489d      	ldr	r0, [pc, #628]	; (800a288 <HAL_OSPIM_Config+0x7a0>)
 800a014:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800a018:	4613      	mov	r3, r2
 800a01a:	005b      	lsls	r3, r3, #1
 800a01c:	4413      	add	r3, r2
 800a01e:	00db      	lsls	r3, r3, #3
 800a020:	3350      	adds	r3, #80	; 0x50
 800a022:	443b      	add	r3, r7
 800a024:	3b3c      	subs	r3, #60	; 0x3c
 800a026:	681b      	ldr	r3, [r3, #0]
 800a028:	3b01      	subs	r3, #1
 800a02a:	f021 0201 	bic.w	r2, r1, #1
 800a02e:	009b      	lsls	r3, r3, #2
 800a030:	4403      	add	r3, r0
 800a032:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 800a034:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800a038:	4613      	mov	r3, r2
 800a03a:	005b      	lsls	r3, r3, #1
 800a03c:	4413      	add	r3, r2
 800a03e:	00db      	lsls	r3, r3, #3
 800a040:	3350      	adds	r3, #80	; 0x50
 800a042:	443b      	add	r3, r7
 800a044:	3b38      	subs	r3, #56	; 0x38
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	2b00      	cmp	r3, #0
 800a04a:	d01f      	beq.n	800a08c <HAL_OSPIM_Config+0x5a4>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSEN);
 800a04c:	498e      	ldr	r1, [pc, #568]	; (800a288 <HAL_OSPIM_Config+0x7a0>)
 800a04e:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800a052:	4613      	mov	r3, r2
 800a054:	005b      	lsls	r3, r3, #1
 800a056:	4413      	add	r3, r2
 800a058:	00db      	lsls	r3, r3, #3
 800a05a:	3350      	adds	r3, #80	; 0x50
 800a05c:	443b      	add	r3, r7
 800a05e:	3b38      	subs	r3, #56	; 0x38
 800a060:	681b      	ldr	r3, [r3, #0]
 800a062:	3b01      	subs	r3, #1
 800a064:	009b      	lsls	r3, r3, #2
 800a066:	440b      	add	r3, r1
 800a068:	6859      	ldr	r1, [r3, #4]
 800a06a:	4887      	ldr	r0, [pc, #540]	; (800a288 <HAL_OSPIM_Config+0x7a0>)
 800a06c:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800a070:	4613      	mov	r3, r2
 800a072:	005b      	lsls	r3, r3, #1
 800a074:	4413      	add	r3, r2
 800a076:	00db      	lsls	r3, r3, #3
 800a078:	3350      	adds	r3, #80	; 0x50
 800a07a:	443b      	add	r3, r7
 800a07c:	3b38      	subs	r3, #56	; 0x38
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	3b01      	subs	r3, #1
 800a082:	f021 0210 	bic.w	r2, r1, #16
 800a086:	009b      	lsls	r3, r3, #2
 800a088:	4403      	add	r3, r0
 800a08a:	605a      	str	r2, [r3, #4]
        }
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].NCSPort - 1U)], OCTOSPIM_PCR_NCSEN);
 800a08c:	497e      	ldr	r1, [pc, #504]	; (800a288 <HAL_OSPIM_Config+0x7a0>)
 800a08e:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800a092:	4613      	mov	r3, r2
 800a094:	005b      	lsls	r3, r3, #1
 800a096:	4413      	add	r3, r2
 800a098:	00db      	lsls	r3, r3, #3
 800a09a:	3350      	adds	r3, #80	; 0x50
 800a09c:	443b      	add	r3, r7
 800a09e:	3b34      	subs	r3, #52	; 0x34
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	3b01      	subs	r3, #1
 800a0a4:	009b      	lsls	r3, r3, #2
 800a0a6:	440b      	add	r3, r1
 800a0a8:	6859      	ldr	r1, [r3, #4]
 800a0aa:	4877      	ldr	r0, [pc, #476]	; (800a288 <HAL_OSPIM_Config+0x7a0>)
 800a0ac:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800a0b0:	4613      	mov	r3, r2
 800a0b2:	005b      	lsls	r3, r3, #1
 800a0b4:	4413      	add	r3, r2
 800a0b6:	00db      	lsls	r3, r3, #3
 800a0b8:	3350      	adds	r3, #80	; 0x50
 800a0ba:	443b      	add	r3, r7
 800a0bc:	3b34      	subs	r3, #52	; 0x34
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	3b01      	subs	r3, #1
 800a0c2:	f421 7280 	bic.w	r2, r1, #256	; 0x100
 800a0c6:	009b      	lsls	r3, r3, #2
 800a0c8:	4403      	add	r3, r0
 800a0ca:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 800a0cc:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800a0d0:	4613      	mov	r3, r2
 800a0d2:	005b      	lsls	r3, r3, #1
 800a0d4:	4413      	add	r3, r2
 800a0d6:	00db      	lsls	r3, r3, #3
 800a0d8:	3350      	adds	r3, #80	; 0x50
 800a0da:	443b      	add	r3, r7
 800a0dc:	3b30      	subs	r3, #48	; 0x30
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	d023      	beq.n	800a12c <HAL_OSPIM_Config+0x644>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 800a0e4:	4968      	ldr	r1, [pc, #416]	; (800a288 <HAL_OSPIM_Config+0x7a0>)
 800a0e6:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800a0ea:	4613      	mov	r3, r2
 800a0ec:	005b      	lsls	r3, r3, #1
 800a0ee:	4413      	add	r3, r2
 800a0f0:	00db      	lsls	r3, r3, #3
 800a0f2:	3350      	adds	r3, #80	; 0x50
 800a0f4:	443b      	add	r3, r7
 800a0f6:	3b30      	subs	r3, #48	; 0x30
 800a0f8:	681b      	ldr	r3, [r3, #0]
 800a0fa:	3b01      	subs	r3, #1
 800a0fc:	f003 0301 	and.w	r3, r3, #1
 800a100:	009b      	lsls	r3, r3, #2
 800a102:	440b      	add	r3, r1
 800a104:	6859      	ldr	r1, [r3, #4]
 800a106:	4860      	ldr	r0, [pc, #384]	; (800a288 <HAL_OSPIM_Config+0x7a0>)
 800a108:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800a10c:	4613      	mov	r3, r2
 800a10e:	005b      	lsls	r3, r3, #1
 800a110:	4413      	add	r3, r2
 800a112:	00db      	lsls	r3, r3, #3
 800a114:	3350      	adds	r3, #80	; 0x50
 800a116:	443b      	add	r3, r7
 800a118:	3b30      	subs	r3, #48	; 0x30
 800a11a:	681b      	ldr	r3, [r3, #0]
 800a11c:	3b01      	subs	r3, #1
 800a11e:	f003 0301 	and.w	r3, r3, #1
 800a122:	f421 3280 	bic.w	r2, r1, #65536	; 0x10000
 800a126:	009b      	lsls	r3, r3, #2
 800a128:	4403      	add	r3, r0
 800a12a:	605a      	str	r2, [r3, #4]
                    OCTOSPIM_PCR_IOLEN);
        }
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 800a12c:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800a130:	4613      	mov	r3, r2
 800a132:	005b      	lsls	r3, r3, #1
 800a134:	4413      	add	r3, r2
 800a136:	00db      	lsls	r3, r3, #3
 800a138:	3350      	adds	r3, #80	; 0x50
 800a13a:	443b      	add	r3, r7
 800a13c:	3b2c      	subs	r3, #44	; 0x2c
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	2b00      	cmp	r3, #0
 800a142:	d023      	beq.n	800a18c <HAL_OSPIM_Config+0x6a4>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 800a144:	4950      	ldr	r1, [pc, #320]	; (800a288 <HAL_OSPIM_Config+0x7a0>)
 800a146:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800a14a:	4613      	mov	r3, r2
 800a14c:	005b      	lsls	r3, r3, #1
 800a14e:	4413      	add	r3, r2
 800a150:	00db      	lsls	r3, r3, #3
 800a152:	3350      	adds	r3, #80	; 0x50
 800a154:	443b      	add	r3, r7
 800a156:	3b2c      	subs	r3, #44	; 0x2c
 800a158:	681b      	ldr	r3, [r3, #0]
 800a15a:	3b01      	subs	r3, #1
 800a15c:	f003 0301 	and.w	r3, r3, #1
 800a160:	009b      	lsls	r3, r3, #2
 800a162:	440b      	add	r3, r1
 800a164:	6859      	ldr	r1, [r3, #4]
 800a166:	4848      	ldr	r0, [pc, #288]	; (800a288 <HAL_OSPIM_Config+0x7a0>)
 800a168:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800a16c:	4613      	mov	r3, r2
 800a16e:	005b      	lsls	r3, r3, #1
 800a170:	4413      	add	r3, r2
 800a172:	00db      	lsls	r3, r3, #3
 800a174:	3350      	adds	r3, #80	; 0x50
 800a176:	443b      	add	r3, r7
 800a178:	3b2c      	subs	r3, #44	; 0x2c
 800a17a:	681b      	ldr	r3, [r3, #0]
 800a17c:	3b01      	subs	r3, #1
 800a17e:	f003 0301 	and.w	r3, r3, #1
 800a182:	f021 7280 	bic.w	r2, r1, #16777216	; 0x1000000
 800a186:	009b      	lsls	r3, r3, #2
 800a188:	4403      	add	r3, r0
 800a18a:	605a      	str	r2, [r3, #4]
        }
      }
    }

    /******************** Activation of new configuration *********************/
    MODIFY_REG(OCTOSPIM->PCR[(cfg->NCSPort - 1U)], (OCTOSPIM_PCR_NCSEN | OCTOSPIM_PCR_NCSSRC),
 800a18c:	4a3e      	ldr	r2, [pc, #248]	; (800a288 <HAL_OSPIM_Config+0x7a0>)
 800a18e:	68bb      	ldr	r3, [r7, #8]
 800a190:	689b      	ldr	r3, [r3, #8]
 800a192:	3b01      	subs	r3, #1
 800a194:	009b      	lsls	r3, r3, #2
 800a196:	4413      	add	r3, r2
 800a198:	685b      	ldr	r3, [r3, #4]
 800a19a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a19e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a1a0:	025b      	lsls	r3, r3, #9
 800a1a2:	431a      	orrs	r2, r3
 800a1a4:	4938      	ldr	r1, [pc, #224]	; (800a288 <HAL_OSPIM_Config+0x7a0>)
 800a1a6:	68bb      	ldr	r3, [r7, #8]
 800a1a8:	689b      	ldr	r3, [r3, #8]
 800a1aa:	3b01      	subs	r3, #1
 800a1ac:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a1b0:	009b      	lsls	r3, r3, #2
 800a1b2:	440b      	add	r3, r1
 800a1b4:	605a      	str	r2, [r3, #4]
               (OCTOSPIM_PCR_NCSEN | (instance << OCTOSPIM_PCR_NCSSRC_Pos)));

    if (((cfg->Req2AckTime) >= 1U) && ((cfg->Req2AckTime) <= 256U))
 800a1b6:	68bb      	ldr	r3, [r7, #8]
 800a1b8:	695b      	ldr	r3, [r3, #20]
 800a1ba:	2b00      	cmp	r3, #0
 800a1bc:	d018      	beq.n	800a1f0 <HAL_OSPIM_Config+0x708>
 800a1be:	68bb      	ldr	r3, [r7, #8]
 800a1c0:	695b      	ldr	r3, [r3, #20]
 800a1c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a1c6:	d813      	bhi.n	800a1f0 <HAL_OSPIM_Config+0x708>
    {
      if ((cfg->Req2AckTime - 1U) > ((OCTOSPIM->CR & OCTOSPIM_CR_REQ2ACK_TIME) >> OCTOSPIM_CR_REQ2ACK_TIME_Pos))
 800a1c8:	68bb      	ldr	r3, [r7, #8]
 800a1ca:	695b      	ldr	r3, [r3, #20]
 800a1cc:	1e5a      	subs	r2, r3, #1
 800a1ce:	4b2e      	ldr	r3, [pc, #184]	; (800a288 <HAL_OSPIM_Config+0x7a0>)
 800a1d0:	681b      	ldr	r3, [r3, #0]
 800a1d2:	0c1b      	lsrs	r3, r3, #16
 800a1d4:	b2db      	uxtb	r3, r3
 800a1d6:	429a      	cmp	r2, r3
 800a1d8:	d90a      	bls.n	800a1f0 <HAL_OSPIM_Config+0x708>
      {
        MODIFY_REG(OCTOSPIM->CR, OCTOSPIM_CR_REQ2ACK_TIME, ((cfg->Req2AckTime - 1U) << OCTOSPIM_CR_REQ2ACK_TIME_Pos));
 800a1da:	4b2b      	ldr	r3, [pc, #172]	; (800a288 <HAL_OSPIM_Config+0x7a0>)
 800a1dc:	681b      	ldr	r3, [r3, #0]
 800a1de:	f423 027f 	bic.w	r2, r3, #16711680	; 0xff0000
 800a1e2:	68bb      	ldr	r3, [r7, #8]
 800a1e4:	695b      	ldr	r3, [r3, #20]
 800a1e6:	3b01      	subs	r3, #1
 800a1e8:	041b      	lsls	r3, r3, #16
 800a1ea:	4927      	ldr	r1, [pc, #156]	; (800a288 <HAL_OSPIM_Config+0x7a0>)
 800a1ec:	4313      	orrs	r3, r2
 800a1ee:	600b      	str	r3, [r1, #0]
      {
        /* Nothing to do */
      }
    }

    if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) != 0U)
 800a1f0:	4b25      	ldr	r3, [pc, #148]	; (800a288 <HAL_OSPIM_Config+0x7a0>)
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	f003 0301 	and.w	r3, r3, #1
 800a1f8:	2b00      	cmp	r3, #0
 800a1fa:	f000 809a 	beq.w	800a332 <HAL_OSPIM_Config+0x84a>
    {
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort - 1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC), OCTOSPIM_PCR_CLKEN);
 800a1fe:	4a22      	ldr	r2, [pc, #136]	; (800a288 <HAL_OSPIM_Config+0x7a0>)
 800a200:	68bb      	ldr	r3, [r7, #8]
 800a202:	681b      	ldr	r3, [r3, #0]
 800a204:	3b01      	subs	r3, #1
 800a206:	009b      	lsls	r3, r3, #2
 800a208:	4413      	add	r3, r2
 800a20a:	685b      	ldr	r3, [r3, #4]
 800a20c:	f023 0203 	bic.w	r2, r3, #3
 800a210:	491d      	ldr	r1, [pc, #116]	; (800a288 <HAL_OSPIM_Config+0x7a0>)
 800a212:	68bb      	ldr	r3, [r7, #8]
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	3b01      	subs	r3, #1
 800a218:	f042 0201 	orr.w	r2, r2, #1
 800a21c:	009b      	lsls	r3, r3, #2
 800a21e:	440b      	add	r3, r1
 800a220:	605a      	str	r2, [r3, #4]
      if (cfg->DQSPort != 0U)
 800a222:	68bb      	ldr	r3, [r7, #8]
 800a224:	685b      	ldr	r3, [r3, #4]
 800a226:	2b00      	cmp	r3, #0
 800a228:	d011      	beq.n	800a24e <HAL_OSPIM_Config+0x766>
      {
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort - 1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC), OCTOSPIM_PCR_DQSEN);
 800a22a:	4a17      	ldr	r2, [pc, #92]	; (800a288 <HAL_OSPIM_Config+0x7a0>)
 800a22c:	68bb      	ldr	r3, [r7, #8]
 800a22e:	685b      	ldr	r3, [r3, #4]
 800a230:	3b01      	subs	r3, #1
 800a232:	009b      	lsls	r3, r3, #2
 800a234:	4413      	add	r3, r2
 800a236:	685b      	ldr	r3, [r3, #4]
 800a238:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800a23c:	4912      	ldr	r1, [pc, #72]	; (800a288 <HAL_OSPIM_Config+0x7a0>)
 800a23e:	68bb      	ldr	r3, [r7, #8]
 800a240:	685b      	ldr	r3, [r3, #4]
 800a242:	3b01      	subs	r3, #1
 800a244:	f042 0210 	orr.w	r2, r2, #16
 800a248:	009b      	lsls	r3, r3, #2
 800a24a:	440b      	add	r3, r1
 800a24c:	605a      	str	r2, [r3, #4]
      }

      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 800a24e:	68bb      	ldr	r3, [r7, #8]
 800a250:	68db      	ldr	r3, [r3, #12]
 800a252:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a256:	2b00      	cmp	r3, #0
 800a258:	d018      	beq.n	800a28c <HAL_OSPIM_Config+0x7a4>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 800a25a:	4a0b      	ldr	r2, [pc, #44]	; (800a288 <HAL_OSPIM_Config+0x7a0>)
 800a25c:	68bb      	ldr	r3, [r7, #8]
 800a25e:	68db      	ldr	r3, [r3, #12]
 800a260:	3b01      	subs	r3, #1
 800a262:	f003 0301 	and.w	r3, r3, #1
 800a266:	009b      	lsls	r3, r3, #2
 800a268:	4413      	add	r3, r2
 800a26a:	685b      	ldr	r3, [r3, #4]
 800a26c:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800a270:	4905      	ldr	r1, [pc, #20]	; (800a288 <HAL_OSPIM_Config+0x7a0>)
 800a272:	68bb      	ldr	r3, [r7, #8]
 800a274:	68db      	ldr	r3, [r3, #12]
 800a276:	3b01      	subs	r3, #1
 800a278:	f003 0301 	and.w	r3, r3, #1
 800a27c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800a280:	009b      	lsls	r3, r3, #2
 800a282:	440b      	add	r3, r1
 800a284:	605a      	str	r2, [r3, #4]
 800a286:	e01b      	b.n	800a2c0 <HAL_OSPIM_Config+0x7d8>
 800a288:	420c4000 	.word	0x420c4000
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC), OCTOSPIM_PCR_IOLEN);
      }
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 800a28c:	68bb      	ldr	r3, [r7, #8]
 800a28e:	68db      	ldr	r3, [r3, #12]
 800a290:	2b00      	cmp	r3, #0
 800a292:	d015      	beq.n	800a2c0 <HAL_OSPIM_Config+0x7d8>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 800a294:	4a8a      	ldr	r2, [pc, #552]	; (800a4c0 <HAL_OSPIM_Config+0x9d8>)
 800a296:	68bb      	ldr	r3, [r7, #8]
 800a298:	68db      	ldr	r3, [r3, #12]
 800a29a:	3b01      	subs	r3, #1
 800a29c:	f003 0301 	and.w	r3, r3, #1
 800a2a0:	009b      	lsls	r3, r3, #2
 800a2a2:	4413      	add	r3, r2
 800a2a4:	685b      	ldr	r3, [r3, #4]
 800a2a6:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800a2aa:	4985      	ldr	r1, [pc, #532]	; (800a4c0 <HAL_OSPIM_Config+0x9d8>)
 800a2ac:	68bb      	ldr	r3, [r7, #8]
 800a2ae:	68db      	ldr	r3, [r3, #12]
 800a2b0:	3b01      	subs	r3, #1
 800a2b2:	f003 0301 	and.w	r3, r3, #1
 800a2b6:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 800a2ba:	009b      	lsls	r3, r3, #2
 800a2bc:	440b      	add	r3, r1
 800a2be:	605a      	str	r2, [r3, #4]
      else
      {
        /* Nothing to do */
      }

      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 800a2c0:	68bb      	ldr	r3, [r7, #8]
 800a2c2:	691b      	ldr	r3, [r3, #16]
 800a2c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a2c8:	2b00      	cmp	r3, #0
 800a2ca:	d016      	beq.n	800a2fa <HAL_OSPIM_Config+0x812>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 800a2cc:	4a7c      	ldr	r2, [pc, #496]	; (800a4c0 <HAL_OSPIM_Config+0x9d8>)
 800a2ce:	68bb      	ldr	r3, [r7, #8]
 800a2d0:	691b      	ldr	r3, [r3, #16]
 800a2d2:	3b01      	subs	r3, #1
 800a2d4:	f003 0301 	and.w	r3, r3, #1
 800a2d8:	009b      	lsls	r3, r3, #2
 800a2da:	4413      	add	r3, r2
 800a2dc:	685b      	ldr	r3, [r3, #4]
 800a2de:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800a2e2:	4977      	ldr	r1, [pc, #476]	; (800a4c0 <HAL_OSPIM_Config+0x9d8>)
 800a2e4:	68bb      	ldr	r3, [r7, #8]
 800a2e6:	691b      	ldr	r3, [r3, #16]
 800a2e8:	3b01      	subs	r3, #1
 800a2ea:	f003 0301 	and.w	r3, r3, #1
 800a2ee:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
 800a2f2:	009b      	lsls	r3, r3, #2
 800a2f4:	440b      	add	r3, r1
 800a2f6:	605a      	str	r2, [r3, #4]
 800a2f8:	e0c3      	b.n	800a482 <HAL_OSPIM_Config+0x99a>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC), (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC_0));
      }
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 800a2fa:	68bb      	ldr	r3, [r7, #8]
 800a2fc:	691b      	ldr	r3, [r3, #16]
 800a2fe:	2b00      	cmp	r3, #0
 800a300:	f000 80bf 	beq.w	800a482 <HAL_OSPIM_Config+0x99a>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 800a304:	4a6e      	ldr	r2, [pc, #440]	; (800a4c0 <HAL_OSPIM_Config+0x9d8>)
 800a306:	68bb      	ldr	r3, [r7, #8]
 800a308:	691b      	ldr	r3, [r3, #16]
 800a30a:	3b01      	subs	r3, #1
 800a30c:	f003 0301 	and.w	r3, r3, #1
 800a310:	009b      	lsls	r3, r3, #2
 800a312:	4413      	add	r3, r2
 800a314:	685b      	ldr	r3, [r3, #4]
 800a316:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800a31a:	4969      	ldr	r1, [pc, #420]	; (800a4c0 <HAL_OSPIM_Config+0x9d8>)
 800a31c:	68bb      	ldr	r3, [r7, #8]
 800a31e:	691b      	ldr	r3, [r3, #16]
 800a320:	3b01      	subs	r3, #1
 800a322:	f003 0301 	and.w	r3, r3, #1
 800a326:	f042 7240 	orr.w	r2, r2, #50331648	; 0x3000000
 800a32a:	009b      	lsls	r3, r3, #2
 800a32c:	440b      	add	r3, r1
 800a32e:	605a      	str	r2, [r3, #4]
 800a330:	e0a7      	b.n	800a482 <HAL_OSPIM_Config+0x99a>
        /* Nothing to do */
      }
    }
    else
    {
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort - 1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC),
 800a332:	4a63      	ldr	r2, [pc, #396]	; (800a4c0 <HAL_OSPIM_Config+0x9d8>)
 800a334:	68bb      	ldr	r3, [r7, #8]
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	3b01      	subs	r3, #1
 800a33a:	009b      	lsls	r3, r3, #2
 800a33c:	4413      	add	r3, r2
 800a33e:	685b      	ldr	r3, [r3, #4]
 800a340:	f023 0203 	bic.w	r2, r3, #3
 800a344:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a346:	005b      	lsls	r3, r3, #1
 800a348:	431a      	orrs	r2, r3
 800a34a:	495d      	ldr	r1, [pc, #372]	; (800a4c0 <HAL_OSPIM_Config+0x9d8>)
 800a34c:	68bb      	ldr	r3, [r7, #8]
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	3b01      	subs	r3, #1
 800a352:	f042 0201 	orr.w	r2, r2, #1
 800a356:	009b      	lsls	r3, r3, #2
 800a358:	440b      	add	r3, r1
 800a35a:	605a      	str	r2, [r3, #4]
                 (OCTOSPIM_PCR_CLKEN | (instance << OCTOSPIM_PCR_CLKSRC_Pos)));
      if (cfg->DQSPort != 0U)
 800a35c:	68bb      	ldr	r3, [r7, #8]
 800a35e:	685b      	ldr	r3, [r3, #4]
 800a360:	2b00      	cmp	r3, #0
 800a362:	d014      	beq.n	800a38e <HAL_OSPIM_Config+0x8a6>
      {
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort - 1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC),
 800a364:	4a56      	ldr	r2, [pc, #344]	; (800a4c0 <HAL_OSPIM_Config+0x9d8>)
 800a366:	68bb      	ldr	r3, [r7, #8]
 800a368:	685b      	ldr	r3, [r3, #4]
 800a36a:	3b01      	subs	r3, #1
 800a36c:	009b      	lsls	r3, r3, #2
 800a36e:	4413      	add	r3, r2
 800a370:	685b      	ldr	r3, [r3, #4]
 800a372:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800a376:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a378:	015b      	lsls	r3, r3, #5
 800a37a:	431a      	orrs	r2, r3
 800a37c:	4950      	ldr	r1, [pc, #320]	; (800a4c0 <HAL_OSPIM_Config+0x9d8>)
 800a37e:	68bb      	ldr	r3, [r7, #8]
 800a380:	685b      	ldr	r3, [r3, #4]
 800a382:	3b01      	subs	r3, #1
 800a384:	f042 0210 	orr.w	r2, r2, #16
 800a388:	009b      	lsls	r3, r3, #2
 800a38a:	440b      	add	r3, r1
 800a38c:	605a      	str	r2, [r3, #4]
                   (OCTOSPIM_PCR_DQSEN | (instance << OCTOSPIM_PCR_DQSSRC_Pos)));
      }

      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 800a38e:	68bb      	ldr	r3, [r7, #8]
 800a390:	68db      	ldr	r3, [r3, #12]
 800a392:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a396:	2b00      	cmp	r3, #0
 800a398:	d019      	beq.n	800a3ce <HAL_OSPIM_Config+0x8e6>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 800a39a:	4a49      	ldr	r2, [pc, #292]	; (800a4c0 <HAL_OSPIM_Config+0x9d8>)
 800a39c:	68bb      	ldr	r3, [r7, #8]
 800a39e:	68db      	ldr	r3, [r3, #12]
 800a3a0:	3b01      	subs	r3, #1
 800a3a2:	f003 0301 	and.w	r3, r3, #1
 800a3a6:	009b      	lsls	r3, r3, #2
 800a3a8:	4413      	add	r3, r2
 800a3aa:	685b      	ldr	r3, [r3, #4]
 800a3ac:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800a3b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a3b2:	049b      	lsls	r3, r3, #18
 800a3b4:	431a      	orrs	r2, r3
 800a3b6:	4942      	ldr	r1, [pc, #264]	; (800a4c0 <HAL_OSPIM_Config+0x9d8>)
 800a3b8:	68bb      	ldr	r3, [r7, #8]
 800a3ba:	68db      	ldr	r3, [r3, #12]
 800a3bc:	3b01      	subs	r3, #1
 800a3be:	f003 0301 	and.w	r3, r3, #1
 800a3c2:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800a3c6:	009b      	lsls	r3, r3, #2
 800a3c8:	440b      	add	r3, r1
 800a3ca:	605a      	str	r2, [r3, #4]
 800a3cc:	e01c      	b.n	800a408 <HAL_OSPIM_Config+0x920>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                   (OCTOSPIM_PCR_IOLEN | (instance << (OCTOSPIM_PCR_IOLSRC_Pos + 1U))));
      }
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 800a3ce:	68bb      	ldr	r3, [r7, #8]
 800a3d0:	68db      	ldr	r3, [r3, #12]
 800a3d2:	2b00      	cmp	r3, #0
 800a3d4:	d018      	beq.n	800a408 <HAL_OSPIM_Config+0x920>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 800a3d6:	4a3a      	ldr	r2, [pc, #232]	; (800a4c0 <HAL_OSPIM_Config+0x9d8>)
 800a3d8:	68bb      	ldr	r3, [r7, #8]
 800a3da:	68db      	ldr	r3, [r3, #12]
 800a3dc:	3b01      	subs	r3, #1
 800a3de:	f003 0301 	and.w	r3, r3, #1
 800a3e2:	009b      	lsls	r3, r3, #2
 800a3e4:	4413      	add	r3, r2
 800a3e6:	685b      	ldr	r3, [r3, #4]
 800a3e8:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800a3ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a3ee:	069b      	lsls	r3, r3, #26
 800a3f0:	431a      	orrs	r2, r3
 800a3f2:	4933      	ldr	r1, [pc, #204]	; (800a4c0 <HAL_OSPIM_Config+0x9d8>)
 800a3f4:	68bb      	ldr	r3, [r7, #8]
 800a3f6:	68db      	ldr	r3, [r3, #12]
 800a3f8:	3b01      	subs	r3, #1
 800a3fa:	f003 0301 	and.w	r3, r3, #1
 800a3fe:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 800a402:	009b      	lsls	r3, r3, #2
 800a404:	440b      	add	r3, r1
 800a406:	605a      	str	r2, [r3, #4]
      else
      {
        /* Nothing to do */
      }

      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 800a408:	68bb      	ldr	r3, [r7, #8]
 800a40a:	691b      	ldr	r3, [r3, #16]
 800a40c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a410:	2b00      	cmp	r3, #0
 800a412:	d019      	beq.n	800a448 <HAL_OSPIM_Config+0x960>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 800a414:	4a2a      	ldr	r2, [pc, #168]	; (800a4c0 <HAL_OSPIM_Config+0x9d8>)
 800a416:	68bb      	ldr	r3, [r7, #8]
 800a418:	691b      	ldr	r3, [r3, #16]
 800a41a:	3b01      	subs	r3, #1
 800a41c:	f003 0301 	and.w	r3, r3, #1
 800a420:	009b      	lsls	r3, r3, #2
 800a422:	4413      	add	r3, r2
 800a424:	685b      	ldr	r3, [r3, #4]
 800a426:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800a42a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a42c:	049b      	lsls	r3, r3, #18
 800a42e:	431a      	orrs	r2, r3
 800a430:	4923      	ldr	r1, [pc, #140]	; (800a4c0 <HAL_OSPIM_Config+0x9d8>)
 800a432:	68bb      	ldr	r3, [r7, #8]
 800a434:	691b      	ldr	r3, [r3, #16]
 800a436:	3b01      	subs	r3, #1
 800a438:	f003 0301 	and.w	r3, r3, #1
 800a43c:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
 800a440:	009b      	lsls	r3, r3, #2
 800a442:	440b      	add	r3, r1
 800a444:	605a      	str	r2, [r3, #4]
 800a446:	e01c      	b.n	800a482 <HAL_OSPIM_Config+0x99a>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC_0 | (instance << (OCTOSPIM_PCR_IOLSRC_Pos + 1U))));
      }
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 800a448:	68bb      	ldr	r3, [r7, #8]
 800a44a:	691b      	ldr	r3, [r3, #16]
 800a44c:	2b00      	cmp	r3, #0
 800a44e:	d018      	beq.n	800a482 <HAL_OSPIM_Config+0x99a>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 800a450:	4a1b      	ldr	r2, [pc, #108]	; (800a4c0 <HAL_OSPIM_Config+0x9d8>)
 800a452:	68bb      	ldr	r3, [r7, #8]
 800a454:	691b      	ldr	r3, [r3, #16]
 800a456:	3b01      	subs	r3, #1
 800a458:	f003 0301 	and.w	r3, r3, #1
 800a45c:	009b      	lsls	r3, r3, #2
 800a45e:	4413      	add	r3, r2
 800a460:	685b      	ldr	r3, [r3, #4]
 800a462:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800a466:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a468:	069b      	lsls	r3, r3, #26
 800a46a:	431a      	orrs	r2, r3
 800a46c:	4914      	ldr	r1, [pc, #80]	; (800a4c0 <HAL_OSPIM_Config+0x9d8>)
 800a46e:	68bb      	ldr	r3, [r7, #8]
 800a470:	691b      	ldr	r3, [r3, #16]
 800a472:	3b01      	subs	r3, #1
 800a474:	f003 0301 	and.w	r3, r3, #1
 800a478:	f042 7240 	orr.w	r2, r2, #50331648	; 0x3000000
 800a47c:	009b      	lsls	r3, r3, #2
 800a47e:	440b      	add	r3, r1
 800a480:	605a      	str	r2, [r3, #4]
        /* Nothing to do */
      }
    }

    /******* Re-enable both OctoSPI after configure OctoSPI IO Manager ********/
    if ((ospi_enabled & 0x1U) != 0U)
 800a482:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800a486:	f003 0301 	and.w	r3, r3, #1
 800a48a:	2b00      	cmp	r3, #0
 800a48c:	d005      	beq.n	800a49a <HAL_OSPIM_Config+0x9b2>
    {
      SET_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 800a48e:	4b0d      	ldr	r3, [pc, #52]	; (800a4c4 <HAL_OSPIM_Config+0x9dc>)
 800a490:	681b      	ldr	r3, [r3, #0]
 800a492:	4a0c      	ldr	r2, [pc, #48]	; (800a4c4 <HAL_OSPIM_Config+0x9dc>)
 800a494:	f043 0301 	orr.w	r3, r3, #1
 800a498:	6013      	str	r3, [r2, #0]
    }
    if ((ospi_enabled & 0x2U) != 0U)
 800a49a:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800a49e:	f003 0302 	and.w	r3, r3, #2
 800a4a2:	2b00      	cmp	r3, #0
 800a4a4:	d005      	beq.n	800a4b2 <HAL_OSPIM_Config+0x9ca>
    {
      SET_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 800a4a6:	4b08      	ldr	r3, [pc, #32]	; (800a4c8 <HAL_OSPIM_Config+0x9e0>)
 800a4a8:	681b      	ldr	r3, [r3, #0]
 800a4aa:	4a07      	ldr	r2, [pc, #28]	; (800a4c8 <HAL_OSPIM_Config+0x9e0>)
 800a4ac:	f043 0301 	orr.w	r3, r3, #1
 800a4b0:	6013      	str	r3, [r2, #0]
    }
  }

  /* Return function status */
  return status;
 800a4b2:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 800a4b6:	4618      	mov	r0, r3
 800a4b8:	3750      	adds	r7, #80	; 0x50
 800a4ba:	46bd      	mov	sp, r7
 800a4bc:	bd80      	pop	{r7, pc}
 800a4be:	bf00      	nop
 800a4c0:	420c4000 	.word	0x420c4000
 800a4c4:	420d1400 	.word	0x420d1400
 800a4c8:	420d2400 	.word	0x420d2400

0800a4cc <OSPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart : Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_WaitFlagStateUntilTimeout(OSPI_HandleTypeDef *hospi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 800a4cc:	b580      	push	{r7, lr}
 800a4ce:	b084      	sub	sp, #16
 800a4d0:	af00      	add	r7, sp, #0
 800a4d2:	60f8      	str	r0, [r7, #12]
 800a4d4:	60b9      	str	r1, [r7, #8]
 800a4d6:	603b      	str	r3, [r7, #0]
 800a4d8:	4613      	mov	r3, r2
 800a4da:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while ((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 800a4dc:	e022      	b.n	800a524 <OSPI_WaitFlagStateUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a4de:	69bb      	ldr	r3, [r7, #24]
 800a4e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a4e4:	d01e      	beq.n	800a524 <OSPI_WaitFlagStateUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a4e6:	f7fc f80f 	bl	8006508 <HAL_GetTick>
 800a4ea:	4602      	mov	r2, r0
 800a4ec:	683b      	ldr	r3, [r7, #0]
 800a4ee:	1ad3      	subs	r3, r2, r3
 800a4f0:	69ba      	ldr	r2, [r7, #24]
 800a4f2:	429a      	cmp	r2, r3
 800a4f4:	d302      	bcc.n	800a4fc <OSPI_WaitFlagStateUntilTimeout+0x30>
 800a4f6:	69bb      	ldr	r3, [r7, #24]
 800a4f8:	2b00      	cmp	r3, #0
 800a4fa:	d113      	bne.n	800a524 <OSPI_WaitFlagStateUntilTimeout+0x58>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hospi->Instance->SR & Flag) != (uint32_t)State)
 800a4fc:	68fb      	ldr	r3, [r7, #12]
 800a4fe:	681b      	ldr	r3, [r3, #0]
 800a500:	6a1a      	ldr	r2, [r3, #32]
 800a502:	68bb      	ldr	r3, [r7, #8]
 800a504:	401a      	ands	r2, r3
 800a506:	79fb      	ldrb	r3, [r7, #7]
 800a508:	429a      	cmp	r2, r3
 800a50a:	d00b      	beq.n	800a524 <OSPI_WaitFlagStateUntilTimeout+0x58>
        {
          hospi->State     = HAL_OSPI_STATE_ERROR;
 800a50c:	68fb      	ldr	r3, [r7, #12]
 800a50e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a512:	651a      	str	r2, [r3, #80]	; 0x50
          hospi->ErrorCode |= HAL_OSPI_ERROR_TIMEOUT;
 800a514:	68fb      	ldr	r3, [r7, #12]
 800a516:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a518:	f043 0201 	orr.w	r2, r3, #1
 800a51c:	68fb      	ldr	r3, [r7, #12]
 800a51e:	655a      	str	r2, [r3, #84]	; 0x54

          return HAL_ERROR;
 800a520:	2301      	movs	r3, #1
 800a522:	e00e      	b.n	800a542 <OSPI_WaitFlagStateUntilTimeout+0x76>
  while ((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 800a524:	68fb      	ldr	r3, [r7, #12]
 800a526:	681b      	ldr	r3, [r3, #0]
 800a528:	6a1a      	ldr	r2, [r3, #32]
 800a52a:	68bb      	ldr	r3, [r7, #8]
 800a52c:	4013      	ands	r3, r2
 800a52e:	2b00      	cmp	r3, #0
 800a530:	bf14      	ite	ne
 800a532:	2301      	movne	r3, #1
 800a534:	2300      	moveq	r3, #0
 800a536:	b2db      	uxtb	r3, r3
 800a538:	461a      	mov	r2, r3
 800a53a:	79fb      	ldrb	r3, [r7, #7]
 800a53c:	429a      	cmp	r2, r3
 800a53e:	d1ce      	bne.n	800a4de <OSPI_WaitFlagStateUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a540:	2300      	movs	r3, #0
}
 800a542:	4618      	mov	r0, r3
 800a544:	3710      	adds	r7, #16
 800a546:	46bd      	mov	sp, r7
 800a548:	bd80      	pop	{r7, pc}
	...

0800a54c <OSPI_ConfigCmd>:
  * @param  hospi : OSPI handle
  * @param  cmd   : structure that contains the command configuration information
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_ConfigCmd(OSPI_HandleTypeDef *hospi, OSPI_RegularCmdTypeDef *cmd)
{
 800a54c:	b480      	push	{r7}
 800a54e:	b089      	sub	sp, #36	; 0x24
 800a550:	af00      	add	r7, sp, #0
 800a552:	6078      	str	r0, [r7, #4]
 800a554:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a556:	2300      	movs	r3, #0
 800a558:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *tcr_reg;
  __IO uint32_t *ir_reg;
  __IO uint32_t *abr_reg;

  /* Re-initialize the value of the functional mode */
  MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, 0U);
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	681b      	ldr	r3, [r3, #0]
 800a55e:	681a      	ldr	r2, [r3, #0]
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	681b      	ldr	r3, [r3, #0]
 800a564:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800a568:	601a      	str	r2, [r3, #0]

  /* Configure the flash ID */
  if (hospi->Init.DualQuad == HAL_OSPI_DUALQUAD_DISABLE)
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	689b      	ldr	r3, [r3, #8]
 800a56e:	2b00      	cmp	r3, #0
 800a570:	d10a      	bne.n	800a588 <OSPI_ConfigCmd+0x3c>
  {
    MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_MSEL, cmd->FlashId);
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	681b      	ldr	r3, [r3, #0]
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 800a57c:	683b      	ldr	r3, [r7, #0]
 800a57e:	685a      	ldr	r2, [r3, #4]
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	681b      	ldr	r3, [r3, #0]
 800a584:	430a      	orrs	r2, r1
 800a586:	601a      	str	r2, [r3, #0]
  }

  if (cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG)
 800a588:	683b      	ldr	r3, [r7, #0]
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	2b02      	cmp	r3, #2
 800a58e:	d114      	bne.n	800a5ba <OSPI_ConfigCmd+0x6e>
  {
    ccr_reg = &(hospi->Instance->WCCR);
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	681b      	ldr	r3, [r3, #0]
 800a594:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800a598:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hospi->Instance->WTCR);
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	681b      	ldr	r3, [r3, #0]
 800a59e:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 800a5a2:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hospi->Instance->WIR);
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	681b      	ldr	r3, [r3, #0]
 800a5a8:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800a5ac:	613b      	str	r3, [r7, #16]
    abr_reg = &(hospi->Instance->WABR);
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	681b      	ldr	r3, [r3, #0]
 800a5b2:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 800a5b6:	60fb      	str	r3, [r7, #12]
 800a5b8:	e02c      	b.n	800a614 <OSPI_ConfigCmd+0xc8>
  }
  else if (cmd->OperationType == HAL_OSPI_OPTYPE_WRAP_CFG)
 800a5ba:	683b      	ldr	r3, [r7, #0]
 800a5bc:	681b      	ldr	r3, [r3, #0]
 800a5be:	2b03      	cmp	r3, #3
 800a5c0:	d114      	bne.n	800a5ec <OSPI_ConfigCmd+0xa0>
  {
    ccr_reg = &(hospi->Instance->WPCCR);
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	681b      	ldr	r3, [r3, #0]
 800a5c6:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800a5ca:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hospi->Instance->WPTCR);
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 800a5d4:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hospi->Instance->WPIR);
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a5de:	613b      	str	r3, [r7, #16]
    abr_reg = &(hospi->Instance->WPABR);
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	681b      	ldr	r3, [r3, #0]
 800a5e4:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 800a5e8:	60fb      	str	r3, [r7, #12]
 800a5ea:	e013      	b.n	800a614 <OSPI_ConfigCmd+0xc8>
  }
  else
  {
    ccr_reg = &(hospi->Instance->CCR);
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800a5f4:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hospi->Instance->TCR);
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	681b      	ldr	r3, [r3, #0]
 800a5fa:	f503 7384 	add.w	r3, r3, #264	; 0x108
 800a5fe:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hospi->Instance->IR);
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	681b      	ldr	r3, [r3, #0]
 800a604:	f503 7388 	add.w	r3, r3, #272	; 0x110
 800a608:	613b      	str	r3, [r7, #16]
    abr_reg = &(hospi->Instance->ABR);
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	681b      	ldr	r3, [r3, #0]
 800a60e:	f503 7390 	add.w	r3, r3, #288	; 0x120
 800a612:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CCR register with DQS and SIOO modes */
  *ccr_reg = (cmd->DQSMode | cmd->SIOOMode);
 800a614:	683b      	ldr	r3, [r7, #0]
 800a616:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a618:	683b      	ldr	r3, [r7, #0]
 800a61a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a61c:	431a      	orrs	r2, r3
 800a61e:	69bb      	ldr	r3, [r7, #24]
 800a620:	601a      	str	r2, [r3, #0]

  if (cmd->AlternateBytesMode != HAL_OSPI_ALTERNATE_BYTES_NONE)
 800a622:	683b      	ldr	r3, [r7, #0]
 800a624:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a626:	2b00      	cmp	r3, #0
 800a628:	d012      	beq.n	800a650 <OSPI_ConfigCmd+0x104>
  {
    /* Configure the ABR register with alternate bytes value */
    *abr_reg = cmd->AlternateBytes;
 800a62a:	683b      	ldr	r3, [r7, #0]
 800a62c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a62e:	68fb      	ldr	r3, [r7, #12]
 800a630:	601a      	str	r2, [r3, #0]

    /* Configure the CCR register with alternate bytes communication parameters */
    MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ABMODE | OCTOSPI_CCR_ABDTR | OCTOSPI_CCR_ABSIZE),
 800a632:	69bb      	ldr	r3, [r7, #24]
 800a634:	681b      	ldr	r3, [r3, #0]
 800a636:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800a63a:	683b      	ldr	r3, [r7, #0]
 800a63c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800a63e:	683b      	ldr	r3, [r7, #0]
 800a640:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a642:	4319      	orrs	r1, r3
 800a644:	683b      	ldr	r3, [r7, #0]
 800a646:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a648:	430b      	orrs	r3, r1
 800a64a:	431a      	orrs	r2, r3
 800a64c:	69bb      	ldr	r3, [r7, #24]
 800a64e:	601a      	str	r2, [r3, #0]
               (cmd->AlternateBytesMode | cmd->AlternateBytesDtrMode | cmd->AlternateBytesSize));
  }

  /* Configure the TCR register with the number of dummy cycles */
  MODIFY_REG((*tcr_reg), OCTOSPI_TCR_DCYC, cmd->DummyCycles);
 800a650:	697b      	ldr	r3, [r7, #20]
 800a652:	681b      	ldr	r3, [r3, #0]
 800a654:	f023 021f 	bic.w	r2, r3, #31
 800a658:	683b      	ldr	r3, [r7, #0]
 800a65a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a65c:	431a      	orrs	r2, r3
 800a65e:	697b      	ldr	r3, [r7, #20]
 800a660:	601a      	str	r2, [r3, #0]

  if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 800a662:	683b      	ldr	r3, [r7, #0]
 800a664:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a666:	2b00      	cmp	r3, #0
 800a668:	d009      	beq.n	800a67e <OSPI_ConfigCmd+0x132>
  {
    if (cmd->OperationType == HAL_OSPI_OPTYPE_COMMON_CFG)
 800a66a:	683b      	ldr	r3, [r7, #0]
 800a66c:	681b      	ldr	r3, [r3, #0]
 800a66e:	2b00      	cmp	r3, #0
 800a670:	d105      	bne.n	800a67e <OSPI_ConfigCmd+0x132>
    {
      /* Configure the DLR register with the number of data */
      hospi->Instance->DLR = (cmd->NbData - 1U);
 800a672:	683b      	ldr	r3, [r7, #0]
 800a674:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	681b      	ldr	r3, [r3, #0]
 800a67a:	3a01      	subs	r2, #1
 800a67c:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (cmd->InstructionMode != HAL_OSPI_INSTRUCTION_NONE)
 800a67e:	683b      	ldr	r3, [r7, #0]
 800a680:	68db      	ldr	r3, [r3, #12]
 800a682:	2b00      	cmp	r3, #0
 800a684:	f000 8099 	beq.w	800a7ba <OSPI_ConfigCmd+0x26e>
  {
    if (cmd->AddressMode != HAL_OSPI_ADDRESS_NONE)
 800a688:	683b      	ldr	r3, [r7, #0]
 800a68a:	69db      	ldr	r3, [r3, #28]
 800a68c:	2b00      	cmp	r3, #0
 800a68e:	d055      	beq.n	800a73c <OSPI_ConfigCmd+0x1f0>
    {
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 800a690:	683b      	ldr	r3, [r7, #0]
 800a692:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a694:	2b00      	cmp	r3, #0
 800a696:	d01e      	beq.n	800a6d6 <OSPI_ConfigCmd+0x18a>
      {
        /* ---- Command with instruction, address and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE  | OCTOSPI_CCR_IDTR  | OCTOSPI_CCR_ISIZE  |
 800a698:	69bb      	ldr	r3, [r7, #24]
 800a69a:	681a      	ldr	r2, [r3, #0]
 800a69c:	4b67      	ldr	r3, [pc, #412]	; (800a83c <OSPI_ConfigCmd+0x2f0>)
 800a69e:	4013      	ands	r3, r2
 800a6a0:	683a      	ldr	r2, [r7, #0]
 800a6a2:	68d1      	ldr	r1, [r2, #12]
 800a6a4:	683a      	ldr	r2, [r7, #0]
 800a6a6:	6952      	ldr	r2, [r2, #20]
 800a6a8:	4311      	orrs	r1, r2
 800a6aa:	683a      	ldr	r2, [r7, #0]
 800a6ac:	6912      	ldr	r2, [r2, #16]
 800a6ae:	4311      	orrs	r1, r2
 800a6b0:	683a      	ldr	r2, [r7, #0]
 800a6b2:	69d2      	ldr	r2, [r2, #28]
 800a6b4:	4311      	orrs	r1, r2
 800a6b6:	683a      	ldr	r2, [r7, #0]
 800a6b8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800a6ba:	4311      	orrs	r1, r2
 800a6bc:	683a      	ldr	r2, [r7, #0]
 800a6be:	6a12      	ldr	r2, [r2, #32]
 800a6c0:	4311      	orrs	r1, r2
 800a6c2:	683a      	ldr	r2, [r7, #0]
 800a6c4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800a6c6:	4311      	orrs	r1, r2
 800a6c8:	683a      	ldr	r2, [r7, #0]
 800a6ca:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800a6cc:	430a      	orrs	r2, r1
 800a6ce:	431a      	orrs	r2, r3
 800a6d0:	69bb      	ldr	r3, [r7, #24]
 800a6d2:	601a      	str	r2, [r3, #0]
 800a6d4:	e028      	b.n	800a728 <OSPI_ConfigCmd+0x1dc>
      else
      {
        /* ---- Command with instruction and address ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE  | OCTOSPI_CCR_IDTR  | OCTOSPI_CCR_ISIZE  |
 800a6d6:	69bb      	ldr	r3, [r7, #24]
 800a6d8:	681b      	ldr	r3, [r3, #0]
 800a6da:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800a6de:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800a6e2:	683a      	ldr	r2, [r7, #0]
 800a6e4:	68d1      	ldr	r1, [r2, #12]
 800a6e6:	683a      	ldr	r2, [r7, #0]
 800a6e8:	6952      	ldr	r2, [r2, #20]
 800a6ea:	4311      	orrs	r1, r2
 800a6ec:	683a      	ldr	r2, [r7, #0]
 800a6ee:	6912      	ldr	r2, [r2, #16]
 800a6f0:	4311      	orrs	r1, r2
 800a6f2:	683a      	ldr	r2, [r7, #0]
 800a6f4:	69d2      	ldr	r2, [r2, #28]
 800a6f6:	4311      	orrs	r1, r2
 800a6f8:	683a      	ldr	r2, [r7, #0]
 800a6fa:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800a6fc:	4311      	orrs	r1, r2
 800a6fe:	683a      	ldr	r2, [r7, #0]
 800a700:	6a12      	ldr	r2, [r2, #32]
 800a702:	430a      	orrs	r2, r1
 800a704:	431a      	orrs	r2, r3
 800a706:	69bb      	ldr	r3, [r7, #24]
 800a708:	601a      	str	r2, [r3, #0]
                                OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE),
                   (cmd->InstructionMode | cmd->InstructionDtrMode | cmd->InstructionSize |
                    cmd->AddressMode     | cmd->AddressDtrMode     | cmd->AddressSize));

        /* The DHQC bit is linked with DDTR bit which should be activated */
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a70e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a712:	d109      	bne.n	800a728 <OSPI_ConfigCmd+0x1dc>
            (cmd->InstructionDtrMode == HAL_OSPI_INSTRUCTION_DTR_ENABLE))
 800a714:	683b      	ldr	r3, [r7, #0]
 800a716:	695b      	ldr	r3, [r3, #20]
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 800a718:	2b08      	cmp	r3, #8
 800a71a:	d105      	bne.n	800a728 <OSPI_ConfigCmd+0x1dc>
        {
          MODIFY_REG((*ccr_reg), OCTOSPI_CCR_DDTR, HAL_OSPI_DATA_DTR_ENABLE);
 800a71c:	69bb      	ldr	r3, [r7, #24]
 800a71e:	681b      	ldr	r3, [r3, #0]
 800a720:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800a724:	69bb      	ldr	r3, [r7, #24]
 800a726:	601a      	str	r2, [r3, #0]
        }
      }

      /* Configure the IR register with the instruction value */
      *ir_reg = cmd->Instruction;
 800a728:	683b      	ldr	r3, [r7, #0]
 800a72a:	689a      	ldr	r2, [r3, #8]
 800a72c:	693b      	ldr	r3, [r7, #16]
 800a72e:	601a      	str	r2, [r3, #0]

      /* Configure the AR register with the address value */
      hospi->Instance->AR = cmd->Address;
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	681b      	ldr	r3, [r3, #0]
 800a734:	683a      	ldr	r2, [r7, #0]
 800a736:	6992      	ldr	r2, [r2, #24]
 800a738:	649a      	str	r2, [r3, #72]	; 0x48
 800a73a:	e078      	b.n	800a82e <OSPI_ConfigCmd+0x2e2>
    }
    else
    {
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 800a73c:	683b      	ldr	r3, [r7, #0]
 800a73e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a740:	2b00      	cmp	r3, #0
 800a742:	d017      	beq.n	800a774 <OSPI_ConfigCmd+0x228>
      {
        /* ---- Command with instruction and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE | OCTOSPI_CCR_IDTR | OCTOSPI_CCR_ISIZE |
 800a744:	69bb      	ldr	r3, [r7, #24]
 800a746:	681b      	ldr	r3, [r3, #0]
 800a748:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 800a74c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800a750:	683a      	ldr	r2, [r7, #0]
 800a752:	68d1      	ldr	r1, [r2, #12]
 800a754:	683a      	ldr	r2, [r7, #0]
 800a756:	6952      	ldr	r2, [r2, #20]
 800a758:	4311      	orrs	r1, r2
 800a75a:	683a      	ldr	r2, [r7, #0]
 800a75c:	6912      	ldr	r2, [r2, #16]
 800a75e:	4311      	orrs	r1, r2
 800a760:	683a      	ldr	r2, [r7, #0]
 800a762:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800a764:	4311      	orrs	r1, r2
 800a766:	683a      	ldr	r2, [r7, #0]
 800a768:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800a76a:	430a      	orrs	r2, r1
 800a76c:	431a      	orrs	r2, r3
 800a76e:	69bb      	ldr	r3, [r7, #24]
 800a770:	601a      	str	r2, [r3, #0]
 800a772:	e01d      	b.n	800a7b0 <OSPI_ConfigCmd+0x264>
      else
      {
        /* ---- Command with only instruction ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE | OCTOSPI_CCR_IDTR | OCTOSPI_CCR_ISIZE),
 800a774:	69bb      	ldr	r3, [r7, #24]
 800a776:	681b      	ldr	r3, [r3, #0]
 800a778:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 800a77c:	683b      	ldr	r3, [r7, #0]
 800a77e:	68d9      	ldr	r1, [r3, #12]
 800a780:	683b      	ldr	r3, [r7, #0]
 800a782:	695b      	ldr	r3, [r3, #20]
 800a784:	4319      	orrs	r1, r3
 800a786:	683b      	ldr	r3, [r7, #0]
 800a788:	691b      	ldr	r3, [r3, #16]
 800a78a:	430b      	orrs	r3, r1
 800a78c:	431a      	orrs	r2, r3
 800a78e:	69bb      	ldr	r3, [r7, #24]
 800a790:	601a      	str	r2, [r3, #0]
                   (cmd->InstructionMode | cmd->InstructionDtrMode | cmd->InstructionSize));

        /* The DHQC bit is linked with DDTR bit which should be activated */
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a796:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a79a:	d109      	bne.n	800a7b0 <OSPI_ConfigCmd+0x264>
            (cmd->InstructionDtrMode == HAL_OSPI_INSTRUCTION_DTR_ENABLE))
 800a79c:	683b      	ldr	r3, [r7, #0]
 800a79e:	695b      	ldr	r3, [r3, #20]
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 800a7a0:	2b08      	cmp	r3, #8
 800a7a2:	d105      	bne.n	800a7b0 <OSPI_ConfigCmd+0x264>
        {
          MODIFY_REG((*ccr_reg), OCTOSPI_CCR_DDTR, HAL_OSPI_DATA_DTR_ENABLE);
 800a7a4:	69bb      	ldr	r3, [r7, #24]
 800a7a6:	681b      	ldr	r3, [r3, #0]
 800a7a8:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800a7ac:	69bb      	ldr	r3, [r7, #24]
 800a7ae:	601a      	str	r2, [r3, #0]
        }
      }

      /* Configure the IR register with the instruction value */
      *ir_reg = cmd->Instruction;
 800a7b0:	683b      	ldr	r3, [r7, #0]
 800a7b2:	689a      	ldr	r2, [r3, #8]
 800a7b4:	693b      	ldr	r3, [r7, #16]
 800a7b6:	601a      	str	r2, [r3, #0]
 800a7b8:	e039      	b.n	800a82e <OSPI_ConfigCmd+0x2e2>

    }
  }
  else
  {
    if (cmd->AddressMode != HAL_OSPI_ADDRESS_NONE)
 800a7ba:	683b      	ldr	r3, [r7, #0]
 800a7bc:	69db      	ldr	r3, [r3, #28]
 800a7be:	2b00      	cmp	r3, #0
 800a7c0:	d030      	beq.n	800a824 <OSPI_ConfigCmd+0x2d8>
    {
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 800a7c2:	683b      	ldr	r3, [r7, #0]
 800a7c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a7c6:	2b00      	cmp	r3, #0
 800a7c8:	d017      	beq.n	800a7fa <OSPI_ConfigCmd+0x2ae>
      {
        /* ---- Command with address and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE |
 800a7ca:	69bb      	ldr	r3, [r7, #24]
 800a7cc:	681b      	ldr	r3, [r3, #0]
 800a7ce:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 800a7d2:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800a7d6:	683a      	ldr	r2, [r7, #0]
 800a7d8:	69d1      	ldr	r1, [r2, #28]
 800a7da:	683a      	ldr	r2, [r7, #0]
 800a7dc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800a7de:	4311      	orrs	r1, r2
 800a7e0:	683a      	ldr	r2, [r7, #0]
 800a7e2:	6a12      	ldr	r2, [r2, #32]
 800a7e4:	4311      	orrs	r1, r2
 800a7e6:	683a      	ldr	r2, [r7, #0]
 800a7e8:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800a7ea:	4311      	orrs	r1, r2
 800a7ec:	683a      	ldr	r2, [r7, #0]
 800a7ee:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800a7f0:	430a      	orrs	r2, r1
 800a7f2:	431a      	orrs	r2, r3
 800a7f4:	69bb      	ldr	r3, [r7, #24]
 800a7f6:	601a      	str	r2, [r3, #0]
 800a7f8:	e00e      	b.n	800a818 <OSPI_ConfigCmd+0x2cc>
      else
      {
        /* ---- Command with only address ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE),
 800a7fa:	69bb      	ldr	r3, [r7, #24]
 800a7fc:	681b      	ldr	r3, [r3, #0]
 800a7fe:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800a802:	683b      	ldr	r3, [r7, #0]
 800a804:	69d9      	ldr	r1, [r3, #28]
 800a806:	683b      	ldr	r3, [r7, #0]
 800a808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a80a:	4319      	orrs	r1, r3
 800a80c:	683b      	ldr	r3, [r7, #0]
 800a80e:	6a1b      	ldr	r3, [r3, #32]
 800a810:	430b      	orrs	r3, r1
 800a812:	431a      	orrs	r2, r3
 800a814:	69bb      	ldr	r3, [r7, #24]
 800a816:	601a      	str	r2, [r3, #0]
                   (cmd->AddressMode | cmd->AddressDtrMode | cmd->AddressSize));
      }

      /* Configure the AR register with the instruction value */
      hospi->Instance->AR = cmd->Address;
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	681b      	ldr	r3, [r3, #0]
 800a81c:	683a      	ldr	r2, [r7, #0]
 800a81e:	6992      	ldr	r2, [r2, #24]
 800a820:	649a      	str	r2, [r3, #72]	; 0x48
 800a822:	e004      	b.n	800a82e <OSPI_ConfigCmd+0x2e2>
    }
    else
    {
      /* ---- Invalid command configuration (no instruction, no address) ---- */
      status = HAL_ERROR;
 800a824:	2301      	movs	r3, #1
 800a826:	77fb      	strb	r3, [r7, #31]
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	2208      	movs	r2, #8
 800a82c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }

  /* Return function status */
  return status;
 800a82e:	7ffb      	ldrb	r3, [r7, #31]
}
 800a830:	4618      	mov	r0, r3
 800a832:	3724      	adds	r7, #36	; 0x24
 800a834:	46bd      	mov	sp, r7
 800a836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a83a:	4770      	bx	lr
 800a83c:	f0ffc0c0 	.word	0xf0ffc0c0

0800a840 <OSPIM_GetConfig>:
  * @param  instance_nb : number of the instance
  * @param  cfg         : configuration of the IO Manager for the instance
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPIM_GetConfig(uint8_t instance_nb, OSPIM_CfgTypeDef *cfg)
{
 800a840:	b480      	push	{r7}
 800a842:	b087      	sub	sp, #28
 800a844:	af00      	add	r7, sp, #0
 800a846:	4603      	mov	r3, r0
 800a848:	6039      	str	r1, [r7, #0]
 800a84a:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 800a84c:	2300      	movs	r3, #0
 800a84e:	75fb      	strb	r3, [r7, #23]
  uint32_t reg;
  uint32_t value = 0U;
 800a850:	2300      	movs	r3, #0
 800a852:	613b      	str	r3, [r7, #16]
  uint32_t index;

  if ((instance_nb == 0U) || (instance_nb > OSPI_NB_INSTANCE) || (cfg == NULL))
 800a854:	79fb      	ldrb	r3, [r7, #7]
 800a856:	2b00      	cmp	r3, #0
 800a858:	d005      	beq.n	800a866 <OSPIM_GetConfig+0x26>
 800a85a:	79fb      	ldrb	r3, [r7, #7]
 800a85c:	2b02      	cmp	r3, #2
 800a85e:	d802      	bhi.n	800a866 <OSPIM_GetConfig+0x26>
 800a860:	683b      	ldr	r3, [r7, #0]
 800a862:	2b00      	cmp	r3, #0
 800a864:	d102      	bne.n	800a86c <OSPIM_GetConfig+0x2c>
  {
    /* Invalid parameter -> error returned */
    status = HAL_ERROR;
 800a866:	2301      	movs	r3, #1
 800a868:	75fb      	strb	r3, [r7, #23]
 800a86a:	e098      	b.n	800a99e <OSPIM_GetConfig+0x15e>
  }
  else
  {
    /* Initialize the structure */
    cfg->ClkPort    = 0U;
 800a86c:	683b      	ldr	r3, [r7, #0]
 800a86e:	2200      	movs	r2, #0
 800a870:	601a      	str	r2, [r3, #0]
    cfg->DQSPort    = 0U;
 800a872:	683b      	ldr	r3, [r7, #0]
 800a874:	2200      	movs	r2, #0
 800a876:	605a      	str	r2, [r3, #4]
    cfg->NCSPort    = 0U;
 800a878:	683b      	ldr	r3, [r7, #0]
 800a87a:	2200      	movs	r2, #0
 800a87c:	609a      	str	r2, [r3, #8]
    cfg->IOLowPort  = 0U;
 800a87e:	683b      	ldr	r3, [r7, #0]
 800a880:	2200      	movs	r2, #0
 800a882:	60da      	str	r2, [r3, #12]
    cfg->IOHighPort = 0U;
 800a884:	683b      	ldr	r3, [r7, #0]
 800a886:	2200      	movs	r2, #0
 800a888:	611a      	str	r2, [r3, #16]

    if (instance_nb == 2U)
 800a88a:	79fb      	ldrb	r3, [r7, #7]
 800a88c:	2b02      	cmp	r3, #2
 800a88e:	d10b      	bne.n	800a8a8 <OSPIM_GetConfig+0x68>
    {
      if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) == 0U)
 800a890:	4b46      	ldr	r3, [pc, #280]	; (800a9ac <OSPIM_GetConfig+0x16c>)
 800a892:	681b      	ldr	r3, [r3, #0]
 800a894:	f003 0301 	and.w	r3, r3, #1
 800a898:	2b00      	cmp	r3, #0
 800a89a:	d102      	bne.n	800a8a2 <OSPIM_GetConfig+0x62>
      {
        value = (OCTOSPIM_PCR_CLKSRC | OCTOSPIM_PCR_DQSSRC | OCTOSPIM_PCR_NCSSRC
 800a89c:	4b44      	ldr	r3, [pc, #272]	; (800a9b0 <OSPIM_GetConfig+0x170>)
 800a89e:	613b      	str	r3, [r7, #16]
 800a8a0:	e002      	b.n	800a8a8 <OSPIM_GetConfig+0x68>
                 | OCTOSPIM_PCR_IOLSRC_1 | OCTOSPIM_PCR_IOHSRC_1);
      }
      else
      {
        value = OCTOSPIM_PCR_NCSSRC;
 800a8a2:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a8a6:	613b      	str	r3, [r7, #16]
      }
    }

    /* Get the information about the instance */
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 800a8a8:	2300      	movs	r3, #0
 800a8aa:	60fb      	str	r3, [r7, #12]
 800a8ac:	e074      	b.n	800a998 <OSPIM_GetConfig+0x158>
    {
      reg = OCTOSPIM->PCR[index];
 800a8ae:	4a3f      	ldr	r2, [pc, #252]	; (800a9ac <OSPIM_GetConfig+0x16c>)
 800a8b0:	68fb      	ldr	r3, [r7, #12]
 800a8b2:	009b      	lsls	r3, r3, #2
 800a8b4:	4413      	add	r3, r2
 800a8b6:	685b      	ldr	r3, [r3, #4]
 800a8b8:	60bb      	str	r3, [r7, #8]

      if ((reg & OCTOSPIM_PCR_CLKEN) != 0U)
 800a8ba:	68bb      	ldr	r3, [r7, #8]
 800a8bc:	f003 0301 	and.w	r3, r3, #1
 800a8c0:	2b00      	cmp	r3, #0
 800a8c2:	d00a      	beq.n	800a8da <OSPIM_GetConfig+0x9a>
      {
        /* The clock is enabled on this port */
        if ((reg & OCTOSPIM_PCR_CLKSRC) == (value & OCTOSPIM_PCR_CLKSRC))
 800a8c4:	68ba      	ldr	r2, [r7, #8]
 800a8c6:	693b      	ldr	r3, [r7, #16]
 800a8c8:	4053      	eors	r3, r2
 800a8ca:	f003 0302 	and.w	r3, r3, #2
 800a8ce:	2b00      	cmp	r3, #0
 800a8d0:	d103      	bne.n	800a8da <OSPIM_GetConfig+0x9a>
        {
          /* The clock correspond to the instance passed as parameter */
          cfg->ClkPort = index + 1U;
 800a8d2:	68fb      	ldr	r3, [r7, #12]
 800a8d4:	1c5a      	adds	r2, r3, #1
 800a8d6:	683b      	ldr	r3, [r7, #0]
 800a8d8:	601a      	str	r2, [r3, #0]
        }
      }

      if ((reg & OCTOSPIM_PCR_DQSEN) != 0U)
 800a8da:	68bb      	ldr	r3, [r7, #8]
 800a8dc:	f003 0310 	and.w	r3, r3, #16
 800a8e0:	2b00      	cmp	r3, #0
 800a8e2:	d00a      	beq.n	800a8fa <OSPIM_GetConfig+0xba>
      {
        /* The DQS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_DQSSRC) == (value & OCTOSPIM_PCR_DQSSRC))
 800a8e4:	68ba      	ldr	r2, [r7, #8]
 800a8e6:	693b      	ldr	r3, [r7, #16]
 800a8e8:	4053      	eors	r3, r2
 800a8ea:	f003 0320 	and.w	r3, r3, #32
 800a8ee:	2b00      	cmp	r3, #0
 800a8f0:	d103      	bne.n	800a8fa <OSPIM_GetConfig+0xba>
        {
          /* The DQS correspond to the instance passed as parameter */
          cfg->DQSPort = index + 1U;
 800a8f2:	68fb      	ldr	r3, [r7, #12]
 800a8f4:	1c5a      	adds	r2, r3, #1
 800a8f6:	683b      	ldr	r3, [r7, #0]
 800a8f8:	605a      	str	r2, [r3, #4]
        }
      }

      if ((reg & OCTOSPIM_PCR_NCSEN) != 0U)
 800a8fa:	68bb      	ldr	r3, [r7, #8]
 800a8fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a900:	2b00      	cmp	r3, #0
 800a902:	d00a      	beq.n	800a91a <OSPIM_GetConfig+0xda>
      {
        /* The nCS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_NCSSRC) == (value & OCTOSPIM_PCR_NCSSRC))
 800a904:	68ba      	ldr	r2, [r7, #8]
 800a906:	693b      	ldr	r3, [r7, #16]
 800a908:	4053      	eors	r3, r2
 800a90a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a90e:	2b00      	cmp	r3, #0
 800a910:	d103      	bne.n	800a91a <OSPIM_GetConfig+0xda>
        {
          /* The nCS correspond to the instance passed as parameter */
          cfg->NCSPort = index + 1U;
 800a912:	68fb      	ldr	r3, [r7, #12]
 800a914:	1c5a      	adds	r2, r3, #1
 800a916:	683b      	ldr	r3, [r7, #0]
 800a918:	609a      	str	r2, [r3, #8]
        }
      }

      if ((reg & OCTOSPIM_PCR_IOLEN) != 0U)
 800a91a:	68bb      	ldr	r3, [r7, #8]
 800a91c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a920:	2b00      	cmp	r3, #0
 800a922:	d018      	beq.n	800a956 <OSPIM_GetConfig+0x116>
      {
        /* The IO Low is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOLSRC_1) == (value & OCTOSPIM_PCR_IOLSRC_1))
 800a924:	68ba      	ldr	r2, [r7, #8]
 800a926:	693b      	ldr	r3, [r7, #16]
 800a928:	4053      	eors	r3, r2
 800a92a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a92e:	2b00      	cmp	r3, #0
 800a930:	d111      	bne.n	800a956 <OSPIM_GetConfig+0x116>
        {
          /* The IO Low correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOLSRC_0) == 0U)
 800a932:	68bb      	ldr	r3, [r7, #8]
 800a934:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a938:	2b00      	cmp	r3, #0
 800a93a:	d106      	bne.n	800a94a <OSPIM_GetConfig+0x10a>
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOLEN | (index + 1U));
 800a93c:	68fb      	ldr	r3, [r7, #12]
 800a93e:	3301      	adds	r3, #1
 800a940:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800a944:	683b      	ldr	r3, [r7, #0]
 800a946:	60da      	str	r2, [r3, #12]
 800a948:	e005      	b.n	800a956 <OSPIM_GetConfig+0x116>
          }
          else
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOHEN | (index + 1U));
 800a94a:	68fb      	ldr	r3, [r7, #12]
 800a94c:	3301      	adds	r3, #1
 800a94e:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 800a952:	683b      	ldr	r3, [r7, #0]
 800a954:	60da      	str	r2, [r3, #12]
          }
        }
      }

      if ((reg & OCTOSPIM_PCR_IOHEN) != 0U)
 800a956:	68bb      	ldr	r3, [r7, #8]
 800a958:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a95c:	2b00      	cmp	r3, #0
 800a95e:	d018      	beq.n	800a992 <OSPIM_GetConfig+0x152>
      {
        /* The IO High is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOHSRC_1) == (value & OCTOSPIM_PCR_IOHSRC_1))
 800a960:	68ba      	ldr	r2, [r7, #8]
 800a962:	693b      	ldr	r3, [r7, #16]
 800a964:	4053      	eors	r3, r2
 800a966:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800a96a:	2b00      	cmp	r3, #0
 800a96c:	d111      	bne.n	800a992 <OSPIM_GetConfig+0x152>
        {
          /* The IO High correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOHSRC_0) == 0U)
 800a96e:	68bb      	ldr	r3, [r7, #8]
 800a970:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a974:	2b00      	cmp	r3, #0
 800a976:	d106      	bne.n	800a986 <OSPIM_GetConfig+0x146>
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOLEN | (index + 1U));
 800a978:	68fb      	ldr	r3, [r7, #12]
 800a97a:	3301      	adds	r3, #1
 800a97c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800a980:	683b      	ldr	r3, [r7, #0]
 800a982:	611a      	str	r2, [r3, #16]
 800a984:	e005      	b.n	800a992 <OSPIM_GetConfig+0x152>
          }
          else
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOHEN | (index + 1U));
 800a986:	68fb      	ldr	r3, [r7, #12]
 800a988:	3301      	adds	r3, #1
 800a98a:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 800a98e:	683b      	ldr	r3, [r7, #0]
 800a990:	611a      	str	r2, [r3, #16]
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 800a992:	68fb      	ldr	r3, [r7, #12]
 800a994:	3301      	adds	r3, #1
 800a996:	60fb      	str	r3, [r7, #12]
 800a998:	68fb      	ldr	r3, [r7, #12]
 800a99a:	2b01      	cmp	r3, #1
 800a99c:	d987      	bls.n	800a8ae <OSPIM_GetConfig+0x6e>
      }
    }
  }

  /* Return function status */
  return status;
 800a99e:	7dfb      	ldrb	r3, [r7, #23]
}
 800a9a0:	4618      	mov	r0, r3
 800a9a2:	371c      	adds	r7, #28
 800a9a4:	46bd      	mov	sp, r7
 800a9a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9aa:	4770      	bx	lr
 800a9ac:	420c4000 	.word	0x420c4000
 800a9b0:	04040222 	.word	0x04040222

0800a9b4 <HAL_OSPI_DLYB_SetConfig>:
  * @param  hospi   : OSPI handle.
  * @param  pdlyb_cfg: Pointer to DLYB configuration structure.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_OSPI_DLYB_SetConfig(OSPI_HandleTypeDef *hospi, HAL_OSPI_DLYB_CfgTypeDef  *pdlyb_cfg)
{
 800a9b4:	b580      	push	{r7, lr}
 800a9b6:	b084      	sub	sp, #16
 800a9b8:	af00      	add	r7, sp, #0
 800a9ba:	6078      	str	r0, [r7, #4]
 800a9bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 800a9be:	2301      	movs	r3, #1
 800a9c0:	73fb      	strb	r3, [r7, #15]

  /* Enable OCTOSPI Free Running Clock (mandatory) */
  SET_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	681b      	ldr	r3, [r3, #0]
 800a9c6:	689a      	ldr	r2, [r3, #8]
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	681b      	ldr	r3, [r3, #0]
 800a9cc:	f042 0202 	orr.w	r2, r2, #2
 800a9d0:	609a      	str	r2, [r3, #8]

  /* Update OCTOSPI state */
  hospi->State = HAL_OSPI_STATE_BUSY_CMD;
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	2208      	movs	r2, #8
 800a9d6:	651a      	str	r2, [r3, #80]	; 0x50

  if (hospi->Instance == OCTOSPI1)
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	681b      	ldr	r3, [r3, #0]
 800a9dc:	4a15      	ldr	r2, [pc, #84]	; (800aa34 <HAL_OSPI_DLYB_SetConfig+0x80>)
 800a9de:	4293      	cmp	r3, r2
 800a9e0:	d109      	bne.n	800a9f6 <HAL_OSPI_DLYB_SetConfig+0x42>
  {
    /* Enable the DelayBlock */
    LL_DLYB_Enable(DLYB_OCTOSPI1);
 800a9e2:	4815      	ldr	r0, [pc, #84]	; (800aa38 <HAL_OSPI_DLYB_SetConfig+0x84>)
 800a9e4:	f7fe fe46 	bl	8009674 <LL_DLYB_Enable>

    /* Set the Delay Block configuration */
    LL_DLYB_SetDelay(DLYB_OCTOSPI1, pdlyb_cfg);
 800a9e8:	6839      	ldr	r1, [r7, #0]
 800a9ea:	4813      	ldr	r0, [pc, #76]	; (800aa38 <HAL_OSPI_DLYB_SetConfig+0x84>)
 800a9ec:	f005 fabc 	bl	800ff68 <LL_DLYB_SetDelay>
    status = HAL_OK;
 800a9f0:	2300      	movs	r3, #0
 800a9f2:	73fb      	strb	r3, [r7, #15]
 800a9f4:	e00d      	b.n	800aa12 <HAL_OSPI_DLYB_SetConfig+0x5e>
  }

  else if (hospi->Instance == OCTOSPI2)
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	681b      	ldr	r3, [r3, #0]
 800a9fa:	4a10      	ldr	r2, [pc, #64]	; (800aa3c <HAL_OSPI_DLYB_SetConfig+0x88>)
 800a9fc:	4293      	cmp	r3, r2
 800a9fe:	d108      	bne.n	800aa12 <HAL_OSPI_DLYB_SetConfig+0x5e>
  {
    /* Enable the DelayBlock */
    LL_DLYB_Enable(DLYB_OCTOSPI2);
 800aa00:	480f      	ldr	r0, [pc, #60]	; (800aa40 <HAL_OSPI_DLYB_SetConfig+0x8c>)
 800aa02:	f7fe fe37 	bl	8009674 <LL_DLYB_Enable>

    /* Set the Delay Block configuration */
    LL_DLYB_SetDelay(DLYB_OCTOSPI2, pdlyb_cfg);
 800aa06:	6839      	ldr	r1, [r7, #0]
 800aa08:	480d      	ldr	r0, [pc, #52]	; (800aa40 <HAL_OSPI_DLYB_SetConfig+0x8c>)
 800aa0a:	f005 faad 	bl	800ff68 <LL_DLYB_SetDelay>
    status = HAL_OK;
 800aa0e:	2300      	movs	r3, #0
 800aa10:	73fb      	strb	r3, [r7, #15]
  {
    /* Nothing to do */
  }

  /* Abort the current OCTOSPI operation if exist */
  (void)HAL_OSPI_Abort(hospi);
 800aa12:	6878      	ldr	r0, [r7, #4]
 800aa14:	f7fe ffe4 	bl	80099e0 <HAL_OSPI_Abort>

  /* Disable Free Running Clock */
  CLEAR_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	681b      	ldr	r3, [r3, #0]
 800aa1c:	689a      	ldr	r2, [r3, #8]
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	681b      	ldr	r3, [r3, #0]
 800aa22:	f022 0202 	bic.w	r2, r2, #2
 800aa26:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return status;
 800aa28:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa2a:	4618      	mov	r0, r3
 800aa2c:	3710      	adds	r7, #16
 800aa2e:	46bd      	mov	sp, r7
 800aa30:	bd80      	pop	{r7, pc}
 800aa32:	bf00      	nop
 800aa34:	420d1400 	.word	0x420d1400
 800aa38:	420cf000 	.word	0x420cf000
 800aa3c:	420d2400 	.word	0x420d2400
 800aa40:	420cf400 	.word	0x420cf400

0800aa44 <HAL_OSPI_DLYB_GetConfig>:
  * @param  hospi   : OSPI handle.
  * @param  pdlyb_cfg: Pointer to DLYB configuration structure.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_OSPI_DLYB_GetConfig(OSPI_HandleTypeDef *hospi, HAL_OSPI_DLYB_CfgTypeDef  *pdlyb_cfg)
{
 800aa44:	b580      	push	{r7, lr}
 800aa46:	b084      	sub	sp, #16
 800aa48:	af00      	add	r7, sp, #0
 800aa4a:	6078      	str	r0, [r7, #4]
 800aa4c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 800aa4e:	2301      	movs	r3, #1
 800aa50:	73fb      	strb	r3, [r7, #15]

  if (hospi->Instance == OCTOSPI1)
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	681b      	ldr	r3, [r3, #0]
 800aa56:	4a0d      	ldr	r2, [pc, #52]	; (800aa8c <HAL_OSPI_DLYB_GetConfig+0x48>)
 800aa58:	4293      	cmp	r3, r2
 800aa5a:	d106      	bne.n	800aa6a <HAL_OSPI_DLYB_GetConfig+0x26>
  {
    LL_DLYB_GetDelay(DLYB_OCTOSPI1, pdlyb_cfg);
 800aa5c:	6839      	ldr	r1, [r7, #0]
 800aa5e:	480c      	ldr	r0, [pc, #48]	; (800aa90 <HAL_OSPI_DLYB_GetConfig+0x4c>)
 800aa60:	f005 faa1 	bl	800ffa6 <LL_DLYB_GetDelay>
    status = HAL_OK;
 800aa64:	2300      	movs	r3, #0
 800aa66:	73fb      	strb	r3, [r7, #15]
 800aa68:	e00a      	b.n	800aa80 <HAL_OSPI_DLYB_GetConfig+0x3c>
  }
  else if (hospi->Instance == OCTOSPI2)
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	681b      	ldr	r3, [r3, #0]
 800aa6e:	4a09      	ldr	r2, [pc, #36]	; (800aa94 <HAL_OSPI_DLYB_GetConfig+0x50>)
 800aa70:	4293      	cmp	r3, r2
 800aa72:	d105      	bne.n	800aa80 <HAL_OSPI_DLYB_GetConfig+0x3c>
  {
    LL_DLYB_GetDelay(DLYB_OCTOSPI2, pdlyb_cfg);
 800aa74:	6839      	ldr	r1, [r7, #0]
 800aa76:	4808      	ldr	r0, [pc, #32]	; (800aa98 <HAL_OSPI_DLYB_GetConfig+0x54>)
 800aa78:	f005 fa95 	bl	800ffa6 <LL_DLYB_GetDelay>
    status = HAL_OK;
 800aa7c:	2300      	movs	r3, #0
 800aa7e:	73fb      	strb	r3, [r7, #15]
  {
    /* Nothing to do */
  }

  /* Return function status */
  return status;
 800aa80:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa82:	4618      	mov	r0, r3
 800aa84:	3710      	adds	r7, #16
 800aa86:	46bd      	mov	sp, r7
 800aa88:	bd80      	pop	{r7, pc}
 800aa8a:	bf00      	nop
 800aa8c:	420d1400 	.word	0x420d1400
 800aa90:	420cf000 	.word	0x420cf000
 800aa94:	420d2400 	.word	0x420d2400
 800aa98:	420cf400 	.word	0x420cf400

0800aa9c <HAL_OSPI_DLYB_GetClockPeriod>:
  * @brief  Get the Delay line length value.
  * @param  hospi   : OSPI handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_OSPI_DLYB_GetClockPeriod(OSPI_HandleTypeDef *hospi, HAL_OSPI_DLYB_CfgTypeDef  *pdlyb_cfg)
{
 800aa9c:	b580      	push	{r7, lr}
 800aa9e:	b084      	sub	sp, #16
 800aaa0:	af00      	add	r7, sp, #0
 800aaa2:	6078      	str	r0, [r7, #4]
 800aaa4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 800aaa6:	2301      	movs	r3, #1
 800aaa8:	73fb      	strb	r3, [r7, #15]

  /* Enable OCTOSPI Free Running Clock (mandatory) */
  SET_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	681b      	ldr	r3, [r3, #0]
 800aaae:	689a      	ldr	r2, [r3, #8]
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	681b      	ldr	r3, [r3, #0]
 800aab4:	f042 0202 	orr.w	r2, r2, #2
 800aab8:	609a      	str	r2, [r3, #8]

  /* Update OCTOSPI state */
  hospi->State = HAL_OSPI_STATE_BUSY_CMD;
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	2208      	movs	r2, #8
 800aabe:	651a      	str	r2, [r3, #80]	; 0x50

  if (hospi->Instance == OCTOSPI1)
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	681b      	ldr	r3, [r3, #0]
 800aac4:	4a1b      	ldr	r2, [pc, #108]	; (800ab34 <HAL_OSPI_DLYB_GetClockPeriod+0x98>)
 800aac6:	4293      	cmp	r3, r2
 800aac8:	d10f      	bne.n	800aaea <HAL_OSPI_DLYB_GetClockPeriod+0x4e>
  {
    /* Enable the DelayBlock */
    LL_DLYB_Enable(DLYB_OCTOSPI1);
 800aaca:	481b      	ldr	r0, [pc, #108]	; (800ab38 <HAL_OSPI_DLYB_GetClockPeriod+0x9c>)
 800aacc:	f7fe fdd2 	bl	8009674 <LL_DLYB_Enable>

    /* try to detect Period */
    if (LL_DLYB_GetClockPeriod(DLYB_OCTOSPI1, pdlyb_cfg) == (uint32_t)SUCCESS)
 800aad0:	6839      	ldr	r1, [r7, #0]
 800aad2:	4819      	ldr	r0, [pc, #100]	; (800ab38 <HAL_OSPI_DLYB_GetClockPeriod+0x9c>)
 800aad4:	f005 fa80 	bl	800ffd8 <LL_DLYB_GetClockPeriod>
 800aad8:	4603      	mov	r3, r0
 800aada:	2b00      	cmp	r3, #0
 800aadc:	d101      	bne.n	800aae2 <HAL_OSPI_DLYB_GetClockPeriod+0x46>
    {
      status = HAL_OK;
 800aade:	2300      	movs	r3, #0
 800aae0:	73fb      	strb	r3, [r7, #15]
    }

    /* Disable the DelayBlock */
    LL_DLYB_Disable(DLYB_OCTOSPI1);
 800aae2:	4815      	ldr	r0, [pc, #84]	; (800ab38 <HAL_OSPI_DLYB_GetClockPeriod+0x9c>)
 800aae4:	f7fe fdd6 	bl	8009694 <LL_DLYB_Disable>
 800aae8:	e013      	b.n	800ab12 <HAL_OSPI_DLYB_GetClockPeriod+0x76>
  }

  else if (hospi->Instance == OCTOSPI2)
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	681b      	ldr	r3, [r3, #0]
 800aaee:	4a13      	ldr	r2, [pc, #76]	; (800ab3c <HAL_OSPI_DLYB_GetClockPeriod+0xa0>)
 800aaf0:	4293      	cmp	r3, r2
 800aaf2:	d10e      	bne.n	800ab12 <HAL_OSPI_DLYB_GetClockPeriod+0x76>
  {
    /* Enable the DelayBlock */
    LL_DLYB_Enable(DLYB_OCTOSPI2);
 800aaf4:	4812      	ldr	r0, [pc, #72]	; (800ab40 <HAL_OSPI_DLYB_GetClockPeriod+0xa4>)
 800aaf6:	f7fe fdbd 	bl	8009674 <LL_DLYB_Enable>

    /* try to detect Period */
    if (LL_DLYB_GetClockPeriod(DLYB_OCTOSPI2, pdlyb_cfg) == (uint32_t)SUCCESS)
 800aafa:	6839      	ldr	r1, [r7, #0]
 800aafc:	4810      	ldr	r0, [pc, #64]	; (800ab40 <HAL_OSPI_DLYB_GetClockPeriod+0xa4>)
 800aafe:	f005 fa6b 	bl	800ffd8 <LL_DLYB_GetClockPeriod>
 800ab02:	4603      	mov	r3, r0
 800ab04:	2b00      	cmp	r3, #0
 800ab06:	d101      	bne.n	800ab0c <HAL_OSPI_DLYB_GetClockPeriod+0x70>
    {
      status = HAL_OK;
 800ab08:	2300      	movs	r3, #0
 800ab0a:	73fb      	strb	r3, [r7, #15]
    }

    /* Disable the DelayBlock */
    LL_DLYB_Disable(DLYB_OCTOSPI2);
 800ab0c:	480c      	ldr	r0, [pc, #48]	; (800ab40 <HAL_OSPI_DLYB_GetClockPeriod+0xa4>)
 800ab0e:	f7fe fdc1 	bl	8009694 <LL_DLYB_Disable>
  {
    /* Nothing to do */
  }

  /* Abort the current OctoSPI operation if exist */
  (void)HAL_OSPI_Abort(hospi);
 800ab12:	6878      	ldr	r0, [r7, #4]
 800ab14:	f7fe ff64 	bl	80099e0 <HAL_OSPI_Abort>

  /* Disable Free Running Clock */
  CLEAR_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	681b      	ldr	r3, [r3, #0]
 800ab1c:	689a      	ldr	r2, [r3, #8]
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	681b      	ldr	r3, [r3, #0]
 800ab22:	f022 0202 	bic.w	r2, r2, #2
 800ab26:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return status;
 800ab28:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab2a:	4618      	mov	r0, r3
 800ab2c:	3710      	adds	r7, #16
 800ab2e:	46bd      	mov	sp, r7
 800ab30:	bd80      	pop	{r7, pc}
 800ab32:	bf00      	nop
 800ab34:	420d1400 	.word	0x420d1400
 800ab38:	420cf000 	.word	0x420cf000
 800ab3c:	420d2400 	.word	0x420d2400
 800ab40:	420cf400 	.word	0x420cf400

0800ab44 <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800ab44:	b480      	push	{r7}
 800ab46:	b085      	sub	sp, #20
 800ab48:	af00      	add	r7, sp, #0
 800ab4a:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 800ab4c:	4b34      	ldr	r3, [pc, #208]	; (800ac20 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 800ab4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ab50:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800ab54:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 800ab56:	68ba      	ldr	r2, [r7, #8]
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	429a      	cmp	r2, r3
 800ab5c:	d101      	bne.n	800ab62 <HAL_PWREx_ControlVoltageScaling+0x1e>
  {
    return HAL_OK;
 800ab5e:	2300      	movs	r3, #0
 800ab60:	e057      	b.n	800ac12 <HAL_PWREx_ControlVoltageScaling+0xce>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ab68:	d90a      	bls.n	800ab80 <HAL_PWREx_ControlVoltageScaling+0x3c>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 800ab6a:	4b2d      	ldr	r3, [pc, #180]	; (800ac20 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 800ab6c:	68db      	ldr	r3, [r3, #12]
 800ab6e:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	4313      	orrs	r3, r2
 800ab76:	4a2a      	ldr	r2, [pc, #168]	; (800ac20 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 800ab78:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800ab7c:	60d3      	str	r3, [r2, #12]
 800ab7e:	e007      	b.n	800ab90 <HAL_PWREx_ControlVoltageScaling+0x4c>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 800ab80:	4b27      	ldr	r3, [pc, #156]	; (800ac20 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 800ab82:	68db      	ldr	r3, [r3, #12]
 800ab84:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800ab88:	4925      	ldr	r1, [pc, #148]	; (800ac20 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	4313      	orrs	r3, r2
 800ab8e:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 800ab90:	4b24      	ldr	r3, [pc, #144]	; (800ac24 <HAL_PWREx_ControlVoltageScaling+0xe0>)
 800ab92:	681b      	ldr	r3, [r3, #0]
 800ab94:	4a24      	ldr	r2, [pc, #144]	; (800ac28 <HAL_PWREx_ControlVoltageScaling+0xe4>)
 800ab96:	fba2 2303 	umull	r2, r3, r2, r3
 800ab9a:	099b      	lsrs	r3, r3, #6
 800ab9c:	2232      	movs	r2, #50	; 0x32
 800ab9e:	fb02 f303 	mul.w	r3, r2, r3
 800aba2:	4a21      	ldr	r2, [pc, #132]	; (800ac28 <HAL_PWREx_ControlVoltageScaling+0xe4>)
 800aba4:	fba2 2303 	umull	r2, r3, r2, r3
 800aba8:	099b      	lsrs	r3, r3, #6
 800abaa:	3301      	adds	r3, #1
 800abac:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 800abae:	e002      	b.n	800abb6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    timeout--;
 800abb0:	68fb      	ldr	r3, [r7, #12]
 800abb2:	3b01      	subs	r3, #1
 800abb4:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 800abb6:	4b1a      	ldr	r3, [pc, #104]	; (800ac20 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 800abb8:	68db      	ldr	r3, [r3, #12]
 800abba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800abbe:	2b00      	cmp	r3, #0
 800abc0:	d102      	bne.n	800abc8 <HAL_PWREx_ControlVoltageScaling+0x84>
 800abc2:	68fb      	ldr	r3, [r7, #12]
 800abc4:	2b00      	cmp	r3, #0
 800abc6:	d1f3      	bne.n	800abb0 <HAL_PWREx_ControlVoltageScaling+0x6c>
  }

  /* Check time out */
  if (timeout != 0U)
 800abc8:	68fb      	ldr	r3, [r7, #12]
 800abca:	2b00      	cmp	r3, #0
 800abcc:	d01b      	beq.n	800ac06 <HAL_PWREx_ControlVoltageScaling+0xc2>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 800abce:	4b15      	ldr	r3, [pc, #84]	; (800ac24 <HAL_PWREx_ControlVoltageScaling+0xe0>)
 800abd0:	681b      	ldr	r3, [r3, #0]
 800abd2:	4a15      	ldr	r2, [pc, #84]	; (800ac28 <HAL_PWREx_ControlVoltageScaling+0xe4>)
 800abd4:	fba2 2303 	umull	r2, r3, r2, r3
 800abd8:	099b      	lsrs	r3, r3, #6
 800abda:	2232      	movs	r2, #50	; 0x32
 800abdc:	fb02 f303 	mul.w	r3, r2, r3
 800abe0:	4a11      	ldr	r2, [pc, #68]	; (800ac28 <HAL_PWREx_ControlVoltageScaling+0xe4>)
 800abe2:	fba2 2303 	umull	r2, r3, r2, r3
 800abe6:	099b      	lsrs	r3, r3, #6
 800abe8:	3301      	adds	r3, #1
 800abea:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 800abec:	e002      	b.n	800abf4 <HAL_PWREx_ControlVoltageScaling+0xb0>
    {
      timeout--;
 800abee:	68fb      	ldr	r3, [r7, #12]
 800abf0:	3b01      	subs	r3, #1
 800abf2:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 800abf4:	4b0a      	ldr	r3, [pc, #40]	; (800ac20 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 800abf6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800abf8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800abfc:	2b00      	cmp	r3, #0
 800abfe:	d102      	bne.n	800ac06 <HAL_PWREx_ControlVoltageScaling+0xc2>
 800ac00:	68fb      	ldr	r3, [r7, #12]
 800ac02:	2b00      	cmp	r3, #0
 800ac04:	d1f3      	bne.n	800abee <HAL_PWREx_ControlVoltageScaling+0xaa>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 800ac06:	68fb      	ldr	r3, [r7, #12]
 800ac08:	2b00      	cmp	r3, #0
 800ac0a:	d101      	bne.n	800ac10 <HAL_PWREx_ControlVoltageScaling+0xcc>
  {
    return HAL_TIMEOUT;
 800ac0c:	2303      	movs	r3, #3
 800ac0e:	e000      	b.n	800ac12 <HAL_PWREx_ControlVoltageScaling+0xce>
  }

  return HAL_OK;
 800ac10:	2300      	movs	r3, #0
}
 800ac12:	4618      	mov	r0, r3
 800ac14:	3714      	adds	r7, #20
 800ac16:	46bd      	mov	sp, r7
 800ac18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac1c:	4770      	bx	lr
 800ac1e:	bf00      	nop
 800ac20:	46020800 	.word	0x46020800
 800ac24:	20000004 	.word	0x20000004
 800ac28:	10624dd3 	.word	0x10624dd3

0800ac2c <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800ac2c:	b480      	push	{r7}
 800ac2e:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 800ac30:	4b04      	ldr	r3, [pc, #16]	; (800ac44 <HAL_PWREx_GetVoltageRange+0x18>)
 800ac32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ac34:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 800ac38:	4618      	mov	r0, r3
 800ac3a:	46bd      	mov	sp, r7
 800ac3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac40:	4770      	bx	lr
 800ac42:	bf00      	nop
 800ac44:	46020800 	.word	0x46020800

0800ac48 <HAL_PWREx_ConfigSupply>:
  *                        @arg PWR_LDO_SUPPLY  : The LDO regulator supplies the Vcore Power Domains.
  *                        @arg PWR_SMPS_SUPPLY : The SMPS regulator supplies the Vcore Power Domains.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply(uint32_t SupplySource)
{
 800ac48:	b480      	push	{r7}
 800ac4a:	b085      	sub	sp, #20
 800ac4c:	af00      	add	r7, sp, #0
 800ac4e:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_SUPPLY(SupplySource));

  /* Set maximum time out */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 800ac50:	4b22      	ldr	r3, [pc, #136]	; (800acdc <HAL_PWREx_ConfigSupply+0x94>)
 800ac52:	681b      	ldr	r3, [r3, #0]
 800ac54:	4a22      	ldr	r2, [pc, #136]	; (800ace0 <HAL_PWREx_ConfigSupply+0x98>)
 800ac56:	fba2 2303 	umull	r2, r3, r2, r3
 800ac5a:	099b      	lsrs	r3, r3, #6
 800ac5c:	2232      	movs	r2, #50	; 0x32
 800ac5e:	fb02 f303 	mul.w	r3, r2, r3
 800ac62:	4a1f      	ldr	r2, [pc, #124]	; (800ace0 <HAL_PWREx_ConfigSupply+0x98>)
 800ac64:	fba2 2303 	umull	r2, r3, r2, r3
 800ac68:	099b      	lsrs	r3, r3, #6
 800ac6a:	3301      	adds	r3, #1
 800ac6c:	60fb      	str	r3, [r7, #12]

  /* Configure the LDO as system regulator supply */
  if (SupplySource == PWR_LDO_SUPPLY)
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	2b00      	cmp	r3, #0
 800ac72:	d113      	bne.n	800ac9c <HAL_PWREx_ConfigSupply+0x54>
  {
    /* Set the power supply configuration */
    CLEAR_BIT(PWR->CR3, PWR_CR3_REGSEL);
 800ac74:	4b1b      	ldr	r3, [pc, #108]	; (800ace4 <HAL_PWREx_ConfigSupply+0x9c>)
 800ac76:	689b      	ldr	r3, [r3, #8]
 800ac78:	4a1a      	ldr	r2, [pc, #104]	; (800ace4 <HAL_PWREx_ConfigSupply+0x9c>)
 800ac7a:	f023 0302 	bic.w	r3, r3, #2
 800ac7e:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 800ac80:	e002      	b.n	800ac88 <HAL_PWREx_ConfigSupply+0x40>
    {
      timeout--;
 800ac82:	68fb      	ldr	r3, [r7, #12]
 800ac84:	3b01      	subs	r3, #1
 800ac86:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 800ac88:	4b16      	ldr	r3, [pc, #88]	; (800ace4 <HAL_PWREx_ConfigSupply+0x9c>)
 800ac8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ac8c:	f003 0302 	and.w	r3, r3, #2
 800ac90:	2b02      	cmp	r3, #2
 800ac92:	d116      	bne.n	800acc2 <HAL_PWREx_ConfigSupply+0x7a>
 800ac94:	68fb      	ldr	r3, [r7, #12]
 800ac96:	2b00      	cmp	r3, #0
 800ac98:	d1f3      	bne.n	800ac82 <HAL_PWREx_ConfigSupply+0x3a>
 800ac9a:	e012      	b.n	800acc2 <HAL_PWREx_ConfigSupply+0x7a>
  }
  /* Configure the SMPS as system regulator supply */
  else
  {
    /* Set the power supply configuration */
    SET_BIT(PWR->CR3, PWR_CR3_REGSEL);
 800ac9c:	4b11      	ldr	r3, [pc, #68]	; (800ace4 <HAL_PWREx_ConfigSupply+0x9c>)
 800ac9e:	689b      	ldr	r3, [r3, #8]
 800aca0:	4a10      	ldr	r2, [pc, #64]	; (800ace4 <HAL_PWREx_ConfigSupply+0x9c>)
 800aca2:	f043 0302 	orr.w	r3, r3, #2
 800aca6:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 800aca8:	e002      	b.n	800acb0 <HAL_PWREx_ConfigSupply+0x68>
    {
      timeout--;
 800acaa:	68fb      	ldr	r3, [r7, #12]
 800acac:	3b01      	subs	r3, #1
 800acae:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 800acb0:	4b0c      	ldr	r3, [pc, #48]	; (800ace4 <HAL_PWREx_ConfigSupply+0x9c>)
 800acb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800acb4:	f003 0302 	and.w	r3, r3, #2
 800acb8:	2b00      	cmp	r3, #0
 800acba:	d102      	bne.n	800acc2 <HAL_PWREx_ConfigSupply+0x7a>
 800acbc:	68fb      	ldr	r3, [r7, #12]
 800acbe:	2b00      	cmp	r3, #0
 800acc0:	d1f3      	bne.n	800acaa <HAL_PWREx_ConfigSupply+0x62>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 800acc2:	68fb      	ldr	r3, [r7, #12]
 800acc4:	2b00      	cmp	r3, #0
 800acc6:	d101      	bne.n	800accc <HAL_PWREx_ConfigSupply+0x84>
  {
    return HAL_TIMEOUT;
 800acc8:	2303      	movs	r3, #3
 800acca:	e000      	b.n	800acce <HAL_PWREx_ConfigSupply+0x86>
  }

  return HAL_OK;
 800accc:	2300      	movs	r3, #0
}
 800acce:	4618      	mov	r0, r3
 800acd0:	3714      	adds	r7, #20
 800acd2:	46bd      	mov	sp, r7
 800acd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acd8:	4770      	bx	lr
 800acda:	bf00      	nop
 800acdc:	20000004 	.word	0x20000004
 800ace0:	10624dd3 	.word	0x10624dd3
 800ace4:	46020800 	.word	0x46020800

0800ace8 <HAL_PWREx_EnableVddIO2>:
  * @note   Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddIO2(void)
{
 800ace8:	b480      	push	{r7}
 800acea:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_IO2SV);
 800acec:	4b05      	ldr	r3, [pc, #20]	; (800ad04 <HAL_PWREx_EnableVddIO2+0x1c>)
 800acee:	691b      	ldr	r3, [r3, #16]
 800acf0:	4a04      	ldr	r2, [pc, #16]	; (800ad04 <HAL_PWREx_EnableVddIO2+0x1c>)
 800acf2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800acf6:	6113      	str	r3, [r2, #16]
}
 800acf8:	bf00      	nop
 800acfa:	46bd      	mov	sp, r7
 800acfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad00:	4770      	bx	lr
 800ad02:	bf00      	nop
 800ad04:	46020800 	.word	0x46020800

0800ad08 <HAL_PWREx_EnableVddA>:
  * @note   Remove VDDA electrical and logical isolation, once VDDA supply is
  *         present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddA(void)
{
 800ad08:	b480      	push	{r7}
 800ad0a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_ASV);
 800ad0c:	4b05      	ldr	r3, [pc, #20]	; (800ad24 <HAL_PWREx_EnableVddA+0x1c>)
 800ad0e:	691b      	ldr	r3, [r3, #16]
 800ad10:	4a04      	ldr	r2, [pc, #16]	; (800ad24 <HAL_PWREx_EnableVddA+0x1c>)
 800ad12:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ad16:	6113      	str	r3, [r2, #16]
}
 800ad18:	bf00      	nop
 800ad1a:	46bd      	mov	sp, r7
 800ad1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad20:	4770      	bx	lr
 800ad22:	bf00      	nop
 800ad24:	46020800 	.word	0x46020800

0800ad28 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 800ad28:	b580      	push	{r7, lr}
 800ad2a:	b08e      	sub	sp, #56	; 0x38
 800ad2c:	af00      	add	r7, sp, #0
 800ad2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 800ad30:	2300      	movs	r3, #0
 800ad32:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	2b00      	cmp	r3, #0
 800ad3a:	d102      	bne.n	800ad42 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 800ad3c:	2301      	movs	r3, #1
 800ad3e:	f000 bec3 	b.w	800bac8 <HAL_RCC_OscConfig+0xda0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800ad42:	4b9c      	ldr	r3, [pc, #624]	; (800afb4 <HAL_RCC_OscConfig+0x28c>)
 800ad44:	69db      	ldr	r3, [r3, #28]
 800ad46:	f003 030c 	and.w	r3, r3, #12
 800ad4a:	633b      	str	r3, [r7, #48]	; 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800ad4c:	4b99      	ldr	r3, [pc, #612]	; (800afb4 <HAL_RCC_OscConfig+0x28c>)
 800ad4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ad50:	f003 0303 	and.w	r3, r3, #3
 800ad54:	62fb      	str	r3, [r7, #44]	; 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	681b      	ldr	r3, [r3, #0]
 800ad5a:	f003 0310 	and.w	r3, r3, #16
 800ad5e:	2b00      	cmp	r3, #0
 800ad60:	f000 8172 	beq.w	800b048 <HAL_RCC_OscConfig+0x320>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800ad64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad66:	2b00      	cmp	r3, #0
 800ad68:	d007      	beq.n	800ad7a <HAL_RCC_OscConfig+0x52>
 800ad6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad6c:	2b0c      	cmp	r3, #12
 800ad6e:	f040 80e4 	bne.w	800af3a <HAL_RCC_OscConfig+0x212>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 800ad72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad74:	2b01      	cmp	r3, #1
 800ad76:	f040 80e0 	bne.w	800af3a <HAL_RCC_OscConfig+0x212>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U) && (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800ad7a:	4b8e      	ldr	r3, [pc, #568]	; (800afb4 <HAL_RCC_OscConfig+0x28c>)
 800ad7c:	681b      	ldr	r3, [r3, #0]
 800ad7e:	f003 0304 	and.w	r3, r3, #4
 800ad82:	2b00      	cmp	r3, #0
 800ad84:	d006      	beq.n	800ad94 <HAL_RCC_OscConfig+0x6c>
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	69db      	ldr	r3, [r3, #28]
 800ad8a:	2b00      	cmp	r3, #0
 800ad8c:	d102      	bne.n	800ad94 <HAL_RCC_OscConfig+0x6c>
      {
        return HAL_ERROR;
 800ad8e:	2301      	movs	r3, #1
 800ad90:	f000 be9a 	b.w	800bac8 <HAL_RCC_OscConfig+0xda0>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ad98:	4b86      	ldr	r3, [pc, #536]	; (800afb4 <HAL_RCC_OscConfig+0x28c>)
 800ad9a:	689b      	ldr	r3, [r3, #8]
 800ad9c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ada0:	2b00      	cmp	r3, #0
 800ada2:	d004      	beq.n	800adae <HAL_RCC_OscConfig+0x86>
 800ada4:	4b83      	ldr	r3, [pc, #524]	; (800afb4 <HAL_RCC_OscConfig+0x28c>)
 800ada6:	689b      	ldr	r3, [r3, #8]
 800ada8:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800adac:	e005      	b.n	800adba <HAL_RCC_OscConfig+0x92>
 800adae:	4b81      	ldr	r3, [pc, #516]	; (800afb4 <HAL_RCC_OscConfig+0x28c>)
 800adb0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800adb4:	041b      	lsls	r3, r3, #16
 800adb6:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800adba:	4293      	cmp	r3, r2
 800adbc:	d255      	bcs.n	800ae6a <HAL_RCC_OscConfig+0x142>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800adbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adc0:	2b00      	cmp	r3, #0
 800adc2:	d10a      	bne.n	800adda <HAL_RCC_OscConfig+0xb2>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800adc8:	4618      	mov	r0, r3
 800adca:	f001 fa0b 	bl	800c1e4 <RCC_SetFlashLatencyFromMSIRange>
 800adce:	4603      	mov	r3, r0
 800add0:	2b00      	cmp	r3, #0
 800add2:	d002      	beq.n	800adda <HAL_RCC_OscConfig+0xb2>
            {
              return HAL_ERROR;
 800add4:	2301      	movs	r3, #1
 800add6:	f000 be77 	b.w	800bac8 <HAL_RCC_OscConfig+0xda0>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 800adda:	4b76      	ldr	r3, [pc, #472]	; (800afb4 <HAL_RCC_OscConfig+0x28c>)
 800addc:	689b      	ldr	r3, [r3, #8]
 800adde:	4a75      	ldr	r2, [pc, #468]	; (800afb4 <HAL_RCC_OscConfig+0x28c>)
 800ade0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800ade4:	6093      	str	r3, [r2, #8]
 800ade6:	4b73      	ldr	r3, [pc, #460]	; (800afb4 <HAL_RCC_OscConfig+0x28c>)
 800ade8:	689b      	ldr	r3, [r3, #8]
 800adea:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800adf2:	4970      	ldr	r1, [pc, #448]	; (800afb4 <HAL_RCC_OscConfig+0x28c>)
 800adf4:	4313      	orrs	r3, r2
 800adf6:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800adfc:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 800ae00:	d309      	bcc.n	800ae16 <HAL_RCC_OscConfig+0xee>
 800ae02:	4b6c      	ldr	r3, [pc, #432]	; (800afb4 <HAL_RCC_OscConfig+0x28c>)
 800ae04:	68db      	ldr	r3, [r3, #12]
 800ae06:	f023 021f 	bic.w	r2, r3, #31
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	6a1b      	ldr	r3, [r3, #32]
 800ae0e:	4969      	ldr	r1, [pc, #420]	; (800afb4 <HAL_RCC_OscConfig+0x28c>)
 800ae10:	4313      	orrs	r3, r2
 800ae12:	60cb      	str	r3, [r1, #12]
 800ae14:	e07e      	b.n	800af14 <HAL_RCC_OscConfig+0x1ec>
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae1a:	2b00      	cmp	r3, #0
 800ae1c:	da0a      	bge.n	800ae34 <HAL_RCC_OscConfig+0x10c>
 800ae1e:	4b65      	ldr	r3, [pc, #404]	; (800afb4 <HAL_RCC_OscConfig+0x28c>)
 800ae20:	68db      	ldr	r3, [r3, #12]
 800ae22:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	6a1b      	ldr	r3, [r3, #32]
 800ae2a:	015b      	lsls	r3, r3, #5
 800ae2c:	4961      	ldr	r1, [pc, #388]	; (800afb4 <HAL_RCC_OscConfig+0x28c>)
 800ae2e:	4313      	orrs	r3, r2
 800ae30:	60cb      	str	r3, [r1, #12]
 800ae32:	e06f      	b.n	800af14 <HAL_RCC_OscConfig+0x1ec>
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ae3c:	d30a      	bcc.n	800ae54 <HAL_RCC_OscConfig+0x12c>
 800ae3e:	4b5d      	ldr	r3, [pc, #372]	; (800afb4 <HAL_RCC_OscConfig+0x28c>)
 800ae40:	68db      	ldr	r3, [r3, #12]
 800ae42:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	6a1b      	ldr	r3, [r3, #32]
 800ae4a:	029b      	lsls	r3, r3, #10
 800ae4c:	4959      	ldr	r1, [pc, #356]	; (800afb4 <HAL_RCC_OscConfig+0x28c>)
 800ae4e:	4313      	orrs	r3, r2
 800ae50:	60cb      	str	r3, [r1, #12]
 800ae52:	e05f      	b.n	800af14 <HAL_RCC_OscConfig+0x1ec>
 800ae54:	4b57      	ldr	r3, [pc, #348]	; (800afb4 <HAL_RCC_OscConfig+0x28c>)
 800ae56:	68db      	ldr	r3, [r3, #12]
 800ae58:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	6a1b      	ldr	r3, [r3, #32]
 800ae60:	03db      	lsls	r3, r3, #15
 800ae62:	4954      	ldr	r1, [pc, #336]	; (800afb4 <HAL_RCC_OscConfig+0x28c>)
 800ae64:	4313      	orrs	r3, r2
 800ae66:	60cb      	str	r3, [r1, #12]
 800ae68:	e054      	b.n	800af14 <HAL_RCC_OscConfig+0x1ec>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 800ae6a:	4b52      	ldr	r3, [pc, #328]	; (800afb4 <HAL_RCC_OscConfig+0x28c>)
 800ae6c:	689b      	ldr	r3, [r3, #8]
 800ae6e:	4a51      	ldr	r2, [pc, #324]	; (800afb4 <HAL_RCC_OscConfig+0x28c>)
 800ae70:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800ae74:	6093      	str	r3, [r2, #8]
 800ae76:	4b4f      	ldr	r3, [pc, #316]	; (800afb4 <HAL_RCC_OscConfig+0x28c>)
 800ae78:	689b      	ldr	r3, [r3, #8]
 800ae7a:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae82:	494c      	ldr	r1, [pc, #304]	; (800afb4 <HAL_RCC_OscConfig+0x28c>)
 800ae84:	4313      	orrs	r3, r2
 800ae86:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae8c:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 800ae90:	d309      	bcc.n	800aea6 <HAL_RCC_OscConfig+0x17e>
 800ae92:	4b48      	ldr	r3, [pc, #288]	; (800afb4 <HAL_RCC_OscConfig+0x28c>)
 800ae94:	68db      	ldr	r3, [r3, #12]
 800ae96:	f023 021f 	bic.w	r2, r3, #31
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	6a1b      	ldr	r3, [r3, #32]
 800ae9e:	4945      	ldr	r1, [pc, #276]	; (800afb4 <HAL_RCC_OscConfig+0x28c>)
 800aea0:	4313      	orrs	r3, r2
 800aea2:	60cb      	str	r3, [r1, #12]
 800aea4:	e028      	b.n	800aef8 <HAL_RCC_OscConfig+0x1d0>
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aeaa:	2b00      	cmp	r3, #0
 800aeac:	da0a      	bge.n	800aec4 <HAL_RCC_OscConfig+0x19c>
 800aeae:	4b41      	ldr	r3, [pc, #260]	; (800afb4 <HAL_RCC_OscConfig+0x28c>)
 800aeb0:	68db      	ldr	r3, [r3, #12]
 800aeb2:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	6a1b      	ldr	r3, [r3, #32]
 800aeba:	015b      	lsls	r3, r3, #5
 800aebc:	493d      	ldr	r1, [pc, #244]	; (800afb4 <HAL_RCC_OscConfig+0x28c>)
 800aebe:	4313      	orrs	r3, r2
 800aec0:	60cb      	str	r3, [r1, #12]
 800aec2:	e019      	b.n	800aef8 <HAL_RCC_OscConfig+0x1d0>
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aec8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aecc:	d30a      	bcc.n	800aee4 <HAL_RCC_OscConfig+0x1bc>
 800aece:	4b39      	ldr	r3, [pc, #228]	; (800afb4 <HAL_RCC_OscConfig+0x28c>)
 800aed0:	68db      	ldr	r3, [r3, #12]
 800aed2:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	6a1b      	ldr	r3, [r3, #32]
 800aeda:	029b      	lsls	r3, r3, #10
 800aedc:	4935      	ldr	r1, [pc, #212]	; (800afb4 <HAL_RCC_OscConfig+0x28c>)
 800aede:	4313      	orrs	r3, r2
 800aee0:	60cb      	str	r3, [r1, #12]
 800aee2:	e009      	b.n	800aef8 <HAL_RCC_OscConfig+0x1d0>
 800aee4:	4b33      	ldr	r3, [pc, #204]	; (800afb4 <HAL_RCC_OscConfig+0x28c>)
 800aee6:	68db      	ldr	r3, [r3, #12]
 800aee8:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	6a1b      	ldr	r3, [r3, #32]
 800aef0:	03db      	lsls	r3, r3, #15
 800aef2:	4930      	ldr	r1, [pc, #192]	; (800afb4 <HAL_RCC_OscConfig+0x28c>)
 800aef4:	4313      	orrs	r3, r2
 800aef6:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800aef8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aefa:	2b00      	cmp	r3, #0
 800aefc:	d10a      	bne.n	800af14 <HAL_RCC_OscConfig+0x1ec>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af02:	4618      	mov	r0, r3
 800af04:	f001 f96e 	bl	800c1e4 <RCC_SetFlashLatencyFromMSIRange>
 800af08:	4603      	mov	r3, r0
 800af0a:	2b00      	cmp	r3, #0
 800af0c:	d002      	beq.n	800af14 <HAL_RCC_OscConfig+0x1ec>
            {
              return HAL_ERROR;
 800af0e:	2301      	movs	r3, #1
 800af10:	f000 bdda 	b.w	800bac8 <HAL_RCC_OscConfig+0xda0>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 800af14:	f001 f8d8 	bl	800c0c8 <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800af18:	4b27      	ldr	r3, [pc, #156]	; (800afb8 <HAL_RCC_OscConfig+0x290>)
 800af1a:	681b      	ldr	r3, [r3, #0]
 800af1c:	4618      	mov	r0, r3
 800af1e:	f7fa ffe9 	bl	8005ef4 <HAL_InitTick>
 800af22:	4603      	mov	r3, r0
 800af24:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (status != HAL_OK)
 800af28:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800af2c:	2b00      	cmp	r3, #0
 800af2e:	f000 808a 	beq.w	800b046 <HAL_RCC_OscConfig+0x31e>
        {
          return status;
 800af32:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800af36:	f000 bdc7 	b.w	800bac8 <HAL_RCC_OscConfig+0xda0>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	69db      	ldr	r3, [r3, #28]
 800af3e:	2b00      	cmp	r3, #0
 800af40:	d066      	beq.n	800b010 <HAL_RCC_OscConfig+0x2e8>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 800af42:	4b1c      	ldr	r3, [pc, #112]	; (800afb4 <HAL_RCC_OscConfig+0x28c>)
 800af44:	681b      	ldr	r3, [r3, #0]
 800af46:	4a1b      	ldr	r2, [pc, #108]	; (800afb4 <HAL_RCC_OscConfig+0x28c>)
 800af48:	f043 0301 	orr.w	r3, r3, #1
 800af4c:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800af4e:	f7fb fadb 	bl	8006508 <HAL_GetTick>
 800af52:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 800af54:	e009      	b.n	800af6a <HAL_RCC_OscConfig+0x242>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800af56:	f7fb fad7 	bl	8006508 <HAL_GetTick>
 800af5a:	4602      	mov	r2, r0
 800af5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af5e:	1ad3      	subs	r3, r2, r3
 800af60:	2b02      	cmp	r3, #2
 800af62:	d902      	bls.n	800af6a <HAL_RCC_OscConfig+0x242>
          {
            return HAL_TIMEOUT;
 800af64:	2303      	movs	r3, #3
 800af66:	f000 bdaf 	b.w	800bac8 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 800af6a:	4b12      	ldr	r3, [pc, #72]	; (800afb4 <HAL_RCC_OscConfig+0x28c>)
 800af6c:	681b      	ldr	r3, [r3, #0]
 800af6e:	f003 0304 	and.w	r3, r3, #4
 800af72:	2b00      	cmp	r3, #0
 800af74:	d0ef      	beq.n	800af56 <HAL_RCC_OscConfig+0x22e>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 800af76:	4b0f      	ldr	r3, [pc, #60]	; (800afb4 <HAL_RCC_OscConfig+0x28c>)
 800af78:	689b      	ldr	r3, [r3, #8]
 800af7a:	4a0e      	ldr	r2, [pc, #56]	; (800afb4 <HAL_RCC_OscConfig+0x28c>)
 800af7c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800af80:	6093      	str	r3, [r2, #8]
 800af82:	4b0c      	ldr	r3, [pc, #48]	; (800afb4 <HAL_RCC_OscConfig+0x28c>)
 800af84:	689b      	ldr	r3, [r3, #8]
 800af86:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af8e:	4909      	ldr	r1, [pc, #36]	; (800afb4 <HAL_RCC_OscConfig+0x28c>)
 800af90:	4313      	orrs	r3, r2
 800af92:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af98:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 800af9c:	d30e      	bcc.n	800afbc <HAL_RCC_OscConfig+0x294>
 800af9e:	4b05      	ldr	r3, [pc, #20]	; (800afb4 <HAL_RCC_OscConfig+0x28c>)
 800afa0:	68db      	ldr	r3, [r3, #12]
 800afa2:	f023 021f 	bic.w	r2, r3, #31
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	6a1b      	ldr	r3, [r3, #32]
 800afaa:	4902      	ldr	r1, [pc, #8]	; (800afb4 <HAL_RCC_OscConfig+0x28c>)
 800afac:	4313      	orrs	r3, r2
 800afae:	60cb      	str	r3, [r1, #12]
 800afb0:	e04a      	b.n	800b048 <HAL_RCC_OscConfig+0x320>
 800afb2:	bf00      	nop
 800afb4:	46020c00 	.word	0x46020c00
 800afb8:	20000008 	.word	0x20000008
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afc0:	2b00      	cmp	r3, #0
 800afc2:	da0a      	bge.n	800afda <HAL_RCC_OscConfig+0x2b2>
 800afc4:	4b9b      	ldr	r3, [pc, #620]	; (800b234 <HAL_RCC_OscConfig+0x50c>)
 800afc6:	68db      	ldr	r3, [r3, #12]
 800afc8:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	6a1b      	ldr	r3, [r3, #32]
 800afd0:	015b      	lsls	r3, r3, #5
 800afd2:	4998      	ldr	r1, [pc, #608]	; (800b234 <HAL_RCC_OscConfig+0x50c>)
 800afd4:	4313      	orrs	r3, r2
 800afd6:	60cb      	str	r3, [r1, #12]
 800afd8:	e036      	b.n	800b048 <HAL_RCC_OscConfig+0x320>
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afde:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800afe2:	d30a      	bcc.n	800affa <HAL_RCC_OscConfig+0x2d2>
 800afe4:	4b93      	ldr	r3, [pc, #588]	; (800b234 <HAL_RCC_OscConfig+0x50c>)
 800afe6:	68db      	ldr	r3, [r3, #12]
 800afe8:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	6a1b      	ldr	r3, [r3, #32]
 800aff0:	029b      	lsls	r3, r3, #10
 800aff2:	4990      	ldr	r1, [pc, #576]	; (800b234 <HAL_RCC_OscConfig+0x50c>)
 800aff4:	4313      	orrs	r3, r2
 800aff6:	60cb      	str	r3, [r1, #12]
 800aff8:	e026      	b.n	800b048 <HAL_RCC_OscConfig+0x320>
 800affa:	4b8e      	ldr	r3, [pc, #568]	; (800b234 <HAL_RCC_OscConfig+0x50c>)
 800affc:	68db      	ldr	r3, [r3, #12]
 800affe:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	6a1b      	ldr	r3, [r3, #32]
 800b006:	03db      	lsls	r3, r3, #15
 800b008:	498a      	ldr	r1, [pc, #552]	; (800b234 <HAL_RCC_OscConfig+0x50c>)
 800b00a:	4313      	orrs	r3, r2
 800b00c:	60cb      	str	r3, [r1, #12]
 800b00e:	e01b      	b.n	800b048 <HAL_RCC_OscConfig+0x320>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 800b010:	4b88      	ldr	r3, [pc, #544]	; (800b234 <HAL_RCC_OscConfig+0x50c>)
 800b012:	681b      	ldr	r3, [r3, #0]
 800b014:	4a87      	ldr	r2, [pc, #540]	; (800b234 <HAL_RCC_OscConfig+0x50c>)
 800b016:	f023 0301 	bic.w	r3, r3, #1
 800b01a:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800b01c:	f7fb fa74 	bl	8006508 <HAL_GetTick>
 800b020:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 800b022:	e009      	b.n	800b038 <HAL_RCC_OscConfig+0x310>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800b024:	f7fb fa70 	bl	8006508 <HAL_GetTick>
 800b028:	4602      	mov	r2, r0
 800b02a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b02c:	1ad3      	subs	r3, r2, r3
 800b02e:	2b02      	cmp	r3, #2
 800b030:	d902      	bls.n	800b038 <HAL_RCC_OscConfig+0x310>
          {
            return HAL_TIMEOUT;
 800b032:	2303      	movs	r3, #3
 800b034:	f000 bd48 	b.w	800bac8 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 800b038:	4b7e      	ldr	r3, [pc, #504]	; (800b234 <HAL_RCC_OscConfig+0x50c>)
 800b03a:	681b      	ldr	r3, [r3, #0]
 800b03c:	f003 0304 	and.w	r3, r3, #4
 800b040:	2b00      	cmp	r3, #0
 800b042:	d1ef      	bne.n	800b024 <HAL_RCC_OscConfig+0x2fc>
 800b044:	e000      	b.n	800b048 <HAL_RCC_OscConfig+0x320>
      if ((READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U) && (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800b046:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	681b      	ldr	r3, [r3, #0]
 800b04c:	f003 0301 	and.w	r3, r3, #1
 800b050:	2b00      	cmp	r3, #0
 800b052:	f000 8094 	beq.w	800b17e <HAL_RCC_OscConfig+0x456>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800b056:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b058:	2b08      	cmp	r3, #8
 800b05a:	d005      	beq.n	800b068 <HAL_RCC_OscConfig+0x340>
 800b05c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b05e:	2b0c      	cmp	r3, #12
 800b060:	d110      	bne.n	800b084 <HAL_RCC_OscConfig+0x35c>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800b062:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b064:	2b03      	cmp	r3, #3
 800b066:	d10d      	bne.n	800b084 <HAL_RCC_OscConfig+0x35c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b068:	4b72      	ldr	r3, [pc, #456]	; (800b234 <HAL_RCC_OscConfig+0x50c>)
 800b06a:	681b      	ldr	r3, [r3, #0]
 800b06c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b070:	2b00      	cmp	r3, #0
 800b072:	f000 8083 	beq.w	800b17c <HAL_RCC_OscConfig+0x454>
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	685b      	ldr	r3, [r3, #4]
 800b07a:	2b00      	cmp	r3, #0
 800b07c:	d17e      	bne.n	800b17c <HAL_RCC_OscConfig+0x454>
      {
        return HAL_ERROR;
 800b07e:	2301      	movs	r3, #1
 800b080:	f000 bd22 	b.w	800bac8 <HAL_RCC_OscConfig+0xda0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	685b      	ldr	r3, [r3, #4]
 800b088:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b08c:	d106      	bne.n	800b09c <HAL_RCC_OscConfig+0x374>
 800b08e:	4b69      	ldr	r3, [pc, #420]	; (800b234 <HAL_RCC_OscConfig+0x50c>)
 800b090:	681b      	ldr	r3, [r3, #0]
 800b092:	4a68      	ldr	r2, [pc, #416]	; (800b234 <HAL_RCC_OscConfig+0x50c>)
 800b094:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b098:	6013      	str	r3, [r2, #0]
 800b09a:	e041      	b.n	800b120 <HAL_RCC_OscConfig+0x3f8>
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	685b      	ldr	r3, [r3, #4]
 800b0a0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b0a4:	d112      	bne.n	800b0cc <HAL_RCC_OscConfig+0x3a4>
 800b0a6:	4b63      	ldr	r3, [pc, #396]	; (800b234 <HAL_RCC_OscConfig+0x50c>)
 800b0a8:	681b      	ldr	r3, [r3, #0]
 800b0aa:	4a62      	ldr	r2, [pc, #392]	; (800b234 <HAL_RCC_OscConfig+0x50c>)
 800b0ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800b0b0:	6013      	str	r3, [r2, #0]
 800b0b2:	4b60      	ldr	r3, [pc, #384]	; (800b234 <HAL_RCC_OscConfig+0x50c>)
 800b0b4:	681b      	ldr	r3, [r3, #0]
 800b0b6:	4a5f      	ldr	r2, [pc, #380]	; (800b234 <HAL_RCC_OscConfig+0x50c>)
 800b0b8:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800b0bc:	6013      	str	r3, [r2, #0]
 800b0be:	4b5d      	ldr	r3, [pc, #372]	; (800b234 <HAL_RCC_OscConfig+0x50c>)
 800b0c0:	681b      	ldr	r3, [r3, #0]
 800b0c2:	4a5c      	ldr	r2, [pc, #368]	; (800b234 <HAL_RCC_OscConfig+0x50c>)
 800b0c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b0c8:	6013      	str	r3, [r2, #0]
 800b0ca:	e029      	b.n	800b120 <HAL_RCC_OscConfig+0x3f8>
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	685b      	ldr	r3, [r3, #4]
 800b0d0:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 800b0d4:	d112      	bne.n	800b0fc <HAL_RCC_OscConfig+0x3d4>
 800b0d6:	4b57      	ldr	r3, [pc, #348]	; (800b234 <HAL_RCC_OscConfig+0x50c>)
 800b0d8:	681b      	ldr	r3, [r3, #0]
 800b0da:	4a56      	ldr	r2, [pc, #344]	; (800b234 <HAL_RCC_OscConfig+0x50c>)
 800b0dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800b0e0:	6013      	str	r3, [r2, #0]
 800b0e2:	4b54      	ldr	r3, [pc, #336]	; (800b234 <HAL_RCC_OscConfig+0x50c>)
 800b0e4:	681b      	ldr	r3, [r3, #0]
 800b0e6:	4a53      	ldr	r2, [pc, #332]	; (800b234 <HAL_RCC_OscConfig+0x50c>)
 800b0e8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b0ec:	6013      	str	r3, [r2, #0]
 800b0ee:	4b51      	ldr	r3, [pc, #324]	; (800b234 <HAL_RCC_OscConfig+0x50c>)
 800b0f0:	681b      	ldr	r3, [r3, #0]
 800b0f2:	4a50      	ldr	r2, [pc, #320]	; (800b234 <HAL_RCC_OscConfig+0x50c>)
 800b0f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b0f8:	6013      	str	r3, [r2, #0]
 800b0fa:	e011      	b.n	800b120 <HAL_RCC_OscConfig+0x3f8>
 800b0fc:	4b4d      	ldr	r3, [pc, #308]	; (800b234 <HAL_RCC_OscConfig+0x50c>)
 800b0fe:	681b      	ldr	r3, [r3, #0]
 800b100:	4a4c      	ldr	r2, [pc, #304]	; (800b234 <HAL_RCC_OscConfig+0x50c>)
 800b102:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b106:	6013      	str	r3, [r2, #0]
 800b108:	4b4a      	ldr	r3, [pc, #296]	; (800b234 <HAL_RCC_OscConfig+0x50c>)
 800b10a:	681b      	ldr	r3, [r3, #0]
 800b10c:	4a49      	ldr	r2, [pc, #292]	; (800b234 <HAL_RCC_OscConfig+0x50c>)
 800b10e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b112:	6013      	str	r3, [r2, #0]
 800b114:	4b47      	ldr	r3, [pc, #284]	; (800b234 <HAL_RCC_OscConfig+0x50c>)
 800b116:	681b      	ldr	r3, [r3, #0]
 800b118:	4a46      	ldr	r2, [pc, #280]	; (800b234 <HAL_RCC_OscConfig+0x50c>)
 800b11a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800b11e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	685b      	ldr	r3, [r3, #4]
 800b124:	2b00      	cmp	r3, #0
 800b126:	d014      	beq.n	800b152 <HAL_RCC_OscConfig+0x42a>
      {
        tickstart = HAL_GetTick();
 800b128:	f7fb f9ee 	bl	8006508 <HAL_GetTick>
 800b12c:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800b12e:	e009      	b.n	800b144 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b130:	f7fb f9ea 	bl	8006508 <HAL_GetTick>
 800b134:	4602      	mov	r2, r0
 800b136:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b138:	1ad3      	subs	r3, r2, r3
 800b13a:	2b64      	cmp	r3, #100	; 0x64
 800b13c:	d902      	bls.n	800b144 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800b13e:	2303      	movs	r3, #3
 800b140:	f000 bcc2 	b.w	800bac8 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800b144:	4b3b      	ldr	r3, [pc, #236]	; (800b234 <HAL_RCC_OscConfig+0x50c>)
 800b146:	681b      	ldr	r3, [r3, #0]
 800b148:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b14c:	2b00      	cmp	r3, #0
 800b14e:	d0ef      	beq.n	800b130 <HAL_RCC_OscConfig+0x408>
 800b150:	e015      	b.n	800b17e <HAL_RCC_OscConfig+0x456>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 800b152:	f7fb f9d9 	bl	8006508 <HAL_GetTick>
 800b156:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800b158:	e009      	b.n	800b16e <HAL_RCC_OscConfig+0x446>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b15a:	f7fb f9d5 	bl	8006508 <HAL_GetTick>
 800b15e:	4602      	mov	r2, r0
 800b160:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b162:	1ad3      	subs	r3, r2, r3
 800b164:	2b64      	cmp	r3, #100	; 0x64
 800b166:	d902      	bls.n	800b16e <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 800b168:	2303      	movs	r3, #3
 800b16a:	f000 bcad 	b.w	800bac8 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800b16e:	4b31      	ldr	r3, [pc, #196]	; (800b234 <HAL_RCC_OscConfig+0x50c>)
 800b170:	681b      	ldr	r3, [r3, #0]
 800b172:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b176:	2b00      	cmp	r3, #0
 800b178:	d1ef      	bne.n	800b15a <HAL_RCC_OscConfig+0x432>
 800b17a:	e000      	b.n	800b17e <HAL_RCC_OscConfig+0x456>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b17c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	681b      	ldr	r3, [r3, #0]
 800b182:	f003 0302 	and.w	r3, r3, #2
 800b186:	2b00      	cmp	r3, #0
 800b188:	d066      	beq.n	800b258 <HAL_RCC_OscConfig+0x530>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800b18a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b18c:	2b04      	cmp	r3, #4
 800b18e:	d005      	beq.n	800b19c <HAL_RCC_OscConfig+0x474>
 800b190:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b192:	2b0c      	cmp	r3, #12
 800b194:	d11a      	bne.n	800b1cc <HAL_RCC_OscConfig+0x4a4>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800b196:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b198:	2b02      	cmp	r3, #2
 800b19a:	d117      	bne.n	800b1cc <HAL_RCC_OscConfig+0x4a4>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800b19c:	4b25      	ldr	r3, [pc, #148]	; (800b234 <HAL_RCC_OscConfig+0x50c>)
 800b19e:	681b      	ldr	r3, [r3, #0]
 800b1a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b1a4:	2b00      	cmp	r3, #0
 800b1a6:	d006      	beq.n	800b1b6 <HAL_RCC_OscConfig+0x48e>
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	68db      	ldr	r3, [r3, #12]
 800b1ac:	2b00      	cmp	r3, #0
 800b1ae:	d102      	bne.n	800b1b6 <HAL_RCC_OscConfig+0x48e>
      {
        return HAL_ERROR;
 800b1b0:	2301      	movs	r3, #1
 800b1b2:	f000 bc89 	b.w	800bac8 <HAL_RCC_OscConfig+0xda0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 800b1b6:	4b1f      	ldr	r3, [pc, #124]	; (800b234 <HAL_RCC_OscConfig+0x50c>)
 800b1b8:	691b      	ldr	r3, [r3, #16]
 800b1ba:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	691b      	ldr	r3, [r3, #16]
 800b1c2:	041b      	lsls	r3, r3, #16
 800b1c4:	491b      	ldr	r1, [pc, #108]	; (800b234 <HAL_RCC_OscConfig+0x50c>)
 800b1c6:	4313      	orrs	r3, r2
 800b1c8:	610b      	str	r3, [r1, #16]
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800b1ca:	e045      	b.n	800b258 <HAL_RCC_OscConfig+0x530>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	68db      	ldr	r3, [r3, #12]
 800b1d0:	2b00      	cmp	r3, #0
 800b1d2:	d024      	beq.n	800b21e <HAL_RCC_OscConfig+0x4f6>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 800b1d4:	4b17      	ldr	r3, [pc, #92]	; (800b234 <HAL_RCC_OscConfig+0x50c>)
 800b1d6:	681b      	ldr	r3, [r3, #0]
 800b1d8:	4a16      	ldr	r2, [pc, #88]	; (800b234 <HAL_RCC_OscConfig+0x50c>)
 800b1da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b1de:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800b1e0:	f7fb f992 	bl	8006508 <HAL_GetTick>
 800b1e4:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800b1e6:	e009      	b.n	800b1fc <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b1e8:	f7fb f98e 	bl	8006508 <HAL_GetTick>
 800b1ec:	4602      	mov	r2, r0
 800b1ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1f0:	1ad3      	subs	r3, r2, r3
 800b1f2:	2b02      	cmp	r3, #2
 800b1f4:	d902      	bls.n	800b1fc <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 800b1f6:	2303      	movs	r3, #3
 800b1f8:	f000 bc66 	b.w	800bac8 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800b1fc:	4b0d      	ldr	r3, [pc, #52]	; (800b234 <HAL_RCC_OscConfig+0x50c>)
 800b1fe:	681b      	ldr	r3, [r3, #0]
 800b200:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b204:	2b00      	cmp	r3, #0
 800b206:	d0ef      	beq.n	800b1e8 <HAL_RCC_OscConfig+0x4c0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 800b208:	4b0a      	ldr	r3, [pc, #40]	; (800b234 <HAL_RCC_OscConfig+0x50c>)
 800b20a:	691b      	ldr	r3, [r3, #16]
 800b20c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	691b      	ldr	r3, [r3, #16]
 800b214:	041b      	lsls	r3, r3, #16
 800b216:	4907      	ldr	r1, [pc, #28]	; (800b234 <HAL_RCC_OscConfig+0x50c>)
 800b218:	4313      	orrs	r3, r2
 800b21a:	610b      	str	r3, [r1, #16]
 800b21c:	e01c      	b.n	800b258 <HAL_RCC_OscConfig+0x530>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 800b21e:	4b05      	ldr	r3, [pc, #20]	; (800b234 <HAL_RCC_OscConfig+0x50c>)
 800b220:	681b      	ldr	r3, [r3, #0]
 800b222:	4a04      	ldr	r2, [pc, #16]	; (800b234 <HAL_RCC_OscConfig+0x50c>)
 800b224:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b228:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800b22a:	f7fb f96d 	bl	8006508 <HAL_GetTick>
 800b22e:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800b230:	e00c      	b.n	800b24c <HAL_RCC_OscConfig+0x524>
 800b232:	bf00      	nop
 800b234:	46020c00 	.word	0x46020c00
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b238:	f7fb f966 	bl	8006508 <HAL_GetTick>
 800b23c:	4602      	mov	r2, r0
 800b23e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b240:	1ad3      	subs	r3, r2, r3
 800b242:	2b02      	cmp	r3, #2
 800b244:	d902      	bls.n	800b24c <HAL_RCC_OscConfig+0x524>
          {
            return HAL_TIMEOUT;
 800b246:	2303      	movs	r3, #3
 800b248:	f000 bc3e 	b.w	800bac8 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800b24c:	4baf      	ldr	r3, [pc, #700]	; (800b50c <HAL_RCC_OscConfig+0x7e4>)
 800b24e:	681b      	ldr	r3, [r3, #0]
 800b250:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b254:	2b00      	cmp	r3, #0
 800b256:	d1ef      	bne.n	800b238 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	681b      	ldr	r3, [r3, #0]
 800b25c:	f003 0308 	and.w	r3, r3, #8
 800b260:	2b00      	cmp	r3, #0
 800b262:	f000 80c7 	beq.w	800b3f4 <HAL_RCC_OscConfig+0x6cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 800b266:	2300      	movs	r3, #0
 800b268:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800b26c:	4ba7      	ldr	r3, [pc, #668]	; (800b50c <HAL_RCC_OscConfig+0x7e4>)
 800b26e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b272:	f003 0304 	and.w	r3, r3, #4
 800b276:	2b00      	cmp	r3, #0
 800b278:	d111      	bne.n	800b29e <HAL_RCC_OscConfig+0x576>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800b27a:	4ba4      	ldr	r3, [pc, #656]	; (800b50c <HAL_RCC_OscConfig+0x7e4>)
 800b27c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b280:	4aa2      	ldr	r2, [pc, #648]	; (800b50c <HAL_RCC_OscConfig+0x7e4>)
 800b282:	f043 0304 	orr.w	r3, r3, #4
 800b286:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800b28a:	4ba0      	ldr	r3, [pc, #640]	; (800b50c <HAL_RCC_OscConfig+0x7e4>)
 800b28c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b290:	f003 0304 	and.w	r3, r3, #4
 800b294:	617b      	str	r3, [r7, #20]
 800b296:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 800b298:	2301      	movs	r3, #1
 800b29a:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800b29e:	4b9c      	ldr	r3, [pc, #624]	; (800b510 <HAL_RCC_OscConfig+0x7e8>)
 800b2a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b2a2:	f003 0301 	and.w	r3, r3, #1
 800b2a6:	2b00      	cmp	r3, #0
 800b2a8:	d118      	bne.n	800b2dc <HAL_RCC_OscConfig+0x5b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 800b2aa:	4b99      	ldr	r3, [pc, #612]	; (800b510 <HAL_RCC_OscConfig+0x7e8>)
 800b2ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b2ae:	4a98      	ldr	r2, [pc, #608]	; (800b510 <HAL_RCC_OscConfig+0x7e8>)
 800b2b0:	f043 0301 	orr.w	r3, r3, #1
 800b2b4:	6293      	str	r3, [r2, #40]	; 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800b2b6:	f7fb f927 	bl	8006508 <HAL_GetTick>
 800b2ba:	62b8      	str	r0, [r7, #40]	; 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800b2bc:	e008      	b.n	800b2d0 <HAL_RCC_OscConfig+0x5a8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b2be:	f7fb f923 	bl	8006508 <HAL_GetTick>
 800b2c2:	4602      	mov	r2, r0
 800b2c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2c6:	1ad3      	subs	r3, r2, r3
 800b2c8:	2b02      	cmp	r3, #2
 800b2ca:	d901      	bls.n	800b2d0 <HAL_RCC_OscConfig+0x5a8>
        {
          return HAL_TIMEOUT;
 800b2cc:	2303      	movs	r3, #3
 800b2ce:	e3fb      	b.n	800bac8 <HAL_RCC_OscConfig+0xda0>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800b2d0:	4b8f      	ldr	r3, [pc, #572]	; (800b510 <HAL_RCC_OscConfig+0x7e8>)
 800b2d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b2d4:	f003 0301 	and.w	r3, r3, #1
 800b2d8:	2b00      	cmp	r3, #0
 800b2da:	d0f0      	beq.n	800b2be <HAL_RCC_OscConfig+0x596>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	695b      	ldr	r3, [r3, #20]
 800b2e0:	2b00      	cmp	r3, #0
 800b2e2:	d05f      	beq.n	800b3a4 <HAL_RCC_OscConfig+0x67c>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 800b2e4:	4b89      	ldr	r3, [pc, #548]	; (800b50c <HAL_RCC_OscConfig+0x7e4>)
 800b2e6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800b2ea:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	699a      	ldr	r2, [r3, #24]
 800b2f0:	6a3b      	ldr	r3, [r7, #32]
 800b2f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b2f6:	429a      	cmp	r2, r3
 800b2f8:	d037      	beq.n	800b36a <HAL_RCC_OscConfig+0x642>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 800b2fa:	6a3b      	ldr	r3, [r7, #32]
 800b2fc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b300:	2b00      	cmp	r3, #0
 800b302:	d006      	beq.n	800b312 <HAL_RCC_OscConfig+0x5ea>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 800b304:	6a3b      	ldr	r3, [r7, #32]
 800b306:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 800b30a:	2b00      	cmp	r3, #0
 800b30c:	d101      	bne.n	800b312 <HAL_RCC_OscConfig+0x5ea>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 800b30e:	2301      	movs	r3, #1
 800b310:	e3da      	b.n	800bac8 <HAL_RCC_OscConfig+0xda0>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 800b312:	6a3b      	ldr	r3, [r7, #32]
 800b314:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800b318:	2b00      	cmp	r3, #0
 800b31a:	d01b      	beq.n	800b354 <HAL_RCC_OscConfig+0x62c>
        {
          __HAL_RCC_LSI_DISABLE();
 800b31c:	4b7b      	ldr	r3, [pc, #492]	; (800b50c <HAL_RCC_OscConfig+0x7e4>)
 800b31e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800b322:	4a7a      	ldr	r2, [pc, #488]	; (800b50c <HAL_RCC_OscConfig+0x7e4>)
 800b324:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 800b328:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

          tickstart = HAL_GetTick();
 800b32c:	f7fb f8ec 	bl	8006508 <HAL_GetTick>
 800b330:	62b8      	str	r0, [r7, #40]	; 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800b332:	e008      	b.n	800b346 <HAL_RCC_OscConfig+0x61e>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b334:	f7fb f8e8 	bl	8006508 <HAL_GetTick>
 800b338:	4602      	mov	r2, r0
 800b33a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b33c:	1ad3      	subs	r3, r2, r3
 800b33e:	2b02      	cmp	r3, #2
 800b340:	d901      	bls.n	800b346 <HAL_RCC_OscConfig+0x61e>
            {
              return HAL_TIMEOUT;
 800b342:	2303      	movs	r3, #3
 800b344:	e3c0      	b.n	800bac8 <HAL_RCC_OscConfig+0xda0>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800b346:	4b71      	ldr	r3, [pc, #452]	; (800b50c <HAL_RCC_OscConfig+0x7e4>)
 800b348:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800b34c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b350:	2b00      	cmp	r3, #0
 800b352:	d1ef      	bne.n	800b334 <HAL_RCC_OscConfig+0x60c>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 800b354:	4b6d      	ldr	r3, [pc, #436]	; (800b50c <HAL_RCC_OscConfig+0x7e4>)
 800b356:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800b35a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	699b      	ldr	r3, [r3, #24]
 800b362:	496a      	ldr	r1, [pc, #424]	; (800b50c <HAL_RCC_OscConfig+0x7e4>)
 800b364:	4313      	orrs	r3, r2
 800b366:	f8c1 30f0 	str.w	r3, [r1, #240]	; 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 800b36a:	4b68      	ldr	r3, [pc, #416]	; (800b50c <HAL_RCC_OscConfig+0x7e4>)
 800b36c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800b370:	4a66      	ldr	r2, [pc, #408]	; (800b50c <HAL_RCC_OscConfig+0x7e4>)
 800b372:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800b376:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      tickstart = HAL_GetTick();
 800b37a:	f7fb f8c5 	bl	8006508 <HAL_GetTick>
 800b37e:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 800b380:	e008      	b.n	800b394 <HAL_RCC_OscConfig+0x66c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b382:	f7fb f8c1 	bl	8006508 <HAL_GetTick>
 800b386:	4602      	mov	r2, r0
 800b388:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b38a:	1ad3      	subs	r3, r2, r3
 800b38c:	2b02      	cmp	r3, #2
 800b38e:	d901      	bls.n	800b394 <HAL_RCC_OscConfig+0x66c>
        {
          return HAL_TIMEOUT;
 800b390:	2303      	movs	r3, #3
 800b392:	e399      	b.n	800bac8 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 800b394:	4b5d      	ldr	r3, [pc, #372]	; (800b50c <HAL_RCC_OscConfig+0x7e4>)
 800b396:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800b39a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b39e:	2b00      	cmp	r3, #0
 800b3a0:	d0ef      	beq.n	800b382 <HAL_RCC_OscConfig+0x65a>
 800b3a2:	e01b      	b.n	800b3dc <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 800b3a4:	4b59      	ldr	r3, [pc, #356]	; (800b50c <HAL_RCC_OscConfig+0x7e4>)
 800b3a6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800b3aa:	4a58      	ldr	r2, [pc, #352]	; (800b50c <HAL_RCC_OscConfig+0x7e4>)
 800b3ac:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 800b3b0:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      tickstart = HAL_GetTick();
 800b3b4:	f7fb f8a8 	bl	8006508 <HAL_GetTick>
 800b3b8:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800b3ba:	e008      	b.n	800b3ce <HAL_RCC_OscConfig+0x6a6>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b3bc:	f7fb f8a4 	bl	8006508 <HAL_GetTick>
 800b3c0:	4602      	mov	r2, r0
 800b3c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3c4:	1ad3      	subs	r3, r2, r3
 800b3c6:	2b02      	cmp	r3, #2
 800b3c8:	d901      	bls.n	800b3ce <HAL_RCC_OscConfig+0x6a6>
        {
          return HAL_TIMEOUT;
 800b3ca:	2303      	movs	r3, #3
 800b3cc:	e37c      	b.n	800bac8 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800b3ce:	4b4f      	ldr	r3, [pc, #316]	; (800b50c <HAL_RCC_OscConfig+0x7e4>)
 800b3d0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800b3d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b3d8:	2b00      	cmp	r3, #0
 800b3da:	d1ef      	bne.n	800b3bc <HAL_RCC_OscConfig+0x694>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800b3dc:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800b3e0:	2b01      	cmp	r3, #1
 800b3e2:	d107      	bne.n	800b3f4 <HAL_RCC_OscConfig+0x6cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800b3e4:	4b49      	ldr	r3, [pc, #292]	; (800b50c <HAL_RCC_OscConfig+0x7e4>)
 800b3e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b3ea:	4a48      	ldr	r2, [pc, #288]	; (800b50c <HAL_RCC_OscConfig+0x7e4>)
 800b3ec:	f023 0304 	bic.w	r3, r3, #4
 800b3f0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	681b      	ldr	r3, [r3, #0]
 800b3f8:	f003 0304 	and.w	r3, r3, #4
 800b3fc:	2b00      	cmp	r3, #0
 800b3fe:	f000 8112 	beq.w	800b626 <HAL_RCC_OscConfig+0x8fe>
  {
    FlagStatus pwrclkchanged = RESET;
 800b402:	2300      	movs	r3, #0
 800b404:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800b408:	4b40      	ldr	r3, [pc, #256]	; (800b50c <HAL_RCC_OscConfig+0x7e4>)
 800b40a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b40e:	f003 0304 	and.w	r3, r3, #4
 800b412:	2b00      	cmp	r3, #0
 800b414:	d111      	bne.n	800b43a <HAL_RCC_OscConfig+0x712>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800b416:	4b3d      	ldr	r3, [pc, #244]	; (800b50c <HAL_RCC_OscConfig+0x7e4>)
 800b418:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b41c:	4a3b      	ldr	r2, [pc, #236]	; (800b50c <HAL_RCC_OscConfig+0x7e4>)
 800b41e:	f043 0304 	orr.w	r3, r3, #4
 800b422:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800b426:	4b39      	ldr	r3, [pc, #228]	; (800b50c <HAL_RCC_OscConfig+0x7e4>)
 800b428:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b42c:	f003 0304 	and.w	r3, r3, #4
 800b430:	613b      	str	r3, [r7, #16]
 800b432:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 800b434:	2301      	movs	r3, #1
 800b436:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800b43a:	4b35      	ldr	r3, [pc, #212]	; (800b510 <HAL_RCC_OscConfig+0x7e8>)
 800b43c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b43e:	f003 0301 	and.w	r3, r3, #1
 800b442:	2b00      	cmp	r3, #0
 800b444:	d118      	bne.n	800b478 <HAL_RCC_OscConfig+0x750>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 800b446:	4b32      	ldr	r3, [pc, #200]	; (800b510 <HAL_RCC_OscConfig+0x7e8>)
 800b448:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b44a:	4a31      	ldr	r2, [pc, #196]	; (800b510 <HAL_RCC_OscConfig+0x7e8>)
 800b44c:	f043 0301 	orr.w	r3, r3, #1
 800b450:	6293      	str	r3, [r2, #40]	; 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800b452:	f7fb f859 	bl	8006508 <HAL_GetTick>
 800b456:	62b8      	str	r0, [r7, #40]	; 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800b458:	e008      	b.n	800b46c <HAL_RCC_OscConfig+0x744>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b45a:	f7fb f855 	bl	8006508 <HAL_GetTick>
 800b45e:	4602      	mov	r2, r0
 800b460:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b462:	1ad3      	subs	r3, r2, r3
 800b464:	2b02      	cmp	r3, #2
 800b466:	d901      	bls.n	800b46c <HAL_RCC_OscConfig+0x744>
        {
          return HAL_TIMEOUT;
 800b468:	2303      	movs	r3, #3
 800b46a:	e32d      	b.n	800bac8 <HAL_RCC_OscConfig+0xda0>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800b46c:	4b28      	ldr	r3, [pc, #160]	; (800b510 <HAL_RCC_OscConfig+0x7e8>)
 800b46e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b470:	f003 0301 	and.w	r3, r3, #1
 800b474:	2b00      	cmp	r3, #0
 800b476:	d0f0      	beq.n	800b45a <HAL_RCC_OscConfig+0x732>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	689b      	ldr	r3, [r3, #8]
 800b47c:	f003 0301 	and.w	r3, r3, #1
 800b480:	2b00      	cmp	r3, #0
 800b482:	d01f      	beq.n	800b4c4 <HAL_RCC_OscConfig+0x79c>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	689b      	ldr	r3, [r3, #8]
 800b488:	f003 0304 	and.w	r3, r3, #4
 800b48c:	2b00      	cmp	r3, #0
 800b48e:	d010      	beq.n	800b4b2 <HAL_RCC_OscConfig+0x78a>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800b490:	4b1e      	ldr	r3, [pc, #120]	; (800b50c <HAL_RCC_OscConfig+0x7e4>)
 800b492:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800b496:	4a1d      	ldr	r2, [pc, #116]	; (800b50c <HAL_RCC_OscConfig+0x7e4>)
 800b498:	f043 0304 	orr.w	r3, r3, #4
 800b49c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800b4a0:	4b1a      	ldr	r3, [pc, #104]	; (800b50c <HAL_RCC_OscConfig+0x7e4>)
 800b4a2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800b4a6:	4a19      	ldr	r2, [pc, #100]	; (800b50c <HAL_RCC_OscConfig+0x7e4>)
 800b4a8:	f043 0301 	orr.w	r3, r3, #1
 800b4ac:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800b4b0:	e018      	b.n	800b4e4 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800b4b2:	4b16      	ldr	r3, [pc, #88]	; (800b50c <HAL_RCC_OscConfig+0x7e4>)
 800b4b4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800b4b8:	4a14      	ldr	r2, [pc, #80]	; (800b50c <HAL_RCC_OscConfig+0x7e4>)
 800b4ba:	f043 0301 	orr.w	r3, r3, #1
 800b4be:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800b4c2:	e00f      	b.n	800b4e4 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800b4c4:	4b11      	ldr	r3, [pc, #68]	; (800b50c <HAL_RCC_OscConfig+0x7e4>)
 800b4c6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800b4ca:	4a10      	ldr	r2, [pc, #64]	; (800b50c <HAL_RCC_OscConfig+0x7e4>)
 800b4cc:	f023 0301 	bic.w	r3, r3, #1
 800b4d0:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800b4d4:	4b0d      	ldr	r3, [pc, #52]	; (800b50c <HAL_RCC_OscConfig+0x7e4>)
 800b4d6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800b4da:	4a0c      	ldr	r2, [pc, #48]	; (800b50c <HAL_RCC_OscConfig+0x7e4>)
 800b4dc:	f023 0304 	bic.w	r3, r3, #4
 800b4e0:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	689b      	ldr	r3, [r3, #8]
 800b4e8:	2b00      	cmp	r3, #0
 800b4ea:	d058      	beq.n	800b59e <HAL_RCC_OscConfig+0x876>
    {
      tickstart = HAL_GetTick();
 800b4ec:	f7fb f80c 	bl	8006508 <HAL_GetTick>
 800b4f0:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800b4f2:	e00f      	b.n	800b514 <HAL_RCC_OscConfig+0x7ec>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b4f4:	f7fb f808 	bl	8006508 <HAL_GetTick>
 800b4f8:	4602      	mov	r2, r0
 800b4fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4fc:	1ad3      	subs	r3, r2, r3
 800b4fe:	f241 3288 	movw	r2, #5000	; 0x1388
 800b502:	4293      	cmp	r3, r2
 800b504:	d906      	bls.n	800b514 <HAL_RCC_OscConfig+0x7ec>
        {
          return HAL_TIMEOUT;
 800b506:	2303      	movs	r3, #3
 800b508:	e2de      	b.n	800bac8 <HAL_RCC_OscConfig+0xda0>
 800b50a:	bf00      	nop
 800b50c:	46020c00 	.word	0x46020c00
 800b510:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800b514:	4b9c      	ldr	r3, [pc, #624]	; (800b788 <HAL_RCC_OscConfig+0xa60>)
 800b516:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800b51a:	f003 0302 	and.w	r3, r3, #2
 800b51e:	2b00      	cmp	r3, #0
 800b520:	d0e8      	beq.n	800b4f4 <HAL_RCC_OscConfig+0x7cc>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	689b      	ldr	r3, [r3, #8]
 800b526:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b52a:	2b00      	cmp	r3, #0
 800b52c:	d01b      	beq.n	800b566 <HAL_RCC_OscConfig+0x83e>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800b52e:	4b96      	ldr	r3, [pc, #600]	; (800b788 <HAL_RCC_OscConfig+0xa60>)
 800b530:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800b534:	4a94      	ldr	r2, [pc, #592]	; (800b788 <HAL_RCC_OscConfig+0xa60>)
 800b536:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b53a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800b53e:	e00a      	b.n	800b556 <HAL_RCC_OscConfig+0x82e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b540:	f7fa ffe2 	bl	8006508 <HAL_GetTick>
 800b544:	4602      	mov	r2, r0
 800b546:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b548:	1ad3      	subs	r3, r2, r3
 800b54a:	f241 3288 	movw	r2, #5000	; 0x1388
 800b54e:	4293      	cmp	r3, r2
 800b550:	d901      	bls.n	800b556 <HAL_RCC_OscConfig+0x82e>
          {
            return HAL_TIMEOUT;
 800b552:	2303      	movs	r3, #3
 800b554:	e2b8      	b.n	800bac8 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800b556:	4b8c      	ldr	r3, [pc, #560]	; (800b788 <HAL_RCC_OscConfig+0xa60>)
 800b558:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800b55c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b560:	2b00      	cmp	r3, #0
 800b562:	d0ed      	beq.n	800b540 <HAL_RCC_OscConfig+0x818>
 800b564:	e053      	b.n	800b60e <HAL_RCC_OscConfig+0x8e6>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800b566:	4b88      	ldr	r3, [pc, #544]	; (800b788 <HAL_RCC_OscConfig+0xa60>)
 800b568:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800b56c:	4a86      	ldr	r2, [pc, #536]	; (800b788 <HAL_RCC_OscConfig+0xa60>)
 800b56e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b572:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800b576:	e00a      	b.n	800b58e <HAL_RCC_OscConfig+0x866>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b578:	f7fa ffc6 	bl	8006508 <HAL_GetTick>
 800b57c:	4602      	mov	r2, r0
 800b57e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b580:	1ad3      	subs	r3, r2, r3
 800b582:	f241 3288 	movw	r2, #5000	; 0x1388
 800b586:	4293      	cmp	r3, r2
 800b588:	d901      	bls.n	800b58e <HAL_RCC_OscConfig+0x866>
          {
            return HAL_TIMEOUT;
 800b58a:	2303      	movs	r3, #3
 800b58c:	e29c      	b.n	800bac8 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800b58e:	4b7e      	ldr	r3, [pc, #504]	; (800b788 <HAL_RCC_OscConfig+0xa60>)
 800b590:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800b594:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b598:	2b00      	cmp	r3, #0
 800b59a:	d1ed      	bne.n	800b578 <HAL_RCC_OscConfig+0x850>
 800b59c:	e037      	b.n	800b60e <HAL_RCC_OscConfig+0x8e6>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 800b59e:	f7fa ffb3 	bl	8006508 <HAL_GetTick>
 800b5a2:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800b5a4:	e00a      	b.n	800b5bc <HAL_RCC_OscConfig+0x894>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b5a6:	f7fa ffaf 	bl	8006508 <HAL_GetTick>
 800b5aa:	4602      	mov	r2, r0
 800b5ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5ae:	1ad3      	subs	r3, r2, r3
 800b5b0:	f241 3288 	movw	r2, #5000	; 0x1388
 800b5b4:	4293      	cmp	r3, r2
 800b5b6:	d901      	bls.n	800b5bc <HAL_RCC_OscConfig+0x894>
        {
          return HAL_TIMEOUT;
 800b5b8:	2303      	movs	r3, #3
 800b5ba:	e285      	b.n	800bac8 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800b5bc:	4b72      	ldr	r3, [pc, #456]	; (800b788 <HAL_RCC_OscConfig+0xa60>)
 800b5be:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800b5c2:	f003 0302 	and.w	r3, r3, #2
 800b5c6:	2b00      	cmp	r3, #0
 800b5c8:	d1ed      	bne.n	800b5a6 <HAL_RCC_OscConfig+0x87e>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 800b5ca:	4b6f      	ldr	r3, [pc, #444]	; (800b788 <HAL_RCC_OscConfig+0xa60>)
 800b5cc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800b5d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b5d4:	2b00      	cmp	r3, #0
 800b5d6:	d01a      	beq.n	800b60e <HAL_RCC_OscConfig+0x8e6>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800b5d8:	4b6b      	ldr	r3, [pc, #428]	; (800b788 <HAL_RCC_OscConfig+0xa60>)
 800b5da:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800b5de:	4a6a      	ldr	r2, [pc, #424]	; (800b788 <HAL_RCC_OscConfig+0xa60>)
 800b5e0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b5e4:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800b5e8:	e00a      	b.n	800b600 <HAL_RCC_OscConfig+0x8d8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b5ea:	f7fa ff8d 	bl	8006508 <HAL_GetTick>
 800b5ee:	4602      	mov	r2, r0
 800b5f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5f2:	1ad3      	subs	r3, r2, r3
 800b5f4:	f241 3288 	movw	r2, #5000	; 0x1388
 800b5f8:	4293      	cmp	r3, r2
 800b5fa:	d901      	bls.n	800b600 <HAL_RCC_OscConfig+0x8d8>
          {
            return HAL_TIMEOUT;
 800b5fc:	2303      	movs	r3, #3
 800b5fe:	e263      	b.n	800bac8 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800b600:	4b61      	ldr	r3, [pc, #388]	; (800b788 <HAL_RCC_OscConfig+0xa60>)
 800b602:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800b606:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b60a:	2b00      	cmp	r3, #0
 800b60c:	d1ed      	bne.n	800b5ea <HAL_RCC_OscConfig+0x8c2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800b60e:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800b612:	2b01      	cmp	r3, #1
 800b614:	d107      	bne.n	800b626 <HAL_RCC_OscConfig+0x8fe>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800b616:	4b5c      	ldr	r3, [pc, #368]	; (800b788 <HAL_RCC_OscConfig+0xa60>)
 800b618:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b61c:	4a5a      	ldr	r2, [pc, #360]	; (800b788 <HAL_RCC_OscConfig+0xa60>)
 800b61e:	f023 0304 	bic.w	r3, r3, #4
 800b622:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	681b      	ldr	r3, [r3, #0]
 800b62a:	f003 0320 	and.w	r3, r3, #32
 800b62e:	2b00      	cmp	r3, #0
 800b630:	d036      	beq.n	800b6a0 <HAL_RCC_OscConfig+0x978>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b636:	2b00      	cmp	r3, #0
 800b638:	d019      	beq.n	800b66e <HAL_RCC_OscConfig+0x946>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 800b63a:	4b53      	ldr	r3, [pc, #332]	; (800b788 <HAL_RCC_OscConfig+0xa60>)
 800b63c:	681b      	ldr	r3, [r3, #0]
 800b63e:	4a52      	ldr	r2, [pc, #328]	; (800b788 <HAL_RCC_OscConfig+0xa60>)
 800b640:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800b644:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800b646:	f7fa ff5f 	bl	8006508 <HAL_GetTick>
 800b64a:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800b64c:	e008      	b.n	800b660 <HAL_RCC_OscConfig+0x938>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800b64e:	f7fa ff5b 	bl	8006508 <HAL_GetTick>
 800b652:	4602      	mov	r2, r0
 800b654:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b656:	1ad3      	subs	r3, r2, r3
 800b658:	2b02      	cmp	r3, #2
 800b65a:	d901      	bls.n	800b660 <HAL_RCC_OscConfig+0x938>
        {
          return HAL_TIMEOUT;
 800b65c:	2303      	movs	r3, #3
 800b65e:	e233      	b.n	800bac8 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800b660:	4b49      	ldr	r3, [pc, #292]	; (800b788 <HAL_RCC_OscConfig+0xa60>)
 800b662:	681b      	ldr	r3, [r3, #0]
 800b664:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b668:	2b00      	cmp	r3, #0
 800b66a:	d0f0      	beq.n	800b64e <HAL_RCC_OscConfig+0x926>
 800b66c:	e018      	b.n	800b6a0 <HAL_RCC_OscConfig+0x978>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 800b66e:	4b46      	ldr	r3, [pc, #280]	; (800b788 <HAL_RCC_OscConfig+0xa60>)
 800b670:	681b      	ldr	r3, [r3, #0]
 800b672:	4a45      	ldr	r2, [pc, #276]	; (800b788 <HAL_RCC_OscConfig+0xa60>)
 800b674:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b678:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800b67a:	f7fa ff45 	bl	8006508 <HAL_GetTick>
 800b67e:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800b680:	e008      	b.n	800b694 <HAL_RCC_OscConfig+0x96c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800b682:	f7fa ff41 	bl	8006508 <HAL_GetTick>
 800b686:	4602      	mov	r2, r0
 800b688:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b68a:	1ad3      	subs	r3, r2, r3
 800b68c:	2b02      	cmp	r3, #2
 800b68e:	d901      	bls.n	800b694 <HAL_RCC_OscConfig+0x96c>
        {
          return HAL_TIMEOUT;
 800b690:	2303      	movs	r3, #3
 800b692:	e219      	b.n	800bac8 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800b694:	4b3c      	ldr	r3, [pc, #240]	; (800b788 <HAL_RCC_OscConfig+0xa60>)
 800b696:	681b      	ldr	r3, [r3, #0]
 800b698:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b69c:	2b00      	cmp	r3, #0
 800b69e:	d1f0      	bne.n	800b682 <HAL_RCC_OscConfig+0x95a>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	681b      	ldr	r3, [r3, #0]
 800b6a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b6a8:	2b00      	cmp	r3, #0
 800b6aa:	d036      	beq.n	800b71a <HAL_RCC_OscConfig+0x9f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b6b0:	2b00      	cmp	r3, #0
 800b6b2:	d019      	beq.n	800b6e8 <HAL_RCC_OscConfig+0x9c0>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 800b6b4:	4b34      	ldr	r3, [pc, #208]	; (800b788 <HAL_RCC_OscConfig+0xa60>)
 800b6b6:	681b      	ldr	r3, [r3, #0]
 800b6b8:	4a33      	ldr	r2, [pc, #204]	; (800b788 <HAL_RCC_OscConfig+0xa60>)
 800b6ba:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800b6be:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800b6c0:	f7fa ff22 	bl	8006508 <HAL_GetTick>
 800b6c4:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 800b6c6:	e008      	b.n	800b6da <HAL_RCC_OscConfig+0x9b2>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 800b6c8:	f7fa ff1e 	bl	8006508 <HAL_GetTick>
 800b6cc:	4602      	mov	r2, r0
 800b6ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6d0:	1ad3      	subs	r3, r2, r3
 800b6d2:	2b02      	cmp	r3, #2
 800b6d4:	d901      	bls.n	800b6da <HAL_RCC_OscConfig+0x9b2>
        {
          return HAL_TIMEOUT;
 800b6d6:	2303      	movs	r3, #3
 800b6d8:	e1f6      	b.n	800bac8 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 800b6da:	4b2b      	ldr	r3, [pc, #172]	; (800b788 <HAL_RCC_OscConfig+0xa60>)
 800b6dc:	681b      	ldr	r3, [r3, #0]
 800b6de:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b6e2:	2b00      	cmp	r3, #0
 800b6e4:	d0f0      	beq.n	800b6c8 <HAL_RCC_OscConfig+0x9a0>
 800b6e6:	e018      	b.n	800b71a <HAL_RCC_OscConfig+0x9f2>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 800b6e8:	4b27      	ldr	r3, [pc, #156]	; (800b788 <HAL_RCC_OscConfig+0xa60>)
 800b6ea:	681b      	ldr	r3, [r3, #0]
 800b6ec:	4a26      	ldr	r2, [pc, #152]	; (800b788 <HAL_RCC_OscConfig+0xa60>)
 800b6ee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b6f2:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800b6f4:	f7fa ff08 	bl	8006508 <HAL_GetTick>
 800b6f8:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 800b6fa:	e008      	b.n	800b70e <HAL_RCC_OscConfig+0x9e6>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 800b6fc:	f7fa ff04 	bl	8006508 <HAL_GetTick>
 800b700:	4602      	mov	r2, r0
 800b702:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b704:	1ad3      	subs	r3, r2, r3
 800b706:	2b02      	cmp	r3, #2
 800b708:	d901      	bls.n	800b70e <HAL_RCC_OscConfig+0x9e6>
        {
          return HAL_TIMEOUT;
 800b70a:	2303      	movs	r3, #3
 800b70c:	e1dc      	b.n	800bac8 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 800b70e:	4b1e      	ldr	r3, [pc, #120]	; (800b788 <HAL_RCC_OscConfig+0xa60>)
 800b710:	681b      	ldr	r3, [r3, #0]
 800b712:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b716:	2b00      	cmp	r3, #0
 800b718:	d1f0      	bne.n	800b6fc <HAL_RCC_OscConfig+0x9d4>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	681b      	ldr	r3, [r3, #0]
 800b71e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b722:	2b00      	cmp	r3, #0
 800b724:	d07f      	beq.n	800b826 <HAL_RCC_OscConfig+0xafe>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b72a:	2b00      	cmp	r3, #0
 800b72c:	d062      	beq.n	800b7f4 <HAL_RCC_OscConfig+0xacc>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 800b72e:	4b16      	ldr	r3, [pc, #88]	; (800b788 <HAL_RCC_OscConfig+0xa60>)
 800b730:	689b      	ldr	r3, [r3, #8]
 800b732:	4a15      	ldr	r2, [pc, #84]	; (800b788 <HAL_RCC_OscConfig+0xa60>)
 800b734:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800b738:	6093      	str	r3, [r2, #8]
 800b73a:	4b13      	ldr	r3, [pc, #76]	; (800b788 <HAL_RCC_OscConfig+0xa60>)
 800b73c:	689b      	ldr	r3, [r3, #8]
 800b73e:	f023 6270 	bic.w	r2, r3, #251658240	; 0xf000000
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b746:	4910      	ldr	r1, [pc, #64]	; (800b788 <HAL_RCC_OscConfig+0xa60>)
 800b748:	4313      	orrs	r3, r2
 800b74a:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b750:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 800b754:	d309      	bcc.n	800b76a <HAL_RCC_OscConfig+0xa42>
 800b756:	4b0c      	ldr	r3, [pc, #48]	; (800b788 <HAL_RCC_OscConfig+0xa60>)
 800b758:	68db      	ldr	r3, [r3, #12]
 800b75a:	f023 021f 	bic.w	r2, r3, #31
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	6a1b      	ldr	r3, [r3, #32]
 800b762:	4909      	ldr	r1, [pc, #36]	; (800b788 <HAL_RCC_OscConfig+0xa60>)
 800b764:	4313      	orrs	r3, r2
 800b766:	60cb      	str	r3, [r1, #12]
 800b768:	e02a      	b.n	800b7c0 <HAL_RCC_OscConfig+0xa98>
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b76e:	2b00      	cmp	r3, #0
 800b770:	da0c      	bge.n	800b78c <HAL_RCC_OscConfig+0xa64>
 800b772:	4b05      	ldr	r3, [pc, #20]	; (800b788 <HAL_RCC_OscConfig+0xa60>)
 800b774:	68db      	ldr	r3, [r3, #12]
 800b776:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	6a1b      	ldr	r3, [r3, #32]
 800b77e:	015b      	lsls	r3, r3, #5
 800b780:	4901      	ldr	r1, [pc, #4]	; (800b788 <HAL_RCC_OscConfig+0xa60>)
 800b782:	4313      	orrs	r3, r2
 800b784:	60cb      	str	r3, [r1, #12]
 800b786:	e01b      	b.n	800b7c0 <HAL_RCC_OscConfig+0xa98>
 800b788:	46020c00 	.word	0x46020c00
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b790:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b794:	d30a      	bcc.n	800b7ac <HAL_RCC_OscConfig+0xa84>
 800b796:	4ba5      	ldr	r3, [pc, #660]	; (800ba2c <HAL_RCC_OscConfig+0xd04>)
 800b798:	68db      	ldr	r3, [r3, #12]
 800b79a:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	6a1b      	ldr	r3, [r3, #32]
 800b7a2:	029b      	lsls	r3, r3, #10
 800b7a4:	49a1      	ldr	r1, [pc, #644]	; (800ba2c <HAL_RCC_OscConfig+0xd04>)
 800b7a6:	4313      	orrs	r3, r2
 800b7a8:	60cb      	str	r3, [r1, #12]
 800b7aa:	e009      	b.n	800b7c0 <HAL_RCC_OscConfig+0xa98>
 800b7ac:	4b9f      	ldr	r3, [pc, #636]	; (800ba2c <HAL_RCC_OscConfig+0xd04>)
 800b7ae:	68db      	ldr	r3, [r3, #12]
 800b7b0:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	6a1b      	ldr	r3, [r3, #32]
 800b7b8:	03db      	lsls	r3, r3, #15
 800b7ba:	499c      	ldr	r1, [pc, #624]	; (800ba2c <HAL_RCC_OscConfig+0xd04>)
 800b7bc:	4313      	orrs	r3, r2
 800b7be:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 800b7c0:	4b9a      	ldr	r3, [pc, #616]	; (800ba2c <HAL_RCC_OscConfig+0xd04>)
 800b7c2:	681b      	ldr	r3, [r3, #0]
 800b7c4:	4a99      	ldr	r2, [pc, #612]	; (800ba2c <HAL_RCC_OscConfig+0xd04>)
 800b7c6:	f043 0310 	orr.w	r3, r3, #16
 800b7ca:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800b7cc:	f7fa fe9c 	bl	8006508 <HAL_GetTick>
 800b7d0:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 800b7d2:	e008      	b.n	800b7e6 <HAL_RCC_OscConfig+0xabe>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 800b7d4:	f7fa fe98 	bl	8006508 <HAL_GetTick>
 800b7d8:	4602      	mov	r2, r0
 800b7da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7dc:	1ad3      	subs	r3, r2, r3
 800b7de:	2b02      	cmp	r3, #2
 800b7e0:	d901      	bls.n	800b7e6 <HAL_RCC_OscConfig+0xabe>
        {
          return HAL_TIMEOUT;
 800b7e2:	2303      	movs	r3, #3
 800b7e4:	e170      	b.n	800bac8 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 800b7e6:	4b91      	ldr	r3, [pc, #580]	; (800ba2c <HAL_RCC_OscConfig+0xd04>)
 800b7e8:	681b      	ldr	r3, [r3, #0]
 800b7ea:	f003 0320 	and.w	r3, r3, #32
 800b7ee:	2b00      	cmp	r3, #0
 800b7f0:	d0f0      	beq.n	800b7d4 <HAL_RCC_OscConfig+0xaac>
 800b7f2:	e018      	b.n	800b826 <HAL_RCC_OscConfig+0xafe>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 800b7f4:	4b8d      	ldr	r3, [pc, #564]	; (800ba2c <HAL_RCC_OscConfig+0xd04>)
 800b7f6:	681b      	ldr	r3, [r3, #0]
 800b7f8:	4a8c      	ldr	r2, [pc, #560]	; (800ba2c <HAL_RCC_OscConfig+0xd04>)
 800b7fa:	f023 0310 	bic.w	r3, r3, #16
 800b7fe:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800b800:	f7fa fe82 	bl	8006508 <HAL_GetTick>
 800b804:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 800b806:	e008      	b.n	800b81a <HAL_RCC_OscConfig+0xaf2>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 800b808:	f7fa fe7e 	bl	8006508 <HAL_GetTick>
 800b80c:	4602      	mov	r2, r0
 800b80e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b810:	1ad3      	subs	r3, r2, r3
 800b812:	2b02      	cmp	r3, #2
 800b814:	d901      	bls.n	800b81a <HAL_RCC_OscConfig+0xaf2>
        {
          return HAL_TIMEOUT;
 800b816:	2303      	movs	r3, #3
 800b818:	e156      	b.n	800bac8 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 800b81a:	4b84      	ldr	r3, [pc, #528]	; (800ba2c <HAL_RCC_OscConfig+0xd04>)
 800b81c:	681b      	ldr	r3, [r3, #0]
 800b81e:	f003 0320 	and.w	r3, r3, #32
 800b822:	2b00      	cmp	r3, #0
 800b824:	d1f0      	bne.n	800b808 <HAL_RCC_OscConfig+0xae0>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b82a:	2b00      	cmp	r3, #0
 800b82c:	f000 814b 	beq.w	800bac6 <HAL_RCC_OscConfig+0xd9e>
  {
    FlagStatus  pwrclkchanged = RESET;
 800b830:	2300      	movs	r3, #0
 800b832:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800b836:	4b7d      	ldr	r3, [pc, #500]	; (800ba2c <HAL_RCC_OscConfig+0xd04>)
 800b838:	69db      	ldr	r3, [r3, #28]
 800b83a:	f003 030c 	and.w	r3, r3, #12
 800b83e:	2b0c      	cmp	r3, #12
 800b840:	f000 80fa 	beq.w	800ba38 <HAL_RCC_OscConfig+0xd10>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b848:	2b02      	cmp	r3, #2
 800b84a:	f040 80cc 	bne.w	800b9e6 <HAL_RCC_OscConfig+0xcbe>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 800b84e:	4b77      	ldr	r3, [pc, #476]	; (800ba2c <HAL_RCC_OscConfig+0xd04>)
 800b850:	681b      	ldr	r3, [r3, #0]
 800b852:	4a76      	ldr	r2, [pc, #472]	; (800ba2c <HAL_RCC_OscConfig+0xd04>)
 800b854:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b858:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800b85a:	f7fa fe55 	bl	8006508 <HAL_GetTick>
 800b85e:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800b860:	e008      	b.n	800b874 <HAL_RCC_OscConfig+0xb4c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b862:	f7fa fe51 	bl	8006508 <HAL_GetTick>
 800b866:	4602      	mov	r2, r0
 800b868:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b86a:	1ad3      	subs	r3, r2, r3
 800b86c:	2b02      	cmp	r3, #2
 800b86e:	d901      	bls.n	800b874 <HAL_RCC_OscConfig+0xb4c>
          {
            return HAL_TIMEOUT;
 800b870:	2303      	movs	r3, #3
 800b872:	e129      	b.n	800bac8 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800b874:	4b6d      	ldr	r3, [pc, #436]	; (800ba2c <HAL_RCC_OscConfig+0xd04>)
 800b876:	681b      	ldr	r3, [r3, #0]
 800b878:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b87c:	2b00      	cmp	r3, #0
 800b87e:	d1f0      	bne.n	800b862 <HAL_RCC_OscConfig+0xb3a>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800b880:	4b6a      	ldr	r3, [pc, #424]	; (800ba2c <HAL_RCC_OscConfig+0xd04>)
 800b882:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b886:	f003 0304 	and.w	r3, r3, #4
 800b88a:	2b00      	cmp	r3, #0
 800b88c:	d111      	bne.n	800b8b2 <HAL_RCC_OscConfig+0xb8a>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 800b88e:	4b67      	ldr	r3, [pc, #412]	; (800ba2c <HAL_RCC_OscConfig+0xd04>)
 800b890:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b894:	4a65      	ldr	r2, [pc, #404]	; (800ba2c <HAL_RCC_OscConfig+0xd04>)
 800b896:	f043 0304 	orr.w	r3, r3, #4
 800b89a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800b89e:	4b63      	ldr	r3, [pc, #396]	; (800ba2c <HAL_RCC_OscConfig+0xd04>)
 800b8a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b8a4:	f003 0304 	and.w	r3, r3, #4
 800b8a8:	60fb      	str	r3, [r7, #12]
 800b8aa:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 800b8ac:	2301      	movs	r3, #1
 800b8ae:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 800b8b2:	4b5f      	ldr	r3, [pc, #380]	; (800ba30 <HAL_RCC_OscConfig+0xd08>)
 800b8b4:	68db      	ldr	r3, [r3, #12]
 800b8b6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b8ba:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b8be:	d102      	bne.n	800b8c6 <HAL_RCC_OscConfig+0xb9e>
        {
          pwrboosten = SET;
 800b8c0:	2301      	movs	r3, #1
 800b8c2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 800b8c6:	4b5a      	ldr	r3, [pc, #360]	; (800ba30 <HAL_RCC_OscConfig+0xd08>)
 800b8c8:	68db      	ldr	r3, [r3, #12]
 800b8ca:	4a59      	ldr	r2, [pc, #356]	; (800ba30 <HAL_RCC_OscConfig+0xd08>)
 800b8cc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b8d0:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 800b8d2:	4b56      	ldr	r3, [pc, #344]	; (800ba2c <HAL_RCC_OscConfig+0xd04>)
 800b8d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b8d6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b8da:	f023 0303 	bic.w	r3, r3, #3
 800b8de:	687a      	ldr	r2, [r7, #4]
 800b8e0:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800b8e2:	687a      	ldr	r2, [r7, #4]
 800b8e4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800b8e6:	3a01      	subs	r2, #1
 800b8e8:	0212      	lsls	r2, r2, #8
 800b8ea:	4311      	orrs	r1, r2
 800b8ec:	687a      	ldr	r2, [r7, #4]
 800b8ee:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800b8f0:	430a      	orrs	r2, r1
 800b8f2:	494e      	ldr	r1, [pc, #312]	; (800ba2c <HAL_RCC_OscConfig+0xd04>)
 800b8f4:	4313      	orrs	r3, r2
 800b8f6:	628b      	str	r3, [r1, #40]	; 0x28
 800b8f8:	4b4c      	ldr	r3, [pc, #304]	; (800ba2c <HAL_RCC_OscConfig+0xd04>)
 800b8fa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b8fc:	4b4d      	ldr	r3, [pc, #308]	; (800ba34 <HAL_RCC_OscConfig+0xd0c>)
 800b8fe:	4013      	ands	r3, r2
 800b900:	687a      	ldr	r2, [r7, #4]
 800b902:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800b904:	3a01      	subs	r2, #1
 800b906:	f3c2 0108 	ubfx	r1, r2, #0, #9
 800b90a:	687a      	ldr	r2, [r7, #4]
 800b90c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800b90e:	3a01      	subs	r2, #1
 800b910:	0252      	lsls	r2, r2, #9
 800b912:	b292      	uxth	r2, r2
 800b914:	4311      	orrs	r1, r2
 800b916:	687a      	ldr	r2, [r7, #4]
 800b918:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800b91a:	3a01      	subs	r2, #1
 800b91c:	0412      	lsls	r2, r2, #16
 800b91e:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 800b922:	4311      	orrs	r1, r2
 800b924:	687a      	ldr	r2, [r7, #4]
 800b926:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800b928:	3a01      	subs	r2, #1
 800b92a:	0612      	lsls	r2, r2, #24
 800b92c:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 800b930:	430a      	orrs	r2, r1
 800b932:	493e      	ldr	r1, [pc, #248]	; (800ba2c <HAL_RCC_OscConfig+0xd04>)
 800b934:	4313      	orrs	r3, r2
 800b936:	634b      	str	r3, [r1, #52]	; 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLLFRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLLFRACN_DISABLE();
 800b938:	4b3c      	ldr	r3, [pc, #240]	; (800ba2c <HAL_RCC_OscConfig+0xd04>)
 800b93a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b93c:	4a3b      	ldr	r2, [pc, #236]	; (800ba2c <HAL_RCC_OscConfig+0xd04>)
 800b93e:	f023 0310 	bic.w	r3, r3, #16
 800b942:	6293      	str	r3, [r2, #40]	; 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 800b944:	4b39      	ldr	r3, [pc, #228]	; (800ba2c <HAL_RCC_OscConfig+0xd04>)
 800b946:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b948:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b94c:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800b950:	687a      	ldr	r2, [r7, #4]
 800b952:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800b954:	00d2      	lsls	r2, r2, #3
 800b956:	4935      	ldr	r1, [pc, #212]	; (800ba2c <HAL_RCC_OscConfig+0xd04>)
 800b958:	4313      	orrs	r3, r2
 800b95a:	638b      	str	r3, [r1, #56]	; 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLLFRACN_ENABLE();
 800b95c:	4b33      	ldr	r3, [pc, #204]	; (800ba2c <HAL_RCC_OscConfig+0xd04>)
 800b95e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b960:	4a32      	ldr	r2, [pc, #200]	; (800ba2c <HAL_RCC_OscConfig+0xd04>)
 800b962:	f043 0310 	orr.w	r3, r3, #16
 800b966:	6293      	str	r3, [r2, #40]	; 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 800b968:	4b30      	ldr	r3, [pc, #192]	; (800ba2c <HAL_RCC_OscConfig+0xd04>)
 800b96a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b96c:	f023 020c 	bic.w	r2, r3, #12
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b974:	492d      	ldr	r1, [pc, #180]	; (800ba2c <HAL_RCC_OscConfig+0xd04>)
 800b976:	4313      	orrs	r3, r2
 800b978:	628b      	str	r3, [r1, #40]	; 0x28

        if (pwrboosten == SET)
 800b97a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b97e:	2b01      	cmp	r3, #1
 800b980:	d105      	bne.n	800b98e <HAL_RCC_OscConfig+0xc66>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 800b982:	4b2b      	ldr	r3, [pc, #172]	; (800ba30 <HAL_RCC_OscConfig+0xd08>)
 800b984:	68db      	ldr	r3, [r3, #12]
 800b986:	4a2a      	ldr	r2, [pc, #168]	; (800ba30 <HAL_RCC_OscConfig+0xd08>)
 800b988:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800b98c:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 800b98e:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800b992:	2b01      	cmp	r3, #1
 800b994:	d107      	bne.n	800b9a6 <HAL_RCC_OscConfig+0xc7e>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 800b996:	4b25      	ldr	r3, [pc, #148]	; (800ba2c <HAL_RCC_OscConfig+0xd04>)
 800b998:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b99c:	4a23      	ldr	r2, [pc, #140]	; (800ba2c <HAL_RCC_OscConfig+0xd04>)
 800b99e:	f023 0304 	bic.w	r3, r3, #4
 800b9a2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800b9a6:	4b21      	ldr	r3, [pc, #132]	; (800ba2c <HAL_RCC_OscConfig+0xd04>)
 800b9a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b9aa:	4a20      	ldr	r2, [pc, #128]	; (800ba2c <HAL_RCC_OscConfig+0xd04>)
 800b9ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800b9b0:	6293      	str	r3, [r2, #40]	; 0x28

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 800b9b2:	4b1e      	ldr	r3, [pc, #120]	; (800ba2c <HAL_RCC_OscConfig+0xd04>)
 800b9b4:	681b      	ldr	r3, [r3, #0]
 800b9b6:	4a1d      	ldr	r2, [pc, #116]	; (800ba2c <HAL_RCC_OscConfig+0xd04>)
 800b9b8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b9bc:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800b9be:	f7fa fda3 	bl	8006508 <HAL_GetTick>
 800b9c2:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800b9c4:	e008      	b.n	800b9d8 <HAL_RCC_OscConfig+0xcb0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b9c6:	f7fa fd9f 	bl	8006508 <HAL_GetTick>
 800b9ca:	4602      	mov	r2, r0
 800b9cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9ce:	1ad3      	subs	r3, r2, r3
 800b9d0:	2b02      	cmp	r3, #2
 800b9d2:	d901      	bls.n	800b9d8 <HAL_RCC_OscConfig+0xcb0>
          {
            return HAL_TIMEOUT;
 800b9d4:	2303      	movs	r3, #3
 800b9d6:	e077      	b.n	800bac8 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800b9d8:	4b14      	ldr	r3, [pc, #80]	; (800ba2c <HAL_RCC_OscConfig+0xd04>)
 800b9da:	681b      	ldr	r3, [r3, #0]
 800b9dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b9e0:	2b00      	cmp	r3, #0
 800b9e2:	d0f0      	beq.n	800b9c6 <HAL_RCC_OscConfig+0xc9e>
 800b9e4:	e06f      	b.n	800bac6 <HAL_RCC_OscConfig+0xd9e>
        }
      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 800b9e6:	4b11      	ldr	r3, [pc, #68]	; (800ba2c <HAL_RCC_OscConfig+0xd04>)
 800b9e8:	681b      	ldr	r3, [r3, #0]
 800b9ea:	4a10      	ldr	r2, [pc, #64]	; (800ba2c <HAL_RCC_OscConfig+0xd04>)
 800b9ec:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b9f0:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800b9f2:	f7fa fd89 	bl	8006508 <HAL_GetTick>
 800b9f6:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800b9f8:	e008      	b.n	800ba0c <HAL_RCC_OscConfig+0xce4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b9fa:	f7fa fd85 	bl	8006508 <HAL_GetTick>
 800b9fe:	4602      	mov	r2, r0
 800ba00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba02:	1ad3      	subs	r3, r2, r3
 800ba04:	2b02      	cmp	r3, #2
 800ba06:	d901      	bls.n	800ba0c <HAL_RCC_OscConfig+0xce4>
          {
            return HAL_TIMEOUT;
 800ba08:	2303      	movs	r3, #3
 800ba0a:	e05d      	b.n	800bac8 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800ba0c:	4b07      	ldr	r3, [pc, #28]	; (800ba2c <HAL_RCC_OscConfig+0xd04>)
 800ba0e:	681b      	ldr	r3, [r3, #0]
 800ba10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ba14:	2b00      	cmp	r3, #0
 800ba16:	d1f0      	bne.n	800b9fa <HAL_RCC_OscConfig+0xcd2>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 800ba18:	4b04      	ldr	r3, [pc, #16]	; (800ba2c <HAL_RCC_OscConfig+0xd04>)
 800ba1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba1c:	4a03      	ldr	r2, [pc, #12]	; (800ba2c <HAL_RCC_OscConfig+0xd04>)
 800ba1e:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 800ba22:	f023 0303 	bic.w	r3, r3, #3
 800ba26:	6293      	str	r3, [r2, #40]	; 0x28
 800ba28:	e04d      	b.n	800bac6 <HAL_RCC_OscConfig+0xd9e>
 800ba2a:	bf00      	nop
 800ba2c:	46020c00 	.word	0x46020c00
 800ba30:	46020800 	.word	0x46020800
 800ba34:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 800ba38:	4b25      	ldr	r3, [pc, #148]	; (800bad0 <HAL_RCC_OscConfig+0xda8>)
 800ba3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba3c:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800ba3e:	4b24      	ldr	r3, [pc, #144]	; (800bad0 <HAL_RCC_OscConfig+0xda8>)
 800ba40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ba42:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba48:	2b01      	cmp	r3, #1
 800ba4a:	d03a      	beq.n	800bac2 <HAL_RCC_OscConfig+0xd9a>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 800ba4c:	69fb      	ldr	r3, [r7, #28]
 800ba4e:	f003 0203 	and.w	r2, r3, #3
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800ba56:	429a      	cmp	r2, r3
 800ba58:	d133      	bne.n	800bac2 <HAL_RCC_OscConfig+0xd9a>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 800ba5a:	69fb      	ldr	r3, [r7, #28]
 800ba5c:	0a1b      	lsrs	r3, r3, #8
 800ba5e:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba66:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 800ba68:	429a      	cmp	r2, r3
 800ba6a:	d12a      	bne.n	800bac2 <HAL_RCC_OscConfig+0xd9a>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) >> \
 800ba6c:	69fb      	ldr	r3, [r7, #28]
 800ba6e:	0b1b      	lsrs	r3, r3, #12
 800ba70:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1MBOOST_Pos) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 800ba78:	429a      	cmp	r2, r3
 800ba7a:	d122      	bne.n	800bac2 <HAL_RCC_OscConfig+0xd9a>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800ba7c:	69bb      	ldr	r3, [r7, #24]
 800ba7e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ba86:	3b01      	subs	r3, #1
            RCC_PLL1CFGR_PLL1MBOOST_Pos) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 800ba88:	429a      	cmp	r2, r3
 800ba8a:	d11a      	bne.n	800bac2 <HAL_RCC_OscConfig+0xd9a>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 800ba8c:	69bb      	ldr	r3, [r7, #24]
 800ba8e:	0a5b      	lsrs	r3, r3, #9
 800ba90:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ba98:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800ba9a:	429a      	cmp	r2, r3
 800ba9c:	d111      	bne.n	800bac2 <HAL_RCC_OscConfig+0xd9a>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 800ba9e:	69bb      	ldr	r3, [r7, #24]
 800baa0:	0c1b      	lsrs	r3, r3, #16
 800baa2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800baaa:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800baac:	429a      	cmp	r2, r3
 800baae:	d108      	bne.n	800bac2 <HAL_RCC_OscConfig+0xd9a>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 800bab0:	69bb      	ldr	r3, [r7, #24]
 800bab2:	0e1b      	lsrs	r3, r3, #24
 800bab4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800babc:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800babe:	429a      	cmp	r2, r3
 800bac0:	d001      	beq.n	800bac6 <HAL_RCC_OscConfig+0xd9e>
      {
        return HAL_ERROR;
 800bac2:	2301      	movs	r3, #1
 800bac4:	e000      	b.n	800bac8 <HAL_RCC_OscConfig+0xda0>
      }
    }
  }
  return HAL_OK;
 800bac6:	2300      	movs	r3, #0
}
 800bac8:	4618      	mov	r0, r3
 800baca:	3738      	adds	r7, #56	; 0x38
 800bacc:	46bd      	mov	sp, r7
 800bace:	bd80      	pop	{r7, pc}
 800bad0:	46020c00 	.word	0x46020c00

0800bad4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 800bad4:	b580      	push	{r7, lr}
 800bad6:	b086      	sub	sp, #24
 800bad8:	af00      	add	r7, sp, #0
 800bada:	6078      	str	r0, [r7, #4]
 800badc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	2b00      	cmp	r3, #0
 800bae2:	d101      	bne.n	800bae8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800bae4:	2301      	movs	r3, #1
 800bae6:	e1d9      	b.n	800be9c <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800bae8:	4b9b      	ldr	r3, [pc, #620]	; (800bd58 <HAL_RCC_ClockConfig+0x284>)
 800baea:	681b      	ldr	r3, [r3, #0]
 800baec:	f003 030f 	and.w	r3, r3, #15
 800baf0:	683a      	ldr	r2, [r7, #0]
 800baf2:	429a      	cmp	r2, r3
 800baf4:	d910      	bls.n	800bb18 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800baf6:	4b98      	ldr	r3, [pc, #608]	; (800bd58 <HAL_RCC_ClockConfig+0x284>)
 800baf8:	681b      	ldr	r3, [r3, #0]
 800bafa:	f023 020f 	bic.w	r2, r3, #15
 800bafe:	4996      	ldr	r1, [pc, #600]	; (800bd58 <HAL_RCC_ClockConfig+0x284>)
 800bb00:	683b      	ldr	r3, [r7, #0]
 800bb02:	4313      	orrs	r3, r2
 800bb04:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800bb06:	4b94      	ldr	r3, [pc, #592]	; (800bd58 <HAL_RCC_ClockConfig+0x284>)
 800bb08:	681b      	ldr	r3, [r3, #0]
 800bb0a:	f003 030f 	and.w	r3, r3, #15
 800bb0e:	683a      	ldr	r2, [r7, #0]
 800bb10:	429a      	cmp	r2, r3
 800bb12:	d001      	beq.n	800bb18 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800bb14:	2301      	movs	r3, #1
 800bb16:	e1c1      	b.n	800be9c <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	681b      	ldr	r3, [r3, #0]
 800bb1c:	f003 0310 	and.w	r3, r3, #16
 800bb20:	2b00      	cmp	r3, #0
 800bb22:	d010      	beq.n	800bb46 <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	695a      	ldr	r2, [r3, #20]
 800bb28:	4b8c      	ldr	r3, [pc, #560]	; (800bd5c <HAL_RCC_ClockConfig+0x288>)
 800bb2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb2c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800bb30:	429a      	cmp	r2, r3
 800bb32:	d908      	bls.n	800bb46 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 800bb34:	4b89      	ldr	r3, [pc, #548]	; (800bd5c <HAL_RCC_ClockConfig+0x288>)
 800bb36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb38:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	695b      	ldr	r3, [r3, #20]
 800bb40:	4986      	ldr	r1, [pc, #536]	; (800bd5c <HAL_RCC_ClockConfig+0x288>)
 800bb42:	4313      	orrs	r3, r2
 800bb44:	624b      	str	r3, [r1, #36]	; 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	681b      	ldr	r3, [r3, #0]
 800bb4a:	f003 0308 	and.w	r3, r3, #8
 800bb4e:	2b00      	cmp	r3, #0
 800bb50:	d012      	beq.n	800bb78 <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	691a      	ldr	r2, [r3, #16]
 800bb56:	4b81      	ldr	r3, [pc, #516]	; (800bd5c <HAL_RCC_ClockConfig+0x288>)
 800bb58:	6a1b      	ldr	r3, [r3, #32]
 800bb5a:	091b      	lsrs	r3, r3, #4
 800bb5c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800bb60:	429a      	cmp	r2, r3
 800bb62:	d909      	bls.n	800bb78 <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 800bb64:	4b7d      	ldr	r3, [pc, #500]	; (800bd5c <HAL_RCC_ClockConfig+0x288>)
 800bb66:	6a1b      	ldr	r3, [r3, #32]
 800bb68:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	691b      	ldr	r3, [r3, #16]
 800bb70:	011b      	lsls	r3, r3, #4
 800bb72:	497a      	ldr	r1, [pc, #488]	; (800bd5c <HAL_RCC_ClockConfig+0x288>)
 800bb74:	4313      	orrs	r3, r2
 800bb76:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	681b      	ldr	r3, [r3, #0]
 800bb7c:	f003 0304 	and.w	r3, r3, #4
 800bb80:	2b00      	cmp	r3, #0
 800bb82:	d010      	beq.n	800bba6 <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	68da      	ldr	r2, [r3, #12]
 800bb88:	4b74      	ldr	r3, [pc, #464]	; (800bd5c <HAL_RCC_ClockConfig+0x288>)
 800bb8a:	6a1b      	ldr	r3, [r3, #32]
 800bb8c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800bb90:	429a      	cmp	r2, r3
 800bb92:	d908      	bls.n	800bba6 <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 800bb94:	4b71      	ldr	r3, [pc, #452]	; (800bd5c <HAL_RCC_ClockConfig+0x288>)
 800bb96:	6a1b      	ldr	r3, [r3, #32]
 800bb98:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	68db      	ldr	r3, [r3, #12]
 800bba0:	496e      	ldr	r1, [pc, #440]	; (800bd5c <HAL_RCC_ClockConfig+0x288>)
 800bba2:	4313      	orrs	r3, r2
 800bba4:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	681b      	ldr	r3, [r3, #0]
 800bbaa:	f003 0302 	and.w	r3, r3, #2
 800bbae:	2b00      	cmp	r3, #0
 800bbb0:	d010      	beq.n	800bbd4 <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	689a      	ldr	r2, [r3, #8]
 800bbb6:	4b69      	ldr	r3, [pc, #420]	; (800bd5c <HAL_RCC_ClockConfig+0x288>)
 800bbb8:	6a1b      	ldr	r3, [r3, #32]
 800bbba:	f003 030f 	and.w	r3, r3, #15
 800bbbe:	429a      	cmp	r2, r3
 800bbc0:	d908      	bls.n	800bbd4 <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 800bbc2:	4b66      	ldr	r3, [pc, #408]	; (800bd5c <HAL_RCC_ClockConfig+0x288>)
 800bbc4:	6a1b      	ldr	r3, [r3, #32]
 800bbc6:	f023 020f 	bic.w	r2, r3, #15
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	689b      	ldr	r3, [r3, #8]
 800bbce:	4963      	ldr	r1, [pc, #396]	; (800bd5c <HAL_RCC_ClockConfig+0x288>)
 800bbd0:	4313      	orrs	r3, r2
 800bbd2:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	681b      	ldr	r3, [r3, #0]
 800bbd8:	f003 0301 	and.w	r3, r3, #1
 800bbdc:	2b00      	cmp	r3, #0
 800bbde:	f000 80d2 	beq.w	800bd86 <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 800bbe2:	2300      	movs	r3, #0
 800bbe4:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	685b      	ldr	r3, [r3, #4]
 800bbea:	2b03      	cmp	r3, #3
 800bbec:	d143      	bne.n	800bc76 <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800bbee:	4b5b      	ldr	r3, [pc, #364]	; (800bd5c <HAL_RCC_ClockConfig+0x288>)
 800bbf0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800bbf4:	f003 0304 	and.w	r3, r3, #4
 800bbf8:	2b00      	cmp	r3, #0
 800bbfa:	d110      	bne.n	800bc1e <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800bbfc:	4b57      	ldr	r3, [pc, #348]	; (800bd5c <HAL_RCC_ClockConfig+0x288>)
 800bbfe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800bc02:	4a56      	ldr	r2, [pc, #344]	; (800bd5c <HAL_RCC_ClockConfig+0x288>)
 800bc04:	f043 0304 	orr.w	r3, r3, #4
 800bc08:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800bc0c:	4b53      	ldr	r3, [pc, #332]	; (800bd5c <HAL_RCC_ClockConfig+0x288>)
 800bc0e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800bc12:	f003 0304 	and.w	r3, r3, #4
 800bc16:	60bb      	str	r3, [r7, #8]
 800bc18:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 800bc1a:	2301      	movs	r3, #1
 800bc1c:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 800bc1e:	f7fa fc73 	bl	8006508 <HAL_GetTick>
 800bc22:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 800bc24:	4b4e      	ldr	r3, [pc, #312]	; (800bd60 <HAL_RCC_ClockConfig+0x28c>)
 800bc26:	68db      	ldr	r3, [r3, #12]
 800bc28:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800bc2c:	2b00      	cmp	r3, #0
 800bc2e:	d00f      	beq.n	800bc50 <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 800bc30:	e008      	b.n	800bc44 <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 800bc32:	f7fa fc69 	bl	8006508 <HAL_GetTick>
 800bc36:	4602      	mov	r2, r0
 800bc38:	693b      	ldr	r3, [r7, #16]
 800bc3a:	1ad3      	subs	r3, r2, r3
 800bc3c:	2b02      	cmp	r3, #2
 800bc3e:	d901      	bls.n	800bc44 <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 800bc40:	2303      	movs	r3, #3
 800bc42:	e12b      	b.n	800be9c <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 800bc44:	4b46      	ldr	r3, [pc, #280]	; (800bd60 <HAL_RCC_ClockConfig+0x28c>)
 800bc46:	68db      	ldr	r3, [r3, #12]
 800bc48:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800bc4c:	2b00      	cmp	r3, #0
 800bc4e:	d0f0      	beq.n	800bc32 <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800bc50:	7dfb      	ldrb	r3, [r7, #23]
 800bc52:	2b01      	cmp	r3, #1
 800bc54:	d107      	bne.n	800bc66 <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 800bc56:	4b41      	ldr	r3, [pc, #260]	; (800bd5c <HAL_RCC_ClockConfig+0x288>)
 800bc58:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800bc5c:	4a3f      	ldr	r2, [pc, #252]	; (800bd5c <HAL_RCC_ClockConfig+0x288>)
 800bc5e:	f023 0304 	bic.w	r3, r3, #4
 800bc62:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800bc66:	4b3d      	ldr	r3, [pc, #244]	; (800bd5c <HAL_RCC_ClockConfig+0x288>)
 800bc68:	681b      	ldr	r3, [r3, #0]
 800bc6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bc6e:	2b00      	cmp	r3, #0
 800bc70:	d121      	bne.n	800bcb6 <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 800bc72:	2301      	movs	r3, #1
 800bc74:	e112      	b.n	800be9c <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	685b      	ldr	r3, [r3, #4]
 800bc7a:	2b02      	cmp	r3, #2
 800bc7c:	d107      	bne.n	800bc8e <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800bc7e:	4b37      	ldr	r3, [pc, #220]	; (800bd5c <HAL_RCC_ClockConfig+0x288>)
 800bc80:	681b      	ldr	r3, [r3, #0]
 800bc82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bc86:	2b00      	cmp	r3, #0
 800bc88:	d115      	bne.n	800bcb6 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 800bc8a:	2301      	movs	r3, #1
 800bc8c:	e106      	b.n	800be9c <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	685b      	ldr	r3, [r3, #4]
 800bc92:	2b00      	cmp	r3, #0
 800bc94:	d107      	bne.n	800bca6 <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 800bc96:	4b31      	ldr	r3, [pc, #196]	; (800bd5c <HAL_RCC_ClockConfig+0x288>)
 800bc98:	681b      	ldr	r3, [r3, #0]
 800bc9a:	f003 0304 	and.w	r3, r3, #4
 800bc9e:	2b00      	cmp	r3, #0
 800bca0:	d109      	bne.n	800bcb6 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 800bca2:	2301      	movs	r3, #1
 800bca4:	e0fa      	b.n	800be9c <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800bca6:	4b2d      	ldr	r3, [pc, #180]	; (800bd5c <HAL_RCC_ClockConfig+0x288>)
 800bca8:	681b      	ldr	r3, [r3, #0]
 800bcaa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800bcae:	2b00      	cmp	r3, #0
 800bcb0:	d101      	bne.n	800bcb6 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 800bcb2:	2301      	movs	r3, #1
 800bcb4:	e0f2      	b.n	800be9c <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 800bcb6:	4b29      	ldr	r3, [pc, #164]	; (800bd5c <HAL_RCC_ClockConfig+0x288>)
 800bcb8:	69db      	ldr	r3, [r3, #28]
 800bcba:	f023 0203 	bic.w	r2, r3, #3
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	685b      	ldr	r3, [r3, #4]
 800bcc2:	4926      	ldr	r1, [pc, #152]	; (800bd5c <HAL_RCC_ClockConfig+0x288>)
 800bcc4:	4313      	orrs	r3, r2
 800bcc6:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 800bcc8:	f7fa fc1e 	bl	8006508 <HAL_GetTick>
 800bccc:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	685b      	ldr	r3, [r3, #4]
 800bcd2:	2b03      	cmp	r3, #3
 800bcd4:	d112      	bne.n	800bcfc <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800bcd6:	e00a      	b.n	800bcee <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800bcd8:	f7fa fc16 	bl	8006508 <HAL_GetTick>
 800bcdc:	4602      	mov	r2, r0
 800bcde:	693b      	ldr	r3, [r7, #16]
 800bce0:	1ad3      	subs	r3, r2, r3
 800bce2:	f241 3288 	movw	r2, #5000	; 0x1388
 800bce6:	4293      	cmp	r3, r2
 800bce8:	d901      	bls.n	800bcee <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 800bcea:	2303      	movs	r3, #3
 800bcec:	e0d6      	b.n	800be9c <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800bcee:	4b1b      	ldr	r3, [pc, #108]	; (800bd5c <HAL_RCC_ClockConfig+0x288>)
 800bcf0:	69db      	ldr	r3, [r3, #28]
 800bcf2:	f003 030c 	and.w	r3, r3, #12
 800bcf6:	2b0c      	cmp	r3, #12
 800bcf8:	d1ee      	bne.n	800bcd8 <HAL_RCC_ClockConfig+0x204>
 800bcfa:	e044      	b.n	800bd86 <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	685b      	ldr	r3, [r3, #4]
 800bd00:	2b02      	cmp	r3, #2
 800bd02:	d112      	bne.n	800bd2a <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800bd04:	e00a      	b.n	800bd1c <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800bd06:	f7fa fbff 	bl	8006508 <HAL_GetTick>
 800bd0a:	4602      	mov	r2, r0
 800bd0c:	693b      	ldr	r3, [r7, #16]
 800bd0e:	1ad3      	subs	r3, r2, r3
 800bd10:	f241 3288 	movw	r2, #5000	; 0x1388
 800bd14:	4293      	cmp	r3, r2
 800bd16:	d901      	bls.n	800bd1c <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 800bd18:	2303      	movs	r3, #3
 800bd1a:	e0bf      	b.n	800be9c <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800bd1c:	4b0f      	ldr	r3, [pc, #60]	; (800bd5c <HAL_RCC_ClockConfig+0x288>)
 800bd1e:	69db      	ldr	r3, [r3, #28]
 800bd20:	f003 030c 	and.w	r3, r3, #12
 800bd24:	2b08      	cmp	r3, #8
 800bd26:	d1ee      	bne.n	800bd06 <HAL_RCC_ClockConfig+0x232>
 800bd28:	e02d      	b.n	800bd86 <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	685b      	ldr	r3, [r3, #4]
 800bd2e:	2b00      	cmp	r3, #0
 800bd30:	d123      	bne.n	800bd7a <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800bd32:	e00a      	b.n	800bd4a <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800bd34:	f7fa fbe8 	bl	8006508 <HAL_GetTick>
 800bd38:	4602      	mov	r2, r0
 800bd3a:	693b      	ldr	r3, [r7, #16]
 800bd3c:	1ad3      	subs	r3, r2, r3
 800bd3e:	f241 3288 	movw	r2, #5000	; 0x1388
 800bd42:	4293      	cmp	r3, r2
 800bd44:	d901      	bls.n	800bd4a <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 800bd46:	2303      	movs	r3, #3
 800bd48:	e0a8      	b.n	800be9c <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800bd4a:	4b04      	ldr	r3, [pc, #16]	; (800bd5c <HAL_RCC_ClockConfig+0x288>)
 800bd4c:	69db      	ldr	r3, [r3, #28]
 800bd4e:	f003 030c 	and.w	r3, r3, #12
 800bd52:	2b00      	cmp	r3, #0
 800bd54:	d1ee      	bne.n	800bd34 <HAL_RCC_ClockConfig+0x260>
 800bd56:	e016      	b.n	800bd86 <HAL_RCC_ClockConfig+0x2b2>
 800bd58:	40022000 	.word	0x40022000
 800bd5c:	46020c00 	.word	0x46020c00
 800bd60:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800bd64:	f7fa fbd0 	bl	8006508 <HAL_GetTick>
 800bd68:	4602      	mov	r2, r0
 800bd6a:	693b      	ldr	r3, [r7, #16]
 800bd6c:	1ad3      	subs	r3, r2, r3
 800bd6e:	f241 3288 	movw	r2, #5000	; 0x1388
 800bd72:	4293      	cmp	r3, r2
 800bd74:	d901      	bls.n	800bd7a <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 800bd76:	2303      	movs	r3, #3
 800bd78:	e090      	b.n	800be9c <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800bd7a:	4b4a      	ldr	r3, [pc, #296]	; (800bea4 <HAL_RCC_ClockConfig+0x3d0>)
 800bd7c:	69db      	ldr	r3, [r3, #28]
 800bd7e:	f003 030c 	and.w	r3, r3, #12
 800bd82:	2b04      	cmp	r3, #4
 800bd84:	d1ee      	bne.n	800bd64 <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	681b      	ldr	r3, [r3, #0]
 800bd8a:	f003 0302 	and.w	r3, r3, #2
 800bd8e:	2b00      	cmp	r3, #0
 800bd90:	d010      	beq.n	800bdb4 <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	689a      	ldr	r2, [r3, #8]
 800bd96:	4b43      	ldr	r3, [pc, #268]	; (800bea4 <HAL_RCC_ClockConfig+0x3d0>)
 800bd98:	6a1b      	ldr	r3, [r3, #32]
 800bd9a:	f003 030f 	and.w	r3, r3, #15
 800bd9e:	429a      	cmp	r2, r3
 800bda0:	d208      	bcs.n	800bdb4 <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 800bda2:	4b40      	ldr	r3, [pc, #256]	; (800bea4 <HAL_RCC_ClockConfig+0x3d0>)
 800bda4:	6a1b      	ldr	r3, [r3, #32]
 800bda6:	f023 020f 	bic.w	r2, r3, #15
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	689b      	ldr	r3, [r3, #8]
 800bdae:	493d      	ldr	r1, [pc, #244]	; (800bea4 <HAL_RCC_ClockConfig+0x3d0>)
 800bdb0:	4313      	orrs	r3, r2
 800bdb2:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800bdb4:	4b3c      	ldr	r3, [pc, #240]	; (800bea8 <HAL_RCC_ClockConfig+0x3d4>)
 800bdb6:	681b      	ldr	r3, [r3, #0]
 800bdb8:	f003 030f 	and.w	r3, r3, #15
 800bdbc:	683a      	ldr	r2, [r7, #0]
 800bdbe:	429a      	cmp	r2, r3
 800bdc0:	d210      	bcs.n	800bde4 <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800bdc2:	4b39      	ldr	r3, [pc, #228]	; (800bea8 <HAL_RCC_ClockConfig+0x3d4>)
 800bdc4:	681b      	ldr	r3, [r3, #0]
 800bdc6:	f023 020f 	bic.w	r2, r3, #15
 800bdca:	4937      	ldr	r1, [pc, #220]	; (800bea8 <HAL_RCC_ClockConfig+0x3d4>)
 800bdcc:	683b      	ldr	r3, [r7, #0]
 800bdce:	4313      	orrs	r3, r2
 800bdd0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800bdd2:	4b35      	ldr	r3, [pc, #212]	; (800bea8 <HAL_RCC_ClockConfig+0x3d4>)
 800bdd4:	681b      	ldr	r3, [r3, #0]
 800bdd6:	f003 030f 	and.w	r3, r3, #15
 800bdda:	683a      	ldr	r2, [r7, #0]
 800bddc:	429a      	cmp	r2, r3
 800bdde:	d001      	beq.n	800bde4 <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 800bde0:	2301      	movs	r3, #1
 800bde2:	e05b      	b.n	800be9c <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	681b      	ldr	r3, [r3, #0]
 800bde8:	f003 0304 	and.w	r3, r3, #4
 800bdec:	2b00      	cmp	r3, #0
 800bdee:	d010      	beq.n	800be12 <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	68da      	ldr	r2, [r3, #12]
 800bdf4:	4b2b      	ldr	r3, [pc, #172]	; (800bea4 <HAL_RCC_ClockConfig+0x3d0>)
 800bdf6:	6a1b      	ldr	r3, [r3, #32]
 800bdf8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800bdfc:	429a      	cmp	r2, r3
 800bdfe:	d208      	bcs.n	800be12 <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 800be00:	4b28      	ldr	r3, [pc, #160]	; (800bea4 <HAL_RCC_ClockConfig+0x3d0>)
 800be02:	6a1b      	ldr	r3, [r3, #32]
 800be04:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	68db      	ldr	r3, [r3, #12]
 800be0c:	4925      	ldr	r1, [pc, #148]	; (800bea4 <HAL_RCC_ClockConfig+0x3d0>)
 800be0e:	4313      	orrs	r3, r2
 800be10:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	681b      	ldr	r3, [r3, #0]
 800be16:	f003 0308 	and.w	r3, r3, #8
 800be1a:	2b00      	cmp	r3, #0
 800be1c:	d012      	beq.n	800be44 <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	691a      	ldr	r2, [r3, #16]
 800be22:	4b20      	ldr	r3, [pc, #128]	; (800bea4 <HAL_RCC_ClockConfig+0x3d0>)
 800be24:	6a1b      	ldr	r3, [r3, #32]
 800be26:	091b      	lsrs	r3, r3, #4
 800be28:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800be2c:	429a      	cmp	r2, r3
 800be2e:	d209      	bcs.n	800be44 <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 800be30:	4b1c      	ldr	r3, [pc, #112]	; (800bea4 <HAL_RCC_ClockConfig+0x3d0>)
 800be32:	6a1b      	ldr	r3, [r3, #32]
 800be34:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	691b      	ldr	r3, [r3, #16]
 800be3c:	011b      	lsls	r3, r3, #4
 800be3e:	4919      	ldr	r1, [pc, #100]	; (800bea4 <HAL_RCC_ClockConfig+0x3d0>)
 800be40:	4313      	orrs	r3, r2
 800be42:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	681b      	ldr	r3, [r3, #0]
 800be48:	f003 0310 	and.w	r3, r3, #16
 800be4c:	2b00      	cmp	r3, #0
 800be4e:	d010      	beq.n	800be72 <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	695a      	ldr	r2, [r3, #20]
 800be54:	4b13      	ldr	r3, [pc, #76]	; (800bea4 <HAL_RCC_ClockConfig+0x3d0>)
 800be56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be58:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800be5c:	429a      	cmp	r2, r3
 800be5e:	d208      	bcs.n	800be72 <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 800be60:	4b10      	ldr	r3, [pc, #64]	; (800bea4 <HAL_RCC_ClockConfig+0x3d0>)
 800be62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be64:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	695b      	ldr	r3, [r3, #20]
 800be6c:	490d      	ldr	r1, [pc, #52]	; (800bea4 <HAL_RCC_ClockConfig+0x3d0>)
 800be6e:	4313      	orrs	r3, r2
 800be70:	624b      	str	r3, [r1, #36]	; 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800be72:	f000 f821 	bl	800beb8 <HAL_RCC_GetSysClockFreq>
 800be76:	4602      	mov	r2, r0
 800be78:	4b0a      	ldr	r3, [pc, #40]	; (800bea4 <HAL_RCC_ClockConfig+0x3d0>)
 800be7a:	6a1b      	ldr	r3, [r3, #32]
 800be7c:	f003 030f 	and.w	r3, r3, #15
 800be80:	490a      	ldr	r1, [pc, #40]	; (800beac <HAL_RCC_ClockConfig+0x3d8>)
 800be82:	5ccb      	ldrb	r3, [r1, r3]
 800be84:	fa22 f303 	lsr.w	r3, r2, r3
 800be88:	4a09      	ldr	r2, [pc, #36]	; (800beb0 <HAL_RCC_ClockConfig+0x3dc>)
 800be8a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800be8c:	4b09      	ldr	r3, [pc, #36]	; (800beb4 <HAL_RCC_ClockConfig+0x3e0>)
 800be8e:	681b      	ldr	r3, [r3, #0]
 800be90:	4618      	mov	r0, r3
 800be92:	f7fa f82f 	bl	8005ef4 <HAL_InitTick>
 800be96:	4603      	mov	r3, r0
 800be98:	73fb      	strb	r3, [r7, #15]

  return status;
 800be9a:	7bfb      	ldrb	r3, [r7, #15]
}
 800be9c:	4618      	mov	r0, r3
 800be9e:	3718      	adds	r7, #24
 800bea0:	46bd      	mov	sp, r7
 800bea2:	bd80      	pop	{r7, pc}
 800bea4:	46020c00 	.word	0x46020c00
 800bea8:	40022000 	.word	0x40022000
 800beac:	08013a7c 	.word	0x08013a7c
 800beb0:	20000004 	.word	0x20000004
 800beb4:	20000008 	.word	0x20000008

0800beb8 <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800beb8:	b480      	push	{r7}
 800beba:	b08b      	sub	sp, #44	; 0x2c
 800bebc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 800bebe:	2300      	movs	r3, #0
 800bec0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 800bec2:	2300      	movs	r3, #0
 800bec4:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800bec6:	4b7b      	ldr	r3, [pc, #492]	; (800c0b4 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800bec8:	69db      	ldr	r3, [r3, #28]
 800beca:	f003 030c 	and.w	r3, r3, #12
 800bece:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800bed0:	4b78      	ldr	r3, [pc, #480]	; (800c0b4 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800bed2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bed4:	f003 0303 	and.w	r3, r3, #3
 800bed8:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800beda:	69bb      	ldr	r3, [r7, #24]
 800bedc:	2b00      	cmp	r3, #0
 800bede:	d005      	beq.n	800beec <HAL_RCC_GetSysClockFreq+0x34>
 800bee0:	69bb      	ldr	r3, [r7, #24]
 800bee2:	2b0c      	cmp	r3, #12
 800bee4:	d121      	bne.n	800bf2a <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800bee6:	697b      	ldr	r3, [r7, #20]
 800bee8:	2b01      	cmp	r3, #1
 800beea:	d11e      	bne.n	800bf2a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 800beec:	4b71      	ldr	r3, [pc, #452]	; (800c0b4 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800beee:	689b      	ldr	r3, [r3, #8]
 800bef0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800bef4:	2b00      	cmp	r3, #0
 800bef6:	d107      	bne.n	800bf08 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 800bef8:	4b6e      	ldr	r3, [pc, #440]	; (800c0b4 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800befa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800befe:	0b1b      	lsrs	r3, r3, #12
 800bf00:	f003 030f 	and.w	r3, r3, #15
 800bf04:	627b      	str	r3, [r7, #36]	; 0x24
 800bf06:	e005      	b.n	800bf14 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 800bf08:	4b6a      	ldr	r3, [pc, #424]	; (800c0b4 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800bf0a:	689b      	ldr	r3, [r3, #8]
 800bf0c:	0f1b      	lsrs	r3, r3, #28
 800bf0e:	f003 030f 	and.w	r3, r3, #15
 800bf12:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800bf14:	4a68      	ldr	r2, [pc, #416]	; (800c0b8 <HAL_RCC_GetSysClockFreq+0x200>)
 800bf16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bf1c:	627b      	str	r3, [r7, #36]	; 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800bf1e:	69bb      	ldr	r3, [r7, #24]
 800bf20:	2b00      	cmp	r3, #0
 800bf22:	d110      	bne.n	800bf46 <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800bf24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf26:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800bf28:	e00d      	b.n	800bf46 <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800bf2a:	4b62      	ldr	r3, [pc, #392]	; (800c0b4 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800bf2c:	69db      	ldr	r3, [r3, #28]
 800bf2e:	f003 030c 	and.w	r3, r3, #12
 800bf32:	2b04      	cmp	r3, #4
 800bf34:	d102      	bne.n	800bf3c <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800bf36:	4b61      	ldr	r3, [pc, #388]	; (800c0bc <HAL_RCC_GetSysClockFreq+0x204>)
 800bf38:	623b      	str	r3, [r7, #32]
 800bf3a:	e004      	b.n	800bf46 <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800bf3c:	69bb      	ldr	r3, [r7, #24]
 800bf3e:	2b08      	cmp	r3, #8
 800bf40:	d101      	bne.n	800bf46 <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800bf42:	4b5e      	ldr	r3, [pc, #376]	; (800c0bc <HAL_RCC_GetSysClockFreq+0x204>)
 800bf44:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800bf46:	69bb      	ldr	r3, [r7, #24]
 800bf48:	2b0c      	cmp	r3, #12
 800bf4a:	f040 80ac 	bne.w	800c0a6 <HAL_RCC_GetSysClockFreq+0x1ee>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 800bf4e:	4b59      	ldr	r3, [pc, #356]	; (800c0b4 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800bf50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bf52:	f003 0303 	and.w	r3, r3, #3
 800bf56:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 800bf58:	4b56      	ldr	r3, [pc, #344]	; (800c0b4 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800bf5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bf5c:	0a1b      	lsrs	r3, r3, #8
 800bf5e:	f003 030f 	and.w	r3, r3, #15
 800bf62:	3301      	adds	r3, #1
 800bf64:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 800bf66:	4b53      	ldr	r3, [pc, #332]	; (800c0b4 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800bf68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bf6a:	091b      	lsrs	r3, r3, #4
 800bf6c:	f003 0301 	and.w	r3, r3, #1
 800bf70:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 800bf72:	4b50      	ldr	r3, [pc, #320]	; (800c0b4 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800bf74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf76:	08db      	lsrs	r3, r3, #3
 800bf78:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800bf7c:	68ba      	ldr	r2, [r7, #8]
 800bf7e:	fb02 f303 	mul.w	r3, r2, r3
 800bf82:	ee07 3a90 	vmov	s15, r3
 800bf86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bf8a:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    if (pllm != 0U)
 800bf8e:	68fb      	ldr	r3, [r7, #12]
 800bf90:	2b00      	cmp	r3, #0
 800bf92:	f000 8086 	beq.w	800c0a2 <HAL_RCC_GetSysClockFreq+0x1ea>
    {
      switch (pllsource)
 800bf96:	693b      	ldr	r3, [r7, #16]
 800bf98:	2b02      	cmp	r3, #2
 800bf9a:	d003      	beq.n	800bfa4 <HAL_RCC_GetSysClockFreq+0xec>
 800bf9c:	693b      	ldr	r3, [r7, #16]
 800bf9e:	2b03      	cmp	r3, #3
 800bfa0:	d022      	beq.n	800bfe8 <HAL_RCC_GetSysClockFreq+0x130>
 800bfa2:	e043      	b.n	800c02c <HAL_RCC_GetSysClockFreq+0x174>
      {
        case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800bfa4:	68fb      	ldr	r3, [r7, #12]
 800bfa6:	ee07 3a90 	vmov	s15, r3
 800bfaa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bfae:	eddf 6a44 	vldr	s13, [pc, #272]	; 800c0c0 <HAL_RCC_GetSysClockFreq+0x208>
 800bfb2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bfb6:	4b3f      	ldr	r3, [pc, #252]	; (800c0b4 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800bfb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bfba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bfbe:	ee07 3a90 	vmov	s15, r3
 800bfc2:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 800bfc6:	ed97 6a01 	vldr	s12, [r7, #4]
 800bfca:	eddf 5a3e 	vldr	s11, [pc, #248]	; 800c0c4 <HAL_RCC_GetSysClockFreq+0x20c>
 800bfce:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800bfd2:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 800bfd6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bfda:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800bfde:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bfe2:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 800bfe6:	e046      	b.n	800c076 <HAL_RCC_GetSysClockFreq+0x1be>

        case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800bfe8:	68fb      	ldr	r3, [r7, #12]
 800bfea:	ee07 3a90 	vmov	s15, r3
 800bfee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bff2:	eddf 6a33 	vldr	s13, [pc, #204]	; 800c0c0 <HAL_RCC_GetSysClockFreq+0x208>
 800bff6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bffa:	4b2e      	ldr	r3, [pc, #184]	; (800c0b4 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800bffc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bffe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c002:	ee07 3a90 	vmov	s15, r3
 800c006:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 800c00a:	ed97 6a01 	vldr	s12, [r7, #4]
 800c00e:	eddf 5a2d 	vldr	s11, [pc, #180]	; 800c0c4 <HAL_RCC_GetSysClockFreq+0x20c>
 800c012:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800c016:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 800c01a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c01e:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800c022:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c026:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 800c02a:	e024      	b.n	800c076 <HAL_RCC_GetSysClockFreq+0x1be>

        case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        default:
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800c02c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c02e:	ee07 3a90 	vmov	s15, r3
 800c032:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c036:	68fb      	ldr	r3, [r7, #12]
 800c038:	ee07 3a90 	vmov	s15, r3
 800c03c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c040:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c044:	4b1b      	ldr	r3, [pc, #108]	; (800c0b4 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800c046:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c048:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c04c:	ee07 3a90 	vmov	s15, r3
 800c050:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 800c054:	ed97 6a01 	vldr	s12, [r7, #4]
 800c058:	eddf 5a1a 	vldr	s11, [pc, #104]	; 800c0c4 <HAL_RCC_GetSysClockFreq+0x20c>
 800c05c:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800c060:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 800c064:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c068:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800c06c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c070:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 800c074:	bf00      	nop
      }

      pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 800c076:	4b0f      	ldr	r3, [pc, #60]	; (800c0b4 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800c078:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c07a:	0e1b      	lsrs	r3, r3, #24
 800c07c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c080:	3301      	adds	r3, #1
 800c082:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 800c084:	683b      	ldr	r3, [r7, #0]
 800c086:	ee07 3a90 	vmov	s15, r3
 800c08a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800c08e:	edd7 6a07 	vldr	s13, [r7, #28]
 800c092:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c096:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c09a:	ee17 3a90 	vmov	r3, s15
 800c09e:	623b      	str	r3, [r7, #32]
 800c0a0:	e001      	b.n	800c0a6 <HAL_RCC_GetSysClockFreq+0x1ee>
    }
    else
    {
      sysclockfreq = 0;
 800c0a2:	2300      	movs	r3, #0
 800c0a4:	623b      	str	r3, [r7, #32]
    }
  }

  return sysclockfreq;
 800c0a6:	6a3b      	ldr	r3, [r7, #32]
}
 800c0a8:	4618      	mov	r0, r3
 800c0aa:	372c      	adds	r7, #44	; 0x2c
 800c0ac:	46bd      	mov	sp, r7
 800c0ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0b2:	4770      	bx	lr
 800c0b4:	46020c00 	.word	0x46020c00
 800c0b8:	08013a94 	.word	0x08013a94
 800c0bc:	00f42400 	.word	0x00f42400
 800c0c0:	4b742400 	.word	0x4b742400
 800c0c4:	46000000 	.word	0x46000000

0800c0c8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800c0c8:	b580      	push	{r7, lr}
 800c0ca:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800c0cc:	f7ff fef4 	bl	800beb8 <HAL_RCC_GetSysClockFreq>
 800c0d0:	4602      	mov	r2, r0
 800c0d2:	4b07      	ldr	r3, [pc, #28]	; (800c0f0 <HAL_RCC_GetHCLKFreq+0x28>)
 800c0d4:	6a1b      	ldr	r3, [r3, #32]
 800c0d6:	f003 030f 	and.w	r3, r3, #15
 800c0da:	4906      	ldr	r1, [pc, #24]	; (800c0f4 <HAL_RCC_GetHCLKFreq+0x2c>)
 800c0dc:	5ccb      	ldrb	r3, [r1, r3]
 800c0de:	fa22 f303 	lsr.w	r3, r2, r3
 800c0e2:	4a05      	ldr	r2, [pc, #20]	; (800c0f8 <HAL_RCC_GetHCLKFreq+0x30>)
 800c0e4:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 800c0e6:	4b04      	ldr	r3, [pc, #16]	; (800c0f8 <HAL_RCC_GetHCLKFreq+0x30>)
 800c0e8:	681b      	ldr	r3, [r3, #0]
}
 800c0ea:	4618      	mov	r0, r3
 800c0ec:	bd80      	pop	{r7, pc}
 800c0ee:	bf00      	nop
 800c0f0:	46020c00 	.word	0x46020c00
 800c0f4:	08013a7c 	.word	0x08013a7c
 800c0f8:	20000004 	.word	0x20000004

0800c0fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800c0fc:	b580      	push	{r7, lr}
 800c0fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 800c100:	f7ff ffe2 	bl	800c0c8 <HAL_RCC_GetHCLKFreq>
 800c104:	4602      	mov	r2, r0
 800c106:	4b05      	ldr	r3, [pc, #20]	; (800c11c <HAL_RCC_GetPCLK1Freq+0x20>)
 800c108:	6a1b      	ldr	r3, [r3, #32]
 800c10a:	091b      	lsrs	r3, r3, #4
 800c10c:	f003 0307 	and.w	r3, r3, #7
 800c110:	4903      	ldr	r1, [pc, #12]	; (800c120 <HAL_RCC_GetPCLK1Freq+0x24>)
 800c112:	5ccb      	ldrb	r3, [r1, r3]
 800c114:	fa22 f303 	lsr.w	r3, r2, r3
}
 800c118:	4618      	mov	r0, r3
 800c11a:	bd80      	pop	{r7, pc}
 800c11c:	46020c00 	.word	0x46020c00
 800c120:	08013a8c 	.word	0x08013a8c

0800c124 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800c124:	b580      	push	{r7, lr}
 800c126:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]);
 800c128:	f7ff ffce 	bl	800c0c8 <HAL_RCC_GetHCLKFreq>
 800c12c:	4602      	mov	r2, r0
 800c12e:	4b05      	ldr	r3, [pc, #20]	; (800c144 <HAL_RCC_GetPCLK2Freq+0x20>)
 800c130:	6a1b      	ldr	r3, [r3, #32]
 800c132:	0a1b      	lsrs	r3, r3, #8
 800c134:	f003 0307 	and.w	r3, r3, #7
 800c138:	4903      	ldr	r1, [pc, #12]	; (800c148 <HAL_RCC_GetPCLK2Freq+0x24>)
 800c13a:	5ccb      	ldrb	r3, [r1, r3]
 800c13c:	fa22 f303 	lsr.w	r3, r2, r3
}
 800c140:	4618      	mov	r0, r3
 800c142:	bd80      	pop	{r7, pc}
 800c144:	46020c00 	.word	0x46020c00
 800c148:	08013a8c 	.word	0x08013a8c

0800c14c <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 800c14c:	b580      	push	{r7, lr}
 800c14e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR3 & RCC_CFGR3_PPRE3) >> RCC_CFGR3_PPRE3_Pos]);
 800c150:	f7ff ffba 	bl	800c0c8 <HAL_RCC_GetHCLKFreq>
 800c154:	4602      	mov	r2, r0
 800c156:	4b05      	ldr	r3, [pc, #20]	; (800c16c <HAL_RCC_GetPCLK3Freq+0x20>)
 800c158:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c15a:	091b      	lsrs	r3, r3, #4
 800c15c:	f003 0307 	and.w	r3, r3, #7
 800c160:	4903      	ldr	r1, [pc, #12]	; (800c170 <HAL_RCC_GetPCLK3Freq+0x24>)
 800c162:	5ccb      	ldrb	r3, [r1, r3]
 800c164:	fa22 f303 	lsr.w	r3, r2, r3
}
 800c168:	4618      	mov	r0, r3
 800c16a:	bd80      	pop	{r7, pc}
 800c16c:	46020c00 	.word	0x46020c00
 800c170:	08013a8c 	.word	0x08013a8c

0800c174 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *pRCC_ClkInitStruct, uint32_t *pFLatency)
{
 800c174:	b480      	push	{r7}
 800c176:	b083      	sub	sp, #12
 800c178:	af00      	add	r7, sp, #0
 800c17a:	6078      	str	r0, [r7, #4]
 800c17c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(pRCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  pRCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | \
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	221f      	movs	r2, #31
 800c182:	601a      	str	r2, [r3, #0]
                                  RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_PCLK3;

  /* Get the SYSCLK configuration --------------------------------------------*/
  pRCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR1 & RCC_CFGR1_SW);
 800c184:	4b15      	ldr	r3, [pc, #84]	; (800c1dc <HAL_RCC_GetClockConfig+0x68>)
 800c186:	69db      	ldr	r3, [r3, #28]
 800c188:	f003 0203 	and.w	r2, r3, #3
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR2 & RCC_CFGR2_HPRE);
 800c190:	4b12      	ldr	r3, [pc, #72]	; (800c1dc <HAL_RCC_GetClockConfig+0x68>)
 800c192:	6a1b      	ldr	r3, [r3, #32]
 800c194:	f003 020f 	and.w	r2, r3, #15
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR2 & RCC_CFGR2_PPRE1);
 800c19c:	4b0f      	ldr	r3, [pc, #60]	; (800c1dc <HAL_RCC_GetClockConfig+0x68>)
 800c19e:	6a1b      	ldr	r3, [r3, #32]
 800c1a0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4);
 800c1a8:	4b0c      	ldr	r3, [pc, #48]	; (800c1dc <HAL_RCC_GetClockConfig+0x68>)
 800c1aa:	6a1b      	ldr	r3, [r3, #32]
 800c1ac:	091b      	lsrs	r3, r3, #4
 800c1ae:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	611a      	str	r2, [r3, #16]

  /* Get the APB3 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->CFGR3 & RCC_CFGR3_PPRE3);
 800c1b6:	4b09      	ldr	r3, [pc, #36]	; (800c1dc <HAL_RCC_GetClockConfig+0x68>)
 800c1b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c1ba:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800c1be:	687b      	ldr	r3, [r7, #4]
 800c1c0:	615a      	str	r2, [r3, #20]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800c1c2:	4b07      	ldr	r3, [pc, #28]	; (800c1e0 <HAL_RCC_GetClockConfig+0x6c>)
 800c1c4:	681b      	ldr	r3, [r3, #0]
 800c1c6:	f003 020f 	and.w	r2, r3, #15
 800c1ca:	683b      	ldr	r3, [r7, #0]
 800c1cc:	601a      	str	r2, [r3, #0]
}
 800c1ce:	bf00      	nop
 800c1d0:	370c      	adds	r7, #12
 800c1d2:	46bd      	mov	sp, r7
 800c1d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1d8:	4770      	bx	lr
 800c1da:	bf00      	nop
 800c1dc:	46020c00 	.word	0x46020c00
 800c1e0:	40022000 	.word	0x40022000

0800c1e4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800c1e4:	b580      	push	{r7, lr}
 800c1e6:	b086      	sub	sp, #24
 800c1e8:	af00      	add	r7, sp, #0
 800c1ea:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 800c1ec:	4b3e      	ldr	r3, [pc, #248]	; (800c2e8 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800c1ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c1f2:	f003 0304 	and.w	r3, r3, #4
 800c1f6:	2b00      	cmp	r3, #0
 800c1f8:	d003      	beq.n	800c202 <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800c1fa:	f7fe fd17 	bl	800ac2c <HAL_PWREx_GetVoltageRange>
 800c1fe:	6178      	str	r0, [r7, #20]
 800c200:	e019      	b.n	800c236 <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800c202:	4b39      	ldr	r3, [pc, #228]	; (800c2e8 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800c204:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c208:	4a37      	ldr	r2, [pc, #220]	; (800c2e8 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800c20a:	f043 0304 	orr.w	r3, r3, #4
 800c20e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800c212:	4b35      	ldr	r3, [pc, #212]	; (800c2e8 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800c214:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c218:	f003 0304 	and.w	r3, r3, #4
 800c21c:	60fb      	str	r3, [r7, #12]
 800c21e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800c220:	f7fe fd04 	bl	800ac2c <HAL_PWREx_GetVoltageRange>
 800c224:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800c226:	4b30      	ldr	r3, [pc, #192]	; (800c2e8 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800c228:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c22c:	4a2e      	ldr	r2, [pc, #184]	; (800c2e8 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800c22e:	f023 0304 	bic.w	r3, r3, #4
 800c232:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 800c236:	697b      	ldr	r3, [r7, #20]
 800c238:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800c23c:	d003      	beq.n	800c246 <RCC_SetFlashLatencyFromMSIRange+0x62>
 800c23e:	697b      	ldr	r3, [r7, #20]
 800c240:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c244:	d109      	bne.n	800c25a <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c24c:	d202      	bcs.n	800c254 <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 800c24e:	2301      	movs	r3, #1
 800c250:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 800c252:	e033      	b.n	800c2bc <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 800c254:	2300      	movs	r3, #0
 800c256:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 800c258:	e030      	b.n	800c2bc <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c260:	d208      	bcs.n	800c274 <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 800c262:	697b      	ldr	r3, [r7, #20]
 800c264:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c268:	d102      	bne.n	800c270 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 800c26a:	2303      	movs	r3, #3
 800c26c:	613b      	str	r3, [r7, #16]
 800c26e:	e025      	b.n	800c2bc <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 800c270:	2301      	movs	r3, #1
 800c272:	e035      	b.n	800c2e0 <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c27a:	d90f      	bls.n	800c29c <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 800c27c:	697b      	ldr	r3, [r7, #20]
 800c27e:	2b00      	cmp	r3, #0
 800c280:	d109      	bne.n	800c296 <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800c288:	d902      	bls.n	800c290 <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 800c28a:	2300      	movs	r3, #0
 800c28c:	613b      	str	r3, [r7, #16]
 800c28e:	e015      	b.n	800c2bc <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 800c290:	2301      	movs	r3, #1
 800c292:	613b      	str	r3, [r7, #16]
 800c294:	e012      	b.n	800c2bc <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 800c296:	2300      	movs	r3, #0
 800c298:	613b      	str	r3, [r7, #16]
 800c29a:	e00f      	b.n	800c2bc <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c2a2:	d109      	bne.n	800c2b8 <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 800c2a4:	697b      	ldr	r3, [r7, #20]
 800c2a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c2aa:	d102      	bne.n	800c2b2 <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 800c2ac:	2301      	movs	r3, #1
 800c2ae:	613b      	str	r3, [r7, #16]
 800c2b0:	e004      	b.n	800c2bc <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 800c2b2:	2302      	movs	r3, #2
 800c2b4:	613b      	str	r3, [r7, #16]
 800c2b6:	e001      	b.n	800c2bc <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 800c2b8:	2301      	movs	r3, #1
 800c2ba:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800c2bc:	4b0b      	ldr	r3, [pc, #44]	; (800c2ec <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800c2be:	681b      	ldr	r3, [r3, #0]
 800c2c0:	f023 020f 	bic.w	r2, r3, #15
 800c2c4:	4909      	ldr	r1, [pc, #36]	; (800c2ec <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800c2c6:	693b      	ldr	r3, [r7, #16]
 800c2c8:	4313      	orrs	r3, r2
 800c2ca:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 800c2cc:	4b07      	ldr	r3, [pc, #28]	; (800c2ec <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800c2ce:	681b      	ldr	r3, [r3, #0]
 800c2d0:	f003 030f 	and.w	r3, r3, #15
 800c2d4:	693a      	ldr	r2, [r7, #16]
 800c2d6:	429a      	cmp	r2, r3
 800c2d8:	d001      	beq.n	800c2de <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 800c2da:	2301      	movs	r3, #1
 800c2dc:	e000      	b.n	800c2e0 <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 800c2de:	2300      	movs	r3, #0
}
 800c2e0:	4618      	mov	r0, r3
 800c2e2:	3718      	adds	r7, #24
 800c2e4:	46bd      	mov	sp, r7
 800c2e6:	bd80      	pop	{r7, pc}
 800c2e8:	46020c00 	.word	0x46020c00
 800c2ec:	40022000 	.word	0x40022000

0800c2f0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 800c2f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c2f4:	b0ba      	sub	sp, #232	; 0xe8
 800c2f6:	af00      	add	r7, sp, #0
 800c2f8:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800c2fc:	2300      	movs	r3, #0
 800c2fe:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800c302:	2300      	movs	r3, #0
 800c304:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800c308:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800c30c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c310:	f002 0401 	and.w	r4, r2, #1
 800c314:	2500      	movs	r5, #0
 800c316:	ea54 0305 	orrs.w	r3, r4, r5
 800c31a:	d00b      	beq.n	800c334 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 800c31c:	4bcb      	ldr	r3, [pc, #812]	; (800c64c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800c31e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800c322:	f023 0103 	bic.w	r1, r3, #3
 800c326:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800c32a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c32c:	4ac7      	ldr	r2, [pc, #796]	; (800c64c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800c32e:	430b      	orrs	r3, r1
 800c330:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800c334:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800c338:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c33c:	f002 0802 	and.w	r8, r2, #2
 800c340:	f04f 0900 	mov.w	r9, #0
 800c344:	ea58 0309 	orrs.w	r3, r8, r9
 800c348:	d00b      	beq.n	800c362 <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 800c34a:	4bc0      	ldr	r3, [pc, #768]	; (800c64c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800c34c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800c350:	f023 010c 	bic.w	r1, r3, #12
 800c354:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800c358:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c35a:	4abc      	ldr	r2, [pc, #752]	; (800c64c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800c35c:	430b      	orrs	r3, r1
 800c35e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800c362:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800c366:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c36a:	f002 0a04 	and.w	sl, r2, #4
 800c36e:	f04f 0b00 	mov.w	fp, #0
 800c372:	ea5a 030b 	orrs.w	r3, sl, fp
 800c376:	d00b      	beq.n	800c390 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 800c378:	4bb4      	ldr	r3, [pc, #720]	; (800c64c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800c37a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800c37e:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 800c382:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800c386:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c388:	4ab0      	ldr	r2, [pc, #704]	; (800c64c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800c38a:	430b      	orrs	r3, r1
 800c38c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800c390:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800c394:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c398:	f002 0308 	and.w	r3, r2, #8
 800c39c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800c3a0:	2300      	movs	r3, #0
 800c3a2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800c3a6:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800c3aa:	460b      	mov	r3, r1
 800c3ac:	4313      	orrs	r3, r2
 800c3ae:	d00b      	beq.n	800c3c8 <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 800c3b0:	4ba6      	ldr	r3, [pc, #664]	; (800c64c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800c3b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800c3b6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800c3ba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800c3be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c3c0:	4aa2      	ldr	r2, [pc, #648]	; (800c64c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800c3c2:	430b      	orrs	r3, r1
 800c3c4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800c3c8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800c3cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3d0:	f002 0310 	and.w	r3, r2, #16
 800c3d4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800c3d8:	2300      	movs	r3, #0
 800c3da:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800c3de:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800c3e2:	460b      	mov	r3, r1
 800c3e4:	4313      	orrs	r3, r2
 800c3e6:	d00b      	beq.n	800c400 <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 800c3e8:	4b98      	ldr	r3, [pc, #608]	; (800c64c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800c3ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800c3ee:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800c3f2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800c3f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c3f8:	4a94      	ldr	r2, [pc, #592]	; (800c64c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800c3fa:	430b      	orrs	r3, r1
 800c3fc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
    __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
  }
#endif /* USART6 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800c400:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800c404:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c408:	f002 0320 	and.w	r3, r2, #32
 800c40c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800c410:	2300      	movs	r3, #0
 800c412:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800c416:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800c41a:	460b      	mov	r3, r1
 800c41c:	4313      	orrs	r3, r2
 800c41e:	d00b      	beq.n	800c438 <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 800c420:	4b8a      	ldr	r3, [pc, #552]	; (800c64c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800c422:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800c426:	f023 0107 	bic.w	r1, r3, #7
 800c42a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800c42e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c430:	4a86      	ldr	r2, [pc, #536]	; (800c64c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800c432:	430b      	orrs	r3, r1
 800c434:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800c438:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800c43c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c440:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800c444:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800c448:	2300      	movs	r3, #0
 800c44a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800c44e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800c452:	460b      	mov	r3, r1
 800c454:	4313      	orrs	r3, r2
 800c456:	d00b      	beq.n	800c470 <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 800c458:	4b7c      	ldr	r3, [pc, #496]	; (800c64c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800c45a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800c45e:	f423 6140 	bic.w	r1, r3, #3072	; 0xc00
 800c462:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800c466:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c468:	4a78      	ldr	r2, [pc, #480]	; (800c64c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800c46a:	430b      	orrs	r3, r1
 800c46c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800c470:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800c474:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c478:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800c47c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800c480:	2300      	movs	r3, #0
 800c482:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800c486:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800c48a:	460b      	mov	r3, r1
 800c48c:	4313      	orrs	r3, r2
 800c48e:	d00b      	beq.n	800c4a8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 800c490:	4b6e      	ldr	r3, [pc, #440]	; (800c64c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800c492:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800c496:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800c49a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800c49e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c4a0:	4a6a      	ldr	r2, [pc, #424]	; (800c64c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800c4a2:	430b      	orrs	r3, r1
 800c4a4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800c4a8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800c4ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4b0:	f402 7380 	and.w	r3, r2, #256	; 0x100
 800c4b4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800c4b8:	2300      	movs	r3, #0
 800c4ba:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800c4be:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 800c4c2:	460b      	mov	r3, r1
 800c4c4:	4313      	orrs	r3, r2
 800c4c6:	d00b      	beq.n	800c4e0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 800c4c8:	4b60      	ldr	r3, [pc, #384]	; (800c64c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800c4ca:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800c4ce:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800c4d2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800c4d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c4d8:	4a5c      	ldr	r2, [pc, #368]	; (800c64c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800c4da:	430b      	orrs	r3, r1
 800c4dc:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800c4e0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800c4e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4e8:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 800c4ec:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800c4f0:	2300      	movs	r3, #0
 800c4f2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800c4f6:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800c4fa:	460b      	mov	r3, r1
 800c4fc:	4313      	orrs	r3, r2
 800c4fe:	d00b      	beq.n	800c518 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 800c500:	4b52      	ldr	r3, [pc, #328]	; (800c64c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800c502:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800c506:	f423 4140 	bic.w	r1, r3, #49152	; 0xc000
 800c50a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800c50e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c510:	4a4e      	ldr	r2, [pc, #312]	; (800c64c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800c512:	430b      	orrs	r3, r1
 800c514:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
    __HAL_RCC_I2C6_CONFIG(pPeriphClkInit->I2c6ClockSelection);
  }
#endif /* I2C6 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800c518:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800c51c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c520:	f402 7300 	and.w	r3, r2, #512	; 0x200
 800c524:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800c528:	2300      	movs	r3, #0
 800c52a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800c52e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800c532:	460b      	mov	r3, r1
 800c534:	4313      	orrs	r3, r2
 800c536:	d00b      	beq.n	800c550 <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 800c538:	4b44      	ldr	r3, [pc, #272]	; (800c64c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800c53a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800c53e:	f423 6140 	bic.w	r1, r3, #3072	; 0xc00
 800c542:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800c546:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c548:	4a40      	ldr	r2, [pc, #256]	; (800c64c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800c54a:	430b      	orrs	r3, r1
 800c54c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800c550:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800c554:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c558:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 800c55c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800c560:	2300      	movs	r3, #0
 800c562:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800c566:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800c56a:	460b      	mov	r3, r1
 800c56c:	4313      	orrs	r3, r2
 800c56e:	d00b      	beq.n	800c588 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 800c570:	4b36      	ldr	r3, [pc, #216]	; (800c64c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800c572:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800c576:	f423 2140 	bic.w	r1, r3, #786432	; 0xc0000
 800c57a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800c57e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c580:	4a32      	ldr	r2, [pc, #200]	; (800c64c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800c582:	430b      	orrs	r3, r1
 800c584:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 800c588:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800c58c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c590:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800c594:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800c598:	2300      	movs	r3, #0
 800c59a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800c59e:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800c5a2:	460b      	mov	r3, r1
 800c5a4:	4313      	orrs	r3, r2
 800c5a6:	d00c      	beq.n	800c5c2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 800c5a8:	4b28      	ldr	r3, [pc, #160]	; (800c64c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800c5aa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800c5ae:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800c5b2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800c5b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c5ba:	4a24      	ldr	r2, [pc, #144]	; (800c64c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800c5bc:	430b      	orrs	r3, r1
 800c5be:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800c5c2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800c5c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5ca:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800c5ce:	67bb      	str	r3, [r7, #120]	; 0x78
 800c5d0:	2300      	movs	r3, #0
 800c5d2:	67fb      	str	r3, [r7, #124]	; 0x7c
 800c5d4:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800c5d8:	460b      	mov	r3, r1
 800c5da:	4313      	orrs	r3, r2
 800c5dc:	d04f      	beq.n	800c67e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 800c5de:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800c5e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c5e6:	2b80      	cmp	r3, #128	; 0x80
 800c5e8:	d02d      	beq.n	800c646 <HAL_RCCEx_PeriphCLKConfig+0x356>
 800c5ea:	2b80      	cmp	r3, #128	; 0x80
 800c5ec:	d827      	bhi.n	800c63e <HAL_RCCEx_PeriphCLKConfig+0x34e>
 800c5ee:	2b60      	cmp	r3, #96	; 0x60
 800c5f0:	d02e      	beq.n	800c650 <HAL_RCCEx_PeriphCLKConfig+0x360>
 800c5f2:	2b60      	cmp	r3, #96	; 0x60
 800c5f4:	d823      	bhi.n	800c63e <HAL_RCCEx_PeriphCLKConfig+0x34e>
 800c5f6:	2b40      	cmp	r3, #64	; 0x40
 800c5f8:	d006      	beq.n	800c608 <HAL_RCCEx_PeriphCLKConfig+0x318>
 800c5fa:	2b40      	cmp	r3, #64	; 0x40
 800c5fc:	d81f      	bhi.n	800c63e <HAL_RCCEx_PeriphCLKConfig+0x34e>
 800c5fe:	2b00      	cmp	r3, #0
 800c600:	d009      	beq.n	800c616 <HAL_RCCEx_PeriphCLKConfig+0x326>
 800c602:	2b20      	cmp	r3, #32
 800c604:	d011      	beq.n	800c62a <HAL_RCCEx_PeriphCLKConfig+0x33a>
 800c606:	e01a      	b.n	800c63e <HAL_RCCEx_PeriphCLKConfig+0x34e>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800c608:	4b10      	ldr	r3, [pc, #64]	; (800c64c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800c60a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c60c:	4a0f      	ldr	r2, [pc, #60]	; (800c64c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800c60e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c612:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 800c614:	e01d      	b.n	800c652 <HAL_RCCEx_PeriphCLKConfig+0x362>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800c616:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800c61a:	3308      	adds	r3, #8
 800c61c:	4618      	mov	r0, r3
 800c61e:	f002 f981 	bl	800e924 <RCCEx_PLL2_Config>
 800c622:	4603      	mov	r3, r0
 800c624:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* SAI1 clock source config set later after clock selection check */
        break;
 800c628:	e013      	b.n	800c652 <HAL_RCCEx_PeriphCLKConfig+0x362>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800c62a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800c62e:	332c      	adds	r3, #44	; 0x2c
 800c630:	4618      	mov	r0, r3
 800c632:	f002 fa0f 	bl	800ea54 <RCCEx_PLL3_Config>
 800c636:	4603      	mov	r3, r0
 800c638:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* SAI1 clock source config set later after clock selection check */
        break;
 800c63c:	e009      	b.n	800c652 <HAL_RCCEx_PeriphCLKConfig+0x362>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c63e:	2301      	movs	r3, #1
 800c640:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 800c644:	e005      	b.n	800c652 <HAL_RCCEx_PeriphCLKConfig+0x362>
        break;
 800c646:	bf00      	nop
 800c648:	e003      	b.n	800c652 <HAL_RCCEx_PeriphCLKConfig+0x362>
 800c64a:	bf00      	nop
 800c64c:	46020c00 	.word	0x46020c00
        break;
 800c650:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c652:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800c656:	2b00      	cmp	r3, #0
 800c658:	d10d      	bne.n	800c676 <HAL_RCCEx_PeriphCLKConfig+0x386>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 800c65a:	4bb6      	ldr	r3, [pc, #728]	; (800c934 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800c65c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800c660:	f023 01e0 	bic.w	r1, r3, #224	; 0xe0
 800c664:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800c668:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c66c:	4ab1      	ldr	r2, [pc, #708]	; (800c934 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800c66e:	430b      	orrs	r3, r1
 800c670:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 800c674:	e003      	b.n	800c67e <HAL_RCCEx_PeriphCLKConfig+0x38e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c676:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800c67a:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800c67e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800c682:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c686:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 800c68a:	673b      	str	r3, [r7, #112]	; 0x70
 800c68c:	2300      	movs	r3, #0
 800c68e:	677b      	str	r3, [r7, #116]	; 0x74
 800c690:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800c694:	460b      	mov	r3, r1
 800c696:	4313      	orrs	r3, r2
 800c698:	d053      	beq.n	800c742 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 800c69a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800c69e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c6a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c6a6:	d033      	beq.n	800c710 <HAL_RCCEx_PeriphCLKConfig+0x420>
 800c6a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c6ac:	d82c      	bhi.n	800c708 <HAL_RCCEx_PeriphCLKConfig+0x418>
 800c6ae:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c6b2:	d02f      	beq.n	800c714 <HAL_RCCEx_PeriphCLKConfig+0x424>
 800c6b4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c6b8:	d826      	bhi.n	800c708 <HAL_RCCEx_PeriphCLKConfig+0x418>
 800c6ba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c6be:	d008      	beq.n	800c6d2 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
 800c6c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c6c4:	d820      	bhi.n	800c708 <HAL_RCCEx_PeriphCLKConfig+0x418>
 800c6c6:	2b00      	cmp	r3, #0
 800c6c8:	d00a      	beq.n	800c6e0 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
 800c6ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c6ce:	d011      	beq.n	800c6f4 <HAL_RCCEx_PeriphCLKConfig+0x404>
 800c6d0:	e01a      	b.n	800c708 <HAL_RCCEx_PeriphCLKConfig+0x418>
    {
      case RCC_SAI2CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800c6d2:	4b98      	ldr	r3, [pc, #608]	; (800c934 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800c6d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c6d6:	4a97      	ldr	r2, [pc, #604]	; (800c934 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800c6d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c6dc:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 800c6de:	e01a      	b.n	800c716 <HAL_RCCEx_PeriphCLKConfig+0x426>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800c6e0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800c6e4:	3308      	adds	r3, #8
 800c6e6:	4618      	mov	r0, r3
 800c6e8:	f002 f91c 	bl	800e924 <RCCEx_PLL2_Config>
 800c6ec:	4603      	mov	r3, r0
 800c6ee:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* SAI2 clock source config set later after clock selection check */
        break;
 800c6f2:	e010      	b.n	800c716 <HAL_RCCEx_PeriphCLKConfig+0x426>

      case RCC_SAI2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800c6f4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800c6f8:	332c      	adds	r3, #44	; 0x2c
 800c6fa:	4618      	mov	r0, r3
 800c6fc:	f002 f9aa 	bl	800ea54 <RCCEx_PLL3_Config>
 800c700:	4603      	mov	r3, r0
 800c702:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* SAI2 clock source config set later after clock selection check */
        break;
 800c706:	e006      	b.n	800c716 <HAL_RCCEx_PeriphCLKConfig+0x426>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c708:	2301      	movs	r3, #1
 800c70a:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 800c70e:	e002      	b.n	800c716 <HAL_RCCEx_PeriphCLKConfig+0x426>
        break;
 800c710:	bf00      	nop
 800c712:	e000      	b.n	800c716 <HAL_RCCEx_PeriphCLKConfig+0x426>
        break;
 800c714:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c716:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800c71a:	2b00      	cmp	r3, #0
 800c71c:	d10d      	bne.n	800c73a <HAL_RCCEx_PeriphCLKConfig+0x44a>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 800c71e:	4b85      	ldr	r3, [pc, #532]	; (800c934 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800c720:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800c724:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 800c728:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800c72c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c730:	4a80      	ldr	r2, [pc, #512]	; (800c934 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800c732:	430b      	orrs	r3, r1
 800c734:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 800c738:	e003      	b.n	800c742 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c73a:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800c73e:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 800c742:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800c746:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c74a:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 800c74e:	66bb      	str	r3, [r7, #104]	; 0x68
 800c750:	2300      	movs	r3, #0
 800c752:	66fb      	str	r3, [r7, #108]	; 0x6c
 800c754:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800c758:	460b      	mov	r3, r1
 800c75a:	4313      	orrs	r3, r2
 800c75c:	d046      	beq.n	800c7ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 800c75e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800c762:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800c766:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800c76a:	d028      	beq.n	800c7be <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 800c76c:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800c770:	d821      	bhi.n	800c7b6 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 800c772:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c776:	d022      	beq.n	800c7be <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 800c778:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c77c:	d81b      	bhi.n	800c7b6 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 800c77e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800c782:	d01c      	beq.n	800c7be <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 800c784:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800c788:	d815      	bhi.n	800c7b6 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 800c78a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c78e:	d008      	beq.n	800c7a2 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 800c790:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c794:	d80f      	bhi.n	800c7b6 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 800c796:	2b00      	cmp	r3, #0
 800c798:	d011      	beq.n	800c7be <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 800c79a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c79e:	d00e      	beq.n	800c7be <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 800c7a0:	e009      	b.n	800c7b6 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800c7a2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800c7a6:	3308      	adds	r3, #8
 800c7a8:	4618      	mov	r0, r3
 800c7aa:	f002 f8bb 	bl	800e924 <RCCEx_PLL2_Config>
 800c7ae:	4603      	mov	r3, r0
 800c7b0:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 800c7b4:	e004      	b.n	800c7c0 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800c7b6:	2301      	movs	r3, #1
 800c7b8:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 800c7bc:	e000      	b.n	800c7c0 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
        break;
 800c7be:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c7c0:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800c7c4:	2b00      	cmp	r3, #0
 800c7c6:	d10d      	bne.n	800c7e4 <HAL_RCCEx_PeriphCLKConfig+0x4f4>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 800c7c8:	4b5a      	ldr	r3, [pc, #360]	; (800c934 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800c7ca:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800c7ce:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 800c7d2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800c7d6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800c7da:	4a56      	ldr	r2, [pc, #344]	; (800c934 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800c7dc:	430b      	orrs	r3, r1
 800c7de:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800c7e2:	e003      	b.n	800c7ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c7e4:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800c7e8:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 800c7ec:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800c7f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7f4:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800c7f8:	663b      	str	r3, [r7, #96]	; 0x60
 800c7fa:	2300      	movs	r3, #0
 800c7fc:	667b      	str	r3, [r7, #100]	; 0x64
 800c7fe:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800c802:	460b      	mov	r3, r1
 800c804:	4313      	orrs	r3, r2
 800c806:	d03f      	beq.n	800c888 <HAL_RCCEx_PeriphCLKConfig+0x598>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 800c808:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800c80c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c810:	2b04      	cmp	r3, #4
 800c812:	d81e      	bhi.n	800c852 <HAL_RCCEx_PeriphCLKConfig+0x562>
 800c814:	a201      	add	r2, pc, #4	; (adr r2, 800c81c <HAL_RCCEx_PeriphCLKConfig+0x52c>)
 800c816:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c81a:	bf00      	nop
 800c81c:	0800c85b 	.word	0x0800c85b
 800c820:	0800c831 	.word	0x0800c831
 800c824:	0800c83f 	.word	0x0800c83f
 800c828:	0800c85b 	.word	0x0800c85b
 800c82c:	0800c85b 	.word	0x0800c85b
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800c830:	4b40      	ldr	r3, [pc, #256]	; (800c934 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800c832:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c834:	4a3f      	ldr	r2, [pc, #252]	; (800c934 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800c836:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c83a:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 800c83c:	e00e      	b.n	800c85c <HAL_RCCEx_PeriphCLKConfig+0x56c>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800c83e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800c842:	332c      	adds	r3, #44	; 0x2c
 800c844:	4618      	mov	r0, r3
 800c846:	f002 f905 	bl	800ea54 <RCCEx_PLL3_Config>
 800c84a:	4603      	mov	r3, r0
 800c84c:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 800c850:	e004      	b.n	800c85c <HAL_RCCEx_PeriphCLKConfig+0x56c>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800c852:	2301      	movs	r3, #1
 800c854:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 800c858:	e000      	b.n	800c85c <HAL_RCCEx_PeriphCLKConfig+0x56c>
        break;
 800c85a:	bf00      	nop
    }
    if (ret == HAL_OK)
 800c85c:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800c860:	2b00      	cmp	r3, #0
 800c862:	d10d      	bne.n	800c880 <HAL_RCCEx_PeriphCLKConfig+0x590>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 800c864:	4b33      	ldr	r3, [pc, #204]	; (800c934 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800c866:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800c86a:	f023 0107 	bic.w	r1, r3, #7
 800c86e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800c872:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c876:	4a2f      	ldr	r2, [pc, #188]	; (800c934 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800c878:	430b      	orrs	r3, r1
 800c87a:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 800c87e:	e003      	b.n	800c888 <HAL_RCCEx_PeriphCLKConfig+0x598>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c880:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800c884:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 800c888:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800c88c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c890:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800c894:	65bb      	str	r3, [r7, #88]	; 0x58
 800c896:	2300      	movs	r3, #0
 800c898:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c89a:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800c89e:	460b      	mov	r3, r1
 800c8a0:	4313      	orrs	r3, r2
 800c8a2:	d04d      	beq.n	800c940 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));
    switch (pPeriphClkInit->Adf1ClockSelection)
 800c8a4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800c8a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c8ac:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800c8b0:	d028      	beq.n	800c904 <HAL_RCCEx_PeriphCLKConfig+0x614>
 800c8b2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800c8b6:	d821      	bhi.n	800c8fc <HAL_RCCEx_PeriphCLKConfig+0x60c>
 800c8b8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800c8bc:	d024      	beq.n	800c908 <HAL_RCCEx_PeriphCLKConfig+0x618>
 800c8be:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800c8c2:	d81b      	bhi.n	800c8fc <HAL_RCCEx_PeriphCLKConfig+0x60c>
 800c8c4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c8c8:	d00e      	beq.n	800c8e8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
 800c8ca:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c8ce:	d815      	bhi.n	800c8fc <HAL_RCCEx_PeriphCLKConfig+0x60c>
 800c8d0:	2b00      	cmp	r3, #0
 800c8d2:	d01b      	beq.n	800c90c <HAL_RCCEx_PeriphCLKConfig+0x61c>
 800c8d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c8d8:	d110      	bne.n	800c8fc <HAL_RCCEx_PeriphCLKConfig+0x60c>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800c8da:	4b16      	ldr	r3, [pc, #88]	; (800c934 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800c8dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c8de:	4a15      	ldr	r2, [pc, #84]	; (800c934 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800c8e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c8e4:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 800c8e6:	e012      	b.n	800c90e <HAL_RCCEx_PeriphCLKConfig+0x61e>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800c8e8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800c8ec:	332c      	adds	r3, #44	; 0x2c
 800c8ee:	4618      	mov	r0, r3
 800c8f0:	f002 f8b0 	bl	800ea54 <RCCEx_PLL3_Config>
 800c8f4:	4603      	mov	r3, r0
 800c8f6:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 800c8fa:	e008      	b.n	800c90e <HAL_RCCEx_PeriphCLKConfig+0x61e>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800c8fc:	2301      	movs	r3, #1
 800c8fe:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 800c902:	e004      	b.n	800c90e <HAL_RCCEx_PeriphCLKConfig+0x61e>
        break;
 800c904:	bf00      	nop
 800c906:	e002      	b.n	800c90e <HAL_RCCEx_PeriphCLKConfig+0x61e>
        break;
 800c908:	bf00      	nop
 800c90a:	e000      	b.n	800c90e <HAL_RCCEx_PeriphCLKConfig+0x61e>
        break;
 800c90c:	bf00      	nop
    }
    if (ret == HAL_OK)
 800c90e:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800c912:	2b00      	cmp	r3, #0
 800c914:	d110      	bne.n	800c938 <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 800c916:	4b07      	ldr	r3, [pc, #28]	; (800c934 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800c918:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800c91c:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 800c920:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800c924:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c928:	4a02      	ldr	r2, [pc, #8]	; (800c934 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800c92a:	430b      	orrs	r3, r1
 800c92c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800c930:	e006      	b.n	800c940 <HAL_RCCEx_PeriphCLKConfig+0x650>
 800c932:	bf00      	nop
 800c934:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c938:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800c93c:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800c940:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800c944:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c948:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800c94c:	653b      	str	r3, [r7, #80]	; 0x50
 800c94e:	2300      	movs	r3, #0
 800c950:	657b      	str	r3, [r7, #84]	; 0x54
 800c952:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800c956:	460b      	mov	r3, r1
 800c958:	4313      	orrs	r3, r2
 800c95a:	f000 80b5 	beq.w	800cac8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800c95e:	2300      	movs	r3, #0
 800c960:	f887 30e1 	strb.w	r3, [r7, #225]	; 0xe1
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));
    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800c964:	4b9d      	ldr	r3, [pc, #628]	; (800cbdc <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800c966:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c96a:	f003 0304 	and.w	r3, r3, #4
 800c96e:	2b00      	cmp	r3, #0
 800c970:	d113      	bne.n	800c99a <HAL_RCCEx_PeriphCLKConfig+0x6aa>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800c972:	4b9a      	ldr	r3, [pc, #616]	; (800cbdc <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800c974:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c978:	4a98      	ldr	r2, [pc, #608]	; (800cbdc <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800c97a:	f043 0304 	orr.w	r3, r3, #4
 800c97e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800c982:	4b96      	ldr	r3, [pc, #600]	; (800cbdc <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800c984:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c988:	f003 0304 	and.w	r3, r3, #4
 800c98c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800c990:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
      pwrclkchanged = SET;
 800c994:	2301      	movs	r3, #1
 800c996:	f887 30e1 	strb.w	r3, [r7, #225]	; 0xe1
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 800c99a:	4b91      	ldr	r3, [pc, #580]	; (800cbe0 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 800c99c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c99e:	4a90      	ldr	r2, [pc, #576]	; (800cbe0 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 800c9a0:	f043 0301 	orr.w	r3, r3, #1
 800c9a4:	6293      	str	r3, [r2, #40]	; 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800c9a6:	f7f9 fdaf 	bl	8006508 <HAL_GetTick>
 800c9aa:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800c9ae:	e00b      	b.n	800c9c8 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c9b0:	f7f9 fdaa 	bl	8006508 <HAL_GetTick>
 800c9b4:	4602      	mov	r2, r0
 800c9b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c9ba:	1ad3      	subs	r3, r2, r3
 800c9bc:	2b02      	cmp	r3, #2
 800c9be:	d903      	bls.n	800c9c8 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      {
        ret = HAL_TIMEOUT;
 800c9c0:	2303      	movs	r3, #3
 800c9c2:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 800c9c6:	e005      	b.n	800c9d4 <HAL_RCCEx_PeriphCLKConfig+0x6e4>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800c9c8:	4b85      	ldr	r3, [pc, #532]	; (800cbe0 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 800c9ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c9cc:	f003 0301 	and.w	r3, r3, #1
 800c9d0:	2b00      	cmp	r3, #0
 800c9d2:	d0ed      	beq.n	800c9b0 <HAL_RCCEx_PeriphCLKConfig+0x6c0>
      }
    }

    if (ret == HAL_OK)
 800c9d4:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800c9d8:	2b00      	cmp	r3, #0
 800c9da:	d165      	bne.n	800caa8 <HAL_RCCEx_PeriphCLKConfig+0x7b8>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800c9dc:	4b7f      	ldr	r3, [pc, #508]	; (800cbdc <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800c9de:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800c9e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c9e6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 800c9ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c9ee:	2b00      	cmp	r3, #0
 800c9f0:	d023      	beq.n	800ca3a <HAL_RCCEx_PeriphCLKConfig+0x74a>
 800c9f2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800c9f6:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 800c9fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c9fe:	4293      	cmp	r3, r2
 800ca00:	d01b      	beq.n	800ca3a <HAL_RCCEx_PeriphCLKConfig+0x74a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800ca02:	4b76      	ldr	r3, [pc, #472]	; (800cbdc <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800ca04:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800ca08:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ca0c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800ca10:	4b72      	ldr	r3, [pc, #456]	; (800cbdc <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800ca12:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800ca16:	4a71      	ldr	r2, [pc, #452]	; (800cbdc <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800ca18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ca1c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 800ca20:	4b6e      	ldr	r3, [pc, #440]	; (800cbdc <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800ca22:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800ca26:	4a6d      	ldr	r2, [pc, #436]	; (800cbdc <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800ca28:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ca2c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800ca30:	4a6a      	ldr	r2, [pc, #424]	; (800cbdc <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800ca32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ca36:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800ca3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ca3e:	f003 0301 	and.w	r3, r3, #1
 800ca42:	2b00      	cmp	r3, #0
 800ca44:	d019      	beq.n	800ca7a <HAL_RCCEx_PeriphCLKConfig+0x78a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ca46:	f7f9 fd5f 	bl	8006508 <HAL_GetTick>
 800ca4a:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800ca4e:	e00d      	b.n	800ca6c <HAL_RCCEx_PeriphCLKConfig+0x77c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ca50:	f7f9 fd5a 	bl	8006508 <HAL_GetTick>
 800ca54:	4602      	mov	r2, r0
 800ca56:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ca5a:	1ad2      	subs	r2, r2, r3
 800ca5c:	f241 3388 	movw	r3, #5000	; 0x1388
 800ca60:	429a      	cmp	r2, r3
 800ca62:	d903      	bls.n	800ca6c <HAL_RCCEx_PeriphCLKConfig+0x77c>
          {
            ret = HAL_TIMEOUT;
 800ca64:	2303      	movs	r3, #3
 800ca66:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
            break;
 800ca6a:	e006      	b.n	800ca7a <HAL_RCCEx_PeriphCLKConfig+0x78a>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800ca6c:	4b5b      	ldr	r3, [pc, #364]	; (800cbdc <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800ca6e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800ca72:	f003 0302 	and.w	r3, r3, #2
 800ca76:	2b00      	cmp	r3, #0
 800ca78:	d0ea      	beq.n	800ca50 <HAL_RCCEx_PeriphCLKConfig+0x760>
          }
        }
      }

      if (ret == HAL_OK)
 800ca7a:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800ca7e:	2b00      	cmp	r3, #0
 800ca80:	d10d      	bne.n	800ca9e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 800ca82:	4b56      	ldr	r3, [pc, #344]	; (800cbdc <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800ca84:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800ca88:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800ca8c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800ca90:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800ca94:	4a51      	ldr	r2, [pc, #324]	; (800cbdc <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800ca96:	430b      	orrs	r3, r1
 800ca98:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800ca9c:	e008      	b.n	800cab0 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800ca9e:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800caa2:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
 800caa6:	e003      	b.n	800cab0 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800caa8:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800caac:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800cab0:	f897 30e1 	ldrb.w	r3, [r7, #225]	; 0xe1
 800cab4:	2b01      	cmp	r3, #1
 800cab6:	d107      	bne.n	800cac8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800cab8:	4b48      	ldr	r3, [pc, #288]	; (800cbdc <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800caba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800cabe:	4a47      	ldr	r2, [pc, #284]	; (800cbdc <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800cac0:	f023 0304 	bic.w	r3, r3, #4
 800cac4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }

  /*-------------------------------------- ICLK Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 800cac8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800cacc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cad0:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800cad4:	64bb      	str	r3, [r7, #72]	; 0x48
 800cad6:	2300      	movs	r3, #0
 800cad8:	64fb      	str	r3, [r7, #76]	; 0x4c
 800cada:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800cade:	460b      	mov	r3, r1
 800cae0:	4313      	orrs	r3, r2
 800cae2:	d042      	beq.n	800cb6a <HAL_RCCEx_PeriphCLKConfig+0x87a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(pPeriphClkInit->IclkClockSelection));

    switch (pPeriphClkInit->IclkClockSelection)
 800cae4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800cae8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800caec:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800caf0:	d022      	beq.n	800cb38 <HAL_RCCEx_PeriphCLKConfig+0x848>
 800caf2:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800caf6:	d81b      	bhi.n	800cb30 <HAL_RCCEx_PeriphCLKConfig+0x840>
 800caf8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800cafc:	d011      	beq.n	800cb22 <HAL_RCCEx_PeriphCLKConfig+0x832>
 800cafe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800cb02:	d815      	bhi.n	800cb30 <HAL_RCCEx_PeriphCLKConfig+0x840>
 800cb04:	2b00      	cmp	r3, #0
 800cb06:	d019      	beq.n	800cb3c <HAL_RCCEx_PeriphCLKConfig+0x84c>
 800cb08:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800cb0c:	d110      	bne.n	800cb30 <HAL_RCCEx_PeriphCLKConfig+0x840>
    {
      case RCC_ICLK_CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800cb0e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800cb12:	3308      	adds	r3, #8
 800cb14:	4618      	mov	r0, r3
 800cb16:	f001 ff05 	bl	800e924 <RCCEx_PLL2_Config>
 800cb1a:	4603      	mov	r3, r0
 800cb1c:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 800cb20:	e00d      	b.n	800cb3e <HAL_RCCEx_PeriphCLKConfig+0x84e>
      case RCC_ICLK_CLKSOURCE_PLL1:
        /* Enable ICLK Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800cb22:	4b2e      	ldr	r3, [pc, #184]	; (800cbdc <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800cb24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cb26:	4a2d      	ldr	r2, [pc, #180]	; (800cbdc <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800cb28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800cb2c:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 800cb2e:	e006      	b.n	800cb3e <HAL_RCCEx_PeriphCLKConfig+0x84e>
      case RCC_ICLK_CLKSOURCE_HSI48:
        break;
      case RCC_ICLK_CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800cb30:	2301      	movs	r3, #1
 800cb32:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 800cb36:	e002      	b.n	800cb3e <HAL_RCCEx_PeriphCLKConfig+0x84e>
        break;
 800cb38:	bf00      	nop
 800cb3a:	e000      	b.n	800cb3e <HAL_RCCEx_PeriphCLKConfig+0x84e>
        break;
 800cb3c:	bf00      	nop
    }
    if (ret == HAL_OK)
 800cb3e:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800cb42:	2b00      	cmp	r3, #0
 800cb44:	d10d      	bne.n	800cb62 <HAL_RCCEx_PeriphCLKConfig+0x872>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 800cb46:	4b25      	ldr	r3, [pc, #148]	; (800cbdc <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800cb48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800cb4c:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 800cb50:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800cb54:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800cb58:	4a20      	ldr	r2, [pc, #128]	; (800cbdc <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800cb5a:	430b      	orrs	r3, r1
 800cb5c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800cb60:	e003      	b.n	800cb6a <HAL_RCCEx_PeriphCLKConfig+0x87a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cb62:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800cb66:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800cb6a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800cb6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb72:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800cb76:	643b      	str	r3, [r7, #64]	; 0x40
 800cb78:	2300      	movs	r3, #0
 800cb7a:	647b      	str	r3, [r7, #68]	; 0x44
 800cb7c:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800cb80:	460b      	mov	r3, r1
 800cb82:	4313      	orrs	r3, r2
 800cb84:	d032      	beq.n	800cbec <HAL_RCCEx_PeriphCLKConfig+0x8fc>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 800cb86:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800cb8a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800cb8e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800cb92:	d00b      	beq.n	800cbac <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 800cb94:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800cb98:	d804      	bhi.n	800cba4 <HAL_RCCEx_PeriphCLKConfig+0x8b4>
 800cb9a:	2b00      	cmp	r3, #0
 800cb9c:	d008      	beq.n	800cbb0 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
 800cb9e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cba2:	d007      	beq.n	800cbb4 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 800cba4:	2301      	movs	r3, #1
 800cba6:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 800cbaa:	e004      	b.n	800cbb6 <HAL_RCCEx_PeriphCLKConfig+0x8c6>
        break;
 800cbac:	bf00      	nop
 800cbae:	e002      	b.n	800cbb6 <HAL_RCCEx_PeriphCLKConfig+0x8c6>
        break;
 800cbb0:	bf00      	nop
 800cbb2:	e000      	b.n	800cbb6 <HAL_RCCEx_PeriphCLKConfig+0x8c6>
        break;
 800cbb4:	bf00      	nop
    }
    if (ret == HAL_OK)
 800cbb6:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800cbba:	2b00      	cmp	r3, #0
 800cbbc:	d112      	bne.n	800cbe4 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 800cbbe:	4b07      	ldr	r3, [pc, #28]	; (800cbdc <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800cbc0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800cbc4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800cbc8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800cbcc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800cbd0:	4a02      	ldr	r2, [pc, #8]	; (800cbdc <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800cbd2:	430b      	orrs	r3, r1
 800cbd4:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 800cbd8:	e008      	b.n	800cbec <HAL_RCCEx_PeriphCLKConfig+0x8fc>
 800cbda:	bf00      	nop
 800cbdc:	46020c00 	.word	0x46020c00
 800cbe0:	46020800 	.word	0x46020800
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cbe4:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800cbe8:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }
  /*-------------------------- SAES clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAES) == RCC_PERIPHCLK_SAES)
 800cbec:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800cbf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbf4:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800cbf8:	63bb      	str	r3, [r7, #56]	; 0x38
 800cbfa:	2300      	movs	r3, #0
 800cbfc:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cbfe:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800cc02:	460b      	mov	r3, r1
 800cc04:	4313      	orrs	r3, r2
 800cc06:	d00c      	beq.n	800cc22 <HAL_RCCEx_PeriphCLKConfig+0x932>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAESCLKSOURCE(pPeriphClkInit->SaesClockSelection));

    /* Configure the SAES clock source */
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
 800cc08:	4b98      	ldr	r3, [pc, #608]	; (800ce6c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800cc0a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800cc0e:	f423 6100 	bic.w	r1, r3, #2048	; 0x800
 800cc12:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800cc16:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800cc1a:	4a94      	ldr	r2, [pc, #592]	; (800ce6c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800cc1c:	430b      	orrs	r3, r1
 800cc1e:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
  }
  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 800cc22:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800cc26:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc2a:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800cc2e:	633b      	str	r3, [r7, #48]	; 0x30
 800cc30:	2300      	movs	r3, #0
 800cc32:	637b      	str	r3, [r7, #52]	; 0x34
 800cc34:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800cc38:	460b      	mov	r3, r1
 800cc3a:	4313      	orrs	r3, r2
 800cc3c:	d019      	beq.n	800cc72 <HAL_RCCEx_PeriphCLKConfig+0x982>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 800cc3e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800cc42:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800cc46:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800cc4a:	d105      	bne.n	800cc58 <HAL_RCCEx_PeriphCLKConfig+0x968>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800cc4c:	4b87      	ldr	r3, [pc, #540]	; (800ce6c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800cc4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cc50:	4a86      	ldr	r2, [pc, #536]	; (800ce6c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800cc52:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800cc56:	6293      	str	r3, [r2, #40]	; 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 800cc58:	4b84      	ldr	r3, [pc, #528]	; (800ce6c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800cc5a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800cc5e:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 800cc62:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800cc66:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800cc6a:	4a80      	ldr	r2, [pc, #512]	; (800ce6c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800cc6c:	430b      	orrs	r3, r1
 800cc6e:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 800cc72:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800cc76:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc7a:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800cc7e:	62bb      	str	r3, [r7, #40]	; 0x28
 800cc80:	2300      	movs	r3, #0
 800cc82:	62fb      	str	r3, [r7, #44]	; 0x2c
 800cc84:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800cc88:	460b      	mov	r3, r1
 800cc8a:	4313      	orrs	r3, r2
 800cc8c:	d00c      	beq.n	800cca8 <HAL_RCCEx_PeriphCLKConfig+0x9b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 800cc8e:	4b77      	ldr	r3, [pc, #476]	; (800ce6c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800cc90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800cc94:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800cc98:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800cc9c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800cca0:	4972      	ldr	r1, [pc, #456]	; (800ce6c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800cca2:	4313      	orrs	r3, r2
 800cca4:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 800cca8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800ccac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccb0:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 800ccb4:	623b      	str	r3, [r7, #32]
 800ccb6:	2300      	movs	r3, #0
 800ccb8:	627b      	str	r3, [r7, #36]	; 0x24
 800ccba:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800ccbe:	460b      	mov	r3, r1
 800ccc0:	4313      	orrs	r3, r2
 800ccc2:	d00c      	beq.n	800ccde <HAL_RCCEx_PeriphCLKConfig+0x9ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 800ccc4:	4b69      	ldr	r3, [pc, #420]	; (800ce6c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800ccc6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800ccca:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800ccce:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800ccd2:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800ccd6:	4965      	ldr	r1, [pc, #404]	; (800ce6c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800ccd8:	4313      	orrs	r3, r2
 800ccda:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 800ccde:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800cce2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cce6:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 800ccea:	61bb      	str	r3, [r7, #24]
 800ccec:	2300      	movs	r3, #0
 800ccee:	61fb      	str	r3, [r7, #28]
 800ccf0:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800ccf4:	460b      	mov	r3, r1
 800ccf6:	4313      	orrs	r3, r2
 800ccf8:	d00c      	beq.n	800cd14 <HAL_RCCEx_PeriphCLKConfig+0xa24>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 800ccfa:	4b5c      	ldr	r3, [pc, #368]	; (800ce6c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800ccfc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800cd00:	f023 0218 	bic.w	r2, r3, #24
 800cd04:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800cd08:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800cd0c:	4957      	ldr	r1, [pc, #348]	; (800ce6c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800cd0e:	4313      	orrs	r3, r2
 800cd10:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800cd14:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800cd18:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd1c:	f002 6380 	and.w	r3, r2, #67108864	; 0x4000000
 800cd20:	613b      	str	r3, [r7, #16]
 800cd22:	2300      	movs	r3, #0
 800cd24:	617b      	str	r3, [r7, #20]
 800cd26:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800cd2a:	460b      	mov	r3, r1
 800cd2c:	4313      	orrs	r3, r2
 800cd2e:	d032      	beq.n	800cd96 <HAL_RCCEx_PeriphCLKConfig+0xaa6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 800cd30:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800cd34:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800cd38:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800cd3c:	d105      	bne.n	800cd4a <HAL_RCCEx_PeriphCLKConfig+0xa5a>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800cd3e:	4b4b      	ldr	r3, [pc, #300]	; (800ce6c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800cd40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cd42:	4a4a      	ldr	r2, [pc, #296]	; (800ce6c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800cd44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800cd48:	6293      	str	r3, [r2, #40]	; 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 800cd4a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800cd4e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800cd52:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800cd56:	d108      	bne.n	800cd6a <HAL_RCCEx_PeriphCLKConfig+0xa7a>
    {
      /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800cd58:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800cd5c:	3308      	adds	r3, #8
 800cd5e:	4618      	mov	r0, r3
 800cd60:	f001 fde0 	bl	800e924 <RCCEx_PLL2_Config>
 800cd64:	4603      	mov	r3, r0
 800cd66:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
    }
    if (ret == HAL_OK)
 800cd6a:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800cd6e:	2b00      	cmp	r3, #0
 800cd70:	d10d      	bne.n	800cd8e <HAL_RCCEx_PeriphCLKConfig+0xa9e>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 800cd72:	4b3e      	ldr	r3, [pc, #248]	; (800ce6c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800cd74:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800cd78:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800cd7c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800cd80:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800cd84:	4939      	ldr	r1, [pc, #228]	; (800ce6c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800cd86:	4313      	orrs	r3, r2
 800cd88:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 800cd8c:	e003      	b.n	800cd96 <HAL_RCCEx_PeriphCLKConfig+0xaa6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cd8e:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800cd92:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }
#endif /* defined(HSPI1) */

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 800cd96:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800cd9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd9e:	f002 6300 	and.w	r3, r2, #134217728	; 0x8000000
 800cda2:	60bb      	str	r3, [r7, #8]
 800cda4:	2300      	movs	r3, #0
 800cda6:	60fb      	str	r3, [r7, #12]
 800cda8:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800cdac:	460b      	mov	r3, r1
 800cdae:	4313      	orrs	r3, r2
 800cdb0:	d03a      	beq.n	800ce28 <HAL_RCCEx_PeriphCLKConfig+0xb38>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 800cdb2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800cdb6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cdba:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800cdbe:	d00e      	beq.n	800cdde <HAL_RCCEx_PeriphCLKConfig+0xaee>
 800cdc0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800cdc4:	d815      	bhi.n	800cdf2 <HAL_RCCEx_PeriphCLKConfig+0xb02>
 800cdc6:	2b00      	cmp	r3, #0
 800cdc8:	d017      	beq.n	800cdfa <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 800cdca:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800cdce:	d110      	bne.n	800cdf2 <HAL_RCCEx_PeriphCLKConfig+0xb02>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800cdd0:	4b26      	ldr	r3, [pc, #152]	; (800ce6c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800cdd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cdd4:	4a25      	ldr	r2, [pc, #148]	; (800ce6c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800cdd6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800cdda:	6293      	str	r3, [r2, #40]	; 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 800cddc:	e00e      	b.n	800cdfc <HAL_RCCEx_PeriphCLKConfig+0xb0c>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800cdde:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800cde2:	3308      	adds	r3, #8
 800cde4:	4618      	mov	r0, r3
 800cde6:	f001 fd9d 	bl	800e924 <RCCEx_PLL2_Config>
 800cdea:	4603      	mov	r3, r0
 800cdec:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 800cdf0:	e004      	b.n	800cdfc <HAL_RCCEx_PeriphCLKConfig+0xb0c>
      default:
        ret = HAL_ERROR;
 800cdf2:	2301      	movs	r3, #1
 800cdf4:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 800cdf8:	e000      	b.n	800cdfc <HAL_RCCEx_PeriphCLKConfig+0xb0c>
        break;
 800cdfa:	bf00      	nop
    }
    if (ret == HAL_OK)
 800cdfc:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800ce00:	2b00      	cmp	r3, #0
 800ce02:	d10d      	bne.n	800ce20 <HAL_RCCEx_PeriphCLKConfig+0xb30>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 800ce04:	4b19      	ldr	r3, [pc, #100]	; (800ce6c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800ce06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800ce0a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800ce0e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800ce12:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ce16:	4915      	ldr	r1, [pc, #84]	; (800ce6c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800ce18:	4313      	orrs	r3, r2
 800ce1a:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
 800ce1e:	e003      	b.n	800ce28 <HAL_RCCEx_PeriphCLKConfig+0xb38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ce20:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800ce24:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 800ce28:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800ce2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce30:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 800ce34:	603b      	str	r3, [r7, #0]
 800ce36:	2300      	movs	r3, #0
 800ce38:	607b      	str	r3, [r7, #4]
 800ce3a:	e9d7 1200 	ldrd	r1, r2, [r7]
 800ce3e:	460b      	mov	r3, r1
 800ce40:	4313      	orrs	r3, r2
 800ce42:	d00c      	beq.n	800ce5e <HAL_RCCEx_PeriphCLKConfig+0xb6e>

    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 800ce44:	4b09      	ldr	r3, [pc, #36]	; (800ce6c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800ce46:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800ce4a:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800ce4e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800ce52:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800ce56:	4905      	ldr	r1, [pc, #20]	; (800ce6c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800ce58:	4313      	orrs	r3, r2
 800ce5a:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
    }
  }

#endif /* defined(USB_OTG_HS) */

  return status;
 800ce5e:	f897 30e2 	ldrb.w	r3, [r7, #226]	; 0xe2
}
 800ce62:	4618      	mov	r0, r3
 800ce64:	37e8      	adds	r7, #232	; 0xe8
 800ce66:	46bd      	mov	sp, r7
 800ce68:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ce6c:	46020c00 	.word	0x46020c00

0800ce70 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800ce70:	b480      	push	{r7}
 800ce72:	b089      	sub	sp, #36	; 0x24
 800ce74:	af00      	add	r7, sp, #0
 800ce76:	6078      	str	r0, [r7, #4]
  uint32_t pll1n;
  uint32_t pll1fracen;
  float_t fracn1;
  float_t pll1vco;

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 800ce78:	4bac      	ldr	r3, [pc, #688]	; (800d12c <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 800ce7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ce7c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ce80:	61bb      	str	r3, [r7, #24]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 800ce82:	4baa      	ldr	r3, [pc, #680]	; (800d12c <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 800ce84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ce86:	f003 0303 	and.w	r3, r3, #3
 800ce8a:	617b      	str	r3, [r7, #20]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 800ce8c:	4ba7      	ldr	r3, [pc, #668]	; (800d12c <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 800ce8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ce90:	0a1b      	lsrs	r3, r3, #8
 800ce92:	f003 030f 	and.w	r3, r3, #15
 800ce96:	3301      	adds	r3, #1
 800ce98:	613b      	str	r3, [r7, #16]
  pll1fracen = RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN;
 800ce9a:	4ba4      	ldr	r3, [pc, #656]	; (800d12c <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 800ce9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ce9e:	f003 0310 	and.w	r3, r3, #16
 800cea2:	60fb      	str	r3, [r7, #12]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 800cea4:	4ba1      	ldr	r3, [pc, #644]	; (800d12c <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 800cea6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cea8:	08db      	lsrs	r3, r3, #3
 800ceaa:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ceae:	68fa      	ldr	r2, [r7, #12]
 800ceb0:	fb02 f303 	mul.w	r3, r2, r3
 800ceb4:	ee07 3a90 	vmov	s15, r3
 800ceb8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cebc:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  if (pll1m != 0U)
 800cec0:	693b      	ldr	r3, [r7, #16]
 800cec2:	2b00      	cmp	r3, #0
 800cec4:	f000 8123 	beq.w	800d10e <HAL_RCCEx_GetPLL1ClockFreq+0x29e>
  {
    switch (pll1source)
 800cec8:	697b      	ldr	r3, [r7, #20]
 800ceca:	2b03      	cmp	r3, #3
 800cecc:	d062      	beq.n	800cf94 <HAL_RCCEx_GetPLL1ClockFreq+0x124>
 800cece:	697b      	ldr	r3, [r7, #20]
 800ced0:	2b03      	cmp	r3, #3
 800ced2:	f200 8081 	bhi.w	800cfd8 <HAL_RCCEx_GetPLL1ClockFreq+0x168>
 800ced6:	697b      	ldr	r3, [r7, #20]
 800ced8:	2b01      	cmp	r3, #1
 800ceda:	d024      	beq.n	800cf26 <HAL_RCCEx_GetPLL1ClockFreq+0xb6>
 800cedc:	697b      	ldr	r3, [r7, #20]
 800cede:	2b02      	cmp	r3, #2
 800cee0:	d17a      	bne.n	800cfd8 <HAL_RCCEx_GetPLL1ClockFreq+0x168>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800cee2:	693b      	ldr	r3, [r7, #16]
 800cee4:	ee07 3a90 	vmov	s15, r3
 800cee8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ceec:	eddf 6a90 	vldr	s13, [pc, #576]	; 800d130 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>
 800cef0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cef4:	4b8d      	ldr	r3, [pc, #564]	; (800d12c <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 800cef6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cef8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cefc:	ee07 3a90 	vmov	s15, r3
 800cf00:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 800cf04:	ed97 6a02 	vldr	s12, [r7, #8]
 800cf08:	eddf 5a8a 	vldr	s11, [pc, #552]	; 800d134 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>
 800cf0c:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800cf10:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 800cf14:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cf18:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800cf1c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cf20:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cf24:	e08f      	b.n	800d046 <HAL_RCCEx_GetPLL1ClockFreq+0x1d6>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800cf26:	4b81      	ldr	r3, [pc, #516]	; (800d12c <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 800cf28:	689b      	ldr	r3, [r3, #8]
 800cf2a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800cf2e:	2b00      	cmp	r3, #0
 800cf30:	d005      	beq.n	800cf3e <HAL_RCCEx_GetPLL1ClockFreq+0xce>
 800cf32:	4b7e      	ldr	r3, [pc, #504]	; (800d12c <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 800cf34:	689b      	ldr	r3, [r3, #8]
 800cf36:	0f1b      	lsrs	r3, r3, #28
 800cf38:	f003 030f 	and.w	r3, r3, #15
 800cf3c:	e006      	b.n	800cf4c <HAL_RCCEx_GetPLL1ClockFreq+0xdc>
 800cf3e:	4b7b      	ldr	r3, [pc, #492]	; (800d12c <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 800cf40:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800cf44:	041b      	lsls	r3, r3, #16
 800cf46:	0f1b      	lsrs	r3, r3, #28
 800cf48:	f003 030f 	and.w	r3, r3, #15
 800cf4c:	4a7a      	ldr	r2, [pc, #488]	; (800d138 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>)
 800cf4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cf52:	ee07 3a90 	vmov	s15, r3
 800cf56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cf5a:	693b      	ldr	r3, [r7, #16]
 800cf5c:	ee07 3a90 	vmov	s15, r3
 800cf60:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cf64:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 800cf68:	69bb      	ldr	r3, [r7, #24]
 800cf6a:	ee07 3a90 	vmov	s15, r3
 800cf6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cf72:	ed97 6a02 	vldr	s12, [r7, #8]
 800cf76:	eddf 5a6f 	vldr	s11, [pc, #444]	; 800d134 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>
 800cf7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cf7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cf82:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cf86:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800cf8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cf8e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cf92:	e058      	b.n	800d046 <HAL_RCCEx_GetPLL1ClockFreq+0x1d6>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800cf94:	693b      	ldr	r3, [r7, #16]
 800cf96:	ee07 3a90 	vmov	s15, r3
 800cf9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cf9e:	eddf 6a64 	vldr	s13, [pc, #400]	; 800d130 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>
 800cfa2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cfa6:	4b61      	ldr	r3, [pc, #388]	; (800d12c <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 800cfa8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cfaa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cfae:	ee07 3a90 	vmov	s15, r3
 800cfb2:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 800cfb6:	ed97 6a02 	vldr	s12, [r7, #8]
 800cfba:	eddf 5a5e 	vldr	s11, [pc, #376]	; 800d134 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>
 800cfbe:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800cfc2:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 800cfc6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cfca:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800cfce:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cfd2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cfd6:	e036      	b.n	800d046 <HAL_RCCEx_GetPLL1ClockFreq+0x1d6>
      default:
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800cfd8:	4b54      	ldr	r3, [pc, #336]	; (800d12c <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 800cfda:	689b      	ldr	r3, [r3, #8]
 800cfdc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800cfe0:	2b00      	cmp	r3, #0
 800cfe2:	d005      	beq.n	800cff0 <HAL_RCCEx_GetPLL1ClockFreq+0x180>
 800cfe4:	4b51      	ldr	r3, [pc, #324]	; (800d12c <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 800cfe6:	689b      	ldr	r3, [r3, #8]
 800cfe8:	0f1b      	lsrs	r3, r3, #28
 800cfea:	f003 030f 	and.w	r3, r3, #15
 800cfee:	e006      	b.n	800cffe <HAL_RCCEx_GetPLL1ClockFreq+0x18e>
 800cff0:	4b4e      	ldr	r3, [pc, #312]	; (800d12c <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 800cff2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800cff6:	041b      	lsls	r3, r3, #16
 800cff8:	0f1b      	lsrs	r3, r3, #28
 800cffa:	f003 030f 	and.w	r3, r3, #15
 800cffe:	4a4e      	ldr	r2, [pc, #312]	; (800d138 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>)
 800d000:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d004:	ee07 3a90 	vmov	s15, r3
 800d008:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d00c:	693b      	ldr	r3, [r7, #16]
 800d00e:	ee07 3a90 	vmov	s15, r3
 800d012:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d016:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d01a:	69bb      	ldr	r3, [r7, #24]
 800d01c:	ee07 3a90 	vmov	s15, r3
 800d020:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d024:	ed97 6a02 	vldr	s12, [r7, #8]
 800d028:	eddf 5a42 	vldr	s11, [pc, #264]	; 800d134 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>
 800d02c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d030:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d034:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d038:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800d03c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d040:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d044:	bf00      	nop
    }

    if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 800d046:	4b39      	ldr	r3, [pc, #228]	; (800d12c <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 800d048:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d04a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d04e:	2b00      	cmp	r3, #0
 800d050:	d017      	beq.n	800d082 <HAL_RCCEx_GetPLL1ClockFreq+0x212>
    {
      PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800d052:	4b36      	ldr	r3, [pc, #216]	; (800d12c <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 800d054:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d056:	0a5b      	lsrs	r3, r3, #9
 800d058:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d05c:	ee07 3a90 	vmov	s15, r3
 800d060:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + \
 800d064:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d068:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800d06c:	edd7 6a07 	vldr	s13, [r7, #28]
 800d070:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d074:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d078:	ee17 2a90 	vmov	r2, s15
 800d07c:	687b      	ldr	r3, [r7, #4]
 800d07e:	601a      	str	r2, [r3, #0]
 800d080:	e002      	b.n	800d088 <HAL_RCCEx_GetPLL1ClockFreq+0x218>
                                                                     (float_t)1));
    }
    else
    {
      PLL1_Clocks->PLL1_P_Frequency = 0U;
 800d082:	687b      	ldr	r3, [r7, #4]
 800d084:	2200      	movs	r2, #0
 800d086:	601a      	str	r2, [r3, #0]
    }

    if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 800d088:	4b28      	ldr	r3, [pc, #160]	; (800d12c <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 800d08a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d08c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d090:	2b00      	cmp	r3, #0
 800d092:	d017      	beq.n	800d0c4 <HAL_RCCEx_GetPLL1ClockFreq+0x254>
    {
      PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800d094:	4b25      	ldr	r3, [pc, #148]	; (800d12c <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 800d096:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d098:	0c1b      	lsrs	r3, r3, #16
 800d09a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d09e:	ee07 3a90 	vmov	s15, r3
 800d0a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL1DIVR_PLL1Q) >> RCC_PLL1DIVR_PLL1Q_Pos) + \
 800d0a6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d0aa:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800d0ae:	edd7 6a07 	vldr	s13, [r7, #28]
 800d0b2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d0b6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d0ba:	ee17 2a90 	vmov	r2, s15
 800d0be:	687b      	ldr	r3, [r7, #4]
 800d0c0:	605a      	str	r2, [r3, #4]
 800d0c2:	e002      	b.n	800d0ca <HAL_RCCEx_GetPLL1ClockFreq+0x25a>
                                                                     (float_t)1));
    }
    else
    {
      PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800d0c4:	687b      	ldr	r3, [r7, #4]
 800d0c6:	2200      	movs	r2, #0
 800d0c8:	605a      	str	r2, [r3, #4]
    }

    if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 800d0ca:	4b18      	ldr	r3, [pc, #96]	; (800d12c <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 800d0cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d0ce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800d0d2:	2b00      	cmp	r3, #0
 800d0d4:	d017      	beq.n	800d106 <HAL_RCCEx_GetPLL1ClockFreq+0x296>
    {
      PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800d0d6:	4b15      	ldr	r3, [pc, #84]	; (800d12c <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 800d0d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d0da:	0e1b      	lsrs	r3, r3, #24
 800d0dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d0e0:	ee07 3a90 	vmov	s15, r3
 800d0e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + \
 800d0e8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d0ec:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800d0f0:	edd7 6a07 	vldr	s13, [r7, #28]
 800d0f4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d0f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d0fc:	ee17 2a90 	vmov	r2, s15
 800d100:	687b      	ldr	r3, [r7, #4]
 800d102:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800d104:	e00c      	b.n	800d120 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>
      PLL1_Clocks->PLL1_R_Frequency = 0U;
 800d106:	687b      	ldr	r3, [r7, #4]
 800d108:	2200      	movs	r2, #0
 800d10a:	609a      	str	r2, [r3, #8]
}
 800d10c:	e008      	b.n	800d120 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800d10e:	687b      	ldr	r3, [r7, #4]
 800d110:	2200      	movs	r2, #0
 800d112:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800d114:	687b      	ldr	r3, [r7, #4]
 800d116:	2200      	movs	r2, #0
 800d118:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800d11a:	687b      	ldr	r3, [r7, #4]
 800d11c:	2200      	movs	r2, #0
 800d11e:	609a      	str	r2, [r3, #8]
}
 800d120:	bf00      	nop
 800d122:	3724      	adds	r7, #36	; 0x24
 800d124:	46bd      	mov	sp, r7
 800d126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d12a:	4770      	bx	lr
 800d12c:	46020c00 	.word	0x46020c00
 800d130:	4b742400 	.word	0x4b742400
 800d134:	46000000 	.word	0x46000000
 800d138:	08013a94 	.word	0x08013a94

0800d13c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800d13c:	b480      	push	{r7}
 800d13e:	b089      	sub	sp, #36	; 0x24
 800d140:	af00      	add	r7, sp, #0
 800d142:	6078      	str	r0, [r7, #4]
  float_t fracn2;
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 800d144:	4bac      	ldr	r3, [pc, #688]	; (800d3f8 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 800d146:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d148:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d14c:	61bb      	str	r3, [r7, #24]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 800d14e:	4baa      	ldr	r3, [pc, #680]	; (800d3f8 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 800d150:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d152:	f003 0303 	and.w	r3, r3, #3
 800d156:	617b      	str	r3, [r7, #20]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos) + 1U;
 800d158:	4ba7      	ldr	r3, [pc, #668]	; (800d3f8 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 800d15a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d15c:	0a1b      	lsrs	r3, r3, #8
 800d15e:	f003 030f 	and.w	r3, r3, #15
 800d162:	3301      	adds	r3, #1
 800d164:	613b      	str	r3, [r7, #16]
  pll2fracen = RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN;
 800d166:	4ba4      	ldr	r3, [pc, #656]	; (800d3f8 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 800d168:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d16a:	f003 0310 	and.w	r3, r3, #16
 800d16e:	60fb      	str	r3, [r7, #12]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 800d170:	4ba1      	ldr	r3, [pc, #644]	; (800d3f8 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 800d172:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d174:	08db      	lsrs	r3, r3, #3
 800d176:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d17a:	68fa      	ldr	r2, [r7, #12]
 800d17c:	fb02 f303 	mul.w	r3, r2, r3
 800d180:	ee07 3a90 	vmov	s15, r3
 800d184:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d188:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  if (pll2m != 0U)
 800d18c:	693b      	ldr	r3, [r7, #16]
 800d18e:	2b00      	cmp	r3, #0
 800d190:	f000 8123 	beq.w	800d3da <HAL_RCCEx_GetPLL2ClockFreq+0x29e>
  {
    switch (pll2source)
 800d194:	697b      	ldr	r3, [r7, #20]
 800d196:	2b03      	cmp	r3, #3
 800d198:	d062      	beq.n	800d260 <HAL_RCCEx_GetPLL2ClockFreq+0x124>
 800d19a:	697b      	ldr	r3, [r7, #20]
 800d19c:	2b03      	cmp	r3, #3
 800d19e:	f200 8081 	bhi.w	800d2a4 <HAL_RCCEx_GetPLL2ClockFreq+0x168>
 800d1a2:	697b      	ldr	r3, [r7, #20]
 800d1a4:	2b01      	cmp	r3, #1
 800d1a6:	d024      	beq.n	800d1f2 <HAL_RCCEx_GetPLL2ClockFreq+0xb6>
 800d1a8:	697b      	ldr	r3, [r7, #20]
 800d1aa:	2b02      	cmp	r3, #2
 800d1ac:	d17a      	bne.n	800d2a4 <HAL_RCCEx_GetPLL2ClockFreq+0x168>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800d1ae:	693b      	ldr	r3, [r7, #16]
 800d1b0:	ee07 3a90 	vmov	s15, r3
 800d1b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d1b8:	eddf 6a90 	vldr	s13, [pc, #576]	; 800d3fc <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>
 800d1bc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d1c0:	4b8d      	ldr	r3, [pc, #564]	; (800d3f8 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 800d1c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d1c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d1c8:	ee07 3a90 	vmov	s15, r3
 800d1cc:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 800d1d0:	ed97 6a02 	vldr	s12, [r7, #8]
 800d1d4:	eddf 5a8a 	vldr	s11, [pc, #552]	; 800d400 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>
 800d1d8:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800d1dc:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 800d1e0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d1e4:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800d1e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d1ec:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d1f0:	e08f      	b.n	800d312 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 800d1f2:	4b81      	ldr	r3, [pc, #516]	; (800d3f8 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 800d1f4:	689b      	ldr	r3, [r3, #8]
 800d1f6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d1fa:	2b00      	cmp	r3, #0
 800d1fc:	d005      	beq.n	800d20a <HAL_RCCEx_GetPLL2ClockFreq+0xce>
 800d1fe:	4b7e      	ldr	r3, [pc, #504]	; (800d3f8 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 800d200:	689b      	ldr	r3, [r3, #8]
 800d202:	0f1b      	lsrs	r3, r3, #28
 800d204:	f003 030f 	and.w	r3, r3, #15
 800d208:	e006      	b.n	800d218 <HAL_RCCEx_GetPLL2ClockFreq+0xdc>
 800d20a:	4b7b      	ldr	r3, [pc, #492]	; (800d3f8 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 800d20c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800d210:	041b      	lsls	r3, r3, #16
 800d212:	0f1b      	lsrs	r3, r3, #28
 800d214:	f003 030f 	and.w	r3, r3, #15
 800d218:	4a7a      	ldr	r2, [pc, #488]	; (800d404 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>)
 800d21a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d21e:	ee07 3a90 	vmov	s15, r3
 800d222:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d226:	693b      	ldr	r3, [r7, #16]
 800d228:	ee07 3a90 	vmov	s15, r3
 800d22c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d230:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 800d234:	69bb      	ldr	r3, [r7, #24]
 800d236:	ee07 3a90 	vmov	s15, r3
 800d23a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d23e:	ed97 6a02 	vldr	s12, [r7, #8]
 800d242:	eddf 5a6f 	vldr	s11, [pc, #444]	; 800d400 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>
 800d246:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d24a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d24e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d252:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 800d256:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d25a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d25e:	e058      	b.n	800d312 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800d260:	693b      	ldr	r3, [r7, #16]
 800d262:	ee07 3a90 	vmov	s15, r3
 800d266:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d26a:	eddf 6a64 	vldr	s13, [pc, #400]	; 800d3fc <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>
 800d26e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d272:	4b61      	ldr	r3, [pc, #388]	; (800d3f8 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 800d274:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d276:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d27a:	ee07 3a90 	vmov	s15, r3
 800d27e:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 800d282:	ed97 6a02 	vldr	s12, [r7, #8]
 800d286:	eddf 5a5e 	vldr	s11, [pc, #376]	; 800d400 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>
 800d28a:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800d28e:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 800d292:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d296:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800d29a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d29e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d2a2:	e036      	b.n	800d312 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

      default:
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 800d2a4:	4b54      	ldr	r3, [pc, #336]	; (800d3f8 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 800d2a6:	689b      	ldr	r3, [r3, #8]
 800d2a8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d2ac:	2b00      	cmp	r3, #0
 800d2ae:	d005      	beq.n	800d2bc <HAL_RCCEx_GetPLL2ClockFreq+0x180>
 800d2b0:	4b51      	ldr	r3, [pc, #324]	; (800d3f8 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 800d2b2:	689b      	ldr	r3, [r3, #8]
 800d2b4:	0f1b      	lsrs	r3, r3, #28
 800d2b6:	f003 030f 	and.w	r3, r3, #15
 800d2ba:	e006      	b.n	800d2ca <HAL_RCCEx_GetPLL2ClockFreq+0x18e>
 800d2bc:	4b4e      	ldr	r3, [pc, #312]	; (800d3f8 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 800d2be:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800d2c2:	041b      	lsls	r3, r3, #16
 800d2c4:	0f1b      	lsrs	r3, r3, #28
 800d2c6:	f003 030f 	and.w	r3, r3, #15
 800d2ca:	4a4e      	ldr	r2, [pc, #312]	; (800d404 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>)
 800d2cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d2d0:	ee07 3a90 	vmov	s15, r3
 800d2d4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d2d8:	693b      	ldr	r3, [r7, #16]
 800d2da:	ee07 3a90 	vmov	s15, r3
 800d2de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d2e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  * ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 800d2e6:	69bb      	ldr	r3, [r7, #24]
 800d2e8:	ee07 3a90 	vmov	s15, r3
 800d2ec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d2f0:	ed97 6a02 	vldr	s12, [r7, #8]
 800d2f4:	eddf 5a42 	vldr	s11, [pc, #264]	; 800d400 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>
 800d2f8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d2fc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d300:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d304:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 800d308:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d30c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d310:	bf00      	nop
    }
    if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 800d312:	4b39      	ldr	r3, [pc, #228]	; (800d3f8 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 800d314:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d316:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d31a:	2b00      	cmp	r3, #0
 800d31c:	d017      	beq.n	800d34e <HAL_RCCEx_GetPLL2ClockFreq+0x212>
    {
      PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800d31e:	4b36      	ldr	r3, [pc, #216]	; (800d3f8 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 800d320:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d322:	0a5b      	lsrs	r3, r3, #9
 800d324:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d328:	ee07 3a90 	vmov	s15, r3
 800d32c:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL2DIVR_PLL2P) >> RCC_PLL2DIVR_PLL2P_Pos) + \
 800d330:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d334:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800d338:	edd7 6a07 	vldr	s13, [r7, #28]
 800d33c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d340:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d344:	ee17 2a90 	vmov	r2, s15
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	601a      	str	r2, [r3, #0]
 800d34c:	e002      	b.n	800d354 <HAL_RCCEx_GetPLL2ClockFreq+0x218>
                                                                     (float_t)1));
    }
    else
    {
      PLL2_Clocks->PLL2_P_Frequency = 0U;
 800d34e:	687b      	ldr	r3, [r7, #4]
 800d350:	2200      	movs	r2, #0
 800d352:	601a      	str	r2, [r3, #0]
    }
    if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 800d354:	4b28      	ldr	r3, [pc, #160]	; (800d3f8 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 800d356:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d358:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d35c:	2b00      	cmp	r3, #0
 800d35e:	d017      	beq.n	800d390 <HAL_RCCEx_GetPLL2ClockFreq+0x254>
    {
      PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800d360:	4b25      	ldr	r3, [pc, #148]	; (800d3f8 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 800d362:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d364:	0c1b      	lsrs	r3, r3, #16
 800d366:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d36a:	ee07 3a90 	vmov	s15, r3
 800d36e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL2DIVR_PLL2Q) >> RCC_PLL2DIVR_PLL2Q_Pos) + \
 800d372:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d376:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800d37a:	edd7 6a07 	vldr	s13, [r7, #28]
 800d37e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d382:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d386:	ee17 2a90 	vmov	r2, s15
 800d38a:	687b      	ldr	r3, [r7, #4]
 800d38c:	605a      	str	r2, [r3, #4]
 800d38e:	e002      	b.n	800d396 <HAL_RCCEx_GetPLL2ClockFreq+0x25a>
                                                                     (float_t)1));
    }
    else
    {
      PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800d390:	687b      	ldr	r3, [r7, #4]
 800d392:	2200      	movs	r2, #0
 800d394:	605a      	str	r2, [r3, #4]
    }
    if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 800d396:	4b18      	ldr	r3, [pc, #96]	; (800d3f8 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 800d398:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d39a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800d39e:	2b00      	cmp	r3, #0
 800d3a0:	d017      	beq.n	800d3d2 <HAL_RCCEx_GetPLL2ClockFreq+0x296>
    {
      PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800d3a2:	4b15      	ldr	r3, [pc, #84]	; (800d3f8 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 800d3a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d3a6:	0e1b      	lsrs	r3, r3, #24
 800d3a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d3ac:	ee07 3a90 	vmov	s15, r3
 800d3b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL2DIVR_PLL2R) >> RCC_PLL2DIVR_PLL2R_Pos) + \
 800d3b4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d3b8:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800d3bc:	edd7 6a07 	vldr	s13, [r7, #28]
 800d3c0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d3c4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d3c8:	ee17 2a90 	vmov	r2, s15
 800d3cc:	687b      	ldr	r3, [r7, #4]
 800d3ce:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800d3d0:	e00c      	b.n	800d3ec <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>
      PLL2_Clocks->PLL2_R_Frequency = 0U;
 800d3d2:	687b      	ldr	r3, [r7, #4]
 800d3d4:	2200      	movs	r2, #0
 800d3d6:	609a      	str	r2, [r3, #8]
}
 800d3d8:	e008      	b.n	800d3ec <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800d3da:	687b      	ldr	r3, [r7, #4]
 800d3dc:	2200      	movs	r2, #0
 800d3de:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800d3e0:	687b      	ldr	r3, [r7, #4]
 800d3e2:	2200      	movs	r2, #0
 800d3e4:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800d3e6:	687b      	ldr	r3, [r7, #4]
 800d3e8:	2200      	movs	r2, #0
 800d3ea:	609a      	str	r2, [r3, #8]
}
 800d3ec:	bf00      	nop
 800d3ee:	3724      	adds	r7, #36	; 0x24
 800d3f0:	46bd      	mov	sp, r7
 800d3f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3f6:	4770      	bx	lr
 800d3f8:	46020c00 	.word	0x46020c00
 800d3fc:	4b742400 	.word	0x4b742400
 800d400:	46000000 	.word	0x46000000
 800d404:	08013a94 	.word	0x08013a94

0800d408 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800d408:	b480      	push	{r7}
 800d40a:	b089      	sub	sp, #36	; 0x24
 800d40c:	af00      	add	r7, sp, #0
 800d40e:	6078      	str	r0, [r7, #4]

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLLxR
  */

  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 800d410:	4bac      	ldr	r3, [pc, #688]	; (800d6c4 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 800d412:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d414:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d418:	61bb      	str	r3, [r7, #24]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 800d41a:	4baa      	ldr	r3, [pc, #680]	; (800d6c4 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 800d41c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d41e:	f003 0303 	and.w	r3, r3, #3
 800d422:	617b      	str	r3, [r7, #20]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos) + 1U;
 800d424:	4ba7      	ldr	r3, [pc, #668]	; (800d6c4 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 800d426:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d428:	0a1b      	lsrs	r3, r3, #8
 800d42a:	f003 030f 	and.w	r3, r3, #15
 800d42e:	3301      	adds	r3, #1
 800d430:	613b      	str	r3, [r7, #16]
  pll3fracen = RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN;
 800d432:	4ba4      	ldr	r3, [pc, #656]	; (800d6c4 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 800d434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d436:	f003 0310 	and.w	r3, r3, #16
 800d43a:	60fb      	str	r3, [r7, #12]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 800d43c:	4ba1      	ldr	r3, [pc, #644]	; (800d6c4 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 800d43e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d440:	08db      	lsrs	r3, r3, #3
 800d442:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d446:	68fa      	ldr	r2, [r7, #12]
 800d448:	fb02 f303 	mul.w	r3, r2, r3
 800d44c:	ee07 3a90 	vmov	s15, r3
 800d450:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d454:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  if (pll3m != 0U)
 800d458:	693b      	ldr	r3, [r7, #16]
 800d45a:	2b00      	cmp	r3, #0
 800d45c:	f000 8123 	beq.w	800d6a6 <HAL_RCCEx_GetPLL3ClockFreq+0x29e>
  {
    switch (pll3source)
 800d460:	697b      	ldr	r3, [r7, #20]
 800d462:	2b03      	cmp	r3, #3
 800d464:	d062      	beq.n	800d52c <HAL_RCCEx_GetPLL3ClockFreq+0x124>
 800d466:	697b      	ldr	r3, [r7, #20]
 800d468:	2b03      	cmp	r3, #3
 800d46a:	f200 8081 	bhi.w	800d570 <HAL_RCCEx_GetPLL3ClockFreq+0x168>
 800d46e:	697b      	ldr	r3, [r7, #20]
 800d470:	2b01      	cmp	r3, #1
 800d472:	d024      	beq.n	800d4be <HAL_RCCEx_GetPLL3ClockFreq+0xb6>
 800d474:	697b      	ldr	r3, [r7, #20]
 800d476:	2b02      	cmp	r3, #2
 800d478:	d17a      	bne.n	800d570 <HAL_RCCEx_GetPLL3ClockFreq+0x168>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800d47a:	693b      	ldr	r3, [r7, #16]
 800d47c:	ee07 3a90 	vmov	s15, r3
 800d480:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d484:	eddf 6a90 	vldr	s13, [pc, #576]	; 800d6c8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>
 800d488:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d48c:	4b8d      	ldr	r3, [pc, #564]	; (800d6c4 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 800d48e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d490:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d494:	ee07 3a90 	vmov	s15, r3
 800d498:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 800d49c:	ed97 6a02 	vldr	s12, [r7, #8]
 800d4a0:	eddf 5a8a 	vldr	s11, [pc, #552]	; 800d6cc <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>
 800d4a4:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800d4a8:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 800d4ac:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d4b0:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800d4b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d4b8:	edc7 7a07 	vstr	s15, [r7, #28]

        break;
 800d4bc:	e08f      	b.n	800d5de <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800d4be:	4b81      	ldr	r3, [pc, #516]	; (800d6c4 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 800d4c0:	689b      	ldr	r3, [r3, #8]
 800d4c2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d4c6:	2b00      	cmp	r3, #0
 800d4c8:	d005      	beq.n	800d4d6 <HAL_RCCEx_GetPLL3ClockFreq+0xce>
 800d4ca:	4b7e      	ldr	r3, [pc, #504]	; (800d6c4 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 800d4cc:	689b      	ldr	r3, [r3, #8]
 800d4ce:	0f1b      	lsrs	r3, r3, #28
 800d4d0:	f003 030f 	and.w	r3, r3, #15
 800d4d4:	e006      	b.n	800d4e4 <HAL_RCCEx_GetPLL3ClockFreq+0xdc>
 800d4d6:	4b7b      	ldr	r3, [pc, #492]	; (800d6c4 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 800d4d8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800d4dc:	041b      	lsls	r3, r3, #16
 800d4de:	0f1b      	lsrs	r3, r3, #28
 800d4e0:	f003 030f 	and.w	r3, r3, #15
 800d4e4:	4a7a      	ldr	r2, [pc, #488]	; (800d6d0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>)
 800d4e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d4ea:	ee07 3a90 	vmov	s15, r3
 800d4ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d4f2:	693b      	ldr	r3, [r7, #16]
 800d4f4:	ee07 3a90 	vmov	s15, r3
 800d4f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d4fc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d500:	69bb      	ldr	r3, [r7, #24]
 800d502:	ee07 3a90 	vmov	s15, r3
 800d506:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d50a:	ed97 6a02 	vldr	s12, [r7, #8]
 800d50e:	eddf 5a6f 	vldr	s11, [pc, #444]	; 800d6cc <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>
 800d512:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d516:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d51a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d51e:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800d522:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d526:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d52a:	e058      	b.n	800d5de <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800d52c:	693b      	ldr	r3, [r7, #16]
 800d52e:	ee07 3a90 	vmov	s15, r3
 800d532:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d536:	eddf 6a64 	vldr	s13, [pc, #400]	; 800d6c8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>
 800d53a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d53e:	4b61      	ldr	r3, [pc, #388]	; (800d6c4 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 800d540:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d542:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d546:	ee07 3a90 	vmov	s15, r3
 800d54a:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 800d54e:	ed97 6a02 	vldr	s12, [r7, #8]
 800d552:	eddf 5a5e 	vldr	s11, [pc, #376]	; 800d6cc <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>
 800d556:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800d55a:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 800d55e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d562:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800d566:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d56a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d56e:	e036      	b.n	800d5de <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

      default:
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800d570:	4b54      	ldr	r3, [pc, #336]	; (800d6c4 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 800d572:	689b      	ldr	r3, [r3, #8]
 800d574:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d578:	2b00      	cmp	r3, #0
 800d57a:	d005      	beq.n	800d588 <HAL_RCCEx_GetPLL3ClockFreq+0x180>
 800d57c:	4b51      	ldr	r3, [pc, #324]	; (800d6c4 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 800d57e:	689b      	ldr	r3, [r3, #8]
 800d580:	0f1b      	lsrs	r3, r3, #28
 800d582:	f003 030f 	and.w	r3, r3, #15
 800d586:	e006      	b.n	800d596 <HAL_RCCEx_GetPLL3ClockFreq+0x18e>
 800d588:	4b4e      	ldr	r3, [pc, #312]	; (800d6c4 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 800d58a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800d58e:	041b      	lsls	r3, r3, #16
 800d590:	0f1b      	lsrs	r3, r3, #28
 800d592:	f003 030f 	and.w	r3, r3, #15
 800d596:	4a4e      	ldr	r2, [pc, #312]	; (800d6d0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>)
 800d598:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d59c:	ee07 3a90 	vmov	s15, r3
 800d5a0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d5a4:	693b      	ldr	r3, [r7, #16]
 800d5a6:	ee07 3a90 	vmov	s15, r3
 800d5aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d5ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d5b2:	69bb      	ldr	r3, [r7, #24]
 800d5b4:	ee07 3a90 	vmov	s15, r3
 800d5b8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d5bc:	ed97 6a02 	vldr	s12, [r7, #8]
 800d5c0:	eddf 5a42 	vldr	s11, [pc, #264]	; 800d6cc <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>
 800d5c4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d5c8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d5cc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d5d0:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800d5d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d5d8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d5dc:	bf00      	nop
    }

    if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 800d5de:	4b39      	ldr	r3, [pc, #228]	; (800d6c4 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 800d5e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d5e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d5e6:	2b00      	cmp	r3, #0
 800d5e8:	d017      	beq.n	800d61a <HAL_RCCEx_GetPLL3ClockFreq+0x212>
    {
      PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800d5ea:	4b36      	ldr	r3, [pc, #216]	; (800d6c4 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 800d5ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d5ee:	0a5b      	lsrs	r3, r3, #9
 800d5f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d5f4:	ee07 3a90 	vmov	s15, r3
 800d5f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL3DIVR_PLL3P) >> RCC_PLL3DIVR_PLL3P_Pos) + \
 800d5fc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d600:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800d604:	edd7 6a07 	vldr	s13, [r7, #28]
 800d608:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d60c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d610:	ee17 2a90 	vmov	r2, s15
 800d614:	687b      	ldr	r3, [r7, #4]
 800d616:	601a      	str	r2, [r3, #0]
 800d618:	e002      	b.n	800d620 <HAL_RCCEx_GetPLL3ClockFreq+0x218>
                                                                     (float_t)1));
    }
    else
    {
      PLL3_Clocks->PLL3_P_Frequency = 0U;
 800d61a:	687b      	ldr	r3, [r7, #4]
 800d61c:	2200      	movs	r2, #0
 800d61e:	601a      	str	r2, [r3, #0]
    }

    if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 800d620:	4b28      	ldr	r3, [pc, #160]	; (800d6c4 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 800d622:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d624:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d628:	2b00      	cmp	r3, #0
 800d62a:	d017      	beq.n	800d65c <HAL_RCCEx_GetPLL3ClockFreq+0x254>
    {
      PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800d62c:	4b25      	ldr	r3, [pc, #148]	; (800d6c4 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 800d62e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d630:	0c1b      	lsrs	r3, r3, #16
 800d632:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d636:	ee07 3a90 	vmov	s15, r3
 800d63a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL3DIVR_PLL3Q) >> RCC_PLL3DIVR_PLL3Q_Pos) + \
 800d63e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d642:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800d646:	edd7 6a07 	vldr	s13, [r7, #28]
 800d64a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d64e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d652:	ee17 2a90 	vmov	r2, s15
 800d656:	687b      	ldr	r3, [r7, #4]
 800d658:	605a      	str	r2, [r3, #4]
 800d65a:	e002      	b.n	800d662 <HAL_RCCEx_GetPLL3ClockFreq+0x25a>
                                                                     (float_t)1));
    }
    else
    {
      PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800d65c:	687b      	ldr	r3, [r7, #4]
 800d65e:	2200      	movs	r2, #0
 800d660:	605a      	str	r2, [r3, #4]
    }

    if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 800d662:	4b18      	ldr	r3, [pc, #96]	; (800d6c4 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 800d664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d666:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800d66a:	2b00      	cmp	r3, #0
 800d66c:	d017      	beq.n	800d69e <HAL_RCCEx_GetPLL3ClockFreq+0x296>
    {
      PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800d66e:	4b15      	ldr	r3, [pc, #84]	; (800d6c4 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 800d670:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d672:	0e1b      	lsrs	r3, r3, #24
 800d674:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d678:	ee07 3a90 	vmov	s15, r3
 800d67c:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL3DIVR_PLL3R) >> RCC_PLL3DIVR_PLL3R_Pos) + \
 800d680:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d684:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800d688:	edd7 6a07 	vldr	s13, [r7, #28]
 800d68c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d690:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d694:	ee17 2a90 	vmov	r2, s15
 800d698:	687b      	ldr	r3, [r7, #4]
 800d69a:	609a      	str	r2, [r3, #8]
  {
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }
}
 800d69c:	e00c      	b.n	800d6b8 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>
      PLL3_Clocks->PLL3_R_Frequency = 0U;
 800d69e:	687b      	ldr	r3, [r7, #4]
 800d6a0:	2200      	movs	r2, #0
 800d6a2:	609a      	str	r2, [r3, #8]
}
 800d6a4:	e008      	b.n	800d6b8 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800d6a6:	687b      	ldr	r3, [r7, #4]
 800d6a8:	2200      	movs	r2, #0
 800d6aa:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800d6ac:	687b      	ldr	r3, [r7, #4]
 800d6ae:	2200      	movs	r2, #0
 800d6b0:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800d6b2:	687b      	ldr	r3, [r7, #4]
 800d6b4:	2200      	movs	r2, #0
 800d6b6:	609a      	str	r2, [r3, #8]
}
 800d6b8:	bf00      	nop
 800d6ba:	3724      	adds	r7, #36	; 0x24
 800d6bc:	46bd      	mov	sp, r7
 800d6be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6c2:	4770      	bx	lr
 800d6c4:	46020c00 	.word	0x46020c00
 800d6c8:	4b742400 	.word	0x4b742400
 800d6cc:	46000000 	.word	0x46000000
 800d6d0:	08013a94 	.word	0x08013a94

0800d6d4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_FDCAN1 FDCAN1 peripheral clock
  *            @arg @ref RCC_PERIPHCLK_DAC1 DAC1 peripheral clock
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800d6d4:	b580      	push	{r7, lr}
 800d6d6:	b08e      	sub	sp, #56	; 0x38
 800d6d8:	af00      	add	r7, sp, #0
 800d6da:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 800d6de:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d6e2:	f5a2 2180 	sub.w	r1, r2, #262144	; 0x40000
 800d6e6:	430b      	orrs	r3, r1
 800d6e8:	d145      	bne.n	800d776 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 800d6ea:	4ba7      	ldr	r3, [pc, #668]	; (800d988 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800d6ec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800d6f0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d6f4:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 800d6f6:	4ba4      	ldr	r3, [pc, #656]	; (800d988 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800d6f8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800d6fc:	f003 0302 	and.w	r3, r3, #2
 800d700:	2b02      	cmp	r3, #2
 800d702:	d108      	bne.n	800d716 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 800d704:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d706:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d70a:	d104      	bne.n	800d716 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 800d70c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d710:	637b      	str	r3, [r7, #52]	; 0x34
 800d712:	f001 b8fc 	b.w	800e90e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 800d716:	4b9c      	ldr	r3, [pc, #624]	; (800d988 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800d718:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800d71c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d720:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d724:	d114      	bne.n	800d750 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 800d726:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d728:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d72c:	d110      	bne.n	800d750 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800d72e:	4b96      	ldr	r3, [pc, #600]	; (800d988 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800d730:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800d734:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d738:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800d73c:	d103      	bne.n	800d746 <HAL_RCCEx_GetPeriphCLKFreq+0x72>
      {
        frequency = LSI_VALUE / 128U;
 800d73e:	23fa      	movs	r3, #250	; 0xfa
 800d740:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800d742:	f001 b8e4 	b.w	800e90e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      else
      {
        frequency = LSI_VALUE;
 800d746:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800d74a:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800d74c:	f001 b8df 	b.w	800e90e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 800d750:	4b8d      	ldr	r3, [pc, #564]	; (800d988 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800d752:	681b      	ldr	r3, [r3, #0]
 800d754:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d758:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d75c:	d107      	bne.n	800d76e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 800d75e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d760:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800d764:	d103      	bne.n	800d76e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
    {
      frequency = HSE_VALUE / 32U;
 800d766:	4b89      	ldr	r3, [pc, #548]	; (800d98c <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 800d768:	637b      	str	r3, [r7, #52]	; 0x34
 800d76a:	f001 b8d0 	b.w	800e90e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 800d76e:	2300      	movs	r3, #0
 800d770:	637b      	str	r3, [r7, #52]	; 0x34
 800d772:	f001 b8cc 	b.w	800e90e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800d776:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d77a:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 800d77e:	430b      	orrs	r3, r1
 800d780:	d151      	bne.n	800d826 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 800d782:	4b81      	ldr	r3, [pc, #516]	; (800d988 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800d784:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800d788:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 800d78c:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 800d78e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d790:	2b80      	cmp	r3, #128	; 0x80
 800d792:	d035      	beq.n	800d800 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
 800d794:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d796:	2b80      	cmp	r3, #128	; 0x80
 800d798:	d841      	bhi.n	800d81e <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800d79a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d79c:	2b60      	cmp	r3, #96	; 0x60
 800d79e:	d02a      	beq.n	800d7f6 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
 800d7a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7a2:	2b60      	cmp	r3, #96	; 0x60
 800d7a4:	d83b      	bhi.n	800d81e <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800d7a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7a8:	2b40      	cmp	r3, #64	; 0x40
 800d7aa:	d009      	beq.n	800d7c0 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800d7ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7ae:	2b40      	cmp	r3, #64	; 0x40
 800d7b0:	d835      	bhi.n	800d81e <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800d7b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7b4:	2b00      	cmp	r3, #0
 800d7b6:	d00c      	beq.n	800d7d2 <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
 800d7b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7ba:	2b20      	cmp	r3, #32
 800d7bc:	d012      	beq.n	800d7e4 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 800d7be:	e02e      	b.n	800d81e <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
    {
      case RCC_SAI1CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800d7c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d7c4:	4618      	mov	r0, r3
 800d7c6:	f7ff fb53 	bl	800ce70 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800d7ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7cc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800d7ce:	f001 b89e 	b.w	800e90e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d7d2:	f107 0318 	add.w	r3, r7, #24
 800d7d6:	4618      	mov	r0, r3
 800d7d8:	f7ff fcb0 	bl	800d13c <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 800d7dc:	69bb      	ldr	r3, [r7, #24]
 800d7de:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800d7e0:	f001 b895 	b.w	800e90e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI1CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d7e4:	f107 030c 	add.w	r3, r7, #12
 800d7e8:	4618      	mov	r0, r3
 800d7ea:	f7ff fe0d 	bl	800d408 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 800d7ee:	68fb      	ldr	r3, [r7, #12]
 800d7f0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800d7f2:	f001 b88c 	b.w	800e90e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800d7f6:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800d7fa:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800d7fc:	f001 b887 	b.w	800e90e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI1CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800d800:	4b61      	ldr	r3, [pc, #388]	; (800d988 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800d802:	681b      	ldr	r3, [r3, #0]
 800d804:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d808:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d80c:	d103      	bne.n	800d816 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        {
          frequency = HSI_VALUE;
 800d80e:	4b60      	ldr	r3, [pc, #384]	; (800d990 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800d810:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800d812:	f001 b87c 	b.w	800e90e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
          frequency = 0U;
 800d816:	2300      	movs	r3, #0
 800d818:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800d81a:	f001 b878 	b.w	800e90e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default :
      {
        frequency = 0U;
 800d81e:	2300      	movs	r3, #0
 800d820:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800d822:	f001 b874 	b.w	800e90e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI2)
 800d826:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d82a:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 800d82e:	430b      	orrs	r3, r1
 800d830:	d158      	bne.n	800d8e4 <HAL_RCCEx_GetPeriphCLKFreq+0x210>
  {
    srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 800d832:	4b55      	ldr	r3, [pc, #340]	; (800d988 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800d834:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800d838:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800d83c:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 800d83e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d840:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d844:	d03b      	beq.n	800d8be <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 800d846:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d848:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d84c:	d846      	bhi.n	800d8dc <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 800d84e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d850:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800d854:	d02e      	beq.n	800d8b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
 800d856:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d858:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800d85c:	d83e      	bhi.n	800d8dc <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 800d85e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d860:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d864:	d00b      	beq.n	800d87e <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 800d866:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d868:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d86c:	d836      	bhi.n	800d8dc <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 800d86e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d870:	2b00      	cmp	r3, #0
 800d872:	d00d      	beq.n	800d890 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 800d874:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d876:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d87a:	d012      	beq.n	800d8a2 <HAL_RCCEx_GetPeriphCLKFreq+0x1ce>
 800d87c:	e02e      	b.n	800d8dc <HAL_RCCEx_GetPeriphCLKFreq+0x208>
    {
      case RCC_SAI2CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800d87e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d882:	4618      	mov	r0, r3
 800d884:	f7ff faf4 	bl	800ce70 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800d888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d88a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800d88c:	f001 b83f 	b.w	800e90e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d890:	f107 0318 	add.w	r3, r7, #24
 800d894:	4618      	mov	r0, r3
 800d896:	f7ff fc51 	bl	800d13c <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 800d89a:	69bb      	ldr	r3, [r7, #24]
 800d89c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800d89e:	f001 b836 	b.w	800e90e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI2CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d8a2:	f107 030c 	add.w	r3, r7, #12
 800d8a6:	4618      	mov	r0, r3
 800d8a8:	f7ff fdae 	bl	800d408 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 800d8ac:	68fb      	ldr	r3, [r7, #12]
 800d8ae:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800d8b0:	f001 b82d 	b.w	800e90e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI2CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800d8b4:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800d8b8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800d8ba:	f001 b828 	b.w	800e90e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI2CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800d8be:	4b32      	ldr	r3, [pc, #200]	; (800d988 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800d8c0:	681b      	ldr	r3, [r3, #0]
 800d8c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d8c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d8ca:	d103      	bne.n	800d8d4 <HAL_RCCEx_GetPeriphCLKFreq+0x200>
        {
          frequency = HSI_VALUE;
 800d8cc:	4b30      	ldr	r3, [pc, #192]	; (800d990 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800d8ce:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800d8d0:	f001 b81d 	b.w	800e90e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
          frequency = 0U;
 800d8d4:	2300      	movs	r3, #0
 800d8d6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800d8d8:	f001 b819 	b.w	800e90e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default :

        frequency = 0U;
 800d8dc:	2300      	movs	r3, #0
 800d8de:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800d8e0:	f001 b815 	b.w	800e90e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAES)
 800d8e4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d8e8:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 800d8ec:	430b      	orrs	r3, r1
 800d8ee:	d126      	bne.n	800d93e <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
  {
    /* Get the current SAES source */
    srcclk = __HAL_RCC_GET_SAES_SOURCE();
 800d8f0:	4b25      	ldr	r3, [pc, #148]	; (800d988 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800d8f2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800d8f6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d8fa:	633b      	str	r3, [r7, #48]	; 0x30

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI))
 800d8fc:	4b22      	ldr	r3, [pc, #136]	; (800d988 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800d8fe:	681b      	ldr	r3, [r3, #0]
 800d900:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d904:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d908:	d106      	bne.n	800d918 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 800d90a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d90c:	2b00      	cmp	r3, #0
 800d90e:	d103      	bne.n	800d918 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
    {
      frequency = HSI_VALUE;
 800d910:	4b1f      	ldr	r3, [pc, #124]	; (800d990 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800d912:	637b      	str	r3, [r7, #52]	; 0x34
 800d914:	f000 bffb 	b.w	800e90e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI_DIV2))
 800d918:	4b1b      	ldr	r3, [pc, #108]	; (800d988 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800d91a:	681b      	ldr	r3, [r3, #0]
 800d91c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d920:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d924:	d107      	bne.n	800d936 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
 800d926:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d928:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d92c:	d103      	bne.n	800d936 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
    {
      frequency = HSI_VALUE >> 1U;
 800d92e:	4b19      	ldr	r3, [pc, #100]	; (800d994 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800d930:	637b      	str	r3, [r7, #52]	; 0x34
 800d932:	f000 bfec 	b.w	800e90e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for SAES */
    else
    {
      frequency = 0U;
 800d936:	2300      	movs	r3, #0
 800d938:	637b      	str	r3, [r7, #52]	; 0x34
 800d93a:	f000 bfe8 	b.w	800e90e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ICLK)
 800d93e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d942:	f5a2 1180 	sub.w	r1, r2, #1048576	; 0x100000
 800d946:	430b      	orrs	r3, r1
 800d948:	d164      	bne.n	800da14 <HAL_RCCEx_GetPeriphCLKFreq+0x340>
  {
    srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 800d94a:	4b0f      	ldr	r3, [pc, #60]	; (800d988 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800d94c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800d950:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 800d954:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 800d956:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d958:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800d95c:	d03d      	beq.n	800d9da <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 800d95e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d960:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800d964:	d852      	bhi.n	800da0c <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 800d966:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d968:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d96c:	d014      	beq.n	800d998 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
 800d96e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d970:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d974:	d84a      	bhi.n	800da0c <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 800d976:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d978:	2b00      	cmp	r3, #0
 800d97a:	d01f      	beq.n	800d9bc <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>
 800d97c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d97e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800d982:	d012      	beq.n	800d9aa <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
 800d984:	e042      	b.n	800da0c <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 800d986:	bf00      	nop
 800d988:	46020c00 	.word	0x46020c00
 800d98c:	0007a120 	.word	0x0007a120
 800d990:	00f42400 	.word	0x00f42400
 800d994:	007a1200 	.word	0x007a1200
    {
      case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800d998:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d99c:	4618      	mov	r0, r3
 800d99e:	f7ff fa67 	bl	800ce70 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 800d9a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d9a4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800d9a6:	f000 bfb2 	b.w	800e90e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d9aa:	f107 0318 	add.w	r3, r7, #24
 800d9ae:	4618      	mov	r0, r3
 800d9b0:	f7ff fbc4 	bl	800d13c <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 800d9b4:	69fb      	ldr	r3, [r7, #28]
 800d9b6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800d9b8:	f000 bfa9 	b.w	800e90e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 800d9bc:	4bab      	ldr	r3, [pc, #684]	; (800dc6c <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800d9be:	681b      	ldr	r3, [r3, #0]
 800d9c0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800d9c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d9c8:	d103      	bne.n	800d9d2 <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
        {
          frequency = HSI48_VALUE;
 800d9ca:	4ba9      	ldr	r3, [pc, #676]	; (800dc70 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800d9cc:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800d9ce:	f000 bf9e 	b.w	800e90e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
          frequency = 0U;
 800d9d2:	2300      	movs	r3, #0
 800d9d4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800d9d6:	f000 bf9a 	b.w	800e90e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800d9da:	4ba4      	ldr	r3, [pc, #656]	; (800dc6c <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800d9dc:	689b      	ldr	r3, [r3, #8]
 800d9de:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d9e2:	2b00      	cmp	r3, #0
 800d9e4:	d005      	beq.n	800d9f2 <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 800d9e6:	4ba1      	ldr	r3, [pc, #644]	; (800dc6c <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800d9e8:	689b      	ldr	r3, [r3, #8]
 800d9ea:	0e1b      	lsrs	r3, r3, #24
 800d9ec:	f003 030f 	and.w	r3, r3, #15
 800d9f0:	e006      	b.n	800da00 <HAL_RCCEx_GetPeriphCLKFreq+0x32c>
 800d9f2:	4b9e      	ldr	r3, [pc, #632]	; (800dc6c <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800d9f4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800d9f8:	041b      	lsls	r3, r3, #16
 800d9fa:	0e1b      	lsrs	r3, r3, #24
 800d9fc:	f003 030f 	and.w	r3, r3, #15
 800da00:	4a9c      	ldr	r2, [pc, #624]	; (800dc74 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>)
 800da02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800da06:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800da08:	f000 bf81 	b.w	800e90e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default :

        frequency = 0U;
 800da0c:	2300      	movs	r3, #0
 800da0e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800da10:	f000 bf7d 	b.w	800e90e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800da14:	e9d7 2300 	ldrd	r2, r3, [r7]
 800da18:	f5a2 1100 	sub.w	r1, r2, #2097152	; 0x200000
 800da1c:	430b      	orrs	r3, r1
 800da1e:	d175      	bne.n	800db0c <HAL_RCCEx_GetPeriphCLKFreq+0x438>
  {
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800da20:	4b92      	ldr	r3, [pc, #584]	; (800dc6c <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800da22:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800da26:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800da2a:	633b      	str	r3, [r7, #48]	; 0x30
    if (srcclk == RCC_SDMMCCLKSOURCE_CLK48)
 800da2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da2e:	2b00      	cmp	r3, #0
 800da30:	d15b      	bne.n	800daea <HAL_RCCEx_GetPeriphCLKFreq+0x416>
    {
      srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 800da32:	4b8e      	ldr	r3, [pc, #568]	; (800dc6c <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800da34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800da38:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 800da3c:	633b      	str	r3, [r7, #48]	; 0x30

      switch (srcclk)
 800da3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da40:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800da44:	d034      	beq.n	800dab0 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800da46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da48:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800da4c:	d849      	bhi.n	800dae2 <HAL_RCCEx_GetPeriphCLKFreq+0x40e>
 800da4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da50:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800da54:	d00b      	beq.n	800da6e <HAL_RCCEx_GetPeriphCLKFreq+0x39a>
 800da56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da58:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800da5c:	d841      	bhi.n	800dae2 <HAL_RCCEx_GetPeriphCLKFreq+0x40e>
 800da5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da60:	2b00      	cmp	r3, #0
 800da62:	d016      	beq.n	800da92 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 800da64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da66:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800da6a:	d009      	beq.n	800da80 <HAL_RCCEx_GetPeriphCLKFreq+0x3ac>
 800da6c:	e039      	b.n	800dae2 <HAL_RCCEx_GetPeriphCLKFreq+0x40e>
      {
        case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800da6e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800da72:	4618      	mov	r0, r3
 800da74:	f7ff f9fc 	bl	800ce70 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800da78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da7a:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 800da7c:	f000 bf47 	b.w	800e90e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
        }
        case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800da80:	f107 0318 	add.w	r3, r7, #24
 800da84:	4618      	mov	r0, r3
 800da86:	f7ff fb59 	bl	800d13c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800da8a:	69fb      	ldr	r3, [r7, #28]
 800da8c:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 800da8e:	f000 bf3e 	b.w	800e90e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
        }
        case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 800da92:	4b76      	ldr	r3, [pc, #472]	; (800dc6c <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800da94:	681b      	ldr	r3, [r3, #0]
 800da96:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800da9a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800da9e:	d103      	bne.n	800daa8 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
          {
            frequency = HSI48_VALUE;
 800daa0:	4b73      	ldr	r3, [pc, #460]	; (800dc70 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800daa2:	637b      	str	r3, [r7, #52]	; 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 800daa4:	f000 bf33 	b.w	800e90e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
            frequency = 0U;
 800daa8:	2300      	movs	r3, #0
 800daaa:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 800daac:	f000 bf2f 	b.w	800e90e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
        }
        case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800dab0:	4b6e      	ldr	r3, [pc, #440]	; (800dc6c <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800dab2:	689b      	ldr	r3, [r3, #8]
 800dab4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800dab8:	2b00      	cmp	r3, #0
 800daba:	d005      	beq.n	800dac8 <HAL_RCCEx_GetPeriphCLKFreq+0x3f4>
 800dabc:	4b6b      	ldr	r3, [pc, #428]	; (800dc6c <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800dabe:	689b      	ldr	r3, [r3, #8]
 800dac0:	0e1b      	lsrs	r3, r3, #24
 800dac2:	f003 030f 	and.w	r3, r3, #15
 800dac6:	e006      	b.n	800dad6 <HAL_RCCEx_GetPeriphCLKFreq+0x402>
 800dac8:	4b68      	ldr	r3, [pc, #416]	; (800dc6c <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800daca:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800dace:	041b      	lsls	r3, r3, #16
 800dad0:	0e1b      	lsrs	r3, r3, #24
 800dad2:	f003 030f 	and.w	r3, r3, #15
 800dad6:	4a67      	ldr	r2, [pc, #412]	; (800dc74 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>)
 800dad8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800dadc:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 800dade:	f000 bf16 	b.w	800e90e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
        }
        default :
        {
          frequency = 0U;
 800dae2:	2300      	movs	r3, #0
 800dae4:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 800dae6:	f000 bf12 	b.w	800e90e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
        }
      }
    }
    else if (srcclk == RCC_SDMMCCLKSOURCE_PLL1)
 800daea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800daec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800daf0:	d108      	bne.n	800db04 <HAL_RCCEx_GetPeriphCLKFreq+0x430>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800daf2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800daf6:	4618      	mov	r0, r3
 800daf8:	f7ff f9ba 	bl	800ce70 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 800dafc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dafe:	637b      	str	r3, [r7, #52]	; 0x34
 800db00:	f000 bf05 	b.w	800e90e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else
    {
      frequency = 0U;
 800db04:	2300      	movs	r3, #0
 800db06:	637b      	str	r3, [r7, #52]	; 0x34
 800db08:	f000 bf01 	b.w	800e90e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART1)
 800db0c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800db10:	1e51      	subs	r1, r2, #1
 800db12:	430b      	orrs	r3, r1
 800db14:	d136      	bne.n	800db84 <HAL_RCCEx_GetPeriphCLKFreq+0x4b0>
  {
    /* Get the current USART1 source */
    srcclk = __HAL_RCC_GET_USART1_SOURCE();
 800db16:	4b55      	ldr	r3, [pc, #340]	; (800dc6c <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800db18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800db1c:	f003 0303 	and.w	r3, r3, #3
 800db20:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 800db22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db24:	2b00      	cmp	r3, #0
 800db26:	d104      	bne.n	800db32 <HAL_RCCEx_GetPeriphCLKFreq+0x45e>
    {
      frequency = HAL_RCC_GetPCLK2Freq();
 800db28:	f7fe fafc 	bl	800c124 <HAL_RCC_GetPCLK2Freq>
 800db2c:	6378      	str	r0, [r7, #52]	; 0x34
 800db2e:	f000 beee 	b.w	800e90e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 800db32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db34:	2b01      	cmp	r3, #1
 800db36:	d104      	bne.n	800db42 <HAL_RCCEx_GetPeriphCLKFreq+0x46e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800db38:	f7fe f9be 	bl	800beb8 <HAL_RCC_GetSysClockFreq>
 800db3c:	6378      	str	r0, [r7, #52]	; 0x34
 800db3e:	f000 bee6 	b.w	800e90e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 800db42:	4b4a      	ldr	r3, [pc, #296]	; (800dc6c <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800db44:	681b      	ldr	r3, [r3, #0]
 800db46:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800db4a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800db4e:	d106      	bne.n	800db5e <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 800db50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db52:	2b02      	cmp	r3, #2
 800db54:	d103      	bne.n	800db5e <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
    {
      frequency = HSI_VALUE;
 800db56:	4b48      	ldr	r3, [pc, #288]	; (800dc78 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 800db58:	637b      	str	r3, [r7, #52]	; 0x34
 800db5a:	f000 bed8 	b.w	800e90e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 800db5e:	4b43      	ldr	r3, [pc, #268]	; (800dc6c <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800db60:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800db64:	f003 0302 	and.w	r3, r3, #2
 800db68:	2b02      	cmp	r3, #2
 800db6a:	d107      	bne.n	800db7c <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
 800db6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db6e:	2b03      	cmp	r3, #3
 800db70:	d104      	bne.n	800db7c <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
    {
      frequency = LSE_VALUE;
 800db72:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800db76:	637b      	str	r3, [r7, #52]	; 0x34
 800db78:	f000 bec9 	b.w	800e90e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for USART1 */
    else
    {
      frequency = 0U;
 800db7c:	2300      	movs	r3, #0
 800db7e:	637b      	str	r3, [r7, #52]	; 0x34
 800db80:	f000 bec5 	b.w	800e90e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART2)
 800db84:	e9d7 2300 	ldrd	r2, r3, [r7]
 800db88:	1e91      	subs	r1, r2, #2
 800db8a:	430b      	orrs	r3, r1
 800db8c:	d136      	bne.n	800dbfc <HAL_RCCEx_GetPeriphCLKFreq+0x528>
  {
    /* Get the current USART2 source */
    srcclk = __HAL_RCC_GET_USART2_SOURCE();
 800db8e:	4b37      	ldr	r3, [pc, #220]	; (800dc6c <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800db90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800db94:	f003 030c 	and.w	r3, r3, #12
 800db98:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 800db9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db9c:	2b00      	cmp	r3, #0
 800db9e:	d104      	bne.n	800dbaa <HAL_RCCEx_GetPeriphCLKFreq+0x4d6>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800dba0:	f7fe faac 	bl	800c0fc <HAL_RCC_GetPCLK1Freq>
 800dba4:	6378      	str	r0, [r7, #52]	; 0x34
 800dba6:	f000 beb2 	b.w	800e90e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 800dbaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbac:	2b04      	cmp	r3, #4
 800dbae:	d104      	bne.n	800dbba <HAL_RCCEx_GetPeriphCLKFreq+0x4e6>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800dbb0:	f7fe f982 	bl	800beb8 <HAL_RCC_GetSysClockFreq>
 800dbb4:	6378      	str	r0, [r7, #52]	; 0x34
 800dbb6:	f000 beaa 	b.w	800e90e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 800dbba:	4b2c      	ldr	r3, [pc, #176]	; (800dc6c <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800dbbc:	681b      	ldr	r3, [r3, #0]
 800dbbe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800dbc2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800dbc6:	d106      	bne.n	800dbd6 <HAL_RCCEx_GetPeriphCLKFreq+0x502>
 800dbc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbca:	2b08      	cmp	r3, #8
 800dbcc:	d103      	bne.n	800dbd6 <HAL_RCCEx_GetPeriphCLKFreq+0x502>
    {
      frequency = HSI_VALUE;
 800dbce:	4b2a      	ldr	r3, [pc, #168]	; (800dc78 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 800dbd0:	637b      	str	r3, [r7, #52]	; 0x34
 800dbd2:	f000 be9c 	b.w	800e90e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 800dbd6:	4b25      	ldr	r3, [pc, #148]	; (800dc6c <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800dbd8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800dbdc:	f003 0302 	and.w	r3, r3, #2
 800dbe0:	2b02      	cmp	r3, #2
 800dbe2:	d107      	bne.n	800dbf4 <HAL_RCCEx_GetPeriphCLKFreq+0x520>
 800dbe4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbe6:	2b0c      	cmp	r3, #12
 800dbe8:	d104      	bne.n	800dbf4 <HAL_RCCEx_GetPeriphCLKFreq+0x520>
    {
      frequency = LSE_VALUE;
 800dbea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800dbee:	637b      	str	r3, [r7, #52]	; 0x34
 800dbf0:	f000 be8d 	b.w	800e90e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for USART2 */
    else
    {
      frequency = 0U;
 800dbf4:	2300      	movs	r3, #0
 800dbf6:	637b      	str	r3, [r7, #52]	; 0x34
 800dbf8:	f000 be89 	b.w	800e90e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART3)
 800dbfc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800dc00:	1f11      	subs	r1, r2, #4
 800dc02:	430b      	orrs	r3, r1
 800dc04:	d13e      	bne.n	800dc84 <HAL_RCCEx_GetPeriphCLKFreq+0x5b0>
  {
    /* Get the current USART3 source */
    srcclk = __HAL_RCC_GET_USART3_SOURCE();
 800dc06:	4b19      	ldr	r3, [pc, #100]	; (800dc6c <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800dc08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800dc0c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800dc10:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 800dc12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc14:	2b00      	cmp	r3, #0
 800dc16:	d104      	bne.n	800dc22 <HAL_RCCEx_GetPeriphCLKFreq+0x54e>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800dc18:	f7fe fa70 	bl	800c0fc <HAL_RCC_GetPCLK1Freq>
 800dc1c:	6378      	str	r0, [r7, #52]	; 0x34
 800dc1e:	f000 be76 	b.w	800e90e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 800dc22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc24:	2b10      	cmp	r3, #16
 800dc26:	d104      	bne.n	800dc32 <HAL_RCCEx_GetPeriphCLKFreq+0x55e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800dc28:	f7fe f946 	bl	800beb8 <HAL_RCC_GetSysClockFreq>
 800dc2c:	6378      	str	r0, [r7, #52]	; 0x34
 800dc2e:	f000 be6e 	b.w	800e90e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 800dc32:	4b0e      	ldr	r3, [pc, #56]	; (800dc6c <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800dc34:	681b      	ldr	r3, [r3, #0]
 800dc36:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800dc3a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800dc3e:	d106      	bne.n	800dc4e <HAL_RCCEx_GetPeriphCLKFreq+0x57a>
 800dc40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc42:	2b20      	cmp	r3, #32
 800dc44:	d103      	bne.n	800dc4e <HAL_RCCEx_GetPeriphCLKFreq+0x57a>
    {
      frequency = HSI_VALUE;
 800dc46:	4b0c      	ldr	r3, [pc, #48]	; (800dc78 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 800dc48:	637b      	str	r3, [r7, #52]	; 0x34
 800dc4a:	f000 be60 	b.w	800e90e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 800dc4e:	4b07      	ldr	r3, [pc, #28]	; (800dc6c <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800dc50:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800dc54:	f003 0302 	and.w	r3, r3, #2
 800dc58:	2b02      	cmp	r3, #2
 800dc5a:	d10f      	bne.n	800dc7c <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 800dc5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc5e:	2b30      	cmp	r3, #48	; 0x30
 800dc60:	d10c      	bne.n	800dc7c <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
    {
      frequency = LSE_VALUE;
 800dc62:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800dc66:	637b      	str	r3, [r7, #52]	; 0x34
 800dc68:	f000 be51 	b.w	800e90e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
 800dc6c:	46020c00 	.word	0x46020c00
 800dc70:	02dc6c00 	.word	0x02dc6c00
 800dc74:	08013a94 	.word	0x08013a94
 800dc78:	00f42400 	.word	0x00f42400
    }
    /* Clock not enabled for USART3 */
    else
    {
      frequency = 0U;
 800dc7c:	2300      	movs	r3, #0
 800dc7e:	637b      	str	r3, [r7, #52]	; 0x34
 800dc80:	f000 be45 	b.w	800e90e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART4)
 800dc84:	e9d7 2300 	ldrd	r2, r3, [r7]
 800dc88:	f1a2 0108 	sub.w	r1, r2, #8
 800dc8c:	430b      	orrs	r3, r1
 800dc8e:	d136      	bne.n	800dcfe <HAL_RCCEx_GetPeriphCLKFreq+0x62a>
  {
    /* Get the current UART4 source */
    srcclk = __HAL_RCC_GET_UART4_SOURCE();
 800dc90:	4b9f      	ldr	r3, [pc, #636]	; (800df10 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800dc92:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800dc96:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800dc9a:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 800dc9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc9e:	2b00      	cmp	r3, #0
 800dca0:	d104      	bne.n	800dcac <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800dca2:	f7fe fa2b 	bl	800c0fc <HAL_RCC_GetPCLK1Freq>
 800dca6:	6378      	str	r0, [r7, #52]	; 0x34
 800dca8:	f000 be31 	b.w	800e90e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 800dcac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dcae:	2b40      	cmp	r3, #64	; 0x40
 800dcb0:	d104      	bne.n	800dcbc <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800dcb2:	f7fe f901 	bl	800beb8 <HAL_RCC_GetSysClockFreq>
 800dcb6:	6378      	str	r0, [r7, #52]	; 0x34
 800dcb8:	f000 be29 	b.w	800e90e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 800dcbc:	4b94      	ldr	r3, [pc, #592]	; (800df10 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800dcbe:	681b      	ldr	r3, [r3, #0]
 800dcc0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800dcc4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800dcc8:	d106      	bne.n	800dcd8 <HAL_RCCEx_GetPeriphCLKFreq+0x604>
 800dcca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dccc:	2b80      	cmp	r3, #128	; 0x80
 800dcce:	d103      	bne.n	800dcd8 <HAL_RCCEx_GetPeriphCLKFreq+0x604>
    {
      frequency = HSI_VALUE;
 800dcd0:	4b90      	ldr	r3, [pc, #576]	; (800df14 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800dcd2:	637b      	str	r3, [r7, #52]	; 0x34
 800dcd4:	f000 be1b 	b.w	800e90e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 800dcd8:	4b8d      	ldr	r3, [pc, #564]	; (800df10 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800dcda:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800dcde:	f003 0302 	and.w	r3, r3, #2
 800dce2:	2b02      	cmp	r3, #2
 800dce4:	d107      	bne.n	800dcf6 <HAL_RCCEx_GetPeriphCLKFreq+0x622>
 800dce6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dce8:	2bc0      	cmp	r3, #192	; 0xc0
 800dcea:	d104      	bne.n	800dcf6 <HAL_RCCEx_GetPeriphCLKFreq+0x622>
    {
      frequency = LSE_VALUE;
 800dcec:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800dcf0:	637b      	str	r3, [r7, #52]	; 0x34
 800dcf2:	f000 be0c 	b.w	800e90e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for UART4 */
    else
    {
      frequency = 0U;
 800dcf6:	2300      	movs	r3, #0
 800dcf8:	637b      	str	r3, [r7, #52]	; 0x34
 800dcfa:	f000 be08 	b.w	800e90e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART5)
 800dcfe:	e9d7 2300 	ldrd	r2, r3, [r7]
 800dd02:	f1a2 0110 	sub.w	r1, r2, #16
 800dd06:	430b      	orrs	r3, r1
 800dd08:	d139      	bne.n	800dd7e <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
  {
    /* Get the current UART5 source */
    srcclk = __HAL_RCC_GET_UART5_SOURCE();
 800dd0a:	4b81      	ldr	r3, [pc, #516]	; (800df10 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800dd0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800dd10:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800dd14:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 800dd16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd18:	2b00      	cmp	r3, #0
 800dd1a:	d104      	bne.n	800dd26 <HAL_RCCEx_GetPeriphCLKFreq+0x652>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800dd1c:	f7fe f9ee 	bl	800c0fc <HAL_RCC_GetPCLK1Freq>
 800dd20:	6378      	str	r0, [r7, #52]	; 0x34
 800dd22:	f000 bdf4 	b.w	800e90e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_UART5CLKSOURCE_SYSCLK)
 800dd26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd28:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800dd2c:	d104      	bne.n	800dd38 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800dd2e:	f7fe f8c3 	bl	800beb8 <HAL_RCC_GetSysClockFreq>
 800dd32:	6378      	str	r0, [r7, #52]	; 0x34
 800dd34:	f000 bdeb 	b.w	800e90e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 800dd38:	4b75      	ldr	r3, [pc, #468]	; (800df10 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800dd3a:	681b      	ldr	r3, [r3, #0]
 800dd3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800dd40:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800dd44:	d107      	bne.n	800dd56 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
 800dd46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd48:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800dd4c:	d103      	bne.n	800dd56 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
    {
      frequency = HSI_VALUE;
 800dd4e:	4b71      	ldr	r3, [pc, #452]	; (800df14 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800dd50:	637b      	str	r3, [r7, #52]	; 0x34
 800dd52:	f000 bddc 	b.w	800e90e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 800dd56:	4b6e      	ldr	r3, [pc, #440]	; (800df10 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800dd58:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800dd5c:	f003 0302 	and.w	r3, r3, #2
 800dd60:	2b02      	cmp	r3, #2
 800dd62:	d108      	bne.n	800dd76 <HAL_RCCEx_GetPeriphCLKFreq+0x6a2>
 800dd64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd66:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800dd6a:	d104      	bne.n	800dd76 <HAL_RCCEx_GetPeriphCLKFreq+0x6a2>
    {
      frequency = LSE_VALUE;
 800dd6c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800dd70:	637b      	str	r3, [r7, #52]	; 0x34
 800dd72:	f000 bdcc 	b.w	800e90e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 800dd76:	2300      	movs	r3, #0
 800dd78:	637b      	str	r3, [r7, #52]	; 0x34
 800dd7a:	f000 bdc8 	b.w	800e90e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    {
      frequency = 0U;
    }
  }
#endif /* USART6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPUART1)
 800dd7e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800dd82:	f1a2 0120 	sub.w	r1, r2, #32
 800dd86:	430b      	orrs	r3, r1
 800dd88:	d158      	bne.n	800de3c <HAL_RCCEx_GetPeriphCLKFreq+0x768>
  {
    /* Get the current LPUART1 source */
    srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 800dd8a:	4b61      	ldr	r3, [pc, #388]	; (800df10 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800dd8c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800dd90:	f003 0307 	and.w	r3, r3, #7
 800dd94:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 800dd96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd98:	2b00      	cmp	r3, #0
 800dd9a:	d104      	bne.n	800dda6 <HAL_RCCEx_GetPeriphCLKFreq+0x6d2>
    {
      frequency = HAL_RCC_GetPCLK3Freq();
 800dd9c:	f7fe f9d6 	bl	800c14c <HAL_RCC_GetPCLK3Freq>
 800dda0:	6378      	str	r0, [r7, #52]	; 0x34
 800dda2:	f000 bdb4 	b.w	800e90e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 800dda6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dda8:	2b01      	cmp	r3, #1
 800ddaa:	d104      	bne.n	800ddb6 <HAL_RCCEx_GetPeriphCLKFreq+0x6e2>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800ddac:	f7fe f884 	bl	800beb8 <HAL_RCC_GetSysClockFreq>
 800ddb0:	6378      	str	r0, [r7, #52]	; 0x34
 800ddb2:	f000 bdac 	b.w	800e90e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 800ddb6:	4b56      	ldr	r3, [pc, #344]	; (800df10 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800ddb8:	681b      	ldr	r3, [r3, #0]
 800ddba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ddbe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ddc2:	d106      	bne.n	800ddd2 <HAL_RCCEx_GetPeriphCLKFreq+0x6fe>
 800ddc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ddc6:	2b02      	cmp	r3, #2
 800ddc8:	d103      	bne.n	800ddd2 <HAL_RCCEx_GetPeriphCLKFreq+0x6fe>
    {
      frequency = HSI_VALUE;
 800ddca:	4b52      	ldr	r3, [pc, #328]	; (800df14 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800ddcc:	637b      	str	r3, [r7, #52]	; 0x34
 800ddce:	f000 bd9e 	b.w	800e90e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 800ddd2:	4b4f      	ldr	r3, [pc, #316]	; (800df10 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800ddd4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800ddd8:	f003 0302 	and.w	r3, r3, #2
 800dddc:	2b02      	cmp	r3, #2
 800ddde:	d107      	bne.n	800ddf0 <HAL_RCCEx_GetPeriphCLKFreq+0x71c>
 800dde0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dde2:	2b03      	cmp	r3, #3
 800dde4:	d104      	bne.n	800ddf0 <HAL_RCCEx_GetPeriphCLKFreq+0x71c>
    {
      frequency = LSE_VALUE;
 800dde6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ddea:	637b      	str	r3, [r7, #52]	; 0x34
 800ddec:	f000 bd8f 	b.w	800e90e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_MSIK))
 800ddf0:	4b47      	ldr	r3, [pc, #284]	; (800df10 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800ddf2:	681b      	ldr	r3, [r3, #0]
 800ddf4:	f003 0320 	and.w	r3, r3, #32
 800ddf8:	2b20      	cmp	r3, #32
 800ddfa:	d11b      	bne.n	800de34 <HAL_RCCEx_GetPeriphCLKFreq+0x760>
 800ddfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ddfe:	2b04      	cmp	r3, #4
 800de00:	d118      	bne.n	800de34 <HAL_RCCEx_GetPeriphCLKFreq+0x760>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800de02:	4b43      	ldr	r3, [pc, #268]	; (800df10 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800de04:	689b      	ldr	r3, [r3, #8]
 800de06:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800de0a:	2b00      	cmp	r3, #0
 800de0c:	d005      	beq.n	800de1a <HAL_RCCEx_GetPeriphCLKFreq+0x746>
 800de0e:	4b40      	ldr	r3, [pc, #256]	; (800df10 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800de10:	689b      	ldr	r3, [r3, #8]
 800de12:	0e1b      	lsrs	r3, r3, #24
 800de14:	f003 030f 	and.w	r3, r3, #15
 800de18:	e006      	b.n	800de28 <HAL_RCCEx_GetPeriphCLKFreq+0x754>
 800de1a:	4b3d      	ldr	r3, [pc, #244]	; (800df10 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800de1c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800de20:	041b      	lsls	r3, r3, #16
 800de22:	0e1b      	lsrs	r3, r3, #24
 800de24:	f003 030f 	and.w	r3, r3, #15
 800de28:	4a3b      	ldr	r2, [pc, #236]	; (800df18 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 800de2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800de2e:	637b      	str	r3, [r7, #52]	; 0x34
 800de30:	f000 bd6d 	b.w	800e90e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for LPUART1 */
    else
    {
      frequency = 0U;
 800de34:	2300      	movs	r3, #0
 800de36:	637b      	str	r3, [r7, #52]	; 0x34
 800de38:	f000 bd69 	b.w	800e90e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADCDAC)
 800de3c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800de40:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 800de44:	430b      	orrs	r3, r1
 800de46:	d169      	bne.n	800df1c <HAL_RCCEx_GetPeriphCLKFreq+0x848>
  {
    srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 800de48:	4b31      	ldr	r3, [pc, #196]	; (800df10 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800de4a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800de4e:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800de52:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 800de54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de56:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800de5a:	d104      	bne.n	800de66 <HAL_RCCEx_GetPeriphCLKFreq+0x792>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800de5c:	f7fe f82c 	bl	800beb8 <HAL_RCC_GetSysClockFreq>
 800de60:	6378      	str	r0, [r7, #52]	; 0x34
 800de62:	f000 bd54 	b.w	800e90e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2)
 800de66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de68:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800de6c:	d108      	bne.n	800de80 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800de6e:	f107 0318 	add.w	r3, r7, #24
 800de72:	4618      	mov	r0, r3
 800de74:	f7ff f962 	bl	800d13c <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_R_Frequency;
 800de78:	6a3b      	ldr	r3, [r7, #32]
 800de7a:	637b      	str	r3, [r7, #52]	; 0x34
 800de7c:	f000 bd47 	b.w	800e90e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 800de80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de82:	2b00      	cmp	r3, #0
 800de84:	d104      	bne.n	800de90 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
    {
      frequency = HAL_RCC_GetHCLKFreq();
 800de86:	f7fe f91f 	bl	800c0c8 <HAL_RCC_GetHCLKFreq>
 800de8a:	6378      	str	r0, [r7, #52]	; 0x34
 800de8c:	f000 bd3f 	b.w	800e90e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_MSIK)
 800de90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de92:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800de96:	d118      	bne.n	800deca <HAL_RCCEx_GetPeriphCLKFreq+0x7f6>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)];
 800de98:	4b1d      	ldr	r3, [pc, #116]	; (800df10 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800de9a:	689b      	ldr	r3, [r3, #8]
 800de9c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800dea0:	2b00      	cmp	r3, #0
 800dea2:	d005      	beq.n	800deb0 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
 800dea4:	4b1a      	ldr	r3, [pc, #104]	; (800df10 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800dea6:	689b      	ldr	r3, [r3, #8]
 800dea8:	0f1b      	lsrs	r3, r3, #28
 800deaa:	f003 030f 	and.w	r3, r3, #15
 800deae:	e006      	b.n	800debe <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
 800deb0:	4b17      	ldr	r3, [pc, #92]	; (800df10 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800deb2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800deb6:	041b      	lsls	r3, r3, #16
 800deb8:	0f1b      	lsrs	r3, r3, #28
 800deba:	f003 030f 	and.w	r3, r3, #15
 800debe:	4a16      	ldr	r2, [pc, #88]	; (800df18 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 800dec0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800dec4:	637b      	str	r3, [r7, #52]	; 0x34
 800dec6:	f000 bd22 	b.w	800e90e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 800deca:	4b11      	ldr	r3, [pc, #68]	; (800df10 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800decc:	681b      	ldr	r3, [r3, #0]
 800dece:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ded2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ded6:	d107      	bne.n	800dee8 <HAL_RCCEx_GetPeriphCLKFreq+0x814>
 800ded8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800deda:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800dede:	d103      	bne.n	800dee8 <HAL_RCCEx_GetPeriphCLKFreq+0x814>
    {
      frequency = HSE_VALUE;
 800dee0:	4b0c      	ldr	r3, [pc, #48]	; (800df14 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800dee2:	637b      	str	r3, [r7, #52]	; 0x34
 800dee4:	f000 bd13 	b.w	800e90e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 800dee8:	4b09      	ldr	r3, [pc, #36]	; (800df10 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800deea:	681b      	ldr	r3, [r3, #0]
 800deec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800def0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800def4:	d107      	bne.n	800df06 <HAL_RCCEx_GetPeriphCLKFreq+0x832>
 800def6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800def8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800defc:	d103      	bne.n	800df06 <HAL_RCCEx_GetPeriphCLKFreq+0x832>
    {
      frequency = HSI_VALUE;
 800defe:	4b05      	ldr	r3, [pc, #20]	; (800df14 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800df00:	637b      	str	r3, [r7, #52]	; 0x34
 800df02:	f000 bd04 	b.w	800e90e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for ADC */
    else
    {
      frequency = 0U;
 800df06:	2300      	movs	r3, #0
 800df08:	637b      	str	r3, [r7, #52]	; 0x34
 800df0a:	f000 bd00 	b.w	800e90e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
 800df0e:	bf00      	nop
 800df10:	46020c00 	.word	0x46020c00
 800df14:	00f42400 	.word	0x00f42400
 800df18:	08013a94 	.word	0x08013a94
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_MDF1)
 800df1c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800df20:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 800df24:	430b      	orrs	r3, r1
 800df26:	d14e      	bne.n	800dfc6 <HAL_RCCEx_GetPeriphCLKFreq+0x8f2>
  {
    /* Get the current MDF1 source */
    srcclk = __HAL_RCC_GET_MDF1_SOURCE();
 800df28:	4ba8      	ldr	r3, [pc, #672]	; (800e1cc <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800df2a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800df2e:	f003 0307 	and.w	r3, r3, #7
 800df32:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 800df34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df36:	2b04      	cmp	r3, #4
 800df38:	d841      	bhi.n	800dfbe <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 800df3a:	a201      	add	r2, pc, #4	; (adr r2, 800df40 <HAL_RCCEx_GetPeriphCLKFreq+0x86c>)
 800df3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800df40:	0800df79 	.word	0x0800df79
 800df44:	0800df55 	.word	0x0800df55
 800df48:	0800df67 	.word	0x0800df67
 800df4c:	0800df83 	.word	0x0800df83
 800df50:	0800df8d 	.word	0x0800df8d
    {
      case RCC_MDF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800df54:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800df58:	4618      	mov	r0, r3
 800df5a:	f7fe ff89 	bl	800ce70 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800df5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df60:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800df62:	f000 bcd4 	b.w	800e90e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_MDF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800df66:	f107 030c 	add.w	r3, r7, #12
 800df6a:	4618      	mov	r0, r3
 800df6c:	f7ff fa4c 	bl	800d408 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 800df70:	693b      	ldr	r3, [r7, #16]
 800df72:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800df74:	f000 bccb 	b.w	800e90e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_MDF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 800df78:	f7fe f8a6 	bl	800c0c8 <HAL_RCC_GetHCLKFreq>
 800df7c:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800df7e:	f000 bcc6 	b.w	800e90e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_MDF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800df82:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800df86:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800df88:	f000 bcc1 	b.w	800e90e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_MDF1CLKSOURCE_MSIK:

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800df8c:	4b8f      	ldr	r3, [pc, #572]	; (800e1cc <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800df8e:	689b      	ldr	r3, [r3, #8]
 800df90:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800df94:	2b00      	cmp	r3, #0
 800df96:	d005      	beq.n	800dfa4 <HAL_RCCEx_GetPeriphCLKFreq+0x8d0>
 800df98:	4b8c      	ldr	r3, [pc, #560]	; (800e1cc <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800df9a:	689b      	ldr	r3, [r3, #8]
 800df9c:	0e1b      	lsrs	r3, r3, #24
 800df9e:	f003 030f 	and.w	r3, r3, #15
 800dfa2:	e006      	b.n	800dfb2 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 800dfa4:	4b89      	ldr	r3, [pc, #548]	; (800e1cc <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800dfa6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800dfaa:	041b      	lsls	r3, r3, #16
 800dfac:	0e1b      	lsrs	r3, r3, #24
 800dfae:	f003 030f 	and.w	r3, r3, #15
 800dfb2:	4a87      	ldr	r2, [pc, #540]	; (800e1d0 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800dfb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800dfb8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800dfba:	f000 bca8 	b.w	800e90e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default:

        frequency = 0U;
 800dfbe:	2300      	movs	r3, #0
 800dfc0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800dfc2:	f000 bca4 	b.w	800e90e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADF1)
 800dfc6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800dfca:	f5a2 3100 	sub.w	r1, r2, #131072	; 0x20000
 800dfce:	430b      	orrs	r3, r1
 800dfd0:	d15d      	bne.n	800e08e <HAL_RCCEx_GetPeriphCLKFreq+0x9ba>
  {
    /* Get the current ADF1 source */
    srcclk = __HAL_RCC_GET_ADF1_SOURCE();
 800dfd2:	4b7e      	ldr	r3, [pc, #504]	; (800e1cc <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800dfd4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800dfd8:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800dfdc:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 800dfde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dfe0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800dfe4:	d036      	beq.n	800e054 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 800dfe6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dfe8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800dfec:	d84b      	bhi.n	800e086 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
 800dfee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dff0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800dff4:	d029      	beq.n	800e04a <HAL_RCCEx_GetPeriphCLKFreq+0x976>
 800dff6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dff8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800dffc:	d843      	bhi.n	800e086 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
 800dffe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e000:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800e004:	d013      	beq.n	800e02e <HAL_RCCEx_GetPeriphCLKFreq+0x95a>
 800e006:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e008:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800e00c:	d83b      	bhi.n	800e086 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
 800e00e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e010:	2b00      	cmp	r3, #0
 800e012:	d015      	beq.n	800e040 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>
 800e014:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e016:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e01a:	d134      	bne.n	800e086 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
    {
      case RCC_ADF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800e01c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e020:	4618      	mov	r0, r3
 800e022:	f7fe ff25 	bl	800ce70 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800e026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e028:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800e02a:	f000 bc70 	b.w	800e90e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ADF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e02e:	f107 030c 	add.w	r3, r7, #12
 800e032:	4618      	mov	r0, r3
 800e034:	f7ff f9e8 	bl	800d408 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 800e038:	693b      	ldr	r3, [r7, #16]
 800e03a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800e03c:	f000 bc67 	b.w	800e90e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ADF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 800e040:	f7fe f842 	bl	800c0c8 <HAL_RCC_GetHCLKFreq>
 800e044:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800e046:	f000 bc62 	b.w	800e90e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ADF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800e04a:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800e04e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800e050:	f000 bc5d 	b.w	800e90e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ADF1CLKSOURCE_MSIK:

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800e054:	4b5d      	ldr	r3, [pc, #372]	; (800e1cc <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800e056:	689b      	ldr	r3, [r3, #8]
 800e058:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e05c:	2b00      	cmp	r3, #0
 800e05e:	d005      	beq.n	800e06c <HAL_RCCEx_GetPeriphCLKFreq+0x998>
 800e060:	4b5a      	ldr	r3, [pc, #360]	; (800e1cc <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800e062:	689b      	ldr	r3, [r3, #8]
 800e064:	0e1b      	lsrs	r3, r3, #24
 800e066:	f003 030f 	and.w	r3, r3, #15
 800e06a:	e006      	b.n	800e07a <HAL_RCCEx_GetPeriphCLKFreq+0x9a6>
 800e06c:	4b57      	ldr	r3, [pc, #348]	; (800e1cc <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800e06e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800e072:	041b      	lsls	r3, r3, #16
 800e074:	0e1b      	lsrs	r3, r3, #24
 800e076:	f003 030f 	and.w	r3, r3, #15
 800e07a:	4a55      	ldr	r2, [pc, #340]	; (800e1d0 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800e07c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e080:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800e082:	f000 bc44 	b.w	800e90e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default:

        frequency = 0U;
 800e086:	2300      	movs	r3, #0
 800e088:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800e08a:	f000 bc40 	b.w	800e90e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C1)
 800e08e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e092:	f1a2 0140 	sub.w	r1, r2, #64	; 0x40
 800e096:	430b      	orrs	r3, r1
 800e098:	d14a      	bne.n	800e130 <HAL_RCCEx_GetPeriphCLKFreq+0xa5c>
  {
    /* Get the current I2C1 source */
    srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 800e09a:	4b4c      	ldr	r3, [pc, #304]	; (800e1cc <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800e09c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800e0a0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800e0a4:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 800e0a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e0a8:	2b00      	cmp	r3, #0
 800e0aa:	d104      	bne.n	800e0b6 <HAL_RCCEx_GetPeriphCLKFreq+0x9e2>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800e0ac:	f7fe f826 	bl	800c0fc <HAL_RCC_GetPCLK1Freq>
 800e0b0:	6378      	str	r0, [r7, #52]	; 0x34
 800e0b2:	f000 bc2c 	b.w	800e90e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 800e0b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e0b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e0bc:	d104      	bne.n	800e0c8 <HAL_RCCEx_GetPeriphCLKFreq+0x9f4>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800e0be:	f7fd fefb 	bl	800beb8 <HAL_RCC_GetSysClockFreq>
 800e0c2:	6378      	str	r0, [r7, #52]	; 0x34
 800e0c4:	f000 bc23 	b.w	800e90e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 800e0c8:	4b40      	ldr	r3, [pc, #256]	; (800e1cc <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800e0ca:	681b      	ldr	r3, [r3, #0]
 800e0cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800e0d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e0d4:	d107      	bne.n	800e0e6 <HAL_RCCEx_GetPeriphCLKFreq+0xa12>
 800e0d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e0d8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e0dc:	d103      	bne.n	800e0e6 <HAL_RCCEx_GetPeriphCLKFreq+0xa12>
    {
      frequency = HSI_VALUE;
 800e0de:	4b3d      	ldr	r3, [pc, #244]	; (800e1d4 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 800e0e0:	637b      	str	r3, [r7, #52]	; 0x34
 800e0e2:	f000 bc14 	b.w	800e90e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C1CLKSOURCE_MSIK))
 800e0e6:	4b39      	ldr	r3, [pc, #228]	; (800e1cc <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800e0e8:	681b      	ldr	r3, [r3, #0]
 800e0ea:	f003 0320 	and.w	r3, r3, #32
 800e0ee:	2b20      	cmp	r3, #32
 800e0f0:	d11b      	bne.n	800e12a <HAL_RCCEx_GetPeriphCLKFreq+0xa56>
 800e0f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e0f4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800e0f8:	d117      	bne.n	800e12a <HAL_RCCEx_GetPeriphCLKFreq+0xa56>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800e0fa:	4b34      	ldr	r3, [pc, #208]	; (800e1cc <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800e0fc:	689b      	ldr	r3, [r3, #8]
 800e0fe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e102:	2b00      	cmp	r3, #0
 800e104:	d005      	beq.n	800e112 <HAL_RCCEx_GetPeriphCLKFreq+0xa3e>
 800e106:	4b31      	ldr	r3, [pc, #196]	; (800e1cc <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800e108:	689b      	ldr	r3, [r3, #8]
 800e10a:	0e1b      	lsrs	r3, r3, #24
 800e10c:	f003 030f 	and.w	r3, r3, #15
 800e110:	e006      	b.n	800e120 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
 800e112:	4b2e      	ldr	r3, [pc, #184]	; (800e1cc <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800e114:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800e118:	041b      	lsls	r3, r3, #16
 800e11a:	0e1b      	lsrs	r3, r3, #24
 800e11c:	f003 030f 	and.w	r3, r3, #15
 800e120:	4a2b      	ldr	r2, [pc, #172]	; (800e1d0 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800e122:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e126:	637b      	str	r3, [r7, #52]	; 0x34
 800e128:	e3f1      	b.n	800e90e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for I2C1 */
    else
    {
      frequency = 0U;
 800e12a:	2300      	movs	r3, #0
 800e12c:	637b      	str	r3, [r7, #52]	; 0x34
 800e12e:	e3ee      	b.n	800e90e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C2)
 800e130:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e134:	f1a2 0180 	sub.w	r1, r2, #128	; 0x80
 800e138:	430b      	orrs	r3, r1
 800e13a:	d14d      	bne.n	800e1d8 <HAL_RCCEx_GetPeriphCLKFreq+0xb04>
  {
    /* Get the current I2C2 source */
    srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 800e13c:	4b23      	ldr	r3, [pc, #140]	; (800e1cc <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800e13e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800e142:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800e146:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 800e148:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e14a:	2b00      	cmp	r3, #0
 800e14c:	d103      	bne.n	800e156 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800e14e:	f7fd ffd5 	bl	800c0fc <HAL_RCC_GetPCLK1Freq>
 800e152:	6378      	str	r0, [r7, #52]	; 0x34
 800e154:	e3db      	b.n	800e90e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 800e156:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e158:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e15c:	d103      	bne.n	800e166 <HAL_RCCEx_GetPeriphCLKFreq+0xa92>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800e15e:	f7fd feab 	bl	800beb8 <HAL_RCC_GetSysClockFreq>
 800e162:	6378      	str	r0, [r7, #52]	; 0x34
 800e164:	e3d3      	b.n	800e90e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 800e166:	4b19      	ldr	r3, [pc, #100]	; (800e1cc <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800e168:	681b      	ldr	r3, [r3, #0]
 800e16a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800e16e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e172:	d106      	bne.n	800e182 <HAL_RCCEx_GetPeriphCLKFreq+0xaae>
 800e174:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e176:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e17a:	d102      	bne.n	800e182 <HAL_RCCEx_GetPeriphCLKFreq+0xaae>
    {
      frequency = HSI_VALUE;
 800e17c:	4b15      	ldr	r3, [pc, #84]	; (800e1d4 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 800e17e:	637b      	str	r3, [r7, #52]	; 0x34
 800e180:	e3c5      	b.n	800e90e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C2CLKSOURCE_MSIK))
 800e182:	4b12      	ldr	r3, [pc, #72]	; (800e1cc <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800e184:	681b      	ldr	r3, [r3, #0]
 800e186:	f003 0320 	and.w	r3, r3, #32
 800e18a:	2b20      	cmp	r3, #32
 800e18c:	d11b      	bne.n	800e1c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaf2>
 800e18e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e190:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800e194:	d117      	bne.n	800e1c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaf2>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800e196:	4b0d      	ldr	r3, [pc, #52]	; (800e1cc <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800e198:	689b      	ldr	r3, [r3, #8]
 800e19a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e19e:	2b00      	cmp	r3, #0
 800e1a0:	d005      	beq.n	800e1ae <HAL_RCCEx_GetPeriphCLKFreq+0xada>
 800e1a2:	4b0a      	ldr	r3, [pc, #40]	; (800e1cc <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800e1a4:	689b      	ldr	r3, [r3, #8]
 800e1a6:	0e1b      	lsrs	r3, r3, #24
 800e1a8:	f003 030f 	and.w	r3, r3, #15
 800e1ac:	e006      	b.n	800e1bc <HAL_RCCEx_GetPeriphCLKFreq+0xae8>
 800e1ae:	4b07      	ldr	r3, [pc, #28]	; (800e1cc <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800e1b0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800e1b4:	041b      	lsls	r3, r3, #16
 800e1b6:	0e1b      	lsrs	r3, r3, #24
 800e1b8:	f003 030f 	and.w	r3, r3, #15
 800e1bc:	4a04      	ldr	r2, [pc, #16]	; (800e1d0 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800e1be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e1c2:	637b      	str	r3, [r7, #52]	; 0x34
 800e1c4:	e3a3      	b.n	800e90e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for I2C2 */
    else
    {
      frequency = 0U;
 800e1c6:	2300      	movs	r3, #0
 800e1c8:	637b      	str	r3, [r7, #52]	; 0x34
 800e1ca:	e3a0      	b.n	800e90e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
 800e1cc:	46020c00 	.word	0x46020c00
 800e1d0:	08013a94 	.word	0x08013a94
 800e1d4:	00f42400 	.word	0x00f42400
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C3)
 800e1d8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e1dc:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 800e1e0:	430b      	orrs	r3, r1
 800e1e2:	d148      	bne.n	800e276 <HAL_RCCEx_GetPeriphCLKFreq+0xba2>
  {
    /* Get the current I2C3 source */
    srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 800e1e4:	4b9d      	ldr	r3, [pc, #628]	; (800e45c <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800e1e6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800e1ea:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800e1ee:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 800e1f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e1f2:	2bc0      	cmp	r3, #192	; 0xc0
 800e1f4:	d024      	beq.n	800e240 <HAL_RCCEx_GetPeriphCLKFreq+0xb6c>
 800e1f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e1f8:	2bc0      	cmp	r3, #192	; 0xc0
 800e1fa:	d839      	bhi.n	800e270 <HAL_RCCEx_GetPeriphCLKFreq+0xb9c>
 800e1fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e1fe:	2b80      	cmp	r3, #128	; 0x80
 800e200:	d00d      	beq.n	800e21e <HAL_RCCEx_GetPeriphCLKFreq+0xb4a>
 800e202:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e204:	2b80      	cmp	r3, #128	; 0x80
 800e206:	d833      	bhi.n	800e270 <HAL_RCCEx_GetPeriphCLKFreq+0xb9c>
 800e208:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e20a:	2b00      	cmp	r3, #0
 800e20c:	d003      	beq.n	800e216 <HAL_RCCEx_GetPeriphCLKFreq+0xb42>
 800e20e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e210:	2b40      	cmp	r3, #64	; 0x40
 800e212:	d011      	beq.n	800e238 <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
 800e214:	e02c      	b.n	800e270 <HAL_RCCEx_GetPeriphCLKFreq+0xb9c>
    {
      case RCC_I2C3CLKSOURCE_PCLK3:
      {
        frequency = HAL_RCC_GetPCLK3Freq();
 800e216:	f7fd ff99 	bl	800c14c <HAL_RCC_GetPCLK3Freq>
 800e21a:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800e21c:	e377      	b.n	800e90e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      case RCC_I2C3CLKSOURCE_HSI:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800e21e:	4b8f      	ldr	r3, [pc, #572]	; (800e45c <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800e220:	681b      	ldr	r3, [r3, #0]
 800e222:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800e226:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e22a:	d102      	bne.n	800e232 <HAL_RCCEx_GetPeriphCLKFreq+0xb5e>
        {
          frequency = HSI_VALUE;
 800e22c:	4b8c      	ldr	r3, [pc, #560]	; (800e460 <HAL_RCCEx_GetPeriphCLKFreq+0xd8c>)
 800e22e:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800e230:	e36d      	b.n	800e90e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
          frequency = 0U;
 800e232:	2300      	movs	r3, #0
 800e234:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800e236:	e36a      	b.n	800e90e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      case RCC_I2C3CLKSOURCE_SYSCLK:
      {
        frequency = HAL_RCC_GetSysClockFreq();
 800e238:	f7fd fe3e 	bl	800beb8 <HAL_RCC_GetSysClockFreq>
 800e23c:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800e23e:	e366      	b.n	800e90e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      case RCC_I2C3CLKSOURCE_MSIK:
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)];
 800e240:	4b86      	ldr	r3, [pc, #536]	; (800e45c <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800e242:	689b      	ldr	r3, [r3, #8]
 800e244:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e248:	2b00      	cmp	r3, #0
 800e24a:	d005      	beq.n	800e258 <HAL_RCCEx_GetPeriphCLKFreq+0xb84>
 800e24c:	4b83      	ldr	r3, [pc, #524]	; (800e45c <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800e24e:	689b      	ldr	r3, [r3, #8]
 800e250:	0f1b      	lsrs	r3, r3, #28
 800e252:	f003 030f 	and.w	r3, r3, #15
 800e256:	e006      	b.n	800e266 <HAL_RCCEx_GetPeriphCLKFreq+0xb92>
 800e258:	4b80      	ldr	r3, [pc, #512]	; (800e45c <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800e25a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800e25e:	041b      	lsls	r3, r3, #16
 800e260:	0f1b      	lsrs	r3, r3, #28
 800e262:	f003 030f 	and.w	r3, r3, #15
 800e266:	4a7f      	ldr	r2, [pc, #508]	; (800e464 <HAL_RCCEx_GetPeriphCLKFreq+0xd90>)
 800e268:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e26c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800e26e:	e34e      	b.n	800e90e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      default:
      {
        frequency = 0U;
 800e270:	2300      	movs	r3, #0
 800e272:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800e274:	e34b      	b.n	800e90e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C4)
 800e276:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e27a:	f5a2 0180 	sub.w	r1, r2, #4194304	; 0x400000
 800e27e:	430b      	orrs	r3, r1
 800e280:	d147      	bne.n	800e312 <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
  {
    /* Get the current I2C4 source */
    srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 800e282:	4b76      	ldr	r3, [pc, #472]	; (800e45c <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800e284:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800e288:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800e28c:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C4CLKSOURCE_PCLK1)
 800e28e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e290:	2b00      	cmp	r3, #0
 800e292:	d103      	bne.n	800e29c <HAL_RCCEx_GetPeriphCLKFreq+0xbc8>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800e294:	f7fd ff32 	bl	800c0fc <HAL_RCC_GetPCLK1Freq>
 800e298:	6378      	str	r0, [r7, #52]	; 0x34
 800e29a:	e338      	b.n	800e90e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_I2C4CLKSOURCE_SYSCLK)
 800e29c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e29e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800e2a2:	d103      	bne.n	800e2ac <HAL_RCCEx_GetPeriphCLKFreq+0xbd8>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800e2a4:	f7fd fe08 	bl	800beb8 <HAL_RCC_GetSysClockFreq>
 800e2a8:	6378      	str	r0, [r7, #52]	; 0x34
 800e2aa:	e330      	b.n	800e90e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 800e2ac:	4b6b      	ldr	r3, [pc, #428]	; (800e45c <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800e2ae:	681b      	ldr	r3, [r3, #0]
 800e2b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800e2b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e2b8:	d106      	bne.n	800e2c8 <HAL_RCCEx_GetPeriphCLKFreq+0xbf4>
 800e2ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e2bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e2c0:	d102      	bne.n	800e2c8 <HAL_RCCEx_GetPeriphCLKFreq+0xbf4>
    {
      frequency = HSI_VALUE;
 800e2c2:	4b67      	ldr	r3, [pc, #412]	; (800e460 <HAL_RCCEx_GetPeriphCLKFreq+0xd8c>)
 800e2c4:	637b      	str	r3, [r7, #52]	; 0x34
 800e2c6:	e322      	b.n	800e90e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C4CLKSOURCE_MSIK))
 800e2c8:	4b64      	ldr	r3, [pc, #400]	; (800e45c <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800e2ca:	681b      	ldr	r3, [r3, #0]
 800e2cc:	f003 0320 	and.w	r3, r3, #32
 800e2d0:	2b20      	cmp	r3, #32
 800e2d2:	d11b      	bne.n	800e30c <HAL_RCCEx_GetPeriphCLKFreq+0xc38>
 800e2d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e2d6:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800e2da:	d117      	bne.n	800e30c <HAL_RCCEx_GetPeriphCLKFreq+0xc38>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800e2dc:	4b5f      	ldr	r3, [pc, #380]	; (800e45c <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800e2de:	689b      	ldr	r3, [r3, #8]
 800e2e0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e2e4:	2b00      	cmp	r3, #0
 800e2e6:	d005      	beq.n	800e2f4 <HAL_RCCEx_GetPeriphCLKFreq+0xc20>
 800e2e8:	4b5c      	ldr	r3, [pc, #368]	; (800e45c <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800e2ea:	689b      	ldr	r3, [r3, #8]
 800e2ec:	0e1b      	lsrs	r3, r3, #24
 800e2ee:	f003 030f 	and.w	r3, r3, #15
 800e2f2:	e006      	b.n	800e302 <HAL_RCCEx_GetPeriphCLKFreq+0xc2e>
 800e2f4:	4b59      	ldr	r3, [pc, #356]	; (800e45c <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800e2f6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800e2fa:	041b      	lsls	r3, r3, #16
 800e2fc:	0e1b      	lsrs	r3, r3, #24
 800e2fe:	f003 030f 	and.w	r3, r3, #15
 800e302:	4a58      	ldr	r2, [pc, #352]	; (800e464 <HAL_RCCEx_GetPeriphCLKFreq+0xd90>)
 800e304:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e308:	637b      	str	r3, [r7, #52]	; 0x34
 800e30a:	e300      	b.n	800e90e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for I2C4 */
    else
    {
      frequency = 0U;
 800e30c:	2300      	movs	r3, #0
 800e30e:	637b      	str	r3, [r7, #52]	; 0x34
 800e310:	e2fd      	b.n	800e90e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    {
      frequency = 0U;
    }
  }
#endif /* I2C6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM34)
 800e312:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e316:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 800e31a:	430b      	orrs	r3, r1
 800e31c:	d15b      	bne.n	800e3d6 <HAL_RCCEx_GetPeriphCLKFreq+0xd02>
  {
    /* Get the current LPTIM34 source */
    srcclk = __HAL_RCC_GET_LPTIM34_SOURCE();
 800e31e:	4b4f      	ldr	r3, [pc, #316]	; (800e45c <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800e320:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800e324:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e328:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM34CLKSOURCE_MSIK)
 800e32a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e32c:	2b00      	cmp	r3, #0
 800e32e:	d117      	bne.n	800e360 <HAL_RCCEx_GetPeriphCLKFreq+0xc8c>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800e330:	4b4a      	ldr	r3, [pc, #296]	; (800e45c <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800e332:	689b      	ldr	r3, [r3, #8]
 800e334:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e338:	2b00      	cmp	r3, #0
 800e33a:	d005      	beq.n	800e348 <HAL_RCCEx_GetPeriphCLKFreq+0xc74>
 800e33c:	4b47      	ldr	r3, [pc, #284]	; (800e45c <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800e33e:	689b      	ldr	r3, [r3, #8]
 800e340:	0e1b      	lsrs	r3, r3, #24
 800e342:	f003 030f 	and.w	r3, r3, #15
 800e346:	e006      	b.n	800e356 <HAL_RCCEx_GetPeriphCLKFreq+0xc82>
 800e348:	4b44      	ldr	r3, [pc, #272]	; (800e45c <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800e34a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800e34e:	041b      	lsls	r3, r3, #16
 800e350:	0e1b      	lsrs	r3, r3, #24
 800e352:	f003 030f 	and.w	r3, r3, #15
 800e356:	4a43      	ldr	r2, [pc, #268]	; (800e464 <HAL_RCCEx_GetPeriphCLKFreq+0xd90>)
 800e358:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e35c:	637b      	str	r3, [r7, #52]	; 0x34
 800e35e:	e2d6      	b.n	800e90e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSI))
 800e360:	4b3e      	ldr	r3, [pc, #248]	; (800e45c <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800e362:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800e366:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800e36a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800e36e:	d112      	bne.n	800e396 <HAL_RCCEx_GetPeriphCLKFreq+0xcc2>
 800e370:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e372:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e376:	d10e      	bne.n	800e396 <HAL_RCCEx_GetPeriphCLKFreq+0xcc2>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800e378:	4b38      	ldr	r3, [pc, #224]	; (800e45c <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800e37a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800e37e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e382:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800e386:	d102      	bne.n	800e38e <HAL_RCCEx_GetPeriphCLKFreq+0xcba>
      {
        frequency = LSI_VALUE / 128U;
 800e388:	23fa      	movs	r3, #250	; 0xfa
 800e38a:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800e38c:	e2bf      	b.n	800e90e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      else
      {
        frequency = LSI_VALUE;
 800e38e:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800e392:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800e394:	e2bb      	b.n	800e90e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_HSI))
 800e396:	4b31      	ldr	r3, [pc, #196]	; (800e45c <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800e398:	681b      	ldr	r3, [r3, #0]
 800e39a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800e39e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e3a2:	d106      	bne.n	800e3b2 <HAL_RCCEx_GetPeriphCLKFreq+0xcde>
 800e3a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e3a6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e3aa:	d102      	bne.n	800e3b2 <HAL_RCCEx_GetPeriphCLKFreq+0xcde>
    {
      frequency = HSI_VALUE;
 800e3ac:	4b2c      	ldr	r3, [pc, #176]	; (800e460 <HAL_RCCEx_GetPeriphCLKFreq+0xd8c>)
 800e3ae:	637b      	str	r3, [r7, #52]	; 0x34
 800e3b0:	e2ad      	b.n	800e90e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSE))
 800e3b2:	4b2a      	ldr	r3, [pc, #168]	; (800e45c <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800e3b4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800e3b8:	f003 0302 	and.w	r3, r3, #2
 800e3bc:	2b02      	cmp	r3, #2
 800e3be:	d107      	bne.n	800e3d0 <HAL_RCCEx_GetPeriphCLKFreq+0xcfc>
 800e3c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e3c2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800e3c6:	d103      	bne.n	800e3d0 <HAL_RCCEx_GetPeriphCLKFreq+0xcfc>
    {
      frequency = LSE_VALUE;
 800e3c8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e3cc:	637b      	str	r3, [r7, #52]	; 0x34
 800e3ce:	e29e      	b.n	800e90e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for LPTIM34 */
    else
    {
      frequency = 0U;
 800e3d0:	2300      	movs	r3, #0
 800e3d2:	637b      	str	r3, [r7, #52]	; 0x34
 800e3d4:	e29b      	b.n	800e90e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM1)
 800e3d6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e3da:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 800e3de:	430b      	orrs	r3, r1
 800e3e0:	d162      	bne.n	800e4a8 <HAL_RCCEx_GetPeriphCLKFreq+0xdd4>
  {
    /* Get the current LPTIM1 source */
    srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 800e3e2:	4b1e      	ldr	r3, [pc, #120]	; (800e45c <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800e3e4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800e3e8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800e3ec:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM1CLKSOURCE_MSIK)
 800e3ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e3f0:	2b00      	cmp	r3, #0
 800e3f2:	d117      	bne.n	800e424 <HAL_RCCEx_GetPeriphCLKFreq+0xd50>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800e3f4:	4b19      	ldr	r3, [pc, #100]	; (800e45c <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800e3f6:	689b      	ldr	r3, [r3, #8]
 800e3f8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e3fc:	2b00      	cmp	r3, #0
 800e3fe:	d005      	beq.n	800e40c <HAL_RCCEx_GetPeriphCLKFreq+0xd38>
 800e400:	4b16      	ldr	r3, [pc, #88]	; (800e45c <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800e402:	689b      	ldr	r3, [r3, #8]
 800e404:	0e1b      	lsrs	r3, r3, #24
 800e406:	f003 030f 	and.w	r3, r3, #15
 800e40a:	e006      	b.n	800e41a <HAL_RCCEx_GetPeriphCLKFreq+0xd46>
 800e40c:	4b13      	ldr	r3, [pc, #76]	; (800e45c <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800e40e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800e412:	041b      	lsls	r3, r3, #16
 800e414:	0e1b      	lsrs	r3, r3, #24
 800e416:	f003 030f 	and.w	r3, r3, #15
 800e41a:	4a12      	ldr	r2, [pc, #72]	; (800e464 <HAL_RCCEx_GetPeriphCLKFreq+0xd90>)
 800e41c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e420:	637b      	str	r3, [r7, #52]	; 0x34
 800e422:	e274      	b.n	800e90e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 800e424:	4b0d      	ldr	r3, [pc, #52]	; (800e45c <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800e426:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800e42a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800e42e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800e432:	d119      	bne.n	800e468 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>
 800e434:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e436:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e43a:	d115      	bne.n	800e468 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800e43c:	4b07      	ldr	r3, [pc, #28]	; (800e45c <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800e43e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800e442:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e446:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800e44a:	d102      	bne.n	800e452 <HAL_RCCEx_GetPeriphCLKFreq+0xd7e>
      {
        frequency = LSI_VALUE / 128U;
 800e44c:	23fa      	movs	r3, #250	; 0xfa
 800e44e:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800e450:	e25d      	b.n	800e90e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      else
      {
        frequency = LSI_VALUE;
 800e452:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800e456:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800e458:	e259      	b.n	800e90e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
 800e45a:	bf00      	nop
 800e45c:	46020c00 	.word	0x46020c00
 800e460:	00f42400 	.word	0x00f42400
 800e464:	08013a94 	.word	0x08013a94
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 800e468:	4b9d      	ldr	r3, [pc, #628]	; (800e6e0 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 800e46a:	681b      	ldr	r3, [r3, #0]
 800e46c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800e470:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e474:	d106      	bne.n	800e484 <HAL_RCCEx_GetPeriphCLKFreq+0xdb0>
 800e476:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e478:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e47c:	d102      	bne.n	800e484 <HAL_RCCEx_GetPeriphCLKFreq+0xdb0>
    {
      frequency = HSI_VALUE;
 800e47e:	4b99      	ldr	r3, [pc, #612]	; (800e6e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1010>)
 800e480:	637b      	str	r3, [r7, #52]	; 0x34
 800e482:	e244      	b.n	800e90e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 800e484:	4b96      	ldr	r3, [pc, #600]	; (800e6e0 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 800e486:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800e48a:	f003 0302 	and.w	r3, r3, #2
 800e48e:	2b02      	cmp	r3, #2
 800e490:	d107      	bne.n	800e4a2 <HAL_RCCEx_GetPeriphCLKFreq+0xdce>
 800e492:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e494:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800e498:	d103      	bne.n	800e4a2 <HAL_RCCEx_GetPeriphCLKFreq+0xdce>
    {
      frequency = LSE_VALUE;
 800e49a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e49e:	637b      	str	r3, [r7, #52]	; 0x34
 800e4a0:	e235      	b.n	800e90e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for LPTIM1 */
    else
    {
      frequency = 0U;
 800e4a2:	2300      	movs	r3, #0
 800e4a4:	637b      	str	r3, [r7, #52]	; 0x34
 800e4a6:	e232      	b.n	800e90e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM2)
 800e4a8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e4ac:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 800e4b0:	430b      	orrs	r3, r1
 800e4b2:	d147      	bne.n	800e544 <HAL_RCCEx_GetPeriphCLKFreq+0xe70>
  {
    /* Get the current LPTIM2 source */
    srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 800e4b4:	4b8a      	ldr	r3, [pc, #552]	; (800e6e0 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 800e4b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800e4ba:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 800e4be:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 800e4c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e4c2:	2b00      	cmp	r3, #0
 800e4c4:	d103      	bne.n	800e4ce <HAL_RCCEx_GetPeriphCLKFreq+0xdfa>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800e4c6:	f7fd fe19 	bl	800c0fc <HAL_RCC_GetPCLK1Freq>
 800e4ca:	6378      	str	r0, [r7, #52]	; 0x34
 800e4cc:	e21f      	b.n	800e90e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 800e4ce:	4b84      	ldr	r3, [pc, #528]	; (800e6e0 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 800e4d0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800e4d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800e4d8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800e4dc:	d112      	bne.n	800e504 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
 800e4de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e4e0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800e4e4:	d10e      	bne.n	800e504 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800e4e6:	4b7e      	ldr	r3, [pc, #504]	; (800e6e0 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 800e4e8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800e4ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e4f0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800e4f4:	d102      	bne.n	800e4fc <HAL_RCCEx_GetPeriphCLKFreq+0xe28>
      {
        frequency = LSI_VALUE / 128U;
 800e4f6:	23fa      	movs	r3, #250	; 0xfa
 800e4f8:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800e4fa:	e208      	b.n	800e90e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      else
      {
        frequency = LSI_VALUE;
 800e4fc:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800e500:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800e502:	e204      	b.n	800e90e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 800e504:	4b76      	ldr	r3, [pc, #472]	; (800e6e0 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 800e506:	681b      	ldr	r3, [r3, #0]
 800e508:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800e50c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e510:	d106      	bne.n	800e520 <HAL_RCCEx_GetPeriphCLKFreq+0xe4c>
 800e512:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e514:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800e518:	d102      	bne.n	800e520 <HAL_RCCEx_GetPeriphCLKFreq+0xe4c>
    {
      frequency = HSI_VALUE;
 800e51a:	4b72      	ldr	r3, [pc, #456]	; (800e6e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1010>)
 800e51c:	637b      	str	r3, [r7, #52]	; 0x34
 800e51e:	e1f6      	b.n	800e90e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 800e520:	4b6f      	ldr	r3, [pc, #444]	; (800e6e0 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 800e522:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800e526:	f003 0302 	and.w	r3, r3, #2
 800e52a:	2b02      	cmp	r3, #2
 800e52c:	d107      	bne.n	800e53e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 800e52e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e530:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800e534:	d103      	bne.n	800e53e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
    {
      frequency = LSE_VALUE;
 800e536:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e53a:	637b      	str	r3, [r7, #52]	; 0x34
 800e53c:	e1e7      	b.n	800e90e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for LPTIM2 */
    else
    {
      frequency = 0U;
 800e53e:	2300      	movs	r3, #0
 800e540:	637b      	str	r3, [r7, #52]	; 0x34
 800e542:	e1e4      	b.n	800e90e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN1)
 800e544:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e548:	f102 4178 	add.w	r1, r2, #4160749568	; 0xf8000000
 800e54c:	430b      	orrs	r3, r1
 800e54e:	d12d      	bne.n	800e5ac <HAL_RCCEx_GetPeriphCLKFreq+0xed8>
  {
    /* Get the current FDCAN1 kernel source */
    srcclk = __HAL_RCC_GET_FDCAN1_SOURCE();
 800e550:	4b63      	ldr	r3, [pc, #396]	; (800e6e0 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 800e552:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800e556:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 800e55a:	633b      	str	r3, [r7, #48]	; 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCAN1CLKSOURCE_HSE))
 800e55c:	4b60      	ldr	r3, [pc, #384]	; (800e6e0 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 800e55e:	681b      	ldr	r3, [r3, #0]
 800e560:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e564:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800e568:	d105      	bne.n	800e576 <HAL_RCCEx_GetPeriphCLKFreq+0xea2>
 800e56a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e56c:	2b00      	cmp	r3, #0
 800e56e:	d102      	bne.n	800e576 <HAL_RCCEx_GetPeriphCLKFreq+0xea2>
    {
      frequency = HSE_VALUE;
 800e570:	4b5c      	ldr	r3, [pc, #368]	; (800e6e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1010>)
 800e572:	637b      	str	r3, [r7, #52]	; 0x34
 800e574:	e1cb      	b.n	800e90e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL1) /* PLL1 ? */
 800e576:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e578:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800e57c:	d107      	bne.n	800e58e <HAL_RCCEx_GetPeriphCLKFreq+0xeba>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800e57e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e582:	4618      	mov	r0, r3
 800e584:	f7fe fc74 	bl	800ce70 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_Q_Frequency;
 800e588:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e58a:	637b      	str	r3, [r7, #52]	; 0x34
 800e58c:	e1bf      	b.n	800e90e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL2) /* PLL2 ? */
 800e58e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e590:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e594:	d107      	bne.n	800e5a6 <HAL_RCCEx_GetPeriphCLKFreq+0xed2>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e596:	f107 0318 	add.w	r3, r7, #24
 800e59a:	4618      	mov	r0, r3
 800e59c:	f7fe fdce 	bl	800d13c <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_P_Frequency;
 800e5a0:	69bb      	ldr	r3, [r7, #24]
 800e5a2:	637b      	str	r3, [r7, #52]	; 0x34
 800e5a4:	e1b3      	b.n	800e90e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for FDCAN1 */
    else
    {
      frequency = 0U;
 800e5a6:	2300      	movs	r3, #0
 800e5a8:	637b      	str	r3, [r7, #52]	; 0x34
 800e5aa:	e1b0      	b.n	800e90e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI1)
 800e5ac:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e5b0:	f5a2 0100 	sub.w	r1, r2, #8388608	; 0x800000
 800e5b4:	430b      	orrs	r3, r1
 800e5b6:	d14d      	bne.n	800e654 <HAL_RCCEx_GetPeriphCLKFreq+0xf80>
  {
    /* Get the current SPI1 kernel source */
    srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 800e5b8:	4b49      	ldr	r3, [pc, #292]	; (800e6e0 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 800e5ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800e5be:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800e5c2:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 800e5c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e5c6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800e5ca:	d028      	beq.n	800e61e <HAL_RCCEx_GetPeriphCLKFreq+0xf4a>
 800e5cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e5ce:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800e5d2:	d83c      	bhi.n	800e64e <HAL_RCCEx_GetPeriphCLKFreq+0xf7a>
 800e5d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e5d6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800e5da:	d013      	beq.n	800e604 <HAL_RCCEx_GetPeriphCLKFreq+0xf30>
 800e5dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e5de:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800e5e2:	d834      	bhi.n	800e64e <HAL_RCCEx_GetPeriphCLKFreq+0xf7a>
 800e5e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e5e6:	2b00      	cmp	r3, #0
 800e5e8:	d004      	beq.n	800e5f4 <HAL_RCCEx_GetPeriphCLKFreq+0xf20>
 800e5ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e5ec:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e5f0:	d004      	beq.n	800e5fc <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
 800e5f2:	e02c      	b.n	800e64e <HAL_RCCEx_GetPeriphCLKFreq+0xf7a>
    {
      case RCC_SPI1CLKSOURCE_PCLK2:

        frequency = HAL_RCC_GetPCLK2Freq();
 800e5f4:	f7fd fd96 	bl	800c124 <HAL_RCC_GetPCLK2Freq>
 800e5f8:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800e5fa:	e188      	b.n	800e90e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI1CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800e5fc:	f7fd fc5c 	bl	800beb8 <HAL_RCC_GetSysClockFreq>
 800e600:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800e602:	e184      	b.n	800e90e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI1CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800e604:	4b36      	ldr	r3, [pc, #216]	; (800e6e0 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 800e606:	681b      	ldr	r3, [r3, #0]
 800e608:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800e60c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e610:	d102      	bne.n	800e618 <HAL_RCCEx_GetPeriphCLKFreq+0xf44>
        {
          frequency = HSI_VALUE;
 800e612:	4b34      	ldr	r3, [pc, #208]	; (800e6e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1010>)
 800e614:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800e616:	e17a      	b.n	800e90e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
          frequency = 0U;
 800e618:	2300      	movs	r3, #0
 800e61a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800e61c:	e177      	b.n	800e90e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI1CLKSOURCE_MSIK:

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800e61e:	4b30      	ldr	r3, [pc, #192]	; (800e6e0 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 800e620:	689b      	ldr	r3, [r3, #8]
 800e622:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e626:	2b00      	cmp	r3, #0
 800e628:	d005      	beq.n	800e636 <HAL_RCCEx_GetPeriphCLKFreq+0xf62>
 800e62a:	4b2d      	ldr	r3, [pc, #180]	; (800e6e0 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 800e62c:	689b      	ldr	r3, [r3, #8]
 800e62e:	0e1b      	lsrs	r3, r3, #24
 800e630:	f003 030f 	and.w	r3, r3, #15
 800e634:	e006      	b.n	800e644 <HAL_RCCEx_GetPeriphCLKFreq+0xf70>
 800e636:	4b2a      	ldr	r3, [pc, #168]	; (800e6e0 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 800e638:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800e63c:	041b      	lsls	r3, r3, #16
 800e63e:	0e1b      	lsrs	r3, r3, #24
 800e640:	f003 030f 	and.w	r3, r3, #15
 800e644:	4a28      	ldr	r2, [pc, #160]	; (800e6e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1014>)
 800e646:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e64a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800e64c:	e15f      	b.n	800e90e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default:

        frequency = 0U;
 800e64e:	2300      	movs	r3, #0
 800e650:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800e652:	e15c      	b.n	800e90e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI2)
 800e654:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e658:	f102 417f 	add.w	r1, r2, #4278190080	; 0xff000000
 800e65c:	430b      	orrs	r3, r1
 800e65e:	d154      	bne.n	800e70a <HAL_RCCEx_GetPeriphCLKFreq+0x1036>
  {
    /* Get the current SPI2 kernel source */
    srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 800e660:	4b1f      	ldr	r3, [pc, #124]	; (800e6e0 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 800e662:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800e666:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800e66a:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 800e66c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e66e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800e672:	d028      	beq.n	800e6c6 <HAL_RCCEx_GetPeriphCLKFreq+0xff2>
 800e674:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e676:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800e67a:	d843      	bhi.n	800e704 <HAL_RCCEx_GetPeriphCLKFreq+0x1030>
 800e67c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e67e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800e682:	d013      	beq.n	800e6ac <HAL_RCCEx_GetPeriphCLKFreq+0xfd8>
 800e684:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e686:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800e68a:	d83b      	bhi.n	800e704 <HAL_RCCEx_GetPeriphCLKFreq+0x1030>
 800e68c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e68e:	2b00      	cmp	r3, #0
 800e690:	d004      	beq.n	800e69c <HAL_RCCEx_GetPeriphCLKFreq+0xfc8>
 800e692:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e694:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e698:	d004      	beq.n	800e6a4 <HAL_RCCEx_GetPeriphCLKFreq+0xfd0>
 800e69a:	e033      	b.n	800e704 <HAL_RCCEx_GetPeriphCLKFreq+0x1030>
    {
      case RCC_SPI2CLKSOURCE_PCLK1:

        frequency = HAL_RCC_GetPCLK1Freq();
 800e69c:	f7fd fd2e 	bl	800c0fc <HAL_RCC_GetPCLK1Freq>
 800e6a0:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800e6a2:	e134      	b.n	800e90e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI2CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800e6a4:	f7fd fc08 	bl	800beb8 <HAL_RCC_GetSysClockFreq>
 800e6a8:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800e6aa:	e130      	b.n	800e90e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI2CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800e6ac:	4b0c      	ldr	r3, [pc, #48]	; (800e6e0 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 800e6ae:	681b      	ldr	r3, [r3, #0]
 800e6b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800e6b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e6b8:	d102      	bne.n	800e6c0 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>
        {
          frequency = HSI_VALUE;
 800e6ba:	4b0a      	ldr	r3, [pc, #40]	; (800e6e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1010>)
 800e6bc:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800e6be:	e126      	b.n	800e90e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
          frequency = 0U;
 800e6c0:	2300      	movs	r3, #0
 800e6c2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800e6c4:	e123      	b.n	800e90e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI2CLKSOURCE_MSIK:

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800e6c6:	4b06      	ldr	r3, [pc, #24]	; (800e6e0 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 800e6c8:	689b      	ldr	r3, [r3, #8]
 800e6ca:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e6ce:	2b00      	cmp	r3, #0
 800e6d0:	d00c      	beq.n	800e6ec <HAL_RCCEx_GetPeriphCLKFreq+0x1018>
 800e6d2:	4b03      	ldr	r3, [pc, #12]	; (800e6e0 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 800e6d4:	689b      	ldr	r3, [r3, #8]
 800e6d6:	0e1b      	lsrs	r3, r3, #24
 800e6d8:	f003 030f 	and.w	r3, r3, #15
 800e6dc:	e00d      	b.n	800e6fa <HAL_RCCEx_GetPeriphCLKFreq+0x1026>
 800e6de:	bf00      	nop
 800e6e0:	46020c00 	.word	0x46020c00
 800e6e4:	00f42400 	.word	0x00f42400
 800e6e8:	08013a94 	.word	0x08013a94
 800e6ec:	4b8a      	ldr	r3, [pc, #552]	; (800e918 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 800e6ee:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800e6f2:	041b      	lsls	r3, r3, #16
 800e6f4:	0e1b      	lsrs	r3, r3, #24
 800e6f6:	f003 030f 	and.w	r3, r3, #15
 800e6fa:	4a88      	ldr	r2, [pc, #544]	; (800e91c <HAL_RCCEx_GetPeriphCLKFreq+0x1248>)
 800e6fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e700:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800e702:	e104      	b.n	800e90e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default:

        frequency = 0U;
 800e704:	2300      	movs	r3, #0
 800e706:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800e708:	e101      	b.n	800e90e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI3)
 800e70a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e70e:	f102 417e 	add.w	r1, r2, #4261412864	; 0xfe000000
 800e712:	430b      	orrs	r3, r1
 800e714:	d16e      	bne.n	800e7f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1120>
  {
    /* Get the current SPI3 kernel source */
    srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 800e716:	4b80      	ldr	r3, [pc, #512]	; (800e918 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 800e718:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800e71c:	f003 0318 	and.w	r3, r3, #24
 800e720:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 800e722:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e724:	2b18      	cmp	r3, #24
 800e726:	d862      	bhi.n	800e7ee <HAL_RCCEx_GetPeriphCLKFreq+0x111a>
 800e728:	a201      	add	r2, pc, #4	; (adr r2, 800e730 <HAL_RCCEx_GetPeriphCLKFreq+0x105c>)
 800e72a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e72e:	bf00      	nop
 800e730:	0800e795 	.word	0x0800e795
 800e734:	0800e7ef 	.word	0x0800e7ef
 800e738:	0800e7ef 	.word	0x0800e7ef
 800e73c:	0800e7ef 	.word	0x0800e7ef
 800e740:	0800e7ef 	.word	0x0800e7ef
 800e744:	0800e7ef 	.word	0x0800e7ef
 800e748:	0800e7ef 	.word	0x0800e7ef
 800e74c:	0800e7ef 	.word	0x0800e7ef
 800e750:	0800e79d 	.word	0x0800e79d
 800e754:	0800e7ef 	.word	0x0800e7ef
 800e758:	0800e7ef 	.word	0x0800e7ef
 800e75c:	0800e7ef 	.word	0x0800e7ef
 800e760:	0800e7ef 	.word	0x0800e7ef
 800e764:	0800e7ef 	.word	0x0800e7ef
 800e768:	0800e7ef 	.word	0x0800e7ef
 800e76c:	0800e7ef 	.word	0x0800e7ef
 800e770:	0800e7a5 	.word	0x0800e7a5
 800e774:	0800e7ef 	.word	0x0800e7ef
 800e778:	0800e7ef 	.word	0x0800e7ef
 800e77c:	0800e7ef 	.word	0x0800e7ef
 800e780:	0800e7ef 	.word	0x0800e7ef
 800e784:	0800e7ef 	.word	0x0800e7ef
 800e788:	0800e7ef 	.word	0x0800e7ef
 800e78c:	0800e7ef 	.word	0x0800e7ef
 800e790:	0800e7bf 	.word	0x0800e7bf
    {
      case RCC_SPI3CLKSOURCE_PCLK3:

        frequency = HAL_RCC_GetPCLK3Freq();
 800e794:	f7fd fcda 	bl	800c14c <HAL_RCC_GetPCLK3Freq>
 800e798:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800e79a:	e0b8      	b.n	800e90e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI3CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800e79c:	f7fd fb8c 	bl	800beb8 <HAL_RCC_GetSysClockFreq>
 800e7a0:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800e7a2:	e0b4      	b.n	800e90e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI3CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800e7a4:	4b5c      	ldr	r3, [pc, #368]	; (800e918 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 800e7a6:	681b      	ldr	r3, [r3, #0]
 800e7a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800e7ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e7b0:	d102      	bne.n	800e7b8 <HAL_RCCEx_GetPeriphCLKFreq+0x10e4>
        {
          frequency = HSI_VALUE;
 800e7b2:	4b5b      	ldr	r3, [pc, #364]	; (800e920 <HAL_RCCEx_GetPeriphCLKFreq+0x124c>)
 800e7b4:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800e7b6:	e0aa      	b.n	800e90e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
          frequency = 0U;
 800e7b8:	2300      	movs	r3, #0
 800e7ba:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800e7bc:	e0a7      	b.n	800e90e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI3CLKSOURCE_MSIK:

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800e7be:	4b56      	ldr	r3, [pc, #344]	; (800e918 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 800e7c0:	689b      	ldr	r3, [r3, #8]
 800e7c2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e7c6:	2b00      	cmp	r3, #0
 800e7c8:	d005      	beq.n	800e7d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1102>
 800e7ca:	4b53      	ldr	r3, [pc, #332]	; (800e918 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 800e7cc:	689b      	ldr	r3, [r3, #8]
 800e7ce:	0e1b      	lsrs	r3, r3, #24
 800e7d0:	f003 030f 	and.w	r3, r3, #15
 800e7d4:	e006      	b.n	800e7e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1110>
 800e7d6:	4b50      	ldr	r3, [pc, #320]	; (800e918 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 800e7d8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800e7dc:	041b      	lsls	r3, r3, #16
 800e7de:	0e1b      	lsrs	r3, r3, #24
 800e7e0:	f003 030f 	and.w	r3, r3, #15
 800e7e4:	4a4d      	ldr	r2, [pc, #308]	; (800e91c <HAL_RCCEx_GetPeriphCLKFreq+0x1248>)
 800e7e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e7ea:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800e7ec:	e08f      	b.n	800e90e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default:

        frequency = 0U;
 800e7ee:	2300      	movs	r3, #0
 800e7f0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800e7f2:	e08c      	b.n	800e90e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_OSPI)
 800e7f4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e7f8:	f102 417c 	add.w	r1, r2, #4227858432	; 0xfc000000
 800e7fc:	430b      	orrs	r3, r1
 800e7fe:	d14c      	bne.n	800e89a <HAL_RCCEx_GetPeriphCLKFreq+0x11c6>
  {
    /* Get the current OSPI kernel source */
    srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 800e800:	4b45      	ldr	r3, [pc, #276]	; (800e918 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 800e802:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800e806:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800e80a:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 800e80c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e80e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800e812:	d013      	beq.n	800e83c <HAL_RCCEx_GetPeriphCLKFreq+0x1168>
 800e814:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e816:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800e81a:	d83b      	bhi.n	800e894 <HAL_RCCEx_GetPeriphCLKFreq+0x11c0>
 800e81c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e81e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800e822:	d013      	beq.n	800e84c <HAL_RCCEx_GetPeriphCLKFreq+0x1178>
 800e824:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e826:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800e82a:	d833      	bhi.n	800e894 <HAL_RCCEx_GetPeriphCLKFreq+0x11c0>
 800e82c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e82e:	2b00      	cmp	r3, #0
 800e830:	d014      	beq.n	800e85c <HAL_RCCEx_GetPeriphCLKFreq+0x1188>
 800e832:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e834:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e838:	d014      	beq.n	800e864 <HAL_RCCEx_GetPeriphCLKFreq+0x1190>
 800e83a:	e02b      	b.n	800e894 <HAL_RCCEx_GetPeriphCLKFreq+0x11c0>
    {
      case RCC_OSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e83c:	f107 0318 	add.w	r3, r7, #24
 800e840:	4618      	mov	r0, r3
 800e842:	f7fe fc7b 	bl	800d13c <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 800e846:	69fb      	ldr	r3, [r7, #28]
 800e848:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800e84a:	e060      	b.n	800e90e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_OSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800e84c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e850:	4618      	mov	r0, r3
 800e852:	f7fe fb0d 	bl	800ce70 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 800e856:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e858:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800e85a:	e058      	b.n	800e90e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_OSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800e85c:	f7fd fb2c 	bl	800beb8 <HAL_RCC_GetSysClockFreq>
 800e860:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800e862:	e054      	b.n	800e90e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_OSPICLKSOURCE_MSIK:

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800e864:	4b2c      	ldr	r3, [pc, #176]	; (800e918 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 800e866:	689b      	ldr	r3, [r3, #8]
 800e868:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e86c:	2b00      	cmp	r3, #0
 800e86e:	d005      	beq.n	800e87c <HAL_RCCEx_GetPeriphCLKFreq+0x11a8>
 800e870:	4b29      	ldr	r3, [pc, #164]	; (800e918 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 800e872:	689b      	ldr	r3, [r3, #8]
 800e874:	0e1b      	lsrs	r3, r3, #24
 800e876:	f003 030f 	and.w	r3, r3, #15
 800e87a:	e006      	b.n	800e88a <HAL_RCCEx_GetPeriphCLKFreq+0x11b6>
 800e87c:	4b26      	ldr	r3, [pc, #152]	; (800e918 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 800e87e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800e882:	041b      	lsls	r3, r3, #16
 800e884:	0e1b      	lsrs	r3, r3, #24
 800e886:	f003 030f 	and.w	r3, r3, #15
 800e88a:	4a24      	ldr	r2, [pc, #144]	; (800e91c <HAL_RCCEx_GetPeriphCLKFreq+0x1248>)
 800e88c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e890:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800e892:	e03c      	b.n	800e90e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default:

        frequency = 0U;
 800e894:	2300      	movs	r3, #0
 800e896:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800e898:	e039      	b.n	800e90e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
        frequency = 0U;
        break;
    }
  }
#endif /* defined(HSPI1) */
  else if (PeriphClk == RCC_PERIPHCLK_DAC1)
 800e89a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e89e:	f102 4170 	add.w	r1, r2, #4026531840	; 0xf0000000
 800e8a2:	430b      	orrs	r3, r1
 800e8a4:	d131      	bne.n	800e90a <HAL_RCCEx_GetPeriphCLKFreq+0x1236>
  {
    /* Get the current DAC1 kernel source */
    srcclk = __HAL_RCC_GET_DAC1_SOURCE();
 800e8a6:	4b1c      	ldr	r3, [pc, #112]	; (800e918 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 800e8a8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800e8ac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e8b0:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if LSE is ready and if DAC1 clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSE))
 800e8b2:	4b19      	ldr	r3, [pc, #100]	; (800e918 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 800e8b4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800e8b8:	f003 0302 	and.w	r3, r3, #2
 800e8bc:	2b02      	cmp	r3, #2
 800e8be:	d106      	bne.n	800e8ce <HAL_RCCEx_GetPeriphCLKFreq+0x11fa>
 800e8c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e8c2:	2b00      	cmp	r3, #0
 800e8c4:	d103      	bne.n	800e8ce <HAL_RCCEx_GetPeriphCLKFreq+0x11fa>
    {
      frequency = LSE_VALUE;
 800e8c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e8ca:	637b      	str	r3, [r7, #52]	; 0x34
 800e8cc:	e01f      	b.n	800e90e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Check if LSI is ready and if DAC1 clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSI))
 800e8ce:	4b12      	ldr	r3, [pc, #72]	; (800e918 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 800e8d0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800e8d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800e8d8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800e8dc:	d112      	bne.n	800e904 <HAL_RCCEx_GetPeriphCLKFreq+0x1230>
 800e8de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e8e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e8e4:	d10e      	bne.n	800e904 <HAL_RCCEx_GetPeriphCLKFreq+0x1230>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800e8e6:	4b0c      	ldr	r3, [pc, #48]	; (800e918 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 800e8e8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800e8ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e8f0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800e8f4:	d102      	bne.n	800e8fc <HAL_RCCEx_GetPeriphCLKFreq+0x1228>
      {
        frequency = LSI_VALUE / 128U;
 800e8f6:	23fa      	movs	r3, #250	; 0xfa
 800e8f8:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800e8fa:	e008      	b.n	800e90e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      else
      {
        frequency = LSI_VALUE;
 800e8fc:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800e900:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800e902:	e004      	b.n	800e90e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
    }
    /* Clock not enabled for DAC1*/
    else
    {
      frequency = 0U;
 800e904:	2300      	movs	r3, #0
 800e906:	637b      	str	r3, [r7, #52]	; 0x34
 800e908:	e001      	b.n	800e90e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }

  }
  else
  {
    frequency = 0;
 800e90a:	2300      	movs	r3, #0
 800e90c:	637b      	str	r3, [r7, #52]	; 0x34
  }
  return (frequency);
 800e90e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800e910:	4618      	mov	r0, r3
 800e912:	3738      	adds	r7, #56	; 0x38
 800e914:	46bd      	mov	sp, r7
 800e916:	bd80      	pop	{r7, pc}
 800e918:	46020c00 	.word	0x46020c00
 800e91c:	08013a94 	.word	0x08013a94
 800e920:	00f42400 	.word	0x00f42400

0800e924 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2)
{
 800e924:	b580      	push	{r7, lr}
 800e926:	b084      	sub	sp, #16
 800e928:	af00      	add	r7, sp, #0
 800e92a:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 800e92c:	4b47      	ldr	r3, [pc, #284]	; (800ea4c <RCCEx_PLL2_Config+0x128>)
 800e92e:	681b      	ldr	r3, [r3, #0]
 800e930:	4a46      	ldr	r2, [pc, #280]	; (800ea4c <RCCEx_PLL2_Config+0x128>)
 800e932:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800e936:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800e938:	f7f7 fde6 	bl	8006508 <HAL_GetTick>
 800e93c:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800e93e:	e008      	b.n	800e952 <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800e940:	f7f7 fde2 	bl	8006508 <HAL_GetTick>
 800e944:	4602      	mov	r2, r0
 800e946:	68fb      	ldr	r3, [r7, #12]
 800e948:	1ad3      	subs	r3, r2, r3
 800e94a:	2b02      	cmp	r3, #2
 800e94c:	d901      	bls.n	800e952 <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800e94e:	2303      	movs	r3, #3
 800e950:	e077      	b.n	800ea42 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800e952:	4b3e      	ldr	r3, [pc, #248]	; (800ea4c <RCCEx_PLL2_Config+0x128>)
 800e954:	681b      	ldr	r3, [r3, #0]
 800e956:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800e95a:	2b00      	cmp	r3, #0
 800e95c:	d1f0      	bne.n	800e940 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 800e95e:	4b3b      	ldr	r3, [pc, #236]	; (800ea4c <RCCEx_PLL2_Config+0x128>)
 800e960:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e962:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800e966:	f023 0303 	bic.w	r3, r3, #3
 800e96a:	687a      	ldr	r2, [r7, #4]
 800e96c:	6811      	ldr	r1, [r2, #0]
 800e96e:	687a      	ldr	r2, [r7, #4]
 800e970:	6852      	ldr	r2, [r2, #4]
 800e972:	3a01      	subs	r2, #1
 800e974:	0212      	lsls	r2, r2, #8
 800e976:	430a      	orrs	r2, r1
 800e978:	4934      	ldr	r1, [pc, #208]	; (800ea4c <RCCEx_PLL2_Config+0x128>)
 800e97a:	4313      	orrs	r3, r2
 800e97c:	62cb      	str	r3, [r1, #44]	; 0x2c
 800e97e:	4b33      	ldr	r3, [pc, #204]	; (800ea4c <RCCEx_PLL2_Config+0x128>)
 800e980:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e982:	4b33      	ldr	r3, [pc, #204]	; (800ea50 <RCCEx_PLL2_Config+0x12c>)
 800e984:	4013      	ands	r3, r2
 800e986:	687a      	ldr	r2, [r7, #4]
 800e988:	6892      	ldr	r2, [r2, #8]
 800e98a:	3a01      	subs	r2, #1
 800e98c:	f3c2 0108 	ubfx	r1, r2, #0, #9
 800e990:	687a      	ldr	r2, [r7, #4]
 800e992:	68d2      	ldr	r2, [r2, #12]
 800e994:	3a01      	subs	r2, #1
 800e996:	0252      	lsls	r2, r2, #9
 800e998:	b292      	uxth	r2, r2
 800e99a:	4311      	orrs	r1, r2
 800e99c:	687a      	ldr	r2, [r7, #4]
 800e99e:	6912      	ldr	r2, [r2, #16]
 800e9a0:	3a01      	subs	r2, #1
 800e9a2:	0412      	lsls	r2, r2, #16
 800e9a4:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 800e9a8:	4311      	orrs	r1, r2
 800e9aa:	687a      	ldr	r2, [r7, #4]
 800e9ac:	6952      	ldr	r2, [r2, #20]
 800e9ae:	3a01      	subs	r2, #1
 800e9b0:	0612      	lsls	r2, r2, #24
 800e9b2:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 800e9b6:	430a      	orrs	r2, r1
 800e9b8:	4924      	ldr	r1, [pc, #144]	; (800ea4c <RCCEx_PLL2_Config+0x128>)
 800e9ba:	4313      	orrs	r3, r2
 800e9bc:	63cb      	str	r3, [r1, #60]	; 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 800e9be:	4b23      	ldr	r3, [pc, #140]	; (800ea4c <RCCEx_PLL2_Config+0x128>)
 800e9c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e9c2:	f023 020c 	bic.w	r2, r3, #12
 800e9c6:	687b      	ldr	r3, [r7, #4]
 800e9c8:	699b      	ldr	r3, [r3, #24]
 800e9ca:	4920      	ldr	r1, [pc, #128]	; (800ea4c <RCCEx_PLL2_Config+0x128>)
 800e9cc:	4313      	orrs	r3, r2
 800e9ce:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 800e9d0:	4b1e      	ldr	r3, [pc, #120]	; (800ea4c <RCCEx_PLL2_Config+0x128>)
 800e9d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e9d4:	687b      	ldr	r3, [r7, #4]
 800e9d6:	6a1b      	ldr	r3, [r3, #32]
 800e9d8:	491c      	ldr	r1, [pc, #112]	; (800ea4c <RCCEx_PLL2_Config+0x128>)
 800e9da:	4313      	orrs	r3, r2
 800e9dc:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 800e9de:	4b1b      	ldr	r3, [pc, #108]	; (800ea4c <RCCEx_PLL2_Config+0x128>)
 800e9e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e9e2:	4a1a      	ldr	r2, [pc, #104]	; (800ea4c <RCCEx_PLL2_Config+0x128>)
 800e9e4:	f023 0310 	bic.w	r3, r3, #16
 800e9e8:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800e9ea:	4b18      	ldr	r3, [pc, #96]	; (800ea4c <RCCEx_PLL2_Config+0x128>)
 800e9ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e9ee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800e9f2:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800e9f6:	687a      	ldr	r2, [r7, #4]
 800e9f8:	69d2      	ldr	r2, [r2, #28]
 800e9fa:	00d2      	lsls	r2, r2, #3
 800e9fc:	4913      	ldr	r1, [pc, #76]	; (800ea4c <RCCEx_PLL2_Config+0x128>)
 800e9fe:	4313      	orrs	r3, r2
 800ea00:	640b      	str	r3, [r1, #64]	; 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 800ea02:	4b12      	ldr	r3, [pc, #72]	; (800ea4c <RCCEx_PLL2_Config+0x128>)
 800ea04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ea06:	4a11      	ldr	r2, [pc, #68]	; (800ea4c <RCCEx_PLL2_Config+0x128>)
 800ea08:	f043 0310 	orr.w	r3, r3, #16
 800ea0c:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 800ea0e:	4b0f      	ldr	r3, [pc, #60]	; (800ea4c <RCCEx_PLL2_Config+0x128>)
 800ea10:	681b      	ldr	r3, [r3, #0]
 800ea12:	4a0e      	ldr	r2, [pc, #56]	; (800ea4c <RCCEx_PLL2_Config+0x128>)
 800ea14:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800ea18:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800ea1a:	f7f7 fd75 	bl	8006508 <HAL_GetTick>
 800ea1e:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800ea20:	e008      	b.n	800ea34 <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800ea22:	f7f7 fd71 	bl	8006508 <HAL_GetTick>
 800ea26:	4602      	mov	r2, r0
 800ea28:	68fb      	ldr	r3, [r7, #12]
 800ea2a:	1ad3      	subs	r3, r2, r3
 800ea2c:	2b02      	cmp	r3, #2
 800ea2e:	d901      	bls.n	800ea34 <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 800ea30:	2303      	movs	r3, #3
 800ea32:	e006      	b.n	800ea42 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800ea34:	4b05      	ldr	r3, [pc, #20]	; (800ea4c <RCCEx_PLL2_Config+0x128>)
 800ea36:	681b      	ldr	r3, [r3, #0]
 800ea38:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ea3c:	2b00      	cmp	r3, #0
 800ea3e:	d0f0      	beq.n	800ea22 <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 800ea40:	2300      	movs	r3, #0

}
 800ea42:	4618      	mov	r0, r3
 800ea44:	3710      	adds	r7, #16
 800ea46:	46bd      	mov	sp, r7
 800ea48:	bd80      	pop	{r7, pc}
 800ea4a:	bf00      	nop
 800ea4c:	46020c00 	.word	0x46020c00
 800ea50:	80800000 	.word	0x80800000

0800ea54 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3)
{
 800ea54:	b580      	push	{r7, lr}
 800ea56:	b084      	sub	sp, #16
 800ea58:	af00      	add	r7, sp, #0
 800ea5a:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 800ea5c:	4b47      	ldr	r3, [pc, #284]	; (800eb7c <RCCEx_PLL3_Config+0x128>)
 800ea5e:	681b      	ldr	r3, [r3, #0]
 800ea60:	4a46      	ldr	r2, [pc, #280]	; (800eb7c <RCCEx_PLL3_Config+0x128>)
 800ea62:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ea66:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800ea68:	f7f7 fd4e 	bl	8006508 <HAL_GetTick>
 800ea6c:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800ea6e:	e008      	b.n	800ea82 <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800ea70:	f7f7 fd4a 	bl	8006508 <HAL_GetTick>
 800ea74:	4602      	mov	r2, r0
 800ea76:	68fb      	ldr	r3, [r7, #12]
 800ea78:	1ad3      	subs	r3, r2, r3
 800ea7a:	2b02      	cmp	r3, #2
 800ea7c:	d901      	bls.n	800ea82 <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800ea7e:	2303      	movs	r3, #3
 800ea80:	e077      	b.n	800eb72 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800ea82:	4b3e      	ldr	r3, [pc, #248]	; (800eb7c <RCCEx_PLL3_Config+0x128>)
 800ea84:	681b      	ldr	r3, [r3, #0]
 800ea86:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ea8a:	2b00      	cmp	r3, #0
 800ea8c:	d1f0      	bne.n	800ea70 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 800ea8e:	4b3b      	ldr	r3, [pc, #236]	; (800eb7c <RCCEx_PLL3_Config+0x128>)
 800ea90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ea92:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800ea96:	f023 0303 	bic.w	r3, r3, #3
 800ea9a:	687a      	ldr	r2, [r7, #4]
 800ea9c:	6811      	ldr	r1, [r2, #0]
 800ea9e:	687a      	ldr	r2, [r7, #4]
 800eaa0:	6852      	ldr	r2, [r2, #4]
 800eaa2:	3a01      	subs	r2, #1
 800eaa4:	0212      	lsls	r2, r2, #8
 800eaa6:	430a      	orrs	r2, r1
 800eaa8:	4934      	ldr	r1, [pc, #208]	; (800eb7c <RCCEx_PLL3_Config+0x128>)
 800eaaa:	4313      	orrs	r3, r2
 800eaac:	630b      	str	r3, [r1, #48]	; 0x30
 800eaae:	4b33      	ldr	r3, [pc, #204]	; (800eb7c <RCCEx_PLL3_Config+0x128>)
 800eab0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800eab2:	4b33      	ldr	r3, [pc, #204]	; (800eb80 <RCCEx_PLL3_Config+0x12c>)
 800eab4:	4013      	ands	r3, r2
 800eab6:	687a      	ldr	r2, [r7, #4]
 800eab8:	6892      	ldr	r2, [r2, #8]
 800eaba:	3a01      	subs	r2, #1
 800eabc:	f3c2 0108 	ubfx	r1, r2, #0, #9
 800eac0:	687a      	ldr	r2, [r7, #4]
 800eac2:	68d2      	ldr	r2, [r2, #12]
 800eac4:	3a01      	subs	r2, #1
 800eac6:	0252      	lsls	r2, r2, #9
 800eac8:	b292      	uxth	r2, r2
 800eaca:	4311      	orrs	r1, r2
 800eacc:	687a      	ldr	r2, [r7, #4]
 800eace:	6912      	ldr	r2, [r2, #16]
 800ead0:	3a01      	subs	r2, #1
 800ead2:	0412      	lsls	r2, r2, #16
 800ead4:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 800ead8:	4311      	orrs	r1, r2
 800eada:	687a      	ldr	r2, [r7, #4]
 800eadc:	6952      	ldr	r2, [r2, #20]
 800eade:	3a01      	subs	r2, #1
 800eae0:	0612      	lsls	r2, r2, #24
 800eae2:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 800eae6:	430a      	orrs	r2, r1
 800eae8:	4924      	ldr	r1, [pc, #144]	; (800eb7c <RCCEx_PLL3_Config+0x128>)
 800eaea:	4313      	orrs	r3, r2
 800eaec:	644b      	str	r3, [r1, #68]	; 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 800eaee:	4b23      	ldr	r3, [pc, #140]	; (800eb7c <RCCEx_PLL3_Config+0x128>)
 800eaf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800eaf2:	f023 020c 	bic.w	r2, r3, #12
 800eaf6:	687b      	ldr	r3, [r7, #4]
 800eaf8:	699b      	ldr	r3, [r3, #24]
 800eafa:	4920      	ldr	r1, [pc, #128]	; (800eb7c <RCCEx_PLL3_Config+0x128>)
 800eafc:	4313      	orrs	r3, r2
 800eafe:	630b      	str	r3, [r1, #48]	; 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 800eb00:	4b1e      	ldr	r3, [pc, #120]	; (800eb7c <RCCEx_PLL3_Config+0x128>)
 800eb02:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800eb04:	687b      	ldr	r3, [r7, #4]
 800eb06:	6a1b      	ldr	r3, [r3, #32]
 800eb08:	491c      	ldr	r1, [pc, #112]	; (800eb7c <RCCEx_PLL3_Config+0x128>)
 800eb0a:	4313      	orrs	r3, r2
 800eb0c:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 800eb0e:	4b1b      	ldr	r3, [pc, #108]	; (800eb7c <RCCEx_PLL3_Config+0x128>)
 800eb10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800eb12:	4a1a      	ldr	r2, [pc, #104]	; (800eb7c <RCCEx_PLL3_Config+0x128>)
 800eb14:	f023 0310 	bic.w	r3, r3, #16
 800eb18:	6313      	str	r3, [r2, #48]	; 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800eb1a:	4b18      	ldr	r3, [pc, #96]	; (800eb7c <RCCEx_PLL3_Config+0x128>)
 800eb1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800eb1e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800eb22:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800eb26:	687a      	ldr	r2, [r7, #4]
 800eb28:	69d2      	ldr	r2, [r2, #28]
 800eb2a:	00d2      	lsls	r2, r2, #3
 800eb2c:	4913      	ldr	r1, [pc, #76]	; (800eb7c <RCCEx_PLL3_Config+0x128>)
 800eb2e:	4313      	orrs	r3, r2
 800eb30:	648b      	str	r3, [r1, #72]	; 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 800eb32:	4b12      	ldr	r3, [pc, #72]	; (800eb7c <RCCEx_PLL3_Config+0x128>)
 800eb34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800eb36:	4a11      	ldr	r2, [pc, #68]	; (800eb7c <RCCEx_PLL3_Config+0x128>)
 800eb38:	f043 0310 	orr.w	r3, r3, #16
 800eb3c:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 800eb3e:	4b0f      	ldr	r3, [pc, #60]	; (800eb7c <RCCEx_PLL3_Config+0x128>)
 800eb40:	681b      	ldr	r3, [r3, #0]
 800eb42:	4a0e      	ldr	r2, [pc, #56]	; (800eb7c <RCCEx_PLL3_Config+0x128>)
 800eb44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800eb48:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800eb4a:	f7f7 fcdd 	bl	8006508 <HAL_GetTick>
 800eb4e:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800eb50:	e008      	b.n	800eb64 <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800eb52:	f7f7 fcd9 	bl	8006508 <HAL_GetTick>
 800eb56:	4602      	mov	r2, r0
 800eb58:	68fb      	ldr	r3, [r7, #12]
 800eb5a:	1ad3      	subs	r3, r2, r3
 800eb5c:	2b02      	cmp	r3, #2
 800eb5e:	d901      	bls.n	800eb64 <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 800eb60:	2303      	movs	r3, #3
 800eb62:	e006      	b.n	800eb72 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800eb64:	4b05      	ldr	r3, [pc, #20]	; (800eb7c <RCCEx_PLL3_Config+0x128>)
 800eb66:	681b      	ldr	r3, [r3, #0]
 800eb68:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800eb6c:	2b00      	cmp	r3, #0
 800eb6e:	d0f0      	beq.n	800eb52 <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 800eb70:	2300      	movs	r3, #0
}
 800eb72:	4618      	mov	r0, r3
 800eb74:	3710      	adds	r7, #16
 800eb76:	46bd      	mov	sp, r7
 800eb78:	bd80      	pop	{r7, pc}
 800eb7a:	bf00      	nop
 800eb7c:	46020c00 	.word	0x46020c00
 800eb80:	80800000 	.word	0x80800000

0800eb84 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800eb84:	b580      	push	{r7, lr}
 800eb86:	b082      	sub	sp, #8
 800eb88:	af00      	add	r7, sp, #0
 800eb8a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800eb8c:	687b      	ldr	r3, [r7, #4]
 800eb8e:	2b00      	cmp	r3, #0
 800eb90:	d101      	bne.n	800eb96 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800eb92:	2301      	movs	r3, #1
 800eb94:	e049      	b.n	800ec2a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800eb96:	687b      	ldr	r3, [r7, #4]
 800eb98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800eb9c:	b2db      	uxtb	r3, r3
 800eb9e:	2b00      	cmp	r3, #0
 800eba0:	d106      	bne.n	800ebb0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800eba2:	687b      	ldr	r3, [r7, #4]
 800eba4:	2200      	movs	r2, #0
 800eba6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800ebaa:	6878      	ldr	r0, [r7, #4]
 800ebac:	f7f7 fb64 	bl	8006278 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ebb0:	687b      	ldr	r3, [r7, #4]
 800ebb2:	2202      	movs	r2, #2
 800ebb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ebb8:	687b      	ldr	r3, [r7, #4]
 800ebba:	681a      	ldr	r2, [r3, #0]
 800ebbc:	687b      	ldr	r3, [r7, #4]
 800ebbe:	3304      	adds	r3, #4
 800ebc0:	4619      	mov	r1, r3
 800ebc2:	4610      	mov	r0, r2
 800ebc4:	f000 fa7e 	bl	800f0c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ebc8:	687b      	ldr	r3, [r7, #4]
 800ebca:	2201      	movs	r2, #1
 800ebcc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ebd0:	687b      	ldr	r3, [r7, #4]
 800ebd2:	2201      	movs	r2, #1
 800ebd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ebd8:	687b      	ldr	r3, [r7, #4]
 800ebda:	2201      	movs	r2, #1
 800ebdc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ebe0:	687b      	ldr	r3, [r7, #4]
 800ebe2:	2201      	movs	r2, #1
 800ebe4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ebe8:	687b      	ldr	r3, [r7, #4]
 800ebea:	2201      	movs	r2, #1
 800ebec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800ebf0:	687b      	ldr	r3, [r7, #4]
 800ebf2:	2201      	movs	r2, #1
 800ebf4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ebf8:	687b      	ldr	r3, [r7, #4]
 800ebfa:	2201      	movs	r2, #1
 800ebfc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ec00:	687b      	ldr	r3, [r7, #4]
 800ec02:	2201      	movs	r2, #1
 800ec04:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ec08:	687b      	ldr	r3, [r7, #4]
 800ec0a:	2201      	movs	r2, #1
 800ec0c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ec10:	687b      	ldr	r3, [r7, #4]
 800ec12:	2201      	movs	r2, #1
 800ec14:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800ec18:	687b      	ldr	r3, [r7, #4]
 800ec1a:	2201      	movs	r2, #1
 800ec1c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ec20:	687b      	ldr	r3, [r7, #4]
 800ec22:	2201      	movs	r2, #1
 800ec24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ec28:	2300      	movs	r3, #0
}
 800ec2a:	4618      	mov	r0, r3
 800ec2c:	3708      	adds	r7, #8
 800ec2e:	46bd      	mov	sp, r7
 800ec30:	bd80      	pop	{r7, pc}
	...

0800ec34 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800ec34:	b480      	push	{r7}
 800ec36:	b085      	sub	sp, #20
 800ec38:	af00      	add	r7, sp, #0
 800ec3a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800ec3c:	687b      	ldr	r3, [r7, #4]
 800ec3e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ec42:	b2db      	uxtb	r3, r3
 800ec44:	2b01      	cmp	r3, #1
 800ec46:	d001      	beq.n	800ec4c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800ec48:	2301      	movs	r3, #1
 800ec4a:	e072      	b.n	800ed32 <HAL_TIM_Base_Start_IT+0xfe>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ec4c:	687b      	ldr	r3, [r7, #4]
 800ec4e:	2202      	movs	r2, #2
 800ec50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800ec54:	687b      	ldr	r3, [r7, #4]
 800ec56:	681b      	ldr	r3, [r3, #0]
 800ec58:	68da      	ldr	r2, [r3, #12]
 800ec5a:	687b      	ldr	r3, [r7, #4]
 800ec5c:	681b      	ldr	r3, [r3, #0]
 800ec5e:	f042 0201 	orr.w	r2, r2, #1
 800ec62:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ec64:	687b      	ldr	r3, [r7, #4]
 800ec66:	681b      	ldr	r3, [r3, #0]
 800ec68:	4a35      	ldr	r2, [pc, #212]	; (800ed40 <HAL_TIM_Base_Start_IT+0x10c>)
 800ec6a:	4293      	cmp	r3, r2
 800ec6c:	d040      	beq.n	800ecf0 <HAL_TIM_Base_Start_IT+0xbc>
 800ec6e:	687b      	ldr	r3, [r7, #4]
 800ec70:	681b      	ldr	r3, [r3, #0]
 800ec72:	4a34      	ldr	r2, [pc, #208]	; (800ed44 <HAL_TIM_Base_Start_IT+0x110>)
 800ec74:	4293      	cmp	r3, r2
 800ec76:	d03b      	beq.n	800ecf0 <HAL_TIM_Base_Start_IT+0xbc>
 800ec78:	687b      	ldr	r3, [r7, #4]
 800ec7a:	681b      	ldr	r3, [r3, #0]
 800ec7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ec80:	d036      	beq.n	800ecf0 <HAL_TIM_Base_Start_IT+0xbc>
 800ec82:	687b      	ldr	r3, [r7, #4]
 800ec84:	681b      	ldr	r3, [r3, #0]
 800ec86:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800ec8a:	d031      	beq.n	800ecf0 <HAL_TIM_Base_Start_IT+0xbc>
 800ec8c:	687b      	ldr	r3, [r7, #4]
 800ec8e:	681b      	ldr	r3, [r3, #0]
 800ec90:	4a2d      	ldr	r2, [pc, #180]	; (800ed48 <HAL_TIM_Base_Start_IT+0x114>)
 800ec92:	4293      	cmp	r3, r2
 800ec94:	d02c      	beq.n	800ecf0 <HAL_TIM_Base_Start_IT+0xbc>
 800ec96:	687b      	ldr	r3, [r7, #4]
 800ec98:	681b      	ldr	r3, [r3, #0]
 800ec9a:	4a2c      	ldr	r2, [pc, #176]	; (800ed4c <HAL_TIM_Base_Start_IT+0x118>)
 800ec9c:	4293      	cmp	r3, r2
 800ec9e:	d027      	beq.n	800ecf0 <HAL_TIM_Base_Start_IT+0xbc>
 800eca0:	687b      	ldr	r3, [r7, #4]
 800eca2:	681b      	ldr	r3, [r3, #0]
 800eca4:	4a2a      	ldr	r2, [pc, #168]	; (800ed50 <HAL_TIM_Base_Start_IT+0x11c>)
 800eca6:	4293      	cmp	r3, r2
 800eca8:	d022      	beq.n	800ecf0 <HAL_TIM_Base_Start_IT+0xbc>
 800ecaa:	687b      	ldr	r3, [r7, #4]
 800ecac:	681b      	ldr	r3, [r3, #0]
 800ecae:	4a29      	ldr	r2, [pc, #164]	; (800ed54 <HAL_TIM_Base_Start_IT+0x120>)
 800ecb0:	4293      	cmp	r3, r2
 800ecb2:	d01d      	beq.n	800ecf0 <HAL_TIM_Base_Start_IT+0xbc>
 800ecb4:	687b      	ldr	r3, [r7, #4]
 800ecb6:	681b      	ldr	r3, [r3, #0]
 800ecb8:	4a27      	ldr	r2, [pc, #156]	; (800ed58 <HAL_TIM_Base_Start_IT+0x124>)
 800ecba:	4293      	cmp	r3, r2
 800ecbc:	d018      	beq.n	800ecf0 <HAL_TIM_Base_Start_IT+0xbc>
 800ecbe:	687b      	ldr	r3, [r7, #4]
 800ecc0:	681b      	ldr	r3, [r3, #0]
 800ecc2:	4a26      	ldr	r2, [pc, #152]	; (800ed5c <HAL_TIM_Base_Start_IT+0x128>)
 800ecc4:	4293      	cmp	r3, r2
 800ecc6:	d013      	beq.n	800ecf0 <HAL_TIM_Base_Start_IT+0xbc>
 800ecc8:	687b      	ldr	r3, [r7, #4]
 800ecca:	681b      	ldr	r3, [r3, #0]
 800eccc:	4a24      	ldr	r2, [pc, #144]	; (800ed60 <HAL_TIM_Base_Start_IT+0x12c>)
 800ecce:	4293      	cmp	r3, r2
 800ecd0:	d00e      	beq.n	800ecf0 <HAL_TIM_Base_Start_IT+0xbc>
 800ecd2:	687b      	ldr	r3, [r7, #4]
 800ecd4:	681b      	ldr	r3, [r3, #0]
 800ecd6:	4a23      	ldr	r2, [pc, #140]	; (800ed64 <HAL_TIM_Base_Start_IT+0x130>)
 800ecd8:	4293      	cmp	r3, r2
 800ecda:	d009      	beq.n	800ecf0 <HAL_TIM_Base_Start_IT+0xbc>
 800ecdc:	687b      	ldr	r3, [r7, #4]
 800ecde:	681b      	ldr	r3, [r3, #0]
 800ece0:	4a21      	ldr	r2, [pc, #132]	; (800ed68 <HAL_TIM_Base_Start_IT+0x134>)
 800ece2:	4293      	cmp	r3, r2
 800ece4:	d004      	beq.n	800ecf0 <HAL_TIM_Base_Start_IT+0xbc>
 800ece6:	687b      	ldr	r3, [r7, #4]
 800ece8:	681b      	ldr	r3, [r3, #0]
 800ecea:	4a20      	ldr	r2, [pc, #128]	; (800ed6c <HAL_TIM_Base_Start_IT+0x138>)
 800ecec:	4293      	cmp	r3, r2
 800ecee:	d115      	bne.n	800ed1c <HAL_TIM_Base_Start_IT+0xe8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ecf0:	687b      	ldr	r3, [r7, #4]
 800ecf2:	681b      	ldr	r3, [r3, #0]
 800ecf4:	689a      	ldr	r2, [r3, #8]
 800ecf6:	4b1e      	ldr	r3, [pc, #120]	; (800ed70 <HAL_TIM_Base_Start_IT+0x13c>)
 800ecf8:	4013      	ands	r3, r2
 800ecfa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ecfc:	68fb      	ldr	r3, [r7, #12]
 800ecfe:	2b06      	cmp	r3, #6
 800ed00:	d015      	beq.n	800ed2e <HAL_TIM_Base_Start_IT+0xfa>
 800ed02:	68fb      	ldr	r3, [r7, #12]
 800ed04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ed08:	d011      	beq.n	800ed2e <HAL_TIM_Base_Start_IT+0xfa>
    {
      __HAL_TIM_ENABLE(htim);
 800ed0a:	687b      	ldr	r3, [r7, #4]
 800ed0c:	681b      	ldr	r3, [r3, #0]
 800ed0e:	681a      	ldr	r2, [r3, #0]
 800ed10:	687b      	ldr	r3, [r7, #4]
 800ed12:	681b      	ldr	r3, [r3, #0]
 800ed14:	f042 0201 	orr.w	r2, r2, #1
 800ed18:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ed1a:	e008      	b.n	800ed2e <HAL_TIM_Base_Start_IT+0xfa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ed1c:	687b      	ldr	r3, [r7, #4]
 800ed1e:	681b      	ldr	r3, [r3, #0]
 800ed20:	681a      	ldr	r2, [r3, #0]
 800ed22:	687b      	ldr	r3, [r7, #4]
 800ed24:	681b      	ldr	r3, [r3, #0]
 800ed26:	f042 0201 	orr.w	r2, r2, #1
 800ed2a:	601a      	str	r2, [r3, #0]
 800ed2c:	e000      	b.n	800ed30 <HAL_TIM_Base_Start_IT+0xfc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ed2e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800ed30:	2300      	movs	r3, #0
}
 800ed32:	4618      	mov	r0, r3
 800ed34:	3714      	adds	r7, #20
 800ed36:	46bd      	mov	sp, r7
 800ed38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed3c:	4770      	bx	lr
 800ed3e:	bf00      	nop
 800ed40:	40012c00 	.word	0x40012c00
 800ed44:	50012c00 	.word	0x50012c00
 800ed48:	40000400 	.word	0x40000400
 800ed4c:	50000400 	.word	0x50000400
 800ed50:	40000800 	.word	0x40000800
 800ed54:	50000800 	.word	0x50000800
 800ed58:	40000c00 	.word	0x40000c00
 800ed5c:	50000c00 	.word	0x50000c00
 800ed60:	40013400 	.word	0x40013400
 800ed64:	50013400 	.word	0x50013400
 800ed68:	40014000 	.word	0x40014000
 800ed6c:	50014000 	.word	0x50014000
 800ed70:	00010007 	.word	0x00010007

0800ed74 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800ed74:	b580      	push	{r7, lr}
 800ed76:	b082      	sub	sp, #8
 800ed78:	af00      	add	r7, sp, #0
 800ed7a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800ed7c:	687b      	ldr	r3, [r7, #4]
 800ed7e:	681b      	ldr	r3, [r3, #0]
 800ed80:	691b      	ldr	r3, [r3, #16]
 800ed82:	f003 0302 	and.w	r3, r3, #2
 800ed86:	2b02      	cmp	r3, #2
 800ed88:	d122      	bne.n	800edd0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800ed8a:	687b      	ldr	r3, [r7, #4]
 800ed8c:	681b      	ldr	r3, [r3, #0]
 800ed8e:	68db      	ldr	r3, [r3, #12]
 800ed90:	f003 0302 	and.w	r3, r3, #2
 800ed94:	2b02      	cmp	r3, #2
 800ed96:	d11b      	bne.n	800edd0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800ed98:	687b      	ldr	r3, [r7, #4]
 800ed9a:	681b      	ldr	r3, [r3, #0]
 800ed9c:	f06f 0202 	mvn.w	r2, #2
 800eda0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800eda2:	687b      	ldr	r3, [r7, #4]
 800eda4:	2201      	movs	r2, #1
 800eda6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800eda8:	687b      	ldr	r3, [r7, #4]
 800edaa:	681b      	ldr	r3, [r3, #0]
 800edac:	699b      	ldr	r3, [r3, #24]
 800edae:	f003 0303 	and.w	r3, r3, #3
 800edb2:	2b00      	cmp	r3, #0
 800edb4:	d003      	beq.n	800edbe <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800edb6:	6878      	ldr	r0, [r7, #4]
 800edb8:	f000 f965 	bl	800f086 <HAL_TIM_IC_CaptureCallback>
 800edbc:	e005      	b.n	800edca <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800edbe:	6878      	ldr	r0, [r7, #4]
 800edc0:	f000 f957 	bl	800f072 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800edc4:	6878      	ldr	r0, [r7, #4]
 800edc6:	f000 f968 	bl	800f09a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800edca:	687b      	ldr	r3, [r7, #4]
 800edcc:	2200      	movs	r2, #0
 800edce:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800edd0:	687b      	ldr	r3, [r7, #4]
 800edd2:	681b      	ldr	r3, [r3, #0]
 800edd4:	691b      	ldr	r3, [r3, #16]
 800edd6:	f003 0304 	and.w	r3, r3, #4
 800edda:	2b04      	cmp	r3, #4
 800eddc:	d122      	bne.n	800ee24 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800edde:	687b      	ldr	r3, [r7, #4]
 800ede0:	681b      	ldr	r3, [r3, #0]
 800ede2:	68db      	ldr	r3, [r3, #12]
 800ede4:	f003 0304 	and.w	r3, r3, #4
 800ede8:	2b04      	cmp	r3, #4
 800edea:	d11b      	bne.n	800ee24 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800edec:	687b      	ldr	r3, [r7, #4]
 800edee:	681b      	ldr	r3, [r3, #0]
 800edf0:	f06f 0204 	mvn.w	r2, #4
 800edf4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800edf6:	687b      	ldr	r3, [r7, #4]
 800edf8:	2202      	movs	r2, #2
 800edfa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800edfc:	687b      	ldr	r3, [r7, #4]
 800edfe:	681b      	ldr	r3, [r3, #0]
 800ee00:	699b      	ldr	r3, [r3, #24]
 800ee02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ee06:	2b00      	cmp	r3, #0
 800ee08:	d003      	beq.n	800ee12 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ee0a:	6878      	ldr	r0, [r7, #4]
 800ee0c:	f000 f93b 	bl	800f086 <HAL_TIM_IC_CaptureCallback>
 800ee10:	e005      	b.n	800ee1e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ee12:	6878      	ldr	r0, [r7, #4]
 800ee14:	f000 f92d 	bl	800f072 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ee18:	6878      	ldr	r0, [r7, #4]
 800ee1a:	f000 f93e 	bl	800f09a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ee1e:	687b      	ldr	r3, [r7, #4]
 800ee20:	2200      	movs	r2, #0
 800ee22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800ee24:	687b      	ldr	r3, [r7, #4]
 800ee26:	681b      	ldr	r3, [r3, #0]
 800ee28:	691b      	ldr	r3, [r3, #16]
 800ee2a:	f003 0308 	and.w	r3, r3, #8
 800ee2e:	2b08      	cmp	r3, #8
 800ee30:	d122      	bne.n	800ee78 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800ee32:	687b      	ldr	r3, [r7, #4]
 800ee34:	681b      	ldr	r3, [r3, #0]
 800ee36:	68db      	ldr	r3, [r3, #12]
 800ee38:	f003 0308 	and.w	r3, r3, #8
 800ee3c:	2b08      	cmp	r3, #8
 800ee3e:	d11b      	bne.n	800ee78 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800ee40:	687b      	ldr	r3, [r7, #4]
 800ee42:	681b      	ldr	r3, [r3, #0]
 800ee44:	f06f 0208 	mvn.w	r2, #8
 800ee48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800ee4a:	687b      	ldr	r3, [r7, #4]
 800ee4c:	2204      	movs	r2, #4
 800ee4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800ee50:	687b      	ldr	r3, [r7, #4]
 800ee52:	681b      	ldr	r3, [r3, #0]
 800ee54:	69db      	ldr	r3, [r3, #28]
 800ee56:	f003 0303 	and.w	r3, r3, #3
 800ee5a:	2b00      	cmp	r3, #0
 800ee5c:	d003      	beq.n	800ee66 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ee5e:	6878      	ldr	r0, [r7, #4]
 800ee60:	f000 f911 	bl	800f086 <HAL_TIM_IC_CaptureCallback>
 800ee64:	e005      	b.n	800ee72 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ee66:	6878      	ldr	r0, [r7, #4]
 800ee68:	f000 f903 	bl	800f072 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ee6c:	6878      	ldr	r0, [r7, #4]
 800ee6e:	f000 f914 	bl	800f09a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ee72:	687b      	ldr	r3, [r7, #4]
 800ee74:	2200      	movs	r2, #0
 800ee76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800ee78:	687b      	ldr	r3, [r7, #4]
 800ee7a:	681b      	ldr	r3, [r3, #0]
 800ee7c:	691b      	ldr	r3, [r3, #16]
 800ee7e:	f003 0310 	and.w	r3, r3, #16
 800ee82:	2b10      	cmp	r3, #16
 800ee84:	d122      	bne.n	800eecc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800ee86:	687b      	ldr	r3, [r7, #4]
 800ee88:	681b      	ldr	r3, [r3, #0]
 800ee8a:	68db      	ldr	r3, [r3, #12]
 800ee8c:	f003 0310 	and.w	r3, r3, #16
 800ee90:	2b10      	cmp	r3, #16
 800ee92:	d11b      	bne.n	800eecc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800ee94:	687b      	ldr	r3, [r7, #4]
 800ee96:	681b      	ldr	r3, [r3, #0]
 800ee98:	f06f 0210 	mvn.w	r2, #16
 800ee9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800ee9e:	687b      	ldr	r3, [r7, #4]
 800eea0:	2208      	movs	r2, #8
 800eea2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800eea4:	687b      	ldr	r3, [r7, #4]
 800eea6:	681b      	ldr	r3, [r3, #0]
 800eea8:	69db      	ldr	r3, [r3, #28]
 800eeaa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800eeae:	2b00      	cmp	r3, #0
 800eeb0:	d003      	beq.n	800eeba <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800eeb2:	6878      	ldr	r0, [r7, #4]
 800eeb4:	f000 f8e7 	bl	800f086 <HAL_TIM_IC_CaptureCallback>
 800eeb8:	e005      	b.n	800eec6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800eeba:	6878      	ldr	r0, [r7, #4]
 800eebc:	f000 f8d9 	bl	800f072 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800eec0:	6878      	ldr	r0, [r7, #4]
 800eec2:	f000 f8ea 	bl	800f09a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800eec6:	687b      	ldr	r3, [r7, #4]
 800eec8:	2200      	movs	r2, #0
 800eeca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800eecc:	687b      	ldr	r3, [r7, #4]
 800eece:	681b      	ldr	r3, [r3, #0]
 800eed0:	691b      	ldr	r3, [r3, #16]
 800eed2:	f003 0301 	and.w	r3, r3, #1
 800eed6:	2b01      	cmp	r3, #1
 800eed8:	d10e      	bne.n	800eef8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800eeda:	687b      	ldr	r3, [r7, #4]
 800eedc:	681b      	ldr	r3, [r3, #0]
 800eede:	68db      	ldr	r3, [r3, #12]
 800eee0:	f003 0301 	and.w	r3, r3, #1
 800eee4:	2b01      	cmp	r3, #1
 800eee6:	d107      	bne.n	800eef8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800eee8:	687b      	ldr	r3, [r7, #4]
 800eeea:	681b      	ldr	r3, [r3, #0]
 800eeec:	f06f 0201 	mvn.w	r2, #1
 800eef0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800eef2:	6878      	ldr	r0, [r7, #4]
 800eef4:	f7f6 fd5c 	bl	80059b0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800eef8:	687b      	ldr	r3, [r7, #4]
 800eefa:	681b      	ldr	r3, [r3, #0]
 800eefc:	691b      	ldr	r3, [r3, #16]
 800eefe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ef02:	2b80      	cmp	r3, #128	; 0x80
 800ef04:	d10e      	bne.n	800ef24 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800ef06:	687b      	ldr	r3, [r7, #4]
 800ef08:	681b      	ldr	r3, [r3, #0]
 800ef0a:	68db      	ldr	r3, [r3, #12]
 800ef0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ef10:	2b80      	cmp	r3, #128	; 0x80
 800ef12:	d107      	bne.n	800ef24 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800ef14:	687b      	ldr	r3, [r7, #4]
 800ef16:	681b      	ldr	r3, [r3, #0]
 800ef18:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800ef1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800ef1e:	6878      	ldr	r0, [r7, #4]
 800ef20:	f000 fa96 	bl	800f450 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800ef24:	687b      	ldr	r3, [r7, #4]
 800ef26:	681b      	ldr	r3, [r3, #0]
 800ef28:	691b      	ldr	r3, [r3, #16]
 800ef2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ef2e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ef32:	d10e      	bne.n	800ef52 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800ef34:	687b      	ldr	r3, [r7, #4]
 800ef36:	681b      	ldr	r3, [r3, #0]
 800ef38:	68db      	ldr	r3, [r3, #12]
 800ef3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ef3e:	2b80      	cmp	r3, #128	; 0x80
 800ef40:	d107      	bne.n	800ef52 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800ef42:	687b      	ldr	r3, [r7, #4]
 800ef44:	681b      	ldr	r3, [r3, #0]
 800ef46:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800ef4a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800ef4c:	6878      	ldr	r0, [r7, #4]
 800ef4e:	f000 fa89 	bl	800f464 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800ef52:	687b      	ldr	r3, [r7, #4]
 800ef54:	681b      	ldr	r3, [r3, #0]
 800ef56:	691b      	ldr	r3, [r3, #16]
 800ef58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ef5c:	2b40      	cmp	r3, #64	; 0x40
 800ef5e:	d10e      	bne.n	800ef7e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800ef60:	687b      	ldr	r3, [r7, #4]
 800ef62:	681b      	ldr	r3, [r3, #0]
 800ef64:	68db      	ldr	r3, [r3, #12]
 800ef66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ef6a:	2b40      	cmp	r3, #64	; 0x40
 800ef6c:	d107      	bne.n	800ef7e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800ef6e:	687b      	ldr	r3, [r7, #4]
 800ef70:	681b      	ldr	r3, [r3, #0]
 800ef72:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800ef76:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800ef78:	6878      	ldr	r0, [r7, #4]
 800ef7a:	f000 f898 	bl	800f0ae <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800ef7e:	687b      	ldr	r3, [r7, #4]
 800ef80:	681b      	ldr	r3, [r3, #0]
 800ef82:	691b      	ldr	r3, [r3, #16]
 800ef84:	f003 0320 	and.w	r3, r3, #32
 800ef88:	2b20      	cmp	r3, #32
 800ef8a:	d10e      	bne.n	800efaa <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800ef8c:	687b      	ldr	r3, [r7, #4]
 800ef8e:	681b      	ldr	r3, [r3, #0]
 800ef90:	68db      	ldr	r3, [r3, #12]
 800ef92:	f003 0320 	and.w	r3, r3, #32
 800ef96:	2b20      	cmp	r3, #32
 800ef98:	d107      	bne.n	800efaa <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800ef9a:	687b      	ldr	r3, [r7, #4]
 800ef9c:	681b      	ldr	r3, [r3, #0]
 800ef9e:	f06f 0220 	mvn.w	r2, #32
 800efa2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800efa4:	6878      	ldr	r0, [r7, #4]
 800efa6:	f000 fa49 	bl	800f43c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 800efaa:	687b      	ldr	r3, [r7, #4]
 800efac:	681b      	ldr	r3, [r3, #0]
 800efae:	691b      	ldr	r3, [r3, #16]
 800efb0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800efb4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800efb8:	d10f      	bne.n	800efda <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 800efba:	687b      	ldr	r3, [r7, #4]
 800efbc:	681b      	ldr	r3, [r3, #0]
 800efbe:	68db      	ldr	r3, [r3, #12]
 800efc0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800efc4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800efc8:	d107      	bne.n	800efda <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 800efca:	687b      	ldr	r3, [r7, #4]
 800efcc:	681b      	ldr	r3, [r3, #0]
 800efce:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 800efd2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800efd4:	6878      	ldr	r0, [r7, #4]
 800efd6:	f000 fa4f 	bl	800f478 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 800efda:	687b      	ldr	r3, [r7, #4]
 800efdc:	681b      	ldr	r3, [r3, #0]
 800efde:	691b      	ldr	r3, [r3, #16]
 800efe0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800efe4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800efe8:	d10f      	bne.n	800f00a <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 800efea:	687b      	ldr	r3, [r7, #4]
 800efec:	681b      	ldr	r3, [r3, #0]
 800efee:	68db      	ldr	r3, [r3, #12]
 800eff0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800eff4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800eff8:	d107      	bne.n	800f00a <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 800effa:	687b      	ldr	r3, [r7, #4]
 800effc:	681b      	ldr	r3, [r3, #0]
 800effe:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 800f002:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800f004:	6878      	ldr	r0, [r7, #4]
 800f006:	f000 fa41 	bl	800f48c <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 800f00a:	687b      	ldr	r3, [r7, #4]
 800f00c:	681b      	ldr	r3, [r3, #0]
 800f00e:	691b      	ldr	r3, [r3, #16]
 800f010:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800f014:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800f018:	d10f      	bne.n	800f03a <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 800f01a:	687b      	ldr	r3, [r7, #4]
 800f01c:	681b      	ldr	r3, [r3, #0]
 800f01e:	68db      	ldr	r3, [r3, #12]
 800f020:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800f024:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800f028:	d107      	bne.n	800f03a <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 800f02a:	687b      	ldr	r3, [r7, #4]
 800f02c:	681b      	ldr	r3, [r3, #0]
 800f02e:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 800f032:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800f034:	6878      	ldr	r0, [r7, #4]
 800f036:	f000 fa33 	bl	800f4a0 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 800f03a:	687b      	ldr	r3, [r7, #4]
 800f03c:	681b      	ldr	r3, [r3, #0]
 800f03e:	691b      	ldr	r3, [r3, #16]
 800f040:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800f044:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800f048:	d10f      	bne.n	800f06a <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 800f04a:	687b      	ldr	r3, [r7, #4]
 800f04c:	681b      	ldr	r3, [r3, #0]
 800f04e:	68db      	ldr	r3, [r3, #12]
 800f050:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800f054:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800f058:	d107      	bne.n	800f06a <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 800f05a:	687b      	ldr	r3, [r7, #4]
 800f05c:	681b      	ldr	r3, [r3, #0]
 800f05e:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 800f062:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800f064:	6878      	ldr	r0, [r7, #4]
 800f066:	f000 fa25 	bl	800f4b4 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800f06a:	bf00      	nop
 800f06c:	3708      	adds	r7, #8
 800f06e:	46bd      	mov	sp, r7
 800f070:	bd80      	pop	{r7, pc}

0800f072 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800f072:	b480      	push	{r7}
 800f074:	b083      	sub	sp, #12
 800f076:	af00      	add	r7, sp, #0
 800f078:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800f07a:	bf00      	nop
 800f07c:	370c      	adds	r7, #12
 800f07e:	46bd      	mov	sp, r7
 800f080:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f084:	4770      	bx	lr

0800f086 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800f086:	b480      	push	{r7}
 800f088:	b083      	sub	sp, #12
 800f08a:	af00      	add	r7, sp, #0
 800f08c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800f08e:	bf00      	nop
 800f090:	370c      	adds	r7, #12
 800f092:	46bd      	mov	sp, r7
 800f094:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f098:	4770      	bx	lr

0800f09a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800f09a:	b480      	push	{r7}
 800f09c:	b083      	sub	sp, #12
 800f09e:	af00      	add	r7, sp, #0
 800f0a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800f0a2:	bf00      	nop
 800f0a4:	370c      	adds	r7, #12
 800f0a6:	46bd      	mov	sp, r7
 800f0a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0ac:	4770      	bx	lr

0800f0ae <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800f0ae:	b480      	push	{r7}
 800f0b0:	b083      	sub	sp, #12
 800f0b2:	af00      	add	r7, sp, #0
 800f0b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800f0b6:	bf00      	nop
 800f0b8:	370c      	adds	r7, #12
 800f0ba:	46bd      	mov	sp, r7
 800f0bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0c0:	4770      	bx	lr
	...

0800f0c4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800f0c4:	b480      	push	{r7}
 800f0c6:	b085      	sub	sp, #20
 800f0c8:	af00      	add	r7, sp, #0
 800f0ca:	6078      	str	r0, [r7, #4]
 800f0cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800f0ce:	687b      	ldr	r3, [r7, #4]
 800f0d0:	681b      	ldr	r3, [r3, #0]
 800f0d2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800f0d4:	687b      	ldr	r3, [r7, #4]
 800f0d6:	4a68      	ldr	r2, [pc, #416]	; (800f278 <TIM_Base_SetConfig+0x1b4>)
 800f0d8:	4293      	cmp	r3, r2
 800f0da:	d02b      	beq.n	800f134 <TIM_Base_SetConfig+0x70>
 800f0dc:	687b      	ldr	r3, [r7, #4]
 800f0de:	4a67      	ldr	r2, [pc, #412]	; (800f27c <TIM_Base_SetConfig+0x1b8>)
 800f0e0:	4293      	cmp	r3, r2
 800f0e2:	d027      	beq.n	800f134 <TIM_Base_SetConfig+0x70>
 800f0e4:	687b      	ldr	r3, [r7, #4]
 800f0e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f0ea:	d023      	beq.n	800f134 <TIM_Base_SetConfig+0x70>
 800f0ec:	687b      	ldr	r3, [r7, #4]
 800f0ee:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800f0f2:	d01f      	beq.n	800f134 <TIM_Base_SetConfig+0x70>
 800f0f4:	687b      	ldr	r3, [r7, #4]
 800f0f6:	4a62      	ldr	r2, [pc, #392]	; (800f280 <TIM_Base_SetConfig+0x1bc>)
 800f0f8:	4293      	cmp	r3, r2
 800f0fa:	d01b      	beq.n	800f134 <TIM_Base_SetConfig+0x70>
 800f0fc:	687b      	ldr	r3, [r7, #4]
 800f0fe:	4a61      	ldr	r2, [pc, #388]	; (800f284 <TIM_Base_SetConfig+0x1c0>)
 800f100:	4293      	cmp	r3, r2
 800f102:	d017      	beq.n	800f134 <TIM_Base_SetConfig+0x70>
 800f104:	687b      	ldr	r3, [r7, #4]
 800f106:	4a60      	ldr	r2, [pc, #384]	; (800f288 <TIM_Base_SetConfig+0x1c4>)
 800f108:	4293      	cmp	r3, r2
 800f10a:	d013      	beq.n	800f134 <TIM_Base_SetConfig+0x70>
 800f10c:	687b      	ldr	r3, [r7, #4]
 800f10e:	4a5f      	ldr	r2, [pc, #380]	; (800f28c <TIM_Base_SetConfig+0x1c8>)
 800f110:	4293      	cmp	r3, r2
 800f112:	d00f      	beq.n	800f134 <TIM_Base_SetConfig+0x70>
 800f114:	687b      	ldr	r3, [r7, #4]
 800f116:	4a5e      	ldr	r2, [pc, #376]	; (800f290 <TIM_Base_SetConfig+0x1cc>)
 800f118:	4293      	cmp	r3, r2
 800f11a:	d00b      	beq.n	800f134 <TIM_Base_SetConfig+0x70>
 800f11c:	687b      	ldr	r3, [r7, #4]
 800f11e:	4a5d      	ldr	r2, [pc, #372]	; (800f294 <TIM_Base_SetConfig+0x1d0>)
 800f120:	4293      	cmp	r3, r2
 800f122:	d007      	beq.n	800f134 <TIM_Base_SetConfig+0x70>
 800f124:	687b      	ldr	r3, [r7, #4]
 800f126:	4a5c      	ldr	r2, [pc, #368]	; (800f298 <TIM_Base_SetConfig+0x1d4>)
 800f128:	4293      	cmp	r3, r2
 800f12a:	d003      	beq.n	800f134 <TIM_Base_SetConfig+0x70>
 800f12c:	687b      	ldr	r3, [r7, #4]
 800f12e:	4a5b      	ldr	r2, [pc, #364]	; (800f29c <TIM_Base_SetConfig+0x1d8>)
 800f130:	4293      	cmp	r3, r2
 800f132:	d108      	bne.n	800f146 <TIM_Base_SetConfig+0x82>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800f134:	68fb      	ldr	r3, [r7, #12]
 800f136:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f13a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800f13c:	683b      	ldr	r3, [r7, #0]
 800f13e:	685b      	ldr	r3, [r3, #4]
 800f140:	68fa      	ldr	r2, [r7, #12]
 800f142:	4313      	orrs	r3, r2
 800f144:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800f146:	687b      	ldr	r3, [r7, #4]
 800f148:	4a4b      	ldr	r2, [pc, #300]	; (800f278 <TIM_Base_SetConfig+0x1b4>)
 800f14a:	4293      	cmp	r3, r2
 800f14c:	d043      	beq.n	800f1d6 <TIM_Base_SetConfig+0x112>
 800f14e:	687b      	ldr	r3, [r7, #4]
 800f150:	4a4a      	ldr	r2, [pc, #296]	; (800f27c <TIM_Base_SetConfig+0x1b8>)
 800f152:	4293      	cmp	r3, r2
 800f154:	d03f      	beq.n	800f1d6 <TIM_Base_SetConfig+0x112>
 800f156:	687b      	ldr	r3, [r7, #4]
 800f158:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f15c:	d03b      	beq.n	800f1d6 <TIM_Base_SetConfig+0x112>
 800f15e:	687b      	ldr	r3, [r7, #4]
 800f160:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800f164:	d037      	beq.n	800f1d6 <TIM_Base_SetConfig+0x112>
 800f166:	687b      	ldr	r3, [r7, #4]
 800f168:	4a45      	ldr	r2, [pc, #276]	; (800f280 <TIM_Base_SetConfig+0x1bc>)
 800f16a:	4293      	cmp	r3, r2
 800f16c:	d033      	beq.n	800f1d6 <TIM_Base_SetConfig+0x112>
 800f16e:	687b      	ldr	r3, [r7, #4]
 800f170:	4a44      	ldr	r2, [pc, #272]	; (800f284 <TIM_Base_SetConfig+0x1c0>)
 800f172:	4293      	cmp	r3, r2
 800f174:	d02f      	beq.n	800f1d6 <TIM_Base_SetConfig+0x112>
 800f176:	687b      	ldr	r3, [r7, #4]
 800f178:	4a43      	ldr	r2, [pc, #268]	; (800f288 <TIM_Base_SetConfig+0x1c4>)
 800f17a:	4293      	cmp	r3, r2
 800f17c:	d02b      	beq.n	800f1d6 <TIM_Base_SetConfig+0x112>
 800f17e:	687b      	ldr	r3, [r7, #4]
 800f180:	4a42      	ldr	r2, [pc, #264]	; (800f28c <TIM_Base_SetConfig+0x1c8>)
 800f182:	4293      	cmp	r3, r2
 800f184:	d027      	beq.n	800f1d6 <TIM_Base_SetConfig+0x112>
 800f186:	687b      	ldr	r3, [r7, #4]
 800f188:	4a41      	ldr	r2, [pc, #260]	; (800f290 <TIM_Base_SetConfig+0x1cc>)
 800f18a:	4293      	cmp	r3, r2
 800f18c:	d023      	beq.n	800f1d6 <TIM_Base_SetConfig+0x112>
 800f18e:	687b      	ldr	r3, [r7, #4]
 800f190:	4a40      	ldr	r2, [pc, #256]	; (800f294 <TIM_Base_SetConfig+0x1d0>)
 800f192:	4293      	cmp	r3, r2
 800f194:	d01f      	beq.n	800f1d6 <TIM_Base_SetConfig+0x112>
 800f196:	687b      	ldr	r3, [r7, #4]
 800f198:	4a3f      	ldr	r2, [pc, #252]	; (800f298 <TIM_Base_SetConfig+0x1d4>)
 800f19a:	4293      	cmp	r3, r2
 800f19c:	d01b      	beq.n	800f1d6 <TIM_Base_SetConfig+0x112>
 800f19e:	687b      	ldr	r3, [r7, #4]
 800f1a0:	4a3e      	ldr	r2, [pc, #248]	; (800f29c <TIM_Base_SetConfig+0x1d8>)
 800f1a2:	4293      	cmp	r3, r2
 800f1a4:	d017      	beq.n	800f1d6 <TIM_Base_SetConfig+0x112>
 800f1a6:	687b      	ldr	r3, [r7, #4]
 800f1a8:	4a3d      	ldr	r2, [pc, #244]	; (800f2a0 <TIM_Base_SetConfig+0x1dc>)
 800f1aa:	4293      	cmp	r3, r2
 800f1ac:	d013      	beq.n	800f1d6 <TIM_Base_SetConfig+0x112>
 800f1ae:	687b      	ldr	r3, [r7, #4]
 800f1b0:	4a3c      	ldr	r2, [pc, #240]	; (800f2a4 <TIM_Base_SetConfig+0x1e0>)
 800f1b2:	4293      	cmp	r3, r2
 800f1b4:	d00f      	beq.n	800f1d6 <TIM_Base_SetConfig+0x112>
 800f1b6:	687b      	ldr	r3, [r7, #4]
 800f1b8:	4a3b      	ldr	r2, [pc, #236]	; (800f2a8 <TIM_Base_SetConfig+0x1e4>)
 800f1ba:	4293      	cmp	r3, r2
 800f1bc:	d00b      	beq.n	800f1d6 <TIM_Base_SetConfig+0x112>
 800f1be:	687b      	ldr	r3, [r7, #4]
 800f1c0:	4a3a      	ldr	r2, [pc, #232]	; (800f2ac <TIM_Base_SetConfig+0x1e8>)
 800f1c2:	4293      	cmp	r3, r2
 800f1c4:	d007      	beq.n	800f1d6 <TIM_Base_SetConfig+0x112>
 800f1c6:	687b      	ldr	r3, [r7, #4]
 800f1c8:	4a39      	ldr	r2, [pc, #228]	; (800f2b0 <TIM_Base_SetConfig+0x1ec>)
 800f1ca:	4293      	cmp	r3, r2
 800f1cc:	d003      	beq.n	800f1d6 <TIM_Base_SetConfig+0x112>
 800f1ce:	687b      	ldr	r3, [r7, #4]
 800f1d0:	4a38      	ldr	r2, [pc, #224]	; (800f2b4 <TIM_Base_SetConfig+0x1f0>)
 800f1d2:	4293      	cmp	r3, r2
 800f1d4:	d108      	bne.n	800f1e8 <TIM_Base_SetConfig+0x124>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800f1d6:	68fb      	ldr	r3, [r7, #12]
 800f1d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f1dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800f1de:	683b      	ldr	r3, [r7, #0]
 800f1e0:	68db      	ldr	r3, [r3, #12]
 800f1e2:	68fa      	ldr	r2, [r7, #12]
 800f1e4:	4313      	orrs	r3, r2
 800f1e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800f1e8:	68fb      	ldr	r3, [r7, #12]
 800f1ea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800f1ee:	683b      	ldr	r3, [r7, #0]
 800f1f0:	695b      	ldr	r3, [r3, #20]
 800f1f2:	4313      	orrs	r3, r2
 800f1f4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800f1f6:	687b      	ldr	r3, [r7, #4]
 800f1f8:	68fa      	ldr	r2, [r7, #12]
 800f1fa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800f1fc:	683b      	ldr	r3, [r7, #0]
 800f1fe:	689a      	ldr	r2, [r3, #8]
 800f200:	687b      	ldr	r3, [r7, #4]
 800f202:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800f204:	683b      	ldr	r3, [r7, #0]
 800f206:	681a      	ldr	r2, [r3, #0]
 800f208:	687b      	ldr	r3, [r7, #4]
 800f20a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800f20c:	687b      	ldr	r3, [r7, #4]
 800f20e:	4a1a      	ldr	r2, [pc, #104]	; (800f278 <TIM_Base_SetConfig+0x1b4>)
 800f210:	4293      	cmp	r3, r2
 800f212:	d023      	beq.n	800f25c <TIM_Base_SetConfig+0x198>
 800f214:	687b      	ldr	r3, [r7, #4]
 800f216:	4a19      	ldr	r2, [pc, #100]	; (800f27c <TIM_Base_SetConfig+0x1b8>)
 800f218:	4293      	cmp	r3, r2
 800f21a:	d01f      	beq.n	800f25c <TIM_Base_SetConfig+0x198>
 800f21c:	687b      	ldr	r3, [r7, #4]
 800f21e:	4a1e      	ldr	r2, [pc, #120]	; (800f298 <TIM_Base_SetConfig+0x1d4>)
 800f220:	4293      	cmp	r3, r2
 800f222:	d01b      	beq.n	800f25c <TIM_Base_SetConfig+0x198>
 800f224:	687b      	ldr	r3, [r7, #4]
 800f226:	4a1d      	ldr	r2, [pc, #116]	; (800f29c <TIM_Base_SetConfig+0x1d8>)
 800f228:	4293      	cmp	r3, r2
 800f22a:	d017      	beq.n	800f25c <TIM_Base_SetConfig+0x198>
 800f22c:	687b      	ldr	r3, [r7, #4]
 800f22e:	4a1c      	ldr	r2, [pc, #112]	; (800f2a0 <TIM_Base_SetConfig+0x1dc>)
 800f230:	4293      	cmp	r3, r2
 800f232:	d013      	beq.n	800f25c <TIM_Base_SetConfig+0x198>
 800f234:	687b      	ldr	r3, [r7, #4]
 800f236:	4a1b      	ldr	r2, [pc, #108]	; (800f2a4 <TIM_Base_SetConfig+0x1e0>)
 800f238:	4293      	cmp	r3, r2
 800f23a:	d00f      	beq.n	800f25c <TIM_Base_SetConfig+0x198>
 800f23c:	687b      	ldr	r3, [r7, #4]
 800f23e:	4a1a      	ldr	r2, [pc, #104]	; (800f2a8 <TIM_Base_SetConfig+0x1e4>)
 800f240:	4293      	cmp	r3, r2
 800f242:	d00b      	beq.n	800f25c <TIM_Base_SetConfig+0x198>
 800f244:	687b      	ldr	r3, [r7, #4]
 800f246:	4a19      	ldr	r2, [pc, #100]	; (800f2ac <TIM_Base_SetConfig+0x1e8>)
 800f248:	4293      	cmp	r3, r2
 800f24a:	d007      	beq.n	800f25c <TIM_Base_SetConfig+0x198>
 800f24c:	687b      	ldr	r3, [r7, #4]
 800f24e:	4a18      	ldr	r2, [pc, #96]	; (800f2b0 <TIM_Base_SetConfig+0x1ec>)
 800f250:	4293      	cmp	r3, r2
 800f252:	d003      	beq.n	800f25c <TIM_Base_SetConfig+0x198>
 800f254:	687b      	ldr	r3, [r7, #4]
 800f256:	4a17      	ldr	r2, [pc, #92]	; (800f2b4 <TIM_Base_SetConfig+0x1f0>)
 800f258:	4293      	cmp	r3, r2
 800f25a:	d103      	bne.n	800f264 <TIM_Base_SetConfig+0x1a0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800f25c:	683b      	ldr	r3, [r7, #0]
 800f25e:	691a      	ldr	r2, [r3, #16]
 800f260:	687b      	ldr	r3, [r7, #4]
 800f262:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800f264:	687b      	ldr	r3, [r7, #4]
 800f266:	2201      	movs	r2, #1
 800f268:	615a      	str	r2, [r3, #20]
}
 800f26a:	bf00      	nop
 800f26c:	3714      	adds	r7, #20
 800f26e:	46bd      	mov	sp, r7
 800f270:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f274:	4770      	bx	lr
 800f276:	bf00      	nop
 800f278:	40012c00 	.word	0x40012c00
 800f27c:	50012c00 	.word	0x50012c00
 800f280:	40000400 	.word	0x40000400
 800f284:	50000400 	.word	0x50000400
 800f288:	40000800 	.word	0x40000800
 800f28c:	50000800 	.word	0x50000800
 800f290:	40000c00 	.word	0x40000c00
 800f294:	50000c00 	.word	0x50000c00
 800f298:	40013400 	.word	0x40013400
 800f29c:	50013400 	.word	0x50013400
 800f2a0:	40014000 	.word	0x40014000
 800f2a4:	50014000 	.word	0x50014000
 800f2a8:	40014400 	.word	0x40014400
 800f2ac:	50014400 	.word	0x50014400
 800f2b0:	40014800 	.word	0x40014800
 800f2b4:	50014800 	.word	0x50014800

0800f2b8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800f2b8:	b480      	push	{r7}
 800f2ba:	b085      	sub	sp, #20
 800f2bc:	af00      	add	r7, sp, #0
 800f2be:	6078      	str	r0, [r7, #4]
 800f2c0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800f2c2:	687b      	ldr	r3, [r7, #4]
 800f2c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f2c8:	2b01      	cmp	r3, #1
 800f2ca:	d101      	bne.n	800f2d0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800f2cc:	2302      	movs	r3, #2
 800f2ce:	e097      	b.n	800f400 <HAL_TIMEx_MasterConfigSynchronization+0x148>
 800f2d0:	687b      	ldr	r3, [r7, #4]
 800f2d2:	2201      	movs	r2, #1
 800f2d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f2d8:	687b      	ldr	r3, [r7, #4]
 800f2da:	2202      	movs	r2, #2
 800f2dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800f2e0:	687b      	ldr	r3, [r7, #4]
 800f2e2:	681b      	ldr	r3, [r3, #0]
 800f2e4:	685b      	ldr	r3, [r3, #4]
 800f2e6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800f2e8:	687b      	ldr	r3, [r7, #4]
 800f2ea:	681b      	ldr	r3, [r3, #0]
 800f2ec:	689b      	ldr	r3, [r3, #8]
 800f2ee:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800f2f0:	687b      	ldr	r3, [r7, #4]
 800f2f2:	681b      	ldr	r3, [r3, #0]
 800f2f4:	4a45      	ldr	r2, [pc, #276]	; (800f40c <HAL_TIMEx_MasterConfigSynchronization+0x154>)
 800f2f6:	4293      	cmp	r3, r2
 800f2f8:	d00e      	beq.n	800f318 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 800f2fa:	687b      	ldr	r3, [r7, #4]
 800f2fc:	681b      	ldr	r3, [r3, #0]
 800f2fe:	4a44      	ldr	r2, [pc, #272]	; (800f410 <HAL_TIMEx_MasterConfigSynchronization+0x158>)
 800f300:	4293      	cmp	r3, r2
 800f302:	d009      	beq.n	800f318 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 800f304:	687b      	ldr	r3, [r7, #4]
 800f306:	681b      	ldr	r3, [r3, #0]
 800f308:	4a42      	ldr	r2, [pc, #264]	; (800f414 <HAL_TIMEx_MasterConfigSynchronization+0x15c>)
 800f30a:	4293      	cmp	r3, r2
 800f30c:	d004      	beq.n	800f318 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 800f30e:	687b      	ldr	r3, [r7, #4]
 800f310:	681b      	ldr	r3, [r3, #0]
 800f312:	4a41      	ldr	r2, [pc, #260]	; (800f418 <HAL_TIMEx_MasterConfigSynchronization+0x160>)
 800f314:	4293      	cmp	r3, r2
 800f316:	d108      	bne.n	800f32a <HAL_TIMEx_MasterConfigSynchronization+0x72>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800f318:	68fb      	ldr	r3, [r7, #12]
 800f31a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800f31e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800f320:	683b      	ldr	r3, [r7, #0]
 800f322:	685b      	ldr	r3, [r3, #4]
 800f324:	68fa      	ldr	r2, [r7, #12]
 800f326:	4313      	orrs	r3, r2
 800f328:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800f32a:	68fb      	ldr	r3, [r7, #12]
 800f32c:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800f330:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f334:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800f336:	683b      	ldr	r3, [r7, #0]
 800f338:	681b      	ldr	r3, [r3, #0]
 800f33a:	68fa      	ldr	r2, [r7, #12]
 800f33c:	4313      	orrs	r3, r2
 800f33e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800f340:	687b      	ldr	r3, [r7, #4]
 800f342:	681b      	ldr	r3, [r3, #0]
 800f344:	68fa      	ldr	r2, [r7, #12]
 800f346:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f348:	687b      	ldr	r3, [r7, #4]
 800f34a:	681b      	ldr	r3, [r3, #0]
 800f34c:	4a2f      	ldr	r2, [pc, #188]	; (800f40c <HAL_TIMEx_MasterConfigSynchronization+0x154>)
 800f34e:	4293      	cmp	r3, r2
 800f350:	d040      	beq.n	800f3d4 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800f352:	687b      	ldr	r3, [r7, #4]
 800f354:	681b      	ldr	r3, [r3, #0]
 800f356:	4a2e      	ldr	r2, [pc, #184]	; (800f410 <HAL_TIMEx_MasterConfigSynchronization+0x158>)
 800f358:	4293      	cmp	r3, r2
 800f35a:	d03b      	beq.n	800f3d4 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800f35c:	687b      	ldr	r3, [r7, #4]
 800f35e:	681b      	ldr	r3, [r3, #0]
 800f360:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f364:	d036      	beq.n	800f3d4 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800f366:	687b      	ldr	r3, [r7, #4]
 800f368:	681b      	ldr	r3, [r3, #0]
 800f36a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800f36e:	d031      	beq.n	800f3d4 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800f370:	687b      	ldr	r3, [r7, #4]
 800f372:	681b      	ldr	r3, [r3, #0]
 800f374:	4a29      	ldr	r2, [pc, #164]	; (800f41c <HAL_TIMEx_MasterConfigSynchronization+0x164>)
 800f376:	4293      	cmp	r3, r2
 800f378:	d02c      	beq.n	800f3d4 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800f37a:	687b      	ldr	r3, [r7, #4]
 800f37c:	681b      	ldr	r3, [r3, #0]
 800f37e:	4a28      	ldr	r2, [pc, #160]	; (800f420 <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 800f380:	4293      	cmp	r3, r2
 800f382:	d027      	beq.n	800f3d4 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800f384:	687b      	ldr	r3, [r7, #4]
 800f386:	681b      	ldr	r3, [r3, #0]
 800f388:	4a26      	ldr	r2, [pc, #152]	; (800f424 <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 800f38a:	4293      	cmp	r3, r2
 800f38c:	d022      	beq.n	800f3d4 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800f38e:	687b      	ldr	r3, [r7, #4]
 800f390:	681b      	ldr	r3, [r3, #0]
 800f392:	4a25      	ldr	r2, [pc, #148]	; (800f428 <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 800f394:	4293      	cmp	r3, r2
 800f396:	d01d      	beq.n	800f3d4 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800f398:	687b      	ldr	r3, [r7, #4]
 800f39a:	681b      	ldr	r3, [r3, #0]
 800f39c:	4a23      	ldr	r2, [pc, #140]	; (800f42c <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 800f39e:	4293      	cmp	r3, r2
 800f3a0:	d018      	beq.n	800f3d4 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800f3a2:	687b      	ldr	r3, [r7, #4]
 800f3a4:	681b      	ldr	r3, [r3, #0]
 800f3a6:	4a22      	ldr	r2, [pc, #136]	; (800f430 <HAL_TIMEx_MasterConfigSynchronization+0x178>)
 800f3a8:	4293      	cmp	r3, r2
 800f3aa:	d013      	beq.n	800f3d4 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800f3ac:	687b      	ldr	r3, [r7, #4]
 800f3ae:	681b      	ldr	r3, [r3, #0]
 800f3b0:	4a18      	ldr	r2, [pc, #96]	; (800f414 <HAL_TIMEx_MasterConfigSynchronization+0x15c>)
 800f3b2:	4293      	cmp	r3, r2
 800f3b4:	d00e      	beq.n	800f3d4 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800f3b6:	687b      	ldr	r3, [r7, #4]
 800f3b8:	681b      	ldr	r3, [r3, #0]
 800f3ba:	4a17      	ldr	r2, [pc, #92]	; (800f418 <HAL_TIMEx_MasterConfigSynchronization+0x160>)
 800f3bc:	4293      	cmp	r3, r2
 800f3be:	d009      	beq.n	800f3d4 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800f3c0:	687b      	ldr	r3, [r7, #4]
 800f3c2:	681b      	ldr	r3, [r3, #0]
 800f3c4:	4a1b      	ldr	r2, [pc, #108]	; (800f434 <HAL_TIMEx_MasterConfigSynchronization+0x17c>)
 800f3c6:	4293      	cmp	r3, r2
 800f3c8:	d004      	beq.n	800f3d4 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800f3ca:	687b      	ldr	r3, [r7, #4]
 800f3cc:	681b      	ldr	r3, [r3, #0]
 800f3ce:	4a1a      	ldr	r2, [pc, #104]	; (800f438 <HAL_TIMEx_MasterConfigSynchronization+0x180>)
 800f3d0:	4293      	cmp	r3, r2
 800f3d2:	d10c      	bne.n	800f3ee <HAL_TIMEx_MasterConfigSynchronization+0x136>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800f3d4:	68bb      	ldr	r3, [r7, #8]
 800f3d6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f3da:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800f3dc:	683b      	ldr	r3, [r7, #0]
 800f3de:	689b      	ldr	r3, [r3, #8]
 800f3e0:	68ba      	ldr	r2, [r7, #8]
 800f3e2:	4313      	orrs	r3, r2
 800f3e4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800f3e6:	687b      	ldr	r3, [r7, #4]
 800f3e8:	681b      	ldr	r3, [r3, #0]
 800f3ea:	68ba      	ldr	r2, [r7, #8]
 800f3ec:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800f3ee:	687b      	ldr	r3, [r7, #4]
 800f3f0:	2201      	movs	r2, #1
 800f3f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800f3f6:	687b      	ldr	r3, [r7, #4]
 800f3f8:	2200      	movs	r2, #0
 800f3fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800f3fe:	2300      	movs	r3, #0
}
 800f400:	4618      	mov	r0, r3
 800f402:	3714      	adds	r7, #20
 800f404:	46bd      	mov	sp, r7
 800f406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f40a:	4770      	bx	lr
 800f40c:	40012c00 	.word	0x40012c00
 800f410:	50012c00 	.word	0x50012c00
 800f414:	40013400 	.word	0x40013400
 800f418:	50013400 	.word	0x50013400
 800f41c:	40000400 	.word	0x40000400
 800f420:	50000400 	.word	0x50000400
 800f424:	40000800 	.word	0x40000800
 800f428:	50000800 	.word	0x50000800
 800f42c:	40000c00 	.word	0x40000c00
 800f430:	50000c00 	.word	0x50000c00
 800f434:	40014000 	.word	0x40014000
 800f438:	50014000 	.word	0x50014000

0800f43c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800f43c:	b480      	push	{r7}
 800f43e:	b083      	sub	sp, #12
 800f440:	af00      	add	r7, sp, #0
 800f442:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800f444:	bf00      	nop
 800f446:	370c      	adds	r7, #12
 800f448:	46bd      	mov	sp, r7
 800f44a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f44e:	4770      	bx	lr

0800f450 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800f450:	b480      	push	{r7}
 800f452:	b083      	sub	sp, #12
 800f454:	af00      	add	r7, sp, #0
 800f456:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800f458:	bf00      	nop
 800f45a:	370c      	adds	r7, #12
 800f45c:	46bd      	mov	sp, r7
 800f45e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f462:	4770      	bx	lr

0800f464 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800f464:	b480      	push	{r7}
 800f466:	b083      	sub	sp, #12
 800f468:	af00      	add	r7, sp, #0
 800f46a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800f46c:	bf00      	nop
 800f46e:	370c      	adds	r7, #12
 800f470:	46bd      	mov	sp, r7
 800f472:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f476:	4770      	bx	lr

0800f478 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800f478:	b480      	push	{r7}
 800f47a:	b083      	sub	sp, #12
 800f47c:	af00      	add	r7, sp, #0
 800f47e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800f480:	bf00      	nop
 800f482:	370c      	adds	r7, #12
 800f484:	46bd      	mov	sp, r7
 800f486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f48a:	4770      	bx	lr

0800f48c <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800f48c:	b480      	push	{r7}
 800f48e:	b083      	sub	sp, #12
 800f490:	af00      	add	r7, sp, #0
 800f492:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800f494:	bf00      	nop
 800f496:	370c      	adds	r7, #12
 800f498:	46bd      	mov	sp, r7
 800f49a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f49e:	4770      	bx	lr

0800f4a0 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800f4a0:	b480      	push	{r7}
 800f4a2:	b083      	sub	sp, #12
 800f4a4:	af00      	add	r7, sp, #0
 800f4a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800f4a8:	bf00      	nop
 800f4aa:	370c      	adds	r7, #12
 800f4ac:	46bd      	mov	sp, r7
 800f4ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4b2:	4770      	bx	lr

0800f4b4 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800f4b4:	b480      	push	{r7}
 800f4b6:	b083      	sub	sp, #12
 800f4b8:	af00      	add	r7, sp, #0
 800f4ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800f4bc:	bf00      	nop
 800f4be:	370c      	adds	r7, #12
 800f4c0:	46bd      	mov	sp, r7
 800f4c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4c6:	4770      	bx	lr

0800f4c8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800f4c8:	b580      	push	{r7, lr}
 800f4ca:	b082      	sub	sp, #8
 800f4cc:	af00      	add	r7, sp, #0
 800f4ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800f4d0:	687b      	ldr	r3, [r7, #4]
 800f4d2:	2b00      	cmp	r3, #0
 800f4d4:	d101      	bne.n	800f4da <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800f4d6:	2301      	movs	r3, #1
 800f4d8:	e042      	b.n	800f560 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800f4da:	687b      	ldr	r3, [r7, #4]
 800f4dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f4e0:	2b00      	cmp	r3, #0
 800f4e2:	d106      	bne.n	800f4f2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800f4e4:	687b      	ldr	r3, [r7, #4]
 800f4e6:	2200      	movs	r2, #0
 800f4e8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800f4ec:	6878      	ldr	r0, [r7, #4]
 800f4ee:	f7f6 ff37 	bl	8006360 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800f4f2:	687b      	ldr	r3, [r7, #4]
 800f4f4:	2224      	movs	r2, #36	; 0x24
 800f4f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800f4fa:	687b      	ldr	r3, [r7, #4]
 800f4fc:	681b      	ldr	r3, [r3, #0]
 800f4fe:	681a      	ldr	r2, [r3, #0]
 800f500:	687b      	ldr	r3, [r7, #4]
 800f502:	681b      	ldr	r3, [r3, #0]
 800f504:	f022 0201 	bic.w	r2, r2, #1
 800f508:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800f50a:	6878      	ldr	r0, [r7, #4]
 800f50c:	f000 f8d2 	bl	800f6b4 <UART_SetConfig>
 800f510:	4603      	mov	r3, r0
 800f512:	2b01      	cmp	r3, #1
 800f514:	d101      	bne.n	800f51a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800f516:	2301      	movs	r3, #1
 800f518:	e022      	b.n	800f560 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800f51a:	687b      	ldr	r3, [r7, #4]
 800f51c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f51e:	2b00      	cmp	r3, #0
 800f520:	d002      	beq.n	800f528 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800f522:	6878      	ldr	r0, [r7, #4]
 800f524:	f000 fa68 	bl	800f9f8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800f528:	687b      	ldr	r3, [r7, #4]
 800f52a:	681b      	ldr	r3, [r3, #0]
 800f52c:	685a      	ldr	r2, [r3, #4]
 800f52e:	687b      	ldr	r3, [r7, #4]
 800f530:	681b      	ldr	r3, [r3, #0]
 800f532:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800f536:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800f538:	687b      	ldr	r3, [r7, #4]
 800f53a:	681b      	ldr	r3, [r3, #0]
 800f53c:	689a      	ldr	r2, [r3, #8]
 800f53e:	687b      	ldr	r3, [r7, #4]
 800f540:	681b      	ldr	r3, [r3, #0]
 800f542:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800f546:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800f548:	687b      	ldr	r3, [r7, #4]
 800f54a:	681b      	ldr	r3, [r3, #0]
 800f54c:	681a      	ldr	r2, [r3, #0]
 800f54e:	687b      	ldr	r3, [r7, #4]
 800f550:	681b      	ldr	r3, [r3, #0]
 800f552:	f042 0201 	orr.w	r2, r2, #1
 800f556:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800f558:	6878      	ldr	r0, [r7, #4]
 800f55a:	f000 faef 	bl	800fb3c <UART_CheckIdleState>
 800f55e:	4603      	mov	r3, r0
}
 800f560:	4618      	mov	r0, r3
 800f562:	3708      	adds	r7, #8
 800f564:	46bd      	mov	sp, r7
 800f566:	bd80      	pop	{r7, pc}

0800f568 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800f568:	b580      	push	{r7, lr}
 800f56a:	b08a      	sub	sp, #40	; 0x28
 800f56c:	af02      	add	r7, sp, #8
 800f56e:	60f8      	str	r0, [r7, #12]
 800f570:	60b9      	str	r1, [r7, #8]
 800f572:	603b      	str	r3, [r7, #0]
 800f574:	4613      	mov	r3, r2
 800f576:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800f578:	68fb      	ldr	r3, [r7, #12]
 800f57a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f57e:	2b20      	cmp	r3, #32
 800f580:	f040 8092 	bne.w	800f6a8 <HAL_UART_Transmit+0x140>
  {
    if ((pData == NULL) || (Size == 0U))
 800f584:	68bb      	ldr	r3, [r7, #8]
 800f586:	2b00      	cmp	r3, #0
 800f588:	d002      	beq.n	800f590 <HAL_UART_Transmit+0x28>
 800f58a:	88fb      	ldrh	r3, [r7, #6]
 800f58c:	2b00      	cmp	r3, #0
 800f58e:	d101      	bne.n	800f594 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800f590:	2301      	movs	r3, #1
 800f592:	e08a      	b.n	800f6aa <HAL_UART_Transmit+0x142>
    }

    __HAL_LOCK(huart);
 800f594:	68fb      	ldr	r3, [r7, #12]
 800f596:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800f59a:	2b01      	cmp	r3, #1
 800f59c:	d101      	bne.n	800f5a2 <HAL_UART_Transmit+0x3a>
 800f59e:	2302      	movs	r3, #2
 800f5a0:	e083      	b.n	800f6aa <HAL_UART_Transmit+0x142>
 800f5a2:	68fb      	ldr	r3, [r7, #12]
 800f5a4:	2201      	movs	r2, #1
 800f5a6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Disable the UART DMA Tx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800f5aa:	68fb      	ldr	r3, [r7, #12]
 800f5ac:	681b      	ldr	r3, [r3, #0]
 800f5ae:	689b      	ldr	r3, [r3, #8]
 800f5b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f5b4:	2b80      	cmp	r3, #128	; 0x80
 800f5b6:	d107      	bne.n	800f5c8 <HAL_UART_Transmit+0x60>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800f5b8:	68fb      	ldr	r3, [r7, #12]
 800f5ba:	681b      	ldr	r3, [r3, #0]
 800f5bc:	689a      	ldr	r2, [r3, #8]
 800f5be:	68fb      	ldr	r3, [r7, #12]
 800f5c0:	681b      	ldr	r3, [r3, #0]
 800f5c2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800f5c6:	609a      	str	r2, [r3, #8]
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f5c8:	68fb      	ldr	r3, [r7, #12]
 800f5ca:	2200      	movs	r2, #0
 800f5cc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800f5d0:	68fb      	ldr	r3, [r7, #12]
 800f5d2:	2221      	movs	r2, #33	; 0x21
 800f5d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800f5d8:	f7f6 ff96 	bl	8006508 <HAL_GetTick>
 800f5dc:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800f5de:	68fb      	ldr	r3, [r7, #12]
 800f5e0:	88fa      	ldrh	r2, [r7, #6]
 800f5e2:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800f5e6:	68fb      	ldr	r3, [r7, #12]
 800f5e8:	88fa      	ldrh	r2, [r7, #6]
 800f5ea:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800f5ee:	68fb      	ldr	r3, [r7, #12]
 800f5f0:	689b      	ldr	r3, [r3, #8]
 800f5f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f5f6:	d108      	bne.n	800f60a <HAL_UART_Transmit+0xa2>
 800f5f8:	68fb      	ldr	r3, [r7, #12]
 800f5fa:	691b      	ldr	r3, [r3, #16]
 800f5fc:	2b00      	cmp	r3, #0
 800f5fe:	d104      	bne.n	800f60a <HAL_UART_Transmit+0xa2>
    {
      pdata8bits  = NULL;
 800f600:	2300      	movs	r3, #0
 800f602:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800f604:	68bb      	ldr	r3, [r7, #8]
 800f606:	61bb      	str	r3, [r7, #24]
 800f608:	e003      	b.n	800f612 <HAL_UART_Transmit+0xaa>
    }
    else
    {
      pdata8bits  = pData;
 800f60a:	68bb      	ldr	r3, [r7, #8]
 800f60c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800f60e:	2300      	movs	r3, #0
 800f610:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800f612:	68fb      	ldr	r3, [r7, #12]
 800f614:	2200      	movs	r2, #0
 800f616:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 800f61a:	e02c      	b.n	800f676 <HAL_UART_Transmit+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800f61c:	683b      	ldr	r3, [r7, #0]
 800f61e:	9300      	str	r3, [sp, #0]
 800f620:	697b      	ldr	r3, [r7, #20]
 800f622:	2200      	movs	r2, #0
 800f624:	2180      	movs	r1, #128	; 0x80
 800f626:	68f8      	ldr	r0, [r7, #12]
 800f628:	f000 fad3 	bl	800fbd2 <UART_WaitOnFlagUntilTimeout>
 800f62c:	4603      	mov	r3, r0
 800f62e:	2b00      	cmp	r3, #0
 800f630:	d001      	beq.n	800f636 <HAL_UART_Transmit+0xce>
      {
        return HAL_TIMEOUT;
 800f632:	2303      	movs	r3, #3
 800f634:	e039      	b.n	800f6aa <HAL_UART_Transmit+0x142>
      }
      if (pdata8bits == NULL)
 800f636:	69fb      	ldr	r3, [r7, #28]
 800f638:	2b00      	cmp	r3, #0
 800f63a:	d10b      	bne.n	800f654 <HAL_UART_Transmit+0xec>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800f63c:	69bb      	ldr	r3, [r7, #24]
 800f63e:	881b      	ldrh	r3, [r3, #0]
 800f640:	461a      	mov	r2, r3
 800f642:	68fb      	ldr	r3, [r7, #12]
 800f644:	681b      	ldr	r3, [r3, #0]
 800f646:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800f64a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800f64c:	69bb      	ldr	r3, [r7, #24]
 800f64e:	3302      	adds	r3, #2
 800f650:	61bb      	str	r3, [r7, #24]
 800f652:	e007      	b.n	800f664 <HAL_UART_Transmit+0xfc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800f654:	69fb      	ldr	r3, [r7, #28]
 800f656:	781a      	ldrb	r2, [r3, #0]
 800f658:	68fb      	ldr	r3, [r7, #12]
 800f65a:	681b      	ldr	r3, [r3, #0]
 800f65c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800f65e:	69fb      	ldr	r3, [r7, #28]
 800f660:	3301      	adds	r3, #1
 800f662:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800f664:	68fb      	ldr	r3, [r7, #12]
 800f666:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800f66a:	b29b      	uxth	r3, r3
 800f66c:	3b01      	subs	r3, #1
 800f66e:	b29a      	uxth	r2, r3
 800f670:	68fb      	ldr	r3, [r7, #12]
 800f672:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800f676:	68fb      	ldr	r3, [r7, #12]
 800f678:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800f67c:	b29b      	uxth	r3, r3
 800f67e:	2b00      	cmp	r3, #0
 800f680:	d1cc      	bne.n	800f61c <HAL_UART_Transmit+0xb4>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800f682:	683b      	ldr	r3, [r7, #0]
 800f684:	9300      	str	r3, [sp, #0]
 800f686:	697b      	ldr	r3, [r7, #20]
 800f688:	2200      	movs	r2, #0
 800f68a:	2140      	movs	r1, #64	; 0x40
 800f68c:	68f8      	ldr	r0, [r7, #12]
 800f68e:	f000 faa0 	bl	800fbd2 <UART_WaitOnFlagUntilTimeout>
 800f692:	4603      	mov	r3, r0
 800f694:	2b00      	cmp	r3, #0
 800f696:	d001      	beq.n	800f69c <HAL_UART_Transmit+0x134>
    {
      return HAL_TIMEOUT;
 800f698:	2303      	movs	r3, #3
 800f69a:	e006      	b.n	800f6aa <HAL_UART_Transmit+0x142>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800f69c:	68fb      	ldr	r3, [r7, #12]
 800f69e:	2220      	movs	r2, #32
 800f6a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800f6a4:	2300      	movs	r3, #0
 800f6a6:	e000      	b.n	800f6aa <HAL_UART_Transmit+0x142>
  }
  else
  {
    return HAL_BUSY;
 800f6a8:	2302      	movs	r3, #2
  }
}
 800f6aa:	4618      	mov	r0, r3
 800f6ac:	3720      	adds	r7, #32
 800f6ae:	46bd      	mov	sp, r7
 800f6b0:	bd80      	pop	{r7, pc}
	...

0800f6b4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800f6b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800f6b8:	b094      	sub	sp, #80	; 0x50
 800f6ba:	af00      	add	r7, sp, #0
 800f6bc:	62f8      	str	r0, [r7, #44]	; 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800f6be:	2300      	movs	r3, #0
 800f6c0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 800f6c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f6c6:	681a      	ldr	r2, [r3, #0]
 800f6c8:	4b7e      	ldr	r3, [pc, #504]	; (800f8c4 <UART_SetConfig+0x210>)
 800f6ca:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800f6cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f6ce:	689a      	ldr	r2, [r3, #8]
 800f6d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f6d2:	691b      	ldr	r3, [r3, #16]
 800f6d4:	431a      	orrs	r2, r3
 800f6d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f6d8:	695b      	ldr	r3, [r3, #20]
 800f6da:	431a      	orrs	r2, r3
 800f6dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f6de:	69db      	ldr	r3, [r3, #28]
 800f6e0:	4313      	orrs	r3, r2
 800f6e2:	64fb      	str	r3, [r7, #76]	; 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800f6e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f6e6:	681b      	ldr	r3, [r3, #0]
 800f6e8:	681b      	ldr	r3, [r3, #0]
 800f6ea:	4977      	ldr	r1, [pc, #476]	; (800f8c8 <UART_SetConfig+0x214>)
 800f6ec:	4019      	ands	r1, r3
 800f6ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f6f0:	681a      	ldr	r2, [r3, #0]
 800f6f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f6f4:	430b      	orrs	r3, r1
 800f6f6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800f6f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f6fa:	681b      	ldr	r3, [r3, #0]
 800f6fc:	685b      	ldr	r3, [r3, #4]
 800f6fe:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800f702:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f704:	68d9      	ldr	r1, [r3, #12]
 800f706:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f708:	681a      	ldr	r2, [r3, #0]
 800f70a:	ea40 0301 	orr.w	r3, r0, r1
 800f70e:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800f710:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f712:	699b      	ldr	r3, [r3, #24]
 800f714:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800f716:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f718:	681a      	ldr	r2, [r3, #0]
 800f71a:	4b6a      	ldr	r3, [pc, #424]	; (800f8c4 <UART_SetConfig+0x210>)
 800f71c:	429a      	cmp	r2, r3
 800f71e:	d009      	beq.n	800f734 <UART_SetConfig+0x80>
 800f720:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f722:	681a      	ldr	r2, [r3, #0]
 800f724:	4b69      	ldr	r3, [pc, #420]	; (800f8cc <UART_SetConfig+0x218>)
 800f726:	429a      	cmp	r2, r3
 800f728:	d004      	beq.n	800f734 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800f72a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f72c:	6a1a      	ldr	r2, [r3, #32]
 800f72e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f730:	4313      	orrs	r3, r2
 800f732:	64fb      	str	r3, [r7, #76]	; 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800f734:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f736:	681b      	ldr	r3, [r3, #0]
 800f738:	689b      	ldr	r3, [r3, #8]
 800f73a:	f023 416e 	bic.w	r1, r3, #3992977408	; 0xee000000
 800f73e:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
 800f742:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f744:	681a      	ldr	r2, [r3, #0]
 800f746:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f748:	430b      	orrs	r3, r1
 800f74a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800f74c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f74e:	681b      	ldr	r3, [r3, #0]
 800f750:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f752:	f023 000f 	bic.w	r0, r3, #15
 800f756:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f758:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800f75a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f75c:	681a      	ldr	r2, [r3, #0]
 800f75e:	ea40 0301 	orr.w	r3, r0, r1
 800f762:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800f764:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f766:	681a      	ldr	r2, [r3, #0]
 800f768:	4b59      	ldr	r3, [pc, #356]	; (800f8d0 <UART_SetConfig+0x21c>)
 800f76a:	429a      	cmp	r2, r3
 800f76c:	d102      	bne.n	800f774 <UART_SetConfig+0xc0>
 800f76e:	2301      	movs	r3, #1
 800f770:	64bb      	str	r3, [r7, #72]	; 0x48
 800f772:	e029      	b.n	800f7c8 <UART_SetConfig+0x114>
 800f774:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f776:	681a      	ldr	r2, [r3, #0]
 800f778:	4b56      	ldr	r3, [pc, #344]	; (800f8d4 <UART_SetConfig+0x220>)
 800f77a:	429a      	cmp	r2, r3
 800f77c:	d102      	bne.n	800f784 <UART_SetConfig+0xd0>
 800f77e:	2302      	movs	r3, #2
 800f780:	64bb      	str	r3, [r7, #72]	; 0x48
 800f782:	e021      	b.n	800f7c8 <UART_SetConfig+0x114>
 800f784:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f786:	681a      	ldr	r2, [r3, #0]
 800f788:	4b53      	ldr	r3, [pc, #332]	; (800f8d8 <UART_SetConfig+0x224>)
 800f78a:	429a      	cmp	r2, r3
 800f78c:	d102      	bne.n	800f794 <UART_SetConfig+0xe0>
 800f78e:	2304      	movs	r3, #4
 800f790:	64bb      	str	r3, [r7, #72]	; 0x48
 800f792:	e019      	b.n	800f7c8 <UART_SetConfig+0x114>
 800f794:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f796:	681a      	ldr	r2, [r3, #0]
 800f798:	4b50      	ldr	r3, [pc, #320]	; (800f8dc <UART_SetConfig+0x228>)
 800f79a:	429a      	cmp	r2, r3
 800f79c:	d102      	bne.n	800f7a4 <UART_SetConfig+0xf0>
 800f79e:	2308      	movs	r3, #8
 800f7a0:	64bb      	str	r3, [r7, #72]	; 0x48
 800f7a2:	e011      	b.n	800f7c8 <UART_SetConfig+0x114>
 800f7a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f7a6:	681a      	ldr	r2, [r3, #0]
 800f7a8:	4b4d      	ldr	r3, [pc, #308]	; (800f8e0 <UART_SetConfig+0x22c>)
 800f7aa:	429a      	cmp	r2, r3
 800f7ac:	d102      	bne.n	800f7b4 <UART_SetConfig+0x100>
 800f7ae:	2310      	movs	r3, #16
 800f7b0:	64bb      	str	r3, [r7, #72]	; 0x48
 800f7b2:	e009      	b.n	800f7c8 <UART_SetConfig+0x114>
 800f7b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f7b6:	681a      	ldr	r2, [r3, #0]
 800f7b8:	4b42      	ldr	r3, [pc, #264]	; (800f8c4 <UART_SetConfig+0x210>)
 800f7ba:	429a      	cmp	r2, r3
 800f7bc:	d102      	bne.n	800f7c4 <UART_SetConfig+0x110>
 800f7be:	2320      	movs	r3, #32
 800f7c0:	64bb      	str	r3, [r7, #72]	; 0x48
 800f7c2:	e001      	b.n	800f7c8 <UART_SetConfig+0x114>
 800f7c4:	2300      	movs	r3, #0
 800f7c6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800f7c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f7ca:	681a      	ldr	r2, [r3, #0]
 800f7cc:	4b3d      	ldr	r3, [pc, #244]	; (800f8c4 <UART_SetConfig+0x210>)
 800f7ce:	429a      	cmp	r2, r3
 800f7d0:	d005      	beq.n	800f7de <UART_SetConfig+0x12a>
 800f7d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f7d4:	681a      	ldr	r2, [r3, #0]
 800f7d6:	4b3d      	ldr	r3, [pc, #244]	; (800f8cc <UART_SetConfig+0x218>)
 800f7d8:	429a      	cmp	r2, r3
 800f7da:	f040 8085 	bne.w	800f8e8 <UART_SetConfig+0x234>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800f7de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f7e0:	2200      	movs	r2, #0
 800f7e2:	623b      	str	r3, [r7, #32]
 800f7e4:	627a      	str	r2, [r7, #36]	; 0x24
 800f7e6:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800f7ea:	f7fd ff73 	bl	800d6d4 <HAL_RCCEx_GetPeriphCLKFreq>
 800f7ee:	6438      	str	r0, [r7, #64]	; 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 800f7f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f7f2:	2b00      	cmp	r3, #0
 800f7f4:	f000 80e8 	beq.w	800f9c8 <UART_SetConfig+0x314>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800f7f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f7fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f7fc:	4a39      	ldr	r2, [pc, #228]	; (800f8e4 <UART_SetConfig+0x230>)
 800f7fe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f802:	461a      	mov	r2, r3
 800f804:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f806:	fbb3 f3f2 	udiv	r3, r3, r2
 800f80a:	637b      	str	r3, [r7, #52]	; 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800f80c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f80e:	685a      	ldr	r2, [r3, #4]
 800f810:	4613      	mov	r3, r2
 800f812:	005b      	lsls	r3, r3, #1
 800f814:	4413      	add	r3, r2
 800f816:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f818:	429a      	cmp	r2, r3
 800f81a:	d305      	bcc.n	800f828 <UART_SetConfig+0x174>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800f81c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f81e:	685b      	ldr	r3, [r3, #4]
 800f820:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800f822:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f824:	429a      	cmp	r2, r3
 800f826:	d903      	bls.n	800f830 <UART_SetConfig+0x17c>
      {
        ret = HAL_ERROR;
 800f828:	2301      	movs	r3, #1
 800f82a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800f82e:	e048      	b.n	800f8c2 <UART_SetConfig+0x20e>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f830:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f832:	2200      	movs	r2, #0
 800f834:	61bb      	str	r3, [r7, #24]
 800f836:	61fa      	str	r2, [r7, #28]
 800f838:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f83a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f83c:	4a29      	ldr	r2, [pc, #164]	; (800f8e4 <UART_SetConfig+0x230>)
 800f83e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f842:	b29b      	uxth	r3, r3
 800f844:	2200      	movs	r2, #0
 800f846:	613b      	str	r3, [r7, #16]
 800f848:	617a      	str	r2, [r7, #20]
 800f84a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800f84e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800f852:	f7f1 fa4b 	bl	8000cec <__aeabi_uldivmod>
 800f856:	4602      	mov	r2, r0
 800f858:	460b      	mov	r3, r1
 800f85a:	4610      	mov	r0, r2
 800f85c:	4619      	mov	r1, r3
 800f85e:	f04f 0200 	mov.w	r2, #0
 800f862:	f04f 0300 	mov.w	r3, #0
 800f866:	020b      	lsls	r3, r1, #8
 800f868:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800f86c:	0202      	lsls	r2, r0, #8
 800f86e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f870:	6849      	ldr	r1, [r1, #4]
 800f872:	0849      	lsrs	r1, r1, #1
 800f874:	2000      	movs	r0, #0
 800f876:	460c      	mov	r4, r1
 800f878:	4605      	mov	r5, r0
 800f87a:	eb12 0804 	adds.w	r8, r2, r4
 800f87e:	eb43 0905 	adc.w	r9, r3, r5
 800f882:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f884:	685b      	ldr	r3, [r3, #4]
 800f886:	2200      	movs	r2, #0
 800f888:	60bb      	str	r3, [r7, #8]
 800f88a:	60fa      	str	r2, [r7, #12]
 800f88c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800f890:	4640      	mov	r0, r8
 800f892:	4649      	mov	r1, r9
 800f894:	f7f1 fa2a 	bl	8000cec <__aeabi_uldivmod>
 800f898:	4602      	mov	r2, r0
 800f89a:	460b      	mov	r3, r1
 800f89c:	4613      	mov	r3, r2
 800f89e:	63fb      	str	r3, [r7, #60]	; 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800f8a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f8a2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800f8a6:	d308      	bcc.n	800f8ba <UART_SetConfig+0x206>
 800f8a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f8aa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f8ae:	d204      	bcs.n	800f8ba <UART_SetConfig+0x206>
        {
          huart->Instance->BRR = usartdiv;
 800f8b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f8b2:	681b      	ldr	r3, [r3, #0]
 800f8b4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800f8b6:	60da      	str	r2, [r3, #12]
 800f8b8:	e003      	b.n	800f8c2 <UART_SetConfig+0x20e>
        }
        else
        {
          ret = HAL_ERROR;
 800f8ba:	2301      	movs	r3, #1
 800f8bc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if (pclk != 0U)
 800f8c0:	e082      	b.n	800f9c8 <UART_SetConfig+0x314>
 800f8c2:	e081      	b.n	800f9c8 <UART_SetConfig+0x314>
 800f8c4:	46002400 	.word	0x46002400
 800f8c8:	cfff69f3 	.word	0xcfff69f3
 800f8cc:	56002400 	.word	0x56002400
 800f8d0:	40013800 	.word	0x40013800
 800f8d4:	40004400 	.word	0x40004400
 800f8d8:	40004800 	.word	0x40004800
 800f8dc:	40004c00 	.word	0x40004c00
 800f8e0:	40005000 	.word	0x40005000
 800f8e4:	08013b54 	.word	0x08013b54
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800f8e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f8ea:	69db      	ldr	r3, [r3, #28]
 800f8ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f8f0:	d13c      	bne.n	800f96c <UART_SetConfig+0x2b8>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800f8f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f8f4:	2200      	movs	r2, #0
 800f8f6:	603b      	str	r3, [r7, #0]
 800f8f8:	607a      	str	r2, [r7, #4]
 800f8fa:	e9d7 0100 	ldrd	r0, r1, [r7]
 800f8fe:	f7fd fee9 	bl	800d6d4 <HAL_RCCEx_GetPeriphCLKFreq>
 800f902:	6438      	str	r0, [r7, #64]	; 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800f904:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f906:	2b00      	cmp	r3, #0
 800f908:	d05e      	beq.n	800f9c8 <UART_SetConfig+0x314>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f90a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f90c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f90e:	4a39      	ldr	r2, [pc, #228]	; (800f9f4 <UART_SetConfig+0x340>)
 800f910:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f914:	461a      	mov	r2, r3
 800f916:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f918:	fbb3 f3f2 	udiv	r3, r3, r2
 800f91c:	005a      	lsls	r2, r3, #1
 800f91e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f920:	685b      	ldr	r3, [r3, #4]
 800f922:	085b      	lsrs	r3, r3, #1
 800f924:	441a      	add	r2, r3
 800f926:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f928:	685b      	ldr	r3, [r3, #4]
 800f92a:	fbb2 f3f3 	udiv	r3, r2, r3
 800f92e:	63fb      	str	r3, [r7, #60]	; 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800f930:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f932:	2b0f      	cmp	r3, #15
 800f934:	d916      	bls.n	800f964 <UART_SetConfig+0x2b0>
 800f936:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f938:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f93c:	d212      	bcs.n	800f964 <UART_SetConfig+0x2b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800f93e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f940:	b29b      	uxth	r3, r3
 800f942:	f023 030f 	bic.w	r3, r3, #15
 800f946:	877b      	strh	r3, [r7, #58]	; 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800f948:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f94a:	085b      	lsrs	r3, r3, #1
 800f94c:	b29b      	uxth	r3, r3
 800f94e:	f003 0307 	and.w	r3, r3, #7
 800f952:	b29a      	uxth	r2, r3
 800f954:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800f956:	4313      	orrs	r3, r2
 800f958:	877b      	strh	r3, [r7, #58]	; 0x3a
        huart->Instance->BRR = brrtemp;
 800f95a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f95c:	681b      	ldr	r3, [r3, #0]
 800f95e:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800f960:	60da      	str	r2, [r3, #12]
 800f962:	e031      	b.n	800f9c8 <UART_SetConfig+0x314>
      }
      else
      {
        ret = HAL_ERROR;
 800f964:	2301      	movs	r3, #1
 800f966:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800f96a:	e02d      	b.n	800f9c8 <UART_SetConfig+0x314>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800f96c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f96e:	2200      	movs	r2, #0
 800f970:	469a      	mov	sl, r3
 800f972:	4693      	mov	fp, r2
 800f974:	4650      	mov	r0, sl
 800f976:	4659      	mov	r1, fp
 800f978:	f7fd feac 	bl	800d6d4 <HAL_RCCEx_GetPeriphCLKFreq>
 800f97c:	6438      	str	r0, [r7, #64]	; 0x40

    if (pclk != 0U)
 800f97e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f980:	2b00      	cmp	r3, #0
 800f982:	d021      	beq.n	800f9c8 <UART_SetConfig+0x314>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f984:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f988:	4a1a      	ldr	r2, [pc, #104]	; (800f9f4 <UART_SetConfig+0x340>)
 800f98a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f98e:	461a      	mov	r2, r3
 800f990:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f992:	fbb3 f2f2 	udiv	r2, r3, r2
 800f996:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f998:	685b      	ldr	r3, [r3, #4]
 800f99a:	085b      	lsrs	r3, r3, #1
 800f99c:	441a      	add	r2, r3
 800f99e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f9a0:	685b      	ldr	r3, [r3, #4]
 800f9a2:	fbb2 f3f3 	udiv	r3, r2, r3
 800f9a6:	63fb      	str	r3, [r7, #60]	; 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800f9a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f9aa:	2b0f      	cmp	r3, #15
 800f9ac:	d909      	bls.n	800f9c2 <UART_SetConfig+0x30e>
 800f9ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f9b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f9b4:	d205      	bcs.n	800f9c2 <UART_SetConfig+0x30e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800f9b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f9b8:	b29a      	uxth	r2, r3
 800f9ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f9bc:	681b      	ldr	r3, [r3, #0]
 800f9be:	60da      	str	r2, [r3, #12]
 800f9c0:	e002      	b.n	800f9c8 <UART_SetConfig+0x314>
      }
      else
      {
        ret = HAL_ERROR;
 800f9c2:	2301      	movs	r3, #1
 800f9c4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800f9c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f9ca:	2201      	movs	r2, #1
 800f9cc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800f9d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f9d2:	2201      	movs	r2, #1
 800f9d4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800f9d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f9da:	2200      	movs	r2, #0
 800f9dc:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800f9de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f9e0:	2200      	movs	r2, #0
 800f9e2:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800f9e4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 800f9e8:	4618      	mov	r0, r3
 800f9ea:	3750      	adds	r7, #80	; 0x50
 800f9ec:	46bd      	mov	sp, r7
 800f9ee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800f9f2:	bf00      	nop
 800f9f4:	08013b54 	.word	0x08013b54

0800f9f8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800f9f8:	b480      	push	{r7}
 800f9fa:	b083      	sub	sp, #12
 800f9fc:	af00      	add	r7, sp, #0
 800f9fe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800fa00:	687b      	ldr	r3, [r7, #4]
 800fa02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fa04:	f003 0301 	and.w	r3, r3, #1
 800fa08:	2b00      	cmp	r3, #0
 800fa0a:	d00a      	beq.n	800fa22 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800fa0c:	687b      	ldr	r3, [r7, #4]
 800fa0e:	681b      	ldr	r3, [r3, #0]
 800fa10:	685b      	ldr	r3, [r3, #4]
 800fa12:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800fa16:	687b      	ldr	r3, [r7, #4]
 800fa18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fa1a:	687b      	ldr	r3, [r7, #4]
 800fa1c:	681b      	ldr	r3, [r3, #0]
 800fa1e:	430a      	orrs	r2, r1
 800fa20:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800fa22:	687b      	ldr	r3, [r7, #4]
 800fa24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fa26:	f003 0302 	and.w	r3, r3, #2
 800fa2a:	2b00      	cmp	r3, #0
 800fa2c:	d00a      	beq.n	800fa44 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800fa2e:	687b      	ldr	r3, [r7, #4]
 800fa30:	681b      	ldr	r3, [r3, #0]
 800fa32:	685b      	ldr	r3, [r3, #4]
 800fa34:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800fa38:	687b      	ldr	r3, [r7, #4]
 800fa3a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800fa3c:	687b      	ldr	r3, [r7, #4]
 800fa3e:	681b      	ldr	r3, [r3, #0]
 800fa40:	430a      	orrs	r2, r1
 800fa42:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800fa44:	687b      	ldr	r3, [r7, #4]
 800fa46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fa48:	f003 0304 	and.w	r3, r3, #4
 800fa4c:	2b00      	cmp	r3, #0
 800fa4e:	d00a      	beq.n	800fa66 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800fa50:	687b      	ldr	r3, [r7, #4]
 800fa52:	681b      	ldr	r3, [r3, #0]
 800fa54:	685b      	ldr	r3, [r3, #4]
 800fa56:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800fa5a:	687b      	ldr	r3, [r7, #4]
 800fa5c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800fa5e:	687b      	ldr	r3, [r7, #4]
 800fa60:	681b      	ldr	r3, [r3, #0]
 800fa62:	430a      	orrs	r2, r1
 800fa64:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800fa66:	687b      	ldr	r3, [r7, #4]
 800fa68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fa6a:	f003 0308 	and.w	r3, r3, #8
 800fa6e:	2b00      	cmp	r3, #0
 800fa70:	d00a      	beq.n	800fa88 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800fa72:	687b      	ldr	r3, [r7, #4]
 800fa74:	681b      	ldr	r3, [r3, #0]
 800fa76:	685b      	ldr	r3, [r3, #4]
 800fa78:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800fa7c:	687b      	ldr	r3, [r7, #4]
 800fa7e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800fa80:	687b      	ldr	r3, [r7, #4]
 800fa82:	681b      	ldr	r3, [r3, #0]
 800fa84:	430a      	orrs	r2, r1
 800fa86:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800fa88:	687b      	ldr	r3, [r7, #4]
 800fa8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fa8c:	f003 0310 	and.w	r3, r3, #16
 800fa90:	2b00      	cmp	r3, #0
 800fa92:	d00a      	beq.n	800faaa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800fa94:	687b      	ldr	r3, [r7, #4]
 800fa96:	681b      	ldr	r3, [r3, #0]
 800fa98:	689b      	ldr	r3, [r3, #8]
 800fa9a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800fa9e:	687b      	ldr	r3, [r7, #4]
 800faa0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800faa2:	687b      	ldr	r3, [r7, #4]
 800faa4:	681b      	ldr	r3, [r3, #0]
 800faa6:	430a      	orrs	r2, r1
 800faa8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800faaa:	687b      	ldr	r3, [r7, #4]
 800faac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800faae:	f003 0320 	and.w	r3, r3, #32
 800fab2:	2b00      	cmp	r3, #0
 800fab4:	d00a      	beq.n	800facc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800fab6:	687b      	ldr	r3, [r7, #4]
 800fab8:	681b      	ldr	r3, [r3, #0]
 800faba:	689b      	ldr	r3, [r3, #8]
 800fabc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800fac0:	687b      	ldr	r3, [r7, #4]
 800fac2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800fac4:	687b      	ldr	r3, [r7, #4]
 800fac6:	681b      	ldr	r3, [r3, #0]
 800fac8:	430a      	orrs	r2, r1
 800faca:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800facc:	687b      	ldr	r3, [r7, #4]
 800face:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fad0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fad4:	2b00      	cmp	r3, #0
 800fad6:	d01a      	beq.n	800fb0e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800fad8:	687b      	ldr	r3, [r7, #4]
 800fada:	681b      	ldr	r3, [r3, #0]
 800fadc:	685b      	ldr	r3, [r3, #4]
 800fade:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800fae2:	687b      	ldr	r3, [r7, #4]
 800fae4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800fae6:	687b      	ldr	r3, [r7, #4]
 800fae8:	681b      	ldr	r3, [r3, #0]
 800faea:	430a      	orrs	r2, r1
 800faec:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800faee:	687b      	ldr	r3, [r7, #4]
 800faf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800faf2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800faf6:	d10a      	bne.n	800fb0e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800faf8:	687b      	ldr	r3, [r7, #4]
 800fafa:	681b      	ldr	r3, [r3, #0]
 800fafc:	685b      	ldr	r3, [r3, #4]
 800fafe:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800fb02:	687b      	ldr	r3, [r7, #4]
 800fb04:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800fb06:	687b      	ldr	r3, [r7, #4]
 800fb08:	681b      	ldr	r3, [r3, #0]
 800fb0a:	430a      	orrs	r2, r1
 800fb0c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800fb0e:	687b      	ldr	r3, [r7, #4]
 800fb10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fb12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fb16:	2b00      	cmp	r3, #0
 800fb18:	d00a      	beq.n	800fb30 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800fb1a:	687b      	ldr	r3, [r7, #4]
 800fb1c:	681b      	ldr	r3, [r3, #0]
 800fb1e:	685b      	ldr	r3, [r3, #4]
 800fb20:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800fb24:	687b      	ldr	r3, [r7, #4]
 800fb26:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800fb28:	687b      	ldr	r3, [r7, #4]
 800fb2a:	681b      	ldr	r3, [r3, #0]
 800fb2c:	430a      	orrs	r2, r1
 800fb2e:	605a      	str	r2, [r3, #4]
  }
}
 800fb30:	bf00      	nop
 800fb32:	370c      	adds	r7, #12
 800fb34:	46bd      	mov	sp, r7
 800fb36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb3a:	4770      	bx	lr

0800fb3c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800fb3c:	b580      	push	{r7, lr}
 800fb3e:	b086      	sub	sp, #24
 800fb40:	af02      	add	r7, sp, #8
 800fb42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800fb44:	687b      	ldr	r3, [r7, #4]
 800fb46:	2200      	movs	r2, #0
 800fb48:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800fb4c:	f7f6 fcdc 	bl	8006508 <HAL_GetTick>
 800fb50:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800fb52:	687b      	ldr	r3, [r7, #4]
 800fb54:	681b      	ldr	r3, [r3, #0]
 800fb56:	681b      	ldr	r3, [r3, #0]
 800fb58:	f003 0308 	and.w	r3, r3, #8
 800fb5c:	2b08      	cmp	r3, #8
 800fb5e:	d10e      	bne.n	800fb7e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800fb60:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800fb64:	9300      	str	r3, [sp, #0]
 800fb66:	68fb      	ldr	r3, [r7, #12]
 800fb68:	2200      	movs	r2, #0
 800fb6a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800fb6e:	6878      	ldr	r0, [r7, #4]
 800fb70:	f000 f82f 	bl	800fbd2 <UART_WaitOnFlagUntilTimeout>
 800fb74:	4603      	mov	r3, r0
 800fb76:	2b00      	cmp	r3, #0
 800fb78:	d001      	beq.n	800fb7e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800fb7a:	2303      	movs	r3, #3
 800fb7c:	e025      	b.n	800fbca <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800fb7e:	687b      	ldr	r3, [r7, #4]
 800fb80:	681b      	ldr	r3, [r3, #0]
 800fb82:	681b      	ldr	r3, [r3, #0]
 800fb84:	f003 0304 	and.w	r3, r3, #4
 800fb88:	2b04      	cmp	r3, #4
 800fb8a:	d10e      	bne.n	800fbaa <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800fb8c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800fb90:	9300      	str	r3, [sp, #0]
 800fb92:	68fb      	ldr	r3, [r7, #12]
 800fb94:	2200      	movs	r2, #0
 800fb96:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800fb9a:	6878      	ldr	r0, [r7, #4]
 800fb9c:	f000 f819 	bl	800fbd2 <UART_WaitOnFlagUntilTimeout>
 800fba0:	4603      	mov	r3, r0
 800fba2:	2b00      	cmp	r3, #0
 800fba4:	d001      	beq.n	800fbaa <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800fba6:	2303      	movs	r3, #3
 800fba8:	e00f      	b.n	800fbca <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800fbaa:	687b      	ldr	r3, [r7, #4]
 800fbac:	2220      	movs	r2, #32
 800fbae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800fbb2:	687b      	ldr	r3, [r7, #4]
 800fbb4:	2220      	movs	r2, #32
 800fbb6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fbba:	687b      	ldr	r3, [r7, #4]
 800fbbc:	2200      	movs	r2, #0
 800fbbe:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800fbc0:	687b      	ldr	r3, [r7, #4]
 800fbc2:	2200      	movs	r2, #0
 800fbc4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800fbc8:	2300      	movs	r3, #0
}
 800fbca:	4618      	mov	r0, r3
 800fbcc:	3710      	adds	r7, #16
 800fbce:	46bd      	mov	sp, r7
 800fbd0:	bd80      	pop	{r7, pc}

0800fbd2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800fbd2:	b580      	push	{r7, lr}
 800fbd4:	b09c      	sub	sp, #112	; 0x70
 800fbd6:	af00      	add	r7, sp, #0
 800fbd8:	60f8      	str	r0, [r7, #12]
 800fbda:	60b9      	str	r1, [r7, #8]
 800fbdc:	603b      	str	r3, [r7, #0]
 800fbde:	4613      	mov	r3, r2
 800fbe0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800fbe2:	e0a9      	b.n	800fd38 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800fbe4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800fbe6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fbea:	f000 80a5 	beq.w	800fd38 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800fbee:	f7f6 fc8b 	bl	8006508 <HAL_GetTick>
 800fbf2:	4602      	mov	r2, r0
 800fbf4:	683b      	ldr	r3, [r7, #0]
 800fbf6:	1ad3      	subs	r3, r2, r3
 800fbf8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800fbfa:	429a      	cmp	r2, r3
 800fbfc:	d302      	bcc.n	800fc04 <UART_WaitOnFlagUntilTimeout+0x32>
 800fbfe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800fc00:	2b00      	cmp	r3, #0
 800fc02:	d140      	bne.n	800fc86 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800fc04:	68fb      	ldr	r3, [r7, #12]
 800fc06:	681b      	ldr	r3, [r3, #0]
 800fc08:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fc0a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fc0c:	e853 3f00 	ldrex	r3, [r3]
 800fc10:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800fc12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fc14:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800fc18:	667b      	str	r3, [r7, #100]	; 0x64
 800fc1a:	68fb      	ldr	r3, [r7, #12]
 800fc1c:	681b      	ldr	r3, [r3, #0]
 800fc1e:	461a      	mov	r2, r3
 800fc20:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800fc22:	65fb      	str	r3, [r7, #92]	; 0x5c
 800fc24:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fc26:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800fc28:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800fc2a:	e841 2300 	strex	r3, r2, [r1]
 800fc2e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800fc30:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fc32:	2b00      	cmp	r3, #0
 800fc34:	d1e6      	bne.n	800fc04 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800fc36:	68fb      	ldr	r3, [r7, #12]
 800fc38:	681b      	ldr	r3, [r3, #0]
 800fc3a:	3308      	adds	r3, #8
 800fc3c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fc3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fc40:	e853 3f00 	ldrex	r3, [r3]
 800fc44:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800fc46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc48:	f023 0301 	bic.w	r3, r3, #1
 800fc4c:	663b      	str	r3, [r7, #96]	; 0x60
 800fc4e:	68fb      	ldr	r3, [r7, #12]
 800fc50:	681b      	ldr	r3, [r3, #0]
 800fc52:	3308      	adds	r3, #8
 800fc54:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800fc56:	64ba      	str	r2, [r7, #72]	; 0x48
 800fc58:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fc5a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800fc5c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800fc5e:	e841 2300 	strex	r3, r2, [r1]
 800fc62:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800fc64:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fc66:	2b00      	cmp	r3, #0
 800fc68:	d1e5      	bne.n	800fc36 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800fc6a:	68fb      	ldr	r3, [r7, #12]
 800fc6c:	2220      	movs	r2, #32
 800fc6e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800fc72:	68fb      	ldr	r3, [r7, #12]
 800fc74:	2220      	movs	r2, #32
 800fc76:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800fc7a:	68fb      	ldr	r3, [r7, #12]
 800fc7c:	2200      	movs	r2, #0
 800fc7e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800fc82:	2303      	movs	r3, #3
 800fc84:	e069      	b.n	800fd5a <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800fc86:	68fb      	ldr	r3, [r7, #12]
 800fc88:	681b      	ldr	r3, [r3, #0]
 800fc8a:	681b      	ldr	r3, [r3, #0]
 800fc8c:	f003 0304 	and.w	r3, r3, #4
 800fc90:	2b00      	cmp	r3, #0
 800fc92:	d051      	beq.n	800fd38 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800fc94:	68fb      	ldr	r3, [r7, #12]
 800fc96:	681b      	ldr	r3, [r3, #0]
 800fc98:	69db      	ldr	r3, [r3, #28]
 800fc9a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800fc9e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800fca2:	d149      	bne.n	800fd38 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800fca4:	68fb      	ldr	r3, [r7, #12]
 800fca6:	681b      	ldr	r3, [r3, #0]
 800fca8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800fcac:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800fcae:	68fb      	ldr	r3, [r7, #12]
 800fcb0:	681b      	ldr	r3, [r3, #0]
 800fcb2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fcb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fcb6:	e853 3f00 	ldrex	r3, [r3]
 800fcba:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800fcbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fcbe:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800fcc2:	66fb      	str	r3, [r7, #108]	; 0x6c
 800fcc4:	68fb      	ldr	r3, [r7, #12]
 800fcc6:	681b      	ldr	r3, [r3, #0]
 800fcc8:	461a      	mov	r2, r3
 800fcca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fccc:	637b      	str	r3, [r7, #52]	; 0x34
 800fcce:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fcd0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800fcd2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800fcd4:	e841 2300 	strex	r3, r2, [r1]
 800fcd8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800fcda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fcdc:	2b00      	cmp	r3, #0
 800fcde:	d1e6      	bne.n	800fcae <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800fce0:	68fb      	ldr	r3, [r7, #12]
 800fce2:	681b      	ldr	r3, [r3, #0]
 800fce4:	3308      	adds	r3, #8
 800fce6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fce8:	697b      	ldr	r3, [r7, #20]
 800fcea:	e853 3f00 	ldrex	r3, [r3]
 800fcee:	613b      	str	r3, [r7, #16]
   return(result);
 800fcf0:	693b      	ldr	r3, [r7, #16]
 800fcf2:	f023 0301 	bic.w	r3, r3, #1
 800fcf6:	66bb      	str	r3, [r7, #104]	; 0x68
 800fcf8:	68fb      	ldr	r3, [r7, #12]
 800fcfa:	681b      	ldr	r3, [r3, #0]
 800fcfc:	3308      	adds	r3, #8
 800fcfe:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800fd00:	623a      	str	r2, [r7, #32]
 800fd02:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fd04:	69f9      	ldr	r1, [r7, #28]
 800fd06:	6a3a      	ldr	r2, [r7, #32]
 800fd08:	e841 2300 	strex	r3, r2, [r1]
 800fd0c:	61bb      	str	r3, [r7, #24]
   return(result);
 800fd0e:	69bb      	ldr	r3, [r7, #24]
 800fd10:	2b00      	cmp	r3, #0
 800fd12:	d1e5      	bne.n	800fce0 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800fd14:	68fb      	ldr	r3, [r7, #12]
 800fd16:	2220      	movs	r2, #32
 800fd18:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800fd1c:	68fb      	ldr	r3, [r7, #12]
 800fd1e:	2220      	movs	r2, #32
 800fd20:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800fd24:	68fb      	ldr	r3, [r7, #12]
 800fd26:	2220      	movs	r2, #32
 800fd28:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800fd2c:	68fb      	ldr	r3, [r7, #12]
 800fd2e:	2200      	movs	r2, #0
 800fd30:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800fd34:	2303      	movs	r3, #3
 800fd36:	e010      	b.n	800fd5a <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800fd38:	68fb      	ldr	r3, [r7, #12]
 800fd3a:	681b      	ldr	r3, [r3, #0]
 800fd3c:	69da      	ldr	r2, [r3, #28]
 800fd3e:	68bb      	ldr	r3, [r7, #8]
 800fd40:	4013      	ands	r3, r2
 800fd42:	68ba      	ldr	r2, [r7, #8]
 800fd44:	429a      	cmp	r2, r3
 800fd46:	bf0c      	ite	eq
 800fd48:	2301      	moveq	r3, #1
 800fd4a:	2300      	movne	r3, #0
 800fd4c:	b2db      	uxtb	r3, r3
 800fd4e:	461a      	mov	r2, r3
 800fd50:	79fb      	ldrb	r3, [r7, #7]
 800fd52:	429a      	cmp	r2, r3
 800fd54:	f43f af46 	beq.w	800fbe4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800fd58:	2300      	movs	r3, #0
}
 800fd5a:	4618      	mov	r0, r3
 800fd5c:	3770      	adds	r7, #112	; 0x70
 800fd5e:	46bd      	mov	sp, r7
 800fd60:	bd80      	pop	{r7, pc}

0800fd62 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800fd62:	b480      	push	{r7}
 800fd64:	b085      	sub	sp, #20
 800fd66:	af00      	add	r7, sp, #0
 800fd68:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800fd6a:	687b      	ldr	r3, [r7, #4]
 800fd6c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800fd70:	2b01      	cmp	r3, #1
 800fd72:	d101      	bne.n	800fd78 <HAL_UARTEx_DisableFifoMode+0x16>
 800fd74:	2302      	movs	r3, #2
 800fd76:	e027      	b.n	800fdc8 <HAL_UARTEx_DisableFifoMode+0x66>
 800fd78:	687b      	ldr	r3, [r7, #4]
 800fd7a:	2201      	movs	r2, #1
 800fd7c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800fd80:	687b      	ldr	r3, [r7, #4]
 800fd82:	2224      	movs	r2, #36	; 0x24
 800fd84:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800fd88:	687b      	ldr	r3, [r7, #4]
 800fd8a:	681b      	ldr	r3, [r3, #0]
 800fd8c:	681b      	ldr	r3, [r3, #0]
 800fd8e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800fd90:	687b      	ldr	r3, [r7, #4]
 800fd92:	681b      	ldr	r3, [r3, #0]
 800fd94:	681a      	ldr	r2, [r3, #0]
 800fd96:	687b      	ldr	r3, [r7, #4]
 800fd98:	681b      	ldr	r3, [r3, #0]
 800fd9a:	f022 0201 	bic.w	r2, r2, #1
 800fd9e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800fda0:	68fb      	ldr	r3, [r7, #12]
 800fda2:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800fda6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800fda8:	687b      	ldr	r3, [r7, #4]
 800fdaa:	2200      	movs	r2, #0
 800fdac:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800fdae:	687b      	ldr	r3, [r7, #4]
 800fdb0:	681b      	ldr	r3, [r3, #0]
 800fdb2:	68fa      	ldr	r2, [r7, #12]
 800fdb4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800fdb6:	687b      	ldr	r3, [r7, #4]
 800fdb8:	2220      	movs	r2, #32
 800fdba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800fdbe:	687b      	ldr	r3, [r7, #4]
 800fdc0:	2200      	movs	r2, #0
 800fdc2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800fdc6:	2300      	movs	r3, #0
}
 800fdc8:	4618      	mov	r0, r3
 800fdca:	3714      	adds	r7, #20
 800fdcc:	46bd      	mov	sp, r7
 800fdce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdd2:	4770      	bx	lr

0800fdd4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800fdd4:	b580      	push	{r7, lr}
 800fdd6:	b084      	sub	sp, #16
 800fdd8:	af00      	add	r7, sp, #0
 800fdda:	6078      	str	r0, [r7, #4]
 800fddc:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800fdde:	687b      	ldr	r3, [r7, #4]
 800fde0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800fde4:	2b01      	cmp	r3, #1
 800fde6:	d101      	bne.n	800fdec <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800fde8:	2302      	movs	r3, #2
 800fdea:	e02d      	b.n	800fe48 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800fdec:	687b      	ldr	r3, [r7, #4]
 800fdee:	2201      	movs	r2, #1
 800fdf0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800fdf4:	687b      	ldr	r3, [r7, #4]
 800fdf6:	2224      	movs	r2, #36	; 0x24
 800fdf8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800fdfc:	687b      	ldr	r3, [r7, #4]
 800fdfe:	681b      	ldr	r3, [r3, #0]
 800fe00:	681b      	ldr	r3, [r3, #0]
 800fe02:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800fe04:	687b      	ldr	r3, [r7, #4]
 800fe06:	681b      	ldr	r3, [r3, #0]
 800fe08:	681a      	ldr	r2, [r3, #0]
 800fe0a:	687b      	ldr	r3, [r7, #4]
 800fe0c:	681b      	ldr	r3, [r3, #0]
 800fe0e:	f022 0201 	bic.w	r2, r2, #1
 800fe12:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800fe14:	687b      	ldr	r3, [r7, #4]
 800fe16:	681b      	ldr	r3, [r3, #0]
 800fe18:	689b      	ldr	r3, [r3, #8]
 800fe1a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800fe1e:	687b      	ldr	r3, [r7, #4]
 800fe20:	681b      	ldr	r3, [r3, #0]
 800fe22:	683a      	ldr	r2, [r7, #0]
 800fe24:	430a      	orrs	r2, r1
 800fe26:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800fe28:	6878      	ldr	r0, [r7, #4]
 800fe2a:	f000 f84f 	bl	800fecc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800fe2e:	687b      	ldr	r3, [r7, #4]
 800fe30:	681b      	ldr	r3, [r3, #0]
 800fe32:	68fa      	ldr	r2, [r7, #12]
 800fe34:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800fe36:	687b      	ldr	r3, [r7, #4]
 800fe38:	2220      	movs	r2, #32
 800fe3a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800fe3e:	687b      	ldr	r3, [r7, #4]
 800fe40:	2200      	movs	r2, #0
 800fe42:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800fe46:	2300      	movs	r3, #0
}
 800fe48:	4618      	mov	r0, r3
 800fe4a:	3710      	adds	r7, #16
 800fe4c:	46bd      	mov	sp, r7
 800fe4e:	bd80      	pop	{r7, pc}

0800fe50 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800fe50:	b580      	push	{r7, lr}
 800fe52:	b084      	sub	sp, #16
 800fe54:	af00      	add	r7, sp, #0
 800fe56:	6078      	str	r0, [r7, #4]
 800fe58:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800fe5a:	687b      	ldr	r3, [r7, #4]
 800fe5c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800fe60:	2b01      	cmp	r3, #1
 800fe62:	d101      	bne.n	800fe68 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800fe64:	2302      	movs	r3, #2
 800fe66:	e02d      	b.n	800fec4 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800fe68:	687b      	ldr	r3, [r7, #4]
 800fe6a:	2201      	movs	r2, #1
 800fe6c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800fe70:	687b      	ldr	r3, [r7, #4]
 800fe72:	2224      	movs	r2, #36	; 0x24
 800fe74:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800fe78:	687b      	ldr	r3, [r7, #4]
 800fe7a:	681b      	ldr	r3, [r3, #0]
 800fe7c:	681b      	ldr	r3, [r3, #0]
 800fe7e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800fe80:	687b      	ldr	r3, [r7, #4]
 800fe82:	681b      	ldr	r3, [r3, #0]
 800fe84:	681a      	ldr	r2, [r3, #0]
 800fe86:	687b      	ldr	r3, [r7, #4]
 800fe88:	681b      	ldr	r3, [r3, #0]
 800fe8a:	f022 0201 	bic.w	r2, r2, #1
 800fe8e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800fe90:	687b      	ldr	r3, [r7, #4]
 800fe92:	681b      	ldr	r3, [r3, #0]
 800fe94:	689b      	ldr	r3, [r3, #8]
 800fe96:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800fe9a:	687b      	ldr	r3, [r7, #4]
 800fe9c:	681b      	ldr	r3, [r3, #0]
 800fe9e:	683a      	ldr	r2, [r7, #0]
 800fea0:	430a      	orrs	r2, r1
 800fea2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800fea4:	6878      	ldr	r0, [r7, #4]
 800fea6:	f000 f811 	bl	800fecc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800feaa:	687b      	ldr	r3, [r7, #4]
 800feac:	681b      	ldr	r3, [r3, #0]
 800feae:	68fa      	ldr	r2, [r7, #12]
 800feb0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800feb2:	687b      	ldr	r3, [r7, #4]
 800feb4:	2220      	movs	r2, #32
 800feb6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800feba:	687b      	ldr	r3, [r7, #4]
 800febc:	2200      	movs	r2, #0
 800febe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800fec2:	2300      	movs	r3, #0
}
 800fec4:	4618      	mov	r0, r3
 800fec6:	3710      	adds	r7, #16
 800fec8:	46bd      	mov	sp, r7
 800feca:	bd80      	pop	{r7, pc}

0800fecc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800fecc:	b480      	push	{r7}
 800fece:	b085      	sub	sp, #20
 800fed0:	af00      	add	r7, sp, #0
 800fed2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800fed4:	687b      	ldr	r3, [r7, #4]
 800fed6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800fed8:	2b00      	cmp	r3, #0
 800feda:	d108      	bne.n	800feee <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800fedc:	687b      	ldr	r3, [r7, #4]
 800fede:	2201      	movs	r2, #1
 800fee0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800fee4:	687b      	ldr	r3, [r7, #4]
 800fee6:	2201      	movs	r2, #1
 800fee8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800feec:	e031      	b.n	800ff52 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800feee:	2308      	movs	r3, #8
 800fef0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800fef2:	2308      	movs	r3, #8
 800fef4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800fef6:	687b      	ldr	r3, [r7, #4]
 800fef8:	681b      	ldr	r3, [r3, #0]
 800fefa:	689b      	ldr	r3, [r3, #8]
 800fefc:	0e5b      	lsrs	r3, r3, #25
 800fefe:	b2db      	uxtb	r3, r3
 800ff00:	f003 0307 	and.w	r3, r3, #7
 800ff04:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800ff06:	687b      	ldr	r3, [r7, #4]
 800ff08:	681b      	ldr	r3, [r3, #0]
 800ff0a:	689b      	ldr	r3, [r3, #8]
 800ff0c:	0f5b      	lsrs	r3, r3, #29
 800ff0e:	b2db      	uxtb	r3, r3
 800ff10:	f003 0307 	and.w	r3, r3, #7
 800ff14:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ff16:	7bbb      	ldrb	r3, [r7, #14]
 800ff18:	7b3a      	ldrb	r2, [r7, #12]
 800ff1a:	4911      	ldr	r1, [pc, #68]	; (800ff60 <UARTEx_SetNbDataToProcess+0x94>)
 800ff1c:	5c8a      	ldrb	r2, [r1, r2]
 800ff1e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800ff22:	7b3a      	ldrb	r2, [r7, #12]
 800ff24:	490f      	ldr	r1, [pc, #60]	; (800ff64 <UARTEx_SetNbDataToProcess+0x98>)
 800ff26:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ff28:	fb93 f3f2 	sdiv	r3, r3, r2
 800ff2c:	b29a      	uxth	r2, r3
 800ff2e:	687b      	ldr	r3, [r7, #4]
 800ff30:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ff34:	7bfb      	ldrb	r3, [r7, #15]
 800ff36:	7b7a      	ldrb	r2, [r7, #13]
 800ff38:	4909      	ldr	r1, [pc, #36]	; (800ff60 <UARTEx_SetNbDataToProcess+0x94>)
 800ff3a:	5c8a      	ldrb	r2, [r1, r2]
 800ff3c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800ff40:	7b7a      	ldrb	r2, [r7, #13]
 800ff42:	4908      	ldr	r1, [pc, #32]	; (800ff64 <UARTEx_SetNbDataToProcess+0x98>)
 800ff44:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ff46:	fb93 f3f2 	sdiv	r3, r3, r2
 800ff4a:	b29a      	uxth	r2, r3
 800ff4c:	687b      	ldr	r3, [r7, #4]
 800ff4e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800ff52:	bf00      	nop
 800ff54:	3714      	adds	r7, #20
 800ff56:	46bd      	mov	sp, r7
 800ff58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff5c:	4770      	bx	lr
 800ff5e:	bf00      	nop
 800ff60:	08013b6c 	.word	0x08013b6c
 800ff64:	08013b74 	.word	0x08013b74

0800ff68 <LL_DLYB_SetDelay>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: the Delay value is set.
  *          - ERROR: the Delay value is not set.
  */
void LL_DLYB_SetDelay(DLYB_TypeDef *DLYBx, LL_DLYB_CfgTypeDef  *pdlyb_cfg)
{
 800ff68:	b480      	push	{r7}
 800ff6a:	b083      	sub	sp, #12
 800ff6c:	af00      	add	r7, sp, #0
 800ff6e:	6078      	str	r0, [r7, #4]
 800ff70:	6039      	str	r1, [r7, #0]
  /* Check the DelayBlock instance */
  assert_param(IS_DLYB_ALL_INSTANCE(DLYBx));

  /* Enable the length sampling */
  SET_BIT(DLYBx->CR, DLYB_CR_SEN);
 800ff72:	687b      	ldr	r3, [r7, #4]
 800ff74:	681b      	ldr	r3, [r3, #0]
 800ff76:	f043 0202 	orr.w	r2, r3, #2
 800ff7a:	687b      	ldr	r3, [r7, #4]
 800ff7c:	601a      	str	r2, [r3, #0]

  /* Update the UNIT and SEL field */
  DLYBx->CFGR = (pdlyb_cfg->PhaseSel) | ((pdlyb_cfg->Units) << DLYB_CFGR_UNIT_Pos);
 800ff7e:	683b      	ldr	r3, [r7, #0]
 800ff80:	685a      	ldr	r2, [r3, #4]
 800ff82:	683b      	ldr	r3, [r7, #0]
 800ff84:	681b      	ldr	r3, [r3, #0]
 800ff86:	021b      	lsls	r3, r3, #8
 800ff88:	431a      	orrs	r2, r3
 800ff8a:	687b      	ldr	r3, [r7, #4]
 800ff8c:	605a      	str	r2, [r3, #4]

  /* Disable the length sampling */
  CLEAR_BIT(DLYBx->CR, DLYB_CR_SEN);
 800ff8e:	687b      	ldr	r3, [r7, #4]
 800ff90:	681b      	ldr	r3, [r3, #0]
 800ff92:	f023 0202 	bic.w	r2, r3, #2
 800ff96:	687b      	ldr	r3, [r7, #4]
 800ff98:	601a      	str	r2, [r3, #0]
}
 800ff9a:	bf00      	nop
 800ff9c:	370c      	adds	r7, #12
 800ff9e:	46bd      	mov	sp, r7
 800ffa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffa4:	4770      	bx	lr

0800ffa6 <LL_DLYB_GetDelay>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: the Delay value is received.
  *          - ERROR: the Delay value is not received.
  */
void LL_DLYB_GetDelay(DLYB_TypeDef *DLYBx, LL_DLYB_CfgTypeDef *pdlyb_cfg)
{
 800ffa6:	b480      	push	{r7}
 800ffa8:	b083      	sub	sp, #12
 800ffaa:	af00      	add	r7, sp, #0
 800ffac:	6078      	str	r0, [r7, #4]
 800ffae:	6039      	str	r1, [r7, #0]
  /* Check the DelayBlock instance */
  assert_param(IS_DLYB_ALL_INSTANCE(DLYBx));

  /* Fill the DelayBlock configuration structure with SEL and UNIT value */
  pdlyb_cfg->Units = ((DLYBx->CFGR & DLYB_CFGR_UNIT) >> DLYB_CFGR_UNIT_Pos);
 800ffb0:	687b      	ldr	r3, [r7, #4]
 800ffb2:	685b      	ldr	r3, [r3, #4]
 800ffb4:	0a1b      	lsrs	r3, r3, #8
 800ffb6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ffba:	683b      	ldr	r3, [r7, #0]
 800ffbc:	601a      	str	r2, [r3, #0]
  pdlyb_cfg->PhaseSel = (DLYBx->CFGR & DLYB_CFGR_SEL);
 800ffbe:	687b      	ldr	r3, [r7, #4]
 800ffc0:	685b      	ldr	r3, [r3, #4]
 800ffc2:	f003 020f 	and.w	r2, r3, #15
 800ffc6:	683b      	ldr	r3, [r7, #0]
 800ffc8:	605a      	str	r2, [r3, #4]
}
 800ffca:	bf00      	nop
 800ffcc:	370c      	adds	r7, #12
 800ffce:	46bd      	mov	sp, r7
 800ffd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffd4:	4770      	bx	lr
	...

0800ffd8 <LL_DLYB_GetClockPeriod>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: there is a valid period detected and stored in pdlyb_cfg.
  *          - ERROR: there is no valid period detected.
  */
uint32_t LL_DLYB_GetClockPeriod(DLYB_TypeDef *DLYBx, LL_DLYB_CfgTypeDef *pdlyb_cfg)
{
 800ffd8:	b580      	push	{r7, lr}
 800ffda:	b086      	sub	sp, #24
 800ffdc:	af00      	add	r7, sp, #0
 800ffde:	6078      	str	r0, [r7, #4]
 800ffe0:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 800ffe2:	2300      	movs	r3, #0
 800ffe4:	617b      	str	r3, [r7, #20]

  /* Check the DelayBlock instance */
  assert_param(IS_DLYB_ALL_INSTANCE(DLYBx));

  /* Enable the length sampling */
  SET_BIT(DLYBx->CR, DLYB_CR_SEN);
 800ffe6:	687b      	ldr	r3, [r7, #4]
 800ffe8:	681b      	ldr	r3, [r3, #0]
 800ffea:	f043 0202 	orr.w	r2, r3, #2
 800ffee:	687b      	ldr	r3, [r7, #4]
 800fff0:	601a      	str	r2, [r3, #0]

  /* Delay line length detection */
  while (i < DLYB_MAX_UNIT)
 800fff2:	e02a      	b.n	801004a <LL_DLYB_GetClockPeriod+0x72>
  {
    /* Set the Delay of the UNIT(s)*/
    DLYBx->CFGR = DLYB_MAX_SELECT | (i << DLYB_CFGR_UNIT_Pos);
 800fff4:	697b      	ldr	r3, [r7, #20]
 800fff6:	021b      	lsls	r3, r3, #8
 800fff8:	f043 020c 	orr.w	r2, r3, #12
 800fffc:	687b      	ldr	r3, [r7, #4]
 800fffe:	605a      	str	r2, [r3, #4]

    /* Waiting for a LNG valid value */
    tickstart =  HAL_GetTick();
 8010000:	f7f6 fa82 	bl	8006508 <HAL_GetTick>
 8010004:	60f8      	str	r0, [r7, #12]
    while ((DLYBx->CFGR & DLYB_CFGR_LNGF) == 0U)
 8010006:	e00c      	b.n	8010022 <LL_DLYB_GetClockPeriod+0x4a>
    {
      if ((HAL_GetTick() - tickstart) >=  DLYB_TIMEOUT)
 8010008:	f7f6 fa7e 	bl	8006508 <HAL_GetTick>
 801000c:	4602      	mov	r2, r0
 801000e:	68fb      	ldr	r3, [r7, #12]
 8010010:	1ad3      	subs	r3, r2, r3
 8010012:	2bfe      	cmp	r3, #254	; 0xfe
 8010014:	d905      	bls.n	8010022 <LL_DLYB_GetClockPeriod+0x4a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((DLYBx->CFGR & DLYB_CFGR_LNGF) == 0U)
 8010016:	687b      	ldr	r3, [r7, #4]
 8010018:	685b      	ldr	r3, [r3, #4]
 801001a:	2b00      	cmp	r3, #0
 801001c:	db01      	blt.n	8010022 <LL_DLYB_GetClockPeriod+0x4a>
        {
          return (uint32_t) HAL_TIMEOUT;
 801001e:	2303      	movs	r3, #3
 8010020:	e042      	b.n	80100a8 <LL_DLYB_GetClockPeriod+0xd0>
    while ((DLYBx->CFGR & DLYB_CFGR_LNGF) == 0U)
 8010022:	687b      	ldr	r3, [r7, #4]
 8010024:	685b      	ldr	r3, [r3, #4]
 8010026:	2b00      	cmp	r3, #0
 8010028:	daee      	bge.n	8010008 <LL_DLYB_GetClockPeriod+0x30>
        }
      }
    }

    if ((DLYBx->CFGR & DLYB_LNG_10_0_MASK) != 0U)
 801002a:	687b      	ldr	r3, [r7, #4]
 801002c:	685a      	ldr	r2, [r3, #4]
 801002e:	4b20      	ldr	r3, [pc, #128]	; (80100b0 <LL_DLYB_GetClockPeriod+0xd8>)
 8010030:	4013      	ands	r3, r2
 8010032:	2b00      	cmp	r3, #0
 8010034:	d006      	beq.n	8010044 <LL_DLYB_GetClockPeriod+0x6c>
    {
      if ((DLYBx->CFGR & (DLYB_CFGR_LNG_11 | DLYB_CFGR_LNG_10)) != DLYB_LNG_11_10_MASK)
 8010036:	687b      	ldr	r3, [r7, #4]
 8010038:	685b      	ldr	r3, [r3, #4]
 801003a:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 801003e:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8010042:	d106      	bne.n	8010052 <LL_DLYB_GetClockPeriod+0x7a>
      {
        /* Delay line length is configured to one input clock period*/
        break;
      }
    }
    i++;
 8010044:	697b      	ldr	r3, [r7, #20]
 8010046:	3301      	adds	r3, #1
 8010048:	617b      	str	r3, [r7, #20]
  while (i < DLYB_MAX_UNIT)
 801004a:	697b      	ldr	r3, [r7, #20]
 801004c:	2b7f      	cmp	r3, #127	; 0x7f
 801004e:	d9d1      	bls.n	800fff4 <LL_DLYB_GetClockPeriod+0x1c>
 8010050:	e000      	b.n	8010054 <LL_DLYB_GetClockPeriod+0x7c>
        break;
 8010052:	bf00      	nop
  }

  if (DLYB_MAX_UNIT != i)
 8010054:	697b      	ldr	r3, [r7, #20]
 8010056:	2b80      	cmp	r3, #128	; 0x80
 8010058:	d022      	beq.n	80100a0 <LL_DLYB_GetClockPeriod+0xc8>
  {
    /* Determine how many unit delays (nb) span one input clock period */
    lng = (DLYBx->CFGR & DLYB_CFGR_LNG) >> 16U;
 801005a:	687b      	ldr	r3, [r7, #4]
 801005c:	685b      	ldr	r3, [r3, #4]
 801005e:	0c1b      	lsrs	r3, r3, #16
 8010060:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8010064:	60bb      	str	r3, [r7, #8]
    nb = 10U;
 8010066:	230a      	movs	r3, #10
 8010068:	613b      	str	r3, [r7, #16]
    while ((nb > 0U) && ((lng >> nb) == 0U))
 801006a:	e002      	b.n	8010072 <LL_DLYB_GetClockPeriod+0x9a>
    {
      nb--;
 801006c:	693b      	ldr	r3, [r7, #16]
 801006e:	3b01      	subs	r3, #1
 8010070:	613b      	str	r3, [r7, #16]
    while ((nb > 0U) && ((lng >> nb) == 0U))
 8010072:	693b      	ldr	r3, [r7, #16]
 8010074:	2b00      	cmp	r3, #0
 8010076:	d005      	beq.n	8010084 <LL_DLYB_GetClockPeriod+0xac>
 8010078:	68ba      	ldr	r2, [r7, #8]
 801007a:	693b      	ldr	r3, [r7, #16]
 801007c:	fa22 f303 	lsr.w	r3, r2, r3
 8010080:	2b00      	cmp	r3, #0
 8010082:	d0f3      	beq.n	801006c <LL_DLYB_GetClockPeriod+0x94>
    }
    if (nb != 0U)
 8010084:	693b      	ldr	r3, [r7, #16]
 8010086:	2b00      	cmp	r3, #0
 8010088:	d00a      	beq.n	80100a0 <LL_DLYB_GetClockPeriod+0xc8>
    {
      pdlyb_cfg->PhaseSel = nb ;
 801008a:	683b      	ldr	r3, [r7, #0]
 801008c:	693a      	ldr	r2, [r7, #16]
 801008e:	605a      	str	r2, [r3, #4]
      pdlyb_cfg->Units = i ;
 8010090:	683b      	ldr	r3, [r7, #0]
 8010092:	697a      	ldr	r2, [r7, #20]
 8010094:	601a      	str	r2, [r3, #0]

      /* Disable the length sampling */
      DLYBx->CR = DLYB_CR_SEN;
 8010096:	687b      	ldr	r3, [r7, #4]
 8010098:	2202      	movs	r2, #2
 801009a:	601a      	str	r2, [r3, #0]

      return (uint32_t)SUCCESS;
 801009c:	2300      	movs	r3, #0
 801009e:	e003      	b.n	80100a8 <LL_DLYB_GetClockPeriod+0xd0>
    }
  }

  /* Disable the length sampling */
  DLYBx->CR = DLYB_CR_SEN;
 80100a0:	687b      	ldr	r3, [r7, #4]
 80100a2:	2202      	movs	r2, #2
 80100a4:	601a      	str	r2, [r3, #0]

  return (uint32_t)ERROR;
 80100a6:	2301      	movs	r3, #1

}
 80100a8:	4618      	mov	r0, r3
 80100aa:	3718      	adds	r7, #24
 80100ac:	46bd      	mov	sp, r7
 80100ae:	bd80      	pop	{r7, pc}
 80100b0:	07ff0000 	.word	0x07ff0000

080100b4 <_tx_byte_pool_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_byte_pool_create(TX_BYTE_POOL *pool_ptr, CHAR *name_ptr, VOID *pool_start, ULONG pool_size)
{
 80100b4:	b580      	push	{r7, lr}
 80100b6:	b08e      	sub	sp, #56	; 0x38
 80100b8:	af00      	add	r7, sp, #0
 80100ba:	60f8      	str	r0, [r7, #12]
 80100bc:	60b9      	str	r1, [r7, #8]
 80100be:	607a      	str	r2, [r7, #4]
 80100c0:	603b      	str	r3, [r7, #0]
TX_BYTE_POOL        *previous_pool;
ALIGN_TYPE          *free_ptr;


    /* Initialize the byte pool control block to all zeros.  */
    TX_MEMSET(pool_ptr, 0, (sizeof(TX_BYTE_POOL)));
 80100c2:	2234      	movs	r2, #52	; 0x34
 80100c4:	2100      	movs	r1, #0
 80100c6:	68f8      	ldr	r0, [r7, #12]
 80100c8:	f002 fcde 	bl	8012a88 <memset>

    /* Round the pool size down to something that is evenly divisible by
       an ULONG.  */
    pool_size =   (pool_size/(sizeof(ALIGN_TYPE))) * (sizeof(ALIGN_TYPE));
 80100cc:	683b      	ldr	r3, [r7, #0]
 80100ce:	f023 0303 	bic.w	r3, r3, #3
 80100d2:	603b      	str	r3, [r7, #0]

    /* Setup the basic byte pool fields.  */
    pool_ptr -> tx_byte_pool_name =              name_ptr;
 80100d4:	68fb      	ldr	r3, [r7, #12]
 80100d6:	68ba      	ldr	r2, [r7, #8]
 80100d8:	605a      	str	r2, [r3, #4]

    /* Save the start and size of the pool.  */
    pool_ptr -> tx_byte_pool_start =   TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 80100da:	68fb      	ldr	r3, [r7, #12]
 80100dc:	687a      	ldr	r2, [r7, #4]
 80100de:	619a      	str	r2, [r3, #24]
    pool_ptr -> tx_byte_pool_size =    pool_size;
 80100e0:	68fb      	ldr	r3, [r7, #12]
 80100e2:	683a      	ldr	r2, [r7, #0]
 80100e4:	61da      	str	r2, [r3, #28]

    /* Setup memory list to the beginning as well as the search pointer.  */
    pool_ptr -> tx_byte_pool_list =    TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 80100e6:	68fb      	ldr	r3, [r7, #12]
 80100e8:	687a      	ldr	r2, [r7, #4]
 80100ea:	611a      	str	r2, [r3, #16]
    pool_ptr -> tx_byte_pool_search =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 80100ec:	68fb      	ldr	r3, [r7, #12]
 80100ee:	687a      	ldr	r2, [r7, #4]
 80100f0:	615a      	str	r2, [r3, #20]

    /* Initially, the pool will have two blocks.  One large block at the
       beginning that is available and a small allocated block at the end
       of the pool that is there just for the algorithm.  Be sure to count
       the available block's header in the available bytes count.  */
    pool_ptr -> tx_byte_pool_available =   pool_size - ((sizeof(VOID *)) + (sizeof(ALIGN_TYPE)));
 80100f2:	683b      	ldr	r3, [r7, #0]
 80100f4:	f1a3 0208 	sub.w	r2, r3, #8
 80100f8:	68fb      	ldr	r3, [r7, #12]
 80100fa:	609a      	str	r2, [r3, #8]
    pool_ptr -> tx_byte_pool_fragments =   ((UINT) 2);
 80100fc:	68fb      	ldr	r3, [r7, #12]
 80100fe:	2202      	movs	r2, #2
 8010100:	60da      	str	r2, [r3, #12]
    /* Each block contains a "next" pointer that points to the next block in the pool followed by a ALIGN_TYPE
       field that contains either the constant TX_BYTE_BLOCK_FREE (if the block is free) or a pointer to the
       owning pool (if the block is allocated).  */

    /* Calculate the end of the pool's memory area.  */
    block_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8010102:	687b      	ldr	r3, [r7, #4]
 8010104:	637b      	str	r3, [r7, #52]	; 0x34
    block_ptr =  TX_UCHAR_POINTER_ADD(block_ptr, pool_size);
 8010106:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010108:	683b      	ldr	r3, [r7, #0]
 801010a:	4413      	add	r3, r2
 801010c:	637b      	str	r3, [r7, #52]	; 0x34

    /* Backup the end of the pool pointer and build the pre-allocated block.  */
    block_ptr =  TX_UCHAR_POINTER_SUB(block_ptr, (sizeof(ALIGN_TYPE)));
 801010e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010110:	3b04      	subs	r3, #4
 8010112:	637b      	str	r3, [r7, #52]	; 0x34

    /* Cast the pool pointer into a ULONG.  */
    temp_ptr =             TX_BYTE_POOL_TO_UCHAR_POINTER_CONVERT(pool_ptr);
 8010114:	68fb      	ldr	r3, [r7, #12]
 8010116:	633b      	str	r3, [r7, #48]	; 0x30
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(block_ptr);
 8010118:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801011a:	62fb      	str	r3, [r7, #44]	; 0x2c
    *block_indirect_ptr =  temp_ptr;
 801011c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801011e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010120:	601a      	str	r2, [r3, #0]

    block_ptr =            TX_UCHAR_POINTER_SUB(block_ptr, (sizeof(UCHAR *)));
 8010122:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010124:	3b04      	subs	r3, #4
 8010126:	637b      	str	r3, [r7, #52]	; 0x34
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(block_ptr);
 8010128:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801012a:	62fb      	str	r3, [r7, #44]	; 0x2c
    *block_indirect_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 801012c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801012e:	687a      	ldr	r2, [r7, #4]
 8010130:	601a      	str	r2, [r3, #0]

    /* Now setup the large available block in the pool.  */
    temp_ptr =             TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8010132:	687b      	ldr	r3, [r7, #4]
 8010134:	633b      	str	r3, [r7, #48]	; 0x30
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(temp_ptr);
 8010136:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010138:	62fb      	str	r3, [r7, #44]	; 0x2c
    *block_indirect_ptr =  block_ptr;
 801013a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801013c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801013e:	601a      	str	r2, [r3, #0]
    block_ptr =            TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8010140:	687b      	ldr	r3, [r7, #4]
 8010142:	637b      	str	r3, [r7, #52]	; 0x34
    block_ptr =            TX_UCHAR_POINTER_ADD(block_ptr, (sizeof(UCHAR *)));
 8010144:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010146:	3304      	adds	r3, #4
 8010148:	637b      	str	r3, [r7, #52]	; 0x34
    free_ptr =             TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(block_ptr);
 801014a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801014c:	62bb      	str	r3, [r7, #40]	; 0x28
    *free_ptr =            TX_BYTE_BLOCK_FREE;
 801014e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010150:	4a1f      	ldr	r2, [pc, #124]	; (80101d0 <_tx_byte_pool_create+0x11c>)
 8010152:	601a      	str	r2, [r3, #0]

    /* Clear the owner id.  */
    pool_ptr -> tx_byte_pool_owner =  TX_NULL;
 8010154:	68fb      	ldr	r3, [r7, #12]
 8010156:	2200      	movs	r2, #0
 8010158:	621a      	str	r2, [r3, #32]
{
UINT posture;
#ifdef TX_PORT_USE_BASEPRI
    __asm__ volatile ("MRS  %0, BASEPRI ": "=r" (posture));
#else
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801015a:	f3ef 8310 	mrs	r3, PRIMASK
 801015e:	61bb      	str	r3, [r7, #24]
#endif
    return(posture);
 8010160:	69bb      	ldr	r3, [r7, #24]

__attribute__( ( always_inline ) ) static inline UINT __disable_interrupts(void)
{
UINT int_posture;

    int_posture = __get_interrupt_posture();
 8010162:	617b      	str	r3, [r7, #20]

#ifdef TX_PORT_USE_BASEPRI
    __set_basepri_value(TX_PORT_BASEPRI);
#else
    __asm__ volatile ("CPSID i" : : : "memory");
 8010164:	b672      	cpsid	i
#endif
    return(int_posture);
 8010166:	697b      	ldr	r3, [r7, #20]

    /* Disable interrupts to place the byte pool on the created list.  */
    TX_DISABLE
 8010168:	627b      	str	r3, [r7, #36]	; 0x24

    /* Setup the byte pool ID to make it valid.  */
    pool_ptr -> tx_byte_pool_id =  TX_BYTE_POOL_ID;
 801016a:	68fb      	ldr	r3, [r7, #12]
 801016c:	4a19      	ldr	r2, [pc, #100]	; (80101d4 <_tx_byte_pool_create+0x120>)
 801016e:	601a      	str	r2, [r3, #0]

    /* Place the byte pool on the list of created byte pools.  First,
       check for an empty list.  */
    if (_tx_byte_pool_created_count == TX_EMPTY)
 8010170:	4b19      	ldr	r3, [pc, #100]	; (80101d8 <_tx_byte_pool_create+0x124>)
 8010172:	681b      	ldr	r3, [r3, #0]
 8010174:	2b00      	cmp	r3, #0
 8010176:	d109      	bne.n	801018c <_tx_byte_pool_create+0xd8>
    {

        /* The created byte pool list is empty.  Add byte pool to empty list.  */
        _tx_byte_pool_created_ptr =                  pool_ptr;
 8010178:	4a18      	ldr	r2, [pc, #96]	; (80101dc <_tx_byte_pool_create+0x128>)
 801017a:	68fb      	ldr	r3, [r7, #12]
 801017c:	6013      	str	r3, [r2, #0]
        pool_ptr -> tx_byte_pool_created_next =      pool_ptr;
 801017e:	68fb      	ldr	r3, [r7, #12]
 8010180:	68fa      	ldr	r2, [r7, #12]
 8010182:	62da      	str	r2, [r3, #44]	; 0x2c
        pool_ptr -> tx_byte_pool_created_previous =  pool_ptr;
 8010184:	68fb      	ldr	r3, [r7, #12]
 8010186:	68fa      	ldr	r2, [r7, #12]
 8010188:	631a      	str	r2, [r3, #48]	; 0x30
 801018a:	e011      	b.n	80101b0 <_tx_byte_pool_create+0xfc>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_pool =      _tx_byte_pool_created_ptr;
 801018c:	4b13      	ldr	r3, [pc, #76]	; (80101dc <_tx_byte_pool_create+0x128>)
 801018e:	681b      	ldr	r3, [r3, #0]
 8010190:	623b      	str	r3, [r7, #32]
        previous_pool =  next_pool -> tx_byte_pool_created_previous;
 8010192:	6a3b      	ldr	r3, [r7, #32]
 8010194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010196:	61fb      	str	r3, [r7, #28]

        /* Place the new byte pool in the list.  */
        next_pool -> tx_byte_pool_created_previous =  pool_ptr;
 8010198:	6a3b      	ldr	r3, [r7, #32]
 801019a:	68fa      	ldr	r2, [r7, #12]
 801019c:	631a      	str	r2, [r3, #48]	; 0x30
        previous_pool -> tx_byte_pool_created_next =  pool_ptr;
 801019e:	69fb      	ldr	r3, [r7, #28]
 80101a0:	68fa      	ldr	r2, [r7, #12]
 80101a2:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Setup this byte pool's created links.  */
        pool_ptr -> tx_byte_pool_created_previous =  previous_pool;
 80101a4:	68fb      	ldr	r3, [r7, #12]
 80101a6:	69fa      	ldr	r2, [r7, #28]
 80101a8:	631a      	str	r2, [r3, #48]	; 0x30
        pool_ptr -> tx_byte_pool_created_next =      next_pool;
 80101aa:	68fb      	ldr	r3, [r7, #12]
 80101ac:	6a3a      	ldr	r2, [r7, #32]
 80101ae:	62da      	str	r2, [r3, #44]	; 0x2c
    }

    /* Increment the number of created byte pools.  */
    _tx_byte_pool_created_count++;
 80101b0:	4b09      	ldr	r3, [pc, #36]	; (80101d8 <_tx_byte_pool_create+0x124>)
 80101b2:	681b      	ldr	r3, [r3, #0]
 80101b4:	3301      	adds	r3, #1
 80101b6:	4a08      	ldr	r2, [pc, #32]	; (80101d8 <_tx_byte_pool_create+0x124>)
 80101b8:	6013      	str	r3, [r2, #0]
 80101ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80101bc:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80101be:	693b      	ldr	r3, [r7, #16]
 80101c0:	f383 8810 	msr	PRIMASK, r3
}
 80101c4:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 80101c6:	2300      	movs	r3, #0
}
 80101c8:	4618      	mov	r0, r3
 80101ca:	3738      	adds	r7, #56	; 0x38
 80101cc:	46bd      	mov	sp, r7
 80101ce:	bd80      	pop	{r7, pc}
 80101d0:	ffffeeee 	.word	0xffffeeee
 80101d4:	42595445 	.word	0x42595445
 80101d8:	20002f6c 	.word	0x20002f6c
 80101dc:	20002f68 	.word	0x20002f68

080101e0 <_tx_event_flags_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_event_flags_create(TX_EVENT_FLAGS_GROUP *group_ptr, CHAR *name_ptr)
{
 80101e0:	b580      	push	{r7, lr}
 80101e2:	b088      	sub	sp, #32
 80101e4:	af00      	add	r7, sp, #0
 80101e6:	6078      	str	r0, [r7, #4]
 80101e8:	6039      	str	r1, [r7, #0]
TX_EVENT_FLAGS_GROUP    *next_group;
TX_EVENT_FLAGS_GROUP    *previous_group;


    /* Initialize event flags control block to all zeros.  */
    TX_MEMSET(group_ptr, 0, (sizeof(TX_EVENT_FLAGS_GROUP)));
 80101ea:	2224      	movs	r2, #36	; 0x24
 80101ec:	2100      	movs	r1, #0
 80101ee:	6878      	ldr	r0, [r7, #4]
 80101f0:	f002 fc4a 	bl	8012a88 <memset>

    /* Setup the basic event flags group fields.  */
    group_ptr -> tx_event_flags_group_name =             name_ptr;
 80101f4:	687b      	ldr	r3, [r7, #4]
 80101f6:	683a      	ldr	r2, [r7, #0]
 80101f8:	605a      	str	r2, [r3, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80101fa:	f3ef 8310 	mrs	r3, PRIMASK
 80101fe:	613b      	str	r3, [r7, #16]
    return(posture);
 8010200:	693b      	ldr	r3, [r7, #16]
    int_posture = __get_interrupt_posture();
 8010202:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("CPSID i" : : : "memory");
 8010204:	b672      	cpsid	i
    return(int_posture);
 8010206:	68fb      	ldr	r3, [r7, #12]

    /* Disable interrupts to put the event flags group on the created list.  */
    TX_DISABLE
 8010208:	61fb      	str	r3, [r7, #28]

    /* Setup the event flags ID to make it valid.  */
    group_ptr -> tx_event_flags_group_id =  TX_EVENT_FLAGS_ID;
 801020a:	687b      	ldr	r3, [r7, #4]
 801020c:	4a18      	ldr	r2, [pc, #96]	; (8010270 <_tx_event_flags_create+0x90>)
 801020e:	601a      	str	r2, [r3, #0]

    /* Place the group on the list of created event flag groups.  First,
       check for an empty list.  */
    if (_tx_event_flags_created_count == TX_EMPTY)
 8010210:	4b18      	ldr	r3, [pc, #96]	; (8010274 <_tx_event_flags_create+0x94>)
 8010212:	681b      	ldr	r3, [r3, #0]
 8010214:	2b00      	cmp	r3, #0
 8010216:	d109      	bne.n	801022c <_tx_event_flags_create+0x4c>
    {

        /* The created event flags list is empty.  Add event flag group to empty list.  */
        _tx_event_flags_created_ptr =                         group_ptr;
 8010218:	4a17      	ldr	r2, [pc, #92]	; (8010278 <_tx_event_flags_create+0x98>)
 801021a:	687b      	ldr	r3, [r7, #4]
 801021c:	6013      	str	r3, [r2, #0]
        group_ptr -> tx_event_flags_group_created_next =      group_ptr;
 801021e:	687b      	ldr	r3, [r7, #4]
 8010220:	687a      	ldr	r2, [r7, #4]
 8010222:	619a      	str	r2, [r3, #24]
        group_ptr -> tx_event_flags_group_created_previous =  group_ptr;
 8010224:	687b      	ldr	r3, [r7, #4]
 8010226:	687a      	ldr	r2, [r7, #4]
 8010228:	61da      	str	r2, [r3, #28]
 801022a:	e011      	b.n	8010250 <_tx_event_flags_create+0x70>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_group =      _tx_event_flags_created_ptr;
 801022c:	4b12      	ldr	r3, [pc, #72]	; (8010278 <_tx_event_flags_create+0x98>)
 801022e:	681b      	ldr	r3, [r3, #0]
 8010230:	61bb      	str	r3, [r7, #24]
        previous_group =  next_group -> tx_event_flags_group_created_previous;
 8010232:	69bb      	ldr	r3, [r7, #24]
 8010234:	69db      	ldr	r3, [r3, #28]
 8010236:	617b      	str	r3, [r7, #20]

        /* Place the new event flag group in the list.  */
        next_group -> tx_event_flags_group_created_previous =  group_ptr;
 8010238:	69bb      	ldr	r3, [r7, #24]
 801023a:	687a      	ldr	r2, [r7, #4]
 801023c:	61da      	str	r2, [r3, #28]
        previous_group -> tx_event_flags_group_created_next =  group_ptr;
 801023e:	697b      	ldr	r3, [r7, #20]
 8010240:	687a      	ldr	r2, [r7, #4]
 8010242:	619a      	str	r2, [r3, #24]

        /* Setup this group's created links.  */
        group_ptr -> tx_event_flags_group_created_previous =  previous_group;
 8010244:	687b      	ldr	r3, [r7, #4]
 8010246:	697a      	ldr	r2, [r7, #20]
 8010248:	61da      	str	r2, [r3, #28]
        group_ptr -> tx_event_flags_group_created_next =      next_group;
 801024a:	687b      	ldr	r3, [r7, #4]
 801024c:	69ba      	ldr	r2, [r7, #24]
 801024e:	619a      	str	r2, [r3, #24]
    }

    /* Increment the number of created event flag groups.  */
    _tx_event_flags_created_count++;
 8010250:	4b08      	ldr	r3, [pc, #32]	; (8010274 <_tx_event_flags_create+0x94>)
 8010252:	681b      	ldr	r3, [r3, #0]
 8010254:	3301      	adds	r3, #1
 8010256:	4a07      	ldr	r2, [pc, #28]	; (8010274 <_tx_event_flags_create+0x94>)
 8010258:	6013      	str	r3, [r2, #0]
 801025a:	69fb      	ldr	r3, [r7, #28]
 801025c:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801025e:	68bb      	ldr	r3, [r7, #8]
 8010260:	f383 8810 	msr	PRIMASK, r3
}
 8010264:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 8010266:	2300      	movs	r3, #0
}
 8010268:	4618      	mov	r0, r3
 801026a:	3720      	adds	r7, #32
 801026c:	46bd      	mov	sp, r7
 801026e:	bd80      	pop	{r7, pc}
 8010270:	4456444e 	.word	0x4456444e
 8010274:	20002f54 	.word	0x20002f54
 8010278:	20002f50 	.word	0x20002f50

0801027c <_tx_event_flags_set>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_event_flags_set(TX_EVENT_FLAGS_GROUP *group_ptr, ULONG flags_to_set, UINT set_option)
{
 801027c:	b580      	push	{r7, lr}
 801027e:	b0a6      	sub	sp, #152	; 0x98
 8010280:	af00      	add	r7, sp, #0
 8010282:	60f8      	str	r0, [r7, #12]
 8010284:	60b9      	str	r1, [r7, #8]
 8010286:	607a      	str	r2, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8010288:	f3ef 8310 	mrs	r3, PRIMASK
 801028c:	64fb      	str	r3, [r7, #76]	; 0x4c
    return(posture);
 801028e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    int_posture = __get_interrupt_posture();
 8010290:	64bb      	str	r3, [r7, #72]	; 0x48
    __asm__ volatile ("CPSID i" : : : "memory");
 8010292:	b672      	cpsid	i
    return(int_posture);
 8010294:	6cbb      	ldr	r3, [r7, #72]	; 0x48
VOID            (*events_set_notify)(struct TX_EVENT_FLAGS_GROUP_STRUCT *notify_group_ptr);
#endif


    /* Disable interrupts to remove the semaphore from the created list.  */
    TX_DISABLE
 8010296:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

    /* Log this kernel call.  */
    TX_EL_EVENT_FLAGS_SET_INSERT

    /* Determine how to set this group's event flags.  */
    if ((set_option & TX_EVENT_FLAGS_AND_MASK) == TX_AND)
 801029a:	687b      	ldr	r3, [r7, #4]
 801029c:	f003 0302 	and.w	r3, r3, #2
 80102a0:	2b00      	cmp	r3, #0
 80102a2:	d023      	beq.n	80102ec <_tx_event_flags_set+0x70>
    {

#ifndef TX_NOT_INTERRUPTABLE

        /* Set interrupted set request flag to false.  */
        interrupted_set_request =  TX_FALSE;
 80102a4:	2300      	movs	r3, #0
 80102a6:	673b      	str	r3, [r7, #112]	; 0x70

        /* Determine if the suspension list is being processed by an interrupted
           set request.  */
        if (group_ptr -> tx_event_flags_group_suspended_count != TX_NO_SUSPENSIONS)
 80102a8:	68fb      	ldr	r3, [r7, #12]
 80102aa:	695b      	ldr	r3, [r3, #20]
 80102ac:	2b00      	cmp	r3, #0
 80102ae:	d005      	beq.n	80102bc <_tx_event_flags_set+0x40>
        {

            if (group_ptr -> tx_event_flags_group_suspension_list == TX_NULL)
 80102b0:	68fb      	ldr	r3, [r7, #12]
 80102b2:	691b      	ldr	r3, [r3, #16]
 80102b4:	2b00      	cmp	r3, #0
 80102b6:	d101      	bne.n	80102bc <_tx_event_flags_set+0x40>
            {

                /* Set the interrupted set request flag.  */
                interrupted_set_request =  TX_TRUE;
 80102b8:	2301      	movs	r3, #1
 80102ba:	673b      	str	r3, [r7, #112]	; 0x70
            }
        }

        /* Was a set request interrupted?  */
        if (interrupted_set_request == TX_TRUE)
 80102bc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80102be:	2b01      	cmp	r3, #1
 80102c0:	d107      	bne.n	80102d2 <_tx_event_flags_set+0x56>
            /* A previous set operation was interrupted, we need to defer the
               event clearing until the set operation is complete.  */

            /* Remember the events to clear.  */
            group_ptr -> tx_event_flags_group_delayed_clear =
                                        group_ptr -> tx_event_flags_group_delayed_clear | ~flags_to_set;
 80102c2:	68fb      	ldr	r3, [r7, #12]
 80102c4:	6a1a      	ldr	r2, [r3, #32]
 80102c6:	68bb      	ldr	r3, [r7, #8]
 80102c8:	43db      	mvns	r3, r3
 80102ca:	431a      	orrs	r2, r3
            group_ptr -> tx_event_flags_group_delayed_clear =
 80102cc:	68fb      	ldr	r3, [r7, #12]
 80102ce:	621a      	str	r2, [r3, #32]
 80102d0:	e005      	b.n	80102de <_tx_event_flags_set+0x62>

            /* Previous set operation was not interrupted, simply clear the
               specified flags by "ANDing" the flags into the current events
               of the group.  */
            group_ptr -> tx_event_flags_group_current =
                group_ptr -> tx_event_flags_group_current & flags_to_set;
 80102d2:	68fb      	ldr	r3, [r7, #12]
 80102d4:	689a      	ldr	r2, [r3, #8]
 80102d6:	68bb      	ldr	r3, [r7, #8]
 80102d8:	401a      	ands	r2, r3
            group_ptr -> tx_event_flags_group_current =
 80102da:	68fb      	ldr	r3, [r7, #12]
 80102dc:	609a      	str	r2, [r3, #8]
 80102de:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80102e2:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80102e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80102e6:	f383 8810 	msr	PRIMASK, r3
}
 80102ea:	e1d4      	b.n	8010696 <_tx_event_flags_set+0x41a>
        events_set_notify =  group_ptr -> tx_event_flags_group_set_notify;
#endif

        /* "OR" the flags into the current events of the group.  */
        group_ptr -> tx_event_flags_group_current =
            group_ptr -> tx_event_flags_group_current | flags_to_set;
 80102ec:	68fb      	ldr	r3, [r7, #12]
 80102ee:	689a      	ldr	r2, [r3, #8]
 80102f0:	68bb      	ldr	r3, [r7, #8]
 80102f2:	431a      	orrs	r2, r3
        group_ptr -> tx_event_flags_group_current =
 80102f4:	68fb      	ldr	r3, [r7, #12]
 80102f6:	609a      	str	r2, [r3, #8]

#ifndef TX_NOT_INTERRUPTABLE

        /* Determine if there are any delayed flags to clear.  */
        if (group_ptr -> tx_event_flags_group_delayed_clear != ((ULONG) 0))
 80102f8:	68fb      	ldr	r3, [r7, #12]
 80102fa:	6a1b      	ldr	r3, [r3, #32]
 80102fc:	2b00      	cmp	r3, #0
 80102fe:	d006      	beq.n	801030e <_tx_event_flags_set+0x92>
        {

            /* Yes, we need to neutralize the delayed clearing as well.  */
            group_ptr -> tx_event_flags_group_delayed_clear =
                                        group_ptr -> tx_event_flags_group_delayed_clear & ~flags_to_set;
 8010300:	68fb      	ldr	r3, [r7, #12]
 8010302:	6a1a      	ldr	r2, [r3, #32]
 8010304:	68bb      	ldr	r3, [r7, #8]
 8010306:	43db      	mvns	r3, r3
 8010308:	401a      	ands	r2, r3
            group_ptr -> tx_event_flags_group_delayed_clear =
 801030a:	68fb      	ldr	r3, [r7, #12]
 801030c:	621a      	str	r2, [r3, #32]
        }
#endif

        /* Clear the preempt check flag.  */
        preempt_check =  TX_FALSE;
 801030e:	2300      	movs	r3, #0
 8010310:	677b      	str	r3, [r7, #116]	; 0x74

        /* Pickup the thread suspended count.  */
        suspended_count =  group_ptr -> tx_event_flags_group_suspended_count;
 8010312:	68fb      	ldr	r3, [r7, #12]
 8010314:	695b      	ldr	r3, [r3, #20]
 8010316:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

        /* Determine if there are any threads suspended on the event flag group.  */
        if (group_ptr -> tx_event_flags_group_suspension_list != TX_NULL)
 801031a:	68fb      	ldr	r3, [r7, #12]
 801031c:	691b      	ldr	r3, [r3, #16]
 801031e:	2b00      	cmp	r3, #0
 8010320:	f000 81a6 	beq.w	8010670 <_tx_event_flags_set+0x3f4>
        {

            /* Determine if there is just a single thread waiting on the event
               flag group.  */
            if (suspended_count == ((UINT) 1))
 8010324:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8010328:	2b01      	cmp	r3, #1
 801032a:	d169      	bne.n	8010400 <_tx_event_flags_set+0x184>

                /* Single thread waiting for event flags.  Bypass the multiple thread
                   logic.  */

                /* Setup thread pointer.  */
                thread_ptr =  group_ptr -> tx_event_flags_group_suspension_list;
 801032c:	68fb      	ldr	r3, [r7, #12]
 801032e:	691b      	ldr	r3, [r3, #16]
 8010330:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

                /* Pickup the current event flags.  */
                current_event_flags =  group_ptr -> tx_event_flags_group_current;
 8010334:	68fb      	ldr	r3, [r7, #12]
 8010336:	689b      	ldr	r3, [r3, #8]
 8010338:	67fb      	str	r3, [r7, #124]	; 0x7c

                /* Pickup the suspend information.  */
                requested_flags =  thread_ptr -> tx_thread_suspend_info;
 801033a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801033e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010340:	66bb      	str	r3, [r7, #104]	; 0x68

                /* Pickup the suspend option.  */
                get_option =  thread_ptr -> tx_thread_suspend_option;
 8010342:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8010346:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801034a:	667b      	str	r3, [r7, #100]	; 0x64

                /* Isolate the AND selection.  */
                and_request =  (get_option & TX_AND);
 801034c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801034e:	f003 0302 	and.w	r3, r3, #2
 8010352:	663b      	str	r3, [r7, #96]	; 0x60

                /* Check for AND condition. All flags must be present to satisfy request.  */
                if (and_request == TX_AND)
 8010354:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010356:	2b02      	cmp	r3, #2
 8010358:	d10a      	bne.n	8010370 <_tx_event_flags_set+0xf4>
                {

                    /* AND request is present.  */

                    /* Calculate the flags present.  */
                    flags_satisfied =  (current_event_flags & requested_flags);
 801035a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 801035c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801035e:	4013      	ands	r3, r2
 8010360:	67bb      	str	r3, [r7, #120]	; 0x78

                    /* Determine if they satisfy the AND request.  */
                    if (flags_satisfied != requested_flags)
 8010362:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8010364:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8010366:	429a      	cmp	r2, r3
 8010368:	d006      	beq.n	8010378 <_tx_event_flags_set+0xfc>
                    {

                        /* No, not all the requested flags are present. Clear the flags present variable.  */
                        flags_satisfied =  ((ULONG) 0);
 801036a:	2300      	movs	r3, #0
 801036c:	67bb      	str	r3, [r7, #120]	; 0x78
 801036e:	e003      	b.n	8010378 <_tx_event_flags_set+0xfc>
                }
                else
                {

                    /* OR request is present. Simply or the requested flags and the current flags.  */
                    flags_satisfied =  (current_event_flags & requested_flags);
 8010370:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8010372:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8010374:	4013      	ands	r3, r2
 8010376:	67bb      	str	r3, [r7, #120]	; 0x78
                }

                /* Determine if the request is satisfied.  */
                if (flags_satisfied != ((ULONG) 0))
 8010378:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801037a:	2b00      	cmp	r3, #0
 801037c:	f000 817f 	beq.w	801067e <_tx_event_flags_set+0x402>

                    /* Yes, resume the thread and apply any event flag
                       clearing.  */

                    /* Set the preempt check flag.  */
                    preempt_check =  TX_TRUE;
 8010380:	2301      	movs	r3, #1
 8010382:	677b      	str	r3, [r7, #116]	; 0x74

                    /* Return the actual event flags that satisfied the request.  */
                    suspend_info_ptr =   TX_VOID_TO_ULONG_POINTER_CONVERT(thread_ptr -> tx_thread_additional_suspend_info);
 8010384:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8010388:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801038a:	65fb      	str	r3, [r7, #92]	; 0x5c
                    *suspend_info_ptr =  current_event_flags;
 801038c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801038e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8010390:	601a      	str	r2, [r3, #0]

                    /* Pickup the clear bit.  */
                    clear_request =  (get_option & TX_EVENT_FLAGS_CLEAR_MASK);
 8010392:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010394:	f003 0301 	and.w	r3, r3, #1
 8010398:	65bb      	str	r3, [r7, #88]	; 0x58

                    /* Determine whether or not clearing needs to take place.  */
                    if (clear_request == TX_TRUE)
 801039a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801039c:	2b01      	cmp	r3, #1
 801039e:	d106      	bne.n	80103ae <_tx_event_flags_set+0x132>
                    {

                        /* Yes, clear the flags that satisfied this request.  */
                        group_ptr -> tx_event_flags_group_current =  group_ptr -> tx_event_flags_group_current & (~requested_flags);
 80103a0:	68fb      	ldr	r3, [r7, #12]
 80103a2:	689a      	ldr	r2, [r3, #8]
 80103a4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80103a6:	43db      	mvns	r3, r3
 80103a8:	401a      	ands	r2, r3
 80103aa:	68fb      	ldr	r3, [r7, #12]
 80103ac:	609a      	str	r2, [r3, #8]
                    }

                    /* Clear the suspension information in the event flag group.  */
                    group_ptr -> tx_event_flags_group_suspension_list =  TX_NULL;
 80103ae:	68fb      	ldr	r3, [r7, #12]
 80103b0:	2200      	movs	r2, #0
 80103b2:	611a      	str	r2, [r3, #16]
                    group_ptr -> tx_event_flags_group_suspended_count =  TX_NO_SUSPENSIONS;
 80103b4:	68fb      	ldr	r3, [r7, #12]
 80103b6:	2200      	movs	r2, #0
 80103b8:	615a      	str	r2, [r3, #20]

                    /* Clear cleanup routine to avoid timeout.  */
                    thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 80103ba:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80103be:	2200      	movs	r2, #0
 80103c0:	669a      	str	r2, [r3, #104]	; 0x68

                    /* Put return status into the thread control block.  */
                    thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 80103c2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80103c6:	2200      	movs	r2, #0
 80103c8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                    /* Resume the thread!  */
                    _tx_thread_system_ni_resume(thread_ptr);
#else

                    /* Temporarily disable preemption.  */
                    _tx_thread_preempt_disable++;
 80103cc:	4ba7      	ldr	r3, [pc, #668]	; (801066c <_tx_event_flags_set+0x3f0>)
 80103ce:	681b      	ldr	r3, [r3, #0]
 80103d0:	3301      	adds	r3, #1
 80103d2:	4aa6      	ldr	r2, [pc, #664]	; (801066c <_tx_event_flags_set+0x3f0>)
 80103d4:	6013      	str	r3, [r2, #0]
 80103d6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80103da:	63bb      	str	r3, [r7, #56]	; 0x38
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80103dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80103de:	f383 8810 	msr	PRIMASK, r3
}
 80103e2:	bf00      	nop

                    /* Restore interrupts.  */
                    TX_RESTORE

                    /* Resume thread.  */
                    _tx_thread_system_resume(thread_ptr);
 80103e4:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 80103e8:	f001 fa88 	bl	80118fc <_tx_thread_system_resume>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80103ec:	f3ef 8310 	mrs	r3, PRIMASK
 80103f0:	643b      	str	r3, [r7, #64]	; 0x40
    return(posture);
 80103f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    int_posture = __get_interrupt_posture();
 80103f4:	63fb      	str	r3, [r7, #60]	; 0x3c
    __asm__ volatile ("CPSID i" : : : "memory");
 80103f6:	b672      	cpsid	i
    return(int_posture);
 80103f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c

                    /* Disable interrupts to remove the semaphore from the created list.  */
                    TX_DISABLE
 80103fa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80103fe:	e13e      	b.n	801067e <_tx_event_flags_set+0x402>

                /* Otherwise, the event flag requests of multiple threads must be
                   examined.  */

                /* Setup thread pointer, keep a local copy of the head pointer.  */
                suspended_list =  group_ptr -> tx_event_flags_group_suspension_list;
 8010400:	68fb      	ldr	r3, [r7, #12]
 8010402:	691b      	ldr	r3, [r3, #16]
 8010404:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
                thread_ptr =      suspended_list;
 8010408:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801040c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

                /* Clear the suspended list head pointer to thwart manipulation of
                   the list in ISR's while we are processing here.  */
                group_ptr -> tx_event_flags_group_suspension_list =  TX_NULL;
 8010410:	68fb      	ldr	r3, [r7, #12]
 8010412:	2200      	movs	r2, #0
 8010414:	611a      	str	r2, [r3, #16]

                /* Setup the satisfied thread pointers.  */
                satisfied_list =  TX_NULL;
 8010416:	2300      	movs	r3, #0
 8010418:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                last_satisfied =  TX_NULL;
 801041c:	2300      	movs	r3, #0
 801041e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

                /* Pickup the current event flags.  */
                current_event_flags =  group_ptr -> tx_event_flags_group_current;
 8010422:	68fb      	ldr	r3, [r7, #12]
 8010424:	689b      	ldr	r3, [r3, #8]
 8010426:	67fb      	str	r3, [r7, #124]	; 0x7c

                /* Disable preemption while we process the suspended list.  */
                _tx_thread_preempt_disable++;
 8010428:	4b90      	ldr	r3, [pc, #576]	; (801066c <_tx_event_flags_set+0x3f0>)
 801042a:	681b      	ldr	r3, [r3, #0]
 801042c:	3301      	adds	r3, #1
 801042e:	4a8f      	ldr	r2, [pc, #572]	; (801066c <_tx_event_flags_set+0x3f0>)
 8010430:	6013      	str	r3, [r2, #0]
 8010432:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010436:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8010438:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801043a:	f383 8810 	msr	PRIMASK, r3
}
 801043e:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8010440:	f3ef 8310 	mrs	r3, PRIMASK
 8010444:	637b      	str	r3, [r7, #52]	; 0x34
    return(posture);
 8010446:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    int_posture = __get_interrupt_posture();
 8010448:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("CPSID i" : : : "memory");
 801044a:	b672      	cpsid	i
    return(int_posture);
 801044c:	6b3b      	ldr	r3, [r7, #48]	; 0x30

                    /* Restore interrupts temporarily.  */
                    TX_RESTORE

                    /* Disable interrupts again.  */
                    TX_DISABLE
 801044e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
#endif

                    /* Determine if we need to reset the search.  */
                    if (group_ptr -> tx_event_flags_group_reset_search != TX_FALSE)
 8010452:	68fb      	ldr	r3, [r7, #12]
 8010454:	68db      	ldr	r3, [r3, #12]
 8010456:	2b00      	cmp	r3, #0
 8010458:	d00f      	beq.n	801047a <_tx_event_flags_set+0x1fe>
                    {

                        /* Clear the reset search flag.  */
                        group_ptr -> tx_event_flags_group_reset_search =  TX_FALSE;
 801045a:	68fb      	ldr	r3, [r7, #12]
 801045c:	2200      	movs	r2, #0
 801045e:	60da      	str	r2, [r3, #12]

                        /* Move the thread pointer to the beginning of the search list.  */
                        thread_ptr =  suspended_list;
 8010460:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8010464:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

                        /* Reset the suspended count.  */
                        suspended_count =  group_ptr -> tx_event_flags_group_suspended_count;
 8010468:	68fb      	ldr	r3, [r7, #12]
 801046a:	695b      	ldr	r3, [r3, #20]
 801046c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

                        /* Update the current events with any new ones that might
                           have been set in a nested set events call from an ISR.  */
                        current_event_flags =  current_event_flags | group_ptr -> tx_event_flags_group_current;
 8010470:	68fb      	ldr	r3, [r7, #12]
 8010472:	689b      	ldr	r3, [r3, #8]
 8010474:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8010476:	4313      	orrs	r3, r2
 8010478:	67fb      	str	r3, [r7, #124]	; 0x7c
                    }

                    /* Save next thread pointer.  */
                    next_thread_ptr =  thread_ptr -> tx_thread_suspended_next;
 801047a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801047e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010480:	66fb      	str	r3, [r7, #108]	; 0x6c

                    /* Pickup the suspend information.  */
                    requested_flags =  thread_ptr -> tx_thread_suspend_info;
 8010482:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8010486:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010488:	66bb      	str	r3, [r7, #104]	; 0x68

                    /* Pickup this thread's suspension get option.  */
                    get_option =  thread_ptr -> tx_thread_suspend_option;
 801048a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801048e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010492:	667b      	str	r3, [r7, #100]	; 0x64

                    /* Isolate the AND selection.  */
                    and_request =  (get_option & TX_AND);
 8010494:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010496:	f003 0302 	and.w	r3, r3, #2
 801049a:	663b      	str	r3, [r7, #96]	; 0x60

                    /* Check for AND condition. All flags must be present to satisfy request.  */
                    if (and_request == TX_AND)
 801049c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801049e:	2b02      	cmp	r3, #2
 80104a0:	d10a      	bne.n	80104b8 <_tx_event_flags_set+0x23c>
                    {

                        /* AND request is present.  */

                        /* Calculate the flags present.  */
                        flags_satisfied =  (current_event_flags & requested_flags);
 80104a2:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80104a4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80104a6:	4013      	ands	r3, r2
 80104a8:	67bb      	str	r3, [r7, #120]	; 0x78

                        /* Determine if they satisfy the AND request.  */
                        if (flags_satisfied != requested_flags)
 80104aa:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80104ac:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80104ae:	429a      	cmp	r2, r3
 80104b0:	d006      	beq.n	80104c0 <_tx_event_flags_set+0x244>
                        {

                            /* No, not all the requested flags are present. Clear the flags present variable.  */
                            flags_satisfied =  ((ULONG) 0);
 80104b2:	2300      	movs	r3, #0
 80104b4:	67bb      	str	r3, [r7, #120]	; 0x78
 80104b6:	e003      	b.n	80104c0 <_tx_event_flags_set+0x244>
                    }
                    else
                    {

                        /* OR request is present. Simply or the requested flags and the current flags.  */
                        flags_satisfied =  (current_event_flags & requested_flags);
 80104b8:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80104ba:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80104bc:	4013      	ands	r3, r2
 80104be:	67bb      	str	r3, [r7, #120]	; 0x78
                    }

                    /* Check to see if the thread had a timeout or wait abort during the event search processing.
                       If so, just set the flags satisfied to ensure the processing here removes the thread from
                       the suspension list.  */
                    if (thread_ptr -> tx_thread_state != TX_EVENT_FLAG)
 80104c0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80104c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80104c6:	2b07      	cmp	r3, #7
 80104c8:	d001      	beq.n	80104ce <_tx_event_flags_set+0x252>
                    {

                       /* Simply set the satisfied flags to 1 in order to remove the thread from the suspension list.  */
                        flags_satisfied =  ((ULONG) 1);
 80104ca:	2301      	movs	r3, #1
 80104cc:	67bb      	str	r3, [r7, #120]	; 0x78
                    }

                    /* Determine if the request is satisfied.  */
                    if (flags_satisfied != ((ULONG) 0))
 80104ce:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80104d0:	2b00      	cmp	r3, #0
 80104d2:	d06b      	beq.n	80105ac <_tx_event_flags_set+0x330>
                    {

                        /* Yes, this request can be handled now.  */

                        /* Set the preempt check flag.  */
                        preempt_check =  TX_TRUE;
 80104d4:	2301      	movs	r3, #1
 80104d6:	677b      	str	r3, [r7, #116]	; 0x74

                        /* Determine if the thread is still suspended on the event flag group. If not, a wait
                           abort must have been done from an ISR.  */
                        if (thread_ptr -> tx_thread_state == TX_EVENT_FLAG)
 80104d8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80104dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80104de:	2b07      	cmp	r3, #7
 80104e0:	d11d      	bne.n	801051e <_tx_event_flags_set+0x2a2>
                        {

                            /* Return the actual event flags that satisfied the request.  */
                            suspend_info_ptr =   TX_VOID_TO_ULONG_POINTER_CONVERT(thread_ptr -> tx_thread_additional_suspend_info);
 80104e2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80104e6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80104e8:	65fb      	str	r3, [r7, #92]	; 0x5c
                            *suspend_info_ptr =  current_event_flags;
 80104ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80104ec:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80104ee:	601a      	str	r2, [r3, #0]

                            /* Pickup the clear bit.  */
                            clear_request =  (get_option & TX_EVENT_FLAGS_CLEAR_MASK);
 80104f0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80104f2:	f003 0301 	and.w	r3, r3, #1
 80104f6:	65bb      	str	r3, [r7, #88]	; 0x58

                            /* Determine whether or not clearing needs to take place.  */
                            if (clear_request == TX_TRUE)
 80104f8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80104fa:	2b01      	cmp	r3, #1
 80104fc:	d106      	bne.n	801050c <_tx_event_flags_set+0x290>
                            {

                                /* Yes, clear the flags that satisfied this request.  */
                                group_ptr -> tx_event_flags_group_current =  group_ptr -> tx_event_flags_group_current & ~requested_flags;
 80104fe:	68fb      	ldr	r3, [r7, #12]
 8010500:	689a      	ldr	r2, [r3, #8]
 8010502:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8010504:	43db      	mvns	r3, r3
 8010506:	401a      	ands	r2, r3
 8010508:	68fb      	ldr	r3, [r7, #12]
 801050a:	609a      	str	r2, [r3, #8]
                            }

                            /* Prepare for resumption of the first thread.  */

                            /* Clear cleanup routine to avoid timeout.  */
                            thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 801050c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8010510:	2200      	movs	r2, #0
 8010512:	669a      	str	r2, [r3, #104]	; 0x68

                            /* Put return status into the thread control block.  */
                            thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 8010514:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8010518:	2200      	movs	r2, #0
 801051a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

                        /* We need to remove the thread from the suspension list and place it in the
                           expired list.  */

                        /* See if this is the only suspended thread on the list.  */
                        if (thread_ptr == thread_ptr -> tx_thread_suspended_next)
 801051e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8010522:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010524:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8010528:	429a      	cmp	r2, r3
 801052a:	d103      	bne.n	8010534 <_tx_event_flags_set+0x2b8>
                        {

                            /* Yes, the only suspended thread.  */

                            /* Update the head pointer.  */
                            suspended_list =  TX_NULL;
 801052c:	2300      	movs	r3, #0
 801052e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8010532:	e018      	b.n	8010566 <_tx_event_flags_set+0x2ea>
                        {

                            /* At least one more thread is on the same expiration list.  */

                            /* Update the links of the adjacent threads.  */
                            next_thread =                                  thread_ptr -> tx_thread_suspended_next;
 8010534:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8010538:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801053a:	657b      	str	r3, [r7, #84]	; 0x54
                            previous_thread =                              thread_ptr -> tx_thread_suspended_previous;
 801053c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8010540:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010542:	653b      	str	r3, [r7, #80]	; 0x50
                            next_thread -> tx_thread_suspended_previous =  previous_thread;
 8010544:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010546:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8010548:	675a      	str	r2, [r3, #116]	; 0x74
                            previous_thread -> tx_thread_suspended_next =  next_thread;
 801054a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801054c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801054e:	671a      	str	r2, [r3, #112]	; 0x70

                            /* Update the list head pointer, if removing the head of the
                               list.  */
                            if (suspended_list == thread_ptr)
 8010550:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8010554:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8010558:	429a      	cmp	r2, r3
 801055a:	d104      	bne.n	8010566 <_tx_event_flags_set+0x2ea>
                            {

                                /* Yes, head pointer needs to be updated.  */
                                suspended_list =  thread_ptr -> tx_thread_suspended_next;
 801055c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8010560:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010562:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
                            }
                        }

                        /* Decrement the suspension count.  */
                        group_ptr -> tx_event_flags_group_suspended_count--;
 8010566:	68fb      	ldr	r3, [r7, #12]
 8010568:	695b      	ldr	r3, [r3, #20]
 801056a:	1e5a      	subs	r2, r3, #1
 801056c:	68fb      	ldr	r3, [r7, #12]
 801056e:	615a      	str	r2, [r3, #20]

                        /* Place this thread on the expired list.  */
                        if (satisfied_list == TX_NULL)
 8010570:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8010574:	2b00      	cmp	r3, #0
 8010576:	d10c      	bne.n	8010592 <_tx_event_flags_set+0x316>
                        {

                            /* First thread on the satisfied list.  */
                            satisfied_list =  thread_ptr;
 8010578:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801057c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                            last_satisfied =  thread_ptr;
 8010580:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8010584:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

                            /* Setup initial next pointer.  */
                            thread_ptr -> tx_thread_suspended_next =  TX_NULL;
 8010588:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801058c:	2200      	movs	r2, #0
 801058e:	671a      	str	r2, [r3, #112]	; 0x70
 8010590:	e00c      	b.n	80105ac <_tx_event_flags_set+0x330>
                        {

                            /* Not the first thread on the satisfied list.  */

                            /* Link it up at the end.  */
                            last_satisfied -> tx_thread_suspended_next =  thread_ptr;
 8010592:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8010596:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 801059a:	671a      	str	r2, [r3, #112]	; 0x70
                            thread_ptr -> tx_thread_suspended_next =      TX_NULL;
 801059c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80105a0:	2200      	movs	r2, #0
 80105a2:	671a      	str	r2, [r3, #112]	; 0x70
                            last_satisfied =                              thread_ptr;
 80105a4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80105a8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                        }
                    }

                    /* Copy next thread pointer to working thread ptr.  */
                    thread_ptr =  next_thread_ptr;
 80105ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80105ae:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

                    /* Decrement the suspension count.  */
                    suspended_count--;
 80105b2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80105b6:	3b01      	subs	r3, #1
 80105b8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

                } while (suspended_count != TX_NO_SUSPENSIONS);
 80105bc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80105c0:	2b00      	cmp	r3, #0
 80105c2:	f47f af36 	bne.w	8010432 <_tx_event_flags_set+0x1b6>

                /* Setup the group's suspension list head again.  */
                group_ptr -> tx_event_flags_group_suspension_list =  suspended_list;
 80105c6:	68fb      	ldr	r3, [r7, #12]
 80105c8:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80105cc:	611a      	str	r2, [r3, #16]

#ifndef TX_NOT_INTERRUPTABLE

                /* Determine if there is any delayed event clearing to perform.  */
                if (group_ptr -> tx_event_flags_group_delayed_clear != ((ULONG) 0))
 80105ce:	68fb      	ldr	r3, [r7, #12]
 80105d0:	6a1b      	ldr	r3, [r3, #32]
 80105d2:	2b00      	cmp	r3, #0
 80105d4:	d00a      	beq.n	80105ec <_tx_event_flags_set+0x370>
                {

                    /* Perform the delayed event clearing.  */
                    group_ptr -> tx_event_flags_group_current =
                        group_ptr -> tx_event_flags_group_current & ~(group_ptr -> tx_event_flags_group_delayed_clear);
 80105d6:	68fb      	ldr	r3, [r7, #12]
 80105d8:	689a      	ldr	r2, [r3, #8]
 80105da:	68fb      	ldr	r3, [r7, #12]
 80105dc:	6a1b      	ldr	r3, [r3, #32]
 80105de:	43db      	mvns	r3, r3
 80105e0:	401a      	ands	r2, r3
                    group_ptr -> tx_event_flags_group_current =
 80105e2:	68fb      	ldr	r3, [r7, #12]
 80105e4:	609a      	str	r2, [r3, #8]

                    /* Clear the delayed event flag clear value.  */
                    group_ptr -> tx_event_flags_group_delayed_clear =  ((ULONG) 0);
 80105e6:	68fb      	ldr	r3, [r7, #12]
 80105e8:	2200      	movs	r2, #0
 80105ea:	621a      	str	r2, [r3, #32]
 80105ec:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80105f0:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80105f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80105f4:	f383 8810 	msr	PRIMASK, r3
}
 80105f8:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Walk through the satisfied list, setup initial thread pointer. */
                thread_ptr =  satisfied_list;
 80105fa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80105fe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
                while(thread_ptr != TX_NULL)
 8010602:	e01f      	b.n	8010644 <_tx_event_flags_set+0x3c8>
                {

                    /* Get next pointer first.  */
                    next_thread_ptr =  thread_ptr -> tx_thread_suspended_next;
 8010604:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8010608:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801060a:	66fb      	str	r3, [r7, #108]	; 0x6c
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801060c:	f3ef 8310 	mrs	r3, PRIMASK
 8010610:	623b      	str	r3, [r7, #32]
    return(posture);
 8010612:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 8010614:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 8010616:	b672      	cpsid	i
    return(int_posture);
 8010618:	69fb      	ldr	r3, [r7, #28]

                    /* Disable interrupts.  */
                    TX_DISABLE
 801061a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
                    /* Restore interrupts.  */
                    TX_RESTORE
#else

                    /* Disable preemption again.  */
                    _tx_thread_preempt_disable++;
 801061e:	4b13      	ldr	r3, [pc, #76]	; (801066c <_tx_event_flags_set+0x3f0>)
 8010620:	681b      	ldr	r3, [r3, #0]
 8010622:	3301      	adds	r3, #1
 8010624:	4a11      	ldr	r2, [pc, #68]	; (801066c <_tx_event_flags_set+0x3f0>)
 8010626:	6013      	str	r3, [r2, #0]
 8010628:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801062c:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801062e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010630:	f383 8810 	msr	PRIMASK, r3
}
 8010634:	bf00      	nop

                    /* Restore interrupt posture.  */
                    TX_RESTORE

                    /* Resume the thread.  */
                    _tx_thread_system_resume(thread_ptr);
 8010636:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 801063a:	f001 f95f 	bl	80118fc <_tx_thread_system_resume>
#endif

                    /* Move next thread to current.  */
                    thread_ptr =  next_thread_ptr;
 801063e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010640:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
                while(thread_ptr != TX_NULL)
 8010644:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8010648:	2b00      	cmp	r3, #0
 801064a:	d1db      	bne.n	8010604 <_tx_event_flags_set+0x388>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801064c:	f3ef 8310 	mrs	r3, PRIMASK
 8010650:	61bb      	str	r3, [r7, #24]
    return(posture);
 8010652:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8010654:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8010656:	b672      	cpsid	i
    return(int_posture);
 8010658:	697b      	ldr	r3, [r7, #20]
                }

                /* Disable interrupts.  */
                TX_DISABLE
 801065a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

                /* Release thread preemption disable.  */
                _tx_thread_preempt_disable--;
 801065e:	4b03      	ldr	r3, [pc, #12]	; (801066c <_tx_event_flags_set+0x3f0>)
 8010660:	681b      	ldr	r3, [r3, #0]
 8010662:	3b01      	subs	r3, #1
 8010664:	4a01      	ldr	r2, [pc, #4]	; (801066c <_tx_event_flags_set+0x3f0>)
 8010666:	6013      	str	r3, [r2, #0]
 8010668:	e009      	b.n	801067e <_tx_event_flags_set+0x402>
 801066a:	bf00      	nop
 801066c:	20003010 	.word	0x20003010
        }
        else
        {

            /* Determine if we need to set the reset search field.  */
            if (group_ptr -> tx_event_flags_group_suspended_count != TX_NO_SUSPENSIONS)
 8010670:	68fb      	ldr	r3, [r7, #12]
 8010672:	695b      	ldr	r3, [r3, #20]
 8010674:	2b00      	cmp	r3, #0
 8010676:	d002      	beq.n	801067e <_tx_event_flags_set+0x402>
            {

                /* We interrupted a search of an event flag group suspension
                   list.  Make sure we reset the search.  */
                group_ptr -> tx_event_flags_group_reset_search =  TX_TRUE;
 8010678:	68fb      	ldr	r3, [r7, #12]
 801067a:	2201      	movs	r2, #1
 801067c:	60da      	str	r2, [r3, #12]
 801067e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010682:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8010684:	693b      	ldr	r3, [r7, #16]
 8010686:	f383 8810 	msr	PRIMASK, r3
}
 801068a:	bf00      	nop
            (events_set_notify)(group_ptr);
        }
#endif

        /* Determine if a check for preemption is necessary.  */
        if (preempt_check == TX_TRUE)
 801068c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801068e:	2b01      	cmp	r3, #1
 8010690:	d101      	bne.n	8010696 <_tx_event_flags_set+0x41a>
        {

            /* Yes, one or more threads were resumed, check for preemption.  */
            _tx_thread_system_preempt_check();
 8010692:	f001 f8f9 	bl	8011888 <_tx_thread_system_preempt_check>
        }
    }

    /* Return completion status.  */
    return(TX_SUCCESS);
 8010696:	2300      	movs	r3, #0
}
 8010698:	4618      	mov	r0, r3
 801069a:	3798      	adds	r7, #152	; 0x98
 801069c:	46bd      	mov	sp, r7
 801069e:	bd80      	pop	{r7, pc}

080106a0 <_tx_initialize_high_level>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID    _tx_initialize_high_level(VOID)
{
 80106a0:	b580      	push	{r7, lr}
 80106a2:	af00      	add	r7, sp, #0

    /* Initialize the event log, if enabled.  */
    TX_EL_INITIALIZE

    /* Call the thread control initialization function.  */
    _tx_thread_initialize();
 80106a4:	f000 ff18 	bl	80114d8 <_tx_thread_initialize>

#ifndef TX_NO_TIMER

    /* Call the timer control initialization function.  */
    _tx_timer_initialize();
 80106a8:	f001 fbf0 	bl	8011e8c <_tx_timer_initialize>
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Call the semaphore initialization function.  */
    _tx_semaphore_initialize();
 80106ac:	4b12      	ldr	r3, [pc, #72]	; (80106f8 <_tx_initialize_high_level+0x58>)
 80106ae:	2200      	movs	r2, #0
 80106b0:	601a      	str	r2, [r3, #0]
 80106b2:	4b12      	ldr	r3, [pc, #72]	; (80106fc <_tx_initialize_high_level+0x5c>)
 80106b4:	2200      	movs	r2, #0
 80106b6:	601a      	str	r2, [r3, #0]

    /* Call the queue initialization function.  */
    _tx_queue_initialize();
 80106b8:	4b11      	ldr	r3, [pc, #68]	; (8010700 <_tx_initialize_high_level+0x60>)
 80106ba:	2200      	movs	r2, #0
 80106bc:	601a      	str	r2, [r3, #0]
 80106be:	4b11      	ldr	r3, [pc, #68]	; (8010704 <_tx_initialize_high_level+0x64>)
 80106c0:	2200      	movs	r2, #0
 80106c2:	601a      	str	r2, [r3, #0]

    /* Call the event flag initialization function.  */
    _tx_event_flags_initialize();
 80106c4:	4b10      	ldr	r3, [pc, #64]	; (8010708 <_tx_initialize_high_level+0x68>)
 80106c6:	2200      	movs	r2, #0
 80106c8:	601a      	str	r2, [r3, #0]
 80106ca:	4b10      	ldr	r3, [pc, #64]	; (801070c <_tx_initialize_high_level+0x6c>)
 80106cc:	2200      	movs	r2, #0
 80106ce:	601a      	str	r2, [r3, #0]

    /* Call the block pool initialization function.  */
    _tx_block_pool_initialize();
 80106d0:	4b0f      	ldr	r3, [pc, #60]	; (8010710 <_tx_initialize_high_level+0x70>)
 80106d2:	2200      	movs	r2, #0
 80106d4:	601a      	str	r2, [r3, #0]
 80106d6:	4b0f      	ldr	r3, [pc, #60]	; (8010714 <_tx_initialize_high_level+0x74>)
 80106d8:	2200      	movs	r2, #0
 80106da:	601a      	str	r2, [r3, #0]

    /* Call the byte pool initialization function.  */
    _tx_byte_pool_initialize();
 80106dc:	4b0e      	ldr	r3, [pc, #56]	; (8010718 <_tx_initialize_high_level+0x78>)
 80106de:	2200      	movs	r2, #0
 80106e0:	601a      	str	r2, [r3, #0]
 80106e2:	4b0e      	ldr	r3, [pc, #56]	; (801071c <_tx_initialize_high_level+0x7c>)
 80106e4:	2200      	movs	r2, #0
 80106e6:	601a      	str	r2, [r3, #0]

    /* Call the mutex initialization function.  */
    _tx_mutex_initialize();
 80106e8:	4b0d      	ldr	r3, [pc, #52]	; (8010720 <_tx_initialize_high_level+0x80>)
 80106ea:	2200      	movs	r2, #0
 80106ec:	601a      	str	r2, [r3, #0]
 80106ee:	4b0d      	ldr	r3, [pc, #52]	; (8010724 <_tx_initialize_high_level+0x84>)
 80106f0:	2200      	movs	r2, #0
 80106f2:	601a      	str	r2, [r3, #0]
#endif
}
 80106f4:	bf00      	nop
 80106f6:	bd80      	pop	{r7, pc}
 80106f8:	20002f40 	.word	0x20002f40
 80106fc:	20002f44 	.word	0x20002f44
 8010700:	20002f48 	.word	0x20002f48
 8010704:	20002f4c 	.word	0x20002f4c
 8010708:	20002f50 	.word	0x20002f50
 801070c:	20002f54 	.word	0x20002f54
 8010710:	20002f60 	.word	0x20002f60
 8010714:	20002f64 	.word	0x20002f64
 8010718:	20002f68 	.word	0x20002f68
 801071c:	20002f6c 	.word	0x20002f6c
 8010720:	20002f58 	.word	0x20002f58
 8010724:	20002f5c 	.word	0x20002f5c

08010728 <_tx_initialize_kernel_enter>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_initialize_kernel_enter(VOID)
{
 8010728:	b580      	push	{r7, lr}
 801072a:	af00      	add	r7, sp, #0

    /* Determine if the compiler has pre-initialized ThreadX.  */
    if (_tx_thread_system_state != TX_INITIALIZE_ALMOST_DONE)
 801072c:	4b10      	ldr	r3, [pc, #64]	; (8010770 <_tx_initialize_kernel_enter+0x48>)
 801072e:	681b      	ldr	r3, [r3, #0]
 8010730:	f113 3f0f 	cmn.w	r3, #252645135	; 0xf0f0f0f
 8010734:	d00c      	beq.n	8010750 <_tx_initialize_kernel_enter+0x28>
        /* No, the initialization still needs to take place.  */

        /* Ensure that the system state variable is set to indicate
           initialization is in progress.  Note that this variable is
           later used to represent interrupt nesting.  */
        _tx_thread_system_state =  TX_INITIALIZE_IN_PROGRESS;
 8010736:	4b0e      	ldr	r3, [pc, #56]	; (8010770 <_tx_initialize_kernel_enter+0x48>)
 8010738:	f04f 32f0 	mov.w	r2, #4042322160	; 0xf0f0f0f0
 801073c:	601a      	str	r2, [r3, #0]
        /* Call any port specific preprocessing.  */
        TX_PORT_SPECIFIC_PRE_INITIALIZATION

        /* Invoke the low-level initialization to handle all processor specific
           initialization issues.  */
        _tx_initialize_low_level();
 801073e:	f7ef fd99 	bl	8000274 <_tx_initialize_low_level>

        /* Invoke the high-level initialization to exercise all of the
           ThreadX components and the application's initialization
           function.  */
        _tx_initialize_high_level();
 8010742:	f7ff ffad 	bl	80106a0 <_tx_initialize_high_level>

        /* Call any port specific post-processing.  */
        TX_PORT_SPECIFIC_POST_INITIALIZATION
 8010746:	4b0b      	ldr	r3, [pc, #44]	; (8010774 <_tx_initialize_kernel_enter+0x4c>)
 8010748:	681b      	ldr	r3, [r3, #0]
 801074a:	3301      	adds	r3, #1
 801074c:	4a09      	ldr	r2, [pc, #36]	; (8010774 <_tx_initialize_kernel_enter+0x4c>)
 801074e:	6013      	str	r3, [r2, #0]
    TX_INITIALIZE_KERNEL_ENTER_EXTENSION

    /* Ensure that the system state variable is set to indicate
       initialization is in progress.  Note that this variable is
       later used to represent interrupt nesting.  */
    _tx_thread_system_state =  TX_INITIALIZE_IN_PROGRESS;
 8010750:	4b07      	ldr	r3, [pc, #28]	; (8010770 <_tx_initialize_kernel_enter+0x48>)
 8010752:	f04f 32f0 	mov.w	r2, #4042322160	; 0xf0f0f0f0
 8010756:	601a      	str	r2, [r3, #0]

    /* Call the application provided initialization function.  Pass the
       first available memory address to it.  */
    tx_application_define(_tx_initialize_unused_memory);
 8010758:	4b07      	ldr	r3, [pc, #28]	; (8010778 <_tx_initialize_kernel_enter+0x50>)
 801075a:	681b      	ldr	r3, [r3, #0]
 801075c:	4618      	mov	r0, r3
 801075e:	f7f0 fc55 	bl	800100c <tx_application_define>

    /* Set the system state in preparation for entering the thread
       scheduler.  */
    _tx_thread_system_state =  TX_INITIALIZE_IS_FINISHED;
 8010762:	4b03      	ldr	r3, [pc, #12]	; (8010770 <_tx_initialize_kernel_enter+0x48>)
 8010764:	2200      	movs	r2, #0
 8010766:	601a      	str	r2, [r3, #0]

    /* Call any port specific pre-scheduler processing.  */
    TX_PORT_SPECIFIC_PRE_SCHEDULER_INITIALIZATION

    /* Enter the scheduling loop to start executing threads!  */
    _tx_thread_schedule();
 8010768:	f7ef fdc0 	bl	80002ec <_tx_thread_schedule>
#ifdef TX_SAFETY_CRITICAL

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif
}
 801076c:	bf00      	nop
 801076e:	bd80      	pop	{r7, pc}
 8010770:	20000010 	.word	0x20000010
 8010774:	20003010 	.word	0x20003010
 8010778:	20002f70 	.word	0x20002f70

0801077c <_tx_mutex_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_mutex_cleanup(TX_THREAD  *thread_ptr, ULONG suspension_sequence)
{
 801077c:	b580      	push	{r7, lr}
 801077e:	b08e      	sub	sp, #56	; 0x38
 8010780:	af00      	add	r7, sp, #0
 8010782:	6078      	str	r0, [r7, #4]
 8010784:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8010786:	f3ef 8310 	mrs	r3, PRIMASK
 801078a:	623b      	str	r3, [r7, #32]
    return(posture);
 801078c:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 801078e:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 8010790:	b672      	cpsid	i
    return(int_posture);
 8010792:	69fb      	ldr	r3, [r7, #28]


#ifndef TX_NOT_INTERRUPTABLE

    /* Disable interrupts to remove the suspended thread from the mutex.  */
    TX_DISABLE
 8010794:	637b      	str	r3, [r7, #52]	; 0x34

    /* Determine if the cleanup is still required.  */
    if (thread_ptr -> tx_thread_suspend_cleanup == &(_tx_mutex_cleanup))
 8010796:	687b      	ldr	r3, [r7, #4]
 8010798:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801079a:	4a33      	ldr	r2, [pc, #204]	; (8010868 <_tx_mutex_cleanup+0xec>)
 801079c:	4293      	cmp	r3, r2
 801079e:	d158      	bne.n	8010852 <_tx_mutex_cleanup+0xd6>
    {

        /* Check for valid suspension sequence.  */
        if (suspension_sequence == thread_ptr -> tx_thread_suspension_sequence)
 80107a0:	687b      	ldr	r3, [r7, #4]
 80107a2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80107a6:	683a      	ldr	r2, [r7, #0]
 80107a8:	429a      	cmp	r2, r3
 80107aa:	d152      	bne.n	8010852 <_tx_mutex_cleanup+0xd6>
        {

            /* Setup pointer to mutex control block.  */
            mutex_ptr =  TX_VOID_TO_MUTEX_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
 80107ac:	687b      	ldr	r3, [r7, #4]
 80107ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80107b0:	633b      	str	r3, [r7, #48]	; 0x30

            /* Check for NULL mutex pointer.  */
            if (mutex_ptr != TX_NULL)
 80107b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80107b4:	2b00      	cmp	r3, #0
 80107b6:	d04c      	beq.n	8010852 <_tx_mutex_cleanup+0xd6>
            {

                /* Determine if the mutex ID is valid.  */
                if (mutex_ptr -> tx_mutex_id == TX_MUTEX_ID)
 80107b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80107ba:	681b      	ldr	r3, [r3, #0]
 80107bc:	4a2b      	ldr	r2, [pc, #172]	; (801086c <_tx_mutex_cleanup+0xf0>)
 80107be:	4293      	cmp	r3, r2
 80107c0:	d147      	bne.n	8010852 <_tx_mutex_cleanup+0xd6>
                {

                    /* Determine if there are any thread suspensions.  */
                    if (mutex_ptr -> tx_mutex_suspended_count != TX_NO_SUSPENSIONS)
 80107c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80107c4:	69db      	ldr	r3, [r3, #28]
 80107c6:	2b00      	cmp	r3, #0
 80107c8:	d043      	beq.n	8010852 <_tx_mutex_cleanup+0xd6>
#endif

                        /* Yes, we still have thread suspension!  */

                        /* Clear the suspension cleanup flag.  */
                        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 80107ca:	687b      	ldr	r3, [r7, #4]
 80107cc:	2200      	movs	r2, #0
 80107ce:	669a      	str	r2, [r3, #104]	; 0x68

                        /* Decrement the suspension count.  */
                        mutex_ptr -> tx_mutex_suspended_count--;
 80107d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80107d2:	69db      	ldr	r3, [r3, #28]
 80107d4:	1e5a      	subs	r2, r3, #1
 80107d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80107d8:	61da      	str	r2, [r3, #28]

                        /* Pickup the suspended count.  */
                        suspended_count =  mutex_ptr -> tx_mutex_suspended_count;
 80107da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80107dc:	69db      	ldr	r3, [r3, #28]
 80107de:	62fb      	str	r3, [r7, #44]	; 0x2c

                        /* Remove the suspended thread from the list.  */

                        /* See if this is the only suspended thread on the list.  */
                        if (suspended_count == TX_NO_SUSPENSIONS)
 80107e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80107e2:	2b00      	cmp	r3, #0
 80107e4:	d103      	bne.n	80107ee <_tx_mutex_cleanup+0x72>
                        {

                            /* Yes, the only suspended thread.  */

                            /* Update the head pointer.  */
                            mutex_ptr -> tx_mutex_suspension_list =  TX_NULL;
 80107e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80107e8:	2200      	movs	r2, #0
 80107ea:	619a      	str	r2, [r3, #24]
 80107ec:	e013      	b.n	8010816 <_tx_mutex_cleanup+0x9a>
                        {

                            /* At least one more thread is on the same suspension list.  */

                            /* Update the links of the adjacent threads.  */
                            next_thread =                                   thread_ptr -> tx_thread_suspended_next;
 80107ee:	687b      	ldr	r3, [r7, #4]
 80107f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80107f2:	62bb      	str	r3, [r7, #40]	; 0x28
                            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 80107f4:	687b      	ldr	r3, [r7, #4]
 80107f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80107f8:	627b      	str	r3, [r7, #36]	; 0x24
                            next_thread -> tx_thread_suspended_previous =   previous_thread;
 80107fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80107fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80107fe:	675a      	str	r2, [r3, #116]	; 0x74
                            previous_thread -> tx_thread_suspended_next =   next_thread;
 8010800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010802:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010804:	671a      	str	r2, [r3, #112]	; 0x70

                            /* Determine if we need to update the head pointer.  */
                            if (mutex_ptr -> tx_mutex_suspension_list == thread_ptr)
 8010806:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010808:	699b      	ldr	r3, [r3, #24]
 801080a:	687a      	ldr	r2, [r7, #4]
 801080c:	429a      	cmp	r2, r3
 801080e:	d102      	bne.n	8010816 <_tx_mutex_cleanup+0x9a>
                            {

                                /* Update the list head pointer.  */
                                mutex_ptr -> tx_mutex_suspension_list =         next_thread;
 8010810:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010812:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010814:	619a      	str	r2, [r3, #24]
                            }
                        }

                        /* Now we need to determine if this cleanup is from a terminate, timeout,
                           or from a wait abort.  */
                        if (thread_ptr -> tx_thread_state == TX_MUTEX_SUSP)
 8010816:	687b      	ldr	r3, [r7, #4]
 8010818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801081a:	2b0d      	cmp	r3, #13
 801081c:	d119      	bne.n	8010852 <_tx_mutex_cleanup+0xd6>
                            /* Increment the number of timeouts on this semaphore.  */
                            mutex_ptr -> tx_mutex_performance_timeout_count++;
#endif

                            /* Setup return status.  */
                            thread_ptr -> tx_thread_suspend_status =  TX_NOT_AVAILABLE;
 801081e:	687b      	ldr	r3, [r7, #4]
 8010820:	221d      	movs	r2, #29
 8010822:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                            /* Resume the thread!  */
                            _tx_thread_system_ni_resume(thread_ptr);
#else

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 8010826:	4b12      	ldr	r3, [pc, #72]	; (8010870 <_tx_mutex_cleanup+0xf4>)
 8010828:	681b      	ldr	r3, [r3, #0]
 801082a:	3301      	adds	r3, #1
 801082c:	4a10      	ldr	r2, [pc, #64]	; (8010870 <_tx_mutex_cleanup+0xf4>)
 801082e:	6013      	str	r3, [r2, #0]
 8010830:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010832:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8010834:	693b      	ldr	r3, [r7, #16]
 8010836:	f383 8810 	msr	PRIMASK, r3
}
 801083a:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Resume the thread!  */
                            _tx_thread_system_resume(thread_ptr);
 801083c:	6878      	ldr	r0, [r7, #4]
 801083e:	f001 f85d 	bl	80118fc <_tx_thread_system_resume>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8010842:	f3ef 8310 	mrs	r3, PRIMASK
 8010846:	61bb      	str	r3, [r7, #24]
    return(posture);
 8010848:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 801084a:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 801084c:	b672      	cpsid	i
    return(int_posture);
 801084e:	697b      	ldr	r3, [r7, #20]

                            /* Disable interrupts.  */
                            TX_DISABLE
 8010850:	637b      	str	r3, [r7, #52]	; 0x34
 8010852:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010854:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8010856:	68fb      	ldr	r3, [r7, #12]
 8010858:	f383 8810 	msr	PRIMASK, r3
}
 801085c:	bf00      	nop
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 801085e:	bf00      	nop
 8010860:	3738      	adds	r7, #56	; 0x38
 8010862:	46bd      	mov	sp, r7
 8010864:	bd80      	pop	{r7, pc}
 8010866:	bf00      	nop
 8010868:	0801077d 	.word	0x0801077d
 801086c:	4d555445 	.word	0x4d555445
 8010870:	20003010 	.word	0x20003010

08010874 <_tx_mutex_thread_release>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_mutex_thread_release(TX_THREAD  *thread_ptr)
{
 8010874:	b580      	push	{r7, lr}
 8010876:	b08a      	sub	sp, #40	; 0x28
 8010878:	af00      	add	r7, sp, #0
 801087a:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801087c:	f3ef 8310 	mrs	r3, PRIMASK
 8010880:	61fb      	str	r3, [r7, #28]
    return(posture);
 8010882:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 8010884:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 8010886:	b672      	cpsid	i
    return(int_posture);
 8010888:	69bb      	ldr	r3, [r7, #24]
UINT        status;
#endif


    /* Disable interrupts.  */
    TX_DISABLE
 801088a:	627b      	str	r3, [r7, #36]	; 0x24

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 801088c:	4b1a      	ldr	r3, [pc, #104]	; (80108f8 <_tx_mutex_thread_release+0x84>)
 801088e:	681b      	ldr	r3, [r3, #0]
 8010890:	3301      	adds	r3, #1
 8010892:	4a19      	ldr	r2, [pc, #100]	; (80108f8 <_tx_mutex_thread_release+0x84>)
 8010894:	6013      	str	r3, [r2, #0]
    /* Loop to look at all the mutexes.  */
    do
    {

        /* Pickup the mutex head pointer.  */
        mutex_ptr =  thread_ptr -> tx_thread_owned_mutex_list;
 8010896:	687b      	ldr	r3, [r7, #4]
 8010898:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 801089c:	623b      	str	r3, [r7, #32]

        /* Determine if there is a mutex.  */
        if (mutex_ptr != TX_NULL)
 801089e:	6a3b      	ldr	r3, [r7, #32]
 80108a0:	2b00      	cmp	r3, #0
 80108a2:	d017      	beq.n	80108d4 <_tx_mutex_thread_release+0x60>
        {

            /* Yes, set the ownership count to 1.  */
            mutex_ptr -> tx_mutex_ownership_count =  ((UINT) 1);
 80108a4:	6a3b      	ldr	r3, [r7, #32]
 80108a6:	2201      	movs	r2, #1
 80108a8:	609a      	str	r2, [r3, #8]
 80108aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80108ac:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80108ae:	68fb      	ldr	r3, [r7, #12]
 80108b0:	f383 8810 	msr	PRIMASK, r3
}
 80108b4:	bf00      	nop
            do
            {
                status =  _tx_mutex_put(mutex_ptr);
            } while (status != TX_SUCCESS);
#else
            _tx_mutex_put(mutex_ptr);
 80108b6:	6a38      	ldr	r0, [r7, #32]
 80108b8:	f000 faf2 	bl	8010ea0 <_tx_mutex_put>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80108bc:	f3ef 8310 	mrs	r3, PRIMASK
 80108c0:	617b      	str	r3, [r7, #20]
    return(posture);
 80108c2:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 80108c4:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 80108c6:	b672      	cpsid	i
    return(int_posture);
 80108c8:	693b      	ldr	r3, [r7, #16]
#endif

            /* Disable interrupts.  */
            TX_DISABLE
 80108ca:	627b      	str	r3, [r7, #36]	; 0x24

            /* Move to the next mutex.  */
            mutex_ptr =  thread_ptr -> tx_thread_owned_mutex_list;
 80108cc:	687b      	ldr	r3, [r7, #4]
 80108ce:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80108d2:	623b      	str	r3, [r7, #32]
        }
    } while (mutex_ptr != TX_NULL);
 80108d4:	6a3b      	ldr	r3, [r7, #32]
 80108d6:	2b00      	cmp	r3, #0
 80108d8:	d1dd      	bne.n	8010896 <_tx_mutex_thread_release+0x22>

    /* Restore preemption.  */
    _tx_thread_preempt_disable--;
 80108da:	4b07      	ldr	r3, [pc, #28]	; (80108f8 <_tx_mutex_thread_release+0x84>)
 80108dc:	681b      	ldr	r3, [r3, #0]
 80108de:	3b01      	subs	r3, #1
 80108e0:	4a05      	ldr	r2, [pc, #20]	; (80108f8 <_tx_mutex_thread_release+0x84>)
 80108e2:	6013      	str	r3, [r2, #0]
 80108e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80108e6:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80108e8:	68bb      	ldr	r3, [r7, #8]
 80108ea:	f383 8810 	msr	PRIMASK, r3
}
 80108ee:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE
}
 80108f0:	bf00      	nop
 80108f2:	3728      	adds	r7, #40	; 0x28
 80108f4:	46bd      	mov	sp, r7
 80108f6:	bd80      	pop	{r7, pc}
 80108f8:	20003010 	.word	0x20003010

080108fc <_tx_mutex_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_mutex_create(TX_MUTEX *mutex_ptr, CHAR *name_ptr, UINT inherit)
{
 80108fc:	b580      	push	{r7, lr}
 80108fe:	b08a      	sub	sp, #40	; 0x28
 8010900:	af00      	add	r7, sp, #0
 8010902:	60f8      	str	r0, [r7, #12]
 8010904:	60b9      	str	r1, [r7, #8]
 8010906:	607a      	str	r2, [r7, #4]
TX_MUTEX        *next_mutex;
TX_MUTEX        *previous_mutex;


    /* Initialize mutex control block to all zeros.  */
    TX_MEMSET(mutex_ptr, 0, (sizeof(TX_MUTEX)));
 8010908:	2234      	movs	r2, #52	; 0x34
 801090a:	2100      	movs	r1, #0
 801090c:	68f8      	ldr	r0, [r7, #12]
 801090e:	f002 f8bb 	bl	8012a88 <memset>

    /* Setup the basic mutex fields.  */
    mutex_ptr -> tx_mutex_name =             name_ptr;
 8010912:	68fb      	ldr	r3, [r7, #12]
 8010914:	68ba      	ldr	r2, [r7, #8]
 8010916:	605a      	str	r2, [r3, #4]
    mutex_ptr -> tx_mutex_inherit =          inherit;
 8010918:	68fb      	ldr	r3, [r7, #12]
 801091a:	687a      	ldr	r2, [r7, #4]
 801091c:	611a      	str	r2, [r3, #16]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801091e:	f3ef 8310 	mrs	r3, PRIMASK
 8010922:	61bb      	str	r3, [r7, #24]
    return(posture);
 8010924:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8010926:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8010928:	b672      	cpsid	i
    return(int_posture);
 801092a:	697b      	ldr	r3, [r7, #20]

    /* Disable interrupts to place the mutex on the created list.  */
    TX_DISABLE
 801092c:	627b      	str	r3, [r7, #36]	; 0x24

    /* Setup the mutex ID to make it valid.  */
    mutex_ptr -> tx_mutex_id =  TX_MUTEX_ID;
 801092e:	68fb      	ldr	r3, [r7, #12]
 8010930:	4a1a      	ldr	r2, [pc, #104]	; (801099c <_tx_mutex_create+0xa0>)
 8010932:	601a      	str	r2, [r3, #0]

    /* Setup the thread mutex release function pointer.  */
    _tx_thread_mutex_release =  &(_tx_mutex_thread_release);
 8010934:	4b1a      	ldr	r3, [pc, #104]	; (80109a0 <_tx_mutex_create+0xa4>)
 8010936:	4a1b      	ldr	r2, [pc, #108]	; (80109a4 <_tx_mutex_create+0xa8>)
 8010938:	601a      	str	r2, [r3, #0]

    /* Place the mutex on the list of created mutexes.  First,
       check for an empty list.  */
    if (_tx_mutex_created_count == TX_EMPTY)
 801093a:	4b1b      	ldr	r3, [pc, #108]	; (80109a8 <_tx_mutex_create+0xac>)
 801093c:	681b      	ldr	r3, [r3, #0]
 801093e:	2b00      	cmp	r3, #0
 8010940:	d109      	bne.n	8010956 <_tx_mutex_create+0x5a>
    {

        /* The created mutex list is empty.  Add mutex to empty list.  */
        _tx_mutex_created_ptr =                   mutex_ptr;
 8010942:	4a1a      	ldr	r2, [pc, #104]	; (80109ac <_tx_mutex_create+0xb0>)
 8010944:	68fb      	ldr	r3, [r7, #12]
 8010946:	6013      	str	r3, [r2, #0]
        mutex_ptr -> tx_mutex_created_next =      mutex_ptr;
 8010948:	68fb      	ldr	r3, [r7, #12]
 801094a:	68fa      	ldr	r2, [r7, #12]
 801094c:	621a      	str	r2, [r3, #32]
        mutex_ptr -> tx_mutex_created_previous =  mutex_ptr;
 801094e:	68fb      	ldr	r3, [r7, #12]
 8010950:	68fa      	ldr	r2, [r7, #12]
 8010952:	625a      	str	r2, [r3, #36]	; 0x24
 8010954:	e011      	b.n	801097a <_tx_mutex_create+0x7e>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_mutex =      _tx_mutex_created_ptr;
 8010956:	4b15      	ldr	r3, [pc, #84]	; (80109ac <_tx_mutex_create+0xb0>)
 8010958:	681b      	ldr	r3, [r3, #0]
 801095a:	623b      	str	r3, [r7, #32]
        previous_mutex =  next_mutex -> tx_mutex_created_previous;
 801095c:	6a3b      	ldr	r3, [r7, #32]
 801095e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010960:	61fb      	str	r3, [r7, #28]

        /* Place the new mutex in the list.  */
        next_mutex -> tx_mutex_created_previous =  mutex_ptr;
 8010962:	6a3b      	ldr	r3, [r7, #32]
 8010964:	68fa      	ldr	r2, [r7, #12]
 8010966:	625a      	str	r2, [r3, #36]	; 0x24
        previous_mutex -> tx_mutex_created_next =  mutex_ptr;
 8010968:	69fb      	ldr	r3, [r7, #28]
 801096a:	68fa      	ldr	r2, [r7, #12]
 801096c:	621a      	str	r2, [r3, #32]

        /* Setup this mutex's next and previous created links.  */
        mutex_ptr -> tx_mutex_created_previous =  previous_mutex;
 801096e:	68fb      	ldr	r3, [r7, #12]
 8010970:	69fa      	ldr	r2, [r7, #28]
 8010972:	625a      	str	r2, [r3, #36]	; 0x24
        mutex_ptr -> tx_mutex_created_next =      next_mutex;
 8010974:	68fb      	ldr	r3, [r7, #12]
 8010976:	6a3a      	ldr	r2, [r7, #32]
 8010978:	621a      	str	r2, [r3, #32]
    }

    /* Increment the ownership count.  */
    _tx_mutex_created_count++;
 801097a:	4b0b      	ldr	r3, [pc, #44]	; (80109a8 <_tx_mutex_create+0xac>)
 801097c:	681b      	ldr	r3, [r3, #0]
 801097e:	3301      	adds	r3, #1
 8010980:	4a09      	ldr	r2, [pc, #36]	; (80109a8 <_tx_mutex_create+0xac>)
 8010982:	6013      	str	r3, [r2, #0]
 8010984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010986:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8010988:	693b      	ldr	r3, [r7, #16]
 801098a:	f383 8810 	msr	PRIMASK, r3
}
 801098e:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 8010990:	2300      	movs	r3, #0
}
 8010992:	4618      	mov	r0, r3
 8010994:	3728      	adds	r7, #40	; 0x28
 8010996:	46bd      	mov	sp, r7
 8010998:	bd80      	pop	{r7, pc}
 801099a:	bf00      	nop
 801099c:	4d555445 	.word	0x4d555445
 80109a0:	20003014 	.word	0x20003014
 80109a4:	08010875 	.word	0x08010875
 80109a8:	20002f5c 	.word	0x20002f5c
 80109ac:	20002f58 	.word	0x20002f58

080109b0 <_tx_mutex_get>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_mutex_get(TX_MUTEX *mutex_ptr, ULONG wait_option)
{
 80109b0:	b580      	push	{r7, lr}
 80109b2:	b092      	sub	sp, #72	; 0x48
 80109b4:	af00      	add	r7, sp, #0
 80109b6:	6078      	str	r0, [r7, #4]
 80109b8:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80109ba:	f3ef 8310 	mrs	r3, PRIMASK
 80109be:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 80109c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    int_posture = __get_interrupt_posture();
 80109c2:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSID i" : : : "memory");
 80109c4:	b672      	cpsid	i
    return(int_posture);
 80109c6:	6a3b      	ldr	r3, [r7, #32]
TX_THREAD       *previous_thread;
UINT            status;


    /* Disable interrupts to get an instance from the mutex.  */
    TX_DISABLE
 80109c8:	643b      	str	r3, [r7, #64]	; 0x40

    /* Log this kernel call.  */
    TX_EL_MUTEX_GET_INSERT

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 80109ca:	4b7a      	ldr	r3, [pc, #488]	; (8010bb4 <_tx_mutex_get+0x204>)
 80109cc:	681b      	ldr	r3, [r3, #0]
 80109ce:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Determine if this mutex is available.  */
    if (mutex_ptr -> tx_mutex_ownership_count == ((UINT) 0))
 80109d0:	687b      	ldr	r3, [r7, #4]
 80109d2:	689b      	ldr	r3, [r3, #8]
 80109d4:	2b00      	cmp	r3, #0
 80109d6:	d144      	bne.n	8010a62 <_tx_mutex_get+0xb2>
    {

        /* Set the ownership count to 1.  */
        mutex_ptr -> tx_mutex_ownership_count =  ((UINT) 1);
 80109d8:	687b      	ldr	r3, [r7, #4]
 80109da:	2201      	movs	r2, #1
 80109dc:	609a      	str	r2, [r3, #8]

        /* Remember that the calling thread owns the mutex.  */
        mutex_ptr -> tx_mutex_owner =  thread_ptr;
 80109de:	687b      	ldr	r3, [r7, #4]
 80109e0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80109e2:	60da      	str	r2, [r3, #12]

        /* Determine if the thread pointer is valid.  */
        if (thread_ptr != TX_NULL)
 80109e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80109e6:	2b00      	cmp	r3, #0
 80109e8:	d032      	beq.n	8010a50 <_tx_mutex_get+0xa0>
        {

            /* Determine if priority inheritance is required.  */
            if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 80109ea:	687b      	ldr	r3, [r7, #4]
 80109ec:	691b      	ldr	r3, [r3, #16]
 80109ee:	2b01      	cmp	r3, #1
 80109f0:	d106      	bne.n	8010a00 <_tx_mutex_get+0x50>
            {

                /* Remember the current priority of thread.  */
                mutex_ptr -> tx_mutex_original_priority =   thread_ptr -> tx_thread_priority;
 80109f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80109f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80109f6:	687b      	ldr	r3, [r7, #4]
 80109f8:	615a      	str	r2, [r3, #20]

                /* Setup the highest priority waiting thread.  */
                mutex_ptr -> tx_mutex_highest_priority_waiting =  ((UINT) TX_MAX_PRIORITIES);
 80109fa:	687b      	ldr	r3, [r7, #4]
 80109fc:	2220      	movs	r2, #32
 80109fe:	629a      	str	r2, [r3, #40]	; 0x28
            }

            /* Pickup next mutex pointer, which is the head of the list.  */
            next_mutex =  thread_ptr -> tx_thread_owned_mutex_list;
 8010a00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010a02:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8010a06:	62fb      	str	r3, [r7, #44]	; 0x2c

            /* Determine if this thread owns any other mutexes that have priority inheritance.  */
            if (next_mutex != TX_NULL)
 8010a08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010a0a:	2b00      	cmp	r3, #0
 8010a0c:	d00f      	beq.n	8010a2e <_tx_mutex_get+0x7e>
            {

                /* Non-empty list. Link up the mutex.  */

                /* Pickup the next and previous mutex pointer.  */
                previous_mutex =  next_mutex -> tx_mutex_owned_previous;
 8010a0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010a12:	62bb      	str	r3, [r7, #40]	; 0x28

                /* Place the owned mutex in the list.  */
                next_mutex -> tx_mutex_owned_previous =  mutex_ptr;
 8010a14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010a16:	687a      	ldr	r2, [r7, #4]
 8010a18:	631a      	str	r2, [r3, #48]	; 0x30
                previous_mutex -> tx_mutex_owned_next =  mutex_ptr;
 8010a1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010a1c:	687a      	ldr	r2, [r7, #4]
 8010a1e:	62da      	str	r2, [r3, #44]	; 0x2c

                /* Setup this mutex's next and previous created links.  */
                mutex_ptr -> tx_mutex_owned_previous =  previous_mutex;
 8010a20:	687b      	ldr	r3, [r7, #4]
 8010a22:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010a24:	631a      	str	r2, [r3, #48]	; 0x30
                mutex_ptr -> tx_mutex_owned_next =      next_mutex;
 8010a26:	687b      	ldr	r3, [r7, #4]
 8010a28:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010a2a:	62da      	str	r2, [r3, #44]	; 0x2c
 8010a2c:	e009      	b.n	8010a42 <_tx_mutex_get+0x92>
            }
            else
            {

                /* The owned mutex list is empty.  Add mutex to empty list.  */
                thread_ptr -> tx_thread_owned_mutex_list =     mutex_ptr;
 8010a2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010a30:	687a      	ldr	r2, [r7, #4]
 8010a32:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
                mutex_ptr -> tx_mutex_owned_next =             mutex_ptr;
 8010a36:	687b      	ldr	r3, [r7, #4]
 8010a38:	687a      	ldr	r2, [r7, #4]
 8010a3a:	62da      	str	r2, [r3, #44]	; 0x2c
                mutex_ptr -> tx_mutex_owned_previous =         mutex_ptr;
 8010a3c:	687b      	ldr	r3, [r7, #4]
 8010a3e:	687a      	ldr	r2, [r7, #4]
 8010a40:	631a      	str	r2, [r3, #48]	; 0x30
            }

            /* Increment the number of mutexes owned counter.  */
            thread_ptr -> tx_thread_owned_mutex_count++;
 8010a42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010a44:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8010a48:	1c5a      	adds	r2, r3, #1
 8010a4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010a4c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
 8010a50:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010a52:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8010a54:	69fb      	ldr	r3, [r7, #28]
 8010a56:	f383 8810 	msr	PRIMASK, r3
}
 8010a5a:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Return success.  */
        status =  TX_SUCCESS;
 8010a5c:	2300      	movs	r3, #0
 8010a5e:	647b      	str	r3, [r7, #68]	; 0x44
 8010a60:	e0a2      	b.n	8010ba8 <_tx_mutex_get+0x1f8>
    }

    /* Otherwise, see if the owning thread is trying to obtain the same mutex.  */
    else if (mutex_ptr -> tx_mutex_owner == thread_ptr)
 8010a62:	687b      	ldr	r3, [r7, #4]
 8010a64:	68db      	ldr	r3, [r3, #12]
 8010a66:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8010a68:	429a      	cmp	r2, r3
 8010a6a:	d10d      	bne.n	8010a88 <_tx_mutex_get+0xd8>
    {

        /* The owning thread is requesting the mutex again, just
           increment the ownership count.  */
        mutex_ptr -> tx_mutex_ownership_count++;
 8010a6c:	687b      	ldr	r3, [r7, #4]
 8010a6e:	689b      	ldr	r3, [r3, #8]
 8010a70:	1c5a      	adds	r2, r3, #1
 8010a72:	687b      	ldr	r3, [r7, #4]
 8010a74:	609a      	str	r2, [r3, #8]
 8010a76:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010a78:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8010a7a:	69bb      	ldr	r3, [r7, #24]
 8010a7c:	f383 8810 	msr	PRIMASK, r3
}
 8010a80:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Return success.  */
        status =  TX_SUCCESS;
 8010a82:	2300      	movs	r3, #0
 8010a84:	647b      	str	r3, [r7, #68]	; 0x44
 8010a86:	e08f      	b.n	8010ba8 <_tx_mutex_get+0x1f8>
    }
    else
    {

        /* Determine if the request specifies suspension.  */
        if (wait_option != TX_NO_WAIT)
 8010a88:	683b      	ldr	r3, [r7, #0]
 8010a8a:	2b00      	cmp	r3, #0
 8010a8c:	f000 8084 	beq.w	8010b98 <_tx_mutex_get+0x1e8>
        {

            /* Determine if the preempt disable flag is non-zero.  */
            if (_tx_thread_preempt_disable != ((UINT) 0))
 8010a90:	4b49      	ldr	r3, [pc, #292]	; (8010bb8 <_tx_mutex_get+0x208>)
 8010a92:	681b      	ldr	r3, [r3, #0]
 8010a94:	2b00      	cmp	r3, #0
 8010a96:	d008      	beq.n	8010aaa <_tx_mutex_get+0xfa>
 8010a98:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010a9a:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8010a9c:	697b      	ldr	r3, [r7, #20]
 8010a9e:	f383 8810 	msr	PRIMASK, r3
}
 8010aa2:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
                status =  TX_NOT_AVAILABLE;
 8010aa4:	231d      	movs	r3, #29
 8010aa6:	647b      	str	r3, [r7, #68]	; 0x44
 8010aa8:	e07e      	b.n	8010ba8 <_tx_mutex_get+0x1f8>
            {

                /* Prepare for suspension of this thread.  */

                /* Pickup the mutex owner.  */
                mutex_owner =  mutex_ptr -> tx_mutex_owner;
 8010aaa:	687b      	ldr	r3, [r7, #4]
 8010aac:	68db      	ldr	r3, [r3, #12]
 8010aae:	63bb      	str	r3, [r7, #56]	; 0x38
#endif
                }
#endif

                /* Setup cleanup routine pointer.  */
                thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_mutex_cleanup);
 8010ab0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010ab2:	4a42      	ldr	r2, [pc, #264]	; (8010bbc <_tx_mutex_get+0x20c>)
 8010ab4:	669a      	str	r2, [r3, #104]	; 0x68

                /* Setup cleanup information, i.e. this mutex control
                   block.  */
                thread_ptr -> tx_thread_suspend_control_block =  (VOID *) mutex_ptr;
 8010ab6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010ab8:	687a      	ldr	r2, [r7, #4]
 8010aba:	66da      	str	r2, [r3, #108]	; 0x6c

#ifndef TX_NOT_INTERRUPTABLE

                /* Increment the suspension sequence number, which is used to identify
                   this suspension event.  */
                thread_ptr -> tx_thread_suspension_sequence++;
 8010abc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010abe:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8010ac2:	1c5a      	adds	r2, r3, #1
 8010ac4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010ac6:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
#endif

                /* Setup suspension list.  */
                if (mutex_ptr -> tx_mutex_suspended_count == TX_NO_SUSPENSIONS)
 8010aca:	687b      	ldr	r3, [r7, #4]
 8010acc:	69db      	ldr	r3, [r3, #28]
 8010ace:	2b00      	cmp	r3, #0
 8010ad0:	d109      	bne.n	8010ae6 <_tx_mutex_get+0x136>
                {

                    /* No other threads are suspended.  Setup the head pointer and
                       just setup this threads pointers to itself.  */
                    mutex_ptr -> tx_mutex_suspension_list =         thread_ptr;
 8010ad2:	687b      	ldr	r3, [r7, #4]
 8010ad4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8010ad6:	619a      	str	r2, [r3, #24]
                    thread_ptr -> tx_thread_suspended_next =        thread_ptr;
 8010ad8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010ada:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8010adc:	671a      	str	r2, [r3, #112]	; 0x70
                    thread_ptr -> tx_thread_suspended_previous =    thread_ptr;
 8010ade:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010ae0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8010ae2:	675a      	str	r2, [r3, #116]	; 0x74
 8010ae4:	e011      	b.n	8010b0a <_tx_mutex_get+0x15a>
                }
                else
                {

                    /* This list is not NULL, add current thread to the end. */
                    next_thread =                                   mutex_ptr -> tx_mutex_suspension_list;
 8010ae6:	687b      	ldr	r3, [r7, #4]
 8010ae8:	699b      	ldr	r3, [r3, #24]
 8010aea:	637b      	str	r3, [r7, #52]	; 0x34
                    thread_ptr -> tx_thread_suspended_next =        next_thread;
 8010aec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010aee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010af0:	671a      	str	r2, [r3, #112]	; 0x70
                    previous_thread =                               next_thread -> tx_thread_suspended_previous;
 8010af2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010af4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010af6:	633b      	str	r3, [r7, #48]	; 0x30
                    thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 8010af8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010afa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010afc:	675a      	str	r2, [r3, #116]	; 0x74
                    previous_thread -> tx_thread_suspended_next =   thread_ptr;
 8010afe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010b00:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8010b02:	671a      	str	r2, [r3, #112]	; 0x70
                    next_thread -> tx_thread_suspended_previous =   thread_ptr;
 8010b04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010b06:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8010b08:	675a      	str	r2, [r3, #116]	; 0x74
                }

                /* Increment the suspension count.  */
                mutex_ptr -> tx_mutex_suspended_count++;
 8010b0a:	687b      	ldr	r3, [r7, #4]
 8010b0c:	69db      	ldr	r3, [r3, #28]
 8010b0e:	1c5a      	adds	r2, r3, #1
 8010b10:	687b      	ldr	r3, [r7, #4]
 8010b12:	61da      	str	r2, [r3, #28]

                /* Set the state to suspended.  */
                thread_ptr -> tx_thread_state =    TX_MUTEX_SUSP;
 8010b14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010b16:	220d      	movs	r2, #13
 8010b18:	631a      	str	r2, [r3, #48]	; 0x30
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Set the suspending flag.  */
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8010b1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010b1c:	2201      	movs	r2, #1
 8010b1e:	639a      	str	r2, [r3, #56]	; 0x38

                /* Setup the timeout period.  */
                thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 8010b20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010b22:	683a      	ldr	r2, [r7, #0]
 8010b24:	64da      	str	r2, [r3, #76]	; 0x4c

                /* Temporarily disable preemption.  */
                _tx_thread_preempt_disable++;
 8010b26:	4b24      	ldr	r3, [pc, #144]	; (8010bb8 <_tx_mutex_get+0x208>)
 8010b28:	681b      	ldr	r3, [r3, #0]
 8010b2a:	3301      	adds	r3, #1
 8010b2c:	4a22      	ldr	r2, [pc, #136]	; (8010bb8 <_tx_mutex_get+0x208>)
 8010b2e:	6013      	str	r3, [r2, #0]
 8010b30:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010b32:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8010b34:	693b      	ldr	r3, [r7, #16]
 8010b36:	f383 8810 	msr	PRIMASK, r3
}
 8010b3a:	bf00      	nop
                /* Restore interrupts.  */
                TX_RESTORE

                /* Determine if we need to raise the priority of the thread
                   owning the mutex.  */
                if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 8010b3c:	687b      	ldr	r3, [r7, #4]
 8010b3e:	691b      	ldr	r3, [r3, #16]
 8010b40:	2b01      	cmp	r3, #1
 8010b42:	d121      	bne.n	8010b88 <_tx_mutex_get+0x1d8>
                {

                    /* Determine if this is the highest priority to raise for this mutex.  */
                    if (mutex_ptr -> tx_mutex_highest_priority_waiting > thread_ptr -> tx_thread_priority)
 8010b44:	687b      	ldr	r3, [r7, #4]
 8010b46:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8010b48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010b4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010b4c:	429a      	cmp	r2, r3
 8010b4e:	d903      	bls.n	8010b58 <_tx_mutex_get+0x1a8>
                    {

                        /* Remember this priority.  */
                        mutex_ptr -> tx_mutex_highest_priority_waiting =  thread_ptr -> tx_thread_priority;
 8010b50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010b52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010b54:	687b      	ldr	r3, [r7, #4]
 8010b56:	629a      	str	r2, [r3, #40]	; 0x28
                    }

                    /* Determine if we have to update inherit priority level of the mutex owner.  */
                    if (thread_ptr -> tx_thread_priority < mutex_owner -> tx_thread_inherit_priority)
 8010b58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010b5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010b5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010b5e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8010b62:	429a      	cmp	r2, r3
 8010b64:	d204      	bcs.n	8010b70 <_tx_mutex_get+0x1c0>
                    {

                        /* Remember the new priority inheritance priority.  */
                        mutex_owner -> tx_thread_inherit_priority =  thread_ptr -> tx_thread_priority;
 8010b66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010b68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010b6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010b6c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
                    }

                    /* Priority inheritance is requested, check to see if the thread that owns the mutex is lower priority.  */
                    if (mutex_owner -> tx_thread_priority > thread_ptr -> tx_thread_priority)
 8010b70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010b72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010b74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010b76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010b78:	429a      	cmp	r2, r3
 8010b7a:	d905      	bls.n	8010b88 <_tx_mutex_get+0x1d8>
                    {

                        /* Yes, raise the suspended, owning thread's priority to that
                           of the current thread.  */
                        _tx_mutex_priority_change(mutex_owner, thread_ptr -> tx_thread_priority);
 8010b7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010b7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010b80:	4619      	mov	r1, r3
 8010b82:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8010b84:	f000 f8ce 	bl	8010d24 <_tx_mutex_priority_change>
#endif
                    }
                }

                /* Call actual thread suspension routine.  */
                _tx_thread_system_suspend(thread_ptr);
 8010b88:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010b8a:	f000 ffb7 	bl	8011afc <_tx_thread_system_suspend>
#endif
                /* Return the completion status.  */
                status =  thread_ptr -> tx_thread_suspend_status;
 8010b8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010b90:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010b94:	647b      	str	r3, [r7, #68]	; 0x44
 8010b96:	e007      	b.n	8010ba8 <_tx_mutex_get+0x1f8>
 8010b98:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010b9a:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8010b9c:	68fb      	ldr	r3, [r7, #12]
 8010b9e:	f383 8810 	msr	PRIMASK, r3
}
 8010ba2:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Immediate return, return error completion.  */
            status =  TX_NOT_AVAILABLE;
 8010ba4:	231d      	movs	r3, #29
 8010ba6:	647b      	str	r3, [r7, #68]	; 0x44
        }
    }

    /* Return completion status.  */
    return(status);
 8010ba8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8010baa:	4618      	mov	r0, r3
 8010bac:	3748      	adds	r7, #72	; 0x48
 8010bae:	46bd      	mov	sp, r7
 8010bb0:	bd80      	pop	{r7, pc}
 8010bb2:	bf00      	nop
 8010bb4:	20002f78 	.word	0x20002f78
 8010bb8:	20003010 	.word	0x20003010
 8010bbc:	0801077d 	.word	0x0801077d

08010bc0 <_tx_mutex_prioritize>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_mutex_prioritize(TX_MUTEX *mutex_ptr)
{
 8010bc0:	b580      	push	{r7, lr}
 8010bc2:	b092      	sub	sp, #72	; 0x48
 8010bc4:	af00      	add	r7, sp, #0
 8010bc6:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8010bc8:	f3ef 8310 	mrs	r3, PRIMASK
 8010bcc:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 8010bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    int_posture = __get_interrupt_posture();
 8010bd0:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSID i" : : : "memory");
 8010bd2:	b672      	cpsid	i
    return(int_posture);
 8010bd4:	6a3b      	ldr	r3, [r7, #32]
UINT            status;
#endif


    /* Disable interrupts.  */
    TX_DISABLE
 8010bd6:	647b      	str	r3, [r7, #68]	; 0x44

    /* Log this kernel call.  */
    TX_EL_MUTEX_PRIORITIZE_INSERT

    /* Pickup the suspended count.  */
    suspended_count =  mutex_ptr -> tx_mutex_suspended_count;
 8010bd8:	687b      	ldr	r3, [r7, #4]
 8010bda:	69db      	ldr	r3, [r3, #28]
 8010bdc:	637b      	str	r3, [r7, #52]	; 0x34

    /* Determine if there are fewer than 2 suspended threads.  */
    if (suspended_count < ((UINT) 2))
 8010bde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010be0:	2b01      	cmp	r3, #1
 8010be2:	d805      	bhi.n	8010bf0 <_tx_mutex_prioritize+0x30>
 8010be4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010be6:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8010be8:	69fb      	ldr	r3, [r7, #28]
 8010bea:	f383 8810 	msr	PRIMASK, r3
}
 8010bee:	e092      	b.n	8010d16 <_tx_mutex_prioritize+0x156>
        /* Restore interrupts.  */
        TX_RESTORE
    }

    /* Determine if there how many threads are suspended on this mutex.  */
    else if (suspended_count == ((UINT) 2))
 8010bf0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010bf2:	2b02      	cmp	r3, #2
 8010bf4:	d114      	bne.n	8010c20 <_tx_mutex_prioritize+0x60>
    {

        /* Pickup the head pointer and the next pointer.  */
        head_ptr =  mutex_ptr -> tx_mutex_suspension_list;
 8010bf6:	687b      	ldr	r3, [r7, #4]
 8010bf8:	699b      	ldr	r3, [r3, #24]
 8010bfa:	63bb      	str	r3, [r7, #56]	; 0x38
        next_thread =  head_ptr -> tx_thread_suspended_next;
 8010bfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010bfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010c00:	62fb      	str	r3, [r7, #44]	; 0x2c

        /* Determine if the next suspended thread has a higher priority.  */
        if ((next_thread -> tx_thread_priority) < (head_ptr -> tx_thread_priority))
 8010c02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010c04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010c06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010c08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010c0a:	429a      	cmp	r2, r3
 8010c0c:	d202      	bcs.n	8010c14 <_tx_mutex_prioritize+0x54>
        {

            /* Yes, move the list head to the next thread.  */
            mutex_ptr -> tx_mutex_suspension_list =  next_thread;
 8010c0e:	687b      	ldr	r3, [r7, #4]
 8010c10:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010c12:	619a      	str	r2, [r3, #24]
 8010c14:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010c16:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8010c18:	69bb      	ldr	r3, [r7, #24]
 8010c1a:	f383 8810 	msr	PRIMASK, r3
}
 8010c1e:	e07a      	b.n	8010d16 <_tx_mutex_prioritize+0x156>
    }
    else
    {

        /* Remember the suspension count and head pointer.  */
        head_ptr =   mutex_ptr -> tx_mutex_suspension_list;
 8010c20:	687b      	ldr	r3, [r7, #4]
 8010c22:	699b      	ldr	r3, [r3, #24]
 8010c24:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Default the highest priority thread to the thread at the front of the list.  */
        priority_thread_ptr =  head_ptr;
 8010c26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010c28:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Setup search pointer.  */
        thread_ptr =  priority_thread_ptr -> tx_thread_suspended_next;
 8010c2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010c2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010c2e:	643b      	str	r3, [r7, #64]	; 0x40

        /* Disable preemption.  */
        _tx_thread_preempt_disable++;
 8010c30:	4b3b      	ldr	r3, [pc, #236]	; (8010d20 <_tx_mutex_prioritize+0x160>)
 8010c32:	681b      	ldr	r3, [r3, #0]
 8010c34:	3301      	adds	r3, #1
 8010c36:	4a3a      	ldr	r2, [pc, #232]	; (8010d20 <_tx_mutex_prioritize+0x160>)
 8010c38:	6013      	str	r3, [r2, #0]

        /* Set the list changed flag to false.  */
        list_changed =  TX_FALSE;
 8010c3a:	2300      	movs	r3, #0
 8010c3c:	633b      	str	r3, [r7, #48]	; 0x30
        /* Search through the list to find the highest priority thread.  */
        do
        {

            /* Is the current thread higher priority?  */
            if (thread_ptr -> tx_thread_priority < priority_thread_ptr -> tx_thread_priority)
 8010c3e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010c40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010c42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010c44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010c46:	429a      	cmp	r2, r3
 8010c48:	d201      	bcs.n	8010c4e <_tx_mutex_prioritize+0x8e>
            {

                /* Yes, remember that this thread is the highest priority.  */
                priority_thread_ptr =  thread_ptr;
 8010c4a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010c4c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010c4e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010c50:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8010c52:	68fb      	ldr	r3, [r7, #12]
 8010c54:	f383 8810 	msr	PRIMASK, r3
}
 8010c58:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8010c5a:	f3ef 8310 	mrs	r3, PRIMASK
 8010c5e:	617b      	str	r3, [r7, #20]
    return(posture);
 8010c60:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 8010c62:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 8010c64:	b672      	cpsid	i
    return(int_posture);
 8010c66:	693b      	ldr	r3, [r7, #16]

            /* Restore interrupts temporarily.  */
            TX_RESTORE

            /* Disable interrupts again.  */
            TX_DISABLE
 8010c68:	647b      	str	r3, [r7, #68]	; 0x44

            /* Determine if any changes to the list have occurred while
               interrupts were enabled.  */

            /* Is the list head the same?  */
            if (head_ptr != mutex_ptr -> tx_mutex_suspension_list)
 8010c6a:	687b      	ldr	r3, [r7, #4]
 8010c6c:	699b      	ldr	r3, [r3, #24]
 8010c6e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010c70:	429a      	cmp	r2, r3
 8010c72:	d002      	beq.n	8010c7a <_tx_mutex_prioritize+0xba>
            {

                /* The list head has changed, set the list changed flag.  */
                list_changed =  TX_TRUE;
 8010c74:	2301      	movs	r3, #1
 8010c76:	633b      	str	r3, [r7, #48]	; 0x30
 8010c78:	e006      	b.n	8010c88 <_tx_mutex_prioritize+0xc8>
            }
            else
            {

                /* Is the suspended count the same?  */
                if (suspended_count != mutex_ptr -> tx_mutex_suspended_count)
 8010c7a:	687b      	ldr	r3, [r7, #4]
 8010c7c:	69db      	ldr	r3, [r3, #28]
 8010c7e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010c80:	429a      	cmp	r2, r3
 8010c82:	d001      	beq.n	8010c88 <_tx_mutex_prioritize+0xc8>
                {

                    /* The list head has changed, set the list changed flag.  */
                    list_changed =  TX_TRUE;
 8010c84:	2301      	movs	r3, #1
 8010c86:	633b      	str	r3, [r7, #48]	; 0x30
                }
            }

            /* Determine if the list has changed.  */
            if (list_changed == TX_FALSE)
 8010c88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c8a:	2b00      	cmp	r3, #0
 8010c8c:	d103      	bne.n	8010c96 <_tx_mutex_prioritize+0xd6>
            {

                /* Move the thread pointer to the next thread.  */
                thread_ptr =  thread_ptr -> tx_thread_suspended_next;
 8010c8e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010c90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010c92:	643b      	str	r3, [r7, #64]	; 0x40
 8010c94:	e00c      	b.n	8010cb0 <_tx_mutex_prioritize+0xf0>
            }
            else
            {

                /* Remember the suspension count and head pointer.  */
                head_ptr =   mutex_ptr -> tx_mutex_suspension_list;
 8010c96:	687b      	ldr	r3, [r7, #4]
 8010c98:	699b      	ldr	r3, [r3, #24]
 8010c9a:	63bb      	str	r3, [r7, #56]	; 0x38
                suspended_count =  mutex_ptr -> tx_mutex_suspended_count;
 8010c9c:	687b      	ldr	r3, [r7, #4]
 8010c9e:	69db      	ldr	r3, [r3, #28]
 8010ca0:	637b      	str	r3, [r7, #52]	; 0x34

                /* Default the highest priority thread to the thread at the front of the list.  */
                priority_thread_ptr =  head_ptr;
 8010ca2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010ca4:	63fb      	str	r3, [r7, #60]	; 0x3c

                /* Setup search pointer.  */
                thread_ptr =  priority_thread_ptr -> tx_thread_suspended_next;
 8010ca6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010ca8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010caa:	643b      	str	r3, [r7, #64]	; 0x40

                /* Reset the list changed flag.  */
                list_changed =  TX_FALSE;
 8010cac:	2300      	movs	r3, #0
 8010cae:	633b      	str	r3, [r7, #48]	; 0x30
            }

        } while (thread_ptr != head_ptr);
 8010cb0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8010cb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010cb4:	429a      	cmp	r2, r3
 8010cb6:	d1c2      	bne.n	8010c3e <_tx_mutex_prioritize+0x7e>

        /* Release preemption.  */
        _tx_thread_preempt_disable--;
 8010cb8:	4b19      	ldr	r3, [pc, #100]	; (8010d20 <_tx_mutex_prioritize+0x160>)
 8010cba:	681b      	ldr	r3, [r3, #0]
 8010cbc:	3b01      	subs	r3, #1
 8010cbe:	4a18      	ldr	r2, [pc, #96]	; (8010d20 <_tx_mutex_prioritize+0x160>)
 8010cc0:	6013      	str	r3, [r2, #0]

        /* Now determine if the highest priority thread is at the front
           of the list.  */
        if (priority_thread_ptr != head_ptr)
 8010cc2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8010cc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010cc6:	429a      	cmp	r2, r3
 8010cc8:	d01d      	beq.n	8010d06 <_tx_mutex_prioritize+0x146>
            /* No, we need to move the highest priority suspended thread to the
               front of the list.  */

            /* First, remove the highest priority thread by updating the
               adjacent suspended threads.  */
            next_thread =                                  priority_thread_ptr -> tx_thread_suspended_next;
 8010cca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010ccc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010cce:	62fb      	str	r3, [r7, #44]	; 0x2c
            previous_thread =                              priority_thread_ptr -> tx_thread_suspended_previous;
 8010cd0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010cd2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010cd4:	62bb      	str	r3, [r7, #40]	; 0x28
            next_thread -> tx_thread_suspended_previous =  previous_thread;
 8010cd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010cd8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010cda:	675a      	str	r2, [r3, #116]	; 0x74
            previous_thread -> tx_thread_suspended_next =  next_thread;
 8010cdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010cde:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010ce0:	671a      	str	r2, [r3, #112]	; 0x70

            /* Now, link the highest priority thread at the front of the list.  */
            previous_thread =                                      head_ptr -> tx_thread_suspended_previous;
 8010ce2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010ce4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010ce6:	62bb      	str	r3, [r7, #40]	; 0x28
            priority_thread_ptr -> tx_thread_suspended_next =      head_ptr;
 8010ce8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010cea:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010cec:	671a      	str	r2, [r3, #112]	; 0x70
            priority_thread_ptr -> tx_thread_suspended_previous =  previous_thread;
 8010cee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010cf0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010cf2:	675a      	str	r2, [r3, #116]	; 0x74
            previous_thread -> tx_thread_suspended_next =          priority_thread_ptr;
 8010cf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010cf6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8010cf8:	671a      	str	r2, [r3, #112]	; 0x70
            head_ptr -> tx_thread_suspended_previous =             priority_thread_ptr;
 8010cfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010cfc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8010cfe:	675a      	str	r2, [r3, #116]	; 0x74

            /* Move the list head pointer to the highest priority suspended thread.  */
            mutex_ptr -> tx_mutex_suspension_list =  priority_thread_ptr;
 8010d00:	687b      	ldr	r3, [r7, #4]
 8010d02:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8010d04:	619a      	str	r2, [r3, #24]
 8010d06:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010d08:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8010d0a:	68bb      	ldr	r3, [r7, #8]
 8010d0c:	f383 8810 	msr	PRIMASK, r3
}
 8010d10:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 8010d12:	f000 fdb9 	bl	8011888 <_tx_thread_system_preempt_check>
    /* Return completion status.  */
    return(status);
#else

    /* Return successful completion.  */
    return(TX_SUCCESS);
 8010d16:	2300      	movs	r3, #0
#endif
}
 8010d18:	4618      	mov	r0, r3
 8010d1a:	3748      	adds	r7, #72	; 0x48
 8010d1c:	46bd      	mov	sp, r7
 8010d1e:	bd80      	pop	{r7, pc}
 8010d20:	20003010 	.word	0x20003010

08010d24 <_tx_mutex_priority_change>:
/*                                            priority rather than next,  */
/*                                            resulting in version 6.1.6  */
/*                                                                        */
/**************************************************************************/
VOID  _tx_mutex_priority_change(TX_THREAD *thread_ptr, UINT new_priority)
{
 8010d24:	b580      	push	{r7, lr}
 8010d26:	b090      	sub	sp, #64	; 0x40
 8010d28:	af00      	add	r7, sp, #0
 8010d2a:	6078      	str	r0, [r7, #4]
 8010d2c:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8010d2e:	f3ef 8310 	mrs	r3, PRIMASK
 8010d32:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 8010d34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 8010d36:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 8010d38:	b672      	cpsid	i
    return(int_posture);
 8010d3a:	6abb      	ldr	r3, [r7, #40]	; 0x28


#ifndef TX_NOT_INTERRUPTABLE

    /* Lockout interrupts while the thread is being suspended.  */
    TX_DISABLE
 8010d3c:	63fb      	str	r3, [r7, #60]	; 0x3c
#endif

    /* Determine if this thread is currently ready.  */
    if (thread_ptr -> tx_thread_state != TX_READY)
 8010d3e:	687b      	ldr	r3, [r7, #4]
 8010d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010d42:	2b00      	cmp	r3, #0
 8010d44:	d017      	beq.n	8010d76 <_tx_mutex_priority_change+0x52>
    {

        /* Change thread priority to the new mutex priority-inheritance priority.  */
        thread_ptr -> tx_thread_priority =  new_priority;
 8010d46:	687b      	ldr	r3, [r7, #4]
 8010d48:	683a      	ldr	r2, [r7, #0]
 8010d4a:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Determine how to setup the thread's preemption-threshold.  */
        if (thread_ptr -> tx_thread_user_preempt_threshold < new_priority)
 8010d4c:	687b      	ldr	r3, [r7, #4]
 8010d4e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8010d52:	683a      	ldr	r2, [r7, #0]
 8010d54:	429a      	cmp	r2, r3
 8010d56:	d905      	bls.n	8010d64 <_tx_mutex_priority_change+0x40>
        {

            /* Change thread preemption-threshold to the user's preemption-threshold.  */
            thread_ptr -> tx_thread_preempt_threshold =  thread_ptr -> tx_thread_user_preempt_threshold;
 8010d58:	687b      	ldr	r3, [r7, #4]
 8010d5a:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8010d5e:	687b      	ldr	r3, [r7, #4]
 8010d60:	63da      	str	r2, [r3, #60]	; 0x3c
 8010d62:	e002      	b.n	8010d6a <_tx_mutex_priority_change+0x46>
        }
        else
        {

            /* Change the thread preemption-threshold to the new threshold.  */
            thread_ptr -> tx_thread_preempt_threshold =  new_priority;
 8010d64:	687b      	ldr	r3, [r7, #4]
 8010d66:	683a      	ldr	r2, [r7, #0]
 8010d68:	63da      	str	r2, [r3, #60]	; 0x3c
 8010d6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010d6c:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8010d6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d70:	f383 8810 	msr	PRIMASK, r3
}
 8010d74:	e089      	b.n	8010e8a <_tx_mutex_priority_change+0x166>
    }
    else
    {

        /* Pickup the next thread to execute.  */
        execute_ptr =  _tx_thread_execute_ptr;
 8010d76:	4b47      	ldr	r3, [pc, #284]	; (8010e94 <_tx_mutex_priority_change+0x170>)
 8010d78:	681b      	ldr	r3, [r3, #0]
 8010d7a:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Save the original priority.  */
        original_priority =  thread_ptr -> tx_thread_priority;
 8010d7c:	687b      	ldr	r3, [r7, #4]
 8010d7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010d80:	637b      	str	r3, [r7, #52]	; 0x34
        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
#else

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable =  _tx_thread_preempt_disable + ((UINT) 2);
 8010d82:	4b45      	ldr	r3, [pc, #276]	; (8010e98 <_tx_mutex_priority_change+0x174>)
 8010d84:	681b      	ldr	r3, [r3, #0]
 8010d86:	3302      	adds	r3, #2
 8010d88:	4a43      	ldr	r2, [pc, #268]	; (8010e98 <_tx_mutex_priority_change+0x174>)
 8010d8a:	6013      	str	r3, [r2, #0]

        /* Set the state to priority change.  */
        thread_ptr -> tx_thread_state =    TX_PRIORITY_CHANGE;
 8010d8c:	687b      	ldr	r3, [r7, #4]
 8010d8e:	220e      	movs	r2, #14
 8010d90:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the suspending flag. */
        thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8010d92:	687b      	ldr	r3, [r7, #4]
 8010d94:	2201      	movs	r2, #1
 8010d96:	639a      	str	r2, [r3, #56]	; 0x38

        /* Setup the timeout period.  */
        thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 8010d98:	687b      	ldr	r3, [r7, #4]
 8010d9a:	2200      	movs	r2, #0
 8010d9c:	64da      	str	r2, [r3, #76]	; 0x4c
 8010d9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010da0:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8010da2:	69bb      	ldr	r3, [r7, #24]
 8010da4:	f383 8810 	msr	PRIMASK, r3
}
 8010da8:	bf00      	nop
        /* Restore interrupts.  */
        TX_RESTORE

        /* The thread is ready and must first be removed from the list.  Call the
           system suspend function to accomplish this.  */
        _tx_thread_system_suspend(thread_ptr);
 8010daa:	6878      	ldr	r0, [r7, #4]
 8010dac:	f000 fea6 	bl	8011afc <_tx_thread_system_suspend>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8010db0:	f3ef 8310 	mrs	r3, PRIMASK
 8010db4:	623b      	str	r3, [r7, #32]
    return(posture);
 8010db6:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 8010db8:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 8010dba:	b672      	cpsid	i
    return(int_posture);
 8010dbc:	69fb      	ldr	r3, [r7, #28]

        /* Disable interrupts.  */
        TX_DISABLE
 8010dbe:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* At this point, the preempt disable flag is still set, so we still have
           protection against all preemption.  */

        /* Change thread priority to the new mutex priority-inheritance priority.  */
        thread_ptr -> tx_thread_priority =  new_priority;
 8010dc0:	687b      	ldr	r3, [r7, #4]
 8010dc2:	683a      	ldr	r2, [r7, #0]
 8010dc4:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Determine how to setup the thread's preemption-threshold.  */
        if (thread_ptr -> tx_thread_user_preempt_threshold < new_priority)
 8010dc6:	687b      	ldr	r3, [r7, #4]
 8010dc8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8010dcc:	683a      	ldr	r2, [r7, #0]
 8010dce:	429a      	cmp	r2, r3
 8010dd0:	d905      	bls.n	8010dde <_tx_mutex_priority_change+0xba>
        {

            /* Change thread preemption-threshold to the user's preemption-threshold.  */
            thread_ptr -> tx_thread_preempt_threshold =  thread_ptr -> tx_thread_user_preempt_threshold;
 8010dd2:	687b      	ldr	r3, [r7, #4]
 8010dd4:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8010dd8:	687b      	ldr	r3, [r7, #4]
 8010dda:	63da      	str	r2, [r3, #60]	; 0x3c
 8010ddc:	e002      	b.n	8010de4 <_tx_mutex_priority_change+0xc0>
        }
        else
        {

            /* Change the thread preemption-threshold to the new threshold.  */
            thread_ptr -> tx_thread_preempt_threshold =  new_priority;
 8010dde:	687b      	ldr	r3, [r7, #4]
 8010de0:	683a      	ldr	r2, [r7, #0]
 8010de2:	63da      	str	r2, [r3, #60]	; 0x3c
 8010de4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010de6:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8010de8:	68fb      	ldr	r3, [r7, #12]
 8010dea:	f383 8810 	msr	PRIMASK, r3
}
 8010dee:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Resume the thread with the new priority.  */
        _tx_thread_system_resume(thread_ptr);
 8010df0:	6878      	ldr	r0, [r7, #4]
 8010df2:	f000 fd83 	bl	80118fc <_tx_thread_system_resume>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8010df6:	f3ef 8310 	mrs	r3, PRIMASK
 8010dfa:	617b      	str	r3, [r7, #20]
    return(posture);
 8010dfc:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 8010dfe:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 8010e00:	b672      	cpsid	i
    return(int_posture);
 8010e02:	693b      	ldr	r3, [r7, #16]
        TX_MUTEX_PRIORITY_CHANGE_EXTENSION

#ifndef TX_NOT_INTERRUPTABLE

        /* Disable interrupts.  */
        TX_DISABLE
 8010e04:	63fb      	str	r3, [r7, #60]	; 0x3c
#endif

        /* Pickup the next thread to execute.  */
        next_execute_ptr =  _tx_thread_execute_ptr;
 8010e06:	4b23      	ldr	r3, [pc, #140]	; (8010e94 <_tx_mutex_priority_change+0x170>)
 8010e08:	681b      	ldr	r3, [r3, #0]
 8010e0a:	633b      	str	r3, [r7, #48]	; 0x30

        /* Determine if this thread is not the next thread to execute.  */
        if (thread_ptr != next_execute_ptr)
 8010e0c:	687a      	ldr	r2, [r7, #4]
 8010e0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e10:	429a      	cmp	r2, r3
 8010e12:	d034      	beq.n	8010e7e <_tx_mutex_priority_change+0x15a>
        {

            /* Make sure the thread is still ready.  */
            if (thread_ptr -> tx_thread_state == TX_READY)
 8010e14:	687b      	ldr	r3, [r7, #4]
 8010e16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010e18:	2b00      	cmp	r3, #0
 8010e1a:	d130      	bne.n	8010e7e <_tx_mutex_priority_change+0x15a>
            {

                /* Now check and see if this thread has an equal or higher priority.  */
                if (thread_ptr -> tx_thread_priority <= next_execute_ptr -> tx_thread_priority)
 8010e1c:	687b      	ldr	r3, [r7, #4]
 8010e1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010e20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010e24:	429a      	cmp	r2, r3
 8010e26:	d811      	bhi.n	8010e4c <_tx_mutex_priority_change+0x128>
                {

                    /* Now determine if this thread was the previously executing thread.  */
                    if (thread_ptr == execute_ptr)
 8010e28:	687a      	ldr	r2, [r7, #4]
 8010e2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010e2c:	429a      	cmp	r2, r3
 8010e2e:	d126      	bne.n	8010e7e <_tx_mutex_priority_change+0x15a>

                        /* Yes, this thread was previously executing before we temporarily suspended and resumed
                           it in order to change the priority. A lower or same priority thread cannot be the next thread
                           to execute in this case since this thread really didn't suspend.  Simply reset the execute
                           pointer to this thread.  */
                        _tx_thread_execute_ptr =  thread_ptr;
 8010e30:	4a18      	ldr	r2, [pc, #96]	; (8010e94 <_tx_mutex_priority_change+0x170>)
 8010e32:	687b      	ldr	r3, [r7, #4]
 8010e34:	6013      	str	r3, [r2, #0]

                        /* Determine if we moved to a lower priority. If so, move the thread to the front of its priority list.  */
                        if (original_priority < new_priority)
 8010e36:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010e38:	683b      	ldr	r3, [r7, #0]
 8010e3a:	429a      	cmp	r2, r3
 8010e3c:	d21f      	bcs.n	8010e7e <_tx_mutex_priority_change+0x15a>
                        {

                            /* Ensure that this thread is placed at the front of the priority list.  */
                            _tx_thread_priority_list[thread_ptr -> tx_thread_priority] =  thread_ptr;
 8010e3e:	687b      	ldr	r3, [r7, #4]
 8010e40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010e42:	4916      	ldr	r1, [pc, #88]	; (8010e9c <_tx_mutex_priority_change+0x178>)
 8010e44:	687a      	ldr	r2, [r7, #4]
 8010e46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8010e4a:	e018      	b.n	8010e7e <_tx_mutex_priority_change+0x15a>
                }
                else
                {

                    /* Now determine if this thread's preemption-threshold needs to be enforced.  */
                    if (thread_ptr -> tx_thread_preempt_threshold < thread_ptr -> tx_thread_priority)
 8010e4c:	687b      	ldr	r3, [r7, #4]
 8010e4e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8010e50:	687b      	ldr	r3, [r7, #4]
 8010e52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010e54:	429a      	cmp	r2, r3
 8010e56:	d212      	bcs.n	8010e7e <_tx_mutex_priority_change+0x15a>
                    {

                        /* Yes, preemption-threshold is in force for this thread. */

                        /* Compare the next thread to execute thread's priority against the thread's preemption-threshold.  */
                        if (thread_ptr -> tx_thread_preempt_threshold <= next_execute_ptr -> tx_thread_priority)
 8010e58:	687b      	ldr	r3, [r7, #4]
 8010e5a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8010e5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010e60:	429a      	cmp	r2, r3
 8010e62:	d80c      	bhi.n	8010e7e <_tx_mutex_priority_change+0x15a>
                        {

                            /* We must swap execute pointers to enforce the preemption-threshold of a thread coming out of
                               priority inheritance.  */
                            _tx_thread_execute_ptr =  thread_ptr;
 8010e64:	4a0b      	ldr	r2, [pc, #44]	; (8010e94 <_tx_mutex_priority_change+0x170>)
 8010e66:	687b      	ldr	r3, [r7, #4]
 8010e68:	6013      	str	r3, [r2, #0]

                            /* Determine if we moved to a lower priority. If so, move the thread to the front of its priority list.  */
                            if (original_priority < new_priority)
 8010e6a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010e6c:	683b      	ldr	r3, [r7, #0]
 8010e6e:	429a      	cmp	r2, r3
 8010e70:	d205      	bcs.n	8010e7e <_tx_mutex_priority_change+0x15a>
                            {

                                /* Ensure that this thread is placed at the front of the priority list.  */
                                _tx_thread_priority_list[thread_ptr -> tx_thread_priority] =  thread_ptr;
 8010e72:	687b      	ldr	r3, [r7, #4]
 8010e74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010e76:	4909      	ldr	r1, [pc, #36]	; (8010e9c <_tx_mutex_priority_change+0x178>)
 8010e78:	687a      	ldr	r2, [r7, #4]
 8010e7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8010e7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010e80:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8010e82:	68bb      	ldr	r3, [r7, #8]
 8010e84:	f383 8810 	msr	PRIMASK, r3
}
 8010e88:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE
#endif
    }
}
 8010e8a:	bf00      	nop
 8010e8c:	3740      	adds	r7, #64	; 0x40
 8010e8e:	46bd      	mov	sp, r7
 8010e90:	bd80      	pop	{r7, pc}
 8010e92:	bf00      	nop
 8010e94:	20002f7c 	.word	0x20002f7c
 8010e98:	20003010 	.word	0x20003010
 8010e9c:	20002f90 	.word	0x20002f90

08010ea0 <_tx_mutex_put>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_mutex_put(TX_MUTEX *mutex_ptr)
{
 8010ea0:	b580      	push	{r7, lr}
 8010ea2:	b0a6      	sub	sp, #152	; 0x98
 8010ea4:	af00      	add	r7, sp, #0
 8010ea6:	6078      	str	r0, [r7, #4]
TX_THREAD       *suspended_thread;
UINT            inheritance_priority;


    /* Setup status to indicate the processing is not complete.  */
    status =  TX_NOT_DONE;
 8010ea8:	2320      	movs	r3, #32
 8010eaa:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8010eae:	f3ef 8310 	mrs	r3, PRIMASK
 8010eb2:	65fb      	str	r3, [r7, #92]	; 0x5c
    return(posture);
 8010eb4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    int_posture = __get_interrupt_posture();
 8010eb6:	65bb      	str	r3, [r7, #88]	; 0x58
    __asm__ volatile ("CPSID i" : : : "memory");
 8010eb8:	b672      	cpsid	i
    return(int_posture);
 8010eba:	6dbb      	ldr	r3, [r7, #88]	; 0x58

    /* Disable interrupts to put an instance back to the mutex.  */
    TX_DISABLE
 8010ebc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

    /* Log this kernel call.  */
    TX_EL_MUTEX_PUT_INSERT

    /* Determine if this mutex is owned.  */
    if (mutex_ptr -> tx_mutex_ownership_count != ((UINT) 0))
 8010ec0:	687b      	ldr	r3, [r7, #4]
 8010ec2:	689b      	ldr	r3, [r3, #8]
 8010ec4:	2b00      	cmp	r3, #0
 8010ec6:	f000 81ff 	beq.w	80112c8 <_tx_mutex_put+0x428>
    {

        /* Pickup the owning thread pointer.  */
        thread_ptr =  mutex_ptr -> tx_mutex_owner;
 8010eca:	687b      	ldr	r3, [r7, #4]
 8010ecc:	68db      	ldr	r3, [r3, #12]
 8010ece:	67fb      	str	r3, [r7, #124]	; 0x7c

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(current_thread)
 8010ed0:	4ba3      	ldr	r3, [pc, #652]	; (8011160 <_tx_mutex_put+0x2c0>)
 8010ed2:	681b      	ldr	r3, [r3, #0]
 8010ed4:	67bb      	str	r3, [r7, #120]	; 0x78

        /* Check to see if the mutex is owned by the calling thread.  */
        if (mutex_ptr -> tx_mutex_owner != current_thread)
 8010ed6:	687b      	ldr	r3, [r7, #4]
 8010ed8:	68db      	ldr	r3, [r3, #12]
 8010eda:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8010edc:	429a      	cmp	r2, r3
 8010ede:	d00d      	beq.n	8010efc <_tx_mutex_put+0x5c>
        {

            /* Determine if the preempt disable flag is set, indicating that
               the caller is not the application but from ThreadX. In such
               cases, the thread mutex owner does not need to match.  */
            if (_tx_thread_preempt_disable == ((UINT) 0))
 8010ee0:	4ba0      	ldr	r3, [pc, #640]	; (8011164 <_tx_mutex_put+0x2c4>)
 8010ee2:	681b      	ldr	r3, [r3, #0]
 8010ee4:	2b00      	cmp	r3, #0
 8010ee6:	d109      	bne.n	8010efc <_tx_mutex_put+0x5c>
 8010ee8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010eec:	657b      	str	r3, [r7, #84]	; 0x54
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8010eee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010ef0:	f383 8810 	msr	PRIMASK, r3
}
 8010ef4:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Caller does not own the mutex.  */
                status =  TX_NOT_OWNED;
 8010ef6:	231e      	movs	r3, #30
 8010ef8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
            }
        }

        /* Determine if we should continue.  */
        if (status == TX_NOT_DONE)
 8010efc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8010f00:	2b20      	cmp	r3, #32
 8010f02:	f040 81eb 	bne.w	80112dc <_tx_mutex_put+0x43c>
        {

            /* Decrement the mutex ownership count.  */
            mutex_ptr -> tx_mutex_ownership_count--;
 8010f06:	687b      	ldr	r3, [r7, #4]
 8010f08:	689b      	ldr	r3, [r3, #8]
 8010f0a:	1e5a      	subs	r2, r3, #1
 8010f0c:	687b      	ldr	r3, [r7, #4]
 8010f0e:	609a      	str	r2, [r3, #8]

            /* Determine if the mutex is still owned by the current thread.  */
            if (mutex_ptr -> tx_mutex_ownership_count != ((UINT) 0))
 8010f10:	687b      	ldr	r3, [r7, #4]
 8010f12:	689b      	ldr	r3, [r3, #8]
 8010f14:	2b00      	cmp	r3, #0
 8010f16:	d00a      	beq.n	8010f2e <_tx_mutex_put+0x8e>
 8010f18:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010f1c:	653b      	str	r3, [r7, #80]	; 0x50
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8010f1e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010f20:	f383 8810 	msr	PRIMASK, r3
}
 8010f24:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Mutex is still owned, just return successful status.  */
                status =  TX_SUCCESS;
 8010f26:	2300      	movs	r3, #0
 8010f28:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8010f2c:	e1d6      	b.n	80112dc <_tx_mutex_put+0x43c>
            }
            else
            {

                /* Check for a NULL thread pointer, which can only happen during initialization.   */
                if (thread_ptr == TX_NULL)
 8010f2e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8010f30:	2b00      	cmp	r3, #0
 8010f32:	d10a      	bne.n	8010f4a <_tx_mutex_put+0xaa>
 8010f34:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010f38:	64fb      	str	r3, [r7, #76]	; 0x4c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8010f3a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010f3c:	f383 8810 	msr	PRIMASK, r3
}
 8010f40:	bf00      	nop

                    /* Restore interrupts.  */
                    TX_RESTORE

                    /* Mutex is now available, return successful status.  */
                    status =  TX_SUCCESS;
 8010f42:	2300      	movs	r3, #0
 8010f44:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8010f48:	e1c8      	b.n	80112dc <_tx_mutex_put+0x43c>
                    /* The mutex is now available.   */

                    /* Remove this mutex from the owned mutex list.  */

                    /* Decrement the ownership count.  */
                    thread_ptr -> tx_thread_owned_mutex_count--;
 8010f4a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8010f4c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8010f50:	1e5a      	subs	r2, r3, #1
 8010f52:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8010f54:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

                    /* Determine if this mutex was the only one on the list.  */
                    if (thread_ptr -> tx_thread_owned_mutex_count == ((UINT) 0))
 8010f58:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8010f5a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8010f5e:	2b00      	cmp	r3, #0
 8010f60:	d104      	bne.n	8010f6c <_tx_mutex_put+0xcc>
                    {

                        /* Yes, the list is empty.  Simply set the head pointer to NULL.  */
                        thread_ptr -> tx_thread_owned_mutex_list =  TX_NULL;
 8010f62:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8010f64:	2200      	movs	r2, #0
 8010f66:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
 8010f6a:	e019      	b.n	8010fa0 <_tx_mutex_put+0x100>
                    {

                        /* No, there are more mutexes on the list.  */

                        /* Link-up the neighbors.  */
                        next_mutex =                             mutex_ptr -> tx_mutex_owned_next;
 8010f6c:	687b      	ldr	r3, [r7, #4]
 8010f6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010f70:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
                        previous_mutex =                         mutex_ptr -> tx_mutex_owned_previous;
 8010f74:	687b      	ldr	r3, [r7, #4]
 8010f76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010f78:	677b      	str	r3, [r7, #116]	; 0x74
                        next_mutex -> tx_mutex_owned_previous =  previous_mutex;
 8010f7a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8010f7e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8010f80:	631a      	str	r2, [r3, #48]	; 0x30
                        previous_mutex -> tx_mutex_owned_next =  next_mutex;
 8010f82:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010f84:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8010f88:	62da      	str	r2, [r3, #44]	; 0x2c

                        /* See if we have to update the created list head pointer.  */
                        if (thread_ptr -> tx_thread_owned_mutex_list == mutex_ptr)
 8010f8a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8010f8c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8010f90:	687a      	ldr	r2, [r7, #4]
 8010f92:	429a      	cmp	r2, r3
 8010f94:	d104      	bne.n	8010fa0 <_tx_mutex_put+0x100>
                        {

                            /* Yes, move the head pointer to the next link. */
                            thread_ptr -> tx_thread_owned_mutex_list =  next_mutex;
 8010f96:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8010f98:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8010f9c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
                        }
                    }

                    /* Determine if the simple, non-suspension, non-priority inheritance case is present.  */
                    if (mutex_ptr -> tx_mutex_suspension_list == TX_NULL)
 8010fa0:	687b      	ldr	r3, [r7, #4]
 8010fa2:	699b      	ldr	r3, [r3, #24]
 8010fa4:	2b00      	cmp	r3, #0
 8010fa6:	d110      	bne.n	8010fca <_tx_mutex_put+0x12a>
                    {

                        /* Is this a priority inheritance mutex?  */
                        if (mutex_ptr -> tx_mutex_inherit == TX_FALSE)
 8010fa8:	687b      	ldr	r3, [r7, #4]
 8010faa:	691b      	ldr	r3, [r3, #16]
 8010fac:	2b00      	cmp	r3, #0
 8010fae:	d10c      	bne.n	8010fca <_tx_mutex_put+0x12a>
                        {

                            /* Yes, we are done - set the mutex owner to NULL.   */
                            mutex_ptr -> tx_mutex_owner =  TX_NULL;
 8010fb0:	687b      	ldr	r3, [r7, #4]
 8010fb2:	2200      	movs	r2, #0
 8010fb4:	60da      	str	r2, [r3, #12]
 8010fb6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010fba:	64bb      	str	r3, [r7, #72]	; 0x48
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8010fbc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010fbe:	f383 8810 	msr	PRIMASK, r3
}
 8010fc2:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Mutex is now available, return successful status.  */
                            status =  TX_SUCCESS;
 8010fc4:	2300      	movs	r3, #0
 8010fc6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                        }
                    }

                    /* Determine if the processing is complete.  */
                    if (status == TX_NOT_DONE)
 8010fca:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8010fce:	2b20      	cmp	r3, #32
 8010fd0:	f040 8184 	bne.w	80112dc <_tx_mutex_put+0x43c>
                    {

                        /* Initialize original owner and thread priority.  */
                        old_owner =      TX_NULL;
 8010fd4:	2300      	movs	r3, #0
 8010fd6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
                        old_priority =   thread_ptr -> tx_thread_user_priority;
 8010fda:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8010fdc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8010fe0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

                        /* Does this mutex support priority inheritance?  */
                        if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 8010fe4:	687b      	ldr	r3, [r7, #4]
 8010fe6:	691b      	ldr	r3, [r3, #16]
 8010fe8:	2b01      	cmp	r3, #1
 8010fea:	d155      	bne.n	8011098 <_tx_mutex_put+0x1f8>
                        {

#ifndef TX_NOT_INTERRUPTABLE

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 8010fec:	4b5d      	ldr	r3, [pc, #372]	; (8011164 <_tx_mutex_put+0x2c4>)
 8010fee:	681b      	ldr	r3, [r3, #0]
 8010ff0:	3301      	adds	r3, #1
 8010ff2:	4a5c      	ldr	r2, [pc, #368]	; (8011164 <_tx_mutex_put+0x2c4>)
 8010ff4:	6013      	str	r3, [r2, #0]
 8010ff6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010ffa:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8010ffc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010ffe:	f383 8810 	msr	PRIMASK, r3
}
 8011002:	bf00      	nop
                            /* Restore interrupts.  */
                            TX_RESTORE
#endif

                            /* Default the inheritance priority to disabled.  */
                            inheritance_priority =  ((UINT) TX_MAX_PRIORITIES);
 8011004:	2320      	movs	r3, #32
 8011006:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

                            /* Search the owned mutexes for this thread to determine the highest priority for this
                               former mutex owner to return to.  */
                            next_mutex =  thread_ptr -> tx_thread_owned_mutex_list;
 801100a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801100c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8011010:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
                            while (next_mutex != TX_NULL)
 8011014:	e01f      	b.n	8011056 <_tx_mutex_put+0x1b6>
                            {

                                /* Does this mutex support priority inheritance?  */
                                if (next_mutex -> tx_mutex_inherit == TX_TRUE)
 8011016:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801101a:	691b      	ldr	r3, [r3, #16]
 801101c:	2b01      	cmp	r3, #1
 801101e:	d10b      	bne.n	8011038 <_tx_mutex_put+0x198>
                                {

                                    /* Determine if highest priority field of the mutex is higher than the priority to
                                       restore.  */
                                    if (next_mutex -> tx_mutex_highest_priority_waiting < inheritance_priority)
 8011020:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8011024:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011026:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 801102a:	429a      	cmp	r2, r3
 801102c:	d904      	bls.n	8011038 <_tx_mutex_put+0x198>
                                    {

                                        /* Use this priority to return releasing thread to.  */
                                        inheritance_priority =   next_mutex -> tx_mutex_highest_priority_waiting;
 801102e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8011032:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011034:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                                    }
                                }

                                /* Move mutex pointer to the next mutex in the list.  */
                                next_mutex =  next_mutex -> tx_mutex_owned_next;
 8011038:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801103c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801103e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

                                /* Are we at the end of the list?  */
                                if (next_mutex == thread_ptr -> tx_thread_owned_mutex_list)
 8011042:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8011044:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8011048:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 801104c:	429a      	cmp	r2, r3
 801104e:	d102      	bne.n	8011056 <_tx_mutex_put+0x1b6>
                                {

                                    /* Yes, set the next mutex to NULL.  */
                                    next_mutex =  TX_NULL;
 8011050:	2300      	movs	r3, #0
 8011052:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
                            while (next_mutex != TX_NULL)
 8011056:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801105a:	2b00      	cmp	r3, #0
 801105c:	d1db      	bne.n	8011016 <_tx_mutex_put+0x176>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801105e:	f3ef 8310 	mrs	r3, PRIMASK
 8011062:	643b      	str	r3, [r7, #64]	; 0x40
    return(posture);
 8011064:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    int_posture = __get_interrupt_posture();
 8011066:	63fb      	str	r3, [r7, #60]	; 0x3c
    __asm__ volatile ("CPSID i" : : : "memory");
 8011068:	b672      	cpsid	i
    return(int_posture);
 801106a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                            }

#ifndef TX_NOT_INTERRUPTABLE

                            /* Disable interrupts.  */
                            TX_DISABLE
 801106c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

                            /* Undo the temporarily preemption disable.  */
                            _tx_thread_preempt_disable--;
 8011070:	4b3c      	ldr	r3, [pc, #240]	; (8011164 <_tx_mutex_put+0x2c4>)
 8011072:	681b      	ldr	r3, [r3, #0]
 8011074:	3b01      	subs	r3, #1
 8011076:	4a3b      	ldr	r2, [pc, #236]	; (8011164 <_tx_mutex_put+0x2c4>)
 8011078:	6013      	str	r3, [r2, #0]
#endif

                            /* Set the inherit priority to that of the highest priority thread waiting on the mutex.  */
                            thread_ptr -> tx_thread_inherit_priority =  inheritance_priority;
 801107a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801107c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8011080:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

                            /* Determine if the inheritance priority is less than the default old priority.  */
                            if (inheritance_priority < old_priority)
 8011084:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8011088:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801108c:	429a      	cmp	r2, r3
 801108e:	d203      	bcs.n	8011098 <_tx_mutex_put+0x1f8>
                            {

                                /* Yes, update the old priority.  */
                                old_priority =  inheritance_priority;
 8011090:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8011094:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                            }
                        }

                        /* Determine if priority inheritance is in effect and there are one or more
                           threads suspended on the mutex.  */
                        if (mutex_ptr -> tx_mutex_suspended_count > ((UINT) 1))
 8011098:	687b      	ldr	r3, [r7, #4]
 801109a:	69db      	ldr	r3, [r3, #28]
 801109c:	2b01      	cmp	r3, #1
 801109e:	d920      	bls.n	80110e2 <_tx_mutex_put+0x242>
                        {

                            /* Is priority inheritance in effect?  */
                            if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 80110a0:	687b      	ldr	r3, [r7, #4]
 80110a2:	691b      	ldr	r3, [r3, #16]
 80110a4:	2b01      	cmp	r3, #1
 80110a6:	d11c      	bne.n	80110e2 <_tx_mutex_put+0x242>
                                   at the front of the suspension list.  */

#ifndef TX_NOT_INTERRUPTABLE

                                /* Temporarily disable preemption.  */
                                _tx_thread_preempt_disable++;
 80110a8:	4b2e      	ldr	r3, [pc, #184]	; (8011164 <_tx_mutex_put+0x2c4>)
 80110aa:	681b      	ldr	r3, [r3, #0]
 80110ac:	3301      	adds	r3, #1
 80110ae:	4a2d      	ldr	r2, [pc, #180]	; (8011164 <_tx_mutex_put+0x2c4>)
 80110b0:	6013      	str	r3, [r2, #0]
 80110b2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80110b6:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80110b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80110ba:	f383 8810 	msr	PRIMASK, r3
}
 80110be:	bf00      	nop
                                do
                                {
                                    status =  _tx_mutex_prioritize(mutex_ptr);
                                } while (status != TX_SUCCESS);
#else
                                _tx_mutex_prioritize(mutex_ptr);
 80110c0:	6878      	ldr	r0, [r7, #4]
 80110c2:	f7ff fd7d 	bl	8010bc0 <_tx_mutex_prioritize>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80110c6:	f3ef 8310 	mrs	r3, PRIMASK
 80110ca:	63bb      	str	r3, [r7, #56]	; 0x38
    return(posture);
 80110cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    int_posture = __get_interrupt_posture();
 80110ce:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile ("CPSID i" : : : "memory");
 80110d0:	b672      	cpsid	i
    return(int_posture);
 80110d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                TX_MUTEX_PUT_EXTENSION_1

#ifndef TX_NOT_INTERRUPTABLE

                                /* Disable interrupts.  */
                                TX_DISABLE
 80110d4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

                                /* Back off the preemption disable.  */
                                _tx_thread_preempt_disable--;
 80110d8:	4b22      	ldr	r3, [pc, #136]	; (8011164 <_tx_mutex_put+0x2c4>)
 80110da:	681b      	ldr	r3, [r3, #0]
 80110dc:	3b01      	subs	r3, #1
 80110de:	4a21      	ldr	r2, [pc, #132]	; (8011164 <_tx_mutex_put+0x2c4>)
 80110e0:	6013      	str	r3, [r2, #0]
#endif
                            }
                        }

                        /* Now determine if there are any threads still waiting on the mutex.  */
                        if (mutex_ptr -> tx_mutex_suspension_list == TX_NULL)
 80110e2:	687b      	ldr	r3, [r7, #4]
 80110e4:	699b      	ldr	r3, [r3, #24]
 80110e6:	2b00      	cmp	r3, #0
 80110e8:	d13e      	bne.n	8011168 <_tx_mutex_put+0x2c8>
                            /* No, there are no longer any threads waiting on the mutex.  */

#ifndef TX_NOT_INTERRUPTABLE

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 80110ea:	4b1e      	ldr	r3, [pc, #120]	; (8011164 <_tx_mutex_put+0x2c4>)
 80110ec:	681b      	ldr	r3, [r3, #0]
 80110ee:	3301      	adds	r3, #1
 80110f0:	4a1c      	ldr	r2, [pc, #112]	; (8011164 <_tx_mutex_put+0x2c4>)
 80110f2:	6013      	str	r3, [r2, #0]
 80110f4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80110f8:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80110fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80110fc:	f383 8810 	msr	PRIMASK, r3
}
 8011100:	bf00      	nop
                            /* Mutex is not owned, but it is possible that a thread that
                               caused a priority inheritance to occur is no longer waiting
                               on the mutex.  */

                            /* Setup the highest priority waiting thread.  */
                            mutex_ptr -> tx_mutex_highest_priority_waiting =  (UINT) TX_MAX_PRIORITIES;
 8011102:	687b      	ldr	r3, [r7, #4]
 8011104:	2220      	movs	r2, #32
 8011106:	629a      	str	r2, [r3, #40]	; 0x28

                            /* Determine if we need to restore priority.  */
                            if ((mutex_ptr -> tx_mutex_owner) -> tx_thread_priority != old_priority)
 8011108:	687b      	ldr	r3, [r7, #4]
 801110a:	68db      	ldr	r3, [r3, #12]
 801110c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801110e:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8011112:	429a      	cmp	r2, r3
 8011114:	d006      	beq.n	8011124 <_tx_mutex_put+0x284>
                            {

                                /* Yes, restore the priority of thread.  */
                                _tx_mutex_priority_change(mutex_ptr -> tx_mutex_owner, old_priority);
 8011116:	687b      	ldr	r3, [r7, #4]
 8011118:	68db      	ldr	r3, [r3, #12]
 801111a:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 801111e:	4618      	mov	r0, r3
 8011120:	f7ff fe00 	bl	8010d24 <_tx_mutex_priority_change>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8011124:	f3ef 8310 	mrs	r3, PRIMASK
 8011128:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 801112a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    int_posture = __get_interrupt_posture();
 801112c:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSID i" : : : "memory");
 801112e:	b672      	cpsid	i
    return(int_posture);
 8011130:	6a3b      	ldr	r3, [r7, #32]
                            }

#ifndef TX_NOT_INTERRUPTABLE

                            /* Disable interrupts again.  */
                            TX_DISABLE
 8011132:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

                            /* Back off the preemption disable.  */
                            _tx_thread_preempt_disable--;
 8011136:	4b0b      	ldr	r3, [pc, #44]	; (8011164 <_tx_mutex_put+0x2c4>)
 8011138:	681b      	ldr	r3, [r3, #0]
 801113a:	3b01      	subs	r3, #1
 801113c:	4a09      	ldr	r2, [pc, #36]	; (8011164 <_tx_mutex_put+0x2c4>)
 801113e:	6013      	str	r3, [r2, #0]
#endif

                            /* Set the mutex owner to NULL.  */
                            mutex_ptr -> tx_mutex_owner =  TX_NULL;
 8011140:	687b      	ldr	r3, [r7, #4]
 8011142:	2200      	movs	r2, #0
 8011144:	60da      	str	r2, [r3, #12]
 8011146:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801114a:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801114c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801114e:	f383 8810 	msr	PRIMASK, r3
}
 8011152:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Check for preemption.  */
                            _tx_thread_system_preempt_check();
 8011154:	f000 fb98 	bl	8011888 <_tx_thread_system_preempt_check>

                            /* Set status to success.  */
                            status =  TX_SUCCESS;
 8011158:	2300      	movs	r3, #0
 801115a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 801115e:	e0bd      	b.n	80112dc <_tx_mutex_put+0x43c>
 8011160:	20002f78 	.word	0x20002f78
 8011164:	20003010 	.word	0x20003010
                        }
                        else
                        {

                            /* Pickup the thread at the front of the suspension list.  */
                            thread_ptr =  mutex_ptr -> tx_mutex_suspension_list;
 8011168:	687b      	ldr	r3, [r7, #4]
 801116a:	699b      	ldr	r3, [r3, #24]
 801116c:	67fb      	str	r3, [r7, #124]	; 0x7c

                            /* Save the previous ownership information, if inheritance is
                               in effect.  */
                            if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 801116e:	687b      	ldr	r3, [r7, #4]
 8011170:	691b      	ldr	r3, [r3, #16]
 8011172:	2b01      	cmp	r3, #1
 8011174:	d10a      	bne.n	801118c <_tx_mutex_put+0x2ec>
                            {

                                /* Remember the old mutex owner.  */
                                old_owner =  mutex_ptr -> tx_mutex_owner;
 8011176:	687b      	ldr	r3, [r7, #4]
 8011178:	68db      	ldr	r3, [r3, #12]
 801117a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

                                /* Setup owner thread priority information.  */
                                mutex_ptr -> tx_mutex_original_priority =   thread_ptr -> tx_thread_priority;
 801117e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8011180:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011182:	687b      	ldr	r3, [r7, #4]
 8011184:	615a      	str	r2, [r3, #20]

                                /* Setup the highest priority waiting thread.  */
                                mutex_ptr -> tx_mutex_highest_priority_waiting =  (UINT) TX_MAX_PRIORITIES;
 8011186:	687b      	ldr	r3, [r7, #4]
 8011188:	2220      	movs	r2, #32
 801118a:	629a      	str	r2, [r3, #40]	; 0x28
                            }

                            /* Determine how many mutexes are owned by this thread.  */
                            owned_count =  thread_ptr -> tx_thread_owned_mutex_count;
 801118c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801118e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8011192:	673b      	str	r3, [r7, #112]	; 0x70

                            /* Determine if this thread owns any other mutexes that have priority inheritance.  */
                            if (owned_count == ((UINT) 0))
 8011194:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8011196:	2b00      	cmp	r3, #0
 8011198:	d10a      	bne.n	80111b0 <_tx_mutex_put+0x310>
                            {

                                /* The owned mutex list is empty.  Add mutex to empty list.  */
                                thread_ptr -> tx_thread_owned_mutex_list =     mutex_ptr;
 801119a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801119c:	687a      	ldr	r2, [r7, #4]
 801119e:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
                                mutex_ptr -> tx_mutex_owned_next =             mutex_ptr;
 80111a2:	687b      	ldr	r3, [r7, #4]
 80111a4:	687a      	ldr	r2, [r7, #4]
 80111a6:	62da      	str	r2, [r3, #44]	; 0x2c
                                mutex_ptr -> tx_mutex_owned_previous =         mutex_ptr;
 80111a8:	687b      	ldr	r3, [r7, #4]
 80111aa:	687a      	ldr	r2, [r7, #4]
 80111ac:	631a      	str	r2, [r3, #48]	; 0x30
 80111ae:	e016      	b.n	80111de <_tx_mutex_put+0x33e>
                            {

                                /* Non-empty list. Link up the mutex.  */

                                /* Pickup tail pointer.  */
                                next_mutex =                            thread_ptr -> tx_thread_owned_mutex_list;
 80111b0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80111b2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80111b6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
                                previous_mutex =                        next_mutex -> tx_mutex_owned_previous;
 80111ba:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80111be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80111c0:	677b      	str	r3, [r7, #116]	; 0x74

                                /* Place the owned mutex in the list.  */
                                next_mutex -> tx_mutex_owned_previous =  mutex_ptr;
 80111c2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80111c6:	687a      	ldr	r2, [r7, #4]
 80111c8:	631a      	str	r2, [r3, #48]	; 0x30
                                previous_mutex -> tx_mutex_owned_next =  mutex_ptr;
 80111ca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80111cc:	687a      	ldr	r2, [r7, #4]
 80111ce:	62da      	str	r2, [r3, #44]	; 0x2c

                                /* Setup this mutex's next and previous created links.  */
                                mutex_ptr -> tx_mutex_owned_previous =   previous_mutex;
 80111d0:	687b      	ldr	r3, [r7, #4]
 80111d2:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80111d4:	631a      	str	r2, [r3, #48]	; 0x30
                                mutex_ptr -> tx_mutex_owned_next =       next_mutex;
 80111d6:	687b      	ldr	r3, [r7, #4]
 80111d8:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80111dc:	62da      	str	r2, [r3, #44]	; 0x2c
                            }

                            /* Increment the number of mutexes owned counter.  */
                            thread_ptr -> tx_thread_owned_mutex_count =  owned_count + ((UINT) 1);
 80111de:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80111e0:	1c5a      	adds	r2, r3, #1
 80111e2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80111e4:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

                            /* Mark the Mutex as owned and fill in the corresponding information.  */
                            mutex_ptr -> tx_mutex_ownership_count =  (UINT) 1;
 80111e8:	687b      	ldr	r3, [r7, #4]
 80111ea:	2201      	movs	r2, #1
 80111ec:	609a      	str	r2, [r3, #8]
                            mutex_ptr -> tx_mutex_owner =            thread_ptr;
 80111ee:	687b      	ldr	r3, [r7, #4]
 80111f0:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80111f2:	60da      	str	r2, [r3, #12]

                            /* Remove the suspended thread from the list.  */

                            /* Decrement the suspension count.  */
                            mutex_ptr -> tx_mutex_suspended_count--;
 80111f4:	687b      	ldr	r3, [r7, #4]
 80111f6:	69db      	ldr	r3, [r3, #28]
 80111f8:	1e5a      	subs	r2, r3, #1
 80111fa:	687b      	ldr	r3, [r7, #4]
 80111fc:	61da      	str	r2, [r3, #28]

                            /* Pickup the suspended count.  */
                            suspended_count =  mutex_ptr -> tx_mutex_suspended_count;
 80111fe:	687b      	ldr	r3, [r7, #4]
 8011200:	69db      	ldr	r3, [r3, #28]
 8011202:	66fb      	str	r3, [r7, #108]	; 0x6c

                            /* See if this is the only suspended thread on the list.  */
                            if (suspended_count == TX_NO_SUSPENSIONS)
 8011204:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011206:	2b00      	cmp	r3, #0
 8011208:	d103      	bne.n	8011212 <_tx_mutex_put+0x372>
                            {

                                /* Yes, the only suspended thread.  */

                                /* Update the head pointer.  */
                                mutex_ptr -> tx_mutex_suspension_list =  TX_NULL;
 801120a:	687b      	ldr	r3, [r7, #4]
 801120c:	2200      	movs	r2, #0
 801120e:	619a      	str	r2, [r3, #24]
 8011210:	e00e      	b.n	8011230 <_tx_mutex_put+0x390>
                            {

                                /* At least one more thread is on the same expiration list.  */

                                /* Update the list head pointer.  */
                                next_thread =                                  thread_ptr -> tx_thread_suspended_next;
 8011212:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8011214:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011216:	66bb      	str	r3, [r7, #104]	; 0x68
                                mutex_ptr -> tx_mutex_suspension_list =        next_thread;
 8011218:	687b      	ldr	r3, [r7, #4]
 801121a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801121c:	619a      	str	r2, [r3, #24]

                                /* Update the links of the adjacent threads.  */
                                previous_thread =                              thread_ptr -> tx_thread_suspended_previous;
 801121e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8011220:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011222:	667b      	str	r3, [r7, #100]	; 0x64
                                next_thread -> tx_thread_suspended_previous =  previous_thread;
 8011224:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8011226:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8011228:	675a      	str	r2, [r3, #116]	; 0x74
                                previous_thread -> tx_thread_suspended_next =  next_thread;
 801122a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801122c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801122e:	671a      	str	r2, [r3, #112]	; 0x70
                            }

                            /* Prepare for resumption of the first thread.  */

                            /* Clear cleanup routine to avoid timeout.  */
                            thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8011230:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8011232:	2200      	movs	r2, #0
 8011234:	669a      	str	r2, [r3, #104]	; 0x68

                            /* Put return status into the thread control block.  */
                            thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 8011236:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8011238:	2200      	movs	r2, #0
 801123a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                            /* Restore interrupts.  */
                            TX_RESTORE
#else

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 801123e:	4b2a      	ldr	r3, [pc, #168]	; (80112e8 <_tx_mutex_put+0x448>)
 8011240:	681b      	ldr	r3, [r3, #0]
 8011242:	3301      	adds	r3, #1
 8011244:	4a28      	ldr	r2, [pc, #160]	; (80112e8 <_tx_mutex_put+0x448>)
 8011246:	6013      	str	r3, [r2, #0]
 8011248:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801124c:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801124e:	69fb      	ldr	r3, [r7, #28]
 8011250:	f383 8810 	msr	PRIMASK, r3
}
 8011254:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Determine if priority inheritance is enabled for this mutex.  */
                            if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 8011256:	687b      	ldr	r3, [r7, #4]
 8011258:	691b      	ldr	r3, [r3, #16]
 801125a:	2b01      	cmp	r3, #1
 801125c:	d12d      	bne.n	80112ba <_tx_mutex_put+0x41a>
                            {

                                /* Yes, priority inheritance is requested.  */

                                /* Determine if there are any more threads still suspended on the mutex.  */
                                if (mutex_ptr -> tx_mutex_suspended_count != TX_NO_SUSPENSIONS)
 801125e:	687b      	ldr	r3, [r7, #4]
 8011260:	69db      	ldr	r3, [r3, #28]
 8011262:	2b00      	cmp	r3, #0
 8011264:	d01c      	beq.n	80112a0 <_tx_mutex_put+0x400>
                                    do
                                    {
                                        status =  _tx_mutex_prioritize(mutex_ptr);
                                    } while (status != TX_SUCCESS);
#else
                                    _tx_mutex_prioritize(mutex_ptr);
 8011266:	6878      	ldr	r0, [r7, #4]
 8011268:	f7ff fcaa 	bl	8010bc0 <_tx_mutex_prioritize>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801126c:	f3ef 8310 	mrs	r3, PRIMASK
 8011270:	61bb      	str	r3, [r7, #24]
    return(posture);
 8011272:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8011274:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8011276:	b672      	cpsid	i
    return(int_posture);
 8011278:	697b      	ldr	r3, [r7, #20]

                                    /* Optional processing extension.  */
                                    TX_MUTEX_PUT_EXTENSION_2

                                    /* Disable interrupts.  */
                                    TX_DISABLE
 801127a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

                                    /* Determine if there still are threads suspended for this mutex.  */
                                    suspended_thread =  mutex_ptr -> tx_mutex_suspension_list;
 801127e:	687b      	ldr	r3, [r7, #4]
 8011280:	699b      	ldr	r3, [r3, #24]
 8011282:	663b      	str	r3, [r7, #96]	; 0x60
                                    if (suspended_thread != TX_NULL)
 8011284:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8011286:	2b00      	cmp	r3, #0
 8011288:	d003      	beq.n	8011292 <_tx_mutex_put+0x3f2>
                                    {

                                        /* Setup the highest priority thread waiting on this mutex.  */
                                        mutex_ptr -> tx_mutex_highest_priority_waiting =  suspended_thread -> tx_thread_priority;
 801128a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801128c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801128e:	687b      	ldr	r3, [r7, #4]
 8011290:	629a      	str	r2, [r3, #40]	; 0x28
 8011292:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8011296:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8011298:	693b      	ldr	r3, [r7, #16]
 801129a:	f383 8810 	msr	PRIMASK, r3
}
 801129e:	bf00      	nop

                                /* Restore previous priority needs to be restored after priority
                                   inheritance.  */

                                /* Is the priority different?  */
                                if (old_owner -> tx_thread_priority != old_priority)
 80112a0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80112a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80112a6:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80112aa:	429a      	cmp	r2, r3
 80112ac:	d005      	beq.n	80112ba <_tx_mutex_put+0x41a>
                                {

                                    /* Restore the priority of thread.  */
                                    _tx_mutex_priority_change(old_owner, old_priority);
 80112ae:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 80112b2:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 80112b6:	f7ff fd35 	bl	8010d24 <_tx_mutex_priority_change>
                                }
                            }

                            /* Resume thread.  */
                            _tx_thread_system_resume(thread_ptr);
 80112ba:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 80112bc:	f000 fb1e 	bl	80118fc <_tx_thread_system_resume>
#endif

                            /* Return a successful status.  */
                            status =  TX_SUCCESS;
 80112c0:	2300      	movs	r3, #0
 80112c2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80112c6:	e009      	b.n	80112dc <_tx_mutex_put+0x43c>
 80112c8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80112cc:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80112ce:	68fb      	ldr	r3, [r7, #12]
 80112d0:	f383 8810 	msr	PRIMASK, r3
}
 80112d4:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Caller does not own the mutex.  */
        status =  TX_NOT_OWNED;
 80112d6:	231e      	movs	r3, #30
 80112d8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    }

    /* Return the completion status.  */
    return(status);
 80112dc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
}
 80112e0:	4618      	mov	r0, r3
 80112e2:	3798      	adds	r7, #152	; 0x98
 80112e4:	46bd      	mov	sp, r7
 80112e6:	bd80      	pop	{r7, pc}
 80112e8:	20003010 	.word	0x20003010

080112ec <_tx_thread_create>:
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_create(TX_THREAD *thread_ptr, CHAR *name_ptr, VOID (*entry_function)(ULONG id), ULONG entry_input,
                            VOID *stack_start, ULONG stack_size, UINT priority, UINT preempt_threshold,
                            ULONG time_slice, UINT auto_start)
{
 80112ec:	b580      	push	{r7, lr}
 80112ee:	b092      	sub	sp, #72	; 0x48
 80112f0:	af00      	add	r7, sp, #0
 80112f2:	60f8      	str	r0, [r7, #12]
 80112f4:	60b9      	str	r1, [r7, #8]
 80112f6:	607a      	str	r2, [r7, #4]
 80112f8:	603b      	str	r3, [r7, #0]
TX_INTERRUPT_SAVE_AREA

TX_THREAD               *next_thread;
TX_THREAD               *previous_thread;
TX_THREAD               *saved_thread_ptr;
UINT                    saved_threshold =  ((UINT) 0);
 80112fa:	2300      	movs	r3, #0
 80112fc:	643b      	str	r3, [r7, #64]	; 0x40
#ifndef TX_DISABLE_STACK_FILLING

    /* Set the thread stack to a pattern prior to creating the initial
       stack frame.  This pattern is used by the stack checking routines
       to see how much has been used.  */
    TX_MEMSET(stack_start, ((UCHAR) TX_STACK_FILL), stack_size);
 80112fe:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8011300:	21ef      	movs	r1, #239	; 0xef
 8011302:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8011304:	f001 fbc0 	bl	8012a88 <memset>

    /* Prepare the thread control block prior to placing it on the created
       list.  */

    /* Initialize thread control block to all zeros.  */
    TX_MEMSET(thread_ptr, 0, (sizeof(TX_THREAD)));
 8011308:	22b0      	movs	r2, #176	; 0xb0
 801130a:	2100      	movs	r1, #0
 801130c:	68f8      	ldr	r0, [r7, #12]
 801130e:	f001 fbbb 	bl	8012a88 <memset>

    /* Place the supplied parameters into the thread's control block.  */
    thread_ptr -> tx_thread_name =              name_ptr;
 8011312:	68fb      	ldr	r3, [r7, #12]
 8011314:	68ba      	ldr	r2, [r7, #8]
 8011316:	629a      	str	r2, [r3, #40]	; 0x28
    thread_ptr -> tx_thread_entry =             entry_function;
 8011318:	68fb      	ldr	r3, [r7, #12]
 801131a:	687a      	ldr	r2, [r7, #4]
 801131c:	645a      	str	r2, [r3, #68]	; 0x44
    thread_ptr -> tx_thread_entry_parameter =   entry_input;
 801131e:	68fb      	ldr	r3, [r7, #12]
 8011320:	683a      	ldr	r2, [r7, #0]
 8011322:	649a      	str	r2, [r3, #72]	; 0x48
    thread_ptr -> tx_thread_stack_start =       stack_start;
 8011324:	68fb      	ldr	r3, [r7, #12]
 8011326:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8011328:	60da      	str	r2, [r3, #12]
    thread_ptr -> tx_thread_stack_size =        stack_size;
 801132a:	68fb      	ldr	r3, [r7, #12]
 801132c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801132e:	615a      	str	r2, [r3, #20]
    thread_ptr -> tx_thread_priority =          priority;
 8011330:	68fb      	ldr	r3, [r7, #12]
 8011332:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8011334:	62da      	str	r2, [r3, #44]	; 0x2c
    thread_ptr -> tx_thread_user_priority =     priority;
 8011336:	68fb      	ldr	r3, [r7, #12]
 8011338:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801133a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    thread_ptr -> tx_thread_time_slice =        time_slice;
 801133e:	68fb      	ldr	r3, [r7, #12]
 8011340:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8011342:	619a      	str	r2, [r3, #24]
    thread_ptr -> tx_thread_new_time_slice =    time_slice;
 8011344:	68fb      	ldr	r3, [r7, #12]
 8011346:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8011348:	61da      	str	r2, [r3, #28]
    thread_ptr -> tx_thread_inherit_priority =  ((UINT) TX_MAX_PRIORITIES);
 801134a:	68fb      	ldr	r3, [r7, #12]
 801134c:	2220      	movs	r2, #32
 801134e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Calculate the end of the thread's stack area.  */
    temp_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(stack_start);
 8011352:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011354:	63fb      	str	r3, [r7, #60]	; 0x3c
    temp_ptr =  (TX_UCHAR_POINTER_ADD(temp_ptr, (stack_size - ((ULONG) 1))));
 8011356:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011358:	3b01      	subs	r3, #1
 801135a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801135c:	4413      	add	r3, r2
 801135e:	63fb      	str	r3, [r7, #60]	; 0x3c
    thread_ptr -> tx_thread_stack_end =         TX_UCHAR_TO_VOID_POINTER_CONVERT(temp_ptr);
 8011360:	68fb      	ldr	r3, [r7, #12]
 8011362:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8011364:	611a      	str	r2, [r3, #16]
    thread_ptr -> tx_thread_preempt_threshold =       preempt_threshold;
    thread_ptr -> tx_thread_user_preempt_threshold =  preempt_threshold;
#else

    /* Preemption-threshold is disabled, determine if preemption-threshold was required.  */
    if (priority != preempt_threshold)
 8011366:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8011368:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801136a:	429a      	cmp	r2, r3
 801136c:	d007      	beq.n	801137e <_tx_thread_create+0x92>
    {

        /* Preemption-threshold specified. Since specific preemption-threshold is not supported,
           disable all preemption.  */
        thread_ptr -> tx_thread_preempt_threshold =       ((UINT) 0);
 801136e:	68fb      	ldr	r3, [r7, #12]
 8011370:	2200      	movs	r2, #0
 8011372:	63da      	str	r2, [r3, #60]	; 0x3c
        thread_ptr -> tx_thread_user_preempt_threshold =  ((UINT) 0);
 8011374:	68fb      	ldr	r3, [r7, #12]
 8011376:	2200      	movs	r2, #0
 8011378:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 801137c:	e006      	b.n	801138c <_tx_thread_create+0xa0>
    }
    else
    {

        /* Preemption-threshold is not specified, just setup with the priority.  */
        thread_ptr -> tx_thread_preempt_threshold =       priority;
 801137e:	68fb      	ldr	r3, [r7, #12]
 8011380:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8011382:	63da      	str	r2, [r3, #60]	; 0x3c
        thread_ptr -> tx_thread_user_preempt_threshold =  priority;
 8011384:	68fb      	ldr	r3, [r7, #12]
 8011386:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8011388:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    }
#endif

    /* Now fill in the values that are required for thread initialization.  */
    thread_ptr -> tx_thread_state =  TX_SUSPENDED;
 801138c:	68fb      	ldr	r3, [r7, #12]
 801138e:	2203      	movs	r2, #3
 8011390:	631a      	str	r2, [r3, #48]	; 0x30

    /* Setup the necessary fields in the thread timer block.  */
    TX_THREAD_CREATE_TIMEOUT_SETUP(thread_ptr)
 8011392:	68fb      	ldr	r3, [r7, #12]
 8011394:	4a48      	ldr	r2, [pc, #288]	; (80114b8 <_tx_thread_create+0x1cc>)
 8011396:	655a      	str	r2, [r3, #84]	; 0x54
 8011398:	68fa      	ldr	r2, [r7, #12]
 801139a:	68fb      	ldr	r3, [r7, #12]
 801139c:	659a      	str	r2, [r3, #88]	; 0x58
    TX_THREAD_CREATE_INTERNAL_EXTENSION(thread_ptr)

    /* Call the target specific stack frame building routine to build the
       thread's initial stack and to setup the actual stack pointer in the
       control block.  */
    _tx_thread_stack_build(thread_ptr, _tx_thread_shell_entry);
 801139e:	4947      	ldr	r1, [pc, #284]	; (80114bc <_tx_thread_create+0x1d0>)
 80113a0:	68f8      	ldr	r0, [r7, #12]
 80113a2:	f7ef f809 	bl	80003b8 <_tx_thread_stack_build>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80113a6:	f3ef 8310 	mrs	r3, PRIMASK
 80113aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 80113ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 80113ae:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 80113b0:	b672      	cpsid	i
    return(int_posture);
 80113b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
    /* Setup the highest usage stack pointer.  */
    thread_ptr -> tx_thread_stack_highest_ptr =  thread_ptr -> tx_thread_stack_ptr;
#endif

    /* Prepare to make this thread a member of the created thread list.  */
    TX_DISABLE
 80113b4:	63bb      	str	r3, [r7, #56]	; 0x38

    /* Load the thread ID field in the thread control block.  */
    thread_ptr -> tx_thread_id =  TX_THREAD_ID;
 80113b6:	68fb      	ldr	r3, [r7, #12]
 80113b8:	4a41      	ldr	r2, [pc, #260]	; (80114c0 <_tx_thread_create+0x1d4>)
 80113ba:	601a      	str	r2, [r3, #0]

    /* Place the thread on the list of created threads.  First,
       check for an empty list.  */
    if (_tx_thread_created_count == TX_EMPTY)
 80113bc:	4b41      	ldr	r3, [pc, #260]	; (80114c4 <_tx_thread_create+0x1d8>)
 80113be:	681b      	ldr	r3, [r3, #0]
 80113c0:	2b00      	cmp	r3, #0
 80113c2:	d10b      	bne.n	80113dc <_tx_thread_create+0xf0>
    {

        /* The created thread list is empty.  Add thread to empty list.  */
        _tx_thread_created_ptr =                    thread_ptr;
 80113c4:	4a40      	ldr	r2, [pc, #256]	; (80114c8 <_tx_thread_create+0x1dc>)
 80113c6:	68fb      	ldr	r3, [r7, #12]
 80113c8:	6013      	str	r3, [r2, #0]
        thread_ptr -> tx_thread_created_next =      thread_ptr;
 80113ca:	68fb      	ldr	r3, [r7, #12]
 80113cc:	68fa      	ldr	r2, [r7, #12]
 80113ce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        thread_ptr -> tx_thread_created_previous =  thread_ptr;
 80113d2:	68fb      	ldr	r3, [r7, #12]
 80113d4:	68fa      	ldr	r2, [r7, #12]
 80113d6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 80113da:	e016      	b.n	801140a <_tx_thread_create+0x11e>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_thread =  _tx_thread_created_ptr;
 80113dc:	4b3a      	ldr	r3, [pc, #232]	; (80114c8 <_tx_thread_create+0x1dc>)
 80113de:	681b      	ldr	r3, [r3, #0]
 80113e0:	637b      	str	r3, [r7, #52]	; 0x34
        previous_thread =  next_thread -> tx_thread_created_previous;
 80113e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80113e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80113e8:	633b      	str	r3, [r7, #48]	; 0x30

        /* Place the new thread in the list.  */
        next_thread -> tx_thread_created_previous =  thread_ptr;
 80113ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80113ec:	68fa      	ldr	r2, [r7, #12]
 80113ee:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        previous_thread -> tx_thread_created_next =  thread_ptr;
 80113f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80113f4:	68fa      	ldr	r2, [r7, #12]
 80113f6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Setup this thread's created links.  */
        thread_ptr -> tx_thread_created_previous =  previous_thread;
 80113fa:	68fb      	ldr	r3, [r7, #12]
 80113fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80113fe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        thread_ptr -> tx_thread_created_next =      next_thread;
 8011402:	68fb      	ldr	r3, [r7, #12]
 8011404:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011406:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* Increment the thread created count.  */
    _tx_thread_created_count++;
 801140a:	4b2e      	ldr	r3, [pc, #184]	; (80114c4 <_tx_thread_create+0x1d8>)
 801140c:	681b      	ldr	r3, [r3, #0]
 801140e:	3301      	adds	r3, #1
 8011410:	4a2c      	ldr	r2, [pc, #176]	; (80114c4 <_tx_thread_create+0x1d8>)
 8011412:	6013      	str	r3, [r2, #0]
    TX_EL_THREAD_CREATE_INSERT

#ifndef TX_NOT_INTERRUPTABLE

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 8011414:	4b2d      	ldr	r3, [pc, #180]	; (80114cc <_tx_thread_create+0x1e0>)
 8011416:	681b      	ldr	r3, [r3, #0]
 8011418:	3301      	adds	r3, #1
 801141a:	4a2c      	ldr	r2, [pc, #176]	; (80114cc <_tx_thread_create+0x1e0>)
 801141c:	6013      	str	r3, [r2, #0]
#endif

    /* Determine if an automatic start was requested.  If so, call the resume
       thread function and then check for a preemption condition.  */
    if (auto_start == TX_AUTO_START)
 801141e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011420:	2b01      	cmp	r3, #1
 8011422:	d129      	bne.n	8011478 <_tx_thread_create+0x18c>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8011424:	f3ef 8305 	mrs	r3, IPSR
 8011428:	627b      	str	r3, [r7, #36]	; 0x24
    return(ipsr_value);
 801142a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    {

        /* Determine if the create call is being called from initialization.  */
        if (TX_THREAD_GET_SYSTEM_STATE() >= TX_INITIALIZE_IN_PROGRESS)
 801142c:	4b28      	ldr	r3, [pc, #160]	; (80114d0 <_tx_thread_create+0x1e4>)
 801142e:	681b      	ldr	r3, [r3, #0]
 8011430:	4313      	orrs	r3, r2
 8011432:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 8011436:	d30d      	bcc.n	8011454 <_tx_thread_create+0x168>

            /* Pickup the current thread execute pointer, which corresponds to the
               highest priority thread ready to execute.  Interrupt lockout is
               not required, since interrupts are assumed to be disabled during
               initialization.  */
            saved_thread_ptr =  _tx_thread_execute_ptr;
 8011438:	4b26      	ldr	r3, [pc, #152]	; (80114d4 <_tx_thread_create+0x1e8>)
 801143a:	681b      	ldr	r3, [r3, #0]
 801143c:	647b      	str	r3, [r7, #68]	; 0x44

            /* Determine if there is thread ready for execution.  */
            if (saved_thread_ptr != TX_NULL)
 801143e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011440:	2b00      	cmp	r3, #0
 8011442:	d009      	beq.n	8011458 <_tx_thread_create+0x16c>
            {

                /* Yes, a thread is ready for execution when initialization completes.  */

                /* Save the current preemption-threshold.  */
                saved_threshold =  saved_thread_ptr -> tx_thread_preempt_threshold;
 8011444:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011446:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011448:	643b      	str	r3, [r7, #64]	; 0x40

                /* For initialization, temporarily set the preemption-threshold to the
                   priority level to make sure the highest-priority thread runs once
                   initialization is complete.  */
                saved_thread_ptr -> tx_thread_preempt_threshold =  saved_thread_ptr -> tx_thread_priority;
 801144a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801144c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801144e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011450:	63da      	str	r2, [r3, #60]	; 0x3c
 8011452:	e001      	b.n	8011458 <_tx_thread_create+0x16c>
        }
        else
        {

            /* Simply set the saved thread pointer to NULL.  */
            saved_thread_ptr =  TX_NULL;
 8011454:	2300      	movs	r3, #0
 8011456:	647b      	str	r3, [r7, #68]	; 0x44
 8011458:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801145a:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801145c:	6a3b      	ldr	r3, [r7, #32]
 801145e:	f383 8810 	msr	PRIMASK, r3
}
 8011462:	bf00      	nop

        /* Perform any additional activities for tool or user purpose.  */
        TX_THREAD_CREATE_EXTENSION(thread_ptr)

        /* Call the resume thread function to make this thread ready.  */
        _tx_thread_system_resume(thread_ptr);
 8011464:	68f8      	ldr	r0, [r7, #12]
 8011466:	f000 fa49 	bl	80118fc <_tx_thread_system_resume>
#endif

        /* Determine if the thread's preemption-threshold needs to be restored.  */
        if (saved_thread_ptr != TX_NULL)
 801146a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801146c:	2b00      	cmp	r3, #0
 801146e:	d01e      	beq.n	80114ae <_tx_thread_create+0x1c2>
        {

            /* Yes, restore the previous highest-priority thread's preemption-threshold. This
               can only happen if this routine is called from initialization.  */
            saved_thread_ptr -> tx_thread_preempt_threshold =  saved_threshold;
 8011470:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011472:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8011474:	63da      	str	r2, [r3, #60]	; 0x3c
 8011476:	e01a      	b.n	80114ae <_tx_thread_create+0x1c2>
 8011478:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801147a:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801147c:	693b      	ldr	r3, [r7, #16]
 801147e:	f383 8810 	msr	PRIMASK, r3
}
 8011482:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8011484:	f3ef 8310 	mrs	r3, PRIMASK
 8011488:	61bb      	str	r3, [r7, #24]
    return(posture);
 801148a:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 801148c:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 801148e:	b672      	cpsid	i
    return(int_posture);
 8011490:	697b      	ldr	r3, [r7, #20]

        /* Perform any additional activities for tool or user purpose.  */
        TX_THREAD_CREATE_EXTENSION(thread_ptr)

        /* Disable interrupts.  */
        TX_DISABLE
 8011492:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Re-enable preemption.  */
        _tx_thread_preempt_disable--;
 8011494:	4b0d      	ldr	r3, [pc, #52]	; (80114cc <_tx_thread_create+0x1e0>)
 8011496:	681b      	ldr	r3, [r3, #0]
 8011498:	3b01      	subs	r3, #1
 801149a:	4a0c      	ldr	r2, [pc, #48]	; (80114cc <_tx_thread_create+0x1e0>)
 801149c:	6013      	str	r3, [r2, #0]
 801149e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80114a0:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80114a2:	69fb      	ldr	r3, [r7, #28]
 80114a4:	f383 8810 	msr	PRIMASK, r3
}
 80114a8:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 80114aa:	f000 f9ed 	bl	8011888 <_tx_thread_system_preempt_check>
#endif
    }

    /* Always return a success.  */
    return(TX_SUCCESS);
 80114ae:	2300      	movs	r3, #0
}
 80114b0:	4618      	mov	r0, r3
 80114b2:	3748      	adds	r7, #72	; 0x48
 80114b4:	46bd      	mov	sp, r7
 80114b6:	bd80      	pop	{r7, pc}
 80114b8:	08011dd1 	.word	0x08011dd1
 80114bc:	08011611 	.word	0x08011611
 80114c0:	54485244 	.word	0x54485244
 80114c4:	20002f84 	.word	0x20002f84
 80114c8:	20002f80 	.word	0x20002f80
 80114cc:	20003010 	.word	0x20003010
 80114d0:	20000010 	.word	0x20000010
 80114d4:	20002f7c 	.word	0x20002f7c

080114d8 <_tx_thread_initialize>:
/*                                            stack check error handling, */
/*                                            resulting in version 6.1.9  */   
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_initialize(VOID)
{
 80114d8:	b580      	push	{r7, lr}
 80114da:	af00      	add	r7, sp, #0
       respectively.  */

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Set current thread pointer to NULL.  */
    TX_THREAD_SET_CURRENT(TX_NULL)
 80114dc:	4b12      	ldr	r3, [pc, #72]	; (8011528 <_tx_thread_initialize+0x50>)
 80114de:	2200      	movs	r2, #0
 80114e0:	601a      	str	r2, [r3, #0]

    /* Initialize the execute thread pointer to NULL.  */
    _tx_thread_execute_ptr =  TX_NULL;
 80114e2:	4b12      	ldr	r3, [pc, #72]	; (801152c <_tx_thread_initialize+0x54>)
 80114e4:	2200      	movs	r2, #0
 80114e6:	601a      	str	r2, [r3, #0]
 80114e8:	4b11      	ldr	r3, [pc, #68]	; (8011530 <_tx_thread_initialize+0x58>)
 80114ea:	2200      	movs	r2, #0
 80114ec:	601a      	str	r2, [r3, #0]
#endif
#endif

    /* Setup the highest priority variable to the max, indicating no thread is currently
       ready.  */
    _tx_thread_highest_priority =  ((UINT) TX_MAX_PRIORITIES);
 80114ee:	4b11      	ldr	r3, [pc, #68]	; (8011534 <_tx_thread_initialize+0x5c>)
 80114f0:	2220      	movs	r2, #32
 80114f2:	601a      	str	r2, [r3, #0]


#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the array of priority head pointers.  */
    TX_MEMSET(&_tx_thread_priority_list[0], 0, (sizeof(_tx_thread_priority_list)));
 80114f4:	2280      	movs	r2, #128	; 0x80
 80114f6:	2100      	movs	r1, #0
 80114f8:	480f      	ldr	r0, [pc, #60]	; (8011538 <_tx_thread_initialize+0x60>)
 80114fa:	f001 fac5 	bl	8012a88 <memset>

    /* Initialize the head pointer of the created threads list and the
       number of threads created.  */
    _tx_thread_created_ptr =        TX_NULL;
 80114fe:	4b0f      	ldr	r3, [pc, #60]	; (801153c <_tx_thread_initialize+0x64>)
 8011500:	2200      	movs	r2, #0
 8011502:	601a      	str	r2, [r3, #0]
    _tx_thread_created_count =      TX_EMPTY;
 8011504:	4b0e      	ldr	r3, [pc, #56]	; (8011540 <_tx_thread_initialize+0x68>)
 8011506:	2200      	movs	r2, #0
 8011508:	601a      	str	r2, [r3, #0]

    /* Clear the global preempt disable variable.  */
    _tx_thread_preempt_disable =    ((UINT) 0);
 801150a:	4b0e      	ldr	r3, [pc, #56]	; (8011544 <_tx_thread_initialize+0x6c>)
 801150c:	2200      	movs	r2, #0
 801150e:	601a      	str	r2, [r3, #0]

    /* Initialize the thread mutex release function pointer.  */
    _tx_thread_mutex_release =      TX_NULL;
 8011510:	4b0d      	ldr	r3, [pc, #52]	; (8011548 <_tx_thread_initialize+0x70>)
 8011512:	2200      	movs	r2, #0
 8011514:	601a      	str	r2, [r3, #0]
#endif
#ifdef TX_DISABLE_REDUNDANT_CLEARING
                            | (((ULONG) 1) << 18)
#endif
#ifdef TX_DISABLE_NOTIFY_CALLBACKS
                            | (((ULONG) 1) << 17)
 8011516:	4b0d      	ldr	r3, [pc, #52]	; (801154c <_tx_thread_initialize+0x74>)
 8011518:	681b      	ldr	r3, [r3, #0]
 801151a:	f043 7385 	orr.w	r3, r3, #17432576	; 0x10a0000
    _tx_build_options =  _tx_build_options 
 801151e:	4a0b      	ldr	r2, [pc, #44]	; (801154c <_tx_thread_initialize+0x74>)
 8011520:	6013      	str	r3, [r2, #0]
#endif
#if TX_PORT_SPECIFIC_BUILD_OPTIONS != 0
                            | TX_PORT_SPECIFIC_BUILD_OPTIONS
#endif
                            ;
}
 8011522:	bf00      	nop
 8011524:	bd80      	pop	{r7, pc}
 8011526:	bf00      	nop
 8011528:	20002f78 	.word	0x20002f78
 801152c:	20002f7c 	.word	0x20002f7c
 8011530:	20002f88 	.word	0x20002f88
 8011534:	20002f8c 	.word	0x20002f8c
 8011538:	20002f90 	.word	0x20002f90
 801153c:	20002f80 	.word	0x20002f80
 8011540:	20002f84 	.word	0x20002f84
 8011544:	20003010 	.word	0x20003010
 8011548:	20003014 	.word	0x20003014
 801154c:	20003018 	.word	0x20003018

08011550 <_tx_thread_resume>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_resume(TX_THREAD *thread_ptr)
{
 8011550:	b580      	push	{r7, lr}
 8011552:	b08c      	sub	sp, #48	; 0x30
 8011554:	af00      	add	r7, sp, #0
 8011556:	6078      	str	r0, [r7, #4]

TX_INTERRUPT_SAVE_AREA

UINT        status;
TX_THREAD   *saved_thread_ptr;
UINT        saved_threshold =  ((UINT) 0);
 8011558:	2300      	movs	r3, #0
 801155a:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801155c:	f3ef 8310 	mrs	r3, PRIMASK
 8011560:	61fb      	str	r3, [r7, #28]
    return(posture);
 8011562:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 8011564:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 8011566:	b672      	cpsid	i
    return(int_posture);
 8011568:	69bb      	ldr	r3, [r7, #24]
    TX_THREAD_STACK_CHECK(thread_ptr)
#endif
#endif

    /* Lockout interrupts while the thread is being resumed.  */
    TX_DISABLE
 801156a:	623b      	str	r3, [r7, #32]
    /* Log this kernel call.  */
    TX_EL_THREAD_RESUME_INSERT

    /* Determine if the thread is suspended or in the process of suspending.
       If so, call the thread resume processing.  */
    if (thread_ptr -> tx_thread_state == TX_SUSPENDED)
 801156c:	687b      	ldr	r3, [r7, #4]
 801156e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011570:	2b03      	cmp	r3, #3
 8011572:	d12f      	bne.n	80115d4 <_tx_thread_resume+0x84>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8011574:	f3ef 8305 	mrs	r3, IPSR
 8011578:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 801157a:	697a      	ldr	r2, [r7, #20]
    {

        /* Determine if the create call is being called from initialization.  */
        if (TX_THREAD_GET_SYSTEM_STATE() >= TX_INITIALIZE_IN_PROGRESS)
 801157c:	4b21      	ldr	r3, [pc, #132]	; (8011604 <_tx_thread_resume+0xb4>)
 801157e:	681b      	ldr	r3, [r3, #0]
 8011580:	4313      	orrs	r3, r2
 8011582:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 8011586:	d30d      	bcc.n	80115a4 <_tx_thread_resume+0x54>

            /* Pickup the current thread execute pointer, which corresponds to the
               highest priority thread ready to execute.  Interrupt lockout is
               not required, since interrupts are assumed to be disabled during
               initialization.  */
            saved_thread_ptr =  _tx_thread_execute_ptr;
 8011588:	4b1f      	ldr	r3, [pc, #124]	; (8011608 <_tx_thread_resume+0xb8>)
 801158a:	681b      	ldr	r3, [r3, #0]
 801158c:	62bb      	str	r3, [r7, #40]	; 0x28

            /* Determine if there is thread ready for execution.  */
            if (saved_thread_ptr != TX_NULL)
 801158e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011590:	2b00      	cmp	r3, #0
 8011592:	d009      	beq.n	80115a8 <_tx_thread_resume+0x58>
            {

                /* Yes, a thread is ready for execution when initialization completes.  */

                /* Save the current preemption-threshold.  */
                saved_threshold =  saved_thread_ptr -> tx_thread_preempt_threshold;
 8011594:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011596:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011598:	627b      	str	r3, [r7, #36]	; 0x24

                /* For initialization, temporarily set the preemption-threshold to the
                   priority level to make sure the highest-priority thread runs once
                   initialization is complete.  */
                saved_thread_ptr -> tx_thread_preempt_threshold =  saved_thread_ptr -> tx_thread_priority;
 801159a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801159c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801159e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80115a0:	63da      	str	r2, [r3, #60]	; 0x3c
 80115a2:	e001      	b.n	80115a8 <_tx_thread_resume+0x58>
        }
        else
        {

            /* Simply set the saved thread pointer to NULL.  */
            saved_thread_ptr =  TX_NULL;
 80115a4:	2300      	movs	r3, #0
 80115a6:	62bb      	str	r3, [r7, #40]	; 0x28
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Temporarily disable preemption.  */
        _tx_thread_preempt_disable++;
 80115a8:	4b18      	ldr	r3, [pc, #96]	; (801160c <_tx_thread_resume+0xbc>)
 80115aa:	681b      	ldr	r3, [r3, #0]
 80115ac:	3301      	adds	r3, #1
 80115ae:	4a17      	ldr	r2, [pc, #92]	; (801160c <_tx_thread_resume+0xbc>)
 80115b0:	6013      	str	r3, [r2, #0]
 80115b2:	6a3b      	ldr	r3, [r7, #32]
 80115b4:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80115b6:	693b      	ldr	r3, [r7, #16]
 80115b8:	f383 8810 	msr	PRIMASK, r3
}
 80115bc:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Call the actual resume service to resume the thread.  */
        _tx_thread_system_resume(thread_ptr);
 80115be:	6878      	ldr	r0, [r7, #4]
 80115c0:	f000 f99c 	bl	80118fc <_tx_thread_system_resume>
#endif

        /* Determine if the thread's preemption-threshold needs to be restored.  */
        if (saved_thread_ptr != TX_NULL)
 80115c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80115c6:	2b00      	cmp	r3, #0
 80115c8:	d002      	beq.n	80115d0 <_tx_thread_resume+0x80>
        {

            /* Yes, restore the previous highest-priority thread's preemption-threshold. This
               can only happen if this routine is called from initialization.  */
            saved_thread_ptr -> tx_thread_preempt_threshold =  saved_threshold;
 80115ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80115cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80115ce:	63da      	str	r2, [r3, #60]	; 0x3c
        /* Setup successful return status.  */
        status =  TX_SUCCESS;
#else

        /* Return successful completion.  */
        return(TX_SUCCESS);
 80115d0:	2300      	movs	r3, #0
 80115d2:	e012      	b.n	80115fa <_tx_thread_resume+0xaa>

        /* Setup successful return status.  */
        status =  TX_SUCCESS;
#endif
    }
    else if (thread_ptr -> tx_thread_delayed_suspend == TX_TRUE)
 80115d4:	687b      	ldr	r3, [r7, #4]
 80115d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80115d8:	2b01      	cmp	r3, #1
 80115da:	d105      	bne.n	80115e8 <_tx_thread_resume+0x98>
    {

        /* Clear the delayed suspension.  */
        thread_ptr -> tx_thread_delayed_suspend =  TX_FALSE;
 80115dc:	687b      	ldr	r3, [r7, #4]
 80115de:	2200      	movs	r2, #0
 80115e0:	635a      	str	r2, [r3, #52]	; 0x34

        /* Setup delayed suspend lifted return status.  */
        status =  TX_SUSPEND_LIFTED;
 80115e2:	2319      	movs	r3, #25
 80115e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80115e6:	e001      	b.n	80115ec <_tx_thread_resume+0x9c>
    }
    else
    {

        /* Setup invalid resume return status.  */
        status =  TX_RESUME_ERROR;
 80115e8:	2312      	movs	r3, #18
 80115ea:	62fb      	str	r3, [r7, #44]	; 0x2c
 80115ec:	6a3b      	ldr	r3, [r7, #32]
 80115ee:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80115f0:	68fb      	ldr	r3, [r7, #12]
 80115f2:	f383 8810 	msr	PRIMASK, r3
}
 80115f6:	bf00      	nop
        }
    }
#endif

    /* Return completion status. */
    return(status);
 80115f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80115fa:	4618      	mov	r0, r3
 80115fc:	3730      	adds	r7, #48	; 0x30
 80115fe:	46bd      	mov	sp, r7
 8011600:	bd80      	pop	{r7, pc}
 8011602:	bf00      	nop
 8011604:	20000010 	.word	0x20000010
 8011608:	20002f7c 	.word	0x20002f7c
 801160c:	20003010 	.word	0x20003010

08011610 <_tx_thread_shell_entry>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_shell_entry(VOID)
{
 8011610:	b580      	push	{r7, lr}
 8011612:	b088      	sub	sp, #32
 8011614:	af00      	add	r7, sp, #0
VOID            (*entry_exit_notify)(TX_THREAD *notify_thread_ptr, UINT type);
#endif


    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 8011616:	4b21      	ldr	r3, [pc, #132]	; (801169c <_tx_thread_shell_entry+0x8c>)
 8011618:	681b      	ldr	r3, [r3, #0]
 801161a:	61fb      	str	r3, [r7, #28]
        (entry_exit_notify)(thread_ptr, TX_THREAD_ENTRY);
    }
#endif

    /* Call current thread's entry function.  */
    (thread_ptr -> tx_thread_entry) (thread_ptr -> tx_thread_entry_parameter);
 801161c:	69fb      	ldr	r3, [r7, #28]
 801161e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011620:	69fa      	ldr	r2, [r7, #28]
 8011622:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8011624:	4610      	mov	r0, r2
 8011626:	4798      	blx	r3

    /* Suspend thread with a "completed" state.  */

    /* Determine if the application is using mutexes.  */
    if (_tx_thread_mutex_release != TX_NULL)
 8011628:	4b1d      	ldr	r3, [pc, #116]	; (80116a0 <_tx_thread_shell_entry+0x90>)
 801162a:	681b      	ldr	r3, [r3, #0]
 801162c:	2b00      	cmp	r3, #0
 801162e:	d003      	beq.n	8011638 <_tx_thread_shell_entry+0x28>
    {

        /* Yes, call the mutex release function via a function pointer that
           is setup during mutex initialization.  */
        (_tx_thread_mutex_release)(thread_ptr);
 8011630:	4b1b      	ldr	r3, [pc, #108]	; (80116a0 <_tx_thread_shell_entry+0x90>)
 8011632:	681b      	ldr	r3, [r3, #0]
 8011634:	69f8      	ldr	r0, [r7, #28]
 8011636:	4798      	blx	r3
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8011638:	f3ef 8310 	mrs	r3, PRIMASK
 801163c:	607b      	str	r3, [r7, #4]
    return(posture);
 801163e:	687b      	ldr	r3, [r7, #4]
    int_posture = __get_interrupt_posture();
 8011640:	603b      	str	r3, [r7, #0]
    __asm__ volatile ("CPSID i" : : : "memory");
 8011642:	b672      	cpsid	i
    return(int_posture);
 8011644:	683b      	ldr	r3, [r7, #0]
    }

    /* Lockout interrupts while the thread state is setup.  */
    TX_DISABLE
 8011646:	61bb      	str	r3, [r7, #24]
    entry_exit_notify =  thread_ptr -> tx_thread_entry_exit_notify;
#endif

    /* Set the status to suspending, in order to indicate the suspension
       is in progress.  */
    thread_ptr -> tx_thread_state =  TX_COMPLETED;
 8011648:	69fb      	ldr	r3, [r7, #28]
 801164a:	2201      	movs	r2, #1
 801164c:	631a      	str	r2, [r3, #48]	; 0x30
    /* Restore interrupts.  */
    TX_RESTORE
#else

    /* Set the suspending flag. */
    thread_ptr -> tx_thread_suspending =  TX_TRUE;
 801164e:	69fb      	ldr	r3, [r7, #28]
 8011650:	2201      	movs	r2, #1
 8011652:	639a      	str	r2, [r3, #56]	; 0x38

    /* Setup for no timeout period.  */
    thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 8011654:	69fb      	ldr	r3, [r7, #28]
 8011656:	2200      	movs	r2, #0
 8011658:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 801165a:	4b12      	ldr	r3, [pc, #72]	; (80116a4 <_tx_thread_shell_entry+0x94>)
 801165c:	681b      	ldr	r3, [r3, #0]
 801165e:	3301      	adds	r3, #1
 8011660:	4a10      	ldr	r2, [pc, #64]	; (80116a4 <_tx_thread_shell_entry+0x94>)
 8011662:	6013      	str	r3, [r2, #0]
 8011664:	69bb      	ldr	r3, [r7, #24]
 8011666:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8011668:	68bb      	ldr	r3, [r7, #8]
 801166a:	f383 8810 	msr	PRIMASK, r3
}
 801166e:	bf00      	nop
    __asm__ volatile (" MRS  %0,CONTROL ": "=r" (control_value) );
 8011670:	f3ef 8314 	mrs	r3, CONTROL
 8011674:	60fb      	str	r3, [r7, #12]
    return(control_value);
 8011676:	68fb      	ldr	r3, [r7, #12]

    /* Restore interrupts.  */
    TX_RESTORE

    /* Perform any additional activities for tool or user purpose.  */
    TX_THREAD_COMPLETED_EXTENSION(thread_ptr)
 8011678:	617b      	str	r3, [r7, #20]
 801167a:	697b      	ldr	r3, [r7, #20]
 801167c:	f023 0304 	bic.w	r3, r3, #4
 8011680:	617b      	str	r3, [r7, #20]
 8011682:	697b      	ldr	r3, [r7, #20]
 8011684:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" MSR  CONTROL,%0": : "r" (control_value): "memory" );
 8011686:	693b      	ldr	r3, [r7, #16]
 8011688:	f383 8814 	msr	CONTROL, r3
}
 801168c:	bf00      	nop
        (entry_exit_notify)(thread_ptr, TX_THREAD_EXIT);
    }
#endif

    /* Call actual thread suspension routine.  */
    _tx_thread_system_suspend(thread_ptr);
 801168e:	69f8      	ldr	r0, [r7, #28]
 8011690:	f000 fa34 	bl	8011afc <_tx_thread_system_suspend>
#ifdef TX_SAFETY_CRITICAL

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif
}
 8011694:	bf00      	nop
 8011696:	3720      	adds	r7, #32
 8011698:	46bd      	mov	sp, r7
 801169a:	bd80      	pop	{r7, pc}
 801169c:	20002f78 	.word	0x20002f78
 80116a0:	20003014 	.word	0x20003014
 80116a4:	20003010 	.word	0x20003010

080116a8 <_tx_thread_sleep>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_sleep(ULONG timer_ticks)
{
 80116a8:	b580      	push	{r7, lr}
 80116aa:	b08e      	sub	sp, #56	; 0x38
 80116ac:	af00      	add	r7, sp, #0
 80116ae:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80116b0:	f3ef 8310 	mrs	r3, PRIMASK
 80116b4:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 80116b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
    int_posture = __get_interrupt_posture();
 80116b8:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 80116ba:	b672      	cpsid	i
    return(int_posture);
 80116bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
UINT            status;
TX_THREAD       *thread_ptr;


    /* Lockout interrupts while the thread is being resumed.  */
    TX_DISABLE
 80116be:	633b      	str	r3, [r7, #48]	; 0x30

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 80116c0:	4b35      	ldr	r3, [pc, #212]	; (8011798 <_tx_thread_sleep+0xf0>)
 80116c2:	681b      	ldr	r3, [r3, #0]
 80116c4:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Determine if this is a legal request.  */

    /* Is there a current thread?  */
    if (thread_ptr == TX_NULL)
 80116c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80116c8:	2b00      	cmp	r3, #0
 80116ca:	d108      	bne.n	80116de <_tx_thread_sleep+0x36>
 80116cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80116ce:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80116d0:	6a3b      	ldr	r3, [r7, #32]
 80116d2:	f383 8810 	msr	PRIMASK, r3
}
 80116d6:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Illegal caller of this service.  */
        status =  TX_CALLER_ERROR;
 80116d8:	2313      	movs	r3, #19
 80116da:	637b      	str	r3, [r7, #52]	; 0x34
 80116dc:	e056      	b.n	801178c <_tx_thread_sleep+0xe4>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80116de:	f3ef 8305 	mrs	r3, IPSR
 80116e2:	61fb      	str	r3, [r7, #28]
    return(ipsr_value);
 80116e4:	69fa      	ldr	r2, [r7, #28]
    }

    /* Is the caller an ISR or Initialization?  */
    else if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 80116e6:	4b2d      	ldr	r3, [pc, #180]	; (801179c <_tx_thread_sleep+0xf4>)
 80116e8:	681b      	ldr	r3, [r3, #0]
 80116ea:	4313      	orrs	r3, r2
 80116ec:	2b00      	cmp	r3, #0
 80116ee:	d008      	beq.n	8011702 <_tx_thread_sleep+0x5a>
 80116f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80116f2:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80116f4:	69bb      	ldr	r3, [r7, #24]
 80116f6:	f383 8810 	msr	PRIMASK, r3
}
 80116fa:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Illegal caller of this service.  */
        status =  TX_CALLER_ERROR;
 80116fc:	2313      	movs	r3, #19
 80116fe:	637b      	str	r3, [r7, #52]	; 0x34
 8011700:	e044      	b.n	801178c <_tx_thread_sleep+0xe4>
    }

#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Is the caller the system timer thread?  */
    else if (thread_ptr == &_tx_timer_thread)
 8011702:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011704:	4a26      	ldr	r2, [pc, #152]	; (80117a0 <_tx_thread_sleep+0xf8>)
 8011706:	4293      	cmp	r3, r2
 8011708:	d108      	bne.n	801171c <_tx_thread_sleep+0x74>
 801170a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801170c:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801170e:	697b      	ldr	r3, [r7, #20]
 8011710:	f383 8810 	msr	PRIMASK, r3
}
 8011714:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Illegal caller of this service.  */
        status =  TX_CALLER_ERROR;
 8011716:	2313      	movs	r3, #19
 8011718:	637b      	str	r3, [r7, #52]	; 0x34
 801171a:	e037      	b.n	801178c <_tx_thread_sleep+0xe4>
    }
#endif

    /* Determine if the requested number of ticks is zero.  */
    else if (timer_ticks == ((ULONG) 0))
 801171c:	687b      	ldr	r3, [r7, #4]
 801171e:	2b00      	cmp	r3, #0
 8011720:	d108      	bne.n	8011734 <_tx_thread_sleep+0x8c>
 8011722:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011724:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8011726:	693b      	ldr	r3, [r7, #16]
 8011728:	f383 8810 	msr	PRIMASK, r3
}
 801172c:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Just return with a successful status.  */
        status =  TX_SUCCESS;
 801172e:	2300      	movs	r3, #0
 8011730:	637b      	str	r3, [r7, #52]	; 0x34
 8011732:	e02b      	b.n	801178c <_tx_thread_sleep+0xe4>
    }
    else
    {

        /* Determine if the preempt disable flag is non-zero.  */
        if (_tx_thread_preempt_disable != ((UINT) 0))
 8011734:	4b1b      	ldr	r3, [pc, #108]	; (80117a4 <_tx_thread_sleep+0xfc>)
 8011736:	681b      	ldr	r3, [r3, #0]
 8011738:	2b00      	cmp	r3, #0
 801173a:	d008      	beq.n	801174e <_tx_thread_sleep+0xa6>
 801173c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801173e:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8011740:	68fb      	ldr	r3, [r7, #12]
 8011742:	f383 8810 	msr	PRIMASK, r3
}
 8011746:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
            status =  TX_CALLER_ERROR;
 8011748:	2313      	movs	r3, #19
 801174a:	637b      	str	r3, [r7, #52]	; 0x34
 801174c:	e01e      	b.n	801178c <_tx_thread_sleep+0xe4>
            TX_EL_THREAD_SLEEP_INSERT

            /* Suspend the current thread.  */

            /* Set the state to suspended.  */
            thread_ptr -> tx_thread_state =    TX_SLEEP;
 801174e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011750:	2204      	movs	r2, #4
 8011752:	631a      	str	r2, [r3, #48]	; 0x30
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Set the suspending flag. */
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8011754:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011756:	2201      	movs	r2, #1
 8011758:	639a      	str	r2, [r3, #56]	; 0x38

            /* Initialize the status to successful.  */
            thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 801175a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801175c:	2200      	movs	r2, #0
 801175e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

            /* Setup the timeout period.  */
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  timer_ticks;
 8011762:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011764:	687a      	ldr	r2, [r7, #4]
 8011766:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 8011768:	4b0e      	ldr	r3, [pc, #56]	; (80117a4 <_tx_thread_sleep+0xfc>)
 801176a:	681b      	ldr	r3, [r3, #0]
 801176c:	3301      	adds	r3, #1
 801176e:	4a0d      	ldr	r2, [pc, #52]	; (80117a4 <_tx_thread_sleep+0xfc>)
 8011770:	6013      	str	r3, [r2, #0]
 8011772:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011774:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8011776:	68bb      	ldr	r3, [r7, #8]
 8011778:	f383 8810 	msr	PRIMASK, r3
}
 801177c:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Call actual thread suspension routine.  */
            _tx_thread_system_suspend(thread_ptr);
 801177e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011780:	f000 f9bc 	bl	8011afc <_tx_thread_system_suspend>
#endif

            /* Return status to the caller.  */
            status =  thread_ptr -> tx_thread_suspend_status;
 8011784:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011786:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801178a:	637b      	str	r3, [r7, #52]	; 0x34
        }
    }

    /* Return completion status.  */
    return(status);
 801178c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 801178e:	4618      	mov	r0, r3
 8011790:	3738      	adds	r7, #56	; 0x38
 8011792:	46bd      	mov	sp, r7
 8011794:	bd80      	pop	{r7, pc}
 8011796:	bf00      	nop
 8011798:	20002f78 	.word	0x20002f78
 801179c:	20000010 	.word	0x20000010
 80117a0:	200030c0 	.word	0x200030c0
 80117a4:	20003010 	.word	0x20003010

080117a8 <_tx_thread_suspend>:
/*                                            a MISRA compliance issue,   */
/*                                            resulting in version 6.1.1  */
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_suspend(TX_THREAD *thread_ptr)
{
 80117a8:	b580      	push	{r7, lr}
 80117aa:	b08a      	sub	sp, #40	; 0x28
 80117ac:	af00      	add	r7, sp, #0
 80117ae:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80117b0:	f3ef 8310 	mrs	r3, PRIMASK
 80117b4:	61bb      	str	r3, [r7, #24]
    return(posture);
 80117b6:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 80117b8:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 80117ba:	b672      	cpsid	i
    return(int_posture);
 80117bc:	697b      	ldr	r3, [r7, #20]


#ifndef TX_INLINE_THREAD_RESUME_SUSPEND

    /* Lockout interrupts while the thread is being suspended.  */
    TX_DISABLE
 80117be:	623b      	str	r3, [r7, #32]

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 80117c0:	4b2e      	ldr	r3, [pc, #184]	; (801187c <_tx_thread_suspend+0xd4>)
 80117c2:	681b      	ldr	r3, [r3, #0]
 80117c4:	61fb      	str	r3, [r7, #28]

    /* Log this kernel call.  */
    TX_EL_THREAD_SUSPEND_INSERT

    /* Check the specified thread's current status.  */
    if (thread_ptr -> tx_thread_state == TX_READY)
 80117c6:	687b      	ldr	r3, [r7, #4]
 80117c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80117ca:	2b00      	cmp	r3, #0
 80117cc:	d130      	bne.n	8011830 <_tx_thread_suspend+0x88>
    {

        /* Initialize status to success.  */
        status =  TX_SUCCESS;
 80117ce:	2300      	movs	r3, #0
 80117d0:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80117d2:	f3ef 8305 	mrs	r3, IPSR
 80117d6:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 80117d8:	693a      	ldr	r2, [r7, #16]

        /* Determine if we are in a thread context.  */
        if (TX_THREAD_GET_SYSTEM_STATE() == ((ULONG) 0))
 80117da:	4b29      	ldr	r3, [pc, #164]	; (8011880 <_tx_thread_suspend+0xd8>)
 80117dc:	681b      	ldr	r3, [r3, #0]
 80117de:	4313      	orrs	r3, r2
 80117e0:	2b00      	cmp	r3, #0
 80117e2:	d109      	bne.n	80117f8 <_tx_thread_suspend+0x50>
        {

            /* Yes, we are in a thread context.  */

            /* Determine if the current thread is also the suspending thread.  */
            if (current_thread == thread_ptr)
 80117e4:	69fa      	ldr	r2, [r7, #28]
 80117e6:	687b      	ldr	r3, [r7, #4]
 80117e8:	429a      	cmp	r2, r3
 80117ea:	d105      	bne.n	80117f8 <_tx_thread_suspend+0x50>
            {

                /* Now determine if the preempt disable flag is non-zero.  */
                if (_tx_thread_preempt_disable != ((UINT) 0))
 80117ec:	4b25      	ldr	r3, [pc, #148]	; (8011884 <_tx_thread_suspend+0xdc>)
 80117ee:	681b      	ldr	r3, [r3, #0]
 80117f0:	2b00      	cmp	r3, #0
 80117f2:	d001      	beq.n	80117f8 <_tx_thread_suspend+0x50>
                {

                    /* Current thread cannot suspend when the preempt disable flag is non-zero,
                       return an error.  */
                    status =  TX_SUSPEND_ERROR;
 80117f4:	2314      	movs	r3, #20
 80117f6:	627b      	str	r3, [r7, #36]	; 0x24
                }
            }
        }

        /* Determine if the status is still successful.  */
        if (status == TX_SUCCESS)
 80117f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80117fa:	2b00      	cmp	r3, #0
 80117fc:	d132      	bne.n	8011864 <_tx_thread_suspend+0xbc>
        {

            /* Set the state to suspended.  */
            thread_ptr -> tx_thread_state =    TX_SUSPENDED;
 80117fe:	687b      	ldr	r3, [r7, #4]
 8011800:	2203      	movs	r2, #3
 8011802:	631a      	str	r2, [r3, #48]	; 0x30
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Set the suspending flag. */
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8011804:	687b      	ldr	r3, [r7, #4]
 8011806:	2201      	movs	r2, #1
 8011808:	639a      	str	r2, [r3, #56]	; 0x38

            /* Setup for no timeout period.  */
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 801180a:	687b      	ldr	r3, [r7, #4]
 801180c:	2200      	movs	r2, #0
 801180e:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 8011810:	4b1c      	ldr	r3, [pc, #112]	; (8011884 <_tx_thread_suspend+0xdc>)
 8011812:	681b      	ldr	r3, [r3, #0]
 8011814:	3301      	adds	r3, #1
 8011816:	4a1b      	ldr	r2, [pc, #108]	; (8011884 <_tx_thread_suspend+0xdc>)
 8011818:	6013      	str	r3, [r2, #0]
 801181a:	6a3b      	ldr	r3, [r7, #32]
 801181c:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801181e:	68fb      	ldr	r3, [r7, #12]
 8011820:	f383 8810 	msr	PRIMASK, r3
}
 8011824:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Call actual thread suspension routine.  */
            _tx_thread_system_suspend(thread_ptr);
 8011826:	6878      	ldr	r0, [r7, #4]
 8011828:	f000 f968 	bl	8011afc <_tx_thread_system_suspend>
            /* Return success.  */
            status =  TX_SUCCESS;
#else

            /* If MISRA is not enabled, return directly.  */
            return(TX_SUCCESS);
 801182c:	2300      	movs	r3, #0
 801182e:	e020      	b.n	8011872 <_tx_thread_suspend+0xca>
#endif
        }
    }
    else if (thread_ptr -> tx_thread_state == TX_TERMINATED)
 8011830:	687b      	ldr	r3, [r7, #4]
 8011832:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011834:	2b02      	cmp	r3, #2
 8011836:	d102      	bne.n	801183e <_tx_thread_suspend+0x96>
    {

        /* Thread is terminated.  */
        status =  TX_SUSPEND_ERROR;
 8011838:	2314      	movs	r3, #20
 801183a:	627b      	str	r3, [r7, #36]	; 0x24
 801183c:	e012      	b.n	8011864 <_tx_thread_suspend+0xbc>
    }
    else if (thread_ptr -> tx_thread_state == TX_COMPLETED)
 801183e:	687b      	ldr	r3, [r7, #4]
 8011840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011842:	2b01      	cmp	r3, #1
 8011844:	d102      	bne.n	801184c <_tx_thread_suspend+0xa4>
    {

        /* Thread is completed.  */
        status =  TX_SUSPEND_ERROR;
 8011846:	2314      	movs	r3, #20
 8011848:	627b      	str	r3, [r7, #36]	; 0x24
 801184a:	e00b      	b.n	8011864 <_tx_thread_suspend+0xbc>
    }
    else if (thread_ptr -> tx_thread_state == TX_SUSPENDED)
 801184c:	687b      	ldr	r3, [r7, #4]
 801184e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011850:	2b03      	cmp	r3, #3
 8011852:	d102      	bne.n	801185a <_tx_thread_suspend+0xb2>
    {

        /* Already suspended, just set status to success.  */
        status =  TX_SUCCESS;
 8011854:	2300      	movs	r3, #0
 8011856:	627b      	str	r3, [r7, #36]	; 0x24
 8011858:	e004      	b.n	8011864 <_tx_thread_suspend+0xbc>
    }
    else
    {

        /* Just set the delayed suspension flag.  */
        thread_ptr -> tx_thread_delayed_suspend =  TX_TRUE;
 801185a:	687b      	ldr	r3, [r7, #4]
 801185c:	2201      	movs	r2, #1
 801185e:	635a      	str	r2, [r3, #52]	; 0x34

        /* Set status to success.  */
        status =  TX_SUCCESS;
 8011860:	2300      	movs	r3, #0
 8011862:	627b      	str	r3, [r7, #36]	; 0x24
 8011864:	6a3b      	ldr	r3, [r7, #32]
 8011866:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8011868:	68bb      	ldr	r3, [r7, #8]
 801186a:	f383 8810 	msr	PRIMASK, r3
}
 801186e:	bf00      	nop
    /* Restore interrupts.  */
    TX_RESTORE

    /* Always return success, since this function does not perform error
       checking.  */
    return(status);
 8011870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    TX_RESTORE

    /* Return completion status.  */
    return(status);
#endif
}
 8011872:	4618      	mov	r0, r3
 8011874:	3728      	adds	r7, #40	; 0x28
 8011876:	46bd      	mov	sp, r7
 8011878:	bd80      	pop	{r7, pc}
 801187a:	bf00      	nop
 801187c:	20002f78 	.word	0x20002f78
 8011880:	20000010 	.word	0x20000010
 8011884:	20003010 	.word	0x20003010

08011888 <_tx_thread_system_preempt_check>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_preempt_check(VOID)
{
 8011888:	b480      	push	{r7}
 801188a:	b089      	sub	sp, #36	; 0x24
 801188c:	af00      	add	r7, sp, #0
TX_THREAD       *current_thread;
TX_THREAD       *thread_ptr;


    /* Combine the system state and preempt disable flags into one for comparison.  */
    TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 801188e:	4b17      	ldr	r3, [pc, #92]	; (80118ec <_tx_thread_system_preempt_check+0x64>)
 8011890:	681b      	ldr	r3, [r3, #0]
 8011892:	61fb      	str	r3, [r7, #28]

    /* Determine if we are in a system state (ISR or Initialization) or internal preemption is disabled.  */
    if (combined_flags == ((ULONG) 0))
 8011894:	69fb      	ldr	r3, [r7, #28]
 8011896:	2b00      	cmp	r3, #0
 8011898:	d121      	bne.n	80118de <_tx_thread_system_preempt_check+0x56>
    {

        /* No, at thread execution level so continue checking for preemption.  */

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(current_thread)
 801189a:	4b15      	ldr	r3, [pc, #84]	; (80118f0 <_tx_thread_system_preempt_check+0x68>)
 801189c:	681b      	ldr	r3, [r3, #0]
 801189e:	61bb      	str	r3, [r7, #24]

        /* Pickup the next execute pointer.  */
        thread_ptr =  _tx_thread_execute_ptr;
 80118a0:	4b14      	ldr	r3, [pc, #80]	; (80118f4 <_tx_thread_system_preempt_check+0x6c>)
 80118a2:	681b      	ldr	r3, [r3, #0]
 80118a4:	617b      	str	r3, [r7, #20]

        /* Determine if preemption should take place.  */
        if (current_thread != thread_ptr)
 80118a6:	69ba      	ldr	r2, [r7, #24]
 80118a8:	697b      	ldr	r3, [r7, #20]
 80118aa:	429a      	cmp	r2, r3
 80118ac:	d017      	beq.n	80118de <_tx_thread_system_preempt_check+0x56>
__attribute__( ( always_inline ) ) static inline void _tx_thread_system_return_inline(void)
{
UINT interrupt_save;

    /* Set PendSV to invoke ThreadX scheduler.  */
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 80118ae:	4b12      	ldr	r3, [pc, #72]	; (80118f8 <_tx_thread_system_preempt_check+0x70>)
 80118b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80118b4:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80118b6:	f3ef 8305 	mrs	r3, IPSR
 80118ba:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 80118bc:	693b      	ldr	r3, [r7, #16]
    if (_tx_ipsr_get() == 0)
 80118be:	2b00      	cmp	r3, #0
 80118c0:	d10c      	bne.n	80118dc <_tx_thread_system_preempt_check+0x54>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80118c2:	f3ef 8310 	mrs	r3, PRIMASK
 80118c6:	60fb      	str	r3, [r7, #12]
    return(posture);
 80118c8:	68fb      	ldr	r3, [r7, #12]
    {
        interrupt_save = __get_interrupt_posture();
 80118ca:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("CPSIE  i": : : "memory");
 80118cc:	b662      	cpsie	i
}
 80118ce:	bf00      	nop
 80118d0:	68bb      	ldr	r3, [r7, #8]
 80118d2:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80118d4:	687b      	ldr	r3, [r7, #4]
 80118d6:	f383 8810 	msr	PRIMASK, r3
}
 80118da:	bf00      	nop
#else
        __enable_interrupts();
#endif
        __restore_interrupt(interrupt_save);
    }
}
 80118dc:	bf00      	nop

            /* Return to the system so the higher priority thread can be scheduled.  */
            _tx_thread_system_return();
        }
    }
}
 80118de:	bf00      	nop
 80118e0:	3724      	adds	r7, #36	; 0x24
 80118e2:	46bd      	mov	sp, r7
 80118e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118e8:	4770      	bx	lr
 80118ea:	bf00      	nop
 80118ec:	20003010 	.word	0x20003010
 80118f0:	20002f78 	.word	0x20002f78
 80118f4:	20002f7c 	.word	0x20002f7c
 80118f8:	e000ed04 	.word	0xe000ed04

080118fc <_tx_thread_system_resume>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_resume(TX_THREAD *thread_ptr)
#ifndef TX_NOT_INTERRUPTABLE
{
 80118fc:	b580      	push	{r7, lr}
 80118fe:	b096      	sub	sp, #88	; 0x58
 8011900:	af00      	add	r7, sp, #0
 8011902:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8011904:	f3ef 8310 	mrs	r3, PRIMASK
 8011908:	637b      	str	r3, [r7, #52]	; 0x34
    return(posture);
 801190a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    int_posture = __get_interrupt_posture();
 801190c:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("CPSID i" : : : "memory");
 801190e:	b672      	cpsid	i
    return(int_posture);
 8011910:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    /* Check this thread's stack.  */
    TX_THREAD_STACK_CHECK(thread_ptr)
#endif

    /* Lockout interrupts while the thread is being resumed.  */
    TX_DISABLE
 8011912:	657b      	str	r3, [r7, #84]	; 0x54

#ifndef TX_NO_TIMER

    /* Deactivate the timeout timer if necessary.  */
    if (thread_ptr -> tx_thread_timer.tx_timer_internal_list_head != TX_NULL)
 8011914:	687b      	ldr	r3, [r7, #4]
 8011916:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011918:	2b00      	cmp	r3, #0
 801191a:	d005      	beq.n	8011928 <_tx_thread_system_resume+0x2c>
    {

        /* Deactivate the thread's timeout timer.  */
        _tx_timer_system_deactivate(&(thread_ptr -> tx_thread_timer));
 801191c:	687b      	ldr	r3, [r7, #4]
 801191e:	334c      	adds	r3, #76	; 0x4c
 8011920:	4618      	mov	r0, r3
 8011922:	f000 fb91 	bl	8012048 <_tx_timer_system_deactivate>
 8011926:	e002      	b.n	801192e <_tx_thread_system_resume+0x32>
    }
    else
    {

        /* Clear the remaining time to ensure timer doesn't get activated.  */
        thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 8011928:	687b      	ldr	r3, [r7, #4]
 801192a:	2200      	movs	r2, #0
 801192c:	64da      	str	r2, [r3, #76]	; 0x4c
        time_stamp =  entry_ptr -> tx_trace_buffer_entry_time_stamp;
    }
#endif

    /* Decrease the preempt disabled count.  */
    _tx_thread_preempt_disable--;
 801192e:	4b6c      	ldr	r3, [pc, #432]	; (8011ae0 <_tx_thread_system_resume+0x1e4>)
 8011930:	681b      	ldr	r3, [r3, #0]
 8011932:	3b01      	subs	r3, #1
 8011934:	4a6a      	ldr	r2, [pc, #424]	; (8011ae0 <_tx_thread_system_resume+0x1e4>)
 8011936:	6013      	str	r3, [r2, #0]

    /* Determine if the thread is in the process of suspending.  If so, the thread
       control block is already on the linked list so nothing needs to be done.  */
    if (thread_ptr -> tx_thread_suspending == TX_FALSE)
 8011938:	687b      	ldr	r3, [r7, #4]
 801193a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801193c:	2b00      	cmp	r3, #0
 801193e:	f040 8083 	bne.w	8011a48 <_tx_thread_system_resume+0x14c>
    {

        /* Thread is not in the process of suspending. Now check to make sure the thread
           has not already been resumed.  */
        if (thread_ptr -> tx_thread_state != TX_READY)
 8011942:	687b      	ldr	r3, [r7, #4]
 8011944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011946:	2b00      	cmp	r3, #0
 8011948:	f000 8097 	beq.w	8011a7a <_tx_thread_system_resume+0x17e>
        {

            /* No, now check to see if the delayed suspension flag is set.  */
            if (thread_ptr -> tx_thread_delayed_suspend == TX_FALSE)
 801194c:	687b      	ldr	r3, [r7, #4]
 801194e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011950:	2b00      	cmp	r3, #0
 8011952:	d172      	bne.n	8011a3a <_tx_thread_system_resume+0x13e>
                /* Resume the thread!  */

                /* Make this thread ready.  */

                /* Change the state to ready.  */
                thread_ptr -> tx_thread_state =  TX_READY;
 8011954:	687b      	ldr	r3, [r7, #4]
 8011956:	2200      	movs	r2, #0
 8011958:	631a      	str	r2, [r3, #48]	; 0x30

                /* Pickup priority of thread.  */
                priority =  thread_ptr -> tx_thread_priority;
 801195a:	687b      	ldr	r3, [r7, #4]
 801195c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801195e:	653b      	str	r3, [r7, #80]	; 0x50
                thread_ptr -> tx_thread_performance_resume_count++;
#endif

                /* Determine if there are other threads at this priority that are
                   ready.  */
                head_ptr =  _tx_thread_priority_list[priority];
 8011960:	4a60      	ldr	r2, [pc, #384]	; (8011ae4 <_tx_thread_system_resume+0x1e8>)
 8011962:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011964:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011968:	64fb      	str	r3, [r7, #76]	; 0x4c
                if (head_ptr == TX_NULL)
 801196a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801196c:	2b00      	cmp	r3, #0
 801196e:	d154      	bne.n	8011a1a <_tx_thread_system_resume+0x11e>
                {

                    /* First thread at this priority ready.  Add to the front of the list.  */
                    _tx_thread_priority_list[priority] =       thread_ptr;
 8011970:	495c      	ldr	r1, [pc, #368]	; (8011ae4 <_tx_thread_system_resume+0x1e8>)
 8011972:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011974:	687a      	ldr	r2, [r7, #4]
 8011976:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                    thread_ptr -> tx_thread_ready_next =       thread_ptr;
 801197a:	687b      	ldr	r3, [r7, #4]
 801197c:	687a      	ldr	r2, [r7, #4]
 801197e:	621a      	str	r2, [r3, #32]
                    thread_ptr -> tx_thread_ready_previous =   thread_ptr;
 8011980:	687b      	ldr	r3, [r7, #4]
 8011982:	687a      	ldr	r2, [r7, #4]
 8011984:	625a      	str	r2, [r3, #36]	; 0x24
                    TX_DIV32_BIT_SET(priority, priority_bit)
                    _tx_thread_priority_map_active =  _tx_thread_priority_map_active | priority_bit;
#endif

                    /* Or in the thread's priority bit.  */
                    TX_MOD32_BIT_SET(priority, priority_bit)
 8011986:	2201      	movs	r2, #1
 8011988:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801198a:	fa02 f303 	lsl.w	r3, r2, r3
 801198e:	647b      	str	r3, [r7, #68]	; 0x44
                    _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] | priority_bit;
 8011990:	4b55      	ldr	r3, [pc, #340]	; (8011ae8 <_tx_thread_system_resume+0x1ec>)
 8011992:	681a      	ldr	r2, [r3, #0]
 8011994:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011996:	4313      	orrs	r3, r2
 8011998:	4a53      	ldr	r2, [pc, #332]	; (8011ae8 <_tx_thread_system_resume+0x1ec>)
 801199a:	6013      	str	r3, [r2, #0]

                    /* Determine if this newly ready thread is the highest priority.  */
                    if (priority < _tx_thread_highest_priority)
 801199c:	4b53      	ldr	r3, [pc, #332]	; (8011aec <_tx_thread_system_resume+0x1f0>)
 801199e:	681b      	ldr	r3, [r3, #0]
 80119a0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80119a2:	429a      	cmp	r2, r3
 80119a4:	d269      	bcs.n	8011a7a <_tx_thread_system_resume+0x17e>
                    {

                        /* A new highest priority thread is present. */

                        /* Update the highest priority variable.  */
                        _tx_thread_highest_priority =  priority;
 80119a6:	4a51      	ldr	r2, [pc, #324]	; (8011aec <_tx_thread_system_resume+0x1f0>)
 80119a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80119aa:	6013      	str	r3, [r2, #0]

                        /* Pickup the execute pointer. Since it is going to be referenced multiple
                           times, it is placed in a local variable.  */
                        execute_ptr =  _tx_thread_execute_ptr;
 80119ac:	4b50      	ldr	r3, [pc, #320]	; (8011af0 <_tx_thread_system_resume+0x1f4>)
 80119ae:	681b      	ldr	r3, [r3, #0]
 80119b0:	643b      	str	r3, [r7, #64]	; 0x40

                        /* Determine if no thread is currently executing.  */
                        if (execute_ptr == TX_NULL)
 80119b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80119b4:	2b00      	cmp	r3, #0
 80119b6:	d103      	bne.n	80119c0 <_tx_thread_system_resume+0xc4>
                        {

                            /* Simply setup the execute pointer.  */
                            _tx_thread_execute_ptr =  thread_ptr;
 80119b8:	4a4d      	ldr	r2, [pc, #308]	; (8011af0 <_tx_thread_system_resume+0x1f4>)
 80119ba:	687b      	ldr	r3, [r7, #4]
 80119bc:	6013      	str	r3, [r2, #0]
 80119be:	e05c      	b.n	8011a7a <_tx_thread_system_resume+0x17e>
                        {

                            /* Another thread has been scheduled for execution.  */

                            /* Check to see if this is a higher priority thread and determine if preemption is allowed.  */
                            if (priority < execute_ptr -> tx_thread_preempt_threshold)
 80119c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80119c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80119c4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80119c6:	429a      	cmp	r2, r3
 80119c8:	d257      	bcs.n	8011a7a <_tx_thread_system_resume+0x17e>
                                execute_ptr -> tx_thread_performance_last_preempting_thread =  thread_ptr;

#endif

                                /* Yes, modify the execute thread pointer.  */
                                _tx_thread_execute_ptr =  thread_ptr;
 80119ca:	4a49      	ldr	r2, [pc, #292]	; (8011af0 <_tx_thread_system_resume+0x1f4>)
 80119cc:	687b      	ldr	r3, [r7, #4]
 80119ce:	6013      	str	r3, [r2, #0]
 80119d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80119d2:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80119d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80119d6:	f383 8810 	msr	PRIMASK, r3
}
 80119da:	bf00      	nop
                                TX_THREAD_STACK_CHECK(thread_ptr)
#endif

                                /* Now determine if preemption should take place. This is only possible if the current thread pointer is
                                   not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
                                TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 80119dc:	4b40      	ldr	r3, [pc, #256]	; (8011ae0 <_tx_thread_system_resume+0x1e4>)
 80119de:	681b      	ldr	r3, [r3, #0]
 80119e0:	63fb      	str	r3, [r7, #60]	; 0x3c
                                if (combined_flags == ((ULONG) 0))
 80119e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80119e4:	2b00      	cmp	r3, #0
 80119e6:	d174      	bne.n	8011ad2 <_tx_thread_system_resume+0x1d6>
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 80119e8:	4b42      	ldr	r3, [pc, #264]	; (8011af4 <_tx_thread_system_resume+0x1f8>)
 80119ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80119ee:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80119f0:	f3ef 8305 	mrs	r3, IPSR
 80119f4:	62bb      	str	r3, [r7, #40]	; 0x28
    return(ipsr_value);
 80119f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
    if (_tx_ipsr_get() == 0)
 80119f8:	2b00      	cmp	r3, #0
 80119fa:	d10c      	bne.n	8011a16 <_tx_thread_system_resume+0x11a>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80119fc:	f3ef 8310 	mrs	r3, PRIMASK
 8011a00:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 8011a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
        interrupt_save = __get_interrupt_posture();
 8011a04:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSIE  i": : : "memory");
 8011a06:	b662      	cpsie	i
}
 8011a08:	bf00      	nop
 8011a0a:	6a3b      	ldr	r3, [r7, #32]
 8011a0c:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8011a0e:	69fb      	ldr	r3, [r7, #28]
 8011a10:	f383 8810 	msr	PRIMASK, r3
}
 8011a14:	bf00      	nop
}
 8011a16:	bf00      	nop
                                    /* Preemption is needed - return to the system!  */
                                    _tx_thread_system_return();
                                }

                                /* Return in-line when MISRA is not enabled.  */
                                return;
 8011a18:	e05b      	b.n	8011ad2 <_tx_thread_system_resume+0x1d6>
                {

                    /* No, there are other threads at this priority already ready.  */

                    /* Just add this thread to the priority list.  */
                    tail_ptr =                                 head_ptr -> tx_thread_ready_previous;
 8011a1a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011a1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011a1e:	64bb      	str	r3, [r7, #72]	; 0x48
                    tail_ptr -> tx_thread_ready_next =         thread_ptr;
 8011a20:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011a22:	687a      	ldr	r2, [r7, #4]
 8011a24:	621a      	str	r2, [r3, #32]
                    head_ptr -> tx_thread_ready_previous =     thread_ptr;
 8011a26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011a28:	687a      	ldr	r2, [r7, #4]
 8011a2a:	625a      	str	r2, [r3, #36]	; 0x24
                    thread_ptr -> tx_thread_ready_previous =   tail_ptr;
 8011a2c:	687b      	ldr	r3, [r7, #4]
 8011a2e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011a30:	625a      	str	r2, [r3, #36]	; 0x24
                    thread_ptr -> tx_thread_ready_next =       head_ptr;
 8011a32:	687b      	ldr	r3, [r7, #4]
 8011a34:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8011a36:	621a      	str	r2, [r3, #32]
 8011a38:	e01f      	b.n	8011a7a <_tx_thread_system_resume+0x17e>
            /* Else, delayed suspend flag was set.  */
            else
            {

                /* Clear the delayed suspend flag and change the state.  */
                thread_ptr -> tx_thread_delayed_suspend =  TX_FALSE;
 8011a3a:	687b      	ldr	r3, [r7, #4]
 8011a3c:	2200      	movs	r2, #0
 8011a3e:	635a      	str	r2, [r3, #52]	; 0x34
                thread_ptr -> tx_thread_state =            TX_SUSPENDED;
 8011a40:	687b      	ldr	r3, [r7, #4]
 8011a42:	2203      	movs	r2, #3
 8011a44:	631a      	str	r2, [r3, #48]	; 0x30
 8011a46:	e018      	b.n	8011a7a <_tx_thread_system_resume+0x17e>
        /* A resumption occurred in the middle of a previous thread suspension.  */

        /* Make sure the type of suspension under way is not a terminate or
           thread completion.  In either of these cases, do not void the
           interrupted suspension processing.  */
        if (thread_ptr -> tx_thread_state != TX_COMPLETED)
 8011a48:	687b      	ldr	r3, [r7, #4]
 8011a4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011a4c:	2b01      	cmp	r3, #1
 8011a4e:	d014      	beq.n	8011a7a <_tx_thread_system_resume+0x17e>
        {

            /* Make sure the thread isn't terminated.  */
            if (thread_ptr -> tx_thread_state != TX_TERMINATED)
 8011a50:	687b      	ldr	r3, [r7, #4]
 8011a52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011a54:	2b02      	cmp	r3, #2
 8011a56:	d010      	beq.n	8011a7a <_tx_thread_system_resume+0x17e>
            {

                /* No, now check to see if the delayed suspension flag is set.  */
                if (thread_ptr -> tx_thread_delayed_suspend == TX_FALSE)
 8011a58:	687b      	ldr	r3, [r7, #4]
 8011a5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011a5c:	2b00      	cmp	r3, #0
 8011a5e:	d106      	bne.n	8011a6e <_tx_thread_system_resume+0x172>
                {

                    /* Clear the suspending flag.  */
                    thread_ptr -> tx_thread_suspending =   TX_FALSE;
 8011a60:	687b      	ldr	r3, [r7, #4]
 8011a62:	2200      	movs	r2, #0
 8011a64:	639a      	str	r2, [r3, #56]	; 0x38

                    /* Restore the state to ready.  */
                    thread_ptr -> tx_thread_state =        TX_READY;
 8011a66:	687b      	ldr	r3, [r7, #4]
 8011a68:	2200      	movs	r2, #0
 8011a6a:	631a      	str	r2, [r3, #48]	; 0x30
 8011a6c:	e005      	b.n	8011a7a <_tx_thread_system_resume+0x17e>
                }
                else
                {

                    /* Clear the delayed suspend flag and change the state.  */
                    thread_ptr -> tx_thread_delayed_suspend =  TX_FALSE;
 8011a6e:	687b      	ldr	r3, [r7, #4]
 8011a70:	2200      	movs	r2, #0
 8011a72:	635a      	str	r2, [r3, #52]	; 0x34
                    thread_ptr -> tx_thread_state =            TX_SUSPENDED;
 8011a74:	687b      	ldr	r3, [r7, #4]
 8011a76:	2203      	movs	r2, #3
 8011a78:	631a      	str	r2, [r3, #48]	; 0x30
        }
    }
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 8011a7a:	4b1f      	ldr	r3, [pc, #124]	; (8011af8 <_tx_thread_system_resume+0x1fc>)
 8011a7c:	681b      	ldr	r3, [r3, #0]
 8011a7e:	63bb      	str	r3, [r7, #56]	; 0x38
 8011a80:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011a82:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8011a84:	69bb      	ldr	r3, [r7, #24]
 8011a86:	f383 8810 	msr	PRIMASK, r3
}
 8011a8a:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Determine if a preemption condition is present.  */
    if (current_thread != _tx_thread_execute_ptr)
 8011a8c:	4b18      	ldr	r3, [pc, #96]	; (8011af0 <_tx_thread_system_resume+0x1f4>)
 8011a8e:	681b      	ldr	r3, [r3, #0]
 8011a90:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011a92:	429a      	cmp	r2, r3
 8011a94:	d020      	beq.n	8011ad8 <_tx_thread_system_resume+0x1dc>
        TX_THREAD_STACK_CHECK(thread_ptr)
#endif

        /* Now determine if preemption should take place. This is only possible if the current thread pointer is
           not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
        TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8011a96:	4b12      	ldr	r3, [pc, #72]	; (8011ae0 <_tx_thread_system_resume+0x1e4>)
 8011a98:	681b      	ldr	r3, [r3, #0]
 8011a9a:	63fb      	str	r3, [r7, #60]	; 0x3c
        if (combined_flags == ((ULONG) 0))
 8011a9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011a9e:	2b00      	cmp	r3, #0
 8011aa0:	d11a      	bne.n	8011ad8 <_tx_thread_system_resume+0x1dc>
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8011aa2:	4b14      	ldr	r3, [pc, #80]	; (8011af4 <_tx_thread_system_resume+0x1f8>)
 8011aa4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011aa8:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8011aaa:	f3ef 8305 	mrs	r3, IPSR
 8011aae:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 8011ab0:	697b      	ldr	r3, [r7, #20]
    if (_tx_ipsr_get() == 0)
 8011ab2:	2b00      	cmp	r3, #0
 8011ab4:	d10f      	bne.n	8011ad6 <_tx_thread_system_resume+0x1da>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8011ab6:	f3ef 8310 	mrs	r3, PRIMASK
 8011aba:	613b      	str	r3, [r7, #16]
    return(posture);
 8011abc:	693b      	ldr	r3, [r7, #16]
        interrupt_save = __get_interrupt_posture();
 8011abe:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("CPSIE  i": : : "memory");
 8011ac0:	b662      	cpsie	i
}
 8011ac2:	bf00      	nop
 8011ac4:	68fb      	ldr	r3, [r7, #12]
 8011ac6:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8011ac8:	68bb      	ldr	r3, [r7, #8]
 8011aca:	f383 8810 	msr	PRIMASK, r3
}
 8011ace:	bf00      	nop
}
 8011ad0:	e001      	b.n	8011ad6 <_tx_thread_system_resume+0x1da>
                                return;
 8011ad2:	bf00      	nop
 8011ad4:	e000      	b.n	8011ad8 <_tx_thread_system_resume+0x1dc>
 8011ad6:	bf00      	nop

            /* Preemption is needed - return to the system!  */
            _tx_thread_system_return();
        }
    }
}
 8011ad8:	3758      	adds	r7, #88	; 0x58
 8011ada:	46bd      	mov	sp, r7
 8011adc:	bd80      	pop	{r7, pc}
 8011ade:	bf00      	nop
 8011ae0:	20003010 	.word	0x20003010
 8011ae4:	20002f90 	.word	0x20002f90
 8011ae8:	20002f88 	.word	0x20002f88
 8011aec:	20002f8c 	.word	0x20002f8c
 8011af0:	20002f7c 	.word	0x20002f7c
 8011af4:	e000ed04 	.word	0xe000ed04
 8011af8:	20002f78 	.word	0x20002f78

08011afc <_tx_thread_system_suspend>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_suspend(TX_THREAD *thread_ptr)
#ifndef TX_NOT_INTERRUPTABLE
{
 8011afc:	b580      	push	{r7, lr}
 8011afe:	b09e      	sub	sp, #120	; 0x78
 8011b00:	af00      	add	r7, sp, #0
 8011b02:	6078      	str	r0, [r7, #4]
TX_TRACE_BUFFER_ENTRY       *entry_ptr;
ULONG                       time_stamp =  ((ULONG) 0);
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 8011b04:	4b81      	ldr	r3, [pc, #516]	; (8011d0c <_tx_thread_system_suspend+0x210>)
 8011b06:	681b      	ldr	r3, [r3, #0]
 8011b08:	677b      	str	r3, [r7, #116]	; 0x74
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8011b0a:	f3ef 8310 	mrs	r3, PRIMASK
 8011b0e:	64fb      	str	r3, [r7, #76]	; 0x4c
    return(posture);
 8011b10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    int_posture = __get_interrupt_posture();
 8011b12:	64bb      	str	r3, [r7, #72]	; 0x48
    __asm__ volatile ("CPSID i" : : : "memory");
 8011b14:	b672      	cpsid	i
    return(int_posture);
 8011b16:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    /* Check this thread's stack.  */
    TX_THREAD_STACK_CHECK(thread_ptr)
#endif

    /* Lockout interrupts while the thread is being suspended.  */
    TX_DISABLE
 8011b18:	673b      	str	r3, [r7, #112]	; 0x70

#ifndef TX_NO_TIMER

    /* Is the current thread suspending?  */
    if (thread_ptr == current_thread)
 8011b1a:	687a      	ldr	r2, [r7, #4]
 8011b1c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8011b1e:	429a      	cmp	r2, r3
 8011b20:	d112      	bne.n	8011b48 <_tx_thread_system_suspend+0x4c>
    {

        /* Pickup the wait option.  */
        timeout =  thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks;
 8011b22:	687b      	ldr	r3, [r7, #4]
 8011b24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011b26:	66fb      	str	r3, [r7, #108]	; 0x6c

        /* Determine if an activation is needed.  */
        if (timeout != TX_NO_WAIT)
 8011b28:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011b2a:	2b00      	cmp	r3, #0
 8011b2c:	d008      	beq.n	8011b40 <_tx_thread_system_suspend+0x44>
        {

            /* Make sure the suspension is not a wait-forever.  */
            if (timeout != TX_WAIT_FOREVER)
 8011b2e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011b30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011b34:	d004      	beq.n	8011b40 <_tx_thread_system_suspend+0x44>
            {

                /* Activate the thread timer with the timeout value setup in the caller.  */
                _tx_timer_system_activate(&(thread_ptr -> tx_thread_timer));
 8011b36:	687b      	ldr	r3, [r7, #4]
 8011b38:	334c      	adds	r3, #76	; 0x4c
 8011b3a:	4618      	mov	r0, r3
 8011b3c:	f000 fa22 	bl	8011f84 <_tx_timer_system_activate>
            }
        }

        /* Yes, reset time slice for current thread.  */
        _tx_timer_time_slice =  thread_ptr -> tx_thread_new_time_slice;
 8011b40:	687b      	ldr	r3, [r7, #4]
 8011b42:	69db      	ldr	r3, [r3, #28]
 8011b44:	4a72      	ldr	r2, [pc, #456]	; (8011d10 <_tx_thread_system_suspend+0x214>)
 8011b46:	6013      	str	r3, [r2, #0]
    }
#endif

    /* Decrease the preempt disabled count.  */
    _tx_thread_preempt_disable--;
 8011b48:	4b72      	ldr	r3, [pc, #456]	; (8011d14 <_tx_thread_system_suspend+0x218>)
 8011b4a:	681b      	ldr	r3, [r3, #0]
 8011b4c:	3b01      	subs	r3, #1
 8011b4e:	4a71      	ldr	r2, [pc, #452]	; (8011d14 <_tx_thread_system_suspend+0x218>)
 8011b50:	6013      	str	r3, [r2, #0]
    _tx_thread_performance_suspend_count++;
#endif

    /* Check to make sure the thread suspending flag is still set.  If not, it
       has already been resumed.  */
    if (thread_ptr -> tx_thread_suspending == TX_TRUE)
 8011b52:	687b      	ldr	r3, [r7, #4]
 8011b54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011b56:	2b01      	cmp	r3, #1
 8011b58:	f040 80a6 	bne.w	8011ca8 <_tx_thread_system_suspend+0x1ac>
            time_stamp =  entry_ptr -> tx_trace_buffer_entry_time_stamp;
        }
#endif

        /* Actually suspend this thread.  But first, clear the suspending flag.  */
        thread_ptr -> tx_thread_suspending =  TX_FALSE;
 8011b5c:	687b      	ldr	r3, [r7, #4]
 8011b5e:	2200      	movs	r2, #0
 8011b60:	639a      	str	r2, [r3, #56]	; 0x38

        /* Pickup priority of thread.  */
        priority =  thread_ptr -> tx_thread_priority;
 8011b62:	687b      	ldr	r3, [r7, #4]
 8011b64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011b66:	66bb      	str	r3, [r7, #104]	; 0x68

        /* Pickup the next ready thread pointer.  */
        ready_next =      thread_ptr -> tx_thread_ready_next;
 8011b68:	687b      	ldr	r3, [r7, #4]
 8011b6a:	6a1b      	ldr	r3, [r3, #32]
 8011b6c:	667b      	str	r3, [r7, #100]	; 0x64

        /* Determine if there are other threads at this priority that are
           ready.  */
        if (ready_next != thread_ptr)
 8011b6e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8011b70:	687b      	ldr	r3, [r7, #4]
 8011b72:	429a      	cmp	r2, r3
 8011b74:	d015      	beq.n	8011ba2 <_tx_thread_system_suspend+0xa6>
        {

            /* Yes, there are other threads at this priority ready.  */

            /* Pickup the previous ready thread pointer.  */
            ready_previous =  thread_ptr -> tx_thread_ready_previous;
 8011b76:	687b      	ldr	r3, [r7, #4]
 8011b78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011b7a:	653b      	str	r3, [r7, #80]	; 0x50

            /* Just remove this thread from the priority list.  */
            ready_next -> tx_thread_ready_previous =    ready_previous;
 8011b7c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011b7e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8011b80:	625a      	str	r2, [r3, #36]	; 0x24
            ready_previous -> tx_thread_ready_next =    ready_next;
 8011b82:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011b84:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8011b86:	621a      	str	r2, [r3, #32]

            /* Determine if this is the head of the priority list.  */
            if (_tx_thread_priority_list[priority] == thread_ptr)
 8011b88:	4a63      	ldr	r2, [pc, #396]	; (8011d18 <_tx_thread_system_suspend+0x21c>)
 8011b8a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8011b8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011b90:	687a      	ldr	r2, [r7, #4]
 8011b92:	429a      	cmp	r2, r3
 8011b94:	d157      	bne.n	8011c46 <_tx_thread_system_suspend+0x14a>
            {

                /* Update the head pointer of this priority list.  */
                _tx_thread_priority_list[priority] =  ready_next;
 8011b96:	4960      	ldr	r1, [pc, #384]	; (8011d18 <_tx_thread_system_suspend+0x21c>)
 8011b98:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8011b9a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8011b9c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8011ba0:	e051      	b.n	8011c46 <_tx_thread_system_suspend+0x14a>
        else
        {

            /* This is the only thread at this priority ready to run.  Set the head
               pointer to NULL.  */
            _tx_thread_priority_list[priority] =    TX_NULL;
 8011ba2:	4a5d      	ldr	r2, [pc, #372]	; (8011d18 <_tx_thread_system_suspend+0x21c>)
 8011ba4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8011ba6:	2100      	movs	r1, #0
 8011ba8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            /* Calculate the index into the bit map array.  */
            map_index =  priority/((UINT) 32);
#endif

            /* Clear this priority bit in the ready priority bit map.  */
            TX_MOD32_BIT_SET(priority, priority_bit)
 8011bac:	2201      	movs	r2, #1
 8011bae:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8011bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8011bb4:	663b      	str	r3, [r7, #96]	; 0x60
            _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] & (~(priority_bit));
 8011bb6:	4b59      	ldr	r3, [pc, #356]	; (8011d1c <_tx_thread_system_suspend+0x220>)
 8011bb8:	681a      	ldr	r2, [r3, #0]
 8011bba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8011bbc:	43db      	mvns	r3, r3
 8011bbe:	4013      	ands	r3, r2
 8011bc0:	4a56      	ldr	r2, [pc, #344]	; (8011d1c <_tx_thread_system_suspend+0x220>)
 8011bc2:	6013      	str	r3, [r2, #0]
            /* Calculate the base priority as well.  */
            base_priority =  map_index * ((UINT) 32);
#else

            /* Setup the base priority to zero.  */
            base_priority =   ((UINT) 0);
 8011bc4:	2300      	movs	r3, #0
 8011bc6:	65fb      	str	r3, [r7, #92]	; 0x5c
#endif

            /* Setup working variable for the priority map.  */
            priority_map =    _tx_thread_priority_maps[MAP_INDEX];
 8011bc8:	4b54      	ldr	r3, [pc, #336]	; (8011d1c <_tx_thread_system_suspend+0x220>)
 8011bca:	681b      	ldr	r3, [r3, #0]
 8011bcc:	65bb      	str	r3, [r7, #88]	; 0x58

            /* Make a quick check for no other threads ready for execution.  */
            if (priority_map == ((ULONG) 0))
 8011bce:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8011bd0:	2b00      	cmp	r3, #0
 8011bd2:	d12b      	bne.n	8011c2c <_tx_thread_system_suspend+0x130>
            {

                /* Nothing else is ready.  Set highest priority and execute thread
                   accordingly.  */
                _tx_thread_highest_priority =  ((UINT) TX_MAX_PRIORITIES);
 8011bd4:	4b52      	ldr	r3, [pc, #328]	; (8011d20 <_tx_thread_system_suspend+0x224>)
 8011bd6:	2220      	movs	r2, #32
 8011bd8:	601a      	str	r2, [r3, #0]
                _tx_thread_execute_ptr =       TX_NULL;
 8011bda:	4b52      	ldr	r3, [pc, #328]	; (8011d24 <_tx_thread_system_suspend+0x228>)
 8011bdc:	2200      	movs	r2, #0
 8011bde:	601a      	str	r2, [r3, #0]
 8011be0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8011be2:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8011be4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011be6:	f383 8810 	msr	PRIMASK, r3
}
 8011bea:	bf00      	nop
                /* Restore interrupts.  */
                TX_RESTORE

                /* Determine if preemption should take place. This is only possible if the current thread pointer is
                   not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
                TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8011bec:	4b49      	ldr	r3, [pc, #292]	; (8011d14 <_tx_thread_system_suspend+0x218>)
 8011bee:	681b      	ldr	r3, [r3, #0]
 8011bf0:	657b      	str	r3, [r7, #84]	; 0x54
                if (combined_flags == ((ULONG) 0))
 8011bf2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011bf4:	2b00      	cmp	r3, #0
 8011bf6:	f040 8081 	bne.w	8011cfc <_tx_thread_system_suspend+0x200>
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8011bfa:	4b4b      	ldr	r3, [pc, #300]	; (8011d28 <_tx_thread_system_suspend+0x22c>)
 8011bfc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011c00:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8011c02:	f3ef 8305 	mrs	r3, IPSR
 8011c06:	643b      	str	r3, [r7, #64]	; 0x40
    return(ipsr_value);
 8011c08:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    if (_tx_ipsr_get() == 0)
 8011c0a:	2b00      	cmp	r3, #0
 8011c0c:	d10c      	bne.n	8011c28 <_tx_thread_system_suspend+0x12c>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8011c0e:	f3ef 8310 	mrs	r3, PRIMASK
 8011c12:	63fb      	str	r3, [r7, #60]	; 0x3c
    return(posture);
 8011c14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
        interrupt_save = __get_interrupt_posture();
 8011c16:	63bb      	str	r3, [r7, #56]	; 0x38
    __asm__ volatile ("CPSIE  i": : : "memory");
 8011c18:	b662      	cpsie	i
}
 8011c1a:	bf00      	nop
 8011c1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011c1e:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8011c20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011c22:	f383 8810 	msr	PRIMASK, r3
}
 8011c26:	bf00      	nop
}
 8011c28:	bf00      	nop
                    /* Preemption is needed - return to the system!  */
                    _tx_thread_system_return();
                }

                /* Return to caller.  */
                return;
 8011c2a:	e067      	b.n	8011cfc <_tx_thread_system_suspend+0x200>
            {

                /* Other threads at different priority levels are ready to run.  */

                /* Calculate the lowest bit set in the priority map. */
                TX_LOWEST_SET_BIT_CALCULATE(priority_map, priority_bit)
 8011c2c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8011c2e:	fa93 f3a3 	rbit	r3, r3
 8011c32:	65bb      	str	r3, [r7, #88]	; 0x58
 8011c34:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8011c36:	fab3 f383 	clz	r3, r3
 8011c3a:	663b      	str	r3, [r7, #96]	; 0x60

                /* Setup the next highest priority variable.  */
                _tx_thread_highest_priority =  base_priority + ((UINT) priority_bit);
 8011c3c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8011c3e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8011c40:	4413      	add	r3, r2
 8011c42:	4a37      	ldr	r2, [pc, #220]	; (8011d20 <_tx_thread_system_suspend+0x224>)
 8011c44:	6013      	str	r3, [r2, #0]
            }
        }

        /* Determine if the suspending thread is the thread designated to execute.  */
        if (thread_ptr == _tx_thread_execute_ptr)
 8011c46:	4b37      	ldr	r3, [pc, #220]	; (8011d24 <_tx_thread_system_suspend+0x228>)
 8011c48:	681b      	ldr	r3, [r3, #0]
 8011c4a:	687a      	ldr	r2, [r7, #4]
 8011c4c:	429a      	cmp	r2, r3
 8011c4e:	d12b      	bne.n	8011ca8 <_tx_thread_system_suspend+0x1ac>
        {

            /* Pickup the highest priority thread to execute.  */
            _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 8011c50:	4b33      	ldr	r3, [pc, #204]	; (8011d20 <_tx_thread_system_suspend+0x224>)
 8011c52:	681b      	ldr	r3, [r3, #0]
 8011c54:	4a30      	ldr	r2, [pc, #192]	; (8011d18 <_tx_thread_system_suspend+0x21c>)
 8011c56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011c5a:	4a32      	ldr	r2, [pc, #200]	; (8011d24 <_tx_thread_system_suspend+0x228>)
 8011c5c:	6013      	str	r3, [r2, #0]
 8011c5e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8011c60:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8011c62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011c64:	f383 8810 	msr	PRIMASK, r3
}
 8011c68:	bf00      	nop
            /* Restore interrupts.  */
            TX_RESTORE

            /* Determine if preemption should take place. This is only possible if the current thread pointer is
               not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
            TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8011c6a:	4b2a      	ldr	r3, [pc, #168]	; (8011d14 <_tx_thread_system_suspend+0x218>)
 8011c6c:	681b      	ldr	r3, [r3, #0]
 8011c6e:	657b      	str	r3, [r7, #84]	; 0x54
            if (combined_flags == ((ULONG) 0))
 8011c70:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011c72:	2b00      	cmp	r3, #0
 8011c74:	d144      	bne.n	8011d00 <_tx_thread_system_suspend+0x204>
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8011c76:	4b2c      	ldr	r3, [pc, #176]	; (8011d28 <_tx_thread_system_suspend+0x22c>)
 8011c78:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011c7c:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8011c7e:	f3ef 8305 	mrs	r3, IPSR
 8011c82:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(ipsr_value);
 8011c84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    if (_tx_ipsr_get() == 0)
 8011c86:	2b00      	cmp	r3, #0
 8011c88:	d10c      	bne.n	8011ca4 <_tx_thread_system_suspend+0x1a8>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8011c8a:	f3ef 8310 	mrs	r3, PRIMASK
 8011c8e:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 8011c90:	6abb      	ldr	r3, [r7, #40]	; 0x28
        interrupt_save = __get_interrupt_posture();
 8011c92:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSIE  i": : : "memory");
 8011c94:	b662      	cpsie	i
}
 8011c96:	bf00      	nop
 8011c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c9a:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8011c9c:	6a3b      	ldr	r3, [r7, #32]
 8011c9e:	f383 8810 	msr	PRIMASK, r3
}
 8011ca2:	bf00      	nop
}
 8011ca4:	bf00      	nop
                /* Preemption is needed - return to the system!  */
                _tx_thread_system_return();
            }

            /* Return to caller.  */
            return;
 8011ca6:	e02b      	b.n	8011d00 <_tx_thread_system_suspend+0x204>
 8011ca8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8011caa:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8011cac:	69fb      	ldr	r3, [r7, #28]
 8011cae:	f383 8810 	msr	PRIMASK, r3
}
 8011cb2:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Determine if a preemption condition is present.  */
    if (current_thread != _tx_thread_execute_ptr)
 8011cb4:	4b1b      	ldr	r3, [pc, #108]	; (8011d24 <_tx_thread_system_suspend+0x228>)
 8011cb6:	681b      	ldr	r3, [r3, #0]
 8011cb8:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8011cba:	429a      	cmp	r2, r3
 8011cbc:	d022      	beq.n	8011d04 <_tx_thread_system_suspend+0x208>
        TX_THREAD_STACK_CHECK(thread_ptr)
#endif

        /* Determine if preemption should take place. This is only possible if the current thread pointer is
           not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
        TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8011cbe:	4b15      	ldr	r3, [pc, #84]	; (8011d14 <_tx_thread_system_suspend+0x218>)
 8011cc0:	681b      	ldr	r3, [r3, #0]
 8011cc2:	657b      	str	r3, [r7, #84]	; 0x54
        if (combined_flags == ((ULONG) 0))
 8011cc4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011cc6:	2b00      	cmp	r3, #0
 8011cc8:	d11c      	bne.n	8011d04 <_tx_thread_system_suspend+0x208>
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8011cca:	4b17      	ldr	r3, [pc, #92]	; (8011d28 <_tx_thread_system_suspend+0x22c>)
 8011ccc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011cd0:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8011cd2:	f3ef 8305 	mrs	r3, IPSR
 8011cd6:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 8011cd8:	69bb      	ldr	r3, [r7, #24]
    if (_tx_ipsr_get() == 0)
 8011cda:	2b00      	cmp	r3, #0
 8011cdc:	d10c      	bne.n	8011cf8 <_tx_thread_system_suspend+0x1fc>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8011cde:	f3ef 8310 	mrs	r3, PRIMASK
 8011ce2:	617b      	str	r3, [r7, #20]
    return(posture);
 8011ce4:	697b      	ldr	r3, [r7, #20]
        interrupt_save = __get_interrupt_posture();
 8011ce6:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSIE  i": : : "memory");
 8011ce8:	b662      	cpsie	i
}
 8011cea:	bf00      	nop
 8011cec:	693b      	ldr	r3, [r7, #16]
 8011cee:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8011cf0:	68fb      	ldr	r3, [r7, #12]
 8011cf2:	f383 8810 	msr	PRIMASK, r3
}
 8011cf6:	bf00      	nop
}
 8011cf8:	bf00      	nop
            _tx_thread_system_return();
        }
    }

    /* Return to caller.  */
    return;
 8011cfa:	e003      	b.n	8011d04 <_tx_thread_system_suspend+0x208>
                return;
 8011cfc:	bf00      	nop
 8011cfe:	e002      	b.n	8011d06 <_tx_thread_system_suspend+0x20a>
            return;
 8011d00:	bf00      	nop
 8011d02:	e000      	b.n	8011d06 <_tx_thread_system_suspend+0x20a>
    return;
 8011d04:	bf00      	nop
}
 8011d06:	3778      	adds	r7, #120	; 0x78
 8011d08:	46bd      	mov	sp, r7
 8011d0a:	bd80      	pop	{r7, pc}
 8011d0c:	20002f78 	.word	0x20002f78
 8011d10:	2000357c 	.word	0x2000357c
 8011d14:	20003010 	.word	0x20003010
 8011d18:	20002f90 	.word	0x20002f90
 8011d1c:	20002f88 	.word	0x20002f88
 8011d20:	20002f8c 	.word	0x20002f8c
 8011d24:	20002f7c 	.word	0x20002f7c
 8011d28:	e000ed04 	.word	0xe000ed04

08011d2c <_tx_thread_time_slice>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_time_slice(VOID)
{
 8011d2c:	b480      	push	{r7}
 8011d2e:	b087      	sub	sp, #28
 8011d30:	af00      	add	r7, sp, #0
ULONG           system_state;
UINT            preempt_disable;
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 8011d32:	4b21      	ldr	r3, [pc, #132]	; (8011db8 <_tx_thread_time_slice+0x8c>)
 8011d34:	681b      	ldr	r3, [r3, #0]
 8011d36:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8011d38:	f3ef 8310 	mrs	r3, PRIMASK
 8011d3c:	60fb      	str	r3, [r7, #12]
    return(posture);
 8011d3e:	68fb      	ldr	r3, [r7, #12]
    int_posture = __get_interrupt_posture();
 8011d40:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("CPSID i" : : : "memory");
 8011d42:	b672      	cpsid	i
    return(int_posture);
 8011d44:	68bb      	ldr	r3, [r7, #8]
    /* Set the next thread pointer to NULL.  */
    next_thread_ptr =  TX_NULL;
#endif

    /* Lockout interrupts while the time-slice is evaluated.  */
    TX_DISABLE
 8011d46:	613b      	str	r3, [r7, #16]

    /* Clear the expired time-slice flag.  */
    _tx_timer_expired_time_slice =  TX_FALSE;
 8011d48:	4b1c      	ldr	r3, [pc, #112]	; (8011dbc <_tx_thread_time_slice+0x90>)
 8011d4a:	2200      	movs	r2, #0
 8011d4c:	601a      	str	r2, [r3, #0]

    /* Make sure the thread pointer is valid.  */
    if (thread_ptr != TX_NULL)
 8011d4e:	697b      	ldr	r3, [r7, #20]
 8011d50:	2b00      	cmp	r3, #0
 8011d52:	d024      	beq.n	8011d9e <_tx_thread_time_slice+0x72>
    {

        /* Make sure the thread is still active, i.e. not suspended.  */
        if (thread_ptr -> tx_thread_state == TX_READY)
 8011d54:	697b      	ldr	r3, [r7, #20]
 8011d56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011d58:	2b00      	cmp	r3, #0
 8011d5a:	d120      	bne.n	8011d9e <_tx_thread_time_slice+0x72>
        {

            /* Setup a fresh time-slice for the thread.  */
            thread_ptr -> tx_thread_time_slice =  thread_ptr -> tx_thread_new_time_slice;
 8011d5c:	697b      	ldr	r3, [r7, #20]
 8011d5e:	69da      	ldr	r2, [r3, #28]
 8011d60:	697b      	ldr	r3, [r7, #20]
 8011d62:	619a      	str	r2, [r3, #24]

            /* Reset the actual time-slice variable.  */
            _tx_timer_time_slice =  thread_ptr -> tx_thread_time_slice;
 8011d64:	697b      	ldr	r3, [r7, #20]
 8011d66:	699b      	ldr	r3, [r3, #24]
 8011d68:	4a15      	ldr	r2, [pc, #84]	; (8011dc0 <_tx_thread_time_slice+0x94>)
 8011d6a:	6013      	str	r3, [r2, #0]

            /* Determine if there is another thread at the same priority and preemption-threshold
               is not set.  Preemption-threshold overrides time-slicing.  */
            if (thread_ptr -> tx_thread_ready_next != thread_ptr)
 8011d6c:	697b      	ldr	r3, [r7, #20]
 8011d6e:	6a1b      	ldr	r3, [r3, #32]
 8011d70:	697a      	ldr	r2, [r7, #20]
 8011d72:	429a      	cmp	r2, r3
 8011d74:	d013      	beq.n	8011d9e <_tx_thread_time_slice+0x72>
            {

                /* Check to see if preemption-threshold is not being used.  */
                if (thread_ptr -> tx_thread_priority == thread_ptr -> tx_thread_preempt_threshold)
 8011d76:	697b      	ldr	r3, [r7, #20]
 8011d78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011d7a:	697b      	ldr	r3, [r7, #20]
 8011d7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011d7e:	429a      	cmp	r2, r3
 8011d80:	d10d      	bne.n	8011d9e <_tx_thread_time_slice+0x72>

                    /* Preemption-threshold is not being used by this thread.  */

                    /* There is another thread at this priority, make it the highest at
                       this priority level.  */
                    _tx_thread_priority_list[thread_ptr -> tx_thread_priority] =  thread_ptr -> tx_thread_ready_next;
 8011d82:	697b      	ldr	r3, [r7, #20]
 8011d84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011d86:	697a      	ldr	r2, [r7, #20]
 8011d88:	6a12      	ldr	r2, [r2, #32]
 8011d8a:	490e      	ldr	r1, [pc, #56]	; (8011dc4 <_tx_thread_time_slice+0x98>)
 8011d8c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

                    /* Designate the highest priority thread as the one to execute.  Don't use this
                       thread's priority as an index just in case a higher priority thread is now
                       ready!  */
                    _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 8011d90:	4b0d      	ldr	r3, [pc, #52]	; (8011dc8 <_tx_thread_time_slice+0x9c>)
 8011d92:	681b      	ldr	r3, [r3, #0]
 8011d94:	4a0b      	ldr	r2, [pc, #44]	; (8011dc4 <_tx_thread_time_slice+0x98>)
 8011d96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011d9a:	4a0c      	ldr	r2, [pc, #48]	; (8011dcc <_tx_thread_time_slice+0xa0>)
 8011d9c:	6013      	str	r3, [r2, #0]
 8011d9e:	693b      	ldr	r3, [r7, #16]
 8011da0:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8011da2:	687b      	ldr	r3, [r7, #4]
 8011da4:	f383 8810 	msr	PRIMASK, r3
}
 8011da8:	bf00      	nop

        /* Yes, check this thread's stack.  */
        TX_THREAD_STACK_CHECK(next_thread_ptr)
    }
#endif
}
 8011daa:	bf00      	nop
 8011dac:	371c      	adds	r7, #28
 8011dae:	46bd      	mov	sp, r7
 8011db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011db4:	4770      	bx	lr
 8011db6:	bf00      	nop
 8011db8:	20002f78 	.word	0x20002f78
 8011dbc:	20003020 	.word	0x20003020
 8011dc0:	2000357c 	.word	0x2000357c
 8011dc4:	20002f90 	.word	0x20002f90
 8011dc8:	20002f8c 	.word	0x20002f8c
 8011dcc:	20002f7c 	.word	0x20002f7c

08011dd0 <_tx_thread_timeout>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_timeout(ULONG timeout_input)
{
 8011dd0:	b580      	push	{r7, lr}
 8011dd2:	b08a      	sub	sp, #40	; 0x28
 8011dd4:	af00      	add	r7, sp, #0
 8011dd6:	6078      	str	r0, [r7, #4]
VOID            (*suspend_cleanup)(struct TX_THREAD_STRUCT *suspend_thread_ptr, ULONG suspension_sequence);
ULONG           suspension_sequence;


    /* Pickup the thread pointer.  */
    TX_THREAD_TIMEOUT_POINTER_SETUP(thread_ptr)
 8011dd8:	687b      	ldr	r3, [r7, #4]
 8011dda:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8011ddc:	f3ef 8310 	mrs	r3, PRIMASK
 8011de0:	617b      	str	r3, [r7, #20]
    return(posture);
 8011de2:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 8011de4:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 8011de6:	b672      	cpsid	i
    return(int_posture);
 8011de8:	693b      	ldr	r3, [r7, #16]

    /* Disable interrupts.  */
    TX_DISABLE
 8011dea:	623b      	str	r3, [r7, #32]

    /* Determine how the thread is currently suspended.  */
    if (thread_ptr -> tx_thread_state == TX_SLEEP)
 8011dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011dee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011df0:	2b04      	cmp	r3, #4
 8011df2:	d10e      	bne.n	8011e12 <_tx_thread_timeout+0x42>
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Increment the disable preemption flag.  */
        _tx_thread_preempt_disable++;
 8011df4:	4b13      	ldr	r3, [pc, #76]	; (8011e44 <_tx_thread_timeout+0x74>)
 8011df6:	681b      	ldr	r3, [r3, #0]
 8011df8:	3301      	adds	r3, #1
 8011dfa:	4a12      	ldr	r2, [pc, #72]	; (8011e44 <_tx_thread_timeout+0x74>)
 8011dfc:	6013      	str	r3, [r2, #0]
 8011dfe:	6a3b      	ldr	r3, [r7, #32]
 8011e00:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8011e02:	68fb      	ldr	r3, [r7, #12]
 8011e04:	f383 8810 	msr	PRIMASK, r3
}
 8011e08:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Lift the suspension on the sleeping thread.  */
        _tx_thread_system_resume(thread_ptr);
 8011e0a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011e0c:	f7ff fd76 	bl	80118fc <_tx_thread_system_resume>

        /* Restore interrupts.  */
        TX_RESTORE
#endif
    }
}
 8011e10:	e013      	b.n	8011e3a <_tx_thread_timeout+0x6a>
        suspend_cleanup =  thread_ptr -> tx_thread_suspend_cleanup;
 8011e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e14:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8011e16:	61fb      	str	r3, [r7, #28]
        suspension_sequence =  thread_ptr -> tx_thread_suspension_sequence;
 8011e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e1a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8011e1e:	61bb      	str	r3, [r7, #24]
 8011e20:	6a3b      	ldr	r3, [r7, #32]
 8011e22:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8011e24:	68bb      	ldr	r3, [r7, #8]
 8011e26:	f383 8810 	msr	PRIMASK, r3
}
 8011e2a:	bf00      	nop
        if (suspend_cleanup != TX_NULL)
 8011e2c:	69fb      	ldr	r3, [r7, #28]
 8011e2e:	2b00      	cmp	r3, #0
 8011e30:	d003      	beq.n	8011e3a <_tx_thread_timeout+0x6a>
            (suspend_cleanup)(thread_ptr, suspension_sequence);
 8011e32:	69fb      	ldr	r3, [r7, #28]
 8011e34:	69b9      	ldr	r1, [r7, #24]
 8011e36:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011e38:	4798      	blx	r3
}
 8011e3a:	bf00      	nop
 8011e3c:	3728      	adds	r7, #40	; 0x28
 8011e3e:	46bd      	mov	sp, r7
 8011e40:	bd80      	pop	{r7, pc}
 8011e42:	bf00      	nop
 8011e44:	20003010 	.word	0x20003010

08011e48 <_tx_timer_expiration_process>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_expiration_process(VOID)
{
 8011e48:	b580      	push	{r7, lr}
 8011e4a:	b084      	sub	sp, #16
 8011e4c:	af00      	add	r7, sp, #0
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8011e4e:	f3ef 8310 	mrs	r3, PRIMASK
 8011e52:	607b      	str	r3, [r7, #4]
    return(posture);
 8011e54:	687b      	ldr	r3, [r7, #4]
    int_posture = __get_interrupt_posture();
 8011e56:	603b      	str	r3, [r7, #0]
    __asm__ volatile ("CPSID i" : : : "memory");
 8011e58:	b672      	cpsid	i
    return(int_posture);
 8011e5a:	683b      	ldr	r3, [r7, #0]

    /* Don't process in the ISR, wakeup the system timer thread to process the
       timer expiration.  */

    /* Disable interrupts.  */
    TX_DISABLE
 8011e5c:	60fb      	str	r3, [r7, #12]
    /* Restore interrupts.  */
    TX_RESTORE
#else

    /* Increment the preempt disable flag.  */
    _tx_thread_preempt_disable++;
 8011e5e:	4b09      	ldr	r3, [pc, #36]	; (8011e84 <_tx_timer_expiration_process+0x3c>)
 8011e60:	681b      	ldr	r3, [r3, #0]
 8011e62:	3301      	adds	r3, #1
 8011e64:	4a07      	ldr	r2, [pc, #28]	; (8011e84 <_tx_timer_expiration_process+0x3c>)
 8011e66:	6013      	str	r3, [r2, #0]
 8011e68:	68fb      	ldr	r3, [r7, #12]
 8011e6a:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8011e6c:	68bb      	ldr	r3, [r7, #8]
 8011e6e:	f383 8810 	msr	PRIMASK, r3
}
 8011e72:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Call the system resume function to activate the timer thread.  */
    _tx_thread_system_resume(&_tx_timer_thread);
 8011e74:	4804      	ldr	r0, [pc, #16]	; (8011e88 <_tx_timer_expiration_process+0x40>)
 8011e76:	f7ff fd41 	bl	80118fc <_tx_thread_system_resume>
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 8011e7a:	bf00      	nop
 8011e7c:	3710      	adds	r7, #16
 8011e7e:	46bd      	mov	sp, r7
 8011e80:	bd80      	pop	{r7, pc}
 8011e82:	bf00      	nop
 8011e84:	20003010 	.word	0x20003010
 8011e88:	200030c0 	.word	0x200030c0

08011e8c <_tx_timer_initialize>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_initialize(VOID)
{
 8011e8c:	b590      	push	{r4, r7, lr}
 8011e8e:	b089      	sub	sp, #36	; 0x24
 8011e90:	af06      	add	r7, sp, #24
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the system clock to 0.  */
    _tx_timer_system_clock =  ((ULONG) 0);
 8011e92:	4b28      	ldr	r3, [pc, #160]	; (8011f34 <_tx_timer_initialize+0xa8>)
 8011e94:	2200      	movs	r2, #0
 8011e96:	601a      	str	r2, [r3, #0]

    /* Initialize the time-slice value to 0 to make sure it is disabled.  */
    _tx_timer_time_slice =  ((ULONG) 0);
 8011e98:	4b27      	ldr	r3, [pc, #156]	; (8011f38 <_tx_timer_initialize+0xac>)
 8011e9a:	2200      	movs	r2, #0
 8011e9c:	601a      	str	r2, [r3, #0]

    /* Clear the expired flags.  */
    _tx_timer_expired_time_slice =  TX_FALSE;
 8011e9e:	4b27      	ldr	r3, [pc, #156]	; (8011f3c <_tx_timer_initialize+0xb0>)
 8011ea0:	2200      	movs	r2, #0
 8011ea2:	601a      	str	r2, [r3, #0]
    _tx_timer_expired =             TX_FALSE;
 8011ea4:	4b26      	ldr	r3, [pc, #152]	; (8011f40 <_tx_timer_initialize+0xb4>)
 8011ea6:	2200      	movs	r2, #0
 8011ea8:	601a      	str	r2, [r3, #0]

    /* Set the currently expired timer being processed pointer to NULL.  */
    _tx_timer_expired_timer_ptr =  TX_NULL;
 8011eaa:	4b26      	ldr	r3, [pc, #152]	; (8011f44 <_tx_timer_initialize+0xb8>)
 8011eac:	2200      	movs	r2, #0
 8011eae:	601a      	str	r2, [r3, #0]

    /* Initialize the thread and application timer management control structures.  */

    /* First, initialize the timer list.  */
    TX_MEMSET(&_tx_timer_list[0], 0, (sizeof(_tx_timer_list)));
 8011eb0:	2280      	movs	r2, #128	; 0x80
 8011eb2:	2100      	movs	r1, #0
 8011eb4:	4824      	ldr	r0, [pc, #144]	; (8011f48 <_tx_timer_initialize+0xbc>)
 8011eb6:	f000 fde7 	bl	8012a88 <memset>
#endif

    /* Initialize all of the list pointers.  */
    _tx_timer_list_start =   &_tx_timer_list[0];
 8011eba:	4b24      	ldr	r3, [pc, #144]	; (8011f4c <_tx_timer_initialize+0xc0>)
 8011ebc:	4a22      	ldr	r2, [pc, #136]	; (8011f48 <_tx_timer_initialize+0xbc>)
 8011ebe:	601a      	str	r2, [r3, #0]
    _tx_timer_current_ptr =  &_tx_timer_list[0];
 8011ec0:	4b23      	ldr	r3, [pc, #140]	; (8011f50 <_tx_timer_initialize+0xc4>)
 8011ec2:	4a21      	ldr	r2, [pc, #132]	; (8011f48 <_tx_timer_initialize+0xbc>)
 8011ec4:	601a      	str	r2, [r3, #0]

    /* Set the timer list end pointer to one past the actual timer list.  This is done
       to make the timer interrupt handling in assembly language a little easier.  */
    _tx_timer_list_end =     &_tx_timer_list[TX_TIMER_ENTRIES-((ULONG) 1)];
 8011ec6:	4b23      	ldr	r3, [pc, #140]	; (8011f54 <_tx_timer_initialize+0xc8>)
 8011ec8:	4a23      	ldr	r2, [pc, #140]	; (8011f58 <_tx_timer_initialize+0xcc>)
 8011eca:	601a      	str	r2, [r3, #0]
    _tx_timer_list_end =     TX_TIMER_POINTER_ADD(_tx_timer_list_end, ((ULONG) 1));
 8011ecc:	4b21      	ldr	r3, [pc, #132]	; (8011f54 <_tx_timer_initialize+0xc8>)
 8011ece:	681b      	ldr	r3, [r3, #0]
 8011ed0:	3304      	adds	r3, #4
 8011ed2:	4a20      	ldr	r2, [pc, #128]	; (8011f54 <_tx_timer_initialize+0xc8>)
 8011ed4:	6013      	str	r3, [r2, #0]

#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Setup the variables associated with the system timer thread's stack and
       priority.  */
    _tx_timer_stack_start =  (VOID *) &_tx_timer_thread_stack_area[0];
 8011ed6:	4b21      	ldr	r3, [pc, #132]	; (8011f5c <_tx_timer_initialize+0xd0>)
 8011ed8:	4a21      	ldr	r2, [pc, #132]	; (8011f60 <_tx_timer_initialize+0xd4>)
 8011eda:	601a      	str	r2, [r3, #0]
    _tx_timer_stack_size =   ((ULONG) TX_TIMER_THREAD_STACK_SIZE);
 8011edc:	4b21      	ldr	r3, [pc, #132]	; (8011f64 <_tx_timer_initialize+0xd8>)
 8011ede:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8011ee2:	601a      	str	r2, [r3, #0]
    _tx_timer_priority =     ((UINT) TX_TIMER_THREAD_PRIORITY);
 8011ee4:	4b20      	ldr	r3, [pc, #128]	; (8011f68 <_tx_timer_initialize+0xdc>)
 8011ee6:	2200      	movs	r2, #0
 8011ee8:	601a      	str	r2, [r3, #0]
       low-level initialization component.  */
    do
    {

        /* Create the system timer thread.  */
        status =  _tx_thread_create(&_tx_timer_thread,
 8011eea:	4b1c      	ldr	r3, [pc, #112]	; (8011f5c <_tx_timer_initialize+0xd0>)
 8011eec:	681b      	ldr	r3, [r3, #0]
 8011eee:	4a1d      	ldr	r2, [pc, #116]	; (8011f64 <_tx_timer_initialize+0xd8>)
 8011ef0:	6812      	ldr	r2, [r2, #0]
 8011ef2:	491d      	ldr	r1, [pc, #116]	; (8011f68 <_tx_timer_initialize+0xdc>)
 8011ef4:	6809      	ldr	r1, [r1, #0]
 8011ef6:	481c      	ldr	r0, [pc, #112]	; (8011f68 <_tx_timer_initialize+0xdc>)
 8011ef8:	6800      	ldr	r0, [r0, #0]
 8011efa:	2400      	movs	r4, #0
 8011efc:	9405      	str	r4, [sp, #20]
 8011efe:	2400      	movs	r4, #0
 8011f00:	9404      	str	r4, [sp, #16]
 8011f02:	9003      	str	r0, [sp, #12]
 8011f04:	9102      	str	r1, [sp, #8]
 8011f06:	9201      	str	r2, [sp, #4]
 8011f08:	9300      	str	r3, [sp, #0]
 8011f0a:	4b18      	ldr	r3, [pc, #96]	; (8011f6c <_tx_timer_initialize+0xe0>)
 8011f0c:	4a18      	ldr	r2, [pc, #96]	; (8011f70 <_tx_timer_initialize+0xe4>)
 8011f0e:	4919      	ldr	r1, [pc, #100]	; (8011f74 <_tx_timer_initialize+0xe8>)
 8011f10:	4819      	ldr	r0, [pc, #100]	; (8011f78 <_tx_timer_initialize+0xec>)
 8011f12:	f7ff f9eb 	bl	80112ec <_tx_thread_create>
 8011f16:	6078      	str	r0, [r7, #4]
#endif

        /* Define timer initialize extension.  */
        TX_TIMER_INITIALIZE_EXTENSION(status)

    } while (status != TX_SUCCESS);
 8011f18:	687b      	ldr	r3, [r7, #4]
 8011f1a:	2b00      	cmp	r3, #0
 8011f1c:	d1e5      	bne.n	8011eea <_tx_timer_initialize+0x5e>
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the head pointer of the created application timer list.  */
    _tx_timer_created_ptr =  TX_NULL;
 8011f1e:	4b17      	ldr	r3, [pc, #92]	; (8011f7c <_tx_timer_initialize+0xf0>)
 8011f20:	2200      	movs	r2, #0
 8011f22:	601a      	str	r2, [r3, #0]

    /* Set the created count to zero.  */
    _tx_timer_created_count =  TX_EMPTY;
 8011f24:	4b16      	ldr	r3, [pc, #88]	; (8011f80 <_tx_timer_initialize+0xf4>)
 8011f26:	2200      	movs	r2, #0
 8011f28:	601a      	str	r2, [r3, #0]
    _tx_timer_performance_expiration_count =         ((ULONG) 0);
    _tx_timer_performance__expiration_adjust_count =  ((ULONG) 0);
#endif
#endif
#endif
}
 8011f2a:	bf00      	nop
 8011f2c:	370c      	adds	r7, #12
 8011f2e:	46bd      	mov	sp, r7
 8011f30:	bd90      	pop	{r4, r7, pc}
 8011f32:	bf00      	nop
 8011f34:	2000301c 	.word	0x2000301c
 8011f38:	2000357c 	.word	0x2000357c
 8011f3c:	20003020 	.word	0x20003020
 8011f40:	200030b0 	.word	0x200030b0
 8011f44:	200030bc 	.word	0x200030bc
 8011f48:	20003024 	.word	0x20003024
 8011f4c:	200030a4 	.word	0x200030a4
 8011f50:	200030ac 	.word	0x200030ac
 8011f54:	200030a8 	.word	0x200030a8
 8011f58:	200030a0 	.word	0x200030a0
 8011f5c:	20003170 	.word	0x20003170
 8011f60:	2000317c 	.word	0x2000317c
 8011f64:	20003174 	.word	0x20003174
 8011f68:	20003178 	.word	0x20003178
 8011f6c:	4154494d 	.word	0x4154494d
 8011f70:	080120b9 	.word	0x080120b9
 8011f74:	080135f8 	.word	0x080135f8
 8011f78:	200030c0 	.word	0x200030c0
 8011f7c:	200030b4 	.word	0x200030b4
 8011f80:	200030b8 	.word	0x200030b8

08011f84 <_tx_timer_system_activate>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_system_activate(TX_TIMER_INTERNAL *timer_ptr)
{
 8011f84:	b480      	push	{r7}
 8011f86:	b089      	sub	sp, #36	; 0x24
 8011f88:	af00      	add	r7, sp, #0
 8011f8a:	6078      	str	r0, [r7, #4]
ULONG                       remaining_ticks;
ULONG                       expiration_time;


    /* Pickup the remaining ticks.  */
    remaining_ticks =  timer_ptr -> tx_timer_internal_remaining_ticks;
 8011f8c:	687b      	ldr	r3, [r7, #4]
 8011f8e:	681b      	ldr	r3, [r3, #0]
 8011f90:	617b      	str	r3, [r7, #20]

    /* Determine if there is a timer to activate.  */
    if (remaining_ticks != ((ULONG) 0))
 8011f92:	697b      	ldr	r3, [r7, #20]
 8011f94:	2b00      	cmp	r3, #0
 8011f96:	d04a      	beq.n	801202e <_tx_timer_system_activate+0xaa>
    {

        /* Determine if the timer is set to wait forever.  */
        if (remaining_ticks != TX_WAIT_FOREVER)
 8011f98:	697b      	ldr	r3, [r7, #20]
 8011f9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011f9e:	d046      	beq.n	801202e <_tx_timer_system_activate+0xaa>
        {

            /* Valid timer activate request.  */

            /* Determine if the timer still needs activation.  */
            if (timer_ptr -> tx_timer_internal_list_head == TX_NULL)
 8011fa0:	687b      	ldr	r3, [r7, #4]
 8011fa2:	699b      	ldr	r3, [r3, #24]
 8011fa4:	2b00      	cmp	r3, #0
 8011fa6:	d142      	bne.n	801202e <_tx_timer_system_activate+0xaa>
            {

                /* Activate the timer.  */

                /* Calculate the amount of time remaining for the timer.  */
                if (remaining_ticks > TX_TIMER_ENTRIES)
 8011fa8:	697b      	ldr	r3, [r7, #20]
 8011faa:	2b20      	cmp	r3, #32
 8011fac:	d902      	bls.n	8011fb4 <_tx_timer_system_activate+0x30>
                {

                    /* Set expiration time to the maximum number of entries.  */
                    expiration_time =  TX_TIMER_ENTRIES - ((ULONG) 1);
 8011fae:	231f      	movs	r3, #31
 8011fb0:	61bb      	str	r3, [r7, #24]
 8011fb2:	e002      	b.n	8011fba <_tx_timer_system_activate+0x36>
                {

                    /* Timer value fits in the timer entries.  */

                    /* Set the expiration time.  */
                    expiration_time =  (remaining_ticks - ((ULONG) 1));
 8011fb4:	697b      	ldr	r3, [r7, #20]
 8011fb6:	3b01      	subs	r3, #1
 8011fb8:	61bb      	str	r3, [r7, #24]

                /* At this point, we are ready to put the timer on one of
                   the timer lists.  */

                /* Calculate the proper place for the timer.  */
                timer_list =  TX_TIMER_POINTER_ADD(_tx_timer_current_ptr, expiration_time);
 8011fba:	4b20      	ldr	r3, [pc, #128]	; (801203c <_tx_timer_system_activate+0xb8>)
 8011fbc:	681a      	ldr	r2, [r3, #0]
 8011fbe:	69bb      	ldr	r3, [r7, #24]
 8011fc0:	009b      	lsls	r3, r3, #2
 8011fc2:	4413      	add	r3, r2
 8011fc4:	61fb      	str	r3, [r7, #28]
                if (TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(timer_list) >= TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(_tx_timer_list_end))
 8011fc6:	4b1e      	ldr	r3, [pc, #120]	; (8012040 <_tx_timer_system_activate+0xbc>)
 8011fc8:	681b      	ldr	r3, [r3, #0]
 8011fca:	69fa      	ldr	r2, [r7, #28]
 8011fcc:	429a      	cmp	r2, r3
 8011fce:	d30b      	bcc.n	8011fe8 <_tx_timer_system_activate+0x64>
                {

                    /* Wrap from the beginning of the list.  */
                    delta =  TX_TIMER_POINTER_DIF(timer_list, _tx_timer_list_end);
 8011fd0:	4b1b      	ldr	r3, [pc, #108]	; (8012040 <_tx_timer_system_activate+0xbc>)
 8011fd2:	681b      	ldr	r3, [r3, #0]
 8011fd4:	69fa      	ldr	r2, [r7, #28]
 8011fd6:	1ad3      	subs	r3, r2, r3
 8011fd8:	109b      	asrs	r3, r3, #2
 8011fda:	613b      	str	r3, [r7, #16]
                    timer_list =  TX_TIMER_POINTER_ADD(_tx_timer_list_start, delta);
 8011fdc:	4b19      	ldr	r3, [pc, #100]	; (8012044 <_tx_timer_system_activate+0xc0>)
 8011fde:	681a      	ldr	r2, [r3, #0]
 8011fe0:	693b      	ldr	r3, [r7, #16]
 8011fe2:	009b      	lsls	r3, r3, #2
 8011fe4:	4413      	add	r3, r2
 8011fe6:	61fb      	str	r3, [r7, #28]
                }

                /* Now put the timer on this list.  */
                if ((*timer_list) == TX_NULL)
 8011fe8:	69fb      	ldr	r3, [r7, #28]
 8011fea:	681b      	ldr	r3, [r3, #0]
 8011fec:	2b00      	cmp	r3, #0
 8011fee:	d109      	bne.n	8012004 <_tx_timer_system_activate+0x80>
                {

                    /* This list is NULL, just put the new timer on it.  */

                    /* Setup the links in this timer.  */
                    timer_ptr -> tx_timer_internal_active_next =      timer_ptr;
 8011ff0:	687b      	ldr	r3, [r7, #4]
 8011ff2:	687a      	ldr	r2, [r7, #4]
 8011ff4:	611a      	str	r2, [r3, #16]
                    timer_ptr -> tx_timer_internal_active_previous =  timer_ptr;
 8011ff6:	687b      	ldr	r3, [r7, #4]
 8011ff8:	687a      	ldr	r2, [r7, #4]
 8011ffa:	615a      	str	r2, [r3, #20]

                    /* Setup the list head pointer.  */
                    *timer_list =  timer_ptr;
 8011ffc:	69fb      	ldr	r3, [r7, #28]
 8011ffe:	687a      	ldr	r2, [r7, #4]
 8012000:	601a      	str	r2, [r3, #0]
 8012002:	e011      	b.n	8012028 <_tx_timer_system_activate+0xa4>
                }
                else
                {

                    /* This list is not NULL, add current timer to the end. */
                    next_timer =                                        *timer_list;
 8012004:	69fb      	ldr	r3, [r7, #28]
 8012006:	681b      	ldr	r3, [r3, #0]
 8012008:	60fb      	str	r3, [r7, #12]
                    previous_timer =                                    next_timer -> tx_timer_internal_active_previous;
 801200a:	68fb      	ldr	r3, [r7, #12]
 801200c:	695b      	ldr	r3, [r3, #20]
 801200e:	60bb      	str	r3, [r7, #8]
                    previous_timer -> tx_timer_internal_active_next =   timer_ptr;
 8012010:	68bb      	ldr	r3, [r7, #8]
 8012012:	687a      	ldr	r2, [r7, #4]
 8012014:	611a      	str	r2, [r3, #16]
                    next_timer -> tx_timer_internal_active_previous =   timer_ptr;
 8012016:	68fb      	ldr	r3, [r7, #12]
 8012018:	687a      	ldr	r2, [r7, #4]
 801201a:	615a      	str	r2, [r3, #20]
                    timer_ptr -> tx_timer_internal_active_next =        next_timer;
 801201c:	687b      	ldr	r3, [r7, #4]
 801201e:	68fa      	ldr	r2, [r7, #12]
 8012020:	611a      	str	r2, [r3, #16]
                    timer_ptr -> tx_timer_internal_active_previous =    previous_timer;
 8012022:	687b      	ldr	r3, [r7, #4]
 8012024:	68ba      	ldr	r2, [r7, #8]
 8012026:	615a      	str	r2, [r3, #20]
                }

                /* Setup list head pointer.  */
                timer_ptr -> tx_timer_internal_list_head =  timer_list;
 8012028:	687b      	ldr	r3, [r7, #4]
 801202a:	69fa      	ldr	r2, [r7, #28]
 801202c:	619a      	str	r2, [r3, #24]
            }
        }
    }
}
 801202e:	bf00      	nop
 8012030:	3724      	adds	r7, #36	; 0x24
 8012032:	46bd      	mov	sp, r7
 8012034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012038:	4770      	bx	lr
 801203a:	bf00      	nop
 801203c:	200030ac 	.word	0x200030ac
 8012040:	200030a8 	.word	0x200030a8
 8012044:	200030a4 	.word	0x200030a4

08012048 <_tx_timer_system_deactivate>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_system_deactivate(TX_TIMER_INTERNAL *timer_ptr)
{
 8012048:	b480      	push	{r7}
 801204a:	b087      	sub	sp, #28
 801204c:	af00      	add	r7, sp, #0
 801204e:	6078      	str	r0, [r7, #4]
TX_TIMER_INTERNAL   *next_timer;
TX_TIMER_INTERNAL   *previous_timer;


    /* Pickup the list head pointer.  */
    list_head =  timer_ptr -> tx_timer_internal_list_head;
 8012050:	687b      	ldr	r3, [r7, #4]
 8012052:	699b      	ldr	r3, [r3, #24]
 8012054:	617b      	str	r3, [r7, #20]

    /* Determine if the timer still needs deactivation.  */
    if (list_head != TX_NULL)
 8012056:	697b      	ldr	r3, [r7, #20]
 8012058:	2b00      	cmp	r3, #0
 801205a:	d026      	beq.n	80120aa <_tx_timer_system_deactivate+0x62>
    {

        /* Deactivate the timer.  */

        /* Pickup the next active timer.  */
        next_timer =  timer_ptr -> tx_timer_internal_active_next;
 801205c:	687b      	ldr	r3, [r7, #4]
 801205e:	691b      	ldr	r3, [r3, #16]
 8012060:	613b      	str	r3, [r7, #16]

        /* See if this is the only timer in the list.  */
        if (timer_ptr == next_timer)
 8012062:	687a      	ldr	r2, [r7, #4]
 8012064:	693b      	ldr	r3, [r7, #16]
 8012066:	429a      	cmp	r2, r3
 8012068:	d108      	bne.n	801207c <_tx_timer_system_deactivate+0x34>
        {

            /* Yes, the only timer on the list.  */

            /* Determine if the head pointer needs to be updated.  */
            if (*(list_head) == timer_ptr)
 801206a:	697b      	ldr	r3, [r7, #20]
 801206c:	681b      	ldr	r3, [r3, #0]
 801206e:	687a      	ldr	r2, [r7, #4]
 8012070:	429a      	cmp	r2, r3
 8012072:	d117      	bne.n	80120a4 <_tx_timer_system_deactivate+0x5c>
            {

                /* Update the head pointer.  */
                *(list_head) =  TX_NULL;
 8012074:	697b      	ldr	r3, [r7, #20]
 8012076:	2200      	movs	r2, #0
 8012078:	601a      	str	r2, [r3, #0]
 801207a:	e013      	b.n	80120a4 <_tx_timer_system_deactivate+0x5c>
        {

            /* At least one more timer is on the same expiration list.  */

            /* Update the links of the adjacent timers.  */
            previous_timer =                                   timer_ptr -> tx_timer_internal_active_previous;
 801207c:	687b      	ldr	r3, [r7, #4]
 801207e:	695b      	ldr	r3, [r3, #20]
 8012080:	60fb      	str	r3, [r7, #12]
            next_timer -> tx_timer_internal_active_previous =  previous_timer;
 8012082:	693b      	ldr	r3, [r7, #16]
 8012084:	68fa      	ldr	r2, [r7, #12]
 8012086:	615a      	str	r2, [r3, #20]
            previous_timer -> tx_timer_internal_active_next =  next_timer;
 8012088:	68fb      	ldr	r3, [r7, #12]
 801208a:	693a      	ldr	r2, [r7, #16]
 801208c:	611a      	str	r2, [r3, #16]

            /* Determine if the head pointer needs to be updated.  */
            if (*(list_head) == timer_ptr)
 801208e:	697b      	ldr	r3, [r7, #20]
 8012090:	681b      	ldr	r3, [r3, #0]
 8012092:	687a      	ldr	r2, [r7, #4]
 8012094:	429a      	cmp	r2, r3
 8012096:	d105      	bne.n	80120a4 <_tx_timer_system_deactivate+0x5c>
            {

                /* Update the next timer in the list with the list head pointer.  */
                next_timer -> tx_timer_internal_list_head =  list_head;
 8012098:	693b      	ldr	r3, [r7, #16]
 801209a:	697a      	ldr	r2, [r7, #20]
 801209c:	619a      	str	r2, [r3, #24]

                /* Update the head pointer.  */
                *(list_head) =  next_timer;
 801209e:	697b      	ldr	r3, [r7, #20]
 80120a0:	693a      	ldr	r2, [r7, #16]
 80120a2:	601a      	str	r2, [r3, #0]
            }
        }

        /* Clear the timer's list head pointer.  */
        timer_ptr -> tx_timer_internal_list_head =  TX_NULL;
 80120a4:	687b      	ldr	r3, [r7, #4]
 80120a6:	2200      	movs	r2, #0
 80120a8:	619a      	str	r2, [r3, #24]
    }
}
 80120aa:	bf00      	nop
 80120ac:	371c      	adds	r7, #28
 80120ae:	46bd      	mov	sp, r7
 80120b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120b4:	4770      	bx	lr
	...

080120b8 <_tx_timer_thread_entry>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
#ifndef TX_TIMER_PROCESS_IN_ISR
VOID  _tx_timer_thread_entry(ULONG timer_thread_input)
{
 80120b8:	b580      	push	{r7, lr}
 80120ba:	b098      	sub	sp, #96	; 0x60
 80120bc:	af00      	add	r7, sp, #0
 80120be:	6078      	str	r0, [r7, #4]
TX_TIMER_INTERNAL           *reactivate_timer;
TX_TIMER_INTERNAL           *next_timer;
TX_TIMER_INTERNAL           *previous_timer;
TX_TIMER_INTERNAL           *current_timer;
VOID                        (*timeout_function)(ULONG id);
ULONG                       timeout_param =  ((ULONG) 0);
 80120c0:	2300      	movs	r3, #0
 80120c2:	657b      	str	r3, [r7, #84]	; 0x54
#endif


    /* Make sure the timer input is correct.  This also gets rid of the
       silly compiler warnings.  */
    if (timer_thread_input == TX_TIMER_ID)
 80120c4:	687b      	ldr	r3, [r7, #4]
 80120c6:	4a73      	ldr	r2, [pc, #460]	; (8012294 <_tx_timer_thread_entry+0x1dc>)
 80120c8:	4293      	cmp	r3, r2
 80120ca:	f040 80de 	bne.w	801228a <_tx_timer_thread_entry+0x1d2>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80120ce:	f3ef 8310 	mrs	r3, PRIMASK
 80120d2:	643b      	str	r3, [r7, #64]	; 0x40
    return(posture);
 80120d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    int_posture = __get_interrupt_posture();
 80120d6:	63fb      	str	r3, [r7, #60]	; 0x3c
    __asm__ volatile ("CPSID i" : : : "memory");
 80120d8:	b672      	cpsid	i
    return(int_posture);
 80120da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
        {

            /* First, move the current list pointer and clear the timer
               expired value.  This allows the interrupt handling portion
               to continue looking for timer expirations.  */
            TX_DISABLE
 80120dc:	65fb      	str	r3, [r7, #92]	; 0x5c

            /* Save the current timer expiration list pointer.  */
            expired_timers =  *_tx_timer_current_ptr;
 80120de:	4b6e      	ldr	r3, [pc, #440]	; (8012298 <_tx_timer_thread_entry+0x1e0>)
 80120e0:	681b      	ldr	r3, [r3, #0]
 80120e2:	681b      	ldr	r3, [r3, #0]
 80120e4:	60fb      	str	r3, [r7, #12]

            /* Modify the head pointer in the first timer in the list, if there
               is one!  */
            if (expired_timers != TX_NULL)
 80120e6:	68fb      	ldr	r3, [r7, #12]
 80120e8:	2b00      	cmp	r3, #0
 80120ea:	d003      	beq.n	80120f4 <_tx_timer_thread_entry+0x3c>
            {

                expired_timers -> tx_timer_internal_list_head =  &expired_timers;
 80120ec:	68fb      	ldr	r3, [r7, #12]
 80120ee:	f107 020c 	add.w	r2, r7, #12
 80120f2:	619a      	str	r2, [r3, #24]
            }

            /* Set the current list pointer to NULL.  */
            *_tx_timer_current_ptr =  TX_NULL;
 80120f4:	4b68      	ldr	r3, [pc, #416]	; (8012298 <_tx_timer_thread_entry+0x1e0>)
 80120f6:	681b      	ldr	r3, [r3, #0]
 80120f8:	2200      	movs	r2, #0
 80120fa:	601a      	str	r2, [r3, #0]

            /* Move the current pointer up one timer entry wrap if we get to
               the end of the list.  */
            _tx_timer_current_ptr =  TX_TIMER_POINTER_ADD(_tx_timer_current_ptr, 1);
 80120fc:	4b66      	ldr	r3, [pc, #408]	; (8012298 <_tx_timer_thread_entry+0x1e0>)
 80120fe:	681b      	ldr	r3, [r3, #0]
 8012100:	3304      	adds	r3, #4
 8012102:	4a65      	ldr	r2, [pc, #404]	; (8012298 <_tx_timer_thread_entry+0x1e0>)
 8012104:	6013      	str	r3, [r2, #0]
            if (_tx_timer_current_ptr == _tx_timer_list_end)
 8012106:	4b64      	ldr	r3, [pc, #400]	; (8012298 <_tx_timer_thread_entry+0x1e0>)
 8012108:	681a      	ldr	r2, [r3, #0]
 801210a:	4b64      	ldr	r3, [pc, #400]	; (801229c <_tx_timer_thread_entry+0x1e4>)
 801210c:	681b      	ldr	r3, [r3, #0]
 801210e:	429a      	cmp	r2, r3
 8012110:	d103      	bne.n	801211a <_tx_timer_thread_entry+0x62>
            {

                _tx_timer_current_ptr =  _tx_timer_list_start;
 8012112:	4b63      	ldr	r3, [pc, #396]	; (80122a0 <_tx_timer_thread_entry+0x1e8>)
 8012114:	681b      	ldr	r3, [r3, #0]
 8012116:	4a60      	ldr	r2, [pc, #384]	; (8012298 <_tx_timer_thread_entry+0x1e0>)
 8012118:	6013      	str	r3, [r2, #0]
            }

            /* Clear the expired flag.  */
            _tx_timer_expired =  TX_FALSE;
 801211a:	4b62      	ldr	r3, [pc, #392]	; (80122a4 <_tx_timer_thread_entry+0x1ec>)
 801211c:	2200      	movs	r2, #0
 801211e:	601a      	str	r2, [r3, #0]
 8012120:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8012122:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8012124:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012126:	f383 8810 	msr	PRIMASK, r3
}
 801212a:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801212c:	f3ef 8310 	mrs	r3, PRIMASK
 8012130:	63bb      	str	r3, [r7, #56]	; 0x38
    return(posture);
 8012132:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    int_posture = __get_interrupt_posture();
 8012134:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile ("CPSID i" : : : "memory");
 8012136:	b672      	cpsid	i
    return(int_posture);
 8012138:	6b7b      	ldr	r3, [r7, #52]	; 0x34

            /* Restore interrupts temporarily.  */
            TX_RESTORE

            /* Disable interrupts again.  */
            TX_DISABLE
 801213a:	65fb      	str	r3, [r7, #92]	; 0x5c

            /* Next, process the expiration of the associated timers at this
               time slot.  */
            while (expired_timers != TX_NULL)
 801213c:	e07f      	b.n	801223e <_tx_timer_thread_entry+0x186>
            {

                /* Something is on the list.  Remove it and process the expiration.  */
                current_timer =  expired_timers;
 801213e:	68fb      	ldr	r3, [r7, #12]
 8012140:	64fb      	str	r3, [r7, #76]	; 0x4c

                /* Pickup the next timer.  */
                next_timer =  expired_timers -> tx_timer_internal_active_next;
 8012142:	68fb      	ldr	r3, [r7, #12]
 8012144:	691b      	ldr	r3, [r3, #16]
 8012146:	64bb      	str	r3, [r7, #72]	; 0x48

                /* Set the reactivate_timer to NULL.  */
                reactivate_timer =  TX_NULL;
 8012148:	2300      	movs	r3, #0
 801214a:	60bb      	str	r3, [r7, #8]

                /* Determine if this is the only timer.  */
                if (current_timer == next_timer)
 801214c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801214e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012150:	429a      	cmp	r2, r3
 8012152:	d102      	bne.n	801215a <_tx_timer_thread_entry+0xa2>
                {

                    /* Yes, this is the only timer in the list.  */

                    /* Set the head pointer to NULL.  */
                    expired_timers =  TX_NULL;
 8012154:	2300      	movs	r3, #0
 8012156:	60fb      	str	r3, [r7, #12]
 8012158:	e00e      	b.n	8012178 <_tx_timer_thread_entry+0xc0>
                {

                    /* No, not the only expired timer.  */

                    /* Remove this timer from the expired list.  */
                    previous_timer =                                   current_timer -> tx_timer_internal_active_previous;
 801215a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801215c:	695b      	ldr	r3, [r3, #20]
 801215e:	647b      	str	r3, [r7, #68]	; 0x44
                    next_timer -> tx_timer_internal_active_previous =  previous_timer;
 8012160:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012162:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8012164:	615a      	str	r2, [r3, #20]
                    previous_timer -> tx_timer_internal_active_next =  next_timer;
 8012166:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012168:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801216a:	611a      	str	r2, [r3, #16]

                    /* Modify the next timer's list head to point at the current list head.  */
                    next_timer -> tx_timer_internal_list_head =  &expired_timers;
 801216c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801216e:	f107 020c 	add.w	r2, r7, #12
 8012172:	619a      	str	r2, [r3, #24]

                    /* Set the list head pointer.  */
                    expired_timers =  next_timer;
 8012174:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012176:	60fb      	str	r3, [r7, #12]

                /* In any case, the timer is now off of the expired list.  */

                /* Determine if the timer has expired or if it is just a really
                   big timer that needs to be placed in the list again.  */
                if (current_timer -> tx_timer_internal_remaining_ticks > TX_TIMER_ENTRIES)
 8012178:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801217a:	681b      	ldr	r3, [r3, #0]
 801217c:	2b20      	cmp	r3, #32
 801217e:	d911      	bls.n	80121a4 <_tx_timer_thread_entry+0xec>
                    }
#endif

                    /* Decrement the remaining ticks of the timer.  */
                    current_timer -> tx_timer_internal_remaining_ticks =
                            current_timer -> tx_timer_internal_remaining_ticks - TX_TIMER_ENTRIES;
 8012180:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012182:	681b      	ldr	r3, [r3, #0]
 8012184:	f1a3 0220 	sub.w	r2, r3, #32
                    current_timer -> tx_timer_internal_remaining_ticks =
 8012188:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801218a:	601a      	str	r2, [r3, #0]

                    /* Set the timeout function to NULL in order to bypass the
                       expiration.  */
                    timeout_function =  TX_NULL;
 801218c:	2300      	movs	r3, #0
 801218e:	65bb      	str	r3, [r7, #88]	; 0x58

                    /* Make the timer appear that it is still active while interrupts
                       are enabled.  This will permit proper processing of a timer
                       deactivate from an ISR.  */
                    current_timer -> tx_timer_internal_list_head =    &reactivate_timer;
 8012190:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012192:	f107 0208 	add.w	r2, r7, #8
 8012196:	619a      	str	r2, [r3, #24]
                    current_timer -> tx_timer_internal_active_next =  current_timer;
 8012198:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801219a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801219c:	611a      	str	r2, [r3, #16]

                    /* Setup the temporary timer list head pointer.  */
                    reactivate_timer =  current_timer;
 801219e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80121a0:	60bb      	str	r3, [r7, #8]
 80121a2:	e01a      	b.n	80121da <_tx_timer_thread_entry+0x122>
                    }
#endif

                    /* Copy the calling function and ID into local variables before interrupts
                       are re-enabled.  */
                    timeout_function =  current_timer -> tx_timer_internal_timeout_function;
 80121a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80121a6:	689b      	ldr	r3, [r3, #8]
 80121a8:	65bb      	str	r3, [r7, #88]	; 0x58
                    timeout_param =     current_timer -> tx_timer_internal_timeout_param;
 80121aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80121ac:	68db      	ldr	r3, [r3, #12]
 80121ae:	657b      	str	r3, [r7, #84]	; 0x54

                    /* Copy the reinitialize ticks into the remaining ticks.  */
                    current_timer -> tx_timer_internal_remaining_ticks =  current_timer -> tx_timer_internal_re_initialize_ticks;
 80121b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80121b2:	685a      	ldr	r2, [r3, #4]
 80121b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80121b6:	601a      	str	r2, [r3, #0]

                    /* Determine if the timer should be reactivated.  */
                    if (current_timer -> tx_timer_internal_remaining_ticks != ((ULONG) 0))
 80121b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80121ba:	681b      	ldr	r3, [r3, #0]
 80121bc:	2b00      	cmp	r3, #0
 80121be:	d009      	beq.n	80121d4 <_tx_timer_thread_entry+0x11c>

                        /* Make the timer appear that it is still active while processing
                           the expiration routine and with interrupts enabled.  This will
                           permit proper processing of a timer deactivate from both the
                           expiration routine and an ISR.  */
                        current_timer -> tx_timer_internal_list_head =    &reactivate_timer;
 80121c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80121c2:	f107 0208 	add.w	r2, r7, #8
 80121c6:	619a      	str	r2, [r3, #24]
                        current_timer -> tx_timer_internal_active_next =  current_timer;
 80121c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80121ca:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80121cc:	611a      	str	r2, [r3, #16]

                        /* Setup the temporary timer list head pointer.  */
                        reactivate_timer =  current_timer;
 80121ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80121d0:	60bb      	str	r3, [r7, #8]
 80121d2:	e002      	b.n	80121da <_tx_timer_thread_entry+0x122>
                    else
                    {

                        /* Set the list pointer of this timer to NULL.  This is used to indicate
                           the timer is no longer active.  */
                        current_timer -> tx_timer_internal_list_head =  TX_NULL;
 80121d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80121d6:	2200      	movs	r2, #0
 80121d8:	619a      	str	r2, [r3, #24]
                    }
                }

                /* Set pointer to indicate the expired timer that is currently being processed.  */
                _tx_timer_expired_timer_ptr =  current_timer;
 80121da:	4a33      	ldr	r2, [pc, #204]	; (80122a8 <_tx_timer_thread_entry+0x1f0>)
 80121dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80121de:	6013      	str	r3, [r2, #0]
 80121e0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80121e2:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80121e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80121e6:	f383 8810 	msr	PRIMASK, r3
}
 80121ea:	bf00      	nop

                /* Restore interrupts for timer expiration call.  */
                TX_RESTORE

                /* Call the timer-expiration function, if non-NULL.  */
                if (timeout_function != TX_NULL)
 80121ec:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80121ee:	2b00      	cmp	r3, #0
 80121f0:	d002      	beq.n	80121f8 <_tx_timer_thread_entry+0x140>
                {

                    (timeout_function) (timeout_param);
 80121f2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80121f4:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80121f6:	4798      	blx	r3
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80121f8:	f3ef 8310 	mrs	r3, PRIMASK
 80121fc:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 80121fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
    int_posture = __get_interrupt_posture();
 8012200:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 8012202:	b672      	cpsid	i
    return(int_posture);
 8012204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                }

                /* Lockout interrupts again.  */
                TX_DISABLE
 8012206:	65fb      	str	r3, [r7, #92]	; 0x5c

                /* Clear expired timer pointer.  */
                _tx_timer_expired_timer_ptr =  TX_NULL;
 8012208:	4b27      	ldr	r3, [pc, #156]	; (80122a8 <_tx_timer_thread_entry+0x1f0>)
 801220a:	2200      	movs	r2, #0
 801220c:	601a      	str	r2, [r3, #0]

                /* Determine if the timer needs to be reactivated.  */
                if (reactivate_timer == current_timer)
 801220e:	68bb      	ldr	r3, [r7, #8]
 8012210:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8012212:	429a      	cmp	r2, r3
 8012214:	d105      	bne.n	8012222 <_tx_timer_thread_entry+0x16a>
#else

                    /* Reactivate through the timer activate function.  */

                    /* Clear the list head for the timer activate call.  */
                    current_timer -> tx_timer_internal_list_head = TX_NULL;
 8012216:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012218:	2200      	movs	r2, #0
 801221a:	619a      	str	r2, [r3, #24]

                    /* Activate the current timer.  */
                    _tx_timer_system_activate(current_timer);
 801221c:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 801221e:	f7ff feb1 	bl	8011f84 <_tx_timer_system_activate>
 8012222:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8012224:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8012226:	69bb      	ldr	r3, [r7, #24]
 8012228:	f383 8810 	msr	PRIMASK, r3
}
 801222c:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801222e:	f3ef 8310 	mrs	r3, PRIMASK
 8012232:	623b      	str	r3, [r7, #32]
    return(posture);
 8012234:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 8012236:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 8012238:	b672      	cpsid	i
    return(int_posture);
 801223a:	69fb      	ldr	r3, [r7, #28]

                /* Restore interrupts.  */
                TX_RESTORE

                /* Lockout interrupts again.  */
                TX_DISABLE
 801223c:	65fb      	str	r3, [r7, #92]	; 0x5c
            while (expired_timers != TX_NULL)
 801223e:	68fb      	ldr	r3, [r7, #12]
 8012240:	2b00      	cmp	r3, #0
 8012242:	f47f af7c 	bne.w	801213e <_tx_timer_thread_entry+0x86>

            /* Finally, suspend this thread and wait for the next expiration.  */

            /* Determine if another expiration took place while we were in this
               thread.  If so, process another expiration.  */
            if (_tx_timer_expired == TX_FALSE)
 8012246:	4b17      	ldr	r3, [pc, #92]	; (80122a4 <_tx_timer_thread_entry+0x1ec>)
 8012248:	681b      	ldr	r3, [r3, #0]
 801224a:	2b00      	cmp	r3, #0
 801224c:	d116      	bne.n	801227c <_tx_timer_thread_entry+0x1c4>
            {

                /* Otherwise, no timer expiration, so suspend the thread.  */

                /* Build pointer to the timer thread.  */
                thread_ptr =  &_tx_timer_thread;
 801224e:	4b17      	ldr	r3, [pc, #92]	; (80122ac <_tx_timer_thread_entry+0x1f4>)
 8012250:	653b      	str	r3, [r7, #80]	; 0x50

                /* Set the status to suspending, in order to indicate the
                   suspension is in progress.  */
                thread_ptr -> tx_thread_state =  TX_SUSPENDED;
 8012252:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012254:	2203      	movs	r2, #3
 8012256:	631a      	str	r2, [r3, #48]	; 0x30
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Set the suspending flag. */
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8012258:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801225a:	2201      	movs	r2, #1
 801225c:	639a      	str	r2, [r3, #56]	; 0x38

                /* Increment the preempt disable count prior to suspending.  */
                _tx_thread_preempt_disable++;
 801225e:	4b14      	ldr	r3, [pc, #80]	; (80122b0 <_tx_timer_thread_entry+0x1f8>)
 8012260:	681b      	ldr	r3, [r3, #0]
 8012262:	3301      	adds	r3, #1
 8012264:	4a12      	ldr	r2, [pc, #72]	; (80122b0 <_tx_timer_thread_entry+0x1f8>)
 8012266:	6013      	str	r3, [r2, #0]
 8012268:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801226a:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801226c:	697b      	ldr	r3, [r7, #20]
 801226e:	f383 8810 	msr	PRIMASK, r3
}
 8012272:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Call actual thread suspension routine.  */
                _tx_thread_system_suspend(thread_ptr);
 8012274:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8012276:	f7ff fc41 	bl	8011afc <_tx_thread_system_suspend>
 801227a:	e728      	b.n	80120ce <_tx_timer_thread_entry+0x16>
 801227c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801227e:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8012280:	693b      	ldr	r3, [r7, #16]
 8012282:	f383 8810 	msr	PRIMASK, r3
}
 8012286:	bf00      	nop
            TX_DISABLE
 8012288:	e721      	b.n	80120ce <_tx_timer_thread_entry+0x16>

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif

}
 801228a:	bf00      	nop
 801228c:	3760      	adds	r7, #96	; 0x60
 801228e:	46bd      	mov	sp, r7
 8012290:	bd80      	pop	{r7, pc}
 8012292:	bf00      	nop
 8012294:	4154494d 	.word	0x4154494d
 8012298:	200030ac 	.word	0x200030ac
 801229c:	200030a8 	.word	0x200030a8
 80122a0:	200030a4 	.word	0x200030a4
 80122a4:	200030b0 	.word	0x200030b0
 80122a8:	200030bc 	.word	0x200030bc
 80122ac:	200030c0 	.word	0x200030c0
 80122b0:	20003010 	.word	0x20003010

080122b4 <_txe_byte_pool_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_byte_pool_create(TX_BYTE_POOL *pool_ptr, CHAR *name_ptr, VOID *pool_start, ULONG pool_size, UINT pool_control_block_size)
{
 80122b4:	b580      	push	{r7, lr}
 80122b6:	b092      	sub	sp, #72	; 0x48
 80122b8:	af00      	add	r7, sp, #0
 80122ba:	60f8      	str	r0, [r7, #12]
 80122bc:	60b9      	str	r1, [r7, #8]
 80122be:	607a      	str	r2, [r7, #4]
 80122c0:	603b      	str	r3, [r7, #0]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 80122c2:	2300      	movs	r3, #0
 80122c4:	647b      	str	r3, [r7, #68]	; 0x44

    /* Check for an invalid byte pool pointer.  */
    if (pool_ptr == TX_NULL)
 80122c6:	68fb      	ldr	r3, [r7, #12]
 80122c8:	2b00      	cmp	r3, #0
 80122ca:	d102      	bne.n	80122d2 <_txe_byte_pool_create+0x1e>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 80122cc:	2302      	movs	r3, #2
 80122ce:	647b      	str	r3, [r7, #68]	; 0x44
 80122d0:	e075      	b.n	80123be <_txe_byte_pool_create+0x10a>
    }

    /* Now see if the pool control block size is valid.  */
    else if (pool_control_block_size != (sizeof(TX_BYTE_POOL)))
 80122d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80122d4:	2b34      	cmp	r3, #52	; 0x34
 80122d6:	d002      	beq.n	80122de <_txe_byte_pool_create+0x2a>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 80122d8:	2302      	movs	r3, #2
 80122da:	647b      	str	r3, [r7, #68]	; 0x44
 80122dc:	e06f      	b.n	80123be <_txe_byte_pool_create+0x10a>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80122de:	f3ef 8310 	mrs	r3, PRIMASK
 80122e2:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 80122e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 80122e6:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 80122e8:	b672      	cpsid	i
    return(int_posture);
 80122ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 80122ec:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 80122ee:	4b3b      	ldr	r3, [pc, #236]	; (80123dc <_txe_byte_pool_create+0x128>)
 80122f0:	681b      	ldr	r3, [r3, #0]
 80122f2:	3301      	adds	r3, #1
 80122f4:	4a39      	ldr	r2, [pc, #228]	; (80123dc <_txe_byte_pool_create+0x128>)
 80122f6:	6013      	str	r3, [r2, #0]
 80122f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80122fa:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80122fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80122fe:	f383 8810 	msr	PRIMASK, r3
}
 8012302:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_pool =   _tx_byte_pool_created_ptr;
 8012304:	4b36      	ldr	r3, [pc, #216]	; (80123e0 <_txe_byte_pool_create+0x12c>)
 8012306:	681b      	ldr	r3, [r3, #0]
 8012308:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_byte_pool_created_count; i++)
 801230a:	2300      	movs	r3, #0
 801230c:	643b      	str	r3, [r7, #64]	; 0x40
 801230e:	e009      	b.n	8012324 <_txe_byte_pool_create+0x70>
        {

            /* Determine if this byte pool matches the pool in the list.  */
            if (pool_ptr == next_pool)
 8012310:	68fa      	ldr	r2, [r7, #12]
 8012312:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012314:	429a      	cmp	r2, r3
 8012316:	d00b      	beq.n	8012330 <_txe_byte_pool_create+0x7c>
            }
            else
            {

                /* Move to the next pool.  */
                next_pool =  next_pool -> tx_byte_pool_created_next;
 8012318:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801231a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801231c:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_byte_pool_created_count; i++)
 801231e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012320:	3301      	adds	r3, #1
 8012322:	643b      	str	r3, [r7, #64]	; 0x40
 8012324:	4b2f      	ldr	r3, [pc, #188]	; (80123e4 <_txe_byte_pool_create+0x130>)
 8012326:	681b      	ldr	r3, [r3, #0]
 8012328:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801232a:	429a      	cmp	r2, r3
 801232c:	d3f0      	bcc.n	8012310 <_txe_byte_pool_create+0x5c>
 801232e:	e000      	b.n	8012332 <_txe_byte_pool_create+0x7e>
                break;
 8012330:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8012332:	f3ef 8310 	mrs	r3, PRIMASK
 8012336:	623b      	str	r3, [r7, #32]
    return(posture);
 8012338:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 801233a:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 801233c:	b672      	cpsid	i
    return(int_posture);
 801233e:	69fb      	ldr	r3, [r7, #28]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 8012340:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 8012342:	4b26      	ldr	r3, [pc, #152]	; (80123dc <_txe_byte_pool_create+0x128>)
 8012344:	681b      	ldr	r3, [r3, #0]
 8012346:	3b01      	subs	r3, #1
 8012348:	4a24      	ldr	r2, [pc, #144]	; (80123dc <_txe_byte_pool_create+0x128>)
 801234a:	6013      	str	r3, [r2, #0]
 801234c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801234e:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8012350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012352:	f383 8810 	msr	PRIMASK, r3
}
 8012356:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 8012358:	f7ff fa96 	bl	8011888 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate pool.  */
        if (pool_ptr == next_pool)
 801235c:	68fa      	ldr	r2, [r7, #12]
 801235e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012360:	429a      	cmp	r2, r3
 8012362:	d102      	bne.n	801236a <_txe_byte_pool_create+0xb6>
        {

            /* Pool is already created, return appropriate error code.  */
            status =  TX_POOL_ERROR;
 8012364:	2302      	movs	r3, #2
 8012366:	647b      	str	r3, [r7, #68]	; 0x44
 8012368:	e029      	b.n	80123be <_txe_byte_pool_create+0x10a>
        }

        /* Check for an invalid starting address.  */
        else if (pool_start == TX_NULL)
 801236a:	687b      	ldr	r3, [r7, #4]
 801236c:	2b00      	cmp	r3, #0
 801236e:	d102      	bne.n	8012376 <_txe_byte_pool_create+0xc2>
        {

            /* Null starting address pointer, return appropriate error.  */
            status =  TX_PTR_ERROR;
 8012370:	2303      	movs	r3, #3
 8012372:	647b      	str	r3, [r7, #68]	; 0x44
 8012374:	e023      	b.n	80123be <_txe_byte_pool_create+0x10a>
        }

        /* Check for invalid pool size.  */
        else if (pool_size < TX_BYTE_POOL_MIN)
 8012376:	683b      	ldr	r3, [r7, #0]
 8012378:	2b63      	cmp	r3, #99	; 0x63
 801237a:	d802      	bhi.n	8012382 <_txe_byte_pool_create+0xce>
        {

            /* Pool not big enough, return appropriate error.  */
            status =  TX_SIZE_ERROR;
 801237c:	2305      	movs	r3, #5
 801237e:	647b      	str	r3, [r7, #68]	; 0x44
 8012380:	e01d      	b.n	80123be <_txe_byte_pool_create+0x10a>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 8012382:	4b19      	ldr	r3, [pc, #100]	; (80123e8 <_txe_byte_pool_create+0x134>)
 8012384:	681b      	ldr	r3, [r3, #0]
 8012386:	637b      	str	r3, [r7, #52]	; 0x34

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (thread_ptr == &_tx_timer_thread)
 8012388:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801238a:	4a18      	ldr	r2, [pc, #96]	; (80123ec <_txe_byte_pool_create+0x138>)
 801238c:	4293      	cmp	r3, r2
 801238e:	d101      	bne.n	8012394 <_txe_byte_pool_create+0xe0>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 8012390:	2313      	movs	r3, #19
 8012392:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8012394:	f3ef 8305 	mrs	r3, IPSR
 8012398:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 801239a:	69ba      	ldr	r2, [r7, #24]
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 801239c:	4b14      	ldr	r3, [pc, #80]	; (80123f0 <_txe_byte_pool_create+0x13c>)
 801239e:	681b      	ldr	r3, [r3, #0]
 80123a0:	4313      	orrs	r3, r2
 80123a2:	2b00      	cmp	r3, #0
 80123a4:	d00b      	beq.n	80123be <_txe_byte_pool_create+0x10a>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80123a6:	f3ef 8305 	mrs	r3, IPSR
 80123aa:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 80123ac:	697a      	ldr	r2, [r7, #20]
            {

                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 80123ae:	4b10      	ldr	r3, [pc, #64]	; (80123f0 <_txe_byte_pool_create+0x13c>)
 80123b0:	681b      	ldr	r3, [r3, #0]
 80123b2:	4313      	orrs	r3, r2
 80123b4:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 80123b8:	d201      	bcs.n	80123be <_txe_byte_pool_create+0x10a>
                {

                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 80123ba:	2313      	movs	r3, #19
 80123bc:	647b      	str	r3, [r7, #68]	; 0x44
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 80123be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80123c0:	2b00      	cmp	r3, #0
 80123c2:	d106      	bne.n	80123d2 <_txe_byte_pool_create+0x11e>
    {

        /* Call actual byte pool create function.  */
        status =  _tx_byte_pool_create(pool_ptr, name_ptr, pool_start, pool_size);
 80123c4:	683b      	ldr	r3, [r7, #0]
 80123c6:	687a      	ldr	r2, [r7, #4]
 80123c8:	68b9      	ldr	r1, [r7, #8]
 80123ca:	68f8      	ldr	r0, [r7, #12]
 80123cc:	f7fd fe72 	bl	80100b4 <_tx_byte_pool_create>
 80123d0:	6478      	str	r0, [r7, #68]	; 0x44
    }

    /* Return completion status.  */
    return(status);
 80123d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 80123d4:	4618      	mov	r0, r3
 80123d6:	3748      	adds	r7, #72	; 0x48
 80123d8:	46bd      	mov	sp, r7
 80123da:	bd80      	pop	{r7, pc}
 80123dc:	20003010 	.word	0x20003010
 80123e0:	20002f68 	.word	0x20002f68
 80123e4:	20002f6c 	.word	0x20002f6c
 80123e8:	20002f78 	.word	0x20002f78
 80123ec:	200030c0 	.word	0x200030c0
 80123f0:	20000010 	.word	0x20000010

080123f4 <_txe_event_flags_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_event_flags_create(TX_EVENT_FLAGS_GROUP *group_ptr, CHAR *name_ptr, UINT event_control_block_size)
{
 80123f4:	b580      	push	{r7, lr}
 80123f6:	b092      	sub	sp, #72	; 0x48
 80123f8:	af00      	add	r7, sp, #0
 80123fa:	60f8      	str	r0, [r7, #12]
 80123fc:	60b9      	str	r1, [r7, #8]
 80123fe:	607a      	str	r2, [r7, #4]
TX_THREAD                   *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 8012400:	2300      	movs	r3, #0
 8012402:	647b      	str	r3, [r7, #68]	; 0x44

    /* Check for an invalid event flags group pointer.  */
    if (group_ptr == TX_NULL)
 8012404:	68fb      	ldr	r3, [r7, #12]
 8012406:	2b00      	cmp	r3, #0
 8012408:	d102      	bne.n	8012410 <_txe_event_flags_create+0x1c>
    {

        /* Event flags group pointer is invalid, return appropriate error code.  */
        status =  TX_GROUP_ERROR;
 801240a:	2306      	movs	r3, #6
 801240c:	647b      	str	r3, [r7, #68]	; 0x44
 801240e:	e069      	b.n	80124e4 <_txe_event_flags_create+0xf0>
    }

    /* Now check for proper control block size.  */
    else if (event_control_block_size != (sizeof(TX_EVENT_FLAGS_GROUP)))
 8012410:	687b      	ldr	r3, [r7, #4]
 8012412:	2b24      	cmp	r3, #36	; 0x24
 8012414:	d002      	beq.n	801241c <_txe_event_flags_create+0x28>
    {

        /* Event flags group pointer is invalid, return appropriate error code.  */
        status =  TX_GROUP_ERROR;
 8012416:	2306      	movs	r3, #6
 8012418:	647b      	str	r3, [r7, #68]	; 0x44
 801241a:	e063      	b.n	80124e4 <_txe_event_flags_create+0xf0>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801241c:	f3ef 8310 	mrs	r3, PRIMASK
 8012420:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 8012422:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 8012424:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 8012426:	b672      	cpsid	i
    return(int_posture);
 8012428:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 801242a:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 801242c:	4b34      	ldr	r3, [pc, #208]	; (8012500 <_txe_event_flags_create+0x10c>)
 801242e:	681b      	ldr	r3, [r3, #0]
 8012430:	3301      	adds	r3, #1
 8012432:	4a33      	ldr	r2, [pc, #204]	; (8012500 <_txe_event_flags_create+0x10c>)
 8012434:	6013      	str	r3, [r2, #0]
 8012436:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012438:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801243a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801243c:	f383 8810 	msr	PRIMASK, r3
}
 8012440:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_group =   _tx_event_flags_created_ptr;
 8012442:	4b30      	ldr	r3, [pc, #192]	; (8012504 <_txe_event_flags_create+0x110>)
 8012444:	681b      	ldr	r3, [r3, #0]
 8012446:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_event_flags_created_count; i++)
 8012448:	2300      	movs	r3, #0
 801244a:	643b      	str	r3, [r7, #64]	; 0x40
 801244c:	e009      	b.n	8012462 <_txe_event_flags_create+0x6e>
        {

            /* Determine if this group matches the event flags group in the list.  */
            if (group_ptr == next_group)
 801244e:	68fa      	ldr	r2, [r7, #12]
 8012450:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012452:	429a      	cmp	r2, r3
 8012454:	d00b      	beq.n	801246e <_txe_event_flags_create+0x7a>
            }
            else
            {

                /* Move to the next group.  */
                next_group =  next_group -> tx_event_flags_group_created_next;
 8012456:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012458:	699b      	ldr	r3, [r3, #24]
 801245a:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_event_flags_created_count; i++)
 801245c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801245e:	3301      	adds	r3, #1
 8012460:	643b      	str	r3, [r7, #64]	; 0x40
 8012462:	4b29      	ldr	r3, [pc, #164]	; (8012508 <_txe_event_flags_create+0x114>)
 8012464:	681b      	ldr	r3, [r3, #0]
 8012466:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8012468:	429a      	cmp	r2, r3
 801246a:	d3f0      	bcc.n	801244e <_txe_event_flags_create+0x5a>
 801246c:	e000      	b.n	8012470 <_txe_event_flags_create+0x7c>
                break;
 801246e:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8012470:	f3ef 8310 	mrs	r3, PRIMASK
 8012474:	623b      	str	r3, [r7, #32]
    return(posture);
 8012476:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 8012478:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 801247a:	b672      	cpsid	i
    return(int_posture);
 801247c:	69fb      	ldr	r3, [r7, #28]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 801247e:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 8012480:	4b1f      	ldr	r3, [pc, #124]	; (8012500 <_txe_event_flags_create+0x10c>)
 8012482:	681b      	ldr	r3, [r3, #0]
 8012484:	3b01      	subs	r3, #1
 8012486:	4a1e      	ldr	r2, [pc, #120]	; (8012500 <_txe_event_flags_create+0x10c>)
 8012488:	6013      	str	r3, [r2, #0]
 801248a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801248c:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801248e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012490:	f383 8810 	msr	PRIMASK, r3
}
 8012494:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 8012496:	f7ff f9f7 	bl	8011888 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate event flag group.  */
        if (group_ptr == next_group)
 801249a:	68fa      	ldr	r2, [r7, #12]
 801249c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801249e:	429a      	cmp	r2, r3
 80124a0:	d102      	bne.n	80124a8 <_txe_event_flags_create+0xb4>
        {

            /* Group is already created, return appropriate error code.  */
            status =  TX_GROUP_ERROR;
 80124a2:	2306      	movs	r3, #6
 80124a4:	647b      	str	r3, [r7, #68]	; 0x44
 80124a6:	e01d      	b.n	80124e4 <_txe_event_flags_create+0xf0>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 80124a8:	4b18      	ldr	r3, [pc, #96]	; (801250c <_txe_event_flags_create+0x118>)
 80124aa:	681b      	ldr	r3, [r3, #0]
 80124ac:	637b      	str	r3, [r7, #52]	; 0x34

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (thread_ptr == &_tx_timer_thread)
 80124ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80124b0:	4a17      	ldr	r2, [pc, #92]	; (8012510 <_txe_event_flags_create+0x11c>)
 80124b2:	4293      	cmp	r3, r2
 80124b4:	d101      	bne.n	80124ba <_txe_event_flags_create+0xc6>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 80124b6:	2313      	movs	r3, #19
 80124b8:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80124ba:	f3ef 8305 	mrs	r3, IPSR
 80124be:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 80124c0:	69ba      	ldr	r2, [r7, #24]
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 80124c2:	4b14      	ldr	r3, [pc, #80]	; (8012514 <_txe_event_flags_create+0x120>)
 80124c4:	681b      	ldr	r3, [r3, #0]
 80124c6:	4313      	orrs	r3, r2
 80124c8:	2b00      	cmp	r3, #0
 80124ca:	d00b      	beq.n	80124e4 <_txe_event_flags_create+0xf0>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80124cc:	f3ef 8305 	mrs	r3, IPSR
 80124d0:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 80124d2:	697a      	ldr	r2, [r7, #20]
            {

                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 80124d4:	4b0f      	ldr	r3, [pc, #60]	; (8012514 <_txe_event_flags_create+0x120>)
 80124d6:	681b      	ldr	r3, [r3, #0]
 80124d8:	4313      	orrs	r3, r2
 80124da:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 80124de:	d201      	bcs.n	80124e4 <_txe_event_flags_create+0xf0>
                {

                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 80124e0:	2313      	movs	r3, #19
 80124e2:	647b      	str	r3, [r7, #68]	; 0x44
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 80124e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80124e6:	2b00      	cmp	r3, #0
 80124e8:	d104      	bne.n	80124f4 <_txe_event_flags_create+0x100>
    {

        /* Call actual event flags create function.  */
        status =  _tx_event_flags_create(group_ptr, name_ptr);
 80124ea:	68b9      	ldr	r1, [r7, #8]
 80124ec:	68f8      	ldr	r0, [r7, #12]
 80124ee:	f7fd fe77 	bl	80101e0 <_tx_event_flags_create>
 80124f2:	6478      	str	r0, [r7, #68]	; 0x44
    }

    /* Return completion status.  */
    return(status);
 80124f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 80124f6:	4618      	mov	r0, r3
 80124f8:	3748      	adds	r7, #72	; 0x48
 80124fa:	46bd      	mov	sp, r7
 80124fc:	bd80      	pop	{r7, pc}
 80124fe:	bf00      	nop
 8012500:	20003010 	.word	0x20003010
 8012504:	20002f50 	.word	0x20002f50
 8012508:	20002f54 	.word	0x20002f54
 801250c:	20002f78 	.word	0x20002f78
 8012510:	200030c0 	.word	0x200030c0
 8012514:	20000010 	.word	0x20000010

08012518 <_txe_event_flags_set>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_event_flags_set(TX_EVENT_FLAGS_GROUP *group_ptr, ULONG flags_to_set, UINT set_option)
{
 8012518:	b580      	push	{r7, lr}
 801251a:	b086      	sub	sp, #24
 801251c:	af00      	add	r7, sp, #0
 801251e:	60f8      	str	r0, [r7, #12]
 8012520:	60b9      	str	r1, [r7, #8]
 8012522:	607a      	str	r2, [r7, #4]

UINT        status;


    /* Default status to success.  */
    status =  TX_SUCCESS;
 8012524:	2300      	movs	r3, #0
 8012526:	617b      	str	r3, [r7, #20]

    /* Check for an invalid event flag group pointer.  */
    if (group_ptr == TX_NULL)
 8012528:	68fb      	ldr	r3, [r7, #12]
 801252a:	2b00      	cmp	r3, #0
 801252c:	d102      	bne.n	8012534 <_txe_event_flags_set+0x1c>
    {

        /* Event flags group pointer is invalid, return appropriate error code.  */
        status =  TX_GROUP_ERROR;
 801252e:	2306      	movs	r3, #6
 8012530:	617b      	str	r3, [r7, #20]
 8012532:	e00f      	b.n	8012554 <_txe_event_flags_set+0x3c>
    }

    /* Now check for invalid event flag group ID.  */
    else if (group_ptr -> tx_event_flags_group_id != TX_EVENT_FLAGS_ID)
 8012534:	68fb      	ldr	r3, [r7, #12]
 8012536:	681b      	ldr	r3, [r3, #0]
 8012538:	4a0d      	ldr	r2, [pc, #52]	; (8012570 <_txe_event_flags_set+0x58>)
 801253a:	4293      	cmp	r3, r2
 801253c:	d002      	beq.n	8012544 <_txe_event_flags_set+0x2c>
    {

        /* Event flags group pointer is invalid, return appropriate error code.  */
        status =  TX_GROUP_ERROR;
 801253e:	2306      	movs	r3, #6
 8012540:	617b      	str	r3, [r7, #20]
 8012542:	e007      	b.n	8012554 <_txe_event_flags_set+0x3c>
    }
    else
    {

        /* Check for invalid set option.  */
        if (set_option != TX_AND)
 8012544:	687b      	ldr	r3, [r7, #4]
 8012546:	2b02      	cmp	r3, #2
 8012548:	d004      	beq.n	8012554 <_txe_event_flags_set+0x3c>
        {

            if (set_option != TX_OR)
 801254a:	687b      	ldr	r3, [r7, #4]
 801254c:	2b00      	cmp	r3, #0
 801254e:	d001      	beq.n	8012554 <_txe_event_flags_set+0x3c>
            {

                /* Invalid set events option, return appropriate error.  */
                status =  TX_OPTION_ERROR;
 8012550:	2308      	movs	r3, #8
 8012552:	617b      	str	r3, [r7, #20]
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8012554:	697b      	ldr	r3, [r7, #20]
 8012556:	2b00      	cmp	r3, #0
 8012558:	d105      	bne.n	8012566 <_txe_event_flags_set+0x4e>
    {

        /* Call actual event flags set function.  */
        status =  _tx_event_flags_set(group_ptr, flags_to_set, set_option);
 801255a:	687a      	ldr	r2, [r7, #4]
 801255c:	68b9      	ldr	r1, [r7, #8]
 801255e:	68f8      	ldr	r0, [r7, #12]
 8012560:	f7fd fe8c 	bl	801027c <_tx_event_flags_set>
 8012564:	6178      	str	r0, [r7, #20]
    }

    /* Return completion status.  */
    return(status);
 8012566:	697b      	ldr	r3, [r7, #20]
}
 8012568:	4618      	mov	r0, r3
 801256a:	3718      	adds	r7, #24
 801256c:	46bd      	mov	sp, r7
 801256e:	bd80      	pop	{r7, pc}
 8012570:	4456444e 	.word	0x4456444e

08012574 <_txe_mutex_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_mutex_create(TX_MUTEX *mutex_ptr, CHAR *name_ptr, UINT inherit, UINT mutex_control_block_size)
{
 8012574:	b580      	push	{r7, lr}
 8012576:	b092      	sub	sp, #72	; 0x48
 8012578:	af00      	add	r7, sp, #0
 801257a:	60f8      	str	r0, [r7, #12]
 801257c:	60b9      	str	r1, [r7, #8]
 801257e:	607a      	str	r2, [r7, #4]
 8012580:	603b      	str	r3, [r7, #0]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 8012582:	2300      	movs	r3, #0
 8012584:	647b      	str	r3, [r7, #68]	; 0x44

    /* Check for an invalid mutex pointer.  */
    if (mutex_ptr == TX_NULL)
 8012586:	68fb      	ldr	r3, [r7, #12]
 8012588:	2b00      	cmp	r3, #0
 801258a:	d102      	bne.n	8012592 <_txe_mutex_create+0x1e>
    {

        /* Mutex pointer is invalid, return appropriate error code.  */
        status =  TX_MUTEX_ERROR;
 801258c:	231c      	movs	r3, #28
 801258e:	647b      	str	r3, [r7, #68]	; 0x44
 8012590:	e053      	b.n	801263a <_txe_mutex_create+0xc6>
    }

    /* Now check to make sure the control block is the correct size.  */
    else if (mutex_control_block_size != (sizeof(TX_MUTEX)))
 8012592:	683b      	ldr	r3, [r7, #0]
 8012594:	2b34      	cmp	r3, #52	; 0x34
 8012596:	d002      	beq.n	801259e <_txe_mutex_create+0x2a>
    {

        /* Mutex pointer is invalid, return appropriate error code.  */
        status =  TX_MUTEX_ERROR;
 8012598:	231c      	movs	r3, #28
 801259a:	647b      	str	r3, [r7, #68]	; 0x44
 801259c:	e04d      	b.n	801263a <_txe_mutex_create+0xc6>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801259e:	f3ef 8310 	mrs	r3, PRIMASK
 80125a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 80125a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 80125a6:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 80125a8:	b672      	cpsid	i
    return(int_posture);
 80125aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 80125ac:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 80125ae:	4b3a      	ldr	r3, [pc, #232]	; (8012698 <_txe_mutex_create+0x124>)
 80125b0:	681b      	ldr	r3, [r3, #0]
 80125b2:	3301      	adds	r3, #1
 80125b4:	4a38      	ldr	r2, [pc, #224]	; (8012698 <_txe_mutex_create+0x124>)
 80125b6:	6013      	str	r3, [r2, #0]
 80125b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80125ba:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80125bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80125be:	f383 8810 	msr	PRIMASK, r3
}
 80125c2:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_mutex =   _tx_mutex_created_ptr;
 80125c4:	4b35      	ldr	r3, [pc, #212]	; (801269c <_txe_mutex_create+0x128>)
 80125c6:	681b      	ldr	r3, [r3, #0]
 80125c8:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_mutex_created_count; i++)
 80125ca:	2300      	movs	r3, #0
 80125cc:	643b      	str	r3, [r7, #64]	; 0x40
 80125ce:	e009      	b.n	80125e4 <_txe_mutex_create+0x70>
        {

            /* Determine if this mutex matches the mutex in the list.  */
            if (mutex_ptr == next_mutex)
 80125d0:	68fa      	ldr	r2, [r7, #12]
 80125d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80125d4:	429a      	cmp	r2, r3
 80125d6:	d00b      	beq.n	80125f0 <_txe_mutex_create+0x7c>
            }
            else
            {

                /* Move to the next mutex.  */
                next_mutex =  next_mutex -> tx_mutex_created_next;
 80125d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80125da:	6a1b      	ldr	r3, [r3, #32]
 80125dc:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_mutex_created_count; i++)
 80125de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80125e0:	3301      	adds	r3, #1
 80125e2:	643b      	str	r3, [r7, #64]	; 0x40
 80125e4:	4b2e      	ldr	r3, [pc, #184]	; (80126a0 <_txe_mutex_create+0x12c>)
 80125e6:	681b      	ldr	r3, [r3, #0]
 80125e8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80125ea:	429a      	cmp	r2, r3
 80125ec:	d3f0      	bcc.n	80125d0 <_txe_mutex_create+0x5c>
 80125ee:	e000      	b.n	80125f2 <_txe_mutex_create+0x7e>
                break;
 80125f0:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80125f2:	f3ef 8310 	mrs	r3, PRIMASK
 80125f6:	623b      	str	r3, [r7, #32]
    return(posture);
 80125f8:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 80125fa:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 80125fc:	b672      	cpsid	i
    return(int_posture);
 80125fe:	69fb      	ldr	r3, [r7, #28]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 8012600:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 8012602:	4b25      	ldr	r3, [pc, #148]	; (8012698 <_txe_mutex_create+0x124>)
 8012604:	681b      	ldr	r3, [r3, #0]
 8012606:	3b01      	subs	r3, #1
 8012608:	4a23      	ldr	r2, [pc, #140]	; (8012698 <_txe_mutex_create+0x124>)
 801260a:	6013      	str	r3, [r2, #0]
 801260c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801260e:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8012610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012612:	f383 8810 	msr	PRIMASK, r3
}
 8012616:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 8012618:	f7ff f936 	bl	8011888 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate mutex.  */
        if (mutex_ptr == next_mutex)
 801261c:	68fa      	ldr	r2, [r7, #12]
 801261e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012620:	429a      	cmp	r2, r3
 8012622:	d102      	bne.n	801262a <_txe_mutex_create+0xb6>
        {

            /* Mutex is already created, return appropriate error code.  */
            status =  TX_MUTEX_ERROR;
 8012624:	231c      	movs	r3, #28
 8012626:	647b      	str	r3, [r7, #68]	; 0x44
 8012628:	e007      	b.n	801263a <_txe_mutex_create+0xc6>
        }
        else
        {

            /* Check for a valid inherit option.  */
            if (inherit != TX_INHERIT)
 801262a:	687b      	ldr	r3, [r7, #4]
 801262c:	2b01      	cmp	r3, #1
 801262e:	d004      	beq.n	801263a <_txe_mutex_create+0xc6>
            {

                if (inherit != TX_NO_INHERIT)
 8012630:	687b      	ldr	r3, [r7, #4]
 8012632:	2b00      	cmp	r3, #0
 8012634:	d001      	beq.n	801263a <_txe_mutex_create+0xc6>
                {

                    /* Inherit option is illegal.  */
                    status =  TX_INHERIT_ERROR;
 8012636:	231f      	movs	r3, #31
 8012638:	647b      	str	r3, [r7, #68]	; 0x44
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 801263a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801263c:	2b00      	cmp	r3, #0
 801263e:	d11d      	bne.n	801267c <_txe_mutex_create+0x108>
    {

#ifndef TX_TIMER_PROCESS_IN_ISR

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(thread_ptr)
 8012640:	4b18      	ldr	r3, [pc, #96]	; (80126a4 <_txe_mutex_create+0x130>)
 8012642:	681b      	ldr	r3, [r3, #0]
 8012644:	637b      	str	r3, [r7, #52]	; 0x34

        /* Check for invalid caller of this function.  First check for a calling thread.  */
        if (thread_ptr == &_tx_timer_thread)
 8012646:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012648:	4a17      	ldr	r2, [pc, #92]	; (80126a8 <_txe_mutex_create+0x134>)
 801264a:	4293      	cmp	r3, r2
 801264c:	d101      	bne.n	8012652 <_txe_mutex_create+0xde>
        {

            /* Invalid caller of this function, return appropriate error code.  */
            status =  TX_CALLER_ERROR;
 801264e:	2313      	movs	r3, #19
 8012650:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8012652:	f3ef 8305 	mrs	r3, IPSR
 8012656:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 8012658:	69ba      	ldr	r2, [r7, #24]
        }
#endif

        /* Check for interrupt call.  */
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 801265a:	4b14      	ldr	r3, [pc, #80]	; (80126ac <_txe_mutex_create+0x138>)
 801265c:	681b      	ldr	r3, [r3, #0]
 801265e:	4313      	orrs	r3, r2
 8012660:	2b00      	cmp	r3, #0
 8012662:	d00b      	beq.n	801267c <_txe_mutex_create+0x108>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8012664:	f3ef 8305 	mrs	r3, IPSR
 8012668:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 801266a:	697a      	ldr	r2, [r7, #20]
        {

            /* Now, make sure the call is from an interrupt and not initialization.  */
            if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 801266c:	4b0f      	ldr	r3, [pc, #60]	; (80126ac <_txe_mutex_create+0x138>)
 801266e:	681b      	ldr	r3, [r3, #0]
 8012670:	4313      	orrs	r3, r2
 8012672:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 8012676:	d201      	bcs.n	801267c <_txe_mutex_create+0x108>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 8012678:	2313      	movs	r3, #19
 801267a:	647b      	str	r3, [r7, #68]	; 0x44
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 801267c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801267e:	2b00      	cmp	r3, #0
 8012680:	d105      	bne.n	801268e <_txe_mutex_create+0x11a>
    {

        /* Call actual mutex create function.  */
        status =  _tx_mutex_create(mutex_ptr, name_ptr, inherit);
 8012682:	687a      	ldr	r2, [r7, #4]
 8012684:	68b9      	ldr	r1, [r7, #8]
 8012686:	68f8      	ldr	r0, [r7, #12]
 8012688:	f7fe f938 	bl	80108fc <_tx_mutex_create>
 801268c:	6478      	str	r0, [r7, #68]	; 0x44
    }

    /* Return completion status.  */
    return(status);
 801268e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8012690:	4618      	mov	r0, r3
 8012692:	3748      	adds	r7, #72	; 0x48
 8012694:	46bd      	mov	sp, r7
 8012696:	bd80      	pop	{r7, pc}
 8012698:	20003010 	.word	0x20003010
 801269c:	20002f58 	.word	0x20002f58
 80126a0:	20002f5c 	.word	0x20002f5c
 80126a4:	20002f78 	.word	0x20002f78
 80126a8:	200030c0 	.word	0x200030c0
 80126ac:	20000010 	.word	0x20000010

080126b0 <_txe_mutex_get>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_mutex_get(TX_MUTEX *mutex_ptr, ULONG wait_option)
{
 80126b0:	b580      	push	{r7, lr}
 80126b2:	b088      	sub	sp, #32
 80126b4:	af00      	add	r7, sp, #0
 80126b6:	6078      	str	r0, [r7, #4]
 80126b8:	6039      	str	r1, [r7, #0]
TX_THREAD       *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 80126ba:	2300      	movs	r3, #0
 80126bc:	61fb      	str	r3, [r7, #28]

    /* Check for an invalid mutex pointer.  */
    if (mutex_ptr == TX_NULL)
 80126be:	687b      	ldr	r3, [r7, #4]
 80126c0:	2b00      	cmp	r3, #0
 80126c2:	d102      	bne.n	80126ca <_txe_mutex_get+0x1a>
    {

        /* Mutex pointer is invalid, return appropriate error code.  */
        status =  TX_MUTEX_ERROR;
 80126c4:	231c      	movs	r3, #28
 80126c6:	61fb      	str	r3, [r7, #28]
 80126c8:	e01f      	b.n	801270a <_txe_mutex_get+0x5a>
    }

    /* Now check for a valid mutex ID.  */
    else if (mutex_ptr -> tx_mutex_id != TX_MUTEX_ID)
 80126ca:	687b      	ldr	r3, [r7, #4]
 80126cc:	681b      	ldr	r3, [r3, #0]
 80126ce:	4a21      	ldr	r2, [pc, #132]	; (8012754 <_txe_mutex_get+0xa4>)
 80126d0:	4293      	cmp	r3, r2
 80126d2:	d002      	beq.n	80126da <_txe_mutex_get+0x2a>
    {

        /* Mutex pointer is invalid, return appropriate error code.  */
        status =  TX_MUTEX_ERROR;
 80126d4:	231c      	movs	r3, #28
 80126d6:	61fb      	str	r3, [r7, #28]
 80126d8:	e017      	b.n	801270a <_txe_mutex_get+0x5a>
    else
    {

        /* Check for a wait option error.  Only threads are allowed any form of
           suspension.  */
        if (wait_option != TX_NO_WAIT)
 80126da:	683b      	ldr	r3, [r7, #0]
 80126dc:	2b00      	cmp	r3, #0
 80126de:	d014      	beq.n	801270a <_txe_mutex_get+0x5a>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80126e0:	f3ef 8305 	mrs	r3, IPSR
 80126e4:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 80126e6:	697a      	ldr	r2, [r7, #20]
        {

            /* Is the call from an ISR or Initialization?  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 80126e8:	4b1b      	ldr	r3, [pc, #108]	; (8012758 <_txe_mutex_get+0xa8>)
 80126ea:	681b      	ldr	r3, [r3, #0]
 80126ec:	4313      	orrs	r3, r2
 80126ee:	2b00      	cmp	r3, #0
 80126f0:	d002      	beq.n	80126f8 <_txe_mutex_get+0x48>
            {

                /* A non-thread is trying to suspend, return appropriate error code.  */
                status =  TX_WAIT_ERROR;
 80126f2:	2304      	movs	r3, #4
 80126f4:	61fb      	str	r3, [r7, #28]
 80126f6:	e008      	b.n	801270a <_txe_mutex_get+0x5a>
#ifndef TX_TIMER_PROCESS_IN_ISR
            else
            {

                /* Pickup thread pointer.  */
                TX_THREAD_GET_CURRENT(current_thread)
 80126f8:	4b18      	ldr	r3, [pc, #96]	; (801275c <_txe_mutex_get+0xac>)
 80126fa:	681b      	ldr	r3, [r3, #0]
 80126fc:	61bb      	str	r3, [r7, #24]

                /* Is the current thread the timer thread?  */
                if (current_thread == &_tx_timer_thread)
 80126fe:	69bb      	ldr	r3, [r7, #24]
 8012700:	4a17      	ldr	r2, [pc, #92]	; (8012760 <_txe_mutex_get+0xb0>)
 8012702:	4293      	cmp	r3, r2
 8012704:	d101      	bne.n	801270a <_txe_mutex_get+0x5a>
                {

                    /* A non-thread is trying to suspend, return appropriate error code.  */
                    status =  TX_WAIT_ERROR;
 8012706:	2304      	movs	r3, #4
 8012708:	61fb      	str	r3, [r7, #28]
#endif
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 801270a:	69fb      	ldr	r3, [r7, #28]
 801270c:	2b00      	cmp	r3, #0
 801270e:	d114      	bne.n	801273a <_txe_mutex_get+0x8a>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8012710:	f3ef 8305 	mrs	r3, IPSR
 8012714:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 8012716:	693a      	ldr	r2, [r7, #16]
    {

        /* Check for interrupt call.  */
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8012718:	4b0f      	ldr	r3, [pc, #60]	; (8012758 <_txe_mutex_get+0xa8>)
 801271a:	681b      	ldr	r3, [r3, #0]
 801271c:	4313      	orrs	r3, r2
 801271e:	2b00      	cmp	r3, #0
 8012720:	d00b      	beq.n	801273a <_txe_mutex_get+0x8a>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8012722:	f3ef 8305 	mrs	r3, IPSR
 8012726:	60fb      	str	r3, [r7, #12]
    return(ipsr_value);
 8012728:	68fa      	ldr	r2, [r7, #12]
        {

            /* Now, make sure the call is from an interrupt and not initialization.  */
            if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 801272a:	4b0b      	ldr	r3, [pc, #44]	; (8012758 <_txe_mutex_get+0xa8>)
 801272c:	681b      	ldr	r3, [r3, #0]
 801272e:	4313      	orrs	r3, r2
 8012730:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 8012734:	d201      	bcs.n	801273a <_txe_mutex_get+0x8a>
            {

                /* Yes, invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 8012736:	2313      	movs	r3, #19
 8012738:	61fb      	str	r3, [r7, #28]
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 801273a:	69fb      	ldr	r3, [r7, #28]
 801273c:	2b00      	cmp	r3, #0
 801273e:	d104      	bne.n	801274a <_txe_mutex_get+0x9a>
    {

        /* Call actual get mutex function.  */
        status =  _tx_mutex_get(mutex_ptr, wait_option);
 8012740:	6839      	ldr	r1, [r7, #0]
 8012742:	6878      	ldr	r0, [r7, #4]
 8012744:	f7fe f934 	bl	80109b0 <_tx_mutex_get>
 8012748:	61f8      	str	r0, [r7, #28]
    }

    /* Return completion status.  */
    return(status);
 801274a:	69fb      	ldr	r3, [r7, #28]
}
 801274c:	4618      	mov	r0, r3
 801274e:	3720      	adds	r7, #32
 8012750:	46bd      	mov	sp, r7
 8012752:	bd80      	pop	{r7, pc}
 8012754:	4d555445 	.word	0x4d555445
 8012758:	20000010 	.word	0x20000010
 801275c:	20002f78 	.word	0x20002f78
 8012760:	200030c0 	.word	0x200030c0

08012764 <_txe_mutex_put>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_mutex_put(TX_MUTEX *mutex_ptr)
{
 8012764:	b580      	push	{r7, lr}
 8012766:	b086      	sub	sp, #24
 8012768:	af00      	add	r7, sp, #0
 801276a:	6078      	str	r0, [r7, #4]

UINT            status;


    /* Default status to success.  */
    status =  TX_SUCCESS;
 801276c:	2300      	movs	r3, #0
 801276e:	617b      	str	r3, [r7, #20]

    /* Check for an invalid mutex pointer.  */
    if (mutex_ptr == TX_NULL)
 8012770:	687b      	ldr	r3, [r7, #4]
 8012772:	2b00      	cmp	r3, #0
 8012774:	d102      	bne.n	801277c <_txe_mutex_put+0x18>
    {

        /* Mutex pointer is invalid, return appropriate error code.  */
        status =  TX_MUTEX_ERROR;
 8012776:	231c      	movs	r3, #28
 8012778:	617b      	str	r3, [r7, #20]
 801277a:	e01c      	b.n	80127b6 <_txe_mutex_put+0x52>
    }

    /* Now check for invalid mutex ID.  */
    else if (mutex_ptr -> tx_mutex_id != TX_MUTEX_ID)
 801277c:	687b      	ldr	r3, [r7, #4]
 801277e:	681b      	ldr	r3, [r3, #0]
 8012780:	4a13      	ldr	r2, [pc, #76]	; (80127d0 <_txe_mutex_put+0x6c>)
 8012782:	4293      	cmp	r3, r2
 8012784:	d002      	beq.n	801278c <_txe_mutex_put+0x28>
    {

        /* Mutex pointer is invalid, return appropriate error code.  */
        status =  TX_MUTEX_ERROR;
 8012786:	231c      	movs	r3, #28
 8012788:	617b      	str	r3, [r7, #20]
 801278a:	e014      	b.n	80127b6 <_txe_mutex_put+0x52>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 801278c:	f3ef 8305 	mrs	r3, IPSR
 8012790:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 8012792:	693a      	ldr	r2, [r7, #16]
    }
    else
    {

        /* Check for interrupt call.  */
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8012794:	4b0f      	ldr	r3, [pc, #60]	; (80127d4 <_txe_mutex_put+0x70>)
 8012796:	681b      	ldr	r3, [r3, #0]
 8012798:	4313      	orrs	r3, r2
 801279a:	2b00      	cmp	r3, #0
 801279c:	d00b      	beq.n	80127b6 <_txe_mutex_put+0x52>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 801279e:	f3ef 8305 	mrs	r3, IPSR
 80127a2:	60fb      	str	r3, [r7, #12]
    return(ipsr_value);
 80127a4:	68fa      	ldr	r2, [r7, #12]
        {

            /* Now, make sure the call is from an interrupt and not initialization.  */
            if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 80127a6:	4b0b      	ldr	r3, [pc, #44]	; (80127d4 <_txe_mutex_put+0x70>)
 80127a8:	681b      	ldr	r3, [r3, #0]
 80127aa:	4313      	orrs	r3, r2
 80127ac:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 80127b0:	d201      	bcs.n	80127b6 <_txe_mutex_put+0x52>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 80127b2:	2313      	movs	r3, #19
 80127b4:	617b      	str	r3, [r7, #20]
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 80127b6:	697b      	ldr	r3, [r7, #20]
 80127b8:	2b00      	cmp	r3, #0
 80127ba:	d103      	bne.n	80127c4 <_txe_mutex_put+0x60>
    {

        /* Call actual put mutex function.  */
        status =  _tx_mutex_put(mutex_ptr);
 80127bc:	6878      	ldr	r0, [r7, #4]
 80127be:	f7fe fb6f 	bl	8010ea0 <_tx_mutex_put>
 80127c2:	6178      	str	r0, [r7, #20]
    }

    /* Return completion status.  */
    return(status);
 80127c4:	697b      	ldr	r3, [r7, #20]
}
 80127c6:	4618      	mov	r0, r3
 80127c8:	3718      	adds	r7, #24
 80127ca:	46bd      	mov	sp, r7
 80127cc:	bd80      	pop	{r7, pc}
 80127ce:	bf00      	nop
 80127d0:	4d555445 	.word	0x4d555445
 80127d4:	20000010 	.word	0x20000010

080127d8 <_txe_thread_create>:
UINT    _txe_thread_create(TX_THREAD *thread_ptr, CHAR *name_ptr,
                VOID (*entry_function)(ULONG id), ULONG entry_input,
                VOID *stack_start, ULONG stack_size,
                UINT priority, UINT preempt_threshold,
                ULONG time_slice, UINT auto_start, UINT thread_control_block_size)
{
 80127d8:	b580      	push	{r7, lr}
 80127da:	b09a      	sub	sp, #104	; 0x68
 80127dc:	af06      	add	r7, sp, #24
 80127de:	60f8      	str	r0, [r7, #12]
 80127e0:	60b9      	str	r1, [r7, #8]
 80127e2:	607a      	str	r2, [r7, #4]
 80127e4:	603b      	str	r3, [r7, #0]
TX_THREAD       *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 80127e6:	2300      	movs	r3, #0
 80127e8:	64fb      	str	r3, [r7, #76]	; 0x4c

    /* Check for an invalid thread pointer.  */
    if (thread_ptr == TX_NULL)
 80127ea:	68fb      	ldr	r3, [r7, #12]
 80127ec:	2b00      	cmp	r3, #0
 80127ee:	d102      	bne.n	80127f6 <_txe_thread_create+0x1e>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 80127f0:	230e      	movs	r3, #14
 80127f2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80127f4:	e0bb      	b.n	801296e <_txe_thread_create+0x196>
    }

    /* Now check for invalid thread control block size.  */
    else if (thread_control_block_size != (sizeof(TX_THREAD)))
 80127f6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80127f8:	2bb0      	cmp	r3, #176	; 0xb0
 80127fa:	d002      	beq.n	8012802 <_txe_thread_create+0x2a>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 80127fc:	230e      	movs	r3, #14
 80127fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8012800:	e0b5      	b.n	801296e <_txe_thread_create+0x196>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8012802:	f3ef 8310 	mrs	r3, PRIMASK
 8012806:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 8012808:	6abb      	ldr	r3, [r7, #40]	; 0x28
    int_posture = __get_interrupt_posture();
 801280a:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 801280c:	b672      	cpsid	i
    return(int_posture);
 801280e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 8012810:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 8012812:	4b64      	ldr	r3, [pc, #400]	; (80129a4 <_txe_thread_create+0x1cc>)
 8012814:	681b      	ldr	r3, [r3, #0]
 8012816:	3301      	adds	r3, #1
 8012818:	4a62      	ldr	r2, [pc, #392]	; (80129a4 <_txe_thread_create+0x1cc>)
 801281a:	6013      	str	r3, [r2, #0]
 801281c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801281e:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8012820:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012822:	f383 8810 	msr	PRIMASK, r3
}
 8012826:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        break_flag =   TX_FALSE;
 8012828:	2300      	movs	r3, #0
 801282a:	64bb      	str	r3, [r7, #72]	; 0x48
        next_thread =  _tx_thread_created_ptr;
 801282c:	4b5e      	ldr	r3, [pc, #376]	; (80129a8 <_txe_thread_create+0x1d0>)
 801282e:	681b      	ldr	r3, [r3, #0]
 8012830:	643b      	str	r3, [r7, #64]	; 0x40
        work_ptr =     TX_VOID_TO_UCHAR_POINTER_CONVERT(stack_start);
 8012832:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8012834:	63bb      	str	r3, [r7, #56]	; 0x38
        work_ptr =     TX_UCHAR_POINTER_ADD(work_ptr, (stack_size - ((ULONG) 1)));
 8012836:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8012838:	3b01      	subs	r3, #1
 801283a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801283c:	4413      	add	r3, r2
 801283e:	63bb      	str	r3, [r7, #56]	; 0x38
        stack_end =    TX_UCHAR_TO_VOID_POINTER_CONVERT(work_ptr);
 8012840:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012842:	637b      	str	r3, [r7, #52]	; 0x34
        for (i = ((ULONG) 0); i < _tx_thread_created_count; i++)
 8012844:	2300      	movs	r3, #0
 8012846:	647b      	str	r3, [r7, #68]	; 0x44
 8012848:	e02b      	b.n	80128a2 <_txe_thread_create+0xca>
        {

            /* Determine if this thread matches the thread in the list.  */
            if (thread_ptr == next_thread)
 801284a:	68fa      	ldr	r2, [r7, #12]
 801284c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801284e:	429a      	cmp	r2, r3
 8012850:	d101      	bne.n	8012856 <_txe_thread_create+0x7e>
            {

                /* Set the break flag.  */
                break_flag =  TX_TRUE;
 8012852:	2301      	movs	r3, #1
 8012854:	64bb      	str	r3, [r7, #72]	; 0x48
            }

            /* Determine if we need to break the loop.  */
            if (break_flag == TX_TRUE)
 8012856:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012858:	2b01      	cmp	r3, #1
 801285a:	d028      	beq.n	80128ae <_txe_thread_create+0xd6>
                /* Yes, break out of the loop.  */
                break;
            }

            /* Check the stack pointer to see if it overlaps with this thread's stack.  */
            if (stack_start >= next_thread -> tx_thread_stack_start)
 801285c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801285e:	68db      	ldr	r3, [r3, #12]
 8012860:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8012862:	429a      	cmp	r2, r3
 8012864:	d308      	bcc.n	8012878 <_txe_thread_create+0xa0>
            {

                if (stack_start < next_thread -> tx_thread_stack_end)
 8012866:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012868:	691b      	ldr	r3, [r3, #16]
 801286a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801286c:	429a      	cmp	r2, r3
 801286e:	d203      	bcs.n	8012878 <_txe_thread_create+0xa0>
                {

                    /* This stack overlaps with an existing thread, clear the stack pointer to
                       force a stack error below.  */
                    stack_start =  TX_NULL;
 8012870:	2300      	movs	r3, #0
 8012872:	65bb      	str	r3, [r7, #88]	; 0x58

                    /* Set the break flag.  */
                    break_flag =  TX_TRUE;
 8012874:	2301      	movs	r3, #1
 8012876:	64bb      	str	r3, [r7, #72]	; 0x48
                }
            }

            /* Check the end of the stack to see if it is inside this thread's stack area as well.  */
            if (stack_end >= next_thread -> tx_thread_stack_start)
 8012878:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801287a:	68db      	ldr	r3, [r3, #12]
 801287c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801287e:	429a      	cmp	r2, r3
 8012880:	d308      	bcc.n	8012894 <_txe_thread_create+0xbc>
            {

                if (stack_end < next_thread -> tx_thread_stack_end)
 8012882:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012884:	691b      	ldr	r3, [r3, #16]
 8012886:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012888:	429a      	cmp	r2, r3
 801288a:	d203      	bcs.n	8012894 <_txe_thread_create+0xbc>
                {

                    /* This stack overlaps with an existing thread, clear the stack pointer to
                       force a stack error below.  */
                    stack_start =  TX_NULL;
 801288c:	2300      	movs	r3, #0
 801288e:	65bb      	str	r3, [r7, #88]	; 0x58

                    /* Set the break flag.  */
                    break_flag =  TX_TRUE;
 8012890:	2301      	movs	r3, #1
 8012892:	64bb      	str	r3, [r7, #72]	; 0x48
                }
            }

            /* Move to the next thread.  */
            next_thread =  next_thread -> tx_thread_created_next;
 8012894:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012896:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801289a:	643b      	str	r3, [r7, #64]	; 0x40
        for (i = ((ULONG) 0); i < _tx_thread_created_count; i++)
 801289c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801289e:	3301      	adds	r3, #1
 80128a0:	647b      	str	r3, [r7, #68]	; 0x44
 80128a2:	4b42      	ldr	r3, [pc, #264]	; (80129ac <_txe_thread_create+0x1d4>)
 80128a4:	681b      	ldr	r3, [r3, #0]
 80128a6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80128a8:	429a      	cmp	r2, r3
 80128aa:	d3ce      	bcc.n	801284a <_txe_thread_create+0x72>
 80128ac:	e000      	b.n	80128b0 <_txe_thread_create+0xd8>
                break;
 80128ae:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80128b0:	f3ef 8310 	mrs	r3, PRIMASK
 80128b4:	61fb      	str	r3, [r7, #28]
    return(posture);
 80128b6:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 80128b8:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 80128ba:	b672      	cpsid	i
    return(int_posture);
 80128bc:	69bb      	ldr	r3, [r7, #24]
        }

        /* Disable interrupts.  */
        TX_DISABLE
 80128be:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 80128c0:	4b38      	ldr	r3, [pc, #224]	; (80129a4 <_txe_thread_create+0x1cc>)
 80128c2:	681b      	ldr	r3, [r3, #0]
 80128c4:	3b01      	subs	r3, #1
 80128c6:	4a37      	ldr	r2, [pc, #220]	; (80129a4 <_txe_thread_create+0x1cc>)
 80128c8:	6013      	str	r3, [r2, #0]
 80128ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80128cc:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80128ce:	6a3b      	ldr	r3, [r7, #32]
 80128d0:	f383 8810 	msr	PRIMASK, r3
}
 80128d4:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 80128d6:	f7fe ffd7 	bl	8011888 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate thread.  */
        if (thread_ptr == next_thread)
 80128da:	68fa      	ldr	r2, [r7, #12]
 80128dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80128de:	429a      	cmp	r2, r3
 80128e0:	d102      	bne.n	80128e8 <_txe_thread_create+0x110>
        {

            /* Thread is already created, return appropriate error code.  */
            status =  TX_THREAD_ERROR;
 80128e2:	230e      	movs	r3, #14
 80128e4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80128e6:	e042      	b.n	801296e <_txe_thread_create+0x196>
        }

        /* Check for invalid starting address of stack.  */
        else if (stack_start == TX_NULL)
 80128e8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80128ea:	2b00      	cmp	r3, #0
 80128ec:	d102      	bne.n	80128f4 <_txe_thread_create+0x11c>
        {

            /* Invalid stack or entry point, return appropriate error code.  */
            status =  TX_PTR_ERROR;
 80128ee:	2303      	movs	r3, #3
 80128f0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80128f2:	e03c      	b.n	801296e <_txe_thread_create+0x196>
        }

        /* Check for invalid thread entry point.  */
        else if (entry_function == TX_NULL)
 80128f4:	687b      	ldr	r3, [r7, #4]
 80128f6:	2b00      	cmp	r3, #0
 80128f8:	d102      	bne.n	8012900 <_txe_thread_create+0x128>
        {

            /* Invalid stack or entry point, return appropriate error code.  */
            status =  TX_PTR_ERROR;
 80128fa:	2303      	movs	r3, #3
 80128fc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80128fe:	e036      	b.n	801296e <_txe_thread_create+0x196>
        }

        /* Check the stack size.  */
        else if (stack_size < ((ULONG) TX_MINIMUM_STACK))
 8012900:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8012902:	2bc7      	cmp	r3, #199	; 0xc7
 8012904:	d802      	bhi.n	801290c <_txe_thread_create+0x134>
        {

            /* Stack is not big enough, return appropriate error code.  */
            status =  TX_SIZE_ERROR;
 8012906:	2305      	movs	r3, #5
 8012908:	64fb      	str	r3, [r7, #76]	; 0x4c
 801290a:	e030      	b.n	801296e <_txe_thread_create+0x196>
        }

        /* Check the priority specified.  */
        else if (priority >= ((UINT) TX_MAX_PRIORITIES))
 801290c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801290e:	2b1f      	cmp	r3, #31
 8012910:	d902      	bls.n	8012918 <_txe_thread_create+0x140>
        {

            /* Invalid priority selected, return appropriate error code.  */
            status =  TX_PRIORITY_ERROR;
 8012912:	230f      	movs	r3, #15
 8012914:	64fb      	str	r3, [r7, #76]	; 0x4c
 8012916:	e02a      	b.n	801296e <_txe_thread_create+0x196>
        }

        /* Check preemption threshold. */
        else if (preempt_threshold > priority)
 8012918:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 801291a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801291c:	429a      	cmp	r2, r3
 801291e:	d902      	bls.n	8012926 <_txe_thread_create+0x14e>
        {

            /* Invalid preempt threshold, return appropriate error code.  */
            status =  TX_THRESH_ERROR;
 8012920:	2318      	movs	r3, #24
 8012922:	64fb      	str	r3, [r7, #76]	; 0x4c
 8012924:	e023      	b.n	801296e <_txe_thread_create+0x196>
        }

        /* Check the start selection.  */
        else if (auto_start > TX_AUTO_START)
 8012926:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8012928:	2b01      	cmp	r3, #1
 801292a:	d902      	bls.n	8012932 <_txe_thread_create+0x15a>
        {

            /* Invalid auto start selection, return appropriate error code.  */
            status =  TX_START_ERROR;
 801292c:	2310      	movs	r3, #16
 801292e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8012930:	e01d      	b.n	801296e <_txe_thread_create+0x196>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(current_thread)
 8012932:	4b1f      	ldr	r3, [pc, #124]	; (80129b0 <_txe_thread_create+0x1d8>)
 8012934:	681b      	ldr	r3, [r3, #0]
 8012936:	633b      	str	r3, [r7, #48]	; 0x30

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (current_thread == &_tx_timer_thread)
 8012938:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801293a:	4a1e      	ldr	r2, [pc, #120]	; (80129b4 <_txe_thread_create+0x1dc>)
 801293c:	4293      	cmp	r3, r2
 801293e:	d101      	bne.n	8012944 <_txe_thread_create+0x16c>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 8012940:	2313      	movs	r3, #19
 8012942:	64fb      	str	r3, [r7, #76]	; 0x4c
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8012944:	f3ef 8305 	mrs	r3, IPSR
 8012948:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 801294a:	697a      	ldr	r2, [r7, #20]
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 801294c:	4b1a      	ldr	r3, [pc, #104]	; (80129b8 <_txe_thread_create+0x1e0>)
 801294e:	681b      	ldr	r3, [r3, #0]
 8012950:	4313      	orrs	r3, r2
 8012952:	2b00      	cmp	r3, #0
 8012954:	d00b      	beq.n	801296e <_txe_thread_create+0x196>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8012956:	f3ef 8305 	mrs	r3, IPSR
 801295a:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 801295c:	693a      	ldr	r2, [r7, #16]
            {

                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 801295e:	4b16      	ldr	r3, [pc, #88]	; (80129b8 <_txe_thread_create+0x1e0>)
 8012960:	681b      	ldr	r3, [r3, #0]
 8012962:	4313      	orrs	r3, r2
 8012964:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 8012968:	d201      	bcs.n	801296e <_txe_thread_create+0x196>
                {

                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 801296a:	2313      	movs	r3, #19
 801296c:	64fb      	str	r3, [r7, #76]	; 0x4c
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 801296e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012970:	2b00      	cmp	r3, #0
 8012972:	d112      	bne.n	801299a <_txe_thread_create+0x1c2>
    {

        /* Call actual thread create function.  */
        status =  _tx_thread_create(thread_ptr, name_ptr, entry_function, entry_input,
 8012974:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8012976:	9305      	str	r3, [sp, #20]
 8012978:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801297a:	9304      	str	r3, [sp, #16]
 801297c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801297e:	9303      	str	r3, [sp, #12]
 8012980:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012982:	9302      	str	r3, [sp, #8]
 8012984:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8012986:	9301      	str	r3, [sp, #4]
 8012988:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801298a:	9300      	str	r3, [sp, #0]
 801298c:	683b      	ldr	r3, [r7, #0]
 801298e:	687a      	ldr	r2, [r7, #4]
 8012990:	68b9      	ldr	r1, [r7, #8]
 8012992:	68f8      	ldr	r0, [r7, #12]
 8012994:	f7fe fcaa 	bl	80112ec <_tx_thread_create>
 8012998:	64f8      	str	r0, [r7, #76]	; 0x4c
                        stack_start, stack_size, priority, preempt_threshold,
                        time_slice, auto_start);
    }

    /* Return completion status.  */
    return(status);
 801299a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 801299c:	4618      	mov	r0, r3
 801299e:	3750      	adds	r7, #80	; 0x50
 80129a0:	46bd      	mov	sp, r7
 80129a2:	bd80      	pop	{r7, pc}
 80129a4:	20003010 	.word	0x20003010
 80129a8:	20002f80 	.word	0x20002f80
 80129ac:	20002f84 	.word	0x20002f84
 80129b0:	20002f78 	.word	0x20002f78
 80129b4:	200030c0 	.word	0x200030c0
 80129b8:	20000010 	.word	0x20000010

080129bc <_txe_thread_resume>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_thread_resume(TX_THREAD *thread_ptr)
{
 80129bc:	b580      	push	{r7, lr}
 80129be:	b084      	sub	sp, #16
 80129c0:	af00      	add	r7, sp, #0
 80129c2:	6078      	str	r0, [r7, #4]

UINT    status;


    /* Check for an invalid thread pointer.  */
    if (thread_ptr == TX_NULL)
 80129c4:	687b      	ldr	r3, [r7, #4]
 80129c6:	2b00      	cmp	r3, #0
 80129c8:	d102      	bne.n	80129d0 <_txe_thread_resume+0x14>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 80129ca:	230e      	movs	r3, #14
 80129cc:	60fb      	str	r3, [r7, #12]
 80129ce:	e00b      	b.n	80129e8 <_txe_thread_resume+0x2c>
    }

    /* Now check for invalid thread ID.  */
    else if (thread_ptr -> tx_thread_id != TX_THREAD_ID)
 80129d0:	687b      	ldr	r3, [r7, #4]
 80129d2:	681b      	ldr	r3, [r3, #0]
 80129d4:	4a07      	ldr	r2, [pc, #28]	; (80129f4 <_txe_thread_resume+0x38>)
 80129d6:	4293      	cmp	r3, r2
 80129d8:	d002      	beq.n	80129e0 <_txe_thread_resume+0x24>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 80129da:	230e      	movs	r3, #14
 80129dc:	60fb      	str	r3, [r7, #12]
 80129de:	e003      	b.n	80129e8 <_txe_thread_resume+0x2c>
    }
    else
    {

        /* Call actual thread resume function.  */
        status =  _tx_thread_resume(thread_ptr);
 80129e0:	6878      	ldr	r0, [r7, #4]
 80129e2:	f7fe fdb5 	bl	8011550 <_tx_thread_resume>
 80129e6:	60f8      	str	r0, [r7, #12]
    }

    /* Return completion status.  */
    return(status);
 80129e8:	68fb      	ldr	r3, [r7, #12]
}
 80129ea:	4618      	mov	r0, r3
 80129ec:	3710      	adds	r7, #16
 80129ee:	46bd      	mov	sp, r7
 80129f0:	bd80      	pop	{r7, pc}
 80129f2:	bf00      	nop
 80129f4:	54485244 	.word	0x54485244

080129f8 <_txe_thread_suspend>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_thread_suspend(TX_THREAD *thread_ptr)
{
 80129f8:	b580      	push	{r7, lr}
 80129fa:	b084      	sub	sp, #16
 80129fc:	af00      	add	r7, sp, #0
 80129fe:	6078      	str	r0, [r7, #4]

UINT    status;


    /* Check for an invalid thread pointer.  */
    if (thread_ptr == TX_NULL)
 8012a00:	687b      	ldr	r3, [r7, #4]
 8012a02:	2b00      	cmp	r3, #0
 8012a04:	d102      	bne.n	8012a0c <_txe_thread_suspend+0x14>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 8012a06:	230e      	movs	r3, #14
 8012a08:	60fb      	str	r3, [r7, #12]
 8012a0a:	e00b      	b.n	8012a24 <_txe_thread_suspend+0x2c>
    }

    /* Now check for invalid thread ID.  */
    else if (thread_ptr -> tx_thread_id != TX_THREAD_ID)
 8012a0c:	687b      	ldr	r3, [r7, #4]
 8012a0e:	681b      	ldr	r3, [r3, #0]
 8012a10:	4a07      	ldr	r2, [pc, #28]	; (8012a30 <_txe_thread_suspend+0x38>)
 8012a12:	4293      	cmp	r3, r2
 8012a14:	d002      	beq.n	8012a1c <_txe_thread_suspend+0x24>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 8012a16:	230e      	movs	r3, #14
 8012a18:	60fb      	str	r3, [r7, #12]
 8012a1a:	e003      	b.n	8012a24 <_txe_thread_suspend+0x2c>
    }
    else
    {

        /* Call actual thread suspend function.  */
        status =  _tx_thread_suspend(thread_ptr);
 8012a1c:	6878      	ldr	r0, [r7, #4]
 8012a1e:	f7fe fec3 	bl	80117a8 <_tx_thread_suspend>
 8012a22:	60f8      	str	r0, [r7, #12]
    }

    /* Return completion status.  */
    return(status);
 8012a24:	68fb      	ldr	r3, [r7, #12]
}
 8012a26:	4618      	mov	r0, r3
 8012a28:	3710      	adds	r7, #16
 8012a2a:	46bd      	mov	sp, r7
 8012a2c:	bd80      	pop	{r7, pc}
 8012a2e:	bf00      	nop
 8012a30:	54485244 	.word	0x54485244

08012a34 <__errno>:
 8012a34:	4b01      	ldr	r3, [pc, #4]	; (8012a3c <__errno+0x8>)
 8012a36:	6818      	ldr	r0, [r3, #0]
 8012a38:	4770      	bx	lr
 8012a3a:	bf00      	nop
 8012a3c:	20000014 	.word	0x20000014

08012a40 <__libc_init_array>:
 8012a40:	b570      	push	{r4, r5, r6, lr}
 8012a42:	4d0d      	ldr	r5, [pc, #52]	; (8012a78 <__libc_init_array+0x38>)
 8012a44:	2600      	movs	r6, #0
 8012a46:	4c0d      	ldr	r4, [pc, #52]	; (8012a7c <__libc_init_array+0x3c>)
 8012a48:	1b64      	subs	r4, r4, r5
 8012a4a:	10a4      	asrs	r4, r4, #2
 8012a4c:	42a6      	cmp	r6, r4
 8012a4e:	d109      	bne.n	8012a64 <__libc_init_array+0x24>
 8012a50:	4d0b      	ldr	r5, [pc, #44]	; (8012a80 <__libc_init_array+0x40>)
 8012a52:	2600      	movs	r6, #0
 8012a54:	4c0b      	ldr	r4, [pc, #44]	; (8012a84 <__libc_init_array+0x44>)
 8012a56:	f000 fd1b 	bl	8013490 <_init>
 8012a5a:	1b64      	subs	r4, r4, r5
 8012a5c:	10a4      	asrs	r4, r4, #2
 8012a5e:	42a6      	cmp	r6, r4
 8012a60:	d105      	bne.n	8012a6e <__libc_init_array+0x2e>
 8012a62:	bd70      	pop	{r4, r5, r6, pc}
 8012a64:	f855 3b04 	ldr.w	r3, [r5], #4
 8012a68:	3601      	adds	r6, #1
 8012a6a:	4798      	blx	r3
 8012a6c:	e7ee      	b.n	8012a4c <__libc_init_array+0xc>
 8012a6e:	f855 3b04 	ldr.w	r3, [r5], #4
 8012a72:	3601      	adds	r6, #1
 8012a74:	4798      	blx	r3
 8012a76:	e7f2      	b.n	8012a5e <__libc_init_array+0x1e>
 8012a78:	08013be8 	.word	0x08013be8
 8012a7c:	08013be8 	.word	0x08013be8
 8012a80:	08013be8 	.word	0x08013be8
 8012a84:	08013bec 	.word	0x08013bec

08012a88 <memset>:
 8012a88:	4402      	add	r2, r0
 8012a8a:	4603      	mov	r3, r0
 8012a8c:	4293      	cmp	r3, r2
 8012a8e:	d100      	bne.n	8012a92 <memset+0xa>
 8012a90:	4770      	bx	lr
 8012a92:	f803 1b01 	strb.w	r1, [r3], #1
 8012a96:	e7f9      	b.n	8012a8c <memset+0x4>

08012a98 <_puts_r>:
 8012a98:	b570      	push	{r4, r5, r6, lr}
 8012a9a:	460e      	mov	r6, r1
 8012a9c:	4605      	mov	r5, r0
 8012a9e:	b118      	cbz	r0, 8012aa8 <_puts_r+0x10>
 8012aa0:	6983      	ldr	r3, [r0, #24]
 8012aa2:	b90b      	cbnz	r3, 8012aa8 <_puts_r+0x10>
 8012aa4:	f000 fa46 	bl	8012f34 <__sinit>
 8012aa8:	69ab      	ldr	r3, [r5, #24]
 8012aaa:	68ac      	ldr	r4, [r5, #8]
 8012aac:	b913      	cbnz	r3, 8012ab4 <_puts_r+0x1c>
 8012aae:	4628      	mov	r0, r5
 8012ab0:	f000 fa40 	bl	8012f34 <__sinit>
 8012ab4:	4b2c      	ldr	r3, [pc, #176]	; (8012b68 <_puts_r+0xd0>)
 8012ab6:	429c      	cmp	r4, r3
 8012ab8:	d120      	bne.n	8012afc <_puts_r+0x64>
 8012aba:	686c      	ldr	r4, [r5, #4]
 8012abc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8012abe:	07db      	lsls	r3, r3, #31
 8012ac0:	d405      	bmi.n	8012ace <_puts_r+0x36>
 8012ac2:	89a3      	ldrh	r3, [r4, #12]
 8012ac4:	0598      	lsls	r0, r3, #22
 8012ac6:	d402      	bmi.n	8012ace <_puts_r+0x36>
 8012ac8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012aca:	f000 fad1 	bl	8013070 <__retarget_lock_acquire_recursive>
 8012ace:	89a3      	ldrh	r3, [r4, #12]
 8012ad0:	0719      	lsls	r1, r3, #28
 8012ad2:	d51d      	bpl.n	8012b10 <_puts_r+0x78>
 8012ad4:	6923      	ldr	r3, [r4, #16]
 8012ad6:	b1db      	cbz	r3, 8012b10 <_puts_r+0x78>
 8012ad8:	3e01      	subs	r6, #1
 8012ada:	68a3      	ldr	r3, [r4, #8]
 8012adc:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8012ae0:	3b01      	subs	r3, #1
 8012ae2:	60a3      	str	r3, [r4, #8]
 8012ae4:	bb39      	cbnz	r1, 8012b36 <_puts_r+0x9e>
 8012ae6:	2b00      	cmp	r3, #0
 8012ae8:	da38      	bge.n	8012b5c <_puts_r+0xc4>
 8012aea:	4622      	mov	r2, r4
 8012aec:	210a      	movs	r1, #10
 8012aee:	4628      	mov	r0, r5
 8012af0:	f000 f848 	bl	8012b84 <__swbuf_r>
 8012af4:	3001      	adds	r0, #1
 8012af6:	d011      	beq.n	8012b1c <_puts_r+0x84>
 8012af8:	250a      	movs	r5, #10
 8012afa:	e011      	b.n	8012b20 <_puts_r+0x88>
 8012afc:	4b1b      	ldr	r3, [pc, #108]	; (8012b6c <_puts_r+0xd4>)
 8012afe:	429c      	cmp	r4, r3
 8012b00:	d101      	bne.n	8012b06 <_puts_r+0x6e>
 8012b02:	68ac      	ldr	r4, [r5, #8]
 8012b04:	e7da      	b.n	8012abc <_puts_r+0x24>
 8012b06:	4b1a      	ldr	r3, [pc, #104]	; (8012b70 <_puts_r+0xd8>)
 8012b08:	429c      	cmp	r4, r3
 8012b0a:	bf08      	it	eq
 8012b0c:	68ec      	ldreq	r4, [r5, #12]
 8012b0e:	e7d5      	b.n	8012abc <_puts_r+0x24>
 8012b10:	4621      	mov	r1, r4
 8012b12:	4628      	mov	r0, r5
 8012b14:	f000 f888 	bl	8012c28 <__swsetup_r>
 8012b18:	2800      	cmp	r0, #0
 8012b1a:	d0dd      	beq.n	8012ad8 <_puts_r+0x40>
 8012b1c:	f04f 35ff 	mov.w	r5, #4294967295
 8012b20:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8012b22:	07da      	lsls	r2, r3, #31
 8012b24:	d405      	bmi.n	8012b32 <_puts_r+0x9a>
 8012b26:	89a3      	ldrh	r3, [r4, #12]
 8012b28:	059b      	lsls	r3, r3, #22
 8012b2a:	d402      	bmi.n	8012b32 <_puts_r+0x9a>
 8012b2c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012b2e:	f000 faa0 	bl	8013072 <__retarget_lock_release_recursive>
 8012b32:	4628      	mov	r0, r5
 8012b34:	bd70      	pop	{r4, r5, r6, pc}
 8012b36:	2b00      	cmp	r3, #0
 8012b38:	da04      	bge.n	8012b44 <_puts_r+0xac>
 8012b3a:	69a2      	ldr	r2, [r4, #24]
 8012b3c:	429a      	cmp	r2, r3
 8012b3e:	dc06      	bgt.n	8012b4e <_puts_r+0xb6>
 8012b40:	290a      	cmp	r1, #10
 8012b42:	d004      	beq.n	8012b4e <_puts_r+0xb6>
 8012b44:	6823      	ldr	r3, [r4, #0]
 8012b46:	1c5a      	adds	r2, r3, #1
 8012b48:	6022      	str	r2, [r4, #0]
 8012b4a:	7019      	strb	r1, [r3, #0]
 8012b4c:	e7c5      	b.n	8012ada <_puts_r+0x42>
 8012b4e:	4622      	mov	r2, r4
 8012b50:	4628      	mov	r0, r5
 8012b52:	f000 f817 	bl	8012b84 <__swbuf_r>
 8012b56:	3001      	adds	r0, #1
 8012b58:	d1bf      	bne.n	8012ada <_puts_r+0x42>
 8012b5a:	e7df      	b.n	8012b1c <_puts_r+0x84>
 8012b5c:	6823      	ldr	r3, [r4, #0]
 8012b5e:	250a      	movs	r5, #10
 8012b60:	1c5a      	adds	r2, r3, #1
 8012b62:	6022      	str	r2, [r4, #0]
 8012b64:	701d      	strb	r5, [r3, #0]
 8012b66:	e7db      	b.n	8012b20 <_puts_r+0x88>
 8012b68:	08013ba0 	.word	0x08013ba0
 8012b6c:	08013bc0 	.word	0x08013bc0
 8012b70:	08013b80 	.word	0x08013b80

08012b74 <puts>:
 8012b74:	4b02      	ldr	r3, [pc, #8]	; (8012b80 <puts+0xc>)
 8012b76:	4601      	mov	r1, r0
 8012b78:	6818      	ldr	r0, [r3, #0]
 8012b7a:	f7ff bf8d 	b.w	8012a98 <_puts_r>
 8012b7e:	bf00      	nop
 8012b80:	20000014 	.word	0x20000014

08012b84 <__swbuf_r>:
 8012b84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012b86:	460e      	mov	r6, r1
 8012b88:	4614      	mov	r4, r2
 8012b8a:	4605      	mov	r5, r0
 8012b8c:	b118      	cbz	r0, 8012b96 <__swbuf_r+0x12>
 8012b8e:	6983      	ldr	r3, [r0, #24]
 8012b90:	b90b      	cbnz	r3, 8012b96 <__swbuf_r+0x12>
 8012b92:	f000 f9cf 	bl	8012f34 <__sinit>
 8012b96:	4b21      	ldr	r3, [pc, #132]	; (8012c1c <__swbuf_r+0x98>)
 8012b98:	429c      	cmp	r4, r3
 8012b9a:	d12b      	bne.n	8012bf4 <__swbuf_r+0x70>
 8012b9c:	686c      	ldr	r4, [r5, #4]
 8012b9e:	69a3      	ldr	r3, [r4, #24]
 8012ba0:	60a3      	str	r3, [r4, #8]
 8012ba2:	89a3      	ldrh	r3, [r4, #12]
 8012ba4:	071a      	lsls	r2, r3, #28
 8012ba6:	d52f      	bpl.n	8012c08 <__swbuf_r+0x84>
 8012ba8:	6923      	ldr	r3, [r4, #16]
 8012baa:	b36b      	cbz	r3, 8012c08 <__swbuf_r+0x84>
 8012bac:	6923      	ldr	r3, [r4, #16]
 8012bae:	b2f6      	uxtb	r6, r6
 8012bb0:	6820      	ldr	r0, [r4, #0]
 8012bb2:	4637      	mov	r7, r6
 8012bb4:	1ac0      	subs	r0, r0, r3
 8012bb6:	6963      	ldr	r3, [r4, #20]
 8012bb8:	4283      	cmp	r3, r0
 8012bba:	dc04      	bgt.n	8012bc6 <__swbuf_r+0x42>
 8012bbc:	4621      	mov	r1, r4
 8012bbe:	4628      	mov	r0, r5
 8012bc0:	f000 f924 	bl	8012e0c <_fflush_r>
 8012bc4:	bb30      	cbnz	r0, 8012c14 <__swbuf_r+0x90>
 8012bc6:	68a3      	ldr	r3, [r4, #8]
 8012bc8:	3001      	adds	r0, #1
 8012bca:	3b01      	subs	r3, #1
 8012bcc:	60a3      	str	r3, [r4, #8]
 8012bce:	6823      	ldr	r3, [r4, #0]
 8012bd0:	1c5a      	adds	r2, r3, #1
 8012bd2:	6022      	str	r2, [r4, #0]
 8012bd4:	701e      	strb	r6, [r3, #0]
 8012bd6:	6963      	ldr	r3, [r4, #20]
 8012bd8:	4283      	cmp	r3, r0
 8012bda:	d004      	beq.n	8012be6 <__swbuf_r+0x62>
 8012bdc:	89a3      	ldrh	r3, [r4, #12]
 8012bde:	07db      	lsls	r3, r3, #31
 8012be0:	d506      	bpl.n	8012bf0 <__swbuf_r+0x6c>
 8012be2:	2e0a      	cmp	r6, #10
 8012be4:	d104      	bne.n	8012bf0 <__swbuf_r+0x6c>
 8012be6:	4621      	mov	r1, r4
 8012be8:	4628      	mov	r0, r5
 8012bea:	f000 f90f 	bl	8012e0c <_fflush_r>
 8012bee:	b988      	cbnz	r0, 8012c14 <__swbuf_r+0x90>
 8012bf0:	4638      	mov	r0, r7
 8012bf2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012bf4:	4b0a      	ldr	r3, [pc, #40]	; (8012c20 <__swbuf_r+0x9c>)
 8012bf6:	429c      	cmp	r4, r3
 8012bf8:	d101      	bne.n	8012bfe <__swbuf_r+0x7a>
 8012bfa:	68ac      	ldr	r4, [r5, #8]
 8012bfc:	e7cf      	b.n	8012b9e <__swbuf_r+0x1a>
 8012bfe:	4b09      	ldr	r3, [pc, #36]	; (8012c24 <__swbuf_r+0xa0>)
 8012c00:	429c      	cmp	r4, r3
 8012c02:	bf08      	it	eq
 8012c04:	68ec      	ldreq	r4, [r5, #12]
 8012c06:	e7ca      	b.n	8012b9e <__swbuf_r+0x1a>
 8012c08:	4621      	mov	r1, r4
 8012c0a:	4628      	mov	r0, r5
 8012c0c:	f000 f80c 	bl	8012c28 <__swsetup_r>
 8012c10:	2800      	cmp	r0, #0
 8012c12:	d0cb      	beq.n	8012bac <__swbuf_r+0x28>
 8012c14:	f04f 37ff 	mov.w	r7, #4294967295
 8012c18:	e7ea      	b.n	8012bf0 <__swbuf_r+0x6c>
 8012c1a:	bf00      	nop
 8012c1c:	08013ba0 	.word	0x08013ba0
 8012c20:	08013bc0 	.word	0x08013bc0
 8012c24:	08013b80 	.word	0x08013b80

08012c28 <__swsetup_r>:
 8012c28:	4b32      	ldr	r3, [pc, #200]	; (8012cf4 <__swsetup_r+0xcc>)
 8012c2a:	b570      	push	{r4, r5, r6, lr}
 8012c2c:	681d      	ldr	r5, [r3, #0]
 8012c2e:	4606      	mov	r6, r0
 8012c30:	460c      	mov	r4, r1
 8012c32:	b125      	cbz	r5, 8012c3e <__swsetup_r+0x16>
 8012c34:	69ab      	ldr	r3, [r5, #24]
 8012c36:	b913      	cbnz	r3, 8012c3e <__swsetup_r+0x16>
 8012c38:	4628      	mov	r0, r5
 8012c3a:	f000 f97b 	bl	8012f34 <__sinit>
 8012c3e:	4b2e      	ldr	r3, [pc, #184]	; (8012cf8 <__swsetup_r+0xd0>)
 8012c40:	429c      	cmp	r4, r3
 8012c42:	d10f      	bne.n	8012c64 <__swsetup_r+0x3c>
 8012c44:	686c      	ldr	r4, [r5, #4]
 8012c46:	89a3      	ldrh	r3, [r4, #12]
 8012c48:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8012c4c:	0719      	lsls	r1, r3, #28
 8012c4e:	d42c      	bmi.n	8012caa <__swsetup_r+0x82>
 8012c50:	06dd      	lsls	r5, r3, #27
 8012c52:	d411      	bmi.n	8012c78 <__swsetup_r+0x50>
 8012c54:	2309      	movs	r3, #9
 8012c56:	6033      	str	r3, [r6, #0]
 8012c58:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8012c5c:	f04f 30ff 	mov.w	r0, #4294967295
 8012c60:	81a3      	strh	r3, [r4, #12]
 8012c62:	e03e      	b.n	8012ce2 <__swsetup_r+0xba>
 8012c64:	4b25      	ldr	r3, [pc, #148]	; (8012cfc <__swsetup_r+0xd4>)
 8012c66:	429c      	cmp	r4, r3
 8012c68:	d101      	bne.n	8012c6e <__swsetup_r+0x46>
 8012c6a:	68ac      	ldr	r4, [r5, #8]
 8012c6c:	e7eb      	b.n	8012c46 <__swsetup_r+0x1e>
 8012c6e:	4b24      	ldr	r3, [pc, #144]	; (8012d00 <__swsetup_r+0xd8>)
 8012c70:	429c      	cmp	r4, r3
 8012c72:	bf08      	it	eq
 8012c74:	68ec      	ldreq	r4, [r5, #12]
 8012c76:	e7e6      	b.n	8012c46 <__swsetup_r+0x1e>
 8012c78:	0758      	lsls	r0, r3, #29
 8012c7a:	d512      	bpl.n	8012ca2 <__swsetup_r+0x7a>
 8012c7c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012c7e:	b141      	cbz	r1, 8012c92 <__swsetup_r+0x6a>
 8012c80:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012c84:	4299      	cmp	r1, r3
 8012c86:	d002      	beq.n	8012c8e <__swsetup_r+0x66>
 8012c88:	4630      	mov	r0, r6
 8012c8a:	f000 fa59 	bl	8013140 <_free_r>
 8012c8e:	2300      	movs	r3, #0
 8012c90:	6363      	str	r3, [r4, #52]	; 0x34
 8012c92:	89a3      	ldrh	r3, [r4, #12]
 8012c94:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8012c98:	81a3      	strh	r3, [r4, #12]
 8012c9a:	2300      	movs	r3, #0
 8012c9c:	6063      	str	r3, [r4, #4]
 8012c9e:	6923      	ldr	r3, [r4, #16]
 8012ca0:	6023      	str	r3, [r4, #0]
 8012ca2:	89a3      	ldrh	r3, [r4, #12]
 8012ca4:	f043 0308 	orr.w	r3, r3, #8
 8012ca8:	81a3      	strh	r3, [r4, #12]
 8012caa:	6923      	ldr	r3, [r4, #16]
 8012cac:	b94b      	cbnz	r3, 8012cc2 <__swsetup_r+0x9a>
 8012cae:	89a3      	ldrh	r3, [r4, #12]
 8012cb0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8012cb4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012cb8:	d003      	beq.n	8012cc2 <__swsetup_r+0x9a>
 8012cba:	4621      	mov	r1, r4
 8012cbc:	4630      	mov	r0, r6
 8012cbe:	f000 f9ff 	bl	80130c0 <__smakebuf_r>
 8012cc2:	89a0      	ldrh	r0, [r4, #12]
 8012cc4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8012cc8:	f010 0301 	ands.w	r3, r0, #1
 8012ccc:	d00a      	beq.n	8012ce4 <__swsetup_r+0xbc>
 8012cce:	2300      	movs	r3, #0
 8012cd0:	60a3      	str	r3, [r4, #8]
 8012cd2:	6963      	ldr	r3, [r4, #20]
 8012cd4:	425b      	negs	r3, r3
 8012cd6:	61a3      	str	r3, [r4, #24]
 8012cd8:	6923      	ldr	r3, [r4, #16]
 8012cda:	b943      	cbnz	r3, 8012cee <__swsetup_r+0xc6>
 8012cdc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8012ce0:	d1ba      	bne.n	8012c58 <__swsetup_r+0x30>
 8012ce2:	bd70      	pop	{r4, r5, r6, pc}
 8012ce4:	0781      	lsls	r1, r0, #30
 8012ce6:	bf58      	it	pl
 8012ce8:	6963      	ldrpl	r3, [r4, #20]
 8012cea:	60a3      	str	r3, [r4, #8]
 8012cec:	e7f4      	b.n	8012cd8 <__swsetup_r+0xb0>
 8012cee:	2000      	movs	r0, #0
 8012cf0:	e7f7      	b.n	8012ce2 <__swsetup_r+0xba>
 8012cf2:	bf00      	nop
 8012cf4:	20000014 	.word	0x20000014
 8012cf8:	08013ba0 	.word	0x08013ba0
 8012cfc:	08013bc0 	.word	0x08013bc0
 8012d00:	08013b80 	.word	0x08013b80

08012d04 <__sflush_r>:
 8012d04:	898a      	ldrh	r2, [r1, #12]
 8012d06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012d0a:	4605      	mov	r5, r0
 8012d0c:	0710      	lsls	r0, r2, #28
 8012d0e:	460c      	mov	r4, r1
 8012d10:	d458      	bmi.n	8012dc4 <__sflush_r+0xc0>
 8012d12:	684b      	ldr	r3, [r1, #4]
 8012d14:	2b00      	cmp	r3, #0
 8012d16:	dc05      	bgt.n	8012d24 <__sflush_r+0x20>
 8012d18:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8012d1a:	2b00      	cmp	r3, #0
 8012d1c:	dc02      	bgt.n	8012d24 <__sflush_r+0x20>
 8012d1e:	2000      	movs	r0, #0
 8012d20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012d24:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8012d26:	2e00      	cmp	r6, #0
 8012d28:	d0f9      	beq.n	8012d1e <__sflush_r+0x1a>
 8012d2a:	2300      	movs	r3, #0
 8012d2c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8012d30:	682f      	ldr	r7, [r5, #0]
 8012d32:	602b      	str	r3, [r5, #0]
 8012d34:	d032      	beq.n	8012d9c <__sflush_r+0x98>
 8012d36:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8012d38:	89a3      	ldrh	r3, [r4, #12]
 8012d3a:	075a      	lsls	r2, r3, #29
 8012d3c:	d505      	bpl.n	8012d4a <__sflush_r+0x46>
 8012d3e:	6863      	ldr	r3, [r4, #4]
 8012d40:	1ac0      	subs	r0, r0, r3
 8012d42:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8012d44:	b10b      	cbz	r3, 8012d4a <__sflush_r+0x46>
 8012d46:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8012d48:	1ac0      	subs	r0, r0, r3
 8012d4a:	2300      	movs	r3, #0
 8012d4c:	4602      	mov	r2, r0
 8012d4e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8012d50:	4628      	mov	r0, r5
 8012d52:	6a21      	ldr	r1, [r4, #32]
 8012d54:	47b0      	blx	r6
 8012d56:	1c43      	adds	r3, r0, #1
 8012d58:	89a3      	ldrh	r3, [r4, #12]
 8012d5a:	d106      	bne.n	8012d6a <__sflush_r+0x66>
 8012d5c:	6829      	ldr	r1, [r5, #0]
 8012d5e:	291d      	cmp	r1, #29
 8012d60:	d82c      	bhi.n	8012dbc <__sflush_r+0xb8>
 8012d62:	4a29      	ldr	r2, [pc, #164]	; (8012e08 <__sflush_r+0x104>)
 8012d64:	40ca      	lsrs	r2, r1
 8012d66:	07d6      	lsls	r6, r2, #31
 8012d68:	d528      	bpl.n	8012dbc <__sflush_r+0xb8>
 8012d6a:	2200      	movs	r2, #0
 8012d6c:	04d9      	lsls	r1, r3, #19
 8012d6e:	6062      	str	r2, [r4, #4]
 8012d70:	6922      	ldr	r2, [r4, #16]
 8012d72:	6022      	str	r2, [r4, #0]
 8012d74:	d504      	bpl.n	8012d80 <__sflush_r+0x7c>
 8012d76:	1c42      	adds	r2, r0, #1
 8012d78:	d101      	bne.n	8012d7e <__sflush_r+0x7a>
 8012d7a:	682b      	ldr	r3, [r5, #0]
 8012d7c:	b903      	cbnz	r3, 8012d80 <__sflush_r+0x7c>
 8012d7e:	6560      	str	r0, [r4, #84]	; 0x54
 8012d80:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012d82:	602f      	str	r7, [r5, #0]
 8012d84:	2900      	cmp	r1, #0
 8012d86:	d0ca      	beq.n	8012d1e <__sflush_r+0x1a>
 8012d88:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012d8c:	4299      	cmp	r1, r3
 8012d8e:	d002      	beq.n	8012d96 <__sflush_r+0x92>
 8012d90:	4628      	mov	r0, r5
 8012d92:	f000 f9d5 	bl	8013140 <_free_r>
 8012d96:	2000      	movs	r0, #0
 8012d98:	6360      	str	r0, [r4, #52]	; 0x34
 8012d9a:	e7c1      	b.n	8012d20 <__sflush_r+0x1c>
 8012d9c:	6a21      	ldr	r1, [r4, #32]
 8012d9e:	2301      	movs	r3, #1
 8012da0:	4628      	mov	r0, r5
 8012da2:	47b0      	blx	r6
 8012da4:	1c41      	adds	r1, r0, #1
 8012da6:	d1c7      	bne.n	8012d38 <__sflush_r+0x34>
 8012da8:	682b      	ldr	r3, [r5, #0]
 8012daa:	2b00      	cmp	r3, #0
 8012dac:	d0c4      	beq.n	8012d38 <__sflush_r+0x34>
 8012dae:	2b1d      	cmp	r3, #29
 8012db0:	d001      	beq.n	8012db6 <__sflush_r+0xb2>
 8012db2:	2b16      	cmp	r3, #22
 8012db4:	d101      	bne.n	8012dba <__sflush_r+0xb6>
 8012db6:	602f      	str	r7, [r5, #0]
 8012db8:	e7b1      	b.n	8012d1e <__sflush_r+0x1a>
 8012dba:	89a3      	ldrh	r3, [r4, #12]
 8012dbc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012dc0:	81a3      	strh	r3, [r4, #12]
 8012dc2:	e7ad      	b.n	8012d20 <__sflush_r+0x1c>
 8012dc4:	690f      	ldr	r7, [r1, #16]
 8012dc6:	2f00      	cmp	r7, #0
 8012dc8:	d0a9      	beq.n	8012d1e <__sflush_r+0x1a>
 8012dca:	0793      	lsls	r3, r2, #30
 8012dcc:	680e      	ldr	r6, [r1, #0]
 8012dce:	600f      	str	r7, [r1, #0]
 8012dd0:	bf0c      	ite	eq
 8012dd2:	694b      	ldreq	r3, [r1, #20]
 8012dd4:	2300      	movne	r3, #0
 8012dd6:	eba6 0807 	sub.w	r8, r6, r7
 8012dda:	608b      	str	r3, [r1, #8]
 8012ddc:	f1b8 0f00 	cmp.w	r8, #0
 8012de0:	dd9d      	ble.n	8012d1e <__sflush_r+0x1a>
 8012de2:	4643      	mov	r3, r8
 8012de4:	463a      	mov	r2, r7
 8012de6:	6a21      	ldr	r1, [r4, #32]
 8012de8:	4628      	mov	r0, r5
 8012dea:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8012dec:	47b0      	blx	r6
 8012dee:	2800      	cmp	r0, #0
 8012df0:	dc06      	bgt.n	8012e00 <__sflush_r+0xfc>
 8012df2:	89a3      	ldrh	r3, [r4, #12]
 8012df4:	f04f 30ff 	mov.w	r0, #4294967295
 8012df8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012dfc:	81a3      	strh	r3, [r4, #12]
 8012dfe:	e78f      	b.n	8012d20 <__sflush_r+0x1c>
 8012e00:	4407      	add	r7, r0
 8012e02:	eba8 0800 	sub.w	r8, r8, r0
 8012e06:	e7e9      	b.n	8012ddc <__sflush_r+0xd8>
 8012e08:	20400001 	.word	0x20400001

08012e0c <_fflush_r>:
 8012e0c:	b538      	push	{r3, r4, r5, lr}
 8012e0e:	690b      	ldr	r3, [r1, #16]
 8012e10:	4605      	mov	r5, r0
 8012e12:	460c      	mov	r4, r1
 8012e14:	b913      	cbnz	r3, 8012e1c <_fflush_r+0x10>
 8012e16:	2500      	movs	r5, #0
 8012e18:	4628      	mov	r0, r5
 8012e1a:	bd38      	pop	{r3, r4, r5, pc}
 8012e1c:	b118      	cbz	r0, 8012e26 <_fflush_r+0x1a>
 8012e1e:	6983      	ldr	r3, [r0, #24]
 8012e20:	b90b      	cbnz	r3, 8012e26 <_fflush_r+0x1a>
 8012e22:	f000 f887 	bl	8012f34 <__sinit>
 8012e26:	4b14      	ldr	r3, [pc, #80]	; (8012e78 <_fflush_r+0x6c>)
 8012e28:	429c      	cmp	r4, r3
 8012e2a:	d11b      	bne.n	8012e64 <_fflush_r+0x58>
 8012e2c:	686c      	ldr	r4, [r5, #4]
 8012e2e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012e32:	2b00      	cmp	r3, #0
 8012e34:	d0ef      	beq.n	8012e16 <_fflush_r+0xa>
 8012e36:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8012e38:	07d0      	lsls	r0, r2, #31
 8012e3a:	d404      	bmi.n	8012e46 <_fflush_r+0x3a>
 8012e3c:	0599      	lsls	r1, r3, #22
 8012e3e:	d402      	bmi.n	8012e46 <_fflush_r+0x3a>
 8012e40:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012e42:	f000 f915 	bl	8013070 <__retarget_lock_acquire_recursive>
 8012e46:	4628      	mov	r0, r5
 8012e48:	4621      	mov	r1, r4
 8012e4a:	f7ff ff5b 	bl	8012d04 <__sflush_r>
 8012e4e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8012e50:	4605      	mov	r5, r0
 8012e52:	07da      	lsls	r2, r3, #31
 8012e54:	d4e0      	bmi.n	8012e18 <_fflush_r+0xc>
 8012e56:	89a3      	ldrh	r3, [r4, #12]
 8012e58:	059b      	lsls	r3, r3, #22
 8012e5a:	d4dd      	bmi.n	8012e18 <_fflush_r+0xc>
 8012e5c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012e5e:	f000 f908 	bl	8013072 <__retarget_lock_release_recursive>
 8012e62:	e7d9      	b.n	8012e18 <_fflush_r+0xc>
 8012e64:	4b05      	ldr	r3, [pc, #20]	; (8012e7c <_fflush_r+0x70>)
 8012e66:	429c      	cmp	r4, r3
 8012e68:	d101      	bne.n	8012e6e <_fflush_r+0x62>
 8012e6a:	68ac      	ldr	r4, [r5, #8]
 8012e6c:	e7df      	b.n	8012e2e <_fflush_r+0x22>
 8012e6e:	4b04      	ldr	r3, [pc, #16]	; (8012e80 <_fflush_r+0x74>)
 8012e70:	429c      	cmp	r4, r3
 8012e72:	bf08      	it	eq
 8012e74:	68ec      	ldreq	r4, [r5, #12]
 8012e76:	e7da      	b.n	8012e2e <_fflush_r+0x22>
 8012e78:	08013ba0 	.word	0x08013ba0
 8012e7c:	08013bc0 	.word	0x08013bc0
 8012e80:	08013b80 	.word	0x08013b80

08012e84 <std>:
 8012e84:	2300      	movs	r3, #0
 8012e86:	b510      	push	{r4, lr}
 8012e88:	4604      	mov	r4, r0
 8012e8a:	6083      	str	r3, [r0, #8]
 8012e8c:	8181      	strh	r1, [r0, #12]
 8012e8e:	4619      	mov	r1, r3
 8012e90:	6643      	str	r3, [r0, #100]	; 0x64
 8012e92:	81c2      	strh	r2, [r0, #14]
 8012e94:	2208      	movs	r2, #8
 8012e96:	6183      	str	r3, [r0, #24]
 8012e98:	e9c0 3300 	strd	r3, r3, [r0]
 8012e9c:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8012ea0:	305c      	adds	r0, #92	; 0x5c
 8012ea2:	f7ff fdf1 	bl	8012a88 <memset>
 8012ea6:	4b05      	ldr	r3, [pc, #20]	; (8012ebc <std+0x38>)
 8012ea8:	6224      	str	r4, [r4, #32]
 8012eaa:	6263      	str	r3, [r4, #36]	; 0x24
 8012eac:	4b04      	ldr	r3, [pc, #16]	; (8012ec0 <std+0x3c>)
 8012eae:	62a3      	str	r3, [r4, #40]	; 0x28
 8012eb0:	4b04      	ldr	r3, [pc, #16]	; (8012ec4 <std+0x40>)
 8012eb2:	62e3      	str	r3, [r4, #44]	; 0x2c
 8012eb4:	4b04      	ldr	r3, [pc, #16]	; (8012ec8 <std+0x44>)
 8012eb6:	6323      	str	r3, [r4, #48]	; 0x30
 8012eb8:	bd10      	pop	{r4, pc}
 8012eba:	bf00      	nop
 8012ebc:	08013321 	.word	0x08013321
 8012ec0:	08013343 	.word	0x08013343
 8012ec4:	0801337b 	.word	0x0801337b
 8012ec8:	0801339f 	.word	0x0801339f

08012ecc <_cleanup_r>:
 8012ecc:	4901      	ldr	r1, [pc, #4]	; (8012ed4 <_cleanup_r+0x8>)
 8012ece:	f000 b8af 	b.w	8013030 <_fwalk_reent>
 8012ed2:	bf00      	nop
 8012ed4:	08012e0d 	.word	0x08012e0d

08012ed8 <__sfmoreglue>:
 8012ed8:	b570      	push	{r4, r5, r6, lr}
 8012eda:	2268      	movs	r2, #104	; 0x68
 8012edc:	1e4d      	subs	r5, r1, #1
 8012ede:	460e      	mov	r6, r1
 8012ee0:	4355      	muls	r5, r2
 8012ee2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8012ee6:	f000 f997 	bl	8013218 <_malloc_r>
 8012eea:	4604      	mov	r4, r0
 8012eec:	b140      	cbz	r0, 8012f00 <__sfmoreglue+0x28>
 8012eee:	2100      	movs	r1, #0
 8012ef0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8012ef4:	e9c0 1600 	strd	r1, r6, [r0]
 8012ef8:	300c      	adds	r0, #12
 8012efa:	60a0      	str	r0, [r4, #8]
 8012efc:	f7ff fdc4 	bl	8012a88 <memset>
 8012f00:	4620      	mov	r0, r4
 8012f02:	bd70      	pop	{r4, r5, r6, pc}

08012f04 <__sfp_lock_acquire>:
 8012f04:	4801      	ldr	r0, [pc, #4]	; (8012f0c <__sfp_lock_acquire+0x8>)
 8012f06:	f000 b8b3 	b.w	8013070 <__retarget_lock_acquire_recursive>
 8012f0a:	bf00      	nop
 8012f0c:	20003581 	.word	0x20003581

08012f10 <__sfp_lock_release>:
 8012f10:	4801      	ldr	r0, [pc, #4]	; (8012f18 <__sfp_lock_release+0x8>)
 8012f12:	f000 b8ae 	b.w	8013072 <__retarget_lock_release_recursive>
 8012f16:	bf00      	nop
 8012f18:	20003581 	.word	0x20003581

08012f1c <__sinit_lock_acquire>:
 8012f1c:	4801      	ldr	r0, [pc, #4]	; (8012f24 <__sinit_lock_acquire+0x8>)
 8012f1e:	f000 b8a7 	b.w	8013070 <__retarget_lock_acquire_recursive>
 8012f22:	bf00      	nop
 8012f24:	20003582 	.word	0x20003582

08012f28 <__sinit_lock_release>:
 8012f28:	4801      	ldr	r0, [pc, #4]	; (8012f30 <__sinit_lock_release+0x8>)
 8012f2a:	f000 b8a2 	b.w	8013072 <__retarget_lock_release_recursive>
 8012f2e:	bf00      	nop
 8012f30:	20003582 	.word	0x20003582

08012f34 <__sinit>:
 8012f34:	b510      	push	{r4, lr}
 8012f36:	4604      	mov	r4, r0
 8012f38:	f7ff fff0 	bl	8012f1c <__sinit_lock_acquire>
 8012f3c:	69a3      	ldr	r3, [r4, #24]
 8012f3e:	b11b      	cbz	r3, 8012f48 <__sinit+0x14>
 8012f40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012f44:	f7ff bff0 	b.w	8012f28 <__sinit_lock_release>
 8012f48:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8012f4c:	6523      	str	r3, [r4, #80]	; 0x50
 8012f4e:	4620      	mov	r0, r4
 8012f50:	4b12      	ldr	r3, [pc, #72]	; (8012f9c <__sinit+0x68>)
 8012f52:	4a13      	ldr	r2, [pc, #76]	; (8012fa0 <__sinit+0x6c>)
 8012f54:	681b      	ldr	r3, [r3, #0]
 8012f56:	62a2      	str	r2, [r4, #40]	; 0x28
 8012f58:	42a3      	cmp	r3, r4
 8012f5a:	bf04      	itt	eq
 8012f5c:	2301      	moveq	r3, #1
 8012f5e:	61a3      	streq	r3, [r4, #24]
 8012f60:	f000 f820 	bl	8012fa4 <__sfp>
 8012f64:	6060      	str	r0, [r4, #4]
 8012f66:	4620      	mov	r0, r4
 8012f68:	f000 f81c 	bl	8012fa4 <__sfp>
 8012f6c:	60a0      	str	r0, [r4, #8]
 8012f6e:	4620      	mov	r0, r4
 8012f70:	f000 f818 	bl	8012fa4 <__sfp>
 8012f74:	2200      	movs	r2, #0
 8012f76:	2104      	movs	r1, #4
 8012f78:	60e0      	str	r0, [r4, #12]
 8012f7a:	6860      	ldr	r0, [r4, #4]
 8012f7c:	f7ff ff82 	bl	8012e84 <std>
 8012f80:	2201      	movs	r2, #1
 8012f82:	2109      	movs	r1, #9
 8012f84:	68a0      	ldr	r0, [r4, #8]
 8012f86:	f7ff ff7d 	bl	8012e84 <std>
 8012f8a:	2202      	movs	r2, #2
 8012f8c:	2112      	movs	r1, #18
 8012f8e:	68e0      	ldr	r0, [r4, #12]
 8012f90:	f7ff ff78 	bl	8012e84 <std>
 8012f94:	2301      	movs	r3, #1
 8012f96:	61a3      	str	r3, [r4, #24]
 8012f98:	e7d2      	b.n	8012f40 <__sinit+0xc>
 8012f9a:	bf00      	nop
 8012f9c:	08013b7c 	.word	0x08013b7c
 8012fa0:	08012ecd 	.word	0x08012ecd

08012fa4 <__sfp>:
 8012fa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012fa6:	4607      	mov	r7, r0
 8012fa8:	f7ff ffac 	bl	8012f04 <__sfp_lock_acquire>
 8012fac:	4b1e      	ldr	r3, [pc, #120]	; (8013028 <__sfp+0x84>)
 8012fae:	681e      	ldr	r6, [r3, #0]
 8012fb0:	69b3      	ldr	r3, [r6, #24]
 8012fb2:	b913      	cbnz	r3, 8012fba <__sfp+0x16>
 8012fb4:	4630      	mov	r0, r6
 8012fb6:	f7ff ffbd 	bl	8012f34 <__sinit>
 8012fba:	3648      	adds	r6, #72	; 0x48
 8012fbc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8012fc0:	3b01      	subs	r3, #1
 8012fc2:	d503      	bpl.n	8012fcc <__sfp+0x28>
 8012fc4:	6833      	ldr	r3, [r6, #0]
 8012fc6:	b30b      	cbz	r3, 801300c <__sfp+0x68>
 8012fc8:	6836      	ldr	r6, [r6, #0]
 8012fca:	e7f7      	b.n	8012fbc <__sfp+0x18>
 8012fcc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8012fd0:	b9d5      	cbnz	r5, 8013008 <__sfp+0x64>
 8012fd2:	4b16      	ldr	r3, [pc, #88]	; (801302c <__sfp+0x88>)
 8012fd4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8012fd8:	6665      	str	r5, [r4, #100]	; 0x64
 8012fda:	60e3      	str	r3, [r4, #12]
 8012fdc:	f000 f847 	bl	801306e <__retarget_lock_init_recursive>
 8012fe0:	f7ff ff96 	bl	8012f10 <__sfp_lock_release>
 8012fe4:	2208      	movs	r2, #8
 8012fe6:	4629      	mov	r1, r5
 8012fe8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8012fec:	6025      	str	r5, [r4, #0]
 8012fee:	61a5      	str	r5, [r4, #24]
 8012ff0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8012ff4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8012ff8:	f7ff fd46 	bl	8012a88 <memset>
 8012ffc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8013000:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8013004:	4620      	mov	r0, r4
 8013006:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013008:	3468      	adds	r4, #104	; 0x68
 801300a:	e7d9      	b.n	8012fc0 <__sfp+0x1c>
 801300c:	2104      	movs	r1, #4
 801300e:	4638      	mov	r0, r7
 8013010:	f7ff ff62 	bl	8012ed8 <__sfmoreglue>
 8013014:	4604      	mov	r4, r0
 8013016:	6030      	str	r0, [r6, #0]
 8013018:	2800      	cmp	r0, #0
 801301a:	d1d5      	bne.n	8012fc8 <__sfp+0x24>
 801301c:	f7ff ff78 	bl	8012f10 <__sfp_lock_release>
 8013020:	230c      	movs	r3, #12
 8013022:	603b      	str	r3, [r7, #0]
 8013024:	e7ee      	b.n	8013004 <__sfp+0x60>
 8013026:	bf00      	nop
 8013028:	08013b7c 	.word	0x08013b7c
 801302c:	ffff0001 	.word	0xffff0001

08013030 <_fwalk_reent>:
 8013030:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013034:	4606      	mov	r6, r0
 8013036:	4688      	mov	r8, r1
 8013038:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801303c:	2700      	movs	r7, #0
 801303e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8013042:	f1b9 0901 	subs.w	r9, r9, #1
 8013046:	d505      	bpl.n	8013054 <_fwalk_reent+0x24>
 8013048:	6824      	ldr	r4, [r4, #0]
 801304a:	2c00      	cmp	r4, #0
 801304c:	d1f7      	bne.n	801303e <_fwalk_reent+0xe>
 801304e:	4638      	mov	r0, r7
 8013050:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013054:	89ab      	ldrh	r3, [r5, #12]
 8013056:	2b01      	cmp	r3, #1
 8013058:	d907      	bls.n	801306a <_fwalk_reent+0x3a>
 801305a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801305e:	3301      	adds	r3, #1
 8013060:	d003      	beq.n	801306a <_fwalk_reent+0x3a>
 8013062:	4629      	mov	r1, r5
 8013064:	4630      	mov	r0, r6
 8013066:	47c0      	blx	r8
 8013068:	4307      	orrs	r7, r0
 801306a:	3568      	adds	r5, #104	; 0x68
 801306c:	e7e9      	b.n	8013042 <_fwalk_reent+0x12>

0801306e <__retarget_lock_init_recursive>:
 801306e:	4770      	bx	lr

08013070 <__retarget_lock_acquire_recursive>:
 8013070:	4770      	bx	lr

08013072 <__retarget_lock_release_recursive>:
 8013072:	4770      	bx	lr

08013074 <__swhatbuf_r>:
 8013074:	b570      	push	{r4, r5, r6, lr}
 8013076:	460e      	mov	r6, r1
 8013078:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801307c:	b096      	sub	sp, #88	; 0x58
 801307e:	4614      	mov	r4, r2
 8013080:	2900      	cmp	r1, #0
 8013082:	461d      	mov	r5, r3
 8013084:	da08      	bge.n	8013098 <__swhatbuf_r+0x24>
 8013086:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 801308a:	2200      	movs	r2, #0
 801308c:	602a      	str	r2, [r5, #0]
 801308e:	061a      	lsls	r2, r3, #24
 8013090:	d410      	bmi.n	80130b4 <__swhatbuf_r+0x40>
 8013092:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8013096:	e00e      	b.n	80130b6 <__swhatbuf_r+0x42>
 8013098:	466a      	mov	r2, sp
 801309a:	f000 f9a7 	bl	80133ec <_fstat_r>
 801309e:	2800      	cmp	r0, #0
 80130a0:	dbf1      	blt.n	8013086 <__swhatbuf_r+0x12>
 80130a2:	9a01      	ldr	r2, [sp, #4]
 80130a4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80130a8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80130ac:	425a      	negs	r2, r3
 80130ae:	415a      	adcs	r2, r3
 80130b0:	602a      	str	r2, [r5, #0]
 80130b2:	e7ee      	b.n	8013092 <__swhatbuf_r+0x1e>
 80130b4:	2340      	movs	r3, #64	; 0x40
 80130b6:	2000      	movs	r0, #0
 80130b8:	6023      	str	r3, [r4, #0]
 80130ba:	b016      	add	sp, #88	; 0x58
 80130bc:	bd70      	pop	{r4, r5, r6, pc}
	...

080130c0 <__smakebuf_r>:
 80130c0:	898b      	ldrh	r3, [r1, #12]
 80130c2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80130c4:	079d      	lsls	r5, r3, #30
 80130c6:	4606      	mov	r6, r0
 80130c8:	460c      	mov	r4, r1
 80130ca:	d507      	bpl.n	80130dc <__smakebuf_r+0x1c>
 80130cc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80130d0:	6023      	str	r3, [r4, #0]
 80130d2:	6123      	str	r3, [r4, #16]
 80130d4:	2301      	movs	r3, #1
 80130d6:	6163      	str	r3, [r4, #20]
 80130d8:	b002      	add	sp, #8
 80130da:	bd70      	pop	{r4, r5, r6, pc}
 80130dc:	ab01      	add	r3, sp, #4
 80130de:	466a      	mov	r2, sp
 80130e0:	f7ff ffc8 	bl	8013074 <__swhatbuf_r>
 80130e4:	9900      	ldr	r1, [sp, #0]
 80130e6:	4605      	mov	r5, r0
 80130e8:	4630      	mov	r0, r6
 80130ea:	f000 f895 	bl	8013218 <_malloc_r>
 80130ee:	b948      	cbnz	r0, 8013104 <__smakebuf_r+0x44>
 80130f0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80130f4:	059a      	lsls	r2, r3, #22
 80130f6:	d4ef      	bmi.n	80130d8 <__smakebuf_r+0x18>
 80130f8:	f023 0303 	bic.w	r3, r3, #3
 80130fc:	f043 0302 	orr.w	r3, r3, #2
 8013100:	81a3      	strh	r3, [r4, #12]
 8013102:	e7e3      	b.n	80130cc <__smakebuf_r+0xc>
 8013104:	4b0d      	ldr	r3, [pc, #52]	; (801313c <__smakebuf_r+0x7c>)
 8013106:	62b3      	str	r3, [r6, #40]	; 0x28
 8013108:	89a3      	ldrh	r3, [r4, #12]
 801310a:	6020      	str	r0, [r4, #0]
 801310c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013110:	6120      	str	r0, [r4, #16]
 8013112:	81a3      	strh	r3, [r4, #12]
 8013114:	9b00      	ldr	r3, [sp, #0]
 8013116:	6163      	str	r3, [r4, #20]
 8013118:	9b01      	ldr	r3, [sp, #4]
 801311a:	b15b      	cbz	r3, 8013134 <__smakebuf_r+0x74>
 801311c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013120:	4630      	mov	r0, r6
 8013122:	f000 f975 	bl	8013410 <_isatty_r>
 8013126:	b128      	cbz	r0, 8013134 <__smakebuf_r+0x74>
 8013128:	89a3      	ldrh	r3, [r4, #12]
 801312a:	f023 0303 	bic.w	r3, r3, #3
 801312e:	f043 0301 	orr.w	r3, r3, #1
 8013132:	81a3      	strh	r3, [r4, #12]
 8013134:	89a0      	ldrh	r0, [r4, #12]
 8013136:	4305      	orrs	r5, r0
 8013138:	81a5      	strh	r5, [r4, #12]
 801313a:	e7cd      	b.n	80130d8 <__smakebuf_r+0x18>
 801313c:	08012ecd 	.word	0x08012ecd

08013140 <_free_r>:
 8013140:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8013142:	2900      	cmp	r1, #0
 8013144:	d043      	beq.n	80131ce <_free_r+0x8e>
 8013146:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801314a:	1f0c      	subs	r4, r1, #4
 801314c:	9001      	str	r0, [sp, #4]
 801314e:	2b00      	cmp	r3, #0
 8013150:	bfb8      	it	lt
 8013152:	18e4      	addlt	r4, r4, r3
 8013154:	f000 f97e 	bl	8013454 <__malloc_lock>
 8013158:	4a1e      	ldr	r2, [pc, #120]	; (80131d4 <_free_r+0x94>)
 801315a:	9801      	ldr	r0, [sp, #4]
 801315c:	6813      	ldr	r3, [r2, #0]
 801315e:	b933      	cbnz	r3, 801316e <_free_r+0x2e>
 8013160:	6063      	str	r3, [r4, #4]
 8013162:	6014      	str	r4, [r2, #0]
 8013164:	b003      	add	sp, #12
 8013166:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801316a:	f000 b979 	b.w	8013460 <__malloc_unlock>
 801316e:	42a3      	cmp	r3, r4
 8013170:	d908      	bls.n	8013184 <_free_r+0x44>
 8013172:	6825      	ldr	r5, [r4, #0]
 8013174:	1961      	adds	r1, r4, r5
 8013176:	428b      	cmp	r3, r1
 8013178:	bf01      	itttt	eq
 801317a:	6819      	ldreq	r1, [r3, #0]
 801317c:	685b      	ldreq	r3, [r3, #4]
 801317e:	1949      	addeq	r1, r1, r5
 8013180:	6021      	streq	r1, [r4, #0]
 8013182:	e7ed      	b.n	8013160 <_free_r+0x20>
 8013184:	461a      	mov	r2, r3
 8013186:	685b      	ldr	r3, [r3, #4]
 8013188:	b10b      	cbz	r3, 801318e <_free_r+0x4e>
 801318a:	42a3      	cmp	r3, r4
 801318c:	d9fa      	bls.n	8013184 <_free_r+0x44>
 801318e:	6811      	ldr	r1, [r2, #0]
 8013190:	1855      	adds	r5, r2, r1
 8013192:	42a5      	cmp	r5, r4
 8013194:	d10b      	bne.n	80131ae <_free_r+0x6e>
 8013196:	6824      	ldr	r4, [r4, #0]
 8013198:	4421      	add	r1, r4
 801319a:	1854      	adds	r4, r2, r1
 801319c:	6011      	str	r1, [r2, #0]
 801319e:	42a3      	cmp	r3, r4
 80131a0:	d1e0      	bne.n	8013164 <_free_r+0x24>
 80131a2:	681c      	ldr	r4, [r3, #0]
 80131a4:	685b      	ldr	r3, [r3, #4]
 80131a6:	4421      	add	r1, r4
 80131a8:	6053      	str	r3, [r2, #4]
 80131aa:	6011      	str	r1, [r2, #0]
 80131ac:	e7da      	b.n	8013164 <_free_r+0x24>
 80131ae:	d902      	bls.n	80131b6 <_free_r+0x76>
 80131b0:	230c      	movs	r3, #12
 80131b2:	6003      	str	r3, [r0, #0]
 80131b4:	e7d6      	b.n	8013164 <_free_r+0x24>
 80131b6:	6825      	ldr	r5, [r4, #0]
 80131b8:	1961      	adds	r1, r4, r5
 80131ba:	428b      	cmp	r3, r1
 80131bc:	bf02      	ittt	eq
 80131be:	6819      	ldreq	r1, [r3, #0]
 80131c0:	685b      	ldreq	r3, [r3, #4]
 80131c2:	1949      	addeq	r1, r1, r5
 80131c4:	6063      	str	r3, [r4, #4]
 80131c6:	bf08      	it	eq
 80131c8:	6021      	streq	r1, [r4, #0]
 80131ca:	6054      	str	r4, [r2, #4]
 80131cc:	e7ca      	b.n	8013164 <_free_r+0x24>
 80131ce:	b003      	add	sp, #12
 80131d0:	bd30      	pop	{r4, r5, pc}
 80131d2:	bf00      	nop
 80131d4:	20003584 	.word	0x20003584

080131d8 <sbrk_aligned>:
 80131d8:	b570      	push	{r4, r5, r6, lr}
 80131da:	4e0e      	ldr	r6, [pc, #56]	; (8013214 <sbrk_aligned+0x3c>)
 80131dc:	460c      	mov	r4, r1
 80131de:	4605      	mov	r5, r0
 80131e0:	6831      	ldr	r1, [r6, #0]
 80131e2:	b911      	cbnz	r1, 80131ea <sbrk_aligned+0x12>
 80131e4:	f000 f88c 	bl	8013300 <_sbrk_r>
 80131e8:	6030      	str	r0, [r6, #0]
 80131ea:	4621      	mov	r1, r4
 80131ec:	4628      	mov	r0, r5
 80131ee:	f000 f887 	bl	8013300 <_sbrk_r>
 80131f2:	1c43      	adds	r3, r0, #1
 80131f4:	d00a      	beq.n	801320c <sbrk_aligned+0x34>
 80131f6:	1cc4      	adds	r4, r0, #3
 80131f8:	f024 0403 	bic.w	r4, r4, #3
 80131fc:	42a0      	cmp	r0, r4
 80131fe:	d007      	beq.n	8013210 <sbrk_aligned+0x38>
 8013200:	1a21      	subs	r1, r4, r0
 8013202:	4628      	mov	r0, r5
 8013204:	f000 f87c 	bl	8013300 <_sbrk_r>
 8013208:	3001      	adds	r0, #1
 801320a:	d101      	bne.n	8013210 <sbrk_aligned+0x38>
 801320c:	f04f 34ff 	mov.w	r4, #4294967295
 8013210:	4620      	mov	r0, r4
 8013212:	bd70      	pop	{r4, r5, r6, pc}
 8013214:	20003588 	.word	0x20003588

08013218 <_malloc_r>:
 8013218:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801321c:	1ccd      	adds	r5, r1, #3
 801321e:	4607      	mov	r7, r0
 8013220:	f025 0503 	bic.w	r5, r5, #3
 8013224:	3508      	adds	r5, #8
 8013226:	2d0c      	cmp	r5, #12
 8013228:	bf38      	it	cc
 801322a:	250c      	movcc	r5, #12
 801322c:	2d00      	cmp	r5, #0
 801322e:	db01      	blt.n	8013234 <_malloc_r+0x1c>
 8013230:	42a9      	cmp	r1, r5
 8013232:	d905      	bls.n	8013240 <_malloc_r+0x28>
 8013234:	230c      	movs	r3, #12
 8013236:	2600      	movs	r6, #0
 8013238:	603b      	str	r3, [r7, #0]
 801323a:	4630      	mov	r0, r6
 801323c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013240:	4e2e      	ldr	r6, [pc, #184]	; (80132fc <_malloc_r+0xe4>)
 8013242:	f000 f907 	bl	8013454 <__malloc_lock>
 8013246:	6833      	ldr	r3, [r6, #0]
 8013248:	461c      	mov	r4, r3
 801324a:	bb34      	cbnz	r4, 801329a <_malloc_r+0x82>
 801324c:	4629      	mov	r1, r5
 801324e:	4638      	mov	r0, r7
 8013250:	f7ff ffc2 	bl	80131d8 <sbrk_aligned>
 8013254:	1c43      	adds	r3, r0, #1
 8013256:	4604      	mov	r4, r0
 8013258:	d14d      	bne.n	80132f6 <_malloc_r+0xde>
 801325a:	6834      	ldr	r4, [r6, #0]
 801325c:	4626      	mov	r6, r4
 801325e:	2e00      	cmp	r6, #0
 8013260:	d140      	bne.n	80132e4 <_malloc_r+0xcc>
 8013262:	6823      	ldr	r3, [r4, #0]
 8013264:	4631      	mov	r1, r6
 8013266:	4638      	mov	r0, r7
 8013268:	eb04 0803 	add.w	r8, r4, r3
 801326c:	f000 f848 	bl	8013300 <_sbrk_r>
 8013270:	4580      	cmp	r8, r0
 8013272:	d13a      	bne.n	80132ea <_malloc_r+0xd2>
 8013274:	6821      	ldr	r1, [r4, #0]
 8013276:	3503      	adds	r5, #3
 8013278:	4638      	mov	r0, r7
 801327a:	1a6d      	subs	r5, r5, r1
 801327c:	f025 0503 	bic.w	r5, r5, #3
 8013280:	3508      	adds	r5, #8
 8013282:	2d0c      	cmp	r5, #12
 8013284:	bf38      	it	cc
 8013286:	250c      	movcc	r5, #12
 8013288:	4629      	mov	r1, r5
 801328a:	f7ff ffa5 	bl	80131d8 <sbrk_aligned>
 801328e:	3001      	adds	r0, #1
 8013290:	d02b      	beq.n	80132ea <_malloc_r+0xd2>
 8013292:	6823      	ldr	r3, [r4, #0]
 8013294:	442b      	add	r3, r5
 8013296:	6023      	str	r3, [r4, #0]
 8013298:	e00e      	b.n	80132b8 <_malloc_r+0xa0>
 801329a:	6822      	ldr	r2, [r4, #0]
 801329c:	1b52      	subs	r2, r2, r5
 801329e:	d41e      	bmi.n	80132de <_malloc_r+0xc6>
 80132a0:	2a0b      	cmp	r2, #11
 80132a2:	d916      	bls.n	80132d2 <_malloc_r+0xba>
 80132a4:	1961      	adds	r1, r4, r5
 80132a6:	42a3      	cmp	r3, r4
 80132a8:	6025      	str	r5, [r4, #0]
 80132aa:	bf18      	it	ne
 80132ac:	6059      	strne	r1, [r3, #4]
 80132ae:	6863      	ldr	r3, [r4, #4]
 80132b0:	bf08      	it	eq
 80132b2:	6031      	streq	r1, [r6, #0]
 80132b4:	5162      	str	r2, [r4, r5]
 80132b6:	604b      	str	r3, [r1, #4]
 80132b8:	f104 060b 	add.w	r6, r4, #11
 80132bc:	4638      	mov	r0, r7
 80132be:	f000 f8cf 	bl	8013460 <__malloc_unlock>
 80132c2:	1d23      	adds	r3, r4, #4
 80132c4:	f026 0607 	bic.w	r6, r6, #7
 80132c8:	1af2      	subs	r2, r6, r3
 80132ca:	d0b6      	beq.n	801323a <_malloc_r+0x22>
 80132cc:	1b9b      	subs	r3, r3, r6
 80132ce:	50a3      	str	r3, [r4, r2]
 80132d0:	e7b3      	b.n	801323a <_malloc_r+0x22>
 80132d2:	6862      	ldr	r2, [r4, #4]
 80132d4:	42a3      	cmp	r3, r4
 80132d6:	bf0c      	ite	eq
 80132d8:	6032      	streq	r2, [r6, #0]
 80132da:	605a      	strne	r2, [r3, #4]
 80132dc:	e7ec      	b.n	80132b8 <_malloc_r+0xa0>
 80132de:	4623      	mov	r3, r4
 80132e0:	6864      	ldr	r4, [r4, #4]
 80132e2:	e7b2      	b.n	801324a <_malloc_r+0x32>
 80132e4:	4634      	mov	r4, r6
 80132e6:	6876      	ldr	r6, [r6, #4]
 80132e8:	e7b9      	b.n	801325e <_malloc_r+0x46>
 80132ea:	230c      	movs	r3, #12
 80132ec:	4638      	mov	r0, r7
 80132ee:	603b      	str	r3, [r7, #0]
 80132f0:	f000 f8b6 	bl	8013460 <__malloc_unlock>
 80132f4:	e7a1      	b.n	801323a <_malloc_r+0x22>
 80132f6:	6025      	str	r5, [r4, #0]
 80132f8:	e7de      	b.n	80132b8 <_malloc_r+0xa0>
 80132fa:	bf00      	nop
 80132fc:	20003584 	.word	0x20003584

08013300 <_sbrk_r>:
 8013300:	b538      	push	{r3, r4, r5, lr}
 8013302:	2300      	movs	r3, #0
 8013304:	4d05      	ldr	r5, [pc, #20]	; (801331c <_sbrk_r+0x1c>)
 8013306:	4604      	mov	r4, r0
 8013308:	4608      	mov	r0, r1
 801330a:	602b      	str	r3, [r5, #0]
 801330c:	f7f2 ff10 	bl	8006130 <_sbrk>
 8013310:	1c43      	adds	r3, r0, #1
 8013312:	d102      	bne.n	801331a <_sbrk_r+0x1a>
 8013314:	682b      	ldr	r3, [r5, #0]
 8013316:	b103      	cbz	r3, 801331a <_sbrk_r+0x1a>
 8013318:	6023      	str	r3, [r4, #0]
 801331a:	bd38      	pop	{r3, r4, r5, pc}
 801331c:	2000358c 	.word	0x2000358c

08013320 <__sread>:
 8013320:	b510      	push	{r4, lr}
 8013322:	460c      	mov	r4, r1
 8013324:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013328:	f000 f8a0 	bl	801346c <_read_r>
 801332c:	2800      	cmp	r0, #0
 801332e:	bfab      	itete	ge
 8013330:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8013332:	89a3      	ldrhlt	r3, [r4, #12]
 8013334:	181b      	addge	r3, r3, r0
 8013336:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801333a:	bfac      	ite	ge
 801333c:	6563      	strge	r3, [r4, #84]	; 0x54
 801333e:	81a3      	strhlt	r3, [r4, #12]
 8013340:	bd10      	pop	{r4, pc}

08013342 <__swrite>:
 8013342:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013346:	461f      	mov	r7, r3
 8013348:	898b      	ldrh	r3, [r1, #12]
 801334a:	4605      	mov	r5, r0
 801334c:	460c      	mov	r4, r1
 801334e:	05db      	lsls	r3, r3, #23
 8013350:	4616      	mov	r6, r2
 8013352:	d505      	bpl.n	8013360 <__swrite+0x1e>
 8013354:	2302      	movs	r3, #2
 8013356:	2200      	movs	r2, #0
 8013358:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801335c:	f000 f868 	bl	8013430 <_lseek_r>
 8013360:	89a3      	ldrh	r3, [r4, #12]
 8013362:	4632      	mov	r2, r6
 8013364:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013368:	4628      	mov	r0, r5
 801336a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801336e:	81a3      	strh	r3, [r4, #12]
 8013370:	463b      	mov	r3, r7
 8013372:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013376:	f000 b817 	b.w	80133a8 <_write_r>

0801337a <__sseek>:
 801337a:	b510      	push	{r4, lr}
 801337c:	460c      	mov	r4, r1
 801337e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013382:	f000 f855 	bl	8013430 <_lseek_r>
 8013386:	1c43      	adds	r3, r0, #1
 8013388:	89a3      	ldrh	r3, [r4, #12]
 801338a:	bf15      	itete	ne
 801338c:	6560      	strne	r0, [r4, #84]	; 0x54
 801338e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8013392:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8013396:	81a3      	strheq	r3, [r4, #12]
 8013398:	bf18      	it	ne
 801339a:	81a3      	strhne	r3, [r4, #12]
 801339c:	bd10      	pop	{r4, pc}

0801339e <__sclose>:
 801339e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80133a2:	f000 b813 	b.w	80133cc <_close_r>
	...

080133a8 <_write_r>:
 80133a8:	b538      	push	{r3, r4, r5, lr}
 80133aa:	4604      	mov	r4, r0
 80133ac:	4d06      	ldr	r5, [pc, #24]	; (80133c8 <_write_r+0x20>)
 80133ae:	4608      	mov	r0, r1
 80133b0:	4611      	mov	r1, r2
 80133b2:	2200      	movs	r2, #0
 80133b4:	602a      	str	r2, [r5, #0]
 80133b6:	461a      	mov	r2, r3
 80133b8:	f7f2 fe69 	bl	800608e <_write>
 80133bc:	1c43      	adds	r3, r0, #1
 80133be:	d102      	bne.n	80133c6 <_write_r+0x1e>
 80133c0:	682b      	ldr	r3, [r5, #0]
 80133c2:	b103      	cbz	r3, 80133c6 <_write_r+0x1e>
 80133c4:	6023      	str	r3, [r4, #0]
 80133c6:	bd38      	pop	{r3, r4, r5, pc}
 80133c8:	2000358c 	.word	0x2000358c

080133cc <_close_r>:
 80133cc:	b538      	push	{r3, r4, r5, lr}
 80133ce:	2300      	movs	r3, #0
 80133d0:	4d05      	ldr	r5, [pc, #20]	; (80133e8 <_close_r+0x1c>)
 80133d2:	4604      	mov	r4, r0
 80133d4:	4608      	mov	r0, r1
 80133d6:	602b      	str	r3, [r5, #0]
 80133d8:	f7f2 fe75 	bl	80060c6 <_close>
 80133dc:	1c43      	adds	r3, r0, #1
 80133de:	d102      	bne.n	80133e6 <_close_r+0x1a>
 80133e0:	682b      	ldr	r3, [r5, #0]
 80133e2:	b103      	cbz	r3, 80133e6 <_close_r+0x1a>
 80133e4:	6023      	str	r3, [r4, #0]
 80133e6:	bd38      	pop	{r3, r4, r5, pc}
 80133e8:	2000358c 	.word	0x2000358c

080133ec <_fstat_r>:
 80133ec:	b538      	push	{r3, r4, r5, lr}
 80133ee:	2300      	movs	r3, #0
 80133f0:	4d06      	ldr	r5, [pc, #24]	; (801340c <_fstat_r+0x20>)
 80133f2:	4604      	mov	r4, r0
 80133f4:	4608      	mov	r0, r1
 80133f6:	4611      	mov	r1, r2
 80133f8:	602b      	str	r3, [r5, #0]
 80133fa:	f7f2 fe70 	bl	80060de <_fstat>
 80133fe:	1c43      	adds	r3, r0, #1
 8013400:	d102      	bne.n	8013408 <_fstat_r+0x1c>
 8013402:	682b      	ldr	r3, [r5, #0]
 8013404:	b103      	cbz	r3, 8013408 <_fstat_r+0x1c>
 8013406:	6023      	str	r3, [r4, #0]
 8013408:	bd38      	pop	{r3, r4, r5, pc}
 801340a:	bf00      	nop
 801340c:	2000358c 	.word	0x2000358c

08013410 <_isatty_r>:
 8013410:	b538      	push	{r3, r4, r5, lr}
 8013412:	2300      	movs	r3, #0
 8013414:	4d05      	ldr	r5, [pc, #20]	; (801342c <_isatty_r+0x1c>)
 8013416:	4604      	mov	r4, r0
 8013418:	4608      	mov	r0, r1
 801341a:	602b      	str	r3, [r5, #0]
 801341c:	f7f2 fe6f 	bl	80060fe <_isatty>
 8013420:	1c43      	adds	r3, r0, #1
 8013422:	d102      	bne.n	801342a <_isatty_r+0x1a>
 8013424:	682b      	ldr	r3, [r5, #0]
 8013426:	b103      	cbz	r3, 801342a <_isatty_r+0x1a>
 8013428:	6023      	str	r3, [r4, #0]
 801342a:	bd38      	pop	{r3, r4, r5, pc}
 801342c:	2000358c 	.word	0x2000358c

08013430 <_lseek_r>:
 8013430:	b538      	push	{r3, r4, r5, lr}
 8013432:	4604      	mov	r4, r0
 8013434:	4d06      	ldr	r5, [pc, #24]	; (8013450 <_lseek_r+0x20>)
 8013436:	4608      	mov	r0, r1
 8013438:	4611      	mov	r1, r2
 801343a:	2200      	movs	r2, #0
 801343c:	602a      	str	r2, [r5, #0]
 801343e:	461a      	mov	r2, r3
 8013440:	f7f2 fe68 	bl	8006114 <_lseek>
 8013444:	1c43      	adds	r3, r0, #1
 8013446:	d102      	bne.n	801344e <_lseek_r+0x1e>
 8013448:	682b      	ldr	r3, [r5, #0]
 801344a:	b103      	cbz	r3, 801344e <_lseek_r+0x1e>
 801344c:	6023      	str	r3, [r4, #0]
 801344e:	bd38      	pop	{r3, r4, r5, pc}
 8013450:	2000358c 	.word	0x2000358c

08013454 <__malloc_lock>:
 8013454:	4801      	ldr	r0, [pc, #4]	; (801345c <__malloc_lock+0x8>)
 8013456:	f7ff be0b 	b.w	8013070 <__retarget_lock_acquire_recursive>
 801345a:	bf00      	nop
 801345c:	20003580 	.word	0x20003580

08013460 <__malloc_unlock>:
 8013460:	4801      	ldr	r0, [pc, #4]	; (8013468 <__malloc_unlock+0x8>)
 8013462:	f7ff be06 	b.w	8013072 <__retarget_lock_release_recursive>
 8013466:	bf00      	nop
 8013468:	20003580 	.word	0x20003580

0801346c <_read_r>:
 801346c:	b538      	push	{r3, r4, r5, lr}
 801346e:	4604      	mov	r4, r0
 8013470:	4d06      	ldr	r5, [pc, #24]	; (801348c <_read_r+0x20>)
 8013472:	4608      	mov	r0, r1
 8013474:	4611      	mov	r1, r2
 8013476:	2200      	movs	r2, #0
 8013478:	602a      	str	r2, [r5, #0]
 801347a:	461a      	mov	r2, r3
 801347c:	f7f2 fdea 	bl	8006054 <_read>
 8013480:	1c43      	adds	r3, r0, #1
 8013482:	d102      	bne.n	801348a <_read_r+0x1e>
 8013484:	682b      	ldr	r3, [r5, #0]
 8013486:	b103      	cbz	r3, 801348a <_read_r+0x1e>
 8013488:	6023      	str	r3, [r4, #0]
 801348a:	bd38      	pop	{r3, r4, r5, pc}
 801348c:	2000358c 	.word	0x2000358c

08013490 <_init>:
 8013490:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013492:	bf00      	nop
 8013494:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013496:	bc08      	pop	{r3}
 8013498:	469e      	mov	lr, r3
 801349a:	4770      	bx	lr

0801349c <_fini>:
 801349c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801349e:	bf00      	nop
 80134a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80134a2:	bc08      	pop	{r3}
 80134a4:	469e      	mov	lr, r3
 80134a6:	4770      	bx	lr
