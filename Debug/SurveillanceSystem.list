
SurveillanceSystem.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000234  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00014608  08000234  08000234  00010234  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000810  0801483c  0801483c  0002483c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801504c  0801504c  0002504c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08015054  08015054  00025054  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08015058  08015058  00025058  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .trace        00000000  20000000  20000000  00030074  2**0
                  CONTENTS
  7 .data         00000074  20000000  0801505c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .bss          0001cf8c  20000074  080150d0  00030074  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  2001d000  080150d0  0003d000  2**0
                  ALLOC
 10 .ARM.attributes 00000036  00000000  00000000  00030074  2**0
                  CONTENTS, READONLY
 11 .debug_info   0004bb06  00000000  00000000  000300aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 0000b7e5  00000000  00000000  0007bbb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00002e28  00000000  00000000  00087398  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_ranges 00002748  00000000  00000000  0008a1c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  000447b4  00000000  00000000  0008c908  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0004bb6e  00000000  00000000  000d10bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0017592d  00000000  00000000  0011cc2a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000050  00000000  00000000  00292557  2**0
                  CONTENTS, READONLY
 19 .debug_frame  0000b46c  00000000  00000000  002925a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000234 <__do_global_dtors_aux>:
 8000234:	b510      	push	{r4, lr}
 8000236:	4c05      	ldr	r4, [pc, #20]	; (800024c <__do_global_dtors_aux+0x18>)
 8000238:	7823      	ldrb	r3, [r4, #0]
 800023a:	b933      	cbnz	r3, 800024a <__do_global_dtors_aux+0x16>
 800023c:	4b04      	ldr	r3, [pc, #16]	; (8000250 <__do_global_dtors_aux+0x1c>)
 800023e:	b113      	cbz	r3, 8000246 <__do_global_dtors_aux+0x12>
 8000240:	4804      	ldr	r0, [pc, #16]	; (8000254 <__do_global_dtors_aux+0x20>)
 8000242:	e000      	b.n	8000246 <__do_global_dtors_aux+0x12>
 8000244:	bf00      	nop
 8000246:	2301      	movs	r3, #1
 8000248:	7023      	strb	r3, [r4, #0]
 800024a:	bd10      	pop	{r4, pc}
 800024c:	20000074 	.word	0x20000074
 8000250:	00000000 	.word	0x00000000
 8000254:	08014824 	.word	0x08014824

08000258 <frame_dummy>:
 8000258:	b508      	push	{r3, lr}
 800025a:	4b03      	ldr	r3, [pc, #12]	; (8000268 <frame_dummy+0x10>)
 800025c:	b11b      	cbz	r3, 8000266 <frame_dummy+0xe>
 800025e:	4903      	ldr	r1, [pc, #12]	; (800026c <frame_dummy+0x14>)
 8000260:	4803      	ldr	r0, [pc, #12]	; (8000270 <frame_dummy+0x18>)
 8000262:	e000      	b.n	8000266 <frame_dummy+0xe>
 8000264:	bf00      	nop
 8000266:	bd08      	pop	{r3, pc}
 8000268:	00000000 	.word	0x00000000
 800026c:	20000078 	.word	0x20000078
 8000270:	08014824 	.word	0x08014824

08000274 <_tx_initialize_low_level>:
    .thumb_func
.type _tx_initialize_low_level, function
_tx_initialize_low_level:

    /* Disable interrupts during ThreadX initialization.  */
    CPSID   i
 8000274:	b672      	cpsid	i
    LDR     r1, =__RAM_segment_used_end__           // Build first free address
    ADD     r1, r1, #4                              //
    STR     r1, [r0]                                // Setup first unused memory pointer
#endif
    /* Setup Vector Table Offset Register.  */
    MOV     r0, #0xE000E000                         // Build address of NVIC registers
 8000276:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
    LDR     r1, =g_pfnVectors                       // Pickup address of vector table
 800027a:	4917      	ldr	r1, [pc, #92]	; (80002d8 <__tx_DBGHandler+0x4>)
    STR     r1, [r0, #0xD08]                        // Set vector table address
 800027c:	f8c0 1d08 	str.w	r1, [r0, #3336]	; 0xd08

    /* Enable the cycle count register.  */
    LDR     r0, =0xE0001000                         // Build address of DWT register
 8000280:	4816      	ldr	r0, [pc, #88]	; (80002dc <__tx_DBGHandler+0x8>)
    LDR     r1, [r0]                                // Pickup the current value
 8000282:	6801      	ldr	r1, [r0, #0]
    ORR     r1, r1, #1                              // Set the CYCCNTENA bit
 8000284:	f041 0101 	orr.w	r1, r1, #1
    STR     r1, [r0]                                // Enable the cycle count register
 8000288:	6001      	str	r1, [r0, #0]

    /* Set system stack pointer from vector value.  */
    LDR     r0, =_tx_thread_system_stack_ptr        // Build address of system stack pointer
 800028a:	4815      	ldr	r0, [pc, #84]	; (80002e0 <__tx_DBGHandler+0xc>)
    LDR     r1, =g_pfnVectors                       // Pickup address of vector table
 800028c:	4912      	ldr	r1, [pc, #72]	; (80002d8 <__tx_DBGHandler+0x4>)
    LDR     r1, [r1]                                // Pickup reset stack pointer
 800028e:	6809      	ldr	r1, [r1, #0]
    STR     r1, [r0]                                // Save system stack pointer
 8000290:	6001      	str	r1, [r0, #0]

    /* Configure SysTick.  */
    MOV     r0, #0xE000E000                         // Build address of NVIC registers
 8000292:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
    LDR     r1, =SYSTICK_CYCLES
 8000296:	4913      	ldr	r1, [pc, #76]	; (80002e4 <__tx_DBGHandler+0x10>)
    STR     r1, [r0, #0x14]                         // Setup SysTick Reload Value
 8000298:	6141      	str	r1, [r0, #20]
    MOV     r1, #0x7                                // Build SysTick Control Enable Value
 800029a:	f04f 0107 	mov.w	r1, #7
    STR     r1, [r0, #0x10]                         // Setup SysTick Control
 800029e:	6101      	str	r1, [r0, #16]

    /* Configure handler priorities.  */
    LDR     r1, =0x00000000                         // Rsrv, UsgF, BusF, MemM
 80002a0:	f04f 0100 	mov.w	r1, #0
    STR     r1, [r0, #0xD18]                        // Setup System Handlers 4-7 Priority Registers
 80002a4:	f8c0 1d18 	str.w	r1, [r0, #3352]	; 0xd18

    LDR     r1, =0xFF000000                         // SVCl, Rsrv, Rsrv, Rsrv
 80002a8:	f04f 417f 	mov.w	r1, #4278190080	; 0xff000000
    STR     r1, [r0, #0xD1C]                        // Setup System Handlers 8-11 Priority Registers
 80002ac:	f8c0 1d1c 	str.w	r1, [r0, #3356]	; 0xd1c
                                                    // Note: SVC must be lowest priority, which is 0xFF

    LDR     r1, =0x40FF0000                         // SysT, PnSV, Rsrv, DbgM
 80002b0:	490d      	ldr	r1, [pc, #52]	; (80002e8 <__tx_DBGHandler+0x14>)
    STR     r1, [r0, #0xD20]                        // Setup System Handlers 12-15 Priority Registers
 80002b2:	f8c0 1d20 	str.w	r1, [r0, #3360]	; 0xd20
                                                    // Note: PnSV must be lowest priority, which is 0xFF

    /* Return to caller.  */
    BX      lr
 80002b6:	4770      	bx	lr

080002b8 <__tx_BadHandler>:
    .eabi_attribute Tag_ABI_align_preserved, 1
    .global  __tx_BadHandler
    .thumb_func
.type __tx_BadHandler, function
__tx_BadHandler:
    B       __tx_BadHandler
 80002b8:	f7ff bffe 	b.w	80002b8 <__tx_BadHandler>

080002bc <__tx_IntHandler>:
    .thumb_func
.type __tx_IntHandler, function
__tx_IntHandler:
// VOID InterruptHandler (VOID)
// {
    PUSH    {r0,lr}     // Save LR (and dummy r0 to maintain stack alignment)
 80002bc:	b501      	push	{r0, lr}
    /* Do interrupt handler work here */
    /* .... */
#if (defined(TX_ENABLE_EXECUTION_CHANGE_NOTIFY) || defined(TX_EXECUTION_PROFILE_ENABLE))
    BL      _tx_execution_isr_exit              // Call the ISR exit function
#endif
    POP     {r0,lr}
 80002be:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    BX      lr
 80002c2:	4770      	bx	lr

080002c4 <SysTick_Handler>:
    .thumb_func
.type SysTick_Handler, function
SysTick_Handler:
// VOID TimerInterruptHandler (VOID)
// {
    PUSH    {r0,lr}     // Save LR (and dummy r0 to maintain stack alignment)
 80002c4:	b501      	push	{r0, lr}
#if (defined(TX_ENABLE_EXECUTION_CHANGE_NOTIFY) || defined(TX_EXECUTION_PROFILE_ENABLE))
    BL      _tx_execution_isr_enter             // Call the ISR enter function
#endif
    BL      _tx_timer_interrupt
 80002c6:	f000 f897 	bl	80003f8 <_tx_timer_interrupt>
#if (defined(TX_ENABLE_EXECUTION_CHANGE_NOTIFY) || defined(TX_EXECUTION_PROFILE_ENABLE))
    BL      _tx_execution_isr_exit              // Call the ISR exit function
#endif
    POP     {r0,lr}
 80002ca:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    BX      lr
 80002ce:	4770      	bx	lr

080002d0 <__tx_NMIHandler>:
    .eabi_attribute Tag_ABI_align_preserved, 1
    .global  __tx_NMIHandler
    .thumb_func
.type __tx_NMIHandler, function
__tx_NMIHandler:
    B       __tx_NMIHandler
 80002d0:	f7ff bffe 	b.w	80002d0 <__tx_NMIHandler>

080002d4 <__tx_DBGHandler>:
    .eabi_attribute Tag_ABI_align_preserved, 1
    .global  __tx_DBGHandler
    .thumb_func
.type __tx_DBGHandler, function
__tx_DBGHandler:
    B       __tx_DBGHandler
 80002d4:	f7ff bffe 	b.w	80002d4 <__tx_DBGHandler>
    LDR     r1, =g_pfnVectors                       // Pickup address of vector table
 80002d8:	08000000 	.word	0x08000000
    LDR     r0, =0xE0001000                         // Build address of DWT register
 80002dc:	e0001000 	.word	0xe0001000
    LDR     r0, =_tx_thread_system_stack_ptr        // Build address of system stack pointer
 80002e0:	2001c9e4 	.word	0x2001c9e4
    LDR     r1, =SYSTICK_CYCLES
 80002e4:	001869ff 	.word	0x001869ff
    LDR     r1, =0x40FF0000                         // SysT, PnSV, Rsrv, DbgM
 80002e8:	40ff0000 	.word	0x40ff0000

080002ec <_tx_thread_schedule>:
    /* This function should only ever be called on Cortex-M
       from the first schedule request. Subsequent scheduling occurs
       from the PendSV handling routine below. */

    /* Clear the preempt-disable flag to enable rescheduling after initialization on Cortex-M targets.  */
    MOV     r0, #0                                  // Build value for TX_FALSE
 80002ec:	f04f 0000 	mov.w	r0, #0
    LDR     r2, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 80002f0:	4a2d      	ldr	r2, [pc, #180]	; (80003a8 <_tx_vfp_access+0x4>)
    STR     r0, [r2, #0]                            // Clear preempt disable flag
 80002f2:	6010      	str	r0, [r2, #0]

#ifdef __ARM_FP
    /* Clear CONTROL.FPCA bit so VFP registers aren't unnecessarily stacked.  */
    MRS     r0, CONTROL                             // Pickup current CONTROL register
 80002f4:	f3ef 8014 	mrs	r0, CONTROL
    BIC     r0, r0, #4                              // Clear the FPCA bit
 80002f8:	f020 0004 	bic.w	r0, r0, #4
    MSR     CONTROL, r0                             // Setup new CONTROL register
 80002fc:	f380 8814 	msr	CONTROL, r0
#endif

    /* Enable interrupts */
    CPSIE   i
 8000300:	b662      	cpsie	i

    /* Enter the scheduler for the first time.  */
    MOV     r0, #0x10000000                         // Load PENDSVSET bit
 8000302:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    MOV     r1, #0xE000E000                         // Load NVIC base
 8000306:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    STR     r0, [r1, #0xD04]                        // Set PENDSVBIT in ICSR
 800030a:	f8c1 0d04 	str.w	r0, [r1, #3332]	; 0xd04
    DSB                                             // Complete all memory accesses
 800030e:	f3bf 8f4f 	dsb	sy
    ISB                                             // Flush pipeline
 8000312:	f3bf 8f6f 	isb	sy

08000316 <__tx_wait_here>:

    /* Wait here for the PendSV to take place.  */

__tx_wait_here:
    B       __tx_wait_here                          // Wait for the PendSV to happen
 8000316:	e7fe      	b.n	8000316 <__tx_wait_here>

08000318 <PendSV_Handler>:
    BL      _tx_execution_thread_exit               // Call the thread exit function
    POP     {r0, lr}                                // Recover LR
    CPSIE   i                                       // Enable interrupts
#endif

    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 8000318:	4824      	ldr	r0, [pc, #144]	; (80003ac <_tx_vfp_access+0x8>)
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 800031a:	4a25      	ldr	r2, [pc, #148]	; (80003b0 <_tx_vfp_access+0xc>)
    MOV     r3, #0                                  // Build NULL value
 800031c:	f04f 0300 	mov.w	r3, #0
    LDR     r1, [r0]                                // Pickup current thread pointer
 8000320:	6801      	ldr	r1, [r0, #0]

    /* Determine if there is a current thread to finish preserving.  */

    CBZ     r1, __tx_ts_new                         // If NULL, skip preservation
 8000322:	b191      	cbz	r1, 800034a <__tx_ts_new>

    /* Recover PSP and preserve current thread context.  */

    STR     r3, [r0]                                // Set _tx_thread_current_ptr to NULL
 8000324:	6003      	str	r3, [r0, #0]
    MRS     r12, PSP                                // Pickup PSP pointer (thread's stack pointer)
 8000326:	f3ef 8c09 	mrs	ip, PSP
    STMDB   r12!, {r4-r11}                          // Save its remaining registers
 800032a:	e92c 0ff0 	stmdb	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
#ifdef __ARM_FP
    TST     LR, #0x10                               // Determine if the VFP extended frame is present
 800032e:	f01e 0f10 	tst.w	lr, #16
    BNE     _skip_vfp_save
 8000332:	d101      	bne.n	8000338 <_skip_vfp_save>
    VSTMDB  r12!,{s16-s31}                          // Yes, save additional VFP registers
 8000334:	ed2c 8a10 	vstmdb	ip!, {s16-s31}

08000338 <_skip_vfp_save>:
_skip_vfp_save:
#endif
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 8000338:	4c1e      	ldr	r4, [pc, #120]	; (80003b4 <_tx_vfp_access+0x10>)
    STMDB   r12!, {LR}                              // Save LR on the stack
 800033a:	f84c ed04 	str.w	lr, [ip, #-4]!
    STR     r12, [r1, #8]                           // Save the thread stack pointer
 800033e:	f8c1 c008 	str.w	ip, [r1, #8]
_skip_secure_save:
#endif

    /* Determine if time-slice is active. If it isn't, skip time handling processing.  */

    LDR     r5, [r4]                                // Pickup current time-slice
 8000342:	6825      	ldr	r5, [r4, #0]
    CBZ     r5, __tx_ts_new                         // If not active, skip processing
 8000344:	b10d      	cbz	r5, 800034a <__tx_ts_new>

    /* Time-slice is active, save the current thread's time-slice and clear the global time-slice variable.  */

    STR     r5, [r1, #24]                           // Save current time-slice
 8000346:	618d      	str	r5, [r1, #24]

    /* Clear the global time-slice.  */

    STR     r3, [r4]                                // Clear time-slice
 8000348:	6023      	str	r3, [r4, #0]

0800034a <__tx_ts_new>:

__tx_ts_new:

    /* Now we are looking for a new thread to execute!  */

    CPSID   i                                       // Disable interrupts
 800034a:	b672      	cpsid	i
    LDR     r1, [r2]                                // Is there another thread ready to execute?
 800034c:	6811      	ldr	r1, [r2, #0]
    CBZ     r1, __tx_ts_wait                        // No, skip to the wait processing
 800034e:	b1d1      	cbz	r1, 8000386 <__tx_ts_wait>

    /* Yes, another thread is ready for else, make the current thread the new thread.  */

    STR     r1, [r0]                                // Setup the current thread pointer to the new thread
 8000350:	6001      	str	r1, [r0, #0]
    CPSIE   i                                       // Enable interrupts
 8000352:	b662      	cpsie	i

08000354 <__tx_ts_restore>:

    /* Increment the thread run count.  */

__tx_ts_restore:
    LDR     r7, [r1, #4]                            // Pickup the current thread run count
 8000354:	684f      	ldr	r7, [r1, #4]
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 8000356:	4c17      	ldr	r4, [pc, #92]	; (80003b4 <_tx_vfp_access+0x10>)
    LDR     r5, [r1, #24]                           // Pickup thread's current time-slice
 8000358:	698d      	ldr	r5, [r1, #24]
    ADD     r7, r7, #1                              // Increment the thread run count
 800035a:	f107 0701 	add.w	r7, r7, #1
    STR     r7, [r1, #4]                            // Store the new run count
 800035e:	604f      	str	r7, [r1, #4]

    /* Setup global time-slice with thread's current time-slice.  */

    STR     r5, [r4]                                // Setup global time-slice
 8000360:	6025      	str	r5, [r4, #0]
    POP     {r0,r1}                                 // Restore r1 (and dummy r0)
_skip_secure_restore:
#endif

    /* Restore the thread context and PSP.  */
    LDR     r12, [r1, #12]                          // Get stack start
 8000362:	f8d1 c00c 	ldr.w	ip, [r1, #12]
    MSR     PSPLIM, r12                             // Set stack limit
 8000366:	f38c 880b 	msr	PSPLIM, ip
    LDR     r12, [r1, #8]                           // Pickup thread's stack pointer
 800036a:	f8d1 c008 	ldr.w	ip, [r1, #8]
    LDMIA   r12!, {LR}                              // Pickup LR
 800036e:	f85c eb04 	ldr.w	lr, [ip], #4
#ifdef __ARM_FP
    TST     LR, #0x10                               // Determine if the VFP extended frame is present
 8000372:	f01e 0f10 	tst.w	lr, #16
    BNE     _skip_vfp_restore                       // If not, skip VFP restore
 8000376:	d101      	bne.n	800037c <_skip_vfp_restore>
    VLDMIA  r12!, {s16-s31}                         // Yes, restore additional VFP registers
 8000378:	ecbc 8a10 	vldmia	ip!, {s16-s31}

0800037c <_skip_vfp_restore>:
_skip_vfp_restore:
#endif
    LDMIA   r12!, {r4-r11}                          // Recover thread's registers
 800037c:	e8bc 0ff0 	ldmia.w	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
    MSR     PSP, r12                                // Setup the thread's stack pointer
 8000380:	f38c 8809 	msr	PSP, ip

    BX      lr                                      // Return to thread!
 8000384:	4770      	bx	lr

08000386 <__tx_ts_wait>:
    /* The following is the idle wait processing... in this case, no threads are ready for execution and the
       system will simply be idle until an interrupt occurs that makes a thread ready. Note that interrupts
       are disabled to allow use of WFI for waiting for a thread to arrive.  */

__tx_ts_wait:
    CPSID   i                                       // Disable interrupts
 8000386:	b672      	cpsid	i
    LDR     r1, [r2]                                // Pickup the next thread to execute pointer
 8000388:	6811      	ldr	r1, [r2, #0]
    STR     r1, [r0]                                // Store it in the current pointer
 800038a:	6001      	str	r1, [r0, #0]
    CBNZ    r1, __tx_ts_ready                       // If non-NULL, a new thread is ready!
 800038c:	b909      	cbnz	r1, 8000392 <__tx_ts_ready>
    PUSH    {r0-r3}
    BL      tx_low_power_exit                       // Exit low power mode
    POP     {r0-r3}
#endif

    CPSIE   i                                       // Enable interrupts
 800038e:	b662      	cpsie	i
    B       __tx_ts_wait                            // Loop to continue waiting
 8000390:	e7f9      	b.n	8000386 <__tx_ts_wait>

08000392 <__tx_ts_ready>:

    /* At this point, we have a new thread ready to go. Clear any newly pended PendSV - since we are
       already in the handler!  */
__tx_ts_ready:
    MOV     r7, #0x08000000                         // Build clear PendSV value
 8000392:	f04f 6700 	mov.w	r7, #134217728	; 0x8000000
    MOV     r8, #0xE000E000                         // Build base NVIC address
 8000396:	f04f 28e0 	mov.w	r8, #3758153728	; 0xe000e000
    STR     r7, [r8, #0xD04]                        // Clear any PendSV
 800039a:	f8c8 7d04 	str.w	r7, [r8, #3332]	; 0xd04

    /* Re-enable interrupts and restore new thread.  */
    CPSIE   i                                       // Enable interrupts
 800039e:	b662      	cpsie	i
    B       __tx_ts_restore                         // Restore the thread
 80003a0:	e7d8      	b.n	8000354 <__tx_ts_restore>
 80003a2:	bf00      	nop

080003a4 <_tx_vfp_access>:
.type _tx_vfp_access, function
_tx_vfp_access:
#if TX_ENABLE_FPU_SUPPORT
    VMOV.F32 s0, s0                                 // Simply access the VFP
#endif
    BX       lr                                     // Return to caller
 80003a4:	4770      	bx	lr
 80003a6:	0000      	.short	0x0000
    LDR     r2, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 80003a8:	2001ca80 	.word	0x2001ca80
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 80003ac:	2001c9e8 	.word	0x2001c9e8
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 80003b0:	2001c9ec 	.word	0x2001c9ec
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 80003b4:	2001cfec 	.word	0x2001cfec

080003b8 <_tx_thread_stack_build>:
                       pc          Initial value for pc
                       xPSR        Initial value for xPSR

    Stack Bottom: (higher memory address)  */

    LDR     r2, [r0, #16]                           // Pickup end of stack area
 80003b8:	6902      	ldr	r2, [r0, #16]
    BIC     r2, r2, #0x7                            // Align frame for 8-byte alignment
 80003ba:	f022 0207 	bic.w	r2, r2, #7
    SUB     r2, r2, #68                             // Subtract frame size
 80003be:	f1a2 0244 	sub.w	r2, r2, #68	; 0x44
#ifdef TX_SINGLE_MODE_SECURE
    LDR     r3, =0xFFFFFFFD                         // Build initial LR value for secure mode
#else
    LDR     r3, =0xFFFFFFBC                         // Build initial LR value to return to non-secure PSP
 80003c2:	f06f 0343 	mvn.w	r3, #67	; 0x43
#endif
    STR     r3, [r2, #0]                            // Save on the stack
 80003c6:	6013      	str	r3, [r2, #0]

    /* Actually build the stack frame.  */

    MOV     r3, #0                                  // Build initial register value
 80003c8:	f04f 0300 	mov.w	r3, #0
    STR     r3, [r2, #4]                            // Store initial r4
 80003cc:	6053      	str	r3, [r2, #4]
    STR     r3, [r2, #8]                            // Store initial r5
 80003ce:	6093      	str	r3, [r2, #8]
    STR     r3, [r2, #12]                           // Store initial r6
 80003d0:	60d3      	str	r3, [r2, #12]
    STR     r3, [r2, #16]                           // Store initial r7
 80003d2:	6113      	str	r3, [r2, #16]
    STR     r3, [r2, #20]                           // Store initial r8
 80003d4:	6153      	str	r3, [r2, #20]
    STR     r3, [r2, #24]                           // Store initial r9
 80003d6:	6193      	str	r3, [r2, #24]
    STR     r3, [r2, #28]                           // Store initial r10
 80003d8:	61d3      	str	r3, [r2, #28]
    STR     r3, [r2, #32]                           // Store initial r11
 80003da:	6213      	str	r3, [r2, #32]

    /* Hardware stack follows.  */

    STR     r3, [r2, #36]                           // Store initial r0
 80003dc:	6253      	str	r3, [r2, #36]	; 0x24
    STR     r3, [r2, #40]                           // Store initial r1
 80003de:	6293      	str	r3, [r2, #40]	; 0x28
    STR     r3, [r2, #44]                           // Store initial r2
 80003e0:	62d3      	str	r3, [r2, #44]	; 0x2c
    STR     r3, [r2, #48]                           // Store initial r3
 80003e2:	6313      	str	r3, [r2, #48]	; 0x30
    STR     r3, [r2, #52]                           // Store initial r12
 80003e4:	6353      	str	r3, [r2, #52]	; 0x34
    MOV     r3, #0xFFFFFFFF                         // Poison EXC_RETURN value
 80003e6:	f04f 33ff 	mov.w	r3, #4294967295
    STR     r3, [r2, #56]                           // Store initial lr
 80003ea:	6393      	str	r3, [r2, #56]	; 0x38
    STR     r1, [r2, #60]                           // Store initial pc
 80003ec:	63d1      	str	r1, [r2, #60]	; 0x3c
    MOV     r3, #0x01000000                         // Only T-bit need be set
 80003ee:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    STR     r3, [r2, #64]                           // Store initial xPSR
 80003f2:	6413      	str	r3, [r2, #64]	; 0x40

    /* Setup stack pointer.  */
    // thread_ptr -> tx_thread_stack_ptr =  r2;

    STR     r2, [r0, #8]                            // Save stack pointer in thread's
 80003f4:	6082      	str	r2, [r0, #8]
                                                    //   control block
    BX      lr                                      // Return to caller
 80003f6:	4770      	bx	lr

080003f8 <_tx_timer_interrupt>:
       for use.  */

    /* Increment the system clock.  */
    // _tx_timer_system_clock++;

    LDR     r1, =_tx_timer_system_clock             // Pickup address of system clock
 80003f8:	4922      	ldr	r1, [pc, #136]	; (8000484 <__tx_timer_nothing_expired+0x8>)
    LDR     r0, [r1, #0]                            // Pickup system clock
 80003fa:	6808      	ldr	r0, [r1, #0]
    ADD     r0, r0, #1                              // Increment system clock
 80003fc:	f100 0001 	add.w	r0, r0, #1
    STR     r0, [r1, #0]                            // Store new system clock
 8000400:	6008      	str	r0, [r1, #0]

    /* Test for time-slice expiration.  */
    // if (_tx_timer_time_slice)
    // {

    LDR     r3, =_tx_timer_time_slice               // Pickup address of time-slice
 8000402:	4b21      	ldr	r3, [pc, #132]	; (8000488 <__tx_timer_nothing_expired+0xc>)
    LDR     r2, [r3, #0]                            // Pickup time-slice
 8000404:	681a      	ldr	r2, [r3, #0]
    CBZ     r2, __tx_timer_no_time_slice            // Is it non-active?
 8000406:	b13a      	cbz	r2, 8000418 <__tx_timer_no_time_slice>
                                                    // Yes, skip time-slice processing

       /* Decrement the time_slice.  */
       // _tx_timer_time_slice--;

    SUB     r2, r2, #1                              // Decrement the time-slice
 8000408:	f1a2 0201 	sub.w	r2, r2, #1
    STR     r2, [r3, #0]                            // Store new time-slice value
 800040c:	601a      	str	r2, [r3, #0]

       /* Check for expiration.  */
       // if (__tx_timer_time_slice == 0)

    CBNZ    r2, __tx_timer_no_time_slice            // Has it expired?
 800040e:	b91a      	cbnz	r2, 8000418 <__tx_timer_no_time_slice>
                                                    // No, skip expiration processing

       /* Set the time-slice expired flag.  */
       // _tx_timer_expired_time_slice =  TX_TRUE;

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup address of expired flag
 8000410:	4b1e      	ldr	r3, [pc, #120]	; (800048c <__tx_timer_nothing_expired+0x10>)
    MOV     r0, #1                                  // Build expired value
 8000412:	f04f 0001 	mov.w	r0, #1
    STR     r0, [r3, #0]                            // Set time-slice expiration flag
 8000416:	6018      	str	r0, [r3, #0]

08000418 <__tx_timer_no_time_slice>:

    /* Test for timer expiration.  */
    // if (*_tx_timer_current_ptr)
    // {

    LDR     r1, =_tx_timer_current_ptr              // Pickup current timer pointer address
 8000418:	491d      	ldr	r1, [pc, #116]	; (8000490 <__tx_timer_nothing_expired+0x14>)
    LDR     r0, [r1, #0]                            // Pickup current timer
 800041a:	6808      	ldr	r0, [r1, #0]
    LDR     r2, [r0, #0]                            // Pickup timer list entry
 800041c:	6802      	ldr	r2, [r0, #0]
    CBZ     r2, __tx_timer_no_timer                 // Is there anything in the list?
 800041e:	b122      	cbz	r2, 800042a <__tx_timer_no_timer>
                                                    // No, just increment the timer

        /* Set expiration flag.  */
        // _tx_timer_expired =  TX_TRUE;

    LDR     r3, =_tx_timer_expired                  // Pickup expiration flag address
 8000420:	4b1c      	ldr	r3, [pc, #112]	; (8000494 <__tx_timer_nothing_expired+0x18>)
    MOV     r2, #1                                  // Build expired value
 8000422:	f04f 0201 	mov.w	r2, #1
    STR     r2, [r3, #0]                            // Set expired flag
 8000426:	601a      	str	r2, [r3, #0]
    B       __tx_timer_done                         // Finished timer processing
 8000428:	e008      	b.n	800043c <__tx_timer_done>

0800042a <__tx_timer_no_timer>:
__tx_timer_no_timer:

        /* No timer expired, increment the timer pointer.  */
        // _tx_timer_current_ptr++;

    ADD     r0, r0, #4                              // Move to next timer
 800042a:	f100 0004 	add.w	r0, r0, #4

        /* Check for wrap-around.  */
        // if (_tx_timer_current_ptr == _tx_timer_list_end)

    LDR     r3, =_tx_timer_list_end                 // Pickup addr of timer list end
 800042e:	4b1a      	ldr	r3, [pc, #104]	; (8000498 <__tx_timer_nothing_expired+0x1c>)
    LDR     r2, [r3, #0]                            // Pickup list end
 8000430:	681a      	ldr	r2, [r3, #0]
    CMP     r0, r2                                  // Are we at list end?
 8000432:	4290      	cmp	r0, r2
    BNE     __tx_timer_skip_wrap                    // No, skip wrap-around logic
 8000434:	d101      	bne.n	800043a <__tx_timer_skip_wrap>

            /* Wrap to beginning of list.  */
            // _tx_timer_current_ptr =  _tx_timer_list_start;

    LDR     r3, =_tx_timer_list_start               // Pickup addr of timer list start
 8000436:	4b19      	ldr	r3, [pc, #100]	; (800049c <__tx_timer_nothing_expired+0x20>)
    LDR     r0, [r3, #0]                            // Set current pointer to list start
 8000438:	6818      	ldr	r0, [r3, #0]

0800043a <__tx_timer_skip_wrap>:

__tx_timer_skip_wrap:

    STR     r0, [r1, #0]                            // Store new current timer pointer
 800043a:	6008      	str	r0, [r1, #0]

0800043c <__tx_timer_done>:

    /* See if anything has expired.  */
    // if ((_tx_timer_expired_time_slice) || (_tx_timer_expired))
    // {

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup addr of expired flag
 800043c:	4b13      	ldr	r3, [pc, #76]	; (800048c <__tx_timer_nothing_expired+0x10>)
    LDR     r2, [r3, #0]                            // Pickup time-slice expired flag
 800043e:	681a      	ldr	r2, [r3, #0]
    CBNZ    r2, __tx_something_expired              // Did a time-slice expire?
 8000440:	b912      	cbnz	r2, 8000448 <__tx_something_expired>
                                                    // If non-zero, time-slice expired
    LDR     r1, =_tx_timer_expired                  // Pickup addr of other expired flag
 8000442:	4914      	ldr	r1, [pc, #80]	; (8000494 <__tx_timer_nothing_expired+0x18>)
    LDR     r0, [r1, #0]                            // Pickup timer expired flag
 8000444:	6808      	ldr	r0, [r1, #0]
    CBZ     r0, __tx_timer_nothing_expired          // Did a timer expire?
 8000446:	b1c8      	cbz	r0, 800047c <__tx_timer_nothing_expired>

08000448 <__tx_something_expired>:
                                                    // No, nothing expired

__tx_something_expired:

    PUSH    {r0, lr}                                // Save the lr register on the stack
 8000448:	b501      	push	{r0, lr}

    /* Did a timer expire?  */
    // if (_tx_timer_expired)
    // {

    LDR     r1, =_tx_timer_expired                  // Pickup addr of expired flag
 800044a:	4912      	ldr	r1, [pc, #72]	; (8000494 <__tx_timer_nothing_expired+0x18>)
    LDR     r0, [r1, #0]                            // Pickup timer expired flag
 800044c:	6808      	ldr	r0, [r1, #0]
    CBZ     r0, __tx_timer_dont_activate            // Check for timer expiration
 800044e:	b108      	cbz	r0, 8000454 <__tx_timer_dont_activate>
                                                    // If not set, skip timer activation

        /* Process timer expiration.  */
        // _tx_timer_expiration_process();

    BL      _tx_timer_expiration_process            // Call the timer expiration handling routine
 8000450:	f012 fdee 	bl	8013030 <_tx_timer_expiration_process>

08000454 <__tx_timer_dont_activate>:

    /* Did time slice expire?  */
    // if (_tx_timer_expired_time_slice)
    // {

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup addr of time-slice expired
 8000454:	4b0d      	ldr	r3, [pc, #52]	; (800048c <__tx_timer_nothing_expired+0x10>)
    LDR     r2, [r3, #0]                            // Pickup the actual flag
 8000456:	681a      	ldr	r2, [r3, #0]
    CBZ     r2, __tx_timer_not_ts_expiration        // See if the flag is set
 8000458:	b172      	cbz	r2, 8000478 <__tx_timer_not_ts_expiration>
                                                    // No, skip time-slice processing

        /* Time slice interrupted thread.  */
        // _tx_thread_time_slice();

    BL      _tx_thread_time_slice                   // Call time-slice processing
 800045a:	f012 fd5b 	bl	8012f14 <_tx_thread_time_slice>
    LDR     r0, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 800045e:	4810      	ldr	r0, [pc, #64]	; (80004a0 <__tx_timer_nothing_expired+0x24>)
    LDR     r1, [r0]                                // Is the preempt disable flag set?
 8000460:	6801      	ldr	r1, [r0, #0]
    CBNZ    r1, __tx_timer_skip_time_slice          // Yes, skip the PendSV logic
 8000462:	b949      	cbnz	r1, 8000478 <__tx_timer_not_ts_expiration>
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 8000464:	480f      	ldr	r0, [pc, #60]	; (80004a4 <__tx_timer_nothing_expired+0x28>)
    LDR     r1, [r0]                                // Pickup the current thread pointer
 8000466:	6801      	ldr	r1, [r0, #0]
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 8000468:	4a0f      	ldr	r2, [pc, #60]	; (80004a8 <__tx_timer_nothing_expired+0x2c>)
    LDR     r3, [r2]                                // Pickup the execute thread pointer
 800046a:	6813      	ldr	r3, [r2, #0]
    LDR     r0, =0xE000ED04                         // Build address of control register
 800046c:	480f      	ldr	r0, [pc, #60]	; (80004ac <__tx_timer_nothing_expired+0x30>)
    LDR     r2, =0x10000000                         // Build value for PendSV bit
 800046e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    CMP     r1, r3                                  // Are they the same?
 8000472:	4299      	cmp	r1, r3
    BEQ     __tx_timer_skip_time_slice              // If the same, there was no time-slice performed
 8000474:	d000      	beq.n	8000478 <__tx_timer_not_ts_expiration>
    STR     r2, [r0]                                // Not the same, issue the PendSV for preemption
 8000476:	6002      	str	r2, [r0, #0]

08000478 <__tx_timer_not_ts_expiration>:
__tx_timer_skip_time_slice:
    // }

__tx_timer_not_ts_expiration:

    POP     {r0, lr}                                // Recover lr register (r0 is just there for
 8000478:	e8bd 4001 	ldmia.w	sp!, {r0, lr}

0800047c <__tx_timer_nothing_expired>:

    // }

__tx_timer_nothing_expired:

    DSB                                             // Complete all memory access
 800047c:	f3bf 8f4f 	dsb	sy
    BX      lr                                      // Return to caller
 8000480:	4770      	bx	lr
 8000482:	0000      	.short	0x0000
    LDR     r1, =_tx_timer_system_clock             // Pickup address of system clock
 8000484:	2001ca8c 	.word	0x2001ca8c
    LDR     r3, =_tx_timer_time_slice               // Pickup address of time-slice
 8000488:	2001cfec 	.word	0x2001cfec
    LDR     r3, =_tx_timer_expired_time_slice       // Pickup address of expired flag
 800048c:	2001ca90 	.word	0x2001ca90
    LDR     r1, =_tx_timer_current_ptr              // Pickup current timer pointer address
 8000490:	2001cb1c 	.word	0x2001cb1c
    LDR     r3, =_tx_timer_expired                  // Pickup expiration flag address
 8000494:	2001cb20 	.word	0x2001cb20
    LDR     r3, =_tx_timer_list_end                 // Pickup addr of timer list end
 8000498:	2001cb18 	.word	0x2001cb18
    LDR     r3, =_tx_timer_list_start               // Pickup addr of timer list start
 800049c:	2001cb14 	.word	0x2001cb14
    LDR     r0, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 80004a0:	2001ca80 	.word	0x2001ca80
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 80004a4:	2001c9e8 	.word	0x2001c9e8
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 80004a8:	2001c9ec 	.word	0x2001c9ec
    LDR     r0, =0xE000ED04                         // Build address of control register
 80004ac:	e000ed04 	.word	0xe000ed04

080004b0 <__aeabi_drsub>:
 80004b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80004b4:	e002      	b.n	80004bc <__adddf3>
 80004b6:	bf00      	nop

080004b8 <__aeabi_dsub>:
 80004b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080004bc <__adddf3>:
 80004bc:	b530      	push	{r4, r5, lr}
 80004be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	bf1f      	itttt	ne
 80004d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80004d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80004da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80004de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004e2:	f000 80e2 	beq.w	80006aa <__adddf3+0x1ee>
 80004e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80004ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80004ee:	bfb8      	it	lt
 80004f0:	426d      	neglt	r5, r5
 80004f2:	dd0c      	ble.n	800050e <__adddf3+0x52>
 80004f4:	442c      	add	r4, r5
 80004f6:	ea80 0202 	eor.w	r2, r0, r2
 80004fa:	ea81 0303 	eor.w	r3, r1, r3
 80004fe:	ea82 0000 	eor.w	r0, r2, r0
 8000502:	ea83 0101 	eor.w	r1, r3, r1
 8000506:	ea80 0202 	eor.w	r2, r0, r2
 800050a:	ea81 0303 	eor.w	r3, r1, r3
 800050e:	2d36      	cmp	r5, #54	; 0x36
 8000510:	bf88      	it	hi
 8000512:	bd30      	pophi	{r4, r5, pc}
 8000514:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000518:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800051c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000520:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000524:	d002      	beq.n	800052c <__adddf3+0x70>
 8000526:	4240      	negs	r0, r0
 8000528:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800052c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000530:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000534:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000538:	d002      	beq.n	8000540 <__adddf3+0x84>
 800053a:	4252      	negs	r2, r2
 800053c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000540:	ea94 0f05 	teq	r4, r5
 8000544:	f000 80a7 	beq.w	8000696 <__adddf3+0x1da>
 8000548:	f1a4 0401 	sub.w	r4, r4, #1
 800054c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000550:	db0d      	blt.n	800056e <__adddf3+0xb2>
 8000552:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000556:	fa22 f205 	lsr.w	r2, r2, r5
 800055a:	1880      	adds	r0, r0, r2
 800055c:	f141 0100 	adc.w	r1, r1, #0
 8000560:	fa03 f20e 	lsl.w	r2, r3, lr
 8000564:	1880      	adds	r0, r0, r2
 8000566:	fa43 f305 	asr.w	r3, r3, r5
 800056a:	4159      	adcs	r1, r3
 800056c:	e00e      	b.n	800058c <__adddf3+0xd0>
 800056e:	f1a5 0520 	sub.w	r5, r5, #32
 8000572:	f10e 0e20 	add.w	lr, lr, #32
 8000576:	2a01      	cmp	r2, #1
 8000578:	fa03 fc0e 	lsl.w	ip, r3, lr
 800057c:	bf28      	it	cs
 800057e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000582:	fa43 f305 	asr.w	r3, r3, r5
 8000586:	18c0      	adds	r0, r0, r3
 8000588:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800058c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000590:	d507      	bpl.n	80005a2 <__adddf3+0xe6>
 8000592:	f04f 0e00 	mov.w	lr, #0
 8000596:	f1dc 0c00 	rsbs	ip, ip, #0
 800059a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800059e:	eb6e 0101 	sbc.w	r1, lr, r1
 80005a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80005a6:	d31b      	bcc.n	80005e0 <__adddf3+0x124>
 80005a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80005ac:	d30c      	bcc.n	80005c8 <__adddf3+0x10c>
 80005ae:	0849      	lsrs	r1, r1, #1
 80005b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80005b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005b8:	f104 0401 	add.w	r4, r4, #1
 80005bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80005c4:	f080 809a 	bcs.w	80006fc <__adddf3+0x240>
 80005c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80005cc:	bf08      	it	eq
 80005ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80005d2:	f150 0000 	adcs.w	r0, r0, #0
 80005d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005da:	ea41 0105 	orr.w	r1, r1, r5
 80005de:	bd30      	pop	{r4, r5, pc}
 80005e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80005e4:	4140      	adcs	r0, r0
 80005e6:	eb41 0101 	adc.w	r1, r1, r1
 80005ea:	3c01      	subs	r4, #1
 80005ec:	bf28      	it	cs
 80005ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80005f2:	d2e9      	bcs.n	80005c8 <__adddf3+0x10c>
 80005f4:	f091 0f00 	teq	r1, #0
 80005f8:	bf04      	itt	eq
 80005fa:	4601      	moveq	r1, r0
 80005fc:	2000      	moveq	r0, #0
 80005fe:	fab1 f381 	clz	r3, r1
 8000602:	bf08      	it	eq
 8000604:	3320      	addeq	r3, #32
 8000606:	f1a3 030b 	sub.w	r3, r3, #11
 800060a:	f1b3 0220 	subs.w	r2, r3, #32
 800060e:	da0c      	bge.n	800062a <__adddf3+0x16e>
 8000610:	320c      	adds	r2, #12
 8000612:	dd08      	ble.n	8000626 <__adddf3+0x16a>
 8000614:	f102 0c14 	add.w	ip, r2, #20
 8000618:	f1c2 020c 	rsb	r2, r2, #12
 800061c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000620:	fa21 f102 	lsr.w	r1, r1, r2
 8000624:	e00c      	b.n	8000640 <__adddf3+0x184>
 8000626:	f102 0214 	add.w	r2, r2, #20
 800062a:	bfd8      	it	le
 800062c:	f1c2 0c20 	rsble	ip, r2, #32
 8000630:	fa01 f102 	lsl.w	r1, r1, r2
 8000634:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000638:	bfdc      	itt	le
 800063a:	ea41 010c 	orrle.w	r1, r1, ip
 800063e:	4090      	lslle	r0, r2
 8000640:	1ae4      	subs	r4, r4, r3
 8000642:	bfa2      	ittt	ge
 8000644:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000648:	4329      	orrge	r1, r5
 800064a:	bd30      	popge	{r4, r5, pc}
 800064c:	ea6f 0404 	mvn.w	r4, r4
 8000650:	3c1f      	subs	r4, #31
 8000652:	da1c      	bge.n	800068e <__adddf3+0x1d2>
 8000654:	340c      	adds	r4, #12
 8000656:	dc0e      	bgt.n	8000676 <__adddf3+0x1ba>
 8000658:	f104 0414 	add.w	r4, r4, #20
 800065c:	f1c4 0220 	rsb	r2, r4, #32
 8000660:	fa20 f004 	lsr.w	r0, r0, r4
 8000664:	fa01 f302 	lsl.w	r3, r1, r2
 8000668:	ea40 0003 	orr.w	r0, r0, r3
 800066c:	fa21 f304 	lsr.w	r3, r1, r4
 8000670:	ea45 0103 	orr.w	r1, r5, r3
 8000674:	bd30      	pop	{r4, r5, pc}
 8000676:	f1c4 040c 	rsb	r4, r4, #12
 800067a:	f1c4 0220 	rsb	r2, r4, #32
 800067e:	fa20 f002 	lsr.w	r0, r0, r2
 8000682:	fa01 f304 	lsl.w	r3, r1, r4
 8000686:	ea40 0003 	orr.w	r0, r0, r3
 800068a:	4629      	mov	r1, r5
 800068c:	bd30      	pop	{r4, r5, pc}
 800068e:	fa21 f004 	lsr.w	r0, r1, r4
 8000692:	4629      	mov	r1, r5
 8000694:	bd30      	pop	{r4, r5, pc}
 8000696:	f094 0f00 	teq	r4, #0
 800069a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800069e:	bf06      	itte	eq
 80006a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80006a4:	3401      	addeq	r4, #1
 80006a6:	3d01      	subne	r5, #1
 80006a8:	e74e      	b.n	8000548 <__adddf3+0x8c>
 80006aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006ae:	bf18      	it	ne
 80006b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006b4:	d029      	beq.n	800070a <__adddf3+0x24e>
 80006b6:	ea94 0f05 	teq	r4, r5
 80006ba:	bf08      	it	eq
 80006bc:	ea90 0f02 	teqeq	r0, r2
 80006c0:	d005      	beq.n	80006ce <__adddf3+0x212>
 80006c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80006c6:	bf04      	itt	eq
 80006c8:	4619      	moveq	r1, r3
 80006ca:	4610      	moveq	r0, r2
 80006cc:	bd30      	pop	{r4, r5, pc}
 80006ce:	ea91 0f03 	teq	r1, r3
 80006d2:	bf1e      	ittt	ne
 80006d4:	2100      	movne	r1, #0
 80006d6:	2000      	movne	r0, #0
 80006d8:	bd30      	popne	{r4, r5, pc}
 80006da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80006de:	d105      	bne.n	80006ec <__adddf3+0x230>
 80006e0:	0040      	lsls	r0, r0, #1
 80006e2:	4149      	adcs	r1, r1
 80006e4:	bf28      	it	cs
 80006e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80006ea:	bd30      	pop	{r4, r5, pc}
 80006ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80006f0:	bf3c      	itt	cc
 80006f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80006f6:	bd30      	popcc	{r4, r5, pc}
 80006f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000700:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000704:	f04f 0000 	mov.w	r0, #0
 8000708:	bd30      	pop	{r4, r5, pc}
 800070a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800070e:	bf1a      	itte	ne
 8000710:	4619      	movne	r1, r3
 8000712:	4610      	movne	r0, r2
 8000714:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000718:	bf1c      	itt	ne
 800071a:	460b      	movne	r3, r1
 800071c:	4602      	movne	r2, r0
 800071e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000722:	bf06      	itte	eq
 8000724:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000728:	ea91 0f03 	teqeq	r1, r3
 800072c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000730:	bd30      	pop	{r4, r5, pc}
 8000732:	bf00      	nop

08000734 <__aeabi_ui2d>:
 8000734:	f090 0f00 	teq	r0, #0
 8000738:	bf04      	itt	eq
 800073a:	2100      	moveq	r1, #0
 800073c:	4770      	bxeq	lr
 800073e:	b530      	push	{r4, r5, lr}
 8000740:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000744:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000748:	f04f 0500 	mov.w	r5, #0
 800074c:	f04f 0100 	mov.w	r1, #0
 8000750:	e750      	b.n	80005f4 <__adddf3+0x138>
 8000752:	bf00      	nop

08000754 <__aeabi_i2d>:
 8000754:	f090 0f00 	teq	r0, #0
 8000758:	bf04      	itt	eq
 800075a:	2100      	moveq	r1, #0
 800075c:	4770      	bxeq	lr
 800075e:	b530      	push	{r4, r5, lr}
 8000760:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000764:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000768:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800076c:	bf48      	it	mi
 800076e:	4240      	negmi	r0, r0
 8000770:	f04f 0100 	mov.w	r1, #0
 8000774:	e73e      	b.n	80005f4 <__adddf3+0x138>
 8000776:	bf00      	nop

08000778 <__aeabi_f2d>:
 8000778:	0042      	lsls	r2, r0, #1
 800077a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800077e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000782:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000786:	bf1f      	itttt	ne
 8000788:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800078c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000790:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000794:	4770      	bxne	lr
 8000796:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800079a:	bf08      	it	eq
 800079c:	4770      	bxeq	lr
 800079e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80007a2:	bf04      	itt	eq
 80007a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80007a8:	4770      	bxeq	lr
 80007aa:	b530      	push	{r4, r5, lr}
 80007ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80007b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80007b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007b8:	e71c      	b.n	80005f4 <__adddf3+0x138>
 80007ba:	bf00      	nop

080007bc <__aeabi_ul2d>:
 80007bc:	ea50 0201 	orrs.w	r2, r0, r1
 80007c0:	bf08      	it	eq
 80007c2:	4770      	bxeq	lr
 80007c4:	b530      	push	{r4, r5, lr}
 80007c6:	f04f 0500 	mov.w	r5, #0
 80007ca:	e00a      	b.n	80007e2 <__aeabi_l2d+0x16>

080007cc <__aeabi_l2d>:
 80007cc:	ea50 0201 	orrs.w	r2, r0, r1
 80007d0:	bf08      	it	eq
 80007d2:	4770      	bxeq	lr
 80007d4:	b530      	push	{r4, r5, lr}
 80007d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80007da:	d502      	bpl.n	80007e2 <__aeabi_l2d+0x16>
 80007dc:	4240      	negs	r0, r0
 80007de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80007ee:	f43f aed8 	beq.w	80005a2 <__adddf3+0xe6>
 80007f2:	f04f 0203 	mov.w	r2, #3
 80007f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007fa:	bf18      	it	ne
 80007fc:	3203      	addne	r2, #3
 80007fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000802:	bf18      	it	ne
 8000804:	3203      	addne	r2, #3
 8000806:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800080a:	f1c2 0320 	rsb	r3, r2, #32
 800080e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000812:	fa20 f002 	lsr.w	r0, r0, r2
 8000816:	fa01 fe03 	lsl.w	lr, r1, r3
 800081a:	ea40 000e 	orr.w	r0, r0, lr
 800081e:	fa21 f102 	lsr.w	r1, r1, r2
 8000822:	4414      	add	r4, r2
 8000824:	e6bd      	b.n	80005a2 <__adddf3+0xe6>
 8000826:	bf00      	nop

08000828 <__aeabi_dmul>:
 8000828:	b570      	push	{r4, r5, r6, lr}
 800082a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800082e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000832:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000836:	bf1d      	ittte	ne
 8000838:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800083c:	ea94 0f0c 	teqne	r4, ip
 8000840:	ea95 0f0c 	teqne	r5, ip
 8000844:	f000 f8de 	bleq	8000a04 <__aeabi_dmul+0x1dc>
 8000848:	442c      	add	r4, r5
 800084a:	ea81 0603 	eor.w	r6, r1, r3
 800084e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000852:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000856:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800085a:	bf18      	it	ne
 800085c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000860:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000864:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000868:	d038      	beq.n	80008dc <__aeabi_dmul+0xb4>
 800086a:	fba0 ce02 	umull	ip, lr, r0, r2
 800086e:	f04f 0500 	mov.w	r5, #0
 8000872:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000876:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800087a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800087e:	f04f 0600 	mov.w	r6, #0
 8000882:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000886:	f09c 0f00 	teq	ip, #0
 800088a:	bf18      	it	ne
 800088c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000890:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000894:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000898:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800089c:	d204      	bcs.n	80008a8 <__aeabi_dmul+0x80>
 800089e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80008a2:	416d      	adcs	r5, r5
 80008a4:	eb46 0606 	adc.w	r6, r6, r6
 80008a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80008ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80008b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80008b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80008b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80008bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c0:	bf88      	it	hi
 80008c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008c6:	d81e      	bhi.n	8000906 <__aeabi_dmul+0xde>
 80008c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80008cc:	bf08      	it	eq
 80008ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80008d2:	f150 0000 	adcs.w	r0, r0, #0
 80008d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008da:	bd70      	pop	{r4, r5, r6, pc}
 80008dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80008e0:	ea46 0101 	orr.w	r1, r6, r1
 80008e4:	ea40 0002 	orr.w	r0, r0, r2
 80008e8:	ea81 0103 	eor.w	r1, r1, r3
 80008ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80008f0:	bfc2      	ittt	gt
 80008f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fa:	bd70      	popgt	{r4, r5, r6, pc}
 80008fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000900:	f04f 0e00 	mov.w	lr, #0
 8000904:	3c01      	subs	r4, #1
 8000906:	f300 80ab 	bgt.w	8000a60 <__aeabi_dmul+0x238>
 800090a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800090e:	bfde      	ittt	le
 8000910:	2000      	movle	r0, #0
 8000912:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000916:	bd70      	pople	{r4, r5, r6, pc}
 8000918:	f1c4 0400 	rsb	r4, r4, #0
 800091c:	3c20      	subs	r4, #32
 800091e:	da35      	bge.n	800098c <__aeabi_dmul+0x164>
 8000920:	340c      	adds	r4, #12
 8000922:	dc1b      	bgt.n	800095c <__aeabi_dmul+0x134>
 8000924:	f104 0414 	add.w	r4, r4, #20
 8000928:	f1c4 0520 	rsb	r5, r4, #32
 800092c:	fa00 f305 	lsl.w	r3, r0, r5
 8000930:	fa20 f004 	lsr.w	r0, r0, r4
 8000934:	fa01 f205 	lsl.w	r2, r1, r5
 8000938:	ea40 0002 	orr.w	r0, r0, r2
 800093c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000940:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000944:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000948:	fa21 f604 	lsr.w	r6, r1, r4
 800094c:	eb42 0106 	adc.w	r1, r2, r6
 8000950:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000954:	bf08      	it	eq
 8000956:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800095a:	bd70      	pop	{r4, r5, r6, pc}
 800095c:	f1c4 040c 	rsb	r4, r4, #12
 8000960:	f1c4 0520 	rsb	r5, r4, #32
 8000964:	fa00 f304 	lsl.w	r3, r0, r4
 8000968:	fa20 f005 	lsr.w	r0, r0, r5
 800096c:	fa01 f204 	lsl.w	r2, r1, r4
 8000970:	ea40 0002 	orr.w	r0, r0, r2
 8000974:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000978:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800097c:	f141 0100 	adc.w	r1, r1, #0
 8000980:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000984:	bf08      	it	eq
 8000986:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800098a:	bd70      	pop	{r4, r5, r6, pc}
 800098c:	f1c4 0520 	rsb	r5, r4, #32
 8000990:	fa00 f205 	lsl.w	r2, r0, r5
 8000994:	ea4e 0e02 	orr.w	lr, lr, r2
 8000998:	fa20 f304 	lsr.w	r3, r0, r4
 800099c:	fa01 f205 	lsl.w	r2, r1, r5
 80009a0:	ea43 0302 	orr.w	r3, r3, r2
 80009a4:	fa21 f004 	lsr.w	r0, r1, r4
 80009a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80009ac:	fa21 f204 	lsr.w	r2, r1, r4
 80009b0:	ea20 0002 	bic.w	r0, r0, r2
 80009b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80009b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80009bc:	bf08      	it	eq
 80009be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80009c2:	bd70      	pop	{r4, r5, r6, pc}
 80009c4:	f094 0f00 	teq	r4, #0
 80009c8:	d10f      	bne.n	80009ea <__aeabi_dmul+0x1c2>
 80009ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80009ce:	0040      	lsls	r0, r0, #1
 80009d0:	eb41 0101 	adc.w	r1, r1, r1
 80009d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009d8:	bf08      	it	eq
 80009da:	3c01      	subeq	r4, #1
 80009dc:	d0f7      	beq.n	80009ce <__aeabi_dmul+0x1a6>
 80009de:	ea41 0106 	orr.w	r1, r1, r6
 80009e2:	f095 0f00 	teq	r5, #0
 80009e6:	bf18      	it	ne
 80009e8:	4770      	bxne	lr
 80009ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80009ee:	0052      	lsls	r2, r2, #1
 80009f0:	eb43 0303 	adc.w	r3, r3, r3
 80009f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80009f8:	bf08      	it	eq
 80009fa:	3d01      	subeq	r5, #1
 80009fc:	d0f7      	beq.n	80009ee <__aeabi_dmul+0x1c6>
 80009fe:	ea43 0306 	orr.w	r3, r3, r6
 8000a02:	4770      	bx	lr
 8000a04:	ea94 0f0c 	teq	r4, ip
 8000a08:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0c:	bf18      	it	ne
 8000a0e:	ea95 0f0c 	teqne	r5, ip
 8000a12:	d00c      	beq.n	8000a2e <__aeabi_dmul+0x206>
 8000a14:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a18:	bf18      	it	ne
 8000a1a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a1e:	d1d1      	bne.n	80009c4 <__aeabi_dmul+0x19c>
 8000a20:	ea81 0103 	eor.w	r1, r1, r3
 8000a24:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000a28:	f04f 0000 	mov.w	r0, #0
 8000a2c:	bd70      	pop	{r4, r5, r6, pc}
 8000a2e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a32:	bf06      	itte	eq
 8000a34:	4610      	moveq	r0, r2
 8000a36:	4619      	moveq	r1, r3
 8000a38:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a3c:	d019      	beq.n	8000a72 <__aeabi_dmul+0x24a>
 8000a3e:	ea94 0f0c 	teq	r4, ip
 8000a42:	d102      	bne.n	8000a4a <__aeabi_dmul+0x222>
 8000a44:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000a48:	d113      	bne.n	8000a72 <__aeabi_dmul+0x24a>
 8000a4a:	ea95 0f0c 	teq	r5, ip
 8000a4e:	d105      	bne.n	8000a5c <__aeabi_dmul+0x234>
 8000a50:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000a54:	bf1c      	itt	ne
 8000a56:	4610      	movne	r0, r2
 8000a58:	4619      	movne	r1, r3
 8000a5a:	d10a      	bne.n	8000a72 <__aeabi_dmul+0x24a>
 8000a5c:	ea81 0103 	eor.w	r1, r1, r3
 8000a60:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000a64:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000a68:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000a6c:	f04f 0000 	mov.w	r0, #0
 8000a70:	bd70      	pop	{r4, r5, r6, pc}
 8000a72:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000a76:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000a7a:	bd70      	pop	{r4, r5, r6, pc}

08000a7c <__aeabi_ddiv>:
 8000a7c:	b570      	push	{r4, r5, r6, lr}
 8000a7e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000a82:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000a86:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000a8a:	bf1d      	ittte	ne
 8000a8c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000a90:	ea94 0f0c 	teqne	r4, ip
 8000a94:	ea95 0f0c 	teqne	r5, ip
 8000a98:	f000 f8a7 	bleq	8000bea <__aeabi_ddiv+0x16e>
 8000a9c:	eba4 0405 	sub.w	r4, r4, r5
 8000aa0:	ea81 0e03 	eor.w	lr, r1, r3
 8000aa4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000aa8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000aac:	f000 8088 	beq.w	8000bc0 <__aeabi_ddiv+0x144>
 8000ab0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000ab4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000ab8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000abc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000ac0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000ac4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000ac8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000acc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000ad0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000ad4:	429d      	cmp	r5, r3
 8000ad6:	bf08      	it	eq
 8000ad8:	4296      	cmpeq	r6, r2
 8000ada:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000ade:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000ae2:	d202      	bcs.n	8000aea <__aeabi_ddiv+0x6e>
 8000ae4:	085b      	lsrs	r3, r3, #1
 8000ae6:	ea4f 0232 	mov.w	r2, r2, rrx
 8000aea:	1ab6      	subs	r6, r6, r2
 8000aec:	eb65 0503 	sbc.w	r5, r5, r3
 8000af0:	085b      	lsrs	r3, r3, #1
 8000af2:	ea4f 0232 	mov.w	r2, r2, rrx
 8000af6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000afa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000afe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000b02:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000b06:	bf22      	ittt	cs
 8000b08:	1ab6      	subcs	r6, r6, r2
 8000b0a:	4675      	movcs	r5, lr
 8000b0c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000b10:	085b      	lsrs	r3, r3, #1
 8000b12:	ea4f 0232 	mov.w	r2, r2, rrx
 8000b16:	ebb6 0e02 	subs.w	lr, r6, r2
 8000b1a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000b1e:	bf22      	ittt	cs
 8000b20:	1ab6      	subcs	r6, r6, r2
 8000b22:	4675      	movcs	r5, lr
 8000b24:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000b28:	085b      	lsrs	r3, r3, #1
 8000b2a:	ea4f 0232 	mov.w	r2, r2, rrx
 8000b2e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000b32:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000b36:	bf22      	ittt	cs
 8000b38:	1ab6      	subcs	r6, r6, r2
 8000b3a:	4675      	movcs	r5, lr
 8000b3c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000b40:	085b      	lsrs	r3, r3, #1
 8000b42:	ea4f 0232 	mov.w	r2, r2, rrx
 8000b46:	ebb6 0e02 	subs.w	lr, r6, r2
 8000b4a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000b4e:	bf22      	ittt	cs
 8000b50:	1ab6      	subcs	r6, r6, r2
 8000b52:	4675      	movcs	r5, lr
 8000b54:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000b58:	ea55 0e06 	orrs.w	lr, r5, r6
 8000b5c:	d018      	beq.n	8000b90 <__aeabi_ddiv+0x114>
 8000b5e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000b62:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000b66:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000b6a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000b6e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000b72:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000b76:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000b7a:	d1c0      	bne.n	8000afe <__aeabi_ddiv+0x82>
 8000b7c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000b80:	d10b      	bne.n	8000b9a <__aeabi_ddiv+0x11e>
 8000b82:	ea41 0100 	orr.w	r1, r1, r0
 8000b86:	f04f 0000 	mov.w	r0, #0
 8000b8a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000b8e:	e7b6      	b.n	8000afe <__aeabi_ddiv+0x82>
 8000b90:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000b94:	bf04      	itt	eq
 8000b96:	4301      	orreq	r1, r0
 8000b98:	2000      	moveq	r0, #0
 8000b9a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000b9e:	bf88      	it	hi
 8000ba0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000ba4:	f63f aeaf 	bhi.w	8000906 <__aeabi_dmul+0xde>
 8000ba8:	ebb5 0c03 	subs.w	ip, r5, r3
 8000bac:	bf04      	itt	eq
 8000bae:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000bb2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000bb6:	f150 0000 	adcs.w	r0, r0, #0
 8000bba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000bbe:	bd70      	pop	{r4, r5, r6, pc}
 8000bc0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000bc4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000bc8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000bcc:	bfc2      	ittt	gt
 8000bce:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000bd2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000bd6:	bd70      	popgt	{r4, r5, r6, pc}
 8000bd8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bdc:	f04f 0e00 	mov.w	lr, #0
 8000be0:	3c01      	subs	r4, #1
 8000be2:	e690      	b.n	8000906 <__aeabi_dmul+0xde>
 8000be4:	ea45 0e06 	orr.w	lr, r5, r6
 8000be8:	e68d      	b.n	8000906 <__aeabi_dmul+0xde>
 8000bea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000bee:	ea94 0f0c 	teq	r4, ip
 8000bf2:	bf08      	it	eq
 8000bf4:	ea95 0f0c 	teqeq	r5, ip
 8000bf8:	f43f af3b 	beq.w	8000a72 <__aeabi_dmul+0x24a>
 8000bfc:	ea94 0f0c 	teq	r4, ip
 8000c00:	d10a      	bne.n	8000c18 <__aeabi_ddiv+0x19c>
 8000c02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000c06:	f47f af34 	bne.w	8000a72 <__aeabi_dmul+0x24a>
 8000c0a:	ea95 0f0c 	teq	r5, ip
 8000c0e:	f47f af25 	bne.w	8000a5c <__aeabi_dmul+0x234>
 8000c12:	4610      	mov	r0, r2
 8000c14:	4619      	mov	r1, r3
 8000c16:	e72c      	b.n	8000a72 <__aeabi_dmul+0x24a>
 8000c18:	ea95 0f0c 	teq	r5, ip
 8000c1c:	d106      	bne.n	8000c2c <__aeabi_ddiv+0x1b0>
 8000c1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000c22:	f43f aefd 	beq.w	8000a20 <__aeabi_dmul+0x1f8>
 8000c26:	4610      	mov	r0, r2
 8000c28:	4619      	mov	r1, r3
 8000c2a:	e722      	b.n	8000a72 <__aeabi_dmul+0x24a>
 8000c2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000c30:	bf18      	it	ne
 8000c32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000c36:	f47f aec5 	bne.w	80009c4 <__aeabi_dmul+0x19c>
 8000c3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000c3e:	f47f af0d 	bne.w	8000a5c <__aeabi_dmul+0x234>
 8000c42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000c46:	f47f aeeb 	bne.w	8000a20 <__aeabi_dmul+0x1f8>
 8000c4a:	e712      	b.n	8000a72 <__aeabi_dmul+0x24a>

08000c4c <__aeabi_d2f>:
 8000c4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c50:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c54:	bf24      	itt	cs
 8000c56:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c5a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c5e:	d90d      	bls.n	8000c7c <__aeabi_d2f+0x30>
 8000c60:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c64:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c68:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c6c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c70:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c74:	bf08      	it	eq
 8000c76:	f020 0001 	biceq.w	r0, r0, #1
 8000c7a:	4770      	bx	lr
 8000c7c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c80:	d121      	bne.n	8000cc6 <__aeabi_d2f+0x7a>
 8000c82:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c86:	bfbc      	itt	lt
 8000c88:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	4770      	bxlt	lr
 8000c8e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c92:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c96:	f1c2 0218 	rsb	r2, r2, #24
 8000c9a:	f1c2 0c20 	rsb	ip, r2, #32
 8000c9e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ca2:	fa20 f002 	lsr.w	r0, r0, r2
 8000ca6:	bf18      	it	ne
 8000ca8:	f040 0001 	orrne.w	r0, r0, #1
 8000cac:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000cb0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000cb4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000cb8:	ea40 000c 	orr.w	r0, r0, ip
 8000cbc:	fa23 f302 	lsr.w	r3, r3, r2
 8000cc0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cc4:	e7cc      	b.n	8000c60 <__aeabi_d2f+0x14>
 8000cc6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cca:	d107      	bne.n	8000cdc <__aeabi_d2f+0x90>
 8000ccc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cd0:	bf1e      	ittt	ne
 8000cd2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cd6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cda:	4770      	bxne	lr
 8000cdc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ce0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ce4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ce8:	4770      	bx	lr
 8000cea:	bf00      	nop

08000cec <__aeabi_uldivmod>:
 8000cec:	b953      	cbnz	r3, 8000d04 <__aeabi_uldivmod+0x18>
 8000cee:	b94a      	cbnz	r2, 8000d04 <__aeabi_uldivmod+0x18>
 8000cf0:	2900      	cmp	r1, #0
 8000cf2:	bf08      	it	eq
 8000cf4:	2800      	cmpeq	r0, #0
 8000cf6:	bf1c      	itt	ne
 8000cf8:	f04f 31ff 	movne.w	r1, #4294967295
 8000cfc:	f04f 30ff 	movne.w	r0, #4294967295
 8000d00:	f000 b982 	b.w	8001008 <__aeabi_idiv0>
 8000d04:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d08:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d0c:	f000 f806 	bl	8000d1c <__udivmoddi4>
 8000d10:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d14:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d18:	b004      	add	sp, #16
 8000d1a:	4770      	bx	lr

08000d1c <__udivmoddi4>:
 8000d1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000d20:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8000d22:	4604      	mov	r4, r0
 8000d24:	460f      	mov	r7, r1
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d148      	bne.n	8000dbc <__udivmoddi4+0xa0>
 8000d2a:	428a      	cmp	r2, r1
 8000d2c:	4694      	mov	ip, r2
 8000d2e:	d961      	bls.n	8000df4 <__udivmoddi4+0xd8>
 8000d30:	fab2 f382 	clz	r3, r2
 8000d34:	b143      	cbz	r3, 8000d48 <__udivmoddi4+0x2c>
 8000d36:	f1c3 0120 	rsb	r1, r3, #32
 8000d3a:	409f      	lsls	r7, r3
 8000d3c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d40:	409c      	lsls	r4, r3
 8000d42:	fa20 f101 	lsr.w	r1, r0, r1
 8000d46:	430f      	orrs	r7, r1
 8000d48:	ea4f 411c 	mov.w	r1, ip, lsr #16
 8000d4c:	fa1f fe8c 	uxth.w	lr, ip
 8000d50:	0c22      	lsrs	r2, r4, #16
 8000d52:	fbb7 f6f1 	udiv	r6, r7, r1
 8000d56:	fb01 7716 	mls	r7, r1, r6, r7
 8000d5a:	fb06 f00e 	mul.w	r0, r6, lr
 8000d5e:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d62:	4290      	cmp	r0, r2
 8000d64:	d908      	bls.n	8000d78 <__udivmoddi4+0x5c>
 8000d66:	eb1c 0202 	adds.w	r2, ip, r2
 8000d6a:	f106 37ff 	add.w	r7, r6, #4294967295
 8000d6e:	d202      	bcs.n	8000d76 <__udivmoddi4+0x5a>
 8000d70:	4290      	cmp	r0, r2
 8000d72:	f200 8137 	bhi.w	8000fe4 <__udivmoddi4+0x2c8>
 8000d76:	463e      	mov	r6, r7
 8000d78:	1a12      	subs	r2, r2, r0
 8000d7a:	b2a4      	uxth	r4, r4
 8000d7c:	fbb2 f0f1 	udiv	r0, r2, r1
 8000d80:	fb01 2210 	mls	r2, r1, r0, r2
 8000d84:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d88:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d8c:	45a6      	cmp	lr, r4
 8000d8e:	d908      	bls.n	8000da2 <__udivmoddi4+0x86>
 8000d90:	eb1c 0404 	adds.w	r4, ip, r4
 8000d94:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d98:	d202      	bcs.n	8000da0 <__udivmoddi4+0x84>
 8000d9a:	45a6      	cmp	lr, r4
 8000d9c:	f200 811c 	bhi.w	8000fd8 <__udivmoddi4+0x2bc>
 8000da0:	4610      	mov	r0, r2
 8000da2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000da6:	eba4 040e 	sub.w	r4, r4, lr
 8000daa:	2600      	movs	r6, #0
 8000dac:	b11d      	cbz	r5, 8000db6 <__udivmoddi4+0x9a>
 8000dae:	40dc      	lsrs	r4, r3
 8000db0:	2300      	movs	r3, #0
 8000db2:	e9c5 4300 	strd	r4, r3, [r5]
 8000db6:	4631      	mov	r1, r6
 8000db8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000dbc:	428b      	cmp	r3, r1
 8000dbe:	d909      	bls.n	8000dd4 <__udivmoddi4+0xb8>
 8000dc0:	2d00      	cmp	r5, #0
 8000dc2:	f000 80fd 	beq.w	8000fc0 <__udivmoddi4+0x2a4>
 8000dc6:	2600      	movs	r6, #0
 8000dc8:	e9c5 0100 	strd	r0, r1, [r5]
 8000dcc:	4630      	mov	r0, r6
 8000dce:	4631      	mov	r1, r6
 8000dd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000dd4:	fab3 f683 	clz	r6, r3
 8000dd8:	2e00      	cmp	r6, #0
 8000dda:	d14b      	bne.n	8000e74 <__udivmoddi4+0x158>
 8000ddc:	428b      	cmp	r3, r1
 8000dde:	f0c0 80f2 	bcc.w	8000fc6 <__udivmoddi4+0x2aa>
 8000de2:	4282      	cmp	r2, r0
 8000de4:	f240 80ef 	bls.w	8000fc6 <__udivmoddi4+0x2aa>
 8000de8:	4630      	mov	r0, r6
 8000dea:	2d00      	cmp	r5, #0
 8000dec:	d0e3      	beq.n	8000db6 <__udivmoddi4+0x9a>
 8000dee:	e9c5 4700 	strd	r4, r7, [r5]
 8000df2:	e7e0      	b.n	8000db6 <__udivmoddi4+0x9a>
 8000df4:	b902      	cbnz	r2, 8000df8 <__udivmoddi4+0xdc>
 8000df6:	deff      	udf	#255	; 0xff
 8000df8:	fab2 f382 	clz	r3, r2
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	f040 809d 	bne.w	8000f3c <__udivmoddi4+0x220>
 8000e02:	1a89      	subs	r1, r1, r2
 8000e04:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8000e08:	b297      	uxth	r7, r2
 8000e0a:	2601      	movs	r6, #1
 8000e0c:	0c20      	lsrs	r0, r4, #16
 8000e0e:	fbb1 f2fe 	udiv	r2, r1, lr
 8000e12:	fb0e 1112 	mls	r1, lr, r2, r1
 8000e16:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e1a:	fb07 f002 	mul.w	r0, r7, r2
 8000e1e:	4288      	cmp	r0, r1
 8000e20:	d90f      	bls.n	8000e42 <__udivmoddi4+0x126>
 8000e22:	eb1c 0101 	adds.w	r1, ip, r1
 8000e26:	f102 38ff 	add.w	r8, r2, #4294967295
 8000e2a:	bf2c      	ite	cs
 8000e2c:	f04f 0901 	movcs.w	r9, #1
 8000e30:	f04f 0900 	movcc.w	r9, #0
 8000e34:	4288      	cmp	r0, r1
 8000e36:	d903      	bls.n	8000e40 <__udivmoddi4+0x124>
 8000e38:	f1b9 0f00 	cmp.w	r9, #0
 8000e3c:	f000 80cf 	beq.w	8000fde <__udivmoddi4+0x2c2>
 8000e40:	4642      	mov	r2, r8
 8000e42:	1a09      	subs	r1, r1, r0
 8000e44:	b2a4      	uxth	r4, r4
 8000e46:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e4a:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e4e:	fb00 f707 	mul.w	r7, r0, r7
 8000e52:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e56:	42a7      	cmp	r7, r4
 8000e58:	d908      	bls.n	8000e6c <__udivmoddi4+0x150>
 8000e5a:	eb1c 0404 	adds.w	r4, ip, r4
 8000e5e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e62:	d202      	bcs.n	8000e6a <__udivmoddi4+0x14e>
 8000e64:	42a7      	cmp	r7, r4
 8000e66:	f200 80b4 	bhi.w	8000fd2 <__udivmoddi4+0x2b6>
 8000e6a:	4608      	mov	r0, r1
 8000e6c:	1be4      	subs	r4, r4, r7
 8000e6e:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8000e72:	e79b      	b.n	8000dac <__udivmoddi4+0x90>
 8000e74:	f1c6 0720 	rsb	r7, r6, #32
 8000e78:	40b3      	lsls	r3, r6
 8000e7a:	fa01 f406 	lsl.w	r4, r1, r6
 8000e7e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e82:	40f9      	lsrs	r1, r7
 8000e84:	40b2      	lsls	r2, r6
 8000e86:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e8a:	fa20 f307 	lsr.w	r3, r0, r7
 8000e8e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e92:	431c      	orrs	r4, r3
 8000e94:	fa1f fe8c 	uxth.w	lr, ip
 8000e98:	fa00 f306 	lsl.w	r3, r0, r6
 8000e9c:	0c20      	lsrs	r0, r4, #16
 8000e9e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000ea2:	fb09 1118 	mls	r1, r9, r8, r1
 8000ea6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000eaa:	fb08 f00e 	mul.w	r0, r8, lr
 8000eae:	4288      	cmp	r0, r1
 8000eb0:	d90f      	bls.n	8000ed2 <__udivmoddi4+0x1b6>
 8000eb2:	eb1c 0101 	adds.w	r1, ip, r1
 8000eb6:	f108 3aff 	add.w	sl, r8, #4294967295
 8000eba:	bf2c      	ite	cs
 8000ebc:	f04f 0b01 	movcs.w	fp, #1
 8000ec0:	f04f 0b00 	movcc.w	fp, #0
 8000ec4:	4288      	cmp	r0, r1
 8000ec6:	d903      	bls.n	8000ed0 <__udivmoddi4+0x1b4>
 8000ec8:	f1bb 0f00 	cmp.w	fp, #0
 8000ecc:	f000 808d 	beq.w	8000fea <__udivmoddi4+0x2ce>
 8000ed0:	46d0      	mov	r8, sl
 8000ed2:	1a09      	subs	r1, r1, r0
 8000ed4:	b2a4      	uxth	r4, r4
 8000ed6:	fbb1 f0f9 	udiv	r0, r1, r9
 8000eda:	fb09 1110 	mls	r1, r9, r0, r1
 8000ede:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ee2:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000ee6:	458e      	cmp	lr, r1
 8000ee8:	d907      	bls.n	8000efa <__udivmoddi4+0x1de>
 8000eea:	eb1c 0101 	adds.w	r1, ip, r1
 8000eee:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ef2:	d201      	bcs.n	8000ef8 <__udivmoddi4+0x1dc>
 8000ef4:	458e      	cmp	lr, r1
 8000ef6:	d87f      	bhi.n	8000ff8 <__udivmoddi4+0x2dc>
 8000ef8:	4620      	mov	r0, r4
 8000efa:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000efe:	eba1 010e 	sub.w	r1, r1, lr
 8000f02:	fba0 9802 	umull	r9, r8, r0, r2
 8000f06:	4541      	cmp	r1, r8
 8000f08:	464c      	mov	r4, r9
 8000f0a:	46c6      	mov	lr, r8
 8000f0c:	d302      	bcc.n	8000f14 <__udivmoddi4+0x1f8>
 8000f0e:	d106      	bne.n	8000f1e <__udivmoddi4+0x202>
 8000f10:	454b      	cmp	r3, r9
 8000f12:	d204      	bcs.n	8000f1e <__udivmoddi4+0x202>
 8000f14:	3801      	subs	r0, #1
 8000f16:	ebb9 0402 	subs.w	r4, r9, r2
 8000f1a:	eb68 0e0c 	sbc.w	lr, r8, ip
 8000f1e:	2d00      	cmp	r5, #0
 8000f20:	d070      	beq.n	8001004 <__udivmoddi4+0x2e8>
 8000f22:	1b1a      	subs	r2, r3, r4
 8000f24:	eb61 010e 	sbc.w	r1, r1, lr
 8000f28:	fa22 f306 	lsr.w	r3, r2, r6
 8000f2c:	fa01 f707 	lsl.w	r7, r1, r7
 8000f30:	40f1      	lsrs	r1, r6
 8000f32:	2600      	movs	r6, #0
 8000f34:	431f      	orrs	r7, r3
 8000f36:	e9c5 7100 	strd	r7, r1, [r5]
 8000f3a:	e73c      	b.n	8000db6 <__udivmoddi4+0x9a>
 8000f3c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f40:	f1c3 0020 	rsb	r0, r3, #32
 8000f44:	fa01 f203 	lsl.w	r2, r1, r3
 8000f48:	fa21 f600 	lsr.w	r6, r1, r0
 8000f4c:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000f50:	fa24 f100 	lsr.w	r1, r4, r0
 8000f54:	fa1f f78c 	uxth.w	r7, ip
 8000f58:	409c      	lsls	r4, r3
 8000f5a:	4311      	orrs	r1, r2
 8000f5c:	fbb6 f0fe 	udiv	r0, r6, lr
 8000f60:	0c0a      	lsrs	r2, r1, #16
 8000f62:	fb0e 6610 	mls	r6, lr, r0, r6
 8000f66:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 8000f6a:	fb00 f607 	mul.w	r6, r0, r7
 8000f6e:	4296      	cmp	r6, r2
 8000f70:	d90e      	bls.n	8000f90 <__udivmoddi4+0x274>
 8000f72:	eb1c 0202 	adds.w	r2, ip, r2
 8000f76:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f7a:	bf2c      	ite	cs
 8000f7c:	f04f 0901 	movcs.w	r9, #1
 8000f80:	f04f 0900 	movcc.w	r9, #0
 8000f84:	4296      	cmp	r6, r2
 8000f86:	d902      	bls.n	8000f8e <__udivmoddi4+0x272>
 8000f88:	f1b9 0f00 	cmp.w	r9, #0
 8000f8c:	d031      	beq.n	8000ff2 <__udivmoddi4+0x2d6>
 8000f8e:	4640      	mov	r0, r8
 8000f90:	1b92      	subs	r2, r2, r6
 8000f92:	b289      	uxth	r1, r1
 8000f94:	fbb2 f6fe 	udiv	r6, r2, lr
 8000f98:	fb0e 2216 	mls	r2, lr, r6, r2
 8000f9c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8000fa0:	fb06 f207 	mul.w	r2, r6, r7
 8000fa4:	428a      	cmp	r2, r1
 8000fa6:	d907      	bls.n	8000fb8 <__udivmoddi4+0x29c>
 8000fa8:	eb1c 0101 	adds.w	r1, ip, r1
 8000fac:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fb0:	d201      	bcs.n	8000fb6 <__udivmoddi4+0x29a>
 8000fb2:	428a      	cmp	r2, r1
 8000fb4:	d823      	bhi.n	8000ffe <__udivmoddi4+0x2e2>
 8000fb6:	4646      	mov	r6, r8
 8000fb8:	1a89      	subs	r1, r1, r2
 8000fba:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fbe:	e725      	b.n	8000e0c <__udivmoddi4+0xf0>
 8000fc0:	462e      	mov	r6, r5
 8000fc2:	4628      	mov	r0, r5
 8000fc4:	e6f7      	b.n	8000db6 <__udivmoddi4+0x9a>
 8000fc6:	1a84      	subs	r4, r0, r2
 8000fc8:	eb61 0303 	sbc.w	r3, r1, r3
 8000fcc:	2001      	movs	r0, #1
 8000fce:	461f      	mov	r7, r3
 8000fd0:	e70b      	b.n	8000dea <__udivmoddi4+0xce>
 8000fd2:	4464      	add	r4, ip
 8000fd4:	3802      	subs	r0, #2
 8000fd6:	e749      	b.n	8000e6c <__udivmoddi4+0x150>
 8000fd8:	4464      	add	r4, ip
 8000fda:	3802      	subs	r0, #2
 8000fdc:	e6e1      	b.n	8000da2 <__udivmoddi4+0x86>
 8000fde:	3a02      	subs	r2, #2
 8000fe0:	4461      	add	r1, ip
 8000fe2:	e72e      	b.n	8000e42 <__udivmoddi4+0x126>
 8000fe4:	3e02      	subs	r6, #2
 8000fe6:	4462      	add	r2, ip
 8000fe8:	e6c6      	b.n	8000d78 <__udivmoddi4+0x5c>
 8000fea:	f1a8 0802 	sub.w	r8, r8, #2
 8000fee:	4461      	add	r1, ip
 8000ff0:	e76f      	b.n	8000ed2 <__udivmoddi4+0x1b6>
 8000ff2:	3802      	subs	r0, #2
 8000ff4:	4462      	add	r2, ip
 8000ff6:	e7cb      	b.n	8000f90 <__udivmoddi4+0x274>
 8000ff8:	3802      	subs	r0, #2
 8000ffa:	4461      	add	r1, ip
 8000ffc:	e77d      	b.n	8000efa <__udivmoddi4+0x1de>
 8000ffe:	3e02      	subs	r6, #2
 8001000:	4461      	add	r1, ip
 8001002:	e7d9      	b.n	8000fb8 <__udivmoddi4+0x29c>
 8001004:	462e      	mov	r6, r5
 8001006:	e6d6      	b.n	8000db6 <__udivmoddi4+0x9a>

08001008 <__aeabi_idiv0>:
 8001008:	4770      	bx	lr
 800100a:	bf00      	nop

0800100c <tx_application_define>:
  * @brief  Define the initial system.
  * @param  first_unused_memory : Pointer to the first unused memory
  * @retval None
  */
VOID tx_application_define(VOID *first_unused_memory)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b086      	sub	sp, #24
 8001010:	af02      	add	r7, sp, #8
 8001012:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN  tx_application_define_1*/

  /* USER CODE END  tx_application_define_1 */
#if (USE_STATIC_ALLOCATION == 1)
  UINT status = TX_SUCCESS;
 8001014:	2300      	movs	r3, #0
 8001016:	60fb      	str	r3, [r7, #12]
  VOID *memory_ptr;

  if (tx_byte_pool_create(&tx_app_byte_pool, "Tx App memory pool", tx_byte_pool_buffer, TX_APP_MEM_POOL_SIZE) != TX_SUCCESS)
 8001018:	2334      	movs	r3, #52	; 0x34
 800101a:	9300      	str	r3, [sp, #0]
 800101c:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 8001020:	4a15      	ldr	r2, [pc, #84]	; (8001078 <tx_application_define+0x6c>)
 8001022:	4916      	ldr	r1, [pc, #88]	; (800107c <tx_application_define+0x70>)
 8001024:	4816      	ldr	r0, [pc, #88]	; (8001080 <tx_application_define+0x74>)
 8001026:	f012 faad 	bl	8013584 <_txe_byte_pool_create>
 800102a:	4603      	mov	r3, r0
 800102c:	2b00      	cmp	r3, #0
 800102e:	d109      	bne.n	8001044 <tx_application_define+0x38>
  {
    /* USER CODE BEGIN TX_Byte_Pool_Success */

    /* USER CODE END TX_Byte_Pool_Success */

    memory_ptr = (VOID *)&tx_app_byte_pool;
 8001030:	4b13      	ldr	r3, [pc, #76]	; (8001080 <tx_application_define+0x74>)
 8001032:	60bb      	str	r3, [r7, #8]
    status = App_ThreadX_Init(memory_ptr);
 8001034:	68b8      	ldr	r0, [r7, #8]
 8001036:	f003 fbbd 	bl	80047b4 <App_ThreadX_Init>
 800103a:	60f8      	str	r0, [r7, #12]
    if (status != TX_SUCCESS)
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	2b00      	cmp	r3, #0
 8001040:	d000      	beq.n	8001044 <tx_application_define+0x38>
    {
      /* USER CODE BEGIN  App_ThreadX_Init_Error */
      while(1)
 8001042:	e7fe      	b.n	8001042 <tx_application_define+0x36>

    /* USER CODE END  App_ThreadX_Init_Success */

  }

  if (tx_byte_pool_create(&nx_app_byte_pool, "Nx App memory pool", nx_byte_pool_buffer, NX_APP_MEM_POOL_SIZE) != TX_SUCCESS)
 8001044:	2334      	movs	r3, #52	; 0x34
 8001046:	9300      	str	r3, [sp, #0]
 8001048:	f44f 33c8 	mov.w	r3, #102400	; 0x19000
 800104c:	4a0d      	ldr	r2, [pc, #52]	; (8001084 <tx_application_define+0x78>)
 800104e:	490e      	ldr	r1, [pc, #56]	; (8001088 <tx_application_define+0x7c>)
 8001050:	480e      	ldr	r0, [pc, #56]	; (800108c <tx_application_define+0x80>)
 8001052:	f012 fa97 	bl	8013584 <_txe_byte_pool_create>
 8001056:	4603      	mov	r3, r0
 8001058:	2b00      	cmp	r3, #0
 800105a:	d109      	bne.n	8001070 <tx_application_define+0x64>
  {
    /* USER CODE BEGIN TX_Byte_Pool_Success */

    /* USER CODE END TX_Byte_Pool_Success */

    memory_ptr = (VOID *)&nx_app_byte_pool;
 800105c:	4b0b      	ldr	r3, [pc, #44]	; (800108c <tx_application_define+0x80>)
 800105e:	60bb      	str	r3, [r7, #8]
    status = MX_NetXDuo_Init(memory_ptr);
 8001060:	68b8      	ldr	r0, [r7, #8]
 8001062:	f012 fea1 	bl	8013da8 <MX_NetXDuo_Init>
 8001066:	60f8      	str	r0, [r7, #12]
    if (status != NX_SUCCESS)
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	2b00      	cmp	r3, #0
 800106c:	d000      	beq.n	8001070 <tx_application_define+0x64>
    {
      /* USER CODE BEGIN  MX_NetXDuo_Init_Error */
      while(1)
 800106e:	e7fe      	b.n	800106e <tx_application_define+0x62>
  /* USER CODE BEGIN DYNAMIC_MEM_ALLOC */
  (void)first_unused_memory;
  /* USER CODE END DYNAMIC_MEM_ALLOC */
#endif

}
 8001070:	bf00      	nop
 8001072:	3710      	adds	r7, #16
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}
 8001078:	20000090 	.word	0x20000090
 800107c:	0801483c 	.word	0x0801483c
 8001080:	20002c90 	.word	0x20002c90
 8001084:	20002cc4 	.word	0x20002cc4
 8001088:	08014850 	.word	0x08014850
 800108c:	2001bcc4 	.word	0x2001bcc4

08001090 <BSP_I2C1_Init>:
#define i2c_initialized (1)
#define i2c_uninitialized (0)


void BSP_I2C1_Init(void)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	af00      	add	r7, sp, #0
	if(hi2c1.State == HAL_I2C_STATE_RESET)
 8001094:	4b04      	ldr	r3, [pc, #16]	; (80010a8 <BSP_I2C1_Init+0x18>)
 8001096:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800109a:	b2db      	uxtb	r3, r3
 800109c:	2b00      	cmp	r3, #0
 800109e:	d101      	bne.n	80010a4 <BSP_I2C1_Init+0x14>
	{
        I2C1_Init();
 80010a0:	f004 fdf6 	bl	8005c90 <I2C1_Init>
	}
}
 80010a4:	bf00      	nop
 80010a6:	bd80      	pop	{r7, pc}
 80010a8:	2001c69c 	.word	0x2001c69c

080010ac <BSP_I2C1_DeInit>:

void BSP_I2C1_DeInit(void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	af00      	add	r7, sp, #0
	HAL_I2C_DeInit(&hi2c1);
 80010b0:	4802      	ldr	r0, [pc, #8]	; (80010bc <BSP_I2C1_DeInit+0x10>)
 80010b2:	f008 fac6 	bl	8009642 <HAL_I2C_DeInit>
}
 80010b6:	bf00      	nop
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	bf00      	nop
 80010bc:	2001c69c 	.word	0x2001c69c

080010c0 <BSP_I2C2_Init>:

void BSP_I2C2_Init(void)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	af00      	add	r7, sp, #0
	if(hi2c2.State == HAL_I2C_STATE_RESET)
 80010c4:	4b04      	ldr	r3, [pc, #16]	; (80010d8 <BSP_I2C2_Init+0x18>)
 80010c6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80010ca:	b2db      	uxtb	r3, r3
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d101      	bne.n	80010d4 <BSP_I2C2_Init+0x14>
	{
        I2C2_Init();
 80010d0:	f004 fe1e 	bl	8005d10 <I2C2_Init>
	}
}
 80010d4:	bf00      	nop
 80010d6:	bd80      	pop	{r7, pc}
 80010d8:	2001c6e8 	.word	0x2001c6e8

080010dc <BSP_I2C2_DeInit>:

void BSP_I2C2_DeInit(void)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	af00      	add	r7, sp, #0
	HAL_I2C_DeInit(&hi2c2);
 80010e0:	4802      	ldr	r0, [pc, #8]	; (80010ec <BSP_I2C2_DeInit+0x10>)
 80010e2:	f008 faae 	bl	8009642 <HAL_I2C_DeInit>
}
 80010e6:	bf00      	nop
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	2001c6e8 	.word	0x2001c6e8

080010f0 <BSP_I2C1_WriteReg16>:
int32_t BSP_I2C1_ReadReg(uint16_t Address, uint16_t Reg, uint8_t *pData, uint16_t Length){
    int32_t ret = HAL_I2C_Mem_Read(&hi2c1, Address, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length, 1000);
    return ret;
}

int32_t BSP_I2C1_WriteReg16(uint16_t Address, uint16_t Reg, uint8_t *pData, uint16_t Length){
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b08a      	sub	sp, #40	; 0x28
 80010f4:	af04      	add	r7, sp, #16
 80010f6:	60ba      	str	r2, [r7, #8]
 80010f8:	461a      	mov	r2, r3
 80010fa:	4603      	mov	r3, r0
 80010fc:	81fb      	strh	r3, [r7, #14]
 80010fe:	460b      	mov	r3, r1
 8001100:	81bb      	strh	r3, [r7, #12]
 8001102:	4613      	mov	r3, r2
 8001104:	80fb      	strh	r3, [r7, #6]
    int32_t ret = HAL_I2C_Mem_Write(&hi2c1, Address, Reg, I2C_MEMADD_SIZE_16BIT, pData, Length, 1000);
 8001106:	89ba      	ldrh	r2, [r7, #12]
 8001108:	89f9      	ldrh	r1, [r7, #14]
 800110a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800110e:	9302      	str	r3, [sp, #8]
 8001110:	88fb      	ldrh	r3, [r7, #6]
 8001112:	9301      	str	r3, [sp, #4]
 8001114:	68bb      	ldr	r3, [r7, #8]
 8001116:	9300      	str	r3, [sp, #0]
 8001118:	2302      	movs	r3, #2
 800111a:	4805      	ldr	r0, [pc, #20]	; (8001130 <BSP_I2C1_WriteReg16+0x40>)
 800111c:	f008 fac0 	bl	80096a0 <HAL_I2C_Mem_Write>
 8001120:	4603      	mov	r3, r0
 8001122:	617b      	str	r3, [r7, #20]
    return ret;
 8001124:	697b      	ldr	r3, [r7, #20]
}
 8001126:	4618      	mov	r0, r3
 8001128:	3718      	adds	r7, #24
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}
 800112e:	bf00      	nop
 8001130:	2001c69c 	.word	0x2001c69c

08001134 <BSP_I2C1_ReadReg16>:

int32_t BSP_I2C1_ReadReg16(uint16_t Address, uint16_t Reg, uint8_t *pData, uint16_t Length){
 8001134:	b580      	push	{r7, lr}
 8001136:	b08a      	sub	sp, #40	; 0x28
 8001138:	af04      	add	r7, sp, #16
 800113a:	60ba      	str	r2, [r7, #8]
 800113c:	461a      	mov	r2, r3
 800113e:	4603      	mov	r3, r0
 8001140:	81fb      	strh	r3, [r7, #14]
 8001142:	460b      	mov	r3, r1
 8001144:	81bb      	strh	r3, [r7, #12]
 8001146:	4613      	mov	r3, r2
 8001148:	80fb      	strh	r3, [r7, #6]
    int32_t ret = HAL_I2C_Mem_Read(&hi2c1, Address, Reg, I2C_MEMADD_SIZE_16BIT, pData, Length, 1000);
 800114a:	89ba      	ldrh	r2, [r7, #12]
 800114c:	89f9      	ldrh	r1, [r7, #14]
 800114e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001152:	9302      	str	r3, [sp, #8]
 8001154:	88fb      	ldrh	r3, [r7, #6]
 8001156:	9301      	str	r3, [sp, #4]
 8001158:	68bb      	ldr	r3, [r7, #8]
 800115a:	9300      	str	r3, [sp, #0]
 800115c:	2302      	movs	r3, #2
 800115e:	4805      	ldr	r0, [pc, #20]	; (8001174 <BSP_I2C1_ReadReg16+0x40>)
 8001160:	f008 fbb2 	bl	80098c8 <HAL_I2C_Mem_Read>
 8001164:	4603      	mov	r3, r0
 8001166:	617b      	str	r3, [r7, #20]
    return ret;
 8001168:	697b      	ldr	r3, [r7, #20]
}
 800116a:	4618      	mov	r0, r3
 800116c:	3718      	adds	r7, #24
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}
 8001172:	bf00      	nop
 8001174:	2001c69c 	.word	0x2001c69c

08001178 <BSP_I2C2_WriteRegHTS221>:

int32_t BSP_I2C2_WriteRegHTS221(uint8_t Reg, uint8_t *pData, uint8_t Length){
 8001178:	b580      	push	{r7, lr}
 800117a:	b088      	sub	sp, #32
 800117c:	af04      	add	r7, sp, #16
 800117e:	4603      	mov	r3, r0
 8001180:	6039      	str	r1, [r7, #0]
 8001182:	71fb      	strb	r3, [r7, #7]
 8001184:	4613      	mov	r3, r2
 8001186:	71bb      	strb	r3, [r7, #6]
    int32_t ret = HAL_I2C_Mem_Write(&hi2c2, HTS221_I2C_ADDR, Reg | 0x80, I2C_MEMADD_SIZE_8BIT, pData, Length, 100);
 8001188:	79fb      	ldrb	r3, [r7, #7]
 800118a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800118e:	b2db      	uxtb	r3, r3
 8001190:	b29a      	uxth	r2, r3
 8001192:	79bb      	ldrb	r3, [r7, #6]
 8001194:	b29b      	uxth	r3, r3
 8001196:	2164      	movs	r1, #100	; 0x64
 8001198:	9102      	str	r1, [sp, #8]
 800119a:	9301      	str	r3, [sp, #4]
 800119c:	683b      	ldr	r3, [r7, #0]
 800119e:	9300      	str	r3, [sp, #0]
 80011a0:	2301      	movs	r3, #1
 80011a2:	21be      	movs	r1, #190	; 0xbe
 80011a4:	4804      	ldr	r0, [pc, #16]	; (80011b8 <BSP_I2C2_WriteRegHTS221+0x40>)
 80011a6:	f008 fa7b 	bl	80096a0 <HAL_I2C_Mem_Write>
 80011aa:	4603      	mov	r3, r0
 80011ac:	60fb      	str	r3, [r7, #12]
    return ret;
 80011ae:	68fb      	ldr	r3, [r7, #12]
}
 80011b0:	4618      	mov	r0, r3
 80011b2:	3710      	adds	r7, #16
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bd80      	pop	{r7, pc}
 80011b8:	2001c6e8 	.word	0x2001c6e8

080011bc <BSP_I2C2_ReadRegHTS221>:

int32_t BSP_I2C2_ReadRegHTS221(uint8_t Reg, uint8_t *pData, uint8_t Length){
 80011bc:	b580      	push	{r7, lr}
 80011be:	b088      	sub	sp, #32
 80011c0:	af04      	add	r7, sp, #16
 80011c2:	4603      	mov	r3, r0
 80011c4:	6039      	str	r1, [r7, #0]
 80011c6:	71fb      	strb	r3, [r7, #7]
 80011c8:	4613      	mov	r3, r2
 80011ca:	71bb      	strb	r3, [r7, #6]
    int32_t ret = HAL_I2C_Mem_Read(&hi2c2, HTS221_I2C_ADDR, Reg | 0x80, I2C_MEMADD_SIZE_8BIT, pData, Length, 100);
 80011cc:	79fb      	ldrb	r3, [r7, #7]
 80011ce:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80011d2:	b2db      	uxtb	r3, r3
 80011d4:	b29a      	uxth	r2, r3
 80011d6:	79bb      	ldrb	r3, [r7, #6]
 80011d8:	b29b      	uxth	r3, r3
 80011da:	2164      	movs	r1, #100	; 0x64
 80011dc:	9102      	str	r1, [sp, #8]
 80011de:	9301      	str	r3, [sp, #4]
 80011e0:	683b      	ldr	r3, [r7, #0]
 80011e2:	9300      	str	r3, [sp, #0]
 80011e4:	2301      	movs	r3, #1
 80011e6:	21be      	movs	r1, #190	; 0xbe
 80011e8:	4804      	ldr	r0, [pc, #16]	; (80011fc <BSP_I2C2_ReadRegHTS221+0x40>)
 80011ea:	f008 fb6d 	bl	80098c8 <HAL_I2C_Mem_Read>
 80011ee:	4603      	mov	r3, r0
 80011f0:	60fb      	str	r3, [r7, #12]
    return ret;
 80011f2:	68fb      	ldr	r3, [r7, #12]
}
 80011f4:	4618      	mov	r0, r3
 80011f6:	3710      	adds	r7, #16
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bd80      	pop	{r7, pc}
 80011fc:	2001c6e8 	.word	0x2001c6e8

08001200 <BSP_I2C2_ReadRegISM330DHCX>:

int32_t BSP_I2C2_ReadRegISM330DHCX(uint8_t Reg, uint8_t *pData, uint8_t Length)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b088      	sub	sp, #32
 8001204:	af04      	add	r7, sp, #16
 8001206:	4603      	mov	r3, r0
 8001208:	6039      	str	r1, [r7, #0]
 800120a:	71fb      	strb	r3, [r7, #7]
 800120c:	4613      	mov	r3, r2
 800120e:	71bb      	strb	r3, [r7, #6]
	int32_t ret = HAL_I2C_Mem_Read(&hi2c2, ISM330DHCX_I2C_ADDR, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length, 100);
 8001210:	79fb      	ldrb	r3, [r7, #7]
 8001212:	b29a      	uxth	r2, r3
 8001214:	79bb      	ldrb	r3, [r7, #6]
 8001216:	b29b      	uxth	r3, r3
 8001218:	2164      	movs	r1, #100	; 0x64
 800121a:	9102      	str	r1, [sp, #8]
 800121c:	9301      	str	r3, [sp, #4]
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	9300      	str	r3, [sp, #0]
 8001222:	2301      	movs	r3, #1
 8001224:	21d6      	movs	r1, #214	; 0xd6
 8001226:	4805      	ldr	r0, [pc, #20]	; (800123c <BSP_I2C2_ReadRegISM330DHCX+0x3c>)
 8001228:	f008 fb4e 	bl	80098c8 <HAL_I2C_Mem_Read>
 800122c:	4603      	mov	r3, r0
 800122e:	60fb      	str	r3, [r7, #12]
    return ret;
 8001230:	68fb      	ldr	r3, [r7, #12]
}
 8001232:	4618      	mov	r0, r3
 8001234:	3710      	adds	r7, #16
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}
 800123a:	bf00      	nop
 800123c:	2001c6e8 	.word	0x2001c6e8

08001240 <BSP_I2C2_WriteRegISM330DHCX>:

int32_t BSP_I2C2_WriteRegISM330DHCX(uint8_t Reg, uint8_t *pData, uint8_t Length)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b088      	sub	sp, #32
 8001244:	af04      	add	r7, sp, #16
 8001246:	4603      	mov	r3, r0
 8001248:	6039      	str	r1, [r7, #0]
 800124a:	71fb      	strb	r3, [r7, #7]
 800124c:	4613      	mov	r3, r2
 800124e:	71bb      	strb	r3, [r7, #6]
	int32_t ret = HAL_I2C_Mem_Write(&hi2c2, ISM330DHCX_I2C_ADDR, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length, 100);
 8001250:	79fb      	ldrb	r3, [r7, #7]
 8001252:	b29a      	uxth	r2, r3
 8001254:	79bb      	ldrb	r3, [r7, #6]
 8001256:	b29b      	uxth	r3, r3
 8001258:	2164      	movs	r1, #100	; 0x64
 800125a:	9102      	str	r1, [sp, #8]
 800125c:	9301      	str	r3, [sp, #4]
 800125e:	683b      	ldr	r3, [r7, #0]
 8001260:	9300      	str	r3, [sp, #0]
 8001262:	2301      	movs	r3, #1
 8001264:	21d6      	movs	r1, #214	; 0xd6
 8001266:	4805      	ldr	r0, [pc, #20]	; (800127c <BSP_I2C2_WriteRegISM330DHCX+0x3c>)
 8001268:	f008 fa1a 	bl	80096a0 <HAL_I2C_Mem_Write>
 800126c:	4603      	mov	r3, r0
 800126e:	60fb      	str	r3, [r7, #12]
    return ret;
 8001270:	68fb      	ldr	r3, [r7, #12]
}
 8001272:	4618      	mov	r0, r3
 8001274:	3710      	adds	r7, #16
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	2001c6e8 	.word	0x2001c6e8

08001280 <BSP_ReadPinISM330DHCX>:

int32_t BSP_ReadPinISM330DHCX(void)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	af00      	add	r7, sp, #0
    return HAL_GPIO_ReadPin(Mems_ISM330DLC_INT1_GPIO_Port, Mems_ISM330DLC_INT1_Pin);
 8001284:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001288:	4802      	ldr	r0, [pc, #8]	; (8001294 <BSP_ReadPinISM330DHCX+0x14>)
 800128a:	f008 f901 	bl	8009490 <HAL_GPIO_ReadPin>
 800128e:	4603      	mov	r3, r0
}
 8001290:	4618      	mov	r0, r3
 8001292:	bd80      	pop	{r7, pc}
 8001294:	42021000 	.word	0x42021000

08001298 <BSP_ISM330DHCX_IO_Init>:

void BSP_ISM330DHCX_IO_Init(void)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	af00      	add	r7, sp, #0
    MotionSensor_GPIO_Init();
 800129c:	f004 fb12 	bl	80058c4 <MotionSensor_GPIO_Init>
	BSP_I2C2_Init();
 80012a0:	f7ff ff0e 	bl	80010c0 <BSP_I2C2_Init>
}
 80012a4:	bf00      	nop
 80012a6:	bd80      	pop	{r7, pc}

080012a8 <BSP_LPS22HH_IO_Init>:

void BSP_LPS22HH_IO_Init(void)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	af00      	add	r7, sp, #0
	PressureSensor_GPIO_Init();
 80012ac:	f004 fb2a 	bl	8005904 <PressureSensor_GPIO_Init>
	BSP_I2C2_Init();
 80012b0:	f7ff ff06 	bl	80010c0 <BSP_I2C2_Init>
}
 80012b4:	bf00      	nop
 80012b6:	bd80      	pop	{r7, pc}

080012b8 <BSP_I2C2_ReadRegLPS22HH>:

int32_t BSP_I2C2_ReadRegLPS22HH(uint8_t Reg, uint8_t *pData, uint8_t Length)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b088      	sub	sp, #32
 80012bc:	af04      	add	r7, sp, #16
 80012be:	4603      	mov	r3, r0
 80012c0:	6039      	str	r1, [r7, #0]
 80012c2:	71fb      	strb	r3, [r7, #7]
 80012c4:	4613      	mov	r3, r2
 80012c6:	71bb      	strb	r3, [r7, #6]
	int32_t ret = HAL_I2C_Mem_Read(&hi2c2, LPS22HH_I2C_ADDR, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length, 100);
 80012c8:	79fb      	ldrb	r3, [r7, #7]
 80012ca:	b29a      	uxth	r2, r3
 80012cc:	79bb      	ldrb	r3, [r7, #6]
 80012ce:	b29b      	uxth	r3, r3
 80012d0:	2164      	movs	r1, #100	; 0x64
 80012d2:	9102      	str	r1, [sp, #8]
 80012d4:	9301      	str	r3, [sp, #4]
 80012d6:	683b      	ldr	r3, [r7, #0]
 80012d8:	9300      	str	r3, [sp, #0]
 80012da:	2301      	movs	r3, #1
 80012dc:	21ba      	movs	r1, #186	; 0xba
 80012de:	4805      	ldr	r0, [pc, #20]	; (80012f4 <BSP_I2C2_ReadRegLPS22HH+0x3c>)
 80012e0:	f008 faf2 	bl	80098c8 <HAL_I2C_Mem_Read>
 80012e4:	4603      	mov	r3, r0
 80012e6:	60fb      	str	r3, [r7, #12]
    return ret;
 80012e8:	68fb      	ldr	r3, [r7, #12]
}
 80012ea:	4618      	mov	r0, r3
 80012ec:	3710      	adds	r7, #16
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bd80      	pop	{r7, pc}
 80012f2:	bf00      	nop
 80012f4:	2001c6e8 	.word	0x2001c6e8

080012f8 <BSP_I2C2_WriteRegLPS22HH>:

int32_t BSP_I2C2_WriteRegLPS22HH(uint8_t Reg, uint8_t *pData, uint8_t Length)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b088      	sub	sp, #32
 80012fc:	af04      	add	r7, sp, #16
 80012fe:	4603      	mov	r3, r0
 8001300:	6039      	str	r1, [r7, #0]
 8001302:	71fb      	strb	r3, [r7, #7]
 8001304:	4613      	mov	r3, r2
 8001306:	71bb      	strb	r3, [r7, #6]
	int32_t ret = HAL_I2C_Mem_Write(&hi2c2, LPS22HH_I2C_ADDR, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length, 100);
 8001308:	79fb      	ldrb	r3, [r7, #7]
 800130a:	b29a      	uxth	r2, r3
 800130c:	79bb      	ldrb	r3, [r7, #6]
 800130e:	b29b      	uxth	r3, r3
 8001310:	2164      	movs	r1, #100	; 0x64
 8001312:	9102      	str	r1, [sp, #8]
 8001314:	9301      	str	r3, [sp, #4]
 8001316:	683b      	ldr	r3, [r7, #0]
 8001318:	9300      	str	r3, [sp, #0]
 800131a:	2301      	movs	r3, #1
 800131c:	21ba      	movs	r1, #186	; 0xba
 800131e:	4813      	ldr	r0, [pc, #76]	; (800136c <BSP_I2C2_WriteRegLPS22HH+0x74>)
 8001320:	f008 f9be 	bl	80096a0 <HAL_I2C_Mem_Write>
 8001324:	4603      	mov	r3, r0
 8001326:	60fb      	str	r3, [r7, #12]
	if(ret != HAL_OK && hi2c2.ErrorCode == HAL_I2C_ERROR_AF)
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	2b00      	cmp	r3, #0
 800132c:	d013      	beq.n	8001356 <BSP_I2C2_WriteRegLPS22HH+0x5e>
 800132e:	4b0f      	ldr	r3, [pc, #60]	; (800136c <BSP_I2C2_WriteRegLPS22HH+0x74>)
 8001330:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001332:	2b04      	cmp	r3, #4
 8001334:	d10f      	bne.n	8001356 <BSP_I2C2_WriteRegLPS22HH+0x5e>
	{
		ret = HAL_I2C_Mem_Write(&hi2c2, LPS22HH_I2C_ADDR, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length, 100); //Retry
 8001336:	79fb      	ldrb	r3, [r7, #7]
 8001338:	b29a      	uxth	r2, r3
 800133a:	79bb      	ldrb	r3, [r7, #6]
 800133c:	b29b      	uxth	r3, r3
 800133e:	2164      	movs	r1, #100	; 0x64
 8001340:	9102      	str	r1, [sp, #8]
 8001342:	9301      	str	r3, [sp, #4]
 8001344:	683b      	ldr	r3, [r7, #0]
 8001346:	9300      	str	r3, [sp, #0]
 8001348:	2301      	movs	r3, #1
 800134a:	21ba      	movs	r1, #186	; 0xba
 800134c:	4807      	ldr	r0, [pc, #28]	; (800136c <BSP_I2C2_WriteRegLPS22HH+0x74>)
 800134e:	f008 f9a7 	bl	80096a0 <HAL_I2C_Mem_Write>
 8001352:	4603      	mov	r3, r0
 8001354:	60fb      	str	r3, [r7, #12]
	}

	if(ret != HAL_OK)
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	2b00      	cmp	r3, #0
 800135a:	d002      	beq.n	8001362 <BSP_I2C2_WriteRegLPS22HH+0x6a>
	{
		return hi2c2.ErrorCode;
 800135c:	4b03      	ldr	r3, [pc, #12]	; (800136c <BSP_I2C2_WriteRegLPS22HH+0x74>)
 800135e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001360:	e000      	b.n	8001364 <BSP_I2C2_WriteRegLPS22HH+0x6c>
	}
    return ret;
 8001362:	68fb      	ldr	r3, [r7, #12]
}
 8001364:	4618      	mov	r0, r3
 8001366:	3710      	adds	r7, #16
 8001368:	46bd      	mov	sp, r7
 800136a:	bd80      	pop	{r7, pc}
 800136c:	2001c6e8 	.word	0x2001c6e8

08001370 <BSP_ReadPinLPS22HH>:

int32_t BSP_ReadPinLPS22HH(void)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	af00      	add	r7, sp, #0
	return HAL_GPIO_ReadPin(Mems_INT_LPS22HH_GPIO_Port, Mems_INT_LPS22HH_Pin);
 8001374:	2104      	movs	r1, #4
 8001376:	4803      	ldr	r0, [pc, #12]	; (8001384 <BSP_ReadPinLPS22HH+0x14>)
 8001378:	f008 f88a 	bl	8009490 <HAL_GPIO_ReadPin>
 800137c:	4603      	mov	r3, r0
}
 800137e:	4618      	mov	r0, r3
 8001380:	bd80      	pop	{r7, pc}
 8001382:	bf00      	nop
 8001384:	42021800 	.word	0x42021800

08001388 <BSP_IIS2MDC_IO_Init>:

void BSP_IIS2MDC_IO_Init(void)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	af00      	add	r7, sp, #0
	MagSensor_GPIO_Init();
 800138c:	f004 fada 	bl	8005944 <MagSensor_GPIO_Init>
	BSP_I2C2_Init();
 8001390:	f7ff fe96 	bl	80010c0 <BSP_I2C2_Init>
}
 8001394:	bf00      	nop
 8001396:	bd80      	pop	{r7, pc}

08001398 <BSP_I2C2_ReadRegIIS2MDC>:

int32_t BSP_I2C2_ReadRegIIS2MDC(uint8_t Reg, uint8_t *pData, uint8_t Length)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b088      	sub	sp, #32
 800139c:	af04      	add	r7, sp, #16
 800139e:	4603      	mov	r3, r0
 80013a0:	6039      	str	r1, [r7, #0]
 80013a2:	71fb      	strb	r3, [r7, #7]
 80013a4:	4613      	mov	r3, r2
 80013a6:	71bb      	strb	r3, [r7, #6]
	int32_t ret = HAL_I2C_Mem_Read(&hi2c2, IIS2MDC_I2C_ADDR, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length, 100);
 80013a8:	79fb      	ldrb	r3, [r7, #7]
 80013aa:	b29a      	uxth	r2, r3
 80013ac:	79bb      	ldrb	r3, [r7, #6]
 80013ae:	b29b      	uxth	r3, r3
 80013b0:	2164      	movs	r1, #100	; 0x64
 80013b2:	9102      	str	r1, [sp, #8]
 80013b4:	9301      	str	r3, [sp, #4]
 80013b6:	683b      	ldr	r3, [r7, #0]
 80013b8:	9300      	str	r3, [sp, #0]
 80013ba:	2301      	movs	r3, #1
 80013bc:	213c      	movs	r1, #60	; 0x3c
 80013be:	4808      	ldr	r0, [pc, #32]	; (80013e0 <BSP_I2C2_ReadRegIIS2MDC+0x48>)
 80013c0:	f008 fa82 	bl	80098c8 <HAL_I2C_Mem_Read>
 80013c4:	4603      	mov	r3, r0
 80013c6:	60fb      	str	r3, [r7, #12]
	if(ret != HAL_OK)
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d002      	beq.n	80013d4 <BSP_I2C2_ReadRegIIS2MDC+0x3c>
	{
		return hi2c2.ErrorCode;
 80013ce:	4b04      	ldr	r3, [pc, #16]	; (80013e0 <BSP_I2C2_ReadRegIIS2MDC+0x48>)
 80013d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013d2:	e000      	b.n	80013d6 <BSP_I2C2_ReadRegIIS2MDC+0x3e>
	}
    return ret;
 80013d4:	68fb      	ldr	r3, [r7, #12]
}
 80013d6:	4618      	mov	r0, r3
 80013d8:	3710      	adds	r7, #16
 80013da:	46bd      	mov	sp, r7
 80013dc:	bd80      	pop	{r7, pc}
 80013de:	bf00      	nop
 80013e0:	2001c6e8 	.word	0x2001c6e8

080013e4 <BSP_I2C2_WriteRegIIS2MDC>:

int32_t BSP_I2C2_WriteRegIIS2MDC(uint8_t Reg, uint8_t *pData, uint8_t Length)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b088      	sub	sp, #32
 80013e8:	af04      	add	r7, sp, #16
 80013ea:	4603      	mov	r3, r0
 80013ec:	6039      	str	r1, [r7, #0]
 80013ee:	71fb      	strb	r3, [r7, #7]
 80013f0:	4613      	mov	r3, r2
 80013f2:	71bb      	strb	r3, [r7, #6]
	int32_t ret = HAL_I2C_Mem_Write(&hi2c2, IIS2MDC_I2C_ADDR, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length, 100);
 80013f4:	79fb      	ldrb	r3, [r7, #7]
 80013f6:	b29a      	uxth	r2, r3
 80013f8:	79bb      	ldrb	r3, [r7, #6]
 80013fa:	b29b      	uxth	r3, r3
 80013fc:	2164      	movs	r1, #100	; 0x64
 80013fe:	9102      	str	r1, [sp, #8]
 8001400:	9301      	str	r3, [sp, #4]
 8001402:	683b      	ldr	r3, [r7, #0]
 8001404:	9300      	str	r3, [sp, #0]
 8001406:	2301      	movs	r3, #1
 8001408:	213c      	movs	r1, #60	; 0x3c
 800140a:	4808      	ldr	r0, [pc, #32]	; (800142c <BSP_I2C2_WriteRegIIS2MDC+0x48>)
 800140c:	f008 f948 	bl	80096a0 <HAL_I2C_Mem_Write>
 8001410:	4603      	mov	r3, r0
 8001412:	60fb      	str	r3, [r7, #12]
	if(ret != HAL_OK)
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	2b00      	cmp	r3, #0
 8001418:	d002      	beq.n	8001420 <BSP_I2C2_WriteRegIIS2MDC+0x3c>
	{
		return hi2c2.ErrorCode;
 800141a:	4b04      	ldr	r3, [pc, #16]	; (800142c <BSP_I2C2_WriteRegIIS2MDC+0x48>)
 800141c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800141e:	e000      	b.n	8001422 <BSP_I2C2_WriteRegIIS2MDC+0x3e>
	}
    return ret;
 8001420:	68fb      	ldr	r3, [r7, #12]
}
 8001422:	4618      	mov	r0, r3
 8001424:	3710      	adds	r7, #16
 8001426:	46bd      	mov	sp, r7
 8001428:	bd80      	pop	{r7, pc}
 800142a:	bf00      	nop
 800142c:	2001c6e8 	.word	0x2001c6e8

08001430 <BSP_ReadPinIIS2MDC>:

int32_t BSP_ReadPinIIS2MDC(void)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	af00      	add	r7, sp, #0
	return HAL_GPIO_ReadPin(Mems_INT_IIS2MDC_GPIO_Port, Mems_INT_IIS2MDC_Pin);
 8001434:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001438:	4802      	ldr	r0, [pc, #8]	; (8001444 <BSP_ReadPinIIS2MDC+0x14>)
 800143a:	f008 f829 	bl	8009490 <HAL_GPIO_ReadPin>
 800143e:	4603      	mov	r3, r0
}
 8001440:	4618      	mov	r0, r3
 8001442:	bd80      	pop	{r7, pc}
 8001444:	42020c00 	.word	0x42020c00

08001448 <BSP_GetTick>:

uint32_t BSP_GetTick(void)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	af00      	add	r7, sp, #0
    return HAL_GetTick();
 800144c:	f005 fca0 	bl	8006d90 <HAL_GetTick>
 8001450:	4603      	mov	r3, r0
}
 8001452:	4618      	mov	r0, r3
 8001454:	bd80      	pop	{r7, pc}
	...

08001458 <BSP_I2C2_ReadRegVEML6030>:

int32_t BSP_I2C2_ReadRegVEML6030(uint8_t Reg, uint8_t *pData, uint8_t Length)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b088      	sub	sp, #32
 800145c:	af04      	add	r7, sp, #16
 800145e:	4603      	mov	r3, r0
 8001460:	6039      	str	r1, [r7, #0]
 8001462:	71fb      	strb	r3, [r7, #7]
 8001464:	4613      	mov	r3, r2
 8001466:	71bb      	strb	r3, [r7, #6]
	int32_t ret = HAL_I2C_Mem_Read(&hi2c2, VEML6030_I2C_ADDR, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length, 100);
 8001468:	79fb      	ldrb	r3, [r7, #7]
 800146a:	b29a      	uxth	r2, r3
 800146c:	79bb      	ldrb	r3, [r7, #6]
 800146e:	b29b      	uxth	r3, r3
 8001470:	2164      	movs	r1, #100	; 0x64
 8001472:	9102      	str	r1, [sp, #8]
 8001474:	9301      	str	r3, [sp, #4]
 8001476:	683b      	ldr	r3, [r7, #0]
 8001478:	9300      	str	r3, [sp, #0]
 800147a:	2301      	movs	r3, #1
 800147c:	2120      	movs	r1, #32
 800147e:	4808      	ldr	r0, [pc, #32]	; (80014a0 <BSP_I2C2_ReadRegVEML6030+0x48>)
 8001480:	f008 fa22 	bl	80098c8 <HAL_I2C_Mem_Read>
 8001484:	4603      	mov	r3, r0
 8001486:	60fb      	str	r3, [r7, #12]
	if(ret != HAL_OK)
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	2b00      	cmp	r3, #0
 800148c:	d002      	beq.n	8001494 <BSP_I2C2_ReadRegVEML6030+0x3c>
	{
		return hi2c2.ErrorCode;
 800148e:	4b04      	ldr	r3, [pc, #16]	; (80014a0 <BSP_I2C2_ReadRegVEML6030+0x48>)
 8001490:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001492:	e000      	b.n	8001496 <BSP_I2C2_ReadRegVEML6030+0x3e>
	}
    return ret;
 8001494:	68fb      	ldr	r3, [r7, #12]
}
 8001496:	4618      	mov	r0, r3
 8001498:	3710      	adds	r7, #16
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}
 800149e:	bf00      	nop
 80014a0:	2001c6e8 	.word	0x2001c6e8

080014a4 <BSP_I2C2_WriteRegVEML6030>:

int32_t BSP_I2C2_WriteRegVEML6030(uint8_t Reg, uint8_t *pData, uint8_t Length)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b088      	sub	sp, #32
 80014a8:	af04      	add	r7, sp, #16
 80014aa:	4603      	mov	r3, r0
 80014ac:	6039      	str	r1, [r7, #0]
 80014ae:	71fb      	strb	r3, [r7, #7]
 80014b0:	4613      	mov	r3, r2
 80014b2:	71bb      	strb	r3, [r7, #6]
	int32_t ret = HAL_I2C_Mem_Write(&hi2c2, VEML6030_I2C_ADDR, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length, 100);
 80014b4:	79fb      	ldrb	r3, [r7, #7]
 80014b6:	b29a      	uxth	r2, r3
 80014b8:	79bb      	ldrb	r3, [r7, #6]
 80014ba:	b29b      	uxth	r3, r3
 80014bc:	2164      	movs	r1, #100	; 0x64
 80014be:	9102      	str	r1, [sp, #8]
 80014c0:	9301      	str	r3, [sp, #4]
 80014c2:	683b      	ldr	r3, [r7, #0]
 80014c4:	9300      	str	r3, [sp, #0]
 80014c6:	2301      	movs	r3, #1
 80014c8:	2120      	movs	r1, #32
 80014ca:	4808      	ldr	r0, [pc, #32]	; (80014ec <BSP_I2C2_WriteRegVEML6030+0x48>)
 80014cc:	f008 f8e8 	bl	80096a0 <HAL_I2C_Mem_Write>
 80014d0:	4603      	mov	r3, r0
 80014d2:	60fb      	str	r3, [r7, #12]
	if(ret != HAL_OK)
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d002      	beq.n	80014e0 <BSP_I2C2_WriteRegVEML6030+0x3c>
	{
		return hi2c2.ErrorCode;
 80014da:	4b04      	ldr	r3, [pc, #16]	; (80014ec <BSP_I2C2_WriteRegVEML6030+0x48>)
 80014dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014de:	e000      	b.n	80014e2 <BSP_I2C2_WriteRegVEML6030+0x3e>
	}
    return ret;
 80014e0:	68fb      	ldr	r3, [r7, #12]
}
 80014e2:	4618      	mov	r0, r3
 80014e4:	3710      	adds	r7, #16
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bd80      	pop	{r7, pc}
 80014ea:	bf00      	nop
 80014ec:	2001c6e8 	.word	0x2001c6e8

080014f0 <BSP_LEDToggleRed>:
#include "BSP_LED.h"
#include "stm32u5xx_hal.h"
#include "main.h"

void BSP_LEDToggleRed(void)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	af00      	add	r7, sp, #0
    HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
 80014f4:	2140      	movs	r1, #64	; 0x40
 80014f6:	4802      	ldr	r0, [pc, #8]	; (8001500 <BSP_LEDToggleRed+0x10>)
 80014f8:	f007 fffa 	bl	80094f0 <HAL_GPIO_TogglePin>
}
 80014fc:	bf00      	nop
 80014fe:	bd80      	pop	{r7, pc}
 8001500:	42021c00 	.word	0x42021c00

08001504 <BSP_LEDToggleGreen>:

void BSP_LEDToggleGreen(void)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	af00      	add	r7, sp, #0
    HAL_GPIO_TogglePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin);
 8001508:	2180      	movs	r1, #128	; 0x80
 800150a:	4802      	ldr	r0, [pc, #8]	; (8001514 <BSP_LEDToggleGreen+0x10>)
 800150c:	f007 fff0 	bl	80094f0 <HAL_GPIO_TogglePin>
}
 8001510:	bf00      	nop
 8001512:	bd80      	pop	{r7, pc}
 8001514:	42021c00 	.word	0x42021c00

08001518 <BSP_CameraInit>:

static void BSP_CameraHwReset(void);
static void BSP_CameraHWInit(void);

BSP_CameraStatus_t BSP_CameraInit(void)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	af00      	add	r7, sp, #0
	BSP_CameraHwReset();//Reset it
 800151c:	f000 f822 	bl	8001564 <BSP_CameraHwReset>
    BSP_CameraHWInit(); //Init OV5460 driver
 8001520:	f000 f844 	bl	80015ac <BSP_CameraHWInit>
	return CameraOK;
 8001524:	2300      	movs	r3, #0
}
 8001526:	4618      	mov	r0, r3
 8001528:	bd80      	pop	{r7, pc}
	...

0800152c <BSP_CameraStart>:

void BSP_CameraStart(uint8_t* Buffer){
 800152c:	b580      	push	{r7, lr}
 800152e:	b082      	sub	sp, #8
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
	  HAL_DCMI_Start_DMA(&hdcmi, DCMI_MODE_CONTINUOUS, (uint32_t)Buffer, CAMERA_DATA_SIZE_WORDS);
 8001534:	687a      	ldr	r2, [r7, #4]
 8001536:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 800153a:	2100      	movs	r1, #0
 800153c:	4803      	ldr	r0, [pc, #12]	; (800154c <BSP_CameraStart+0x20>)
 800153e:	f005 ff87 	bl	8007450 <HAL_DCMI_Start_DMA>
}
 8001542:	bf00      	nop
 8001544:	3708      	adds	r7, #8
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}
 800154a:	bf00      	nop
 800154c:	2001c5d4 	.word	0x2001c5d4

08001550 <BSP_CameraStop>:

void BSP_CameraStop(void){
 8001550:	b580      	push	{r7, lr}
 8001552:	af00      	add	r7, sp, #0
	  HAL_DCMI_Stop(&hdcmi);
 8001554:	4802      	ldr	r0, [pc, #8]	; (8001560 <BSP_CameraStop+0x10>)
 8001556:	f006 f91d 	bl	8007794 <HAL_DCMI_Stop>
}
 800155a:	bf00      	nop
 800155c:	bd80      	pop	{r7, pc}
 800155e:	bf00      	nop
 8001560:	2001c5d4 	.word	0x2001c5d4

08001564 <BSP_CameraHwReset>:
{
	HAL_DCMI_Start_DMA(&hdcmi, DCMI_MODE_SNAPSHOT, (uint32_t)Buffer, CAMERA_DATA_SIZE_WORDS);
}

static void BSP_CameraHwReset(void)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	af00      	add	r7, sp, #0
    /* Camera sensor RESET sequence */
    /* Assert the camera STANDBY and RSTI pins */

    HAL_GPIO_WritePin(CAM_XSDN_GPIO_Port, CAM_XSDN_Pin, GPIO_PIN_SET);
 8001568:	2201      	movs	r2, #1
 800156a:	2108      	movs	r1, #8
 800156c:	480e      	ldr	r0, [pc, #56]	; (80015a8 <BSP_CameraHwReset+0x44>)
 800156e:	f007 ffa7 	bl	80094c0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(CAM_RSTI_GPIO_Port, CAM_RSTI_Pin, GPIO_PIN_RESET);
 8001572:	2200      	movs	r2, #0
 8001574:	2104      	movs	r1, #4
 8001576:	480c      	ldr	r0, [pc, #48]	; (80015a8 <BSP_CameraHwReset+0x44>)
 8001578:	f007 ffa2 	bl	80094c0 <HAL_GPIO_WritePin>
    HAL_Delay(100);   /* RST and XSDN signals asserted during 100ms */
 800157c:	2064      	movs	r0, #100	; 0x64
 800157e:	f005 fc13 	bl	8006da8 <HAL_Delay>

    /* De-assert the camera STANDBY pin (active high) */
    HAL_GPIO_WritePin(CAM_XSDN_GPIO_Port, CAM_XSDN_Pin, GPIO_PIN_RESET);
 8001582:	2200      	movs	r2, #0
 8001584:	2108      	movs	r1, #8
 8001586:	4808      	ldr	r0, [pc, #32]	; (80015a8 <BSP_CameraHwReset+0x44>)
 8001588:	f007 ff9a 	bl	80094c0 <HAL_GPIO_WritePin>
    HAL_Delay(3);     /* RST de-asserted and XSDN de-asserted during 3ms */
 800158c:	2003      	movs	r0, #3
 800158e:	f005 fc0b 	bl	8006da8 <HAL_Delay>

    /* De-assert the camera RSTI pin (active low) */
    HAL_GPIO_WritePin(CAM_RSTI_GPIO_Port, CAM_RSTI_Pin, GPIO_PIN_SET);
 8001592:	2201      	movs	r2, #1
 8001594:	2104      	movs	r1, #4
 8001596:	4804      	ldr	r0, [pc, #16]	; (80015a8 <BSP_CameraHwReset+0x44>)
 8001598:	f007 ff92 	bl	80094c0 <HAL_GPIO_WritePin>
    HAL_Delay(20);     /* RST de-asserted during 20ms */
 800159c:	2014      	movs	r0, #20
 800159e:	f005 fc03 	bl	8006da8 <HAL_Delay>
}
 80015a2:	bf00      	nop
 80015a4:	bd80      	pop	{r7, pc}
 80015a6:	bf00      	nop
 80015a8:	42022000 	.word	0x42022000

080015ac <BSP_CameraHWInit>:

static void BSP_CameraHWInit(void){
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b088      	sub	sp, #32
 80015b0:	af00      	add	r7, sp, #0
	  uint32_t temp = 0;
 80015b2:	2300      	movs	r3, #0
 80015b4:	61fb      	str	r3, [r7, #28]
	  OV5640_IO_t              IO;
	  static OV5640_Handle_t   OV5640_Handle;
	  IO.Address = CAMERA_OV5640_ADDRESS;
 80015b6:	2378      	movs	r3, #120	; 0x78
 80015b8:	80bb      	strh	r3, [r7, #4]
	  IO.Init = BSP_I2C1_Init;
 80015ba:	4b0f      	ldr	r3, [pc, #60]	; (80015f8 <BSP_CameraHWInit+0x4c>)
 80015bc:	60bb      	str	r3, [r7, #8]
	  IO.DeInit = BSP_I2C1_DeInit;
 80015be:	4b0f      	ldr	r3, [pc, #60]	; (80015fc <BSP_CameraHWInit+0x50>)
 80015c0:	60fb      	str	r3, [r7, #12]
      IO.Read = BSP_I2C1_ReadReg16;
 80015c2:	4b0f      	ldr	r3, [pc, #60]	; (8001600 <BSP_CameraHWInit+0x54>)
 80015c4:	617b      	str	r3, [r7, #20]
      IO.Write = BSP_I2C1_WriteReg16;
 80015c6:	4b0f      	ldr	r3, [pc, #60]	; (8001604 <BSP_CameraHWInit+0x58>)
 80015c8:	613b      	str	r3, [r7, #16]
      IO.GetTick = BSP_GetTick;
 80015ca:	4b0f      	ldr	r3, [pc, #60]	; (8001608 <BSP_CameraHWInit+0x5c>)
 80015cc:	61bb      	str	r3, [r7, #24]
      OV5640_LinkBus(&OV5640_Handle, &IO);
 80015ce:	1d3b      	adds	r3, r7, #4
 80015d0:	4619      	mov	r1, r3
 80015d2:	480e      	ldr	r0, [pc, #56]	; (800160c <BSP_CameraHWInit+0x60>)
 80015d4:	f002 fb1c 	bl	8003c10 <OV5640_LinkBus>
      OV5640_ReadID(&OV5640_Handle,&temp);
 80015d8:	f107 031c 	add.w	r3, r7, #28
 80015dc:	4619      	mov	r1, r3
 80015de:	480b      	ldr	r0, [pc, #44]	; (800160c <BSP_CameraHWInit+0x60>)
 80015e0:	f002 fef2 	bl	80043c8 <OV5640_ReadID>
      OV5640_Init(&OV5640_Handle, OV5640_R480x272, CAMERA_PF);
 80015e4:	2200      	movs	r2, #0
 80015e6:	2102      	movs	r1, #2
 80015e8:	4808      	ldr	r0, [pc, #32]	; (800160c <BSP_CameraHWInit+0x60>)
 80015ea:	f002 fb35 	bl	8003c58 <OV5640_Init>
}
 80015ee:	bf00      	nop
 80015f0:	3720      	adds	r7, #32
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}
 80015f6:	bf00      	nop
 80015f8:	08001091 	.word	0x08001091
 80015fc:	080010ad 	.word	0x080010ad
 8001600:	08001135 	.word	0x08001135
 8001604:	080010f1 	.word	0x080010f1
 8001608:	08001449 	.word	0x08001449
 800160c:	2001bcf8 	.word	0x2001bcf8

08001610 <BSP_TempHumSensorInit>:

static VEML6030_Handle_t AmbientLightSensor = {0};


int32_t BSP_TempHumSensorInit(void)
{
 8001610:	b5b0      	push	{r4, r5, r7, lr}
 8001612:	b08a      	sub	sp, #40	; 0x28
 8001614:	af00      	add	r7, sp, #0
	int32_t ret = 0;
 8001616:	2300      	movs	r3, #0
 8001618:	627b      	str	r3, [r7, #36]	; 0x24
	HTS221_IO_t TempSensor_IO = {.Init = BSP_I2C2_Init,
 800161a:	4b0f      	ldr	r3, [pc, #60]	; (8001658 <BSP_TempHumSensorInit+0x48>)
 800161c:	f107 040c 	add.w	r4, r7, #12
 8001620:	461d      	mov	r5, r3
 8001622:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001624:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001626:	e895 0003 	ldmia.w	r5, {r0, r1}
 800162a:	e884 0003 	stmia.w	r4, {r0, r1}
								 .Write = BSP_I2C2_WriteRegHTS221,
								 .GetTick = BSP_GetTick,
								 .ReadPin = NULL
	};

	HTS221_Init_Struct_t Settings = { .DataReadyConfig = HTS221_DataReadyDisable,
 800162e:	4a0b      	ldr	r2, [pc, #44]	; (800165c <BSP_TempHumSensorInit+0x4c>)
 8001630:	1d3b      	adds	r3, r7, #4
 8001632:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001636:	6018      	str	r0, [r3, #0]
 8001638:	3304      	adds	r3, #4
 800163a:	8019      	strh	r1, [r3, #0]
									  .HumidityResolution = HTS221_Hum64Samples,
									  .OutputDataRate = HTS221_1_0Hz,
									  .TemperatureResolution = HTS221_Temp32amples

	};
	ret = HTS221_Init(&TempSensor_Handle, Settings, &TempSensor_IO);
 800163c:	f107 030c 	add.w	r3, r7, #12
 8001640:	1d3a      	adds	r2, r7, #4
 8001642:	ca06      	ldmia	r2, {r1, r2}
 8001644:	4806      	ldr	r0, [pc, #24]	; (8001660 <BSP_TempHumSensorInit+0x50>)
 8001646:	f000 fa37 	bl	8001ab8 <HTS221_Init>
 800164a:	6278      	str	r0, [r7, #36]	; 0x24
	return ret;
 800164c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800164e:	4618      	mov	r0, r3
 8001650:	3728      	adds	r7, #40	; 0x28
 8001652:	46bd      	mov	sp, r7
 8001654:	bdb0      	pop	{r4, r5, r7, pc}
 8001656:	bf00      	nop
 8001658:	08014864 	.word	0x08014864
 800165c:	0801487c 	.word	0x0801487c
 8001660:	2001bd1c 	.word	0x2001bd1c

08001664 <BSP_ReadTemperature>:

int32_t BSP_ReadTemperature(float *result)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b082      	sub	sp, #8
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
	return HTS221_ReadTemperature(&TempSensor_Handle, result);
 800166c:	6879      	ldr	r1, [r7, #4]
 800166e:	4804      	ldr	r0, [pc, #16]	; (8001680 <BSP_ReadTemperature+0x1c>)
 8001670:	f000 fa84 	bl	8001b7c <HTS221_ReadTemperature>
 8001674:	4603      	mov	r3, r0
}
 8001676:	4618      	mov	r0, r3
 8001678:	3708      	adds	r7, #8
 800167a:	46bd      	mov	sp, r7
 800167c:	bd80      	pop	{r7, pc}
 800167e:	bf00      	nop
 8001680:	2001bd1c 	.word	0x2001bd1c

08001684 <BSP_ReadHumidity>:


int32_t BSP_ReadHumidity(float *result)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b082      	sub	sp, #8
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
	return HTS221_ReadHumidity(&TempSensor_Handle, result);
 800168c:	6879      	ldr	r1, [r7, #4]
 800168e:	4804      	ldr	r0, [pc, #16]	; (80016a0 <BSP_ReadHumidity+0x1c>)
 8001690:	f000 fab9 	bl	8001c06 <HTS221_ReadHumidity>
 8001694:	4603      	mov	r3, r0
}
 8001696:	4618      	mov	r0, r3
 8001698:	3708      	adds	r7, #8
 800169a:	46bd      	mov	sp, r7
 800169c:	bd80      	pop	{r7, pc}
 800169e:	bf00      	nop
 80016a0:	2001bd1c 	.word	0x2001bd1c

080016a4 <BSP_PressureSensorInit>:
{
	return HTS221_DisableHeater(&TempSensor_Handle);
}

int32_t BSP_PressureSensorInit(void)
{
 80016a4:	b5b0      	push	{r4, r5, r7, lr}
 80016a6:	b090      	sub	sp, #64	; 0x40
 80016a8:	af04      	add	r7, sp, #16
	LPS22HH_IO_t PressureSensor_IO =
 80016aa:	4b13      	ldr	r3, [pc, #76]	; (80016f8 <BSP_PressureSensorInit+0x54>)
 80016ac:	f107 0414 	add.w	r4, r7, #20
 80016b0:	461d      	mov	r5, r3
 80016b2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80016b4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80016b6:	e895 0003 	ldmia.w	r5, {r0, r1}
 80016ba:	e884 0003 	stmia.w	r4, {r0, r1}
			.Write = BSP_I2C2_WriteRegLPS22HH,
			.GetTick = BSP_GetTick,
			.ReadPin = BSP_ReadPinLPS22HH
	};

	LPS22HH_Init_Struct_t PressureSettings =
 80016be:	4b0f      	ldr	r3, [pc, #60]	; (80016fc <BSP_PressureSensorInit+0x58>)
 80016c0:	463c      	mov	r4, r7
 80016c2:	461d      	mov	r5, r3
 80016c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80016c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80016c8:	682b      	ldr	r3, [r5, #0]
 80016ca:	6023      	str	r3, [r4, #0]
			.F_MODE = LPS22HH_FifoBypass,
			.WTM = LPS22HH_DefaultSetting,
			.REF_P = LPS22HH_DefaultSetting
	};

	int32_t ret = LPS22HH_Init(&PressureSensor, PressureSettings, &PressureSensor_IO);
 80016cc:	f107 0314 	add.w	r3, r7, #20
 80016d0:	9302      	str	r3, [sp, #8]
 80016d2:	466a      	mov	r2, sp
 80016d4:	f107 030c 	add.w	r3, r7, #12
 80016d8:	e893 0003 	ldmia.w	r3, {r0, r1}
 80016dc:	e882 0003 	stmia.w	r2, {r0, r1}
 80016e0:	463b      	mov	r3, r7
 80016e2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80016e4:	4806      	ldr	r0, [pc, #24]	; (8001700 <BSP_PressureSensorInit+0x5c>)
 80016e6:	f001 fedb 	bl	80034a0 <LPS22HH_Init>
 80016ea:	62f8      	str	r0, [r7, #44]	; 0x2c
	return ret;
 80016ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80016ee:	4618      	mov	r0, r3
 80016f0:	3730      	adds	r7, #48	; 0x30
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bdb0      	pop	{r4, r5, r7, pc}
 80016f6:	bf00      	nop
 80016f8:	08014884 	.word	0x08014884
 80016fc:	0801489c 	.word	0x0801489c
 8001700:	2001bd44 	.word	0x2001bd44

08001704 <BSP_ReadPressure>:

int32_t BSP_ReadPressure(float *result)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b084      	sub	sp, #16
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
	int32_t ret = LPS22HH_ReadPressure(&PressureSensor, result);
 800170c:	6879      	ldr	r1, [r7, #4]
 800170e:	4804      	ldr	r0, [pc, #16]	; (8001720 <BSP_ReadPressure+0x1c>)
 8001710:	f001 ff50 	bl	80035b4 <LPS22HH_ReadPressure>
 8001714:	60f8      	str	r0, [r7, #12]
	return ret;
 8001716:	68fb      	ldr	r3, [r7, #12]
}
 8001718:	4618      	mov	r0, r3
 800171a:	3710      	adds	r7, #16
 800171c:	46bd      	mov	sp, r7
 800171e:	bd80      	pop	{r7, pc}
 8001720:	2001bd44 	.word	0x2001bd44

08001724 <BSP_MagnetometerInit>:
    return ret;
}
*/

int32_t BSP_MagnetometerInit(void)
{
 8001724:	b5b0      	push	{r4, r5, r7, lr}
 8001726:	b090      	sub	sp, #64	; 0x40
 8001728:	af04      	add	r7, sp, #16
    IIS2MDC_IO_t MagnetometerIO =
 800172a:	4b13      	ldr	r3, [pc, #76]	; (8001778 <BSP_MagnetometerInit+0x54>)
 800172c:	f107 0414 	add.w	r4, r7, #20
 8001730:	461d      	mov	r5, r3
 8001732:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001734:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001736:	e895 0003 	ldmia.w	r5, {r0, r1}
 800173a:	e884 0003 	stmia.w	r4, {r0, r1}
			.Write = BSP_I2C2_WriteRegIIS2MDC,
			.GetTick = BSP_GetTick,
			.ReadPin = BSP_ReadPinIIS2MDC
    };

    IIS2MDC_InitStruct_t MagnetometerSettings =
 800173e:	4b0f      	ldr	r3, [pc, #60]	; (800177c <BSP_MagnetometerInit+0x58>)
 8001740:	463c      	mov	r4, r7
 8001742:	461d      	mov	r5, r3
 8001744:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001746:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001748:	682b      	ldr	r3, [r5, #0]
 800174a:	6023      	str	r3, [r4, #0]
			.OffsetX = 0,
			.OffsetY = 0,
			.OffsetZ = 0
    };

    int32_t ret = IIS2MDC_Init(&Magnetometer, MagnetometerSettings, &MagnetometerIO);
 800174c:	f107 0314 	add.w	r3, r7, #20
 8001750:	9302      	str	r3, [sp, #8]
 8001752:	466a      	mov	r2, sp
 8001754:	f107 030c 	add.w	r3, r7, #12
 8001758:	e893 0003 	ldmia.w	r3, {r0, r1}
 800175c:	e882 0003 	stmia.w	r2, {r0, r1}
 8001760:	463b      	mov	r3, r7
 8001762:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001764:	4806      	ldr	r0, [pc, #24]	; (8001780 <BSP_MagnetometerInit+0x5c>)
 8001766:	f000 fd9d 	bl	80022a4 <IIS2MDC_Init>
 800176a:	62f8      	str	r0, [r7, #44]	; 0x2c
    return ret;
 800176c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800176e:	4618      	mov	r0, r3
 8001770:	3730      	adds	r7, #48	; 0x30
 8001772:	46bd      	mov	sp, r7
 8001774:	bdb0      	pop	{r4, r5, r7, pc}
 8001776:	bf00      	nop
 8001778:	080148b0 	.word	0x080148b0
 800177c:	080148c8 	.word	0x080148c8
 8001780:	2001bd6c 	.word	0x2001bd6c

08001784 <BSP_ReadMagnetometerXYZ>:

int32_t BSP_ReadMagnetometerXYZ(float *Mx, float *My, float *Mz)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b086      	sub	sp, #24
 8001788:	af00      	add	r7, sp, #0
 800178a:	60f8      	str	r0, [r7, #12]
 800178c:	60b9      	str	r1, [r7, #8]
 800178e:	607a      	str	r2, [r7, #4]
    int32_t ret = IIS2MDC_ReadMagnetismXYZ(&Magnetometer, Mx, My, Mz);
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	68ba      	ldr	r2, [r7, #8]
 8001794:	68f9      	ldr	r1, [r7, #12]
 8001796:	4804      	ldr	r0, [pc, #16]	; (80017a8 <BSP_ReadMagnetometerXYZ+0x24>)
 8001798:	f000 fe7a 	bl	8002490 <IIS2MDC_ReadMagnetismXYZ>
 800179c:	6178      	str	r0, [r7, #20]
    return ret;
 800179e:	697b      	ldr	r3, [r7, #20]
}
 80017a0:	4618      	mov	r0, r3
 80017a2:	3718      	adds	r7, #24
 80017a4:	46bd      	mov	sp, r7
 80017a6:	bd80      	pop	{r7, pc}
 80017a8:	2001bd6c 	.word	0x2001bd6c

080017ac <BSP_GetTempPeriod>:
	int32_t ret = IIS2MDC_ReadMagnetismZ(&Magnetometer, Mz);
	return ret;
}

int32_t BSP_GetTempPeriod(uint32_t *Period)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b084      	sub	sp, #16
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
    int32_t ret = HTS221_GetSamplePeriod(&TempSensor_Handle, Period);
 80017b4:	6879      	ldr	r1, [r7, #4]
 80017b6:	4804      	ldr	r0, [pc, #16]	; (80017c8 <BSP_GetTempPeriod+0x1c>)
 80017b8:	f000 fcc4 	bl	8002144 <HTS221_GetSamplePeriod>
 80017bc:	60f8      	str	r0, [r7, #12]
    return ret;
 80017be:	68fb      	ldr	r3, [r7, #12]
}
 80017c0:	4618      	mov	r0, r3
 80017c2:	3710      	adds	r7, #16
 80017c4:	46bd      	mov	sp, r7
 80017c6:	bd80      	pop	{r7, pc}
 80017c8:	2001bd1c 	.word	0x2001bd1c

080017cc <BSP_GetMagneticPeriod>:


int32_t BSP_GetMagneticPeriod(uint32_t *Period)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b084      	sub	sp, #16
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
    int32_t ret = IIS2MDC_GetSamplePeriod(&Magnetometer, Period);
 80017d4:	6879      	ldr	r1, [r7, #4]
 80017d6:	4804      	ldr	r0, [pc, #16]	; (80017e8 <BSP_GetMagneticPeriod+0x1c>)
 80017d8:	f001 f840 	bl	800285c <IIS2MDC_GetSamplePeriod>
 80017dc:	60f8      	str	r0, [r7, #12]
    return ret;
 80017de:	68fb      	ldr	r3, [r7, #12]
}
 80017e0:	4618      	mov	r0, r3
 80017e2:	3710      	adds	r7, #16
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bd80      	pop	{r7, pc}
 80017e8:	2001bd6c 	.word	0x2001bd6c

080017ec <BSP_GetPressurePeriod>:

int32_t BSP_GetPressurePeriod(uint32_t *Period){
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b084      	sub	sp, #16
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
    int32_t ret = LPS22HH_GetSamplePeriod(&PressureSensor, Period);
 80017f4:	6879      	ldr	r1, [r7, #4]
 80017f6:	4804      	ldr	r0, [pc, #16]	; (8001808 <BSP_GetPressurePeriod+0x1c>)
 80017f8:	f002 f936 	bl	8003a68 <LPS22HH_GetSamplePeriod>
 80017fc:	60f8      	str	r0, [r7, #12]
    return ret;
 80017fe:	68fb      	ldr	r3, [r7, #12]
}
 8001800:	4618      	mov	r0, r3
 8001802:	3710      	adds	r7, #16
 8001804:	46bd      	mov	sp, r7
 8001806:	bd80      	pop	{r7, pc}
 8001808:	2001bd44 	.word	0x2001bd44

0800180c <BSP_AmbientLightInit>:

int32_t BSP_AmbientLightInit(void)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b088      	sub	sp, #32
 8001810:	af00      	add	r7, sp, #0
    VEML6030_IO_t IO = {
 8001812:	1d3b      	adds	r3, r7, #4
 8001814:	2200      	movs	r2, #0
 8001816:	601a      	str	r2, [r3, #0]
 8001818:	605a      	str	r2, [r3, #4]
 800181a:	609a      	str	r2, [r3, #8]
 800181c:	60da      	str	r2, [r3, #12]
 800181e:	611a      	str	r2, [r3, #16]
 8001820:	615a      	str	r2, [r3, #20]
 8001822:	4b0c      	ldr	r3, [pc, #48]	; (8001854 <BSP_AmbientLightInit+0x48>)
 8001824:	607b      	str	r3, [r7, #4]
 8001826:	4b0c      	ldr	r3, [pc, #48]	; (8001858 <BSP_AmbientLightInit+0x4c>)
 8001828:	60fb      	str	r3, [r7, #12]
 800182a:	4b0c      	ldr	r3, [pc, #48]	; (800185c <BSP_AmbientLightInit+0x50>)
 800182c:	613b      	str	r3, [r7, #16]
 800182e:	4b0c      	ldr	r3, [pc, #48]	; (8001860 <BSP_AmbientLightInit+0x54>)
 8001830:	617b      	str	r3, [r7, #20]
			.GetTick = BSP_GetTick,
			.Read = BSP_I2C2_ReadRegVEML6030,
			.Write = BSP_I2C2_WriteRegVEML6030
    };

    VEML_InitSettings_t Settings =
 8001832:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001836:	803b      	strh	r3, [r7, #0]
 8001838:	2300      	movs	r3, #0
 800183a:	70bb      	strb	r3, [r7, #2]
    {
    		.ALSConfig = VEML6030_INTTIME_100 | VEML6030_ALS_GAIN_DIV4 | VEML6030_PERS_1,
			.PowerSavingMode = VEML_POWERSAVING_MODE1
    };

    int32_t ret = VEML6030_Init(&AmbientLightSensor, Settings, &IO);
 800183c:	1d3b      	adds	r3, r7, #4
 800183e:	461a      	mov	r2, r3
 8001840:	6839      	ldr	r1, [r7, #0]
 8001842:	4808      	ldr	r0, [pc, #32]	; (8001864 <BSP_AmbientLightInit+0x58>)
 8001844:	f002 fe10 	bl	8004468 <VEML6030_Init>
 8001848:	61f8      	str	r0, [r7, #28]
    return ret;
 800184a:	69fb      	ldr	r3, [r7, #28]
}
 800184c:	4618      	mov	r0, r3
 800184e:	3720      	adds	r7, #32
 8001850:	46bd      	mov	sp, r7
 8001852:	bd80      	pop	{r7, pc}
 8001854:	080010c1 	.word	0x080010c1
 8001858:	080014a5 	.word	0x080014a5
 800185c:	08001459 	.word	0x08001459
 8001860:	08001449 	.word	0x08001449
 8001864:	2001bd94 	.word	0x2001bd94

08001868 <BSP_ReadAmbientLight>:

int32_t BSP_ReadAmbientLight(float *Light)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b084      	sub	sp, #16
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
    int32_t ret = VEML6030_ReadLight(&AmbientLightSensor, Light);
 8001870:	6879      	ldr	r1, [r7, #4]
 8001872:	4804      	ldr	r0, [pc, #16]	; (8001884 <BSP_ReadAmbientLight+0x1c>)
 8001874:	f002 fe92 	bl	800459c <VEML6030_ReadLight>
 8001878:	60f8      	str	r0, [r7, #12]
    return ret;
 800187a:	68fb      	ldr	r3, [r7, #12]
}
 800187c:	4618      	mov	r0, r3
 800187e:	3710      	adds	r7, #16
 8001880:	46bd      	mov	sp, r7
 8001882:	bd80      	pop	{r7, pc}
 8001884:	2001bd94 	.word	0x2001bd94

08001888 <BSP_MotionSensorInit>:
#include "tim.h"

static ISM330DHCX_Handle_t MotionSensor;

int32_t BSP_MotionSensorInit(void)
{
 8001888:	b5b0      	push	{r4, r5, r7, lr}
 800188a:	b0a6      	sub	sp, #152	; 0x98
 800188c:	af0c      	add	r7, sp, #48	; 0x30
	int32_t ret = 0;
 800188e:	2300      	movs	r3, #0
 8001890:	663b      	str	r3, [r7, #96]	; 0x60
	float JunkData[3];
	uint8_t DiscardedXLSamples = 0;
 8001892:	2300      	movs	r3, #0
 8001894:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	uint8_t DiscardedGyroSamples = 0;
 8001898:	2300      	movs	r3, #0
 800189a:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
	ISM330DHCX_IO_t SensorIO =
 800189e:	4b39      	ldr	r3, [pc, #228]	; (8001984 <BSP_MotionSensorInit+0xfc>)
 80018a0:	f107 0438 	add.w	r4, r7, #56	; 0x38
 80018a4:	461d      	mov	r5, r3
 80018a6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80018a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80018aa:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80018ae:	e884 0007 	stmia.w	r4, {r0, r1, r2}
			.GetTick = BSP_GetTick,
			.ReadInt1Pin = BSP_ReadPinISM330DHCX,
			.ReadInt2Pin = NULL
	};

	ISM330DHCX_Init_Struct_t Init =
 80018b2:	1d3b      	adds	r3, r7, #4
 80018b4:	2234      	movs	r2, #52	; 0x34
 80018b6:	2100      	movs	r1, #0
 80018b8:	4618      	mov	r0, r3
 80018ba:	f012 faaf 	bl	8013e1c <memset>
 80018be:	2304      	movs	r3, #4
 80018c0:	71bb      	strb	r3, [r7, #6]
 80018c2:	2330      	movs	r3, #48	; 0x30
 80018c4:	773b      	strb	r3, [r7, #28]
 80018c6:	2302      	movs	r3, #2
 80018c8:	77fb      	strb	r3, [r7, #31]
 80018ca:	2360      	movs	r3, #96	; 0x60
 80018cc:	f887 3020 	strb.w	r3, [r7, #32]
 80018d0:	230c      	movs	r3, #12
 80018d2:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
 80018d6:	2330      	movs	r3, #48	; 0x30
 80018d8:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 80018dc:	2308      	movs	r3, #8
 80018de:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80018e2:	2303      	movs	r3, #3
 80018e4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

			.TIMESTAMP_EN = ISM330DHCX_DefaultSetting

	};

	ret = ISM330DHCX_Init(&MotionSensor, Init, &SensorIO);
 80018e8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80018ec:	930a      	str	r3, [sp, #40]	; 0x28
 80018ee:	466d      	mov	r5, sp
 80018f0:	f107 0410 	add.w	r4, r7, #16
 80018f4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80018f6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80018f8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80018fa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80018fc:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001900:	e885 0003 	stmia.w	r5, {r0, r1}
 8001904:	1d3b      	adds	r3, r7, #4
 8001906:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001908:	481f      	ldr	r0, [pc, #124]	; (8001988 <BSP_MotionSensorInit+0x100>)
 800190a:	f001 f87b 	bl	8002a04 <ISM330DHCX_Init>
 800190e:	6638      	str	r0, [r7, #96]	; 0x60
	if(ret !=ISM330DHCX_Ok)
 8001910:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001912:	2b00      	cmp	r3, #0
 8001914:	d029      	beq.n	800196a <BSP_MotionSensorInit+0xe2>
	{
		return ret;
 8001916:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001918:	e030      	b.n	800197c <BSP_MotionSensorInit+0xf4>
	}

	//Discard Junk Samples
	while(DiscardedXLSamples < 6 && DiscardedGyroSamples < 6)
	{
        if(BSP_ReadAccelXYZ(&JunkData[0],&JunkData[1],&JunkData[2]) ==ISM330DHCX_DataReady)
 800191a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800191e:	f103 0208 	add.w	r2, r3, #8
 8001922:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001926:	1d19      	adds	r1, r3, #4
 8001928:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800192c:	4618      	mov	r0, r3
 800192e:	f000 f82d 	bl	800198c <BSP_ReadAccelXYZ>
 8001932:	4603      	mov	r3, r0
 8001934:	2b00      	cmp	r3, #0
 8001936:	d104      	bne.n	8001942 <BSP_MotionSensorInit+0xba>
        {
        	DiscardedXLSamples++;
 8001938:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800193c:	3301      	adds	r3, #1
 800193e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        }

        if(BSP_ReadGyroXYZ(&JunkData[0],&JunkData[1],&JunkData[2]) ==ISM330DHCX_DataReady)
 8001942:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001946:	f103 0208 	add.w	r2, r3, #8
 800194a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800194e:	1d19      	adds	r1, r3, #4
 8001950:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001954:	4618      	mov	r0, r3
 8001956:	f000 f835 	bl	80019c4 <BSP_ReadGyroXYZ>
 800195a:	4603      	mov	r3, r0
 800195c:	2b00      	cmp	r3, #0
 800195e:	d104      	bne.n	800196a <BSP_MotionSensorInit+0xe2>
        {
        	DiscardedGyroSamples++;
 8001960:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8001964:	3301      	adds	r3, #1
 8001966:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
	while(DiscardedXLSamples < 6 && DiscardedGyroSamples < 6)
 800196a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800196e:	2b05      	cmp	r3, #5
 8001970:	d803      	bhi.n	800197a <BSP_MotionSensorInit+0xf2>
 8001972:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8001976:	2b05      	cmp	r3, #5
 8001978:	d9cf      	bls.n	800191a <BSP_MotionSensorInit+0x92>
        }
	}
	return ISM330DHCX_Ok;
 800197a:	2300      	movs	r3, #0
}
 800197c:	4618      	mov	r0, r3
 800197e:	3768      	adds	r7, #104	; 0x68
 8001980:	46bd      	mov	sp, r7
 8001982:	bdb0      	pop	{r4, r5, r7, pc}
 8001984:	080148dc 	.word	0x080148dc
 8001988:	2001bdc0 	.word	0x2001bdc0

0800198c <BSP_ReadAccelXYZ>:

int32_t BSP_ReadAccelXYZ(float *Ax, float *Ay, float *Az)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b086      	sub	sp, #24
 8001990:	af00      	add	r7, sp, #0
 8001992:	60f8      	str	r0, [r7, #12]
 8001994:	60b9      	str	r1, [r7, #8]
 8001996:	607a      	str	r2, [r7, #4]
    int32_t ret = 0;
 8001998:	2300      	movs	r3, #0
 800199a:	617b      	str	r3, [r7, #20]
    ret = ISM330DHCX_ReadAccel(&MotionSensor, Ax, Ay, Az);
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	68ba      	ldr	r2, [r7, #8]
 80019a0:	68f9      	ldr	r1, [r7, #12]
 80019a2:	4807      	ldr	r0, [pc, #28]	; (80019c0 <BSP_ReadAccelXYZ+0x34>)
 80019a4:	f001 f8de 	bl	8002b64 <ISM330DHCX_ReadAccel>
 80019a8:	6178      	str	r0, [r7, #20]
    if(ret != ISM330DHCX_DataReady)
 80019aa:	697b      	ldr	r3, [r7, #20]
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d001      	beq.n	80019b4 <BSP_ReadAccelXYZ+0x28>
    {
    	return ret;
 80019b0:	697b      	ldr	r3, [r7, #20]
 80019b2:	e000      	b.n	80019b6 <BSP_ReadAccelXYZ+0x2a>
    }
    return ISM330DHCX_DataReady;
 80019b4:	2300      	movs	r3, #0

}
 80019b6:	4618      	mov	r0, r3
 80019b8:	3718      	adds	r7, #24
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bd80      	pop	{r7, pc}
 80019be:	bf00      	nop
 80019c0:	2001bdc0 	.word	0x2001bdc0

080019c4 <BSP_ReadGyroXYZ>:

int32_t BSP_ReadGyroXYZ(float *Wx, float *Wy, float *Wz)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b086      	sub	sp, #24
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	60f8      	str	r0, [r7, #12]
 80019cc:	60b9      	str	r1, [r7, #8]
 80019ce:	607a      	str	r2, [r7, #4]
    int32_t ret = 0;
 80019d0:	2300      	movs	r3, #0
 80019d2:	617b      	str	r3, [r7, #20]
    ret = ISM330DHCX_ReadGyro(&MotionSensor, Wx, Wy, Wz);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	68ba      	ldr	r2, [r7, #8]
 80019d8:	68f9      	ldr	r1, [r7, #12]
 80019da:	4807      	ldr	r0, [pc, #28]	; (80019f8 <BSP_ReadGyroXYZ+0x34>)
 80019dc:	f001 f921 	bl	8002c22 <ISM330DHCX_ReadGyro>
 80019e0:	6178      	str	r0, [r7, #20]
    if(ret != ISM330DHCX_DataReady)
 80019e2:	697b      	ldr	r3, [r7, #20]
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d001      	beq.n	80019ec <BSP_ReadGyroXYZ+0x28>
    {
    	return ret;
 80019e8:	697b      	ldr	r3, [r7, #20]
 80019ea:	e000      	b.n	80019ee <BSP_ReadGyroXYZ+0x2a>
    }
    return ISM330DHCX_DataReady;
 80019ec:	2300      	movs	r3, #0

}
 80019ee:	4618      	mov	r0, r3
 80019f0:	3718      	adds	r7, #24
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}
 80019f6:	bf00      	nop
 80019f8:	2001bdc0 	.word	0x2001bdc0

080019fc <BSP_SynchronizeIRQ>:
	int32_t ret = ISM330DHCX_GetGyroPeriod(&MotionSensor, Period);
	return ret;
}

void BSP_SynchronizeIRQ(void)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b084      	sub	sp, #16
 8001a00:	af00      	add	r7, sp, #0
    float dummy_data[3];
    //Read any data thats available
    BSP_ReadAccelXYZ(&dummy_data[0],&dummy_data[1],&dummy_data[2]);
 8001a02:	1d3b      	adds	r3, r7, #4
 8001a04:	f103 0208 	add.w	r2, r3, #8
 8001a08:	1d3b      	adds	r3, r7, #4
 8001a0a:	1d19      	adds	r1, r3, #4
 8001a0c:	1d3b      	adds	r3, r7, #4
 8001a0e:	4618      	mov	r0, r3
 8001a10:	f7ff ffbc 	bl	800198c <BSP_ReadAccelXYZ>
    BSP_ReadGyroXYZ(&dummy_data[0],&dummy_data[1],&dummy_data[2]);
 8001a14:	1d3b      	adds	r3, r7, #4
 8001a16:	f103 0208 	add.w	r2, r3, #8
 8001a1a:	1d3b      	adds	r3, r7, #4
 8001a1c:	1d19      	adds	r1, r3, #4
 8001a1e:	1d3b      	adds	r3, r7, #4
 8001a20:	4618      	mov	r0, r3
 8001a22:	f7ff ffcf 	bl	80019c4 <BSP_ReadGyroXYZ>
    //Wait for New Data
    while(BSP_ReadAccelXYZ(&dummy_data[0],&dummy_data[1],&dummy_data[2]) == ISM330DHCX_DataNotReady);
 8001a26:	bf00      	nop
 8001a28:	1d3b      	adds	r3, r7, #4
 8001a2a:	f103 0208 	add.w	r2, r3, #8
 8001a2e:	1d3b      	adds	r3, r7, #4
 8001a30:	1d19      	adds	r1, r3, #4
 8001a32:	1d3b      	adds	r3, r7, #4
 8001a34:	4618      	mov	r0, r3
 8001a36:	f7ff ffa9 	bl	800198c <BSP_ReadAccelXYZ>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	f64b 62ef 	movw	r2, #48879	; 0xbeef
 8001a40:	4293      	cmp	r3, r2
 8001a42:	d0f1      	beq.n	8001a28 <BSP_SynchronizeIRQ+0x2c>
    BSP_ReadGyroXYZ(&dummy_data[0],&dummy_data[1],&dummy_data[2]);
 8001a44:	1d3b      	adds	r3, r7, #4
 8001a46:	f103 0208 	add.w	r2, r3, #8
 8001a4a:	1d3b      	adds	r3, r7, #4
 8001a4c:	1d19      	adds	r1, r3, #4
 8001a4e:	1d3b      	adds	r3, r7, #4
 8001a50:	4618      	mov	r0, r3
 8001a52:	f7ff ffb7 	bl	80019c4 <BSP_ReadGyroXYZ>
    HAL_TIM_Base_Start_IT(&htim7);
 8001a56:	4803      	ldr	r0, [pc, #12]	; (8001a64 <BSP_SynchronizeIRQ+0x68>)
 8001a58:	f00d ffd2 	bl	800fa00 <HAL_TIM_Base_Start_IT>
}
 8001a5c:	bf00      	nop
 8001a5e:	3710      	adds	r7, #16
 8001a60:	46bd      	mov	sp, r7
 8001a62:	bd80      	pop	{r7, pc}
 8001a64:	2001c8d0 	.word	0x2001c8d0

08001a68 <BSP_RamInit>:
#include "octospi.h"
#include <stdint.h>



void BSP_RamInit(void){
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	af00      	add	r7, sp, #0
    OSPI_DelayBlockConfig();
 8001a6c:	f004 fd4c 	bl	8006508 <OSPI_DelayBlockConfig>
    OSPI_EnableMemMappedMode();
 8001a70:	f004 fcee 	bl	8006450 <OSPI_EnableMemMappedMode>
    BSP_RamErase();
 8001a74:	f000 f802 	bl	8001a7c <BSP_RamErase>
   // BSP_RamTest();
}
 8001a78:	bf00      	nop
 8001a7a:	bd80      	pop	{r7, pc}

08001a7c <BSP_RamErase>:

void BSP_RamErase(void){
 8001a7c:	b480      	push	{r7}
 8001a7e:	b083      	sub	sp, #12
 8001a80:	af00      	add	r7, sp, #0
	  uint32_t *pRam = (uint32_t*)OSPI1_RAM_BASE;
 8001a82:	f04f 4310 	mov.w	r3, #2415919104	; 0x90000000
 8001a86:	603b      	str	r3, [r7, #0]
	  for(uint32_t i = 0; i < (OSPI1_RAM_LENGTH / 4); i = i + 1){
 8001a88:	2300      	movs	r3, #0
 8001a8a:	607b      	str	r3, [r7, #4]
 8001a8c:	e008      	b.n	8001aa0 <BSP_RamErase+0x24>
		  *(pRam + i) = 0;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	009b      	lsls	r3, r3, #2
 8001a92:	683a      	ldr	r2, [r7, #0]
 8001a94:	4413      	add	r3, r2
 8001a96:	2200      	movs	r2, #0
 8001a98:	601a      	str	r2, [r3, #0]
	  for(uint32_t i = 0; i < (OSPI1_RAM_LENGTH / 4); i = i + 1){
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	3301      	adds	r3, #1
 8001a9e:	607b      	str	r3, [r7, #4]
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001aa6:	d3f2      	bcc.n	8001a8e <BSP_RamErase+0x12>
	  }
}
 8001aa8:	bf00      	nop
 8001aaa:	bf00      	nop
 8001aac:	370c      	adds	r7, #12
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab4:	4770      	bx	lr
	...

08001ab8 <HTS221_Init>:
static int32_t HTS221_CalculateTemperature(HTS221_Handle_t *Handle, float *temperature);
static int32_t HTS221_CalculateHumidity(HTS221_Handle_t *Handle, float *humidity);


int32_t HTS221_Init(HTS221_Handle_t *Handle, HTS221_Init_Struct_t Settings, HTS221_IO_t *IO)
{
 8001ab8:	b5b0      	push	{r4, r5, r7, lr}
 8001aba:	b084      	sub	sp, #16
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	60f8      	str	r0, [r7, #12]
 8001ac0:	1d38      	adds	r0, r7, #4
 8001ac2:	e880 0006 	stmia.w	r0, {r1, r2}
 8001ac6:	603b      	str	r3, [r7, #0]
    if(Handle == NULL)
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d102      	bne.n	8001ad4 <HTS221_Init+0x1c>
    {
    	return HTS221_Error;
 8001ace:	f04f 33ff 	mov.w	r3, #4294967295
 8001ad2:	e036      	b.n	8001b42 <HTS221_Init+0x8a>
    }
    Handle->IO = *IO;
 8001ad4:	68fa      	ldr	r2, [r7, #12]
 8001ad6:	683b      	ldr	r3, [r7, #0]
 8001ad8:	4614      	mov	r4, r2
 8001ada:	461d      	mov	r5, r3
 8001adc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001ade:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001ae0:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001ae4:	e884 0003 	stmia.w	r4, {r0, r1}
    Handle->Context.Handle = Handle;
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	68fa      	ldr	r2, [r7, #12]
 8001aec:	619a      	str	r2, [r3, #24]
    Handle->Context.Read = HTS221_ReadRegWrapper;
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	4a16      	ldr	r2, [pc, #88]	; (8001b4c <HTS221_Init+0x94>)
 8001af2:	61da      	str	r2, [r3, #28]
    Handle->Context.Write = HTS221_WriteRegWrapper;
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	4a16      	ldr	r2, [pc, #88]	; (8001b50 <HTS221_Init+0x98>)
 8001af8:	621a      	str	r2, [r3, #32]

    if(Settings.DataReadyConfig == HTS221_DataReadyEnable && Handle->IO.ReadPin == NULL)
 8001afa:	7a7b      	ldrb	r3, [r7, #9]
 8001afc:	2b04      	cmp	r3, #4
 8001afe:	d106      	bne.n	8001b0e <HTS221_Init+0x56>
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	695b      	ldr	r3, [r3, #20]
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d102      	bne.n	8001b0e <HTS221_Init+0x56>
    {
    	return HTS221_Error; //Must provide a read pin function if using the data ready pin
 8001b08:	f04f 33ff 	mov.w	r3, #4294967295
 8001b0c:	e019      	b.n	8001b42 <HTS221_Init+0x8a>
    }
    Handle->DRDY_Config = Settings.DataReadyConfig;
 8001b0e:	7a7a      	ldrb	r2, [r7, #9]
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    Handle->DRDY_Polarity = Settings.DataReadySignalPolarity;
 8001b16:	79fa      	ldrb	r2, [r7, #7]
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    //Initialized Bus
    if(Handle->IO.Init != NULL)
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d002      	beq.n	8001b2c <HTS221_Init+0x74>
    {
        Handle->IO.Init();
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	4798      	blx	r3
    }

    Handle->OutputDataRate = Settings.OutputDataRate;
 8001b2c:	79ba      	ldrb	r2, [r7, #6]
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

    //Initialize Device
    return HTS221_RegisterInit(Handle, Settings);
 8001b34:	1d3b      	adds	r3, r7, #4
 8001b36:	e893 0006 	ldmia.w	r3, {r1, r2}
 8001b3a:	68f8      	ldr	r0, [r7, #12]
 8001b3c:	f000 f8d6 	bl	8001cec <HTS221_RegisterInit>
 8001b40:	4603      	mov	r3, r0
}
 8001b42:	4618      	mov	r0, r3
 8001b44:	3710      	adds	r7, #16
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bdb0      	pop	{r4, r5, r7, pc}
 8001b4a:	bf00      	nop
 8001b4c:	08001c91 	.word	0x08001c91
 8001b50:	08001cbf 	.word	0x08001cbf

08001b54 <HTS221_ResetRegisters>:
	temp &= ~HTS221_HEATER_ENABLE;                                           //Modify Reg
	return HTS221_WriteReg(&Handle->Context,HTS221_REG_CTRL_REG2, &temp, 1); //Store Reg
}

int32_t HTS221_ResetRegisters(HTS221_Handle_t *Handle)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b084      	sub	sp, #16
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
	uint8_t temp = HTS221_RebootSignal;
 8001b5c:	2380      	movs	r3, #128	; 0x80
 8001b5e:	73fb      	strb	r3, [r7, #15]
    return HTS221_WriteReg(&Handle->Context, HTS221_REG_CTRL_REG2, &temp, 1);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	f103 0018 	add.w	r0, r3, #24
 8001b66:	f107 020f 	add.w	r2, r7, #15
 8001b6a:	2301      	movs	r3, #1
 8001b6c:	2121      	movs	r1, #33	; 0x21
 8001b6e:	f000 fb44 	bl	80021fa <HTS221_WriteReg>
 8001b72:	4603      	mov	r3, r0
}
 8001b74:	4618      	mov	r0, r3
 8001b76:	3710      	adds	r7, #16
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	bd80      	pop	{r7, pc}

08001b7c <HTS221_ReadTemperature>:
	//turn on
	return HTS221_PowerUp(Handle);
}

int32_t HTS221_ReadTemperature(HTS221_Handle_t *Handle, float *temperature)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b086      	sub	sp, #24
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
 8001b84:	6039      	str	r1, [r7, #0]
    int32_t ret = 0;
 8001b86:	2300      	movs	r3, #0
 8001b88:	617b      	str	r3, [r7, #20]
    uint8_t reg = 0;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	73fb      	strb	r3, [r7, #15]
	//Check if DRDY is used
	if(Handle->DRDY_Config == HTS221_DataReadyEnable)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001b94:	2b04      	cmp	r3, #4
 8001b96:	d116      	bne.n	8001bc6 <HTS221_ReadTemperature+0x4a>
	{
		//If its used, read it.
		int32_t PinState = Handle->IO.ReadPin();
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	695b      	ldr	r3, [r3, #20]
 8001b9c:	4798      	blx	r3
 8001b9e:	6138      	str	r0, [r7, #16]
		//If Its High and Polarity is Active Low OR If its Low and Polarity is Active High, return data not ready
        if((Handle->DRDY_Polarity == HTS221_DataActiveHigh && PinState == 0) || (Handle->DRDY_Polarity == HTS221_DataActiveLow && PinState != 0))
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d102      	bne.n	8001bb0 <HTS221_ReadTemperature+0x34>
 8001baa:	693b      	ldr	r3, [r7, #16]
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d007      	beq.n	8001bc0 <HTS221_ReadTemperature+0x44>
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001bb6:	2b80      	cmp	r3, #128	; 0x80
 8001bb8:	d11c      	bne.n	8001bf4 <HTS221_ReadTemperature+0x78>
 8001bba:	693b      	ldr	r3, [r7, #16]
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d019      	beq.n	8001bf4 <HTS221_ReadTemperature+0x78>
        {
            return HTS221_DataNotReady;
 8001bc0:	f64b 63ef 	movw	r3, #48879	; 0xbeef
 8001bc4:	e01b      	b.n	8001bfe <HTS221_ReadTemperature+0x82>
        }
	} else
	{
		//Otherwise, read the status reg
        ret = HTS221_ReadReg(&Handle->Context, HTS221_REG_STATUS_REG, &reg, 1);
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	f103 0018 	add.w	r0, r3, #24
 8001bcc:	f107 020f 	add.w	r2, r7, #15
 8001bd0:	2301      	movs	r3, #1
 8001bd2:	2127      	movs	r1, #39	; 0x27
 8001bd4:	f000 fae8 	bl	80021a8 <HTS221_ReadReg>
 8001bd8:	6178      	str	r0, [r7, #20]
        if(ret != HTS221_Ok)
 8001bda:	697b      	ldr	r3, [r7, #20]
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d001      	beq.n	8001be4 <HTS221_ReadTemperature+0x68>
        {
        	return ret;
 8001be0:	697b      	ldr	r3, [r7, #20]
 8001be2:	e00c      	b.n	8001bfe <HTS221_ReadTemperature+0x82>
        } else if ((reg & HTS221_TEMPDATA_Msk) == 0)
 8001be4:	7bfb      	ldrb	r3, [r7, #15]
 8001be6:	f003 0301 	and.w	r3, r3, #1
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d102      	bne.n	8001bf4 <HTS221_ReadTemperature+0x78>
        {
        	return HTS221_DataNotReady;
 8001bee:	f64b 63ef 	movw	r3, #48879	; 0xbeef
 8001bf2:	e004      	b.n	8001bfe <HTS221_ReadTemperature+0x82>
        }
	}
    return HTS221_CalculateTemperature(Handle, temperature);
 8001bf4:	6839      	ldr	r1, [r7, #0]
 8001bf6:	6878      	ldr	r0, [r7, #4]
 8001bf8:	f000 f8b6 	bl	8001d68 <HTS221_CalculateTemperature>
 8001bfc:	4603      	mov	r3, r0
}
 8001bfe:	4618      	mov	r0, r3
 8001c00:	3718      	adds	r7, #24
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bd80      	pop	{r7, pc}

08001c06 <HTS221_ReadHumidity>:
int32_t HTS221_ReadHumidity(HTS221_Handle_t *Handle, float *humidity)
{
 8001c06:	b580      	push	{r7, lr}
 8001c08:	b086      	sub	sp, #24
 8001c0a:	af00      	add	r7, sp, #0
 8001c0c:	6078      	str	r0, [r7, #4]
 8001c0e:	6039      	str	r1, [r7, #0]
    int32_t ret = 0;
 8001c10:	2300      	movs	r3, #0
 8001c12:	617b      	str	r3, [r7, #20]
    uint8_t reg = 0;
 8001c14:	2300      	movs	r3, #0
 8001c16:	73fb      	strb	r3, [r7, #15]
	//Check if DRDY is used
	if(Handle->DRDY_Config == HTS221_DataReadyEnable)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001c1e:	2b04      	cmp	r3, #4
 8001c20:	d116      	bne.n	8001c50 <HTS221_ReadHumidity+0x4a>
	{
		//If its used, read it.
		int32_t PinState = Handle->IO.ReadPin();
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	695b      	ldr	r3, [r3, #20]
 8001c26:	4798      	blx	r3
 8001c28:	6138      	str	r0, [r7, #16]
		//If Its High and Polarity is Active Low OR If its Low and Polarity is Active High, return data not ready
        if((Handle->DRDY_Polarity == HTS221_DataActiveHigh && PinState == 0) || (Handle->DRDY_Polarity == HTS221_DataActiveLow && PinState != 0))
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d102      	bne.n	8001c3a <HTS221_ReadHumidity+0x34>
 8001c34:	693b      	ldr	r3, [r7, #16]
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d007      	beq.n	8001c4a <HTS221_ReadHumidity+0x44>
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001c40:	2b80      	cmp	r3, #128	; 0x80
 8001c42:	d11c      	bne.n	8001c7e <HTS221_ReadHumidity+0x78>
 8001c44:	693b      	ldr	r3, [r7, #16]
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d019      	beq.n	8001c7e <HTS221_ReadHumidity+0x78>
        {
            return HTS221_DataNotReady;
 8001c4a:	f64b 63ef 	movw	r3, #48879	; 0xbeef
 8001c4e:	e01b      	b.n	8001c88 <HTS221_ReadHumidity+0x82>
        }
	} else
	{
		//Otherwise, read the status reg
        ret = HTS221_ReadReg(&Handle->Context, HTS221_REG_STATUS_REG, &reg, 1);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	f103 0018 	add.w	r0, r3, #24
 8001c56:	f107 020f 	add.w	r2, r7, #15
 8001c5a:	2301      	movs	r3, #1
 8001c5c:	2127      	movs	r1, #39	; 0x27
 8001c5e:	f000 faa3 	bl	80021a8 <HTS221_ReadReg>
 8001c62:	6178      	str	r0, [r7, #20]
        if(ret != HTS221_Ok)
 8001c64:	697b      	ldr	r3, [r7, #20]
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d001      	beq.n	8001c6e <HTS221_ReadHumidity+0x68>
        {
        	return ret;
 8001c6a:	697b      	ldr	r3, [r7, #20]
 8001c6c:	e00c      	b.n	8001c88 <HTS221_ReadHumidity+0x82>
        } else if ((reg & HTS221_HUMDATA_Msk) == 0)
 8001c6e:	7bfb      	ldrb	r3, [r7, #15]
 8001c70:	f003 0302 	and.w	r3, r3, #2
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d102      	bne.n	8001c7e <HTS221_ReadHumidity+0x78>
        {
        	return HTS221_DataNotReady;
 8001c78:	f64b 63ef 	movw	r3, #48879	; 0xbeef
 8001c7c:	e004      	b.n	8001c88 <HTS221_ReadHumidity+0x82>
        }
	}

	return HTS221_CalculateHumidity(Handle, humidity);
 8001c7e:	6839      	ldr	r1, [r7, #0]
 8001c80:	6878      	ldr	r0, [r7, #4]
 8001c82:	f000 f96b 	bl	8001f5c <HTS221_CalculateHumidity>
 8001c86:	4603      	mov	r3, r0
}
 8001c88:	4618      	mov	r0, r3
 8001c8a:	3718      	adds	r7, #24
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	bd80      	pop	{r7, pc}

08001c90 <HTS221_ReadRegWrapper>:
	return HTS221_WriteReg(&Handle->Context,HTS221_REG_CTRL_REG1, &temp, 1); //Store Reg
}


static int32_t HTS221_ReadRegWrapper(void *Handle, uint8_t Reg, uint8_t *Buffer, uint8_t Length)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b086      	sub	sp, #24
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	60f8      	str	r0, [r7, #12]
 8001c98:	607a      	str	r2, [r7, #4]
 8001c9a:	461a      	mov	r2, r3
 8001c9c:	460b      	mov	r3, r1
 8001c9e:	72fb      	strb	r3, [r7, #11]
 8001ca0:	4613      	mov	r3, r2
 8001ca2:	72bb      	strb	r3, [r7, #10]
	HTS221_Handle_t *HTS221_Handle = Handle;
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	617b      	str	r3, [r7, #20]
	return HTS221_Handle->IO.Read(Reg, Buffer, Length);
 8001ca8:	697b      	ldr	r3, [r7, #20]
 8001caa:	68db      	ldr	r3, [r3, #12]
 8001cac:	7aba      	ldrb	r2, [r7, #10]
 8001cae:	7af8      	ldrb	r0, [r7, #11]
 8001cb0:	6879      	ldr	r1, [r7, #4]
 8001cb2:	4798      	blx	r3
 8001cb4:	4603      	mov	r3, r0
}
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	3718      	adds	r7, #24
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bd80      	pop	{r7, pc}

08001cbe <HTS221_WriteRegWrapper>:

static int32_t HTS221_WriteRegWrapper(void *Handle, uint8_t Reg, uint8_t *Buffer, uint8_t Length)
{
 8001cbe:	b580      	push	{r7, lr}
 8001cc0:	b086      	sub	sp, #24
 8001cc2:	af00      	add	r7, sp, #0
 8001cc4:	60f8      	str	r0, [r7, #12]
 8001cc6:	607a      	str	r2, [r7, #4]
 8001cc8:	461a      	mov	r2, r3
 8001cca:	460b      	mov	r3, r1
 8001ccc:	72fb      	strb	r3, [r7, #11]
 8001cce:	4613      	mov	r3, r2
 8001cd0:	72bb      	strb	r3, [r7, #10]
	HTS221_Handle_t *HTS221_Handle = Handle;
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	617b      	str	r3, [r7, #20]
	return HTS221_Handle->IO.Write(Reg, Buffer, Length);
 8001cd6:	697b      	ldr	r3, [r7, #20]
 8001cd8:	689b      	ldr	r3, [r3, #8]
 8001cda:	7aba      	ldrb	r2, [r7, #10]
 8001cdc:	7af8      	ldrb	r0, [r7, #11]
 8001cde:	6879      	ldr	r1, [r7, #4]
 8001ce0:	4798      	blx	r3
 8001ce2:	4603      	mov	r3, r0
}
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	3718      	adds	r7, #24
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	bd80      	pop	{r7, pc}

08001cec <HTS221_RegisterInit>:

static int32_t HTS221_RegisterInit(HTS221_Handle_t *Handle, HTS221_Init_Struct_t Settings)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b086      	sub	sp, #24
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	60f8      	str	r0, [r7, #12]
 8001cf4:	1d3b      	adds	r3, r7, #4
 8001cf6:	e883 0006 	stmia.w	r3, {r1, r2}
    int32_t ret =  0;
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	617b      	str	r3, [r7, #20]
    uint8_t temp = 0;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	74fb      	strb	r3, [r7, #19]

    //reset registers to factory default
    ret = HTS221_ResetRegisters(Handle);
 8001d02:	68f8      	ldr	r0, [r7, #12]
 8001d04:	f7ff ff26 	bl	8001b54 <HTS221_ResetRegisters>
 8001d08:	6178      	str	r0, [r7, #20]
    if(ret != HTS221_Ok)
 8001d0a:	697b      	ldr	r3, [r7, #20]
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d001      	beq.n	8001d14 <HTS221_RegisterInit+0x28>
    {
    	return ret;
 8001d10:	697b      	ldr	r3, [r7, #20]
 8001d12:	e025      	b.n	8001d60 <HTS221_RegisterInit+0x74>
    }

    temp = HTS221_BDU_ENABLE | Settings.OutputDataRate;
 8001d14:	79bb      	ldrb	r3, [r7, #6]
 8001d16:	f043 0304 	orr.w	r3, r3, #4
 8001d1a:	b2db      	uxtb	r3, r3
 8001d1c:	74fb      	strb	r3, [r7, #19]
    ret = HTS221_WriteReg(&Handle->Context, HTS221_REG_CTRL_REG1, &temp,1);
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	f103 0018 	add.w	r0, r3, #24
 8001d24:	f107 0213 	add.w	r2, r7, #19
 8001d28:	2301      	movs	r3, #1
 8001d2a:	2120      	movs	r1, #32
 8001d2c:	f000 fa65 	bl	80021fa <HTS221_WriteReg>
 8001d30:	6178      	str	r0, [r7, #20]
    if(ret != HTS221_Ok)
 8001d32:	697b      	ldr	r3, [r7, #20]
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d001      	beq.n	8001d3c <HTS221_RegisterInit+0x50>
    {
    	return ret;
 8001d38:	697b      	ldr	r3, [r7, #20]
 8001d3a:	e011      	b.n	8001d60 <HTS221_RegisterInit+0x74>
    }

    temp = Settings.DataReadySignalPolarity | Settings.DataReadyOutputMode | Settings.DataReadyConfig;
 8001d3c:	79fa      	ldrb	r2, [r7, #7]
 8001d3e:	7a3b      	ldrb	r3, [r7, #8]
 8001d40:	4313      	orrs	r3, r2
 8001d42:	b2da      	uxtb	r2, r3
 8001d44:	7a7b      	ldrb	r3, [r7, #9]
 8001d46:	4313      	orrs	r3, r2
 8001d48:	b2db      	uxtb	r3, r3
 8001d4a:	74fb      	strb	r3, [r7, #19]
    return HTS221_WriteReg(&Handle->Context, HTS221_REG_CTRL_REG3, &temp,1);
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	f103 0018 	add.w	r0, r3, #24
 8001d52:	f107 0213 	add.w	r2, r7, #19
 8001d56:	2301      	movs	r3, #1
 8001d58:	2122      	movs	r1, #34	; 0x22
 8001d5a:	f000 fa4e 	bl	80021fa <HTS221_WriteReg>
 8001d5e:	4603      	mov	r3, r0
}
 8001d60:	4618      	mov	r0, r3
 8001d62:	3718      	adds	r7, #24
 8001d64:	46bd      	mov	sp, r7
 8001d66:	bd80      	pop	{r7, pc}

08001d68 <HTS221_CalculateTemperature>:

static int32_t HTS221_CalculateTemperature(HTS221_Handle_t *Handle, float *temperature)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b08a      	sub	sp, #40	; 0x28
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
 8001d70:	6039      	str	r1, [r7, #0]
	int32_t ret = 0;
 8001d72:	2300      	movs	r3, #0
 8001d74:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t Buffer[2] = {0};
 8001d76:	2300      	movs	r3, #0
 8001d78:	81bb      	strh	r3, [r7, #12]
	int16_t temp = 0;
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	847b      	strh	r3, [r7, #34]	; 0x22
    float T0_OUT = 0, T1_OUT = 0;
 8001d7e:	f04f 0300 	mov.w	r3, #0
 8001d82:	61fb      	str	r3, [r7, #28]
 8001d84:	f04f 0300 	mov.w	r3, #0
 8001d88:	61bb      	str	r3, [r7, #24]
    float T1_DEGC = 0,  T0_DEGC = 0;
 8001d8a:	f04f 0300 	mov.w	r3, #0
 8001d8e:	617b      	str	r3, [r7, #20]
 8001d90:	f04f 0300 	mov.w	r3, #0
 8001d94:	613b      	str	r3, [r7, #16]


    //Fetch T0
    ret = HTS221_ReadReg(&Handle->Context, HTS221_REG_T0_OUT, Buffer, 2);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	f103 0018 	add.w	r0, r3, #24
 8001d9c:	f107 020c 	add.w	r2, r7, #12
 8001da0:	2302      	movs	r3, #2
 8001da2:	213c      	movs	r1, #60	; 0x3c
 8001da4:	f000 fa00 	bl	80021a8 <HTS221_ReadReg>
 8001da8:	6278      	str	r0, [r7, #36]	; 0x24
    if(ret != HTS221_Ok)
 8001daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d001      	beq.n	8001db4 <HTS221_CalculateTemperature+0x4c>
    {
    	return ret;
 8001db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001db2:	e0ce      	b.n	8001f52 <HTS221_CalculateTemperature+0x1ea>
    }
    temp = (Buffer[1] << 8) + Buffer[0];
 8001db4:	7b7b      	ldrb	r3, [r7, #13]
 8001db6:	b29b      	uxth	r3, r3
 8001db8:	021b      	lsls	r3, r3, #8
 8001dba:	b29a      	uxth	r2, r3
 8001dbc:	7b3b      	ldrb	r3, [r7, #12]
 8001dbe:	b29b      	uxth	r3, r3
 8001dc0:	4413      	add	r3, r2
 8001dc2:	b29b      	uxth	r3, r3
 8001dc4:	847b      	strh	r3, [r7, #34]	; 0x22
    T0_OUT = temp * 1.0f;
 8001dc6:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8001dca:	ee07 3a90 	vmov	s15, r3
 8001dce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001dd2:	edc7 7a07 	vstr	s15, [r7, #28]

    //Fetch T1
    ret = HTS221_ReadReg(&Handle->Context, HTS221_REG_T1_OUT, Buffer, 2);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	f103 0018 	add.w	r0, r3, #24
 8001ddc:	f107 020c 	add.w	r2, r7, #12
 8001de0:	2302      	movs	r3, #2
 8001de2:	213e      	movs	r1, #62	; 0x3e
 8001de4:	f000 f9e0 	bl	80021a8 <HTS221_ReadReg>
 8001de8:	6278      	str	r0, [r7, #36]	; 0x24
    if(ret != HTS221_Ok)
 8001dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d001      	beq.n	8001df4 <HTS221_CalculateTemperature+0x8c>
    {
    	return ret;
 8001df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001df2:	e0ae      	b.n	8001f52 <HTS221_CalculateTemperature+0x1ea>
    }
    temp = (Buffer[1] << 8) + Buffer[0];
 8001df4:	7b7b      	ldrb	r3, [r7, #13]
 8001df6:	b29b      	uxth	r3, r3
 8001df8:	021b      	lsls	r3, r3, #8
 8001dfa:	b29a      	uxth	r2, r3
 8001dfc:	7b3b      	ldrb	r3, [r7, #12]
 8001dfe:	b29b      	uxth	r3, r3
 8001e00:	4413      	add	r3, r2
 8001e02:	b29b      	uxth	r3, r3
 8001e04:	847b      	strh	r3, [r7, #34]	; 0x22
    T1_OUT = temp * 1.0f;
 8001e06:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8001e0a:	ee07 3a90 	vmov	s15, r3
 8001e0e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e12:	edc7 7a06 	vstr	s15, [r7, #24]

    //Fetch T0DegC
    ret = HTS221_ReadReg(&Handle->Context, HTS221_REG_T0_degC_x8, Buffer, 1); //Get LSB, store in Buffer16
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	f103 0018 	add.w	r0, r3, #24
 8001e1c:	f107 020c 	add.w	r2, r7, #12
 8001e20:	2301      	movs	r3, #1
 8001e22:	2132      	movs	r1, #50	; 0x32
 8001e24:	f000 f9c0 	bl	80021a8 <HTS221_ReadReg>
 8001e28:	6278      	str	r0, [r7, #36]	; 0x24
    if(ret != HTS221_Ok)
 8001e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d001      	beq.n	8001e34 <HTS221_CalculateTemperature+0xcc>
    {
    	return ret;
 8001e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e32:	e08e      	b.n	8001f52 <HTS221_CalculateTemperature+0x1ea>
    }

    ret = HTS221_ReadReg(&Handle->Context, HTS221_REG_T1_T0_msb, &Buffer[1], 1);  //Get MSB, store in Buffer8
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	f103 0018 	add.w	r0, r3, #24
 8001e3a:	f107 030c 	add.w	r3, r7, #12
 8001e3e:	1c5a      	adds	r2, r3, #1
 8001e40:	2301      	movs	r3, #1
 8001e42:	2135      	movs	r1, #53	; 0x35
 8001e44:	f000 f9b0 	bl	80021a8 <HTS221_ReadReg>
 8001e48:	6278      	str	r0, [r7, #36]	; 0x24
    if(ret != HTS221_Ok)
 8001e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d001      	beq.n	8001e54 <HTS221_CalculateTemperature+0xec>
    {
    	return ret;
 8001e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e52:	e07e      	b.n	8001f52 <HTS221_CalculateTemperature+0x1ea>
    }
    temp = ((Buffer[1] & 0x03) << 8) + Buffer[0];
 8001e54:	7b7b      	ldrb	r3, [r7, #13]
 8001e56:	021b      	lsls	r3, r3, #8
 8001e58:	b29b      	uxth	r3, r3
 8001e5a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e5e:	b29a      	uxth	r2, r3
 8001e60:	7b3b      	ldrb	r3, [r7, #12]
 8001e62:	b29b      	uxth	r3, r3
 8001e64:	4413      	add	r3, r2
 8001e66:	b29b      	uxth	r3, r3
 8001e68:	847b      	strh	r3, [r7, #34]	; 0x22
    T0_DEGC = temp / 8.0f; //Calculate
 8001e6a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8001e6e:	ee07 3a90 	vmov	s15, r3
 8001e72:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001e76:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 8001e7a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001e7e:	edc7 7a04 	vstr	s15, [r7, #16]

    //Fetch T1DegC
    ret = HTS221_ReadReg(&Handle->Context, HTS221_REG_T1_degC_x8, Buffer, 1); //Get LSB, store in Buffer16
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	f103 0018 	add.w	r0, r3, #24
 8001e88:	f107 020c 	add.w	r2, r7, #12
 8001e8c:	2301      	movs	r3, #1
 8001e8e:	2133      	movs	r1, #51	; 0x33
 8001e90:	f000 f98a 	bl	80021a8 <HTS221_ReadReg>
 8001e94:	6278      	str	r0, [r7, #36]	; 0x24
    if(ret != HTS221_Ok)
 8001e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d001      	beq.n	8001ea0 <HTS221_CalculateTemperature+0x138>
    {
    	return ret;
 8001e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e9e:	e058      	b.n	8001f52 <HTS221_CalculateTemperature+0x1ea>
    }
    temp = ((Buffer[1] & 0x0C) << 6) + Buffer[0];
 8001ea0:	7b7b      	ldrb	r3, [r7, #13]
 8001ea2:	019b      	lsls	r3, r3, #6
 8001ea4:	b29b      	uxth	r3, r3
 8001ea6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001eaa:	b29a      	uxth	r2, r3
 8001eac:	7b3b      	ldrb	r3, [r7, #12]
 8001eae:	b29b      	uxth	r3, r3
 8001eb0:	4413      	add	r3, r2
 8001eb2:	b29b      	uxth	r3, r3
 8001eb4:	847b      	strh	r3, [r7, #34]	; 0x22
    T1_DEGC = temp / 8.0f; //Calculate
 8001eb6:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8001eba:	ee07 3a90 	vmov	s15, r3
 8001ebe:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001ec2:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 8001ec6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001eca:	edc7 7a05 	vstr	s15, [r7, #20]

    ret = HTS221_ReadReg(&Handle->Context, HTS221_REG_TEMP_OUT_L, Buffer, 2);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	f103 0018 	add.w	r0, r3, #24
 8001ed4:	f107 020c 	add.w	r2, r7, #12
 8001ed8:	2302      	movs	r3, #2
 8001eda:	212a      	movs	r1, #42	; 0x2a
 8001edc:	f000 f964 	bl	80021a8 <HTS221_ReadReg>
 8001ee0:	6278      	str	r0, [r7, #36]	; 0x24
    if(ret != HTS221_Ok)
 8001ee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d001      	beq.n	8001eec <HTS221_CalculateTemperature+0x184>
    {
    	return ret;
 8001ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eea:	e032      	b.n	8001f52 <HTS221_CalculateTemperature+0x1ea>
    }
    temp = (Buffer[1] << 8) + Buffer[0];
 8001eec:	7b7b      	ldrb	r3, [r7, #13]
 8001eee:	b29b      	uxth	r3, r3
 8001ef0:	021b      	lsls	r3, r3, #8
 8001ef2:	b29a      	uxth	r2, r3
 8001ef4:	7b3b      	ldrb	r3, [r7, #12]
 8001ef6:	b29b      	uxth	r3, r3
 8001ef8:	4413      	add	r3, r2
 8001efa:	b29b      	uxth	r3, r3
 8001efc:	847b      	strh	r3, [r7, #34]	; 0x22
    *temperature = (((T1_DEGC - T0_DEGC) * temp) + ((T1_OUT * T0_DEGC) - (T0_OUT * T1_DEGC))) / (T1_OUT - T0_OUT); //Linear Interpolation
 8001efe:	ed97 7a05 	vldr	s14, [r7, #20]
 8001f02:	edd7 7a04 	vldr	s15, [r7, #16]
 8001f06:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001f0a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8001f0e:	ee07 3a90 	vmov	s15, r3
 8001f12:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f16:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001f1a:	edd7 6a06 	vldr	s13, [r7, #24]
 8001f1e:	edd7 7a04 	vldr	s15, [r7, #16]
 8001f22:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001f26:	ed97 6a07 	vldr	s12, [r7, #28]
 8001f2a:	edd7 7a05 	vldr	s15, [r7, #20]
 8001f2e:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001f32:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001f36:	ee77 6a27 	vadd.f32	s13, s14, s15
 8001f3a:	ed97 7a06 	vldr	s14, [r7, #24]
 8001f3e:	edd7 7a07 	vldr	s15, [r7, #28]
 8001f42:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001f46:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	edc3 7a00 	vstr	s15, [r3]
    return HTS221_Ok;
 8001f50:	2300      	movs	r3, #0
}
 8001f52:	4618      	mov	r0, r3
 8001f54:	3728      	adds	r7, #40	; 0x28
 8001f56:	46bd      	mov	sp, r7
 8001f58:	bd80      	pop	{r7, pc}
	...

08001f5c <HTS221_CalculateHumidity>:

static int32_t HTS221_CalculateHumidity(HTS221_Handle_t *Handle, float *humidity)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b08a      	sub	sp, #40	; 0x28
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
 8001f64:	6039      	str	r1, [r7, #0]
	int32_t ret = 0;
 8001f66:	2300      	movs	r3, #0
 8001f68:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t Buffer[2] = {0};
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	813b      	strh	r3, [r7, #8]
	int16_t temp = 0;
 8001f6e:	2300      	movs	r3, #0
 8001f70:	847b      	strh	r3, [r7, #34]	; 0x22
    float H0_OUT = 0, H1_OUT = 0;
 8001f72:	f04f 0300 	mov.w	r3, #0
 8001f76:	61fb      	str	r3, [r7, #28]
 8001f78:	f04f 0300 	mov.w	r3, #0
 8001f7c:	61bb      	str	r3, [r7, #24]
    float H1_REL = 0,  H0_REL = 0;
 8001f7e:	f04f 0300 	mov.w	r3, #0
 8001f82:	617b      	str	r3, [r7, #20]
 8001f84:	f04f 0300 	mov.w	r3, #0
 8001f88:	613b      	str	r3, [r7, #16]
    float result = 0;
 8001f8a:	f04f 0300 	mov.w	r3, #0
 8001f8e:	60fb      	str	r3, [r7, #12]

    //Fetch H0
    ret = HTS221_ReadReg(&Handle->Context, HTS221_REG_H0_T0_OUT, Buffer, 2);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	f103 0018 	add.w	r0, r3, #24
 8001f96:	f107 0208 	add.w	r2, r7, #8
 8001f9a:	2302      	movs	r3, #2
 8001f9c:	2136      	movs	r1, #54	; 0x36
 8001f9e:	f000 f903 	bl	80021a8 <HTS221_ReadReg>
 8001fa2:	6278      	str	r0, [r7, #36]	; 0x24
    if(ret != HTS221_Ok)
 8001fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d001      	beq.n	8001fae <HTS221_CalculateHumidity+0x52>
    {
    	return ret;
 8001faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fac:	e0c1      	b.n	8002132 <HTS221_CalculateHumidity+0x1d6>
    }
    temp = (Buffer[1] << 8) + Buffer[0];
 8001fae:	7a7b      	ldrb	r3, [r7, #9]
 8001fb0:	b29b      	uxth	r3, r3
 8001fb2:	021b      	lsls	r3, r3, #8
 8001fb4:	b29a      	uxth	r2, r3
 8001fb6:	7a3b      	ldrb	r3, [r7, #8]
 8001fb8:	b29b      	uxth	r3, r3
 8001fba:	4413      	add	r3, r2
 8001fbc:	b29b      	uxth	r3, r3
 8001fbe:	847b      	strh	r3, [r7, #34]	; 0x22
    H0_OUT = temp * 1.0f;
 8001fc0:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8001fc4:	ee07 3a90 	vmov	s15, r3
 8001fc8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001fcc:	edc7 7a07 	vstr	s15, [r7, #28]

    //Fetch H1
    ret = HTS221_ReadReg(&Handle->Context, HTS221_REG_H1_T0_OUT, Buffer, 2);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	f103 0018 	add.w	r0, r3, #24
 8001fd6:	f107 0208 	add.w	r2, r7, #8
 8001fda:	2302      	movs	r3, #2
 8001fdc:	213a      	movs	r1, #58	; 0x3a
 8001fde:	f000 f8e3 	bl	80021a8 <HTS221_ReadReg>
 8001fe2:	6278      	str	r0, [r7, #36]	; 0x24
    if(ret != HTS221_Ok)
 8001fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d001      	beq.n	8001fee <HTS221_CalculateHumidity+0x92>
    {
    	return ret;
 8001fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fec:	e0a1      	b.n	8002132 <HTS221_CalculateHumidity+0x1d6>
    }
    temp = (Buffer[1] << 8) + Buffer[0];
 8001fee:	7a7b      	ldrb	r3, [r7, #9]
 8001ff0:	b29b      	uxth	r3, r3
 8001ff2:	021b      	lsls	r3, r3, #8
 8001ff4:	b29a      	uxth	r2, r3
 8001ff6:	7a3b      	ldrb	r3, [r7, #8]
 8001ff8:	b29b      	uxth	r3, r3
 8001ffa:	4413      	add	r3, r2
 8001ffc:	b29b      	uxth	r3, r3
 8001ffe:	847b      	strh	r3, [r7, #34]	; 0x22
    H1_OUT = temp * 1.0f;
 8002000:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8002004:	ee07 3a90 	vmov	s15, r3
 8002008:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800200c:	edc7 7a06 	vstr	s15, [r7, #24]

    //Fetch H0_Rh
    ret = HTS221_ReadReg(&Handle->Context, HTS221_REG_H0_rH_x2, Buffer, 1);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	f103 0018 	add.w	r0, r3, #24
 8002016:	f107 0208 	add.w	r2, r7, #8
 800201a:	2301      	movs	r3, #1
 800201c:	2130      	movs	r1, #48	; 0x30
 800201e:	f000 f8c3 	bl	80021a8 <HTS221_ReadReg>
 8002022:	6278      	str	r0, [r7, #36]	; 0x24
    if(ret != HTS221_Ok)
 8002024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002026:	2b00      	cmp	r3, #0
 8002028:	d001      	beq.n	800202e <HTS221_CalculateHumidity+0xd2>
    {
    	return ret;
 800202a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800202c:	e081      	b.n	8002132 <HTS221_CalculateHumidity+0x1d6>
    }
    H0_REL = Buffer[0] / 2.0f;
 800202e:	7a3b      	ldrb	r3, [r7, #8]
 8002030:	ee07 3a90 	vmov	s15, r3
 8002034:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002038:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800203c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002040:	edc7 7a04 	vstr	s15, [r7, #16]

    //Fetch H0_Rh
    ret = HTS221_ReadReg(&Handle->Context, HTS221_REG_H1_rH_x2, Buffer, 1);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	f103 0018 	add.w	r0, r3, #24
 800204a:	f107 0208 	add.w	r2, r7, #8
 800204e:	2301      	movs	r3, #1
 8002050:	2131      	movs	r1, #49	; 0x31
 8002052:	f000 f8a9 	bl	80021a8 <HTS221_ReadReg>
 8002056:	6278      	str	r0, [r7, #36]	; 0x24
    if(ret != HTS221_Ok)
 8002058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800205a:	2b00      	cmp	r3, #0
 800205c:	d001      	beq.n	8002062 <HTS221_CalculateHumidity+0x106>
    {
    	return ret;
 800205e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002060:	e067      	b.n	8002132 <HTS221_CalculateHumidity+0x1d6>
    }
    H1_REL = Buffer[0] / 2.0f;
 8002062:	7a3b      	ldrb	r3, [r7, #8]
 8002064:	ee07 3a90 	vmov	s15, r3
 8002068:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800206c:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8002070:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002074:	edc7 7a05 	vstr	s15, [r7, #20]

    //Fetch Measurement
    ret = HTS221_ReadReg(&Handle->Context, HTS221_REG_HUMIDITY_OUT_L, Buffer, 2);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	f103 0018 	add.w	r0, r3, #24
 800207e:	f107 0208 	add.w	r2, r7, #8
 8002082:	2302      	movs	r3, #2
 8002084:	2128      	movs	r1, #40	; 0x28
 8002086:	f000 f88f 	bl	80021a8 <HTS221_ReadReg>
 800208a:	6278      	str	r0, [r7, #36]	; 0x24
    if(ret != HTS221_Ok)
 800208c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800208e:	2b00      	cmp	r3, #0
 8002090:	d001      	beq.n	8002096 <HTS221_CalculateHumidity+0x13a>
    {
    	return ret;
 8002092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002094:	e04d      	b.n	8002132 <HTS221_CalculateHumidity+0x1d6>
    }
    temp = (Buffer[1] << 8) + Buffer[0];
 8002096:	7a7b      	ldrb	r3, [r7, #9]
 8002098:	b29b      	uxth	r3, r3
 800209a:	021b      	lsls	r3, r3, #8
 800209c:	b29a      	uxth	r2, r3
 800209e:	7a3b      	ldrb	r3, [r7, #8]
 80020a0:	b29b      	uxth	r3, r3
 80020a2:	4413      	add	r3, r2
 80020a4:	b29b      	uxth	r3, r3
 80020a6:	847b      	strh	r3, [r7, #34]	; 0x22
    result = (((H1_REL - H0_REL) * temp) + ((H1_OUT * H0_REL) - (H0_OUT * H1_REL))) / (H1_OUT - H0_OUT); //Linear Interpolation
 80020a8:	ed97 7a05 	vldr	s14, [r7, #20]
 80020ac:	edd7 7a04 	vldr	s15, [r7, #16]
 80020b0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80020b4:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80020b8:	ee07 3a90 	vmov	s15, r3
 80020bc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80020c0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80020c4:	edd7 6a06 	vldr	s13, [r7, #24]
 80020c8:	edd7 7a04 	vldr	s15, [r7, #16]
 80020cc:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80020d0:	ed97 6a07 	vldr	s12, [r7, #28]
 80020d4:	edd7 7a05 	vldr	s15, [r7, #20]
 80020d8:	ee66 7a27 	vmul.f32	s15, s12, s15
 80020dc:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80020e0:	ee77 6a27 	vadd.f32	s13, s14, s15
 80020e4:	ed97 7a06 	vldr	s14, [r7, #24]
 80020e8:	edd7 7a07 	vldr	s15, [r7, #28]
 80020ec:	ee37 7a67 	vsub.f32	s14, s14, s15
 80020f0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80020f4:	edc7 7a03 	vstr	s15, [r7, #12]
    if(result > 100.0)
 80020f8:	edd7 7a03 	vldr	s15, [r7, #12]
 80020fc:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 800213c <HTS221_CalculateHumidity+0x1e0>
 8002100:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002104:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002108:	dd03      	ble.n	8002112 <HTS221_CalculateHumidity+0x1b6>
    {
    	*humidity = 100.0;
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	4a0c      	ldr	r2, [pc, #48]	; (8002140 <HTS221_CalculateHumidity+0x1e4>)
 800210e:	601a      	str	r2, [r3, #0]
 8002110:	e00e      	b.n	8002130 <HTS221_CalculateHumidity+0x1d4>
    } else if (result < 0.0)
 8002112:	edd7 7a03 	vldr	s15, [r7, #12]
 8002116:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800211a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800211e:	d504      	bpl.n	800212a <HTS221_CalculateHumidity+0x1ce>
    {
    	*humidity = 0.0;
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	f04f 0200 	mov.w	r2, #0
 8002126:	601a      	str	r2, [r3, #0]
 8002128:	e002      	b.n	8002130 <HTS221_CalculateHumidity+0x1d4>
    } else
    {
    	*humidity = result;
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	68fa      	ldr	r2, [r7, #12]
 800212e:	601a      	str	r2, [r3, #0]
    }

    return HTS221_Ok;
 8002130:	2300      	movs	r3, #0
}
 8002132:	4618      	mov	r0, r3
 8002134:	3728      	adds	r7, #40	; 0x28
 8002136:	46bd      	mov	sp, r7
 8002138:	bd80      	pop	{r7, pc}
 800213a:	bf00      	nop
 800213c:	42c80000 	.word	0x42c80000
 8002140:	42c80000 	.word	0x42c80000

08002144 <HTS221_GetSamplePeriod>:

int32_t HTS221_GetSamplePeriod(HTS221_Handle_t *Handle, uint32_t *Period)
{
 8002144:	b480      	push	{r7}
 8002146:	b083      	sub	sp, #12
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
 800214c:	6039      	str	r1, [r7, #0]
	switch(Handle->OutputDataRate)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8002154:	2b03      	cmp	r3, #3
 8002156:	d81d      	bhi.n	8002194 <HTS221_GetSamplePeriod+0x50>
 8002158:	a201      	add	r2, pc, #4	; (adr r2, 8002160 <HTS221_GetSamplePeriod+0x1c>)
 800215a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800215e:	bf00      	nop
 8002160:	08002171 	.word	0x08002171
 8002164:	0800217b 	.word	0x0800217b
 8002168:	08002185 	.word	0x08002185
 800216c:	0800218d 	.word	0x0800218d
	{
	case(HTS221_OneShotMode):
			*Period = 0;
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	2200      	movs	r2, #0
 8002174:	601a      	str	r2, [r3, #0]
	        return HTS221_PeriodOneShot;
 8002176:	2301      	movs	r3, #1
 8002178:	e010      	b.n	800219c <HTS221_GetSamplePeriod+0x58>
			break;
	case(HTS221_1_0Hz):
			*Period = 1000;
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002180:	601a      	str	r2, [r3, #0]
			break;
 8002182:	e00a      	b.n	800219a <HTS221_GetSamplePeriod+0x56>
	case(HTS221_7_0p0Hz):
			*Period = 143;
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	228f      	movs	r2, #143	; 0x8f
 8002188:	601a      	str	r2, [r3, #0]
	        break;
 800218a:	e006      	b.n	800219a <HTS221_GetSamplePeriod+0x56>
	case(HTS221_12_5Hz):
			*Period = 80;
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	2250      	movs	r2, #80	; 0x50
 8002190:	601a      	str	r2, [r3, #0]
	        break;
 8002192:	e002      	b.n	800219a <HTS221_GetSamplePeriod+0x56>
	default:
		   return HTS221_ODR_Error;
 8002194:	f06f 0301 	mvn.w	r3, #1
 8002198:	e000      	b.n	800219c <HTS221_GetSamplePeriod+0x58>
	}
	return HTS221_Ok;
 800219a:	2300      	movs	r3, #0
}
 800219c:	4618      	mov	r0, r3
 800219e:	370c      	adds	r7, #12
 80021a0:	46bd      	mov	sp, r7
 80021a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a6:	4770      	bx	lr

080021a8 <HTS221_ReadReg>:
#include "stddef.h"

static int32_t HTS221_ValidateParams(uint8_t Reg, uint8_t *Buffer, uint8_t Length);

int32_t HTS221_ReadReg(HTS221_Context_t *Context, uint8_t Reg, uint8_t *Buffer, uint8_t Length)
{
 80021a8:	b590      	push	{r4, r7, lr}
 80021aa:	b087      	sub	sp, #28
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	60f8      	str	r0, [r7, #12]
 80021b0:	607a      	str	r2, [r7, #4]
 80021b2:	461a      	mov	r2, r3
 80021b4:	460b      	mov	r3, r1
 80021b6:	72fb      	strb	r3, [r7, #11]
 80021b8:	4613      	mov	r3, r2
 80021ba:	72bb      	strb	r3, [r7, #10]
	int32_t ret = HTS221_ValidateParams(Reg,Buffer,Length);
 80021bc:	7aba      	ldrb	r2, [r7, #10]
 80021be:	7afb      	ldrb	r3, [r7, #11]
 80021c0:	6879      	ldr	r1, [r7, #4]
 80021c2:	4618      	mov	r0, r3
 80021c4:	f000 f842 	bl	800224c <HTS221_ValidateParams>
 80021c8:	6178      	str	r0, [r7, #20]
	if(ret != HTS221_REG_NO_ERR)
 80021ca:	697b      	ldr	r3, [r7, #20]
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d001      	beq.n	80021d4 <HTS221_ReadReg+0x2c>
	{
        return ret;
 80021d0:	697b      	ldr	r3, [r7, #20]
 80021d2:	e00e      	b.n	80021f2 <HTS221_ReadReg+0x4a>
	}

    if(Context->Read != NULL)
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	685b      	ldr	r3, [r3, #4]
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d009      	beq.n	80021f0 <HTS221_ReadReg+0x48>
    {
        return Context->Read(Context->Handle, Reg, Buffer, Length);
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	685c      	ldr	r4, [r3, #4]
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	6818      	ldr	r0, [r3, #0]
 80021e4:	7abb      	ldrb	r3, [r7, #10]
 80021e6:	7af9      	ldrb	r1, [r7, #11]
 80021e8:	687a      	ldr	r2, [r7, #4]
 80021ea:	47a0      	blx	r4
 80021ec:	4603      	mov	r3, r0
 80021ee:	e000      	b.n	80021f2 <HTS221_ReadReg+0x4a>
    }

    return HTS221_REG_CONTEXT_ERR;
 80021f0:	2308      	movs	r3, #8
}
 80021f2:	4618      	mov	r0, r3
 80021f4:	371c      	adds	r7, #28
 80021f6:	46bd      	mov	sp, r7
 80021f8:	bd90      	pop	{r4, r7, pc}

080021fa <HTS221_WriteReg>:

int32_t HTS221_WriteReg(HTS221_Context_t *Context,uint8_t Reg, uint8_t *Buffer, uint8_t Length)
{
 80021fa:	b590      	push	{r4, r7, lr}
 80021fc:	b087      	sub	sp, #28
 80021fe:	af00      	add	r7, sp, #0
 8002200:	60f8      	str	r0, [r7, #12]
 8002202:	607a      	str	r2, [r7, #4]
 8002204:	461a      	mov	r2, r3
 8002206:	460b      	mov	r3, r1
 8002208:	72fb      	strb	r3, [r7, #11]
 800220a:	4613      	mov	r3, r2
 800220c:	72bb      	strb	r3, [r7, #10]
	int32_t ret = HTS221_ValidateParams(Reg,Buffer,Length);
 800220e:	7aba      	ldrb	r2, [r7, #10]
 8002210:	7afb      	ldrb	r3, [r7, #11]
 8002212:	6879      	ldr	r1, [r7, #4]
 8002214:	4618      	mov	r0, r3
 8002216:	f000 f819 	bl	800224c <HTS221_ValidateParams>
 800221a:	6178      	str	r0, [r7, #20]
	if(ret != HTS221_REG_NO_ERR)
 800221c:	697b      	ldr	r3, [r7, #20]
 800221e:	2b00      	cmp	r3, #0
 8002220:	d001      	beq.n	8002226 <HTS221_WriteReg+0x2c>
	{
        return ret;
 8002222:	697b      	ldr	r3, [r7, #20]
 8002224:	e00e      	b.n	8002244 <HTS221_WriteReg+0x4a>
	}

	if(Context->Write != NULL)
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	689b      	ldr	r3, [r3, #8]
 800222a:	2b00      	cmp	r3, #0
 800222c:	d009      	beq.n	8002242 <HTS221_WriteReg+0x48>
	{
	    return Context->Write(Context->Handle, Reg, Buffer, Length);
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	689c      	ldr	r4, [r3, #8]
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	6818      	ldr	r0, [r3, #0]
 8002236:	7abb      	ldrb	r3, [r7, #10]
 8002238:	7af9      	ldrb	r1, [r7, #11]
 800223a:	687a      	ldr	r2, [r7, #4]
 800223c:	47a0      	blx	r4
 800223e:	4603      	mov	r3, r0
 8002240:	e000      	b.n	8002244 <HTS221_WriteReg+0x4a>
	}

	return HTS221_REG_CONTEXT_ERR;
 8002242:	2308      	movs	r3, #8
}
 8002244:	4618      	mov	r0, r3
 8002246:	371c      	adds	r7, #28
 8002248:	46bd      	mov	sp, r7
 800224a:	bd90      	pop	{r4, r7, pc}

0800224c <HTS221_ValidateParams>:

static int32_t HTS221_ValidateParams(uint8_t Reg, uint8_t *Buffer, uint8_t Length)
{
 800224c:	b480      	push	{r7}
 800224e:	b085      	sub	sp, #20
 8002250:	af00      	add	r7, sp, #0
 8002252:	4603      	mov	r3, r0
 8002254:	6039      	str	r1, [r7, #0]
 8002256:	71fb      	strb	r3, [r7, #7]
 8002258:	4613      	mov	r3, r2
 800225a:	71bb      	strb	r3, [r7, #6]
	uint32_t ret = 0;
 800225c:	2300      	movs	r3, #0
 800225e:	60fb      	str	r3, [r7, #12]

	if(Reg < HTS221_REG_WHO_AM_I || Reg > 0x3F)
 8002260:	79fb      	ldrb	r3, [r7, #7]
 8002262:	2b0e      	cmp	r3, #14
 8002264:	d902      	bls.n	800226c <HTS221_ValidateParams+0x20>
 8002266:	79fb      	ldrb	r3, [r7, #7]
 8002268:	2b3f      	cmp	r3, #63	; 0x3f
 800226a:	d903      	bls.n	8002274 <HTS221_ValidateParams+0x28>
	{
		 ret |= HTS221_REG_PARAM_ERR;
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	f043 0301 	orr.w	r3, r3, #1
 8002272:	60fb      	str	r3, [r7, #12]
	}

	if(Buffer == NULL)
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	2b00      	cmp	r3, #0
 8002278:	d103      	bne.n	8002282 <HTS221_ValidateParams+0x36>
	{
		ret |= HTS221_BUFFER_PARAM_ERR;
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	f043 0302 	orr.w	r3, r3, #2
 8002280:	60fb      	str	r3, [r7, #12]
	}

	if(Length == 0 || Length > (0x3F - HTS221_REG_WHO_AM_I))
 8002282:	79bb      	ldrb	r3, [r7, #6]
 8002284:	2b00      	cmp	r3, #0
 8002286:	d002      	beq.n	800228e <HTS221_ValidateParams+0x42>
 8002288:	79bb      	ldrb	r3, [r7, #6]
 800228a:	2b30      	cmp	r3, #48	; 0x30
 800228c:	d903      	bls.n	8002296 <HTS221_ValidateParams+0x4a>
	{  //0x3F - 0x0F = 0x30 readable registers
        ret |= HTS221_LENGTH_PARAM_ERR;
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	f043 0304 	orr.w	r3, r3, #4
 8002294:	60fb      	str	r3, [r7, #12]
	}

	return ret;
 8002296:	68fb      	ldr	r3, [r7, #12]
}
 8002298:	4618      	mov	r0, r3
 800229a:	3714      	adds	r7, #20
 800229c:	46bd      	mov	sp, r7
 800229e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a2:	4770      	bx	lr

080022a4 <IIS2MDC_Init>:
static void ConvertMagData(uint8_t *buffer, float *magnetism);
static void DeConvertMagData(float magnetism, uint8_t *buffer);


int32_t IIS2MDC_Init(IIS2MDC_Handle_t *Handle, IIS2MDC_InitStruct_t Settings, IIS2MDC_IO_t *IO)
{
 80022a4:	b084      	sub	sp, #16
 80022a6:	b5b0      	push	{r4, r5, r7, lr}
 80022a8:	b086      	sub	sp, #24
 80022aa:	af02      	add	r7, sp, #8
 80022ac:	6078      	str	r0, [r7, #4]
 80022ae:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80022b2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    if(Handle->Status != IIS2MDC_Initialized)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80022bc:	2b01      	cmp	r3, #1
 80022be:	f000 80a5 	beq.w	800240c <IIS2MDC_Init+0x168>
    {
        if(Handle == NULL)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d102      	bne.n	80022ce <IIS2MDC_Init+0x2a>
        {
            return IIS2MDC_HandleError;
 80022c8:	f04f 33ff 	mov.w	r3, #4294967295
 80022cc:	e09f      	b.n	800240e <IIS2MDC_Init+0x16a>
        }

        if(IO->Read == NULL || IO->Write == NULL || IO->GetTick == NULL)
 80022ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022d0:	68db      	ldr	r3, [r3, #12]
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d007      	beq.n	80022e6 <IIS2MDC_Init+0x42>
 80022d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022d8:	689b      	ldr	r3, [r3, #8]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d003      	beq.n	80022e6 <IIS2MDC_Init+0x42>
 80022de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022e0:	695b      	ldr	r3, [r3, #20]
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d102      	bne.n	80022ec <IIS2MDC_Init+0x48>
        {
        	return IIS2MDC_IOError;
 80022e6:	f06f 0301 	mvn.w	r3, #1
 80022ea:	e090      	b.n	800240e <IIS2MDC_Init+0x16a>
        }

        if(Settings.IntThreshold > 49150.5  || Settings.OffsetX > 49150.5 || Settings.OffsetY > 49150.5  || Settings.OffsetZ > 49150.5)
 80022ec:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80022f0:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 800241c <IIS2MDC_Init+0x178>
 80022f4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80022f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022fc:	dc1a      	bgt.n	8002334 <IIS2MDC_Init+0x90>
 80022fe:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002302:	ed9f 7a46 	vldr	s14, [pc, #280]	; 800241c <IIS2MDC_Init+0x178>
 8002306:	eef4 7ac7 	vcmpe.f32	s15, s14
 800230a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800230e:	dc11      	bgt.n	8002334 <IIS2MDC_Init+0x90>
 8002310:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8002314:	ed9f 7a41 	vldr	s14, [pc, #260]	; 800241c <IIS2MDC_Init+0x178>
 8002318:	eef4 7ac7 	vcmpe.f32	s15, s14
 800231c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002320:	dc08      	bgt.n	8002334 <IIS2MDC_Init+0x90>
 8002322:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8002326:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 800241c <IIS2MDC_Init+0x178>
 800232a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800232e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002332:	dd02      	ble.n	800233a <IIS2MDC_Init+0x96>
        {
        	return IIS2MDC_FloatError;
 8002334:	f06f 0303 	mvn.w	r3, #3
 8002338:	e069      	b.n	800240e <IIS2MDC_Init+0x16a>
        }

        if(Settings.IntThreshold < -49150.5 || Settings.OffsetX < -49150.5 || Settings.OffsetY < -49150.5  || Settings.OffsetZ < -49150.5)
 800233a:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800233e:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8002420 <IIS2MDC_Init+0x17c>
 8002342:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002346:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800234a:	d41a      	bmi.n	8002382 <IIS2MDC_Init+0xde>
 800234c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002350:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8002420 <IIS2MDC_Init+0x17c>
 8002354:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002358:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800235c:	d411      	bmi.n	8002382 <IIS2MDC_Init+0xde>
 800235e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8002362:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8002420 <IIS2MDC_Init+0x17c>
 8002366:	eef4 7ac7 	vcmpe.f32	s15, s14
 800236a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800236e:	d408      	bmi.n	8002382 <IIS2MDC_Init+0xde>
 8002370:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8002374:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8002420 <IIS2MDC_Init+0x17c>
 8002378:	eef4 7ac7 	vcmpe.f32	s15, s14
 800237c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002380:	d502      	bpl.n	8002388 <IIS2MDC_Init+0xe4>
        {
        	return IIS2MDC_FloatError;
 8002382:	f06f 0303 	mvn.w	r3, #3
 8002386:	e042      	b.n	800240e <IIS2MDC_Init+0x16a>
        }

        Handle->IO = *IO;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800238c:	f103 040c 	add.w	r4, r3, #12
 8002390:	4615      	mov	r5, r2
 8002392:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002394:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002396:	e895 0003 	ldmia.w	r5, {r0, r1}
 800239a:	e884 0003 	stmia.w	r4, {r0, r1}
        Handle->Context.Handle = Handle;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	687a      	ldr	r2, [r7, #4]
 80023a2:	601a      	str	r2, [r3, #0]
        Handle->Context.Read = IIS2MDC_ReadRegWrapper;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	4a1f      	ldr	r2, [pc, #124]	; (8002424 <IIS2MDC_Init+0x180>)
 80023a8:	605a      	str	r2, [r3, #4]
        Handle->Context.Write = IIS2MDC_WriteRegWrapper;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	4a1e      	ldr	r2, [pc, #120]	; (8002428 <IIS2MDC_Init+0x184>)
 80023ae:	609a      	str	r2, [r3, #8]
        if((Settings.ConfigRegA & IIS2MDC_ODR_Msk) == IIS2MDC_ODR_OneShot)
 80023b0:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80023b4:	f003 030f 	and.w	r3, r3, #15
 80023b8:	2b01      	cmp	r3, #1
 80023ba:	d104      	bne.n	80023c6 <IIS2MDC_Init+0x122>
        {
        	Handle->DataMode = IIS2MDC_OneShotMode;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	2200      	movs	r2, #0
 80023c0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
 80023c4:	e003      	b.n	80023ce <IIS2MDC_Init+0x12a>
        } else
        {
        	Handle->DataMode = IIS2MDC_Continuous;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	2201      	movs	r2, #1
 80023ca:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
        }

        Handle->OutputDataRate = Settings.ConfigRegA & IIS2MDC_ODR_Msk;
 80023ce:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80023d2:	f003 030f 	and.w	r3, r3, #15
 80023d6:	b2da      	uxtb	r2, r3
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
        int32_t ret = IIS2MDC_RegisterInit(Handle, Settings);
 80023de:	466a      	mov	r2, sp
 80023e0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80023e4:	e893 0003 	ldmia.w	r3, {r0, r1}
 80023e8:	e882 0003 	stmia.w	r2, {r0, r1}
 80023ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80023f0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80023f2:	6878      	ldr	r0, [r7, #4]
 80023f4:	f000 f8d8 	bl	80025a8 <IIS2MDC_RegisterInit>
 80023f8:	60f8      	str	r0, [r7, #12]
        if(ret != IIS2MDC_Ok)
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d001      	beq.n	8002404 <IIS2MDC_Init+0x160>
        {
        	return ret;
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	e004      	b.n	800240e <IIS2MDC_Init+0x16a>
        }
        Handle->Status = IIS2MDC_Initialized;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	2201      	movs	r2, #1
 8002408:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    }
    return IIS2MDC_Ok;
 800240c:	2300      	movs	r3, #0
}
 800240e:	4618      	mov	r0, r3
 8002410:	3710      	adds	r7, #16
 8002412:	46bd      	mov	sp, r7
 8002414:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8002418:	b004      	add	sp, #16
 800241a:	4770      	bx	lr
 800241c:	473ffe80 	.word	0x473ffe80
 8002420:	c73ffe80 	.word	0xc73ffe80
 8002424:	0800256d 	.word	0x0800256d
 8002428:	08002531 	.word	0x08002531

0800242c <IIS2MDC_ResetDevice>:

    return IIS2MDC_Ok;
}

int32_t IIS2MDC_ResetDevice(IIS2MDC_Handle_t *Handle)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b084      	sub	sp, #16
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
	int32_t ret = IIS2MDC_Ok;
 8002434:	2300      	movs	r3, #0
 8002436:	60fb      	str	r3, [r7, #12]
	if(Handle == NULL)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2b00      	cmp	r3, #0
 800243c:	d102      	bne.n	8002444 <IIS2MDC_ResetDevice+0x18>
	{
		return IIS2MDC_HandleError;
 800243e:	f04f 33ff 	mov.w	r3, #4294967295
 8002442:	e021      	b.n	8002488 <IIS2MDC_ResetDevice+0x5c>
	}

    if(Handle->IO.Write == NULL || Handle->IO.Read == NULL || Handle->IO.GetTick == NULL)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	695b      	ldr	r3, [r3, #20]
 8002448:	2b00      	cmp	r3, #0
 800244a:	d007      	beq.n	800245c <IIS2MDC_ResetDevice+0x30>
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	699b      	ldr	r3, [r3, #24]
 8002450:	2b00      	cmp	r3, #0
 8002452:	d003      	beq.n	800245c <IIS2MDC_ResetDevice+0x30>
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	6a1b      	ldr	r3, [r3, #32]
 8002458:	2b00      	cmp	r3, #0
 800245a:	d102      	bne.n	8002462 <IIS2MDC_ResetDevice+0x36>
    {
    	return IIS2MDC_IOError;
 800245c:	f06f 0301 	mvn.w	r3, #1
 8002460:	e012      	b.n	8002488 <IIS2MDC_ResetDevice+0x5c>
    }

	ret = IIS2MDC_Reboot(Handle);
 8002462:	6878      	ldr	r0, [r7, #4]
 8002464:	f000 f98b 	bl	800277e <IIS2MDC_Reboot>
 8002468:	60f8      	str	r0, [r7, #12]
	if(ret != IIS2MDC_Ok)
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	2b00      	cmp	r3, #0
 800246e:	d001      	beq.n	8002474 <IIS2MDC_ResetDevice+0x48>
	{
		return ret;
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	e009      	b.n	8002488 <IIS2MDC_ResetDevice+0x5c>
	}


	ret = IIS2MDC_SWReset(Handle);
 8002474:	6878      	ldr	r0, [r7, #4]
 8002476:	f000 f94b 	bl	8002710 <IIS2MDC_SWReset>
 800247a:	60f8      	str	r0, [r7, #12]
	if(ret != IIS2MDC_Ok)
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	2b00      	cmp	r3, #0
 8002480:	d001      	beq.n	8002486 <IIS2MDC_ResetDevice+0x5a>
	{
		return ret;
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	e000      	b.n	8002488 <IIS2MDC_ResetDevice+0x5c>
	}

	return IIS2MDC_Ok;
 8002486:	2300      	movs	r3, #0
}
 8002488:	4618      	mov	r0, r3
 800248a:	3710      	adds	r7, #16
 800248c:	46bd      	mov	sp, r7
 800248e:	bd80      	pop	{r7, pc}

08002490 <IIS2MDC_ReadMagnetismXYZ>:
	}
	return IIS2MDC_Ok;
}

int32_t IIS2MDC_ReadMagnetismXYZ(IIS2MDC_Handle_t *Handle, float *Mx, float *My, float *Mz)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b088      	sub	sp, #32
 8002494:	af00      	add	r7, sp, #0
 8002496:	60f8      	str	r0, [r7, #12]
 8002498:	60b9      	str	r1, [r7, #8]
 800249a:	607a      	str	r2, [r7, #4]
 800249c:	603b      	str	r3, [r7, #0]
	if(Handle->Status != IIS2MDC_Initialized)
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80024a4:	2b01      	cmp	r3, #1
 80024a6:	d002      	beq.n	80024ae <IIS2MDC_ReadMagnetismXYZ+0x1e>
	{
		return IIS2MDC_InitError;
 80024a8:	f06f 0302 	mvn.w	r3, #2
 80024ac:	e03c      	b.n	8002528 <IIS2MDC_ReadMagnetismXYZ+0x98>
	}

	uint8_t Buffer[6] = {0};
 80024ae:	2300      	movs	r3, #0
 80024b0:	617b      	str	r3, [r7, #20]
 80024b2:	2300      	movs	r3, #0
 80024b4:	833b      	strh	r3, [r7, #24]
	uint32_t ret = IIS2MDC_ReadReg(&Handle->Context, IIS2MDC_REG_STATUS_REG, Buffer, 1);
 80024b6:	68f8      	ldr	r0, [r7, #12]
 80024b8:	f107 0214 	add.w	r2, r7, #20
 80024bc:	2301      	movs	r3, #1
 80024be:	2167      	movs	r1, #103	; 0x67
 80024c0:	f000 fa58 	bl	8002974 <IIS2MDC_ReadReg>
 80024c4:	4603      	mov	r3, r0
 80024c6:	61fb      	str	r3, [r7, #28]
	if(ret != IIS2MDC_Ok)
 80024c8:	69fb      	ldr	r3, [r7, #28]
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d001      	beq.n	80024d2 <IIS2MDC_ReadMagnetismXYZ+0x42>
	{
		return ret;
 80024ce:	69fb      	ldr	r3, [r7, #28]
 80024d0:	e02a      	b.n	8002528 <IIS2MDC_ReadMagnetismXYZ+0x98>
	}
	if(Buffer[0] & (IIS2MDC_XDATA_Msk | IIS2MDC_YDATA_Msk | IIS2MDC_ZDATA_Msk))
 80024d2:	7d3b      	ldrb	r3, [r7, #20]
 80024d4:	f003 0307 	and.w	r3, r3, #7
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d023      	beq.n	8002524 <IIS2MDC_ReadMagnetismXYZ+0x94>
	{
		ret = IIS2MDC_ReadReg(&Handle->Context, IIS2MDC_REG_OUTX_L_REG, Buffer, 6);
 80024dc:	68f8      	ldr	r0, [r7, #12]
 80024de:	f107 0214 	add.w	r2, r7, #20
 80024e2:	2306      	movs	r3, #6
 80024e4:	2168      	movs	r1, #104	; 0x68
 80024e6:	f000 fa45 	bl	8002974 <IIS2MDC_ReadReg>
 80024ea:	4603      	mov	r3, r0
 80024ec:	61fb      	str	r3, [r7, #28]
		if(ret != IIS2MDC_Ok)
 80024ee:	69fb      	ldr	r3, [r7, #28]
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d001      	beq.n	80024f8 <IIS2MDC_ReadMagnetismXYZ+0x68>
		{
			return ret;
 80024f4:	69fb      	ldr	r3, [r7, #28]
 80024f6:	e017      	b.n	8002528 <IIS2MDC_ReadMagnetismXYZ+0x98>
		}
		ConvertMagData(Buffer, Mx);
 80024f8:	f107 0314 	add.w	r3, r7, #20
 80024fc:	68b9      	ldr	r1, [r7, #8]
 80024fe:	4618      	mov	r0, r3
 8002500:	f000 f965 	bl	80027ce <ConvertMagData>
		ConvertMagData(&Buffer[2], My);
 8002504:	f107 0314 	add.w	r3, r7, #20
 8002508:	3302      	adds	r3, #2
 800250a:	6879      	ldr	r1, [r7, #4]
 800250c:	4618      	mov	r0, r3
 800250e:	f000 f95e 	bl	80027ce <ConvertMagData>
		ConvertMagData(&Buffer[4], Mz);
 8002512:	f107 0314 	add.w	r3, r7, #20
 8002516:	3304      	adds	r3, #4
 8002518:	6839      	ldr	r1, [r7, #0]
 800251a:	4618      	mov	r0, r3
 800251c:	f000 f957 	bl	80027ce <ConvertMagData>
		return IIS2MDC_DataReady;
 8002520:	2300      	movs	r3, #0
 8002522:	e001      	b.n	8002528 <IIS2MDC_ReadMagnetismXYZ+0x98>
	}
	return IIS2MDC_DataNotReady;
 8002524:	f64b 63ef 	movw	r3, #48879	; 0xbeef
}
 8002528:	4618      	mov	r0, r3
 800252a:	3720      	adds	r7, #32
 800252c:	46bd      	mov	sp, r7
 800252e:	bd80      	pop	{r7, pc}

08002530 <IIS2MDC_WriteRegWrapper>:
	return IIS2MDC_DataNotReady;
}


static int32_t IIS2MDC_WriteRegWrapper(void *Handle,uint8_t Reg, uint8_t *Buffer, uint8_t Length)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b086      	sub	sp, #24
 8002534:	af00      	add	r7, sp, #0
 8002536:	60f8      	str	r0, [r7, #12]
 8002538:	607a      	str	r2, [r7, #4]
 800253a:	461a      	mov	r2, r3
 800253c:	460b      	mov	r3, r1
 800253e:	72fb      	strb	r3, [r7, #11]
 8002540:	4613      	mov	r3, r2
 8002542:	72bb      	strb	r3, [r7, #10]
	IIS2MDC_Handle_t *Dev= Handle;
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	617b      	str	r3, [r7, #20]
	if(Dev->IO.Write != NULL)
 8002548:	697b      	ldr	r3, [r7, #20]
 800254a:	695b      	ldr	r3, [r3, #20]
 800254c:	2b00      	cmp	r3, #0
 800254e:	d007      	beq.n	8002560 <IIS2MDC_WriteRegWrapper+0x30>
	{
		return Dev->IO.Write(Reg,Buffer,Length);
 8002550:	697b      	ldr	r3, [r7, #20]
 8002552:	695b      	ldr	r3, [r3, #20]
 8002554:	7aba      	ldrb	r2, [r7, #10]
 8002556:	7af8      	ldrb	r0, [r7, #11]
 8002558:	6879      	ldr	r1, [r7, #4]
 800255a:	4798      	blx	r3
 800255c:	4603      	mov	r3, r0
 800255e:	e001      	b.n	8002564 <IIS2MDC_WriteRegWrapper+0x34>
	}
    return IIS2MDC_IOError;
 8002560:	f06f 0301 	mvn.w	r3, #1
}
 8002564:	4618      	mov	r0, r3
 8002566:	3718      	adds	r7, #24
 8002568:	46bd      	mov	sp, r7
 800256a:	bd80      	pop	{r7, pc}

0800256c <IIS2MDC_ReadRegWrapper>:

static int32_t IIS2MDC_ReadRegWrapper(void *Handle,uint8_t Reg, uint8_t *Buffer, uint8_t Length)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b086      	sub	sp, #24
 8002570:	af00      	add	r7, sp, #0
 8002572:	60f8      	str	r0, [r7, #12]
 8002574:	607a      	str	r2, [r7, #4]
 8002576:	461a      	mov	r2, r3
 8002578:	460b      	mov	r3, r1
 800257a:	72fb      	strb	r3, [r7, #11]
 800257c:	4613      	mov	r3, r2
 800257e:	72bb      	strb	r3, [r7, #10]
	IIS2MDC_Handle_t *Dev= Handle;
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	617b      	str	r3, [r7, #20]
	if(Dev->IO.Read != NULL)
 8002584:	697b      	ldr	r3, [r7, #20]
 8002586:	699b      	ldr	r3, [r3, #24]
 8002588:	2b00      	cmp	r3, #0
 800258a:	d007      	beq.n	800259c <IIS2MDC_ReadRegWrapper+0x30>
	{
		return Dev->IO.Read(Reg,Buffer,Length);
 800258c:	697b      	ldr	r3, [r7, #20]
 800258e:	699b      	ldr	r3, [r3, #24]
 8002590:	7aba      	ldrb	r2, [r7, #10]
 8002592:	7af8      	ldrb	r0, [r7, #11]
 8002594:	6879      	ldr	r1, [r7, #4]
 8002596:	4798      	blx	r3
 8002598:	4603      	mov	r3, r0
 800259a:	e001      	b.n	80025a0 <IIS2MDC_ReadRegWrapper+0x34>
	}
    return IIS2MDC_IOError;
 800259c:	f06f 0301 	mvn.w	r3, #1
}
 80025a0:	4618      	mov	r0, r3
 80025a2:	3718      	adds	r7, #24
 80025a4:	46bd      	mov	sp, r7
 80025a6:	bd80      	pop	{r7, pc}

080025a8 <IIS2MDC_RegisterInit>:

static int32_t IIS2MDC_RegisterInit(IIS2MDC_Handle_t *Handle, IIS2MDC_InitStruct_t Settings)
{
 80025a8:	b084      	sub	sp, #16
 80025aa:	b580      	push	{r7, lr}
 80025ac:	b084      	sub	sp, #16
 80025ae:	af00      	add	r7, sp, #0
 80025b0:	6078      	str	r0, [r7, #4]
 80025b2:	f107 001c 	add.w	r0, r7, #28
 80025b6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	int32_t ret = IIS2MDC_ResetDevice(Handle);
 80025ba:	6878      	ldr	r0, [r7, #4]
 80025bc:	f7ff ff36 	bl	800242c <IIS2MDC_ResetDevice>
 80025c0:	60f8      	str	r0, [r7, #12]
	if(ret != IIS2MDC_Ok)
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d001      	beq.n	80025cc <IIS2MDC_RegisterInit+0x24>
	{
		return ret;
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	e09a      	b.n	8002702 <IIS2MDC_RegisterInit+0x15a>
	}

	uint8_t Buffer[2] = {0};
 80025cc:	2300      	movs	r3, #0
 80025ce:	813b      	strh	r3, [r7, #8]

	DeConvertMagData(Settings.IntThreshold, Buffer);
 80025d0:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80025d4:	f107 0308 	add.w	r3, r7, #8
 80025d8:	4618      	mov	r0, r3
 80025da:	eeb0 0a67 	vmov.f32	s0, s15
 80025de:	f000 f91a 	bl	8002816 <DeConvertMagData>
	ret = IIS2MDC_WriteReg(&Handle->Context,IIS2MDC_REG_INT_THS_H_REG,Buffer,2);
 80025e2:	6878      	ldr	r0, [r7, #4]
 80025e4:	f107 0208 	add.w	r2, r7, #8
 80025e8:	2302      	movs	r3, #2
 80025ea:	2166      	movs	r1, #102	; 0x66
 80025ec:	f000 f9e6 	bl	80029bc <IIS2MDC_WriteReg>
 80025f0:	60f8      	str	r0, [r7, #12]
	if(ret != IIS2MDC_Ok)
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d001      	beq.n	80025fc <IIS2MDC_RegisterInit+0x54>
	{
		return ret;
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	e082      	b.n	8002702 <IIS2MDC_RegisterInit+0x15a>
	}


	DeConvertMagData(Settings.OffsetX, Buffer);
 80025fc:	edd7 7a07 	vldr	s15, [r7, #28]
 8002600:	f107 0308 	add.w	r3, r7, #8
 8002604:	4618      	mov	r0, r3
 8002606:	eeb0 0a67 	vmov.f32	s0, s15
 800260a:	f000 f904 	bl	8002816 <DeConvertMagData>
	ret = IIS2MDC_WriteReg(&Handle->Context,IIS2MDC_REG_OFFSET_X_REG_L,Buffer,2);
 800260e:	6878      	ldr	r0, [r7, #4]
 8002610:	f107 0208 	add.w	r2, r7, #8
 8002614:	2302      	movs	r3, #2
 8002616:	2145      	movs	r1, #69	; 0x45
 8002618:	f000 f9d0 	bl	80029bc <IIS2MDC_WriteReg>
 800261c:	60f8      	str	r0, [r7, #12]
	if(ret != IIS2MDC_Ok)
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	2b00      	cmp	r3, #0
 8002622:	d001      	beq.n	8002628 <IIS2MDC_RegisterInit+0x80>
	{
		return ret;
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	e06c      	b.n	8002702 <IIS2MDC_RegisterInit+0x15a>
	}

	DeConvertMagData(Settings.OffsetY, Buffer);
 8002628:	edd7 7a08 	vldr	s15, [r7, #32]
 800262c:	f107 0308 	add.w	r3, r7, #8
 8002630:	4618      	mov	r0, r3
 8002632:	eeb0 0a67 	vmov.f32	s0, s15
 8002636:	f000 f8ee 	bl	8002816 <DeConvertMagData>
	ret = IIS2MDC_WriteReg(&Handle->Context,IIS2MDC_REG_OFFSET_Y_REG_L,Buffer,2);
 800263a:	6878      	ldr	r0, [r7, #4]
 800263c:	f107 0208 	add.w	r2, r7, #8
 8002640:	2302      	movs	r3, #2
 8002642:	2147      	movs	r1, #71	; 0x47
 8002644:	f000 f9ba 	bl	80029bc <IIS2MDC_WriteReg>
 8002648:	60f8      	str	r0, [r7, #12]
	if(ret != IIS2MDC_Ok)
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	2b00      	cmp	r3, #0
 800264e:	d001      	beq.n	8002654 <IIS2MDC_RegisterInit+0xac>
	{
		return ret;
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	e056      	b.n	8002702 <IIS2MDC_RegisterInit+0x15a>
	}

	DeConvertMagData(Settings.OffsetZ, Buffer);
 8002654:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002658:	f107 0308 	add.w	r3, r7, #8
 800265c:	4618      	mov	r0, r3
 800265e:	eeb0 0a67 	vmov.f32	s0, s15
 8002662:	f000 f8d8 	bl	8002816 <DeConvertMagData>
	ret = IIS2MDC_WriteReg(&Handle->Context,IIS2MDC_REG_OFFSET_Z_REG_L,Buffer,2);
 8002666:	6878      	ldr	r0, [r7, #4]
 8002668:	f107 0208 	add.w	r2, r7, #8
 800266c:	2302      	movs	r3, #2
 800266e:	2149      	movs	r1, #73	; 0x49
 8002670:	f000 f9a4 	bl	80029bc <IIS2MDC_WriteReg>
 8002674:	60f8      	str	r0, [r7, #12]
	if(ret != IIS2MDC_Ok)
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	2b00      	cmp	r3, #0
 800267a:	d001      	beq.n	8002680 <IIS2MDC_RegisterInit+0xd8>
	{
		return ret;
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	e040      	b.n	8002702 <IIS2MDC_RegisterInit+0x15a>
	}

	Buffer[0] = Settings.ConfigRegA;
 8002680:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002684:	723b      	strb	r3, [r7, #8]
	ret = IIS2MDC_WriteReg(&Handle->Context,IIS2MDC_REG_CFG_REG_A,Buffer,1);
 8002686:	6878      	ldr	r0, [r7, #4]
 8002688:	f107 0208 	add.w	r2, r7, #8
 800268c:	2301      	movs	r3, #1
 800268e:	2160      	movs	r1, #96	; 0x60
 8002690:	f000 f994 	bl	80029bc <IIS2MDC_WriteReg>
 8002694:	60f8      	str	r0, [r7, #12]
	if(ret != IIS2MDC_Ok)
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	2b00      	cmp	r3, #0
 800269a:	d001      	beq.n	80026a0 <IIS2MDC_RegisterInit+0xf8>
	{
		return ret;
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	e030      	b.n	8002702 <IIS2MDC_RegisterInit+0x15a>
	}

	Buffer[0] = Settings.ConfigRegB;
 80026a0:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 80026a4:	723b      	strb	r3, [r7, #8]
	ret = IIS2MDC_WriteReg(&Handle->Context,IIS2MDC_REG_CFG_REG_B,Buffer,1);
 80026a6:	6878      	ldr	r0, [r7, #4]
 80026a8:	f107 0208 	add.w	r2, r7, #8
 80026ac:	2301      	movs	r3, #1
 80026ae:	2161      	movs	r1, #97	; 0x61
 80026b0:	f000 f984 	bl	80029bc <IIS2MDC_WriteReg>
 80026b4:	60f8      	str	r0, [r7, #12]
	if(ret != IIS2MDC_Ok)
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d001      	beq.n	80026c0 <IIS2MDC_RegisterInit+0x118>
	{
		return ret;
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	e020      	b.n	8002702 <IIS2MDC_RegisterInit+0x15a>
	}

	Buffer[0] = Settings.ConfigRegC;
 80026c0:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80026c4:	723b      	strb	r3, [r7, #8]
	ret = IIS2MDC_WriteReg(&Handle->Context,IIS2MDC_REG_CFG_REG_C,Buffer,1);
 80026c6:	6878      	ldr	r0, [r7, #4]
 80026c8:	f107 0208 	add.w	r2, r7, #8
 80026cc:	2301      	movs	r3, #1
 80026ce:	2162      	movs	r1, #98	; 0x62
 80026d0:	f000 f974 	bl	80029bc <IIS2MDC_WriteReg>
 80026d4:	60f8      	str	r0, [r7, #12]
	if(ret != IIS2MDC_Ok)
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d001      	beq.n	80026e0 <IIS2MDC_RegisterInit+0x138>
	{
		return ret;
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	e010      	b.n	8002702 <IIS2MDC_RegisterInit+0x15a>
	}

	Buffer[0] = Settings.IntCtrlReg;
 80026e0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80026e4:	723b      	strb	r3, [r7, #8]
	ret = IIS2MDC_WriteReg(&Handle->Context,IIS2MDC_REG_INT_CTRL_REG,Buffer,1);
 80026e6:	6878      	ldr	r0, [r7, #4]
 80026e8:	f107 0208 	add.w	r2, r7, #8
 80026ec:	2301      	movs	r3, #1
 80026ee:	2163      	movs	r1, #99	; 0x63
 80026f0:	f000 f964 	bl	80029bc <IIS2MDC_WriteReg>
 80026f4:	60f8      	str	r0, [r7, #12]
	if(ret != IIS2MDC_Ok)
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d001      	beq.n	8002700 <IIS2MDC_RegisterInit+0x158>
	{
		return ret;
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	e000      	b.n	8002702 <IIS2MDC_RegisterInit+0x15a>
	}

    return IIS2MDC_Ok;
 8002700:	2300      	movs	r3, #0
}
 8002702:	4618      	mov	r0, r3
 8002704:	3710      	adds	r7, #16
 8002706:	46bd      	mov	sp, r7
 8002708:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800270c:	b004      	add	sp, #16
 800270e:	4770      	bx	lr

08002710 <IIS2MDC_SWReset>:

static int32_t IIS2MDC_SWReset(IIS2MDC_Handle_t *Handle)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b086      	sub	sp, #24
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
    int32_t ret = 0;
 8002718:	2300      	movs	r3, #0
 800271a:	617b      	str	r3, [r7, #20]
    uint8_t Buffer = IIS2MDC_ResetSignal;
 800271c:	2320      	movs	r3, #32
 800271e:	73fb      	strb	r3, [r7, #15]
    ret = IIS2MDC_WriteReg(&Handle->Context, IIS2MDC_REG_CFG_REG_A, &Buffer, 1);
 8002720:	6878      	ldr	r0, [r7, #4]
 8002722:	f107 020f 	add.w	r2, r7, #15
 8002726:	2301      	movs	r3, #1
 8002728:	2160      	movs	r1, #96	; 0x60
 800272a:	f000 f947 	bl	80029bc <IIS2MDC_WriteReg>
 800272e:	6178      	str	r0, [r7, #20]
    if(ret != IIS2MDC_Ok)
 8002730:	697b      	ldr	r3, [r7, #20]
 8002732:	2b00      	cmp	r3, #0
 8002734:	d001      	beq.n	800273a <IIS2MDC_SWReset+0x2a>
    {
    	return ret;
 8002736:	697b      	ldr	r3, [r7, #20]
 8002738:	e01d      	b.n	8002776 <IIS2MDC_SWReset+0x66>
    }

    uint32_t timeout = Handle->IO.GetTick();
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6a1b      	ldr	r3, [r3, #32]
 800273e:	4798      	blx	r3
 8002740:	6138      	str	r0, [r7, #16]
    while(Buffer & IIS2MDC_ResetSignal)
 8002742:	e012      	b.n	800276a <IIS2MDC_SWReset+0x5a>
    {
        ret = IIS2MDC_ReadReg(&Handle->Context, IIS2MDC_REG_CFG_REG_A, &Buffer, 1);
 8002744:	6878      	ldr	r0, [r7, #4]
 8002746:	f107 020f 	add.w	r2, r7, #15
 800274a:	2301      	movs	r3, #1
 800274c:	2160      	movs	r1, #96	; 0x60
 800274e:	f000 f911 	bl	8002974 <IIS2MDC_ReadReg>
 8002752:	6178      	str	r0, [r7, #20]
        if(Handle->IO.GetTick() > timeout + 100)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	6a1b      	ldr	r3, [r3, #32]
 8002758:	4798      	blx	r3
 800275a:	4602      	mov	r2, r0
 800275c:	693b      	ldr	r3, [r7, #16]
 800275e:	3364      	adds	r3, #100	; 0x64
 8002760:	429a      	cmp	r2, r3
 8002762:	d902      	bls.n	800276a <IIS2MDC_SWReset+0x5a>
        {
        	return IIS2MDC_Timeout;
 8002764:	f06f 0305 	mvn.w	r3, #5
 8002768:	e005      	b.n	8002776 <IIS2MDC_SWReset+0x66>
    while(Buffer & IIS2MDC_ResetSignal)
 800276a:	7bfb      	ldrb	r3, [r7, #15]
 800276c:	f003 0320 	and.w	r3, r3, #32
 8002770:	2b00      	cmp	r3, #0
 8002772:	d1e7      	bne.n	8002744 <IIS2MDC_SWReset+0x34>
        }
    }
    return IIS2MDC_Ok;
 8002774:	2300      	movs	r3, #0
}
 8002776:	4618      	mov	r0, r3
 8002778:	3718      	adds	r7, #24
 800277a:	46bd      	mov	sp, r7
 800277c:	bd80      	pop	{r7, pc}

0800277e <IIS2MDC_Reboot>:

static int32_t IIS2MDC_Reboot(IIS2MDC_Handle_t *Handle)
{
 800277e:	b590      	push	{r4, r7, lr}
 8002780:	b087      	sub	sp, #28
 8002782:	af00      	add	r7, sp, #0
 8002784:	6078      	str	r0, [r7, #4]
    int32_t ret = 0;
 8002786:	2300      	movs	r3, #0
 8002788:	617b      	str	r3, [r7, #20]
    uint8_t Buffer = IIS2MDC_RebootSignal;
 800278a:	2340      	movs	r3, #64	; 0x40
 800278c:	73fb      	strb	r3, [r7, #15]
    ret = IIS2MDC_WriteReg(&Handle->Context, IIS2MDC_REG_CFG_REG_A, &Buffer, 1);
 800278e:	6878      	ldr	r0, [r7, #4]
 8002790:	f107 020f 	add.w	r2, r7, #15
 8002794:	2301      	movs	r3, #1
 8002796:	2160      	movs	r1, #96	; 0x60
 8002798:	f000 f910 	bl	80029bc <IIS2MDC_WriteReg>
 800279c:	6178      	str	r0, [r7, #20]
    if(ret != IIS2MDC_Ok)
 800279e:	697b      	ldr	r3, [r7, #20]
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d001      	beq.n	80027a8 <IIS2MDC_Reboot+0x2a>
    {
    	return ret;
 80027a4:	697b      	ldr	r3, [r7, #20]
 80027a6:	e00e      	b.n	80027c6 <IIS2MDC_Reboot+0x48>
    }
    uint32_t timeout = Handle->IO.GetTick();
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6a1b      	ldr	r3, [r3, #32]
 80027ac:	4798      	blx	r3
 80027ae:	6138      	str	r0, [r7, #16]
    while((timeout + 20) > Handle->IO.GetTick()); //Delay 20ms
 80027b0:	bf00      	nop
 80027b2:	693b      	ldr	r3, [r7, #16]
 80027b4:	f103 0414 	add.w	r4, r3, #20
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6a1b      	ldr	r3, [r3, #32]
 80027bc:	4798      	blx	r3
 80027be:	4603      	mov	r3, r0
 80027c0:	429c      	cmp	r4, r3
 80027c2:	d8f6      	bhi.n	80027b2 <IIS2MDC_Reboot+0x34>
    return IIS2MDC_Ok;
 80027c4:	2300      	movs	r3, #0
}
 80027c6:	4618      	mov	r0, r3
 80027c8:	371c      	adds	r7, #28
 80027ca:	46bd      	mov	sp, r7
 80027cc:	bd90      	pop	{r4, r7, pc}

080027ce <ConvertMagData>:

static void ConvertMagData(uint8_t *buffer, float *magnetism)
{
 80027ce:	b480      	push	{r7}
 80027d0:	b085      	sub	sp, #20
 80027d2:	af00      	add	r7, sp, #0
 80027d4:	6078      	str	r0, [r7, #4]
 80027d6:	6039      	str	r1, [r7, #0]
	int16_t result = (buffer[1] * 256) + buffer[0];
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	3301      	adds	r3, #1
 80027dc:	781b      	ldrb	r3, [r3, #0]
 80027de:	b29b      	uxth	r3, r3
 80027e0:	021b      	lsls	r3, r3, #8
 80027e2:	b29a      	uxth	r2, r3
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	781b      	ldrb	r3, [r3, #0]
 80027e8:	b29b      	uxth	r3, r3
 80027ea:	4413      	add	r3, r2
 80027ec:	b29b      	uxth	r3, r3
 80027ee:	81fb      	strh	r3, [r7, #14]
	*magnetism = result * 1.5f;
 80027f0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80027f4:	ee07 3a90 	vmov	s15, r3
 80027f8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80027fc:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8002800:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	edc3 7a00 	vstr	s15, [r3]
}
 800280a:	bf00      	nop
 800280c:	3714      	adds	r7, #20
 800280e:	46bd      	mov	sp, r7
 8002810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002814:	4770      	bx	lr

08002816 <DeConvertMagData>:

static void DeConvertMagData(float magnetism, uint8_t *buffer)
{
 8002816:	b480      	push	{r7}
 8002818:	b085      	sub	sp, #20
 800281a:	af00      	add	r7, sp, #0
 800281c:	ed87 0a01 	vstr	s0, [r7, #4]
 8002820:	6038      	str	r0, [r7, #0]
    int16_t result = magnetism / 1.5f;
 8002822:	ed97 7a01 	vldr	s14, [r7, #4]
 8002826:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 800282a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800282e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002832:	ee17 3a90 	vmov	r3, s15
 8002836:	81fb      	strh	r3, [r7, #14]
    buffer[1] = (result & 0xFF00) >> 8;
 8002838:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800283c:	121a      	asrs	r2, r3, #8
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	3301      	adds	r3, #1
 8002842:	b2d2      	uxtb	r2, r2
 8002844:	701a      	strb	r2, [r3, #0]
    buffer[0] = result & 0x00FF;
 8002846:	89fb      	ldrh	r3, [r7, #14]
 8002848:	b2da      	uxtb	r2, r3
 800284a:	683b      	ldr	r3, [r7, #0]
 800284c:	701a      	strb	r2, [r3, #0]
}
 800284e:	bf00      	nop
 8002850:	3714      	adds	r7, #20
 8002852:	46bd      	mov	sp, r7
 8002854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002858:	4770      	bx	lr
	...

0800285c <IIS2MDC_GetSamplePeriod>:

int32_t IIS2MDC_GetSamplePeriod(IIS2MDC_Handle_t *Handle, uint32_t *Period)
{
 800285c:	b480      	push	{r7}
 800285e:	b083      	sub	sp, #12
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
 8002864:	6039      	str	r1, [r7, #0]
	if(Handle->Status != IIS2MDC_Initialized)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800286c:	2b01      	cmp	r3, #1
 800286e:	d002      	beq.n	8002876 <IIS2MDC_GetSamplePeriod+0x1a>
	{
		return IIS2MDC_InitError;
 8002870:	f06f 0302 	mvn.w	r3, #2
 8002874:	e03a      	b.n	80028ec <IIS2MDC_GetSamplePeriod+0x90>
	}

	switch(Handle->OutputDataRate)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800287c:	2b0c      	cmp	r3, #12
 800287e:	d832      	bhi.n	80028e6 <IIS2MDC_GetSamplePeriod+0x8a>
 8002880:	a201      	add	r2, pc, #4	; (adr r2, 8002888 <IIS2MDC_GetSamplePeriod+0x2c>)
 8002882:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002886:	bf00      	nop
 8002888:	080028c7 	.word	0x080028c7
 800288c:	080028bd 	.word	0x080028bd
 8002890:	080028e7 	.word	0x080028e7
 8002894:	080028e7 	.word	0x080028e7
 8002898:	080028cf 	.word	0x080028cf
 800289c:	080028e7 	.word	0x080028e7
 80028a0:	080028e7 	.word	0x080028e7
 80028a4:	080028e7 	.word	0x080028e7
 80028a8:	080028d7 	.word	0x080028d7
 80028ac:	080028e7 	.word	0x080028e7
 80028b0:	080028e7 	.word	0x080028e7
 80028b4:	080028e7 	.word	0x080028e7
 80028b8:	080028df 	.word	0x080028df
	{
	case(IIS2MDC_ODR_OneShot):
			*Period = 0;
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	2200      	movs	r2, #0
 80028c0:	601a      	str	r2, [r3, #0]
	        return IIS2MDC_ODR_PeriodOneShot;
 80028c2:	2301      	movs	r3, #1
 80028c4:	e012      	b.n	80028ec <IIS2MDC_GetSamplePeriod+0x90>
	case(IIS2MDC_ODR_10Hz):
			*Period =  (1000 / 10);
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	2264      	movs	r2, #100	; 0x64
 80028ca:	601a      	str	r2, [r3, #0]
	        break;
 80028cc:	e00d      	b.n	80028ea <IIS2MDC_GetSamplePeriod+0x8e>
	case(IIS2MDC_ODR_20Hz):
			*Period = (1000 / 20);
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	2232      	movs	r2, #50	; 0x32
 80028d2:	601a      	str	r2, [r3, #0]
	        break;
 80028d4:	e009      	b.n	80028ea <IIS2MDC_GetSamplePeriod+0x8e>
	case(IIS2MDC_ODR_50Hz):
			*Period = (1000 / 50);
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	2214      	movs	r2, #20
 80028da:	601a      	str	r2, [r3, #0]
	        break;
 80028dc:	e005      	b.n	80028ea <IIS2MDC_GetSamplePeriod+0x8e>
	case(IIS2MDC_ODR_100Hz):
			*Period = (1000 / 100);
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	220a      	movs	r2, #10
 80028e2:	601a      	str	r2, [r3, #0]
	        break;
 80028e4:	e001      	b.n	80028ea <IIS2MDC_GetSamplePeriod+0x8e>
	default:
		    return IIS2MDC_ODR_Error;
 80028e6:	2302      	movs	r3, #2
 80028e8:	e000      	b.n	80028ec <IIS2MDC_GetSamplePeriod+0x90>
	}

	return IIS2MDC_Ok;
 80028ea:	2300      	movs	r3, #0
}
 80028ec:	4618      	mov	r0, r3
 80028ee:	370c      	adds	r7, #12
 80028f0:	46bd      	mov	sp, r7
 80028f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f6:	4770      	bx	lr

080028f8 <IIS2MDC_ValidateParams>:

#include "IIS2MDC_Registers.h"
#include <stddef.h>

static int32_t IIS2MDC_ValidateParams(IIS2MDC_Context_t *Context, uint8_t Reg, uint8_t *Buffer, uint8_t Length)
{
 80028f8:	b480      	push	{r7}
 80028fa:	b087      	sub	sp, #28
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	60f8      	str	r0, [r7, #12]
 8002900:	607a      	str	r2, [r7, #4]
 8002902:	461a      	mov	r2, r3
 8002904:	460b      	mov	r3, r1
 8002906:	72fb      	strb	r3, [r7, #11]
 8002908:	4613      	mov	r3, r2
 800290a:	72bb      	strb	r3, [r7, #10]
	int32_t ret = IIS2MDC_REG_OK;
 800290c:	2300      	movs	r3, #0
 800290e:	617b      	str	r3, [r7, #20]
    if(Context == NULL || Context->Read == NULL || Context->Write == NULL || Context->Handle == NULL)
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	2b00      	cmp	r3, #0
 8002914:	d00b      	beq.n	800292e <IIS2MDC_ValidateParams+0x36>
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	685b      	ldr	r3, [r3, #4]
 800291a:	2b00      	cmp	r3, #0
 800291c:	d007      	beq.n	800292e <IIS2MDC_ValidateParams+0x36>
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	689b      	ldr	r3, [r3, #8]
 8002922:	2b00      	cmp	r3, #0
 8002924:	d003      	beq.n	800292e <IIS2MDC_ValidateParams+0x36>
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	2b00      	cmp	r3, #0
 800292c:	d103      	bne.n	8002936 <IIS2MDC_ValidateParams+0x3e>
    {
    	ret |= IIS2MDC_REG_CONTEXT_ERR;
 800292e:	697b      	ldr	r3, [r7, #20]
 8002930:	f043 4308 	orr.w	r3, r3, #2281701376	; 0x88000000
 8002934:	617b      	str	r3, [r7, #20]
    }

    if(Reg < IIS2MDC_REG_OFFSET_X_REG_L || Reg > IIS2MDC_REG_TEMP_OUT_H_REG)
 8002936:	7afb      	ldrb	r3, [r7, #11]
 8002938:	2b44      	cmp	r3, #68	; 0x44
 800293a:	d902      	bls.n	8002942 <IIS2MDC_ValidateParams+0x4a>
 800293c:	7afb      	ldrb	r3, [r7, #11]
 800293e:	2b6f      	cmp	r3, #111	; 0x6f
 8002940:	d903      	bls.n	800294a <IIS2MDC_ValidateParams+0x52>
    {
    	ret |= IIS2MDC_REG_ADDR_ERR;
 8002942:	697b      	ldr	r3, [r7, #20]
 8002944:	f043 4310 	orr.w	r3, r3, #2415919104	; 0x90000000
 8002948:	617b      	str	r3, [r7, #20]
    }

    if(Buffer == NULL)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	2b00      	cmp	r3, #0
 800294e:	d103      	bne.n	8002958 <IIS2MDC_ValidateParams+0x60>
    {
    	ret |= IIS2MDC_REG_BUFFER_ERR;
 8002950:	697b      	ldr	r3, [r7, #20]
 8002952:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8002956:	617b      	str	r3, [r7, #20]
    }

    if(Length == 0)
 8002958:	7abb      	ldrb	r3, [r7, #10]
 800295a:	2b00      	cmp	r3, #0
 800295c:	d103      	bne.n	8002966 <IIS2MDC_ValidateParams+0x6e>
    {
       ret |= IIS2MDC_REG_LENGTH_ERR;
 800295e:	697b      	ldr	r3, [r7, #20]
 8002960:	f043 4320 	orr.w	r3, r3, #2684354560	; 0xa0000000
 8002964:	617b      	str	r3, [r7, #20]
    }

    return ret;
 8002966:	697b      	ldr	r3, [r7, #20]

}
 8002968:	4618      	mov	r0, r3
 800296a:	371c      	adds	r7, #28
 800296c:	46bd      	mov	sp, r7
 800296e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002972:	4770      	bx	lr

08002974 <IIS2MDC_ReadReg>:

int32_t IIS2MDC_ReadReg(IIS2MDC_Context_t *Context, uint8_t Reg, uint8_t *Buffer, uint8_t Length)
{
 8002974:	b590      	push	{r4, r7, lr}
 8002976:	b087      	sub	sp, #28
 8002978:	af00      	add	r7, sp, #0
 800297a:	60f8      	str	r0, [r7, #12]
 800297c:	607a      	str	r2, [r7, #4]
 800297e:	461a      	mov	r2, r3
 8002980:	460b      	mov	r3, r1
 8002982:	72fb      	strb	r3, [r7, #11]
 8002984:	4613      	mov	r3, r2
 8002986:	72bb      	strb	r3, [r7, #10]
	int32_t ret = IIS2MDC_ValidateParams(Context,Reg,Buffer,Length);
 8002988:	7abb      	ldrb	r3, [r7, #10]
 800298a:	7af9      	ldrb	r1, [r7, #11]
 800298c:	687a      	ldr	r2, [r7, #4]
 800298e:	68f8      	ldr	r0, [r7, #12]
 8002990:	f7ff ffb2 	bl	80028f8 <IIS2MDC_ValidateParams>
 8002994:	6178      	str	r0, [r7, #20]
	if(ret != IIS2MDC_REG_OK)
 8002996:	697b      	ldr	r3, [r7, #20]
 8002998:	2b00      	cmp	r3, #0
 800299a:	d001      	beq.n	80029a0 <IIS2MDC_ReadReg+0x2c>
	{
		return ret;
 800299c:	697b      	ldr	r3, [r7, #20]
 800299e:	e009      	b.n	80029b4 <IIS2MDC_ReadReg+0x40>
	}

	ret = Context->Read(Context->Handle, Reg, Buffer, Length);
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	685c      	ldr	r4, [r3, #4]
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	6818      	ldr	r0, [r3, #0]
 80029a8:	7abb      	ldrb	r3, [r7, #10]
 80029aa:	7af9      	ldrb	r1, [r7, #11]
 80029ac:	687a      	ldr	r2, [r7, #4]
 80029ae:	47a0      	blx	r4
 80029b0:	6178      	str	r0, [r7, #20]
	return ret;
 80029b2:	697b      	ldr	r3, [r7, #20]
}
 80029b4:	4618      	mov	r0, r3
 80029b6:	371c      	adds	r7, #28
 80029b8:	46bd      	mov	sp, r7
 80029ba:	bd90      	pop	{r4, r7, pc}

080029bc <IIS2MDC_WriteReg>:

int32_t IIS2MDC_WriteReg(IIS2MDC_Context_t *Context, uint8_t Reg, uint8_t *Buffer, uint8_t Length)
{
 80029bc:	b590      	push	{r4, r7, lr}
 80029be:	b087      	sub	sp, #28
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	60f8      	str	r0, [r7, #12]
 80029c4:	607a      	str	r2, [r7, #4]
 80029c6:	461a      	mov	r2, r3
 80029c8:	460b      	mov	r3, r1
 80029ca:	72fb      	strb	r3, [r7, #11]
 80029cc:	4613      	mov	r3, r2
 80029ce:	72bb      	strb	r3, [r7, #10]
	int32_t ret = IIS2MDC_ValidateParams(Context,Reg,Buffer,Length);
 80029d0:	7abb      	ldrb	r3, [r7, #10]
 80029d2:	7af9      	ldrb	r1, [r7, #11]
 80029d4:	687a      	ldr	r2, [r7, #4]
 80029d6:	68f8      	ldr	r0, [r7, #12]
 80029d8:	f7ff ff8e 	bl	80028f8 <IIS2MDC_ValidateParams>
 80029dc:	6178      	str	r0, [r7, #20]
	if(ret != IIS2MDC_REG_OK)
 80029de:	697b      	ldr	r3, [r7, #20]
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d001      	beq.n	80029e8 <IIS2MDC_WriteReg+0x2c>
	{
		return ret;
 80029e4:	697b      	ldr	r3, [r7, #20]
 80029e6:	e009      	b.n	80029fc <IIS2MDC_WriteReg+0x40>
	}

	ret = Context->Write(Context->Handle, Reg, Buffer, Length);
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	689c      	ldr	r4, [r3, #8]
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	6818      	ldr	r0, [r3, #0]
 80029f0:	7abb      	ldrb	r3, [r7, #10]
 80029f2:	7af9      	ldrb	r1, [r7, #11]
 80029f4:	687a      	ldr	r2, [r7, #4]
 80029f6:	47a0      	blx	r4
 80029f8:	6178      	str	r0, [r7, #20]
	return ret;
 80029fa:	697b      	ldr	r3, [r7, #20]
}
 80029fc:	4618      	mov	r0, r3
 80029fe:	371c      	adds	r7, #28
 8002a00:	46bd      	mov	sp, r7
 8002a02:	bd90      	pop	{r4, r7, pc}

08002a04 <ISM330DHCX_Init>:
#define T_DATA_MASK  (4U)
#define ISM330DHCX_BOOT_BIT_MSK (0x80)


int32_t ISM330DHCX_Init(ISM330DHCX_Handle_t *Handle, ISM330DHCX_Init_Struct_t Settings, ISM330DHCX_IO_t *IO)
{
 8002a04:	b084      	sub	sp, #16
 8002a06:	b5b0      	push	{r4, r5, r7, lr}
 8002a08:	b08c      	sub	sp, #48	; 0x30
 8002a0a:	af0a      	add	r7, sp, #40	; 0x28
 8002a0c:	6078      	str	r0, [r7, #4]
 8002a0e:	f107 001c 	add.w	r0, r7, #28
 8002a12:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    if(Handle == NULL)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d102      	bne.n	8002a22 <ISM330DHCX_Init+0x1e>
    {
    	return ISM330DHCX_Error;
 8002a1c:	f04f 33ff 	mov.w	r3, #4294967295
 8002a20:	e071      	b.n	8002b06 <ISM330DHCX_Init+0x102>
    }


    if(ISM330DHCX_RegisterIOBus(Handle, IO) != ISM330DHCX_Ok)
 8002a22:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8002a24:	6878      	ldr	r0, [r7, #4]
 8002a26:	f000 f879 	bl	8002b1c <ISM330DHCX_RegisterIOBus>
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d002      	beq.n	8002a36 <ISM330DHCX_Init+0x32>
    {
    	return ISM330DHCX_ParamError;
 8002a30:	f06f 0302 	mvn.w	r3, #2
 8002a34:	e067      	b.n	8002b06 <ISM330DHCX_Init+0x102>
    }

    //Validate if using INT1
    if(Settings.INT1_CTRL != 0 || ((Settings.INT2_CTRL != 0) && (Settings.INT2_on_INT1 == ISM330DHCX_IRQOnBothPins)))
 8002a36:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d107      	bne.n	8002a4e <ISM330DHCX_Init+0x4a>
 8002a3e:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d00a      	beq.n	8002a5c <ISM330DHCX_Init+0x58>
 8002a46:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002a4a:	2b20      	cmp	r3, #32
 8002a4c:	d106      	bne.n	8002a5c <ISM330DHCX_Init+0x58>
    {
    	if(IO->ReadInt1Pin == NULL){
 8002a4e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a50:	691b      	ldr	r3, [r3, #16]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d102      	bne.n	8002a5c <ISM330DHCX_Init+0x58>
        	return ISM330DHCX_ParamError; //If INT1 is used in any capacity, ReadInt1Pin is required
 8002a56:	f06f 0302 	mvn.w	r3, #2
 8002a5a:	e054      	b.n	8002b06 <ISM330DHCX_Init+0x102>
    	}

    }

    //Validate if using INT2
    if(Settings.INT2_CTRL != 0 && IO->ReadInt2Pin == NULL)
 8002a5c:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d006      	beq.n	8002a72 <ISM330DHCX_Init+0x6e>
 8002a64:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a66:	695b      	ldr	r3, [r3, #20]
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d102      	bne.n	8002a72 <ISM330DHCX_Init+0x6e>
    {
    	return ISM330DHCX_ParamError; //If INT2 is used in any capacity, ReadInt2Pin is required
 8002a6c:	f06f 0302 	mvn.w	r3, #2
 8002a70:	e049      	b.n	8002b06 <ISM330DHCX_Init+0x102>
    }

    Handle->Context.Read = ISM330DHCX_ReadWrapper;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	4a27      	ldr	r2, [pc, #156]	; (8002b14 <ISM330DHCX_Init+0x110>)
 8002a76:	625a      	str	r2, [r3, #36]	; 0x24
    Handle->Context.Write = ISM330DHCX_WriteWrapper;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	4a27      	ldr	r2, [pc, #156]	; (8002b18 <ISM330DHCX_Init+0x114>)
 8002a7c:	621a      	str	r2, [r3, #32]
    Handle->Context.Handle = Handle;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	687a      	ldr	r2, [r7, #4]
 8002a82:	61da      	str	r2, [r3, #28]
    Handle->AccelResolution = Settings.FS_XL;
 8002a84:	f897 2040 	ldrb.w	r2, [r7, #64]	; 0x40
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
    Handle->GyroResolution = Settings.FS_G;
 8002a8e:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    Handle->Int1Mode = Settings.INT1_CTRL;
 8002a98:	f897 204b 	ldrb.w	r2, [r7, #75]	; 0x4b
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
    Handle->Int2Mode = Settings.INT2_CTRL;
 8002aa2:	f897 204c 	ldrb.w	r2, [r7, #76]	; 0x4c
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
    Handle->IntPinMux = Settings.INT2_on_INT1;
 8002aac:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    Handle->IntPolarity = Settings.H_LACTIVE;
 8002ab6:	f897 2049 	ldrb.w	r2, [r7, #73]	; 0x49
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    Handle->GyroDataRate = Settings.ODR_G;
 8002ac0:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
    Handle->AccelDataRate = Settings.ODR_XL;
 8002aca:	f897 2034 	ldrb.w	r2, [r7, #52]	; 0x34
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

    //Initialize Bus
    if(Handle->IO.Init != NULL)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d002      	beq.n	8002ae2 <ISM330DHCX_Init+0xde>
    {
    	Handle->IO.Init();
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	4798      	blx	r3
    }

    return ISM330DHCX_RegisterInit(Handle, Settings);
 8002ae2:	466d      	mov	r5, sp
 8002ae4:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8002ae8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002aea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002aec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002aee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002af0:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002af4:	e885 0003 	stmia.w	r5, {r0, r1}
 8002af8:	f107 031c 	add.w	r3, r7, #28
 8002afc:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002afe:	6878      	ldr	r0, [r7, #4]
 8002b00:	f000 f9d5 	bl	8002eae <ISM330DHCX_RegisterInit>
 8002b04:	4603      	mov	r3, r0

}
 8002b06:	4618      	mov	r0, r3
 8002b08:	3708      	adds	r7, #8
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8002b10:	b004      	add	sp, #16
 8002b12:	4770      	bx	lr
 8002b14:	08002e37 	.word	0x08002e37
 8002b18:	08002e73 	.word	0x08002e73

08002b1c <ISM330DHCX_RegisterIOBus>:
    ISM330DHCX_DeInit(Handle);
    return ISM330DHCX_Init(Handle, Settings, IO);
}

int32_t ISM330DHCX_RegisterIOBus(ISM330DHCX_Handle_t *Handle, ISM330DHCX_IO_t *IO)
{
 8002b1c:	b4b0      	push	{r4, r5, r7}
 8002b1e:	b083      	sub	sp, #12
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
 8002b24:	6039      	str	r1, [r7, #0]
    //Validate if Read/Write/GetTick have been provided
    if(IO->Read == NULL || IO->Write==NULL || IO->GetTick == NULL)
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	689b      	ldr	r3, [r3, #8]
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d007      	beq.n	8002b3e <ISM330DHCX_RegisterIOBus+0x22>
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	68db      	ldr	r3, [r3, #12]
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d003      	beq.n	8002b3e <ISM330DHCX_RegisterIOBus+0x22>
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	699b      	ldr	r3, [r3, #24]
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d102      	bne.n	8002b44 <ISM330DHCX_RegisterIOBus+0x28>
    {
    	return ISM330DHCX_ParamError; //Write, Read, GetTick are required for basic device functionality
 8002b3e:	f06f 0302 	mvn.w	r3, #2
 8002b42:	e00a      	b.n	8002b5a <ISM330DHCX_RegisterIOBus+0x3e>
    }

    Handle->IO = *IO;
 8002b44:	687a      	ldr	r2, [r7, #4]
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	4614      	mov	r4, r2
 8002b4a:	461d      	mov	r5, r3
 8002b4c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002b4e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002b50:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002b54:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    return ISM330DHCX_Ok;
 8002b58:	2300      	movs	r3, #0
}
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	370c      	adds	r7, #12
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	bcb0      	pop	{r4, r5, r7}
 8002b62:	4770      	bx	lr

08002b64 <ISM330DHCX_ReadAccel>:

int32_t ISM330DHCX_ReadAccel(ISM330DHCX_Handle_t *Handle, float *Ax, float *Ay, float *Az)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b088      	sub	sp, #32
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	60f8      	str	r0, [r7, #12]
 8002b6c:	60b9      	str	r1, [r7, #8]
 8002b6e:	607a      	str	r2, [r7, #4]
 8002b70:	603b      	str	r3, [r7, #0]
	int32_t ret = ISM330DHCX_Ok;
 8002b72:	2300      	movs	r3, #0
 8002b74:	61fb      	str	r3, [r7, #28]
	int16_t buffer[3] = {0,0,0};
 8002b76:	2300      	movs	r3, #0
 8002b78:	82bb      	strh	r3, [r7, #20]
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	82fb      	strh	r3, [r7, #22]
 8002b7e:	2300      	movs	r3, #0
 8002b80:	833b      	strh	r3, [r7, #24]
    if(Handle == NULL)
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d102      	bne.n	8002b8e <ISM330DHCX_ReadAccel+0x2a>
    {
    	return ISM330DHCX_ParamError;
 8002b88:	f06f 0302 	mvn.w	r3, #2
 8002b8c:	e045      	b.n	8002c1a <ISM330DHCX_ReadAccel+0xb6>
    }

    //Read Status register
    ret = ISM330DHCX_ReadReg(&Handle->Context, ISM330DHCX_REG_STATUS_REG, (uint8_t*)buffer, 1);
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	f103 001c 	add.w	r0, r3, #28
 8002b94:	f107 0214 	add.w	r2, r7, #20
 8002b98:	2301      	movs	r3, #1
 8002b9a:	211e      	movs	r1, #30
 8002b9c:	f000 fc02 	bl	80033a4 <ISM330DHCX_ReadReg>
 8002ba0:	61f8      	str	r0, [r7, #28]
    if(ret != ISM330DHCX_Ok)
 8002ba2:	69fb      	ldr	r3, [r7, #28]
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d001      	beq.n	8002bac <ISM330DHCX_ReadAccel+0x48>
    {
        return ret;
 8002ba8:	69fb      	ldr	r3, [r7, #28]
 8002baa:	e036      	b.n	8002c1a <ISM330DHCX_ReadAccel+0xb6>
    }
    //Check the XL Bit
    if(!(buffer[0] & XL_DATA_MASK))
 8002bac:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002bb0:	b29b      	uxth	r3, r3
 8002bb2:	f003 0301 	and.w	r3, r3, #1
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d102      	bne.n	8002bc0 <ISM330DHCX_ReadAccel+0x5c>
    {
        return ISM330DHCX_DataNotReady;
 8002bba:	f64b 63ef 	movw	r3, #48879	; 0xbeef
 8002bbe:	e02c      	b.n	8002c1a <ISM330DHCX_ReadAccel+0xb6>
    }

    //Read the data
    ret = ISM330DHCX_ReadReg(&Handle->Context, ISM330DHCX_REG_OUTX_L_A, (uint8_t*)buffer, 6);
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	f103 001c 	add.w	r0, r3, #28
 8002bc6:	f107 0214 	add.w	r2, r7, #20
 8002bca:	2306      	movs	r3, #6
 8002bcc:	2128      	movs	r1, #40	; 0x28
 8002bce:	f000 fbe9 	bl	80033a4 <ISM330DHCX_ReadReg>
 8002bd2:	61f8      	str	r0, [r7, #28]
    if(ret != ISM330DHCX_Ok)
 8002bd4:	69fb      	ldr	r3, [r7, #28]
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d001      	beq.n	8002bde <ISM330DHCX_ReadAccel+0x7a>
    {
    	return ret;
 8002bda:	69fb      	ldr	r3, [r7, #28]
 8002bdc:	e01d      	b.n	8002c1a <ISM330DHCX_ReadAccel+0xb6>
    }
    //Convert the data to Gs
    ConvertXLData(Handle->AccelResolution, &buffer[0], Ax);
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8002be4:	f107 0114 	add.w	r1, r7, #20
 8002be8:	68ba      	ldr	r2, [r7, #8]
 8002bea:	4618      	mov	r0, r3
 8002bec:	f000 fb4a 	bl	8003284 <ConvertXLData>
    ConvertXLData(Handle->AccelResolution, &buffer[1], Ay);
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	f893 0029 	ldrb.w	r0, [r3, #41]	; 0x29
 8002bf6:	f107 0314 	add.w	r3, r7, #20
 8002bfa:	3302      	adds	r3, #2
 8002bfc:	687a      	ldr	r2, [r7, #4]
 8002bfe:	4619      	mov	r1, r3
 8002c00:	f000 fb40 	bl	8003284 <ConvertXLData>
    ConvertXLData(Handle->AccelResolution, &buffer[2], Az);
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	f893 0029 	ldrb.w	r0, [r3, #41]	; 0x29
 8002c0a:	f107 0314 	add.w	r3, r7, #20
 8002c0e:	3304      	adds	r3, #4
 8002c10:	683a      	ldr	r2, [r7, #0]
 8002c12:	4619      	mov	r1, r3
 8002c14:	f000 fb36 	bl	8003284 <ConvertXLData>
    return ISM330DHCX_DataReady;
 8002c18:	2300      	movs	r3, #0
}
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	3720      	adds	r7, #32
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	bd80      	pop	{r7, pc}

08002c22 <ISM330DHCX_ReadGyro>:

int32_t ISM330DHCX_ReadGyro(ISM330DHCX_Handle_t *Handle, float *Wx, float *Wy, float *Wz)
{
 8002c22:	b580      	push	{r7, lr}
 8002c24:	b088      	sub	sp, #32
 8002c26:	af00      	add	r7, sp, #0
 8002c28:	60f8      	str	r0, [r7, #12]
 8002c2a:	60b9      	str	r1, [r7, #8]
 8002c2c:	607a      	str	r2, [r7, #4]
 8002c2e:	603b      	str	r3, [r7, #0]
	int32_t ret = ISM330DHCX_Ok;
 8002c30:	2300      	movs	r3, #0
 8002c32:	61fb      	str	r3, [r7, #28]
	int16_t buffer[3] = {0,0,0};
 8002c34:	2300      	movs	r3, #0
 8002c36:	82bb      	strh	r3, [r7, #20]
 8002c38:	2300      	movs	r3, #0
 8002c3a:	82fb      	strh	r3, [r7, #22]
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	833b      	strh	r3, [r7, #24]
    if(Handle == NULL)
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d102      	bne.n	8002c4c <ISM330DHCX_ReadGyro+0x2a>
    {
    	return ISM330DHCX_ParamError;
 8002c46:	f06f 0302 	mvn.w	r3, #2
 8002c4a:	e045      	b.n	8002cd8 <ISM330DHCX_ReadGyro+0xb6>
    }

    //Read Status register
    ret = ISM330DHCX_ReadReg(&Handle->Context, ISM330DHCX_REG_STATUS_REG, (uint8_t*)buffer, 1);
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	f103 001c 	add.w	r0, r3, #28
 8002c52:	f107 0214 	add.w	r2, r7, #20
 8002c56:	2301      	movs	r3, #1
 8002c58:	211e      	movs	r1, #30
 8002c5a:	f000 fba3 	bl	80033a4 <ISM330DHCX_ReadReg>
 8002c5e:	61f8      	str	r0, [r7, #28]
    if(ret != ISM330DHCX_Ok)
 8002c60:	69fb      	ldr	r3, [r7, #28]
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d001      	beq.n	8002c6a <ISM330DHCX_ReadGyro+0x48>
    {
        return ret;
 8002c66:	69fb      	ldr	r3, [r7, #28]
 8002c68:	e036      	b.n	8002cd8 <ISM330DHCX_ReadGyro+0xb6>
    }
    //Check the XL Bit
    if(!(buffer[0] & G_DATA_MASK))
 8002c6a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002c6e:	b29b      	uxth	r3, r3
 8002c70:	f003 0302 	and.w	r3, r3, #2
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d102      	bne.n	8002c7e <ISM330DHCX_ReadGyro+0x5c>
    {
        return ISM330DHCX_DataNotReady;
 8002c78:	f64b 63ef 	movw	r3, #48879	; 0xbeef
 8002c7c:	e02c      	b.n	8002cd8 <ISM330DHCX_ReadGyro+0xb6>
    }

    //Read the data
    ret = ISM330DHCX_ReadReg(&Handle->Context, ISM330DHCX_REG_OUTX_L_G, (uint8_t*)buffer, 6);
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	f103 001c 	add.w	r0, r3, #28
 8002c84:	f107 0214 	add.w	r2, r7, #20
 8002c88:	2306      	movs	r3, #6
 8002c8a:	2122      	movs	r1, #34	; 0x22
 8002c8c:	f000 fb8a 	bl	80033a4 <ISM330DHCX_ReadReg>
 8002c90:	61f8      	str	r0, [r7, #28]
    if(ret != ISM330DHCX_Ok)
 8002c92:	69fb      	ldr	r3, [r7, #28]
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d001      	beq.n	8002c9c <ISM330DHCX_ReadGyro+0x7a>
    {
    	return ret;
 8002c98:	69fb      	ldr	r3, [r7, #28]
 8002c9a:	e01d      	b.n	8002cd8 <ISM330DHCX_ReadGyro+0xb6>
    }
    //Convert Gyro Data to DPS
    ConvertGData(Handle->GyroResolution, &buffer[0], Wx);
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002ca2:	f107 0114 	add.w	r1, r7, #20
 8002ca6:	68ba      	ldr	r2, [r7, #8]
 8002ca8:	4618      	mov	r0, r3
 8002caa:	f000 fb2b 	bl	8003304 <ConvertGData>
    ConvertGData(Handle->GyroResolution, &buffer[1], Wy);
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	f893 0028 	ldrb.w	r0, [r3, #40]	; 0x28
 8002cb4:	f107 0314 	add.w	r3, r7, #20
 8002cb8:	3302      	adds	r3, #2
 8002cba:	687a      	ldr	r2, [r7, #4]
 8002cbc:	4619      	mov	r1, r3
 8002cbe:	f000 fb21 	bl	8003304 <ConvertGData>
    ConvertGData(Handle->GyroResolution, &buffer[2], Wz);
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	f893 0028 	ldrb.w	r0, [r3, #40]	; 0x28
 8002cc8:	f107 0314 	add.w	r3, r7, #20
 8002ccc:	3304      	adds	r3, #4
 8002cce:	683a      	ldr	r2, [r7, #0]
 8002cd0:	4619      	mov	r1, r3
 8002cd2:	f000 fb17 	bl	8003304 <ConvertGData>
    return ISM330DHCX_DataReady;
 8002cd6:	2300      	movs	r3, #0
}
 8002cd8:	4618      	mov	r0, r3
 8002cda:	3720      	adds	r7, #32
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	bd80      	pop	{r7, pc}

08002ce0 <ISM330DHCX_Reboot>:
    ConvertTData(buffer, Data);
    return ISM330DHCX_DataReady;
}

int32_t ISM330DHCX_Reboot(ISM330DHCX_Handle_t *Handle)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b084      	sub	sp, #16
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
    //Put Gyro / Accel In power down mode
	uint32_t ret = ISM330DHCX_Ok;
 8002ce8:	2300      	movs	r3, #0
 8002cea:	60fb      	str	r3, [r7, #12]
    uint8_t buffer = 0;
 8002cec:	2300      	movs	r3, #0
 8002cee:	72fb      	strb	r3, [r7, #11]
    ret = ISM330DHCX_WriteReg(&Handle->Context, ISM330DHCX_REG_CTRL1_XL, &buffer, 1);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	f103 001c 	add.w	r0, r3, #28
 8002cf6:	f107 020b 	add.w	r2, r7, #11
 8002cfa:	2301      	movs	r3, #1
 8002cfc:	2110      	movs	r1, #16
 8002cfe:	f000 fb7a 	bl	80033f6 <ISM330DHCX_WriteReg>
 8002d02:	4603      	mov	r3, r0
 8002d04:	60fb      	str	r3, [r7, #12]
    if(ret != ISM330DHCX_Ok)
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d001      	beq.n	8002d10 <ISM330DHCX_Reboot+0x30>
    {
    	return ret;
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	e038      	b.n	8002d82 <ISM330DHCX_Reboot+0xa2>
    }

    buffer = 0;
 8002d10:	2300      	movs	r3, #0
 8002d12:	72fb      	strb	r3, [r7, #11]
    ret = ISM330DHCX_WriteReg(&Handle->Context, ISM330DHCX_REG_CTRL2_G, &buffer, 1);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	f103 001c 	add.w	r0, r3, #28
 8002d1a:	f107 020b 	add.w	r2, r7, #11
 8002d1e:	2301      	movs	r3, #1
 8002d20:	2111      	movs	r1, #17
 8002d22:	f000 fb68 	bl	80033f6 <ISM330DHCX_WriteReg>
 8002d26:	4603      	mov	r3, r0
 8002d28:	60fb      	str	r3, [r7, #12]
    if(ret != ISM330DHCX_Ok)
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d001      	beq.n	8002d34 <ISM330DHCX_Reboot+0x54>
    {
    	return ret;
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	e026      	b.n	8002d82 <ISM330DHCX_Reboot+0xa2>
    }

	//Set BOOT bit in ctrl 3
    buffer = ISM330DHCX_BOOT_BIT_MSK;
 8002d34:	2380      	movs	r3, #128	; 0x80
 8002d36:	72fb      	strb	r3, [r7, #11]
    ret = ISM330DHCX_WriteReg(&Handle->Context, ISM330DHCX_REG_CTRL3_C, &buffer, 1);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	f103 001c 	add.w	r0, r3, #28
 8002d3e:	f107 020b 	add.w	r2, r7, #11
 8002d42:	2301      	movs	r3, #1
 8002d44:	2112      	movs	r1, #18
 8002d46:	f000 fb56 	bl	80033f6 <ISM330DHCX_WriteReg>
 8002d4a:	4603      	mov	r3, r0
 8002d4c:	60fb      	str	r3, [r7, #12]
    if(ret != ISM330DHCX_Ok)
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d011      	beq.n	8002d78 <ISM330DHCX_Reboot+0x98>
    {
    	return ret;
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	e014      	b.n	8002d82 <ISM330DHCX_Reboot+0xa2>
    }

	//Wait for boot bit to become 0
    while(buffer & ISM330DHCX_BOOT_BIT_MSK)
    {
        ret = ISM330DHCX_ReadReg(&Handle->Context, ISM330DHCX_REG_CTRL3_C, &buffer, 1);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	f103 001c 	add.w	r0, r3, #28
 8002d5e:	f107 020b 	add.w	r2, r7, #11
 8002d62:	2301      	movs	r3, #1
 8002d64:	2112      	movs	r1, #18
 8002d66:	f000 fb1d 	bl	80033a4 <ISM330DHCX_ReadReg>
 8002d6a:	4603      	mov	r3, r0
 8002d6c:	60fb      	str	r3, [r7, #12]
        if(ret != ISM330DHCX_Ok)
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d001      	beq.n	8002d78 <ISM330DHCX_Reboot+0x98>
        {
        	return ret;
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	e004      	b.n	8002d82 <ISM330DHCX_Reboot+0xa2>
    while(buffer & ISM330DHCX_BOOT_BIT_MSK)
 8002d78:	7afb      	ldrb	r3, [r7, #11]
 8002d7a:	b25b      	sxtb	r3, r3
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	dbeb      	blt.n	8002d58 <ISM330DHCX_Reboot+0x78>
        }
    }
    return ISM330DHCX_Ok;
 8002d80:	2300      	movs	r3, #0
}
 8002d82:	4618      	mov	r0, r3
 8002d84:	3710      	adds	r7, #16
 8002d86:	46bd      	mov	sp, r7
 8002d88:	bd80      	pop	{r7, pc}

08002d8a <ISM330DHCX_Reset>:

int32_t ISM330DHCX_Reset(ISM330DHCX_Handle_t *Handle)
{
 8002d8a:	b580      	push	{r7, lr}
 8002d8c:	b084      	sub	sp, #16
 8002d8e:	af00      	add	r7, sp, #0
 8002d90:	6078      	str	r0, [r7, #4]
	//Put Gyro / Accel in power down mode
	uint32_t ret = ISM330DHCX_Ok;
 8002d92:	2300      	movs	r3, #0
 8002d94:	60fb      	str	r3, [r7, #12]
    uint8_t buffer = 0;
 8002d96:	2300      	movs	r3, #0
 8002d98:	72fb      	strb	r3, [r7, #11]
    ret = ISM330DHCX_WriteReg(&Handle->Context, ISM330DHCX_REG_CTRL1_XL, &buffer, 1);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	f103 001c 	add.w	r0, r3, #28
 8002da0:	f107 020b 	add.w	r2, r7, #11
 8002da4:	2301      	movs	r3, #1
 8002da6:	2110      	movs	r1, #16
 8002da8:	f000 fb25 	bl	80033f6 <ISM330DHCX_WriteReg>
 8002dac:	4603      	mov	r3, r0
 8002dae:	60fb      	str	r3, [r7, #12]
    if(ret != ISM330DHCX_Ok)
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d001      	beq.n	8002dba <ISM330DHCX_Reset+0x30>
    {
    	return ret;
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	e039      	b.n	8002e2e <ISM330DHCX_Reset+0xa4>
    }

    buffer = 0;
 8002dba:	2300      	movs	r3, #0
 8002dbc:	72fb      	strb	r3, [r7, #11]
    ret = ISM330DHCX_WriteReg(&Handle->Context, ISM330DHCX_REG_CTRL2_G, &buffer, 1);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	f103 001c 	add.w	r0, r3, #28
 8002dc4:	f107 020b 	add.w	r2, r7, #11
 8002dc8:	2301      	movs	r3, #1
 8002dca:	2111      	movs	r1, #17
 8002dcc:	f000 fb13 	bl	80033f6 <ISM330DHCX_WriteReg>
 8002dd0:	4603      	mov	r3, r0
 8002dd2:	60fb      	str	r3, [r7, #12]
    if(ret != ISM330DHCX_Ok)
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d001      	beq.n	8002dde <ISM330DHCX_Reset+0x54>
    {
    	return ret;
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	e027      	b.n	8002e2e <ISM330DHCX_Reset+0xa4>
    }
	//Set SW Reset bit in CTRL3
    buffer = ISM330DHCX_ResetSignal;
 8002dde:	2301      	movs	r3, #1
 8002de0:	72fb      	strb	r3, [r7, #11]
    ret = ISM330DHCX_WriteReg(&Handle->Context, ISM330DHCX_REG_CTRL3_C, &buffer, 1);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	f103 001c 	add.w	r0, r3, #28
 8002de8:	f107 020b 	add.w	r2, r7, #11
 8002dec:	2301      	movs	r3, #1
 8002dee:	2112      	movs	r1, #18
 8002df0:	f000 fb01 	bl	80033f6 <ISM330DHCX_WriteReg>
 8002df4:	4603      	mov	r3, r0
 8002df6:	60fb      	str	r3, [r7, #12]
    if(ret != ISM330DHCX_Ok)
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d011      	beq.n	8002e22 <ISM330DHCX_Reset+0x98>
    {
    	return ret;
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	e015      	b.n	8002e2e <ISM330DHCX_Reset+0xa4>
    }
	//Poll SW Reset bit
    while(buffer & ISM330DHCX_ResetSignal)
    {
        ret = ISM330DHCX_ReadReg(&Handle->Context, ISM330DHCX_REG_CTRL3_C, &buffer, 1);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	f103 001c 	add.w	r0, r3, #28
 8002e08:	f107 020b 	add.w	r2, r7, #11
 8002e0c:	2301      	movs	r3, #1
 8002e0e:	2112      	movs	r1, #18
 8002e10:	f000 fac8 	bl	80033a4 <ISM330DHCX_ReadReg>
 8002e14:	4603      	mov	r3, r0
 8002e16:	60fb      	str	r3, [r7, #12]
        if(ret != ISM330DHCX_Ok)
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d001      	beq.n	8002e22 <ISM330DHCX_Reset+0x98>
        {
        	return ret;
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	e005      	b.n	8002e2e <ISM330DHCX_Reset+0xa4>
    while(buffer & ISM330DHCX_ResetSignal)
 8002e22:	7afb      	ldrb	r3, [r7, #11]
 8002e24:	f003 0301 	and.w	r3, r3, #1
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d1ea      	bne.n	8002e02 <ISM330DHCX_Reset+0x78>
        }
    }
    return ISM330DHCX_Ok;
 8002e2c:	2300      	movs	r3, #0
}
 8002e2e:	4618      	mov	r0, r3
 8002e30:	3710      	adds	r7, #16
 8002e32:	46bd      	mov	sp, r7
 8002e34:	bd80      	pop	{r7, pc}

08002e36 <ISM330DHCX_ReadWrapper>:

static int32_t ISM330DHCX_ReadWrapper(void *Handle, uint8_t Reg, uint8_t *Buffer, uint8_t Length)
{
 8002e36:	b580      	push	{r7, lr}
 8002e38:	b086      	sub	sp, #24
 8002e3a:	af00      	add	r7, sp, #0
 8002e3c:	60f8      	str	r0, [r7, #12]
 8002e3e:	607a      	str	r2, [r7, #4]
 8002e40:	461a      	mov	r2, r3
 8002e42:	460b      	mov	r3, r1
 8002e44:	72fb      	strb	r3, [r7, #11]
 8002e46:	4613      	mov	r3, r2
 8002e48:	72bb      	strb	r3, [r7, #10]
    ISM330DHCX_Handle_t *DevicePtr = (ISM330DHCX_Handle_t*)Handle;
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	617b      	str	r3, [r7, #20]
    if(DevicePtr->IO.Read != NULL)
 8002e4e:	697b      	ldr	r3, [r7, #20]
 8002e50:	689b      	ldr	r3, [r3, #8]
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d007      	beq.n	8002e66 <ISM330DHCX_ReadWrapper+0x30>
    {
        return DevicePtr->IO.Read(Reg,Buffer,Length);
 8002e56:	697b      	ldr	r3, [r7, #20]
 8002e58:	689b      	ldr	r3, [r3, #8]
 8002e5a:	7aba      	ldrb	r2, [r7, #10]
 8002e5c:	7af8      	ldrb	r0, [r7, #11]
 8002e5e:	6879      	ldr	r1, [r7, #4]
 8002e60:	4798      	blx	r3
 8002e62:	4603      	mov	r3, r0
 8002e64:	e001      	b.n	8002e6a <ISM330DHCX_ReadWrapper+0x34>
    }
    return ISM330DHCX_ReadRegErr;
 8002e66:	f06f 0301 	mvn.w	r3, #1
}
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	3718      	adds	r7, #24
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	bd80      	pop	{r7, pc}

08002e72 <ISM330DHCX_WriteWrapper>:

static int32_t ISM330DHCX_WriteWrapper(void *Handle, uint8_t Reg, uint8_t *Buffer, uint8_t Length)
{
 8002e72:	b580      	push	{r7, lr}
 8002e74:	b086      	sub	sp, #24
 8002e76:	af00      	add	r7, sp, #0
 8002e78:	60f8      	str	r0, [r7, #12]
 8002e7a:	607a      	str	r2, [r7, #4]
 8002e7c:	461a      	mov	r2, r3
 8002e7e:	460b      	mov	r3, r1
 8002e80:	72fb      	strb	r3, [r7, #11]
 8002e82:	4613      	mov	r3, r2
 8002e84:	72bb      	strb	r3, [r7, #10]
    ISM330DHCX_Handle_t *DevicePtr = (ISM330DHCX_Handle_t*)Handle;
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	617b      	str	r3, [r7, #20]
    if(DevicePtr->IO.Write != NULL)
 8002e8a:	697b      	ldr	r3, [r7, #20]
 8002e8c:	68db      	ldr	r3, [r3, #12]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d007      	beq.n	8002ea2 <ISM330DHCX_WriteWrapper+0x30>
    {
        return DevicePtr->IO.Write(Reg,Buffer,Length);
 8002e92:	697b      	ldr	r3, [r7, #20]
 8002e94:	68db      	ldr	r3, [r3, #12]
 8002e96:	7aba      	ldrb	r2, [r7, #10]
 8002e98:	7af8      	ldrb	r0, [r7, #11]
 8002e9a:	6879      	ldr	r1, [r7, #4]
 8002e9c:	4798      	blx	r3
 8002e9e:	4603      	mov	r3, r0
 8002ea0:	e001      	b.n	8002ea6 <ISM330DHCX_WriteWrapper+0x34>
    }
    return ISM330DHCX_ReadRegErr;
 8002ea2:	f06f 0301 	mvn.w	r3, #1
}
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	3718      	adds	r7, #24
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	bd80      	pop	{r7, pc}

08002eae <ISM330DHCX_RegisterInit>:

static int32_t ISM330DHCX_RegisterInit(ISM330DHCX_Handle_t *Handle,ISM330DHCX_Init_Struct_t Settings)
{
 8002eae:	b084      	sub	sp, #16
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b086      	sub	sp, #24
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
 8002eb8:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8002ebc:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    int32_t ret = ISM330DHCX_Ok;
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	617b      	str	r3, [r7, #20]
    uint8_t buffer[12] = {0};
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	60bb      	str	r3, [r7, #8]
 8002ec8:	f107 030c 	add.w	r3, r7, #12
 8002ecc:	2200      	movs	r2, #0
 8002ece:	601a      	str	r2, [r3, #0]
 8002ed0:	605a      	str	r2, [r3, #4]
    ISM330DHCX_Reboot(Handle);
 8002ed2:	6878      	ldr	r0, [r7, #4]
 8002ed4:	f7ff ff04 	bl	8002ce0 <ISM330DHCX_Reboot>
    ISM330DHCX_Reset(Handle);
 8002ed8:	6878      	ldr	r0, [r7, #4]
 8002eda:	f7ff ff56 	bl	8002d8a <ISM330DHCX_Reset>

    buffer[0] = Settings.SDO_PU_EN | 0x3F;
 8002ede:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002ee2:	f043 033f 	orr.w	r3, r3, #63	; 0x3f
 8002ee6:	b2db      	uxtb	r3, r3
 8002ee8:	723b      	strb	r3, [r7, #8]
    ret = ISM330DHCX_WriteReg(&Handle->Context, ISM330DHCX_REG_PIN_CTRL, buffer, 1);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	f103 001c 	add.w	r0, r3, #28
 8002ef0:	f107 0208 	add.w	r2, r7, #8
 8002ef4:	2301      	movs	r3, #1
 8002ef6:	2102      	movs	r1, #2
 8002ef8:	f000 fa7d 	bl	80033f6 <ISM330DHCX_WriteReg>
 8002efc:	6178      	str	r0, [r7, #20]
    if(ret != ISM330DHCX_Ok)
 8002efe:	697b      	ldr	r3, [r7, #20]
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d001      	beq.n	8002f08 <ISM330DHCX_RegisterInit+0x5a>
    {
    	return ret;
 8002f04:	697b      	ldr	r3, [r7, #20]
 8002f06:	e1b5      	b.n	8003274 <ISM330DHCX_RegisterInit+0x3c6>
    }


    buffer[0] = Settings.WTM & 0x00FF; //WTM Threshold is a 9 bit number
 8002f08:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8002f0a:	b2db      	uxtb	r3, r3
 8002f0c:	723b      	strb	r3, [r7, #8]
    ret = ISM330DHCX_WriteReg(&Handle->Context, ISM330DHCX_REG_FIFO_CTRL1, buffer, 1);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	f103 001c 	add.w	r0, r3, #28
 8002f14:	f107 0208 	add.w	r2, r7, #8
 8002f18:	2301      	movs	r3, #1
 8002f1a:	2107      	movs	r1, #7
 8002f1c:	f000 fa6b 	bl	80033f6 <ISM330DHCX_WriteReg>
 8002f20:	6178      	str	r0, [r7, #20]
    if(ret != ISM330DHCX_Ok)
 8002f22:	697b      	ldr	r3, [r7, #20]
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d001      	beq.n	8002f2c <ISM330DHCX_RegisterInit+0x7e>
    {
    	return ret;
 8002f28:	697b      	ldr	r3, [r7, #20]
 8002f2a:	e1a3      	b.n	8003274 <ISM330DHCX_RegisterInit+0x3c6>
    }


    if(Settings.WTM > 0x00FF)
 8002f2c:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8002f2e:	2bff      	cmp	r3, #255	; 0xff
 8002f30:	d906      	bls.n	8002f40 <ISM330DHCX_RegisterInit+0x92>
    {
    	buffer[0] = Settings.STOP_ON_WTM | 0x01;
 8002f32:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8002f36:	f043 0301 	orr.w	r3, r3, #1
 8002f3a:	b2db      	uxtb	r3, r3
 8002f3c:	723b      	strb	r3, [r7, #8]
 8002f3e:	e002      	b.n	8002f46 <ISM330DHCX_RegisterInit+0x98>
    } else
    {
    	buffer[0] = Settings.STOP_ON_WTM;
 8002f40:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8002f44:	723b      	strb	r3, [r7, #8]
    }
    ret = ISM330DHCX_WriteReg(&Handle->Context, ISM330DHCX_REG_FIFO_CTRL2, buffer, 1);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	f103 001c 	add.w	r0, r3, #28
 8002f4c:	f107 0208 	add.w	r2, r7, #8
 8002f50:	2301      	movs	r3, #1
 8002f52:	2108      	movs	r1, #8
 8002f54:	f000 fa4f 	bl	80033f6 <ISM330DHCX_WriteReg>
 8002f58:	6178      	str	r0, [r7, #20]
    if(ret != ISM330DHCX_Ok)
 8002f5a:	697b      	ldr	r3, [r7, #20]
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d001      	beq.n	8002f64 <ISM330DHCX_RegisterInit+0xb6>
    {
    	return ret;
 8002f60:	697b      	ldr	r3, [r7, #20]
 8002f62:	e187      	b.n	8003274 <ISM330DHCX_RegisterInit+0x3c6>
    }


    buffer[0] = Settings.BDR_GY | Settings.BDR_XL;
 8002f64:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 8002f68:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002f6c:	4313      	orrs	r3, r2
 8002f6e:	b2db      	uxtb	r3, r3
 8002f70:	723b      	strb	r3, [r7, #8]
    ret = ISM330DHCX_WriteReg(&Handle->Context, ISM330DHCX_REG_FIFO_CTRL3, buffer, 1);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	f103 001c 	add.w	r0, r3, #28
 8002f78:	f107 0208 	add.w	r2, r7, #8
 8002f7c:	2301      	movs	r3, #1
 8002f7e:	2109      	movs	r1, #9
 8002f80:	f000 fa39 	bl	80033f6 <ISM330DHCX_WriteReg>
 8002f84:	6178      	str	r0, [r7, #20]
    if(ret != ISM330DHCX_Ok)
 8002f86:	697b      	ldr	r3, [r7, #20]
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d001      	beq.n	8002f90 <ISM330DHCX_RegisterInit+0xe2>
    {
    	return ret;
 8002f8c:	697b      	ldr	r3, [r7, #20]
 8002f8e:	e171      	b.n	8003274 <ISM330DHCX_RegisterInit+0x3c6>
    }


    buffer[0] = Settings.DEC_TS_BATCH | Settings.ODR_T_BATCH | Settings.FIFO_MODE;
 8002f90:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8002f94:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8002f98:	4313      	orrs	r3, r2
 8002f9a:	b2da      	uxtb	r2, r3
 8002f9c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8002fa0:	4313      	orrs	r3, r2
 8002fa2:	b2db      	uxtb	r3, r3
 8002fa4:	723b      	strb	r3, [r7, #8]
    ret = ISM330DHCX_WriteReg(&Handle->Context, ISM330DHCX_REG_FIFO_CTRL4, buffer, 1);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	f103 001c 	add.w	r0, r3, #28
 8002fac:	f107 0208 	add.w	r2, r7, #8
 8002fb0:	2301      	movs	r3, #1
 8002fb2:	210a      	movs	r1, #10
 8002fb4:	f000 fa1f 	bl	80033f6 <ISM330DHCX_WriteReg>
 8002fb8:	6178      	str	r0, [r7, #20]
    if(ret != ISM330DHCX_Ok)
 8002fba:	697b      	ldr	r3, [r7, #20]
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d001      	beq.n	8002fc4 <ISM330DHCX_RegisterInit+0x116>
    {
    	return ret;
 8002fc0:	697b      	ldr	r3, [r7, #20]
 8002fc2:	e157      	b.n	8003274 <ISM330DHCX_RegisterInit+0x3c6>
    }


    buffer[0] = Settings.CNT_BDR_TH & 0x00FF;
 8002fc4:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8002fc6:	b2db      	uxtb	r3, r3
 8002fc8:	723b      	strb	r3, [r7, #8]
    ret = ISM330DHCX_WriteReg(&Handle->Context, ISM330DHCX_REG_COUNTER_BDR_REG2, buffer, 1);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	f103 001c 	add.w	r0, r3, #28
 8002fd0:	f107 0208 	add.w	r2, r7, #8
 8002fd4:	2301      	movs	r3, #1
 8002fd6:	210c      	movs	r1, #12
 8002fd8:	f000 fa0d 	bl	80033f6 <ISM330DHCX_WriteReg>
 8002fdc:	6178      	str	r0, [r7, #20]
    if(ret != ISM330DHCX_Ok)
 8002fde:	697b      	ldr	r3, [r7, #20]
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d001      	beq.n	8002fe8 <ISM330DHCX_RegisterInit+0x13a>
    {
    	return ret;
 8002fe4:	697b      	ldr	r3, [r7, #20]
 8002fe6:	e145      	b.n	8003274 <ISM330DHCX_RegisterInit+0x3c6>
    }


    buffer[0] = ((Settings.CNT_BDR_TH & 0x0700) >> 8) | Settings.dataready_pulsed | Settings.TRIG_COUNTER_BDR;
 8002fe8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8002fea:	121b      	asrs	r3, r3, #8
 8002fec:	b25b      	sxtb	r3, r3
 8002fee:	f003 0307 	and.w	r3, r3, #7
 8002ff2:	b25a      	sxtb	r2, r3
 8002ff4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002ff8:	b25b      	sxtb	r3, r3
 8002ffa:	4313      	orrs	r3, r2
 8002ffc:	b25a      	sxtb	r2, r3
 8002ffe:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8003002:	b25b      	sxtb	r3, r3
 8003004:	4313      	orrs	r3, r2
 8003006:	b25b      	sxtb	r3, r3
 8003008:	b2db      	uxtb	r3, r3
 800300a:	723b      	strb	r3, [r7, #8]
    ret = ISM330DHCX_WriteReg(&Handle->Context, ISM330DHCX_REG_COUNTER_BDR_REG1, buffer, 1);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	f103 001c 	add.w	r0, r3, #28
 8003012:	f107 0208 	add.w	r2, r7, #8
 8003016:	2301      	movs	r3, #1
 8003018:	210b      	movs	r1, #11
 800301a:	f000 f9ec 	bl	80033f6 <ISM330DHCX_WriteReg>
 800301e:	6178      	str	r0, [r7, #20]
    if(ret != ISM330DHCX_Ok)
 8003020:	697b      	ldr	r3, [r7, #20]
 8003022:	2b00      	cmp	r3, #0
 8003024:	d001      	beq.n	800302a <ISM330DHCX_RegisterInit+0x17c>
    {
    	return ret;
 8003026:	697b      	ldr	r3, [r7, #20]
 8003028:	e124      	b.n	8003274 <ISM330DHCX_RegisterInit+0x3c6>
    }


    buffer[0] = Settings.INT1_CTRL;
 800302a:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 800302e:	723b      	strb	r3, [r7, #8]
    ret = ISM330DHCX_WriteReg(&Handle->Context, ISM330DHCX_REG_INT1_CTRL, buffer, 1);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	f103 001c 	add.w	r0, r3, #28
 8003036:	f107 0208 	add.w	r2, r7, #8
 800303a:	2301      	movs	r3, #1
 800303c:	210d      	movs	r1, #13
 800303e:	f000 f9da 	bl	80033f6 <ISM330DHCX_WriteReg>
 8003042:	6178      	str	r0, [r7, #20]
    if(ret != ISM330DHCX_Ok)
 8003044:	697b      	ldr	r3, [r7, #20]
 8003046:	2b00      	cmp	r3, #0
 8003048:	d001      	beq.n	800304e <ISM330DHCX_RegisterInit+0x1a0>
    {
    	return ret;
 800304a:	697b      	ldr	r3, [r7, #20]
 800304c:	e112      	b.n	8003274 <ISM330DHCX_RegisterInit+0x3c6>
    }


    buffer[0] = Settings.INT2_CTRL;
 800304e:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8003052:	723b      	strb	r3, [r7, #8]
    ret = ISM330DHCX_WriteReg(&Handle->Context, ISM330DHCX_REG_INT2_CTRL, buffer, 1);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	f103 001c 	add.w	r0, r3, #28
 800305a:	f107 0208 	add.w	r2, r7, #8
 800305e:	2301      	movs	r3, #1
 8003060:	210e      	movs	r1, #14
 8003062:	f000 f9c8 	bl	80033f6 <ISM330DHCX_WriteReg>
 8003066:	6178      	str	r0, [r7, #20]
    if(ret != ISM330DHCX_Ok)
 8003068:	697b      	ldr	r3, [r7, #20]
 800306a:	2b00      	cmp	r3, #0
 800306c:	d001      	beq.n	8003072 <ISM330DHCX_RegisterInit+0x1c4>
    {
    	return ret;
 800306e:	697b      	ldr	r3, [r7, #20]
 8003070:	e100      	b.n	8003274 <ISM330DHCX_RegisterInit+0x3c6>
    }


    buffer[0] = 0x40 | Settings.PP_OD | Settings.H_LACTIVE | Settings.SIM | Settings.IF_INC;
 8003072:	f897 2052 	ldrb.w	r2, [r7, #82]	; 0x52
 8003076:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
 800307a:	4313      	orrs	r3, r2
 800307c:	b2da      	uxtb	r2, r3
 800307e:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8003082:	4313      	orrs	r3, r2
 8003084:	b2da      	uxtb	r2, r3
 8003086:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800308a:	4313      	orrs	r3, r2
 800308c:	b2db      	uxtb	r3, r3
 800308e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003092:	b2db      	uxtb	r3, r3
 8003094:	723b      	strb	r3, [r7, #8]
    ret = ISM330DHCX_WriteReg(&Handle->Context, ISM330DHCX_REG_CTRL3_C, buffer, 1);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	f103 001c 	add.w	r0, r3, #28
 800309c:	f107 0208 	add.w	r2, r7, #8
 80030a0:	2301      	movs	r3, #1
 80030a2:	2112      	movs	r1, #18
 80030a4:	f000 f9a7 	bl	80033f6 <ISM330DHCX_WriteReg>
 80030a8:	6178      	str	r0, [r7, #20]
    if(ret != ISM330DHCX_Ok)
 80030aa:	697b      	ldr	r3, [r7, #20]
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d001      	beq.n	80030b4 <ISM330DHCX_RegisterInit+0x206>
    {
    	return ret;
 80030b0:	697b      	ldr	r3, [r7, #20]
 80030b2:	e0df      	b.n	8003274 <ISM330DHCX_RegisterInit+0x3c6>
    }


    buffer[0] = Settings.TriggerMode | Settings.XL_HM_MODE | Settings.USR_OFF_W | Settings.FTYPE;
 80030b4:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80030b8:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 80030bc:	4313      	orrs	r3, r2
 80030be:	b2da      	uxtb	r2, r3
 80030c0:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 80030c4:	4313      	orrs	r3, r2
 80030c6:	b2da      	uxtb	r2, r3
 80030c8:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 80030cc:	4313      	orrs	r3, r2
 80030ce:	b2db      	uxtb	r3, r3
 80030d0:	723b      	strb	r3, [r7, #8]
    ret = ISM330DHCX_WriteReg(&Handle->Context, ISM330DHCX_REG_CTRL6_C, buffer, 1);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	f103 001c 	add.w	r0, r3, #28
 80030d8:	f107 0208 	add.w	r2, r7, #8
 80030dc:	2301      	movs	r3, #1
 80030de:	2115      	movs	r1, #21
 80030e0:	f000 f989 	bl	80033f6 <ISM330DHCX_WriteReg>
 80030e4:	6178      	str	r0, [r7, #20]
    if(ret != ISM330DHCX_Ok)
 80030e6:	697b      	ldr	r3, [r7, #20]
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d001      	beq.n	80030f0 <ISM330DHCX_RegisterInit+0x242>
    {
    	return ret;
 80030ec:	697b      	ldr	r3, [r7, #20]
 80030ee:	e0c1      	b.n	8003274 <ISM330DHCX_RegisterInit+0x3c6>
    }


    buffer[0] = Settings.G_HM_MODE | Settings.HP_EN_G | Settings.HPM_G | Settings.USR_OFF_ON_OUT;
 80030f0:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 80030f4:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 80030f8:	4313      	orrs	r3, r2
 80030fa:	b2da      	uxtb	r2, r3
 80030fc:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8003100:	4313      	orrs	r3, r2
 8003102:	b2da      	uxtb	r2, r3
 8003104:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 8003108:	4313      	orrs	r3, r2
 800310a:	b2db      	uxtb	r3, r3
 800310c:	723b      	strb	r3, [r7, #8]
    ret = ISM330DHCX_WriteReg(&Handle->Context, ISM330DHCX_REG_CTRL7_G, buffer, 1);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	f103 001c 	add.w	r0, r3, #28
 8003114:	f107 0208 	add.w	r2, r7, #8
 8003118:	2301      	movs	r3, #1
 800311a:	2116      	movs	r1, #22
 800311c:	f000 f96b 	bl	80033f6 <ISM330DHCX_WriteReg>
 8003120:	6178      	str	r0, [r7, #20]
    if(ret != ISM330DHCX_Ok)
 8003122:	697b      	ldr	r3, [r7, #20]
 8003124:	2b00      	cmp	r3, #0
 8003126:	d001      	beq.n	800312c <ISM330DHCX_RegisterInit+0x27e>
    {
    	return ret;
 8003128:	697b      	ldr	r3, [r7, #20]
 800312a:	e0a3      	b.n	8003274 <ISM330DHCX_RegisterInit+0x3c6>
    }


    buffer[0] = Settings.HPCF_XL | Settings.HP_REF_MODE_XL | Settings.FASTSETTL_MODE_XL | Settings.HP_SLOPE_XL_EN;
 800312c:	f897 2040 	ldrb.w	r2, [r7, #64]	; 0x40
 8003130:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8003134:	4313      	orrs	r3, r2
 8003136:	b2da      	uxtb	r2, r3
 8003138:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800313c:	4313      	orrs	r3, r2
 800313e:	b2da      	uxtb	r2, r3
 8003140:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8003144:	4313      	orrs	r3, r2
 8003146:	b2db      	uxtb	r3, r3
 8003148:	723b      	strb	r3, [r7, #8]
    ret = ISM330DHCX_WriteReg(&Handle->Context, ISM330DHCX_REG_CTRL8_XL, buffer, 1);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	f103 001c 	add.w	r0, r3, #28
 8003150:	f107 0208 	add.w	r2, r7, #8
 8003154:	2301      	movs	r3, #1
 8003156:	2117      	movs	r1, #23
 8003158:	f000 f94d 	bl	80033f6 <ISM330DHCX_WriteReg>
 800315c:	6178      	str	r0, [r7, #20]
    if(ret != ISM330DHCX_Ok)
 800315e:	697b      	ldr	r3, [r7, #20]
 8003160:	2b00      	cmp	r3, #0
 8003162:	d001      	beq.n	8003168 <ISM330DHCX_RegisterInit+0x2ba>
    {
    	return ret;
 8003164:	697b      	ldr	r3, [r7, #20]
 8003166:	e085      	b.n	8003274 <ISM330DHCX_RegisterInit+0x3c6>
    }


    buffer[0] = Settings.DEN_X | Settings.DEN_Y | Settings.DEN_Z | Settings.DEN_XL_G | Settings.DEN_XL_EN | Settings.DEN_LH;
 8003168:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800316c:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8003170:	4313      	orrs	r3, r2
 8003172:	b2da      	uxtb	r2, r3
 8003174:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8003178:	4313      	orrs	r3, r2
 800317a:	b2da      	uxtb	r2, r3
 800317c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003180:	4313      	orrs	r3, r2
 8003182:	b2da      	uxtb	r2, r3
 8003184:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8003188:	4313      	orrs	r3, r2
 800318a:	b2da      	uxtb	r2, r3
 800318c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003190:	4313      	orrs	r3, r2
 8003192:	b2db      	uxtb	r3, r3
 8003194:	723b      	strb	r3, [r7, #8]
    ret = ISM330DHCX_WriteReg(&Handle->Context, ISM330DHCX_REG_CTRL9_XL, buffer, 1);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	f103 001c 	add.w	r0, r3, #28
 800319c:	f107 0208 	add.w	r2, r7, #8
 80031a0:	2301      	movs	r3, #1
 80031a2:	2118      	movs	r1, #24
 80031a4:	f000 f927 	bl	80033f6 <ISM330DHCX_WriteReg>
 80031a8:	6178      	str	r0, [r7, #20]
    if(ret != ISM330DHCX_Ok)
 80031aa:	697b      	ldr	r3, [r7, #20]
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d001      	beq.n	80031b4 <ISM330DHCX_RegisterInit+0x306>
    {
    	return ret;
 80031b0:	697b      	ldr	r3, [r7, #20]
 80031b2:	e05f      	b.n	8003274 <ISM330DHCX_RegisterInit+0x3c6>
    }


    buffer[0] = Settings.TIMESTAMP_EN;
 80031b4:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 80031b8:	723b      	strb	r3, [r7, #8]
    ret = ISM330DHCX_WriteReg(&Handle->Context, ISM330DHCX_REG_CTRL10_C, buffer, 1);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	f103 001c 	add.w	r0, r3, #28
 80031c0:	f107 0208 	add.w	r2, r7, #8
 80031c4:	2301      	movs	r3, #1
 80031c6:	2119      	movs	r1, #25
 80031c8:	f000 f915 	bl	80033f6 <ISM330DHCX_WriteReg>
 80031cc:	6178      	str	r0, [r7, #20]
    if(ret != ISM330DHCX_Ok)
 80031ce:	697b      	ldr	r3, [r7, #20]
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d001      	beq.n	80031d8 <ISM330DHCX_RegisterInit+0x32a>
    {
    	return ret;
 80031d4:	697b      	ldr	r3, [r7, #20]
 80031d6:	e04d      	b.n	8003274 <ISM330DHCX_RegisterInit+0x3c6>
    }


    buffer[0] = Settings.ODR_XL | Settings.FS_XL | Settings.LPF2_XL_EN;
 80031d8:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 80031dc:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 80031e0:	4313      	orrs	r3, r2
 80031e2:	b2da      	uxtb	r2, r3
 80031e4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80031e8:	4313      	orrs	r3, r2
 80031ea:	b2db      	uxtb	r3, r3
 80031ec:	723b      	strb	r3, [r7, #8]
    ret = ISM330DHCX_WriteReg(&Handle->Context, ISM330DHCX_REG_CTRL1_XL, buffer, 1);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	f103 001c 	add.w	r0, r3, #28
 80031f4:	f107 0208 	add.w	r2, r7, #8
 80031f8:	2301      	movs	r3, #1
 80031fa:	2110      	movs	r1, #16
 80031fc:	f000 f8fb 	bl	80033f6 <ISM330DHCX_WriteReg>
 8003200:	6178      	str	r0, [r7, #20]
    if(ret != ISM330DHCX_Ok)
 8003202:	697b      	ldr	r3, [r7, #20]
 8003204:	2b00      	cmp	r3, #0
 8003206:	d001      	beq.n	800320c <ISM330DHCX_RegisterInit+0x35e>
    {
    	return ret;
 8003208:	697b      	ldr	r3, [r7, #20]
 800320a:	e033      	b.n	8003274 <ISM330DHCX_RegisterInit+0x3c6>
    }


    buffer[0] = Settings.ODR_G | Settings.FS_G;
 800320c:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 8003210:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8003214:	4313      	orrs	r3, r2
 8003216:	b2db      	uxtb	r3, r3
 8003218:	723b      	strb	r3, [r7, #8]
    ret = ISM330DHCX_WriteReg(&Handle->Context, ISM330DHCX_REG_CTRL2_G, buffer, 1);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	f103 001c 	add.w	r0, r3, #28
 8003220:	f107 0208 	add.w	r2, r7, #8
 8003224:	2301      	movs	r3, #1
 8003226:	2111      	movs	r1, #17
 8003228:	f000 f8e5 	bl	80033f6 <ISM330DHCX_WriteReg>
 800322c:	6178      	str	r0, [r7, #20]
    if(ret != ISM330DHCX_Ok)
 800322e:	697b      	ldr	r3, [r7, #20]
 8003230:	2b00      	cmp	r3, #0
 8003232:	d001      	beq.n	8003238 <ISM330DHCX_RegisterInit+0x38a>
    {
    	return ret;
 8003234:	697b      	ldr	r3, [r7, #20]
 8003236:	e01d      	b.n	8003274 <ISM330DHCX_RegisterInit+0x3c6>
    }

    ret = ISM330DHCX_ReadReg(&Handle->Context, ISM330DHCX_REG_OUTX_L_G, buffer, 1);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	f103 001c 	add.w	r0, r3, #28
 800323e:	f107 0208 	add.w	r2, r7, #8
 8003242:	2301      	movs	r3, #1
 8003244:	2122      	movs	r1, #34	; 0x22
 8003246:	f000 f8ad 	bl	80033a4 <ISM330DHCX_ReadReg>
 800324a:	6178      	str	r0, [r7, #20]
    //Discard Data that was collected during configuration
    ret = ISM330DHCX_ReadReg(&Handle->Context, ISM330DHCX_REG_OUTX_L_G, buffer, 12);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	f103 001c 	add.w	r0, r3, #28
 8003252:	f107 0208 	add.w	r2, r7, #8
 8003256:	230c      	movs	r3, #12
 8003258:	2122      	movs	r1, #34	; 0x22
 800325a:	f000 f8a3 	bl	80033a4 <ISM330DHCX_ReadReg>
 800325e:	6178      	str	r0, [r7, #20]
    if(ret != ISM330DHCX_Ok)
 8003260:	697b      	ldr	r3, [r7, #20]
 8003262:	2b00      	cmp	r3, #0
 8003264:	d001      	beq.n	800326a <ISM330DHCX_RegisterInit+0x3bc>
    {
    	return ret;
 8003266:	697b      	ldr	r3, [r7, #20]
 8003268:	e004      	b.n	8003274 <ISM330DHCX_RegisterInit+0x3c6>
    }
    Handle->Status = ISM330DHCX_Initialized;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	2201      	movs	r2, #1
 800326e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return ISM330DHCX_Ok;
 8003272:	2300      	movs	r3, #0
}
 8003274:	4618      	mov	r0, r3
 8003276:	3718      	adds	r7, #24
 8003278:	46bd      	mov	sp, r7
 800327a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800327e:	b004      	add	sp, #16
 8003280:	4770      	bx	lr
	...

08003284 <ConvertXLData>:

static void ConvertXLData(ISM330DHCX_AccelFullscale_t AccelResolution, int16_t *buffer, float *data)
{
 8003284:	b480      	push	{r7}
 8003286:	b087      	sub	sp, #28
 8003288:	af00      	add	r7, sp, #0
 800328a:	4603      	mov	r3, r0
 800328c:	60b9      	str	r1, [r7, #8]
 800328e:	607a      	str	r2, [r7, #4]
 8003290:	73fb      	strb	r3, [r7, #15]
      float ConversionFactor = 0;
 8003292:	f04f 0300 	mov.w	r3, #0
 8003296:	617b      	str	r3, [r7, #20]
      if(AccelResolution == ISM330DHCX_XL_2g)
 8003298:	7bfb      	ldrb	r3, [r7, #15]
 800329a:	2b00      	cmp	r3, #0
 800329c:	d102      	bne.n	80032a4 <ConvertXLData+0x20>
      {
    	  ConversionFactor = 0.061;
 800329e:	4b14      	ldr	r3, [pc, #80]	; (80032f0 <ConvertXLData+0x6c>)
 80032a0:	617b      	str	r3, [r7, #20]
 80032a2:	e00d      	b.n	80032c0 <ConvertXLData+0x3c>
      }else if(AccelResolution == ISM330DHCX_XL_16g)
 80032a4:	7bfb      	ldrb	r3, [r7, #15]
 80032a6:	2b04      	cmp	r3, #4
 80032a8:	d102      	bne.n	80032b0 <ConvertXLData+0x2c>
	  {
    	  ConversionFactor = 0.488;
 80032aa:	4b12      	ldr	r3, [pc, #72]	; (80032f4 <ConvertXLData+0x70>)
 80032ac:	617b      	str	r3, [r7, #20]
 80032ae:	e007      	b.n	80032c0 <ConvertXLData+0x3c>
	  }else if(AccelResolution == ISM330DHCX_XL_8g)
 80032b0:	7bfb      	ldrb	r3, [r7, #15]
 80032b2:	2b0c      	cmp	r3, #12
 80032b4:	d102      	bne.n	80032bc <ConvertXLData+0x38>
	  {
		  ConversionFactor = 0.244;
 80032b6:	4b10      	ldr	r3, [pc, #64]	; (80032f8 <ConvertXLData+0x74>)
 80032b8:	617b      	str	r3, [r7, #20]
 80032ba:	e001      	b.n	80032c0 <ConvertXLData+0x3c>
	  }else //4g
	  {
		  ConversionFactor = 0.122;
 80032bc:	4b0f      	ldr	r3, [pc, #60]	; (80032fc <ConvertXLData+0x78>)
 80032be:	617b      	str	r3, [r7, #20]
	  }
      *data = (ConversionFactor * (*buffer)) / 1000.0; //Div by 1000 to convert g, not mg
 80032c0:	68bb      	ldr	r3, [r7, #8]
 80032c2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80032c6:	ee07 3a90 	vmov	s15, r3
 80032ca:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80032ce:	edd7 7a05 	vldr	s15, [r7, #20]
 80032d2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80032d6:	eddf 6a0a 	vldr	s13, [pc, #40]	; 8003300 <ConvertXLData+0x7c>
 80032da:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	edc3 7a00 	vstr	s15, [r3]
}
 80032e4:	bf00      	nop
 80032e6:	371c      	adds	r7, #28
 80032e8:	46bd      	mov	sp, r7
 80032ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ee:	4770      	bx	lr
 80032f0:	3d79db23 	.word	0x3d79db23
 80032f4:	3ef9db23 	.word	0x3ef9db23
 80032f8:	3e79db23 	.word	0x3e79db23
 80032fc:	3df9db23 	.word	0x3df9db23
 8003300:	447a0000 	.word	0x447a0000

08003304 <ConvertGData>:

static void ConvertGData(ISM330DHCX_GyroFullScale_t GyroResolution, int16_t *buffer, float *data)
{
 8003304:	b480      	push	{r7}
 8003306:	b087      	sub	sp, #28
 8003308:	af00      	add	r7, sp, #0
 800330a:	4603      	mov	r3, r0
 800330c:	60b9      	str	r1, [r7, #8]
 800330e:	607a      	str	r2, [r7, #4]
 8003310:	73fb      	strb	r3, [r7, #15]

      float ConversionFactor = 0;
 8003312:	f04f 0300 	mov.w	r3, #0
 8003316:	617b      	str	r3, [r7, #20]
      if(GyroResolution == ISM330DHCX_G_125DPS)
 8003318:	7bfb      	ldrb	r3, [r7, #15]
 800331a:	2b02      	cmp	r3, #2
 800331c:	d102      	bne.n	8003324 <ConvertGData+0x20>
      {
    	  ConversionFactor = 0.004375;
 800331e:	4b1a      	ldr	r3, [pc, #104]	; (8003388 <ConvertGData+0x84>)
 8003320:	617b      	str	r3, [r7, #20]
 8003322:	e019      	b.n	8003358 <ConvertGData+0x54>
      }else if(GyroResolution == ISM330DHCX_G_250DPS)
 8003324:	7bfb      	ldrb	r3, [r7, #15]
 8003326:	2b00      	cmp	r3, #0
 8003328:	d102      	bne.n	8003330 <ConvertGData+0x2c>
	  {
    	  ConversionFactor = 0.00875;
 800332a:	4b18      	ldr	r3, [pc, #96]	; (800338c <ConvertGData+0x88>)
 800332c:	617b      	str	r3, [r7, #20]
 800332e:	e013      	b.n	8003358 <ConvertGData+0x54>
	  }else if(GyroResolution == ISM330DHCX_G_500DPS)
 8003330:	7bfb      	ldrb	r3, [r7, #15]
 8003332:	2b04      	cmp	r3, #4
 8003334:	d102      	bne.n	800333c <ConvertGData+0x38>
	  {
		  ConversionFactor = 0.0175;
 8003336:	4b16      	ldr	r3, [pc, #88]	; (8003390 <ConvertGData+0x8c>)
 8003338:	617b      	str	r3, [r7, #20]
 800333a:	e00d      	b.n	8003358 <ConvertGData+0x54>
	  }else if(GyroResolution == ISM330DHCX_G_1000DPS)
 800333c:	7bfb      	ldrb	r3, [r7, #15]
 800333e:	2b08      	cmp	r3, #8
 8003340:	d102      	bne.n	8003348 <ConvertGData+0x44>
	  {
		  ConversionFactor = 0.035;
 8003342:	4b14      	ldr	r3, [pc, #80]	; (8003394 <ConvertGData+0x90>)
 8003344:	617b      	str	r3, [r7, #20]
 8003346:	e007      	b.n	8003358 <ConvertGData+0x54>
	  }else if(GyroResolution == ISM330DHCX_G_2000DPS)
 8003348:	7bfb      	ldrb	r3, [r7, #15]
 800334a:	2b0c      	cmp	r3, #12
 800334c:	d102      	bne.n	8003354 <ConvertGData+0x50>
	  {
		  ConversionFactor = 0.070;
 800334e:	4b12      	ldr	r3, [pc, #72]	; (8003398 <ConvertGData+0x94>)
 8003350:	617b      	str	r3, [r7, #20]
 8003352:	e001      	b.n	8003358 <ConvertGData+0x54>
	  }else //4000DPS
	  {
		  ConversionFactor = 0.140;
 8003354:	4b11      	ldr	r3, [pc, #68]	; (800339c <ConvertGData+0x98>)
 8003356:	617b      	str	r3, [r7, #20]
	  }
      *data = ConversionFactor * (*buffer) / 1000.0; //Div by 1000 to convert to DPS from mDPS
 8003358:	68bb      	ldr	r3, [r7, #8]
 800335a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800335e:	ee07 3a90 	vmov	s15, r3
 8003362:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003366:	edd7 7a05 	vldr	s15, [r7, #20]
 800336a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800336e:	eddf 6a0c 	vldr	s13, [pc, #48]	; 80033a0 <ConvertGData+0x9c>
 8003372:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	edc3 7a00 	vstr	s15, [r3]
}
 800337c:	bf00      	nop
 800337e:	371c      	adds	r7, #28
 8003380:	46bd      	mov	sp, r7
 8003382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003386:	4770      	bx	lr
 8003388:	3b8f5c29 	.word	0x3b8f5c29
 800338c:	3c0f5c29 	.word	0x3c0f5c29
 8003390:	3c8f5c29 	.word	0x3c8f5c29
 8003394:	3d0f5c29 	.word	0x3d0f5c29
 8003398:	3d8f5c29 	.word	0x3d8f5c29
 800339c:	3e0f5c29 	.word	0x3e0f5c29
 80033a0:	447a0000 	.word	0x447a0000

080033a4 <ISM330DHCX_ReadReg>:
#include <stddef.h>

static int32_t ISM330DHCX_ValidateParams(uint8_t Reg, uint8_t *Buffer, uint8_t Length);

int32_t ISM330DHCX_ReadReg(ISM330DHCX_Context_t *Context, uint8_t Reg, uint8_t *Buffer, uint8_t Length)
{
 80033a4:	b590      	push	{r4, r7, lr}
 80033a6:	b087      	sub	sp, #28
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	60f8      	str	r0, [r7, #12]
 80033ac:	607a      	str	r2, [r7, #4]
 80033ae:	461a      	mov	r2, r3
 80033b0:	460b      	mov	r3, r1
 80033b2:	72fb      	strb	r3, [r7, #11]
 80033b4:	4613      	mov	r3, r2
 80033b6:	72bb      	strb	r3, [r7, #10]
	if(Context->Read == NULL)
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	689b      	ldr	r3, [r3, #8]
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d101      	bne.n	80033c4 <ISM330DHCX_ReadReg+0x20>
	{
		return ISM330DHCX_REG_CONTEXT_ERR;
 80033c0:	2308      	movs	r3, #8
 80033c2:	e014      	b.n	80033ee <ISM330DHCX_ReadReg+0x4a>
	}

	int32_t ret = ISM330DHCX_ValidateParams(Reg,Buffer,Length);
 80033c4:	7aba      	ldrb	r2, [r7, #10]
 80033c6:	7afb      	ldrb	r3, [r7, #11]
 80033c8:	6879      	ldr	r1, [r7, #4]
 80033ca:	4618      	mov	r0, r3
 80033cc:	f000 f83c 	bl	8003448 <ISM330DHCX_ValidateParams>
 80033d0:	6178      	str	r0, [r7, #20]
	if(ret != ISM330DHCX_REG_NO_ERR)
 80033d2:	697b      	ldr	r3, [r7, #20]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d001      	beq.n	80033dc <ISM330DHCX_ReadReg+0x38>
	{
        return ret;
 80033d8:	697b      	ldr	r3, [r7, #20]
 80033da:	e008      	b.n	80033ee <ISM330DHCX_ReadReg+0x4a>
	}

	return Context->Read(Context->Handle, Reg, Buffer, Length);
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	689c      	ldr	r4, [r3, #8]
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	6818      	ldr	r0, [r3, #0]
 80033e4:	7abb      	ldrb	r3, [r7, #10]
 80033e6:	7af9      	ldrb	r1, [r7, #11]
 80033e8:	687a      	ldr	r2, [r7, #4]
 80033ea:	47a0      	blx	r4
 80033ec:	4603      	mov	r3, r0
}
 80033ee:	4618      	mov	r0, r3
 80033f0:	371c      	adds	r7, #28
 80033f2:	46bd      	mov	sp, r7
 80033f4:	bd90      	pop	{r4, r7, pc}

080033f6 <ISM330DHCX_WriteReg>:

int32_t ISM330DHCX_WriteReg(ISM330DHCX_Context_t *Context, uint8_t Reg, uint8_t *Buffer, uint8_t Length)
{
 80033f6:	b590      	push	{r4, r7, lr}
 80033f8:	b087      	sub	sp, #28
 80033fa:	af00      	add	r7, sp, #0
 80033fc:	60f8      	str	r0, [r7, #12]
 80033fe:	607a      	str	r2, [r7, #4]
 8003400:	461a      	mov	r2, r3
 8003402:	460b      	mov	r3, r1
 8003404:	72fb      	strb	r3, [r7, #11]
 8003406:	4613      	mov	r3, r2
 8003408:	72bb      	strb	r3, [r7, #10]
	if(Context->Write == NULL)
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	685b      	ldr	r3, [r3, #4]
 800340e:	2b00      	cmp	r3, #0
 8003410:	d101      	bne.n	8003416 <ISM330DHCX_WriteReg+0x20>
	{
		return ISM330DHCX_REG_CONTEXT_ERR;
 8003412:	2308      	movs	r3, #8
 8003414:	e014      	b.n	8003440 <ISM330DHCX_WriteReg+0x4a>
	}

	int32_t ret = ISM330DHCX_ValidateParams(Reg,Buffer,Length);
 8003416:	7aba      	ldrb	r2, [r7, #10]
 8003418:	7afb      	ldrb	r3, [r7, #11]
 800341a:	6879      	ldr	r1, [r7, #4]
 800341c:	4618      	mov	r0, r3
 800341e:	f000 f813 	bl	8003448 <ISM330DHCX_ValidateParams>
 8003422:	6178      	str	r0, [r7, #20]
	if(ret != ISM330DHCX_REG_NO_ERR)
 8003424:	697b      	ldr	r3, [r7, #20]
 8003426:	2b00      	cmp	r3, #0
 8003428:	d001      	beq.n	800342e <ISM330DHCX_WriteReg+0x38>
	{
        return ret;
 800342a:	697b      	ldr	r3, [r7, #20]
 800342c:	e008      	b.n	8003440 <ISM330DHCX_WriteReg+0x4a>
	}

	return Context->Write(Context->Handle, Reg, Buffer, Length);
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	685c      	ldr	r4, [r3, #4]
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	6818      	ldr	r0, [r3, #0]
 8003436:	7abb      	ldrb	r3, [r7, #10]
 8003438:	7af9      	ldrb	r1, [r7, #11]
 800343a:	687a      	ldr	r2, [r7, #4]
 800343c:	47a0      	blx	r4
 800343e:	4603      	mov	r3, r0
}
 8003440:	4618      	mov	r0, r3
 8003442:	371c      	adds	r7, #28
 8003444:	46bd      	mov	sp, r7
 8003446:	bd90      	pop	{r4, r7, pc}

08003448 <ISM330DHCX_ValidateParams>:

static int32_t ISM330DHCX_ValidateParams(uint8_t Reg, uint8_t *Buffer, uint8_t Length)
{
 8003448:	b480      	push	{r7}
 800344a:	b085      	sub	sp, #20
 800344c:	af00      	add	r7, sp, #0
 800344e:	4603      	mov	r3, r0
 8003450:	6039      	str	r1, [r7, #0]
 8003452:	71fb      	strb	r3, [r7, #7]
 8003454:	4613      	mov	r3, r2
 8003456:	71bb      	strb	r3, [r7, #6]
	int32_t ret = 0;
 8003458:	2300      	movs	r3, #0
 800345a:	60fb      	str	r3, [r7, #12]
	if(Reg < ISM330DHCX_REG_FUNC_CFG_ACCESS || Reg > ISM330DHCX_REG_FIFO_OUT_Z_H)
 800345c:	79fb      	ldrb	r3, [r7, #7]
 800345e:	2b00      	cmp	r3, #0
 8003460:	d002      	beq.n	8003468 <ISM330DHCX_ValidateParams+0x20>
 8003462:	79fb      	ldrb	r3, [r7, #7]
 8003464:	2b7e      	cmp	r3, #126	; 0x7e
 8003466:	d903      	bls.n	8003470 <ISM330DHCX_ValidateParams+0x28>
	{
		ret |= ISM330DHCX_REG_PARAM_ERR;
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	f043 0301 	orr.w	r3, r3, #1
 800346e:	60fb      	str	r3, [r7, #12]
	}

	if(Buffer == NULL)
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	2b00      	cmp	r3, #0
 8003474:	d103      	bne.n	800347e <ISM330DHCX_ValidateParams+0x36>
	{
        ret |= ISM330DHCX_BUFFER_PARAM_ERR;
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	f043 0302 	orr.w	r3, r3, #2
 800347c:	60fb      	str	r3, [r7, #12]
	}

	if( Length == 0 || Length > (ISM330DHCX_REG_FIFO_OUT_Z_H - ISM330DHCX_REG_FUNC_CFG_ACCESS))
 800347e:	79bb      	ldrb	r3, [r7, #6]
 8003480:	2b00      	cmp	r3, #0
 8003482:	d002      	beq.n	800348a <ISM330DHCX_ValidateParams+0x42>
 8003484:	79bb      	ldrb	r3, [r7, #6]
 8003486:	2b7d      	cmp	r3, #125	; 0x7d
 8003488:	d903      	bls.n	8003492 <ISM330DHCX_ValidateParams+0x4a>
	{
		ret |= ISM330DHCX_LENGTH_PARAM_ERR;
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	f043 0304 	orr.w	r3, r3, #4
 8003490:	60fb      	str	r3, [r7, #12]
	}

	return ret;
 8003492:	68fb      	ldr	r3, [r7, #12]
}
 8003494:	4618      	mov	r0, r3
 8003496:	3714      	adds	r7, #20
 8003498:	46bd      	mov	sp, r7
 800349a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349e:	4770      	bx	lr

080034a0 <LPS22HH_Init>:
static int32_t LPS22HH_ReadRegWrapper(void *Handle,uint8_t Reg, uint8_t *Buffer, uint8_t Length);
static int32_t LPS22HH_RegisterInit(LPS22HH_Handle_t *Handle, LPS22HH_Init_Struct_t Settings);
static void ConvertPressureData(uint8_t *buffer, float *pressure);

int32_t LPS22HH_Init(LPS22HH_Handle_t *Handle, LPS22HH_Init_Struct_t Settings, LPS22HH_IO_t *IO)
{
 80034a0:	b084      	sub	sp, #16
 80034a2:	b5b0      	push	{r4, r5, r7, lr}
 80034a4:	b086      	sub	sp, #24
 80034a6:	af02      	add	r7, sp, #8
 80034a8:	6078      	str	r0, [r7, #4]
 80034aa:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80034ae:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	if(Handle->Status != LPS22HH_Initialized)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80034b8:	2b01      	cmp	r3, #1
 80034ba:	d04a      	beq.n	8003552 <LPS22HH_Init+0xb2>
	    {

	    if(Handle == NULL)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d102      	bne.n	80034c8 <LPS22HH_Init+0x28>
	    {
		    return LPS22HH_HandleError;
 80034c2:	f04f 33ff 	mov.w	r3, #4294967295
 80034c6:	e045      	b.n	8003554 <LPS22HH_Init+0xb4>
	    }

	    if(IO->Write == NULL || IO->Read == NULL || IO->GetTick == NULL)
 80034c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034ca:	68db      	ldr	r3, [r3, #12]
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d007      	beq.n	80034e0 <LPS22HH_Init+0x40>
 80034d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034d2:	689b      	ldr	r3, [r3, #8]
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d003      	beq.n	80034e0 <LPS22HH_Init+0x40>
 80034d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034da:	691b      	ldr	r3, [r3, #16]
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d102      	bne.n	80034e6 <LPS22HH_Init+0x46>
	    {
            return LPS22HH_IOError;
 80034e0:	f06f 0301 	mvn.w	r3, #1
 80034e4:	e036      	b.n	8003554 <LPS22HH_Init+0xb4>
	    }

	    Handle->IO = *IO;
 80034e6:	687a      	ldr	r2, [r7, #4]
 80034e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034ea:	4614      	mov	r4, r2
 80034ec:	461d      	mov	r5, r3
 80034ee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80034f0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80034f2:	e895 0003 	ldmia.w	r5, {r0, r1}
 80034f6:	e884 0003 	stmia.w	r4, {r0, r1}
	    Handle->DataRate = Settings.ODR;
 80034fa:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	    Handle->Context.Handle = Handle;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	687a      	ldr	r2, [r7, #4]
 8003508:	619a      	str	r2, [r3, #24]
	    Handle->Context.Read = LPS22HH_ReadRegWrapper;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	4a15      	ldr	r2, [pc, #84]	; (8003564 <LPS22HH_Init+0xc4>)
 800350e:	61da      	str	r2, [r3, #28]
	    Handle->Context.Write = LPS22HH_WriteRegWrapper;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	4a15      	ldr	r2, [pc, #84]	; (8003568 <LPS22HH_Init+0xc8>)
 8003514:	621a      	str	r2, [r3, #32]

	    if(Handle->IO.Init != NULL)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	2b00      	cmp	r3, #0
 800351c:	d002      	beq.n	8003524 <LPS22HH_Init+0x84>
	    {
	    	Handle->IO.Init();
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	4798      	blx	r3
	    }

        int32_t ret = LPS22HH_RegisterInit(Handle, Settings);
 8003524:	466a      	mov	r2, sp
 8003526:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800352a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800352e:	e882 0003 	stmia.w	r2, {r0, r1}
 8003532:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003536:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003538:	6878      	ldr	r0, [r7, #4]
 800353a:	f000 f95f 	bl	80037fc <LPS22HH_RegisterInit>
 800353e:	60f8      	str	r0, [r7, #12]
        if(ret != LPS22HH_Ok)
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	2b00      	cmp	r3, #0
 8003544:	d001      	beq.n	800354a <LPS22HH_Init+0xaa>
        {
        	return ret;
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	e004      	b.n	8003554 <LPS22HH_Init+0xb4>
        }

	    Handle->Status = LPS22HH_Initialized;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	2201      	movs	r2, #1
 800354e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	    }
	return LPS22HH_Ok;
 8003552:	2300      	movs	r3, #0
}
 8003554:	4618      	mov	r0, r3
 8003556:	3710      	adds	r7, #16
 8003558:	46bd      	mov	sp, r7
 800355a:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800355e:	b004      	add	sp, #16
 8003560:	4770      	bx	lr
 8003562:	bf00      	nop
 8003564:	080037bf 	.word	0x080037bf
 8003568:	08003783 	.word	0x08003783

0800356c <LPS22HH_ResetDevice>:
	Handle->Status = LPS22HH_Uninitialized;
	return LPS22HH_Ok;
}

int32_t LPS22HH_ResetDevice(LPS22HH_Handle_t *Handle)
{
 800356c:	b580      	push	{r7, lr}
 800356e:	b084      	sub	sp, #16
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]
	int32_t ret = LPS22HH_Ok;
 8003574:	2300      	movs	r3, #0
 8003576:	60fb      	str	r3, [r7, #12]
	if(Handle == NULL)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2b00      	cmp	r3, #0
 800357c:	d102      	bne.n	8003584 <LPS22HH_ResetDevice+0x18>
	{
		return LPS22HH_HandleError;
 800357e:	f04f 33ff 	mov.w	r3, #4294967295
 8003582:	e012      	b.n	80035aa <LPS22HH_ResetDevice+0x3e>
	}

	ret = LPS22HH_Reboot(Handle);
 8003584:	6878      	ldr	r0, [r7, #4]
 8003586:	f000 f8ab 	bl	80036e0 <LPS22HH_Reboot>
 800358a:	60f8      	str	r0, [r7, #12]
	if(ret != LPS22HH_Ok)
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	2b00      	cmp	r3, #0
 8003590:	d001      	beq.n	8003596 <LPS22HH_ResetDevice+0x2a>
	{
		return ret;
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	e009      	b.n	80035aa <LPS22HH_ResetDevice+0x3e>
	}


	ret = LPS22HH_SWReset(Handle);
 8003596:	6878      	ldr	r0, [r7, #4]
 8003598:	f000 f850 	bl	800363c <LPS22HH_SWReset>
 800359c:	60f8      	str	r0, [r7, #12]
	if(ret != LPS22HH_Ok)
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d001      	beq.n	80035a8 <LPS22HH_ResetDevice+0x3c>
	{
		return ret;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	e000      	b.n	80035aa <LPS22HH_ResetDevice+0x3e>
	}

	return LPS22HH_Ok;
 80035a8:	2300      	movs	r3, #0
}
 80035aa:	4618      	mov	r0, r3
 80035ac:	3710      	adds	r7, #16
 80035ae:	46bd      	mov	sp, r7
 80035b0:	bd80      	pop	{r7, pc}
	...

080035b4 <LPS22HH_ReadPressure>:

	return LPS22HH_WriteReg(&Handle->Context,LPS22HH_REG_CTRL_REG2, &buffer, 1); //Store

}
int32_t LPS22HH_ReadPressure(LPS22HH_Handle_t *Handle, float *Pressure)
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	b084      	sub	sp, #16
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
 80035bc:	6039      	str	r1, [r7, #0]
	if(Handle->Status != LPS22HH_Initialized)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80035c4:	2b01      	cmp	r3, #1
 80035c6:	d002      	beq.n	80035ce <LPS22HH_ReadPressure+0x1a>
	{
		return LPS22HH_InitError;
 80035c8:	f06f 0302 	mvn.w	r3, #2
 80035cc:	e030      	b.n	8003630 <LPS22HH_ReadPressure+0x7c>
	}

	uint8_t buffer[3] = {0};
 80035ce:	4b1a      	ldr	r3, [pc, #104]	; (8003638 <LPS22HH_ReadPressure+0x84>)
 80035d0:	881b      	ldrh	r3, [r3, #0]
 80035d2:	813b      	strh	r3, [r7, #8]
 80035d4:	2300      	movs	r3, #0
 80035d6:	72bb      	strb	r3, [r7, #10]

	int32_t ret = LPS22HH_ReadReg(&Handle->Context, LPS22HH_REG_STATUS, buffer, 1);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	f103 0018 	add.w	r0, r3, #24
 80035de:	f107 0208 	add.w	r2, r7, #8
 80035e2:	2301      	movs	r3, #1
 80035e4:	2127      	movs	r1, #39	; 0x27
 80035e6:	f000 fac8 	bl	8003b7a <LPS22HH_ReadReg>
 80035ea:	60f8      	str	r0, [r7, #12]
	if(ret != LPS22HH_Ok)
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d001      	beq.n	80035f6 <LPS22HH_ReadPressure+0x42>
	{
		return ret;
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	e01c      	b.n	8003630 <LPS22HH_ReadPressure+0x7c>
	}

	if(!(buffer[0] & LPS22HH_PDATA_Msk))
 80035f6:	7a3b      	ldrb	r3, [r7, #8]
 80035f8:	f003 0301 	and.w	r3, r3, #1
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d101      	bne.n	8003604 <LPS22HH_ReadPressure+0x50>
	{
		return LPS22HH_NoNewData;
 8003600:	2301      	movs	r3, #1
 8003602:	e015      	b.n	8003630 <LPS22HH_ReadPressure+0x7c>
	}

	ret = LPS22HH_ReadReg(&Handle->Context, LPS22HH_REG_PRESSURE_OUT_XL, buffer, 3);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	f103 0018 	add.w	r0, r3, #24
 800360a:	f107 0208 	add.w	r2, r7, #8
 800360e:	2303      	movs	r3, #3
 8003610:	2128      	movs	r1, #40	; 0x28
 8003612:	f000 fab2 	bl	8003b7a <LPS22HH_ReadReg>
 8003616:	60f8      	str	r0, [r7, #12]
	if(ret != LPS22HH_Ok)
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	2b00      	cmp	r3, #0
 800361c:	d001      	beq.n	8003622 <LPS22HH_ReadPressure+0x6e>
	{
		return ret;
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	e006      	b.n	8003630 <LPS22HH_ReadPressure+0x7c>
	}

	ConvertPressureData(buffer, Pressure);
 8003622:	f107 0308 	add.w	r3, r7, #8
 8003626:	6839      	ldr	r1, [r7, #0]
 8003628:	4618      	mov	r0, r3
 800362a:	f000 f9e5 	bl	80039f8 <ConvertPressureData>
	return LPS22HH_Ok;
 800362e:	2300      	movs	r3, #0
}
 8003630:	4618      	mov	r0, r3
 8003632:	3710      	adds	r7, #16
 8003634:	46bd      	mov	sp, r7
 8003636:	bd80      	pop	{r7, pc}
 8003638:	080148f8 	.word	0x080148f8

0800363c <LPS22HH_SWReset>:


static int32_t LPS22HH_SWReset(LPS22HH_Handle_t *Handle)
{
 800363c:	b590      	push	{r4, r7, lr}
 800363e:	b087      	sub	sp, #28
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
    if(Handle == NULL)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2b00      	cmp	r3, #0
 8003648:	d102      	bne.n	8003650 <LPS22HH_SWReset+0x14>
    {
        return LPS22HH_HandleError;
 800364a:	f04f 33ff 	mov.w	r3, #4294967295
 800364e:	e043      	b.n	80036d8 <LPS22HH_SWReset+0x9c>
    }

    if(Handle->Context.Read == NULL || Handle->Context.Write == NULL)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	69db      	ldr	r3, [r3, #28]
 8003654:	2b00      	cmp	r3, #0
 8003656:	d003      	beq.n	8003660 <LPS22HH_SWReset+0x24>
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6a1b      	ldr	r3, [r3, #32]
 800365c:	2b00      	cmp	r3, #0
 800365e:	d102      	bne.n	8003666 <LPS22HH_SWReset+0x2a>
    {
    	return LPS22HH_IOError;
 8003660:	f06f 0301 	mvn.w	r3, #1
 8003664:	e038      	b.n	80036d8 <LPS22HH_SWReset+0x9c>
    }


    int32_t ret = 0;
 8003666:	2300      	movs	r3, #0
 8003668:	617b      	str	r3, [r7, #20]
    uint8_t buffer = LPS22HH_ResetSignal;
 800366a:	2304      	movs	r3, #4
 800366c:	73fb      	strb	r3, [r7, #15]
    ret = LPS22HH_WriteReg(&Handle->Context, LPS22HH_REG_CTRL_REG2, &buffer, 1);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	f103 0018 	add.w	r0, r3, #24
 8003674:	f107 020f 	add.w	r2, r7, #15
 8003678:	2301      	movs	r3, #1
 800367a:	2111      	movs	r1, #17
 800367c:	f000 faa2 	bl	8003bc4 <LPS22HH_WriteReg>
 8003680:	6178      	str	r0, [r7, #20]
    if(ret != LPS22HH_Ok)
 8003682:	697b      	ldr	r3, [r7, #20]
 8003684:	2b00      	cmp	r3, #0
 8003686:	d001      	beq.n	800368c <LPS22HH_SWReset+0x50>
    {
    	return ret;
 8003688:	697b      	ldr	r3, [r7, #20]
 800368a:	e025      	b.n	80036d8 <LPS22HH_SWReset+0x9c>
    }

    uint32_t timer = Handle->IO.GetTick();
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	691b      	ldr	r3, [r3, #16]
 8003690:	4798      	blx	r3
 8003692:	6138      	str	r0, [r7, #16]
    while(buffer & LPS22HH_ResetSignal)
 8003694:	e01a      	b.n	80036cc <LPS22HH_SWReset+0x90>
    {
    	ret = LPS22HH_ReadReg(&Handle->Context, LPS22HH_REG_CTRL_REG2, &buffer, 1);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	f103 0018 	add.w	r0, r3, #24
 800369c:	f107 020f 	add.w	r2, r7, #15
 80036a0:	2301      	movs	r3, #1
 80036a2:	2111      	movs	r1, #17
 80036a4:	f000 fa69 	bl	8003b7a <LPS22HH_ReadReg>
 80036a8:	6178      	str	r0, [r7, #20]
    	if(ret != LPS22HH_Ok)
 80036aa:	697b      	ldr	r3, [r7, #20]
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d001      	beq.n	80036b4 <LPS22HH_SWReset+0x78>
    	{
    		return ret;
 80036b0:	697b      	ldr	r3, [r7, #20]
 80036b2:	e011      	b.n	80036d8 <LPS22HH_SWReset+0x9c>
    	}

    	if(timer + 100 < Handle->IO.GetTick())
 80036b4:	693b      	ldr	r3, [r7, #16]
 80036b6:	f103 0464 	add.w	r4, r3, #100	; 0x64
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	691b      	ldr	r3, [r3, #16]
 80036be:	4798      	blx	r3
 80036c0:	4603      	mov	r3, r0
 80036c2:	429c      	cmp	r4, r3
 80036c4:	d202      	bcs.n	80036cc <LPS22HH_SWReset+0x90>
    	{
    		return LPS22HH_Timeout;
 80036c6:	f06f 0305 	mvn.w	r3, #5
 80036ca:	e005      	b.n	80036d8 <LPS22HH_SWReset+0x9c>
    while(buffer & LPS22HH_ResetSignal)
 80036cc:	7bfb      	ldrb	r3, [r7, #15]
 80036ce:	f003 0304 	and.w	r3, r3, #4
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d1df      	bne.n	8003696 <LPS22HH_SWReset+0x5a>
    	}
    }
    return ret;
 80036d6:	697b      	ldr	r3, [r7, #20]
}
 80036d8:	4618      	mov	r0, r3
 80036da:	371c      	adds	r7, #28
 80036dc:	46bd      	mov	sp, r7
 80036de:	bd90      	pop	{r4, r7, pc}

080036e0 <LPS22HH_Reboot>:

static int32_t LPS22HH_Reboot(LPS22HH_Handle_t *Handle)
{
 80036e0:	b590      	push	{r4, r7, lr}
 80036e2:	b087      	sub	sp, #28
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
    if(Handle == NULL)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d102      	bne.n	80036f4 <LPS22HH_Reboot+0x14>
    {
        return LPS22HH_HandleError;
 80036ee:	f04f 33ff 	mov.w	r3, #4294967295
 80036f2:	e042      	b.n	800377a <LPS22HH_Reboot+0x9a>
    }

    if(Handle->Context.Read == NULL || Handle->Context.Write == NULL)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	69db      	ldr	r3, [r3, #28]
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d003      	beq.n	8003704 <LPS22HH_Reboot+0x24>
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6a1b      	ldr	r3, [r3, #32]
 8003700:	2b00      	cmp	r3, #0
 8003702:	d102      	bne.n	800370a <LPS22HH_Reboot+0x2a>
    {
    	return LPS22HH_IOError;
 8003704:	f06f 0301 	mvn.w	r3, #1
 8003708:	e037      	b.n	800377a <LPS22HH_Reboot+0x9a>
    }

    int32_t ret = 0;
 800370a:	2300      	movs	r3, #0
 800370c:	617b      	str	r3, [r7, #20]
    uint8_t buffer = LPS22HH_RebootSignal;
 800370e:	2380      	movs	r3, #128	; 0x80
 8003710:	73fb      	strb	r3, [r7, #15]
    ret = LPS22HH_WriteReg(&Handle->Context, LPS22HH_REG_CTRL_REG2, &buffer, 1);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	f103 0018 	add.w	r0, r3, #24
 8003718:	f107 020f 	add.w	r2, r7, #15
 800371c:	2301      	movs	r3, #1
 800371e:	2111      	movs	r1, #17
 8003720:	f000 fa50 	bl	8003bc4 <LPS22HH_WriteReg>
 8003724:	6178      	str	r0, [r7, #20]
    if(ret != LPS22HH_Ok)
 8003726:	697b      	ldr	r3, [r7, #20]
 8003728:	2b00      	cmp	r3, #0
 800372a:	d001      	beq.n	8003730 <LPS22HH_Reboot+0x50>
    {
    	return ret;
 800372c:	697b      	ldr	r3, [r7, #20]
 800372e:	e024      	b.n	800377a <LPS22HH_Reboot+0x9a>
    }

    uint32_t timer = Handle->IO.GetTick();
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	691b      	ldr	r3, [r3, #16]
 8003734:	4798      	blx	r3
 8003736:	6138      	str	r0, [r7, #16]
    while(buffer & LPS22HH_RebootSignal)
 8003738:	e01a      	b.n	8003770 <LPS22HH_Reboot+0x90>
    {
    	ret = LPS22HH_ReadReg(&Handle->Context, LPS22HH_REG_INT_SOURCE, &buffer, 1);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	f103 0018 	add.w	r0, r3, #24
 8003740:	f107 020f 	add.w	r2, r7, #15
 8003744:	2301      	movs	r3, #1
 8003746:	2124      	movs	r1, #36	; 0x24
 8003748:	f000 fa17 	bl	8003b7a <LPS22HH_ReadReg>
 800374c:	6178      	str	r0, [r7, #20]
    	if(ret != LPS22HH_Ok)
 800374e:	697b      	ldr	r3, [r7, #20]
 8003750:	2b00      	cmp	r3, #0
 8003752:	d001      	beq.n	8003758 <LPS22HH_Reboot+0x78>
    	{
    		return ret;
 8003754:	697b      	ldr	r3, [r7, #20]
 8003756:	e010      	b.n	800377a <LPS22HH_Reboot+0x9a>
    	}

    	if(timer + 100 < Handle->IO.GetTick())
 8003758:	693b      	ldr	r3, [r7, #16]
 800375a:	f103 0464 	add.w	r4, r3, #100	; 0x64
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	691b      	ldr	r3, [r3, #16]
 8003762:	4798      	blx	r3
 8003764:	4603      	mov	r3, r0
 8003766:	429c      	cmp	r4, r3
 8003768:	d202      	bcs.n	8003770 <LPS22HH_Reboot+0x90>
    	{
    		return LPS22HH_Timeout;
 800376a:	f06f 0305 	mvn.w	r3, #5
 800376e:	e004      	b.n	800377a <LPS22HH_Reboot+0x9a>
    while(buffer & LPS22HH_RebootSignal)
 8003770:	7bfb      	ldrb	r3, [r7, #15]
 8003772:	b25b      	sxtb	r3, r3
 8003774:	2b00      	cmp	r3, #0
 8003776:	dbe0      	blt.n	800373a <LPS22HH_Reboot+0x5a>
    	}

    }
    return ret;
 8003778:	697b      	ldr	r3, [r7, #20]
}
 800377a:	4618      	mov	r0, r3
 800377c:	371c      	adds	r7, #28
 800377e:	46bd      	mov	sp, r7
 8003780:	bd90      	pop	{r4, r7, pc}

08003782 <LPS22HH_WriteRegWrapper>:

static int32_t LPS22HH_WriteRegWrapper(void *Handle, uint8_t Reg, uint8_t *Buffer, uint8_t Length)
{
 8003782:	b580      	push	{r7, lr}
 8003784:	b086      	sub	sp, #24
 8003786:	af00      	add	r7, sp, #0
 8003788:	60f8      	str	r0, [r7, #12]
 800378a:	607a      	str	r2, [r7, #4]
 800378c:	461a      	mov	r2, r3
 800378e:	460b      	mov	r3, r1
 8003790:	72fb      	strb	r3, [r7, #11]
 8003792:	4613      	mov	r3, r2
 8003794:	72bb      	strb	r3, [r7, #10]
	LPS22HH_Handle_t *Dev = Handle;
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	617b      	str	r3, [r7, #20]
	if(Dev->IO.Write != NULL)
 800379a:	697b      	ldr	r3, [r7, #20]
 800379c:	68db      	ldr	r3, [r3, #12]
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d007      	beq.n	80037b2 <LPS22HH_WriteRegWrapper+0x30>
	{
		return Dev->IO.Write(Reg, Buffer, Length);
 80037a2:	697b      	ldr	r3, [r7, #20]
 80037a4:	68db      	ldr	r3, [r3, #12]
 80037a6:	7aba      	ldrb	r2, [r7, #10]
 80037a8:	7af8      	ldrb	r0, [r7, #11]
 80037aa:	6879      	ldr	r1, [r7, #4]
 80037ac:	4798      	blx	r3
 80037ae:	4603      	mov	r3, r0
 80037b0:	e001      	b.n	80037b6 <LPS22HH_WriteRegWrapper+0x34>
	}
    return LPS22HH_IOError;
 80037b2:	f06f 0301 	mvn.w	r3, #1
}
 80037b6:	4618      	mov	r0, r3
 80037b8:	3718      	adds	r7, #24
 80037ba:	46bd      	mov	sp, r7
 80037bc:	bd80      	pop	{r7, pc}

080037be <LPS22HH_ReadRegWrapper>:

static int32_t LPS22HH_ReadRegWrapper(void *Handle,uint8_t Reg, uint8_t *Buffer, uint8_t Length)
{
 80037be:	b580      	push	{r7, lr}
 80037c0:	b086      	sub	sp, #24
 80037c2:	af00      	add	r7, sp, #0
 80037c4:	60f8      	str	r0, [r7, #12]
 80037c6:	607a      	str	r2, [r7, #4]
 80037c8:	461a      	mov	r2, r3
 80037ca:	460b      	mov	r3, r1
 80037cc:	72fb      	strb	r3, [r7, #11]
 80037ce:	4613      	mov	r3, r2
 80037d0:	72bb      	strb	r3, [r7, #10]
	LPS22HH_Handle_t *Dev = Handle;
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	617b      	str	r3, [r7, #20]
	if(Dev->IO.Read != NULL)
 80037d6:	697b      	ldr	r3, [r7, #20]
 80037d8:	689b      	ldr	r3, [r3, #8]
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d007      	beq.n	80037ee <LPS22HH_ReadRegWrapper+0x30>
	{
		return Dev->IO.Read(Reg, Buffer, Length);
 80037de:	697b      	ldr	r3, [r7, #20]
 80037e0:	689b      	ldr	r3, [r3, #8]
 80037e2:	7aba      	ldrb	r2, [r7, #10]
 80037e4:	7af8      	ldrb	r0, [r7, #11]
 80037e6:	6879      	ldr	r1, [r7, #4]
 80037e8:	4798      	blx	r3
 80037ea:	4603      	mov	r3, r0
 80037ec:	e001      	b.n	80037f2 <LPS22HH_ReadRegWrapper+0x34>
	}
    return LPS22HH_IOError;
 80037ee:	f06f 0301 	mvn.w	r3, #1
}
 80037f2:	4618      	mov	r0, r3
 80037f4:	3718      	adds	r7, #24
 80037f6:	46bd      	mov	sp, r7
 80037f8:	bd80      	pop	{r7, pc}
	...

080037fc <LPS22HH_RegisterInit>:

static int32_t LPS22HH_RegisterInit(LPS22HH_Handle_t *Handle, LPS22HH_Init_Struct_t Settings)
{
 80037fc:	b084      	sub	sp, #16
 80037fe:	b580      	push	{r7, lr}
 8003800:	b084      	sub	sp, #16
 8003802:	af00      	add	r7, sp, #0
 8003804:	6078      	str	r0, [r7, #4]
 8003806:	f107 001c 	add.w	r0, r7, #28
 800380a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	int32_t ret = LPS22HH_ResetDevice(Handle);
 800380e:	6878      	ldr	r0, [r7, #4]
 8003810:	f7ff feac 	bl	800356c <LPS22HH_ResetDevice>
 8003814:	60f8      	str	r0, [r7, #12]
	if(ret != LPS22HH_Ok)
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	2b00      	cmp	r3, #0
 800381a:	d001      	beq.n	8003820 <LPS22HH_RegisterInit+0x24>
	{
		return ret;
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	e0df      	b.n	80039e0 <LPS22HH_RegisterInit+0x1e4>
	}

	uint8_t buffer[2] = {0};
 8003820:	2300      	movs	r3, #0
 8003822:	813b      	strh	r3, [r7, #8]
    buffer[0] = Settings.INTERRUPT_CFG;
 8003824:	7f3b      	ldrb	r3, [r7, #28]
 8003826:	723b      	strb	r3, [r7, #8]
	ret = LPS22HH_WriteReg(&Handle->Context, LPS22HH_REG_INTERRUPT_CFG, &buffer[0], 1);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	f103 0018 	add.w	r0, r3, #24
 800382e:	f107 0208 	add.w	r2, r7, #8
 8003832:	2301      	movs	r3, #1
 8003834:	210b      	movs	r1, #11
 8003836:	f000 f9c5 	bl	8003bc4 <LPS22HH_WriteReg>
 800383a:	60f8      	str	r0, [r7, #12]
	if(ret != LPS22HH_Ok)
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	2b00      	cmp	r3, #0
 8003840:	d001      	beq.n	8003846 <LPS22HH_RegisterInit+0x4a>
	{
		return ret;
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	e0cc      	b.n	80039e0 <LPS22HH_RegisterInit+0x1e4>
	}

	if(Settings.THS_P > 32767)
 8003846:	8bfb      	ldrh	r3, [r7, #30]
 8003848:	b21b      	sxth	r3, r3
 800384a:	2b00      	cmp	r3, #0
 800384c:	da04      	bge.n	8003858 <LPS22HH_RegisterInit+0x5c>
	{
		buffer[0] = 32767 & 0x00FF;
 800384e:	23ff      	movs	r3, #255	; 0xff
 8003850:	723b      	strb	r3, [r7, #8]
		buffer[1] = (32767 & 0xFF00) >> 8;
 8003852:	237f      	movs	r3, #127	; 0x7f
 8003854:	727b      	strb	r3, [r7, #9]
 8003856:	e007      	b.n	8003868 <LPS22HH_RegisterInit+0x6c>
	} else
	{
		buffer[0] = Settings.THS_P & 0x00FF;
 8003858:	8bfb      	ldrh	r3, [r7, #30]
 800385a:	b2db      	uxtb	r3, r3
 800385c:	723b      	strb	r3, [r7, #8]
		buffer[1] = (Settings.THS_P & 0xFF00) >> 8;
 800385e:	8bfb      	ldrh	r3, [r7, #30]
 8003860:	0a1b      	lsrs	r3, r3, #8
 8003862:	b29b      	uxth	r3, r3
 8003864:	b2db      	uxtb	r3, r3
 8003866:	727b      	strb	r3, [r7, #9]
	}
	ret = LPS22HH_WriteReg(&Handle->Context, LPS22HH_REG_THS_P_L, &buffer[0], 2);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	f103 0018 	add.w	r0, r3, #24
 800386e:	f107 0208 	add.w	r2, r7, #8
 8003872:	2302      	movs	r3, #2
 8003874:	210c      	movs	r1, #12
 8003876:	f000 f9a5 	bl	8003bc4 <LPS22HH_WriteReg>
 800387a:	60f8      	str	r0, [r7, #12]
	if(ret != LPS22HH_Ok)
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	2b00      	cmp	r3, #0
 8003880:	d001      	beq.n	8003886 <LPS22HH_RegisterInit+0x8a>
	{
		return ret;
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	e0ac      	b.n	80039e0 <LPS22HH_RegisterInit+0x1e4>
	}

	buffer[0] = Settings.IF_CTRL;
 8003886:	f897 3020 	ldrb.w	r3, [r7, #32]
 800388a:	723b      	strb	r3, [r7, #8]
	ret = LPS22HH_WriteReg(&Handle->Context, LPS22HH_REG_IF_CTRL, &buffer[0], 1);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	f103 0018 	add.w	r0, r3, #24
 8003892:	f107 0208 	add.w	r2, r7, #8
 8003896:	2301      	movs	r3, #1
 8003898:	210e      	movs	r1, #14
 800389a:	f000 f993 	bl	8003bc4 <LPS22HH_WriteReg>
 800389e:	60f8      	str	r0, [r7, #12]
	if(ret != LPS22HH_Ok)
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d001      	beq.n	80038aa <LPS22HH_RegisterInit+0xae>
	{
		return ret;
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	e09a      	b.n	80039e0 <LPS22HH_RegisterInit+0x1e4>
	}

	buffer[0] = Settings.ODR | Settings.LPFP | 0x02 | Settings.SIM; //Enable BDU = 0x02
 80038aa:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 80038ae:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80038b2:	4313      	orrs	r3, r2
 80038b4:	b2da      	uxtb	r2, r3
 80038b6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80038ba:	4313      	orrs	r3, r2
 80038bc:	b2db      	uxtb	r3, r3
 80038be:	f043 0302 	orr.w	r3, r3, #2
 80038c2:	b2db      	uxtb	r3, r3
 80038c4:	723b      	strb	r3, [r7, #8]
	ret = LPS22HH_WriteReg(&Handle->Context, LPS22HH_REG_CTRL_REG1, &buffer[0], 1);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	f103 0018 	add.w	r0, r3, #24
 80038cc:	f107 0208 	add.w	r2, r7, #8
 80038d0:	2301      	movs	r3, #1
 80038d2:	2110      	movs	r1, #16
 80038d4:	f000 f976 	bl	8003bc4 <LPS22HH_WriteReg>
 80038d8:	60f8      	str	r0, [r7, #12]
	if(ret != LPS22HH_Ok)
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d001      	beq.n	80038e4 <LPS22HH_RegisterInit+0xe8>
	{
		return ret;
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	e07d      	b.n	80039e0 <LPS22HH_RegisterInit+0x1e4>
	}

	buffer[0] = Settings.CTRL_REG2;
 80038e4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80038e8:	723b      	strb	r3, [r7, #8]
	ret = LPS22HH_WriteReg(&Handle->Context, LPS22HH_REG_CTRL_REG2, &buffer[0], 1);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	f103 0018 	add.w	r0, r3, #24
 80038f0:	f107 0208 	add.w	r2, r7, #8
 80038f4:	2301      	movs	r3, #1
 80038f6:	2111      	movs	r1, #17
 80038f8:	f000 f964 	bl	8003bc4 <LPS22HH_WriteReg>
 80038fc:	60f8      	str	r0, [r7, #12]
	if(ret != LPS22HH_Ok)
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	2b00      	cmp	r3, #0
 8003902:	d001      	beq.n	8003908 <LPS22HH_RegisterInit+0x10c>
	{
		return ret;
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	e06b      	b.n	80039e0 <LPS22HH_RegisterInit+0x1e4>
	}

	buffer[0] = Settings.INT_DRDY_Control | Settings.INT_S;
 8003908:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 800390c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003910:	4313      	orrs	r3, r2
 8003912:	b2db      	uxtb	r3, r3
 8003914:	723b      	strb	r3, [r7, #8]
	ret = LPS22HH_WriteReg(&Handle->Context, LPS22HH_REG_CTRL_REG3, &buffer[0], 1);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	f103 0018 	add.w	r0, r3, #24
 800391c:	f107 0208 	add.w	r2, r7, #8
 8003920:	2301      	movs	r3, #1
 8003922:	2112      	movs	r1, #18
 8003924:	f000 f94e 	bl	8003bc4 <LPS22HH_WriteReg>
 8003928:	60f8      	str	r0, [r7, #12]
	if(ret != LPS22HH_Ok)
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	2b00      	cmp	r3, #0
 800392e:	d001      	beq.n	8003934 <LPS22HH_RegisterInit+0x138>
	{
		return ret;
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	e055      	b.n	80039e0 <LPS22HH_RegisterInit+0x1e4>
	}

	buffer[0] = Settings.STOP_ON_WTM | Settings.F_MODE;
 8003934:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8003938:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800393c:	4313      	orrs	r3, r2
 800393e:	b2db      	uxtb	r3, r3
 8003940:	723b      	strb	r3, [r7, #8]
	ret = LPS22HH_WriteReg(&Handle->Context, LPS22HH_REG_FIFO_CTRL, &buffer[0], 1);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	f103 0018 	add.w	r0, r3, #24
 8003948:	f107 0208 	add.w	r2, r7, #8
 800394c:	2301      	movs	r3, #1
 800394e:	2113      	movs	r1, #19
 8003950:	f000 f938 	bl	8003bc4 <LPS22HH_WriteReg>
 8003954:	60f8      	str	r0, [r7, #12]
	if(ret != LPS22HH_Ok)
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	2b00      	cmp	r3, #0
 800395a:	d001      	beq.n	8003960 <LPS22HH_RegisterInit+0x164>
	{
		return ret;
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	e03f      	b.n	80039e0 <LPS22HH_RegisterInit+0x1e4>
	if(Settings.WTM > 255)
	{
		buffer[0] = 255;
	} else
	{
		buffer[0] = Settings.WTM;
 8003960:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8003964:	723b      	strb	r3, [r7, #8]
	}
	ret = LPS22HH_WriteReg(&Handle->Context, LPS22HH_REG_FIFO_WTM, &buffer[0], 1);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	f103 0018 	add.w	r0, r3, #24
 800396c:	f107 0208 	add.w	r2, r7, #8
 8003970:	2301      	movs	r3, #1
 8003972:	2114      	movs	r1, #20
 8003974:	f000 f926 	bl	8003bc4 <LPS22HH_WriteReg>
 8003978:	60f8      	str	r0, [r7, #12]
	if(ret != LPS22HH_Ok)
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	2b00      	cmp	r3, #0
 800397e:	d001      	beq.n	8003984 <LPS22HH_RegisterInit+0x188>
	{
		return ret;
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	e02d      	b.n	80039e0 <LPS22HH_RegisterInit+0x1e4>
	}

	if((Settings.REF_P * 4096) > 65535) //float -> LSB = multiply by 4096
 8003984:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8003988:	ed9f 7a19 	vldr	s14, [pc, #100]	; 80039f0 <LPS22HH_RegisterInit+0x1f4>
 800398c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003990:	ed9f 7a18 	vldr	s14, [pc, #96]	; 80039f4 <LPS22HH_RegisterInit+0x1f8>
 8003994:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003998:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800399c:	dd02      	ble.n	80039a4 <LPS22HH_RegisterInit+0x1a8>
	{
		return LPS22HH_RefPError;
 800399e:	f06f 0303 	mvn.w	r3, #3
 80039a2:	e01d      	b.n	80039e0 <LPS22HH_RegisterInit+0x1e4>
	}

	*((uint16_t*)&buffer) = Settings.REF_P * 4096;
 80039a4:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80039a8:	ed9f 7a11 	vldr	s14, [pc, #68]	; 80039f0 <LPS22HH_RegisterInit+0x1f4>
 80039ac:	ee67 7a87 	vmul.f32	s15, s15, s14
 80039b0:	f107 0308 	add.w	r3, r7, #8
 80039b4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80039b8:	ee17 2a90 	vmov	r2, s15
 80039bc:	b292      	uxth	r2, r2
 80039be:	801a      	strh	r2, [r3, #0]
	ret = LPS22HH_WriteReg(&Handle->Context, LPS22HH_REG_REF_P_L, &buffer[0], 2);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	f103 0018 	add.w	r0, r3, #24
 80039c6:	f107 0208 	add.w	r2, r7, #8
 80039ca:	2302      	movs	r3, #2
 80039cc:	2115      	movs	r1, #21
 80039ce:	f000 f8f9 	bl	8003bc4 <LPS22HH_WriteReg>
 80039d2:	60f8      	str	r0, [r7, #12]
	if(ret != LPS22HH_Ok)
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d001      	beq.n	80039de <LPS22HH_RegisterInit+0x1e2>
	{
		return ret;
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	e000      	b.n	80039e0 <LPS22HH_RegisterInit+0x1e4>
	}

	return LPS22HH_Ok;
 80039de:	2300      	movs	r3, #0
}
 80039e0:	4618      	mov	r0, r3
 80039e2:	3710      	adds	r7, #16
 80039e4:	46bd      	mov	sp, r7
 80039e6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80039ea:	b004      	add	sp, #16
 80039ec:	4770      	bx	lr
 80039ee:	bf00      	nop
 80039f0:	45800000 	.word	0x45800000
 80039f4:	477fff00 	.word	0x477fff00

080039f8 <ConvertPressureData>:

static void ConvertPressureData(uint8_t *buffer, float *pressure)
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b084      	sub	sp, #16
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
 8003a00:	6039      	str	r1, [r7, #0]
	int32_t Data;
	//determine sign
	if(buffer[2] & 0x80)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	3302      	adds	r3, #2
 8003a06:	781b      	ldrb	r3, [r3, #0]
 8003a08:	b25b      	sxtb	r3, r3
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	da03      	bge.n	8003a16 <ConvertPressureData+0x1e>
	{
		Data = 0xFF000000; //Sign Extend if MSB of 24 Bit number is set
 8003a0e:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 8003a12:	60fb      	str	r3, [r7, #12]
 8003a14:	e001      	b.n	8003a1a <ConvertPressureData+0x22>
	} else
	{
		Data = 0;
 8003a16:	2300      	movs	r3, #0
 8003a18:	60fb      	str	r3, [r7, #12]
	}
	Data = Data + buffer[2] * 65536 + buffer[1] * 256 + buffer[0]; //Data = Data + Concat buffer[2:0]
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	3302      	adds	r3, #2
 8003a1e:	781b      	ldrb	r3, [r3, #0]
 8003a20:	041a      	lsls	r2, r3, #16
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	441a      	add	r2, r3
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	3301      	adds	r3, #1
 8003a2a:	781b      	ldrb	r3, [r3, #0]
 8003a2c:	021b      	lsls	r3, r3, #8
 8003a2e:	4413      	add	r3, r2
 8003a30:	687a      	ldr	r2, [r7, #4]
 8003a32:	7812      	ldrb	r2, [r2, #0]
 8003a34:	4413      	add	r3, r2
 8003a36:	60fb      	str	r3, [r7, #12]
	*pressure = Data / 4096.0;
 8003a38:	68f8      	ldr	r0, [r7, #12]
 8003a3a:	f7fc fe8b 	bl	8000754 <__aeabi_i2d>
 8003a3e:	f04f 0200 	mov.w	r2, #0
 8003a42:	4b08      	ldr	r3, [pc, #32]	; (8003a64 <ConvertPressureData+0x6c>)
 8003a44:	f7fd f81a 	bl	8000a7c <__aeabi_ddiv>
 8003a48:	4602      	mov	r2, r0
 8003a4a:	460b      	mov	r3, r1
 8003a4c:	4610      	mov	r0, r2
 8003a4e:	4619      	mov	r1, r3
 8003a50:	f7fd f8fc 	bl	8000c4c <__aeabi_d2f>
 8003a54:	4602      	mov	r2, r0
 8003a56:	683b      	ldr	r3, [r7, #0]
 8003a58:	601a      	str	r2, [r3, #0]
}
 8003a5a:	bf00      	nop
 8003a5c:	3710      	adds	r7, #16
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	bd80      	pop	{r7, pc}
 8003a62:	bf00      	nop
 8003a64:	40b00000 	.word	0x40b00000

08003a68 <LPS22HH_GetSamplePeriod>:

int32_t LPS22HH_GetSamplePeriod(LPS22HH_Handle_t *Handle, uint32_t *Period)
{
 8003a68:	b480      	push	{r7}
 8003a6a:	b083      	sub	sp, #12
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]
 8003a70:	6039      	str	r1, [r7, #0]
	if(Handle->Status != LPS22HH_Initialized)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003a78:	2b01      	cmp	r3, #1
 8003a7a:	d002      	beq.n	8003a82 <LPS22HH_GetSamplePeriod+0x1a>
	{
		return LPS22HH_InitError;
 8003a7c:	f06f 0302 	mvn.w	r3, #2
 8003a80:	e043      	b.n	8003b0a <LPS22HH_GetSamplePeriod+0xa2>
	}

	switch(Handle->DataRate)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003a88:	2b70      	cmp	r3, #112	; 0x70
 8003a8a:	d039      	beq.n	8003b00 <LPS22HH_GetSamplePeriod+0x98>
 8003a8c:	2b70      	cmp	r3, #112	; 0x70
 8003a8e:	dc3b      	bgt.n	8003b08 <LPS22HH_GetSamplePeriod+0xa0>
 8003a90:	2b60      	cmp	r3, #96	; 0x60
 8003a92:	d031      	beq.n	8003af8 <LPS22HH_GetSamplePeriod+0x90>
 8003a94:	2b60      	cmp	r3, #96	; 0x60
 8003a96:	dc37      	bgt.n	8003b08 <LPS22HH_GetSamplePeriod+0xa0>
 8003a98:	2b50      	cmp	r3, #80	; 0x50
 8003a9a:	d029      	beq.n	8003af0 <LPS22HH_GetSamplePeriod+0x88>
 8003a9c:	2b50      	cmp	r3, #80	; 0x50
 8003a9e:	dc33      	bgt.n	8003b08 <LPS22HH_GetSamplePeriod+0xa0>
 8003aa0:	2b40      	cmp	r3, #64	; 0x40
 8003aa2:	d021      	beq.n	8003ae8 <LPS22HH_GetSamplePeriod+0x80>
 8003aa4:	2b40      	cmp	r3, #64	; 0x40
 8003aa6:	dc2f      	bgt.n	8003b08 <LPS22HH_GetSamplePeriod+0xa0>
 8003aa8:	2b30      	cmp	r3, #48	; 0x30
 8003aaa:	d019      	beq.n	8003ae0 <LPS22HH_GetSamplePeriod+0x78>
 8003aac:	2b30      	cmp	r3, #48	; 0x30
 8003aae:	dc2b      	bgt.n	8003b08 <LPS22HH_GetSamplePeriod+0xa0>
 8003ab0:	2b20      	cmp	r3, #32
 8003ab2:	d011      	beq.n	8003ad8 <LPS22HH_GetSamplePeriod+0x70>
 8003ab4:	2b20      	cmp	r3, #32
 8003ab6:	dc27      	bgt.n	8003b08 <LPS22HH_GetSamplePeriod+0xa0>
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d002      	beq.n	8003ac2 <LPS22HH_GetSamplePeriod+0x5a>
 8003abc:	2b10      	cmp	r3, #16
 8003abe:	d006      	beq.n	8003ace <LPS22HH_GetSamplePeriod+0x66>
 8003ac0:	e022      	b.n	8003b08 <LPS22HH_GetSamplePeriod+0xa0>
	{
	case(LPS22HH_OneShot):
			*Period = 0;
 8003ac2:	683b      	ldr	r3, [r7, #0]
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	601a      	str	r2, [r3, #0]
	        return LPS22HH_OneShotError;
 8003ac8:	f06f 0304 	mvn.w	r3, #4
 8003acc:	e01d      	b.n	8003b0a <LPS22HH_GetSamplePeriod+0xa2>
			break;
	case(LPS22HH_1Hz):
			*Period = 1000 / 1;
 8003ace:	683b      	ldr	r3, [r7, #0]
 8003ad0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003ad4:	601a      	str	r2, [r3, #0]
			break;
 8003ad6:	e017      	b.n	8003b08 <LPS22HH_GetSamplePeriod+0xa0>
	case(LPS22HH_10Hz):
			*Period = 1000 / 10;
 8003ad8:	683b      	ldr	r3, [r7, #0]
 8003ada:	2264      	movs	r2, #100	; 0x64
 8003adc:	601a      	str	r2, [r3, #0]
			break;
 8003ade:	e013      	b.n	8003b08 <LPS22HH_GetSamplePeriod+0xa0>
	case(LPS22HH_25Hz):
			*Period = 1000 / 25;
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	2228      	movs	r2, #40	; 0x28
 8003ae4:	601a      	str	r2, [r3, #0]
			break;
 8003ae6:	e00f      	b.n	8003b08 <LPS22HH_GetSamplePeriod+0xa0>
	case(LPS22HH_50Hz):
			*Period = 1000 / 50;
 8003ae8:	683b      	ldr	r3, [r7, #0]
 8003aea:	2214      	movs	r2, #20
 8003aec:	601a      	str	r2, [r3, #0]
			break;
 8003aee:	e00b      	b.n	8003b08 <LPS22HH_GetSamplePeriod+0xa0>
	case(LPS22HH_75Hz):
			*Period = 1000 / 75;
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	220d      	movs	r2, #13
 8003af4:	601a      	str	r2, [r3, #0]
	        break;
 8003af6:	e007      	b.n	8003b08 <LPS22HH_GetSamplePeriod+0xa0>
	case(LPS22HH_100Hz):
			*Period = 1000 / 100;
 8003af8:	683b      	ldr	r3, [r7, #0]
 8003afa:	220a      	movs	r2, #10
 8003afc:	601a      	str	r2, [r3, #0]
			break;
 8003afe:	e003      	b.n	8003b08 <LPS22HH_GetSamplePeriod+0xa0>
	case(LPS22HH_200Hz):
			*Period = 1000 / 200;
 8003b00:	683b      	ldr	r3, [r7, #0]
 8003b02:	2205      	movs	r2, #5
 8003b04:	601a      	str	r2, [r3, #0]
			break;
 8003b06:	bf00      	nop
	}
	return LPS22HH_Ok;
 8003b08:	2300      	movs	r3, #0
}
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	370c      	adds	r7, #12
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b14:	4770      	bx	lr

08003b16 <LPS22HH_ValidateParams>:

#include "LPS22HH_Registers.h"
#include <stddef.h>

static uint32_t LPS22HH_ValidateParams(LPS22HH_Context_t *Context, uint8_t Reg, uint8_t *Buffer, uint8_t Length)
{
 8003b16:	b480      	push	{r7}
 8003b18:	b087      	sub	sp, #28
 8003b1a:	af00      	add	r7, sp, #0
 8003b1c:	60f8      	str	r0, [r7, #12]
 8003b1e:	607a      	str	r2, [r7, #4]
 8003b20:	461a      	mov	r2, r3
 8003b22:	460b      	mov	r3, r1
 8003b24:	72fb      	strb	r3, [r7, #11]
 8003b26:	4613      	mov	r3, r2
 8003b28:	72bb      	strb	r3, [r7, #10]
    int32_t ret_status = LPS22HH_REG_OK;
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	617b      	str	r3, [r7, #20]

    if(Context == NULL)
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d103      	bne.n	8003b3c <LPS22HH_ValidateParams+0x26>
    {
    	ret_status |= LPS22HH_REG_CONTEXT_ERR;
 8003b34:	697b      	ldr	r3, [r7, #20]
 8003b36:	f043 0308 	orr.w	r3, r3, #8
 8003b3a:	617b      	str	r3, [r7, #20]
    }

    if(Reg < LPS22HH_REG_INTERRUPT_CFG || Reg > LPS22HH_REG_FIFO_DATA_OUT_TEMP_H)
 8003b3c:	7afb      	ldrb	r3, [r7, #11]
 8003b3e:	2b0a      	cmp	r3, #10
 8003b40:	d902      	bls.n	8003b48 <LPS22HH_ValidateParams+0x32>
 8003b42:	7afb      	ldrb	r3, [r7, #11]
 8003b44:	2b7c      	cmp	r3, #124	; 0x7c
 8003b46:	d903      	bls.n	8003b50 <LPS22HH_ValidateParams+0x3a>
    {
    	ret_status |= LPS22HH_REG_REGADDR_ERR;
 8003b48:	697b      	ldr	r3, [r7, #20]
 8003b4a:	f043 0301 	orr.w	r3, r3, #1
 8003b4e:	617b      	str	r3, [r7, #20]
    }

    if(Buffer == NULL)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d103      	bne.n	8003b5e <LPS22HH_ValidateParams+0x48>
    {
    	ret_status |= LPS22HH_REG_BUFF_ERR;
 8003b56:	697b      	ldr	r3, [r7, #20]
 8003b58:	f043 0304 	orr.w	r3, r3, #4
 8003b5c:	617b      	str	r3, [r7, #20]
    }

    if(Length == 0)
 8003b5e:	7abb      	ldrb	r3, [r7, #10]
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d103      	bne.n	8003b6c <LPS22HH_ValidateParams+0x56>
    {
    	ret_status |= LPS22HH_REG_LENGTH_ERR;
 8003b64:	697b      	ldr	r3, [r7, #20]
 8003b66:	f043 0302 	orr.w	r3, r3, #2
 8003b6a:	617b      	str	r3, [r7, #20]
    }

    return ret_status;
 8003b6c:	697b      	ldr	r3, [r7, #20]
}
 8003b6e:	4618      	mov	r0, r3
 8003b70:	371c      	adds	r7, #28
 8003b72:	46bd      	mov	sp, r7
 8003b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b78:	4770      	bx	lr

08003b7a <LPS22HH_ReadReg>:

int32_t LPS22HH_ReadReg(LPS22HH_Context_t *Context, uint8_t Reg, uint8_t *Buffer, uint8_t Length)
{
 8003b7a:	b590      	push	{r4, r7, lr}
 8003b7c:	b087      	sub	sp, #28
 8003b7e:	af00      	add	r7, sp, #0
 8003b80:	60f8      	str	r0, [r7, #12]
 8003b82:	607a      	str	r2, [r7, #4]
 8003b84:	461a      	mov	r2, r3
 8003b86:	460b      	mov	r3, r1
 8003b88:	72fb      	strb	r3, [r7, #11]
 8003b8a:	4613      	mov	r3, r2
 8003b8c:	72bb      	strb	r3, [r7, #10]
	int32_t ret = LPS22HH_ValidateParams(Context,Reg,Buffer,Length);
 8003b8e:	7abb      	ldrb	r3, [r7, #10]
 8003b90:	7af9      	ldrb	r1, [r7, #11]
 8003b92:	687a      	ldr	r2, [r7, #4]
 8003b94:	68f8      	ldr	r0, [r7, #12]
 8003b96:	f7ff ffbe 	bl	8003b16 <LPS22HH_ValidateParams>
 8003b9a:	4603      	mov	r3, r0
 8003b9c:	617b      	str	r3, [r7, #20]
    if(ret != LPS22HH_REG_OK)
 8003b9e:	697b      	ldr	r3, [r7, #20]
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d001      	beq.n	8003ba8 <LPS22HH_ReadReg+0x2e>
    {
    	return ret;
 8003ba4:	697b      	ldr	r3, [r7, #20]
 8003ba6:	e009      	b.n	8003bbc <LPS22HH_ReadReg+0x42>
    }

	ret = Context->Read(Context->Handle, Reg, Buffer, Length);
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	685c      	ldr	r4, [r3, #4]
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	6818      	ldr	r0, [r3, #0]
 8003bb0:	7abb      	ldrb	r3, [r7, #10]
 8003bb2:	7af9      	ldrb	r1, [r7, #11]
 8003bb4:	687a      	ldr	r2, [r7, #4]
 8003bb6:	47a0      	blx	r4
 8003bb8:	6178      	str	r0, [r7, #20]
	return ret;
 8003bba:	697b      	ldr	r3, [r7, #20]
}
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	371c      	adds	r7, #28
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	bd90      	pop	{r4, r7, pc}

08003bc4 <LPS22HH_WriteReg>:

int32_t LPS22HH_WriteReg(LPS22HH_Context_t *Context, uint8_t Reg, uint8_t *Buffer, uint8_t Length)
{
 8003bc4:	b590      	push	{r4, r7, lr}
 8003bc6:	b087      	sub	sp, #28
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	60f8      	str	r0, [r7, #12]
 8003bcc:	607a      	str	r2, [r7, #4]
 8003bce:	461a      	mov	r2, r3
 8003bd0:	460b      	mov	r3, r1
 8003bd2:	72fb      	strb	r3, [r7, #11]
 8003bd4:	4613      	mov	r3, r2
 8003bd6:	72bb      	strb	r3, [r7, #10]
	int32_t ret = LPS22HH_ValidateParams(Context,Reg,Buffer,Length);
 8003bd8:	7abb      	ldrb	r3, [r7, #10]
 8003bda:	7af9      	ldrb	r1, [r7, #11]
 8003bdc:	687a      	ldr	r2, [r7, #4]
 8003bde:	68f8      	ldr	r0, [r7, #12]
 8003be0:	f7ff ff99 	bl	8003b16 <LPS22HH_ValidateParams>
 8003be4:	4603      	mov	r3, r0
 8003be6:	617b      	str	r3, [r7, #20]
    if(ret != LPS22HH_REG_OK)
 8003be8:	697b      	ldr	r3, [r7, #20]
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d001      	beq.n	8003bf2 <LPS22HH_WriteReg+0x2e>
    {
    	return ret;
 8003bee:	697b      	ldr	r3, [r7, #20]
 8003bf0:	e009      	b.n	8003c06 <LPS22HH_WriteReg+0x42>
    }

	ret = Context->Write(Context->Handle, Reg, Buffer, Length);
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	689c      	ldr	r4, [r3, #8]
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	6818      	ldr	r0, [r3, #0]
 8003bfa:	7abb      	ldrb	r3, [r7, #10]
 8003bfc:	7af9      	ldrb	r1, [r7, #11]
 8003bfe:	687a      	ldr	r2, [r7, #4]
 8003c00:	47a0      	blx	r4
 8003c02:	6178      	str	r0, [r7, #20]
	return ret;
 8003c04:	697b      	ldr	r3, [r7, #20]
}
 8003c06:	4618      	mov	r0, r3
 8003c08:	371c      	adds	r7, #28
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	bd90      	pop	{r4, r7, pc}
	...

08003c10 <OV5640_LinkBus>:
#define  OV5640_ID                                 0x5640U
static int32_t OV5640_ReadWrapper(void *Handle, uint16_t Reg, uint8_t *Data, uint16_t Length);
static int32_t OV5640_WriteWrapper(void *Handle, uint16_t Reg, uint8_t *Data, uint16_t Length);

void OV5640_LinkBus(OV5640_Handle_t *OV5640_Handle, OV5640_IO_t *CameraIO)
{
 8003c10:	b5b0      	push	{r4, r5, r7, lr}
 8003c12:	b082      	sub	sp, #8
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
 8003c18:	6039      	str	r1, [r7, #0]
	OV5640_Handle->IO               = *CameraIO;
 8003c1a:	687a      	ldr	r2, [r7, #4]
 8003c1c:	683b      	ldr	r3, [r7, #0]
 8003c1e:	4614      	mov	r4, r2
 8003c20:	461d      	mov	r5, r3
 8003c22:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003c24:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003c26:	e895 0003 	ldmia.w	r5, {r0, r1}
 8003c2a:	e884 0003 	stmia.w	r4, {r0, r1}

	OV5640_Handle->Context.Read  = OV5640_ReadWrapper;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	4a07      	ldr	r2, [pc, #28]	; (8003c50 <OV5640_LinkBus+0x40>)
 8003c32:	61da      	str	r2, [r3, #28]
	OV5640_Handle->Context.Write = OV5640_WriteWrapper;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	4a07      	ldr	r2, [pc, #28]	; (8003c54 <OV5640_LinkBus+0x44>)
 8003c38:	619a      	str	r2, [r3, #24]
	OV5640_Handle->Context.Handle   = OV5640_Handle;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	687a      	ldr	r2, [r7, #4]
 8003c3e:	621a      	str	r2, [r3, #32]

	OV5640_Handle->IO.Init();
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	685b      	ldr	r3, [r3, #4]
 8003c44:	4798      	blx	r3
}
 8003c46:	bf00      	nop
 8003c48:	3708      	adds	r7, #8
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	bdb0      	pop	{r4, r5, r7, pc}
 8003c4e:	bf00      	nop
 8003c50:	08003d95 	.word	0x08003d95
 8003c54:	08003dc7 	.word	0x08003dc7

08003c58 <OV5640_Init>:

int32_t OV5640_Init(OV5640_Handle_t *OV5640, uint32_t Resolution, uint32_t PixelFormat)
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	b088      	sub	sp, #32
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	60f8      	str	r0, [r7, #12]
 8003c60:	60b9      	str	r1, [r7, #8]
 8003c62:	607a      	str	r2, [r7, #4]
  uint32_t index;
  int32_t ret = OV5640_OK;
 8003c64:	2300      	movs	r3, #0
 8003c66:	61bb      	str	r3, [r7, #24]
    {OV5640_SYSTEM_CTROL0, 0x02},
  };
  uint8_t tmp;

    /* Check if resolution is supported */
    if ((Resolution > OV5640_R800x480) ||
 8003c68:	68bb      	ldr	r3, [r7, #8]
 8003c6a:	2b04      	cmp	r3, #4
 8003c6c:	d80e      	bhi.n	8003c8c <OV5640_Init+0x34>
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d00f      	beq.n	8003c94 <OV5640_Init+0x3c>
        ((PixelFormat != OV5640_RGB565) && (PixelFormat != OV5640_YUV422) &&
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2b02      	cmp	r3, #2
 8003c78:	d00c      	beq.n	8003c94 <OV5640_Init+0x3c>
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	2b01      	cmp	r3, #1
 8003c7e:	d009      	beq.n	8003c94 <OV5640_Init+0x3c>
         (PixelFormat != OV5640_RGB888) && (PixelFormat != OV5640_Y8) &&
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2b07      	cmp	r3, #7
 8003c84:	d006      	beq.n	8003c94 <OV5640_Init+0x3c>
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	2b08      	cmp	r3, #8
 8003c8a:	d003      	beq.n	8003c94 <OV5640_Init+0x3c>
         (PixelFormat != OV5640_JPEG)))
    {
      ret = OV5640_ERROR;
 8003c8c:	f04f 33ff 	mov.w	r3, #4294967295
 8003c90:	61bb      	str	r3, [r7, #24]
 8003c92:	e04a      	b.n	8003d2a <OV5640_Init+0xd2>
    }
    else
    {
      /* Set common parameters for all resolutions */
      for (index = 0; index < (sizeof(OV5640_Common) / 4U) ; index++)
 8003c94:	2300      	movs	r3, #0
 8003c96:	61fb      	str	r3, [r7, #28]
 8003c98:	e01f      	b.n	8003cda <OV5640_Init+0x82>
      {
        if (ret != OV5640_ERROR)
 8003c9a:	69bb      	ldr	r3, [r7, #24]
 8003c9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ca0:	d018      	beq.n	8003cd4 <OV5640_Init+0x7c>
        {
          tmp = (uint8_t)OV5640_Common[index][1];
 8003ca2:	4a24      	ldr	r2, [pc, #144]	; (8003d34 <OV5640_Init+0xdc>)
 8003ca4:	69fb      	ldr	r3, [r7, #28]
 8003ca6:	009b      	lsls	r3, r3, #2
 8003ca8:	4413      	add	r3, r2
 8003caa:	885b      	ldrh	r3, [r3, #2]
 8003cac:	b2db      	uxtb	r3, r3
 8003cae:	75fb      	strb	r3, [r7, #23]

          if (OV5640_WriteReg(&OV5640->Context, OV5640_Common[index][0], &tmp, 1) != OV5640_OK)
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	f103 0018 	add.w	r0, r3, #24
 8003cb6:	4a1f      	ldr	r2, [pc, #124]	; (8003d34 <OV5640_Init+0xdc>)
 8003cb8:	69fb      	ldr	r3, [r7, #28]
 8003cba:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8003cbe:	f107 0217 	add.w	r2, r7, #23
 8003cc2:	2301      	movs	r3, #1
 8003cc4:	f000 f84f 	bl	8003d66 <OV5640_WriteReg>
 8003cc8:	4603      	mov	r3, r0
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d002      	beq.n	8003cd4 <OV5640_Init+0x7c>
          {
            ret = OV5640_ERROR;
 8003cce:	f04f 33ff 	mov.w	r3, #4294967295
 8003cd2:	61bb      	str	r3, [r7, #24]
      for (index = 0; index < (sizeof(OV5640_Common) / 4U) ; index++)
 8003cd4:	69fb      	ldr	r3, [r7, #28]
 8003cd6:	3301      	adds	r3, #1
 8003cd8:	61fb      	str	r3, [r7, #28]
 8003cda:	69fb      	ldr	r3, [r7, #28]
 8003cdc:	2bfd      	cmp	r3, #253	; 0xfd
 8003cde:	d9dc      	bls.n	8003c9a <OV5640_Init+0x42>
          }
        }
      }

      if (ret == OV5640_OK)
 8003ce0:	69bb      	ldr	r3, [r7, #24]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d121      	bne.n	8003d2a <OV5640_Init+0xd2>
      {
        /* Set specific parameters for each resolution */
        if (OV5640_SetResolution(OV5640, Resolution) != OV5640_OK)
 8003ce6:	68b9      	ldr	r1, [r7, #8]
 8003ce8:	68f8      	ldr	r0, [r7, #12]
 8003cea:	f000 f89d 	bl	8003e28 <OV5640_SetResolution>
 8003cee:	4603      	mov	r3, r0
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d003      	beq.n	8003cfc <OV5640_Init+0xa4>
        {
          ret = OV5640_ERROR;
 8003cf4:	f04f 33ff 	mov.w	r3, #4294967295
 8003cf8:	61bb      	str	r3, [r7, #24]
 8003cfa:	e016      	b.n	8003d2a <OV5640_Init+0xd2>
        }/* Set specific parameters for each pixel format */
        else if (OV5640_SetPixelFormat(OV5640, PixelFormat) != OV5640_OK)
 8003cfc:	6879      	ldr	r1, [r7, #4]
 8003cfe:	68f8      	ldr	r0, [r7, #12]
 8003d00:	f000 f988 	bl	8004014 <OV5640_SetPixelFormat>
 8003d04:	4603      	mov	r3, r0
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d003      	beq.n	8003d12 <OV5640_Init+0xba>
        {
          ret = OV5640_ERROR;
 8003d0a:	f04f 33ff 	mov.w	r3, #4294967295
 8003d0e:	61bb      	str	r3, [r7, #24]
 8003d10:	e00b      	b.n	8003d2a <OV5640_Init+0xd2>
        }/* Set PixelClock, Href and VSync Polarity */
        else if (OV5640_SetPolarities(OV5640, OV5640_POLARITY_PCLK_HIGH, OV5640_POLARITY_HREF_HIGH,
 8003d12:	2300      	movs	r3, #0
 8003d14:	2201      	movs	r2, #1
 8003d16:	2101      	movs	r1, #1
 8003d18:	68f8      	ldr	r0, [r7, #12]
 8003d1a:	f000 fb0f 	bl	800433c <OV5640_SetPolarities>
 8003d1e:	4603      	mov	r3, r0
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d002      	beq.n	8003d2a <OV5640_Init+0xd2>
                                      OV5640_POLARITY_VSYNC_HIGH) != OV5640_OK)
        {
          ret = OV5640_ERROR;
 8003d24:	f04f 33ff 	mov.w	r3, #4294967295
 8003d28:	61bb      	str	r3, [r7, #24]
        }
      }
    }


  return ret;
 8003d2a:	69bb      	ldr	r3, [r7, #24]
}
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	3720      	adds	r7, #32
 8003d30:	46bd      	mov	sp, r7
 8003d32:	bd80      	pop	{r7, pc}
 8003d34:	08014a18 	.word	0x08014a18

08003d38 <OV5640_ReadReg>:

int32_t OV5640_ReadReg(OV5650_Context_t *Context, uint16_t reg, uint8_t *pdata, uint16_t length)
{
 8003d38:	b590      	push	{r4, r7, lr}
 8003d3a:	b085      	sub	sp, #20
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	60f8      	str	r0, [r7, #12]
 8003d40:	607a      	str	r2, [r7, #4]
 8003d42:	461a      	mov	r2, r3
 8003d44:	460b      	mov	r3, r1
 8003d46:	817b      	strh	r3, [r7, #10]
 8003d48:	4613      	mov	r3, r2
 8003d4a:	813b      	strh	r3, [r7, #8]
  return Context->Read(Context->Handle, reg, pdata, length);
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	685c      	ldr	r4, [r3, #4]
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	6898      	ldr	r0, [r3, #8]
 8003d54:	893b      	ldrh	r3, [r7, #8]
 8003d56:	8979      	ldrh	r1, [r7, #10]
 8003d58:	687a      	ldr	r2, [r7, #4]
 8003d5a:	47a0      	blx	r4
 8003d5c:	4603      	mov	r3, r0
}
 8003d5e:	4618      	mov	r0, r3
 8003d60:	3714      	adds	r7, #20
 8003d62:	46bd      	mov	sp, r7
 8003d64:	bd90      	pop	{r4, r7, pc}

08003d66 <OV5640_WriteReg>:


int32_t OV5640_WriteReg(OV5650_Context_t *Context, uint16_t reg, uint8_t *pdata, uint16_t length)
{
 8003d66:	b590      	push	{r4, r7, lr}
 8003d68:	b085      	sub	sp, #20
 8003d6a:	af00      	add	r7, sp, #0
 8003d6c:	60f8      	str	r0, [r7, #12]
 8003d6e:	607a      	str	r2, [r7, #4]
 8003d70:	461a      	mov	r2, r3
 8003d72:	460b      	mov	r3, r1
 8003d74:	817b      	strh	r3, [r7, #10]
 8003d76:	4613      	mov	r3, r2
 8003d78:	813b      	strh	r3, [r7, #8]
  return Context->Write(Context->Handle, reg, pdata, length);
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	681c      	ldr	r4, [r3, #0]
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	6898      	ldr	r0, [r3, #8]
 8003d82:	893b      	ldrh	r3, [r7, #8]
 8003d84:	8979      	ldrh	r1, [r7, #10]
 8003d86:	687a      	ldr	r2, [r7, #4]
 8003d88:	47a0      	blx	r4
 8003d8a:	4603      	mov	r3, r0
}
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	3714      	adds	r7, #20
 8003d90:	46bd      	mov	sp, r7
 8003d92:	bd90      	pop	{r4, r7, pc}

08003d94 <OV5640_ReadWrapper>:

static int32_t OV5640_ReadWrapper(void *Handle, uint16_t Reg, uint8_t *Data, uint16_t Length){
 8003d94:	b590      	push	{r4, r7, lr}
 8003d96:	b087      	sub	sp, #28
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	60f8      	str	r0, [r7, #12]
 8003d9c:	607a      	str	r2, [r7, #4]
 8003d9e:	461a      	mov	r2, r3
 8003da0:	460b      	mov	r3, r1
 8003da2:	817b      	strh	r3, [r7, #10]
 8003da4:	4613      	mov	r3, r2
 8003da6:	813b      	strh	r3, [r7, #8]
	OV5640_Handle_t *OV5640 = (OV5640_Handle_t*)Handle;
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	617b      	str	r3, [r7, #20]
    return OV5640->IO.Read(OV5640->IO.Address,Reg,Data,Length);
 8003dac:	697b      	ldr	r3, [r7, #20]
 8003dae:	691c      	ldr	r4, [r3, #16]
 8003db0:	697b      	ldr	r3, [r7, #20]
 8003db2:	8818      	ldrh	r0, [r3, #0]
 8003db4:	893b      	ldrh	r3, [r7, #8]
 8003db6:	8979      	ldrh	r1, [r7, #10]
 8003db8:	687a      	ldr	r2, [r7, #4]
 8003dba:	47a0      	blx	r4
 8003dbc:	4603      	mov	r3, r0
}
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	371c      	adds	r7, #28
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	bd90      	pop	{r4, r7, pc}

08003dc6 <OV5640_WriteWrapper>:

static int32_t OV5640_WriteWrapper(void *Handle, uint16_t Reg, uint8_t *Data, uint16_t Length){
 8003dc6:	b590      	push	{r4, r7, lr}
 8003dc8:	b087      	sub	sp, #28
 8003dca:	af00      	add	r7, sp, #0
 8003dcc:	60f8      	str	r0, [r7, #12]
 8003dce:	607a      	str	r2, [r7, #4]
 8003dd0:	461a      	mov	r2, r3
 8003dd2:	460b      	mov	r3, r1
 8003dd4:	817b      	strh	r3, [r7, #10]
 8003dd6:	4613      	mov	r3, r2
 8003dd8:	813b      	strh	r3, [r7, #8]
	OV5640_Handle_t *OV5640 = (OV5640_Handle_t*)Handle;
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	617b      	str	r3, [r7, #20]
	return OV5640->IO.Write(OV5640->IO.Address,Reg,Data,Length);
 8003dde:	697b      	ldr	r3, [r7, #20]
 8003de0:	68dc      	ldr	r4, [r3, #12]
 8003de2:	697b      	ldr	r3, [r7, #20]
 8003de4:	8818      	ldrh	r0, [r3, #0]
 8003de6:	893b      	ldrh	r3, [r7, #8]
 8003de8:	8979      	ldrh	r1, [r7, #10]
 8003dea:	687a      	ldr	r2, [r7, #4]
 8003dec:	47a0      	blx	r4
 8003dee:	4603      	mov	r3, r0
}
 8003df0:	4618      	mov	r0, r3
 8003df2:	371c      	adds	r7, #28
 8003df4:	46bd      	mov	sp, r7
 8003df6:	bd90      	pop	{r4, r7, pc}

08003df8 <OV5640_Delay>:

static int32_t OV5640_Delay(OV5640_Handle_t *OV5640, uint32_t Delay)
{
 8003df8:	b580      	push	{r7, lr}
 8003dfa:	b084      	sub	sp, #16
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	6078      	str	r0, [r7, #4]
 8003e00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  tickstart = OV5640->IO.GetTick();
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	695b      	ldr	r3, [r3, #20]
 8003e06:	4798      	blx	r3
 8003e08:	60f8      	str	r0, [r7, #12]
  while ((OV5640->IO.GetTick() - tickstart) < Delay)
 8003e0a:	bf00      	nop
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	695b      	ldr	r3, [r3, #20]
 8003e10:	4798      	blx	r3
 8003e12:	4602      	mov	r2, r0
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	1ad3      	subs	r3, r2, r3
 8003e18:	683a      	ldr	r2, [r7, #0]
 8003e1a:	429a      	cmp	r2, r3
 8003e1c:	d8f6      	bhi.n	8003e0c <OV5640_Delay+0x14>
  {
  }
  return OV5640_OK;
 8003e1e:	2300      	movs	r3, #0
}
 8003e20:	4618      	mov	r0, r3
 8003e22:	3710      	adds	r7, #16
 8003e24:	46bd      	mov	sp, r7
 8003e26:	bd80      	pop	{r7, pc}

08003e28 <OV5640_SetResolution>:

int32_t OV5640_SetResolution(OV5640_Handle_t *OV5640, uint32_t Resolution)
{
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	b086      	sub	sp, #24
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]
 8003e30:	6039      	str	r1, [r7, #0]
  int32_t ret = OV5640_OK;
 8003e32:	2300      	movs	r3, #0
 8003e34:	617b      	str	r3, [r7, #20]
    {OV5640_TIMING_DVPVO_HIGH, 0x00},
    {OV5640_TIMING_DVPVO_LOW, 0x78},
  };

  /* Check if resolution is supported */
  if (Resolution > OV5640_R800x480)
 8003e36:	683b      	ldr	r3, [r7, #0]
 8003e38:	2b04      	cmp	r3, #4
 8003e3a:	d903      	bls.n	8003e44 <OV5640_SetResolution+0x1c>
  {
    ret = OV5640_ERROR;
 8003e3c:	f04f 33ff 	mov.w	r3, #4294967295
 8003e40:	617b      	str	r3, [r7, #20]
 8003e42:	e0d8      	b.n	8003ff6 <OV5640_SetResolution+0x1ce>
  }
  else
  {
    /* Initialize OV5640 */
    switch (Resolution)
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	2b04      	cmp	r3, #4
 8003e48:	f200 80d1 	bhi.w	8003fee <OV5640_SetResolution+0x1c6>
 8003e4c:	a201      	add	r2, pc, #4	; (adr r2, 8003e54 <OV5640_SetResolution+0x2c>)
 8003e4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e52:	bf00      	nop
 8003e54:	08003e69 	.word	0x08003e69
 8003e58:	08003eb7 	.word	0x08003eb7
 8003e5c:	08003f05 	.word	0x08003f05
 8003e60:	08003f53 	.word	0x08003f53
 8003e64:	08003fa1 	.word	0x08003fa1
    {
      case OV5640_R160x120:
        for (index = 0; index < (sizeof(OV5640_QQVGA) / 4U); index++)
 8003e68:	2300      	movs	r3, #0
 8003e6a:	613b      	str	r3, [r7, #16]
 8003e6c:	e01f      	b.n	8003eae <OV5640_SetResolution+0x86>
        {
          if (ret != OV5640_ERROR)
 8003e6e:	697b      	ldr	r3, [r7, #20]
 8003e70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e74:	d018      	beq.n	8003ea8 <OV5640_SetResolution+0x80>
          {
            tmp = (uint8_t)OV5640_QQVGA[index][1];
 8003e76:	4a62      	ldr	r2, [pc, #392]	; (8004000 <OV5640_SetResolution+0x1d8>)
 8003e78:	693b      	ldr	r3, [r7, #16]
 8003e7a:	009b      	lsls	r3, r3, #2
 8003e7c:	4413      	add	r3, r2
 8003e7e:	885b      	ldrh	r3, [r3, #2]
 8003e80:	b2db      	uxtb	r3, r3
 8003e82:	73fb      	strb	r3, [r7, #15]
            if (OV5640_WriteReg(&OV5640->Context, OV5640_QQVGA[index][0], &tmp, 1) != OV5640_OK)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	f103 0018 	add.w	r0, r3, #24
 8003e8a:	4a5d      	ldr	r2, [pc, #372]	; (8004000 <OV5640_SetResolution+0x1d8>)
 8003e8c:	693b      	ldr	r3, [r7, #16]
 8003e8e:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8003e92:	f107 020f 	add.w	r2, r7, #15
 8003e96:	2301      	movs	r3, #1
 8003e98:	f7ff ff65 	bl	8003d66 <OV5640_WriteReg>
 8003e9c:	4603      	mov	r3, r0
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d002      	beq.n	8003ea8 <OV5640_SetResolution+0x80>
            {
              ret = OV5640_ERROR;
 8003ea2:	f04f 33ff 	mov.w	r3, #4294967295
 8003ea6:	617b      	str	r3, [r7, #20]
        for (index = 0; index < (sizeof(OV5640_QQVGA) / 4U); index++)
 8003ea8:	693b      	ldr	r3, [r7, #16]
 8003eaa:	3301      	adds	r3, #1
 8003eac:	613b      	str	r3, [r7, #16]
 8003eae:	693b      	ldr	r3, [r7, #16]
 8003eb0:	2b03      	cmp	r3, #3
 8003eb2:	d9dc      	bls.n	8003e6e <OV5640_SetResolution+0x46>
            }
          }
        }
        break;
 8003eb4:	e09f      	b.n	8003ff6 <OV5640_SetResolution+0x1ce>
      case OV5640_R320x240:
        for (index = 0; index < (sizeof(OV5640_QVGA) / 4U); index++)
 8003eb6:	2300      	movs	r3, #0
 8003eb8:	613b      	str	r3, [r7, #16]
 8003eba:	e01f      	b.n	8003efc <OV5640_SetResolution+0xd4>
        {
          if (ret != OV5640_ERROR)
 8003ebc:	697b      	ldr	r3, [r7, #20]
 8003ebe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ec2:	d018      	beq.n	8003ef6 <OV5640_SetResolution+0xce>
          {
            tmp = (uint8_t)OV5640_QVGA[index][1];
 8003ec4:	4a4f      	ldr	r2, [pc, #316]	; (8004004 <OV5640_SetResolution+0x1dc>)
 8003ec6:	693b      	ldr	r3, [r7, #16]
 8003ec8:	009b      	lsls	r3, r3, #2
 8003eca:	4413      	add	r3, r2
 8003ecc:	885b      	ldrh	r3, [r3, #2]
 8003ece:	b2db      	uxtb	r3, r3
 8003ed0:	73fb      	strb	r3, [r7, #15]
            if (OV5640_WriteReg(&OV5640->Context, OV5640_QVGA[index][0], &tmp, 1) != OV5640_OK)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	f103 0018 	add.w	r0, r3, #24
 8003ed8:	4a4a      	ldr	r2, [pc, #296]	; (8004004 <OV5640_SetResolution+0x1dc>)
 8003eda:	693b      	ldr	r3, [r7, #16]
 8003edc:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8003ee0:	f107 020f 	add.w	r2, r7, #15
 8003ee4:	2301      	movs	r3, #1
 8003ee6:	f7ff ff3e 	bl	8003d66 <OV5640_WriteReg>
 8003eea:	4603      	mov	r3, r0
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d002      	beq.n	8003ef6 <OV5640_SetResolution+0xce>
            {
              ret = OV5640_ERROR;
 8003ef0:	f04f 33ff 	mov.w	r3, #4294967295
 8003ef4:	617b      	str	r3, [r7, #20]
        for (index = 0; index < (sizeof(OV5640_QVGA) / 4U); index++)
 8003ef6:	693b      	ldr	r3, [r7, #16]
 8003ef8:	3301      	adds	r3, #1
 8003efa:	613b      	str	r3, [r7, #16]
 8003efc:	693b      	ldr	r3, [r7, #16]
 8003efe:	2b03      	cmp	r3, #3
 8003f00:	d9dc      	bls.n	8003ebc <OV5640_SetResolution+0x94>
            }
          }
        }
        break;
 8003f02:	e078      	b.n	8003ff6 <OV5640_SetResolution+0x1ce>
      case OV5640_R480x272:
        for (index = 0; index < (sizeof(OV5640_480x272) / 4U); index++)
 8003f04:	2300      	movs	r3, #0
 8003f06:	613b      	str	r3, [r7, #16]
 8003f08:	e01f      	b.n	8003f4a <OV5640_SetResolution+0x122>
        {
          if (ret != OV5640_ERROR)
 8003f0a:	697b      	ldr	r3, [r7, #20]
 8003f0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f10:	d018      	beq.n	8003f44 <OV5640_SetResolution+0x11c>
          {
            tmp = (uint8_t)OV5640_480x272[index][1];
 8003f12:	4a3d      	ldr	r2, [pc, #244]	; (8004008 <OV5640_SetResolution+0x1e0>)
 8003f14:	693b      	ldr	r3, [r7, #16]
 8003f16:	009b      	lsls	r3, r3, #2
 8003f18:	4413      	add	r3, r2
 8003f1a:	885b      	ldrh	r3, [r3, #2]
 8003f1c:	b2db      	uxtb	r3, r3
 8003f1e:	73fb      	strb	r3, [r7, #15]
            if (OV5640_WriteReg(&OV5640->Context, OV5640_480x272[index][0], &tmp, 1) != OV5640_OK)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	f103 0018 	add.w	r0, r3, #24
 8003f26:	4a38      	ldr	r2, [pc, #224]	; (8004008 <OV5640_SetResolution+0x1e0>)
 8003f28:	693b      	ldr	r3, [r7, #16]
 8003f2a:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8003f2e:	f107 020f 	add.w	r2, r7, #15
 8003f32:	2301      	movs	r3, #1
 8003f34:	f7ff ff17 	bl	8003d66 <OV5640_WriteReg>
 8003f38:	4603      	mov	r3, r0
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d002      	beq.n	8003f44 <OV5640_SetResolution+0x11c>
            {
              ret = OV5640_ERROR;
 8003f3e:	f04f 33ff 	mov.w	r3, #4294967295
 8003f42:	617b      	str	r3, [r7, #20]
        for (index = 0; index < (sizeof(OV5640_480x272) / 4U); index++)
 8003f44:	693b      	ldr	r3, [r7, #16]
 8003f46:	3301      	adds	r3, #1
 8003f48:	613b      	str	r3, [r7, #16]
 8003f4a:	693b      	ldr	r3, [r7, #16]
 8003f4c:	2b03      	cmp	r3, #3
 8003f4e:	d9dc      	bls.n	8003f0a <OV5640_SetResolution+0xe2>
            }
          }
        }
        break;
 8003f50:	e051      	b.n	8003ff6 <OV5640_SetResolution+0x1ce>
      case OV5640_R640x480:
        for (index = 0; index < (sizeof(OV5640_VGA) / 4U); index++)
 8003f52:	2300      	movs	r3, #0
 8003f54:	613b      	str	r3, [r7, #16]
 8003f56:	e01f      	b.n	8003f98 <OV5640_SetResolution+0x170>
        {
          if (ret != OV5640_ERROR)
 8003f58:	697b      	ldr	r3, [r7, #20]
 8003f5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f5e:	d018      	beq.n	8003f92 <OV5640_SetResolution+0x16a>
          {
            tmp = (uint8_t)OV5640_VGA[index][1];
 8003f60:	4a2a      	ldr	r2, [pc, #168]	; (800400c <OV5640_SetResolution+0x1e4>)
 8003f62:	693b      	ldr	r3, [r7, #16]
 8003f64:	009b      	lsls	r3, r3, #2
 8003f66:	4413      	add	r3, r2
 8003f68:	885b      	ldrh	r3, [r3, #2]
 8003f6a:	b2db      	uxtb	r3, r3
 8003f6c:	73fb      	strb	r3, [r7, #15]
            if (OV5640_WriteReg(&OV5640->Context, OV5640_VGA[index][0], &tmp, 1) != OV5640_OK)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	f103 0018 	add.w	r0, r3, #24
 8003f74:	4a25      	ldr	r2, [pc, #148]	; (800400c <OV5640_SetResolution+0x1e4>)
 8003f76:	693b      	ldr	r3, [r7, #16]
 8003f78:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8003f7c:	f107 020f 	add.w	r2, r7, #15
 8003f80:	2301      	movs	r3, #1
 8003f82:	f7ff fef0 	bl	8003d66 <OV5640_WriteReg>
 8003f86:	4603      	mov	r3, r0
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d002      	beq.n	8003f92 <OV5640_SetResolution+0x16a>
            {
              ret = OV5640_ERROR;
 8003f8c:	f04f 33ff 	mov.w	r3, #4294967295
 8003f90:	617b      	str	r3, [r7, #20]
        for (index = 0; index < (sizeof(OV5640_VGA) / 4U); index++)
 8003f92:	693b      	ldr	r3, [r7, #16]
 8003f94:	3301      	adds	r3, #1
 8003f96:	613b      	str	r3, [r7, #16]
 8003f98:	693b      	ldr	r3, [r7, #16]
 8003f9a:	2b03      	cmp	r3, #3
 8003f9c:	d9dc      	bls.n	8003f58 <OV5640_SetResolution+0x130>
            }
          }
        }
        break;
 8003f9e:	e02a      	b.n	8003ff6 <OV5640_SetResolution+0x1ce>
      case OV5640_R800x480:
        for (index = 0; index < (sizeof(OV5640_WVGA) / 4U); index++)
 8003fa0:	2300      	movs	r3, #0
 8003fa2:	613b      	str	r3, [r7, #16]
 8003fa4:	e01f      	b.n	8003fe6 <OV5640_SetResolution+0x1be>
        {
          if (ret != OV5640_ERROR)
 8003fa6:	697b      	ldr	r3, [r7, #20]
 8003fa8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fac:	d018      	beq.n	8003fe0 <OV5640_SetResolution+0x1b8>
          {
            tmp = (uint8_t)OV5640_WVGA[index][1];
 8003fae:	4a18      	ldr	r2, [pc, #96]	; (8004010 <OV5640_SetResolution+0x1e8>)
 8003fb0:	693b      	ldr	r3, [r7, #16]
 8003fb2:	009b      	lsls	r3, r3, #2
 8003fb4:	4413      	add	r3, r2
 8003fb6:	885b      	ldrh	r3, [r3, #2]
 8003fb8:	b2db      	uxtb	r3, r3
 8003fba:	73fb      	strb	r3, [r7, #15]
            if (OV5640_WriteReg(&OV5640->Context, OV5640_WVGA[index][0], &tmp, 1) != OV5640_OK)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	f103 0018 	add.w	r0, r3, #24
 8003fc2:	4a13      	ldr	r2, [pc, #76]	; (8004010 <OV5640_SetResolution+0x1e8>)
 8003fc4:	693b      	ldr	r3, [r7, #16]
 8003fc6:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8003fca:	f107 020f 	add.w	r2, r7, #15
 8003fce:	2301      	movs	r3, #1
 8003fd0:	f7ff fec9 	bl	8003d66 <OV5640_WriteReg>
 8003fd4:	4603      	mov	r3, r0
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d002      	beq.n	8003fe0 <OV5640_SetResolution+0x1b8>
            {
              ret = OV5640_ERROR;
 8003fda:	f04f 33ff 	mov.w	r3, #4294967295
 8003fde:	617b      	str	r3, [r7, #20]
        for (index = 0; index < (sizeof(OV5640_WVGA) / 4U); index++)
 8003fe0:	693b      	ldr	r3, [r7, #16]
 8003fe2:	3301      	adds	r3, #1
 8003fe4:	613b      	str	r3, [r7, #16]
 8003fe6:	693b      	ldr	r3, [r7, #16]
 8003fe8:	2b03      	cmp	r3, #3
 8003fea:	d9dc      	bls.n	8003fa6 <OV5640_SetResolution+0x17e>
            }
          }
        }
        break;
 8003fec:	e003      	b.n	8003ff6 <OV5640_SetResolution+0x1ce>
      default:
        ret = OV5640_ERROR;
 8003fee:	f04f 33ff 	mov.w	r3, #4294967295
 8003ff2:	617b      	str	r3, [r7, #20]
        break;
 8003ff4:	bf00      	nop
    }
  }

  return ret;
 8003ff6:	697b      	ldr	r3, [r7, #20]
}
 8003ff8:	4618      	mov	r0, r3
 8003ffa:	3718      	adds	r7, #24
 8003ffc:	46bd      	mov	sp, r7
 8003ffe:	bd80      	pop	{r7, pc}
 8004000:	08014e10 	.word	0x08014e10
 8004004:	08014e20 	.word	0x08014e20
 8004008:	08014e30 	.word	0x08014e30
 800400c:	08014e40 	.word	0x08014e40
 8004010:	08014e50 	.word	0x08014e50

08004014 <OV5640_SetPixelFormat>:

int32_t OV5640_SetPixelFormat(OV5640_Handle_t *OV5640, uint32_t PixelFormat)
{
 8004014:	b580      	push	{r7, lr}
 8004016:	b086      	sub	sp, #24
 8004018:	af00      	add	r7, sp, #0
 800401a:	6078      	str	r0, [r7, #4]
 800401c:	6039      	str	r1, [r7, #0]
  int32_t ret = OV5640_OK;
 800401e:	2300      	movs	r3, #0
 8004020:	617b      	str	r3, [r7, #20]
    {OV5640_FORMAT_CTRL00, 0x30},
    {OV5640_FORMAT_MUX_CTRL, 0x00},
  };

  /* Check if PixelFormat is supported */
  if ((PixelFormat != OV5640_RGB565) && (PixelFormat != OV5640_YUV422) &&
 8004022:	683b      	ldr	r3, [r7, #0]
 8004024:	2b00      	cmp	r3, #0
 8004026:	d00f      	beq.n	8004048 <OV5640_SetPixelFormat+0x34>
 8004028:	683b      	ldr	r3, [r7, #0]
 800402a:	2b02      	cmp	r3, #2
 800402c:	d00c      	beq.n	8004048 <OV5640_SetPixelFormat+0x34>
 800402e:	683b      	ldr	r3, [r7, #0]
 8004030:	2b01      	cmp	r3, #1
 8004032:	d009      	beq.n	8004048 <OV5640_SetPixelFormat+0x34>
      (PixelFormat != OV5640_RGB888) && (PixelFormat != OV5640_Y8) &&
 8004034:	683b      	ldr	r3, [r7, #0]
 8004036:	2b07      	cmp	r3, #7
 8004038:	d006      	beq.n	8004048 <OV5640_SetPixelFormat+0x34>
 800403a:	683b      	ldr	r3, [r7, #0]
 800403c:	2b08      	cmp	r3, #8
 800403e:	d003      	beq.n	8004048 <OV5640_SetPixelFormat+0x34>
      (PixelFormat != OV5640_JPEG))
  {
    /* Pixel format not supported */
    ret = OV5640_ERROR;
 8004040:	f04f 33ff 	mov.w	r3, #4294967295
 8004044:	617b      	str	r3, [r7, #20]
 8004046:	e16a      	b.n	800431e <OV5640_SetPixelFormat+0x30a>
  }
  else
  {
    /* Set specific parameters for each PixelFormat */
    switch (PixelFormat)
 8004048:	683b      	ldr	r3, [r7, #0]
 800404a:	3b01      	subs	r3, #1
 800404c:	2b07      	cmp	r3, #7
 800404e:	f200 80c3 	bhi.w	80041d8 <OV5640_SetPixelFormat+0x1c4>
 8004052:	a201      	add	r2, pc, #4	; (adr r2, 8004058 <OV5640_SetPixelFormat+0x44>)
 8004054:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004058:	080040d1 	.word	0x080040d1
 800405c:	08004079 	.word	0x08004079
 8004060:	080041d9 	.word	0x080041d9
 8004064:	080041d9 	.word	0x080041d9
 8004068:	080041d9 	.word	0x080041d9
 800406c:	080041d9 	.word	0x080041d9
 8004070:	08004129 	.word	0x08004129
 8004074:	08004181 	.word	0x08004181
    {
      case OV5640_YUV422:
        for (index = 0; index < (sizeof(OV5640_PF_YUV422) / 4U); index++)
 8004078:	2300      	movs	r3, #0
 800407a:	613b      	str	r3, [r7, #16]
 800407c:	e024      	b.n	80040c8 <OV5640_SetPixelFormat+0xb4>
        {
          if (ret != OV5640_ERROR)
 800407e:	697b      	ldr	r3, [r7, #20]
 8004080:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004084:	d01d      	beq.n	80040c2 <OV5640_SetPixelFormat+0xae>
          {
            tmp = (uint8_t)OV5640_PF_YUV422[index][1];
 8004086:	4aa8      	ldr	r2, [pc, #672]	; (8004328 <OV5640_SetPixelFormat+0x314>)
 8004088:	693b      	ldr	r3, [r7, #16]
 800408a:	009b      	lsls	r3, r3, #2
 800408c:	4413      	add	r3, r2
 800408e:	885b      	ldrh	r3, [r3, #2]
 8004090:	b2db      	uxtb	r3, r3
 8004092:	73fb      	strb	r3, [r7, #15]
            if (OV5640_WriteReg(&OV5640->Context, OV5640_PF_YUV422[index][0], &tmp, 1) != OV5640_OK)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	f103 0018 	add.w	r0, r3, #24
 800409a:	4aa3      	ldr	r2, [pc, #652]	; (8004328 <OV5640_SetPixelFormat+0x314>)
 800409c:	693b      	ldr	r3, [r7, #16]
 800409e:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 80040a2:	f107 020f 	add.w	r2, r7, #15
 80040a6:	2301      	movs	r3, #1
 80040a8:	f7ff fe5d 	bl	8003d66 <OV5640_WriteReg>
 80040ac:	4603      	mov	r3, r0
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d003      	beq.n	80040ba <OV5640_SetPixelFormat+0xa6>
            {
              ret = OV5640_ERROR;
 80040b2:	f04f 33ff 	mov.w	r3, #4294967295
 80040b6:	617b      	str	r3, [r7, #20]
 80040b8:	e003      	b.n	80040c2 <OV5640_SetPixelFormat+0xae>
            }
            else
            {
              (void)OV5640_Delay(OV5640, 1);
 80040ba:	2101      	movs	r1, #1
 80040bc:	6878      	ldr	r0, [r7, #4]
 80040be:	f7ff fe9b 	bl	8003df8 <OV5640_Delay>
        for (index = 0; index < (sizeof(OV5640_PF_YUV422) / 4U); index++)
 80040c2:	693b      	ldr	r3, [r7, #16]
 80040c4:	3301      	adds	r3, #1
 80040c6:	613b      	str	r3, [r7, #16]
 80040c8:	693b      	ldr	r3, [r7, #16]
 80040ca:	2b01      	cmp	r3, #1
 80040cc:	d9d7      	bls.n	800407e <OV5640_SetPixelFormat+0x6a>
            }
          }
        }
        break;
 80040ce:	e0af      	b.n	8004230 <OV5640_SetPixelFormat+0x21c>

      case OV5640_RGB888:
        for (index = 0; index < (sizeof(OV5640_PF_RGB888) / 4U); index++)
 80040d0:	2300      	movs	r3, #0
 80040d2:	613b      	str	r3, [r7, #16]
 80040d4:	e024      	b.n	8004120 <OV5640_SetPixelFormat+0x10c>
        {
          if (ret != OV5640_ERROR)
 80040d6:	697b      	ldr	r3, [r7, #20]
 80040d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040dc:	d01d      	beq.n	800411a <OV5640_SetPixelFormat+0x106>
          {
            tmp = (uint8_t)OV5640_PF_RGB888[index][1];
 80040de:	4a93      	ldr	r2, [pc, #588]	; (800432c <OV5640_SetPixelFormat+0x318>)
 80040e0:	693b      	ldr	r3, [r7, #16]
 80040e2:	009b      	lsls	r3, r3, #2
 80040e4:	4413      	add	r3, r2
 80040e6:	885b      	ldrh	r3, [r3, #2]
 80040e8:	b2db      	uxtb	r3, r3
 80040ea:	73fb      	strb	r3, [r7, #15]
            if (OV5640_WriteReg(&OV5640->Context, OV5640_PF_RGB888[index][0], &tmp, 1) != OV5640_OK)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	f103 0018 	add.w	r0, r3, #24
 80040f2:	4a8e      	ldr	r2, [pc, #568]	; (800432c <OV5640_SetPixelFormat+0x318>)
 80040f4:	693b      	ldr	r3, [r7, #16]
 80040f6:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 80040fa:	f107 020f 	add.w	r2, r7, #15
 80040fe:	2301      	movs	r3, #1
 8004100:	f7ff fe31 	bl	8003d66 <OV5640_WriteReg>
 8004104:	4603      	mov	r3, r0
 8004106:	2b00      	cmp	r3, #0
 8004108:	d003      	beq.n	8004112 <OV5640_SetPixelFormat+0xfe>
            {
              ret = OV5640_ERROR;
 800410a:	f04f 33ff 	mov.w	r3, #4294967295
 800410e:	617b      	str	r3, [r7, #20]
 8004110:	e003      	b.n	800411a <OV5640_SetPixelFormat+0x106>
            }
            else
            {
              (void)OV5640_Delay(OV5640, 1);
 8004112:	2101      	movs	r1, #1
 8004114:	6878      	ldr	r0, [r7, #4]
 8004116:	f7ff fe6f 	bl	8003df8 <OV5640_Delay>
        for (index = 0; index < (sizeof(OV5640_PF_RGB888) / 4U); index++)
 800411a:	693b      	ldr	r3, [r7, #16]
 800411c:	3301      	adds	r3, #1
 800411e:	613b      	str	r3, [r7, #16]
 8004120:	693b      	ldr	r3, [r7, #16]
 8004122:	2b01      	cmp	r3, #1
 8004124:	d9d7      	bls.n	80040d6 <OV5640_SetPixelFormat+0xc2>
            }
          }
        }
        break;
 8004126:	e083      	b.n	8004230 <OV5640_SetPixelFormat+0x21c>

      case OV5640_Y8:
        for (index = 0; index < (sizeof(OV5640_PF_Y8) / 4U); index++)
 8004128:	2300      	movs	r3, #0
 800412a:	613b      	str	r3, [r7, #16]
 800412c:	e024      	b.n	8004178 <OV5640_SetPixelFormat+0x164>
        {
          if (ret != OV5640_ERROR)
 800412e:	697b      	ldr	r3, [r7, #20]
 8004130:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004134:	d01d      	beq.n	8004172 <OV5640_SetPixelFormat+0x15e>
          {
            tmp = (uint8_t)OV5640_PF_Y8[index][1];
 8004136:	4a7e      	ldr	r2, [pc, #504]	; (8004330 <OV5640_SetPixelFormat+0x31c>)
 8004138:	693b      	ldr	r3, [r7, #16]
 800413a:	009b      	lsls	r3, r3, #2
 800413c:	4413      	add	r3, r2
 800413e:	885b      	ldrh	r3, [r3, #2]
 8004140:	b2db      	uxtb	r3, r3
 8004142:	73fb      	strb	r3, [r7, #15]
            if (OV5640_WriteReg(&OV5640->Context, OV5640_PF_Y8[index][0], &tmp, 1) != OV5640_OK)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	f103 0018 	add.w	r0, r3, #24
 800414a:	4a79      	ldr	r2, [pc, #484]	; (8004330 <OV5640_SetPixelFormat+0x31c>)
 800414c:	693b      	ldr	r3, [r7, #16]
 800414e:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8004152:	f107 020f 	add.w	r2, r7, #15
 8004156:	2301      	movs	r3, #1
 8004158:	f7ff fe05 	bl	8003d66 <OV5640_WriteReg>
 800415c:	4603      	mov	r3, r0
 800415e:	2b00      	cmp	r3, #0
 8004160:	d003      	beq.n	800416a <OV5640_SetPixelFormat+0x156>
            {
              ret = OV5640_ERROR;
 8004162:	f04f 33ff 	mov.w	r3, #4294967295
 8004166:	617b      	str	r3, [r7, #20]
 8004168:	e003      	b.n	8004172 <OV5640_SetPixelFormat+0x15e>
            }
            else
            {
              (void)OV5640_Delay(OV5640, 1);
 800416a:	2101      	movs	r1, #1
 800416c:	6878      	ldr	r0, [r7, #4]
 800416e:	f7ff fe43 	bl	8003df8 <OV5640_Delay>
        for (index = 0; index < (sizeof(OV5640_PF_Y8) / 4U); index++)
 8004172:	693b      	ldr	r3, [r7, #16]
 8004174:	3301      	adds	r3, #1
 8004176:	613b      	str	r3, [r7, #16]
 8004178:	693b      	ldr	r3, [r7, #16]
 800417a:	2b01      	cmp	r3, #1
 800417c:	d9d7      	bls.n	800412e <OV5640_SetPixelFormat+0x11a>
            }
          }
        }
        break;
 800417e:	e057      	b.n	8004230 <OV5640_SetPixelFormat+0x21c>

      case OV5640_JPEG:
        for (index = 0; index < (sizeof(OV5640_PF_JPEG) / 4U); index++)
 8004180:	2300      	movs	r3, #0
 8004182:	613b      	str	r3, [r7, #16]
 8004184:	e024      	b.n	80041d0 <OV5640_SetPixelFormat+0x1bc>
        {
          if (ret != OV5640_ERROR)
 8004186:	697b      	ldr	r3, [r7, #20]
 8004188:	f1b3 3fff 	cmp.w	r3, #4294967295
 800418c:	d01d      	beq.n	80041ca <OV5640_SetPixelFormat+0x1b6>
          {
            tmp = (uint8_t)OV5640_PF_JPEG[index][1];
 800418e:	4a69      	ldr	r2, [pc, #420]	; (8004334 <OV5640_SetPixelFormat+0x320>)
 8004190:	693b      	ldr	r3, [r7, #16]
 8004192:	009b      	lsls	r3, r3, #2
 8004194:	4413      	add	r3, r2
 8004196:	885b      	ldrh	r3, [r3, #2]
 8004198:	b2db      	uxtb	r3, r3
 800419a:	73fb      	strb	r3, [r7, #15]
            if (OV5640_WriteReg(&OV5640->Context, OV5640_PF_JPEG[index][0], &tmp, 1) != OV5640_OK)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	f103 0018 	add.w	r0, r3, #24
 80041a2:	4a64      	ldr	r2, [pc, #400]	; (8004334 <OV5640_SetPixelFormat+0x320>)
 80041a4:	693b      	ldr	r3, [r7, #16]
 80041a6:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 80041aa:	f107 020f 	add.w	r2, r7, #15
 80041ae:	2301      	movs	r3, #1
 80041b0:	f7ff fdd9 	bl	8003d66 <OV5640_WriteReg>
 80041b4:	4603      	mov	r3, r0
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d003      	beq.n	80041c2 <OV5640_SetPixelFormat+0x1ae>
            {
              ret = OV5640_ERROR;
 80041ba:	f04f 33ff 	mov.w	r3, #4294967295
 80041be:	617b      	str	r3, [r7, #20]
 80041c0:	e003      	b.n	80041ca <OV5640_SetPixelFormat+0x1b6>
            }
            else
            {
              (void)OV5640_Delay(OV5640, 1);
 80041c2:	2101      	movs	r1, #1
 80041c4:	6878      	ldr	r0, [r7, #4]
 80041c6:	f7ff fe17 	bl	8003df8 <OV5640_Delay>
        for (index = 0; index < (sizeof(OV5640_PF_JPEG) / 4U); index++)
 80041ca:	693b      	ldr	r3, [r7, #16]
 80041cc:	3301      	adds	r3, #1
 80041ce:	613b      	str	r3, [r7, #16]
 80041d0:	693b      	ldr	r3, [r7, #16]
 80041d2:	2b01      	cmp	r3, #1
 80041d4:	d9d7      	bls.n	8004186 <OV5640_SetPixelFormat+0x172>
            }
          }
        }
        break;
 80041d6:	e02b      	b.n	8004230 <OV5640_SetPixelFormat+0x21c>

      case OV5640_RGB565:
      default:
        for (index = 0; index < (sizeof(OV5640_PF_RGB565) / 4U); index++)
 80041d8:	2300      	movs	r3, #0
 80041da:	613b      	str	r3, [r7, #16]
 80041dc:	e024      	b.n	8004228 <OV5640_SetPixelFormat+0x214>
        {
          if (ret != OV5640_ERROR)
 80041de:	697b      	ldr	r3, [r7, #20]
 80041e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041e4:	d01d      	beq.n	8004222 <OV5640_SetPixelFormat+0x20e>
          {
            tmp = (uint8_t)OV5640_PF_RGB565[index][1];
 80041e6:	4a54      	ldr	r2, [pc, #336]	; (8004338 <OV5640_SetPixelFormat+0x324>)
 80041e8:	693b      	ldr	r3, [r7, #16]
 80041ea:	009b      	lsls	r3, r3, #2
 80041ec:	4413      	add	r3, r2
 80041ee:	885b      	ldrh	r3, [r3, #2]
 80041f0:	b2db      	uxtb	r3, r3
 80041f2:	73fb      	strb	r3, [r7, #15]
            if (OV5640_WriteReg(&OV5640->Context, OV5640_PF_RGB565[index][0], &tmp, 1) != OV5640_OK)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	f103 0018 	add.w	r0, r3, #24
 80041fa:	4a4f      	ldr	r2, [pc, #316]	; (8004338 <OV5640_SetPixelFormat+0x324>)
 80041fc:	693b      	ldr	r3, [r7, #16]
 80041fe:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8004202:	f107 020f 	add.w	r2, r7, #15
 8004206:	2301      	movs	r3, #1
 8004208:	f7ff fdad 	bl	8003d66 <OV5640_WriteReg>
 800420c:	4603      	mov	r3, r0
 800420e:	2b00      	cmp	r3, #0
 8004210:	d003      	beq.n	800421a <OV5640_SetPixelFormat+0x206>
            {
              ret = OV5640_ERROR;
 8004212:	f04f 33ff 	mov.w	r3, #4294967295
 8004216:	617b      	str	r3, [r7, #20]
 8004218:	e003      	b.n	8004222 <OV5640_SetPixelFormat+0x20e>
            }
            else
            {
              (void)OV5640_Delay(OV5640, 1);
 800421a:	2101      	movs	r1, #1
 800421c:	6878      	ldr	r0, [r7, #4]
 800421e:	f7ff fdeb 	bl	8003df8 <OV5640_Delay>
        for (index = 0; index < (sizeof(OV5640_PF_RGB565) / 4U); index++)
 8004222:	693b      	ldr	r3, [r7, #16]
 8004224:	3301      	adds	r3, #1
 8004226:	613b      	str	r3, [r7, #16]
 8004228:	693b      	ldr	r3, [r7, #16]
 800422a:	2b01      	cmp	r3, #1
 800422c:	d9d7      	bls.n	80041de <OV5640_SetPixelFormat+0x1ca>
            }
          }
        }
        break;
 800422e:	bf00      	nop

    }

    if (PixelFormat == OV5640_JPEG)
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	2b08      	cmp	r3, #8
 8004234:	d173      	bne.n	800431e <OV5640_SetPixelFormat+0x30a>
    {
      if (OV5640_ReadReg(&OV5640->Context, OV5640_TIMING_TC_REG21, &tmp, 1) != OV5640_OK)
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	f103 0018 	add.w	r0, r3, #24
 800423c:	f107 020f 	add.w	r2, r7, #15
 8004240:	2301      	movs	r3, #1
 8004242:	f643 0121 	movw	r1, #14369	; 0x3821
 8004246:	f7ff fd77 	bl	8003d38 <OV5640_ReadReg>
 800424a:	4603      	mov	r3, r0
 800424c:	2b00      	cmp	r3, #0
 800424e:	d003      	beq.n	8004258 <OV5640_SetPixelFormat+0x244>
      {
        ret = OV5640_ERROR;
 8004250:	f04f 33ff 	mov.w	r3, #4294967295
 8004254:	617b      	str	r3, [r7, #20]
 8004256:	e062      	b.n	800431e <OV5640_SetPixelFormat+0x30a>
      }
      else
      {
        tmp |= (1 << 5);
 8004258:	7bfb      	ldrb	r3, [r7, #15]
 800425a:	f043 0320 	orr.w	r3, r3, #32
 800425e:	b2db      	uxtb	r3, r3
 8004260:	73fb      	strb	r3, [r7, #15]
        if (OV5640_WriteReg(&OV5640->Context, OV5640_TIMING_TC_REG21, &tmp, 1) != OV5640_OK)
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	f103 0018 	add.w	r0, r3, #24
 8004268:	f107 020f 	add.w	r2, r7, #15
 800426c:	2301      	movs	r3, #1
 800426e:	f643 0121 	movw	r1, #14369	; 0x3821
 8004272:	f7ff fd78 	bl	8003d66 <OV5640_WriteReg>
 8004276:	4603      	mov	r3, r0
 8004278:	2b00      	cmp	r3, #0
 800427a:	d003      	beq.n	8004284 <OV5640_SetPixelFormat+0x270>
        {
          ret = OV5640_ERROR;
 800427c:	f04f 33ff 	mov.w	r3, #4294967295
 8004280:	617b      	str	r3, [r7, #20]
 8004282:	e04c      	b.n	800431e <OV5640_SetPixelFormat+0x30a>
        }
        else
        {
          if (OV5640_ReadReg(&OV5640->Context, OV5640_SYSREM_RESET02, &tmp, 1) != OV5640_OK)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	f103 0018 	add.w	r0, r3, #24
 800428a:	f107 020f 	add.w	r2, r7, #15
 800428e:	2301      	movs	r3, #1
 8004290:	f243 0102 	movw	r1, #12290	; 0x3002
 8004294:	f7ff fd50 	bl	8003d38 <OV5640_ReadReg>
 8004298:	4603      	mov	r3, r0
 800429a:	2b00      	cmp	r3, #0
 800429c:	d003      	beq.n	80042a6 <OV5640_SetPixelFormat+0x292>
          {
            ret = OV5640_ERROR;
 800429e:	f04f 33ff 	mov.w	r3, #4294967295
 80042a2:	617b      	str	r3, [r7, #20]
 80042a4:	e03b      	b.n	800431e <OV5640_SetPixelFormat+0x30a>
          }
          else
          {
            tmp &= ~((1 << 4) | (1 << 3) | (1 << 2));
 80042a6:	7bfb      	ldrb	r3, [r7, #15]
 80042a8:	f023 031c 	bic.w	r3, r3, #28
 80042ac:	b2db      	uxtb	r3, r3
 80042ae:	73fb      	strb	r3, [r7, #15]
            if (OV5640_WriteReg(&OV5640->Context, OV5640_SYSREM_RESET02, &tmp, 1) != OV5640_OK)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	f103 0018 	add.w	r0, r3, #24
 80042b6:	f107 020f 	add.w	r2, r7, #15
 80042ba:	2301      	movs	r3, #1
 80042bc:	f243 0102 	movw	r1, #12290	; 0x3002
 80042c0:	f7ff fd51 	bl	8003d66 <OV5640_WriteReg>
 80042c4:	4603      	mov	r3, r0
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d003      	beq.n	80042d2 <OV5640_SetPixelFormat+0x2be>
            {
              ret = OV5640_ERROR;
 80042ca:	f04f 33ff 	mov.w	r3, #4294967295
 80042ce:	617b      	str	r3, [r7, #20]
 80042d0:	e025      	b.n	800431e <OV5640_SetPixelFormat+0x30a>
            }
            else
            {
              if (OV5640_ReadReg(&OV5640->Context, OV5640_CLOCK_ENABLE02, &tmp, 1) != OV5640_OK)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	f103 0018 	add.w	r0, r3, #24
 80042d8:	f107 020f 	add.w	r2, r7, #15
 80042dc:	2301      	movs	r3, #1
 80042de:	f243 0106 	movw	r1, #12294	; 0x3006
 80042e2:	f7ff fd29 	bl	8003d38 <OV5640_ReadReg>
 80042e6:	4603      	mov	r3, r0
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d003      	beq.n	80042f4 <OV5640_SetPixelFormat+0x2e0>
              {
                ret = OV5640_ERROR;
 80042ec:	f04f 33ff 	mov.w	r3, #4294967295
 80042f0:	617b      	str	r3, [r7, #20]
 80042f2:	e014      	b.n	800431e <OV5640_SetPixelFormat+0x30a>
              }
              else
              {
                tmp |= ((1 << 5) | (1 << 3));
 80042f4:	7bfb      	ldrb	r3, [r7, #15]
 80042f6:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 80042fa:	b2db      	uxtb	r3, r3
 80042fc:	73fb      	strb	r3, [r7, #15]
                if (OV5640_WriteReg(&OV5640->Context, OV5640_CLOCK_ENABLE02, &tmp, 1) != OV5640_OK)
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	f103 0018 	add.w	r0, r3, #24
 8004304:	f107 020f 	add.w	r2, r7, #15
 8004308:	2301      	movs	r3, #1
 800430a:	f243 0106 	movw	r1, #12294	; 0x3006
 800430e:	f7ff fd2a 	bl	8003d66 <OV5640_WriteReg>
 8004312:	4603      	mov	r3, r0
 8004314:	2b00      	cmp	r3, #0
 8004316:	d002      	beq.n	800431e <OV5640_SetPixelFormat+0x30a>
                {
                  ret = OV5640_ERROR;
 8004318:	f04f 33ff 	mov.w	r3, #4294967295
 800431c:	617b      	str	r3, [r7, #20]
          }
        }
      }
    }
  }
  return ret;
 800431e:	697b      	ldr	r3, [r7, #20]
}
 8004320:	4618      	mov	r0, r3
 8004322:	3718      	adds	r7, #24
 8004324:	46bd      	mov	sp, r7
 8004326:	bd80      	pop	{r7, pc}
 8004328:	08014e60 	.word	0x08014e60
 800432c:	08014e68 	.word	0x08014e68
 8004330:	08014e70 	.word	0x08014e70
 8004334:	08014e78 	.word	0x08014e78
 8004338:	08014e80 	.word	0x08014e80

0800433c <OV5640_SetPolarities>:

int32_t OV5640_SetPolarities(OV5640_Handle_t *OV5640, uint32_t PclkPolarity, uint32_t HrefPolarity,
                             uint32_t VsyncPolarity)
{
 800433c:	b580      	push	{r7, lr}
 800433e:	b086      	sub	sp, #24
 8004340:	af00      	add	r7, sp, #0
 8004342:	60f8      	str	r0, [r7, #12]
 8004344:	60b9      	str	r1, [r7, #8]
 8004346:	607a      	str	r2, [r7, #4]
 8004348:	603b      	str	r3, [r7, #0]
  uint8_t tmp;
  int32_t ret = OV5640_OK;
 800434a:	2300      	movs	r3, #0
 800434c:	617b      	str	r3, [r7, #20]

  if ((OV5640 == NULL) || ((PclkPolarity != OV5640_POLARITY_PCLK_LOW) && (PclkPolarity != OV5640_POLARITY_PCLK_HIGH)) ||
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	2b00      	cmp	r3, #0
 8004352:	d011      	beq.n	8004378 <OV5640_SetPolarities+0x3c>
 8004354:	68bb      	ldr	r3, [r7, #8]
 8004356:	2b00      	cmp	r3, #0
 8004358:	d002      	beq.n	8004360 <OV5640_SetPolarities+0x24>
 800435a:	68bb      	ldr	r3, [r7, #8]
 800435c:	2b01      	cmp	r3, #1
 800435e:	d10b      	bne.n	8004378 <OV5640_SetPolarities+0x3c>
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2b00      	cmp	r3, #0
 8004364:	d002      	beq.n	800436c <OV5640_SetPolarities+0x30>
      ((HrefPolarity != OV5640_POLARITY_HREF_LOW) && (HrefPolarity != OV5640_POLARITY_HREF_HIGH)) ||
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	2b01      	cmp	r3, #1
 800436a:	d105      	bne.n	8004378 <OV5640_SetPolarities+0x3c>
 800436c:	683b      	ldr	r3, [r7, #0]
 800436e:	2b01      	cmp	r3, #1
 8004370:	d006      	beq.n	8004380 <OV5640_SetPolarities+0x44>
      ((VsyncPolarity != OV5640_POLARITY_VSYNC_LOW) && (VsyncPolarity != OV5640_POLARITY_VSYNC_HIGH)))
 8004372:	683b      	ldr	r3, [r7, #0]
 8004374:	2b00      	cmp	r3, #0
 8004376:	d003      	beq.n	8004380 <OV5640_SetPolarities+0x44>
  {
    ret = OV5640_ERROR;
 8004378:	f04f 33ff 	mov.w	r3, #4294967295
 800437c:	617b      	str	r3, [r7, #20]
 800437e:	e01e      	b.n	80043be <OV5640_SetPolarities+0x82>
  }
  else
  {
    tmp = (uint8_t)(PclkPolarity << 5U) | (HrefPolarity << 1U) | VsyncPolarity;
 8004380:	68bb      	ldr	r3, [r7, #8]
 8004382:	b2db      	uxtb	r3, r3
 8004384:	015b      	lsls	r3, r3, #5
 8004386:	b2da      	uxtb	r2, r3
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	b2db      	uxtb	r3, r3
 800438c:	005b      	lsls	r3, r3, #1
 800438e:	b2db      	uxtb	r3, r3
 8004390:	4313      	orrs	r3, r2
 8004392:	b2da      	uxtb	r2, r3
 8004394:	683b      	ldr	r3, [r7, #0]
 8004396:	b2db      	uxtb	r3, r3
 8004398:	4313      	orrs	r3, r2
 800439a:	b2db      	uxtb	r3, r3
 800439c:	74fb      	strb	r3, [r7, #19]

    if (OV5640_WriteReg(&OV5640->Context, OV5640_POLARITY_CTRL, &tmp, 1) != OV5640_OK)
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	f103 0018 	add.w	r0, r3, #24
 80043a4:	f107 0213 	add.w	r2, r7, #19
 80043a8:	2301      	movs	r3, #1
 80043aa:	f244 7140 	movw	r1, #18240	; 0x4740
 80043ae:	f7ff fcda 	bl	8003d66 <OV5640_WriteReg>
 80043b2:	4603      	mov	r3, r0
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d002      	beq.n	80043be <OV5640_SetPolarities+0x82>
    {
      ret = OV5640_ERROR;
 80043b8:	f04f 33ff 	mov.w	r3, #4294967295
 80043bc:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 80043be:	697b      	ldr	r3, [r7, #20]
}
 80043c0:	4618      	mov	r0, r3
 80043c2:	3718      	adds	r7, #24
 80043c4:	46bd      	mov	sp, r7
 80043c6:	bd80      	pop	{r7, pc}

080043c8 <OV5640_ReadID>:

int32_t OV5640_ReadID(OV5640_Handle_t *OV5640, uint32_t *Id)
{
 80043c8:	b580      	push	{r7, lr}
 80043ca:	b084      	sub	sp, #16
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	6078      	str	r0, [r7, #4]
 80043d0:	6039      	str	r1, [r7, #0]

  /* Initialize I2C */
  //OV5640->IO.Init();

  /* Prepare the camera to be configured */
  tmp = 0x80;
 80043d2:	2380      	movs	r3, #128	; 0x80
 80043d4:	72fb      	strb	r3, [r7, #11]
  if (OV5640_WriteReg(&OV5640->Context, OV5640_SYSTEM_CTROL0, &tmp, 1) != OV5640_OK)
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	f103 0018 	add.w	r0, r3, #24
 80043dc:	f107 020b 	add.w	r2, r7, #11
 80043e0:	2301      	movs	r3, #1
 80043e2:	f243 0108 	movw	r1, #12296	; 0x3008
 80043e6:	f7ff fcbe 	bl	8003d66 <OV5640_WriteReg>
 80043ea:	4603      	mov	r3, r0
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d003      	beq.n	80043f8 <OV5640_ReadID+0x30>
  {
    ret = OV5640_ERROR;
 80043f0:	f04f 33ff 	mov.w	r3, #4294967295
 80043f4:	60fb      	str	r3, [r7, #12]
 80043f6:	e032      	b.n	800445e <OV5640_ReadID+0x96>
  }
  else
  {
    (void)OV5640_Delay(OV5640, 500);
 80043f8:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80043fc:	6878      	ldr	r0, [r7, #4]
 80043fe:	f7ff fcfb 	bl	8003df8 <OV5640_Delay>

    if (OV5640_ReadReg(&OV5640->Context, OV5640_CHIP_ID_HIGH_BYTE, &tmp, 1) != OV5640_OK)
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	f103 0018 	add.w	r0, r3, #24
 8004408:	f107 020b 	add.w	r2, r7, #11
 800440c:	2301      	movs	r3, #1
 800440e:	f243 010a 	movw	r1, #12298	; 0x300a
 8004412:	f7ff fc91 	bl	8003d38 <OV5640_ReadReg>
 8004416:	4603      	mov	r3, r0
 8004418:	2b00      	cmp	r3, #0
 800441a:	d003      	beq.n	8004424 <OV5640_ReadID+0x5c>
    {
      ret = OV5640_ERROR;
 800441c:	f04f 33ff 	mov.w	r3, #4294967295
 8004420:	60fb      	str	r3, [r7, #12]
 8004422:	e01c      	b.n	800445e <OV5640_ReadID+0x96>
    }
    else
    {
      *Id = (uint32_t)tmp << 8U;
 8004424:	7afb      	ldrb	r3, [r7, #11]
 8004426:	021a      	lsls	r2, r3, #8
 8004428:	683b      	ldr	r3, [r7, #0]
 800442a:	601a      	str	r2, [r3, #0]
      if (OV5640_ReadReg(&OV5640->Context, OV5640_CHIP_ID_LOW_BYTE, &tmp, 1) != OV5640_OK)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	f103 0018 	add.w	r0, r3, #24
 8004432:	f107 020b 	add.w	r2, r7, #11
 8004436:	2301      	movs	r3, #1
 8004438:	f243 010b 	movw	r1, #12299	; 0x300b
 800443c:	f7ff fc7c 	bl	8003d38 <OV5640_ReadReg>
 8004440:	4603      	mov	r3, r0
 8004442:	2b00      	cmp	r3, #0
 8004444:	d003      	beq.n	800444e <OV5640_ReadID+0x86>
      {
        ret = OV5640_ERROR;
 8004446:	f04f 33ff 	mov.w	r3, #4294967295
 800444a:	60fb      	str	r3, [r7, #12]
 800444c:	e007      	b.n	800445e <OV5640_ReadID+0x96>
      }
      else
      {
        *Id |= tmp;
 800444e:	683b      	ldr	r3, [r7, #0]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	7afa      	ldrb	r2, [r7, #11]
 8004454:	431a      	orrs	r2, r3
 8004456:	683b      	ldr	r3, [r7, #0]
 8004458:	601a      	str	r2, [r3, #0]
        ret = OV5640_OK;
 800445a:	2300      	movs	r3, #0
 800445c:	60fb      	str	r3, [r7, #12]
      }
    }
  }

  /* Component status */
  return ret;
 800445e:	68fb      	ldr	r3, [r7, #12]
}
 8004460:	4618      	mov	r0, r3
 8004462:	3710      	adds	r7, #16
 8004464:	46bd      	mov	sp, r7
 8004466:	bd80      	pop	{r7, pc}

08004468 <VEML6030_Init>:

static int32_t VEML6030_ReadRegWrapper(void *Handle, uint8_t Reg, uint8_t *Buffer, uint8_t Length);
static int32_t VEML6030_WriteRegWrapper(void *Handle, uint8_t Reg, uint8_t *Buffer, uint8_t Length);

int32_t VEML6030_Init(VEML6030_Handle_t *Handle, VEML_InitSettings_t Settings, const VEML6030_IO_t *IO)
{
 8004468:	b5b0      	push	{r4, r5, r7, lr}
 800446a:	b086      	sub	sp, #24
 800446c:	af00      	add	r7, sp, #0
 800446e:	60f8      	str	r0, [r7, #12]
 8004470:	60b9      	str	r1, [r7, #8]
 8004472:	607a      	str	r2, [r7, #4]
	int32_t ret = VEML6030_Ok;
 8004474:	2300      	movs	r3, #0
 8004476:	617b      	str	r3, [r7, #20]
	if(Handle == NULL)
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	2b00      	cmp	r3, #0
 800447c:	d102      	bne.n	8004484 <VEML6030_Init+0x1c>
	{
        return VEML6030_HandleError;
 800447e:	f04f 33ff 	mov.w	r3, #4294967295
 8004482:	e081      	b.n	8004588 <VEML6030_Init+0x120>
	}

	if(Settings.PowerSavingMode > 0x07)
 8004484:	7abb      	ldrb	r3, [r7, #10]
 8004486:	2b07      	cmp	r3, #7
 8004488:	d902      	bls.n	8004490 <VEML6030_Init+0x28>
	{
        return VEML6030_PSM_Err;
 800448a:	f06f 0303 	mvn.w	r3, #3
 800448e:	e07b      	b.n	8004588 <VEML6030_Init+0x120>
	}

	if(Handle->Status != VEML6030_STATUS_INITIALIZED)
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004496:	2b01      	cmp	r3, #1
 8004498:	d075      	beq.n	8004586 <VEML6030_Init+0x11e>
	{
		if(IO->Read == NULL || IO->Write == NULL)
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	68db      	ldr	r3, [r3, #12]
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d003      	beq.n	80044aa <VEML6030_Init+0x42>
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	689b      	ldr	r3, [r3, #8]
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d102      	bne.n	80044b0 <VEML6030_Init+0x48>
		{
			return VEML6030_IOError;
 80044aa:	f06f 0301 	mvn.w	r3, #1
 80044ae:	e06b      	b.n	8004588 <VEML6030_Init+0x120>
		}

        uint16_t ALS_IT = (Settings.ALSConfig >> 6) & 0xF;
 80044b0:	893b      	ldrh	r3, [r7, #8]
 80044b2:	099b      	lsrs	r3, r3, #6
 80044b4:	b29b      	uxth	r3, r3
 80044b6:	f003 030f 	and.w	r3, r3, #15
 80044ba:	827b      	strh	r3, [r7, #18]
        uint16_t ALS_GAIN = (Settings.ALSConfig >> 11) & 0x3;
 80044bc:	893b      	ldrh	r3, [r7, #8]
 80044be:	0adb      	lsrs	r3, r3, #11
 80044c0:	b29b      	uxth	r3, r3
 80044c2:	f003 0303 	and.w	r3, r3, #3
 80044c6:	823b      	strh	r3, [r7, #16]
        if(ALS_GAIN > 3 || (ALS_IT != 0 && ALS_IT != 1 && ALS_IT != 2 && ALS_IT != 3 && ALS_IT != 8 && ALS_IT != 0xC))
 80044c8:	8a3b      	ldrh	r3, [r7, #16]
 80044ca:	2b03      	cmp	r3, #3
 80044cc:	d811      	bhi.n	80044f2 <VEML6030_Init+0x8a>
 80044ce:	8a7b      	ldrh	r3, [r7, #18]
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d011      	beq.n	80044f8 <VEML6030_Init+0x90>
 80044d4:	8a7b      	ldrh	r3, [r7, #18]
 80044d6:	2b01      	cmp	r3, #1
 80044d8:	d00e      	beq.n	80044f8 <VEML6030_Init+0x90>
 80044da:	8a7b      	ldrh	r3, [r7, #18]
 80044dc:	2b02      	cmp	r3, #2
 80044de:	d00b      	beq.n	80044f8 <VEML6030_Init+0x90>
 80044e0:	8a7b      	ldrh	r3, [r7, #18]
 80044e2:	2b03      	cmp	r3, #3
 80044e4:	d008      	beq.n	80044f8 <VEML6030_Init+0x90>
 80044e6:	8a7b      	ldrh	r3, [r7, #18]
 80044e8:	2b08      	cmp	r3, #8
 80044ea:	d005      	beq.n	80044f8 <VEML6030_Init+0x90>
 80044ec:	8a7b      	ldrh	r3, [r7, #18]
 80044ee:	2b0c      	cmp	r3, #12
 80044f0:	d002      	beq.n	80044f8 <VEML6030_Init+0x90>
        {
        	return VEML6030_ParamError;
 80044f2:	f06f 0304 	mvn.w	r3, #4
 80044f6:	e047      	b.n	8004588 <VEML6030_Init+0x120>
        }
		Handle->Resolution = ResolutionLookUpTable[ALS_IT][ALS_GAIN];
 80044f8:	8a7a      	ldrh	r2, [r7, #18]
 80044fa:	8a3b      	ldrh	r3, [r7, #16]
 80044fc:	4924      	ldr	r1, [pc, #144]	; (8004590 <VEML6030_Init+0x128>)
 80044fe:	0092      	lsls	r2, r2, #2
 8004500:	4413      	add	r3, r2
 8004502:	009b      	lsls	r3, r3, #2
 8004504:	440b      	add	r3, r1
 8004506:	681a      	ldr	r2, [r3, #0]
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	629a      	str	r2, [r3, #40]	; 0x28

		Handle->Context.Handle = Handle;
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	68fa      	ldr	r2, [r7, #12]
 8004510:	619a      	str	r2, [r3, #24]
		Handle->Context.Write = VEML6030_WriteRegWrapper;
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	4a1f      	ldr	r2, [pc, #124]	; (8004594 <VEML6030_Init+0x12c>)
 8004516:	61da      	str	r2, [r3, #28]
		Handle->Context.Read = VEML6030_ReadRegWrapper;
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	4a1f      	ldr	r2, [pc, #124]	; (8004598 <VEML6030_Init+0x130>)
 800451c:	621a      	str	r2, [r3, #32]
		Handle->IO = *IO;
 800451e:	68fa      	ldr	r2, [r7, #12]
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	4614      	mov	r4, r2
 8004524:	461d      	mov	r5, r3
 8004526:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004528:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800452a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800452e:	e884 0003 	stmia.w	r4, {r0, r1}
		if(Handle->IO.Init != NULL)
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	2b00      	cmp	r3, #0
 8004538:	d002      	beq.n	8004540 <VEML6030_Init+0xd8>
		{
            Handle->IO.Init();
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	4798      	blx	r3
		}

		ret = VEML6030_WriteReg(&Handle->Context, VEML6030_REG_ALS_CONF, (uint8_t*)&Settings.ALSConfig, 2);
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	f103 0018 	add.w	r0, r3, #24
 8004546:	f107 0208 	add.w	r2, r7, #8
 800454a:	2302      	movs	r3, #2
 800454c:	2100      	movs	r1, #0
 800454e:	f000 f90d 	bl	800476c <VEML6030_WriteReg>
 8004552:	6178      	str	r0, [r7, #20]
		if(ret != VEML6030_Ok)
 8004554:	697b      	ldr	r3, [r7, #20]
 8004556:	2b00      	cmp	r3, #0
 8004558:	d001      	beq.n	800455e <VEML6030_Init+0xf6>
		{
			return ret;
 800455a:	697b      	ldr	r3, [r7, #20]
 800455c:	e014      	b.n	8004588 <VEML6030_Init+0x120>
		}

		ret = VEML6030_WriteReg(&Handle->Context, VEML6030_REG_POWERSAVING, (uint8_t*)&Settings.PowerSavingMode, 2);
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	f103 0018 	add.w	r0, r3, #24
 8004564:	f107 0308 	add.w	r3, r7, #8
 8004568:	1c9a      	adds	r2, r3, #2
 800456a:	2302      	movs	r3, #2
 800456c:	2103      	movs	r1, #3
 800456e:	f000 f8fd 	bl	800476c <VEML6030_WriteReg>
 8004572:	6178      	str	r0, [r7, #20]
		if(ret != VEML6030_Ok)
 8004574:	697b      	ldr	r3, [r7, #20]
 8004576:	2b00      	cmp	r3, #0
 8004578:	d001      	beq.n	800457e <VEML6030_Init+0x116>
		{
			return ret;
 800457a:	697b      	ldr	r3, [r7, #20]
 800457c:	e004      	b.n	8004588 <VEML6030_Init+0x120>
		}
		Handle->Status = VEML6030_STATUS_INITIALIZED;
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	2201      	movs	r2, #1
 8004582:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	}
	return VEML6030_Ok;
 8004586:	2300      	movs	r3, #0
}
 8004588:	4618      	mov	r0, r3
 800458a:	3718      	adds	r7, #24
 800458c:	46bd      	mov	sp, r7
 800458e:	bdb0      	pop	{r4, r5, r7, pc}
 8004590:	08014e88 	.word	0x08014e88
 8004594:	08004639 	.word	0x08004639
 8004598:	080045f7 	.word	0x080045f7

0800459c <VEML6030_ReadLight>:

int32_t VEML6030_ReadLight(VEML6030_Handle_t *Handle, float *Light)
{
 800459c:	b580      	push	{r7, lr}
 800459e:	b084      	sub	sp, #16
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	6078      	str	r0, [r7, #4]
 80045a4:	6039      	str	r1, [r7, #0]
	if(Handle == NULL)
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d102      	bne.n	80045b2 <VEML6030_ReadLight+0x16>
	{
		return VEML6030_HandleError;
 80045ac:	f04f 33ff 	mov.w	r3, #4294967295
 80045b0:	e01d      	b.n	80045ee <VEML6030_ReadLight+0x52>
	}

	if(Handle->Status != VEML6030_STATUS_INITIALIZED)
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80045b8:	2b01      	cmp	r3, #1
 80045ba:	d002      	beq.n	80045c2 <VEML6030_ReadLight+0x26>
	{
		return VEML6030_InitError;
 80045bc:	f06f 0302 	mvn.w	r3, #2
 80045c0:	e015      	b.n	80045ee <VEML6030_ReadLight+0x52>
	}
	uint16_t Buffer;
	int32_t ret = VEML6030_ReadReg(&Handle->Context, VEML6030_REG_ALS, (uint8_t*)&Buffer, 2);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	f103 0018 	add.w	r0, r3, #24
 80045c8:	f107 020a 	add.w	r2, r7, #10
 80045cc:	2302      	movs	r3, #2
 80045ce:	2104      	movs	r1, #4
 80045d0:	f000 f8a8 	bl	8004724 <VEML6030_ReadReg>
 80045d4:	60f8      	str	r0, [r7, #12]
	if(ret != VEML6030_Ok)
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d001      	beq.n	80045e0 <VEML6030_ReadLight+0x44>
	{
		return ret;
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	e006      	b.n	80045ee <VEML6030_ReadLight+0x52>
	}
	ConvertLight(Handle,Buffer,Light);
 80045e0:	897b      	ldrh	r3, [r7, #10]
 80045e2:	683a      	ldr	r2, [r7, #0]
 80045e4:	4619      	mov	r1, r3
 80045e6:	6878      	ldr	r0, [r7, #4]
 80045e8:	f000 f847 	bl	800467a <ConvertLight>
	return VEML6030_Ok;
 80045ec:	2300      	movs	r3, #0
}
 80045ee:	4618      	mov	r0, r3
 80045f0:	3710      	adds	r7, #16
 80045f2:	46bd      	mov	sp, r7
 80045f4:	bd80      	pop	{r7, pc}

080045f6 <VEML6030_ReadRegWrapper>:
	return VEML6030_Ok;
}


static int32_t VEML6030_ReadRegWrapper(void *Handle, uint8_t Reg, uint8_t *Buffer, uint8_t Length)
{
 80045f6:	b580      	push	{r7, lr}
 80045f8:	b086      	sub	sp, #24
 80045fa:	af00      	add	r7, sp, #0
 80045fc:	60f8      	str	r0, [r7, #12]
 80045fe:	607a      	str	r2, [r7, #4]
 8004600:	461a      	mov	r2, r3
 8004602:	460b      	mov	r3, r1
 8004604:	72fb      	strb	r3, [r7, #11]
 8004606:	4613      	mov	r3, r2
 8004608:	72bb      	strb	r3, [r7, #10]
	VEML6030_Handle_t *Dev = Handle;
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	617b      	str	r3, [r7, #20]
	int32_t ret = VEML6030_Ok;
 800460e:	2300      	movs	r3, #0
 8004610:	613b      	str	r3, [r7, #16]
	if(Dev->IO.Read != NULL)
 8004612:	697b      	ldr	r3, [r7, #20]
 8004614:	68db      	ldr	r3, [r3, #12]
 8004616:	2b00      	cmp	r3, #0
 8004618:	d008      	beq.n	800462c <VEML6030_ReadRegWrapper+0x36>
	{
        ret = Dev->IO.Read(Reg,Buffer,Length);
 800461a:	697b      	ldr	r3, [r7, #20]
 800461c:	68db      	ldr	r3, [r3, #12]
 800461e:	7aba      	ldrb	r2, [r7, #10]
 8004620:	7af8      	ldrb	r0, [r7, #11]
 8004622:	6879      	ldr	r1, [r7, #4]
 8004624:	4798      	blx	r3
 8004626:	6138      	str	r0, [r7, #16]
        return ret;
 8004628:	693b      	ldr	r3, [r7, #16]
 800462a:	e001      	b.n	8004630 <VEML6030_ReadRegWrapper+0x3a>
	}
    return VEML6030_IOError;
 800462c:	f06f 0301 	mvn.w	r3, #1
}
 8004630:	4618      	mov	r0, r3
 8004632:	3718      	adds	r7, #24
 8004634:	46bd      	mov	sp, r7
 8004636:	bd80      	pop	{r7, pc}

08004638 <VEML6030_WriteRegWrapper>:

static int32_t VEML6030_WriteRegWrapper(void *Handle, uint8_t Reg, uint8_t *Buffer, uint8_t Length)
{
 8004638:	b580      	push	{r7, lr}
 800463a:	b086      	sub	sp, #24
 800463c:	af00      	add	r7, sp, #0
 800463e:	60f8      	str	r0, [r7, #12]
 8004640:	607a      	str	r2, [r7, #4]
 8004642:	461a      	mov	r2, r3
 8004644:	460b      	mov	r3, r1
 8004646:	72fb      	strb	r3, [r7, #11]
 8004648:	4613      	mov	r3, r2
 800464a:	72bb      	strb	r3, [r7, #10]
	VEML6030_Handle_t *Dev = Handle;
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	617b      	str	r3, [r7, #20]
	int32_t ret = VEML6030_Ok;
 8004650:	2300      	movs	r3, #0
 8004652:	613b      	str	r3, [r7, #16]
	if(Dev->IO.Write != NULL)
 8004654:	697b      	ldr	r3, [r7, #20]
 8004656:	689b      	ldr	r3, [r3, #8]
 8004658:	2b00      	cmp	r3, #0
 800465a:	d008      	beq.n	800466e <VEML6030_WriteRegWrapper+0x36>
	{
        ret = Dev->IO.Write(Reg,Buffer,Length);
 800465c:	697b      	ldr	r3, [r7, #20]
 800465e:	689b      	ldr	r3, [r3, #8]
 8004660:	7aba      	ldrb	r2, [r7, #10]
 8004662:	7af8      	ldrb	r0, [r7, #11]
 8004664:	6879      	ldr	r1, [r7, #4]
 8004666:	4798      	blx	r3
 8004668:	6138      	str	r0, [r7, #16]
        return ret;
 800466a:	693b      	ldr	r3, [r7, #16]
 800466c:	e001      	b.n	8004672 <VEML6030_WriteRegWrapper+0x3a>
	}
    return VEML6030_IOError;
 800466e:	f06f 0301 	mvn.w	r3, #1
}
 8004672:	4618      	mov	r0, r3
 8004674:	3718      	adds	r7, #24
 8004676:	46bd      	mov	sp, r7
 8004678:	bd80      	pop	{r7, pc}

0800467a <ConvertLight>:

static void ConvertLight(VEML6030_Handle_t *Handle, uint16_t Buffer, float *Light)
{
 800467a:	b480      	push	{r7}
 800467c:	b085      	sub	sp, #20
 800467e:	af00      	add	r7, sp, #0
 8004680:	60f8      	str	r0, [r7, #12]
 8004682:	460b      	mov	r3, r1
 8004684:	607a      	str	r2, [r7, #4]
 8004686:	817b      	strh	r3, [r7, #10]
	*Light = Buffer * Handle->Resolution;
 8004688:	897b      	ldrh	r3, [r7, #10]
 800468a:	ee07 3a90 	vmov	s15, r3
 800468e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8004698:	ee67 7a27 	vmul.f32	s15, s14, s15
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	edc3 7a00 	vstr	s15, [r3]
}
 80046a2:	bf00      	nop
 80046a4:	3714      	adds	r7, #20
 80046a6:	46bd      	mov	sp, r7
 80046a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ac:	4770      	bx	lr

080046ae <VEML6030_ValidateParams>:
#include <stdint.h>
#include <stddef.h>


static int32_t VEML6030_ValidateParams(VEML6030_Context_t *Context, uint8_t Reg, uint8_t *Buffer, uint8_t Length)
{
 80046ae:	b480      	push	{r7}
 80046b0:	b087      	sub	sp, #28
 80046b2:	af00      	add	r7, sp, #0
 80046b4:	60f8      	str	r0, [r7, #12]
 80046b6:	607a      	str	r2, [r7, #4]
 80046b8:	461a      	mov	r2, r3
 80046ba:	460b      	mov	r3, r1
 80046bc:	72fb      	strb	r3, [r7, #11]
 80046be:	4613      	mov	r3, r2
 80046c0:	72bb      	strb	r3, [r7, #10]
	int32_t ret = VEML6030_REG_OK;
 80046c2:	2300      	movs	r3, #0
 80046c4:	617b      	str	r3, [r7, #20]
    if(Context == NULL || Context->Read == NULL || Context->Write == NULL || Context->Handle == NULL)
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d00b      	beq.n	80046e4 <VEML6030_ValidateParams+0x36>
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	689b      	ldr	r3, [r3, #8]
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d007      	beq.n	80046e4 <VEML6030_ValidateParams+0x36>
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	685b      	ldr	r3, [r3, #4]
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d003      	beq.n	80046e4 <VEML6030_ValidateParams+0x36>
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d103      	bne.n	80046ec <VEML6030_ValidateParams+0x3e>
    {
    	ret |= VEML6030_REG_CONTEXT_ERR;
 80046e4:	697b      	ldr	r3, [r7, #20]
 80046e6:	f043 4308 	orr.w	r3, r3, #2281701376	; 0x88000000
 80046ea:	617b      	str	r3, [r7, #20]
    }

    if(Reg > VEML6030_REG_ALS_INT)
 80046ec:	7afb      	ldrb	r3, [r7, #11]
 80046ee:	2b06      	cmp	r3, #6
 80046f0:	d903      	bls.n	80046fa <VEML6030_ValidateParams+0x4c>
    {
    	ret |= VEML6030_REG_ADDR_ERR;
 80046f2:	697b      	ldr	r3, [r7, #20]
 80046f4:	f043 4310 	orr.w	r3, r3, #2415919104	; 0x90000000
 80046f8:	617b      	str	r3, [r7, #20]
    }

    if(Buffer == NULL)
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d103      	bne.n	8004708 <VEML6030_ValidateParams+0x5a>
    {
    	ret |= VEML6030_REG_BUFFER_ERR;
 8004700:	697b      	ldr	r3, [r7, #20]
 8004702:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004706:	617b      	str	r3, [r7, #20]
    }

    if(Length == 0)
 8004708:	7abb      	ldrb	r3, [r7, #10]
 800470a:	2b00      	cmp	r3, #0
 800470c:	d103      	bne.n	8004716 <VEML6030_ValidateParams+0x68>
    {
       ret |= VEML6030_REG_LENGTH_ERR;
 800470e:	697b      	ldr	r3, [r7, #20]
 8004710:	f043 4320 	orr.w	r3, r3, #2684354560	; 0xa0000000
 8004714:	617b      	str	r3, [r7, #20]
    }

    return ret;
 8004716:	697b      	ldr	r3, [r7, #20]
}
 8004718:	4618      	mov	r0, r3
 800471a:	371c      	adds	r7, #28
 800471c:	46bd      	mov	sp, r7
 800471e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004722:	4770      	bx	lr

08004724 <VEML6030_ReadReg>:

int32_t VEML6030_ReadReg(VEML6030_Context_t *Context,uint8_t Reg, uint8_t *Buffer, uint8_t Length)
{
 8004724:	b590      	push	{r4, r7, lr}
 8004726:	b087      	sub	sp, #28
 8004728:	af00      	add	r7, sp, #0
 800472a:	60f8      	str	r0, [r7, #12]
 800472c:	607a      	str	r2, [r7, #4]
 800472e:	461a      	mov	r2, r3
 8004730:	460b      	mov	r3, r1
 8004732:	72fb      	strb	r3, [r7, #11]
 8004734:	4613      	mov	r3, r2
 8004736:	72bb      	strb	r3, [r7, #10]
    int32_t ret = VEML6030_ValidateParams(Context,Reg,Buffer,Length);
 8004738:	7abb      	ldrb	r3, [r7, #10]
 800473a:	7af9      	ldrb	r1, [r7, #11]
 800473c:	687a      	ldr	r2, [r7, #4]
 800473e:	68f8      	ldr	r0, [r7, #12]
 8004740:	f7ff ffb5 	bl	80046ae <VEML6030_ValidateParams>
 8004744:	6178      	str	r0, [r7, #20]
    if(ret != VEML6030_REG_OK)
 8004746:	697b      	ldr	r3, [r7, #20]
 8004748:	2b00      	cmp	r3, #0
 800474a:	d001      	beq.n	8004750 <VEML6030_ReadReg+0x2c>
    {
    	return ret;
 800474c:	697b      	ldr	r3, [r7, #20]
 800474e:	e009      	b.n	8004764 <VEML6030_ReadReg+0x40>
    }
    ret = Context->Read(Context->Handle,Reg,Buffer,Length);
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	689c      	ldr	r4, [r3, #8]
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	6818      	ldr	r0, [r3, #0]
 8004758:	7abb      	ldrb	r3, [r7, #10]
 800475a:	7af9      	ldrb	r1, [r7, #11]
 800475c:	687a      	ldr	r2, [r7, #4]
 800475e:	47a0      	blx	r4
 8004760:	6178      	str	r0, [r7, #20]
    return ret;
 8004762:	697b      	ldr	r3, [r7, #20]
}
 8004764:	4618      	mov	r0, r3
 8004766:	371c      	adds	r7, #28
 8004768:	46bd      	mov	sp, r7
 800476a:	bd90      	pop	{r4, r7, pc}

0800476c <VEML6030_WriteReg>:

int32_t VEML6030_WriteReg(VEML6030_Context_t *Context,uint8_t Reg, uint8_t *Buffer, uint8_t Length)
{
 800476c:	b590      	push	{r4, r7, lr}
 800476e:	b087      	sub	sp, #28
 8004770:	af00      	add	r7, sp, #0
 8004772:	60f8      	str	r0, [r7, #12]
 8004774:	607a      	str	r2, [r7, #4]
 8004776:	461a      	mov	r2, r3
 8004778:	460b      	mov	r3, r1
 800477a:	72fb      	strb	r3, [r7, #11]
 800477c:	4613      	mov	r3, r2
 800477e:	72bb      	strb	r3, [r7, #10]
    int32_t ret = VEML6030_ValidateParams(Context,Reg,Buffer,Length);
 8004780:	7abb      	ldrb	r3, [r7, #10]
 8004782:	7af9      	ldrb	r1, [r7, #11]
 8004784:	687a      	ldr	r2, [r7, #4]
 8004786:	68f8      	ldr	r0, [r7, #12]
 8004788:	f7ff ff91 	bl	80046ae <VEML6030_ValidateParams>
 800478c:	6178      	str	r0, [r7, #20]
    if(ret != VEML6030_REG_OK)
 800478e:	697b      	ldr	r3, [r7, #20]
 8004790:	2b00      	cmp	r3, #0
 8004792:	d001      	beq.n	8004798 <VEML6030_WriteReg+0x2c>
    {
    	return ret;
 8004794:	697b      	ldr	r3, [r7, #20]
 8004796:	e009      	b.n	80047ac <VEML6030_WriteReg+0x40>
    }
    ret = Context->Write(Context->Handle,Reg,Buffer,Length);
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	685c      	ldr	r4, [r3, #4]
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	6818      	ldr	r0, [r3, #0]
 80047a0:	7abb      	ldrb	r3, [r7, #10]
 80047a2:	7af9      	ldrb	r1, [r7, #11]
 80047a4:	687a      	ldr	r2, [r7, #4]
 80047a6:	47a0      	blx	r4
 80047a8:	6178      	str	r0, [r7, #20]
    return ret;
 80047aa:	697b      	ldr	r3, [r7, #20]
}
 80047ac:	4618      	mov	r0, r3
 80047ae:	371c      	adds	r7, #28
 80047b0:	46bd      	mov	sp, r7
 80047b2:	bd90      	pop	{r4, r7, pc}

080047b4 <App_ThreadX_Init>:
  * @brief  Application ThreadX Initialization.
  * @param memory_ptr: memory pointer
  * @retval int
  */
UINT App_ThreadX_Init(VOID *memory_ptr)
{
 80047b4:	b580      	push	{r7, lr}
 80047b6:	b08e      	sub	sp, #56	; 0x38
 80047b8:	af08      	add	r7, sp, #32
 80047ba:	6078      	str	r0, [r7, #4]
  UINT ret = TX_SUCCESS;
 80047bc:	2300      	movs	r3, #0
 80047be:	617b      	str	r3, [r7, #20]
  TX_BYTE_POOL *byte_pool = (TX_BYTE_POOL*)memory_ptr;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	613b      	str	r3, [r7, #16]

   /* USER CODE BEGIN App_ThreadX_MEM_POOL */
  (void)byte_pool;
  UCHAR *Ptr = byte_pool->tx_byte_pool_start;
 80047c4:	693b      	ldr	r3, [r7, #16]
 80047c6:	699b      	ldr	r3, [r3, #24]
 80047c8:	60fb      	str	r3, [r7, #12]

  /* USER CODE BEGIN App_ThreadX_Init */

  //LED Threads

  if(tx_byte_allocate(byte_pool, (VOID **) &Ptr, LED_STACK_SIZE, TX_NO_WAIT) != TX_SUCCESS)
 80047ca:	f107 010c 	add.w	r1, r7, #12
 80047ce:	2300      	movs	r3, #0
 80047d0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80047d4:	6938      	ldr	r0, [r7, #16]
 80047d6:	f00e fe61 	bl	801349c <_txe_byte_allocate>
 80047da:	4603      	mov	r3, r0
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d001      	beq.n	80047e4 <App_ThreadX_Init+0x30>
  {
	  return TX_POOL_ERROR;
 80047e0:	2302      	movs	r3, #2
 80047e2:	e167      	b.n	8004ab4 <App_ThreadX_Init+0x300>
  }

  ret = tx_thread_create(&LED_Red_Toggle,           //Thread Ptr
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	22b0      	movs	r2, #176	; 0xb0
 80047e8:	9206      	str	r2, [sp, #24]
 80047ea:	2201      	movs	r2, #1
 80047ec:	9205      	str	r2, [sp, #20]
 80047ee:	2201      	movs	r2, #1
 80047f0:	9204      	str	r2, [sp, #16]
 80047f2:	220f      	movs	r2, #15
 80047f4:	9203      	str	r2, [sp, #12]
 80047f6:	220f      	movs	r2, #15
 80047f8:	9202      	str	r2, [sp, #8]
 80047fa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80047fe:	9201      	str	r2, [sp, #4]
 8004800:	9300      	str	r3, [sp, #0]
 8004802:	2300      	movs	r3, #0
 8004804:	4aad      	ldr	r2, [pc, #692]	; (8004abc <App_ThreadX_Init+0x308>)
 8004806:	49ae      	ldr	r1, [pc, #696]	; (8004ac0 <App_ThreadX_Init+0x30c>)
 8004808:	48ae      	ldr	r0, [pc, #696]	; (8004ac4 <App_ThreadX_Init+0x310>)
 800480a:	f00f f983 	bl	8013b14 <_txe_thread_create>
 800480e:	6178      	str	r0, [r7, #20]
					LED_STACK_SIZE,     //Stack Size
					15,                    //Priority
					15,                    //Preempt Threshold
					1,                     //Time Slize
					TX_AUTO_START);        //Auto Start or Auto Activate
  ret = tx_byte_allocate(byte_pool, (VOID **) &Ptr, LED_STACK_SIZE, TX_NO_WAIT);
 8004810:	f107 010c 	add.w	r1, r7, #12
 8004814:	2300      	movs	r3, #0
 8004816:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800481a:	6938      	ldr	r0, [r7, #16]
 800481c:	f00e fe3e 	bl	801349c <_txe_byte_allocate>
 8004820:	6178      	str	r0, [r7, #20]

  if(ret != TX_SUCCESS)
 8004822:	697b      	ldr	r3, [r7, #20]
 8004824:	2b00      	cmp	r3, #0
 8004826:	d001      	beq.n	800482c <App_ThreadX_Init+0x78>
  {
	  return TX_POOL_ERROR;
 8004828:	2302      	movs	r3, #2
 800482a:	e143      	b.n	8004ab4 <App_ThreadX_Init+0x300>
  }
  ret = tx_thread_create(&LED_Green_Toggle,           //Thread Ptr
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	22b0      	movs	r2, #176	; 0xb0
 8004830:	9206      	str	r2, [sp, #24]
 8004832:	2201      	movs	r2, #1
 8004834:	9205      	str	r2, [sp, #20]
 8004836:	2201      	movs	r2, #1
 8004838:	9204      	str	r2, [sp, #16]
 800483a:	220f      	movs	r2, #15
 800483c:	9203      	str	r2, [sp, #12]
 800483e:	220f      	movs	r2, #15
 8004840:	9202      	str	r2, [sp, #8]
 8004842:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004846:	9201      	str	r2, [sp, #4]
 8004848:	9300      	str	r3, [sp, #0]
 800484a:	2300      	movs	r3, #0
 800484c:	4a9e      	ldr	r2, [pc, #632]	; (8004ac8 <App_ThreadX_Init+0x314>)
 800484e:	499f      	ldr	r1, [pc, #636]	; (8004acc <App_ThreadX_Init+0x318>)
 8004850:	489f      	ldr	r0, [pc, #636]	; (8004ad0 <App_ThreadX_Init+0x31c>)
 8004852:	f00f f95f 	bl	8013b14 <_txe_thread_create>
 8004856:	6178      	str	r0, [r7, #20]
					15,                    //Preempt Threshold
					1,                     //Time Slize
					TX_AUTO_START);        //Auto Start or Auto Activate

  //Motion
  if(tx_byte_allocate(byte_pool, (VOID **) &Ptr, MOT_THREAD_STACK_SIZE, TX_NO_WAIT) != TX_SUCCESS)
 8004858:	f107 010c 	add.w	r1, r7, #12
 800485c:	2300      	movs	r3, #0
 800485e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004862:	6938      	ldr	r0, [r7, #16]
 8004864:	f00e fe1a 	bl	801349c <_txe_byte_allocate>
 8004868:	4603      	mov	r3, r0
 800486a:	2b00      	cmp	r3, #0
 800486c:	d001      	beq.n	8004872 <App_ThreadX_Init+0xbe>
  {
	  return TX_POOL_ERROR;
 800486e:	2302      	movs	r3, #2
 8004870:	e120      	b.n	8004ab4 <App_ThreadX_Init+0x300>
  }

  ret = tx_thread_create(&Read_MotionThreadPtr,     //Thread Ptr
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	22b0      	movs	r2, #176	; 0xb0
 8004876:	9206      	str	r2, [sp, #24]
 8004878:	2201      	movs	r2, #1
 800487a:	9205      	str	r2, [sp, #20]
 800487c:	2205      	movs	r2, #5
 800487e:	9204      	str	r2, [sp, #16]
 8004880:	220a      	movs	r2, #10
 8004882:	9203      	str	r2, [sp, #12]
 8004884:	220a      	movs	r2, #10
 8004886:	9202      	str	r2, [sp, #8]
 8004888:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800488c:	9201      	str	r2, [sp, #4]
 800488e:	9300      	str	r3, [sp, #0]
 8004890:	2300      	movs	r3, #0
 8004892:	4a90      	ldr	r2, [pc, #576]	; (8004ad4 <App_ThreadX_Init+0x320>)
 8004894:	4990      	ldr	r1, [pc, #576]	; (8004ad8 <App_ThreadX_Init+0x324>)
 8004896:	4891      	ldr	r0, [pc, #580]	; (8004adc <App_ThreadX_Init+0x328>)
 8004898:	f00f f93c 	bl	8013b14 <_txe_thread_create>
 800489c:	6178      	str	r0, [r7, #20]
					10,                    //Preempt Threshold
				    5,                     //Time Slize
					TX_AUTO_START);        //Auto Start or Auto Activate

  //Temp
  if(tx_byte_allocate(byte_pool, (VOID **) &Ptr, TEMP_THREAD_STACK_SIZE, TX_NO_WAIT) != TX_SUCCESS)
 800489e:	f107 010c 	add.w	r1, r7, #12
 80048a2:	2300      	movs	r3, #0
 80048a4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80048a8:	6938      	ldr	r0, [r7, #16]
 80048aa:	f00e fdf7 	bl	801349c <_txe_byte_allocate>
 80048ae:	4603      	mov	r3, r0
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d001      	beq.n	80048b8 <App_ThreadX_Init+0x104>
  {
	  return TX_POOL_ERROR;
 80048b4:	2302      	movs	r3, #2
 80048b6:	e0fd      	b.n	8004ab4 <App_ThreadX_Init+0x300>
  }

  ret = tx_thread_create(&Read_TemperatureThreadPtr,   //Thread Ptr
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	22b0      	movs	r2, #176	; 0xb0
 80048bc:	9206      	str	r2, [sp, #24]
 80048be:	2201      	movs	r2, #1
 80048c0:	9205      	str	r2, [sp, #20]
 80048c2:	2201      	movs	r2, #1
 80048c4:	9204      	str	r2, [sp, #16]
 80048c6:	220f      	movs	r2, #15
 80048c8:	9203      	str	r2, [sp, #12]
 80048ca:	220f      	movs	r2, #15
 80048cc:	9202      	str	r2, [sp, #8]
 80048ce:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80048d2:	9201      	str	r2, [sp, #4]
 80048d4:	9300      	str	r3, [sp, #0]
 80048d6:	2300      	movs	r3, #0
 80048d8:	4a81      	ldr	r2, [pc, #516]	; (8004ae0 <App_ThreadX_Init+0x32c>)
 80048da:	4982      	ldr	r1, [pc, #520]	; (8004ae4 <App_ThreadX_Init+0x330>)
 80048dc:	4882      	ldr	r0, [pc, #520]	; (8004ae8 <App_ThreadX_Init+0x334>)
 80048de:	f00f f919 	bl	8013b14 <_txe_thread_create>
 80048e2:	6178      	str	r0, [r7, #20]
					15,                    //Priority
					15,                    //Preempt Threshold
				    1,                     //Time Slize
					TX_AUTO_START);        //Auto Start or Auto Activate
  //Humidity
  if(tx_byte_allocate(byte_pool, (VOID **) &Ptr, HUM_THREAD_STACK_SIZE, TX_NO_WAIT) != TX_SUCCESS)
 80048e4:	f107 010c 	add.w	r1, r7, #12
 80048e8:	2300      	movs	r3, #0
 80048ea:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80048ee:	6938      	ldr	r0, [r7, #16]
 80048f0:	f00e fdd4 	bl	801349c <_txe_byte_allocate>
 80048f4:	4603      	mov	r3, r0
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d001      	beq.n	80048fe <App_ThreadX_Init+0x14a>
  {
	  return TX_POOL_ERROR;
 80048fa:	2302      	movs	r3, #2
 80048fc:	e0da      	b.n	8004ab4 <App_ThreadX_Init+0x300>
  }

  ret = tx_thread_create(&Read_HumidityThreadPtr,   //Thread Ptr
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	22b0      	movs	r2, #176	; 0xb0
 8004902:	9206      	str	r2, [sp, #24]
 8004904:	2201      	movs	r2, #1
 8004906:	9205      	str	r2, [sp, #20]
 8004908:	2201      	movs	r2, #1
 800490a:	9204      	str	r2, [sp, #16]
 800490c:	220f      	movs	r2, #15
 800490e:	9203      	str	r2, [sp, #12]
 8004910:	220f      	movs	r2, #15
 8004912:	9202      	str	r2, [sp, #8]
 8004914:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004918:	9201      	str	r2, [sp, #4]
 800491a:	9300      	str	r3, [sp, #0]
 800491c:	2300      	movs	r3, #0
 800491e:	4a73      	ldr	r2, [pc, #460]	; (8004aec <App_ThreadX_Init+0x338>)
 8004920:	4973      	ldr	r1, [pc, #460]	; (8004af0 <App_ThreadX_Init+0x33c>)
 8004922:	4874      	ldr	r0, [pc, #464]	; (8004af4 <App_ThreadX_Init+0x340>)
 8004924:	f00f f8f6 	bl	8013b14 <_txe_thread_create>
 8004928:	6178      	str	r0, [r7, #20]
					15,                    //Priority
					15,                    //Preempt Threshold
				    1,                     //Time Slize
					TX_AUTO_START);        //Auto Start or Auto Activate
  //Pressure
  if(tx_byte_allocate(byte_pool, (VOID **) &Ptr, PRES_THREAD_STACK_SIZE, TX_NO_WAIT) != TX_SUCCESS)
 800492a:	f107 010c 	add.w	r1, r7, #12
 800492e:	2300      	movs	r3, #0
 8004930:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004934:	6938      	ldr	r0, [r7, #16]
 8004936:	f00e fdb1 	bl	801349c <_txe_byte_allocate>
 800493a:	4603      	mov	r3, r0
 800493c:	2b00      	cmp	r3, #0
 800493e:	d001      	beq.n	8004944 <App_ThreadX_Init+0x190>
  {
	  return TX_POOL_ERROR;
 8004940:	2302      	movs	r3, #2
 8004942:	e0b7      	b.n	8004ab4 <App_ThreadX_Init+0x300>
  }

  ret = tx_thread_create(&Read_PressureThreadPtr,   //Thread Ptr
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	22b0      	movs	r2, #176	; 0xb0
 8004948:	9206      	str	r2, [sp, #24]
 800494a:	2201      	movs	r2, #1
 800494c:	9205      	str	r2, [sp, #20]
 800494e:	2201      	movs	r2, #1
 8004950:	9204      	str	r2, [sp, #16]
 8004952:	220f      	movs	r2, #15
 8004954:	9203      	str	r2, [sp, #12]
 8004956:	220f      	movs	r2, #15
 8004958:	9202      	str	r2, [sp, #8]
 800495a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800495e:	9201      	str	r2, [sp, #4]
 8004960:	9300      	str	r3, [sp, #0]
 8004962:	2300      	movs	r3, #0
 8004964:	4a64      	ldr	r2, [pc, #400]	; (8004af8 <App_ThreadX_Init+0x344>)
 8004966:	4965      	ldr	r1, [pc, #404]	; (8004afc <App_ThreadX_Init+0x348>)
 8004968:	4865      	ldr	r0, [pc, #404]	; (8004b00 <App_ThreadX_Init+0x34c>)
 800496a:	f00f f8d3 	bl	8013b14 <_txe_thread_create>
 800496e:	6178      	str	r0, [r7, #20]
					15,                    //Preempt Threshold
				    1,                     //Time Slize
					TX_AUTO_START);        //Auto Start or Auto Activate

  //Magnet
  if(tx_byte_allocate(byte_pool, (VOID **) &Ptr, MAG_THREAD_STACK_SIZE, TX_NO_WAIT) != TX_SUCCESS)
 8004970:	f107 010c 	add.w	r1, r7, #12
 8004974:	2300      	movs	r3, #0
 8004976:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800497a:	6938      	ldr	r0, [r7, #16]
 800497c:	f00e fd8e 	bl	801349c <_txe_byte_allocate>
 8004980:	4603      	mov	r3, r0
 8004982:	2b00      	cmp	r3, #0
 8004984:	d001      	beq.n	800498a <App_ThreadX_Init+0x1d6>
  {
	  return TX_POOL_ERROR;
 8004986:	2302      	movs	r3, #2
 8004988:	e094      	b.n	8004ab4 <App_ThreadX_Init+0x300>
  }

  ret = tx_thread_create(&Read_MagneticThreadPtr,   //Thread Ptr
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	22b0      	movs	r2, #176	; 0xb0
 800498e:	9206      	str	r2, [sp, #24]
 8004990:	2201      	movs	r2, #1
 8004992:	9205      	str	r2, [sp, #20]
 8004994:	2201      	movs	r2, #1
 8004996:	9204      	str	r2, [sp, #16]
 8004998:	220f      	movs	r2, #15
 800499a:	9203      	str	r2, [sp, #12]
 800499c:	220f      	movs	r2, #15
 800499e:	9202      	str	r2, [sp, #8]
 80049a0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80049a4:	9201      	str	r2, [sp, #4]
 80049a6:	9300      	str	r3, [sp, #0]
 80049a8:	2300      	movs	r3, #0
 80049aa:	4a56      	ldr	r2, [pc, #344]	; (8004b04 <App_ThreadX_Init+0x350>)
 80049ac:	4956      	ldr	r1, [pc, #344]	; (8004b08 <App_ThreadX_Init+0x354>)
 80049ae:	4857      	ldr	r0, [pc, #348]	; (8004b0c <App_ThreadX_Init+0x358>)
 80049b0:	f00f f8b0 	bl	8013b14 <_txe_thread_create>
 80049b4:	6178      	str	r0, [r7, #20]
					15,                    //Priority
					15,                    //Preempt Threshold
				    1,                     //Time Slize
					TX_AUTO_START);        //Auto Start or Auto Activate
  //Light
  if(tx_byte_allocate(byte_pool, (VOID **) &Ptr, LIGHT_THREAD_STACK_SIZE, TX_NO_WAIT) != TX_SUCCESS)
 80049b6:	f107 010c 	add.w	r1, r7, #12
 80049ba:	2300      	movs	r3, #0
 80049bc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80049c0:	6938      	ldr	r0, [r7, #16]
 80049c2:	f00e fd6b 	bl	801349c <_txe_byte_allocate>
 80049c6:	4603      	mov	r3, r0
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d001      	beq.n	80049d0 <App_ThreadX_Init+0x21c>
  {
	  return TX_POOL_ERROR;
 80049cc:	2302      	movs	r3, #2
 80049ce:	e071      	b.n	8004ab4 <App_ThreadX_Init+0x300>
  }

  ret = tx_thread_create(&Read_LightThreadPtr,   //Thread Ptr
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	22b0      	movs	r2, #176	; 0xb0
 80049d4:	9206      	str	r2, [sp, #24]
 80049d6:	2201      	movs	r2, #1
 80049d8:	9205      	str	r2, [sp, #20]
 80049da:	2201      	movs	r2, #1
 80049dc:	9204      	str	r2, [sp, #16]
 80049de:	220f      	movs	r2, #15
 80049e0:	9203      	str	r2, [sp, #12]
 80049e2:	220f      	movs	r2, #15
 80049e4:	9202      	str	r2, [sp, #8]
 80049e6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80049ea:	9201      	str	r2, [sp, #4]
 80049ec:	9300      	str	r3, [sp, #0]
 80049ee:	2300      	movs	r3, #0
 80049f0:	4a47      	ldr	r2, [pc, #284]	; (8004b10 <App_ThreadX_Init+0x35c>)
 80049f2:	4948      	ldr	r1, [pc, #288]	; (8004b14 <App_ThreadX_Init+0x360>)
 80049f4:	4848      	ldr	r0, [pc, #288]	; (8004b18 <App_ThreadX_Init+0x364>)
 80049f6:	f00f f88d 	bl	8013b14 <_txe_thread_create>
 80049fa:	6178      	str	r0, [r7, #20]
					15,                    //Preempt Threshold
				    1,                     //Time Slize
					TX_AUTO_START);        //Auto Start or Auto Activate

  //Capture Frame
  if(tx_byte_allocate(byte_pool, (VOID **) &Ptr, CAPFRAME_THREAD_STACK_SIZE, TX_NO_WAIT) != TX_SUCCESS)
 80049fc:	f107 010c 	add.w	r1, r7, #12
 8004a00:	2300      	movs	r3, #0
 8004a02:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004a06:	6938      	ldr	r0, [r7, #16]
 8004a08:	f00e fd48 	bl	801349c <_txe_byte_allocate>
 8004a0c:	4603      	mov	r3, r0
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d001      	beq.n	8004a16 <App_ThreadX_Init+0x262>
  {
	  return TX_POOL_ERROR;
 8004a12:	2302      	movs	r3, #2
 8004a14:	e04e      	b.n	8004ab4 <App_ThreadX_Init+0x300>
  }

  ret = tx_thread_create(&CaptureFrameThreadPtr,   //Thread Ptr
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	22b0      	movs	r2, #176	; 0xb0
 8004a1a:	9206      	str	r2, [sp, #24]
 8004a1c:	2201      	movs	r2, #1
 8004a1e:	9205      	str	r2, [sp, #20]
 8004a20:	2201      	movs	r2, #1
 8004a22:	9204      	str	r2, [sp, #16]
 8004a24:	220f      	movs	r2, #15
 8004a26:	9203      	str	r2, [sp, #12]
 8004a28:	220f      	movs	r2, #15
 8004a2a:	9202      	str	r2, [sp, #8]
 8004a2c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004a30:	9201      	str	r2, [sp, #4]
 8004a32:	9300      	str	r3, [sp, #0]
 8004a34:	2300      	movs	r3, #0
 8004a36:	4a39      	ldr	r2, [pc, #228]	; (8004b1c <App_ThreadX_Init+0x368>)
 8004a38:	4939      	ldr	r1, [pc, #228]	; (8004b20 <App_ThreadX_Init+0x36c>)
 8004a3a:	483a      	ldr	r0, [pc, #232]	; (8004b24 <App_ThreadX_Init+0x370>)
 8004a3c:	f00f f86a 	bl	8013b14 <_txe_thread_create>
 8004a40:	6178      	str	r0, [r7, #20]
					15,                    //Preempt Threshold
				    1,                     //Time Slize
					TX_AUTO_START);        //Auto Start or Auto Activate

  //Send Frame
  if(tx_byte_allocate(byte_pool, (VOID **) &Ptr, SENDFRAME_THREAD_STACK_SIZE, TX_NO_WAIT) != TX_SUCCESS)
 8004a42:	f107 010c 	add.w	r1, r7, #12
 8004a46:	2300      	movs	r3, #0
 8004a48:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004a4c:	6938      	ldr	r0, [r7, #16]
 8004a4e:	f00e fd25 	bl	801349c <_txe_byte_allocate>
 8004a52:	4603      	mov	r3, r0
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d001      	beq.n	8004a5c <App_ThreadX_Init+0x2a8>
  {
	  return TX_POOL_ERROR;
 8004a58:	2302      	movs	r3, #2
 8004a5a:	e02b      	b.n	8004ab4 <App_ThreadX_Init+0x300>
  }

  ret = tx_thread_create(&SendFrameThreadPtr,   //Thread Ptr
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	22b0      	movs	r2, #176	; 0xb0
 8004a60:	9206      	str	r2, [sp, #24]
 8004a62:	2201      	movs	r2, #1
 8004a64:	9205      	str	r2, [sp, #20]
 8004a66:	2201      	movs	r2, #1
 8004a68:	9204      	str	r2, [sp, #16]
 8004a6a:	220f      	movs	r2, #15
 8004a6c:	9203      	str	r2, [sp, #12]
 8004a6e:	220f      	movs	r2, #15
 8004a70:	9202      	str	r2, [sp, #8]
 8004a72:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004a76:	9201      	str	r2, [sp, #4]
 8004a78:	9300      	str	r3, [sp, #0]
 8004a7a:	2300      	movs	r3, #0
 8004a7c:	4a2a      	ldr	r2, [pc, #168]	; (8004b28 <App_ThreadX_Init+0x374>)
 8004a7e:	492b      	ldr	r1, [pc, #172]	; (8004b2c <App_ThreadX_Init+0x378>)
 8004a80:	482b      	ldr	r0, [pc, #172]	; (8004b30 <App_ThreadX_Init+0x37c>)
 8004a82:	f00f f847 	bl	8013b14 <_txe_thread_create>
 8004a86:	6178      	str	r0, [r7, #20]
					15,                    //Priority
					15,                    //Preempt Threshold
				    1,                     //Time Slize
					TX_AUTO_START);        //Auto Start or Auto Activate

  ret = tx_mutex_create(&MutexI2C2, "I2C2 Mutex", TX_INHERIT);
 8004a88:	2334      	movs	r3, #52	; 0x34
 8004a8a:	2201      	movs	r2, #1
 8004a8c:	4929      	ldr	r1, [pc, #164]	; (8004b34 <App_ThreadX_Init+0x380>)
 8004a8e:	482a      	ldr	r0, [pc, #168]	; (8004b38 <App_ThreadX_Init+0x384>)
 8004a90:	f00e fe18 	bl	80136c4 <_txe_mutex_create>
 8004a94:	6178      	str	r0, [r7, #20]
  ret = tx_semaphore_create(&CameraBufferData[0], "Camera Buffer 1 Semaphore", 0);
 8004a96:	231c      	movs	r3, #28
 8004a98:	2200      	movs	r2, #0
 8004a9a:	4928      	ldr	r1, [pc, #160]	; (8004b3c <App_ThreadX_Init+0x388>)
 8004a9c:	4828      	ldr	r0, [pc, #160]	; (8004b40 <App_ThreadX_Init+0x38c>)
 8004a9e:	f00e ff43 	bl	8013928 <_txe_semaphore_create>
 8004aa2:	6178      	str	r0, [r7, #20]
  ret = tx_semaphore_create(&CameraBufferData[1], "Camera Buffer 2 Semaphore", 0);
 8004aa4:	231c      	movs	r3, #28
 8004aa6:	2200      	movs	r2, #0
 8004aa8:	4926      	ldr	r1, [pc, #152]	; (8004b44 <App_ThreadX_Init+0x390>)
 8004aaa:	4827      	ldr	r0, [pc, #156]	; (8004b48 <App_ThreadX_Init+0x394>)
 8004aac:	f00e ff3c 	bl	8013928 <_txe_semaphore_create>
 8004ab0:	6178      	str	r0, [r7, #20]
  //tx_trace_enable(&tracex_buffer, TRACEX_BUFFER_SIZE,30);
  /* USER CODE END App_ThreadX_Init */

  return ret;
 8004ab2:	697b      	ldr	r3, [r7, #20]
}
 8004ab4:	4618      	mov	r0, r3
 8004ab6:	3718      	adds	r7, #24
 8004ab8:	46bd      	mov	sp, r7
 8004aba:	bd80      	pop	{r7, pc}
 8004abc:	08004efd 	.word	0x08004efd
 8004ac0:	080148fc 	.word	0x080148fc
 8004ac4:	2001be30 	.word	0x2001be30
 8004ac8:	08004f11 	.word	0x08004f11
 8004acc:	08014904 	.word	0x08014904
 8004ad0:	2001bee0 	.word	0x2001bee0
 8004ad4:	08004dd1 	.word	0x08004dd1
 8004ad8:	08014910 	.word	0x08014910
 8004adc:	2001c1a0 	.word	0x2001c1a0
 8004ae0:	08004b59 	.word	0x08004b59
 8004ae4:	08014920 	.word	0x08014920
 8004ae8:	2001bf90 	.word	0x2001bf90
 8004aec:	08004bed 	.word	0x08004bed
 8004af0:	0801492c 	.word	0x0801492c
 8004af4:	2001c040 	.word	0x2001c040
 8004af8:	08004c81 	.word	0x08004c81
 8004afc:	0801493c 	.word	0x0801493c
 8004b00:	2001c0f0 	.word	0x2001c0f0
 8004b04:	08004d15 	.word	0x08004d15
 8004b08:	0801494c 	.word	0x0801494c
 8004b0c:	2001c250 	.word	0x2001c250
 8004b10:	08004eb1 	.word	0x08004eb1
 8004b14:	0801495c 	.word	0x0801495c
 8004b18:	2001c300 	.word	0x2001c300
 8004b1c:	08004f25 	.word	0x08004f25
 8004b20:	0801496c 	.word	0x0801496c
 8004b24:	2001c3b0 	.word	0x2001c3b0
 8004b28:	08004f65 	.word	0x08004f65
 8004b2c:	08014984 	.word	0x08014984
 8004b30:	2001c460 	.word	0x2001c460
 8004b34:	08014998 	.word	0x08014998
 8004b38:	2001c510 	.word	0x2001c510
 8004b3c:	080149a4 	.word	0x080149a4
 8004b40:	2001c544 	.word	0x2001c544
 8004b44:	080149c0 	.word	0x080149c0
 8004b48:	2001c560 	.word	0x2001c560

08004b4c <MX_ThreadX_Init>:
  * @brief  MX_ThreadX_Init
  * @param  None
  * @retval None
  */
void MX_ThreadX_Init(void)
{
 8004b4c:	b580      	push	{r7, lr}
 8004b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN  Before_Kernel_Start */

  /* USER CODE END  Before_Kernel_Start */

  tx_kernel_enter();
 8004b50:	f00c fcc0 	bl	80114d4 <_tx_initialize_kernel_enter>

  /* USER CODE BEGIN  Kernel_Start_Error */

  /* USER CODE END  Kernel_Start_Error */
}
 8004b54:	bf00      	nop
 8004b56:	bd80      	pop	{r7, pc}

08004b58 <ReadTemperatureThread>:

/* USER CODE BEGIN 1 */

VOID ReadTemperatureThread(ULONG init)
{
 8004b58:	b580      	push	{r7, lr}
 8004b5a:	b086      	sub	sp, #24
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	6078      	str	r0, [r7, #4]
	int32_t ret = HTS221_Ok;
 8004b60:	2300      	movs	r3, #0
 8004b62:	617b      	str	r3, [r7, #20]
	uint32_t SleepTime = 0;
 8004b64:	2300      	movs	r3, #0
 8004b66:	613b      	str	r3, [r7, #16]
	float Temperature = 0;
 8004b68:	f04f 0300 	mov.w	r3, #0
 8004b6c:	60fb      	str	r3, [r7, #12]
	while(1)
	{
		//Take I2C Mutex (if available)
		tx_mutex_get(&MutexI2C2,TX_WAIT_FOREVER);
 8004b6e:	f04f 31ff 	mov.w	r1, #4294967295
 8004b72:	481b      	ldr	r0, [pc, #108]	; (8004be0 <ReadTemperatureThread+0x88>)
 8004b74:	f00e fe44 	bl	8013800 <_txe_mutex_get>
		ret = BSP_ReadTemperature(&Temperature);
 8004b78:	f107 030c 	add.w	r3, r7, #12
 8004b7c:	4618      	mov	r0, r3
 8004b7e:	f7fc fd71 	bl	8001664 <BSP_ReadTemperature>
 8004b82:	6178      	str	r0, [r7, #20]
		tx_mutex_put(&MutexI2C2);
 8004b84:	4816      	ldr	r0, [pc, #88]	; (8004be0 <ReadTemperatureThread+0x88>)
 8004b86:	f00e fe95 	bl	80138b4 <_txe_mutex_put>
		if(ret == HTS221_DataReady)
 8004b8a:	697b      	ldr	r3, [r7, #20]
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d102      	bne.n	8004b96 <ReadTemperatureThread+0x3e>
		{
			temp_data = Temperature;
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	4a14      	ldr	r2, [pc, #80]	; (8004be4 <ReadTemperatureThread+0x8c>)
 8004b94:	6013      	str	r3, [r2, #0]
		}
		ret = BSP_GetTempPeriod(&SleepTime);
 8004b96:	f107 0310 	add.w	r3, r7, #16
 8004b9a:	4618      	mov	r0, r3
 8004b9c:	f7fc fe06 	bl	80017ac <BSP_GetTempPeriod>
 8004ba0:	6178      	str	r0, [r7, #20]
		if(ret == HTS221_Ok)
 8004ba2:	697b      	ldr	r3, [r7, #20]
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d1e2      	bne.n	8004b6e <ReadTemperatureThread+0x16>
		{
			//Sleep Time given in milliseconds. OS Timeslice = 10 ms, +1 is to handle possible non-zero remainders.
			if(SleepTime % 10 == 0)
 8004ba8:	6939      	ldr	r1, [r7, #16]
 8004baa:	4b0f      	ldr	r3, [pc, #60]	; (8004be8 <ReadTemperatureThread+0x90>)
 8004bac:	fba3 2301 	umull	r2, r3, r3, r1
 8004bb0:	08da      	lsrs	r2, r3, #3
 8004bb2:	4613      	mov	r3, r2
 8004bb4:	009b      	lsls	r3, r3, #2
 8004bb6:	4413      	add	r3, r2
 8004bb8:	005b      	lsls	r3, r3, #1
 8004bba:	1aca      	subs	r2, r1, r3
 8004bbc:	2a00      	cmp	r2, #0
 8004bbe:	d104      	bne.n	8004bca <ReadTemperatureThread+0x72>
			{
				tx_thread_sleep(SleepTime);
 8004bc0:	693b      	ldr	r3, [r7, #16]
 8004bc2:	4618      	mov	r0, r3
 8004bc4:	f00d fe64 	bl	8012890 <_tx_thread_sleep>
 8004bc8:	e7d1      	b.n	8004b6e <ReadTemperatureThread+0x16>
			} else
			{
				tx_thread_sleep((SleepTime / 10) + 1);
 8004bca:	693b      	ldr	r3, [r7, #16]
 8004bcc:	4a06      	ldr	r2, [pc, #24]	; (8004be8 <ReadTemperatureThread+0x90>)
 8004bce:	fba2 2303 	umull	r2, r3, r2, r3
 8004bd2:	08db      	lsrs	r3, r3, #3
 8004bd4:	3301      	adds	r3, #1
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	f00d fe5a 	bl	8012890 <_tx_thread_sleep>
		tx_mutex_get(&MutexI2C2,TX_WAIT_FOREVER);
 8004bdc:	e7c7      	b.n	8004b6e <ReadTemperatureThread+0x16>
 8004bde:	bf00      	nop
 8004be0:	2001c510 	.word	0x2001c510
 8004be4:	2001bdf4 	.word	0x2001bdf4
 8004be8:	cccccccd 	.word	0xcccccccd

08004bec <ReadHumidityThread>:
		}
	}
}

VOID ReadHumidityThread(ULONG init)
{
 8004bec:	b580      	push	{r7, lr}
 8004bee:	b086      	sub	sp, #24
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]
	int32_t ret = HTS221_Ok;
 8004bf4:	2300      	movs	r3, #0
 8004bf6:	617b      	str	r3, [r7, #20]
	uint32_t SleepTime = 0;
 8004bf8:	2300      	movs	r3, #0
 8004bfa:	613b      	str	r3, [r7, #16]
	float Humidity = 0;
 8004bfc:	f04f 0300 	mov.w	r3, #0
 8004c00:	60fb      	str	r3, [r7, #12]
	while(1)
	{
		//Take I2C Mutex (if available)
		tx_mutex_get(&MutexI2C2,TX_WAIT_FOREVER);
 8004c02:	f04f 31ff 	mov.w	r1, #4294967295
 8004c06:	481b      	ldr	r0, [pc, #108]	; (8004c74 <ReadHumidityThread+0x88>)
 8004c08:	f00e fdfa 	bl	8013800 <_txe_mutex_get>
		ret = BSP_ReadHumidity(&Humidity);
 8004c0c:	f107 030c 	add.w	r3, r7, #12
 8004c10:	4618      	mov	r0, r3
 8004c12:	f7fc fd37 	bl	8001684 <BSP_ReadHumidity>
 8004c16:	6178      	str	r0, [r7, #20]
		tx_mutex_put(&MutexI2C2);
 8004c18:	4816      	ldr	r0, [pc, #88]	; (8004c74 <ReadHumidityThread+0x88>)
 8004c1a:	f00e fe4b 	bl	80138b4 <_txe_mutex_put>
		if(ret == HTS221_DataReady)
 8004c1e:	697b      	ldr	r3, [r7, #20]
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d102      	bne.n	8004c2a <ReadHumidityThread+0x3e>
		{
			humidity_data = Humidity;
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	4a14      	ldr	r2, [pc, #80]	; (8004c78 <ReadHumidityThread+0x8c>)
 8004c28:	6013      	str	r3, [r2, #0]
		}
		ret = BSP_GetTempPeriod(&SleepTime);
 8004c2a:	f107 0310 	add.w	r3, r7, #16
 8004c2e:	4618      	mov	r0, r3
 8004c30:	f7fc fdbc 	bl	80017ac <BSP_GetTempPeriod>
 8004c34:	6178      	str	r0, [r7, #20]
		if(ret == HTS221_Ok)
 8004c36:	697b      	ldr	r3, [r7, #20]
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d1e2      	bne.n	8004c02 <ReadHumidityThread+0x16>
		{
			//Sleep Time given in milliseconds. OS Timeslice = 10 ms, +1 is to handle possible non-zero remainders.
			if(SleepTime % 10 == 0)
 8004c3c:	6939      	ldr	r1, [r7, #16]
 8004c3e:	4b0f      	ldr	r3, [pc, #60]	; (8004c7c <ReadHumidityThread+0x90>)
 8004c40:	fba3 2301 	umull	r2, r3, r3, r1
 8004c44:	08da      	lsrs	r2, r3, #3
 8004c46:	4613      	mov	r3, r2
 8004c48:	009b      	lsls	r3, r3, #2
 8004c4a:	4413      	add	r3, r2
 8004c4c:	005b      	lsls	r3, r3, #1
 8004c4e:	1aca      	subs	r2, r1, r3
 8004c50:	2a00      	cmp	r2, #0
 8004c52:	d104      	bne.n	8004c5e <ReadHumidityThread+0x72>
			{
				tx_thread_sleep(SleepTime);
 8004c54:	693b      	ldr	r3, [r7, #16]
 8004c56:	4618      	mov	r0, r3
 8004c58:	f00d fe1a 	bl	8012890 <_tx_thread_sleep>
 8004c5c:	e7d1      	b.n	8004c02 <ReadHumidityThread+0x16>
			} else
			{
				tx_thread_sleep((SleepTime / 10) + 1);
 8004c5e:	693b      	ldr	r3, [r7, #16]
 8004c60:	4a06      	ldr	r2, [pc, #24]	; (8004c7c <ReadHumidityThread+0x90>)
 8004c62:	fba2 2303 	umull	r2, r3, r2, r3
 8004c66:	08db      	lsrs	r3, r3, #3
 8004c68:	3301      	adds	r3, #1
 8004c6a:	4618      	mov	r0, r3
 8004c6c:	f00d fe10 	bl	8012890 <_tx_thread_sleep>
		tx_mutex_get(&MutexI2C2,TX_WAIT_FOREVER);
 8004c70:	e7c7      	b.n	8004c02 <ReadHumidityThread+0x16>
 8004c72:	bf00      	nop
 8004c74:	2001c510 	.word	0x2001c510
 8004c78:	2001bdf8 	.word	0x2001bdf8
 8004c7c:	cccccccd 	.word	0xcccccccd

08004c80 <ReadPressureThread>:
		}
	}
}

VOID ReadPressureThread(ULONG init)
{
 8004c80:	b580      	push	{r7, lr}
 8004c82:	b086      	sub	sp, #24
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	6078      	str	r0, [r7, #4]
	int32_t ret = LPS22HH_Ok;
 8004c88:	2300      	movs	r3, #0
 8004c8a:	617b      	str	r3, [r7, #20]
	uint32_t SleepTime = 0;
 8004c8c:	2300      	movs	r3, #0
 8004c8e:	613b      	str	r3, [r7, #16]
	float Pressure = 0;
 8004c90:	f04f 0300 	mov.w	r3, #0
 8004c94:	60fb      	str	r3, [r7, #12]
	while(1)
	{
		tx_mutex_get(&MutexI2C2,TX_WAIT_FOREVER);
 8004c96:	f04f 31ff 	mov.w	r1, #4294967295
 8004c9a:	481b      	ldr	r0, [pc, #108]	; (8004d08 <ReadPressureThread+0x88>)
 8004c9c:	f00e fdb0 	bl	8013800 <_txe_mutex_get>
		ret = BSP_ReadPressure(&Pressure);
 8004ca0:	f107 030c 	add.w	r3, r7, #12
 8004ca4:	4618      	mov	r0, r3
 8004ca6:	f7fc fd2d 	bl	8001704 <BSP_ReadPressure>
 8004caa:	6178      	str	r0, [r7, #20]
		tx_mutex_put(&MutexI2C2);
 8004cac:	4816      	ldr	r0, [pc, #88]	; (8004d08 <ReadPressureThread+0x88>)
 8004cae:	f00e fe01 	bl	80138b4 <_txe_mutex_put>
		if(ret == LPS22HH_DataReady)
 8004cb2:	697b      	ldr	r3, [r7, #20]
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d102      	bne.n	8004cbe <ReadPressureThread+0x3e>
		{
			pressure_data = Pressure;
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	4a14      	ldr	r2, [pc, #80]	; (8004d0c <ReadPressureThread+0x8c>)
 8004cbc:	6013      	str	r3, [r2, #0]
		}
		ret = BSP_GetPressurePeriod(&SleepTime);
 8004cbe:	f107 0310 	add.w	r3, r7, #16
 8004cc2:	4618      	mov	r0, r3
 8004cc4:	f7fc fd92 	bl	80017ec <BSP_GetPressurePeriod>
 8004cc8:	6178      	str	r0, [r7, #20]
		if(ret == LPS22HH_Ok)
 8004cca:	697b      	ldr	r3, [r7, #20]
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d1e2      	bne.n	8004c96 <ReadPressureThread+0x16>
		{
			//Sleep Time given in milliseconds. OS Timeslice = 10 ms, +1 is to handle possible non-zero remainders.
			if(SleepTime % 10 == 0)
 8004cd0:	6939      	ldr	r1, [r7, #16]
 8004cd2:	4b0f      	ldr	r3, [pc, #60]	; (8004d10 <ReadPressureThread+0x90>)
 8004cd4:	fba3 2301 	umull	r2, r3, r3, r1
 8004cd8:	08da      	lsrs	r2, r3, #3
 8004cda:	4613      	mov	r3, r2
 8004cdc:	009b      	lsls	r3, r3, #2
 8004cde:	4413      	add	r3, r2
 8004ce0:	005b      	lsls	r3, r3, #1
 8004ce2:	1aca      	subs	r2, r1, r3
 8004ce4:	2a00      	cmp	r2, #0
 8004ce6:	d104      	bne.n	8004cf2 <ReadPressureThread+0x72>
			{
				tx_thread_sleep(SleepTime);
 8004ce8:	693b      	ldr	r3, [r7, #16]
 8004cea:	4618      	mov	r0, r3
 8004cec:	f00d fdd0 	bl	8012890 <_tx_thread_sleep>
 8004cf0:	e7d1      	b.n	8004c96 <ReadPressureThread+0x16>
			} else
			{
				tx_thread_sleep((SleepTime / 10) + 1);
 8004cf2:	693b      	ldr	r3, [r7, #16]
 8004cf4:	4a06      	ldr	r2, [pc, #24]	; (8004d10 <ReadPressureThread+0x90>)
 8004cf6:	fba2 2303 	umull	r2, r3, r2, r3
 8004cfa:	08db      	lsrs	r3, r3, #3
 8004cfc:	3301      	adds	r3, #1
 8004cfe:	4618      	mov	r0, r3
 8004d00:	f00d fdc6 	bl	8012890 <_tx_thread_sleep>
		tx_mutex_get(&MutexI2C2,TX_WAIT_FOREVER);
 8004d04:	e7c7      	b.n	8004c96 <ReadPressureThread+0x16>
 8004d06:	bf00      	nop
 8004d08:	2001c510 	.word	0x2001c510
 8004d0c:	2001bdfc 	.word	0x2001bdfc
 8004d10:	cccccccd 	.word	0xcccccccd

08004d14 <ReadMagneticThread>:
		}
	}
}

VOID ReadMagneticThread(ULONG init)
{
 8004d14:	b580      	push	{r7, lr}
 8004d16:	b088      	sub	sp, #32
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	6078      	str	r0, [r7, #4]
	int32_t ret = IIS2MDC_Ok;
 8004d1c:	2300      	movs	r3, #0
 8004d1e:	61fb      	str	r3, [r7, #28]
	uint32_t SleepTime = 0;
 8004d20:	2300      	movs	r3, #0
 8004d22:	61bb      	str	r3, [r7, #24]
	float MagX = 0;
 8004d24:	f04f 0300 	mov.w	r3, #0
 8004d28:	617b      	str	r3, [r7, #20]
	float MagY = 0;
 8004d2a:	f04f 0300 	mov.w	r3, #0
 8004d2e:	613b      	str	r3, [r7, #16]
	float MagZ = 0;
 8004d30:	f04f 0300 	mov.w	r3, #0
 8004d34:	60fb      	str	r3, [r7, #12]
	while(1)
	{
		tx_mutex_get(&MutexI2C2,TX_WAIT_FOREVER);
 8004d36:	f04f 31ff 	mov.w	r1, #4294967295
 8004d3a:	4820      	ldr	r0, [pc, #128]	; (8004dbc <ReadMagneticThread+0xa8>)
 8004d3c:	f00e fd60 	bl	8013800 <_txe_mutex_get>
		ret = BSP_ReadMagnetometerXYZ(&MagX, &MagY, &MagZ);
 8004d40:	f107 020c 	add.w	r2, r7, #12
 8004d44:	f107 0110 	add.w	r1, r7, #16
 8004d48:	f107 0314 	add.w	r3, r7, #20
 8004d4c:	4618      	mov	r0, r3
 8004d4e:	f7fc fd19 	bl	8001784 <BSP_ReadMagnetometerXYZ>
 8004d52:	61f8      	str	r0, [r7, #28]
		tx_mutex_put(&MutexI2C2);
 8004d54:	4819      	ldr	r0, [pc, #100]	; (8004dbc <ReadMagneticThread+0xa8>)
 8004d56:	f00e fdad 	bl	80138b4 <_txe_mutex_put>
		if(ret == IIS2MDC_DataReady)
 8004d5a:	69fb      	ldr	r3, [r7, #28]
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d108      	bne.n	8004d72 <ReadMagneticThread+0x5e>
		{
			magx = MagX;
 8004d60:	697b      	ldr	r3, [r7, #20]
 8004d62:	4a17      	ldr	r2, [pc, #92]	; (8004dc0 <ReadMagneticThread+0xac>)
 8004d64:	6013      	str	r3, [r2, #0]
			magy = MagY;
 8004d66:	693b      	ldr	r3, [r7, #16]
 8004d68:	4a16      	ldr	r2, [pc, #88]	; (8004dc4 <ReadMagneticThread+0xb0>)
 8004d6a:	6013      	str	r3, [r2, #0]
			magz = MagZ;
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	4a16      	ldr	r2, [pc, #88]	; (8004dc8 <ReadMagneticThread+0xb4>)
 8004d70:	6013      	str	r3, [r2, #0]
		}
		ret = BSP_GetMagneticPeriod(&SleepTime);
 8004d72:	f107 0318 	add.w	r3, r7, #24
 8004d76:	4618      	mov	r0, r3
 8004d78:	f7fc fd28 	bl	80017cc <BSP_GetMagneticPeriod>
 8004d7c:	61f8      	str	r0, [r7, #28]
		if(ret == IIS2MDC_Ok)
 8004d7e:	69fb      	ldr	r3, [r7, #28]
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d1d8      	bne.n	8004d36 <ReadMagneticThread+0x22>
		{
			//Sleep Time given in milliseconds. OS Timeslice = 10 ms, +1 is to handle possible non-zero remainders.
			if(SleepTime % 10 == 0)
 8004d84:	69b9      	ldr	r1, [r7, #24]
 8004d86:	4b11      	ldr	r3, [pc, #68]	; (8004dcc <ReadMagneticThread+0xb8>)
 8004d88:	fba3 2301 	umull	r2, r3, r3, r1
 8004d8c:	08da      	lsrs	r2, r3, #3
 8004d8e:	4613      	mov	r3, r2
 8004d90:	009b      	lsls	r3, r3, #2
 8004d92:	4413      	add	r3, r2
 8004d94:	005b      	lsls	r3, r3, #1
 8004d96:	1aca      	subs	r2, r1, r3
 8004d98:	2a00      	cmp	r2, #0
 8004d9a:	d104      	bne.n	8004da6 <ReadMagneticThread+0x92>
			{
				tx_thread_sleep(SleepTime);
 8004d9c:	69bb      	ldr	r3, [r7, #24]
 8004d9e:	4618      	mov	r0, r3
 8004da0:	f00d fd76 	bl	8012890 <_tx_thread_sleep>
 8004da4:	e7c7      	b.n	8004d36 <ReadMagneticThread+0x22>
			} else
			{
				tx_thread_sleep((SleepTime / 10) + 1);
 8004da6:	69bb      	ldr	r3, [r7, #24]
 8004da8:	4a08      	ldr	r2, [pc, #32]	; (8004dcc <ReadMagneticThread+0xb8>)
 8004daa:	fba2 2303 	umull	r2, r3, r2, r3
 8004dae:	08db      	lsrs	r3, r3, #3
 8004db0:	3301      	adds	r3, #1
 8004db2:	4618      	mov	r0, r3
 8004db4:	f00d fd6c 	bl	8012890 <_tx_thread_sleep>
		tx_mutex_get(&MutexI2C2,TX_WAIT_FOREVER);
 8004db8:	e7bd      	b.n	8004d36 <ReadMagneticThread+0x22>
 8004dba:	bf00      	nop
 8004dbc:	2001c510 	.word	0x2001c510
 8004dc0:	2001be18 	.word	0x2001be18
 8004dc4:	2001be1c 	.word	0x2001be1c
 8004dc8:	2001be20 	.word	0x2001be20
 8004dcc:	cccccccd 	.word	0xcccccccd

08004dd0 <ReadMotionThread>:
		}
	}
}

VOID ReadMotionThread(ULONG init)
{
 8004dd0:	b580      	push	{r7, lr}
 8004dd2:	b08a      	sub	sp, #40	; 0x28
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	6078      	str	r0, [r7, #4]
	int32_t ret = IIS2MDC_Ok;
 8004dd8:	2300      	movs	r3, #0
 8004dda:	627b      	str	r3, [r7, #36]	; 0x24
	float AccelX = 0;
 8004ddc:	f04f 0300 	mov.w	r3, #0
 8004de0:	623b      	str	r3, [r7, #32]
	float AccelY = 0;
 8004de2:	f04f 0300 	mov.w	r3, #0
 8004de6:	61fb      	str	r3, [r7, #28]
	float AccelZ = 0;
 8004de8:	f04f 0300 	mov.w	r3, #0
 8004dec:	61bb      	str	r3, [r7, #24]
	float GyroX = 0;
 8004dee:	f04f 0300 	mov.w	r3, #0
 8004df2:	617b      	str	r3, [r7, #20]
	float GyroY = 0;
 8004df4:	f04f 0300 	mov.w	r3, #0
 8004df8:	613b      	str	r3, [r7, #16]
	float GyroZ = 0;
 8004dfa:	f04f 0300 	mov.w	r3, #0
 8004dfe:	60fb      	str	r3, [r7, #12]
	//Synchronize with hardware timer
	BSP_SynchronizeIRQ();
 8004e00:	f7fc fdfc 	bl	80019fc <BSP_SynchronizeIRQ>
	while(1)
	{
	    tx_mutex_get(&MutexI2C2,TX_NO_WAIT);
 8004e04:	2100      	movs	r1, #0
 8004e06:	481b      	ldr	r0, [pc, #108]	; (8004e74 <ReadMotionThread+0xa4>)
 8004e08:	f00e fcfa 	bl	8013800 <_txe_mutex_get>
	    ret = BSP_ReadAccelXYZ(&AccelX, &AccelY, &AccelZ);
 8004e0c:	f107 0218 	add.w	r2, r7, #24
 8004e10:	f107 011c 	add.w	r1, r7, #28
 8004e14:	f107 0320 	add.w	r3, r7, #32
 8004e18:	4618      	mov	r0, r3
 8004e1a:	f7fc fdb7 	bl	800198c <BSP_ReadAccelXYZ>
 8004e1e:	6278      	str	r0, [r7, #36]	; 0x24
	    if(ret == ISM330DHCX_DataReady)
 8004e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d108      	bne.n	8004e38 <ReadMotionThread+0x68>
	    {
		    accelx = AccelX;
 8004e26:	6a3b      	ldr	r3, [r7, #32]
 8004e28:	4a13      	ldr	r2, [pc, #76]	; (8004e78 <ReadMotionThread+0xa8>)
 8004e2a:	6013      	str	r3, [r2, #0]
		    accely = AccelY;
 8004e2c:	69fb      	ldr	r3, [r7, #28]
 8004e2e:	4a13      	ldr	r2, [pc, #76]	; (8004e7c <ReadMotionThread+0xac>)
 8004e30:	6013      	str	r3, [r2, #0]
		    accelz = AccelZ;
 8004e32:	69bb      	ldr	r3, [r7, #24]
 8004e34:	4a12      	ldr	r2, [pc, #72]	; (8004e80 <ReadMotionThread+0xb0>)
 8004e36:	6013      	str	r3, [r2, #0]
	    }
	    ret = BSP_ReadGyroXYZ(&GyroX, &GyroY, &GyroZ);
 8004e38:	f107 020c 	add.w	r2, r7, #12
 8004e3c:	f107 0110 	add.w	r1, r7, #16
 8004e40:	f107 0314 	add.w	r3, r7, #20
 8004e44:	4618      	mov	r0, r3
 8004e46:	f7fc fdbd 	bl	80019c4 <BSP_ReadGyroXYZ>
 8004e4a:	6278      	str	r0, [r7, #36]	; 0x24
	    if(ret == ISM330DHCX_DataReady)
 8004e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d108      	bne.n	8004e64 <ReadMotionThread+0x94>
	    {
		    gyrox = GyroX;
 8004e52:	697b      	ldr	r3, [r7, #20]
 8004e54:	4a0b      	ldr	r2, [pc, #44]	; (8004e84 <ReadMotionThread+0xb4>)
 8004e56:	6013      	str	r3, [r2, #0]
		    gyroy = GyroY;
 8004e58:	693b      	ldr	r3, [r7, #16]
 8004e5a:	4a0b      	ldr	r2, [pc, #44]	; (8004e88 <ReadMotionThread+0xb8>)
 8004e5c:	6013      	str	r3, [r2, #0]
		    gyroz = GyroZ;
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	4a0a      	ldr	r2, [pc, #40]	; (8004e8c <ReadMotionThread+0xbc>)
 8004e62:	6013      	str	r3, [r2, #0]
	    }
	    tx_mutex_put(&MutexI2C2);
 8004e64:	4803      	ldr	r0, [pc, #12]	; (8004e74 <ReadMotionThread+0xa4>)
 8004e66:	f00e fd25 	bl	80138b4 <_txe_mutex_put>
	    tx_thread_suspend(&Read_MotionThreadPtr);
 8004e6a:	4809      	ldr	r0, [pc, #36]	; (8004e90 <ReadMotionThread+0xc0>)
 8004e6c:	f00e ff7e 	bl	8013d6c <_txe_thread_suspend>
	    tx_mutex_get(&MutexI2C2,TX_NO_WAIT);
 8004e70:	e7c8      	b.n	8004e04 <ReadMotionThread+0x34>
 8004e72:	bf00      	nop
 8004e74:	2001c510 	.word	0x2001c510
 8004e78:	2001be00 	.word	0x2001be00
 8004e7c:	2001be04 	.word	0x2001be04
 8004e80:	2001be08 	.word	0x2001be08
 8004e84:	2001be0c 	.word	0x2001be0c
 8004e88:	2001be10 	.word	0x2001be10
 8004e8c:	2001be14 	.word	0x2001be14
 8004e90:	2001c1a0 	.word	0x2001c1a0

08004e94 <TIM7_ResumeMotionThread>:
	}
}

void TIM7_ResumeMotionThread(void)
{
 8004e94:	b580      	push	{r7, lr}
 8004e96:	af00      	add	r7, sp, #0
	if(Read_MotionThreadPtr.tx_thread_state == TX_SUSPENDED)
 8004e98:	4b04      	ldr	r3, [pc, #16]	; (8004eac <TIM7_ResumeMotionThread+0x18>)
 8004e9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e9c:	2b03      	cmp	r3, #3
 8004e9e:	d102      	bne.n	8004ea6 <TIM7_ResumeMotionThread+0x12>
	{
	    tx_thread_resume(&Read_MotionThreadPtr);
 8004ea0:	4802      	ldr	r0, [pc, #8]	; (8004eac <TIM7_ResumeMotionThread+0x18>)
 8004ea2:	f00e ff45 	bl	8013d30 <_txe_thread_resume>
	}
}
 8004ea6:	bf00      	nop
 8004ea8:	bd80      	pop	{r7, pc}
 8004eaa:	bf00      	nop
 8004eac:	2001c1a0 	.word	0x2001c1a0

08004eb0 <ReadLightThread>:

VOID ReadLightThread(ULONG init)
{
 8004eb0:	b580      	push	{r7, lr}
 8004eb2:	b084      	sub	sp, #16
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	6078      	str	r0, [r7, #4]
	float Light = 0;
 8004eb8:	f04f 0300 	mov.w	r3, #0
 8004ebc:	60bb      	str	r3, [r7, #8]
	int32_t ret = 0;
 8004ebe:	2300      	movs	r3, #0
 8004ec0:	60fb      	str	r3, [r7, #12]
	while(1)
	{
	    tx_mutex_get(&MutexI2C2,TX_WAIT_FOREVER);
 8004ec2:	f04f 31ff 	mov.w	r1, #4294967295
 8004ec6:	480b      	ldr	r0, [pc, #44]	; (8004ef4 <ReadLightThread+0x44>)
 8004ec8:	f00e fc9a 	bl	8013800 <_txe_mutex_get>
		ret = BSP_ReadAmbientLight(&Light);
 8004ecc:	f107 0308 	add.w	r3, r7, #8
 8004ed0:	4618      	mov	r0, r3
 8004ed2:	f7fc fcc9 	bl	8001868 <BSP_ReadAmbientLight>
 8004ed6:	60f8      	str	r0, [r7, #12]
	    tx_mutex_put(&MutexI2C2);
 8004ed8:	4806      	ldr	r0, [pc, #24]	; (8004ef4 <ReadLightThread+0x44>)
 8004eda:	f00e fceb 	bl	80138b4 <_txe_mutex_put>
		if(ret == VEML6030_Ok)
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d102      	bne.n	8004eea <ReadLightThread+0x3a>
		{
			light = Light;
 8004ee4:	68bb      	ldr	r3, [r7, #8]
 8004ee6:	4a04      	ldr	r2, [pc, #16]	; (8004ef8 <ReadLightThread+0x48>)
 8004ee8:	6013      	str	r3, [r2, #0]
		}
		tx_thread_sleep(100);
 8004eea:	2064      	movs	r0, #100	; 0x64
 8004eec:	f00d fcd0 	bl	8012890 <_tx_thread_sleep>
	    tx_mutex_get(&MutexI2C2,TX_WAIT_FOREVER);
 8004ef0:	e7e7      	b.n	8004ec2 <ReadLightThread+0x12>
 8004ef2:	bf00      	nop
 8004ef4:	2001c510 	.word	0x2001c510
 8004ef8:	2001be24 	.word	0x2001be24

08004efc <RedLEDToggleThread>:
	}
}

VOID RedLEDToggleThread(ULONG init)
{
 8004efc:	b580      	push	{r7, lr}
 8004efe:	b082      	sub	sp, #8
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]
	while(1)
	{
		BSP_LEDToggleRed();
 8004f04:	f7fc faf4 	bl	80014f0 <BSP_LEDToggleRed>
		tx_thread_sleep(100);
 8004f08:	2064      	movs	r0, #100	; 0x64
 8004f0a:	f00d fcc1 	bl	8012890 <_tx_thread_sleep>
		BSP_LEDToggleRed();
 8004f0e:	e7f9      	b.n	8004f04 <RedLEDToggleThread+0x8>

08004f10 <GreenLEDToggleThread>:
	}
}

VOID GreenLEDToggleThread(ULONG init)
{
 8004f10:	b580      	push	{r7, lr}
 8004f12:	b082      	sub	sp, #8
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	6078      	str	r0, [r7, #4]
	while(1)
	{
		BSP_LEDToggleGreen();
 8004f18:	f7fc faf4 	bl	8001504 <BSP_LEDToggleGreen>
		tx_thread_sleep(100);
 8004f1c:	2064      	movs	r0, #100	; 0x64
 8004f1e:	f00d fcb7 	bl	8012890 <_tx_thread_sleep>
		BSP_LEDToggleGreen();
 8004f22:	e7f9      	b.n	8004f18 <GreenLEDToggleThread+0x8>

08004f24 <CaptureFrameThread>:
	}
}

VOID CaptureFrameThread(ULONG init)
{
 8004f24:	b580      	push	{r7, lr}
 8004f26:	b082      	sub	sp, #8
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	6078      	str	r0, [r7, #4]
    while(1)
    {
        if(CameraBufferData[0].tx_semaphore_count == 0)
 8004f2c:	4b0a      	ldr	r3, [pc, #40]	; (8004f58 <CaptureFrameThread+0x34>)
 8004f2e:	689b      	ldr	r3, [r3, #8]
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d106      	bne.n	8004f42 <CaptureFrameThread+0x1e>
        {
            BSP_CameraStart((uint8_t*)CAMERA_FRAMEBUFFER1_ADDR);
 8004f34:	f04f 4010 	mov.w	r0, #2415919104	; 0x90000000
 8004f38:	f7fc faf8 	bl	800152c <BSP_CameraStart>
            tx_thread_suspend(&CaptureFrameThreadPtr);
 8004f3c:	4807      	ldr	r0, [pc, #28]	; (8004f5c <CaptureFrameThread+0x38>)
 8004f3e:	f00e ff15 	bl	8013d6c <_txe_thread_suspend>
        }

        if(CameraBufferData[1].tx_semaphore_count == 0)
 8004f42:	4b05      	ldr	r3, [pc, #20]	; (8004f58 <CaptureFrameThread+0x34>)
 8004f44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d1f0      	bne.n	8004f2c <CaptureFrameThread+0x8>
        {
            BSP_CameraStart((uint8_t*)CAMERA_FRAMEBUFFER2_ADDR);
 8004f4a:	4805      	ldr	r0, [pc, #20]	; (8004f60 <CaptureFrameThread+0x3c>)
 8004f4c:	f7fc faee 	bl	800152c <BSP_CameraStart>
            tx_thread_suspend(&CaptureFrameThreadPtr);
 8004f50:	4802      	ldr	r0, [pc, #8]	; (8004f5c <CaptureFrameThread+0x38>)
 8004f52:	f00e ff0b 	bl	8013d6c <_txe_thread_suspend>
        if(CameraBufferData[0].tx_semaphore_count == 0)
 8004f56:	e7e9      	b.n	8004f2c <CaptureFrameThread+0x8>
 8004f58:	2001c544 	.word	0x2001c544
 8004f5c:	2001c3b0 	.word	0x2001c3b0
 8004f60:	9003fc00 	.word	0x9003fc00

08004f64 <SendFrameThread>:
    }
}


VOID SendFrameThread(ULONG init)
{
 8004f64:	b580      	push	{r7, lr}
 8004f66:	b082      	sub	sp, #8
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	6078      	str	r0, [r7, #4]

    while(1)
    {
    	if(CameraBufferData[0].tx_semaphore_count >= 1)
 8004f6c:	4b12      	ldr	r3, [pc, #72]	; (8004fb8 <SendFrameThread+0x54>)
 8004f6e:	689b      	ldr	r3, [r3, #8]
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d008      	beq.n	8004f86 <SendFrameThread+0x22>
    	{
    		//Send Frame1 Here
    		Frame0Send++;
 8004f74:	4b11      	ldr	r3, [pc, #68]	; (8004fbc <SendFrameThread+0x58>)
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	3301      	adds	r3, #1
 8004f7a:	4a10      	ldr	r2, [pc, #64]	; (8004fbc <SendFrameThread+0x58>)
 8004f7c:	6013      	str	r3, [r2, #0]
    		tx_semaphore_get(&CameraBufferData[0],TX_NO_WAIT);
 8004f7e:	2100      	movs	r1, #0
 8004f80:	480d      	ldr	r0, [pc, #52]	; (8004fb8 <SendFrameThread+0x54>)
 8004f82:	f00e fd67 	bl	8013a54 <_txe_semaphore_get>
    	}

    	if(CameraBufferData[1].tx_semaphore_count >= 1)
 8004f86:	4b0c      	ldr	r3, [pc, #48]	; (8004fb8 <SendFrameThread+0x54>)
 8004f88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d008      	beq.n	8004fa0 <SendFrameThread+0x3c>
    	{
    		//Send Frame2 Here
    		Frame1Send++;
 8004f8e:	4b0c      	ldr	r3, [pc, #48]	; (8004fc0 <SendFrameThread+0x5c>)
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	3301      	adds	r3, #1
 8004f94:	4a0a      	ldr	r2, [pc, #40]	; (8004fc0 <SendFrameThread+0x5c>)
 8004f96:	6013      	str	r3, [r2, #0]
    		tx_semaphore_get(&CameraBufferData[1],TX_NO_WAIT);
 8004f98:	2100      	movs	r1, #0
 8004f9a:	480a      	ldr	r0, [pc, #40]	; (8004fc4 <SendFrameThread+0x60>)
 8004f9c:	f00e fd5a 	bl	8013a54 <_txe_semaphore_get>
    	}

    	if(CameraBufferData[1].tx_semaphore_count == 0 && CameraBufferData[0].tx_semaphore_count == 0)
 8004fa0:	4b05      	ldr	r3, [pc, #20]	; (8004fb8 <SendFrameThread+0x54>)
 8004fa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d1e1      	bne.n	8004f6c <SendFrameThread+0x8>
 8004fa8:	4b03      	ldr	r3, [pc, #12]	; (8004fb8 <SendFrameThread+0x54>)
 8004faa:	689b      	ldr	r3, [r3, #8]
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d1dd      	bne.n	8004f6c <SendFrameThread+0x8>
    	{
            tx_thread_relinquish();
 8004fb0:	f00e fea2 	bl	8013cf8 <_txe_thread_relinquish>
    	if(CameraBufferData[0].tx_semaphore_count >= 1)
 8004fb4:	e7da      	b.n	8004f6c <SendFrameThread+0x8>
 8004fb6:	bf00      	nop
 8004fb8:	2001c544 	.word	0x2001c544
 8004fbc:	2001be28 	.word	0x2001be28
 8004fc0:	2001be2c 	.word	0x2001be2c
 8004fc4:	2001c560 	.word	0x2001c560

08004fc8 <HAL_DCMI_FrameEventCallback>:
}


static uint32_t FrameCount = 0;
void HAL_DCMI_FrameEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8004fc8:	b580      	push	{r7, lr}
 8004fca:	b082      	sub	sp, #8
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	6078      	str	r0, [r7, #4]
	BSP_CameraStop();
 8004fd0:	f7fc fabe 	bl	8001550 <BSP_CameraStop>
	if(FrameCount % 2 == 0)
 8004fd4:	4b0d      	ldr	r3, [pc, #52]	; (800500c <HAL_DCMI_FrameEventCallback+0x44>)
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f003 0301 	and.w	r3, r3, #1
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d107      	bne.n	8004ff0 <HAL_DCMI_FrameEventCallback+0x28>
	{
		HAL_DCACHE_CleanInvalidByAddr_IT(&hdcache1, (const uint32_t *const)CAMERA_FRAMEBUFFER1_ADDR, CAMERA_DATA_SIZE_BYTES);
 8004fe0:	f44f 327f 	mov.w	r2, #261120	; 0x3fc00
 8004fe4:	f04f 4110 	mov.w	r1, #2415919104	; 0x90000000
 8004fe8:	4809      	ldr	r0, [pc, #36]	; (8005010 <HAL_DCMI_FrameEventCallback+0x48>)
 8004fea:	f002 f896 	bl	800711a <HAL_DCACHE_CleanInvalidByAddr_IT>
 8004fee:	e005      	b.n	8004ffc <HAL_DCMI_FrameEventCallback+0x34>

	} else
	{
		HAL_DCACHE_CleanInvalidByAddr_IT(&hdcache1, (const uint32_t *const)CAMERA_FRAMEBUFFER2_ADDR, CAMERA_DATA_SIZE_BYTES);
 8004ff0:	f44f 327f 	mov.w	r2, #261120	; 0x3fc00
 8004ff4:	4907      	ldr	r1, [pc, #28]	; (8005014 <HAL_DCMI_FrameEventCallback+0x4c>)
 8004ff6:	4806      	ldr	r0, [pc, #24]	; (8005010 <HAL_DCMI_FrameEventCallback+0x48>)
 8004ff8:	f002 f88f 	bl	800711a <HAL_DCACHE_CleanInvalidByAddr_IT>
	}
	tx_thread_resume(&CaptureFrameThreadPtr);
 8004ffc:	4806      	ldr	r0, [pc, #24]	; (8005018 <HAL_DCMI_FrameEventCallback+0x50>)
 8004ffe:	f00e fe97 	bl	8013d30 <_txe_thread_resume>

}
 8005002:	bf00      	nop
 8005004:	3708      	adds	r7, #8
 8005006:	46bd      	mov	sp, r7
 8005008:	bd80      	pop	{r7, pc}
 800500a:	bf00      	nop
 800500c:	2001c57c 	.word	0x2001c57c
 8005010:	2001c5a8 	.word	0x2001c5a8
 8005014:	9003fc00 	.word	0x9003fc00
 8005018:	2001c3b0 	.word	0x2001c3b0

0800501c <HAL_DCACHE_CleanAndInvalidateByAddrCallback>:

void HAL_DCACHE_CleanAndInvalidateByAddrCallback(DCACHE_HandleTypeDef *hdcache)
{
 800501c:	b580      	push	{r7, lr}
 800501e:	b082      	sub	sp, #8
 8005020:	af00      	add	r7, sp, #0
 8005022:	6078      	str	r0, [r7, #4]

	if((FrameCount % 2)== 0)
 8005024:	4b0a      	ldr	r3, [pc, #40]	; (8005050 <HAL_DCACHE_CleanAndInvalidateByAddrCallback+0x34>)
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f003 0301 	and.w	r3, r3, #1
 800502c:	2b00      	cmp	r3, #0
 800502e:	d103      	bne.n	8005038 <HAL_DCACHE_CleanAndInvalidateByAddrCallback+0x1c>
	{
		tx_semaphore_put(&CameraBufferData[0]);
 8005030:	4808      	ldr	r0, [pc, #32]	; (8005054 <HAL_DCACHE_CleanAndInvalidateByAddrCallback+0x38>)
 8005032:	f00e fd51 	bl	8013ad8 <_txe_semaphore_put>
 8005036:	e002      	b.n	800503e <HAL_DCACHE_CleanAndInvalidateByAddrCallback+0x22>
	} else
	{
		tx_semaphore_put(&CameraBufferData[1]);
 8005038:	4807      	ldr	r0, [pc, #28]	; (8005058 <HAL_DCACHE_CleanAndInvalidateByAddrCallback+0x3c>)
 800503a:	f00e fd4d 	bl	8013ad8 <_txe_semaphore_put>
	}
	FrameCount++;
 800503e:	4b04      	ldr	r3, [pc, #16]	; (8005050 <HAL_DCACHE_CleanAndInvalidateByAddrCallback+0x34>)
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	3301      	adds	r3, #1
 8005044:	4a02      	ldr	r2, [pc, #8]	; (8005050 <HAL_DCACHE_CleanAndInvalidateByAddrCallback+0x34>)
 8005046:	6013      	str	r3, [r2, #0]
}
 8005048:	bf00      	nop
 800504a:	3708      	adds	r7, #8
 800504c:	46bd      	mov	sp, r7
 800504e:	bd80      	pop	{r7, pc}
 8005050:	2001c57c 	.word	0x2001c57c
 8005054:	2001c544 	.word	0x2001c544
 8005058:	2001c560 	.word	0x2001c560

0800505c <MX_CORDIC_Init>:

CORDIC_HandleTypeDef hcordic;

/* CORDIC init function */
void MX_CORDIC_Init(void)
{
 800505c:	b580      	push	{r7, lr}
 800505e:	af00      	add	r7, sp, #0
  /* USER CODE END CORDIC_Init 0 */

  /* USER CODE BEGIN CORDIC_Init 1 */

  /* USER CODE END CORDIC_Init 1 */
  hcordic.Instance = CORDIC;
 8005060:	4b06      	ldr	r3, [pc, #24]	; (800507c <MX_CORDIC_Init+0x20>)
 8005062:	4a07      	ldr	r2, [pc, #28]	; (8005080 <MX_CORDIC_Init+0x24>)
 8005064:	601a      	str	r2, [r3, #0]
  if (HAL_CORDIC_Init(&hcordic) != HAL_OK)
 8005066:	4805      	ldr	r0, [pc, #20]	; (800507c <MX_CORDIC_Init+0x20>)
 8005068:	f001 fec2 	bl	8006df0 <HAL_CORDIC_Init>
 800506c:	4603      	mov	r3, r0
 800506e:	2b00      	cmp	r3, #0
 8005070:	d001      	beq.n	8005076 <MX_CORDIC_Init+0x1a>
  {
    Error_Handler();
 8005072:	f000 fff3 	bl	800605c <Error_Handler>
  }
  /* USER CODE BEGIN CORDIC_Init 2 */

  /* USER CODE END CORDIC_Init 2 */

}
 8005076:	bf00      	nop
 8005078:	bd80      	pop	{r7, pc}
 800507a:	bf00      	nop
 800507c:	2001c580 	.word	0x2001c580
 8005080:	40021000 	.word	0x40021000

08005084 <HAL_CORDIC_MspInit>:

void HAL_CORDIC_MspInit(CORDIC_HandleTypeDef* cordicHandle)
{
 8005084:	b480      	push	{r7}
 8005086:	b085      	sub	sp, #20
 8005088:	af00      	add	r7, sp, #0
 800508a:	6078      	str	r0, [r7, #4]

  if(cordicHandle->Instance==CORDIC)
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	4a0b      	ldr	r2, [pc, #44]	; (80050c0 <HAL_CORDIC_MspInit+0x3c>)
 8005092:	4293      	cmp	r3, r2
 8005094:	d10e      	bne.n	80050b4 <HAL_CORDIC_MspInit+0x30>
  {
  /* USER CODE BEGIN CORDIC_MspInit 0 */

  /* USER CODE END CORDIC_MspInit 0 */
    /* CORDIC clock enable */
    __HAL_RCC_CORDIC_CLK_ENABLE();
 8005096:	4b0b      	ldr	r3, [pc, #44]	; (80050c4 <HAL_CORDIC_MspInit+0x40>)
 8005098:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800509c:	4a09      	ldr	r2, [pc, #36]	; (80050c4 <HAL_CORDIC_MspInit+0x40>)
 800509e:	f043 0302 	orr.w	r3, r3, #2
 80050a2:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 80050a6:	4b07      	ldr	r3, [pc, #28]	; (80050c4 <HAL_CORDIC_MspInit+0x40>)
 80050a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050ac:	f003 0302 	and.w	r3, r3, #2
 80050b0:	60fb      	str	r3, [r7, #12]
 80050b2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CORDIC_MspInit 1 */

  /* USER CODE END CORDIC_MspInit 1 */
  }
}
 80050b4:	bf00      	nop
 80050b6:	3714      	adds	r7, #20
 80050b8:	46bd      	mov	sp, r7
 80050ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050be:	4770      	bx	lr
 80050c0:	40021000 	.word	0x40021000
 80050c4:	46020c00 	.word	0x46020c00

080050c8 <MX_DCACHE1_Init>:

DCACHE_HandleTypeDef hdcache1;

/* DCACHE1 init function */
void MX_DCACHE1_Init(void)
{
 80050c8:	b580      	push	{r7, lr}
 80050ca:	af00      	add	r7, sp, #0
  /* USER CODE END DCACHE1_Init 0 */

  /* USER CODE BEGIN DCACHE1_Init 1 */

  /* USER CODE END DCACHE1_Init 1 */
  hdcache1.Instance = DCACHE1;
 80050cc:	4b07      	ldr	r3, [pc, #28]	; (80050ec <MX_DCACHE1_Init+0x24>)
 80050ce:	4a08      	ldr	r2, [pc, #32]	; (80050f0 <MX_DCACHE1_Init+0x28>)
 80050d0:	601a      	str	r2, [r3, #0]
  hdcache1.Init.ReadBurstType = DCACHE_READ_BURST_WRAP;
 80050d2:	4b06      	ldr	r3, [pc, #24]	; (80050ec <MX_DCACHE1_Init+0x24>)
 80050d4:	2200      	movs	r2, #0
 80050d6:	605a      	str	r2, [r3, #4]
  if (HAL_DCACHE_Init(&hdcache1) != HAL_OK)
 80050d8:	4804      	ldr	r0, [pc, #16]	; (80050ec <MX_DCACHE1_Init+0x24>)
 80050da:	f001 ff9b 	bl	8007014 <HAL_DCACHE_Init>
 80050de:	4603      	mov	r3, r0
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d001      	beq.n	80050e8 <MX_DCACHE1_Init+0x20>
  {
    Error_Handler();
 80050e4:	f000 ffba 	bl	800605c <Error_Handler>
  }
  /* USER CODE BEGIN DCACHE1_Init 2 */

  /* USER CODE END DCACHE1_Init 2 */

}
 80050e8:	bf00      	nop
 80050ea:	bd80      	pop	{r7, pc}
 80050ec:	2001c5a8 	.word	0x2001c5a8
 80050f0:	40031400 	.word	0x40031400

080050f4 <MX_DCMI_Init>:

DCMI_HandleTypeDef hdcmi;

/* DCMI init function */
void MX_DCMI_Init(void)
{
 80050f4:	b580      	push	{r7, lr}
 80050f6:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */

  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 80050f8:	4b16      	ldr	r3, [pc, #88]	; (8005154 <MX_DCMI_Init+0x60>)
 80050fa:	4a17      	ldr	r2, [pc, #92]	; (8005158 <MX_DCMI_Init+0x64>)
 80050fc:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 80050fe:	4b15      	ldr	r3, [pc, #84]	; (8005154 <MX_DCMI_Init+0x60>)
 8005100:	2200      	movs	r2, #0
 8005102:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_RISING;
 8005104:	4b13      	ldr	r3, [pc, #76]	; (8005154 <MX_DCMI_Init+0x60>)
 8005106:	2220      	movs	r2, #32
 8005108:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_HIGH;
 800510a:	4b12      	ldr	r3, [pc, #72]	; (8005154 <MX_DCMI_Init+0x60>)
 800510c:	2280      	movs	r2, #128	; 0x80
 800510e:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_HIGH;
 8005110:	4b10      	ldr	r3, [pc, #64]	; (8005154 <MX_DCMI_Init+0x60>)
 8005112:	2240      	movs	r2, #64	; 0x40
 8005114:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 8005116:	4b0f      	ldr	r3, [pc, #60]	; (8005154 <MX_DCMI_Init+0x60>)
 8005118:	2200      	movs	r2, #0
 800511a:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 800511c:	4b0d      	ldr	r3, [pc, #52]	; (8005154 <MX_DCMI_Init+0x60>)
 800511e:	2200      	movs	r2, #0
 8005120:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 8005122:	4b0c      	ldr	r3, [pc, #48]	; (8005154 <MX_DCMI_Init+0x60>)
 8005124:	2200      	movs	r2, #0
 8005126:	621a      	str	r2, [r3, #32]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 8005128:	4b0a      	ldr	r3, [pc, #40]	; (8005154 <MX_DCMI_Init+0x60>)
 800512a:	2200      	movs	r2, #0
 800512c:	625a      	str	r2, [r3, #36]	; 0x24
  hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 800512e:	4b09      	ldr	r3, [pc, #36]	; (8005154 <MX_DCMI_Init+0x60>)
 8005130:	2200      	movs	r2, #0
 8005132:	629a      	str	r2, [r3, #40]	; 0x28
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 8005134:	4b07      	ldr	r3, [pc, #28]	; (8005154 <MX_DCMI_Init+0x60>)
 8005136:	2200      	movs	r2, #0
 8005138:	62da      	str	r2, [r3, #44]	; 0x2c
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 800513a:	4b06      	ldr	r3, [pc, #24]	; (8005154 <MX_DCMI_Init+0x60>)
 800513c:	2200      	movs	r2, #0
 800513e:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 8005140:	4804      	ldr	r0, [pc, #16]	; (8005154 <MX_DCMI_Init+0x60>)
 8005142:	f002 f90b 	bl	800735c <HAL_DCMI_Init>
 8005146:	4603      	mov	r3, r0
 8005148:	2b00      	cmp	r3, #0
 800514a:	d001      	beq.n	8005150 <MX_DCMI_Init+0x5c>
  {
    Error_Handler();
 800514c:	f000 ff86 	bl	800605c <Error_Handler>
  }
  /* USER CODE BEGIN DCMI_Init 2 */

  /* USER CODE END DCMI_Init 2 */

}
 8005150:	bf00      	nop
 8005152:	bd80      	pop	{r7, pc}
 8005154:	2001c5d4 	.word	0x2001c5d4
 8005158:	4202c000 	.word	0x4202c000

0800515c <HAL_DCMI_MspInit>:

void HAL_DCMI_MspInit(DCMI_HandleTypeDef* dcmiHandle)
{
 800515c:	b580      	push	{r7, lr}
 800515e:	b08e      	sub	sp, #56	; 0x38
 8005160:	af00      	add	r7, sp, #0
 8005162:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005164:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005168:	2200      	movs	r2, #0
 800516a:	601a      	str	r2, [r3, #0]
 800516c:	605a      	str	r2, [r3, #4]
 800516e:	609a      	str	r2, [r3, #8]
 8005170:	60da      	str	r2, [r3, #12]
 8005172:	611a      	str	r2, [r3, #16]
  if(dcmiHandle->Instance==DCMI)
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	4a6d      	ldr	r2, [pc, #436]	; (8005330 <HAL_DCMI_MspInit+0x1d4>)
 800517a:	4293      	cmp	r3, r2
 800517c:	f040 80d3 	bne.w	8005326 <HAL_DCMI_MspInit+0x1ca>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */

  /* USER CODE END DCMI_MspInit 0 */
    /* DCMI clock enable */
    __HAL_RCC_DCMI_PSSI_CLK_ENABLE();
 8005180:	4b6c      	ldr	r3, [pc, #432]	; (8005334 <HAL_DCMI_MspInit+0x1d8>)
 8005182:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005186:	4a6b      	ldr	r2, [pc, #428]	; (8005334 <HAL_DCMI_MspInit+0x1d8>)
 8005188:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800518c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8005190:	4b68      	ldr	r3, [pc, #416]	; (8005334 <HAL_DCMI_MspInit+0x1d8>)
 8005192:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005196:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800519a:	623b      	str	r3, [r7, #32]
 800519c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOI_CLK_ENABLE();
 800519e:	4b65      	ldr	r3, [pc, #404]	; (8005334 <HAL_DCMI_MspInit+0x1d8>)
 80051a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80051a4:	4a63      	ldr	r2, [pc, #396]	; (8005334 <HAL_DCMI_MspInit+0x1d8>)
 80051a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80051aa:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80051ae:	4b61      	ldr	r3, [pc, #388]	; (8005334 <HAL_DCMI_MspInit+0x1d8>)
 80051b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80051b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051b8:	61fb      	str	r3, [r7, #28]
 80051ba:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80051bc:	4b5d      	ldr	r3, [pc, #372]	; (8005334 <HAL_DCMI_MspInit+0x1d8>)
 80051be:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80051c2:	4a5c      	ldr	r2, [pc, #368]	; (8005334 <HAL_DCMI_MspInit+0x1d8>)
 80051c4:	f043 0310 	orr.w	r3, r3, #16
 80051c8:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80051cc:	4b59      	ldr	r3, [pc, #356]	; (8005334 <HAL_DCMI_MspInit+0x1d8>)
 80051ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80051d2:	f003 0310 	and.w	r3, r3, #16
 80051d6:	61bb      	str	r3, [r7, #24]
 80051d8:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80051da:	4b56      	ldr	r3, [pc, #344]	; (8005334 <HAL_DCMI_MspInit+0x1d8>)
 80051dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80051e0:	4a54      	ldr	r2, [pc, #336]	; (8005334 <HAL_DCMI_MspInit+0x1d8>)
 80051e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80051e6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80051ea:	4b52      	ldr	r3, [pc, #328]	; (8005334 <HAL_DCMI_MspInit+0x1d8>)
 80051ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80051f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051f4:	617b      	str	r3, [r7, #20]
 80051f6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80051f8:	4b4e      	ldr	r3, [pc, #312]	; (8005334 <HAL_DCMI_MspInit+0x1d8>)
 80051fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80051fe:	4a4d      	ldr	r2, [pc, #308]	; (8005334 <HAL_DCMI_MspInit+0x1d8>)
 8005200:	f043 0302 	orr.w	r3, r3, #2
 8005204:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8005208:	4b4a      	ldr	r3, [pc, #296]	; (8005334 <HAL_DCMI_MspInit+0x1d8>)
 800520a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800520e:	f003 0302 	and.w	r3, r3, #2
 8005212:	613b      	str	r3, [r7, #16]
 8005214:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005216:	4b47      	ldr	r3, [pc, #284]	; (8005334 <HAL_DCMI_MspInit+0x1d8>)
 8005218:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800521c:	4a45      	ldr	r2, [pc, #276]	; (8005334 <HAL_DCMI_MspInit+0x1d8>)
 800521e:	f043 0304 	orr.w	r3, r3, #4
 8005222:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8005226:	4b43      	ldr	r3, [pc, #268]	; (8005334 <HAL_DCMI_MspInit+0x1d8>)
 8005228:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800522c:	f003 0304 	and.w	r3, r3, #4
 8005230:	60fb      	str	r3, [r7, #12]
 8005232:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005234:	4b3f      	ldr	r3, [pc, #252]	; (8005334 <HAL_DCMI_MspInit+0x1d8>)
 8005236:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800523a:	4a3e      	ldr	r2, [pc, #248]	; (8005334 <HAL_DCMI_MspInit+0x1d8>)
 800523c:	f043 0301 	orr.w	r3, r3, #1
 8005240:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8005244:	4b3b      	ldr	r3, [pc, #236]	; (8005334 <HAL_DCMI_MspInit+0x1d8>)
 8005246:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800524a:	f003 0301 	and.w	r3, r3, #1
 800524e:	60bb      	str	r3, [r7, #8]
 8005250:	68bb      	ldr	r3, [r7, #8]
    PC8     ------> DCMI_D2
    PC7     ------> DCMI_D1
    PC6     ------> DCMI_D0
    PA6     ------> DCMI_PIXCLK
    */
    GPIO_InitStruct.Pin = CAM_D6_Pin|CAM_D5_Pin|CAM_D7_Pin;
 8005252:	23d0      	movs	r3, #208	; 0xd0
 8005254:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005256:	2302      	movs	r3, #2
 8005258:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800525a:	2300      	movs	r3, #0
 800525c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800525e:	2303      	movs	r3, #3
 8005260:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_DCMI;
 8005262:	230a      	movs	r3, #10
 8005264:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8005266:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800526a:	4619      	mov	r1, r3
 800526c:	4832      	ldr	r0, [pc, #200]	; (8005338 <HAL_DCMI_MspInit+0x1dc>)
 800526e:	f003 fe59 	bl	8008f24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CAM_D3_Pin;
 8005272:	2302      	movs	r3, #2
 8005274:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005276:	2302      	movs	r3, #2
 8005278:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800527a:	2300      	movs	r3, #0
 800527c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800527e:	2303      	movs	r3, #3
 8005280:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_DCMI;
 8005282:	230a      	movs	r3, #10
 8005284:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(CAM_D3_GPIO_Port, &GPIO_InitStruct);
 8005286:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800528a:	4619      	mov	r1, r3
 800528c:	482b      	ldr	r0, [pc, #172]	; (800533c <HAL_DCMI_MspInit+0x1e0>)
 800528e:	f003 fe49 	bl	8008f24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CAM_D4_Pin|CAM_HSYNC_Pin;
 8005292:	f44f 4382 	mov.w	r3, #16640	; 0x4100
 8005296:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005298:	2302      	movs	r3, #2
 800529a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800529c:	2300      	movs	r3, #0
 800529e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80052a0:	2303      	movs	r3, #3
 80052a2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_DCMI;
 80052a4:	230a      	movs	r3, #10
 80052a6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80052a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80052ac:	4619      	mov	r1, r3
 80052ae:	4824      	ldr	r0, [pc, #144]	; (8005340 <HAL_DCMI_MspInit+0x1e4>)
 80052b0:	f003 fe38 	bl	8008f24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CAM_VSYNC_Pin;
 80052b4:	2380      	movs	r3, #128	; 0x80
 80052b6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80052b8:	2302      	movs	r3, #2
 80052ba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80052bc:	2300      	movs	r3, #0
 80052be:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80052c0:	2303      	movs	r3, #3
 80052c2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_DCMI;
 80052c4:	230a      	movs	r3, #10
 80052c6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(CAM_VSYNC_GPIO_Port, &GPIO_InitStruct);
 80052c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80052cc:	4619      	mov	r1, r3
 80052ce:	481d      	ldr	r0, [pc, #116]	; (8005344 <HAL_DCMI_MspInit+0x1e8>)
 80052d0:	f003 fe28 	bl	8008f24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CAM_D2_Pin|CAM_D1_Pin|CAM_D0_Pin;
 80052d4:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 80052d8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80052da:	2302      	movs	r3, #2
 80052dc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80052de:	2300      	movs	r3, #0
 80052e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80052e2:	2303      	movs	r3, #3
 80052e4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_DCMI;
 80052e6:	230a      	movs	r3, #10
 80052e8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80052ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80052ee:	4619      	mov	r1, r3
 80052f0:	4815      	ldr	r0, [pc, #84]	; (8005348 <HAL_DCMI_MspInit+0x1ec>)
 80052f2:	f003 fe17 	bl	8008f24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CAM_PIXCLK_Pin;
 80052f6:	2340      	movs	r3, #64	; 0x40
 80052f8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80052fa:	2302      	movs	r3, #2
 80052fc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80052fe:	2300      	movs	r3, #0
 8005300:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005302:	2303      	movs	r3, #3
 8005304:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_DCMI;
 8005306:	2304      	movs	r3, #4
 8005308:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(CAM_PIXCLK_GPIO_Port, &GPIO_InitStruct);
 800530a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800530e:	4619      	mov	r1, r3
 8005310:	480e      	ldr	r0, [pc, #56]	; (800534c <HAL_DCMI_MspInit+0x1f0>)
 8005312:	f003 fe07 	bl	8008f24 <HAL_GPIO_Init>

    /* DCMI interrupt Init */
    HAL_NVIC_SetPriority(DCMI_PSSI_IRQn, 12, 0);
 8005316:	2200      	movs	r2, #0
 8005318:	210c      	movs	r1, #12
 800531a:	2077      	movs	r0, #119	; 0x77
 800531c:	f001 fe52 	bl	8006fc4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DCMI_PSSI_IRQn);
 8005320:	2077      	movs	r0, #119	; 0x77
 8005322:	f001 fe69 	bl	8006ff8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DCMI_MspInit 1 */

  /* USER CODE END DCMI_MspInit 1 */
  }
}
 8005326:	bf00      	nop
 8005328:	3738      	adds	r7, #56	; 0x38
 800532a:	46bd      	mov	sp, r7
 800532c:	bd80      	pop	{r7, pc}
 800532e:	bf00      	nop
 8005330:	4202c000 	.word	0x4202c000
 8005334:	46020c00 	.word	0x46020c00
 8005338:	42022000 	.word	0x42022000
 800533c:	42021000 	.word	0x42021000
 8005340:	42021c00 	.word	0x42021c00
 8005344:	42020400 	.word	0x42020400
 8005348:	42020800 	.word	0x42020800
 800534c:	42020000 	.word	0x42020000

08005350 <MX_GPDMA1_Init>:
DMA_HandleTypeDef handle_GPDMA1_Channel12;
DMA_HandleTypeDef handle_GPDMA1_Channel12;

/* GPDMA1 init function */
void MX_GPDMA1_Init(void)
{
 8005350:	b580      	push	{r7, lr}
 8005352:	b082      	sub	sp, #8
 8005354:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Init 0 */

  /* USER CODE END GPDMA1_Init 0 */

  /* Peripheral clock enable */
  __HAL_RCC_GPDMA1_CLK_ENABLE();
 8005356:	4b26      	ldr	r3, [pc, #152]	; (80053f0 <MX_GPDMA1_Init+0xa0>)
 8005358:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800535c:	4a24      	ldr	r2, [pc, #144]	; (80053f0 <MX_GPDMA1_Init+0xa0>)
 800535e:	f043 0301 	orr.w	r3, r3, #1
 8005362:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8005366:	4b22      	ldr	r3, [pc, #136]	; (80053f0 <MX_GPDMA1_Init+0xa0>)
 8005368:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800536c:	f003 0301 	and.w	r3, r3, #1
 8005370:	607b      	str	r3, [r7, #4]
 8005372:	687b      	ldr	r3, [r7, #4]

  /* GPDMA1 interrupt Init */
    HAL_NVIC_SetPriority(GPDMA1_Channel12_IRQn, 12, 0);
 8005374:	2200      	movs	r2, #0
 8005376:	210c      	movs	r1, #12
 8005378:	2054      	movs	r0, #84	; 0x54
 800537a:	f001 fe23 	bl	8006fc4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel12_IRQn);
 800537e:	2054      	movs	r0, #84	; 0x54
 8005380:	f001 fe3a 	bl	8006ff8 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN GPDMA1_Init 1 */

  /* USER CODE END GPDMA1_Init 1 */
  handle_GPDMA1_Channel12.Instance = GPDMA1_Channel12;
 8005384:	4b1b      	ldr	r3, [pc, #108]	; (80053f4 <MX_GPDMA1_Init+0xa4>)
 8005386:	4a1c      	ldr	r2, [pc, #112]	; (80053f8 <MX_GPDMA1_Init+0xa8>)
 8005388:	601a      	str	r2, [r3, #0]
  handle_GPDMA1_Channel12.InitLinkedList.Priority = DMA_LOW_PRIORITY_LOW_WEIGHT;
 800538a:	4b1a      	ldr	r3, [pc, #104]	; (80053f4 <MX_GPDMA1_Init+0xa4>)
 800538c:	2200      	movs	r2, #0
 800538e:	639a      	str	r2, [r3, #56]	; 0x38
  handle_GPDMA1_Channel12.InitLinkedList.LinkStepMode = DMA_LSM_FULL_EXECUTION;
 8005390:	4b18      	ldr	r3, [pc, #96]	; (80053f4 <MX_GPDMA1_Init+0xa4>)
 8005392:	2200      	movs	r2, #0
 8005394:	63da      	str	r2, [r3, #60]	; 0x3c
  handle_GPDMA1_Channel12.InitLinkedList.LinkAllocatedPort = DMA_LINK_ALLOCATED_PORT1;
 8005396:	4b17      	ldr	r3, [pc, #92]	; (80053f4 <MX_GPDMA1_Init+0xa4>)
 8005398:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800539c:	641a      	str	r2, [r3, #64]	; 0x40
  handle_GPDMA1_Channel12.InitLinkedList.TransferEventMode = DMA_TCEM_LAST_LL_ITEM_TRANSFER;
 800539e:	4b15      	ldr	r3, [pc, #84]	; (80053f4 <MX_GPDMA1_Init+0xa4>)
 80053a0:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
 80053a4:	645a      	str	r2, [r3, #68]	; 0x44
  handle_GPDMA1_Channel12.InitLinkedList.LinkedListMode = DMA_LINKEDLIST_CIRCULAR;
 80053a6:	4b13      	ldr	r3, [pc, #76]	; (80053f4 <MX_GPDMA1_Init+0xa4>)
 80053a8:	2281      	movs	r2, #129	; 0x81
 80053aa:	649a      	str	r2, [r3, #72]	; 0x48
  if (HAL_DMAEx_List_Init(&handle_GPDMA1_Channel12) != HAL_OK)
 80053ac:	4811      	ldr	r0, [pc, #68]	; (80053f4 <MX_GPDMA1_Init+0xa4>)
 80053ae:	f002 fe7f 	bl	80080b0 <HAL_DMAEx_List_Init>
 80053b2:	4603      	mov	r3, r0
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d001      	beq.n	80053bc <MX_GPDMA1_Init+0x6c>
  {
    Error_Handler();
 80053b8:	f000 fe50 	bl	800605c <Error_Handler>
  }
  if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel12, DMA_CHANNEL_PRIV) != HAL_OK)
 80053bc:	2111      	movs	r1, #17
 80053be:	480d      	ldr	r0, [pc, #52]	; (80053f4 <MX_GPDMA1_Init+0xa4>)
 80053c0:	f002 fe14 	bl	8007fec <HAL_DMA_ConfigChannelAttributes>
 80053c4:	4603      	mov	r3, r0
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d001      	beq.n	80053ce <MX_GPDMA1_Init+0x7e>
  {
    Error_Handler();
 80053ca:	f000 fe47 	bl	800605c <Error_Handler>
  }
  /* USER CODE BEGIN GPDMA1_Init 2 */
  MX_ProjectDMAQueue_Config();
 80053ce:	f000 fceb 	bl	8005da8 <MX_ProjectDMAQueue_Config>
  HAL_DMAEx_List_LinkQ(&handle_GPDMA1_Channel12, &ProjectDMAQueue);
 80053d2:	490a      	ldr	r1, [pc, #40]	; (80053fc <MX_GPDMA1_Init+0xac>)
 80053d4:	4807      	ldr	r0, [pc, #28]	; (80053f4 <MX_GPDMA1_Init+0xa4>)
 80053d6:	f003 f929 	bl	800862c <HAL_DMAEx_List_LinkQ>
  //HAL_DMAEx_List_Start(&handle_GPDMA1_Channel12);
  __HAL_LINKDMA(&hdcmi, DMA_Handle, handle_GPDMA1_Channel12);
 80053da:	4b09      	ldr	r3, [pc, #36]	; (8005400 <MX_GPDMA1_Init+0xb0>)
 80053dc:	4a05      	ldr	r2, [pc, #20]	; (80053f4 <MX_GPDMA1_Init+0xa4>)
 80053de:	649a      	str	r2, [r3, #72]	; 0x48
 80053e0:	4b04      	ldr	r3, [pc, #16]	; (80053f4 <MX_GPDMA1_Init+0xa4>)
 80053e2:	4a07      	ldr	r2, [pc, #28]	; (8005400 <MX_GPDMA1_Init+0xb0>)
 80053e4:	65da      	str	r2, [r3, #92]	; 0x5c
  /* USER CODE END GPDMA1_Init 2 */

}
 80053e6:	bf00      	nop
 80053e8:	3708      	adds	r7, #8
 80053ea:	46bd      	mov	sp, r7
 80053ec:	bd80      	pop	{r7, pc}
 80053ee:	bf00      	nop
 80053f0:	46020c00 	.word	0x46020c00
 80053f4:	2001c624 	.word	0x2001c624
 80053f8:	40020650 	.word	0x40020650
 80053fc:	2001c758 	.word	0x2001c758
 8005400:	2001c5d4 	.word	0x2001c5d4

08005404 <MX_GPIO_Init>:
     PF12   ------> OCTOSPIM_P2_DQS
     PB15   ------> UCPD1_CC2
     PB1   ------> MDF1_SDI0
*/
void MX_GPIO_Init(void)
{
 8005404:	b580      	push	{r7, lr}
 8005406:	b08e      	sub	sp, #56	; 0x38
 8005408:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800540a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800540e:	2200      	movs	r2, #0
 8005410:	601a      	str	r2, [r3, #0]
 8005412:	605a      	str	r2, [r3, #4]
 8005414:	609a      	str	r2, [r3, #8]
 8005416:	60da      	str	r2, [r3, #12]
 8005418:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800541a:	4bbf      	ldr	r3, [pc, #764]	; (8005718 <MX_GPIO_Init+0x314>)
 800541c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005420:	4abd      	ldr	r2, [pc, #756]	; (8005718 <MX_GPIO_Init+0x314>)
 8005422:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005426:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800542a:	4bbb      	ldr	r3, [pc, #748]	; (8005718 <MX_GPIO_Init+0x314>)
 800542c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005430:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005434:	623b      	str	r3, [r7, #32]
 8005436:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8005438:	4bb7      	ldr	r3, [pc, #732]	; (8005718 <MX_GPIO_Init+0x314>)
 800543a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800543e:	4ab6      	ldr	r2, [pc, #728]	; (8005718 <MX_GPIO_Init+0x314>)
 8005440:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005444:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8005448:	4bb3      	ldr	r3, [pc, #716]	; (8005718 <MX_GPIO_Init+0x314>)
 800544a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800544e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005452:	61fb      	str	r3, [r7, #28]
 8005454:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8005456:	4bb0      	ldr	r3, [pc, #704]	; (8005718 <MX_GPIO_Init+0x314>)
 8005458:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800545c:	4aae      	ldr	r2, [pc, #696]	; (8005718 <MX_GPIO_Init+0x314>)
 800545e:	f043 0304 	orr.w	r3, r3, #4
 8005462:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8005466:	4bac      	ldr	r3, [pc, #688]	; (8005718 <MX_GPIO_Init+0x314>)
 8005468:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800546c:	f003 0304 	and.w	r3, r3, #4
 8005470:	61bb      	str	r3, [r7, #24]
 8005472:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8005474:	4ba8      	ldr	r3, [pc, #672]	; (8005718 <MX_GPIO_Init+0x314>)
 8005476:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800547a:	4aa7      	ldr	r2, [pc, #668]	; (8005718 <MX_GPIO_Init+0x314>)
 800547c:	f043 0301 	orr.w	r3, r3, #1
 8005480:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8005484:	4ba4      	ldr	r3, [pc, #656]	; (8005718 <MX_GPIO_Init+0x314>)
 8005486:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800548a:	f003 0301 	and.w	r3, r3, #1
 800548e:	617b      	str	r3, [r7, #20]
 8005490:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8005492:	4ba1      	ldr	r3, [pc, #644]	; (8005718 <MX_GPIO_Init+0x314>)
 8005494:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005498:	4a9f      	ldr	r2, [pc, #636]	; (8005718 <MX_GPIO_Init+0x314>)
 800549a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800549e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80054a2:	4b9d      	ldr	r3, [pc, #628]	; (8005718 <MX_GPIO_Init+0x314>)
 80054a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80054a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054ac:	613b      	str	r3, [r7, #16]
 80054ae:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80054b0:	4b99      	ldr	r3, [pc, #612]	; (8005718 <MX_GPIO_Init+0x314>)
 80054b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80054b6:	4a98      	ldr	r2, [pc, #608]	; (8005718 <MX_GPIO_Init+0x314>)
 80054b8:	f043 0310 	orr.w	r3, r3, #16
 80054bc:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80054c0:	4b95      	ldr	r3, [pc, #596]	; (8005718 <MX_GPIO_Init+0x314>)
 80054c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80054c6:	f003 0310 	and.w	r3, r3, #16
 80054ca:	60fb      	str	r3, [r7, #12]
 80054cc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80054ce:	4b92      	ldr	r3, [pc, #584]	; (8005718 <MX_GPIO_Init+0x314>)
 80054d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80054d4:	4a90      	ldr	r2, [pc, #576]	; (8005718 <MX_GPIO_Init+0x314>)
 80054d6:	f043 0302 	orr.w	r3, r3, #2
 80054da:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80054de:	4b8e      	ldr	r3, [pc, #568]	; (8005718 <MX_GPIO_Init+0x314>)
 80054e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80054e4:	f003 0302 	and.w	r3, r3, #2
 80054e8:	60bb      	str	r3, [r7, #8]
 80054ea:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80054ec:	4b8a      	ldr	r3, [pc, #552]	; (8005718 <MX_GPIO_Init+0x314>)
 80054ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80054f2:	4a89      	ldr	r2, [pc, #548]	; (8005718 <MX_GPIO_Init+0x314>)
 80054f4:	f043 0308 	orr.w	r3, r3, #8
 80054f8:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80054fc:	4b86      	ldr	r3, [pc, #536]	; (8005718 <MX_GPIO_Init+0x314>)
 80054fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005502:	f003 0308 	and.w	r3, r3, #8
 8005506:	607b      	str	r3, [r7, #4]
 8005508:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800550a:	4b83      	ldr	r3, [pc, #524]	; (8005718 <MX_GPIO_Init+0x314>)
 800550c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005510:	4a81      	ldr	r2, [pc, #516]	; (8005718 <MX_GPIO_Init+0x314>)
 8005512:	f043 0320 	orr.w	r3, r3, #32
 8005516:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800551a:	4b7f      	ldr	r3, [pc, #508]	; (8005718 <MX_GPIO_Init+0x314>)
 800551c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005520:	f003 0320 	and.w	r3, r3, #32
 8005524:	603b      	str	r3, [r7, #0]
 8005526:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(UCPD_PWR_GPIO_Port, UCPD_PWR_Pin, GPIO_PIN_RESET);
 8005528:	2200      	movs	r2, #0
 800552a:	2120      	movs	r1, #32
 800552c:	487b      	ldr	r0, [pc, #492]	; (800571c <MX_GPIO_Init+0x318>)
 800552e:	f003 ffc7 	bl	80094c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CAM_XSDN_GPIO_Port, CAM_XSDN_Pin, GPIO_PIN_RESET);
 8005532:	2200      	movs	r2, #0
 8005534:	2108      	movs	r1, #8
 8005536:	487a      	ldr	r0, [pc, #488]	; (8005720 <MX_GPIO_Init+0x31c>)
 8005538:	f003 ffc2 	bl	80094c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CAM_RSTI_GPIO_Port, CAM_RSTI_Pin, GPIO_PIN_SET);
 800553c:	2201      	movs	r2, #1
 800553e:	2104      	movs	r1, #4
 8005540:	4877      	ldr	r0, [pc, #476]	; (8005720 <MX_GPIO_Init+0x31c>)
 8005542:	f003 ffbd 	bl	80094c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, LED_RED_Pin|LED_GREEN_Pin|Mems_VL53_xshut_Pin, GPIO_PIN_RESET);
 8005546:	2200      	movs	r2, #0
 8005548:	21c2      	movs	r1, #194	; 0xc2
 800554a:	4876      	ldr	r0, [pc, #472]	; (8005724 <MX_GPIO_Init+0x320>)
 800554c:	f003 ffb8 	bl	80094c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(WRLS_WKUP_B_GPIO_Port, WRLS_WKUP_B_Pin, GPIO_PIN_RESET);
 8005550:	2200      	movs	r2, #0
 8005552:	2140      	movs	r1, #64	; 0x40
 8005554:	4874      	ldr	r0, [pc, #464]	; (8005728 <MX_GPIO_Init+0x324>)
 8005556:	f003 ffb3 	bl	80094c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MXCHIP_NSS_GPIO_Port, MXCHIP_NSS_Pin, GPIO_PIN_SET);
 800555a:	2201      	movs	r2, #1
 800555c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005560:	486e      	ldr	r0, [pc, #440]	; (800571c <MX_GPIO_Init+0x318>)
 8005562:	f003 ffad 	bl	80094c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, Mems_STSAFE_RESET_Pin|MXCHIP_RESET_Pin, GPIO_PIN_RESET);
 8005566:	2200      	movs	r2, #0
 8005568:	f44f 4108 	mov.w	r1, #34816	; 0x8800
 800556c:	486f      	ldr	r0, [pc, #444]	; (800572c <MX_GPIO_Init+0x328>)
 800556e:	f003 ffa7 	bl	80094c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MXCHIP_FLOW_Pin;
 8005572:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005576:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8005578:	4b6d      	ldr	r3, [pc, #436]	; (8005730 <MX_GPIO_Init+0x32c>)
 800557a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800557c:	2300      	movs	r3, #0
 800557e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(MXCHIP_FLOW_GPIO_Port, &GPIO_InitStruct);
 8005580:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005584:	4619      	mov	r1, r3
 8005586:	4868      	ldr	r0, [pc, #416]	; (8005728 <MX_GPIO_Init+0x324>)
 8005588:	f003 fccc 	bl	8008f24 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = WRLS_UART4_RX_Pin|WRLS_UART4_TX_Pin;
 800558c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8005590:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005592:	2302      	movs	r3, #2
 8005594:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005596:	2300      	movs	r3, #0
 8005598:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800559a:	2300      	movs	r3, #0
 800559c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800559e:	2308      	movs	r3, #8
 80055a0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80055a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80055a6:	4619      	mov	r1, r3
 80055a8:	4862      	ldr	r0, [pc, #392]	; (8005734 <MX_GPIO_Init+0x330>)
 80055aa:	f003 fcbb 	bl	8008f24 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_UCPD_CC1_Pin;
 80055ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80055b2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80055b4:	2303      	movs	r3, #3
 80055b6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80055b8:	2300      	movs	r3, #0
 80055ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_UCPD_CC1_GPIO_Port, &GPIO_InitStruct);
 80055bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80055c0:	4619      	mov	r1, r3
 80055c2:	485d      	ldr	r0, [pc, #372]	; (8005738 <MX_GPIO_Init+0x334>)
 80055c4:	f003 fcae 	bl	8008f24 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CAM_PLUG_Pin;
 80055c8:	2302      	movs	r3, #2
 80055ca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80055cc:	2300      	movs	r3, #0
 80055ce:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80055d0:	2301      	movs	r3, #1
 80055d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CAM_PLUG_GPIO_Port, &GPIO_InitStruct);
 80055d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80055d8:	4619      	mov	r1, r3
 80055da:	4851      	ldr	r0, [pc, #324]	; (8005720 <MX_GPIO_Init+0x31c>)
 80055dc:	f003 fca2 	bl	8008f24 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OCTOSPI_F_NCS_Pin;
 80055e0:	2320      	movs	r3, #32
 80055e2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80055e4:	2302      	movs	r3, #2
 80055e6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80055e8:	2300      	movs	r3, #0
 80055ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80055ec:	2303      	movs	r3, #3
 80055ee:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_OCTOSPI2;
 80055f0:	2305      	movs	r3, #5
 80055f2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OCTOSPI_F_NCS_GPIO_Port, &GPIO_InitStruct);
 80055f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80055f8:	4619      	mov	r1, r3
 80055fa:	4849      	ldr	r0, [pc, #292]	; (8005720 <MX_GPIO_Init+0x31c>)
 80055fc:	f003 fc92 	bl	8008f24 <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin PHPin PHPin */
  GPIO_InitStruct.Pin = OCTOSPI_F_IO7_Pin|OCTOSPI_F_IO5_Pin|OCTOSPI_F_IO6_Pin|OCTOSPI_F_IO4_Pin;
 8005600:	f44f 53f0 	mov.w	r3, #7680	; 0x1e00
 8005604:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005606:	2302      	movs	r3, #2
 8005608:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800560a:	2300      	movs	r3, #0
 800560c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800560e:	2303      	movs	r3, #3
 8005610:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_OCTOSPI2;
 8005612:	2305      	movs	r3, #5
 8005614:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8005616:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800561a:	4619      	mov	r1, r3
 800561c:	4841      	ldr	r0, [pc, #260]	; (8005724 <MX_GPIO_Init+0x320>)
 800561e:	f003 fc81 	bl	8008f24 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PH3_BOOT0_Pin;
 8005622:	2308      	movs	r3, #8
 8005624:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005626:	2300      	movs	r3, #0
 8005628:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800562a:	2300      	movs	r3, #0
 800562c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PH3_BOOT0_GPIO_Port, &GPIO_InitStruct);
 800562e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005632:	4619      	mov	r1, r3
 8005634:	483b      	ldr	r0, [pc, #236]	; (8005724 <MX_GPIO_Init+0x320>)
 8005636:	f003 fc75 	bl	8008f24 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = UCPD_PWR_Pin;
 800563a:	2320      	movs	r3, #32
 800563c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800563e:	2301      	movs	r3, #1
 8005640:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005642:	2300      	movs	r3, #0
 8005644:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005646:	2300      	movs	r3, #0
 8005648:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(UCPD_PWR_GPIO_Port, &GPIO_InitStruct);
 800564a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800564e:	4619      	mov	r1, r3
 8005650:	4832      	ldr	r0, [pc, #200]	; (800571c <MX_GPIO_Init+0x318>)
 8005652:	f003 fc67 	bl	8008f24 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CAM_XSDN_Pin;
 8005656:	2308      	movs	r3, #8
 8005658:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800565a:	2301      	movs	r3, #1
 800565c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800565e:	2302      	movs	r3, #2
 8005660:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005662:	2300      	movs	r3, #0
 8005664:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(CAM_XSDN_GPIO_Port, &GPIO_InitStruct);
 8005666:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800566a:	4619      	mov	r1, r3
 800566c:	482c      	ldr	r0, [pc, #176]	; (8005720 <MX_GPIO_Init+0x31c>)
 800566e:	f003 fc59 	bl	8008f24 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CAM_RSTI_Pin;
 8005672:	2304      	movs	r3, #4
 8005674:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005676:	2301      	movs	r3, #1
 8005678:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800567a:	2301      	movs	r3, #1
 800567c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800567e:	2300      	movs	r3, #0
 8005680:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(CAM_RSTI_GPIO_Port, &GPIO_InitStruct);
 8005682:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005686:	4619      	mov	r1, r3
 8005688:	4825      	ldr	r0, [pc, #148]	; (8005720 <MX_GPIO_Init+0x31c>)
 800568a:	f003 fc4b 	bl	8008f24 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin PFPin PFPin
                           PFPin PFPin */
  GPIO_InitStruct.Pin = OCTOSPI_F_IO0_Pin|OCTOSPI_F_IO1_Pin|OCTOSPI_F_IO2_Pin|OCTOSPI_F_IO3_Pin
 800568e:	f241 031f 	movw	r3, #4127	; 0x101f
 8005692:	627b      	str	r3, [r7, #36]	; 0x24
                          |OCTOSPI_F_CLK_P_Pin|OCTOSPI_F_DQS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005694:	2302      	movs	r3, #2
 8005696:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005698:	2300      	movs	r3, #0
 800569a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800569c:	2303      	movs	r3, #3
 800569e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_OCTOSPI2;
 80056a0:	2305      	movs	r3, #5
 80056a2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80056a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80056a8:	4619      	mov	r1, r3
 80056aa:	4820      	ldr	r0, [pc, #128]	; (800572c <MX_GPIO_Init+0x328>)
 80056ac:	f003 fc3a 	bl	8008f24 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Button_Pin;
 80056b0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80056b4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80056b6:	2300      	movs	r3, #0
 80056b8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80056ba:	2300      	movs	r3, #0
 80056bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USER_Button_GPIO_Port, &GPIO_InitStruct);
 80056be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80056c2:	4619      	mov	r1, r3
 80056c4:	481b      	ldr	r0, [pc, #108]	; (8005734 <MX_GPIO_Init+0x330>)
 80056c6:	f003 fc2d 	bl	8008f24 <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin PHPin */
  GPIO_InitStruct.Pin = LED_RED_Pin|LED_GREEN_Pin|Mems_VL53_xshut_Pin;
 80056ca:	23c2      	movs	r3, #194	; 0xc2
 80056cc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80056ce:	2301      	movs	r3, #1
 80056d0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80056d2:	2300      	movs	r3, #0
 80056d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80056d6:	2300      	movs	r3, #0
 80056d8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80056da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80056de:	4619      	mov	r1, r3
 80056e0:	4810      	ldr	r0, [pc, #64]	; (8005724 <MX_GPIO_Init+0x320>)
 80056e2:	f003 fc1f 	bl	8008f24 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = USB_C_P_Pin|USB_C_PA11_Pin;
 80056e6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80056ea:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80056ec:	2302      	movs	r3, #2
 80056ee:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80056f0:	2300      	movs	r3, #0
 80056f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80056f4:	2300      	movs	r3, #0
 80056f6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 80056f8:	230a      	movs	r3, #10
 80056fa:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80056fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005700:	4619      	mov	r1, r3
 8005702:	480d      	ldr	r0, [pc, #52]	; (8005738 <MX_GPIO_Init+0x334>)
 8005704:	f003 fc0e 	bl	8008f24 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MIC_CCK1_Pin;
 8005708:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800570c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800570e:	2302      	movs	r3, #2
 8005710:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005712:	2300      	movs	r3, #0
 8005714:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005716:	e011      	b.n	800573c <MX_GPIO_Init+0x338>
 8005718:	46020c00 	.word	0x46020c00
 800571c:	42020400 	.word	0x42020400
 8005720:	42022000 	.word	0x42022000
 8005724:	42021c00 	.word	0x42021c00
 8005728:	42021800 	.word	0x42021800
 800572c:	42021400 	.word	0x42021400
 8005730:	10110000 	.word	0x10110000
 8005734:	42020800 	.word	0x42020800
 8005738:	42020000 	.word	0x42020000
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800573c:	2300      	movs	r3, #0
 800573e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_MDF1;
 8005740:	2306      	movs	r3, #6
 8005742:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(MIC_CCK1_GPIO_Port, &GPIO_InitStruct);
 8005744:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005748:	4619      	mov	r1, r3
 800574a:	4858      	ldr	r0, [pc, #352]	; (80058ac <MX_GPIO_Init+0x4a8>)
 800574c:	f003 fbea 	bl	8008f24 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = MIC_SDINx_Pin|MIC_CCK0_Pin;
 8005750:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8005754:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005756:	2302      	movs	r3, #2
 8005758:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800575a:	2300      	movs	r3, #0
 800575c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800575e:	2300      	movs	r3, #0
 8005760:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF3_ADF1;
 8005762:	2303      	movs	r3, #3
 8005764:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005766:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800576a:	4619      	mov	r1, r3
 800576c:	4850      	ldr	r0, [pc, #320]	; (80058b0 <MX_GPIO_Init+0x4ac>)
 800576e:	f003 fbd9 	bl	8008f24 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = WRLS_WKUP_B_Pin;
 8005772:	2340      	movs	r3, #64	; 0x40
 8005774:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005776:	2301      	movs	r3, #1
 8005778:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800577a:	2300      	movs	r3, #0
 800577c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800577e:	2300      	movs	r3, #0
 8005780:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(WRLS_WKUP_B_GPIO_Port, &GPIO_InitStruct);
 8005782:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005786:	4619      	mov	r1, r3
 8005788:	484a      	ldr	r0, [pc, #296]	; (80058b4 <MX_GPIO_Init+0x4b0>)
 800578a:	f003 fbcb 	bl	8008f24 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = Mems_VLX_GPIO_Pin|Mems_INT_LPS22HH_Pin;
 800578e:	2324      	movs	r3, #36	; 0x24
 8005790:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005792:	2300      	movs	r3, #0
 8005794:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005796:	2300      	movs	r3, #0
 8005798:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800579a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800579e:	4619      	mov	r1, r3
 80057a0:	4844      	ldr	r0, [pc, #272]	; (80058b4 <MX_GPIO_Init+0x4b0>)
 80057a2:	f003 fbbf 	bl	8008f24 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MXCHIP_NOTIFY_Pin;
 80057a6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80057aa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80057ac:	4b42      	ldr	r3, [pc, #264]	; (80058b8 <MX_GPIO_Init+0x4b4>)
 80057ae:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80057b0:	2300      	movs	r3, #0
 80057b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(MXCHIP_NOTIFY_GPIO_Port, &GPIO_InitStruct);
 80057b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80057b8:	4619      	mov	r1, r3
 80057ba:	4840      	ldr	r0, [pc, #256]	; (80058bc <MX_GPIO_Init+0x4b8>)
 80057bc:	f003 fbb2 	bl	8008f24 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = USB_UCPD_FLT_Pin|Mems_ISM330DLC_INT1_Pin;
 80057c0:	f44f 6310 	mov.w	r3, #2304	; 0x900
 80057c4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80057c6:	2300      	movs	r3, #0
 80057c8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80057ca:	2300      	movs	r3, #0
 80057cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80057ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80057d2:	4619      	mov	r1, r3
 80057d4:	4836      	ldr	r0, [pc, #216]	; (80058b0 <MX_GPIO_Init+0x4ac>)
 80057d6:	f003 fba5 	bl	8008f24 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = Mems_INT_IIS2MDC_Pin|USB_IANA_Pin;
 80057da:	f44f 5310 	mov.w	r3, #9216	; 0x2400
 80057de:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80057e0:	2300      	movs	r3, #0
 80057e2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80057e4:	2300      	movs	r3, #0
 80057e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80057e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80057ec:	4619      	mov	r1, r3
 80057ee:	4833      	ldr	r0, [pc, #204]	; (80058bc <MX_GPIO_Init+0x4b8>)
 80057f0:	f003 fb98 	bl	8008f24 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_VBUS_SENSE_Pin;
 80057f4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80057f8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80057fa:	2300      	movs	r3, #0
 80057fc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80057fe:	2300      	movs	r3, #0
 8005800:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_VBUS_SENSE_GPIO_Port, &GPIO_InitStruct);
 8005802:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005806:	4619      	mov	r1, r3
 8005808:	4828      	ldr	r0, [pc, #160]	; (80058ac <MX_GPIO_Init+0x4a8>)
 800580a:	f003 fb8b 	bl	8008f24 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MXCHIP_NSS_Pin;
 800580e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005812:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005814:	2301      	movs	r3, #1
 8005816:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005818:	2300      	movs	r3, #0
 800581a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800581c:	2302      	movs	r3, #2
 800581e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(MXCHIP_NSS_GPIO_Port, &GPIO_InitStruct);
 8005820:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005824:	4619      	mov	r1, r3
 8005826:	4826      	ldr	r0, [pc, #152]	; (80058c0 <MX_GPIO_Init+0x4bc>)
 8005828:	f003 fb7c 	bl	8008f24 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_UCPD_CC2_Pin;
 800582c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005830:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005832:	2303      	movs	r3, #3
 8005834:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005836:	2300      	movs	r3, #0
 8005838:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_UCPD_CC2_GPIO_Port, &GPIO_InitStruct);
 800583a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800583e:	4619      	mov	r1, r3
 8005840:	481f      	ldr	r0, [pc, #124]	; (80058c0 <MX_GPIO_Init+0x4bc>)
 8005842:	f003 fb6f 	bl	8008f24 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Mems_STSAFE_RESET_Pin;
 8005846:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800584a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800584c:	2301      	movs	r3, #1
 800584e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005850:	2300      	movs	r3, #0
 8005852:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005854:	2300      	movs	r3, #0
 8005856:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(Mems_STSAFE_RESET_GPIO_Port, &GPIO_InitStruct);
 8005858:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800585c:	4619      	mov	r1, r3
 800585e:	4813      	ldr	r0, [pc, #76]	; (80058ac <MX_GPIO_Init+0x4a8>)
 8005860:	f003 fb60 	bl	8008f24 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MIC_SDIN0_Pin;
 8005864:	2302      	movs	r3, #2
 8005866:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005868:	2302      	movs	r3, #2
 800586a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800586c:	2300      	movs	r3, #0
 800586e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005870:	2300      	movs	r3, #0
 8005872:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_MDF1;
 8005874:	2306      	movs	r3, #6
 8005876:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(MIC_SDIN0_GPIO_Port, &GPIO_InitStruct);
 8005878:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800587c:	4619      	mov	r1, r3
 800587e:	4810      	ldr	r0, [pc, #64]	; (80058c0 <MX_GPIO_Init+0x4bc>)
 8005880:	f003 fb50 	bl	8008f24 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MXCHIP_RESET_Pin;
 8005884:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005888:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800588a:	2301      	movs	r3, #1
 800588c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800588e:	2300      	movs	r3, #0
 8005890:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005892:	2302      	movs	r3, #2
 8005894:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(MXCHIP_RESET_GPIO_Port, &GPIO_InitStruct);
 8005896:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800589a:	4619      	mov	r1, r3
 800589c:	4803      	ldr	r0, [pc, #12]	; (80058ac <MX_GPIO_Init+0x4a8>)
 800589e:	f003 fb41 	bl	8008f24 <HAL_GPIO_Init>

}
 80058a2:	bf00      	nop
 80058a4:	3738      	adds	r7, #56	; 0x38
 80058a6:	46bd      	mov	sp, r7
 80058a8:	bd80      	pop	{r7, pc}
 80058aa:	bf00      	nop
 80058ac:	42021400 	.word	0x42021400
 80058b0:	42021000 	.word	0x42021000
 80058b4:	42021800 	.word	0x42021800
 80058b8:	10110000 	.word	0x10110000
 80058bc:	42020c00 	.word	0x42020c00
 80058c0:	42020400 	.word	0x42020400

080058c4 <MotionSensor_GPIO_Init>:
    InitStruct.Alternate = GPIO_AF10_OCTOSPI1;
    HAL_GPIO_Init(GPIOB, &InitStruct);
}

void MotionSensor_GPIO_Init(void)
{
 80058c4:	b580      	push	{r7, lr}
 80058c6:	b086      	sub	sp, #24
 80058c8:	af00      	add	r7, sp, #0
	  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80058ca:	1d3b      	adds	r3, r7, #4
 80058cc:	2200      	movs	r2, #0
 80058ce:	601a      	str	r2, [r3, #0]
 80058d0:	605a      	str	r2, [r3, #4]
 80058d2:	609a      	str	r2, [r3, #8]
 80058d4:	60da      	str	r2, [r3, #12]
 80058d6:	611a      	str	r2, [r3, #16]
	  GPIO_InitStruct.Pin = Mems_ISM330DLC_INT1_Pin;
 80058d8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80058dc:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80058de:	2300      	movs	r3, #0
 80058e0:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80058e2:	2300      	movs	r3, #0
 80058e4:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80058e6:	2300      	movs	r3, #0
 80058e8:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80058ea:	2300      	movs	r3, #0
 80058ec:	60fb      	str	r3, [r7, #12]
	  HAL_GPIO_Init(Mems_ISM330DLC_INT1_GPIO_Port, &GPIO_InitStruct);
 80058ee:	1d3b      	adds	r3, r7, #4
 80058f0:	4619      	mov	r1, r3
 80058f2:	4803      	ldr	r0, [pc, #12]	; (8005900 <MotionSensor_GPIO_Init+0x3c>)
 80058f4:	f003 fb16 	bl	8008f24 <HAL_GPIO_Init>
}
 80058f8:	bf00      	nop
 80058fa:	3718      	adds	r7, #24
 80058fc:	46bd      	mov	sp, r7
 80058fe:	bd80      	pop	{r7, pc}
 8005900:	42021000 	.word	0x42021000

08005904 <PressureSensor_GPIO_Init>:

void PressureSensor_GPIO_Init(void)
{
 8005904:	b580      	push	{r7, lr}
 8005906:	b086      	sub	sp, #24
 8005908:	af00      	add	r7, sp, #0
	  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800590a:	1d3b      	adds	r3, r7, #4
 800590c:	2200      	movs	r2, #0
 800590e:	601a      	str	r2, [r3, #0]
 8005910:	605a      	str	r2, [r3, #4]
 8005912:	609a      	str	r2, [r3, #8]
 8005914:	60da      	str	r2, [r3, #12]
 8005916:	611a      	str	r2, [r3, #16]
	  GPIO_InitStruct.Pin = Mems_INT_LPS22HH_Pin;
 8005918:	2304      	movs	r3, #4
 800591a:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800591c:	2300      	movs	r3, #0
 800591e:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005920:	2300      	movs	r3, #0
 8005922:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005924:	2300      	movs	r3, #0
 8005926:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005928:	2300      	movs	r3, #0
 800592a:	60fb      	str	r3, [r7, #12]
	  HAL_GPIO_Init(Mems_INT_LPS22HH_GPIO_Port, &GPIO_InitStruct);
 800592c:	1d3b      	adds	r3, r7, #4
 800592e:	4619      	mov	r1, r3
 8005930:	4803      	ldr	r0, [pc, #12]	; (8005940 <PressureSensor_GPIO_Init+0x3c>)
 8005932:	f003 faf7 	bl	8008f24 <HAL_GPIO_Init>
}
 8005936:	bf00      	nop
 8005938:	3718      	adds	r7, #24
 800593a:	46bd      	mov	sp, r7
 800593c:	bd80      	pop	{r7, pc}
 800593e:	bf00      	nop
 8005940:	42021800 	.word	0x42021800

08005944 <MagSensor_GPIO_Init>:

void MagSensor_GPIO_Init(void)
{
 8005944:	b580      	push	{r7, lr}
 8005946:	b086      	sub	sp, #24
 8005948:	af00      	add	r7, sp, #0
	  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800594a:	1d3b      	adds	r3, r7, #4
 800594c:	2200      	movs	r2, #0
 800594e:	601a      	str	r2, [r3, #0]
 8005950:	605a      	str	r2, [r3, #4]
 8005952:	609a      	str	r2, [r3, #8]
 8005954:	60da      	str	r2, [r3, #12]
 8005956:	611a      	str	r2, [r3, #16]
	  GPIO_InitStruct.Pin = Mems_INT_IIS2MDC_Pin;
 8005958:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800595c:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800595e:	2300      	movs	r3, #0
 8005960:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005962:	2300      	movs	r3, #0
 8005964:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005966:	2300      	movs	r3, #0
 8005968:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800596a:	2300      	movs	r3, #0
 800596c:	60fb      	str	r3, [r7, #12]
	  HAL_GPIO_Init(Mems_INT_IIS2MDC_GPIO_Port, &GPIO_InitStruct);
 800596e:	1d3b      	adds	r3, r7, #4
 8005970:	4619      	mov	r1, r3
 8005972:	4803      	ldr	r0, [pc, #12]	; (8005980 <MagSensor_GPIO_Init+0x3c>)
 8005974:	f003 fad6 	bl	8008f24 <HAL_GPIO_Init>
}
 8005978:	bf00      	nop
 800597a:	3718      	adds	r7, #24
 800597c:	46bd      	mov	sp, r7
 800597e:	bd80      	pop	{r7, pc}
 8005980:	42020c00 	.word	0x42020c00

08005984 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8005984:	b580      	push	{r7, lr}
 8005986:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8005988:	4b1b      	ldr	r3, [pc, #108]	; (80059f8 <MX_I2C1_Init+0x74>)
 800598a:	4a1c      	ldr	r2, [pc, #112]	; (80059fc <MX_I2C1_Init+0x78>)
 800598c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x30909DEC;
 800598e:	4b1a      	ldr	r3, [pc, #104]	; (80059f8 <MX_I2C1_Init+0x74>)
 8005990:	4a1b      	ldr	r2, [pc, #108]	; (8005a00 <MX_I2C1_Init+0x7c>)
 8005992:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8005994:	4b18      	ldr	r3, [pc, #96]	; (80059f8 <MX_I2C1_Init+0x74>)
 8005996:	2200      	movs	r2, #0
 8005998:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800599a:	4b17      	ldr	r3, [pc, #92]	; (80059f8 <MX_I2C1_Init+0x74>)
 800599c:	2201      	movs	r2, #1
 800599e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80059a0:	4b15      	ldr	r3, [pc, #84]	; (80059f8 <MX_I2C1_Init+0x74>)
 80059a2:	2200      	movs	r2, #0
 80059a4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80059a6:	4b14      	ldr	r3, [pc, #80]	; (80059f8 <MX_I2C1_Init+0x74>)
 80059a8:	2200      	movs	r2, #0
 80059aa:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80059ac:	4b12      	ldr	r3, [pc, #72]	; (80059f8 <MX_I2C1_Init+0x74>)
 80059ae:	2200      	movs	r2, #0
 80059b0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80059b2:	4b11      	ldr	r3, [pc, #68]	; (80059f8 <MX_I2C1_Init+0x74>)
 80059b4:	2200      	movs	r2, #0
 80059b6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80059b8:	4b0f      	ldr	r3, [pc, #60]	; (80059f8 <MX_I2C1_Init+0x74>)
 80059ba:	2200      	movs	r2, #0
 80059bc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80059be:	480e      	ldr	r0, [pc, #56]	; (80059f8 <MX_I2C1_Init+0x74>)
 80059c0:	f003 fdb0 	bl	8009524 <HAL_I2C_Init>
 80059c4:	4603      	mov	r3, r0
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d001      	beq.n	80059ce <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80059ca:	f000 fb47 	bl	800605c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80059ce:	2100      	movs	r1, #0
 80059d0:	4809      	ldr	r0, [pc, #36]	; (80059f8 <MX_I2C1_Init+0x74>)
 80059d2:	f004 fb39 	bl	800a048 <HAL_I2CEx_ConfigAnalogFilter>
 80059d6:	4603      	mov	r3, r0
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d001      	beq.n	80059e0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80059dc:	f000 fb3e 	bl	800605c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80059e0:	2100      	movs	r1, #0
 80059e2:	4805      	ldr	r0, [pc, #20]	; (80059f8 <MX_I2C1_Init+0x74>)
 80059e4:	f004 fb7b 	bl	800a0de <HAL_I2CEx_ConfigDigitalFilter>
 80059e8:	4603      	mov	r3, r0
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d001      	beq.n	80059f2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80059ee:	f000 fb35 	bl	800605c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80059f2:	bf00      	nop
 80059f4:	bd80      	pop	{r7, pc}
 80059f6:	bf00      	nop
 80059f8:	2001c69c 	.word	0x2001c69c
 80059fc:	40005400 	.word	0x40005400
 8005a00:	30909dec 	.word	0x30909dec

08005a04 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8005a04:	b580      	push	{r7, lr}
 8005a06:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8005a08:	4b1b      	ldr	r3, [pc, #108]	; (8005a78 <MX_I2C2_Init+0x74>)
 8005a0a:	4a1c      	ldr	r2, [pc, #112]	; (8005a7c <MX_I2C2_Init+0x78>)
 8005a0c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x30909DEC;
 8005a0e:	4b1a      	ldr	r3, [pc, #104]	; (8005a78 <MX_I2C2_Init+0x74>)
 8005a10:	4a1b      	ldr	r2, [pc, #108]	; (8005a80 <MX_I2C2_Init+0x7c>)
 8005a12:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8005a14:	4b18      	ldr	r3, [pc, #96]	; (8005a78 <MX_I2C2_Init+0x74>)
 8005a16:	2200      	movs	r2, #0
 8005a18:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8005a1a:	4b17      	ldr	r3, [pc, #92]	; (8005a78 <MX_I2C2_Init+0x74>)
 8005a1c:	2201      	movs	r2, #1
 8005a1e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8005a20:	4b15      	ldr	r3, [pc, #84]	; (8005a78 <MX_I2C2_Init+0x74>)
 8005a22:	2200      	movs	r2, #0
 8005a24:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8005a26:	4b14      	ldr	r3, [pc, #80]	; (8005a78 <MX_I2C2_Init+0x74>)
 8005a28:	2200      	movs	r2, #0
 8005a2a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8005a2c:	4b12      	ldr	r3, [pc, #72]	; (8005a78 <MX_I2C2_Init+0x74>)
 8005a2e:	2200      	movs	r2, #0
 8005a30:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8005a32:	4b11      	ldr	r3, [pc, #68]	; (8005a78 <MX_I2C2_Init+0x74>)
 8005a34:	2200      	movs	r2, #0
 8005a36:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8005a38:	4b0f      	ldr	r3, [pc, #60]	; (8005a78 <MX_I2C2_Init+0x74>)
 8005a3a:	2200      	movs	r2, #0
 8005a3c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8005a3e:	480e      	ldr	r0, [pc, #56]	; (8005a78 <MX_I2C2_Init+0x74>)
 8005a40:	f003 fd70 	bl	8009524 <HAL_I2C_Init>
 8005a44:	4603      	mov	r3, r0
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d001      	beq.n	8005a4e <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8005a4a:	f000 fb07 	bl	800605c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8005a4e:	2100      	movs	r1, #0
 8005a50:	4809      	ldr	r0, [pc, #36]	; (8005a78 <MX_I2C2_Init+0x74>)
 8005a52:	f004 faf9 	bl	800a048 <HAL_I2CEx_ConfigAnalogFilter>
 8005a56:	4603      	mov	r3, r0
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d001      	beq.n	8005a60 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8005a5c:	f000 fafe 	bl	800605c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8005a60:	2100      	movs	r1, #0
 8005a62:	4805      	ldr	r0, [pc, #20]	; (8005a78 <MX_I2C2_Init+0x74>)
 8005a64:	f004 fb3b 	bl	800a0de <HAL_I2CEx_ConfigDigitalFilter>
 8005a68:	4603      	mov	r3, r0
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d001      	beq.n	8005a72 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8005a6e:	f000 faf5 	bl	800605c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8005a72:	bf00      	nop
 8005a74:	bd80      	pop	{r7, pc}
 8005a76:	bf00      	nop
 8005a78:	2001c6e8 	.word	0x2001c6e8
 8005a7c:	40005800 	.word	0x40005800
 8005a80:	30909dec 	.word	0x30909dec

08005a84 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8005a84:	b580      	push	{r7, lr}
 8005a86:	b0be      	sub	sp, #248	; 0xf8
 8005a88:	af00      	add	r7, sp, #0
 8005a8a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005a8c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8005a90:	2200      	movs	r2, #0
 8005a92:	601a      	str	r2, [r3, #0]
 8005a94:	605a      	str	r2, [r3, #4]
 8005a96:	609a      	str	r2, [r3, #8]
 8005a98:	60da      	str	r2, [r3, #12]
 8005a9a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8005a9c:	f107 0318 	add.w	r3, r7, #24
 8005aa0:	22c8      	movs	r2, #200	; 0xc8
 8005aa2:	2100      	movs	r1, #0
 8005aa4:	4618      	mov	r0, r3
 8005aa6:	f00e f9b9 	bl	8013e1c <memset>
  if(i2cHandle->Instance==I2C1)
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	4a53      	ldr	r2, [pc, #332]	; (8005bfc <HAL_I2C_MspInit+0x178>)
 8005ab0:	4293      	cmp	r3, r2
 8005ab2:	d153      	bne.n	8005b5c <HAL_I2C_MspInit+0xd8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8005ab4:	f04f 0240 	mov.w	r2, #64	; 0x40
 8005ab8:	f04f 0300 	mov.w	r3, #0
 8005abc:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8005ac0:	2300      	movs	r3, #0
 8005ac2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005ac6:	f107 0318 	add.w	r3, r7, #24
 8005aca:	4618      	mov	r0, r3
 8005acc:	f007 f9a2 	bl	800ce14 <HAL_RCCEx_PeriphCLKConfig>
 8005ad0:	4603      	mov	r3, r0
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d001      	beq.n	8005ada <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8005ad6:	f000 fac1 	bl	800605c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005ada:	4b49      	ldr	r3, [pc, #292]	; (8005c00 <HAL_I2C_MspInit+0x17c>)
 8005adc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005ae0:	4a47      	ldr	r2, [pc, #284]	; (8005c00 <HAL_I2C_MspInit+0x17c>)
 8005ae2:	f043 0302 	orr.w	r3, r3, #2
 8005ae6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8005aea:	4b45      	ldr	r3, [pc, #276]	; (8005c00 <HAL_I2C_MspInit+0x17c>)
 8005aec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005af0:	f003 0302 	and.w	r3, r3, #2
 8005af4:	617b      	str	r3, [r7, #20]
 8005af6:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB9     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_8;
 8005af8:	f44f 7340 	mov.w	r3, #768	; 0x300
 8005afc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005b00:	2312      	movs	r3, #18
 8005b02:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005b06:	2300      	movs	r3, #0
 8005b08:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005b0c:	2300      	movs	r3, #0
 8005b0e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8005b12:	2304      	movs	r3, #4
 8005b14:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005b18:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8005b1c:	4619      	mov	r1, r3
 8005b1e:	4839      	ldr	r0, [pc, #228]	; (8005c04 <HAL_I2C_MspInit+0x180>)
 8005b20:	f003 fa00 	bl	8008f24 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8005b24:	4b36      	ldr	r3, [pc, #216]	; (8005c00 <HAL_I2C_MspInit+0x17c>)
 8005b26:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005b2a:	4a35      	ldr	r2, [pc, #212]	; (8005c00 <HAL_I2C_MspInit+0x17c>)
 8005b2c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005b30:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8005b34:	4b32      	ldr	r3, [pc, #200]	; (8005c00 <HAL_I2C_MspInit+0x17c>)
 8005b36:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005b3a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005b3e:	613b      	str	r3, [r7, #16]
 8005b40:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C1_MspInit 1 */
    __HAL_RCC_I2C1_FORCE_RESET();
 8005b42:	4b2f      	ldr	r3, [pc, #188]	; (8005c00 <HAL_I2C_MspInit+0x17c>)
 8005b44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005b46:	4a2e      	ldr	r2, [pc, #184]	; (8005c00 <HAL_I2C_MspInit+0x17c>)
 8005b48:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005b4c:	6753      	str	r3, [r2, #116]	; 0x74
    __HAL_RCC_I2C1_RELEASE_RESET();
 8005b4e:	4b2c      	ldr	r3, [pc, #176]	; (8005c00 <HAL_I2C_MspInit+0x17c>)
 8005b50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005b52:	4a2b      	ldr	r2, [pc, #172]	; (8005c00 <HAL_I2C_MspInit+0x17c>)
 8005b54:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005b58:	6753      	str	r3, [r2, #116]	; 0x74
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8005b5a:	e04a      	b.n	8005bf2 <HAL_I2C_MspInit+0x16e>
  else if(i2cHandle->Instance==I2C2)
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	4a29      	ldr	r2, [pc, #164]	; (8005c08 <HAL_I2C_MspInit+0x184>)
 8005b62:	4293      	cmp	r3, r2
 8005b64:	d145      	bne.n	8005bf2 <HAL_I2C_MspInit+0x16e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8005b66:	f04f 0280 	mov.w	r2, #128	; 0x80
 8005b6a:	f04f 0300 	mov.w	r3, #0
 8005b6e:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8005b72:	2300      	movs	r3, #0
 8005b74:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005b78:	f107 0318 	add.w	r3, r7, #24
 8005b7c:	4618      	mov	r0, r3
 8005b7e:	f007 f949 	bl	800ce14 <HAL_RCCEx_PeriphCLKConfig>
 8005b82:	4603      	mov	r3, r0
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d001      	beq.n	8005b8c <HAL_I2C_MspInit+0x108>
      Error_Handler();
 8005b88:	f000 fa68 	bl	800605c <Error_Handler>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8005b8c:	4b1c      	ldr	r3, [pc, #112]	; (8005c00 <HAL_I2C_MspInit+0x17c>)
 8005b8e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005b92:	4a1b      	ldr	r2, [pc, #108]	; (8005c00 <HAL_I2C_MspInit+0x17c>)
 8005b94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b98:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8005b9c:	4b18      	ldr	r3, [pc, #96]	; (8005c00 <HAL_I2C_MspInit+0x17c>)
 8005b9e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005ba2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ba6:	60fb      	str	r3, [r7, #12]
 8005ba8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8005baa:	2330      	movs	r3, #48	; 0x30
 8005bac:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005bb0:	2312      	movs	r3, #18
 8005bb2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005bb6:	2300      	movs	r3, #0
 8005bb8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005bbc:	2300      	movs	r3, #0
 8005bbe:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8005bc2:	2304      	movs	r3, #4
 8005bc4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8005bc8:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8005bcc:	4619      	mov	r1, r3
 8005bce:	480f      	ldr	r0, [pc, #60]	; (8005c0c <HAL_I2C_MspInit+0x188>)
 8005bd0:	f003 f9a8 	bl	8008f24 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8005bd4:	4b0a      	ldr	r3, [pc, #40]	; (8005c00 <HAL_I2C_MspInit+0x17c>)
 8005bd6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005bda:	4a09      	ldr	r2, [pc, #36]	; (8005c00 <HAL_I2C_MspInit+0x17c>)
 8005bdc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005be0:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8005be4:	4b06      	ldr	r3, [pc, #24]	; (8005c00 <HAL_I2C_MspInit+0x17c>)
 8005be6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005bea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005bee:	60bb      	str	r3, [r7, #8]
 8005bf0:	68bb      	ldr	r3, [r7, #8]
}
 8005bf2:	bf00      	nop
 8005bf4:	37f8      	adds	r7, #248	; 0xf8
 8005bf6:	46bd      	mov	sp, r7
 8005bf8:	bd80      	pop	{r7, pc}
 8005bfa:	bf00      	nop
 8005bfc:	40005400 	.word	0x40005400
 8005c00:	46020c00 	.word	0x46020c00
 8005c04:	42020400 	.word	0x42020400
 8005c08:	40005800 	.word	0x40005800
 8005c0c:	42021c00 	.word	0x42021c00

08005c10 <HAL_I2C_MspDeInit>:

void HAL_I2C_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8005c10:	b580      	push	{r7, lr}
 8005c12:	b082      	sub	sp, #8
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	6078      	str	r0, [r7, #4]

  if(i2cHandle->Instance==I2C1)
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	4a17      	ldr	r2, [pc, #92]	; (8005c7c <HAL_I2C_MspDeInit+0x6c>)
 8005c1e:	4293      	cmp	r3, r2
 8005c20:	d112      	bne.n	8005c48 <HAL_I2C_MspDeInit+0x38>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8005c22:	4b17      	ldr	r3, [pc, #92]	; (8005c80 <HAL_I2C_MspDeInit+0x70>)
 8005c24:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005c28:	4a15      	ldr	r2, [pc, #84]	; (8005c80 <HAL_I2C_MspDeInit+0x70>)
 8005c2a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005c2e:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c

    /**I2C1 GPIO Configuration
    PB9     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_9);
 8005c32:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005c36:	4813      	ldr	r0, [pc, #76]	; (8005c84 <HAL_I2C_MspDeInit+0x74>)
 8005c38:	f003 fb4c 	bl	80092d4 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_8);
 8005c3c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005c40:	4810      	ldr	r0, [pc, #64]	; (8005c84 <HAL_I2C_MspDeInit+0x74>)
 8005c42:	f003 fb47 	bl	80092d4 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
  }
}
 8005c46:	e014      	b.n	8005c72 <HAL_I2C_MspDeInit+0x62>
  else if(i2cHandle->Instance==I2C2)
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	4a0e      	ldr	r2, [pc, #56]	; (8005c88 <HAL_I2C_MspDeInit+0x78>)
 8005c4e:	4293      	cmp	r3, r2
 8005c50:	d10f      	bne.n	8005c72 <HAL_I2C_MspDeInit+0x62>
    __HAL_RCC_I2C2_CLK_DISABLE();
 8005c52:	4b0b      	ldr	r3, [pc, #44]	; (8005c80 <HAL_I2C_MspDeInit+0x70>)
 8005c54:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005c58:	4a09      	ldr	r2, [pc, #36]	; (8005c80 <HAL_I2C_MspDeInit+0x70>)
 8005c5a:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8005c5e:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
    HAL_GPIO_DeInit(GPIOH, GPIO_PIN_4);
 8005c62:	2110      	movs	r1, #16
 8005c64:	4809      	ldr	r0, [pc, #36]	; (8005c8c <HAL_I2C_MspDeInit+0x7c>)
 8005c66:	f003 fb35 	bl	80092d4 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOH, GPIO_PIN_5);
 8005c6a:	2120      	movs	r1, #32
 8005c6c:	4807      	ldr	r0, [pc, #28]	; (8005c8c <HAL_I2C_MspDeInit+0x7c>)
 8005c6e:	f003 fb31 	bl	80092d4 <HAL_GPIO_DeInit>
}
 8005c72:	bf00      	nop
 8005c74:	3708      	adds	r7, #8
 8005c76:	46bd      	mov	sp, r7
 8005c78:	bd80      	pop	{r7, pc}
 8005c7a:	bf00      	nop
 8005c7c:	40005400 	.word	0x40005400
 8005c80:	46020c00 	.word	0x46020c00
 8005c84:	42020400 	.word	0x42020400
 8005c88:	40005800 	.word	0x40005800
 8005c8c:	42021c00 	.word	0x42021c00

08005c90 <I2C1_Init>:

/* USER CODE BEGIN 1 */
void I2C1_Init(void){
 8005c90:	b580      	push	{r7, lr}
 8005c92:	af00      	add	r7, sp, #0

	  hi2c1.Instance = I2C1;
 8005c94:	4b1b      	ldr	r3, [pc, #108]	; (8005d04 <I2C1_Init+0x74>)
 8005c96:	4a1c      	ldr	r2, [pc, #112]	; (8005d08 <I2C1_Init+0x78>)
 8005c98:	601a      	str	r2, [r3, #0]
	  hi2c1.Init.Timing = 0xB0C03E40;
 8005c9a:	4b1a      	ldr	r3, [pc, #104]	; (8005d04 <I2C1_Init+0x74>)
 8005c9c:	4a1b      	ldr	r2, [pc, #108]	; (8005d0c <I2C1_Init+0x7c>)
 8005c9e:	605a      	str	r2, [r3, #4]
	  hi2c1.Init.OwnAddress1 = 0;
 8005ca0:	4b18      	ldr	r3, [pc, #96]	; (8005d04 <I2C1_Init+0x74>)
 8005ca2:	2200      	movs	r2, #0
 8005ca4:	609a      	str	r2, [r3, #8]
	  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8005ca6:	4b17      	ldr	r3, [pc, #92]	; (8005d04 <I2C1_Init+0x74>)
 8005ca8:	2201      	movs	r2, #1
 8005caa:	60da      	str	r2, [r3, #12]
	  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8005cac:	4b15      	ldr	r3, [pc, #84]	; (8005d04 <I2C1_Init+0x74>)
 8005cae:	2200      	movs	r2, #0
 8005cb0:	611a      	str	r2, [r3, #16]
	  hi2c1.Init.OwnAddress2 = 0;
 8005cb2:	4b14      	ldr	r3, [pc, #80]	; (8005d04 <I2C1_Init+0x74>)
 8005cb4:	2200      	movs	r2, #0
 8005cb6:	615a      	str	r2, [r3, #20]
	  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8005cb8:	4b12      	ldr	r3, [pc, #72]	; (8005d04 <I2C1_Init+0x74>)
 8005cba:	2200      	movs	r2, #0
 8005cbc:	619a      	str	r2, [r3, #24]
	  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8005cbe:	4b11      	ldr	r3, [pc, #68]	; (8005d04 <I2C1_Init+0x74>)
 8005cc0:	2200      	movs	r2, #0
 8005cc2:	61da      	str	r2, [r3, #28]
	  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8005cc4:	4b0f      	ldr	r3, [pc, #60]	; (8005d04 <I2C1_Init+0x74>)
 8005cc6:	2200      	movs	r2, #0
 8005cc8:	621a      	str	r2, [r3, #32]
	  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8005cca:	480e      	ldr	r0, [pc, #56]	; (8005d04 <I2C1_Init+0x74>)
 8005ccc:	f003 fc2a 	bl	8009524 <HAL_I2C_Init>
 8005cd0:	4603      	mov	r3, r0
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d001      	beq.n	8005cda <I2C1_Init+0x4a>
	  {
	    Error_Handler();
 8005cd6:	f000 f9c1 	bl	800605c <Error_Handler>
	  }

	  /** Configure Analogue filter
	  */
	  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8005cda:	2100      	movs	r1, #0
 8005cdc:	4809      	ldr	r0, [pc, #36]	; (8005d04 <I2C1_Init+0x74>)
 8005cde:	f004 f9b3 	bl	800a048 <HAL_I2CEx_ConfigAnalogFilter>
 8005ce2:	4603      	mov	r3, r0
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d001      	beq.n	8005cec <I2C1_Init+0x5c>
	  {
	    Error_Handler();
 8005ce8:	f000 f9b8 	bl	800605c <Error_Handler>
	  }

	  /** Configure Digital filter
	  */
	  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8005cec:	2100      	movs	r1, #0
 8005cee:	4805      	ldr	r0, [pc, #20]	; (8005d04 <I2C1_Init+0x74>)
 8005cf0:	f004 f9f5 	bl	800a0de <HAL_I2CEx_ConfigDigitalFilter>
 8005cf4:	4603      	mov	r3, r0
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d001      	beq.n	8005cfe <I2C1_Init+0x6e>
	  {
	    Error_Handler();
 8005cfa:	f000 f9af 	bl	800605c <Error_Handler>
	  }

}
 8005cfe:	bf00      	nop
 8005d00:	bd80      	pop	{r7, pc}
 8005d02:	bf00      	nop
 8005d04:	2001c69c 	.word	0x2001c69c
 8005d08:	40005400 	.word	0x40005400
 8005d0c:	b0c03e40 	.word	0xb0c03e40

08005d10 <I2C2_Init>:

void I2C2_Init(void){
 8005d10:	b580      	push	{r7, lr}
 8005d12:	af00      	add	r7, sp, #0

	  hi2c2.Instance = I2C2;
 8005d14:	4b1b      	ldr	r3, [pc, #108]	; (8005d84 <I2C2_Init+0x74>)
 8005d16:	4a1c      	ldr	r2, [pc, #112]	; (8005d88 <I2C2_Init+0x78>)
 8005d18:	601a      	str	r2, [r3, #0]
	  hi2c2.Init.Timing = 0x30909DEC;
 8005d1a:	4b1a      	ldr	r3, [pc, #104]	; (8005d84 <I2C2_Init+0x74>)
 8005d1c:	4a1b      	ldr	r2, [pc, #108]	; (8005d8c <I2C2_Init+0x7c>)
 8005d1e:	605a      	str	r2, [r3, #4]
	  hi2c2.Init.OwnAddress1 = 0;
 8005d20:	4b18      	ldr	r3, [pc, #96]	; (8005d84 <I2C2_Init+0x74>)
 8005d22:	2200      	movs	r2, #0
 8005d24:	609a      	str	r2, [r3, #8]
	  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8005d26:	4b17      	ldr	r3, [pc, #92]	; (8005d84 <I2C2_Init+0x74>)
 8005d28:	2201      	movs	r2, #1
 8005d2a:	60da      	str	r2, [r3, #12]
	  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8005d2c:	4b15      	ldr	r3, [pc, #84]	; (8005d84 <I2C2_Init+0x74>)
 8005d2e:	2200      	movs	r2, #0
 8005d30:	611a      	str	r2, [r3, #16]
	  hi2c2.Init.OwnAddress2 = 0;
 8005d32:	4b14      	ldr	r3, [pc, #80]	; (8005d84 <I2C2_Init+0x74>)
 8005d34:	2200      	movs	r2, #0
 8005d36:	615a      	str	r2, [r3, #20]
	  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8005d38:	4b12      	ldr	r3, [pc, #72]	; (8005d84 <I2C2_Init+0x74>)
 8005d3a:	2200      	movs	r2, #0
 8005d3c:	619a      	str	r2, [r3, #24]
	  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8005d3e:	4b11      	ldr	r3, [pc, #68]	; (8005d84 <I2C2_Init+0x74>)
 8005d40:	2200      	movs	r2, #0
 8005d42:	61da      	str	r2, [r3, #28]
	  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8005d44:	4b0f      	ldr	r3, [pc, #60]	; (8005d84 <I2C2_Init+0x74>)
 8005d46:	2200      	movs	r2, #0
 8005d48:	621a      	str	r2, [r3, #32]
	  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8005d4a:	480e      	ldr	r0, [pc, #56]	; (8005d84 <I2C2_Init+0x74>)
 8005d4c:	f003 fbea 	bl	8009524 <HAL_I2C_Init>
 8005d50:	4603      	mov	r3, r0
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d001      	beq.n	8005d5a <I2C2_Init+0x4a>
	  {
	    Error_Handler();
 8005d56:	f000 f981 	bl	800605c <Error_Handler>
	  }

	  /** Configure Analogue filter
	  */
	  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8005d5a:	2100      	movs	r1, #0
 8005d5c:	4809      	ldr	r0, [pc, #36]	; (8005d84 <I2C2_Init+0x74>)
 8005d5e:	f004 f973 	bl	800a048 <HAL_I2CEx_ConfigAnalogFilter>
 8005d62:	4603      	mov	r3, r0
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d001      	beq.n	8005d6c <I2C2_Init+0x5c>
	  {
	    Error_Handler();
 8005d68:	f000 f978 	bl	800605c <Error_Handler>
	  }

	  /** Configure Digital filter
	  */
	  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8005d6c:	2100      	movs	r1, #0
 8005d6e:	4805      	ldr	r0, [pc, #20]	; (8005d84 <I2C2_Init+0x74>)
 8005d70:	f004 f9b5 	bl	800a0de <HAL_I2CEx_ConfigDigitalFilter>
 8005d74:	4603      	mov	r3, r0
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d001      	beq.n	8005d7e <I2C2_Init+0x6e>
	  {
	    Error_Handler();
 8005d7a:	f000 f96f 	bl	800605c <Error_Handler>
	  }

}
 8005d7e:	bf00      	nop
 8005d80:	bd80      	pop	{r7, pc}
 8005d82:	bf00      	nop
 8005d84:	2001c6e8 	.word	0x2001c6e8
 8005d88:	40005800 	.word	0x40005800
 8005d8c:	30909dec 	.word	0x30909dec

08005d90 <MX_ICACHE_Init>:

/* USER CODE END 0 */

/* ICACHE init function */
void MX_ICACHE_Init(void)
{
 8005d90:	b580      	push	{r7, lr}
 8005d92:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache (default 2-ways set associative cache)
  */
  if (HAL_ICACHE_Enable() != HAL_OK)
 8005d94:	f004 f9f0 	bl	800a178 <HAL_ICACHE_Enable>
 8005d98:	4603      	mov	r3, r0
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d001      	beq.n	8005da2 <MX_ICACHE_Init+0x12>
  {
    Error_Handler();
 8005d9e:	f000 f95d 	bl	800605c <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 8005da2:	bf00      	nop
 8005da4:	bd80      	pop	{r7, pc}
	...

08005da8 <MX_ProjectDMAQueue_Config>:
  * @brief  DMA Linked-list ProjectDMAQueue configuration
  * @param  None
  * @retval None
  */
HAL_StatusTypeDef MX_ProjectDMAQueue_Config(void)
{
 8005da8:	b580      	push	{r7, lr}
 8005daa:	b09c      	sub	sp, #112	; 0x70
 8005dac:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef ret = HAL_OK;
 8005dae:	2300      	movs	r3, #0
 8005db0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  /* DMA node configuration declaration */
  DMA_NodeConfTypeDef pNodeConfig;

  /* Set node configuration ################################################*/
  pNodeConfig.NodeType = DMA_GPDMA_2D_NODE;
 8005db4:	2322      	movs	r3, #34	; 0x22
 8005db6:	603b      	str	r3, [r7, #0]
  pNodeConfig.Init.Request = GPDMA1_REQUEST_DCMI;
 8005db8:	2356      	movs	r3, #86	; 0x56
 8005dba:	607b      	str	r3, [r7, #4]
  pNodeConfig.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 8005dbc:	2300      	movs	r3, #0
 8005dbe:	60bb      	str	r3, [r7, #8]
  pNodeConfig.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005dc0:	2300      	movs	r3, #0
 8005dc2:	60fb      	str	r3, [r7, #12]
  pNodeConfig.Init.SrcInc = DMA_SINC_FIXED;
 8005dc4:	2300      	movs	r3, #0
 8005dc6:	613b      	str	r3, [r7, #16]
  pNodeConfig.Init.DestInc = DMA_DINC_INCREMENTED;
 8005dc8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8005dcc:	617b      	str	r3, [r7, #20]
  pNodeConfig.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_WORD;
 8005dce:	2302      	movs	r3, #2
 8005dd0:	61bb      	str	r3, [r7, #24]
  pNodeConfig.Init.DestDataWidth = DMA_DEST_DATAWIDTH_WORD;
 8005dd2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005dd6:	61fb      	str	r3, [r7, #28]
  pNodeConfig.Init.SrcBurstLength = 1;
 8005dd8:	2301      	movs	r3, #1
 8005dda:	627b      	str	r3, [r7, #36]	; 0x24
  pNodeConfig.Init.DestBurstLength = 1;
 8005ddc:	2301      	movs	r3, #1
 8005dde:	62bb      	str	r3, [r7, #40]	; 0x28
  pNodeConfig.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT0;
 8005de0:	2300      	movs	r3, #0
 8005de2:	62fb      	str	r3, [r7, #44]	; 0x2c
  pNodeConfig.Init.TransferEventMode = DMA_TCEM_EACH_LL_ITEM_TRANSFER;
 8005de4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005de8:	633b      	str	r3, [r7, #48]	; 0x30
  pNodeConfig.RepeatBlockConfig.RepeatCount = 1;
 8005dea:	2301      	movs	r3, #1
 8005dec:	64fb      	str	r3, [r7, #76]	; 0x4c
  pNodeConfig.RepeatBlockConfig.SrcAddrOffset = 0;
 8005dee:	2300      	movs	r3, #0
 8005df0:	653b      	str	r3, [r7, #80]	; 0x50
  pNodeConfig.RepeatBlockConfig.DestAddrOffset = 0;
 8005df2:	2300      	movs	r3, #0
 8005df4:	657b      	str	r3, [r7, #84]	; 0x54
  pNodeConfig.RepeatBlockConfig.BlkSrcAddrOffset = 0;
 8005df6:	2300      	movs	r3, #0
 8005df8:	65bb      	str	r3, [r7, #88]	; 0x58
  pNodeConfig.RepeatBlockConfig.BlkDestAddrOffset = 0;
 8005dfa:	2300      	movs	r3, #0
 8005dfc:	65fb      	str	r3, [r7, #92]	; 0x5c
  pNodeConfig.TriggerConfig.TriggerPolarity = DMA_TRIG_POLARITY_MASKED;
 8005dfe:	2300      	movs	r3, #0
 8005e00:	647b      	str	r3, [r7, #68]	; 0x44
  pNodeConfig.DataHandlingConfig.DataExchange = DMA_EXCHANGE_NONE;
 8005e02:	2300      	movs	r3, #0
 8005e04:	63bb      	str	r3, [r7, #56]	; 0x38
  pNodeConfig.DataHandlingConfig.DataAlignment = DMA_DATA_RIGHTALIGN_ZEROPADDED;
 8005e06:	2300      	movs	r3, #0
 8005e08:	63fb      	str	r3, [r7, #60]	; 0x3c
  pNodeConfig.SrcAddress = 0;
 8005e0a:	2300      	movs	r3, #0
 8005e0c:	663b      	str	r3, [r7, #96]	; 0x60
  pNodeConfig.DstAddress = 0;
 8005e0e:	2300      	movs	r3, #0
 8005e10:	667b      	str	r3, [r7, #100]	; 0x64
  pNodeConfig.DataSize = 0;
 8005e12:	2300      	movs	r3, #0
 8005e14:	66bb      	str	r3, [r7, #104]	; 0x68

  /* Build DCMItoMemoryPing Node */
  ret |= HAL_DMAEx_List_BuildNode(&pNodeConfig, &DCMItoMemoryPing);
 8005e16:	463b      	mov	r3, r7
 8005e18:	491e      	ldr	r1, [pc, #120]	; (8005e94 <MX_ProjectDMAQueue_Config+0xec>)
 8005e1a:	4618      	mov	r0, r3
 8005e1c:	f002 fb0a 	bl	8008434 <HAL_DMAEx_List_BuildNode>
 8005e20:	4603      	mov	r3, r0
 8005e22:	461a      	mov	r2, r3
 8005e24:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8005e28:	4313      	orrs	r3, r2
 8005e2a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

  /* Insert DCMItoMemoryPing to Queue */
  ret |= HAL_DMAEx_List_InsertNode_Tail(&ProjectDMAQueue, &DCMItoMemoryPing);
 8005e2e:	4919      	ldr	r1, [pc, #100]	; (8005e94 <MX_ProjectDMAQueue_Config+0xec>)
 8005e30:	4819      	ldr	r0, [pc, #100]	; (8005e98 <MX_ProjectDMAQueue_Config+0xf0>)
 8005e32:	f002 fb15 	bl	8008460 <HAL_DMAEx_List_InsertNode_Tail>
 8005e36:	4603      	mov	r3, r0
 8005e38:	461a      	mov	r2, r3
 8005e3a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8005e3e:	4313      	orrs	r3, r2
 8005e40:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

  /* Set node configuration ################################################*/

  /* Build DCMItoMemoryPong Node */
  ret |= HAL_DMAEx_List_BuildNode(&pNodeConfig, &DCMItoMemoryPong);
 8005e44:	463b      	mov	r3, r7
 8005e46:	4915      	ldr	r1, [pc, #84]	; (8005e9c <MX_ProjectDMAQueue_Config+0xf4>)
 8005e48:	4618      	mov	r0, r3
 8005e4a:	f002 faf3 	bl	8008434 <HAL_DMAEx_List_BuildNode>
 8005e4e:	4603      	mov	r3, r0
 8005e50:	461a      	mov	r2, r3
 8005e52:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8005e56:	4313      	orrs	r3, r2
 8005e58:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

  /* Insert DCMItoMemoryPong to Queue */
  ret |= HAL_DMAEx_List_InsertNode_Tail(&ProjectDMAQueue, &DCMItoMemoryPong);
 8005e5c:	490f      	ldr	r1, [pc, #60]	; (8005e9c <MX_ProjectDMAQueue_Config+0xf4>)
 8005e5e:	480e      	ldr	r0, [pc, #56]	; (8005e98 <MX_ProjectDMAQueue_Config+0xf0>)
 8005e60:	f002 fafe 	bl	8008460 <HAL_DMAEx_List_InsertNode_Tail>
 8005e64:	4603      	mov	r3, r0
 8005e66:	461a      	mov	r2, r3
 8005e68:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8005e6c:	4313      	orrs	r3, r2
 8005e6e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

  ret |= HAL_DMAEx_List_SetCircularModeConfig(&ProjectDMAQueue, &DCMItoMemoryPing);
 8005e72:	4908      	ldr	r1, [pc, #32]	; (8005e94 <MX_ProjectDMAQueue_Config+0xec>)
 8005e74:	4808      	ldr	r0, [pc, #32]	; (8005e98 <MX_ProjectDMAQueue_Config+0xf0>)
 8005e76:	f002 fb6b 	bl	8008550 <HAL_DMAEx_List_SetCircularModeConfig>
 8005e7a:	4603      	mov	r3, r0
 8005e7c:	461a      	mov	r2, r3
 8005e7e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8005e82:	4313      	orrs	r3, r2
 8005e84:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

   return ret;
 8005e88:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 8005e8c:	4618      	mov	r0, r3
 8005e8e:	3770      	adds	r7, #112	; 0x70
 8005e90:	46bd      	mov	sp, r7
 8005e92:	bd80      	pop	{r7, pc}
 8005e94:	2001c734 	.word	0x2001c734
 8005e98:	2001c758 	.word	0x2001c758
 8005e9c:	2001c770 	.word	0x2001c770

08005ea0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8005ea0:	b580      	push	{r7, lr}
 8005ea2:	b082      	sub	sp, #8
 8005ea4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8005ea6:	f000 ff31 	bl	8006d0c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8005eaa:	f000 f849 	bl	8005f40 <SystemClock_Config>

  /* Configure the System Power */
  SystemPower_Config();
 8005eae:	f000 f8a3 	bl	8005ff8 <SystemPower_Config>

  /* USER CODE BEGIN SysInit */
  __HAL_RCC_PWR_CLK_ENABLE();
 8005eb2:	4b20      	ldr	r3, [pc, #128]	; (8005f34 <main+0x94>)
 8005eb4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005eb8:	4a1e      	ldr	r2, [pc, #120]	; (8005f34 <main+0x94>)
 8005eba:	f043 0304 	orr.w	r3, r3, #4
 8005ebe:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8005ec2:	4b1c      	ldr	r3, [pc, #112]	; (8005f34 <main+0x94>)
 8005ec4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005ec8:	f003 0304 	and.w	r3, r3, #4
 8005ecc:	607b      	str	r3, [r7, #4]
 8005ece:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddA();
 8005ed0:	f005 fcac 	bl	800b82c <HAL_PWREx_EnableVddA>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8005ed4:	f7ff fa96 	bl	8005404 <MX_GPIO_Init>
  MX_DCMI_Init();
 8005ed8:	f7ff f90c 	bl	80050f4 <MX_DCMI_Init>
  MX_GPDMA1_Init();
 8005edc:	f7ff fa38 	bl	8005350 <MX_GPDMA1_Init>
  MX_OCTOSPI1_Init();
 8005ee0:	f000 f8c2 	bl	8006068 <MX_OCTOSPI1_Init>
  MX_ICACHE_Init();
 8005ee4:	f7ff ff54 	bl	8005d90 <MX_ICACHE_Init>
  MX_DCACHE1_Init();
 8005ee8:	f7ff f8ee 	bl	80050c8 <MX_DCACHE1_Init>
  MX_I2C1_Init();
 8005eec:	f7ff fd4a 	bl	8005984 <MX_I2C1_Init>
  MX_I2C2_Init();
 8005ef0:	f7ff fd88 	bl	8005a04 <MX_I2C2_Init>
  MX_CORDIC_Init();
 8005ef4:	f7ff f8b2 	bl	800505c <MX_CORDIC_Init>
  MX_USART1_UART_Init();
 8005ef8:	f000 fe2a 	bl	8006b50 <MX_USART1_UART_Init>
  MX_TIM7_Init();
 8005efc:	f000 fdca 	bl	8006a94 <MX_TIM7_Init>
  MX_SPI2_Init();
 8005f00:	f000 fb32 	bl	8006568 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  printf("System Starting\r\n");
 8005f04:	480c      	ldr	r0, [pc, #48]	; (8005f38 <main+0x98>)
 8005f06:	f00d ffff 	bl	8013f08 <puts>
  BSP_TempHumSensorInit();
 8005f0a:	f7fb fb81 	bl	8001610 <BSP_TempHumSensorInit>
  BSP_MagnetometerInit();
 8005f0e:	f7fb fc09 	bl	8001724 <BSP_MagnetometerInit>
  BSP_MotionSensorInit();
 8005f12:	f7fb fcb9 	bl	8001888 <BSP_MotionSensorInit>
  BSP_PressureSensorInit();
 8005f16:	f7fb fbc5 	bl	80016a4 <BSP_PressureSensorInit>
  BSP_AmbientLightInit();
 8005f1a:	f7fb fc77 	bl	800180c <BSP_AmbientLightInit>
  BSP_RamInit();
 8005f1e:	f7fb fda3 	bl	8001a68 <BSP_RamInit>
  BSP_CameraInit();
 8005f22:	f7fb faf9 	bl	8001518 <BSP_CameraInit>
  printf("System Initialized\r\n");
 8005f26:	4805      	ldr	r0, [pc, #20]	; (8005f3c <main+0x9c>)
 8005f28:	f00d ffee 	bl	8013f08 <puts>


  /* USER CODE END 2 */

  MX_ThreadX_Init();
 8005f2c:	f7fe fe0e 	bl	8004b4c <MX_ThreadX_Init>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
 8005f30:	e7fe      	b.n	8005f30 <main+0x90>
 8005f32:	bf00      	nop
 8005f34:	46020c00 	.word	0x46020c00
 8005f38:	080149dc 	.word	0x080149dc
 8005f3c:	080149f0 	.word	0x080149f0

08005f40 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005f40:	b580      	push	{r7, lr}
 8005f42:	b09e      	sub	sp, #120	; 0x78
 8005f44:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005f46:	f107 0318 	add.w	r3, r7, #24
 8005f4a:	2260      	movs	r2, #96	; 0x60
 8005f4c:	2100      	movs	r1, #0
 8005f4e:	4618      	mov	r0, r3
 8005f50:	f00d ff64 	bl	8013e1c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005f54:	463b      	mov	r3, r7
 8005f56:	2200      	movs	r2, #0
 8005f58:	601a      	str	r2, [r3, #0]
 8005f5a:	605a      	str	r2, [r3, #4]
 8005f5c:	609a      	str	r2, [r3, #8]
 8005f5e:	60da      	str	r2, [r3, #12]
 8005f60:	611a      	str	r2, [r3, #16]
 8005f62:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8005f64:	f44f 3040 	mov.w	r0, #196608	; 0x30000
 8005f68:	f005 fb7e 	bl	800b668 <HAL_PWREx_ControlVoltageScaling>
 8005f6c:	4603      	mov	r3, r0
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d001      	beq.n	8005f76 <SystemClock_Config+0x36>
  {
    Error_Handler();
 8005f72:	f000 f873 	bl	800605c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8005f76:	2310      	movs	r3, #16
 8005f78:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8005f7a:	2301      	movs	r3, #1
 8005f7c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8005f7e:	2310      	movs	r3, #16
 8005f80:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_4;
 8005f82:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005f86:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005f88:	2302      	movs	r3, #2
 8005f8a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8005f8c:	2301      	movs	r3, #1
 8005f8e:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLMBOOST = RCC_PLLMBOOST_DIV1;
 8005f90:	2300      	movs	r3, #0
 8005f92:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8005f94:	2301      	movs	r3, #1
 8005f96:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 80;
 8005f98:	2350      	movs	r3, #80	; 0x50
 8005f9a:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLP = 2;
 8005f9c:	2302      	movs	r3, #2
 8005f9e:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8005fa0:	2302      	movs	r3, #2
 8005fa2:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLR = 2;
 8005fa4:	2302      	movs	r3, #2
 8005fa6:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLLVCIRANGE_0;
 8005fa8:	2300      	movs	r3, #0
 8005faa:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8005fac:	2300      	movs	r3, #0
 8005fae:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005fb0:	f107 0318 	add.w	r3, r7, #24
 8005fb4:	4618      	mov	r0, r3
 8005fb6:	f005 fc49 	bl	800b84c <HAL_RCC_OscConfig>
 8005fba:	4603      	mov	r3, r0
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d001      	beq.n	8005fc4 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8005fc0:	f000 f84c 	bl	800605c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005fc4:	231f      	movs	r3, #31
 8005fc6:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005fc8:	2303      	movs	r3, #3
 8005fca:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005fcc:	2300      	movs	r3, #0
 8005fce:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8005fd0:	2300      	movs	r3, #0
 8005fd2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8005fd4:	2300      	movs	r3, #0
 8005fd6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 8005fd8:	2300      	movs	r3, #0
 8005fda:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8005fdc:	463b      	mov	r3, r7
 8005fde:	2104      	movs	r1, #4
 8005fe0:	4618      	mov	r0, r3
 8005fe2:	f006 fb09 	bl	800c5f8 <HAL_RCC_ClockConfig>
 8005fe6:	4603      	mov	r3, r0
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d001      	beq.n	8005ff0 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8005fec:	f000 f836 	bl	800605c <Error_Handler>
  }
}
 8005ff0:	bf00      	nop
 8005ff2:	3778      	adds	r7, #120	; 0x78
 8005ff4:	46bd      	mov	sp, r7
 8005ff6:	bd80      	pop	{r7, pc}

08005ff8 <SystemPower_Config>:
/**
  * @brief Power Configuration
  * @retval None
  */
static void SystemPower_Config(void)
{
 8005ff8:	b580      	push	{r7, lr}
 8005ffa:	af00      	add	r7, sp, #0
  HAL_PWREx_EnableVddIO2();
 8005ffc:	f005 fc06 	bl	800b80c <HAL_PWREx_EnableVddIO2>

  /*
   * Switch to SMPS regulator instead of LDO
   */
  if (HAL_PWREx_ConfigSupply(PWR_SMPS_SUPPLY) != HAL_OK)
 8006000:	2002      	movs	r0, #2
 8006002:	f005 fbb3 	bl	800b76c <HAL_PWREx_ConfigSupply>
 8006006:	4603      	mov	r3, r0
 8006008:	2b00      	cmp	r3, #0
 800600a:	d001      	beq.n	8006010 <SystemPower_Config+0x18>
  {
    Error_Handler();
 800600c:	f000 f826 	bl	800605c <Error_Handler>
  }
}
 8006010:	bf00      	nop
 8006012:	bd80      	pop	{r7, pc}

08006014 <__io_putchar>:

/* USER CODE BEGIN 4 */
int __io_putchar(int ch)
{
 8006014:	b580      	push	{r7, lr}
 8006016:	b082      	sub	sp, #8
 8006018:	af00      	add	r7, sp, #0
 800601a:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 800601c:	1d39      	adds	r1, r7, #4
 800601e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006022:	2201      	movs	r2, #1
 8006024:	4803      	ldr	r0, [pc, #12]	; (8006034 <__io_putchar+0x20>)
 8006026:	f00a f985 	bl	8010334 <HAL_UART_Transmit>
  return ch;
 800602a:	687b      	ldr	r3, [r7, #4]
}
 800602c:	4618      	mov	r0, r3
 800602e:	3708      	adds	r7, #8
 8006030:	46bd      	mov	sp, r7
 8006032:	bd80      	pop	{r7, pc}
 8006034:	2001c91c 	.word	0x2001c91c

08006038 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006038:	b580      	push	{r7, lr}
 800603a:	b082      	sub	sp, #8
 800603c:	af00      	add	r7, sp, #0
 800603e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	4a04      	ldr	r2, [pc, #16]	; (8006058 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8006046:	4293      	cmp	r3, r2
 8006048:	d101      	bne.n	800604e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800604a:	f000 fe8d 	bl	8006d68 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800604e:	bf00      	nop
 8006050:	3708      	adds	r7, #8
 8006052:	46bd      	mov	sp, r7
 8006054:	bd80      	pop	{r7, pc}
 8006056:	bf00      	nop
 8006058:	40001000 	.word	0x40001000

0800605c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800605c:	b480      	push	{r7}
 800605e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8006060:	b672      	cpsid	i
}
 8006062:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8006064:	e7fe      	b.n	8006064 <Error_Handler+0x8>
	...

08006068 <MX_OCTOSPI1_Init>:

OSPI_HandleTypeDef hospi1;

/* OCTOSPI1 init function */
void MX_OCTOSPI1_Init(void)
{
 8006068:	b580      	push	{r7, lr}
 800606a:	b088      	sub	sp, #32
 800606c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN OCTOSPI1_Init 0 */

  /* USER CODE END OCTOSPI1_Init 0 */

  OSPIM_CfgTypeDef sOspiManagerCfg = {0};
 800606e:	f107 0308 	add.w	r3, r7, #8
 8006072:	2200      	movs	r2, #0
 8006074:	601a      	str	r2, [r3, #0]
 8006076:	605a      	str	r2, [r3, #4]
 8006078:	609a      	str	r2, [r3, #8]
 800607a:	60da      	str	r2, [r3, #12]
 800607c:	611a      	str	r2, [r3, #16]
 800607e:	615a      	str	r2, [r3, #20]
  HAL_OSPI_DLYB_CfgTypeDef HAL_OSPI_DLYB_Cfg_Struct = {0};
 8006080:	463b      	mov	r3, r7
 8006082:	2200      	movs	r2, #0
 8006084:	601a      	str	r2, [r3, #0]
 8006086:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN OCTOSPI1_Init 1 */

  /* USER CODE END OCTOSPI1_Init 1 */
  hospi1.Instance = OCTOSPI1;
 8006088:	4b32      	ldr	r3, [pc, #200]	; (8006154 <MX_OCTOSPI1_Init+0xec>)
 800608a:	4a33      	ldr	r2, [pc, #204]	; (8006158 <MX_OCTOSPI1_Init+0xf0>)
 800608c:	601a      	str	r2, [r3, #0]
  hospi1.Init.FifoThreshold = 1;
 800608e:	4b31      	ldr	r3, [pc, #196]	; (8006154 <MX_OCTOSPI1_Init+0xec>)
 8006090:	2201      	movs	r2, #1
 8006092:	605a      	str	r2, [r3, #4]
  hospi1.Init.DualQuad = HAL_OSPI_DUALQUAD_DISABLE;
 8006094:	4b2f      	ldr	r3, [pc, #188]	; (8006154 <MX_OCTOSPI1_Init+0xec>)
 8006096:	2200      	movs	r2, #0
 8006098:	609a      	str	r2, [r3, #8]
  hospi1.Init.MemoryType = HAL_OSPI_MEMTYPE_APMEMORY;
 800609a:	4b2e      	ldr	r3, [pc, #184]	; (8006154 <MX_OCTOSPI1_Init+0xec>)
 800609c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80060a0:	60da      	str	r2, [r3, #12]
  hospi1.Init.DeviceSize = 23;
 80060a2:	4b2c      	ldr	r3, [pc, #176]	; (8006154 <MX_OCTOSPI1_Init+0xec>)
 80060a4:	2217      	movs	r2, #23
 80060a6:	611a      	str	r2, [r3, #16]
  hospi1.Init.ChipSelectHighTime = 2;
 80060a8:	4b2a      	ldr	r3, [pc, #168]	; (8006154 <MX_OCTOSPI1_Init+0xec>)
 80060aa:	2202      	movs	r2, #2
 80060ac:	615a      	str	r2, [r3, #20]
  hospi1.Init.FreeRunningClock = HAL_OSPI_FREERUNCLK_DISABLE;
 80060ae:	4b29      	ldr	r3, [pc, #164]	; (8006154 <MX_OCTOSPI1_Init+0xec>)
 80060b0:	2200      	movs	r2, #0
 80060b2:	619a      	str	r2, [r3, #24]
  hospi1.Init.ClockMode = HAL_OSPI_CLOCK_MODE_0;
 80060b4:	4b27      	ldr	r3, [pc, #156]	; (8006154 <MX_OCTOSPI1_Init+0xec>)
 80060b6:	2200      	movs	r2, #0
 80060b8:	61da      	str	r2, [r3, #28]
  hospi1.Init.WrapSize = HAL_OSPI_WRAP_NOT_SUPPORTED;
 80060ba:	4b26      	ldr	r3, [pc, #152]	; (8006154 <MX_OCTOSPI1_Init+0xec>)
 80060bc:	2200      	movs	r2, #0
 80060be:	621a      	str	r2, [r3, #32]
  hospi1.Init.ClockPrescaler = 2;
 80060c0:	4b24      	ldr	r3, [pc, #144]	; (8006154 <MX_OCTOSPI1_Init+0xec>)
 80060c2:	2202      	movs	r2, #2
 80060c4:	625a      	str	r2, [r3, #36]	; 0x24
  hospi1.Init.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 80060c6:	4b23      	ldr	r3, [pc, #140]	; (8006154 <MX_OCTOSPI1_Init+0xec>)
 80060c8:	2200      	movs	r2, #0
 80060ca:	629a      	str	r2, [r3, #40]	; 0x28
  hospi1.Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_ENABLE;
 80060cc:	4b21      	ldr	r3, [pc, #132]	; (8006154 <MX_OCTOSPI1_Init+0xec>)
 80060ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80060d2:	62da      	str	r2, [r3, #44]	; 0x2c
  hospi1.Init.ChipSelectBoundary = 10;
 80060d4:	4b1f      	ldr	r3, [pc, #124]	; (8006154 <MX_OCTOSPI1_Init+0xec>)
 80060d6:	220a      	movs	r2, #10
 80060d8:	631a      	str	r2, [r3, #48]	; 0x30
  hospi1.Init.DelayBlockBypass = HAL_OSPI_DELAY_BLOCK_USED;
 80060da:	4b1e      	ldr	r3, [pc, #120]	; (8006154 <MX_OCTOSPI1_Init+0xec>)
 80060dc:	2200      	movs	r2, #0
 80060de:	635a      	str	r2, [r3, #52]	; 0x34
  hospi1.Init.MaxTran = 0;
 80060e0:	4b1c      	ldr	r3, [pc, #112]	; (8006154 <MX_OCTOSPI1_Init+0xec>)
 80060e2:	2200      	movs	r2, #0
 80060e4:	639a      	str	r2, [r3, #56]	; 0x38
  hospi1.Init.Refresh = 320;
 80060e6:	4b1b      	ldr	r3, [pc, #108]	; (8006154 <MX_OCTOSPI1_Init+0xec>)
 80060e8:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80060ec:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_OSPI_Init(&hospi1) != HAL_OK)
 80060ee:	4819      	ldr	r0, [pc, #100]	; (8006154 <MX_OCTOSPI1_Init+0xec>)
 80060f0:	f004 f872 	bl	800a1d8 <HAL_OSPI_Init>
 80060f4:	4603      	mov	r3, r0
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d001      	beq.n	80060fe <MX_OCTOSPI1_Init+0x96>
  {
    Error_Handler();
 80060fa:	f7ff ffaf 	bl	800605c <Error_Handler>
  }
  sOspiManagerCfg.ClkPort = 1;
 80060fe:	2301      	movs	r3, #1
 8006100:	60bb      	str	r3, [r7, #8]
  sOspiManagerCfg.DQSPort = 1;
 8006102:	2301      	movs	r3, #1
 8006104:	60fb      	str	r3, [r7, #12]
  sOspiManagerCfg.NCSPort = 1;
 8006106:	2301      	movs	r3, #1
 8006108:	613b      	str	r3, [r7, #16]
  sOspiManagerCfg.IOLowPort = HAL_OSPIM_IOPORT_1_LOW;
 800610a:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 800610e:	617b      	str	r3, [r7, #20]
  sOspiManagerCfg.IOHighPort = HAL_OSPIM_IOPORT_1_HIGH;
 8006110:	4b12      	ldr	r3, [pc, #72]	; (800615c <MX_OCTOSPI1_Init+0xf4>)
 8006112:	61bb      	str	r3, [r7, #24]
  if (HAL_OSPIM_Config(&hospi1, &sOspiManagerCfg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8006114:	f107 0308 	add.w	r3, r7, #8
 8006118:	f241 3288 	movw	r2, #5000	; 0x1388
 800611c:	4619      	mov	r1, r3
 800611e:	480d      	ldr	r0, [pc, #52]	; (8006154 <MX_OCTOSPI1_Init+0xec>)
 8006120:	f004 fa74 	bl	800a60c <HAL_OSPIM_Config>
 8006124:	4603      	mov	r3, r0
 8006126:	2b00      	cmp	r3, #0
 8006128:	d001      	beq.n	800612e <MX_OCTOSPI1_Init+0xc6>
  {
    Error_Handler();
 800612a:	f7ff ff97 	bl	800605c <Error_Handler>
  }
  HAL_OSPI_DLYB_Cfg_Struct.Units = 0;
 800612e:	2300      	movs	r3, #0
 8006130:	603b      	str	r3, [r7, #0]
  HAL_OSPI_DLYB_Cfg_Struct.PhaseSel = 0;
 8006132:	2300      	movs	r3, #0
 8006134:	607b      	str	r3, [r7, #4]
  if (HAL_OSPI_DLYB_SetConfig(&hospi1, &HAL_OSPI_DLYB_Cfg_Struct) != HAL_OK)
 8006136:	463b      	mov	r3, r7
 8006138:	4619      	mov	r1, r3
 800613a:	4806      	ldr	r0, [pc, #24]	; (8006154 <MX_OCTOSPI1_Init+0xec>)
 800613c:	f005 f9cc 	bl	800b4d8 <HAL_OSPI_DLYB_SetConfig>
 8006140:	4603      	mov	r3, r0
 8006142:	2b00      	cmp	r3, #0
 8006144:	d001      	beq.n	800614a <MX_OCTOSPI1_Init+0xe2>
  {
    Error_Handler();
 8006146:	f7ff ff89 	bl	800605c <Error_Handler>
  }
  /* USER CODE BEGIN OCTOSPI1_Init 2 */

  /* USER CODE END OCTOSPI1_Init 2 */

}
 800614a:	bf00      	nop
 800614c:	3720      	adds	r7, #32
 800614e:	46bd      	mov	sp, r7
 8006150:	bd80      	pop	{r7, pc}
 8006152:	bf00      	nop
 8006154:	2001c794 	.word	0x2001c794
 8006158:	420d1400 	.word	0x420d1400
 800615c:	01000001 	.word	0x01000001

08006160 <HAL_OSPI_MspInit>:

void HAL_OSPI_MspInit(OSPI_HandleTypeDef* ospiHandle)
{
 8006160:	b580      	push	{r7, lr}
 8006162:	b0c4      	sub	sp, #272	; 0x110
 8006164:	af00      	add	r7, sp, #0
 8006166:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800616a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800616e:	6018      	str	r0, [r3, #0]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006170:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8006174:	2200      	movs	r2, #0
 8006176:	601a      	str	r2, [r3, #0]
 8006178:	605a      	str	r2, [r3, #4]
 800617a:	609a      	str	r2, [r3, #8]
 800617c:	60da      	str	r2, [r3, #12]
 800617e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8006180:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006184:	22c8      	movs	r2, #200	; 0xc8
 8006186:	2100      	movs	r1, #0
 8006188:	4618      	mov	r0, r3
 800618a:	f00d fe47 	bl	8013e1c <memset>
  if(ospiHandle->Instance==OCTOSPI1)
 800618e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006192:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	4aa4      	ldr	r2, [pc, #656]	; (800642c <HAL_OSPI_MspInit+0x2cc>)
 800619c:	4293      	cmp	r3, r2
 800619e:	f040 813f 	bne.w	8006420 <HAL_OSPI_MspInit+0x2c0>

  /* USER CODE END OCTOSPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_OSPI;
 80061a2:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80061a6:	f04f 0300 	mov.w	r3, #0
 80061aa:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    PeriphClkInit.OspiClockSelection = RCC_OSPICLKSOURCE_SYSCLK;
 80061ae:	2300      	movs	r3, #0
 80061b0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80061b4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80061b8:	4618      	mov	r0, r3
 80061ba:	f006 fe2b 	bl	800ce14 <HAL_RCCEx_PeriphCLKConfig>
 80061be:	4603      	mov	r3, r0
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d001      	beq.n	80061c8 <HAL_OSPI_MspInit+0x68>
    {
      Error_Handler();
 80061c4:	f7ff ff4a 	bl	800605c <Error_Handler>
    }

    /* OCTOSPI1 clock enable */
    __HAL_RCC_OSPIM_CLK_ENABLE();
 80061c8:	4b99      	ldr	r3, [pc, #612]	; (8006430 <HAL_OSPI_MspInit+0x2d0>)
 80061ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80061ce:	4a98      	ldr	r2, [pc, #608]	; (8006430 <HAL_OSPI_MspInit+0x2d0>)
 80061d0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80061d4:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80061d8:	4b95      	ldr	r3, [pc, #596]	; (8006430 <HAL_OSPI_MspInit+0x2d0>)
 80061da:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80061de:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80061e2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80061e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    __HAL_RCC_OSPI1_CLK_ENABLE();
 80061e6:	4b92      	ldr	r3, [pc, #584]	; (8006430 <HAL_OSPI_MspInit+0x2d0>)
 80061e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061ec:	4a90      	ldr	r2, [pc, #576]	; (8006430 <HAL_OSPI_MspInit+0x2d0>)
 80061ee:	f043 0310 	orr.w	r3, r3, #16
 80061f2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80061f6:	4b8e      	ldr	r3, [pc, #568]	; (8006430 <HAL_OSPI_MspInit+0x2d0>)
 80061f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061fc:	f003 0310 	and.w	r3, r3, #16
 8006200:	62bb      	str	r3, [r7, #40]	; 0x28
 8006202:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOI_CLK_ENABLE();
 8006204:	4b8a      	ldr	r3, [pc, #552]	; (8006430 <HAL_OSPI_MspInit+0x2d0>)
 8006206:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800620a:	4a89      	ldr	r2, [pc, #548]	; (8006430 <HAL_OSPI_MspInit+0x2d0>)
 800620c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006210:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8006214:	4b86      	ldr	r3, [pc, #536]	; (8006430 <HAL_OSPI_MspInit+0x2d0>)
 8006216:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800621a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800621e:	627b      	str	r3, [r7, #36]	; 0x24
 8006220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8006222:	4b83      	ldr	r3, [pc, #524]	; (8006430 <HAL_OSPI_MspInit+0x2d0>)
 8006224:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006228:	4a81      	ldr	r2, [pc, #516]	; (8006430 <HAL_OSPI_MspInit+0x2d0>)
 800622a:	f043 0310 	orr.w	r3, r3, #16
 800622e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8006232:	4b7f      	ldr	r3, [pc, #508]	; (8006430 <HAL_OSPI_MspInit+0x2d0>)
 8006234:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006238:	f003 0310 	and.w	r3, r3, #16
 800623c:	623b      	str	r3, [r7, #32]
 800623e:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8006240:	4b7b      	ldr	r3, [pc, #492]	; (8006430 <HAL_OSPI_MspInit+0x2d0>)
 8006242:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006246:	4a7a      	ldr	r2, [pc, #488]	; (8006430 <HAL_OSPI_MspInit+0x2d0>)
 8006248:	f043 0308 	orr.w	r3, r3, #8
 800624c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8006250:	4b77      	ldr	r3, [pc, #476]	; (8006430 <HAL_OSPI_MspInit+0x2d0>)
 8006252:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006256:	f003 0308 	and.w	r3, r3, #8
 800625a:	61fb      	str	r3, [r7, #28]
 800625c:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800625e:	4b74      	ldr	r3, [pc, #464]	; (8006430 <HAL_OSPI_MspInit+0x2d0>)
 8006260:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006264:	4a72      	ldr	r2, [pc, #456]	; (8006430 <HAL_OSPI_MspInit+0x2d0>)
 8006266:	f043 0320 	orr.w	r3, r3, #32
 800626a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800626e:	4b70      	ldr	r3, [pc, #448]	; (8006430 <HAL_OSPI_MspInit+0x2d0>)
 8006270:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006274:	f003 0320 	and.w	r3, r3, #32
 8006278:	61bb      	str	r3, [r7, #24]
 800627a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 800627c:	4b6c      	ldr	r3, [pc, #432]	; (8006430 <HAL_OSPI_MspInit+0x2d0>)
 800627e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006282:	4a6b      	ldr	r2, [pc, #428]	; (8006430 <HAL_OSPI_MspInit+0x2d0>)
 8006284:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006288:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800628c:	4b68      	ldr	r3, [pc, #416]	; (8006430 <HAL_OSPI_MspInit+0x2d0>)
 800628e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006292:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006296:	617b      	str	r3, [r7, #20]
 8006298:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800629a:	4b65      	ldr	r3, [pc, #404]	; (8006430 <HAL_OSPI_MspInit+0x2d0>)
 800629c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80062a0:	4a63      	ldr	r2, [pc, #396]	; (8006430 <HAL_OSPI_MspInit+0x2d0>)
 80062a2:	f043 0304 	orr.w	r3, r3, #4
 80062a6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80062aa:	4b61      	ldr	r3, [pc, #388]	; (8006430 <HAL_OSPI_MspInit+0x2d0>)
 80062ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80062b0:	f003 0204 	and.w	r2, r3, #4
 80062b4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80062b8:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80062bc:	601a      	str	r2, [r3, #0]
 80062be:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80062c2:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80062c6:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80062c8:	4b59      	ldr	r3, [pc, #356]	; (8006430 <HAL_OSPI_MspInit+0x2d0>)
 80062ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80062ce:	4a58      	ldr	r2, [pc, #352]	; (8006430 <HAL_OSPI_MspInit+0x2d0>)
 80062d0:	f043 0302 	orr.w	r3, r3, #2
 80062d4:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80062d8:	4b55      	ldr	r3, [pc, #340]	; (8006430 <HAL_OSPI_MspInit+0x2d0>)
 80062da:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80062de:	f003 0202 	and.w	r2, r3, #2
 80062e2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80062e6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80062ea:	601a      	str	r2, [r3, #0]
 80062ec:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80062f0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80062f4:	681b      	ldr	r3, [r3, #0]
    PF6     ------> OCTOSPIM_P1_IO3
    PC3     ------> OCTOSPIM_P1_IO6
    PB10     ------> OCTOSPIM_P1_CLK
    PB11     ------> OCTOSPIM_P1_NCS
    */
    GPIO_InitStruct.Pin = OCTOSPI_R_IO5_Pin;
 80062f6:	2301      	movs	r3, #1
 80062f8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80062fc:	2302      	movs	r3, #2
 80062fe:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006302:	2300      	movs	r3, #0
 8006304:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006308:	2303      	movs	r3, #3
 800630a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    GPIO_InitStruct.Alternate = GPIO_AF3_OCTOSPI1;
 800630e:	2303      	movs	r3, #3
 8006310:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    HAL_GPIO_Init(OCTOSPI_R_IO5_GPIO_Port, &GPIO_InitStruct);
 8006314:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8006318:	4619      	mov	r1, r3
 800631a:	4846      	ldr	r0, [pc, #280]	; (8006434 <HAL_OSPI_MspInit+0x2d4>)
 800631c:	f002 fe02 	bl	8008f24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OCTOSPI_R_DQS_Pin;
 8006320:	2308      	movs	r3, #8
 8006322:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006326:	2302      	movs	r3, #2
 8006328:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800632c:	2300      	movs	r3, #0
 800632e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006332:	2303      	movs	r3, #3
 8006334:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    GPIO_InitStruct.Alternate = GPIO_AF3_OCTOSPI1;
 8006338:	2303      	movs	r3, #3
 800633a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    HAL_GPIO_Init(OCTOSPI_R_DQS_GPIO_Port, &GPIO_InitStruct);
 800633e:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8006342:	4619      	mov	r1, r3
 8006344:	483c      	ldr	r0, [pc, #240]	; (8006438 <HAL_OSPI_MspInit+0x2d8>)
 8006346:	f002 fded 	bl	8008f24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OCTOSPI_R_IO7_Pin;
 800634a:	2380      	movs	r3, #128	; 0x80
 800634c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006350:	2302      	movs	r3, #2
 8006352:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006356:	2300      	movs	r3, #0
 8006358:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800635c:	2303      	movs	r3, #3
 800635e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPI1;
 8006362:	230a      	movs	r3, #10
 8006364:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    HAL_GPIO_Init(OCTOSPI_R_IO7_GPIO_Port, &GPIO_InitStruct);
 8006368:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 800636c:	4619      	mov	r1, r3
 800636e:	4833      	ldr	r0, [pc, #204]	; (800643c <HAL_OSPI_MspInit+0x2dc>)
 8006370:	f002 fdd8 	bl	8008f24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OCTOSPI_R_IO0_Pin|OCTOSPI_R_IO2_Pin|OCTOSPI_R_IO1_Pin|OCTOSPI_R_IO3_Pin;
 8006374:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8006378:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800637c:	2302      	movs	r3, #2
 800637e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006382:	2300      	movs	r3, #0
 8006384:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006388:	2303      	movs	r3, #3
 800638a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPI1;
 800638e:	230a      	movs	r3, #10
 8006390:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8006394:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8006398:	4619      	mov	r1, r3
 800639a:	4829      	ldr	r0, [pc, #164]	; (8006440 <HAL_OSPI_MspInit+0x2e0>)
 800639c:	f002 fdc2 	bl	8008f24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OCTOSPI_R_IO4_Pin;
 80063a0:	2304      	movs	r3, #4
 80063a2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80063a6:	2302      	movs	r3, #2
 80063a8:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80063ac:	2300      	movs	r3, #0
 80063ae:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80063b2:	2303      	movs	r3, #3
 80063b4:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    GPIO_InitStruct.Alternate = GPIO_AF3_OCTOSPI1;
 80063b8:	2303      	movs	r3, #3
 80063ba:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    HAL_GPIO_Init(OCTOSPI_R_IO4_GPIO_Port, &GPIO_InitStruct);
 80063be:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80063c2:	4619      	mov	r1, r3
 80063c4:	481f      	ldr	r0, [pc, #124]	; (8006444 <HAL_OSPI_MspInit+0x2e4>)
 80063c6:	f002 fdad 	bl	8008f24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OCTOSPI_R_IO6_Pin;
 80063ca:	2308      	movs	r3, #8
 80063cc:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80063d0:	2302      	movs	r3, #2
 80063d2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80063d6:	2300      	movs	r3, #0
 80063d8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80063dc:	2303      	movs	r3, #3
 80063de:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPI1;
 80063e2:	230a      	movs	r3, #10
 80063e4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    HAL_GPIO_Init(OCTOSPI_R_IO6_GPIO_Port, &GPIO_InitStruct);
 80063e8:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80063ec:	4619      	mov	r1, r3
 80063ee:	4816      	ldr	r0, [pc, #88]	; (8006448 <HAL_OSPI_MspInit+0x2e8>)
 80063f0:	f002 fd98 	bl	8008f24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OCTOSPI_R_CLK_P_Pin|OCTOSPI_R_NCS_Pin;
 80063f4:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80063f8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80063fc:	2302      	movs	r3, #2
 80063fe:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006402:	2300      	movs	r3, #0
 8006404:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006408:	2303      	movs	r3, #3
 800640a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPI1;
 800640e:	230a      	movs	r3, #10
 8006410:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006414:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8006418:	4619      	mov	r1, r3
 800641a:	480c      	ldr	r0, [pc, #48]	; (800644c <HAL_OSPI_MspInit+0x2ec>)
 800641c:	f002 fd82 	bl	8008f24 <HAL_GPIO_Init>

  /* USER CODE BEGIN OCTOSPI1_MspInit 1 */

  /* USER CODE END OCTOSPI1_MspInit 1 */
  }
}
 8006420:	bf00      	nop
 8006422:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8006426:	46bd      	mov	sp, r7
 8006428:	bd80      	pop	{r7, pc}
 800642a:	bf00      	nop
 800642c:	420d1400 	.word	0x420d1400
 8006430:	46020c00 	.word	0x46020c00
 8006434:	42022000 	.word	0x42022000
 8006438:	42021000 	.word	0x42021000
 800643c:	42020c00 	.word	0x42020c00
 8006440:	42021400 	.word	0x42021400
 8006444:	42021c00 	.word	0x42021c00
 8006448:	42020800 	.word	0x42020800
 800644c:	42020400 	.word	0x42020400

08006450 <OSPI_EnableMemMappedMode>:
	  HAL_OSPI_DLYB_SetConfig(&hospi1, &HAL_OSPI_DLYB_Cfg_Struct);


}

void OSPI_EnableMemMappedMode(void){
 8006450:	b580      	push	{r7, lr}
 8006452:	b096      	sub	sp, #88	; 0x58
 8006454:	af00      	add	r7, sp, #0
	OSPI_RegularCmdTypeDef sCommand;
	OSPI_MemoryMappedTypeDef sMemMappedCfg;
	  sCommand.OperationType      = HAL_OSPI_OPTYPE_WRITE_CFG;
 8006456:	2302      	movs	r3, #2
 8006458:	60bb      	str	r3, [r7, #8]
	  sCommand.FlashId            = HAL_OSPI_FLASH_ID_1;
 800645a:	2300      	movs	r3, #0
 800645c:	60fb      	str	r3, [r7, #12]
	  sCommand.Instruction        = WRITE_CMD;
 800645e:	2380      	movs	r3, #128	; 0x80
 8006460:	613b      	str	r3, [r7, #16]
	  sCommand.InstructionMode    = HAL_OSPI_INSTRUCTION_8_LINES;
 8006462:	2304      	movs	r3, #4
 8006464:	617b      	str	r3, [r7, #20]
	  sCommand.InstructionSize    = HAL_OSPI_INSTRUCTION_8_BITS;
 8006466:	2300      	movs	r3, #0
 8006468:	61bb      	str	r3, [r7, #24]
	  sCommand.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 800646a:	2300      	movs	r3, #0
 800646c:	61fb      	str	r3, [r7, #28]
	  sCommand.AddressMode        = HAL_OSPI_ADDRESS_8_LINES;
 800646e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006472:	627b      	str	r3, [r7, #36]	; 0x24
	  sCommand.AddressSize        = HAL_OSPI_ADDRESS_32_BITS;
 8006474:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8006478:	62bb      	str	r3, [r7, #40]	; 0x28
	  sCommand.AddressDtrMode     = HAL_OSPI_ADDRESS_DTR_ENABLE;
 800647a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800647e:	62fb      	str	r3, [r7, #44]	; 0x2c
	  sCommand.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 8006480:	2300      	movs	r3, #0
 8006482:	637b      	str	r3, [r7, #52]	; 0x34
	  sCommand.DataMode           = HAL_OSPI_DATA_8_LINES;
 8006484:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8006488:	643b      	str	r3, [r7, #64]	; 0x40
	  sCommand.DataDtrMode        = HAL_OSPI_DATA_DTR_ENABLE;
 800648a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800648e:	64bb      	str	r3, [r7, #72]	; 0x48
	  sCommand.DummyCycles        = DUMMY_CLOCK_CYCLES_WRITE;
 8006490:	2304      	movs	r3, #4
 8006492:	64fb      	str	r3, [r7, #76]	; 0x4c
	  sCommand.DQSMode            = HAL_OSPI_DQS_ENABLE;
 8006494:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8006498:	653b      	str	r3, [r7, #80]	; 0x50
	  sCommand.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 800649a:	2300      	movs	r3, #0
 800649c:	657b      	str	r3, [r7, #84]	; 0x54

	  if (HAL_OSPI_Command(&hospi1, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800649e:	f107 0308 	add.w	r3, r7, #8
 80064a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80064a6:	4619      	mov	r1, r3
 80064a8:	4816      	ldr	r0, [pc, #88]	; (8006504 <OSPI_EnableMemMappedMode+0xb4>)
 80064aa:	f003 ff51 	bl	800a350 <HAL_OSPI_Command>
 80064ae:	4603      	mov	r3, r0
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d001      	beq.n	80064b8 <OSPI_EnableMemMappedMode+0x68>
	  {
	    Error_Handler();
 80064b4:	f7ff fdd2 	bl	800605c <Error_Handler>
	  }

	  sCommand.OperationType = HAL_OSPI_OPTYPE_READ_CFG;
 80064b8:	2301      	movs	r3, #1
 80064ba:	60bb      	str	r3, [r7, #8]
	  sCommand.Instruction   = READ_CMD;
 80064bc:	2300      	movs	r3, #0
 80064be:	613b      	str	r3, [r7, #16]
	  sCommand.DummyCycles   = DUMMY_CLOCK_CYCLES_READ;
 80064c0:	2305      	movs	r3, #5
 80064c2:	64fb      	str	r3, [r7, #76]	; 0x4c

	  if (HAL_OSPI_Command(&hospi1, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80064c4:	f107 0308 	add.w	r3, r7, #8
 80064c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80064cc:	4619      	mov	r1, r3
 80064ce:	480d      	ldr	r0, [pc, #52]	; (8006504 <OSPI_EnableMemMappedMode+0xb4>)
 80064d0:	f003 ff3e 	bl	800a350 <HAL_OSPI_Command>
 80064d4:	4603      	mov	r3, r0
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d001      	beq.n	80064de <OSPI_EnableMemMappedMode+0x8e>
	  {
	    Error_Handler();
 80064da:	f7ff fdbf 	bl	800605c <Error_Handler>
	  }

	  sMemMappedCfg.TimeOutActivation = HAL_OSPI_TIMEOUT_COUNTER_ENABLE;
 80064de:	2308      	movs	r3, #8
 80064e0:	603b      	str	r3, [r7, #0]
	  sMemMappedCfg.TimeOutPeriod     = 0x34;
 80064e2:	2334      	movs	r3, #52	; 0x34
 80064e4:	607b      	str	r3, [r7, #4]

	  if (HAL_OSPI_MemoryMapped(&hospi1, &sMemMappedCfg) != HAL_OK)
 80064e6:	463b      	mov	r3, r7
 80064e8:	4619      	mov	r1, r3
 80064ea:	4806      	ldr	r0, [pc, #24]	; (8006504 <OSPI_EnableMemMappedMode+0xb4>)
 80064ec:	f003 ffbd 	bl	800a46a <HAL_OSPI_MemoryMapped>
 80064f0:	4603      	mov	r3, r0
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d001      	beq.n	80064fa <OSPI_EnableMemMappedMode+0xaa>
	  {
	    Error_Handler();
 80064f6:	f7ff fdb1 	bl	800605c <Error_Handler>
	  }
}
 80064fa:	bf00      	nop
 80064fc:	3758      	adds	r7, #88	; 0x58
 80064fe:	46bd      	mov	sp, r7
 8006500:	bd80      	pop	{r7, pc}
 8006502:	bf00      	nop
 8006504:	2001c794 	.word	0x2001c794

08006508 <OSPI_DelayBlockConfig>:

void OSPI_DelayBlockConfig(void){
 8006508:	b580      	push	{r7, lr}
 800650a:	b084      	sub	sp, #16
 800650c:	af00      	add	r7, sp, #0
	  LL_DLYB_CfgTypeDef dlyb_cfg,dlyb_cfg_test;
	  /* Delay block configuration ------------------------------------------------ */
	  HAL_OSPI_DLYB_GetClockPeriod(&hospi1,&dlyb_cfg);
 800650e:	f107 0308 	add.w	r3, r7, #8
 8006512:	4619      	mov	r1, r3
 8006514:	4813      	ldr	r0, [pc, #76]	; (8006564 <OSPI_DelayBlockConfig+0x5c>)
 8006516:	f005 f853 	bl	800b5c0 <HAL_OSPI_DLYB_GetClockPeriod>

	  /*when DTR, PhaseSel is divided by 4 (emperic value)*/
	  dlyb_cfg.PhaseSel /=4;
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	089b      	lsrs	r3, r3, #2
 800651e:	60fb      	str	r3, [r7, #12]

	  /* save the present configuration for check*/
	  dlyb_cfg_test = dlyb_cfg;
 8006520:	463b      	mov	r3, r7
 8006522:	f107 0208 	add.w	r2, r7, #8
 8006526:	e892 0003 	ldmia.w	r2, {r0, r1}
 800652a:	e883 0003 	stmia.w	r3, {r0, r1}

	  /*set delay block configuration*/
	  HAL_OSPI_DLYB_SetConfig(&hospi1,&dlyb_cfg);
 800652e:	f107 0308 	add.w	r3, r7, #8
 8006532:	4619      	mov	r1, r3
 8006534:	480b      	ldr	r0, [pc, #44]	; (8006564 <OSPI_DelayBlockConfig+0x5c>)
 8006536:	f004 ffcf 	bl	800b4d8 <HAL_OSPI_DLYB_SetConfig>

	  /*check the set value*/
	  HAL_OSPI_DLYB_GetConfig(&hospi1,&dlyb_cfg);
 800653a:	f107 0308 	add.w	r3, r7, #8
 800653e:	4619      	mov	r1, r3
 8006540:	4808      	ldr	r0, [pc, #32]	; (8006564 <OSPI_DelayBlockConfig+0x5c>)
 8006542:	f005 f811 	bl	800b568 <HAL_OSPI_DLYB_GetConfig>
	  if ((dlyb_cfg.PhaseSel != dlyb_cfg_test.PhaseSel) || (dlyb_cfg.Units != dlyb_cfg_test.Units))
 8006546:	68fa      	ldr	r2, [r7, #12]
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	429a      	cmp	r2, r3
 800654c:	d103      	bne.n	8006556 <OSPI_DelayBlockConfig+0x4e>
 800654e:	68ba      	ldr	r2, [r7, #8]
 8006550:	683b      	ldr	r3, [r7, #0]
 8006552:	429a      	cmp	r2, r3
 8006554:	d001      	beq.n	800655a <OSPI_DelayBlockConfig+0x52>
	  {
	    Error_Handler();
 8006556:	f7ff fd81 	bl	800605c <Error_Handler>
	  }
}
 800655a:	bf00      	nop
 800655c:	3710      	adds	r7, #16
 800655e:	46bd      	mov	sp, r7
 8006560:	bd80      	pop	{r7, pc}
 8006562:	bf00      	nop
 8006564:	2001c794 	.word	0x2001c794

08006568 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8006568:	b580      	push	{r7, lr}
 800656a:	b084      	sub	sp, #16
 800656c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 0 */

  /* USER CODE END SPI2_Init 0 */

  SPI_AutonomousModeConfTypeDef HAL_SPI_AutonomousMode_Cfg_Struct = {0};
 800656e:	1d3b      	adds	r3, r7, #4
 8006570:	2200      	movs	r2, #0
 8006572:	601a      	str	r2, [r3, #0]
 8006574:	605a      	str	r2, [r3, #4]
 8006576:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8006578:	4b34      	ldr	r3, [pc, #208]	; (800664c <MX_SPI2_Init+0xe4>)
 800657a:	4a35      	ldr	r2, [pc, #212]	; (8006650 <MX_SPI2_Init+0xe8>)
 800657c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800657e:	4b33      	ldr	r3, [pc, #204]	; (800664c <MX_SPI2_Init+0xe4>)
 8006580:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8006584:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8006586:	4b31      	ldr	r3, [pc, #196]	; (800664c <MX_SPI2_Init+0xe4>)
 8006588:	2200      	movs	r2, #0
 800658a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800658c:	4b2f      	ldr	r3, [pc, #188]	; (800664c <MX_SPI2_Init+0xe4>)
 800658e:	2207      	movs	r2, #7
 8006590:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8006592:	4b2e      	ldr	r3, [pc, #184]	; (800664c <MX_SPI2_Init+0xe4>)
 8006594:	2200      	movs	r2, #0
 8006596:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8006598:	4b2c      	ldr	r3, [pc, #176]	; (800664c <MX_SPI2_Init+0xe4>)
 800659a:	2200      	movs	r2, #0
 800659c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800659e:	4b2b      	ldr	r3, [pc, #172]	; (800664c <MX_SPI2_Init+0xe4>)
 80065a0:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80065a4:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80065a6:	4b29      	ldr	r3, [pc, #164]	; (800664c <MX_SPI2_Init+0xe4>)
 80065a8:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80065ac:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80065ae:	4b27      	ldr	r3, [pc, #156]	; (800664c <MX_SPI2_Init+0xe4>)
 80065b0:	2200      	movs	r2, #0
 80065b2:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80065b4:	4b25      	ldr	r3, [pc, #148]	; (800664c <MX_SPI2_Init+0xe4>)
 80065b6:	2200      	movs	r2, #0
 80065b8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80065ba:	4b24      	ldr	r3, [pc, #144]	; (800664c <MX_SPI2_Init+0xe4>)
 80065bc:	2200      	movs	r2, #0
 80065be:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x7;
 80065c0:	4b22      	ldr	r3, [pc, #136]	; (800664c <MX_SPI2_Init+0xe4>)
 80065c2:	2207      	movs	r2, #7
 80065c4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80065c6:	4b21      	ldr	r3, [pc, #132]	; (800664c <MX_SPI2_Init+0xe4>)
 80065c8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80065cc:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80065ce:	4b1f      	ldr	r3, [pc, #124]	; (800664c <MX_SPI2_Init+0xe4>)
 80065d0:	2200      	movs	r2, #0
 80065d2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80065d4:	4b1d      	ldr	r3, [pc, #116]	; (800664c <MX_SPI2_Init+0xe4>)
 80065d6:	2200      	movs	r2, #0
 80065d8:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80065da:	4b1c      	ldr	r3, [pc, #112]	; (800664c <MX_SPI2_Init+0xe4>)
 80065dc:	2200      	movs	r2, #0
 80065de:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80065e0:	4b1a      	ldr	r3, [pc, #104]	; (800664c <MX_SPI2_Init+0xe4>)
 80065e2:	2200      	movs	r2, #0
 80065e4:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80065e6:	4b19      	ldr	r3, [pc, #100]	; (800664c <MX_SPI2_Init+0xe4>)
 80065e8:	2200      	movs	r2, #0
 80065ea:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80065ec:	4b17      	ldr	r3, [pc, #92]	; (800664c <MX_SPI2_Init+0xe4>)
 80065ee:	2200      	movs	r2, #0
 80065f0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80065f2:	4b16      	ldr	r3, [pc, #88]	; (800664c <MX_SPI2_Init+0xe4>)
 80065f4:	2200      	movs	r2, #0
 80065f6:	659a      	str	r2, [r3, #88]	; 0x58
  hspi2.Init.ReadyMasterManagement = SPI_RDY_MASTER_MANAGEMENT_INTERNALLY;
 80065f8:	4b14      	ldr	r3, [pc, #80]	; (800664c <MX_SPI2_Init+0xe4>)
 80065fa:	2200      	movs	r2, #0
 80065fc:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi2.Init.ReadyPolarity = SPI_RDY_POLARITY_HIGH;
 80065fe:	4b13      	ldr	r3, [pc, #76]	; (800664c <MX_SPI2_Init+0xe4>)
 8006600:	2200      	movs	r2, #0
 8006602:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8006604:	4811      	ldr	r0, [pc, #68]	; (800664c <MX_SPI2_Init+0xe4>)
 8006606:	f009 f84f 	bl	800f6a8 <HAL_SPI_Init>
 800660a:	4603      	mov	r3, r0
 800660c:	2b00      	cmp	r3, #0
 800660e:	d001      	beq.n	8006614 <MX_SPI2_Init+0xac>
  {
    Error_Handler();
 8006610:	f7ff fd24 	bl	800605c <Error_Handler>
  }
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerState = SPI_AUTO_MODE_DISABLE;
 8006614:	2300      	movs	r3, #0
 8006616:	607b      	str	r3, [r7, #4]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerSelection = SPI_GRP1_GPDMA_CH0_TCF_TRG;
 8006618:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800661c:	60bb      	str	r3, [r7, #8]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerPolarity = SPI_TRIG_POLARITY_RISING;
 800661e:	2300      	movs	r3, #0
 8006620:	60fb      	str	r3, [r7, #12]
  if (HAL_SPIEx_SetConfigAutonomousMode(&hspi2, &HAL_SPI_AutonomousMode_Cfg_Struct) != HAL_OK)
 8006622:	1d3b      	adds	r3, r7, #4
 8006624:	4619      	mov	r1, r3
 8006626:	4809      	ldr	r0, [pc, #36]	; (800664c <MX_SPI2_Init+0xe4>)
 8006628:	f009 f951 	bl	800f8ce <HAL_SPIEx_SetConfigAutonomousMode>
 800662c:	4603      	mov	r3, r0
 800662e:	2b00      	cmp	r3, #0
 8006630:	d001      	beq.n	8006636 <MX_SPI2_Init+0xce>
  {
    Error_Handler();
 8006632:	f7ff fd13 	bl	800605c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */
  SPI2->CFG1 |= 0x00000007 << SPI_CFG1_CRCSIZE_Pos;
 8006636:	4b06      	ldr	r3, [pc, #24]	; (8006650 <MX_SPI2_Init+0xe8>)
 8006638:	689b      	ldr	r3, [r3, #8]
 800663a:	4a05      	ldr	r2, [pc, #20]	; (8006650 <MX_SPI2_Init+0xe8>)
 800663c:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 8006640:	6093      	str	r3, [r2, #8]
  /* USER CODE END SPI2_Init 2 */

}
 8006642:	bf00      	nop
 8006644:	3710      	adds	r7, #16
 8006646:	46bd      	mov	sp, r7
 8006648:	bd80      	pop	{r7, pc}
 800664a:	bf00      	nop
 800664c:	2001c7f0 	.word	0x2001c7f0
 8006650:	40003800 	.word	0x40003800

08006654 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8006654:	b580      	push	{r7, lr}
 8006656:	b0bc      	sub	sp, #240	; 0xf0
 8006658:	af00      	add	r7, sp, #0
 800665a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800665c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8006660:	2200      	movs	r2, #0
 8006662:	601a      	str	r2, [r3, #0]
 8006664:	605a      	str	r2, [r3, #4]
 8006666:	609a      	str	r2, [r3, #8]
 8006668:	60da      	str	r2, [r3, #12]
 800666a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800666c:	f107 0310 	add.w	r3, r7, #16
 8006670:	22c8      	movs	r2, #200	; 0xc8
 8006672:	2100      	movs	r1, #0
 8006674:	4618      	mov	r0, r3
 8006676:	f00d fbd1 	bl	8013e1c <memset>
  if(spiHandle->Instance==SPI2)
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	4a27      	ldr	r2, [pc, #156]	; (800671c <HAL_SPI_MspInit+0xc8>)
 8006680:	4293      	cmp	r3, r2
 8006682:	d146      	bne.n	8006712 <HAL_SPI_MspInit+0xbe>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8006684:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006688:	f04f 0300 	mov.w	r3, #0
 800668c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.Spi2ClockSelection = RCC_SPI2CLKSOURCE_SYSCLK;
 8006690:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006694:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8006698:	f107 0310 	add.w	r3, r7, #16
 800669c:	4618      	mov	r0, r3
 800669e:	f006 fbb9 	bl	800ce14 <HAL_RCCEx_PeriphCLKConfig>
 80066a2:	4603      	mov	r3, r0
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d001      	beq.n	80066ac <HAL_SPI_MspInit+0x58>
    {
      Error_Handler();
 80066a8:	f7ff fcd8 	bl	800605c <Error_Handler>
    }

    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80066ac:	4b1c      	ldr	r3, [pc, #112]	; (8006720 <HAL_SPI_MspInit+0xcc>)
 80066ae:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80066b2:	4a1b      	ldr	r2, [pc, #108]	; (8006720 <HAL_SPI_MspInit+0xcc>)
 80066b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80066b8:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80066bc:	4b18      	ldr	r3, [pc, #96]	; (8006720 <HAL_SPI_MspInit+0xcc>)
 80066be:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80066c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80066c6:	60fb      	str	r3, [r7, #12]
 80066c8:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80066ca:	4b15      	ldr	r3, [pc, #84]	; (8006720 <HAL_SPI_MspInit+0xcc>)
 80066cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80066d0:	4a13      	ldr	r2, [pc, #76]	; (8006720 <HAL_SPI_MspInit+0xcc>)
 80066d2:	f043 0308 	orr.w	r3, r3, #8
 80066d6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80066da:	4b11      	ldr	r3, [pc, #68]	; (8006720 <HAL_SPI_MspInit+0xcc>)
 80066dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80066e0:	f003 0308 	and.w	r3, r3, #8
 80066e4:	60bb      	str	r3, [r7, #8]
 80066e6:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PD4     ------> SPI2_MOSI
    PD3     ------> SPI2_MISO
    PD1     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_3|GPIO_PIN_1;
 80066e8:	231a      	movs	r3, #26
 80066ea:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80066ee:	2302      	movs	r3, #2
 80066f0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80066f4:	2300      	movs	r3, #0
 80066f6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80066fa:	2300      	movs	r3, #0
 80066fc:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8006700:	2305      	movs	r3, #5
 8006702:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006706:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800670a:	4619      	mov	r1, r3
 800670c:	4805      	ldr	r0, [pc, #20]	; (8006724 <HAL_SPI_MspInit+0xd0>)
 800670e:	f002 fc09 	bl	8008f24 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8006712:	bf00      	nop
 8006714:	37f0      	adds	r7, #240	; 0xf0
 8006716:	46bd      	mov	sp, r7
 8006718:	bd80      	pop	{r7, pc}
 800671a:	bf00      	nop
 800671c:	40003800 	.word	0x40003800
 8006720:	46020c00 	.word	0x46020c00
 8006724:	42020c00 	.word	0x42020c00

08006728 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006728:	b580      	push	{r7, lr}
 800672a:	b082      	sub	sp, #8
 800672c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800672e:	4b0d      	ldr	r3, [pc, #52]	; (8006764 <HAL_MspInit+0x3c>)
 8006730:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006734:	4a0b      	ldr	r2, [pc, #44]	; (8006764 <HAL_MspInit+0x3c>)
 8006736:	f043 0304 	orr.w	r3, r3, #4
 800673a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800673e:	4b09      	ldr	r3, [pc, #36]	; (8006764 <HAL_MspInit+0x3c>)
 8006740:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006744:	f003 0304 	and.w	r3, r3, #4
 8006748:	607b      	str	r3, [r7, #4]
 800674a:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* DCACHE1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DCACHE1_IRQn, 6, 0);
 800674c:	2200      	movs	r2, #0
 800674e:	2106      	movs	r1, #6
 8006750:	206f      	movs	r0, #111	; 0x6f
 8006752:	f000 fc37 	bl	8006fc4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DCACHE1_IRQn);
 8006756:	206f      	movs	r0, #111	; 0x6f
 8006758:	f000 fc4e 	bl	8006ff8 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800675c:	bf00      	nop
 800675e:	3708      	adds	r7, #8
 8006760:	46bd      	mov	sp, r7
 8006762:	bd80      	pop	{r7, pc}
 8006764:	46020c00 	.word	0x46020c00

08006768 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006768:	b580      	push	{r7, lr}
 800676a:	b08e      	sub	sp, #56	; 0x38
 800676c:	af00      	add	r7, sp, #0
 800676e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8006770:	2300      	movs	r3, #0
 8006772:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t              uwPrescalerValue = 0;
 8006774:	2300      	movs	r3, #0
 8006776:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8006778:	4b2e      	ldr	r3, [pc, #184]	; (8006834 <HAL_InitTick+0xcc>)
 800677a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800677e:	4a2d      	ldr	r2, [pc, #180]	; (8006834 <HAL_InitTick+0xcc>)
 8006780:	f043 0310 	orr.w	r3, r3, #16
 8006784:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8006788:	4b2a      	ldr	r3, [pc, #168]	; (8006834 <HAL_InitTick+0xcc>)
 800678a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800678e:	f003 0310 	and.w	r3, r3, #16
 8006792:	60fb      	str	r3, [r7, #12]
 8006794:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8006796:	f107 0210 	add.w	r2, r7, #16
 800679a:	f107 0314 	add.w	r3, r7, #20
 800679e:	4611      	mov	r1, r2
 80067a0:	4618      	mov	r0, r3
 80067a2:	f006 fa79 	bl	800cc98 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 80067a6:	f006 fa3b 	bl	800cc20 <HAL_RCC_GetPCLK1Freq>
 80067aa:	6338      	str	r0, [r7, #48]	; 0x30
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80067ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067ae:	4a22      	ldr	r2, [pc, #136]	; (8006838 <HAL_InitTick+0xd0>)
 80067b0:	fba2 2303 	umull	r2, r3, r2, r3
 80067b4:	0c9b      	lsrs	r3, r3, #18
 80067b6:	3b01      	subs	r3, #1
 80067b8:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80067ba:	4b20      	ldr	r3, [pc, #128]	; (800683c <HAL_InitTick+0xd4>)
 80067bc:	4a20      	ldr	r2, [pc, #128]	; (8006840 <HAL_InitTick+0xd8>)
 80067be:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80067c0:	4b1e      	ldr	r3, [pc, #120]	; (800683c <HAL_InitTick+0xd4>)
 80067c2:	f240 32e7 	movw	r2, #999	; 0x3e7
 80067c6:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80067c8:	4a1c      	ldr	r2, [pc, #112]	; (800683c <HAL_InitTick+0xd4>)
 80067ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067cc:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80067ce:	4b1b      	ldr	r3, [pc, #108]	; (800683c <HAL_InitTick+0xd4>)
 80067d0:	2200      	movs	r2, #0
 80067d2:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80067d4:	4b19      	ldr	r3, [pc, #100]	; (800683c <HAL_InitTick+0xd4>)
 80067d6:	2200      	movs	r2, #0
 80067d8:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
 80067da:	4818      	ldr	r0, [pc, #96]	; (800683c <HAL_InitTick+0xd4>)
 80067dc:	f009 f8b8 	bl	800f950 <HAL_TIM_Base_Init>
 80067e0:	4603      	mov	r3, r0
 80067e2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  if (status == HAL_OK)
 80067e6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d118      	bne.n	8006820 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80067ee:	4813      	ldr	r0, [pc, #76]	; (800683c <HAL_InitTick+0xd4>)
 80067f0:	f009 f906 	bl	800fa00 <HAL_TIM_Base_Start_IT>
 80067f4:	4603      	mov	r3, r0
 80067f6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if (status == HAL_OK)
 80067fa:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d10e      	bne.n	8006820 <HAL_InitTick+0xb8>
    {
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	2b0f      	cmp	r3, #15
 8006806:	d808      	bhi.n	800681a <HAL_InitTick+0xb2>
      {
        /* Enable the TIM6 global Interrupt */
        HAL_NVIC_SetPriority(TIM6_IRQn, TickPriority, 0U);
 8006808:	2200      	movs	r2, #0
 800680a:	6879      	ldr	r1, [r7, #4]
 800680c:	2031      	movs	r0, #49	; 0x31
 800680e:	f000 fbd9 	bl	8006fc4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8006812:	4a0c      	ldr	r2, [pc, #48]	; (8006844 <HAL_InitTick+0xdc>)
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	6013      	str	r3, [r2, #0]
 8006818:	e002      	b.n	8006820 <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 800681a:	2301      	movs	r3, #1
 800681c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
      }
    }
  }
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_IRQn);
 8006820:	2031      	movs	r0, #49	; 0x31
 8006822:	f000 fbe9 	bl	8006ff8 <HAL_NVIC_EnableIRQ>

 /* Return function status */
  return status;
 8006826:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 800682a:	4618      	mov	r0, r3
 800682c:	3738      	adds	r7, #56	; 0x38
 800682e:	46bd      	mov	sp, r7
 8006830:	bd80      	pop	{r7, pc}
 8006832:	bf00      	nop
 8006834:	46020c00 	.word	0x46020c00
 8006838:	431bde83 	.word	0x431bde83
 800683c:	2001c880 	.word	0x2001c880
 8006840:	40001000 	.word	0x40001000
 8006844:	20000004 	.word	0x20000004

08006848 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006848:	b480      	push	{r7}
 800684a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800684c:	e7fe      	b.n	800684c <NMI_Handler+0x4>

0800684e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800684e:	b480      	push	{r7}
 8006850:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8006852:	e7fe      	b.n	8006852 <HardFault_Handler+0x4>

08006854 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8006854:	b480      	push	{r7}
 8006856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8006858:	e7fe      	b.n	8006858 <MemManage_Handler+0x4>

0800685a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800685a:	b480      	push	{r7}
 800685c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800685e:	e7fe      	b.n	800685e <BusFault_Handler+0x4>

08006860 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006860:	b480      	push	{r7}
 8006862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8006864:	e7fe      	b.n	8006864 <UsageFault_Handler+0x4>

08006866 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8006866:	b480      	push	{r7}
 8006868:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800686a:	bf00      	nop
 800686c:	46bd      	mov	sp, r7
 800686e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006872:	4770      	bx	lr

08006874 <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 8006874:	b580      	push	{r7, lr}
 8006876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8006878:	4802      	ldr	r0, [pc, #8]	; (8006884 <TIM6_IRQHandler+0x10>)
 800687a:	f009 f961 	bl	800fb40 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 800687e:	bf00      	nop
 8006880:	bd80      	pop	{r7, pc}
 8006882:	bf00      	nop
 8006884:	2001c880 	.word	0x2001c880

08006888 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8006888:	b580      	push	{r7, lr}
 800688a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 800688c:	4803      	ldr	r0, [pc, #12]	; (800689c <TIM7_IRQHandler+0x14>)
 800688e:	f009 f957 	bl	800fb40 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */
  TIM7_ResumeMotionThread();
 8006892:	f7fe faff 	bl	8004e94 <TIM7_ResumeMotionThread>
  /* USER CODE END TIM7_IRQn 1 */
}
 8006896:	bf00      	nop
 8006898:	bd80      	pop	{r7, pc}
 800689a:	bf00      	nop
 800689c:	2001c8d0 	.word	0x2001c8d0

080068a0 <GPDMA1_Channel12_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 12 global interrupt.
  */
void GPDMA1_Channel12_IRQHandler(void)
{
 80068a0:	b580      	push	{r7, lr}
 80068a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel12_IRQn 0 */

  /* USER CODE END GPDMA1_Channel12_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel12);
 80068a4:	4802      	ldr	r0, [pc, #8]	; (80068b0 <GPDMA1_Channel12_IRQHandler+0x10>)
 80068a6:	f001 fa2d 	bl	8007d04 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel12_IRQn 1 */
  /* USER CODE END GPDMA1_Channel12_IRQn 1 */
}
 80068aa:	bf00      	nop
 80068ac:	bd80      	pop	{r7, pc}
 80068ae:	bf00      	nop
 80068b0:	2001c624 	.word	0x2001c624

080068b4 <DCACHE1_IRQHandler>:

/**
  * @brief This function handles Data cache global interrupt.
  */
void DCACHE1_IRQHandler(void)
{
 80068b4:	b580      	push	{r7, lr}
 80068b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DCACHE1_IRQn 0 */

  /* USER CODE END DCACHE1_IRQn 0 */
  HAL_DCACHE_IRQHandler(&hdcache1);
 80068b8:	4802      	ldr	r0, [pc, #8]	; (80068c4 <DCACHE1_IRQHandler+0x10>)
 80068ba:	f000 fc49 	bl	8007150 <HAL_DCACHE_IRQHandler>
  /* USER CODE BEGIN DCACHE1_IRQn 1 */

  /* USER CODE END DCACHE1_IRQn 1 */
}
 80068be:	bf00      	nop
 80068c0:	bd80      	pop	{r7, pc}
 80068c2:	bf00      	nop
 80068c4:	2001c5a8 	.word	0x2001c5a8

080068c8 <DCMI_PSSI_IRQHandler>:

/**
  * @brief This function handles DCMI/PSSI global interrupt.
  */
void DCMI_PSSI_IRQHandler(void)
{
 80068c8:	b580      	push	{r7, lr}
 80068ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DCMI_PSSI_IRQn 0 */

  /* USER CODE END DCMI_PSSI_IRQn 0 */
  HAL_DCMI_IRQHandler(&hdcmi);
 80068cc:	4802      	ldr	r0, [pc, #8]	; (80068d8 <DCMI_PSSI_IRQHandler+0x10>)
 80068ce:	f000 ffc1 	bl	8007854 <HAL_DCMI_IRQHandler>
  /* USER CODE BEGIN DCMI_PSSI_IRQn 1 */

  /* USER CODE END DCMI_PSSI_IRQn 1 */
}
 80068d2:	bf00      	nop
 80068d4:	bd80      	pop	{r7, pc}
 80068d6:	bf00      	nop
 80068d8:	2001c5d4 	.word	0x2001c5d4

080068dc <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80068dc:	b580      	push	{r7, lr}
 80068de:	b086      	sub	sp, #24
 80068e0:	af00      	add	r7, sp, #0
 80068e2:	60f8      	str	r0, [r7, #12]
 80068e4:	60b9      	str	r1, [r7, #8]
 80068e6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80068e8:	2300      	movs	r3, #0
 80068ea:	617b      	str	r3, [r7, #20]
 80068ec:	e00a      	b.n	8006904 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80068ee:	e000      	b.n	80068f2 <_read+0x16>
 80068f0:	bf00      	nop
 80068f2:	4601      	mov	r1, r0
 80068f4:	68bb      	ldr	r3, [r7, #8]
 80068f6:	1c5a      	adds	r2, r3, #1
 80068f8:	60ba      	str	r2, [r7, #8]
 80068fa:	b2ca      	uxtb	r2, r1
 80068fc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80068fe:	697b      	ldr	r3, [r7, #20]
 8006900:	3301      	adds	r3, #1
 8006902:	617b      	str	r3, [r7, #20]
 8006904:	697a      	ldr	r2, [r7, #20]
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	429a      	cmp	r2, r3
 800690a:	dbf0      	blt.n	80068ee <_read+0x12>
	}

return len;
 800690c:	687b      	ldr	r3, [r7, #4]
}
 800690e:	4618      	mov	r0, r3
 8006910:	3718      	adds	r7, #24
 8006912:	46bd      	mov	sp, r7
 8006914:	bd80      	pop	{r7, pc}

08006916 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8006916:	b580      	push	{r7, lr}
 8006918:	b086      	sub	sp, #24
 800691a:	af00      	add	r7, sp, #0
 800691c:	60f8      	str	r0, [r7, #12]
 800691e:	60b9      	str	r1, [r7, #8]
 8006920:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006922:	2300      	movs	r3, #0
 8006924:	617b      	str	r3, [r7, #20]
 8006926:	e009      	b.n	800693c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8006928:	68bb      	ldr	r3, [r7, #8]
 800692a:	1c5a      	adds	r2, r3, #1
 800692c:	60ba      	str	r2, [r7, #8]
 800692e:	781b      	ldrb	r3, [r3, #0]
 8006930:	4618      	mov	r0, r3
 8006932:	f7ff fb6f 	bl	8006014 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006936:	697b      	ldr	r3, [r7, #20]
 8006938:	3301      	adds	r3, #1
 800693a:	617b      	str	r3, [r7, #20]
 800693c:	697a      	ldr	r2, [r7, #20]
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	429a      	cmp	r2, r3
 8006942:	dbf1      	blt.n	8006928 <_write+0x12>
	}
	return len;
 8006944:	687b      	ldr	r3, [r7, #4]
}
 8006946:	4618      	mov	r0, r3
 8006948:	3718      	adds	r7, #24
 800694a:	46bd      	mov	sp, r7
 800694c:	bd80      	pop	{r7, pc}

0800694e <_close>:

int _close(int file)
{
 800694e:	b480      	push	{r7}
 8006950:	b083      	sub	sp, #12
 8006952:	af00      	add	r7, sp, #0
 8006954:	6078      	str	r0, [r7, #4]
	return -1;
 8006956:	f04f 33ff 	mov.w	r3, #4294967295
}
 800695a:	4618      	mov	r0, r3
 800695c:	370c      	adds	r7, #12
 800695e:	46bd      	mov	sp, r7
 8006960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006964:	4770      	bx	lr

08006966 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8006966:	b480      	push	{r7}
 8006968:	b083      	sub	sp, #12
 800696a:	af00      	add	r7, sp, #0
 800696c:	6078      	str	r0, [r7, #4]
 800696e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8006970:	683b      	ldr	r3, [r7, #0]
 8006972:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8006976:	605a      	str	r2, [r3, #4]
	return 0;
 8006978:	2300      	movs	r3, #0
}
 800697a:	4618      	mov	r0, r3
 800697c:	370c      	adds	r7, #12
 800697e:	46bd      	mov	sp, r7
 8006980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006984:	4770      	bx	lr

08006986 <_isatty>:

int _isatty(int file)
{
 8006986:	b480      	push	{r7}
 8006988:	b083      	sub	sp, #12
 800698a:	af00      	add	r7, sp, #0
 800698c:	6078      	str	r0, [r7, #4]
	return 1;
 800698e:	2301      	movs	r3, #1
}
 8006990:	4618      	mov	r0, r3
 8006992:	370c      	adds	r7, #12
 8006994:	46bd      	mov	sp, r7
 8006996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800699a:	4770      	bx	lr

0800699c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800699c:	b480      	push	{r7}
 800699e:	b085      	sub	sp, #20
 80069a0:	af00      	add	r7, sp, #0
 80069a2:	60f8      	str	r0, [r7, #12]
 80069a4:	60b9      	str	r1, [r7, #8]
 80069a6:	607a      	str	r2, [r7, #4]
	return 0;
 80069a8:	2300      	movs	r3, #0
}
 80069aa:	4618      	mov	r0, r3
 80069ac:	3714      	adds	r7, #20
 80069ae:	46bd      	mov	sp, r7
 80069b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b4:	4770      	bx	lr
	...

080069b8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80069b8:	b580      	push	{r7, lr}
 80069ba:	b086      	sub	sp, #24
 80069bc:	af00      	add	r7, sp, #0
 80069be:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80069c0:	4a14      	ldr	r2, [pc, #80]	; (8006a14 <_sbrk+0x5c>)
 80069c2:	4b15      	ldr	r3, [pc, #84]	; (8006a18 <_sbrk+0x60>)
 80069c4:	1ad3      	subs	r3, r2, r3
 80069c6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80069c8:	697b      	ldr	r3, [r7, #20]
 80069ca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80069cc:	4b13      	ldr	r3, [pc, #76]	; (8006a1c <_sbrk+0x64>)
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d102      	bne.n	80069da <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80069d4:	4b11      	ldr	r3, [pc, #68]	; (8006a1c <_sbrk+0x64>)
 80069d6:	4a12      	ldr	r2, [pc, #72]	; (8006a20 <_sbrk+0x68>)
 80069d8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80069da:	4b10      	ldr	r3, [pc, #64]	; (8006a1c <_sbrk+0x64>)
 80069dc:	681a      	ldr	r2, [r3, #0]
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	4413      	add	r3, r2
 80069e2:	693a      	ldr	r2, [r7, #16]
 80069e4:	429a      	cmp	r2, r3
 80069e6:	d207      	bcs.n	80069f8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80069e8:	f00d f9ee 	bl	8013dc8 <__errno>
 80069ec:	4603      	mov	r3, r0
 80069ee:	220c      	movs	r2, #12
 80069f0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80069f2:	f04f 33ff 	mov.w	r3, #4294967295
 80069f6:	e009      	b.n	8006a0c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80069f8:	4b08      	ldr	r3, [pc, #32]	; (8006a1c <_sbrk+0x64>)
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80069fe:	4b07      	ldr	r3, [pc, #28]	; (8006a1c <_sbrk+0x64>)
 8006a00:	681a      	ldr	r2, [r3, #0]
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	4413      	add	r3, r2
 8006a06:	4a05      	ldr	r2, [pc, #20]	; (8006a1c <_sbrk+0x64>)
 8006a08:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8006a0a:	68fb      	ldr	r3, [r7, #12]
}
 8006a0c:	4618      	mov	r0, r3
 8006a0e:	3718      	adds	r7, #24
 8006a10:	46bd      	mov	sp, r7
 8006a12:	bd80      	pop	{r7, pc}
 8006a14:	200c0000 	.word	0x200c0000
 8006a18:	00000400 	.word	0x00000400
 8006a1c:	2001c8cc 	.word	0x2001c8cc
 8006a20:	2001d000 	.word	0x2001d000

08006a24 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8006a24:	b480      	push	{r7}
 8006a26:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8006a28:	4b18      	ldr	r3, [pc, #96]	; (8006a8c <SystemInit+0x68>)
 8006a2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a2e:	4a17      	ldr	r2, [pc, #92]	; (8006a8c <SystemInit+0x68>)
 8006a30:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006a34:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 8006a38:	4b15      	ldr	r3, [pc, #84]	; (8006a90 <SystemInit+0x6c>)
 8006a3a:	2201      	movs	r2, #1
 8006a3c:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8006a3e:	4b14      	ldr	r3, [pc, #80]	; (8006a90 <SystemInit+0x6c>)
 8006a40:	2200      	movs	r2, #0
 8006a42:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8006a44:	4b12      	ldr	r3, [pc, #72]	; (8006a90 <SystemInit+0x6c>)
 8006a46:	2200      	movs	r2, #0
 8006a48:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 8006a4a:	4b11      	ldr	r3, [pc, #68]	; (8006a90 <SystemInit+0x6c>)
 8006a4c:	2200      	movs	r2, #0
 8006a4e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 8006a50:	4b0f      	ldr	r3, [pc, #60]	; (8006a90 <SystemInit+0x6c>)
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	4a0e      	ldr	r2, [pc, #56]	; (8006a90 <SystemInit+0x6c>)
 8006a56:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8006a5a:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8006a5e:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 8006a60:	4b0b      	ldr	r3, [pc, #44]	; (8006a90 <SystemInit+0x6c>)
 8006a62:	2200      	movs	r2, #0
 8006a64:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8006a66:	4b0a      	ldr	r3, [pc, #40]	; (8006a90 <SystemInit+0x6c>)
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	4a09      	ldr	r2, [pc, #36]	; (8006a90 <SystemInit+0x6c>)
 8006a6c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006a70:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8006a72:	4b07      	ldr	r3, [pc, #28]	; (8006a90 <SystemInit+0x6c>)
 8006a74:	2200      	movs	r2, #0
 8006a76:	651a      	str	r2, [r3, #80]	; 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8006a78:	4b04      	ldr	r3, [pc, #16]	; (8006a8c <SystemInit+0x68>)
 8006a7a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8006a7e:	609a      	str	r2, [r3, #8]
  #endif
}
 8006a80:	bf00      	nop
 8006a82:	46bd      	mov	sp, r7
 8006a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a88:	4770      	bx	lr
 8006a8a:	bf00      	nop
 8006a8c:	e000ed00 	.word	0xe000ed00
 8006a90:	46020c00 	.word	0x46020c00

08006a94 <MX_TIM7_Init>:

TIM_HandleTypeDef htim7;

/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8006a94:	b580      	push	{r7, lr}
 8006a96:	b084      	sub	sp, #16
 8006a98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006a9a:	1d3b      	adds	r3, r7, #4
 8006a9c:	2200      	movs	r2, #0
 8006a9e:	601a      	str	r2, [r3, #0]
 8006aa0:	605a      	str	r2, [r3, #4]
 8006aa2:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8006aa4:	4b14      	ldr	r3, [pc, #80]	; (8006af8 <MX_TIM7_Init+0x64>)
 8006aa6:	4a15      	ldr	r2, [pc, #84]	; (8006afc <MX_TIM7_Init+0x68>)
 8006aa8:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 59170;
 8006aaa:	4b13      	ldr	r3, [pc, #76]	; (8006af8 <MX_TIM7_Init+0x64>)
 8006aac:	f24e 7222 	movw	r2, #59170	; 0xe722
 8006ab0:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006ab2:	4b11      	ldr	r3, [pc, #68]	; (8006af8 <MX_TIM7_Init+0x64>)
 8006ab4:	2200      	movs	r2, #0
 8006ab6:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 51;
 8006ab8:	4b0f      	ldr	r3, [pc, #60]	; (8006af8 <MX_TIM7_Init+0x64>)
 8006aba:	2233      	movs	r2, #51	; 0x33
 8006abc:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006abe:	4b0e      	ldr	r3, [pc, #56]	; (8006af8 <MX_TIM7_Init+0x64>)
 8006ac0:	2200      	movs	r2, #0
 8006ac2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8006ac4:	480c      	ldr	r0, [pc, #48]	; (8006af8 <MX_TIM7_Init+0x64>)
 8006ac6:	f008 ff43 	bl	800f950 <HAL_TIM_Base_Init>
 8006aca:	4603      	mov	r3, r0
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d001      	beq.n	8006ad4 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8006ad0:	f7ff fac4 	bl	800605c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006ad4:	2300      	movs	r3, #0
 8006ad6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006ad8:	2300      	movs	r3, #0
 8006ada:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8006adc:	1d3b      	adds	r3, r7, #4
 8006ade:	4619      	mov	r1, r3
 8006ae0:	4805      	ldr	r0, [pc, #20]	; (8006af8 <MX_TIM7_Init+0x64>)
 8006ae2:	f009 facf 	bl	8010084 <HAL_TIMEx_MasterConfigSynchronization>
 8006ae6:	4603      	mov	r3, r0
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d001      	beq.n	8006af0 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8006aec:	f7ff fab6 	bl	800605c <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8006af0:	bf00      	nop
 8006af2:	3710      	adds	r7, #16
 8006af4:	46bd      	mov	sp, r7
 8006af6:	bd80      	pop	{r7, pc}
 8006af8:	2001c8d0 	.word	0x2001c8d0
 8006afc:	40001400 	.word	0x40001400

08006b00 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8006b00:	b580      	push	{r7, lr}
 8006b02:	b084      	sub	sp, #16
 8006b04:	af00      	add	r7, sp, #0
 8006b06:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM7)
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	4a0e      	ldr	r2, [pc, #56]	; (8006b48 <HAL_TIM_Base_MspInit+0x48>)
 8006b0e:	4293      	cmp	r3, r2
 8006b10:	d116      	bne.n	8006b40 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* TIM7 clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 8006b12:	4b0e      	ldr	r3, [pc, #56]	; (8006b4c <HAL_TIM_Base_MspInit+0x4c>)
 8006b14:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006b18:	4a0c      	ldr	r2, [pc, #48]	; (8006b4c <HAL_TIM_Base_MspInit+0x4c>)
 8006b1a:	f043 0320 	orr.w	r3, r3, #32
 8006b1e:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8006b22:	4b0a      	ldr	r3, [pc, #40]	; (8006b4c <HAL_TIM_Base_MspInit+0x4c>)
 8006b24:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006b28:	f003 0320 	and.w	r3, r3, #32
 8006b2c:	60fb      	str	r3, [r7, #12]
 8006b2e:	68fb      	ldr	r3, [r7, #12]

    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 8, 0);
 8006b30:	2200      	movs	r2, #0
 8006b32:	2108      	movs	r1, #8
 8006b34:	2032      	movs	r0, #50	; 0x32
 8006b36:	f000 fa45 	bl	8006fc4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8006b3a:	2032      	movs	r0, #50	; 0x32
 8006b3c:	f000 fa5c 	bl	8006ff8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 8006b40:	bf00      	nop
 8006b42:	3710      	adds	r7, #16
 8006b44:	46bd      	mov	sp, r7
 8006b46:	bd80      	pop	{r7, pc}
 8006b48:	40001400 	.word	0x40001400
 8006b4c:	46020c00 	.word	0x46020c00

08006b50 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8006b50:	b580      	push	{r7, lr}
 8006b52:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8006b54:	4b22      	ldr	r3, [pc, #136]	; (8006be0 <MX_USART1_UART_Init+0x90>)
 8006b56:	4a23      	ldr	r2, [pc, #140]	; (8006be4 <MX_USART1_UART_Init+0x94>)
 8006b58:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8006b5a:	4b21      	ldr	r3, [pc, #132]	; (8006be0 <MX_USART1_UART_Init+0x90>)
 8006b5c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8006b60:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8006b62:	4b1f      	ldr	r3, [pc, #124]	; (8006be0 <MX_USART1_UART_Init+0x90>)
 8006b64:	2200      	movs	r2, #0
 8006b66:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8006b68:	4b1d      	ldr	r3, [pc, #116]	; (8006be0 <MX_USART1_UART_Init+0x90>)
 8006b6a:	2200      	movs	r2, #0
 8006b6c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8006b6e:	4b1c      	ldr	r3, [pc, #112]	; (8006be0 <MX_USART1_UART_Init+0x90>)
 8006b70:	2200      	movs	r2, #0
 8006b72:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8006b74:	4b1a      	ldr	r3, [pc, #104]	; (8006be0 <MX_USART1_UART_Init+0x90>)
 8006b76:	220c      	movs	r2, #12
 8006b78:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006b7a:	4b19      	ldr	r3, [pc, #100]	; (8006be0 <MX_USART1_UART_Init+0x90>)
 8006b7c:	2200      	movs	r2, #0
 8006b7e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8006b80:	4b17      	ldr	r3, [pc, #92]	; (8006be0 <MX_USART1_UART_Init+0x90>)
 8006b82:	2200      	movs	r2, #0
 8006b84:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8006b86:	4b16      	ldr	r3, [pc, #88]	; (8006be0 <MX_USART1_UART_Init+0x90>)
 8006b88:	2200      	movs	r2, #0
 8006b8a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8006b8c:	4b14      	ldr	r3, [pc, #80]	; (8006be0 <MX_USART1_UART_Init+0x90>)
 8006b8e:	2200      	movs	r2, #0
 8006b90:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8006b92:	4b13      	ldr	r3, [pc, #76]	; (8006be0 <MX_USART1_UART_Init+0x90>)
 8006b94:	2200      	movs	r2, #0
 8006b96:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8006b98:	4811      	ldr	r0, [pc, #68]	; (8006be0 <MX_USART1_UART_Init+0x90>)
 8006b9a:	f009 fb7b 	bl	8010294 <HAL_UART_Init>
 8006b9e:	4603      	mov	r3, r0
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d001      	beq.n	8006ba8 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8006ba4:	f7ff fa5a 	bl	800605c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8006ba8:	2100      	movs	r1, #0
 8006baa:	480d      	ldr	r0, [pc, #52]	; (8006be0 <MX_USART1_UART_Init+0x90>)
 8006bac:	f009 fff8 	bl	8010ba0 <HAL_UARTEx_SetTxFifoThreshold>
 8006bb0:	4603      	mov	r3, r0
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d001      	beq.n	8006bba <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8006bb6:	f7ff fa51 	bl	800605c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8006bba:	2100      	movs	r1, #0
 8006bbc:	4808      	ldr	r0, [pc, #32]	; (8006be0 <MX_USART1_UART_Init+0x90>)
 8006bbe:	f00a f82d 	bl	8010c1c <HAL_UARTEx_SetRxFifoThreshold>
 8006bc2:	4603      	mov	r3, r0
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d001      	beq.n	8006bcc <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8006bc8:	f7ff fa48 	bl	800605c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8006bcc:	4804      	ldr	r0, [pc, #16]	; (8006be0 <MX_USART1_UART_Init+0x90>)
 8006bce:	f009 ffae 	bl	8010b2e <HAL_UARTEx_DisableFifoMode>
 8006bd2:	4603      	mov	r3, r0
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d001      	beq.n	8006bdc <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8006bd8:	f7ff fa40 	bl	800605c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8006bdc:	bf00      	nop
 8006bde:	bd80      	pop	{r7, pc}
 8006be0:	2001c91c 	.word	0x2001c91c
 8006be4:	40013800 	.word	0x40013800

08006be8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8006be8:	b580      	push	{r7, lr}
 8006bea:	b0bc      	sub	sp, #240	; 0xf0
 8006bec:	af00      	add	r7, sp, #0
 8006bee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006bf0:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8006bf4:	2200      	movs	r2, #0
 8006bf6:	601a      	str	r2, [r3, #0]
 8006bf8:	605a      	str	r2, [r3, #4]
 8006bfa:	609a      	str	r2, [r3, #8]
 8006bfc:	60da      	str	r2, [r3, #12]
 8006bfe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8006c00:	f107 0310 	add.w	r3, r7, #16
 8006c04:	22c8      	movs	r2, #200	; 0xc8
 8006c06:	2100      	movs	r1, #0
 8006c08:	4618      	mov	r0, r3
 8006c0a:	f00d f907 	bl	8013e1c <memset>
  if(uartHandle->Instance==USART1)
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	4a26      	ldr	r2, [pc, #152]	; (8006cac <HAL_UART_MspInit+0xc4>)
 8006c14:	4293      	cmp	r3, r2
 8006c16:	d145      	bne.n	8006ca4 <HAL_UART_MspInit+0xbc>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8006c18:	f04f 0201 	mov.w	r2, #1
 8006c1c:	f04f 0300 	mov.w	r3, #0
 8006c20:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8006c24:	2300      	movs	r3, #0
 8006c26:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8006c28:	f107 0310 	add.w	r3, r7, #16
 8006c2c:	4618      	mov	r0, r3
 8006c2e:	f006 f8f1 	bl	800ce14 <HAL_RCCEx_PeriphCLKConfig>
 8006c32:	4603      	mov	r3, r0
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d001      	beq.n	8006c3c <HAL_UART_MspInit+0x54>
    {
      Error_Handler();
 8006c38:	f7ff fa10 	bl	800605c <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8006c3c:	4b1c      	ldr	r3, [pc, #112]	; (8006cb0 <HAL_UART_MspInit+0xc8>)
 8006c3e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006c42:	4a1b      	ldr	r2, [pc, #108]	; (8006cb0 <HAL_UART_MspInit+0xc8>)
 8006c44:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006c48:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
 8006c4c:	4b18      	ldr	r3, [pc, #96]	; (8006cb0 <HAL_UART_MspInit+0xc8>)
 8006c4e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006c52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006c56:	60fb      	str	r3, [r7, #12]
 8006c58:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006c5a:	4b15      	ldr	r3, [pc, #84]	; (8006cb0 <HAL_UART_MspInit+0xc8>)
 8006c5c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006c60:	4a13      	ldr	r2, [pc, #76]	; (8006cb0 <HAL_UART_MspInit+0xc8>)
 8006c62:	f043 0301 	orr.w	r3, r3, #1
 8006c66:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8006c6a:	4b11      	ldr	r3, [pc, #68]	; (8006cb0 <HAL_UART_MspInit+0xc8>)
 8006c6c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006c70:	f003 0301 	and.w	r3, r3, #1
 8006c74:	60bb      	str	r3, [r7, #8]
 8006c76:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = T_VCP_RX_Pin|T_VCP_TX_Pin;
 8006c78:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8006c7c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006c80:	2302      	movs	r3, #2
 8006c82:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006c86:	2300      	movs	r3, #0
 8006c88:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006c8c:	2300      	movs	r3, #0
 8006c8e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8006c92:	2307      	movs	r3, #7
 8006c94:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006c98:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8006c9c:	4619      	mov	r1, r3
 8006c9e:	4805      	ldr	r0, [pc, #20]	; (8006cb4 <HAL_UART_MspInit+0xcc>)
 8006ca0:	f002 f940 	bl	8008f24 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8006ca4:	bf00      	nop
 8006ca6:	37f0      	adds	r7, #240	; 0xf0
 8006ca8:	46bd      	mov	sp, r7
 8006caa:	bd80      	pop	{r7, pc}
 8006cac:	40013800 	.word	0x40013800
 8006cb0:	46020c00 	.word	0x46020c00
 8006cb4:	42020000 	.word	0x42020000

08006cb8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8006cb8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006cf0 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8006cbc:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8006cbe:	e003      	b.n	8006cc8 <LoopCopyDataInit>

08006cc0 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8006cc0:	4b0c      	ldr	r3, [pc, #48]	; (8006cf4 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8006cc2:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8006cc4:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8006cc6:	3104      	adds	r1, #4

08006cc8 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8006cc8:	480b      	ldr	r0, [pc, #44]	; (8006cf8 <LoopForever+0xa>)
	ldr	r3, =_edata
 8006cca:	4b0c      	ldr	r3, [pc, #48]	; (8006cfc <LoopForever+0xe>)
	adds	r2, r0, r1
 8006ccc:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8006cce:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8006cd0:	d3f6      	bcc.n	8006cc0 <CopyDataInit>
	ldr	r2, =_sbss
 8006cd2:	4a0b      	ldr	r2, [pc, #44]	; (8006d00 <LoopForever+0x12>)
	b	LoopFillZerobss
 8006cd4:	e002      	b.n	8006cdc <LoopFillZerobss>

08006cd6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8006cd6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8006cd8:	f842 3b04 	str.w	r3, [r2], #4

08006cdc <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8006cdc:	4b09      	ldr	r3, [pc, #36]	; (8006d04 <LoopForever+0x16>)
	cmp	r2, r3
 8006cde:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8006ce0:	d3f9      	bcc.n	8006cd6 <FillZerobss>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8006ce2:	f7ff fe9f 	bl	8006a24 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8006ce6:	f00d f875 	bl	8013dd4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8006cea:	f7ff f8d9 	bl	8005ea0 <main>

08006cee <LoopForever>:

LoopForever:
    b LoopForever
 8006cee:	e7fe      	b.n	8006cee <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8006cf0:	200c0000 	.word	0x200c0000
	ldr	r3, =_sidata
 8006cf4:	0801505c 	.word	0x0801505c
	ldr	r0, =_sdata
 8006cf8:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8006cfc:	20000074 	.word	0x20000074
	ldr	r2, =_sbss
 8006d00:	20000074 	.word	0x20000074
	ldr	r3, = _ebss
 8006d04:	2001d000 	.word	0x2001d000

08006d08 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8006d08:	e7fe      	b.n	8006d08 <ADC1_IRQHandler>
	...

08006d0c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006d0c:	b580      	push	{r7, lr}
 8006d0e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006d10:	4b11      	ldr	r3, [pc, #68]	; (8006d58 <HAL_Init+0x4c>)
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	4a10      	ldr	r2, [pc, #64]	; (8006d58 <HAL_Init+0x4c>)
 8006d16:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006d1a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006d1c:	2003      	movs	r0, #3
 8006d1e:	f000 f946 	bl	8006fae <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8006d22:	f005 fe5b 	bl	800c9dc <HAL_RCC_GetSysClockFreq>
 8006d26:	4602      	mov	r2, r0
 8006d28:	4b0c      	ldr	r3, [pc, #48]	; (8006d5c <HAL_Init+0x50>)
 8006d2a:	6a1b      	ldr	r3, [r3, #32]
 8006d2c:	f003 030f 	and.w	r3, r3, #15
 8006d30:	490b      	ldr	r1, [pc, #44]	; (8006d60 <HAL_Init+0x54>)
 8006d32:	5ccb      	ldrb	r3, [r1, r3]
 8006d34:	fa22 f303 	lsr.w	r3, r2, r3
 8006d38:	4a0a      	ldr	r2, [pc, #40]	; (8006d64 <HAL_Init+0x58>)
 8006d3a:	6013      	str	r3, [r2, #0]

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8006d3c:	2007      	movs	r0, #7
 8006d3e:	f7ff fd13 	bl	8006768 <HAL_InitTick>
 8006d42:	4603      	mov	r3, r0
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d001      	beq.n	8006d4c <HAL_Init+0x40>
  {
    return HAL_ERROR;
 8006d48:	2301      	movs	r3, #1
 8006d4a:	e002      	b.n	8006d52 <HAL_Init+0x46>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8006d4c:	f7ff fcec 	bl	8006728 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8006d50:	2300      	movs	r3, #0
}
 8006d52:	4618      	mov	r0, r3
 8006d54:	bd80      	pop	{r7, pc}
 8006d56:	bf00      	nop
 8006d58:	40022000 	.word	0x40022000
 8006d5c:	46020c00 	.word	0x46020c00
 8006d60:	08014ee8 	.word	0x08014ee8
 8006d64:	20000000 	.word	0x20000000

08006d68 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006d68:	b480      	push	{r7}
 8006d6a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8006d6c:	4b06      	ldr	r3, [pc, #24]	; (8006d88 <HAL_IncTick+0x20>)
 8006d6e:	781b      	ldrb	r3, [r3, #0]
 8006d70:	461a      	mov	r2, r3
 8006d72:	4b06      	ldr	r3, [pc, #24]	; (8006d8c <HAL_IncTick+0x24>)
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	4413      	add	r3, r2
 8006d78:	4a04      	ldr	r2, [pc, #16]	; (8006d8c <HAL_IncTick+0x24>)
 8006d7a:	6013      	str	r3, [r2, #0]
}
 8006d7c:	bf00      	nop
 8006d7e:	46bd      	mov	sp, r7
 8006d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d84:	4770      	bx	lr
 8006d86:	bf00      	nop
 8006d88:	20000008 	.word	0x20000008
 8006d8c:	2001c9ac 	.word	0x2001c9ac

08006d90 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006d90:	b480      	push	{r7}
 8006d92:	af00      	add	r7, sp, #0
  return uwTick;
 8006d94:	4b03      	ldr	r3, [pc, #12]	; (8006da4 <HAL_GetTick+0x14>)
 8006d96:	681b      	ldr	r3, [r3, #0]
}
 8006d98:	4618      	mov	r0, r3
 8006d9a:	46bd      	mov	sp, r7
 8006d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da0:	4770      	bx	lr
 8006da2:	bf00      	nop
 8006da4:	2001c9ac 	.word	0x2001c9ac

08006da8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006da8:	b580      	push	{r7, lr}
 8006daa:	b084      	sub	sp, #16
 8006dac:	af00      	add	r7, sp, #0
 8006dae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006db0:	f7ff ffee 	bl	8006d90 <HAL_GetTick>
 8006db4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006dc0:	d005      	beq.n	8006dce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8006dc2:	4b0a      	ldr	r3, [pc, #40]	; (8006dec <HAL_Delay+0x44>)
 8006dc4:	781b      	ldrb	r3, [r3, #0]
 8006dc6:	461a      	mov	r2, r3
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	4413      	add	r3, r2
 8006dcc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8006dce:	bf00      	nop
 8006dd0:	f7ff ffde 	bl	8006d90 <HAL_GetTick>
 8006dd4:	4602      	mov	r2, r0
 8006dd6:	68bb      	ldr	r3, [r7, #8]
 8006dd8:	1ad3      	subs	r3, r2, r3
 8006dda:	68fa      	ldr	r2, [r7, #12]
 8006ddc:	429a      	cmp	r2, r3
 8006dde:	d8f7      	bhi.n	8006dd0 <HAL_Delay+0x28>
  {
  }
}
 8006de0:	bf00      	nop
 8006de2:	bf00      	nop
 8006de4:	3710      	adds	r7, #16
 8006de6:	46bd      	mov	sp, r7
 8006de8:	bd80      	pop	{r7, pc}
 8006dea:	bf00      	nop
 8006dec:	20000008 	.word	0x20000008

08006df0 <HAL_CORDIC_Init>:
  * @brief  Initialize the CORDIC peripheral and the associated handle.
  * @param  hcordic pointer to a CORDIC_HandleTypeDef structure.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CORDIC_Init(CORDIC_HandleTypeDef *hcordic)
{
 8006df0:	b580      	push	{r7, lr}
 8006df2:	b082      	sub	sp, #8
 8006df4:	af00      	add	r7, sp, #0
 8006df6:	6078      	str	r0, [r7, #4]
  /* Check the CORDIC handle allocation */
  if (hcordic == NULL)
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d101      	bne.n	8006e02 <HAL_CORDIC_Init+0x12>
  {
    /* Return error status */
    return HAL_ERROR;
 8006dfe:	2301      	movs	r3, #1
 8006e00:	e023      	b.n	8006e4a <HAL_CORDIC_Init+0x5a>

    /* Initialize the low level hardware */
    hcordic->MspInitCallback(hcordic);
  }
#else
  if (hcordic->State == HAL_CORDIC_STATE_RESET)
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8006e08:	b2db      	uxtb	r3, r3
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d106      	bne.n	8006e1c <HAL_CORDIC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hcordic->Lock = HAL_UNLOCKED;
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	2200      	movs	r2, #0
 8006e12:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize the low level hardware */
    HAL_CORDIC_MspInit(hcordic);
 8006e16:	6878      	ldr	r0, [r7, #4]
 8006e18:	f7fe f934 	bl	8005084 <HAL_CORDIC_MspInit>
  }
#endif /* (USE_HAL_CORDIC_REGISTER_CALLBACKS) */

  /* Set CORDIC error code to none */
  hcordic->ErrorCode = HAL_CORDIC_ERROR_NONE;
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	2200      	movs	r2, #0
 8006e20:	625a      	str	r2, [r3, #36]	; 0x24

  /* Reset pInBuff and pOutBuff */
  hcordic->pInBuff = NULL;
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	2200      	movs	r2, #0
 8006e26:	605a      	str	r2, [r3, #4]
  hcordic->pOutBuff = NULL;
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	2200      	movs	r2, #0
 8006e2c:	609a      	str	r2, [r3, #8]

  /* Reset NbCalcToOrder and NbCalcToGet */
  hcordic->NbCalcToOrder = 0U;
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	2200      	movs	r2, #0
 8006e32:	60da      	str	r2, [r3, #12]
  hcordic->NbCalcToGet = 0U;
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	2200      	movs	r2, #0
 8006e38:	611a      	str	r2, [r3, #16]

  /* Reset DMADirection */
  hcordic->DMADirection = CORDIC_DMA_DIR_NONE;
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	2200      	movs	r2, #0
 8006e3e:	615a      	str	r2, [r3, #20]

  /* Change CORDIC peripheral state */
  hcordic->State = HAL_CORDIC_STATE_READY;
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	2201      	movs	r2, #1
 8006e44:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Return function status */
  return HAL_OK;
 8006e48:	2300      	movs	r3, #0
}
 8006e4a:	4618      	mov	r0, r3
 8006e4c:	3708      	adds	r7, #8
 8006e4e:	46bd      	mov	sp, r7
 8006e50:	bd80      	pop	{r7, pc}
	...

08006e54 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006e54:	b480      	push	{r7}
 8006e56:	b085      	sub	sp, #20
 8006e58:	af00      	add	r7, sp, #0
 8006e5a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	f003 0307 	and.w	r3, r3, #7
 8006e62:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006e64:	4b0c      	ldr	r3, [pc, #48]	; (8006e98 <__NVIC_SetPriorityGrouping+0x44>)
 8006e66:	68db      	ldr	r3, [r3, #12]
 8006e68:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006e6a:	68ba      	ldr	r2, [r7, #8]
 8006e6c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006e70:	4013      	ands	r3, r2
 8006e72:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006e78:	68bb      	ldr	r3, [r7, #8]
 8006e7a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006e7c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006e80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006e84:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006e86:	4a04      	ldr	r2, [pc, #16]	; (8006e98 <__NVIC_SetPriorityGrouping+0x44>)
 8006e88:	68bb      	ldr	r3, [r7, #8]
 8006e8a:	60d3      	str	r3, [r2, #12]
}
 8006e8c:	bf00      	nop
 8006e8e:	3714      	adds	r7, #20
 8006e90:	46bd      	mov	sp, r7
 8006e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e96:	4770      	bx	lr
 8006e98:	e000ed00 	.word	0xe000ed00

08006e9c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006e9c:	b480      	push	{r7}
 8006e9e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006ea0:	4b04      	ldr	r3, [pc, #16]	; (8006eb4 <__NVIC_GetPriorityGrouping+0x18>)
 8006ea2:	68db      	ldr	r3, [r3, #12]
 8006ea4:	0a1b      	lsrs	r3, r3, #8
 8006ea6:	f003 0307 	and.w	r3, r3, #7
}
 8006eaa:	4618      	mov	r0, r3
 8006eac:	46bd      	mov	sp, r7
 8006eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb2:	4770      	bx	lr
 8006eb4:	e000ed00 	.word	0xe000ed00

08006eb8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006eb8:	b480      	push	{r7}
 8006eba:	b083      	sub	sp, #12
 8006ebc:	af00      	add	r7, sp, #0
 8006ebe:	4603      	mov	r3, r0
 8006ec0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006ec2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	db0b      	blt.n	8006ee2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006eca:	79fb      	ldrb	r3, [r7, #7]
 8006ecc:	f003 021f 	and.w	r2, r3, #31
 8006ed0:	4907      	ldr	r1, [pc, #28]	; (8006ef0 <__NVIC_EnableIRQ+0x38>)
 8006ed2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006ed6:	095b      	lsrs	r3, r3, #5
 8006ed8:	2001      	movs	r0, #1
 8006eda:	fa00 f202 	lsl.w	r2, r0, r2
 8006ede:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8006ee2:	bf00      	nop
 8006ee4:	370c      	adds	r7, #12
 8006ee6:	46bd      	mov	sp, r7
 8006ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eec:	4770      	bx	lr
 8006eee:	bf00      	nop
 8006ef0:	e000e100 	.word	0xe000e100

08006ef4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006ef4:	b480      	push	{r7}
 8006ef6:	b083      	sub	sp, #12
 8006ef8:	af00      	add	r7, sp, #0
 8006efa:	4603      	mov	r3, r0
 8006efc:	6039      	str	r1, [r7, #0]
 8006efe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006f00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	db0a      	blt.n	8006f1e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006f08:	683b      	ldr	r3, [r7, #0]
 8006f0a:	b2da      	uxtb	r2, r3
 8006f0c:	490c      	ldr	r1, [pc, #48]	; (8006f40 <__NVIC_SetPriority+0x4c>)
 8006f0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006f12:	0112      	lsls	r2, r2, #4
 8006f14:	b2d2      	uxtb	r2, r2
 8006f16:	440b      	add	r3, r1
 8006f18:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006f1c:	e00a      	b.n	8006f34 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006f1e:	683b      	ldr	r3, [r7, #0]
 8006f20:	b2da      	uxtb	r2, r3
 8006f22:	4908      	ldr	r1, [pc, #32]	; (8006f44 <__NVIC_SetPriority+0x50>)
 8006f24:	79fb      	ldrb	r3, [r7, #7]
 8006f26:	f003 030f 	and.w	r3, r3, #15
 8006f2a:	3b04      	subs	r3, #4
 8006f2c:	0112      	lsls	r2, r2, #4
 8006f2e:	b2d2      	uxtb	r2, r2
 8006f30:	440b      	add	r3, r1
 8006f32:	761a      	strb	r2, [r3, #24]
}
 8006f34:	bf00      	nop
 8006f36:	370c      	adds	r7, #12
 8006f38:	46bd      	mov	sp, r7
 8006f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f3e:	4770      	bx	lr
 8006f40:	e000e100 	.word	0xe000e100
 8006f44:	e000ed00 	.word	0xe000ed00

08006f48 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006f48:	b480      	push	{r7}
 8006f4a:	b089      	sub	sp, #36	; 0x24
 8006f4c:	af00      	add	r7, sp, #0
 8006f4e:	60f8      	str	r0, [r7, #12]
 8006f50:	60b9      	str	r1, [r7, #8]
 8006f52:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	f003 0307 	and.w	r3, r3, #7
 8006f5a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006f5c:	69fb      	ldr	r3, [r7, #28]
 8006f5e:	f1c3 0307 	rsb	r3, r3, #7
 8006f62:	2b04      	cmp	r3, #4
 8006f64:	bf28      	it	cs
 8006f66:	2304      	movcs	r3, #4
 8006f68:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006f6a:	69fb      	ldr	r3, [r7, #28]
 8006f6c:	3304      	adds	r3, #4
 8006f6e:	2b06      	cmp	r3, #6
 8006f70:	d902      	bls.n	8006f78 <NVIC_EncodePriority+0x30>
 8006f72:	69fb      	ldr	r3, [r7, #28]
 8006f74:	3b03      	subs	r3, #3
 8006f76:	e000      	b.n	8006f7a <NVIC_EncodePriority+0x32>
 8006f78:	2300      	movs	r3, #0
 8006f7a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006f7c:	f04f 32ff 	mov.w	r2, #4294967295
 8006f80:	69bb      	ldr	r3, [r7, #24]
 8006f82:	fa02 f303 	lsl.w	r3, r2, r3
 8006f86:	43da      	mvns	r2, r3
 8006f88:	68bb      	ldr	r3, [r7, #8]
 8006f8a:	401a      	ands	r2, r3
 8006f8c:	697b      	ldr	r3, [r7, #20]
 8006f8e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006f90:	f04f 31ff 	mov.w	r1, #4294967295
 8006f94:	697b      	ldr	r3, [r7, #20]
 8006f96:	fa01 f303 	lsl.w	r3, r1, r3
 8006f9a:	43d9      	mvns	r1, r3
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006fa0:	4313      	orrs	r3, r2
         );
}
 8006fa2:	4618      	mov	r0, r3
 8006fa4:	3724      	adds	r7, #36	; 0x24
 8006fa6:	46bd      	mov	sp, r7
 8006fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fac:	4770      	bx	lr

08006fae <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006fae:	b580      	push	{r7, lr}
 8006fb0:	b082      	sub	sp, #8
 8006fb2:	af00      	add	r7, sp, #0
 8006fb4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006fb6:	6878      	ldr	r0, [r7, #4]
 8006fb8:	f7ff ff4c 	bl	8006e54 <__NVIC_SetPriorityGrouping>
}
 8006fbc:	bf00      	nop
 8006fbe:	3708      	adds	r7, #8
 8006fc0:	46bd      	mov	sp, r7
 8006fc2:	bd80      	pop	{r7, pc}

08006fc4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006fc4:	b580      	push	{r7, lr}
 8006fc6:	b086      	sub	sp, #24
 8006fc8:	af00      	add	r7, sp, #0
 8006fca:	4603      	mov	r3, r0
 8006fcc:	60b9      	str	r1, [r7, #8]
 8006fce:	607a      	str	r2, [r7, #4]
 8006fd0:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8006fd2:	f7ff ff63 	bl	8006e9c <__NVIC_GetPriorityGrouping>
 8006fd6:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006fd8:	687a      	ldr	r2, [r7, #4]
 8006fda:	68b9      	ldr	r1, [r7, #8]
 8006fdc:	6978      	ldr	r0, [r7, #20]
 8006fde:	f7ff ffb3 	bl	8006f48 <NVIC_EncodePriority>
 8006fe2:	4602      	mov	r2, r0
 8006fe4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006fe8:	4611      	mov	r1, r2
 8006fea:	4618      	mov	r0, r3
 8006fec:	f7ff ff82 	bl	8006ef4 <__NVIC_SetPriority>
}
 8006ff0:	bf00      	nop
 8006ff2:	3718      	adds	r7, #24
 8006ff4:	46bd      	mov	sp, r7
 8006ff6:	bd80      	pop	{r7, pc}

08006ff8 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006ff8:	b580      	push	{r7, lr}
 8006ffa:	b082      	sub	sp, #8
 8006ffc:	af00      	add	r7, sp, #0
 8006ffe:	4603      	mov	r3, r0
 8007000:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007002:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007006:	4618      	mov	r0, r3
 8007008:	f7ff ff56 	bl	8006eb8 <__NVIC_EnableIRQ>
}
 800700c:	bf00      	nop
 800700e:	3708      	adds	r7, #8
 8007010:	46bd      	mov	sp, r7
 8007012:	bd80      	pop	{r7, pc}

08007014 <HAL_DCACHE_Init>:
  * @param  hdcache Pointer to a DCACHE_HandleTypeDef structure that contains
  *                 the configuration information for the specified DCACHE.
  * @retval HAL status
  */
HAL_StatusTypeDef  HAL_DCACHE_Init(DCACHE_HandleTypeDef *hdcache)
{
 8007014:	b580      	push	{r7, lr}
 8007016:	b084      	sub	sp, #16
 8007018:	af00      	add	r7, sp, #0
 800701a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the DCACHE handle allocation */
  if (hdcache == NULL)
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	2b00      	cmp	r3, #0
 8007020:	d101      	bne.n	8007026 <HAL_DCACHE_Init+0x12>
  {
    return HAL_ERROR;
 8007022:	2301      	movs	r3, #1
 8007024:	e037      	b.n	8007096 <HAL_DCACHE_Init+0x82>

  /* Check the parameters */
  assert_param(IS_DCACHE_ALL_INSTANCE(hdcache->Instance));
  assert_param(IS_DCACHE_READ_BURST_TYPE(hdcache->Init.ReadBurstType));

  if (hdcache->State == HAL_DCACHE_STATE_RESET)
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800702c:	b2db      	uxtb	r3, r3
 800702e:	2b00      	cmp	r3, #0
 8007030:	d119      	bne.n	8007066 <HAL_DCACHE_Init+0x52>
  {
    /* Init the DCACHE Callback settings with legacy weak */
    hdcache->ErrorCallback                      = HAL_DCACHE_ErrorCallback;
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	4a1a      	ldr	r2, [pc, #104]	; (80070a0 <HAL_DCACHE_Init+0x8c>)
 8007036:	609a      	str	r2, [r3, #8]
    hdcache->CleanByAddrCallback                = HAL_DCACHE_CleanByAddrCallback;
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	4a1a      	ldr	r2, [pc, #104]	; (80070a4 <HAL_DCACHE_Init+0x90>)
 800703c:	60da      	str	r2, [r3, #12]
    hdcache->InvalidateByAddrCallback           = HAL_DCACHE_InvalidateByAddrCallback;
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	4a19      	ldr	r2, [pc, #100]	; (80070a8 <HAL_DCACHE_Init+0x94>)
 8007042:	611a      	str	r2, [r3, #16]
    hdcache->InvalidateCompleteCallback         = HAL_DCACHE_InvalidateCompleteCallback;
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	4a19      	ldr	r2, [pc, #100]	; (80070ac <HAL_DCACHE_Init+0x98>)
 8007048:	615a      	str	r2, [r3, #20]
    hdcache->CleanAndInvalidateByAddrCallback   = HAL_DCACHE_CleanAndInvalidateByAddrCallback;
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	4a18      	ldr	r2, [pc, #96]	; (80070b0 <HAL_DCACHE_Init+0x9c>)
 800704e:	619a      	str	r2, [r3, #24]

    if (hdcache->MspInitCallback == NULL)
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	69db      	ldr	r3, [r3, #28]
 8007054:	2b00      	cmp	r3, #0
 8007056:	d102      	bne.n	800705e <HAL_DCACHE_Init+0x4a>
    {
      hdcache->MspInitCallback = HAL_DCACHE_MspInit;
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	4a16      	ldr	r2, [pc, #88]	; (80070b4 <HAL_DCACHE_Init+0xa0>)
 800705c:	61da      	str	r2, [r3, #28]
    }

    /* Init the low level hardware */
    hdcache->MspInitCallback(hdcache);
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	69db      	ldr	r3, [r3, #28]
 8007062:	6878      	ldr	r0, [r7, #4]
 8007064:	4798      	blx	r3
  }

  /* Init the error code */
  hdcache->ErrorCode = HAL_DCACHE_ERROR_NONE;
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	2200      	movs	r2, #0
 800706a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Init the DCACHE handle state */
  hdcache->State = HAL_DCACHE_STATE_READY;
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	2201      	movs	r2, #1
 8007070:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  /* Set requested read burst type */
  MODIFY_REG(hdcache->Instance->CR, DCACHE_CR_HBURST, hdcache->Init.ReadBurstType);
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	685a      	ldr	r2, [r3, #4]
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	430a      	orrs	r2, r1
 8007088:	601a      	str	r2, [r3, #0]

  /* Enable the selected DCACHE peripheral */
  status = HAL_DCACHE_Enable(hdcache);
 800708a:	6878      	ldr	r0, [r7, #4]
 800708c:	f000 f81e 	bl	80070cc <HAL_DCACHE_Enable>
 8007090:	4603      	mov	r3, r0
 8007092:	73fb      	strb	r3, [r7, #15]

  return status;
 8007094:	7bfb      	ldrb	r3, [r7, #15]
}
 8007096:	4618      	mov	r0, r3
 8007098:	3710      	adds	r7, #16
 800709a:	46bd      	mov	sp, r7
 800709c:	bd80      	pop	{r7, pc}
 800709e:	bf00      	nop
 80070a0:	08007245 	.word	0x08007245
 80070a4:	08007209 	.word	0x08007209
 80070a8:	0800721d 	.word	0x0800721d
 80070ac:	08007231 	.word	0x08007231
 80070b0:	0800501d 	.word	0x0800501d
 80070b4:	080070b9 	.word	0x080070b9

080070b8 <HAL_DCACHE_MspInit>:
  * @param  hdcache Pointer to a DCACHE_HandleTypeDef structure that contains
  *                 the configuration information for the specified DCACHEx peripheral.
  * @retval None
  */
__weak void HAL_DCACHE_MspInit(DCACHE_HandleTypeDef *hdcache)
{
 80070b8:	b480      	push	{r7}
 80070ba:	b083      	sub	sp, #12
 80070bc:	af00      	add	r7, sp, #0
 80070be:	6078      	str	r0, [r7, #4]
  UNUSED(hdcache);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DCACHE_MspInit can be implemented in the user file
   */
}
 80070c0:	bf00      	nop
 80070c2:	370c      	adds	r7, #12
 80070c4:	46bd      	mov	sp, r7
 80070c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ca:	4770      	bx	lr

080070cc <HAL_DCACHE_Enable>:
  * @param  hdcache Pointer to a DCACHE_HandleTypeDef structure that contains
  *                 the configuration information for the specified DCACHEx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCACHE_Enable(DCACHE_HandleTypeDef *hdcache)
{
 80070cc:	b480      	push	{r7}
 80070ce:	b085      	sub	sp, #20
 80070d0:	af00      	add	r7, sp, #0
 80070d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80070d4:	2300      	movs	r3, #0
 80070d6:	73fb      	strb	r3, [r7, #15]

  /* Check the dcache handle allocation */
  if (hdcache == NULL)
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d101      	bne.n	80070e2 <HAL_DCACHE_Enable+0x16>
  {
    return HAL_ERROR;
 80070de:	2301      	movs	r3, #1
 80070e0:	e015      	b.n	800710e <HAL_DCACHE_Enable+0x42>

  /* Check the parameters */
  assert_param(IS_DCACHE_ALL_INSTANCE(hdcache->Instance));

  /* Check no ongoing operation */
  if (READ_BIT(hdcache->Instance->SR, (DCACHE_SR_BUSYF | DCACHE_SR_BUSYCMDF)) != 0U)
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	685b      	ldr	r3, [r3, #4]
 80070e8:	f003 0309 	and.w	r3, r3, #9
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d002      	beq.n	80070f6 <HAL_DCACHE_Enable+0x2a>
  {
    /* Return busy status */
    status =  HAL_BUSY;
 80070f0:	2302      	movs	r3, #2
 80070f2:	73fb      	strb	r3, [r7, #15]
 80070f4:	e00a      	b.n	800710c <HAL_DCACHE_Enable+0x40>
  }
  else
  {
    /* Update the error code */
    hdcache->ErrorCode = HAL_DCACHE_ERROR_NONE;
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	2200      	movs	r2, #0
 80070fa:	629a      	str	r2, [r3, #40]	; 0x28

    /* Enable the selected DCACHE peripheral */
    SET_BIT(hdcache->Instance->CR, DCACHE_CR_EN);
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	681a      	ldr	r2, [r3, #0]
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	f042 0201 	orr.w	r2, r2, #1
 800710a:	601a      	str	r2, [r3, #0]
  }

  return status;
 800710c:	7bfb      	ldrb	r3, [r7, #15]
}
 800710e:	4618      	mov	r0, r3
 8007110:	3714      	adds	r7, #20
 8007112:	46bd      	mov	sp, r7
 8007114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007118:	4770      	bx	lr

0800711a <HAL_DCACHE_CleanInvalidByAddr_IT>:
  *         the end of operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCACHE_CleanInvalidByAddr_IT(DCACHE_HandleTypeDef *hdcache, const uint32_t *const pAddr,
                                                   uint32_t dSize)
{
 800711a:	b580      	push	{r7, lr}
 800711c:	b088      	sub	sp, #32
 800711e:	af02      	add	r7, sp, #8
 8007120:	60f8      	str	r0, [r7, #12]
 8007122:	60b9      	str	r1, [r7, #8]
 8007124:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the dcache handle allocation */
  if (hdcache == NULL)
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	2b00      	cmp	r3, #0
 800712a:	d101      	bne.n	8007130 <HAL_DCACHE_CleanInvalidByAddr_IT+0x16>
  {
    return HAL_ERROR;
 800712c:	2301      	movs	r3, #1
 800712e:	e00b      	b.n	8007148 <HAL_DCACHE_CleanInvalidByAddr_IT+0x2e>

  /* Check the parameters */
  assert_param(IS_DCACHE_ALL_INSTANCE(hdcache->Instance));
  assert_param(IS_DCACHE_REGION_SIZE(dSize));

  status = DCACHE_CommandByAddr(hdcache, DCACHE_COMMAND_CLEAN_INVALIDATE, pAddr, dSize, DCACHE_IT_MODE);
 8007130:	2301      	movs	r3, #1
 8007132:	9300      	str	r3, [sp, #0]
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	68ba      	ldr	r2, [r7, #8]
 8007138:	f44f 7140 	mov.w	r1, #768	; 0x300
 800713c:	68f8      	ldr	r0, [r7, #12]
 800713e:	f000 f88b 	bl	8007258 <DCACHE_CommandByAddr>
 8007142:	4603      	mov	r3, r0
 8007144:	75fb      	strb	r3, [r7, #23]

  return status;
 8007146:	7dfb      	ldrb	r3, [r7, #23]
}
 8007148:	4618      	mov	r0, r3
 800714a:	3718      	adds	r7, #24
 800714c:	46bd      	mov	sp, r7
 800714e:	bd80      	pop	{r7, pc}

08007150 <HAL_DCACHE_IRQHandler>:
  *                 the configuration information for the specified DCACHEx peripheral.
  * @note  This API should be called under the DCACHE_IRQHandler().
  * @retval None
  */
void HAL_DCACHE_IRQHandler(DCACHE_HandleTypeDef *hdcache)
{
 8007150:	b580      	push	{r7, lr}
 8007152:	b084      	sub	sp, #16
 8007154:	af00      	add	r7, sp, #0
 8007156:	6078      	str	r0, [r7, #4]
  /* Get current interrupt flags and interrupt sources value */
  uint32_t itflags   = READ_REG(hdcache->Instance->SR);
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	685b      	ldr	r3, [r3, #4]
 800715e:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hdcache->Instance->IER);
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	689b      	ldr	r3, [r3, #8]
 8007166:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_DCACHE_ALL_INSTANCE(hdcache->Instance));

  /* Check Data cache Error interrupt flag  */
  if (((itflags & itsources) & DCACHE_FLAG_ERROR) != 0U)
 8007168:	68fa      	ldr	r2, [r7, #12]
 800716a:	68bb      	ldr	r3, [r7, #8]
 800716c:	4013      	ands	r3, r2
 800716e:	f003 0304 	and.w	r3, r3, #4
 8007172:	2b00      	cmp	r3, #0
 8007174:	d00a      	beq.n	800718c <HAL_DCACHE_IRQHandler+0x3c>
  {
    /* Clear DCACHE error pending flag */
    __HAL_DCACHE_CLEAR_FLAG(hdcache, DCACHE_FLAG_ERROR);
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	2204      	movs	r2, #4
 800717c:	60da      	str	r2, [r3, #12]

    /* Update data cache error code */
    hdcache->ErrorCode = HAL_DCACHE_ERROR_EVICTION_CLEAN;
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	2240      	movs	r2, #64	; 0x40
 8007182:	629a      	str	r2, [r3, #40]	; 0x28

    /* Data cache error interrupt user callback */
    hdcache->ErrorCallback(hdcache);
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	689b      	ldr	r3, [r3, #8]
 8007188:	6878      	ldr	r0, [r7, #4]
 800718a:	4798      	blx	r3
  }

  if (READ_BIT(hdcache->Instance->CR, DCACHE_CR_CACHECMD) == 0U) /* no operation by range */
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007196:	2b00      	cmp	r3, #0
 8007198:	d108      	bne.n	80071ac <HAL_DCACHE_IRQHandler+0x5c>
  {
    /* Clear DCACHE busyend pending flag */
    __HAL_DCACHE_CLEAR_FLAG(hdcache, DCACHE_FLAG_BUSYEND);
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	2202      	movs	r2, #2
 80071a0:	60da      	str	r2, [r3, #12]

    /* Data cache invalidate complete interrupt user callback */
    hdcache->InvalidateCompleteCallback(hdcache);
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	695b      	ldr	r3, [r3, #20]
 80071a6:	6878      	ldr	r0, [r7, #4]
 80071a8:	4798      	blx	r3
    __HAL_DCACHE_CLEAR_FLAG(hdcache, DCACHE_FLAG_CMDEND);

    /* Data cache Invalidate range cmdend interrupt user callback */
    hdcache->InvalidateByAddrCallback(hdcache);
  }
}
 80071aa:	e029      	b.n	8007200 <HAL_DCACHE_IRQHandler+0xb0>
  else if (READ_BIT(hdcache->Instance->CR, DCACHE_CR_CACHECMD_1 | DCACHE_CR_CACHECMD_0) == \
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80071b6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80071ba:	d108      	bne.n	80071ce <HAL_DCACHE_IRQHandler+0x7e>
    __HAL_DCACHE_CLEAR_FLAG(hdcache, DCACHE_FLAG_CMDEND);
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	2210      	movs	r2, #16
 80071c2:	60da      	str	r2, [r3, #12]
    hdcache->CleanAndInvalidateByAddrCallback(hdcache);
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	699b      	ldr	r3, [r3, #24]
 80071c8:	6878      	ldr	r0, [r7, #4]
 80071ca:	4798      	blx	r3
}
 80071cc:	e018      	b.n	8007200 <HAL_DCACHE_IRQHandler+0xb0>
  else if (READ_BIT(hdcache->Instance->CR, DCACHE_CR_CACHECMD_0) == DCACHE_CR_CACHECMD_0)
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80071d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80071dc:	d108      	bne.n	80071f0 <HAL_DCACHE_IRQHandler+0xa0>
    __HAL_DCACHE_CLEAR_FLAG(hdcache, DCACHE_FLAG_CMDEND);
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	2210      	movs	r2, #16
 80071e4:	60da      	str	r2, [r3, #12]
    hdcache->CleanByAddrCallback(hdcache);
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	68db      	ldr	r3, [r3, #12]
 80071ea:	6878      	ldr	r0, [r7, #4]
 80071ec:	4798      	blx	r3
}
 80071ee:	e007      	b.n	8007200 <HAL_DCACHE_IRQHandler+0xb0>
    __HAL_DCACHE_CLEAR_FLAG(hdcache, DCACHE_FLAG_CMDEND);
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	2210      	movs	r2, #16
 80071f6:	60da      	str	r2, [r3, #12]
    hdcache->InvalidateByAddrCallback(hdcache);
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	691b      	ldr	r3, [r3, #16]
 80071fc:	6878      	ldr	r0, [r7, #4]
 80071fe:	4798      	blx	r3
}
 8007200:	bf00      	nop
 8007202:	3710      	adds	r7, #16
 8007204:	46bd      	mov	sp, r7
 8007206:	bd80      	pop	{r7, pc}

08007208 <HAL_DCACHE_CleanByAddrCallback>:
  * @param  hdcache Pointer to a DCACHE_HandleTypeDef structure that contains
  *                 the configuration information for the specified DCACHEx peripheral.
  * @retval None
  */
__weak void HAL_DCACHE_CleanByAddrCallback(DCACHE_HandleTypeDef *hdcache)
{
 8007208:	b480      	push	{r7}
 800720a:	b083      	sub	sp, #12
 800720c:	af00      	add	r7, sp, #0
 800720e:	6078      	str	r0, [r7, #4]
  UNUSED(hdcache);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DCACHE_CleanByAddrCallback() should be implemented in the user file
   */
}
 8007210:	bf00      	nop
 8007212:	370c      	adds	r7, #12
 8007214:	46bd      	mov	sp, r7
 8007216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800721a:	4770      	bx	lr

0800721c <HAL_DCACHE_InvalidateByAddrCallback>:
  * @param  hdcache Pointer to a DCACHE_HandleTypeDef structure that contains
  *                 the configuration information for the specified DCACHEx peripheral.
  * @retval None
  */
__weak void HAL_DCACHE_InvalidateByAddrCallback(DCACHE_HandleTypeDef *hdcache)
{
 800721c:	b480      	push	{r7}
 800721e:	b083      	sub	sp, #12
 8007220:	af00      	add	r7, sp, #0
 8007222:	6078      	str	r0, [r7, #4]
  UNUSED(hdcache);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DCACHE_InvalidateByAddrCallback() should be implemented in the user file
   */
}
 8007224:	bf00      	nop
 8007226:	370c      	adds	r7, #12
 8007228:	46bd      	mov	sp, r7
 800722a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800722e:	4770      	bx	lr

08007230 <HAL_DCACHE_InvalidateCompleteCallback>:
  * @param  hdcache Pointer to a DCACHE_HandleTypeDef structure that contains
  *                 the configuration information for the specified DCACHEx peripheral.
  * @retval None
  */
__weak void HAL_DCACHE_InvalidateCompleteCallback(DCACHE_HandleTypeDef *hdcache)
{
 8007230:	b480      	push	{r7}
 8007232:	b083      	sub	sp, #12
 8007234:	af00      	add	r7, sp, #0
 8007236:	6078      	str	r0, [r7, #4]
  UNUSED(hdcache);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DCACHE_InvalidateCompleteCallback() should be implemented in the user file
   */
}
 8007238:	bf00      	nop
 800723a:	370c      	adds	r7, #12
 800723c:	46bd      	mov	sp, r7
 800723e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007242:	4770      	bx	lr

08007244 <HAL_DCACHE_ErrorCallback>:
  * @param  hdcache Pointer to a DCACHE_HandleTypeDef structure that contains
  *                 the configuration information for the specified DCACHEx peripheral.
  * @retval None
  */
__weak void HAL_DCACHE_ErrorCallback(DCACHE_HandleTypeDef *hdcache)
{
 8007244:	b480      	push	{r7}
 8007246:	b083      	sub	sp, #12
 8007248:	af00      	add	r7, sp, #0
 800724a:	6078      	str	r0, [r7, #4]
  UNUSED(hdcache);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DCACHE_ErrorCallback() should be implemented in the user file
   */
}
 800724c:	bf00      	nop
 800724e:	370c      	adds	r7, #12
 8007250:	46bd      	mov	sp, r7
 8007252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007256:	4770      	bx	lr

08007258 <DCACHE_CommandByAddr>:
  *                       DCACHE_IT_MODE, DCACHE_POLLING_MODE.
  * @retval HAL status
  */
static HAL_StatusTypeDef DCACHE_CommandByAddr(DCACHE_HandleTypeDef *hdcache, uint32_t Command,
                                              const uint32_t *const pAddr, uint32_t dSize, uint32_t mode)
{
 8007258:	b580      	push	{r7, lr}
 800725a:	b088      	sub	sp, #32
 800725c:	af00      	add	r7, sp, #0
 800725e:	60f8      	str	r0, [r7, #12]
 8007260:	60b9      	str	r1, [r7, #8]
 8007262:	607a      	str	r2, [r7, #4]
 8007264:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007266:	2300      	movs	r3, #0
 8007268:	77fb      	strb	r3, [r7, #31]
  uint32_t op_addr = (uint32_t)pAddr;
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart;

  /* Check no ongoing operation */
  if (READ_BIT(hdcache->Instance->SR, (DCACHE_SR_BUSYF | DCACHE_SR_BUSYCMDF)) != 0U)
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	685b      	ldr	r3, [r3, #4]
 8007274:	f003 0309 	and.w	r3, r3, #9
 8007278:	2b00      	cmp	r3, #0
 800727a:	d002      	beq.n	8007282 <DCACHE_CommandByAddr+0x2a>
  {
    /* Return busy status */
    status =  HAL_BUSY;
 800727c:	2302      	movs	r3, #2
 800727e:	77fb      	strb	r3, [r7, #31]
 8007280:	e066      	b.n	8007350 <DCACHE_CommandByAddr+0xf8>
  }
  else
  {
    /* Update the error code */
    hdcache->ErrorCode = HAL_DCACHE_ERROR_NONE;
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	2200      	movs	r2, #0
 8007286:	629a      	str	r2, [r3, #40]	; 0x28

    /* Update the DCACHE handle State */
    hdcache->State = HAL_DCACHE_STATE_READY;
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	2201      	movs	r2, #1
 800728c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Make sure flags are reset */
    WRITE_REG(hdcache->Instance->FCR, (DCACHE_FCR_CBSYENDF | DCACHE_FCR_CCMDENDF));
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	2212      	movs	r2, #18
 8007296:	60da      	str	r2, [r3, #12]

    /* Fill area start address */
    WRITE_REG(hdcache->Instance->CMDRSADDRR, op_addr);
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	69ba      	ldr	r2, [r7, #24]
 800729e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Fill area end address */
    WRITE_REG(hdcache->Instance->CMDREADDRR, (op_addr + dSize - 1U));
 80072a0:	69ba      	ldr	r2, [r7, #24]
 80072a2:	683b      	ldr	r3, [r7, #0]
 80072a4:	441a      	add	r2, r3
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	3a01      	subs	r2, #1
 80072ac:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set command */
    MODIFY_REG(hdcache->Instance->CR, DCACHE_CR_CACHECMD, Command);
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	68ba      	ldr	r2, [r7, #8]
 80072be:	430a      	orrs	r2, r1
 80072c0:	601a      	str	r2, [r3, #0]

    /* Enable IT if required */
    if (mode == DCACHE_IT_MODE)
 80072c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072c4:	2b01      	cmp	r3, #1
 80072c6:	d110      	bne.n	80072ea <DCACHE_CommandByAddr+0x92>
    {
      /* Enable end of cache command interrupt */
      SET_BIT(hdcache->Instance->IER, DCACHE_IER_CMDENDIE);
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	689a      	ldr	r2, [r3, #8]
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	f042 0210 	orr.w	r2, r2, #16
 80072d6:	609a      	str	r2, [r3, #8]

      /* Launch cache command */
      SET_BIT(hdcache->Instance->CR, DCACHE_CR_STARTCMD);
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	681a      	ldr	r2, [r3, #0]
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80072e6:	601a      	str	r2, [r3, #0]
 80072e8:	e032      	b.n	8007350 <DCACHE_CommandByAddr+0xf8>
    }
    else
    {
      /* Make sure that end of cache command interrupt is disabled */
      CLEAR_BIT(hdcache->Instance->IER, DCACHE_IER_CMDENDIE);
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	689a      	ldr	r2, [r3, #8]
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	f022 0210 	bic.w	r2, r2, #16
 80072f8:	609a      	str	r2, [r3, #8]

      /* Launch cache command */
      SET_BIT(hdcache->Instance->CR, DCACHE_CR_STARTCMD);
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	681a      	ldr	r2, [r3, #0]
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007308:	601a      	str	r2, [r3, #0]

      /* Get timeout */
      tickstart = HAL_GetTick();
 800730a:	f7ff fd41 	bl	8006d90 <HAL_GetTick>
 800730e:	6178      	str	r0, [r7, #20]

      /* Wait for end of cache command */
      while (READ_BIT(hdcache->Instance->SR, DCACHE_SR_CMDENDF) == 0U)
 8007310:	e017      	b.n	8007342 <DCACHE_CommandByAddr+0xea>
      {
        if ((HAL_GetTick() - tickstart) > DCACHE_COMMAND_TIMEOUT_VALUE)
 8007312:	f7ff fd3d 	bl	8006d90 <HAL_GetTick>
 8007316:	4602      	mov	r2, r0
 8007318:	697b      	ldr	r3, [r7, #20]
 800731a:	1ad3      	subs	r3, r2, r3
 800731c:	2bc8      	cmp	r3, #200	; 0xc8
 800731e:	d910      	bls.n	8007342 <DCACHE_CommandByAddr+0xea>
        {
          if (READ_BIT(hdcache->Instance->SR, DCACHE_SR_CMDENDF) == 0U)
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	685b      	ldr	r3, [r3, #4]
 8007326:	f003 0310 	and.w	r3, r3, #16
 800732a:	2b00      	cmp	r3, #0
 800732c:	d109      	bne.n	8007342 <DCACHE_CommandByAddr+0xea>
          {
            /* Update error code */
            hdcache->ErrorCode = HAL_DCACHE_ERROR_TIMEOUT;
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	2210      	movs	r2, #16
 8007332:	629a      	str	r2, [r3, #40]	; 0x28

            /* Change the DCACHE state */
            hdcache->State = HAL_DCACHE_STATE_ERROR;
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	2206      	movs	r2, #6
 8007338:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            /* Return error status */
            status =  HAL_ERROR;
 800733c:	2301      	movs	r3, #1
 800733e:	77fb      	strb	r3, [r7, #31]
            break;
 8007340:	e006      	b.n	8007350 <DCACHE_CommandByAddr+0xf8>
      while (READ_BIT(hdcache->Instance->SR, DCACHE_SR_CMDENDF) == 0U)
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	685b      	ldr	r3, [r3, #4]
 8007348:	f003 0310 	and.w	r3, r3, #16
 800734c:	2b00      	cmp	r3, #0
 800734e:	d0e0      	beq.n	8007312 <DCACHE_CommandByAddr+0xba>
        }
      }
    }
  }

  return status;
 8007350:	7ffb      	ldrb	r3, [r7, #31]
}
 8007352:	4618      	mov	r0, r3
 8007354:	3720      	adds	r7, #32
 8007356:	46bd      	mov	sp, r7
 8007358:	bd80      	pop	{r7, pc}
	...

0800735c <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 800735c:	b580      	push	{r7, lr}
 800735e:	b082      	sub	sp, #8
 8007360:	af00      	add	r7, sp, #0
 8007362:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if (hdcmi == NULL)
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	2b00      	cmp	r3, #0
 8007368:	d101      	bne.n	800736e <HAL_DCMI_Init+0x12>
  {
    return HAL_ERROR;
 800736a:	2301      	movs	r3, #1
 800736c:	e069      	b.n	8007442 <HAL_DCMI_Init+0xe6>
  assert_param(IS_DCMI_BYTE_SELECT_MODE(hdcmi->Init.ByteSelectMode));
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));

  if (hdcmi->State == HAL_DCMI_STATE_RESET)
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007374:	b2db      	uxtb	r3, r3
 8007376:	2b00      	cmp	r3, #0
 8007378:	d102      	bne.n	8007380 <HAL_DCMI_Init+0x24>
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 800737a:	6878      	ldr	r0, [r7, #4]
 800737c:	f7fd feee 	bl	800515c <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	2202      	movs	r2, #2
 8007384:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  if (hdcmi->Init.ExtendedDataMode != DCMI_EXTEND_DATA_8B)
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	699b      	ldr	r3, [r3, #24]
 800738c:	2b00      	cmp	r3, #0
 800738e:	d002      	beq.n	8007396 <HAL_DCMI_Init+0x3a>
  {
    /* Byte select mode must be programmed to the reset value if the extended mode
    is not set to 8-bit data capture on every pixel clock */
    hdcmi->Init.ByteSelectMode = DCMI_BSM_ALL;
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	2200      	movs	r2, #0
 8007394:	625a      	str	r2, [r3, #36]	; 0x24
  }
  /* Configures the HS, VS, DE and PC polarity */
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 | \
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	6819      	ldr	r1, [r3, #0]
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681a      	ldr	r2, [r3, #0]
 80073a0:	4b2a      	ldr	r3, [pc, #168]	; (800744c <HAL_DCMI_Init+0xf0>)
 80073a2:	400b      	ands	r3, r1
 80073a4:	6013      	str	r3, [r2, #0]
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  | \
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS | \
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	6819      	ldr	r1, [r3, #0]
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	685a      	ldr	r2, [r3, #4]
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	695b      	ldr	r3, [r3, #20]
 80073b4:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 80073ba:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	691b      	ldr	r3, [r3, #16]
 80073c0:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	689b      	ldr	r3, [r3, #8]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 80073c6:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	699b      	ldr	r3, [r3, #24]
 80073cc:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	6a1b      	ldr	r3, [r3, #32]
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 80073d2:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073d8:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 80073de:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073e4:	431a      	orrs	r2, r3
                                    hdcmi->Init.LineSelectStart);
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 80073ea:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	430a      	orrs	r2, r1
 80073f2:	601a      	str	r2, [r3, #0]

  if (hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	685b      	ldr	r3, [r3, #4]
 80073f8:	2b10      	cmp	r3, #16
 80073fa:	d112      	bne.n	8007422 <HAL_DCMI_Init+0xc6>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	7f1b      	ldrb	r3, [r3, #28]
 8007400:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	7f5b      	ldrb	r3, [r3, #29]
 8007406:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8007408:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	7f9b      	ldrb	r3, [r3, #30]
 800740e:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 8007410:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	7fdb      	ldrb	r3, [r3, #31]
 8007418:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 800741e:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8007420:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	68da      	ldr	r2, [r3, #12]
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	f042 021e 	orr.w	r2, r2, #30
 8007430:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	2200      	movs	r2, #0
 8007436:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	2201      	movs	r2, #1
 800743c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8007440:	2300      	movs	r3, #0
}
 8007442:	4618      	mov	r0, r3
 8007444:	3708      	adds	r7, #8
 8007446:	46bd      	mov	sp, r7
 8007448:	bd80      	pop	{r7, pc}
 800744a:	bf00      	nop
 800744c:	ffe0f007 	.word	0xffe0f007

08007450 <HAL_DCMI_Start_DMA>:
  * @param  pData     The destination memory Buffer address (LCD Frame buffer).
  * @param  Length    The length of capture to be transferred.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Start_DMA(DCMI_HandleTypeDef *hdcmi, uint32_t DCMI_Mode, uint32_t pData, uint32_t Length)
{
 8007450:	b580      	push	{r7, lr}
 8007452:	b08a      	sub	sp, #40	; 0x28
 8007454:	af00      	add	r7, sp, #0
 8007456:	60f8      	str	r0, [r7, #12]
 8007458:	60b9      	str	r1, [r7, #8]
 800745a:	607a      	str	r2, [r7, #4]
 800745c:	603b      	str	r3, [r7, #0]
  uint32_t tmp_length = Length;
 800745e:	683b      	ldr	r3, [r7, #0]
 8007460:	623b      	str	r3, [r7, #32]
  HAL_StatusTypeDef status = HAL_OK;
 8007462:	2300      	movs	r3, #0
 8007464:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check function parameters */
  assert_param(IS_DCMI_CAPTURE_MODE(DCMI_Mode));

  /* Process Locked */
  __HAL_LOCK(hdcmi);
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800746e:	2b01      	cmp	r3, #1
 8007470:	d101      	bne.n	8007476 <HAL_DCMI_Start_DMA+0x26>
 8007472:	2302      	movs	r3, #2
 8007474:	e189      	b.n	800778a <HAL_DCMI_Start_DMA+0x33a>
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	2201      	movs	r2, #1
 800747a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Lock the DCMI peripheral state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	2202      	movs	r2, #2
 8007482:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Enable DCMI by setting DCMIEN bit */
  __HAL_DCMI_ENABLE(hdcmi);
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	681a      	ldr	r2, [r3, #0]
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007494:	601a      	str	r2, [r3, #0]

  /* Configure the DCMI Mode */
  hdcmi->Instance->CR &= ~(DCMI_CR_CM);
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	681a      	ldr	r2, [r3, #0]
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	f022 0202 	bic.w	r2, r2, #2
 80074a4:	601a      	str	r2, [r3, #0]
  hdcmi->Instance->CR |= (uint32_t)(DCMI_Mode);
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	6819      	ldr	r1, [r3, #0]
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	68ba      	ldr	r2, [r7, #8]
 80074b2:	430a      	orrs	r2, r1
 80074b4:	601a      	str	r2, [r3, #0]

  /* Set the DMA memory0 conversion complete callback */
  hdcmi->DMA_Handle->XferCpltCallback = DCMI_DMAXferCplt;
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80074ba:	4a99      	ldr	r2, [pc, #612]	; (8007720 <HAL_DCMI_Start_DMA+0x2d0>)
 80074bc:	661a      	str	r2, [r3, #96]	; 0x60

  /* Set the DMA error callback */
  hdcmi->DMA_Handle->XferErrorCallback = DCMI_DMAError;
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80074c2:	4a98      	ldr	r2, [pc, #608]	; (8007724 <HAL_DCMI_Start_DMA+0x2d4>)
 80074c4:	669a      	str	r2, [r3, #104]	; 0x68

  /* Set the dma abort callback */
  hdcmi->DMA_Handle->XferAbortCallback = NULL;
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80074ca:	2200      	movs	r2, #0
 80074cc:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset transfer counters value */
  hdcmi->XferCount = 0;
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	2200      	movs	r2, #0
 80074d2:	639a      	str	r2, [r3, #56]	; 0x38
  hdcmi->XferTransferNumber = 0;
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	2200      	movs	r2, #0
 80074d8:	641a      	str	r2, [r3, #64]	; 0x40
  hdcmi->XferSize = 0;
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	2200      	movs	r2, #0
 80074de:	63da      	str	r2, [r3, #60]	; 0x3c
  hdcmi->pBuffPtr = 0;
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	2200      	movs	r2, #0
 80074e4:	645a      	str	r2, [r3, #68]	; 0x44

  /* Length should be converted to number of bytes */
  tmp_length = tmp_length * 4U;
 80074e6:	6a3b      	ldr	r3, [r7, #32]
 80074e8:	009b      	lsls	r3, r3, #2
 80074ea:	623b      	str	r3, [r7, #32]

  if (tmp_length <= 0xFFFFU)
 80074ec:	6a3b      	ldr	r3, [r7, #32]
 80074ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80074f2:	d24c      	bcs.n	800758e <HAL_DCMI_Start_DMA+0x13e>
  {
    /* Continuoues Mode */
    /* Enable the DMA Stream */
    if ((hdcmi->DMA_Handle->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80074f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80074fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d037      	beq.n	8007572 <HAL_DCMI_Start_DMA+0x122>
    {
      if ((hdcmi->DMA_Handle->LinkedListQueue != 0U) && (hdcmi->DMA_Handle->LinkedListQueue->Head != 0U))
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007506:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007508:	2b00      	cmp	r3, #0
 800750a:	d023      	beq.n	8007554 <HAL_DCMI_Start_DMA+0x104>
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007510:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	2b00      	cmp	r3, #0
 8007516:	d01d      	beq.n	8007554 <HAL_DCMI_Start_DMA+0x104>
      {
        /* Set Source , Destination , Length for DMA Xfer */

        /* Set DMA data size           */
        hdcmi->DMA_Handle->LinkedListQueue->Head->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = tmp_length;
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800751c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	6a3a      	ldr	r2, [r7, #32]
 8007522:	609a      	str	r2, [r3, #8]
        /* Set DMA source address      */
        hdcmi->DMA_Handle->LinkedListQueue->Head->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] = \
            (uint32_t)&hdcmi->Instance->DR;
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	f103 0228 	add.w	r2, r3, #40	; 0x28
        hdcmi->DMA_Handle->LinkedListQueue->Head->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] = \
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007530:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	60da      	str	r2, [r3, #12]
        /* Set DMA destination address */
        hdcmi->DMA_Handle->LinkedListQueue->Head->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = (uint32_t)pData;
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800753a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	687a      	ldr	r2, [r7, #4]
 8007540:	611a      	str	r2, [r3, #16]

        status = HAL_DMAEx_List_Start_IT(hdcmi->DMA_Handle);
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007546:	4618      	mov	r0, r3
 8007548:	f000 fee0 	bl	800830c <HAL_DMAEx_List_Start_IT>
 800754c:	4603      	mov	r3, r0
 800754e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007552:	e0f9      	b.n	8007748 <HAL_DCMI_Start_DMA+0x2f8>
      }
      else
      {
        /* Set Error Code */
        hdcmi->ErrorCode = HAL_DCMI_ERROR_DMA;
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	2240      	movs	r2, #64	; 0x40
 8007558:	64da      	str	r2, [r3, #76]	; 0x4c
        /* Change DCMI state */
        hdcmi->State = HAL_DCMI_STATE_READY;
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	2201      	movs	r2, #1
 800755e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        /* Release Lock */
        __HAL_UNLOCK(hdcmi);
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	2200      	movs	r2, #0
 8007566:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        /* Return function status */
        status = HAL_ERROR;
 800756a:	2301      	movs	r3, #1
 800756c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007570:	e0ea      	b.n	8007748 <HAL_DCMI_Start_DMA+0x2f8>
      }
    }
    else
    {
      status = HAL_DMA_Start_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, (uint32_t)pData, tmp_length);
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	3328      	adds	r3, #40	; 0x28
 800757c:	4619      	mov	r1, r3
 800757e:	6a3b      	ldr	r3, [r7, #32]
 8007580:	687a      	ldr	r2, [r7, #4]
 8007582:	f000 faba 	bl	8007afa <HAL_DMA_Start_IT>
 8007586:	4603      	mov	r3, r0
 8007588:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800758c:	e0dc      	b.n	8007748 <HAL_DCMI_Start_DMA+0x2f8>
  {
    /* Double buffering is used through 2 Nodes
       Calculate the elementary size to be transferred by each node */

    /* Initialize transfer parameters */
    hdcmi->XferCount = 1;
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	2201      	movs	r2, #1
 8007592:	639a      	str	r2, [r3, #56]	; 0x38
    hdcmi->XferSize = tmp_length;
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	6a3a      	ldr	r2, [r7, #32]
 8007598:	63da      	str	r2, [r3, #60]	; 0x3c
    hdcmi->pBuffPtr = pData;
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	687a      	ldr	r2, [r7, #4]
 800759e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Get the number of buffer */
    while (hdcmi->XferSize > 0xFFFFU)
 80075a0:	e009      	b.n	80075b6 <HAL_DCMI_Start_DMA+0x166>
    {
      hdcmi->XferSize = (hdcmi->XferSize / 2U);
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80075a6:	085a      	lsrs	r2, r3, #1
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	63da      	str	r2, [r3, #60]	; 0x3c
      hdcmi->XferCount = hdcmi->XferCount * 2U;
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075b0:	005a      	lsls	r2, r3, #1
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	639a      	str	r2, [r3, #56]	; 0x38
    while (hdcmi->XferSize > 0xFFFFU)
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80075ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80075be:	d2f0      	bcs.n	80075a2 <HAL_DCMI_Start_DMA+0x152>
    }

    /* Update DCMI counter  and transfer number*/
    hdcmi->XferCount = (hdcmi->XferCount - 1U);
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075c4:	1e5a      	subs	r2, r3, #1
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	639a      	str	r2, [r3, #56]	; 0x38
    hdcmi->XferTransferNumber = hdcmi->XferCount;
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	641a      	str	r2, [r3, #64]	; 0x40

    if ((hdcmi->DMA_Handle->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80075d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80075d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80075dc:	2b00      	cmp	r3, #0
 80075de:	f000 80a3 	beq.w	8007728 <HAL_DCMI_Start_DMA+0x2d8>
    {
      if ((hdcmi->DMA_Handle->LinkedListQueue != 0U) && (hdcmi->DMA_Handle->LinkedListQueue->Head != 0U))
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80075e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	f000 808a 	beq.w	8007702 <HAL_DCMI_Start_DMA+0x2b2>
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80075f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	f000 8083 	beq.w	8007702 <HAL_DCMI_Start_DMA+0x2b2>
      {
        /* Update first node */

        /* Set DMA Data size */
        hdcmi->DMA_Handle->LinkedListQueue->Head->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = hdcmi->XferSize ;
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007600:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	68fa      	ldr	r2, [r7, #12]
 8007606:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8007608:	609a      	str	r2, [r3, #8]

        /* Set DMA Source address */
        hdcmi->DMA_Handle->LinkedListQueue->Head->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] = \
            (uint32_t)&hdcmi->Instance->DR;
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	f103 0228 	add.w	r2, r3, #40	; 0x28
        hdcmi->DMA_Handle->LinkedListQueue->Head->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] = \
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007616:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	60da      	str	r2, [r3, #12]

        /* Set DMA Destination address */
        hdcmi->DMA_Handle->LinkedListQueue->Head->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = (uint32_t)pData;
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007620:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	687a      	ldr	r2, [r7, #4]
 8007626:	611a      	str	r2, [r3, #16]

        /* Get CLLR offset */
        cllr_offset = (hdcmi->DMA_Handle->LinkedListQueue->Head->NodeInfo & NODE_CLLR_IDX) >> 8U;
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800762c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	6a1b      	ldr	r3, [r3, #32]
 8007632:	0a1b      	lsrs	r3, r3, #8
 8007634:	f003 0307 	and.w	r3, r3, #7
 8007638:	61fb      	str	r3, [r7, #28]

        /* Update second node */
        if (hdcmi->DMA_Handle->LinkedListQueue->Head->LinkRegisters[cllr_offset] != 0U)
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800763e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	69fa      	ldr	r2, [r7, #28]
 8007644:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007648:	2b00      	cmp	r3, #0
 800764a:	d04b      	beq.n	80076e4 <HAL_DCMI_Start_DMA+0x294>
        {
          tmp1 = (uint32_t)hdcmi->DMA_Handle->LinkedListQueue->Head ;
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007650:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	61bb      	str	r3, [r7, #24]
          tmp2 = hdcmi->DMA_Handle->LinkedListQueue->Head->LinkRegisters[cllr_offset];
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800765a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	69fa      	ldr	r2, [r7, #28]
 8007660:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007664:	617b      	str	r3, [r7, #20]
          /* Update second node */

          /* Set DMA Data size */
          ((DMA_NodeTypeDef *)((tmp1 & DMA_CLBAR_LBA) + \
 8007666:	69bb      	ldr	r3, [r7, #24]
 8007668:	0c1b      	lsrs	r3, r3, #16
 800766a:	041b      	lsls	r3, r3, #16
                               (tmp2 & DMA_CLLR_LA)))->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = hdcmi->XferSize;
 800766c:	6979      	ldr	r1, [r7, #20]
 800766e:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 8007672:	400a      	ands	r2, r1
          ((DMA_NodeTypeDef *)((tmp1 & DMA_CLBAR_LBA) + \
 8007674:	4313      	orrs	r3, r2
 8007676:	461a      	mov	r2, r3
                               (tmp2 & DMA_CLLR_LA)))->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = hdcmi->XferSize;
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800767c:	6093      	str	r3, [r2, #8]

          /* Set DMA Source address */
          ((DMA_NodeTypeDef *)((tmp1 & DMA_CLBAR_LBA) + \
                               (tmp2 & DMA_CLLR_LA)))->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] = \
                                   (uint32_t)&hdcmi->Instance->DR;
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	f103 0028 	add.w	r0, r3, #40	; 0x28
          ((DMA_NodeTypeDef *)((tmp1 & DMA_CLBAR_LBA) + \
 8007686:	69bb      	ldr	r3, [r7, #24]
 8007688:	0c1b      	lsrs	r3, r3, #16
 800768a:	041b      	lsls	r3, r3, #16
                               (tmp2 & DMA_CLLR_LA)))->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] = \
 800768c:	6979      	ldr	r1, [r7, #20]
 800768e:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 8007692:	400a      	ands	r2, r1
          ((DMA_NodeTypeDef *)((tmp1 & DMA_CLBAR_LBA) + \
 8007694:	4313      	orrs	r3, r2
                                   (uint32_t)&hdcmi->Instance->DR;
 8007696:	4602      	mov	r2, r0
                               (tmp2 & DMA_CLLR_LA)))->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] = \
 8007698:	60da      	str	r2, [r3, #12]

          /* Set DMA Destination address */
          ((DMA_NodeTypeDef *)((tmp1 & DMA_CLBAR_LBA) + \
                               (tmp2 & DMA_CLLR_LA)))->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = \
                                   (uint32_t)pData + hdcmi->XferSize;
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
          ((DMA_NodeTypeDef *)((tmp1 & DMA_CLBAR_LBA) + \
 800769e:	69bb      	ldr	r3, [r7, #24]
 80076a0:	0c1b      	lsrs	r3, r3, #16
 80076a2:	041b      	lsls	r3, r3, #16
                               (tmp2 & DMA_CLLR_LA)))->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = \
 80076a4:	6978      	ldr	r0, [r7, #20]
 80076a6:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 80076aa:	4002      	ands	r2, r0
          ((DMA_NodeTypeDef *)((tmp1 & DMA_CLBAR_LBA) + \
 80076ac:	4313      	orrs	r3, r2
 80076ae:	461a      	mov	r2, r3
                                   (uint32_t)pData + hdcmi->XferSize;
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	440b      	add	r3, r1
                               (tmp2 & DMA_CLLR_LA)))->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = \
 80076b4:	6113      	str	r3, [r2, #16]

          if (HAL_DMAEx_List_Start_IT(hdcmi->DMA_Handle) != HAL_OK)
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80076ba:	4618      	mov	r0, r3
 80076bc:	f000 fe26 	bl	800830c <HAL_DMAEx_List_Start_IT>
 80076c0:	4603      	mov	r3, r0
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d03f      	beq.n	8007746 <HAL_DCMI_Start_DMA+0x2f6>
          {
            /* Set Error Code */
            hdcmi->ErrorCode = HAL_DCMI_ERROR_DMA;
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	2240      	movs	r2, #64	; 0x40
 80076ca:	64da      	str	r2, [r3, #76]	; 0x4c
            /* Change DCMI state */
            hdcmi->State = HAL_DCMI_STATE_READY;
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	2201      	movs	r2, #1
 80076d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
            /* Release Lock */
            __HAL_UNLOCK(hdcmi);
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	2200      	movs	r2, #0
 80076d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
            /* Return function status */
            status = HAL_ERROR;
 80076dc:	2301      	movs	r3, #1
 80076de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (hdcmi->DMA_Handle->LinkedListQueue->Head->LinkRegisters[cllr_offset] != 0U)
 80076e2:	e030      	b.n	8007746 <HAL_DCMI_Start_DMA+0x2f6>
          }
        }
        else
        {
          /* Set Error Code */
          hdcmi->ErrorCode = HAL_DCMI_ERROR_DMA;
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	2240      	movs	r2, #64	; 0x40
 80076e8:	64da      	str	r2, [r3, #76]	; 0x4c
          /* Change DCMI state */
          hdcmi->State = HAL_DCMI_STATE_READY;
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	2201      	movs	r2, #1
 80076ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          /* Release Lock */
          __HAL_UNLOCK(hdcmi);
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	2200      	movs	r2, #0
 80076f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          /* Return function status */
          status = HAL_ERROR;
 80076fa:	2301      	movs	r3, #1
 80076fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (hdcmi->DMA_Handle->LinkedListQueue->Head->LinkRegisters[cllr_offset] != 0U)
 8007700:	e021      	b.n	8007746 <HAL_DCMI_Start_DMA+0x2f6>
        }
      }
      else
      {
        /* Set Error Code */
        hdcmi->ErrorCode = HAL_DCMI_ERROR_DMA;
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	2240      	movs	r2, #64	; 0x40
 8007706:	64da      	str	r2, [r3, #76]	; 0x4c
        /* Change DCMI state */
        hdcmi->State = HAL_DCMI_STATE_READY;
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	2201      	movs	r2, #1
 800770c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        /* Release Lock */
        __HAL_UNLOCK(hdcmi);
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	2200      	movs	r2, #0
 8007714:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        /* Return function status */
        status = HAL_ERROR;
 8007718:	2301      	movs	r3, #1
 800771a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800771e:	e013      	b.n	8007748 <HAL_DCMI_Start_DMA+0x2f8>
 8007720:	080079b5 	.word	0x080079b5
 8007724:	08007ac1 	.word	0x08007ac1
      }
    }
    else
    {
      /* Set Error Code */
      hdcmi->ErrorCode = HAL_DCMI_ERROR_DMA;
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	2240      	movs	r2, #64	; 0x40
 800772c:	64da      	str	r2, [r3, #76]	; 0x4c
      /* Change DCMI state */
      hdcmi->State = HAL_DCMI_STATE_READY;
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	2201      	movs	r2, #1
 8007732:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      /* Release Lock */
      __HAL_UNLOCK(hdcmi);
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	2200      	movs	r2, #0
 800773a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      /* Return function status */
      status = HAL_ERROR;
 800773e:	2301      	movs	r3, #1
 8007740:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007744:	e000      	b.n	8007748 <HAL_DCMI_Start_DMA+0x2f8>
        if (hdcmi->DMA_Handle->LinkedListQueue->Head->LinkRegisters[cllr_offset] != 0U)
 8007746:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 8007748:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800774c:	2b00      	cmp	r3, #0
 800774e:	d10c      	bne.n	800776a <HAL_DCMI_Start_DMA+0x31a>
  {
    /* Enable Capture */
    hdcmi->Instance->CR |= DCMI_CR_CAPTURE;
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	681a      	ldr	r2, [r3, #0]
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	f042 0201 	orr.w	r2, r2, #1
 800775e:	601a      	str	r2, [r3, #0]

    /* Release Lock */
    __HAL_UNLOCK(hdcmi);
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	2200      	movs	r2, #0
 8007764:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 8007768:	e00d      	b.n	8007786 <HAL_DCMI_Start_DMA+0x336>
  }
  else
  {
    /* Set Error Code */
    hdcmi->ErrorCode = HAL_DCMI_ERROR_DMA;
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	2240      	movs	r2, #64	; 0x40
 800776e:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_READY;
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	2201      	movs	r2, #1
 8007774:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    /* Release Lock */
    __HAL_UNLOCK(hdcmi);
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	2200      	movs	r2, #0
 800777c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    /* Return function status */
    status = HAL_ERROR;
 8007780:	2301      	movs	r3, #1
 8007782:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Return function status */
  return status;
 8007786:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800778a:	4618      	mov	r0, r3
 800778c:	3728      	adds	r7, #40	; 0x28
 800778e:	46bd      	mov	sp, r7
 8007790:	bd80      	pop	{r7, pc}
 8007792:	bf00      	nop

08007794 <HAL_DCMI_Stop>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Stop(DCMI_HandleTypeDef *hdcmi)
{
 8007794:	b580      	push	{r7, lr}
 8007796:	b084      	sub	sp, #16
 8007798:	af00      	add	r7, sp, #0
 800779a:	6078      	str	r0, [r7, #4]
  uint32_t count = HAL_TIMEOUT_DCMI_STOP * (SystemCoreClock / 8U / 1000U);
 800779c:	4b2b      	ldr	r3, [pc, #172]	; (800784c <HAL_DCMI_Stop+0xb8>)
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	4a2b      	ldr	r2, [pc, #172]	; (8007850 <HAL_DCMI_Stop+0xbc>)
 80077a2:	fba2 2303 	umull	r2, r3, r2, r3
 80077a6:	0a5b      	lsrs	r3, r3, #9
 80077a8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80077ac:	fb02 f303 	mul.w	r3, r2, r3
 80077b0:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 80077b2:	2300      	movs	r3, #0
 80077b4:	72fb      	strb	r3, [r7, #11]

  /* Process locked */
  __HAL_LOCK(hdcmi);
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80077bc:	2b01      	cmp	r3, #1
 80077be:	d101      	bne.n	80077c4 <HAL_DCMI_Stop+0x30>
 80077c0:	2302      	movs	r3, #2
 80077c2:	e03f      	b.n	8007844 <HAL_DCMI_Stop+0xb0>
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	2201      	movs	r2, #1
 80077c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Lock the DCMI peripheral state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	2202      	movs	r2, #2
 80077d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Disable Capture */
  hdcmi->Instance->CR &= ~(DCMI_CR_CAPTURE);
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	681a      	ldr	r2, [r3, #0]
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	f022 0201 	bic.w	r2, r2, #1
 80077e2:	601a      	str	r2, [r3, #0]

  /* Check if the DCMI capture effectively disabled */
  do
  {
    count-- ;
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	3b01      	subs	r3, #1
 80077e8:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d108      	bne.n	8007802 <HAL_DCMI_Stop+0x6e>
    {
      /* Update error code */
      hdcmi->ErrorCode |= HAL_DCMI_ERROR_TIMEOUT;
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80077f4:	f043 0220 	orr.w	r2, r3, #32
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	64da      	str	r2, [r3, #76]	; 0x4c

      status = HAL_TIMEOUT;
 80077fc:	2303      	movs	r3, #3
 80077fe:	72fb      	strb	r3, [r7, #11]
      break;
 8007800:	e006      	b.n	8007810 <HAL_DCMI_Stop+0x7c>
    }
  } while ((hdcmi->Instance->CR & DCMI_CR_CAPTURE) != 0U);
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	f003 0301 	and.w	r3, r3, #1
 800780c:	2b00      	cmp	r3, #0
 800780e:	d1e9      	bne.n	80077e4 <HAL_DCMI_Stop+0x50>

  /* Disable the DCMI */
  __HAL_DCMI_DISABLE(hdcmi);
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	681a      	ldr	r2, [r3, #0]
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800781e:	601a      	str	r2, [r3, #0]

  /* Disable the DMA */
  (void)HAL_DMA_Abort(hdcmi->DMA_Handle);
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007824:	4618      	mov	r0, r3
 8007826:	f000 f9c8 	bl	8007bba <HAL_DMA_Abort>

  /* Update error code */
  hdcmi->ErrorCode |= HAL_DCMI_ERROR_NONE;
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Change DCMI state */
  hdcmi->State = HAL_DCMI_STATE_READY;
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	2201      	movs	r2, #1
 8007836:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Process Unlocked */
  __HAL_UNLOCK(hdcmi);
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	2200      	movs	r2, #0
 800783e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Return function status */
  return status;
 8007842:	7afb      	ldrb	r3, [r7, #11]
}
 8007844:	4618      	mov	r0, r3
 8007846:	3710      	adds	r7, #16
 8007848:	46bd      	mov	sp, r7
 800784a:	bd80      	pop	{r7, pc}
 800784c:	20000000 	.word	0x20000000
 8007850:	10624dd3 	.word	0x10624dd3

08007854 <HAL_DCMI_IRQHandler>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for the DCMI.
  * @retval None
  */
void HAL_DCMI_IRQHandler(DCMI_HandleTypeDef *hdcmi)
{
 8007854:	b580      	push	{r7, lr}
 8007856:	b084      	sub	sp, #16
 8007858:	af00      	add	r7, sp, #0
 800785a:	6078      	str	r0, [r7, #4]
  uint32_t isr_value = READ_REG(hdcmi->Instance->MISR);
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	691b      	ldr	r3, [r3, #16]
 8007862:	60fb      	str	r3, [r7, #12]

  /* Synchronization error interrupt management *******************************/
  if ((isr_value & DCMI_FLAG_ERRRI) == DCMI_FLAG_ERRRI)
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	f003 0304 	and.w	r3, r3, #4
 800786a:	2b00      	cmp	r3, #0
 800786c:	d01e      	beq.n	80078ac <HAL_DCMI_IRQHandler+0x58>
  {
    /* Clear the Synchronization error flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_ERRRI);
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	2204      	movs	r2, #4
 8007874:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_SYNC;
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800787a:	f043 0202 	orr.w	r2, r3, #2
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	2204      	movs	r2, #4
 8007886:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Set the synchronization error callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800788e:	4a39      	ldr	r2, [pc, #228]	; (8007974 <HAL_DCMI_IRQHandler+0x120>)
 8007890:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Abort the DMA Transfer */
    if (HAL_DMA_Abort_IT(hdcmi->DMA_Handle) != HAL_OK)
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007896:	4618      	mov	r0, r3
 8007898:	f000 fa0b 	bl	8007cb2 <HAL_DMA_Abort_IT>
 800789c:	4603      	mov	r3, r0
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d004      	beq.n	80078ac <HAL_DCMI_IRQHandler+0x58>
    {
      DCMI_DMAError(hdcmi->DMA_Handle);
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80078a6:	4618      	mov	r0, r3
 80078a8:	f000 f90a 	bl	8007ac0 <DCMI_DMAError>
    }
  }
  /* Overflow interrupt management ********************************************/
  if ((isr_value & DCMI_FLAG_OVRRI) == DCMI_FLAG_OVRRI)
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	f003 0302 	and.w	r3, r3, #2
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d01e      	beq.n	80078f4 <HAL_DCMI_IRQHandler+0xa0>
  {
    /* Clear the Overflow flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_OVRRI);
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	2202      	movs	r2, #2
 80078bc:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_OVR;
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80078c2:	f043 0201 	orr.w	r2, r3, #1
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	2204      	movs	r2, #4
 80078ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Set the overflow callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80078d6:	4a27      	ldr	r2, [pc, #156]	; (8007974 <HAL_DCMI_IRQHandler+0x120>)
 80078d8:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Abort the DMA Transfer */
    if (HAL_DMA_Abort_IT(hdcmi->DMA_Handle) != HAL_OK)
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80078de:	4618      	mov	r0, r3
 80078e0:	f000 f9e7 	bl	8007cb2 <HAL_DMA_Abort_IT>
 80078e4:	4603      	mov	r3, r0
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d004      	beq.n	80078f4 <HAL_DCMI_IRQHandler+0xa0>
    {
      DCMI_DMAError(hdcmi->DMA_Handle);
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80078ee:	4618      	mov	r0, r3
 80078f0:	f000 f8e6 	bl	8007ac0 <DCMI_DMAError>
    }
  }
  /* Line Interrupt management ************************************************/
  if ((isr_value & DCMI_FLAG_LINERI) == DCMI_FLAG_LINERI)
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	f003 0310 	and.w	r3, r3, #16
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d006      	beq.n	800790c <HAL_DCMI_IRQHandler+0xb8>
  {
    /* Clear the Line interrupt flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_LINERI);
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	2210      	movs	r2, #16
 8007904:	615a      	str	r2, [r3, #20]
    /* Line interrupt Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI line event callback*/
    hdcmi->LineEventCallback(hdcmi);
#else
    HAL_DCMI_LineEventCallback(hdcmi);
 8007906:	6878      	ldr	r0, [r7, #4]
 8007908:	f000 f840 	bl	800798c <HAL_DCMI_LineEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
  /* VSYNC interrupt management ***********************************************/
  if ((isr_value & DCMI_FLAG_VSYNCRI) == DCMI_FLAG_VSYNCRI)
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	f003 0308 	and.w	r3, r3, #8
 8007912:	2b00      	cmp	r3, #0
 8007914:	d006      	beq.n	8007924 <HAL_DCMI_IRQHandler+0xd0>
  {
    /* Clear the VSYNC flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_VSYNCRI);
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	2208      	movs	r2, #8
 800791c:	615a      	str	r2, [r3, #20]
    /* VSYNC Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI vsync event callback*/
    hdcmi->VsyncEventCallback(hdcmi);
#else
    HAL_DCMI_VsyncEventCallback(hdcmi);
 800791e:	6878      	ldr	r0, [r7, #4]
 8007920:	f000 f83e 	bl	80079a0 <HAL_DCMI_VsyncEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
  /* FRAME interrupt management ***********************************************/
  if ((isr_value & DCMI_FLAG_FRAMERI) == DCMI_FLAG_FRAMERI)
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	f003 0301 	and.w	r3, r3, #1
 800792a:	2b00      	cmp	r3, #0
 800792c:	d01d      	beq.n	800796a <HAL_DCMI_IRQHandler+0x116>
  {
    /* When snapshot mode, disable Vsync, Error and Overrun interrupts */
    if ((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	f003 0302 	and.w	r3, r3, #2
 8007938:	2b02      	cmp	r3, #2
 800793a:	d107      	bne.n	800794c <HAL_DCMI_IRQHandler+0xf8>
    {
      /* Disable the Line, Vsync, Error and Overrun interrupts */
      __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	68da      	ldr	r2, [r3, #12]
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	f022 021e 	bic.w	r2, r2, #30
 800794a:	60da      	str	r2, [r3, #12]
    }

    /* Disable the Frame interrupt */
    __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_FRAME);
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	68da      	ldr	r2, [r3, #12]
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	f022 0201 	bic.w	r2, r2, #1
 800795a:	60da      	str	r2, [r3, #12]

    /* Clear the End of Frame flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_FRAMERI);
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	2201      	movs	r2, #1
 8007962:	615a      	str	r2, [r3, #20]
    /* Frame Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI frame event callback*/
    hdcmi->FrameEventCallback(hdcmi);
#else
    HAL_DCMI_FrameEventCallback(hdcmi);
 8007964:	6878      	ldr	r0, [r7, #4]
 8007966:	f7fd fb2f 	bl	8004fc8 <HAL_DCMI_FrameEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
}
 800796a:	bf00      	nop
 800796c:	3710      	adds	r7, #16
 800796e:	46bd      	mov	sp, r7
 8007970:	bd80      	pop	{r7, pc}
 8007972:	bf00      	nop
 8007974:	08007ac1 	.word	0x08007ac1

08007978 <HAL_DCMI_ErrorCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_ErrorCallback(DCMI_HandleTypeDef *hdcmi)
{
 8007978:	b480      	push	{r7}
 800797a:	b083      	sub	sp, #12
 800797c:	af00      	add	r7, sp, #0
 800797e:	6078      	str	r0, [r7, #4]
  UNUSED(hdcmi);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_ErrorCallback could be implemented in the user file
   */
}
 8007980:	bf00      	nop
 8007982:	370c      	adds	r7, #12
 8007984:	46bd      	mov	sp, r7
 8007986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800798a:	4770      	bx	lr

0800798c <HAL_DCMI_LineEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_LineEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 800798c:	b480      	push	{r7}
 800798e:	b083      	sub	sp, #12
 8007990:	af00      	add	r7, sp, #0
 8007992:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_LineEventCallback could be implemented in the user file
   */
}
 8007994:	bf00      	nop
 8007996:	370c      	adds	r7, #12
 8007998:	46bd      	mov	sp, r7
 800799a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800799e:	4770      	bx	lr

080079a0 <HAL_DCMI_VsyncEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_VsyncEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 80079a0:	b480      	push	{r7}
 80079a2:	b083      	sub	sp, #12
 80079a4:	af00      	add	r7, sp, #0
 80079a6:	6078      	str	r0, [r7, #4]
  UNUSED(hdcmi);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_VsyncEventCallback could be implemented in the user file
   */
}
 80079a8:	bf00      	nop
 80079aa:	370c      	adds	r7, #12
 80079ac:	46bd      	mov	sp, r7
 80079ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b2:	4770      	bx	lr

080079b4 <DCMI_DMAXferCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 80079b4:	b480      	push	{r7}
 80079b6:	b08b      	sub	sp, #44	; 0x2c
 80079b8:	af00      	add	r7, sp, #0
 80079ba:	6078      	str	r0, [r7, #4]

  DCMI_HandleTypeDef *hdcmi = (DCMI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80079c0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t transfernumber;
  uint32_t transfercount;
  uint32_t transfersize ;

  /* Update Nodes destinations */
  if (hdcmi->XferSize != 0U)
 80079c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d061      	beq.n	8007a8e <DCMI_DMAXferCplt+0xda>
  {
    pbuff          = hdcmi->pBuffPtr;
 80079ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80079ce:	623b      	str	r3, [r7, #32]
    transfernumber = hdcmi->XferTransferNumber;
 80079d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079d4:	61fb      	str	r3, [r7, #28]
    transfercount  = hdcmi->XferCount;
 80079d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079da:	61bb      	str	r3, [r7, #24]
    transfersize   = hdcmi->XferSize;
 80079dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80079e0:	617b      	str	r3, [r7, #20]

    tmp1 = hdcmi->DMA_Handle->Instance->CLLR & DMA_CLLR_LA;
 80079e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 80079ea:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 80079ee:	4013      	ands	r3, r2
 80079f0:	613b      	str	r3, [r7, #16]
    tmp2 = hdcmi->DMA_Handle->Instance->CLBAR & DMA_CLBAR_LBA;
 80079f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	0c1b      	lsrs	r3, r3, #16
 80079fc:	041b      	lsls	r3, r3, #16
 80079fe:	60fb      	str	r3, [r7, #12]
    pnode = (DMA_NodeTypeDef *)(uint32_t)(tmp1 | tmp2);
 8007a00:	693a      	ldr	r2, [r7, #16]
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	4313      	orrs	r3, r2
 8007a06:	60bb      	str	r3, [r7, #8]

    if (hdcmi->XferCount > 1U)
 8007a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a0c:	2b01      	cmp	r3, #1
 8007a0e:	d910      	bls.n	8007a32 <DCMI_DMAXferCplt+0x7e>
    {
      pnode->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = pbuff + ((transfernumber - transfercount + 2U) * transfersize);
 8007a10:	69fa      	ldr	r2, [r7, #28]
 8007a12:	69bb      	ldr	r3, [r7, #24]
 8007a14:	1ad3      	subs	r3, r2, r3
 8007a16:	3302      	adds	r3, #2
 8007a18:	697a      	ldr	r2, [r7, #20]
 8007a1a:	fb03 f202 	mul.w	r2, r3, r2
 8007a1e:	6a3b      	ldr	r3, [r7, #32]
 8007a20:	441a      	add	r2, r3
 8007a22:	68bb      	ldr	r3, [r7, #8]
 8007a24:	611a      	str	r2, [r3, #16]
      hdcmi->XferCount--;
 8007a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a2a:	1e5a      	subs	r2, r3, #1
 8007a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a2e:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
    {
      hdcmi->State = HAL_DCMI_STATE_READY;
    }
  }
}
 8007a30:	e040      	b.n	8007ab4 <DCMI_DMAXferCplt+0x100>
    else if (hdcmi->XferCount == 1U)
 8007a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a36:	2b01      	cmp	r3, #1
 8007a38:	d109      	bne.n	8007a4e <DCMI_DMAXferCplt+0x9a>
      pnode->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = hdcmi->pBuffPtr;
 8007a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a3c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007a3e:	68bb      	ldr	r3, [r7, #8]
 8007a40:	611a      	str	r2, [r3, #16]
      hdcmi->XferCount--;
 8007a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a46:	1e5a      	subs	r2, r3, #1
 8007a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a4a:	639a      	str	r2, [r3, #56]	; 0x38
}
 8007a4c:	e032      	b.n	8007ab4 <DCMI_DMAXferCplt+0x100>
      pnode->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = hdcmi->pBuffPtr + hdcmi->XferSize;
 8007a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a50:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a56:	441a      	add	r2, r3
 8007a58:	68bb      	ldr	r3, [r7, #8]
 8007a5a:	611a      	str	r2, [r3, #16]
      if ((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_CONTINUOUS)
 8007a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	f003 0302 	and.w	r3, r3, #2
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d104      	bne.n	8007a74 <DCMI_DMAXferCplt+0xc0>
        hdcmi->XferCount = hdcmi->XferTransferNumber ;
 8007a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a6c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a70:	639a      	str	r2, [r3, #56]	; 0x38
 8007a72:	e003      	b.n	8007a7c <DCMI_DMAXferCplt+0xc8>
        hdcmi->State = HAL_DCMI_STATE_READY;
 8007a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a76:	2201      	movs	r2, #1
 8007a78:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_FRAME);
 8007a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	68da      	ldr	r2, [r3, #12]
 8007a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	f042 0201 	orr.w	r2, r2, #1
 8007a8a:	60da      	str	r2, [r3, #12]
}
 8007a8c:	e012      	b.n	8007ab4 <DCMI_DMAXferCplt+0x100>
    __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_FRAME);
 8007a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	68da      	ldr	r2, [r3, #12]
 8007a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	f042 0201 	orr.w	r2, r2, #1
 8007a9c:	60da      	str	r2, [r3, #12]
    if ((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 8007a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	f003 0302 	and.w	r3, r3, #2
 8007aa8:	2b02      	cmp	r3, #2
 8007aaa:	d103      	bne.n	8007ab4 <DCMI_DMAXferCplt+0x100>
      hdcmi->State = HAL_DCMI_STATE_READY;
 8007aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007aae:	2201      	movs	r2, #1
 8007ab0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
}
 8007ab4:	bf00      	nop
 8007ab6:	372c      	adds	r7, #44	; 0x2c
 8007ab8:	46bd      	mov	sp, r7
 8007aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007abe:	4770      	bx	lr

08007ac0 <DCMI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAError(DMA_HandleTypeDef *hdma)
{
 8007ac0:	b580      	push	{r7, lr}
 8007ac2:	b084      	sub	sp, #16
 8007ac4:	af00      	add	r7, sp, #0
 8007ac6:	6078      	str	r0, [r7, #4]
  DCMI_HandleTypeDef *hdcmi = (DCMI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007acc:	60fb      	str	r3, [r7, #12]

  if (hdcmi->DMA_Handle->ErrorCode != HAL_DMA_ERROR_ULE)
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007ad2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ad4:	2b02      	cmp	r3, #2
 8007ad6:	d009      	beq.n	8007aec <DCMI_DMAError+0x2c>
  {
    /* Initialize the DCMI state*/
    hdcmi->State = HAL_DCMI_STATE_READY;
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	2201      	movs	r2, #1
 8007adc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Set DCMI Error Code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_DMA;
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007ae4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	64da      	str	r2, [r3, #76]	; 0x4c
  /* DCMI error Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
  /*Call registered DCMI error callback*/
  hdcmi->ErrorCallback(hdcmi);
#else
  HAL_DCMI_ErrorCallback(hdcmi);
 8007aec:	68f8      	ldr	r0, [r7, #12]
 8007aee:	f7ff ff43 	bl	8007978 <HAL_DCMI_ErrorCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */

}
 8007af2:	bf00      	nop
 8007af4:	3710      	adds	r7, #16
 8007af6:	46bd      	mov	sp, r7
 8007af8:	bd80      	pop	{r7, pc}

08007afa <HAL_DMA_Start_IT>:
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *const hdma,
                                   uint32_t SrcAddress,
                                   uint32_t DstAddress,
                                   uint32_t SrcDataSize)
{
 8007afa:	b580      	push	{r7, lr}
 8007afc:	b084      	sub	sp, #16
 8007afe:	af00      	add	r7, sp, #0
 8007b00:	60f8      	str	r0, [r7, #12]
 8007b02:	60b9      	str	r1, [r7, #8]
 8007b04:	607a      	str	r2, [r7, #4]
 8007b06:	603b      	str	r3, [r7, #0]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d101      	bne.n	8007b12 <HAL_DMA_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007b0e:	2301      	movs	r3, #1
 8007b10:	e04f      	b.n	8007bb2 <HAL_DMA_Start_IT+0xb8>

  /* Check the parameters */
  assert_param(IS_DMA_BLOCK_SIZE(SrcDataSize));

  /* Process locked */
  __HAL_LOCK(hdma);
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8007b18:	2b01      	cmp	r3, #1
 8007b1a:	d101      	bne.n	8007b20 <HAL_DMA_Start_IT+0x26>
 8007b1c:	2302      	movs	r3, #2
 8007b1e:	e048      	b.n	8007bb2 <HAL_DMA_Start_IT+0xb8>
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	2201      	movs	r2, #1
 8007b24:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  /* Check DMA channel state */
  if (hdma->State == HAL_DMA_STATE_READY)
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8007b2e:	b2db      	uxtb	r3, r3
 8007b30:	2b01      	cmp	r3, #1
 8007b32:	d136      	bne.n	8007ba2 <HAL_DMA_Start_IT+0xa8>
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	2202      	movs	r2, #2
 8007b38:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	2200      	movs	r2, #0
 8007b40:	659a      	str	r2, [r3, #88]	; 0x58

    /* Configure the source address, destination address, the data size and clear flags */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, SrcDataSize);
 8007b42:	683b      	ldr	r3, [r7, #0]
 8007b44:	687a      	ldr	r2, [r7, #4]
 8007b46:	68b9      	ldr	r1, [r7, #8]
 8007b48:	68f8      	ldr	r0, [r7, #12]
 8007b4a:	f000 fa8b 	bl	8008064 <DMA_SetConfig>

    /* Enable common interrupts: Transfer Complete and Transfer Errors ITs */
    __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_DTE | DMA_IT_ULE | DMA_IT_USE | DMA_IT_TO));
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	695a      	ldr	r2, [r3, #20]
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	f442 42ba 	orr.w	r2, r2, #23808	; 0x5d00
 8007b5c:	615a      	str	r2, [r3, #20]

    /* Check half transfer complete callback */
    if (hdma->XferHalfCpltCallback != NULL)
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d007      	beq.n	8007b76 <HAL_DMA_Start_IT+0x7c>
    {
      /* If Half Transfer complete callback is set, enable the corresponding IT */
      __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	695a      	ldr	r2, [r3, #20]
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007b74:	615a      	str	r2, [r3, #20]
    }

    /* Check Half suspend callback */
    if (hdma->XferSuspendCallback != NULL)
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d007      	beq.n	8007b8e <HAL_DMA_Start_IT+0x94>
    {
      /* If Transfer suspend callback is set, enable the corresponding IT */
      __HAL_DMA_ENABLE_IT(hdma, DMA_IT_SUSP);
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	695a      	ldr	r2, [r3, #20]
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007b8c:	615a      	str	r2, [r3, #20]
    }

    /* Enable DMA channel */
    __HAL_DMA_ENABLE(hdma);
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	695a      	ldr	r2, [r3, #20]
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	f042 0201 	orr.w	r2, r2, #1
 8007b9c:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hdma);

    return HAL_ERROR;
  }

  return HAL_OK;
 8007b9e:	2300      	movs	r3, #0
 8007ba0:	e007      	b.n	8007bb2 <HAL_DMA_Start_IT+0xb8>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	2240      	movs	r2, #64	; 0x40
 8007ba6:	659a      	str	r2, [r3, #88]	; 0x58
    __HAL_UNLOCK(hdma);
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	2200      	movs	r2, #0
 8007bac:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    return HAL_ERROR;
 8007bb0:	2301      	movs	r3, #1
}
 8007bb2:	4618      	mov	r0, r3
 8007bb4:	3710      	adds	r7, #16
 8007bb6:	46bd      	mov	sp, r7
 8007bb8:	bd80      	pop	{r7, pc}

08007bba <HAL_DMA_Abort>:
  *         is suspended while a data transfer is on-going, the current data will be transferred and the channel will be
  *         effectively suspended only after the transfer of any on-going data is finished.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *const hdma)
{
 8007bba:	b580      	push	{r7, lr}
 8007bbc:	b084      	sub	sp, #16
 8007bbe:	af00      	add	r7, sp, #0
 8007bc0:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart =  HAL_GetTick();
 8007bc2:	f7ff f8e5 	bl	8006d90 <HAL_GetTick>
 8007bc6:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d101      	bne.n	8007bd2 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8007bce:	2301      	movs	r3, #1
 8007bd0:	e06b      	b.n	8007caa <HAL_DMA_Abort+0xf0>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8007bd8:	b2db      	uxtb	r3, r3
 8007bda:	2b02      	cmp	r3, #2
 8007bdc:	d008      	beq.n	8007bf0 <HAL_DMA_Abort+0x36>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	2220      	movs	r2, #32
 8007be2:	659a      	str	r2, [r3, #88]	; 0x58

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	2200      	movs	r2, #0
 8007be8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

    return HAL_ERROR;
 8007bec:	2301      	movs	r3, #1
 8007bee:	e05c      	b.n	8007caa <HAL_DMA_Abort+0xf0>
  }
  else
  {
    /* Suspend the channel */
    hdma->Instance->CCR |= DMA_CCR_SUSP;
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	695a      	ldr	r2, [r3, #20]
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	f042 0204 	orr.w	r2, r2, #4
 8007bfe:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_SUSPEND;
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	2205      	movs	r2, #5
 8007c04:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Check if the DMA Channel is suspended */
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 8007c08:	e020      	b.n	8007c4c <HAL_DMA_Abort+0x92>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 8007c0a:	f7ff f8c1 	bl	8006d90 <HAL_GetTick>
 8007c0e:	4602      	mov	r2, r0
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	1ad3      	subs	r3, r2, r3
 8007c14:	2b05      	cmp	r3, #5
 8007c16:	d919      	bls.n	8007c4c <HAL_DMA_Abort+0x92>
      {
        /* Update the DMA channel error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TIMEOUT;
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c1c:	f043 0210 	orr.w	r2, r3, #16
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	659a      	str	r2, [r3, #88]	; 0x58

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	2203      	movs	r2, #3
 8007c28:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007c30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d003      	beq.n	8007c40 <HAL_DMA_Abort+0x86>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007c3c:	2201      	movs	r2, #1
 8007c3e:	731a      	strb	r2, [r3, #12]
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	2200      	movs	r2, #0
 8007c44:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        return HAL_ERROR;
 8007c48:	2301      	movs	r3, #1
 8007c4a:	e02e      	b.n	8007caa <HAL_DMA_Abort+0xf0>
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	691b      	ldr	r3, [r3, #16]
 8007c52:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d0d7      	beq.n	8007c0a <HAL_DMA_Abort+0x50>
      }
    }

    /* Reset the channel */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	695a      	ldr	r2, [r3, #20]
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	f042 0202 	orr.w	r2, r2, #2
 8007c68:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	2204      	movs	r2, #4
 8007c6e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Clear all status flags */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	f44f 42fe 	mov.w	r2, #32512	; 0x7f00
 8007c7a:	60da      	str	r2, [r3, #12]
                                DMA_FLAG_TO));

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	2201      	movs	r2, #1
 8007c80:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007c88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d007      	beq.n	8007ca0 <HAL_DMA_Abort+0xe6>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007c94:	2201      	movs	r2, #1
 8007c96:	731a      	strb	r2, [r3, #12]

      /* Clear remaining data size to ensure loading linked-list from memory next start */
      hdma->Instance->CBR1 = 0U;
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	2200      	movs	r2, #0
 8007c9e:	649a      	str	r2, [r3, #72]	; 0x48
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	2200      	movs	r2, #0
 8007ca4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8007ca8:	2300      	movs	r3, #0
}
 8007caa:	4618      	mov	r0, r3
 8007cac:	3710      	adds	r7, #16
 8007cae:	46bd      	mov	sp, r7
 8007cb0:	bd80      	pop	{r7, pc}

08007cb2 <HAL_DMA_Abort_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *const hdma)
{
 8007cb2:	b480      	push	{r7}
 8007cb4:	b083      	sub	sp, #12
 8007cb6:	af00      	add	r7, sp, #0
 8007cb8:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d101      	bne.n	8007cc4 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8007cc0:	2301      	movs	r3, #1
 8007cc2:	e019      	b.n	8007cf8 <HAL_DMA_Abort_IT+0x46>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8007cca:	b2db      	uxtb	r3, r3
 8007ccc:	2b02      	cmp	r3, #2
 8007cce:	d004      	beq.n	8007cda <HAL_DMA_Abort_IT+0x28>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	2220      	movs	r2, #32
 8007cd4:	659a      	str	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8007cd6:	2301      	movs	r3, #1
 8007cd8:	e00e      	b.n	8007cf8 <HAL_DMA_Abort_IT+0x46>
  }
  else
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	2204      	movs	r2, #4
 8007cde:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Suspend the channel and activate suspend interrupt */
    hdma->Instance->CCR |= (DMA_CCR_SUSP | DMA_CCR_SUSPIE);
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	695b      	ldr	r3, [r3, #20]
 8007ce8:	687a      	ldr	r2, [r7, #4]
 8007cea:	6812      	ldr	r2, [r2, #0]
 8007cec:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8007cf0:	f043 0304 	orr.w	r3, r3, #4
 8007cf4:	6153      	str	r3, [r2, #20]
  }

  return HAL_OK;
 8007cf6:	2300      	movs	r3, #0
}
 8007cf8:	4618      	mov	r0, r3
 8007cfa:	370c      	adds	r7, #12
 8007cfc:	46bd      	mov	sp, r7
 8007cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d02:	4770      	bx	lr

08007d04 <HAL_DMA_IRQHandler>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *const hdma)
{
 8007d04:	b580      	push	{r7, lr}
 8007d06:	b084      	sub	sp, #16
 8007d08:	af00      	add	r7, sp, #0
 8007d0a:	6078      	str	r0, [r7, #4]
  DMA_TypeDef *p_dma_instance = GET_DMA_INSTANCE(hdma);
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8007d14:	f023 030f 	bic.w	r3, r3, #15
 8007d18:	60fb      	str	r3, [r7, #12]
  uint32_t global_it_flag =  1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007d22:	3b50      	subs	r3, #80	; 0x50
 8007d24:	09db      	lsrs	r3, r3, #7
 8007d26:	f003 031f 	and.w	r3, r3, #31
 8007d2a:	2201      	movs	r2, #1
 8007d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8007d30:	60bb      	str	r3, [r7, #8]

  /* Global Interrupt Flag management *********************************************************************************/
  if (IS_DMA_GLOBAL_ACTIVE_FLAG(p_dma_instance, global_it_flag) == 0U)
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	68da      	ldr	r2, [r3, #12]
 8007d36:	68bb      	ldr	r3, [r7, #8]
 8007d38:	4013      	ands	r3, r2
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	f000 8150 	beq.w	8007fe0 <HAL_DMA_IRQHandler+0x2dc>
  {
    return; /* the global interrupt flag for the current channel is down , nothing to do */
  }

  /* Data Transfer Error Interrupt management *************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_DTE) != 0U))
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	691b      	ldr	r3, [r3, #16]
 8007d46:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d011      	beq.n	8007d72 <HAL_DMA_IRQHandler+0x6e>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DTE) != 0U)
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	695b      	ldr	r3, [r3, #20]
 8007d54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d00a      	beq.n	8007d72 <HAL_DMA_IRQHandler+0x6e>
    {
      /* Clear the transfer error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_DTE);
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007d64:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DTE;
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d6a:	f043 0201 	orr.w	r2, r3, #1
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }

  /* Update Linked-list Error Interrupt management ********************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_ULE) != 0U))
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	691b      	ldr	r3, [r3, #16]
 8007d78:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d011      	beq.n	8007da4 <HAL_DMA_IRQHandler+0xa0>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_ULE) != 0U)
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	695b      	ldr	r3, [r3, #20]
 8007d86:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d00a      	beq.n	8007da4 <HAL_DMA_IRQHandler+0xa0>
    {
      /* Clear the update linked-list error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_ULE);
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007d96:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_ULE;
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d9c:	f043 0202 	orr.w	r2, r3, #2
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }

  /* User Setting Error Interrupt management **************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_USE) != 0U))
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	691b      	ldr	r3, [r3, #16]
 8007daa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d011      	beq.n	8007dd6 <HAL_DMA_IRQHandler+0xd2>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_USE) != 0U)
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	695b      	ldr	r3, [r3, #20]
 8007db8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d00a      	beq.n	8007dd6 <HAL_DMA_IRQHandler+0xd2>
    {
      /* Clear the user setting error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_USE);
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8007dc8:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_USE;
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007dce:	f043 0204 	orr.w	r2, r3, #4
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }

  /* Trigger Overrun Interrupt management *****************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TO) != 0U))
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	691b      	ldr	r3, [r3, #16]
 8007ddc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d011      	beq.n	8007e08 <HAL_DMA_IRQHandler+0x104>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TO) != 0U)
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	695b      	ldr	r3, [r3, #20]
 8007dea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d00a      	beq.n	8007e08 <HAL_DMA_IRQHandler+0x104>
    {
      /* Clear the trigger overrun flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_TO);
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8007dfa:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TO;
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e00:	f043 0208 	orr.w	r2, r3, #8
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }

  /* Half Transfer Complete Interrupt management **********************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_HT) != 0U))
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	691b      	ldr	r3, [r3, #16]
 8007e0e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d013      	beq.n	8007e3e <HAL_DMA_IRQHandler+0x13a>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	695b      	ldr	r3, [r3, #20]
 8007e1c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d00c      	beq.n	8007e3e <HAL_DMA_IRQHandler+0x13a>
    {
      /* Clear the half transfer flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_HT);
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007e2c:	60da      	str	r2, [r3, #12]

      /* Check half transfer complete callback */
      if (hdma->XferHalfCpltCallback != NULL)
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d003      	beq.n	8007e3e <HAL_DMA_IRQHandler+0x13a>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007e3a:	6878      	ldr	r0, [r7, #4]
 8007e3c:	4798      	blx	r3
      }
    }
  }

  /* Suspend Transfer Interrupt management ****************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_SUSP) != 0U))
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	691b      	ldr	r3, [r3, #16]
 8007e44:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d055      	beq.n	8007ef8 <HAL_DMA_IRQHandler+0x1f4>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_SUSP) != 0U)
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	695b      	ldr	r3, [r3, #20]
 8007e52:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d04e      	beq.n	8007ef8 <HAL_DMA_IRQHandler+0x1f4>
    {
      /* Clear the block transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_SUSP);
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8007e62:	60da      	str	r2, [r3, #12]

      /* Check DMA channel state */
      if (hdma->State == HAL_DMA_STATE_ABORT)
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8007e6a:	b2db      	uxtb	r3, r3
 8007e6c:	2b04      	cmp	r3, #4
 8007e6e:	d137      	bne.n	8007ee0 <HAL_DMA_IRQHandler+0x1dc>
      {
        /* Disable the suspend transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_SUSP);
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	695a      	ldr	r2, [r3, #20]
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007e7e:	615a      	str	r2, [r3, #20]

        /* Reset the channel internal state and reset the FIFO */
        hdma->Instance->CCR |= DMA_CCR_RESET;
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	695a      	ldr	r2, [r3, #20]
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	f042 0202 	orr.w	r2, r2, #2
 8007e8e:	615a      	str	r2, [r3, #20]

        if ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	695b      	ldr	r3, [r3, #20]
 8007e96:	f003 0301 	and.w	r3, r3, #1
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d004      	beq.n	8007ea8 <HAL_DMA_IRQHandler+0x1a4>
        {
          /* Update the DMA channel state */
          hdma->State = HAL_DMA_STATE_ERROR;
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	2203      	movs	r2, #3
 8007ea2:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 8007ea6:	e003      	b.n	8007eb0 <HAL_DMA_IRQHandler+0x1ac>
        }
        else
        {
          /* Update the DMA channel state */
          hdma->State = HAL_DMA_STATE_READY;
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	2201      	movs	r2, #1
 8007eac:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
        }

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007eb4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d003      	beq.n	8007ec4 <HAL_DMA_IRQHandler+0x1c0>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007ec0:	2201      	movs	r2, #1
 8007ec2:	731a      	strb	r2, [r3, #12]
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	2200      	movs	r2, #0
 8007ec8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        /* Check transfer abort callback */
        if (hdma->XferAbortCallback != NULL)
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	f000 8087 	beq.w	8007fe4 <HAL_DMA_IRQHandler+0x2e0>
        {
          /* Transfer abort callback */
          hdma->XferAbortCallback(hdma);
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007eda:	6878      	ldr	r0, [r7, #4]
 8007edc:	4798      	blx	r3
        }

        return;
 8007ede:	e081      	b.n	8007fe4 <HAL_DMA_IRQHandler+0x2e0>
      }
      else
      {
        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_SUSPEND;
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	2205      	movs	r2, #5
 8007ee4:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

        /* Check transfer suspend callback */
        if (hdma->XferSuspendCallback != NULL)
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d003      	beq.n	8007ef8 <HAL_DMA_IRQHandler+0x1f4>
        {
          /* Transfer suspend callback */
          hdma->XferSuspendCallback(hdma);
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ef4:	6878      	ldr	r0, [r7, #4]
 8007ef6:	4798      	blx	r3
      }
    }
  }

  /* Transfer Complete Interrupt management ***************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TC) != 0U))
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	691b      	ldr	r3, [r3, #16]
 8007efe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d039      	beq.n	8007f7a <HAL_DMA_IRQHandler+0x276>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	695b      	ldr	r3, [r3, #20]
 8007f0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d032      	beq.n	8007f7a <HAL_DMA_IRQHandler+0x276>
    {
      /* Check DMA channel transfer mode */
      if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007f18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d012      	beq.n	8007f46 <HAL_DMA_IRQHandler+0x242>
      {
        /* If linked-list transfer */
        if (hdma->Instance->CLLR == 0U)
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d116      	bne.n	8007f58 <HAL_DMA_IRQHandler+0x254>
        {
          if (hdma->Instance->CBR1 == 0U)
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d111      	bne.n	8007f58 <HAL_DMA_IRQHandler+0x254>
          {
            /* Update the DMA channel state */
            hdma->State = HAL_DMA_STATE_READY;
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	2201      	movs	r2, #1
 8007f38:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

            /* Update the linked-list queue state */
            hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007f40:	2201      	movs	r2, #1
 8007f42:	731a      	strb	r2, [r3, #12]
 8007f44:	e008      	b.n	8007f58 <HAL_DMA_IRQHandler+0x254>
        }
      }
      else
      {
        /* If normal transfer */
        if (hdma->Instance->CBR1 == 0U)
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d103      	bne.n	8007f58 <HAL_DMA_IRQHandler+0x254>
        {
          /* Update the DMA channel state */
          hdma->State = HAL_DMA_STATE_READY;
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	2201      	movs	r2, #1
 8007f54:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
        }
      }

      /* Clear TC and HT transfer flags */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT));
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	f44f 7240 	mov.w	r2, #768	; 0x300
 8007f60:	60da      	str	r2, [r3, #12]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	2200      	movs	r2, #0
 8007f66:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

      /* Check transfer complete callback */
      if (hdma->XferCpltCallback != NULL)
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d003      	beq.n	8007f7a <HAL_DMA_IRQHandler+0x276>
      {
        /* Channel Transfer Complete callback */
        hdma->XferCpltCallback(hdma);
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007f76:	6878      	ldr	r0, [r7, #4]
 8007f78:	4798      	blx	r3
      }
    }
  }

  /* Manage error case ************************************************************************************************/
  if (hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d031      	beq.n	8007fe6 <HAL_DMA_IRQHandler+0x2e2>
  {
    /* Reset the channel internal state and reset the FIFO */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	695a      	ldr	r2, [r3, #20]
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	f042 0202 	orr.w	r2, r2, #2
 8007f90:	615a      	str	r2, [r3, #20]

    if ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	695b      	ldr	r3, [r3, #20]
 8007f98:	f003 0301 	and.w	r3, r3, #1
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d004      	beq.n	8007faa <HAL_DMA_IRQHandler+0x2a6>
    {
      /* Update the DMA channel state */
      hdma->State = HAL_DMA_STATE_ERROR;
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	2203      	movs	r2, #3
 8007fa4:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 8007fa8:	e003      	b.n	8007fb2 <HAL_DMA_IRQHandler+0x2ae>
    }
    else
    {
      /* Update the DMA channel state */
      hdma->State = HAL_DMA_STATE_READY;
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	2201      	movs	r2, #1
 8007fae:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
    }

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007fb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d003      	beq.n	8007fc6 <HAL_DMA_IRQHandler+0x2c2>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007fc2:	2201      	movs	r2, #1
 8007fc4:	731a      	strb	r2, [r3, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	2200      	movs	r2, #0
 8007fca:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

    /* Check transfer error callback */
    if (hdma->XferErrorCallback != NULL)
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d007      	beq.n	8007fe6 <HAL_DMA_IRQHandler+0x2e2>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007fda:	6878      	ldr	r0, [r7, #4]
 8007fdc:	4798      	blx	r3
 8007fde:	e002      	b.n	8007fe6 <HAL_DMA_IRQHandler+0x2e2>
    return; /* the global interrupt flag for the current channel is down , nothing to do */
 8007fe0:	bf00      	nop
 8007fe2:	e000      	b.n	8007fe6 <HAL_DMA_IRQHandler+0x2e2>
        return;
 8007fe4:	bf00      	nop
    }
  }
}
 8007fe6:	3710      	adds	r7, #16
 8007fe8:	46bd      	mov	sp, r7
 8007fea:	bd80      	pop	{r7, pc}

08007fec <HAL_DMA_ConfigChannelAttributes>:
  * @param  ChannelAttributes : Specifies the DMA channel secure/privilege attributes.
  *                             This parameter can be a one or a combination of @ref DMA_Channel_Attributes.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_DMA_ConfigChannelAttributes(DMA_HandleTypeDef *const hdma, uint32_t ChannelAttributes)
{
 8007fec:	b480      	push	{r7}
 8007fee:	b085      	sub	sp, #20
 8007ff0:	af00      	add	r7, sp, #0
 8007ff2:	6078      	str	r0, [r7, #4]
 8007ff4:	6039      	str	r1, [r7, #0]
  DMA_TypeDef *p_dma_instance;
  uint32_t channel_idx;

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d101      	bne.n	8008000 <HAL_DMA_ConfigChannelAttributes+0x14>
  {
    return HAL_ERROR;
 8007ffc:	2301      	movs	r3, #1
 8007ffe:	e02b      	b.n	8008058 <HAL_DMA_ConfigChannelAttributes+0x6c>

  /* Check the parameters */
  assert_param(IS_DMA_ATTRIBUTES(ChannelAttributes));

  /* Get DMA instance */
  p_dma_instance = GET_DMA_INSTANCE(hdma);
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8008008:	f023 030f 	bic.w	r3, r3, #15
 800800c:	60fb      	str	r3, [r7, #12]

  /* Get channel index */
  channel_idx = 1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008016:	3b50      	subs	r3, #80	; 0x50
 8008018:	09db      	lsrs	r3, r3, #7
 800801a:	f003 031f 	and.w	r3, r3, #31
 800801e:	2201      	movs	r2, #1
 8008020:	fa02 f303 	lsl.w	r3, r2, r3
 8008024:	60bb      	str	r3, [r7, #8]

  /* Check DMA channel privilege attribute management */
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) == DMA_CHANNEL_ATTR_PRIV_MASK)
 8008026:	683b      	ldr	r3, [r7, #0]
 8008028:	f003 0310 	and.w	r3, r3, #16
 800802c:	2b00      	cmp	r3, #0
 800802e:	d012      	beq.n	8008056 <HAL_DMA_ConfigChannelAttributes+0x6a>
  {
    /* Configure DMA channel privilege attribute */
    if ((ChannelAttributes & DMA_CHANNEL_PRIV) == DMA_CHANNEL_PRIV)
 8008030:	683b      	ldr	r3, [r7, #0]
 8008032:	f003 0311 	and.w	r3, r3, #17
 8008036:	2b11      	cmp	r3, #17
 8008038:	d106      	bne.n	8008048 <HAL_DMA_ConfigChannelAttributes+0x5c>
    {
      p_dma_instance->PRIVCFGR |= channel_idx;
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	685a      	ldr	r2, [r3, #4]
 800803e:	68bb      	ldr	r3, [r7, #8]
 8008040:	431a      	orrs	r2, r3
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	605a      	str	r2, [r3, #4]
 8008046:	e006      	b.n	8008056 <HAL_DMA_ConfigChannelAttributes+0x6a>
    }
    else
    {
      p_dma_instance->PRIVCFGR &= (~channel_idx);
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	685a      	ldr	r2, [r3, #4]
 800804c:	68bb      	ldr	r3, [r7, #8]
 800804e:	43db      	mvns	r3, r3
 8008050:	401a      	ands	r2, r3
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	605a      	str	r2, [r3, #4]
      hdma->Instance->CTR1 &= (~DMA_CTR1_DSEC);
    }
  }
#endif /* defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  return HAL_OK;
 8008056:	2300      	movs	r3, #0
}
 8008058:	4618      	mov	r0, r3
 800805a:	3714      	adds	r7, #20
 800805c:	46bd      	mov	sp, r7
 800805e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008062:	4770      	bx	lr

08008064 <DMA_SetConfig>:
  */
static void DMA_SetConfig(DMA_HandleTypeDef const *const hdma,
                          uint32_t SrcAddress,
                          uint32_t DstAddress,
                          uint32_t SrcDataSize)
{
 8008064:	b480      	push	{r7}
 8008066:	b085      	sub	sp, #20
 8008068:	af00      	add	r7, sp, #0
 800806a:	60f8      	str	r0, [r7, #12]
 800806c:	60b9      	str	r1, [r7, #8]
 800806e:	607a      	str	r2, [r7, #4]
 8008070:	603b      	str	r3, [r7, #0]
  /* Configure the DMA channel data size */
  MODIFY_REG(hdma->Instance->CBR1, DMA_CBR1_BNDT, (SrcDataSize & DMA_CBR1_BNDT));
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008078:	0c1b      	lsrs	r3, r3, #16
 800807a:	041b      	lsls	r3, r3, #16
 800807c:	683a      	ldr	r2, [r7, #0]
 800807e:	b291      	uxth	r1, r2
 8008080:	68fa      	ldr	r2, [r7, #12]
 8008082:	6812      	ldr	r2, [r2, #0]
 8008084:	430b      	orrs	r3, r1
 8008086:	6493      	str	r3, [r2, #72]	; 0x48

  /* Clear all interrupt flags */
  __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	f44f 42fe 	mov.w	r2, #32512	; 0x7f00
 8008090:	60da      	str	r2, [r3, #12]
                       DMA_FLAG_TO);

  /* Configure DMA channel source address */
  hdma->Instance->CSAR = SrcAddress;
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	68ba      	ldr	r2, [r7, #8]
 8008098:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure DMA channel destination address */
  hdma->Instance->CDAR = DstAddress;
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	687a      	ldr	r2, [r7, #4]
 80080a0:	651a      	str	r2, [r3, #80]	; 0x50
}
 80080a2:	bf00      	nop
 80080a4:	3714      	adds	r7, #20
 80080a6:	46bd      	mov	sp, r7
 80080a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ac:	4770      	bx	lr
	...

080080b0 <HAL_DMAEx_List_Init>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_Init(DMA_HandleTypeDef *const hdma)
{
 80080b0:	b580      	push	{r7, lr}
 80080b2:	b084      	sub	sp, #16
 80080b4:	af00      	add	r7, sp, #0
 80080b6:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart = HAL_GetTick();
 80080b8:	f7fe fe6a 	bl	8006d90 <HAL_GetTick>
 80080bc:	60f8      	str	r0, [r7, #12]

  /* Check the DMA channel handle parameter */
  if (hdma == NULL)
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d101      	bne.n	80080c8 <HAL_DMAEx_List_Init+0x18>
  {
    return HAL_ERROR;
 80080c4:	2301      	movs	r3, #1
 80080c6:	e0dc      	b.n	8008282 <HAL_DMAEx_List_Init+0x1d2>
  assert_param(IS_DMA_PRIORITY(hdma->InitLinkedList.Priority));
  assert_param(IS_DMA_LINK_STEP_MODE(hdma->InitLinkedList.LinkStepMode));
  assert_param(IS_DMA_TCEM_LINKEDLIST_EVENT_MODE(hdma->InitLinkedList.TransferEventMode));
  assert_param(IS_DMA_LINKEDLIST_MODE(hdma->InitLinkedList.LinkedListMode));
  /* Check DMA channel instance */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	4a6f      	ldr	r2, [pc, #444]	; (800828c <HAL_DMAEx_List_Init+0x1dc>)
 80080ce:	4293      	cmp	r3, r2
 80080d0:	f000 809f 	beq.w	8008212 <HAL_DMAEx_List_Init+0x162>
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	4a6d      	ldr	r2, [pc, #436]	; (8008290 <HAL_DMAEx_List_Init+0x1e0>)
 80080da:	4293      	cmp	r3, r2
 80080dc:	f000 8099 	beq.w	8008212 <HAL_DMAEx_List_Init+0x162>
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	4a6b      	ldr	r2, [pc, #428]	; (8008294 <HAL_DMAEx_List_Init+0x1e4>)
 80080e6:	4293      	cmp	r3, r2
 80080e8:	f000 8093 	beq.w	8008212 <HAL_DMAEx_List_Init+0x162>
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	4a69      	ldr	r2, [pc, #420]	; (8008298 <HAL_DMAEx_List_Init+0x1e8>)
 80080f2:	4293      	cmp	r3, r2
 80080f4:	f000 808d 	beq.w	8008212 <HAL_DMAEx_List_Init+0x162>
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	4a67      	ldr	r2, [pc, #412]	; (800829c <HAL_DMAEx_List_Init+0x1ec>)
 80080fe:	4293      	cmp	r3, r2
 8008100:	f000 8087 	beq.w	8008212 <HAL_DMAEx_List_Init+0x162>
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	4a65      	ldr	r2, [pc, #404]	; (80082a0 <HAL_DMAEx_List_Init+0x1f0>)
 800810a:	4293      	cmp	r3, r2
 800810c:	f000 8081 	beq.w	8008212 <HAL_DMAEx_List_Init+0x162>
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	4a63      	ldr	r2, [pc, #396]	; (80082a4 <HAL_DMAEx_List_Init+0x1f4>)
 8008116:	4293      	cmp	r3, r2
 8008118:	d07b      	beq.n	8008212 <HAL_DMAEx_List_Init+0x162>
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	4a62      	ldr	r2, [pc, #392]	; (80082a8 <HAL_DMAEx_List_Init+0x1f8>)
 8008120:	4293      	cmp	r3, r2
 8008122:	d076      	beq.n	8008212 <HAL_DMAEx_List_Init+0x162>
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	4a60      	ldr	r2, [pc, #384]	; (80082ac <HAL_DMAEx_List_Init+0x1fc>)
 800812a:	4293      	cmp	r3, r2
 800812c:	d071      	beq.n	8008212 <HAL_DMAEx_List_Init+0x162>
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	4a5f      	ldr	r2, [pc, #380]	; (80082b0 <HAL_DMAEx_List_Init+0x200>)
 8008134:	4293      	cmp	r3, r2
 8008136:	d06c      	beq.n	8008212 <HAL_DMAEx_List_Init+0x162>
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	4a5d      	ldr	r2, [pc, #372]	; (80082b4 <HAL_DMAEx_List_Init+0x204>)
 800813e:	4293      	cmp	r3, r2
 8008140:	d067      	beq.n	8008212 <HAL_DMAEx_List_Init+0x162>
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	4a5c      	ldr	r2, [pc, #368]	; (80082b8 <HAL_DMAEx_List_Init+0x208>)
 8008148:	4293      	cmp	r3, r2
 800814a:	d062      	beq.n	8008212 <HAL_DMAEx_List_Init+0x162>
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	4a5a      	ldr	r2, [pc, #360]	; (80082bc <HAL_DMAEx_List_Init+0x20c>)
 8008152:	4293      	cmp	r3, r2
 8008154:	d05d      	beq.n	8008212 <HAL_DMAEx_List_Init+0x162>
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	4a59      	ldr	r2, [pc, #356]	; (80082c0 <HAL_DMAEx_List_Init+0x210>)
 800815c:	4293      	cmp	r3, r2
 800815e:	d058      	beq.n	8008212 <HAL_DMAEx_List_Init+0x162>
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	4a57      	ldr	r2, [pc, #348]	; (80082c4 <HAL_DMAEx_List_Init+0x214>)
 8008166:	4293      	cmp	r3, r2
 8008168:	d053      	beq.n	8008212 <HAL_DMAEx_List_Init+0x162>
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	4a56      	ldr	r2, [pc, #344]	; (80082c8 <HAL_DMAEx_List_Init+0x218>)
 8008170:	4293      	cmp	r3, r2
 8008172:	d04e      	beq.n	8008212 <HAL_DMAEx_List_Init+0x162>
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	4a54      	ldr	r2, [pc, #336]	; (80082cc <HAL_DMAEx_List_Init+0x21c>)
 800817a:	4293      	cmp	r3, r2
 800817c:	d049      	beq.n	8008212 <HAL_DMAEx_List_Init+0x162>
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	4a53      	ldr	r2, [pc, #332]	; (80082d0 <HAL_DMAEx_List_Init+0x220>)
 8008184:	4293      	cmp	r3, r2
 8008186:	d044      	beq.n	8008212 <HAL_DMAEx_List_Init+0x162>
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	4a51      	ldr	r2, [pc, #324]	; (80082d4 <HAL_DMAEx_List_Init+0x224>)
 800818e:	4293      	cmp	r3, r2
 8008190:	d03f      	beq.n	8008212 <HAL_DMAEx_List_Init+0x162>
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	4a50      	ldr	r2, [pc, #320]	; (80082d8 <HAL_DMAEx_List_Init+0x228>)
 8008198:	4293      	cmp	r3, r2
 800819a:	d03a      	beq.n	8008212 <HAL_DMAEx_List_Init+0x162>
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	4a4e      	ldr	r2, [pc, #312]	; (80082dc <HAL_DMAEx_List_Init+0x22c>)
 80081a2:	4293      	cmp	r3, r2
 80081a4:	d035      	beq.n	8008212 <HAL_DMAEx_List_Init+0x162>
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	4a4d      	ldr	r2, [pc, #308]	; (80082e0 <HAL_DMAEx_List_Init+0x230>)
 80081ac:	4293      	cmp	r3, r2
 80081ae:	d030      	beq.n	8008212 <HAL_DMAEx_List_Init+0x162>
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	4a4b      	ldr	r2, [pc, #300]	; (80082e4 <HAL_DMAEx_List_Init+0x234>)
 80081b6:	4293      	cmp	r3, r2
 80081b8:	d02b      	beq.n	8008212 <HAL_DMAEx_List_Init+0x162>
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	4a4a      	ldr	r2, [pc, #296]	; (80082e8 <HAL_DMAEx_List_Init+0x238>)
 80081c0:	4293      	cmp	r3, r2
 80081c2:	d026      	beq.n	8008212 <HAL_DMAEx_List_Init+0x162>
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	4a48      	ldr	r2, [pc, #288]	; (80082ec <HAL_DMAEx_List_Init+0x23c>)
 80081ca:	4293      	cmp	r3, r2
 80081cc:	d021      	beq.n	8008212 <HAL_DMAEx_List_Init+0x162>
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	4a47      	ldr	r2, [pc, #284]	; (80082f0 <HAL_DMAEx_List_Init+0x240>)
 80081d4:	4293      	cmp	r3, r2
 80081d6:	d01c      	beq.n	8008212 <HAL_DMAEx_List_Init+0x162>
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	4a45      	ldr	r2, [pc, #276]	; (80082f4 <HAL_DMAEx_List_Init+0x244>)
 80081de:	4293      	cmp	r3, r2
 80081e0:	d017      	beq.n	8008212 <HAL_DMAEx_List_Init+0x162>
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	4a44      	ldr	r2, [pc, #272]	; (80082f8 <HAL_DMAEx_List_Init+0x248>)
 80081e8:	4293      	cmp	r3, r2
 80081ea:	d012      	beq.n	8008212 <HAL_DMAEx_List_Init+0x162>
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	4a42      	ldr	r2, [pc, #264]	; (80082fc <HAL_DMAEx_List_Init+0x24c>)
 80081f2:	4293      	cmp	r3, r2
 80081f4:	d00d      	beq.n	8008212 <HAL_DMAEx_List_Init+0x162>
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	4a41      	ldr	r2, [pc, #260]	; (8008300 <HAL_DMAEx_List_Init+0x250>)
 80081fc:	4293      	cmp	r3, r2
 80081fe:	d008      	beq.n	8008212 <HAL_DMAEx_List_Init+0x162>
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	4a3f      	ldr	r2, [pc, #252]	; (8008304 <HAL_DMAEx_List_Init+0x254>)
 8008206:	4293      	cmp	r3, r2
 8008208:	d003      	beq.n	8008212 <HAL_DMAEx_List_Init+0x162>
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	4a3e      	ldr	r2, [pc, #248]	; (8008308 <HAL_DMAEx_List_Init+0x258>)
 8008210:	4293      	cmp	r3, r2
 8008212:	bf00      	nop
  {
    assert_param(IS_DMA_LINK_ALLOCATED_PORT(hdma->InitLinkedList.LinkAllocatedPort));
  }

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	2200      	movs	r2, #0
 8008218:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	2202      	movs	r2, #2
 8008220:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Disable the DMA channel */
  __HAL_DMA_DISABLE(hdma);
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	695a      	ldr	r2, [r3, #20]
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	f042 0206 	orr.w	r2, r2, #6
 8008232:	615a      	str	r2, [r3, #20]

  /* Check if the DMA channel is effectively disabled */
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 8008234:	e00f      	b.n	8008256 <HAL_DMAEx_List_Init+0x1a6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 8008236:	f7fe fdab 	bl	8006d90 <HAL_GetTick>
 800823a:	4602      	mov	r2, r0
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	1ad3      	subs	r3, r2, r3
 8008240:	2b05      	cmp	r3, #5
 8008242:	d908      	bls.n	8008256 <HAL_DMAEx_List_Init+0x1a6>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	2210      	movs	r2, #16
 8008248:	659a      	str	r2, [r3, #88]	; 0x58

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_ERROR;
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	2203      	movs	r2, #3
 800824e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

      return HAL_ERROR;
 8008252:	2301      	movs	r3, #1
 8008254:	e015      	b.n	8008282 <HAL_DMAEx_List_Init+0x1d2>
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	695b      	ldr	r3, [r3, #20]
 800825c:	f003 0301 	and.w	r3, r3, #1
 8008260:	2b00      	cmp	r3, #0
 8008262:	d1e8      	bne.n	8008236 <HAL_DMAEx_List_Init+0x186>
    }
  }

  /* Initialize the DMA channel registers */
  DMA_List_Init(hdma);
 8008264:	6878      	ldr	r0, [r7, #4]
 8008266:	f000 fa77 	bl	8008758 <DMA_List_Init>

  /* Update DMA channel operation mode */
  hdma->Mode = hdma->InitLinkedList.LinkedListMode;
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	651a      	str	r2, [r3, #80]	; 0x50

  /* Update the DMA channel error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	2200      	movs	r2, #0
 8008276:	659a      	str	r2, [r3, #88]	; 0x58

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_READY;
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	2201      	movs	r2, #1
 800827c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8008280:	2300      	movs	r3, #0
}
 8008282:	4618      	mov	r0, r3
 8008284:	3710      	adds	r7, #16
 8008286:	46bd      	mov	sp, r7
 8008288:	bd80      	pop	{r7, pc}
 800828a:	bf00      	nop
 800828c:	40020050 	.word	0x40020050
 8008290:	50020050 	.word	0x50020050
 8008294:	400200d0 	.word	0x400200d0
 8008298:	500200d0 	.word	0x500200d0
 800829c:	40020150 	.word	0x40020150
 80082a0:	50020150 	.word	0x50020150
 80082a4:	400201d0 	.word	0x400201d0
 80082a8:	500201d0 	.word	0x500201d0
 80082ac:	40020250 	.word	0x40020250
 80082b0:	50020250 	.word	0x50020250
 80082b4:	400202d0 	.word	0x400202d0
 80082b8:	500202d0 	.word	0x500202d0
 80082bc:	40020350 	.word	0x40020350
 80082c0:	50020350 	.word	0x50020350
 80082c4:	400203d0 	.word	0x400203d0
 80082c8:	500203d0 	.word	0x500203d0
 80082cc:	40020450 	.word	0x40020450
 80082d0:	50020450 	.word	0x50020450
 80082d4:	400204d0 	.word	0x400204d0
 80082d8:	500204d0 	.word	0x500204d0
 80082dc:	40020550 	.word	0x40020550
 80082e0:	50020550 	.word	0x50020550
 80082e4:	400205d0 	.word	0x400205d0
 80082e8:	500205d0 	.word	0x500205d0
 80082ec:	40020650 	.word	0x40020650
 80082f0:	50020650 	.word	0x50020650
 80082f4:	400206d0 	.word	0x400206d0
 80082f8:	500206d0 	.word	0x500206d0
 80082fc:	40020750 	.word	0x40020750
 8008300:	50020750 	.word	0x50020750
 8008304:	400207d0 	.word	0x400207d0
 8008308:	500207d0 	.word	0x500207d0

0800830c <HAL_DMAEx_List_Start_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_Start_IT(DMA_HandleTypeDef *const hdma)
{
 800830c:	b580      	push	{r7, lr}
 800830e:	b086      	sub	sp, #24
 8008310:	af00      	add	r7, sp, #0
 8008312:	6078      	str	r0, [r7, #4]
  HAL_DMA_StateTypeDef dma_state;
  uint32_t ccr_value;
  uint32_t cllr_mask;

  /* Check the DMA peripheral handle and the linked-list queue parameters */
  if ((hdma == NULL) || (hdma->LinkedListQueue == NULL))
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	2b00      	cmp	r3, #0
 8008318:	d003      	beq.n	8008322 <HAL_DMAEx_List_Start_IT+0x16>
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800831e:	2b00      	cmp	r3, #0
 8008320:	d101      	bne.n	8008326 <HAL_DMAEx_List_Start_IT+0x1a>
  {
    return HAL_ERROR;
 8008322:	2301      	movs	r3, #1
 8008324:	e082      	b.n	800842c <HAL_DMAEx_List_Start_IT+0x120>
  }

  /* Check DMA channel state */
  dma_state = hdma->State;
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800832c:	75fb      	strb	r3, [r7, #23]
  ccr_value = hdma->Instance->CCR & DMA_CCR_LSM;
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	695b      	ldr	r3, [r3, #20]
 8008334:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008338:	613b      	str	r3, [r7, #16]
  if ((dma_state == HAL_DMA_STATE_READY) || ((dma_state == HAL_DMA_STATE_BUSY) && (ccr_value != 0U)))
 800833a:	7dfb      	ldrb	r3, [r7, #23]
 800833c:	2b01      	cmp	r3, #1
 800833e:	d005      	beq.n	800834c <HAL_DMAEx_List_Start_IT+0x40>
 8008340:	7dfb      	ldrb	r3, [r7, #23]
 8008342:	2b02      	cmp	r3, #2
 8008344:	d16a      	bne.n	800841c <HAL_DMAEx_List_Start_IT+0x110>
 8008346:	693b      	ldr	r3, [r7, #16]
 8008348:	2b00      	cmp	r3, #0
 800834a:	d067      	beq.n	800841c <HAL_DMAEx_List_Start_IT+0x110>
  {
    /* Check DMA channel state is ready */
    if (hdma->State == HAL_DMA_STATE_READY)
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8008352:	b2db      	uxtb	r3, r3
 8008354:	2b01      	cmp	r3, #1
 8008356:	d157      	bne.n	8008408 <HAL_DMAEx_List_Start_IT+0xfc>
    {
      /* Process locked */
      __HAL_LOCK(hdma);
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800835e:	2b01      	cmp	r3, #1
 8008360:	d101      	bne.n	8008366 <HAL_DMAEx_List_Start_IT+0x5a>
 8008362:	2302      	movs	r3, #2
 8008364:	e062      	b.n	800842c <HAL_DMAEx_List_Start_IT+0x120>
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	2201      	movs	r2, #1
 800836a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

      /* Update the DMA channel and the queue states */
      hdma->State                  = HAL_DMA_STATE_BUSY;
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	2202      	movs	r2, #2
 8008372:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_BUSY;
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800837a:	2202      	movs	r2, #2
 800837c:	731a      	strb	r2, [r3, #12]

      /* Update the DMA channel and the queue error codes */
      hdma->ErrorCode                  = HAL_DMA_ERROR_NONE;
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	2200      	movs	r2, #0
 8008382:	659a      	str	r2, [r3, #88]	; 0x58
      hdma->LinkedListQueue->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008388:	2200      	movs	r2, #0
 800838a:	611a      	str	r2, [r3, #16]

      /* Enable common interrupts: Transfer Complete and Transfer Errors ITs */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_DTE | DMA_IT_ULE | DMA_IT_USE | DMA_IT_TO));
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	695a      	ldr	r2, [r3, #20]
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	f442 42ba 	orr.w	r2, r2, #23808	; 0x5d00
 800839a:	615a      	str	r2, [r3, #20]

      /* Check half transfer complete callback */
      if (hdma->XferHalfCpltCallback != NULL)
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d007      	beq.n	80083b4 <HAL_DMAEx_List_Start_IT+0xa8>
      {
        /* If half transfer complete callback is set, enable the corresponding IT */
        __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	695a      	ldr	r2, [r3, #20]
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80083b2:	615a      	str	r2, [r3, #20]
      }

      /* Check suspend callback */
      if (hdma->XferSuspendCallback != NULL)
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d007      	beq.n	80083cc <HAL_DMAEx_List_Start_IT+0xc0>
      {
        /* If transfer suspend callback is set, enable the corresponding IT */
        __HAL_DMA_ENABLE_IT(hdma, DMA_IT_SUSP);
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	695a      	ldr	r2, [r3, #20]
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80083ca:	615a      	str	r2, [r3, #20]
      }

      /* Get CLLR register mask and offset */
      DMA_List_GetCLLRNodeInfo(hdma->LinkedListQueue->Head, &cllr_mask, NULL);
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	f107 010c 	add.w	r1, r7, #12
 80083d6:	2200      	movs	r2, #0
 80083d8:	4618      	mov	r0, r3
 80083da:	f000 fcd3 	bl	8008d84 <DMA_List_GetCLLRNodeInfo>

      /* Update DMA registers for linked-list transfer */
      hdma->Instance->CLBAR = ((uint32_t)hdma->LinkedListQueue->Head & DMA_CLBAR_LBA);
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	4619      	mov	r1, r3
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	681a      	ldr	r2, [r3, #0]
 80083ea:	0c0b      	lsrs	r3, r1, #16
 80083ec:	041b      	lsls	r3, r3, #16
 80083ee:	6013      	str	r3, [r2, #0]
      hdma->Instance->CLLR  = ((uint32_t)hdma->LinkedListQueue->Head & DMA_CLLR_LA) | cllr_mask;
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	461a      	mov	r2, r3
 80083f8:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 80083fc:	4013      	ands	r3, r2
 80083fe:	68f9      	ldr	r1, [r7, #12]
 8008400:	687a      	ldr	r2, [r7, #4]
 8008402:	6812      	ldr	r2, [r2, #0]
 8008404:	430b      	orrs	r3, r1
 8008406:	67d3      	str	r3, [r2, #124]	; 0x7c
    }

    /* Enable DMA channel */
    __HAL_DMA_ENABLE(hdma);
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	695a      	ldr	r2, [r3, #20]
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	f042 0201 	orr.w	r2, r2, #1
 8008416:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hdma);

    return HAL_ERROR;
  }

  return HAL_OK;
 8008418:	2300      	movs	r3, #0
 800841a:	e007      	b.n	800842c <HAL_DMAEx_List_Start_IT+0x120>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	2240      	movs	r2, #64	; 0x40
 8008420:	659a      	str	r2, [r3, #88]	; 0x58
    __HAL_UNLOCK(hdma);
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	2200      	movs	r2, #0
 8008426:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    return HAL_ERROR;
 800842a:	2301      	movs	r3, #1
}
 800842c:	4618      	mov	r0, r3
 800842e:	3718      	adds	r7, #24
 8008430:	46bd      	mov	sp, r7
 8008432:	bd80      	pop	{r7, pc}

08008434 <HAL_DMAEx_List_BuildNode>:
  *                       configurations.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_BuildNode(DMA_NodeConfTypeDef const *const pNodeConfig,
                                           DMA_NodeTypeDef *const pNode)
{
 8008434:	b580      	push	{r7, lr}
 8008436:	b082      	sub	sp, #8
 8008438:	af00      	add	r7, sp, #0
 800843a:	6078      	str	r0, [r7, #4]
 800843c:	6039      	str	r1, [r7, #0]
  /* Check the node configuration and physical node parameters */
  if ((pNodeConfig == NULL) || (pNode == NULL))
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	2b00      	cmp	r3, #0
 8008442:	d002      	beq.n	800844a <HAL_DMAEx_List_BuildNode+0x16>
 8008444:	683b      	ldr	r3, [r7, #0]
 8008446:	2b00      	cmp	r3, #0
 8008448:	d101      	bne.n	800844e <HAL_DMAEx_List_BuildNode+0x1a>
  {
    return HAL_ERROR;
 800844a:	2301      	movs	r3, #1
 800844c:	e004      	b.n	8008458 <HAL_DMAEx_List_BuildNode+0x24>
  assert_param(IS_DMA_ATTRIBUTES(pNodeConfig->SrcSecure));
  assert_param(IS_DMA_ATTRIBUTES(pNodeConfig->DestSecure));
#endif /* defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  /* Build the DMA channel node */
  DMA_List_BuildNode(pNodeConfig, pNode);
 800844e:	6839      	ldr	r1, [r7, #0]
 8008450:	6878      	ldr	r0, [r7, #4]
 8008452:	f000 fad9 	bl	8008a08 <DMA_List_BuildNode>

  return HAL_OK;
 8008456:	2300      	movs	r3, #0
}
 8008458:	4618      	mov	r0, r3
 800845a:	3708      	adds	r7, #8
 800845c:	46bd      	mov	sp, r7
 800845e:	bd80      	pop	{r7, pc}

08008460 <HAL_DMAEx_List_InsertNode_Tail>:
  *                     configurations.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_InsertNode_Tail(DMA_QListTypeDef *const pQList,
                                                 DMA_NodeTypeDef *const pNewNode)
{
 8008460:	b580      	push	{r7, lr}
 8008462:	b08a      	sub	sp, #40	; 0x28
 8008464:	af00      	add	r7, sp, #0
 8008466:	6078      	str	r0, [r7, #4]
 8008468:	6039      	str	r1, [r7, #0]
  uint32_t cllr_mask;
  uint32_t cllr_offset;
  DMA_NodeInQInfoTypeDef node_info;

  /* Check the queue and the new node parameters */
  if ((pQList == NULL) || (pNewNode == NULL))
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	2b00      	cmp	r3, #0
 800846e:	d002      	beq.n	8008476 <HAL_DMAEx_List_InsertNode_Tail+0x16>
 8008470:	683b      	ldr	r3, [r7, #0]
 8008472:	2b00      	cmp	r3, #0
 8008474:	d101      	bne.n	800847a <HAL_DMAEx_List_InsertNode_Tail+0x1a>
  {
    return HAL_ERROR;
 8008476:	2301      	movs	r3, #1
 8008478:	e066      	b.n	8008548 <HAL_DMAEx_List_InsertNode_Tail+0xe8>
  }

  /* Check queue type */
  if (pQList->Type == QUEUE_TYPE_DYNAMIC)
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	695b      	ldr	r3, [r3, #20]
 800847e:	2b01      	cmp	r3, #1
 8008480:	d104      	bne.n	800848c <HAL_DMAEx_List_InsertNode_Tail+0x2c>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	2204      	movs	r2, #4
 8008486:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8008488:	2301      	movs	r3, #1
 800848a:	e05d      	b.n	8008548 <HAL_DMAEx_List_InsertNode_Tail+0xe8>
  }

  /* Check nodes base addresses */
  if (DMA_List_CheckNodesBaseAddresses(pQList->Head, pNewNode, NULL) != 0U)
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	2200      	movs	r2, #0
 8008492:	6839      	ldr	r1, [r7, #0]
 8008494:	4618      	mov	r0, r3
 8008496:	f000 fc09 	bl	8008cac <DMA_List_CheckNodesBaseAddresses>
 800849a:	4603      	mov	r3, r0
 800849c:	2b00      	cmp	r3, #0
 800849e:	d004      	beq.n	80084aa <HAL_DMAEx_List_InsertNode_Tail+0x4a>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_OUTOFRANGE;
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	2205      	movs	r2, #5
 80084a4:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 80084a6:	2301      	movs	r3, #1
 80084a8:	e04e      	b.n	8008548 <HAL_DMAEx_List_InsertNode_Tail+0xe8>
  }

  /* Check nodes types compatibility */
  if (DMA_List_CheckNodesTypes(pQList->Head, pNewNode, NULL) != 0U)
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	2200      	movs	r2, #0
 80084b0:	6839      	ldr	r1, [r7, #0]
 80084b2:	4618      	mov	r0, r3
 80084b4:	f000 fc2a 	bl	8008d0c <DMA_List_CheckNodesTypes>
 80084b8:	4603      	mov	r3, r0
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d004      	beq.n	80084c8 <HAL_DMAEx_List_InsertNode_Tail+0x68>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	2204      	movs	r2, #4
 80084c2:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 80084c4:	2301      	movs	r3, #1
 80084c6:	e03f      	b.n	8008548 <HAL_DMAEx_List_InsertNode_Tail+0xe8>
  }

  /* Empty queue */
  if (pQList->Head == NULL)
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d103      	bne.n	80084d8 <HAL_DMAEx_List_InsertNode_Tail+0x78>
  {
    pQList->Head = pNewNode;
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	683a      	ldr	r2, [r7, #0]
 80084d4:	601a      	str	r2, [r3, #0]
 80084d6:	e02b      	b.n	8008530 <HAL_DMAEx_List_InsertNode_Tail+0xd0>
  }
  /* Not empty queue */
  else
  {
    /* Get CLLR register mask and offset */
    DMA_List_GetCLLRNodeInfo(pNewNode, &cllr_mask, &cllr_offset);
 80084d8:	f107 0220 	add.w	r2, r7, #32
 80084dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80084e0:	4619      	mov	r1, r3
 80084e2:	6838      	ldr	r0, [r7, #0]
 80084e4:	f000 fc4e 	bl	8008d84 <DMA_List_GetCLLRNodeInfo>

    /* Find node and get its position in selected queue */
    node_info.cllr_offset = cllr_offset;
 80084e8:	6a3b      	ldr	r3, [r7, #32]
 80084ea:	60fb      	str	r3, [r7, #12]
    (void)DMA_List_FindNode(pQList, NULL, &node_info);
 80084ec:	f107 030c 	add.w	r3, r7, #12
 80084f0:	461a      	mov	r2, r3
 80084f2:	2100      	movs	r1, #0
 80084f4:	6878      	ldr	r0, [r7, #4]
 80084f6:	f000 fc75 	bl	8008de4 <DMA_List_FindNode>

    /* Check if queue is circular */
    if (pQList->FirstCircularNode != NULL)
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	685b      	ldr	r3, [r3, #4]
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d00b      	beq.n	800851a <HAL_DMAEx_List_InsertNode_Tail+0xba>
    {
      pNewNode->LinkRegisters[cllr_offset] = ((uint32_t)pQList->FirstCircularNode & DMA_CLLR_LA) | cllr_mask;
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	685b      	ldr	r3, [r3, #4]
 8008506:	461a      	mov	r2, r3
 8008508:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 800850c:	4013      	ands	r3, r2
 800850e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008510:	6a3a      	ldr	r2, [r7, #32]
 8008512:	4319      	orrs	r1, r3
 8008514:	683b      	ldr	r3, [r7, #0]
 8008516:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    }

    ((DMA_NodeTypeDef *)node_info.currentnode_addr)->LinkRegisters[cllr_offset] =
      ((uint32_t)pNewNode & DMA_CLLR_LA) | cllr_mask;
 800851a:	683a      	ldr	r2, [r7, #0]
 800851c:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 8008520:	4013      	ands	r3, r2
 8008522:	6a79      	ldr	r1, [r7, #36]	; 0x24
    ((DMA_NodeTypeDef *)node_info.currentnode_addr)->LinkRegisters[cllr_offset] =
 8008524:	69ba      	ldr	r2, [r7, #24]
 8008526:	4610      	mov	r0, r2
 8008528:	6a3a      	ldr	r2, [r7, #32]
      ((uint32_t)pNewNode & DMA_CLLR_LA) | cllr_mask;
 800852a:	430b      	orrs	r3, r1
    ((DMA_NodeTypeDef *)node_info.currentnode_addr)->LinkRegisters[cllr_offset] =
 800852c:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
  }

  /* Increment queue node number */
  pQList->NodeNumber++;
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	689b      	ldr	r3, [r3, #8]
 8008534:	1c5a      	adds	r2, r3, #1
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	609a      	str	r2, [r3, #8]

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	2200      	movs	r2, #0
 800853e:	611a      	str	r2, [r3, #16]

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_READY;
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	2201      	movs	r2, #1
 8008544:	731a      	strb	r2, [r3, #12]

  /* Prevent MISRA-C2012-Rule-2.2_b */
  UNUSED(node_info);

  return HAL_OK;
 8008546:	2300      	movs	r3, #0
}
 8008548:	4618      	mov	r0, r3
 800854a:	3728      	adds	r7, #40	; 0x28
 800854c:	46bd      	mov	sp, r7
 800854e:	bd80      	pop	{r7, pc}

08008550 <HAL_DMAEx_List_SetCircularModeConfig>:
  *                              registers configurations.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_SetCircularModeConfig(DMA_QListTypeDef *const pQList,
                                                       DMA_NodeTypeDef *const pFirstCircularNode)
{
 8008550:	b580      	push	{r7, lr}
 8008552:	b08a      	sub	sp, #40	; 0x28
 8008554:	af00      	add	r7, sp, #0
 8008556:	6078      	str	r0, [r7, #4]
 8008558:	6039      	str	r1, [r7, #0]
  uint32_t cllr_mask;
  uint32_t cllr_offset;
  DMA_NodeInQInfoTypeDef node_info;

  /* Check the queue and the first circular node parameters */
  if ((pQList == NULL) || (pFirstCircularNode == NULL))
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	2b00      	cmp	r3, #0
 800855e:	d002      	beq.n	8008566 <HAL_DMAEx_List_SetCircularModeConfig+0x16>
 8008560:	683b      	ldr	r3, [r7, #0]
 8008562:	2b00      	cmp	r3, #0
 8008564:	d101      	bne.n	800856a <HAL_DMAEx_List_SetCircularModeConfig+0x1a>
  {
    return HAL_ERROR;
 8008566:	2301      	movs	r3, #1
 8008568:	e05c      	b.n	8008624 <HAL_DMAEx_List_SetCircularModeConfig+0xd4>
  }

  /* Check the queue */
  if (pQList->Head == NULL)
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	2b00      	cmp	r3, #0
 8008570:	d104      	bne.n	800857c <HAL_DMAEx_List_SetCircularModeConfig+0x2c>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_EMPTY;
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	2202      	movs	r2, #2
 8008576:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8008578:	2301      	movs	r3, #1
 800857a:	e053      	b.n	8008624 <HAL_DMAEx_List_SetCircularModeConfig+0xd4>
  }

  /* Check queue circular mode */
  if (pQList->FirstCircularNode != NULL)
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	685b      	ldr	r3, [r3, #4]
 8008580:	2b00      	cmp	r3, #0
 8008582:	d00b      	beq.n	800859c <HAL_DMAEx_List_SetCircularModeConfig+0x4c>
  {
    if (pQList->FirstCircularNode == pFirstCircularNode)
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	685b      	ldr	r3, [r3, #4]
 8008588:	683a      	ldr	r2, [r7, #0]
 800858a:	429a      	cmp	r2, r3
 800858c:	d101      	bne.n	8008592 <HAL_DMAEx_List_SetCircularModeConfig+0x42>
    {
      return HAL_OK;
 800858e:	2300      	movs	r3, #0
 8008590:	e048      	b.n	8008624 <HAL_DMAEx_List_SetCircularModeConfig+0xd4>
    }
    else
    {
      /* Update the queue error code */
      pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	2204      	movs	r2, #4
 8008596:	611a      	str	r2, [r3, #16]

      return HAL_ERROR;
 8008598:	2301      	movs	r3, #1
 800859a:	e043      	b.n	8008624 <HAL_DMAEx_List_SetCircularModeConfig+0xd4>
    }
  }

  /* Check queue type */
  if (pQList->Type == QUEUE_TYPE_DYNAMIC)
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	695b      	ldr	r3, [r3, #20]
 80085a0:	2b01      	cmp	r3, #1
 80085a2:	d104      	bne.n	80085ae <HAL_DMAEx_List_SetCircularModeConfig+0x5e>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	2204      	movs	r2, #4
 80085a8:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 80085aa:	2301      	movs	r3, #1
 80085ac:	e03a      	b.n	8008624 <HAL_DMAEx_List_SetCircularModeConfig+0xd4>
  }

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_BUSY;
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	2202      	movs	r2, #2
 80085b2:	731a      	strb	r2, [r3, #12]

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	2200      	movs	r2, #0
 80085b8:	611a      	str	r2, [r3, #16]

  /* Get CLLR register mask and offset */
  DMA_List_GetCLLRNodeInfo(pFirstCircularNode, &cllr_mask, &cllr_offset);
 80085ba:	f107 0220 	add.w	r2, r7, #32
 80085be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80085c2:	4619      	mov	r1, r3
 80085c4:	6838      	ldr	r0, [r7, #0]
 80085c6:	f000 fbdd 	bl	8008d84 <DMA_List_GetCLLRNodeInfo>

  /* Find the first circular node and get its position in selected queue */
  node_info.cllr_offset = cllr_offset;
 80085ca:	6a3b      	ldr	r3, [r7, #32]
 80085cc:	60fb      	str	r3, [r7, #12]
  if (DMA_List_FindNode(pQList, pFirstCircularNode, &node_info) == 0U)
 80085ce:	f107 030c 	add.w	r3, r7, #12
 80085d2:	461a      	mov	r2, r3
 80085d4:	6839      	ldr	r1, [r7, #0]
 80085d6:	6878      	ldr	r0, [r7, #4]
 80085d8:	f000 fc04 	bl	8008de4 <DMA_List_FindNode>
 80085dc:	4603      	mov	r3, r0
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d11c      	bne.n	800861c <HAL_DMAEx_List_SetCircularModeConfig+0xcc>
  {
    /* Find the last queue node and get its position in selected queue */
    (void)DMA_List_FindNode(pQList, NULL, &node_info);
 80085e2:	f107 030c 	add.w	r3, r7, #12
 80085e6:	461a      	mov	r2, r3
 80085e8:	2100      	movs	r1, #0
 80085ea:	6878      	ldr	r0, [r7, #4]
 80085ec:	f000 fbfa 	bl	8008de4 <DMA_List_FindNode>

    /* Set circular mode */
    ((DMA_NodeTypeDef *)(node_info.currentnode_addr))->LinkRegisters[cllr_offset] =
      ((uint32_t)pFirstCircularNode & DMA_CLLR_LA) | cllr_mask;
 80085f0:	683a      	ldr	r2, [r7, #0]
 80085f2:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 80085f6:	4013      	ands	r3, r2
 80085f8:	6a79      	ldr	r1, [r7, #36]	; 0x24
    ((DMA_NodeTypeDef *)(node_info.currentnode_addr))->LinkRegisters[cllr_offset] =
 80085fa:	69ba      	ldr	r2, [r7, #24]
 80085fc:	4610      	mov	r0, r2
 80085fe:	6a3a      	ldr	r2, [r7, #32]
      ((uint32_t)pFirstCircularNode & DMA_CLLR_LA) | cllr_mask;
 8008600:	430b      	orrs	r3, r1
    ((DMA_NodeTypeDef *)(node_info.currentnode_addr))->LinkRegisters[cllr_offset] =
 8008602:	f840 3022 	str.w	r3, [r0, r2, lsl #2]

    /* Update first circular node in queue */
    pQList->FirstCircularNode = pFirstCircularNode;
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	683a      	ldr	r2, [r7, #0]
 800860a:	605a      	str	r2, [r3, #4]

    return HAL_ERROR;
  }

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	2200      	movs	r2, #0
 8008610:	611a      	str	r2, [r3, #16]

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_READY;
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	2201      	movs	r2, #1
 8008616:	731a      	strb	r2, [r3, #12]

  /* Prevent MISRA-C2012-Rule-2.2_b */
  UNUSED(node_info);

  return HAL_OK;
 8008618:	2300      	movs	r3, #0
 800861a:	e003      	b.n	8008624 <HAL_DMAEx_List_SetCircularModeConfig+0xd4>
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NOTFOUND;
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	2206      	movs	r2, #6
 8008620:	611a      	str	r2, [r3, #16]
    return HAL_ERROR;
 8008622:	2301      	movs	r3, #1
}
 8008624:	4618      	mov	r0, r3
 8008626:	3728      	adds	r7, #40	; 0x28
 8008628:	46bd      	mov	sp, r7
 800862a:	bd80      	pop	{r7, pc}

0800862c <HAL_DMAEx_List_LinkQ>:
  * @param  pQList : Pointer to a DMA_QListTypeDef structure that contains queue information.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_LinkQ(DMA_HandleTypeDef *const hdma,
                                       DMA_QListTypeDef *const pQList)
{
 800862c:	b480      	push	{r7}
 800862e:	b085      	sub	sp, #20
 8008630:	af00      	add	r7, sp, #0
 8008632:	6078      	str	r0, [r7, #4]
 8008634:	6039      	str	r1, [r7, #0]
  HAL_DMA_StateTypeDef state;

  /* Check the DMA channel handle and the queue parameters */
  if ((hdma == NULL) || (pQList == NULL))
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	2b00      	cmp	r3, #0
 800863a:	d002      	beq.n	8008642 <HAL_DMAEx_List_LinkQ+0x16>
 800863c:	683b      	ldr	r3, [r7, #0]
 800863e:	2b00      	cmp	r3, #0
 8008640:	d101      	bne.n	8008646 <HAL_DMAEx_List_LinkQ+0x1a>
  {
    return HAL_ERROR;
 8008642:	2301      	movs	r3, #1
 8008644:	e072      	b.n	800872c <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Get DMA state */
  state = hdma->State;
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800864c:	73fb      	strb	r3, [r7, #15]

  /* Check DMA channel state */
  if ((hdma->State == HAL_DMA_STATE_BUSY) || (state == HAL_DMA_STATE_SUSPEND))
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8008654:	b2db      	uxtb	r3, r3
 8008656:	2b02      	cmp	r3, #2
 8008658:	d002      	beq.n	8008660 <HAL_DMAEx_List_LinkQ+0x34>
 800865a:	7bfb      	ldrb	r3, [r7, #15]
 800865c:	2b05      	cmp	r3, #5
 800865e:	d108      	bne.n	8008672 <HAL_DMAEx_List_LinkQ+0x46>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	2240      	movs	r2, #64	; 0x40
 8008664:	659a      	str	r2, [r3, #88]	; 0x58

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	2200      	movs	r2, #0
 800866a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

    return HAL_ERROR;
 800866e:	2301      	movs	r3, #1
 8008670:	e05c      	b.n	800872c <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Check queue state */
  if (pQList->State == HAL_DMA_QUEUE_STATE_BUSY)
 8008672:	683b      	ldr	r3, [r7, #0]
 8008674:	7b1b      	ldrb	r3, [r3, #12]
 8008676:	b2db      	uxtb	r3, r3
 8008678:	2b02      	cmp	r3, #2
 800867a:	d104      	bne.n	8008686 <HAL_DMAEx_List_LinkQ+0x5a>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_BUSY;
 800867c:	683b      	ldr	r3, [r7, #0]
 800867e:	2201      	movs	r2, #1
 8008680:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8008682:	2301      	movs	r3, #1
 8008684:	e052      	b.n	800872c <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Check linearity compatibility */
  if ((IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) == 0U) &&
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	4a2b      	ldr	r2, [pc, #172]	; (8008738 <HAL_DMAEx_List_LinkQ+0x10c>)
 800868c:	4293      	cmp	r3, r2
 800868e:	d022      	beq.n	80086d6 <HAL_DMAEx_List_LinkQ+0xaa>
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	4a29      	ldr	r2, [pc, #164]	; (800873c <HAL_DMAEx_List_LinkQ+0x110>)
 8008696:	4293      	cmp	r3, r2
 8008698:	d01d      	beq.n	80086d6 <HAL_DMAEx_List_LinkQ+0xaa>
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	4a28      	ldr	r2, [pc, #160]	; (8008740 <HAL_DMAEx_List_LinkQ+0x114>)
 80086a0:	4293      	cmp	r3, r2
 80086a2:	d018      	beq.n	80086d6 <HAL_DMAEx_List_LinkQ+0xaa>
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	4a26      	ldr	r2, [pc, #152]	; (8008744 <HAL_DMAEx_List_LinkQ+0x118>)
 80086aa:	4293      	cmp	r3, r2
 80086ac:	d013      	beq.n	80086d6 <HAL_DMAEx_List_LinkQ+0xaa>
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	4a25      	ldr	r2, [pc, #148]	; (8008748 <HAL_DMAEx_List_LinkQ+0x11c>)
 80086b4:	4293      	cmp	r3, r2
 80086b6:	d00e      	beq.n	80086d6 <HAL_DMAEx_List_LinkQ+0xaa>
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	4a23      	ldr	r2, [pc, #140]	; (800874c <HAL_DMAEx_List_LinkQ+0x120>)
 80086be:	4293      	cmp	r3, r2
 80086c0:	d009      	beq.n	80086d6 <HAL_DMAEx_List_LinkQ+0xaa>
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	4a22      	ldr	r2, [pc, #136]	; (8008750 <HAL_DMAEx_List_LinkQ+0x124>)
 80086c8:	4293      	cmp	r3, r2
 80086ca:	d004      	beq.n	80086d6 <HAL_DMAEx_List_LinkQ+0xaa>
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	4a20      	ldr	r2, [pc, #128]	; (8008754 <HAL_DMAEx_List_LinkQ+0x128>)
 80086d2:	4293      	cmp	r3, r2
 80086d4:	d101      	bne.n	80086da <HAL_DMAEx_List_LinkQ+0xae>
 80086d6:	2301      	movs	r3, #1
 80086d8:	e000      	b.n	80086dc <HAL_DMAEx_List_LinkQ+0xb0>
 80086da:	2300      	movs	r3, #0
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d10b      	bne.n	80086f8 <HAL_DMAEx_List_LinkQ+0xcc>
      ((pQList->Head->NodeInfo & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR))
 80086e0:	683b      	ldr	r3, [r7, #0]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	6a1b      	ldr	r3, [r3, #32]
 80086e6:	f003 0302 	and.w	r3, r3, #2
  if ((IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) == 0U) &&
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d004      	beq.n	80086f8 <HAL_DMAEx_List_LinkQ+0xcc>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_UNSUPPORTED;
 80086ee:	683b      	ldr	r3, [r7, #0]
 80086f0:	2203      	movs	r2, #3
 80086f2:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 80086f4:	2301      	movs	r3, #1
 80086f6:	e019      	b.n	800872c <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Check circularity compatibility */
  if (hdma->Mode == DMA_LINKEDLIST_CIRCULAR)
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80086fc:	2b81      	cmp	r3, #129	; 0x81
 80086fe:	d108      	bne.n	8008712 <HAL_DMAEx_List_LinkQ+0xe6>
  {
    /* Check first circular node */
    if (pQList->FirstCircularNode == NULL)
 8008700:	683b      	ldr	r3, [r7, #0]
 8008702:	685b      	ldr	r3, [r3, #4]
 8008704:	2b00      	cmp	r3, #0
 8008706:	d10d      	bne.n	8008724 <HAL_DMAEx_List_LinkQ+0xf8>
    {
      /* Update the queue error code */
      pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8008708:	683b      	ldr	r3, [r7, #0]
 800870a:	2204      	movs	r2, #4
 800870c:	611a      	str	r2, [r3, #16]

      return HAL_ERROR;
 800870e:	2301      	movs	r3, #1
 8008710:	e00c      	b.n	800872c <HAL_DMAEx_List_LinkQ+0x100>
    }
  }
  else
  {
    /* Check first circular node */
    if (pQList->FirstCircularNode != NULL)
 8008712:	683b      	ldr	r3, [r7, #0]
 8008714:	685b      	ldr	r3, [r3, #4]
 8008716:	2b00      	cmp	r3, #0
 8008718:	d004      	beq.n	8008724 <HAL_DMAEx_List_LinkQ+0xf8>
    {
      /* Update the queue error code */
      pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 800871a:	683b      	ldr	r3, [r7, #0]
 800871c:	2204      	movs	r2, #4
 800871e:	611a      	str	r2, [r3, #16]

      return HAL_ERROR;
 8008720:	2301      	movs	r3, #1
 8008722:	e003      	b.n	800872c <HAL_DMAEx_List_LinkQ+0x100>
    }
  }

  /* Register queue to DMA handle */
  hdma->LinkedListQueue = pQList;
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	683a      	ldr	r2, [r7, #0]
 8008728:	675a      	str	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800872a:	2300      	movs	r3, #0
}
 800872c:	4618      	mov	r0, r3
 800872e:	3714      	adds	r7, #20
 8008730:	46bd      	mov	sp, r7
 8008732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008736:	4770      	bx	lr
 8008738:	40020650 	.word	0x40020650
 800873c:	50020650 	.word	0x50020650
 8008740:	400206d0 	.word	0x400206d0
 8008744:	500206d0 	.word	0x500206d0
 8008748:	40020750 	.word	0x40020750
 800874c:	50020750 	.word	0x50020750
 8008750:	400207d0 	.word	0x400207d0
 8008754:	500207d0 	.word	0x500207d0

08008758 <DMA_List_Init>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
static void DMA_List_Init(DMA_HandleTypeDef const *const hdma)
{
 8008758:	b480      	push	{r7}
 800875a:	b085      	sub	sp, #20
 800875c:	af00      	add	r7, sp, #0
 800875e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Prepare DMA Channel Control Register (CCR) value */
  tmpreg = hdma->InitLinkedList.Priority | hdma->InitLinkedList.LinkStepMode;
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008768:	4313      	orrs	r3, r2
 800876a:	60fb      	str	r3, [r7, #12]

  /* Check DMA channel instance */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	4a85      	ldr	r2, [pc, #532]	; (8008988 <DMA_List_Init+0x230>)
 8008772:	4293      	cmp	r3, r2
 8008774:	f000 80a0 	beq.w	80088b8 <DMA_List_Init+0x160>
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	4a83      	ldr	r2, [pc, #524]	; (800898c <DMA_List_Init+0x234>)
 800877e:	4293      	cmp	r3, r2
 8008780:	f000 809a 	beq.w	80088b8 <DMA_List_Init+0x160>
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	4a81      	ldr	r2, [pc, #516]	; (8008990 <DMA_List_Init+0x238>)
 800878a:	4293      	cmp	r3, r2
 800878c:	f000 8094 	beq.w	80088b8 <DMA_List_Init+0x160>
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	4a7f      	ldr	r2, [pc, #508]	; (8008994 <DMA_List_Init+0x23c>)
 8008796:	4293      	cmp	r3, r2
 8008798:	f000 808e 	beq.w	80088b8 <DMA_List_Init+0x160>
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	4a7d      	ldr	r2, [pc, #500]	; (8008998 <DMA_List_Init+0x240>)
 80087a2:	4293      	cmp	r3, r2
 80087a4:	f000 8088 	beq.w	80088b8 <DMA_List_Init+0x160>
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	4a7b      	ldr	r2, [pc, #492]	; (800899c <DMA_List_Init+0x244>)
 80087ae:	4293      	cmp	r3, r2
 80087b0:	f000 8082 	beq.w	80088b8 <DMA_List_Init+0x160>
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	4a79      	ldr	r2, [pc, #484]	; (80089a0 <DMA_List_Init+0x248>)
 80087ba:	4293      	cmp	r3, r2
 80087bc:	d07c      	beq.n	80088b8 <DMA_List_Init+0x160>
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	4a78      	ldr	r2, [pc, #480]	; (80089a4 <DMA_List_Init+0x24c>)
 80087c4:	4293      	cmp	r3, r2
 80087c6:	d077      	beq.n	80088b8 <DMA_List_Init+0x160>
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	4a76      	ldr	r2, [pc, #472]	; (80089a8 <DMA_List_Init+0x250>)
 80087ce:	4293      	cmp	r3, r2
 80087d0:	d072      	beq.n	80088b8 <DMA_List_Init+0x160>
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	4a75      	ldr	r2, [pc, #468]	; (80089ac <DMA_List_Init+0x254>)
 80087d8:	4293      	cmp	r3, r2
 80087da:	d06d      	beq.n	80088b8 <DMA_List_Init+0x160>
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	4a73      	ldr	r2, [pc, #460]	; (80089b0 <DMA_List_Init+0x258>)
 80087e2:	4293      	cmp	r3, r2
 80087e4:	d068      	beq.n	80088b8 <DMA_List_Init+0x160>
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	4a72      	ldr	r2, [pc, #456]	; (80089b4 <DMA_List_Init+0x25c>)
 80087ec:	4293      	cmp	r3, r2
 80087ee:	d063      	beq.n	80088b8 <DMA_List_Init+0x160>
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	4a70      	ldr	r2, [pc, #448]	; (80089b8 <DMA_List_Init+0x260>)
 80087f6:	4293      	cmp	r3, r2
 80087f8:	d05e      	beq.n	80088b8 <DMA_List_Init+0x160>
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	4a6f      	ldr	r2, [pc, #444]	; (80089bc <DMA_List_Init+0x264>)
 8008800:	4293      	cmp	r3, r2
 8008802:	d059      	beq.n	80088b8 <DMA_List_Init+0x160>
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	4a6d      	ldr	r2, [pc, #436]	; (80089c0 <DMA_List_Init+0x268>)
 800880a:	4293      	cmp	r3, r2
 800880c:	d054      	beq.n	80088b8 <DMA_List_Init+0x160>
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	4a6c      	ldr	r2, [pc, #432]	; (80089c4 <DMA_List_Init+0x26c>)
 8008814:	4293      	cmp	r3, r2
 8008816:	d04f      	beq.n	80088b8 <DMA_List_Init+0x160>
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	4a6a      	ldr	r2, [pc, #424]	; (80089c8 <DMA_List_Init+0x270>)
 800881e:	4293      	cmp	r3, r2
 8008820:	d04a      	beq.n	80088b8 <DMA_List_Init+0x160>
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	4a69      	ldr	r2, [pc, #420]	; (80089cc <DMA_List_Init+0x274>)
 8008828:	4293      	cmp	r3, r2
 800882a:	d045      	beq.n	80088b8 <DMA_List_Init+0x160>
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	4a67      	ldr	r2, [pc, #412]	; (80089d0 <DMA_List_Init+0x278>)
 8008832:	4293      	cmp	r3, r2
 8008834:	d040      	beq.n	80088b8 <DMA_List_Init+0x160>
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	4a66      	ldr	r2, [pc, #408]	; (80089d4 <DMA_List_Init+0x27c>)
 800883c:	4293      	cmp	r3, r2
 800883e:	d03b      	beq.n	80088b8 <DMA_List_Init+0x160>
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	4a64      	ldr	r2, [pc, #400]	; (80089d8 <DMA_List_Init+0x280>)
 8008846:	4293      	cmp	r3, r2
 8008848:	d036      	beq.n	80088b8 <DMA_List_Init+0x160>
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	4a63      	ldr	r2, [pc, #396]	; (80089dc <DMA_List_Init+0x284>)
 8008850:	4293      	cmp	r3, r2
 8008852:	d031      	beq.n	80088b8 <DMA_List_Init+0x160>
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	4a61      	ldr	r2, [pc, #388]	; (80089e0 <DMA_List_Init+0x288>)
 800885a:	4293      	cmp	r3, r2
 800885c:	d02c      	beq.n	80088b8 <DMA_List_Init+0x160>
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	4a60      	ldr	r2, [pc, #384]	; (80089e4 <DMA_List_Init+0x28c>)
 8008864:	4293      	cmp	r3, r2
 8008866:	d027      	beq.n	80088b8 <DMA_List_Init+0x160>
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	4a5e      	ldr	r2, [pc, #376]	; (80089e8 <DMA_List_Init+0x290>)
 800886e:	4293      	cmp	r3, r2
 8008870:	d022      	beq.n	80088b8 <DMA_List_Init+0x160>
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	4a5d      	ldr	r2, [pc, #372]	; (80089ec <DMA_List_Init+0x294>)
 8008878:	4293      	cmp	r3, r2
 800887a:	d01d      	beq.n	80088b8 <DMA_List_Init+0x160>
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	4a5b      	ldr	r2, [pc, #364]	; (80089f0 <DMA_List_Init+0x298>)
 8008882:	4293      	cmp	r3, r2
 8008884:	d018      	beq.n	80088b8 <DMA_List_Init+0x160>
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	4a5a      	ldr	r2, [pc, #360]	; (80089f4 <DMA_List_Init+0x29c>)
 800888c:	4293      	cmp	r3, r2
 800888e:	d013      	beq.n	80088b8 <DMA_List_Init+0x160>
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	4a58      	ldr	r2, [pc, #352]	; (80089f8 <DMA_List_Init+0x2a0>)
 8008896:	4293      	cmp	r3, r2
 8008898:	d00e      	beq.n	80088b8 <DMA_List_Init+0x160>
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	4a57      	ldr	r2, [pc, #348]	; (80089fc <DMA_List_Init+0x2a4>)
 80088a0:	4293      	cmp	r3, r2
 80088a2:	d009      	beq.n	80088b8 <DMA_List_Init+0x160>
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	4a55      	ldr	r2, [pc, #340]	; (8008a00 <DMA_List_Init+0x2a8>)
 80088aa:	4293      	cmp	r3, r2
 80088ac:	d004      	beq.n	80088b8 <DMA_List_Init+0x160>
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	4a54      	ldr	r2, [pc, #336]	; (8008a04 <DMA_List_Init+0x2ac>)
 80088b4:	4293      	cmp	r3, r2
 80088b6:	d101      	bne.n	80088bc <DMA_List_Init+0x164>
 80088b8:	2301      	movs	r3, #1
 80088ba:	e000      	b.n	80088be <DMA_List_Init+0x166>
 80088bc:	2300      	movs	r3, #0
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d004      	beq.n	80088cc <DMA_List_Init+0x174>
  {
    tmpreg |= hdma->InitLinkedList.LinkAllocatedPort;
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088c6:	68fa      	ldr	r2, [r7, #12]
 80088c8:	4313      	orrs	r3, r2
 80088ca:	60fb      	str	r3, [r7, #12]
  }

  /* Write DMA Channel Control Register (CCR) */
  MODIFY_REG(hdma->Instance->CCR, DMA_CCR_PRIO | DMA_CCR_LAP | DMA_CCR_LSM, tmpreg);
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	695b      	ldr	r3, [r3, #20]
 80088d2:	f423 0143 	bic.w	r1, r3, #12779520	; 0xc30000
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	68fa      	ldr	r2, [r7, #12]
 80088dc:	430a      	orrs	r2, r1
 80088de:	615a      	str	r2, [r3, #20]

  /* Write DMA Channel Control Register (CTR1) */
  WRITE_REG(hdma->Instance->CTR1, 0U);
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	2200      	movs	r2, #0
 80088e6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write DMA Channel Control Register (CTR2) */
  WRITE_REG(hdma->Instance->CTR2, hdma->InitLinkedList.TransferEventMode);
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	687a      	ldr	r2, [r7, #4]
 80088ee:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80088f0:	645a      	str	r2, [r3, #68]	; 0x44

  /* Write DMA Channel Control Register (CBR1) */
  WRITE_REG(hdma->Instance->CBR1, 0U);
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	2200      	movs	r2, #0
 80088f8:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write DMA Channel Control Register (CSAR) */
  WRITE_REG(hdma->Instance->CSAR, 0U);
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	2200      	movs	r2, #0
 8008900:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write DMA Channel Control Register (CDAR) */
  WRITE_REG(hdma->Instance->CDAR, 0U);
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	2200      	movs	r2, #0
 8008908:	651a      	str	r2, [r3, #80]	; 0x50

  /* If 2D Addressing is supported by current channel */
  if (IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) != 0U)
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	4a36      	ldr	r2, [pc, #216]	; (80089e8 <DMA_List_Init+0x290>)
 8008910:	4293      	cmp	r3, r2
 8008912:	d022      	beq.n	800895a <DMA_List_Init+0x202>
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	4a34      	ldr	r2, [pc, #208]	; (80089ec <DMA_List_Init+0x294>)
 800891a:	4293      	cmp	r3, r2
 800891c:	d01d      	beq.n	800895a <DMA_List_Init+0x202>
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	4a33      	ldr	r2, [pc, #204]	; (80089f0 <DMA_List_Init+0x298>)
 8008924:	4293      	cmp	r3, r2
 8008926:	d018      	beq.n	800895a <DMA_List_Init+0x202>
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	4a31      	ldr	r2, [pc, #196]	; (80089f4 <DMA_List_Init+0x29c>)
 800892e:	4293      	cmp	r3, r2
 8008930:	d013      	beq.n	800895a <DMA_List_Init+0x202>
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	4a30      	ldr	r2, [pc, #192]	; (80089f8 <DMA_List_Init+0x2a0>)
 8008938:	4293      	cmp	r3, r2
 800893a:	d00e      	beq.n	800895a <DMA_List_Init+0x202>
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	4a2e      	ldr	r2, [pc, #184]	; (80089fc <DMA_List_Init+0x2a4>)
 8008942:	4293      	cmp	r3, r2
 8008944:	d009      	beq.n	800895a <DMA_List_Init+0x202>
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	4a2d      	ldr	r2, [pc, #180]	; (8008a00 <DMA_List_Init+0x2a8>)
 800894c:	4293      	cmp	r3, r2
 800894e:	d004      	beq.n	800895a <DMA_List_Init+0x202>
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	4a2b      	ldr	r2, [pc, #172]	; (8008a04 <DMA_List_Init+0x2ac>)
 8008956:	4293      	cmp	r3, r2
 8008958:	d101      	bne.n	800895e <DMA_List_Init+0x206>
 800895a:	2301      	movs	r3, #1
 800895c:	e000      	b.n	8008960 <DMA_List_Init+0x208>
 800895e:	2300      	movs	r3, #0
 8008960:	2b00      	cmp	r3, #0
 8008962:	d007      	beq.n	8008974 <DMA_List_Init+0x21c>
  {
    /* Write DMA Channel Control Register (CTR3) */
    WRITE_REG(hdma->Instance->CTR3, 0U);
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	2200      	movs	r2, #0
 800896a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Write DMA Channel Control Register (CBR2) */
    WRITE_REG(hdma->Instance->CBR2, 0U);
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	2200      	movs	r2, #0
 8008972:	659a      	str	r2, [r3, #88]	; 0x58
  }

  /* Write DMA Channel linked-list address register (CLLR) */
  WRITE_REG(hdma->Instance->CLLR, 0U);
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	2200      	movs	r2, #0
 800897a:	67da      	str	r2, [r3, #124]	; 0x7c
}
 800897c:	bf00      	nop
 800897e:	3714      	adds	r7, #20
 8008980:	46bd      	mov	sp, r7
 8008982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008986:	4770      	bx	lr
 8008988:	40020050 	.word	0x40020050
 800898c:	50020050 	.word	0x50020050
 8008990:	400200d0 	.word	0x400200d0
 8008994:	500200d0 	.word	0x500200d0
 8008998:	40020150 	.word	0x40020150
 800899c:	50020150 	.word	0x50020150
 80089a0:	400201d0 	.word	0x400201d0
 80089a4:	500201d0 	.word	0x500201d0
 80089a8:	40020250 	.word	0x40020250
 80089ac:	50020250 	.word	0x50020250
 80089b0:	400202d0 	.word	0x400202d0
 80089b4:	500202d0 	.word	0x500202d0
 80089b8:	40020350 	.word	0x40020350
 80089bc:	50020350 	.word	0x50020350
 80089c0:	400203d0 	.word	0x400203d0
 80089c4:	500203d0 	.word	0x500203d0
 80089c8:	40020450 	.word	0x40020450
 80089cc:	50020450 	.word	0x50020450
 80089d0:	400204d0 	.word	0x400204d0
 80089d4:	500204d0 	.word	0x500204d0
 80089d8:	40020550 	.word	0x40020550
 80089dc:	50020550 	.word	0x50020550
 80089e0:	400205d0 	.word	0x400205d0
 80089e4:	500205d0 	.word	0x500205d0
 80089e8:	40020650 	.word	0x40020650
 80089ec:	50020650 	.word	0x50020650
 80089f0:	400206d0 	.word	0x400206d0
 80089f4:	500206d0 	.word	0x500206d0
 80089f8:	40020750 	.word	0x40020750
 80089fc:	50020750 	.word	0x50020750
 8008a00:	400207d0 	.word	0x400207d0
 8008a04:	500207d0 	.word	0x500207d0

08008a08 <DMA_List_BuildNode>:
  *                       configurations.
  * @retval None.
  */
static void DMA_List_BuildNode(DMA_NodeConfTypeDef const *const pNodeConfig,
                               DMA_NodeTypeDef *const pNode)
{
 8008a08:	b480      	push	{r7}
 8008a0a:	b085      	sub	sp, #20
 8008a0c:	af00      	add	r7, sp, #0
 8008a0e:	6078      	str	r0, [r7, #4]
 8008a10:	6039      	str	r1, [r7, #0]
  int32_t blockoffset;

  /* Update CTR1 register value ***************************************************************************************/
  /* Prepare DMA channel transfer register (CTR1) value */
  pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] = pNodeConfig->Init.DestInc                     |
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	695a      	ldr	r2, [r3, #20]
                                                   pNodeConfig->Init.DestDataWidth               |
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	69db      	ldr	r3, [r3, #28]
  pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] = pNodeConfig->Init.DestInc                     |
 8008a1a:	431a      	orrs	r2, r3
                                                   pNodeConfig->DataHandlingConfig.DataAlignment |
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                                                   pNodeConfig->Init.DestDataWidth               |
 8008a20:	431a      	orrs	r2, r3
                                                   pNodeConfig->Init.SrcInc                      |
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	691b      	ldr	r3, [r3, #16]
                                                   pNodeConfig->DataHandlingConfig.DataAlignment |
 8008a26:	431a      	orrs	r2, r3
                                                   pNodeConfig->Init.SrcDataWidth;
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	699b      	ldr	r3, [r3, #24]
                                                   pNodeConfig->Init.SrcInc                      |
 8008a2c:	431a      	orrs	r2, r3
  pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] = pNodeConfig->Init.DestInc                     |
 8008a2e:	683b      	ldr	r3, [r7, #0]
 8008a30:	601a      	str	r2, [r3, #0]
    pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] |= DMA_CTR1_DSEC;
  }
#endif /* defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  /* Add parameters related to DMA configuration */
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_GPDMA) == DMA_CHANNEL_TYPE_GPDMA)
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	f003 0320 	and.w	r3, r3, #32
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d017      	beq.n	8008a6e <DMA_List_BuildNode+0x66>
  {
    /* Prepare DMA channel transfer register (CTR1) value */
    pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] |=
 8008a3e:	683b      	ldr	r3, [r7, #0]
 8008a40:	681a      	ldr	r2, [r3, #0]
      (pNodeConfig->Init.TransferAllocatedPort | pNodeConfig->DataHandlingConfig.DataExchange |
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a4a:	4319      	orrs	r1, r3
       (((pNodeConfig->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1)    |
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a50:	3b01      	subs	r3, #1
 8008a52:	051b      	lsls	r3, r3, #20
 8008a54:	f003 737c 	and.w	r3, r3, #66060288	; 0x3f00000
      (pNodeConfig->Init.TransferAllocatedPort | pNodeConfig->DataHandlingConfig.DataExchange |
 8008a58:	4319      	orrs	r1, r3
       (((pNodeConfig->Init.SrcBurstLength - 1U) << DMA_CTR1_SBL_1_Pos) & DMA_CTR1_SBL_1));
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a5e:	3b01      	subs	r3, #1
 8008a60:	011b      	lsls	r3, r3, #4
 8008a62:	f403 737c 	and.w	r3, r3, #1008	; 0x3f0
       (((pNodeConfig->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1)    |
 8008a66:	430b      	orrs	r3, r1
    pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] |=
 8008a68:	431a      	orrs	r2, r3
 8008a6a:	683b      	ldr	r3, [r7, #0]
 8008a6c:	601a      	str	r2, [r3, #0]
  /*********************************************************************************** CTR1 register value is updated */


  /* Update CTR2 register value ***************************************************************************************/
  /* Prepare DMA channel transfer register 2 (CTR2) value */
  pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] = pNodeConfig->Init.TransferEventMode |
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	6b1a      	ldr	r2, [r3, #48]	; 0x30
                                                   (pNodeConfig->Init.Request & (DMA_CTR2_REQSEL | DMA_CTR2_SWREQ));
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	6859      	ldr	r1, [r3, #4]
 8008a76:	f240 237f 	movw	r3, #639	; 0x27f
 8008a7a:	400b      	ands	r3, r1
  pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] = pNodeConfig->Init.TransferEventMode |
 8008a7c:	431a      	orrs	r2, r3
 8008a7e:	683b      	ldr	r3, [r7, #0]
 8008a80:	605a      	str	r2, [r3, #4]

  /* Check for memory to peripheral transfer */
  if ((pNodeConfig->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	68db      	ldr	r3, [r3, #12]
 8008a86:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008a8a:	d10c      	bne.n	8008aa6 <DMA_List_BuildNode+0x9e>
  {
    /* Check for GPDMA */
    if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_GPDMA) == DMA_CHANNEL_TYPE_GPDMA)
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	f003 0320 	and.w	r3, r3, #32
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	d011      	beq.n	8008abc <DMA_List_BuildNode+0xb4>
    {
      pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |= DMA_CTR2_DREQ;
 8008a98:	683b      	ldr	r3, [r7, #0]
 8008a9a:	685b      	ldr	r3, [r3, #4]
 8008a9c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8008aa0:	683b      	ldr	r3, [r7, #0]
 8008aa2:	605a      	str	r2, [r3, #4]
 8008aa4:	e00a      	b.n	8008abc <DMA_List_BuildNode+0xb4>
    }
  }
  /* Memory to memory transfer */
  else if ((pNodeConfig->Init.Direction) == DMA_MEMORY_TO_MEMORY)
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	68db      	ldr	r3, [r3, #12]
 8008aaa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008aae:	d105      	bne.n	8008abc <DMA_List_BuildNode+0xb4>
  {
    pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |= DMA_CTR2_SWREQ;
 8008ab0:	683b      	ldr	r3, [r7, #0]
 8008ab2:	685b      	ldr	r3, [r3, #4]
 8008ab4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8008ab8:	683b      	ldr	r3, [r7, #0]
 8008aba:	605a      	str	r2, [r3, #4]
  {
    /* Prevent MISRA-C2012-Rule-15.7 */
  }

  /* Check if trigger feature is active */
  if (pNodeConfig->TriggerConfig.TriggerPolarity != DMA_TRIG_POLARITY_MASKED)
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d00f      	beq.n	8008ae4 <DMA_List_BuildNode+0xdc>
  {
    /* Prepare DMA channel transfer register 2 (CTR2) value */
    pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |=
 8008ac4:	683b      	ldr	r3, [r7, #0]
 8008ac6:	685a      	ldr	r2, [r3, #4]
      pNodeConfig->TriggerConfig.TriggerMode | pNodeConfig->TriggerConfig.TriggerPolarity |
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008ad0:	4319      	orrs	r1, r3
      ((pNodeConfig->TriggerConfig.TriggerSelection << DMA_CTR2_TRIGSEL_Pos) & DMA_CTR2_TRIGSEL);
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008ad6:	041b      	lsls	r3, r3, #16
 8008ad8:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
      pNodeConfig->TriggerConfig.TriggerMode | pNodeConfig->TriggerConfig.TriggerPolarity |
 8008adc:	430b      	orrs	r3, r1
    pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |=
 8008ade:	431a      	orrs	r2, r3
 8008ae0:	683b      	ldr	r3, [r7, #0]
 8008ae2:	605a      	str	r2, [r3, #4]
  /*********************************************************************************** CTR2 register value is updated */


  /* Update CBR1 register value ***************************************************************************************/
  /* Prepare DMA channel block register 1 (CBR1) value */
  pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = (pNodeConfig->DataSize & DMA_CBR1_BNDT);
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008ae8:	b29a      	uxth	r2, r3
 8008aea:	683b      	ldr	r3, [r7, #0]
 8008aec:	609a      	str	r2, [r3, #8]

  /* If 2D addressing is supported by the selected DMA channel */
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	f003 0302 	and.w	r3, r3, #2
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d04e      	beq.n	8008b98 <DMA_List_BuildNode+0x190>
  {
    /* Set the new CBR1 Register value */
    pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |=
 8008afa:	683b      	ldr	r3, [r7, #0]
 8008afc:	689a      	ldr	r2, [r3, #8]
      (((pNodeConfig->RepeatBlockConfig.RepeatCount - 1U) << DMA_CBR1_BRC_Pos) & DMA_CBR1_BRC);
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008b02:	3b01      	subs	r3, #1
 8008b04:	0419      	lsls	r1, r3, #16
 8008b06:	4b67      	ldr	r3, [pc, #412]	; (8008ca4 <DMA_List_BuildNode+0x29c>)
 8008b08:	400b      	ands	r3, r1
    pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |=
 8008b0a:	431a      	orrs	r2, r3
 8008b0c:	683b      	ldr	r3, [r7, #0]
 8008b0e:	609a      	str	r2, [r3, #8]

    /* If the source address offset is negative, set SDEC bit */
    if (pNodeConfig->RepeatBlockConfig.SrcAddrOffset < 0)
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	da06      	bge.n	8008b26 <DMA_List_BuildNode+0x11e>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_SDEC;
 8008b18:	683b      	ldr	r3, [r7, #0]
 8008b1a:	689b      	ldr	r3, [r3, #8]
 8008b1c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8008b20:	683b      	ldr	r3, [r7, #0]
 8008b22:	609a      	str	r2, [r3, #8]
 8008b24:	e005      	b.n	8008b32 <DMA_List_BuildNode+0x12a>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_SDEC);
 8008b26:	683b      	ldr	r3, [r7, #0]
 8008b28:	689b      	ldr	r3, [r3, #8]
 8008b2a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8008b2e:	683b      	ldr	r3, [r7, #0]
 8008b30:	609a      	str	r2, [r3, #8]
    }

    /* If the destination address offset is negative, set DDEC bit */
    if (pNodeConfig->RepeatBlockConfig.DestAddrOffset < 0)
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	da06      	bge.n	8008b48 <DMA_List_BuildNode+0x140>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_DDEC;
 8008b3a:	683b      	ldr	r3, [r7, #0]
 8008b3c:	689b      	ldr	r3, [r3, #8]
 8008b3e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008b42:	683b      	ldr	r3, [r7, #0]
 8008b44:	609a      	str	r2, [r3, #8]
 8008b46:	e005      	b.n	8008b54 <DMA_List_BuildNode+0x14c>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_DDEC);
 8008b48:	683b      	ldr	r3, [r7, #0]
 8008b4a:	689b      	ldr	r3, [r3, #8]
 8008b4c:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8008b50:	683b      	ldr	r3, [r7, #0]
 8008b52:	609a      	str	r2, [r3, #8]
    }

    /* If the repeated block source address offset is negative, set BRSEC bit */
    if (pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset < 0)
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	da06      	bge.n	8008b6a <DMA_List_BuildNode+0x162>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_BRSDEC;
 8008b5c:	683b      	ldr	r3, [r7, #0]
 8008b5e:	689b      	ldr	r3, [r3, #8]
 8008b60:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008b64:	683b      	ldr	r3, [r7, #0]
 8008b66:	609a      	str	r2, [r3, #8]
 8008b68:	e005      	b.n	8008b76 <DMA_List_BuildNode+0x16e>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_BRSDEC);
 8008b6a:	683b      	ldr	r3, [r7, #0]
 8008b6c:	689b      	ldr	r3, [r3, #8]
 8008b6e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8008b72:	683b      	ldr	r3, [r7, #0]
 8008b74:	609a      	str	r2, [r3, #8]
    }

    /* if the repeated block destination address offset is negative, set BRDEC bit */
    if (pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset < 0)
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	da06      	bge.n	8008b8c <DMA_List_BuildNode+0x184>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_BRDDEC;
 8008b7e:	683b      	ldr	r3, [r7, #0]
 8008b80:	689b      	ldr	r3, [r3, #8]
 8008b82:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8008b86:	683b      	ldr	r3, [r7, #0]
 8008b88:	609a      	str	r2, [r3, #8]
 8008b8a:	e005      	b.n	8008b98 <DMA_List_BuildNode+0x190>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_BRDDEC);
 8008b8c:	683b      	ldr	r3, [r7, #0]
 8008b8e:	689b      	ldr	r3, [r3, #8]
 8008b90:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8008b94:	683b      	ldr	r3, [r7, #0]
 8008b96:	609a      	str	r2, [r3, #8]
  }
  /*********************************************************************************** CBR1 register value is updated */


  /* Update CSAR register value ***************************************************************************************/
  pNode->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] = pNodeConfig->SrcAddress;
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8008b9c:	683b      	ldr	r3, [r7, #0]
 8008b9e:	60da      	str	r2, [r3, #12]
  /*********************************************************************************** CSAR register value is updated */


  /* Update CDAR register value ***************************************************************************************/
  pNode->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = pNodeConfig->DstAddress;
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8008ba4:	683b      	ldr	r3, [r7, #0]
 8008ba6:	611a      	str	r2, [r3, #16]
  /*********************************************************************************** CDAR register value is updated */


  /* Check if the selected channel is 2D addressing */
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	f003 0302 	and.w	r3, r3, #2
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d059      	beq.n	8008c68 <DMA_List_BuildNode+0x260>
  {
    /* Update CTR3 register value *************************************************************************************/
    /* Write new CTR3 Register value : source address offset */
    if (pNodeConfig->RepeatBlockConfig.SrcAddrOffset < 0)
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	da09      	bge.n	8008bd0 <DMA_List_BuildNode+0x1c8>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.SrcAddrOffset);
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008bc0:	425b      	negs	r3, r3
 8008bc2:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] = ((uint32_t)blockoffset & DMA_CTR3_SAO);
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	f3c3 020c 	ubfx	r2, r3, #0, #13
 8008bca:	683b      	ldr	r3, [r7, #0]
 8008bcc:	615a      	str	r2, [r3, #20]
 8008bce:	e005      	b.n	8008bdc <DMA_List_BuildNode+0x1d4>
    }
    else
    {
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] =
        ((uint32_t)pNodeConfig->RepeatBlockConfig.SrcAddrOffset & DMA_CTR3_SAO);
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008bd4:	f3c3 020c 	ubfx	r2, r3, #0, #13
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] =
 8008bd8:	683b      	ldr	r3, [r7, #0]
 8008bda:	615a      	str	r2, [r3, #20]
    }

    /* Write new CTR3 Register value : destination address offset */
    if (pNodeConfig->RepeatBlockConfig.DestAddrOffset < 0)
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	da0d      	bge.n	8008c00 <DMA_List_BuildNode+0x1f8>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.DestAddrOffset);
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008be8:	425b      	negs	r3, r3
 8008bea:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] |= (((uint32_t)blockoffset << DMA_CTR3_DAO_Pos) & DMA_CTR3_DAO);
 8008bec:	683b      	ldr	r3, [r7, #0]
 8008bee:	695a      	ldr	r2, [r3, #20]
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	0419      	lsls	r1, r3, #16
 8008bf4:	4b2c      	ldr	r3, [pc, #176]	; (8008ca8 <DMA_List_BuildNode+0x2a0>)
 8008bf6:	400b      	ands	r3, r1
 8008bf8:	431a      	orrs	r2, r3
 8008bfa:	683b      	ldr	r3, [r7, #0]
 8008bfc:	615a      	str	r2, [r3, #20]
 8008bfe:	e009      	b.n	8008c14 <DMA_List_BuildNode+0x20c>
    }
    else
    {
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] |=
 8008c00:	683b      	ldr	r3, [r7, #0]
 8008c02:	695a      	ldr	r2, [r3, #20]
        (((uint32_t)pNodeConfig->RepeatBlockConfig.DestAddrOffset << DMA_CTR3_DAO_Pos) & DMA_CTR3_DAO);
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008c08:	0419      	lsls	r1, r3, #16
 8008c0a:	4b27      	ldr	r3, [pc, #156]	; (8008ca8 <DMA_List_BuildNode+0x2a0>)
 8008c0c:	400b      	ands	r3, r1
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] |=
 8008c0e:	431a      	orrs	r2, r3
 8008c10:	683b      	ldr	r3, [r7, #0]
 8008c12:	615a      	str	r2, [r3, #20]
    /********************************************************************************* CTR3 register value is updated */


    /* Update CBR2 register value *************************************************************************************/
    /* Write new CBR2 Register value : repeated block source address offset */
    if (pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset < 0)
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	da08      	bge.n	8008c2e <DMA_List_BuildNode+0x226>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset);
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008c20:	425b      	negs	r3, r3
 8008c22:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] = ((uint32_t)blockoffset & DMA_CBR2_BRSAO);
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	b29a      	uxth	r2, r3
 8008c28:	683b      	ldr	r3, [r7, #0]
 8008c2a:	619a      	str	r2, [r3, #24]
 8008c2c:	e004      	b.n	8008c38 <DMA_List_BuildNode+0x230>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] =
        ((uint32_t)pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset & DMA_CBR2_BRSAO);
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008c32:	b29a      	uxth	r2, r3
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] =
 8008c34:	683b      	ldr	r3, [r7, #0]
 8008c36:	619a      	str	r2, [r3, #24]
    }

    /* Write new CBR2 Register value : repeated block destination address offset */
    if (pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset < 0)
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	da0b      	bge.n	8008c58 <DMA_List_BuildNode+0x250>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset);
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008c44:	425b      	negs	r3, r3
 8008c46:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 8008c48:	683b      	ldr	r3, [r7, #0]
 8008c4a:	699a      	ldr	r2, [r3, #24]
        (((uint32_t)blockoffset & DMA_CBR2_BRSAO) << DMA_CBR2_BRDAO_Pos);
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	041b      	lsls	r3, r3, #16
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 8008c50:	431a      	orrs	r2, r3
 8008c52:	683b      	ldr	r3, [r7, #0]
 8008c54:	619a      	str	r2, [r3, #24]
 8008c56:	e007      	b.n	8008c68 <DMA_List_BuildNode+0x260>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 8008c58:	683b      	ldr	r3, [r7, #0]
 8008c5a:	699a      	ldr	r2, [r3, #24]
        (((uint32_t)pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset << DMA_CBR2_BRDAO_Pos) & DMA_CBR2_BRDAO);
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008c60:	041b      	lsls	r3, r3, #16
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 8008c62:	431a      	orrs	r2, r3
 8008c64:	683b      	ldr	r3, [r7, #0]
 8008c66:	619a      	str	r2, [r3, #24]
  }


  /* Update node information value ************************************************************************************/
  /* Set node information */
  pNode->NodeInfo = pNodeConfig->NodeType;
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	681a      	ldr	r2, [r3, #0]
 8008c6c:	683b      	ldr	r3, [r7, #0]
 8008c6e:	621a      	str	r2, [r3, #32]
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	f003 0302 	and.w	r3, r3, #2
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d006      	beq.n	8008c8a <DMA_List_BuildNode+0x282>
  {
    pNode->NodeInfo |= (NODE_CLLR_2D_DEFAULT_OFFSET << NODE_CLLR_IDX_POS);
 8008c7c:	683b      	ldr	r3, [r7, #0]
 8008c7e:	6a1b      	ldr	r3, [r3, #32]
 8008c80:	f443 62e0 	orr.w	r2, r3, #1792	; 0x700
 8008c84:	683b      	ldr	r3, [r7, #0]
 8008c86:	621a      	str	r2, [r3, #32]
  else
  {
    pNode->NodeInfo |= (NODE_CLLR_LINEAR_DEFAULT_OFFSET << NODE_CLLR_IDX_POS);
  }
  /******************************************************************************** Node information value is updated */
}
 8008c88:	e005      	b.n	8008c96 <DMA_List_BuildNode+0x28e>
    pNode->NodeInfo |= (NODE_CLLR_LINEAR_DEFAULT_OFFSET << NODE_CLLR_IDX_POS);
 8008c8a:	683b      	ldr	r3, [r7, #0]
 8008c8c:	6a1b      	ldr	r3, [r3, #32]
 8008c8e:	f443 62a0 	orr.w	r2, r3, #1280	; 0x500
 8008c92:	683b      	ldr	r3, [r7, #0]
 8008c94:	621a      	str	r2, [r3, #32]
}
 8008c96:	bf00      	nop
 8008c98:	3714      	adds	r7, #20
 8008c9a:	46bd      	mov	sp, r7
 8008c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ca0:	4770      	bx	lr
 8008ca2:	bf00      	nop
 8008ca4:	07ff0000 	.word	0x07ff0000
 8008ca8:	1fff0000 	.word	0x1fff0000

08008cac <DMA_List_CheckNodesBaseAddresses>:
  * @retval Return 0 when nodes addresses are compatible, 1 otherwise.
  */
static uint32_t DMA_List_CheckNodesBaseAddresses(DMA_NodeTypeDef const *const pNode1,
                                                 DMA_NodeTypeDef const *const pNode2,
                                                 DMA_NodeTypeDef const *const pNode3)
{
 8008cac:	b480      	push	{r7}
 8008cae:	b087      	sub	sp, #28
 8008cb0:	af00      	add	r7, sp, #0
 8008cb2:	60f8      	str	r0, [r7, #12]
 8008cb4:	60b9      	str	r1, [r7, #8]
 8008cb6:	607a      	str	r2, [r7, #4]
  uint32_t temp = (((uint32_t)pNode1 | (uint32_t)pNode2 | (uint32_t)pNode3) & DMA_CLBAR_LBA);
 8008cb8:	68fa      	ldr	r2, [r7, #12]
 8008cba:	68bb      	ldr	r3, [r7, #8]
 8008cbc:	431a      	orrs	r2, r3
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	4313      	orrs	r3, r2
 8008cc2:	0c1b      	lsrs	r3, r3, #16
 8008cc4:	041b      	lsls	r3, r3, #16
 8008cc6:	613b      	str	r3, [r7, #16]
  uint32_t ref  = 0U;
 8008cc8:	2300      	movs	r3, #0
 8008cca:	617b      	str	r3, [r7, #20]

  /* Check node 1 address */
  if ((uint32_t)pNode1 != 0U)
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d002      	beq.n	8008cd8 <DMA_List_CheckNodesBaseAddresses+0x2c>
  {
    ref = (uint32_t)pNode1;
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	617b      	str	r3, [r7, #20]
 8008cd6:	e00a      	b.n	8008cee <DMA_List_CheckNodesBaseAddresses+0x42>
  }
  /* Check node 2 address */
  else if ((uint32_t)pNode2 != 0U)
 8008cd8:	68bb      	ldr	r3, [r7, #8]
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d002      	beq.n	8008ce4 <DMA_List_CheckNodesBaseAddresses+0x38>
  {
    ref = (uint32_t)pNode2;
 8008cde:	68bb      	ldr	r3, [r7, #8]
 8008ce0:	617b      	str	r3, [r7, #20]
 8008ce2:	e004      	b.n	8008cee <DMA_List_CheckNodesBaseAddresses+0x42>
  }
  /* Check node 3 address */
  else if ((uint32_t)pNode3 != 0U)
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d001      	beq.n	8008cee <DMA_List_CheckNodesBaseAddresses+0x42>
  {
    ref = (uint32_t)pNode3;
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	617b      	str	r3, [r7, #20]
  {
    /* Prevent MISRA-C2012-Rule-15.7 */
  }

  /* Check addresses compatibility */
  if (temp != ((uint32_t)ref & DMA_CLBAR_LBA))
 8008cee:	697b      	ldr	r3, [r7, #20]
 8008cf0:	0c1b      	lsrs	r3, r3, #16
 8008cf2:	041b      	lsls	r3, r3, #16
 8008cf4:	693a      	ldr	r2, [r7, #16]
 8008cf6:	429a      	cmp	r2, r3
 8008cf8:	d001      	beq.n	8008cfe <DMA_List_CheckNodesBaseAddresses+0x52>
  {
    return 1U;
 8008cfa:	2301      	movs	r3, #1
 8008cfc:	e000      	b.n	8008d00 <DMA_List_CheckNodesBaseAddresses+0x54>
  }

  return 0U;
 8008cfe:	2300      	movs	r3, #0
}
 8008d00:	4618      	mov	r0, r3
 8008d02:	371c      	adds	r7, #28
 8008d04:	46bd      	mov	sp, r7
 8008d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d0a:	4770      	bx	lr

08008d0c <DMA_List_CheckNodesTypes>:
  * @retval Return 0 when nodes types are compatible, otherwise nodes types are not compatible.
  */
static uint32_t DMA_List_CheckNodesTypes(DMA_NodeTypeDef const *const pNode1,
                                         DMA_NodeTypeDef const *const pNode2,
                                         DMA_NodeTypeDef const *const pNode3)
{
 8008d0c:	b480      	push	{r7}
 8008d0e:	b087      	sub	sp, #28
 8008d10:	af00      	add	r7, sp, #0
 8008d12:	60f8      	str	r0, [r7, #12]
 8008d14:	60b9      	str	r1, [r7, #8]
 8008d16:	607a      	str	r2, [r7, #4]
  uint32_t ref = 0U;
 8008d18:	2300      	movs	r3, #0
 8008d1a:	617b      	str	r3, [r7, #20]

  /* Check node 1 parameter */
  if (pNode1 != NULL)
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d004      	beq.n	8008d2c <DMA_List_CheckNodesTypes+0x20>
  {
    ref = pNode1->NodeInfo & NODE_TYPE_MASK;
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	6a1b      	ldr	r3, [r3, #32]
 8008d26:	b2db      	uxtb	r3, r3
 8008d28:	617b      	str	r3, [r7, #20]
 8008d2a:	e00e      	b.n	8008d4a <DMA_List_CheckNodesTypes+0x3e>
  }
  /* Check node 2 parameter */
  else if (pNode2 != NULL)
 8008d2c:	68bb      	ldr	r3, [r7, #8]
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d004      	beq.n	8008d3c <DMA_List_CheckNodesTypes+0x30>
  {
    ref = pNode2->NodeInfo & NODE_TYPE_MASK;
 8008d32:	68bb      	ldr	r3, [r7, #8]
 8008d34:	6a1b      	ldr	r3, [r3, #32]
 8008d36:	b2db      	uxtb	r3, r3
 8008d38:	617b      	str	r3, [r7, #20]
 8008d3a:	e006      	b.n	8008d4a <DMA_List_CheckNodesTypes+0x3e>
  }
  /* Check node 3 parameter */
  else if (pNode3 != NULL)
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d003      	beq.n	8008d4a <DMA_List_CheckNodesTypes+0x3e>
  {
    ref = pNode3->NodeInfo & NODE_TYPE_MASK;
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	6a1b      	ldr	r3, [r3, #32]
 8008d46:	b2db      	uxtb	r3, r3
 8008d48:	617b      	str	r3, [r7, #20]
  {
    /* Prevent MISRA-C2012-Rule-15.7 */
  }

  /* Check node 2 parameter */
  if (pNode2 != NULL)
 8008d4a:	68bb      	ldr	r3, [r7, #8]
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d007      	beq.n	8008d60 <DMA_List_CheckNodesTypes+0x54>
  {
    /* Check node type compatibility */
    if (ref != (pNode2->NodeInfo & NODE_TYPE_MASK))
 8008d50:	68bb      	ldr	r3, [r7, #8]
 8008d52:	6a1b      	ldr	r3, [r3, #32]
 8008d54:	b2db      	uxtb	r3, r3
 8008d56:	697a      	ldr	r2, [r7, #20]
 8008d58:	429a      	cmp	r2, r3
 8008d5a:	d001      	beq.n	8008d60 <DMA_List_CheckNodesTypes+0x54>
    {
      return 2U;
 8008d5c:	2302      	movs	r3, #2
 8008d5e:	e00b      	b.n	8008d78 <DMA_List_CheckNodesTypes+0x6c>
    }
  }

  /* Check node 3 parameter */
  if (pNode3 != NULL)
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d007      	beq.n	8008d76 <DMA_List_CheckNodesTypes+0x6a>
  {
    /* Check node type compatibility */
    if (ref != (pNode3->NodeInfo & NODE_TYPE_MASK))
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	6a1b      	ldr	r3, [r3, #32]
 8008d6a:	b2db      	uxtb	r3, r3
 8008d6c:	697a      	ldr	r2, [r7, #20]
 8008d6e:	429a      	cmp	r2, r3
 8008d70:	d001      	beq.n	8008d76 <DMA_List_CheckNodesTypes+0x6a>
    {
      return 3U;
 8008d72:	2303      	movs	r3, #3
 8008d74:	e000      	b.n	8008d78 <DMA_List_CheckNodesTypes+0x6c>
    }
  }

  return 0U;
 8008d76:	2300      	movs	r3, #0
}
 8008d78:	4618      	mov	r0, r3
 8008d7a:	371c      	adds	r7, #28
 8008d7c:	46bd      	mov	sp, r7
 8008d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d82:	4770      	bx	lr

08008d84 <DMA_List_GetCLLRNodeInfo>:
  * @retval None.
  */
static void DMA_List_GetCLLRNodeInfo(DMA_NodeTypeDef const *const pNode,
                                     uint32_t *const cllr_mask,
                                     uint32_t *const cllr_offset)
{
 8008d84:	b480      	push	{r7}
 8008d86:	b085      	sub	sp, #20
 8008d88:	af00      	add	r7, sp, #0
 8008d8a:	60f8      	str	r0, [r7, #12]
 8008d8c:	60b9      	str	r1, [r7, #8]
 8008d8e:	607a      	str	r2, [r7, #4]
  /* Check node type */
  if ((pNode->NodeInfo & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	6a1b      	ldr	r3, [r3, #32]
 8008d94:	f003 0302 	and.w	r3, r3, #2
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	d00c      	beq.n	8008db6 <DMA_List_GetCLLRNodeInfo+0x32>
  {
    /* Update CLLR register mask value */
    if (cllr_mask != NULL)
 8008d9c:	68bb      	ldr	r3, [r7, #8]
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d002      	beq.n	8008da8 <DMA_List_GetCLLRNodeInfo+0x24>
    {
      *cllr_mask = DMA_CLLR_UT1 | DMA_CLLR_UT2 | DMA_CLLR_UB1 | DMA_CLLR_USA | DMA_CLLR_UDA | DMA_CLLR_UT3 |
 8008da2:	68bb      	ldr	r3, [r7, #8]
 8008da4:	4a0d      	ldr	r2, [pc, #52]	; (8008ddc <DMA_List_GetCLLRNodeInfo+0x58>)
 8008da6:	601a      	str	r2, [r3, #0]
                   DMA_CLLR_UB2 | DMA_CLLR_ULL;
    }

    /* Update CLLR register offset */
    if (cllr_offset != NULL)
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d00f      	beq.n	8008dce <DMA_List_GetCLLRNodeInfo+0x4a>
    {
      *cllr_offset = NODE_CLLR_2D_DEFAULT_OFFSET;
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	2207      	movs	r2, #7
 8008db2:	601a      	str	r2, [r3, #0]
    if (cllr_offset != NULL)
    {
      *cllr_offset = NODE_CLLR_LINEAR_DEFAULT_OFFSET;
    }
  }
}
 8008db4:	e00b      	b.n	8008dce <DMA_List_GetCLLRNodeInfo+0x4a>
    if (cllr_mask != NULL)
 8008db6:	68bb      	ldr	r3, [r7, #8]
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d002      	beq.n	8008dc2 <DMA_List_GetCLLRNodeInfo+0x3e>
      *cllr_mask = DMA_CLLR_UT1 | DMA_CLLR_UT2 | DMA_CLLR_UB1 | DMA_CLLR_USA | DMA_CLLR_UDA | DMA_CLLR_ULL;
 8008dbc:	68bb      	ldr	r3, [r7, #8]
 8008dbe:	4a08      	ldr	r2, [pc, #32]	; (8008de0 <DMA_List_GetCLLRNodeInfo+0x5c>)
 8008dc0:	601a      	str	r2, [r3, #0]
    if (cllr_offset != NULL)
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	d002      	beq.n	8008dce <DMA_List_GetCLLRNodeInfo+0x4a>
      *cllr_offset = NODE_CLLR_LINEAR_DEFAULT_OFFSET;
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	2205      	movs	r2, #5
 8008dcc:	601a      	str	r2, [r3, #0]
}
 8008dce:	bf00      	nop
 8008dd0:	3714      	adds	r7, #20
 8008dd2:	46bd      	mov	sp, r7
 8008dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dd8:	4770      	bx	lr
 8008dda:	bf00      	nop
 8008ddc:	fe010000 	.word	0xfe010000
 8008de0:	f8010000 	.word	0xf8010000

08008de4 <DMA_List_FindNode>:
  * @retval Return 0 when node is found in selected queue, otherwise node is not found.
  */
static uint32_t DMA_List_FindNode(DMA_QListTypeDef const *const pQList,
                                  DMA_NodeTypeDef const *const pNode,
                                  DMA_NodeInQInfoTypeDef *const NodeInfo)
{
 8008de4:	b480      	push	{r7}
 8008de6:	b089      	sub	sp, #36	; 0x24
 8008de8:	af00      	add	r7, sp, #0
 8008dea:	60f8      	str	r0, [r7, #12]
 8008dec:	60b9      	str	r1, [r7, #8]
 8008dee:	607a      	str	r2, [r7, #4]
  uint32_t node_idx = 0U;
 8008df0:	2300      	movs	r3, #0
 8008df2:	61fb      	str	r3, [r7, #28]
  uint32_t currentnode_address  = 0U;
 8008df4:	2300      	movs	r3, #0
 8008df6:	61bb      	str	r3, [r7, #24]
  uint32_t previousnode_address  = 0U;
 8008df8:	2300      	movs	r3, #0
 8008dfa:	617b      	str	r3, [r7, #20]
  uint32_t cllr_offset = NodeInfo->cllr_offset;
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	613b      	str	r3, [r7, #16]

  /* Find last node in queue */
  if (pNode ==  NULL)
 8008e02:	68bb      	ldr	r3, [r7, #8]
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	d142      	bne.n	8008e8e <DMA_List_FindNode+0xaa>
  {
    /* Check that previous node is linked to the selected queue */
    while (node_idx < pQList->NodeNumber)
 8008e08:	e01d      	b.n	8008e46 <DMA_List_FindNode+0x62>
    {
      /* Get head node address */
      if (node_idx == 0U)
 8008e0a:	69fb      	ldr	r3, [r7, #28]
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d107      	bne.n	8008e20 <DMA_List_FindNode+0x3c>
      {
        currentnode_address = (uint32_t)pQList->Head & DMA_CLLR_LA;
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	461a      	mov	r2, r3
 8008e16:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 8008e1a:	4013      	ands	r3, r2
 8008e1c:	61bb      	str	r3, [r7, #24]
 8008e1e:	e00f      	b.n	8008e40 <DMA_List_FindNode+0x5c>
      }
      /* Calculate nodes addresses */
      else
      {
        previousnode_address = currentnode_address;
 8008e20:	69bb      	ldr	r3, [r7, #24]
 8008e22:	617b      	str	r3, [r7, #20]
        currentnode_address =
          ((DMA_NodeTypeDef *)(currentnode_address +
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	0c1b      	lsrs	r3, r3, #16
 8008e2a:	041b      	lsls	r3, r3, #16
          ((DMA_NodeTypeDef *)(currentnode_address +
 8008e2c:	69ba      	ldr	r2, [r7, #24]
 8008e2e:	4413      	add	r3, r2
 8008e30:	461a      	mov	r2, r3
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 8008e32:	693b      	ldr	r3, [r7, #16]
 8008e34:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
        currentnode_address =
 8008e38:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 8008e3c:	4013      	ands	r3, r2
 8008e3e:	61bb      	str	r3, [r7, #24]
      }

      /* Increment node index */
      node_idx++;
 8008e40:	69fb      	ldr	r3, [r7, #28]
 8008e42:	3301      	adds	r3, #1
 8008e44:	61fb      	str	r3, [r7, #28]
    while (node_idx < pQList->NodeNumber)
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	689b      	ldr	r3, [r3, #8]
 8008e4a:	69fa      	ldr	r2, [r7, #28]
 8008e4c:	429a      	cmp	r2, r3
 8008e4e:	d3dc      	bcc.n	8008e0a <DMA_List_FindNode+0x26>
 8008e50:	e029      	b.n	8008ea6 <DMA_List_FindNode+0xc2>
  {
    /* Check that previous node is linked to the selected queue */
    while ((node_idx < pQList->NodeNumber) && (currentnode_address != ((uint32_t)pNode & DMA_CLLR_LA)))
    {
      /* Get head node address */
      if (node_idx == 0U)
 8008e52:	69fb      	ldr	r3, [r7, #28]
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d107      	bne.n	8008e68 <DMA_List_FindNode+0x84>
      {
        currentnode_address = (uint32_t)pQList->Head & DMA_CLLR_LA;
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	461a      	mov	r2, r3
 8008e5e:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 8008e62:	4013      	ands	r3, r2
 8008e64:	61bb      	str	r3, [r7, #24]
 8008e66:	e00f      	b.n	8008e88 <DMA_List_FindNode+0xa4>
      }
      /* Calculate nodes addresses */
      else
      {
        previousnode_address = currentnode_address;
 8008e68:	69bb      	ldr	r3, [r7, #24]
 8008e6a:	617b      	str	r3, [r7, #20]
        currentnode_address =
          ((DMA_NodeTypeDef *)(currentnode_address +
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	0c1b      	lsrs	r3, r3, #16
 8008e72:	041b      	lsls	r3, r3, #16
          ((DMA_NodeTypeDef *)(currentnode_address +
 8008e74:	69ba      	ldr	r2, [r7, #24]
 8008e76:	4413      	add	r3, r2
 8008e78:	461a      	mov	r2, r3
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 8008e7a:	693b      	ldr	r3, [r7, #16]
 8008e7c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
        currentnode_address =
 8008e80:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 8008e84:	4013      	ands	r3, r2
 8008e86:	61bb      	str	r3, [r7, #24]
      }

      /* Increment node index */
      node_idx++;
 8008e88:	69fb      	ldr	r3, [r7, #28]
 8008e8a:	3301      	adds	r3, #1
 8008e8c:	61fb      	str	r3, [r7, #28]
    while ((node_idx < pQList->NodeNumber) && (currentnode_address != ((uint32_t)pNode & DMA_CLLR_LA)))
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	689b      	ldr	r3, [r3, #8]
 8008e92:	69fa      	ldr	r2, [r7, #28]
 8008e94:	429a      	cmp	r2, r3
 8008e96:	d206      	bcs.n	8008ea6 <DMA_List_FindNode+0xc2>
 8008e98:	68ba      	ldr	r2, [r7, #8]
 8008e9a:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 8008e9e:	4013      	ands	r3, r2
 8008ea0:	69ba      	ldr	r2, [r7, #24]
 8008ea2:	429a      	cmp	r2, r3
 8008ea4:	d1d5      	bne.n	8008e52 <DMA_List_FindNode+0x6e>
    }
  }

  /* Check stored address */
  if (pNode != NULL)
 8008ea6:	68bb      	ldr	r3, [r7, #8]
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d008      	beq.n	8008ebe <DMA_List_FindNode+0xda>
  {
    if (currentnode_address != ((uint32_t)pNode & DMA_CLLR_LA))
 8008eac:	68ba      	ldr	r2, [r7, #8]
 8008eae:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 8008eb2:	4013      	ands	r3, r2
 8008eb4:	69ba      	ldr	r2, [r7, #24]
 8008eb6:	429a      	cmp	r2, r3
 8008eb8:	d001      	beq.n	8008ebe <DMA_List_FindNode+0xda>
    {
      return 1U;
 8008eba:	2301      	movs	r3, #1
 8008ebc:	e02b      	b.n	8008f16 <DMA_List_FindNode+0x132>
    }
  }

  /* Update current node position */
  NodeInfo->currentnode_pos = node_idx;
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	69fa      	ldr	r2, [r7, #28]
 8008ec2:	609a      	str	r2, [r3, #8]

  /* Update previous node address */
  NodeInfo->previousnode_addr = previousnode_address | ((uint32_t)pQList->Head & DMA_CLBAR_LBA);
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	0c1b      	lsrs	r3, r3, #16
 8008eca:	041b      	lsls	r3, r3, #16
 8008ecc:	697a      	ldr	r2, [r7, #20]
 8008ece:	431a      	orrs	r2, r3
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	605a      	str	r2, [r3, #4]

  /* Update current node address */
  NodeInfo->currentnode_addr = currentnode_address | ((uint32_t)pQList->Head & DMA_CLBAR_LBA);
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	0c1b      	lsrs	r3, r3, #16
 8008eda:	041b      	lsls	r3, r3, #16
 8008edc:	69ba      	ldr	r2, [r7, #24]
 8008ede:	431a      	orrs	r2, r3
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	60da      	str	r2, [r3, #12]

  /* Update next node address */
  if (((DMA_NodeTypeDef *)NodeInfo->currentnode_addr)->LinkRegisters[cllr_offset] != 0U)
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	68db      	ldr	r3, [r3, #12]
 8008ee8:	461a      	mov	r2, r3
 8008eea:	693b      	ldr	r3, [r7, #16]
 8008eec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	d00f      	beq.n	8008f14 <DMA_List_FindNode+0x130>
  {
    NodeInfo->nextnode_addr = (((DMA_NodeTypeDef *)NodeInfo->currentnode_addr)->LinkRegisters[cllr_offset] &
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	68db      	ldr	r3, [r3, #12]
 8008ef8:	461a      	mov	r2, r3
 8008efa:	693b      	ldr	r3, [r7, #16]
 8008efc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008f00:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 8008f04:	401a      	ands	r2, r3
                               DMA_CLLR_LA) | ((uint32_t)pQList->Head & DMA_CLBAR_LBA);
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	0c1b      	lsrs	r3, r3, #16
 8008f0c:	041b      	lsls	r3, r3, #16
 8008f0e:	431a      	orrs	r2, r3
    NodeInfo->nextnode_addr = (((DMA_NodeTypeDef *)NodeInfo->currentnode_addr)->LinkRegisters[cllr_offset] &
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	611a      	str	r2, [r3, #16]
  }

  return 0U;
 8008f14:	2300      	movs	r3, #0
}
 8008f16:	4618      	mov	r0, r3
 8008f18:	3724      	adds	r7, #36	; 0x24
 8008f1a:	46bd      	mov	sp, r7
 8008f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f20:	4770      	bx	lr
	...

08008f24 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8008f24:	b480      	push	{r7}
 8008f26:	b089      	sub	sp, #36	; 0x24
 8008f28:	af00      	add	r7, sp, #0
 8008f2a:	6078      	str	r0, [r7, #4]
 8008f2c:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 8008f2e:	2300      	movs	r3, #0
 8008f30:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8008f36:	e1ba      	b.n	80092ae <HAL_GPIO_Init+0x38a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8008f38:	683b      	ldr	r3, [r7, #0]
 8008f3a:	681a      	ldr	r2, [r3, #0]
 8008f3c:	2101      	movs	r1, #1
 8008f3e:	697b      	ldr	r3, [r7, #20]
 8008f40:	fa01 f303 	lsl.w	r3, r1, r3
 8008f44:	4013      	ands	r3, r2
 8008f46:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 8008f48:	697b      	ldr	r3, [r7, #20]
 8008f4a:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	f000 81aa 	beq.w	80092a8 <HAL_GPIO_Init+0x384>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	4a55      	ldr	r2, [pc, #340]	; (80090ac <HAL_GPIO_Init+0x188>)
 8008f58:	4293      	cmp	r3, r2
 8008f5a:	d15d      	bne.n	8009018 <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 8008f62:	2201      	movs	r2, #1
 8008f64:	697b      	ldr	r3, [r7, #20]
 8008f66:	fa02 f303 	lsl.w	r3, r2, r3
 8008f6a:	43db      	mvns	r3, r3
 8008f6c:	69fa      	ldr	r2, [r7, #28]
 8008f6e:	4013      	ands	r3, r2
 8008f70:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 8008f72:	683b      	ldr	r3, [r7, #0]
 8008f74:	685b      	ldr	r3, [r3, #4]
 8008f76:	f003 0201 	and.w	r2, r3, #1
 8008f7a:	697b      	ldr	r3, [r7, #20]
 8008f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8008f80:	69fa      	ldr	r2, [r7, #28]
 8008f82:	4313      	orrs	r3, r2
 8008f84:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	69fa      	ldr	r2, [r7, #28]
 8008f8a:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 8008f8c:	4a48      	ldr	r2, [pc, #288]	; (80090b0 <HAL_GPIO_Init+0x18c>)
 8008f8e:	697b      	ldr	r3, [r7, #20]
 8008f90:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008f94:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 8008f96:	4a46      	ldr	r2, [pc, #280]	; (80090b0 <HAL_GPIO_Init+0x18c>)
 8008f98:	697b      	ldr	r3, [r7, #20]
 8008f9a:	00db      	lsls	r3, r3, #3
 8008f9c:	4413      	add	r3, r2
 8008f9e:	685b      	ldr	r3, [r3, #4]
 8008fa0:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 8008fa2:	69bb      	ldr	r3, [r7, #24]
 8008fa4:	08da      	lsrs	r2, r3, #3
 8008fa6:	693b      	ldr	r3, [r7, #16]
 8008fa8:	3208      	adds	r2, #8
 8008faa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008fae:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 8008fb0:	69bb      	ldr	r3, [r7, #24]
 8008fb2:	f003 0307 	and.w	r3, r3, #7
 8008fb6:	009b      	lsls	r3, r3, #2
 8008fb8:	220f      	movs	r2, #15
 8008fba:	fa02 f303 	lsl.w	r3, r2, r3
 8008fbe:	43db      	mvns	r3, r3
 8008fc0:	69fa      	ldr	r2, [r7, #28]
 8008fc2:	4013      	ands	r3, r2
 8008fc4:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 8008fc6:	69bb      	ldr	r3, [r7, #24]
 8008fc8:	f003 0307 	and.w	r3, r3, #7
 8008fcc:	009b      	lsls	r3, r3, #2
 8008fce:	220b      	movs	r2, #11
 8008fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8008fd4:	69fa      	ldr	r2, [r7, #28]
 8008fd6:	4313      	orrs	r3, r2
 8008fd8:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 8008fda:	69bb      	ldr	r3, [r7, #24]
 8008fdc:	08da      	lsrs	r2, r3, #3
 8008fde:	693b      	ldr	r3, [r7, #16]
 8008fe0:	3208      	adds	r2, #8
 8008fe2:	69f9      	ldr	r1, [r7, #28]
 8008fe4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8008fe8:	693b      	ldr	r3, [r7, #16]
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 8008fee:	69bb      	ldr	r3, [r7, #24]
 8008ff0:	005b      	lsls	r3, r3, #1
 8008ff2:	2203      	movs	r2, #3
 8008ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8008ff8:	43db      	mvns	r3, r3
 8008ffa:	69fa      	ldr	r2, [r7, #28]
 8008ffc:	4013      	ands	r3, r2
 8008ffe:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * 2U));
 8009000:	69bb      	ldr	r3, [r7, #24]
 8009002:	005b      	lsls	r3, r3, #1
 8009004:	2202      	movs	r2, #2
 8009006:	fa02 f303 	lsl.w	r3, r2, r3
 800900a:	69fa      	ldr	r2, [r7, #28]
 800900c:	4313      	orrs	r3, r2
 800900e:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8009010:	693b      	ldr	r3, [r7, #16]
 8009012:	69fa      	ldr	r2, [r7, #28]
 8009014:	601a      	str	r2, [r3, #0]
 8009016:	e067      	b.n	80090e8 <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8009018:	683b      	ldr	r3, [r7, #0]
 800901a:	685b      	ldr	r3, [r3, #4]
 800901c:	2b02      	cmp	r3, #2
 800901e:	d003      	beq.n	8009028 <HAL_GPIO_Init+0x104>
 8009020:	683b      	ldr	r3, [r7, #0]
 8009022:	685b      	ldr	r3, [r3, #4]
 8009024:	2b12      	cmp	r3, #18
 8009026:	d145      	bne.n	80090b4 <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8009028:	697b      	ldr	r3, [r7, #20]
 800902a:	08da      	lsrs	r2, r3, #3
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	3208      	adds	r2, #8
 8009030:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009034:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * 4U));
 8009036:	697b      	ldr	r3, [r7, #20]
 8009038:	f003 0307 	and.w	r3, r3, #7
 800903c:	009b      	lsls	r3, r3, #2
 800903e:	220f      	movs	r2, #15
 8009040:	fa02 f303 	lsl.w	r3, r2, r3
 8009044:	43db      	mvns	r3, r3
 8009046:	69fa      	ldr	r2, [r7, #28]
 8009048:	4013      	ands	r3, r2
 800904a:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 800904c:	683b      	ldr	r3, [r7, #0]
 800904e:	691b      	ldr	r3, [r3, #16]
 8009050:	f003 020f 	and.w	r2, r3, #15
 8009054:	697b      	ldr	r3, [r7, #20]
 8009056:	f003 0307 	and.w	r3, r3, #7
 800905a:	009b      	lsls	r3, r3, #2
 800905c:	fa02 f303 	lsl.w	r3, r2, r3
 8009060:	69fa      	ldr	r2, [r7, #28]
 8009062:	4313      	orrs	r3, r2
 8009064:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 8009066:	697b      	ldr	r3, [r7, #20]
 8009068:	08da      	lsrs	r2, r3, #3
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	3208      	adds	r2, #8
 800906e:	69f9      	ldr	r1, [r7, #28]
 8009070:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8009074:	693b      	ldr	r3, [r7, #16]
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 800907a:	69bb      	ldr	r3, [r7, #24]
 800907c:	005b      	lsls	r3, r3, #1
 800907e:	2203      	movs	r2, #3
 8009080:	fa02 f303 	lsl.w	r3, r2, r3
 8009084:	43db      	mvns	r3, r3
 8009086:	69fa      	ldr	r2, [r7, #28]
 8009088:	4013      	ands	r3, r2
 800908a:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 800908c:	683b      	ldr	r3, [r7, #0]
 800908e:	685b      	ldr	r3, [r3, #4]
 8009090:	f003 0203 	and.w	r2, r3, #3
 8009094:	69bb      	ldr	r3, [r7, #24]
 8009096:	005b      	lsls	r3, r3, #1
 8009098:	fa02 f303 	lsl.w	r3, r2, r3
 800909c:	69fa      	ldr	r2, [r7, #28]
 800909e:	4313      	orrs	r3, r2
 80090a0:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 80090a2:	693b      	ldr	r3, [r7, #16]
 80090a4:	69fa      	ldr	r2, [r7, #28]
 80090a6:	601a      	str	r2, [r3, #0]
 80090a8:	e01e      	b.n	80090e8 <HAL_GPIO_Init+0x1c4>
 80090aa:	bf00      	nop
 80090ac:	46020000 	.word	0x46020000
 80090b0:	08014f40 	.word	0x08014f40
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 80090b4:	693b      	ldr	r3, [r7, #16]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 80090ba:	69bb      	ldr	r3, [r7, #24]
 80090bc:	005b      	lsls	r3, r3, #1
 80090be:	2203      	movs	r2, #3
 80090c0:	fa02 f303 	lsl.w	r3, r2, r3
 80090c4:	43db      	mvns	r3, r3
 80090c6:	69fa      	ldr	r2, [r7, #28]
 80090c8:	4013      	ands	r3, r2
 80090ca:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 80090cc:	683b      	ldr	r3, [r7, #0]
 80090ce:	685b      	ldr	r3, [r3, #4]
 80090d0:	f003 0203 	and.w	r2, r3, #3
 80090d4:	69bb      	ldr	r3, [r7, #24]
 80090d6:	005b      	lsls	r3, r3, #1
 80090d8:	fa02 f303 	lsl.w	r3, r2, r3
 80090dc:	69fa      	ldr	r2, [r7, #28]
 80090de:	4313      	orrs	r3, r2
 80090e0:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 80090e2:	693b      	ldr	r3, [r7, #16]
 80090e4:	69fa      	ldr	r2, [r7, #28]
 80090e6:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80090e8:	683b      	ldr	r3, [r7, #0]
 80090ea:	685b      	ldr	r3, [r3, #4]
 80090ec:	2b01      	cmp	r3, #1
 80090ee:	d00b      	beq.n	8009108 <HAL_GPIO_Init+0x1e4>
 80090f0:	683b      	ldr	r3, [r7, #0]
 80090f2:	685b      	ldr	r3, [r3, #4]
 80090f4:	2b02      	cmp	r3, #2
 80090f6:	d007      	beq.n	8009108 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80090f8:	683b      	ldr	r3, [r7, #0]
 80090fa:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80090fc:	2b11      	cmp	r3, #17
 80090fe:	d003      	beq.n	8009108 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8009100:	683b      	ldr	r3, [r7, #0]
 8009102:	685b      	ldr	r3, [r3, #4]
 8009104:	2b12      	cmp	r3, #18
 8009106:	d130      	bne.n	800916a <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 8009108:	693b      	ldr	r3, [r7, #16]
 800910a:	689b      	ldr	r3, [r3, #8]
 800910c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * 2U));
 800910e:	69bb      	ldr	r3, [r7, #24]
 8009110:	005b      	lsls	r3, r3, #1
 8009112:	2203      	movs	r2, #3
 8009114:	fa02 f303 	lsl.w	r3, r2, r3
 8009118:	43db      	mvns	r3, r3
 800911a:	69fa      	ldr	r2, [r7, #28]
 800911c:	4013      	ands	r3, r2
 800911e:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * 2U));
 8009120:	683b      	ldr	r3, [r7, #0]
 8009122:	68da      	ldr	r2, [r3, #12]
 8009124:	69bb      	ldr	r3, [r7, #24]
 8009126:	005b      	lsls	r3, r3, #1
 8009128:	fa02 f303 	lsl.w	r3, r2, r3
 800912c:	69fa      	ldr	r2, [r7, #28]
 800912e:	4313      	orrs	r3, r2
 8009130:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 8009132:	693b      	ldr	r3, [r7, #16]
 8009134:	69fa      	ldr	r2, [r7, #28]
 8009136:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 8009138:	693b      	ldr	r3, [r7, #16]
 800913a:	685b      	ldr	r3, [r3, #4]
 800913c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 800913e:	2201      	movs	r2, #1
 8009140:	69bb      	ldr	r3, [r7, #24]
 8009142:	fa02 f303 	lsl.w	r3, r2, r3
 8009146:	43db      	mvns	r3, r3
 8009148:	69fa      	ldr	r2, [r7, #28]
 800914a:	4013      	ands	r3, r2
 800914c:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 800914e:	683b      	ldr	r3, [r7, #0]
 8009150:	685b      	ldr	r3, [r3, #4]
 8009152:	091b      	lsrs	r3, r3, #4
 8009154:	f003 0201 	and.w	r2, r3, #1
 8009158:	69bb      	ldr	r3, [r7, #24]
 800915a:	fa02 f303 	lsl.w	r3, r2, r3
 800915e:	69fa      	ldr	r2, [r7, #28]
 8009160:	4313      	orrs	r3, r2
 8009162:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 8009164:	693b      	ldr	r3, [r7, #16]
 8009166:	69fa      	ldr	r2, [r7, #28]
 8009168:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 800916a:	683b      	ldr	r3, [r7, #0]
 800916c:	685b      	ldr	r3, [r3, #4]
 800916e:	2b03      	cmp	r3, #3
 8009170:	d017      	beq.n	80091a2 <HAL_GPIO_Init+0x27e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 8009172:	693b      	ldr	r3, [r7, #16]
 8009174:	68db      	ldr	r3, [r3, #12]
 8009176:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * 2U));
 8009178:	69bb      	ldr	r3, [r7, #24]
 800917a:	005b      	lsls	r3, r3, #1
 800917c:	2203      	movs	r2, #3
 800917e:	fa02 f303 	lsl.w	r3, r2, r3
 8009182:	43db      	mvns	r3, r3
 8009184:	69fa      	ldr	r2, [r7, #28]
 8009186:	4013      	ands	r3, r2
 8009188:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * 2U));
 800918a:	683b      	ldr	r3, [r7, #0]
 800918c:	689a      	ldr	r2, [r3, #8]
 800918e:	69bb      	ldr	r3, [r7, #24]
 8009190:	005b      	lsls	r3, r3, #1
 8009192:	fa02 f303 	lsl.w	r3, r2, r3
 8009196:	69fa      	ldr	r2, [r7, #28]
 8009198:	4313      	orrs	r3, r2
 800919a:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 800919c:	693b      	ldr	r3, [r7, #16]
 800919e:	69fa      	ldr	r2, [r7, #28]
 80091a0:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80091a2:	683b      	ldr	r3, [r7, #0]
 80091a4:	685b      	ldr	r3, [r3, #4]
 80091a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d07c      	beq.n	80092a8 <HAL_GPIO_Init+0x384>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 80091ae:	4a47      	ldr	r2, [pc, #284]	; (80092cc <HAL_GPIO_Init+0x3a8>)
 80091b0:	697b      	ldr	r3, [r7, #20]
 80091b2:	089b      	lsrs	r3, r3, #2
 80091b4:	3318      	adds	r3, #24
 80091b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80091ba:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 80091bc:	697b      	ldr	r3, [r7, #20]
 80091be:	f003 0303 	and.w	r3, r3, #3
 80091c2:	00db      	lsls	r3, r3, #3
 80091c4:	220f      	movs	r2, #15
 80091c6:	fa02 f303 	lsl.w	r3, r2, r3
 80091ca:	43db      	mvns	r3, r3
 80091cc:	69fa      	ldr	r2, [r7, #28]
 80091ce:	4013      	ands	r3, r2
 80091d0:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	0a9a      	lsrs	r2, r3, #10
 80091d6:	4b3e      	ldr	r3, [pc, #248]	; (80092d0 <HAL_GPIO_Init+0x3ac>)
 80091d8:	4013      	ands	r3, r2
 80091da:	697a      	ldr	r2, [r7, #20]
 80091dc:	f002 0203 	and.w	r2, r2, #3
 80091e0:	00d2      	lsls	r2, r2, #3
 80091e2:	4093      	lsls	r3, r2
 80091e4:	69fa      	ldr	r2, [r7, #28]
 80091e6:	4313      	orrs	r3, r2
 80091e8:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 80091ea:	4938      	ldr	r1, [pc, #224]	; (80092cc <HAL_GPIO_Init+0x3a8>)
 80091ec:	697b      	ldr	r3, [r7, #20]
 80091ee:	089b      	lsrs	r3, r3, #2
 80091f0:	3318      	adds	r3, #24
 80091f2:	69fa      	ldr	r2, [r7, #28]
 80091f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 80091f8:	4b34      	ldr	r3, [pc, #208]	; (80092cc <HAL_GPIO_Init+0x3a8>)
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	43db      	mvns	r3, r3
 8009202:	69fa      	ldr	r2, [r7, #28]
 8009204:	4013      	ands	r3, r2
 8009206:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8009208:	683b      	ldr	r3, [r7, #0]
 800920a:	685b      	ldr	r3, [r3, #4]
 800920c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009210:	2b00      	cmp	r3, #0
 8009212:	d003      	beq.n	800921c <HAL_GPIO_Init+0x2f8>
        {
          tmp |= iocurrent;
 8009214:	69fa      	ldr	r2, [r7, #28]
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	4313      	orrs	r3, r2
 800921a:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 800921c:	4a2b      	ldr	r2, [pc, #172]	; (80092cc <HAL_GPIO_Init+0x3a8>)
 800921e:	69fb      	ldr	r3, [r7, #28]
 8009220:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 8009222:	4b2a      	ldr	r3, [pc, #168]	; (80092cc <HAL_GPIO_Init+0x3a8>)
 8009224:	685b      	ldr	r3, [r3, #4]
 8009226:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	43db      	mvns	r3, r3
 800922c:	69fa      	ldr	r2, [r7, #28]
 800922e:	4013      	ands	r3, r2
 8009230:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8009232:	683b      	ldr	r3, [r7, #0]
 8009234:	685b      	ldr	r3, [r3, #4]
 8009236:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800923a:	2b00      	cmp	r3, #0
 800923c:	d003      	beq.n	8009246 <HAL_GPIO_Init+0x322>
        {
          tmp |= iocurrent;
 800923e:	69fa      	ldr	r2, [r7, #28]
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	4313      	orrs	r3, r2
 8009244:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 8009246:	4a21      	ldr	r2, [pc, #132]	; (80092cc <HAL_GPIO_Init+0x3a8>)
 8009248:	69fb      	ldr	r3, [r7, #28]
 800924a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 800924c:	4b1f      	ldr	r3, [pc, #124]	; (80092cc <HAL_GPIO_Init+0x3a8>)
 800924e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009252:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8009254:	68fb      	ldr	r3, [r7, #12]
 8009256:	43db      	mvns	r3, r3
 8009258:	69fa      	ldr	r2, [r7, #28]
 800925a:	4013      	ands	r3, r2
 800925c:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800925e:	683b      	ldr	r3, [r7, #0]
 8009260:	685b      	ldr	r3, [r3, #4]
 8009262:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009266:	2b00      	cmp	r3, #0
 8009268:	d003      	beq.n	8009272 <HAL_GPIO_Init+0x34e>
        {
          tmp |= iocurrent;
 800926a:	69fa      	ldr	r2, [r7, #28]
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	4313      	orrs	r3, r2
 8009270:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 8009272:	4a16      	ldr	r2, [pc, #88]	; (80092cc <HAL_GPIO_Init+0x3a8>)
 8009274:	69fb      	ldr	r3, [r7, #28]
 8009276:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        tmp = EXTI->IMR1;
 800927a:	4b14      	ldr	r3, [pc, #80]	; (80092cc <HAL_GPIO_Init+0x3a8>)
 800927c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009280:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	43db      	mvns	r3, r3
 8009286:	69fa      	ldr	r2, [r7, #28]
 8009288:	4013      	ands	r3, r2
 800928a:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800928c:	683b      	ldr	r3, [r7, #0]
 800928e:	685b      	ldr	r3, [r3, #4]
 8009290:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009294:	2b00      	cmp	r3, #0
 8009296:	d003      	beq.n	80092a0 <HAL_GPIO_Init+0x37c>
        {
          tmp |= iocurrent;
 8009298:	69fa      	ldr	r2, [r7, #28]
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	4313      	orrs	r3, r2
 800929e:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 80092a0:	4a0a      	ldr	r2, [pc, #40]	; (80092cc <HAL_GPIO_Init+0x3a8>)
 80092a2:	69fb      	ldr	r3, [r7, #28]
 80092a4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      }
    }
    position++;
 80092a8:	697b      	ldr	r3, [r7, #20]
 80092aa:	3301      	adds	r3, #1
 80092ac:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80092ae:	683b      	ldr	r3, [r7, #0]
 80092b0:	681a      	ldr	r2, [r3, #0]
 80092b2:	697b      	ldr	r3, [r7, #20]
 80092b4:	fa22 f303 	lsr.w	r3, r2, r3
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	f47f ae3d 	bne.w	8008f38 <HAL_GPIO_Init+0x14>
  }
}
 80092be:	bf00      	nop
 80092c0:	bf00      	nop
 80092c2:	3724      	adds	r7, #36	; 0x24
 80092c4:	46bd      	mov	sp, r7
 80092c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ca:	4770      	bx	lr
 80092cc:	46022000 	.word	0x46022000
 80092d0:	002f7f7f 	.word	0x002f7f7f

080092d4 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80092d4:	b480      	push	{r7}
 80092d6:	b089      	sub	sp, #36	; 0x24
 80092d8:	af00      	add	r7, sp, #0
 80092da:	6078      	str	r0, [r7, #4]
 80092dc:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 80092de:	2300      	movs	r3, #0
 80092e0:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	617b      	str	r3, [r7, #20]

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0U)
 80092e6:	e0bc      	b.n	8009462 <HAL_GPIO_DeInit+0x18e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1UL << position);
 80092e8:	2201      	movs	r2, #1
 80092ea:	69bb      	ldr	r3, [r7, #24]
 80092ec:	fa02 f303 	lsl.w	r3, r2, r3
 80092f0:	683a      	ldr	r2, [r7, #0]
 80092f2:	4013      	ands	r3, r2
 80092f4:	613b      	str	r3, [r7, #16]

    /*Save Pin Position */
    pin_position = position;
 80092f6:	69bb      	ldr	r3, [r7, #24]
 80092f8:	61fb      	str	r3, [r7, #28]

    if (iocurrent != 0U)
 80092fa:	693b      	ldr	r3, [r7, #16]
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	f000 80ad 	beq.w	800945c <HAL_GPIO_DeInit+0x188>
    {
      /* In case of LPGPIO port selected */
      if (GPIOx == LPGPIO1)
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	4a5e      	ldr	r2, [pc, #376]	; (8009480 <HAL_GPIO_DeInit+0x1ac>)
 8009306:	4293      	cmp	r3, r2
 8009308:	d115      	bne.n	8009336 <HAL_GPIO_DeInit+0x62>
      {
        /* Configure LP/IO in Input Mode */
        p_gpio  = LPGPIO_Map[pin_position].GPIO_PORT;
 800930a:	4a5e      	ldr	r2, [pc, #376]	; (8009484 <HAL_GPIO_DeInit+0x1b0>)
 800930c:	69fb      	ldr	r3, [r7, #28]
 800930e:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8009312:	617b      	str	r3, [r7, #20]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 8009314:	4a5b      	ldr	r2, [pc, #364]	; (8009484 <HAL_GPIO_DeInit+0x1b0>)
 8009316:	69bb      	ldr	r3, [r7, #24]
 8009318:	00db      	lsls	r3, r3, #3
 800931a:	4413      	add	r3, r2
 800931c:	685b      	ldr	r3, [r3, #4]
 800931e:	61fb      	str	r3, [r7, #28]
        LPGPIO1->MODER &= ~(1U << pin_position);
 8009320:	4b57      	ldr	r3, [pc, #348]	; (8009480 <HAL_GPIO_DeInit+0x1ac>)
 8009322:	681a      	ldr	r2, [r3, #0]
 8009324:	2101      	movs	r1, #1
 8009326:	69fb      	ldr	r3, [r7, #28]
 8009328:	fa01 f303 	lsl.w	r3, r1, r3
 800932c:	43db      	mvns	r3, r3
 800932e:	4954      	ldr	r1, [pc, #336]	; (8009480 <HAL_GPIO_DeInit+0x1ac>)
 8009330:	4013      	ands	r3, r2
 8009332:	600b      	str	r3, [r1, #0]
 8009334:	e053      	b.n	80093de <HAL_GPIO_DeInit+0x10a>
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /*------------------------- EXTI Mode Configuration --------------------*/
        /* Clear the External Interrupt or Event for the current IO */
        tmp = EXTI->EXTICR[position >> 2U];
 8009336:	4a54      	ldr	r2, [pc, #336]	; (8009488 <HAL_GPIO_DeInit+0x1b4>)
 8009338:	69bb      	ldr	r3, [r7, #24]
 800933a:	089b      	lsrs	r3, r3, #2
 800933c:	3318      	adds	r3, #24
 800933e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009342:	60fb      	str	r3, [r7, #12]
        tmp &= ((0x0FUL) << (8U * (position & 0x03U)));
 8009344:	69bb      	ldr	r3, [r7, #24]
 8009346:	f003 0303 	and.w	r3, r3, #3
 800934a:	00db      	lsls	r3, r3, #3
 800934c:	220f      	movs	r2, #15
 800934e:	fa02 f303 	lsl.w	r3, r2, r3
 8009352:	68fa      	ldr	r2, [r7, #12]
 8009354:	4013      	ands	r3, r2
 8009356:	60fb      	str	r3, [r7, #12]
        if (tmp == (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U))))
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	0a9a      	lsrs	r2, r3, #10
 800935c:	4b4b      	ldr	r3, [pc, #300]	; (800948c <HAL_GPIO_DeInit+0x1b8>)
 800935e:	4013      	ands	r3, r2
 8009360:	69ba      	ldr	r2, [r7, #24]
 8009362:	f002 0203 	and.w	r2, r2, #3
 8009366:	00d2      	lsls	r2, r2, #3
 8009368:	4093      	lsls	r3, r2
 800936a:	68fa      	ldr	r2, [r7, #12]
 800936c:	429a      	cmp	r2, r3
 800936e:	d136      	bne.n	80093de <HAL_GPIO_DeInit+0x10a>
        {
          /* Clear EXTI line configuration */
          EXTI->IMR1 &= ~(iocurrent);
 8009370:	4b45      	ldr	r3, [pc, #276]	; (8009488 <HAL_GPIO_DeInit+0x1b4>)
 8009372:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8009376:	693b      	ldr	r3, [r7, #16]
 8009378:	43db      	mvns	r3, r3
 800937a:	4943      	ldr	r1, [pc, #268]	; (8009488 <HAL_GPIO_DeInit+0x1b4>)
 800937c:	4013      	ands	r3, r2
 800937e:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
          EXTI->EMR1 &= ~(iocurrent);
 8009382:	4b41      	ldr	r3, [pc, #260]	; (8009488 <HAL_GPIO_DeInit+0x1b4>)
 8009384:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8009388:	693b      	ldr	r3, [r7, #16]
 800938a:	43db      	mvns	r3, r3
 800938c:	493e      	ldr	r1, [pc, #248]	; (8009488 <HAL_GPIO_DeInit+0x1b4>)
 800938e:	4013      	ands	r3, r2
 8009390:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

          /* Clear Rising Falling edge configuration */
          EXTI->RTSR1 &= ~(iocurrent);
 8009394:	4b3c      	ldr	r3, [pc, #240]	; (8009488 <HAL_GPIO_DeInit+0x1b4>)
 8009396:	681a      	ldr	r2, [r3, #0]
 8009398:	693b      	ldr	r3, [r7, #16]
 800939a:	43db      	mvns	r3, r3
 800939c:	493a      	ldr	r1, [pc, #232]	; (8009488 <HAL_GPIO_DeInit+0x1b4>)
 800939e:	4013      	ands	r3, r2
 80093a0:	600b      	str	r3, [r1, #0]
          EXTI->FTSR1 &= ~(iocurrent);
 80093a2:	4b39      	ldr	r3, [pc, #228]	; (8009488 <HAL_GPIO_DeInit+0x1b4>)
 80093a4:	685a      	ldr	r2, [r3, #4]
 80093a6:	693b      	ldr	r3, [r7, #16]
 80093a8:	43db      	mvns	r3, r3
 80093aa:	4937      	ldr	r1, [pc, #220]	; (8009488 <HAL_GPIO_DeInit+0x1b4>)
 80093ac:	4013      	ands	r3, r2
 80093ae:	604b      	str	r3, [r1, #4]

          tmp = (0x0FUL) << (8U * (position & 0x03U));
 80093b0:	69bb      	ldr	r3, [r7, #24]
 80093b2:	f003 0303 	and.w	r3, r3, #3
 80093b6:	00db      	lsls	r3, r3, #3
 80093b8:	220f      	movs	r2, #15
 80093ba:	fa02 f303 	lsl.w	r3, r2, r3
 80093be:	60fb      	str	r3, [r7, #12]
          EXTI->EXTICR[position >> 2U] &= ~tmp;
 80093c0:	4a31      	ldr	r2, [pc, #196]	; (8009488 <HAL_GPIO_DeInit+0x1b4>)
 80093c2:	69bb      	ldr	r3, [r7, #24]
 80093c4:	089b      	lsrs	r3, r3, #2
 80093c6:	3318      	adds	r3, #24
 80093c8:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	43da      	mvns	r2, r3
 80093d0:	482d      	ldr	r0, [pc, #180]	; (8009488 <HAL_GPIO_DeInit+0x1b4>)
 80093d2:	69bb      	ldr	r3, [r7, #24]
 80093d4:	089b      	lsrs	r3, r3, #2
 80093d6:	400a      	ands	r2, r1
 80093d8:	3318      	adds	r3, #24
 80093da:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
        }
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      p_gpio->MODER |= (GPIO_MODER_MODE0 << (pin_position * 2U));
 80093de:	697b      	ldr	r3, [r7, #20]
 80093e0:	681a      	ldr	r2, [r3, #0]
 80093e2:	69fb      	ldr	r3, [r7, #28]
 80093e4:	005b      	lsls	r3, r3, #1
 80093e6:	2103      	movs	r1, #3
 80093e8:	fa01 f303 	lsl.w	r3, r1, r3
 80093ec:	431a      	orrs	r2, r3
 80093ee:	697b      	ldr	r3, [r7, #20]
 80093f0:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      p_gpio->AFR[pin_position >> 3U] &= ~(0x0FUL << ((pin_position & 0x07U) * 4U));
 80093f2:	69fb      	ldr	r3, [r7, #28]
 80093f4:	08da      	lsrs	r2, r3, #3
 80093f6:	697b      	ldr	r3, [r7, #20]
 80093f8:	3208      	adds	r2, #8
 80093fa:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80093fe:	69fb      	ldr	r3, [r7, #28]
 8009400:	f003 0307 	and.w	r3, r3, #7
 8009404:	009b      	lsls	r3, r3, #2
 8009406:	220f      	movs	r2, #15
 8009408:	fa02 f303 	lsl.w	r3, r2, r3
 800940c:	43db      	mvns	r3, r3
 800940e:	69fa      	ldr	r2, [r7, #28]
 8009410:	08d2      	lsrs	r2, r2, #3
 8009412:	4019      	ands	r1, r3
 8009414:	697b      	ldr	r3, [r7, #20]
 8009416:	3208      	adds	r2, #8
 8009418:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      p_gpio->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * 2U));
 800941c:	697b      	ldr	r3, [r7, #20]
 800941e:	689a      	ldr	r2, [r3, #8]
 8009420:	69fb      	ldr	r3, [r7, #28]
 8009422:	005b      	lsls	r3, r3, #1
 8009424:	2103      	movs	r1, #3
 8009426:	fa01 f303 	lsl.w	r3, r1, r3
 800942a:	43db      	mvns	r3, r3
 800942c:	401a      	ands	r2, r3
 800942e:	697b      	ldr	r3, [r7, #20]
 8009430:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      p_gpio->OTYPER  &= ~(GPIO_OTYPER_OT0 << pin_position);
 8009432:	697b      	ldr	r3, [r7, #20]
 8009434:	685a      	ldr	r2, [r3, #4]
 8009436:	2101      	movs	r1, #1
 8009438:	69fb      	ldr	r3, [r7, #28]
 800943a:	fa01 f303 	lsl.w	r3, r1, r3
 800943e:	43db      	mvns	r3, r3
 8009440:	401a      	ands	r2, r3
 8009442:	697b      	ldr	r3, [r7, #20]
 8009444:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      p_gpio->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (pin_position * 2U));
 8009446:	697b      	ldr	r3, [r7, #20]
 8009448:	68da      	ldr	r2, [r3, #12]
 800944a:	69fb      	ldr	r3, [r7, #28]
 800944c:	005b      	lsls	r3, r3, #1
 800944e:	2103      	movs	r1, #3
 8009450:	fa01 f303 	lsl.w	r3, r1, r3
 8009454:	43db      	mvns	r3, r3
 8009456:	401a      	ands	r2, r3
 8009458:	697b      	ldr	r3, [r7, #20]
 800945a:	60da      	str	r2, [r3, #12]
    }

    position++;
 800945c:	69bb      	ldr	r3, [r7, #24]
 800945e:	3301      	adds	r3, #1
 8009460:	61bb      	str	r3, [r7, #24]
  while ((GPIO_Pin >> position) != 0U)
 8009462:	683a      	ldr	r2, [r7, #0]
 8009464:	69bb      	ldr	r3, [r7, #24]
 8009466:	fa22 f303 	lsr.w	r3, r2, r3
 800946a:	2b00      	cmp	r3, #0
 800946c:	f47f af3c 	bne.w	80092e8 <HAL_GPIO_DeInit+0x14>
  }
}
 8009470:	bf00      	nop
 8009472:	bf00      	nop
 8009474:	3724      	adds	r7, #36	; 0x24
 8009476:	46bd      	mov	sp, r7
 8009478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800947c:	4770      	bx	lr
 800947e:	bf00      	nop
 8009480:	46020000 	.word	0x46020000
 8009484:	08014f40 	.word	0x08014f40
 8009488:	46022000 	.word	0x46022000
 800948c:	002f7f7f 	.word	0x002f7f7f

08009490 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8009490:	b480      	push	{r7}
 8009492:	b085      	sub	sp, #20
 8009494:	af00      	add	r7, sp, #0
 8009496:	6078      	str	r0, [r7, #4]
 8009498:	460b      	mov	r3, r1
 800949a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0U)
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	691a      	ldr	r2, [r3, #16]
 80094a0:	887b      	ldrh	r3, [r7, #2]
 80094a2:	4013      	ands	r3, r2
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	d002      	beq.n	80094ae <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80094a8:	2301      	movs	r3, #1
 80094aa:	73fb      	strb	r3, [r7, #15]
 80094ac:	e001      	b.n	80094b2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80094ae:	2300      	movs	r3, #0
 80094b0:	73fb      	strb	r3, [r7, #15]
  }

  return bitstatus;
 80094b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80094b4:	4618      	mov	r0, r3
 80094b6:	3714      	adds	r7, #20
 80094b8:	46bd      	mov	sp, r7
 80094ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094be:	4770      	bx	lr

080094c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80094c0:	b480      	push	{r7}
 80094c2:	b083      	sub	sp, #12
 80094c4:	af00      	add	r7, sp, #0
 80094c6:	6078      	str	r0, [r7, #4]
 80094c8:	460b      	mov	r3, r1
 80094ca:	807b      	strh	r3, [r7, #2]
 80094cc:	4613      	mov	r3, r2
 80094ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80094d0:	787b      	ldrb	r3, [r7, #1]
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	d003      	beq.n	80094de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80094d6:	887a      	ldrh	r2, [r7, #2]
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
  }
}
 80094dc:	e002      	b.n	80094e4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
 80094de:	887a      	ldrh	r2, [r7, #2]
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80094e4:	bf00      	nop
 80094e6:	370c      	adds	r7, #12
 80094e8:	46bd      	mov	sp, r7
 80094ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ee:	4770      	bx	lr

080094f0 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80094f0:	b480      	push	{r7}
 80094f2:	b085      	sub	sp, #20
 80094f4:	af00      	add	r7, sp, #0
 80094f6:	6078      	str	r0, [r7, #4]
 80094f8:	460b      	mov	r3, r1
 80094fa:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	695b      	ldr	r3, [r3, #20]
 8009500:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8009502:	887a      	ldrh	r2, [r7, #2]
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	4013      	ands	r3, r2
 8009508:	041a      	lsls	r2, r3, #16
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	43d9      	mvns	r1, r3
 800950e:	887b      	ldrh	r3, [r7, #2]
 8009510:	400b      	ands	r3, r1
 8009512:	431a      	orrs	r2, r3
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	619a      	str	r2, [r3, #24]
}
 8009518:	bf00      	nop
 800951a:	3714      	adds	r7, #20
 800951c:	46bd      	mov	sp, r7
 800951e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009522:	4770      	bx	lr

08009524 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8009524:	b580      	push	{r7, lr}
 8009526:	b082      	sub	sp, #8
 8009528:	af00      	add	r7, sp, #0
 800952a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	2b00      	cmp	r3, #0
 8009530:	d101      	bne.n	8009536 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8009532:	2301      	movs	r3, #1
 8009534:	e081      	b.n	800963a <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800953c:	b2db      	uxtb	r3, r3
 800953e:	2b00      	cmp	r3, #0
 8009540:	d106      	bne.n	8009550 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	2200      	movs	r2, #0
 8009546:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800954a:	6878      	ldr	r0, [r7, #4]
 800954c:	f7fc fa9a 	bl	8005a84 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	2224      	movs	r2, #36	; 0x24
 8009554:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	681a      	ldr	r2, [r3, #0]
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	f022 0201 	bic.w	r2, r2, #1
 8009566:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	685a      	ldr	r2, [r3, #4]
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8009574:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	689a      	ldr	r2, [r3, #8]
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009584:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	68db      	ldr	r3, [r3, #12]
 800958a:	2b01      	cmp	r3, #1
 800958c:	d107      	bne.n	800959e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	689a      	ldr	r2, [r3, #8]
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800959a:	609a      	str	r2, [r3, #8]
 800959c:	e006      	b.n	80095ac <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	689a      	ldr	r2, [r3, #8]
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80095aa:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	68db      	ldr	r3, [r3, #12]
 80095b0:	2b02      	cmp	r3, #2
 80095b2:	d104      	bne.n	80095be <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80095bc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	685b      	ldr	r3, [r3, #4]
 80095c4:	687a      	ldr	r2, [r7, #4]
 80095c6:	6812      	ldr	r2, [r2, #0]
 80095c8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80095cc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80095d0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	68da      	ldr	r2, [r3, #12]
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80095e0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	691a      	ldr	r2, [r3, #16]
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	695b      	ldr	r3, [r3, #20]
 80095ea:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	699b      	ldr	r3, [r3, #24]
 80095f2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	430a      	orrs	r2, r1
 80095fa:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	69d9      	ldr	r1, [r3, #28]
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	6a1a      	ldr	r2, [r3, #32]
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	430a      	orrs	r2, r1
 800960a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	681a      	ldr	r2, [r3, #0]
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	f042 0201 	orr.w	r2, r2, #1
 800961a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	2200      	movs	r2, #0
 8009620:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	2220      	movs	r2, #32
 8009626:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	2200      	movs	r2, #0
 800962e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	2200      	movs	r2, #0
 8009634:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8009638:	2300      	movs	r3, #0
}
 800963a:	4618      	mov	r0, r3
 800963c:	3708      	adds	r7, #8
 800963e:	46bd      	mov	sp, r7
 8009640:	bd80      	pop	{r7, pc}

08009642 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8009642:	b580      	push	{r7, lr}
 8009644:	b082      	sub	sp, #8
 8009646:	af00      	add	r7, sp, #0
 8009648:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	2b00      	cmp	r3, #0
 800964e:	d101      	bne.n	8009654 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8009650:	2301      	movs	r3, #1
 8009652:	e021      	b.n	8009698 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	2224      	movs	r2, #36	; 0x24
 8009658:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	681a      	ldr	r2, [r3, #0]
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	f022 0201 	bic.w	r2, r2, #1
 800966a:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800966c:	6878      	ldr	r0, [r7, #4]
 800966e:	f7fc facf 	bl	8005c10 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	2200      	movs	r2, #0
 8009676:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	2200      	movs	r2, #0
 800967c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	2200      	movs	r2, #0
 8009684:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	2200      	movs	r2, #0
 800968a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	2200      	movs	r2, #0
 8009692:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8009696:	2300      	movs	r3, #0
}
 8009698:	4618      	mov	r0, r3
 800969a:	3708      	adds	r7, #8
 800969c:	46bd      	mov	sp, r7
 800969e:	bd80      	pop	{r7, pc}

080096a0 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80096a0:	b580      	push	{r7, lr}
 80096a2:	b088      	sub	sp, #32
 80096a4:	af02      	add	r7, sp, #8
 80096a6:	60f8      	str	r0, [r7, #12]
 80096a8:	4608      	mov	r0, r1
 80096aa:	4611      	mov	r1, r2
 80096ac:	461a      	mov	r2, r3
 80096ae:	4603      	mov	r3, r0
 80096b0:	817b      	strh	r3, [r7, #10]
 80096b2:	460b      	mov	r3, r1
 80096b4:	813b      	strh	r3, [r7, #8]
 80096b6:	4613      	mov	r3, r2
 80096b8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80096ba:	68fb      	ldr	r3, [r7, #12]
 80096bc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80096c0:	b2db      	uxtb	r3, r3
 80096c2:	2b20      	cmp	r3, #32
 80096c4:	f040 80f9 	bne.w	80098ba <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80096c8:	6a3b      	ldr	r3, [r7, #32]
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	d002      	beq.n	80096d4 <HAL_I2C_Mem_Write+0x34>
 80096ce:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	d105      	bne.n	80096e0 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80096d4:	68fb      	ldr	r3, [r7, #12]
 80096d6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80096da:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80096dc:	2301      	movs	r3, #1
 80096de:	e0ed      	b.n	80098bc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80096e0:	68fb      	ldr	r3, [r7, #12]
 80096e2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80096e6:	2b01      	cmp	r3, #1
 80096e8:	d101      	bne.n	80096ee <HAL_I2C_Mem_Write+0x4e>
 80096ea:	2302      	movs	r3, #2
 80096ec:	e0e6      	b.n	80098bc <HAL_I2C_Mem_Write+0x21c>
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	2201      	movs	r2, #1
 80096f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80096f6:	f7fd fb4b 	bl	8006d90 <HAL_GetTick>
 80096fa:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80096fc:	697b      	ldr	r3, [r7, #20]
 80096fe:	9300      	str	r3, [sp, #0]
 8009700:	2319      	movs	r3, #25
 8009702:	2201      	movs	r2, #1
 8009704:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8009708:	68f8      	ldr	r0, [r7, #12]
 800970a:	f000 fac3 	bl	8009c94 <I2C_WaitOnFlagUntilTimeout>
 800970e:	4603      	mov	r3, r0
 8009710:	2b00      	cmp	r3, #0
 8009712:	d001      	beq.n	8009718 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8009714:	2301      	movs	r3, #1
 8009716:	e0d1      	b.n	80098bc <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	2221      	movs	r2, #33	; 0x21
 800971c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8009720:	68fb      	ldr	r3, [r7, #12]
 8009722:	2240      	movs	r2, #64	; 0x40
 8009724:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009728:	68fb      	ldr	r3, [r7, #12]
 800972a:	2200      	movs	r2, #0
 800972c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	6a3a      	ldr	r2, [r7, #32]
 8009732:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8009734:	68fb      	ldr	r3, [r7, #12]
 8009736:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8009738:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800973a:	68fb      	ldr	r3, [r7, #12]
 800973c:	2200      	movs	r2, #0
 800973e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8009740:	88f8      	ldrh	r0, [r7, #6]
 8009742:	893a      	ldrh	r2, [r7, #8]
 8009744:	8979      	ldrh	r1, [r7, #10]
 8009746:	697b      	ldr	r3, [r7, #20]
 8009748:	9301      	str	r3, [sp, #4]
 800974a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800974c:	9300      	str	r3, [sp, #0]
 800974e:	4603      	mov	r3, r0
 8009750:	68f8      	ldr	r0, [r7, #12]
 8009752:	f000 f9d3 	bl	8009afc <I2C_RequestMemoryWrite>
 8009756:	4603      	mov	r3, r0
 8009758:	2b00      	cmp	r3, #0
 800975a:	d005      	beq.n	8009768 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800975c:	68fb      	ldr	r3, [r7, #12]
 800975e:	2200      	movs	r2, #0
 8009760:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8009764:	2301      	movs	r3, #1
 8009766:	e0a9      	b.n	80098bc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009768:	68fb      	ldr	r3, [r7, #12]
 800976a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800976c:	b29b      	uxth	r3, r3
 800976e:	2bff      	cmp	r3, #255	; 0xff
 8009770:	d90e      	bls.n	8009790 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8009772:	68fb      	ldr	r3, [r7, #12]
 8009774:	22ff      	movs	r2, #255	; 0xff
 8009776:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8009778:	68fb      	ldr	r3, [r7, #12]
 800977a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800977c:	b2da      	uxtb	r2, r3
 800977e:	8979      	ldrh	r1, [r7, #10]
 8009780:	2300      	movs	r3, #0
 8009782:	9300      	str	r3, [sp, #0]
 8009784:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009788:	68f8      	ldr	r0, [r7, #12]
 800978a:	f000 fc2b 	bl	8009fe4 <I2C_TransferConfig>
 800978e:	e00f      	b.n	80097b0 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8009790:	68fb      	ldr	r3, [r7, #12]
 8009792:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009794:	b29a      	uxth	r2, r3
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800979a:	68fb      	ldr	r3, [r7, #12]
 800979c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800979e:	b2da      	uxtb	r2, r3
 80097a0:	8979      	ldrh	r1, [r7, #10]
 80097a2:	2300      	movs	r3, #0
 80097a4:	9300      	str	r3, [sp, #0]
 80097a6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80097aa:	68f8      	ldr	r0, [r7, #12]
 80097ac:	f000 fc1a 	bl	8009fe4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80097b0:	697a      	ldr	r2, [r7, #20]
 80097b2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80097b4:	68f8      	ldr	r0, [r7, #12]
 80097b6:	f000 faad 	bl	8009d14 <I2C_WaitOnTXISFlagUntilTimeout>
 80097ba:	4603      	mov	r3, r0
 80097bc:	2b00      	cmp	r3, #0
 80097be:	d001      	beq.n	80097c4 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80097c0:	2301      	movs	r3, #1
 80097c2:	e07b      	b.n	80098bc <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097c8:	781a      	ldrb	r2, [r3, #0]
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097d4:	1c5a      	adds	r2, r3, #1
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80097da:	68fb      	ldr	r3, [r7, #12]
 80097dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80097de:	b29b      	uxth	r3, r3
 80097e0:	3b01      	subs	r3, #1
 80097e2:	b29a      	uxth	r2, r3
 80097e4:	68fb      	ldr	r3, [r7, #12]
 80097e6:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80097e8:	68fb      	ldr	r3, [r7, #12]
 80097ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80097ec:	3b01      	subs	r3, #1
 80097ee:	b29a      	uxth	r2, r3
 80097f0:	68fb      	ldr	r3, [r7, #12]
 80097f2:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80097f4:	68fb      	ldr	r3, [r7, #12]
 80097f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80097f8:	b29b      	uxth	r3, r3
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	d034      	beq.n	8009868 <HAL_I2C_Mem_Write+0x1c8>
 80097fe:	68fb      	ldr	r3, [r7, #12]
 8009800:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009802:	2b00      	cmp	r3, #0
 8009804:	d130      	bne.n	8009868 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8009806:	697b      	ldr	r3, [r7, #20]
 8009808:	9300      	str	r3, [sp, #0]
 800980a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800980c:	2200      	movs	r2, #0
 800980e:	2180      	movs	r1, #128	; 0x80
 8009810:	68f8      	ldr	r0, [r7, #12]
 8009812:	f000 fa3f 	bl	8009c94 <I2C_WaitOnFlagUntilTimeout>
 8009816:	4603      	mov	r3, r0
 8009818:	2b00      	cmp	r3, #0
 800981a:	d001      	beq.n	8009820 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800981c:	2301      	movs	r3, #1
 800981e:	e04d      	b.n	80098bc <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009820:	68fb      	ldr	r3, [r7, #12]
 8009822:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009824:	b29b      	uxth	r3, r3
 8009826:	2bff      	cmp	r3, #255	; 0xff
 8009828:	d90e      	bls.n	8009848 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800982a:	68fb      	ldr	r3, [r7, #12]
 800982c:	22ff      	movs	r2, #255	; 0xff
 800982e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8009830:	68fb      	ldr	r3, [r7, #12]
 8009832:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009834:	b2da      	uxtb	r2, r3
 8009836:	8979      	ldrh	r1, [r7, #10]
 8009838:	2300      	movs	r3, #0
 800983a:	9300      	str	r3, [sp, #0]
 800983c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009840:	68f8      	ldr	r0, [r7, #12]
 8009842:	f000 fbcf 	bl	8009fe4 <I2C_TransferConfig>
 8009846:	e00f      	b.n	8009868 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8009848:	68fb      	ldr	r3, [r7, #12]
 800984a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800984c:	b29a      	uxth	r2, r3
 800984e:	68fb      	ldr	r3, [r7, #12]
 8009850:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8009852:	68fb      	ldr	r3, [r7, #12]
 8009854:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009856:	b2da      	uxtb	r2, r3
 8009858:	8979      	ldrh	r1, [r7, #10]
 800985a:	2300      	movs	r3, #0
 800985c:	9300      	str	r3, [sp, #0]
 800985e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009862:	68f8      	ldr	r0, [r7, #12]
 8009864:	f000 fbbe 	bl	8009fe4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800986c:	b29b      	uxth	r3, r3
 800986e:	2b00      	cmp	r3, #0
 8009870:	d19e      	bne.n	80097b0 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009872:	697a      	ldr	r2, [r7, #20]
 8009874:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009876:	68f8      	ldr	r0, [r7, #12]
 8009878:	f000 fa8c 	bl	8009d94 <I2C_WaitOnSTOPFlagUntilTimeout>
 800987c:	4603      	mov	r3, r0
 800987e:	2b00      	cmp	r3, #0
 8009880:	d001      	beq.n	8009886 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8009882:	2301      	movs	r3, #1
 8009884:	e01a      	b.n	80098bc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009886:	68fb      	ldr	r3, [r7, #12]
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	2220      	movs	r2, #32
 800988c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800988e:	68fb      	ldr	r3, [r7, #12]
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	6859      	ldr	r1, [r3, #4]
 8009894:	68fb      	ldr	r3, [r7, #12]
 8009896:	681a      	ldr	r2, [r3, #0]
 8009898:	4b0a      	ldr	r3, [pc, #40]	; (80098c4 <HAL_I2C_Mem_Write+0x224>)
 800989a:	400b      	ands	r3, r1
 800989c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800989e:	68fb      	ldr	r3, [r7, #12]
 80098a0:	2220      	movs	r2, #32
 80098a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80098a6:	68fb      	ldr	r3, [r7, #12]
 80098a8:	2200      	movs	r2, #0
 80098aa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80098ae:	68fb      	ldr	r3, [r7, #12]
 80098b0:	2200      	movs	r2, #0
 80098b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80098b6:	2300      	movs	r3, #0
 80098b8:	e000      	b.n	80098bc <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80098ba:	2302      	movs	r3, #2
  }
}
 80098bc:	4618      	mov	r0, r3
 80098be:	3718      	adds	r7, #24
 80098c0:	46bd      	mov	sp, r7
 80098c2:	bd80      	pop	{r7, pc}
 80098c4:	fe00e800 	.word	0xfe00e800

080098c8 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80098c8:	b580      	push	{r7, lr}
 80098ca:	b088      	sub	sp, #32
 80098cc:	af02      	add	r7, sp, #8
 80098ce:	60f8      	str	r0, [r7, #12]
 80098d0:	4608      	mov	r0, r1
 80098d2:	4611      	mov	r1, r2
 80098d4:	461a      	mov	r2, r3
 80098d6:	4603      	mov	r3, r0
 80098d8:	817b      	strh	r3, [r7, #10]
 80098da:	460b      	mov	r3, r1
 80098dc:	813b      	strh	r3, [r7, #8]
 80098de:	4613      	mov	r3, r2
 80098e0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80098e2:	68fb      	ldr	r3, [r7, #12]
 80098e4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80098e8:	b2db      	uxtb	r3, r3
 80098ea:	2b20      	cmp	r3, #32
 80098ec:	f040 80fd 	bne.w	8009aea <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80098f0:	6a3b      	ldr	r3, [r7, #32]
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	d002      	beq.n	80098fc <HAL_I2C_Mem_Read+0x34>
 80098f6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	d105      	bne.n	8009908 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80098fc:	68fb      	ldr	r3, [r7, #12]
 80098fe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009902:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8009904:	2301      	movs	r3, #1
 8009906:	e0f1      	b.n	8009aec <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009908:	68fb      	ldr	r3, [r7, #12]
 800990a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800990e:	2b01      	cmp	r3, #1
 8009910:	d101      	bne.n	8009916 <HAL_I2C_Mem_Read+0x4e>
 8009912:	2302      	movs	r3, #2
 8009914:	e0ea      	b.n	8009aec <HAL_I2C_Mem_Read+0x224>
 8009916:	68fb      	ldr	r3, [r7, #12]
 8009918:	2201      	movs	r2, #1
 800991a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800991e:	f7fd fa37 	bl	8006d90 <HAL_GetTick>
 8009922:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8009924:	697b      	ldr	r3, [r7, #20]
 8009926:	9300      	str	r3, [sp, #0]
 8009928:	2319      	movs	r3, #25
 800992a:	2201      	movs	r2, #1
 800992c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8009930:	68f8      	ldr	r0, [r7, #12]
 8009932:	f000 f9af 	bl	8009c94 <I2C_WaitOnFlagUntilTimeout>
 8009936:	4603      	mov	r3, r0
 8009938:	2b00      	cmp	r3, #0
 800993a:	d001      	beq.n	8009940 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800993c:	2301      	movs	r3, #1
 800993e:	e0d5      	b.n	8009aec <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8009940:	68fb      	ldr	r3, [r7, #12]
 8009942:	2222      	movs	r2, #34	; 0x22
 8009944:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8009948:	68fb      	ldr	r3, [r7, #12]
 800994a:	2240      	movs	r2, #64	; 0x40
 800994c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009950:	68fb      	ldr	r3, [r7, #12]
 8009952:	2200      	movs	r2, #0
 8009954:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8009956:	68fb      	ldr	r3, [r7, #12]
 8009958:	6a3a      	ldr	r2, [r7, #32]
 800995a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800995c:	68fb      	ldr	r3, [r7, #12]
 800995e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8009960:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8009962:	68fb      	ldr	r3, [r7, #12]
 8009964:	2200      	movs	r2, #0
 8009966:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8009968:	88f8      	ldrh	r0, [r7, #6]
 800996a:	893a      	ldrh	r2, [r7, #8]
 800996c:	8979      	ldrh	r1, [r7, #10]
 800996e:	697b      	ldr	r3, [r7, #20]
 8009970:	9301      	str	r3, [sp, #4]
 8009972:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009974:	9300      	str	r3, [sp, #0]
 8009976:	4603      	mov	r3, r0
 8009978:	68f8      	ldr	r0, [r7, #12]
 800997a:	f000 f913 	bl	8009ba4 <I2C_RequestMemoryRead>
 800997e:	4603      	mov	r3, r0
 8009980:	2b00      	cmp	r3, #0
 8009982:	d005      	beq.n	8009990 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009984:	68fb      	ldr	r3, [r7, #12]
 8009986:	2200      	movs	r2, #0
 8009988:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800998c:	2301      	movs	r3, #1
 800998e:	e0ad      	b.n	8009aec <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009990:	68fb      	ldr	r3, [r7, #12]
 8009992:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009994:	b29b      	uxth	r3, r3
 8009996:	2bff      	cmp	r3, #255	; 0xff
 8009998:	d90e      	bls.n	80099b8 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800999a:	68fb      	ldr	r3, [r7, #12]
 800999c:	22ff      	movs	r2, #255	; 0xff
 800999e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80099a0:	68fb      	ldr	r3, [r7, #12]
 80099a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80099a4:	b2da      	uxtb	r2, r3
 80099a6:	8979      	ldrh	r1, [r7, #10]
 80099a8:	4b52      	ldr	r3, [pc, #328]	; (8009af4 <HAL_I2C_Mem_Read+0x22c>)
 80099aa:	9300      	str	r3, [sp, #0]
 80099ac:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80099b0:	68f8      	ldr	r0, [r7, #12]
 80099b2:	f000 fb17 	bl	8009fe4 <I2C_TransferConfig>
 80099b6:	e00f      	b.n	80099d8 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80099b8:	68fb      	ldr	r3, [r7, #12]
 80099ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80099bc:	b29a      	uxth	r2, r3
 80099be:	68fb      	ldr	r3, [r7, #12]
 80099c0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80099c2:	68fb      	ldr	r3, [r7, #12]
 80099c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80099c6:	b2da      	uxtb	r2, r3
 80099c8:	8979      	ldrh	r1, [r7, #10]
 80099ca:	4b4a      	ldr	r3, [pc, #296]	; (8009af4 <HAL_I2C_Mem_Read+0x22c>)
 80099cc:	9300      	str	r3, [sp, #0]
 80099ce:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80099d2:	68f8      	ldr	r0, [r7, #12]
 80099d4:	f000 fb06 	bl	8009fe4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80099d8:	697b      	ldr	r3, [r7, #20]
 80099da:	9300      	str	r3, [sp, #0]
 80099dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099de:	2200      	movs	r2, #0
 80099e0:	2104      	movs	r1, #4
 80099e2:	68f8      	ldr	r0, [r7, #12]
 80099e4:	f000 f956 	bl	8009c94 <I2C_WaitOnFlagUntilTimeout>
 80099e8:	4603      	mov	r3, r0
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	d001      	beq.n	80099f2 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80099ee:	2301      	movs	r3, #1
 80099f0:	e07c      	b.n	8009aec <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80099f2:	68fb      	ldr	r3, [r7, #12]
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099fc:	b2d2      	uxtb	r2, r2
 80099fe:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a04:	1c5a      	adds	r2, r3, #1
 8009a06:	68fb      	ldr	r3, [r7, #12]
 8009a08:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8009a0a:	68fb      	ldr	r3, [r7, #12]
 8009a0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009a0e:	3b01      	subs	r3, #1
 8009a10:	b29a      	uxth	r2, r3
 8009a12:	68fb      	ldr	r3, [r7, #12]
 8009a14:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8009a16:	68fb      	ldr	r3, [r7, #12]
 8009a18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009a1a:	b29b      	uxth	r3, r3
 8009a1c:	3b01      	subs	r3, #1
 8009a1e:	b29a      	uxth	r2, r3
 8009a20:	68fb      	ldr	r3, [r7, #12]
 8009a22:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009a28:	b29b      	uxth	r3, r3
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	d034      	beq.n	8009a98 <HAL_I2C_Mem_Read+0x1d0>
 8009a2e:	68fb      	ldr	r3, [r7, #12]
 8009a30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	d130      	bne.n	8009a98 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8009a36:	697b      	ldr	r3, [r7, #20]
 8009a38:	9300      	str	r3, [sp, #0]
 8009a3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a3c:	2200      	movs	r2, #0
 8009a3e:	2180      	movs	r1, #128	; 0x80
 8009a40:	68f8      	ldr	r0, [r7, #12]
 8009a42:	f000 f927 	bl	8009c94 <I2C_WaitOnFlagUntilTimeout>
 8009a46:	4603      	mov	r3, r0
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	d001      	beq.n	8009a50 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8009a4c:	2301      	movs	r3, #1
 8009a4e:	e04d      	b.n	8009aec <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009a54:	b29b      	uxth	r3, r3
 8009a56:	2bff      	cmp	r3, #255	; 0xff
 8009a58:	d90e      	bls.n	8009a78 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8009a5a:	68fb      	ldr	r3, [r7, #12]
 8009a5c:	22ff      	movs	r2, #255	; 0xff
 8009a5e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009a64:	b2da      	uxtb	r2, r3
 8009a66:	8979      	ldrh	r1, [r7, #10]
 8009a68:	2300      	movs	r3, #0
 8009a6a:	9300      	str	r3, [sp, #0]
 8009a6c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009a70:	68f8      	ldr	r0, [r7, #12]
 8009a72:	f000 fab7 	bl	8009fe4 <I2C_TransferConfig>
 8009a76:	e00f      	b.n	8009a98 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8009a78:	68fb      	ldr	r3, [r7, #12]
 8009a7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009a7c:	b29a      	uxth	r2, r3
 8009a7e:	68fb      	ldr	r3, [r7, #12]
 8009a80:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8009a82:	68fb      	ldr	r3, [r7, #12]
 8009a84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009a86:	b2da      	uxtb	r2, r3
 8009a88:	8979      	ldrh	r1, [r7, #10]
 8009a8a:	2300      	movs	r3, #0
 8009a8c:	9300      	str	r3, [sp, #0]
 8009a8e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009a92:	68f8      	ldr	r0, [r7, #12]
 8009a94:	f000 faa6 	bl	8009fe4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8009a98:	68fb      	ldr	r3, [r7, #12]
 8009a9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009a9c:	b29b      	uxth	r3, r3
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d19a      	bne.n	80099d8 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009aa2:	697a      	ldr	r2, [r7, #20]
 8009aa4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009aa6:	68f8      	ldr	r0, [r7, #12]
 8009aa8:	f000 f974 	bl	8009d94 <I2C_WaitOnSTOPFlagUntilTimeout>
 8009aac:	4603      	mov	r3, r0
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	d001      	beq.n	8009ab6 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8009ab2:	2301      	movs	r3, #1
 8009ab4:	e01a      	b.n	8009aec <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009ab6:	68fb      	ldr	r3, [r7, #12]
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	2220      	movs	r2, #32
 8009abc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8009abe:	68fb      	ldr	r3, [r7, #12]
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	6859      	ldr	r1, [r3, #4]
 8009ac4:	68fb      	ldr	r3, [r7, #12]
 8009ac6:	681a      	ldr	r2, [r3, #0]
 8009ac8:	4b0b      	ldr	r3, [pc, #44]	; (8009af8 <HAL_I2C_Mem_Read+0x230>)
 8009aca:	400b      	ands	r3, r1
 8009acc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8009ace:	68fb      	ldr	r3, [r7, #12]
 8009ad0:	2220      	movs	r2, #32
 8009ad2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8009ad6:	68fb      	ldr	r3, [r7, #12]
 8009ad8:	2200      	movs	r2, #0
 8009ada:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009ade:	68fb      	ldr	r3, [r7, #12]
 8009ae0:	2200      	movs	r2, #0
 8009ae2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009ae6:	2300      	movs	r3, #0
 8009ae8:	e000      	b.n	8009aec <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8009aea:	2302      	movs	r3, #2
  }
}
 8009aec:	4618      	mov	r0, r3
 8009aee:	3718      	adds	r7, #24
 8009af0:	46bd      	mov	sp, r7
 8009af2:	bd80      	pop	{r7, pc}
 8009af4:	80002400 	.word	0x80002400
 8009af8:	fe00e800 	.word	0xfe00e800

08009afc <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8009afc:	b580      	push	{r7, lr}
 8009afe:	b086      	sub	sp, #24
 8009b00:	af02      	add	r7, sp, #8
 8009b02:	60f8      	str	r0, [r7, #12]
 8009b04:	4608      	mov	r0, r1
 8009b06:	4611      	mov	r1, r2
 8009b08:	461a      	mov	r2, r3
 8009b0a:	4603      	mov	r3, r0
 8009b0c:	817b      	strh	r3, [r7, #10]
 8009b0e:	460b      	mov	r3, r1
 8009b10:	813b      	strh	r3, [r7, #8]
 8009b12:	4613      	mov	r3, r2
 8009b14:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8009b16:	88fb      	ldrh	r3, [r7, #6]
 8009b18:	b2da      	uxtb	r2, r3
 8009b1a:	8979      	ldrh	r1, [r7, #10]
 8009b1c:	4b20      	ldr	r3, [pc, #128]	; (8009ba0 <I2C_RequestMemoryWrite+0xa4>)
 8009b1e:	9300      	str	r3, [sp, #0]
 8009b20:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009b24:	68f8      	ldr	r0, [r7, #12]
 8009b26:	f000 fa5d 	bl	8009fe4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009b2a:	69fa      	ldr	r2, [r7, #28]
 8009b2c:	69b9      	ldr	r1, [r7, #24]
 8009b2e:	68f8      	ldr	r0, [r7, #12]
 8009b30:	f000 f8f0 	bl	8009d14 <I2C_WaitOnTXISFlagUntilTimeout>
 8009b34:	4603      	mov	r3, r0
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	d001      	beq.n	8009b3e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8009b3a:	2301      	movs	r3, #1
 8009b3c:	e02c      	b.n	8009b98 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8009b3e:	88fb      	ldrh	r3, [r7, #6]
 8009b40:	2b01      	cmp	r3, #1
 8009b42:	d105      	bne.n	8009b50 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8009b44:	893b      	ldrh	r3, [r7, #8]
 8009b46:	b2da      	uxtb	r2, r3
 8009b48:	68fb      	ldr	r3, [r7, #12]
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	629a      	str	r2, [r3, #40]	; 0x28
 8009b4e:	e015      	b.n	8009b7c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8009b50:	893b      	ldrh	r3, [r7, #8]
 8009b52:	0a1b      	lsrs	r3, r3, #8
 8009b54:	b29b      	uxth	r3, r3
 8009b56:	b2da      	uxtb	r2, r3
 8009b58:	68fb      	ldr	r3, [r7, #12]
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009b5e:	69fa      	ldr	r2, [r7, #28]
 8009b60:	69b9      	ldr	r1, [r7, #24]
 8009b62:	68f8      	ldr	r0, [r7, #12]
 8009b64:	f000 f8d6 	bl	8009d14 <I2C_WaitOnTXISFlagUntilTimeout>
 8009b68:	4603      	mov	r3, r0
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	d001      	beq.n	8009b72 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8009b6e:	2301      	movs	r3, #1
 8009b70:	e012      	b.n	8009b98 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8009b72:	893b      	ldrh	r3, [r7, #8]
 8009b74:	b2da      	uxtb	r2, r3
 8009b76:	68fb      	ldr	r3, [r7, #12]
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8009b7c:	69fb      	ldr	r3, [r7, #28]
 8009b7e:	9300      	str	r3, [sp, #0]
 8009b80:	69bb      	ldr	r3, [r7, #24]
 8009b82:	2200      	movs	r2, #0
 8009b84:	2180      	movs	r1, #128	; 0x80
 8009b86:	68f8      	ldr	r0, [r7, #12]
 8009b88:	f000 f884 	bl	8009c94 <I2C_WaitOnFlagUntilTimeout>
 8009b8c:	4603      	mov	r3, r0
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	d001      	beq.n	8009b96 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8009b92:	2301      	movs	r3, #1
 8009b94:	e000      	b.n	8009b98 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8009b96:	2300      	movs	r3, #0
}
 8009b98:	4618      	mov	r0, r3
 8009b9a:	3710      	adds	r7, #16
 8009b9c:	46bd      	mov	sp, r7
 8009b9e:	bd80      	pop	{r7, pc}
 8009ba0:	80002000 	.word	0x80002000

08009ba4 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8009ba4:	b580      	push	{r7, lr}
 8009ba6:	b086      	sub	sp, #24
 8009ba8:	af02      	add	r7, sp, #8
 8009baa:	60f8      	str	r0, [r7, #12]
 8009bac:	4608      	mov	r0, r1
 8009bae:	4611      	mov	r1, r2
 8009bb0:	461a      	mov	r2, r3
 8009bb2:	4603      	mov	r3, r0
 8009bb4:	817b      	strh	r3, [r7, #10]
 8009bb6:	460b      	mov	r3, r1
 8009bb8:	813b      	strh	r3, [r7, #8]
 8009bba:	4613      	mov	r3, r2
 8009bbc:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8009bbe:	88fb      	ldrh	r3, [r7, #6]
 8009bc0:	b2da      	uxtb	r2, r3
 8009bc2:	8979      	ldrh	r1, [r7, #10]
 8009bc4:	4b20      	ldr	r3, [pc, #128]	; (8009c48 <I2C_RequestMemoryRead+0xa4>)
 8009bc6:	9300      	str	r3, [sp, #0]
 8009bc8:	2300      	movs	r3, #0
 8009bca:	68f8      	ldr	r0, [r7, #12]
 8009bcc:	f000 fa0a 	bl	8009fe4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009bd0:	69fa      	ldr	r2, [r7, #28]
 8009bd2:	69b9      	ldr	r1, [r7, #24]
 8009bd4:	68f8      	ldr	r0, [r7, #12]
 8009bd6:	f000 f89d 	bl	8009d14 <I2C_WaitOnTXISFlagUntilTimeout>
 8009bda:	4603      	mov	r3, r0
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	d001      	beq.n	8009be4 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8009be0:	2301      	movs	r3, #1
 8009be2:	e02c      	b.n	8009c3e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8009be4:	88fb      	ldrh	r3, [r7, #6]
 8009be6:	2b01      	cmp	r3, #1
 8009be8:	d105      	bne.n	8009bf6 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8009bea:	893b      	ldrh	r3, [r7, #8]
 8009bec:	b2da      	uxtb	r2, r3
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	629a      	str	r2, [r3, #40]	; 0x28
 8009bf4:	e015      	b.n	8009c22 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8009bf6:	893b      	ldrh	r3, [r7, #8]
 8009bf8:	0a1b      	lsrs	r3, r3, #8
 8009bfa:	b29b      	uxth	r3, r3
 8009bfc:	b2da      	uxtb	r2, r3
 8009bfe:	68fb      	ldr	r3, [r7, #12]
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009c04:	69fa      	ldr	r2, [r7, #28]
 8009c06:	69b9      	ldr	r1, [r7, #24]
 8009c08:	68f8      	ldr	r0, [r7, #12]
 8009c0a:	f000 f883 	bl	8009d14 <I2C_WaitOnTXISFlagUntilTimeout>
 8009c0e:	4603      	mov	r3, r0
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	d001      	beq.n	8009c18 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8009c14:	2301      	movs	r3, #1
 8009c16:	e012      	b.n	8009c3e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8009c18:	893b      	ldrh	r3, [r7, #8]
 8009c1a:	b2da      	uxtb	r2, r3
 8009c1c:	68fb      	ldr	r3, [r7, #12]
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8009c22:	69fb      	ldr	r3, [r7, #28]
 8009c24:	9300      	str	r3, [sp, #0]
 8009c26:	69bb      	ldr	r3, [r7, #24]
 8009c28:	2200      	movs	r2, #0
 8009c2a:	2140      	movs	r1, #64	; 0x40
 8009c2c:	68f8      	ldr	r0, [r7, #12]
 8009c2e:	f000 f831 	bl	8009c94 <I2C_WaitOnFlagUntilTimeout>
 8009c32:	4603      	mov	r3, r0
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	d001      	beq.n	8009c3c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8009c38:	2301      	movs	r3, #1
 8009c3a:	e000      	b.n	8009c3e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8009c3c:	2300      	movs	r3, #0
}
 8009c3e:	4618      	mov	r0, r3
 8009c40:	3710      	adds	r7, #16
 8009c42:	46bd      	mov	sp, r7
 8009c44:	bd80      	pop	{r7, pc}
 8009c46:	bf00      	nop
 8009c48:	80002000 	.word	0x80002000

08009c4c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8009c4c:	b480      	push	{r7}
 8009c4e:	b083      	sub	sp, #12
 8009c50:	af00      	add	r7, sp, #0
 8009c52:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	699b      	ldr	r3, [r3, #24]
 8009c5a:	f003 0302 	and.w	r3, r3, #2
 8009c5e:	2b02      	cmp	r3, #2
 8009c60:	d103      	bne.n	8009c6a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	2200      	movs	r2, #0
 8009c68:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	681b      	ldr	r3, [r3, #0]
 8009c6e:	699b      	ldr	r3, [r3, #24]
 8009c70:	f003 0301 	and.w	r3, r3, #1
 8009c74:	2b01      	cmp	r3, #1
 8009c76:	d007      	beq.n	8009c88 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	699a      	ldr	r2, [r3, #24]
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	f042 0201 	orr.w	r2, r2, #1
 8009c86:	619a      	str	r2, [r3, #24]
  }
}
 8009c88:	bf00      	nop
 8009c8a:	370c      	adds	r7, #12
 8009c8c:	46bd      	mov	sp, r7
 8009c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c92:	4770      	bx	lr

08009c94 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8009c94:	b580      	push	{r7, lr}
 8009c96:	b084      	sub	sp, #16
 8009c98:	af00      	add	r7, sp, #0
 8009c9a:	60f8      	str	r0, [r7, #12]
 8009c9c:	60b9      	str	r1, [r7, #8]
 8009c9e:	603b      	str	r3, [r7, #0]
 8009ca0:	4613      	mov	r3, r2
 8009ca2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009ca4:	e022      	b.n	8009cec <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009ca6:	683b      	ldr	r3, [r7, #0]
 8009ca8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009cac:	d01e      	beq.n	8009cec <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009cae:	f7fd f86f 	bl	8006d90 <HAL_GetTick>
 8009cb2:	4602      	mov	r2, r0
 8009cb4:	69bb      	ldr	r3, [r7, #24]
 8009cb6:	1ad3      	subs	r3, r2, r3
 8009cb8:	683a      	ldr	r2, [r7, #0]
 8009cba:	429a      	cmp	r2, r3
 8009cbc:	d302      	bcc.n	8009cc4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8009cbe:	683b      	ldr	r3, [r7, #0]
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	d113      	bne.n	8009cec <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009cc8:	f043 0220 	orr.w	r2, r3, #32
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8009cd0:	68fb      	ldr	r3, [r7, #12]
 8009cd2:	2220      	movs	r2, #32
 8009cd4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009cd8:	68fb      	ldr	r3, [r7, #12]
 8009cda:	2200      	movs	r2, #0
 8009cdc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009ce0:	68fb      	ldr	r3, [r7, #12]
 8009ce2:	2200      	movs	r2, #0
 8009ce4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8009ce8:	2301      	movs	r3, #1
 8009cea:	e00f      	b.n	8009d0c <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009cec:	68fb      	ldr	r3, [r7, #12]
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	699a      	ldr	r2, [r3, #24]
 8009cf2:	68bb      	ldr	r3, [r7, #8]
 8009cf4:	4013      	ands	r3, r2
 8009cf6:	68ba      	ldr	r2, [r7, #8]
 8009cf8:	429a      	cmp	r2, r3
 8009cfa:	bf0c      	ite	eq
 8009cfc:	2301      	moveq	r3, #1
 8009cfe:	2300      	movne	r3, #0
 8009d00:	b2db      	uxtb	r3, r3
 8009d02:	461a      	mov	r2, r3
 8009d04:	79fb      	ldrb	r3, [r7, #7]
 8009d06:	429a      	cmp	r2, r3
 8009d08:	d0cd      	beq.n	8009ca6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8009d0a:	2300      	movs	r3, #0
}
 8009d0c:	4618      	mov	r0, r3
 8009d0e:	3710      	adds	r7, #16
 8009d10:	46bd      	mov	sp, r7
 8009d12:	bd80      	pop	{r7, pc}

08009d14 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8009d14:	b580      	push	{r7, lr}
 8009d16:	b084      	sub	sp, #16
 8009d18:	af00      	add	r7, sp, #0
 8009d1a:	60f8      	str	r0, [r7, #12]
 8009d1c:	60b9      	str	r1, [r7, #8]
 8009d1e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8009d20:	e02c      	b.n	8009d7c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8009d22:	687a      	ldr	r2, [r7, #4]
 8009d24:	68b9      	ldr	r1, [r7, #8]
 8009d26:	68f8      	ldr	r0, [r7, #12]
 8009d28:	f000 f870 	bl	8009e0c <I2C_IsErrorOccurred>
 8009d2c:	4603      	mov	r3, r0
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	d001      	beq.n	8009d36 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8009d32:	2301      	movs	r3, #1
 8009d34:	e02a      	b.n	8009d8c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009d36:	68bb      	ldr	r3, [r7, #8]
 8009d38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d3c:	d01e      	beq.n	8009d7c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009d3e:	f7fd f827 	bl	8006d90 <HAL_GetTick>
 8009d42:	4602      	mov	r2, r0
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	1ad3      	subs	r3, r2, r3
 8009d48:	68ba      	ldr	r2, [r7, #8]
 8009d4a:	429a      	cmp	r2, r3
 8009d4c:	d302      	bcc.n	8009d54 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8009d4e:	68bb      	ldr	r3, [r7, #8]
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	d113      	bne.n	8009d7c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009d58:	f043 0220 	orr.w	r2, r3, #32
 8009d5c:	68fb      	ldr	r3, [r7, #12]
 8009d5e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8009d60:	68fb      	ldr	r3, [r7, #12]
 8009d62:	2220      	movs	r2, #32
 8009d64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009d68:	68fb      	ldr	r3, [r7, #12]
 8009d6a:	2200      	movs	r2, #0
 8009d6c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009d70:	68fb      	ldr	r3, [r7, #12]
 8009d72:	2200      	movs	r2, #0
 8009d74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8009d78:	2301      	movs	r3, #1
 8009d7a:	e007      	b.n	8009d8c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8009d7c:	68fb      	ldr	r3, [r7, #12]
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	699b      	ldr	r3, [r3, #24]
 8009d82:	f003 0302 	and.w	r3, r3, #2
 8009d86:	2b02      	cmp	r3, #2
 8009d88:	d1cb      	bne.n	8009d22 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8009d8a:	2300      	movs	r3, #0
}
 8009d8c:	4618      	mov	r0, r3
 8009d8e:	3710      	adds	r7, #16
 8009d90:	46bd      	mov	sp, r7
 8009d92:	bd80      	pop	{r7, pc}

08009d94 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8009d94:	b580      	push	{r7, lr}
 8009d96:	b084      	sub	sp, #16
 8009d98:	af00      	add	r7, sp, #0
 8009d9a:	60f8      	str	r0, [r7, #12]
 8009d9c:	60b9      	str	r1, [r7, #8]
 8009d9e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009da0:	e028      	b.n	8009df4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8009da2:	687a      	ldr	r2, [r7, #4]
 8009da4:	68b9      	ldr	r1, [r7, #8]
 8009da6:	68f8      	ldr	r0, [r7, #12]
 8009da8:	f000 f830 	bl	8009e0c <I2C_IsErrorOccurred>
 8009dac:	4603      	mov	r3, r0
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	d001      	beq.n	8009db6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8009db2:	2301      	movs	r3, #1
 8009db4:	e026      	b.n	8009e04 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009db6:	f7fc ffeb 	bl	8006d90 <HAL_GetTick>
 8009dba:	4602      	mov	r2, r0
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	1ad3      	subs	r3, r2, r3
 8009dc0:	68ba      	ldr	r2, [r7, #8]
 8009dc2:	429a      	cmp	r2, r3
 8009dc4:	d302      	bcc.n	8009dcc <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8009dc6:	68bb      	ldr	r3, [r7, #8]
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	d113      	bne.n	8009df4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009dcc:	68fb      	ldr	r3, [r7, #12]
 8009dce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009dd0:	f043 0220 	orr.w	r2, r3, #32
 8009dd4:	68fb      	ldr	r3, [r7, #12]
 8009dd6:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8009dd8:	68fb      	ldr	r3, [r7, #12]
 8009dda:	2220      	movs	r2, #32
 8009ddc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8009de0:	68fb      	ldr	r3, [r7, #12]
 8009de2:	2200      	movs	r2, #0
 8009de4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009de8:	68fb      	ldr	r3, [r7, #12]
 8009dea:	2200      	movs	r2, #0
 8009dec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8009df0:	2301      	movs	r3, #1
 8009df2:	e007      	b.n	8009e04 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009df4:	68fb      	ldr	r3, [r7, #12]
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	699b      	ldr	r3, [r3, #24]
 8009dfa:	f003 0320 	and.w	r3, r3, #32
 8009dfe:	2b20      	cmp	r3, #32
 8009e00:	d1cf      	bne.n	8009da2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8009e02:	2300      	movs	r3, #0
}
 8009e04:	4618      	mov	r0, r3
 8009e06:	3710      	adds	r7, #16
 8009e08:	46bd      	mov	sp, r7
 8009e0a:	bd80      	pop	{r7, pc}

08009e0c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009e0c:	b580      	push	{r7, lr}
 8009e0e:	b08a      	sub	sp, #40	; 0x28
 8009e10:	af00      	add	r7, sp, #0
 8009e12:	60f8      	str	r0, [r7, #12]
 8009e14:	60b9      	str	r1, [r7, #8]
 8009e16:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009e18:	2300      	movs	r3, #0
 8009e1a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8009e1e:	68fb      	ldr	r3, [r7, #12]
 8009e20:	681b      	ldr	r3, [r3, #0]
 8009e22:	699b      	ldr	r3, [r3, #24]
 8009e24:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8009e26:	2300      	movs	r3, #0
 8009e28:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8009e2e:	69bb      	ldr	r3, [r7, #24]
 8009e30:	f003 0310 	and.w	r3, r3, #16
 8009e34:	2b00      	cmp	r3, #0
 8009e36:	d075      	beq.n	8009f24 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009e38:	68fb      	ldr	r3, [r7, #12]
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	2210      	movs	r2, #16
 8009e3e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8009e40:	e056      	b.n	8009ef0 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8009e42:	68bb      	ldr	r3, [r7, #8]
 8009e44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e48:	d052      	beq.n	8009ef0 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8009e4a:	f7fc ffa1 	bl	8006d90 <HAL_GetTick>
 8009e4e:	4602      	mov	r2, r0
 8009e50:	69fb      	ldr	r3, [r7, #28]
 8009e52:	1ad3      	subs	r3, r2, r3
 8009e54:	68ba      	ldr	r2, [r7, #8]
 8009e56:	429a      	cmp	r2, r3
 8009e58:	d302      	bcc.n	8009e60 <I2C_IsErrorOccurred+0x54>
 8009e5a:	68bb      	ldr	r3, [r7, #8]
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	d147      	bne.n	8009ef0 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8009e60:	68fb      	ldr	r3, [r7, #12]
 8009e62:	681b      	ldr	r3, [r3, #0]
 8009e64:	685b      	ldr	r3, [r3, #4]
 8009e66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009e6a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8009e6c:	68fb      	ldr	r3, [r7, #12]
 8009e6e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009e72:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8009e74:	68fb      	ldr	r3, [r7, #12]
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	699b      	ldr	r3, [r3, #24]
 8009e7a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009e7e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009e82:	d12e      	bne.n	8009ee2 <I2C_IsErrorOccurred+0xd6>
 8009e84:	697b      	ldr	r3, [r7, #20]
 8009e86:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009e8a:	d02a      	beq.n	8009ee2 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8009e8c:	7cfb      	ldrb	r3, [r7, #19]
 8009e8e:	2b20      	cmp	r3, #32
 8009e90:	d027      	beq.n	8009ee2 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8009e92:	68fb      	ldr	r3, [r7, #12]
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	685a      	ldr	r2, [r3, #4]
 8009e98:	68fb      	ldr	r3, [r7, #12]
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009ea0:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8009ea2:	f7fc ff75 	bl	8006d90 <HAL_GetTick>
 8009ea6:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009ea8:	e01b      	b.n	8009ee2 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8009eaa:	f7fc ff71 	bl	8006d90 <HAL_GetTick>
 8009eae:	4602      	mov	r2, r0
 8009eb0:	69fb      	ldr	r3, [r7, #28]
 8009eb2:	1ad3      	subs	r3, r2, r3
 8009eb4:	2b19      	cmp	r3, #25
 8009eb6:	d914      	bls.n	8009ee2 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009eb8:	68fb      	ldr	r3, [r7, #12]
 8009eba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009ebc:	f043 0220 	orr.w	r2, r3, #32
 8009ec0:	68fb      	ldr	r3, [r7, #12]
 8009ec2:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8009ec4:	68fb      	ldr	r3, [r7, #12]
 8009ec6:	2220      	movs	r2, #32
 8009ec8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8009ecc:	68fb      	ldr	r3, [r7, #12]
 8009ece:	2200      	movs	r2, #0
 8009ed0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8009ed4:	68fb      	ldr	r3, [r7, #12]
 8009ed6:	2200      	movs	r2, #0
 8009ed8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 8009edc:	2301      	movs	r3, #1
 8009ede:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009ee2:	68fb      	ldr	r3, [r7, #12]
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	699b      	ldr	r3, [r3, #24]
 8009ee8:	f003 0320 	and.w	r3, r3, #32
 8009eec:	2b20      	cmp	r3, #32
 8009eee:	d1dc      	bne.n	8009eaa <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8009ef0:	68fb      	ldr	r3, [r7, #12]
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	699b      	ldr	r3, [r3, #24]
 8009ef6:	f003 0320 	and.w	r3, r3, #32
 8009efa:	2b20      	cmp	r3, #32
 8009efc:	d003      	beq.n	8009f06 <I2C_IsErrorOccurred+0xfa>
 8009efe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009f02:	2b00      	cmp	r3, #0
 8009f04:	d09d      	beq.n	8009e42 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8009f06:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	d103      	bne.n	8009f16 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009f0e:	68fb      	ldr	r3, [r7, #12]
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	2220      	movs	r2, #32
 8009f14:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8009f16:	6a3b      	ldr	r3, [r7, #32]
 8009f18:	f043 0304 	orr.w	r3, r3, #4
 8009f1c:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8009f1e:	2301      	movs	r3, #1
 8009f20:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8009f24:	68fb      	ldr	r3, [r7, #12]
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	699b      	ldr	r3, [r3, #24]
 8009f2a:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8009f2c:	69bb      	ldr	r3, [r7, #24]
 8009f2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	d00b      	beq.n	8009f4e <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8009f36:	6a3b      	ldr	r3, [r7, #32]
 8009f38:	f043 0301 	orr.w	r3, r3, #1
 8009f3c:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8009f3e:	68fb      	ldr	r3, [r7, #12]
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009f46:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009f48:	2301      	movs	r3, #1
 8009f4a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8009f4e:	69bb      	ldr	r3, [r7, #24]
 8009f50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009f54:	2b00      	cmp	r3, #0
 8009f56:	d00b      	beq.n	8009f70 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8009f58:	6a3b      	ldr	r3, [r7, #32]
 8009f5a:	f043 0308 	orr.w	r3, r3, #8
 8009f5e:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8009f60:	68fb      	ldr	r3, [r7, #12]
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009f68:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009f6a:	2301      	movs	r3, #1
 8009f6c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8009f70:	69bb      	ldr	r3, [r7, #24]
 8009f72:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	d00b      	beq.n	8009f92 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8009f7a:	6a3b      	ldr	r3, [r7, #32]
 8009f7c:	f043 0302 	orr.w	r3, r3, #2
 8009f80:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8009f82:	68fb      	ldr	r3, [r7, #12]
 8009f84:	681b      	ldr	r3, [r3, #0]
 8009f86:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009f8a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009f8c:	2301      	movs	r3, #1
 8009f8e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8009f92:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	d01c      	beq.n	8009fd4 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8009f9a:	68f8      	ldr	r0, [r7, #12]
 8009f9c:	f7ff fe56 	bl	8009c4c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8009fa0:	68fb      	ldr	r3, [r7, #12]
 8009fa2:	681b      	ldr	r3, [r3, #0]
 8009fa4:	6859      	ldr	r1, [r3, #4]
 8009fa6:	68fb      	ldr	r3, [r7, #12]
 8009fa8:	681a      	ldr	r2, [r3, #0]
 8009faa:	4b0d      	ldr	r3, [pc, #52]	; (8009fe0 <I2C_IsErrorOccurred+0x1d4>)
 8009fac:	400b      	ands	r3, r1
 8009fae:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8009fb0:	68fb      	ldr	r3, [r7, #12]
 8009fb2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009fb4:	6a3b      	ldr	r3, [r7, #32]
 8009fb6:	431a      	orrs	r2, r3
 8009fb8:	68fb      	ldr	r3, [r7, #12]
 8009fba:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8009fbc:	68fb      	ldr	r3, [r7, #12]
 8009fbe:	2220      	movs	r2, #32
 8009fc0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009fc4:	68fb      	ldr	r3, [r7, #12]
 8009fc6:	2200      	movs	r2, #0
 8009fc8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009fcc:	68fb      	ldr	r3, [r7, #12]
 8009fce:	2200      	movs	r2, #0
 8009fd0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8009fd4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8009fd8:	4618      	mov	r0, r3
 8009fda:	3728      	adds	r7, #40	; 0x28
 8009fdc:	46bd      	mov	sp, r7
 8009fde:	bd80      	pop	{r7, pc}
 8009fe0:	fe00e800 	.word	0xfe00e800

08009fe4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8009fe4:	b480      	push	{r7}
 8009fe6:	b087      	sub	sp, #28
 8009fe8:	af00      	add	r7, sp, #0
 8009fea:	60f8      	str	r0, [r7, #12]
 8009fec:	607b      	str	r3, [r7, #4]
 8009fee:	460b      	mov	r3, r1
 8009ff0:	817b      	strh	r3, [r7, #10]
 8009ff2:	4613      	mov	r3, r2
 8009ff4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009ff6:	897b      	ldrh	r3, [r7, #10]
 8009ff8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8009ffc:	7a7b      	ldrb	r3, [r7, #9]
 8009ffe:	041b      	lsls	r3, r3, #16
 800a000:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800a004:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800a00a:	6a3b      	ldr	r3, [r7, #32]
 800a00c:	4313      	orrs	r3, r2
 800a00e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a012:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800a014:	68fb      	ldr	r3, [r7, #12]
 800a016:	681b      	ldr	r3, [r3, #0]
 800a018:	685a      	ldr	r2, [r3, #4]
 800a01a:	6a3b      	ldr	r3, [r7, #32]
 800a01c:	0d5b      	lsrs	r3, r3, #21
 800a01e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800a022:	4b08      	ldr	r3, [pc, #32]	; (800a044 <I2C_TransferConfig+0x60>)
 800a024:	430b      	orrs	r3, r1
 800a026:	43db      	mvns	r3, r3
 800a028:	ea02 0103 	and.w	r1, r2, r3
 800a02c:	68fb      	ldr	r3, [r7, #12]
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	697a      	ldr	r2, [r7, #20]
 800a032:	430a      	orrs	r2, r1
 800a034:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800a036:	bf00      	nop
 800a038:	371c      	adds	r7, #28
 800a03a:	46bd      	mov	sp, r7
 800a03c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a040:	4770      	bx	lr
 800a042:	bf00      	nop
 800a044:	03ff63ff 	.word	0x03ff63ff

0800a048 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800a048:	b480      	push	{r7}
 800a04a:	b083      	sub	sp, #12
 800a04c:	af00      	add	r7, sp, #0
 800a04e:	6078      	str	r0, [r7, #4]
 800a050:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a058:	b2db      	uxtb	r3, r3
 800a05a:	2b20      	cmp	r3, #32
 800a05c:	d138      	bne.n	800a0d0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a064:	2b01      	cmp	r3, #1
 800a066:	d101      	bne.n	800a06c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800a068:	2302      	movs	r3, #2
 800a06a:	e032      	b.n	800a0d2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	2201      	movs	r2, #1
 800a070:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	2224      	movs	r2, #36	; 0x24
 800a078:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	681a      	ldr	r2, [r3, #0]
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	681b      	ldr	r3, [r3, #0]
 800a086:	f022 0201 	bic.w	r2, r2, #1
 800a08a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	681a      	ldr	r2, [r3, #0]
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	681b      	ldr	r3, [r3, #0]
 800a096:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800a09a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	6819      	ldr	r1, [r3, #0]
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	683a      	ldr	r2, [r7, #0]
 800a0a8:	430a      	orrs	r2, r1
 800a0aa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	681a      	ldr	r2, [r3, #0]
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	f042 0201 	orr.w	r2, r2, #1
 800a0ba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	2220      	movs	r2, #32
 800a0c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	2200      	movs	r2, #0
 800a0c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800a0cc:	2300      	movs	r3, #0
 800a0ce:	e000      	b.n	800a0d2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800a0d0:	2302      	movs	r3, #2
  }
}
 800a0d2:	4618      	mov	r0, r3
 800a0d4:	370c      	adds	r7, #12
 800a0d6:	46bd      	mov	sp, r7
 800a0d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0dc:	4770      	bx	lr

0800a0de <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800a0de:	b480      	push	{r7}
 800a0e0:	b085      	sub	sp, #20
 800a0e2:	af00      	add	r7, sp, #0
 800a0e4:	6078      	str	r0, [r7, #4]
 800a0e6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a0ee:	b2db      	uxtb	r3, r3
 800a0f0:	2b20      	cmp	r3, #32
 800a0f2:	d139      	bne.n	800a168 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a0fa:	2b01      	cmp	r3, #1
 800a0fc:	d101      	bne.n	800a102 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800a0fe:	2302      	movs	r3, #2
 800a100:	e033      	b.n	800a16a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	2201      	movs	r2, #1
 800a106:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	2224      	movs	r2, #36	; 0x24
 800a10e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	681a      	ldr	r2, [r3, #0]
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	681b      	ldr	r3, [r3, #0]
 800a11c:	f022 0201 	bic.w	r2, r2, #1
 800a120:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	681b      	ldr	r3, [r3, #0]
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800a12a:	68fb      	ldr	r3, [r7, #12]
 800a12c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800a130:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800a132:	683b      	ldr	r3, [r7, #0]
 800a134:	021b      	lsls	r3, r3, #8
 800a136:	68fa      	ldr	r2, [r7, #12]
 800a138:	4313      	orrs	r3, r2
 800a13a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	68fa      	ldr	r2, [r7, #12]
 800a142:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	681a      	ldr	r2, [r3, #0]
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	f042 0201 	orr.w	r2, r2, #1
 800a152:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	2220      	movs	r2, #32
 800a158:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	2200      	movs	r2, #0
 800a160:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800a164:	2300      	movs	r3, #0
 800a166:	e000      	b.n	800a16a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800a168:	2302      	movs	r3, #2
  }
}
 800a16a:	4618      	mov	r0, r3
 800a16c:	3714      	adds	r7, #20
 800a16e:	46bd      	mov	sp, r7
 800a170:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a174:	4770      	bx	lr
	...

0800a178 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 800a178:	b480      	push	{r7}
 800a17a:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 800a17c:	4b05      	ldr	r3, [pc, #20]	; (800a194 <HAL_ICACHE_Enable+0x1c>)
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	4a04      	ldr	r2, [pc, #16]	; (800a194 <HAL_ICACHE_Enable+0x1c>)
 800a182:	f043 0301 	orr.w	r3, r3, #1
 800a186:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800a188:	2300      	movs	r3, #0
}
 800a18a:	4618      	mov	r0, r3
 800a18c:	46bd      	mov	sp, r7
 800a18e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a192:	4770      	bx	lr
 800a194:	40030400 	.word	0x40030400

0800a198 <LL_DLYB_Enable>:
  * @param  DLYBx DLYB Instance
  * @retval None
  */

__STATIC_INLINE void LL_DLYB_Enable(DLYB_TypeDef *DLYBx)
{
 800a198:	b480      	push	{r7}
 800a19a:	b083      	sub	sp, #12
 800a19c:	af00      	add	r7, sp, #0
 800a19e:	6078      	str	r0, [r7, #4]
  SET_BIT(DLYBx->CR, DLYB_CR_DEN);
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	f043 0201 	orr.w	r2, r3, #1
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	601a      	str	r2, [r3, #0]
}
 800a1ac:	bf00      	nop
 800a1ae:	370c      	adds	r7, #12
 800a1b0:	46bd      	mov	sp, r7
 800a1b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1b6:	4770      	bx	lr

0800a1b8 <LL_DLYB_Disable>:
  * @param  DLYBx DLYB Instance.
  * @retval None
  */

__STATIC_INLINE void LL_DLYB_Disable(DLYB_TypeDef *DLYBx)
{
 800a1b8:	b480      	push	{r7}
 800a1ba:	b083      	sub	sp, #12
 800a1bc:	af00      	add	r7, sp, #0
 800a1be:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(DLYBx->CR, DLYB_CR_DEN);
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	f023 0201 	bic.w	r2, r3, #1
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	601a      	str	r2, [r3, #0]
}
 800a1cc:	bf00      	nop
 800a1ce:	370c      	adds	r7, #12
 800a1d0:	46bd      	mov	sp, r7
 800a1d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1d6:	4770      	bx	lr

0800a1d8 <HAL_OSPI_Init>:
  *         in the OSPI_InitTypeDef and initialize the associated handle.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Init(OSPI_HandleTypeDef *hospi)
{
 800a1d8:	b580      	push	{r7, lr}
 800a1da:	b086      	sub	sp, #24
 800a1dc:	af02      	add	r7, sp, #8
 800a1de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a1e0:	2300      	movs	r3, #0
 800a1e2:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 800a1e4:	f7fc fdd4 	bl	8006d90 <HAL_GetTick>
 800a1e8:	60b8      	str	r0, [r7, #8]

  /* Check the OSPI handle allocation */
  if (hospi == NULL)
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	d102      	bne.n	800a1f6 <HAL_OSPI_Init+0x1e>
  {
    status = HAL_ERROR;
 800a1f0:	2301      	movs	r3, #1
 800a1f2:	73fb      	strb	r3, [r7, #15]
 800a1f4:	e0a5      	b.n	800a342 <HAL_OSPI_Init+0x16a>
    assert_param(IS_OSPI_CS_BOUNDARY(hospi->Init.ChipSelectBoundary));
    assert_param(IS_OSPI_DLYBYP(hospi->Init.DelayBlockBypass));
    assert_param(IS_OSPI_MAXTRAN(hospi->Init.MaxTran));

    /* Initialize error code */
    hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	2200      	movs	r2, #0
 800a1fa:	655a      	str	r2, [r3, #84]	; 0x54

    /* Check if the state is the reset state */
    if (hospi->State == HAL_OSPI_STATE_RESET)
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a200:	2b00      	cmp	r3, #0
 800a202:	f040 809e 	bne.w	800a342 <HAL_OSPI_Init+0x16a>

      /* Init the low level hardware */
      hospi->MspInitCallback(hospi);
#else
      /* Initialization of the low level hardware */
      HAL_OSPI_MspInit(hospi);
 800a206:	6878      	ldr	r0, [r7, #4]
 800a208:	f7fb ffaa 	bl	8006160 <HAL_OSPI_MspInit>
#endif /* defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */

      /* Configure the default timeout for the OSPI memory access */
      (void)HAL_OSPI_SetTimeout(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE);
 800a20c:	f241 3188 	movw	r1, #5000	; 0x1388
 800a210:	6878      	ldr	r0, [r7, #4]
 800a212:	f000 f9ec 	bl	800a5ee <HAL_OSPI_SetTimeout>

      /* Configure memory type, device size, chip select high time, delay block bypass,
         free running clock, clock mode */
      MODIFY_REG(hospi->Instance->DCR1,
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	681b      	ldr	r3, [r3, #0]
 800a21a:	689a      	ldr	r2, [r3, #8]
 800a21c:	4b4b      	ldr	r3, [pc, #300]	; (800a34c <HAL_OSPI_Init+0x174>)
 800a21e:	4013      	ands	r3, r2
 800a220:	687a      	ldr	r2, [r7, #4]
 800a222:	68d1      	ldr	r1, [r2, #12]
 800a224:	687a      	ldr	r2, [r7, #4]
 800a226:	6912      	ldr	r2, [r2, #16]
 800a228:	3a01      	subs	r2, #1
 800a22a:	0412      	lsls	r2, r2, #16
 800a22c:	4311      	orrs	r1, r2
 800a22e:	687a      	ldr	r2, [r7, #4]
 800a230:	6952      	ldr	r2, [r2, #20]
 800a232:	3a01      	subs	r2, #1
 800a234:	0212      	lsls	r2, r2, #8
 800a236:	4311      	orrs	r1, r2
 800a238:	687a      	ldr	r2, [r7, #4]
 800a23a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800a23c:	4311      	orrs	r1, r2
 800a23e:	687a      	ldr	r2, [r7, #4]
 800a240:	69d2      	ldr	r2, [r2, #28]
 800a242:	4311      	orrs	r1, r2
 800a244:	687a      	ldr	r2, [r7, #4]
 800a246:	6812      	ldr	r2, [r2, #0]
 800a248:	430b      	orrs	r3, r1
 800a24a:	6093      	str	r3, [r2, #8]
                 (hospi->Init.MemoryType | ((hospi->Init.DeviceSize - 1U) << OCTOSPI_DCR1_DEVSIZE_Pos) |
                  ((hospi->Init.ChipSelectHighTime - 1U) << OCTOSPI_DCR1_CSHT_Pos) |
                  hospi->Init.DelayBlockBypass | hospi->Init.ClockMode));

      /* Configure wrap size */
      MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_WRAPSIZE, hospi->Init.WrapSize);
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	68db      	ldr	r3, [r3, #12]
 800a252:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	6a1a      	ldr	r2, [r3, #32]
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	430a      	orrs	r2, r1
 800a260:	60da      	str	r2, [r3, #12]

      /* Configure chip select boundary and maximum transfer */
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a266:	0419      	lsls	r1, r3, #16
                               (hospi->Init.MaxTran << OCTOSPI_DCR3_MAXTRAN_Pos));
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	430a      	orrs	r2, r1
 800a272:	611a      	str	r2, [r3, #16]

      /* Configure refresh */
      hospi->Instance->DCR4 = hospi->Init.Refresh;
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	687a      	ldr	r2, [r7, #4]
 800a27a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800a27c:	615a      	str	r2, [r3, #20]

      /* Configure FIFO threshold */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FTHRES, ((hospi->Init.FifoThreshold - 1U) << OCTOSPI_CR_FTHRES_Pos));
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	681b      	ldr	r3, [r3, #0]
 800a284:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	685b      	ldr	r3, [r3, #4]
 800a28c:	3b01      	subs	r3, #1
 800a28e:	021a      	lsls	r2, r3, #8
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	430a      	orrs	r2, r1
 800a296:	601a      	str	r2, [r3, #0]

      /* Wait till busy flag is reset */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a29c:	9300      	str	r3, [sp, #0]
 800a29e:	68bb      	ldr	r3, [r7, #8]
 800a2a0:	2200      	movs	r2, #0
 800a2a2:	2120      	movs	r1, #32
 800a2a4:	6878      	ldr	r0, [r7, #4]
 800a2a6:	f000 fea3 	bl	800aff0 <OSPI_WaitFlagStateUntilTimeout>
 800a2aa:	4603      	mov	r3, r0
 800a2ac:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 800a2ae:	7bfb      	ldrb	r3, [r7, #15]
 800a2b0:	2b00      	cmp	r3, #0
 800a2b2:	d146      	bne.n	800a342 <HAL_OSPI_Init+0x16a>
      {
        /* Configure clock prescaler */
        MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_PRESCALER,
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	681b      	ldr	r3, [r3, #0]
 800a2b8:	68db      	ldr	r3, [r3, #12]
 800a2ba:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2c2:	1e5a      	subs	r2, r3, #1
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	681b      	ldr	r3, [r3, #0]
 800a2c8:	430a      	orrs	r2, r1
 800a2ca:	60da      	str	r2, [r3, #12]
                   ((hospi->Init.ClockPrescaler - 1U) << OCTOSPI_DCR2_PRESCALER_Pos));

        /* Configure Dual Quad mode */
        MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_DMM, hospi->Init.DualQuad);
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	681b      	ldr	r3, [r3, #0]
 800a2d2:	f023 0140 	bic.w	r1, r3, #64	; 0x40
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	689a      	ldr	r2, [r3, #8]
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	681b      	ldr	r3, [r3, #0]
 800a2de:	430a      	orrs	r2, r1
 800a2e0:	601a      	str	r2, [r3, #0]

        /* Configure sample shifting and delay hold quarter cycle */
        MODIFY_REG(hospi->Instance->TCR, (OCTOSPI_TCR_SSHIFT | OCTOSPI_TCR_DHQC),
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800a2ea:	f023 41a0 	bic.w	r1, r3, #1342177280	; 0x50000000
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2f6:	431a      	orrs	r2, r3
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	681b      	ldr	r3, [r3, #0]
 800a2fc:	430a      	orrs	r2, r1
 800a2fe:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
                   (hospi->Init.SampleShifting | hospi->Init.DelayHoldQuarterCycle));

        /* Enable OctoSPI */
        __HAL_OSPI_ENABLE(hospi);
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	681b      	ldr	r3, [r3, #0]
 800a306:	681a      	ldr	r2, [r3, #0]
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	681b      	ldr	r3, [r3, #0]
 800a30c:	f042 0201 	orr.w	r2, r2, #1
 800a310:	601a      	str	r2, [r3, #0]

        /* Enable free running clock if needed : must be done after OSPI enable */
        if (hospi->Init.FreeRunningClock == HAL_OSPI_FREERUNCLK_ENABLE)
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	699b      	ldr	r3, [r3, #24]
 800a316:	2b02      	cmp	r3, #2
 800a318:	d107      	bne.n	800a32a <HAL_OSPI_Init+0x152>
        {
          SET_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	681b      	ldr	r3, [r3, #0]
 800a31e:	689a      	ldr	r2, [r3, #8]
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	f042 0202 	orr.w	r2, r2, #2
 800a328:	609a      	str	r2, [r3, #8]
        }

        /* Initialize the OSPI state */
        if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	68db      	ldr	r3, [r3, #12]
 800a32e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a332:	d103      	bne.n	800a33c <HAL_OSPI_Init+0x164>
        {
          hospi->State = HAL_OSPI_STATE_HYPERBUS_INIT;
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	2201      	movs	r2, #1
 800a338:	651a      	str	r2, [r3, #80]	; 0x50
 800a33a:	e002      	b.n	800a342 <HAL_OSPI_Init+0x16a>
        }
        else
        {
          hospi->State = HAL_OSPI_STATE_READY;
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	2202      	movs	r2, #2
 800a340:	651a      	str	r2, [r3, #80]	; 0x50
      }
    }
  }

  /* Return function status */
  return status;
 800a342:	7bfb      	ldrb	r3, [r7, #15]
}
 800a344:	4618      	mov	r0, r3
 800a346:	3710      	adds	r7, #16
 800a348:	46bd      	mov	sp, r7
 800a34a:	bd80      	pop	{r7, pc}
 800a34c:	f8e0c0f4 	.word	0xf8e0c0f4

0800a350 <HAL_OSPI_Command>:
  * @param  cmd     : structure that contains the command configuration information
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Command(OSPI_HandleTypeDef *hospi, OSPI_RegularCmdTypeDef *cmd, uint32_t Timeout)
{
 800a350:	b580      	push	{r7, lr}
 800a352:	b08a      	sub	sp, #40	; 0x28
 800a354:	af02      	add	r7, sp, #8
 800a356:	60f8      	str	r0, [r7, #12]
 800a358:	60b9      	str	r1, [r7, #8]
 800a35a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t state;
  uint32_t tickstart = HAL_GetTick();
 800a35c:	f7fc fd18 	bl	8006d90 <HAL_GetTick>
 800a360:	61b8      	str	r0, [r7, #24]
    assert_param(IS_OSPI_ALT_BYTES_SIZE(cmd->AlternateBytesSize));
    assert_param(IS_OSPI_ALT_BYTES_DTR_MODE(cmd->AlternateBytesDtrMode));
  }

  assert_param(IS_OSPI_DATA_MODE(cmd->DataMode));
  if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 800a362:	68bb      	ldr	r3, [r7, #8]
 800a364:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a366:	2b00      	cmp	r3, #0

  assert_param(IS_OSPI_DQS_MODE(cmd->DQSMode));
  assert_param(IS_OSPI_SIOO_MODE(cmd->SIOOMode));

  /* Check the state of the driver */
  state = hospi->State;
 800a368:	68fb      	ldr	r3, [r7, #12]
 800a36a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a36c:	617b      	str	r3, [r7, #20]
  if (((state == HAL_OSPI_STATE_READY)         && (hospi->Init.MemoryType != HAL_OSPI_MEMTYPE_HYPERBUS)) ||
 800a36e:	697b      	ldr	r3, [r7, #20]
 800a370:	2b02      	cmp	r3, #2
 800a372:	d104      	bne.n	800a37e <HAL_OSPI_Command+0x2e>
 800a374:	68fb      	ldr	r3, [r7, #12]
 800a376:	68db      	ldr	r3, [r3, #12]
 800a378:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a37c:	d115      	bne.n	800a3aa <HAL_OSPI_Command+0x5a>
 800a37e:	697b      	ldr	r3, [r7, #20]
 800a380:	2b14      	cmp	r3, #20
 800a382:	d107      	bne.n	800a394 <HAL_OSPI_Command+0x44>
      ((state == HAL_OSPI_STATE_READ_CMD_CFG)  && ((cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG)
 800a384:	68bb      	ldr	r3, [r7, #8]
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	2b02      	cmp	r3, #2
 800a38a:	d00e      	beq.n	800a3aa <HAL_OSPI_Command+0x5a>
                                                   || (cmd->OperationType == HAL_OSPI_OPTYPE_WRAP_CFG))) ||
 800a38c:	68bb      	ldr	r3, [r7, #8]
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	2b03      	cmp	r3, #3
 800a392:	d00a      	beq.n	800a3aa <HAL_OSPI_Command+0x5a>
 800a394:	697b      	ldr	r3, [r7, #20]
 800a396:	2b24      	cmp	r3, #36	; 0x24
 800a398:	d15b      	bne.n	800a452 <HAL_OSPI_Command+0x102>
      ((state == HAL_OSPI_STATE_WRITE_CMD_CFG) && ((cmd->OperationType == HAL_OSPI_OPTYPE_READ_CFG)  ||
 800a39a:	68bb      	ldr	r3, [r7, #8]
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	2b01      	cmp	r3, #1
 800a3a0:	d003      	beq.n	800a3aa <HAL_OSPI_Command+0x5a>
                                                   (cmd->OperationType == HAL_OSPI_OPTYPE_WRAP_CFG))))
 800a3a2:	68bb      	ldr	r3, [r7, #8]
 800a3a4:	681b      	ldr	r3, [r3, #0]
      ((state == HAL_OSPI_STATE_WRITE_CMD_CFG) && ((cmd->OperationType == HAL_OSPI_OPTYPE_READ_CFG)  ||
 800a3a6:	2b03      	cmp	r3, #3
 800a3a8:	d153      	bne.n	800a452 <HAL_OSPI_Command+0x102>
  {
    /* Wait till busy flag is reset */
    status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	9300      	str	r3, [sp, #0]
 800a3ae:	69bb      	ldr	r3, [r7, #24]
 800a3b0:	2200      	movs	r2, #0
 800a3b2:	2120      	movs	r1, #32
 800a3b4:	68f8      	ldr	r0, [r7, #12]
 800a3b6:	f000 fe1b 	bl	800aff0 <OSPI_WaitFlagStateUntilTimeout>
 800a3ba:	4603      	mov	r3, r0
 800a3bc:	77fb      	strb	r3, [r7, #31]

    if (status == HAL_OK)
 800a3be:	7ffb      	ldrb	r3, [r7, #31]
 800a3c0:	2b00      	cmp	r3, #0
 800a3c2:	d14c      	bne.n	800a45e <HAL_OSPI_Command+0x10e>
    {
      /* Initialize error code */
      hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 800a3c4:	68fb      	ldr	r3, [r7, #12]
 800a3c6:	2200      	movs	r2, #0
 800a3c8:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the registers */
      status = OSPI_ConfigCmd(hospi, cmd);
 800a3ca:	68b9      	ldr	r1, [r7, #8]
 800a3cc:	68f8      	ldr	r0, [r7, #12]
 800a3ce:	f000 fe4f 	bl	800b070 <OSPI_ConfigCmd>
 800a3d2:	4603      	mov	r3, r0
 800a3d4:	77fb      	strb	r3, [r7, #31]

      if (status == HAL_OK)
 800a3d6:	7ffb      	ldrb	r3, [r7, #31]
 800a3d8:	2b00      	cmp	r3, #0
 800a3da:	d140      	bne.n	800a45e <HAL_OSPI_Command+0x10e>
      {
        if (cmd->DataMode == HAL_OSPI_DATA_NONE)
 800a3dc:	68bb      	ldr	r3, [r7, #8]
 800a3de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a3e0:	2b00      	cmp	r3, #0
 800a3e2:	d10e      	bne.n	800a402 <HAL_OSPI_Command+0xb2>
        {
          /* When there is no data phase, the transfer start as soon as the configuration is done
             so wait until TC flag is set to go back in idle state */
          status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, Timeout);
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	9300      	str	r3, [sp, #0]
 800a3e8:	69bb      	ldr	r3, [r7, #24]
 800a3ea:	2201      	movs	r2, #1
 800a3ec:	2102      	movs	r1, #2
 800a3ee:	68f8      	ldr	r0, [r7, #12]
 800a3f0:	f000 fdfe 	bl	800aff0 <OSPI_WaitFlagStateUntilTimeout>
 800a3f4:	4603      	mov	r3, r0
 800a3f6:	77fb      	strb	r3, [r7, #31]

          __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 800a3f8:	68fb      	ldr	r3, [r7, #12]
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	2202      	movs	r2, #2
 800a3fe:	625a      	str	r2, [r3, #36]	; 0x24
    if (status == HAL_OK)
 800a400:	e02d      	b.n	800a45e <HAL_OSPI_Command+0x10e>
        }
        else
        {
          /* Update the state */
          if (cmd->OperationType == HAL_OSPI_OPTYPE_COMMON_CFG)
 800a402:	68bb      	ldr	r3, [r7, #8]
 800a404:	681b      	ldr	r3, [r3, #0]
 800a406:	2b00      	cmp	r3, #0
 800a408:	d103      	bne.n	800a412 <HAL_OSPI_Command+0xc2>
          {
            hospi->State = HAL_OSPI_STATE_CMD_CFG;
 800a40a:	68fb      	ldr	r3, [r7, #12]
 800a40c:	2204      	movs	r2, #4
 800a40e:	651a      	str	r2, [r3, #80]	; 0x50
    if (status == HAL_OK)
 800a410:	e025      	b.n	800a45e <HAL_OSPI_Command+0x10e>
          }
          else if (cmd->OperationType == HAL_OSPI_OPTYPE_READ_CFG)
 800a412:	68bb      	ldr	r3, [r7, #8]
 800a414:	681b      	ldr	r3, [r3, #0]
 800a416:	2b01      	cmp	r3, #1
 800a418:	d10b      	bne.n	800a432 <HAL_OSPI_Command+0xe2>
          {
            if (hospi->State == HAL_OSPI_STATE_WRITE_CMD_CFG)
 800a41a:	68fb      	ldr	r3, [r7, #12]
 800a41c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a41e:	2b24      	cmp	r3, #36	; 0x24
 800a420:	d103      	bne.n	800a42a <HAL_OSPI_Command+0xda>
            {
              hospi->State = HAL_OSPI_STATE_CMD_CFG;
 800a422:	68fb      	ldr	r3, [r7, #12]
 800a424:	2204      	movs	r2, #4
 800a426:	651a      	str	r2, [r3, #80]	; 0x50
    if (status == HAL_OK)
 800a428:	e019      	b.n	800a45e <HAL_OSPI_Command+0x10e>
            }
            else
            {
              hospi->State = HAL_OSPI_STATE_READ_CMD_CFG;
 800a42a:	68fb      	ldr	r3, [r7, #12]
 800a42c:	2214      	movs	r2, #20
 800a42e:	651a      	str	r2, [r3, #80]	; 0x50
    if (status == HAL_OK)
 800a430:	e015      	b.n	800a45e <HAL_OSPI_Command+0x10e>
            }
          }
          else if (cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG)
 800a432:	68bb      	ldr	r3, [r7, #8]
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	2b02      	cmp	r3, #2
 800a438:	d111      	bne.n	800a45e <HAL_OSPI_Command+0x10e>
          {
            if (hospi->State == HAL_OSPI_STATE_READ_CMD_CFG)
 800a43a:	68fb      	ldr	r3, [r7, #12]
 800a43c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a43e:	2b14      	cmp	r3, #20
 800a440:	d103      	bne.n	800a44a <HAL_OSPI_Command+0xfa>
            {
              hospi->State = HAL_OSPI_STATE_CMD_CFG;
 800a442:	68fb      	ldr	r3, [r7, #12]
 800a444:	2204      	movs	r2, #4
 800a446:	651a      	str	r2, [r3, #80]	; 0x50
    if (status == HAL_OK)
 800a448:	e009      	b.n	800a45e <HAL_OSPI_Command+0x10e>
            }
            else
            {
              hospi->State = HAL_OSPI_STATE_WRITE_CMD_CFG;
 800a44a:	68fb      	ldr	r3, [r7, #12]
 800a44c:	2224      	movs	r2, #36	; 0x24
 800a44e:	651a      	str	r2, [r3, #80]	; 0x50
    if (status == HAL_OK)
 800a450:	e005      	b.n	800a45e <HAL_OSPI_Command+0x10e>
      }
    }
  }
  else
  {
    status = HAL_ERROR;
 800a452:	2301      	movs	r3, #1
 800a454:	77fb      	strb	r3, [r7, #31]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 800a456:	68fb      	ldr	r3, [r7, #12]
 800a458:	2210      	movs	r2, #16
 800a45a:	655a      	str	r2, [r3, #84]	; 0x54
 800a45c:	e000      	b.n	800a460 <HAL_OSPI_Command+0x110>
    if (status == HAL_OK)
 800a45e:	bf00      	nop
  }

  /* Return function status */
  return status;
 800a460:	7ffb      	ldrb	r3, [r7, #31]
}
 800a462:	4618      	mov	r0, r3
 800a464:	3720      	adds	r7, #32
 800a466:	46bd      	mov	sp, r7
 800a468:	bd80      	pop	{r7, pc}

0800a46a <HAL_OSPI_MemoryMapped>:
  * @param  cfg   : structure that contains the memory mapped configuration information.
  * @note   This function is used only in Memory mapped Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_MemoryMapped(OSPI_HandleTypeDef *hospi, OSPI_MemoryMappedTypeDef *cfg)
{
 800a46a:	b580      	push	{r7, lr}
 800a46c:	b086      	sub	sp, #24
 800a46e:	af02      	add	r7, sp, #8
 800a470:	6078      	str	r0, [r7, #4]
 800a472:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800a474:	f7fc fc8c 	bl	8006d90 <HAL_GetTick>
 800a478:	60b8      	str	r0, [r7, #8]

  /* Check the parameters of the memory-mapped configuration structure */
  assert_param(IS_OSPI_TIMEOUT_ACTIVATION(cfg->TimeOutActivation));

  /* Check the state */
  if (hospi->State == HAL_OSPI_STATE_CMD_CFG)
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a47e:	2b04      	cmp	r3, #4
 800a480:	d136      	bne.n	800a4f0 <HAL_OSPI_MemoryMapped+0x86>
  {
    /* Wait till busy flag is reset */
    status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a486:	9300      	str	r3, [sp, #0]
 800a488:	68bb      	ldr	r3, [r7, #8]
 800a48a:	2200      	movs	r2, #0
 800a48c:	2120      	movs	r1, #32
 800a48e:	6878      	ldr	r0, [r7, #4]
 800a490:	f000 fdae 	bl	800aff0 <OSPI_WaitFlagStateUntilTimeout>
 800a494:	4603      	mov	r3, r0
 800a496:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 800a498:	7bfb      	ldrb	r3, [r7, #15]
 800a49a:	2b00      	cmp	r3, #0
 800a49c:	d12d      	bne.n	800a4fa <HAL_OSPI_MemoryMapped+0x90>
    {
      /* Update state */
      hospi->State = HAL_OSPI_STATE_BUSY_MEM_MAPPED;
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	2288      	movs	r2, #136	; 0x88
 800a4a2:	651a      	str	r2, [r3, #80]	; 0x50

      if (cfg->TimeOutActivation == HAL_OSPI_TIMEOUT_COUNTER_ENABLE)
 800a4a4:	683b      	ldr	r3, [r7, #0]
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	2b08      	cmp	r3, #8
 800a4aa:	d111      	bne.n	800a4d0 <HAL_OSPI_MemoryMapped+0x66>
      {
        assert_param(IS_OSPI_TIMEOUT_PERIOD(cfg->TimeOutPeriod));

        /* Configure register */
        WRITE_REG(hospi->Instance->LPTR, cfg->TimeOutPeriod);
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	683a      	ldr	r2, [r7, #0]
 800a4b2:	6852      	ldr	r2, [r2, #4]
 800a4b4:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130

        /* Clear flags related to interrupt */
        __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TO);
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	681b      	ldr	r3, [r3, #0]
 800a4bc:	2210      	movs	r2, #16
 800a4be:	625a      	str	r2, [r3, #36]	; 0x24

        /* Enable the timeout interrupt */
        __HAL_OSPI_ENABLE_IT(hospi, HAL_OSPI_IT_TO);
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	681a      	ldr	r2, [r3, #0]
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800a4ce:	601a      	str	r2, [r3, #0]
      }

      /* Configure CR register with functional mode as memory-mapped */
      MODIFY_REG(hospi->Instance->CR, (OCTOSPI_CR_TCEN | OCTOSPI_CR_FMODE),
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	681b      	ldr	r3, [r3, #0]
 800a4d4:	681b      	ldr	r3, [r3, #0]
 800a4d6:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 800a4da:	f023 0308 	bic.w	r3, r3, #8
 800a4de:	683a      	ldr	r2, [r7, #0]
 800a4e0:	6812      	ldr	r2, [r2, #0]
 800a4e2:	431a      	orrs	r2, r3
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	681b      	ldr	r3, [r3, #0]
 800a4e8:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 800a4ec:	601a      	str	r2, [r3, #0]
 800a4ee:	e004      	b.n	800a4fa <HAL_OSPI_MemoryMapped+0x90>
                 (cfg->TimeOutActivation | OSPI_FUNCTIONAL_MODE_MEMORY_MAPPED));
    }
  }
  else
  {
    status = HAL_ERROR;
 800a4f0:	2301      	movs	r3, #1
 800a4f2:	73fb      	strb	r3, [r7, #15]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	2210      	movs	r2, #16
 800a4f8:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Return function status */
  return status;
 800a4fa:	7bfb      	ldrb	r3, [r7, #15]
}
 800a4fc:	4618      	mov	r0, r3
 800a4fe:	3710      	adds	r7, #16
 800a500:	46bd      	mov	sp, r7
 800a502:	bd80      	pop	{r7, pc}

0800a504 <HAL_OSPI_Abort>:
  * @brief  Abort the current transmission.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Abort(OSPI_HandleTypeDef *hospi)
{
 800a504:	b580      	push	{r7, lr}
 800a506:	b088      	sub	sp, #32
 800a508:	af02      	add	r7, sp, #8
 800a50a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a50c:	2300      	movs	r3, #0
 800a50e:	75fb      	strb	r3, [r7, #23]
  uint32_t state;
  uint32_t tickstart = HAL_GetTick();
 800a510:	f7fc fc3e 	bl	8006d90 <HAL_GetTick>
 800a514:	6138      	str	r0, [r7, #16]

  /* Check if the state is in one of the busy or configured states */
  state = hospi->State;
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a51a:	60fb      	str	r3, [r7, #12]
  if (((state & OSPI_BUSY_STATE_MASK) != 0U) || ((state & OSPI_CFG_STATE_MASK) != 0U))
 800a51c:	68fb      	ldr	r3, [r7, #12]
 800a51e:	f003 0308 	and.w	r3, r3, #8
 800a522:	2b00      	cmp	r3, #0
 800a524:	d104      	bne.n	800a530 <HAL_OSPI_Abort+0x2c>
 800a526:	68fb      	ldr	r3, [r7, #12]
 800a528:	f003 0304 	and.w	r3, r3, #4
 800a52c:	2b00      	cmp	r3, #0
 800a52e:	d052      	beq.n	800a5d6 <HAL_OSPI_Abort+0xd2>
  {
    /* Check if the DMA is enabled */
    if ((hospi->Instance->CR & OCTOSPI_CR_DMAEN) != 0U)
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	681b      	ldr	r3, [r3, #0]
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	f003 0304 	and.w	r3, r3, #4
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	d014      	beq.n	800a568 <HAL_OSPI_Abort+0x64>
    {
      /* Disable the DMA transfer on the OctoSPI side */
      CLEAR_BIT(hospi->Instance->CR, OCTOSPI_CR_DMAEN);
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	681b      	ldr	r3, [r3, #0]
 800a542:	681a      	ldr	r2, [r3, #0]
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	f022 0204 	bic.w	r2, r2, #4
 800a54c:	601a      	str	r2, [r3, #0]

      /* Disable the DMA transfer on the DMA side */
      status = HAL_DMA_Abort(hospi->hdma);
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a552:	4618      	mov	r0, r3
 800a554:	f7fd fb31 	bl	8007bba <HAL_DMA_Abort>
 800a558:	4603      	mov	r3, r0
 800a55a:	75fb      	strb	r3, [r7, #23]
      if (status != HAL_OK)
 800a55c:	7dfb      	ldrb	r3, [r7, #23]
 800a55e:	2b00      	cmp	r3, #0
 800a560:	d002      	beq.n	800a568 <HAL_OSPI_Abort+0x64>
      {
        hospi->ErrorCode = HAL_OSPI_ERROR_DMA;
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	2204      	movs	r2, #4
 800a566:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }

    if (__HAL_OSPI_GET_FLAG(hospi, HAL_OSPI_FLAG_BUSY) != RESET)
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	6a1b      	ldr	r3, [r3, #32]
 800a56e:	f003 0320 	and.w	r3, r3, #32
 800a572:	2b00      	cmp	r3, #0
 800a574:	d02b      	beq.n	800a5ce <HAL_OSPI_Abort+0xca>
    {
      /* Perform an abort of the OctoSPI */
      SET_BIT(hospi->Instance->CR, OCTOSPI_CR_ABORT);
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	681b      	ldr	r3, [r3, #0]
 800a57a:	681a      	ldr	r2, [r3, #0]
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	f042 0202 	orr.w	r2, r2, #2
 800a584:	601a      	str	r2, [r3, #0]

      /* Wait until the transfer complete flag is set to go back in idle state */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, hospi->Timeout);
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a58a:	9300      	str	r3, [sp, #0]
 800a58c:	693b      	ldr	r3, [r7, #16]
 800a58e:	2201      	movs	r2, #1
 800a590:	2102      	movs	r1, #2
 800a592:	6878      	ldr	r0, [r7, #4]
 800a594:	f000 fd2c 	bl	800aff0 <OSPI_WaitFlagStateUntilTimeout>
 800a598:	4603      	mov	r3, r0
 800a59a:	75fb      	strb	r3, [r7, #23]

      if (status == HAL_OK)
 800a59c:	7dfb      	ldrb	r3, [r7, #23]
 800a59e:	2b00      	cmp	r3, #0
 800a5a0:	d11f      	bne.n	800a5e2 <HAL_OSPI_Abort+0xde>
      {
        /* Clear transfer complete flag */
        __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	2202      	movs	r2, #2
 800a5a8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Wait until the busy flag is reset to go back in idle state */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a5ae:	9300      	str	r3, [sp, #0]
 800a5b0:	693b      	ldr	r3, [r7, #16]
 800a5b2:	2200      	movs	r2, #0
 800a5b4:	2120      	movs	r1, #32
 800a5b6:	6878      	ldr	r0, [r7, #4]
 800a5b8:	f000 fd1a 	bl	800aff0 <OSPI_WaitFlagStateUntilTimeout>
 800a5bc:	4603      	mov	r3, r0
 800a5be:	75fb      	strb	r3, [r7, #23]

        if (status == HAL_OK)
 800a5c0:	7dfb      	ldrb	r3, [r7, #23]
 800a5c2:	2b00      	cmp	r3, #0
 800a5c4:	d10d      	bne.n	800a5e2 <HAL_OSPI_Abort+0xde>
        {
          /* Update state */
          hospi->State = HAL_OSPI_STATE_READY;
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	2202      	movs	r2, #2
 800a5ca:	651a      	str	r2, [r3, #80]	; 0x50
    if (__HAL_OSPI_GET_FLAG(hospi, HAL_OSPI_FLAG_BUSY) != RESET)
 800a5cc:	e009      	b.n	800a5e2 <HAL_OSPI_Abort+0xde>
      }
    }
    else
    {
      /* Update state */
      hospi->State = HAL_OSPI_STATE_READY;
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	2202      	movs	r2, #2
 800a5d2:	651a      	str	r2, [r3, #80]	; 0x50
    if (__HAL_OSPI_GET_FLAG(hospi, HAL_OSPI_FLAG_BUSY) != RESET)
 800a5d4:	e005      	b.n	800a5e2 <HAL_OSPI_Abort+0xde>
    }
  }
  else
  {
    status = HAL_ERROR;
 800a5d6:	2301      	movs	r3, #1
 800a5d8:	75fb      	strb	r3, [r7, #23]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	2210      	movs	r2, #16
 800a5de:	655a      	str	r2, [r3, #84]	; 0x54
 800a5e0:	e000      	b.n	800a5e4 <HAL_OSPI_Abort+0xe0>
    if (__HAL_OSPI_GET_FLAG(hospi, HAL_OSPI_FLAG_BUSY) != RESET)
 800a5e2:	bf00      	nop
  }

  /* Return function status */
  return status;
 800a5e4:	7dfb      	ldrb	r3, [r7, #23]
}
 800a5e6:	4618      	mov	r0, r3
 800a5e8:	3718      	adds	r7, #24
 800a5ea:	46bd      	mov	sp, r7
 800a5ec:	bd80      	pop	{r7, pc}

0800a5ee <HAL_OSPI_SetTimeout>:
  * @param  hospi   : OSPI handle.
  * @param  Timeout : Timeout for the memory access.
  * @retval None
  */
HAL_StatusTypeDef HAL_OSPI_SetTimeout(OSPI_HandleTypeDef *hospi, uint32_t Timeout)
{
 800a5ee:	b480      	push	{r7}
 800a5f0:	b083      	sub	sp, #12
 800a5f2:	af00      	add	r7, sp, #0
 800a5f4:	6078      	str	r0, [r7, #4]
 800a5f6:	6039      	str	r1, [r7, #0]
  hospi->Timeout = Timeout;
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	683a      	ldr	r2, [r7, #0]
 800a5fc:	659a      	str	r2, [r3, #88]	; 0x58
  return HAL_OK;
 800a5fe:	2300      	movs	r3, #0
}
 800a600:	4618      	mov	r0, r3
 800a602:	370c      	adds	r7, #12
 800a604:	46bd      	mov	sp, r7
 800a606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a60a:	4770      	bx	lr

0800a60c <HAL_OSPIM_Config>:
  * @param  cfg     : Configuration of the IO Manager for the instance
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPIM_Config(OSPI_HandleTypeDef *hospi, OSPIM_CfgTypeDef *cfg, uint32_t Timeout)
{
 800a60c:	b580      	push	{r7, lr}
 800a60e:	b094      	sub	sp, #80	; 0x50
 800a610:	af00      	add	r7, sp, #0
 800a612:	60f8      	str	r0, [r7, #12]
 800a614:	60b9      	str	r1, [r7, #8]
 800a616:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a618:	2300      	movs	r3, #0
 800a61a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  uint32_t instance;
  uint8_t index;
  uint8_t ospi_enabled = 0U;
 800a61e:	2300      	movs	r3, #0
 800a620:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
  assert_param(IS_OSPIM_DQS_PORT(cfg->DQSPort));
  assert_param(IS_OSPIM_PORT(cfg->NCSPort));
  assert_param(IS_OSPIM_IO_PORT(cfg->IOLowPort));
  assert_param(IS_OSPIM_IO_PORT(cfg->IOHighPort));

  if (hospi->Instance == (OCTOSPI_TypeDef *)OCTOSPI1)
 800a624:	68fb      	ldr	r3, [r7, #12]
 800a626:	681b      	ldr	r3, [r3, #0]
 800a628:	4a9d      	ldr	r2, [pc, #628]	; (800a8a0 <HAL_OSPIM_Config+0x294>)
 800a62a:	4293      	cmp	r3, r2
 800a62c:	d105      	bne.n	800a63a <HAL_OSPIM_Config+0x2e>
  {
    instance = 0U;
 800a62e:	2300      	movs	r3, #0
 800a630:	64bb      	str	r3, [r7, #72]	; 0x48
    other_instance = 1U;
 800a632:	2301      	movs	r3, #1
 800a634:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 800a638:	e004      	b.n	800a644 <HAL_OSPIM_Config+0x38>
  }
  else
  {
    instance = 1U;
 800a63a:	2301      	movs	r3, #1
 800a63c:	64bb      	str	r3, [r7, #72]	; 0x48
    other_instance = 0U;
 800a63e:	2300      	movs	r3, #0
 800a640:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  }

  /**************** Get current configuration of the instances ****************/
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 800a644:	2300      	movs	r3, #0
 800a646:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800a64a:	e01d      	b.n	800a688 <HAL_OSPIM_Config+0x7c>
  {
    if (OSPIM_GetConfig(index + 1U, &(IOM_cfg[index])) != HAL_OK)
 800a64c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800a650:	3301      	adds	r3, #1
 800a652:	b2d8      	uxtb	r0, r3
 800a654:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 800a658:	f107 0114 	add.w	r1, r7, #20
 800a65c:	4613      	mov	r3, r2
 800a65e:	005b      	lsls	r3, r3, #1
 800a660:	4413      	add	r3, r2
 800a662:	00db      	lsls	r3, r3, #3
 800a664:	440b      	add	r3, r1
 800a666:	4619      	mov	r1, r3
 800a668:	f000 fe7c 	bl	800b364 <OSPIM_GetConfig>
 800a66c:	4603      	mov	r3, r0
 800a66e:	2b00      	cmp	r3, #0
 800a670:	d005      	beq.n	800a67e <HAL_OSPIM_Config+0x72>
    {
      status = HAL_ERROR;
 800a672:	2301      	movs	r3, #1
 800a674:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 800a678:	68fb      	ldr	r3, [r7, #12]
 800a67a:	2208      	movs	r2, #8
 800a67c:	655a      	str	r2, [r3, #84]	; 0x54
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 800a67e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800a682:	3301      	adds	r3, #1
 800a684:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800a688:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800a68c:	2b01      	cmp	r3, #1
 800a68e:	d9dd      	bls.n	800a64c <HAL_OSPIM_Config+0x40>
    }
  }

  if (status == HAL_OK)
 800a690:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800a694:	2b00      	cmp	r3, #0
 800a696:	f040 849e 	bne.w	800afd6 <HAL_OSPIM_Config+0x9ca>
  {
    /********** Disable both OctoSPI to configure OctoSPI IO Manager **********/
    if ((OCTOSPI1->CR & OCTOSPI_CR_EN) != 0U)
 800a69a:	4b81      	ldr	r3, [pc, #516]	; (800a8a0 <HAL_OSPIM_Config+0x294>)
 800a69c:	681b      	ldr	r3, [r3, #0]
 800a69e:	f003 0301 	and.w	r3, r3, #1
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	d00b      	beq.n	800a6be <HAL_OSPIM_Config+0xb2>
    {
      CLEAR_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 800a6a6:	4b7e      	ldr	r3, [pc, #504]	; (800a8a0 <HAL_OSPIM_Config+0x294>)
 800a6a8:	681b      	ldr	r3, [r3, #0]
 800a6aa:	4a7d      	ldr	r2, [pc, #500]	; (800a8a0 <HAL_OSPIM_Config+0x294>)
 800a6ac:	f023 0301 	bic.w	r3, r3, #1
 800a6b0:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x1U;
 800a6b2:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800a6b6:	f043 0301 	orr.w	r3, r3, #1
 800a6ba:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    }
    if ((OCTOSPI2->CR & OCTOSPI_CR_EN) != 0U)
 800a6be:	4b79      	ldr	r3, [pc, #484]	; (800a8a4 <HAL_OSPIM_Config+0x298>)
 800a6c0:	681b      	ldr	r3, [r3, #0]
 800a6c2:	f003 0301 	and.w	r3, r3, #1
 800a6c6:	2b00      	cmp	r3, #0
 800a6c8:	d00b      	beq.n	800a6e2 <HAL_OSPIM_Config+0xd6>
    {
      CLEAR_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 800a6ca:	4b76      	ldr	r3, [pc, #472]	; (800a8a4 <HAL_OSPIM_Config+0x298>)
 800a6cc:	681b      	ldr	r3, [r3, #0]
 800a6ce:	4a75      	ldr	r2, [pc, #468]	; (800a8a4 <HAL_OSPIM_Config+0x298>)
 800a6d0:	f023 0301 	bic.w	r3, r3, #1
 800a6d4:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x2U;
 800a6d6:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800a6da:	f043 0302 	orr.w	r3, r3, #2
 800a6de:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    }

    /***************** Deactivation of previous configuration *****************/
    CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].NCSPort - 1U)], OCTOSPIM_PCR_NCSEN);
 800a6e2:	4971      	ldr	r1, [pc, #452]	; (800a8a8 <HAL_OSPIM_Config+0x29c>)
 800a6e4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a6e6:	4613      	mov	r3, r2
 800a6e8:	005b      	lsls	r3, r3, #1
 800a6ea:	4413      	add	r3, r2
 800a6ec:	00db      	lsls	r3, r3, #3
 800a6ee:	3350      	adds	r3, #80	; 0x50
 800a6f0:	443b      	add	r3, r7
 800a6f2:	3b34      	subs	r3, #52	; 0x34
 800a6f4:	681b      	ldr	r3, [r3, #0]
 800a6f6:	3b01      	subs	r3, #1
 800a6f8:	009b      	lsls	r3, r3, #2
 800a6fa:	440b      	add	r3, r1
 800a6fc:	6859      	ldr	r1, [r3, #4]
 800a6fe:	486a      	ldr	r0, [pc, #424]	; (800a8a8 <HAL_OSPIM_Config+0x29c>)
 800a700:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a702:	4613      	mov	r3, r2
 800a704:	005b      	lsls	r3, r3, #1
 800a706:	4413      	add	r3, r2
 800a708:	00db      	lsls	r3, r3, #3
 800a70a:	3350      	adds	r3, #80	; 0x50
 800a70c:	443b      	add	r3, r7
 800a70e:	3b34      	subs	r3, #52	; 0x34
 800a710:	681b      	ldr	r3, [r3, #0]
 800a712:	3b01      	subs	r3, #1
 800a714:	f421 7280 	bic.w	r2, r1, #256	; 0x100
 800a718:	009b      	lsls	r3, r3, #2
 800a71a:	4403      	add	r3, r0
 800a71c:	605a      	str	r2, [r3, #4]
    if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) != 0U)
 800a71e:	4b62      	ldr	r3, [pc, #392]	; (800a8a8 <HAL_OSPIM_Config+0x29c>)
 800a720:	681b      	ldr	r3, [r3, #0]
 800a722:	f003 0301 	and.w	r3, r3, #1
 800a726:	2b00      	cmp	r3, #0
 800a728:	f000 80c0 	beq.w	800a8ac <HAL_OSPIM_Config+0x2a0>
    {
      /* De-multiplexing should be performed */
      CLEAR_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
 800a72c:	4b5e      	ldr	r3, [pc, #376]	; (800a8a8 <HAL_OSPIM_Config+0x29c>)
 800a72e:	681b      	ldr	r3, [r3, #0]
 800a730:	4a5d      	ldr	r2, [pc, #372]	; (800a8a8 <HAL_OSPIM_Config+0x29c>)
 800a732:	f023 0301 	bic.w	r3, r3, #1
 800a736:	6013      	str	r3, [r2, #0]

      if (other_instance == 1U)
 800a738:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 800a73c:	2b01      	cmp	r3, #1
 800a73e:	f040 8162 	bne.w	800aa06 <HAL_OSPIM_Config+0x3fa>
      {
        SET_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKSRC);
 800a742:	4959      	ldr	r1, [pc, #356]	; (800a8a8 <HAL_OSPIM_Config+0x29c>)
 800a744:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800a748:	4613      	mov	r3, r2
 800a74a:	005b      	lsls	r3, r3, #1
 800a74c:	4413      	add	r3, r2
 800a74e:	00db      	lsls	r3, r3, #3
 800a750:	3350      	adds	r3, #80	; 0x50
 800a752:	443b      	add	r3, r7
 800a754:	3b3c      	subs	r3, #60	; 0x3c
 800a756:	681b      	ldr	r3, [r3, #0]
 800a758:	3b01      	subs	r3, #1
 800a75a:	009b      	lsls	r3, r3, #2
 800a75c:	440b      	add	r3, r1
 800a75e:	6859      	ldr	r1, [r3, #4]
 800a760:	4851      	ldr	r0, [pc, #324]	; (800a8a8 <HAL_OSPIM_Config+0x29c>)
 800a762:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800a766:	4613      	mov	r3, r2
 800a768:	005b      	lsls	r3, r3, #1
 800a76a:	4413      	add	r3, r2
 800a76c:	00db      	lsls	r3, r3, #3
 800a76e:	3350      	adds	r3, #80	; 0x50
 800a770:	443b      	add	r3, r7
 800a772:	3b3c      	subs	r3, #60	; 0x3c
 800a774:	681b      	ldr	r3, [r3, #0]
 800a776:	3b01      	subs	r3, #1
 800a778:	f041 0202 	orr.w	r2, r1, #2
 800a77c:	009b      	lsls	r3, r3, #2
 800a77e:	4403      	add	r3, r0
 800a780:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 800a782:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800a786:	4613      	mov	r3, r2
 800a788:	005b      	lsls	r3, r3, #1
 800a78a:	4413      	add	r3, r2
 800a78c:	00db      	lsls	r3, r3, #3
 800a78e:	3350      	adds	r3, #80	; 0x50
 800a790:	443b      	add	r3, r7
 800a792:	3b38      	subs	r3, #56	; 0x38
 800a794:	681b      	ldr	r3, [r3, #0]
 800a796:	2b00      	cmp	r3, #0
 800a798:	d01f      	beq.n	800a7da <HAL_OSPIM_Config+0x1ce>
        {
          SET_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSSRC);
 800a79a:	4943      	ldr	r1, [pc, #268]	; (800a8a8 <HAL_OSPIM_Config+0x29c>)
 800a79c:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800a7a0:	4613      	mov	r3, r2
 800a7a2:	005b      	lsls	r3, r3, #1
 800a7a4:	4413      	add	r3, r2
 800a7a6:	00db      	lsls	r3, r3, #3
 800a7a8:	3350      	adds	r3, #80	; 0x50
 800a7aa:	443b      	add	r3, r7
 800a7ac:	3b38      	subs	r3, #56	; 0x38
 800a7ae:	681b      	ldr	r3, [r3, #0]
 800a7b0:	3b01      	subs	r3, #1
 800a7b2:	009b      	lsls	r3, r3, #2
 800a7b4:	440b      	add	r3, r1
 800a7b6:	6859      	ldr	r1, [r3, #4]
 800a7b8:	483b      	ldr	r0, [pc, #236]	; (800a8a8 <HAL_OSPIM_Config+0x29c>)
 800a7ba:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800a7be:	4613      	mov	r3, r2
 800a7c0:	005b      	lsls	r3, r3, #1
 800a7c2:	4413      	add	r3, r2
 800a7c4:	00db      	lsls	r3, r3, #3
 800a7c6:	3350      	adds	r3, #80	; 0x50
 800a7c8:	443b      	add	r3, r7
 800a7ca:	3b38      	subs	r3, #56	; 0x38
 800a7cc:	681b      	ldr	r3, [r3, #0]
 800a7ce:	3b01      	subs	r3, #1
 800a7d0:	f041 0220 	orr.w	r2, r1, #32
 800a7d4:	009b      	lsls	r3, r3, #2
 800a7d6:	4403      	add	r3, r0
 800a7d8:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 800a7da:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800a7de:	4613      	mov	r3, r2
 800a7e0:	005b      	lsls	r3, r3, #1
 800a7e2:	4413      	add	r3, r2
 800a7e4:	00db      	lsls	r3, r3, #3
 800a7e6:	3350      	adds	r3, #80	; 0x50
 800a7e8:	443b      	add	r3, r7
 800a7ea:	3b30      	subs	r3, #48	; 0x30
 800a7ec:	681b      	ldr	r3, [r3, #0]
 800a7ee:	2b00      	cmp	r3, #0
 800a7f0:	d023      	beq.n	800a83a <HAL_OSPIM_Config+0x22e>
        {
          SET_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 800a7f2:	492d      	ldr	r1, [pc, #180]	; (800a8a8 <HAL_OSPIM_Config+0x29c>)
 800a7f4:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800a7f8:	4613      	mov	r3, r2
 800a7fa:	005b      	lsls	r3, r3, #1
 800a7fc:	4413      	add	r3, r2
 800a7fe:	00db      	lsls	r3, r3, #3
 800a800:	3350      	adds	r3, #80	; 0x50
 800a802:	443b      	add	r3, r7
 800a804:	3b30      	subs	r3, #48	; 0x30
 800a806:	681b      	ldr	r3, [r3, #0]
 800a808:	3b01      	subs	r3, #1
 800a80a:	f003 0301 	and.w	r3, r3, #1
 800a80e:	009b      	lsls	r3, r3, #2
 800a810:	440b      	add	r3, r1
 800a812:	6859      	ldr	r1, [r3, #4]
 800a814:	4824      	ldr	r0, [pc, #144]	; (800a8a8 <HAL_OSPIM_Config+0x29c>)
 800a816:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800a81a:	4613      	mov	r3, r2
 800a81c:	005b      	lsls	r3, r3, #1
 800a81e:	4413      	add	r3, r2
 800a820:	00db      	lsls	r3, r3, #3
 800a822:	3350      	adds	r3, #80	; 0x50
 800a824:	443b      	add	r3, r7
 800a826:	3b30      	subs	r3, #48	; 0x30
 800a828:	681b      	ldr	r3, [r3, #0]
 800a82a:	3b01      	subs	r3, #1
 800a82c:	f003 0301 	and.w	r3, r3, #1
 800a830:	f441 2280 	orr.w	r2, r1, #262144	; 0x40000
 800a834:	009b      	lsls	r3, r3, #2
 800a836:	4403      	add	r3, r0
 800a838:	605a      	str	r2, [r3, #4]
                  OCTOSPIM_PCR_IOLSRC_1);
        }
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 800a83a:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800a83e:	4613      	mov	r3, r2
 800a840:	005b      	lsls	r3, r3, #1
 800a842:	4413      	add	r3, r2
 800a844:	00db      	lsls	r3, r3, #3
 800a846:	3350      	adds	r3, #80	; 0x50
 800a848:	443b      	add	r3, r7
 800a84a:	3b2c      	subs	r3, #44	; 0x2c
 800a84c:	681b      	ldr	r3, [r3, #0]
 800a84e:	2b00      	cmp	r3, #0
 800a850:	f000 80d9 	beq.w	800aa06 <HAL_OSPIM_Config+0x3fa>
        {
          SET_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 800a854:	4914      	ldr	r1, [pc, #80]	; (800a8a8 <HAL_OSPIM_Config+0x29c>)
 800a856:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800a85a:	4613      	mov	r3, r2
 800a85c:	005b      	lsls	r3, r3, #1
 800a85e:	4413      	add	r3, r2
 800a860:	00db      	lsls	r3, r3, #3
 800a862:	3350      	adds	r3, #80	; 0x50
 800a864:	443b      	add	r3, r7
 800a866:	3b2c      	subs	r3, #44	; 0x2c
 800a868:	681b      	ldr	r3, [r3, #0]
 800a86a:	3b01      	subs	r3, #1
 800a86c:	f003 0301 	and.w	r3, r3, #1
 800a870:	009b      	lsls	r3, r3, #2
 800a872:	440b      	add	r3, r1
 800a874:	6859      	ldr	r1, [r3, #4]
 800a876:	480c      	ldr	r0, [pc, #48]	; (800a8a8 <HAL_OSPIM_Config+0x29c>)
 800a878:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800a87c:	4613      	mov	r3, r2
 800a87e:	005b      	lsls	r3, r3, #1
 800a880:	4413      	add	r3, r2
 800a882:	00db      	lsls	r3, r3, #3
 800a884:	3350      	adds	r3, #80	; 0x50
 800a886:	443b      	add	r3, r7
 800a888:	3b2c      	subs	r3, #44	; 0x2c
 800a88a:	681b      	ldr	r3, [r3, #0]
 800a88c:	3b01      	subs	r3, #1
 800a88e:	f003 0301 	and.w	r3, r3, #1
 800a892:	f041 6280 	orr.w	r2, r1, #67108864	; 0x4000000
 800a896:	009b      	lsls	r3, r3, #2
 800a898:	4403      	add	r3, r0
 800a89a:	605a      	str	r2, [r3, #4]
 800a89c:	e0b3      	b.n	800aa06 <HAL_OSPIM_Config+0x3fa>
 800a89e:	bf00      	nop
 800a8a0:	420d1400 	.word	0x420d1400
 800a8a4:	420d2400 	.word	0x420d2400
 800a8a8:	420c4000 	.word	0x420c4000
        }
      }
    }
    else
    {
      if (IOM_cfg[instance].ClkPort != 0U)
 800a8ac:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a8ae:	4613      	mov	r3, r2
 800a8b0:	005b      	lsls	r3, r3, #1
 800a8b2:	4413      	add	r3, r2
 800a8b4:	00db      	lsls	r3, r3, #3
 800a8b6:	3350      	adds	r3, #80	; 0x50
 800a8b8:	443b      	add	r3, r7
 800a8ba:	3b3c      	subs	r3, #60	; 0x3c
 800a8bc:	681b      	ldr	r3, [r3, #0]
 800a8be:	2b00      	cmp	r3, #0
 800a8c0:	f000 80a1 	beq.w	800aa06 <HAL_OSPIM_Config+0x3fa>
      {
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKEN);
 800a8c4:	4993      	ldr	r1, [pc, #588]	; (800ab14 <HAL_OSPIM_Config+0x508>)
 800a8c6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a8c8:	4613      	mov	r3, r2
 800a8ca:	005b      	lsls	r3, r3, #1
 800a8cc:	4413      	add	r3, r2
 800a8ce:	00db      	lsls	r3, r3, #3
 800a8d0:	3350      	adds	r3, #80	; 0x50
 800a8d2:	443b      	add	r3, r7
 800a8d4:	3b3c      	subs	r3, #60	; 0x3c
 800a8d6:	681b      	ldr	r3, [r3, #0]
 800a8d8:	3b01      	subs	r3, #1
 800a8da:	009b      	lsls	r3, r3, #2
 800a8dc:	440b      	add	r3, r1
 800a8de:	6859      	ldr	r1, [r3, #4]
 800a8e0:	488c      	ldr	r0, [pc, #560]	; (800ab14 <HAL_OSPIM_Config+0x508>)
 800a8e2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a8e4:	4613      	mov	r3, r2
 800a8e6:	005b      	lsls	r3, r3, #1
 800a8e8:	4413      	add	r3, r2
 800a8ea:	00db      	lsls	r3, r3, #3
 800a8ec:	3350      	adds	r3, #80	; 0x50
 800a8ee:	443b      	add	r3, r7
 800a8f0:	3b3c      	subs	r3, #60	; 0x3c
 800a8f2:	681b      	ldr	r3, [r3, #0]
 800a8f4:	3b01      	subs	r3, #1
 800a8f6:	f021 0201 	bic.w	r2, r1, #1
 800a8fa:	009b      	lsls	r3, r3, #2
 800a8fc:	4403      	add	r3, r0
 800a8fe:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[instance].DQSPort != 0U)
 800a900:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a902:	4613      	mov	r3, r2
 800a904:	005b      	lsls	r3, r3, #1
 800a906:	4413      	add	r3, r2
 800a908:	00db      	lsls	r3, r3, #3
 800a90a:	3350      	adds	r3, #80	; 0x50
 800a90c:	443b      	add	r3, r7
 800a90e:	3b38      	subs	r3, #56	; 0x38
 800a910:	681b      	ldr	r3, [r3, #0]
 800a912:	2b00      	cmp	r3, #0
 800a914:	d01d      	beq.n	800a952 <HAL_OSPIM_Config+0x346>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSEN);
 800a916:	497f      	ldr	r1, [pc, #508]	; (800ab14 <HAL_OSPIM_Config+0x508>)
 800a918:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a91a:	4613      	mov	r3, r2
 800a91c:	005b      	lsls	r3, r3, #1
 800a91e:	4413      	add	r3, r2
 800a920:	00db      	lsls	r3, r3, #3
 800a922:	3350      	adds	r3, #80	; 0x50
 800a924:	443b      	add	r3, r7
 800a926:	3b38      	subs	r3, #56	; 0x38
 800a928:	681b      	ldr	r3, [r3, #0]
 800a92a:	3b01      	subs	r3, #1
 800a92c:	009b      	lsls	r3, r3, #2
 800a92e:	440b      	add	r3, r1
 800a930:	6859      	ldr	r1, [r3, #4]
 800a932:	4878      	ldr	r0, [pc, #480]	; (800ab14 <HAL_OSPIM_Config+0x508>)
 800a934:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a936:	4613      	mov	r3, r2
 800a938:	005b      	lsls	r3, r3, #1
 800a93a:	4413      	add	r3, r2
 800a93c:	00db      	lsls	r3, r3, #3
 800a93e:	3350      	adds	r3, #80	; 0x50
 800a940:	443b      	add	r3, r7
 800a942:	3b38      	subs	r3, #56	; 0x38
 800a944:	681b      	ldr	r3, [r3, #0]
 800a946:	3b01      	subs	r3, #1
 800a948:	f021 0210 	bic.w	r2, r1, #16
 800a94c:	009b      	lsls	r3, r3, #2
 800a94e:	4403      	add	r3, r0
 800a950:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 800a952:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a954:	4613      	mov	r3, r2
 800a956:	005b      	lsls	r3, r3, #1
 800a958:	4413      	add	r3, r2
 800a95a:	00db      	lsls	r3, r3, #3
 800a95c:	3350      	adds	r3, #80	; 0x50
 800a95e:	443b      	add	r3, r7
 800a960:	3b30      	subs	r3, #48	; 0x30
 800a962:	681b      	ldr	r3, [r3, #0]
 800a964:	2b00      	cmp	r3, #0
 800a966:	d021      	beq.n	800a9ac <HAL_OSPIM_Config+0x3a0>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOLEN);
 800a968:	496a      	ldr	r1, [pc, #424]	; (800ab14 <HAL_OSPIM_Config+0x508>)
 800a96a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a96c:	4613      	mov	r3, r2
 800a96e:	005b      	lsls	r3, r3, #1
 800a970:	4413      	add	r3, r2
 800a972:	00db      	lsls	r3, r3, #3
 800a974:	3350      	adds	r3, #80	; 0x50
 800a976:	443b      	add	r3, r7
 800a978:	3b30      	subs	r3, #48	; 0x30
 800a97a:	681b      	ldr	r3, [r3, #0]
 800a97c:	3b01      	subs	r3, #1
 800a97e:	f003 0301 	and.w	r3, r3, #1
 800a982:	009b      	lsls	r3, r3, #2
 800a984:	440b      	add	r3, r1
 800a986:	6859      	ldr	r1, [r3, #4]
 800a988:	4862      	ldr	r0, [pc, #392]	; (800ab14 <HAL_OSPIM_Config+0x508>)
 800a98a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a98c:	4613      	mov	r3, r2
 800a98e:	005b      	lsls	r3, r3, #1
 800a990:	4413      	add	r3, r2
 800a992:	00db      	lsls	r3, r3, #3
 800a994:	3350      	adds	r3, #80	; 0x50
 800a996:	443b      	add	r3, r7
 800a998:	3b30      	subs	r3, #48	; 0x30
 800a99a:	681b      	ldr	r3, [r3, #0]
 800a99c:	3b01      	subs	r3, #1
 800a99e:	f003 0301 	and.w	r3, r3, #1
 800a9a2:	f421 3280 	bic.w	r2, r1, #65536	; 0x10000
 800a9a6:	009b      	lsls	r3, r3, #2
 800a9a8:	4403      	add	r3, r0
 800a9aa:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 800a9ac:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a9ae:	4613      	mov	r3, r2
 800a9b0:	005b      	lsls	r3, r3, #1
 800a9b2:	4413      	add	r3, r2
 800a9b4:	00db      	lsls	r3, r3, #3
 800a9b6:	3350      	adds	r3, #80	; 0x50
 800a9b8:	443b      	add	r3, r7
 800a9ba:	3b2c      	subs	r3, #44	; 0x2c
 800a9bc:	681b      	ldr	r3, [r3, #0]
 800a9be:	2b00      	cmp	r3, #0
 800a9c0:	d021      	beq.n	800aa06 <HAL_OSPIM_Config+0x3fa>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOHEN);
 800a9c2:	4954      	ldr	r1, [pc, #336]	; (800ab14 <HAL_OSPIM_Config+0x508>)
 800a9c4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a9c6:	4613      	mov	r3, r2
 800a9c8:	005b      	lsls	r3, r3, #1
 800a9ca:	4413      	add	r3, r2
 800a9cc:	00db      	lsls	r3, r3, #3
 800a9ce:	3350      	adds	r3, #80	; 0x50
 800a9d0:	443b      	add	r3, r7
 800a9d2:	3b2c      	subs	r3, #44	; 0x2c
 800a9d4:	681b      	ldr	r3, [r3, #0]
 800a9d6:	3b01      	subs	r3, #1
 800a9d8:	f003 0301 	and.w	r3, r3, #1
 800a9dc:	009b      	lsls	r3, r3, #2
 800a9de:	440b      	add	r3, r1
 800a9e0:	6859      	ldr	r1, [r3, #4]
 800a9e2:	484c      	ldr	r0, [pc, #304]	; (800ab14 <HAL_OSPIM_Config+0x508>)
 800a9e4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a9e6:	4613      	mov	r3, r2
 800a9e8:	005b      	lsls	r3, r3, #1
 800a9ea:	4413      	add	r3, r2
 800a9ec:	00db      	lsls	r3, r3, #3
 800a9ee:	3350      	adds	r3, #80	; 0x50
 800a9f0:	443b      	add	r3, r7
 800a9f2:	3b2c      	subs	r3, #44	; 0x2c
 800a9f4:	681b      	ldr	r3, [r3, #0]
 800a9f6:	3b01      	subs	r3, #1
 800a9f8:	f003 0301 	and.w	r3, r3, #1
 800a9fc:	f021 7280 	bic.w	r2, r1, #16777216	; 0x1000000
 800aa00:	009b      	lsls	r3, r3, #2
 800aa02:	4403      	add	r3, r0
 800aa04:	605a      	str	r2, [r3, #4]
        }
      }
    }

    /********************* Deactivation of other instance *********************/
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 800aa06:	68bb      	ldr	r3, [r7, #8]
 800aa08:	6819      	ldr	r1, [r3, #0]
 800aa0a:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800aa0e:	4613      	mov	r3, r2
 800aa10:	005b      	lsls	r3, r3, #1
 800aa12:	4413      	add	r3, r2
 800aa14:	00db      	lsls	r3, r3, #3
 800aa16:	3350      	adds	r3, #80	; 0x50
 800aa18:	443b      	add	r3, r7
 800aa1a:	3b3c      	subs	r3, #60	; 0x3c
 800aa1c:	681b      	ldr	r3, [r3, #0]
 800aa1e:	4299      	cmp	r1, r3
 800aa20:	d038      	beq.n	800aa94 <HAL_OSPIM_Config+0x488>
 800aa22:	68bb      	ldr	r3, [r7, #8]
 800aa24:	6859      	ldr	r1, [r3, #4]
 800aa26:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800aa2a:	4613      	mov	r3, r2
 800aa2c:	005b      	lsls	r3, r3, #1
 800aa2e:	4413      	add	r3, r2
 800aa30:	00db      	lsls	r3, r3, #3
 800aa32:	3350      	adds	r3, #80	; 0x50
 800aa34:	443b      	add	r3, r7
 800aa36:	3b38      	subs	r3, #56	; 0x38
 800aa38:	681b      	ldr	r3, [r3, #0]
 800aa3a:	4299      	cmp	r1, r3
 800aa3c:	d02a      	beq.n	800aa94 <HAL_OSPIM_Config+0x488>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 800aa3e:	68bb      	ldr	r3, [r7, #8]
 800aa40:	6899      	ldr	r1, [r3, #8]
 800aa42:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800aa46:	4613      	mov	r3, r2
 800aa48:	005b      	lsls	r3, r3, #1
 800aa4a:	4413      	add	r3, r2
 800aa4c:	00db      	lsls	r3, r3, #3
 800aa4e:	3350      	adds	r3, #80	; 0x50
 800aa50:	443b      	add	r3, r7
 800aa52:	3b34      	subs	r3, #52	; 0x34
 800aa54:	681b      	ldr	r3, [r3, #0]
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 800aa56:	4299      	cmp	r1, r3
 800aa58:	d01c      	beq.n	800aa94 <HAL_OSPIM_Config+0x488>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 800aa5a:	68bb      	ldr	r3, [r7, #8]
 800aa5c:	68d9      	ldr	r1, [r3, #12]
 800aa5e:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800aa62:	4613      	mov	r3, r2
 800aa64:	005b      	lsls	r3, r3, #1
 800aa66:	4413      	add	r3, r2
 800aa68:	00db      	lsls	r3, r3, #3
 800aa6a:	3350      	adds	r3, #80	; 0x50
 800aa6c:	443b      	add	r3, r7
 800aa6e:	3b30      	subs	r3, #48	; 0x30
 800aa70:	681b      	ldr	r3, [r3, #0]
 800aa72:	4299      	cmp	r1, r3
 800aa74:	d00e      	beq.n	800aa94 <HAL_OSPIM_Config+0x488>
        (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
 800aa76:	68bb      	ldr	r3, [r7, #8]
 800aa78:	6919      	ldr	r1, [r3, #16]
 800aa7a:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800aa7e:	4613      	mov	r3, r2
 800aa80:	005b      	lsls	r3, r3, #1
 800aa82:	4413      	add	r3, r2
 800aa84:	00db      	lsls	r3, r3, #3
 800aa86:	3350      	adds	r3, #80	; 0x50
 800aa88:	443b      	add	r3, r7
 800aa8a:	3b2c      	subs	r3, #44	; 0x2c
 800aa8c:	681b      	ldr	r3, [r3, #0]
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 800aa8e:	4299      	cmp	r1, r3
 800aa90:	f040 810e 	bne.w	800acb0 <HAL_OSPIM_Config+0x6a4>
    {
      if ((cfg->ClkPort   == IOM_cfg[other_instance].ClkPort)   &&
 800aa94:	68bb      	ldr	r3, [r7, #8]
 800aa96:	6819      	ldr	r1, [r3, #0]
 800aa98:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800aa9c:	4613      	mov	r3, r2
 800aa9e:	005b      	lsls	r3, r3, #1
 800aaa0:	4413      	add	r3, r2
 800aaa2:	00db      	lsls	r3, r3, #3
 800aaa4:	3350      	adds	r3, #80	; 0x50
 800aaa6:	443b      	add	r3, r7
 800aaa8:	3b3c      	subs	r3, #60	; 0x3c
 800aaaa:	681b      	ldr	r3, [r3, #0]
 800aaac:	4299      	cmp	r1, r3
 800aaae:	d133      	bne.n	800ab18 <HAL_OSPIM_Config+0x50c>
          (cfg->DQSPort    == IOM_cfg[other_instance].DQSPort)  &&
 800aab0:	68bb      	ldr	r3, [r7, #8]
 800aab2:	6859      	ldr	r1, [r3, #4]
 800aab4:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800aab8:	4613      	mov	r3, r2
 800aaba:	005b      	lsls	r3, r3, #1
 800aabc:	4413      	add	r3, r2
 800aabe:	00db      	lsls	r3, r3, #3
 800aac0:	3350      	adds	r3, #80	; 0x50
 800aac2:	443b      	add	r3, r7
 800aac4:	3b38      	subs	r3, #56	; 0x38
 800aac6:	681b      	ldr	r3, [r3, #0]
      if ((cfg->ClkPort   == IOM_cfg[other_instance].ClkPort)   &&
 800aac8:	4299      	cmp	r1, r3
 800aaca:	d125      	bne.n	800ab18 <HAL_OSPIM_Config+0x50c>
          (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) &&
 800aacc:	68bb      	ldr	r3, [r7, #8]
 800aace:	68d9      	ldr	r1, [r3, #12]
 800aad0:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800aad4:	4613      	mov	r3, r2
 800aad6:	005b      	lsls	r3, r3, #1
 800aad8:	4413      	add	r3, r2
 800aada:	00db      	lsls	r3, r3, #3
 800aadc:	3350      	adds	r3, #80	; 0x50
 800aade:	443b      	add	r3, r7
 800aae0:	3b30      	subs	r3, #48	; 0x30
 800aae2:	681b      	ldr	r3, [r3, #0]
          (cfg->DQSPort    == IOM_cfg[other_instance].DQSPort)  &&
 800aae4:	4299      	cmp	r1, r3
 800aae6:	d117      	bne.n	800ab18 <HAL_OSPIM_Config+0x50c>
          (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
 800aae8:	68bb      	ldr	r3, [r7, #8]
 800aaea:	6919      	ldr	r1, [r3, #16]
 800aaec:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800aaf0:	4613      	mov	r3, r2
 800aaf2:	005b      	lsls	r3, r3, #1
 800aaf4:	4413      	add	r3, r2
 800aaf6:	00db      	lsls	r3, r3, #3
 800aaf8:	3350      	adds	r3, #80	; 0x50
 800aafa:	443b      	add	r3, r7
 800aafc:	3b2c      	subs	r3, #44	; 0x2c
 800aafe:	681b      	ldr	r3, [r3, #0]
          (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) &&
 800ab00:	4299      	cmp	r1, r3
 800ab02:	d109      	bne.n	800ab18 <HAL_OSPIM_Config+0x50c>
      {
        /* Multiplexing should be performed */
        SET_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
 800ab04:	4b03      	ldr	r3, [pc, #12]	; (800ab14 <HAL_OSPIM_Config+0x508>)
 800ab06:	681b      	ldr	r3, [r3, #0]
 800ab08:	4a02      	ldr	r2, [pc, #8]	; (800ab14 <HAL_OSPIM_Config+0x508>)
 800ab0a:	f043 0301 	orr.w	r3, r3, #1
 800ab0e:	6013      	str	r3, [r2, #0]
 800ab10:	e0ce      	b.n	800acb0 <HAL_OSPIM_Config+0x6a4>
 800ab12:	bf00      	nop
 800ab14:	420c4000 	.word	0x420c4000
      }
      else
      {
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKEN);
 800ab18:	49a4      	ldr	r1, [pc, #656]	; (800adac <HAL_OSPIM_Config+0x7a0>)
 800ab1a:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800ab1e:	4613      	mov	r3, r2
 800ab20:	005b      	lsls	r3, r3, #1
 800ab22:	4413      	add	r3, r2
 800ab24:	00db      	lsls	r3, r3, #3
 800ab26:	3350      	adds	r3, #80	; 0x50
 800ab28:	443b      	add	r3, r7
 800ab2a:	3b3c      	subs	r3, #60	; 0x3c
 800ab2c:	681b      	ldr	r3, [r3, #0]
 800ab2e:	3b01      	subs	r3, #1
 800ab30:	009b      	lsls	r3, r3, #2
 800ab32:	440b      	add	r3, r1
 800ab34:	6859      	ldr	r1, [r3, #4]
 800ab36:	489d      	ldr	r0, [pc, #628]	; (800adac <HAL_OSPIM_Config+0x7a0>)
 800ab38:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800ab3c:	4613      	mov	r3, r2
 800ab3e:	005b      	lsls	r3, r3, #1
 800ab40:	4413      	add	r3, r2
 800ab42:	00db      	lsls	r3, r3, #3
 800ab44:	3350      	adds	r3, #80	; 0x50
 800ab46:	443b      	add	r3, r7
 800ab48:	3b3c      	subs	r3, #60	; 0x3c
 800ab4a:	681b      	ldr	r3, [r3, #0]
 800ab4c:	3b01      	subs	r3, #1
 800ab4e:	f021 0201 	bic.w	r2, r1, #1
 800ab52:	009b      	lsls	r3, r3, #2
 800ab54:	4403      	add	r3, r0
 800ab56:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 800ab58:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800ab5c:	4613      	mov	r3, r2
 800ab5e:	005b      	lsls	r3, r3, #1
 800ab60:	4413      	add	r3, r2
 800ab62:	00db      	lsls	r3, r3, #3
 800ab64:	3350      	adds	r3, #80	; 0x50
 800ab66:	443b      	add	r3, r7
 800ab68:	3b38      	subs	r3, #56	; 0x38
 800ab6a:	681b      	ldr	r3, [r3, #0]
 800ab6c:	2b00      	cmp	r3, #0
 800ab6e:	d01f      	beq.n	800abb0 <HAL_OSPIM_Config+0x5a4>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSEN);
 800ab70:	498e      	ldr	r1, [pc, #568]	; (800adac <HAL_OSPIM_Config+0x7a0>)
 800ab72:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800ab76:	4613      	mov	r3, r2
 800ab78:	005b      	lsls	r3, r3, #1
 800ab7a:	4413      	add	r3, r2
 800ab7c:	00db      	lsls	r3, r3, #3
 800ab7e:	3350      	adds	r3, #80	; 0x50
 800ab80:	443b      	add	r3, r7
 800ab82:	3b38      	subs	r3, #56	; 0x38
 800ab84:	681b      	ldr	r3, [r3, #0]
 800ab86:	3b01      	subs	r3, #1
 800ab88:	009b      	lsls	r3, r3, #2
 800ab8a:	440b      	add	r3, r1
 800ab8c:	6859      	ldr	r1, [r3, #4]
 800ab8e:	4887      	ldr	r0, [pc, #540]	; (800adac <HAL_OSPIM_Config+0x7a0>)
 800ab90:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800ab94:	4613      	mov	r3, r2
 800ab96:	005b      	lsls	r3, r3, #1
 800ab98:	4413      	add	r3, r2
 800ab9a:	00db      	lsls	r3, r3, #3
 800ab9c:	3350      	adds	r3, #80	; 0x50
 800ab9e:	443b      	add	r3, r7
 800aba0:	3b38      	subs	r3, #56	; 0x38
 800aba2:	681b      	ldr	r3, [r3, #0]
 800aba4:	3b01      	subs	r3, #1
 800aba6:	f021 0210 	bic.w	r2, r1, #16
 800abaa:	009b      	lsls	r3, r3, #2
 800abac:	4403      	add	r3, r0
 800abae:	605a      	str	r2, [r3, #4]
        }
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].NCSPort - 1U)], OCTOSPIM_PCR_NCSEN);
 800abb0:	497e      	ldr	r1, [pc, #504]	; (800adac <HAL_OSPIM_Config+0x7a0>)
 800abb2:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800abb6:	4613      	mov	r3, r2
 800abb8:	005b      	lsls	r3, r3, #1
 800abba:	4413      	add	r3, r2
 800abbc:	00db      	lsls	r3, r3, #3
 800abbe:	3350      	adds	r3, #80	; 0x50
 800abc0:	443b      	add	r3, r7
 800abc2:	3b34      	subs	r3, #52	; 0x34
 800abc4:	681b      	ldr	r3, [r3, #0]
 800abc6:	3b01      	subs	r3, #1
 800abc8:	009b      	lsls	r3, r3, #2
 800abca:	440b      	add	r3, r1
 800abcc:	6859      	ldr	r1, [r3, #4]
 800abce:	4877      	ldr	r0, [pc, #476]	; (800adac <HAL_OSPIM_Config+0x7a0>)
 800abd0:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800abd4:	4613      	mov	r3, r2
 800abd6:	005b      	lsls	r3, r3, #1
 800abd8:	4413      	add	r3, r2
 800abda:	00db      	lsls	r3, r3, #3
 800abdc:	3350      	adds	r3, #80	; 0x50
 800abde:	443b      	add	r3, r7
 800abe0:	3b34      	subs	r3, #52	; 0x34
 800abe2:	681b      	ldr	r3, [r3, #0]
 800abe4:	3b01      	subs	r3, #1
 800abe6:	f421 7280 	bic.w	r2, r1, #256	; 0x100
 800abea:	009b      	lsls	r3, r3, #2
 800abec:	4403      	add	r3, r0
 800abee:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 800abf0:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800abf4:	4613      	mov	r3, r2
 800abf6:	005b      	lsls	r3, r3, #1
 800abf8:	4413      	add	r3, r2
 800abfa:	00db      	lsls	r3, r3, #3
 800abfc:	3350      	adds	r3, #80	; 0x50
 800abfe:	443b      	add	r3, r7
 800ac00:	3b30      	subs	r3, #48	; 0x30
 800ac02:	681b      	ldr	r3, [r3, #0]
 800ac04:	2b00      	cmp	r3, #0
 800ac06:	d023      	beq.n	800ac50 <HAL_OSPIM_Config+0x644>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 800ac08:	4968      	ldr	r1, [pc, #416]	; (800adac <HAL_OSPIM_Config+0x7a0>)
 800ac0a:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800ac0e:	4613      	mov	r3, r2
 800ac10:	005b      	lsls	r3, r3, #1
 800ac12:	4413      	add	r3, r2
 800ac14:	00db      	lsls	r3, r3, #3
 800ac16:	3350      	adds	r3, #80	; 0x50
 800ac18:	443b      	add	r3, r7
 800ac1a:	3b30      	subs	r3, #48	; 0x30
 800ac1c:	681b      	ldr	r3, [r3, #0]
 800ac1e:	3b01      	subs	r3, #1
 800ac20:	f003 0301 	and.w	r3, r3, #1
 800ac24:	009b      	lsls	r3, r3, #2
 800ac26:	440b      	add	r3, r1
 800ac28:	6859      	ldr	r1, [r3, #4]
 800ac2a:	4860      	ldr	r0, [pc, #384]	; (800adac <HAL_OSPIM_Config+0x7a0>)
 800ac2c:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800ac30:	4613      	mov	r3, r2
 800ac32:	005b      	lsls	r3, r3, #1
 800ac34:	4413      	add	r3, r2
 800ac36:	00db      	lsls	r3, r3, #3
 800ac38:	3350      	adds	r3, #80	; 0x50
 800ac3a:	443b      	add	r3, r7
 800ac3c:	3b30      	subs	r3, #48	; 0x30
 800ac3e:	681b      	ldr	r3, [r3, #0]
 800ac40:	3b01      	subs	r3, #1
 800ac42:	f003 0301 	and.w	r3, r3, #1
 800ac46:	f421 3280 	bic.w	r2, r1, #65536	; 0x10000
 800ac4a:	009b      	lsls	r3, r3, #2
 800ac4c:	4403      	add	r3, r0
 800ac4e:	605a      	str	r2, [r3, #4]
                    OCTOSPIM_PCR_IOLEN);
        }
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 800ac50:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800ac54:	4613      	mov	r3, r2
 800ac56:	005b      	lsls	r3, r3, #1
 800ac58:	4413      	add	r3, r2
 800ac5a:	00db      	lsls	r3, r3, #3
 800ac5c:	3350      	adds	r3, #80	; 0x50
 800ac5e:	443b      	add	r3, r7
 800ac60:	3b2c      	subs	r3, #44	; 0x2c
 800ac62:	681b      	ldr	r3, [r3, #0]
 800ac64:	2b00      	cmp	r3, #0
 800ac66:	d023      	beq.n	800acb0 <HAL_OSPIM_Config+0x6a4>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 800ac68:	4950      	ldr	r1, [pc, #320]	; (800adac <HAL_OSPIM_Config+0x7a0>)
 800ac6a:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800ac6e:	4613      	mov	r3, r2
 800ac70:	005b      	lsls	r3, r3, #1
 800ac72:	4413      	add	r3, r2
 800ac74:	00db      	lsls	r3, r3, #3
 800ac76:	3350      	adds	r3, #80	; 0x50
 800ac78:	443b      	add	r3, r7
 800ac7a:	3b2c      	subs	r3, #44	; 0x2c
 800ac7c:	681b      	ldr	r3, [r3, #0]
 800ac7e:	3b01      	subs	r3, #1
 800ac80:	f003 0301 	and.w	r3, r3, #1
 800ac84:	009b      	lsls	r3, r3, #2
 800ac86:	440b      	add	r3, r1
 800ac88:	6859      	ldr	r1, [r3, #4]
 800ac8a:	4848      	ldr	r0, [pc, #288]	; (800adac <HAL_OSPIM_Config+0x7a0>)
 800ac8c:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800ac90:	4613      	mov	r3, r2
 800ac92:	005b      	lsls	r3, r3, #1
 800ac94:	4413      	add	r3, r2
 800ac96:	00db      	lsls	r3, r3, #3
 800ac98:	3350      	adds	r3, #80	; 0x50
 800ac9a:	443b      	add	r3, r7
 800ac9c:	3b2c      	subs	r3, #44	; 0x2c
 800ac9e:	681b      	ldr	r3, [r3, #0]
 800aca0:	3b01      	subs	r3, #1
 800aca2:	f003 0301 	and.w	r3, r3, #1
 800aca6:	f021 7280 	bic.w	r2, r1, #16777216	; 0x1000000
 800acaa:	009b      	lsls	r3, r3, #2
 800acac:	4403      	add	r3, r0
 800acae:	605a      	str	r2, [r3, #4]
        }
      }
    }

    /******************** Activation of new configuration *********************/
    MODIFY_REG(OCTOSPIM->PCR[(cfg->NCSPort - 1U)], (OCTOSPIM_PCR_NCSEN | OCTOSPIM_PCR_NCSSRC),
 800acb0:	4a3e      	ldr	r2, [pc, #248]	; (800adac <HAL_OSPIM_Config+0x7a0>)
 800acb2:	68bb      	ldr	r3, [r7, #8]
 800acb4:	689b      	ldr	r3, [r3, #8]
 800acb6:	3b01      	subs	r3, #1
 800acb8:	009b      	lsls	r3, r3, #2
 800acba:	4413      	add	r3, r2
 800acbc:	685b      	ldr	r3, [r3, #4]
 800acbe:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800acc2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800acc4:	025b      	lsls	r3, r3, #9
 800acc6:	431a      	orrs	r2, r3
 800acc8:	4938      	ldr	r1, [pc, #224]	; (800adac <HAL_OSPIM_Config+0x7a0>)
 800acca:	68bb      	ldr	r3, [r7, #8]
 800accc:	689b      	ldr	r3, [r3, #8]
 800acce:	3b01      	subs	r3, #1
 800acd0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800acd4:	009b      	lsls	r3, r3, #2
 800acd6:	440b      	add	r3, r1
 800acd8:	605a      	str	r2, [r3, #4]
               (OCTOSPIM_PCR_NCSEN | (instance << OCTOSPIM_PCR_NCSSRC_Pos)));

    if (((cfg->Req2AckTime) >= 1U) && ((cfg->Req2AckTime) <= 256U))
 800acda:	68bb      	ldr	r3, [r7, #8]
 800acdc:	695b      	ldr	r3, [r3, #20]
 800acde:	2b00      	cmp	r3, #0
 800ace0:	d018      	beq.n	800ad14 <HAL_OSPIM_Config+0x708>
 800ace2:	68bb      	ldr	r3, [r7, #8]
 800ace4:	695b      	ldr	r3, [r3, #20]
 800ace6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800acea:	d813      	bhi.n	800ad14 <HAL_OSPIM_Config+0x708>
    {
      if ((cfg->Req2AckTime - 1U) > ((OCTOSPIM->CR & OCTOSPIM_CR_REQ2ACK_TIME) >> OCTOSPIM_CR_REQ2ACK_TIME_Pos))
 800acec:	68bb      	ldr	r3, [r7, #8]
 800acee:	695b      	ldr	r3, [r3, #20]
 800acf0:	1e5a      	subs	r2, r3, #1
 800acf2:	4b2e      	ldr	r3, [pc, #184]	; (800adac <HAL_OSPIM_Config+0x7a0>)
 800acf4:	681b      	ldr	r3, [r3, #0]
 800acf6:	0c1b      	lsrs	r3, r3, #16
 800acf8:	b2db      	uxtb	r3, r3
 800acfa:	429a      	cmp	r2, r3
 800acfc:	d90a      	bls.n	800ad14 <HAL_OSPIM_Config+0x708>
      {
        MODIFY_REG(OCTOSPIM->CR, OCTOSPIM_CR_REQ2ACK_TIME, ((cfg->Req2AckTime - 1U) << OCTOSPIM_CR_REQ2ACK_TIME_Pos));
 800acfe:	4b2b      	ldr	r3, [pc, #172]	; (800adac <HAL_OSPIM_Config+0x7a0>)
 800ad00:	681b      	ldr	r3, [r3, #0]
 800ad02:	f423 027f 	bic.w	r2, r3, #16711680	; 0xff0000
 800ad06:	68bb      	ldr	r3, [r7, #8]
 800ad08:	695b      	ldr	r3, [r3, #20]
 800ad0a:	3b01      	subs	r3, #1
 800ad0c:	041b      	lsls	r3, r3, #16
 800ad0e:	4927      	ldr	r1, [pc, #156]	; (800adac <HAL_OSPIM_Config+0x7a0>)
 800ad10:	4313      	orrs	r3, r2
 800ad12:	600b      	str	r3, [r1, #0]
      {
        /* Nothing to do */
      }
    }

    if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) != 0U)
 800ad14:	4b25      	ldr	r3, [pc, #148]	; (800adac <HAL_OSPIM_Config+0x7a0>)
 800ad16:	681b      	ldr	r3, [r3, #0]
 800ad18:	f003 0301 	and.w	r3, r3, #1
 800ad1c:	2b00      	cmp	r3, #0
 800ad1e:	f000 809a 	beq.w	800ae56 <HAL_OSPIM_Config+0x84a>
    {
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort - 1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC), OCTOSPIM_PCR_CLKEN);
 800ad22:	4a22      	ldr	r2, [pc, #136]	; (800adac <HAL_OSPIM_Config+0x7a0>)
 800ad24:	68bb      	ldr	r3, [r7, #8]
 800ad26:	681b      	ldr	r3, [r3, #0]
 800ad28:	3b01      	subs	r3, #1
 800ad2a:	009b      	lsls	r3, r3, #2
 800ad2c:	4413      	add	r3, r2
 800ad2e:	685b      	ldr	r3, [r3, #4]
 800ad30:	f023 0203 	bic.w	r2, r3, #3
 800ad34:	491d      	ldr	r1, [pc, #116]	; (800adac <HAL_OSPIM_Config+0x7a0>)
 800ad36:	68bb      	ldr	r3, [r7, #8]
 800ad38:	681b      	ldr	r3, [r3, #0]
 800ad3a:	3b01      	subs	r3, #1
 800ad3c:	f042 0201 	orr.w	r2, r2, #1
 800ad40:	009b      	lsls	r3, r3, #2
 800ad42:	440b      	add	r3, r1
 800ad44:	605a      	str	r2, [r3, #4]
      if (cfg->DQSPort != 0U)
 800ad46:	68bb      	ldr	r3, [r7, #8]
 800ad48:	685b      	ldr	r3, [r3, #4]
 800ad4a:	2b00      	cmp	r3, #0
 800ad4c:	d011      	beq.n	800ad72 <HAL_OSPIM_Config+0x766>
      {
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort - 1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC), OCTOSPIM_PCR_DQSEN);
 800ad4e:	4a17      	ldr	r2, [pc, #92]	; (800adac <HAL_OSPIM_Config+0x7a0>)
 800ad50:	68bb      	ldr	r3, [r7, #8]
 800ad52:	685b      	ldr	r3, [r3, #4]
 800ad54:	3b01      	subs	r3, #1
 800ad56:	009b      	lsls	r3, r3, #2
 800ad58:	4413      	add	r3, r2
 800ad5a:	685b      	ldr	r3, [r3, #4]
 800ad5c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800ad60:	4912      	ldr	r1, [pc, #72]	; (800adac <HAL_OSPIM_Config+0x7a0>)
 800ad62:	68bb      	ldr	r3, [r7, #8]
 800ad64:	685b      	ldr	r3, [r3, #4]
 800ad66:	3b01      	subs	r3, #1
 800ad68:	f042 0210 	orr.w	r2, r2, #16
 800ad6c:	009b      	lsls	r3, r3, #2
 800ad6e:	440b      	add	r3, r1
 800ad70:	605a      	str	r2, [r3, #4]
      }

      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 800ad72:	68bb      	ldr	r3, [r7, #8]
 800ad74:	68db      	ldr	r3, [r3, #12]
 800ad76:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ad7a:	2b00      	cmp	r3, #0
 800ad7c:	d018      	beq.n	800adb0 <HAL_OSPIM_Config+0x7a4>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 800ad7e:	4a0b      	ldr	r2, [pc, #44]	; (800adac <HAL_OSPIM_Config+0x7a0>)
 800ad80:	68bb      	ldr	r3, [r7, #8]
 800ad82:	68db      	ldr	r3, [r3, #12]
 800ad84:	3b01      	subs	r3, #1
 800ad86:	f003 0301 	and.w	r3, r3, #1
 800ad8a:	009b      	lsls	r3, r3, #2
 800ad8c:	4413      	add	r3, r2
 800ad8e:	685b      	ldr	r3, [r3, #4]
 800ad90:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800ad94:	4905      	ldr	r1, [pc, #20]	; (800adac <HAL_OSPIM_Config+0x7a0>)
 800ad96:	68bb      	ldr	r3, [r7, #8]
 800ad98:	68db      	ldr	r3, [r3, #12]
 800ad9a:	3b01      	subs	r3, #1
 800ad9c:	f003 0301 	and.w	r3, r3, #1
 800ada0:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800ada4:	009b      	lsls	r3, r3, #2
 800ada6:	440b      	add	r3, r1
 800ada8:	605a      	str	r2, [r3, #4]
 800adaa:	e01b      	b.n	800ade4 <HAL_OSPIM_Config+0x7d8>
 800adac:	420c4000 	.word	0x420c4000
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC), OCTOSPIM_PCR_IOLEN);
      }
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 800adb0:	68bb      	ldr	r3, [r7, #8]
 800adb2:	68db      	ldr	r3, [r3, #12]
 800adb4:	2b00      	cmp	r3, #0
 800adb6:	d015      	beq.n	800ade4 <HAL_OSPIM_Config+0x7d8>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 800adb8:	4a8a      	ldr	r2, [pc, #552]	; (800afe4 <HAL_OSPIM_Config+0x9d8>)
 800adba:	68bb      	ldr	r3, [r7, #8]
 800adbc:	68db      	ldr	r3, [r3, #12]
 800adbe:	3b01      	subs	r3, #1
 800adc0:	f003 0301 	and.w	r3, r3, #1
 800adc4:	009b      	lsls	r3, r3, #2
 800adc6:	4413      	add	r3, r2
 800adc8:	685b      	ldr	r3, [r3, #4]
 800adca:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800adce:	4985      	ldr	r1, [pc, #532]	; (800afe4 <HAL_OSPIM_Config+0x9d8>)
 800add0:	68bb      	ldr	r3, [r7, #8]
 800add2:	68db      	ldr	r3, [r3, #12]
 800add4:	3b01      	subs	r3, #1
 800add6:	f003 0301 	and.w	r3, r3, #1
 800adda:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 800adde:	009b      	lsls	r3, r3, #2
 800ade0:	440b      	add	r3, r1
 800ade2:	605a      	str	r2, [r3, #4]
      else
      {
        /* Nothing to do */
      }

      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 800ade4:	68bb      	ldr	r3, [r7, #8]
 800ade6:	691b      	ldr	r3, [r3, #16]
 800ade8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800adec:	2b00      	cmp	r3, #0
 800adee:	d016      	beq.n	800ae1e <HAL_OSPIM_Config+0x812>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 800adf0:	4a7c      	ldr	r2, [pc, #496]	; (800afe4 <HAL_OSPIM_Config+0x9d8>)
 800adf2:	68bb      	ldr	r3, [r7, #8]
 800adf4:	691b      	ldr	r3, [r3, #16]
 800adf6:	3b01      	subs	r3, #1
 800adf8:	f003 0301 	and.w	r3, r3, #1
 800adfc:	009b      	lsls	r3, r3, #2
 800adfe:	4413      	add	r3, r2
 800ae00:	685b      	ldr	r3, [r3, #4]
 800ae02:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800ae06:	4977      	ldr	r1, [pc, #476]	; (800afe4 <HAL_OSPIM_Config+0x9d8>)
 800ae08:	68bb      	ldr	r3, [r7, #8]
 800ae0a:	691b      	ldr	r3, [r3, #16]
 800ae0c:	3b01      	subs	r3, #1
 800ae0e:	f003 0301 	and.w	r3, r3, #1
 800ae12:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
 800ae16:	009b      	lsls	r3, r3, #2
 800ae18:	440b      	add	r3, r1
 800ae1a:	605a      	str	r2, [r3, #4]
 800ae1c:	e0c3      	b.n	800afa6 <HAL_OSPIM_Config+0x99a>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC), (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC_0));
      }
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 800ae1e:	68bb      	ldr	r3, [r7, #8]
 800ae20:	691b      	ldr	r3, [r3, #16]
 800ae22:	2b00      	cmp	r3, #0
 800ae24:	f000 80bf 	beq.w	800afa6 <HAL_OSPIM_Config+0x99a>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 800ae28:	4a6e      	ldr	r2, [pc, #440]	; (800afe4 <HAL_OSPIM_Config+0x9d8>)
 800ae2a:	68bb      	ldr	r3, [r7, #8]
 800ae2c:	691b      	ldr	r3, [r3, #16]
 800ae2e:	3b01      	subs	r3, #1
 800ae30:	f003 0301 	and.w	r3, r3, #1
 800ae34:	009b      	lsls	r3, r3, #2
 800ae36:	4413      	add	r3, r2
 800ae38:	685b      	ldr	r3, [r3, #4]
 800ae3a:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800ae3e:	4969      	ldr	r1, [pc, #420]	; (800afe4 <HAL_OSPIM_Config+0x9d8>)
 800ae40:	68bb      	ldr	r3, [r7, #8]
 800ae42:	691b      	ldr	r3, [r3, #16]
 800ae44:	3b01      	subs	r3, #1
 800ae46:	f003 0301 	and.w	r3, r3, #1
 800ae4a:	f042 7240 	orr.w	r2, r2, #50331648	; 0x3000000
 800ae4e:	009b      	lsls	r3, r3, #2
 800ae50:	440b      	add	r3, r1
 800ae52:	605a      	str	r2, [r3, #4]
 800ae54:	e0a7      	b.n	800afa6 <HAL_OSPIM_Config+0x99a>
        /* Nothing to do */
      }
    }
    else
    {
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort - 1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC),
 800ae56:	4a63      	ldr	r2, [pc, #396]	; (800afe4 <HAL_OSPIM_Config+0x9d8>)
 800ae58:	68bb      	ldr	r3, [r7, #8]
 800ae5a:	681b      	ldr	r3, [r3, #0]
 800ae5c:	3b01      	subs	r3, #1
 800ae5e:	009b      	lsls	r3, r3, #2
 800ae60:	4413      	add	r3, r2
 800ae62:	685b      	ldr	r3, [r3, #4]
 800ae64:	f023 0203 	bic.w	r2, r3, #3
 800ae68:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ae6a:	005b      	lsls	r3, r3, #1
 800ae6c:	431a      	orrs	r2, r3
 800ae6e:	495d      	ldr	r1, [pc, #372]	; (800afe4 <HAL_OSPIM_Config+0x9d8>)
 800ae70:	68bb      	ldr	r3, [r7, #8]
 800ae72:	681b      	ldr	r3, [r3, #0]
 800ae74:	3b01      	subs	r3, #1
 800ae76:	f042 0201 	orr.w	r2, r2, #1
 800ae7a:	009b      	lsls	r3, r3, #2
 800ae7c:	440b      	add	r3, r1
 800ae7e:	605a      	str	r2, [r3, #4]
                 (OCTOSPIM_PCR_CLKEN | (instance << OCTOSPIM_PCR_CLKSRC_Pos)));
      if (cfg->DQSPort != 0U)
 800ae80:	68bb      	ldr	r3, [r7, #8]
 800ae82:	685b      	ldr	r3, [r3, #4]
 800ae84:	2b00      	cmp	r3, #0
 800ae86:	d014      	beq.n	800aeb2 <HAL_OSPIM_Config+0x8a6>
      {
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort - 1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC),
 800ae88:	4a56      	ldr	r2, [pc, #344]	; (800afe4 <HAL_OSPIM_Config+0x9d8>)
 800ae8a:	68bb      	ldr	r3, [r7, #8]
 800ae8c:	685b      	ldr	r3, [r3, #4]
 800ae8e:	3b01      	subs	r3, #1
 800ae90:	009b      	lsls	r3, r3, #2
 800ae92:	4413      	add	r3, r2
 800ae94:	685b      	ldr	r3, [r3, #4]
 800ae96:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800ae9a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ae9c:	015b      	lsls	r3, r3, #5
 800ae9e:	431a      	orrs	r2, r3
 800aea0:	4950      	ldr	r1, [pc, #320]	; (800afe4 <HAL_OSPIM_Config+0x9d8>)
 800aea2:	68bb      	ldr	r3, [r7, #8]
 800aea4:	685b      	ldr	r3, [r3, #4]
 800aea6:	3b01      	subs	r3, #1
 800aea8:	f042 0210 	orr.w	r2, r2, #16
 800aeac:	009b      	lsls	r3, r3, #2
 800aeae:	440b      	add	r3, r1
 800aeb0:	605a      	str	r2, [r3, #4]
                   (OCTOSPIM_PCR_DQSEN | (instance << OCTOSPIM_PCR_DQSSRC_Pos)));
      }

      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 800aeb2:	68bb      	ldr	r3, [r7, #8]
 800aeb4:	68db      	ldr	r3, [r3, #12]
 800aeb6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800aeba:	2b00      	cmp	r3, #0
 800aebc:	d019      	beq.n	800aef2 <HAL_OSPIM_Config+0x8e6>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 800aebe:	4a49      	ldr	r2, [pc, #292]	; (800afe4 <HAL_OSPIM_Config+0x9d8>)
 800aec0:	68bb      	ldr	r3, [r7, #8]
 800aec2:	68db      	ldr	r3, [r3, #12]
 800aec4:	3b01      	subs	r3, #1
 800aec6:	f003 0301 	and.w	r3, r3, #1
 800aeca:	009b      	lsls	r3, r3, #2
 800aecc:	4413      	add	r3, r2
 800aece:	685b      	ldr	r3, [r3, #4]
 800aed0:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800aed4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800aed6:	049b      	lsls	r3, r3, #18
 800aed8:	431a      	orrs	r2, r3
 800aeda:	4942      	ldr	r1, [pc, #264]	; (800afe4 <HAL_OSPIM_Config+0x9d8>)
 800aedc:	68bb      	ldr	r3, [r7, #8]
 800aede:	68db      	ldr	r3, [r3, #12]
 800aee0:	3b01      	subs	r3, #1
 800aee2:	f003 0301 	and.w	r3, r3, #1
 800aee6:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800aeea:	009b      	lsls	r3, r3, #2
 800aeec:	440b      	add	r3, r1
 800aeee:	605a      	str	r2, [r3, #4]
 800aef0:	e01c      	b.n	800af2c <HAL_OSPIM_Config+0x920>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                   (OCTOSPIM_PCR_IOLEN | (instance << (OCTOSPIM_PCR_IOLSRC_Pos + 1U))));
      }
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 800aef2:	68bb      	ldr	r3, [r7, #8]
 800aef4:	68db      	ldr	r3, [r3, #12]
 800aef6:	2b00      	cmp	r3, #0
 800aef8:	d018      	beq.n	800af2c <HAL_OSPIM_Config+0x920>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 800aefa:	4a3a      	ldr	r2, [pc, #232]	; (800afe4 <HAL_OSPIM_Config+0x9d8>)
 800aefc:	68bb      	ldr	r3, [r7, #8]
 800aefe:	68db      	ldr	r3, [r3, #12]
 800af00:	3b01      	subs	r3, #1
 800af02:	f003 0301 	and.w	r3, r3, #1
 800af06:	009b      	lsls	r3, r3, #2
 800af08:	4413      	add	r3, r2
 800af0a:	685b      	ldr	r3, [r3, #4]
 800af0c:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800af10:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800af12:	069b      	lsls	r3, r3, #26
 800af14:	431a      	orrs	r2, r3
 800af16:	4933      	ldr	r1, [pc, #204]	; (800afe4 <HAL_OSPIM_Config+0x9d8>)
 800af18:	68bb      	ldr	r3, [r7, #8]
 800af1a:	68db      	ldr	r3, [r3, #12]
 800af1c:	3b01      	subs	r3, #1
 800af1e:	f003 0301 	and.w	r3, r3, #1
 800af22:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 800af26:	009b      	lsls	r3, r3, #2
 800af28:	440b      	add	r3, r1
 800af2a:	605a      	str	r2, [r3, #4]
      else
      {
        /* Nothing to do */
      }

      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 800af2c:	68bb      	ldr	r3, [r7, #8]
 800af2e:	691b      	ldr	r3, [r3, #16]
 800af30:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800af34:	2b00      	cmp	r3, #0
 800af36:	d019      	beq.n	800af6c <HAL_OSPIM_Config+0x960>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 800af38:	4a2a      	ldr	r2, [pc, #168]	; (800afe4 <HAL_OSPIM_Config+0x9d8>)
 800af3a:	68bb      	ldr	r3, [r7, #8]
 800af3c:	691b      	ldr	r3, [r3, #16]
 800af3e:	3b01      	subs	r3, #1
 800af40:	f003 0301 	and.w	r3, r3, #1
 800af44:	009b      	lsls	r3, r3, #2
 800af46:	4413      	add	r3, r2
 800af48:	685b      	ldr	r3, [r3, #4]
 800af4a:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800af4e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800af50:	049b      	lsls	r3, r3, #18
 800af52:	431a      	orrs	r2, r3
 800af54:	4923      	ldr	r1, [pc, #140]	; (800afe4 <HAL_OSPIM_Config+0x9d8>)
 800af56:	68bb      	ldr	r3, [r7, #8]
 800af58:	691b      	ldr	r3, [r3, #16]
 800af5a:	3b01      	subs	r3, #1
 800af5c:	f003 0301 	and.w	r3, r3, #1
 800af60:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
 800af64:	009b      	lsls	r3, r3, #2
 800af66:	440b      	add	r3, r1
 800af68:	605a      	str	r2, [r3, #4]
 800af6a:	e01c      	b.n	800afa6 <HAL_OSPIM_Config+0x99a>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC_0 | (instance << (OCTOSPIM_PCR_IOLSRC_Pos + 1U))));
      }
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 800af6c:	68bb      	ldr	r3, [r7, #8]
 800af6e:	691b      	ldr	r3, [r3, #16]
 800af70:	2b00      	cmp	r3, #0
 800af72:	d018      	beq.n	800afa6 <HAL_OSPIM_Config+0x99a>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 800af74:	4a1b      	ldr	r2, [pc, #108]	; (800afe4 <HAL_OSPIM_Config+0x9d8>)
 800af76:	68bb      	ldr	r3, [r7, #8]
 800af78:	691b      	ldr	r3, [r3, #16]
 800af7a:	3b01      	subs	r3, #1
 800af7c:	f003 0301 	and.w	r3, r3, #1
 800af80:	009b      	lsls	r3, r3, #2
 800af82:	4413      	add	r3, r2
 800af84:	685b      	ldr	r3, [r3, #4]
 800af86:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800af8a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800af8c:	069b      	lsls	r3, r3, #26
 800af8e:	431a      	orrs	r2, r3
 800af90:	4914      	ldr	r1, [pc, #80]	; (800afe4 <HAL_OSPIM_Config+0x9d8>)
 800af92:	68bb      	ldr	r3, [r7, #8]
 800af94:	691b      	ldr	r3, [r3, #16]
 800af96:	3b01      	subs	r3, #1
 800af98:	f003 0301 	and.w	r3, r3, #1
 800af9c:	f042 7240 	orr.w	r2, r2, #50331648	; 0x3000000
 800afa0:	009b      	lsls	r3, r3, #2
 800afa2:	440b      	add	r3, r1
 800afa4:	605a      	str	r2, [r3, #4]
        /* Nothing to do */
      }
    }

    /******* Re-enable both OctoSPI after configure OctoSPI IO Manager ********/
    if ((ospi_enabled & 0x1U) != 0U)
 800afa6:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800afaa:	f003 0301 	and.w	r3, r3, #1
 800afae:	2b00      	cmp	r3, #0
 800afb0:	d005      	beq.n	800afbe <HAL_OSPIM_Config+0x9b2>
    {
      SET_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 800afb2:	4b0d      	ldr	r3, [pc, #52]	; (800afe8 <HAL_OSPIM_Config+0x9dc>)
 800afb4:	681b      	ldr	r3, [r3, #0]
 800afb6:	4a0c      	ldr	r2, [pc, #48]	; (800afe8 <HAL_OSPIM_Config+0x9dc>)
 800afb8:	f043 0301 	orr.w	r3, r3, #1
 800afbc:	6013      	str	r3, [r2, #0]
    }
    if ((ospi_enabled & 0x2U) != 0U)
 800afbe:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800afc2:	f003 0302 	and.w	r3, r3, #2
 800afc6:	2b00      	cmp	r3, #0
 800afc8:	d005      	beq.n	800afd6 <HAL_OSPIM_Config+0x9ca>
    {
      SET_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 800afca:	4b08      	ldr	r3, [pc, #32]	; (800afec <HAL_OSPIM_Config+0x9e0>)
 800afcc:	681b      	ldr	r3, [r3, #0]
 800afce:	4a07      	ldr	r2, [pc, #28]	; (800afec <HAL_OSPIM_Config+0x9e0>)
 800afd0:	f043 0301 	orr.w	r3, r3, #1
 800afd4:	6013      	str	r3, [r2, #0]
    }
  }

  /* Return function status */
  return status;
 800afd6:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 800afda:	4618      	mov	r0, r3
 800afdc:	3750      	adds	r7, #80	; 0x50
 800afde:	46bd      	mov	sp, r7
 800afe0:	bd80      	pop	{r7, pc}
 800afe2:	bf00      	nop
 800afe4:	420c4000 	.word	0x420c4000
 800afe8:	420d1400 	.word	0x420d1400
 800afec:	420d2400 	.word	0x420d2400

0800aff0 <OSPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart : Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_WaitFlagStateUntilTimeout(OSPI_HandleTypeDef *hospi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 800aff0:	b580      	push	{r7, lr}
 800aff2:	b084      	sub	sp, #16
 800aff4:	af00      	add	r7, sp, #0
 800aff6:	60f8      	str	r0, [r7, #12]
 800aff8:	60b9      	str	r1, [r7, #8]
 800affa:	603b      	str	r3, [r7, #0]
 800affc:	4613      	mov	r3, r2
 800affe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while ((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 800b000:	e022      	b.n	800b048 <OSPI_WaitFlagStateUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b002:	69bb      	ldr	r3, [r7, #24]
 800b004:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b008:	d01e      	beq.n	800b048 <OSPI_WaitFlagStateUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b00a:	f7fb fec1 	bl	8006d90 <HAL_GetTick>
 800b00e:	4602      	mov	r2, r0
 800b010:	683b      	ldr	r3, [r7, #0]
 800b012:	1ad3      	subs	r3, r2, r3
 800b014:	69ba      	ldr	r2, [r7, #24]
 800b016:	429a      	cmp	r2, r3
 800b018:	d302      	bcc.n	800b020 <OSPI_WaitFlagStateUntilTimeout+0x30>
 800b01a:	69bb      	ldr	r3, [r7, #24]
 800b01c:	2b00      	cmp	r3, #0
 800b01e:	d113      	bne.n	800b048 <OSPI_WaitFlagStateUntilTimeout+0x58>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hospi->Instance->SR & Flag) != (uint32_t)State)
 800b020:	68fb      	ldr	r3, [r7, #12]
 800b022:	681b      	ldr	r3, [r3, #0]
 800b024:	6a1a      	ldr	r2, [r3, #32]
 800b026:	68bb      	ldr	r3, [r7, #8]
 800b028:	401a      	ands	r2, r3
 800b02a:	79fb      	ldrb	r3, [r7, #7]
 800b02c:	429a      	cmp	r2, r3
 800b02e:	d00b      	beq.n	800b048 <OSPI_WaitFlagStateUntilTimeout+0x58>
        {
          hospi->State     = HAL_OSPI_STATE_ERROR;
 800b030:	68fb      	ldr	r3, [r7, #12]
 800b032:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b036:	651a      	str	r2, [r3, #80]	; 0x50
          hospi->ErrorCode |= HAL_OSPI_ERROR_TIMEOUT;
 800b038:	68fb      	ldr	r3, [r7, #12]
 800b03a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b03c:	f043 0201 	orr.w	r2, r3, #1
 800b040:	68fb      	ldr	r3, [r7, #12]
 800b042:	655a      	str	r2, [r3, #84]	; 0x54

          return HAL_ERROR;
 800b044:	2301      	movs	r3, #1
 800b046:	e00e      	b.n	800b066 <OSPI_WaitFlagStateUntilTimeout+0x76>
  while ((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 800b048:	68fb      	ldr	r3, [r7, #12]
 800b04a:	681b      	ldr	r3, [r3, #0]
 800b04c:	6a1a      	ldr	r2, [r3, #32]
 800b04e:	68bb      	ldr	r3, [r7, #8]
 800b050:	4013      	ands	r3, r2
 800b052:	2b00      	cmp	r3, #0
 800b054:	bf14      	ite	ne
 800b056:	2301      	movne	r3, #1
 800b058:	2300      	moveq	r3, #0
 800b05a:	b2db      	uxtb	r3, r3
 800b05c:	461a      	mov	r2, r3
 800b05e:	79fb      	ldrb	r3, [r7, #7]
 800b060:	429a      	cmp	r2, r3
 800b062:	d1ce      	bne.n	800b002 <OSPI_WaitFlagStateUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b064:	2300      	movs	r3, #0
}
 800b066:	4618      	mov	r0, r3
 800b068:	3710      	adds	r7, #16
 800b06a:	46bd      	mov	sp, r7
 800b06c:	bd80      	pop	{r7, pc}
	...

0800b070 <OSPI_ConfigCmd>:
  * @param  hospi : OSPI handle
  * @param  cmd   : structure that contains the command configuration information
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_ConfigCmd(OSPI_HandleTypeDef *hospi, OSPI_RegularCmdTypeDef *cmd)
{
 800b070:	b480      	push	{r7}
 800b072:	b089      	sub	sp, #36	; 0x24
 800b074:	af00      	add	r7, sp, #0
 800b076:	6078      	str	r0, [r7, #4]
 800b078:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b07a:	2300      	movs	r3, #0
 800b07c:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *tcr_reg;
  __IO uint32_t *ir_reg;
  __IO uint32_t *abr_reg;

  /* Re-initialize the value of the functional mode */
  MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, 0U);
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	681b      	ldr	r3, [r3, #0]
 800b082:	681a      	ldr	r2, [r3, #0]
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	681b      	ldr	r3, [r3, #0]
 800b088:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800b08c:	601a      	str	r2, [r3, #0]

  /* Configure the flash ID */
  if (hospi->Init.DualQuad == HAL_OSPI_DUALQUAD_DISABLE)
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	689b      	ldr	r3, [r3, #8]
 800b092:	2b00      	cmp	r3, #0
 800b094:	d10a      	bne.n	800b0ac <OSPI_ConfigCmd+0x3c>
  {
    MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_MSEL, cmd->FlashId);
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	681b      	ldr	r3, [r3, #0]
 800b09a:	681b      	ldr	r3, [r3, #0]
 800b09c:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 800b0a0:	683b      	ldr	r3, [r7, #0]
 800b0a2:	685a      	ldr	r2, [r3, #4]
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	681b      	ldr	r3, [r3, #0]
 800b0a8:	430a      	orrs	r2, r1
 800b0aa:	601a      	str	r2, [r3, #0]
  }

  if (cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG)
 800b0ac:	683b      	ldr	r3, [r7, #0]
 800b0ae:	681b      	ldr	r3, [r3, #0]
 800b0b0:	2b02      	cmp	r3, #2
 800b0b2:	d114      	bne.n	800b0de <OSPI_ConfigCmd+0x6e>
  {
    ccr_reg = &(hospi->Instance->WCCR);
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	681b      	ldr	r3, [r3, #0]
 800b0b8:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800b0bc:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hospi->Instance->WTCR);
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	681b      	ldr	r3, [r3, #0]
 800b0c2:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 800b0c6:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hospi->Instance->WIR);
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	681b      	ldr	r3, [r3, #0]
 800b0cc:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800b0d0:	613b      	str	r3, [r7, #16]
    abr_reg = &(hospi->Instance->WABR);
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	681b      	ldr	r3, [r3, #0]
 800b0d6:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 800b0da:	60fb      	str	r3, [r7, #12]
 800b0dc:	e02c      	b.n	800b138 <OSPI_ConfigCmd+0xc8>
  }
  else if (cmd->OperationType == HAL_OSPI_OPTYPE_WRAP_CFG)
 800b0de:	683b      	ldr	r3, [r7, #0]
 800b0e0:	681b      	ldr	r3, [r3, #0]
 800b0e2:	2b03      	cmp	r3, #3
 800b0e4:	d114      	bne.n	800b110 <OSPI_ConfigCmd+0xa0>
  {
    ccr_reg = &(hospi->Instance->WPCCR);
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	681b      	ldr	r3, [r3, #0]
 800b0ea:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800b0ee:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hospi->Instance->WPTCR);
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	681b      	ldr	r3, [r3, #0]
 800b0f4:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 800b0f8:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hospi->Instance->WPIR);
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	681b      	ldr	r3, [r3, #0]
 800b0fe:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800b102:	613b      	str	r3, [r7, #16]
    abr_reg = &(hospi->Instance->WPABR);
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	681b      	ldr	r3, [r3, #0]
 800b108:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 800b10c:	60fb      	str	r3, [r7, #12]
 800b10e:	e013      	b.n	800b138 <OSPI_ConfigCmd+0xc8>
  }
  else
  {
    ccr_reg = &(hospi->Instance->CCR);
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	681b      	ldr	r3, [r3, #0]
 800b114:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800b118:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hospi->Instance->TCR);
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	681b      	ldr	r3, [r3, #0]
 800b11e:	f503 7384 	add.w	r3, r3, #264	; 0x108
 800b122:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hospi->Instance->IR);
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	681b      	ldr	r3, [r3, #0]
 800b128:	f503 7388 	add.w	r3, r3, #272	; 0x110
 800b12c:	613b      	str	r3, [r7, #16]
    abr_reg = &(hospi->Instance->ABR);
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	681b      	ldr	r3, [r3, #0]
 800b132:	f503 7390 	add.w	r3, r3, #288	; 0x120
 800b136:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CCR register with DQS and SIOO modes */
  *ccr_reg = (cmd->DQSMode | cmd->SIOOMode);
 800b138:	683b      	ldr	r3, [r7, #0]
 800b13a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b13c:	683b      	ldr	r3, [r7, #0]
 800b13e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b140:	431a      	orrs	r2, r3
 800b142:	69bb      	ldr	r3, [r7, #24]
 800b144:	601a      	str	r2, [r3, #0]

  if (cmd->AlternateBytesMode != HAL_OSPI_ALTERNATE_BYTES_NONE)
 800b146:	683b      	ldr	r3, [r7, #0]
 800b148:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b14a:	2b00      	cmp	r3, #0
 800b14c:	d012      	beq.n	800b174 <OSPI_ConfigCmd+0x104>
  {
    /* Configure the ABR register with alternate bytes value */
    *abr_reg = cmd->AlternateBytes;
 800b14e:	683b      	ldr	r3, [r7, #0]
 800b150:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b152:	68fb      	ldr	r3, [r7, #12]
 800b154:	601a      	str	r2, [r3, #0]

    /* Configure the CCR register with alternate bytes communication parameters */
    MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ABMODE | OCTOSPI_CCR_ABDTR | OCTOSPI_CCR_ABSIZE),
 800b156:	69bb      	ldr	r3, [r7, #24]
 800b158:	681b      	ldr	r3, [r3, #0]
 800b15a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800b15e:	683b      	ldr	r3, [r7, #0]
 800b160:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800b162:	683b      	ldr	r3, [r7, #0]
 800b164:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b166:	4319      	orrs	r1, r3
 800b168:	683b      	ldr	r3, [r7, #0]
 800b16a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b16c:	430b      	orrs	r3, r1
 800b16e:	431a      	orrs	r2, r3
 800b170:	69bb      	ldr	r3, [r7, #24]
 800b172:	601a      	str	r2, [r3, #0]
               (cmd->AlternateBytesMode | cmd->AlternateBytesDtrMode | cmd->AlternateBytesSize));
  }

  /* Configure the TCR register with the number of dummy cycles */
  MODIFY_REG((*tcr_reg), OCTOSPI_TCR_DCYC, cmd->DummyCycles);
 800b174:	697b      	ldr	r3, [r7, #20]
 800b176:	681b      	ldr	r3, [r3, #0]
 800b178:	f023 021f 	bic.w	r2, r3, #31
 800b17c:	683b      	ldr	r3, [r7, #0]
 800b17e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b180:	431a      	orrs	r2, r3
 800b182:	697b      	ldr	r3, [r7, #20]
 800b184:	601a      	str	r2, [r3, #0]

  if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 800b186:	683b      	ldr	r3, [r7, #0]
 800b188:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b18a:	2b00      	cmp	r3, #0
 800b18c:	d009      	beq.n	800b1a2 <OSPI_ConfigCmd+0x132>
  {
    if (cmd->OperationType == HAL_OSPI_OPTYPE_COMMON_CFG)
 800b18e:	683b      	ldr	r3, [r7, #0]
 800b190:	681b      	ldr	r3, [r3, #0]
 800b192:	2b00      	cmp	r3, #0
 800b194:	d105      	bne.n	800b1a2 <OSPI_ConfigCmd+0x132>
    {
      /* Configure the DLR register with the number of data */
      hospi->Instance->DLR = (cmd->NbData - 1U);
 800b196:	683b      	ldr	r3, [r7, #0]
 800b198:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	681b      	ldr	r3, [r3, #0]
 800b19e:	3a01      	subs	r2, #1
 800b1a0:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (cmd->InstructionMode != HAL_OSPI_INSTRUCTION_NONE)
 800b1a2:	683b      	ldr	r3, [r7, #0]
 800b1a4:	68db      	ldr	r3, [r3, #12]
 800b1a6:	2b00      	cmp	r3, #0
 800b1a8:	f000 8099 	beq.w	800b2de <OSPI_ConfigCmd+0x26e>
  {
    if (cmd->AddressMode != HAL_OSPI_ADDRESS_NONE)
 800b1ac:	683b      	ldr	r3, [r7, #0]
 800b1ae:	69db      	ldr	r3, [r3, #28]
 800b1b0:	2b00      	cmp	r3, #0
 800b1b2:	d055      	beq.n	800b260 <OSPI_ConfigCmd+0x1f0>
    {
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 800b1b4:	683b      	ldr	r3, [r7, #0]
 800b1b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b1b8:	2b00      	cmp	r3, #0
 800b1ba:	d01e      	beq.n	800b1fa <OSPI_ConfigCmd+0x18a>
      {
        /* ---- Command with instruction, address and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE  | OCTOSPI_CCR_IDTR  | OCTOSPI_CCR_ISIZE  |
 800b1bc:	69bb      	ldr	r3, [r7, #24]
 800b1be:	681a      	ldr	r2, [r3, #0]
 800b1c0:	4b67      	ldr	r3, [pc, #412]	; (800b360 <OSPI_ConfigCmd+0x2f0>)
 800b1c2:	4013      	ands	r3, r2
 800b1c4:	683a      	ldr	r2, [r7, #0]
 800b1c6:	68d1      	ldr	r1, [r2, #12]
 800b1c8:	683a      	ldr	r2, [r7, #0]
 800b1ca:	6952      	ldr	r2, [r2, #20]
 800b1cc:	4311      	orrs	r1, r2
 800b1ce:	683a      	ldr	r2, [r7, #0]
 800b1d0:	6912      	ldr	r2, [r2, #16]
 800b1d2:	4311      	orrs	r1, r2
 800b1d4:	683a      	ldr	r2, [r7, #0]
 800b1d6:	69d2      	ldr	r2, [r2, #28]
 800b1d8:	4311      	orrs	r1, r2
 800b1da:	683a      	ldr	r2, [r7, #0]
 800b1dc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800b1de:	4311      	orrs	r1, r2
 800b1e0:	683a      	ldr	r2, [r7, #0]
 800b1e2:	6a12      	ldr	r2, [r2, #32]
 800b1e4:	4311      	orrs	r1, r2
 800b1e6:	683a      	ldr	r2, [r7, #0]
 800b1e8:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800b1ea:	4311      	orrs	r1, r2
 800b1ec:	683a      	ldr	r2, [r7, #0]
 800b1ee:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800b1f0:	430a      	orrs	r2, r1
 800b1f2:	431a      	orrs	r2, r3
 800b1f4:	69bb      	ldr	r3, [r7, #24]
 800b1f6:	601a      	str	r2, [r3, #0]
 800b1f8:	e028      	b.n	800b24c <OSPI_ConfigCmd+0x1dc>
      else
      {
        /* ---- Command with instruction and address ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE  | OCTOSPI_CCR_IDTR  | OCTOSPI_CCR_ISIZE  |
 800b1fa:	69bb      	ldr	r3, [r7, #24]
 800b1fc:	681b      	ldr	r3, [r3, #0]
 800b1fe:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800b202:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800b206:	683a      	ldr	r2, [r7, #0]
 800b208:	68d1      	ldr	r1, [r2, #12]
 800b20a:	683a      	ldr	r2, [r7, #0]
 800b20c:	6952      	ldr	r2, [r2, #20]
 800b20e:	4311      	orrs	r1, r2
 800b210:	683a      	ldr	r2, [r7, #0]
 800b212:	6912      	ldr	r2, [r2, #16]
 800b214:	4311      	orrs	r1, r2
 800b216:	683a      	ldr	r2, [r7, #0]
 800b218:	69d2      	ldr	r2, [r2, #28]
 800b21a:	4311      	orrs	r1, r2
 800b21c:	683a      	ldr	r2, [r7, #0]
 800b21e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800b220:	4311      	orrs	r1, r2
 800b222:	683a      	ldr	r2, [r7, #0]
 800b224:	6a12      	ldr	r2, [r2, #32]
 800b226:	430a      	orrs	r2, r1
 800b228:	431a      	orrs	r2, r3
 800b22a:	69bb      	ldr	r3, [r7, #24]
 800b22c:	601a      	str	r2, [r3, #0]
                                OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE),
                   (cmd->InstructionMode | cmd->InstructionDtrMode | cmd->InstructionSize |
                    cmd->AddressMode     | cmd->AddressDtrMode     | cmd->AddressSize));

        /* The DHQC bit is linked with DDTR bit which should be activated */
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b232:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b236:	d109      	bne.n	800b24c <OSPI_ConfigCmd+0x1dc>
            (cmd->InstructionDtrMode == HAL_OSPI_INSTRUCTION_DTR_ENABLE))
 800b238:	683b      	ldr	r3, [r7, #0]
 800b23a:	695b      	ldr	r3, [r3, #20]
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 800b23c:	2b08      	cmp	r3, #8
 800b23e:	d105      	bne.n	800b24c <OSPI_ConfigCmd+0x1dc>
        {
          MODIFY_REG((*ccr_reg), OCTOSPI_CCR_DDTR, HAL_OSPI_DATA_DTR_ENABLE);
 800b240:	69bb      	ldr	r3, [r7, #24]
 800b242:	681b      	ldr	r3, [r3, #0]
 800b244:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800b248:	69bb      	ldr	r3, [r7, #24]
 800b24a:	601a      	str	r2, [r3, #0]
        }
      }

      /* Configure the IR register with the instruction value */
      *ir_reg = cmd->Instruction;
 800b24c:	683b      	ldr	r3, [r7, #0]
 800b24e:	689a      	ldr	r2, [r3, #8]
 800b250:	693b      	ldr	r3, [r7, #16]
 800b252:	601a      	str	r2, [r3, #0]

      /* Configure the AR register with the address value */
      hospi->Instance->AR = cmd->Address;
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	681b      	ldr	r3, [r3, #0]
 800b258:	683a      	ldr	r2, [r7, #0]
 800b25a:	6992      	ldr	r2, [r2, #24]
 800b25c:	649a      	str	r2, [r3, #72]	; 0x48
 800b25e:	e078      	b.n	800b352 <OSPI_ConfigCmd+0x2e2>
    }
    else
    {
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 800b260:	683b      	ldr	r3, [r7, #0]
 800b262:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b264:	2b00      	cmp	r3, #0
 800b266:	d017      	beq.n	800b298 <OSPI_ConfigCmd+0x228>
      {
        /* ---- Command with instruction and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE | OCTOSPI_CCR_IDTR | OCTOSPI_CCR_ISIZE |
 800b268:	69bb      	ldr	r3, [r7, #24]
 800b26a:	681b      	ldr	r3, [r3, #0]
 800b26c:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 800b270:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800b274:	683a      	ldr	r2, [r7, #0]
 800b276:	68d1      	ldr	r1, [r2, #12]
 800b278:	683a      	ldr	r2, [r7, #0]
 800b27a:	6952      	ldr	r2, [r2, #20]
 800b27c:	4311      	orrs	r1, r2
 800b27e:	683a      	ldr	r2, [r7, #0]
 800b280:	6912      	ldr	r2, [r2, #16]
 800b282:	4311      	orrs	r1, r2
 800b284:	683a      	ldr	r2, [r7, #0]
 800b286:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800b288:	4311      	orrs	r1, r2
 800b28a:	683a      	ldr	r2, [r7, #0]
 800b28c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800b28e:	430a      	orrs	r2, r1
 800b290:	431a      	orrs	r2, r3
 800b292:	69bb      	ldr	r3, [r7, #24]
 800b294:	601a      	str	r2, [r3, #0]
 800b296:	e01d      	b.n	800b2d4 <OSPI_ConfigCmd+0x264>
      else
      {
        /* ---- Command with only instruction ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE | OCTOSPI_CCR_IDTR | OCTOSPI_CCR_ISIZE),
 800b298:	69bb      	ldr	r3, [r7, #24]
 800b29a:	681b      	ldr	r3, [r3, #0]
 800b29c:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 800b2a0:	683b      	ldr	r3, [r7, #0]
 800b2a2:	68d9      	ldr	r1, [r3, #12]
 800b2a4:	683b      	ldr	r3, [r7, #0]
 800b2a6:	695b      	ldr	r3, [r3, #20]
 800b2a8:	4319      	orrs	r1, r3
 800b2aa:	683b      	ldr	r3, [r7, #0]
 800b2ac:	691b      	ldr	r3, [r3, #16]
 800b2ae:	430b      	orrs	r3, r1
 800b2b0:	431a      	orrs	r2, r3
 800b2b2:	69bb      	ldr	r3, [r7, #24]
 800b2b4:	601a      	str	r2, [r3, #0]
                   (cmd->InstructionMode | cmd->InstructionDtrMode | cmd->InstructionSize));

        /* The DHQC bit is linked with DDTR bit which should be activated */
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2ba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b2be:	d109      	bne.n	800b2d4 <OSPI_ConfigCmd+0x264>
            (cmd->InstructionDtrMode == HAL_OSPI_INSTRUCTION_DTR_ENABLE))
 800b2c0:	683b      	ldr	r3, [r7, #0]
 800b2c2:	695b      	ldr	r3, [r3, #20]
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 800b2c4:	2b08      	cmp	r3, #8
 800b2c6:	d105      	bne.n	800b2d4 <OSPI_ConfigCmd+0x264>
        {
          MODIFY_REG((*ccr_reg), OCTOSPI_CCR_DDTR, HAL_OSPI_DATA_DTR_ENABLE);
 800b2c8:	69bb      	ldr	r3, [r7, #24]
 800b2ca:	681b      	ldr	r3, [r3, #0]
 800b2cc:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800b2d0:	69bb      	ldr	r3, [r7, #24]
 800b2d2:	601a      	str	r2, [r3, #0]
        }
      }

      /* Configure the IR register with the instruction value */
      *ir_reg = cmd->Instruction;
 800b2d4:	683b      	ldr	r3, [r7, #0]
 800b2d6:	689a      	ldr	r2, [r3, #8]
 800b2d8:	693b      	ldr	r3, [r7, #16]
 800b2da:	601a      	str	r2, [r3, #0]
 800b2dc:	e039      	b.n	800b352 <OSPI_ConfigCmd+0x2e2>

    }
  }
  else
  {
    if (cmd->AddressMode != HAL_OSPI_ADDRESS_NONE)
 800b2de:	683b      	ldr	r3, [r7, #0]
 800b2e0:	69db      	ldr	r3, [r3, #28]
 800b2e2:	2b00      	cmp	r3, #0
 800b2e4:	d030      	beq.n	800b348 <OSPI_ConfigCmd+0x2d8>
    {
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 800b2e6:	683b      	ldr	r3, [r7, #0]
 800b2e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b2ea:	2b00      	cmp	r3, #0
 800b2ec:	d017      	beq.n	800b31e <OSPI_ConfigCmd+0x2ae>
      {
        /* ---- Command with address and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE |
 800b2ee:	69bb      	ldr	r3, [r7, #24]
 800b2f0:	681b      	ldr	r3, [r3, #0]
 800b2f2:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 800b2f6:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800b2fa:	683a      	ldr	r2, [r7, #0]
 800b2fc:	69d1      	ldr	r1, [r2, #28]
 800b2fe:	683a      	ldr	r2, [r7, #0]
 800b300:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800b302:	4311      	orrs	r1, r2
 800b304:	683a      	ldr	r2, [r7, #0]
 800b306:	6a12      	ldr	r2, [r2, #32]
 800b308:	4311      	orrs	r1, r2
 800b30a:	683a      	ldr	r2, [r7, #0]
 800b30c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800b30e:	4311      	orrs	r1, r2
 800b310:	683a      	ldr	r2, [r7, #0]
 800b312:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800b314:	430a      	orrs	r2, r1
 800b316:	431a      	orrs	r2, r3
 800b318:	69bb      	ldr	r3, [r7, #24]
 800b31a:	601a      	str	r2, [r3, #0]
 800b31c:	e00e      	b.n	800b33c <OSPI_ConfigCmd+0x2cc>
      else
      {
        /* ---- Command with only address ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE),
 800b31e:	69bb      	ldr	r3, [r7, #24]
 800b320:	681b      	ldr	r3, [r3, #0]
 800b322:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800b326:	683b      	ldr	r3, [r7, #0]
 800b328:	69d9      	ldr	r1, [r3, #28]
 800b32a:	683b      	ldr	r3, [r7, #0]
 800b32c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b32e:	4319      	orrs	r1, r3
 800b330:	683b      	ldr	r3, [r7, #0]
 800b332:	6a1b      	ldr	r3, [r3, #32]
 800b334:	430b      	orrs	r3, r1
 800b336:	431a      	orrs	r2, r3
 800b338:	69bb      	ldr	r3, [r7, #24]
 800b33a:	601a      	str	r2, [r3, #0]
                   (cmd->AddressMode | cmd->AddressDtrMode | cmd->AddressSize));
      }

      /* Configure the AR register with the instruction value */
      hospi->Instance->AR = cmd->Address;
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	681b      	ldr	r3, [r3, #0]
 800b340:	683a      	ldr	r2, [r7, #0]
 800b342:	6992      	ldr	r2, [r2, #24]
 800b344:	649a      	str	r2, [r3, #72]	; 0x48
 800b346:	e004      	b.n	800b352 <OSPI_ConfigCmd+0x2e2>
    }
    else
    {
      /* ---- Invalid command configuration (no instruction, no address) ---- */
      status = HAL_ERROR;
 800b348:	2301      	movs	r3, #1
 800b34a:	77fb      	strb	r3, [r7, #31]
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	2208      	movs	r2, #8
 800b350:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }

  /* Return function status */
  return status;
 800b352:	7ffb      	ldrb	r3, [r7, #31]
}
 800b354:	4618      	mov	r0, r3
 800b356:	3724      	adds	r7, #36	; 0x24
 800b358:	46bd      	mov	sp, r7
 800b35a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b35e:	4770      	bx	lr
 800b360:	f0ffc0c0 	.word	0xf0ffc0c0

0800b364 <OSPIM_GetConfig>:
  * @param  instance_nb : number of the instance
  * @param  cfg         : configuration of the IO Manager for the instance
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPIM_GetConfig(uint8_t instance_nb, OSPIM_CfgTypeDef *cfg)
{
 800b364:	b480      	push	{r7}
 800b366:	b087      	sub	sp, #28
 800b368:	af00      	add	r7, sp, #0
 800b36a:	4603      	mov	r3, r0
 800b36c:	6039      	str	r1, [r7, #0]
 800b36e:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 800b370:	2300      	movs	r3, #0
 800b372:	75fb      	strb	r3, [r7, #23]
  uint32_t reg;
  uint32_t value = 0U;
 800b374:	2300      	movs	r3, #0
 800b376:	613b      	str	r3, [r7, #16]
  uint32_t index;

  if ((instance_nb == 0U) || (instance_nb > OSPI_NB_INSTANCE) || (cfg == NULL))
 800b378:	79fb      	ldrb	r3, [r7, #7]
 800b37a:	2b00      	cmp	r3, #0
 800b37c:	d005      	beq.n	800b38a <OSPIM_GetConfig+0x26>
 800b37e:	79fb      	ldrb	r3, [r7, #7]
 800b380:	2b02      	cmp	r3, #2
 800b382:	d802      	bhi.n	800b38a <OSPIM_GetConfig+0x26>
 800b384:	683b      	ldr	r3, [r7, #0]
 800b386:	2b00      	cmp	r3, #0
 800b388:	d102      	bne.n	800b390 <OSPIM_GetConfig+0x2c>
  {
    /* Invalid parameter -> error returned */
    status = HAL_ERROR;
 800b38a:	2301      	movs	r3, #1
 800b38c:	75fb      	strb	r3, [r7, #23]
 800b38e:	e098      	b.n	800b4c2 <OSPIM_GetConfig+0x15e>
  }
  else
  {
    /* Initialize the structure */
    cfg->ClkPort    = 0U;
 800b390:	683b      	ldr	r3, [r7, #0]
 800b392:	2200      	movs	r2, #0
 800b394:	601a      	str	r2, [r3, #0]
    cfg->DQSPort    = 0U;
 800b396:	683b      	ldr	r3, [r7, #0]
 800b398:	2200      	movs	r2, #0
 800b39a:	605a      	str	r2, [r3, #4]
    cfg->NCSPort    = 0U;
 800b39c:	683b      	ldr	r3, [r7, #0]
 800b39e:	2200      	movs	r2, #0
 800b3a0:	609a      	str	r2, [r3, #8]
    cfg->IOLowPort  = 0U;
 800b3a2:	683b      	ldr	r3, [r7, #0]
 800b3a4:	2200      	movs	r2, #0
 800b3a6:	60da      	str	r2, [r3, #12]
    cfg->IOHighPort = 0U;
 800b3a8:	683b      	ldr	r3, [r7, #0]
 800b3aa:	2200      	movs	r2, #0
 800b3ac:	611a      	str	r2, [r3, #16]

    if (instance_nb == 2U)
 800b3ae:	79fb      	ldrb	r3, [r7, #7]
 800b3b0:	2b02      	cmp	r3, #2
 800b3b2:	d10b      	bne.n	800b3cc <OSPIM_GetConfig+0x68>
    {
      if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) == 0U)
 800b3b4:	4b46      	ldr	r3, [pc, #280]	; (800b4d0 <OSPIM_GetConfig+0x16c>)
 800b3b6:	681b      	ldr	r3, [r3, #0]
 800b3b8:	f003 0301 	and.w	r3, r3, #1
 800b3bc:	2b00      	cmp	r3, #0
 800b3be:	d102      	bne.n	800b3c6 <OSPIM_GetConfig+0x62>
      {
        value = (OCTOSPIM_PCR_CLKSRC | OCTOSPIM_PCR_DQSSRC | OCTOSPIM_PCR_NCSSRC
 800b3c0:	4b44      	ldr	r3, [pc, #272]	; (800b4d4 <OSPIM_GetConfig+0x170>)
 800b3c2:	613b      	str	r3, [r7, #16]
 800b3c4:	e002      	b.n	800b3cc <OSPIM_GetConfig+0x68>
                 | OCTOSPIM_PCR_IOLSRC_1 | OCTOSPIM_PCR_IOHSRC_1);
      }
      else
      {
        value = OCTOSPIM_PCR_NCSSRC;
 800b3c6:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b3ca:	613b      	str	r3, [r7, #16]
      }
    }

    /* Get the information about the instance */
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 800b3cc:	2300      	movs	r3, #0
 800b3ce:	60fb      	str	r3, [r7, #12]
 800b3d0:	e074      	b.n	800b4bc <OSPIM_GetConfig+0x158>
    {
      reg = OCTOSPIM->PCR[index];
 800b3d2:	4a3f      	ldr	r2, [pc, #252]	; (800b4d0 <OSPIM_GetConfig+0x16c>)
 800b3d4:	68fb      	ldr	r3, [r7, #12]
 800b3d6:	009b      	lsls	r3, r3, #2
 800b3d8:	4413      	add	r3, r2
 800b3da:	685b      	ldr	r3, [r3, #4]
 800b3dc:	60bb      	str	r3, [r7, #8]

      if ((reg & OCTOSPIM_PCR_CLKEN) != 0U)
 800b3de:	68bb      	ldr	r3, [r7, #8]
 800b3e0:	f003 0301 	and.w	r3, r3, #1
 800b3e4:	2b00      	cmp	r3, #0
 800b3e6:	d00a      	beq.n	800b3fe <OSPIM_GetConfig+0x9a>
      {
        /* The clock is enabled on this port */
        if ((reg & OCTOSPIM_PCR_CLKSRC) == (value & OCTOSPIM_PCR_CLKSRC))
 800b3e8:	68ba      	ldr	r2, [r7, #8]
 800b3ea:	693b      	ldr	r3, [r7, #16]
 800b3ec:	4053      	eors	r3, r2
 800b3ee:	f003 0302 	and.w	r3, r3, #2
 800b3f2:	2b00      	cmp	r3, #0
 800b3f4:	d103      	bne.n	800b3fe <OSPIM_GetConfig+0x9a>
        {
          /* The clock correspond to the instance passed as parameter */
          cfg->ClkPort = index + 1U;
 800b3f6:	68fb      	ldr	r3, [r7, #12]
 800b3f8:	1c5a      	adds	r2, r3, #1
 800b3fa:	683b      	ldr	r3, [r7, #0]
 800b3fc:	601a      	str	r2, [r3, #0]
        }
      }

      if ((reg & OCTOSPIM_PCR_DQSEN) != 0U)
 800b3fe:	68bb      	ldr	r3, [r7, #8]
 800b400:	f003 0310 	and.w	r3, r3, #16
 800b404:	2b00      	cmp	r3, #0
 800b406:	d00a      	beq.n	800b41e <OSPIM_GetConfig+0xba>
      {
        /* The DQS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_DQSSRC) == (value & OCTOSPIM_PCR_DQSSRC))
 800b408:	68ba      	ldr	r2, [r7, #8]
 800b40a:	693b      	ldr	r3, [r7, #16]
 800b40c:	4053      	eors	r3, r2
 800b40e:	f003 0320 	and.w	r3, r3, #32
 800b412:	2b00      	cmp	r3, #0
 800b414:	d103      	bne.n	800b41e <OSPIM_GetConfig+0xba>
        {
          /* The DQS correspond to the instance passed as parameter */
          cfg->DQSPort = index + 1U;
 800b416:	68fb      	ldr	r3, [r7, #12]
 800b418:	1c5a      	adds	r2, r3, #1
 800b41a:	683b      	ldr	r3, [r7, #0]
 800b41c:	605a      	str	r2, [r3, #4]
        }
      }

      if ((reg & OCTOSPIM_PCR_NCSEN) != 0U)
 800b41e:	68bb      	ldr	r3, [r7, #8]
 800b420:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b424:	2b00      	cmp	r3, #0
 800b426:	d00a      	beq.n	800b43e <OSPIM_GetConfig+0xda>
      {
        /* The nCS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_NCSSRC) == (value & OCTOSPIM_PCR_NCSSRC))
 800b428:	68ba      	ldr	r2, [r7, #8]
 800b42a:	693b      	ldr	r3, [r7, #16]
 800b42c:	4053      	eors	r3, r2
 800b42e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b432:	2b00      	cmp	r3, #0
 800b434:	d103      	bne.n	800b43e <OSPIM_GetConfig+0xda>
        {
          /* The nCS correspond to the instance passed as parameter */
          cfg->NCSPort = index + 1U;
 800b436:	68fb      	ldr	r3, [r7, #12]
 800b438:	1c5a      	adds	r2, r3, #1
 800b43a:	683b      	ldr	r3, [r7, #0]
 800b43c:	609a      	str	r2, [r3, #8]
        }
      }

      if ((reg & OCTOSPIM_PCR_IOLEN) != 0U)
 800b43e:	68bb      	ldr	r3, [r7, #8]
 800b440:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b444:	2b00      	cmp	r3, #0
 800b446:	d018      	beq.n	800b47a <OSPIM_GetConfig+0x116>
      {
        /* The IO Low is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOLSRC_1) == (value & OCTOSPIM_PCR_IOLSRC_1))
 800b448:	68ba      	ldr	r2, [r7, #8]
 800b44a:	693b      	ldr	r3, [r7, #16]
 800b44c:	4053      	eors	r3, r2
 800b44e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b452:	2b00      	cmp	r3, #0
 800b454:	d111      	bne.n	800b47a <OSPIM_GetConfig+0x116>
        {
          /* The IO Low correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOLSRC_0) == 0U)
 800b456:	68bb      	ldr	r3, [r7, #8]
 800b458:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b45c:	2b00      	cmp	r3, #0
 800b45e:	d106      	bne.n	800b46e <OSPIM_GetConfig+0x10a>
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOLEN | (index + 1U));
 800b460:	68fb      	ldr	r3, [r7, #12]
 800b462:	3301      	adds	r3, #1
 800b464:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800b468:	683b      	ldr	r3, [r7, #0]
 800b46a:	60da      	str	r2, [r3, #12]
 800b46c:	e005      	b.n	800b47a <OSPIM_GetConfig+0x116>
          }
          else
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOHEN | (index + 1U));
 800b46e:	68fb      	ldr	r3, [r7, #12]
 800b470:	3301      	adds	r3, #1
 800b472:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 800b476:	683b      	ldr	r3, [r7, #0]
 800b478:	60da      	str	r2, [r3, #12]
          }
        }
      }

      if ((reg & OCTOSPIM_PCR_IOHEN) != 0U)
 800b47a:	68bb      	ldr	r3, [r7, #8]
 800b47c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b480:	2b00      	cmp	r3, #0
 800b482:	d018      	beq.n	800b4b6 <OSPIM_GetConfig+0x152>
      {
        /* The IO High is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOHSRC_1) == (value & OCTOSPIM_PCR_IOHSRC_1))
 800b484:	68ba      	ldr	r2, [r7, #8]
 800b486:	693b      	ldr	r3, [r7, #16]
 800b488:	4053      	eors	r3, r2
 800b48a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800b48e:	2b00      	cmp	r3, #0
 800b490:	d111      	bne.n	800b4b6 <OSPIM_GetConfig+0x152>
        {
          /* The IO High correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOHSRC_0) == 0U)
 800b492:	68bb      	ldr	r3, [r7, #8]
 800b494:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b498:	2b00      	cmp	r3, #0
 800b49a:	d106      	bne.n	800b4aa <OSPIM_GetConfig+0x146>
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOLEN | (index + 1U));
 800b49c:	68fb      	ldr	r3, [r7, #12]
 800b49e:	3301      	adds	r3, #1
 800b4a0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800b4a4:	683b      	ldr	r3, [r7, #0]
 800b4a6:	611a      	str	r2, [r3, #16]
 800b4a8:	e005      	b.n	800b4b6 <OSPIM_GetConfig+0x152>
          }
          else
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOHEN | (index + 1U));
 800b4aa:	68fb      	ldr	r3, [r7, #12]
 800b4ac:	3301      	adds	r3, #1
 800b4ae:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 800b4b2:	683b      	ldr	r3, [r7, #0]
 800b4b4:	611a      	str	r2, [r3, #16]
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 800b4b6:	68fb      	ldr	r3, [r7, #12]
 800b4b8:	3301      	adds	r3, #1
 800b4ba:	60fb      	str	r3, [r7, #12]
 800b4bc:	68fb      	ldr	r3, [r7, #12]
 800b4be:	2b01      	cmp	r3, #1
 800b4c0:	d987      	bls.n	800b3d2 <OSPIM_GetConfig+0x6e>
      }
    }
  }

  /* Return function status */
  return status;
 800b4c2:	7dfb      	ldrb	r3, [r7, #23]
}
 800b4c4:	4618      	mov	r0, r3
 800b4c6:	371c      	adds	r7, #28
 800b4c8:	46bd      	mov	sp, r7
 800b4ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4ce:	4770      	bx	lr
 800b4d0:	420c4000 	.word	0x420c4000
 800b4d4:	04040222 	.word	0x04040222

0800b4d8 <HAL_OSPI_DLYB_SetConfig>:
  * @param  hospi   : OSPI handle.
  * @param  pdlyb_cfg: Pointer to DLYB configuration structure.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_OSPI_DLYB_SetConfig(OSPI_HandleTypeDef *hospi, HAL_OSPI_DLYB_CfgTypeDef  *pdlyb_cfg)
{
 800b4d8:	b580      	push	{r7, lr}
 800b4da:	b084      	sub	sp, #16
 800b4dc:	af00      	add	r7, sp, #0
 800b4de:	6078      	str	r0, [r7, #4]
 800b4e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 800b4e2:	2301      	movs	r3, #1
 800b4e4:	73fb      	strb	r3, [r7, #15]

  /* Enable OCTOSPI Free Running Clock (mandatory) */
  SET_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	681b      	ldr	r3, [r3, #0]
 800b4ea:	689a      	ldr	r2, [r3, #8]
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	681b      	ldr	r3, [r3, #0]
 800b4f0:	f042 0202 	orr.w	r2, r2, #2
 800b4f4:	609a      	str	r2, [r3, #8]

  /* Update OCTOSPI state */
  hospi->State = HAL_OSPI_STATE_BUSY_CMD;
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	2208      	movs	r2, #8
 800b4fa:	651a      	str	r2, [r3, #80]	; 0x50

  if (hospi->Instance == OCTOSPI1)
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	681b      	ldr	r3, [r3, #0]
 800b500:	4a15      	ldr	r2, [pc, #84]	; (800b558 <HAL_OSPI_DLYB_SetConfig+0x80>)
 800b502:	4293      	cmp	r3, r2
 800b504:	d109      	bne.n	800b51a <HAL_OSPI_DLYB_SetConfig+0x42>
  {
    /* Enable the DelayBlock */
    LL_DLYB_Enable(DLYB_OCTOSPI1);
 800b506:	4815      	ldr	r0, [pc, #84]	; (800b55c <HAL_OSPI_DLYB_SetConfig+0x84>)
 800b508:	f7fe fe46 	bl	800a198 <LL_DLYB_Enable>

    /* Set the Delay Block configuration */
    LL_DLYB_SetDelay(DLYB_OCTOSPI1, pdlyb_cfg);
 800b50c:	6839      	ldr	r1, [r7, #0]
 800b50e:	4813      	ldr	r0, [pc, #76]	; (800b55c <HAL_OSPI_DLYB_SetConfig+0x84>)
 800b510:	f005 fc10 	bl	8010d34 <LL_DLYB_SetDelay>
    status = HAL_OK;
 800b514:	2300      	movs	r3, #0
 800b516:	73fb      	strb	r3, [r7, #15]
 800b518:	e00d      	b.n	800b536 <HAL_OSPI_DLYB_SetConfig+0x5e>
  }

  else if (hospi->Instance == OCTOSPI2)
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	681b      	ldr	r3, [r3, #0]
 800b51e:	4a10      	ldr	r2, [pc, #64]	; (800b560 <HAL_OSPI_DLYB_SetConfig+0x88>)
 800b520:	4293      	cmp	r3, r2
 800b522:	d108      	bne.n	800b536 <HAL_OSPI_DLYB_SetConfig+0x5e>
  {
    /* Enable the DelayBlock */
    LL_DLYB_Enable(DLYB_OCTOSPI2);
 800b524:	480f      	ldr	r0, [pc, #60]	; (800b564 <HAL_OSPI_DLYB_SetConfig+0x8c>)
 800b526:	f7fe fe37 	bl	800a198 <LL_DLYB_Enable>

    /* Set the Delay Block configuration */
    LL_DLYB_SetDelay(DLYB_OCTOSPI2, pdlyb_cfg);
 800b52a:	6839      	ldr	r1, [r7, #0]
 800b52c:	480d      	ldr	r0, [pc, #52]	; (800b564 <HAL_OSPI_DLYB_SetConfig+0x8c>)
 800b52e:	f005 fc01 	bl	8010d34 <LL_DLYB_SetDelay>
    status = HAL_OK;
 800b532:	2300      	movs	r3, #0
 800b534:	73fb      	strb	r3, [r7, #15]
  {
    /* Nothing to do */
  }

  /* Abort the current OCTOSPI operation if exist */
  (void)HAL_OSPI_Abort(hospi);
 800b536:	6878      	ldr	r0, [r7, #4]
 800b538:	f7fe ffe4 	bl	800a504 <HAL_OSPI_Abort>

  /* Disable Free Running Clock */
  CLEAR_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	681b      	ldr	r3, [r3, #0]
 800b540:	689a      	ldr	r2, [r3, #8]
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	681b      	ldr	r3, [r3, #0]
 800b546:	f022 0202 	bic.w	r2, r2, #2
 800b54a:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return status;
 800b54c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b54e:	4618      	mov	r0, r3
 800b550:	3710      	adds	r7, #16
 800b552:	46bd      	mov	sp, r7
 800b554:	bd80      	pop	{r7, pc}
 800b556:	bf00      	nop
 800b558:	420d1400 	.word	0x420d1400
 800b55c:	420cf000 	.word	0x420cf000
 800b560:	420d2400 	.word	0x420d2400
 800b564:	420cf400 	.word	0x420cf400

0800b568 <HAL_OSPI_DLYB_GetConfig>:
  * @param  hospi   : OSPI handle.
  * @param  pdlyb_cfg: Pointer to DLYB configuration structure.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_OSPI_DLYB_GetConfig(OSPI_HandleTypeDef *hospi, HAL_OSPI_DLYB_CfgTypeDef  *pdlyb_cfg)
{
 800b568:	b580      	push	{r7, lr}
 800b56a:	b084      	sub	sp, #16
 800b56c:	af00      	add	r7, sp, #0
 800b56e:	6078      	str	r0, [r7, #4]
 800b570:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 800b572:	2301      	movs	r3, #1
 800b574:	73fb      	strb	r3, [r7, #15]

  if (hospi->Instance == OCTOSPI1)
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	681b      	ldr	r3, [r3, #0]
 800b57a:	4a0d      	ldr	r2, [pc, #52]	; (800b5b0 <HAL_OSPI_DLYB_GetConfig+0x48>)
 800b57c:	4293      	cmp	r3, r2
 800b57e:	d106      	bne.n	800b58e <HAL_OSPI_DLYB_GetConfig+0x26>
  {
    LL_DLYB_GetDelay(DLYB_OCTOSPI1, pdlyb_cfg);
 800b580:	6839      	ldr	r1, [r7, #0]
 800b582:	480c      	ldr	r0, [pc, #48]	; (800b5b4 <HAL_OSPI_DLYB_GetConfig+0x4c>)
 800b584:	f005 fbf5 	bl	8010d72 <LL_DLYB_GetDelay>
    status = HAL_OK;
 800b588:	2300      	movs	r3, #0
 800b58a:	73fb      	strb	r3, [r7, #15]
 800b58c:	e00a      	b.n	800b5a4 <HAL_OSPI_DLYB_GetConfig+0x3c>
  }
  else if (hospi->Instance == OCTOSPI2)
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	681b      	ldr	r3, [r3, #0]
 800b592:	4a09      	ldr	r2, [pc, #36]	; (800b5b8 <HAL_OSPI_DLYB_GetConfig+0x50>)
 800b594:	4293      	cmp	r3, r2
 800b596:	d105      	bne.n	800b5a4 <HAL_OSPI_DLYB_GetConfig+0x3c>
  {
    LL_DLYB_GetDelay(DLYB_OCTOSPI2, pdlyb_cfg);
 800b598:	6839      	ldr	r1, [r7, #0]
 800b59a:	4808      	ldr	r0, [pc, #32]	; (800b5bc <HAL_OSPI_DLYB_GetConfig+0x54>)
 800b59c:	f005 fbe9 	bl	8010d72 <LL_DLYB_GetDelay>
    status = HAL_OK;
 800b5a0:	2300      	movs	r3, #0
 800b5a2:	73fb      	strb	r3, [r7, #15]
  {
    /* Nothing to do */
  }

  /* Return function status */
  return status;
 800b5a4:	7bfb      	ldrb	r3, [r7, #15]
}
 800b5a6:	4618      	mov	r0, r3
 800b5a8:	3710      	adds	r7, #16
 800b5aa:	46bd      	mov	sp, r7
 800b5ac:	bd80      	pop	{r7, pc}
 800b5ae:	bf00      	nop
 800b5b0:	420d1400 	.word	0x420d1400
 800b5b4:	420cf000 	.word	0x420cf000
 800b5b8:	420d2400 	.word	0x420d2400
 800b5bc:	420cf400 	.word	0x420cf400

0800b5c0 <HAL_OSPI_DLYB_GetClockPeriod>:
  * @brief  Get the Delay line length value.
  * @param  hospi   : OSPI handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_OSPI_DLYB_GetClockPeriod(OSPI_HandleTypeDef *hospi, HAL_OSPI_DLYB_CfgTypeDef  *pdlyb_cfg)
{
 800b5c0:	b580      	push	{r7, lr}
 800b5c2:	b084      	sub	sp, #16
 800b5c4:	af00      	add	r7, sp, #0
 800b5c6:	6078      	str	r0, [r7, #4]
 800b5c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 800b5ca:	2301      	movs	r3, #1
 800b5cc:	73fb      	strb	r3, [r7, #15]

  /* Enable OCTOSPI Free Running Clock (mandatory) */
  SET_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	681b      	ldr	r3, [r3, #0]
 800b5d2:	689a      	ldr	r2, [r3, #8]
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	681b      	ldr	r3, [r3, #0]
 800b5d8:	f042 0202 	orr.w	r2, r2, #2
 800b5dc:	609a      	str	r2, [r3, #8]

  /* Update OCTOSPI state */
  hospi->State = HAL_OSPI_STATE_BUSY_CMD;
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	2208      	movs	r2, #8
 800b5e2:	651a      	str	r2, [r3, #80]	; 0x50

  if (hospi->Instance == OCTOSPI1)
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	681b      	ldr	r3, [r3, #0]
 800b5e8:	4a1b      	ldr	r2, [pc, #108]	; (800b658 <HAL_OSPI_DLYB_GetClockPeriod+0x98>)
 800b5ea:	4293      	cmp	r3, r2
 800b5ec:	d10f      	bne.n	800b60e <HAL_OSPI_DLYB_GetClockPeriod+0x4e>
  {
    /* Enable the DelayBlock */
    LL_DLYB_Enable(DLYB_OCTOSPI1);
 800b5ee:	481b      	ldr	r0, [pc, #108]	; (800b65c <HAL_OSPI_DLYB_GetClockPeriod+0x9c>)
 800b5f0:	f7fe fdd2 	bl	800a198 <LL_DLYB_Enable>

    /* try to detect Period */
    if (LL_DLYB_GetClockPeriod(DLYB_OCTOSPI1, pdlyb_cfg) == (uint32_t)SUCCESS)
 800b5f4:	6839      	ldr	r1, [r7, #0]
 800b5f6:	4819      	ldr	r0, [pc, #100]	; (800b65c <HAL_OSPI_DLYB_GetClockPeriod+0x9c>)
 800b5f8:	f005 fbd4 	bl	8010da4 <LL_DLYB_GetClockPeriod>
 800b5fc:	4603      	mov	r3, r0
 800b5fe:	2b00      	cmp	r3, #0
 800b600:	d101      	bne.n	800b606 <HAL_OSPI_DLYB_GetClockPeriod+0x46>
    {
      status = HAL_OK;
 800b602:	2300      	movs	r3, #0
 800b604:	73fb      	strb	r3, [r7, #15]
    }

    /* Disable the DelayBlock */
    LL_DLYB_Disable(DLYB_OCTOSPI1);
 800b606:	4815      	ldr	r0, [pc, #84]	; (800b65c <HAL_OSPI_DLYB_GetClockPeriod+0x9c>)
 800b608:	f7fe fdd6 	bl	800a1b8 <LL_DLYB_Disable>
 800b60c:	e013      	b.n	800b636 <HAL_OSPI_DLYB_GetClockPeriod+0x76>
  }

  else if (hospi->Instance == OCTOSPI2)
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	681b      	ldr	r3, [r3, #0]
 800b612:	4a13      	ldr	r2, [pc, #76]	; (800b660 <HAL_OSPI_DLYB_GetClockPeriod+0xa0>)
 800b614:	4293      	cmp	r3, r2
 800b616:	d10e      	bne.n	800b636 <HAL_OSPI_DLYB_GetClockPeriod+0x76>
  {
    /* Enable the DelayBlock */
    LL_DLYB_Enable(DLYB_OCTOSPI2);
 800b618:	4812      	ldr	r0, [pc, #72]	; (800b664 <HAL_OSPI_DLYB_GetClockPeriod+0xa4>)
 800b61a:	f7fe fdbd 	bl	800a198 <LL_DLYB_Enable>

    /* try to detect Period */
    if (LL_DLYB_GetClockPeriod(DLYB_OCTOSPI2, pdlyb_cfg) == (uint32_t)SUCCESS)
 800b61e:	6839      	ldr	r1, [r7, #0]
 800b620:	4810      	ldr	r0, [pc, #64]	; (800b664 <HAL_OSPI_DLYB_GetClockPeriod+0xa4>)
 800b622:	f005 fbbf 	bl	8010da4 <LL_DLYB_GetClockPeriod>
 800b626:	4603      	mov	r3, r0
 800b628:	2b00      	cmp	r3, #0
 800b62a:	d101      	bne.n	800b630 <HAL_OSPI_DLYB_GetClockPeriod+0x70>
    {
      status = HAL_OK;
 800b62c:	2300      	movs	r3, #0
 800b62e:	73fb      	strb	r3, [r7, #15]
    }

    /* Disable the DelayBlock */
    LL_DLYB_Disable(DLYB_OCTOSPI2);
 800b630:	480c      	ldr	r0, [pc, #48]	; (800b664 <HAL_OSPI_DLYB_GetClockPeriod+0xa4>)
 800b632:	f7fe fdc1 	bl	800a1b8 <LL_DLYB_Disable>
  {
    /* Nothing to do */
  }

  /* Abort the current OctoSPI operation if exist */
  (void)HAL_OSPI_Abort(hospi);
 800b636:	6878      	ldr	r0, [r7, #4]
 800b638:	f7fe ff64 	bl	800a504 <HAL_OSPI_Abort>

  /* Disable Free Running Clock */
  CLEAR_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	681b      	ldr	r3, [r3, #0]
 800b640:	689a      	ldr	r2, [r3, #8]
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	681b      	ldr	r3, [r3, #0]
 800b646:	f022 0202 	bic.w	r2, r2, #2
 800b64a:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return status;
 800b64c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b64e:	4618      	mov	r0, r3
 800b650:	3710      	adds	r7, #16
 800b652:	46bd      	mov	sp, r7
 800b654:	bd80      	pop	{r7, pc}
 800b656:	bf00      	nop
 800b658:	420d1400 	.word	0x420d1400
 800b65c:	420cf000 	.word	0x420cf000
 800b660:	420d2400 	.word	0x420d2400
 800b664:	420cf400 	.word	0x420cf400

0800b668 <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800b668:	b480      	push	{r7}
 800b66a:	b085      	sub	sp, #20
 800b66c:	af00      	add	r7, sp, #0
 800b66e:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 800b670:	4b34      	ldr	r3, [pc, #208]	; (800b744 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 800b672:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b674:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800b678:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 800b67a:	68ba      	ldr	r2, [r7, #8]
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	429a      	cmp	r2, r3
 800b680:	d101      	bne.n	800b686 <HAL_PWREx_ControlVoltageScaling+0x1e>
  {
    return HAL_OK;
 800b682:	2300      	movs	r3, #0
 800b684:	e057      	b.n	800b736 <HAL_PWREx_ControlVoltageScaling+0xce>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b68c:	d90a      	bls.n	800b6a4 <HAL_PWREx_ControlVoltageScaling+0x3c>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 800b68e:	4b2d      	ldr	r3, [pc, #180]	; (800b744 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 800b690:	68db      	ldr	r3, [r3, #12]
 800b692:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	4313      	orrs	r3, r2
 800b69a:	4a2a      	ldr	r2, [pc, #168]	; (800b744 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 800b69c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800b6a0:	60d3      	str	r3, [r2, #12]
 800b6a2:	e007      	b.n	800b6b4 <HAL_PWREx_ControlVoltageScaling+0x4c>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 800b6a4:	4b27      	ldr	r3, [pc, #156]	; (800b744 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 800b6a6:	68db      	ldr	r3, [r3, #12]
 800b6a8:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800b6ac:	4925      	ldr	r1, [pc, #148]	; (800b744 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	4313      	orrs	r3, r2
 800b6b2:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 800b6b4:	4b24      	ldr	r3, [pc, #144]	; (800b748 <HAL_PWREx_ControlVoltageScaling+0xe0>)
 800b6b6:	681b      	ldr	r3, [r3, #0]
 800b6b8:	4a24      	ldr	r2, [pc, #144]	; (800b74c <HAL_PWREx_ControlVoltageScaling+0xe4>)
 800b6ba:	fba2 2303 	umull	r2, r3, r2, r3
 800b6be:	099b      	lsrs	r3, r3, #6
 800b6c0:	2232      	movs	r2, #50	; 0x32
 800b6c2:	fb02 f303 	mul.w	r3, r2, r3
 800b6c6:	4a21      	ldr	r2, [pc, #132]	; (800b74c <HAL_PWREx_ControlVoltageScaling+0xe4>)
 800b6c8:	fba2 2303 	umull	r2, r3, r2, r3
 800b6cc:	099b      	lsrs	r3, r3, #6
 800b6ce:	3301      	adds	r3, #1
 800b6d0:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 800b6d2:	e002      	b.n	800b6da <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    timeout--;
 800b6d4:	68fb      	ldr	r3, [r7, #12]
 800b6d6:	3b01      	subs	r3, #1
 800b6d8:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 800b6da:	4b1a      	ldr	r3, [pc, #104]	; (800b744 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 800b6dc:	68db      	ldr	r3, [r3, #12]
 800b6de:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b6e2:	2b00      	cmp	r3, #0
 800b6e4:	d102      	bne.n	800b6ec <HAL_PWREx_ControlVoltageScaling+0x84>
 800b6e6:	68fb      	ldr	r3, [r7, #12]
 800b6e8:	2b00      	cmp	r3, #0
 800b6ea:	d1f3      	bne.n	800b6d4 <HAL_PWREx_ControlVoltageScaling+0x6c>
  }

  /* Check time out */
  if (timeout != 0U)
 800b6ec:	68fb      	ldr	r3, [r7, #12]
 800b6ee:	2b00      	cmp	r3, #0
 800b6f0:	d01b      	beq.n	800b72a <HAL_PWREx_ControlVoltageScaling+0xc2>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 800b6f2:	4b15      	ldr	r3, [pc, #84]	; (800b748 <HAL_PWREx_ControlVoltageScaling+0xe0>)
 800b6f4:	681b      	ldr	r3, [r3, #0]
 800b6f6:	4a15      	ldr	r2, [pc, #84]	; (800b74c <HAL_PWREx_ControlVoltageScaling+0xe4>)
 800b6f8:	fba2 2303 	umull	r2, r3, r2, r3
 800b6fc:	099b      	lsrs	r3, r3, #6
 800b6fe:	2232      	movs	r2, #50	; 0x32
 800b700:	fb02 f303 	mul.w	r3, r2, r3
 800b704:	4a11      	ldr	r2, [pc, #68]	; (800b74c <HAL_PWREx_ControlVoltageScaling+0xe4>)
 800b706:	fba2 2303 	umull	r2, r3, r2, r3
 800b70a:	099b      	lsrs	r3, r3, #6
 800b70c:	3301      	adds	r3, #1
 800b70e:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 800b710:	e002      	b.n	800b718 <HAL_PWREx_ControlVoltageScaling+0xb0>
    {
      timeout--;
 800b712:	68fb      	ldr	r3, [r7, #12]
 800b714:	3b01      	subs	r3, #1
 800b716:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 800b718:	4b0a      	ldr	r3, [pc, #40]	; (800b744 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 800b71a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b71c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b720:	2b00      	cmp	r3, #0
 800b722:	d102      	bne.n	800b72a <HAL_PWREx_ControlVoltageScaling+0xc2>
 800b724:	68fb      	ldr	r3, [r7, #12]
 800b726:	2b00      	cmp	r3, #0
 800b728:	d1f3      	bne.n	800b712 <HAL_PWREx_ControlVoltageScaling+0xaa>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 800b72a:	68fb      	ldr	r3, [r7, #12]
 800b72c:	2b00      	cmp	r3, #0
 800b72e:	d101      	bne.n	800b734 <HAL_PWREx_ControlVoltageScaling+0xcc>
  {
    return HAL_TIMEOUT;
 800b730:	2303      	movs	r3, #3
 800b732:	e000      	b.n	800b736 <HAL_PWREx_ControlVoltageScaling+0xce>
  }

  return HAL_OK;
 800b734:	2300      	movs	r3, #0
}
 800b736:	4618      	mov	r0, r3
 800b738:	3714      	adds	r7, #20
 800b73a:	46bd      	mov	sp, r7
 800b73c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b740:	4770      	bx	lr
 800b742:	bf00      	nop
 800b744:	46020800 	.word	0x46020800
 800b748:	20000000 	.word	0x20000000
 800b74c:	10624dd3 	.word	0x10624dd3

0800b750 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800b750:	b480      	push	{r7}
 800b752:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 800b754:	4b04      	ldr	r3, [pc, #16]	; (800b768 <HAL_PWREx_GetVoltageRange+0x18>)
 800b756:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b758:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 800b75c:	4618      	mov	r0, r3
 800b75e:	46bd      	mov	sp, r7
 800b760:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b764:	4770      	bx	lr
 800b766:	bf00      	nop
 800b768:	46020800 	.word	0x46020800

0800b76c <HAL_PWREx_ConfigSupply>:
  *                        @arg PWR_LDO_SUPPLY  : The LDO regulator supplies the Vcore Power Domains.
  *                        @arg PWR_SMPS_SUPPLY : The SMPS regulator supplies the Vcore Power Domains.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply(uint32_t SupplySource)
{
 800b76c:	b480      	push	{r7}
 800b76e:	b085      	sub	sp, #20
 800b770:	af00      	add	r7, sp, #0
 800b772:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_SUPPLY(SupplySource));

  /* Set maximum time out */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 800b774:	4b22      	ldr	r3, [pc, #136]	; (800b800 <HAL_PWREx_ConfigSupply+0x94>)
 800b776:	681b      	ldr	r3, [r3, #0]
 800b778:	4a22      	ldr	r2, [pc, #136]	; (800b804 <HAL_PWREx_ConfigSupply+0x98>)
 800b77a:	fba2 2303 	umull	r2, r3, r2, r3
 800b77e:	099b      	lsrs	r3, r3, #6
 800b780:	2232      	movs	r2, #50	; 0x32
 800b782:	fb02 f303 	mul.w	r3, r2, r3
 800b786:	4a1f      	ldr	r2, [pc, #124]	; (800b804 <HAL_PWREx_ConfigSupply+0x98>)
 800b788:	fba2 2303 	umull	r2, r3, r2, r3
 800b78c:	099b      	lsrs	r3, r3, #6
 800b78e:	3301      	adds	r3, #1
 800b790:	60fb      	str	r3, [r7, #12]

  /* Configure the LDO as system regulator supply */
  if (SupplySource == PWR_LDO_SUPPLY)
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	2b00      	cmp	r3, #0
 800b796:	d113      	bne.n	800b7c0 <HAL_PWREx_ConfigSupply+0x54>
  {
    /* Set the power supply configuration */
    CLEAR_BIT(PWR->CR3, PWR_CR3_REGSEL);
 800b798:	4b1b      	ldr	r3, [pc, #108]	; (800b808 <HAL_PWREx_ConfigSupply+0x9c>)
 800b79a:	689b      	ldr	r3, [r3, #8]
 800b79c:	4a1a      	ldr	r2, [pc, #104]	; (800b808 <HAL_PWREx_ConfigSupply+0x9c>)
 800b79e:	f023 0302 	bic.w	r3, r3, #2
 800b7a2:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 800b7a4:	e002      	b.n	800b7ac <HAL_PWREx_ConfigSupply+0x40>
    {
      timeout--;
 800b7a6:	68fb      	ldr	r3, [r7, #12]
 800b7a8:	3b01      	subs	r3, #1
 800b7aa:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 800b7ac:	4b16      	ldr	r3, [pc, #88]	; (800b808 <HAL_PWREx_ConfigSupply+0x9c>)
 800b7ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b7b0:	f003 0302 	and.w	r3, r3, #2
 800b7b4:	2b02      	cmp	r3, #2
 800b7b6:	d116      	bne.n	800b7e6 <HAL_PWREx_ConfigSupply+0x7a>
 800b7b8:	68fb      	ldr	r3, [r7, #12]
 800b7ba:	2b00      	cmp	r3, #0
 800b7bc:	d1f3      	bne.n	800b7a6 <HAL_PWREx_ConfigSupply+0x3a>
 800b7be:	e012      	b.n	800b7e6 <HAL_PWREx_ConfigSupply+0x7a>
  }
  /* Configure the SMPS as system regulator supply */
  else
  {
    /* Set the power supply configuration */
    SET_BIT(PWR->CR3, PWR_CR3_REGSEL);
 800b7c0:	4b11      	ldr	r3, [pc, #68]	; (800b808 <HAL_PWREx_ConfigSupply+0x9c>)
 800b7c2:	689b      	ldr	r3, [r3, #8]
 800b7c4:	4a10      	ldr	r2, [pc, #64]	; (800b808 <HAL_PWREx_ConfigSupply+0x9c>)
 800b7c6:	f043 0302 	orr.w	r3, r3, #2
 800b7ca:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 800b7cc:	e002      	b.n	800b7d4 <HAL_PWREx_ConfigSupply+0x68>
    {
      timeout--;
 800b7ce:	68fb      	ldr	r3, [r7, #12]
 800b7d0:	3b01      	subs	r3, #1
 800b7d2:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 800b7d4:	4b0c      	ldr	r3, [pc, #48]	; (800b808 <HAL_PWREx_ConfigSupply+0x9c>)
 800b7d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b7d8:	f003 0302 	and.w	r3, r3, #2
 800b7dc:	2b00      	cmp	r3, #0
 800b7de:	d102      	bne.n	800b7e6 <HAL_PWREx_ConfigSupply+0x7a>
 800b7e0:	68fb      	ldr	r3, [r7, #12]
 800b7e2:	2b00      	cmp	r3, #0
 800b7e4:	d1f3      	bne.n	800b7ce <HAL_PWREx_ConfigSupply+0x62>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 800b7e6:	68fb      	ldr	r3, [r7, #12]
 800b7e8:	2b00      	cmp	r3, #0
 800b7ea:	d101      	bne.n	800b7f0 <HAL_PWREx_ConfigSupply+0x84>
  {
    return HAL_TIMEOUT;
 800b7ec:	2303      	movs	r3, #3
 800b7ee:	e000      	b.n	800b7f2 <HAL_PWREx_ConfigSupply+0x86>
  }

  return HAL_OK;
 800b7f0:	2300      	movs	r3, #0
}
 800b7f2:	4618      	mov	r0, r3
 800b7f4:	3714      	adds	r7, #20
 800b7f6:	46bd      	mov	sp, r7
 800b7f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7fc:	4770      	bx	lr
 800b7fe:	bf00      	nop
 800b800:	20000000 	.word	0x20000000
 800b804:	10624dd3 	.word	0x10624dd3
 800b808:	46020800 	.word	0x46020800

0800b80c <HAL_PWREx_EnableVddIO2>:
  * @note   Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddIO2(void)
{
 800b80c:	b480      	push	{r7}
 800b80e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_IO2SV);
 800b810:	4b05      	ldr	r3, [pc, #20]	; (800b828 <HAL_PWREx_EnableVddIO2+0x1c>)
 800b812:	691b      	ldr	r3, [r3, #16]
 800b814:	4a04      	ldr	r2, [pc, #16]	; (800b828 <HAL_PWREx_EnableVddIO2+0x1c>)
 800b816:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b81a:	6113      	str	r3, [r2, #16]
}
 800b81c:	bf00      	nop
 800b81e:	46bd      	mov	sp, r7
 800b820:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b824:	4770      	bx	lr
 800b826:	bf00      	nop
 800b828:	46020800 	.word	0x46020800

0800b82c <HAL_PWREx_EnableVddA>:
  * @note   Remove VDDA electrical and logical isolation, once VDDA supply is
  *         present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddA(void)
{
 800b82c:	b480      	push	{r7}
 800b82e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_ASV);
 800b830:	4b05      	ldr	r3, [pc, #20]	; (800b848 <HAL_PWREx_EnableVddA+0x1c>)
 800b832:	691b      	ldr	r3, [r3, #16]
 800b834:	4a04      	ldr	r2, [pc, #16]	; (800b848 <HAL_PWREx_EnableVddA+0x1c>)
 800b836:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b83a:	6113      	str	r3, [r2, #16]
}
 800b83c:	bf00      	nop
 800b83e:	46bd      	mov	sp, r7
 800b840:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b844:	4770      	bx	lr
 800b846:	bf00      	nop
 800b848:	46020800 	.word	0x46020800

0800b84c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 800b84c:	b580      	push	{r7, lr}
 800b84e:	b08e      	sub	sp, #56	; 0x38
 800b850:	af00      	add	r7, sp, #0
 800b852:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 800b854:	2300      	movs	r3, #0
 800b856:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	2b00      	cmp	r3, #0
 800b85e:	d102      	bne.n	800b866 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 800b860:	2301      	movs	r3, #1
 800b862:	f000 bec3 	b.w	800c5ec <HAL_RCC_OscConfig+0xda0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b866:	4b9c      	ldr	r3, [pc, #624]	; (800bad8 <HAL_RCC_OscConfig+0x28c>)
 800b868:	69db      	ldr	r3, [r3, #28]
 800b86a:	f003 030c 	and.w	r3, r3, #12
 800b86e:	633b      	str	r3, [r7, #48]	; 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800b870:	4b99      	ldr	r3, [pc, #612]	; (800bad8 <HAL_RCC_OscConfig+0x28c>)
 800b872:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b874:	f003 0303 	and.w	r3, r3, #3
 800b878:	62fb      	str	r3, [r7, #44]	; 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	681b      	ldr	r3, [r3, #0]
 800b87e:	f003 0310 	and.w	r3, r3, #16
 800b882:	2b00      	cmp	r3, #0
 800b884:	f000 8172 	beq.w	800bb6c <HAL_RCC_OscConfig+0x320>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800b888:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b88a:	2b00      	cmp	r3, #0
 800b88c:	d007      	beq.n	800b89e <HAL_RCC_OscConfig+0x52>
 800b88e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b890:	2b0c      	cmp	r3, #12
 800b892:	f040 80e4 	bne.w	800ba5e <HAL_RCC_OscConfig+0x212>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 800b896:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b898:	2b01      	cmp	r3, #1
 800b89a:	f040 80e0 	bne.w	800ba5e <HAL_RCC_OscConfig+0x212>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U) && (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800b89e:	4b8e      	ldr	r3, [pc, #568]	; (800bad8 <HAL_RCC_OscConfig+0x28c>)
 800b8a0:	681b      	ldr	r3, [r3, #0]
 800b8a2:	f003 0304 	and.w	r3, r3, #4
 800b8a6:	2b00      	cmp	r3, #0
 800b8a8:	d006      	beq.n	800b8b8 <HAL_RCC_OscConfig+0x6c>
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	69db      	ldr	r3, [r3, #28]
 800b8ae:	2b00      	cmp	r3, #0
 800b8b0:	d102      	bne.n	800b8b8 <HAL_RCC_OscConfig+0x6c>
      {
        return HAL_ERROR;
 800b8b2:	2301      	movs	r3, #1
 800b8b4:	f000 be9a 	b.w	800c5ec <HAL_RCC_OscConfig+0xda0>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b8bc:	4b86      	ldr	r3, [pc, #536]	; (800bad8 <HAL_RCC_OscConfig+0x28c>)
 800b8be:	689b      	ldr	r3, [r3, #8]
 800b8c0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b8c4:	2b00      	cmp	r3, #0
 800b8c6:	d004      	beq.n	800b8d2 <HAL_RCC_OscConfig+0x86>
 800b8c8:	4b83      	ldr	r3, [pc, #524]	; (800bad8 <HAL_RCC_OscConfig+0x28c>)
 800b8ca:	689b      	ldr	r3, [r3, #8]
 800b8cc:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800b8d0:	e005      	b.n	800b8de <HAL_RCC_OscConfig+0x92>
 800b8d2:	4b81      	ldr	r3, [pc, #516]	; (800bad8 <HAL_RCC_OscConfig+0x28c>)
 800b8d4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800b8d8:	041b      	lsls	r3, r3, #16
 800b8da:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800b8de:	4293      	cmp	r3, r2
 800b8e0:	d255      	bcs.n	800b98e <HAL_RCC_OscConfig+0x142>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800b8e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8e4:	2b00      	cmp	r3, #0
 800b8e6:	d10a      	bne.n	800b8fe <HAL_RCC_OscConfig+0xb2>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8ec:	4618      	mov	r0, r3
 800b8ee:	f001 fa0b 	bl	800cd08 <RCC_SetFlashLatencyFromMSIRange>
 800b8f2:	4603      	mov	r3, r0
 800b8f4:	2b00      	cmp	r3, #0
 800b8f6:	d002      	beq.n	800b8fe <HAL_RCC_OscConfig+0xb2>
            {
              return HAL_ERROR;
 800b8f8:	2301      	movs	r3, #1
 800b8fa:	f000 be77 	b.w	800c5ec <HAL_RCC_OscConfig+0xda0>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 800b8fe:	4b76      	ldr	r3, [pc, #472]	; (800bad8 <HAL_RCC_OscConfig+0x28c>)
 800b900:	689b      	ldr	r3, [r3, #8]
 800b902:	4a75      	ldr	r2, [pc, #468]	; (800bad8 <HAL_RCC_OscConfig+0x28c>)
 800b904:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800b908:	6093      	str	r3, [r2, #8]
 800b90a:	4b73      	ldr	r3, [pc, #460]	; (800bad8 <HAL_RCC_OscConfig+0x28c>)
 800b90c:	689b      	ldr	r3, [r3, #8]
 800b90e:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b916:	4970      	ldr	r1, [pc, #448]	; (800bad8 <HAL_RCC_OscConfig+0x28c>)
 800b918:	4313      	orrs	r3, r2
 800b91a:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b920:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 800b924:	d309      	bcc.n	800b93a <HAL_RCC_OscConfig+0xee>
 800b926:	4b6c      	ldr	r3, [pc, #432]	; (800bad8 <HAL_RCC_OscConfig+0x28c>)
 800b928:	68db      	ldr	r3, [r3, #12]
 800b92a:	f023 021f 	bic.w	r2, r3, #31
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	6a1b      	ldr	r3, [r3, #32]
 800b932:	4969      	ldr	r1, [pc, #420]	; (800bad8 <HAL_RCC_OscConfig+0x28c>)
 800b934:	4313      	orrs	r3, r2
 800b936:	60cb      	str	r3, [r1, #12]
 800b938:	e07e      	b.n	800ba38 <HAL_RCC_OscConfig+0x1ec>
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b93e:	2b00      	cmp	r3, #0
 800b940:	da0a      	bge.n	800b958 <HAL_RCC_OscConfig+0x10c>
 800b942:	4b65      	ldr	r3, [pc, #404]	; (800bad8 <HAL_RCC_OscConfig+0x28c>)
 800b944:	68db      	ldr	r3, [r3, #12]
 800b946:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	6a1b      	ldr	r3, [r3, #32]
 800b94e:	015b      	lsls	r3, r3, #5
 800b950:	4961      	ldr	r1, [pc, #388]	; (800bad8 <HAL_RCC_OscConfig+0x28c>)
 800b952:	4313      	orrs	r3, r2
 800b954:	60cb      	str	r3, [r1, #12]
 800b956:	e06f      	b.n	800ba38 <HAL_RCC_OscConfig+0x1ec>
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b95c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b960:	d30a      	bcc.n	800b978 <HAL_RCC_OscConfig+0x12c>
 800b962:	4b5d      	ldr	r3, [pc, #372]	; (800bad8 <HAL_RCC_OscConfig+0x28c>)
 800b964:	68db      	ldr	r3, [r3, #12]
 800b966:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	6a1b      	ldr	r3, [r3, #32]
 800b96e:	029b      	lsls	r3, r3, #10
 800b970:	4959      	ldr	r1, [pc, #356]	; (800bad8 <HAL_RCC_OscConfig+0x28c>)
 800b972:	4313      	orrs	r3, r2
 800b974:	60cb      	str	r3, [r1, #12]
 800b976:	e05f      	b.n	800ba38 <HAL_RCC_OscConfig+0x1ec>
 800b978:	4b57      	ldr	r3, [pc, #348]	; (800bad8 <HAL_RCC_OscConfig+0x28c>)
 800b97a:	68db      	ldr	r3, [r3, #12]
 800b97c:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	6a1b      	ldr	r3, [r3, #32]
 800b984:	03db      	lsls	r3, r3, #15
 800b986:	4954      	ldr	r1, [pc, #336]	; (800bad8 <HAL_RCC_OscConfig+0x28c>)
 800b988:	4313      	orrs	r3, r2
 800b98a:	60cb      	str	r3, [r1, #12]
 800b98c:	e054      	b.n	800ba38 <HAL_RCC_OscConfig+0x1ec>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 800b98e:	4b52      	ldr	r3, [pc, #328]	; (800bad8 <HAL_RCC_OscConfig+0x28c>)
 800b990:	689b      	ldr	r3, [r3, #8]
 800b992:	4a51      	ldr	r2, [pc, #324]	; (800bad8 <HAL_RCC_OscConfig+0x28c>)
 800b994:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800b998:	6093      	str	r3, [r2, #8]
 800b99a:	4b4f      	ldr	r3, [pc, #316]	; (800bad8 <HAL_RCC_OscConfig+0x28c>)
 800b99c:	689b      	ldr	r3, [r3, #8]
 800b99e:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9a6:	494c      	ldr	r1, [pc, #304]	; (800bad8 <HAL_RCC_OscConfig+0x28c>)
 800b9a8:	4313      	orrs	r3, r2
 800b9aa:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9b0:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 800b9b4:	d309      	bcc.n	800b9ca <HAL_RCC_OscConfig+0x17e>
 800b9b6:	4b48      	ldr	r3, [pc, #288]	; (800bad8 <HAL_RCC_OscConfig+0x28c>)
 800b9b8:	68db      	ldr	r3, [r3, #12]
 800b9ba:	f023 021f 	bic.w	r2, r3, #31
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	6a1b      	ldr	r3, [r3, #32]
 800b9c2:	4945      	ldr	r1, [pc, #276]	; (800bad8 <HAL_RCC_OscConfig+0x28c>)
 800b9c4:	4313      	orrs	r3, r2
 800b9c6:	60cb      	str	r3, [r1, #12]
 800b9c8:	e028      	b.n	800ba1c <HAL_RCC_OscConfig+0x1d0>
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9ce:	2b00      	cmp	r3, #0
 800b9d0:	da0a      	bge.n	800b9e8 <HAL_RCC_OscConfig+0x19c>
 800b9d2:	4b41      	ldr	r3, [pc, #260]	; (800bad8 <HAL_RCC_OscConfig+0x28c>)
 800b9d4:	68db      	ldr	r3, [r3, #12]
 800b9d6:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	6a1b      	ldr	r3, [r3, #32]
 800b9de:	015b      	lsls	r3, r3, #5
 800b9e0:	493d      	ldr	r1, [pc, #244]	; (800bad8 <HAL_RCC_OscConfig+0x28c>)
 800b9e2:	4313      	orrs	r3, r2
 800b9e4:	60cb      	str	r3, [r1, #12]
 800b9e6:	e019      	b.n	800ba1c <HAL_RCC_OscConfig+0x1d0>
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b9f0:	d30a      	bcc.n	800ba08 <HAL_RCC_OscConfig+0x1bc>
 800b9f2:	4b39      	ldr	r3, [pc, #228]	; (800bad8 <HAL_RCC_OscConfig+0x28c>)
 800b9f4:	68db      	ldr	r3, [r3, #12]
 800b9f6:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	6a1b      	ldr	r3, [r3, #32]
 800b9fe:	029b      	lsls	r3, r3, #10
 800ba00:	4935      	ldr	r1, [pc, #212]	; (800bad8 <HAL_RCC_OscConfig+0x28c>)
 800ba02:	4313      	orrs	r3, r2
 800ba04:	60cb      	str	r3, [r1, #12]
 800ba06:	e009      	b.n	800ba1c <HAL_RCC_OscConfig+0x1d0>
 800ba08:	4b33      	ldr	r3, [pc, #204]	; (800bad8 <HAL_RCC_OscConfig+0x28c>)
 800ba0a:	68db      	ldr	r3, [r3, #12]
 800ba0c:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	6a1b      	ldr	r3, [r3, #32]
 800ba14:	03db      	lsls	r3, r3, #15
 800ba16:	4930      	ldr	r1, [pc, #192]	; (800bad8 <HAL_RCC_OscConfig+0x28c>)
 800ba18:	4313      	orrs	r3, r2
 800ba1a:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800ba1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba1e:	2b00      	cmp	r3, #0
 800ba20:	d10a      	bne.n	800ba38 <HAL_RCC_OscConfig+0x1ec>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba26:	4618      	mov	r0, r3
 800ba28:	f001 f96e 	bl	800cd08 <RCC_SetFlashLatencyFromMSIRange>
 800ba2c:	4603      	mov	r3, r0
 800ba2e:	2b00      	cmp	r3, #0
 800ba30:	d002      	beq.n	800ba38 <HAL_RCC_OscConfig+0x1ec>
            {
              return HAL_ERROR;
 800ba32:	2301      	movs	r3, #1
 800ba34:	f000 bdda 	b.w	800c5ec <HAL_RCC_OscConfig+0xda0>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 800ba38:	f001 f8d8 	bl	800cbec <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800ba3c:	4b27      	ldr	r3, [pc, #156]	; (800badc <HAL_RCC_OscConfig+0x290>)
 800ba3e:	681b      	ldr	r3, [r3, #0]
 800ba40:	4618      	mov	r0, r3
 800ba42:	f7fa fe91 	bl	8006768 <HAL_InitTick>
 800ba46:	4603      	mov	r3, r0
 800ba48:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (status != HAL_OK)
 800ba4c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ba50:	2b00      	cmp	r3, #0
 800ba52:	f000 808a 	beq.w	800bb6a <HAL_RCC_OscConfig+0x31e>
        {
          return status;
 800ba56:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ba5a:	f000 bdc7 	b.w	800c5ec <HAL_RCC_OscConfig+0xda0>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	69db      	ldr	r3, [r3, #28]
 800ba62:	2b00      	cmp	r3, #0
 800ba64:	d066      	beq.n	800bb34 <HAL_RCC_OscConfig+0x2e8>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 800ba66:	4b1c      	ldr	r3, [pc, #112]	; (800bad8 <HAL_RCC_OscConfig+0x28c>)
 800ba68:	681b      	ldr	r3, [r3, #0]
 800ba6a:	4a1b      	ldr	r2, [pc, #108]	; (800bad8 <HAL_RCC_OscConfig+0x28c>)
 800ba6c:	f043 0301 	orr.w	r3, r3, #1
 800ba70:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800ba72:	f7fb f98d 	bl	8006d90 <HAL_GetTick>
 800ba76:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 800ba78:	e009      	b.n	800ba8e <HAL_RCC_OscConfig+0x242>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800ba7a:	f7fb f989 	bl	8006d90 <HAL_GetTick>
 800ba7e:	4602      	mov	r2, r0
 800ba80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba82:	1ad3      	subs	r3, r2, r3
 800ba84:	2b02      	cmp	r3, #2
 800ba86:	d902      	bls.n	800ba8e <HAL_RCC_OscConfig+0x242>
          {
            return HAL_TIMEOUT;
 800ba88:	2303      	movs	r3, #3
 800ba8a:	f000 bdaf 	b.w	800c5ec <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 800ba8e:	4b12      	ldr	r3, [pc, #72]	; (800bad8 <HAL_RCC_OscConfig+0x28c>)
 800ba90:	681b      	ldr	r3, [r3, #0]
 800ba92:	f003 0304 	and.w	r3, r3, #4
 800ba96:	2b00      	cmp	r3, #0
 800ba98:	d0ef      	beq.n	800ba7a <HAL_RCC_OscConfig+0x22e>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 800ba9a:	4b0f      	ldr	r3, [pc, #60]	; (800bad8 <HAL_RCC_OscConfig+0x28c>)
 800ba9c:	689b      	ldr	r3, [r3, #8]
 800ba9e:	4a0e      	ldr	r2, [pc, #56]	; (800bad8 <HAL_RCC_OscConfig+0x28c>)
 800baa0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800baa4:	6093      	str	r3, [r2, #8]
 800baa6:	4b0c      	ldr	r3, [pc, #48]	; (800bad8 <HAL_RCC_OscConfig+0x28c>)
 800baa8:	689b      	ldr	r3, [r3, #8]
 800baaa:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bab2:	4909      	ldr	r1, [pc, #36]	; (800bad8 <HAL_RCC_OscConfig+0x28c>)
 800bab4:	4313      	orrs	r3, r2
 800bab6:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800babc:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 800bac0:	d30e      	bcc.n	800bae0 <HAL_RCC_OscConfig+0x294>
 800bac2:	4b05      	ldr	r3, [pc, #20]	; (800bad8 <HAL_RCC_OscConfig+0x28c>)
 800bac4:	68db      	ldr	r3, [r3, #12]
 800bac6:	f023 021f 	bic.w	r2, r3, #31
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	6a1b      	ldr	r3, [r3, #32]
 800bace:	4902      	ldr	r1, [pc, #8]	; (800bad8 <HAL_RCC_OscConfig+0x28c>)
 800bad0:	4313      	orrs	r3, r2
 800bad2:	60cb      	str	r3, [r1, #12]
 800bad4:	e04a      	b.n	800bb6c <HAL_RCC_OscConfig+0x320>
 800bad6:	bf00      	nop
 800bad8:	46020c00 	.word	0x46020c00
 800badc:	20000004 	.word	0x20000004
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bae4:	2b00      	cmp	r3, #0
 800bae6:	da0a      	bge.n	800bafe <HAL_RCC_OscConfig+0x2b2>
 800bae8:	4b9b      	ldr	r3, [pc, #620]	; (800bd58 <HAL_RCC_OscConfig+0x50c>)
 800baea:	68db      	ldr	r3, [r3, #12]
 800baec:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	6a1b      	ldr	r3, [r3, #32]
 800baf4:	015b      	lsls	r3, r3, #5
 800baf6:	4998      	ldr	r1, [pc, #608]	; (800bd58 <HAL_RCC_OscConfig+0x50c>)
 800baf8:	4313      	orrs	r3, r2
 800bafa:	60cb      	str	r3, [r1, #12]
 800bafc:	e036      	b.n	800bb6c <HAL_RCC_OscConfig+0x320>
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bb06:	d30a      	bcc.n	800bb1e <HAL_RCC_OscConfig+0x2d2>
 800bb08:	4b93      	ldr	r3, [pc, #588]	; (800bd58 <HAL_RCC_OscConfig+0x50c>)
 800bb0a:	68db      	ldr	r3, [r3, #12]
 800bb0c:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	6a1b      	ldr	r3, [r3, #32]
 800bb14:	029b      	lsls	r3, r3, #10
 800bb16:	4990      	ldr	r1, [pc, #576]	; (800bd58 <HAL_RCC_OscConfig+0x50c>)
 800bb18:	4313      	orrs	r3, r2
 800bb1a:	60cb      	str	r3, [r1, #12]
 800bb1c:	e026      	b.n	800bb6c <HAL_RCC_OscConfig+0x320>
 800bb1e:	4b8e      	ldr	r3, [pc, #568]	; (800bd58 <HAL_RCC_OscConfig+0x50c>)
 800bb20:	68db      	ldr	r3, [r3, #12]
 800bb22:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	6a1b      	ldr	r3, [r3, #32]
 800bb2a:	03db      	lsls	r3, r3, #15
 800bb2c:	498a      	ldr	r1, [pc, #552]	; (800bd58 <HAL_RCC_OscConfig+0x50c>)
 800bb2e:	4313      	orrs	r3, r2
 800bb30:	60cb      	str	r3, [r1, #12]
 800bb32:	e01b      	b.n	800bb6c <HAL_RCC_OscConfig+0x320>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 800bb34:	4b88      	ldr	r3, [pc, #544]	; (800bd58 <HAL_RCC_OscConfig+0x50c>)
 800bb36:	681b      	ldr	r3, [r3, #0]
 800bb38:	4a87      	ldr	r2, [pc, #540]	; (800bd58 <HAL_RCC_OscConfig+0x50c>)
 800bb3a:	f023 0301 	bic.w	r3, r3, #1
 800bb3e:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800bb40:	f7fb f926 	bl	8006d90 <HAL_GetTick>
 800bb44:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 800bb46:	e009      	b.n	800bb5c <HAL_RCC_OscConfig+0x310>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800bb48:	f7fb f922 	bl	8006d90 <HAL_GetTick>
 800bb4c:	4602      	mov	r2, r0
 800bb4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb50:	1ad3      	subs	r3, r2, r3
 800bb52:	2b02      	cmp	r3, #2
 800bb54:	d902      	bls.n	800bb5c <HAL_RCC_OscConfig+0x310>
          {
            return HAL_TIMEOUT;
 800bb56:	2303      	movs	r3, #3
 800bb58:	f000 bd48 	b.w	800c5ec <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 800bb5c:	4b7e      	ldr	r3, [pc, #504]	; (800bd58 <HAL_RCC_OscConfig+0x50c>)
 800bb5e:	681b      	ldr	r3, [r3, #0]
 800bb60:	f003 0304 	and.w	r3, r3, #4
 800bb64:	2b00      	cmp	r3, #0
 800bb66:	d1ef      	bne.n	800bb48 <HAL_RCC_OscConfig+0x2fc>
 800bb68:	e000      	b.n	800bb6c <HAL_RCC_OscConfig+0x320>
      if ((READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U) && (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800bb6a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	681b      	ldr	r3, [r3, #0]
 800bb70:	f003 0301 	and.w	r3, r3, #1
 800bb74:	2b00      	cmp	r3, #0
 800bb76:	f000 8094 	beq.w	800bca2 <HAL_RCC_OscConfig+0x456>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800bb7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb7c:	2b08      	cmp	r3, #8
 800bb7e:	d005      	beq.n	800bb8c <HAL_RCC_OscConfig+0x340>
 800bb80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb82:	2b0c      	cmp	r3, #12
 800bb84:	d110      	bne.n	800bba8 <HAL_RCC_OscConfig+0x35c>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800bb86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb88:	2b03      	cmp	r3, #3
 800bb8a:	d10d      	bne.n	800bba8 <HAL_RCC_OscConfig+0x35c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800bb8c:	4b72      	ldr	r3, [pc, #456]	; (800bd58 <HAL_RCC_OscConfig+0x50c>)
 800bb8e:	681b      	ldr	r3, [r3, #0]
 800bb90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bb94:	2b00      	cmp	r3, #0
 800bb96:	f000 8083 	beq.w	800bca0 <HAL_RCC_OscConfig+0x454>
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	685b      	ldr	r3, [r3, #4]
 800bb9e:	2b00      	cmp	r3, #0
 800bba0:	d17e      	bne.n	800bca0 <HAL_RCC_OscConfig+0x454>
      {
        return HAL_ERROR;
 800bba2:	2301      	movs	r3, #1
 800bba4:	f000 bd22 	b.w	800c5ec <HAL_RCC_OscConfig+0xda0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	685b      	ldr	r3, [r3, #4]
 800bbac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bbb0:	d106      	bne.n	800bbc0 <HAL_RCC_OscConfig+0x374>
 800bbb2:	4b69      	ldr	r3, [pc, #420]	; (800bd58 <HAL_RCC_OscConfig+0x50c>)
 800bbb4:	681b      	ldr	r3, [r3, #0]
 800bbb6:	4a68      	ldr	r2, [pc, #416]	; (800bd58 <HAL_RCC_OscConfig+0x50c>)
 800bbb8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800bbbc:	6013      	str	r3, [r2, #0]
 800bbbe:	e041      	b.n	800bc44 <HAL_RCC_OscConfig+0x3f8>
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	685b      	ldr	r3, [r3, #4]
 800bbc4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800bbc8:	d112      	bne.n	800bbf0 <HAL_RCC_OscConfig+0x3a4>
 800bbca:	4b63      	ldr	r3, [pc, #396]	; (800bd58 <HAL_RCC_OscConfig+0x50c>)
 800bbcc:	681b      	ldr	r3, [r3, #0]
 800bbce:	4a62      	ldr	r2, [pc, #392]	; (800bd58 <HAL_RCC_OscConfig+0x50c>)
 800bbd0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800bbd4:	6013      	str	r3, [r2, #0]
 800bbd6:	4b60      	ldr	r3, [pc, #384]	; (800bd58 <HAL_RCC_OscConfig+0x50c>)
 800bbd8:	681b      	ldr	r3, [r3, #0]
 800bbda:	4a5f      	ldr	r2, [pc, #380]	; (800bd58 <HAL_RCC_OscConfig+0x50c>)
 800bbdc:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800bbe0:	6013      	str	r3, [r2, #0]
 800bbe2:	4b5d      	ldr	r3, [pc, #372]	; (800bd58 <HAL_RCC_OscConfig+0x50c>)
 800bbe4:	681b      	ldr	r3, [r3, #0]
 800bbe6:	4a5c      	ldr	r2, [pc, #368]	; (800bd58 <HAL_RCC_OscConfig+0x50c>)
 800bbe8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800bbec:	6013      	str	r3, [r2, #0]
 800bbee:	e029      	b.n	800bc44 <HAL_RCC_OscConfig+0x3f8>
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	685b      	ldr	r3, [r3, #4]
 800bbf4:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 800bbf8:	d112      	bne.n	800bc20 <HAL_RCC_OscConfig+0x3d4>
 800bbfa:	4b57      	ldr	r3, [pc, #348]	; (800bd58 <HAL_RCC_OscConfig+0x50c>)
 800bbfc:	681b      	ldr	r3, [r3, #0]
 800bbfe:	4a56      	ldr	r2, [pc, #344]	; (800bd58 <HAL_RCC_OscConfig+0x50c>)
 800bc00:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800bc04:	6013      	str	r3, [r2, #0]
 800bc06:	4b54      	ldr	r3, [pc, #336]	; (800bd58 <HAL_RCC_OscConfig+0x50c>)
 800bc08:	681b      	ldr	r3, [r3, #0]
 800bc0a:	4a53      	ldr	r2, [pc, #332]	; (800bd58 <HAL_RCC_OscConfig+0x50c>)
 800bc0c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800bc10:	6013      	str	r3, [r2, #0]
 800bc12:	4b51      	ldr	r3, [pc, #324]	; (800bd58 <HAL_RCC_OscConfig+0x50c>)
 800bc14:	681b      	ldr	r3, [r3, #0]
 800bc16:	4a50      	ldr	r2, [pc, #320]	; (800bd58 <HAL_RCC_OscConfig+0x50c>)
 800bc18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800bc1c:	6013      	str	r3, [r2, #0]
 800bc1e:	e011      	b.n	800bc44 <HAL_RCC_OscConfig+0x3f8>
 800bc20:	4b4d      	ldr	r3, [pc, #308]	; (800bd58 <HAL_RCC_OscConfig+0x50c>)
 800bc22:	681b      	ldr	r3, [r3, #0]
 800bc24:	4a4c      	ldr	r2, [pc, #304]	; (800bd58 <HAL_RCC_OscConfig+0x50c>)
 800bc26:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800bc2a:	6013      	str	r3, [r2, #0]
 800bc2c:	4b4a      	ldr	r3, [pc, #296]	; (800bd58 <HAL_RCC_OscConfig+0x50c>)
 800bc2e:	681b      	ldr	r3, [r3, #0]
 800bc30:	4a49      	ldr	r2, [pc, #292]	; (800bd58 <HAL_RCC_OscConfig+0x50c>)
 800bc32:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800bc36:	6013      	str	r3, [r2, #0]
 800bc38:	4b47      	ldr	r3, [pc, #284]	; (800bd58 <HAL_RCC_OscConfig+0x50c>)
 800bc3a:	681b      	ldr	r3, [r3, #0]
 800bc3c:	4a46      	ldr	r2, [pc, #280]	; (800bd58 <HAL_RCC_OscConfig+0x50c>)
 800bc3e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800bc42:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	685b      	ldr	r3, [r3, #4]
 800bc48:	2b00      	cmp	r3, #0
 800bc4a:	d014      	beq.n	800bc76 <HAL_RCC_OscConfig+0x42a>
      {
        tickstart = HAL_GetTick();
 800bc4c:	f7fb f8a0 	bl	8006d90 <HAL_GetTick>
 800bc50:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800bc52:	e009      	b.n	800bc68 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800bc54:	f7fb f89c 	bl	8006d90 <HAL_GetTick>
 800bc58:	4602      	mov	r2, r0
 800bc5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc5c:	1ad3      	subs	r3, r2, r3
 800bc5e:	2b64      	cmp	r3, #100	; 0x64
 800bc60:	d902      	bls.n	800bc68 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800bc62:	2303      	movs	r3, #3
 800bc64:	f000 bcc2 	b.w	800c5ec <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800bc68:	4b3b      	ldr	r3, [pc, #236]	; (800bd58 <HAL_RCC_OscConfig+0x50c>)
 800bc6a:	681b      	ldr	r3, [r3, #0]
 800bc6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bc70:	2b00      	cmp	r3, #0
 800bc72:	d0ef      	beq.n	800bc54 <HAL_RCC_OscConfig+0x408>
 800bc74:	e015      	b.n	800bca2 <HAL_RCC_OscConfig+0x456>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 800bc76:	f7fb f88b 	bl	8006d90 <HAL_GetTick>
 800bc7a:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800bc7c:	e009      	b.n	800bc92 <HAL_RCC_OscConfig+0x446>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800bc7e:	f7fb f887 	bl	8006d90 <HAL_GetTick>
 800bc82:	4602      	mov	r2, r0
 800bc84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc86:	1ad3      	subs	r3, r2, r3
 800bc88:	2b64      	cmp	r3, #100	; 0x64
 800bc8a:	d902      	bls.n	800bc92 <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 800bc8c:	2303      	movs	r3, #3
 800bc8e:	f000 bcad 	b.w	800c5ec <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800bc92:	4b31      	ldr	r3, [pc, #196]	; (800bd58 <HAL_RCC_OscConfig+0x50c>)
 800bc94:	681b      	ldr	r3, [r3, #0]
 800bc96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bc9a:	2b00      	cmp	r3, #0
 800bc9c:	d1ef      	bne.n	800bc7e <HAL_RCC_OscConfig+0x432>
 800bc9e:	e000      	b.n	800bca2 <HAL_RCC_OscConfig+0x456>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800bca0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	681b      	ldr	r3, [r3, #0]
 800bca6:	f003 0302 	and.w	r3, r3, #2
 800bcaa:	2b00      	cmp	r3, #0
 800bcac:	d066      	beq.n	800bd7c <HAL_RCC_OscConfig+0x530>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800bcae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcb0:	2b04      	cmp	r3, #4
 800bcb2:	d005      	beq.n	800bcc0 <HAL_RCC_OscConfig+0x474>
 800bcb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcb6:	2b0c      	cmp	r3, #12
 800bcb8:	d11a      	bne.n	800bcf0 <HAL_RCC_OscConfig+0x4a4>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800bcba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bcbc:	2b02      	cmp	r3, #2
 800bcbe:	d117      	bne.n	800bcf0 <HAL_RCC_OscConfig+0x4a4>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800bcc0:	4b25      	ldr	r3, [pc, #148]	; (800bd58 <HAL_RCC_OscConfig+0x50c>)
 800bcc2:	681b      	ldr	r3, [r3, #0]
 800bcc4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800bcc8:	2b00      	cmp	r3, #0
 800bcca:	d006      	beq.n	800bcda <HAL_RCC_OscConfig+0x48e>
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	68db      	ldr	r3, [r3, #12]
 800bcd0:	2b00      	cmp	r3, #0
 800bcd2:	d102      	bne.n	800bcda <HAL_RCC_OscConfig+0x48e>
      {
        return HAL_ERROR;
 800bcd4:	2301      	movs	r3, #1
 800bcd6:	f000 bc89 	b.w	800c5ec <HAL_RCC_OscConfig+0xda0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 800bcda:	4b1f      	ldr	r3, [pc, #124]	; (800bd58 <HAL_RCC_OscConfig+0x50c>)
 800bcdc:	691b      	ldr	r3, [r3, #16]
 800bcde:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	691b      	ldr	r3, [r3, #16]
 800bce6:	041b      	lsls	r3, r3, #16
 800bce8:	491b      	ldr	r1, [pc, #108]	; (800bd58 <HAL_RCC_OscConfig+0x50c>)
 800bcea:	4313      	orrs	r3, r2
 800bcec:	610b      	str	r3, [r1, #16]
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800bcee:	e045      	b.n	800bd7c <HAL_RCC_OscConfig+0x530>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	68db      	ldr	r3, [r3, #12]
 800bcf4:	2b00      	cmp	r3, #0
 800bcf6:	d024      	beq.n	800bd42 <HAL_RCC_OscConfig+0x4f6>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 800bcf8:	4b17      	ldr	r3, [pc, #92]	; (800bd58 <HAL_RCC_OscConfig+0x50c>)
 800bcfa:	681b      	ldr	r3, [r3, #0]
 800bcfc:	4a16      	ldr	r2, [pc, #88]	; (800bd58 <HAL_RCC_OscConfig+0x50c>)
 800bcfe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bd02:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800bd04:	f7fb f844 	bl	8006d90 <HAL_GetTick>
 800bd08:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800bd0a:	e009      	b.n	800bd20 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800bd0c:	f7fb f840 	bl	8006d90 <HAL_GetTick>
 800bd10:	4602      	mov	r2, r0
 800bd12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd14:	1ad3      	subs	r3, r2, r3
 800bd16:	2b02      	cmp	r3, #2
 800bd18:	d902      	bls.n	800bd20 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 800bd1a:	2303      	movs	r3, #3
 800bd1c:	f000 bc66 	b.w	800c5ec <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800bd20:	4b0d      	ldr	r3, [pc, #52]	; (800bd58 <HAL_RCC_OscConfig+0x50c>)
 800bd22:	681b      	ldr	r3, [r3, #0]
 800bd24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800bd28:	2b00      	cmp	r3, #0
 800bd2a:	d0ef      	beq.n	800bd0c <HAL_RCC_OscConfig+0x4c0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 800bd2c:	4b0a      	ldr	r3, [pc, #40]	; (800bd58 <HAL_RCC_OscConfig+0x50c>)
 800bd2e:	691b      	ldr	r3, [r3, #16]
 800bd30:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	691b      	ldr	r3, [r3, #16]
 800bd38:	041b      	lsls	r3, r3, #16
 800bd3a:	4907      	ldr	r1, [pc, #28]	; (800bd58 <HAL_RCC_OscConfig+0x50c>)
 800bd3c:	4313      	orrs	r3, r2
 800bd3e:	610b      	str	r3, [r1, #16]
 800bd40:	e01c      	b.n	800bd7c <HAL_RCC_OscConfig+0x530>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 800bd42:	4b05      	ldr	r3, [pc, #20]	; (800bd58 <HAL_RCC_OscConfig+0x50c>)
 800bd44:	681b      	ldr	r3, [r3, #0]
 800bd46:	4a04      	ldr	r2, [pc, #16]	; (800bd58 <HAL_RCC_OscConfig+0x50c>)
 800bd48:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800bd4c:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800bd4e:	f7fb f81f 	bl	8006d90 <HAL_GetTick>
 800bd52:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800bd54:	e00c      	b.n	800bd70 <HAL_RCC_OscConfig+0x524>
 800bd56:	bf00      	nop
 800bd58:	46020c00 	.word	0x46020c00
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800bd5c:	f7fb f818 	bl	8006d90 <HAL_GetTick>
 800bd60:	4602      	mov	r2, r0
 800bd62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd64:	1ad3      	subs	r3, r2, r3
 800bd66:	2b02      	cmp	r3, #2
 800bd68:	d902      	bls.n	800bd70 <HAL_RCC_OscConfig+0x524>
          {
            return HAL_TIMEOUT;
 800bd6a:	2303      	movs	r3, #3
 800bd6c:	f000 bc3e 	b.w	800c5ec <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800bd70:	4baf      	ldr	r3, [pc, #700]	; (800c030 <HAL_RCC_OscConfig+0x7e4>)
 800bd72:	681b      	ldr	r3, [r3, #0]
 800bd74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800bd78:	2b00      	cmp	r3, #0
 800bd7a:	d1ef      	bne.n	800bd5c <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	681b      	ldr	r3, [r3, #0]
 800bd80:	f003 0308 	and.w	r3, r3, #8
 800bd84:	2b00      	cmp	r3, #0
 800bd86:	f000 80c7 	beq.w	800bf18 <HAL_RCC_OscConfig+0x6cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 800bd8a:	2300      	movs	r3, #0
 800bd8c:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800bd90:	4ba7      	ldr	r3, [pc, #668]	; (800c030 <HAL_RCC_OscConfig+0x7e4>)
 800bd92:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800bd96:	f003 0304 	and.w	r3, r3, #4
 800bd9a:	2b00      	cmp	r3, #0
 800bd9c:	d111      	bne.n	800bdc2 <HAL_RCC_OscConfig+0x576>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800bd9e:	4ba4      	ldr	r3, [pc, #656]	; (800c030 <HAL_RCC_OscConfig+0x7e4>)
 800bda0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800bda4:	4aa2      	ldr	r2, [pc, #648]	; (800c030 <HAL_RCC_OscConfig+0x7e4>)
 800bda6:	f043 0304 	orr.w	r3, r3, #4
 800bdaa:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800bdae:	4ba0      	ldr	r3, [pc, #640]	; (800c030 <HAL_RCC_OscConfig+0x7e4>)
 800bdb0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800bdb4:	f003 0304 	and.w	r3, r3, #4
 800bdb8:	617b      	str	r3, [r7, #20]
 800bdba:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 800bdbc:	2301      	movs	r3, #1
 800bdbe:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800bdc2:	4b9c      	ldr	r3, [pc, #624]	; (800c034 <HAL_RCC_OscConfig+0x7e8>)
 800bdc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bdc6:	f003 0301 	and.w	r3, r3, #1
 800bdca:	2b00      	cmp	r3, #0
 800bdcc:	d118      	bne.n	800be00 <HAL_RCC_OscConfig+0x5b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 800bdce:	4b99      	ldr	r3, [pc, #612]	; (800c034 <HAL_RCC_OscConfig+0x7e8>)
 800bdd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bdd2:	4a98      	ldr	r2, [pc, #608]	; (800c034 <HAL_RCC_OscConfig+0x7e8>)
 800bdd4:	f043 0301 	orr.w	r3, r3, #1
 800bdd8:	6293      	str	r3, [r2, #40]	; 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800bdda:	f7fa ffd9 	bl	8006d90 <HAL_GetTick>
 800bdde:	62b8      	str	r0, [r7, #40]	; 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800bde0:	e008      	b.n	800bdf4 <HAL_RCC_OscConfig+0x5a8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800bde2:	f7fa ffd5 	bl	8006d90 <HAL_GetTick>
 800bde6:	4602      	mov	r2, r0
 800bde8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdea:	1ad3      	subs	r3, r2, r3
 800bdec:	2b02      	cmp	r3, #2
 800bdee:	d901      	bls.n	800bdf4 <HAL_RCC_OscConfig+0x5a8>
        {
          return HAL_TIMEOUT;
 800bdf0:	2303      	movs	r3, #3
 800bdf2:	e3fb      	b.n	800c5ec <HAL_RCC_OscConfig+0xda0>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800bdf4:	4b8f      	ldr	r3, [pc, #572]	; (800c034 <HAL_RCC_OscConfig+0x7e8>)
 800bdf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bdf8:	f003 0301 	and.w	r3, r3, #1
 800bdfc:	2b00      	cmp	r3, #0
 800bdfe:	d0f0      	beq.n	800bde2 <HAL_RCC_OscConfig+0x596>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	695b      	ldr	r3, [r3, #20]
 800be04:	2b00      	cmp	r3, #0
 800be06:	d05f      	beq.n	800bec8 <HAL_RCC_OscConfig+0x67c>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 800be08:	4b89      	ldr	r3, [pc, #548]	; (800c030 <HAL_RCC_OscConfig+0x7e4>)
 800be0a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800be0e:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	699a      	ldr	r2, [r3, #24]
 800be14:	6a3b      	ldr	r3, [r7, #32]
 800be16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800be1a:	429a      	cmp	r2, r3
 800be1c:	d037      	beq.n	800be8e <HAL_RCC_OscConfig+0x642>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 800be1e:	6a3b      	ldr	r3, [r7, #32]
 800be20:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800be24:	2b00      	cmp	r3, #0
 800be26:	d006      	beq.n	800be36 <HAL_RCC_OscConfig+0x5ea>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 800be28:	6a3b      	ldr	r3, [r7, #32]
 800be2a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 800be2e:	2b00      	cmp	r3, #0
 800be30:	d101      	bne.n	800be36 <HAL_RCC_OscConfig+0x5ea>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 800be32:	2301      	movs	r3, #1
 800be34:	e3da      	b.n	800c5ec <HAL_RCC_OscConfig+0xda0>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 800be36:	6a3b      	ldr	r3, [r7, #32]
 800be38:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800be3c:	2b00      	cmp	r3, #0
 800be3e:	d01b      	beq.n	800be78 <HAL_RCC_OscConfig+0x62c>
        {
          __HAL_RCC_LSI_DISABLE();
 800be40:	4b7b      	ldr	r3, [pc, #492]	; (800c030 <HAL_RCC_OscConfig+0x7e4>)
 800be42:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800be46:	4a7a      	ldr	r2, [pc, #488]	; (800c030 <HAL_RCC_OscConfig+0x7e4>)
 800be48:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 800be4c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

          tickstart = HAL_GetTick();
 800be50:	f7fa ff9e 	bl	8006d90 <HAL_GetTick>
 800be54:	62b8      	str	r0, [r7, #40]	; 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800be56:	e008      	b.n	800be6a <HAL_RCC_OscConfig+0x61e>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800be58:	f7fa ff9a 	bl	8006d90 <HAL_GetTick>
 800be5c:	4602      	mov	r2, r0
 800be5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be60:	1ad3      	subs	r3, r2, r3
 800be62:	2b02      	cmp	r3, #2
 800be64:	d901      	bls.n	800be6a <HAL_RCC_OscConfig+0x61e>
            {
              return HAL_TIMEOUT;
 800be66:	2303      	movs	r3, #3
 800be68:	e3c0      	b.n	800c5ec <HAL_RCC_OscConfig+0xda0>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800be6a:	4b71      	ldr	r3, [pc, #452]	; (800c030 <HAL_RCC_OscConfig+0x7e4>)
 800be6c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800be70:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800be74:	2b00      	cmp	r3, #0
 800be76:	d1ef      	bne.n	800be58 <HAL_RCC_OscConfig+0x60c>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 800be78:	4b6d      	ldr	r3, [pc, #436]	; (800c030 <HAL_RCC_OscConfig+0x7e4>)
 800be7a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800be7e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	699b      	ldr	r3, [r3, #24]
 800be86:	496a      	ldr	r1, [pc, #424]	; (800c030 <HAL_RCC_OscConfig+0x7e4>)
 800be88:	4313      	orrs	r3, r2
 800be8a:	f8c1 30f0 	str.w	r3, [r1, #240]	; 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 800be8e:	4b68      	ldr	r3, [pc, #416]	; (800c030 <HAL_RCC_OscConfig+0x7e4>)
 800be90:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800be94:	4a66      	ldr	r2, [pc, #408]	; (800c030 <HAL_RCC_OscConfig+0x7e4>)
 800be96:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800be9a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      tickstart = HAL_GetTick();
 800be9e:	f7fa ff77 	bl	8006d90 <HAL_GetTick>
 800bea2:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 800bea4:	e008      	b.n	800beb8 <HAL_RCC_OscConfig+0x66c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800bea6:	f7fa ff73 	bl	8006d90 <HAL_GetTick>
 800beaa:	4602      	mov	r2, r0
 800beac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800beae:	1ad3      	subs	r3, r2, r3
 800beb0:	2b02      	cmp	r3, #2
 800beb2:	d901      	bls.n	800beb8 <HAL_RCC_OscConfig+0x66c>
        {
          return HAL_TIMEOUT;
 800beb4:	2303      	movs	r3, #3
 800beb6:	e399      	b.n	800c5ec <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 800beb8:	4b5d      	ldr	r3, [pc, #372]	; (800c030 <HAL_RCC_OscConfig+0x7e4>)
 800beba:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800bebe:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bec2:	2b00      	cmp	r3, #0
 800bec4:	d0ef      	beq.n	800bea6 <HAL_RCC_OscConfig+0x65a>
 800bec6:	e01b      	b.n	800bf00 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 800bec8:	4b59      	ldr	r3, [pc, #356]	; (800c030 <HAL_RCC_OscConfig+0x7e4>)
 800beca:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800bece:	4a58      	ldr	r2, [pc, #352]	; (800c030 <HAL_RCC_OscConfig+0x7e4>)
 800bed0:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 800bed4:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      tickstart = HAL_GetTick();
 800bed8:	f7fa ff5a 	bl	8006d90 <HAL_GetTick>
 800bedc:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800bede:	e008      	b.n	800bef2 <HAL_RCC_OscConfig+0x6a6>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800bee0:	f7fa ff56 	bl	8006d90 <HAL_GetTick>
 800bee4:	4602      	mov	r2, r0
 800bee6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bee8:	1ad3      	subs	r3, r2, r3
 800beea:	2b02      	cmp	r3, #2
 800beec:	d901      	bls.n	800bef2 <HAL_RCC_OscConfig+0x6a6>
        {
          return HAL_TIMEOUT;
 800beee:	2303      	movs	r3, #3
 800bef0:	e37c      	b.n	800c5ec <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800bef2:	4b4f      	ldr	r3, [pc, #316]	; (800c030 <HAL_RCC_OscConfig+0x7e4>)
 800bef4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800bef8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800befc:	2b00      	cmp	r3, #0
 800befe:	d1ef      	bne.n	800bee0 <HAL_RCC_OscConfig+0x694>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800bf00:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800bf04:	2b01      	cmp	r3, #1
 800bf06:	d107      	bne.n	800bf18 <HAL_RCC_OscConfig+0x6cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800bf08:	4b49      	ldr	r3, [pc, #292]	; (800c030 <HAL_RCC_OscConfig+0x7e4>)
 800bf0a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800bf0e:	4a48      	ldr	r2, [pc, #288]	; (800c030 <HAL_RCC_OscConfig+0x7e4>)
 800bf10:	f023 0304 	bic.w	r3, r3, #4
 800bf14:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	681b      	ldr	r3, [r3, #0]
 800bf1c:	f003 0304 	and.w	r3, r3, #4
 800bf20:	2b00      	cmp	r3, #0
 800bf22:	f000 8112 	beq.w	800c14a <HAL_RCC_OscConfig+0x8fe>
  {
    FlagStatus pwrclkchanged = RESET;
 800bf26:	2300      	movs	r3, #0
 800bf28:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800bf2c:	4b40      	ldr	r3, [pc, #256]	; (800c030 <HAL_RCC_OscConfig+0x7e4>)
 800bf2e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800bf32:	f003 0304 	and.w	r3, r3, #4
 800bf36:	2b00      	cmp	r3, #0
 800bf38:	d111      	bne.n	800bf5e <HAL_RCC_OscConfig+0x712>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800bf3a:	4b3d      	ldr	r3, [pc, #244]	; (800c030 <HAL_RCC_OscConfig+0x7e4>)
 800bf3c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800bf40:	4a3b      	ldr	r2, [pc, #236]	; (800c030 <HAL_RCC_OscConfig+0x7e4>)
 800bf42:	f043 0304 	orr.w	r3, r3, #4
 800bf46:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800bf4a:	4b39      	ldr	r3, [pc, #228]	; (800c030 <HAL_RCC_OscConfig+0x7e4>)
 800bf4c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800bf50:	f003 0304 	and.w	r3, r3, #4
 800bf54:	613b      	str	r3, [r7, #16]
 800bf56:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 800bf58:	2301      	movs	r3, #1
 800bf5a:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800bf5e:	4b35      	ldr	r3, [pc, #212]	; (800c034 <HAL_RCC_OscConfig+0x7e8>)
 800bf60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bf62:	f003 0301 	and.w	r3, r3, #1
 800bf66:	2b00      	cmp	r3, #0
 800bf68:	d118      	bne.n	800bf9c <HAL_RCC_OscConfig+0x750>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 800bf6a:	4b32      	ldr	r3, [pc, #200]	; (800c034 <HAL_RCC_OscConfig+0x7e8>)
 800bf6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bf6e:	4a31      	ldr	r2, [pc, #196]	; (800c034 <HAL_RCC_OscConfig+0x7e8>)
 800bf70:	f043 0301 	orr.w	r3, r3, #1
 800bf74:	6293      	str	r3, [r2, #40]	; 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800bf76:	f7fa ff0b 	bl	8006d90 <HAL_GetTick>
 800bf7a:	62b8      	str	r0, [r7, #40]	; 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800bf7c:	e008      	b.n	800bf90 <HAL_RCC_OscConfig+0x744>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800bf7e:	f7fa ff07 	bl	8006d90 <HAL_GetTick>
 800bf82:	4602      	mov	r2, r0
 800bf84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf86:	1ad3      	subs	r3, r2, r3
 800bf88:	2b02      	cmp	r3, #2
 800bf8a:	d901      	bls.n	800bf90 <HAL_RCC_OscConfig+0x744>
        {
          return HAL_TIMEOUT;
 800bf8c:	2303      	movs	r3, #3
 800bf8e:	e32d      	b.n	800c5ec <HAL_RCC_OscConfig+0xda0>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800bf90:	4b28      	ldr	r3, [pc, #160]	; (800c034 <HAL_RCC_OscConfig+0x7e8>)
 800bf92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bf94:	f003 0301 	and.w	r3, r3, #1
 800bf98:	2b00      	cmp	r3, #0
 800bf9a:	d0f0      	beq.n	800bf7e <HAL_RCC_OscConfig+0x732>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	689b      	ldr	r3, [r3, #8]
 800bfa0:	f003 0301 	and.w	r3, r3, #1
 800bfa4:	2b00      	cmp	r3, #0
 800bfa6:	d01f      	beq.n	800bfe8 <HAL_RCC_OscConfig+0x79c>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	689b      	ldr	r3, [r3, #8]
 800bfac:	f003 0304 	and.w	r3, r3, #4
 800bfb0:	2b00      	cmp	r3, #0
 800bfb2:	d010      	beq.n	800bfd6 <HAL_RCC_OscConfig+0x78a>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800bfb4:	4b1e      	ldr	r3, [pc, #120]	; (800c030 <HAL_RCC_OscConfig+0x7e4>)
 800bfb6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800bfba:	4a1d      	ldr	r2, [pc, #116]	; (800c030 <HAL_RCC_OscConfig+0x7e4>)
 800bfbc:	f043 0304 	orr.w	r3, r3, #4
 800bfc0:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800bfc4:	4b1a      	ldr	r3, [pc, #104]	; (800c030 <HAL_RCC_OscConfig+0x7e4>)
 800bfc6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800bfca:	4a19      	ldr	r2, [pc, #100]	; (800c030 <HAL_RCC_OscConfig+0x7e4>)
 800bfcc:	f043 0301 	orr.w	r3, r3, #1
 800bfd0:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800bfd4:	e018      	b.n	800c008 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800bfd6:	4b16      	ldr	r3, [pc, #88]	; (800c030 <HAL_RCC_OscConfig+0x7e4>)
 800bfd8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800bfdc:	4a14      	ldr	r2, [pc, #80]	; (800c030 <HAL_RCC_OscConfig+0x7e4>)
 800bfde:	f043 0301 	orr.w	r3, r3, #1
 800bfe2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800bfe6:	e00f      	b.n	800c008 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800bfe8:	4b11      	ldr	r3, [pc, #68]	; (800c030 <HAL_RCC_OscConfig+0x7e4>)
 800bfea:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800bfee:	4a10      	ldr	r2, [pc, #64]	; (800c030 <HAL_RCC_OscConfig+0x7e4>)
 800bff0:	f023 0301 	bic.w	r3, r3, #1
 800bff4:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800bff8:	4b0d      	ldr	r3, [pc, #52]	; (800c030 <HAL_RCC_OscConfig+0x7e4>)
 800bffa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800bffe:	4a0c      	ldr	r2, [pc, #48]	; (800c030 <HAL_RCC_OscConfig+0x7e4>)
 800c000:	f023 0304 	bic.w	r3, r3, #4
 800c004:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	689b      	ldr	r3, [r3, #8]
 800c00c:	2b00      	cmp	r3, #0
 800c00e:	d058      	beq.n	800c0c2 <HAL_RCC_OscConfig+0x876>
    {
      tickstart = HAL_GetTick();
 800c010:	f7fa febe 	bl	8006d90 <HAL_GetTick>
 800c014:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800c016:	e00f      	b.n	800c038 <HAL_RCC_OscConfig+0x7ec>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c018:	f7fa feba 	bl	8006d90 <HAL_GetTick>
 800c01c:	4602      	mov	r2, r0
 800c01e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c020:	1ad3      	subs	r3, r2, r3
 800c022:	f241 3288 	movw	r2, #5000	; 0x1388
 800c026:	4293      	cmp	r3, r2
 800c028:	d906      	bls.n	800c038 <HAL_RCC_OscConfig+0x7ec>
        {
          return HAL_TIMEOUT;
 800c02a:	2303      	movs	r3, #3
 800c02c:	e2de      	b.n	800c5ec <HAL_RCC_OscConfig+0xda0>
 800c02e:	bf00      	nop
 800c030:	46020c00 	.word	0x46020c00
 800c034:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800c038:	4b9c      	ldr	r3, [pc, #624]	; (800c2ac <HAL_RCC_OscConfig+0xa60>)
 800c03a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800c03e:	f003 0302 	and.w	r3, r3, #2
 800c042:	2b00      	cmp	r3, #0
 800c044:	d0e8      	beq.n	800c018 <HAL_RCC_OscConfig+0x7cc>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	689b      	ldr	r3, [r3, #8]
 800c04a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c04e:	2b00      	cmp	r3, #0
 800c050:	d01b      	beq.n	800c08a <HAL_RCC_OscConfig+0x83e>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800c052:	4b96      	ldr	r3, [pc, #600]	; (800c2ac <HAL_RCC_OscConfig+0xa60>)
 800c054:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800c058:	4a94      	ldr	r2, [pc, #592]	; (800c2ac <HAL_RCC_OscConfig+0xa60>)
 800c05a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c05e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800c062:	e00a      	b.n	800c07a <HAL_RCC_OscConfig+0x82e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c064:	f7fa fe94 	bl	8006d90 <HAL_GetTick>
 800c068:	4602      	mov	r2, r0
 800c06a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c06c:	1ad3      	subs	r3, r2, r3
 800c06e:	f241 3288 	movw	r2, #5000	; 0x1388
 800c072:	4293      	cmp	r3, r2
 800c074:	d901      	bls.n	800c07a <HAL_RCC_OscConfig+0x82e>
          {
            return HAL_TIMEOUT;
 800c076:	2303      	movs	r3, #3
 800c078:	e2b8      	b.n	800c5ec <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800c07a:	4b8c      	ldr	r3, [pc, #560]	; (800c2ac <HAL_RCC_OscConfig+0xa60>)
 800c07c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800c080:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c084:	2b00      	cmp	r3, #0
 800c086:	d0ed      	beq.n	800c064 <HAL_RCC_OscConfig+0x818>
 800c088:	e053      	b.n	800c132 <HAL_RCC_OscConfig+0x8e6>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800c08a:	4b88      	ldr	r3, [pc, #544]	; (800c2ac <HAL_RCC_OscConfig+0xa60>)
 800c08c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800c090:	4a86      	ldr	r2, [pc, #536]	; (800c2ac <HAL_RCC_OscConfig+0xa60>)
 800c092:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c096:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800c09a:	e00a      	b.n	800c0b2 <HAL_RCC_OscConfig+0x866>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c09c:	f7fa fe78 	bl	8006d90 <HAL_GetTick>
 800c0a0:	4602      	mov	r2, r0
 800c0a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0a4:	1ad3      	subs	r3, r2, r3
 800c0a6:	f241 3288 	movw	r2, #5000	; 0x1388
 800c0aa:	4293      	cmp	r3, r2
 800c0ac:	d901      	bls.n	800c0b2 <HAL_RCC_OscConfig+0x866>
          {
            return HAL_TIMEOUT;
 800c0ae:	2303      	movs	r3, #3
 800c0b0:	e29c      	b.n	800c5ec <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800c0b2:	4b7e      	ldr	r3, [pc, #504]	; (800c2ac <HAL_RCC_OscConfig+0xa60>)
 800c0b4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800c0b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c0bc:	2b00      	cmp	r3, #0
 800c0be:	d1ed      	bne.n	800c09c <HAL_RCC_OscConfig+0x850>
 800c0c0:	e037      	b.n	800c132 <HAL_RCC_OscConfig+0x8e6>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 800c0c2:	f7fa fe65 	bl	8006d90 <HAL_GetTick>
 800c0c6:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800c0c8:	e00a      	b.n	800c0e0 <HAL_RCC_OscConfig+0x894>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c0ca:	f7fa fe61 	bl	8006d90 <HAL_GetTick>
 800c0ce:	4602      	mov	r2, r0
 800c0d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0d2:	1ad3      	subs	r3, r2, r3
 800c0d4:	f241 3288 	movw	r2, #5000	; 0x1388
 800c0d8:	4293      	cmp	r3, r2
 800c0da:	d901      	bls.n	800c0e0 <HAL_RCC_OscConfig+0x894>
        {
          return HAL_TIMEOUT;
 800c0dc:	2303      	movs	r3, #3
 800c0de:	e285      	b.n	800c5ec <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800c0e0:	4b72      	ldr	r3, [pc, #456]	; (800c2ac <HAL_RCC_OscConfig+0xa60>)
 800c0e2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800c0e6:	f003 0302 	and.w	r3, r3, #2
 800c0ea:	2b00      	cmp	r3, #0
 800c0ec:	d1ed      	bne.n	800c0ca <HAL_RCC_OscConfig+0x87e>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 800c0ee:	4b6f      	ldr	r3, [pc, #444]	; (800c2ac <HAL_RCC_OscConfig+0xa60>)
 800c0f0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800c0f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c0f8:	2b00      	cmp	r3, #0
 800c0fa:	d01a      	beq.n	800c132 <HAL_RCC_OscConfig+0x8e6>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800c0fc:	4b6b      	ldr	r3, [pc, #428]	; (800c2ac <HAL_RCC_OscConfig+0xa60>)
 800c0fe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800c102:	4a6a      	ldr	r2, [pc, #424]	; (800c2ac <HAL_RCC_OscConfig+0xa60>)
 800c104:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c108:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800c10c:	e00a      	b.n	800c124 <HAL_RCC_OscConfig+0x8d8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c10e:	f7fa fe3f 	bl	8006d90 <HAL_GetTick>
 800c112:	4602      	mov	r2, r0
 800c114:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c116:	1ad3      	subs	r3, r2, r3
 800c118:	f241 3288 	movw	r2, #5000	; 0x1388
 800c11c:	4293      	cmp	r3, r2
 800c11e:	d901      	bls.n	800c124 <HAL_RCC_OscConfig+0x8d8>
          {
            return HAL_TIMEOUT;
 800c120:	2303      	movs	r3, #3
 800c122:	e263      	b.n	800c5ec <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800c124:	4b61      	ldr	r3, [pc, #388]	; (800c2ac <HAL_RCC_OscConfig+0xa60>)
 800c126:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800c12a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c12e:	2b00      	cmp	r3, #0
 800c130:	d1ed      	bne.n	800c10e <HAL_RCC_OscConfig+0x8c2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800c132:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800c136:	2b01      	cmp	r3, #1
 800c138:	d107      	bne.n	800c14a <HAL_RCC_OscConfig+0x8fe>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800c13a:	4b5c      	ldr	r3, [pc, #368]	; (800c2ac <HAL_RCC_OscConfig+0xa60>)
 800c13c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c140:	4a5a      	ldr	r2, [pc, #360]	; (800c2ac <HAL_RCC_OscConfig+0xa60>)
 800c142:	f023 0304 	bic.w	r3, r3, #4
 800c146:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	681b      	ldr	r3, [r3, #0]
 800c14e:	f003 0320 	and.w	r3, r3, #32
 800c152:	2b00      	cmp	r3, #0
 800c154:	d036      	beq.n	800c1c4 <HAL_RCC_OscConfig+0x978>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c15a:	2b00      	cmp	r3, #0
 800c15c:	d019      	beq.n	800c192 <HAL_RCC_OscConfig+0x946>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 800c15e:	4b53      	ldr	r3, [pc, #332]	; (800c2ac <HAL_RCC_OscConfig+0xa60>)
 800c160:	681b      	ldr	r3, [r3, #0]
 800c162:	4a52      	ldr	r2, [pc, #328]	; (800c2ac <HAL_RCC_OscConfig+0xa60>)
 800c164:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800c168:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800c16a:	f7fa fe11 	bl	8006d90 <HAL_GetTick>
 800c16e:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800c170:	e008      	b.n	800c184 <HAL_RCC_OscConfig+0x938>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800c172:	f7fa fe0d 	bl	8006d90 <HAL_GetTick>
 800c176:	4602      	mov	r2, r0
 800c178:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c17a:	1ad3      	subs	r3, r2, r3
 800c17c:	2b02      	cmp	r3, #2
 800c17e:	d901      	bls.n	800c184 <HAL_RCC_OscConfig+0x938>
        {
          return HAL_TIMEOUT;
 800c180:	2303      	movs	r3, #3
 800c182:	e233      	b.n	800c5ec <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800c184:	4b49      	ldr	r3, [pc, #292]	; (800c2ac <HAL_RCC_OscConfig+0xa60>)
 800c186:	681b      	ldr	r3, [r3, #0]
 800c188:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800c18c:	2b00      	cmp	r3, #0
 800c18e:	d0f0      	beq.n	800c172 <HAL_RCC_OscConfig+0x926>
 800c190:	e018      	b.n	800c1c4 <HAL_RCC_OscConfig+0x978>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 800c192:	4b46      	ldr	r3, [pc, #280]	; (800c2ac <HAL_RCC_OscConfig+0xa60>)
 800c194:	681b      	ldr	r3, [r3, #0]
 800c196:	4a45      	ldr	r2, [pc, #276]	; (800c2ac <HAL_RCC_OscConfig+0xa60>)
 800c198:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c19c:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800c19e:	f7fa fdf7 	bl	8006d90 <HAL_GetTick>
 800c1a2:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800c1a4:	e008      	b.n	800c1b8 <HAL_RCC_OscConfig+0x96c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800c1a6:	f7fa fdf3 	bl	8006d90 <HAL_GetTick>
 800c1aa:	4602      	mov	r2, r0
 800c1ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1ae:	1ad3      	subs	r3, r2, r3
 800c1b0:	2b02      	cmp	r3, #2
 800c1b2:	d901      	bls.n	800c1b8 <HAL_RCC_OscConfig+0x96c>
        {
          return HAL_TIMEOUT;
 800c1b4:	2303      	movs	r3, #3
 800c1b6:	e219      	b.n	800c5ec <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800c1b8:	4b3c      	ldr	r3, [pc, #240]	; (800c2ac <HAL_RCC_OscConfig+0xa60>)
 800c1ba:	681b      	ldr	r3, [r3, #0]
 800c1bc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800c1c0:	2b00      	cmp	r3, #0
 800c1c2:	d1f0      	bne.n	800c1a6 <HAL_RCC_OscConfig+0x95a>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	681b      	ldr	r3, [r3, #0]
 800c1c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c1cc:	2b00      	cmp	r3, #0
 800c1ce:	d036      	beq.n	800c23e <HAL_RCC_OscConfig+0x9f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c1d4:	2b00      	cmp	r3, #0
 800c1d6:	d019      	beq.n	800c20c <HAL_RCC_OscConfig+0x9c0>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 800c1d8:	4b34      	ldr	r3, [pc, #208]	; (800c2ac <HAL_RCC_OscConfig+0xa60>)
 800c1da:	681b      	ldr	r3, [r3, #0]
 800c1dc:	4a33      	ldr	r2, [pc, #204]	; (800c2ac <HAL_RCC_OscConfig+0xa60>)
 800c1de:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800c1e2:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800c1e4:	f7fa fdd4 	bl	8006d90 <HAL_GetTick>
 800c1e8:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 800c1ea:	e008      	b.n	800c1fe <HAL_RCC_OscConfig+0x9b2>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 800c1ec:	f7fa fdd0 	bl	8006d90 <HAL_GetTick>
 800c1f0:	4602      	mov	r2, r0
 800c1f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1f4:	1ad3      	subs	r3, r2, r3
 800c1f6:	2b02      	cmp	r3, #2
 800c1f8:	d901      	bls.n	800c1fe <HAL_RCC_OscConfig+0x9b2>
        {
          return HAL_TIMEOUT;
 800c1fa:	2303      	movs	r3, #3
 800c1fc:	e1f6      	b.n	800c5ec <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 800c1fe:	4b2b      	ldr	r3, [pc, #172]	; (800c2ac <HAL_RCC_OscConfig+0xa60>)
 800c200:	681b      	ldr	r3, [r3, #0]
 800c202:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c206:	2b00      	cmp	r3, #0
 800c208:	d0f0      	beq.n	800c1ec <HAL_RCC_OscConfig+0x9a0>
 800c20a:	e018      	b.n	800c23e <HAL_RCC_OscConfig+0x9f2>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 800c20c:	4b27      	ldr	r3, [pc, #156]	; (800c2ac <HAL_RCC_OscConfig+0xa60>)
 800c20e:	681b      	ldr	r3, [r3, #0]
 800c210:	4a26      	ldr	r2, [pc, #152]	; (800c2ac <HAL_RCC_OscConfig+0xa60>)
 800c212:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c216:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800c218:	f7fa fdba 	bl	8006d90 <HAL_GetTick>
 800c21c:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 800c21e:	e008      	b.n	800c232 <HAL_RCC_OscConfig+0x9e6>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 800c220:	f7fa fdb6 	bl	8006d90 <HAL_GetTick>
 800c224:	4602      	mov	r2, r0
 800c226:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c228:	1ad3      	subs	r3, r2, r3
 800c22a:	2b02      	cmp	r3, #2
 800c22c:	d901      	bls.n	800c232 <HAL_RCC_OscConfig+0x9e6>
        {
          return HAL_TIMEOUT;
 800c22e:	2303      	movs	r3, #3
 800c230:	e1dc      	b.n	800c5ec <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 800c232:	4b1e      	ldr	r3, [pc, #120]	; (800c2ac <HAL_RCC_OscConfig+0xa60>)
 800c234:	681b      	ldr	r3, [r3, #0]
 800c236:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c23a:	2b00      	cmp	r3, #0
 800c23c:	d1f0      	bne.n	800c220 <HAL_RCC_OscConfig+0x9d4>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	681b      	ldr	r3, [r3, #0]
 800c242:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c246:	2b00      	cmp	r3, #0
 800c248:	d07f      	beq.n	800c34a <HAL_RCC_OscConfig+0xafe>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c24e:	2b00      	cmp	r3, #0
 800c250:	d062      	beq.n	800c318 <HAL_RCC_OscConfig+0xacc>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 800c252:	4b16      	ldr	r3, [pc, #88]	; (800c2ac <HAL_RCC_OscConfig+0xa60>)
 800c254:	689b      	ldr	r3, [r3, #8]
 800c256:	4a15      	ldr	r2, [pc, #84]	; (800c2ac <HAL_RCC_OscConfig+0xa60>)
 800c258:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800c25c:	6093      	str	r3, [r2, #8]
 800c25e:	4b13      	ldr	r3, [pc, #76]	; (800c2ac <HAL_RCC_OscConfig+0xa60>)
 800c260:	689b      	ldr	r3, [r3, #8]
 800c262:	f023 6270 	bic.w	r2, r3, #251658240	; 0xf000000
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c26a:	4910      	ldr	r1, [pc, #64]	; (800c2ac <HAL_RCC_OscConfig+0xa60>)
 800c26c:	4313      	orrs	r3, r2
 800c26e:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c274:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 800c278:	d309      	bcc.n	800c28e <HAL_RCC_OscConfig+0xa42>
 800c27a:	4b0c      	ldr	r3, [pc, #48]	; (800c2ac <HAL_RCC_OscConfig+0xa60>)
 800c27c:	68db      	ldr	r3, [r3, #12]
 800c27e:	f023 021f 	bic.w	r2, r3, #31
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	6a1b      	ldr	r3, [r3, #32]
 800c286:	4909      	ldr	r1, [pc, #36]	; (800c2ac <HAL_RCC_OscConfig+0xa60>)
 800c288:	4313      	orrs	r3, r2
 800c28a:	60cb      	str	r3, [r1, #12]
 800c28c:	e02a      	b.n	800c2e4 <HAL_RCC_OscConfig+0xa98>
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c292:	2b00      	cmp	r3, #0
 800c294:	da0c      	bge.n	800c2b0 <HAL_RCC_OscConfig+0xa64>
 800c296:	4b05      	ldr	r3, [pc, #20]	; (800c2ac <HAL_RCC_OscConfig+0xa60>)
 800c298:	68db      	ldr	r3, [r3, #12]
 800c29a:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 800c29e:	687b      	ldr	r3, [r7, #4]
 800c2a0:	6a1b      	ldr	r3, [r3, #32]
 800c2a2:	015b      	lsls	r3, r3, #5
 800c2a4:	4901      	ldr	r1, [pc, #4]	; (800c2ac <HAL_RCC_OscConfig+0xa60>)
 800c2a6:	4313      	orrs	r3, r2
 800c2a8:	60cb      	str	r3, [r1, #12]
 800c2aa:	e01b      	b.n	800c2e4 <HAL_RCC_OscConfig+0xa98>
 800c2ac:	46020c00 	.word	0x46020c00
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c2b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c2b8:	d30a      	bcc.n	800c2d0 <HAL_RCC_OscConfig+0xa84>
 800c2ba:	4ba5      	ldr	r3, [pc, #660]	; (800c550 <HAL_RCC_OscConfig+0xd04>)
 800c2bc:	68db      	ldr	r3, [r3, #12]
 800c2be:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	6a1b      	ldr	r3, [r3, #32]
 800c2c6:	029b      	lsls	r3, r3, #10
 800c2c8:	49a1      	ldr	r1, [pc, #644]	; (800c550 <HAL_RCC_OscConfig+0xd04>)
 800c2ca:	4313      	orrs	r3, r2
 800c2cc:	60cb      	str	r3, [r1, #12]
 800c2ce:	e009      	b.n	800c2e4 <HAL_RCC_OscConfig+0xa98>
 800c2d0:	4b9f      	ldr	r3, [pc, #636]	; (800c550 <HAL_RCC_OscConfig+0xd04>)
 800c2d2:	68db      	ldr	r3, [r3, #12]
 800c2d4:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	6a1b      	ldr	r3, [r3, #32]
 800c2dc:	03db      	lsls	r3, r3, #15
 800c2de:	499c      	ldr	r1, [pc, #624]	; (800c550 <HAL_RCC_OscConfig+0xd04>)
 800c2e0:	4313      	orrs	r3, r2
 800c2e2:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 800c2e4:	4b9a      	ldr	r3, [pc, #616]	; (800c550 <HAL_RCC_OscConfig+0xd04>)
 800c2e6:	681b      	ldr	r3, [r3, #0]
 800c2e8:	4a99      	ldr	r2, [pc, #612]	; (800c550 <HAL_RCC_OscConfig+0xd04>)
 800c2ea:	f043 0310 	orr.w	r3, r3, #16
 800c2ee:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800c2f0:	f7fa fd4e 	bl	8006d90 <HAL_GetTick>
 800c2f4:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 800c2f6:	e008      	b.n	800c30a <HAL_RCC_OscConfig+0xabe>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 800c2f8:	f7fa fd4a 	bl	8006d90 <HAL_GetTick>
 800c2fc:	4602      	mov	r2, r0
 800c2fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c300:	1ad3      	subs	r3, r2, r3
 800c302:	2b02      	cmp	r3, #2
 800c304:	d901      	bls.n	800c30a <HAL_RCC_OscConfig+0xabe>
        {
          return HAL_TIMEOUT;
 800c306:	2303      	movs	r3, #3
 800c308:	e170      	b.n	800c5ec <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 800c30a:	4b91      	ldr	r3, [pc, #580]	; (800c550 <HAL_RCC_OscConfig+0xd04>)
 800c30c:	681b      	ldr	r3, [r3, #0]
 800c30e:	f003 0320 	and.w	r3, r3, #32
 800c312:	2b00      	cmp	r3, #0
 800c314:	d0f0      	beq.n	800c2f8 <HAL_RCC_OscConfig+0xaac>
 800c316:	e018      	b.n	800c34a <HAL_RCC_OscConfig+0xafe>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 800c318:	4b8d      	ldr	r3, [pc, #564]	; (800c550 <HAL_RCC_OscConfig+0xd04>)
 800c31a:	681b      	ldr	r3, [r3, #0]
 800c31c:	4a8c      	ldr	r2, [pc, #560]	; (800c550 <HAL_RCC_OscConfig+0xd04>)
 800c31e:	f023 0310 	bic.w	r3, r3, #16
 800c322:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800c324:	f7fa fd34 	bl	8006d90 <HAL_GetTick>
 800c328:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 800c32a:	e008      	b.n	800c33e <HAL_RCC_OscConfig+0xaf2>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 800c32c:	f7fa fd30 	bl	8006d90 <HAL_GetTick>
 800c330:	4602      	mov	r2, r0
 800c332:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c334:	1ad3      	subs	r3, r2, r3
 800c336:	2b02      	cmp	r3, #2
 800c338:	d901      	bls.n	800c33e <HAL_RCC_OscConfig+0xaf2>
        {
          return HAL_TIMEOUT;
 800c33a:	2303      	movs	r3, #3
 800c33c:	e156      	b.n	800c5ec <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 800c33e:	4b84      	ldr	r3, [pc, #528]	; (800c550 <HAL_RCC_OscConfig+0xd04>)
 800c340:	681b      	ldr	r3, [r3, #0]
 800c342:	f003 0320 	and.w	r3, r3, #32
 800c346:	2b00      	cmp	r3, #0
 800c348:	d1f0      	bne.n	800c32c <HAL_RCC_OscConfig+0xae0>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c34e:	2b00      	cmp	r3, #0
 800c350:	f000 814b 	beq.w	800c5ea <HAL_RCC_OscConfig+0xd9e>
  {
    FlagStatus  pwrclkchanged = RESET;
 800c354:	2300      	movs	r3, #0
 800c356:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800c35a:	4b7d      	ldr	r3, [pc, #500]	; (800c550 <HAL_RCC_OscConfig+0xd04>)
 800c35c:	69db      	ldr	r3, [r3, #28]
 800c35e:	f003 030c 	and.w	r3, r3, #12
 800c362:	2b0c      	cmp	r3, #12
 800c364:	f000 80fa 	beq.w	800c55c <HAL_RCC_OscConfig+0xd10>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c36c:	2b02      	cmp	r3, #2
 800c36e:	f040 80cc 	bne.w	800c50a <HAL_RCC_OscConfig+0xcbe>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 800c372:	4b77      	ldr	r3, [pc, #476]	; (800c550 <HAL_RCC_OscConfig+0xd04>)
 800c374:	681b      	ldr	r3, [r3, #0]
 800c376:	4a76      	ldr	r2, [pc, #472]	; (800c550 <HAL_RCC_OscConfig+0xd04>)
 800c378:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800c37c:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800c37e:	f7fa fd07 	bl	8006d90 <HAL_GetTick>
 800c382:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800c384:	e008      	b.n	800c398 <HAL_RCC_OscConfig+0xb4c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c386:	f7fa fd03 	bl	8006d90 <HAL_GetTick>
 800c38a:	4602      	mov	r2, r0
 800c38c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c38e:	1ad3      	subs	r3, r2, r3
 800c390:	2b02      	cmp	r3, #2
 800c392:	d901      	bls.n	800c398 <HAL_RCC_OscConfig+0xb4c>
          {
            return HAL_TIMEOUT;
 800c394:	2303      	movs	r3, #3
 800c396:	e129      	b.n	800c5ec <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800c398:	4b6d      	ldr	r3, [pc, #436]	; (800c550 <HAL_RCC_OscConfig+0xd04>)
 800c39a:	681b      	ldr	r3, [r3, #0]
 800c39c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c3a0:	2b00      	cmp	r3, #0
 800c3a2:	d1f0      	bne.n	800c386 <HAL_RCC_OscConfig+0xb3a>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800c3a4:	4b6a      	ldr	r3, [pc, #424]	; (800c550 <HAL_RCC_OscConfig+0xd04>)
 800c3a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c3aa:	f003 0304 	and.w	r3, r3, #4
 800c3ae:	2b00      	cmp	r3, #0
 800c3b0:	d111      	bne.n	800c3d6 <HAL_RCC_OscConfig+0xb8a>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 800c3b2:	4b67      	ldr	r3, [pc, #412]	; (800c550 <HAL_RCC_OscConfig+0xd04>)
 800c3b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c3b8:	4a65      	ldr	r2, [pc, #404]	; (800c550 <HAL_RCC_OscConfig+0xd04>)
 800c3ba:	f043 0304 	orr.w	r3, r3, #4
 800c3be:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800c3c2:	4b63      	ldr	r3, [pc, #396]	; (800c550 <HAL_RCC_OscConfig+0xd04>)
 800c3c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c3c8:	f003 0304 	and.w	r3, r3, #4
 800c3cc:	60fb      	str	r3, [r7, #12]
 800c3ce:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 800c3d0:	2301      	movs	r3, #1
 800c3d2:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 800c3d6:	4b5f      	ldr	r3, [pc, #380]	; (800c554 <HAL_RCC_OscConfig+0xd08>)
 800c3d8:	68db      	ldr	r3, [r3, #12]
 800c3da:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800c3de:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800c3e2:	d102      	bne.n	800c3ea <HAL_RCC_OscConfig+0xb9e>
        {
          pwrboosten = SET;
 800c3e4:	2301      	movs	r3, #1
 800c3e6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 800c3ea:	4b5a      	ldr	r3, [pc, #360]	; (800c554 <HAL_RCC_OscConfig+0xd08>)
 800c3ec:	68db      	ldr	r3, [r3, #12]
 800c3ee:	4a59      	ldr	r2, [pc, #356]	; (800c554 <HAL_RCC_OscConfig+0xd08>)
 800c3f0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800c3f4:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 800c3f6:	4b56      	ldr	r3, [pc, #344]	; (800c550 <HAL_RCC_OscConfig+0xd04>)
 800c3f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c3fa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c3fe:	f023 0303 	bic.w	r3, r3, #3
 800c402:	687a      	ldr	r2, [r7, #4]
 800c404:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800c406:	687a      	ldr	r2, [r7, #4]
 800c408:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800c40a:	3a01      	subs	r2, #1
 800c40c:	0212      	lsls	r2, r2, #8
 800c40e:	4311      	orrs	r1, r2
 800c410:	687a      	ldr	r2, [r7, #4]
 800c412:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800c414:	430a      	orrs	r2, r1
 800c416:	494e      	ldr	r1, [pc, #312]	; (800c550 <HAL_RCC_OscConfig+0xd04>)
 800c418:	4313      	orrs	r3, r2
 800c41a:	628b      	str	r3, [r1, #40]	; 0x28
 800c41c:	4b4c      	ldr	r3, [pc, #304]	; (800c550 <HAL_RCC_OscConfig+0xd04>)
 800c41e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c420:	4b4d      	ldr	r3, [pc, #308]	; (800c558 <HAL_RCC_OscConfig+0xd0c>)
 800c422:	4013      	ands	r3, r2
 800c424:	687a      	ldr	r2, [r7, #4]
 800c426:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800c428:	3a01      	subs	r2, #1
 800c42a:	f3c2 0108 	ubfx	r1, r2, #0, #9
 800c42e:	687a      	ldr	r2, [r7, #4]
 800c430:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800c432:	3a01      	subs	r2, #1
 800c434:	0252      	lsls	r2, r2, #9
 800c436:	b292      	uxth	r2, r2
 800c438:	4311      	orrs	r1, r2
 800c43a:	687a      	ldr	r2, [r7, #4]
 800c43c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800c43e:	3a01      	subs	r2, #1
 800c440:	0412      	lsls	r2, r2, #16
 800c442:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 800c446:	4311      	orrs	r1, r2
 800c448:	687a      	ldr	r2, [r7, #4]
 800c44a:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800c44c:	3a01      	subs	r2, #1
 800c44e:	0612      	lsls	r2, r2, #24
 800c450:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 800c454:	430a      	orrs	r2, r1
 800c456:	493e      	ldr	r1, [pc, #248]	; (800c550 <HAL_RCC_OscConfig+0xd04>)
 800c458:	4313      	orrs	r3, r2
 800c45a:	634b      	str	r3, [r1, #52]	; 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLLFRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLLFRACN_DISABLE();
 800c45c:	4b3c      	ldr	r3, [pc, #240]	; (800c550 <HAL_RCC_OscConfig+0xd04>)
 800c45e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c460:	4a3b      	ldr	r2, [pc, #236]	; (800c550 <HAL_RCC_OscConfig+0xd04>)
 800c462:	f023 0310 	bic.w	r3, r3, #16
 800c466:	6293      	str	r3, [r2, #40]	; 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 800c468:	4b39      	ldr	r3, [pc, #228]	; (800c550 <HAL_RCC_OscConfig+0xd04>)
 800c46a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c46c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c470:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800c474:	687a      	ldr	r2, [r7, #4]
 800c476:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800c478:	00d2      	lsls	r2, r2, #3
 800c47a:	4935      	ldr	r1, [pc, #212]	; (800c550 <HAL_RCC_OscConfig+0xd04>)
 800c47c:	4313      	orrs	r3, r2
 800c47e:	638b      	str	r3, [r1, #56]	; 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLLFRACN_ENABLE();
 800c480:	4b33      	ldr	r3, [pc, #204]	; (800c550 <HAL_RCC_OscConfig+0xd04>)
 800c482:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c484:	4a32      	ldr	r2, [pc, #200]	; (800c550 <HAL_RCC_OscConfig+0xd04>)
 800c486:	f043 0310 	orr.w	r3, r3, #16
 800c48a:	6293      	str	r3, [r2, #40]	; 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 800c48c:	4b30      	ldr	r3, [pc, #192]	; (800c550 <HAL_RCC_OscConfig+0xd04>)
 800c48e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c490:	f023 020c 	bic.w	r2, r3, #12
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c498:	492d      	ldr	r1, [pc, #180]	; (800c550 <HAL_RCC_OscConfig+0xd04>)
 800c49a:	4313      	orrs	r3, r2
 800c49c:	628b      	str	r3, [r1, #40]	; 0x28

        if (pwrboosten == SET)
 800c49e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c4a2:	2b01      	cmp	r3, #1
 800c4a4:	d105      	bne.n	800c4b2 <HAL_RCC_OscConfig+0xc66>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 800c4a6:	4b2b      	ldr	r3, [pc, #172]	; (800c554 <HAL_RCC_OscConfig+0xd08>)
 800c4a8:	68db      	ldr	r3, [r3, #12]
 800c4aa:	4a2a      	ldr	r2, [pc, #168]	; (800c554 <HAL_RCC_OscConfig+0xd08>)
 800c4ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800c4b0:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 800c4b2:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800c4b6:	2b01      	cmp	r3, #1
 800c4b8:	d107      	bne.n	800c4ca <HAL_RCC_OscConfig+0xc7e>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 800c4ba:	4b25      	ldr	r3, [pc, #148]	; (800c550 <HAL_RCC_OscConfig+0xd04>)
 800c4bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c4c0:	4a23      	ldr	r2, [pc, #140]	; (800c550 <HAL_RCC_OscConfig+0xd04>)
 800c4c2:	f023 0304 	bic.w	r3, r3, #4
 800c4c6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800c4ca:	4b21      	ldr	r3, [pc, #132]	; (800c550 <HAL_RCC_OscConfig+0xd04>)
 800c4cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c4ce:	4a20      	ldr	r2, [pc, #128]	; (800c550 <HAL_RCC_OscConfig+0xd04>)
 800c4d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800c4d4:	6293      	str	r3, [r2, #40]	; 0x28

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 800c4d6:	4b1e      	ldr	r3, [pc, #120]	; (800c550 <HAL_RCC_OscConfig+0xd04>)
 800c4d8:	681b      	ldr	r3, [r3, #0]
 800c4da:	4a1d      	ldr	r2, [pc, #116]	; (800c550 <HAL_RCC_OscConfig+0xd04>)
 800c4dc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800c4e0:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800c4e2:	f7fa fc55 	bl	8006d90 <HAL_GetTick>
 800c4e6:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800c4e8:	e008      	b.n	800c4fc <HAL_RCC_OscConfig+0xcb0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c4ea:	f7fa fc51 	bl	8006d90 <HAL_GetTick>
 800c4ee:	4602      	mov	r2, r0
 800c4f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4f2:	1ad3      	subs	r3, r2, r3
 800c4f4:	2b02      	cmp	r3, #2
 800c4f6:	d901      	bls.n	800c4fc <HAL_RCC_OscConfig+0xcb0>
          {
            return HAL_TIMEOUT;
 800c4f8:	2303      	movs	r3, #3
 800c4fa:	e077      	b.n	800c5ec <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800c4fc:	4b14      	ldr	r3, [pc, #80]	; (800c550 <HAL_RCC_OscConfig+0xd04>)
 800c4fe:	681b      	ldr	r3, [r3, #0]
 800c500:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c504:	2b00      	cmp	r3, #0
 800c506:	d0f0      	beq.n	800c4ea <HAL_RCC_OscConfig+0xc9e>
 800c508:	e06f      	b.n	800c5ea <HAL_RCC_OscConfig+0xd9e>
        }
      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 800c50a:	4b11      	ldr	r3, [pc, #68]	; (800c550 <HAL_RCC_OscConfig+0xd04>)
 800c50c:	681b      	ldr	r3, [r3, #0]
 800c50e:	4a10      	ldr	r2, [pc, #64]	; (800c550 <HAL_RCC_OscConfig+0xd04>)
 800c510:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800c514:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800c516:	f7fa fc3b 	bl	8006d90 <HAL_GetTick>
 800c51a:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800c51c:	e008      	b.n	800c530 <HAL_RCC_OscConfig+0xce4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c51e:	f7fa fc37 	bl	8006d90 <HAL_GetTick>
 800c522:	4602      	mov	r2, r0
 800c524:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c526:	1ad3      	subs	r3, r2, r3
 800c528:	2b02      	cmp	r3, #2
 800c52a:	d901      	bls.n	800c530 <HAL_RCC_OscConfig+0xce4>
          {
            return HAL_TIMEOUT;
 800c52c:	2303      	movs	r3, #3
 800c52e:	e05d      	b.n	800c5ec <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800c530:	4b07      	ldr	r3, [pc, #28]	; (800c550 <HAL_RCC_OscConfig+0xd04>)
 800c532:	681b      	ldr	r3, [r3, #0]
 800c534:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c538:	2b00      	cmp	r3, #0
 800c53a:	d1f0      	bne.n	800c51e <HAL_RCC_OscConfig+0xcd2>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 800c53c:	4b04      	ldr	r3, [pc, #16]	; (800c550 <HAL_RCC_OscConfig+0xd04>)
 800c53e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c540:	4a03      	ldr	r2, [pc, #12]	; (800c550 <HAL_RCC_OscConfig+0xd04>)
 800c542:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 800c546:	f023 0303 	bic.w	r3, r3, #3
 800c54a:	6293      	str	r3, [r2, #40]	; 0x28
 800c54c:	e04d      	b.n	800c5ea <HAL_RCC_OscConfig+0xd9e>
 800c54e:	bf00      	nop
 800c550:	46020c00 	.word	0x46020c00
 800c554:	46020800 	.word	0x46020800
 800c558:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 800c55c:	4b25      	ldr	r3, [pc, #148]	; (800c5f4 <HAL_RCC_OscConfig+0xda8>)
 800c55e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c560:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800c562:	4b24      	ldr	r3, [pc, #144]	; (800c5f4 <HAL_RCC_OscConfig+0xda8>)
 800c564:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c566:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c56c:	2b01      	cmp	r3, #1
 800c56e:	d03a      	beq.n	800c5e6 <HAL_RCC_OscConfig+0xd9a>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 800c570:	69fb      	ldr	r3, [r7, #28]
 800c572:	f003 0203 	and.w	r2, r3, #3
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800c57a:	429a      	cmp	r2, r3
 800c57c:	d133      	bne.n	800c5e6 <HAL_RCC_OscConfig+0xd9a>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 800c57e:	69fb      	ldr	r3, [r7, #28]
 800c580:	0a1b      	lsrs	r3, r3, #8
 800c582:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c58a:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 800c58c:	429a      	cmp	r2, r3
 800c58e:	d12a      	bne.n	800c5e6 <HAL_RCC_OscConfig+0xd9a>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) >> \
 800c590:	69fb      	ldr	r3, [r7, #28]
 800c592:	0b1b      	lsrs	r3, r3, #12
 800c594:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1MBOOST_Pos) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 800c59c:	429a      	cmp	r2, r3
 800c59e:	d122      	bne.n	800c5e6 <HAL_RCC_OscConfig+0xd9a>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800c5a0:	69bb      	ldr	r3, [r7, #24]
 800c5a2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c5aa:	3b01      	subs	r3, #1
            RCC_PLL1CFGR_PLL1MBOOST_Pos) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 800c5ac:	429a      	cmp	r2, r3
 800c5ae:	d11a      	bne.n	800c5e6 <HAL_RCC_OscConfig+0xd9a>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 800c5b0:	69bb      	ldr	r3, [r7, #24]
 800c5b2:	0a5b      	lsrs	r3, r3, #9
 800c5b4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c5bc:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800c5be:	429a      	cmp	r2, r3
 800c5c0:	d111      	bne.n	800c5e6 <HAL_RCC_OscConfig+0xd9a>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 800c5c2:	69bb      	ldr	r3, [r7, #24]
 800c5c4:	0c1b      	lsrs	r3, r3, #16
 800c5c6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c5ce:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800c5d0:	429a      	cmp	r2, r3
 800c5d2:	d108      	bne.n	800c5e6 <HAL_RCC_OscConfig+0xd9a>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 800c5d4:	69bb      	ldr	r3, [r7, #24]
 800c5d6:	0e1b      	lsrs	r3, r3, #24
 800c5d8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c5e0:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800c5e2:	429a      	cmp	r2, r3
 800c5e4:	d001      	beq.n	800c5ea <HAL_RCC_OscConfig+0xd9e>
      {
        return HAL_ERROR;
 800c5e6:	2301      	movs	r3, #1
 800c5e8:	e000      	b.n	800c5ec <HAL_RCC_OscConfig+0xda0>
      }
    }
  }
  return HAL_OK;
 800c5ea:	2300      	movs	r3, #0
}
 800c5ec:	4618      	mov	r0, r3
 800c5ee:	3738      	adds	r7, #56	; 0x38
 800c5f0:	46bd      	mov	sp, r7
 800c5f2:	bd80      	pop	{r7, pc}
 800c5f4:	46020c00 	.word	0x46020c00

0800c5f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 800c5f8:	b580      	push	{r7, lr}
 800c5fa:	b086      	sub	sp, #24
 800c5fc:	af00      	add	r7, sp, #0
 800c5fe:	6078      	str	r0, [r7, #4]
 800c600:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	2b00      	cmp	r3, #0
 800c606:	d101      	bne.n	800c60c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800c608:	2301      	movs	r3, #1
 800c60a:	e1d9      	b.n	800c9c0 <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800c60c:	4b9b      	ldr	r3, [pc, #620]	; (800c87c <HAL_RCC_ClockConfig+0x284>)
 800c60e:	681b      	ldr	r3, [r3, #0]
 800c610:	f003 030f 	and.w	r3, r3, #15
 800c614:	683a      	ldr	r2, [r7, #0]
 800c616:	429a      	cmp	r2, r3
 800c618:	d910      	bls.n	800c63c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c61a:	4b98      	ldr	r3, [pc, #608]	; (800c87c <HAL_RCC_ClockConfig+0x284>)
 800c61c:	681b      	ldr	r3, [r3, #0]
 800c61e:	f023 020f 	bic.w	r2, r3, #15
 800c622:	4996      	ldr	r1, [pc, #600]	; (800c87c <HAL_RCC_ClockConfig+0x284>)
 800c624:	683b      	ldr	r3, [r7, #0]
 800c626:	4313      	orrs	r3, r2
 800c628:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800c62a:	4b94      	ldr	r3, [pc, #592]	; (800c87c <HAL_RCC_ClockConfig+0x284>)
 800c62c:	681b      	ldr	r3, [r3, #0]
 800c62e:	f003 030f 	and.w	r3, r3, #15
 800c632:	683a      	ldr	r2, [r7, #0]
 800c634:	429a      	cmp	r2, r3
 800c636:	d001      	beq.n	800c63c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800c638:	2301      	movs	r3, #1
 800c63a:	e1c1      	b.n	800c9c0 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	681b      	ldr	r3, [r3, #0]
 800c640:	f003 0310 	and.w	r3, r3, #16
 800c644:	2b00      	cmp	r3, #0
 800c646:	d010      	beq.n	800c66a <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	695a      	ldr	r2, [r3, #20]
 800c64c:	4b8c      	ldr	r3, [pc, #560]	; (800c880 <HAL_RCC_ClockConfig+0x288>)
 800c64e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c650:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800c654:	429a      	cmp	r2, r3
 800c656:	d908      	bls.n	800c66a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 800c658:	4b89      	ldr	r3, [pc, #548]	; (800c880 <HAL_RCC_ClockConfig+0x288>)
 800c65a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c65c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	695b      	ldr	r3, [r3, #20]
 800c664:	4986      	ldr	r1, [pc, #536]	; (800c880 <HAL_RCC_ClockConfig+0x288>)
 800c666:	4313      	orrs	r3, r2
 800c668:	624b      	str	r3, [r1, #36]	; 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	681b      	ldr	r3, [r3, #0]
 800c66e:	f003 0308 	and.w	r3, r3, #8
 800c672:	2b00      	cmp	r3, #0
 800c674:	d012      	beq.n	800c69c <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	691a      	ldr	r2, [r3, #16]
 800c67a:	4b81      	ldr	r3, [pc, #516]	; (800c880 <HAL_RCC_ClockConfig+0x288>)
 800c67c:	6a1b      	ldr	r3, [r3, #32]
 800c67e:	091b      	lsrs	r3, r3, #4
 800c680:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800c684:	429a      	cmp	r2, r3
 800c686:	d909      	bls.n	800c69c <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 800c688:	4b7d      	ldr	r3, [pc, #500]	; (800c880 <HAL_RCC_ClockConfig+0x288>)
 800c68a:	6a1b      	ldr	r3, [r3, #32]
 800c68c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	691b      	ldr	r3, [r3, #16]
 800c694:	011b      	lsls	r3, r3, #4
 800c696:	497a      	ldr	r1, [pc, #488]	; (800c880 <HAL_RCC_ClockConfig+0x288>)
 800c698:	4313      	orrs	r3, r2
 800c69a:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	681b      	ldr	r3, [r3, #0]
 800c6a0:	f003 0304 	and.w	r3, r3, #4
 800c6a4:	2b00      	cmp	r3, #0
 800c6a6:	d010      	beq.n	800c6ca <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	68da      	ldr	r2, [r3, #12]
 800c6ac:	4b74      	ldr	r3, [pc, #464]	; (800c880 <HAL_RCC_ClockConfig+0x288>)
 800c6ae:	6a1b      	ldr	r3, [r3, #32]
 800c6b0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800c6b4:	429a      	cmp	r2, r3
 800c6b6:	d908      	bls.n	800c6ca <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 800c6b8:	4b71      	ldr	r3, [pc, #452]	; (800c880 <HAL_RCC_ClockConfig+0x288>)
 800c6ba:	6a1b      	ldr	r3, [r3, #32]
 800c6bc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	68db      	ldr	r3, [r3, #12]
 800c6c4:	496e      	ldr	r1, [pc, #440]	; (800c880 <HAL_RCC_ClockConfig+0x288>)
 800c6c6:	4313      	orrs	r3, r2
 800c6c8:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	681b      	ldr	r3, [r3, #0]
 800c6ce:	f003 0302 	and.w	r3, r3, #2
 800c6d2:	2b00      	cmp	r3, #0
 800c6d4:	d010      	beq.n	800c6f8 <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	689a      	ldr	r2, [r3, #8]
 800c6da:	4b69      	ldr	r3, [pc, #420]	; (800c880 <HAL_RCC_ClockConfig+0x288>)
 800c6dc:	6a1b      	ldr	r3, [r3, #32]
 800c6de:	f003 030f 	and.w	r3, r3, #15
 800c6e2:	429a      	cmp	r2, r3
 800c6e4:	d908      	bls.n	800c6f8 <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 800c6e6:	4b66      	ldr	r3, [pc, #408]	; (800c880 <HAL_RCC_ClockConfig+0x288>)
 800c6e8:	6a1b      	ldr	r3, [r3, #32]
 800c6ea:	f023 020f 	bic.w	r2, r3, #15
 800c6ee:	687b      	ldr	r3, [r7, #4]
 800c6f0:	689b      	ldr	r3, [r3, #8]
 800c6f2:	4963      	ldr	r1, [pc, #396]	; (800c880 <HAL_RCC_ClockConfig+0x288>)
 800c6f4:	4313      	orrs	r3, r2
 800c6f6:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	681b      	ldr	r3, [r3, #0]
 800c6fc:	f003 0301 	and.w	r3, r3, #1
 800c700:	2b00      	cmp	r3, #0
 800c702:	f000 80d2 	beq.w	800c8aa <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 800c706:	2300      	movs	r3, #0
 800c708:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	685b      	ldr	r3, [r3, #4]
 800c70e:	2b03      	cmp	r3, #3
 800c710:	d143      	bne.n	800c79a <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800c712:	4b5b      	ldr	r3, [pc, #364]	; (800c880 <HAL_RCC_ClockConfig+0x288>)
 800c714:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c718:	f003 0304 	and.w	r3, r3, #4
 800c71c:	2b00      	cmp	r3, #0
 800c71e:	d110      	bne.n	800c742 <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800c720:	4b57      	ldr	r3, [pc, #348]	; (800c880 <HAL_RCC_ClockConfig+0x288>)
 800c722:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c726:	4a56      	ldr	r2, [pc, #344]	; (800c880 <HAL_RCC_ClockConfig+0x288>)
 800c728:	f043 0304 	orr.w	r3, r3, #4
 800c72c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800c730:	4b53      	ldr	r3, [pc, #332]	; (800c880 <HAL_RCC_ClockConfig+0x288>)
 800c732:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c736:	f003 0304 	and.w	r3, r3, #4
 800c73a:	60bb      	str	r3, [r7, #8]
 800c73c:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 800c73e:	2301      	movs	r3, #1
 800c740:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 800c742:	f7fa fb25 	bl	8006d90 <HAL_GetTick>
 800c746:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 800c748:	4b4e      	ldr	r3, [pc, #312]	; (800c884 <HAL_RCC_ClockConfig+0x28c>)
 800c74a:	68db      	ldr	r3, [r3, #12]
 800c74c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800c750:	2b00      	cmp	r3, #0
 800c752:	d00f      	beq.n	800c774 <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 800c754:	e008      	b.n	800c768 <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 800c756:	f7fa fb1b 	bl	8006d90 <HAL_GetTick>
 800c75a:	4602      	mov	r2, r0
 800c75c:	693b      	ldr	r3, [r7, #16]
 800c75e:	1ad3      	subs	r3, r2, r3
 800c760:	2b02      	cmp	r3, #2
 800c762:	d901      	bls.n	800c768 <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 800c764:	2303      	movs	r3, #3
 800c766:	e12b      	b.n	800c9c0 <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 800c768:	4b46      	ldr	r3, [pc, #280]	; (800c884 <HAL_RCC_ClockConfig+0x28c>)
 800c76a:	68db      	ldr	r3, [r3, #12]
 800c76c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c770:	2b00      	cmp	r3, #0
 800c772:	d0f0      	beq.n	800c756 <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800c774:	7dfb      	ldrb	r3, [r7, #23]
 800c776:	2b01      	cmp	r3, #1
 800c778:	d107      	bne.n	800c78a <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 800c77a:	4b41      	ldr	r3, [pc, #260]	; (800c880 <HAL_RCC_ClockConfig+0x288>)
 800c77c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c780:	4a3f      	ldr	r2, [pc, #252]	; (800c880 <HAL_RCC_ClockConfig+0x288>)
 800c782:	f023 0304 	bic.w	r3, r3, #4
 800c786:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800c78a:	4b3d      	ldr	r3, [pc, #244]	; (800c880 <HAL_RCC_ClockConfig+0x288>)
 800c78c:	681b      	ldr	r3, [r3, #0]
 800c78e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c792:	2b00      	cmp	r3, #0
 800c794:	d121      	bne.n	800c7da <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 800c796:	2301      	movs	r3, #1
 800c798:	e112      	b.n	800c9c0 <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800c79a:	687b      	ldr	r3, [r7, #4]
 800c79c:	685b      	ldr	r3, [r3, #4]
 800c79e:	2b02      	cmp	r3, #2
 800c7a0:	d107      	bne.n	800c7b2 <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800c7a2:	4b37      	ldr	r3, [pc, #220]	; (800c880 <HAL_RCC_ClockConfig+0x288>)
 800c7a4:	681b      	ldr	r3, [r3, #0]
 800c7a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c7aa:	2b00      	cmp	r3, #0
 800c7ac:	d115      	bne.n	800c7da <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 800c7ae:	2301      	movs	r3, #1
 800c7b0:	e106      	b.n	800c9c0 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800c7b2:	687b      	ldr	r3, [r7, #4]
 800c7b4:	685b      	ldr	r3, [r3, #4]
 800c7b6:	2b00      	cmp	r3, #0
 800c7b8:	d107      	bne.n	800c7ca <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 800c7ba:	4b31      	ldr	r3, [pc, #196]	; (800c880 <HAL_RCC_ClockConfig+0x288>)
 800c7bc:	681b      	ldr	r3, [r3, #0]
 800c7be:	f003 0304 	and.w	r3, r3, #4
 800c7c2:	2b00      	cmp	r3, #0
 800c7c4:	d109      	bne.n	800c7da <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 800c7c6:	2301      	movs	r3, #1
 800c7c8:	e0fa      	b.n	800c9c0 <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800c7ca:	4b2d      	ldr	r3, [pc, #180]	; (800c880 <HAL_RCC_ClockConfig+0x288>)
 800c7cc:	681b      	ldr	r3, [r3, #0]
 800c7ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c7d2:	2b00      	cmp	r3, #0
 800c7d4:	d101      	bne.n	800c7da <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 800c7d6:	2301      	movs	r3, #1
 800c7d8:	e0f2      	b.n	800c9c0 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 800c7da:	4b29      	ldr	r3, [pc, #164]	; (800c880 <HAL_RCC_ClockConfig+0x288>)
 800c7dc:	69db      	ldr	r3, [r3, #28]
 800c7de:	f023 0203 	bic.w	r2, r3, #3
 800c7e2:	687b      	ldr	r3, [r7, #4]
 800c7e4:	685b      	ldr	r3, [r3, #4]
 800c7e6:	4926      	ldr	r1, [pc, #152]	; (800c880 <HAL_RCC_ClockConfig+0x288>)
 800c7e8:	4313      	orrs	r3, r2
 800c7ea:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 800c7ec:	f7fa fad0 	bl	8006d90 <HAL_GetTick>
 800c7f0:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800c7f2:	687b      	ldr	r3, [r7, #4]
 800c7f4:	685b      	ldr	r3, [r3, #4]
 800c7f6:	2b03      	cmp	r3, #3
 800c7f8:	d112      	bne.n	800c820 <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800c7fa:	e00a      	b.n	800c812 <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800c7fc:	f7fa fac8 	bl	8006d90 <HAL_GetTick>
 800c800:	4602      	mov	r2, r0
 800c802:	693b      	ldr	r3, [r7, #16]
 800c804:	1ad3      	subs	r3, r2, r3
 800c806:	f241 3288 	movw	r2, #5000	; 0x1388
 800c80a:	4293      	cmp	r3, r2
 800c80c:	d901      	bls.n	800c812 <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 800c80e:	2303      	movs	r3, #3
 800c810:	e0d6      	b.n	800c9c0 <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800c812:	4b1b      	ldr	r3, [pc, #108]	; (800c880 <HAL_RCC_ClockConfig+0x288>)
 800c814:	69db      	ldr	r3, [r3, #28]
 800c816:	f003 030c 	and.w	r3, r3, #12
 800c81a:	2b0c      	cmp	r3, #12
 800c81c:	d1ee      	bne.n	800c7fc <HAL_RCC_ClockConfig+0x204>
 800c81e:	e044      	b.n	800c8aa <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	685b      	ldr	r3, [r3, #4]
 800c824:	2b02      	cmp	r3, #2
 800c826:	d112      	bne.n	800c84e <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800c828:	e00a      	b.n	800c840 <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800c82a:	f7fa fab1 	bl	8006d90 <HAL_GetTick>
 800c82e:	4602      	mov	r2, r0
 800c830:	693b      	ldr	r3, [r7, #16]
 800c832:	1ad3      	subs	r3, r2, r3
 800c834:	f241 3288 	movw	r2, #5000	; 0x1388
 800c838:	4293      	cmp	r3, r2
 800c83a:	d901      	bls.n	800c840 <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 800c83c:	2303      	movs	r3, #3
 800c83e:	e0bf      	b.n	800c9c0 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800c840:	4b0f      	ldr	r3, [pc, #60]	; (800c880 <HAL_RCC_ClockConfig+0x288>)
 800c842:	69db      	ldr	r3, [r3, #28]
 800c844:	f003 030c 	and.w	r3, r3, #12
 800c848:	2b08      	cmp	r3, #8
 800c84a:	d1ee      	bne.n	800c82a <HAL_RCC_ClockConfig+0x232>
 800c84c:	e02d      	b.n	800c8aa <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800c84e:	687b      	ldr	r3, [r7, #4]
 800c850:	685b      	ldr	r3, [r3, #4]
 800c852:	2b00      	cmp	r3, #0
 800c854:	d123      	bne.n	800c89e <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800c856:	e00a      	b.n	800c86e <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800c858:	f7fa fa9a 	bl	8006d90 <HAL_GetTick>
 800c85c:	4602      	mov	r2, r0
 800c85e:	693b      	ldr	r3, [r7, #16]
 800c860:	1ad3      	subs	r3, r2, r3
 800c862:	f241 3288 	movw	r2, #5000	; 0x1388
 800c866:	4293      	cmp	r3, r2
 800c868:	d901      	bls.n	800c86e <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 800c86a:	2303      	movs	r3, #3
 800c86c:	e0a8      	b.n	800c9c0 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800c86e:	4b04      	ldr	r3, [pc, #16]	; (800c880 <HAL_RCC_ClockConfig+0x288>)
 800c870:	69db      	ldr	r3, [r3, #28]
 800c872:	f003 030c 	and.w	r3, r3, #12
 800c876:	2b00      	cmp	r3, #0
 800c878:	d1ee      	bne.n	800c858 <HAL_RCC_ClockConfig+0x260>
 800c87a:	e016      	b.n	800c8aa <HAL_RCC_ClockConfig+0x2b2>
 800c87c:	40022000 	.word	0x40022000
 800c880:	46020c00 	.word	0x46020c00
 800c884:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800c888:	f7fa fa82 	bl	8006d90 <HAL_GetTick>
 800c88c:	4602      	mov	r2, r0
 800c88e:	693b      	ldr	r3, [r7, #16]
 800c890:	1ad3      	subs	r3, r2, r3
 800c892:	f241 3288 	movw	r2, #5000	; 0x1388
 800c896:	4293      	cmp	r3, r2
 800c898:	d901      	bls.n	800c89e <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 800c89a:	2303      	movs	r3, #3
 800c89c:	e090      	b.n	800c9c0 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800c89e:	4b4a      	ldr	r3, [pc, #296]	; (800c9c8 <HAL_RCC_ClockConfig+0x3d0>)
 800c8a0:	69db      	ldr	r3, [r3, #28]
 800c8a2:	f003 030c 	and.w	r3, r3, #12
 800c8a6:	2b04      	cmp	r3, #4
 800c8a8:	d1ee      	bne.n	800c888 <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	681b      	ldr	r3, [r3, #0]
 800c8ae:	f003 0302 	and.w	r3, r3, #2
 800c8b2:	2b00      	cmp	r3, #0
 800c8b4:	d010      	beq.n	800c8d8 <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 800c8b6:	687b      	ldr	r3, [r7, #4]
 800c8b8:	689a      	ldr	r2, [r3, #8]
 800c8ba:	4b43      	ldr	r3, [pc, #268]	; (800c9c8 <HAL_RCC_ClockConfig+0x3d0>)
 800c8bc:	6a1b      	ldr	r3, [r3, #32]
 800c8be:	f003 030f 	and.w	r3, r3, #15
 800c8c2:	429a      	cmp	r2, r3
 800c8c4:	d208      	bcs.n	800c8d8 <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 800c8c6:	4b40      	ldr	r3, [pc, #256]	; (800c9c8 <HAL_RCC_ClockConfig+0x3d0>)
 800c8c8:	6a1b      	ldr	r3, [r3, #32]
 800c8ca:	f023 020f 	bic.w	r2, r3, #15
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	689b      	ldr	r3, [r3, #8]
 800c8d2:	493d      	ldr	r1, [pc, #244]	; (800c9c8 <HAL_RCC_ClockConfig+0x3d0>)
 800c8d4:	4313      	orrs	r3, r2
 800c8d6:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800c8d8:	4b3c      	ldr	r3, [pc, #240]	; (800c9cc <HAL_RCC_ClockConfig+0x3d4>)
 800c8da:	681b      	ldr	r3, [r3, #0]
 800c8dc:	f003 030f 	and.w	r3, r3, #15
 800c8e0:	683a      	ldr	r2, [r7, #0]
 800c8e2:	429a      	cmp	r2, r3
 800c8e4:	d210      	bcs.n	800c908 <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c8e6:	4b39      	ldr	r3, [pc, #228]	; (800c9cc <HAL_RCC_ClockConfig+0x3d4>)
 800c8e8:	681b      	ldr	r3, [r3, #0]
 800c8ea:	f023 020f 	bic.w	r2, r3, #15
 800c8ee:	4937      	ldr	r1, [pc, #220]	; (800c9cc <HAL_RCC_ClockConfig+0x3d4>)
 800c8f0:	683b      	ldr	r3, [r7, #0]
 800c8f2:	4313      	orrs	r3, r2
 800c8f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800c8f6:	4b35      	ldr	r3, [pc, #212]	; (800c9cc <HAL_RCC_ClockConfig+0x3d4>)
 800c8f8:	681b      	ldr	r3, [r3, #0]
 800c8fa:	f003 030f 	and.w	r3, r3, #15
 800c8fe:	683a      	ldr	r2, [r7, #0]
 800c900:	429a      	cmp	r2, r3
 800c902:	d001      	beq.n	800c908 <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 800c904:	2301      	movs	r3, #1
 800c906:	e05b      	b.n	800c9c0 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c908:	687b      	ldr	r3, [r7, #4]
 800c90a:	681b      	ldr	r3, [r3, #0]
 800c90c:	f003 0304 	and.w	r3, r3, #4
 800c910:	2b00      	cmp	r3, #0
 800c912:	d010      	beq.n	800c936 <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	68da      	ldr	r2, [r3, #12]
 800c918:	4b2b      	ldr	r3, [pc, #172]	; (800c9c8 <HAL_RCC_ClockConfig+0x3d0>)
 800c91a:	6a1b      	ldr	r3, [r3, #32]
 800c91c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800c920:	429a      	cmp	r2, r3
 800c922:	d208      	bcs.n	800c936 <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 800c924:	4b28      	ldr	r3, [pc, #160]	; (800c9c8 <HAL_RCC_ClockConfig+0x3d0>)
 800c926:	6a1b      	ldr	r3, [r3, #32]
 800c928:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	68db      	ldr	r3, [r3, #12]
 800c930:	4925      	ldr	r1, [pc, #148]	; (800c9c8 <HAL_RCC_ClockConfig+0x3d0>)
 800c932:	4313      	orrs	r3, r2
 800c934:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c936:	687b      	ldr	r3, [r7, #4]
 800c938:	681b      	ldr	r3, [r3, #0]
 800c93a:	f003 0308 	and.w	r3, r3, #8
 800c93e:	2b00      	cmp	r3, #0
 800c940:	d012      	beq.n	800c968 <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 800c942:	687b      	ldr	r3, [r7, #4]
 800c944:	691a      	ldr	r2, [r3, #16]
 800c946:	4b20      	ldr	r3, [pc, #128]	; (800c9c8 <HAL_RCC_ClockConfig+0x3d0>)
 800c948:	6a1b      	ldr	r3, [r3, #32]
 800c94a:	091b      	lsrs	r3, r3, #4
 800c94c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800c950:	429a      	cmp	r2, r3
 800c952:	d209      	bcs.n	800c968 <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 800c954:	4b1c      	ldr	r3, [pc, #112]	; (800c9c8 <HAL_RCC_ClockConfig+0x3d0>)
 800c956:	6a1b      	ldr	r3, [r3, #32]
 800c958:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	691b      	ldr	r3, [r3, #16]
 800c960:	011b      	lsls	r3, r3, #4
 800c962:	4919      	ldr	r1, [pc, #100]	; (800c9c8 <HAL_RCC_ClockConfig+0x3d0>)
 800c964:	4313      	orrs	r3, r2
 800c966:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 800c968:	687b      	ldr	r3, [r7, #4]
 800c96a:	681b      	ldr	r3, [r3, #0]
 800c96c:	f003 0310 	and.w	r3, r3, #16
 800c970:	2b00      	cmp	r3, #0
 800c972:	d010      	beq.n	800c996 <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 800c974:	687b      	ldr	r3, [r7, #4]
 800c976:	695a      	ldr	r2, [r3, #20]
 800c978:	4b13      	ldr	r3, [pc, #76]	; (800c9c8 <HAL_RCC_ClockConfig+0x3d0>)
 800c97a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c97c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800c980:	429a      	cmp	r2, r3
 800c982:	d208      	bcs.n	800c996 <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 800c984:	4b10      	ldr	r3, [pc, #64]	; (800c9c8 <HAL_RCC_ClockConfig+0x3d0>)
 800c986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c988:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	695b      	ldr	r3, [r3, #20]
 800c990:	490d      	ldr	r1, [pc, #52]	; (800c9c8 <HAL_RCC_ClockConfig+0x3d0>)
 800c992:	4313      	orrs	r3, r2
 800c994:	624b      	str	r3, [r1, #36]	; 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800c996:	f000 f821 	bl	800c9dc <HAL_RCC_GetSysClockFreq>
 800c99a:	4602      	mov	r2, r0
 800c99c:	4b0a      	ldr	r3, [pc, #40]	; (800c9c8 <HAL_RCC_ClockConfig+0x3d0>)
 800c99e:	6a1b      	ldr	r3, [r3, #32]
 800c9a0:	f003 030f 	and.w	r3, r3, #15
 800c9a4:	490a      	ldr	r1, [pc, #40]	; (800c9d0 <HAL_RCC_ClockConfig+0x3d8>)
 800c9a6:	5ccb      	ldrb	r3, [r1, r3]
 800c9a8:	fa22 f303 	lsr.w	r3, r2, r3
 800c9ac:	4a09      	ldr	r2, [pc, #36]	; (800c9d4 <HAL_RCC_ClockConfig+0x3dc>)
 800c9ae:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800c9b0:	4b09      	ldr	r3, [pc, #36]	; (800c9d8 <HAL_RCC_ClockConfig+0x3e0>)
 800c9b2:	681b      	ldr	r3, [r3, #0]
 800c9b4:	4618      	mov	r0, r3
 800c9b6:	f7f9 fed7 	bl	8006768 <HAL_InitTick>
 800c9ba:	4603      	mov	r3, r0
 800c9bc:	73fb      	strb	r3, [r7, #15]

  return status;
 800c9be:	7bfb      	ldrb	r3, [r7, #15]
}
 800c9c0:	4618      	mov	r0, r3
 800c9c2:	3718      	adds	r7, #24
 800c9c4:	46bd      	mov	sp, r7
 800c9c6:	bd80      	pop	{r7, pc}
 800c9c8:	46020c00 	.word	0x46020c00
 800c9cc:	40022000 	.word	0x40022000
 800c9d0:	08014ee8 	.word	0x08014ee8
 800c9d4:	20000000 	.word	0x20000000
 800c9d8:	20000004 	.word	0x20000004

0800c9dc <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800c9dc:	b480      	push	{r7}
 800c9de:	b08b      	sub	sp, #44	; 0x2c
 800c9e0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 800c9e2:	2300      	movs	r3, #0
 800c9e4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 800c9e6:	2300      	movs	r3, #0
 800c9e8:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800c9ea:	4b7b      	ldr	r3, [pc, #492]	; (800cbd8 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800c9ec:	69db      	ldr	r3, [r3, #28]
 800c9ee:	f003 030c 	and.w	r3, r3, #12
 800c9f2:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800c9f4:	4b78      	ldr	r3, [pc, #480]	; (800cbd8 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800c9f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c9f8:	f003 0303 	and.w	r3, r3, #3
 800c9fc:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800c9fe:	69bb      	ldr	r3, [r7, #24]
 800ca00:	2b00      	cmp	r3, #0
 800ca02:	d005      	beq.n	800ca10 <HAL_RCC_GetSysClockFreq+0x34>
 800ca04:	69bb      	ldr	r3, [r7, #24]
 800ca06:	2b0c      	cmp	r3, #12
 800ca08:	d121      	bne.n	800ca4e <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800ca0a:	697b      	ldr	r3, [r7, #20]
 800ca0c:	2b01      	cmp	r3, #1
 800ca0e:	d11e      	bne.n	800ca4e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 800ca10:	4b71      	ldr	r3, [pc, #452]	; (800cbd8 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800ca12:	689b      	ldr	r3, [r3, #8]
 800ca14:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ca18:	2b00      	cmp	r3, #0
 800ca1a:	d107      	bne.n	800ca2c <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 800ca1c:	4b6e      	ldr	r3, [pc, #440]	; (800cbd8 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800ca1e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800ca22:	0b1b      	lsrs	r3, r3, #12
 800ca24:	f003 030f 	and.w	r3, r3, #15
 800ca28:	627b      	str	r3, [r7, #36]	; 0x24
 800ca2a:	e005      	b.n	800ca38 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 800ca2c:	4b6a      	ldr	r3, [pc, #424]	; (800cbd8 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800ca2e:	689b      	ldr	r3, [r3, #8]
 800ca30:	0f1b      	lsrs	r3, r3, #28
 800ca32:	f003 030f 	and.w	r3, r3, #15
 800ca36:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800ca38:	4a68      	ldr	r2, [pc, #416]	; (800cbdc <HAL_RCC_GetSysClockFreq+0x200>)
 800ca3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ca40:	627b      	str	r3, [r7, #36]	; 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800ca42:	69bb      	ldr	r3, [r7, #24]
 800ca44:	2b00      	cmp	r3, #0
 800ca46:	d110      	bne.n	800ca6a <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800ca48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca4a:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800ca4c:	e00d      	b.n	800ca6a <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800ca4e:	4b62      	ldr	r3, [pc, #392]	; (800cbd8 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800ca50:	69db      	ldr	r3, [r3, #28]
 800ca52:	f003 030c 	and.w	r3, r3, #12
 800ca56:	2b04      	cmp	r3, #4
 800ca58:	d102      	bne.n	800ca60 <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800ca5a:	4b61      	ldr	r3, [pc, #388]	; (800cbe0 <HAL_RCC_GetSysClockFreq+0x204>)
 800ca5c:	623b      	str	r3, [r7, #32]
 800ca5e:	e004      	b.n	800ca6a <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800ca60:	69bb      	ldr	r3, [r7, #24]
 800ca62:	2b08      	cmp	r3, #8
 800ca64:	d101      	bne.n	800ca6a <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800ca66:	4b5e      	ldr	r3, [pc, #376]	; (800cbe0 <HAL_RCC_GetSysClockFreq+0x204>)
 800ca68:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800ca6a:	69bb      	ldr	r3, [r7, #24]
 800ca6c:	2b0c      	cmp	r3, #12
 800ca6e:	f040 80ac 	bne.w	800cbca <HAL_RCC_GetSysClockFreq+0x1ee>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 800ca72:	4b59      	ldr	r3, [pc, #356]	; (800cbd8 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800ca74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ca76:	f003 0303 	and.w	r3, r3, #3
 800ca7a:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 800ca7c:	4b56      	ldr	r3, [pc, #344]	; (800cbd8 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800ca7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ca80:	0a1b      	lsrs	r3, r3, #8
 800ca82:	f003 030f 	and.w	r3, r3, #15
 800ca86:	3301      	adds	r3, #1
 800ca88:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 800ca8a:	4b53      	ldr	r3, [pc, #332]	; (800cbd8 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800ca8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ca8e:	091b      	lsrs	r3, r3, #4
 800ca90:	f003 0301 	and.w	r3, r3, #1
 800ca94:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 800ca96:	4b50      	ldr	r3, [pc, #320]	; (800cbd8 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800ca98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca9a:	08db      	lsrs	r3, r3, #3
 800ca9c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800caa0:	68ba      	ldr	r2, [r7, #8]
 800caa2:	fb02 f303 	mul.w	r3, r2, r3
 800caa6:	ee07 3a90 	vmov	s15, r3
 800caaa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800caae:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    if (pllm != 0U)
 800cab2:	68fb      	ldr	r3, [r7, #12]
 800cab4:	2b00      	cmp	r3, #0
 800cab6:	f000 8086 	beq.w	800cbc6 <HAL_RCC_GetSysClockFreq+0x1ea>
    {
      switch (pllsource)
 800caba:	693b      	ldr	r3, [r7, #16]
 800cabc:	2b02      	cmp	r3, #2
 800cabe:	d003      	beq.n	800cac8 <HAL_RCC_GetSysClockFreq+0xec>
 800cac0:	693b      	ldr	r3, [r7, #16]
 800cac2:	2b03      	cmp	r3, #3
 800cac4:	d022      	beq.n	800cb0c <HAL_RCC_GetSysClockFreq+0x130>
 800cac6:	e043      	b.n	800cb50 <HAL_RCC_GetSysClockFreq+0x174>
      {
        case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800cac8:	68fb      	ldr	r3, [r7, #12]
 800caca:	ee07 3a90 	vmov	s15, r3
 800cace:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cad2:	eddf 6a44 	vldr	s13, [pc, #272]	; 800cbe4 <HAL_RCC_GetSysClockFreq+0x208>
 800cad6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cada:	4b3f      	ldr	r3, [pc, #252]	; (800cbd8 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800cadc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cade:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cae2:	ee07 3a90 	vmov	s15, r3
 800cae6:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 800caea:	ed97 6a01 	vldr	s12, [r7, #4]
 800caee:	eddf 5a3e 	vldr	s11, [pc, #248]	; 800cbe8 <HAL_RCC_GetSysClockFreq+0x20c>
 800caf2:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800caf6:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 800cafa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cafe:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800cb02:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cb06:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 800cb0a:	e046      	b.n	800cb9a <HAL_RCC_GetSysClockFreq+0x1be>

        case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800cb0c:	68fb      	ldr	r3, [r7, #12]
 800cb0e:	ee07 3a90 	vmov	s15, r3
 800cb12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cb16:	eddf 6a33 	vldr	s13, [pc, #204]	; 800cbe4 <HAL_RCC_GetSysClockFreq+0x208>
 800cb1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cb1e:	4b2e      	ldr	r3, [pc, #184]	; (800cbd8 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800cb20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cb22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cb26:	ee07 3a90 	vmov	s15, r3
 800cb2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 800cb2e:	ed97 6a01 	vldr	s12, [r7, #4]
 800cb32:	eddf 5a2d 	vldr	s11, [pc, #180]	; 800cbe8 <HAL_RCC_GetSysClockFreq+0x20c>
 800cb36:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800cb3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 800cb3e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cb42:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800cb46:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cb4a:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 800cb4e:	e024      	b.n	800cb9a <HAL_RCC_GetSysClockFreq+0x1be>

        case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        default:
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800cb50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb52:	ee07 3a90 	vmov	s15, r3
 800cb56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cb5a:	68fb      	ldr	r3, [r7, #12]
 800cb5c:	ee07 3a90 	vmov	s15, r3
 800cb60:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cb64:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cb68:	4b1b      	ldr	r3, [pc, #108]	; (800cbd8 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800cb6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cb6c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cb70:	ee07 3a90 	vmov	s15, r3
 800cb74:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 800cb78:	ed97 6a01 	vldr	s12, [r7, #4]
 800cb7c:	eddf 5a1a 	vldr	s11, [pc, #104]	; 800cbe8 <HAL_RCC_GetSysClockFreq+0x20c>
 800cb80:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800cb84:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 800cb88:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cb8c:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800cb90:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cb94:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 800cb98:	bf00      	nop
      }

      pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 800cb9a:	4b0f      	ldr	r3, [pc, #60]	; (800cbd8 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800cb9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cb9e:	0e1b      	lsrs	r3, r3, #24
 800cba0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cba4:	3301      	adds	r3, #1
 800cba6:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 800cba8:	683b      	ldr	r3, [r7, #0]
 800cbaa:	ee07 3a90 	vmov	s15, r3
 800cbae:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800cbb2:	edd7 6a07 	vldr	s13, [r7, #28]
 800cbb6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cbba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cbbe:	ee17 3a90 	vmov	r3, s15
 800cbc2:	623b      	str	r3, [r7, #32]
 800cbc4:	e001      	b.n	800cbca <HAL_RCC_GetSysClockFreq+0x1ee>
    }
    else
    {
      sysclockfreq = 0;
 800cbc6:	2300      	movs	r3, #0
 800cbc8:	623b      	str	r3, [r7, #32]
    }
  }

  return sysclockfreq;
 800cbca:	6a3b      	ldr	r3, [r7, #32]
}
 800cbcc:	4618      	mov	r0, r3
 800cbce:	372c      	adds	r7, #44	; 0x2c
 800cbd0:	46bd      	mov	sp, r7
 800cbd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbd6:	4770      	bx	lr
 800cbd8:	46020c00 	.word	0x46020c00
 800cbdc:	08014f00 	.word	0x08014f00
 800cbe0:	00f42400 	.word	0x00f42400
 800cbe4:	4b742400 	.word	0x4b742400
 800cbe8:	46000000 	.word	0x46000000

0800cbec <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800cbec:	b580      	push	{r7, lr}
 800cbee:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800cbf0:	f7ff fef4 	bl	800c9dc <HAL_RCC_GetSysClockFreq>
 800cbf4:	4602      	mov	r2, r0
 800cbf6:	4b07      	ldr	r3, [pc, #28]	; (800cc14 <HAL_RCC_GetHCLKFreq+0x28>)
 800cbf8:	6a1b      	ldr	r3, [r3, #32]
 800cbfa:	f003 030f 	and.w	r3, r3, #15
 800cbfe:	4906      	ldr	r1, [pc, #24]	; (800cc18 <HAL_RCC_GetHCLKFreq+0x2c>)
 800cc00:	5ccb      	ldrb	r3, [r1, r3]
 800cc02:	fa22 f303 	lsr.w	r3, r2, r3
 800cc06:	4a05      	ldr	r2, [pc, #20]	; (800cc1c <HAL_RCC_GetHCLKFreq+0x30>)
 800cc08:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 800cc0a:	4b04      	ldr	r3, [pc, #16]	; (800cc1c <HAL_RCC_GetHCLKFreq+0x30>)
 800cc0c:	681b      	ldr	r3, [r3, #0]
}
 800cc0e:	4618      	mov	r0, r3
 800cc10:	bd80      	pop	{r7, pc}
 800cc12:	bf00      	nop
 800cc14:	46020c00 	.word	0x46020c00
 800cc18:	08014ee8 	.word	0x08014ee8
 800cc1c:	20000000 	.word	0x20000000

0800cc20 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800cc20:	b580      	push	{r7, lr}
 800cc22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 800cc24:	f7ff ffe2 	bl	800cbec <HAL_RCC_GetHCLKFreq>
 800cc28:	4602      	mov	r2, r0
 800cc2a:	4b05      	ldr	r3, [pc, #20]	; (800cc40 <HAL_RCC_GetPCLK1Freq+0x20>)
 800cc2c:	6a1b      	ldr	r3, [r3, #32]
 800cc2e:	091b      	lsrs	r3, r3, #4
 800cc30:	f003 0307 	and.w	r3, r3, #7
 800cc34:	4903      	ldr	r1, [pc, #12]	; (800cc44 <HAL_RCC_GetPCLK1Freq+0x24>)
 800cc36:	5ccb      	ldrb	r3, [r1, r3]
 800cc38:	fa22 f303 	lsr.w	r3, r2, r3
}
 800cc3c:	4618      	mov	r0, r3
 800cc3e:	bd80      	pop	{r7, pc}
 800cc40:	46020c00 	.word	0x46020c00
 800cc44:	08014ef8 	.word	0x08014ef8

0800cc48 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800cc48:	b580      	push	{r7, lr}
 800cc4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]);
 800cc4c:	f7ff ffce 	bl	800cbec <HAL_RCC_GetHCLKFreq>
 800cc50:	4602      	mov	r2, r0
 800cc52:	4b05      	ldr	r3, [pc, #20]	; (800cc68 <HAL_RCC_GetPCLK2Freq+0x20>)
 800cc54:	6a1b      	ldr	r3, [r3, #32]
 800cc56:	0a1b      	lsrs	r3, r3, #8
 800cc58:	f003 0307 	and.w	r3, r3, #7
 800cc5c:	4903      	ldr	r1, [pc, #12]	; (800cc6c <HAL_RCC_GetPCLK2Freq+0x24>)
 800cc5e:	5ccb      	ldrb	r3, [r1, r3]
 800cc60:	fa22 f303 	lsr.w	r3, r2, r3
}
 800cc64:	4618      	mov	r0, r3
 800cc66:	bd80      	pop	{r7, pc}
 800cc68:	46020c00 	.word	0x46020c00
 800cc6c:	08014ef8 	.word	0x08014ef8

0800cc70 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 800cc70:	b580      	push	{r7, lr}
 800cc72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR3 & RCC_CFGR3_PPRE3) >> RCC_CFGR3_PPRE3_Pos]);
 800cc74:	f7ff ffba 	bl	800cbec <HAL_RCC_GetHCLKFreq>
 800cc78:	4602      	mov	r2, r0
 800cc7a:	4b05      	ldr	r3, [pc, #20]	; (800cc90 <HAL_RCC_GetPCLK3Freq+0x20>)
 800cc7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc7e:	091b      	lsrs	r3, r3, #4
 800cc80:	f003 0307 	and.w	r3, r3, #7
 800cc84:	4903      	ldr	r1, [pc, #12]	; (800cc94 <HAL_RCC_GetPCLK3Freq+0x24>)
 800cc86:	5ccb      	ldrb	r3, [r1, r3]
 800cc88:	fa22 f303 	lsr.w	r3, r2, r3
}
 800cc8c:	4618      	mov	r0, r3
 800cc8e:	bd80      	pop	{r7, pc}
 800cc90:	46020c00 	.word	0x46020c00
 800cc94:	08014ef8 	.word	0x08014ef8

0800cc98 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *pRCC_ClkInitStruct, uint32_t *pFLatency)
{
 800cc98:	b480      	push	{r7}
 800cc9a:	b083      	sub	sp, #12
 800cc9c:	af00      	add	r7, sp, #0
 800cc9e:	6078      	str	r0, [r7, #4]
 800cca0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(pRCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  pRCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | \
 800cca2:	687b      	ldr	r3, [r7, #4]
 800cca4:	221f      	movs	r2, #31
 800cca6:	601a      	str	r2, [r3, #0]
                                  RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_PCLK3;

  /* Get the SYSCLK configuration --------------------------------------------*/
  pRCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR1 & RCC_CFGR1_SW);
 800cca8:	4b15      	ldr	r3, [pc, #84]	; (800cd00 <HAL_RCC_GetClockConfig+0x68>)
 800ccaa:	69db      	ldr	r3, [r3, #28]
 800ccac:	f003 0203 	and.w	r2, r3, #3
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR2 & RCC_CFGR2_HPRE);
 800ccb4:	4b12      	ldr	r3, [pc, #72]	; (800cd00 <HAL_RCC_GetClockConfig+0x68>)
 800ccb6:	6a1b      	ldr	r3, [r3, #32]
 800ccb8:	f003 020f 	and.w	r2, r3, #15
 800ccbc:	687b      	ldr	r3, [r7, #4]
 800ccbe:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR2 & RCC_CFGR2_PPRE1);
 800ccc0:	4b0f      	ldr	r3, [pc, #60]	; (800cd00 <HAL_RCC_GetClockConfig+0x68>)
 800ccc2:	6a1b      	ldr	r3, [r3, #32]
 800ccc4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800ccc8:	687b      	ldr	r3, [r7, #4]
 800ccca:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4);
 800cccc:	4b0c      	ldr	r3, [pc, #48]	; (800cd00 <HAL_RCC_GetClockConfig+0x68>)
 800ccce:	6a1b      	ldr	r3, [r3, #32]
 800ccd0:	091b      	lsrs	r3, r3, #4
 800ccd2:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800ccd6:	687b      	ldr	r3, [r7, #4]
 800ccd8:	611a      	str	r2, [r3, #16]

  /* Get the APB3 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->CFGR3 & RCC_CFGR3_PPRE3);
 800ccda:	4b09      	ldr	r3, [pc, #36]	; (800cd00 <HAL_RCC_GetClockConfig+0x68>)
 800ccdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ccde:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800cce2:	687b      	ldr	r3, [r7, #4]
 800cce4:	615a      	str	r2, [r3, #20]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800cce6:	4b07      	ldr	r3, [pc, #28]	; (800cd04 <HAL_RCC_GetClockConfig+0x6c>)
 800cce8:	681b      	ldr	r3, [r3, #0]
 800ccea:	f003 020f 	and.w	r2, r3, #15
 800ccee:	683b      	ldr	r3, [r7, #0]
 800ccf0:	601a      	str	r2, [r3, #0]
}
 800ccf2:	bf00      	nop
 800ccf4:	370c      	adds	r7, #12
 800ccf6:	46bd      	mov	sp, r7
 800ccf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccfc:	4770      	bx	lr
 800ccfe:	bf00      	nop
 800cd00:	46020c00 	.word	0x46020c00
 800cd04:	40022000 	.word	0x40022000

0800cd08 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800cd08:	b580      	push	{r7, lr}
 800cd0a:	b086      	sub	sp, #24
 800cd0c:	af00      	add	r7, sp, #0
 800cd0e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 800cd10:	4b3e      	ldr	r3, [pc, #248]	; (800ce0c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800cd12:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800cd16:	f003 0304 	and.w	r3, r3, #4
 800cd1a:	2b00      	cmp	r3, #0
 800cd1c:	d003      	beq.n	800cd26 <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800cd1e:	f7fe fd17 	bl	800b750 <HAL_PWREx_GetVoltageRange>
 800cd22:	6178      	str	r0, [r7, #20]
 800cd24:	e019      	b.n	800cd5a <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800cd26:	4b39      	ldr	r3, [pc, #228]	; (800ce0c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800cd28:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800cd2c:	4a37      	ldr	r2, [pc, #220]	; (800ce0c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800cd2e:	f043 0304 	orr.w	r3, r3, #4
 800cd32:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800cd36:	4b35      	ldr	r3, [pc, #212]	; (800ce0c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800cd38:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800cd3c:	f003 0304 	and.w	r3, r3, #4
 800cd40:	60fb      	str	r3, [r7, #12]
 800cd42:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800cd44:	f7fe fd04 	bl	800b750 <HAL_PWREx_GetVoltageRange>
 800cd48:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800cd4a:	4b30      	ldr	r3, [pc, #192]	; (800ce0c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800cd4c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800cd50:	4a2e      	ldr	r2, [pc, #184]	; (800ce0c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800cd52:	f023 0304 	bic.w	r3, r3, #4
 800cd56:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 800cd5a:	697b      	ldr	r3, [r7, #20]
 800cd5c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800cd60:	d003      	beq.n	800cd6a <RCC_SetFlashLatencyFromMSIRange+0x62>
 800cd62:	697b      	ldr	r3, [r7, #20]
 800cd64:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cd68:	d109      	bne.n	800cd7e <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 800cd6a:	687b      	ldr	r3, [r7, #4]
 800cd6c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800cd70:	d202      	bcs.n	800cd78 <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 800cd72:	2301      	movs	r3, #1
 800cd74:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 800cd76:	e033      	b.n	800cde0 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 800cd78:	2300      	movs	r3, #0
 800cd7a:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 800cd7c:	e030      	b.n	800cde0 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 800cd7e:	687b      	ldr	r3, [r7, #4]
 800cd80:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800cd84:	d208      	bcs.n	800cd98 <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 800cd86:	697b      	ldr	r3, [r7, #20]
 800cd88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cd8c:	d102      	bne.n	800cd94 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 800cd8e:	2303      	movs	r3, #3
 800cd90:	613b      	str	r3, [r7, #16]
 800cd92:	e025      	b.n	800cde0 <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 800cd94:	2301      	movs	r3, #1
 800cd96:	e035      	b.n	800ce04 <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 800cd98:	687b      	ldr	r3, [r7, #4]
 800cd9a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cd9e:	d90f      	bls.n	800cdc0 <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 800cda0:	697b      	ldr	r3, [r7, #20]
 800cda2:	2b00      	cmp	r3, #0
 800cda4:	d109      	bne.n	800cdba <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 800cda6:	687b      	ldr	r3, [r7, #4]
 800cda8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800cdac:	d902      	bls.n	800cdb4 <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 800cdae:	2300      	movs	r3, #0
 800cdb0:	613b      	str	r3, [r7, #16]
 800cdb2:	e015      	b.n	800cde0 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 800cdb4:	2301      	movs	r3, #1
 800cdb6:	613b      	str	r3, [r7, #16]
 800cdb8:	e012      	b.n	800cde0 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 800cdba:	2300      	movs	r3, #0
 800cdbc:	613b      	str	r3, [r7, #16]
 800cdbe:	e00f      	b.n	800cde0 <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 800cdc0:	687b      	ldr	r3, [r7, #4]
 800cdc2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800cdc6:	d109      	bne.n	800cddc <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 800cdc8:	697b      	ldr	r3, [r7, #20]
 800cdca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cdce:	d102      	bne.n	800cdd6 <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 800cdd0:	2301      	movs	r3, #1
 800cdd2:	613b      	str	r3, [r7, #16]
 800cdd4:	e004      	b.n	800cde0 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 800cdd6:	2302      	movs	r3, #2
 800cdd8:	613b      	str	r3, [r7, #16]
 800cdda:	e001      	b.n	800cde0 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 800cddc:	2301      	movs	r3, #1
 800cdde:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800cde0:	4b0b      	ldr	r3, [pc, #44]	; (800ce10 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800cde2:	681b      	ldr	r3, [r3, #0]
 800cde4:	f023 020f 	bic.w	r2, r3, #15
 800cde8:	4909      	ldr	r1, [pc, #36]	; (800ce10 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800cdea:	693b      	ldr	r3, [r7, #16]
 800cdec:	4313      	orrs	r3, r2
 800cdee:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 800cdf0:	4b07      	ldr	r3, [pc, #28]	; (800ce10 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800cdf2:	681b      	ldr	r3, [r3, #0]
 800cdf4:	f003 030f 	and.w	r3, r3, #15
 800cdf8:	693a      	ldr	r2, [r7, #16]
 800cdfa:	429a      	cmp	r2, r3
 800cdfc:	d001      	beq.n	800ce02 <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 800cdfe:	2301      	movs	r3, #1
 800ce00:	e000      	b.n	800ce04 <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 800ce02:	2300      	movs	r3, #0
}
 800ce04:	4618      	mov	r0, r3
 800ce06:	3718      	adds	r7, #24
 800ce08:	46bd      	mov	sp, r7
 800ce0a:	bd80      	pop	{r7, pc}
 800ce0c:	46020c00 	.word	0x46020c00
 800ce10:	40022000 	.word	0x40022000

0800ce14 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 800ce14:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ce18:	b0ba      	sub	sp, #232	; 0xe8
 800ce1a:	af00      	add	r7, sp, #0
 800ce1c:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800ce20:	2300      	movs	r3, #0
 800ce22:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800ce26:	2300      	movs	r3, #0
 800ce28:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800ce2c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800ce30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce34:	f002 0401 	and.w	r4, r2, #1
 800ce38:	2500      	movs	r5, #0
 800ce3a:	ea54 0305 	orrs.w	r3, r4, r5
 800ce3e:	d00b      	beq.n	800ce58 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 800ce40:	4bcb      	ldr	r3, [pc, #812]	; (800d170 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800ce42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800ce46:	f023 0103 	bic.w	r1, r3, #3
 800ce4a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800ce4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ce50:	4ac7      	ldr	r2, [pc, #796]	; (800d170 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800ce52:	430b      	orrs	r3, r1
 800ce54:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800ce58:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800ce5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce60:	f002 0802 	and.w	r8, r2, #2
 800ce64:	f04f 0900 	mov.w	r9, #0
 800ce68:	ea58 0309 	orrs.w	r3, r8, r9
 800ce6c:	d00b      	beq.n	800ce86 <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 800ce6e:	4bc0      	ldr	r3, [pc, #768]	; (800d170 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800ce70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800ce74:	f023 010c 	bic.w	r1, r3, #12
 800ce78:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800ce7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ce7e:	4abc      	ldr	r2, [pc, #752]	; (800d170 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800ce80:	430b      	orrs	r3, r1
 800ce82:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800ce86:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800ce8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce8e:	f002 0a04 	and.w	sl, r2, #4
 800ce92:	f04f 0b00 	mov.w	fp, #0
 800ce96:	ea5a 030b 	orrs.w	r3, sl, fp
 800ce9a:	d00b      	beq.n	800ceb4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 800ce9c:	4bb4      	ldr	r3, [pc, #720]	; (800d170 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800ce9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800cea2:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 800cea6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800ceaa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ceac:	4ab0      	ldr	r2, [pc, #704]	; (800d170 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800ceae:	430b      	orrs	r3, r1
 800ceb0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800ceb4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800ceb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cebc:	f002 0308 	and.w	r3, r2, #8
 800cec0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800cec4:	2300      	movs	r3, #0
 800cec6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800ceca:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800cece:	460b      	mov	r3, r1
 800ced0:	4313      	orrs	r3, r2
 800ced2:	d00b      	beq.n	800ceec <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 800ced4:	4ba6      	ldr	r3, [pc, #664]	; (800d170 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800ced6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800ceda:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800cede:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800cee2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cee4:	4aa2      	ldr	r2, [pc, #648]	; (800d170 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800cee6:	430b      	orrs	r3, r1
 800cee8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800ceec:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800cef0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cef4:	f002 0310 	and.w	r3, r2, #16
 800cef8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800cefc:	2300      	movs	r3, #0
 800cefe:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800cf02:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800cf06:	460b      	mov	r3, r1
 800cf08:	4313      	orrs	r3, r2
 800cf0a:	d00b      	beq.n	800cf24 <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 800cf0c:	4b98      	ldr	r3, [pc, #608]	; (800d170 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800cf0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800cf12:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800cf16:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800cf1a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cf1c:	4a94      	ldr	r2, [pc, #592]	; (800d170 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800cf1e:	430b      	orrs	r3, r1
 800cf20:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
    __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
  }
#endif /* USART6 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800cf24:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800cf28:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf2c:	f002 0320 	and.w	r3, r2, #32
 800cf30:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800cf34:	2300      	movs	r3, #0
 800cf36:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800cf3a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800cf3e:	460b      	mov	r3, r1
 800cf40:	4313      	orrs	r3, r2
 800cf42:	d00b      	beq.n	800cf5c <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 800cf44:	4b8a      	ldr	r3, [pc, #552]	; (800d170 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800cf46:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800cf4a:	f023 0107 	bic.w	r1, r3, #7
 800cf4e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800cf52:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cf54:	4a86      	ldr	r2, [pc, #536]	; (800d170 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800cf56:	430b      	orrs	r3, r1
 800cf58:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800cf5c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800cf60:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf64:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800cf68:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800cf6c:	2300      	movs	r3, #0
 800cf6e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800cf72:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800cf76:	460b      	mov	r3, r1
 800cf78:	4313      	orrs	r3, r2
 800cf7a:	d00b      	beq.n	800cf94 <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 800cf7c:	4b7c      	ldr	r3, [pc, #496]	; (800d170 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800cf7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800cf82:	f423 6140 	bic.w	r1, r3, #3072	; 0xc00
 800cf86:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800cf8a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800cf8c:	4a78      	ldr	r2, [pc, #480]	; (800d170 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800cf8e:	430b      	orrs	r3, r1
 800cf90:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800cf94:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800cf98:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf9c:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800cfa0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800cfa4:	2300      	movs	r3, #0
 800cfa6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800cfaa:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800cfae:	460b      	mov	r3, r1
 800cfb0:	4313      	orrs	r3, r2
 800cfb2:	d00b      	beq.n	800cfcc <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 800cfb4:	4b6e      	ldr	r3, [pc, #440]	; (800d170 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800cfb6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800cfba:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800cfbe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800cfc2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cfc4:	4a6a      	ldr	r2, [pc, #424]	; (800d170 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800cfc6:	430b      	orrs	r3, r1
 800cfc8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800cfcc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800cfd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cfd4:	f402 7380 	and.w	r3, r2, #256	; 0x100
 800cfd8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800cfdc:	2300      	movs	r3, #0
 800cfde:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800cfe2:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 800cfe6:	460b      	mov	r3, r1
 800cfe8:	4313      	orrs	r3, r2
 800cfea:	d00b      	beq.n	800d004 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 800cfec:	4b60      	ldr	r3, [pc, #384]	; (800d170 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800cfee:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800cff2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800cff6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800cffa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cffc:	4a5c      	ldr	r2, [pc, #368]	; (800d170 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800cffe:	430b      	orrs	r3, r1
 800d000:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800d004:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800d008:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d00c:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 800d010:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800d014:	2300      	movs	r3, #0
 800d016:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800d01a:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800d01e:	460b      	mov	r3, r1
 800d020:	4313      	orrs	r3, r2
 800d022:	d00b      	beq.n	800d03c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 800d024:	4b52      	ldr	r3, [pc, #328]	; (800d170 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800d026:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800d02a:	f423 4140 	bic.w	r1, r3, #49152	; 0xc000
 800d02e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800d032:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d034:	4a4e      	ldr	r2, [pc, #312]	; (800d170 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800d036:	430b      	orrs	r3, r1
 800d038:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
    __HAL_RCC_I2C6_CONFIG(pPeriphClkInit->I2c6ClockSelection);
  }
#endif /* I2C6 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800d03c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800d040:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d044:	f402 7300 	and.w	r3, r2, #512	; 0x200
 800d048:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800d04c:	2300      	movs	r3, #0
 800d04e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800d052:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800d056:	460b      	mov	r3, r1
 800d058:	4313      	orrs	r3, r2
 800d05a:	d00b      	beq.n	800d074 <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 800d05c:	4b44      	ldr	r3, [pc, #272]	; (800d170 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800d05e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800d062:	f423 6140 	bic.w	r1, r3, #3072	; 0xc00
 800d066:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800d06a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d06c:	4a40      	ldr	r2, [pc, #256]	; (800d170 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800d06e:	430b      	orrs	r3, r1
 800d070:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800d074:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800d078:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d07c:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 800d080:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800d084:	2300      	movs	r3, #0
 800d086:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800d08a:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800d08e:	460b      	mov	r3, r1
 800d090:	4313      	orrs	r3, r2
 800d092:	d00b      	beq.n	800d0ac <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 800d094:	4b36      	ldr	r3, [pc, #216]	; (800d170 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800d096:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800d09a:	f423 2140 	bic.w	r1, r3, #786432	; 0xc0000
 800d09e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800d0a2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d0a4:	4a32      	ldr	r2, [pc, #200]	; (800d170 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800d0a6:	430b      	orrs	r3, r1
 800d0a8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 800d0ac:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800d0b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0b4:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800d0b8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800d0bc:	2300      	movs	r3, #0
 800d0be:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800d0c2:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800d0c6:	460b      	mov	r3, r1
 800d0c8:	4313      	orrs	r3, r2
 800d0ca:	d00c      	beq.n	800d0e6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 800d0cc:	4b28      	ldr	r3, [pc, #160]	; (800d170 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800d0ce:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800d0d2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800d0d6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800d0da:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d0de:	4a24      	ldr	r2, [pc, #144]	; (800d170 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800d0e0:	430b      	orrs	r3, r1
 800d0e2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800d0e6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800d0ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0ee:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800d0f2:	67bb      	str	r3, [r7, #120]	; 0x78
 800d0f4:	2300      	movs	r3, #0
 800d0f6:	67fb      	str	r3, [r7, #124]	; 0x7c
 800d0f8:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800d0fc:	460b      	mov	r3, r1
 800d0fe:	4313      	orrs	r3, r2
 800d100:	d04f      	beq.n	800d1a2 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 800d102:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800d106:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d10a:	2b80      	cmp	r3, #128	; 0x80
 800d10c:	d02d      	beq.n	800d16a <HAL_RCCEx_PeriphCLKConfig+0x356>
 800d10e:	2b80      	cmp	r3, #128	; 0x80
 800d110:	d827      	bhi.n	800d162 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 800d112:	2b60      	cmp	r3, #96	; 0x60
 800d114:	d02e      	beq.n	800d174 <HAL_RCCEx_PeriphCLKConfig+0x360>
 800d116:	2b60      	cmp	r3, #96	; 0x60
 800d118:	d823      	bhi.n	800d162 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 800d11a:	2b40      	cmp	r3, #64	; 0x40
 800d11c:	d006      	beq.n	800d12c <HAL_RCCEx_PeriphCLKConfig+0x318>
 800d11e:	2b40      	cmp	r3, #64	; 0x40
 800d120:	d81f      	bhi.n	800d162 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 800d122:	2b00      	cmp	r3, #0
 800d124:	d009      	beq.n	800d13a <HAL_RCCEx_PeriphCLKConfig+0x326>
 800d126:	2b20      	cmp	r3, #32
 800d128:	d011      	beq.n	800d14e <HAL_RCCEx_PeriphCLKConfig+0x33a>
 800d12a:	e01a      	b.n	800d162 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800d12c:	4b10      	ldr	r3, [pc, #64]	; (800d170 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800d12e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d130:	4a0f      	ldr	r2, [pc, #60]	; (800d170 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800d132:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d136:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 800d138:	e01d      	b.n	800d176 <HAL_RCCEx_PeriphCLKConfig+0x362>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800d13a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800d13e:	3308      	adds	r3, #8
 800d140:	4618      	mov	r0, r3
 800d142:	f002 f981 	bl	800f448 <RCCEx_PLL2_Config>
 800d146:	4603      	mov	r3, r0
 800d148:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* SAI1 clock source config set later after clock selection check */
        break;
 800d14c:	e013      	b.n	800d176 <HAL_RCCEx_PeriphCLKConfig+0x362>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800d14e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800d152:	332c      	adds	r3, #44	; 0x2c
 800d154:	4618      	mov	r0, r3
 800d156:	f002 fa0f 	bl	800f578 <RCCEx_PLL3_Config>
 800d15a:	4603      	mov	r3, r0
 800d15c:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* SAI1 clock source config set later after clock selection check */
        break;
 800d160:	e009      	b.n	800d176 <HAL_RCCEx_PeriphCLKConfig+0x362>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d162:	2301      	movs	r3, #1
 800d164:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 800d168:	e005      	b.n	800d176 <HAL_RCCEx_PeriphCLKConfig+0x362>
        break;
 800d16a:	bf00      	nop
 800d16c:	e003      	b.n	800d176 <HAL_RCCEx_PeriphCLKConfig+0x362>
 800d16e:	bf00      	nop
 800d170:	46020c00 	.word	0x46020c00
        break;
 800d174:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d176:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800d17a:	2b00      	cmp	r3, #0
 800d17c:	d10d      	bne.n	800d19a <HAL_RCCEx_PeriphCLKConfig+0x386>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 800d17e:	4bb6      	ldr	r3, [pc, #728]	; (800d458 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800d180:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800d184:	f023 01e0 	bic.w	r1, r3, #224	; 0xe0
 800d188:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800d18c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d190:	4ab1      	ldr	r2, [pc, #708]	; (800d458 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800d192:	430b      	orrs	r3, r1
 800d194:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 800d198:	e003      	b.n	800d1a2 <HAL_RCCEx_PeriphCLKConfig+0x38e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d19a:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800d19e:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800d1a2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800d1a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1aa:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 800d1ae:	673b      	str	r3, [r7, #112]	; 0x70
 800d1b0:	2300      	movs	r3, #0
 800d1b2:	677b      	str	r3, [r7, #116]	; 0x74
 800d1b4:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800d1b8:	460b      	mov	r3, r1
 800d1ba:	4313      	orrs	r3, r2
 800d1bc:	d053      	beq.n	800d266 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 800d1be:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800d1c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800d1c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d1ca:	d033      	beq.n	800d234 <HAL_RCCEx_PeriphCLKConfig+0x420>
 800d1cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d1d0:	d82c      	bhi.n	800d22c <HAL_RCCEx_PeriphCLKConfig+0x418>
 800d1d2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800d1d6:	d02f      	beq.n	800d238 <HAL_RCCEx_PeriphCLKConfig+0x424>
 800d1d8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800d1dc:	d826      	bhi.n	800d22c <HAL_RCCEx_PeriphCLKConfig+0x418>
 800d1de:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d1e2:	d008      	beq.n	800d1f6 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
 800d1e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d1e8:	d820      	bhi.n	800d22c <HAL_RCCEx_PeriphCLKConfig+0x418>
 800d1ea:	2b00      	cmp	r3, #0
 800d1ec:	d00a      	beq.n	800d204 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
 800d1ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d1f2:	d011      	beq.n	800d218 <HAL_RCCEx_PeriphCLKConfig+0x404>
 800d1f4:	e01a      	b.n	800d22c <HAL_RCCEx_PeriphCLKConfig+0x418>
    {
      case RCC_SAI2CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800d1f6:	4b98      	ldr	r3, [pc, #608]	; (800d458 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800d1f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d1fa:	4a97      	ldr	r2, [pc, #604]	; (800d458 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800d1fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d200:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 800d202:	e01a      	b.n	800d23a <HAL_RCCEx_PeriphCLKConfig+0x426>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800d204:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800d208:	3308      	adds	r3, #8
 800d20a:	4618      	mov	r0, r3
 800d20c:	f002 f91c 	bl	800f448 <RCCEx_PLL2_Config>
 800d210:	4603      	mov	r3, r0
 800d212:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* SAI2 clock source config set later after clock selection check */
        break;
 800d216:	e010      	b.n	800d23a <HAL_RCCEx_PeriphCLKConfig+0x426>

      case RCC_SAI2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800d218:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800d21c:	332c      	adds	r3, #44	; 0x2c
 800d21e:	4618      	mov	r0, r3
 800d220:	f002 f9aa 	bl	800f578 <RCCEx_PLL3_Config>
 800d224:	4603      	mov	r3, r0
 800d226:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* SAI2 clock source config set later after clock selection check */
        break;
 800d22a:	e006      	b.n	800d23a <HAL_RCCEx_PeriphCLKConfig+0x426>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d22c:	2301      	movs	r3, #1
 800d22e:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 800d232:	e002      	b.n	800d23a <HAL_RCCEx_PeriphCLKConfig+0x426>
        break;
 800d234:	bf00      	nop
 800d236:	e000      	b.n	800d23a <HAL_RCCEx_PeriphCLKConfig+0x426>
        break;
 800d238:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d23a:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800d23e:	2b00      	cmp	r3, #0
 800d240:	d10d      	bne.n	800d25e <HAL_RCCEx_PeriphCLKConfig+0x44a>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 800d242:	4b85      	ldr	r3, [pc, #532]	; (800d458 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800d244:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800d248:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 800d24c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800d250:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800d254:	4a80      	ldr	r2, [pc, #512]	; (800d458 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800d256:	430b      	orrs	r3, r1
 800d258:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 800d25c:	e003      	b.n	800d266 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d25e:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800d262:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 800d266:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800d26a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d26e:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 800d272:	66bb      	str	r3, [r7, #104]	; 0x68
 800d274:	2300      	movs	r3, #0
 800d276:	66fb      	str	r3, [r7, #108]	; 0x6c
 800d278:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800d27c:	460b      	mov	r3, r1
 800d27e:	4313      	orrs	r3, r2
 800d280:	d046      	beq.n	800d310 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 800d282:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800d286:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800d28a:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800d28e:	d028      	beq.n	800d2e2 <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 800d290:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800d294:	d821      	bhi.n	800d2da <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 800d296:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800d29a:	d022      	beq.n	800d2e2 <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 800d29c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800d2a0:	d81b      	bhi.n	800d2da <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 800d2a2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800d2a6:	d01c      	beq.n	800d2e2 <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 800d2a8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800d2ac:	d815      	bhi.n	800d2da <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 800d2ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d2b2:	d008      	beq.n	800d2c6 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 800d2b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d2b8:	d80f      	bhi.n	800d2da <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 800d2ba:	2b00      	cmp	r3, #0
 800d2bc:	d011      	beq.n	800d2e2 <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 800d2be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d2c2:	d00e      	beq.n	800d2e2 <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 800d2c4:	e009      	b.n	800d2da <HAL_RCCEx_PeriphCLKConfig+0x4c6>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800d2c6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800d2ca:	3308      	adds	r3, #8
 800d2cc:	4618      	mov	r0, r3
 800d2ce:	f002 f8bb 	bl	800f448 <RCCEx_PLL2_Config>
 800d2d2:	4603      	mov	r3, r0
 800d2d4:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 800d2d8:	e004      	b.n	800d2e4 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800d2da:	2301      	movs	r3, #1
 800d2dc:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 800d2e0:	e000      	b.n	800d2e4 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
        break;
 800d2e2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d2e4:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800d2e8:	2b00      	cmp	r3, #0
 800d2ea:	d10d      	bne.n	800d308 <HAL_RCCEx_PeriphCLKConfig+0x4f4>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 800d2ec:	4b5a      	ldr	r3, [pc, #360]	; (800d458 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800d2ee:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800d2f2:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 800d2f6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800d2fa:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800d2fe:	4a56      	ldr	r2, [pc, #344]	; (800d458 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800d300:	430b      	orrs	r3, r1
 800d302:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800d306:	e003      	b.n	800d310 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d308:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800d30c:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 800d310:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800d314:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d318:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800d31c:	663b      	str	r3, [r7, #96]	; 0x60
 800d31e:	2300      	movs	r3, #0
 800d320:	667b      	str	r3, [r7, #100]	; 0x64
 800d322:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800d326:	460b      	mov	r3, r1
 800d328:	4313      	orrs	r3, r2
 800d32a:	d03f      	beq.n	800d3ac <HAL_RCCEx_PeriphCLKConfig+0x598>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 800d32c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800d330:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d334:	2b04      	cmp	r3, #4
 800d336:	d81e      	bhi.n	800d376 <HAL_RCCEx_PeriphCLKConfig+0x562>
 800d338:	a201      	add	r2, pc, #4	; (adr r2, 800d340 <HAL_RCCEx_PeriphCLKConfig+0x52c>)
 800d33a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d33e:	bf00      	nop
 800d340:	0800d37f 	.word	0x0800d37f
 800d344:	0800d355 	.word	0x0800d355
 800d348:	0800d363 	.word	0x0800d363
 800d34c:	0800d37f 	.word	0x0800d37f
 800d350:	0800d37f 	.word	0x0800d37f
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800d354:	4b40      	ldr	r3, [pc, #256]	; (800d458 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800d356:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d358:	4a3f      	ldr	r2, [pc, #252]	; (800d458 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800d35a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d35e:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 800d360:	e00e      	b.n	800d380 <HAL_RCCEx_PeriphCLKConfig+0x56c>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800d362:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800d366:	332c      	adds	r3, #44	; 0x2c
 800d368:	4618      	mov	r0, r3
 800d36a:	f002 f905 	bl	800f578 <RCCEx_PLL3_Config>
 800d36e:	4603      	mov	r3, r0
 800d370:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 800d374:	e004      	b.n	800d380 <HAL_RCCEx_PeriphCLKConfig+0x56c>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800d376:	2301      	movs	r3, #1
 800d378:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 800d37c:	e000      	b.n	800d380 <HAL_RCCEx_PeriphCLKConfig+0x56c>
        break;
 800d37e:	bf00      	nop
    }
    if (ret == HAL_OK)
 800d380:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800d384:	2b00      	cmp	r3, #0
 800d386:	d10d      	bne.n	800d3a4 <HAL_RCCEx_PeriphCLKConfig+0x590>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 800d388:	4b33      	ldr	r3, [pc, #204]	; (800d458 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800d38a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800d38e:	f023 0107 	bic.w	r1, r3, #7
 800d392:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800d396:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d39a:	4a2f      	ldr	r2, [pc, #188]	; (800d458 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800d39c:	430b      	orrs	r3, r1
 800d39e:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 800d3a2:	e003      	b.n	800d3ac <HAL_RCCEx_PeriphCLKConfig+0x598>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d3a4:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800d3a8:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 800d3ac:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800d3b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3b4:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800d3b8:	65bb      	str	r3, [r7, #88]	; 0x58
 800d3ba:	2300      	movs	r3, #0
 800d3bc:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d3be:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800d3c2:	460b      	mov	r3, r1
 800d3c4:	4313      	orrs	r3, r2
 800d3c6:	d04d      	beq.n	800d464 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));
    switch (pPeriphClkInit->Adf1ClockSelection)
 800d3c8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800d3cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d3d0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800d3d4:	d028      	beq.n	800d428 <HAL_RCCEx_PeriphCLKConfig+0x614>
 800d3d6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800d3da:	d821      	bhi.n	800d420 <HAL_RCCEx_PeriphCLKConfig+0x60c>
 800d3dc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800d3e0:	d024      	beq.n	800d42c <HAL_RCCEx_PeriphCLKConfig+0x618>
 800d3e2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800d3e6:	d81b      	bhi.n	800d420 <HAL_RCCEx_PeriphCLKConfig+0x60c>
 800d3e8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d3ec:	d00e      	beq.n	800d40c <HAL_RCCEx_PeriphCLKConfig+0x5f8>
 800d3ee:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d3f2:	d815      	bhi.n	800d420 <HAL_RCCEx_PeriphCLKConfig+0x60c>
 800d3f4:	2b00      	cmp	r3, #0
 800d3f6:	d01b      	beq.n	800d430 <HAL_RCCEx_PeriphCLKConfig+0x61c>
 800d3f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d3fc:	d110      	bne.n	800d420 <HAL_RCCEx_PeriphCLKConfig+0x60c>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800d3fe:	4b16      	ldr	r3, [pc, #88]	; (800d458 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800d400:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d402:	4a15      	ldr	r2, [pc, #84]	; (800d458 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800d404:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d408:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 800d40a:	e012      	b.n	800d432 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800d40c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800d410:	332c      	adds	r3, #44	; 0x2c
 800d412:	4618      	mov	r0, r3
 800d414:	f002 f8b0 	bl	800f578 <RCCEx_PLL3_Config>
 800d418:	4603      	mov	r3, r0
 800d41a:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 800d41e:	e008      	b.n	800d432 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800d420:	2301      	movs	r3, #1
 800d422:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 800d426:	e004      	b.n	800d432 <HAL_RCCEx_PeriphCLKConfig+0x61e>
        break;
 800d428:	bf00      	nop
 800d42a:	e002      	b.n	800d432 <HAL_RCCEx_PeriphCLKConfig+0x61e>
        break;
 800d42c:	bf00      	nop
 800d42e:	e000      	b.n	800d432 <HAL_RCCEx_PeriphCLKConfig+0x61e>
        break;
 800d430:	bf00      	nop
    }
    if (ret == HAL_OK)
 800d432:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800d436:	2b00      	cmp	r3, #0
 800d438:	d110      	bne.n	800d45c <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 800d43a:	4b07      	ldr	r3, [pc, #28]	; (800d458 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800d43c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800d440:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 800d444:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800d448:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d44c:	4a02      	ldr	r2, [pc, #8]	; (800d458 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800d44e:	430b      	orrs	r3, r1
 800d450:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800d454:	e006      	b.n	800d464 <HAL_RCCEx_PeriphCLKConfig+0x650>
 800d456:	bf00      	nop
 800d458:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d45c:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800d460:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800d464:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800d468:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d46c:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800d470:	653b      	str	r3, [r7, #80]	; 0x50
 800d472:	2300      	movs	r3, #0
 800d474:	657b      	str	r3, [r7, #84]	; 0x54
 800d476:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800d47a:	460b      	mov	r3, r1
 800d47c:	4313      	orrs	r3, r2
 800d47e:	f000 80b5 	beq.w	800d5ec <HAL_RCCEx_PeriphCLKConfig+0x7d8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800d482:	2300      	movs	r3, #0
 800d484:	f887 30e1 	strb.w	r3, [r7, #225]	; 0xe1
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));
    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800d488:	4b9d      	ldr	r3, [pc, #628]	; (800d700 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800d48a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800d48e:	f003 0304 	and.w	r3, r3, #4
 800d492:	2b00      	cmp	r3, #0
 800d494:	d113      	bne.n	800d4be <HAL_RCCEx_PeriphCLKConfig+0x6aa>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800d496:	4b9a      	ldr	r3, [pc, #616]	; (800d700 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800d498:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800d49c:	4a98      	ldr	r2, [pc, #608]	; (800d700 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800d49e:	f043 0304 	orr.w	r3, r3, #4
 800d4a2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800d4a6:	4b96      	ldr	r3, [pc, #600]	; (800d700 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800d4a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800d4ac:	f003 0304 	and.w	r3, r3, #4
 800d4b0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800d4b4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
      pwrclkchanged = SET;
 800d4b8:	2301      	movs	r3, #1
 800d4ba:	f887 30e1 	strb.w	r3, [r7, #225]	; 0xe1
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 800d4be:	4b91      	ldr	r3, [pc, #580]	; (800d704 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 800d4c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d4c2:	4a90      	ldr	r2, [pc, #576]	; (800d704 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 800d4c4:	f043 0301 	orr.w	r3, r3, #1
 800d4c8:	6293      	str	r3, [r2, #40]	; 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800d4ca:	f7f9 fc61 	bl	8006d90 <HAL_GetTick>
 800d4ce:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800d4d2:	e00b      	b.n	800d4ec <HAL_RCCEx_PeriphCLKConfig+0x6d8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800d4d4:	f7f9 fc5c 	bl	8006d90 <HAL_GetTick>
 800d4d8:	4602      	mov	r2, r0
 800d4da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d4de:	1ad3      	subs	r3, r2, r3
 800d4e0:	2b02      	cmp	r3, #2
 800d4e2:	d903      	bls.n	800d4ec <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      {
        ret = HAL_TIMEOUT;
 800d4e4:	2303      	movs	r3, #3
 800d4e6:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 800d4ea:	e005      	b.n	800d4f8 <HAL_RCCEx_PeriphCLKConfig+0x6e4>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800d4ec:	4b85      	ldr	r3, [pc, #532]	; (800d704 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 800d4ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d4f0:	f003 0301 	and.w	r3, r3, #1
 800d4f4:	2b00      	cmp	r3, #0
 800d4f6:	d0ed      	beq.n	800d4d4 <HAL_RCCEx_PeriphCLKConfig+0x6c0>
      }
    }

    if (ret == HAL_OK)
 800d4f8:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800d4fc:	2b00      	cmp	r3, #0
 800d4fe:	d165      	bne.n	800d5cc <HAL_RCCEx_PeriphCLKConfig+0x7b8>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800d500:	4b7f      	ldr	r3, [pc, #508]	; (800d700 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800d502:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800d506:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d50a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 800d50e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d512:	2b00      	cmp	r3, #0
 800d514:	d023      	beq.n	800d55e <HAL_RCCEx_PeriphCLKConfig+0x74a>
 800d516:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800d51a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 800d51e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d522:	4293      	cmp	r3, r2
 800d524:	d01b      	beq.n	800d55e <HAL_RCCEx_PeriphCLKConfig+0x74a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800d526:	4b76      	ldr	r3, [pc, #472]	; (800d700 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800d528:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800d52c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d530:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800d534:	4b72      	ldr	r3, [pc, #456]	; (800d700 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800d536:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800d53a:	4a71      	ldr	r2, [pc, #452]	; (800d700 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800d53c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d540:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 800d544:	4b6e      	ldr	r3, [pc, #440]	; (800d700 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800d546:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800d54a:	4a6d      	ldr	r2, [pc, #436]	; (800d700 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800d54c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d550:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800d554:	4a6a      	ldr	r2, [pc, #424]	; (800d700 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800d556:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d55a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800d55e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d562:	f003 0301 	and.w	r3, r3, #1
 800d566:	2b00      	cmp	r3, #0
 800d568:	d019      	beq.n	800d59e <HAL_RCCEx_PeriphCLKConfig+0x78a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d56a:	f7f9 fc11 	bl	8006d90 <HAL_GetTick>
 800d56e:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800d572:	e00d      	b.n	800d590 <HAL_RCCEx_PeriphCLKConfig+0x77c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800d574:	f7f9 fc0c 	bl	8006d90 <HAL_GetTick>
 800d578:	4602      	mov	r2, r0
 800d57a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d57e:	1ad2      	subs	r2, r2, r3
 800d580:	f241 3388 	movw	r3, #5000	; 0x1388
 800d584:	429a      	cmp	r2, r3
 800d586:	d903      	bls.n	800d590 <HAL_RCCEx_PeriphCLKConfig+0x77c>
          {
            ret = HAL_TIMEOUT;
 800d588:	2303      	movs	r3, #3
 800d58a:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
            break;
 800d58e:	e006      	b.n	800d59e <HAL_RCCEx_PeriphCLKConfig+0x78a>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800d590:	4b5b      	ldr	r3, [pc, #364]	; (800d700 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800d592:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800d596:	f003 0302 	and.w	r3, r3, #2
 800d59a:	2b00      	cmp	r3, #0
 800d59c:	d0ea      	beq.n	800d574 <HAL_RCCEx_PeriphCLKConfig+0x760>
          }
        }
      }

      if (ret == HAL_OK)
 800d59e:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800d5a2:	2b00      	cmp	r3, #0
 800d5a4:	d10d      	bne.n	800d5c2 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 800d5a6:	4b56      	ldr	r3, [pc, #344]	; (800d700 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800d5a8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800d5ac:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800d5b0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800d5b4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800d5b8:	4a51      	ldr	r2, [pc, #324]	; (800d700 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800d5ba:	430b      	orrs	r3, r1
 800d5bc:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800d5c0:	e008      	b.n	800d5d4 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800d5c2:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800d5c6:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
 800d5ca:	e003      	b.n	800d5d4 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d5cc:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800d5d0:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800d5d4:	f897 30e1 	ldrb.w	r3, [r7, #225]	; 0xe1
 800d5d8:	2b01      	cmp	r3, #1
 800d5da:	d107      	bne.n	800d5ec <HAL_RCCEx_PeriphCLKConfig+0x7d8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800d5dc:	4b48      	ldr	r3, [pc, #288]	; (800d700 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800d5de:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800d5e2:	4a47      	ldr	r2, [pc, #284]	; (800d700 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800d5e4:	f023 0304 	bic.w	r3, r3, #4
 800d5e8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }

  /*-------------------------------------- ICLK Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 800d5ec:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800d5f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5f4:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800d5f8:	64bb      	str	r3, [r7, #72]	; 0x48
 800d5fa:	2300      	movs	r3, #0
 800d5fc:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d5fe:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800d602:	460b      	mov	r3, r1
 800d604:	4313      	orrs	r3, r2
 800d606:	d042      	beq.n	800d68e <HAL_RCCEx_PeriphCLKConfig+0x87a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(pPeriphClkInit->IclkClockSelection));

    switch (pPeriphClkInit->IclkClockSelection)
 800d608:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800d60c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800d610:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800d614:	d022      	beq.n	800d65c <HAL_RCCEx_PeriphCLKConfig+0x848>
 800d616:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800d61a:	d81b      	bhi.n	800d654 <HAL_RCCEx_PeriphCLKConfig+0x840>
 800d61c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d620:	d011      	beq.n	800d646 <HAL_RCCEx_PeriphCLKConfig+0x832>
 800d622:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d626:	d815      	bhi.n	800d654 <HAL_RCCEx_PeriphCLKConfig+0x840>
 800d628:	2b00      	cmp	r3, #0
 800d62a:	d019      	beq.n	800d660 <HAL_RCCEx_PeriphCLKConfig+0x84c>
 800d62c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800d630:	d110      	bne.n	800d654 <HAL_RCCEx_PeriphCLKConfig+0x840>
    {
      case RCC_ICLK_CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800d632:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800d636:	3308      	adds	r3, #8
 800d638:	4618      	mov	r0, r3
 800d63a:	f001 ff05 	bl	800f448 <RCCEx_PLL2_Config>
 800d63e:	4603      	mov	r3, r0
 800d640:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 800d644:	e00d      	b.n	800d662 <HAL_RCCEx_PeriphCLKConfig+0x84e>
      case RCC_ICLK_CLKSOURCE_PLL1:
        /* Enable ICLK Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d646:	4b2e      	ldr	r3, [pc, #184]	; (800d700 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800d648:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d64a:	4a2d      	ldr	r2, [pc, #180]	; (800d700 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800d64c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800d650:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 800d652:	e006      	b.n	800d662 <HAL_RCCEx_PeriphCLKConfig+0x84e>
      case RCC_ICLK_CLKSOURCE_HSI48:
        break;
      case RCC_ICLK_CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800d654:	2301      	movs	r3, #1
 800d656:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 800d65a:	e002      	b.n	800d662 <HAL_RCCEx_PeriphCLKConfig+0x84e>
        break;
 800d65c:	bf00      	nop
 800d65e:	e000      	b.n	800d662 <HAL_RCCEx_PeriphCLKConfig+0x84e>
        break;
 800d660:	bf00      	nop
    }
    if (ret == HAL_OK)
 800d662:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800d666:	2b00      	cmp	r3, #0
 800d668:	d10d      	bne.n	800d686 <HAL_RCCEx_PeriphCLKConfig+0x872>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 800d66a:	4b25      	ldr	r3, [pc, #148]	; (800d700 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800d66c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800d670:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 800d674:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800d678:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800d67c:	4a20      	ldr	r2, [pc, #128]	; (800d700 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800d67e:	430b      	orrs	r3, r1
 800d680:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800d684:	e003      	b.n	800d68e <HAL_RCCEx_PeriphCLKConfig+0x87a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d686:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800d68a:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800d68e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800d692:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d696:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800d69a:	643b      	str	r3, [r7, #64]	; 0x40
 800d69c:	2300      	movs	r3, #0
 800d69e:	647b      	str	r3, [r7, #68]	; 0x44
 800d6a0:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800d6a4:	460b      	mov	r3, r1
 800d6a6:	4313      	orrs	r3, r2
 800d6a8:	d032      	beq.n	800d710 <HAL_RCCEx_PeriphCLKConfig+0x8fc>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 800d6aa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800d6ae:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800d6b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d6b6:	d00b      	beq.n	800d6d0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 800d6b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d6bc:	d804      	bhi.n	800d6c8 <HAL_RCCEx_PeriphCLKConfig+0x8b4>
 800d6be:	2b00      	cmp	r3, #0
 800d6c0:	d008      	beq.n	800d6d4 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
 800d6c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d6c6:	d007      	beq.n	800d6d8 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 800d6c8:	2301      	movs	r3, #1
 800d6ca:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 800d6ce:	e004      	b.n	800d6da <HAL_RCCEx_PeriphCLKConfig+0x8c6>
        break;
 800d6d0:	bf00      	nop
 800d6d2:	e002      	b.n	800d6da <HAL_RCCEx_PeriphCLKConfig+0x8c6>
        break;
 800d6d4:	bf00      	nop
 800d6d6:	e000      	b.n	800d6da <HAL_RCCEx_PeriphCLKConfig+0x8c6>
        break;
 800d6d8:	bf00      	nop
    }
    if (ret == HAL_OK)
 800d6da:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800d6de:	2b00      	cmp	r3, #0
 800d6e0:	d112      	bne.n	800d708 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 800d6e2:	4b07      	ldr	r3, [pc, #28]	; (800d700 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800d6e4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800d6e8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800d6ec:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800d6f0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800d6f4:	4a02      	ldr	r2, [pc, #8]	; (800d700 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800d6f6:	430b      	orrs	r3, r1
 800d6f8:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 800d6fc:	e008      	b.n	800d710 <HAL_RCCEx_PeriphCLKConfig+0x8fc>
 800d6fe:	bf00      	nop
 800d700:	46020c00 	.word	0x46020c00
 800d704:	46020800 	.word	0x46020800
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d708:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800d70c:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }
  /*-------------------------- SAES clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAES) == RCC_PERIPHCLK_SAES)
 800d710:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800d714:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d718:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800d71c:	63bb      	str	r3, [r7, #56]	; 0x38
 800d71e:	2300      	movs	r3, #0
 800d720:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d722:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800d726:	460b      	mov	r3, r1
 800d728:	4313      	orrs	r3, r2
 800d72a:	d00c      	beq.n	800d746 <HAL_RCCEx_PeriphCLKConfig+0x932>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAESCLKSOURCE(pPeriphClkInit->SaesClockSelection));

    /* Configure the SAES clock source */
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
 800d72c:	4b98      	ldr	r3, [pc, #608]	; (800d990 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800d72e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800d732:	f423 6100 	bic.w	r1, r3, #2048	; 0x800
 800d736:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800d73a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800d73e:	4a94      	ldr	r2, [pc, #592]	; (800d990 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800d740:	430b      	orrs	r3, r1
 800d742:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
  }
  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 800d746:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800d74a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d74e:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800d752:	633b      	str	r3, [r7, #48]	; 0x30
 800d754:	2300      	movs	r3, #0
 800d756:	637b      	str	r3, [r7, #52]	; 0x34
 800d758:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800d75c:	460b      	mov	r3, r1
 800d75e:	4313      	orrs	r3, r2
 800d760:	d019      	beq.n	800d796 <HAL_RCCEx_PeriphCLKConfig+0x982>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 800d762:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800d766:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800d76a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800d76e:	d105      	bne.n	800d77c <HAL_RCCEx_PeriphCLKConfig+0x968>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800d770:	4b87      	ldr	r3, [pc, #540]	; (800d990 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800d772:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d774:	4a86      	ldr	r2, [pc, #536]	; (800d990 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800d776:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d77a:	6293      	str	r3, [r2, #40]	; 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 800d77c:	4b84      	ldr	r3, [pc, #528]	; (800d990 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800d77e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800d782:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 800d786:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800d78a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800d78e:	4a80      	ldr	r2, [pc, #512]	; (800d990 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800d790:	430b      	orrs	r3, r1
 800d792:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 800d796:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800d79a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d79e:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800d7a2:	62bb      	str	r3, [r7, #40]	; 0x28
 800d7a4:	2300      	movs	r3, #0
 800d7a6:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d7a8:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800d7ac:	460b      	mov	r3, r1
 800d7ae:	4313      	orrs	r3, r2
 800d7b0:	d00c      	beq.n	800d7cc <HAL_RCCEx_PeriphCLKConfig+0x9b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 800d7b2:	4b77      	ldr	r3, [pc, #476]	; (800d990 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800d7b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800d7b8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800d7bc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800d7c0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800d7c4:	4972      	ldr	r1, [pc, #456]	; (800d990 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800d7c6:	4313      	orrs	r3, r2
 800d7c8:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 800d7cc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800d7d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7d4:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 800d7d8:	623b      	str	r3, [r7, #32]
 800d7da:	2300      	movs	r3, #0
 800d7dc:	627b      	str	r3, [r7, #36]	; 0x24
 800d7de:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800d7e2:	460b      	mov	r3, r1
 800d7e4:	4313      	orrs	r3, r2
 800d7e6:	d00c      	beq.n	800d802 <HAL_RCCEx_PeriphCLKConfig+0x9ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 800d7e8:	4b69      	ldr	r3, [pc, #420]	; (800d990 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800d7ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800d7ee:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800d7f2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800d7f6:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800d7fa:	4965      	ldr	r1, [pc, #404]	; (800d990 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800d7fc:	4313      	orrs	r3, r2
 800d7fe:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 800d802:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800d806:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d80a:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 800d80e:	61bb      	str	r3, [r7, #24]
 800d810:	2300      	movs	r3, #0
 800d812:	61fb      	str	r3, [r7, #28]
 800d814:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800d818:	460b      	mov	r3, r1
 800d81a:	4313      	orrs	r3, r2
 800d81c:	d00c      	beq.n	800d838 <HAL_RCCEx_PeriphCLKConfig+0xa24>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 800d81e:	4b5c      	ldr	r3, [pc, #368]	; (800d990 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800d820:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800d824:	f023 0218 	bic.w	r2, r3, #24
 800d828:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800d82c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800d830:	4957      	ldr	r1, [pc, #348]	; (800d990 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800d832:	4313      	orrs	r3, r2
 800d834:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800d838:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800d83c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d840:	f002 6380 	and.w	r3, r2, #67108864	; 0x4000000
 800d844:	613b      	str	r3, [r7, #16]
 800d846:	2300      	movs	r3, #0
 800d848:	617b      	str	r3, [r7, #20]
 800d84a:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800d84e:	460b      	mov	r3, r1
 800d850:	4313      	orrs	r3, r2
 800d852:	d032      	beq.n	800d8ba <HAL_RCCEx_PeriphCLKConfig+0xaa6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 800d854:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800d858:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800d85c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800d860:	d105      	bne.n	800d86e <HAL_RCCEx_PeriphCLKConfig+0xa5a>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d862:	4b4b      	ldr	r3, [pc, #300]	; (800d990 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800d864:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d866:	4a4a      	ldr	r2, [pc, #296]	; (800d990 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800d868:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800d86c:	6293      	str	r3, [r2, #40]	; 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 800d86e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800d872:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800d876:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800d87a:	d108      	bne.n	800d88e <HAL_RCCEx_PeriphCLKConfig+0xa7a>
    {
      /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800d87c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800d880:	3308      	adds	r3, #8
 800d882:	4618      	mov	r0, r3
 800d884:	f001 fde0 	bl	800f448 <RCCEx_PLL2_Config>
 800d888:	4603      	mov	r3, r0
 800d88a:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
    }
    if (ret == HAL_OK)
 800d88e:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800d892:	2b00      	cmp	r3, #0
 800d894:	d10d      	bne.n	800d8b2 <HAL_RCCEx_PeriphCLKConfig+0xa9e>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 800d896:	4b3e      	ldr	r3, [pc, #248]	; (800d990 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800d898:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800d89c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800d8a0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800d8a4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800d8a8:	4939      	ldr	r1, [pc, #228]	; (800d990 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800d8aa:	4313      	orrs	r3, r2
 800d8ac:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 800d8b0:	e003      	b.n	800d8ba <HAL_RCCEx_PeriphCLKConfig+0xaa6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d8b2:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800d8b6:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }
#endif /* defined(HSPI1) */

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 800d8ba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800d8be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8c2:	f002 6300 	and.w	r3, r2, #134217728	; 0x8000000
 800d8c6:	60bb      	str	r3, [r7, #8]
 800d8c8:	2300      	movs	r3, #0
 800d8ca:	60fb      	str	r3, [r7, #12]
 800d8cc:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800d8d0:	460b      	mov	r3, r1
 800d8d2:	4313      	orrs	r3, r2
 800d8d4:	d03a      	beq.n	800d94c <HAL_RCCEx_PeriphCLKConfig+0xb38>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 800d8d6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800d8da:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d8de:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800d8e2:	d00e      	beq.n	800d902 <HAL_RCCEx_PeriphCLKConfig+0xaee>
 800d8e4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800d8e8:	d815      	bhi.n	800d916 <HAL_RCCEx_PeriphCLKConfig+0xb02>
 800d8ea:	2b00      	cmp	r3, #0
 800d8ec:	d017      	beq.n	800d91e <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 800d8ee:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800d8f2:	d110      	bne.n	800d916 <HAL_RCCEx_PeriphCLKConfig+0xb02>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d8f4:	4b26      	ldr	r3, [pc, #152]	; (800d990 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800d8f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d8f8:	4a25      	ldr	r2, [pc, #148]	; (800d990 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800d8fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800d8fe:	6293      	str	r3, [r2, #40]	; 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 800d900:	e00e      	b.n	800d920 <HAL_RCCEx_PeriphCLKConfig+0xb0c>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800d902:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800d906:	3308      	adds	r3, #8
 800d908:	4618      	mov	r0, r3
 800d90a:	f001 fd9d 	bl	800f448 <RCCEx_PLL2_Config>
 800d90e:	4603      	mov	r3, r0
 800d910:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 800d914:	e004      	b.n	800d920 <HAL_RCCEx_PeriphCLKConfig+0xb0c>
      default:
        ret = HAL_ERROR;
 800d916:	2301      	movs	r3, #1
 800d918:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 800d91c:	e000      	b.n	800d920 <HAL_RCCEx_PeriphCLKConfig+0xb0c>
        break;
 800d91e:	bf00      	nop
    }
    if (ret == HAL_OK)
 800d920:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800d924:	2b00      	cmp	r3, #0
 800d926:	d10d      	bne.n	800d944 <HAL_RCCEx_PeriphCLKConfig+0xb30>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 800d928:	4b19      	ldr	r3, [pc, #100]	; (800d990 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800d92a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800d92e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800d932:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800d936:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d93a:	4915      	ldr	r1, [pc, #84]	; (800d990 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800d93c:	4313      	orrs	r3, r2
 800d93e:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
 800d942:	e003      	b.n	800d94c <HAL_RCCEx_PeriphCLKConfig+0xb38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d944:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800d948:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 800d94c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800d950:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d954:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 800d958:	603b      	str	r3, [r7, #0]
 800d95a:	2300      	movs	r3, #0
 800d95c:	607b      	str	r3, [r7, #4]
 800d95e:	e9d7 1200 	ldrd	r1, r2, [r7]
 800d962:	460b      	mov	r3, r1
 800d964:	4313      	orrs	r3, r2
 800d966:	d00c      	beq.n	800d982 <HAL_RCCEx_PeriphCLKConfig+0xb6e>

    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 800d968:	4b09      	ldr	r3, [pc, #36]	; (800d990 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800d96a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800d96e:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800d972:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800d976:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800d97a:	4905      	ldr	r1, [pc, #20]	; (800d990 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800d97c:	4313      	orrs	r3, r2
 800d97e:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
    }
  }

#endif /* defined(USB_OTG_HS) */

  return status;
 800d982:	f897 30e2 	ldrb.w	r3, [r7, #226]	; 0xe2
}
 800d986:	4618      	mov	r0, r3
 800d988:	37e8      	adds	r7, #232	; 0xe8
 800d98a:	46bd      	mov	sp, r7
 800d98c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800d990:	46020c00 	.word	0x46020c00

0800d994 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800d994:	b480      	push	{r7}
 800d996:	b089      	sub	sp, #36	; 0x24
 800d998:	af00      	add	r7, sp, #0
 800d99a:	6078      	str	r0, [r7, #4]
  uint32_t pll1n;
  uint32_t pll1fracen;
  float_t fracn1;
  float_t pll1vco;

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 800d99c:	4bac      	ldr	r3, [pc, #688]	; (800dc50 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 800d99e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d9a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d9a4:	61bb      	str	r3, [r7, #24]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 800d9a6:	4baa      	ldr	r3, [pc, #680]	; (800dc50 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 800d9a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d9aa:	f003 0303 	and.w	r3, r3, #3
 800d9ae:	617b      	str	r3, [r7, #20]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 800d9b0:	4ba7      	ldr	r3, [pc, #668]	; (800dc50 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 800d9b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d9b4:	0a1b      	lsrs	r3, r3, #8
 800d9b6:	f003 030f 	and.w	r3, r3, #15
 800d9ba:	3301      	adds	r3, #1
 800d9bc:	613b      	str	r3, [r7, #16]
  pll1fracen = RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN;
 800d9be:	4ba4      	ldr	r3, [pc, #656]	; (800dc50 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 800d9c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d9c2:	f003 0310 	and.w	r3, r3, #16
 800d9c6:	60fb      	str	r3, [r7, #12]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 800d9c8:	4ba1      	ldr	r3, [pc, #644]	; (800dc50 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 800d9ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d9cc:	08db      	lsrs	r3, r3, #3
 800d9ce:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d9d2:	68fa      	ldr	r2, [r7, #12]
 800d9d4:	fb02 f303 	mul.w	r3, r2, r3
 800d9d8:	ee07 3a90 	vmov	s15, r3
 800d9dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d9e0:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  if (pll1m != 0U)
 800d9e4:	693b      	ldr	r3, [r7, #16]
 800d9e6:	2b00      	cmp	r3, #0
 800d9e8:	f000 8123 	beq.w	800dc32 <HAL_RCCEx_GetPLL1ClockFreq+0x29e>
  {
    switch (pll1source)
 800d9ec:	697b      	ldr	r3, [r7, #20]
 800d9ee:	2b03      	cmp	r3, #3
 800d9f0:	d062      	beq.n	800dab8 <HAL_RCCEx_GetPLL1ClockFreq+0x124>
 800d9f2:	697b      	ldr	r3, [r7, #20]
 800d9f4:	2b03      	cmp	r3, #3
 800d9f6:	f200 8081 	bhi.w	800dafc <HAL_RCCEx_GetPLL1ClockFreq+0x168>
 800d9fa:	697b      	ldr	r3, [r7, #20]
 800d9fc:	2b01      	cmp	r3, #1
 800d9fe:	d024      	beq.n	800da4a <HAL_RCCEx_GetPLL1ClockFreq+0xb6>
 800da00:	697b      	ldr	r3, [r7, #20]
 800da02:	2b02      	cmp	r3, #2
 800da04:	d17a      	bne.n	800dafc <HAL_RCCEx_GetPLL1ClockFreq+0x168>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800da06:	693b      	ldr	r3, [r7, #16]
 800da08:	ee07 3a90 	vmov	s15, r3
 800da0c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800da10:	eddf 6a90 	vldr	s13, [pc, #576]	; 800dc54 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>
 800da14:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800da18:	4b8d      	ldr	r3, [pc, #564]	; (800dc50 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 800da1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800da1c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800da20:	ee07 3a90 	vmov	s15, r3
 800da24:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 800da28:	ed97 6a02 	vldr	s12, [r7, #8]
 800da2c:	eddf 5a8a 	vldr	s11, [pc, #552]	; 800dc58 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>
 800da30:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800da34:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 800da38:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800da3c:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800da40:	ee67 7a27 	vmul.f32	s15, s14, s15
 800da44:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800da48:	e08f      	b.n	800db6a <HAL_RCCEx_GetPLL1ClockFreq+0x1d6>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800da4a:	4b81      	ldr	r3, [pc, #516]	; (800dc50 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 800da4c:	689b      	ldr	r3, [r3, #8]
 800da4e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800da52:	2b00      	cmp	r3, #0
 800da54:	d005      	beq.n	800da62 <HAL_RCCEx_GetPLL1ClockFreq+0xce>
 800da56:	4b7e      	ldr	r3, [pc, #504]	; (800dc50 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 800da58:	689b      	ldr	r3, [r3, #8]
 800da5a:	0f1b      	lsrs	r3, r3, #28
 800da5c:	f003 030f 	and.w	r3, r3, #15
 800da60:	e006      	b.n	800da70 <HAL_RCCEx_GetPLL1ClockFreq+0xdc>
 800da62:	4b7b      	ldr	r3, [pc, #492]	; (800dc50 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 800da64:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800da68:	041b      	lsls	r3, r3, #16
 800da6a:	0f1b      	lsrs	r3, r3, #28
 800da6c:	f003 030f 	and.w	r3, r3, #15
 800da70:	4a7a      	ldr	r2, [pc, #488]	; (800dc5c <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>)
 800da72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800da76:	ee07 3a90 	vmov	s15, r3
 800da7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800da7e:	693b      	ldr	r3, [r7, #16]
 800da80:	ee07 3a90 	vmov	s15, r3
 800da84:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800da88:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 800da8c:	69bb      	ldr	r3, [r7, #24]
 800da8e:	ee07 3a90 	vmov	s15, r3
 800da92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800da96:	ed97 6a02 	vldr	s12, [r7, #8]
 800da9a:	eddf 5a6f 	vldr	s11, [pc, #444]	; 800dc58 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>
 800da9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800daa2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800daa6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800daaa:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800daae:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dab2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800dab6:	e058      	b.n	800db6a <HAL_RCCEx_GetPLL1ClockFreq+0x1d6>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800dab8:	693b      	ldr	r3, [r7, #16]
 800daba:	ee07 3a90 	vmov	s15, r3
 800dabe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dac2:	eddf 6a64 	vldr	s13, [pc, #400]	; 800dc54 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>
 800dac6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800daca:	4b61      	ldr	r3, [pc, #388]	; (800dc50 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 800dacc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dace:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dad2:	ee07 3a90 	vmov	s15, r3
 800dad6:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 800dada:	ed97 6a02 	vldr	s12, [r7, #8]
 800dade:	eddf 5a5e 	vldr	s11, [pc, #376]	; 800dc58 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>
 800dae2:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800dae6:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 800daea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800daee:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800daf2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800daf6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800dafa:	e036      	b.n	800db6a <HAL_RCCEx_GetPLL1ClockFreq+0x1d6>
      default:
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800dafc:	4b54      	ldr	r3, [pc, #336]	; (800dc50 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 800dafe:	689b      	ldr	r3, [r3, #8]
 800db00:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800db04:	2b00      	cmp	r3, #0
 800db06:	d005      	beq.n	800db14 <HAL_RCCEx_GetPLL1ClockFreq+0x180>
 800db08:	4b51      	ldr	r3, [pc, #324]	; (800dc50 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 800db0a:	689b      	ldr	r3, [r3, #8]
 800db0c:	0f1b      	lsrs	r3, r3, #28
 800db0e:	f003 030f 	and.w	r3, r3, #15
 800db12:	e006      	b.n	800db22 <HAL_RCCEx_GetPLL1ClockFreq+0x18e>
 800db14:	4b4e      	ldr	r3, [pc, #312]	; (800dc50 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 800db16:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800db1a:	041b      	lsls	r3, r3, #16
 800db1c:	0f1b      	lsrs	r3, r3, #28
 800db1e:	f003 030f 	and.w	r3, r3, #15
 800db22:	4a4e      	ldr	r2, [pc, #312]	; (800dc5c <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>)
 800db24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800db28:	ee07 3a90 	vmov	s15, r3
 800db2c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800db30:	693b      	ldr	r3, [r7, #16]
 800db32:	ee07 3a90 	vmov	s15, r3
 800db36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800db3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 800db3e:	69bb      	ldr	r3, [r7, #24]
 800db40:	ee07 3a90 	vmov	s15, r3
 800db44:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800db48:	ed97 6a02 	vldr	s12, [r7, #8]
 800db4c:	eddf 5a42 	vldr	s11, [pc, #264]	; 800dc58 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>
 800db50:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800db54:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800db58:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800db5c:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800db60:	ee67 7a27 	vmul.f32	s15, s14, s15
 800db64:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800db68:	bf00      	nop
    }

    if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 800db6a:	4b39      	ldr	r3, [pc, #228]	; (800dc50 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 800db6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800db6e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800db72:	2b00      	cmp	r3, #0
 800db74:	d017      	beq.n	800dba6 <HAL_RCCEx_GetPLL1ClockFreq+0x212>
    {
      PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800db76:	4b36      	ldr	r3, [pc, #216]	; (800dc50 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 800db78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800db7a:	0a5b      	lsrs	r3, r3, #9
 800db7c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800db80:	ee07 3a90 	vmov	s15, r3
 800db84:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + \
 800db88:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800db8c:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800db90:	edd7 6a07 	vldr	s13, [r7, #28]
 800db94:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800db98:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800db9c:	ee17 2a90 	vmov	r2, s15
 800dba0:	687b      	ldr	r3, [r7, #4]
 800dba2:	601a      	str	r2, [r3, #0]
 800dba4:	e002      	b.n	800dbac <HAL_RCCEx_GetPLL1ClockFreq+0x218>
                                                                     (float_t)1));
    }
    else
    {
      PLL1_Clocks->PLL1_P_Frequency = 0U;
 800dba6:	687b      	ldr	r3, [r7, #4]
 800dba8:	2200      	movs	r2, #0
 800dbaa:	601a      	str	r2, [r3, #0]
    }

    if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 800dbac:	4b28      	ldr	r3, [pc, #160]	; (800dc50 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 800dbae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dbb0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800dbb4:	2b00      	cmp	r3, #0
 800dbb6:	d017      	beq.n	800dbe8 <HAL_RCCEx_GetPLL1ClockFreq+0x254>
    {
      PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800dbb8:	4b25      	ldr	r3, [pc, #148]	; (800dc50 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 800dbba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dbbc:	0c1b      	lsrs	r3, r3, #16
 800dbbe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dbc2:	ee07 3a90 	vmov	s15, r3
 800dbc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL1DIVR_PLL1Q) >> RCC_PLL1DIVR_PLL1Q_Pos) + \
 800dbca:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800dbce:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800dbd2:	edd7 6a07 	vldr	s13, [r7, #28]
 800dbd6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800dbda:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800dbde:	ee17 2a90 	vmov	r2, s15
 800dbe2:	687b      	ldr	r3, [r7, #4]
 800dbe4:	605a      	str	r2, [r3, #4]
 800dbe6:	e002      	b.n	800dbee <HAL_RCCEx_GetPLL1ClockFreq+0x25a>
                                                                     (float_t)1));
    }
    else
    {
      PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800dbe8:	687b      	ldr	r3, [r7, #4]
 800dbea:	2200      	movs	r2, #0
 800dbec:	605a      	str	r2, [r3, #4]
    }

    if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 800dbee:	4b18      	ldr	r3, [pc, #96]	; (800dc50 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 800dbf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dbf2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800dbf6:	2b00      	cmp	r3, #0
 800dbf8:	d017      	beq.n	800dc2a <HAL_RCCEx_GetPLL1ClockFreq+0x296>
    {
      PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800dbfa:	4b15      	ldr	r3, [pc, #84]	; (800dc50 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 800dbfc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dbfe:	0e1b      	lsrs	r3, r3, #24
 800dc00:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dc04:	ee07 3a90 	vmov	s15, r3
 800dc08:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + \
 800dc0c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800dc10:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800dc14:	edd7 6a07 	vldr	s13, [r7, #28]
 800dc18:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800dc1c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800dc20:	ee17 2a90 	vmov	r2, s15
 800dc24:	687b      	ldr	r3, [r7, #4]
 800dc26:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800dc28:	e00c      	b.n	800dc44 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>
      PLL1_Clocks->PLL1_R_Frequency = 0U;
 800dc2a:	687b      	ldr	r3, [r7, #4]
 800dc2c:	2200      	movs	r2, #0
 800dc2e:	609a      	str	r2, [r3, #8]
}
 800dc30:	e008      	b.n	800dc44 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800dc32:	687b      	ldr	r3, [r7, #4]
 800dc34:	2200      	movs	r2, #0
 800dc36:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800dc38:	687b      	ldr	r3, [r7, #4]
 800dc3a:	2200      	movs	r2, #0
 800dc3c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800dc3e:	687b      	ldr	r3, [r7, #4]
 800dc40:	2200      	movs	r2, #0
 800dc42:	609a      	str	r2, [r3, #8]
}
 800dc44:	bf00      	nop
 800dc46:	3724      	adds	r7, #36	; 0x24
 800dc48:	46bd      	mov	sp, r7
 800dc4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc4e:	4770      	bx	lr
 800dc50:	46020c00 	.word	0x46020c00
 800dc54:	4b742400 	.word	0x4b742400
 800dc58:	46000000 	.word	0x46000000
 800dc5c:	08014f00 	.word	0x08014f00

0800dc60 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800dc60:	b480      	push	{r7}
 800dc62:	b089      	sub	sp, #36	; 0x24
 800dc64:	af00      	add	r7, sp, #0
 800dc66:	6078      	str	r0, [r7, #4]
  float_t fracn2;
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 800dc68:	4bac      	ldr	r3, [pc, #688]	; (800df1c <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 800dc6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dc6c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dc70:	61bb      	str	r3, [r7, #24]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 800dc72:	4baa      	ldr	r3, [pc, #680]	; (800df1c <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 800dc74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc76:	f003 0303 	and.w	r3, r3, #3
 800dc7a:	617b      	str	r3, [r7, #20]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos) + 1U;
 800dc7c:	4ba7      	ldr	r3, [pc, #668]	; (800df1c <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 800dc7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc80:	0a1b      	lsrs	r3, r3, #8
 800dc82:	f003 030f 	and.w	r3, r3, #15
 800dc86:	3301      	adds	r3, #1
 800dc88:	613b      	str	r3, [r7, #16]
  pll2fracen = RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN;
 800dc8a:	4ba4      	ldr	r3, [pc, #656]	; (800df1c <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 800dc8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc8e:	f003 0310 	and.w	r3, r3, #16
 800dc92:	60fb      	str	r3, [r7, #12]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 800dc94:	4ba1      	ldr	r3, [pc, #644]	; (800df1c <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 800dc96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dc98:	08db      	lsrs	r3, r3, #3
 800dc9a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800dc9e:	68fa      	ldr	r2, [r7, #12]
 800dca0:	fb02 f303 	mul.w	r3, r2, r3
 800dca4:	ee07 3a90 	vmov	s15, r3
 800dca8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dcac:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  if (pll2m != 0U)
 800dcb0:	693b      	ldr	r3, [r7, #16]
 800dcb2:	2b00      	cmp	r3, #0
 800dcb4:	f000 8123 	beq.w	800defe <HAL_RCCEx_GetPLL2ClockFreq+0x29e>
  {
    switch (pll2source)
 800dcb8:	697b      	ldr	r3, [r7, #20]
 800dcba:	2b03      	cmp	r3, #3
 800dcbc:	d062      	beq.n	800dd84 <HAL_RCCEx_GetPLL2ClockFreq+0x124>
 800dcbe:	697b      	ldr	r3, [r7, #20]
 800dcc0:	2b03      	cmp	r3, #3
 800dcc2:	f200 8081 	bhi.w	800ddc8 <HAL_RCCEx_GetPLL2ClockFreq+0x168>
 800dcc6:	697b      	ldr	r3, [r7, #20]
 800dcc8:	2b01      	cmp	r3, #1
 800dcca:	d024      	beq.n	800dd16 <HAL_RCCEx_GetPLL2ClockFreq+0xb6>
 800dccc:	697b      	ldr	r3, [r7, #20]
 800dcce:	2b02      	cmp	r3, #2
 800dcd0:	d17a      	bne.n	800ddc8 <HAL_RCCEx_GetPLL2ClockFreq+0x168>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800dcd2:	693b      	ldr	r3, [r7, #16]
 800dcd4:	ee07 3a90 	vmov	s15, r3
 800dcd8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dcdc:	eddf 6a90 	vldr	s13, [pc, #576]	; 800df20 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>
 800dce0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800dce4:	4b8d      	ldr	r3, [pc, #564]	; (800df1c <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 800dce6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dce8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dcec:	ee07 3a90 	vmov	s15, r3
 800dcf0:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 800dcf4:	ed97 6a02 	vldr	s12, [r7, #8]
 800dcf8:	eddf 5a8a 	vldr	s11, [pc, #552]	; 800df24 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>
 800dcfc:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800dd00:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 800dd04:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800dd08:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800dd0c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dd10:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800dd14:	e08f      	b.n	800de36 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 800dd16:	4b81      	ldr	r3, [pc, #516]	; (800df1c <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 800dd18:	689b      	ldr	r3, [r3, #8]
 800dd1a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800dd1e:	2b00      	cmp	r3, #0
 800dd20:	d005      	beq.n	800dd2e <HAL_RCCEx_GetPLL2ClockFreq+0xce>
 800dd22:	4b7e      	ldr	r3, [pc, #504]	; (800df1c <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 800dd24:	689b      	ldr	r3, [r3, #8]
 800dd26:	0f1b      	lsrs	r3, r3, #28
 800dd28:	f003 030f 	and.w	r3, r3, #15
 800dd2c:	e006      	b.n	800dd3c <HAL_RCCEx_GetPLL2ClockFreq+0xdc>
 800dd2e:	4b7b      	ldr	r3, [pc, #492]	; (800df1c <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 800dd30:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800dd34:	041b      	lsls	r3, r3, #16
 800dd36:	0f1b      	lsrs	r3, r3, #28
 800dd38:	f003 030f 	and.w	r3, r3, #15
 800dd3c:	4a7a      	ldr	r2, [pc, #488]	; (800df28 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>)
 800dd3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800dd42:	ee07 3a90 	vmov	s15, r3
 800dd46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800dd4a:	693b      	ldr	r3, [r7, #16]
 800dd4c:	ee07 3a90 	vmov	s15, r3
 800dd50:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dd54:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 800dd58:	69bb      	ldr	r3, [r7, #24]
 800dd5a:	ee07 3a90 	vmov	s15, r3
 800dd5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800dd62:	ed97 6a02 	vldr	s12, [r7, #8]
 800dd66:	eddf 5a6f 	vldr	s11, [pc, #444]	; 800df24 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>
 800dd6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800dd6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800dd72:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800dd76:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 800dd7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dd7e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800dd82:	e058      	b.n	800de36 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800dd84:	693b      	ldr	r3, [r7, #16]
 800dd86:	ee07 3a90 	vmov	s15, r3
 800dd8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dd8e:	eddf 6a64 	vldr	s13, [pc, #400]	; 800df20 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>
 800dd92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800dd96:	4b61      	ldr	r3, [pc, #388]	; (800df1c <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 800dd98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dd9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dd9e:	ee07 3a90 	vmov	s15, r3
 800dda2:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 800dda6:	ed97 6a02 	vldr	s12, [r7, #8]
 800ddaa:	eddf 5a5e 	vldr	s11, [pc, #376]	; 800df24 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>
 800ddae:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800ddb2:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 800ddb6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ddba:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800ddbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ddc2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ddc6:	e036      	b.n	800de36 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

      default:
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 800ddc8:	4b54      	ldr	r3, [pc, #336]	; (800df1c <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 800ddca:	689b      	ldr	r3, [r3, #8]
 800ddcc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ddd0:	2b00      	cmp	r3, #0
 800ddd2:	d005      	beq.n	800dde0 <HAL_RCCEx_GetPLL2ClockFreq+0x180>
 800ddd4:	4b51      	ldr	r3, [pc, #324]	; (800df1c <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 800ddd6:	689b      	ldr	r3, [r3, #8]
 800ddd8:	0f1b      	lsrs	r3, r3, #28
 800ddda:	f003 030f 	and.w	r3, r3, #15
 800ddde:	e006      	b.n	800ddee <HAL_RCCEx_GetPLL2ClockFreq+0x18e>
 800dde0:	4b4e      	ldr	r3, [pc, #312]	; (800df1c <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 800dde2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800dde6:	041b      	lsls	r3, r3, #16
 800dde8:	0f1b      	lsrs	r3, r3, #28
 800ddea:	f003 030f 	and.w	r3, r3, #15
 800ddee:	4a4e      	ldr	r2, [pc, #312]	; (800df28 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>)
 800ddf0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ddf4:	ee07 3a90 	vmov	s15, r3
 800ddf8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ddfc:	693b      	ldr	r3, [r7, #16]
 800ddfe:	ee07 3a90 	vmov	s15, r3
 800de02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800de06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  * ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 800de0a:	69bb      	ldr	r3, [r7, #24]
 800de0c:	ee07 3a90 	vmov	s15, r3
 800de10:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800de14:	ed97 6a02 	vldr	s12, [r7, #8]
 800de18:	eddf 5a42 	vldr	s11, [pc, #264]	; 800df24 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>
 800de1c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800de20:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800de24:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800de28:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 800de2c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800de30:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800de34:	bf00      	nop
    }
    if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 800de36:	4b39      	ldr	r3, [pc, #228]	; (800df1c <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 800de38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800de3a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800de3e:	2b00      	cmp	r3, #0
 800de40:	d017      	beq.n	800de72 <HAL_RCCEx_GetPLL2ClockFreq+0x212>
    {
      PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800de42:	4b36      	ldr	r3, [pc, #216]	; (800df1c <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 800de44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800de46:	0a5b      	lsrs	r3, r3, #9
 800de48:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800de4c:	ee07 3a90 	vmov	s15, r3
 800de50:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL2DIVR_PLL2P) >> RCC_PLL2DIVR_PLL2P_Pos) + \
 800de54:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800de58:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800de5c:	edd7 6a07 	vldr	s13, [r7, #28]
 800de60:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800de64:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800de68:	ee17 2a90 	vmov	r2, s15
 800de6c:	687b      	ldr	r3, [r7, #4]
 800de6e:	601a      	str	r2, [r3, #0]
 800de70:	e002      	b.n	800de78 <HAL_RCCEx_GetPLL2ClockFreq+0x218>
                                                                     (float_t)1));
    }
    else
    {
      PLL2_Clocks->PLL2_P_Frequency = 0U;
 800de72:	687b      	ldr	r3, [r7, #4]
 800de74:	2200      	movs	r2, #0
 800de76:	601a      	str	r2, [r3, #0]
    }
    if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 800de78:	4b28      	ldr	r3, [pc, #160]	; (800df1c <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 800de7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800de7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800de80:	2b00      	cmp	r3, #0
 800de82:	d017      	beq.n	800deb4 <HAL_RCCEx_GetPLL2ClockFreq+0x254>
    {
      PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800de84:	4b25      	ldr	r3, [pc, #148]	; (800df1c <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 800de86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800de88:	0c1b      	lsrs	r3, r3, #16
 800de8a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800de8e:	ee07 3a90 	vmov	s15, r3
 800de92:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL2DIVR_PLL2Q) >> RCC_PLL2DIVR_PLL2Q_Pos) + \
 800de96:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800de9a:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800de9e:	edd7 6a07 	vldr	s13, [r7, #28]
 800dea2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800dea6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800deaa:	ee17 2a90 	vmov	r2, s15
 800deae:	687b      	ldr	r3, [r7, #4]
 800deb0:	605a      	str	r2, [r3, #4]
 800deb2:	e002      	b.n	800deba <HAL_RCCEx_GetPLL2ClockFreq+0x25a>
                                                                     (float_t)1));
    }
    else
    {
      PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800deb4:	687b      	ldr	r3, [r7, #4]
 800deb6:	2200      	movs	r2, #0
 800deb8:	605a      	str	r2, [r3, #4]
    }
    if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 800deba:	4b18      	ldr	r3, [pc, #96]	; (800df1c <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 800debc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800debe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800dec2:	2b00      	cmp	r3, #0
 800dec4:	d017      	beq.n	800def6 <HAL_RCCEx_GetPLL2ClockFreq+0x296>
    {
      PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800dec6:	4b15      	ldr	r3, [pc, #84]	; (800df1c <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 800dec8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800deca:	0e1b      	lsrs	r3, r3, #24
 800decc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ded0:	ee07 3a90 	vmov	s15, r3
 800ded4:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL2DIVR_PLL2R) >> RCC_PLL2DIVR_PLL2R_Pos) + \
 800ded8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800dedc:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800dee0:	edd7 6a07 	vldr	s13, [r7, #28]
 800dee4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800dee8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800deec:	ee17 2a90 	vmov	r2, s15
 800def0:	687b      	ldr	r3, [r7, #4]
 800def2:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800def4:	e00c      	b.n	800df10 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>
      PLL2_Clocks->PLL2_R_Frequency = 0U;
 800def6:	687b      	ldr	r3, [r7, #4]
 800def8:	2200      	movs	r2, #0
 800defa:	609a      	str	r2, [r3, #8]
}
 800defc:	e008      	b.n	800df10 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800defe:	687b      	ldr	r3, [r7, #4]
 800df00:	2200      	movs	r2, #0
 800df02:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800df04:	687b      	ldr	r3, [r7, #4]
 800df06:	2200      	movs	r2, #0
 800df08:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800df0a:	687b      	ldr	r3, [r7, #4]
 800df0c:	2200      	movs	r2, #0
 800df0e:	609a      	str	r2, [r3, #8]
}
 800df10:	bf00      	nop
 800df12:	3724      	adds	r7, #36	; 0x24
 800df14:	46bd      	mov	sp, r7
 800df16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df1a:	4770      	bx	lr
 800df1c:	46020c00 	.word	0x46020c00
 800df20:	4b742400 	.word	0x4b742400
 800df24:	46000000 	.word	0x46000000
 800df28:	08014f00 	.word	0x08014f00

0800df2c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800df2c:	b480      	push	{r7}
 800df2e:	b089      	sub	sp, #36	; 0x24
 800df30:	af00      	add	r7, sp, #0
 800df32:	6078      	str	r0, [r7, #4]

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLLxR
  */

  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 800df34:	4bac      	ldr	r3, [pc, #688]	; (800e1e8 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 800df36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800df38:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800df3c:	61bb      	str	r3, [r7, #24]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 800df3e:	4baa      	ldr	r3, [pc, #680]	; (800e1e8 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 800df40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800df42:	f003 0303 	and.w	r3, r3, #3
 800df46:	617b      	str	r3, [r7, #20]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos) + 1U;
 800df48:	4ba7      	ldr	r3, [pc, #668]	; (800e1e8 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 800df4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800df4c:	0a1b      	lsrs	r3, r3, #8
 800df4e:	f003 030f 	and.w	r3, r3, #15
 800df52:	3301      	adds	r3, #1
 800df54:	613b      	str	r3, [r7, #16]
  pll3fracen = RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN;
 800df56:	4ba4      	ldr	r3, [pc, #656]	; (800e1e8 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 800df58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800df5a:	f003 0310 	and.w	r3, r3, #16
 800df5e:	60fb      	str	r3, [r7, #12]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 800df60:	4ba1      	ldr	r3, [pc, #644]	; (800e1e8 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 800df62:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800df64:	08db      	lsrs	r3, r3, #3
 800df66:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800df6a:	68fa      	ldr	r2, [r7, #12]
 800df6c:	fb02 f303 	mul.w	r3, r2, r3
 800df70:	ee07 3a90 	vmov	s15, r3
 800df74:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800df78:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  if (pll3m != 0U)
 800df7c:	693b      	ldr	r3, [r7, #16]
 800df7e:	2b00      	cmp	r3, #0
 800df80:	f000 8123 	beq.w	800e1ca <HAL_RCCEx_GetPLL3ClockFreq+0x29e>
  {
    switch (pll3source)
 800df84:	697b      	ldr	r3, [r7, #20]
 800df86:	2b03      	cmp	r3, #3
 800df88:	d062      	beq.n	800e050 <HAL_RCCEx_GetPLL3ClockFreq+0x124>
 800df8a:	697b      	ldr	r3, [r7, #20]
 800df8c:	2b03      	cmp	r3, #3
 800df8e:	f200 8081 	bhi.w	800e094 <HAL_RCCEx_GetPLL3ClockFreq+0x168>
 800df92:	697b      	ldr	r3, [r7, #20]
 800df94:	2b01      	cmp	r3, #1
 800df96:	d024      	beq.n	800dfe2 <HAL_RCCEx_GetPLL3ClockFreq+0xb6>
 800df98:	697b      	ldr	r3, [r7, #20]
 800df9a:	2b02      	cmp	r3, #2
 800df9c:	d17a      	bne.n	800e094 <HAL_RCCEx_GetPLL3ClockFreq+0x168>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800df9e:	693b      	ldr	r3, [r7, #16]
 800dfa0:	ee07 3a90 	vmov	s15, r3
 800dfa4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dfa8:	eddf 6a90 	vldr	s13, [pc, #576]	; 800e1ec <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>
 800dfac:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800dfb0:	4b8d      	ldr	r3, [pc, #564]	; (800e1e8 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 800dfb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dfb4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dfb8:	ee07 3a90 	vmov	s15, r3
 800dfbc:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 800dfc0:	ed97 6a02 	vldr	s12, [r7, #8]
 800dfc4:	eddf 5a8a 	vldr	s11, [pc, #552]	; 800e1f0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>
 800dfc8:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800dfcc:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 800dfd0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800dfd4:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800dfd8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dfdc:	edc7 7a07 	vstr	s15, [r7, #28]

        break;
 800dfe0:	e08f      	b.n	800e102 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800dfe2:	4b81      	ldr	r3, [pc, #516]	; (800e1e8 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 800dfe4:	689b      	ldr	r3, [r3, #8]
 800dfe6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800dfea:	2b00      	cmp	r3, #0
 800dfec:	d005      	beq.n	800dffa <HAL_RCCEx_GetPLL3ClockFreq+0xce>
 800dfee:	4b7e      	ldr	r3, [pc, #504]	; (800e1e8 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 800dff0:	689b      	ldr	r3, [r3, #8]
 800dff2:	0f1b      	lsrs	r3, r3, #28
 800dff4:	f003 030f 	and.w	r3, r3, #15
 800dff8:	e006      	b.n	800e008 <HAL_RCCEx_GetPLL3ClockFreq+0xdc>
 800dffa:	4b7b      	ldr	r3, [pc, #492]	; (800e1e8 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 800dffc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800e000:	041b      	lsls	r3, r3, #16
 800e002:	0f1b      	lsrs	r3, r3, #28
 800e004:	f003 030f 	and.w	r3, r3, #15
 800e008:	4a7a      	ldr	r2, [pc, #488]	; (800e1f4 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>)
 800e00a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e00e:	ee07 3a90 	vmov	s15, r3
 800e012:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e016:	693b      	ldr	r3, [r7, #16]
 800e018:	ee07 3a90 	vmov	s15, r3
 800e01c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e020:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 800e024:	69bb      	ldr	r3, [r7, #24]
 800e026:	ee07 3a90 	vmov	s15, r3
 800e02a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e02e:	ed97 6a02 	vldr	s12, [r7, #8]
 800e032:	eddf 5a6f 	vldr	s11, [pc, #444]	; 800e1f0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>
 800e036:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e03a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e03e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800e042:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800e046:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e04a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800e04e:	e058      	b.n	800e102 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800e050:	693b      	ldr	r3, [r7, #16]
 800e052:	ee07 3a90 	vmov	s15, r3
 800e056:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e05a:	eddf 6a64 	vldr	s13, [pc, #400]	; 800e1ec <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>
 800e05e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e062:	4b61      	ldr	r3, [pc, #388]	; (800e1e8 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 800e064:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e066:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e06a:	ee07 3a90 	vmov	s15, r3
 800e06e:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 800e072:	ed97 6a02 	vldr	s12, [r7, #8]
 800e076:	eddf 5a5e 	vldr	s11, [pc, #376]	; 800e1f0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>
 800e07a:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800e07e:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 800e082:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800e086:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800e08a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e08e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800e092:	e036      	b.n	800e102 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

      default:
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800e094:	4b54      	ldr	r3, [pc, #336]	; (800e1e8 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 800e096:	689b      	ldr	r3, [r3, #8]
 800e098:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e09c:	2b00      	cmp	r3, #0
 800e09e:	d005      	beq.n	800e0ac <HAL_RCCEx_GetPLL3ClockFreq+0x180>
 800e0a0:	4b51      	ldr	r3, [pc, #324]	; (800e1e8 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 800e0a2:	689b      	ldr	r3, [r3, #8]
 800e0a4:	0f1b      	lsrs	r3, r3, #28
 800e0a6:	f003 030f 	and.w	r3, r3, #15
 800e0aa:	e006      	b.n	800e0ba <HAL_RCCEx_GetPLL3ClockFreq+0x18e>
 800e0ac:	4b4e      	ldr	r3, [pc, #312]	; (800e1e8 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 800e0ae:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800e0b2:	041b      	lsls	r3, r3, #16
 800e0b4:	0f1b      	lsrs	r3, r3, #28
 800e0b6:	f003 030f 	and.w	r3, r3, #15
 800e0ba:	4a4e      	ldr	r2, [pc, #312]	; (800e1f4 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>)
 800e0bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e0c0:	ee07 3a90 	vmov	s15, r3
 800e0c4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e0c8:	693b      	ldr	r3, [r7, #16]
 800e0ca:	ee07 3a90 	vmov	s15, r3
 800e0ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e0d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 800e0d6:	69bb      	ldr	r3, [r7, #24]
 800e0d8:	ee07 3a90 	vmov	s15, r3
 800e0dc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e0e0:	ed97 6a02 	vldr	s12, [r7, #8]
 800e0e4:	eddf 5a42 	vldr	s11, [pc, #264]	; 800e1f0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>
 800e0e8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e0ec:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e0f0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800e0f4:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800e0f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e0fc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800e100:	bf00      	nop
    }

    if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 800e102:	4b39      	ldr	r3, [pc, #228]	; (800e1e8 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 800e104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e106:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800e10a:	2b00      	cmp	r3, #0
 800e10c:	d017      	beq.n	800e13e <HAL_RCCEx_GetPLL3ClockFreq+0x212>
    {
      PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800e10e:	4b36      	ldr	r3, [pc, #216]	; (800e1e8 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 800e110:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e112:	0a5b      	lsrs	r3, r3, #9
 800e114:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e118:	ee07 3a90 	vmov	s15, r3
 800e11c:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL3DIVR_PLL3P) >> RCC_PLL3DIVR_PLL3P_Pos) + \
 800e120:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800e124:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800e128:	edd7 6a07 	vldr	s13, [r7, #28]
 800e12c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e130:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e134:	ee17 2a90 	vmov	r2, s15
 800e138:	687b      	ldr	r3, [r7, #4]
 800e13a:	601a      	str	r2, [r3, #0]
 800e13c:	e002      	b.n	800e144 <HAL_RCCEx_GetPLL3ClockFreq+0x218>
                                                                     (float_t)1));
    }
    else
    {
      PLL3_Clocks->PLL3_P_Frequency = 0U;
 800e13e:	687b      	ldr	r3, [r7, #4]
 800e140:	2200      	movs	r2, #0
 800e142:	601a      	str	r2, [r3, #0]
    }

    if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 800e144:	4b28      	ldr	r3, [pc, #160]	; (800e1e8 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 800e146:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e148:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e14c:	2b00      	cmp	r3, #0
 800e14e:	d017      	beq.n	800e180 <HAL_RCCEx_GetPLL3ClockFreq+0x254>
    {
      PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800e150:	4b25      	ldr	r3, [pc, #148]	; (800e1e8 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 800e152:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e154:	0c1b      	lsrs	r3, r3, #16
 800e156:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e15a:	ee07 3a90 	vmov	s15, r3
 800e15e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL3DIVR_PLL3Q) >> RCC_PLL3DIVR_PLL3Q_Pos) + \
 800e162:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800e166:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800e16a:	edd7 6a07 	vldr	s13, [r7, #28]
 800e16e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e172:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e176:	ee17 2a90 	vmov	r2, s15
 800e17a:	687b      	ldr	r3, [r7, #4]
 800e17c:	605a      	str	r2, [r3, #4]
 800e17e:	e002      	b.n	800e186 <HAL_RCCEx_GetPLL3ClockFreq+0x25a>
                                                                     (float_t)1));
    }
    else
    {
      PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800e180:	687b      	ldr	r3, [r7, #4]
 800e182:	2200      	movs	r2, #0
 800e184:	605a      	str	r2, [r3, #4]
    }

    if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 800e186:	4b18      	ldr	r3, [pc, #96]	; (800e1e8 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 800e188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e18a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800e18e:	2b00      	cmp	r3, #0
 800e190:	d017      	beq.n	800e1c2 <HAL_RCCEx_GetPLL3ClockFreq+0x296>
    {
      PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800e192:	4b15      	ldr	r3, [pc, #84]	; (800e1e8 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 800e194:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e196:	0e1b      	lsrs	r3, r3, #24
 800e198:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e19c:	ee07 3a90 	vmov	s15, r3
 800e1a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL3DIVR_PLL3R) >> RCC_PLL3DIVR_PLL3R_Pos) + \
 800e1a4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800e1a8:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800e1ac:	edd7 6a07 	vldr	s13, [r7, #28]
 800e1b0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e1b4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e1b8:	ee17 2a90 	vmov	r2, s15
 800e1bc:	687b      	ldr	r3, [r7, #4]
 800e1be:	609a      	str	r2, [r3, #8]
  {
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }
}
 800e1c0:	e00c      	b.n	800e1dc <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>
      PLL3_Clocks->PLL3_R_Frequency = 0U;
 800e1c2:	687b      	ldr	r3, [r7, #4]
 800e1c4:	2200      	movs	r2, #0
 800e1c6:	609a      	str	r2, [r3, #8]
}
 800e1c8:	e008      	b.n	800e1dc <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800e1ca:	687b      	ldr	r3, [r7, #4]
 800e1cc:	2200      	movs	r2, #0
 800e1ce:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800e1d0:	687b      	ldr	r3, [r7, #4]
 800e1d2:	2200      	movs	r2, #0
 800e1d4:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800e1d6:	687b      	ldr	r3, [r7, #4]
 800e1d8:	2200      	movs	r2, #0
 800e1da:	609a      	str	r2, [r3, #8]
}
 800e1dc:	bf00      	nop
 800e1de:	3724      	adds	r7, #36	; 0x24
 800e1e0:	46bd      	mov	sp, r7
 800e1e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1e6:	4770      	bx	lr
 800e1e8:	46020c00 	.word	0x46020c00
 800e1ec:	4b742400 	.word	0x4b742400
 800e1f0:	46000000 	.word	0x46000000
 800e1f4:	08014f00 	.word	0x08014f00

0800e1f8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_FDCAN1 FDCAN1 peripheral clock
  *            @arg @ref RCC_PERIPHCLK_DAC1 DAC1 peripheral clock
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800e1f8:	b580      	push	{r7, lr}
 800e1fa:	b08e      	sub	sp, #56	; 0x38
 800e1fc:	af00      	add	r7, sp, #0
 800e1fe:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 800e202:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e206:	f5a2 2180 	sub.w	r1, r2, #262144	; 0x40000
 800e20a:	430b      	orrs	r3, r1
 800e20c:	d145      	bne.n	800e29a <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 800e20e:	4ba7      	ldr	r3, [pc, #668]	; (800e4ac <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800e210:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800e214:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e218:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 800e21a:	4ba4      	ldr	r3, [pc, #656]	; (800e4ac <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800e21c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800e220:	f003 0302 	and.w	r3, r3, #2
 800e224:	2b02      	cmp	r3, #2
 800e226:	d108      	bne.n	800e23a <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 800e228:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e22a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e22e:	d104      	bne.n	800e23a <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 800e230:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e234:	637b      	str	r3, [r7, #52]	; 0x34
 800e236:	f001 b8fc 	b.w	800f432 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 800e23a:	4b9c      	ldr	r3, [pc, #624]	; (800e4ac <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800e23c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800e240:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800e244:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800e248:	d114      	bne.n	800e274 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 800e24a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e24c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e250:	d110      	bne.n	800e274 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800e252:	4b96      	ldr	r3, [pc, #600]	; (800e4ac <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800e254:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800e258:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e25c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800e260:	d103      	bne.n	800e26a <HAL_RCCEx_GetPeriphCLKFreq+0x72>
      {
        frequency = LSI_VALUE / 128U;
 800e262:	23fa      	movs	r3, #250	; 0xfa
 800e264:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800e266:	f001 b8e4 	b.w	800f432 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      else
      {
        frequency = LSI_VALUE;
 800e26a:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800e26e:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800e270:	f001 b8df 	b.w	800f432 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 800e274:	4b8d      	ldr	r3, [pc, #564]	; (800e4ac <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800e276:	681b      	ldr	r3, [r3, #0]
 800e278:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e27c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800e280:	d107      	bne.n	800e292 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 800e282:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e284:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800e288:	d103      	bne.n	800e292 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
    {
      frequency = HSE_VALUE / 32U;
 800e28a:	4b89      	ldr	r3, [pc, #548]	; (800e4b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 800e28c:	637b      	str	r3, [r7, #52]	; 0x34
 800e28e:	f001 b8d0 	b.w	800f432 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 800e292:	2300      	movs	r3, #0
 800e294:	637b      	str	r3, [r7, #52]	; 0x34
 800e296:	f001 b8cc 	b.w	800f432 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800e29a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e29e:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 800e2a2:	430b      	orrs	r3, r1
 800e2a4:	d151      	bne.n	800e34a <HAL_RCCEx_GetPeriphCLKFreq+0x152>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 800e2a6:	4b81      	ldr	r3, [pc, #516]	; (800e4ac <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800e2a8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800e2ac:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 800e2b0:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 800e2b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e2b4:	2b80      	cmp	r3, #128	; 0x80
 800e2b6:	d035      	beq.n	800e324 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
 800e2b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e2ba:	2b80      	cmp	r3, #128	; 0x80
 800e2bc:	d841      	bhi.n	800e342 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800e2be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e2c0:	2b60      	cmp	r3, #96	; 0x60
 800e2c2:	d02a      	beq.n	800e31a <HAL_RCCEx_GetPeriphCLKFreq+0x122>
 800e2c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e2c6:	2b60      	cmp	r3, #96	; 0x60
 800e2c8:	d83b      	bhi.n	800e342 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800e2ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e2cc:	2b40      	cmp	r3, #64	; 0x40
 800e2ce:	d009      	beq.n	800e2e4 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800e2d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e2d2:	2b40      	cmp	r3, #64	; 0x40
 800e2d4:	d835      	bhi.n	800e342 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800e2d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e2d8:	2b00      	cmp	r3, #0
 800e2da:	d00c      	beq.n	800e2f6 <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
 800e2dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e2de:	2b20      	cmp	r3, #32
 800e2e0:	d012      	beq.n	800e308 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 800e2e2:	e02e      	b.n	800e342 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
    {
      case RCC_SAI1CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800e2e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e2e8:	4618      	mov	r0, r3
 800e2ea:	f7ff fb53 	bl	800d994 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800e2ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2f0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800e2f2:	f001 b89e 	b.w	800f432 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e2f6:	f107 0318 	add.w	r3, r7, #24
 800e2fa:	4618      	mov	r0, r3
 800e2fc:	f7ff fcb0 	bl	800dc60 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 800e300:	69bb      	ldr	r3, [r7, #24]
 800e302:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800e304:	f001 b895 	b.w	800f432 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI1CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e308:	f107 030c 	add.w	r3, r7, #12
 800e30c:	4618      	mov	r0, r3
 800e30e:	f7ff fe0d 	bl	800df2c <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 800e312:	68fb      	ldr	r3, [r7, #12]
 800e314:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800e316:	f001 b88c 	b.w	800f432 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800e31a:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800e31e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800e320:	f001 b887 	b.w	800f432 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI1CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800e324:	4b61      	ldr	r3, [pc, #388]	; (800e4ac <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800e326:	681b      	ldr	r3, [r3, #0]
 800e328:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800e32c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e330:	d103      	bne.n	800e33a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        {
          frequency = HSI_VALUE;
 800e332:	4b60      	ldr	r3, [pc, #384]	; (800e4b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800e334:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800e336:	f001 b87c 	b.w	800f432 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
          frequency = 0U;
 800e33a:	2300      	movs	r3, #0
 800e33c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800e33e:	f001 b878 	b.w	800f432 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default :
      {
        frequency = 0U;
 800e342:	2300      	movs	r3, #0
 800e344:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800e346:	f001 b874 	b.w	800f432 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI2)
 800e34a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e34e:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 800e352:	430b      	orrs	r3, r1
 800e354:	d158      	bne.n	800e408 <HAL_RCCEx_GetPeriphCLKFreq+0x210>
  {
    srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 800e356:	4b55      	ldr	r3, [pc, #340]	; (800e4ac <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800e358:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800e35c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800e360:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 800e362:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e364:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e368:	d03b      	beq.n	800e3e2 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 800e36a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e36c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e370:	d846      	bhi.n	800e400 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 800e372:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e374:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800e378:	d02e      	beq.n	800e3d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
 800e37a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e37c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800e380:	d83e      	bhi.n	800e400 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 800e382:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e384:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e388:	d00b      	beq.n	800e3a2 <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 800e38a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e38c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e390:	d836      	bhi.n	800e400 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 800e392:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e394:	2b00      	cmp	r3, #0
 800e396:	d00d      	beq.n	800e3b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 800e398:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e39a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e39e:	d012      	beq.n	800e3c6 <HAL_RCCEx_GetPeriphCLKFreq+0x1ce>
 800e3a0:	e02e      	b.n	800e400 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
    {
      case RCC_SAI2CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800e3a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e3a6:	4618      	mov	r0, r3
 800e3a8:	f7ff faf4 	bl	800d994 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800e3ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3ae:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800e3b0:	f001 b83f 	b.w	800f432 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e3b4:	f107 0318 	add.w	r3, r7, #24
 800e3b8:	4618      	mov	r0, r3
 800e3ba:	f7ff fc51 	bl	800dc60 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 800e3be:	69bb      	ldr	r3, [r7, #24]
 800e3c0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800e3c2:	f001 b836 	b.w	800f432 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI2CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e3c6:	f107 030c 	add.w	r3, r7, #12
 800e3ca:	4618      	mov	r0, r3
 800e3cc:	f7ff fdae 	bl	800df2c <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 800e3d0:	68fb      	ldr	r3, [r7, #12]
 800e3d2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800e3d4:	f001 b82d 	b.w	800f432 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI2CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800e3d8:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800e3dc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800e3de:	f001 b828 	b.w	800f432 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI2CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800e3e2:	4b32      	ldr	r3, [pc, #200]	; (800e4ac <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800e3e4:	681b      	ldr	r3, [r3, #0]
 800e3e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800e3ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e3ee:	d103      	bne.n	800e3f8 <HAL_RCCEx_GetPeriphCLKFreq+0x200>
        {
          frequency = HSI_VALUE;
 800e3f0:	4b30      	ldr	r3, [pc, #192]	; (800e4b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800e3f2:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800e3f4:	f001 b81d 	b.w	800f432 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
          frequency = 0U;
 800e3f8:	2300      	movs	r3, #0
 800e3fa:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800e3fc:	f001 b819 	b.w	800f432 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default :

        frequency = 0U;
 800e400:	2300      	movs	r3, #0
 800e402:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800e404:	f001 b815 	b.w	800f432 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAES)
 800e408:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e40c:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 800e410:	430b      	orrs	r3, r1
 800e412:	d126      	bne.n	800e462 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
  {
    /* Get the current SAES source */
    srcclk = __HAL_RCC_GET_SAES_SOURCE();
 800e414:	4b25      	ldr	r3, [pc, #148]	; (800e4ac <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800e416:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800e41a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e41e:	633b      	str	r3, [r7, #48]	; 0x30

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI))
 800e420:	4b22      	ldr	r3, [pc, #136]	; (800e4ac <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800e422:	681b      	ldr	r3, [r3, #0]
 800e424:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800e428:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e42c:	d106      	bne.n	800e43c <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 800e42e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e430:	2b00      	cmp	r3, #0
 800e432:	d103      	bne.n	800e43c <HAL_RCCEx_GetPeriphCLKFreq+0x244>
    {
      frequency = HSI_VALUE;
 800e434:	4b1f      	ldr	r3, [pc, #124]	; (800e4b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800e436:	637b      	str	r3, [r7, #52]	; 0x34
 800e438:	f000 bffb 	b.w	800f432 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI_DIV2))
 800e43c:	4b1b      	ldr	r3, [pc, #108]	; (800e4ac <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800e43e:	681b      	ldr	r3, [r3, #0]
 800e440:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800e444:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e448:	d107      	bne.n	800e45a <HAL_RCCEx_GetPeriphCLKFreq+0x262>
 800e44a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e44c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e450:	d103      	bne.n	800e45a <HAL_RCCEx_GetPeriphCLKFreq+0x262>
    {
      frequency = HSI_VALUE >> 1U;
 800e452:	4b19      	ldr	r3, [pc, #100]	; (800e4b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800e454:	637b      	str	r3, [r7, #52]	; 0x34
 800e456:	f000 bfec 	b.w	800f432 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for SAES */
    else
    {
      frequency = 0U;
 800e45a:	2300      	movs	r3, #0
 800e45c:	637b      	str	r3, [r7, #52]	; 0x34
 800e45e:	f000 bfe8 	b.w	800f432 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ICLK)
 800e462:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e466:	f5a2 1180 	sub.w	r1, r2, #1048576	; 0x100000
 800e46a:	430b      	orrs	r3, r1
 800e46c:	d164      	bne.n	800e538 <HAL_RCCEx_GetPeriphCLKFreq+0x340>
  {
    srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 800e46e:	4b0f      	ldr	r3, [pc, #60]	; (800e4ac <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800e470:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800e474:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 800e478:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 800e47a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e47c:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800e480:	d03d      	beq.n	800e4fe <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 800e482:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e484:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800e488:	d852      	bhi.n	800e530 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 800e48a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e48c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800e490:	d014      	beq.n	800e4bc <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
 800e492:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e494:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800e498:	d84a      	bhi.n	800e530 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 800e49a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e49c:	2b00      	cmp	r3, #0
 800e49e:	d01f      	beq.n	800e4e0 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>
 800e4a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e4a2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800e4a6:	d012      	beq.n	800e4ce <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
 800e4a8:	e042      	b.n	800e530 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 800e4aa:	bf00      	nop
 800e4ac:	46020c00 	.word	0x46020c00
 800e4b0:	0007a120 	.word	0x0007a120
 800e4b4:	00f42400 	.word	0x00f42400
 800e4b8:	007a1200 	.word	0x007a1200
    {
      case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800e4bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e4c0:	4618      	mov	r0, r3
 800e4c2:	f7ff fa67 	bl	800d994 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 800e4c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e4c8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800e4ca:	f000 bfb2 	b.w	800f432 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e4ce:	f107 0318 	add.w	r3, r7, #24
 800e4d2:	4618      	mov	r0, r3
 800e4d4:	f7ff fbc4 	bl	800dc60 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 800e4d8:	69fb      	ldr	r3, [r7, #28]
 800e4da:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800e4dc:	f000 bfa9 	b.w	800f432 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 800e4e0:	4bab      	ldr	r3, [pc, #684]	; (800e790 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800e4e2:	681b      	ldr	r3, [r3, #0]
 800e4e4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800e4e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e4ec:	d103      	bne.n	800e4f6 <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
        {
          frequency = HSI48_VALUE;
 800e4ee:	4ba9      	ldr	r3, [pc, #676]	; (800e794 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800e4f0:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800e4f2:	f000 bf9e 	b.w	800f432 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
          frequency = 0U;
 800e4f6:	2300      	movs	r3, #0
 800e4f8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800e4fa:	f000 bf9a 	b.w	800f432 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800e4fe:	4ba4      	ldr	r3, [pc, #656]	; (800e790 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800e500:	689b      	ldr	r3, [r3, #8]
 800e502:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e506:	2b00      	cmp	r3, #0
 800e508:	d005      	beq.n	800e516 <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 800e50a:	4ba1      	ldr	r3, [pc, #644]	; (800e790 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800e50c:	689b      	ldr	r3, [r3, #8]
 800e50e:	0e1b      	lsrs	r3, r3, #24
 800e510:	f003 030f 	and.w	r3, r3, #15
 800e514:	e006      	b.n	800e524 <HAL_RCCEx_GetPeriphCLKFreq+0x32c>
 800e516:	4b9e      	ldr	r3, [pc, #632]	; (800e790 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800e518:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800e51c:	041b      	lsls	r3, r3, #16
 800e51e:	0e1b      	lsrs	r3, r3, #24
 800e520:	f003 030f 	and.w	r3, r3, #15
 800e524:	4a9c      	ldr	r2, [pc, #624]	; (800e798 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>)
 800e526:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e52a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800e52c:	f000 bf81 	b.w	800f432 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default :

        frequency = 0U;
 800e530:	2300      	movs	r3, #0
 800e532:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800e534:	f000 bf7d 	b.w	800f432 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800e538:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e53c:	f5a2 1100 	sub.w	r1, r2, #2097152	; 0x200000
 800e540:	430b      	orrs	r3, r1
 800e542:	d175      	bne.n	800e630 <HAL_RCCEx_GetPeriphCLKFreq+0x438>
  {
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800e544:	4b92      	ldr	r3, [pc, #584]	; (800e790 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800e546:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800e54a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e54e:	633b      	str	r3, [r7, #48]	; 0x30
    if (srcclk == RCC_SDMMCCLKSOURCE_CLK48)
 800e550:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e552:	2b00      	cmp	r3, #0
 800e554:	d15b      	bne.n	800e60e <HAL_RCCEx_GetPeriphCLKFreq+0x416>
    {
      srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 800e556:	4b8e      	ldr	r3, [pc, #568]	; (800e790 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800e558:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800e55c:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 800e560:	633b      	str	r3, [r7, #48]	; 0x30

      switch (srcclk)
 800e562:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e564:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800e568:	d034      	beq.n	800e5d4 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800e56a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e56c:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800e570:	d849      	bhi.n	800e606 <HAL_RCCEx_GetPeriphCLKFreq+0x40e>
 800e572:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e574:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800e578:	d00b      	beq.n	800e592 <HAL_RCCEx_GetPeriphCLKFreq+0x39a>
 800e57a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e57c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800e580:	d841      	bhi.n	800e606 <HAL_RCCEx_GetPeriphCLKFreq+0x40e>
 800e582:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e584:	2b00      	cmp	r3, #0
 800e586:	d016      	beq.n	800e5b6 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 800e588:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e58a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800e58e:	d009      	beq.n	800e5a4 <HAL_RCCEx_GetPeriphCLKFreq+0x3ac>
 800e590:	e039      	b.n	800e606 <HAL_RCCEx_GetPeriphCLKFreq+0x40e>
      {
        case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800e592:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e596:	4618      	mov	r0, r3
 800e598:	f7ff f9fc 	bl	800d994 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800e59c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e59e:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 800e5a0:	f000 bf47 	b.w	800f432 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
        }
        case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e5a4:	f107 0318 	add.w	r3, r7, #24
 800e5a8:	4618      	mov	r0, r3
 800e5aa:	f7ff fb59 	bl	800dc60 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800e5ae:	69fb      	ldr	r3, [r7, #28]
 800e5b0:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 800e5b2:	f000 bf3e 	b.w	800f432 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
        }
        case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 800e5b6:	4b76      	ldr	r3, [pc, #472]	; (800e790 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800e5b8:	681b      	ldr	r3, [r3, #0]
 800e5ba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800e5be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e5c2:	d103      	bne.n	800e5cc <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
          {
            frequency = HSI48_VALUE;
 800e5c4:	4b73      	ldr	r3, [pc, #460]	; (800e794 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800e5c6:	637b      	str	r3, [r7, #52]	; 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 800e5c8:	f000 bf33 	b.w	800f432 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
            frequency = 0U;
 800e5cc:	2300      	movs	r3, #0
 800e5ce:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 800e5d0:	f000 bf2f 	b.w	800f432 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
        }
        case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800e5d4:	4b6e      	ldr	r3, [pc, #440]	; (800e790 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800e5d6:	689b      	ldr	r3, [r3, #8]
 800e5d8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e5dc:	2b00      	cmp	r3, #0
 800e5de:	d005      	beq.n	800e5ec <HAL_RCCEx_GetPeriphCLKFreq+0x3f4>
 800e5e0:	4b6b      	ldr	r3, [pc, #428]	; (800e790 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800e5e2:	689b      	ldr	r3, [r3, #8]
 800e5e4:	0e1b      	lsrs	r3, r3, #24
 800e5e6:	f003 030f 	and.w	r3, r3, #15
 800e5ea:	e006      	b.n	800e5fa <HAL_RCCEx_GetPeriphCLKFreq+0x402>
 800e5ec:	4b68      	ldr	r3, [pc, #416]	; (800e790 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800e5ee:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800e5f2:	041b      	lsls	r3, r3, #16
 800e5f4:	0e1b      	lsrs	r3, r3, #24
 800e5f6:	f003 030f 	and.w	r3, r3, #15
 800e5fa:	4a67      	ldr	r2, [pc, #412]	; (800e798 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>)
 800e5fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e600:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 800e602:	f000 bf16 	b.w	800f432 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
        }
        default :
        {
          frequency = 0U;
 800e606:	2300      	movs	r3, #0
 800e608:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 800e60a:	f000 bf12 	b.w	800f432 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
        }
      }
    }
    else if (srcclk == RCC_SDMMCCLKSOURCE_PLL1)
 800e60e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e610:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800e614:	d108      	bne.n	800e628 <HAL_RCCEx_GetPeriphCLKFreq+0x430>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800e616:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e61a:	4618      	mov	r0, r3
 800e61c:	f7ff f9ba 	bl	800d994 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 800e620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e622:	637b      	str	r3, [r7, #52]	; 0x34
 800e624:	f000 bf05 	b.w	800f432 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else
    {
      frequency = 0U;
 800e628:	2300      	movs	r3, #0
 800e62a:	637b      	str	r3, [r7, #52]	; 0x34
 800e62c:	f000 bf01 	b.w	800f432 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART1)
 800e630:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e634:	1e51      	subs	r1, r2, #1
 800e636:	430b      	orrs	r3, r1
 800e638:	d136      	bne.n	800e6a8 <HAL_RCCEx_GetPeriphCLKFreq+0x4b0>
  {
    /* Get the current USART1 source */
    srcclk = __HAL_RCC_GET_USART1_SOURCE();
 800e63a:	4b55      	ldr	r3, [pc, #340]	; (800e790 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800e63c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800e640:	f003 0303 	and.w	r3, r3, #3
 800e644:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 800e646:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e648:	2b00      	cmp	r3, #0
 800e64a:	d104      	bne.n	800e656 <HAL_RCCEx_GetPeriphCLKFreq+0x45e>
    {
      frequency = HAL_RCC_GetPCLK2Freq();
 800e64c:	f7fe fafc 	bl	800cc48 <HAL_RCC_GetPCLK2Freq>
 800e650:	6378      	str	r0, [r7, #52]	; 0x34
 800e652:	f000 beee 	b.w	800f432 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 800e656:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e658:	2b01      	cmp	r3, #1
 800e65a:	d104      	bne.n	800e666 <HAL_RCCEx_GetPeriphCLKFreq+0x46e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800e65c:	f7fe f9be 	bl	800c9dc <HAL_RCC_GetSysClockFreq>
 800e660:	6378      	str	r0, [r7, #52]	; 0x34
 800e662:	f000 bee6 	b.w	800f432 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 800e666:	4b4a      	ldr	r3, [pc, #296]	; (800e790 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800e668:	681b      	ldr	r3, [r3, #0]
 800e66a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800e66e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e672:	d106      	bne.n	800e682 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 800e674:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e676:	2b02      	cmp	r3, #2
 800e678:	d103      	bne.n	800e682 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
    {
      frequency = HSI_VALUE;
 800e67a:	4b48      	ldr	r3, [pc, #288]	; (800e79c <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 800e67c:	637b      	str	r3, [r7, #52]	; 0x34
 800e67e:	f000 bed8 	b.w	800f432 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 800e682:	4b43      	ldr	r3, [pc, #268]	; (800e790 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800e684:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800e688:	f003 0302 	and.w	r3, r3, #2
 800e68c:	2b02      	cmp	r3, #2
 800e68e:	d107      	bne.n	800e6a0 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
 800e690:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e692:	2b03      	cmp	r3, #3
 800e694:	d104      	bne.n	800e6a0 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
    {
      frequency = LSE_VALUE;
 800e696:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e69a:	637b      	str	r3, [r7, #52]	; 0x34
 800e69c:	f000 bec9 	b.w	800f432 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for USART1 */
    else
    {
      frequency = 0U;
 800e6a0:	2300      	movs	r3, #0
 800e6a2:	637b      	str	r3, [r7, #52]	; 0x34
 800e6a4:	f000 bec5 	b.w	800f432 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART2)
 800e6a8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e6ac:	1e91      	subs	r1, r2, #2
 800e6ae:	430b      	orrs	r3, r1
 800e6b0:	d136      	bne.n	800e720 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
  {
    /* Get the current USART2 source */
    srcclk = __HAL_RCC_GET_USART2_SOURCE();
 800e6b2:	4b37      	ldr	r3, [pc, #220]	; (800e790 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800e6b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800e6b8:	f003 030c 	and.w	r3, r3, #12
 800e6bc:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 800e6be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e6c0:	2b00      	cmp	r3, #0
 800e6c2:	d104      	bne.n	800e6ce <HAL_RCCEx_GetPeriphCLKFreq+0x4d6>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800e6c4:	f7fe faac 	bl	800cc20 <HAL_RCC_GetPCLK1Freq>
 800e6c8:	6378      	str	r0, [r7, #52]	; 0x34
 800e6ca:	f000 beb2 	b.w	800f432 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 800e6ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e6d0:	2b04      	cmp	r3, #4
 800e6d2:	d104      	bne.n	800e6de <HAL_RCCEx_GetPeriphCLKFreq+0x4e6>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800e6d4:	f7fe f982 	bl	800c9dc <HAL_RCC_GetSysClockFreq>
 800e6d8:	6378      	str	r0, [r7, #52]	; 0x34
 800e6da:	f000 beaa 	b.w	800f432 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 800e6de:	4b2c      	ldr	r3, [pc, #176]	; (800e790 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800e6e0:	681b      	ldr	r3, [r3, #0]
 800e6e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800e6e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e6ea:	d106      	bne.n	800e6fa <HAL_RCCEx_GetPeriphCLKFreq+0x502>
 800e6ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e6ee:	2b08      	cmp	r3, #8
 800e6f0:	d103      	bne.n	800e6fa <HAL_RCCEx_GetPeriphCLKFreq+0x502>
    {
      frequency = HSI_VALUE;
 800e6f2:	4b2a      	ldr	r3, [pc, #168]	; (800e79c <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 800e6f4:	637b      	str	r3, [r7, #52]	; 0x34
 800e6f6:	f000 be9c 	b.w	800f432 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 800e6fa:	4b25      	ldr	r3, [pc, #148]	; (800e790 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800e6fc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800e700:	f003 0302 	and.w	r3, r3, #2
 800e704:	2b02      	cmp	r3, #2
 800e706:	d107      	bne.n	800e718 <HAL_RCCEx_GetPeriphCLKFreq+0x520>
 800e708:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e70a:	2b0c      	cmp	r3, #12
 800e70c:	d104      	bne.n	800e718 <HAL_RCCEx_GetPeriphCLKFreq+0x520>
    {
      frequency = LSE_VALUE;
 800e70e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e712:	637b      	str	r3, [r7, #52]	; 0x34
 800e714:	f000 be8d 	b.w	800f432 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for USART2 */
    else
    {
      frequency = 0U;
 800e718:	2300      	movs	r3, #0
 800e71a:	637b      	str	r3, [r7, #52]	; 0x34
 800e71c:	f000 be89 	b.w	800f432 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART3)
 800e720:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e724:	1f11      	subs	r1, r2, #4
 800e726:	430b      	orrs	r3, r1
 800e728:	d13e      	bne.n	800e7a8 <HAL_RCCEx_GetPeriphCLKFreq+0x5b0>
  {
    /* Get the current USART3 source */
    srcclk = __HAL_RCC_GET_USART3_SOURCE();
 800e72a:	4b19      	ldr	r3, [pc, #100]	; (800e790 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800e72c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800e730:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800e734:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 800e736:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e738:	2b00      	cmp	r3, #0
 800e73a:	d104      	bne.n	800e746 <HAL_RCCEx_GetPeriphCLKFreq+0x54e>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800e73c:	f7fe fa70 	bl	800cc20 <HAL_RCC_GetPCLK1Freq>
 800e740:	6378      	str	r0, [r7, #52]	; 0x34
 800e742:	f000 be76 	b.w	800f432 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 800e746:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e748:	2b10      	cmp	r3, #16
 800e74a:	d104      	bne.n	800e756 <HAL_RCCEx_GetPeriphCLKFreq+0x55e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800e74c:	f7fe f946 	bl	800c9dc <HAL_RCC_GetSysClockFreq>
 800e750:	6378      	str	r0, [r7, #52]	; 0x34
 800e752:	f000 be6e 	b.w	800f432 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 800e756:	4b0e      	ldr	r3, [pc, #56]	; (800e790 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800e758:	681b      	ldr	r3, [r3, #0]
 800e75a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800e75e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e762:	d106      	bne.n	800e772 <HAL_RCCEx_GetPeriphCLKFreq+0x57a>
 800e764:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e766:	2b20      	cmp	r3, #32
 800e768:	d103      	bne.n	800e772 <HAL_RCCEx_GetPeriphCLKFreq+0x57a>
    {
      frequency = HSI_VALUE;
 800e76a:	4b0c      	ldr	r3, [pc, #48]	; (800e79c <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 800e76c:	637b      	str	r3, [r7, #52]	; 0x34
 800e76e:	f000 be60 	b.w	800f432 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 800e772:	4b07      	ldr	r3, [pc, #28]	; (800e790 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800e774:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800e778:	f003 0302 	and.w	r3, r3, #2
 800e77c:	2b02      	cmp	r3, #2
 800e77e:	d10f      	bne.n	800e7a0 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 800e780:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e782:	2b30      	cmp	r3, #48	; 0x30
 800e784:	d10c      	bne.n	800e7a0 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
    {
      frequency = LSE_VALUE;
 800e786:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e78a:	637b      	str	r3, [r7, #52]	; 0x34
 800e78c:	f000 be51 	b.w	800f432 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
 800e790:	46020c00 	.word	0x46020c00
 800e794:	02dc6c00 	.word	0x02dc6c00
 800e798:	08014f00 	.word	0x08014f00
 800e79c:	00f42400 	.word	0x00f42400
    }
    /* Clock not enabled for USART3 */
    else
    {
      frequency = 0U;
 800e7a0:	2300      	movs	r3, #0
 800e7a2:	637b      	str	r3, [r7, #52]	; 0x34
 800e7a4:	f000 be45 	b.w	800f432 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART4)
 800e7a8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e7ac:	f1a2 0108 	sub.w	r1, r2, #8
 800e7b0:	430b      	orrs	r3, r1
 800e7b2:	d136      	bne.n	800e822 <HAL_RCCEx_GetPeriphCLKFreq+0x62a>
  {
    /* Get the current UART4 source */
    srcclk = __HAL_RCC_GET_UART4_SOURCE();
 800e7b4:	4b9f      	ldr	r3, [pc, #636]	; (800ea34 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800e7b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800e7ba:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800e7be:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 800e7c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e7c2:	2b00      	cmp	r3, #0
 800e7c4:	d104      	bne.n	800e7d0 <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800e7c6:	f7fe fa2b 	bl	800cc20 <HAL_RCC_GetPCLK1Freq>
 800e7ca:	6378      	str	r0, [r7, #52]	; 0x34
 800e7cc:	f000 be31 	b.w	800f432 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 800e7d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e7d2:	2b40      	cmp	r3, #64	; 0x40
 800e7d4:	d104      	bne.n	800e7e0 <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800e7d6:	f7fe f901 	bl	800c9dc <HAL_RCC_GetSysClockFreq>
 800e7da:	6378      	str	r0, [r7, #52]	; 0x34
 800e7dc:	f000 be29 	b.w	800f432 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 800e7e0:	4b94      	ldr	r3, [pc, #592]	; (800ea34 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800e7e2:	681b      	ldr	r3, [r3, #0]
 800e7e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800e7e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e7ec:	d106      	bne.n	800e7fc <HAL_RCCEx_GetPeriphCLKFreq+0x604>
 800e7ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e7f0:	2b80      	cmp	r3, #128	; 0x80
 800e7f2:	d103      	bne.n	800e7fc <HAL_RCCEx_GetPeriphCLKFreq+0x604>
    {
      frequency = HSI_VALUE;
 800e7f4:	4b90      	ldr	r3, [pc, #576]	; (800ea38 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800e7f6:	637b      	str	r3, [r7, #52]	; 0x34
 800e7f8:	f000 be1b 	b.w	800f432 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 800e7fc:	4b8d      	ldr	r3, [pc, #564]	; (800ea34 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800e7fe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800e802:	f003 0302 	and.w	r3, r3, #2
 800e806:	2b02      	cmp	r3, #2
 800e808:	d107      	bne.n	800e81a <HAL_RCCEx_GetPeriphCLKFreq+0x622>
 800e80a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e80c:	2bc0      	cmp	r3, #192	; 0xc0
 800e80e:	d104      	bne.n	800e81a <HAL_RCCEx_GetPeriphCLKFreq+0x622>
    {
      frequency = LSE_VALUE;
 800e810:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e814:	637b      	str	r3, [r7, #52]	; 0x34
 800e816:	f000 be0c 	b.w	800f432 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for UART4 */
    else
    {
      frequency = 0U;
 800e81a:	2300      	movs	r3, #0
 800e81c:	637b      	str	r3, [r7, #52]	; 0x34
 800e81e:	f000 be08 	b.w	800f432 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART5)
 800e822:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e826:	f1a2 0110 	sub.w	r1, r2, #16
 800e82a:	430b      	orrs	r3, r1
 800e82c:	d139      	bne.n	800e8a2 <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
  {
    /* Get the current UART5 source */
    srcclk = __HAL_RCC_GET_UART5_SOURCE();
 800e82e:	4b81      	ldr	r3, [pc, #516]	; (800ea34 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800e830:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800e834:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e838:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 800e83a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e83c:	2b00      	cmp	r3, #0
 800e83e:	d104      	bne.n	800e84a <HAL_RCCEx_GetPeriphCLKFreq+0x652>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800e840:	f7fe f9ee 	bl	800cc20 <HAL_RCC_GetPCLK1Freq>
 800e844:	6378      	str	r0, [r7, #52]	; 0x34
 800e846:	f000 bdf4 	b.w	800f432 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_UART5CLKSOURCE_SYSCLK)
 800e84a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e84c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e850:	d104      	bne.n	800e85c <HAL_RCCEx_GetPeriphCLKFreq+0x664>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800e852:	f7fe f8c3 	bl	800c9dc <HAL_RCC_GetSysClockFreq>
 800e856:	6378      	str	r0, [r7, #52]	; 0x34
 800e858:	f000 bdeb 	b.w	800f432 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 800e85c:	4b75      	ldr	r3, [pc, #468]	; (800ea34 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800e85e:	681b      	ldr	r3, [r3, #0]
 800e860:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800e864:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e868:	d107      	bne.n	800e87a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
 800e86a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e86c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e870:	d103      	bne.n	800e87a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
    {
      frequency = HSI_VALUE;
 800e872:	4b71      	ldr	r3, [pc, #452]	; (800ea38 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800e874:	637b      	str	r3, [r7, #52]	; 0x34
 800e876:	f000 bddc 	b.w	800f432 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 800e87a:	4b6e      	ldr	r3, [pc, #440]	; (800ea34 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800e87c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800e880:	f003 0302 	and.w	r3, r3, #2
 800e884:	2b02      	cmp	r3, #2
 800e886:	d108      	bne.n	800e89a <HAL_RCCEx_GetPeriphCLKFreq+0x6a2>
 800e888:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e88a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800e88e:	d104      	bne.n	800e89a <HAL_RCCEx_GetPeriphCLKFreq+0x6a2>
    {
      frequency = LSE_VALUE;
 800e890:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e894:	637b      	str	r3, [r7, #52]	; 0x34
 800e896:	f000 bdcc 	b.w	800f432 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 800e89a:	2300      	movs	r3, #0
 800e89c:	637b      	str	r3, [r7, #52]	; 0x34
 800e89e:	f000 bdc8 	b.w	800f432 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    {
      frequency = 0U;
    }
  }
#endif /* USART6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPUART1)
 800e8a2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e8a6:	f1a2 0120 	sub.w	r1, r2, #32
 800e8aa:	430b      	orrs	r3, r1
 800e8ac:	d158      	bne.n	800e960 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
  {
    /* Get the current LPUART1 source */
    srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 800e8ae:	4b61      	ldr	r3, [pc, #388]	; (800ea34 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800e8b0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800e8b4:	f003 0307 	and.w	r3, r3, #7
 800e8b8:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 800e8ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e8bc:	2b00      	cmp	r3, #0
 800e8be:	d104      	bne.n	800e8ca <HAL_RCCEx_GetPeriphCLKFreq+0x6d2>
    {
      frequency = HAL_RCC_GetPCLK3Freq();
 800e8c0:	f7fe f9d6 	bl	800cc70 <HAL_RCC_GetPCLK3Freq>
 800e8c4:	6378      	str	r0, [r7, #52]	; 0x34
 800e8c6:	f000 bdb4 	b.w	800f432 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 800e8ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e8cc:	2b01      	cmp	r3, #1
 800e8ce:	d104      	bne.n	800e8da <HAL_RCCEx_GetPeriphCLKFreq+0x6e2>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800e8d0:	f7fe f884 	bl	800c9dc <HAL_RCC_GetSysClockFreq>
 800e8d4:	6378      	str	r0, [r7, #52]	; 0x34
 800e8d6:	f000 bdac 	b.w	800f432 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 800e8da:	4b56      	ldr	r3, [pc, #344]	; (800ea34 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800e8dc:	681b      	ldr	r3, [r3, #0]
 800e8de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800e8e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e8e6:	d106      	bne.n	800e8f6 <HAL_RCCEx_GetPeriphCLKFreq+0x6fe>
 800e8e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e8ea:	2b02      	cmp	r3, #2
 800e8ec:	d103      	bne.n	800e8f6 <HAL_RCCEx_GetPeriphCLKFreq+0x6fe>
    {
      frequency = HSI_VALUE;
 800e8ee:	4b52      	ldr	r3, [pc, #328]	; (800ea38 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800e8f0:	637b      	str	r3, [r7, #52]	; 0x34
 800e8f2:	f000 bd9e 	b.w	800f432 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 800e8f6:	4b4f      	ldr	r3, [pc, #316]	; (800ea34 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800e8f8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800e8fc:	f003 0302 	and.w	r3, r3, #2
 800e900:	2b02      	cmp	r3, #2
 800e902:	d107      	bne.n	800e914 <HAL_RCCEx_GetPeriphCLKFreq+0x71c>
 800e904:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e906:	2b03      	cmp	r3, #3
 800e908:	d104      	bne.n	800e914 <HAL_RCCEx_GetPeriphCLKFreq+0x71c>
    {
      frequency = LSE_VALUE;
 800e90a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e90e:	637b      	str	r3, [r7, #52]	; 0x34
 800e910:	f000 bd8f 	b.w	800f432 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_MSIK))
 800e914:	4b47      	ldr	r3, [pc, #284]	; (800ea34 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800e916:	681b      	ldr	r3, [r3, #0]
 800e918:	f003 0320 	and.w	r3, r3, #32
 800e91c:	2b20      	cmp	r3, #32
 800e91e:	d11b      	bne.n	800e958 <HAL_RCCEx_GetPeriphCLKFreq+0x760>
 800e920:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e922:	2b04      	cmp	r3, #4
 800e924:	d118      	bne.n	800e958 <HAL_RCCEx_GetPeriphCLKFreq+0x760>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800e926:	4b43      	ldr	r3, [pc, #268]	; (800ea34 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800e928:	689b      	ldr	r3, [r3, #8]
 800e92a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e92e:	2b00      	cmp	r3, #0
 800e930:	d005      	beq.n	800e93e <HAL_RCCEx_GetPeriphCLKFreq+0x746>
 800e932:	4b40      	ldr	r3, [pc, #256]	; (800ea34 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800e934:	689b      	ldr	r3, [r3, #8]
 800e936:	0e1b      	lsrs	r3, r3, #24
 800e938:	f003 030f 	and.w	r3, r3, #15
 800e93c:	e006      	b.n	800e94c <HAL_RCCEx_GetPeriphCLKFreq+0x754>
 800e93e:	4b3d      	ldr	r3, [pc, #244]	; (800ea34 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800e940:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800e944:	041b      	lsls	r3, r3, #16
 800e946:	0e1b      	lsrs	r3, r3, #24
 800e948:	f003 030f 	and.w	r3, r3, #15
 800e94c:	4a3b      	ldr	r2, [pc, #236]	; (800ea3c <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 800e94e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e952:	637b      	str	r3, [r7, #52]	; 0x34
 800e954:	f000 bd6d 	b.w	800f432 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for LPUART1 */
    else
    {
      frequency = 0U;
 800e958:	2300      	movs	r3, #0
 800e95a:	637b      	str	r3, [r7, #52]	; 0x34
 800e95c:	f000 bd69 	b.w	800f432 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADCDAC)
 800e960:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e964:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 800e968:	430b      	orrs	r3, r1
 800e96a:	d169      	bne.n	800ea40 <HAL_RCCEx_GetPeriphCLKFreq+0x848>
  {
    srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 800e96c:	4b31      	ldr	r3, [pc, #196]	; (800ea34 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800e96e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800e972:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800e976:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 800e978:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e97a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e97e:	d104      	bne.n	800e98a <HAL_RCCEx_GetPeriphCLKFreq+0x792>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800e980:	f7fe f82c 	bl	800c9dc <HAL_RCC_GetSysClockFreq>
 800e984:	6378      	str	r0, [r7, #52]	; 0x34
 800e986:	f000 bd54 	b.w	800f432 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2)
 800e98a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e98c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e990:	d108      	bne.n	800e9a4 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e992:	f107 0318 	add.w	r3, r7, #24
 800e996:	4618      	mov	r0, r3
 800e998:	f7ff f962 	bl	800dc60 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_R_Frequency;
 800e99c:	6a3b      	ldr	r3, [r7, #32]
 800e99e:	637b      	str	r3, [r7, #52]	; 0x34
 800e9a0:	f000 bd47 	b.w	800f432 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 800e9a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e9a6:	2b00      	cmp	r3, #0
 800e9a8:	d104      	bne.n	800e9b4 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
    {
      frequency = HAL_RCC_GetHCLKFreq();
 800e9aa:	f7fe f91f 	bl	800cbec <HAL_RCC_GetHCLKFreq>
 800e9ae:	6378      	str	r0, [r7, #52]	; 0x34
 800e9b0:	f000 bd3f 	b.w	800f432 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_MSIK)
 800e9b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e9b6:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800e9ba:	d118      	bne.n	800e9ee <HAL_RCCEx_GetPeriphCLKFreq+0x7f6>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)];
 800e9bc:	4b1d      	ldr	r3, [pc, #116]	; (800ea34 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800e9be:	689b      	ldr	r3, [r3, #8]
 800e9c0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e9c4:	2b00      	cmp	r3, #0
 800e9c6:	d005      	beq.n	800e9d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
 800e9c8:	4b1a      	ldr	r3, [pc, #104]	; (800ea34 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800e9ca:	689b      	ldr	r3, [r3, #8]
 800e9cc:	0f1b      	lsrs	r3, r3, #28
 800e9ce:	f003 030f 	and.w	r3, r3, #15
 800e9d2:	e006      	b.n	800e9e2 <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
 800e9d4:	4b17      	ldr	r3, [pc, #92]	; (800ea34 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800e9d6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800e9da:	041b      	lsls	r3, r3, #16
 800e9dc:	0f1b      	lsrs	r3, r3, #28
 800e9de:	f003 030f 	and.w	r3, r3, #15
 800e9e2:	4a16      	ldr	r2, [pc, #88]	; (800ea3c <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 800e9e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e9e8:	637b      	str	r3, [r7, #52]	; 0x34
 800e9ea:	f000 bd22 	b.w	800f432 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 800e9ee:	4b11      	ldr	r3, [pc, #68]	; (800ea34 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800e9f0:	681b      	ldr	r3, [r3, #0]
 800e9f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e9f6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800e9fa:	d107      	bne.n	800ea0c <HAL_RCCEx_GetPeriphCLKFreq+0x814>
 800e9fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e9fe:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800ea02:	d103      	bne.n	800ea0c <HAL_RCCEx_GetPeriphCLKFreq+0x814>
    {
      frequency = HSE_VALUE;
 800ea04:	4b0c      	ldr	r3, [pc, #48]	; (800ea38 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800ea06:	637b      	str	r3, [r7, #52]	; 0x34
 800ea08:	f000 bd13 	b.w	800f432 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 800ea0c:	4b09      	ldr	r3, [pc, #36]	; (800ea34 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800ea0e:	681b      	ldr	r3, [r3, #0]
 800ea10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ea14:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ea18:	d107      	bne.n	800ea2a <HAL_RCCEx_GetPeriphCLKFreq+0x832>
 800ea1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea1c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ea20:	d103      	bne.n	800ea2a <HAL_RCCEx_GetPeriphCLKFreq+0x832>
    {
      frequency = HSI_VALUE;
 800ea22:	4b05      	ldr	r3, [pc, #20]	; (800ea38 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800ea24:	637b      	str	r3, [r7, #52]	; 0x34
 800ea26:	f000 bd04 	b.w	800f432 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for ADC */
    else
    {
      frequency = 0U;
 800ea2a:	2300      	movs	r3, #0
 800ea2c:	637b      	str	r3, [r7, #52]	; 0x34
 800ea2e:	f000 bd00 	b.w	800f432 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
 800ea32:	bf00      	nop
 800ea34:	46020c00 	.word	0x46020c00
 800ea38:	00f42400 	.word	0x00f42400
 800ea3c:	08014f00 	.word	0x08014f00
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_MDF1)
 800ea40:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ea44:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 800ea48:	430b      	orrs	r3, r1
 800ea4a:	d14e      	bne.n	800eaea <HAL_RCCEx_GetPeriphCLKFreq+0x8f2>
  {
    /* Get the current MDF1 source */
    srcclk = __HAL_RCC_GET_MDF1_SOURCE();
 800ea4c:	4ba8      	ldr	r3, [pc, #672]	; (800ecf0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800ea4e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800ea52:	f003 0307 	and.w	r3, r3, #7
 800ea56:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 800ea58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea5a:	2b04      	cmp	r3, #4
 800ea5c:	d841      	bhi.n	800eae2 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 800ea5e:	a201      	add	r2, pc, #4	; (adr r2, 800ea64 <HAL_RCCEx_GetPeriphCLKFreq+0x86c>)
 800ea60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ea64:	0800ea9d 	.word	0x0800ea9d
 800ea68:	0800ea79 	.word	0x0800ea79
 800ea6c:	0800ea8b 	.word	0x0800ea8b
 800ea70:	0800eaa7 	.word	0x0800eaa7
 800ea74:	0800eab1 	.word	0x0800eab1
    {
      case RCC_MDF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ea78:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ea7c:	4618      	mov	r0, r3
 800ea7e:	f7fe ff89 	bl	800d994 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800ea82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea84:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800ea86:	f000 bcd4 	b.w	800f432 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_MDF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ea8a:	f107 030c 	add.w	r3, r7, #12
 800ea8e:	4618      	mov	r0, r3
 800ea90:	f7ff fa4c 	bl	800df2c <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 800ea94:	693b      	ldr	r3, [r7, #16]
 800ea96:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800ea98:	f000 bccb 	b.w	800f432 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_MDF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 800ea9c:	f7fe f8a6 	bl	800cbec <HAL_RCC_GetHCLKFreq>
 800eaa0:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800eaa2:	f000 bcc6 	b.w	800f432 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_MDF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800eaa6:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800eaaa:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800eaac:	f000 bcc1 	b.w	800f432 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_MDF1CLKSOURCE_MSIK:

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800eab0:	4b8f      	ldr	r3, [pc, #572]	; (800ecf0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800eab2:	689b      	ldr	r3, [r3, #8]
 800eab4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800eab8:	2b00      	cmp	r3, #0
 800eaba:	d005      	beq.n	800eac8 <HAL_RCCEx_GetPeriphCLKFreq+0x8d0>
 800eabc:	4b8c      	ldr	r3, [pc, #560]	; (800ecf0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800eabe:	689b      	ldr	r3, [r3, #8]
 800eac0:	0e1b      	lsrs	r3, r3, #24
 800eac2:	f003 030f 	and.w	r3, r3, #15
 800eac6:	e006      	b.n	800ead6 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 800eac8:	4b89      	ldr	r3, [pc, #548]	; (800ecf0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800eaca:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800eace:	041b      	lsls	r3, r3, #16
 800ead0:	0e1b      	lsrs	r3, r3, #24
 800ead2:	f003 030f 	and.w	r3, r3, #15
 800ead6:	4a87      	ldr	r2, [pc, #540]	; (800ecf4 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800ead8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800eadc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800eade:	f000 bca8 	b.w	800f432 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default:

        frequency = 0U;
 800eae2:	2300      	movs	r3, #0
 800eae4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800eae6:	f000 bca4 	b.w	800f432 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADF1)
 800eaea:	e9d7 2300 	ldrd	r2, r3, [r7]
 800eaee:	f5a2 3100 	sub.w	r1, r2, #131072	; 0x20000
 800eaf2:	430b      	orrs	r3, r1
 800eaf4:	d15d      	bne.n	800ebb2 <HAL_RCCEx_GetPeriphCLKFreq+0x9ba>
  {
    /* Get the current ADF1 source */
    srcclk = __HAL_RCC_GET_ADF1_SOURCE();
 800eaf6:	4b7e      	ldr	r3, [pc, #504]	; (800ecf0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800eaf8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800eafc:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800eb00:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 800eb02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb04:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800eb08:	d036      	beq.n	800eb78 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 800eb0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb0c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800eb10:	d84b      	bhi.n	800ebaa <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
 800eb12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb14:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800eb18:	d029      	beq.n	800eb6e <HAL_RCCEx_GetPeriphCLKFreq+0x976>
 800eb1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb1c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800eb20:	d843      	bhi.n	800ebaa <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
 800eb22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb24:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800eb28:	d013      	beq.n	800eb52 <HAL_RCCEx_GetPeriphCLKFreq+0x95a>
 800eb2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb2c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800eb30:	d83b      	bhi.n	800ebaa <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
 800eb32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb34:	2b00      	cmp	r3, #0
 800eb36:	d015      	beq.n	800eb64 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>
 800eb38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb3a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800eb3e:	d134      	bne.n	800ebaa <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
    {
      case RCC_ADF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800eb40:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800eb44:	4618      	mov	r0, r3
 800eb46:	f7fe ff25 	bl	800d994 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800eb4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb4c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800eb4e:	f000 bc70 	b.w	800f432 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ADF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800eb52:	f107 030c 	add.w	r3, r7, #12
 800eb56:	4618      	mov	r0, r3
 800eb58:	f7ff f9e8 	bl	800df2c <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 800eb5c:	693b      	ldr	r3, [r7, #16]
 800eb5e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800eb60:	f000 bc67 	b.w	800f432 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ADF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 800eb64:	f7fe f842 	bl	800cbec <HAL_RCC_GetHCLKFreq>
 800eb68:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800eb6a:	f000 bc62 	b.w	800f432 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ADF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800eb6e:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800eb72:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800eb74:	f000 bc5d 	b.w	800f432 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ADF1CLKSOURCE_MSIK:

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800eb78:	4b5d      	ldr	r3, [pc, #372]	; (800ecf0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800eb7a:	689b      	ldr	r3, [r3, #8]
 800eb7c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800eb80:	2b00      	cmp	r3, #0
 800eb82:	d005      	beq.n	800eb90 <HAL_RCCEx_GetPeriphCLKFreq+0x998>
 800eb84:	4b5a      	ldr	r3, [pc, #360]	; (800ecf0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800eb86:	689b      	ldr	r3, [r3, #8]
 800eb88:	0e1b      	lsrs	r3, r3, #24
 800eb8a:	f003 030f 	and.w	r3, r3, #15
 800eb8e:	e006      	b.n	800eb9e <HAL_RCCEx_GetPeriphCLKFreq+0x9a6>
 800eb90:	4b57      	ldr	r3, [pc, #348]	; (800ecf0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800eb92:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800eb96:	041b      	lsls	r3, r3, #16
 800eb98:	0e1b      	lsrs	r3, r3, #24
 800eb9a:	f003 030f 	and.w	r3, r3, #15
 800eb9e:	4a55      	ldr	r2, [pc, #340]	; (800ecf4 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800eba0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800eba4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800eba6:	f000 bc44 	b.w	800f432 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default:

        frequency = 0U;
 800ebaa:	2300      	movs	r3, #0
 800ebac:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800ebae:	f000 bc40 	b.w	800f432 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C1)
 800ebb2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ebb6:	f1a2 0140 	sub.w	r1, r2, #64	; 0x40
 800ebba:	430b      	orrs	r3, r1
 800ebbc:	d14a      	bne.n	800ec54 <HAL_RCCEx_GetPeriphCLKFreq+0xa5c>
  {
    /* Get the current I2C1 source */
    srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 800ebbe:	4b4c      	ldr	r3, [pc, #304]	; (800ecf0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800ebc0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800ebc4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800ebc8:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 800ebca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebcc:	2b00      	cmp	r3, #0
 800ebce:	d104      	bne.n	800ebda <HAL_RCCEx_GetPeriphCLKFreq+0x9e2>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800ebd0:	f7fe f826 	bl	800cc20 <HAL_RCC_GetPCLK1Freq>
 800ebd4:	6378      	str	r0, [r7, #52]	; 0x34
 800ebd6:	f000 bc2c 	b.w	800f432 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 800ebda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebdc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ebe0:	d104      	bne.n	800ebec <HAL_RCCEx_GetPeriphCLKFreq+0x9f4>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800ebe2:	f7fd fefb 	bl	800c9dc <HAL_RCC_GetSysClockFreq>
 800ebe6:	6378      	str	r0, [r7, #52]	; 0x34
 800ebe8:	f000 bc23 	b.w	800f432 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 800ebec:	4b40      	ldr	r3, [pc, #256]	; (800ecf0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800ebee:	681b      	ldr	r3, [r3, #0]
 800ebf0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ebf4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ebf8:	d107      	bne.n	800ec0a <HAL_RCCEx_GetPeriphCLKFreq+0xa12>
 800ebfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebfc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ec00:	d103      	bne.n	800ec0a <HAL_RCCEx_GetPeriphCLKFreq+0xa12>
    {
      frequency = HSI_VALUE;
 800ec02:	4b3d      	ldr	r3, [pc, #244]	; (800ecf8 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 800ec04:	637b      	str	r3, [r7, #52]	; 0x34
 800ec06:	f000 bc14 	b.w	800f432 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C1CLKSOURCE_MSIK))
 800ec0a:	4b39      	ldr	r3, [pc, #228]	; (800ecf0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800ec0c:	681b      	ldr	r3, [r3, #0]
 800ec0e:	f003 0320 	and.w	r3, r3, #32
 800ec12:	2b20      	cmp	r3, #32
 800ec14:	d11b      	bne.n	800ec4e <HAL_RCCEx_GetPeriphCLKFreq+0xa56>
 800ec16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec18:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800ec1c:	d117      	bne.n	800ec4e <HAL_RCCEx_GetPeriphCLKFreq+0xa56>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800ec1e:	4b34      	ldr	r3, [pc, #208]	; (800ecf0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800ec20:	689b      	ldr	r3, [r3, #8]
 800ec22:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ec26:	2b00      	cmp	r3, #0
 800ec28:	d005      	beq.n	800ec36 <HAL_RCCEx_GetPeriphCLKFreq+0xa3e>
 800ec2a:	4b31      	ldr	r3, [pc, #196]	; (800ecf0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800ec2c:	689b      	ldr	r3, [r3, #8]
 800ec2e:	0e1b      	lsrs	r3, r3, #24
 800ec30:	f003 030f 	and.w	r3, r3, #15
 800ec34:	e006      	b.n	800ec44 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
 800ec36:	4b2e      	ldr	r3, [pc, #184]	; (800ecf0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800ec38:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800ec3c:	041b      	lsls	r3, r3, #16
 800ec3e:	0e1b      	lsrs	r3, r3, #24
 800ec40:	f003 030f 	and.w	r3, r3, #15
 800ec44:	4a2b      	ldr	r2, [pc, #172]	; (800ecf4 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800ec46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ec4a:	637b      	str	r3, [r7, #52]	; 0x34
 800ec4c:	e3f1      	b.n	800f432 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for I2C1 */
    else
    {
      frequency = 0U;
 800ec4e:	2300      	movs	r3, #0
 800ec50:	637b      	str	r3, [r7, #52]	; 0x34
 800ec52:	e3ee      	b.n	800f432 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C2)
 800ec54:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ec58:	f1a2 0180 	sub.w	r1, r2, #128	; 0x80
 800ec5c:	430b      	orrs	r3, r1
 800ec5e:	d14d      	bne.n	800ecfc <HAL_RCCEx_GetPeriphCLKFreq+0xb04>
  {
    /* Get the current I2C2 source */
    srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 800ec60:	4b23      	ldr	r3, [pc, #140]	; (800ecf0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800ec62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800ec66:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800ec6a:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 800ec6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec6e:	2b00      	cmp	r3, #0
 800ec70:	d103      	bne.n	800ec7a <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800ec72:	f7fd ffd5 	bl	800cc20 <HAL_RCC_GetPCLK1Freq>
 800ec76:	6378      	str	r0, [r7, #52]	; 0x34
 800ec78:	e3db      	b.n	800f432 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 800ec7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec7c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ec80:	d103      	bne.n	800ec8a <HAL_RCCEx_GetPeriphCLKFreq+0xa92>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800ec82:	f7fd feab 	bl	800c9dc <HAL_RCC_GetSysClockFreq>
 800ec86:	6378      	str	r0, [r7, #52]	; 0x34
 800ec88:	e3d3      	b.n	800f432 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 800ec8a:	4b19      	ldr	r3, [pc, #100]	; (800ecf0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800ec8c:	681b      	ldr	r3, [r3, #0]
 800ec8e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ec92:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ec96:	d106      	bne.n	800eca6 <HAL_RCCEx_GetPeriphCLKFreq+0xaae>
 800ec98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec9a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ec9e:	d102      	bne.n	800eca6 <HAL_RCCEx_GetPeriphCLKFreq+0xaae>
    {
      frequency = HSI_VALUE;
 800eca0:	4b15      	ldr	r3, [pc, #84]	; (800ecf8 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 800eca2:	637b      	str	r3, [r7, #52]	; 0x34
 800eca4:	e3c5      	b.n	800f432 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C2CLKSOURCE_MSIK))
 800eca6:	4b12      	ldr	r3, [pc, #72]	; (800ecf0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800eca8:	681b      	ldr	r3, [r3, #0]
 800ecaa:	f003 0320 	and.w	r3, r3, #32
 800ecae:	2b20      	cmp	r3, #32
 800ecb0:	d11b      	bne.n	800ecea <HAL_RCCEx_GetPeriphCLKFreq+0xaf2>
 800ecb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ecb4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800ecb8:	d117      	bne.n	800ecea <HAL_RCCEx_GetPeriphCLKFreq+0xaf2>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800ecba:	4b0d      	ldr	r3, [pc, #52]	; (800ecf0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800ecbc:	689b      	ldr	r3, [r3, #8]
 800ecbe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ecc2:	2b00      	cmp	r3, #0
 800ecc4:	d005      	beq.n	800ecd2 <HAL_RCCEx_GetPeriphCLKFreq+0xada>
 800ecc6:	4b0a      	ldr	r3, [pc, #40]	; (800ecf0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800ecc8:	689b      	ldr	r3, [r3, #8]
 800ecca:	0e1b      	lsrs	r3, r3, #24
 800eccc:	f003 030f 	and.w	r3, r3, #15
 800ecd0:	e006      	b.n	800ece0 <HAL_RCCEx_GetPeriphCLKFreq+0xae8>
 800ecd2:	4b07      	ldr	r3, [pc, #28]	; (800ecf0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800ecd4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800ecd8:	041b      	lsls	r3, r3, #16
 800ecda:	0e1b      	lsrs	r3, r3, #24
 800ecdc:	f003 030f 	and.w	r3, r3, #15
 800ece0:	4a04      	ldr	r2, [pc, #16]	; (800ecf4 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800ece2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ece6:	637b      	str	r3, [r7, #52]	; 0x34
 800ece8:	e3a3      	b.n	800f432 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for I2C2 */
    else
    {
      frequency = 0U;
 800ecea:	2300      	movs	r3, #0
 800ecec:	637b      	str	r3, [r7, #52]	; 0x34
 800ecee:	e3a0      	b.n	800f432 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
 800ecf0:	46020c00 	.word	0x46020c00
 800ecf4:	08014f00 	.word	0x08014f00
 800ecf8:	00f42400 	.word	0x00f42400
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C3)
 800ecfc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ed00:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 800ed04:	430b      	orrs	r3, r1
 800ed06:	d148      	bne.n	800ed9a <HAL_RCCEx_GetPeriphCLKFreq+0xba2>
  {
    /* Get the current I2C3 source */
    srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 800ed08:	4b9d      	ldr	r3, [pc, #628]	; (800ef80 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800ed0a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800ed0e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800ed12:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 800ed14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed16:	2bc0      	cmp	r3, #192	; 0xc0
 800ed18:	d024      	beq.n	800ed64 <HAL_RCCEx_GetPeriphCLKFreq+0xb6c>
 800ed1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed1c:	2bc0      	cmp	r3, #192	; 0xc0
 800ed1e:	d839      	bhi.n	800ed94 <HAL_RCCEx_GetPeriphCLKFreq+0xb9c>
 800ed20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed22:	2b80      	cmp	r3, #128	; 0x80
 800ed24:	d00d      	beq.n	800ed42 <HAL_RCCEx_GetPeriphCLKFreq+0xb4a>
 800ed26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed28:	2b80      	cmp	r3, #128	; 0x80
 800ed2a:	d833      	bhi.n	800ed94 <HAL_RCCEx_GetPeriphCLKFreq+0xb9c>
 800ed2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed2e:	2b00      	cmp	r3, #0
 800ed30:	d003      	beq.n	800ed3a <HAL_RCCEx_GetPeriphCLKFreq+0xb42>
 800ed32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed34:	2b40      	cmp	r3, #64	; 0x40
 800ed36:	d011      	beq.n	800ed5c <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
 800ed38:	e02c      	b.n	800ed94 <HAL_RCCEx_GetPeriphCLKFreq+0xb9c>
    {
      case RCC_I2C3CLKSOURCE_PCLK3:
      {
        frequency = HAL_RCC_GetPCLK3Freq();
 800ed3a:	f7fd ff99 	bl	800cc70 <HAL_RCC_GetPCLK3Freq>
 800ed3e:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800ed40:	e377      	b.n	800f432 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      case RCC_I2C3CLKSOURCE_HSI:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800ed42:	4b8f      	ldr	r3, [pc, #572]	; (800ef80 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800ed44:	681b      	ldr	r3, [r3, #0]
 800ed46:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ed4a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ed4e:	d102      	bne.n	800ed56 <HAL_RCCEx_GetPeriphCLKFreq+0xb5e>
        {
          frequency = HSI_VALUE;
 800ed50:	4b8c      	ldr	r3, [pc, #560]	; (800ef84 <HAL_RCCEx_GetPeriphCLKFreq+0xd8c>)
 800ed52:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800ed54:	e36d      	b.n	800f432 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
          frequency = 0U;
 800ed56:	2300      	movs	r3, #0
 800ed58:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800ed5a:	e36a      	b.n	800f432 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      case RCC_I2C3CLKSOURCE_SYSCLK:
      {
        frequency = HAL_RCC_GetSysClockFreq();
 800ed5c:	f7fd fe3e 	bl	800c9dc <HAL_RCC_GetSysClockFreq>
 800ed60:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800ed62:	e366      	b.n	800f432 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      case RCC_I2C3CLKSOURCE_MSIK:
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)];
 800ed64:	4b86      	ldr	r3, [pc, #536]	; (800ef80 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800ed66:	689b      	ldr	r3, [r3, #8]
 800ed68:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ed6c:	2b00      	cmp	r3, #0
 800ed6e:	d005      	beq.n	800ed7c <HAL_RCCEx_GetPeriphCLKFreq+0xb84>
 800ed70:	4b83      	ldr	r3, [pc, #524]	; (800ef80 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800ed72:	689b      	ldr	r3, [r3, #8]
 800ed74:	0f1b      	lsrs	r3, r3, #28
 800ed76:	f003 030f 	and.w	r3, r3, #15
 800ed7a:	e006      	b.n	800ed8a <HAL_RCCEx_GetPeriphCLKFreq+0xb92>
 800ed7c:	4b80      	ldr	r3, [pc, #512]	; (800ef80 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800ed7e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800ed82:	041b      	lsls	r3, r3, #16
 800ed84:	0f1b      	lsrs	r3, r3, #28
 800ed86:	f003 030f 	and.w	r3, r3, #15
 800ed8a:	4a7f      	ldr	r2, [pc, #508]	; (800ef88 <HAL_RCCEx_GetPeriphCLKFreq+0xd90>)
 800ed8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ed90:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800ed92:	e34e      	b.n	800f432 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      default:
      {
        frequency = 0U;
 800ed94:	2300      	movs	r3, #0
 800ed96:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800ed98:	e34b      	b.n	800f432 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C4)
 800ed9a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ed9e:	f5a2 0180 	sub.w	r1, r2, #4194304	; 0x400000
 800eda2:	430b      	orrs	r3, r1
 800eda4:	d147      	bne.n	800ee36 <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
  {
    /* Get the current I2C4 source */
    srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 800eda6:	4b76      	ldr	r3, [pc, #472]	; (800ef80 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800eda8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800edac:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800edb0:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C4CLKSOURCE_PCLK1)
 800edb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800edb4:	2b00      	cmp	r3, #0
 800edb6:	d103      	bne.n	800edc0 <HAL_RCCEx_GetPeriphCLKFreq+0xbc8>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800edb8:	f7fd ff32 	bl	800cc20 <HAL_RCC_GetPCLK1Freq>
 800edbc:	6378      	str	r0, [r7, #52]	; 0x34
 800edbe:	e338      	b.n	800f432 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_I2C4CLKSOURCE_SYSCLK)
 800edc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800edc2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800edc6:	d103      	bne.n	800edd0 <HAL_RCCEx_GetPeriphCLKFreq+0xbd8>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800edc8:	f7fd fe08 	bl	800c9dc <HAL_RCC_GetSysClockFreq>
 800edcc:	6378      	str	r0, [r7, #52]	; 0x34
 800edce:	e330      	b.n	800f432 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 800edd0:	4b6b      	ldr	r3, [pc, #428]	; (800ef80 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800edd2:	681b      	ldr	r3, [r3, #0]
 800edd4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800edd8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800eddc:	d106      	bne.n	800edec <HAL_RCCEx_GetPeriphCLKFreq+0xbf4>
 800edde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ede0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ede4:	d102      	bne.n	800edec <HAL_RCCEx_GetPeriphCLKFreq+0xbf4>
    {
      frequency = HSI_VALUE;
 800ede6:	4b67      	ldr	r3, [pc, #412]	; (800ef84 <HAL_RCCEx_GetPeriphCLKFreq+0xd8c>)
 800ede8:	637b      	str	r3, [r7, #52]	; 0x34
 800edea:	e322      	b.n	800f432 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C4CLKSOURCE_MSIK))
 800edec:	4b64      	ldr	r3, [pc, #400]	; (800ef80 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800edee:	681b      	ldr	r3, [r3, #0]
 800edf0:	f003 0320 	and.w	r3, r3, #32
 800edf4:	2b20      	cmp	r3, #32
 800edf6:	d11b      	bne.n	800ee30 <HAL_RCCEx_GetPeriphCLKFreq+0xc38>
 800edf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800edfa:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800edfe:	d117      	bne.n	800ee30 <HAL_RCCEx_GetPeriphCLKFreq+0xc38>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800ee00:	4b5f      	ldr	r3, [pc, #380]	; (800ef80 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800ee02:	689b      	ldr	r3, [r3, #8]
 800ee04:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ee08:	2b00      	cmp	r3, #0
 800ee0a:	d005      	beq.n	800ee18 <HAL_RCCEx_GetPeriphCLKFreq+0xc20>
 800ee0c:	4b5c      	ldr	r3, [pc, #368]	; (800ef80 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800ee0e:	689b      	ldr	r3, [r3, #8]
 800ee10:	0e1b      	lsrs	r3, r3, #24
 800ee12:	f003 030f 	and.w	r3, r3, #15
 800ee16:	e006      	b.n	800ee26 <HAL_RCCEx_GetPeriphCLKFreq+0xc2e>
 800ee18:	4b59      	ldr	r3, [pc, #356]	; (800ef80 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800ee1a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800ee1e:	041b      	lsls	r3, r3, #16
 800ee20:	0e1b      	lsrs	r3, r3, #24
 800ee22:	f003 030f 	and.w	r3, r3, #15
 800ee26:	4a58      	ldr	r2, [pc, #352]	; (800ef88 <HAL_RCCEx_GetPeriphCLKFreq+0xd90>)
 800ee28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ee2c:	637b      	str	r3, [r7, #52]	; 0x34
 800ee2e:	e300      	b.n	800f432 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for I2C4 */
    else
    {
      frequency = 0U;
 800ee30:	2300      	movs	r3, #0
 800ee32:	637b      	str	r3, [r7, #52]	; 0x34
 800ee34:	e2fd      	b.n	800f432 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    {
      frequency = 0U;
    }
  }
#endif /* I2C6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM34)
 800ee36:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ee3a:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 800ee3e:	430b      	orrs	r3, r1
 800ee40:	d15b      	bne.n	800eefa <HAL_RCCEx_GetPeriphCLKFreq+0xd02>
  {
    /* Get the current LPTIM34 source */
    srcclk = __HAL_RCC_GET_LPTIM34_SOURCE();
 800ee42:	4b4f      	ldr	r3, [pc, #316]	; (800ef80 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800ee44:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800ee48:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ee4c:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM34CLKSOURCE_MSIK)
 800ee4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee50:	2b00      	cmp	r3, #0
 800ee52:	d117      	bne.n	800ee84 <HAL_RCCEx_GetPeriphCLKFreq+0xc8c>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800ee54:	4b4a      	ldr	r3, [pc, #296]	; (800ef80 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800ee56:	689b      	ldr	r3, [r3, #8]
 800ee58:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ee5c:	2b00      	cmp	r3, #0
 800ee5e:	d005      	beq.n	800ee6c <HAL_RCCEx_GetPeriphCLKFreq+0xc74>
 800ee60:	4b47      	ldr	r3, [pc, #284]	; (800ef80 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800ee62:	689b      	ldr	r3, [r3, #8]
 800ee64:	0e1b      	lsrs	r3, r3, #24
 800ee66:	f003 030f 	and.w	r3, r3, #15
 800ee6a:	e006      	b.n	800ee7a <HAL_RCCEx_GetPeriphCLKFreq+0xc82>
 800ee6c:	4b44      	ldr	r3, [pc, #272]	; (800ef80 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800ee6e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800ee72:	041b      	lsls	r3, r3, #16
 800ee74:	0e1b      	lsrs	r3, r3, #24
 800ee76:	f003 030f 	and.w	r3, r3, #15
 800ee7a:	4a43      	ldr	r2, [pc, #268]	; (800ef88 <HAL_RCCEx_GetPeriphCLKFreq+0xd90>)
 800ee7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ee80:	637b      	str	r3, [r7, #52]	; 0x34
 800ee82:	e2d6      	b.n	800f432 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSI))
 800ee84:	4b3e      	ldr	r3, [pc, #248]	; (800ef80 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800ee86:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800ee8a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ee8e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ee92:	d112      	bne.n	800eeba <HAL_RCCEx_GetPeriphCLKFreq+0xcc2>
 800ee94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee96:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ee9a:	d10e      	bne.n	800eeba <HAL_RCCEx_GetPeriphCLKFreq+0xcc2>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800ee9c:	4b38      	ldr	r3, [pc, #224]	; (800ef80 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800ee9e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800eea2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800eea6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800eeaa:	d102      	bne.n	800eeb2 <HAL_RCCEx_GetPeriphCLKFreq+0xcba>
      {
        frequency = LSI_VALUE / 128U;
 800eeac:	23fa      	movs	r3, #250	; 0xfa
 800eeae:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800eeb0:	e2bf      	b.n	800f432 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      else
      {
        frequency = LSI_VALUE;
 800eeb2:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800eeb6:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800eeb8:	e2bb      	b.n	800f432 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_HSI))
 800eeba:	4b31      	ldr	r3, [pc, #196]	; (800ef80 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800eebc:	681b      	ldr	r3, [r3, #0]
 800eebe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800eec2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800eec6:	d106      	bne.n	800eed6 <HAL_RCCEx_GetPeriphCLKFreq+0xcde>
 800eec8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eeca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800eece:	d102      	bne.n	800eed6 <HAL_RCCEx_GetPeriphCLKFreq+0xcde>
    {
      frequency = HSI_VALUE;
 800eed0:	4b2c      	ldr	r3, [pc, #176]	; (800ef84 <HAL_RCCEx_GetPeriphCLKFreq+0xd8c>)
 800eed2:	637b      	str	r3, [r7, #52]	; 0x34
 800eed4:	e2ad      	b.n	800f432 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSE))
 800eed6:	4b2a      	ldr	r3, [pc, #168]	; (800ef80 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800eed8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800eedc:	f003 0302 	and.w	r3, r3, #2
 800eee0:	2b02      	cmp	r3, #2
 800eee2:	d107      	bne.n	800eef4 <HAL_RCCEx_GetPeriphCLKFreq+0xcfc>
 800eee4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eee6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800eeea:	d103      	bne.n	800eef4 <HAL_RCCEx_GetPeriphCLKFreq+0xcfc>
    {
      frequency = LSE_VALUE;
 800eeec:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800eef0:	637b      	str	r3, [r7, #52]	; 0x34
 800eef2:	e29e      	b.n	800f432 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for LPTIM34 */
    else
    {
      frequency = 0U;
 800eef4:	2300      	movs	r3, #0
 800eef6:	637b      	str	r3, [r7, #52]	; 0x34
 800eef8:	e29b      	b.n	800f432 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM1)
 800eefa:	e9d7 2300 	ldrd	r2, r3, [r7]
 800eefe:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 800ef02:	430b      	orrs	r3, r1
 800ef04:	d162      	bne.n	800efcc <HAL_RCCEx_GetPeriphCLKFreq+0xdd4>
  {
    /* Get the current LPTIM1 source */
    srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 800ef06:	4b1e      	ldr	r3, [pc, #120]	; (800ef80 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800ef08:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800ef0c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800ef10:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM1CLKSOURCE_MSIK)
 800ef12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef14:	2b00      	cmp	r3, #0
 800ef16:	d117      	bne.n	800ef48 <HAL_RCCEx_GetPeriphCLKFreq+0xd50>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800ef18:	4b19      	ldr	r3, [pc, #100]	; (800ef80 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800ef1a:	689b      	ldr	r3, [r3, #8]
 800ef1c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ef20:	2b00      	cmp	r3, #0
 800ef22:	d005      	beq.n	800ef30 <HAL_RCCEx_GetPeriphCLKFreq+0xd38>
 800ef24:	4b16      	ldr	r3, [pc, #88]	; (800ef80 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800ef26:	689b      	ldr	r3, [r3, #8]
 800ef28:	0e1b      	lsrs	r3, r3, #24
 800ef2a:	f003 030f 	and.w	r3, r3, #15
 800ef2e:	e006      	b.n	800ef3e <HAL_RCCEx_GetPeriphCLKFreq+0xd46>
 800ef30:	4b13      	ldr	r3, [pc, #76]	; (800ef80 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800ef32:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800ef36:	041b      	lsls	r3, r3, #16
 800ef38:	0e1b      	lsrs	r3, r3, #24
 800ef3a:	f003 030f 	and.w	r3, r3, #15
 800ef3e:	4a12      	ldr	r2, [pc, #72]	; (800ef88 <HAL_RCCEx_GetPeriphCLKFreq+0xd90>)
 800ef40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ef44:	637b      	str	r3, [r7, #52]	; 0x34
 800ef46:	e274      	b.n	800f432 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 800ef48:	4b0d      	ldr	r3, [pc, #52]	; (800ef80 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800ef4a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800ef4e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ef52:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ef56:	d119      	bne.n	800ef8c <HAL_RCCEx_GetPeriphCLKFreq+0xd94>
 800ef58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef5a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ef5e:	d115      	bne.n	800ef8c <HAL_RCCEx_GetPeriphCLKFreq+0xd94>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800ef60:	4b07      	ldr	r3, [pc, #28]	; (800ef80 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800ef62:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800ef66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ef6a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ef6e:	d102      	bne.n	800ef76 <HAL_RCCEx_GetPeriphCLKFreq+0xd7e>
      {
        frequency = LSI_VALUE / 128U;
 800ef70:	23fa      	movs	r3, #250	; 0xfa
 800ef72:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800ef74:	e25d      	b.n	800f432 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      else
      {
        frequency = LSI_VALUE;
 800ef76:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800ef7a:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800ef7c:	e259      	b.n	800f432 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
 800ef7e:	bf00      	nop
 800ef80:	46020c00 	.word	0x46020c00
 800ef84:	00f42400 	.word	0x00f42400
 800ef88:	08014f00 	.word	0x08014f00
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 800ef8c:	4b9d      	ldr	r3, [pc, #628]	; (800f204 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 800ef8e:	681b      	ldr	r3, [r3, #0]
 800ef90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ef94:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ef98:	d106      	bne.n	800efa8 <HAL_RCCEx_GetPeriphCLKFreq+0xdb0>
 800ef9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef9c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800efa0:	d102      	bne.n	800efa8 <HAL_RCCEx_GetPeriphCLKFreq+0xdb0>
    {
      frequency = HSI_VALUE;
 800efa2:	4b99      	ldr	r3, [pc, #612]	; (800f208 <HAL_RCCEx_GetPeriphCLKFreq+0x1010>)
 800efa4:	637b      	str	r3, [r7, #52]	; 0x34
 800efa6:	e244      	b.n	800f432 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 800efa8:	4b96      	ldr	r3, [pc, #600]	; (800f204 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 800efaa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800efae:	f003 0302 	and.w	r3, r3, #2
 800efb2:	2b02      	cmp	r3, #2
 800efb4:	d107      	bne.n	800efc6 <HAL_RCCEx_GetPeriphCLKFreq+0xdce>
 800efb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800efb8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800efbc:	d103      	bne.n	800efc6 <HAL_RCCEx_GetPeriphCLKFreq+0xdce>
    {
      frequency = LSE_VALUE;
 800efbe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800efc2:	637b      	str	r3, [r7, #52]	; 0x34
 800efc4:	e235      	b.n	800f432 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for LPTIM1 */
    else
    {
      frequency = 0U;
 800efc6:	2300      	movs	r3, #0
 800efc8:	637b      	str	r3, [r7, #52]	; 0x34
 800efca:	e232      	b.n	800f432 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM2)
 800efcc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800efd0:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 800efd4:	430b      	orrs	r3, r1
 800efd6:	d147      	bne.n	800f068 <HAL_RCCEx_GetPeriphCLKFreq+0xe70>
  {
    /* Get the current LPTIM2 source */
    srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 800efd8:	4b8a      	ldr	r3, [pc, #552]	; (800f204 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 800efda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800efde:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 800efe2:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 800efe4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800efe6:	2b00      	cmp	r3, #0
 800efe8:	d103      	bne.n	800eff2 <HAL_RCCEx_GetPeriphCLKFreq+0xdfa>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800efea:	f7fd fe19 	bl	800cc20 <HAL_RCC_GetPCLK1Freq>
 800efee:	6378      	str	r0, [r7, #52]	; 0x34
 800eff0:	e21f      	b.n	800f432 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 800eff2:	4b84      	ldr	r3, [pc, #528]	; (800f204 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 800eff4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800eff8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800effc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800f000:	d112      	bne.n	800f028 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
 800f002:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f004:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800f008:	d10e      	bne.n	800f028 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800f00a:	4b7e      	ldr	r3, [pc, #504]	; (800f204 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 800f00c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800f010:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800f014:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800f018:	d102      	bne.n	800f020 <HAL_RCCEx_GetPeriphCLKFreq+0xe28>
      {
        frequency = LSI_VALUE / 128U;
 800f01a:	23fa      	movs	r3, #250	; 0xfa
 800f01c:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800f01e:	e208      	b.n	800f432 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      else
      {
        frequency = LSI_VALUE;
 800f020:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800f024:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800f026:	e204      	b.n	800f432 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 800f028:	4b76      	ldr	r3, [pc, #472]	; (800f204 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 800f02a:	681b      	ldr	r3, [r3, #0]
 800f02c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800f030:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f034:	d106      	bne.n	800f044 <HAL_RCCEx_GetPeriphCLKFreq+0xe4c>
 800f036:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f038:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800f03c:	d102      	bne.n	800f044 <HAL_RCCEx_GetPeriphCLKFreq+0xe4c>
    {
      frequency = HSI_VALUE;
 800f03e:	4b72      	ldr	r3, [pc, #456]	; (800f208 <HAL_RCCEx_GetPeriphCLKFreq+0x1010>)
 800f040:	637b      	str	r3, [r7, #52]	; 0x34
 800f042:	e1f6      	b.n	800f432 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 800f044:	4b6f      	ldr	r3, [pc, #444]	; (800f204 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 800f046:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800f04a:	f003 0302 	and.w	r3, r3, #2
 800f04e:	2b02      	cmp	r3, #2
 800f050:	d107      	bne.n	800f062 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 800f052:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f054:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800f058:	d103      	bne.n	800f062 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
    {
      frequency = LSE_VALUE;
 800f05a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f05e:	637b      	str	r3, [r7, #52]	; 0x34
 800f060:	e1e7      	b.n	800f432 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for LPTIM2 */
    else
    {
      frequency = 0U;
 800f062:	2300      	movs	r3, #0
 800f064:	637b      	str	r3, [r7, #52]	; 0x34
 800f066:	e1e4      	b.n	800f432 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN1)
 800f068:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f06c:	f102 4178 	add.w	r1, r2, #4160749568	; 0xf8000000
 800f070:	430b      	orrs	r3, r1
 800f072:	d12d      	bne.n	800f0d0 <HAL_RCCEx_GetPeriphCLKFreq+0xed8>
  {
    /* Get the current FDCAN1 kernel source */
    srcclk = __HAL_RCC_GET_FDCAN1_SOURCE();
 800f074:	4b63      	ldr	r3, [pc, #396]	; (800f204 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 800f076:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800f07a:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 800f07e:	633b      	str	r3, [r7, #48]	; 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCAN1CLKSOURCE_HSE))
 800f080:	4b60      	ldr	r3, [pc, #384]	; (800f204 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 800f082:	681b      	ldr	r3, [r3, #0]
 800f084:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f088:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800f08c:	d105      	bne.n	800f09a <HAL_RCCEx_GetPeriphCLKFreq+0xea2>
 800f08e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f090:	2b00      	cmp	r3, #0
 800f092:	d102      	bne.n	800f09a <HAL_RCCEx_GetPeriphCLKFreq+0xea2>
    {
      frequency = HSE_VALUE;
 800f094:	4b5c      	ldr	r3, [pc, #368]	; (800f208 <HAL_RCCEx_GetPeriphCLKFreq+0x1010>)
 800f096:	637b      	str	r3, [r7, #52]	; 0x34
 800f098:	e1cb      	b.n	800f432 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL1) /* PLL1 ? */
 800f09a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f09c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800f0a0:	d107      	bne.n	800f0b2 <HAL_RCCEx_GetPeriphCLKFreq+0xeba>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800f0a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f0a6:	4618      	mov	r0, r3
 800f0a8:	f7fe fc74 	bl	800d994 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_Q_Frequency;
 800f0ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f0ae:	637b      	str	r3, [r7, #52]	; 0x34
 800f0b0:	e1bf      	b.n	800f432 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL2) /* PLL2 ? */
 800f0b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f0b4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800f0b8:	d107      	bne.n	800f0ca <HAL_RCCEx_GetPeriphCLKFreq+0xed2>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f0ba:	f107 0318 	add.w	r3, r7, #24
 800f0be:	4618      	mov	r0, r3
 800f0c0:	f7fe fdce 	bl	800dc60 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_P_Frequency;
 800f0c4:	69bb      	ldr	r3, [r7, #24]
 800f0c6:	637b      	str	r3, [r7, #52]	; 0x34
 800f0c8:	e1b3      	b.n	800f432 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for FDCAN1 */
    else
    {
      frequency = 0U;
 800f0ca:	2300      	movs	r3, #0
 800f0cc:	637b      	str	r3, [r7, #52]	; 0x34
 800f0ce:	e1b0      	b.n	800f432 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI1)
 800f0d0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f0d4:	f5a2 0100 	sub.w	r1, r2, #8388608	; 0x800000
 800f0d8:	430b      	orrs	r3, r1
 800f0da:	d14d      	bne.n	800f178 <HAL_RCCEx_GetPeriphCLKFreq+0xf80>
  {
    /* Get the current SPI1 kernel source */
    srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 800f0dc:	4b49      	ldr	r3, [pc, #292]	; (800f204 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 800f0de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800f0e2:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800f0e6:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 800f0e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f0ea:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800f0ee:	d028      	beq.n	800f142 <HAL_RCCEx_GetPeriphCLKFreq+0xf4a>
 800f0f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f0f2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800f0f6:	d83c      	bhi.n	800f172 <HAL_RCCEx_GetPeriphCLKFreq+0xf7a>
 800f0f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f0fa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800f0fe:	d013      	beq.n	800f128 <HAL_RCCEx_GetPeriphCLKFreq+0xf30>
 800f100:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f102:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800f106:	d834      	bhi.n	800f172 <HAL_RCCEx_GetPeriphCLKFreq+0xf7a>
 800f108:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f10a:	2b00      	cmp	r3, #0
 800f10c:	d004      	beq.n	800f118 <HAL_RCCEx_GetPeriphCLKFreq+0xf20>
 800f10e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f110:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f114:	d004      	beq.n	800f120 <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
 800f116:	e02c      	b.n	800f172 <HAL_RCCEx_GetPeriphCLKFreq+0xf7a>
    {
      case RCC_SPI1CLKSOURCE_PCLK2:

        frequency = HAL_RCC_GetPCLK2Freq();
 800f118:	f7fd fd96 	bl	800cc48 <HAL_RCC_GetPCLK2Freq>
 800f11c:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800f11e:	e188      	b.n	800f432 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI1CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800f120:	f7fd fc5c 	bl	800c9dc <HAL_RCC_GetSysClockFreq>
 800f124:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800f126:	e184      	b.n	800f432 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI1CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800f128:	4b36      	ldr	r3, [pc, #216]	; (800f204 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 800f12a:	681b      	ldr	r3, [r3, #0]
 800f12c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800f130:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f134:	d102      	bne.n	800f13c <HAL_RCCEx_GetPeriphCLKFreq+0xf44>
        {
          frequency = HSI_VALUE;
 800f136:	4b34      	ldr	r3, [pc, #208]	; (800f208 <HAL_RCCEx_GetPeriphCLKFreq+0x1010>)
 800f138:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800f13a:	e17a      	b.n	800f432 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
          frequency = 0U;
 800f13c:	2300      	movs	r3, #0
 800f13e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800f140:	e177      	b.n	800f432 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI1CLKSOURCE_MSIK:

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800f142:	4b30      	ldr	r3, [pc, #192]	; (800f204 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 800f144:	689b      	ldr	r3, [r3, #8]
 800f146:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800f14a:	2b00      	cmp	r3, #0
 800f14c:	d005      	beq.n	800f15a <HAL_RCCEx_GetPeriphCLKFreq+0xf62>
 800f14e:	4b2d      	ldr	r3, [pc, #180]	; (800f204 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 800f150:	689b      	ldr	r3, [r3, #8]
 800f152:	0e1b      	lsrs	r3, r3, #24
 800f154:	f003 030f 	and.w	r3, r3, #15
 800f158:	e006      	b.n	800f168 <HAL_RCCEx_GetPeriphCLKFreq+0xf70>
 800f15a:	4b2a      	ldr	r3, [pc, #168]	; (800f204 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 800f15c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800f160:	041b      	lsls	r3, r3, #16
 800f162:	0e1b      	lsrs	r3, r3, #24
 800f164:	f003 030f 	and.w	r3, r3, #15
 800f168:	4a28      	ldr	r2, [pc, #160]	; (800f20c <HAL_RCCEx_GetPeriphCLKFreq+0x1014>)
 800f16a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f16e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800f170:	e15f      	b.n	800f432 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default:

        frequency = 0U;
 800f172:	2300      	movs	r3, #0
 800f174:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800f176:	e15c      	b.n	800f432 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI2)
 800f178:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f17c:	f102 417f 	add.w	r1, r2, #4278190080	; 0xff000000
 800f180:	430b      	orrs	r3, r1
 800f182:	d154      	bne.n	800f22e <HAL_RCCEx_GetPeriphCLKFreq+0x1036>
  {
    /* Get the current SPI2 kernel source */
    srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 800f184:	4b1f      	ldr	r3, [pc, #124]	; (800f204 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 800f186:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800f18a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800f18e:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 800f190:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f192:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800f196:	d028      	beq.n	800f1ea <HAL_RCCEx_GetPeriphCLKFreq+0xff2>
 800f198:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f19a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800f19e:	d843      	bhi.n	800f228 <HAL_RCCEx_GetPeriphCLKFreq+0x1030>
 800f1a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f1a2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800f1a6:	d013      	beq.n	800f1d0 <HAL_RCCEx_GetPeriphCLKFreq+0xfd8>
 800f1a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f1aa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800f1ae:	d83b      	bhi.n	800f228 <HAL_RCCEx_GetPeriphCLKFreq+0x1030>
 800f1b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f1b2:	2b00      	cmp	r3, #0
 800f1b4:	d004      	beq.n	800f1c0 <HAL_RCCEx_GetPeriphCLKFreq+0xfc8>
 800f1b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f1b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f1bc:	d004      	beq.n	800f1c8 <HAL_RCCEx_GetPeriphCLKFreq+0xfd0>
 800f1be:	e033      	b.n	800f228 <HAL_RCCEx_GetPeriphCLKFreq+0x1030>
    {
      case RCC_SPI2CLKSOURCE_PCLK1:

        frequency = HAL_RCC_GetPCLK1Freq();
 800f1c0:	f7fd fd2e 	bl	800cc20 <HAL_RCC_GetPCLK1Freq>
 800f1c4:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800f1c6:	e134      	b.n	800f432 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI2CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800f1c8:	f7fd fc08 	bl	800c9dc <HAL_RCC_GetSysClockFreq>
 800f1cc:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800f1ce:	e130      	b.n	800f432 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI2CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800f1d0:	4b0c      	ldr	r3, [pc, #48]	; (800f204 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 800f1d2:	681b      	ldr	r3, [r3, #0]
 800f1d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800f1d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f1dc:	d102      	bne.n	800f1e4 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>
        {
          frequency = HSI_VALUE;
 800f1de:	4b0a      	ldr	r3, [pc, #40]	; (800f208 <HAL_RCCEx_GetPeriphCLKFreq+0x1010>)
 800f1e0:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800f1e2:	e126      	b.n	800f432 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
          frequency = 0U;
 800f1e4:	2300      	movs	r3, #0
 800f1e6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800f1e8:	e123      	b.n	800f432 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI2CLKSOURCE_MSIK:

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800f1ea:	4b06      	ldr	r3, [pc, #24]	; (800f204 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 800f1ec:	689b      	ldr	r3, [r3, #8]
 800f1ee:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800f1f2:	2b00      	cmp	r3, #0
 800f1f4:	d00c      	beq.n	800f210 <HAL_RCCEx_GetPeriphCLKFreq+0x1018>
 800f1f6:	4b03      	ldr	r3, [pc, #12]	; (800f204 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 800f1f8:	689b      	ldr	r3, [r3, #8]
 800f1fa:	0e1b      	lsrs	r3, r3, #24
 800f1fc:	f003 030f 	and.w	r3, r3, #15
 800f200:	e00d      	b.n	800f21e <HAL_RCCEx_GetPeriphCLKFreq+0x1026>
 800f202:	bf00      	nop
 800f204:	46020c00 	.word	0x46020c00
 800f208:	00f42400 	.word	0x00f42400
 800f20c:	08014f00 	.word	0x08014f00
 800f210:	4b8a      	ldr	r3, [pc, #552]	; (800f43c <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 800f212:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800f216:	041b      	lsls	r3, r3, #16
 800f218:	0e1b      	lsrs	r3, r3, #24
 800f21a:	f003 030f 	and.w	r3, r3, #15
 800f21e:	4a88      	ldr	r2, [pc, #544]	; (800f440 <HAL_RCCEx_GetPeriphCLKFreq+0x1248>)
 800f220:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f224:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800f226:	e104      	b.n	800f432 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default:

        frequency = 0U;
 800f228:	2300      	movs	r3, #0
 800f22a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800f22c:	e101      	b.n	800f432 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI3)
 800f22e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f232:	f102 417e 	add.w	r1, r2, #4261412864	; 0xfe000000
 800f236:	430b      	orrs	r3, r1
 800f238:	d16e      	bne.n	800f318 <HAL_RCCEx_GetPeriphCLKFreq+0x1120>
  {
    /* Get the current SPI3 kernel source */
    srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 800f23a:	4b80      	ldr	r3, [pc, #512]	; (800f43c <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 800f23c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800f240:	f003 0318 	and.w	r3, r3, #24
 800f244:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 800f246:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f248:	2b18      	cmp	r3, #24
 800f24a:	d862      	bhi.n	800f312 <HAL_RCCEx_GetPeriphCLKFreq+0x111a>
 800f24c:	a201      	add	r2, pc, #4	; (adr r2, 800f254 <HAL_RCCEx_GetPeriphCLKFreq+0x105c>)
 800f24e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f252:	bf00      	nop
 800f254:	0800f2b9 	.word	0x0800f2b9
 800f258:	0800f313 	.word	0x0800f313
 800f25c:	0800f313 	.word	0x0800f313
 800f260:	0800f313 	.word	0x0800f313
 800f264:	0800f313 	.word	0x0800f313
 800f268:	0800f313 	.word	0x0800f313
 800f26c:	0800f313 	.word	0x0800f313
 800f270:	0800f313 	.word	0x0800f313
 800f274:	0800f2c1 	.word	0x0800f2c1
 800f278:	0800f313 	.word	0x0800f313
 800f27c:	0800f313 	.word	0x0800f313
 800f280:	0800f313 	.word	0x0800f313
 800f284:	0800f313 	.word	0x0800f313
 800f288:	0800f313 	.word	0x0800f313
 800f28c:	0800f313 	.word	0x0800f313
 800f290:	0800f313 	.word	0x0800f313
 800f294:	0800f2c9 	.word	0x0800f2c9
 800f298:	0800f313 	.word	0x0800f313
 800f29c:	0800f313 	.word	0x0800f313
 800f2a0:	0800f313 	.word	0x0800f313
 800f2a4:	0800f313 	.word	0x0800f313
 800f2a8:	0800f313 	.word	0x0800f313
 800f2ac:	0800f313 	.word	0x0800f313
 800f2b0:	0800f313 	.word	0x0800f313
 800f2b4:	0800f2e3 	.word	0x0800f2e3
    {
      case RCC_SPI3CLKSOURCE_PCLK3:

        frequency = HAL_RCC_GetPCLK3Freq();
 800f2b8:	f7fd fcda 	bl	800cc70 <HAL_RCC_GetPCLK3Freq>
 800f2bc:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800f2be:	e0b8      	b.n	800f432 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI3CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800f2c0:	f7fd fb8c 	bl	800c9dc <HAL_RCC_GetSysClockFreq>
 800f2c4:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800f2c6:	e0b4      	b.n	800f432 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI3CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800f2c8:	4b5c      	ldr	r3, [pc, #368]	; (800f43c <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 800f2ca:	681b      	ldr	r3, [r3, #0]
 800f2cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800f2d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f2d4:	d102      	bne.n	800f2dc <HAL_RCCEx_GetPeriphCLKFreq+0x10e4>
        {
          frequency = HSI_VALUE;
 800f2d6:	4b5b      	ldr	r3, [pc, #364]	; (800f444 <HAL_RCCEx_GetPeriphCLKFreq+0x124c>)
 800f2d8:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800f2da:	e0aa      	b.n	800f432 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
          frequency = 0U;
 800f2dc:	2300      	movs	r3, #0
 800f2de:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800f2e0:	e0a7      	b.n	800f432 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI3CLKSOURCE_MSIK:

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800f2e2:	4b56      	ldr	r3, [pc, #344]	; (800f43c <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 800f2e4:	689b      	ldr	r3, [r3, #8]
 800f2e6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800f2ea:	2b00      	cmp	r3, #0
 800f2ec:	d005      	beq.n	800f2fa <HAL_RCCEx_GetPeriphCLKFreq+0x1102>
 800f2ee:	4b53      	ldr	r3, [pc, #332]	; (800f43c <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 800f2f0:	689b      	ldr	r3, [r3, #8]
 800f2f2:	0e1b      	lsrs	r3, r3, #24
 800f2f4:	f003 030f 	and.w	r3, r3, #15
 800f2f8:	e006      	b.n	800f308 <HAL_RCCEx_GetPeriphCLKFreq+0x1110>
 800f2fa:	4b50      	ldr	r3, [pc, #320]	; (800f43c <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 800f2fc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800f300:	041b      	lsls	r3, r3, #16
 800f302:	0e1b      	lsrs	r3, r3, #24
 800f304:	f003 030f 	and.w	r3, r3, #15
 800f308:	4a4d      	ldr	r2, [pc, #308]	; (800f440 <HAL_RCCEx_GetPeriphCLKFreq+0x1248>)
 800f30a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f30e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800f310:	e08f      	b.n	800f432 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default:

        frequency = 0U;
 800f312:	2300      	movs	r3, #0
 800f314:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800f316:	e08c      	b.n	800f432 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_OSPI)
 800f318:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f31c:	f102 417c 	add.w	r1, r2, #4227858432	; 0xfc000000
 800f320:	430b      	orrs	r3, r1
 800f322:	d14c      	bne.n	800f3be <HAL_RCCEx_GetPeriphCLKFreq+0x11c6>
  {
    /* Get the current OSPI kernel source */
    srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 800f324:	4b45      	ldr	r3, [pc, #276]	; (800f43c <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 800f326:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800f32a:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800f32e:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 800f330:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f332:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800f336:	d013      	beq.n	800f360 <HAL_RCCEx_GetPeriphCLKFreq+0x1168>
 800f338:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f33a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800f33e:	d83b      	bhi.n	800f3b8 <HAL_RCCEx_GetPeriphCLKFreq+0x11c0>
 800f340:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f342:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800f346:	d013      	beq.n	800f370 <HAL_RCCEx_GetPeriphCLKFreq+0x1178>
 800f348:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f34a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800f34e:	d833      	bhi.n	800f3b8 <HAL_RCCEx_GetPeriphCLKFreq+0x11c0>
 800f350:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f352:	2b00      	cmp	r3, #0
 800f354:	d014      	beq.n	800f380 <HAL_RCCEx_GetPeriphCLKFreq+0x1188>
 800f356:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f358:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f35c:	d014      	beq.n	800f388 <HAL_RCCEx_GetPeriphCLKFreq+0x1190>
 800f35e:	e02b      	b.n	800f3b8 <HAL_RCCEx_GetPeriphCLKFreq+0x11c0>
    {
      case RCC_OSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f360:	f107 0318 	add.w	r3, r7, #24
 800f364:	4618      	mov	r0, r3
 800f366:	f7fe fc7b 	bl	800dc60 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 800f36a:	69fb      	ldr	r3, [r7, #28]
 800f36c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800f36e:	e060      	b.n	800f432 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_OSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800f370:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f374:	4618      	mov	r0, r3
 800f376:	f7fe fb0d 	bl	800d994 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 800f37a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f37c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800f37e:	e058      	b.n	800f432 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_OSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800f380:	f7fd fb2c 	bl	800c9dc <HAL_RCC_GetSysClockFreq>
 800f384:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800f386:	e054      	b.n	800f432 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_OSPICLKSOURCE_MSIK:

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800f388:	4b2c      	ldr	r3, [pc, #176]	; (800f43c <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 800f38a:	689b      	ldr	r3, [r3, #8]
 800f38c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800f390:	2b00      	cmp	r3, #0
 800f392:	d005      	beq.n	800f3a0 <HAL_RCCEx_GetPeriphCLKFreq+0x11a8>
 800f394:	4b29      	ldr	r3, [pc, #164]	; (800f43c <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 800f396:	689b      	ldr	r3, [r3, #8]
 800f398:	0e1b      	lsrs	r3, r3, #24
 800f39a:	f003 030f 	and.w	r3, r3, #15
 800f39e:	e006      	b.n	800f3ae <HAL_RCCEx_GetPeriphCLKFreq+0x11b6>
 800f3a0:	4b26      	ldr	r3, [pc, #152]	; (800f43c <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 800f3a2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800f3a6:	041b      	lsls	r3, r3, #16
 800f3a8:	0e1b      	lsrs	r3, r3, #24
 800f3aa:	f003 030f 	and.w	r3, r3, #15
 800f3ae:	4a24      	ldr	r2, [pc, #144]	; (800f440 <HAL_RCCEx_GetPeriphCLKFreq+0x1248>)
 800f3b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f3b4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800f3b6:	e03c      	b.n	800f432 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default:

        frequency = 0U;
 800f3b8:	2300      	movs	r3, #0
 800f3ba:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800f3bc:	e039      	b.n	800f432 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
        frequency = 0U;
        break;
    }
  }
#endif /* defined(HSPI1) */
  else if (PeriphClk == RCC_PERIPHCLK_DAC1)
 800f3be:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f3c2:	f102 4170 	add.w	r1, r2, #4026531840	; 0xf0000000
 800f3c6:	430b      	orrs	r3, r1
 800f3c8:	d131      	bne.n	800f42e <HAL_RCCEx_GetPeriphCLKFreq+0x1236>
  {
    /* Get the current DAC1 kernel source */
    srcclk = __HAL_RCC_GET_DAC1_SOURCE();
 800f3ca:	4b1c      	ldr	r3, [pc, #112]	; (800f43c <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 800f3cc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800f3d0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800f3d4:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if LSE is ready and if DAC1 clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSE))
 800f3d6:	4b19      	ldr	r3, [pc, #100]	; (800f43c <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 800f3d8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800f3dc:	f003 0302 	and.w	r3, r3, #2
 800f3e0:	2b02      	cmp	r3, #2
 800f3e2:	d106      	bne.n	800f3f2 <HAL_RCCEx_GetPeriphCLKFreq+0x11fa>
 800f3e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f3e6:	2b00      	cmp	r3, #0
 800f3e8:	d103      	bne.n	800f3f2 <HAL_RCCEx_GetPeriphCLKFreq+0x11fa>
    {
      frequency = LSE_VALUE;
 800f3ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f3ee:	637b      	str	r3, [r7, #52]	; 0x34
 800f3f0:	e01f      	b.n	800f432 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Check if LSI is ready and if DAC1 clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSI))
 800f3f2:	4b12      	ldr	r3, [pc, #72]	; (800f43c <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 800f3f4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800f3f8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800f3fc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800f400:	d112      	bne.n	800f428 <HAL_RCCEx_GetPeriphCLKFreq+0x1230>
 800f402:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f404:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f408:	d10e      	bne.n	800f428 <HAL_RCCEx_GetPeriphCLKFreq+0x1230>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800f40a:	4b0c      	ldr	r3, [pc, #48]	; (800f43c <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 800f40c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800f410:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800f414:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800f418:	d102      	bne.n	800f420 <HAL_RCCEx_GetPeriphCLKFreq+0x1228>
      {
        frequency = LSI_VALUE / 128U;
 800f41a:	23fa      	movs	r3, #250	; 0xfa
 800f41c:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800f41e:	e008      	b.n	800f432 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      else
      {
        frequency = LSI_VALUE;
 800f420:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800f424:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800f426:	e004      	b.n	800f432 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
    }
    /* Clock not enabled for DAC1*/
    else
    {
      frequency = 0U;
 800f428:	2300      	movs	r3, #0
 800f42a:	637b      	str	r3, [r7, #52]	; 0x34
 800f42c:	e001      	b.n	800f432 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }

  }
  else
  {
    frequency = 0;
 800f42e:	2300      	movs	r3, #0
 800f430:	637b      	str	r3, [r7, #52]	; 0x34
  }
  return (frequency);
 800f432:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800f434:	4618      	mov	r0, r3
 800f436:	3738      	adds	r7, #56	; 0x38
 800f438:	46bd      	mov	sp, r7
 800f43a:	bd80      	pop	{r7, pc}
 800f43c:	46020c00 	.word	0x46020c00
 800f440:	08014f00 	.word	0x08014f00
 800f444:	00f42400 	.word	0x00f42400

0800f448 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2)
{
 800f448:	b580      	push	{r7, lr}
 800f44a:	b084      	sub	sp, #16
 800f44c:	af00      	add	r7, sp, #0
 800f44e:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 800f450:	4b47      	ldr	r3, [pc, #284]	; (800f570 <RCCEx_PLL2_Config+0x128>)
 800f452:	681b      	ldr	r3, [r3, #0]
 800f454:	4a46      	ldr	r2, [pc, #280]	; (800f570 <RCCEx_PLL2_Config+0x128>)
 800f456:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800f45a:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800f45c:	f7f7 fc98 	bl	8006d90 <HAL_GetTick>
 800f460:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800f462:	e008      	b.n	800f476 <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800f464:	f7f7 fc94 	bl	8006d90 <HAL_GetTick>
 800f468:	4602      	mov	r2, r0
 800f46a:	68fb      	ldr	r3, [r7, #12]
 800f46c:	1ad3      	subs	r3, r2, r3
 800f46e:	2b02      	cmp	r3, #2
 800f470:	d901      	bls.n	800f476 <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800f472:	2303      	movs	r3, #3
 800f474:	e077      	b.n	800f566 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800f476:	4b3e      	ldr	r3, [pc, #248]	; (800f570 <RCCEx_PLL2_Config+0x128>)
 800f478:	681b      	ldr	r3, [r3, #0]
 800f47a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800f47e:	2b00      	cmp	r3, #0
 800f480:	d1f0      	bne.n	800f464 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 800f482:	4b3b      	ldr	r3, [pc, #236]	; (800f570 <RCCEx_PLL2_Config+0x128>)
 800f484:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f486:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800f48a:	f023 0303 	bic.w	r3, r3, #3
 800f48e:	687a      	ldr	r2, [r7, #4]
 800f490:	6811      	ldr	r1, [r2, #0]
 800f492:	687a      	ldr	r2, [r7, #4]
 800f494:	6852      	ldr	r2, [r2, #4]
 800f496:	3a01      	subs	r2, #1
 800f498:	0212      	lsls	r2, r2, #8
 800f49a:	430a      	orrs	r2, r1
 800f49c:	4934      	ldr	r1, [pc, #208]	; (800f570 <RCCEx_PLL2_Config+0x128>)
 800f49e:	4313      	orrs	r3, r2
 800f4a0:	62cb      	str	r3, [r1, #44]	; 0x2c
 800f4a2:	4b33      	ldr	r3, [pc, #204]	; (800f570 <RCCEx_PLL2_Config+0x128>)
 800f4a4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800f4a6:	4b33      	ldr	r3, [pc, #204]	; (800f574 <RCCEx_PLL2_Config+0x12c>)
 800f4a8:	4013      	ands	r3, r2
 800f4aa:	687a      	ldr	r2, [r7, #4]
 800f4ac:	6892      	ldr	r2, [r2, #8]
 800f4ae:	3a01      	subs	r2, #1
 800f4b0:	f3c2 0108 	ubfx	r1, r2, #0, #9
 800f4b4:	687a      	ldr	r2, [r7, #4]
 800f4b6:	68d2      	ldr	r2, [r2, #12]
 800f4b8:	3a01      	subs	r2, #1
 800f4ba:	0252      	lsls	r2, r2, #9
 800f4bc:	b292      	uxth	r2, r2
 800f4be:	4311      	orrs	r1, r2
 800f4c0:	687a      	ldr	r2, [r7, #4]
 800f4c2:	6912      	ldr	r2, [r2, #16]
 800f4c4:	3a01      	subs	r2, #1
 800f4c6:	0412      	lsls	r2, r2, #16
 800f4c8:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 800f4cc:	4311      	orrs	r1, r2
 800f4ce:	687a      	ldr	r2, [r7, #4]
 800f4d0:	6952      	ldr	r2, [r2, #20]
 800f4d2:	3a01      	subs	r2, #1
 800f4d4:	0612      	lsls	r2, r2, #24
 800f4d6:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 800f4da:	430a      	orrs	r2, r1
 800f4dc:	4924      	ldr	r1, [pc, #144]	; (800f570 <RCCEx_PLL2_Config+0x128>)
 800f4de:	4313      	orrs	r3, r2
 800f4e0:	63cb      	str	r3, [r1, #60]	; 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 800f4e2:	4b23      	ldr	r3, [pc, #140]	; (800f570 <RCCEx_PLL2_Config+0x128>)
 800f4e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f4e6:	f023 020c 	bic.w	r2, r3, #12
 800f4ea:	687b      	ldr	r3, [r7, #4]
 800f4ec:	699b      	ldr	r3, [r3, #24]
 800f4ee:	4920      	ldr	r1, [pc, #128]	; (800f570 <RCCEx_PLL2_Config+0x128>)
 800f4f0:	4313      	orrs	r3, r2
 800f4f2:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 800f4f4:	4b1e      	ldr	r3, [pc, #120]	; (800f570 <RCCEx_PLL2_Config+0x128>)
 800f4f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f4f8:	687b      	ldr	r3, [r7, #4]
 800f4fa:	6a1b      	ldr	r3, [r3, #32]
 800f4fc:	491c      	ldr	r1, [pc, #112]	; (800f570 <RCCEx_PLL2_Config+0x128>)
 800f4fe:	4313      	orrs	r3, r2
 800f500:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 800f502:	4b1b      	ldr	r3, [pc, #108]	; (800f570 <RCCEx_PLL2_Config+0x128>)
 800f504:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f506:	4a1a      	ldr	r2, [pc, #104]	; (800f570 <RCCEx_PLL2_Config+0x128>)
 800f508:	f023 0310 	bic.w	r3, r3, #16
 800f50c:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800f50e:	4b18      	ldr	r3, [pc, #96]	; (800f570 <RCCEx_PLL2_Config+0x128>)
 800f510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f512:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800f516:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800f51a:	687a      	ldr	r2, [r7, #4]
 800f51c:	69d2      	ldr	r2, [r2, #28]
 800f51e:	00d2      	lsls	r2, r2, #3
 800f520:	4913      	ldr	r1, [pc, #76]	; (800f570 <RCCEx_PLL2_Config+0x128>)
 800f522:	4313      	orrs	r3, r2
 800f524:	640b      	str	r3, [r1, #64]	; 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 800f526:	4b12      	ldr	r3, [pc, #72]	; (800f570 <RCCEx_PLL2_Config+0x128>)
 800f528:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f52a:	4a11      	ldr	r2, [pc, #68]	; (800f570 <RCCEx_PLL2_Config+0x128>)
 800f52c:	f043 0310 	orr.w	r3, r3, #16
 800f530:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 800f532:	4b0f      	ldr	r3, [pc, #60]	; (800f570 <RCCEx_PLL2_Config+0x128>)
 800f534:	681b      	ldr	r3, [r3, #0]
 800f536:	4a0e      	ldr	r2, [pc, #56]	; (800f570 <RCCEx_PLL2_Config+0x128>)
 800f538:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800f53c:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800f53e:	f7f7 fc27 	bl	8006d90 <HAL_GetTick>
 800f542:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800f544:	e008      	b.n	800f558 <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800f546:	f7f7 fc23 	bl	8006d90 <HAL_GetTick>
 800f54a:	4602      	mov	r2, r0
 800f54c:	68fb      	ldr	r3, [r7, #12]
 800f54e:	1ad3      	subs	r3, r2, r3
 800f550:	2b02      	cmp	r3, #2
 800f552:	d901      	bls.n	800f558 <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 800f554:	2303      	movs	r3, #3
 800f556:	e006      	b.n	800f566 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800f558:	4b05      	ldr	r3, [pc, #20]	; (800f570 <RCCEx_PLL2_Config+0x128>)
 800f55a:	681b      	ldr	r3, [r3, #0]
 800f55c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800f560:	2b00      	cmp	r3, #0
 800f562:	d0f0      	beq.n	800f546 <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 800f564:	2300      	movs	r3, #0

}
 800f566:	4618      	mov	r0, r3
 800f568:	3710      	adds	r7, #16
 800f56a:	46bd      	mov	sp, r7
 800f56c:	bd80      	pop	{r7, pc}
 800f56e:	bf00      	nop
 800f570:	46020c00 	.word	0x46020c00
 800f574:	80800000 	.word	0x80800000

0800f578 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3)
{
 800f578:	b580      	push	{r7, lr}
 800f57a:	b084      	sub	sp, #16
 800f57c:	af00      	add	r7, sp, #0
 800f57e:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 800f580:	4b47      	ldr	r3, [pc, #284]	; (800f6a0 <RCCEx_PLL3_Config+0x128>)
 800f582:	681b      	ldr	r3, [r3, #0]
 800f584:	4a46      	ldr	r2, [pc, #280]	; (800f6a0 <RCCEx_PLL3_Config+0x128>)
 800f586:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800f58a:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800f58c:	f7f7 fc00 	bl	8006d90 <HAL_GetTick>
 800f590:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800f592:	e008      	b.n	800f5a6 <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800f594:	f7f7 fbfc 	bl	8006d90 <HAL_GetTick>
 800f598:	4602      	mov	r2, r0
 800f59a:	68fb      	ldr	r3, [r7, #12]
 800f59c:	1ad3      	subs	r3, r2, r3
 800f59e:	2b02      	cmp	r3, #2
 800f5a0:	d901      	bls.n	800f5a6 <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800f5a2:	2303      	movs	r3, #3
 800f5a4:	e077      	b.n	800f696 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800f5a6:	4b3e      	ldr	r3, [pc, #248]	; (800f6a0 <RCCEx_PLL3_Config+0x128>)
 800f5a8:	681b      	ldr	r3, [r3, #0]
 800f5aa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800f5ae:	2b00      	cmp	r3, #0
 800f5b0:	d1f0      	bne.n	800f594 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 800f5b2:	4b3b      	ldr	r3, [pc, #236]	; (800f6a0 <RCCEx_PLL3_Config+0x128>)
 800f5b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f5b6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800f5ba:	f023 0303 	bic.w	r3, r3, #3
 800f5be:	687a      	ldr	r2, [r7, #4]
 800f5c0:	6811      	ldr	r1, [r2, #0]
 800f5c2:	687a      	ldr	r2, [r7, #4]
 800f5c4:	6852      	ldr	r2, [r2, #4]
 800f5c6:	3a01      	subs	r2, #1
 800f5c8:	0212      	lsls	r2, r2, #8
 800f5ca:	430a      	orrs	r2, r1
 800f5cc:	4934      	ldr	r1, [pc, #208]	; (800f6a0 <RCCEx_PLL3_Config+0x128>)
 800f5ce:	4313      	orrs	r3, r2
 800f5d0:	630b      	str	r3, [r1, #48]	; 0x30
 800f5d2:	4b33      	ldr	r3, [pc, #204]	; (800f6a0 <RCCEx_PLL3_Config+0x128>)
 800f5d4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f5d6:	4b33      	ldr	r3, [pc, #204]	; (800f6a4 <RCCEx_PLL3_Config+0x12c>)
 800f5d8:	4013      	ands	r3, r2
 800f5da:	687a      	ldr	r2, [r7, #4]
 800f5dc:	6892      	ldr	r2, [r2, #8]
 800f5de:	3a01      	subs	r2, #1
 800f5e0:	f3c2 0108 	ubfx	r1, r2, #0, #9
 800f5e4:	687a      	ldr	r2, [r7, #4]
 800f5e6:	68d2      	ldr	r2, [r2, #12]
 800f5e8:	3a01      	subs	r2, #1
 800f5ea:	0252      	lsls	r2, r2, #9
 800f5ec:	b292      	uxth	r2, r2
 800f5ee:	4311      	orrs	r1, r2
 800f5f0:	687a      	ldr	r2, [r7, #4]
 800f5f2:	6912      	ldr	r2, [r2, #16]
 800f5f4:	3a01      	subs	r2, #1
 800f5f6:	0412      	lsls	r2, r2, #16
 800f5f8:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 800f5fc:	4311      	orrs	r1, r2
 800f5fe:	687a      	ldr	r2, [r7, #4]
 800f600:	6952      	ldr	r2, [r2, #20]
 800f602:	3a01      	subs	r2, #1
 800f604:	0612      	lsls	r2, r2, #24
 800f606:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 800f60a:	430a      	orrs	r2, r1
 800f60c:	4924      	ldr	r1, [pc, #144]	; (800f6a0 <RCCEx_PLL3_Config+0x128>)
 800f60e:	4313      	orrs	r3, r2
 800f610:	644b      	str	r3, [r1, #68]	; 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 800f612:	4b23      	ldr	r3, [pc, #140]	; (800f6a0 <RCCEx_PLL3_Config+0x128>)
 800f614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f616:	f023 020c 	bic.w	r2, r3, #12
 800f61a:	687b      	ldr	r3, [r7, #4]
 800f61c:	699b      	ldr	r3, [r3, #24]
 800f61e:	4920      	ldr	r1, [pc, #128]	; (800f6a0 <RCCEx_PLL3_Config+0x128>)
 800f620:	4313      	orrs	r3, r2
 800f622:	630b      	str	r3, [r1, #48]	; 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 800f624:	4b1e      	ldr	r3, [pc, #120]	; (800f6a0 <RCCEx_PLL3_Config+0x128>)
 800f626:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f628:	687b      	ldr	r3, [r7, #4]
 800f62a:	6a1b      	ldr	r3, [r3, #32]
 800f62c:	491c      	ldr	r1, [pc, #112]	; (800f6a0 <RCCEx_PLL3_Config+0x128>)
 800f62e:	4313      	orrs	r3, r2
 800f630:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 800f632:	4b1b      	ldr	r3, [pc, #108]	; (800f6a0 <RCCEx_PLL3_Config+0x128>)
 800f634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f636:	4a1a      	ldr	r2, [pc, #104]	; (800f6a0 <RCCEx_PLL3_Config+0x128>)
 800f638:	f023 0310 	bic.w	r3, r3, #16
 800f63c:	6313      	str	r3, [r2, #48]	; 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800f63e:	4b18      	ldr	r3, [pc, #96]	; (800f6a0 <RCCEx_PLL3_Config+0x128>)
 800f640:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f642:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800f646:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800f64a:	687a      	ldr	r2, [r7, #4]
 800f64c:	69d2      	ldr	r2, [r2, #28]
 800f64e:	00d2      	lsls	r2, r2, #3
 800f650:	4913      	ldr	r1, [pc, #76]	; (800f6a0 <RCCEx_PLL3_Config+0x128>)
 800f652:	4313      	orrs	r3, r2
 800f654:	648b      	str	r3, [r1, #72]	; 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 800f656:	4b12      	ldr	r3, [pc, #72]	; (800f6a0 <RCCEx_PLL3_Config+0x128>)
 800f658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f65a:	4a11      	ldr	r2, [pc, #68]	; (800f6a0 <RCCEx_PLL3_Config+0x128>)
 800f65c:	f043 0310 	orr.w	r3, r3, #16
 800f660:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 800f662:	4b0f      	ldr	r3, [pc, #60]	; (800f6a0 <RCCEx_PLL3_Config+0x128>)
 800f664:	681b      	ldr	r3, [r3, #0]
 800f666:	4a0e      	ldr	r2, [pc, #56]	; (800f6a0 <RCCEx_PLL3_Config+0x128>)
 800f668:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f66c:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800f66e:	f7f7 fb8f 	bl	8006d90 <HAL_GetTick>
 800f672:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800f674:	e008      	b.n	800f688 <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800f676:	f7f7 fb8b 	bl	8006d90 <HAL_GetTick>
 800f67a:	4602      	mov	r2, r0
 800f67c:	68fb      	ldr	r3, [r7, #12]
 800f67e:	1ad3      	subs	r3, r2, r3
 800f680:	2b02      	cmp	r3, #2
 800f682:	d901      	bls.n	800f688 <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 800f684:	2303      	movs	r3, #3
 800f686:	e006      	b.n	800f696 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800f688:	4b05      	ldr	r3, [pc, #20]	; (800f6a0 <RCCEx_PLL3_Config+0x128>)
 800f68a:	681b      	ldr	r3, [r3, #0]
 800f68c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800f690:	2b00      	cmp	r3, #0
 800f692:	d0f0      	beq.n	800f676 <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 800f694:	2300      	movs	r3, #0
}
 800f696:	4618      	mov	r0, r3
 800f698:	3710      	adds	r7, #16
 800f69a:	46bd      	mov	sp, r7
 800f69c:	bd80      	pop	{r7, pc}
 800f69e:	bf00      	nop
 800f6a0:	46020c00 	.word	0x46020c00
 800f6a4:	80800000 	.word	0x80800000

0800f6a8 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800f6a8:	b580      	push	{r7, lr}
 800f6aa:	b084      	sub	sp, #16
 800f6ac:	af00      	add	r7, sp, #0
 800f6ae:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800f6b0:	687b      	ldr	r3, [r7, #4]
 800f6b2:	2b00      	cmp	r3, #0
 800f6b4:	d101      	bne.n	800f6ba <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800f6b6:	2301      	movs	r3, #1
 800f6b8:	e0dd      	b.n	800f876 <HAL_SPI_Init+0x1ce>

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
  if (IS_SPI_LIMITED_INSTANCE(hspi->Instance))
 800f6ba:	687b      	ldr	r3, [r7, #4]
 800f6bc:	681b      	ldr	r3, [r3, #0]
 800f6be:	4a70      	ldr	r2, [pc, #448]	; (800f880 <HAL_SPI_Init+0x1d8>)
 800f6c0:	4293      	cmp	r3, r2
 800f6c2:	d004      	beq.n	800f6ce <HAL_SPI_Init+0x26>
 800f6c4:	687b      	ldr	r3, [r7, #4]
 800f6c6:	681b      	ldr	r3, [r3, #0]
 800f6c8:	4a6e      	ldr	r2, [pc, #440]	; (800f884 <HAL_SPI_Init+0x1dc>)
 800f6ca:	4293      	cmp	r3, r2
 800f6cc:	e000      	b.n	800f6d0 <HAL_SPI_Init+0x28>
  {
    assert_param(IS_SPI_LIMITED_DATASIZE(hspi->Init.DataSize));
    assert_param(IS_SPI_LIMITED_FIFOTHRESHOLD(hspi->Init.FifoThreshold));
 800f6ce:	bf00      	nop
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800f6d0:	687b      	ldr	r3, [r7, #4]
 800f6d2:	2200      	movs	r2, #0
 800f6d4:	629a      	str	r2, [r3, #40]	; 0x28

  assert_param(IS_SPI_RDY_MASTER_MANAGEMENT(hspi->Init.ReadyMasterManagement));
  assert_param(IS_SPI_RDY_POLARITY(hspi->Init.ReadyPolarity));

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800f6d6:	687b      	ldr	r3, [r7, #4]
 800f6d8:	681b      	ldr	r3, [r3, #0]
 800f6da:	4a69      	ldr	r2, [pc, #420]	; (800f880 <HAL_SPI_Init+0x1d8>)
 800f6dc:	4293      	cmp	r3, r2
 800f6de:	d004      	beq.n	800f6ea <HAL_SPI_Init+0x42>
 800f6e0:	687b      	ldr	r3, [r7, #4]
 800f6e2:	681b      	ldr	r3, [r3, #0]
 800f6e4:	4a67      	ldr	r2, [pc, #412]	; (800f884 <HAL_SPI_Init+0x1dc>)
 800f6e6:	4293      	cmp	r3, r2
 800f6e8:	d105      	bne.n	800f6f6 <HAL_SPI_Init+0x4e>
 800f6ea:	687b      	ldr	r3, [r7, #4]
 800f6ec:	68db      	ldr	r3, [r3, #12]
 800f6ee:	2b0f      	cmp	r3, #15
 800f6f0:	d901      	bls.n	800f6f6 <HAL_SPI_Init+0x4e>
  {
    return HAL_ERROR;
 800f6f2:	2301      	movs	r3, #1
 800f6f4:	e0bf      	b.n	800f876 <HAL_SPI_Init+0x1ce>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800f6f6:	6878      	ldr	r0, [r7, #4]
 800f6f8:	f000 f8ce 	bl	800f898 <SPI_GetPacketSize>
 800f6fc:	60f8      	str	r0, [r7, #12]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800f6fe:	687b      	ldr	r3, [r7, #4]
 800f700:	681b      	ldr	r3, [r3, #0]
 800f702:	4a5f      	ldr	r2, [pc, #380]	; (800f880 <HAL_SPI_Init+0x1d8>)
 800f704:	4293      	cmp	r3, r2
 800f706:	d004      	beq.n	800f712 <HAL_SPI_Init+0x6a>
 800f708:	687b      	ldr	r3, [r7, #4]
 800f70a:	681b      	ldr	r3, [r3, #0]
 800f70c:	4a5d      	ldr	r2, [pc, #372]	; (800f884 <HAL_SPI_Init+0x1dc>)
 800f70e:	4293      	cmp	r3, r2
 800f710:	d102      	bne.n	800f718 <HAL_SPI_Init+0x70>
 800f712:	68fb      	ldr	r3, [r7, #12]
 800f714:	2b08      	cmp	r3, #8
 800f716:	d816      	bhi.n	800f746 <HAL_SPI_Init+0x9e>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800f718:	687b      	ldr	r3, [r7, #4]
 800f71a:	681b      	ldr	r3, [r3, #0]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800f71c:	4a5a      	ldr	r2, [pc, #360]	; (800f888 <HAL_SPI_Init+0x1e0>)
 800f71e:	4293      	cmp	r3, r2
 800f720:	d00e      	beq.n	800f740 <HAL_SPI_Init+0x98>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800f722:	687b      	ldr	r3, [r7, #4]
 800f724:	681b      	ldr	r3, [r3, #0]
 800f726:	4a59      	ldr	r2, [pc, #356]	; (800f88c <HAL_SPI_Init+0x1e4>)
 800f728:	4293      	cmp	r3, r2
 800f72a:	d009      	beq.n	800f740 <HAL_SPI_Init+0x98>
 800f72c:	687b      	ldr	r3, [r7, #4]
 800f72e:	681b      	ldr	r3, [r3, #0]
 800f730:	4a57      	ldr	r2, [pc, #348]	; (800f890 <HAL_SPI_Init+0x1e8>)
 800f732:	4293      	cmp	r3, r2
 800f734:	d004      	beq.n	800f740 <HAL_SPI_Init+0x98>
 800f736:	687b      	ldr	r3, [r7, #4]
 800f738:	681b      	ldr	r3, [r3, #0]
 800f73a:	4a56      	ldr	r2, [pc, #344]	; (800f894 <HAL_SPI_Init+0x1ec>)
 800f73c:	4293      	cmp	r3, r2
 800f73e:	d104      	bne.n	800f74a <HAL_SPI_Init+0xa2>
 800f740:	68fb      	ldr	r3, [r7, #12]
 800f742:	2b10      	cmp	r3, #16
 800f744:	d901      	bls.n	800f74a <HAL_SPI_Init+0xa2>
  {
    return HAL_ERROR;
 800f746:	2301      	movs	r3, #1
 800f748:	e095      	b.n	800f876 <HAL_SPI_Init+0x1ce>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800f74a:	687b      	ldr	r3, [r7, #4]
 800f74c:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 800f750:	b2db      	uxtb	r3, r3
 800f752:	2b00      	cmp	r3, #0
 800f754:	d106      	bne.n	800f764 <HAL_SPI_Init+0xbc>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800f756:	687b      	ldr	r3, [r7, #4]
 800f758:	2200      	movs	r2, #0
 800f75a:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800f75e:	6878      	ldr	r0, [r7, #4]
 800f760:	f7f6 ff78 	bl	8006654 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800f764:	687b      	ldr	r3, [r7, #4]
 800f766:	2202      	movs	r2, #2
 800f768:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800f76c:	687b      	ldr	r3, [r7, #4]
 800f76e:	681b      	ldr	r3, [r3, #0]
 800f770:	681a      	ldr	r2, [r3, #0]
 800f772:	687b      	ldr	r3, [r7, #4]
 800f774:	681b      	ldr	r3, [r3, #0]
 800f776:	f022 0201 	bic.w	r2, r2, #1
 800f77a:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800f77c:	687b      	ldr	r3, [r7, #4]
 800f77e:	681b      	ldr	r3, [r3, #0]
 800f780:	689b      	ldr	r3, [r3, #8]
 800f782:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800f786:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800f788:	687b      	ldr	r3, [r7, #4]
 800f78a:	699b      	ldr	r3, [r3, #24]
 800f78c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800f790:	d119      	bne.n	800f7c6 <HAL_SPI_Init+0x11e>
 800f792:	687b      	ldr	r3, [r7, #4]
 800f794:	685b      	ldr	r3, [r3, #4]
 800f796:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800f79a:	d103      	bne.n	800f7a4 <HAL_SPI_Init+0xfc>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800f79c:	687b      	ldr	r3, [r7, #4]
 800f79e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800f7a0:	2b00      	cmp	r3, #0
 800f7a2:	d008      	beq.n	800f7b6 <HAL_SPI_Init+0x10e>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800f7a4:	687b      	ldr	r3, [r7, #4]
 800f7a6:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800f7a8:	2b00      	cmp	r3, #0
 800f7aa:	d10c      	bne.n	800f7c6 <HAL_SPI_Init+0x11e>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800f7ac:	687b      	ldr	r3, [r7, #4]
 800f7ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800f7b0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800f7b4:	d107      	bne.n	800f7c6 <HAL_SPI_Init+0x11e>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800f7b6:	687b      	ldr	r3, [r7, #4]
 800f7b8:	681b      	ldr	r3, [r3, #0]
 800f7ba:	681a      	ldr	r2, [r3, #0]
 800f7bc:	687b      	ldr	r3, [r7, #4]
 800f7be:	681b      	ldr	r3, [r3, #0]
 800f7c0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800f7c4:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800f7c6:	687b      	ldr	r3, [r7, #4]
 800f7c8:	69da      	ldr	r2, [r3, #28]
 800f7ca:	687b      	ldr	r3, [r7, #4]
 800f7cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f7ce:	431a      	orrs	r2, r3
 800f7d0:	68bb      	ldr	r3, [r7, #8]
 800f7d2:	431a      	orrs	r2, r3
 800f7d4:	687b      	ldr	r3, [r7, #4]
 800f7d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f7d8:	ea42 0103 	orr.w	r1, r2, r3
 800f7dc:	687b      	ldr	r3, [r7, #4]
 800f7de:	68da      	ldr	r2, [r3, #12]
 800f7e0:	687b      	ldr	r3, [r7, #4]
 800f7e2:	681b      	ldr	r3, [r3, #0]
 800f7e4:	430a      	orrs	r2, r1
 800f7e6:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800f7e8:	687b      	ldr	r3, [r7, #4]
 800f7ea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f7ec:	687b      	ldr	r3, [r7, #4]
 800f7ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f7f0:	431a      	orrs	r2, r3
 800f7f2:	687b      	ldr	r3, [r7, #4]
 800f7f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f7f6:	431a      	orrs	r2, r3
 800f7f8:	687b      	ldr	r3, [r7, #4]
 800f7fa:	699b      	ldr	r3, [r3, #24]
 800f7fc:	431a      	orrs	r2, r3
 800f7fe:	687b      	ldr	r3, [r7, #4]
 800f800:	691b      	ldr	r3, [r3, #16]
 800f802:	431a      	orrs	r2, r3
 800f804:	687b      	ldr	r3, [r7, #4]
 800f806:	695b      	ldr	r3, [r3, #20]
 800f808:	431a      	orrs	r2, r3
 800f80a:	687b      	ldr	r3, [r7, #4]
 800f80c:	6a1b      	ldr	r3, [r3, #32]
 800f80e:	431a      	orrs	r2, r3
 800f810:	687b      	ldr	r3, [r7, #4]
 800f812:	685b      	ldr	r3, [r3, #4]
 800f814:	431a      	orrs	r2, r3
 800f816:	687b      	ldr	r3, [r7, #4]
 800f818:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f81a:	431a      	orrs	r2, r3
 800f81c:	687b      	ldr	r3, [r7, #4]
 800f81e:	689b      	ldr	r3, [r3, #8]
 800f820:	431a      	orrs	r2, r3
 800f822:	687b      	ldr	r3, [r7, #4]
 800f824:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f826:	431a      	orrs	r2, r3
 800f828:	687b      	ldr	r3, [r7, #4]
 800f82a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f82c:	431a      	orrs	r2, r3
 800f82e:	687b      	ldr	r3, [r7, #4]
 800f830:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f832:	ea42 0103 	orr.w	r1, r2, r3
 800f836:	687b      	ldr	r3, [r7, #4]
 800f838:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800f83a:	687b      	ldr	r3, [r7, #4]
 800f83c:	681b      	ldr	r3, [r3, #0]
 800f83e:	430a      	orrs	r2, r1
 800f840:	60da      	str	r2, [r3, #12]
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800f842:	687b      	ldr	r3, [r7, #4]
 800f844:	685b      	ldr	r3, [r3, #4]
 800f846:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800f84a:	2b00      	cmp	r3, #0
 800f84c:	d00a      	beq.n	800f864 <HAL_SPI_Init+0x1bc>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800f84e:	687b      	ldr	r3, [r7, #4]
 800f850:	681b      	ldr	r3, [r3, #0]
 800f852:	68db      	ldr	r3, [r3, #12]
 800f854:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800f858:	687b      	ldr	r3, [r7, #4]
 800f85a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f85c:	687b      	ldr	r3, [r7, #4]
 800f85e:	681b      	ldr	r3, [r3, #0]
 800f860:	430a      	orrs	r2, r1
 800f862:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800f864:	687b      	ldr	r3, [r7, #4]
 800f866:	2200      	movs	r2, #0
 800f868:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  hspi->State     = HAL_SPI_STATE_READY;
 800f86c:	687b      	ldr	r3, [r7, #4]
 800f86e:	2201      	movs	r2, #1
 800f870:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

  return HAL_OK;
 800f874:	2300      	movs	r3, #0
}
 800f876:	4618      	mov	r0, r3
 800f878:	3710      	adds	r7, #16
 800f87a:	46bd      	mov	sp, r7
 800f87c:	bd80      	pop	{r7, pc}
 800f87e:	bf00      	nop
 800f880:	46002000 	.word	0x46002000
 800f884:	56002000 	.word	0x56002000
 800f888:	40013000 	.word	0x40013000
 800f88c:	50013000 	.word	0x50013000
 800f890:	40003800 	.word	0x40003800
 800f894:	50003800 	.word	0x50003800

0800f898 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800f898:	b480      	push	{r7}
 800f89a:	b085      	sub	sp, #20
 800f89c:	af00      	add	r7, sp, #0
 800f89e:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800f8a0:	687b      	ldr	r3, [r7, #4]
 800f8a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f8a4:	095b      	lsrs	r3, r3, #5
 800f8a6:	3301      	adds	r3, #1
 800f8a8:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800f8aa:	687b      	ldr	r3, [r7, #4]
 800f8ac:	68db      	ldr	r3, [r3, #12]
 800f8ae:	3301      	adds	r3, #1
 800f8b0:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800f8b2:	68bb      	ldr	r3, [r7, #8]
 800f8b4:	3307      	adds	r3, #7
 800f8b6:	08db      	lsrs	r3, r3, #3
 800f8b8:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800f8ba:	68bb      	ldr	r3, [r7, #8]
 800f8bc:	68fa      	ldr	r2, [r7, #12]
 800f8be:	fb02 f303 	mul.w	r3, r2, r3
}
 800f8c2:	4618      	mov	r0, r3
 800f8c4:	3714      	adds	r7, #20
 800f8c6:	46bd      	mov	sp, r7
 800f8c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8cc:	4770      	bx	lr

0800f8ce <HAL_SPIEx_SetConfigAutonomousMode>:
  * @param  sConfig Pointer to a SPI_HandleTypeDef structure that contains
  *                the configuration information of the autonomous mode for the specified SPIx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPIEx_SetConfigAutonomousMode(SPI_HandleTypeDef *hspi, SPI_AutonomousModeConfTypeDef *sConfig)
{
 800f8ce:	b480      	push	{r7}
 800f8d0:	b083      	sub	sp, #12
 800f8d2:	af00      	add	r7, sp, #0
 800f8d4:	6078      	str	r0, [r7, #4]
 800f8d6:	6039      	str	r1, [r7, #0]
  if (hspi->State == HAL_SPI_STATE_READY)
 800f8d8:	687b      	ldr	r3, [r7, #4]
 800f8da:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 800f8de:	b2db      	uxtb	r3, r3
 800f8e0:	2b01      	cmp	r3, #1
 800f8e2:	d12e      	bne.n	800f942 <HAL_SPIEx_SetConfigAutonomousMode+0x74>
  {
    /* Process Locked */
    __HAL_LOCK(hspi);
 800f8e4:	687b      	ldr	r3, [r7, #4]
 800f8e6:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 800f8ea:	2b01      	cmp	r3, #1
 800f8ec:	d101      	bne.n	800f8f2 <HAL_SPIEx_SetConfigAutonomousMode+0x24>
 800f8ee:	2302      	movs	r3, #2
 800f8f0:	e028      	b.n	800f944 <HAL_SPIEx_SetConfigAutonomousMode+0x76>
 800f8f2:	687b      	ldr	r3, [r7, #4]
 800f8f4:	2201      	movs	r2, #1
 800f8f6:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

    hspi->State = HAL_SPI_STATE_BUSY;
 800f8fa:	687b      	ldr	r3, [r7, #4]
 800f8fc:	2202      	movs	r2, #2
 800f8fe:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
    assert_param(IS_SPI_TRIG_SOURCE(hspi->Instance, sConfig->TriggerSelection));

    assert_param(IS_SPI_AUTO_MODE_TRG_POL(sConfig->TriggerPolarity));

    /* Disable the selected SPI peripheral to be able to configure AUTOCR */
    __HAL_SPI_DISABLE(hspi);
 800f902:	687b      	ldr	r3, [r7, #4]
 800f904:	681b      	ldr	r3, [r3, #0]
 800f906:	681a      	ldr	r2, [r3, #0]
 800f908:	687b      	ldr	r3, [r7, #4]
 800f90a:	681b      	ldr	r3, [r3, #0]
 800f90c:	f022 0201 	bic.w	r2, r2, #1
 800f910:	601a      	str	r2, [r3, #0]

    /* SPIx AUTOCR Configuration */
    WRITE_REG(hspi->Instance->AUTOCR, (sConfig->TriggerState | ((sConfig->TriggerSelection) & SPI_AUTOCR_TRIGSEL_Msk) |
 800f912:	683b      	ldr	r3, [r7, #0]
 800f914:	681a      	ldr	r2, [r3, #0]
 800f916:	683b      	ldr	r3, [r7, #0]
 800f918:	685b      	ldr	r3, [r3, #4]
 800f91a:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 800f91e:	ea42 0103 	orr.w	r1, r2, r3
 800f922:	683b      	ldr	r3, [r7, #0]
 800f924:	689a      	ldr	r2, [r3, #8]
 800f926:	687b      	ldr	r3, [r7, #4]
 800f928:	681b      	ldr	r3, [r3, #0]
 800f92a:	430a      	orrs	r2, r1
 800f92c:	61da      	str	r2, [r3, #28]
                                       sConfig->TriggerPolarity));

    hspi->State = HAL_SPI_STATE_READY;
 800f92e:	687b      	ldr	r3, [r7, #4]
 800f930:	2201      	movs	r2, #1
 800f932:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 800f936:	687b      	ldr	r3, [r7, #4]
 800f938:	2200      	movs	r2, #0
 800f93a:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800f93e:	2300      	movs	r3, #0
 800f940:	e000      	b.n	800f944 <HAL_SPIEx_SetConfigAutonomousMode+0x76>
  }
  else
  {
    return HAL_ERROR;
 800f942:	2301      	movs	r3, #1
  }
}
 800f944:	4618      	mov	r0, r3
 800f946:	370c      	adds	r7, #12
 800f948:	46bd      	mov	sp, r7
 800f94a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f94e:	4770      	bx	lr

0800f950 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800f950:	b580      	push	{r7, lr}
 800f952:	b082      	sub	sp, #8
 800f954:	af00      	add	r7, sp, #0
 800f956:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800f958:	687b      	ldr	r3, [r7, #4]
 800f95a:	2b00      	cmp	r3, #0
 800f95c:	d101      	bne.n	800f962 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800f95e:	2301      	movs	r3, #1
 800f960:	e049      	b.n	800f9f6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800f962:	687b      	ldr	r3, [r7, #4]
 800f964:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f968:	b2db      	uxtb	r3, r3
 800f96a:	2b00      	cmp	r3, #0
 800f96c:	d106      	bne.n	800f97c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800f96e:	687b      	ldr	r3, [r7, #4]
 800f970:	2200      	movs	r2, #0
 800f972:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800f976:	6878      	ldr	r0, [r7, #4]
 800f978:	f7f7 f8c2 	bl	8006b00 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f97c:	687b      	ldr	r3, [r7, #4]
 800f97e:	2202      	movs	r2, #2
 800f980:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800f984:	687b      	ldr	r3, [r7, #4]
 800f986:	681a      	ldr	r2, [r3, #0]
 800f988:	687b      	ldr	r3, [r7, #4]
 800f98a:	3304      	adds	r3, #4
 800f98c:	4619      	mov	r1, r3
 800f98e:	4610      	mov	r0, r2
 800f990:	f000 fa7e 	bl	800fe90 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800f994:	687b      	ldr	r3, [r7, #4]
 800f996:	2201      	movs	r2, #1
 800f998:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f99c:	687b      	ldr	r3, [r7, #4]
 800f99e:	2201      	movs	r2, #1
 800f9a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800f9a4:	687b      	ldr	r3, [r7, #4]
 800f9a6:	2201      	movs	r2, #1
 800f9a8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800f9ac:	687b      	ldr	r3, [r7, #4]
 800f9ae:	2201      	movs	r2, #1
 800f9b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800f9b4:	687b      	ldr	r3, [r7, #4]
 800f9b6:	2201      	movs	r2, #1
 800f9b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800f9bc:	687b      	ldr	r3, [r7, #4]
 800f9be:	2201      	movs	r2, #1
 800f9c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800f9c4:	687b      	ldr	r3, [r7, #4]
 800f9c6:	2201      	movs	r2, #1
 800f9c8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f9cc:	687b      	ldr	r3, [r7, #4]
 800f9ce:	2201      	movs	r2, #1
 800f9d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f9d4:	687b      	ldr	r3, [r7, #4]
 800f9d6:	2201      	movs	r2, #1
 800f9d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f9dc:	687b      	ldr	r3, [r7, #4]
 800f9de:	2201      	movs	r2, #1
 800f9e0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800f9e4:	687b      	ldr	r3, [r7, #4]
 800f9e6:	2201      	movs	r2, #1
 800f9e8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800f9ec:	687b      	ldr	r3, [r7, #4]
 800f9ee:	2201      	movs	r2, #1
 800f9f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800f9f4:	2300      	movs	r3, #0
}
 800f9f6:	4618      	mov	r0, r3
 800f9f8:	3708      	adds	r7, #8
 800f9fa:	46bd      	mov	sp, r7
 800f9fc:	bd80      	pop	{r7, pc}
	...

0800fa00 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800fa00:	b480      	push	{r7}
 800fa02:	b085      	sub	sp, #20
 800fa04:	af00      	add	r7, sp, #0
 800fa06:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800fa08:	687b      	ldr	r3, [r7, #4]
 800fa0a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800fa0e:	b2db      	uxtb	r3, r3
 800fa10:	2b01      	cmp	r3, #1
 800fa12:	d001      	beq.n	800fa18 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800fa14:	2301      	movs	r3, #1
 800fa16:	e072      	b.n	800fafe <HAL_TIM_Base_Start_IT+0xfe>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800fa18:	687b      	ldr	r3, [r7, #4]
 800fa1a:	2202      	movs	r2, #2
 800fa1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800fa20:	687b      	ldr	r3, [r7, #4]
 800fa22:	681b      	ldr	r3, [r3, #0]
 800fa24:	68da      	ldr	r2, [r3, #12]
 800fa26:	687b      	ldr	r3, [r7, #4]
 800fa28:	681b      	ldr	r3, [r3, #0]
 800fa2a:	f042 0201 	orr.w	r2, r2, #1
 800fa2e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800fa30:	687b      	ldr	r3, [r7, #4]
 800fa32:	681b      	ldr	r3, [r3, #0]
 800fa34:	4a35      	ldr	r2, [pc, #212]	; (800fb0c <HAL_TIM_Base_Start_IT+0x10c>)
 800fa36:	4293      	cmp	r3, r2
 800fa38:	d040      	beq.n	800fabc <HAL_TIM_Base_Start_IT+0xbc>
 800fa3a:	687b      	ldr	r3, [r7, #4]
 800fa3c:	681b      	ldr	r3, [r3, #0]
 800fa3e:	4a34      	ldr	r2, [pc, #208]	; (800fb10 <HAL_TIM_Base_Start_IT+0x110>)
 800fa40:	4293      	cmp	r3, r2
 800fa42:	d03b      	beq.n	800fabc <HAL_TIM_Base_Start_IT+0xbc>
 800fa44:	687b      	ldr	r3, [r7, #4]
 800fa46:	681b      	ldr	r3, [r3, #0]
 800fa48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800fa4c:	d036      	beq.n	800fabc <HAL_TIM_Base_Start_IT+0xbc>
 800fa4e:	687b      	ldr	r3, [r7, #4]
 800fa50:	681b      	ldr	r3, [r3, #0]
 800fa52:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800fa56:	d031      	beq.n	800fabc <HAL_TIM_Base_Start_IT+0xbc>
 800fa58:	687b      	ldr	r3, [r7, #4]
 800fa5a:	681b      	ldr	r3, [r3, #0]
 800fa5c:	4a2d      	ldr	r2, [pc, #180]	; (800fb14 <HAL_TIM_Base_Start_IT+0x114>)
 800fa5e:	4293      	cmp	r3, r2
 800fa60:	d02c      	beq.n	800fabc <HAL_TIM_Base_Start_IT+0xbc>
 800fa62:	687b      	ldr	r3, [r7, #4]
 800fa64:	681b      	ldr	r3, [r3, #0]
 800fa66:	4a2c      	ldr	r2, [pc, #176]	; (800fb18 <HAL_TIM_Base_Start_IT+0x118>)
 800fa68:	4293      	cmp	r3, r2
 800fa6a:	d027      	beq.n	800fabc <HAL_TIM_Base_Start_IT+0xbc>
 800fa6c:	687b      	ldr	r3, [r7, #4]
 800fa6e:	681b      	ldr	r3, [r3, #0]
 800fa70:	4a2a      	ldr	r2, [pc, #168]	; (800fb1c <HAL_TIM_Base_Start_IT+0x11c>)
 800fa72:	4293      	cmp	r3, r2
 800fa74:	d022      	beq.n	800fabc <HAL_TIM_Base_Start_IT+0xbc>
 800fa76:	687b      	ldr	r3, [r7, #4]
 800fa78:	681b      	ldr	r3, [r3, #0]
 800fa7a:	4a29      	ldr	r2, [pc, #164]	; (800fb20 <HAL_TIM_Base_Start_IT+0x120>)
 800fa7c:	4293      	cmp	r3, r2
 800fa7e:	d01d      	beq.n	800fabc <HAL_TIM_Base_Start_IT+0xbc>
 800fa80:	687b      	ldr	r3, [r7, #4]
 800fa82:	681b      	ldr	r3, [r3, #0]
 800fa84:	4a27      	ldr	r2, [pc, #156]	; (800fb24 <HAL_TIM_Base_Start_IT+0x124>)
 800fa86:	4293      	cmp	r3, r2
 800fa88:	d018      	beq.n	800fabc <HAL_TIM_Base_Start_IT+0xbc>
 800fa8a:	687b      	ldr	r3, [r7, #4]
 800fa8c:	681b      	ldr	r3, [r3, #0]
 800fa8e:	4a26      	ldr	r2, [pc, #152]	; (800fb28 <HAL_TIM_Base_Start_IT+0x128>)
 800fa90:	4293      	cmp	r3, r2
 800fa92:	d013      	beq.n	800fabc <HAL_TIM_Base_Start_IT+0xbc>
 800fa94:	687b      	ldr	r3, [r7, #4]
 800fa96:	681b      	ldr	r3, [r3, #0]
 800fa98:	4a24      	ldr	r2, [pc, #144]	; (800fb2c <HAL_TIM_Base_Start_IT+0x12c>)
 800fa9a:	4293      	cmp	r3, r2
 800fa9c:	d00e      	beq.n	800fabc <HAL_TIM_Base_Start_IT+0xbc>
 800fa9e:	687b      	ldr	r3, [r7, #4]
 800faa0:	681b      	ldr	r3, [r3, #0]
 800faa2:	4a23      	ldr	r2, [pc, #140]	; (800fb30 <HAL_TIM_Base_Start_IT+0x130>)
 800faa4:	4293      	cmp	r3, r2
 800faa6:	d009      	beq.n	800fabc <HAL_TIM_Base_Start_IT+0xbc>
 800faa8:	687b      	ldr	r3, [r7, #4]
 800faaa:	681b      	ldr	r3, [r3, #0]
 800faac:	4a21      	ldr	r2, [pc, #132]	; (800fb34 <HAL_TIM_Base_Start_IT+0x134>)
 800faae:	4293      	cmp	r3, r2
 800fab0:	d004      	beq.n	800fabc <HAL_TIM_Base_Start_IT+0xbc>
 800fab2:	687b      	ldr	r3, [r7, #4]
 800fab4:	681b      	ldr	r3, [r3, #0]
 800fab6:	4a20      	ldr	r2, [pc, #128]	; (800fb38 <HAL_TIM_Base_Start_IT+0x138>)
 800fab8:	4293      	cmp	r3, r2
 800faba:	d115      	bne.n	800fae8 <HAL_TIM_Base_Start_IT+0xe8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800fabc:	687b      	ldr	r3, [r7, #4]
 800fabe:	681b      	ldr	r3, [r3, #0]
 800fac0:	689a      	ldr	r2, [r3, #8]
 800fac2:	4b1e      	ldr	r3, [pc, #120]	; (800fb3c <HAL_TIM_Base_Start_IT+0x13c>)
 800fac4:	4013      	ands	r3, r2
 800fac6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800fac8:	68fb      	ldr	r3, [r7, #12]
 800faca:	2b06      	cmp	r3, #6
 800facc:	d015      	beq.n	800fafa <HAL_TIM_Base_Start_IT+0xfa>
 800face:	68fb      	ldr	r3, [r7, #12]
 800fad0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800fad4:	d011      	beq.n	800fafa <HAL_TIM_Base_Start_IT+0xfa>
    {
      __HAL_TIM_ENABLE(htim);
 800fad6:	687b      	ldr	r3, [r7, #4]
 800fad8:	681b      	ldr	r3, [r3, #0]
 800fada:	681a      	ldr	r2, [r3, #0]
 800fadc:	687b      	ldr	r3, [r7, #4]
 800fade:	681b      	ldr	r3, [r3, #0]
 800fae0:	f042 0201 	orr.w	r2, r2, #1
 800fae4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800fae6:	e008      	b.n	800fafa <HAL_TIM_Base_Start_IT+0xfa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800fae8:	687b      	ldr	r3, [r7, #4]
 800faea:	681b      	ldr	r3, [r3, #0]
 800faec:	681a      	ldr	r2, [r3, #0]
 800faee:	687b      	ldr	r3, [r7, #4]
 800faf0:	681b      	ldr	r3, [r3, #0]
 800faf2:	f042 0201 	orr.w	r2, r2, #1
 800faf6:	601a      	str	r2, [r3, #0]
 800faf8:	e000      	b.n	800fafc <HAL_TIM_Base_Start_IT+0xfc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800fafa:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800fafc:	2300      	movs	r3, #0
}
 800fafe:	4618      	mov	r0, r3
 800fb00:	3714      	adds	r7, #20
 800fb02:	46bd      	mov	sp, r7
 800fb04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb08:	4770      	bx	lr
 800fb0a:	bf00      	nop
 800fb0c:	40012c00 	.word	0x40012c00
 800fb10:	50012c00 	.word	0x50012c00
 800fb14:	40000400 	.word	0x40000400
 800fb18:	50000400 	.word	0x50000400
 800fb1c:	40000800 	.word	0x40000800
 800fb20:	50000800 	.word	0x50000800
 800fb24:	40000c00 	.word	0x40000c00
 800fb28:	50000c00 	.word	0x50000c00
 800fb2c:	40013400 	.word	0x40013400
 800fb30:	50013400 	.word	0x50013400
 800fb34:	40014000 	.word	0x40014000
 800fb38:	50014000 	.word	0x50014000
 800fb3c:	00010007 	.word	0x00010007

0800fb40 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800fb40:	b580      	push	{r7, lr}
 800fb42:	b082      	sub	sp, #8
 800fb44:	af00      	add	r7, sp, #0
 800fb46:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800fb48:	687b      	ldr	r3, [r7, #4]
 800fb4a:	681b      	ldr	r3, [r3, #0]
 800fb4c:	691b      	ldr	r3, [r3, #16]
 800fb4e:	f003 0302 	and.w	r3, r3, #2
 800fb52:	2b02      	cmp	r3, #2
 800fb54:	d122      	bne.n	800fb9c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800fb56:	687b      	ldr	r3, [r7, #4]
 800fb58:	681b      	ldr	r3, [r3, #0]
 800fb5a:	68db      	ldr	r3, [r3, #12]
 800fb5c:	f003 0302 	and.w	r3, r3, #2
 800fb60:	2b02      	cmp	r3, #2
 800fb62:	d11b      	bne.n	800fb9c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800fb64:	687b      	ldr	r3, [r7, #4]
 800fb66:	681b      	ldr	r3, [r3, #0]
 800fb68:	f06f 0202 	mvn.w	r2, #2
 800fb6c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800fb6e:	687b      	ldr	r3, [r7, #4]
 800fb70:	2201      	movs	r2, #1
 800fb72:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800fb74:	687b      	ldr	r3, [r7, #4]
 800fb76:	681b      	ldr	r3, [r3, #0]
 800fb78:	699b      	ldr	r3, [r3, #24]
 800fb7a:	f003 0303 	and.w	r3, r3, #3
 800fb7e:	2b00      	cmp	r3, #0
 800fb80:	d003      	beq.n	800fb8a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800fb82:	6878      	ldr	r0, [r7, #4]
 800fb84:	f000 f965 	bl	800fe52 <HAL_TIM_IC_CaptureCallback>
 800fb88:	e005      	b.n	800fb96 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800fb8a:	6878      	ldr	r0, [r7, #4]
 800fb8c:	f000 f957 	bl	800fe3e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800fb90:	6878      	ldr	r0, [r7, #4]
 800fb92:	f000 f968 	bl	800fe66 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800fb96:	687b      	ldr	r3, [r7, #4]
 800fb98:	2200      	movs	r2, #0
 800fb9a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800fb9c:	687b      	ldr	r3, [r7, #4]
 800fb9e:	681b      	ldr	r3, [r3, #0]
 800fba0:	691b      	ldr	r3, [r3, #16]
 800fba2:	f003 0304 	and.w	r3, r3, #4
 800fba6:	2b04      	cmp	r3, #4
 800fba8:	d122      	bne.n	800fbf0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800fbaa:	687b      	ldr	r3, [r7, #4]
 800fbac:	681b      	ldr	r3, [r3, #0]
 800fbae:	68db      	ldr	r3, [r3, #12]
 800fbb0:	f003 0304 	and.w	r3, r3, #4
 800fbb4:	2b04      	cmp	r3, #4
 800fbb6:	d11b      	bne.n	800fbf0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800fbb8:	687b      	ldr	r3, [r7, #4]
 800fbba:	681b      	ldr	r3, [r3, #0]
 800fbbc:	f06f 0204 	mvn.w	r2, #4
 800fbc0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800fbc2:	687b      	ldr	r3, [r7, #4]
 800fbc4:	2202      	movs	r2, #2
 800fbc6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800fbc8:	687b      	ldr	r3, [r7, #4]
 800fbca:	681b      	ldr	r3, [r3, #0]
 800fbcc:	699b      	ldr	r3, [r3, #24]
 800fbce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800fbd2:	2b00      	cmp	r3, #0
 800fbd4:	d003      	beq.n	800fbde <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800fbd6:	6878      	ldr	r0, [r7, #4]
 800fbd8:	f000 f93b 	bl	800fe52 <HAL_TIM_IC_CaptureCallback>
 800fbdc:	e005      	b.n	800fbea <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800fbde:	6878      	ldr	r0, [r7, #4]
 800fbe0:	f000 f92d 	bl	800fe3e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800fbe4:	6878      	ldr	r0, [r7, #4]
 800fbe6:	f000 f93e 	bl	800fe66 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800fbea:	687b      	ldr	r3, [r7, #4]
 800fbec:	2200      	movs	r2, #0
 800fbee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800fbf0:	687b      	ldr	r3, [r7, #4]
 800fbf2:	681b      	ldr	r3, [r3, #0]
 800fbf4:	691b      	ldr	r3, [r3, #16]
 800fbf6:	f003 0308 	and.w	r3, r3, #8
 800fbfa:	2b08      	cmp	r3, #8
 800fbfc:	d122      	bne.n	800fc44 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800fbfe:	687b      	ldr	r3, [r7, #4]
 800fc00:	681b      	ldr	r3, [r3, #0]
 800fc02:	68db      	ldr	r3, [r3, #12]
 800fc04:	f003 0308 	and.w	r3, r3, #8
 800fc08:	2b08      	cmp	r3, #8
 800fc0a:	d11b      	bne.n	800fc44 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800fc0c:	687b      	ldr	r3, [r7, #4]
 800fc0e:	681b      	ldr	r3, [r3, #0]
 800fc10:	f06f 0208 	mvn.w	r2, #8
 800fc14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800fc16:	687b      	ldr	r3, [r7, #4]
 800fc18:	2204      	movs	r2, #4
 800fc1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800fc1c:	687b      	ldr	r3, [r7, #4]
 800fc1e:	681b      	ldr	r3, [r3, #0]
 800fc20:	69db      	ldr	r3, [r3, #28]
 800fc22:	f003 0303 	and.w	r3, r3, #3
 800fc26:	2b00      	cmp	r3, #0
 800fc28:	d003      	beq.n	800fc32 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800fc2a:	6878      	ldr	r0, [r7, #4]
 800fc2c:	f000 f911 	bl	800fe52 <HAL_TIM_IC_CaptureCallback>
 800fc30:	e005      	b.n	800fc3e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800fc32:	6878      	ldr	r0, [r7, #4]
 800fc34:	f000 f903 	bl	800fe3e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800fc38:	6878      	ldr	r0, [r7, #4]
 800fc3a:	f000 f914 	bl	800fe66 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800fc3e:	687b      	ldr	r3, [r7, #4]
 800fc40:	2200      	movs	r2, #0
 800fc42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800fc44:	687b      	ldr	r3, [r7, #4]
 800fc46:	681b      	ldr	r3, [r3, #0]
 800fc48:	691b      	ldr	r3, [r3, #16]
 800fc4a:	f003 0310 	and.w	r3, r3, #16
 800fc4e:	2b10      	cmp	r3, #16
 800fc50:	d122      	bne.n	800fc98 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800fc52:	687b      	ldr	r3, [r7, #4]
 800fc54:	681b      	ldr	r3, [r3, #0]
 800fc56:	68db      	ldr	r3, [r3, #12]
 800fc58:	f003 0310 	and.w	r3, r3, #16
 800fc5c:	2b10      	cmp	r3, #16
 800fc5e:	d11b      	bne.n	800fc98 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800fc60:	687b      	ldr	r3, [r7, #4]
 800fc62:	681b      	ldr	r3, [r3, #0]
 800fc64:	f06f 0210 	mvn.w	r2, #16
 800fc68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800fc6a:	687b      	ldr	r3, [r7, #4]
 800fc6c:	2208      	movs	r2, #8
 800fc6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800fc70:	687b      	ldr	r3, [r7, #4]
 800fc72:	681b      	ldr	r3, [r3, #0]
 800fc74:	69db      	ldr	r3, [r3, #28]
 800fc76:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800fc7a:	2b00      	cmp	r3, #0
 800fc7c:	d003      	beq.n	800fc86 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800fc7e:	6878      	ldr	r0, [r7, #4]
 800fc80:	f000 f8e7 	bl	800fe52 <HAL_TIM_IC_CaptureCallback>
 800fc84:	e005      	b.n	800fc92 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800fc86:	6878      	ldr	r0, [r7, #4]
 800fc88:	f000 f8d9 	bl	800fe3e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800fc8c:	6878      	ldr	r0, [r7, #4]
 800fc8e:	f000 f8ea 	bl	800fe66 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800fc92:	687b      	ldr	r3, [r7, #4]
 800fc94:	2200      	movs	r2, #0
 800fc96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800fc98:	687b      	ldr	r3, [r7, #4]
 800fc9a:	681b      	ldr	r3, [r3, #0]
 800fc9c:	691b      	ldr	r3, [r3, #16]
 800fc9e:	f003 0301 	and.w	r3, r3, #1
 800fca2:	2b01      	cmp	r3, #1
 800fca4:	d10e      	bne.n	800fcc4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800fca6:	687b      	ldr	r3, [r7, #4]
 800fca8:	681b      	ldr	r3, [r3, #0]
 800fcaa:	68db      	ldr	r3, [r3, #12]
 800fcac:	f003 0301 	and.w	r3, r3, #1
 800fcb0:	2b01      	cmp	r3, #1
 800fcb2:	d107      	bne.n	800fcc4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800fcb4:	687b      	ldr	r3, [r7, #4]
 800fcb6:	681b      	ldr	r3, [r3, #0]
 800fcb8:	f06f 0201 	mvn.w	r2, #1
 800fcbc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800fcbe:	6878      	ldr	r0, [r7, #4]
 800fcc0:	f7f6 f9ba 	bl	8006038 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800fcc4:	687b      	ldr	r3, [r7, #4]
 800fcc6:	681b      	ldr	r3, [r3, #0]
 800fcc8:	691b      	ldr	r3, [r3, #16]
 800fcca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fcce:	2b80      	cmp	r3, #128	; 0x80
 800fcd0:	d10e      	bne.n	800fcf0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800fcd2:	687b      	ldr	r3, [r7, #4]
 800fcd4:	681b      	ldr	r3, [r3, #0]
 800fcd6:	68db      	ldr	r3, [r3, #12]
 800fcd8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fcdc:	2b80      	cmp	r3, #128	; 0x80
 800fcde:	d107      	bne.n	800fcf0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800fce0:	687b      	ldr	r3, [r7, #4]
 800fce2:	681b      	ldr	r3, [r3, #0]
 800fce4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800fce8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800fcea:	6878      	ldr	r0, [r7, #4]
 800fcec:	f000 fa96 	bl	801021c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800fcf0:	687b      	ldr	r3, [r7, #4]
 800fcf2:	681b      	ldr	r3, [r3, #0]
 800fcf4:	691b      	ldr	r3, [r3, #16]
 800fcf6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800fcfa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800fcfe:	d10e      	bne.n	800fd1e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800fd00:	687b      	ldr	r3, [r7, #4]
 800fd02:	681b      	ldr	r3, [r3, #0]
 800fd04:	68db      	ldr	r3, [r3, #12]
 800fd06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fd0a:	2b80      	cmp	r3, #128	; 0x80
 800fd0c:	d107      	bne.n	800fd1e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800fd0e:	687b      	ldr	r3, [r7, #4]
 800fd10:	681b      	ldr	r3, [r3, #0]
 800fd12:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800fd16:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800fd18:	6878      	ldr	r0, [r7, #4]
 800fd1a:	f000 fa89 	bl	8010230 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800fd1e:	687b      	ldr	r3, [r7, #4]
 800fd20:	681b      	ldr	r3, [r3, #0]
 800fd22:	691b      	ldr	r3, [r3, #16]
 800fd24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fd28:	2b40      	cmp	r3, #64	; 0x40
 800fd2a:	d10e      	bne.n	800fd4a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800fd2c:	687b      	ldr	r3, [r7, #4]
 800fd2e:	681b      	ldr	r3, [r3, #0]
 800fd30:	68db      	ldr	r3, [r3, #12]
 800fd32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fd36:	2b40      	cmp	r3, #64	; 0x40
 800fd38:	d107      	bne.n	800fd4a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800fd3a:	687b      	ldr	r3, [r7, #4]
 800fd3c:	681b      	ldr	r3, [r3, #0]
 800fd3e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800fd42:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800fd44:	6878      	ldr	r0, [r7, #4]
 800fd46:	f000 f898 	bl	800fe7a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800fd4a:	687b      	ldr	r3, [r7, #4]
 800fd4c:	681b      	ldr	r3, [r3, #0]
 800fd4e:	691b      	ldr	r3, [r3, #16]
 800fd50:	f003 0320 	and.w	r3, r3, #32
 800fd54:	2b20      	cmp	r3, #32
 800fd56:	d10e      	bne.n	800fd76 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800fd58:	687b      	ldr	r3, [r7, #4]
 800fd5a:	681b      	ldr	r3, [r3, #0]
 800fd5c:	68db      	ldr	r3, [r3, #12]
 800fd5e:	f003 0320 	and.w	r3, r3, #32
 800fd62:	2b20      	cmp	r3, #32
 800fd64:	d107      	bne.n	800fd76 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800fd66:	687b      	ldr	r3, [r7, #4]
 800fd68:	681b      	ldr	r3, [r3, #0]
 800fd6a:	f06f 0220 	mvn.w	r2, #32
 800fd6e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800fd70:	6878      	ldr	r0, [r7, #4]
 800fd72:	f000 fa49 	bl	8010208 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 800fd76:	687b      	ldr	r3, [r7, #4]
 800fd78:	681b      	ldr	r3, [r3, #0]
 800fd7a:	691b      	ldr	r3, [r3, #16]
 800fd7c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800fd80:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800fd84:	d10f      	bne.n	800fda6 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 800fd86:	687b      	ldr	r3, [r7, #4]
 800fd88:	681b      	ldr	r3, [r3, #0]
 800fd8a:	68db      	ldr	r3, [r3, #12]
 800fd8c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800fd90:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800fd94:	d107      	bne.n	800fda6 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 800fd96:	687b      	ldr	r3, [r7, #4]
 800fd98:	681b      	ldr	r3, [r3, #0]
 800fd9a:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 800fd9e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800fda0:	6878      	ldr	r0, [r7, #4]
 800fda2:	f000 fa4f 	bl	8010244 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 800fda6:	687b      	ldr	r3, [r7, #4]
 800fda8:	681b      	ldr	r3, [r3, #0]
 800fdaa:	691b      	ldr	r3, [r3, #16]
 800fdac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800fdb0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800fdb4:	d10f      	bne.n	800fdd6 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 800fdb6:	687b      	ldr	r3, [r7, #4]
 800fdb8:	681b      	ldr	r3, [r3, #0]
 800fdba:	68db      	ldr	r3, [r3, #12]
 800fdbc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800fdc0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800fdc4:	d107      	bne.n	800fdd6 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 800fdc6:	687b      	ldr	r3, [r7, #4]
 800fdc8:	681b      	ldr	r3, [r3, #0]
 800fdca:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 800fdce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800fdd0:	6878      	ldr	r0, [r7, #4]
 800fdd2:	f000 fa41 	bl	8010258 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 800fdd6:	687b      	ldr	r3, [r7, #4]
 800fdd8:	681b      	ldr	r3, [r3, #0]
 800fdda:	691b      	ldr	r3, [r3, #16]
 800fddc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800fde0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800fde4:	d10f      	bne.n	800fe06 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 800fde6:	687b      	ldr	r3, [r7, #4]
 800fde8:	681b      	ldr	r3, [r3, #0]
 800fdea:	68db      	ldr	r3, [r3, #12]
 800fdec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800fdf0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800fdf4:	d107      	bne.n	800fe06 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 800fdf6:	687b      	ldr	r3, [r7, #4]
 800fdf8:	681b      	ldr	r3, [r3, #0]
 800fdfa:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 800fdfe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800fe00:	6878      	ldr	r0, [r7, #4]
 800fe02:	f000 fa33 	bl	801026c <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 800fe06:	687b      	ldr	r3, [r7, #4]
 800fe08:	681b      	ldr	r3, [r3, #0]
 800fe0a:	691b      	ldr	r3, [r3, #16]
 800fe0c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800fe10:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800fe14:	d10f      	bne.n	800fe36 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 800fe16:	687b      	ldr	r3, [r7, #4]
 800fe18:	681b      	ldr	r3, [r3, #0]
 800fe1a:	68db      	ldr	r3, [r3, #12]
 800fe1c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800fe20:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800fe24:	d107      	bne.n	800fe36 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 800fe26:	687b      	ldr	r3, [r7, #4]
 800fe28:	681b      	ldr	r3, [r3, #0]
 800fe2a:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 800fe2e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800fe30:	6878      	ldr	r0, [r7, #4]
 800fe32:	f000 fa25 	bl	8010280 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800fe36:	bf00      	nop
 800fe38:	3708      	adds	r7, #8
 800fe3a:	46bd      	mov	sp, r7
 800fe3c:	bd80      	pop	{r7, pc}

0800fe3e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800fe3e:	b480      	push	{r7}
 800fe40:	b083      	sub	sp, #12
 800fe42:	af00      	add	r7, sp, #0
 800fe44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800fe46:	bf00      	nop
 800fe48:	370c      	adds	r7, #12
 800fe4a:	46bd      	mov	sp, r7
 800fe4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe50:	4770      	bx	lr

0800fe52 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800fe52:	b480      	push	{r7}
 800fe54:	b083      	sub	sp, #12
 800fe56:	af00      	add	r7, sp, #0
 800fe58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800fe5a:	bf00      	nop
 800fe5c:	370c      	adds	r7, #12
 800fe5e:	46bd      	mov	sp, r7
 800fe60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe64:	4770      	bx	lr

0800fe66 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800fe66:	b480      	push	{r7}
 800fe68:	b083      	sub	sp, #12
 800fe6a:	af00      	add	r7, sp, #0
 800fe6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800fe6e:	bf00      	nop
 800fe70:	370c      	adds	r7, #12
 800fe72:	46bd      	mov	sp, r7
 800fe74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe78:	4770      	bx	lr

0800fe7a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800fe7a:	b480      	push	{r7}
 800fe7c:	b083      	sub	sp, #12
 800fe7e:	af00      	add	r7, sp, #0
 800fe80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800fe82:	bf00      	nop
 800fe84:	370c      	adds	r7, #12
 800fe86:	46bd      	mov	sp, r7
 800fe88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe8c:	4770      	bx	lr
	...

0800fe90 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800fe90:	b480      	push	{r7}
 800fe92:	b085      	sub	sp, #20
 800fe94:	af00      	add	r7, sp, #0
 800fe96:	6078      	str	r0, [r7, #4]
 800fe98:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800fe9a:	687b      	ldr	r3, [r7, #4]
 800fe9c:	681b      	ldr	r3, [r3, #0]
 800fe9e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800fea0:	687b      	ldr	r3, [r7, #4]
 800fea2:	4a68      	ldr	r2, [pc, #416]	; (8010044 <TIM_Base_SetConfig+0x1b4>)
 800fea4:	4293      	cmp	r3, r2
 800fea6:	d02b      	beq.n	800ff00 <TIM_Base_SetConfig+0x70>
 800fea8:	687b      	ldr	r3, [r7, #4]
 800feaa:	4a67      	ldr	r2, [pc, #412]	; (8010048 <TIM_Base_SetConfig+0x1b8>)
 800feac:	4293      	cmp	r3, r2
 800feae:	d027      	beq.n	800ff00 <TIM_Base_SetConfig+0x70>
 800feb0:	687b      	ldr	r3, [r7, #4]
 800feb2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800feb6:	d023      	beq.n	800ff00 <TIM_Base_SetConfig+0x70>
 800feb8:	687b      	ldr	r3, [r7, #4]
 800feba:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800febe:	d01f      	beq.n	800ff00 <TIM_Base_SetConfig+0x70>
 800fec0:	687b      	ldr	r3, [r7, #4]
 800fec2:	4a62      	ldr	r2, [pc, #392]	; (801004c <TIM_Base_SetConfig+0x1bc>)
 800fec4:	4293      	cmp	r3, r2
 800fec6:	d01b      	beq.n	800ff00 <TIM_Base_SetConfig+0x70>
 800fec8:	687b      	ldr	r3, [r7, #4]
 800feca:	4a61      	ldr	r2, [pc, #388]	; (8010050 <TIM_Base_SetConfig+0x1c0>)
 800fecc:	4293      	cmp	r3, r2
 800fece:	d017      	beq.n	800ff00 <TIM_Base_SetConfig+0x70>
 800fed0:	687b      	ldr	r3, [r7, #4]
 800fed2:	4a60      	ldr	r2, [pc, #384]	; (8010054 <TIM_Base_SetConfig+0x1c4>)
 800fed4:	4293      	cmp	r3, r2
 800fed6:	d013      	beq.n	800ff00 <TIM_Base_SetConfig+0x70>
 800fed8:	687b      	ldr	r3, [r7, #4]
 800feda:	4a5f      	ldr	r2, [pc, #380]	; (8010058 <TIM_Base_SetConfig+0x1c8>)
 800fedc:	4293      	cmp	r3, r2
 800fede:	d00f      	beq.n	800ff00 <TIM_Base_SetConfig+0x70>
 800fee0:	687b      	ldr	r3, [r7, #4]
 800fee2:	4a5e      	ldr	r2, [pc, #376]	; (801005c <TIM_Base_SetConfig+0x1cc>)
 800fee4:	4293      	cmp	r3, r2
 800fee6:	d00b      	beq.n	800ff00 <TIM_Base_SetConfig+0x70>
 800fee8:	687b      	ldr	r3, [r7, #4]
 800feea:	4a5d      	ldr	r2, [pc, #372]	; (8010060 <TIM_Base_SetConfig+0x1d0>)
 800feec:	4293      	cmp	r3, r2
 800feee:	d007      	beq.n	800ff00 <TIM_Base_SetConfig+0x70>
 800fef0:	687b      	ldr	r3, [r7, #4]
 800fef2:	4a5c      	ldr	r2, [pc, #368]	; (8010064 <TIM_Base_SetConfig+0x1d4>)
 800fef4:	4293      	cmp	r3, r2
 800fef6:	d003      	beq.n	800ff00 <TIM_Base_SetConfig+0x70>
 800fef8:	687b      	ldr	r3, [r7, #4]
 800fefa:	4a5b      	ldr	r2, [pc, #364]	; (8010068 <TIM_Base_SetConfig+0x1d8>)
 800fefc:	4293      	cmp	r3, r2
 800fefe:	d108      	bne.n	800ff12 <TIM_Base_SetConfig+0x82>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ff00:	68fb      	ldr	r3, [r7, #12]
 800ff02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ff06:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800ff08:	683b      	ldr	r3, [r7, #0]
 800ff0a:	685b      	ldr	r3, [r3, #4]
 800ff0c:	68fa      	ldr	r2, [r7, #12]
 800ff0e:	4313      	orrs	r3, r2
 800ff10:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800ff12:	687b      	ldr	r3, [r7, #4]
 800ff14:	4a4b      	ldr	r2, [pc, #300]	; (8010044 <TIM_Base_SetConfig+0x1b4>)
 800ff16:	4293      	cmp	r3, r2
 800ff18:	d043      	beq.n	800ffa2 <TIM_Base_SetConfig+0x112>
 800ff1a:	687b      	ldr	r3, [r7, #4]
 800ff1c:	4a4a      	ldr	r2, [pc, #296]	; (8010048 <TIM_Base_SetConfig+0x1b8>)
 800ff1e:	4293      	cmp	r3, r2
 800ff20:	d03f      	beq.n	800ffa2 <TIM_Base_SetConfig+0x112>
 800ff22:	687b      	ldr	r3, [r7, #4]
 800ff24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ff28:	d03b      	beq.n	800ffa2 <TIM_Base_SetConfig+0x112>
 800ff2a:	687b      	ldr	r3, [r7, #4]
 800ff2c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800ff30:	d037      	beq.n	800ffa2 <TIM_Base_SetConfig+0x112>
 800ff32:	687b      	ldr	r3, [r7, #4]
 800ff34:	4a45      	ldr	r2, [pc, #276]	; (801004c <TIM_Base_SetConfig+0x1bc>)
 800ff36:	4293      	cmp	r3, r2
 800ff38:	d033      	beq.n	800ffa2 <TIM_Base_SetConfig+0x112>
 800ff3a:	687b      	ldr	r3, [r7, #4]
 800ff3c:	4a44      	ldr	r2, [pc, #272]	; (8010050 <TIM_Base_SetConfig+0x1c0>)
 800ff3e:	4293      	cmp	r3, r2
 800ff40:	d02f      	beq.n	800ffa2 <TIM_Base_SetConfig+0x112>
 800ff42:	687b      	ldr	r3, [r7, #4]
 800ff44:	4a43      	ldr	r2, [pc, #268]	; (8010054 <TIM_Base_SetConfig+0x1c4>)
 800ff46:	4293      	cmp	r3, r2
 800ff48:	d02b      	beq.n	800ffa2 <TIM_Base_SetConfig+0x112>
 800ff4a:	687b      	ldr	r3, [r7, #4]
 800ff4c:	4a42      	ldr	r2, [pc, #264]	; (8010058 <TIM_Base_SetConfig+0x1c8>)
 800ff4e:	4293      	cmp	r3, r2
 800ff50:	d027      	beq.n	800ffa2 <TIM_Base_SetConfig+0x112>
 800ff52:	687b      	ldr	r3, [r7, #4]
 800ff54:	4a41      	ldr	r2, [pc, #260]	; (801005c <TIM_Base_SetConfig+0x1cc>)
 800ff56:	4293      	cmp	r3, r2
 800ff58:	d023      	beq.n	800ffa2 <TIM_Base_SetConfig+0x112>
 800ff5a:	687b      	ldr	r3, [r7, #4]
 800ff5c:	4a40      	ldr	r2, [pc, #256]	; (8010060 <TIM_Base_SetConfig+0x1d0>)
 800ff5e:	4293      	cmp	r3, r2
 800ff60:	d01f      	beq.n	800ffa2 <TIM_Base_SetConfig+0x112>
 800ff62:	687b      	ldr	r3, [r7, #4]
 800ff64:	4a3f      	ldr	r2, [pc, #252]	; (8010064 <TIM_Base_SetConfig+0x1d4>)
 800ff66:	4293      	cmp	r3, r2
 800ff68:	d01b      	beq.n	800ffa2 <TIM_Base_SetConfig+0x112>
 800ff6a:	687b      	ldr	r3, [r7, #4]
 800ff6c:	4a3e      	ldr	r2, [pc, #248]	; (8010068 <TIM_Base_SetConfig+0x1d8>)
 800ff6e:	4293      	cmp	r3, r2
 800ff70:	d017      	beq.n	800ffa2 <TIM_Base_SetConfig+0x112>
 800ff72:	687b      	ldr	r3, [r7, #4]
 800ff74:	4a3d      	ldr	r2, [pc, #244]	; (801006c <TIM_Base_SetConfig+0x1dc>)
 800ff76:	4293      	cmp	r3, r2
 800ff78:	d013      	beq.n	800ffa2 <TIM_Base_SetConfig+0x112>
 800ff7a:	687b      	ldr	r3, [r7, #4]
 800ff7c:	4a3c      	ldr	r2, [pc, #240]	; (8010070 <TIM_Base_SetConfig+0x1e0>)
 800ff7e:	4293      	cmp	r3, r2
 800ff80:	d00f      	beq.n	800ffa2 <TIM_Base_SetConfig+0x112>
 800ff82:	687b      	ldr	r3, [r7, #4]
 800ff84:	4a3b      	ldr	r2, [pc, #236]	; (8010074 <TIM_Base_SetConfig+0x1e4>)
 800ff86:	4293      	cmp	r3, r2
 800ff88:	d00b      	beq.n	800ffa2 <TIM_Base_SetConfig+0x112>
 800ff8a:	687b      	ldr	r3, [r7, #4]
 800ff8c:	4a3a      	ldr	r2, [pc, #232]	; (8010078 <TIM_Base_SetConfig+0x1e8>)
 800ff8e:	4293      	cmp	r3, r2
 800ff90:	d007      	beq.n	800ffa2 <TIM_Base_SetConfig+0x112>
 800ff92:	687b      	ldr	r3, [r7, #4]
 800ff94:	4a39      	ldr	r2, [pc, #228]	; (801007c <TIM_Base_SetConfig+0x1ec>)
 800ff96:	4293      	cmp	r3, r2
 800ff98:	d003      	beq.n	800ffa2 <TIM_Base_SetConfig+0x112>
 800ff9a:	687b      	ldr	r3, [r7, #4]
 800ff9c:	4a38      	ldr	r2, [pc, #224]	; (8010080 <TIM_Base_SetConfig+0x1f0>)
 800ff9e:	4293      	cmp	r3, r2
 800ffa0:	d108      	bne.n	800ffb4 <TIM_Base_SetConfig+0x124>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800ffa2:	68fb      	ldr	r3, [r7, #12]
 800ffa4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ffa8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ffaa:	683b      	ldr	r3, [r7, #0]
 800ffac:	68db      	ldr	r3, [r3, #12]
 800ffae:	68fa      	ldr	r2, [r7, #12]
 800ffb0:	4313      	orrs	r3, r2
 800ffb2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ffb4:	68fb      	ldr	r3, [r7, #12]
 800ffb6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800ffba:	683b      	ldr	r3, [r7, #0]
 800ffbc:	695b      	ldr	r3, [r3, #20]
 800ffbe:	4313      	orrs	r3, r2
 800ffc0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800ffc2:	687b      	ldr	r3, [r7, #4]
 800ffc4:	68fa      	ldr	r2, [r7, #12]
 800ffc6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ffc8:	683b      	ldr	r3, [r7, #0]
 800ffca:	689a      	ldr	r2, [r3, #8]
 800ffcc:	687b      	ldr	r3, [r7, #4]
 800ffce:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800ffd0:	683b      	ldr	r3, [r7, #0]
 800ffd2:	681a      	ldr	r2, [r3, #0]
 800ffd4:	687b      	ldr	r3, [r7, #4]
 800ffd6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800ffd8:	687b      	ldr	r3, [r7, #4]
 800ffda:	4a1a      	ldr	r2, [pc, #104]	; (8010044 <TIM_Base_SetConfig+0x1b4>)
 800ffdc:	4293      	cmp	r3, r2
 800ffde:	d023      	beq.n	8010028 <TIM_Base_SetConfig+0x198>
 800ffe0:	687b      	ldr	r3, [r7, #4]
 800ffe2:	4a19      	ldr	r2, [pc, #100]	; (8010048 <TIM_Base_SetConfig+0x1b8>)
 800ffe4:	4293      	cmp	r3, r2
 800ffe6:	d01f      	beq.n	8010028 <TIM_Base_SetConfig+0x198>
 800ffe8:	687b      	ldr	r3, [r7, #4]
 800ffea:	4a1e      	ldr	r2, [pc, #120]	; (8010064 <TIM_Base_SetConfig+0x1d4>)
 800ffec:	4293      	cmp	r3, r2
 800ffee:	d01b      	beq.n	8010028 <TIM_Base_SetConfig+0x198>
 800fff0:	687b      	ldr	r3, [r7, #4]
 800fff2:	4a1d      	ldr	r2, [pc, #116]	; (8010068 <TIM_Base_SetConfig+0x1d8>)
 800fff4:	4293      	cmp	r3, r2
 800fff6:	d017      	beq.n	8010028 <TIM_Base_SetConfig+0x198>
 800fff8:	687b      	ldr	r3, [r7, #4]
 800fffa:	4a1c      	ldr	r2, [pc, #112]	; (801006c <TIM_Base_SetConfig+0x1dc>)
 800fffc:	4293      	cmp	r3, r2
 800fffe:	d013      	beq.n	8010028 <TIM_Base_SetConfig+0x198>
 8010000:	687b      	ldr	r3, [r7, #4]
 8010002:	4a1b      	ldr	r2, [pc, #108]	; (8010070 <TIM_Base_SetConfig+0x1e0>)
 8010004:	4293      	cmp	r3, r2
 8010006:	d00f      	beq.n	8010028 <TIM_Base_SetConfig+0x198>
 8010008:	687b      	ldr	r3, [r7, #4]
 801000a:	4a1a      	ldr	r2, [pc, #104]	; (8010074 <TIM_Base_SetConfig+0x1e4>)
 801000c:	4293      	cmp	r3, r2
 801000e:	d00b      	beq.n	8010028 <TIM_Base_SetConfig+0x198>
 8010010:	687b      	ldr	r3, [r7, #4]
 8010012:	4a19      	ldr	r2, [pc, #100]	; (8010078 <TIM_Base_SetConfig+0x1e8>)
 8010014:	4293      	cmp	r3, r2
 8010016:	d007      	beq.n	8010028 <TIM_Base_SetConfig+0x198>
 8010018:	687b      	ldr	r3, [r7, #4]
 801001a:	4a18      	ldr	r2, [pc, #96]	; (801007c <TIM_Base_SetConfig+0x1ec>)
 801001c:	4293      	cmp	r3, r2
 801001e:	d003      	beq.n	8010028 <TIM_Base_SetConfig+0x198>
 8010020:	687b      	ldr	r3, [r7, #4]
 8010022:	4a17      	ldr	r2, [pc, #92]	; (8010080 <TIM_Base_SetConfig+0x1f0>)
 8010024:	4293      	cmp	r3, r2
 8010026:	d103      	bne.n	8010030 <TIM_Base_SetConfig+0x1a0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8010028:	683b      	ldr	r3, [r7, #0]
 801002a:	691a      	ldr	r2, [r3, #16]
 801002c:	687b      	ldr	r3, [r7, #4]
 801002e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8010030:	687b      	ldr	r3, [r7, #4]
 8010032:	2201      	movs	r2, #1
 8010034:	615a      	str	r2, [r3, #20]
}
 8010036:	bf00      	nop
 8010038:	3714      	adds	r7, #20
 801003a:	46bd      	mov	sp, r7
 801003c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010040:	4770      	bx	lr
 8010042:	bf00      	nop
 8010044:	40012c00 	.word	0x40012c00
 8010048:	50012c00 	.word	0x50012c00
 801004c:	40000400 	.word	0x40000400
 8010050:	50000400 	.word	0x50000400
 8010054:	40000800 	.word	0x40000800
 8010058:	50000800 	.word	0x50000800
 801005c:	40000c00 	.word	0x40000c00
 8010060:	50000c00 	.word	0x50000c00
 8010064:	40013400 	.word	0x40013400
 8010068:	50013400 	.word	0x50013400
 801006c:	40014000 	.word	0x40014000
 8010070:	50014000 	.word	0x50014000
 8010074:	40014400 	.word	0x40014400
 8010078:	50014400 	.word	0x50014400
 801007c:	40014800 	.word	0x40014800
 8010080:	50014800 	.word	0x50014800

08010084 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8010084:	b480      	push	{r7}
 8010086:	b085      	sub	sp, #20
 8010088:	af00      	add	r7, sp, #0
 801008a:	6078      	str	r0, [r7, #4]
 801008c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 801008e:	687b      	ldr	r3, [r7, #4]
 8010090:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8010094:	2b01      	cmp	r3, #1
 8010096:	d101      	bne.n	801009c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8010098:	2302      	movs	r3, #2
 801009a:	e097      	b.n	80101cc <HAL_TIMEx_MasterConfigSynchronization+0x148>
 801009c:	687b      	ldr	r3, [r7, #4]
 801009e:	2201      	movs	r2, #1
 80100a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80100a4:	687b      	ldr	r3, [r7, #4]
 80100a6:	2202      	movs	r2, #2
 80100a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80100ac:	687b      	ldr	r3, [r7, #4]
 80100ae:	681b      	ldr	r3, [r3, #0]
 80100b0:	685b      	ldr	r3, [r3, #4]
 80100b2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80100b4:	687b      	ldr	r3, [r7, #4]
 80100b6:	681b      	ldr	r3, [r3, #0]
 80100b8:	689b      	ldr	r3, [r3, #8]
 80100ba:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80100bc:	687b      	ldr	r3, [r7, #4]
 80100be:	681b      	ldr	r3, [r3, #0]
 80100c0:	4a45      	ldr	r2, [pc, #276]	; (80101d8 <HAL_TIMEx_MasterConfigSynchronization+0x154>)
 80100c2:	4293      	cmp	r3, r2
 80100c4:	d00e      	beq.n	80100e4 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 80100c6:	687b      	ldr	r3, [r7, #4]
 80100c8:	681b      	ldr	r3, [r3, #0]
 80100ca:	4a44      	ldr	r2, [pc, #272]	; (80101dc <HAL_TIMEx_MasterConfigSynchronization+0x158>)
 80100cc:	4293      	cmp	r3, r2
 80100ce:	d009      	beq.n	80100e4 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 80100d0:	687b      	ldr	r3, [r7, #4]
 80100d2:	681b      	ldr	r3, [r3, #0]
 80100d4:	4a42      	ldr	r2, [pc, #264]	; (80101e0 <HAL_TIMEx_MasterConfigSynchronization+0x15c>)
 80100d6:	4293      	cmp	r3, r2
 80100d8:	d004      	beq.n	80100e4 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 80100da:	687b      	ldr	r3, [r7, #4]
 80100dc:	681b      	ldr	r3, [r3, #0]
 80100de:	4a41      	ldr	r2, [pc, #260]	; (80101e4 <HAL_TIMEx_MasterConfigSynchronization+0x160>)
 80100e0:	4293      	cmp	r3, r2
 80100e2:	d108      	bne.n	80100f6 <HAL_TIMEx_MasterConfigSynchronization+0x72>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80100e4:	68fb      	ldr	r3, [r7, #12]
 80100e6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80100ea:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80100ec:	683b      	ldr	r3, [r7, #0]
 80100ee:	685b      	ldr	r3, [r3, #4]
 80100f0:	68fa      	ldr	r2, [r7, #12]
 80100f2:	4313      	orrs	r3, r2
 80100f4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80100f6:	68fb      	ldr	r3, [r7, #12]
 80100f8:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80100fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010100:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8010102:	683b      	ldr	r3, [r7, #0]
 8010104:	681b      	ldr	r3, [r3, #0]
 8010106:	68fa      	ldr	r2, [r7, #12]
 8010108:	4313      	orrs	r3, r2
 801010a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 801010c:	687b      	ldr	r3, [r7, #4]
 801010e:	681b      	ldr	r3, [r3, #0]
 8010110:	68fa      	ldr	r2, [r7, #12]
 8010112:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8010114:	687b      	ldr	r3, [r7, #4]
 8010116:	681b      	ldr	r3, [r3, #0]
 8010118:	4a2f      	ldr	r2, [pc, #188]	; (80101d8 <HAL_TIMEx_MasterConfigSynchronization+0x154>)
 801011a:	4293      	cmp	r3, r2
 801011c:	d040      	beq.n	80101a0 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 801011e:	687b      	ldr	r3, [r7, #4]
 8010120:	681b      	ldr	r3, [r3, #0]
 8010122:	4a2e      	ldr	r2, [pc, #184]	; (80101dc <HAL_TIMEx_MasterConfigSynchronization+0x158>)
 8010124:	4293      	cmp	r3, r2
 8010126:	d03b      	beq.n	80101a0 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8010128:	687b      	ldr	r3, [r7, #4]
 801012a:	681b      	ldr	r3, [r3, #0]
 801012c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010130:	d036      	beq.n	80101a0 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8010132:	687b      	ldr	r3, [r7, #4]
 8010134:	681b      	ldr	r3, [r3, #0]
 8010136:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801013a:	d031      	beq.n	80101a0 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 801013c:	687b      	ldr	r3, [r7, #4]
 801013e:	681b      	ldr	r3, [r3, #0]
 8010140:	4a29      	ldr	r2, [pc, #164]	; (80101e8 <HAL_TIMEx_MasterConfigSynchronization+0x164>)
 8010142:	4293      	cmp	r3, r2
 8010144:	d02c      	beq.n	80101a0 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8010146:	687b      	ldr	r3, [r7, #4]
 8010148:	681b      	ldr	r3, [r3, #0]
 801014a:	4a28      	ldr	r2, [pc, #160]	; (80101ec <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 801014c:	4293      	cmp	r3, r2
 801014e:	d027      	beq.n	80101a0 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8010150:	687b      	ldr	r3, [r7, #4]
 8010152:	681b      	ldr	r3, [r3, #0]
 8010154:	4a26      	ldr	r2, [pc, #152]	; (80101f0 <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 8010156:	4293      	cmp	r3, r2
 8010158:	d022      	beq.n	80101a0 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 801015a:	687b      	ldr	r3, [r7, #4]
 801015c:	681b      	ldr	r3, [r3, #0]
 801015e:	4a25      	ldr	r2, [pc, #148]	; (80101f4 <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 8010160:	4293      	cmp	r3, r2
 8010162:	d01d      	beq.n	80101a0 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8010164:	687b      	ldr	r3, [r7, #4]
 8010166:	681b      	ldr	r3, [r3, #0]
 8010168:	4a23      	ldr	r2, [pc, #140]	; (80101f8 <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 801016a:	4293      	cmp	r3, r2
 801016c:	d018      	beq.n	80101a0 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 801016e:	687b      	ldr	r3, [r7, #4]
 8010170:	681b      	ldr	r3, [r3, #0]
 8010172:	4a22      	ldr	r2, [pc, #136]	; (80101fc <HAL_TIMEx_MasterConfigSynchronization+0x178>)
 8010174:	4293      	cmp	r3, r2
 8010176:	d013      	beq.n	80101a0 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8010178:	687b      	ldr	r3, [r7, #4]
 801017a:	681b      	ldr	r3, [r3, #0]
 801017c:	4a18      	ldr	r2, [pc, #96]	; (80101e0 <HAL_TIMEx_MasterConfigSynchronization+0x15c>)
 801017e:	4293      	cmp	r3, r2
 8010180:	d00e      	beq.n	80101a0 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8010182:	687b      	ldr	r3, [r7, #4]
 8010184:	681b      	ldr	r3, [r3, #0]
 8010186:	4a17      	ldr	r2, [pc, #92]	; (80101e4 <HAL_TIMEx_MasterConfigSynchronization+0x160>)
 8010188:	4293      	cmp	r3, r2
 801018a:	d009      	beq.n	80101a0 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 801018c:	687b      	ldr	r3, [r7, #4]
 801018e:	681b      	ldr	r3, [r3, #0]
 8010190:	4a1b      	ldr	r2, [pc, #108]	; (8010200 <HAL_TIMEx_MasterConfigSynchronization+0x17c>)
 8010192:	4293      	cmp	r3, r2
 8010194:	d004      	beq.n	80101a0 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8010196:	687b      	ldr	r3, [r7, #4]
 8010198:	681b      	ldr	r3, [r3, #0]
 801019a:	4a1a      	ldr	r2, [pc, #104]	; (8010204 <HAL_TIMEx_MasterConfigSynchronization+0x180>)
 801019c:	4293      	cmp	r3, r2
 801019e:	d10c      	bne.n	80101ba <HAL_TIMEx_MasterConfigSynchronization+0x136>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80101a0:	68bb      	ldr	r3, [r7, #8]
 80101a2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80101a6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80101a8:	683b      	ldr	r3, [r7, #0]
 80101aa:	689b      	ldr	r3, [r3, #8]
 80101ac:	68ba      	ldr	r2, [r7, #8]
 80101ae:	4313      	orrs	r3, r2
 80101b0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80101b2:	687b      	ldr	r3, [r7, #4]
 80101b4:	681b      	ldr	r3, [r3, #0]
 80101b6:	68ba      	ldr	r2, [r7, #8]
 80101b8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80101ba:	687b      	ldr	r3, [r7, #4]
 80101bc:	2201      	movs	r2, #1
 80101be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80101c2:	687b      	ldr	r3, [r7, #4]
 80101c4:	2200      	movs	r2, #0
 80101c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80101ca:	2300      	movs	r3, #0
}
 80101cc:	4618      	mov	r0, r3
 80101ce:	3714      	adds	r7, #20
 80101d0:	46bd      	mov	sp, r7
 80101d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101d6:	4770      	bx	lr
 80101d8:	40012c00 	.word	0x40012c00
 80101dc:	50012c00 	.word	0x50012c00
 80101e0:	40013400 	.word	0x40013400
 80101e4:	50013400 	.word	0x50013400
 80101e8:	40000400 	.word	0x40000400
 80101ec:	50000400 	.word	0x50000400
 80101f0:	40000800 	.word	0x40000800
 80101f4:	50000800 	.word	0x50000800
 80101f8:	40000c00 	.word	0x40000c00
 80101fc:	50000c00 	.word	0x50000c00
 8010200:	40014000 	.word	0x40014000
 8010204:	50014000 	.word	0x50014000

08010208 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8010208:	b480      	push	{r7}
 801020a:	b083      	sub	sp, #12
 801020c:	af00      	add	r7, sp, #0
 801020e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8010210:	bf00      	nop
 8010212:	370c      	adds	r7, #12
 8010214:	46bd      	mov	sp, r7
 8010216:	f85d 7b04 	ldr.w	r7, [sp], #4
 801021a:	4770      	bx	lr

0801021c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 801021c:	b480      	push	{r7}
 801021e:	b083      	sub	sp, #12
 8010220:	af00      	add	r7, sp, #0
 8010222:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8010224:	bf00      	nop
 8010226:	370c      	adds	r7, #12
 8010228:	46bd      	mov	sp, r7
 801022a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801022e:	4770      	bx	lr

08010230 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8010230:	b480      	push	{r7}
 8010232:	b083      	sub	sp, #12
 8010234:	af00      	add	r7, sp, #0
 8010236:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8010238:	bf00      	nop
 801023a:	370c      	adds	r7, #12
 801023c:	46bd      	mov	sp, r7
 801023e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010242:	4770      	bx	lr

08010244 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8010244:	b480      	push	{r7}
 8010246:	b083      	sub	sp, #12
 8010248:	af00      	add	r7, sp, #0
 801024a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 801024c:	bf00      	nop
 801024e:	370c      	adds	r7, #12
 8010250:	46bd      	mov	sp, r7
 8010252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010256:	4770      	bx	lr

08010258 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8010258:	b480      	push	{r7}
 801025a:	b083      	sub	sp, #12
 801025c:	af00      	add	r7, sp, #0
 801025e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8010260:	bf00      	nop
 8010262:	370c      	adds	r7, #12
 8010264:	46bd      	mov	sp, r7
 8010266:	f85d 7b04 	ldr.w	r7, [sp], #4
 801026a:	4770      	bx	lr

0801026c <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 801026c:	b480      	push	{r7}
 801026e:	b083      	sub	sp, #12
 8010270:	af00      	add	r7, sp, #0
 8010272:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8010274:	bf00      	nop
 8010276:	370c      	adds	r7, #12
 8010278:	46bd      	mov	sp, r7
 801027a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801027e:	4770      	bx	lr

08010280 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8010280:	b480      	push	{r7}
 8010282:	b083      	sub	sp, #12
 8010284:	af00      	add	r7, sp, #0
 8010286:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8010288:	bf00      	nop
 801028a:	370c      	adds	r7, #12
 801028c:	46bd      	mov	sp, r7
 801028e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010292:	4770      	bx	lr

08010294 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8010294:	b580      	push	{r7, lr}
 8010296:	b082      	sub	sp, #8
 8010298:	af00      	add	r7, sp, #0
 801029a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 801029c:	687b      	ldr	r3, [r7, #4]
 801029e:	2b00      	cmp	r3, #0
 80102a0:	d101      	bne.n	80102a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80102a2:	2301      	movs	r3, #1
 80102a4:	e042      	b.n	801032c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80102a6:	687b      	ldr	r3, [r7, #4]
 80102a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80102ac:	2b00      	cmp	r3, #0
 80102ae:	d106      	bne.n	80102be <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80102b0:	687b      	ldr	r3, [r7, #4]
 80102b2:	2200      	movs	r2, #0
 80102b4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80102b8:	6878      	ldr	r0, [r7, #4]
 80102ba:	f7f6 fc95 	bl	8006be8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80102be:	687b      	ldr	r3, [r7, #4]
 80102c0:	2224      	movs	r2, #36	; 0x24
 80102c2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80102c6:	687b      	ldr	r3, [r7, #4]
 80102c8:	681b      	ldr	r3, [r3, #0]
 80102ca:	681a      	ldr	r2, [r3, #0]
 80102cc:	687b      	ldr	r3, [r7, #4]
 80102ce:	681b      	ldr	r3, [r3, #0]
 80102d0:	f022 0201 	bic.w	r2, r2, #1
 80102d4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80102d6:	6878      	ldr	r0, [r7, #4]
 80102d8:	f000 f8d2 	bl	8010480 <UART_SetConfig>
 80102dc:	4603      	mov	r3, r0
 80102de:	2b01      	cmp	r3, #1
 80102e0:	d101      	bne.n	80102e6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80102e2:	2301      	movs	r3, #1
 80102e4:	e022      	b.n	801032c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80102e6:	687b      	ldr	r3, [r7, #4]
 80102e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80102ea:	2b00      	cmp	r3, #0
 80102ec:	d002      	beq.n	80102f4 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80102ee:	6878      	ldr	r0, [r7, #4]
 80102f0:	f000 fa68 	bl	80107c4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80102f4:	687b      	ldr	r3, [r7, #4]
 80102f6:	681b      	ldr	r3, [r3, #0]
 80102f8:	685a      	ldr	r2, [r3, #4]
 80102fa:	687b      	ldr	r3, [r7, #4]
 80102fc:	681b      	ldr	r3, [r3, #0]
 80102fe:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8010302:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8010304:	687b      	ldr	r3, [r7, #4]
 8010306:	681b      	ldr	r3, [r3, #0]
 8010308:	689a      	ldr	r2, [r3, #8]
 801030a:	687b      	ldr	r3, [r7, #4]
 801030c:	681b      	ldr	r3, [r3, #0]
 801030e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8010312:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8010314:	687b      	ldr	r3, [r7, #4]
 8010316:	681b      	ldr	r3, [r3, #0]
 8010318:	681a      	ldr	r2, [r3, #0]
 801031a:	687b      	ldr	r3, [r7, #4]
 801031c:	681b      	ldr	r3, [r3, #0]
 801031e:	f042 0201 	orr.w	r2, r2, #1
 8010322:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8010324:	6878      	ldr	r0, [r7, #4]
 8010326:	f000 faef 	bl	8010908 <UART_CheckIdleState>
 801032a:	4603      	mov	r3, r0
}
 801032c:	4618      	mov	r0, r3
 801032e:	3708      	adds	r7, #8
 8010330:	46bd      	mov	sp, r7
 8010332:	bd80      	pop	{r7, pc}

08010334 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8010334:	b580      	push	{r7, lr}
 8010336:	b08a      	sub	sp, #40	; 0x28
 8010338:	af02      	add	r7, sp, #8
 801033a:	60f8      	str	r0, [r7, #12]
 801033c:	60b9      	str	r1, [r7, #8]
 801033e:	603b      	str	r3, [r7, #0]
 8010340:	4613      	mov	r3, r2
 8010342:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8010344:	68fb      	ldr	r3, [r7, #12]
 8010346:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801034a:	2b20      	cmp	r3, #32
 801034c:	f040 8092 	bne.w	8010474 <HAL_UART_Transmit+0x140>
  {
    if ((pData == NULL) || (Size == 0U))
 8010350:	68bb      	ldr	r3, [r7, #8]
 8010352:	2b00      	cmp	r3, #0
 8010354:	d002      	beq.n	801035c <HAL_UART_Transmit+0x28>
 8010356:	88fb      	ldrh	r3, [r7, #6]
 8010358:	2b00      	cmp	r3, #0
 801035a:	d101      	bne.n	8010360 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 801035c:	2301      	movs	r3, #1
 801035e:	e08a      	b.n	8010476 <HAL_UART_Transmit+0x142>
    }

    __HAL_LOCK(huart);
 8010360:	68fb      	ldr	r3, [r7, #12]
 8010362:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8010366:	2b01      	cmp	r3, #1
 8010368:	d101      	bne.n	801036e <HAL_UART_Transmit+0x3a>
 801036a:	2302      	movs	r3, #2
 801036c:	e083      	b.n	8010476 <HAL_UART_Transmit+0x142>
 801036e:	68fb      	ldr	r3, [r7, #12]
 8010370:	2201      	movs	r2, #1
 8010372:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Disable the UART DMA Tx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8010376:	68fb      	ldr	r3, [r7, #12]
 8010378:	681b      	ldr	r3, [r3, #0]
 801037a:	689b      	ldr	r3, [r3, #8]
 801037c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010380:	2b80      	cmp	r3, #128	; 0x80
 8010382:	d107      	bne.n	8010394 <HAL_UART_Transmit+0x60>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8010384:	68fb      	ldr	r3, [r7, #12]
 8010386:	681b      	ldr	r3, [r3, #0]
 8010388:	689a      	ldr	r2, [r3, #8]
 801038a:	68fb      	ldr	r3, [r7, #12]
 801038c:	681b      	ldr	r3, [r3, #0]
 801038e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8010392:	609a      	str	r2, [r3, #8]
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010394:	68fb      	ldr	r3, [r7, #12]
 8010396:	2200      	movs	r2, #0
 8010398:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 801039c:	68fb      	ldr	r3, [r7, #12]
 801039e:	2221      	movs	r2, #33	; 0x21
 80103a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80103a4:	f7f6 fcf4 	bl	8006d90 <HAL_GetTick>
 80103a8:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80103aa:	68fb      	ldr	r3, [r7, #12]
 80103ac:	88fa      	ldrh	r2, [r7, #6]
 80103ae:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80103b2:	68fb      	ldr	r3, [r7, #12]
 80103b4:	88fa      	ldrh	r2, [r7, #6]
 80103b6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80103ba:	68fb      	ldr	r3, [r7, #12]
 80103bc:	689b      	ldr	r3, [r3, #8]
 80103be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80103c2:	d108      	bne.n	80103d6 <HAL_UART_Transmit+0xa2>
 80103c4:	68fb      	ldr	r3, [r7, #12]
 80103c6:	691b      	ldr	r3, [r3, #16]
 80103c8:	2b00      	cmp	r3, #0
 80103ca:	d104      	bne.n	80103d6 <HAL_UART_Transmit+0xa2>
    {
      pdata8bits  = NULL;
 80103cc:	2300      	movs	r3, #0
 80103ce:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80103d0:	68bb      	ldr	r3, [r7, #8]
 80103d2:	61bb      	str	r3, [r7, #24]
 80103d4:	e003      	b.n	80103de <HAL_UART_Transmit+0xaa>
    }
    else
    {
      pdata8bits  = pData;
 80103d6:	68bb      	ldr	r3, [r7, #8]
 80103d8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80103da:	2300      	movs	r3, #0
 80103dc:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80103de:	68fb      	ldr	r3, [r7, #12]
 80103e0:	2200      	movs	r2, #0
 80103e2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 80103e6:	e02c      	b.n	8010442 <HAL_UART_Transmit+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80103e8:	683b      	ldr	r3, [r7, #0]
 80103ea:	9300      	str	r3, [sp, #0]
 80103ec:	697b      	ldr	r3, [r7, #20]
 80103ee:	2200      	movs	r2, #0
 80103f0:	2180      	movs	r1, #128	; 0x80
 80103f2:	68f8      	ldr	r0, [r7, #12]
 80103f4:	f000 fad3 	bl	801099e <UART_WaitOnFlagUntilTimeout>
 80103f8:	4603      	mov	r3, r0
 80103fa:	2b00      	cmp	r3, #0
 80103fc:	d001      	beq.n	8010402 <HAL_UART_Transmit+0xce>
      {
        return HAL_TIMEOUT;
 80103fe:	2303      	movs	r3, #3
 8010400:	e039      	b.n	8010476 <HAL_UART_Transmit+0x142>
      }
      if (pdata8bits == NULL)
 8010402:	69fb      	ldr	r3, [r7, #28]
 8010404:	2b00      	cmp	r3, #0
 8010406:	d10b      	bne.n	8010420 <HAL_UART_Transmit+0xec>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8010408:	69bb      	ldr	r3, [r7, #24]
 801040a:	881b      	ldrh	r3, [r3, #0]
 801040c:	461a      	mov	r2, r3
 801040e:	68fb      	ldr	r3, [r7, #12]
 8010410:	681b      	ldr	r3, [r3, #0]
 8010412:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8010416:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8010418:	69bb      	ldr	r3, [r7, #24]
 801041a:	3302      	adds	r3, #2
 801041c:	61bb      	str	r3, [r7, #24]
 801041e:	e007      	b.n	8010430 <HAL_UART_Transmit+0xfc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8010420:	69fb      	ldr	r3, [r7, #28]
 8010422:	781a      	ldrb	r2, [r3, #0]
 8010424:	68fb      	ldr	r3, [r7, #12]
 8010426:	681b      	ldr	r3, [r3, #0]
 8010428:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 801042a:	69fb      	ldr	r3, [r7, #28]
 801042c:	3301      	adds	r3, #1
 801042e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8010430:	68fb      	ldr	r3, [r7, #12]
 8010432:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8010436:	b29b      	uxth	r3, r3
 8010438:	3b01      	subs	r3, #1
 801043a:	b29a      	uxth	r2, r3
 801043c:	68fb      	ldr	r3, [r7, #12]
 801043e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8010442:	68fb      	ldr	r3, [r7, #12]
 8010444:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8010448:	b29b      	uxth	r3, r3
 801044a:	2b00      	cmp	r3, #0
 801044c:	d1cc      	bne.n	80103e8 <HAL_UART_Transmit+0xb4>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 801044e:	683b      	ldr	r3, [r7, #0]
 8010450:	9300      	str	r3, [sp, #0]
 8010452:	697b      	ldr	r3, [r7, #20]
 8010454:	2200      	movs	r2, #0
 8010456:	2140      	movs	r1, #64	; 0x40
 8010458:	68f8      	ldr	r0, [r7, #12]
 801045a:	f000 faa0 	bl	801099e <UART_WaitOnFlagUntilTimeout>
 801045e:	4603      	mov	r3, r0
 8010460:	2b00      	cmp	r3, #0
 8010462:	d001      	beq.n	8010468 <HAL_UART_Transmit+0x134>
    {
      return HAL_TIMEOUT;
 8010464:	2303      	movs	r3, #3
 8010466:	e006      	b.n	8010476 <HAL_UART_Transmit+0x142>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8010468:	68fb      	ldr	r3, [r7, #12]
 801046a:	2220      	movs	r2, #32
 801046c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8010470:	2300      	movs	r3, #0
 8010472:	e000      	b.n	8010476 <HAL_UART_Transmit+0x142>
  }
  else
  {
    return HAL_BUSY;
 8010474:	2302      	movs	r3, #2
  }
}
 8010476:	4618      	mov	r0, r3
 8010478:	3720      	adds	r7, #32
 801047a:	46bd      	mov	sp, r7
 801047c:	bd80      	pop	{r7, pc}
	...

08010480 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8010480:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8010484:	b094      	sub	sp, #80	; 0x50
 8010486:	af00      	add	r7, sp, #0
 8010488:	62f8      	str	r0, [r7, #44]	; 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 801048a:	2300      	movs	r3, #0
 801048c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 8010490:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010492:	681a      	ldr	r2, [r3, #0]
 8010494:	4b7e      	ldr	r3, [pc, #504]	; (8010690 <UART_SetConfig+0x210>)
 8010496:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8010498:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801049a:	689a      	ldr	r2, [r3, #8]
 801049c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801049e:	691b      	ldr	r3, [r3, #16]
 80104a0:	431a      	orrs	r2, r3
 80104a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80104a4:	695b      	ldr	r3, [r3, #20]
 80104a6:	431a      	orrs	r2, r3
 80104a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80104aa:	69db      	ldr	r3, [r3, #28]
 80104ac:	4313      	orrs	r3, r2
 80104ae:	64fb      	str	r3, [r7, #76]	; 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80104b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80104b2:	681b      	ldr	r3, [r3, #0]
 80104b4:	681b      	ldr	r3, [r3, #0]
 80104b6:	4977      	ldr	r1, [pc, #476]	; (8010694 <UART_SetConfig+0x214>)
 80104b8:	4019      	ands	r1, r3
 80104ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80104bc:	681a      	ldr	r2, [r3, #0]
 80104be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80104c0:	430b      	orrs	r3, r1
 80104c2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80104c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80104c6:	681b      	ldr	r3, [r3, #0]
 80104c8:	685b      	ldr	r3, [r3, #4]
 80104ca:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80104ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80104d0:	68d9      	ldr	r1, [r3, #12]
 80104d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80104d4:	681a      	ldr	r2, [r3, #0]
 80104d6:	ea40 0301 	orr.w	r3, r0, r1
 80104da:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80104dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80104de:	699b      	ldr	r3, [r3, #24]
 80104e0:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80104e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80104e4:	681a      	ldr	r2, [r3, #0]
 80104e6:	4b6a      	ldr	r3, [pc, #424]	; (8010690 <UART_SetConfig+0x210>)
 80104e8:	429a      	cmp	r2, r3
 80104ea:	d009      	beq.n	8010500 <UART_SetConfig+0x80>
 80104ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80104ee:	681a      	ldr	r2, [r3, #0]
 80104f0:	4b69      	ldr	r3, [pc, #420]	; (8010698 <UART_SetConfig+0x218>)
 80104f2:	429a      	cmp	r2, r3
 80104f4:	d004      	beq.n	8010500 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80104f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80104f8:	6a1a      	ldr	r2, [r3, #32]
 80104fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80104fc:	4313      	orrs	r3, r2
 80104fe:	64fb      	str	r3, [r7, #76]	; 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8010500:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010502:	681b      	ldr	r3, [r3, #0]
 8010504:	689b      	ldr	r3, [r3, #8]
 8010506:	f023 416e 	bic.w	r1, r3, #3992977408	; 0xee000000
 801050a:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
 801050e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010510:	681a      	ldr	r2, [r3, #0]
 8010512:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010514:	430b      	orrs	r3, r1
 8010516:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8010518:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801051a:	681b      	ldr	r3, [r3, #0]
 801051c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801051e:	f023 000f 	bic.w	r0, r3, #15
 8010522:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010524:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8010526:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010528:	681a      	ldr	r2, [r3, #0]
 801052a:	ea40 0301 	orr.w	r3, r0, r1
 801052e:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8010530:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010532:	681a      	ldr	r2, [r3, #0]
 8010534:	4b59      	ldr	r3, [pc, #356]	; (801069c <UART_SetConfig+0x21c>)
 8010536:	429a      	cmp	r2, r3
 8010538:	d102      	bne.n	8010540 <UART_SetConfig+0xc0>
 801053a:	2301      	movs	r3, #1
 801053c:	64bb      	str	r3, [r7, #72]	; 0x48
 801053e:	e029      	b.n	8010594 <UART_SetConfig+0x114>
 8010540:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010542:	681a      	ldr	r2, [r3, #0]
 8010544:	4b56      	ldr	r3, [pc, #344]	; (80106a0 <UART_SetConfig+0x220>)
 8010546:	429a      	cmp	r2, r3
 8010548:	d102      	bne.n	8010550 <UART_SetConfig+0xd0>
 801054a:	2302      	movs	r3, #2
 801054c:	64bb      	str	r3, [r7, #72]	; 0x48
 801054e:	e021      	b.n	8010594 <UART_SetConfig+0x114>
 8010550:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010552:	681a      	ldr	r2, [r3, #0]
 8010554:	4b53      	ldr	r3, [pc, #332]	; (80106a4 <UART_SetConfig+0x224>)
 8010556:	429a      	cmp	r2, r3
 8010558:	d102      	bne.n	8010560 <UART_SetConfig+0xe0>
 801055a:	2304      	movs	r3, #4
 801055c:	64bb      	str	r3, [r7, #72]	; 0x48
 801055e:	e019      	b.n	8010594 <UART_SetConfig+0x114>
 8010560:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010562:	681a      	ldr	r2, [r3, #0]
 8010564:	4b50      	ldr	r3, [pc, #320]	; (80106a8 <UART_SetConfig+0x228>)
 8010566:	429a      	cmp	r2, r3
 8010568:	d102      	bne.n	8010570 <UART_SetConfig+0xf0>
 801056a:	2308      	movs	r3, #8
 801056c:	64bb      	str	r3, [r7, #72]	; 0x48
 801056e:	e011      	b.n	8010594 <UART_SetConfig+0x114>
 8010570:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010572:	681a      	ldr	r2, [r3, #0]
 8010574:	4b4d      	ldr	r3, [pc, #308]	; (80106ac <UART_SetConfig+0x22c>)
 8010576:	429a      	cmp	r2, r3
 8010578:	d102      	bne.n	8010580 <UART_SetConfig+0x100>
 801057a:	2310      	movs	r3, #16
 801057c:	64bb      	str	r3, [r7, #72]	; 0x48
 801057e:	e009      	b.n	8010594 <UART_SetConfig+0x114>
 8010580:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010582:	681a      	ldr	r2, [r3, #0]
 8010584:	4b42      	ldr	r3, [pc, #264]	; (8010690 <UART_SetConfig+0x210>)
 8010586:	429a      	cmp	r2, r3
 8010588:	d102      	bne.n	8010590 <UART_SetConfig+0x110>
 801058a:	2320      	movs	r3, #32
 801058c:	64bb      	str	r3, [r7, #72]	; 0x48
 801058e:	e001      	b.n	8010594 <UART_SetConfig+0x114>
 8010590:	2300      	movs	r3, #0
 8010592:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8010594:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010596:	681a      	ldr	r2, [r3, #0]
 8010598:	4b3d      	ldr	r3, [pc, #244]	; (8010690 <UART_SetConfig+0x210>)
 801059a:	429a      	cmp	r2, r3
 801059c:	d005      	beq.n	80105aa <UART_SetConfig+0x12a>
 801059e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80105a0:	681a      	ldr	r2, [r3, #0]
 80105a2:	4b3d      	ldr	r3, [pc, #244]	; (8010698 <UART_SetConfig+0x218>)
 80105a4:	429a      	cmp	r2, r3
 80105a6:	f040 8085 	bne.w	80106b4 <UART_SetConfig+0x234>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 80105aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80105ac:	2200      	movs	r2, #0
 80105ae:	623b      	str	r3, [r7, #32]
 80105b0:	627a      	str	r2, [r7, #36]	; 0x24
 80105b2:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80105b6:	f7fd fe1f 	bl	800e1f8 <HAL_RCCEx_GetPeriphCLKFreq>
 80105ba:	6438      	str	r0, [r7, #64]	; 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 80105bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80105be:	2b00      	cmp	r3, #0
 80105c0:	f000 80e8 	beq.w	8010794 <UART_SetConfig+0x314>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80105c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80105c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80105c8:	4a39      	ldr	r2, [pc, #228]	; (80106b0 <UART_SetConfig+0x230>)
 80105ca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80105ce:	461a      	mov	r2, r3
 80105d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80105d2:	fbb3 f3f2 	udiv	r3, r3, r2
 80105d6:	637b      	str	r3, [r7, #52]	; 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80105d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80105da:	685a      	ldr	r2, [r3, #4]
 80105dc:	4613      	mov	r3, r2
 80105de:	005b      	lsls	r3, r3, #1
 80105e0:	4413      	add	r3, r2
 80105e2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80105e4:	429a      	cmp	r2, r3
 80105e6:	d305      	bcc.n	80105f4 <UART_SetConfig+0x174>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80105e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80105ea:	685b      	ldr	r3, [r3, #4]
 80105ec:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80105ee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80105f0:	429a      	cmp	r2, r3
 80105f2:	d903      	bls.n	80105fc <UART_SetConfig+0x17c>
      {
        ret = HAL_ERROR;
 80105f4:	2301      	movs	r3, #1
 80105f6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80105fa:	e048      	b.n	801068e <UART_SetConfig+0x20e>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80105fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80105fe:	2200      	movs	r2, #0
 8010600:	61bb      	str	r3, [r7, #24]
 8010602:	61fa      	str	r2, [r7, #28]
 8010604:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010606:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010608:	4a29      	ldr	r2, [pc, #164]	; (80106b0 <UART_SetConfig+0x230>)
 801060a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801060e:	b29b      	uxth	r3, r3
 8010610:	2200      	movs	r2, #0
 8010612:	613b      	str	r3, [r7, #16]
 8010614:	617a      	str	r2, [r7, #20]
 8010616:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 801061a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 801061e:	f7f0 fb65 	bl	8000cec <__aeabi_uldivmod>
 8010622:	4602      	mov	r2, r0
 8010624:	460b      	mov	r3, r1
 8010626:	4610      	mov	r0, r2
 8010628:	4619      	mov	r1, r3
 801062a:	f04f 0200 	mov.w	r2, #0
 801062e:	f04f 0300 	mov.w	r3, #0
 8010632:	020b      	lsls	r3, r1, #8
 8010634:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8010638:	0202      	lsls	r2, r0, #8
 801063a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801063c:	6849      	ldr	r1, [r1, #4]
 801063e:	0849      	lsrs	r1, r1, #1
 8010640:	2000      	movs	r0, #0
 8010642:	460c      	mov	r4, r1
 8010644:	4605      	mov	r5, r0
 8010646:	eb12 0804 	adds.w	r8, r2, r4
 801064a:	eb43 0905 	adc.w	r9, r3, r5
 801064e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010650:	685b      	ldr	r3, [r3, #4]
 8010652:	2200      	movs	r2, #0
 8010654:	60bb      	str	r3, [r7, #8]
 8010656:	60fa      	str	r2, [r7, #12]
 8010658:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 801065c:	4640      	mov	r0, r8
 801065e:	4649      	mov	r1, r9
 8010660:	f7f0 fb44 	bl	8000cec <__aeabi_uldivmod>
 8010664:	4602      	mov	r2, r0
 8010666:	460b      	mov	r3, r1
 8010668:	4613      	mov	r3, r2
 801066a:	63fb      	str	r3, [r7, #60]	; 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 801066c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801066e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8010672:	d308      	bcc.n	8010686 <UART_SetConfig+0x206>
 8010674:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010676:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801067a:	d204      	bcs.n	8010686 <UART_SetConfig+0x206>
        {
          huart->Instance->BRR = usartdiv;
 801067c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801067e:	681b      	ldr	r3, [r3, #0]
 8010680:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8010682:	60da      	str	r2, [r3, #12]
 8010684:	e003      	b.n	801068e <UART_SetConfig+0x20e>
        }
        else
        {
          ret = HAL_ERROR;
 8010686:	2301      	movs	r3, #1
 8010688:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if (pclk != 0U)
 801068c:	e082      	b.n	8010794 <UART_SetConfig+0x314>
 801068e:	e081      	b.n	8010794 <UART_SetConfig+0x314>
 8010690:	46002400 	.word	0x46002400
 8010694:	cfff69f3 	.word	0xcfff69f3
 8010698:	56002400 	.word	0x56002400
 801069c:	40013800 	.word	0x40013800
 80106a0:	40004400 	.word	0x40004400
 80106a4:	40004800 	.word	0x40004800
 80106a8:	40004c00 	.word	0x40004c00
 80106ac:	40005000 	.word	0x40005000
 80106b0:	08014fc0 	.word	0x08014fc0
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80106b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80106b6:	69db      	ldr	r3, [r3, #28]
 80106b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80106bc:	d13c      	bne.n	8010738 <UART_SetConfig+0x2b8>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 80106be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80106c0:	2200      	movs	r2, #0
 80106c2:	603b      	str	r3, [r7, #0]
 80106c4:	607a      	str	r2, [r7, #4]
 80106c6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80106ca:	f7fd fd95 	bl	800e1f8 <HAL_RCCEx_GetPeriphCLKFreq>
 80106ce:	6438      	str	r0, [r7, #64]	; 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80106d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80106d2:	2b00      	cmp	r3, #0
 80106d4:	d05e      	beq.n	8010794 <UART_SetConfig+0x314>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80106d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80106d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80106da:	4a39      	ldr	r2, [pc, #228]	; (80107c0 <UART_SetConfig+0x340>)
 80106dc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80106e0:	461a      	mov	r2, r3
 80106e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80106e4:	fbb3 f3f2 	udiv	r3, r3, r2
 80106e8:	005a      	lsls	r2, r3, #1
 80106ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80106ec:	685b      	ldr	r3, [r3, #4]
 80106ee:	085b      	lsrs	r3, r3, #1
 80106f0:	441a      	add	r2, r3
 80106f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80106f4:	685b      	ldr	r3, [r3, #4]
 80106f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80106fa:	63fb      	str	r3, [r7, #60]	; 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80106fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80106fe:	2b0f      	cmp	r3, #15
 8010700:	d916      	bls.n	8010730 <UART_SetConfig+0x2b0>
 8010702:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010704:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010708:	d212      	bcs.n	8010730 <UART_SetConfig+0x2b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 801070a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801070c:	b29b      	uxth	r3, r3
 801070e:	f023 030f 	bic.w	r3, r3, #15
 8010712:	877b      	strh	r3, [r7, #58]	; 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8010714:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010716:	085b      	lsrs	r3, r3, #1
 8010718:	b29b      	uxth	r3, r3
 801071a:	f003 0307 	and.w	r3, r3, #7
 801071e:	b29a      	uxth	r2, r3
 8010720:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8010722:	4313      	orrs	r3, r2
 8010724:	877b      	strh	r3, [r7, #58]	; 0x3a
        huart->Instance->BRR = brrtemp;
 8010726:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010728:	681b      	ldr	r3, [r3, #0]
 801072a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801072c:	60da      	str	r2, [r3, #12]
 801072e:	e031      	b.n	8010794 <UART_SetConfig+0x314>
      }
      else
      {
        ret = HAL_ERROR;
 8010730:	2301      	movs	r3, #1
 8010732:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8010736:	e02d      	b.n	8010794 <UART_SetConfig+0x314>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8010738:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801073a:	2200      	movs	r2, #0
 801073c:	469a      	mov	sl, r3
 801073e:	4693      	mov	fp, r2
 8010740:	4650      	mov	r0, sl
 8010742:	4659      	mov	r1, fp
 8010744:	f7fd fd58 	bl	800e1f8 <HAL_RCCEx_GetPeriphCLKFreq>
 8010748:	6438      	str	r0, [r7, #64]	; 0x40

    if (pclk != 0U)
 801074a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801074c:	2b00      	cmp	r3, #0
 801074e:	d021      	beq.n	8010794 <UART_SetConfig+0x314>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8010750:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010752:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010754:	4a1a      	ldr	r2, [pc, #104]	; (80107c0 <UART_SetConfig+0x340>)
 8010756:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801075a:	461a      	mov	r2, r3
 801075c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801075e:	fbb3 f2f2 	udiv	r2, r3, r2
 8010762:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010764:	685b      	ldr	r3, [r3, #4]
 8010766:	085b      	lsrs	r3, r3, #1
 8010768:	441a      	add	r2, r3
 801076a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801076c:	685b      	ldr	r3, [r3, #4]
 801076e:	fbb2 f3f3 	udiv	r3, r2, r3
 8010772:	63fb      	str	r3, [r7, #60]	; 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8010774:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010776:	2b0f      	cmp	r3, #15
 8010778:	d909      	bls.n	801078e <UART_SetConfig+0x30e>
 801077a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801077c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010780:	d205      	bcs.n	801078e <UART_SetConfig+0x30e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8010782:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010784:	b29a      	uxth	r2, r3
 8010786:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010788:	681b      	ldr	r3, [r3, #0]
 801078a:	60da      	str	r2, [r3, #12]
 801078c:	e002      	b.n	8010794 <UART_SetConfig+0x314>
      }
      else
      {
        ret = HAL_ERROR;
 801078e:	2301      	movs	r3, #1
 8010790:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8010794:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010796:	2201      	movs	r2, #1
 8010798:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 801079c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801079e:	2201      	movs	r2, #1
 80107a0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80107a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80107a6:	2200      	movs	r2, #0
 80107a8:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80107aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80107ac:	2200      	movs	r2, #0
 80107ae:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80107b0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 80107b4:	4618      	mov	r0, r3
 80107b6:	3750      	adds	r7, #80	; 0x50
 80107b8:	46bd      	mov	sp, r7
 80107ba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80107be:	bf00      	nop
 80107c0:	08014fc0 	.word	0x08014fc0

080107c4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80107c4:	b480      	push	{r7}
 80107c6:	b083      	sub	sp, #12
 80107c8:	af00      	add	r7, sp, #0
 80107ca:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80107cc:	687b      	ldr	r3, [r7, #4]
 80107ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80107d0:	f003 0301 	and.w	r3, r3, #1
 80107d4:	2b00      	cmp	r3, #0
 80107d6:	d00a      	beq.n	80107ee <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80107d8:	687b      	ldr	r3, [r7, #4]
 80107da:	681b      	ldr	r3, [r3, #0]
 80107dc:	685b      	ldr	r3, [r3, #4]
 80107de:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80107e2:	687b      	ldr	r3, [r7, #4]
 80107e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80107e6:	687b      	ldr	r3, [r7, #4]
 80107e8:	681b      	ldr	r3, [r3, #0]
 80107ea:	430a      	orrs	r2, r1
 80107ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80107ee:	687b      	ldr	r3, [r7, #4]
 80107f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80107f2:	f003 0302 	and.w	r3, r3, #2
 80107f6:	2b00      	cmp	r3, #0
 80107f8:	d00a      	beq.n	8010810 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80107fa:	687b      	ldr	r3, [r7, #4]
 80107fc:	681b      	ldr	r3, [r3, #0]
 80107fe:	685b      	ldr	r3, [r3, #4]
 8010800:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8010804:	687b      	ldr	r3, [r7, #4]
 8010806:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8010808:	687b      	ldr	r3, [r7, #4]
 801080a:	681b      	ldr	r3, [r3, #0]
 801080c:	430a      	orrs	r2, r1
 801080e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8010810:	687b      	ldr	r3, [r7, #4]
 8010812:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010814:	f003 0304 	and.w	r3, r3, #4
 8010818:	2b00      	cmp	r3, #0
 801081a:	d00a      	beq.n	8010832 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 801081c:	687b      	ldr	r3, [r7, #4]
 801081e:	681b      	ldr	r3, [r3, #0]
 8010820:	685b      	ldr	r3, [r3, #4]
 8010822:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8010826:	687b      	ldr	r3, [r7, #4]
 8010828:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801082a:	687b      	ldr	r3, [r7, #4]
 801082c:	681b      	ldr	r3, [r3, #0]
 801082e:	430a      	orrs	r2, r1
 8010830:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8010832:	687b      	ldr	r3, [r7, #4]
 8010834:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010836:	f003 0308 	and.w	r3, r3, #8
 801083a:	2b00      	cmp	r3, #0
 801083c:	d00a      	beq.n	8010854 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 801083e:	687b      	ldr	r3, [r7, #4]
 8010840:	681b      	ldr	r3, [r3, #0]
 8010842:	685b      	ldr	r3, [r3, #4]
 8010844:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8010848:	687b      	ldr	r3, [r7, #4]
 801084a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801084c:	687b      	ldr	r3, [r7, #4]
 801084e:	681b      	ldr	r3, [r3, #0]
 8010850:	430a      	orrs	r2, r1
 8010852:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8010854:	687b      	ldr	r3, [r7, #4]
 8010856:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010858:	f003 0310 	and.w	r3, r3, #16
 801085c:	2b00      	cmp	r3, #0
 801085e:	d00a      	beq.n	8010876 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8010860:	687b      	ldr	r3, [r7, #4]
 8010862:	681b      	ldr	r3, [r3, #0]
 8010864:	689b      	ldr	r3, [r3, #8]
 8010866:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 801086a:	687b      	ldr	r3, [r7, #4]
 801086c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801086e:	687b      	ldr	r3, [r7, #4]
 8010870:	681b      	ldr	r3, [r3, #0]
 8010872:	430a      	orrs	r2, r1
 8010874:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8010876:	687b      	ldr	r3, [r7, #4]
 8010878:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801087a:	f003 0320 	and.w	r3, r3, #32
 801087e:	2b00      	cmp	r3, #0
 8010880:	d00a      	beq.n	8010898 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8010882:	687b      	ldr	r3, [r7, #4]
 8010884:	681b      	ldr	r3, [r3, #0]
 8010886:	689b      	ldr	r3, [r3, #8]
 8010888:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 801088c:	687b      	ldr	r3, [r7, #4]
 801088e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8010890:	687b      	ldr	r3, [r7, #4]
 8010892:	681b      	ldr	r3, [r3, #0]
 8010894:	430a      	orrs	r2, r1
 8010896:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8010898:	687b      	ldr	r3, [r7, #4]
 801089a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801089c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80108a0:	2b00      	cmp	r3, #0
 80108a2:	d01a      	beq.n	80108da <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80108a4:	687b      	ldr	r3, [r7, #4]
 80108a6:	681b      	ldr	r3, [r3, #0]
 80108a8:	685b      	ldr	r3, [r3, #4]
 80108aa:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80108ae:	687b      	ldr	r3, [r7, #4]
 80108b0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80108b2:	687b      	ldr	r3, [r7, #4]
 80108b4:	681b      	ldr	r3, [r3, #0]
 80108b6:	430a      	orrs	r2, r1
 80108b8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80108ba:	687b      	ldr	r3, [r7, #4]
 80108bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80108be:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80108c2:	d10a      	bne.n	80108da <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80108c4:	687b      	ldr	r3, [r7, #4]
 80108c6:	681b      	ldr	r3, [r3, #0]
 80108c8:	685b      	ldr	r3, [r3, #4]
 80108ca:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80108ce:	687b      	ldr	r3, [r7, #4]
 80108d0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80108d2:	687b      	ldr	r3, [r7, #4]
 80108d4:	681b      	ldr	r3, [r3, #0]
 80108d6:	430a      	orrs	r2, r1
 80108d8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80108da:	687b      	ldr	r3, [r7, #4]
 80108dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80108de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80108e2:	2b00      	cmp	r3, #0
 80108e4:	d00a      	beq.n	80108fc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80108e6:	687b      	ldr	r3, [r7, #4]
 80108e8:	681b      	ldr	r3, [r3, #0]
 80108ea:	685b      	ldr	r3, [r3, #4]
 80108ec:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80108f0:	687b      	ldr	r3, [r7, #4]
 80108f2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80108f4:	687b      	ldr	r3, [r7, #4]
 80108f6:	681b      	ldr	r3, [r3, #0]
 80108f8:	430a      	orrs	r2, r1
 80108fa:	605a      	str	r2, [r3, #4]
  }
}
 80108fc:	bf00      	nop
 80108fe:	370c      	adds	r7, #12
 8010900:	46bd      	mov	sp, r7
 8010902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010906:	4770      	bx	lr

08010908 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8010908:	b580      	push	{r7, lr}
 801090a:	b086      	sub	sp, #24
 801090c:	af02      	add	r7, sp, #8
 801090e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010910:	687b      	ldr	r3, [r7, #4]
 8010912:	2200      	movs	r2, #0
 8010914:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8010918:	f7f6 fa3a 	bl	8006d90 <HAL_GetTick>
 801091c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 801091e:	687b      	ldr	r3, [r7, #4]
 8010920:	681b      	ldr	r3, [r3, #0]
 8010922:	681b      	ldr	r3, [r3, #0]
 8010924:	f003 0308 	and.w	r3, r3, #8
 8010928:	2b08      	cmp	r3, #8
 801092a:	d10e      	bne.n	801094a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801092c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8010930:	9300      	str	r3, [sp, #0]
 8010932:	68fb      	ldr	r3, [r7, #12]
 8010934:	2200      	movs	r2, #0
 8010936:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 801093a:	6878      	ldr	r0, [r7, #4]
 801093c:	f000 f82f 	bl	801099e <UART_WaitOnFlagUntilTimeout>
 8010940:	4603      	mov	r3, r0
 8010942:	2b00      	cmp	r3, #0
 8010944:	d001      	beq.n	801094a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8010946:	2303      	movs	r3, #3
 8010948:	e025      	b.n	8010996 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 801094a:	687b      	ldr	r3, [r7, #4]
 801094c:	681b      	ldr	r3, [r3, #0]
 801094e:	681b      	ldr	r3, [r3, #0]
 8010950:	f003 0304 	and.w	r3, r3, #4
 8010954:	2b04      	cmp	r3, #4
 8010956:	d10e      	bne.n	8010976 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8010958:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 801095c:	9300      	str	r3, [sp, #0]
 801095e:	68fb      	ldr	r3, [r7, #12]
 8010960:	2200      	movs	r2, #0
 8010962:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8010966:	6878      	ldr	r0, [r7, #4]
 8010968:	f000 f819 	bl	801099e <UART_WaitOnFlagUntilTimeout>
 801096c:	4603      	mov	r3, r0
 801096e:	2b00      	cmp	r3, #0
 8010970:	d001      	beq.n	8010976 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8010972:	2303      	movs	r3, #3
 8010974:	e00f      	b.n	8010996 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8010976:	687b      	ldr	r3, [r7, #4]
 8010978:	2220      	movs	r2, #32
 801097a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 801097e:	687b      	ldr	r3, [r7, #4]
 8010980:	2220      	movs	r2, #32
 8010982:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010986:	687b      	ldr	r3, [r7, #4]
 8010988:	2200      	movs	r2, #0
 801098a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 801098c:	687b      	ldr	r3, [r7, #4]
 801098e:	2200      	movs	r2, #0
 8010990:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8010994:	2300      	movs	r3, #0
}
 8010996:	4618      	mov	r0, r3
 8010998:	3710      	adds	r7, #16
 801099a:	46bd      	mov	sp, r7
 801099c:	bd80      	pop	{r7, pc}

0801099e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 801099e:	b580      	push	{r7, lr}
 80109a0:	b09c      	sub	sp, #112	; 0x70
 80109a2:	af00      	add	r7, sp, #0
 80109a4:	60f8      	str	r0, [r7, #12]
 80109a6:	60b9      	str	r1, [r7, #8]
 80109a8:	603b      	str	r3, [r7, #0]
 80109aa:	4613      	mov	r3, r2
 80109ac:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80109ae:	e0a9      	b.n	8010b04 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80109b0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80109b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80109b6:	f000 80a5 	beq.w	8010b04 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80109ba:	f7f6 f9e9 	bl	8006d90 <HAL_GetTick>
 80109be:	4602      	mov	r2, r0
 80109c0:	683b      	ldr	r3, [r7, #0]
 80109c2:	1ad3      	subs	r3, r2, r3
 80109c4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80109c6:	429a      	cmp	r2, r3
 80109c8:	d302      	bcc.n	80109d0 <UART_WaitOnFlagUntilTimeout+0x32>
 80109ca:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80109cc:	2b00      	cmp	r3, #0
 80109ce:	d140      	bne.n	8010a52 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80109d0:	68fb      	ldr	r3, [r7, #12]
 80109d2:	681b      	ldr	r3, [r3, #0]
 80109d4:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80109d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80109d8:	e853 3f00 	ldrex	r3, [r3]
 80109dc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80109de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80109e0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80109e4:	667b      	str	r3, [r7, #100]	; 0x64
 80109e6:	68fb      	ldr	r3, [r7, #12]
 80109e8:	681b      	ldr	r3, [r3, #0]
 80109ea:	461a      	mov	r2, r3
 80109ec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80109ee:	65fb      	str	r3, [r7, #92]	; 0x5c
 80109f0:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80109f2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80109f4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80109f6:	e841 2300 	strex	r3, r2, [r1]
 80109fa:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80109fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80109fe:	2b00      	cmp	r3, #0
 8010a00:	d1e6      	bne.n	80109d0 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010a02:	68fb      	ldr	r3, [r7, #12]
 8010a04:	681b      	ldr	r3, [r3, #0]
 8010a06:	3308      	adds	r3, #8
 8010a08:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010a0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010a0c:	e853 3f00 	ldrex	r3, [r3]
 8010a10:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8010a12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010a14:	f023 0301 	bic.w	r3, r3, #1
 8010a18:	663b      	str	r3, [r7, #96]	; 0x60
 8010a1a:	68fb      	ldr	r3, [r7, #12]
 8010a1c:	681b      	ldr	r3, [r3, #0]
 8010a1e:	3308      	adds	r3, #8
 8010a20:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8010a22:	64ba      	str	r2, [r7, #72]	; 0x48
 8010a24:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010a26:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8010a28:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010a2a:	e841 2300 	strex	r3, r2, [r1]
 8010a2e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8010a30:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010a32:	2b00      	cmp	r3, #0
 8010a34:	d1e5      	bne.n	8010a02 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8010a36:	68fb      	ldr	r3, [r7, #12]
 8010a38:	2220      	movs	r2, #32
 8010a3a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8010a3e:	68fb      	ldr	r3, [r7, #12]
 8010a40:	2220      	movs	r2, #32
 8010a42:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8010a46:	68fb      	ldr	r3, [r7, #12]
 8010a48:	2200      	movs	r2, #0
 8010a4a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8010a4e:	2303      	movs	r3, #3
 8010a50:	e069      	b.n	8010b26 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8010a52:	68fb      	ldr	r3, [r7, #12]
 8010a54:	681b      	ldr	r3, [r3, #0]
 8010a56:	681b      	ldr	r3, [r3, #0]
 8010a58:	f003 0304 	and.w	r3, r3, #4
 8010a5c:	2b00      	cmp	r3, #0
 8010a5e:	d051      	beq.n	8010b04 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8010a60:	68fb      	ldr	r3, [r7, #12]
 8010a62:	681b      	ldr	r3, [r3, #0]
 8010a64:	69db      	ldr	r3, [r3, #28]
 8010a66:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8010a6a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8010a6e:	d149      	bne.n	8010b04 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8010a70:	68fb      	ldr	r3, [r7, #12]
 8010a72:	681b      	ldr	r3, [r3, #0]
 8010a74:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8010a78:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8010a7a:	68fb      	ldr	r3, [r7, #12]
 8010a7c:	681b      	ldr	r3, [r3, #0]
 8010a7e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010a80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010a82:	e853 3f00 	ldrex	r3, [r3]
 8010a86:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8010a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a8a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8010a8e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8010a90:	68fb      	ldr	r3, [r7, #12]
 8010a92:	681b      	ldr	r3, [r3, #0]
 8010a94:	461a      	mov	r2, r3
 8010a96:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010a98:	637b      	str	r3, [r7, #52]	; 0x34
 8010a9a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010a9c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8010a9e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010aa0:	e841 2300 	strex	r3, r2, [r1]
 8010aa4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8010aa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010aa8:	2b00      	cmp	r3, #0
 8010aaa:	d1e6      	bne.n	8010a7a <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010aac:	68fb      	ldr	r3, [r7, #12]
 8010aae:	681b      	ldr	r3, [r3, #0]
 8010ab0:	3308      	adds	r3, #8
 8010ab2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010ab4:	697b      	ldr	r3, [r7, #20]
 8010ab6:	e853 3f00 	ldrex	r3, [r3]
 8010aba:	613b      	str	r3, [r7, #16]
   return(result);
 8010abc:	693b      	ldr	r3, [r7, #16]
 8010abe:	f023 0301 	bic.w	r3, r3, #1
 8010ac2:	66bb      	str	r3, [r7, #104]	; 0x68
 8010ac4:	68fb      	ldr	r3, [r7, #12]
 8010ac6:	681b      	ldr	r3, [r3, #0]
 8010ac8:	3308      	adds	r3, #8
 8010aca:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8010acc:	623a      	str	r2, [r7, #32]
 8010ace:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010ad0:	69f9      	ldr	r1, [r7, #28]
 8010ad2:	6a3a      	ldr	r2, [r7, #32]
 8010ad4:	e841 2300 	strex	r3, r2, [r1]
 8010ad8:	61bb      	str	r3, [r7, #24]
   return(result);
 8010ada:	69bb      	ldr	r3, [r7, #24]
 8010adc:	2b00      	cmp	r3, #0
 8010ade:	d1e5      	bne.n	8010aac <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8010ae0:	68fb      	ldr	r3, [r7, #12]
 8010ae2:	2220      	movs	r2, #32
 8010ae4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8010ae8:	68fb      	ldr	r3, [r7, #12]
 8010aea:	2220      	movs	r2, #32
 8010aec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8010af0:	68fb      	ldr	r3, [r7, #12]
 8010af2:	2220      	movs	r2, #32
 8010af4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8010af8:	68fb      	ldr	r3, [r7, #12]
 8010afa:	2200      	movs	r2, #0
 8010afc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8010b00:	2303      	movs	r3, #3
 8010b02:	e010      	b.n	8010b26 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8010b04:	68fb      	ldr	r3, [r7, #12]
 8010b06:	681b      	ldr	r3, [r3, #0]
 8010b08:	69da      	ldr	r2, [r3, #28]
 8010b0a:	68bb      	ldr	r3, [r7, #8]
 8010b0c:	4013      	ands	r3, r2
 8010b0e:	68ba      	ldr	r2, [r7, #8]
 8010b10:	429a      	cmp	r2, r3
 8010b12:	bf0c      	ite	eq
 8010b14:	2301      	moveq	r3, #1
 8010b16:	2300      	movne	r3, #0
 8010b18:	b2db      	uxtb	r3, r3
 8010b1a:	461a      	mov	r2, r3
 8010b1c:	79fb      	ldrb	r3, [r7, #7]
 8010b1e:	429a      	cmp	r2, r3
 8010b20:	f43f af46 	beq.w	80109b0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8010b24:	2300      	movs	r3, #0
}
 8010b26:	4618      	mov	r0, r3
 8010b28:	3770      	adds	r7, #112	; 0x70
 8010b2a:	46bd      	mov	sp, r7
 8010b2c:	bd80      	pop	{r7, pc}

08010b2e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8010b2e:	b480      	push	{r7}
 8010b30:	b085      	sub	sp, #20
 8010b32:	af00      	add	r7, sp, #0
 8010b34:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8010b36:	687b      	ldr	r3, [r7, #4]
 8010b38:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8010b3c:	2b01      	cmp	r3, #1
 8010b3e:	d101      	bne.n	8010b44 <HAL_UARTEx_DisableFifoMode+0x16>
 8010b40:	2302      	movs	r3, #2
 8010b42:	e027      	b.n	8010b94 <HAL_UARTEx_DisableFifoMode+0x66>
 8010b44:	687b      	ldr	r3, [r7, #4]
 8010b46:	2201      	movs	r2, #1
 8010b48:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8010b4c:	687b      	ldr	r3, [r7, #4]
 8010b4e:	2224      	movs	r2, #36	; 0x24
 8010b50:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8010b54:	687b      	ldr	r3, [r7, #4]
 8010b56:	681b      	ldr	r3, [r3, #0]
 8010b58:	681b      	ldr	r3, [r3, #0]
 8010b5a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8010b5c:	687b      	ldr	r3, [r7, #4]
 8010b5e:	681b      	ldr	r3, [r3, #0]
 8010b60:	681a      	ldr	r2, [r3, #0]
 8010b62:	687b      	ldr	r3, [r7, #4]
 8010b64:	681b      	ldr	r3, [r3, #0]
 8010b66:	f022 0201 	bic.w	r2, r2, #1
 8010b6a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8010b6c:	68fb      	ldr	r3, [r7, #12]
 8010b6e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8010b72:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8010b74:	687b      	ldr	r3, [r7, #4]
 8010b76:	2200      	movs	r2, #0
 8010b78:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010b7a:	687b      	ldr	r3, [r7, #4]
 8010b7c:	681b      	ldr	r3, [r3, #0]
 8010b7e:	68fa      	ldr	r2, [r7, #12]
 8010b80:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8010b82:	687b      	ldr	r3, [r7, #4]
 8010b84:	2220      	movs	r2, #32
 8010b86:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010b8a:	687b      	ldr	r3, [r7, #4]
 8010b8c:	2200      	movs	r2, #0
 8010b8e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8010b92:	2300      	movs	r3, #0
}
 8010b94:	4618      	mov	r0, r3
 8010b96:	3714      	adds	r7, #20
 8010b98:	46bd      	mov	sp, r7
 8010b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b9e:	4770      	bx	lr

08010ba0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8010ba0:	b580      	push	{r7, lr}
 8010ba2:	b084      	sub	sp, #16
 8010ba4:	af00      	add	r7, sp, #0
 8010ba6:	6078      	str	r0, [r7, #4]
 8010ba8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8010baa:	687b      	ldr	r3, [r7, #4]
 8010bac:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8010bb0:	2b01      	cmp	r3, #1
 8010bb2:	d101      	bne.n	8010bb8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8010bb4:	2302      	movs	r3, #2
 8010bb6:	e02d      	b.n	8010c14 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8010bb8:	687b      	ldr	r3, [r7, #4]
 8010bba:	2201      	movs	r2, #1
 8010bbc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8010bc0:	687b      	ldr	r3, [r7, #4]
 8010bc2:	2224      	movs	r2, #36	; 0x24
 8010bc4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8010bc8:	687b      	ldr	r3, [r7, #4]
 8010bca:	681b      	ldr	r3, [r3, #0]
 8010bcc:	681b      	ldr	r3, [r3, #0]
 8010bce:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8010bd0:	687b      	ldr	r3, [r7, #4]
 8010bd2:	681b      	ldr	r3, [r3, #0]
 8010bd4:	681a      	ldr	r2, [r3, #0]
 8010bd6:	687b      	ldr	r3, [r7, #4]
 8010bd8:	681b      	ldr	r3, [r3, #0]
 8010bda:	f022 0201 	bic.w	r2, r2, #1
 8010bde:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8010be0:	687b      	ldr	r3, [r7, #4]
 8010be2:	681b      	ldr	r3, [r3, #0]
 8010be4:	689b      	ldr	r3, [r3, #8]
 8010be6:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8010bea:	687b      	ldr	r3, [r7, #4]
 8010bec:	681b      	ldr	r3, [r3, #0]
 8010bee:	683a      	ldr	r2, [r7, #0]
 8010bf0:	430a      	orrs	r2, r1
 8010bf2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8010bf4:	6878      	ldr	r0, [r7, #4]
 8010bf6:	f000 f84f 	bl	8010c98 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010bfa:	687b      	ldr	r3, [r7, #4]
 8010bfc:	681b      	ldr	r3, [r3, #0]
 8010bfe:	68fa      	ldr	r2, [r7, #12]
 8010c00:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8010c02:	687b      	ldr	r3, [r7, #4]
 8010c04:	2220      	movs	r2, #32
 8010c06:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010c0a:	687b      	ldr	r3, [r7, #4]
 8010c0c:	2200      	movs	r2, #0
 8010c0e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8010c12:	2300      	movs	r3, #0
}
 8010c14:	4618      	mov	r0, r3
 8010c16:	3710      	adds	r7, #16
 8010c18:	46bd      	mov	sp, r7
 8010c1a:	bd80      	pop	{r7, pc}

08010c1c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8010c1c:	b580      	push	{r7, lr}
 8010c1e:	b084      	sub	sp, #16
 8010c20:	af00      	add	r7, sp, #0
 8010c22:	6078      	str	r0, [r7, #4]
 8010c24:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8010c26:	687b      	ldr	r3, [r7, #4]
 8010c28:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8010c2c:	2b01      	cmp	r3, #1
 8010c2e:	d101      	bne.n	8010c34 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8010c30:	2302      	movs	r3, #2
 8010c32:	e02d      	b.n	8010c90 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8010c34:	687b      	ldr	r3, [r7, #4]
 8010c36:	2201      	movs	r2, #1
 8010c38:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8010c3c:	687b      	ldr	r3, [r7, #4]
 8010c3e:	2224      	movs	r2, #36	; 0x24
 8010c40:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8010c44:	687b      	ldr	r3, [r7, #4]
 8010c46:	681b      	ldr	r3, [r3, #0]
 8010c48:	681b      	ldr	r3, [r3, #0]
 8010c4a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8010c4c:	687b      	ldr	r3, [r7, #4]
 8010c4e:	681b      	ldr	r3, [r3, #0]
 8010c50:	681a      	ldr	r2, [r3, #0]
 8010c52:	687b      	ldr	r3, [r7, #4]
 8010c54:	681b      	ldr	r3, [r3, #0]
 8010c56:	f022 0201 	bic.w	r2, r2, #1
 8010c5a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8010c5c:	687b      	ldr	r3, [r7, #4]
 8010c5e:	681b      	ldr	r3, [r3, #0]
 8010c60:	689b      	ldr	r3, [r3, #8]
 8010c62:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8010c66:	687b      	ldr	r3, [r7, #4]
 8010c68:	681b      	ldr	r3, [r3, #0]
 8010c6a:	683a      	ldr	r2, [r7, #0]
 8010c6c:	430a      	orrs	r2, r1
 8010c6e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8010c70:	6878      	ldr	r0, [r7, #4]
 8010c72:	f000 f811 	bl	8010c98 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010c76:	687b      	ldr	r3, [r7, #4]
 8010c78:	681b      	ldr	r3, [r3, #0]
 8010c7a:	68fa      	ldr	r2, [r7, #12]
 8010c7c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8010c7e:	687b      	ldr	r3, [r7, #4]
 8010c80:	2220      	movs	r2, #32
 8010c82:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010c86:	687b      	ldr	r3, [r7, #4]
 8010c88:	2200      	movs	r2, #0
 8010c8a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8010c8e:	2300      	movs	r3, #0
}
 8010c90:	4618      	mov	r0, r3
 8010c92:	3710      	adds	r7, #16
 8010c94:	46bd      	mov	sp, r7
 8010c96:	bd80      	pop	{r7, pc}

08010c98 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8010c98:	b480      	push	{r7}
 8010c9a:	b085      	sub	sp, #20
 8010c9c:	af00      	add	r7, sp, #0
 8010c9e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8010ca0:	687b      	ldr	r3, [r7, #4]
 8010ca2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010ca4:	2b00      	cmp	r3, #0
 8010ca6:	d108      	bne.n	8010cba <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8010ca8:	687b      	ldr	r3, [r7, #4]
 8010caa:	2201      	movs	r2, #1
 8010cac:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8010cb0:	687b      	ldr	r3, [r7, #4]
 8010cb2:	2201      	movs	r2, #1
 8010cb4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8010cb8:	e031      	b.n	8010d1e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8010cba:	2308      	movs	r3, #8
 8010cbc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8010cbe:	2308      	movs	r3, #8
 8010cc0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8010cc2:	687b      	ldr	r3, [r7, #4]
 8010cc4:	681b      	ldr	r3, [r3, #0]
 8010cc6:	689b      	ldr	r3, [r3, #8]
 8010cc8:	0e5b      	lsrs	r3, r3, #25
 8010cca:	b2db      	uxtb	r3, r3
 8010ccc:	f003 0307 	and.w	r3, r3, #7
 8010cd0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8010cd2:	687b      	ldr	r3, [r7, #4]
 8010cd4:	681b      	ldr	r3, [r3, #0]
 8010cd6:	689b      	ldr	r3, [r3, #8]
 8010cd8:	0f5b      	lsrs	r3, r3, #29
 8010cda:	b2db      	uxtb	r3, r3
 8010cdc:	f003 0307 	and.w	r3, r3, #7
 8010ce0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8010ce2:	7bbb      	ldrb	r3, [r7, #14]
 8010ce4:	7b3a      	ldrb	r2, [r7, #12]
 8010ce6:	4911      	ldr	r1, [pc, #68]	; (8010d2c <UARTEx_SetNbDataToProcess+0x94>)
 8010ce8:	5c8a      	ldrb	r2, [r1, r2]
 8010cea:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8010cee:	7b3a      	ldrb	r2, [r7, #12]
 8010cf0:	490f      	ldr	r1, [pc, #60]	; (8010d30 <UARTEx_SetNbDataToProcess+0x98>)
 8010cf2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8010cf4:	fb93 f3f2 	sdiv	r3, r3, r2
 8010cf8:	b29a      	uxth	r2, r3
 8010cfa:	687b      	ldr	r3, [r7, #4]
 8010cfc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8010d00:	7bfb      	ldrb	r3, [r7, #15]
 8010d02:	7b7a      	ldrb	r2, [r7, #13]
 8010d04:	4909      	ldr	r1, [pc, #36]	; (8010d2c <UARTEx_SetNbDataToProcess+0x94>)
 8010d06:	5c8a      	ldrb	r2, [r1, r2]
 8010d08:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8010d0c:	7b7a      	ldrb	r2, [r7, #13]
 8010d0e:	4908      	ldr	r1, [pc, #32]	; (8010d30 <UARTEx_SetNbDataToProcess+0x98>)
 8010d10:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8010d12:	fb93 f3f2 	sdiv	r3, r3, r2
 8010d16:	b29a      	uxth	r2, r3
 8010d18:	687b      	ldr	r3, [r7, #4]
 8010d1a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8010d1e:	bf00      	nop
 8010d20:	3714      	adds	r7, #20
 8010d22:	46bd      	mov	sp, r7
 8010d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d28:	4770      	bx	lr
 8010d2a:	bf00      	nop
 8010d2c:	08014fd8 	.word	0x08014fd8
 8010d30:	08014fe0 	.word	0x08014fe0

08010d34 <LL_DLYB_SetDelay>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: the Delay value is set.
  *          - ERROR: the Delay value is not set.
  */
void LL_DLYB_SetDelay(DLYB_TypeDef *DLYBx, LL_DLYB_CfgTypeDef  *pdlyb_cfg)
{
 8010d34:	b480      	push	{r7}
 8010d36:	b083      	sub	sp, #12
 8010d38:	af00      	add	r7, sp, #0
 8010d3a:	6078      	str	r0, [r7, #4]
 8010d3c:	6039      	str	r1, [r7, #0]
  /* Check the DelayBlock instance */
  assert_param(IS_DLYB_ALL_INSTANCE(DLYBx));

  /* Enable the length sampling */
  SET_BIT(DLYBx->CR, DLYB_CR_SEN);
 8010d3e:	687b      	ldr	r3, [r7, #4]
 8010d40:	681b      	ldr	r3, [r3, #0]
 8010d42:	f043 0202 	orr.w	r2, r3, #2
 8010d46:	687b      	ldr	r3, [r7, #4]
 8010d48:	601a      	str	r2, [r3, #0]

  /* Update the UNIT and SEL field */
  DLYBx->CFGR = (pdlyb_cfg->PhaseSel) | ((pdlyb_cfg->Units) << DLYB_CFGR_UNIT_Pos);
 8010d4a:	683b      	ldr	r3, [r7, #0]
 8010d4c:	685a      	ldr	r2, [r3, #4]
 8010d4e:	683b      	ldr	r3, [r7, #0]
 8010d50:	681b      	ldr	r3, [r3, #0]
 8010d52:	021b      	lsls	r3, r3, #8
 8010d54:	431a      	orrs	r2, r3
 8010d56:	687b      	ldr	r3, [r7, #4]
 8010d58:	605a      	str	r2, [r3, #4]

  /* Disable the length sampling */
  CLEAR_BIT(DLYBx->CR, DLYB_CR_SEN);
 8010d5a:	687b      	ldr	r3, [r7, #4]
 8010d5c:	681b      	ldr	r3, [r3, #0]
 8010d5e:	f023 0202 	bic.w	r2, r3, #2
 8010d62:	687b      	ldr	r3, [r7, #4]
 8010d64:	601a      	str	r2, [r3, #0]
}
 8010d66:	bf00      	nop
 8010d68:	370c      	adds	r7, #12
 8010d6a:	46bd      	mov	sp, r7
 8010d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d70:	4770      	bx	lr

08010d72 <LL_DLYB_GetDelay>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: the Delay value is received.
  *          - ERROR: the Delay value is not received.
  */
void LL_DLYB_GetDelay(DLYB_TypeDef *DLYBx, LL_DLYB_CfgTypeDef *pdlyb_cfg)
{
 8010d72:	b480      	push	{r7}
 8010d74:	b083      	sub	sp, #12
 8010d76:	af00      	add	r7, sp, #0
 8010d78:	6078      	str	r0, [r7, #4]
 8010d7a:	6039      	str	r1, [r7, #0]
  /* Check the DelayBlock instance */
  assert_param(IS_DLYB_ALL_INSTANCE(DLYBx));

  /* Fill the DelayBlock configuration structure with SEL and UNIT value */
  pdlyb_cfg->Units = ((DLYBx->CFGR & DLYB_CFGR_UNIT) >> DLYB_CFGR_UNIT_Pos);
 8010d7c:	687b      	ldr	r3, [r7, #4]
 8010d7e:	685b      	ldr	r3, [r3, #4]
 8010d80:	0a1b      	lsrs	r3, r3, #8
 8010d82:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8010d86:	683b      	ldr	r3, [r7, #0]
 8010d88:	601a      	str	r2, [r3, #0]
  pdlyb_cfg->PhaseSel = (DLYBx->CFGR & DLYB_CFGR_SEL);
 8010d8a:	687b      	ldr	r3, [r7, #4]
 8010d8c:	685b      	ldr	r3, [r3, #4]
 8010d8e:	f003 020f 	and.w	r2, r3, #15
 8010d92:	683b      	ldr	r3, [r7, #0]
 8010d94:	605a      	str	r2, [r3, #4]
}
 8010d96:	bf00      	nop
 8010d98:	370c      	adds	r7, #12
 8010d9a:	46bd      	mov	sp, r7
 8010d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010da0:	4770      	bx	lr
	...

08010da4 <LL_DLYB_GetClockPeriod>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: there is a valid period detected and stored in pdlyb_cfg.
  *          - ERROR: there is no valid period detected.
  */
uint32_t LL_DLYB_GetClockPeriod(DLYB_TypeDef *DLYBx, LL_DLYB_CfgTypeDef *pdlyb_cfg)
{
 8010da4:	b580      	push	{r7, lr}
 8010da6:	b086      	sub	sp, #24
 8010da8:	af00      	add	r7, sp, #0
 8010daa:	6078      	str	r0, [r7, #4]
 8010dac:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 8010dae:	2300      	movs	r3, #0
 8010db0:	617b      	str	r3, [r7, #20]

  /* Check the DelayBlock instance */
  assert_param(IS_DLYB_ALL_INSTANCE(DLYBx));

  /* Enable the length sampling */
  SET_BIT(DLYBx->CR, DLYB_CR_SEN);
 8010db2:	687b      	ldr	r3, [r7, #4]
 8010db4:	681b      	ldr	r3, [r3, #0]
 8010db6:	f043 0202 	orr.w	r2, r3, #2
 8010dba:	687b      	ldr	r3, [r7, #4]
 8010dbc:	601a      	str	r2, [r3, #0]

  /* Delay line length detection */
  while (i < DLYB_MAX_UNIT)
 8010dbe:	e02a      	b.n	8010e16 <LL_DLYB_GetClockPeriod+0x72>
  {
    /* Set the Delay of the UNIT(s)*/
    DLYBx->CFGR = DLYB_MAX_SELECT | (i << DLYB_CFGR_UNIT_Pos);
 8010dc0:	697b      	ldr	r3, [r7, #20]
 8010dc2:	021b      	lsls	r3, r3, #8
 8010dc4:	f043 020c 	orr.w	r2, r3, #12
 8010dc8:	687b      	ldr	r3, [r7, #4]
 8010dca:	605a      	str	r2, [r3, #4]

    /* Waiting for a LNG valid value */
    tickstart =  HAL_GetTick();
 8010dcc:	f7f5 ffe0 	bl	8006d90 <HAL_GetTick>
 8010dd0:	60f8      	str	r0, [r7, #12]
    while ((DLYBx->CFGR & DLYB_CFGR_LNGF) == 0U)
 8010dd2:	e00c      	b.n	8010dee <LL_DLYB_GetClockPeriod+0x4a>
    {
      if ((HAL_GetTick() - tickstart) >=  DLYB_TIMEOUT)
 8010dd4:	f7f5 ffdc 	bl	8006d90 <HAL_GetTick>
 8010dd8:	4602      	mov	r2, r0
 8010dda:	68fb      	ldr	r3, [r7, #12]
 8010ddc:	1ad3      	subs	r3, r2, r3
 8010dde:	2bfe      	cmp	r3, #254	; 0xfe
 8010de0:	d905      	bls.n	8010dee <LL_DLYB_GetClockPeriod+0x4a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((DLYBx->CFGR & DLYB_CFGR_LNGF) == 0U)
 8010de2:	687b      	ldr	r3, [r7, #4]
 8010de4:	685b      	ldr	r3, [r3, #4]
 8010de6:	2b00      	cmp	r3, #0
 8010de8:	db01      	blt.n	8010dee <LL_DLYB_GetClockPeriod+0x4a>
        {
          return (uint32_t) HAL_TIMEOUT;
 8010dea:	2303      	movs	r3, #3
 8010dec:	e042      	b.n	8010e74 <LL_DLYB_GetClockPeriod+0xd0>
    while ((DLYBx->CFGR & DLYB_CFGR_LNGF) == 0U)
 8010dee:	687b      	ldr	r3, [r7, #4]
 8010df0:	685b      	ldr	r3, [r3, #4]
 8010df2:	2b00      	cmp	r3, #0
 8010df4:	daee      	bge.n	8010dd4 <LL_DLYB_GetClockPeriod+0x30>
        }
      }
    }

    if ((DLYBx->CFGR & DLYB_LNG_10_0_MASK) != 0U)
 8010df6:	687b      	ldr	r3, [r7, #4]
 8010df8:	685a      	ldr	r2, [r3, #4]
 8010dfa:	4b20      	ldr	r3, [pc, #128]	; (8010e7c <LL_DLYB_GetClockPeriod+0xd8>)
 8010dfc:	4013      	ands	r3, r2
 8010dfe:	2b00      	cmp	r3, #0
 8010e00:	d006      	beq.n	8010e10 <LL_DLYB_GetClockPeriod+0x6c>
    {
      if ((DLYBx->CFGR & (DLYB_CFGR_LNG_11 | DLYB_CFGR_LNG_10)) != DLYB_LNG_11_10_MASK)
 8010e02:	687b      	ldr	r3, [r7, #4]
 8010e04:	685b      	ldr	r3, [r3, #4]
 8010e06:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8010e0a:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8010e0e:	d106      	bne.n	8010e1e <LL_DLYB_GetClockPeriod+0x7a>
      {
        /* Delay line length is configured to one input clock period*/
        break;
      }
    }
    i++;
 8010e10:	697b      	ldr	r3, [r7, #20]
 8010e12:	3301      	adds	r3, #1
 8010e14:	617b      	str	r3, [r7, #20]
  while (i < DLYB_MAX_UNIT)
 8010e16:	697b      	ldr	r3, [r7, #20]
 8010e18:	2b7f      	cmp	r3, #127	; 0x7f
 8010e1a:	d9d1      	bls.n	8010dc0 <LL_DLYB_GetClockPeriod+0x1c>
 8010e1c:	e000      	b.n	8010e20 <LL_DLYB_GetClockPeriod+0x7c>
        break;
 8010e1e:	bf00      	nop
  }

  if (DLYB_MAX_UNIT != i)
 8010e20:	697b      	ldr	r3, [r7, #20]
 8010e22:	2b80      	cmp	r3, #128	; 0x80
 8010e24:	d022      	beq.n	8010e6c <LL_DLYB_GetClockPeriod+0xc8>
  {
    /* Determine how many unit delays (nb) span one input clock period */
    lng = (DLYBx->CFGR & DLYB_CFGR_LNG) >> 16U;
 8010e26:	687b      	ldr	r3, [r7, #4]
 8010e28:	685b      	ldr	r3, [r3, #4]
 8010e2a:	0c1b      	lsrs	r3, r3, #16
 8010e2c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8010e30:	60bb      	str	r3, [r7, #8]
    nb = 10U;
 8010e32:	230a      	movs	r3, #10
 8010e34:	613b      	str	r3, [r7, #16]
    while ((nb > 0U) && ((lng >> nb) == 0U))
 8010e36:	e002      	b.n	8010e3e <LL_DLYB_GetClockPeriod+0x9a>
    {
      nb--;
 8010e38:	693b      	ldr	r3, [r7, #16]
 8010e3a:	3b01      	subs	r3, #1
 8010e3c:	613b      	str	r3, [r7, #16]
    while ((nb > 0U) && ((lng >> nb) == 0U))
 8010e3e:	693b      	ldr	r3, [r7, #16]
 8010e40:	2b00      	cmp	r3, #0
 8010e42:	d005      	beq.n	8010e50 <LL_DLYB_GetClockPeriod+0xac>
 8010e44:	68ba      	ldr	r2, [r7, #8]
 8010e46:	693b      	ldr	r3, [r7, #16]
 8010e48:	fa22 f303 	lsr.w	r3, r2, r3
 8010e4c:	2b00      	cmp	r3, #0
 8010e4e:	d0f3      	beq.n	8010e38 <LL_DLYB_GetClockPeriod+0x94>
    }
    if (nb != 0U)
 8010e50:	693b      	ldr	r3, [r7, #16]
 8010e52:	2b00      	cmp	r3, #0
 8010e54:	d00a      	beq.n	8010e6c <LL_DLYB_GetClockPeriod+0xc8>
    {
      pdlyb_cfg->PhaseSel = nb ;
 8010e56:	683b      	ldr	r3, [r7, #0]
 8010e58:	693a      	ldr	r2, [r7, #16]
 8010e5a:	605a      	str	r2, [r3, #4]
      pdlyb_cfg->Units = i ;
 8010e5c:	683b      	ldr	r3, [r7, #0]
 8010e5e:	697a      	ldr	r2, [r7, #20]
 8010e60:	601a      	str	r2, [r3, #0]

      /* Disable the length sampling */
      DLYBx->CR = DLYB_CR_SEN;
 8010e62:	687b      	ldr	r3, [r7, #4]
 8010e64:	2202      	movs	r2, #2
 8010e66:	601a      	str	r2, [r3, #0]

      return (uint32_t)SUCCESS;
 8010e68:	2300      	movs	r3, #0
 8010e6a:	e003      	b.n	8010e74 <LL_DLYB_GetClockPeriod+0xd0>
    }
  }

  /* Disable the length sampling */
  DLYBx->CR = DLYB_CR_SEN;
 8010e6c:	687b      	ldr	r3, [r7, #4]
 8010e6e:	2202      	movs	r2, #2
 8010e70:	601a      	str	r2, [r3, #0]

  return (uint32_t)ERROR;
 8010e72:	2301      	movs	r3, #1

}
 8010e74:	4618      	mov	r0, r3
 8010e76:	3718      	adds	r7, #24
 8010e78:	46bd      	mov	sp, r7
 8010e7a:	bd80      	pop	{r7, pc}
 8010e7c:	07ff0000 	.word	0x07ff0000

08010e80 <_tx_byte_allocate>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_byte_allocate(TX_BYTE_POOL *pool_ptr, VOID **memory_ptr, ULONG memory_size,  ULONG wait_option)
{
 8010e80:	b580      	push	{r7, lr}
 8010e82:	b096      	sub	sp, #88	; 0x58
 8010e84:	af00      	add	r7, sp, #0
 8010e86:	60f8      	str	r0, [r7, #12]
 8010e88:	60b9      	str	r1, [r7, #8]
 8010e8a:	607a      	str	r2, [r7, #4]
 8010e8c:	603b      	str	r3, [r7, #0]
#endif


    /* Round the memory size up to the next size that is evenly divisible by
       an ALIGN_TYPE (this is typically a 32-bit ULONG).  This guarantees proper alignment.  */
    memory_size = (((memory_size + (sizeof(ALIGN_TYPE)))-((ALIGN_TYPE) 1))/(sizeof(ALIGN_TYPE))) * (sizeof(ALIGN_TYPE));
 8010e8e:	687b      	ldr	r3, [r7, #4]
 8010e90:	3303      	adds	r3, #3
 8010e92:	f023 0303 	bic.w	r3, r3, #3
 8010e96:	607b      	str	r3, [r7, #4]
{
UINT posture;
#ifdef TX_PORT_USE_BASEPRI
    __asm__ volatile ("MRS  %0, BASEPRI ": "=r" (posture));
#else
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8010e98:	f3ef 8310 	mrs	r3, PRIMASK
 8010e9c:	637b      	str	r3, [r7, #52]	; 0x34
#endif
    return(posture);
 8010e9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34

__attribute__( ( always_inline ) ) static inline UINT __disable_interrupts(void)
{
UINT int_posture;

    int_posture = __get_interrupt_posture();
 8010ea0:	633b      	str	r3, [r7, #48]	; 0x30

#ifdef TX_PORT_USE_BASEPRI
    __set_basepri_value(TX_PORT_BASEPRI);
#else
    __asm__ volatile ("CPSID i" : : : "memory");
 8010ea2:	b672      	cpsid	i
#endif
    return(int_posture);
 8010ea4:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    /* Disable interrupts.  */
    TX_DISABLE
 8010ea6:	657b      	str	r3, [r7, #84]	; 0x54

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 8010ea8:	4b55      	ldr	r3, [pc, #340]	; (8011000 <_tx_byte_allocate+0x180>)
 8010eaa:	681b      	ldr	r3, [r3, #0]
 8010eac:	64bb      	str	r3, [r7, #72]	; 0x48
    lower_tbu =  *((ULONG *) (log_entry_ptr + TX_EL_EVENT_TIME_LOWER_OFFSET));
    upper_tbu =  *((ULONG *) (log_entry_ptr + TX_EL_EVENT_TIME_UPPER_OFFSET));
#endif

    /* Set the search finished flag to false.  */
    finished =  TX_FALSE;
 8010eae:	2300      	movs	r3, #0
 8010eb0:	64fb      	str	r3, [r7, #76]	; 0x4c
    /* Loop to handle cases where the owner of the pool changed.  */
    do
    {

        /* Indicate that this thread is the current owner.  */
        pool_ptr -> tx_byte_pool_owner =  thread_ptr;
 8010eb2:	68fb      	ldr	r3, [r7, #12]
 8010eb4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010eb6:	621a      	str	r2, [r3, #32]
 8010eb8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010eba:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8010ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ebe:	f383 8810 	msr	PRIMASK, r3
}
 8010ec2:	bf00      	nop
        /* Restore interrupts.  */
        TX_RESTORE

        /* At this point, the executing thread owns the pool and can perform a search
           for free memory.  */
        work_ptr =  _tx_byte_pool_search(pool_ptr, memory_size);
 8010ec4:	6879      	ldr	r1, [r7, #4]
 8010ec6:	68f8      	ldr	r0, [r7, #12]
 8010ec8:	f000 f9b2 	bl	8011230 <_tx_byte_pool_search>
 8010ecc:	6478      	str	r0, [r7, #68]	; 0x44
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8010ece:	f3ef 8310 	mrs	r3, PRIMASK
 8010ed2:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 8010ed4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 8010ed6:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 8010ed8:	b672      	cpsid	i
    return(int_posture);
 8010eda:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Optional processing extension.  */
        TX_BYTE_ALLOCATE_EXTENSION

        /* Lockout interrupts.  */
        TX_DISABLE
 8010edc:	657b      	str	r3, [r7, #84]	; 0x54

        /* Determine if we are finished.  */
        if (work_ptr != TX_NULL)
 8010ede:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010ee0:	2b00      	cmp	r3, #0
 8010ee2:	d002      	beq.n	8010eea <_tx_byte_allocate+0x6a>
        {

            /* Yes, we have found a block the search is finished.  */
            finished =  TX_TRUE;
 8010ee4:	2301      	movs	r3, #1
 8010ee6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8010ee8:	e006      	b.n	8010ef8 <_tx_byte_allocate+0x78>
        }
        else
        {

            /* No block was found, does this thread still own the pool?  */
            if (pool_ptr -> tx_byte_pool_owner == thread_ptr)
 8010eea:	68fb      	ldr	r3, [r7, #12]
 8010eec:	6a1b      	ldr	r3, [r3, #32]
 8010eee:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010ef0:	429a      	cmp	r2, r3
 8010ef2:	d101      	bne.n	8010ef8 <_tx_byte_allocate+0x78>
            {

                /* Yes, then we have looked through the entire pool and haven't found the memory.  */
                finished =  TX_TRUE;
 8010ef4:	2301      	movs	r3, #1
 8010ef6:	64fb      	str	r3, [r7, #76]	; 0x4c
            }
        }

    } while (finished == TX_FALSE);
 8010ef8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010efa:	2b00      	cmp	r3, #0
 8010efc:	d0d9      	beq.n	8010eb2 <_tx_byte_allocate+0x32>

    /* Copy the pointer into the return destination.  */
    *memory_ptr =  (VOID *) work_ptr;
 8010efe:	68bb      	ldr	r3, [r7, #8]
 8010f00:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010f02:	601a      	str	r2, [r3, #0]

    /* Determine if memory was found.  */
    if (work_ptr != TX_NULL)
 8010f04:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010f06:	2b00      	cmp	r3, #0
 8010f08:	d008      	beq.n	8010f1c <_tx_byte_allocate+0x9c>
 8010f0a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010f0c:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8010f0e:	6a3b      	ldr	r3, [r7, #32]
 8010f10:	f383 8810 	msr	PRIMASK, r3
}
 8010f14:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Set the status to success.  */
        status =  TX_SUCCESS;
 8010f16:	2300      	movs	r3, #0
 8010f18:	653b      	str	r3, [r7, #80]	; 0x50
 8010f1a:	e06c      	b.n	8010ff6 <_tx_byte_allocate+0x176>
    {

        /* No memory of sufficient size was found...  */

        /* Determine if the request specifies suspension.  */
        if (wait_option != TX_NO_WAIT)
 8010f1c:	683b      	ldr	r3, [r7, #0]
 8010f1e:	2b00      	cmp	r3, #0
 8010f20:	d061      	beq.n	8010fe6 <_tx_byte_allocate+0x166>
        {

            /* Determine if the preempt disable flag is non-zero.  */
            if (_tx_thread_preempt_disable != ((UINT) 0))
 8010f22:	4b38      	ldr	r3, [pc, #224]	; (8011004 <_tx_byte_allocate+0x184>)
 8010f24:	681b      	ldr	r3, [r3, #0]
 8010f26:	2b00      	cmp	r3, #0
 8010f28:	d007      	beq.n	8010f3a <_tx_byte_allocate+0xba>
            {

                /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
                status =  TX_NO_MEMORY;
 8010f2a:	2310      	movs	r3, #16
 8010f2c:	653b      	str	r3, [r7, #80]	; 0x50
 8010f2e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010f30:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8010f32:	69fb      	ldr	r3, [r7, #28]
 8010f34:	f383 8810 	msr	PRIMASK, r3
}
 8010f38:	e05d      	b.n	8010ff6 <_tx_byte_allocate+0x176>
                /* Increment the number of suspensions on this pool.  */
                pool_ptr -> tx_byte_pool_performance_suspension_count++;
#endif

                /* Setup cleanup routine pointer.  */
                thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_byte_pool_cleanup);
 8010f3a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010f3c:	4a32      	ldr	r2, [pc, #200]	; (8011008 <_tx_byte_allocate+0x188>)
 8010f3e:	669a      	str	r2, [r3, #104]	; 0x68

                /* Setup cleanup information, i.e. this pool control
                   block.  */
                thread_ptr -> tx_thread_suspend_control_block =  (VOID *) pool_ptr;
 8010f40:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010f42:	68fa      	ldr	r2, [r7, #12]
 8010f44:	66da      	str	r2, [r3, #108]	; 0x6c

                /* Save the return memory pointer address as well.  */
                thread_ptr -> tx_thread_additional_suspend_info =  (VOID *) memory_ptr;
 8010f46:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010f48:	68ba      	ldr	r2, [r7, #8]
 8010f4a:	67da      	str	r2, [r3, #124]	; 0x7c

                /* Save the byte size requested.  */
                thread_ptr -> tx_thread_suspend_info =  memory_size;
 8010f4c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010f4e:	687a      	ldr	r2, [r7, #4]
 8010f50:	679a      	str	r2, [r3, #120]	; 0x78

#ifndef TX_NOT_INTERRUPTABLE

                /* Increment the suspension sequence number, which is used to identify
                   this suspension event.  */
                thread_ptr -> tx_thread_suspension_sequence++;
 8010f52:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010f54:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8010f58:	1c5a      	adds	r2, r3, #1
 8010f5a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010f5c:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
#endif

                /* Pickup the number of suspended threads.  */
                suspended_count =  pool_ptr -> tx_byte_pool_suspended_count;
 8010f60:	68fb      	ldr	r3, [r7, #12]
 8010f62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010f64:	643b      	str	r3, [r7, #64]	; 0x40

                /* Increment the suspension count.  */
                (pool_ptr -> tx_byte_pool_suspended_count)++;
 8010f66:	68fb      	ldr	r3, [r7, #12]
 8010f68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010f6a:	1c5a      	adds	r2, r3, #1
 8010f6c:	68fb      	ldr	r3, [r7, #12]
 8010f6e:	629a      	str	r2, [r3, #40]	; 0x28

                /* Setup suspension list.  */
                if (suspended_count == TX_NO_SUSPENSIONS)
 8010f70:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010f72:	2b00      	cmp	r3, #0
 8010f74:	d109      	bne.n	8010f8a <_tx_byte_allocate+0x10a>
                {

                    /* No other threads are suspended.  Setup the head pointer and
                       just setup this threads pointers to itself.  */
                    pool_ptr -> tx_byte_pool_suspension_list =      thread_ptr;
 8010f76:	68fb      	ldr	r3, [r7, #12]
 8010f78:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010f7a:	625a      	str	r2, [r3, #36]	; 0x24
                    thread_ptr -> tx_thread_suspended_next =        thread_ptr;
 8010f7c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010f7e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010f80:	671a      	str	r2, [r3, #112]	; 0x70
                    thread_ptr -> tx_thread_suspended_previous =    thread_ptr;
 8010f82:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010f84:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010f86:	675a      	str	r2, [r3, #116]	; 0x74
 8010f88:	e011      	b.n	8010fae <_tx_byte_allocate+0x12e>
                }
                else
                {

                    /* This list is not NULL, add current thread to the end. */
                    next_thread =                                   pool_ptr -> tx_byte_pool_suspension_list;
 8010f8a:	68fb      	ldr	r3, [r7, #12]
 8010f8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010f8e:	63fb      	str	r3, [r7, #60]	; 0x3c
                    thread_ptr -> tx_thread_suspended_next =        next_thread;
 8010f90:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010f92:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8010f94:	671a      	str	r2, [r3, #112]	; 0x70
                    previous_thread =                               next_thread -> tx_thread_suspended_previous;
 8010f96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010f98:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010f9a:	63bb      	str	r3, [r7, #56]	; 0x38
                    thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 8010f9c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010f9e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010fa0:	675a      	str	r2, [r3, #116]	; 0x74
                    previous_thread -> tx_thread_suspended_next =   thread_ptr;
 8010fa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010fa4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010fa6:	671a      	str	r2, [r3, #112]	; 0x70
                    next_thread -> tx_thread_suspended_previous =   thread_ptr;
 8010fa8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010faa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010fac:	675a      	str	r2, [r3, #116]	; 0x74
                }

                /* Set the state to suspended.  */
                thread_ptr -> tx_thread_state =       TX_BYTE_MEMORY;
 8010fae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010fb0:	2209      	movs	r2, #9
 8010fb2:	631a      	str	r2, [r3, #48]	; 0x30
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Set the suspending flag.  */
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8010fb4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010fb6:	2201      	movs	r2, #1
 8010fb8:	639a      	str	r2, [r3, #56]	; 0x38

                /* Setup the timeout period.  */
                thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 8010fba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010fbc:	683a      	ldr	r2, [r7, #0]
 8010fbe:	64da      	str	r2, [r3, #76]	; 0x4c

                /* Temporarily disable preemption.  */
                _tx_thread_preempt_disable++;
 8010fc0:	4b10      	ldr	r3, [pc, #64]	; (8011004 <_tx_byte_allocate+0x184>)
 8010fc2:	681b      	ldr	r3, [r3, #0]
 8010fc4:	3301      	adds	r3, #1
 8010fc6:	4a0f      	ldr	r2, [pc, #60]	; (8011004 <_tx_byte_allocate+0x184>)
 8010fc8:	6013      	str	r3, [r2, #0]
 8010fca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010fcc:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8010fce:	69bb      	ldr	r3, [r7, #24]
 8010fd0:	f383 8810 	msr	PRIMASK, r3
}
 8010fd4:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Call actual thread suspension routine.  */
                _tx_thread_system_suspend(thread_ptr);
 8010fd6:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8010fd8:	f001 fe84 	bl	8012ce4 <_tx_thread_system_suspend>
                    *((ULONG *) (log_entry_ptr + TX_EL_EVENT_INFO_4_OFFSET)) =  (ULONG) *memory_ptr;
                }
#endif

                /* Return the completion status.  */
                status =  thread_ptr -> tx_thread_suspend_status;
 8010fdc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010fde:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010fe2:	653b      	str	r3, [r7, #80]	; 0x50
 8010fe4:	e007      	b.n	8010ff6 <_tx_byte_allocate+0x176>
 8010fe6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010fe8:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8010fea:	697b      	ldr	r3, [r7, #20]
 8010fec:	f383 8810 	msr	PRIMASK, r3
}
 8010ff0:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Immediate return, return error completion.  */
            status =  TX_NO_MEMORY;
 8010ff2:	2310      	movs	r3, #16
 8010ff4:	653b      	str	r3, [r7, #80]	; 0x50
        }
    }

    /* Return completion status.  */
    return(status);
 8010ff6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
}
 8010ff8:	4618      	mov	r0, r3
 8010ffa:	3758      	adds	r7, #88	; 0x58
 8010ffc:	46bd      	mov	sp, r7
 8010ffe:	bd80      	pop	{r7, pc}
 8011000:	2001c9e8 	.word	0x2001c9e8
 8011004:	2001ca80 	.word	0x2001ca80
 8011008:	0801100d 	.word	0x0801100d

0801100c <_tx_byte_pool_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_byte_pool_cleanup(TX_THREAD *thread_ptr, ULONG suspension_sequence)
{
 801100c:	b580      	push	{r7, lr}
 801100e:	b08e      	sub	sp, #56	; 0x38
 8011010:	af00      	add	r7, sp, #0
 8011012:	6078      	str	r0, [r7, #4]
 8011014:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8011016:	f3ef 8310 	mrs	r3, PRIMASK
 801101a:	623b      	str	r3, [r7, #32]
    return(posture);
 801101c:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 801101e:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 8011020:	b672      	cpsid	i
    return(int_posture);
 8011022:	69fb      	ldr	r3, [r7, #28]


#ifndef TX_NOT_INTERRUPTABLE

    /* Disable interrupts to remove the suspended thread from the byte pool.  */
    TX_DISABLE
 8011024:	637b      	str	r3, [r7, #52]	; 0x34

    /* Determine if the cleanup is still required.  */
    if (thread_ptr -> tx_thread_suspend_cleanup == &(_tx_byte_pool_cleanup))
 8011026:	687b      	ldr	r3, [r7, #4]
 8011028:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801102a:	4a33      	ldr	r2, [pc, #204]	; (80110f8 <_tx_byte_pool_cleanup+0xec>)
 801102c:	4293      	cmp	r3, r2
 801102e:	d158      	bne.n	80110e2 <_tx_byte_pool_cleanup+0xd6>
    {

        /* Check for valid suspension sequence.  */
        if (suspension_sequence == thread_ptr -> tx_thread_suspension_sequence)
 8011030:	687b      	ldr	r3, [r7, #4]
 8011032:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8011036:	683a      	ldr	r2, [r7, #0]
 8011038:	429a      	cmp	r2, r3
 801103a:	d152      	bne.n	80110e2 <_tx_byte_pool_cleanup+0xd6>
        {

            /* Setup pointer to byte pool control block.  */
            pool_ptr =  TX_VOID_TO_BYTE_POOL_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
 801103c:	687b      	ldr	r3, [r7, #4]
 801103e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011040:	633b      	str	r3, [r7, #48]	; 0x30

            /* Check for a NULL byte pool pointer.  */
            if (pool_ptr != TX_NULL)
 8011042:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011044:	2b00      	cmp	r3, #0
 8011046:	d04c      	beq.n	80110e2 <_tx_byte_pool_cleanup+0xd6>
            {

                /* Check for valid pool ID.  */
                if (pool_ptr -> tx_byte_pool_id == TX_BYTE_POOL_ID)
 8011048:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801104a:	681b      	ldr	r3, [r3, #0]
 801104c:	4a2b      	ldr	r2, [pc, #172]	; (80110fc <_tx_byte_pool_cleanup+0xf0>)
 801104e:	4293      	cmp	r3, r2
 8011050:	d147      	bne.n	80110e2 <_tx_byte_pool_cleanup+0xd6>
                {

                    /* Determine if there are any thread suspensions.  */
                    if (pool_ptr -> tx_byte_pool_suspended_count != TX_NO_SUSPENSIONS)
 8011052:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011054:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011056:	2b00      	cmp	r3, #0
 8011058:	d043      	beq.n	80110e2 <_tx_byte_pool_cleanup+0xd6>
                        /* Setup pointer to byte pool control block.  */
                        pool_ptr =  TX_VOID_TO_BYTE_POOL_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
#endif

                        /* Thread suspended for memory... Clear the suspension cleanup flag.  */
                        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 801105a:	687b      	ldr	r3, [r7, #4]
 801105c:	2200      	movs	r2, #0
 801105e:	669a      	str	r2, [r3, #104]	; 0x68

                        /* Decrement the suspension count.  */
                        pool_ptr -> tx_byte_pool_suspended_count--;
 8011060:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011062:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011064:	1e5a      	subs	r2, r3, #1
 8011066:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011068:	629a      	str	r2, [r3, #40]	; 0x28

                        /* Pickup the suspended count.  */
                        suspended_count =  pool_ptr -> tx_byte_pool_suspended_count;
 801106a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801106c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801106e:	62fb      	str	r3, [r7, #44]	; 0x2c

                        /* Remove the suspended thread from the list.  */

                        /* See if this is the only suspended thread on the list.  */
                        if (suspended_count == TX_NO_SUSPENSIONS)
 8011070:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011072:	2b00      	cmp	r3, #0
 8011074:	d103      	bne.n	801107e <_tx_byte_pool_cleanup+0x72>
                        {

                            /* Yes, the only suspended thread.  */

                            /* Update the head pointer.  */
                            pool_ptr -> tx_byte_pool_suspension_list =  TX_NULL;
 8011076:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011078:	2200      	movs	r2, #0
 801107a:	625a      	str	r2, [r3, #36]	; 0x24
 801107c:	e013      	b.n	80110a6 <_tx_byte_pool_cleanup+0x9a>
                        {

                            /* At least one more thread is on the same suspension list.  */

                            /* Update the links of the adjacent threads.  */
                            next_thread =                                   thread_ptr -> tx_thread_suspended_next;
 801107e:	687b      	ldr	r3, [r7, #4]
 8011080:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011082:	62bb      	str	r3, [r7, #40]	; 0x28
                            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 8011084:	687b      	ldr	r3, [r7, #4]
 8011086:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011088:	627b      	str	r3, [r7, #36]	; 0x24
                            next_thread -> tx_thread_suspended_previous =   previous_thread;
 801108a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801108c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801108e:	675a      	str	r2, [r3, #116]	; 0x74
                            previous_thread -> tx_thread_suspended_next =   next_thread;
 8011090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011092:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011094:	671a      	str	r2, [r3, #112]	; 0x70

                            /* Determine if we need to update the head pointer.  */
                            if (pool_ptr -> tx_byte_pool_suspension_list == thread_ptr)
 8011096:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011098:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801109a:	687a      	ldr	r2, [r7, #4]
 801109c:	429a      	cmp	r2, r3
 801109e:	d102      	bne.n	80110a6 <_tx_byte_pool_cleanup+0x9a>
                            {

                                /* Update the list head pointer.  */
                                pool_ptr -> tx_byte_pool_suspension_list =      next_thread;
 80110a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80110a2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80110a4:	625a      	str	r2, [r3, #36]	; 0x24
                            }
                        }

                        /* Now we need to determine if this cleanup is from a terminate, timeout,
                           or from a wait abort.  */
                        if (thread_ptr -> tx_thread_state == TX_BYTE_MEMORY)
 80110a6:	687b      	ldr	r3, [r7, #4]
 80110a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80110aa:	2b09      	cmp	r3, #9
 80110ac:	d119      	bne.n	80110e2 <_tx_byte_pool_cleanup+0xd6>
                            /* Increment the number of timeouts on this byte pool.  */
                            pool_ptr -> tx_byte_pool_performance_timeout_count++;
#endif

                            /* Setup return status.  */
                            thread_ptr -> tx_thread_suspend_status =  TX_NO_MEMORY;
 80110ae:	687b      	ldr	r3, [r7, #4]
 80110b0:	2210      	movs	r2, #16
 80110b2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                            /* Resume the thread!  */
                            _tx_thread_system_ni_resume(thread_ptr);
#else

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 80110b6:	4b12      	ldr	r3, [pc, #72]	; (8011100 <_tx_byte_pool_cleanup+0xf4>)
 80110b8:	681b      	ldr	r3, [r3, #0]
 80110ba:	3301      	adds	r3, #1
 80110bc:	4a10      	ldr	r2, [pc, #64]	; (8011100 <_tx_byte_pool_cleanup+0xf4>)
 80110be:	6013      	str	r3, [r2, #0]
 80110c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80110c2:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80110c4:	693b      	ldr	r3, [r7, #16]
 80110c6:	f383 8810 	msr	PRIMASK, r3
}
 80110ca:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Resume the thread!  */
                            _tx_thread_system_resume(thread_ptr);
 80110cc:	6878      	ldr	r0, [r7, #4]
 80110ce:	f001 fd09 	bl	8012ae4 <_tx_thread_system_resume>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80110d2:	f3ef 8310 	mrs	r3, PRIMASK
 80110d6:	61bb      	str	r3, [r7, #24]
    return(posture);
 80110d8:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 80110da:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 80110dc:	b672      	cpsid	i
    return(int_posture);
 80110de:	697b      	ldr	r3, [r7, #20]

                            /* Disable interrupts.  */
                            TX_DISABLE
 80110e0:	637b      	str	r3, [r7, #52]	; 0x34
 80110e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80110e4:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80110e6:	68fb      	ldr	r3, [r7, #12]
 80110e8:	f383 8810 	msr	PRIMASK, r3
}
 80110ec:	bf00      	nop
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 80110ee:	bf00      	nop
 80110f0:	3738      	adds	r7, #56	; 0x38
 80110f2:	46bd      	mov	sp, r7
 80110f4:	bd80      	pop	{r7, pc}
 80110f6:	bf00      	nop
 80110f8:	0801100d 	.word	0x0801100d
 80110fc:	42595445 	.word	0x42595445
 8011100:	2001ca80 	.word	0x2001ca80

08011104 <_tx_byte_pool_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_byte_pool_create(TX_BYTE_POOL *pool_ptr, CHAR *name_ptr, VOID *pool_start, ULONG pool_size)
{
 8011104:	b580      	push	{r7, lr}
 8011106:	b08e      	sub	sp, #56	; 0x38
 8011108:	af00      	add	r7, sp, #0
 801110a:	60f8      	str	r0, [r7, #12]
 801110c:	60b9      	str	r1, [r7, #8]
 801110e:	607a      	str	r2, [r7, #4]
 8011110:	603b      	str	r3, [r7, #0]
TX_BYTE_POOL        *previous_pool;
ALIGN_TYPE          *free_ptr;


    /* Initialize the byte pool control block to all zeros.  */
    TX_MEMSET(pool_ptr, 0, (sizeof(TX_BYTE_POOL)));
 8011112:	2234      	movs	r2, #52	; 0x34
 8011114:	2100      	movs	r1, #0
 8011116:	68f8      	ldr	r0, [r7, #12]
 8011118:	f002 fe80 	bl	8013e1c <memset>

    /* Round the pool size down to something that is evenly divisible by
       an ULONG.  */
    pool_size =   (pool_size/(sizeof(ALIGN_TYPE))) * (sizeof(ALIGN_TYPE));
 801111c:	683b      	ldr	r3, [r7, #0]
 801111e:	f023 0303 	bic.w	r3, r3, #3
 8011122:	603b      	str	r3, [r7, #0]

    /* Setup the basic byte pool fields.  */
    pool_ptr -> tx_byte_pool_name =              name_ptr;
 8011124:	68fb      	ldr	r3, [r7, #12]
 8011126:	68ba      	ldr	r2, [r7, #8]
 8011128:	605a      	str	r2, [r3, #4]

    /* Save the start and size of the pool.  */
    pool_ptr -> tx_byte_pool_start =   TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 801112a:	68fb      	ldr	r3, [r7, #12]
 801112c:	687a      	ldr	r2, [r7, #4]
 801112e:	619a      	str	r2, [r3, #24]
    pool_ptr -> tx_byte_pool_size =    pool_size;
 8011130:	68fb      	ldr	r3, [r7, #12]
 8011132:	683a      	ldr	r2, [r7, #0]
 8011134:	61da      	str	r2, [r3, #28]

    /* Setup memory list to the beginning as well as the search pointer.  */
    pool_ptr -> tx_byte_pool_list =    TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8011136:	68fb      	ldr	r3, [r7, #12]
 8011138:	687a      	ldr	r2, [r7, #4]
 801113a:	611a      	str	r2, [r3, #16]
    pool_ptr -> tx_byte_pool_search =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 801113c:	68fb      	ldr	r3, [r7, #12]
 801113e:	687a      	ldr	r2, [r7, #4]
 8011140:	615a      	str	r2, [r3, #20]

    /* Initially, the pool will have two blocks.  One large block at the
       beginning that is available and a small allocated block at the end
       of the pool that is there just for the algorithm.  Be sure to count
       the available block's header in the available bytes count.  */
    pool_ptr -> tx_byte_pool_available =   pool_size - ((sizeof(VOID *)) + (sizeof(ALIGN_TYPE)));
 8011142:	683b      	ldr	r3, [r7, #0]
 8011144:	f1a3 0208 	sub.w	r2, r3, #8
 8011148:	68fb      	ldr	r3, [r7, #12]
 801114a:	609a      	str	r2, [r3, #8]
    pool_ptr -> tx_byte_pool_fragments =   ((UINT) 2);
 801114c:	68fb      	ldr	r3, [r7, #12]
 801114e:	2202      	movs	r2, #2
 8011150:	60da      	str	r2, [r3, #12]
    /* Each block contains a "next" pointer that points to the next block in the pool followed by a ALIGN_TYPE
       field that contains either the constant TX_BYTE_BLOCK_FREE (if the block is free) or a pointer to the
       owning pool (if the block is allocated).  */

    /* Calculate the end of the pool's memory area.  */
    block_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8011152:	687b      	ldr	r3, [r7, #4]
 8011154:	637b      	str	r3, [r7, #52]	; 0x34
    block_ptr =  TX_UCHAR_POINTER_ADD(block_ptr, pool_size);
 8011156:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011158:	683b      	ldr	r3, [r7, #0]
 801115a:	4413      	add	r3, r2
 801115c:	637b      	str	r3, [r7, #52]	; 0x34

    /* Backup the end of the pool pointer and build the pre-allocated block.  */
    block_ptr =  TX_UCHAR_POINTER_SUB(block_ptr, (sizeof(ALIGN_TYPE)));
 801115e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011160:	3b04      	subs	r3, #4
 8011162:	637b      	str	r3, [r7, #52]	; 0x34

    /* Cast the pool pointer into a ULONG.  */
    temp_ptr =             TX_BYTE_POOL_TO_UCHAR_POINTER_CONVERT(pool_ptr);
 8011164:	68fb      	ldr	r3, [r7, #12]
 8011166:	633b      	str	r3, [r7, #48]	; 0x30
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(block_ptr);
 8011168:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801116a:	62fb      	str	r3, [r7, #44]	; 0x2c
    *block_indirect_ptr =  temp_ptr;
 801116c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801116e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011170:	601a      	str	r2, [r3, #0]

    block_ptr =            TX_UCHAR_POINTER_SUB(block_ptr, (sizeof(UCHAR *)));
 8011172:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011174:	3b04      	subs	r3, #4
 8011176:	637b      	str	r3, [r7, #52]	; 0x34
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(block_ptr);
 8011178:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801117a:	62fb      	str	r3, [r7, #44]	; 0x2c
    *block_indirect_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 801117c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801117e:	687a      	ldr	r2, [r7, #4]
 8011180:	601a      	str	r2, [r3, #0]

    /* Now setup the large available block in the pool.  */
    temp_ptr =             TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8011182:	687b      	ldr	r3, [r7, #4]
 8011184:	633b      	str	r3, [r7, #48]	; 0x30
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(temp_ptr);
 8011186:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011188:	62fb      	str	r3, [r7, #44]	; 0x2c
    *block_indirect_ptr =  block_ptr;
 801118a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801118c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801118e:	601a      	str	r2, [r3, #0]
    block_ptr =            TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8011190:	687b      	ldr	r3, [r7, #4]
 8011192:	637b      	str	r3, [r7, #52]	; 0x34
    block_ptr =            TX_UCHAR_POINTER_ADD(block_ptr, (sizeof(UCHAR *)));
 8011194:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011196:	3304      	adds	r3, #4
 8011198:	637b      	str	r3, [r7, #52]	; 0x34
    free_ptr =             TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(block_ptr);
 801119a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801119c:	62bb      	str	r3, [r7, #40]	; 0x28
    *free_ptr =            TX_BYTE_BLOCK_FREE;
 801119e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80111a0:	4a1f      	ldr	r2, [pc, #124]	; (8011220 <_tx_byte_pool_create+0x11c>)
 80111a2:	601a      	str	r2, [r3, #0]

    /* Clear the owner id.  */
    pool_ptr -> tx_byte_pool_owner =  TX_NULL;
 80111a4:	68fb      	ldr	r3, [r7, #12]
 80111a6:	2200      	movs	r2, #0
 80111a8:	621a      	str	r2, [r3, #32]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80111aa:	f3ef 8310 	mrs	r3, PRIMASK
 80111ae:	61bb      	str	r3, [r7, #24]
    return(posture);
 80111b0:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 80111b2:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 80111b4:	b672      	cpsid	i
    return(int_posture);
 80111b6:	697b      	ldr	r3, [r7, #20]

    /* Disable interrupts to place the byte pool on the created list.  */
    TX_DISABLE
 80111b8:	627b      	str	r3, [r7, #36]	; 0x24

    /* Setup the byte pool ID to make it valid.  */
    pool_ptr -> tx_byte_pool_id =  TX_BYTE_POOL_ID;
 80111ba:	68fb      	ldr	r3, [r7, #12]
 80111bc:	4a19      	ldr	r2, [pc, #100]	; (8011224 <_tx_byte_pool_create+0x120>)
 80111be:	601a      	str	r2, [r3, #0]

    /* Place the byte pool on the list of created byte pools.  First,
       check for an empty list.  */
    if (_tx_byte_pool_created_count == TX_EMPTY)
 80111c0:	4b19      	ldr	r3, [pc, #100]	; (8011228 <_tx_byte_pool_create+0x124>)
 80111c2:	681b      	ldr	r3, [r3, #0]
 80111c4:	2b00      	cmp	r3, #0
 80111c6:	d109      	bne.n	80111dc <_tx_byte_pool_create+0xd8>
    {

        /* The created byte pool list is empty.  Add byte pool to empty list.  */
        _tx_byte_pool_created_ptr =                  pool_ptr;
 80111c8:	4a18      	ldr	r2, [pc, #96]	; (801122c <_tx_byte_pool_create+0x128>)
 80111ca:	68fb      	ldr	r3, [r7, #12]
 80111cc:	6013      	str	r3, [r2, #0]
        pool_ptr -> tx_byte_pool_created_next =      pool_ptr;
 80111ce:	68fb      	ldr	r3, [r7, #12]
 80111d0:	68fa      	ldr	r2, [r7, #12]
 80111d2:	62da      	str	r2, [r3, #44]	; 0x2c
        pool_ptr -> tx_byte_pool_created_previous =  pool_ptr;
 80111d4:	68fb      	ldr	r3, [r7, #12]
 80111d6:	68fa      	ldr	r2, [r7, #12]
 80111d8:	631a      	str	r2, [r3, #48]	; 0x30
 80111da:	e011      	b.n	8011200 <_tx_byte_pool_create+0xfc>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_pool =      _tx_byte_pool_created_ptr;
 80111dc:	4b13      	ldr	r3, [pc, #76]	; (801122c <_tx_byte_pool_create+0x128>)
 80111de:	681b      	ldr	r3, [r3, #0]
 80111e0:	623b      	str	r3, [r7, #32]
        previous_pool =  next_pool -> tx_byte_pool_created_previous;
 80111e2:	6a3b      	ldr	r3, [r7, #32]
 80111e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80111e6:	61fb      	str	r3, [r7, #28]

        /* Place the new byte pool in the list.  */
        next_pool -> tx_byte_pool_created_previous =  pool_ptr;
 80111e8:	6a3b      	ldr	r3, [r7, #32]
 80111ea:	68fa      	ldr	r2, [r7, #12]
 80111ec:	631a      	str	r2, [r3, #48]	; 0x30
        previous_pool -> tx_byte_pool_created_next =  pool_ptr;
 80111ee:	69fb      	ldr	r3, [r7, #28]
 80111f0:	68fa      	ldr	r2, [r7, #12]
 80111f2:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Setup this byte pool's created links.  */
        pool_ptr -> tx_byte_pool_created_previous =  previous_pool;
 80111f4:	68fb      	ldr	r3, [r7, #12]
 80111f6:	69fa      	ldr	r2, [r7, #28]
 80111f8:	631a      	str	r2, [r3, #48]	; 0x30
        pool_ptr -> tx_byte_pool_created_next =      next_pool;
 80111fa:	68fb      	ldr	r3, [r7, #12]
 80111fc:	6a3a      	ldr	r2, [r7, #32]
 80111fe:	62da      	str	r2, [r3, #44]	; 0x2c
    }

    /* Increment the number of created byte pools.  */
    _tx_byte_pool_created_count++;
 8011200:	4b09      	ldr	r3, [pc, #36]	; (8011228 <_tx_byte_pool_create+0x124>)
 8011202:	681b      	ldr	r3, [r3, #0]
 8011204:	3301      	adds	r3, #1
 8011206:	4a08      	ldr	r2, [pc, #32]	; (8011228 <_tx_byte_pool_create+0x124>)
 8011208:	6013      	str	r3, [r2, #0]
 801120a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801120c:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801120e:	693b      	ldr	r3, [r7, #16]
 8011210:	f383 8810 	msr	PRIMASK, r3
}
 8011214:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 8011216:	2300      	movs	r3, #0
}
 8011218:	4618      	mov	r0, r3
 801121a:	3738      	adds	r7, #56	; 0x38
 801121c:	46bd      	mov	sp, r7
 801121e:	bd80      	pop	{r7, pc}
 8011220:	ffffeeee 	.word	0xffffeeee
 8011224:	42595445 	.word	0x42595445
 8011228:	2001c9dc 	.word	0x2001c9dc
 801122c:	2001c9d8 	.word	0x2001c9d8

08011230 <_tx_byte_pool_search>:
/*                                            calculation,                */
/*                                            resulting in version 6.1.7  */
/*                                                                        */
/**************************************************************************/
UCHAR  *_tx_byte_pool_search(TX_BYTE_POOL *pool_ptr, ULONG memory_size)
{
 8011230:	b480      	push	{r7}
 8011232:	b097      	sub	sp, #92	; 0x5c
 8011234:	af00      	add	r7, sp, #0
 8011236:	6078      	str	r0, [r7, #4]
 8011238:	6039      	str	r1, [r7, #0]
UCHAR           *next_ptr;
UCHAR           **this_block_link_ptr;
UCHAR           **next_block_link_ptr;
ULONG           available_bytes;
UINT            examine_blocks;
UINT            first_free_block_found =  TX_FALSE;
 801123a:	2300      	movs	r3, #0
 801123c:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801123e:	f3ef 8310 	mrs	r3, PRIMASK
 8011242:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 8011244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    int_posture = __get_interrupt_posture();
 8011246:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSID i" : : : "memory");
 8011248:	b672      	cpsid	i
    return(int_posture);
 801124a:	6a3b      	ldr	r3, [r7, #32]
UCHAR           *work_ptr;
ULONG           total_theoretical_available;


    /* Disable interrupts.  */
    TX_DISABLE
 801124c:	657b      	str	r3, [r7, #84]	; 0x54

    /* First, determine if there are enough bytes in the pool.  */
    /* Theoretical bytes available = free bytes + ((fragments-2) * overhead of each block) */
    total_theoretical_available = pool_ptr -> tx_byte_pool_available + ((pool_ptr -> tx_byte_pool_fragments - 2) * ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE))));
 801124e:	687b      	ldr	r3, [r7, #4]
 8011250:	689a      	ldr	r2, [r3, #8]
 8011252:	687b      	ldr	r3, [r7, #4]
 8011254:	68db      	ldr	r3, [r3, #12]
 8011256:	3b02      	subs	r3, #2
 8011258:	00db      	lsls	r3, r3, #3
 801125a:	4413      	add	r3, r2
 801125c:	643b      	str	r3, [r7, #64]	; 0x40
    if (memory_size >= total_theoretical_available)
 801125e:	683a      	ldr	r2, [r7, #0]
 8011260:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011262:	429a      	cmp	r2, r3
 8011264:	d308      	bcc.n	8011278 <_tx_byte_pool_search+0x48>
 8011266:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011268:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801126a:	69fb      	ldr	r3, [r7, #28]
 801126c:	f383 8810 	msr	PRIMASK, r3
}
 8011270:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Not enough memory, return a NULL pointer.  */
        current_ptr =  TX_NULL;
 8011272:	2300      	movs	r3, #0
 8011274:	653b      	str	r3, [r7, #80]	; 0x50
 8011276:	e0dd      	b.n	8011434 <_tx_byte_pool_search+0x204>
    }
    else
    {

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(thread_ptr)
 8011278:	4b72      	ldr	r3, [pc, #456]	; (8011444 <_tx_byte_pool_search+0x214>)
 801127a:	681b      	ldr	r3, [r3, #0]
 801127c:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Setup ownership of the byte pool.  */
        pool_ptr -> tx_byte_pool_owner =  thread_ptr;
 801127e:	687b      	ldr	r3, [r7, #4]
 8011280:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8011282:	621a      	str	r2, [r3, #32]

        /* Walk through the memory pool in search for a large enough block.  */
        current_ptr =      pool_ptr -> tx_byte_pool_search;
 8011284:	687b      	ldr	r3, [r7, #4]
 8011286:	695b      	ldr	r3, [r3, #20]
 8011288:	653b      	str	r3, [r7, #80]	; 0x50
        examine_blocks =   pool_ptr -> tx_byte_pool_fragments + ((UINT) 1);
 801128a:	687b      	ldr	r3, [r7, #4]
 801128c:	68db      	ldr	r3, [r3, #12]
 801128e:	3301      	adds	r3, #1
 8011290:	64bb      	str	r3, [r7, #72]	; 0x48
        available_bytes =  ((ULONG) 0);
 8011292:	2300      	movs	r3, #0
 8011294:	64fb      	str	r3, [r7, #76]	; 0x4c
            /* Increment the number of fragments searched on this pool.  */
            pool_ptr -> tx_byte_pool_performance_search_count++;
#endif

            /* Check to see if this block is free.  */
            work_ptr =  TX_UCHAR_POINTER_ADD(current_ptr, (sizeof(UCHAR *)));
 8011296:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011298:	3304      	adds	r3, #4
 801129a:	63bb      	str	r3, [r7, #56]	; 0x38
            free_ptr =  TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(work_ptr);
 801129c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801129e:	637b      	str	r3, [r7, #52]	; 0x34
            if ((*free_ptr) == TX_BYTE_BLOCK_FREE)
 80112a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80112a2:	681b      	ldr	r3, [r3, #0]
 80112a4:	4a68      	ldr	r2, [pc, #416]	; (8011448 <_tx_byte_pool_search+0x218>)
 80112a6:	4293      	cmp	r3, r2
 80112a8:	d143      	bne.n	8011332 <_tx_byte_pool_search+0x102>
            {

                /* Determine if this is the first free block.  */
                if (first_free_block_found == TX_FALSE)
 80112aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80112ac:	2b00      	cmp	r3, #0
 80112ae:	d104      	bne.n	80112ba <_tx_byte_pool_search+0x8a>
                {
                    /* This is the first free block.  */
                    pool_ptr->tx_byte_pool_search =  current_ptr;
 80112b0:	687b      	ldr	r3, [r7, #4]
 80112b2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80112b4:	615a      	str	r2, [r3, #20]

                    /* Set the flag to indicate we have found the first free
                       block.  */
                    first_free_block_found =  TX_TRUE;
 80112b6:	2301      	movs	r3, #1
 80112b8:	647b      	str	r3, [r7, #68]	; 0x44
                }

                /* Block is free, see if it is large enough.  */

                /* Pickup the next block's pointer.  */
                this_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 80112ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80112bc:	633b      	str	r3, [r7, #48]	; 0x30
                next_ptr =             *this_block_link_ptr;
 80112be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80112c0:	681b      	ldr	r3, [r3, #0]
 80112c2:	62fb      	str	r3, [r7, #44]	; 0x2c

                /* Calculate the number of bytes available in this block.  */
                available_bytes =   TX_UCHAR_POINTER_DIF(next_ptr, current_ptr);
 80112c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80112c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80112c8:	1ad3      	subs	r3, r2, r3
 80112ca:	64fb      	str	r3, [r7, #76]	; 0x4c
                available_bytes =   available_bytes - ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)));
 80112cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80112ce:	3b08      	subs	r3, #8
 80112d0:	64fb      	str	r3, [r7, #76]	; 0x4c

                /* If this is large enough, we are done because our first-fit algorithm
                   has been satisfied!  */
                if (available_bytes >= memory_size)
 80112d2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80112d4:	683b      	ldr	r3, [r7, #0]
 80112d6:	429a      	cmp	r2, r3
 80112d8:	d257      	bcs.n	801138a <_tx_byte_pool_search+0x15a>
                }
                else
                {

                    /* Clear the available bytes variable.  */
                    available_bytes =  ((ULONG) 0);
 80112da:	2300      	movs	r3, #0
 80112dc:	64fb      	str	r3, [r7, #76]	; 0x4c

                    /* Not enough memory, check to see if the neighbor is
                       free and can be merged.  */
                    work_ptr =  TX_UCHAR_POINTER_ADD(next_ptr, (sizeof(UCHAR *)));
 80112de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80112e0:	3304      	adds	r3, #4
 80112e2:	63bb      	str	r3, [r7, #56]	; 0x38
                    free_ptr =  TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(work_ptr);
 80112e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80112e6:	637b      	str	r3, [r7, #52]	; 0x34
                    if ((*free_ptr) == TX_BYTE_BLOCK_FREE)
 80112e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80112ea:	681b      	ldr	r3, [r3, #0]
 80112ec:	4a56      	ldr	r2, [pc, #344]	; (8011448 <_tx_byte_pool_search+0x218>)
 80112ee:	4293      	cmp	r3, r2
 80112f0:	d113      	bne.n	801131a <_tx_byte_pool_search+0xea>
                    {

                        /* Yes, neighbor block can be merged!  This is quickly accomplished
                           by updating the current block with the next blocks pointer.  */
                        next_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(next_ptr);
 80112f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80112f4:	62bb      	str	r3, [r7, #40]	; 0x28
                        *this_block_link_ptr =  *next_block_link_ptr;
 80112f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80112f8:	681a      	ldr	r2, [r3, #0]
 80112fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80112fc:	601a      	str	r2, [r3, #0]

                        /* Reduce the fragment total.  We don't need to increase the bytes
                           available because all free headers are also included in the available
                           count.  */
                        pool_ptr -> tx_byte_pool_fragments--;
 80112fe:	687b      	ldr	r3, [r7, #4]
 8011300:	68db      	ldr	r3, [r3, #12]
 8011302:	1e5a      	subs	r2, r3, #1
 8011304:	687b      	ldr	r3, [r7, #4]
 8011306:	60da      	str	r2, [r3, #12]
                        /* Increment the number of blocks merged on this pool.  */
                        pool_ptr -> tx_byte_pool_performance_merge_count++;
#endif

                        /* See if the search pointer is affected.  */
                        if (pool_ptr -> tx_byte_pool_search ==  next_ptr)
 8011308:	687b      	ldr	r3, [r7, #4]
 801130a:	695b      	ldr	r3, [r3, #20]
 801130c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801130e:	429a      	cmp	r2, r3
 8011310:	d114      	bne.n	801133c <_tx_byte_pool_search+0x10c>
                        {
                            /* Yes, update the search pointer.   */
                            pool_ptr -> tx_byte_pool_search =  current_ptr;
 8011312:	687b      	ldr	r3, [r7, #4]
 8011314:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8011316:	615a      	str	r2, [r3, #20]
 8011318:	e010      	b.n	801133c <_tx_byte_pool_search+0x10c>
                        }
                    }
                    else
                    {
                        /* Neighbor is not free so we can skip over it!  */
                        next_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(next_ptr);
 801131a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801131c:	62bb      	str	r3, [r7, #40]	; 0x28
                        current_ptr =  *next_block_link_ptr;
 801131e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011320:	681b      	ldr	r3, [r3, #0]
 8011322:	653b      	str	r3, [r7, #80]	; 0x50

                        /* Decrement the examined block count to account for this one.  */
                        if (examine_blocks != ((UINT) 0))
 8011324:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011326:	2b00      	cmp	r3, #0
 8011328:	d008      	beq.n	801133c <_tx_byte_pool_search+0x10c>
                        {
                            examine_blocks--;
 801132a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801132c:	3b01      	subs	r3, #1
 801132e:	64bb      	str	r3, [r7, #72]	; 0x48
 8011330:	e004      	b.n	801133c <_tx_byte_pool_search+0x10c>
            }
            else
            {

                /* Block is not free, move to next block.  */
                this_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 8011332:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011334:	633b      	str	r3, [r7, #48]	; 0x30
                current_ptr =  *this_block_link_ptr;
 8011336:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011338:	681b      	ldr	r3, [r3, #0]
 801133a:	653b      	str	r3, [r7, #80]	; 0x50
            }

            /* Another block has been searched... decrement counter.  */
            if (examine_blocks != ((UINT) 0))
 801133c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801133e:	2b00      	cmp	r3, #0
 8011340:	d002      	beq.n	8011348 <_tx_byte_pool_search+0x118>
            {

                examine_blocks--;
 8011342:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011344:	3b01      	subs	r3, #1
 8011346:	64bb      	str	r3, [r7, #72]	; 0x48
 8011348:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801134a:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801134c:	693b      	ldr	r3, [r7, #16]
 801134e:	f383 8810 	msr	PRIMASK, r3
}
 8011352:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8011354:	f3ef 8310 	mrs	r3, PRIMASK
 8011358:	61bb      	str	r3, [r7, #24]
    return(posture);
 801135a:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 801135c:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 801135e:	b672      	cpsid	i
    return(int_posture);
 8011360:	697b      	ldr	r3, [r7, #20]

            /* Restore interrupts temporarily.  */
            TX_RESTORE

            /* Disable interrupts.  */
            TX_DISABLE
 8011362:	657b      	str	r3, [r7, #84]	; 0x54

            /* Determine if anything has changed in terms of pool ownership.  */
            if (pool_ptr -> tx_byte_pool_owner != thread_ptr)
 8011364:	687b      	ldr	r3, [r7, #4]
 8011366:	6a1b      	ldr	r3, [r3, #32]
 8011368:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801136a:	429a      	cmp	r2, r3
 801136c:	d009      	beq.n	8011382 <_tx_byte_pool_search+0x152>
            {

                /* Pool changed ownership in the brief period interrupts were
                   enabled.  Reset the search.  */
                current_ptr =      pool_ptr -> tx_byte_pool_search;
 801136e:	687b      	ldr	r3, [r7, #4]
 8011370:	695b      	ldr	r3, [r3, #20]
 8011372:	653b      	str	r3, [r7, #80]	; 0x50
                examine_blocks =   pool_ptr -> tx_byte_pool_fragments + ((UINT) 1);
 8011374:	687b      	ldr	r3, [r7, #4]
 8011376:	68db      	ldr	r3, [r3, #12]
 8011378:	3301      	adds	r3, #1
 801137a:	64bb      	str	r3, [r7, #72]	; 0x48

                /* Setup our ownership again.  */
                pool_ptr -> tx_byte_pool_owner =  thread_ptr;
 801137c:	687b      	ldr	r3, [r7, #4]
 801137e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8011380:	621a      	str	r2, [r3, #32]
            }
        } while(examine_blocks != ((UINT) 0));
 8011382:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011384:	2b00      	cmp	r3, #0
 8011386:	d186      	bne.n	8011296 <_tx_byte_pool_search+0x66>
 8011388:	e000      	b.n	801138c <_tx_byte_pool_search+0x15c>
                    break;
 801138a:	bf00      	nop

        /* Determine if a block was found.  If so, determine if it needs to be
           split.  */
        if (available_bytes != ((ULONG) 0))
 801138c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801138e:	2b00      	cmp	r3, #0
 8011390:	d048      	beq.n	8011424 <_tx_byte_pool_search+0x1f4>
        {

            /* Determine if we need to split this block.  */
            if ((available_bytes - memory_size) >= ((ULONG) TX_BYTE_BLOCK_MIN))
 8011392:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8011394:	683b      	ldr	r3, [r7, #0]
 8011396:	1ad3      	subs	r3, r2, r3
 8011398:	2b13      	cmp	r3, #19
 801139a:	d91e      	bls.n	80113da <_tx_byte_pool_search+0x1aa>
            {

                /* Split the block.  */
                next_ptr =  TX_UCHAR_POINTER_ADD(current_ptr, (memory_size + ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)))));
 801139c:	683b      	ldr	r3, [r7, #0]
 801139e:	3308      	adds	r3, #8
 80113a0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80113a2:	4413      	add	r3, r2
 80113a4:	62fb      	str	r3, [r7, #44]	; 0x2c

                /* Setup the new free block.  */
                next_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(next_ptr);
 80113a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80113a8:	62bb      	str	r3, [r7, #40]	; 0x28
                this_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 80113aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80113ac:	633b      	str	r3, [r7, #48]	; 0x30
                *next_block_link_ptr =  *this_block_link_ptr;
 80113ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80113b0:	681a      	ldr	r2, [r3, #0]
 80113b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80113b4:	601a      	str	r2, [r3, #0]
                work_ptr =              TX_UCHAR_POINTER_ADD(next_ptr, (sizeof(UCHAR *)));
 80113b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80113b8:	3304      	adds	r3, #4
 80113ba:	63bb      	str	r3, [r7, #56]	; 0x38
                free_ptr =              TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(work_ptr);
 80113bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80113be:	637b      	str	r3, [r7, #52]	; 0x34
                *free_ptr =             TX_BYTE_BLOCK_FREE;
 80113c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80113c2:	4a21      	ldr	r2, [pc, #132]	; (8011448 <_tx_byte_pool_search+0x218>)
 80113c4:	601a      	str	r2, [r3, #0]

                /* Increase the total fragment counter.  */
                pool_ptr -> tx_byte_pool_fragments++;
 80113c6:	687b      	ldr	r3, [r7, #4]
 80113c8:	68db      	ldr	r3, [r3, #12]
 80113ca:	1c5a      	adds	r2, r3, #1
 80113cc:	687b      	ldr	r3, [r7, #4]
 80113ce:	60da      	str	r2, [r3, #12]

                /* Update the current pointer to point at the newly created block.  */
                *this_block_link_ptr =  next_ptr;
 80113d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80113d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80113d4:	601a      	str	r2, [r3, #0]

                /* Set available equal to memory size for subsequent calculation.  */
                available_bytes =  memory_size;
 80113d6:	683b      	ldr	r3, [r7, #0]
 80113d8:	64fb      	str	r3, [r7, #76]	; 0x4c
                pool_ptr -> tx_byte_pool_performance_split_count++;
#endif
            }

            /* In any case, mark the current block as allocated.  */
            work_ptr =              TX_UCHAR_POINTER_ADD(current_ptr, (sizeof(UCHAR *)));
 80113da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80113dc:	3304      	adds	r3, #4
 80113de:	63bb      	str	r3, [r7, #56]	; 0x38
            this_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(work_ptr);
 80113e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80113e2:	633b      	str	r3, [r7, #48]	; 0x30
            *this_block_link_ptr =  TX_BYTE_POOL_TO_UCHAR_POINTER_CONVERT(pool_ptr);
 80113e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80113e6:	687a      	ldr	r2, [r7, #4]
 80113e8:	601a      	str	r2, [r3, #0]

            /* Reduce the number of available bytes in the pool.  */
            pool_ptr -> tx_byte_pool_available =  (pool_ptr -> tx_byte_pool_available - available_bytes) - ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)));
 80113ea:	687b      	ldr	r3, [r7, #4]
 80113ec:	689a      	ldr	r2, [r3, #8]
 80113ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80113f0:	1ad3      	subs	r3, r2, r3
 80113f2:	f1a3 0208 	sub.w	r2, r3, #8
 80113f6:	687b      	ldr	r3, [r7, #4]
 80113f8:	609a      	str	r2, [r3, #8]

            /* Determine if the search pointer needs to be updated. This is only done
               if the search pointer matches the block to be returned.  */
            if (current_ptr == pool_ptr -> tx_byte_pool_search)
 80113fa:	687b      	ldr	r3, [r7, #4]
 80113fc:	695b      	ldr	r3, [r3, #20]
 80113fe:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8011400:	429a      	cmp	r2, r3
 8011402:	d105      	bne.n	8011410 <_tx_byte_pool_search+0x1e0>
            {

                /* Yes, update the search pointer to the next block.  */
                this_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 8011404:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011406:	633b      	str	r3, [r7, #48]	; 0x30
                pool_ptr -> tx_byte_pool_search =  *this_block_link_ptr;
 8011408:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801140a:	681a      	ldr	r2, [r3, #0]
 801140c:	687b      	ldr	r3, [r7, #4]
 801140e:	615a      	str	r2, [r3, #20]
 8011410:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011412:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8011414:	68fb      	ldr	r3, [r7, #12]
 8011416:	f383 8810 	msr	PRIMASK, r3
}
 801141a:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Adjust the pointer for the application.  */
            current_ptr =  TX_UCHAR_POINTER_ADD(current_ptr, (((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)))));
 801141c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801141e:	3308      	adds	r3, #8
 8011420:	653b      	str	r3, [r7, #80]	; 0x50
 8011422:	e007      	b.n	8011434 <_tx_byte_pool_search+0x204>
 8011424:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011426:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8011428:	68bb      	ldr	r3, [r7, #8]
 801142a:	f383 8810 	msr	PRIMASK, r3
}
 801142e:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Set current pointer to NULL to indicate nothing was found.  */
            current_ptr =  TX_NULL;
 8011430:	2300      	movs	r3, #0
 8011432:	653b      	str	r3, [r7, #80]	; 0x50
        }
    }

    /* Return the search pointer.  */
    return(current_ptr);
 8011434:	6d3b      	ldr	r3, [r7, #80]	; 0x50
}
 8011436:	4618      	mov	r0, r3
 8011438:	375c      	adds	r7, #92	; 0x5c
 801143a:	46bd      	mov	sp, r7
 801143c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011440:	4770      	bx	lr
 8011442:	bf00      	nop
 8011444:	2001c9e8 	.word	0x2001c9e8
 8011448:	ffffeeee 	.word	0xffffeeee

0801144c <_tx_initialize_high_level>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID    _tx_initialize_high_level(VOID)
{
 801144c:	b580      	push	{r7, lr}
 801144e:	af00      	add	r7, sp, #0

    /* Initialize the event log, if enabled.  */
    TX_EL_INITIALIZE

    /* Call the thread control initialization function.  */
    _tx_thread_initialize();
 8011450:	f001 f8d0 	bl	80125f4 <_tx_thread_initialize>

#ifndef TX_NO_TIMER

    /* Call the timer control initialization function.  */
    _tx_timer_initialize();
 8011454:	f001 fe0e 	bl	8013074 <_tx_timer_initialize>
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Call the semaphore initialization function.  */
    _tx_semaphore_initialize();
 8011458:	4b12      	ldr	r3, [pc, #72]	; (80114a4 <_tx_initialize_high_level+0x58>)
 801145a:	2200      	movs	r2, #0
 801145c:	601a      	str	r2, [r3, #0]
 801145e:	4b12      	ldr	r3, [pc, #72]	; (80114a8 <_tx_initialize_high_level+0x5c>)
 8011460:	2200      	movs	r2, #0
 8011462:	601a      	str	r2, [r3, #0]

    /* Call the queue initialization function.  */
    _tx_queue_initialize();
 8011464:	4b11      	ldr	r3, [pc, #68]	; (80114ac <_tx_initialize_high_level+0x60>)
 8011466:	2200      	movs	r2, #0
 8011468:	601a      	str	r2, [r3, #0]
 801146a:	4b11      	ldr	r3, [pc, #68]	; (80114b0 <_tx_initialize_high_level+0x64>)
 801146c:	2200      	movs	r2, #0
 801146e:	601a      	str	r2, [r3, #0]

    /* Call the event flag initialization function.  */
    _tx_event_flags_initialize();
 8011470:	4b10      	ldr	r3, [pc, #64]	; (80114b4 <_tx_initialize_high_level+0x68>)
 8011472:	2200      	movs	r2, #0
 8011474:	601a      	str	r2, [r3, #0]
 8011476:	4b10      	ldr	r3, [pc, #64]	; (80114b8 <_tx_initialize_high_level+0x6c>)
 8011478:	2200      	movs	r2, #0
 801147a:	601a      	str	r2, [r3, #0]

    /* Call the block pool initialization function.  */
    _tx_block_pool_initialize();
 801147c:	4b0f      	ldr	r3, [pc, #60]	; (80114bc <_tx_initialize_high_level+0x70>)
 801147e:	2200      	movs	r2, #0
 8011480:	601a      	str	r2, [r3, #0]
 8011482:	4b0f      	ldr	r3, [pc, #60]	; (80114c0 <_tx_initialize_high_level+0x74>)
 8011484:	2200      	movs	r2, #0
 8011486:	601a      	str	r2, [r3, #0]

    /* Call the byte pool initialization function.  */
    _tx_byte_pool_initialize();
 8011488:	4b0e      	ldr	r3, [pc, #56]	; (80114c4 <_tx_initialize_high_level+0x78>)
 801148a:	2200      	movs	r2, #0
 801148c:	601a      	str	r2, [r3, #0]
 801148e:	4b0e      	ldr	r3, [pc, #56]	; (80114c8 <_tx_initialize_high_level+0x7c>)
 8011490:	2200      	movs	r2, #0
 8011492:	601a      	str	r2, [r3, #0]

    /* Call the mutex initialization function.  */
    _tx_mutex_initialize();
 8011494:	4b0d      	ldr	r3, [pc, #52]	; (80114cc <_tx_initialize_high_level+0x80>)
 8011496:	2200      	movs	r2, #0
 8011498:	601a      	str	r2, [r3, #0]
 801149a:	4b0d      	ldr	r3, [pc, #52]	; (80114d0 <_tx_initialize_high_level+0x84>)
 801149c:	2200      	movs	r2, #0
 801149e:	601a      	str	r2, [r3, #0]
#endif
}
 80114a0:	bf00      	nop
 80114a2:	bd80      	pop	{r7, pc}
 80114a4:	2001c9b0 	.word	0x2001c9b0
 80114a8:	2001c9b4 	.word	0x2001c9b4
 80114ac:	2001c9b8 	.word	0x2001c9b8
 80114b0:	2001c9bc 	.word	0x2001c9bc
 80114b4:	2001c9c0 	.word	0x2001c9c0
 80114b8:	2001c9c4 	.word	0x2001c9c4
 80114bc:	2001c9d0 	.word	0x2001c9d0
 80114c0:	2001c9d4 	.word	0x2001c9d4
 80114c4:	2001c9d8 	.word	0x2001c9d8
 80114c8:	2001c9dc 	.word	0x2001c9dc
 80114cc:	2001c9c8 	.word	0x2001c9c8
 80114d0:	2001c9cc 	.word	0x2001c9cc

080114d4 <_tx_initialize_kernel_enter>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_initialize_kernel_enter(VOID)
{
 80114d4:	b580      	push	{r7, lr}
 80114d6:	af00      	add	r7, sp, #0

    /* Determine if the compiler has pre-initialized ThreadX.  */
    if (_tx_thread_system_state != TX_INITIALIZE_ALMOST_DONE)
 80114d8:	4b10      	ldr	r3, [pc, #64]	; (801151c <_tx_initialize_kernel_enter+0x48>)
 80114da:	681b      	ldr	r3, [r3, #0]
 80114dc:	f113 3f0f 	cmn.w	r3, #252645135	; 0xf0f0f0f
 80114e0:	d00c      	beq.n	80114fc <_tx_initialize_kernel_enter+0x28>
        /* No, the initialization still needs to take place.  */

        /* Ensure that the system state variable is set to indicate
           initialization is in progress.  Note that this variable is
           later used to represent interrupt nesting.  */
        _tx_thread_system_state =  TX_INITIALIZE_IN_PROGRESS;
 80114e2:	4b0e      	ldr	r3, [pc, #56]	; (801151c <_tx_initialize_kernel_enter+0x48>)
 80114e4:	f04f 32f0 	mov.w	r2, #4042322160	; 0xf0f0f0f0
 80114e8:	601a      	str	r2, [r3, #0]
        /* Call any port specific preprocessing.  */
        TX_PORT_SPECIFIC_PRE_INITIALIZATION

        /* Invoke the low-level initialization to handle all processor specific
           initialization issues.  */
        _tx_initialize_low_level();
 80114ea:	f7ee fec3 	bl	8000274 <_tx_initialize_low_level>

        /* Invoke the high-level initialization to exercise all of the
           ThreadX components and the application's initialization
           function.  */
        _tx_initialize_high_level();
 80114ee:	f7ff ffad 	bl	801144c <_tx_initialize_high_level>

        /* Call any port specific post-processing.  */
        TX_PORT_SPECIFIC_POST_INITIALIZATION
 80114f2:	4b0b      	ldr	r3, [pc, #44]	; (8011520 <_tx_initialize_kernel_enter+0x4c>)
 80114f4:	681b      	ldr	r3, [r3, #0]
 80114f6:	3301      	adds	r3, #1
 80114f8:	4a09      	ldr	r2, [pc, #36]	; (8011520 <_tx_initialize_kernel_enter+0x4c>)
 80114fa:	6013      	str	r3, [r2, #0]
    TX_INITIALIZE_KERNEL_ENTER_EXTENSION

    /* Ensure that the system state variable is set to indicate
       initialization is in progress.  Note that this variable is
       later used to represent interrupt nesting.  */
    _tx_thread_system_state =  TX_INITIALIZE_IN_PROGRESS;
 80114fc:	4b07      	ldr	r3, [pc, #28]	; (801151c <_tx_initialize_kernel_enter+0x48>)
 80114fe:	f04f 32f0 	mov.w	r2, #4042322160	; 0xf0f0f0f0
 8011502:	601a      	str	r2, [r3, #0]

    /* Call the application provided initialization function.  Pass the
       first available memory address to it.  */
    tx_application_define(_tx_initialize_unused_memory);
 8011504:	4b07      	ldr	r3, [pc, #28]	; (8011524 <_tx_initialize_kernel_enter+0x50>)
 8011506:	681b      	ldr	r3, [r3, #0]
 8011508:	4618      	mov	r0, r3
 801150a:	f7ef fd7f 	bl	800100c <tx_application_define>

    /* Set the system state in preparation for entering the thread
       scheduler.  */
    _tx_thread_system_state =  TX_INITIALIZE_IS_FINISHED;
 801150e:	4b03      	ldr	r3, [pc, #12]	; (801151c <_tx_initialize_kernel_enter+0x48>)
 8011510:	2200      	movs	r2, #0
 8011512:	601a      	str	r2, [r3, #0]

    /* Call any port specific pre-scheduler processing.  */
    TX_PORT_SPECIFIC_PRE_SCHEDULER_INITIALIZATION

    /* Enter the scheduling loop to start executing threads!  */
    _tx_thread_schedule();
 8011514:	f7ee feea 	bl	80002ec <_tx_thread_schedule>
#ifdef TX_SAFETY_CRITICAL

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif
}
 8011518:	bf00      	nop
 801151a:	bd80      	pop	{r7, pc}
 801151c:	2000000c 	.word	0x2000000c
 8011520:	2001ca80 	.word	0x2001ca80
 8011524:	2001c9e0 	.word	0x2001c9e0

08011528 <_tx_mutex_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_mutex_cleanup(TX_THREAD  *thread_ptr, ULONG suspension_sequence)
{
 8011528:	b580      	push	{r7, lr}
 801152a:	b08e      	sub	sp, #56	; 0x38
 801152c:	af00      	add	r7, sp, #0
 801152e:	6078      	str	r0, [r7, #4]
 8011530:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8011532:	f3ef 8310 	mrs	r3, PRIMASK
 8011536:	623b      	str	r3, [r7, #32]
    return(posture);
 8011538:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 801153a:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 801153c:	b672      	cpsid	i
    return(int_posture);
 801153e:	69fb      	ldr	r3, [r7, #28]


#ifndef TX_NOT_INTERRUPTABLE

    /* Disable interrupts to remove the suspended thread from the mutex.  */
    TX_DISABLE
 8011540:	637b      	str	r3, [r7, #52]	; 0x34

    /* Determine if the cleanup is still required.  */
    if (thread_ptr -> tx_thread_suspend_cleanup == &(_tx_mutex_cleanup))
 8011542:	687b      	ldr	r3, [r7, #4]
 8011544:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8011546:	4a33      	ldr	r2, [pc, #204]	; (8011614 <_tx_mutex_cleanup+0xec>)
 8011548:	4293      	cmp	r3, r2
 801154a:	d158      	bne.n	80115fe <_tx_mutex_cleanup+0xd6>
    {

        /* Check for valid suspension sequence.  */
        if (suspension_sequence == thread_ptr -> tx_thread_suspension_sequence)
 801154c:	687b      	ldr	r3, [r7, #4]
 801154e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8011552:	683a      	ldr	r2, [r7, #0]
 8011554:	429a      	cmp	r2, r3
 8011556:	d152      	bne.n	80115fe <_tx_mutex_cleanup+0xd6>
        {

            /* Setup pointer to mutex control block.  */
            mutex_ptr =  TX_VOID_TO_MUTEX_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
 8011558:	687b      	ldr	r3, [r7, #4]
 801155a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801155c:	633b      	str	r3, [r7, #48]	; 0x30

            /* Check for NULL mutex pointer.  */
            if (mutex_ptr != TX_NULL)
 801155e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011560:	2b00      	cmp	r3, #0
 8011562:	d04c      	beq.n	80115fe <_tx_mutex_cleanup+0xd6>
            {

                /* Determine if the mutex ID is valid.  */
                if (mutex_ptr -> tx_mutex_id == TX_MUTEX_ID)
 8011564:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011566:	681b      	ldr	r3, [r3, #0]
 8011568:	4a2b      	ldr	r2, [pc, #172]	; (8011618 <_tx_mutex_cleanup+0xf0>)
 801156a:	4293      	cmp	r3, r2
 801156c:	d147      	bne.n	80115fe <_tx_mutex_cleanup+0xd6>
                {

                    /* Determine if there are any thread suspensions.  */
                    if (mutex_ptr -> tx_mutex_suspended_count != TX_NO_SUSPENSIONS)
 801156e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011570:	69db      	ldr	r3, [r3, #28]
 8011572:	2b00      	cmp	r3, #0
 8011574:	d043      	beq.n	80115fe <_tx_mutex_cleanup+0xd6>
#endif

                        /* Yes, we still have thread suspension!  */

                        /* Clear the suspension cleanup flag.  */
                        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8011576:	687b      	ldr	r3, [r7, #4]
 8011578:	2200      	movs	r2, #0
 801157a:	669a      	str	r2, [r3, #104]	; 0x68

                        /* Decrement the suspension count.  */
                        mutex_ptr -> tx_mutex_suspended_count--;
 801157c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801157e:	69db      	ldr	r3, [r3, #28]
 8011580:	1e5a      	subs	r2, r3, #1
 8011582:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011584:	61da      	str	r2, [r3, #28]

                        /* Pickup the suspended count.  */
                        suspended_count =  mutex_ptr -> tx_mutex_suspended_count;
 8011586:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011588:	69db      	ldr	r3, [r3, #28]
 801158a:	62fb      	str	r3, [r7, #44]	; 0x2c

                        /* Remove the suspended thread from the list.  */

                        /* See if this is the only suspended thread on the list.  */
                        if (suspended_count == TX_NO_SUSPENSIONS)
 801158c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801158e:	2b00      	cmp	r3, #0
 8011590:	d103      	bne.n	801159a <_tx_mutex_cleanup+0x72>
                        {

                            /* Yes, the only suspended thread.  */

                            /* Update the head pointer.  */
                            mutex_ptr -> tx_mutex_suspension_list =  TX_NULL;
 8011592:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011594:	2200      	movs	r2, #0
 8011596:	619a      	str	r2, [r3, #24]
 8011598:	e013      	b.n	80115c2 <_tx_mutex_cleanup+0x9a>
                        {

                            /* At least one more thread is on the same suspension list.  */

                            /* Update the links of the adjacent threads.  */
                            next_thread =                                   thread_ptr -> tx_thread_suspended_next;
 801159a:	687b      	ldr	r3, [r7, #4]
 801159c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801159e:	62bb      	str	r3, [r7, #40]	; 0x28
                            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 80115a0:	687b      	ldr	r3, [r7, #4]
 80115a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80115a4:	627b      	str	r3, [r7, #36]	; 0x24
                            next_thread -> tx_thread_suspended_previous =   previous_thread;
 80115a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80115a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80115aa:	675a      	str	r2, [r3, #116]	; 0x74
                            previous_thread -> tx_thread_suspended_next =   next_thread;
 80115ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80115ae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80115b0:	671a      	str	r2, [r3, #112]	; 0x70

                            /* Determine if we need to update the head pointer.  */
                            if (mutex_ptr -> tx_mutex_suspension_list == thread_ptr)
 80115b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80115b4:	699b      	ldr	r3, [r3, #24]
 80115b6:	687a      	ldr	r2, [r7, #4]
 80115b8:	429a      	cmp	r2, r3
 80115ba:	d102      	bne.n	80115c2 <_tx_mutex_cleanup+0x9a>
                            {

                                /* Update the list head pointer.  */
                                mutex_ptr -> tx_mutex_suspension_list =         next_thread;
 80115bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80115be:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80115c0:	619a      	str	r2, [r3, #24]
                            }
                        }

                        /* Now we need to determine if this cleanup is from a terminate, timeout,
                           or from a wait abort.  */
                        if (thread_ptr -> tx_thread_state == TX_MUTEX_SUSP)
 80115c2:	687b      	ldr	r3, [r7, #4]
 80115c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80115c6:	2b0d      	cmp	r3, #13
 80115c8:	d119      	bne.n	80115fe <_tx_mutex_cleanup+0xd6>
                            /* Increment the number of timeouts on this semaphore.  */
                            mutex_ptr -> tx_mutex_performance_timeout_count++;
#endif

                            /* Setup return status.  */
                            thread_ptr -> tx_thread_suspend_status =  TX_NOT_AVAILABLE;
 80115ca:	687b      	ldr	r3, [r7, #4]
 80115cc:	221d      	movs	r2, #29
 80115ce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                            /* Resume the thread!  */
                            _tx_thread_system_ni_resume(thread_ptr);
#else

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 80115d2:	4b12      	ldr	r3, [pc, #72]	; (801161c <_tx_mutex_cleanup+0xf4>)
 80115d4:	681b      	ldr	r3, [r3, #0]
 80115d6:	3301      	adds	r3, #1
 80115d8:	4a10      	ldr	r2, [pc, #64]	; (801161c <_tx_mutex_cleanup+0xf4>)
 80115da:	6013      	str	r3, [r2, #0]
 80115dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80115de:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80115e0:	693b      	ldr	r3, [r7, #16]
 80115e2:	f383 8810 	msr	PRIMASK, r3
}
 80115e6:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Resume the thread!  */
                            _tx_thread_system_resume(thread_ptr);
 80115e8:	6878      	ldr	r0, [r7, #4]
 80115ea:	f001 fa7b 	bl	8012ae4 <_tx_thread_system_resume>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80115ee:	f3ef 8310 	mrs	r3, PRIMASK
 80115f2:	61bb      	str	r3, [r7, #24]
    return(posture);
 80115f4:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 80115f6:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 80115f8:	b672      	cpsid	i
    return(int_posture);
 80115fa:	697b      	ldr	r3, [r7, #20]

                            /* Disable interrupts.  */
                            TX_DISABLE
 80115fc:	637b      	str	r3, [r7, #52]	; 0x34
 80115fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011600:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8011602:	68fb      	ldr	r3, [r7, #12]
 8011604:	f383 8810 	msr	PRIMASK, r3
}
 8011608:	bf00      	nop
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 801160a:	bf00      	nop
 801160c:	3738      	adds	r7, #56	; 0x38
 801160e:	46bd      	mov	sp, r7
 8011610:	bd80      	pop	{r7, pc}
 8011612:	bf00      	nop
 8011614:	08011529 	.word	0x08011529
 8011618:	4d555445 	.word	0x4d555445
 801161c:	2001ca80 	.word	0x2001ca80

08011620 <_tx_mutex_thread_release>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_mutex_thread_release(TX_THREAD  *thread_ptr)
{
 8011620:	b580      	push	{r7, lr}
 8011622:	b08a      	sub	sp, #40	; 0x28
 8011624:	af00      	add	r7, sp, #0
 8011626:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8011628:	f3ef 8310 	mrs	r3, PRIMASK
 801162c:	61fb      	str	r3, [r7, #28]
    return(posture);
 801162e:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 8011630:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 8011632:	b672      	cpsid	i
    return(int_posture);
 8011634:	69bb      	ldr	r3, [r7, #24]
UINT        status;
#endif


    /* Disable interrupts.  */
    TX_DISABLE
 8011636:	627b      	str	r3, [r7, #36]	; 0x24

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 8011638:	4b1a      	ldr	r3, [pc, #104]	; (80116a4 <_tx_mutex_thread_release+0x84>)
 801163a:	681b      	ldr	r3, [r3, #0]
 801163c:	3301      	adds	r3, #1
 801163e:	4a19      	ldr	r2, [pc, #100]	; (80116a4 <_tx_mutex_thread_release+0x84>)
 8011640:	6013      	str	r3, [r2, #0]
    /* Loop to look at all the mutexes.  */
    do
    {

        /* Pickup the mutex head pointer.  */
        mutex_ptr =  thread_ptr -> tx_thread_owned_mutex_list;
 8011642:	687b      	ldr	r3, [r7, #4]
 8011644:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8011648:	623b      	str	r3, [r7, #32]

        /* Determine if there is a mutex.  */
        if (mutex_ptr != TX_NULL)
 801164a:	6a3b      	ldr	r3, [r7, #32]
 801164c:	2b00      	cmp	r3, #0
 801164e:	d017      	beq.n	8011680 <_tx_mutex_thread_release+0x60>
        {

            /* Yes, set the ownership count to 1.  */
            mutex_ptr -> tx_mutex_ownership_count =  ((UINT) 1);
 8011650:	6a3b      	ldr	r3, [r7, #32]
 8011652:	2201      	movs	r2, #1
 8011654:	609a      	str	r2, [r3, #8]
 8011656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011658:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801165a:	68fb      	ldr	r3, [r7, #12]
 801165c:	f383 8810 	msr	PRIMASK, r3
}
 8011660:	bf00      	nop
            do
            {
                status =  _tx_mutex_put(mutex_ptr);
            } while (status != TX_SUCCESS);
#else
            _tx_mutex_put(mutex_ptr);
 8011662:	6a38      	ldr	r0, [r7, #32]
 8011664:	f000 faf2 	bl	8011c4c <_tx_mutex_put>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8011668:	f3ef 8310 	mrs	r3, PRIMASK
 801166c:	617b      	str	r3, [r7, #20]
    return(posture);
 801166e:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 8011670:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 8011672:	b672      	cpsid	i
    return(int_posture);
 8011674:	693b      	ldr	r3, [r7, #16]
#endif

            /* Disable interrupts.  */
            TX_DISABLE
 8011676:	627b      	str	r3, [r7, #36]	; 0x24

            /* Move to the next mutex.  */
            mutex_ptr =  thread_ptr -> tx_thread_owned_mutex_list;
 8011678:	687b      	ldr	r3, [r7, #4]
 801167a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 801167e:	623b      	str	r3, [r7, #32]
        }
    } while (mutex_ptr != TX_NULL);
 8011680:	6a3b      	ldr	r3, [r7, #32]
 8011682:	2b00      	cmp	r3, #0
 8011684:	d1dd      	bne.n	8011642 <_tx_mutex_thread_release+0x22>

    /* Restore preemption.  */
    _tx_thread_preempt_disable--;
 8011686:	4b07      	ldr	r3, [pc, #28]	; (80116a4 <_tx_mutex_thread_release+0x84>)
 8011688:	681b      	ldr	r3, [r3, #0]
 801168a:	3b01      	subs	r3, #1
 801168c:	4a05      	ldr	r2, [pc, #20]	; (80116a4 <_tx_mutex_thread_release+0x84>)
 801168e:	6013      	str	r3, [r2, #0]
 8011690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011692:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8011694:	68bb      	ldr	r3, [r7, #8]
 8011696:	f383 8810 	msr	PRIMASK, r3
}
 801169a:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE
}
 801169c:	bf00      	nop
 801169e:	3728      	adds	r7, #40	; 0x28
 80116a0:	46bd      	mov	sp, r7
 80116a2:	bd80      	pop	{r7, pc}
 80116a4:	2001ca80 	.word	0x2001ca80

080116a8 <_tx_mutex_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_mutex_create(TX_MUTEX *mutex_ptr, CHAR *name_ptr, UINT inherit)
{
 80116a8:	b580      	push	{r7, lr}
 80116aa:	b08a      	sub	sp, #40	; 0x28
 80116ac:	af00      	add	r7, sp, #0
 80116ae:	60f8      	str	r0, [r7, #12]
 80116b0:	60b9      	str	r1, [r7, #8]
 80116b2:	607a      	str	r2, [r7, #4]
TX_MUTEX        *next_mutex;
TX_MUTEX        *previous_mutex;


    /* Initialize mutex control block to all zeros.  */
    TX_MEMSET(mutex_ptr, 0, (sizeof(TX_MUTEX)));
 80116b4:	2234      	movs	r2, #52	; 0x34
 80116b6:	2100      	movs	r1, #0
 80116b8:	68f8      	ldr	r0, [r7, #12]
 80116ba:	f002 fbaf 	bl	8013e1c <memset>

    /* Setup the basic mutex fields.  */
    mutex_ptr -> tx_mutex_name =             name_ptr;
 80116be:	68fb      	ldr	r3, [r7, #12]
 80116c0:	68ba      	ldr	r2, [r7, #8]
 80116c2:	605a      	str	r2, [r3, #4]
    mutex_ptr -> tx_mutex_inherit =          inherit;
 80116c4:	68fb      	ldr	r3, [r7, #12]
 80116c6:	687a      	ldr	r2, [r7, #4]
 80116c8:	611a      	str	r2, [r3, #16]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80116ca:	f3ef 8310 	mrs	r3, PRIMASK
 80116ce:	61bb      	str	r3, [r7, #24]
    return(posture);
 80116d0:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 80116d2:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 80116d4:	b672      	cpsid	i
    return(int_posture);
 80116d6:	697b      	ldr	r3, [r7, #20]

    /* Disable interrupts to place the mutex on the created list.  */
    TX_DISABLE
 80116d8:	627b      	str	r3, [r7, #36]	; 0x24

    /* Setup the mutex ID to make it valid.  */
    mutex_ptr -> tx_mutex_id =  TX_MUTEX_ID;
 80116da:	68fb      	ldr	r3, [r7, #12]
 80116dc:	4a1a      	ldr	r2, [pc, #104]	; (8011748 <_tx_mutex_create+0xa0>)
 80116de:	601a      	str	r2, [r3, #0]

    /* Setup the thread mutex release function pointer.  */
    _tx_thread_mutex_release =  &(_tx_mutex_thread_release);
 80116e0:	4b1a      	ldr	r3, [pc, #104]	; (801174c <_tx_mutex_create+0xa4>)
 80116e2:	4a1b      	ldr	r2, [pc, #108]	; (8011750 <_tx_mutex_create+0xa8>)
 80116e4:	601a      	str	r2, [r3, #0]

    /* Place the mutex on the list of created mutexes.  First,
       check for an empty list.  */
    if (_tx_mutex_created_count == TX_EMPTY)
 80116e6:	4b1b      	ldr	r3, [pc, #108]	; (8011754 <_tx_mutex_create+0xac>)
 80116e8:	681b      	ldr	r3, [r3, #0]
 80116ea:	2b00      	cmp	r3, #0
 80116ec:	d109      	bne.n	8011702 <_tx_mutex_create+0x5a>
    {

        /* The created mutex list is empty.  Add mutex to empty list.  */
        _tx_mutex_created_ptr =                   mutex_ptr;
 80116ee:	4a1a      	ldr	r2, [pc, #104]	; (8011758 <_tx_mutex_create+0xb0>)
 80116f0:	68fb      	ldr	r3, [r7, #12]
 80116f2:	6013      	str	r3, [r2, #0]
        mutex_ptr -> tx_mutex_created_next =      mutex_ptr;
 80116f4:	68fb      	ldr	r3, [r7, #12]
 80116f6:	68fa      	ldr	r2, [r7, #12]
 80116f8:	621a      	str	r2, [r3, #32]
        mutex_ptr -> tx_mutex_created_previous =  mutex_ptr;
 80116fa:	68fb      	ldr	r3, [r7, #12]
 80116fc:	68fa      	ldr	r2, [r7, #12]
 80116fe:	625a      	str	r2, [r3, #36]	; 0x24
 8011700:	e011      	b.n	8011726 <_tx_mutex_create+0x7e>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_mutex =      _tx_mutex_created_ptr;
 8011702:	4b15      	ldr	r3, [pc, #84]	; (8011758 <_tx_mutex_create+0xb0>)
 8011704:	681b      	ldr	r3, [r3, #0]
 8011706:	623b      	str	r3, [r7, #32]
        previous_mutex =  next_mutex -> tx_mutex_created_previous;
 8011708:	6a3b      	ldr	r3, [r7, #32]
 801170a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801170c:	61fb      	str	r3, [r7, #28]

        /* Place the new mutex in the list.  */
        next_mutex -> tx_mutex_created_previous =  mutex_ptr;
 801170e:	6a3b      	ldr	r3, [r7, #32]
 8011710:	68fa      	ldr	r2, [r7, #12]
 8011712:	625a      	str	r2, [r3, #36]	; 0x24
        previous_mutex -> tx_mutex_created_next =  mutex_ptr;
 8011714:	69fb      	ldr	r3, [r7, #28]
 8011716:	68fa      	ldr	r2, [r7, #12]
 8011718:	621a      	str	r2, [r3, #32]

        /* Setup this mutex's next and previous created links.  */
        mutex_ptr -> tx_mutex_created_previous =  previous_mutex;
 801171a:	68fb      	ldr	r3, [r7, #12]
 801171c:	69fa      	ldr	r2, [r7, #28]
 801171e:	625a      	str	r2, [r3, #36]	; 0x24
        mutex_ptr -> tx_mutex_created_next =      next_mutex;
 8011720:	68fb      	ldr	r3, [r7, #12]
 8011722:	6a3a      	ldr	r2, [r7, #32]
 8011724:	621a      	str	r2, [r3, #32]
    }

    /* Increment the ownership count.  */
    _tx_mutex_created_count++;
 8011726:	4b0b      	ldr	r3, [pc, #44]	; (8011754 <_tx_mutex_create+0xac>)
 8011728:	681b      	ldr	r3, [r3, #0]
 801172a:	3301      	adds	r3, #1
 801172c:	4a09      	ldr	r2, [pc, #36]	; (8011754 <_tx_mutex_create+0xac>)
 801172e:	6013      	str	r3, [r2, #0]
 8011730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011732:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8011734:	693b      	ldr	r3, [r7, #16]
 8011736:	f383 8810 	msr	PRIMASK, r3
}
 801173a:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 801173c:	2300      	movs	r3, #0
}
 801173e:	4618      	mov	r0, r3
 8011740:	3728      	adds	r7, #40	; 0x28
 8011742:	46bd      	mov	sp, r7
 8011744:	bd80      	pop	{r7, pc}
 8011746:	bf00      	nop
 8011748:	4d555445 	.word	0x4d555445
 801174c:	2001ca84 	.word	0x2001ca84
 8011750:	08011621 	.word	0x08011621
 8011754:	2001c9cc 	.word	0x2001c9cc
 8011758:	2001c9c8 	.word	0x2001c9c8

0801175c <_tx_mutex_get>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_mutex_get(TX_MUTEX *mutex_ptr, ULONG wait_option)
{
 801175c:	b580      	push	{r7, lr}
 801175e:	b092      	sub	sp, #72	; 0x48
 8011760:	af00      	add	r7, sp, #0
 8011762:	6078      	str	r0, [r7, #4]
 8011764:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8011766:	f3ef 8310 	mrs	r3, PRIMASK
 801176a:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 801176c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    int_posture = __get_interrupt_posture();
 801176e:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSID i" : : : "memory");
 8011770:	b672      	cpsid	i
    return(int_posture);
 8011772:	6a3b      	ldr	r3, [r7, #32]
TX_THREAD       *previous_thread;
UINT            status;


    /* Disable interrupts to get an instance from the mutex.  */
    TX_DISABLE
 8011774:	643b      	str	r3, [r7, #64]	; 0x40

    /* Log this kernel call.  */
    TX_EL_MUTEX_GET_INSERT

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 8011776:	4b7a      	ldr	r3, [pc, #488]	; (8011960 <_tx_mutex_get+0x204>)
 8011778:	681b      	ldr	r3, [r3, #0]
 801177a:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Determine if this mutex is available.  */
    if (mutex_ptr -> tx_mutex_ownership_count == ((UINT) 0))
 801177c:	687b      	ldr	r3, [r7, #4]
 801177e:	689b      	ldr	r3, [r3, #8]
 8011780:	2b00      	cmp	r3, #0
 8011782:	d144      	bne.n	801180e <_tx_mutex_get+0xb2>
    {

        /* Set the ownership count to 1.  */
        mutex_ptr -> tx_mutex_ownership_count =  ((UINT) 1);
 8011784:	687b      	ldr	r3, [r7, #4]
 8011786:	2201      	movs	r2, #1
 8011788:	609a      	str	r2, [r3, #8]

        /* Remember that the calling thread owns the mutex.  */
        mutex_ptr -> tx_mutex_owner =  thread_ptr;
 801178a:	687b      	ldr	r3, [r7, #4]
 801178c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801178e:	60da      	str	r2, [r3, #12]

        /* Determine if the thread pointer is valid.  */
        if (thread_ptr != TX_NULL)
 8011790:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011792:	2b00      	cmp	r3, #0
 8011794:	d032      	beq.n	80117fc <_tx_mutex_get+0xa0>
        {

            /* Determine if priority inheritance is required.  */
            if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 8011796:	687b      	ldr	r3, [r7, #4]
 8011798:	691b      	ldr	r3, [r3, #16]
 801179a:	2b01      	cmp	r3, #1
 801179c:	d106      	bne.n	80117ac <_tx_mutex_get+0x50>
            {

                /* Remember the current priority of thread.  */
                mutex_ptr -> tx_mutex_original_priority =   thread_ptr -> tx_thread_priority;
 801179e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80117a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80117a2:	687b      	ldr	r3, [r7, #4]
 80117a4:	615a      	str	r2, [r3, #20]

                /* Setup the highest priority waiting thread.  */
                mutex_ptr -> tx_mutex_highest_priority_waiting =  ((UINT) TX_MAX_PRIORITIES);
 80117a6:	687b      	ldr	r3, [r7, #4]
 80117a8:	2220      	movs	r2, #32
 80117aa:	629a      	str	r2, [r3, #40]	; 0x28
            }

            /* Pickup next mutex pointer, which is the head of the list.  */
            next_mutex =  thread_ptr -> tx_thread_owned_mutex_list;
 80117ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80117ae:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80117b2:	62fb      	str	r3, [r7, #44]	; 0x2c

            /* Determine if this thread owns any other mutexes that have priority inheritance.  */
            if (next_mutex != TX_NULL)
 80117b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80117b6:	2b00      	cmp	r3, #0
 80117b8:	d00f      	beq.n	80117da <_tx_mutex_get+0x7e>
            {

                /* Non-empty list. Link up the mutex.  */

                /* Pickup the next and previous mutex pointer.  */
                previous_mutex =  next_mutex -> tx_mutex_owned_previous;
 80117ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80117bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80117be:	62bb      	str	r3, [r7, #40]	; 0x28

                /* Place the owned mutex in the list.  */
                next_mutex -> tx_mutex_owned_previous =  mutex_ptr;
 80117c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80117c2:	687a      	ldr	r2, [r7, #4]
 80117c4:	631a      	str	r2, [r3, #48]	; 0x30
                previous_mutex -> tx_mutex_owned_next =  mutex_ptr;
 80117c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80117c8:	687a      	ldr	r2, [r7, #4]
 80117ca:	62da      	str	r2, [r3, #44]	; 0x2c

                /* Setup this mutex's next and previous created links.  */
                mutex_ptr -> tx_mutex_owned_previous =  previous_mutex;
 80117cc:	687b      	ldr	r3, [r7, #4]
 80117ce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80117d0:	631a      	str	r2, [r3, #48]	; 0x30
                mutex_ptr -> tx_mutex_owned_next =      next_mutex;
 80117d2:	687b      	ldr	r3, [r7, #4]
 80117d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80117d6:	62da      	str	r2, [r3, #44]	; 0x2c
 80117d8:	e009      	b.n	80117ee <_tx_mutex_get+0x92>
            }
            else
            {

                /* The owned mutex list is empty.  Add mutex to empty list.  */
                thread_ptr -> tx_thread_owned_mutex_list =     mutex_ptr;
 80117da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80117dc:	687a      	ldr	r2, [r7, #4]
 80117de:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
                mutex_ptr -> tx_mutex_owned_next =             mutex_ptr;
 80117e2:	687b      	ldr	r3, [r7, #4]
 80117e4:	687a      	ldr	r2, [r7, #4]
 80117e6:	62da      	str	r2, [r3, #44]	; 0x2c
                mutex_ptr -> tx_mutex_owned_previous =         mutex_ptr;
 80117e8:	687b      	ldr	r3, [r7, #4]
 80117ea:	687a      	ldr	r2, [r7, #4]
 80117ec:	631a      	str	r2, [r3, #48]	; 0x30
            }

            /* Increment the number of mutexes owned counter.  */
            thread_ptr -> tx_thread_owned_mutex_count++;
 80117ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80117f0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80117f4:	1c5a      	adds	r2, r3, #1
 80117f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80117f8:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
 80117fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80117fe:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8011800:	69fb      	ldr	r3, [r7, #28]
 8011802:	f383 8810 	msr	PRIMASK, r3
}
 8011806:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Return success.  */
        status =  TX_SUCCESS;
 8011808:	2300      	movs	r3, #0
 801180a:	647b      	str	r3, [r7, #68]	; 0x44
 801180c:	e0a2      	b.n	8011954 <_tx_mutex_get+0x1f8>
    }

    /* Otherwise, see if the owning thread is trying to obtain the same mutex.  */
    else if (mutex_ptr -> tx_mutex_owner == thread_ptr)
 801180e:	687b      	ldr	r3, [r7, #4]
 8011810:	68db      	ldr	r3, [r3, #12]
 8011812:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8011814:	429a      	cmp	r2, r3
 8011816:	d10d      	bne.n	8011834 <_tx_mutex_get+0xd8>
    {

        /* The owning thread is requesting the mutex again, just
           increment the ownership count.  */
        mutex_ptr -> tx_mutex_ownership_count++;
 8011818:	687b      	ldr	r3, [r7, #4]
 801181a:	689b      	ldr	r3, [r3, #8]
 801181c:	1c5a      	adds	r2, r3, #1
 801181e:	687b      	ldr	r3, [r7, #4]
 8011820:	609a      	str	r2, [r3, #8]
 8011822:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011824:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8011826:	69bb      	ldr	r3, [r7, #24]
 8011828:	f383 8810 	msr	PRIMASK, r3
}
 801182c:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Return success.  */
        status =  TX_SUCCESS;
 801182e:	2300      	movs	r3, #0
 8011830:	647b      	str	r3, [r7, #68]	; 0x44
 8011832:	e08f      	b.n	8011954 <_tx_mutex_get+0x1f8>
    }
    else
    {

        /* Determine if the request specifies suspension.  */
        if (wait_option != TX_NO_WAIT)
 8011834:	683b      	ldr	r3, [r7, #0]
 8011836:	2b00      	cmp	r3, #0
 8011838:	f000 8084 	beq.w	8011944 <_tx_mutex_get+0x1e8>
        {

            /* Determine if the preempt disable flag is non-zero.  */
            if (_tx_thread_preempt_disable != ((UINT) 0))
 801183c:	4b49      	ldr	r3, [pc, #292]	; (8011964 <_tx_mutex_get+0x208>)
 801183e:	681b      	ldr	r3, [r3, #0]
 8011840:	2b00      	cmp	r3, #0
 8011842:	d008      	beq.n	8011856 <_tx_mutex_get+0xfa>
 8011844:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011846:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8011848:	697b      	ldr	r3, [r7, #20]
 801184a:	f383 8810 	msr	PRIMASK, r3
}
 801184e:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
                status =  TX_NOT_AVAILABLE;
 8011850:	231d      	movs	r3, #29
 8011852:	647b      	str	r3, [r7, #68]	; 0x44
 8011854:	e07e      	b.n	8011954 <_tx_mutex_get+0x1f8>
            {

                /* Prepare for suspension of this thread.  */

                /* Pickup the mutex owner.  */
                mutex_owner =  mutex_ptr -> tx_mutex_owner;
 8011856:	687b      	ldr	r3, [r7, #4]
 8011858:	68db      	ldr	r3, [r3, #12]
 801185a:	63bb      	str	r3, [r7, #56]	; 0x38
#endif
                }
#endif

                /* Setup cleanup routine pointer.  */
                thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_mutex_cleanup);
 801185c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801185e:	4a42      	ldr	r2, [pc, #264]	; (8011968 <_tx_mutex_get+0x20c>)
 8011860:	669a      	str	r2, [r3, #104]	; 0x68

                /* Setup cleanup information, i.e. this mutex control
                   block.  */
                thread_ptr -> tx_thread_suspend_control_block =  (VOID *) mutex_ptr;
 8011862:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011864:	687a      	ldr	r2, [r7, #4]
 8011866:	66da      	str	r2, [r3, #108]	; 0x6c

#ifndef TX_NOT_INTERRUPTABLE

                /* Increment the suspension sequence number, which is used to identify
                   this suspension event.  */
                thread_ptr -> tx_thread_suspension_sequence++;
 8011868:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801186a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 801186e:	1c5a      	adds	r2, r3, #1
 8011870:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011872:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
#endif

                /* Setup suspension list.  */
                if (mutex_ptr -> tx_mutex_suspended_count == TX_NO_SUSPENSIONS)
 8011876:	687b      	ldr	r3, [r7, #4]
 8011878:	69db      	ldr	r3, [r3, #28]
 801187a:	2b00      	cmp	r3, #0
 801187c:	d109      	bne.n	8011892 <_tx_mutex_get+0x136>
                {

                    /* No other threads are suspended.  Setup the head pointer and
                       just setup this threads pointers to itself.  */
                    mutex_ptr -> tx_mutex_suspension_list =         thread_ptr;
 801187e:	687b      	ldr	r3, [r7, #4]
 8011880:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8011882:	619a      	str	r2, [r3, #24]
                    thread_ptr -> tx_thread_suspended_next =        thread_ptr;
 8011884:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011886:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8011888:	671a      	str	r2, [r3, #112]	; 0x70
                    thread_ptr -> tx_thread_suspended_previous =    thread_ptr;
 801188a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801188c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801188e:	675a      	str	r2, [r3, #116]	; 0x74
 8011890:	e011      	b.n	80118b6 <_tx_mutex_get+0x15a>
                }
                else
                {

                    /* This list is not NULL, add current thread to the end. */
                    next_thread =                                   mutex_ptr -> tx_mutex_suspension_list;
 8011892:	687b      	ldr	r3, [r7, #4]
 8011894:	699b      	ldr	r3, [r3, #24]
 8011896:	637b      	str	r3, [r7, #52]	; 0x34
                    thread_ptr -> tx_thread_suspended_next =        next_thread;
 8011898:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801189a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801189c:	671a      	str	r2, [r3, #112]	; 0x70
                    previous_thread =                               next_thread -> tx_thread_suspended_previous;
 801189e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80118a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80118a2:	633b      	str	r3, [r7, #48]	; 0x30
                    thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 80118a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80118a6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80118a8:	675a      	str	r2, [r3, #116]	; 0x74
                    previous_thread -> tx_thread_suspended_next =   thread_ptr;
 80118aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80118ac:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80118ae:	671a      	str	r2, [r3, #112]	; 0x70
                    next_thread -> tx_thread_suspended_previous =   thread_ptr;
 80118b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80118b2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80118b4:	675a      	str	r2, [r3, #116]	; 0x74
                }

                /* Increment the suspension count.  */
                mutex_ptr -> tx_mutex_suspended_count++;
 80118b6:	687b      	ldr	r3, [r7, #4]
 80118b8:	69db      	ldr	r3, [r3, #28]
 80118ba:	1c5a      	adds	r2, r3, #1
 80118bc:	687b      	ldr	r3, [r7, #4]
 80118be:	61da      	str	r2, [r3, #28]

                /* Set the state to suspended.  */
                thread_ptr -> tx_thread_state =    TX_MUTEX_SUSP;
 80118c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80118c2:	220d      	movs	r2, #13
 80118c4:	631a      	str	r2, [r3, #48]	; 0x30
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Set the suspending flag.  */
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 80118c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80118c8:	2201      	movs	r2, #1
 80118ca:	639a      	str	r2, [r3, #56]	; 0x38

                /* Setup the timeout period.  */
                thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 80118cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80118ce:	683a      	ldr	r2, [r7, #0]
 80118d0:	64da      	str	r2, [r3, #76]	; 0x4c

                /* Temporarily disable preemption.  */
                _tx_thread_preempt_disable++;
 80118d2:	4b24      	ldr	r3, [pc, #144]	; (8011964 <_tx_mutex_get+0x208>)
 80118d4:	681b      	ldr	r3, [r3, #0]
 80118d6:	3301      	adds	r3, #1
 80118d8:	4a22      	ldr	r2, [pc, #136]	; (8011964 <_tx_mutex_get+0x208>)
 80118da:	6013      	str	r3, [r2, #0]
 80118dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80118de:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80118e0:	693b      	ldr	r3, [r7, #16]
 80118e2:	f383 8810 	msr	PRIMASK, r3
}
 80118e6:	bf00      	nop
                /* Restore interrupts.  */
                TX_RESTORE

                /* Determine if we need to raise the priority of the thread
                   owning the mutex.  */
                if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 80118e8:	687b      	ldr	r3, [r7, #4]
 80118ea:	691b      	ldr	r3, [r3, #16]
 80118ec:	2b01      	cmp	r3, #1
 80118ee:	d121      	bne.n	8011934 <_tx_mutex_get+0x1d8>
                {

                    /* Determine if this is the highest priority to raise for this mutex.  */
                    if (mutex_ptr -> tx_mutex_highest_priority_waiting > thread_ptr -> tx_thread_priority)
 80118f0:	687b      	ldr	r3, [r7, #4]
 80118f2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80118f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80118f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80118f8:	429a      	cmp	r2, r3
 80118fa:	d903      	bls.n	8011904 <_tx_mutex_get+0x1a8>
                    {

                        /* Remember this priority.  */
                        mutex_ptr -> tx_mutex_highest_priority_waiting =  thread_ptr -> tx_thread_priority;
 80118fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80118fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011900:	687b      	ldr	r3, [r7, #4]
 8011902:	629a      	str	r2, [r3, #40]	; 0x28
                    }

                    /* Determine if we have to update inherit priority level of the mutex owner.  */
                    if (thread_ptr -> tx_thread_priority < mutex_owner -> tx_thread_inherit_priority)
 8011904:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011906:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011908:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801190a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 801190e:	429a      	cmp	r2, r3
 8011910:	d204      	bcs.n	801191c <_tx_mutex_get+0x1c0>
                    {

                        /* Remember the new priority inheritance priority.  */
                        mutex_owner -> tx_thread_inherit_priority =  thread_ptr -> tx_thread_priority;
 8011912:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011914:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011916:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011918:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
                    }

                    /* Priority inheritance is requested, check to see if the thread that owns the mutex is lower priority.  */
                    if (mutex_owner -> tx_thread_priority > thread_ptr -> tx_thread_priority)
 801191c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801191e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011920:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011922:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011924:	429a      	cmp	r2, r3
 8011926:	d905      	bls.n	8011934 <_tx_mutex_get+0x1d8>
                    {

                        /* Yes, raise the suspended, owning thread's priority to that
                           of the current thread.  */
                        _tx_mutex_priority_change(mutex_owner, thread_ptr -> tx_thread_priority);
 8011928:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801192a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801192c:	4619      	mov	r1, r3
 801192e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8011930:	f000 f8ce 	bl	8011ad0 <_tx_mutex_priority_change>
#endif
                    }
                }

                /* Call actual thread suspension routine.  */
                _tx_thread_system_suspend(thread_ptr);
 8011934:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8011936:	f001 f9d5 	bl	8012ce4 <_tx_thread_system_suspend>
#endif
                /* Return the completion status.  */
                status =  thread_ptr -> tx_thread_suspend_status;
 801193a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801193c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8011940:	647b      	str	r3, [r7, #68]	; 0x44
 8011942:	e007      	b.n	8011954 <_tx_mutex_get+0x1f8>
 8011944:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011946:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8011948:	68fb      	ldr	r3, [r7, #12]
 801194a:	f383 8810 	msr	PRIMASK, r3
}
 801194e:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Immediate return, return error completion.  */
            status =  TX_NOT_AVAILABLE;
 8011950:	231d      	movs	r3, #29
 8011952:	647b      	str	r3, [r7, #68]	; 0x44
        }
    }

    /* Return completion status.  */
    return(status);
 8011954:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8011956:	4618      	mov	r0, r3
 8011958:	3748      	adds	r7, #72	; 0x48
 801195a:	46bd      	mov	sp, r7
 801195c:	bd80      	pop	{r7, pc}
 801195e:	bf00      	nop
 8011960:	2001c9e8 	.word	0x2001c9e8
 8011964:	2001ca80 	.word	0x2001ca80
 8011968:	08011529 	.word	0x08011529

0801196c <_tx_mutex_prioritize>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_mutex_prioritize(TX_MUTEX *mutex_ptr)
{
 801196c:	b580      	push	{r7, lr}
 801196e:	b092      	sub	sp, #72	; 0x48
 8011970:	af00      	add	r7, sp, #0
 8011972:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8011974:	f3ef 8310 	mrs	r3, PRIMASK
 8011978:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 801197a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    int_posture = __get_interrupt_posture();
 801197c:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSID i" : : : "memory");
 801197e:	b672      	cpsid	i
    return(int_posture);
 8011980:	6a3b      	ldr	r3, [r7, #32]
UINT            status;
#endif


    /* Disable interrupts.  */
    TX_DISABLE
 8011982:	647b      	str	r3, [r7, #68]	; 0x44

    /* Log this kernel call.  */
    TX_EL_MUTEX_PRIORITIZE_INSERT

    /* Pickup the suspended count.  */
    suspended_count =  mutex_ptr -> tx_mutex_suspended_count;
 8011984:	687b      	ldr	r3, [r7, #4]
 8011986:	69db      	ldr	r3, [r3, #28]
 8011988:	637b      	str	r3, [r7, #52]	; 0x34

    /* Determine if there are fewer than 2 suspended threads.  */
    if (suspended_count < ((UINT) 2))
 801198a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801198c:	2b01      	cmp	r3, #1
 801198e:	d805      	bhi.n	801199c <_tx_mutex_prioritize+0x30>
 8011990:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011992:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8011994:	69fb      	ldr	r3, [r7, #28]
 8011996:	f383 8810 	msr	PRIMASK, r3
}
 801199a:	e092      	b.n	8011ac2 <_tx_mutex_prioritize+0x156>
        /* Restore interrupts.  */
        TX_RESTORE
    }

    /* Determine if there how many threads are suspended on this mutex.  */
    else if (suspended_count == ((UINT) 2))
 801199c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801199e:	2b02      	cmp	r3, #2
 80119a0:	d114      	bne.n	80119cc <_tx_mutex_prioritize+0x60>
    {

        /* Pickup the head pointer and the next pointer.  */
        head_ptr =  mutex_ptr -> tx_mutex_suspension_list;
 80119a2:	687b      	ldr	r3, [r7, #4]
 80119a4:	699b      	ldr	r3, [r3, #24]
 80119a6:	63bb      	str	r3, [r7, #56]	; 0x38
        next_thread =  head_ptr -> tx_thread_suspended_next;
 80119a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80119aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80119ac:	62fb      	str	r3, [r7, #44]	; 0x2c

        /* Determine if the next suspended thread has a higher priority.  */
        if ((next_thread -> tx_thread_priority) < (head_ptr -> tx_thread_priority))
 80119ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80119b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80119b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80119b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80119b6:	429a      	cmp	r2, r3
 80119b8:	d202      	bcs.n	80119c0 <_tx_mutex_prioritize+0x54>
        {

            /* Yes, move the list head to the next thread.  */
            mutex_ptr -> tx_mutex_suspension_list =  next_thread;
 80119ba:	687b      	ldr	r3, [r7, #4]
 80119bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80119be:	619a      	str	r2, [r3, #24]
 80119c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80119c2:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80119c4:	69bb      	ldr	r3, [r7, #24]
 80119c6:	f383 8810 	msr	PRIMASK, r3
}
 80119ca:	e07a      	b.n	8011ac2 <_tx_mutex_prioritize+0x156>
    }
    else
    {

        /* Remember the suspension count and head pointer.  */
        head_ptr =   mutex_ptr -> tx_mutex_suspension_list;
 80119cc:	687b      	ldr	r3, [r7, #4]
 80119ce:	699b      	ldr	r3, [r3, #24]
 80119d0:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Default the highest priority thread to the thread at the front of the list.  */
        priority_thread_ptr =  head_ptr;
 80119d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80119d4:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Setup search pointer.  */
        thread_ptr =  priority_thread_ptr -> tx_thread_suspended_next;
 80119d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80119d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80119da:	643b      	str	r3, [r7, #64]	; 0x40

        /* Disable preemption.  */
        _tx_thread_preempt_disable++;
 80119dc:	4b3b      	ldr	r3, [pc, #236]	; (8011acc <_tx_mutex_prioritize+0x160>)
 80119de:	681b      	ldr	r3, [r3, #0]
 80119e0:	3301      	adds	r3, #1
 80119e2:	4a3a      	ldr	r2, [pc, #232]	; (8011acc <_tx_mutex_prioritize+0x160>)
 80119e4:	6013      	str	r3, [r2, #0]

        /* Set the list changed flag to false.  */
        list_changed =  TX_FALSE;
 80119e6:	2300      	movs	r3, #0
 80119e8:	633b      	str	r3, [r7, #48]	; 0x30
        /* Search through the list to find the highest priority thread.  */
        do
        {

            /* Is the current thread higher priority?  */
            if (thread_ptr -> tx_thread_priority < priority_thread_ptr -> tx_thread_priority)
 80119ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80119ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80119ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80119f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80119f2:	429a      	cmp	r2, r3
 80119f4:	d201      	bcs.n	80119fa <_tx_mutex_prioritize+0x8e>
            {

                /* Yes, remember that this thread is the highest priority.  */
                priority_thread_ptr =  thread_ptr;
 80119f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80119f8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80119fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80119fc:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80119fe:	68fb      	ldr	r3, [r7, #12]
 8011a00:	f383 8810 	msr	PRIMASK, r3
}
 8011a04:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8011a06:	f3ef 8310 	mrs	r3, PRIMASK
 8011a0a:	617b      	str	r3, [r7, #20]
    return(posture);
 8011a0c:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 8011a0e:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 8011a10:	b672      	cpsid	i
    return(int_posture);
 8011a12:	693b      	ldr	r3, [r7, #16]

            /* Restore interrupts temporarily.  */
            TX_RESTORE

            /* Disable interrupts again.  */
            TX_DISABLE
 8011a14:	647b      	str	r3, [r7, #68]	; 0x44

            /* Determine if any changes to the list have occurred while
               interrupts were enabled.  */

            /* Is the list head the same?  */
            if (head_ptr != mutex_ptr -> tx_mutex_suspension_list)
 8011a16:	687b      	ldr	r3, [r7, #4]
 8011a18:	699b      	ldr	r3, [r3, #24]
 8011a1a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011a1c:	429a      	cmp	r2, r3
 8011a1e:	d002      	beq.n	8011a26 <_tx_mutex_prioritize+0xba>
            {

                /* The list head has changed, set the list changed flag.  */
                list_changed =  TX_TRUE;
 8011a20:	2301      	movs	r3, #1
 8011a22:	633b      	str	r3, [r7, #48]	; 0x30
 8011a24:	e006      	b.n	8011a34 <_tx_mutex_prioritize+0xc8>
            }
            else
            {

                /* Is the suspended count the same?  */
                if (suspended_count != mutex_ptr -> tx_mutex_suspended_count)
 8011a26:	687b      	ldr	r3, [r7, #4]
 8011a28:	69db      	ldr	r3, [r3, #28]
 8011a2a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011a2c:	429a      	cmp	r2, r3
 8011a2e:	d001      	beq.n	8011a34 <_tx_mutex_prioritize+0xc8>
                {

                    /* The list head has changed, set the list changed flag.  */
                    list_changed =  TX_TRUE;
 8011a30:	2301      	movs	r3, #1
 8011a32:	633b      	str	r3, [r7, #48]	; 0x30
                }
            }

            /* Determine if the list has changed.  */
            if (list_changed == TX_FALSE)
 8011a34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011a36:	2b00      	cmp	r3, #0
 8011a38:	d103      	bne.n	8011a42 <_tx_mutex_prioritize+0xd6>
            {

                /* Move the thread pointer to the next thread.  */
                thread_ptr =  thread_ptr -> tx_thread_suspended_next;
 8011a3a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011a3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011a3e:	643b      	str	r3, [r7, #64]	; 0x40
 8011a40:	e00c      	b.n	8011a5c <_tx_mutex_prioritize+0xf0>
            }
            else
            {

                /* Remember the suspension count and head pointer.  */
                head_ptr =   mutex_ptr -> tx_mutex_suspension_list;
 8011a42:	687b      	ldr	r3, [r7, #4]
 8011a44:	699b      	ldr	r3, [r3, #24]
 8011a46:	63bb      	str	r3, [r7, #56]	; 0x38
                suspended_count =  mutex_ptr -> tx_mutex_suspended_count;
 8011a48:	687b      	ldr	r3, [r7, #4]
 8011a4a:	69db      	ldr	r3, [r3, #28]
 8011a4c:	637b      	str	r3, [r7, #52]	; 0x34

                /* Default the highest priority thread to the thread at the front of the list.  */
                priority_thread_ptr =  head_ptr;
 8011a4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011a50:	63fb      	str	r3, [r7, #60]	; 0x3c

                /* Setup search pointer.  */
                thread_ptr =  priority_thread_ptr -> tx_thread_suspended_next;
 8011a52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011a54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011a56:	643b      	str	r3, [r7, #64]	; 0x40

                /* Reset the list changed flag.  */
                list_changed =  TX_FALSE;
 8011a58:	2300      	movs	r3, #0
 8011a5a:	633b      	str	r3, [r7, #48]	; 0x30
            }

        } while (thread_ptr != head_ptr);
 8011a5c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8011a5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011a60:	429a      	cmp	r2, r3
 8011a62:	d1c2      	bne.n	80119ea <_tx_mutex_prioritize+0x7e>

        /* Release preemption.  */
        _tx_thread_preempt_disable--;
 8011a64:	4b19      	ldr	r3, [pc, #100]	; (8011acc <_tx_mutex_prioritize+0x160>)
 8011a66:	681b      	ldr	r3, [r3, #0]
 8011a68:	3b01      	subs	r3, #1
 8011a6a:	4a18      	ldr	r2, [pc, #96]	; (8011acc <_tx_mutex_prioritize+0x160>)
 8011a6c:	6013      	str	r3, [r2, #0]

        /* Now determine if the highest priority thread is at the front
           of the list.  */
        if (priority_thread_ptr != head_ptr)
 8011a6e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8011a70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011a72:	429a      	cmp	r2, r3
 8011a74:	d01d      	beq.n	8011ab2 <_tx_mutex_prioritize+0x146>
            /* No, we need to move the highest priority suspended thread to the
               front of the list.  */

            /* First, remove the highest priority thread by updating the
               adjacent suspended threads.  */
            next_thread =                                  priority_thread_ptr -> tx_thread_suspended_next;
 8011a76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011a78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011a7a:	62fb      	str	r3, [r7, #44]	; 0x2c
            previous_thread =                              priority_thread_ptr -> tx_thread_suspended_previous;
 8011a7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011a7e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011a80:	62bb      	str	r3, [r7, #40]	; 0x28
            next_thread -> tx_thread_suspended_previous =  previous_thread;
 8011a82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a84:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011a86:	675a      	str	r2, [r3, #116]	; 0x74
            previous_thread -> tx_thread_suspended_next =  next_thread;
 8011a88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011a8a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011a8c:	671a      	str	r2, [r3, #112]	; 0x70

            /* Now, link the highest priority thread at the front of the list.  */
            previous_thread =                                      head_ptr -> tx_thread_suspended_previous;
 8011a8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011a90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011a92:	62bb      	str	r3, [r7, #40]	; 0x28
            priority_thread_ptr -> tx_thread_suspended_next =      head_ptr;
 8011a94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011a96:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011a98:	671a      	str	r2, [r3, #112]	; 0x70
            priority_thread_ptr -> tx_thread_suspended_previous =  previous_thread;
 8011a9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011a9c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011a9e:	675a      	str	r2, [r3, #116]	; 0x74
            previous_thread -> tx_thread_suspended_next =          priority_thread_ptr;
 8011aa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011aa2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8011aa4:	671a      	str	r2, [r3, #112]	; 0x70
            head_ptr -> tx_thread_suspended_previous =             priority_thread_ptr;
 8011aa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011aa8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8011aaa:	675a      	str	r2, [r3, #116]	; 0x74

            /* Move the list head pointer to the highest priority suspended thread.  */
            mutex_ptr -> tx_mutex_suspension_list =  priority_thread_ptr;
 8011aac:	687b      	ldr	r3, [r7, #4]
 8011aae:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8011ab0:	619a      	str	r2, [r3, #24]
 8011ab2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011ab4:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8011ab6:	68bb      	ldr	r3, [r7, #8]
 8011ab8:	f383 8810 	msr	PRIMASK, r3
}
 8011abc:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 8011abe:	f000 ffd7 	bl	8012a70 <_tx_thread_system_preempt_check>
    /* Return completion status.  */
    return(status);
#else

    /* Return successful completion.  */
    return(TX_SUCCESS);
 8011ac2:	2300      	movs	r3, #0
#endif
}
 8011ac4:	4618      	mov	r0, r3
 8011ac6:	3748      	adds	r7, #72	; 0x48
 8011ac8:	46bd      	mov	sp, r7
 8011aca:	bd80      	pop	{r7, pc}
 8011acc:	2001ca80 	.word	0x2001ca80

08011ad0 <_tx_mutex_priority_change>:
/*                                            priority rather than next,  */
/*                                            resulting in version 6.1.6  */
/*                                                                        */
/**************************************************************************/
VOID  _tx_mutex_priority_change(TX_THREAD *thread_ptr, UINT new_priority)
{
 8011ad0:	b580      	push	{r7, lr}
 8011ad2:	b090      	sub	sp, #64	; 0x40
 8011ad4:	af00      	add	r7, sp, #0
 8011ad6:	6078      	str	r0, [r7, #4]
 8011ad8:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8011ada:	f3ef 8310 	mrs	r3, PRIMASK
 8011ade:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 8011ae0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 8011ae2:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 8011ae4:	b672      	cpsid	i
    return(int_posture);
 8011ae6:	6abb      	ldr	r3, [r7, #40]	; 0x28


#ifndef TX_NOT_INTERRUPTABLE

    /* Lockout interrupts while the thread is being suspended.  */
    TX_DISABLE
 8011ae8:	63fb      	str	r3, [r7, #60]	; 0x3c
#endif

    /* Determine if this thread is currently ready.  */
    if (thread_ptr -> tx_thread_state != TX_READY)
 8011aea:	687b      	ldr	r3, [r7, #4]
 8011aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011aee:	2b00      	cmp	r3, #0
 8011af0:	d017      	beq.n	8011b22 <_tx_mutex_priority_change+0x52>
    {

        /* Change thread priority to the new mutex priority-inheritance priority.  */
        thread_ptr -> tx_thread_priority =  new_priority;
 8011af2:	687b      	ldr	r3, [r7, #4]
 8011af4:	683a      	ldr	r2, [r7, #0]
 8011af6:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Determine how to setup the thread's preemption-threshold.  */
        if (thread_ptr -> tx_thread_user_preempt_threshold < new_priority)
 8011af8:	687b      	ldr	r3, [r7, #4]
 8011afa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8011afe:	683a      	ldr	r2, [r7, #0]
 8011b00:	429a      	cmp	r2, r3
 8011b02:	d905      	bls.n	8011b10 <_tx_mutex_priority_change+0x40>
        {

            /* Change thread preemption-threshold to the user's preemption-threshold.  */
            thread_ptr -> tx_thread_preempt_threshold =  thread_ptr -> tx_thread_user_preempt_threshold;
 8011b04:	687b      	ldr	r3, [r7, #4]
 8011b06:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8011b0a:	687b      	ldr	r3, [r7, #4]
 8011b0c:	63da      	str	r2, [r3, #60]	; 0x3c
 8011b0e:	e002      	b.n	8011b16 <_tx_mutex_priority_change+0x46>
        }
        else
        {

            /* Change the thread preemption-threshold to the new threshold.  */
            thread_ptr -> tx_thread_preempt_threshold =  new_priority;
 8011b10:	687b      	ldr	r3, [r7, #4]
 8011b12:	683a      	ldr	r2, [r7, #0]
 8011b14:	63da      	str	r2, [r3, #60]	; 0x3c
 8011b16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011b18:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8011b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b1c:	f383 8810 	msr	PRIMASK, r3
}
 8011b20:	e089      	b.n	8011c36 <_tx_mutex_priority_change+0x166>
    }
    else
    {

        /* Pickup the next thread to execute.  */
        execute_ptr =  _tx_thread_execute_ptr;
 8011b22:	4b47      	ldr	r3, [pc, #284]	; (8011c40 <_tx_mutex_priority_change+0x170>)
 8011b24:	681b      	ldr	r3, [r3, #0]
 8011b26:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Save the original priority.  */
        original_priority =  thread_ptr -> tx_thread_priority;
 8011b28:	687b      	ldr	r3, [r7, #4]
 8011b2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011b2c:	637b      	str	r3, [r7, #52]	; 0x34
        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
#else

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable =  _tx_thread_preempt_disable + ((UINT) 2);
 8011b2e:	4b45      	ldr	r3, [pc, #276]	; (8011c44 <_tx_mutex_priority_change+0x174>)
 8011b30:	681b      	ldr	r3, [r3, #0]
 8011b32:	3302      	adds	r3, #2
 8011b34:	4a43      	ldr	r2, [pc, #268]	; (8011c44 <_tx_mutex_priority_change+0x174>)
 8011b36:	6013      	str	r3, [r2, #0]

        /* Set the state to priority change.  */
        thread_ptr -> tx_thread_state =    TX_PRIORITY_CHANGE;
 8011b38:	687b      	ldr	r3, [r7, #4]
 8011b3a:	220e      	movs	r2, #14
 8011b3c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the suspending flag. */
        thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8011b3e:	687b      	ldr	r3, [r7, #4]
 8011b40:	2201      	movs	r2, #1
 8011b42:	639a      	str	r2, [r3, #56]	; 0x38

        /* Setup the timeout period.  */
        thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 8011b44:	687b      	ldr	r3, [r7, #4]
 8011b46:	2200      	movs	r2, #0
 8011b48:	64da      	str	r2, [r3, #76]	; 0x4c
 8011b4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011b4c:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8011b4e:	69bb      	ldr	r3, [r7, #24]
 8011b50:	f383 8810 	msr	PRIMASK, r3
}
 8011b54:	bf00      	nop
        /* Restore interrupts.  */
        TX_RESTORE

        /* The thread is ready and must first be removed from the list.  Call the
           system suspend function to accomplish this.  */
        _tx_thread_system_suspend(thread_ptr);
 8011b56:	6878      	ldr	r0, [r7, #4]
 8011b58:	f001 f8c4 	bl	8012ce4 <_tx_thread_system_suspend>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8011b5c:	f3ef 8310 	mrs	r3, PRIMASK
 8011b60:	623b      	str	r3, [r7, #32]
    return(posture);
 8011b62:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 8011b64:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 8011b66:	b672      	cpsid	i
    return(int_posture);
 8011b68:	69fb      	ldr	r3, [r7, #28]

        /* Disable interrupts.  */
        TX_DISABLE
 8011b6a:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* At this point, the preempt disable flag is still set, so we still have
           protection against all preemption.  */

        /* Change thread priority to the new mutex priority-inheritance priority.  */
        thread_ptr -> tx_thread_priority =  new_priority;
 8011b6c:	687b      	ldr	r3, [r7, #4]
 8011b6e:	683a      	ldr	r2, [r7, #0]
 8011b70:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Determine how to setup the thread's preemption-threshold.  */
        if (thread_ptr -> tx_thread_user_preempt_threshold < new_priority)
 8011b72:	687b      	ldr	r3, [r7, #4]
 8011b74:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8011b78:	683a      	ldr	r2, [r7, #0]
 8011b7a:	429a      	cmp	r2, r3
 8011b7c:	d905      	bls.n	8011b8a <_tx_mutex_priority_change+0xba>
        {

            /* Change thread preemption-threshold to the user's preemption-threshold.  */
            thread_ptr -> tx_thread_preempt_threshold =  thread_ptr -> tx_thread_user_preempt_threshold;
 8011b7e:	687b      	ldr	r3, [r7, #4]
 8011b80:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8011b84:	687b      	ldr	r3, [r7, #4]
 8011b86:	63da      	str	r2, [r3, #60]	; 0x3c
 8011b88:	e002      	b.n	8011b90 <_tx_mutex_priority_change+0xc0>
        }
        else
        {

            /* Change the thread preemption-threshold to the new threshold.  */
            thread_ptr -> tx_thread_preempt_threshold =  new_priority;
 8011b8a:	687b      	ldr	r3, [r7, #4]
 8011b8c:	683a      	ldr	r2, [r7, #0]
 8011b8e:	63da      	str	r2, [r3, #60]	; 0x3c
 8011b90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011b92:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8011b94:	68fb      	ldr	r3, [r7, #12]
 8011b96:	f383 8810 	msr	PRIMASK, r3
}
 8011b9a:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Resume the thread with the new priority.  */
        _tx_thread_system_resume(thread_ptr);
 8011b9c:	6878      	ldr	r0, [r7, #4]
 8011b9e:	f000 ffa1 	bl	8012ae4 <_tx_thread_system_resume>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8011ba2:	f3ef 8310 	mrs	r3, PRIMASK
 8011ba6:	617b      	str	r3, [r7, #20]
    return(posture);
 8011ba8:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 8011baa:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 8011bac:	b672      	cpsid	i
    return(int_posture);
 8011bae:	693b      	ldr	r3, [r7, #16]
        TX_MUTEX_PRIORITY_CHANGE_EXTENSION

#ifndef TX_NOT_INTERRUPTABLE

        /* Disable interrupts.  */
        TX_DISABLE
 8011bb0:	63fb      	str	r3, [r7, #60]	; 0x3c
#endif

        /* Pickup the next thread to execute.  */
        next_execute_ptr =  _tx_thread_execute_ptr;
 8011bb2:	4b23      	ldr	r3, [pc, #140]	; (8011c40 <_tx_mutex_priority_change+0x170>)
 8011bb4:	681b      	ldr	r3, [r3, #0]
 8011bb6:	633b      	str	r3, [r7, #48]	; 0x30

        /* Determine if this thread is not the next thread to execute.  */
        if (thread_ptr != next_execute_ptr)
 8011bb8:	687a      	ldr	r2, [r7, #4]
 8011bba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011bbc:	429a      	cmp	r2, r3
 8011bbe:	d034      	beq.n	8011c2a <_tx_mutex_priority_change+0x15a>
        {

            /* Make sure the thread is still ready.  */
            if (thread_ptr -> tx_thread_state == TX_READY)
 8011bc0:	687b      	ldr	r3, [r7, #4]
 8011bc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011bc4:	2b00      	cmp	r3, #0
 8011bc6:	d130      	bne.n	8011c2a <_tx_mutex_priority_change+0x15a>
            {

                /* Now check and see if this thread has an equal or higher priority.  */
                if (thread_ptr -> tx_thread_priority <= next_execute_ptr -> tx_thread_priority)
 8011bc8:	687b      	ldr	r3, [r7, #4]
 8011bca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011bcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011bce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011bd0:	429a      	cmp	r2, r3
 8011bd2:	d811      	bhi.n	8011bf8 <_tx_mutex_priority_change+0x128>
                {

                    /* Now determine if this thread was the previously executing thread.  */
                    if (thread_ptr == execute_ptr)
 8011bd4:	687a      	ldr	r2, [r7, #4]
 8011bd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011bd8:	429a      	cmp	r2, r3
 8011bda:	d126      	bne.n	8011c2a <_tx_mutex_priority_change+0x15a>

                        /* Yes, this thread was previously executing before we temporarily suspended and resumed
                           it in order to change the priority. A lower or same priority thread cannot be the next thread
                           to execute in this case since this thread really didn't suspend.  Simply reset the execute
                           pointer to this thread.  */
                        _tx_thread_execute_ptr =  thread_ptr;
 8011bdc:	4a18      	ldr	r2, [pc, #96]	; (8011c40 <_tx_mutex_priority_change+0x170>)
 8011bde:	687b      	ldr	r3, [r7, #4]
 8011be0:	6013      	str	r3, [r2, #0]

                        /* Determine if we moved to a lower priority. If so, move the thread to the front of its priority list.  */
                        if (original_priority < new_priority)
 8011be2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011be4:	683b      	ldr	r3, [r7, #0]
 8011be6:	429a      	cmp	r2, r3
 8011be8:	d21f      	bcs.n	8011c2a <_tx_mutex_priority_change+0x15a>
                        {

                            /* Ensure that this thread is placed at the front of the priority list.  */
                            _tx_thread_priority_list[thread_ptr -> tx_thread_priority] =  thread_ptr;
 8011bea:	687b      	ldr	r3, [r7, #4]
 8011bec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011bee:	4916      	ldr	r1, [pc, #88]	; (8011c48 <_tx_mutex_priority_change+0x178>)
 8011bf0:	687a      	ldr	r2, [r7, #4]
 8011bf2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8011bf6:	e018      	b.n	8011c2a <_tx_mutex_priority_change+0x15a>
                }
                else
                {

                    /* Now determine if this thread's preemption-threshold needs to be enforced.  */
                    if (thread_ptr -> tx_thread_preempt_threshold < thread_ptr -> tx_thread_priority)
 8011bf8:	687b      	ldr	r3, [r7, #4]
 8011bfa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8011bfc:	687b      	ldr	r3, [r7, #4]
 8011bfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011c00:	429a      	cmp	r2, r3
 8011c02:	d212      	bcs.n	8011c2a <_tx_mutex_priority_change+0x15a>
                    {

                        /* Yes, preemption-threshold is in force for this thread. */

                        /* Compare the next thread to execute thread's priority against the thread's preemption-threshold.  */
                        if (thread_ptr -> tx_thread_preempt_threshold <= next_execute_ptr -> tx_thread_priority)
 8011c04:	687b      	ldr	r3, [r7, #4]
 8011c06:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8011c08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011c0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011c0c:	429a      	cmp	r2, r3
 8011c0e:	d80c      	bhi.n	8011c2a <_tx_mutex_priority_change+0x15a>
                        {

                            /* We must swap execute pointers to enforce the preemption-threshold of a thread coming out of
                               priority inheritance.  */
                            _tx_thread_execute_ptr =  thread_ptr;
 8011c10:	4a0b      	ldr	r2, [pc, #44]	; (8011c40 <_tx_mutex_priority_change+0x170>)
 8011c12:	687b      	ldr	r3, [r7, #4]
 8011c14:	6013      	str	r3, [r2, #0]

                            /* Determine if we moved to a lower priority. If so, move the thread to the front of its priority list.  */
                            if (original_priority < new_priority)
 8011c16:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011c18:	683b      	ldr	r3, [r7, #0]
 8011c1a:	429a      	cmp	r2, r3
 8011c1c:	d205      	bcs.n	8011c2a <_tx_mutex_priority_change+0x15a>
                            {

                                /* Ensure that this thread is placed at the front of the priority list.  */
                                _tx_thread_priority_list[thread_ptr -> tx_thread_priority] =  thread_ptr;
 8011c1e:	687b      	ldr	r3, [r7, #4]
 8011c20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011c22:	4909      	ldr	r1, [pc, #36]	; (8011c48 <_tx_mutex_priority_change+0x178>)
 8011c24:	687a      	ldr	r2, [r7, #4]
 8011c26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8011c2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011c2c:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8011c2e:	68bb      	ldr	r3, [r7, #8]
 8011c30:	f383 8810 	msr	PRIMASK, r3
}
 8011c34:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE
#endif
    }
}
 8011c36:	bf00      	nop
 8011c38:	3740      	adds	r7, #64	; 0x40
 8011c3a:	46bd      	mov	sp, r7
 8011c3c:	bd80      	pop	{r7, pc}
 8011c3e:	bf00      	nop
 8011c40:	2001c9ec 	.word	0x2001c9ec
 8011c44:	2001ca80 	.word	0x2001ca80
 8011c48:	2001ca00 	.word	0x2001ca00

08011c4c <_tx_mutex_put>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_mutex_put(TX_MUTEX *mutex_ptr)
{
 8011c4c:	b580      	push	{r7, lr}
 8011c4e:	b0a6      	sub	sp, #152	; 0x98
 8011c50:	af00      	add	r7, sp, #0
 8011c52:	6078      	str	r0, [r7, #4]
TX_THREAD       *suspended_thread;
UINT            inheritance_priority;


    /* Setup status to indicate the processing is not complete.  */
    status =  TX_NOT_DONE;
 8011c54:	2320      	movs	r3, #32
 8011c56:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8011c5a:	f3ef 8310 	mrs	r3, PRIMASK
 8011c5e:	65fb      	str	r3, [r7, #92]	; 0x5c
    return(posture);
 8011c60:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    int_posture = __get_interrupt_posture();
 8011c62:	65bb      	str	r3, [r7, #88]	; 0x58
    __asm__ volatile ("CPSID i" : : : "memory");
 8011c64:	b672      	cpsid	i
    return(int_posture);
 8011c66:	6dbb      	ldr	r3, [r7, #88]	; 0x58

    /* Disable interrupts to put an instance back to the mutex.  */
    TX_DISABLE
 8011c68:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

    /* Log this kernel call.  */
    TX_EL_MUTEX_PUT_INSERT

    /* Determine if this mutex is owned.  */
    if (mutex_ptr -> tx_mutex_ownership_count != ((UINT) 0))
 8011c6c:	687b      	ldr	r3, [r7, #4]
 8011c6e:	689b      	ldr	r3, [r3, #8]
 8011c70:	2b00      	cmp	r3, #0
 8011c72:	f000 81ff 	beq.w	8012074 <_tx_mutex_put+0x428>
    {

        /* Pickup the owning thread pointer.  */
        thread_ptr =  mutex_ptr -> tx_mutex_owner;
 8011c76:	687b      	ldr	r3, [r7, #4]
 8011c78:	68db      	ldr	r3, [r3, #12]
 8011c7a:	67fb      	str	r3, [r7, #124]	; 0x7c

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(current_thread)
 8011c7c:	4ba3      	ldr	r3, [pc, #652]	; (8011f0c <_tx_mutex_put+0x2c0>)
 8011c7e:	681b      	ldr	r3, [r3, #0]
 8011c80:	67bb      	str	r3, [r7, #120]	; 0x78

        /* Check to see if the mutex is owned by the calling thread.  */
        if (mutex_ptr -> tx_mutex_owner != current_thread)
 8011c82:	687b      	ldr	r3, [r7, #4]
 8011c84:	68db      	ldr	r3, [r3, #12]
 8011c86:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8011c88:	429a      	cmp	r2, r3
 8011c8a:	d00d      	beq.n	8011ca8 <_tx_mutex_put+0x5c>
        {

            /* Determine if the preempt disable flag is set, indicating that
               the caller is not the application but from ThreadX. In such
               cases, the thread mutex owner does not need to match.  */
            if (_tx_thread_preempt_disable == ((UINT) 0))
 8011c8c:	4ba0      	ldr	r3, [pc, #640]	; (8011f10 <_tx_mutex_put+0x2c4>)
 8011c8e:	681b      	ldr	r3, [r3, #0]
 8011c90:	2b00      	cmp	r3, #0
 8011c92:	d109      	bne.n	8011ca8 <_tx_mutex_put+0x5c>
 8011c94:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8011c98:	657b      	str	r3, [r7, #84]	; 0x54
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8011c9a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011c9c:	f383 8810 	msr	PRIMASK, r3
}
 8011ca0:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Caller does not own the mutex.  */
                status =  TX_NOT_OWNED;
 8011ca2:	231e      	movs	r3, #30
 8011ca4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
            }
        }

        /* Determine if we should continue.  */
        if (status == TX_NOT_DONE)
 8011ca8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8011cac:	2b20      	cmp	r3, #32
 8011cae:	f040 81eb 	bne.w	8012088 <_tx_mutex_put+0x43c>
        {

            /* Decrement the mutex ownership count.  */
            mutex_ptr -> tx_mutex_ownership_count--;
 8011cb2:	687b      	ldr	r3, [r7, #4]
 8011cb4:	689b      	ldr	r3, [r3, #8]
 8011cb6:	1e5a      	subs	r2, r3, #1
 8011cb8:	687b      	ldr	r3, [r7, #4]
 8011cba:	609a      	str	r2, [r3, #8]

            /* Determine if the mutex is still owned by the current thread.  */
            if (mutex_ptr -> tx_mutex_ownership_count != ((UINT) 0))
 8011cbc:	687b      	ldr	r3, [r7, #4]
 8011cbe:	689b      	ldr	r3, [r3, #8]
 8011cc0:	2b00      	cmp	r3, #0
 8011cc2:	d00a      	beq.n	8011cda <_tx_mutex_put+0x8e>
 8011cc4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8011cc8:	653b      	str	r3, [r7, #80]	; 0x50
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8011cca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011ccc:	f383 8810 	msr	PRIMASK, r3
}
 8011cd0:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Mutex is still owned, just return successful status.  */
                status =  TX_SUCCESS;
 8011cd2:	2300      	movs	r3, #0
 8011cd4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8011cd8:	e1d6      	b.n	8012088 <_tx_mutex_put+0x43c>
            }
            else
            {

                /* Check for a NULL thread pointer, which can only happen during initialization.   */
                if (thread_ptr == TX_NULL)
 8011cda:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8011cdc:	2b00      	cmp	r3, #0
 8011cde:	d10a      	bne.n	8011cf6 <_tx_mutex_put+0xaa>
 8011ce0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8011ce4:	64fb      	str	r3, [r7, #76]	; 0x4c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8011ce6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011ce8:	f383 8810 	msr	PRIMASK, r3
}
 8011cec:	bf00      	nop

                    /* Restore interrupts.  */
                    TX_RESTORE

                    /* Mutex is now available, return successful status.  */
                    status =  TX_SUCCESS;
 8011cee:	2300      	movs	r3, #0
 8011cf0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8011cf4:	e1c8      	b.n	8012088 <_tx_mutex_put+0x43c>
                    /* The mutex is now available.   */

                    /* Remove this mutex from the owned mutex list.  */

                    /* Decrement the ownership count.  */
                    thread_ptr -> tx_thread_owned_mutex_count--;
 8011cf6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8011cf8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8011cfc:	1e5a      	subs	r2, r3, #1
 8011cfe:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8011d00:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

                    /* Determine if this mutex was the only one on the list.  */
                    if (thread_ptr -> tx_thread_owned_mutex_count == ((UINT) 0))
 8011d04:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8011d06:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8011d0a:	2b00      	cmp	r3, #0
 8011d0c:	d104      	bne.n	8011d18 <_tx_mutex_put+0xcc>
                    {

                        /* Yes, the list is empty.  Simply set the head pointer to NULL.  */
                        thread_ptr -> tx_thread_owned_mutex_list =  TX_NULL;
 8011d0e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8011d10:	2200      	movs	r2, #0
 8011d12:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
 8011d16:	e019      	b.n	8011d4c <_tx_mutex_put+0x100>
                    {

                        /* No, there are more mutexes on the list.  */

                        /* Link-up the neighbors.  */
                        next_mutex =                             mutex_ptr -> tx_mutex_owned_next;
 8011d18:	687b      	ldr	r3, [r7, #4]
 8011d1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011d1c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
                        previous_mutex =                         mutex_ptr -> tx_mutex_owned_previous;
 8011d20:	687b      	ldr	r3, [r7, #4]
 8011d22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011d24:	677b      	str	r3, [r7, #116]	; 0x74
                        next_mutex -> tx_mutex_owned_previous =  previous_mutex;
 8011d26:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8011d2a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8011d2c:	631a      	str	r2, [r3, #48]	; 0x30
                        previous_mutex -> tx_mutex_owned_next =  next_mutex;
 8011d2e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8011d30:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8011d34:	62da      	str	r2, [r3, #44]	; 0x2c

                        /* See if we have to update the created list head pointer.  */
                        if (thread_ptr -> tx_thread_owned_mutex_list == mutex_ptr)
 8011d36:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8011d38:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8011d3c:	687a      	ldr	r2, [r7, #4]
 8011d3e:	429a      	cmp	r2, r3
 8011d40:	d104      	bne.n	8011d4c <_tx_mutex_put+0x100>
                        {

                            /* Yes, move the head pointer to the next link. */
                            thread_ptr -> tx_thread_owned_mutex_list =  next_mutex;
 8011d42:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8011d44:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8011d48:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
                        }
                    }

                    /* Determine if the simple, non-suspension, non-priority inheritance case is present.  */
                    if (mutex_ptr -> tx_mutex_suspension_list == TX_NULL)
 8011d4c:	687b      	ldr	r3, [r7, #4]
 8011d4e:	699b      	ldr	r3, [r3, #24]
 8011d50:	2b00      	cmp	r3, #0
 8011d52:	d110      	bne.n	8011d76 <_tx_mutex_put+0x12a>
                    {

                        /* Is this a priority inheritance mutex?  */
                        if (mutex_ptr -> tx_mutex_inherit == TX_FALSE)
 8011d54:	687b      	ldr	r3, [r7, #4]
 8011d56:	691b      	ldr	r3, [r3, #16]
 8011d58:	2b00      	cmp	r3, #0
 8011d5a:	d10c      	bne.n	8011d76 <_tx_mutex_put+0x12a>
                        {

                            /* Yes, we are done - set the mutex owner to NULL.   */
                            mutex_ptr -> tx_mutex_owner =  TX_NULL;
 8011d5c:	687b      	ldr	r3, [r7, #4]
 8011d5e:	2200      	movs	r2, #0
 8011d60:	60da      	str	r2, [r3, #12]
 8011d62:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8011d66:	64bb      	str	r3, [r7, #72]	; 0x48
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8011d68:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011d6a:	f383 8810 	msr	PRIMASK, r3
}
 8011d6e:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Mutex is now available, return successful status.  */
                            status =  TX_SUCCESS;
 8011d70:	2300      	movs	r3, #0
 8011d72:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                        }
                    }

                    /* Determine if the processing is complete.  */
                    if (status == TX_NOT_DONE)
 8011d76:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8011d7a:	2b20      	cmp	r3, #32
 8011d7c:	f040 8184 	bne.w	8012088 <_tx_mutex_put+0x43c>
                    {

                        /* Initialize original owner and thread priority.  */
                        old_owner =      TX_NULL;
 8011d80:	2300      	movs	r3, #0
 8011d82:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
                        old_priority =   thread_ptr -> tx_thread_user_priority;
 8011d86:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8011d88:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8011d8c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

                        /* Does this mutex support priority inheritance?  */
                        if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 8011d90:	687b      	ldr	r3, [r7, #4]
 8011d92:	691b      	ldr	r3, [r3, #16]
 8011d94:	2b01      	cmp	r3, #1
 8011d96:	d155      	bne.n	8011e44 <_tx_mutex_put+0x1f8>
                        {

#ifndef TX_NOT_INTERRUPTABLE

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 8011d98:	4b5d      	ldr	r3, [pc, #372]	; (8011f10 <_tx_mutex_put+0x2c4>)
 8011d9a:	681b      	ldr	r3, [r3, #0]
 8011d9c:	3301      	adds	r3, #1
 8011d9e:	4a5c      	ldr	r2, [pc, #368]	; (8011f10 <_tx_mutex_put+0x2c4>)
 8011da0:	6013      	str	r3, [r2, #0]
 8011da2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8011da6:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8011da8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011daa:	f383 8810 	msr	PRIMASK, r3
}
 8011dae:	bf00      	nop
                            /* Restore interrupts.  */
                            TX_RESTORE
#endif

                            /* Default the inheritance priority to disabled.  */
                            inheritance_priority =  ((UINT) TX_MAX_PRIORITIES);
 8011db0:	2320      	movs	r3, #32
 8011db2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

                            /* Search the owned mutexes for this thread to determine the highest priority for this
                               former mutex owner to return to.  */
                            next_mutex =  thread_ptr -> tx_thread_owned_mutex_list;
 8011db6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8011db8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8011dbc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
                            while (next_mutex != TX_NULL)
 8011dc0:	e01f      	b.n	8011e02 <_tx_mutex_put+0x1b6>
                            {

                                /* Does this mutex support priority inheritance?  */
                                if (next_mutex -> tx_mutex_inherit == TX_TRUE)
 8011dc2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8011dc6:	691b      	ldr	r3, [r3, #16]
 8011dc8:	2b01      	cmp	r3, #1
 8011dca:	d10b      	bne.n	8011de4 <_tx_mutex_put+0x198>
                                {

                                    /* Determine if highest priority field of the mutex is higher than the priority to
                                       restore.  */
                                    if (next_mutex -> tx_mutex_highest_priority_waiting < inheritance_priority)
 8011dcc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8011dd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011dd2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8011dd6:	429a      	cmp	r2, r3
 8011dd8:	d904      	bls.n	8011de4 <_tx_mutex_put+0x198>
                                    {

                                        /* Use this priority to return releasing thread to.  */
                                        inheritance_priority =   next_mutex -> tx_mutex_highest_priority_waiting;
 8011dda:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8011dde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011de0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                                    }
                                }

                                /* Move mutex pointer to the next mutex in the list.  */
                                next_mutex =  next_mutex -> tx_mutex_owned_next;
 8011de4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8011de8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011dea:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

                                /* Are we at the end of the list?  */
                                if (next_mutex == thread_ptr -> tx_thread_owned_mutex_list)
 8011dee:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8011df0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8011df4:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8011df8:	429a      	cmp	r2, r3
 8011dfa:	d102      	bne.n	8011e02 <_tx_mutex_put+0x1b6>
                                {

                                    /* Yes, set the next mutex to NULL.  */
                                    next_mutex =  TX_NULL;
 8011dfc:	2300      	movs	r3, #0
 8011dfe:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
                            while (next_mutex != TX_NULL)
 8011e02:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8011e06:	2b00      	cmp	r3, #0
 8011e08:	d1db      	bne.n	8011dc2 <_tx_mutex_put+0x176>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8011e0a:	f3ef 8310 	mrs	r3, PRIMASK
 8011e0e:	643b      	str	r3, [r7, #64]	; 0x40
    return(posture);
 8011e10:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    int_posture = __get_interrupt_posture();
 8011e12:	63fb      	str	r3, [r7, #60]	; 0x3c
    __asm__ volatile ("CPSID i" : : : "memory");
 8011e14:	b672      	cpsid	i
    return(int_posture);
 8011e16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                            }

#ifndef TX_NOT_INTERRUPTABLE

                            /* Disable interrupts.  */
                            TX_DISABLE
 8011e18:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

                            /* Undo the temporarily preemption disable.  */
                            _tx_thread_preempt_disable--;
 8011e1c:	4b3c      	ldr	r3, [pc, #240]	; (8011f10 <_tx_mutex_put+0x2c4>)
 8011e1e:	681b      	ldr	r3, [r3, #0]
 8011e20:	3b01      	subs	r3, #1
 8011e22:	4a3b      	ldr	r2, [pc, #236]	; (8011f10 <_tx_mutex_put+0x2c4>)
 8011e24:	6013      	str	r3, [r2, #0]
#endif

                            /* Set the inherit priority to that of the highest priority thread waiting on the mutex.  */
                            thread_ptr -> tx_thread_inherit_priority =  inheritance_priority;
 8011e26:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8011e28:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8011e2c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

                            /* Determine if the inheritance priority is less than the default old priority.  */
                            if (inheritance_priority < old_priority)
 8011e30:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8011e34:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8011e38:	429a      	cmp	r2, r3
 8011e3a:	d203      	bcs.n	8011e44 <_tx_mutex_put+0x1f8>
                            {

                                /* Yes, update the old priority.  */
                                old_priority =  inheritance_priority;
 8011e3c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8011e40:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                            }
                        }

                        /* Determine if priority inheritance is in effect and there are one or more
                           threads suspended on the mutex.  */
                        if (mutex_ptr -> tx_mutex_suspended_count > ((UINT) 1))
 8011e44:	687b      	ldr	r3, [r7, #4]
 8011e46:	69db      	ldr	r3, [r3, #28]
 8011e48:	2b01      	cmp	r3, #1
 8011e4a:	d920      	bls.n	8011e8e <_tx_mutex_put+0x242>
                        {

                            /* Is priority inheritance in effect?  */
                            if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 8011e4c:	687b      	ldr	r3, [r7, #4]
 8011e4e:	691b      	ldr	r3, [r3, #16]
 8011e50:	2b01      	cmp	r3, #1
 8011e52:	d11c      	bne.n	8011e8e <_tx_mutex_put+0x242>
                                   at the front of the suspension list.  */

#ifndef TX_NOT_INTERRUPTABLE

                                /* Temporarily disable preemption.  */
                                _tx_thread_preempt_disable++;
 8011e54:	4b2e      	ldr	r3, [pc, #184]	; (8011f10 <_tx_mutex_put+0x2c4>)
 8011e56:	681b      	ldr	r3, [r3, #0]
 8011e58:	3301      	adds	r3, #1
 8011e5a:	4a2d      	ldr	r2, [pc, #180]	; (8011f10 <_tx_mutex_put+0x2c4>)
 8011e5c:	6013      	str	r3, [r2, #0]
 8011e5e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8011e62:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8011e64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e66:	f383 8810 	msr	PRIMASK, r3
}
 8011e6a:	bf00      	nop
                                do
                                {
                                    status =  _tx_mutex_prioritize(mutex_ptr);
                                } while (status != TX_SUCCESS);
#else
                                _tx_mutex_prioritize(mutex_ptr);
 8011e6c:	6878      	ldr	r0, [r7, #4]
 8011e6e:	f7ff fd7d 	bl	801196c <_tx_mutex_prioritize>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8011e72:	f3ef 8310 	mrs	r3, PRIMASK
 8011e76:	63bb      	str	r3, [r7, #56]	; 0x38
    return(posture);
 8011e78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    int_posture = __get_interrupt_posture();
 8011e7a:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile ("CPSID i" : : : "memory");
 8011e7c:	b672      	cpsid	i
    return(int_posture);
 8011e7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                TX_MUTEX_PUT_EXTENSION_1

#ifndef TX_NOT_INTERRUPTABLE

                                /* Disable interrupts.  */
                                TX_DISABLE
 8011e80:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

                                /* Back off the preemption disable.  */
                                _tx_thread_preempt_disable--;
 8011e84:	4b22      	ldr	r3, [pc, #136]	; (8011f10 <_tx_mutex_put+0x2c4>)
 8011e86:	681b      	ldr	r3, [r3, #0]
 8011e88:	3b01      	subs	r3, #1
 8011e8a:	4a21      	ldr	r2, [pc, #132]	; (8011f10 <_tx_mutex_put+0x2c4>)
 8011e8c:	6013      	str	r3, [r2, #0]
#endif
                            }
                        }

                        /* Now determine if there are any threads still waiting on the mutex.  */
                        if (mutex_ptr -> tx_mutex_suspension_list == TX_NULL)
 8011e8e:	687b      	ldr	r3, [r7, #4]
 8011e90:	699b      	ldr	r3, [r3, #24]
 8011e92:	2b00      	cmp	r3, #0
 8011e94:	d13e      	bne.n	8011f14 <_tx_mutex_put+0x2c8>
                            /* No, there are no longer any threads waiting on the mutex.  */

#ifndef TX_NOT_INTERRUPTABLE

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 8011e96:	4b1e      	ldr	r3, [pc, #120]	; (8011f10 <_tx_mutex_put+0x2c4>)
 8011e98:	681b      	ldr	r3, [r3, #0]
 8011e9a:	3301      	adds	r3, #1
 8011e9c:	4a1c      	ldr	r2, [pc, #112]	; (8011f10 <_tx_mutex_put+0x2c4>)
 8011e9e:	6013      	str	r3, [r2, #0]
 8011ea0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8011ea4:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8011ea6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ea8:	f383 8810 	msr	PRIMASK, r3
}
 8011eac:	bf00      	nop
                            /* Mutex is not owned, but it is possible that a thread that
                               caused a priority inheritance to occur is no longer waiting
                               on the mutex.  */

                            /* Setup the highest priority waiting thread.  */
                            mutex_ptr -> tx_mutex_highest_priority_waiting =  (UINT) TX_MAX_PRIORITIES;
 8011eae:	687b      	ldr	r3, [r7, #4]
 8011eb0:	2220      	movs	r2, #32
 8011eb2:	629a      	str	r2, [r3, #40]	; 0x28

                            /* Determine if we need to restore priority.  */
                            if ((mutex_ptr -> tx_mutex_owner) -> tx_thread_priority != old_priority)
 8011eb4:	687b      	ldr	r3, [r7, #4]
 8011eb6:	68db      	ldr	r3, [r3, #12]
 8011eb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011eba:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8011ebe:	429a      	cmp	r2, r3
 8011ec0:	d006      	beq.n	8011ed0 <_tx_mutex_put+0x284>
                            {

                                /* Yes, restore the priority of thread.  */
                                _tx_mutex_priority_change(mutex_ptr -> tx_mutex_owner, old_priority);
 8011ec2:	687b      	ldr	r3, [r7, #4]
 8011ec4:	68db      	ldr	r3, [r3, #12]
 8011ec6:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 8011eca:	4618      	mov	r0, r3
 8011ecc:	f7ff fe00 	bl	8011ad0 <_tx_mutex_priority_change>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8011ed0:	f3ef 8310 	mrs	r3, PRIMASK
 8011ed4:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 8011ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    int_posture = __get_interrupt_posture();
 8011ed8:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSID i" : : : "memory");
 8011eda:	b672      	cpsid	i
    return(int_posture);
 8011edc:	6a3b      	ldr	r3, [r7, #32]
                            }

#ifndef TX_NOT_INTERRUPTABLE

                            /* Disable interrupts again.  */
                            TX_DISABLE
 8011ede:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

                            /* Back off the preemption disable.  */
                            _tx_thread_preempt_disable--;
 8011ee2:	4b0b      	ldr	r3, [pc, #44]	; (8011f10 <_tx_mutex_put+0x2c4>)
 8011ee4:	681b      	ldr	r3, [r3, #0]
 8011ee6:	3b01      	subs	r3, #1
 8011ee8:	4a09      	ldr	r2, [pc, #36]	; (8011f10 <_tx_mutex_put+0x2c4>)
 8011eea:	6013      	str	r3, [r2, #0]
#endif

                            /* Set the mutex owner to NULL.  */
                            mutex_ptr -> tx_mutex_owner =  TX_NULL;
 8011eec:	687b      	ldr	r3, [r7, #4]
 8011eee:	2200      	movs	r2, #0
 8011ef0:	60da      	str	r2, [r3, #12]
 8011ef2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8011ef6:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8011ef8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011efa:	f383 8810 	msr	PRIMASK, r3
}
 8011efe:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Check for preemption.  */
                            _tx_thread_system_preempt_check();
 8011f00:	f000 fdb6 	bl	8012a70 <_tx_thread_system_preempt_check>

                            /* Set status to success.  */
                            status =  TX_SUCCESS;
 8011f04:	2300      	movs	r3, #0
 8011f06:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8011f0a:	e0bd      	b.n	8012088 <_tx_mutex_put+0x43c>
 8011f0c:	2001c9e8 	.word	0x2001c9e8
 8011f10:	2001ca80 	.word	0x2001ca80
                        }
                        else
                        {

                            /* Pickup the thread at the front of the suspension list.  */
                            thread_ptr =  mutex_ptr -> tx_mutex_suspension_list;
 8011f14:	687b      	ldr	r3, [r7, #4]
 8011f16:	699b      	ldr	r3, [r3, #24]
 8011f18:	67fb      	str	r3, [r7, #124]	; 0x7c

                            /* Save the previous ownership information, if inheritance is
                               in effect.  */
                            if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 8011f1a:	687b      	ldr	r3, [r7, #4]
 8011f1c:	691b      	ldr	r3, [r3, #16]
 8011f1e:	2b01      	cmp	r3, #1
 8011f20:	d10a      	bne.n	8011f38 <_tx_mutex_put+0x2ec>
                            {

                                /* Remember the old mutex owner.  */
                                old_owner =  mutex_ptr -> tx_mutex_owner;
 8011f22:	687b      	ldr	r3, [r7, #4]
 8011f24:	68db      	ldr	r3, [r3, #12]
 8011f26:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

                                /* Setup owner thread priority information.  */
                                mutex_ptr -> tx_mutex_original_priority =   thread_ptr -> tx_thread_priority;
 8011f2a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8011f2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011f2e:	687b      	ldr	r3, [r7, #4]
 8011f30:	615a      	str	r2, [r3, #20]

                                /* Setup the highest priority waiting thread.  */
                                mutex_ptr -> tx_mutex_highest_priority_waiting =  (UINT) TX_MAX_PRIORITIES;
 8011f32:	687b      	ldr	r3, [r7, #4]
 8011f34:	2220      	movs	r2, #32
 8011f36:	629a      	str	r2, [r3, #40]	; 0x28
                            }

                            /* Determine how many mutexes are owned by this thread.  */
                            owned_count =  thread_ptr -> tx_thread_owned_mutex_count;
 8011f38:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8011f3a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8011f3e:	673b      	str	r3, [r7, #112]	; 0x70

                            /* Determine if this thread owns any other mutexes that have priority inheritance.  */
                            if (owned_count == ((UINT) 0))
 8011f40:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8011f42:	2b00      	cmp	r3, #0
 8011f44:	d10a      	bne.n	8011f5c <_tx_mutex_put+0x310>
                            {

                                /* The owned mutex list is empty.  Add mutex to empty list.  */
                                thread_ptr -> tx_thread_owned_mutex_list =     mutex_ptr;
 8011f46:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8011f48:	687a      	ldr	r2, [r7, #4]
 8011f4a:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
                                mutex_ptr -> tx_mutex_owned_next =             mutex_ptr;
 8011f4e:	687b      	ldr	r3, [r7, #4]
 8011f50:	687a      	ldr	r2, [r7, #4]
 8011f52:	62da      	str	r2, [r3, #44]	; 0x2c
                                mutex_ptr -> tx_mutex_owned_previous =         mutex_ptr;
 8011f54:	687b      	ldr	r3, [r7, #4]
 8011f56:	687a      	ldr	r2, [r7, #4]
 8011f58:	631a      	str	r2, [r3, #48]	; 0x30
 8011f5a:	e016      	b.n	8011f8a <_tx_mutex_put+0x33e>
                            {

                                /* Non-empty list. Link up the mutex.  */

                                /* Pickup tail pointer.  */
                                next_mutex =                            thread_ptr -> tx_thread_owned_mutex_list;
 8011f5c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8011f5e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8011f62:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
                                previous_mutex =                        next_mutex -> tx_mutex_owned_previous;
 8011f66:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8011f6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011f6c:	677b      	str	r3, [r7, #116]	; 0x74

                                /* Place the owned mutex in the list.  */
                                next_mutex -> tx_mutex_owned_previous =  mutex_ptr;
 8011f6e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8011f72:	687a      	ldr	r2, [r7, #4]
 8011f74:	631a      	str	r2, [r3, #48]	; 0x30
                                previous_mutex -> tx_mutex_owned_next =  mutex_ptr;
 8011f76:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8011f78:	687a      	ldr	r2, [r7, #4]
 8011f7a:	62da      	str	r2, [r3, #44]	; 0x2c

                                /* Setup this mutex's next and previous created links.  */
                                mutex_ptr -> tx_mutex_owned_previous =   previous_mutex;
 8011f7c:	687b      	ldr	r3, [r7, #4]
 8011f7e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8011f80:	631a      	str	r2, [r3, #48]	; 0x30
                                mutex_ptr -> tx_mutex_owned_next =       next_mutex;
 8011f82:	687b      	ldr	r3, [r7, #4]
 8011f84:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8011f88:	62da      	str	r2, [r3, #44]	; 0x2c
                            }

                            /* Increment the number of mutexes owned counter.  */
                            thread_ptr -> tx_thread_owned_mutex_count =  owned_count + ((UINT) 1);
 8011f8a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8011f8c:	1c5a      	adds	r2, r3, #1
 8011f8e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8011f90:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

                            /* Mark the Mutex as owned and fill in the corresponding information.  */
                            mutex_ptr -> tx_mutex_ownership_count =  (UINT) 1;
 8011f94:	687b      	ldr	r3, [r7, #4]
 8011f96:	2201      	movs	r2, #1
 8011f98:	609a      	str	r2, [r3, #8]
                            mutex_ptr -> tx_mutex_owner =            thread_ptr;
 8011f9a:	687b      	ldr	r3, [r7, #4]
 8011f9c:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8011f9e:	60da      	str	r2, [r3, #12]

                            /* Remove the suspended thread from the list.  */

                            /* Decrement the suspension count.  */
                            mutex_ptr -> tx_mutex_suspended_count--;
 8011fa0:	687b      	ldr	r3, [r7, #4]
 8011fa2:	69db      	ldr	r3, [r3, #28]
 8011fa4:	1e5a      	subs	r2, r3, #1
 8011fa6:	687b      	ldr	r3, [r7, #4]
 8011fa8:	61da      	str	r2, [r3, #28]

                            /* Pickup the suspended count.  */
                            suspended_count =  mutex_ptr -> tx_mutex_suspended_count;
 8011faa:	687b      	ldr	r3, [r7, #4]
 8011fac:	69db      	ldr	r3, [r3, #28]
 8011fae:	66fb      	str	r3, [r7, #108]	; 0x6c

                            /* See if this is the only suspended thread on the list.  */
                            if (suspended_count == TX_NO_SUSPENSIONS)
 8011fb0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011fb2:	2b00      	cmp	r3, #0
 8011fb4:	d103      	bne.n	8011fbe <_tx_mutex_put+0x372>
                            {

                                /* Yes, the only suspended thread.  */

                                /* Update the head pointer.  */
                                mutex_ptr -> tx_mutex_suspension_list =  TX_NULL;
 8011fb6:	687b      	ldr	r3, [r7, #4]
 8011fb8:	2200      	movs	r2, #0
 8011fba:	619a      	str	r2, [r3, #24]
 8011fbc:	e00e      	b.n	8011fdc <_tx_mutex_put+0x390>
                            {

                                /* At least one more thread is on the same expiration list.  */

                                /* Update the list head pointer.  */
                                next_thread =                                  thread_ptr -> tx_thread_suspended_next;
 8011fbe:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8011fc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011fc2:	66bb      	str	r3, [r7, #104]	; 0x68
                                mutex_ptr -> tx_mutex_suspension_list =        next_thread;
 8011fc4:	687b      	ldr	r3, [r7, #4]
 8011fc6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8011fc8:	619a      	str	r2, [r3, #24]

                                /* Update the links of the adjacent threads.  */
                                previous_thread =                              thread_ptr -> tx_thread_suspended_previous;
 8011fca:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8011fcc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011fce:	667b      	str	r3, [r7, #100]	; 0x64
                                next_thread -> tx_thread_suspended_previous =  previous_thread;
 8011fd0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8011fd2:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8011fd4:	675a      	str	r2, [r3, #116]	; 0x74
                                previous_thread -> tx_thread_suspended_next =  next_thread;
 8011fd6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011fd8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8011fda:	671a      	str	r2, [r3, #112]	; 0x70
                            }

                            /* Prepare for resumption of the first thread.  */

                            /* Clear cleanup routine to avoid timeout.  */
                            thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8011fdc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8011fde:	2200      	movs	r2, #0
 8011fe0:	669a      	str	r2, [r3, #104]	; 0x68

                            /* Put return status into the thread control block.  */
                            thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 8011fe2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8011fe4:	2200      	movs	r2, #0
 8011fe6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                            /* Restore interrupts.  */
                            TX_RESTORE
#else

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 8011fea:	4b2a      	ldr	r3, [pc, #168]	; (8012094 <_tx_mutex_put+0x448>)
 8011fec:	681b      	ldr	r3, [r3, #0]
 8011fee:	3301      	adds	r3, #1
 8011ff0:	4a28      	ldr	r2, [pc, #160]	; (8012094 <_tx_mutex_put+0x448>)
 8011ff2:	6013      	str	r3, [r2, #0]
 8011ff4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8011ff8:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8011ffa:	69fb      	ldr	r3, [r7, #28]
 8011ffc:	f383 8810 	msr	PRIMASK, r3
}
 8012000:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Determine if priority inheritance is enabled for this mutex.  */
                            if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 8012002:	687b      	ldr	r3, [r7, #4]
 8012004:	691b      	ldr	r3, [r3, #16]
 8012006:	2b01      	cmp	r3, #1
 8012008:	d12d      	bne.n	8012066 <_tx_mutex_put+0x41a>
                            {

                                /* Yes, priority inheritance is requested.  */

                                /* Determine if there are any more threads still suspended on the mutex.  */
                                if (mutex_ptr -> tx_mutex_suspended_count != TX_NO_SUSPENSIONS)
 801200a:	687b      	ldr	r3, [r7, #4]
 801200c:	69db      	ldr	r3, [r3, #28]
 801200e:	2b00      	cmp	r3, #0
 8012010:	d01c      	beq.n	801204c <_tx_mutex_put+0x400>
                                    do
                                    {
                                        status =  _tx_mutex_prioritize(mutex_ptr);
                                    } while (status != TX_SUCCESS);
#else
                                    _tx_mutex_prioritize(mutex_ptr);
 8012012:	6878      	ldr	r0, [r7, #4]
 8012014:	f7ff fcaa 	bl	801196c <_tx_mutex_prioritize>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8012018:	f3ef 8310 	mrs	r3, PRIMASK
 801201c:	61bb      	str	r3, [r7, #24]
    return(posture);
 801201e:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8012020:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8012022:	b672      	cpsid	i
    return(int_posture);
 8012024:	697b      	ldr	r3, [r7, #20]

                                    /* Optional processing extension.  */
                                    TX_MUTEX_PUT_EXTENSION_2

                                    /* Disable interrupts.  */
                                    TX_DISABLE
 8012026:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

                                    /* Determine if there still are threads suspended for this mutex.  */
                                    suspended_thread =  mutex_ptr -> tx_mutex_suspension_list;
 801202a:	687b      	ldr	r3, [r7, #4]
 801202c:	699b      	ldr	r3, [r3, #24]
 801202e:	663b      	str	r3, [r7, #96]	; 0x60
                                    if (suspended_thread != TX_NULL)
 8012030:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012032:	2b00      	cmp	r3, #0
 8012034:	d003      	beq.n	801203e <_tx_mutex_put+0x3f2>
                                    {

                                        /* Setup the highest priority thread waiting on this mutex.  */
                                        mutex_ptr -> tx_mutex_highest_priority_waiting =  suspended_thread -> tx_thread_priority;
 8012036:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012038:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801203a:	687b      	ldr	r3, [r7, #4]
 801203c:	629a      	str	r2, [r3, #40]	; 0x28
 801203e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8012042:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8012044:	693b      	ldr	r3, [r7, #16]
 8012046:	f383 8810 	msr	PRIMASK, r3
}
 801204a:	bf00      	nop

                                /* Restore previous priority needs to be restored after priority
                                   inheritance.  */

                                /* Is the priority different?  */
                                if (old_owner -> tx_thread_priority != old_priority)
 801204c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8012050:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012052:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8012056:	429a      	cmp	r2, r3
 8012058:	d005      	beq.n	8012066 <_tx_mutex_put+0x41a>
                                {

                                    /* Restore the priority of thread.  */
                                    _tx_mutex_priority_change(old_owner, old_priority);
 801205a:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 801205e:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 8012062:	f7ff fd35 	bl	8011ad0 <_tx_mutex_priority_change>
                                }
                            }

                            /* Resume thread.  */
                            _tx_thread_system_resume(thread_ptr);
 8012066:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8012068:	f000 fd3c 	bl	8012ae4 <_tx_thread_system_resume>
#endif

                            /* Return a successful status.  */
                            status =  TX_SUCCESS;
 801206c:	2300      	movs	r3, #0
 801206e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8012072:	e009      	b.n	8012088 <_tx_mutex_put+0x43c>
 8012074:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8012078:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801207a:	68fb      	ldr	r3, [r7, #12]
 801207c:	f383 8810 	msr	PRIMASK, r3
}
 8012080:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Caller does not own the mutex.  */
        status =  TX_NOT_OWNED;
 8012082:	231e      	movs	r3, #30
 8012084:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    }

    /* Return the completion status.  */
    return(status);
 8012088:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
}
 801208c:	4618      	mov	r0, r3
 801208e:	3798      	adds	r7, #152	; 0x98
 8012090:	46bd      	mov	sp, r7
 8012092:	bd80      	pop	{r7, pc}
 8012094:	2001ca80 	.word	0x2001ca80

08012098 <_tx_semaphore_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_semaphore_cleanup(TX_THREAD *thread_ptr, ULONG suspension_sequence)
{
 8012098:	b580      	push	{r7, lr}
 801209a:	b08e      	sub	sp, #56	; 0x38
 801209c:	af00      	add	r7, sp, #0
 801209e:	6078      	str	r0, [r7, #4]
 80120a0:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80120a2:	f3ef 8310 	mrs	r3, PRIMASK
 80120a6:	623b      	str	r3, [r7, #32]
    return(posture);
 80120a8:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 80120aa:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 80120ac:	b672      	cpsid	i
    return(int_posture);
 80120ae:	69fb      	ldr	r3, [r7, #28]


#ifndef TX_NOT_INTERRUPTABLE

    /* Disable interrupts to remove the suspended thread from the semaphore.  */
    TX_DISABLE
 80120b0:	637b      	str	r3, [r7, #52]	; 0x34

    /* Determine if the cleanup is still required.  */
    if (thread_ptr -> tx_thread_suspend_cleanup == &(_tx_semaphore_cleanup))
 80120b2:	687b      	ldr	r3, [r7, #4]
 80120b4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80120b6:	4a33      	ldr	r2, [pc, #204]	; (8012184 <_tx_semaphore_cleanup+0xec>)
 80120b8:	4293      	cmp	r3, r2
 80120ba:	d158      	bne.n	801216e <_tx_semaphore_cleanup+0xd6>
    {

        /* Check for valid suspension sequence.  */
        if (suspension_sequence == thread_ptr -> tx_thread_suspension_sequence)
 80120bc:	687b      	ldr	r3, [r7, #4]
 80120be:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80120c2:	683a      	ldr	r2, [r7, #0]
 80120c4:	429a      	cmp	r2, r3
 80120c6:	d152      	bne.n	801216e <_tx_semaphore_cleanup+0xd6>
        {

            /* Setup pointer to semaphore control block.  */
            semaphore_ptr =  TX_VOID_TO_SEMAPHORE_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
 80120c8:	687b      	ldr	r3, [r7, #4]
 80120ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80120cc:	633b      	str	r3, [r7, #48]	; 0x30

            /* Check for a NULL semaphore pointer.  */
            if (semaphore_ptr != TX_NULL)
 80120ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80120d0:	2b00      	cmp	r3, #0
 80120d2:	d04c      	beq.n	801216e <_tx_semaphore_cleanup+0xd6>
            {

                /* Check for a valid semaphore ID.  */
                if (semaphore_ptr -> tx_semaphore_id == TX_SEMAPHORE_ID)
 80120d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80120d6:	681b      	ldr	r3, [r3, #0]
 80120d8:	4a2b      	ldr	r2, [pc, #172]	; (8012188 <_tx_semaphore_cleanup+0xf0>)
 80120da:	4293      	cmp	r3, r2
 80120dc:	d147      	bne.n	801216e <_tx_semaphore_cleanup+0xd6>
                {

                    /* Determine if there are any thread suspensions.  */
                    if (semaphore_ptr -> tx_semaphore_suspended_count != TX_NO_SUSPENSIONS)
 80120de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80120e0:	691b      	ldr	r3, [r3, #16]
 80120e2:	2b00      	cmp	r3, #0
 80120e4:	d043      	beq.n	801216e <_tx_semaphore_cleanup+0xd6>
#endif

                        /* Yes, we still have thread suspension!  */

                        /* Clear the suspension cleanup flag.  */
                        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 80120e6:	687b      	ldr	r3, [r7, #4]
 80120e8:	2200      	movs	r2, #0
 80120ea:	669a      	str	r2, [r3, #104]	; 0x68

                        /* Decrement the suspended count.  */
                        semaphore_ptr -> tx_semaphore_suspended_count--;
 80120ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80120ee:	691b      	ldr	r3, [r3, #16]
 80120f0:	1e5a      	subs	r2, r3, #1
 80120f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80120f4:	611a      	str	r2, [r3, #16]

                        /* Pickup the suspended count.  */
                        suspended_count =  semaphore_ptr -> tx_semaphore_suspended_count;
 80120f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80120f8:	691b      	ldr	r3, [r3, #16]
 80120fa:	62fb      	str	r3, [r7, #44]	; 0x2c

                        /* Remove the suspended thread from the list.  */

                        /* See if this is the only suspended thread on the list.  */
                        if (suspended_count == TX_NO_SUSPENSIONS)
 80120fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80120fe:	2b00      	cmp	r3, #0
 8012100:	d103      	bne.n	801210a <_tx_semaphore_cleanup+0x72>
                        {

                            /* Yes, the only suspended thread.  */

                            /* Update the head pointer.  */
                            semaphore_ptr -> tx_semaphore_suspension_list =  TX_NULL;
 8012102:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012104:	2200      	movs	r2, #0
 8012106:	60da      	str	r2, [r3, #12]
 8012108:	e013      	b.n	8012132 <_tx_semaphore_cleanup+0x9a>
                        {

                            /* At least one more thread is on the same suspension list.  */

                            /* Update the links of the adjacent threads.  */
                            next_thread =                                   thread_ptr -> tx_thread_suspended_next;
 801210a:	687b      	ldr	r3, [r7, #4]
 801210c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801210e:	62bb      	str	r3, [r7, #40]	; 0x28
                            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 8012110:	687b      	ldr	r3, [r7, #4]
 8012112:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012114:	627b      	str	r3, [r7, #36]	; 0x24
                            next_thread -> tx_thread_suspended_previous =   previous_thread;
 8012116:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012118:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801211a:	675a      	str	r2, [r3, #116]	; 0x74
                            previous_thread -> tx_thread_suspended_next =   next_thread;
 801211c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801211e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012120:	671a      	str	r2, [r3, #112]	; 0x70

                            /* Determine if we need to update the head pointer.  */
                            if (semaphore_ptr -> tx_semaphore_suspension_list == thread_ptr)
 8012122:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012124:	68db      	ldr	r3, [r3, #12]
 8012126:	687a      	ldr	r2, [r7, #4]
 8012128:	429a      	cmp	r2, r3
 801212a:	d102      	bne.n	8012132 <_tx_semaphore_cleanup+0x9a>
                            {

                                /* Update the list head pointer.  */
                                semaphore_ptr -> tx_semaphore_suspension_list =   next_thread;
 801212c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801212e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012130:	60da      	str	r2, [r3, #12]
                            }
                        }

                        /* Now we need to determine if this cleanup is from a terminate, timeout,
                           or from a wait abort.  */
                        if (thread_ptr -> tx_thread_state == TX_SEMAPHORE_SUSP)
 8012132:	687b      	ldr	r3, [r7, #4]
 8012134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012136:	2b06      	cmp	r3, #6
 8012138:	d119      	bne.n	801216e <_tx_semaphore_cleanup+0xd6>
                            /* Increment the number of timeouts on this semaphore.  */
                            semaphore_ptr -> tx_semaphore_performance_timeout_count++;
#endif

                            /* Setup return status.  */
                            thread_ptr -> tx_thread_suspend_status =  TX_NO_INSTANCE;
 801213a:	687b      	ldr	r3, [r7, #4]
 801213c:	220d      	movs	r2, #13
 801213e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                            /* Resume the thread!  */
                            _tx_thread_system_ni_resume(thread_ptr);
#else

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 8012142:	4b12      	ldr	r3, [pc, #72]	; (801218c <_tx_semaphore_cleanup+0xf4>)
 8012144:	681b      	ldr	r3, [r3, #0]
 8012146:	3301      	adds	r3, #1
 8012148:	4a10      	ldr	r2, [pc, #64]	; (801218c <_tx_semaphore_cleanup+0xf4>)
 801214a:	6013      	str	r3, [r2, #0]
 801214c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801214e:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8012150:	693b      	ldr	r3, [r7, #16]
 8012152:	f383 8810 	msr	PRIMASK, r3
}
 8012156:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Resume the thread!  */
                            _tx_thread_system_resume(thread_ptr);
 8012158:	6878      	ldr	r0, [r7, #4]
 801215a:	f000 fcc3 	bl	8012ae4 <_tx_thread_system_resume>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801215e:	f3ef 8310 	mrs	r3, PRIMASK
 8012162:	61bb      	str	r3, [r7, #24]
    return(posture);
 8012164:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8012166:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8012168:	b672      	cpsid	i
    return(int_posture);
 801216a:	697b      	ldr	r3, [r7, #20]

                            /* Disable interrupts.  */
                            TX_DISABLE
 801216c:	637b      	str	r3, [r7, #52]	; 0x34
 801216e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012170:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8012172:	68fb      	ldr	r3, [r7, #12]
 8012174:	f383 8810 	msr	PRIMASK, r3
}
 8012178:	bf00      	nop
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 801217a:	bf00      	nop
 801217c:	3738      	adds	r7, #56	; 0x38
 801217e:	46bd      	mov	sp, r7
 8012180:	bd80      	pop	{r7, pc}
 8012182:	bf00      	nop
 8012184:	08012099 	.word	0x08012099
 8012188:	53454d41 	.word	0x53454d41
 801218c:	2001ca80 	.word	0x2001ca80

08012190 <_tx_semaphore_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_semaphore_create(TX_SEMAPHORE *semaphore_ptr, CHAR *name_ptr, ULONG initial_count)
{
 8012190:	b580      	push	{r7, lr}
 8012192:	b08a      	sub	sp, #40	; 0x28
 8012194:	af00      	add	r7, sp, #0
 8012196:	60f8      	str	r0, [r7, #12]
 8012198:	60b9      	str	r1, [r7, #8]
 801219a:	607a      	str	r2, [r7, #4]
TX_SEMAPHORE    *next_semaphore;
TX_SEMAPHORE    *previous_semaphore;


    /* Initialize semaphore control block to all zeros.  */
    TX_MEMSET(semaphore_ptr, 0, (sizeof(TX_SEMAPHORE)));
 801219c:	221c      	movs	r2, #28
 801219e:	2100      	movs	r1, #0
 80121a0:	68f8      	ldr	r0, [r7, #12]
 80121a2:	f001 fe3b 	bl	8013e1c <memset>

    /* Setup the basic semaphore fields.  */
    semaphore_ptr -> tx_semaphore_name =             name_ptr;
 80121a6:	68fb      	ldr	r3, [r7, #12]
 80121a8:	68ba      	ldr	r2, [r7, #8]
 80121aa:	605a      	str	r2, [r3, #4]
    semaphore_ptr -> tx_semaphore_count =            initial_count;
 80121ac:	68fb      	ldr	r3, [r7, #12]
 80121ae:	687a      	ldr	r2, [r7, #4]
 80121b0:	609a      	str	r2, [r3, #8]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80121b2:	f3ef 8310 	mrs	r3, PRIMASK
 80121b6:	61bb      	str	r3, [r7, #24]
    return(posture);
 80121b8:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 80121ba:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 80121bc:	b672      	cpsid	i
    return(int_posture);
 80121be:	697b      	ldr	r3, [r7, #20]

    /* Disable interrupts to place the semaphore on the created list.  */
    TX_DISABLE
 80121c0:	627b      	str	r3, [r7, #36]	; 0x24

    /* Setup the semaphore ID to make it valid.  */
    semaphore_ptr -> tx_semaphore_id =  TX_SEMAPHORE_ID;
 80121c2:	68fb      	ldr	r3, [r7, #12]
 80121c4:	4a18      	ldr	r2, [pc, #96]	; (8012228 <_tx_semaphore_create+0x98>)
 80121c6:	601a      	str	r2, [r3, #0]

    /* Place the semaphore on the list of created semaphores.  First,
       check for an empty list.  */
    if (_tx_semaphore_created_count == TX_EMPTY)
 80121c8:	4b18      	ldr	r3, [pc, #96]	; (801222c <_tx_semaphore_create+0x9c>)
 80121ca:	681b      	ldr	r3, [r3, #0]
 80121cc:	2b00      	cmp	r3, #0
 80121ce:	d109      	bne.n	80121e4 <_tx_semaphore_create+0x54>
    {

        /* The created semaphore list is empty.  Add semaphore to empty list.  */
        _tx_semaphore_created_ptr =                       semaphore_ptr;
 80121d0:	4a17      	ldr	r2, [pc, #92]	; (8012230 <_tx_semaphore_create+0xa0>)
 80121d2:	68fb      	ldr	r3, [r7, #12]
 80121d4:	6013      	str	r3, [r2, #0]
        semaphore_ptr -> tx_semaphore_created_next =      semaphore_ptr;
 80121d6:	68fb      	ldr	r3, [r7, #12]
 80121d8:	68fa      	ldr	r2, [r7, #12]
 80121da:	615a      	str	r2, [r3, #20]
        semaphore_ptr -> tx_semaphore_created_previous =  semaphore_ptr;
 80121dc:	68fb      	ldr	r3, [r7, #12]
 80121de:	68fa      	ldr	r2, [r7, #12]
 80121e0:	619a      	str	r2, [r3, #24]
 80121e2:	e011      	b.n	8012208 <_tx_semaphore_create+0x78>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_semaphore =      _tx_semaphore_created_ptr;
 80121e4:	4b12      	ldr	r3, [pc, #72]	; (8012230 <_tx_semaphore_create+0xa0>)
 80121e6:	681b      	ldr	r3, [r3, #0]
 80121e8:	623b      	str	r3, [r7, #32]
        previous_semaphore =  next_semaphore -> tx_semaphore_created_previous;
 80121ea:	6a3b      	ldr	r3, [r7, #32]
 80121ec:	699b      	ldr	r3, [r3, #24]
 80121ee:	61fb      	str	r3, [r7, #28]

        /* Place the new semaphore in the list.  */
        next_semaphore -> tx_semaphore_created_previous =  semaphore_ptr;
 80121f0:	6a3b      	ldr	r3, [r7, #32]
 80121f2:	68fa      	ldr	r2, [r7, #12]
 80121f4:	619a      	str	r2, [r3, #24]
        previous_semaphore -> tx_semaphore_created_next =  semaphore_ptr;
 80121f6:	69fb      	ldr	r3, [r7, #28]
 80121f8:	68fa      	ldr	r2, [r7, #12]
 80121fa:	615a      	str	r2, [r3, #20]

        /* Setup this semaphore's next and previous created links.  */
        semaphore_ptr -> tx_semaphore_created_previous =  previous_semaphore;
 80121fc:	68fb      	ldr	r3, [r7, #12]
 80121fe:	69fa      	ldr	r2, [r7, #28]
 8012200:	619a      	str	r2, [r3, #24]
        semaphore_ptr -> tx_semaphore_created_next =      next_semaphore;
 8012202:	68fb      	ldr	r3, [r7, #12]
 8012204:	6a3a      	ldr	r2, [r7, #32]
 8012206:	615a      	str	r2, [r3, #20]
    }

    /* Increment the created count.  */
    _tx_semaphore_created_count++;
 8012208:	4b08      	ldr	r3, [pc, #32]	; (801222c <_tx_semaphore_create+0x9c>)
 801220a:	681b      	ldr	r3, [r3, #0]
 801220c:	3301      	adds	r3, #1
 801220e:	4a07      	ldr	r2, [pc, #28]	; (801222c <_tx_semaphore_create+0x9c>)
 8012210:	6013      	str	r3, [r2, #0]
 8012212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012214:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8012216:	693b      	ldr	r3, [r7, #16]
 8012218:	f383 8810 	msr	PRIMASK, r3
}
 801221c:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 801221e:	2300      	movs	r3, #0
}
 8012220:	4618      	mov	r0, r3
 8012222:	3728      	adds	r7, #40	; 0x28
 8012224:	46bd      	mov	sp, r7
 8012226:	bd80      	pop	{r7, pc}
 8012228:	53454d41 	.word	0x53454d41
 801222c:	2001c9b4 	.word	0x2001c9b4
 8012230:	2001c9b0 	.word	0x2001c9b0

08012234 <_tx_semaphore_get>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_semaphore_get(TX_SEMAPHORE *semaphore_ptr, ULONG wait_option)
{
 8012234:	b580      	push	{r7, lr}
 8012236:	b08e      	sub	sp, #56	; 0x38
 8012238:	af00      	add	r7, sp, #0
 801223a:	6078      	str	r0, [r7, #4]
 801223c:	6039      	str	r1, [r7, #0]
TX_THREAD       *previous_thread;
UINT            status;


    /* Default the status to TX_SUCCESS.  */
    status =  TX_SUCCESS;
 801223e:	2300      	movs	r3, #0
 8012240:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8012242:	f3ef 8310 	mrs	r3, PRIMASK
 8012246:	623b      	str	r3, [r7, #32]
    return(posture);
 8012248:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 801224a:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 801224c:	b672      	cpsid	i
    return(int_posture);
 801224e:	69fb      	ldr	r3, [r7, #28]

    /* Disable interrupts to get an instance from the semaphore.  */
    TX_DISABLE
 8012250:	633b      	str	r3, [r7, #48]	; 0x30

    /* Log this kernel call.  */
    TX_EL_SEMAPHORE_GET_INSERT

    /* Determine if there is an instance of the semaphore.  */
    if (semaphore_ptr -> tx_semaphore_count != ((ULONG) 0))
 8012252:	687b      	ldr	r3, [r7, #4]
 8012254:	689b      	ldr	r3, [r3, #8]
 8012256:	2b00      	cmp	r3, #0
 8012258:	d00a      	beq.n	8012270 <_tx_semaphore_get+0x3c>
    {

        /* Decrement the semaphore count.  */
        semaphore_ptr -> tx_semaphore_count--;
 801225a:	687b      	ldr	r3, [r7, #4]
 801225c:	689b      	ldr	r3, [r3, #8]
 801225e:	1e5a      	subs	r2, r3, #1
 8012260:	687b      	ldr	r3, [r7, #4]
 8012262:	609a      	str	r2, [r3, #8]
 8012264:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012266:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8012268:	69bb      	ldr	r3, [r7, #24]
 801226a:	f383 8810 	msr	PRIMASK, r3
}
 801226e:	e068      	b.n	8012342 <_tx_semaphore_get+0x10e>
        /* Restore interrupts.  */
        TX_RESTORE
    }

    /* Determine if the request specifies suspension.  */
    else if (wait_option != TX_NO_WAIT)
 8012270:	683b      	ldr	r3, [r7, #0]
 8012272:	2b00      	cmp	r3, #0
 8012274:	d05d      	beq.n	8012332 <_tx_semaphore_get+0xfe>
    {

        /* Determine if the preempt disable flag is non-zero.  */
        if (_tx_thread_preempt_disable != ((UINT) 0))
 8012276:	4b35      	ldr	r3, [pc, #212]	; (801234c <_tx_semaphore_get+0x118>)
 8012278:	681b      	ldr	r3, [r3, #0]
 801227a:	2b00      	cmp	r3, #0
 801227c:	d008      	beq.n	8012290 <_tx_semaphore_get+0x5c>
 801227e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012280:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8012282:	697b      	ldr	r3, [r7, #20]
 8012284:	f383 8810 	msr	PRIMASK, r3
}
 8012288:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
            status =  TX_NO_INSTANCE;
 801228a:	230d      	movs	r3, #13
 801228c:	637b      	str	r3, [r7, #52]	; 0x34
 801228e:	e058      	b.n	8012342 <_tx_semaphore_get+0x10e>
            /* Increment the number of suspensions on this semaphore.  */
            semaphore_ptr -> tx_semaphore_performance_suspension_count++;
#endif

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 8012290:	4b2f      	ldr	r3, [pc, #188]	; (8012350 <_tx_semaphore_get+0x11c>)
 8012292:	681b      	ldr	r3, [r3, #0]
 8012294:	62fb      	str	r3, [r7, #44]	; 0x2c

            /* Setup cleanup routine pointer.  */
            thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_semaphore_cleanup);
 8012296:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012298:	4a2e      	ldr	r2, [pc, #184]	; (8012354 <_tx_semaphore_get+0x120>)
 801229a:	669a      	str	r2, [r3, #104]	; 0x68

            /* Setup cleanup information, i.e. this semaphore control
               block.  */
            thread_ptr -> tx_thread_suspend_control_block =  (VOID *) semaphore_ptr;
 801229c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801229e:	687a      	ldr	r2, [r7, #4]
 80122a0:	66da      	str	r2, [r3, #108]	; 0x6c

#ifndef TX_NOT_INTERRUPTABLE

            /* Increment the suspension sequence number, which is used to identify
               this suspension event.  */
            thread_ptr -> tx_thread_suspension_sequence++;
 80122a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80122a4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80122a8:	1c5a      	adds	r2, r3, #1
 80122aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80122ac:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
#endif

            /* Setup suspension list.  */
            if (semaphore_ptr -> tx_semaphore_suspended_count == TX_NO_SUSPENSIONS)
 80122b0:	687b      	ldr	r3, [r7, #4]
 80122b2:	691b      	ldr	r3, [r3, #16]
 80122b4:	2b00      	cmp	r3, #0
 80122b6:	d109      	bne.n	80122cc <_tx_semaphore_get+0x98>
            {

                /* No other threads are suspended.  Setup the head pointer and
                   just setup this threads pointers to itself.  */
                semaphore_ptr -> tx_semaphore_suspension_list =         thread_ptr;
 80122b8:	687b      	ldr	r3, [r7, #4]
 80122ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80122bc:	60da      	str	r2, [r3, #12]
                thread_ptr -> tx_thread_suspended_next =                thread_ptr;
 80122be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80122c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80122c2:	671a      	str	r2, [r3, #112]	; 0x70
                thread_ptr -> tx_thread_suspended_previous =            thread_ptr;
 80122c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80122c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80122c8:	675a      	str	r2, [r3, #116]	; 0x74
 80122ca:	e011      	b.n	80122f0 <_tx_semaphore_get+0xbc>
            }
            else
            {

                /* This list is not NULL, add current thread to the end. */
                next_thread =                                   semaphore_ptr -> tx_semaphore_suspension_list;
 80122cc:	687b      	ldr	r3, [r7, #4]
 80122ce:	68db      	ldr	r3, [r3, #12]
 80122d0:	62bb      	str	r3, [r7, #40]	; 0x28
                thread_ptr -> tx_thread_suspended_next =        next_thread;
 80122d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80122d4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80122d6:	671a      	str	r2, [r3, #112]	; 0x70
                previous_thread =                               next_thread -> tx_thread_suspended_previous;
 80122d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80122da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80122dc:	627b      	str	r3, [r7, #36]	; 0x24
                thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 80122de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80122e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80122e2:	675a      	str	r2, [r3, #116]	; 0x74
                previous_thread -> tx_thread_suspended_next =   thread_ptr;
 80122e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80122e6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80122e8:	671a      	str	r2, [r3, #112]	; 0x70
                next_thread -> tx_thread_suspended_previous =   thread_ptr;
 80122ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80122ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80122ee:	675a      	str	r2, [r3, #116]	; 0x74
            }

            /* Increment the number of suspensions.  */
            semaphore_ptr -> tx_semaphore_suspended_count++;
 80122f0:	687b      	ldr	r3, [r7, #4]
 80122f2:	691b      	ldr	r3, [r3, #16]
 80122f4:	1c5a      	adds	r2, r3, #1
 80122f6:	687b      	ldr	r3, [r7, #4]
 80122f8:	611a      	str	r2, [r3, #16]

            /* Set the state to suspended.  */
            thread_ptr -> tx_thread_state =    TX_SEMAPHORE_SUSP;
 80122fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80122fc:	2206      	movs	r2, #6
 80122fe:	631a      	str	r2, [r3, #48]	; 0x30
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Set the suspending flag.  */
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8012300:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012302:	2201      	movs	r2, #1
 8012304:	639a      	str	r2, [r3, #56]	; 0x38

            /* Setup the timeout period.  */
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 8012306:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012308:	683a      	ldr	r2, [r7, #0]
 801230a:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 801230c:	4b0f      	ldr	r3, [pc, #60]	; (801234c <_tx_semaphore_get+0x118>)
 801230e:	681b      	ldr	r3, [r3, #0]
 8012310:	3301      	adds	r3, #1
 8012312:	4a0e      	ldr	r2, [pc, #56]	; (801234c <_tx_semaphore_get+0x118>)
 8012314:	6013      	str	r3, [r2, #0]
 8012316:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012318:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801231a:	693b      	ldr	r3, [r7, #16]
 801231c:	f383 8810 	msr	PRIMASK, r3
}
 8012320:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Call actual thread suspension routine.  */
            _tx_thread_system_suspend(thread_ptr);
 8012322:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012324:	f000 fcde 	bl	8012ce4 <_tx_thread_system_suspend>
#endif

            /* Return the completion status.  */
            status =  thread_ptr -> tx_thread_suspend_status;
 8012328:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801232a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801232e:	637b      	str	r3, [r7, #52]	; 0x34
 8012330:	e007      	b.n	8012342 <_tx_semaphore_get+0x10e>
 8012332:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012334:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8012336:	68fb      	ldr	r3, [r7, #12]
 8012338:	f383 8810 	msr	PRIMASK, r3
}
 801233c:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Immediate return, return error completion.  */
        status =  TX_NO_INSTANCE;
 801233e:	230d      	movs	r3, #13
 8012340:	637b      	str	r3, [r7, #52]	; 0x34
    }

    /* Return completion status.  */
    return(status);
 8012342:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8012344:	4618      	mov	r0, r3
 8012346:	3738      	adds	r7, #56	; 0x38
 8012348:	46bd      	mov	sp, r7
 801234a:	bd80      	pop	{r7, pc}
 801234c:	2001ca80 	.word	0x2001ca80
 8012350:	2001c9e8 	.word	0x2001c9e8
 8012354:	08012099 	.word	0x08012099

08012358 <_tx_semaphore_put>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_semaphore_put(TX_SEMAPHORE *semaphore_ptr)
{
 8012358:	b580      	push	{r7, lr}
 801235a:	b08c      	sub	sp, #48	; 0x30
 801235c:	af00      	add	r7, sp, #0
 801235e:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8012360:	f3ef 8310 	mrs	r3, PRIMASK
 8012364:	61bb      	str	r3, [r7, #24]
    return(posture);
 8012366:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8012368:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 801236a:	b672      	cpsid	i
    return(int_posture);
 801236c:	697b      	ldr	r3, [r7, #20]
TX_THREAD       *next_thread;
TX_THREAD       *previous_thread;


    /* Disable interrupts to put an instance back to the semaphore.  */
    TX_DISABLE
 801236e:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Log this kernel call.  */
    TX_EL_SEMAPHORE_PUT_INSERT

    /* Pickup the number of suspended threads.  */
    suspended_count =  semaphore_ptr -> tx_semaphore_suspended_count;
 8012370:	687b      	ldr	r3, [r7, #4]
 8012372:	691b      	ldr	r3, [r3, #16]
 8012374:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Determine if there are any threads suspended on the semaphore.  */
    if (suspended_count == TX_NO_SUSPENSIONS)
 8012376:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012378:	2b00      	cmp	r3, #0
 801237a:	d10a      	bne.n	8012392 <_tx_semaphore_put+0x3a>
    {

        /* Increment the semaphore count.  */
        semaphore_ptr -> tx_semaphore_count++;
 801237c:	687b      	ldr	r3, [r7, #4]
 801237e:	689b      	ldr	r3, [r3, #8]
 8012380:	1c5a      	adds	r2, r3, #1
 8012382:	687b      	ldr	r3, [r7, #4]
 8012384:	609a      	str	r2, [r3, #8]
 8012386:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012388:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801238a:	693b      	ldr	r3, [r7, #16]
 801238c:	f383 8810 	msr	PRIMASK, r3
}
 8012390:	e033      	b.n	80123fa <_tx_semaphore_put+0xa2>
    {

        /* A thread is suspended on this semaphore.  */

        /* Pickup the pointer to the first suspended thread.  */
        thread_ptr =  semaphore_ptr -> tx_semaphore_suspension_list;
 8012392:	687b      	ldr	r3, [r7, #4]
 8012394:	68db      	ldr	r3, [r3, #12]
 8012396:	627b      	str	r3, [r7, #36]	; 0x24

        /* Remove the suspended thread from the list.  */

        /* See if this is the only suspended thread on the list.  */
        suspended_count--;
 8012398:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801239a:	3b01      	subs	r3, #1
 801239c:	62bb      	str	r3, [r7, #40]	; 0x28
        if (suspended_count == TX_NO_SUSPENSIONS)
 801239e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80123a0:	2b00      	cmp	r3, #0
 80123a2:	d103      	bne.n	80123ac <_tx_semaphore_put+0x54>
        {

            /* Yes, the only suspended thread.  */

            /* Update the head pointer.  */
            semaphore_ptr -> tx_semaphore_suspension_list =  TX_NULL;
 80123a4:	687b      	ldr	r3, [r7, #4]
 80123a6:	2200      	movs	r2, #0
 80123a8:	60da      	str	r2, [r3, #12]
 80123aa:	e00e      	b.n	80123ca <_tx_semaphore_put+0x72>
        {

            /* At least one more thread is on the same expiration list.  */

            /* Update the list head pointer.  */
            next_thread =                                     thread_ptr -> tx_thread_suspended_next;
 80123ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80123ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80123b0:	623b      	str	r3, [r7, #32]
            semaphore_ptr -> tx_semaphore_suspension_list =   next_thread;
 80123b2:	687b      	ldr	r3, [r7, #4]
 80123b4:	6a3a      	ldr	r2, [r7, #32]
 80123b6:	60da      	str	r2, [r3, #12]

            /* Update the links of the adjacent threads.  */
            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 80123b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80123ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80123bc:	61fb      	str	r3, [r7, #28]
            next_thread -> tx_thread_suspended_previous =   previous_thread;
 80123be:	6a3b      	ldr	r3, [r7, #32]
 80123c0:	69fa      	ldr	r2, [r7, #28]
 80123c2:	675a      	str	r2, [r3, #116]	; 0x74
            previous_thread -> tx_thread_suspended_next =   next_thread;
 80123c4:	69fb      	ldr	r3, [r7, #28]
 80123c6:	6a3a      	ldr	r2, [r7, #32]
 80123c8:	671a      	str	r2, [r3, #112]	; 0x70
        }

        /* Decrement the suspension count.  */
        semaphore_ptr -> tx_semaphore_suspended_count =  suspended_count;
 80123ca:	687b      	ldr	r3, [r7, #4]
 80123cc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80123ce:	611a      	str	r2, [r3, #16]

        /* Prepare for resumption of the first thread.  */

        /* Clear cleanup routine to avoid timeout.  */
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 80123d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80123d2:	2200      	movs	r2, #0
 80123d4:	669a      	str	r2, [r3, #104]	; 0x68
        /* Pickup the application notify function.  */
        semaphore_put_notify =  semaphore_ptr -> tx_semaphore_put_notify;
#endif

        /* Put return status into the thread control block.  */
        thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 80123d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80123d8:	2200      	movs	r2, #0
 80123da:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Temporarily disable preemption.  */
        _tx_thread_preempt_disable++;
 80123de:	4b09      	ldr	r3, [pc, #36]	; (8012404 <_tx_semaphore_put+0xac>)
 80123e0:	681b      	ldr	r3, [r3, #0]
 80123e2:	3301      	adds	r3, #1
 80123e4:	4a07      	ldr	r2, [pc, #28]	; (8012404 <_tx_semaphore_put+0xac>)
 80123e6:	6013      	str	r3, [r2, #0]
 80123e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80123ea:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80123ec:	68fb      	ldr	r3, [r7, #12]
 80123ee:	f383 8810 	msr	PRIMASK, r3
}
 80123f2:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Resume thread.  */
        _tx_thread_system_resume(thread_ptr);
 80123f4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80123f6:	f000 fb75 	bl	8012ae4 <_tx_thread_system_resume>
        }
#endif
    }

    /* Return successful completion.  */
    return(TX_SUCCESS);
 80123fa:	2300      	movs	r3, #0
}
 80123fc:	4618      	mov	r0, r3
 80123fe:	3730      	adds	r7, #48	; 0x30
 8012400:	46bd      	mov	sp, r7
 8012402:	bd80      	pop	{r7, pc}
 8012404:	2001ca80 	.word	0x2001ca80

08012408 <_tx_thread_create>:
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_create(TX_THREAD *thread_ptr, CHAR *name_ptr, VOID (*entry_function)(ULONG id), ULONG entry_input,
                            VOID *stack_start, ULONG stack_size, UINT priority, UINT preempt_threshold,
                            ULONG time_slice, UINT auto_start)
{
 8012408:	b580      	push	{r7, lr}
 801240a:	b092      	sub	sp, #72	; 0x48
 801240c:	af00      	add	r7, sp, #0
 801240e:	60f8      	str	r0, [r7, #12]
 8012410:	60b9      	str	r1, [r7, #8]
 8012412:	607a      	str	r2, [r7, #4]
 8012414:	603b      	str	r3, [r7, #0]
TX_INTERRUPT_SAVE_AREA

TX_THREAD               *next_thread;
TX_THREAD               *previous_thread;
TX_THREAD               *saved_thread_ptr;
UINT                    saved_threshold =  ((UINT) 0);
 8012416:	2300      	movs	r3, #0
 8012418:	643b      	str	r3, [r7, #64]	; 0x40
#ifndef TX_DISABLE_STACK_FILLING

    /* Set the thread stack to a pattern prior to creating the initial
       stack frame.  This pattern is used by the stack checking routines
       to see how much has been used.  */
    TX_MEMSET(stack_start, ((UCHAR) TX_STACK_FILL), stack_size);
 801241a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801241c:	21ef      	movs	r1, #239	; 0xef
 801241e:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8012420:	f001 fcfc 	bl	8013e1c <memset>

    /* Prepare the thread control block prior to placing it on the created
       list.  */

    /* Initialize thread control block to all zeros.  */
    TX_MEMSET(thread_ptr, 0, (sizeof(TX_THREAD)));
 8012424:	22b0      	movs	r2, #176	; 0xb0
 8012426:	2100      	movs	r1, #0
 8012428:	68f8      	ldr	r0, [r7, #12]
 801242a:	f001 fcf7 	bl	8013e1c <memset>

    /* Place the supplied parameters into the thread's control block.  */
    thread_ptr -> tx_thread_name =              name_ptr;
 801242e:	68fb      	ldr	r3, [r7, #12]
 8012430:	68ba      	ldr	r2, [r7, #8]
 8012432:	629a      	str	r2, [r3, #40]	; 0x28
    thread_ptr -> tx_thread_entry =             entry_function;
 8012434:	68fb      	ldr	r3, [r7, #12]
 8012436:	687a      	ldr	r2, [r7, #4]
 8012438:	645a      	str	r2, [r3, #68]	; 0x44
    thread_ptr -> tx_thread_entry_parameter =   entry_input;
 801243a:	68fb      	ldr	r3, [r7, #12]
 801243c:	683a      	ldr	r2, [r7, #0]
 801243e:	649a      	str	r2, [r3, #72]	; 0x48
    thread_ptr -> tx_thread_stack_start =       stack_start;
 8012440:	68fb      	ldr	r3, [r7, #12]
 8012442:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8012444:	60da      	str	r2, [r3, #12]
    thread_ptr -> tx_thread_stack_size =        stack_size;
 8012446:	68fb      	ldr	r3, [r7, #12]
 8012448:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801244a:	615a      	str	r2, [r3, #20]
    thread_ptr -> tx_thread_priority =          priority;
 801244c:	68fb      	ldr	r3, [r7, #12]
 801244e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8012450:	62da      	str	r2, [r3, #44]	; 0x2c
    thread_ptr -> tx_thread_user_priority =     priority;
 8012452:	68fb      	ldr	r3, [r7, #12]
 8012454:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8012456:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    thread_ptr -> tx_thread_time_slice =        time_slice;
 801245a:	68fb      	ldr	r3, [r7, #12]
 801245c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801245e:	619a      	str	r2, [r3, #24]
    thread_ptr -> tx_thread_new_time_slice =    time_slice;
 8012460:	68fb      	ldr	r3, [r7, #12]
 8012462:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8012464:	61da      	str	r2, [r3, #28]
    thread_ptr -> tx_thread_inherit_priority =  ((UINT) TX_MAX_PRIORITIES);
 8012466:	68fb      	ldr	r3, [r7, #12]
 8012468:	2220      	movs	r2, #32
 801246a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Calculate the end of the thread's stack area.  */
    temp_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(stack_start);
 801246e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012470:	63fb      	str	r3, [r7, #60]	; 0x3c
    temp_ptr =  (TX_UCHAR_POINTER_ADD(temp_ptr, (stack_size - ((ULONG) 1))));
 8012472:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012474:	3b01      	subs	r3, #1
 8012476:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8012478:	4413      	add	r3, r2
 801247a:	63fb      	str	r3, [r7, #60]	; 0x3c
    thread_ptr -> tx_thread_stack_end =         TX_UCHAR_TO_VOID_POINTER_CONVERT(temp_ptr);
 801247c:	68fb      	ldr	r3, [r7, #12]
 801247e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8012480:	611a      	str	r2, [r3, #16]
    thread_ptr -> tx_thread_preempt_threshold =       preempt_threshold;
    thread_ptr -> tx_thread_user_preempt_threshold =  preempt_threshold;
#else

    /* Preemption-threshold is disabled, determine if preemption-threshold was required.  */
    if (priority != preempt_threshold)
 8012482:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8012484:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8012486:	429a      	cmp	r2, r3
 8012488:	d007      	beq.n	801249a <_tx_thread_create+0x92>
    {

        /* Preemption-threshold specified. Since specific preemption-threshold is not supported,
           disable all preemption.  */
        thread_ptr -> tx_thread_preempt_threshold =       ((UINT) 0);
 801248a:	68fb      	ldr	r3, [r7, #12]
 801248c:	2200      	movs	r2, #0
 801248e:	63da      	str	r2, [r3, #60]	; 0x3c
        thread_ptr -> tx_thread_user_preempt_threshold =  ((UINT) 0);
 8012490:	68fb      	ldr	r3, [r7, #12]
 8012492:	2200      	movs	r2, #0
 8012494:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 8012498:	e006      	b.n	80124a8 <_tx_thread_create+0xa0>
    }
    else
    {

        /* Preemption-threshold is not specified, just setup with the priority.  */
        thread_ptr -> tx_thread_preempt_threshold =       priority;
 801249a:	68fb      	ldr	r3, [r7, #12]
 801249c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801249e:	63da      	str	r2, [r3, #60]	; 0x3c
        thread_ptr -> tx_thread_user_preempt_threshold =  priority;
 80124a0:	68fb      	ldr	r3, [r7, #12]
 80124a2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80124a4:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    }
#endif

    /* Now fill in the values that are required for thread initialization.  */
    thread_ptr -> tx_thread_state =  TX_SUSPENDED;
 80124a8:	68fb      	ldr	r3, [r7, #12]
 80124aa:	2203      	movs	r2, #3
 80124ac:	631a      	str	r2, [r3, #48]	; 0x30

    /* Setup the necessary fields in the thread timer block.  */
    TX_THREAD_CREATE_TIMEOUT_SETUP(thread_ptr)
 80124ae:	68fb      	ldr	r3, [r7, #12]
 80124b0:	4a48      	ldr	r2, [pc, #288]	; (80125d4 <_tx_thread_create+0x1cc>)
 80124b2:	655a      	str	r2, [r3, #84]	; 0x54
 80124b4:	68fa      	ldr	r2, [r7, #12]
 80124b6:	68fb      	ldr	r3, [r7, #12]
 80124b8:	659a      	str	r2, [r3, #88]	; 0x58
    TX_THREAD_CREATE_INTERNAL_EXTENSION(thread_ptr)

    /* Call the target specific stack frame building routine to build the
       thread's initial stack and to setup the actual stack pointer in the
       control block.  */
    _tx_thread_stack_build(thread_ptr, _tx_thread_shell_entry);
 80124ba:	4947      	ldr	r1, [pc, #284]	; (80125d8 <_tx_thread_create+0x1d0>)
 80124bc:	68f8      	ldr	r0, [r7, #12]
 80124be:	f7ed ff7b 	bl	80003b8 <_tx_thread_stack_build>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80124c2:	f3ef 8310 	mrs	r3, PRIMASK
 80124c6:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 80124c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 80124ca:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 80124cc:	b672      	cpsid	i
    return(int_posture);
 80124ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
    /* Setup the highest usage stack pointer.  */
    thread_ptr -> tx_thread_stack_highest_ptr =  thread_ptr -> tx_thread_stack_ptr;
#endif

    /* Prepare to make this thread a member of the created thread list.  */
    TX_DISABLE
 80124d0:	63bb      	str	r3, [r7, #56]	; 0x38

    /* Load the thread ID field in the thread control block.  */
    thread_ptr -> tx_thread_id =  TX_THREAD_ID;
 80124d2:	68fb      	ldr	r3, [r7, #12]
 80124d4:	4a41      	ldr	r2, [pc, #260]	; (80125dc <_tx_thread_create+0x1d4>)
 80124d6:	601a      	str	r2, [r3, #0]

    /* Place the thread on the list of created threads.  First,
       check for an empty list.  */
    if (_tx_thread_created_count == TX_EMPTY)
 80124d8:	4b41      	ldr	r3, [pc, #260]	; (80125e0 <_tx_thread_create+0x1d8>)
 80124da:	681b      	ldr	r3, [r3, #0]
 80124dc:	2b00      	cmp	r3, #0
 80124de:	d10b      	bne.n	80124f8 <_tx_thread_create+0xf0>
    {

        /* The created thread list is empty.  Add thread to empty list.  */
        _tx_thread_created_ptr =                    thread_ptr;
 80124e0:	4a40      	ldr	r2, [pc, #256]	; (80125e4 <_tx_thread_create+0x1dc>)
 80124e2:	68fb      	ldr	r3, [r7, #12]
 80124e4:	6013      	str	r3, [r2, #0]
        thread_ptr -> tx_thread_created_next =      thread_ptr;
 80124e6:	68fb      	ldr	r3, [r7, #12]
 80124e8:	68fa      	ldr	r2, [r7, #12]
 80124ea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        thread_ptr -> tx_thread_created_previous =  thread_ptr;
 80124ee:	68fb      	ldr	r3, [r7, #12]
 80124f0:	68fa      	ldr	r2, [r7, #12]
 80124f2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 80124f6:	e016      	b.n	8012526 <_tx_thread_create+0x11e>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_thread =  _tx_thread_created_ptr;
 80124f8:	4b3a      	ldr	r3, [pc, #232]	; (80125e4 <_tx_thread_create+0x1dc>)
 80124fa:	681b      	ldr	r3, [r3, #0]
 80124fc:	637b      	str	r3, [r7, #52]	; 0x34
        previous_thread =  next_thread -> tx_thread_created_previous;
 80124fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012500:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8012504:	633b      	str	r3, [r7, #48]	; 0x30

        /* Place the new thread in the list.  */
        next_thread -> tx_thread_created_previous =  thread_ptr;
 8012506:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012508:	68fa      	ldr	r2, [r7, #12]
 801250a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        previous_thread -> tx_thread_created_next =  thread_ptr;
 801250e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012510:	68fa      	ldr	r2, [r7, #12]
 8012512:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Setup this thread's created links.  */
        thread_ptr -> tx_thread_created_previous =  previous_thread;
 8012516:	68fb      	ldr	r3, [r7, #12]
 8012518:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801251a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        thread_ptr -> tx_thread_created_next =      next_thread;
 801251e:	68fb      	ldr	r3, [r7, #12]
 8012520:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012522:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* Increment the thread created count.  */
    _tx_thread_created_count++;
 8012526:	4b2e      	ldr	r3, [pc, #184]	; (80125e0 <_tx_thread_create+0x1d8>)
 8012528:	681b      	ldr	r3, [r3, #0]
 801252a:	3301      	adds	r3, #1
 801252c:	4a2c      	ldr	r2, [pc, #176]	; (80125e0 <_tx_thread_create+0x1d8>)
 801252e:	6013      	str	r3, [r2, #0]
    TX_EL_THREAD_CREATE_INSERT

#ifndef TX_NOT_INTERRUPTABLE

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 8012530:	4b2d      	ldr	r3, [pc, #180]	; (80125e8 <_tx_thread_create+0x1e0>)
 8012532:	681b      	ldr	r3, [r3, #0]
 8012534:	3301      	adds	r3, #1
 8012536:	4a2c      	ldr	r2, [pc, #176]	; (80125e8 <_tx_thread_create+0x1e0>)
 8012538:	6013      	str	r3, [r2, #0]
#endif

    /* Determine if an automatic start was requested.  If so, call the resume
       thread function and then check for a preemption condition.  */
    if (auto_start == TX_AUTO_START)
 801253a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801253c:	2b01      	cmp	r3, #1
 801253e:	d129      	bne.n	8012594 <_tx_thread_create+0x18c>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8012540:	f3ef 8305 	mrs	r3, IPSR
 8012544:	627b      	str	r3, [r7, #36]	; 0x24
    return(ipsr_value);
 8012546:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    {

        /* Determine if the create call is being called from initialization.  */
        if (TX_THREAD_GET_SYSTEM_STATE() >= TX_INITIALIZE_IN_PROGRESS)
 8012548:	4b28      	ldr	r3, [pc, #160]	; (80125ec <_tx_thread_create+0x1e4>)
 801254a:	681b      	ldr	r3, [r3, #0]
 801254c:	4313      	orrs	r3, r2
 801254e:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 8012552:	d30d      	bcc.n	8012570 <_tx_thread_create+0x168>

            /* Pickup the current thread execute pointer, which corresponds to the
               highest priority thread ready to execute.  Interrupt lockout is
               not required, since interrupts are assumed to be disabled during
               initialization.  */
            saved_thread_ptr =  _tx_thread_execute_ptr;
 8012554:	4b26      	ldr	r3, [pc, #152]	; (80125f0 <_tx_thread_create+0x1e8>)
 8012556:	681b      	ldr	r3, [r3, #0]
 8012558:	647b      	str	r3, [r7, #68]	; 0x44

            /* Determine if there is thread ready for execution.  */
            if (saved_thread_ptr != TX_NULL)
 801255a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801255c:	2b00      	cmp	r3, #0
 801255e:	d009      	beq.n	8012574 <_tx_thread_create+0x16c>
            {

                /* Yes, a thread is ready for execution when initialization completes.  */

                /* Save the current preemption-threshold.  */
                saved_threshold =  saved_thread_ptr -> tx_thread_preempt_threshold;
 8012560:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012562:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012564:	643b      	str	r3, [r7, #64]	; 0x40

                /* For initialization, temporarily set the preemption-threshold to the
                   priority level to make sure the highest-priority thread runs once
                   initialization is complete.  */
                saved_thread_ptr -> tx_thread_preempt_threshold =  saved_thread_ptr -> tx_thread_priority;
 8012566:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012568:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801256a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801256c:	63da      	str	r2, [r3, #60]	; 0x3c
 801256e:	e001      	b.n	8012574 <_tx_thread_create+0x16c>
        }
        else
        {

            /* Simply set the saved thread pointer to NULL.  */
            saved_thread_ptr =  TX_NULL;
 8012570:	2300      	movs	r3, #0
 8012572:	647b      	str	r3, [r7, #68]	; 0x44
 8012574:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012576:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8012578:	6a3b      	ldr	r3, [r7, #32]
 801257a:	f383 8810 	msr	PRIMASK, r3
}
 801257e:	bf00      	nop

        /* Perform any additional activities for tool or user purpose.  */
        TX_THREAD_CREATE_EXTENSION(thread_ptr)

        /* Call the resume thread function to make this thread ready.  */
        _tx_thread_system_resume(thread_ptr);
 8012580:	68f8      	ldr	r0, [r7, #12]
 8012582:	f000 faaf 	bl	8012ae4 <_tx_thread_system_resume>
#endif

        /* Determine if the thread's preemption-threshold needs to be restored.  */
        if (saved_thread_ptr != TX_NULL)
 8012586:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012588:	2b00      	cmp	r3, #0
 801258a:	d01e      	beq.n	80125ca <_tx_thread_create+0x1c2>
        {

            /* Yes, restore the previous highest-priority thread's preemption-threshold. This
               can only happen if this routine is called from initialization.  */
            saved_thread_ptr -> tx_thread_preempt_threshold =  saved_threshold;
 801258c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801258e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8012590:	63da      	str	r2, [r3, #60]	; 0x3c
 8012592:	e01a      	b.n	80125ca <_tx_thread_create+0x1c2>
 8012594:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012596:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8012598:	693b      	ldr	r3, [r7, #16]
 801259a:	f383 8810 	msr	PRIMASK, r3
}
 801259e:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80125a0:	f3ef 8310 	mrs	r3, PRIMASK
 80125a4:	61bb      	str	r3, [r7, #24]
    return(posture);
 80125a6:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 80125a8:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 80125aa:	b672      	cpsid	i
    return(int_posture);
 80125ac:	697b      	ldr	r3, [r7, #20]

        /* Perform any additional activities for tool or user purpose.  */
        TX_THREAD_CREATE_EXTENSION(thread_ptr)

        /* Disable interrupts.  */
        TX_DISABLE
 80125ae:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Re-enable preemption.  */
        _tx_thread_preempt_disable--;
 80125b0:	4b0d      	ldr	r3, [pc, #52]	; (80125e8 <_tx_thread_create+0x1e0>)
 80125b2:	681b      	ldr	r3, [r3, #0]
 80125b4:	3b01      	subs	r3, #1
 80125b6:	4a0c      	ldr	r2, [pc, #48]	; (80125e8 <_tx_thread_create+0x1e0>)
 80125b8:	6013      	str	r3, [r2, #0]
 80125ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80125bc:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80125be:	69fb      	ldr	r3, [r7, #28]
 80125c0:	f383 8810 	msr	PRIMASK, r3
}
 80125c4:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 80125c6:	f000 fa53 	bl	8012a70 <_tx_thread_system_preempt_check>
#endif
    }

    /* Always return a success.  */
    return(TX_SUCCESS);
 80125ca:	2300      	movs	r3, #0
}
 80125cc:	4618      	mov	r0, r3
 80125ce:	3748      	adds	r7, #72	; 0x48
 80125d0:	46bd      	mov	sp, r7
 80125d2:	bd80      	pop	{r7, pc}
 80125d4:	08012fb9 	.word	0x08012fb9
 80125d8:	080127f9 	.word	0x080127f9
 80125dc:	54485244 	.word	0x54485244
 80125e0:	2001c9f4 	.word	0x2001c9f4
 80125e4:	2001c9f0 	.word	0x2001c9f0
 80125e8:	2001ca80 	.word	0x2001ca80
 80125ec:	2000000c 	.word	0x2000000c
 80125f0:	2001c9ec 	.word	0x2001c9ec

080125f4 <_tx_thread_initialize>:
/*                                            stack check error handling, */
/*                                            resulting in version 6.1.9  */   
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_initialize(VOID)
{
 80125f4:	b580      	push	{r7, lr}
 80125f6:	af00      	add	r7, sp, #0
       respectively.  */

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Set current thread pointer to NULL.  */
    TX_THREAD_SET_CURRENT(TX_NULL)
 80125f8:	4b12      	ldr	r3, [pc, #72]	; (8012644 <_tx_thread_initialize+0x50>)
 80125fa:	2200      	movs	r2, #0
 80125fc:	601a      	str	r2, [r3, #0]

    /* Initialize the execute thread pointer to NULL.  */
    _tx_thread_execute_ptr =  TX_NULL;
 80125fe:	4b12      	ldr	r3, [pc, #72]	; (8012648 <_tx_thread_initialize+0x54>)
 8012600:	2200      	movs	r2, #0
 8012602:	601a      	str	r2, [r3, #0]
 8012604:	4b11      	ldr	r3, [pc, #68]	; (801264c <_tx_thread_initialize+0x58>)
 8012606:	2200      	movs	r2, #0
 8012608:	601a      	str	r2, [r3, #0]
#endif
#endif

    /* Setup the highest priority variable to the max, indicating no thread is currently
       ready.  */
    _tx_thread_highest_priority =  ((UINT) TX_MAX_PRIORITIES);
 801260a:	4b11      	ldr	r3, [pc, #68]	; (8012650 <_tx_thread_initialize+0x5c>)
 801260c:	2220      	movs	r2, #32
 801260e:	601a      	str	r2, [r3, #0]


#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the array of priority head pointers.  */
    TX_MEMSET(&_tx_thread_priority_list[0], 0, (sizeof(_tx_thread_priority_list)));
 8012610:	2280      	movs	r2, #128	; 0x80
 8012612:	2100      	movs	r1, #0
 8012614:	480f      	ldr	r0, [pc, #60]	; (8012654 <_tx_thread_initialize+0x60>)
 8012616:	f001 fc01 	bl	8013e1c <memset>

    /* Initialize the head pointer of the created threads list and the
       number of threads created.  */
    _tx_thread_created_ptr =        TX_NULL;
 801261a:	4b0f      	ldr	r3, [pc, #60]	; (8012658 <_tx_thread_initialize+0x64>)
 801261c:	2200      	movs	r2, #0
 801261e:	601a      	str	r2, [r3, #0]
    _tx_thread_created_count =      TX_EMPTY;
 8012620:	4b0e      	ldr	r3, [pc, #56]	; (801265c <_tx_thread_initialize+0x68>)
 8012622:	2200      	movs	r2, #0
 8012624:	601a      	str	r2, [r3, #0]

    /* Clear the global preempt disable variable.  */
    _tx_thread_preempt_disable =    ((UINT) 0);
 8012626:	4b0e      	ldr	r3, [pc, #56]	; (8012660 <_tx_thread_initialize+0x6c>)
 8012628:	2200      	movs	r2, #0
 801262a:	601a      	str	r2, [r3, #0]

    /* Initialize the thread mutex release function pointer.  */
    _tx_thread_mutex_release =      TX_NULL;
 801262c:	4b0d      	ldr	r3, [pc, #52]	; (8012664 <_tx_thread_initialize+0x70>)
 801262e:	2200      	movs	r2, #0
 8012630:	601a      	str	r2, [r3, #0]
#endif
#ifdef TX_DISABLE_REDUNDANT_CLEARING
                            | (((ULONG) 1) << 18)
#endif
#ifdef TX_DISABLE_NOTIFY_CALLBACKS
                            | (((ULONG) 1) << 17)
 8012632:	4b0d      	ldr	r3, [pc, #52]	; (8012668 <_tx_thread_initialize+0x74>)
 8012634:	681b      	ldr	r3, [r3, #0]
 8012636:	f043 7385 	orr.w	r3, r3, #17432576	; 0x10a0000
    _tx_build_options =  _tx_build_options 
 801263a:	4a0b      	ldr	r2, [pc, #44]	; (8012668 <_tx_thread_initialize+0x74>)
 801263c:	6013      	str	r3, [r2, #0]
#endif
#if TX_PORT_SPECIFIC_BUILD_OPTIONS != 0
                            | TX_PORT_SPECIFIC_BUILD_OPTIONS
#endif
                            ;
}
 801263e:	bf00      	nop
 8012640:	bd80      	pop	{r7, pc}
 8012642:	bf00      	nop
 8012644:	2001c9e8 	.word	0x2001c9e8
 8012648:	2001c9ec 	.word	0x2001c9ec
 801264c:	2001c9f8 	.word	0x2001c9f8
 8012650:	2001c9fc 	.word	0x2001c9fc
 8012654:	2001ca00 	.word	0x2001ca00
 8012658:	2001c9f0 	.word	0x2001c9f0
 801265c:	2001c9f4 	.word	0x2001c9f4
 8012660:	2001ca80 	.word	0x2001ca80
 8012664:	2001ca84 	.word	0x2001ca84
 8012668:	2001ca88 	.word	0x2001ca88

0801266c <_tx_thread_relinquish>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_relinquish(VOID)
{
 801266c:	b480      	push	{r7}
 801266e:	b08b      	sub	sp, #44	; 0x2c
 8012670:	af00      	add	r7, sp, #0
UINT            priority;
TX_THREAD       *thread_ptr;


    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 8012672:	4b2b      	ldr	r3, [pc, #172]	; (8012720 <_tx_thread_relinquish+0xb4>)
 8012674:	681b      	ldr	r3, [r3, #0]
 8012676:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8012678:	f3ef 8310 	mrs	r3, PRIMASK
 801267c:	61bb      	str	r3, [r7, #24]
    return(posture);
 801267e:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8012680:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8012682:	b672      	cpsid	i
    return(int_posture);
 8012684:	697b      	ldr	r3, [r7, #20]
    /* Check this thread's stack.  */
    TX_THREAD_STACK_CHECK(thread_ptr)
#endif

    /* Disable interrupts.  */
    TX_DISABLE
 8012686:	623b      	str	r3, [r7, #32]

#ifndef TX_NO_TIMER

    /* Reset time slice for current thread.  */
    _tx_timer_time_slice =  thread_ptr -> tx_thread_new_time_slice;
 8012688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801268a:	69db      	ldr	r3, [r3, #28]
 801268c:	4a25      	ldr	r2, [pc, #148]	; (8012724 <_tx_thread_relinquish+0xb8>)
 801268e:	6013      	str	r3, [r2, #0]
#endif

    /* Pickup the thread's priority.  */
    priority =  thread_ptr -> tx_thread_priority;
 8012690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012692:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012694:	61fb      	str	r3, [r7, #28]

    /* Determine if there is another thread at the same priority.  */
    if (thread_ptr -> tx_thread_ready_next != thread_ptr)
 8012696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012698:	6a1b      	ldr	r3, [r3, #32]
 801269a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801269c:	429a      	cmp	r2, r3
 801269e:	d009      	beq.n	80126b4 <_tx_thread_relinquish+0x48>
    {

        /* Yes, there is another thread at this priority, make it the highest at
           this priority level.  */
        _tx_thread_priority_list[priority] =  thread_ptr -> tx_thread_ready_next;
 80126a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80126a2:	6a1a      	ldr	r2, [r3, #32]
 80126a4:	4920      	ldr	r1, [pc, #128]	; (8012728 <_tx_thread_relinquish+0xbc>)
 80126a6:	69fb      	ldr	r3, [r7, #28]
 80126a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Mark the new thread as the one to execute.  */
        _tx_thread_execute_ptr = thread_ptr -> tx_thread_ready_next;
 80126ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80126ae:	6a1b      	ldr	r3, [r3, #32]
 80126b0:	4a1e      	ldr	r2, [pc, #120]	; (801272c <_tx_thread_relinquish+0xc0>)
 80126b2:	6013      	str	r3, [r2, #0]
    }

    /* Determine if there is a higher-priority thread ready.  */
    if (_tx_thread_highest_priority < priority)
 80126b4:	4b1e      	ldr	r3, [pc, #120]	; (8012730 <_tx_thread_relinquish+0xc4>)
 80126b6:	681b      	ldr	r3, [r3, #0]
 80126b8:	69fa      	ldr	r2, [r7, #28]
 80126ba:	429a      	cmp	r2, r3
 80126bc:	d906      	bls.n	80126cc <_tx_thread_relinquish+0x60>
    {

        /* Yes, there is a higher priority thread ready to execute.  Make
           it visible to the thread scheduler.  */
        _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 80126be:	4b1c      	ldr	r3, [pc, #112]	; (8012730 <_tx_thread_relinquish+0xc4>)
 80126c0:	681b      	ldr	r3, [r3, #0]
 80126c2:	4a19      	ldr	r2, [pc, #100]	; (8012728 <_tx_thread_relinquish+0xbc>)
 80126c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80126c8:	4a18      	ldr	r2, [pc, #96]	; (801272c <_tx_thread_relinquish+0xc0>)
 80126ca:	6013      	str	r3, [r2, #0]
 80126cc:	6a3b      	ldr	r3, [r7, #32]
 80126ce:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80126d0:	693b      	ldr	r3, [r7, #16]
 80126d2:	f383 8810 	msr	PRIMASK, r3
}
 80126d6:	bf00      	nop

    /* Restore previous interrupt posture.  */
    TX_RESTORE

    /* Determine if this thread needs to return to the system.  */
    if (_tx_thread_execute_ptr != thread_ptr)
 80126d8:	4b14      	ldr	r3, [pc, #80]	; (801272c <_tx_thread_relinquish+0xc0>)
 80126da:	681b      	ldr	r3, [r3, #0]
 80126dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80126de:	429a      	cmp	r2, r3
 80126e0:	d017      	beq.n	8012712 <_tx_thread_relinquish+0xa6>
__attribute__( ( always_inline ) ) static inline void _tx_thread_system_return_inline(void)
{
UINT interrupt_save;

    /* Set PendSV to invoke ThreadX scheduler.  */
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 80126e2:	4b14      	ldr	r3, [pc, #80]	; (8012734 <_tx_thread_relinquish+0xc8>)
 80126e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80126e8:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80126ea:	f3ef 8305 	mrs	r3, IPSR
 80126ee:	60fb      	str	r3, [r7, #12]
    return(ipsr_value);
 80126f0:	68fb      	ldr	r3, [r7, #12]
    if (_tx_ipsr_get() == 0)
 80126f2:	2b00      	cmp	r3, #0
 80126f4:	d10c      	bne.n	8012710 <_tx_thread_relinquish+0xa4>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80126f6:	f3ef 8310 	mrs	r3, PRIMASK
 80126fa:	60bb      	str	r3, [r7, #8]
    return(posture);
 80126fc:	68bb      	ldr	r3, [r7, #8]
    {
        interrupt_save = __get_interrupt_posture();
 80126fe:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("CPSIE  i": : : "memory");
 8012700:	b662      	cpsie	i
}
 8012702:	bf00      	nop
 8012704:	687b      	ldr	r3, [r7, #4]
 8012706:	603b      	str	r3, [r7, #0]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8012708:	683b      	ldr	r3, [r7, #0]
 801270a:	f383 8810 	msr	PRIMASK, r3
}
 801270e:	bf00      	nop
#else
        __enable_interrupts();
#endif
        __restore_interrupt(interrupt_save);
    }
}
 8012710:	bf00      	nop

        /* Transfer control to the system so the scheduler can execute
           the next thread.  */
        _tx_thread_system_return();
    }
}
 8012712:	bf00      	nop
 8012714:	372c      	adds	r7, #44	; 0x2c
 8012716:	46bd      	mov	sp, r7
 8012718:	f85d 7b04 	ldr.w	r7, [sp], #4
 801271c:	4770      	bx	lr
 801271e:	bf00      	nop
 8012720:	2001c9e8 	.word	0x2001c9e8
 8012724:	2001cfec 	.word	0x2001cfec
 8012728:	2001ca00 	.word	0x2001ca00
 801272c:	2001c9ec 	.word	0x2001c9ec
 8012730:	2001c9fc 	.word	0x2001c9fc
 8012734:	e000ed04 	.word	0xe000ed04

08012738 <_tx_thread_resume>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_resume(TX_THREAD *thread_ptr)
{
 8012738:	b580      	push	{r7, lr}
 801273a:	b08c      	sub	sp, #48	; 0x30
 801273c:	af00      	add	r7, sp, #0
 801273e:	6078      	str	r0, [r7, #4]

TX_INTERRUPT_SAVE_AREA

UINT        status;
TX_THREAD   *saved_thread_ptr;
UINT        saved_threshold =  ((UINT) 0);
 8012740:	2300      	movs	r3, #0
 8012742:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8012744:	f3ef 8310 	mrs	r3, PRIMASK
 8012748:	61fb      	str	r3, [r7, #28]
    return(posture);
 801274a:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 801274c:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 801274e:	b672      	cpsid	i
    return(int_posture);
 8012750:	69bb      	ldr	r3, [r7, #24]
    TX_THREAD_STACK_CHECK(thread_ptr)
#endif
#endif

    /* Lockout interrupts while the thread is being resumed.  */
    TX_DISABLE
 8012752:	623b      	str	r3, [r7, #32]
    /* Log this kernel call.  */
    TX_EL_THREAD_RESUME_INSERT

    /* Determine if the thread is suspended or in the process of suspending.
       If so, call the thread resume processing.  */
    if (thread_ptr -> tx_thread_state == TX_SUSPENDED)
 8012754:	687b      	ldr	r3, [r7, #4]
 8012756:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012758:	2b03      	cmp	r3, #3
 801275a:	d12f      	bne.n	80127bc <_tx_thread_resume+0x84>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 801275c:	f3ef 8305 	mrs	r3, IPSR
 8012760:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 8012762:	697a      	ldr	r2, [r7, #20]
    {

        /* Determine if the create call is being called from initialization.  */
        if (TX_THREAD_GET_SYSTEM_STATE() >= TX_INITIALIZE_IN_PROGRESS)
 8012764:	4b21      	ldr	r3, [pc, #132]	; (80127ec <_tx_thread_resume+0xb4>)
 8012766:	681b      	ldr	r3, [r3, #0]
 8012768:	4313      	orrs	r3, r2
 801276a:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 801276e:	d30d      	bcc.n	801278c <_tx_thread_resume+0x54>

            /* Pickup the current thread execute pointer, which corresponds to the
               highest priority thread ready to execute.  Interrupt lockout is
               not required, since interrupts are assumed to be disabled during
               initialization.  */
            saved_thread_ptr =  _tx_thread_execute_ptr;
 8012770:	4b1f      	ldr	r3, [pc, #124]	; (80127f0 <_tx_thread_resume+0xb8>)
 8012772:	681b      	ldr	r3, [r3, #0]
 8012774:	62bb      	str	r3, [r7, #40]	; 0x28

            /* Determine if there is thread ready for execution.  */
            if (saved_thread_ptr != TX_NULL)
 8012776:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012778:	2b00      	cmp	r3, #0
 801277a:	d009      	beq.n	8012790 <_tx_thread_resume+0x58>
            {

                /* Yes, a thread is ready for execution when initialization completes.  */

                /* Save the current preemption-threshold.  */
                saved_threshold =  saved_thread_ptr -> tx_thread_preempt_threshold;
 801277c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801277e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012780:	627b      	str	r3, [r7, #36]	; 0x24

                /* For initialization, temporarily set the preemption-threshold to the
                   priority level to make sure the highest-priority thread runs once
                   initialization is complete.  */
                saved_thread_ptr -> tx_thread_preempt_threshold =  saved_thread_ptr -> tx_thread_priority;
 8012782:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012784:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012786:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012788:	63da      	str	r2, [r3, #60]	; 0x3c
 801278a:	e001      	b.n	8012790 <_tx_thread_resume+0x58>
        }
        else
        {

            /* Simply set the saved thread pointer to NULL.  */
            saved_thread_ptr =  TX_NULL;
 801278c:	2300      	movs	r3, #0
 801278e:	62bb      	str	r3, [r7, #40]	; 0x28
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Temporarily disable preemption.  */
        _tx_thread_preempt_disable++;
 8012790:	4b18      	ldr	r3, [pc, #96]	; (80127f4 <_tx_thread_resume+0xbc>)
 8012792:	681b      	ldr	r3, [r3, #0]
 8012794:	3301      	adds	r3, #1
 8012796:	4a17      	ldr	r2, [pc, #92]	; (80127f4 <_tx_thread_resume+0xbc>)
 8012798:	6013      	str	r3, [r2, #0]
 801279a:	6a3b      	ldr	r3, [r7, #32]
 801279c:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801279e:	693b      	ldr	r3, [r7, #16]
 80127a0:	f383 8810 	msr	PRIMASK, r3
}
 80127a4:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Call the actual resume service to resume the thread.  */
        _tx_thread_system_resume(thread_ptr);
 80127a6:	6878      	ldr	r0, [r7, #4]
 80127a8:	f000 f99c 	bl	8012ae4 <_tx_thread_system_resume>
#endif

        /* Determine if the thread's preemption-threshold needs to be restored.  */
        if (saved_thread_ptr != TX_NULL)
 80127ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80127ae:	2b00      	cmp	r3, #0
 80127b0:	d002      	beq.n	80127b8 <_tx_thread_resume+0x80>
        {

            /* Yes, restore the previous highest-priority thread's preemption-threshold. This
               can only happen if this routine is called from initialization.  */
            saved_thread_ptr -> tx_thread_preempt_threshold =  saved_threshold;
 80127b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80127b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80127b6:	63da      	str	r2, [r3, #60]	; 0x3c
        /* Setup successful return status.  */
        status =  TX_SUCCESS;
#else

        /* Return successful completion.  */
        return(TX_SUCCESS);
 80127b8:	2300      	movs	r3, #0
 80127ba:	e012      	b.n	80127e2 <_tx_thread_resume+0xaa>

        /* Setup successful return status.  */
        status =  TX_SUCCESS;
#endif
    }
    else if (thread_ptr -> tx_thread_delayed_suspend == TX_TRUE)
 80127bc:	687b      	ldr	r3, [r7, #4]
 80127be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80127c0:	2b01      	cmp	r3, #1
 80127c2:	d105      	bne.n	80127d0 <_tx_thread_resume+0x98>
    {

        /* Clear the delayed suspension.  */
        thread_ptr -> tx_thread_delayed_suspend =  TX_FALSE;
 80127c4:	687b      	ldr	r3, [r7, #4]
 80127c6:	2200      	movs	r2, #0
 80127c8:	635a      	str	r2, [r3, #52]	; 0x34

        /* Setup delayed suspend lifted return status.  */
        status =  TX_SUSPEND_LIFTED;
 80127ca:	2319      	movs	r3, #25
 80127cc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80127ce:	e001      	b.n	80127d4 <_tx_thread_resume+0x9c>
    }
    else
    {

        /* Setup invalid resume return status.  */
        status =  TX_RESUME_ERROR;
 80127d0:	2312      	movs	r3, #18
 80127d2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80127d4:	6a3b      	ldr	r3, [r7, #32]
 80127d6:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80127d8:	68fb      	ldr	r3, [r7, #12]
 80127da:	f383 8810 	msr	PRIMASK, r3
}
 80127de:	bf00      	nop
        }
    }
#endif

    /* Return completion status. */
    return(status);
 80127e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80127e2:	4618      	mov	r0, r3
 80127e4:	3730      	adds	r7, #48	; 0x30
 80127e6:	46bd      	mov	sp, r7
 80127e8:	bd80      	pop	{r7, pc}
 80127ea:	bf00      	nop
 80127ec:	2000000c 	.word	0x2000000c
 80127f0:	2001c9ec 	.word	0x2001c9ec
 80127f4:	2001ca80 	.word	0x2001ca80

080127f8 <_tx_thread_shell_entry>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_shell_entry(VOID)
{
 80127f8:	b580      	push	{r7, lr}
 80127fa:	b088      	sub	sp, #32
 80127fc:	af00      	add	r7, sp, #0
VOID            (*entry_exit_notify)(TX_THREAD *notify_thread_ptr, UINT type);
#endif


    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 80127fe:	4b21      	ldr	r3, [pc, #132]	; (8012884 <_tx_thread_shell_entry+0x8c>)
 8012800:	681b      	ldr	r3, [r3, #0]
 8012802:	61fb      	str	r3, [r7, #28]
        (entry_exit_notify)(thread_ptr, TX_THREAD_ENTRY);
    }
#endif

    /* Call current thread's entry function.  */
    (thread_ptr -> tx_thread_entry) (thread_ptr -> tx_thread_entry_parameter);
 8012804:	69fb      	ldr	r3, [r7, #28]
 8012806:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012808:	69fa      	ldr	r2, [r7, #28]
 801280a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 801280c:	4610      	mov	r0, r2
 801280e:	4798      	blx	r3

    /* Suspend thread with a "completed" state.  */

    /* Determine if the application is using mutexes.  */
    if (_tx_thread_mutex_release != TX_NULL)
 8012810:	4b1d      	ldr	r3, [pc, #116]	; (8012888 <_tx_thread_shell_entry+0x90>)
 8012812:	681b      	ldr	r3, [r3, #0]
 8012814:	2b00      	cmp	r3, #0
 8012816:	d003      	beq.n	8012820 <_tx_thread_shell_entry+0x28>
    {

        /* Yes, call the mutex release function via a function pointer that
           is setup during mutex initialization.  */
        (_tx_thread_mutex_release)(thread_ptr);
 8012818:	4b1b      	ldr	r3, [pc, #108]	; (8012888 <_tx_thread_shell_entry+0x90>)
 801281a:	681b      	ldr	r3, [r3, #0]
 801281c:	69f8      	ldr	r0, [r7, #28]
 801281e:	4798      	blx	r3
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8012820:	f3ef 8310 	mrs	r3, PRIMASK
 8012824:	607b      	str	r3, [r7, #4]
    return(posture);
 8012826:	687b      	ldr	r3, [r7, #4]
    int_posture = __get_interrupt_posture();
 8012828:	603b      	str	r3, [r7, #0]
    __asm__ volatile ("CPSID i" : : : "memory");
 801282a:	b672      	cpsid	i
    return(int_posture);
 801282c:	683b      	ldr	r3, [r7, #0]
    }

    /* Lockout interrupts while the thread state is setup.  */
    TX_DISABLE
 801282e:	61bb      	str	r3, [r7, #24]
    entry_exit_notify =  thread_ptr -> tx_thread_entry_exit_notify;
#endif

    /* Set the status to suspending, in order to indicate the suspension
       is in progress.  */
    thread_ptr -> tx_thread_state =  TX_COMPLETED;
 8012830:	69fb      	ldr	r3, [r7, #28]
 8012832:	2201      	movs	r2, #1
 8012834:	631a      	str	r2, [r3, #48]	; 0x30
    /* Restore interrupts.  */
    TX_RESTORE
#else

    /* Set the suspending flag. */
    thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8012836:	69fb      	ldr	r3, [r7, #28]
 8012838:	2201      	movs	r2, #1
 801283a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Setup for no timeout period.  */
    thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 801283c:	69fb      	ldr	r3, [r7, #28]
 801283e:	2200      	movs	r2, #0
 8012840:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 8012842:	4b12      	ldr	r3, [pc, #72]	; (801288c <_tx_thread_shell_entry+0x94>)
 8012844:	681b      	ldr	r3, [r3, #0]
 8012846:	3301      	adds	r3, #1
 8012848:	4a10      	ldr	r2, [pc, #64]	; (801288c <_tx_thread_shell_entry+0x94>)
 801284a:	6013      	str	r3, [r2, #0]
 801284c:	69bb      	ldr	r3, [r7, #24]
 801284e:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8012850:	68bb      	ldr	r3, [r7, #8]
 8012852:	f383 8810 	msr	PRIMASK, r3
}
 8012856:	bf00      	nop
    __asm__ volatile (" MRS  %0,CONTROL ": "=r" (control_value) );
 8012858:	f3ef 8314 	mrs	r3, CONTROL
 801285c:	60fb      	str	r3, [r7, #12]
    return(control_value);
 801285e:	68fb      	ldr	r3, [r7, #12]

    /* Restore interrupts.  */
    TX_RESTORE

    /* Perform any additional activities for tool or user purpose.  */
    TX_THREAD_COMPLETED_EXTENSION(thread_ptr)
 8012860:	617b      	str	r3, [r7, #20]
 8012862:	697b      	ldr	r3, [r7, #20]
 8012864:	f023 0304 	bic.w	r3, r3, #4
 8012868:	617b      	str	r3, [r7, #20]
 801286a:	697b      	ldr	r3, [r7, #20]
 801286c:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" MSR  CONTROL,%0": : "r" (control_value): "memory" );
 801286e:	693b      	ldr	r3, [r7, #16]
 8012870:	f383 8814 	msr	CONTROL, r3
}
 8012874:	bf00      	nop
        (entry_exit_notify)(thread_ptr, TX_THREAD_EXIT);
    }
#endif

    /* Call actual thread suspension routine.  */
    _tx_thread_system_suspend(thread_ptr);
 8012876:	69f8      	ldr	r0, [r7, #28]
 8012878:	f000 fa34 	bl	8012ce4 <_tx_thread_system_suspend>
#ifdef TX_SAFETY_CRITICAL

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif
}
 801287c:	bf00      	nop
 801287e:	3720      	adds	r7, #32
 8012880:	46bd      	mov	sp, r7
 8012882:	bd80      	pop	{r7, pc}
 8012884:	2001c9e8 	.word	0x2001c9e8
 8012888:	2001ca84 	.word	0x2001ca84
 801288c:	2001ca80 	.word	0x2001ca80

08012890 <_tx_thread_sleep>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_sleep(ULONG timer_ticks)
{
 8012890:	b580      	push	{r7, lr}
 8012892:	b08e      	sub	sp, #56	; 0x38
 8012894:	af00      	add	r7, sp, #0
 8012896:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8012898:	f3ef 8310 	mrs	r3, PRIMASK
 801289c:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 801289e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    int_posture = __get_interrupt_posture();
 80128a0:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 80128a2:	b672      	cpsid	i
    return(int_posture);
 80128a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
UINT            status;
TX_THREAD       *thread_ptr;


    /* Lockout interrupts while the thread is being resumed.  */
    TX_DISABLE
 80128a6:	633b      	str	r3, [r7, #48]	; 0x30

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 80128a8:	4b35      	ldr	r3, [pc, #212]	; (8012980 <_tx_thread_sleep+0xf0>)
 80128aa:	681b      	ldr	r3, [r3, #0]
 80128ac:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Determine if this is a legal request.  */

    /* Is there a current thread?  */
    if (thread_ptr == TX_NULL)
 80128ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80128b0:	2b00      	cmp	r3, #0
 80128b2:	d108      	bne.n	80128c6 <_tx_thread_sleep+0x36>
 80128b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80128b6:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80128b8:	6a3b      	ldr	r3, [r7, #32]
 80128ba:	f383 8810 	msr	PRIMASK, r3
}
 80128be:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Illegal caller of this service.  */
        status =  TX_CALLER_ERROR;
 80128c0:	2313      	movs	r3, #19
 80128c2:	637b      	str	r3, [r7, #52]	; 0x34
 80128c4:	e056      	b.n	8012974 <_tx_thread_sleep+0xe4>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80128c6:	f3ef 8305 	mrs	r3, IPSR
 80128ca:	61fb      	str	r3, [r7, #28]
    return(ipsr_value);
 80128cc:	69fa      	ldr	r2, [r7, #28]
    }

    /* Is the caller an ISR or Initialization?  */
    else if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 80128ce:	4b2d      	ldr	r3, [pc, #180]	; (8012984 <_tx_thread_sleep+0xf4>)
 80128d0:	681b      	ldr	r3, [r3, #0]
 80128d2:	4313      	orrs	r3, r2
 80128d4:	2b00      	cmp	r3, #0
 80128d6:	d008      	beq.n	80128ea <_tx_thread_sleep+0x5a>
 80128d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80128da:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80128dc:	69bb      	ldr	r3, [r7, #24]
 80128de:	f383 8810 	msr	PRIMASK, r3
}
 80128e2:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Illegal caller of this service.  */
        status =  TX_CALLER_ERROR;
 80128e4:	2313      	movs	r3, #19
 80128e6:	637b      	str	r3, [r7, #52]	; 0x34
 80128e8:	e044      	b.n	8012974 <_tx_thread_sleep+0xe4>
    }

#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Is the caller the system timer thread?  */
    else if (thread_ptr == &_tx_timer_thread)
 80128ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80128ec:	4a26      	ldr	r2, [pc, #152]	; (8012988 <_tx_thread_sleep+0xf8>)
 80128ee:	4293      	cmp	r3, r2
 80128f0:	d108      	bne.n	8012904 <_tx_thread_sleep+0x74>
 80128f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80128f4:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80128f6:	697b      	ldr	r3, [r7, #20]
 80128f8:	f383 8810 	msr	PRIMASK, r3
}
 80128fc:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Illegal caller of this service.  */
        status =  TX_CALLER_ERROR;
 80128fe:	2313      	movs	r3, #19
 8012900:	637b      	str	r3, [r7, #52]	; 0x34
 8012902:	e037      	b.n	8012974 <_tx_thread_sleep+0xe4>
    }
#endif

    /* Determine if the requested number of ticks is zero.  */
    else if (timer_ticks == ((ULONG) 0))
 8012904:	687b      	ldr	r3, [r7, #4]
 8012906:	2b00      	cmp	r3, #0
 8012908:	d108      	bne.n	801291c <_tx_thread_sleep+0x8c>
 801290a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801290c:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801290e:	693b      	ldr	r3, [r7, #16]
 8012910:	f383 8810 	msr	PRIMASK, r3
}
 8012914:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Just return with a successful status.  */
        status =  TX_SUCCESS;
 8012916:	2300      	movs	r3, #0
 8012918:	637b      	str	r3, [r7, #52]	; 0x34
 801291a:	e02b      	b.n	8012974 <_tx_thread_sleep+0xe4>
    }
    else
    {

        /* Determine if the preempt disable flag is non-zero.  */
        if (_tx_thread_preempt_disable != ((UINT) 0))
 801291c:	4b1b      	ldr	r3, [pc, #108]	; (801298c <_tx_thread_sleep+0xfc>)
 801291e:	681b      	ldr	r3, [r3, #0]
 8012920:	2b00      	cmp	r3, #0
 8012922:	d008      	beq.n	8012936 <_tx_thread_sleep+0xa6>
 8012924:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012926:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8012928:	68fb      	ldr	r3, [r7, #12]
 801292a:	f383 8810 	msr	PRIMASK, r3
}
 801292e:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
            status =  TX_CALLER_ERROR;
 8012930:	2313      	movs	r3, #19
 8012932:	637b      	str	r3, [r7, #52]	; 0x34
 8012934:	e01e      	b.n	8012974 <_tx_thread_sleep+0xe4>
            TX_EL_THREAD_SLEEP_INSERT

            /* Suspend the current thread.  */

            /* Set the state to suspended.  */
            thread_ptr -> tx_thread_state =    TX_SLEEP;
 8012936:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012938:	2204      	movs	r2, #4
 801293a:	631a      	str	r2, [r3, #48]	; 0x30
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Set the suspending flag. */
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 801293c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801293e:	2201      	movs	r2, #1
 8012940:	639a      	str	r2, [r3, #56]	; 0x38

            /* Initialize the status to successful.  */
            thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 8012942:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012944:	2200      	movs	r2, #0
 8012946:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

            /* Setup the timeout period.  */
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  timer_ticks;
 801294a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801294c:	687a      	ldr	r2, [r7, #4]
 801294e:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 8012950:	4b0e      	ldr	r3, [pc, #56]	; (801298c <_tx_thread_sleep+0xfc>)
 8012952:	681b      	ldr	r3, [r3, #0]
 8012954:	3301      	adds	r3, #1
 8012956:	4a0d      	ldr	r2, [pc, #52]	; (801298c <_tx_thread_sleep+0xfc>)
 8012958:	6013      	str	r3, [r2, #0]
 801295a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801295c:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801295e:	68bb      	ldr	r3, [r7, #8]
 8012960:	f383 8810 	msr	PRIMASK, r3
}
 8012964:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Call actual thread suspension routine.  */
            _tx_thread_system_suspend(thread_ptr);
 8012966:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012968:	f000 f9bc 	bl	8012ce4 <_tx_thread_system_suspend>
#endif

            /* Return status to the caller.  */
            status =  thread_ptr -> tx_thread_suspend_status;
 801296c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801296e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012972:	637b      	str	r3, [r7, #52]	; 0x34
        }
    }

    /* Return completion status.  */
    return(status);
 8012974:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8012976:	4618      	mov	r0, r3
 8012978:	3738      	adds	r7, #56	; 0x38
 801297a:	46bd      	mov	sp, r7
 801297c:	bd80      	pop	{r7, pc}
 801297e:	bf00      	nop
 8012980:	2001c9e8 	.word	0x2001c9e8
 8012984:	2000000c 	.word	0x2000000c
 8012988:	2001cb30 	.word	0x2001cb30
 801298c:	2001ca80 	.word	0x2001ca80

08012990 <_tx_thread_suspend>:
/*                                            a MISRA compliance issue,   */
/*                                            resulting in version 6.1.1  */
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_suspend(TX_THREAD *thread_ptr)
{
 8012990:	b580      	push	{r7, lr}
 8012992:	b08a      	sub	sp, #40	; 0x28
 8012994:	af00      	add	r7, sp, #0
 8012996:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8012998:	f3ef 8310 	mrs	r3, PRIMASK
 801299c:	61bb      	str	r3, [r7, #24]
    return(posture);
 801299e:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 80129a0:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 80129a2:	b672      	cpsid	i
    return(int_posture);
 80129a4:	697b      	ldr	r3, [r7, #20]


#ifndef TX_INLINE_THREAD_RESUME_SUSPEND

    /* Lockout interrupts while the thread is being suspended.  */
    TX_DISABLE
 80129a6:	623b      	str	r3, [r7, #32]

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 80129a8:	4b2e      	ldr	r3, [pc, #184]	; (8012a64 <_tx_thread_suspend+0xd4>)
 80129aa:	681b      	ldr	r3, [r3, #0]
 80129ac:	61fb      	str	r3, [r7, #28]

    /* Log this kernel call.  */
    TX_EL_THREAD_SUSPEND_INSERT

    /* Check the specified thread's current status.  */
    if (thread_ptr -> tx_thread_state == TX_READY)
 80129ae:	687b      	ldr	r3, [r7, #4]
 80129b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80129b2:	2b00      	cmp	r3, #0
 80129b4:	d130      	bne.n	8012a18 <_tx_thread_suspend+0x88>
    {

        /* Initialize status to success.  */
        status =  TX_SUCCESS;
 80129b6:	2300      	movs	r3, #0
 80129b8:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80129ba:	f3ef 8305 	mrs	r3, IPSR
 80129be:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 80129c0:	693a      	ldr	r2, [r7, #16]

        /* Determine if we are in a thread context.  */
        if (TX_THREAD_GET_SYSTEM_STATE() == ((ULONG) 0))
 80129c2:	4b29      	ldr	r3, [pc, #164]	; (8012a68 <_tx_thread_suspend+0xd8>)
 80129c4:	681b      	ldr	r3, [r3, #0]
 80129c6:	4313      	orrs	r3, r2
 80129c8:	2b00      	cmp	r3, #0
 80129ca:	d109      	bne.n	80129e0 <_tx_thread_suspend+0x50>
        {

            /* Yes, we are in a thread context.  */

            /* Determine if the current thread is also the suspending thread.  */
            if (current_thread == thread_ptr)
 80129cc:	69fa      	ldr	r2, [r7, #28]
 80129ce:	687b      	ldr	r3, [r7, #4]
 80129d0:	429a      	cmp	r2, r3
 80129d2:	d105      	bne.n	80129e0 <_tx_thread_suspend+0x50>
            {

                /* Now determine if the preempt disable flag is non-zero.  */
                if (_tx_thread_preempt_disable != ((UINT) 0))
 80129d4:	4b25      	ldr	r3, [pc, #148]	; (8012a6c <_tx_thread_suspend+0xdc>)
 80129d6:	681b      	ldr	r3, [r3, #0]
 80129d8:	2b00      	cmp	r3, #0
 80129da:	d001      	beq.n	80129e0 <_tx_thread_suspend+0x50>
                {

                    /* Current thread cannot suspend when the preempt disable flag is non-zero,
                       return an error.  */
                    status =  TX_SUSPEND_ERROR;
 80129dc:	2314      	movs	r3, #20
 80129de:	627b      	str	r3, [r7, #36]	; 0x24
                }
            }
        }

        /* Determine if the status is still successful.  */
        if (status == TX_SUCCESS)
 80129e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80129e2:	2b00      	cmp	r3, #0
 80129e4:	d132      	bne.n	8012a4c <_tx_thread_suspend+0xbc>
        {

            /* Set the state to suspended.  */
            thread_ptr -> tx_thread_state =    TX_SUSPENDED;
 80129e6:	687b      	ldr	r3, [r7, #4]
 80129e8:	2203      	movs	r2, #3
 80129ea:	631a      	str	r2, [r3, #48]	; 0x30
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Set the suspending flag. */
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 80129ec:	687b      	ldr	r3, [r7, #4]
 80129ee:	2201      	movs	r2, #1
 80129f0:	639a      	str	r2, [r3, #56]	; 0x38

            /* Setup for no timeout period.  */
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 80129f2:	687b      	ldr	r3, [r7, #4]
 80129f4:	2200      	movs	r2, #0
 80129f6:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 80129f8:	4b1c      	ldr	r3, [pc, #112]	; (8012a6c <_tx_thread_suspend+0xdc>)
 80129fa:	681b      	ldr	r3, [r3, #0]
 80129fc:	3301      	adds	r3, #1
 80129fe:	4a1b      	ldr	r2, [pc, #108]	; (8012a6c <_tx_thread_suspend+0xdc>)
 8012a00:	6013      	str	r3, [r2, #0]
 8012a02:	6a3b      	ldr	r3, [r7, #32]
 8012a04:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8012a06:	68fb      	ldr	r3, [r7, #12]
 8012a08:	f383 8810 	msr	PRIMASK, r3
}
 8012a0c:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Call actual thread suspension routine.  */
            _tx_thread_system_suspend(thread_ptr);
 8012a0e:	6878      	ldr	r0, [r7, #4]
 8012a10:	f000 f968 	bl	8012ce4 <_tx_thread_system_suspend>
            /* Return success.  */
            status =  TX_SUCCESS;
#else

            /* If MISRA is not enabled, return directly.  */
            return(TX_SUCCESS);
 8012a14:	2300      	movs	r3, #0
 8012a16:	e020      	b.n	8012a5a <_tx_thread_suspend+0xca>
#endif
        }
    }
    else if (thread_ptr -> tx_thread_state == TX_TERMINATED)
 8012a18:	687b      	ldr	r3, [r7, #4]
 8012a1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012a1c:	2b02      	cmp	r3, #2
 8012a1e:	d102      	bne.n	8012a26 <_tx_thread_suspend+0x96>
    {

        /* Thread is terminated.  */
        status =  TX_SUSPEND_ERROR;
 8012a20:	2314      	movs	r3, #20
 8012a22:	627b      	str	r3, [r7, #36]	; 0x24
 8012a24:	e012      	b.n	8012a4c <_tx_thread_suspend+0xbc>
    }
    else if (thread_ptr -> tx_thread_state == TX_COMPLETED)
 8012a26:	687b      	ldr	r3, [r7, #4]
 8012a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012a2a:	2b01      	cmp	r3, #1
 8012a2c:	d102      	bne.n	8012a34 <_tx_thread_suspend+0xa4>
    {

        /* Thread is completed.  */
        status =  TX_SUSPEND_ERROR;
 8012a2e:	2314      	movs	r3, #20
 8012a30:	627b      	str	r3, [r7, #36]	; 0x24
 8012a32:	e00b      	b.n	8012a4c <_tx_thread_suspend+0xbc>
    }
    else if (thread_ptr -> tx_thread_state == TX_SUSPENDED)
 8012a34:	687b      	ldr	r3, [r7, #4]
 8012a36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012a38:	2b03      	cmp	r3, #3
 8012a3a:	d102      	bne.n	8012a42 <_tx_thread_suspend+0xb2>
    {

        /* Already suspended, just set status to success.  */
        status =  TX_SUCCESS;
 8012a3c:	2300      	movs	r3, #0
 8012a3e:	627b      	str	r3, [r7, #36]	; 0x24
 8012a40:	e004      	b.n	8012a4c <_tx_thread_suspend+0xbc>
    }
    else
    {

        /* Just set the delayed suspension flag.  */
        thread_ptr -> tx_thread_delayed_suspend =  TX_TRUE;
 8012a42:	687b      	ldr	r3, [r7, #4]
 8012a44:	2201      	movs	r2, #1
 8012a46:	635a      	str	r2, [r3, #52]	; 0x34

        /* Set status to success.  */
        status =  TX_SUCCESS;
 8012a48:	2300      	movs	r3, #0
 8012a4a:	627b      	str	r3, [r7, #36]	; 0x24
 8012a4c:	6a3b      	ldr	r3, [r7, #32]
 8012a4e:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8012a50:	68bb      	ldr	r3, [r7, #8]
 8012a52:	f383 8810 	msr	PRIMASK, r3
}
 8012a56:	bf00      	nop
    /* Restore interrupts.  */
    TX_RESTORE

    /* Always return success, since this function does not perform error
       checking.  */
    return(status);
 8012a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    TX_RESTORE

    /* Return completion status.  */
    return(status);
#endif
}
 8012a5a:	4618      	mov	r0, r3
 8012a5c:	3728      	adds	r7, #40	; 0x28
 8012a5e:	46bd      	mov	sp, r7
 8012a60:	bd80      	pop	{r7, pc}
 8012a62:	bf00      	nop
 8012a64:	2001c9e8 	.word	0x2001c9e8
 8012a68:	2000000c 	.word	0x2000000c
 8012a6c:	2001ca80 	.word	0x2001ca80

08012a70 <_tx_thread_system_preempt_check>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_preempt_check(VOID)
{
 8012a70:	b480      	push	{r7}
 8012a72:	b089      	sub	sp, #36	; 0x24
 8012a74:	af00      	add	r7, sp, #0
TX_THREAD       *current_thread;
TX_THREAD       *thread_ptr;


    /* Combine the system state and preempt disable flags into one for comparison.  */
    TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8012a76:	4b17      	ldr	r3, [pc, #92]	; (8012ad4 <_tx_thread_system_preempt_check+0x64>)
 8012a78:	681b      	ldr	r3, [r3, #0]
 8012a7a:	61fb      	str	r3, [r7, #28]

    /* Determine if we are in a system state (ISR or Initialization) or internal preemption is disabled.  */
    if (combined_flags == ((ULONG) 0))
 8012a7c:	69fb      	ldr	r3, [r7, #28]
 8012a7e:	2b00      	cmp	r3, #0
 8012a80:	d121      	bne.n	8012ac6 <_tx_thread_system_preempt_check+0x56>
    {

        /* No, at thread execution level so continue checking for preemption.  */

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(current_thread)
 8012a82:	4b15      	ldr	r3, [pc, #84]	; (8012ad8 <_tx_thread_system_preempt_check+0x68>)
 8012a84:	681b      	ldr	r3, [r3, #0]
 8012a86:	61bb      	str	r3, [r7, #24]

        /* Pickup the next execute pointer.  */
        thread_ptr =  _tx_thread_execute_ptr;
 8012a88:	4b14      	ldr	r3, [pc, #80]	; (8012adc <_tx_thread_system_preempt_check+0x6c>)
 8012a8a:	681b      	ldr	r3, [r3, #0]
 8012a8c:	617b      	str	r3, [r7, #20]

        /* Determine if preemption should take place.  */
        if (current_thread != thread_ptr)
 8012a8e:	69ba      	ldr	r2, [r7, #24]
 8012a90:	697b      	ldr	r3, [r7, #20]
 8012a92:	429a      	cmp	r2, r3
 8012a94:	d017      	beq.n	8012ac6 <_tx_thread_system_preempt_check+0x56>
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8012a96:	4b12      	ldr	r3, [pc, #72]	; (8012ae0 <_tx_thread_system_preempt_check+0x70>)
 8012a98:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012a9c:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8012a9e:	f3ef 8305 	mrs	r3, IPSR
 8012aa2:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 8012aa4:	693b      	ldr	r3, [r7, #16]
    if (_tx_ipsr_get() == 0)
 8012aa6:	2b00      	cmp	r3, #0
 8012aa8:	d10c      	bne.n	8012ac4 <_tx_thread_system_preempt_check+0x54>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8012aaa:	f3ef 8310 	mrs	r3, PRIMASK
 8012aae:	60fb      	str	r3, [r7, #12]
    return(posture);
 8012ab0:	68fb      	ldr	r3, [r7, #12]
        interrupt_save = __get_interrupt_posture();
 8012ab2:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("CPSIE  i": : : "memory");
 8012ab4:	b662      	cpsie	i
}
 8012ab6:	bf00      	nop
 8012ab8:	68bb      	ldr	r3, [r7, #8]
 8012aba:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8012abc:	687b      	ldr	r3, [r7, #4]
 8012abe:	f383 8810 	msr	PRIMASK, r3
}
 8012ac2:	bf00      	nop
}
 8012ac4:	bf00      	nop

            /* Return to the system so the higher priority thread can be scheduled.  */
            _tx_thread_system_return();
        }
    }
}
 8012ac6:	bf00      	nop
 8012ac8:	3724      	adds	r7, #36	; 0x24
 8012aca:	46bd      	mov	sp, r7
 8012acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ad0:	4770      	bx	lr
 8012ad2:	bf00      	nop
 8012ad4:	2001ca80 	.word	0x2001ca80
 8012ad8:	2001c9e8 	.word	0x2001c9e8
 8012adc:	2001c9ec 	.word	0x2001c9ec
 8012ae0:	e000ed04 	.word	0xe000ed04

08012ae4 <_tx_thread_system_resume>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_resume(TX_THREAD *thread_ptr)
#ifndef TX_NOT_INTERRUPTABLE
{
 8012ae4:	b580      	push	{r7, lr}
 8012ae6:	b096      	sub	sp, #88	; 0x58
 8012ae8:	af00      	add	r7, sp, #0
 8012aea:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8012aec:	f3ef 8310 	mrs	r3, PRIMASK
 8012af0:	637b      	str	r3, [r7, #52]	; 0x34
    return(posture);
 8012af2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    int_posture = __get_interrupt_posture();
 8012af4:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("CPSID i" : : : "memory");
 8012af6:	b672      	cpsid	i
    return(int_posture);
 8012af8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    /* Check this thread's stack.  */
    TX_THREAD_STACK_CHECK(thread_ptr)
#endif

    /* Lockout interrupts while the thread is being resumed.  */
    TX_DISABLE
 8012afa:	657b      	str	r3, [r7, #84]	; 0x54

#ifndef TX_NO_TIMER

    /* Deactivate the timeout timer if necessary.  */
    if (thread_ptr -> tx_thread_timer.tx_timer_internal_list_head != TX_NULL)
 8012afc:	687b      	ldr	r3, [r7, #4]
 8012afe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8012b00:	2b00      	cmp	r3, #0
 8012b02:	d005      	beq.n	8012b10 <_tx_thread_system_resume+0x2c>
    {

        /* Deactivate the thread's timeout timer.  */
        _tx_timer_system_deactivate(&(thread_ptr -> tx_thread_timer));
 8012b04:	687b      	ldr	r3, [r7, #4]
 8012b06:	334c      	adds	r3, #76	; 0x4c
 8012b08:	4618      	mov	r0, r3
 8012b0a:	f000 fb91 	bl	8013230 <_tx_timer_system_deactivate>
 8012b0e:	e002      	b.n	8012b16 <_tx_thread_system_resume+0x32>
    }
    else
    {

        /* Clear the remaining time to ensure timer doesn't get activated.  */
        thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 8012b10:	687b      	ldr	r3, [r7, #4]
 8012b12:	2200      	movs	r2, #0
 8012b14:	64da      	str	r2, [r3, #76]	; 0x4c
        time_stamp =  entry_ptr -> tx_trace_buffer_entry_time_stamp;
    }
#endif

    /* Decrease the preempt disabled count.  */
    _tx_thread_preempt_disable--;
 8012b16:	4b6c      	ldr	r3, [pc, #432]	; (8012cc8 <_tx_thread_system_resume+0x1e4>)
 8012b18:	681b      	ldr	r3, [r3, #0]
 8012b1a:	3b01      	subs	r3, #1
 8012b1c:	4a6a      	ldr	r2, [pc, #424]	; (8012cc8 <_tx_thread_system_resume+0x1e4>)
 8012b1e:	6013      	str	r3, [r2, #0]

    /* Determine if the thread is in the process of suspending.  If so, the thread
       control block is already on the linked list so nothing needs to be done.  */
    if (thread_ptr -> tx_thread_suspending == TX_FALSE)
 8012b20:	687b      	ldr	r3, [r7, #4]
 8012b22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012b24:	2b00      	cmp	r3, #0
 8012b26:	f040 8083 	bne.w	8012c30 <_tx_thread_system_resume+0x14c>
    {

        /* Thread is not in the process of suspending. Now check to make sure the thread
           has not already been resumed.  */
        if (thread_ptr -> tx_thread_state != TX_READY)
 8012b2a:	687b      	ldr	r3, [r7, #4]
 8012b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012b2e:	2b00      	cmp	r3, #0
 8012b30:	f000 8097 	beq.w	8012c62 <_tx_thread_system_resume+0x17e>
        {

            /* No, now check to see if the delayed suspension flag is set.  */
            if (thread_ptr -> tx_thread_delayed_suspend == TX_FALSE)
 8012b34:	687b      	ldr	r3, [r7, #4]
 8012b36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012b38:	2b00      	cmp	r3, #0
 8012b3a:	d172      	bne.n	8012c22 <_tx_thread_system_resume+0x13e>
                /* Resume the thread!  */

                /* Make this thread ready.  */

                /* Change the state to ready.  */
                thread_ptr -> tx_thread_state =  TX_READY;
 8012b3c:	687b      	ldr	r3, [r7, #4]
 8012b3e:	2200      	movs	r2, #0
 8012b40:	631a      	str	r2, [r3, #48]	; 0x30

                /* Pickup priority of thread.  */
                priority =  thread_ptr -> tx_thread_priority;
 8012b42:	687b      	ldr	r3, [r7, #4]
 8012b44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012b46:	653b      	str	r3, [r7, #80]	; 0x50
                thread_ptr -> tx_thread_performance_resume_count++;
#endif

                /* Determine if there are other threads at this priority that are
                   ready.  */
                head_ptr =  _tx_thread_priority_list[priority];
 8012b48:	4a60      	ldr	r2, [pc, #384]	; (8012ccc <_tx_thread_system_resume+0x1e8>)
 8012b4a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012b4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012b50:	64fb      	str	r3, [r7, #76]	; 0x4c
                if (head_ptr == TX_NULL)
 8012b52:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012b54:	2b00      	cmp	r3, #0
 8012b56:	d154      	bne.n	8012c02 <_tx_thread_system_resume+0x11e>
                {

                    /* First thread at this priority ready.  Add to the front of the list.  */
                    _tx_thread_priority_list[priority] =       thread_ptr;
 8012b58:	495c      	ldr	r1, [pc, #368]	; (8012ccc <_tx_thread_system_resume+0x1e8>)
 8012b5a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012b5c:	687a      	ldr	r2, [r7, #4]
 8012b5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                    thread_ptr -> tx_thread_ready_next =       thread_ptr;
 8012b62:	687b      	ldr	r3, [r7, #4]
 8012b64:	687a      	ldr	r2, [r7, #4]
 8012b66:	621a      	str	r2, [r3, #32]
                    thread_ptr -> tx_thread_ready_previous =   thread_ptr;
 8012b68:	687b      	ldr	r3, [r7, #4]
 8012b6a:	687a      	ldr	r2, [r7, #4]
 8012b6c:	625a      	str	r2, [r3, #36]	; 0x24
                    TX_DIV32_BIT_SET(priority, priority_bit)
                    _tx_thread_priority_map_active =  _tx_thread_priority_map_active | priority_bit;
#endif

                    /* Or in the thread's priority bit.  */
                    TX_MOD32_BIT_SET(priority, priority_bit)
 8012b6e:	2201      	movs	r2, #1
 8012b70:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012b72:	fa02 f303 	lsl.w	r3, r2, r3
 8012b76:	647b      	str	r3, [r7, #68]	; 0x44
                    _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] | priority_bit;
 8012b78:	4b55      	ldr	r3, [pc, #340]	; (8012cd0 <_tx_thread_system_resume+0x1ec>)
 8012b7a:	681a      	ldr	r2, [r3, #0]
 8012b7c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012b7e:	4313      	orrs	r3, r2
 8012b80:	4a53      	ldr	r2, [pc, #332]	; (8012cd0 <_tx_thread_system_resume+0x1ec>)
 8012b82:	6013      	str	r3, [r2, #0]

                    /* Determine if this newly ready thread is the highest priority.  */
                    if (priority < _tx_thread_highest_priority)
 8012b84:	4b53      	ldr	r3, [pc, #332]	; (8012cd4 <_tx_thread_system_resume+0x1f0>)
 8012b86:	681b      	ldr	r3, [r3, #0]
 8012b88:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8012b8a:	429a      	cmp	r2, r3
 8012b8c:	d269      	bcs.n	8012c62 <_tx_thread_system_resume+0x17e>
                    {

                        /* A new highest priority thread is present. */

                        /* Update the highest priority variable.  */
                        _tx_thread_highest_priority =  priority;
 8012b8e:	4a51      	ldr	r2, [pc, #324]	; (8012cd4 <_tx_thread_system_resume+0x1f0>)
 8012b90:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012b92:	6013      	str	r3, [r2, #0]

                        /* Pickup the execute pointer. Since it is going to be referenced multiple
                           times, it is placed in a local variable.  */
                        execute_ptr =  _tx_thread_execute_ptr;
 8012b94:	4b50      	ldr	r3, [pc, #320]	; (8012cd8 <_tx_thread_system_resume+0x1f4>)
 8012b96:	681b      	ldr	r3, [r3, #0]
 8012b98:	643b      	str	r3, [r7, #64]	; 0x40

                        /* Determine if no thread is currently executing.  */
                        if (execute_ptr == TX_NULL)
 8012b9a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012b9c:	2b00      	cmp	r3, #0
 8012b9e:	d103      	bne.n	8012ba8 <_tx_thread_system_resume+0xc4>
                        {

                            /* Simply setup the execute pointer.  */
                            _tx_thread_execute_ptr =  thread_ptr;
 8012ba0:	4a4d      	ldr	r2, [pc, #308]	; (8012cd8 <_tx_thread_system_resume+0x1f4>)
 8012ba2:	687b      	ldr	r3, [r7, #4]
 8012ba4:	6013      	str	r3, [r2, #0]
 8012ba6:	e05c      	b.n	8012c62 <_tx_thread_system_resume+0x17e>
                        {

                            /* Another thread has been scheduled for execution.  */

                            /* Check to see if this is a higher priority thread and determine if preemption is allowed.  */
                            if (priority < execute_ptr -> tx_thread_preempt_threshold)
 8012ba8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012baa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012bac:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8012bae:	429a      	cmp	r2, r3
 8012bb0:	d257      	bcs.n	8012c62 <_tx_thread_system_resume+0x17e>
                                execute_ptr -> tx_thread_performance_last_preempting_thread =  thread_ptr;

#endif

                                /* Yes, modify the execute thread pointer.  */
                                _tx_thread_execute_ptr =  thread_ptr;
 8012bb2:	4a49      	ldr	r2, [pc, #292]	; (8012cd8 <_tx_thread_system_resume+0x1f4>)
 8012bb4:	687b      	ldr	r3, [r7, #4]
 8012bb6:	6013      	str	r3, [r2, #0]
 8012bb8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012bba:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8012bbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012bbe:	f383 8810 	msr	PRIMASK, r3
}
 8012bc2:	bf00      	nop
                                TX_THREAD_STACK_CHECK(thread_ptr)
#endif

                                /* Now determine if preemption should take place. This is only possible if the current thread pointer is
                                   not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
                                TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8012bc4:	4b40      	ldr	r3, [pc, #256]	; (8012cc8 <_tx_thread_system_resume+0x1e4>)
 8012bc6:	681b      	ldr	r3, [r3, #0]
 8012bc8:	63fb      	str	r3, [r7, #60]	; 0x3c
                                if (combined_flags == ((ULONG) 0))
 8012bca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012bcc:	2b00      	cmp	r3, #0
 8012bce:	d174      	bne.n	8012cba <_tx_thread_system_resume+0x1d6>
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8012bd0:	4b42      	ldr	r3, [pc, #264]	; (8012cdc <_tx_thread_system_resume+0x1f8>)
 8012bd2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012bd6:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8012bd8:	f3ef 8305 	mrs	r3, IPSR
 8012bdc:	62bb      	str	r3, [r7, #40]	; 0x28
    return(ipsr_value);
 8012bde:	6abb      	ldr	r3, [r7, #40]	; 0x28
    if (_tx_ipsr_get() == 0)
 8012be0:	2b00      	cmp	r3, #0
 8012be2:	d10c      	bne.n	8012bfe <_tx_thread_system_resume+0x11a>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8012be4:	f3ef 8310 	mrs	r3, PRIMASK
 8012be8:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 8012bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
        interrupt_save = __get_interrupt_posture();
 8012bec:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSIE  i": : : "memory");
 8012bee:	b662      	cpsie	i
}
 8012bf0:	bf00      	nop
 8012bf2:	6a3b      	ldr	r3, [r7, #32]
 8012bf4:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8012bf6:	69fb      	ldr	r3, [r7, #28]
 8012bf8:	f383 8810 	msr	PRIMASK, r3
}
 8012bfc:	bf00      	nop
}
 8012bfe:	bf00      	nop
                                    /* Preemption is needed - return to the system!  */
                                    _tx_thread_system_return();
                                }

                                /* Return in-line when MISRA is not enabled.  */
                                return;
 8012c00:	e05b      	b.n	8012cba <_tx_thread_system_resume+0x1d6>
                {

                    /* No, there are other threads at this priority already ready.  */

                    /* Just add this thread to the priority list.  */
                    tail_ptr =                                 head_ptr -> tx_thread_ready_previous;
 8012c02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012c04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012c06:	64bb      	str	r3, [r7, #72]	; 0x48
                    tail_ptr -> tx_thread_ready_next =         thread_ptr;
 8012c08:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012c0a:	687a      	ldr	r2, [r7, #4]
 8012c0c:	621a      	str	r2, [r3, #32]
                    head_ptr -> tx_thread_ready_previous =     thread_ptr;
 8012c0e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012c10:	687a      	ldr	r2, [r7, #4]
 8012c12:	625a      	str	r2, [r3, #36]	; 0x24
                    thread_ptr -> tx_thread_ready_previous =   tail_ptr;
 8012c14:	687b      	ldr	r3, [r7, #4]
 8012c16:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8012c18:	625a      	str	r2, [r3, #36]	; 0x24
                    thread_ptr -> tx_thread_ready_next =       head_ptr;
 8012c1a:	687b      	ldr	r3, [r7, #4]
 8012c1c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8012c1e:	621a      	str	r2, [r3, #32]
 8012c20:	e01f      	b.n	8012c62 <_tx_thread_system_resume+0x17e>
            /* Else, delayed suspend flag was set.  */
            else
            {

                /* Clear the delayed suspend flag and change the state.  */
                thread_ptr -> tx_thread_delayed_suspend =  TX_FALSE;
 8012c22:	687b      	ldr	r3, [r7, #4]
 8012c24:	2200      	movs	r2, #0
 8012c26:	635a      	str	r2, [r3, #52]	; 0x34
                thread_ptr -> tx_thread_state =            TX_SUSPENDED;
 8012c28:	687b      	ldr	r3, [r7, #4]
 8012c2a:	2203      	movs	r2, #3
 8012c2c:	631a      	str	r2, [r3, #48]	; 0x30
 8012c2e:	e018      	b.n	8012c62 <_tx_thread_system_resume+0x17e>
        /* A resumption occurred in the middle of a previous thread suspension.  */

        /* Make sure the type of suspension under way is not a terminate or
           thread completion.  In either of these cases, do not void the
           interrupted suspension processing.  */
        if (thread_ptr -> tx_thread_state != TX_COMPLETED)
 8012c30:	687b      	ldr	r3, [r7, #4]
 8012c32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012c34:	2b01      	cmp	r3, #1
 8012c36:	d014      	beq.n	8012c62 <_tx_thread_system_resume+0x17e>
        {

            /* Make sure the thread isn't terminated.  */
            if (thread_ptr -> tx_thread_state != TX_TERMINATED)
 8012c38:	687b      	ldr	r3, [r7, #4]
 8012c3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012c3c:	2b02      	cmp	r3, #2
 8012c3e:	d010      	beq.n	8012c62 <_tx_thread_system_resume+0x17e>
            {

                /* No, now check to see if the delayed suspension flag is set.  */
                if (thread_ptr -> tx_thread_delayed_suspend == TX_FALSE)
 8012c40:	687b      	ldr	r3, [r7, #4]
 8012c42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012c44:	2b00      	cmp	r3, #0
 8012c46:	d106      	bne.n	8012c56 <_tx_thread_system_resume+0x172>
                {

                    /* Clear the suspending flag.  */
                    thread_ptr -> tx_thread_suspending =   TX_FALSE;
 8012c48:	687b      	ldr	r3, [r7, #4]
 8012c4a:	2200      	movs	r2, #0
 8012c4c:	639a      	str	r2, [r3, #56]	; 0x38

                    /* Restore the state to ready.  */
                    thread_ptr -> tx_thread_state =        TX_READY;
 8012c4e:	687b      	ldr	r3, [r7, #4]
 8012c50:	2200      	movs	r2, #0
 8012c52:	631a      	str	r2, [r3, #48]	; 0x30
 8012c54:	e005      	b.n	8012c62 <_tx_thread_system_resume+0x17e>
                }
                else
                {

                    /* Clear the delayed suspend flag and change the state.  */
                    thread_ptr -> tx_thread_delayed_suspend =  TX_FALSE;
 8012c56:	687b      	ldr	r3, [r7, #4]
 8012c58:	2200      	movs	r2, #0
 8012c5a:	635a      	str	r2, [r3, #52]	; 0x34
                    thread_ptr -> tx_thread_state =            TX_SUSPENDED;
 8012c5c:	687b      	ldr	r3, [r7, #4]
 8012c5e:	2203      	movs	r2, #3
 8012c60:	631a      	str	r2, [r3, #48]	; 0x30
        }
    }
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 8012c62:	4b1f      	ldr	r3, [pc, #124]	; (8012ce0 <_tx_thread_system_resume+0x1fc>)
 8012c64:	681b      	ldr	r3, [r3, #0]
 8012c66:	63bb      	str	r3, [r7, #56]	; 0x38
 8012c68:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012c6a:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8012c6c:	69bb      	ldr	r3, [r7, #24]
 8012c6e:	f383 8810 	msr	PRIMASK, r3
}
 8012c72:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Determine if a preemption condition is present.  */
    if (current_thread != _tx_thread_execute_ptr)
 8012c74:	4b18      	ldr	r3, [pc, #96]	; (8012cd8 <_tx_thread_system_resume+0x1f4>)
 8012c76:	681b      	ldr	r3, [r3, #0]
 8012c78:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012c7a:	429a      	cmp	r2, r3
 8012c7c:	d020      	beq.n	8012cc0 <_tx_thread_system_resume+0x1dc>
        TX_THREAD_STACK_CHECK(thread_ptr)
#endif

        /* Now determine if preemption should take place. This is only possible if the current thread pointer is
           not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
        TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8012c7e:	4b12      	ldr	r3, [pc, #72]	; (8012cc8 <_tx_thread_system_resume+0x1e4>)
 8012c80:	681b      	ldr	r3, [r3, #0]
 8012c82:	63fb      	str	r3, [r7, #60]	; 0x3c
        if (combined_flags == ((ULONG) 0))
 8012c84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012c86:	2b00      	cmp	r3, #0
 8012c88:	d11a      	bne.n	8012cc0 <_tx_thread_system_resume+0x1dc>
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8012c8a:	4b14      	ldr	r3, [pc, #80]	; (8012cdc <_tx_thread_system_resume+0x1f8>)
 8012c8c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012c90:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8012c92:	f3ef 8305 	mrs	r3, IPSR
 8012c96:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 8012c98:	697b      	ldr	r3, [r7, #20]
    if (_tx_ipsr_get() == 0)
 8012c9a:	2b00      	cmp	r3, #0
 8012c9c:	d10f      	bne.n	8012cbe <_tx_thread_system_resume+0x1da>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8012c9e:	f3ef 8310 	mrs	r3, PRIMASK
 8012ca2:	613b      	str	r3, [r7, #16]
    return(posture);
 8012ca4:	693b      	ldr	r3, [r7, #16]
        interrupt_save = __get_interrupt_posture();
 8012ca6:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("CPSIE  i": : : "memory");
 8012ca8:	b662      	cpsie	i
}
 8012caa:	bf00      	nop
 8012cac:	68fb      	ldr	r3, [r7, #12]
 8012cae:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8012cb0:	68bb      	ldr	r3, [r7, #8]
 8012cb2:	f383 8810 	msr	PRIMASK, r3
}
 8012cb6:	bf00      	nop
}
 8012cb8:	e001      	b.n	8012cbe <_tx_thread_system_resume+0x1da>
                                return;
 8012cba:	bf00      	nop
 8012cbc:	e000      	b.n	8012cc0 <_tx_thread_system_resume+0x1dc>
 8012cbe:	bf00      	nop

            /* Preemption is needed - return to the system!  */
            _tx_thread_system_return();
        }
    }
}
 8012cc0:	3758      	adds	r7, #88	; 0x58
 8012cc2:	46bd      	mov	sp, r7
 8012cc4:	bd80      	pop	{r7, pc}
 8012cc6:	bf00      	nop
 8012cc8:	2001ca80 	.word	0x2001ca80
 8012ccc:	2001ca00 	.word	0x2001ca00
 8012cd0:	2001c9f8 	.word	0x2001c9f8
 8012cd4:	2001c9fc 	.word	0x2001c9fc
 8012cd8:	2001c9ec 	.word	0x2001c9ec
 8012cdc:	e000ed04 	.word	0xe000ed04
 8012ce0:	2001c9e8 	.word	0x2001c9e8

08012ce4 <_tx_thread_system_suspend>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_suspend(TX_THREAD *thread_ptr)
#ifndef TX_NOT_INTERRUPTABLE
{
 8012ce4:	b580      	push	{r7, lr}
 8012ce6:	b09e      	sub	sp, #120	; 0x78
 8012ce8:	af00      	add	r7, sp, #0
 8012cea:	6078      	str	r0, [r7, #4]
TX_TRACE_BUFFER_ENTRY       *entry_ptr;
ULONG                       time_stamp =  ((ULONG) 0);
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 8012cec:	4b81      	ldr	r3, [pc, #516]	; (8012ef4 <_tx_thread_system_suspend+0x210>)
 8012cee:	681b      	ldr	r3, [r3, #0]
 8012cf0:	677b      	str	r3, [r7, #116]	; 0x74
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8012cf2:	f3ef 8310 	mrs	r3, PRIMASK
 8012cf6:	64fb      	str	r3, [r7, #76]	; 0x4c
    return(posture);
 8012cf8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    int_posture = __get_interrupt_posture();
 8012cfa:	64bb      	str	r3, [r7, #72]	; 0x48
    __asm__ volatile ("CPSID i" : : : "memory");
 8012cfc:	b672      	cpsid	i
    return(int_posture);
 8012cfe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    /* Check this thread's stack.  */
    TX_THREAD_STACK_CHECK(thread_ptr)
#endif

    /* Lockout interrupts while the thread is being suspended.  */
    TX_DISABLE
 8012d00:	673b      	str	r3, [r7, #112]	; 0x70

#ifndef TX_NO_TIMER

    /* Is the current thread suspending?  */
    if (thread_ptr == current_thread)
 8012d02:	687a      	ldr	r2, [r7, #4]
 8012d04:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8012d06:	429a      	cmp	r2, r3
 8012d08:	d112      	bne.n	8012d30 <_tx_thread_system_suspend+0x4c>
    {

        /* Pickup the wait option.  */
        timeout =  thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks;
 8012d0a:	687b      	ldr	r3, [r7, #4]
 8012d0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012d0e:	66fb      	str	r3, [r7, #108]	; 0x6c

        /* Determine if an activation is needed.  */
        if (timeout != TX_NO_WAIT)
 8012d10:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8012d12:	2b00      	cmp	r3, #0
 8012d14:	d008      	beq.n	8012d28 <_tx_thread_system_suspend+0x44>
        {

            /* Make sure the suspension is not a wait-forever.  */
            if (timeout != TX_WAIT_FOREVER)
 8012d16:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8012d18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012d1c:	d004      	beq.n	8012d28 <_tx_thread_system_suspend+0x44>
            {

                /* Activate the thread timer with the timeout value setup in the caller.  */
                _tx_timer_system_activate(&(thread_ptr -> tx_thread_timer));
 8012d1e:	687b      	ldr	r3, [r7, #4]
 8012d20:	334c      	adds	r3, #76	; 0x4c
 8012d22:	4618      	mov	r0, r3
 8012d24:	f000 fa22 	bl	801316c <_tx_timer_system_activate>
            }
        }

        /* Yes, reset time slice for current thread.  */
        _tx_timer_time_slice =  thread_ptr -> tx_thread_new_time_slice;
 8012d28:	687b      	ldr	r3, [r7, #4]
 8012d2a:	69db      	ldr	r3, [r3, #28]
 8012d2c:	4a72      	ldr	r2, [pc, #456]	; (8012ef8 <_tx_thread_system_suspend+0x214>)
 8012d2e:	6013      	str	r3, [r2, #0]
    }
#endif

    /* Decrease the preempt disabled count.  */
    _tx_thread_preempt_disable--;
 8012d30:	4b72      	ldr	r3, [pc, #456]	; (8012efc <_tx_thread_system_suspend+0x218>)
 8012d32:	681b      	ldr	r3, [r3, #0]
 8012d34:	3b01      	subs	r3, #1
 8012d36:	4a71      	ldr	r2, [pc, #452]	; (8012efc <_tx_thread_system_suspend+0x218>)
 8012d38:	6013      	str	r3, [r2, #0]
    _tx_thread_performance_suspend_count++;
#endif

    /* Check to make sure the thread suspending flag is still set.  If not, it
       has already been resumed.  */
    if (thread_ptr -> tx_thread_suspending == TX_TRUE)
 8012d3a:	687b      	ldr	r3, [r7, #4]
 8012d3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012d3e:	2b01      	cmp	r3, #1
 8012d40:	f040 80a6 	bne.w	8012e90 <_tx_thread_system_suspend+0x1ac>
            time_stamp =  entry_ptr -> tx_trace_buffer_entry_time_stamp;
        }
#endif

        /* Actually suspend this thread.  But first, clear the suspending flag.  */
        thread_ptr -> tx_thread_suspending =  TX_FALSE;
 8012d44:	687b      	ldr	r3, [r7, #4]
 8012d46:	2200      	movs	r2, #0
 8012d48:	639a      	str	r2, [r3, #56]	; 0x38

        /* Pickup priority of thread.  */
        priority =  thread_ptr -> tx_thread_priority;
 8012d4a:	687b      	ldr	r3, [r7, #4]
 8012d4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012d4e:	66bb      	str	r3, [r7, #104]	; 0x68

        /* Pickup the next ready thread pointer.  */
        ready_next =      thread_ptr -> tx_thread_ready_next;
 8012d50:	687b      	ldr	r3, [r7, #4]
 8012d52:	6a1b      	ldr	r3, [r3, #32]
 8012d54:	667b      	str	r3, [r7, #100]	; 0x64

        /* Determine if there are other threads at this priority that are
           ready.  */
        if (ready_next != thread_ptr)
 8012d56:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8012d58:	687b      	ldr	r3, [r7, #4]
 8012d5a:	429a      	cmp	r2, r3
 8012d5c:	d015      	beq.n	8012d8a <_tx_thread_system_suspend+0xa6>
        {

            /* Yes, there are other threads at this priority ready.  */

            /* Pickup the previous ready thread pointer.  */
            ready_previous =  thread_ptr -> tx_thread_ready_previous;
 8012d5e:	687b      	ldr	r3, [r7, #4]
 8012d60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012d62:	653b      	str	r3, [r7, #80]	; 0x50

            /* Just remove this thread from the priority list.  */
            ready_next -> tx_thread_ready_previous =    ready_previous;
 8012d64:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8012d66:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8012d68:	625a      	str	r2, [r3, #36]	; 0x24
            ready_previous -> tx_thread_ready_next =    ready_next;
 8012d6a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012d6c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8012d6e:	621a      	str	r2, [r3, #32]

            /* Determine if this is the head of the priority list.  */
            if (_tx_thread_priority_list[priority] == thread_ptr)
 8012d70:	4a63      	ldr	r2, [pc, #396]	; (8012f00 <_tx_thread_system_suspend+0x21c>)
 8012d72:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8012d74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012d78:	687a      	ldr	r2, [r7, #4]
 8012d7a:	429a      	cmp	r2, r3
 8012d7c:	d157      	bne.n	8012e2e <_tx_thread_system_suspend+0x14a>
            {

                /* Update the head pointer of this priority list.  */
                _tx_thread_priority_list[priority] =  ready_next;
 8012d7e:	4960      	ldr	r1, [pc, #384]	; (8012f00 <_tx_thread_system_suspend+0x21c>)
 8012d80:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8012d82:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8012d84:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8012d88:	e051      	b.n	8012e2e <_tx_thread_system_suspend+0x14a>
        else
        {

            /* This is the only thread at this priority ready to run.  Set the head
               pointer to NULL.  */
            _tx_thread_priority_list[priority] =    TX_NULL;
 8012d8a:	4a5d      	ldr	r2, [pc, #372]	; (8012f00 <_tx_thread_system_suspend+0x21c>)
 8012d8c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8012d8e:	2100      	movs	r1, #0
 8012d90:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            /* Calculate the index into the bit map array.  */
            map_index =  priority/((UINT) 32);
#endif

            /* Clear this priority bit in the ready priority bit map.  */
            TX_MOD32_BIT_SET(priority, priority_bit)
 8012d94:	2201      	movs	r2, #1
 8012d96:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8012d98:	fa02 f303 	lsl.w	r3, r2, r3
 8012d9c:	663b      	str	r3, [r7, #96]	; 0x60
            _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] & (~(priority_bit));
 8012d9e:	4b59      	ldr	r3, [pc, #356]	; (8012f04 <_tx_thread_system_suspend+0x220>)
 8012da0:	681a      	ldr	r2, [r3, #0]
 8012da2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012da4:	43db      	mvns	r3, r3
 8012da6:	4013      	ands	r3, r2
 8012da8:	4a56      	ldr	r2, [pc, #344]	; (8012f04 <_tx_thread_system_suspend+0x220>)
 8012daa:	6013      	str	r3, [r2, #0]
            /* Calculate the base priority as well.  */
            base_priority =  map_index * ((UINT) 32);
#else

            /* Setup the base priority to zero.  */
            base_priority =   ((UINT) 0);
 8012dac:	2300      	movs	r3, #0
 8012dae:	65fb      	str	r3, [r7, #92]	; 0x5c
#endif

            /* Setup working variable for the priority map.  */
            priority_map =    _tx_thread_priority_maps[MAP_INDEX];
 8012db0:	4b54      	ldr	r3, [pc, #336]	; (8012f04 <_tx_thread_system_suspend+0x220>)
 8012db2:	681b      	ldr	r3, [r3, #0]
 8012db4:	65bb      	str	r3, [r7, #88]	; 0x58

            /* Make a quick check for no other threads ready for execution.  */
            if (priority_map == ((ULONG) 0))
 8012db6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8012db8:	2b00      	cmp	r3, #0
 8012dba:	d12b      	bne.n	8012e14 <_tx_thread_system_suspend+0x130>
            {

                /* Nothing else is ready.  Set highest priority and execute thread
                   accordingly.  */
                _tx_thread_highest_priority =  ((UINT) TX_MAX_PRIORITIES);
 8012dbc:	4b52      	ldr	r3, [pc, #328]	; (8012f08 <_tx_thread_system_suspend+0x224>)
 8012dbe:	2220      	movs	r2, #32
 8012dc0:	601a      	str	r2, [r3, #0]
                _tx_thread_execute_ptr =       TX_NULL;
 8012dc2:	4b52      	ldr	r3, [pc, #328]	; (8012f0c <_tx_thread_system_suspend+0x228>)
 8012dc4:	2200      	movs	r2, #0
 8012dc6:	601a      	str	r2, [r3, #0]
 8012dc8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8012dca:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8012dcc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012dce:	f383 8810 	msr	PRIMASK, r3
}
 8012dd2:	bf00      	nop
                /* Restore interrupts.  */
                TX_RESTORE

                /* Determine if preemption should take place. This is only possible if the current thread pointer is
                   not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
                TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8012dd4:	4b49      	ldr	r3, [pc, #292]	; (8012efc <_tx_thread_system_suspend+0x218>)
 8012dd6:	681b      	ldr	r3, [r3, #0]
 8012dd8:	657b      	str	r3, [r7, #84]	; 0x54
                if (combined_flags == ((ULONG) 0))
 8012dda:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012ddc:	2b00      	cmp	r3, #0
 8012dde:	f040 8081 	bne.w	8012ee4 <_tx_thread_system_suspend+0x200>
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8012de2:	4b4b      	ldr	r3, [pc, #300]	; (8012f10 <_tx_thread_system_suspend+0x22c>)
 8012de4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012de8:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8012dea:	f3ef 8305 	mrs	r3, IPSR
 8012dee:	643b      	str	r3, [r7, #64]	; 0x40
    return(ipsr_value);
 8012df0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    if (_tx_ipsr_get() == 0)
 8012df2:	2b00      	cmp	r3, #0
 8012df4:	d10c      	bne.n	8012e10 <_tx_thread_system_suspend+0x12c>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8012df6:	f3ef 8310 	mrs	r3, PRIMASK
 8012dfa:	63fb      	str	r3, [r7, #60]	; 0x3c
    return(posture);
 8012dfc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
        interrupt_save = __get_interrupt_posture();
 8012dfe:	63bb      	str	r3, [r7, #56]	; 0x38
    __asm__ volatile ("CPSIE  i": : : "memory");
 8012e00:	b662      	cpsie	i
}
 8012e02:	bf00      	nop
 8012e04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012e06:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8012e08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012e0a:	f383 8810 	msr	PRIMASK, r3
}
 8012e0e:	bf00      	nop
}
 8012e10:	bf00      	nop
                    /* Preemption is needed - return to the system!  */
                    _tx_thread_system_return();
                }

                /* Return to caller.  */
                return;
 8012e12:	e067      	b.n	8012ee4 <_tx_thread_system_suspend+0x200>
            {

                /* Other threads at different priority levels are ready to run.  */

                /* Calculate the lowest bit set in the priority map. */
                TX_LOWEST_SET_BIT_CALCULATE(priority_map, priority_bit)
 8012e14:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8012e16:	fa93 f3a3 	rbit	r3, r3
 8012e1a:	65bb      	str	r3, [r7, #88]	; 0x58
 8012e1c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8012e1e:	fab3 f383 	clz	r3, r3
 8012e22:	663b      	str	r3, [r7, #96]	; 0x60

                /* Setup the next highest priority variable.  */
                _tx_thread_highest_priority =  base_priority + ((UINT) priority_bit);
 8012e24:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8012e26:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012e28:	4413      	add	r3, r2
 8012e2a:	4a37      	ldr	r2, [pc, #220]	; (8012f08 <_tx_thread_system_suspend+0x224>)
 8012e2c:	6013      	str	r3, [r2, #0]
            }
        }

        /* Determine if the suspending thread is the thread designated to execute.  */
        if (thread_ptr == _tx_thread_execute_ptr)
 8012e2e:	4b37      	ldr	r3, [pc, #220]	; (8012f0c <_tx_thread_system_suspend+0x228>)
 8012e30:	681b      	ldr	r3, [r3, #0]
 8012e32:	687a      	ldr	r2, [r7, #4]
 8012e34:	429a      	cmp	r2, r3
 8012e36:	d12b      	bne.n	8012e90 <_tx_thread_system_suspend+0x1ac>
        {

            /* Pickup the highest priority thread to execute.  */
            _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 8012e38:	4b33      	ldr	r3, [pc, #204]	; (8012f08 <_tx_thread_system_suspend+0x224>)
 8012e3a:	681b      	ldr	r3, [r3, #0]
 8012e3c:	4a30      	ldr	r2, [pc, #192]	; (8012f00 <_tx_thread_system_suspend+0x21c>)
 8012e3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012e42:	4a32      	ldr	r2, [pc, #200]	; (8012f0c <_tx_thread_system_suspend+0x228>)
 8012e44:	6013      	str	r3, [r2, #0]
 8012e46:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8012e48:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8012e4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012e4c:	f383 8810 	msr	PRIMASK, r3
}
 8012e50:	bf00      	nop
            /* Restore interrupts.  */
            TX_RESTORE

            /* Determine if preemption should take place. This is only possible if the current thread pointer is
               not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
            TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8012e52:	4b2a      	ldr	r3, [pc, #168]	; (8012efc <_tx_thread_system_suspend+0x218>)
 8012e54:	681b      	ldr	r3, [r3, #0]
 8012e56:	657b      	str	r3, [r7, #84]	; 0x54
            if (combined_flags == ((ULONG) 0))
 8012e58:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012e5a:	2b00      	cmp	r3, #0
 8012e5c:	d144      	bne.n	8012ee8 <_tx_thread_system_suspend+0x204>
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8012e5e:	4b2c      	ldr	r3, [pc, #176]	; (8012f10 <_tx_thread_system_suspend+0x22c>)
 8012e60:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012e64:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8012e66:	f3ef 8305 	mrs	r3, IPSR
 8012e6a:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(ipsr_value);
 8012e6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    if (_tx_ipsr_get() == 0)
 8012e6e:	2b00      	cmp	r3, #0
 8012e70:	d10c      	bne.n	8012e8c <_tx_thread_system_suspend+0x1a8>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8012e72:	f3ef 8310 	mrs	r3, PRIMASK
 8012e76:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 8012e78:	6abb      	ldr	r3, [r7, #40]	; 0x28
        interrupt_save = __get_interrupt_posture();
 8012e7a:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSIE  i": : : "memory");
 8012e7c:	b662      	cpsie	i
}
 8012e7e:	bf00      	nop
 8012e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012e82:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8012e84:	6a3b      	ldr	r3, [r7, #32]
 8012e86:	f383 8810 	msr	PRIMASK, r3
}
 8012e8a:	bf00      	nop
}
 8012e8c:	bf00      	nop
                /* Preemption is needed - return to the system!  */
                _tx_thread_system_return();
            }

            /* Return to caller.  */
            return;
 8012e8e:	e02b      	b.n	8012ee8 <_tx_thread_system_suspend+0x204>
 8012e90:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8012e92:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8012e94:	69fb      	ldr	r3, [r7, #28]
 8012e96:	f383 8810 	msr	PRIMASK, r3
}
 8012e9a:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Determine if a preemption condition is present.  */
    if (current_thread != _tx_thread_execute_ptr)
 8012e9c:	4b1b      	ldr	r3, [pc, #108]	; (8012f0c <_tx_thread_system_suspend+0x228>)
 8012e9e:	681b      	ldr	r3, [r3, #0]
 8012ea0:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8012ea2:	429a      	cmp	r2, r3
 8012ea4:	d022      	beq.n	8012eec <_tx_thread_system_suspend+0x208>
        TX_THREAD_STACK_CHECK(thread_ptr)
#endif

        /* Determine if preemption should take place. This is only possible if the current thread pointer is
           not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
        TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8012ea6:	4b15      	ldr	r3, [pc, #84]	; (8012efc <_tx_thread_system_suspend+0x218>)
 8012ea8:	681b      	ldr	r3, [r3, #0]
 8012eaa:	657b      	str	r3, [r7, #84]	; 0x54
        if (combined_flags == ((ULONG) 0))
 8012eac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012eae:	2b00      	cmp	r3, #0
 8012eb0:	d11c      	bne.n	8012eec <_tx_thread_system_suspend+0x208>
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8012eb2:	4b17      	ldr	r3, [pc, #92]	; (8012f10 <_tx_thread_system_suspend+0x22c>)
 8012eb4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012eb8:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8012eba:	f3ef 8305 	mrs	r3, IPSR
 8012ebe:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 8012ec0:	69bb      	ldr	r3, [r7, #24]
    if (_tx_ipsr_get() == 0)
 8012ec2:	2b00      	cmp	r3, #0
 8012ec4:	d10c      	bne.n	8012ee0 <_tx_thread_system_suspend+0x1fc>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8012ec6:	f3ef 8310 	mrs	r3, PRIMASK
 8012eca:	617b      	str	r3, [r7, #20]
    return(posture);
 8012ecc:	697b      	ldr	r3, [r7, #20]
        interrupt_save = __get_interrupt_posture();
 8012ece:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSIE  i": : : "memory");
 8012ed0:	b662      	cpsie	i
}
 8012ed2:	bf00      	nop
 8012ed4:	693b      	ldr	r3, [r7, #16]
 8012ed6:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8012ed8:	68fb      	ldr	r3, [r7, #12]
 8012eda:	f383 8810 	msr	PRIMASK, r3
}
 8012ede:	bf00      	nop
}
 8012ee0:	bf00      	nop
            _tx_thread_system_return();
        }
    }

    /* Return to caller.  */
    return;
 8012ee2:	e003      	b.n	8012eec <_tx_thread_system_suspend+0x208>
                return;
 8012ee4:	bf00      	nop
 8012ee6:	e002      	b.n	8012eee <_tx_thread_system_suspend+0x20a>
            return;
 8012ee8:	bf00      	nop
 8012eea:	e000      	b.n	8012eee <_tx_thread_system_suspend+0x20a>
    return;
 8012eec:	bf00      	nop
}
 8012eee:	3778      	adds	r7, #120	; 0x78
 8012ef0:	46bd      	mov	sp, r7
 8012ef2:	bd80      	pop	{r7, pc}
 8012ef4:	2001c9e8 	.word	0x2001c9e8
 8012ef8:	2001cfec 	.word	0x2001cfec
 8012efc:	2001ca80 	.word	0x2001ca80
 8012f00:	2001ca00 	.word	0x2001ca00
 8012f04:	2001c9f8 	.word	0x2001c9f8
 8012f08:	2001c9fc 	.word	0x2001c9fc
 8012f0c:	2001c9ec 	.word	0x2001c9ec
 8012f10:	e000ed04 	.word	0xe000ed04

08012f14 <_tx_thread_time_slice>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_time_slice(VOID)
{
 8012f14:	b480      	push	{r7}
 8012f16:	b087      	sub	sp, #28
 8012f18:	af00      	add	r7, sp, #0
ULONG           system_state;
UINT            preempt_disable;
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 8012f1a:	4b21      	ldr	r3, [pc, #132]	; (8012fa0 <_tx_thread_time_slice+0x8c>)
 8012f1c:	681b      	ldr	r3, [r3, #0]
 8012f1e:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8012f20:	f3ef 8310 	mrs	r3, PRIMASK
 8012f24:	60fb      	str	r3, [r7, #12]
    return(posture);
 8012f26:	68fb      	ldr	r3, [r7, #12]
    int_posture = __get_interrupt_posture();
 8012f28:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("CPSID i" : : : "memory");
 8012f2a:	b672      	cpsid	i
    return(int_posture);
 8012f2c:	68bb      	ldr	r3, [r7, #8]
    /* Set the next thread pointer to NULL.  */
    next_thread_ptr =  TX_NULL;
#endif

    /* Lockout interrupts while the time-slice is evaluated.  */
    TX_DISABLE
 8012f2e:	613b      	str	r3, [r7, #16]

    /* Clear the expired time-slice flag.  */
    _tx_timer_expired_time_slice =  TX_FALSE;
 8012f30:	4b1c      	ldr	r3, [pc, #112]	; (8012fa4 <_tx_thread_time_slice+0x90>)
 8012f32:	2200      	movs	r2, #0
 8012f34:	601a      	str	r2, [r3, #0]

    /* Make sure the thread pointer is valid.  */
    if (thread_ptr != TX_NULL)
 8012f36:	697b      	ldr	r3, [r7, #20]
 8012f38:	2b00      	cmp	r3, #0
 8012f3a:	d024      	beq.n	8012f86 <_tx_thread_time_slice+0x72>
    {

        /* Make sure the thread is still active, i.e. not suspended.  */
        if (thread_ptr -> tx_thread_state == TX_READY)
 8012f3c:	697b      	ldr	r3, [r7, #20]
 8012f3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012f40:	2b00      	cmp	r3, #0
 8012f42:	d120      	bne.n	8012f86 <_tx_thread_time_slice+0x72>
        {

            /* Setup a fresh time-slice for the thread.  */
            thread_ptr -> tx_thread_time_slice =  thread_ptr -> tx_thread_new_time_slice;
 8012f44:	697b      	ldr	r3, [r7, #20]
 8012f46:	69da      	ldr	r2, [r3, #28]
 8012f48:	697b      	ldr	r3, [r7, #20]
 8012f4a:	619a      	str	r2, [r3, #24]

            /* Reset the actual time-slice variable.  */
            _tx_timer_time_slice =  thread_ptr -> tx_thread_time_slice;
 8012f4c:	697b      	ldr	r3, [r7, #20]
 8012f4e:	699b      	ldr	r3, [r3, #24]
 8012f50:	4a15      	ldr	r2, [pc, #84]	; (8012fa8 <_tx_thread_time_slice+0x94>)
 8012f52:	6013      	str	r3, [r2, #0]

            /* Determine if there is another thread at the same priority and preemption-threshold
               is not set.  Preemption-threshold overrides time-slicing.  */
            if (thread_ptr -> tx_thread_ready_next != thread_ptr)
 8012f54:	697b      	ldr	r3, [r7, #20]
 8012f56:	6a1b      	ldr	r3, [r3, #32]
 8012f58:	697a      	ldr	r2, [r7, #20]
 8012f5a:	429a      	cmp	r2, r3
 8012f5c:	d013      	beq.n	8012f86 <_tx_thread_time_slice+0x72>
            {

                /* Check to see if preemption-threshold is not being used.  */
                if (thread_ptr -> tx_thread_priority == thread_ptr -> tx_thread_preempt_threshold)
 8012f5e:	697b      	ldr	r3, [r7, #20]
 8012f60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012f62:	697b      	ldr	r3, [r7, #20]
 8012f64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012f66:	429a      	cmp	r2, r3
 8012f68:	d10d      	bne.n	8012f86 <_tx_thread_time_slice+0x72>

                    /* Preemption-threshold is not being used by this thread.  */

                    /* There is another thread at this priority, make it the highest at
                       this priority level.  */
                    _tx_thread_priority_list[thread_ptr -> tx_thread_priority] =  thread_ptr -> tx_thread_ready_next;
 8012f6a:	697b      	ldr	r3, [r7, #20]
 8012f6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012f6e:	697a      	ldr	r2, [r7, #20]
 8012f70:	6a12      	ldr	r2, [r2, #32]
 8012f72:	490e      	ldr	r1, [pc, #56]	; (8012fac <_tx_thread_time_slice+0x98>)
 8012f74:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

                    /* Designate the highest priority thread as the one to execute.  Don't use this
                       thread's priority as an index just in case a higher priority thread is now
                       ready!  */
                    _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 8012f78:	4b0d      	ldr	r3, [pc, #52]	; (8012fb0 <_tx_thread_time_slice+0x9c>)
 8012f7a:	681b      	ldr	r3, [r3, #0]
 8012f7c:	4a0b      	ldr	r2, [pc, #44]	; (8012fac <_tx_thread_time_slice+0x98>)
 8012f7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012f82:	4a0c      	ldr	r2, [pc, #48]	; (8012fb4 <_tx_thread_time_slice+0xa0>)
 8012f84:	6013      	str	r3, [r2, #0]
 8012f86:	693b      	ldr	r3, [r7, #16]
 8012f88:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8012f8a:	687b      	ldr	r3, [r7, #4]
 8012f8c:	f383 8810 	msr	PRIMASK, r3
}
 8012f90:	bf00      	nop

        /* Yes, check this thread's stack.  */
        TX_THREAD_STACK_CHECK(next_thread_ptr)
    }
#endif
}
 8012f92:	bf00      	nop
 8012f94:	371c      	adds	r7, #28
 8012f96:	46bd      	mov	sp, r7
 8012f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f9c:	4770      	bx	lr
 8012f9e:	bf00      	nop
 8012fa0:	2001c9e8 	.word	0x2001c9e8
 8012fa4:	2001ca90 	.word	0x2001ca90
 8012fa8:	2001cfec 	.word	0x2001cfec
 8012fac:	2001ca00 	.word	0x2001ca00
 8012fb0:	2001c9fc 	.word	0x2001c9fc
 8012fb4:	2001c9ec 	.word	0x2001c9ec

08012fb8 <_tx_thread_timeout>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_timeout(ULONG timeout_input)
{
 8012fb8:	b580      	push	{r7, lr}
 8012fba:	b08a      	sub	sp, #40	; 0x28
 8012fbc:	af00      	add	r7, sp, #0
 8012fbe:	6078      	str	r0, [r7, #4]
VOID            (*suspend_cleanup)(struct TX_THREAD_STRUCT *suspend_thread_ptr, ULONG suspension_sequence);
ULONG           suspension_sequence;


    /* Pickup the thread pointer.  */
    TX_THREAD_TIMEOUT_POINTER_SETUP(thread_ptr)
 8012fc0:	687b      	ldr	r3, [r7, #4]
 8012fc2:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8012fc4:	f3ef 8310 	mrs	r3, PRIMASK
 8012fc8:	617b      	str	r3, [r7, #20]
    return(posture);
 8012fca:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 8012fcc:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 8012fce:	b672      	cpsid	i
    return(int_posture);
 8012fd0:	693b      	ldr	r3, [r7, #16]

    /* Disable interrupts.  */
    TX_DISABLE
 8012fd2:	623b      	str	r3, [r7, #32]

    /* Determine how the thread is currently suspended.  */
    if (thread_ptr -> tx_thread_state == TX_SLEEP)
 8012fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012fd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012fd8:	2b04      	cmp	r3, #4
 8012fda:	d10e      	bne.n	8012ffa <_tx_thread_timeout+0x42>
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Increment the disable preemption flag.  */
        _tx_thread_preempt_disable++;
 8012fdc:	4b13      	ldr	r3, [pc, #76]	; (801302c <_tx_thread_timeout+0x74>)
 8012fde:	681b      	ldr	r3, [r3, #0]
 8012fe0:	3301      	adds	r3, #1
 8012fe2:	4a12      	ldr	r2, [pc, #72]	; (801302c <_tx_thread_timeout+0x74>)
 8012fe4:	6013      	str	r3, [r2, #0]
 8012fe6:	6a3b      	ldr	r3, [r7, #32]
 8012fe8:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8012fea:	68fb      	ldr	r3, [r7, #12]
 8012fec:	f383 8810 	msr	PRIMASK, r3
}
 8012ff0:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Lift the suspension on the sleeping thread.  */
        _tx_thread_system_resume(thread_ptr);
 8012ff2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012ff4:	f7ff fd76 	bl	8012ae4 <_tx_thread_system_resume>

        /* Restore interrupts.  */
        TX_RESTORE
#endif
    }
}
 8012ff8:	e013      	b.n	8013022 <_tx_thread_timeout+0x6a>
        suspend_cleanup =  thread_ptr -> tx_thread_suspend_cleanup;
 8012ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012ffc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8012ffe:	61fb      	str	r3, [r7, #28]
        suspension_sequence =  thread_ptr -> tx_thread_suspension_sequence;
 8013000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013002:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8013006:	61bb      	str	r3, [r7, #24]
 8013008:	6a3b      	ldr	r3, [r7, #32]
 801300a:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801300c:	68bb      	ldr	r3, [r7, #8]
 801300e:	f383 8810 	msr	PRIMASK, r3
}
 8013012:	bf00      	nop
        if (suspend_cleanup != TX_NULL)
 8013014:	69fb      	ldr	r3, [r7, #28]
 8013016:	2b00      	cmp	r3, #0
 8013018:	d003      	beq.n	8013022 <_tx_thread_timeout+0x6a>
            (suspend_cleanup)(thread_ptr, suspension_sequence);
 801301a:	69fb      	ldr	r3, [r7, #28]
 801301c:	69b9      	ldr	r1, [r7, #24]
 801301e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013020:	4798      	blx	r3
}
 8013022:	bf00      	nop
 8013024:	3728      	adds	r7, #40	; 0x28
 8013026:	46bd      	mov	sp, r7
 8013028:	bd80      	pop	{r7, pc}
 801302a:	bf00      	nop
 801302c:	2001ca80 	.word	0x2001ca80

08013030 <_tx_timer_expiration_process>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_expiration_process(VOID)
{
 8013030:	b580      	push	{r7, lr}
 8013032:	b084      	sub	sp, #16
 8013034:	af00      	add	r7, sp, #0
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8013036:	f3ef 8310 	mrs	r3, PRIMASK
 801303a:	607b      	str	r3, [r7, #4]
    return(posture);
 801303c:	687b      	ldr	r3, [r7, #4]
    int_posture = __get_interrupt_posture();
 801303e:	603b      	str	r3, [r7, #0]
    __asm__ volatile ("CPSID i" : : : "memory");
 8013040:	b672      	cpsid	i
    return(int_posture);
 8013042:	683b      	ldr	r3, [r7, #0]

    /* Don't process in the ISR, wakeup the system timer thread to process the
       timer expiration.  */

    /* Disable interrupts.  */
    TX_DISABLE
 8013044:	60fb      	str	r3, [r7, #12]
    /* Restore interrupts.  */
    TX_RESTORE
#else

    /* Increment the preempt disable flag.  */
    _tx_thread_preempt_disable++;
 8013046:	4b09      	ldr	r3, [pc, #36]	; (801306c <_tx_timer_expiration_process+0x3c>)
 8013048:	681b      	ldr	r3, [r3, #0]
 801304a:	3301      	adds	r3, #1
 801304c:	4a07      	ldr	r2, [pc, #28]	; (801306c <_tx_timer_expiration_process+0x3c>)
 801304e:	6013      	str	r3, [r2, #0]
 8013050:	68fb      	ldr	r3, [r7, #12]
 8013052:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8013054:	68bb      	ldr	r3, [r7, #8]
 8013056:	f383 8810 	msr	PRIMASK, r3
}
 801305a:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Call the system resume function to activate the timer thread.  */
    _tx_thread_system_resume(&_tx_timer_thread);
 801305c:	4804      	ldr	r0, [pc, #16]	; (8013070 <_tx_timer_expiration_process+0x40>)
 801305e:	f7ff fd41 	bl	8012ae4 <_tx_thread_system_resume>
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 8013062:	bf00      	nop
 8013064:	3710      	adds	r7, #16
 8013066:	46bd      	mov	sp, r7
 8013068:	bd80      	pop	{r7, pc}
 801306a:	bf00      	nop
 801306c:	2001ca80 	.word	0x2001ca80
 8013070:	2001cb30 	.word	0x2001cb30

08013074 <_tx_timer_initialize>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_initialize(VOID)
{
 8013074:	b590      	push	{r4, r7, lr}
 8013076:	b089      	sub	sp, #36	; 0x24
 8013078:	af06      	add	r7, sp, #24
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the system clock to 0.  */
    _tx_timer_system_clock =  ((ULONG) 0);
 801307a:	4b28      	ldr	r3, [pc, #160]	; (801311c <_tx_timer_initialize+0xa8>)
 801307c:	2200      	movs	r2, #0
 801307e:	601a      	str	r2, [r3, #0]

    /* Initialize the time-slice value to 0 to make sure it is disabled.  */
    _tx_timer_time_slice =  ((ULONG) 0);
 8013080:	4b27      	ldr	r3, [pc, #156]	; (8013120 <_tx_timer_initialize+0xac>)
 8013082:	2200      	movs	r2, #0
 8013084:	601a      	str	r2, [r3, #0]

    /* Clear the expired flags.  */
    _tx_timer_expired_time_slice =  TX_FALSE;
 8013086:	4b27      	ldr	r3, [pc, #156]	; (8013124 <_tx_timer_initialize+0xb0>)
 8013088:	2200      	movs	r2, #0
 801308a:	601a      	str	r2, [r3, #0]
    _tx_timer_expired =             TX_FALSE;
 801308c:	4b26      	ldr	r3, [pc, #152]	; (8013128 <_tx_timer_initialize+0xb4>)
 801308e:	2200      	movs	r2, #0
 8013090:	601a      	str	r2, [r3, #0]

    /* Set the currently expired timer being processed pointer to NULL.  */
    _tx_timer_expired_timer_ptr =  TX_NULL;
 8013092:	4b26      	ldr	r3, [pc, #152]	; (801312c <_tx_timer_initialize+0xb8>)
 8013094:	2200      	movs	r2, #0
 8013096:	601a      	str	r2, [r3, #0]

    /* Initialize the thread and application timer management control structures.  */

    /* First, initialize the timer list.  */
    TX_MEMSET(&_tx_timer_list[0], 0, (sizeof(_tx_timer_list)));
 8013098:	2280      	movs	r2, #128	; 0x80
 801309a:	2100      	movs	r1, #0
 801309c:	4824      	ldr	r0, [pc, #144]	; (8013130 <_tx_timer_initialize+0xbc>)
 801309e:	f000 febd 	bl	8013e1c <memset>
#endif

    /* Initialize all of the list pointers.  */
    _tx_timer_list_start =   &_tx_timer_list[0];
 80130a2:	4b24      	ldr	r3, [pc, #144]	; (8013134 <_tx_timer_initialize+0xc0>)
 80130a4:	4a22      	ldr	r2, [pc, #136]	; (8013130 <_tx_timer_initialize+0xbc>)
 80130a6:	601a      	str	r2, [r3, #0]
    _tx_timer_current_ptr =  &_tx_timer_list[0];
 80130a8:	4b23      	ldr	r3, [pc, #140]	; (8013138 <_tx_timer_initialize+0xc4>)
 80130aa:	4a21      	ldr	r2, [pc, #132]	; (8013130 <_tx_timer_initialize+0xbc>)
 80130ac:	601a      	str	r2, [r3, #0]

    /* Set the timer list end pointer to one past the actual timer list.  This is done
       to make the timer interrupt handling in assembly language a little easier.  */
    _tx_timer_list_end =     &_tx_timer_list[TX_TIMER_ENTRIES-((ULONG) 1)];
 80130ae:	4b23      	ldr	r3, [pc, #140]	; (801313c <_tx_timer_initialize+0xc8>)
 80130b0:	4a23      	ldr	r2, [pc, #140]	; (8013140 <_tx_timer_initialize+0xcc>)
 80130b2:	601a      	str	r2, [r3, #0]
    _tx_timer_list_end =     TX_TIMER_POINTER_ADD(_tx_timer_list_end, ((ULONG) 1));
 80130b4:	4b21      	ldr	r3, [pc, #132]	; (801313c <_tx_timer_initialize+0xc8>)
 80130b6:	681b      	ldr	r3, [r3, #0]
 80130b8:	3304      	adds	r3, #4
 80130ba:	4a20      	ldr	r2, [pc, #128]	; (801313c <_tx_timer_initialize+0xc8>)
 80130bc:	6013      	str	r3, [r2, #0]

#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Setup the variables associated with the system timer thread's stack and
       priority.  */
    _tx_timer_stack_start =  (VOID *) &_tx_timer_thread_stack_area[0];
 80130be:	4b21      	ldr	r3, [pc, #132]	; (8013144 <_tx_timer_initialize+0xd0>)
 80130c0:	4a21      	ldr	r2, [pc, #132]	; (8013148 <_tx_timer_initialize+0xd4>)
 80130c2:	601a      	str	r2, [r3, #0]
    _tx_timer_stack_size =   ((ULONG) TX_TIMER_THREAD_STACK_SIZE);
 80130c4:	4b21      	ldr	r3, [pc, #132]	; (801314c <_tx_timer_initialize+0xd8>)
 80130c6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80130ca:	601a      	str	r2, [r3, #0]
    _tx_timer_priority =     ((UINT) TX_TIMER_THREAD_PRIORITY);
 80130cc:	4b20      	ldr	r3, [pc, #128]	; (8013150 <_tx_timer_initialize+0xdc>)
 80130ce:	2200      	movs	r2, #0
 80130d0:	601a      	str	r2, [r3, #0]
       low-level initialization component.  */
    do
    {

        /* Create the system timer thread.  */
        status =  _tx_thread_create(&_tx_timer_thread,
 80130d2:	4b1c      	ldr	r3, [pc, #112]	; (8013144 <_tx_timer_initialize+0xd0>)
 80130d4:	681b      	ldr	r3, [r3, #0]
 80130d6:	4a1d      	ldr	r2, [pc, #116]	; (801314c <_tx_timer_initialize+0xd8>)
 80130d8:	6812      	ldr	r2, [r2, #0]
 80130da:	491d      	ldr	r1, [pc, #116]	; (8013150 <_tx_timer_initialize+0xdc>)
 80130dc:	6809      	ldr	r1, [r1, #0]
 80130de:	481c      	ldr	r0, [pc, #112]	; (8013150 <_tx_timer_initialize+0xdc>)
 80130e0:	6800      	ldr	r0, [r0, #0]
 80130e2:	2400      	movs	r4, #0
 80130e4:	9405      	str	r4, [sp, #20]
 80130e6:	2400      	movs	r4, #0
 80130e8:	9404      	str	r4, [sp, #16]
 80130ea:	9003      	str	r0, [sp, #12]
 80130ec:	9102      	str	r1, [sp, #8]
 80130ee:	9201      	str	r2, [sp, #4]
 80130f0:	9300      	str	r3, [sp, #0]
 80130f2:	4b18      	ldr	r3, [pc, #96]	; (8013154 <_tx_timer_initialize+0xe0>)
 80130f4:	4a18      	ldr	r2, [pc, #96]	; (8013158 <_tx_timer_initialize+0xe4>)
 80130f6:	4919      	ldr	r1, [pc, #100]	; (801315c <_tx_timer_initialize+0xe8>)
 80130f8:	4819      	ldr	r0, [pc, #100]	; (8013160 <_tx_timer_initialize+0xec>)
 80130fa:	f7ff f985 	bl	8012408 <_tx_thread_create>
 80130fe:	6078      	str	r0, [r7, #4]
#endif

        /* Define timer initialize extension.  */
        TX_TIMER_INITIALIZE_EXTENSION(status)

    } while (status != TX_SUCCESS);
 8013100:	687b      	ldr	r3, [r7, #4]
 8013102:	2b00      	cmp	r3, #0
 8013104:	d1e5      	bne.n	80130d2 <_tx_timer_initialize+0x5e>
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the head pointer of the created application timer list.  */
    _tx_timer_created_ptr =  TX_NULL;
 8013106:	4b17      	ldr	r3, [pc, #92]	; (8013164 <_tx_timer_initialize+0xf0>)
 8013108:	2200      	movs	r2, #0
 801310a:	601a      	str	r2, [r3, #0]

    /* Set the created count to zero.  */
    _tx_timer_created_count =  TX_EMPTY;
 801310c:	4b16      	ldr	r3, [pc, #88]	; (8013168 <_tx_timer_initialize+0xf4>)
 801310e:	2200      	movs	r2, #0
 8013110:	601a      	str	r2, [r3, #0]
    _tx_timer_performance_expiration_count =         ((ULONG) 0);
    _tx_timer_performance__expiration_adjust_count =  ((ULONG) 0);
#endif
#endif
#endif
}
 8013112:	bf00      	nop
 8013114:	370c      	adds	r7, #12
 8013116:	46bd      	mov	sp, r7
 8013118:	bd90      	pop	{r4, r7, pc}
 801311a:	bf00      	nop
 801311c:	2001ca8c 	.word	0x2001ca8c
 8013120:	2001cfec 	.word	0x2001cfec
 8013124:	2001ca90 	.word	0x2001ca90
 8013128:	2001cb20 	.word	0x2001cb20
 801312c:	2001cb2c 	.word	0x2001cb2c
 8013130:	2001ca94 	.word	0x2001ca94
 8013134:	2001cb14 	.word	0x2001cb14
 8013138:	2001cb1c 	.word	0x2001cb1c
 801313c:	2001cb18 	.word	0x2001cb18
 8013140:	2001cb10 	.word	0x2001cb10
 8013144:	2001cbe0 	.word	0x2001cbe0
 8013148:	2001cbec 	.word	0x2001cbec
 801314c:	2001cbe4 	.word	0x2001cbe4
 8013150:	2001cbe8 	.word	0x2001cbe8
 8013154:	4154494d 	.word	0x4154494d
 8013158:	080132a1 	.word	0x080132a1
 801315c:	08014a04 	.word	0x08014a04
 8013160:	2001cb30 	.word	0x2001cb30
 8013164:	2001cb24 	.word	0x2001cb24
 8013168:	2001cb28 	.word	0x2001cb28

0801316c <_tx_timer_system_activate>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_system_activate(TX_TIMER_INTERNAL *timer_ptr)
{
 801316c:	b480      	push	{r7}
 801316e:	b089      	sub	sp, #36	; 0x24
 8013170:	af00      	add	r7, sp, #0
 8013172:	6078      	str	r0, [r7, #4]
ULONG                       remaining_ticks;
ULONG                       expiration_time;


    /* Pickup the remaining ticks.  */
    remaining_ticks =  timer_ptr -> tx_timer_internal_remaining_ticks;
 8013174:	687b      	ldr	r3, [r7, #4]
 8013176:	681b      	ldr	r3, [r3, #0]
 8013178:	617b      	str	r3, [r7, #20]

    /* Determine if there is a timer to activate.  */
    if (remaining_ticks != ((ULONG) 0))
 801317a:	697b      	ldr	r3, [r7, #20]
 801317c:	2b00      	cmp	r3, #0
 801317e:	d04a      	beq.n	8013216 <_tx_timer_system_activate+0xaa>
    {

        /* Determine if the timer is set to wait forever.  */
        if (remaining_ticks != TX_WAIT_FOREVER)
 8013180:	697b      	ldr	r3, [r7, #20]
 8013182:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013186:	d046      	beq.n	8013216 <_tx_timer_system_activate+0xaa>
        {

            /* Valid timer activate request.  */

            /* Determine if the timer still needs activation.  */
            if (timer_ptr -> tx_timer_internal_list_head == TX_NULL)
 8013188:	687b      	ldr	r3, [r7, #4]
 801318a:	699b      	ldr	r3, [r3, #24]
 801318c:	2b00      	cmp	r3, #0
 801318e:	d142      	bne.n	8013216 <_tx_timer_system_activate+0xaa>
            {

                /* Activate the timer.  */

                /* Calculate the amount of time remaining for the timer.  */
                if (remaining_ticks > TX_TIMER_ENTRIES)
 8013190:	697b      	ldr	r3, [r7, #20]
 8013192:	2b20      	cmp	r3, #32
 8013194:	d902      	bls.n	801319c <_tx_timer_system_activate+0x30>
                {

                    /* Set expiration time to the maximum number of entries.  */
                    expiration_time =  TX_TIMER_ENTRIES - ((ULONG) 1);
 8013196:	231f      	movs	r3, #31
 8013198:	61bb      	str	r3, [r7, #24]
 801319a:	e002      	b.n	80131a2 <_tx_timer_system_activate+0x36>
                {

                    /* Timer value fits in the timer entries.  */

                    /* Set the expiration time.  */
                    expiration_time =  (remaining_ticks - ((ULONG) 1));
 801319c:	697b      	ldr	r3, [r7, #20]
 801319e:	3b01      	subs	r3, #1
 80131a0:	61bb      	str	r3, [r7, #24]

                /* At this point, we are ready to put the timer on one of
                   the timer lists.  */

                /* Calculate the proper place for the timer.  */
                timer_list =  TX_TIMER_POINTER_ADD(_tx_timer_current_ptr, expiration_time);
 80131a2:	4b20      	ldr	r3, [pc, #128]	; (8013224 <_tx_timer_system_activate+0xb8>)
 80131a4:	681a      	ldr	r2, [r3, #0]
 80131a6:	69bb      	ldr	r3, [r7, #24]
 80131a8:	009b      	lsls	r3, r3, #2
 80131aa:	4413      	add	r3, r2
 80131ac:	61fb      	str	r3, [r7, #28]
                if (TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(timer_list) >= TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(_tx_timer_list_end))
 80131ae:	4b1e      	ldr	r3, [pc, #120]	; (8013228 <_tx_timer_system_activate+0xbc>)
 80131b0:	681b      	ldr	r3, [r3, #0]
 80131b2:	69fa      	ldr	r2, [r7, #28]
 80131b4:	429a      	cmp	r2, r3
 80131b6:	d30b      	bcc.n	80131d0 <_tx_timer_system_activate+0x64>
                {

                    /* Wrap from the beginning of the list.  */
                    delta =  TX_TIMER_POINTER_DIF(timer_list, _tx_timer_list_end);
 80131b8:	4b1b      	ldr	r3, [pc, #108]	; (8013228 <_tx_timer_system_activate+0xbc>)
 80131ba:	681b      	ldr	r3, [r3, #0]
 80131bc:	69fa      	ldr	r2, [r7, #28]
 80131be:	1ad3      	subs	r3, r2, r3
 80131c0:	109b      	asrs	r3, r3, #2
 80131c2:	613b      	str	r3, [r7, #16]
                    timer_list =  TX_TIMER_POINTER_ADD(_tx_timer_list_start, delta);
 80131c4:	4b19      	ldr	r3, [pc, #100]	; (801322c <_tx_timer_system_activate+0xc0>)
 80131c6:	681a      	ldr	r2, [r3, #0]
 80131c8:	693b      	ldr	r3, [r7, #16]
 80131ca:	009b      	lsls	r3, r3, #2
 80131cc:	4413      	add	r3, r2
 80131ce:	61fb      	str	r3, [r7, #28]
                }

                /* Now put the timer on this list.  */
                if ((*timer_list) == TX_NULL)
 80131d0:	69fb      	ldr	r3, [r7, #28]
 80131d2:	681b      	ldr	r3, [r3, #0]
 80131d4:	2b00      	cmp	r3, #0
 80131d6:	d109      	bne.n	80131ec <_tx_timer_system_activate+0x80>
                {

                    /* This list is NULL, just put the new timer on it.  */

                    /* Setup the links in this timer.  */
                    timer_ptr -> tx_timer_internal_active_next =      timer_ptr;
 80131d8:	687b      	ldr	r3, [r7, #4]
 80131da:	687a      	ldr	r2, [r7, #4]
 80131dc:	611a      	str	r2, [r3, #16]
                    timer_ptr -> tx_timer_internal_active_previous =  timer_ptr;
 80131de:	687b      	ldr	r3, [r7, #4]
 80131e0:	687a      	ldr	r2, [r7, #4]
 80131e2:	615a      	str	r2, [r3, #20]

                    /* Setup the list head pointer.  */
                    *timer_list =  timer_ptr;
 80131e4:	69fb      	ldr	r3, [r7, #28]
 80131e6:	687a      	ldr	r2, [r7, #4]
 80131e8:	601a      	str	r2, [r3, #0]
 80131ea:	e011      	b.n	8013210 <_tx_timer_system_activate+0xa4>
                }
                else
                {

                    /* This list is not NULL, add current timer to the end. */
                    next_timer =                                        *timer_list;
 80131ec:	69fb      	ldr	r3, [r7, #28]
 80131ee:	681b      	ldr	r3, [r3, #0]
 80131f0:	60fb      	str	r3, [r7, #12]
                    previous_timer =                                    next_timer -> tx_timer_internal_active_previous;
 80131f2:	68fb      	ldr	r3, [r7, #12]
 80131f4:	695b      	ldr	r3, [r3, #20]
 80131f6:	60bb      	str	r3, [r7, #8]
                    previous_timer -> tx_timer_internal_active_next =   timer_ptr;
 80131f8:	68bb      	ldr	r3, [r7, #8]
 80131fa:	687a      	ldr	r2, [r7, #4]
 80131fc:	611a      	str	r2, [r3, #16]
                    next_timer -> tx_timer_internal_active_previous =   timer_ptr;
 80131fe:	68fb      	ldr	r3, [r7, #12]
 8013200:	687a      	ldr	r2, [r7, #4]
 8013202:	615a      	str	r2, [r3, #20]
                    timer_ptr -> tx_timer_internal_active_next =        next_timer;
 8013204:	687b      	ldr	r3, [r7, #4]
 8013206:	68fa      	ldr	r2, [r7, #12]
 8013208:	611a      	str	r2, [r3, #16]
                    timer_ptr -> tx_timer_internal_active_previous =    previous_timer;
 801320a:	687b      	ldr	r3, [r7, #4]
 801320c:	68ba      	ldr	r2, [r7, #8]
 801320e:	615a      	str	r2, [r3, #20]
                }

                /* Setup list head pointer.  */
                timer_ptr -> tx_timer_internal_list_head =  timer_list;
 8013210:	687b      	ldr	r3, [r7, #4]
 8013212:	69fa      	ldr	r2, [r7, #28]
 8013214:	619a      	str	r2, [r3, #24]
            }
        }
    }
}
 8013216:	bf00      	nop
 8013218:	3724      	adds	r7, #36	; 0x24
 801321a:	46bd      	mov	sp, r7
 801321c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013220:	4770      	bx	lr
 8013222:	bf00      	nop
 8013224:	2001cb1c 	.word	0x2001cb1c
 8013228:	2001cb18 	.word	0x2001cb18
 801322c:	2001cb14 	.word	0x2001cb14

08013230 <_tx_timer_system_deactivate>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_system_deactivate(TX_TIMER_INTERNAL *timer_ptr)
{
 8013230:	b480      	push	{r7}
 8013232:	b087      	sub	sp, #28
 8013234:	af00      	add	r7, sp, #0
 8013236:	6078      	str	r0, [r7, #4]
TX_TIMER_INTERNAL   *next_timer;
TX_TIMER_INTERNAL   *previous_timer;


    /* Pickup the list head pointer.  */
    list_head =  timer_ptr -> tx_timer_internal_list_head;
 8013238:	687b      	ldr	r3, [r7, #4]
 801323a:	699b      	ldr	r3, [r3, #24]
 801323c:	617b      	str	r3, [r7, #20]

    /* Determine if the timer still needs deactivation.  */
    if (list_head != TX_NULL)
 801323e:	697b      	ldr	r3, [r7, #20]
 8013240:	2b00      	cmp	r3, #0
 8013242:	d026      	beq.n	8013292 <_tx_timer_system_deactivate+0x62>
    {

        /* Deactivate the timer.  */

        /* Pickup the next active timer.  */
        next_timer =  timer_ptr -> tx_timer_internal_active_next;
 8013244:	687b      	ldr	r3, [r7, #4]
 8013246:	691b      	ldr	r3, [r3, #16]
 8013248:	613b      	str	r3, [r7, #16]

        /* See if this is the only timer in the list.  */
        if (timer_ptr == next_timer)
 801324a:	687a      	ldr	r2, [r7, #4]
 801324c:	693b      	ldr	r3, [r7, #16]
 801324e:	429a      	cmp	r2, r3
 8013250:	d108      	bne.n	8013264 <_tx_timer_system_deactivate+0x34>
        {

            /* Yes, the only timer on the list.  */

            /* Determine if the head pointer needs to be updated.  */
            if (*(list_head) == timer_ptr)
 8013252:	697b      	ldr	r3, [r7, #20]
 8013254:	681b      	ldr	r3, [r3, #0]
 8013256:	687a      	ldr	r2, [r7, #4]
 8013258:	429a      	cmp	r2, r3
 801325a:	d117      	bne.n	801328c <_tx_timer_system_deactivate+0x5c>
            {

                /* Update the head pointer.  */
                *(list_head) =  TX_NULL;
 801325c:	697b      	ldr	r3, [r7, #20]
 801325e:	2200      	movs	r2, #0
 8013260:	601a      	str	r2, [r3, #0]
 8013262:	e013      	b.n	801328c <_tx_timer_system_deactivate+0x5c>
        {

            /* At least one more timer is on the same expiration list.  */

            /* Update the links of the adjacent timers.  */
            previous_timer =                                   timer_ptr -> tx_timer_internal_active_previous;
 8013264:	687b      	ldr	r3, [r7, #4]
 8013266:	695b      	ldr	r3, [r3, #20]
 8013268:	60fb      	str	r3, [r7, #12]
            next_timer -> tx_timer_internal_active_previous =  previous_timer;
 801326a:	693b      	ldr	r3, [r7, #16]
 801326c:	68fa      	ldr	r2, [r7, #12]
 801326e:	615a      	str	r2, [r3, #20]
            previous_timer -> tx_timer_internal_active_next =  next_timer;
 8013270:	68fb      	ldr	r3, [r7, #12]
 8013272:	693a      	ldr	r2, [r7, #16]
 8013274:	611a      	str	r2, [r3, #16]

            /* Determine if the head pointer needs to be updated.  */
            if (*(list_head) == timer_ptr)
 8013276:	697b      	ldr	r3, [r7, #20]
 8013278:	681b      	ldr	r3, [r3, #0]
 801327a:	687a      	ldr	r2, [r7, #4]
 801327c:	429a      	cmp	r2, r3
 801327e:	d105      	bne.n	801328c <_tx_timer_system_deactivate+0x5c>
            {

                /* Update the next timer in the list with the list head pointer.  */
                next_timer -> tx_timer_internal_list_head =  list_head;
 8013280:	693b      	ldr	r3, [r7, #16]
 8013282:	697a      	ldr	r2, [r7, #20]
 8013284:	619a      	str	r2, [r3, #24]

                /* Update the head pointer.  */
                *(list_head) =  next_timer;
 8013286:	697b      	ldr	r3, [r7, #20]
 8013288:	693a      	ldr	r2, [r7, #16]
 801328a:	601a      	str	r2, [r3, #0]
            }
        }

        /* Clear the timer's list head pointer.  */
        timer_ptr -> tx_timer_internal_list_head =  TX_NULL;
 801328c:	687b      	ldr	r3, [r7, #4]
 801328e:	2200      	movs	r2, #0
 8013290:	619a      	str	r2, [r3, #24]
    }
}
 8013292:	bf00      	nop
 8013294:	371c      	adds	r7, #28
 8013296:	46bd      	mov	sp, r7
 8013298:	f85d 7b04 	ldr.w	r7, [sp], #4
 801329c:	4770      	bx	lr
	...

080132a0 <_tx_timer_thread_entry>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
#ifndef TX_TIMER_PROCESS_IN_ISR
VOID  _tx_timer_thread_entry(ULONG timer_thread_input)
{
 80132a0:	b580      	push	{r7, lr}
 80132a2:	b098      	sub	sp, #96	; 0x60
 80132a4:	af00      	add	r7, sp, #0
 80132a6:	6078      	str	r0, [r7, #4]
TX_TIMER_INTERNAL           *reactivate_timer;
TX_TIMER_INTERNAL           *next_timer;
TX_TIMER_INTERNAL           *previous_timer;
TX_TIMER_INTERNAL           *current_timer;
VOID                        (*timeout_function)(ULONG id);
ULONG                       timeout_param =  ((ULONG) 0);
 80132a8:	2300      	movs	r3, #0
 80132aa:	657b      	str	r3, [r7, #84]	; 0x54
#endif


    /* Make sure the timer input is correct.  This also gets rid of the
       silly compiler warnings.  */
    if (timer_thread_input == TX_TIMER_ID)
 80132ac:	687b      	ldr	r3, [r7, #4]
 80132ae:	4a73      	ldr	r2, [pc, #460]	; (801347c <_tx_timer_thread_entry+0x1dc>)
 80132b0:	4293      	cmp	r3, r2
 80132b2:	f040 80de 	bne.w	8013472 <_tx_timer_thread_entry+0x1d2>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80132b6:	f3ef 8310 	mrs	r3, PRIMASK
 80132ba:	643b      	str	r3, [r7, #64]	; 0x40
    return(posture);
 80132bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    int_posture = __get_interrupt_posture();
 80132be:	63fb      	str	r3, [r7, #60]	; 0x3c
    __asm__ volatile ("CPSID i" : : : "memory");
 80132c0:	b672      	cpsid	i
    return(int_posture);
 80132c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
        {

            /* First, move the current list pointer and clear the timer
               expired value.  This allows the interrupt handling portion
               to continue looking for timer expirations.  */
            TX_DISABLE
 80132c4:	65fb      	str	r3, [r7, #92]	; 0x5c

            /* Save the current timer expiration list pointer.  */
            expired_timers =  *_tx_timer_current_ptr;
 80132c6:	4b6e      	ldr	r3, [pc, #440]	; (8013480 <_tx_timer_thread_entry+0x1e0>)
 80132c8:	681b      	ldr	r3, [r3, #0]
 80132ca:	681b      	ldr	r3, [r3, #0]
 80132cc:	60fb      	str	r3, [r7, #12]

            /* Modify the head pointer in the first timer in the list, if there
               is one!  */
            if (expired_timers != TX_NULL)
 80132ce:	68fb      	ldr	r3, [r7, #12]
 80132d0:	2b00      	cmp	r3, #0
 80132d2:	d003      	beq.n	80132dc <_tx_timer_thread_entry+0x3c>
            {

                expired_timers -> tx_timer_internal_list_head =  &expired_timers;
 80132d4:	68fb      	ldr	r3, [r7, #12]
 80132d6:	f107 020c 	add.w	r2, r7, #12
 80132da:	619a      	str	r2, [r3, #24]
            }

            /* Set the current list pointer to NULL.  */
            *_tx_timer_current_ptr =  TX_NULL;
 80132dc:	4b68      	ldr	r3, [pc, #416]	; (8013480 <_tx_timer_thread_entry+0x1e0>)
 80132de:	681b      	ldr	r3, [r3, #0]
 80132e0:	2200      	movs	r2, #0
 80132e2:	601a      	str	r2, [r3, #0]

            /* Move the current pointer up one timer entry wrap if we get to
               the end of the list.  */
            _tx_timer_current_ptr =  TX_TIMER_POINTER_ADD(_tx_timer_current_ptr, 1);
 80132e4:	4b66      	ldr	r3, [pc, #408]	; (8013480 <_tx_timer_thread_entry+0x1e0>)
 80132e6:	681b      	ldr	r3, [r3, #0]
 80132e8:	3304      	adds	r3, #4
 80132ea:	4a65      	ldr	r2, [pc, #404]	; (8013480 <_tx_timer_thread_entry+0x1e0>)
 80132ec:	6013      	str	r3, [r2, #0]
            if (_tx_timer_current_ptr == _tx_timer_list_end)
 80132ee:	4b64      	ldr	r3, [pc, #400]	; (8013480 <_tx_timer_thread_entry+0x1e0>)
 80132f0:	681a      	ldr	r2, [r3, #0]
 80132f2:	4b64      	ldr	r3, [pc, #400]	; (8013484 <_tx_timer_thread_entry+0x1e4>)
 80132f4:	681b      	ldr	r3, [r3, #0]
 80132f6:	429a      	cmp	r2, r3
 80132f8:	d103      	bne.n	8013302 <_tx_timer_thread_entry+0x62>
            {

                _tx_timer_current_ptr =  _tx_timer_list_start;
 80132fa:	4b63      	ldr	r3, [pc, #396]	; (8013488 <_tx_timer_thread_entry+0x1e8>)
 80132fc:	681b      	ldr	r3, [r3, #0]
 80132fe:	4a60      	ldr	r2, [pc, #384]	; (8013480 <_tx_timer_thread_entry+0x1e0>)
 8013300:	6013      	str	r3, [r2, #0]
            }

            /* Clear the expired flag.  */
            _tx_timer_expired =  TX_FALSE;
 8013302:	4b62      	ldr	r3, [pc, #392]	; (801348c <_tx_timer_thread_entry+0x1ec>)
 8013304:	2200      	movs	r2, #0
 8013306:	601a      	str	r2, [r3, #0]
 8013308:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801330a:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801330c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801330e:	f383 8810 	msr	PRIMASK, r3
}
 8013312:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8013314:	f3ef 8310 	mrs	r3, PRIMASK
 8013318:	63bb      	str	r3, [r7, #56]	; 0x38
    return(posture);
 801331a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    int_posture = __get_interrupt_posture();
 801331c:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile ("CPSID i" : : : "memory");
 801331e:	b672      	cpsid	i
    return(int_posture);
 8013320:	6b7b      	ldr	r3, [r7, #52]	; 0x34

            /* Restore interrupts temporarily.  */
            TX_RESTORE

            /* Disable interrupts again.  */
            TX_DISABLE
 8013322:	65fb      	str	r3, [r7, #92]	; 0x5c

            /* Next, process the expiration of the associated timers at this
               time slot.  */
            while (expired_timers != TX_NULL)
 8013324:	e07f      	b.n	8013426 <_tx_timer_thread_entry+0x186>
            {

                /* Something is on the list.  Remove it and process the expiration.  */
                current_timer =  expired_timers;
 8013326:	68fb      	ldr	r3, [r7, #12]
 8013328:	64fb      	str	r3, [r7, #76]	; 0x4c

                /* Pickup the next timer.  */
                next_timer =  expired_timers -> tx_timer_internal_active_next;
 801332a:	68fb      	ldr	r3, [r7, #12]
 801332c:	691b      	ldr	r3, [r3, #16]
 801332e:	64bb      	str	r3, [r7, #72]	; 0x48

                /* Set the reactivate_timer to NULL.  */
                reactivate_timer =  TX_NULL;
 8013330:	2300      	movs	r3, #0
 8013332:	60bb      	str	r3, [r7, #8]

                /* Determine if this is the only timer.  */
                if (current_timer == next_timer)
 8013334:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8013336:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013338:	429a      	cmp	r2, r3
 801333a:	d102      	bne.n	8013342 <_tx_timer_thread_entry+0xa2>
                {

                    /* Yes, this is the only timer in the list.  */

                    /* Set the head pointer to NULL.  */
                    expired_timers =  TX_NULL;
 801333c:	2300      	movs	r3, #0
 801333e:	60fb      	str	r3, [r7, #12]
 8013340:	e00e      	b.n	8013360 <_tx_timer_thread_entry+0xc0>
                {

                    /* No, not the only expired timer.  */

                    /* Remove this timer from the expired list.  */
                    previous_timer =                                   current_timer -> tx_timer_internal_active_previous;
 8013342:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013344:	695b      	ldr	r3, [r3, #20]
 8013346:	647b      	str	r3, [r7, #68]	; 0x44
                    next_timer -> tx_timer_internal_active_previous =  previous_timer;
 8013348:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801334a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801334c:	615a      	str	r2, [r3, #20]
                    previous_timer -> tx_timer_internal_active_next =  next_timer;
 801334e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013350:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8013352:	611a      	str	r2, [r3, #16]

                    /* Modify the next timer's list head to point at the current list head.  */
                    next_timer -> tx_timer_internal_list_head =  &expired_timers;
 8013354:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013356:	f107 020c 	add.w	r2, r7, #12
 801335a:	619a      	str	r2, [r3, #24]

                    /* Set the list head pointer.  */
                    expired_timers =  next_timer;
 801335c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801335e:	60fb      	str	r3, [r7, #12]

                /* In any case, the timer is now off of the expired list.  */

                /* Determine if the timer has expired or if it is just a really
                   big timer that needs to be placed in the list again.  */
                if (current_timer -> tx_timer_internal_remaining_ticks > TX_TIMER_ENTRIES)
 8013360:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013362:	681b      	ldr	r3, [r3, #0]
 8013364:	2b20      	cmp	r3, #32
 8013366:	d911      	bls.n	801338c <_tx_timer_thread_entry+0xec>
                    }
#endif

                    /* Decrement the remaining ticks of the timer.  */
                    current_timer -> tx_timer_internal_remaining_ticks =
                            current_timer -> tx_timer_internal_remaining_ticks - TX_TIMER_ENTRIES;
 8013368:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801336a:	681b      	ldr	r3, [r3, #0]
 801336c:	f1a3 0220 	sub.w	r2, r3, #32
                    current_timer -> tx_timer_internal_remaining_ticks =
 8013370:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013372:	601a      	str	r2, [r3, #0]

                    /* Set the timeout function to NULL in order to bypass the
                       expiration.  */
                    timeout_function =  TX_NULL;
 8013374:	2300      	movs	r3, #0
 8013376:	65bb      	str	r3, [r7, #88]	; 0x58

                    /* Make the timer appear that it is still active while interrupts
                       are enabled.  This will permit proper processing of a timer
                       deactivate from an ISR.  */
                    current_timer -> tx_timer_internal_list_head =    &reactivate_timer;
 8013378:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801337a:	f107 0208 	add.w	r2, r7, #8
 801337e:	619a      	str	r2, [r3, #24]
                    current_timer -> tx_timer_internal_active_next =  current_timer;
 8013380:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013382:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8013384:	611a      	str	r2, [r3, #16]

                    /* Setup the temporary timer list head pointer.  */
                    reactivate_timer =  current_timer;
 8013386:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013388:	60bb      	str	r3, [r7, #8]
 801338a:	e01a      	b.n	80133c2 <_tx_timer_thread_entry+0x122>
                    }
#endif

                    /* Copy the calling function and ID into local variables before interrupts
                       are re-enabled.  */
                    timeout_function =  current_timer -> tx_timer_internal_timeout_function;
 801338c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801338e:	689b      	ldr	r3, [r3, #8]
 8013390:	65bb      	str	r3, [r7, #88]	; 0x58
                    timeout_param =     current_timer -> tx_timer_internal_timeout_param;
 8013392:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013394:	68db      	ldr	r3, [r3, #12]
 8013396:	657b      	str	r3, [r7, #84]	; 0x54

                    /* Copy the reinitialize ticks into the remaining ticks.  */
                    current_timer -> tx_timer_internal_remaining_ticks =  current_timer -> tx_timer_internal_re_initialize_ticks;
 8013398:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801339a:	685a      	ldr	r2, [r3, #4]
 801339c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801339e:	601a      	str	r2, [r3, #0]

                    /* Determine if the timer should be reactivated.  */
                    if (current_timer -> tx_timer_internal_remaining_ticks != ((ULONG) 0))
 80133a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80133a2:	681b      	ldr	r3, [r3, #0]
 80133a4:	2b00      	cmp	r3, #0
 80133a6:	d009      	beq.n	80133bc <_tx_timer_thread_entry+0x11c>

                        /* Make the timer appear that it is still active while processing
                           the expiration routine and with interrupts enabled.  This will
                           permit proper processing of a timer deactivate from both the
                           expiration routine and an ISR.  */
                        current_timer -> tx_timer_internal_list_head =    &reactivate_timer;
 80133a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80133aa:	f107 0208 	add.w	r2, r7, #8
 80133ae:	619a      	str	r2, [r3, #24]
                        current_timer -> tx_timer_internal_active_next =  current_timer;
 80133b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80133b2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80133b4:	611a      	str	r2, [r3, #16]

                        /* Setup the temporary timer list head pointer.  */
                        reactivate_timer =  current_timer;
 80133b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80133b8:	60bb      	str	r3, [r7, #8]
 80133ba:	e002      	b.n	80133c2 <_tx_timer_thread_entry+0x122>
                    else
                    {

                        /* Set the list pointer of this timer to NULL.  This is used to indicate
                           the timer is no longer active.  */
                        current_timer -> tx_timer_internal_list_head =  TX_NULL;
 80133bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80133be:	2200      	movs	r2, #0
 80133c0:	619a      	str	r2, [r3, #24]
                    }
                }

                /* Set pointer to indicate the expired timer that is currently being processed.  */
                _tx_timer_expired_timer_ptr =  current_timer;
 80133c2:	4a33      	ldr	r2, [pc, #204]	; (8013490 <_tx_timer_thread_entry+0x1f0>)
 80133c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80133c6:	6013      	str	r3, [r2, #0]
 80133c8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80133ca:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80133cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80133ce:	f383 8810 	msr	PRIMASK, r3
}
 80133d2:	bf00      	nop

                /* Restore interrupts for timer expiration call.  */
                TX_RESTORE

                /* Call the timer-expiration function, if non-NULL.  */
                if (timeout_function != TX_NULL)
 80133d4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80133d6:	2b00      	cmp	r3, #0
 80133d8:	d002      	beq.n	80133e0 <_tx_timer_thread_entry+0x140>
                {

                    (timeout_function) (timeout_param);
 80133da:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80133dc:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80133de:	4798      	blx	r3
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80133e0:	f3ef 8310 	mrs	r3, PRIMASK
 80133e4:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 80133e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
    int_posture = __get_interrupt_posture();
 80133e8:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 80133ea:	b672      	cpsid	i
    return(int_posture);
 80133ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                }

                /* Lockout interrupts again.  */
                TX_DISABLE
 80133ee:	65fb      	str	r3, [r7, #92]	; 0x5c

                /* Clear expired timer pointer.  */
                _tx_timer_expired_timer_ptr =  TX_NULL;
 80133f0:	4b27      	ldr	r3, [pc, #156]	; (8013490 <_tx_timer_thread_entry+0x1f0>)
 80133f2:	2200      	movs	r2, #0
 80133f4:	601a      	str	r2, [r3, #0]

                /* Determine if the timer needs to be reactivated.  */
                if (reactivate_timer == current_timer)
 80133f6:	68bb      	ldr	r3, [r7, #8]
 80133f8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80133fa:	429a      	cmp	r2, r3
 80133fc:	d105      	bne.n	801340a <_tx_timer_thread_entry+0x16a>
#else

                    /* Reactivate through the timer activate function.  */

                    /* Clear the list head for the timer activate call.  */
                    current_timer -> tx_timer_internal_list_head = TX_NULL;
 80133fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013400:	2200      	movs	r2, #0
 8013402:	619a      	str	r2, [r3, #24]

                    /* Activate the current timer.  */
                    _tx_timer_system_activate(current_timer);
 8013404:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8013406:	f7ff feb1 	bl	801316c <_tx_timer_system_activate>
 801340a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801340c:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801340e:	69bb      	ldr	r3, [r7, #24]
 8013410:	f383 8810 	msr	PRIMASK, r3
}
 8013414:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8013416:	f3ef 8310 	mrs	r3, PRIMASK
 801341a:	623b      	str	r3, [r7, #32]
    return(posture);
 801341c:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 801341e:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 8013420:	b672      	cpsid	i
    return(int_posture);
 8013422:	69fb      	ldr	r3, [r7, #28]

                /* Restore interrupts.  */
                TX_RESTORE

                /* Lockout interrupts again.  */
                TX_DISABLE
 8013424:	65fb      	str	r3, [r7, #92]	; 0x5c
            while (expired_timers != TX_NULL)
 8013426:	68fb      	ldr	r3, [r7, #12]
 8013428:	2b00      	cmp	r3, #0
 801342a:	f47f af7c 	bne.w	8013326 <_tx_timer_thread_entry+0x86>

            /* Finally, suspend this thread and wait for the next expiration.  */

            /* Determine if another expiration took place while we were in this
               thread.  If so, process another expiration.  */
            if (_tx_timer_expired == TX_FALSE)
 801342e:	4b17      	ldr	r3, [pc, #92]	; (801348c <_tx_timer_thread_entry+0x1ec>)
 8013430:	681b      	ldr	r3, [r3, #0]
 8013432:	2b00      	cmp	r3, #0
 8013434:	d116      	bne.n	8013464 <_tx_timer_thread_entry+0x1c4>
            {

                /* Otherwise, no timer expiration, so suspend the thread.  */

                /* Build pointer to the timer thread.  */
                thread_ptr =  &_tx_timer_thread;
 8013436:	4b17      	ldr	r3, [pc, #92]	; (8013494 <_tx_timer_thread_entry+0x1f4>)
 8013438:	653b      	str	r3, [r7, #80]	; 0x50

                /* Set the status to suspending, in order to indicate the
                   suspension is in progress.  */
                thread_ptr -> tx_thread_state =  TX_SUSPENDED;
 801343a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801343c:	2203      	movs	r2, #3
 801343e:	631a      	str	r2, [r3, #48]	; 0x30
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Set the suspending flag. */
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8013440:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013442:	2201      	movs	r2, #1
 8013444:	639a      	str	r2, [r3, #56]	; 0x38

                /* Increment the preempt disable count prior to suspending.  */
                _tx_thread_preempt_disable++;
 8013446:	4b14      	ldr	r3, [pc, #80]	; (8013498 <_tx_timer_thread_entry+0x1f8>)
 8013448:	681b      	ldr	r3, [r3, #0]
 801344a:	3301      	adds	r3, #1
 801344c:	4a12      	ldr	r2, [pc, #72]	; (8013498 <_tx_timer_thread_entry+0x1f8>)
 801344e:	6013      	str	r3, [r2, #0]
 8013450:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8013452:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8013454:	697b      	ldr	r3, [r7, #20]
 8013456:	f383 8810 	msr	PRIMASK, r3
}
 801345a:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Call actual thread suspension routine.  */
                _tx_thread_system_suspend(thread_ptr);
 801345c:	6d38      	ldr	r0, [r7, #80]	; 0x50
 801345e:	f7ff fc41 	bl	8012ce4 <_tx_thread_system_suspend>
 8013462:	e728      	b.n	80132b6 <_tx_timer_thread_entry+0x16>
 8013464:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8013466:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8013468:	693b      	ldr	r3, [r7, #16]
 801346a:	f383 8810 	msr	PRIMASK, r3
}
 801346e:	bf00      	nop
            TX_DISABLE
 8013470:	e721      	b.n	80132b6 <_tx_timer_thread_entry+0x16>

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif

}
 8013472:	bf00      	nop
 8013474:	3760      	adds	r7, #96	; 0x60
 8013476:	46bd      	mov	sp, r7
 8013478:	bd80      	pop	{r7, pc}
 801347a:	bf00      	nop
 801347c:	4154494d 	.word	0x4154494d
 8013480:	2001cb1c 	.word	0x2001cb1c
 8013484:	2001cb18 	.word	0x2001cb18
 8013488:	2001cb14 	.word	0x2001cb14
 801348c:	2001cb20 	.word	0x2001cb20
 8013490:	2001cb2c 	.word	0x2001cb2c
 8013494:	2001cb30 	.word	0x2001cb30
 8013498:	2001ca80 	.word	0x2001ca80

0801349c <_txe_byte_allocate>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_byte_allocate(TX_BYTE_POOL *pool_ptr, VOID **memory_ptr,
                                    ULONG memory_size,  ULONG wait_option)
{
 801349c:	b580      	push	{r7, lr}
 801349e:	b08a      	sub	sp, #40	; 0x28
 80134a0:	af00      	add	r7, sp, #0
 80134a2:	60f8      	str	r0, [r7, #12]
 80134a4:	60b9      	str	r1, [r7, #8]
 80134a6:	607a      	str	r2, [r7, #4]
 80134a8:	603b      	str	r3, [r7, #0]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 80134aa:	2300      	movs	r3, #0
 80134ac:	627b      	str	r3, [r7, #36]	; 0x24

    /* Check for an invalid byte pool pointer.  */
    if (pool_ptr == TX_NULL)
 80134ae:	68fb      	ldr	r3, [r7, #12]
 80134b0:	2b00      	cmp	r3, #0
 80134b2:	d102      	bne.n	80134ba <_txe_byte_allocate+0x1e>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 80134b4:	2302      	movs	r3, #2
 80134b6:	627b      	str	r3, [r7, #36]	; 0x24
 80134b8:	e029      	b.n	801350e <_txe_byte_allocate+0x72>
    }

    /* Now check for invalid pool ID.  */
    else if  (pool_ptr -> tx_byte_pool_id != TX_BYTE_POOL_ID)
 80134ba:	68fb      	ldr	r3, [r7, #12]
 80134bc:	681b      	ldr	r3, [r3, #0]
 80134be:	4a2d      	ldr	r2, [pc, #180]	; (8013574 <_txe_byte_allocate+0xd8>)
 80134c0:	4293      	cmp	r3, r2
 80134c2:	d002      	beq.n	80134ca <_txe_byte_allocate+0x2e>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 80134c4:	2302      	movs	r3, #2
 80134c6:	627b      	str	r3, [r7, #36]	; 0x24
 80134c8:	e021      	b.n	801350e <_txe_byte_allocate+0x72>
    }

    /* Check for an invalid destination for return pointer.  */
    else if (memory_ptr == TX_NULL)
 80134ca:	68bb      	ldr	r3, [r7, #8]
 80134cc:	2b00      	cmp	r3, #0
 80134ce:	d102      	bne.n	80134d6 <_txe_byte_allocate+0x3a>
    {

        /* Null destination pointer, return appropriate error.  */
        status =  TX_PTR_ERROR;
 80134d0:	2303      	movs	r3, #3
 80134d2:	627b      	str	r3, [r7, #36]	; 0x24
 80134d4:	e01b      	b.n	801350e <_txe_byte_allocate+0x72>
    }

    /* Check for an invalid memory size.  */
    else if (memory_size == ((ULONG) 0))
 80134d6:	687b      	ldr	r3, [r7, #4]
 80134d8:	2b00      	cmp	r3, #0
 80134da:	d102      	bne.n	80134e2 <_txe_byte_allocate+0x46>
    {

        /* Error in size, return appropriate error.  */
        status =  TX_SIZE_ERROR;
 80134dc:	2305      	movs	r3, #5
 80134de:	627b      	str	r3, [r7, #36]	; 0x24
 80134e0:	e015      	b.n	801350e <_txe_byte_allocate+0x72>
    }

    /* Determine if the size is greater than the pool size.  */
    else if (memory_size > pool_ptr -> tx_byte_pool_size)
 80134e2:	68fb      	ldr	r3, [r7, #12]
 80134e4:	69db      	ldr	r3, [r3, #28]
 80134e6:	687a      	ldr	r2, [r7, #4]
 80134e8:	429a      	cmp	r2, r3
 80134ea:	d902      	bls.n	80134f2 <_txe_byte_allocate+0x56>
    {

        /* Error in size, return appropriate error.  */
        status =  TX_SIZE_ERROR;
 80134ec:	2305      	movs	r3, #5
 80134ee:	627b      	str	r3, [r7, #36]	; 0x24
 80134f0:	e00d      	b.n	801350e <_txe_byte_allocate+0x72>
    else
    {

        /* Check for a wait option error.  Only threads are allowed any form of
           suspension.  */
        if (wait_option != TX_NO_WAIT)
 80134f2:	683b      	ldr	r3, [r7, #0]
 80134f4:	2b00      	cmp	r3, #0
 80134f6:	d00a      	beq.n	801350e <_txe_byte_allocate+0x72>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80134f8:	f3ef 8305 	mrs	r3, IPSR
 80134fc:	61fb      	str	r3, [r7, #28]
    return(ipsr_value);
 80134fe:	69fa      	ldr	r2, [r7, #28]
        {

            /* Is call from ISR or Initialization?  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8013500:	4b1d      	ldr	r3, [pc, #116]	; (8013578 <_txe_byte_allocate+0xdc>)
 8013502:	681b      	ldr	r3, [r3, #0]
 8013504:	4313      	orrs	r3, r2
 8013506:	2b00      	cmp	r3, #0
 8013508:	d001      	beq.n	801350e <_txe_byte_allocate+0x72>
            {

                /* A non-thread is trying to suspend, return appropriate error code.  */
                status =  TX_WAIT_ERROR;
 801350a:	2304      	movs	r3, #4
 801350c:	627b      	str	r3, [r7, #36]	; 0x24
        }
    }
#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Check for timer execution.  */
    if (status == TX_SUCCESS)
 801350e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013510:	2b00      	cmp	r3, #0
 8013512:	d108      	bne.n	8013526 <_txe_byte_allocate+0x8a>
    {

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(thread_ptr)
 8013514:	4b19      	ldr	r3, [pc, #100]	; (801357c <_txe_byte_allocate+0xe0>)
 8013516:	681b      	ldr	r3, [r3, #0]
 8013518:	623b      	str	r3, [r7, #32]

        /* Check for invalid caller of this function.  First check for a calling thread.  */
        if (thread_ptr == &_tx_timer_thread)
 801351a:	6a3b      	ldr	r3, [r7, #32]
 801351c:	4a18      	ldr	r2, [pc, #96]	; (8013580 <_txe_byte_allocate+0xe4>)
 801351e:	4293      	cmp	r3, r2
 8013520:	d101      	bne.n	8013526 <_txe_byte_allocate+0x8a>
        {

            /* Invalid caller of this function, return appropriate error code.  */
            status =  TX_CALLER_ERROR;
 8013522:	2313      	movs	r3, #19
 8013524:	627b      	str	r3, [r7, #36]	; 0x24
        }
    }
#endif

    /* Is everything still okay?  */
    if (status == TX_SUCCESS)
 8013526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013528:	2b00      	cmp	r3, #0
 801352a:	d114      	bne.n	8013556 <_txe_byte_allocate+0xba>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 801352c:	f3ef 8305 	mrs	r3, IPSR
 8013530:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 8013532:	69ba      	ldr	r2, [r7, #24]
    {

        /* Check for interrupt call.  */
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8013534:	4b10      	ldr	r3, [pc, #64]	; (8013578 <_txe_byte_allocate+0xdc>)
 8013536:	681b      	ldr	r3, [r3, #0]
 8013538:	4313      	orrs	r3, r2
 801353a:	2b00      	cmp	r3, #0
 801353c:	d00b      	beq.n	8013556 <_txe_byte_allocate+0xba>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 801353e:	f3ef 8305 	mrs	r3, IPSR
 8013542:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 8013544:	697a      	ldr	r2, [r7, #20]
        {

            /* Now, make sure the call is from an interrupt and not initialization.  */
            if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 8013546:	4b0c      	ldr	r3, [pc, #48]	; (8013578 <_txe_byte_allocate+0xdc>)
 8013548:	681b      	ldr	r3, [r3, #0]
 801354a:	4313      	orrs	r3, r2
 801354c:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 8013550:	d201      	bcs.n	8013556 <_txe_byte_allocate+0xba>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 8013552:	2313      	movs	r3, #19
 8013554:	627b      	str	r3, [r7, #36]	; 0x24
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8013556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013558:	2b00      	cmp	r3, #0
 801355a:	d106      	bne.n	801356a <_txe_byte_allocate+0xce>
    {

        /* Call actual byte memory allocate function.  */
        status =  _tx_byte_allocate(pool_ptr, memory_ptr, memory_size,  wait_option);
 801355c:	683b      	ldr	r3, [r7, #0]
 801355e:	687a      	ldr	r2, [r7, #4]
 8013560:	68b9      	ldr	r1, [r7, #8]
 8013562:	68f8      	ldr	r0, [r7, #12]
 8013564:	f7fd fc8c 	bl	8010e80 <_tx_byte_allocate>
 8013568:	6278      	str	r0, [r7, #36]	; 0x24
    }

    /* Return completion status.  */
    return(status);
 801356a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801356c:	4618      	mov	r0, r3
 801356e:	3728      	adds	r7, #40	; 0x28
 8013570:	46bd      	mov	sp, r7
 8013572:	bd80      	pop	{r7, pc}
 8013574:	42595445 	.word	0x42595445
 8013578:	2000000c 	.word	0x2000000c
 801357c:	2001c9e8 	.word	0x2001c9e8
 8013580:	2001cb30 	.word	0x2001cb30

08013584 <_txe_byte_pool_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_byte_pool_create(TX_BYTE_POOL *pool_ptr, CHAR *name_ptr, VOID *pool_start, ULONG pool_size, UINT pool_control_block_size)
{
 8013584:	b580      	push	{r7, lr}
 8013586:	b092      	sub	sp, #72	; 0x48
 8013588:	af00      	add	r7, sp, #0
 801358a:	60f8      	str	r0, [r7, #12]
 801358c:	60b9      	str	r1, [r7, #8]
 801358e:	607a      	str	r2, [r7, #4]
 8013590:	603b      	str	r3, [r7, #0]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 8013592:	2300      	movs	r3, #0
 8013594:	647b      	str	r3, [r7, #68]	; 0x44

    /* Check for an invalid byte pool pointer.  */
    if (pool_ptr == TX_NULL)
 8013596:	68fb      	ldr	r3, [r7, #12]
 8013598:	2b00      	cmp	r3, #0
 801359a:	d102      	bne.n	80135a2 <_txe_byte_pool_create+0x1e>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 801359c:	2302      	movs	r3, #2
 801359e:	647b      	str	r3, [r7, #68]	; 0x44
 80135a0:	e075      	b.n	801368e <_txe_byte_pool_create+0x10a>
    }

    /* Now see if the pool control block size is valid.  */
    else if (pool_control_block_size != (sizeof(TX_BYTE_POOL)))
 80135a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80135a4:	2b34      	cmp	r3, #52	; 0x34
 80135a6:	d002      	beq.n	80135ae <_txe_byte_pool_create+0x2a>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 80135a8:	2302      	movs	r3, #2
 80135aa:	647b      	str	r3, [r7, #68]	; 0x44
 80135ac:	e06f      	b.n	801368e <_txe_byte_pool_create+0x10a>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80135ae:	f3ef 8310 	mrs	r3, PRIMASK
 80135b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 80135b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 80135b6:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 80135b8:	b672      	cpsid	i
    return(int_posture);
 80135ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 80135bc:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 80135be:	4b3b      	ldr	r3, [pc, #236]	; (80136ac <_txe_byte_pool_create+0x128>)
 80135c0:	681b      	ldr	r3, [r3, #0]
 80135c2:	3301      	adds	r3, #1
 80135c4:	4a39      	ldr	r2, [pc, #228]	; (80136ac <_txe_byte_pool_create+0x128>)
 80135c6:	6013      	str	r3, [r2, #0]
 80135c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80135ca:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80135cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80135ce:	f383 8810 	msr	PRIMASK, r3
}
 80135d2:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_pool =   _tx_byte_pool_created_ptr;
 80135d4:	4b36      	ldr	r3, [pc, #216]	; (80136b0 <_txe_byte_pool_create+0x12c>)
 80135d6:	681b      	ldr	r3, [r3, #0]
 80135d8:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_byte_pool_created_count; i++)
 80135da:	2300      	movs	r3, #0
 80135dc:	643b      	str	r3, [r7, #64]	; 0x40
 80135de:	e009      	b.n	80135f4 <_txe_byte_pool_create+0x70>
        {

            /* Determine if this byte pool matches the pool in the list.  */
            if (pool_ptr == next_pool)
 80135e0:	68fa      	ldr	r2, [r7, #12]
 80135e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80135e4:	429a      	cmp	r2, r3
 80135e6:	d00b      	beq.n	8013600 <_txe_byte_pool_create+0x7c>
            }
            else
            {

                /* Move to the next pool.  */
                next_pool =  next_pool -> tx_byte_pool_created_next;
 80135e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80135ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80135ec:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_byte_pool_created_count; i++)
 80135ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80135f0:	3301      	adds	r3, #1
 80135f2:	643b      	str	r3, [r7, #64]	; 0x40
 80135f4:	4b2f      	ldr	r3, [pc, #188]	; (80136b4 <_txe_byte_pool_create+0x130>)
 80135f6:	681b      	ldr	r3, [r3, #0]
 80135f8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80135fa:	429a      	cmp	r2, r3
 80135fc:	d3f0      	bcc.n	80135e0 <_txe_byte_pool_create+0x5c>
 80135fe:	e000      	b.n	8013602 <_txe_byte_pool_create+0x7e>
                break;
 8013600:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8013602:	f3ef 8310 	mrs	r3, PRIMASK
 8013606:	623b      	str	r3, [r7, #32]
    return(posture);
 8013608:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 801360a:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 801360c:	b672      	cpsid	i
    return(int_posture);
 801360e:	69fb      	ldr	r3, [r7, #28]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 8013610:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 8013612:	4b26      	ldr	r3, [pc, #152]	; (80136ac <_txe_byte_pool_create+0x128>)
 8013614:	681b      	ldr	r3, [r3, #0]
 8013616:	3b01      	subs	r3, #1
 8013618:	4a24      	ldr	r2, [pc, #144]	; (80136ac <_txe_byte_pool_create+0x128>)
 801361a:	6013      	str	r3, [r2, #0]
 801361c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801361e:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8013620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013622:	f383 8810 	msr	PRIMASK, r3
}
 8013626:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 8013628:	f7ff fa22 	bl	8012a70 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate pool.  */
        if (pool_ptr == next_pool)
 801362c:	68fa      	ldr	r2, [r7, #12]
 801362e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013630:	429a      	cmp	r2, r3
 8013632:	d102      	bne.n	801363a <_txe_byte_pool_create+0xb6>
        {

            /* Pool is already created, return appropriate error code.  */
            status =  TX_POOL_ERROR;
 8013634:	2302      	movs	r3, #2
 8013636:	647b      	str	r3, [r7, #68]	; 0x44
 8013638:	e029      	b.n	801368e <_txe_byte_pool_create+0x10a>
        }

        /* Check for an invalid starting address.  */
        else if (pool_start == TX_NULL)
 801363a:	687b      	ldr	r3, [r7, #4]
 801363c:	2b00      	cmp	r3, #0
 801363e:	d102      	bne.n	8013646 <_txe_byte_pool_create+0xc2>
        {

            /* Null starting address pointer, return appropriate error.  */
            status =  TX_PTR_ERROR;
 8013640:	2303      	movs	r3, #3
 8013642:	647b      	str	r3, [r7, #68]	; 0x44
 8013644:	e023      	b.n	801368e <_txe_byte_pool_create+0x10a>
        }

        /* Check for invalid pool size.  */
        else if (pool_size < TX_BYTE_POOL_MIN)
 8013646:	683b      	ldr	r3, [r7, #0]
 8013648:	2b63      	cmp	r3, #99	; 0x63
 801364a:	d802      	bhi.n	8013652 <_txe_byte_pool_create+0xce>
        {

            /* Pool not big enough, return appropriate error.  */
            status =  TX_SIZE_ERROR;
 801364c:	2305      	movs	r3, #5
 801364e:	647b      	str	r3, [r7, #68]	; 0x44
 8013650:	e01d      	b.n	801368e <_txe_byte_pool_create+0x10a>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 8013652:	4b19      	ldr	r3, [pc, #100]	; (80136b8 <_txe_byte_pool_create+0x134>)
 8013654:	681b      	ldr	r3, [r3, #0]
 8013656:	637b      	str	r3, [r7, #52]	; 0x34

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (thread_ptr == &_tx_timer_thread)
 8013658:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801365a:	4a18      	ldr	r2, [pc, #96]	; (80136bc <_txe_byte_pool_create+0x138>)
 801365c:	4293      	cmp	r3, r2
 801365e:	d101      	bne.n	8013664 <_txe_byte_pool_create+0xe0>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 8013660:	2313      	movs	r3, #19
 8013662:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8013664:	f3ef 8305 	mrs	r3, IPSR
 8013668:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 801366a:	69ba      	ldr	r2, [r7, #24]
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 801366c:	4b14      	ldr	r3, [pc, #80]	; (80136c0 <_txe_byte_pool_create+0x13c>)
 801366e:	681b      	ldr	r3, [r3, #0]
 8013670:	4313      	orrs	r3, r2
 8013672:	2b00      	cmp	r3, #0
 8013674:	d00b      	beq.n	801368e <_txe_byte_pool_create+0x10a>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8013676:	f3ef 8305 	mrs	r3, IPSR
 801367a:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 801367c:	697a      	ldr	r2, [r7, #20]
            {

                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 801367e:	4b10      	ldr	r3, [pc, #64]	; (80136c0 <_txe_byte_pool_create+0x13c>)
 8013680:	681b      	ldr	r3, [r3, #0]
 8013682:	4313      	orrs	r3, r2
 8013684:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 8013688:	d201      	bcs.n	801368e <_txe_byte_pool_create+0x10a>
                {

                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 801368a:	2313      	movs	r3, #19
 801368c:	647b      	str	r3, [r7, #68]	; 0x44
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 801368e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013690:	2b00      	cmp	r3, #0
 8013692:	d106      	bne.n	80136a2 <_txe_byte_pool_create+0x11e>
    {

        /* Call actual byte pool create function.  */
        status =  _tx_byte_pool_create(pool_ptr, name_ptr, pool_start, pool_size);
 8013694:	683b      	ldr	r3, [r7, #0]
 8013696:	687a      	ldr	r2, [r7, #4]
 8013698:	68b9      	ldr	r1, [r7, #8]
 801369a:	68f8      	ldr	r0, [r7, #12]
 801369c:	f7fd fd32 	bl	8011104 <_tx_byte_pool_create>
 80136a0:	6478      	str	r0, [r7, #68]	; 0x44
    }

    /* Return completion status.  */
    return(status);
 80136a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 80136a4:	4618      	mov	r0, r3
 80136a6:	3748      	adds	r7, #72	; 0x48
 80136a8:	46bd      	mov	sp, r7
 80136aa:	bd80      	pop	{r7, pc}
 80136ac:	2001ca80 	.word	0x2001ca80
 80136b0:	2001c9d8 	.word	0x2001c9d8
 80136b4:	2001c9dc 	.word	0x2001c9dc
 80136b8:	2001c9e8 	.word	0x2001c9e8
 80136bc:	2001cb30 	.word	0x2001cb30
 80136c0:	2000000c 	.word	0x2000000c

080136c4 <_txe_mutex_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_mutex_create(TX_MUTEX *mutex_ptr, CHAR *name_ptr, UINT inherit, UINT mutex_control_block_size)
{
 80136c4:	b580      	push	{r7, lr}
 80136c6:	b092      	sub	sp, #72	; 0x48
 80136c8:	af00      	add	r7, sp, #0
 80136ca:	60f8      	str	r0, [r7, #12]
 80136cc:	60b9      	str	r1, [r7, #8]
 80136ce:	607a      	str	r2, [r7, #4]
 80136d0:	603b      	str	r3, [r7, #0]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 80136d2:	2300      	movs	r3, #0
 80136d4:	647b      	str	r3, [r7, #68]	; 0x44

    /* Check for an invalid mutex pointer.  */
    if (mutex_ptr == TX_NULL)
 80136d6:	68fb      	ldr	r3, [r7, #12]
 80136d8:	2b00      	cmp	r3, #0
 80136da:	d102      	bne.n	80136e2 <_txe_mutex_create+0x1e>
    {

        /* Mutex pointer is invalid, return appropriate error code.  */
        status =  TX_MUTEX_ERROR;
 80136dc:	231c      	movs	r3, #28
 80136de:	647b      	str	r3, [r7, #68]	; 0x44
 80136e0:	e053      	b.n	801378a <_txe_mutex_create+0xc6>
    }

    /* Now check to make sure the control block is the correct size.  */
    else if (mutex_control_block_size != (sizeof(TX_MUTEX)))
 80136e2:	683b      	ldr	r3, [r7, #0]
 80136e4:	2b34      	cmp	r3, #52	; 0x34
 80136e6:	d002      	beq.n	80136ee <_txe_mutex_create+0x2a>
    {

        /* Mutex pointer is invalid, return appropriate error code.  */
        status =  TX_MUTEX_ERROR;
 80136e8:	231c      	movs	r3, #28
 80136ea:	647b      	str	r3, [r7, #68]	; 0x44
 80136ec:	e04d      	b.n	801378a <_txe_mutex_create+0xc6>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80136ee:	f3ef 8310 	mrs	r3, PRIMASK
 80136f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 80136f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 80136f6:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 80136f8:	b672      	cpsid	i
    return(int_posture);
 80136fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 80136fc:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 80136fe:	4b3a      	ldr	r3, [pc, #232]	; (80137e8 <_txe_mutex_create+0x124>)
 8013700:	681b      	ldr	r3, [r3, #0]
 8013702:	3301      	adds	r3, #1
 8013704:	4a38      	ldr	r2, [pc, #224]	; (80137e8 <_txe_mutex_create+0x124>)
 8013706:	6013      	str	r3, [r2, #0]
 8013708:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801370a:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801370c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801370e:	f383 8810 	msr	PRIMASK, r3
}
 8013712:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_mutex =   _tx_mutex_created_ptr;
 8013714:	4b35      	ldr	r3, [pc, #212]	; (80137ec <_txe_mutex_create+0x128>)
 8013716:	681b      	ldr	r3, [r3, #0]
 8013718:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_mutex_created_count; i++)
 801371a:	2300      	movs	r3, #0
 801371c:	643b      	str	r3, [r7, #64]	; 0x40
 801371e:	e009      	b.n	8013734 <_txe_mutex_create+0x70>
        {

            /* Determine if this mutex matches the mutex in the list.  */
            if (mutex_ptr == next_mutex)
 8013720:	68fa      	ldr	r2, [r7, #12]
 8013722:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013724:	429a      	cmp	r2, r3
 8013726:	d00b      	beq.n	8013740 <_txe_mutex_create+0x7c>
            }
            else
            {

                /* Move to the next mutex.  */
                next_mutex =  next_mutex -> tx_mutex_created_next;
 8013728:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801372a:	6a1b      	ldr	r3, [r3, #32]
 801372c:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_mutex_created_count; i++)
 801372e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013730:	3301      	adds	r3, #1
 8013732:	643b      	str	r3, [r7, #64]	; 0x40
 8013734:	4b2e      	ldr	r3, [pc, #184]	; (80137f0 <_txe_mutex_create+0x12c>)
 8013736:	681b      	ldr	r3, [r3, #0]
 8013738:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801373a:	429a      	cmp	r2, r3
 801373c:	d3f0      	bcc.n	8013720 <_txe_mutex_create+0x5c>
 801373e:	e000      	b.n	8013742 <_txe_mutex_create+0x7e>
                break;
 8013740:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8013742:	f3ef 8310 	mrs	r3, PRIMASK
 8013746:	623b      	str	r3, [r7, #32]
    return(posture);
 8013748:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 801374a:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 801374c:	b672      	cpsid	i
    return(int_posture);
 801374e:	69fb      	ldr	r3, [r7, #28]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 8013750:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 8013752:	4b25      	ldr	r3, [pc, #148]	; (80137e8 <_txe_mutex_create+0x124>)
 8013754:	681b      	ldr	r3, [r3, #0]
 8013756:	3b01      	subs	r3, #1
 8013758:	4a23      	ldr	r2, [pc, #140]	; (80137e8 <_txe_mutex_create+0x124>)
 801375a:	6013      	str	r3, [r2, #0]
 801375c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801375e:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8013760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013762:	f383 8810 	msr	PRIMASK, r3
}
 8013766:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 8013768:	f7ff f982 	bl	8012a70 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate mutex.  */
        if (mutex_ptr == next_mutex)
 801376c:	68fa      	ldr	r2, [r7, #12]
 801376e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013770:	429a      	cmp	r2, r3
 8013772:	d102      	bne.n	801377a <_txe_mutex_create+0xb6>
        {

            /* Mutex is already created, return appropriate error code.  */
            status =  TX_MUTEX_ERROR;
 8013774:	231c      	movs	r3, #28
 8013776:	647b      	str	r3, [r7, #68]	; 0x44
 8013778:	e007      	b.n	801378a <_txe_mutex_create+0xc6>
        }
        else
        {

            /* Check for a valid inherit option.  */
            if (inherit != TX_INHERIT)
 801377a:	687b      	ldr	r3, [r7, #4]
 801377c:	2b01      	cmp	r3, #1
 801377e:	d004      	beq.n	801378a <_txe_mutex_create+0xc6>
            {

                if (inherit != TX_NO_INHERIT)
 8013780:	687b      	ldr	r3, [r7, #4]
 8013782:	2b00      	cmp	r3, #0
 8013784:	d001      	beq.n	801378a <_txe_mutex_create+0xc6>
                {

                    /* Inherit option is illegal.  */
                    status =  TX_INHERIT_ERROR;
 8013786:	231f      	movs	r3, #31
 8013788:	647b      	str	r3, [r7, #68]	; 0x44
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 801378a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801378c:	2b00      	cmp	r3, #0
 801378e:	d11d      	bne.n	80137cc <_txe_mutex_create+0x108>
    {

#ifndef TX_TIMER_PROCESS_IN_ISR

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(thread_ptr)
 8013790:	4b18      	ldr	r3, [pc, #96]	; (80137f4 <_txe_mutex_create+0x130>)
 8013792:	681b      	ldr	r3, [r3, #0]
 8013794:	637b      	str	r3, [r7, #52]	; 0x34

        /* Check for invalid caller of this function.  First check for a calling thread.  */
        if (thread_ptr == &_tx_timer_thread)
 8013796:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013798:	4a17      	ldr	r2, [pc, #92]	; (80137f8 <_txe_mutex_create+0x134>)
 801379a:	4293      	cmp	r3, r2
 801379c:	d101      	bne.n	80137a2 <_txe_mutex_create+0xde>
        {

            /* Invalid caller of this function, return appropriate error code.  */
            status =  TX_CALLER_ERROR;
 801379e:	2313      	movs	r3, #19
 80137a0:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80137a2:	f3ef 8305 	mrs	r3, IPSR
 80137a6:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 80137a8:	69ba      	ldr	r2, [r7, #24]
        }
#endif

        /* Check for interrupt call.  */
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 80137aa:	4b14      	ldr	r3, [pc, #80]	; (80137fc <_txe_mutex_create+0x138>)
 80137ac:	681b      	ldr	r3, [r3, #0]
 80137ae:	4313      	orrs	r3, r2
 80137b0:	2b00      	cmp	r3, #0
 80137b2:	d00b      	beq.n	80137cc <_txe_mutex_create+0x108>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80137b4:	f3ef 8305 	mrs	r3, IPSR
 80137b8:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 80137ba:	697a      	ldr	r2, [r7, #20]
        {

            /* Now, make sure the call is from an interrupt and not initialization.  */
            if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 80137bc:	4b0f      	ldr	r3, [pc, #60]	; (80137fc <_txe_mutex_create+0x138>)
 80137be:	681b      	ldr	r3, [r3, #0]
 80137c0:	4313      	orrs	r3, r2
 80137c2:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 80137c6:	d201      	bcs.n	80137cc <_txe_mutex_create+0x108>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 80137c8:	2313      	movs	r3, #19
 80137ca:	647b      	str	r3, [r7, #68]	; 0x44
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 80137cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80137ce:	2b00      	cmp	r3, #0
 80137d0:	d105      	bne.n	80137de <_txe_mutex_create+0x11a>
    {

        /* Call actual mutex create function.  */
        status =  _tx_mutex_create(mutex_ptr, name_ptr, inherit);
 80137d2:	687a      	ldr	r2, [r7, #4]
 80137d4:	68b9      	ldr	r1, [r7, #8]
 80137d6:	68f8      	ldr	r0, [r7, #12]
 80137d8:	f7fd ff66 	bl	80116a8 <_tx_mutex_create>
 80137dc:	6478      	str	r0, [r7, #68]	; 0x44
    }

    /* Return completion status.  */
    return(status);
 80137de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 80137e0:	4618      	mov	r0, r3
 80137e2:	3748      	adds	r7, #72	; 0x48
 80137e4:	46bd      	mov	sp, r7
 80137e6:	bd80      	pop	{r7, pc}
 80137e8:	2001ca80 	.word	0x2001ca80
 80137ec:	2001c9c8 	.word	0x2001c9c8
 80137f0:	2001c9cc 	.word	0x2001c9cc
 80137f4:	2001c9e8 	.word	0x2001c9e8
 80137f8:	2001cb30 	.word	0x2001cb30
 80137fc:	2000000c 	.word	0x2000000c

08013800 <_txe_mutex_get>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_mutex_get(TX_MUTEX *mutex_ptr, ULONG wait_option)
{
 8013800:	b580      	push	{r7, lr}
 8013802:	b088      	sub	sp, #32
 8013804:	af00      	add	r7, sp, #0
 8013806:	6078      	str	r0, [r7, #4]
 8013808:	6039      	str	r1, [r7, #0]
TX_THREAD       *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 801380a:	2300      	movs	r3, #0
 801380c:	61fb      	str	r3, [r7, #28]

    /* Check for an invalid mutex pointer.  */
    if (mutex_ptr == TX_NULL)
 801380e:	687b      	ldr	r3, [r7, #4]
 8013810:	2b00      	cmp	r3, #0
 8013812:	d102      	bne.n	801381a <_txe_mutex_get+0x1a>
    {

        /* Mutex pointer is invalid, return appropriate error code.  */
        status =  TX_MUTEX_ERROR;
 8013814:	231c      	movs	r3, #28
 8013816:	61fb      	str	r3, [r7, #28]
 8013818:	e01f      	b.n	801385a <_txe_mutex_get+0x5a>
    }

    /* Now check for a valid mutex ID.  */
    else if (mutex_ptr -> tx_mutex_id != TX_MUTEX_ID)
 801381a:	687b      	ldr	r3, [r7, #4]
 801381c:	681b      	ldr	r3, [r3, #0]
 801381e:	4a21      	ldr	r2, [pc, #132]	; (80138a4 <_txe_mutex_get+0xa4>)
 8013820:	4293      	cmp	r3, r2
 8013822:	d002      	beq.n	801382a <_txe_mutex_get+0x2a>
    {

        /* Mutex pointer is invalid, return appropriate error code.  */
        status =  TX_MUTEX_ERROR;
 8013824:	231c      	movs	r3, #28
 8013826:	61fb      	str	r3, [r7, #28]
 8013828:	e017      	b.n	801385a <_txe_mutex_get+0x5a>
    else
    {

        /* Check for a wait option error.  Only threads are allowed any form of
           suspension.  */
        if (wait_option != TX_NO_WAIT)
 801382a:	683b      	ldr	r3, [r7, #0]
 801382c:	2b00      	cmp	r3, #0
 801382e:	d014      	beq.n	801385a <_txe_mutex_get+0x5a>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8013830:	f3ef 8305 	mrs	r3, IPSR
 8013834:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 8013836:	697a      	ldr	r2, [r7, #20]
        {

            /* Is the call from an ISR or Initialization?  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8013838:	4b1b      	ldr	r3, [pc, #108]	; (80138a8 <_txe_mutex_get+0xa8>)
 801383a:	681b      	ldr	r3, [r3, #0]
 801383c:	4313      	orrs	r3, r2
 801383e:	2b00      	cmp	r3, #0
 8013840:	d002      	beq.n	8013848 <_txe_mutex_get+0x48>
            {

                /* A non-thread is trying to suspend, return appropriate error code.  */
                status =  TX_WAIT_ERROR;
 8013842:	2304      	movs	r3, #4
 8013844:	61fb      	str	r3, [r7, #28]
 8013846:	e008      	b.n	801385a <_txe_mutex_get+0x5a>
#ifndef TX_TIMER_PROCESS_IN_ISR
            else
            {

                /* Pickup thread pointer.  */
                TX_THREAD_GET_CURRENT(current_thread)
 8013848:	4b18      	ldr	r3, [pc, #96]	; (80138ac <_txe_mutex_get+0xac>)
 801384a:	681b      	ldr	r3, [r3, #0]
 801384c:	61bb      	str	r3, [r7, #24]

                /* Is the current thread the timer thread?  */
                if (current_thread == &_tx_timer_thread)
 801384e:	69bb      	ldr	r3, [r7, #24]
 8013850:	4a17      	ldr	r2, [pc, #92]	; (80138b0 <_txe_mutex_get+0xb0>)
 8013852:	4293      	cmp	r3, r2
 8013854:	d101      	bne.n	801385a <_txe_mutex_get+0x5a>
                {

                    /* A non-thread is trying to suspend, return appropriate error code.  */
                    status =  TX_WAIT_ERROR;
 8013856:	2304      	movs	r3, #4
 8013858:	61fb      	str	r3, [r7, #28]
#endif
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 801385a:	69fb      	ldr	r3, [r7, #28]
 801385c:	2b00      	cmp	r3, #0
 801385e:	d114      	bne.n	801388a <_txe_mutex_get+0x8a>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8013860:	f3ef 8305 	mrs	r3, IPSR
 8013864:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 8013866:	693a      	ldr	r2, [r7, #16]
    {

        /* Check for interrupt call.  */
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8013868:	4b0f      	ldr	r3, [pc, #60]	; (80138a8 <_txe_mutex_get+0xa8>)
 801386a:	681b      	ldr	r3, [r3, #0]
 801386c:	4313      	orrs	r3, r2
 801386e:	2b00      	cmp	r3, #0
 8013870:	d00b      	beq.n	801388a <_txe_mutex_get+0x8a>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8013872:	f3ef 8305 	mrs	r3, IPSR
 8013876:	60fb      	str	r3, [r7, #12]
    return(ipsr_value);
 8013878:	68fa      	ldr	r2, [r7, #12]
        {

            /* Now, make sure the call is from an interrupt and not initialization.  */
            if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 801387a:	4b0b      	ldr	r3, [pc, #44]	; (80138a8 <_txe_mutex_get+0xa8>)
 801387c:	681b      	ldr	r3, [r3, #0]
 801387e:	4313      	orrs	r3, r2
 8013880:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 8013884:	d201      	bcs.n	801388a <_txe_mutex_get+0x8a>
            {

                /* Yes, invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 8013886:	2313      	movs	r3, #19
 8013888:	61fb      	str	r3, [r7, #28]
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 801388a:	69fb      	ldr	r3, [r7, #28]
 801388c:	2b00      	cmp	r3, #0
 801388e:	d104      	bne.n	801389a <_txe_mutex_get+0x9a>
    {

        /* Call actual get mutex function.  */
        status =  _tx_mutex_get(mutex_ptr, wait_option);
 8013890:	6839      	ldr	r1, [r7, #0]
 8013892:	6878      	ldr	r0, [r7, #4]
 8013894:	f7fd ff62 	bl	801175c <_tx_mutex_get>
 8013898:	61f8      	str	r0, [r7, #28]
    }

    /* Return completion status.  */
    return(status);
 801389a:	69fb      	ldr	r3, [r7, #28]
}
 801389c:	4618      	mov	r0, r3
 801389e:	3720      	adds	r7, #32
 80138a0:	46bd      	mov	sp, r7
 80138a2:	bd80      	pop	{r7, pc}
 80138a4:	4d555445 	.word	0x4d555445
 80138a8:	2000000c 	.word	0x2000000c
 80138ac:	2001c9e8 	.word	0x2001c9e8
 80138b0:	2001cb30 	.word	0x2001cb30

080138b4 <_txe_mutex_put>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_mutex_put(TX_MUTEX *mutex_ptr)
{
 80138b4:	b580      	push	{r7, lr}
 80138b6:	b086      	sub	sp, #24
 80138b8:	af00      	add	r7, sp, #0
 80138ba:	6078      	str	r0, [r7, #4]

UINT            status;


    /* Default status to success.  */
    status =  TX_SUCCESS;
 80138bc:	2300      	movs	r3, #0
 80138be:	617b      	str	r3, [r7, #20]

    /* Check for an invalid mutex pointer.  */
    if (mutex_ptr == TX_NULL)
 80138c0:	687b      	ldr	r3, [r7, #4]
 80138c2:	2b00      	cmp	r3, #0
 80138c4:	d102      	bne.n	80138cc <_txe_mutex_put+0x18>
    {

        /* Mutex pointer is invalid, return appropriate error code.  */
        status =  TX_MUTEX_ERROR;
 80138c6:	231c      	movs	r3, #28
 80138c8:	617b      	str	r3, [r7, #20]
 80138ca:	e01c      	b.n	8013906 <_txe_mutex_put+0x52>
    }

    /* Now check for invalid mutex ID.  */
    else if (mutex_ptr -> tx_mutex_id != TX_MUTEX_ID)
 80138cc:	687b      	ldr	r3, [r7, #4]
 80138ce:	681b      	ldr	r3, [r3, #0]
 80138d0:	4a13      	ldr	r2, [pc, #76]	; (8013920 <_txe_mutex_put+0x6c>)
 80138d2:	4293      	cmp	r3, r2
 80138d4:	d002      	beq.n	80138dc <_txe_mutex_put+0x28>
    {

        /* Mutex pointer is invalid, return appropriate error code.  */
        status =  TX_MUTEX_ERROR;
 80138d6:	231c      	movs	r3, #28
 80138d8:	617b      	str	r3, [r7, #20]
 80138da:	e014      	b.n	8013906 <_txe_mutex_put+0x52>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80138dc:	f3ef 8305 	mrs	r3, IPSR
 80138e0:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 80138e2:	693a      	ldr	r2, [r7, #16]
    }
    else
    {

        /* Check for interrupt call.  */
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 80138e4:	4b0f      	ldr	r3, [pc, #60]	; (8013924 <_txe_mutex_put+0x70>)
 80138e6:	681b      	ldr	r3, [r3, #0]
 80138e8:	4313      	orrs	r3, r2
 80138ea:	2b00      	cmp	r3, #0
 80138ec:	d00b      	beq.n	8013906 <_txe_mutex_put+0x52>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80138ee:	f3ef 8305 	mrs	r3, IPSR
 80138f2:	60fb      	str	r3, [r7, #12]
    return(ipsr_value);
 80138f4:	68fa      	ldr	r2, [r7, #12]
        {

            /* Now, make sure the call is from an interrupt and not initialization.  */
            if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 80138f6:	4b0b      	ldr	r3, [pc, #44]	; (8013924 <_txe_mutex_put+0x70>)
 80138f8:	681b      	ldr	r3, [r3, #0]
 80138fa:	4313      	orrs	r3, r2
 80138fc:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 8013900:	d201      	bcs.n	8013906 <_txe_mutex_put+0x52>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 8013902:	2313      	movs	r3, #19
 8013904:	617b      	str	r3, [r7, #20]
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8013906:	697b      	ldr	r3, [r7, #20]
 8013908:	2b00      	cmp	r3, #0
 801390a:	d103      	bne.n	8013914 <_txe_mutex_put+0x60>
    {

        /* Call actual put mutex function.  */
        status =  _tx_mutex_put(mutex_ptr);
 801390c:	6878      	ldr	r0, [r7, #4]
 801390e:	f7fe f99d 	bl	8011c4c <_tx_mutex_put>
 8013912:	6178      	str	r0, [r7, #20]
    }

    /* Return completion status.  */
    return(status);
 8013914:	697b      	ldr	r3, [r7, #20]
}
 8013916:	4618      	mov	r0, r3
 8013918:	3718      	adds	r7, #24
 801391a:	46bd      	mov	sp, r7
 801391c:	bd80      	pop	{r7, pc}
 801391e:	bf00      	nop
 8013920:	4d555445 	.word	0x4d555445
 8013924:	2000000c 	.word	0x2000000c

08013928 <_txe_semaphore_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_semaphore_create(TX_SEMAPHORE *semaphore_ptr, CHAR *name_ptr, ULONG initial_count, UINT semaphore_control_block_size)
{
 8013928:	b580      	push	{r7, lr}
 801392a:	b092      	sub	sp, #72	; 0x48
 801392c:	af00      	add	r7, sp, #0
 801392e:	60f8      	str	r0, [r7, #12]
 8013930:	60b9      	str	r1, [r7, #8]
 8013932:	607a      	str	r2, [r7, #4]
 8013934:	603b      	str	r3, [r7, #0]
TX_THREAD           *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 8013936:	2300      	movs	r3, #0
 8013938:	647b      	str	r3, [r7, #68]	; 0x44

    /* Check for an invalid semaphore pointer.  */
    if (semaphore_ptr == TX_NULL)
 801393a:	68fb      	ldr	r3, [r7, #12]
 801393c:	2b00      	cmp	r3, #0
 801393e:	d102      	bne.n	8013946 <_txe_semaphore_create+0x1e>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 8013940:	230c      	movs	r3, #12
 8013942:	647b      	str	r3, [r7, #68]	; 0x44
 8013944:	e054      	b.n	80139f0 <_txe_semaphore_create+0xc8>
    }

    /* Now check for a valid semaphore ID.  */
    else if (semaphore_control_block_size != (sizeof(TX_SEMAPHORE)))
 8013946:	683b      	ldr	r3, [r7, #0]
 8013948:	2b1c      	cmp	r3, #28
 801394a:	d002      	beq.n	8013952 <_txe_semaphore_create+0x2a>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 801394c:	230c      	movs	r3, #12
 801394e:	647b      	str	r3, [r7, #68]	; 0x44
 8013950:	e04e      	b.n	80139f0 <_txe_semaphore_create+0xc8>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8013952:	f3ef 8310 	mrs	r3, PRIMASK
 8013956:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 8013958:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 801395a:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 801395c:	b672      	cpsid	i
    return(int_posture);
 801395e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 8013960:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 8013962:	4b36      	ldr	r3, [pc, #216]	; (8013a3c <_txe_semaphore_create+0x114>)
 8013964:	681b      	ldr	r3, [r3, #0]
 8013966:	3301      	adds	r3, #1
 8013968:	4a34      	ldr	r2, [pc, #208]	; (8013a3c <_txe_semaphore_create+0x114>)
 801396a:	6013      	str	r3, [r2, #0]
 801396c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801396e:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8013970:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013972:	f383 8810 	msr	PRIMASK, r3
}
 8013976:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_semaphore =  _tx_semaphore_created_ptr;
 8013978:	4b31      	ldr	r3, [pc, #196]	; (8013a40 <_txe_semaphore_create+0x118>)
 801397a:	681b      	ldr	r3, [r3, #0]
 801397c:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_semaphore_created_count; i++)
 801397e:	2300      	movs	r3, #0
 8013980:	643b      	str	r3, [r7, #64]	; 0x40
 8013982:	e009      	b.n	8013998 <_txe_semaphore_create+0x70>
        {

            /* Determine if this semaphore matches the current semaphore in the list.  */
            if (semaphore_ptr == next_semaphore)
 8013984:	68fa      	ldr	r2, [r7, #12]
 8013986:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013988:	429a      	cmp	r2, r3
 801398a:	d00b      	beq.n	80139a4 <_txe_semaphore_create+0x7c>
            }
            else
            {

                /* Move to next semaphore.  */
                next_semaphore =  next_semaphore -> tx_semaphore_created_next;
 801398c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801398e:	695b      	ldr	r3, [r3, #20]
 8013990:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_semaphore_created_count; i++)
 8013992:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013994:	3301      	adds	r3, #1
 8013996:	643b      	str	r3, [r7, #64]	; 0x40
 8013998:	4b2a      	ldr	r3, [pc, #168]	; (8013a44 <_txe_semaphore_create+0x11c>)
 801399a:	681b      	ldr	r3, [r3, #0]
 801399c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801399e:	429a      	cmp	r2, r3
 80139a0:	d3f0      	bcc.n	8013984 <_txe_semaphore_create+0x5c>
 80139a2:	e000      	b.n	80139a6 <_txe_semaphore_create+0x7e>
                break;
 80139a4:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80139a6:	f3ef 8310 	mrs	r3, PRIMASK
 80139aa:	623b      	str	r3, [r7, #32]
    return(posture);
 80139ac:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 80139ae:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 80139b0:	b672      	cpsid	i
    return(int_posture);
 80139b2:	69fb      	ldr	r3, [r7, #28]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 80139b4:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 80139b6:	4b21      	ldr	r3, [pc, #132]	; (8013a3c <_txe_semaphore_create+0x114>)
 80139b8:	681b      	ldr	r3, [r3, #0]
 80139ba:	3b01      	subs	r3, #1
 80139bc:	4a1f      	ldr	r2, [pc, #124]	; (8013a3c <_txe_semaphore_create+0x114>)
 80139be:	6013      	str	r3, [r2, #0]
 80139c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80139c2:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80139c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80139c6:	f383 8810 	msr	PRIMASK, r3
}
 80139ca:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 80139cc:	f7ff f850 	bl	8012a70 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate semaphore.  */
        if (semaphore_ptr == next_semaphore)
 80139d0:	68fa      	ldr	r2, [r7, #12]
 80139d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80139d4:	429a      	cmp	r2, r3
 80139d6:	d102      	bne.n	80139de <_txe_semaphore_create+0xb6>
        {

            /* Semaphore is already created, return appropriate error code.  */
            status =  TX_SEMAPHORE_ERROR;
 80139d8:	230c      	movs	r3, #12
 80139da:	647b      	str	r3, [r7, #68]	; 0x44
 80139dc:	e008      	b.n	80139f0 <_txe_semaphore_create+0xc8>
#ifndef TX_TIMER_PROCESS_IN_ISR
        else
        {

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 80139de:	4b1a      	ldr	r3, [pc, #104]	; (8013a48 <_txe_semaphore_create+0x120>)
 80139e0:	681b      	ldr	r3, [r3, #0]
 80139e2:	637b      	str	r3, [r7, #52]	; 0x34

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (thread_ptr == &_tx_timer_thread)
 80139e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80139e6:	4a19      	ldr	r2, [pc, #100]	; (8013a4c <_txe_semaphore_create+0x124>)
 80139e8:	4293      	cmp	r3, r2
 80139ea:	d101      	bne.n	80139f0 <_txe_semaphore_create+0xc8>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 80139ec:	2313      	movs	r3, #19
 80139ee:	647b      	str	r3, [r7, #68]	; 0x44
        }
#endif
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 80139f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80139f2:	2b00      	cmp	r3, #0
 80139f4:	d114      	bne.n	8013a20 <_txe_semaphore_create+0xf8>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80139f6:	f3ef 8305 	mrs	r3, IPSR
 80139fa:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 80139fc:	69ba      	ldr	r2, [r7, #24]
    {

        /* Check for interrupt call.  */
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 80139fe:	4b14      	ldr	r3, [pc, #80]	; (8013a50 <_txe_semaphore_create+0x128>)
 8013a00:	681b      	ldr	r3, [r3, #0]
 8013a02:	4313      	orrs	r3, r2
 8013a04:	2b00      	cmp	r3, #0
 8013a06:	d00b      	beq.n	8013a20 <_txe_semaphore_create+0xf8>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8013a08:	f3ef 8305 	mrs	r3, IPSR
 8013a0c:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 8013a0e:	697a      	ldr	r2, [r7, #20]
        {

            /* Now, make sure the call is from an interrupt and not initialization.  */
            if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 8013a10:	4b0f      	ldr	r3, [pc, #60]	; (8013a50 <_txe_semaphore_create+0x128>)
 8013a12:	681b      	ldr	r3, [r3, #0]
 8013a14:	4313      	orrs	r3, r2
 8013a16:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 8013a1a:	d201      	bcs.n	8013a20 <_txe_semaphore_create+0xf8>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 8013a1c:	2313      	movs	r3, #19
 8013a1e:	647b      	str	r3, [r7, #68]	; 0x44
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8013a20:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013a22:	2b00      	cmp	r3, #0
 8013a24:	d105      	bne.n	8013a32 <_txe_semaphore_create+0x10a>
    {

        /* Call actual semaphore create function.  */
        status =  _tx_semaphore_create(semaphore_ptr, name_ptr, initial_count);
 8013a26:	687a      	ldr	r2, [r7, #4]
 8013a28:	68b9      	ldr	r1, [r7, #8]
 8013a2a:	68f8      	ldr	r0, [r7, #12]
 8013a2c:	f7fe fbb0 	bl	8012190 <_tx_semaphore_create>
 8013a30:	6478      	str	r0, [r7, #68]	; 0x44
    }

    /* Return completion status.  */
    return(status);
 8013a32:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8013a34:	4618      	mov	r0, r3
 8013a36:	3748      	adds	r7, #72	; 0x48
 8013a38:	46bd      	mov	sp, r7
 8013a3a:	bd80      	pop	{r7, pc}
 8013a3c:	2001ca80 	.word	0x2001ca80
 8013a40:	2001c9b0 	.word	0x2001c9b0
 8013a44:	2001c9b4 	.word	0x2001c9b4
 8013a48:	2001c9e8 	.word	0x2001c9e8
 8013a4c:	2001cb30 	.word	0x2001cb30
 8013a50:	2000000c 	.word	0x2000000c

08013a54 <_txe_semaphore_get>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_semaphore_get(TX_SEMAPHORE *semaphore_ptr, ULONG wait_option)
{
 8013a54:	b580      	push	{r7, lr}
 8013a56:	b086      	sub	sp, #24
 8013a58:	af00      	add	r7, sp, #0
 8013a5a:	6078      	str	r0, [r7, #4]
 8013a5c:	6039      	str	r1, [r7, #0]
TX_THREAD   *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 8013a5e:	2300      	movs	r3, #0
 8013a60:	617b      	str	r3, [r7, #20]

    /* Check for an invalid semaphore pointer.  */
    if (semaphore_ptr == TX_NULL)
 8013a62:	687b      	ldr	r3, [r7, #4]
 8013a64:	2b00      	cmp	r3, #0
 8013a66:	d102      	bne.n	8013a6e <_txe_semaphore_get+0x1a>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 8013a68:	230c      	movs	r3, #12
 8013a6a:	617b      	str	r3, [r7, #20]
 8013a6c:	e01f      	b.n	8013aae <_txe_semaphore_get+0x5a>
    }

    /* Now check for invalid semaphore ID.  */
    else if (semaphore_ptr -> tx_semaphore_id != TX_SEMAPHORE_ID)
 8013a6e:	687b      	ldr	r3, [r7, #4]
 8013a70:	681b      	ldr	r3, [r3, #0]
 8013a72:	4a15      	ldr	r2, [pc, #84]	; (8013ac8 <_txe_semaphore_get+0x74>)
 8013a74:	4293      	cmp	r3, r2
 8013a76:	d002      	beq.n	8013a7e <_txe_semaphore_get+0x2a>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 8013a78:	230c      	movs	r3, #12
 8013a7a:	617b      	str	r3, [r7, #20]
 8013a7c:	e017      	b.n	8013aae <_txe_semaphore_get+0x5a>
    else
    {

        /* Check for a wait option error.  Only threads are allowed any form of
           suspension.  */
        if (wait_option != TX_NO_WAIT)
 8013a7e:	683b      	ldr	r3, [r7, #0]
 8013a80:	2b00      	cmp	r3, #0
 8013a82:	d014      	beq.n	8013aae <_txe_semaphore_get+0x5a>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8013a84:	f3ef 8305 	mrs	r3, IPSR
 8013a88:	60fb      	str	r3, [r7, #12]
    return(ipsr_value);
 8013a8a:	68fa      	ldr	r2, [r7, #12]
        {

            /* Is the call from an ISR or Initialization?  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8013a8c:	4b0f      	ldr	r3, [pc, #60]	; (8013acc <_txe_semaphore_get+0x78>)
 8013a8e:	681b      	ldr	r3, [r3, #0]
 8013a90:	4313      	orrs	r3, r2
 8013a92:	2b00      	cmp	r3, #0
 8013a94:	d002      	beq.n	8013a9c <_txe_semaphore_get+0x48>
            {

                /* A non-thread is trying to suspend, return appropriate error code.  */
                status =  TX_WAIT_ERROR;
 8013a96:	2304      	movs	r3, #4
 8013a98:	617b      	str	r3, [r7, #20]
 8013a9a:	e008      	b.n	8013aae <_txe_semaphore_get+0x5a>
#ifndef TX_TIMER_PROCESS_IN_ISR
            else
            {

                /* Pickup thread pointer.  */
                TX_THREAD_GET_CURRENT(current_thread)
 8013a9c:	4b0c      	ldr	r3, [pc, #48]	; (8013ad0 <_txe_semaphore_get+0x7c>)
 8013a9e:	681b      	ldr	r3, [r3, #0]
 8013aa0:	613b      	str	r3, [r7, #16]

                /* Is the current thread the timer thread?  */
                if (current_thread == &_tx_timer_thread)
 8013aa2:	693b      	ldr	r3, [r7, #16]
 8013aa4:	4a0b      	ldr	r2, [pc, #44]	; (8013ad4 <_txe_semaphore_get+0x80>)
 8013aa6:	4293      	cmp	r3, r2
 8013aa8:	d101      	bne.n	8013aae <_txe_semaphore_get+0x5a>
                {

                    /* A non-thread is trying to suspend, return appropriate error code.  */
                    status =  TX_WAIT_ERROR;
 8013aaa:	2304      	movs	r3, #4
 8013aac:	617b      	str	r3, [r7, #20]
#endif
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8013aae:	697b      	ldr	r3, [r7, #20]
 8013ab0:	2b00      	cmp	r3, #0
 8013ab2:	d104      	bne.n	8013abe <_txe_semaphore_get+0x6a>
    {

        /* Call actual get semaphore function.  */
        status =  _tx_semaphore_get(semaphore_ptr, wait_option);
 8013ab4:	6839      	ldr	r1, [r7, #0]
 8013ab6:	6878      	ldr	r0, [r7, #4]
 8013ab8:	f7fe fbbc 	bl	8012234 <_tx_semaphore_get>
 8013abc:	6178      	str	r0, [r7, #20]
    }

    /* Return completion status.  */
    return(status);
 8013abe:	697b      	ldr	r3, [r7, #20]
}
 8013ac0:	4618      	mov	r0, r3
 8013ac2:	3718      	adds	r7, #24
 8013ac4:	46bd      	mov	sp, r7
 8013ac6:	bd80      	pop	{r7, pc}
 8013ac8:	53454d41 	.word	0x53454d41
 8013acc:	2000000c 	.word	0x2000000c
 8013ad0:	2001c9e8 	.word	0x2001c9e8
 8013ad4:	2001cb30 	.word	0x2001cb30

08013ad8 <_txe_semaphore_put>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_semaphore_put(TX_SEMAPHORE *semaphore_ptr)
{
 8013ad8:	b580      	push	{r7, lr}
 8013ada:	b084      	sub	sp, #16
 8013adc:	af00      	add	r7, sp, #0
 8013ade:	6078      	str	r0, [r7, #4]

UINT        status;


    /* Check for an invalid semaphore pointer.  */
    if (semaphore_ptr == TX_NULL)
 8013ae0:	687b      	ldr	r3, [r7, #4]
 8013ae2:	2b00      	cmp	r3, #0
 8013ae4:	d102      	bne.n	8013aec <_txe_semaphore_put+0x14>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 8013ae6:	230c      	movs	r3, #12
 8013ae8:	60fb      	str	r3, [r7, #12]
 8013aea:	e00b      	b.n	8013b04 <_txe_semaphore_put+0x2c>
    }

    /* Now check for invalid semaphore ID.  */
    else if (semaphore_ptr -> tx_semaphore_id != TX_SEMAPHORE_ID)
 8013aec:	687b      	ldr	r3, [r7, #4]
 8013aee:	681b      	ldr	r3, [r3, #0]
 8013af0:	4a07      	ldr	r2, [pc, #28]	; (8013b10 <_txe_semaphore_put+0x38>)
 8013af2:	4293      	cmp	r3, r2
 8013af4:	d002      	beq.n	8013afc <_txe_semaphore_put+0x24>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 8013af6:	230c      	movs	r3, #12
 8013af8:	60fb      	str	r3, [r7, #12]
 8013afa:	e003      	b.n	8013b04 <_txe_semaphore_put+0x2c>
    }
    else
    {

        /* Call actual put semaphore function.  */
        status =  _tx_semaphore_put(semaphore_ptr);
 8013afc:	6878      	ldr	r0, [r7, #4]
 8013afe:	f7fe fc2b 	bl	8012358 <_tx_semaphore_put>
 8013b02:	60f8      	str	r0, [r7, #12]
    }

    /* Return completion status.  */
    return(status);
 8013b04:	68fb      	ldr	r3, [r7, #12]
}
 8013b06:	4618      	mov	r0, r3
 8013b08:	3710      	adds	r7, #16
 8013b0a:	46bd      	mov	sp, r7
 8013b0c:	bd80      	pop	{r7, pc}
 8013b0e:	bf00      	nop
 8013b10:	53454d41 	.word	0x53454d41

08013b14 <_txe_thread_create>:
UINT    _txe_thread_create(TX_THREAD *thread_ptr, CHAR *name_ptr,
                VOID (*entry_function)(ULONG id), ULONG entry_input,
                VOID *stack_start, ULONG stack_size,
                UINT priority, UINT preempt_threshold,
                ULONG time_slice, UINT auto_start, UINT thread_control_block_size)
{
 8013b14:	b580      	push	{r7, lr}
 8013b16:	b09a      	sub	sp, #104	; 0x68
 8013b18:	af06      	add	r7, sp, #24
 8013b1a:	60f8      	str	r0, [r7, #12]
 8013b1c:	60b9      	str	r1, [r7, #8]
 8013b1e:	607a      	str	r2, [r7, #4]
 8013b20:	603b      	str	r3, [r7, #0]
TX_THREAD       *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 8013b22:	2300      	movs	r3, #0
 8013b24:	64fb      	str	r3, [r7, #76]	; 0x4c

    /* Check for an invalid thread pointer.  */
    if (thread_ptr == TX_NULL)
 8013b26:	68fb      	ldr	r3, [r7, #12]
 8013b28:	2b00      	cmp	r3, #0
 8013b2a:	d102      	bne.n	8013b32 <_txe_thread_create+0x1e>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 8013b2c:	230e      	movs	r3, #14
 8013b2e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8013b30:	e0bb      	b.n	8013caa <_txe_thread_create+0x196>
    }

    /* Now check for invalid thread control block size.  */
    else if (thread_control_block_size != (sizeof(TX_THREAD)))
 8013b32:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8013b34:	2bb0      	cmp	r3, #176	; 0xb0
 8013b36:	d002      	beq.n	8013b3e <_txe_thread_create+0x2a>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 8013b38:	230e      	movs	r3, #14
 8013b3a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8013b3c:	e0b5      	b.n	8013caa <_txe_thread_create+0x196>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8013b3e:	f3ef 8310 	mrs	r3, PRIMASK
 8013b42:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 8013b44:	6abb      	ldr	r3, [r7, #40]	; 0x28
    int_posture = __get_interrupt_posture();
 8013b46:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 8013b48:	b672      	cpsid	i
    return(int_posture);
 8013b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 8013b4c:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 8013b4e:	4b64      	ldr	r3, [pc, #400]	; (8013ce0 <_txe_thread_create+0x1cc>)
 8013b50:	681b      	ldr	r3, [r3, #0]
 8013b52:	3301      	adds	r3, #1
 8013b54:	4a62      	ldr	r2, [pc, #392]	; (8013ce0 <_txe_thread_create+0x1cc>)
 8013b56:	6013      	str	r3, [r2, #0]
 8013b58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013b5a:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8013b5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013b5e:	f383 8810 	msr	PRIMASK, r3
}
 8013b62:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        break_flag =   TX_FALSE;
 8013b64:	2300      	movs	r3, #0
 8013b66:	64bb      	str	r3, [r7, #72]	; 0x48
        next_thread =  _tx_thread_created_ptr;
 8013b68:	4b5e      	ldr	r3, [pc, #376]	; (8013ce4 <_txe_thread_create+0x1d0>)
 8013b6a:	681b      	ldr	r3, [r3, #0]
 8013b6c:	643b      	str	r3, [r7, #64]	; 0x40
        work_ptr =     TX_VOID_TO_UCHAR_POINTER_CONVERT(stack_start);
 8013b6e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8013b70:	63bb      	str	r3, [r7, #56]	; 0x38
        work_ptr =     TX_UCHAR_POINTER_ADD(work_ptr, (stack_size - ((ULONG) 1)));
 8013b72:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8013b74:	3b01      	subs	r3, #1
 8013b76:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013b78:	4413      	add	r3, r2
 8013b7a:	63bb      	str	r3, [r7, #56]	; 0x38
        stack_end =    TX_UCHAR_TO_VOID_POINTER_CONVERT(work_ptr);
 8013b7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013b7e:	637b      	str	r3, [r7, #52]	; 0x34
        for (i = ((ULONG) 0); i < _tx_thread_created_count; i++)
 8013b80:	2300      	movs	r3, #0
 8013b82:	647b      	str	r3, [r7, #68]	; 0x44
 8013b84:	e02b      	b.n	8013bde <_txe_thread_create+0xca>
        {

            /* Determine if this thread matches the thread in the list.  */
            if (thread_ptr == next_thread)
 8013b86:	68fa      	ldr	r2, [r7, #12]
 8013b88:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013b8a:	429a      	cmp	r2, r3
 8013b8c:	d101      	bne.n	8013b92 <_txe_thread_create+0x7e>
            {

                /* Set the break flag.  */
                break_flag =  TX_TRUE;
 8013b8e:	2301      	movs	r3, #1
 8013b90:	64bb      	str	r3, [r7, #72]	; 0x48
            }

            /* Determine if we need to break the loop.  */
            if (break_flag == TX_TRUE)
 8013b92:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013b94:	2b01      	cmp	r3, #1
 8013b96:	d028      	beq.n	8013bea <_txe_thread_create+0xd6>
                /* Yes, break out of the loop.  */
                break;
            }

            /* Check the stack pointer to see if it overlaps with this thread's stack.  */
            if (stack_start >= next_thread -> tx_thread_stack_start)
 8013b98:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013b9a:	68db      	ldr	r3, [r3, #12]
 8013b9c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8013b9e:	429a      	cmp	r2, r3
 8013ba0:	d308      	bcc.n	8013bb4 <_txe_thread_create+0xa0>
            {

                if (stack_start < next_thread -> tx_thread_stack_end)
 8013ba2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013ba4:	691b      	ldr	r3, [r3, #16]
 8013ba6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8013ba8:	429a      	cmp	r2, r3
 8013baa:	d203      	bcs.n	8013bb4 <_txe_thread_create+0xa0>
                {

                    /* This stack overlaps with an existing thread, clear the stack pointer to
                       force a stack error below.  */
                    stack_start =  TX_NULL;
 8013bac:	2300      	movs	r3, #0
 8013bae:	65bb      	str	r3, [r7, #88]	; 0x58

                    /* Set the break flag.  */
                    break_flag =  TX_TRUE;
 8013bb0:	2301      	movs	r3, #1
 8013bb2:	64bb      	str	r3, [r7, #72]	; 0x48
                }
            }

            /* Check the end of the stack to see if it is inside this thread's stack area as well.  */
            if (stack_end >= next_thread -> tx_thread_stack_start)
 8013bb4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013bb6:	68db      	ldr	r3, [r3, #12]
 8013bb8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013bba:	429a      	cmp	r2, r3
 8013bbc:	d308      	bcc.n	8013bd0 <_txe_thread_create+0xbc>
            {

                if (stack_end < next_thread -> tx_thread_stack_end)
 8013bbe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013bc0:	691b      	ldr	r3, [r3, #16]
 8013bc2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013bc4:	429a      	cmp	r2, r3
 8013bc6:	d203      	bcs.n	8013bd0 <_txe_thread_create+0xbc>
                {

                    /* This stack overlaps with an existing thread, clear the stack pointer to
                       force a stack error below.  */
                    stack_start =  TX_NULL;
 8013bc8:	2300      	movs	r3, #0
 8013bca:	65bb      	str	r3, [r7, #88]	; 0x58

                    /* Set the break flag.  */
                    break_flag =  TX_TRUE;
 8013bcc:	2301      	movs	r3, #1
 8013bce:	64bb      	str	r3, [r7, #72]	; 0x48
                }
            }

            /* Move to the next thread.  */
            next_thread =  next_thread -> tx_thread_created_next;
 8013bd0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013bd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8013bd6:	643b      	str	r3, [r7, #64]	; 0x40
        for (i = ((ULONG) 0); i < _tx_thread_created_count; i++)
 8013bd8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013bda:	3301      	adds	r3, #1
 8013bdc:	647b      	str	r3, [r7, #68]	; 0x44
 8013bde:	4b42      	ldr	r3, [pc, #264]	; (8013ce8 <_txe_thread_create+0x1d4>)
 8013be0:	681b      	ldr	r3, [r3, #0]
 8013be2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8013be4:	429a      	cmp	r2, r3
 8013be6:	d3ce      	bcc.n	8013b86 <_txe_thread_create+0x72>
 8013be8:	e000      	b.n	8013bec <_txe_thread_create+0xd8>
                break;
 8013bea:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8013bec:	f3ef 8310 	mrs	r3, PRIMASK
 8013bf0:	61fb      	str	r3, [r7, #28]
    return(posture);
 8013bf2:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 8013bf4:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 8013bf6:	b672      	cpsid	i
    return(int_posture);
 8013bf8:	69bb      	ldr	r3, [r7, #24]
        }

        /* Disable interrupts.  */
        TX_DISABLE
 8013bfa:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 8013bfc:	4b38      	ldr	r3, [pc, #224]	; (8013ce0 <_txe_thread_create+0x1cc>)
 8013bfe:	681b      	ldr	r3, [r3, #0]
 8013c00:	3b01      	subs	r3, #1
 8013c02:	4a37      	ldr	r2, [pc, #220]	; (8013ce0 <_txe_thread_create+0x1cc>)
 8013c04:	6013      	str	r3, [r2, #0]
 8013c06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013c08:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8013c0a:	6a3b      	ldr	r3, [r7, #32]
 8013c0c:	f383 8810 	msr	PRIMASK, r3
}
 8013c10:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 8013c12:	f7fe ff2d 	bl	8012a70 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate thread.  */
        if (thread_ptr == next_thread)
 8013c16:	68fa      	ldr	r2, [r7, #12]
 8013c18:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013c1a:	429a      	cmp	r2, r3
 8013c1c:	d102      	bne.n	8013c24 <_txe_thread_create+0x110>
        {

            /* Thread is already created, return appropriate error code.  */
            status =  TX_THREAD_ERROR;
 8013c1e:	230e      	movs	r3, #14
 8013c20:	64fb      	str	r3, [r7, #76]	; 0x4c
 8013c22:	e042      	b.n	8013caa <_txe_thread_create+0x196>
        }

        /* Check for invalid starting address of stack.  */
        else if (stack_start == TX_NULL)
 8013c24:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8013c26:	2b00      	cmp	r3, #0
 8013c28:	d102      	bne.n	8013c30 <_txe_thread_create+0x11c>
        {

            /* Invalid stack or entry point, return appropriate error code.  */
            status =  TX_PTR_ERROR;
 8013c2a:	2303      	movs	r3, #3
 8013c2c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8013c2e:	e03c      	b.n	8013caa <_txe_thread_create+0x196>
        }

        /* Check for invalid thread entry point.  */
        else if (entry_function == TX_NULL)
 8013c30:	687b      	ldr	r3, [r7, #4]
 8013c32:	2b00      	cmp	r3, #0
 8013c34:	d102      	bne.n	8013c3c <_txe_thread_create+0x128>
        {

            /* Invalid stack or entry point, return appropriate error code.  */
            status =  TX_PTR_ERROR;
 8013c36:	2303      	movs	r3, #3
 8013c38:	64fb      	str	r3, [r7, #76]	; 0x4c
 8013c3a:	e036      	b.n	8013caa <_txe_thread_create+0x196>
        }

        /* Check the stack size.  */
        else if (stack_size < ((ULONG) TX_MINIMUM_STACK))
 8013c3c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8013c3e:	2bc7      	cmp	r3, #199	; 0xc7
 8013c40:	d802      	bhi.n	8013c48 <_txe_thread_create+0x134>
        {

            /* Stack is not big enough, return appropriate error code.  */
            status =  TX_SIZE_ERROR;
 8013c42:	2305      	movs	r3, #5
 8013c44:	64fb      	str	r3, [r7, #76]	; 0x4c
 8013c46:	e030      	b.n	8013caa <_txe_thread_create+0x196>
        }

        /* Check the priority specified.  */
        else if (priority >= ((UINT) TX_MAX_PRIORITIES))
 8013c48:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8013c4a:	2b1f      	cmp	r3, #31
 8013c4c:	d902      	bls.n	8013c54 <_txe_thread_create+0x140>
        {

            /* Invalid priority selected, return appropriate error code.  */
            status =  TX_PRIORITY_ERROR;
 8013c4e:	230f      	movs	r3, #15
 8013c50:	64fb      	str	r3, [r7, #76]	; 0x4c
 8013c52:	e02a      	b.n	8013caa <_txe_thread_create+0x196>
        }

        /* Check preemption threshold. */
        else if (preempt_threshold > priority)
 8013c54:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8013c56:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8013c58:	429a      	cmp	r2, r3
 8013c5a:	d902      	bls.n	8013c62 <_txe_thread_create+0x14e>
        {

            /* Invalid preempt threshold, return appropriate error code.  */
            status =  TX_THRESH_ERROR;
 8013c5c:	2318      	movs	r3, #24
 8013c5e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8013c60:	e023      	b.n	8013caa <_txe_thread_create+0x196>
        }

        /* Check the start selection.  */
        else if (auto_start > TX_AUTO_START)
 8013c62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8013c64:	2b01      	cmp	r3, #1
 8013c66:	d902      	bls.n	8013c6e <_txe_thread_create+0x15a>
        {

            /* Invalid auto start selection, return appropriate error code.  */
            status =  TX_START_ERROR;
 8013c68:	2310      	movs	r3, #16
 8013c6a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8013c6c:	e01d      	b.n	8013caa <_txe_thread_create+0x196>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(current_thread)
 8013c6e:	4b1f      	ldr	r3, [pc, #124]	; (8013cec <_txe_thread_create+0x1d8>)
 8013c70:	681b      	ldr	r3, [r3, #0]
 8013c72:	633b      	str	r3, [r7, #48]	; 0x30

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (current_thread == &_tx_timer_thread)
 8013c74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013c76:	4a1e      	ldr	r2, [pc, #120]	; (8013cf0 <_txe_thread_create+0x1dc>)
 8013c78:	4293      	cmp	r3, r2
 8013c7a:	d101      	bne.n	8013c80 <_txe_thread_create+0x16c>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 8013c7c:	2313      	movs	r3, #19
 8013c7e:	64fb      	str	r3, [r7, #76]	; 0x4c
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8013c80:	f3ef 8305 	mrs	r3, IPSR
 8013c84:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 8013c86:	697a      	ldr	r2, [r7, #20]
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8013c88:	4b1a      	ldr	r3, [pc, #104]	; (8013cf4 <_txe_thread_create+0x1e0>)
 8013c8a:	681b      	ldr	r3, [r3, #0]
 8013c8c:	4313      	orrs	r3, r2
 8013c8e:	2b00      	cmp	r3, #0
 8013c90:	d00b      	beq.n	8013caa <_txe_thread_create+0x196>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8013c92:	f3ef 8305 	mrs	r3, IPSR
 8013c96:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 8013c98:	693a      	ldr	r2, [r7, #16]
            {

                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 8013c9a:	4b16      	ldr	r3, [pc, #88]	; (8013cf4 <_txe_thread_create+0x1e0>)
 8013c9c:	681b      	ldr	r3, [r3, #0]
 8013c9e:	4313      	orrs	r3, r2
 8013ca0:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 8013ca4:	d201      	bcs.n	8013caa <_txe_thread_create+0x196>
                {

                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 8013ca6:	2313      	movs	r3, #19
 8013ca8:	64fb      	str	r3, [r7, #76]	; 0x4c
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8013caa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013cac:	2b00      	cmp	r3, #0
 8013cae:	d112      	bne.n	8013cd6 <_txe_thread_create+0x1c2>
    {

        /* Call actual thread create function.  */
        status =  _tx_thread_create(thread_ptr, name_ptr, entry_function, entry_input,
 8013cb0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8013cb2:	9305      	str	r3, [sp, #20]
 8013cb4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8013cb6:	9304      	str	r3, [sp, #16]
 8013cb8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8013cba:	9303      	str	r3, [sp, #12]
 8013cbc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8013cbe:	9302      	str	r3, [sp, #8]
 8013cc0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8013cc2:	9301      	str	r3, [sp, #4]
 8013cc4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8013cc6:	9300      	str	r3, [sp, #0]
 8013cc8:	683b      	ldr	r3, [r7, #0]
 8013cca:	687a      	ldr	r2, [r7, #4]
 8013ccc:	68b9      	ldr	r1, [r7, #8]
 8013cce:	68f8      	ldr	r0, [r7, #12]
 8013cd0:	f7fe fb9a 	bl	8012408 <_tx_thread_create>
 8013cd4:	64f8      	str	r0, [r7, #76]	; 0x4c
                        stack_start, stack_size, priority, preempt_threshold,
                        time_slice, auto_start);
    }

    /* Return completion status.  */
    return(status);
 8013cd6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 8013cd8:	4618      	mov	r0, r3
 8013cda:	3750      	adds	r7, #80	; 0x50
 8013cdc:	46bd      	mov	sp, r7
 8013cde:	bd80      	pop	{r7, pc}
 8013ce0:	2001ca80 	.word	0x2001ca80
 8013ce4:	2001c9f0 	.word	0x2001c9f0
 8013ce8:	2001c9f4 	.word	0x2001c9f4
 8013cec:	2001c9e8 	.word	0x2001c9e8
 8013cf0:	2001cb30 	.word	0x2001cb30
 8013cf4:	2000000c 	.word	0x2000000c

08013cf8 <_txe_thread_relinquish>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _txe_thread_relinquish(VOID)
{
 8013cf8:	b580      	push	{r7, lr}
 8013cfa:	b082      	sub	sp, #8
 8013cfc:	af00      	add	r7, sp, #0

TX_THREAD   *current_thread;


    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 8013cfe:	4b0a      	ldr	r3, [pc, #40]	; (8013d28 <_txe_thread_relinquish+0x30>)
 8013d00:	681b      	ldr	r3, [r3, #0]
 8013d02:	607b      	str	r3, [r7, #4]

    /* Make sure a thread is executing.  */
    if (current_thread != TX_NULL)
 8013d04:	687b      	ldr	r3, [r7, #4]
 8013d06:	2b00      	cmp	r3, #0
 8013d08:	d00a      	beq.n	8013d20 <_txe_thread_relinquish+0x28>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8013d0a:	f3ef 8305 	mrs	r3, IPSR
 8013d0e:	603b      	str	r3, [r7, #0]
    return(ipsr_value);
 8013d10:	683a      	ldr	r2, [r7, #0]
    {

        /* Now make sure the call is not from an ISR or Initialization.  */
        if (TX_THREAD_GET_SYSTEM_STATE() == ((ULONG) 0))
 8013d12:	4b06      	ldr	r3, [pc, #24]	; (8013d2c <_txe_thread_relinquish+0x34>)
 8013d14:	681b      	ldr	r3, [r3, #0]
 8013d16:	4313      	orrs	r3, r2
 8013d18:	2b00      	cmp	r3, #0
 8013d1a:	d101      	bne.n	8013d20 <_txe_thread_relinquish+0x28>
        {

            /* Okay to call the real relinquish function.  */
            _tx_thread_relinquish();
 8013d1c:	f7fe fca6 	bl	801266c <_tx_thread_relinquish>
        }
    }
}
 8013d20:	bf00      	nop
 8013d22:	3708      	adds	r7, #8
 8013d24:	46bd      	mov	sp, r7
 8013d26:	bd80      	pop	{r7, pc}
 8013d28:	2001c9e8 	.word	0x2001c9e8
 8013d2c:	2000000c 	.word	0x2000000c

08013d30 <_txe_thread_resume>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_thread_resume(TX_THREAD *thread_ptr)
{
 8013d30:	b580      	push	{r7, lr}
 8013d32:	b084      	sub	sp, #16
 8013d34:	af00      	add	r7, sp, #0
 8013d36:	6078      	str	r0, [r7, #4]

UINT    status;


    /* Check for an invalid thread pointer.  */
    if (thread_ptr == TX_NULL)
 8013d38:	687b      	ldr	r3, [r7, #4]
 8013d3a:	2b00      	cmp	r3, #0
 8013d3c:	d102      	bne.n	8013d44 <_txe_thread_resume+0x14>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 8013d3e:	230e      	movs	r3, #14
 8013d40:	60fb      	str	r3, [r7, #12]
 8013d42:	e00b      	b.n	8013d5c <_txe_thread_resume+0x2c>
    }

    /* Now check for invalid thread ID.  */
    else if (thread_ptr -> tx_thread_id != TX_THREAD_ID)
 8013d44:	687b      	ldr	r3, [r7, #4]
 8013d46:	681b      	ldr	r3, [r3, #0]
 8013d48:	4a07      	ldr	r2, [pc, #28]	; (8013d68 <_txe_thread_resume+0x38>)
 8013d4a:	4293      	cmp	r3, r2
 8013d4c:	d002      	beq.n	8013d54 <_txe_thread_resume+0x24>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 8013d4e:	230e      	movs	r3, #14
 8013d50:	60fb      	str	r3, [r7, #12]
 8013d52:	e003      	b.n	8013d5c <_txe_thread_resume+0x2c>
    }
    else
    {

        /* Call actual thread resume function.  */
        status =  _tx_thread_resume(thread_ptr);
 8013d54:	6878      	ldr	r0, [r7, #4]
 8013d56:	f7fe fcef 	bl	8012738 <_tx_thread_resume>
 8013d5a:	60f8      	str	r0, [r7, #12]
    }

    /* Return completion status.  */
    return(status);
 8013d5c:	68fb      	ldr	r3, [r7, #12]
}
 8013d5e:	4618      	mov	r0, r3
 8013d60:	3710      	adds	r7, #16
 8013d62:	46bd      	mov	sp, r7
 8013d64:	bd80      	pop	{r7, pc}
 8013d66:	bf00      	nop
 8013d68:	54485244 	.word	0x54485244

08013d6c <_txe_thread_suspend>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_thread_suspend(TX_THREAD *thread_ptr)
{
 8013d6c:	b580      	push	{r7, lr}
 8013d6e:	b084      	sub	sp, #16
 8013d70:	af00      	add	r7, sp, #0
 8013d72:	6078      	str	r0, [r7, #4]

UINT    status;


    /* Check for an invalid thread pointer.  */
    if (thread_ptr == TX_NULL)
 8013d74:	687b      	ldr	r3, [r7, #4]
 8013d76:	2b00      	cmp	r3, #0
 8013d78:	d102      	bne.n	8013d80 <_txe_thread_suspend+0x14>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 8013d7a:	230e      	movs	r3, #14
 8013d7c:	60fb      	str	r3, [r7, #12]
 8013d7e:	e00b      	b.n	8013d98 <_txe_thread_suspend+0x2c>
    }

    /* Now check for invalid thread ID.  */
    else if (thread_ptr -> tx_thread_id != TX_THREAD_ID)
 8013d80:	687b      	ldr	r3, [r7, #4]
 8013d82:	681b      	ldr	r3, [r3, #0]
 8013d84:	4a07      	ldr	r2, [pc, #28]	; (8013da4 <_txe_thread_suspend+0x38>)
 8013d86:	4293      	cmp	r3, r2
 8013d88:	d002      	beq.n	8013d90 <_txe_thread_suspend+0x24>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 8013d8a:	230e      	movs	r3, #14
 8013d8c:	60fb      	str	r3, [r7, #12]
 8013d8e:	e003      	b.n	8013d98 <_txe_thread_suspend+0x2c>
    }
    else
    {

        /* Call actual thread suspend function.  */
        status =  _tx_thread_suspend(thread_ptr);
 8013d90:	6878      	ldr	r0, [r7, #4]
 8013d92:	f7fe fdfd 	bl	8012990 <_tx_thread_suspend>
 8013d96:	60f8      	str	r0, [r7, #12]
    }

    /* Return completion status.  */
    return(status);
 8013d98:	68fb      	ldr	r3, [r7, #12]
}
 8013d9a:	4618      	mov	r0, r3
 8013d9c:	3710      	adds	r7, #16
 8013d9e:	46bd      	mov	sp, r7
 8013da0:	bd80      	pop	{r7, pc}
 8013da2:	bf00      	nop
 8013da4:	54485244 	.word	0x54485244

08013da8 <MX_NetXDuo_Init>:
  * @brief  Application NetXDuo Initialization.
  * @param memory_ptr: memory pointer
  * @retval int
  */
UINT MX_NetXDuo_Init(VOID *memory_ptr)
{
 8013da8:	b480      	push	{r7}
 8013daa:	b085      	sub	sp, #20
 8013dac:	af00      	add	r7, sp, #0
 8013dae:	6078      	str	r0, [r7, #4]
  UINT ret = NX_SUCCESS;
 8013db0:	2300      	movs	r3, #0
 8013db2:	60fb      	str	r3, [r7, #12]
  TX_BYTE_POOL *byte_pool = (TX_BYTE_POOL*)memory_ptr;
 8013db4:	687b      	ldr	r3, [r7, #4]
 8013db6:	60bb      	str	r3, [r7, #8]
  /* USER CODE END App_NetXDuo_MEM_POOL */

  /* USER CODE BEGIN MX_NetXDuo_Init */
  /* USER CODE END MX_NetXDuo_Init */

  return ret;
 8013db8:	68fb      	ldr	r3, [r7, #12]
}
 8013dba:	4618      	mov	r0, r3
 8013dbc:	3714      	adds	r7, #20
 8013dbe:	46bd      	mov	sp, r7
 8013dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013dc4:	4770      	bx	lr
	...

08013dc8 <__errno>:
 8013dc8:	4b01      	ldr	r3, [pc, #4]	; (8013dd0 <__errno+0x8>)
 8013dca:	6818      	ldr	r0, [r3, #0]
 8013dcc:	4770      	bx	lr
 8013dce:	bf00      	nop
 8013dd0:	20000010 	.word	0x20000010

08013dd4 <__libc_init_array>:
 8013dd4:	b570      	push	{r4, r5, r6, lr}
 8013dd6:	4d0d      	ldr	r5, [pc, #52]	; (8013e0c <__libc_init_array+0x38>)
 8013dd8:	2600      	movs	r6, #0
 8013dda:	4c0d      	ldr	r4, [pc, #52]	; (8013e10 <__libc_init_array+0x3c>)
 8013ddc:	1b64      	subs	r4, r4, r5
 8013dde:	10a4      	asrs	r4, r4, #2
 8013de0:	42a6      	cmp	r6, r4
 8013de2:	d109      	bne.n	8013df8 <__libc_init_array+0x24>
 8013de4:	4d0b      	ldr	r5, [pc, #44]	; (8013e14 <__libc_init_array+0x40>)
 8013de6:	2600      	movs	r6, #0
 8013de8:	4c0b      	ldr	r4, [pc, #44]	; (8013e18 <__libc_init_array+0x44>)
 8013dea:	f000 fd1b 	bl	8014824 <_init>
 8013dee:	1b64      	subs	r4, r4, r5
 8013df0:	10a4      	asrs	r4, r4, #2
 8013df2:	42a6      	cmp	r6, r4
 8013df4:	d105      	bne.n	8013e02 <__libc_init_array+0x2e>
 8013df6:	bd70      	pop	{r4, r5, r6, pc}
 8013df8:	f855 3b04 	ldr.w	r3, [r5], #4
 8013dfc:	3601      	adds	r6, #1
 8013dfe:	4798      	blx	r3
 8013e00:	e7ee      	b.n	8013de0 <__libc_init_array+0xc>
 8013e02:	f855 3b04 	ldr.w	r3, [r5], #4
 8013e06:	3601      	adds	r6, #1
 8013e08:	4798      	blx	r3
 8013e0a:	e7f2      	b.n	8013df2 <__libc_init_array+0x1e>
 8013e0c:	08015054 	.word	0x08015054
 8013e10:	08015054 	.word	0x08015054
 8013e14:	08015054 	.word	0x08015054
 8013e18:	08015058 	.word	0x08015058

08013e1c <memset>:
 8013e1c:	4402      	add	r2, r0
 8013e1e:	4603      	mov	r3, r0
 8013e20:	4293      	cmp	r3, r2
 8013e22:	d100      	bne.n	8013e26 <memset+0xa>
 8013e24:	4770      	bx	lr
 8013e26:	f803 1b01 	strb.w	r1, [r3], #1
 8013e2a:	e7f9      	b.n	8013e20 <memset+0x4>

08013e2c <_puts_r>:
 8013e2c:	b570      	push	{r4, r5, r6, lr}
 8013e2e:	460e      	mov	r6, r1
 8013e30:	4605      	mov	r5, r0
 8013e32:	b118      	cbz	r0, 8013e3c <_puts_r+0x10>
 8013e34:	6983      	ldr	r3, [r0, #24]
 8013e36:	b90b      	cbnz	r3, 8013e3c <_puts_r+0x10>
 8013e38:	f000 fa46 	bl	80142c8 <__sinit>
 8013e3c:	69ab      	ldr	r3, [r5, #24]
 8013e3e:	68ac      	ldr	r4, [r5, #8]
 8013e40:	b913      	cbnz	r3, 8013e48 <_puts_r+0x1c>
 8013e42:	4628      	mov	r0, r5
 8013e44:	f000 fa40 	bl	80142c8 <__sinit>
 8013e48:	4b2c      	ldr	r3, [pc, #176]	; (8013efc <_puts_r+0xd0>)
 8013e4a:	429c      	cmp	r4, r3
 8013e4c:	d120      	bne.n	8013e90 <_puts_r+0x64>
 8013e4e:	686c      	ldr	r4, [r5, #4]
 8013e50:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8013e52:	07db      	lsls	r3, r3, #31
 8013e54:	d405      	bmi.n	8013e62 <_puts_r+0x36>
 8013e56:	89a3      	ldrh	r3, [r4, #12]
 8013e58:	0598      	lsls	r0, r3, #22
 8013e5a:	d402      	bmi.n	8013e62 <_puts_r+0x36>
 8013e5c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013e5e:	f000 fad1 	bl	8014404 <__retarget_lock_acquire_recursive>
 8013e62:	89a3      	ldrh	r3, [r4, #12]
 8013e64:	0719      	lsls	r1, r3, #28
 8013e66:	d51d      	bpl.n	8013ea4 <_puts_r+0x78>
 8013e68:	6923      	ldr	r3, [r4, #16]
 8013e6a:	b1db      	cbz	r3, 8013ea4 <_puts_r+0x78>
 8013e6c:	3e01      	subs	r6, #1
 8013e6e:	68a3      	ldr	r3, [r4, #8]
 8013e70:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8013e74:	3b01      	subs	r3, #1
 8013e76:	60a3      	str	r3, [r4, #8]
 8013e78:	bb39      	cbnz	r1, 8013eca <_puts_r+0x9e>
 8013e7a:	2b00      	cmp	r3, #0
 8013e7c:	da38      	bge.n	8013ef0 <_puts_r+0xc4>
 8013e7e:	4622      	mov	r2, r4
 8013e80:	210a      	movs	r1, #10
 8013e82:	4628      	mov	r0, r5
 8013e84:	f000 f848 	bl	8013f18 <__swbuf_r>
 8013e88:	3001      	adds	r0, #1
 8013e8a:	d011      	beq.n	8013eb0 <_puts_r+0x84>
 8013e8c:	250a      	movs	r5, #10
 8013e8e:	e011      	b.n	8013eb4 <_puts_r+0x88>
 8013e90:	4b1b      	ldr	r3, [pc, #108]	; (8013f00 <_puts_r+0xd4>)
 8013e92:	429c      	cmp	r4, r3
 8013e94:	d101      	bne.n	8013e9a <_puts_r+0x6e>
 8013e96:	68ac      	ldr	r4, [r5, #8]
 8013e98:	e7da      	b.n	8013e50 <_puts_r+0x24>
 8013e9a:	4b1a      	ldr	r3, [pc, #104]	; (8013f04 <_puts_r+0xd8>)
 8013e9c:	429c      	cmp	r4, r3
 8013e9e:	bf08      	it	eq
 8013ea0:	68ec      	ldreq	r4, [r5, #12]
 8013ea2:	e7d5      	b.n	8013e50 <_puts_r+0x24>
 8013ea4:	4621      	mov	r1, r4
 8013ea6:	4628      	mov	r0, r5
 8013ea8:	f000 f888 	bl	8013fbc <__swsetup_r>
 8013eac:	2800      	cmp	r0, #0
 8013eae:	d0dd      	beq.n	8013e6c <_puts_r+0x40>
 8013eb0:	f04f 35ff 	mov.w	r5, #4294967295
 8013eb4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8013eb6:	07da      	lsls	r2, r3, #31
 8013eb8:	d405      	bmi.n	8013ec6 <_puts_r+0x9a>
 8013eba:	89a3      	ldrh	r3, [r4, #12]
 8013ebc:	059b      	lsls	r3, r3, #22
 8013ebe:	d402      	bmi.n	8013ec6 <_puts_r+0x9a>
 8013ec0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013ec2:	f000 faa0 	bl	8014406 <__retarget_lock_release_recursive>
 8013ec6:	4628      	mov	r0, r5
 8013ec8:	bd70      	pop	{r4, r5, r6, pc}
 8013eca:	2b00      	cmp	r3, #0
 8013ecc:	da04      	bge.n	8013ed8 <_puts_r+0xac>
 8013ece:	69a2      	ldr	r2, [r4, #24]
 8013ed0:	429a      	cmp	r2, r3
 8013ed2:	dc06      	bgt.n	8013ee2 <_puts_r+0xb6>
 8013ed4:	290a      	cmp	r1, #10
 8013ed6:	d004      	beq.n	8013ee2 <_puts_r+0xb6>
 8013ed8:	6823      	ldr	r3, [r4, #0]
 8013eda:	1c5a      	adds	r2, r3, #1
 8013edc:	6022      	str	r2, [r4, #0]
 8013ede:	7019      	strb	r1, [r3, #0]
 8013ee0:	e7c5      	b.n	8013e6e <_puts_r+0x42>
 8013ee2:	4622      	mov	r2, r4
 8013ee4:	4628      	mov	r0, r5
 8013ee6:	f000 f817 	bl	8013f18 <__swbuf_r>
 8013eea:	3001      	adds	r0, #1
 8013eec:	d1bf      	bne.n	8013e6e <_puts_r+0x42>
 8013eee:	e7df      	b.n	8013eb0 <_puts_r+0x84>
 8013ef0:	6823      	ldr	r3, [r4, #0]
 8013ef2:	250a      	movs	r5, #10
 8013ef4:	1c5a      	adds	r2, r3, #1
 8013ef6:	6022      	str	r2, [r4, #0]
 8013ef8:	701d      	strb	r5, [r3, #0]
 8013efa:	e7db      	b.n	8013eb4 <_puts_r+0x88>
 8013efc:	0801500c 	.word	0x0801500c
 8013f00:	0801502c 	.word	0x0801502c
 8013f04:	08014fec 	.word	0x08014fec

08013f08 <puts>:
 8013f08:	4b02      	ldr	r3, [pc, #8]	; (8013f14 <puts+0xc>)
 8013f0a:	4601      	mov	r1, r0
 8013f0c:	6818      	ldr	r0, [r3, #0]
 8013f0e:	f7ff bf8d 	b.w	8013e2c <_puts_r>
 8013f12:	bf00      	nop
 8013f14:	20000010 	.word	0x20000010

08013f18 <__swbuf_r>:
 8013f18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013f1a:	460e      	mov	r6, r1
 8013f1c:	4614      	mov	r4, r2
 8013f1e:	4605      	mov	r5, r0
 8013f20:	b118      	cbz	r0, 8013f2a <__swbuf_r+0x12>
 8013f22:	6983      	ldr	r3, [r0, #24]
 8013f24:	b90b      	cbnz	r3, 8013f2a <__swbuf_r+0x12>
 8013f26:	f000 f9cf 	bl	80142c8 <__sinit>
 8013f2a:	4b21      	ldr	r3, [pc, #132]	; (8013fb0 <__swbuf_r+0x98>)
 8013f2c:	429c      	cmp	r4, r3
 8013f2e:	d12b      	bne.n	8013f88 <__swbuf_r+0x70>
 8013f30:	686c      	ldr	r4, [r5, #4]
 8013f32:	69a3      	ldr	r3, [r4, #24]
 8013f34:	60a3      	str	r3, [r4, #8]
 8013f36:	89a3      	ldrh	r3, [r4, #12]
 8013f38:	071a      	lsls	r2, r3, #28
 8013f3a:	d52f      	bpl.n	8013f9c <__swbuf_r+0x84>
 8013f3c:	6923      	ldr	r3, [r4, #16]
 8013f3e:	b36b      	cbz	r3, 8013f9c <__swbuf_r+0x84>
 8013f40:	6923      	ldr	r3, [r4, #16]
 8013f42:	b2f6      	uxtb	r6, r6
 8013f44:	6820      	ldr	r0, [r4, #0]
 8013f46:	4637      	mov	r7, r6
 8013f48:	1ac0      	subs	r0, r0, r3
 8013f4a:	6963      	ldr	r3, [r4, #20]
 8013f4c:	4283      	cmp	r3, r0
 8013f4e:	dc04      	bgt.n	8013f5a <__swbuf_r+0x42>
 8013f50:	4621      	mov	r1, r4
 8013f52:	4628      	mov	r0, r5
 8013f54:	f000 f924 	bl	80141a0 <_fflush_r>
 8013f58:	bb30      	cbnz	r0, 8013fa8 <__swbuf_r+0x90>
 8013f5a:	68a3      	ldr	r3, [r4, #8]
 8013f5c:	3001      	adds	r0, #1
 8013f5e:	3b01      	subs	r3, #1
 8013f60:	60a3      	str	r3, [r4, #8]
 8013f62:	6823      	ldr	r3, [r4, #0]
 8013f64:	1c5a      	adds	r2, r3, #1
 8013f66:	6022      	str	r2, [r4, #0]
 8013f68:	701e      	strb	r6, [r3, #0]
 8013f6a:	6963      	ldr	r3, [r4, #20]
 8013f6c:	4283      	cmp	r3, r0
 8013f6e:	d004      	beq.n	8013f7a <__swbuf_r+0x62>
 8013f70:	89a3      	ldrh	r3, [r4, #12]
 8013f72:	07db      	lsls	r3, r3, #31
 8013f74:	d506      	bpl.n	8013f84 <__swbuf_r+0x6c>
 8013f76:	2e0a      	cmp	r6, #10
 8013f78:	d104      	bne.n	8013f84 <__swbuf_r+0x6c>
 8013f7a:	4621      	mov	r1, r4
 8013f7c:	4628      	mov	r0, r5
 8013f7e:	f000 f90f 	bl	80141a0 <_fflush_r>
 8013f82:	b988      	cbnz	r0, 8013fa8 <__swbuf_r+0x90>
 8013f84:	4638      	mov	r0, r7
 8013f86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013f88:	4b0a      	ldr	r3, [pc, #40]	; (8013fb4 <__swbuf_r+0x9c>)
 8013f8a:	429c      	cmp	r4, r3
 8013f8c:	d101      	bne.n	8013f92 <__swbuf_r+0x7a>
 8013f8e:	68ac      	ldr	r4, [r5, #8]
 8013f90:	e7cf      	b.n	8013f32 <__swbuf_r+0x1a>
 8013f92:	4b09      	ldr	r3, [pc, #36]	; (8013fb8 <__swbuf_r+0xa0>)
 8013f94:	429c      	cmp	r4, r3
 8013f96:	bf08      	it	eq
 8013f98:	68ec      	ldreq	r4, [r5, #12]
 8013f9a:	e7ca      	b.n	8013f32 <__swbuf_r+0x1a>
 8013f9c:	4621      	mov	r1, r4
 8013f9e:	4628      	mov	r0, r5
 8013fa0:	f000 f80c 	bl	8013fbc <__swsetup_r>
 8013fa4:	2800      	cmp	r0, #0
 8013fa6:	d0cb      	beq.n	8013f40 <__swbuf_r+0x28>
 8013fa8:	f04f 37ff 	mov.w	r7, #4294967295
 8013fac:	e7ea      	b.n	8013f84 <__swbuf_r+0x6c>
 8013fae:	bf00      	nop
 8013fb0:	0801500c 	.word	0x0801500c
 8013fb4:	0801502c 	.word	0x0801502c
 8013fb8:	08014fec 	.word	0x08014fec

08013fbc <__swsetup_r>:
 8013fbc:	4b32      	ldr	r3, [pc, #200]	; (8014088 <__swsetup_r+0xcc>)
 8013fbe:	b570      	push	{r4, r5, r6, lr}
 8013fc0:	681d      	ldr	r5, [r3, #0]
 8013fc2:	4606      	mov	r6, r0
 8013fc4:	460c      	mov	r4, r1
 8013fc6:	b125      	cbz	r5, 8013fd2 <__swsetup_r+0x16>
 8013fc8:	69ab      	ldr	r3, [r5, #24]
 8013fca:	b913      	cbnz	r3, 8013fd2 <__swsetup_r+0x16>
 8013fcc:	4628      	mov	r0, r5
 8013fce:	f000 f97b 	bl	80142c8 <__sinit>
 8013fd2:	4b2e      	ldr	r3, [pc, #184]	; (801408c <__swsetup_r+0xd0>)
 8013fd4:	429c      	cmp	r4, r3
 8013fd6:	d10f      	bne.n	8013ff8 <__swsetup_r+0x3c>
 8013fd8:	686c      	ldr	r4, [r5, #4]
 8013fda:	89a3      	ldrh	r3, [r4, #12]
 8013fdc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8013fe0:	0719      	lsls	r1, r3, #28
 8013fe2:	d42c      	bmi.n	801403e <__swsetup_r+0x82>
 8013fe4:	06dd      	lsls	r5, r3, #27
 8013fe6:	d411      	bmi.n	801400c <__swsetup_r+0x50>
 8013fe8:	2309      	movs	r3, #9
 8013fea:	6033      	str	r3, [r6, #0]
 8013fec:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8013ff0:	f04f 30ff 	mov.w	r0, #4294967295
 8013ff4:	81a3      	strh	r3, [r4, #12]
 8013ff6:	e03e      	b.n	8014076 <__swsetup_r+0xba>
 8013ff8:	4b25      	ldr	r3, [pc, #148]	; (8014090 <__swsetup_r+0xd4>)
 8013ffa:	429c      	cmp	r4, r3
 8013ffc:	d101      	bne.n	8014002 <__swsetup_r+0x46>
 8013ffe:	68ac      	ldr	r4, [r5, #8]
 8014000:	e7eb      	b.n	8013fda <__swsetup_r+0x1e>
 8014002:	4b24      	ldr	r3, [pc, #144]	; (8014094 <__swsetup_r+0xd8>)
 8014004:	429c      	cmp	r4, r3
 8014006:	bf08      	it	eq
 8014008:	68ec      	ldreq	r4, [r5, #12]
 801400a:	e7e6      	b.n	8013fda <__swsetup_r+0x1e>
 801400c:	0758      	lsls	r0, r3, #29
 801400e:	d512      	bpl.n	8014036 <__swsetup_r+0x7a>
 8014010:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8014012:	b141      	cbz	r1, 8014026 <__swsetup_r+0x6a>
 8014014:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014018:	4299      	cmp	r1, r3
 801401a:	d002      	beq.n	8014022 <__swsetup_r+0x66>
 801401c:	4630      	mov	r0, r6
 801401e:	f000 fa59 	bl	80144d4 <_free_r>
 8014022:	2300      	movs	r3, #0
 8014024:	6363      	str	r3, [r4, #52]	; 0x34
 8014026:	89a3      	ldrh	r3, [r4, #12]
 8014028:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801402c:	81a3      	strh	r3, [r4, #12]
 801402e:	2300      	movs	r3, #0
 8014030:	6063      	str	r3, [r4, #4]
 8014032:	6923      	ldr	r3, [r4, #16]
 8014034:	6023      	str	r3, [r4, #0]
 8014036:	89a3      	ldrh	r3, [r4, #12]
 8014038:	f043 0308 	orr.w	r3, r3, #8
 801403c:	81a3      	strh	r3, [r4, #12]
 801403e:	6923      	ldr	r3, [r4, #16]
 8014040:	b94b      	cbnz	r3, 8014056 <__swsetup_r+0x9a>
 8014042:	89a3      	ldrh	r3, [r4, #12]
 8014044:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8014048:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801404c:	d003      	beq.n	8014056 <__swsetup_r+0x9a>
 801404e:	4621      	mov	r1, r4
 8014050:	4630      	mov	r0, r6
 8014052:	f000 f9ff 	bl	8014454 <__smakebuf_r>
 8014056:	89a0      	ldrh	r0, [r4, #12]
 8014058:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801405c:	f010 0301 	ands.w	r3, r0, #1
 8014060:	d00a      	beq.n	8014078 <__swsetup_r+0xbc>
 8014062:	2300      	movs	r3, #0
 8014064:	60a3      	str	r3, [r4, #8]
 8014066:	6963      	ldr	r3, [r4, #20]
 8014068:	425b      	negs	r3, r3
 801406a:	61a3      	str	r3, [r4, #24]
 801406c:	6923      	ldr	r3, [r4, #16]
 801406e:	b943      	cbnz	r3, 8014082 <__swsetup_r+0xc6>
 8014070:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8014074:	d1ba      	bne.n	8013fec <__swsetup_r+0x30>
 8014076:	bd70      	pop	{r4, r5, r6, pc}
 8014078:	0781      	lsls	r1, r0, #30
 801407a:	bf58      	it	pl
 801407c:	6963      	ldrpl	r3, [r4, #20]
 801407e:	60a3      	str	r3, [r4, #8]
 8014080:	e7f4      	b.n	801406c <__swsetup_r+0xb0>
 8014082:	2000      	movs	r0, #0
 8014084:	e7f7      	b.n	8014076 <__swsetup_r+0xba>
 8014086:	bf00      	nop
 8014088:	20000010 	.word	0x20000010
 801408c:	0801500c 	.word	0x0801500c
 8014090:	0801502c 	.word	0x0801502c
 8014094:	08014fec 	.word	0x08014fec

08014098 <__sflush_r>:
 8014098:	898a      	ldrh	r2, [r1, #12]
 801409a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801409e:	4605      	mov	r5, r0
 80140a0:	0710      	lsls	r0, r2, #28
 80140a2:	460c      	mov	r4, r1
 80140a4:	d458      	bmi.n	8014158 <__sflush_r+0xc0>
 80140a6:	684b      	ldr	r3, [r1, #4]
 80140a8:	2b00      	cmp	r3, #0
 80140aa:	dc05      	bgt.n	80140b8 <__sflush_r+0x20>
 80140ac:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80140ae:	2b00      	cmp	r3, #0
 80140b0:	dc02      	bgt.n	80140b8 <__sflush_r+0x20>
 80140b2:	2000      	movs	r0, #0
 80140b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80140b8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80140ba:	2e00      	cmp	r6, #0
 80140bc:	d0f9      	beq.n	80140b2 <__sflush_r+0x1a>
 80140be:	2300      	movs	r3, #0
 80140c0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80140c4:	682f      	ldr	r7, [r5, #0]
 80140c6:	602b      	str	r3, [r5, #0]
 80140c8:	d032      	beq.n	8014130 <__sflush_r+0x98>
 80140ca:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80140cc:	89a3      	ldrh	r3, [r4, #12]
 80140ce:	075a      	lsls	r2, r3, #29
 80140d0:	d505      	bpl.n	80140de <__sflush_r+0x46>
 80140d2:	6863      	ldr	r3, [r4, #4]
 80140d4:	1ac0      	subs	r0, r0, r3
 80140d6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80140d8:	b10b      	cbz	r3, 80140de <__sflush_r+0x46>
 80140da:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80140dc:	1ac0      	subs	r0, r0, r3
 80140de:	2300      	movs	r3, #0
 80140e0:	4602      	mov	r2, r0
 80140e2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80140e4:	4628      	mov	r0, r5
 80140e6:	6a21      	ldr	r1, [r4, #32]
 80140e8:	47b0      	blx	r6
 80140ea:	1c43      	adds	r3, r0, #1
 80140ec:	89a3      	ldrh	r3, [r4, #12]
 80140ee:	d106      	bne.n	80140fe <__sflush_r+0x66>
 80140f0:	6829      	ldr	r1, [r5, #0]
 80140f2:	291d      	cmp	r1, #29
 80140f4:	d82c      	bhi.n	8014150 <__sflush_r+0xb8>
 80140f6:	4a29      	ldr	r2, [pc, #164]	; (801419c <__sflush_r+0x104>)
 80140f8:	40ca      	lsrs	r2, r1
 80140fa:	07d6      	lsls	r6, r2, #31
 80140fc:	d528      	bpl.n	8014150 <__sflush_r+0xb8>
 80140fe:	2200      	movs	r2, #0
 8014100:	04d9      	lsls	r1, r3, #19
 8014102:	6062      	str	r2, [r4, #4]
 8014104:	6922      	ldr	r2, [r4, #16]
 8014106:	6022      	str	r2, [r4, #0]
 8014108:	d504      	bpl.n	8014114 <__sflush_r+0x7c>
 801410a:	1c42      	adds	r2, r0, #1
 801410c:	d101      	bne.n	8014112 <__sflush_r+0x7a>
 801410e:	682b      	ldr	r3, [r5, #0]
 8014110:	b903      	cbnz	r3, 8014114 <__sflush_r+0x7c>
 8014112:	6560      	str	r0, [r4, #84]	; 0x54
 8014114:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8014116:	602f      	str	r7, [r5, #0]
 8014118:	2900      	cmp	r1, #0
 801411a:	d0ca      	beq.n	80140b2 <__sflush_r+0x1a>
 801411c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014120:	4299      	cmp	r1, r3
 8014122:	d002      	beq.n	801412a <__sflush_r+0x92>
 8014124:	4628      	mov	r0, r5
 8014126:	f000 f9d5 	bl	80144d4 <_free_r>
 801412a:	2000      	movs	r0, #0
 801412c:	6360      	str	r0, [r4, #52]	; 0x34
 801412e:	e7c1      	b.n	80140b4 <__sflush_r+0x1c>
 8014130:	6a21      	ldr	r1, [r4, #32]
 8014132:	2301      	movs	r3, #1
 8014134:	4628      	mov	r0, r5
 8014136:	47b0      	blx	r6
 8014138:	1c41      	adds	r1, r0, #1
 801413a:	d1c7      	bne.n	80140cc <__sflush_r+0x34>
 801413c:	682b      	ldr	r3, [r5, #0]
 801413e:	2b00      	cmp	r3, #0
 8014140:	d0c4      	beq.n	80140cc <__sflush_r+0x34>
 8014142:	2b1d      	cmp	r3, #29
 8014144:	d001      	beq.n	801414a <__sflush_r+0xb2>
 8014146:	2b16      	cmp	r3, #22
 8014148:	d101      	bne.n	801414e <__sflush_r+0xb6>
 801414a:	602f      	str	r7, [r5, #0]
 801414c:	e7b1      	b.n	80140b2 <__sflush_r+0x1a>
 801414e:	89a3      	ldrh	r3, [r4, #12]
 8014150:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014154:	81a3      	strh	r3, [r4, #12]
 8014156:	e7ad      	b.n	80140b4 <__sflush_r+0x1c>
 8014158:	690f      	ldr	r7, [r1, #16]
 801415a:	2f00      	cmp	r7, #0
 801415c:	d0a9      	beq.n	80140b2 <__sflush_r+0x1a>
 801415e:	0793      	lsls	r3, r2, #30
 8014160:	680e      	ldr	r6, [r1, #0]
 8014162:	600f      	str	r7, [r1, #0]
 8014164:	bf0c      	ite	eq
 8014166:	694b      	ldreq	r3, [r1, #20]
 8014168:	2300      	movne	r3, #0
 801416a:	eba6 0807 	sub.w	r8, r6, r7
 801416e:	608b      	str	r3, [r1, #8]
 8014170:	f1b8 0f00 	cmp.w	r8, #0
 8014174:	dd9d      	ble.n	80140b2 <__sflush_r+0x1a>
 8014176:	4643      	mov	r3, r8
 8014178:	463a      	mov	r2, r7
 801417a:	6a21      	ldr	r1, [r4, #32]
 801417c:	4628      	mov	r0, r5
 801417e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8014180:	47b0      	blx	r6
 8014182:	2800      	cmp	r0, #0
 8014184:	dc06      	bgt.n	8014194 <__sflush_r+0xfc>
 8014186:	89a3      	ldrh	r3, [r4, #12]
 8014188:	f04f 30ff 	mov.w	r0, #4294967295
 801418c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014190:	81a3      	strh	r3, [r4, #12]
 8014192:	e78f      	b.n	80140b4 <__sflush_r+0x1c>
 8014194:	4407      	add	r7, r0
 8014196:	eba8 0800 	sub.w	r8, r8, r0
 801419a:	e7e9      	b.n	8014170 <__sflush_r+0xd8>
 801419c:	20400001 	.word	0x20400001

080141a0 <_fflush_r>:
 80141a0:	b538      	push	{r3, r4, r5, lr}
 80141a2:	690b      	ldr	r3, [r1, #16]
 80141a4:	4605      	mov	r5, r0
 80141a6:	460c      	mov	r4, r1
 80141a8:	b913      	cbnz	r3, 80141b0 <_fflush_r+0x10>
 80141aa:	2500      	movs	r5, #0
 80141ac:	4628      	mov	r0, r5
 80141ae:	bd38      	pop	{r3, r4, r5, pc}
 80141b0:	b118      	cbz	r0, 80141ba <_fflush_r+0x1a>
 80141b2:	6983      	ldr	r3, [r0, #24]
 80141b4:	b90b      	cbnz	r3, 80141ba <_fflush_r+0x1a>
 80141b6:	f000 f887 	bl	80142c8 <__sinit>
 80141ba:	4b14      	ldr	r3, [pc, #80]	; (801420c <_fflush_r+0x6c>)
 80141bc:	429c      	cmp	r4, r3
 80141be:	d11b      	bne.n	80141f8 <_fflush_r+0x58>
 80141c0:	686c      	ldr	r4, [r5, #4]
 80141c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80141c6:	2b00      	cmp	r3, #0
 80141c8:	d0ef      	beq.n	80141aa <_fflush_r+0xa>
 80141ca:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80141cc:	07d0      	lsls	r0, r2, #31
 80141ce:	d404      	bmi.n	80141da <_fflush_r+0x3a>
 80141d0:	0599      	lsls	r1, r3, #22
 80141d2:	d402      	bmi.n	80141da <_fflush_r+0x3a>
 80141d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80141d6:	f000 f915 	bl	8014404 <__retarget_lock_acquire_recursive>
 80141da:	4628      	mov	r0, r5
 80141dc:	4621      	mov	r1, r4
 80141de:	f7ff ff5b 	bl	8014098 <__sflush_r>
 80141e2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80141e4:	4605      	mov	r5, r0
 80141e6:	07da      	lsls	r2, r3, #31
 80141e8:	d4e0      	bmi.n	80141ac <_fflush_r+0xc>
 80141ea:	89a3      	ldrh	r3, [r4, #12]
 80141ec:	059b      	lsls	r3, r3, #22
 80141ee:	d4dd      	bmi.n	80141ac <_fflush_r+0xc>
 80141f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80141f2:	f000 f908 	bl	8014406 <__retarget_lock_release_recursive>
 80141f6:	e7d9      	b.n	80141ac <_fflush_r+0xc>
 80141f8:	4b05      	ldr	r3, [pc, #20]	; (8014210 <_fflush_r+0x70>)
 80141fa:	429c      	cmp	r4, r3
 80141fc:	d101      	bne.n	8014202 <_fflush_r+0x62>
 80141fe:	68ac      	ldr	r4, [r5, #8]
 8014200:	e7df      	b.n	80141c2 <_fflush_r+0x22>
 8014202:	4b04      	ldr	r3, [pc, #16]	; (8014214 <_fflush_r+0x74>)
 8014204:	429c      	cmp	r4, r3
 8014206:	bf08      	it	eq
 8014208:	68ec      	ldreq	r4, [r5, #12]
 801420a:	e7da      	b.n	80141c2 <_fflush_r+0x22>
 801420c:	0801500c 	.word	0x0801500c
 8014210:	0801502c 	.word	0x0801502c
 8014214:	08014fec 	.word	0x08014fec

08014218 <std>:
 8014218:	2300      	movs	r3, #0
 801421a:	b510      	push	{r4, lr}
 801421c:	4604      	mov	r4, r0
 801421e:	6083      	str	r3, [r0, #8]
 8014220:	8181      	strh	r1, [r0, #12]
 8014222:	4619      	mov	r1, r3
 8014224:	6643      	str	r3, [r0, #100]	; 0x64
 8014226:	81c2      	strh	r2, [r0, #14]
 8014228:	2208      	movs	r2, #8
 801422a:	6183      	str	r3, [r0, #24]
 801422c:	e9c0 3300 	strd	r3, r3, [r0]
 8014230:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8014234:	305c      	adds	r0, #92	; 0x5c
 8014236:	f7ff fdf1 	bl	8013e1c <memset>
 801423a:	4b05      	ldr	r3, [pc, #20]	; (8014250 <std+0x38>)
 801423c:	6224      	str	r4, [r4, #32]
 801423e:	6263      	str	r3, [r4, #36]	; 0x24
 8014240:	4b04      	ldr	r3, [pc, #16]	; (8014254 <std+0x3c>)
 8014242:	62a3      	str	r3, [r4, #40]	; 0x28
 8014244:	4b04      	ldr	r3, [pc, #16]	; (8014258 <std+0x40>)
 8014246:	62e3      	str	r3, [r4, #44]	; 0x2c
 8014248:	4b04      	ldr	r3, [pc, #16]	; (801425c <std+0x44>)
 801424a:	6323      	str	r3, [r4, #48]	; 0x30
 801424c:	bd10      	pop	{r4, pc}
 801424e:	bf00      	nop
 8014250:	080146b5 	.word	0x080146b5
 8014254:	080146d7 	.word	0x080146d7
 8014258:	0801470f 	.word	0x0801470f
 801425c:	08014733 	.word	0x08014733

08014260 <_cleanup_r>:
 8014260:	4901      	ldr	r1, [pc, #4]	; (8014268 <_cleanup_r+0x8>)
 8014262:	f000 b8af 	b.w	80143c4 <_fwalk_reent>
 8014266:	bf00      	nop
 8014268:	080141a1 	.word	0x080141a1

0801426c <__sfmoreglue>:
 801426c:	b570      	push	{r4, r5, r6, lr}
 801426e:	2268      	movs	r2, #104	; 0x68
 8014270:	1e4d      	subs	r5, r1, #1
 8014272:	460e      	mov	r6, r1
 8014274:	4355      	muls	r5, r2
 8014276:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801427a:	f000 f997 	bl	80145ac <_malloc_r>
 801427e:	4604      	mov	r4, r0
 8014280:	b140      	cbz	r0, 8014294 <__sfmoreglue+0x28>
 8014282:	2100      	movs	r1, #0
 8014284:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8014288:	e9c0 1600 	strd	r1, r6, [r0]
 801428c:	300c      	adds	r0, #12
 801428e:	60a0      	str	r0, [r4, #8]
 8014290:	f7ff fdc4 	bl	8013e1c <memset>
 8014294:	4620      	mov	r0, r4
 8014296:	bd70      	pop	{r4, r5, r6, pc}

08014298 <__sfp_lock_acquire>:
 8014298:	4801      	ldr	r0, [pc, #4]	; (80142a0 <__sfp_lock_acquire+0x8>)
 801429a:	f000 b8b3 	b.w	8014404 <__retarget_lock_acquire_recursive>
 801429e:	bf00      	nop
 80142a0:	2001cff1 	.word	0x2001cff1

080142a4 <__sfp_lock_release>:
 80142a4:	4801      	ldr	r0, [pc, #4]	; (80142ac <__sfp_lock_release+0x8>)
 80142a6:	f000 b8ae 	b.w	8014406 <__retarget_lock_release_recursive>
 80142aa:	bf00      	nop
 80142ac:	2001cff1 	.word	0x2001cff1

080142b0 <__sinit_lock_acquire>:
 80142b0:	4801      	ldr	r0, [pc, #4]	; (80142b8 <__sinit_lock_acquire+0x8>)
 80142b2:	f000 b8a7 	b.w	8014404 <__retarget_lock_acquire_recursive>
 80142b6:	bf00      	nop
 80142b8:	2001cff2 	.word	0x2001cff2

080142bc <__sinit_lock_release>:
 80142bc:	4801      	ldr	r0, [pc, #4]	; (80142c4 <__sinit_lock_release+0x8>)
 80142be:	f000 b8a2 	b.w	8014406 <__retarget_lock_release_recursive>
 80142c2:	bf00      	nop
 80142c4:	2001cff2 	.word	0x2001cff2

080142c8 <__sinit>:
 80142c8:	b510      	push	{r4, lr}
 80142ca:	4604      	mov	r4, r0
 80142cc:	f7ff fff0 	bl	80142b0 <__sinit_lock_acquire>
 80142d0:	69a3      	ldr	r3, [r4, #24]
 80142d2:	b11b      	cbz	r3, 80142dc <__sinit+0x14>
 80142d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80142d8:	f7ff bff0 	b.w	80142bc <__sinit_lock_release>
 80142dc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80142e0:	6523      	str	r3, [r4, #80]	; 0x50
 80142e2:	4620      	mov	r0, r4
 80142e4:	4b12      	ldr	r3, [pc, #72]	; (8014330 <__sinit+0x68>)
 80142e6:	4a13      	ldr	r2, [pc, #76]	; (8014334 <__sinit+0x6c>)
 80142e8:	681b      	ldr	r3, [r3, #0]
 80142ea:	62a2      	str	r2, [r4, #40]	; 0x28
 80142ec:	42a3      	cmp	r3, r4
 80142ee:	bf04      	itt	eq
 80142f0:	2301      	moveq	r3, #1
 80142f2:	61a3      	streq	r3, [r4, #24]
 80142f4:	f000 f820 	bl	8014338 <__sfp>
 80142f8:	6060      	str	r0, [r4, #4]
 80142fa:	4620      	mov	r0, r4
 80142fc:	f000 f81c 	bl	8014338 <__sfp>
 8014300:	60a0      	str	r0, [r4, #8]
 8014302:	4620      	mov	r0, r4
 8014304:	f000 f818 	bl	8014338 <__sfp>
 8014308:	2200      	movs	r2, #0
 801430a:	2104      	movs	r1, #4
 801430c:	60e0      	str	r0, [r4, #12]
 801430e:	6860      	ldr	r0, [r4, #4]
 8014310:	f7ff ff82 	bl	8014218 <std>
 8014314:	2201      	movs	r2, #1
 8014316:	2109      	movs	r1, #9
 8014318:	68a0      	ldr	r0, [r4, #8]
 801431a:	f7ff ff7d 	bl	8014218 <std>
 801431e:	2202      	movs	r2, #2
 8014320:	2112      	movs	r1, #18
 8014322:	68e0      	ldr	r0, [r4, #12]
 8014324:	f7ff ff78 	bl	8014218 <std>
 8014328:	2301      	movs	r3, #1
 801432a:	61a3      	str	r3, [r4, #24]
 801432c:	e7d2      	b.n	80142d4 <__sinit+0xc>
 801432e:	bf00      	nop
 8014330:	08014fe8 	.word	0x08014fe8
 8014334:	08014261 	.word	0x08014261

08014338 <__sfp>:
 8014338:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801433a:	4607      	mov	r7, r0
 801433c:	f7ff ffac 	bl	8014298 <__sfp_lock_acquire>
 8014340:	4b1e      	ldr	r3, [pc, #120]	; (80143bc <__sfp+0x84>)
 8014342:	681e      	ldr	r6, [r3, #0]
 8014344:	69b3      	ldr	r3, [r6, #24]
 8014346:	b913      	cbnz	r3, 801434e <__sfp+0x16>
 8014348:	4630      	mov	r0, r6
 801434a:	f7ff ffbd 	bl	80142c8 <__sinit>
 801434e:	3648      	adds	r6, #72	; 0x48
 8014350:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8014354:	3b01      	subs	r3, #1
 8014356:	d503      	bpl.n	8014360 <__sfp+0x28>
 8014358:	6833      	ldr	r3, [r6, #0]
 801435a:	b30b      	cbz	r3, 80143a0 <__sfp+0x68>
 801435c:	6836      	ldr	r6, [r6, #0]
 801435e:	e7f7      	b.n	8014350 <__sfp+0x18>
 8014360:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8014364:	b9d5      	cbnz	r5, 801439c <__sfp+0x64>
 8014366:	4b16      	ldr	r3, [pc, #88]	; (80143c0 <__sfp+0x88>)
 8014368:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801436c:	6665      	str	r5, [r4, #100]	; 0x64
 801436e:	60e3      	str	r3, [r4, #12]
 8014370:	f000 f847 	bl	8014402 <__retarget_lock_init_recursive>
 8014374:	f7ff ff96 	bl	80142a4 <__sfp_lock_release>
 8014378:	2208      	movs	r2, #8
 801437a:	4629      	mov	r1, r5
 801437c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8014380:	6025      	str	r5, [r4, #0]
 8014382:	61a5      	str	r5, [r4, #24]
 8014384:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8014388:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801438c:	f7ff fd46 	bl	8013e1c <memset>
 8014390:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8014394:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8014398:	4620      	mov	r0, r4
 801439a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801439c:	3468      	adds	r4, #104	; 0x68
 801439e:	e7d9      	b.n	8014354 <__sfp+0x1c>
 80143a0:	2104      	movs	r1, #4
 80143a2:	4638      	mov	r0, r7
 80143a4:	f7ff ff62 	bl	801426c <__sfmoreglue>
 80143a8:	4604      	mov	r4, r0
 80143aa:	6030      	str	r0, [r6, #0]
 80143ac:	2800      	cmp	r0, #0
 80143ae:	d1d5      	bne.n	801435c <__sfp+0x24>
 80143b0:	f7ff ff78 	bl	80142a4 <__sfp_lock_release>
 80143b4:	230c      	movs	r3, #12
 80143b6:	603b      	str	r3, [r7, #0]
 80143b8:	e7ee      	b.n	8014398 <__sfp+0x60>
 80143ba:	bf00      	nop
 80143bc:	08014fe8 	.word	0x08014fe8
 80143c0:	ffff0001 	.word	0xffff0001

080143c4 <_fwalk_reent>:
 80143c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80143c8:	4606      	mov	r6, r0
 80143ca:	4688      	mov	r8, r1
 80143cc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80143d0:	2700      	movs	r7, #0
 80143d2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80143d6:	f1b9 0901 	subs.w	r9, r9, #1
 80143da:	d505      	bpl.n	80143e8 <_fwalk_reent+0x24>
 80143dc:	6824      	ldr	r4, [r4, #0]
 80143de:	2c00      	cmp	r4, #0
 80143e0:	d1f7      	bne.n	80143d2 <_fwalk_reent+0xe>
 80143e2:	4638      	mov	r0, r7
 80143e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80143e8:	89ab      	ldrh	r3, [r5, #12]
 80143ea:	2b01      	cmp	r3, #1
 80143ec:	d907      	bls.n	80143fe <_fwalk_reent+0x3a>
 80143ee:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80143f2:	3301      	adds	r3, #1
 80143f4:	d003      	beq.n	80143fe <_fwalk_reent+0x3a>
 80143f6:	4629      	mov	r1, r5
 80143f8:	4630      	mov	r0, r6
 80143fa:	47c0      	blx	r8
 80143fc:	4307      	orrs	r7, r0
 80143fe:	3568      	adds	r5, #104	; 0x68
 8014400:	e7e9      	b.n	80143d6 <_fwalk_reent+0x12>

08014402 <__retarget_lock_init_recursive>:
 8014402:	4770      	bx	lr

08014404 <__retarget_lock_acquire_recursive>:
 8014404:	4770      	bx	lr

08014406 <__retarget_lock_release_recursive>:
 8014406:	4770      	bx	lr

08014408 <__swhatbuf_r>:
 8014408:	b570      	push	{r4, r5, r6, lr}
 801440a:	460e      	mov	r6, r1
 801440c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014410:	b096      	sub	sp, #88	; 0x58
 8014412:	4614      	mov	r4, r2
 8014414:	2900      	cmp	r1, #0
 8014416:	461d      	mov	r5, r3
 8014418:	da08      	bge.n	801442c <__swhatbuf_r+0x24>
 801441a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 801441e:	2200      	movs	r2, #0
 8014420:	602a      	str	r2, [r5, #0]
 8014422:	061a      	lsls	r2, r3, #24
 8014424:	d410      	bmi.n	8014448 <__swhatbuf_r+0x40>
 8014426:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801442a:	e00e      	b.n	801444a <__swhatbuf_r+0x42>
 801442c:	466a      	mov	r2, sp
 801442e:	f000 f9a7 	bl	8014780 <_fstat_r>
 8014432:	2800      	cmp	r0, #0
 8014434:	dbf1      	blt.n	801441a <__swhatbuf_r+0x12>
 8014436:	9a01      	ldr	r2, [sp, #4]
 8014438:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801443c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8014440:	425a      	negs	r2, r3
 8014442:	415a      	adcs	r2, r3
 8014444:	602a      	str	r2, [r5, #0]
 8014446:	e7ee      	b.n	8014426 <__swhatbuf_r+0x1e>
 8014448:	2340      	movs	r3, #64	; 0x40
 801444a:	2000      	movs	r0, #0
 801444c:	6023      	str	r3, [r4, #0]
 801444e:	b016      	add	sp, #88	; 0x58
 8014450:	bd70      	pop	{r4, r5, r6, pc}
	...

08014454 <__smakebuf_r>:
 8014454:	898b      	ldrh	r3, [r1, #12]
 8014456:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8014458:	079d      	lsls	r5, r3, #30
 801445a:	4606      	mov	r6, r0
 801445c:	460c      	mov	r4, r1
 801445e:	d507      	bpl.n	8014470 <__smakebuf_r+0x1c>
 8014460:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8014464:	6023      	str	r3, [r4, #0]
 8014466:	6123      	str	r3, [r4, #16]
 8014468:	2301      	movs	r3, #1
 801446a:	6163      	str	r3, [r4, #20]
 801446c:	b002      	add	sp, #8
 801446e:	bd70      	pop	{r4, r5, r6, pc}
 8014470:	ab01      	add	r3, sp, #4
 8014472:	466a      	mov	r2, sp
 8014474:	f7ff ffc8 	bl	8014408 <__swhatbuf_r>
 8014478:	9900      	ldr	r1, [sp, #0]
 801447a:	4605      	mov	r5, r0
 801447c:	4630      	mov	r0, r6
 801447e:	f000 f895 	bl	80145ac <_malloc_r>
 8014482:	b948      	cbnz	r0, 8014498 <__smakebuf_r+0x44>
 8014484:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014488:	059a      	lsls	r2, r3, #22
 801448a:	d4ef      	bmi.n	801446c <__smakebuf_r+0x18>
 801448c:	f023 0303 	bic.w	r3, r3, #3
 8014490:	f043 0302 	orr.w	r3, r3, #2
 8014494:	81a3      	strh	r3, [r4, #12]
 8014496:	e7e3      	b.n	8014460 <__smakebuf_r+0xc>
 8014498:	4b0d      	ldr	r3, [pc, #52]	; (80144d0 <__smakebuf_r+0x7c>)
 801449a:	62b3      	str	r3, [r6, #40]	; 0x28
 801449c:	89a3      	ldrh	r3, [r4, #12]
 801449e:	6020      	str	r0, [r4, #0]
 80144a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80144a4:	6120      	str	r0, [r4, #16]
 80144a6:	81a3      	strh	r3, [r4, #12]
 80144a8:	9b00      	ldr	r3, [sp, #0]
 80144aa:	6163      	str	r3, [r4, #20]
 80144ac:	9b01      	ldr	r3, [sp, #4]
 80144ae:	b15b      	cbz	r3, 80144c8 <__smakebuf_r+0x74>
 80144b0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80144b4:	4630      	mov	r0, r6
 80144b6:	f000 f975 	bl	80147a4 <_isatty_r>
 80144ba:	b128      	cbz	r0, 80144c8 <__smakebuf_r+0x74>
 80144bc:	89a3      	ldrh	r3, [r4, #12]
 80144be:	f023 0303 	bic.w	r3, r3, #3
 80144c2:	f043 0301 	orr.w	r3, r3, #1
 80144c6:	81a3      	strh	r3, [r4, #12]
 80144c8:	89a0      	ldrh	r0, [r4, #12]
 80144ca:	4305      	orrs	r5, r0
 80144cc:	81a5      	strh	r5, [r4, #12]
 80144ce:	e7cd      	b.n	801446c <__smakebuf_r+0x18>
 80144d0:	08014261 	.word	0x08014261

080144d4 <_free_r>:
 80144d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80144d6:	2900      	cmp	r1, #0
 80144d8:	d043      	beq.n	8014562 <_free_r+0x8e>
 80144da:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80144de:	1f0c      	subs	r4, r1, #4
 80144e0:	9001      	str	r0, [sp, #4]
 80144e2:	2b00      	cmp	r3, #0
 80144e4:	bfb8      	it	lt
 80144e6:	18e4      	addlt	r4, r4, r3
 80144e8:	f000 f97e 	bl	80147e8 <__malloc_lock>
 80144ec:	4a1e      	ldr	r2, [pc, #120]	; (8014568 <_free_r+0x94>)
 80144ee:	9801      	ldr	r0, [sp, #4]
 80144f0:	6813      	ldr	r3, [r2, #0]
 80144f2:	b933      	cbnz	r3, 8014502 <_free_r+0x2e>
 80144f4:	6063      	str	r3, [r4, #4]
 80144f6:	6014      	str	r4, [r2, #0]
 80144f8:	b003      	add	sp, #12
 80144fa:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80144fe:	f000 b979 	b.w	80147f4 <__malloc_unlock>
 8014502:	42a3      	cmp	r3, r4
 8014504:	d908      	bls.n	8014518 <_free_r+0x44>
 8014506:	6825      	ldr	r5, [r4, #0]
 8014508:	1961      	adds	r1, r4, r5
 801450a:	428b      	cmp	r3, r1
 801450c:	bf01      	itttt	eq
 801450e:	6819      	ldreq	r1, [r3, #0]
 8014510:	685b      	ldreq	r3, [r3, #4]
 8014512:	1949      	addeq	r1, r1, r5
 8014514:	6021      	streq	r1, [r4, #0]
 8014516:	e7ed      	b.n	80144f4 <_free_r+0x20>
 8014518:	461a      	mov	r2, r3
 801451a:	685b      	ldr	r3, [r3, #4]
 801451c:	b10b      	cbz	r3, 8014522 <_free_r+0x4e>
 801451e:	42a3      	cmp	r3, r4
 8014520:	d9fa      	bls.n	8014518 <_free_r+0x44>
 8014522:	6811      	ldr	r1, [r2, #0]
 8014524:	1855      	adds	r5, r2, r1
 8014526:	42a5      	cmp	r5, r4
 8014528:	d10b      	bne.n	8014542 <_free_r+0x6e>
 801452a:	6824      	ldr	r4, [r4, #0]
 801452c:	4421      	add	r1, r4
 801452e:	1854      	adds	r4, r2, r1
 8014530:	6011      	str	r1, [r2, #0]
 8014532:	42a3      	cmp	r3, r4
 8014534:	d1e0      	bne.n	80144f8 <_free_r+0x24>
 8014536:	681c      	ldr	r4, [r3, #0]
 8014538:	685b      	ldr	r3, [r3, #4]
 801453a:	4421      	add	r1, r4
 801453c:	6053      	str	r3, [r2, #4]
 801453e:	6011      	str	r1, [r2, #0]
 8014540:	e7da      	b.n	80144f8 <_free_r+0x24>
 8014542:	d902      	bls.n	801454a <_free_r+0x76>
 8014544:	230c      	movs	r3, #12
 8014546:	6003      	str	r3, [r0, #0]
 8014548:	e7d6      	b.n	80144f8 <_free_r+0x24>
 801454a:	6825      	ldr	r5, [r4, #0]
 801454c:	1961      	adds	r1, r4, r5
 801454e:	428b      	cmp	r3, r1
 8014550:	bf02      	ittt	eq
 8014552:	6819      	ldreq	r1, [r3, #0]
 8014554:	685b      	ldreq	r3, [r3, #4]
 8014556:	1949      	addeq	r1, r1, r5
 8014558:	6063      	str	r3, [r4, #4]
 801455a:	bf08      	it	eq
 801455c:	6021      	streq	r1, [r4, #0]
 801455e:	6054      	str	r4, [r2, #4]
 8014560:	e7ca      	b.n	80144f8 <_free_r+0x24>
 8014562:	b003      	add	sp, #12
 8014564:	bd30      	pop	{r4, r5, pc}
 8014566:	bf00      	nop
 8014568:	2001cff4 	.word	0x2001cff4

0801456c <sbrk_aligned>:
 801456c:	b570      	push	{r4, r5, r6, lr}
 801456e:	4e0e      	ldr	r6, [pc, #56]	; (80145a8 <sbrk_aligned+0x3c>)
 8014570:	460c      	mov	r4, r1
 8014572:	4605      	mov	r5, r0
 8014574:	6831      	ldr	r1, [r6, #0]
 8014576:	b911      	cbnz	r1, 801457e <sbrk_aligned+0x12>
 8014578:	f000 f88c 	bl	8014694 <_sbrk_r>
 801457c:	6030      	str	r0, [r6, #0]
 801457e:	4621      	mov	r1, r4
 8014580:	4628      	mov	r0, r5
 8014582:	f000 f887 	bl	8014694 <_sbrk_r>
 8014586:	1c43      	adds	r3, r0, #1
 8014588:	d00a      	beq.n	80145a0 <sbrk_aligned+0x34>
 801458a:	1cc4      	adds	r4, r0, #3
 801458c:	f024 0403 	bic.w	r4, r4, #3
 8014590:	42a0      	cmp	r0, r4
 8014592:	d007      	beq.n	80145a4 <sbrk_aligned+0x38>
 8014594:	1a21      	subs	r1, r4, r0
 8014596:	4628      	mov	r0, r5
 8014598:	f000 f87c 	bl	8014694 <_sbrk_r>
 801459c:	3001      	adds	r0, #1
 801459e:	d101      	bne.n	80145a4 <sbrk_aligned+0x38>
 80145a0:	f04f 34ff 	mov.w	r4, #4294967295
 80145a4:	4620      	mov	r0, r4
 80145a6:	bd70      	pop	{r4, r5, r6, pc}
 80145a8:	2001cff8 	.word	0x2001cff8

080145ac <_malloc_r>:
 80145ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80145b0:	1ccd      	adds	r5, r1, #3
 80145b2:	4607      	mov	r7, r0
 80145b4:	f025 0503 	bic.w	r5, r5, #3
 80145b8:	3508      	adds	r5, #8
 80145ba:	2d0c      	cmp	r5, #12
 80145bc:	bf38      	it	cc
 80145be:	250c      	movcc	r5, #12
 80145c0:	2d00      	cmp	r5, #0
 80145c2:	db01      	blt.n	80145c8 <_malloc_r+0x1c>
 80145c4:	42a9      	cmp	r1, r5
 80145c6:	d905      	bls.n	80145d4 <_malloc_r+0x28>
 80145c8:	230c      	movs	r3, #12
 80145ca:	2600      	movs	r6, #0
 80145cc:	603b      	str	r3, [r7, #0]
 80145ce:	4630      	mov	r0, r6
 80145d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80145d4:	4e2e      	ldr	r6, [pc, #184]	; (8014690 <_malloc_r+0xe4>)
 80145d6:	f000 f907 	bl	80147e8 <__malloc_lock>
 80145da:	6833      	ldr	r3, [r6, #0]
 80145dc:	461c      	mov	r4, r3
 80145de:	bb34      	cbnz	r4, 801462e <_malloc_r+0x82>
 80145e0:	4629      	mov	r1, r5
 80145e2:	4638      	mov	r0, r7
 80145e4:	f7ff ffc2 	bl	801456c <sbrk_aligned>
 80145e8:	1c43      	adds	r3, r0, #1
 80145ea:	4604      	mov	r4, r0
 80145ec:	d14d      	bne.n	801468a <_malloc_r+0xde>
 80145ee:	6834      	ldr	r4, [r6, #0]
 80145f0:	4626      	mov	r6, r4
 80145f2:	2e00      	cmp	r6, #0
 80145f4:	d140      	bne.n	8014678 <_malloc_r+0xcc>
 80145f6:	6823      	ldr	r3, [r4, #0]
 80145f8:	4631      	mov	r1, r6
 80145fa:	4638      	mov	r0, r7
 80145fc:	eb04 0803 	add.w	r8, r4, r3
 8014600:	f000 f848 	bl	8014694 <_sbrk_r>
 8014604:	4580      	cmp	r8, r0
 8014606:	d13a      	bne.n	801467e <_malloc_r+0xd2>
 8014608:	6821      	ldr	r1, [r4, #0]
 801460a:	3503      	adds	r5, #3
 801460c:	4638      	mov	r0, r7
 801460e:	1a6d      	subs	r5, r5, r1
 8014610:	f025 0503 	bic.w	r5, r5, #3
 8014614:	3508      	adds	r5, #8
 8014616:	2d0c      	cmp	r5, #12
 8014618:	bf38      	it	cc
 801461a:	250c      	movcc	r5, #12
 801461c:	4629      	mov	r1, r5
 801461e:	f7ff ffa5 	bl	801456c <sbrk_aligned>
 8014622:	3001      	adds	r0, #1
 8014624:	d02b      	beq.n	801467e <_malloc_r+0xd2>
 8014626:	6823      	ldr	r3, [r4, #0]
 8014628:	442b      	add	r3, r5
 801462a:	6023      	str	r3, [r4, #0]
 801462c:	e00e      	b.n	801464c <_malloc_r+0xa0>
 801462e:	6822      	ldr	r2, [r4, #0]
 8014630:	1b52      	subs	r2, r2, r5
 8014632:	d41e      	bmi.n	8014672 <_malloc_r+0xc6>
 8014634:	2a0b      	cmp	r2, #11
 8014636:	d916      	bls.n	8014666 <_malloc_r+0xba>
 8014638:	1961      	adds	r1, r4, r5
 801463a:	42a3      	cmp	r3, r4
 801463c:	6025      	str	r5, [r4, #0]
 801463e:	bf18      	it	ne
 8014640:	6059      	strne	r1, [r3, #4]
 8014642:	6863      	ldr	r3, [r4, #4]
 8014644:	bf08      	it	eq
 8014646:	6031      	streq	r1, [r6, #0]
 8014648:	5162      	str	r2, [r4, r5]
 801464a:	604b      	str	r3, [r1, #4]
 801464c:	f104 060b 	add.w	r6, r4, #11
 8014650:	4638      	mov	r0, r7
 8014652:	f000 f8cf 	bl	80147f4 <__malloc_unlock>
 8014656:	1d23      	adds	r3, r4, #4
 8014658:	f026 0607 	bic.w	r6, r6, #7
 801465c:	1af2      	subs	r2, r6, r3
 801465e:	d0b6      	beq.n	80145ce <_malloc_r+0x22>
 8014660:	1b9b      	subs	r3, r3, r6
 8014662:	50a3      	str	r3, [r4, r2]
 8014664:	e7b3      	b.n	80145ce <_malloc_r+0x22>
 8014666:	6862      	ldr	r2, [r4, #4]
 8014668:	42a3      	cmp	r3, r4
 801466a:	bf0c      	ite	eq
 801466c:	6032      	streq	r2, [r6, #0]
 801466e:	605a      	strne	r2, [r3, #4]
 8014670:	e7ec      	b.n	801464c <_malloc_r+0xa0>
 8014672:	4623      	mov	r3, r4
 8014674:	6864      	ldr	r4, [r4, #4]
 8014676:	e7b2      	b.n	80145de <_malloc_r+0x32>
 8014678:	4634      	mov	r4, r6
 801467a:	6876      	ldr	r6, [r6, #4]
 801467c:	e7b9      	b.n	80145f2 <_malloc_r+0x46>
 801467e:	230c      	movs	r3, #12
 8014680:	4638      	mov	r0, r7
 8014682:	603b      	str	r3, [r7, #0]
 8014684:	f000 f8b6 	bl	80147f4 <__malloc_unlock>
 8014688:	e7a1      	b.n	80145ce <_malloc_r+0x22>
 801468a:	6025      	str	r5, [r4, #0]
 801468c:	e7de      	b.n	801464c <_malloc_r+0xa0>
 801468e:	bf00      	nop
 8014690:	2001cff4 	.word	0x2001cff4

08014694 <_sbrk_r>:
 8014694:	b538      	push	{r3, r4, r5, lr}
 8014696:	2300      	movs	r3, #0
 8014698:	4d05      	ldr	r5, [pc, #20]	; (80146b0 <_sbrk_r+0x1c>)
 801469a:	4604      	mov	r4, r0
 801469c:	4608      	mov	r0, r1
 801469e:	602b      	str	r3, [r5, #0]
 80146a0:	f7f2 f98a 	bl	80069b8 <_sbrk>
 80146a4:	1c43      	adds	r3, r0, #1
 80146a6:	d102      	bne.n	80146ae <_sbrk_r+0x1a>
 80146a8:	682b      	ldr	r3, [r5, #0]
 80146aa:	b103      	cbz	r3, 80146ae <_sbrk_r+0x1a>
 80146ac:	6023      	str	r3, [r4, #0]
 80146ae:	bd38      	pop	{r3, r4, r5, pc}
 80146b0:	2001cffc 	.word	0x2001cffc

080146b4 <__sread>:
 80146b4:	b510      	push	{r4, lr}
 80146b6:	460c      	mov	r4, r1
 80146b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80146bc:	f000 f8a0 	bl	8014800 <_read_r>
 80146c0:	2800      	cmp	r0, #0
 80146c2:	bfab      	itete	ge
 80146c4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80146c6:	89a3      	ldrhlt	r3, [r4, #12]
 80146c8:	181b      	addge	r3, r3, r0
 80146ca:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80146ce:	bfac      	ite	ge
 80146d0:	6563      	strge	r3, [r4, #84]	; 0x54
 80146d2:	81a3      	strhlt	r3, [r4, #12]
 80146d4:	bd10      	pop	{r4, pc}

080146d6 <__swrite>:
 80146d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80146da:	461f      	mov	r7, r3
 80146dc:	898b      	ldrh	r3, [r1, #12]
 80146de:	4605      	mov	r5, r0
 80146e0:	460c      	mov	r4, r1
 80146e2:	05db      	lsls	r3, r3, #23
 80146e4:	4616      	mov	r6, r2
 80146e6:	d505      	bpl.n	80146f4 <__swrite+0x1e>
 80146e8:	2302      	movs	r3, #2
 80146ea:	2200      	movs	r2, #0
 80146ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80146f0:	f000 f868 	bl	80147c4 <_lseek_r>
 80146f4:	89a3      	ldrh	r3, [r4, #12]
 80146f6:	4632      	mov	r2, r6
 80146f8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80146fc:	4628      	mov	r0, r5
 80146fe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8014702:	81a3      	strh	r3, [r4, #12]
 8014704:	463b      	mov	r3, r7
 8014706:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801470a:	f000 b817 	b.w	801473c <_write_r>

0801470e <__sseek>:
 801470e:	b510      	push	{r4, lr}
 8014710:	460c      	mov	r4, r1
 8014712:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014716:	f000 f855 	bl	80147c4 <_lseek_r>
 801471a:	1c43      	adds	r3, r0, #1
 801471c:	89a3      	ldrh	r3, [r4, #12]
 801471e:	bf15      	itete	ne
 8014720:	6560      	strne	r0, [r4, #84]	; 0x54
 8014722:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8014726:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801472a:	81a3      	strheq	r3, [r4, #12]
 801472c:	bf18      	it	ne
 801472e:	81a3      	strhne	r3, [r4, #12]
 8014730:	bd10      	pop	{r4, pc}

08014732 <__sclose>:
 8014732:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014736:	f000 b813 	b.w	8014760 <_close_r>
	...

0801473c <_write_r>:
 801473c:	b538      	push	{r3, r4, r5, lr}
 801473e:	4604      	mov	r4, r0
 8014740:	4d06      	ldr	r5, [pc, #24]	; (801475c <_write_r+0x20>)
 8014742:	4608      	mov	r0, r1
 8014744:	4611      	mov	r1, r2
 8014746:	2200      	movs	r2, #0
 8014748:	602a      	str	r2, [r5, #0]
 801474a:	461a      	mov	r2, r3
 801474c:	f7f2 f8e3 	bl	8006916 <_write>
 8014750:	1c43      	adds	r3, r0, #1
 8014752:	d102      	bne.n	801475a <_write_r+0x1e>
 8014754:	682b      	ldr	r3, [r5, #0]
 8014756:	b103      	cbz	r3, 801475a <_write_r+0x1e>
 8014758:	6023      	str	r3, [r4, #0]
 801475a:	bd38      	pop	{r3, r4, r5, pc}
 801475c:	2001cffc 	.word	0x2001cffc

08014760 <_close_r>:
 8014760:	b538      	push	{r3, r4, r5, lr}
 8014762:	2300      	movs	r3, #0
 8014764:	4d05      	ldr	r5, [pc, #20]	; (801477c <_close_r+0x1c>)
 8014766:	4604      	mov	r4, r0
 8014768:	4608      	mov	r0, r1
 801476a:	602b      	str	r3, [r5, #0]
 801476c:	f7f2 f8ef 	bl	800694e <_close>
 8014770:	1c43      	adds	r3, r0, #1
 8014772:	d102      	bne.n	801477a <_close_r+0x1a>
 8014774:	682b      	ldr	r3, [r5, #0]
 8014776:	b103      	cbz	r3, 801477a <_close_r+0x1a>
 8014778:	6023      	str	r3, [r4, #0]
 801477a:	bd38      	pop	{r3, r4, r5, pc}
 801477c:	2001cffc 	.word	0x2001cffc

08014780 <_fstat_r>:
 8014780:	b538      	push	{r3, r4, r5, lr}
 8014782:	2300      	movs	r3, #0
 8014784:	4d06      	ldr	r5, [pc, #24]	; (80147a0 <_fstat_r+0x20>)
 8014786:	4604      	mov	r4, r0
 8014788:	4608      	mov	r0, r1
 801478a:	4611      	mov	r1, r2
 801478c:	602b      	str	r3, [r5, #0]
 801478e:	f7f2 f8ea 	bl	8006966 <_fstat>
 8014792:	1c43      	adds	r3, r0, #1
 8014794:	d102      	bne.n	801479c <_fstat_r+0x1c>
 8014796:	682b      	ldr	r3, [r5, #0]
 8014798:	b103      	cbz	r3, 801479c <_fstat_r+0x1c>
 801479a:	6023      	str	r3, [r4, #0]
 801479c:	bd38      	pop	{r3, r4, r5, pc}
 801479e:	bf00      	nop
 80147a0:	2001cffc 	.word	0x2001cffc

080147a4 <_isatty_r>:
 80147a4:	b538      	push	{r3, r4, r5, lr}
 80147a6:	2300      	movs	r3, #0
 80147a8:	4d05      	ldr	r5, [pc, #20]	; (80147c0 <_isatty_r+0x1c>)
 80147aa:	4604      	mov	r4, r0
 80147ac:	4608      	mov	r0, r1
 80147ae:	602b      	str	r3, [r5, #0]
 80147b0:	f7f2 f8e9 	bl	8006986 <_isatty>
 80147b4:	1c43      	adds	r3, r0, #1
 80147b6:	d102      	bne.n	80147be <_isatty_r+0x1a>
 80147b8:	682b      	ldr	r3, [r5, #0]
 80147ba:	b103      	cbz	r3, 80147be <_isatty_r+0x1a>
 80147bc:	6023      	str	r3, [r4, #0]
 80147be:	bd38      	pop	{r3, r4, r5, pc}
 80147c0:	2001cffc 	.word	0x2001cffc

080147c4 <_lseek_r>:
 80147c4:	b538      	push	{r3, r4, r5, lr}
 80147c6:	4604      	mov	r4, r0
 80147c8:	4d06      	ldr	r5, [pc, #24]	; (80147e4 <_lseek_r+0x20>)
 80147ca:	4608      	mov	r0, r1
 80147cc:	4611      	mov	r1, r2
 80147ce:	2200      	movs	r2, #0
 80147d0:	602a      	str	r2, [r5, #0]
 80147d2:	461a      	mov	r2, r3
 80147d4:	f7f2 f8e2 	bl	800699c <_lseek>
 80147d8:	1c43      	adds	r3, r0, #1
 80147da:	d102      	bne.n	80147e2 <_lseek_r+0x1e>
 80147dc:	682b      	ldr	r3, [r5, #0]
 80147de:	b103      	cbz	r3, 80147e2 <_lseek_r+0x1e>
 80147e0:	6023      	str	r3, [r4, #0]
 80147e2:	bd38      	pop	{r3, r4, r5, pc}
 80147e4:	2001cffc 	.word	0x2001cffc

080147e8 <__malloc_lock>:
 80147e8:	4801      	ldr	r0, [pc, #4]	; (80147f0 <__malloc_lock+0x8>)
 80147ea:	f7ff be0b 	b.w	8014404 <__retarget_lock_acquire_recursive>
 80147ee:	bf00      	nop
 80147f0:	2001cff0 	.word	0x2001cff0

080147f4 <__malloc_unlock>:
 80147f4:	4801      	ldr	r0, [pc, #4]	; (80147fc <__malloc_unlock+0x8>)
 80147f6:	f7ff be06 	b.w	8014406 <__retarget_lock_release_recursive>
 80147fa:	bf00      	nop
 80147fc:	2001cff0 	.word	0x2001cff0

08014800 <_read_r>:
 8014800:	b538      	push	{r3, r4, r5, lr}
 8014802:	4604      	mov	r4, r0
 8014804:	4d06      	ldr	r5, [pc, #24]	; (8014820 <_read_r+0x20>)
 8014806:	4608      	mov	r0, r1
 8014808:	4611      	mov	r1, r2
 801480a:	2200      	movs	r2, #0
 801480c:	602a      	str	r2, [r5, #0]
 801480e:	461a      	mov	r2, r3
 8014810:	f7f2 f864 	bl	80068dc <_read>
 8014814:	1c43      	adds	r3, r0, #1
 8014816:	d102      	bne.n	801481e <_read_r+0x1e>
 8014818:	682b      	ldr	r3, [r5, #0]
 801481a:	b103      	cbz	r3, 801481e <_read_r+0x1e>
 801481c:	6023      	str	r3, [r4, #0]
 801481e:	bd38      	pop	{r3, r4, r5, pc}
 8014820:	2001cffc 	.word	0x2001cffc

08014824 <_init>:
 8014824:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014826:	bf00      	nop
 8014828:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801482a:	bc08      	pop	{r3}
 801482c:	469e      	mov	lr, r3
 801482e:	4770      	bx	lr

08014830 <_fini>:
 8014830:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014832:	bf00      	nop
 8014834:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014836:	bc08      	pop	{r3}
 8014838:	469e      	mov	lr, r3
 801483a:	4770      	bx	lr
