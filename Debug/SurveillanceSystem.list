
SurveillanceSystem.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000234  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000147ac  08000234  08000234  00010234  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000798  080149e0  080149e0  000249e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08015178  08015178  00025178  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08015180  08015180  00025180  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08015184  08015184  00025184  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .trace        00000000  20000000  20000000  00030078  2**0
                  CONTENTS
  7 .data         00000078  20000000  08015188  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .bss          000027c4  20000078  08015200  00030078  2**2
                  ALLOC
  9 ._user_heap_stack 00000604  2000283c  08015200  0003283c  2**0
                  ALLOC
 10 .ARM.attributes 00000036  00000000  00000000  00030078  2**0
                  CONTENTS, READONLY
 11 .debug_info   000447aa  00000000  00000000  000300ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 0000a77d  00000000  00000000  00074858  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00002ae8  00000000  00000000  0007efd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_ranges 000024d0  00000000  00000000  00081ac0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  000418de  00000000  00000000  00083f90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   000445f0  00000000  00000000  000c586e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0016a6ba  00000000  00000000  00109e5e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000050  00000000  00000000  00274518  2**0
                  CONTENTS, READONLY
 19 .debug_frame  0000a948  00000000  00000000  00274568  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000234 <__do_global_dtors_aux>:
 8000234:	b510      	push	{r4, lr}
 8000236:	4c05      	ldr	r4, [pc, #20]	; (800024c <__do_global_dtors_aux+0x18>)
 8000238:	7823      	ldrb	r3, [r4, #0]
 800023a:	b933      	cbnz	r3, 800024a <__do_global_dtors_aux+0x16>
 800023c:	4b04      	ldr	r3, [pc, #16]	; (8000250 <__do_global_dtors_aux+0x1c>)
 800023e:	b113      	cbz	r3, 8000246 <__do_global_dtors_aux+0x12>
 8000240:	4804      	ldr	r0, [pc, #16]	; (8000254 <__do_global_dtors_aux+0x20>)
 8000242:	e000      	b.n	8000246 <__do_global_dtors_aux+0x12>
 8000244:	bf00      	nop
 8000246:	2301      	movs	r3, #1
 8000248:	7023      	strb	r3, [r4, #0]
 800024a:	bd10      	pop	{r4, pc}
 800024c:	20000078 	.word	0x20000078
 8000250:	00000000 	.word	0x00000000
 8000254:	080149c8 	.word	0x080149c8

08000258 <frame_dummy>:
 8000258:	b508      	push	{r3, lr}
 800025a:	4b03      	ldr	r3, [pc, #12]	; (8000268 <frame_dummy+0x10>)
 800025c:	b11b      	cbz	r3, 8000266 <frame_dummy+0xe>
 800025e:	4903      	ldr	r1, [pc, #12]	; (800026c <frame_dummy+0x14>)
 8000260:	4803      	ldr	r0, [pc, #12]	; (8000270 <frame_dummy+0x18>)
 8000262:	e000      	b.n	8000266 <frame_dummy+0xe>
 8000264:	bf00      	nop
 8000266:	bd08      	pop	{r3, pc}
 8000268:	00000000 	.word	0x00000000
 800026c:	2000007c 	.word	0x2000007c
 8000270:	080149c8 	.word	0x080149c8

08000274 <_tx_initialize_low_level>:
    .thumb_func
.type _tx_initialize_low_level, function
_tx_initialize_low_level:

    /* Disable interrupts during ThreadX initialization.  */
    CPSID   i
 8000274:	b672      	cpsid	i
    LDR     r1, =__RAM_segment_used_end__           // Build first free address
    ADD     r1, r1, #4                              //
    STR     r1, [r0]                                // Setup first unused memory pointer
#endif
    /* Setup Vector Table Offset Register.  */
    MOV     r0, #0xE000E000                         // Build address of NVIC registers
 8000276:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
    LDR     r1, =g_pfnVectors                       // Pickup address of vector table
 800027a:	4917      	ldr	r1, [pc, #92]	; (80002d8 <__tx_DBGHandler+0x4>)
    STR     r1, [r0, #0xD08]                        // Set vector table address
 800027c:	f8c0 1d08 	str.w	r1, [r0, #3336]	; 0xd08

    /* Enable the cycle count register.  */
    LDR     r0, =0xE0001000                         // Build address of DWT register
 8000280:	4816      	ldr	r0, [pc, #88]	; (80002dc <__tx_DBGHandler+0x8>)
    LDR     r1, [r0]                                // Pickup the current value
 8000282:	6801      	ldr	r1, [r0, #0]
    ORR     r1, r1, #1                              // Set the CYCCNTENA bit
 8000284:	f041 0101 	orr.w	r1, r1, #1
    STR     r1, [r0]                                // Enable the cycle count register
 8000288:	6001      	str	r1, [r0, #0]

    /* Set system stack pointer from vector value.  */
    LDR     r0, =_tx_thread_system_stack_ptr        // Build address of system stack pointer
 800028a:	4815      	ldr	r0, [pc, #84]	; (80002e0 <__tx_DBGHandler+0xc>)
    LDR     r1, =g_pfnVectors                       // Pickup address of vector table
 800028c:	4912      	ldr	r1, [pc, #72]	; (80002d8 <__tx_DBGHandler+0x4>)
    LDR     r1, [r1]                                // Pickup reset stack pointer
 800028e:	6809      	ldr	r1, [r1, #0]
    STR     r1, [r0]                                // Save system stack pointer
 8000290:	6001      	str	r1, [r0, #0]

    /* Configure SysTick.  */
    MOV     r0, #0xE000E000                         // Build address of NVIC registers
 8000292:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
    LDR     r1, =SYSTICK_CYCLES
 8000296:	4913      	ldr	r1, [pc, #76]	; (80002e4 <__tx_DBGHandler+0x10>)
    STR     r1, [r0, #0x14]                         // Setup SysTick Reload Value
 8000298:	6141      	str	r1, [r0, #20]
    MOV     r1, #0x7                                // Build SysTick Control Enable Value
 800029a:	f04f 0107 	mov.w	r1, #7
    STR     r1, [r0, #0x10]                         // Setup SysTick Control
 800029e:	6101      	str	r1, [r0, #16]

    /* Configure handler priorities.  */
    LDR     r1, =0x00000000                         // Rsrv, UsgF, BusF, MemM
 80002a0:	f04f 0100 	mov.w	r1, #0
    STR     r1, [r0, #0xD18]                        // Setup System Handlers 4-7 Priority Registers
 80002a4:	f8c0 1d18 	str.w	r1, [r0, #3352]	; 0xd18

    LDR     r1, =0xFF000000                         // SVCl, Rsrv, Rsrv, Rsrv
 80002a8:	f04f 417f 	mov.w	r1, #4278190080	; 0xff000000
    STR     r1, [r0, #0xD1C]                        // Setup System Handlers 8-11 Priority Registers
 80002ac:	f8c0 1d1c 	str.w	r1, [r0, #3356]	; 0xd1c
                                                    // Note: SVC must be lowest priority, which is 0xFF

    LDR     r1, =0x40FF0000                         // SysT, PnSV, Rsrv, DbgM
 80002b0:	490d      	ldr	r1, [pc, #52]	; (80002e8 <__tx_DBGHandler+0x14>)
    STR     r1, [r0, #0xD20]                        // Setup System Handlers 12-15 Priority Registers
 80002b2:	f8c0 1d20 	str.w	r1, [r0, #3360]	; 0xd20
                                                    // Note: PnSV must be lowest priority, which is 0xFF

    /* Return to caller.  */
    BX      lr
 80002b6:	4770      	bx	lr

080002b8 <__tx_BadHandler>:
    .eabi_attribute Tag_ABI_align_preserved, 1
    .global  __tx_BadHandler
    .thumb_func
.type __tx_BadHandler, function
__tx_BadHandler:
    B       __tx_BadHandler
 80002b8:	f7ff bffe 	b.w	80002b8 <__tx_BadHandler>

080002bc <__tx_IntHandler>:
    .thumb_func
.type __tx_IntHandler, function
__tx_IntHandler:
// VOID InterruptHandler (VOID)
// {
    PUSH    {r0,lr}     // Save LR (and dummy r0 to maintain stack alignment)
 80002bc:	b501      	push	{r0, lr}
    /* Do interrupt handler work here */
    /* .... */
#if (defined(TX_ENABLE_EXECUTION_CHANGE_NOTIFY) || defined(TX_EXECUTION_PROFILE_ENABLE))
    BL      _tx_execution_isr_exit              // Call the ISR exit function
#endif
    POP     {r0,lr}
 80002be:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    BX      lr
 80002c2:	4770      	bx	lr

080002c4 <SysTick_Handler>:
    .thumb_func
.type SysTick_Handler, function
SysTick_Handler:
// VOID TimerInterruptHandler (VOID)
// {
    PUSH    {r0,lr}     // Save LR (and dummy r0 to maintain stack alignment)
 80002c4:	b501      	push	{r0, lr}
#if (defined(TX_ENABLE_EXECUTION_CHANGE_NOTIFY) || defined(TX_EXECUTION_PROFILE_ENABLE))
    BL      _tx_execution_isr_enter             // Call the ISR enter function
#endif
    BL      _tx_timer_interrupt
 80002c6:	f000 f897 	bl	80003f8 <_tx_timer_interrupt>
#if (defined(TX_ENABLE_EXECUTION_CHANGE_NOTIFY) || defined(TX_EXECUTION_PROFILE_ENABLE))
    BL      _tx_execution_isr_exit              // Call the ISR exit function
#endif
    POP     {r0,lr}
 80002ca:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    BX      lr
 80002ce:	4770      	bx	lr

080002d0 <__tx_NMIHandler>:
    .eabi_attribute Tag_ABI_align_preserved, 1
    .global  __tx_NMIHandler
    .thumb_func
.type __tx_NMIHandler, function
__tx_NMIHandler:
    B       __tx_NMIHandler
 80002d0:	f7ff bffe 	b.w	80002d0 <__tx_NMIHandler>

080002d4 <__tx_DBGHandler>:
    .eabi_attribute Tag_ABI_align_preserved, 1
    .global  __tx_DBGHandler
    .thumb_func
.type __tx_DBGHandler, function
__tx_DBGHandler:
    B       __tx_DBGHandler
 80002d4:	f7ff bffe 	b.w	80002d4 <__tx_DBGHandler>
    LDR     r1, =g_pfnVectors                       // Pickup address of vector table
 80002d8:	08000000 	.word	0x08000000
    LDR     r0, =0xE0001000                         // Build address of DWT register
 80002dc:	e0001000 	.word	0xe0001000
    LDR     r0, =_tx_thread_system_stack_ptr        // Build address of system stack pointer
 80002e0:	200021f4 	.word	0x200021f4
    LDR     r1, =SYSTICK_CYCLES
 80002e4:	001869ff 	.word	0x001869ff
    LDR     r1, =0x40FF0000                         // SysT, PnSV, Rsrv, DbgM
 80002e8:	40ff0000 	.word	0x40ff0000

080002ec <_tx_thread_schedule>:
    /* This function should only ever be called on Cortex-M
       from the first schedule request. Subsequent scheduling occurs
       from the PendSV handling routine below. */

    /* Clear the preempt-disable flag to enable rescheduling after initialization on Cortex-M targets.  */
    MOV     r0, #0                                  // Build value for TX_FALSE
 80002ec:	f04f 0000 	mov.w	r0, #0
    LDR     r2, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 80002f0:	4a2d      	ldr	r2, [pc, #180]	; (80003a8 <_tx_vfp_access+0x4>)
    STR     r0, [r2, #0]                            // Clear preempt disable flag
 80002f2:	6010      	str	r0, [r2, #0]

#ifdef __ARM_FP
    /* Clear CONTROL.FPCA bit so VFP registers aren't unnecessarily stacked.  */
    MRS     r0, CONTROL                             // Pickup current CONTROL register
 80002f4:	f3ef 8014 	mrs	r0, CONTROL
    BIC     r0, r0, #4                              // Clear the FPCA bit
 80002f8:	f020 0004 	bic.w	r0, r0, #4
    MSR     CONTROL, r0                             // Setup new CONTROL register
 80002fc:	f380 8814 	msr	CONTROL, r0
#endif

    /* Enable interrupts */
    CPSIE   i
 8000300:	b662      	cpsie	i

    /* Enter the scheduler for the first time.  */
    MOV     r0, #0x10000000                         // Load PENDSVSET bit
 8000302:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    MOV     r1, #0xE000E000                         // Load NVIC base
 8000306:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    STR     r0, [r1, #0xD04]                        // Set PENDSVBIT in ICSR
 800030a:	f8c1 0d04 	str.w	r0, [r1, #3332]	; 0xd04
    DSB                                             // Complete all memory accesses
 800030e:	f3bf 8f4f 	dsb	sy
    ISB                                             // Flush pipeline
 8000312:	f3bf 8f6f 	isb	sy

08000316 <__tx_wait_here>:

    /* Wait here for the PendSV to take place.  */

__tx_wait_here:
    B       __tx_wait_here                          // Wait for the PendSV to happen
 8000316:	e7fe      	b.n	8000316 <__tx_wait_here>

08000318 <PendSV_Handler>:
    BL      _tx_execution_thread_exit               // Call the thread exit function
    POP     {r0, lr}                                // Recover LR
    CPSIE   i                                       // Enable interrupts
#endif

    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 8000318:	4824      	ldr	r0, [pc, #144]	; (80003ac <_tx_vfp_access+0x8>)
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 800031a:	4a25      	ldr	r2, [pc, #148]	; (80003b0 <_tx_vfp_access+0xc>)
    MOV     r3, #0                                  // Build NULL value
 800031c:	f04f 0300 	mov.w	r3, #0
    LDR     r1, [r0]                                // Pickup current thread pointer
 8000320:	6801      	ldr	r1, [r0, #0]

    /* Determine if there is a current thread to finish preserving.  */

    CBZ     r1, __tx_ts_new                         // If NULL, skip preservation
 8000322:	b191      	cbz	r1, 800034a <__tx_ts_new>

    /* Recover PSP and preserve current thread context.  */

    STR     r3, [r0]                                // Set _tx_thread_current_ptr to NULL
 8000324:	6003      	str	r3, [r0, #0]
    MRS     r12, PSP                                // Pickup PSP pointer (thread's stack pointer)
 8000326:	f3ef 8c09 	mrs	ip, PSP
    STMDB   r12!, {r4-r11}                          // Save its remaining registers
 800032a:	e92c 0ff0 	stmdb	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
#ifdef __ARM_FP
    TST     LR, #0x10                               // Determine if the VFP extended frame is present
 800032e:	f01e 0f10 	tst.w	lr, #16
    BNE     _skip_vfp_save
 8000332:	d101      	bne.n	8000338 <_skip_vfp_save>
    VSTMDB  r12!,{s16-s31}                          // Yes, save additional VFP registers
 8000334:	ed2c 8a10 	vstmdb	ip!, {s16-s31}

08000338 <_skip_vfp_save>:
_skip_vfp_save:
#endif
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 8000338:	4c1e      	ldr	r4, [pc, #120]	; (80003b4 <_tx_vfp_access+0x10>)
    STMDB   r12!, {LR}                              // Save LR on the stack
 800033a:	f84c ed04 	str.w	lr, [ip, #-4]!
    STR     r12, [r1, #8]                           // Save the thread stack pointer
 800033e:	f8c1 c008 	str.w	ip, [r1, #8]
_skip_secure_save:
#endif

    /* Determine if time-slice is active. If it isn't, skip time handling processing.  */

    LDR     r5, [r4]                                // Pickup current time-slice
 8000342:	6825      	ldr	r5, [r4, #0]
    CBZ     r5, __tx_ts_new                         // If not active, skip processing
 8000344:	b10d      	cbz	r5, 800034a <__tx_ts_new>

    /* Time-slice is active, save the current thread's time-slice and clear the global time-slice variable.  */

    STR     r5, [r1, #24]                           // Save current time-slice
 8000346:	618d      	str	r5, [r1, #24]

    /* Clear the global time-slice.  */

    STR     r3, [r4]                                // Clear time-slice
 8000348:	6023      	str	r3, [r4, #0]

0800034a <__tx_ts_new>:

__tx_ts_new:

    /* Now we are looking for a new thread to execute!  */

    CPSID   i                                       // Disable interrupts
 800034a:	b672      	cpsid	i
    LDR     r1, [r2]                                // Is there another thread ready to execute?
 800034c:	6811      	ldr	r1, [r2, #0]
    CBZ     r1, __tx_ts_wait                        // No, skip to the wait processing
 800034e:	b1d1      	cbz	r1, 8000386 <__tx_ts_wait>

    /* Yes, another thread is ready for else, make the current thread the new thread.  */

    STR     r1, [r0]                                // Setup the current thread pointer to the new thread
 8000350:	6001      	str	r1, [r0, #0]
    CPSIE   i                                       // Enable interrupts
 8000352:	b662      	cpsie	i

08000354 <__tx_ts_restore>:

    /* Increment the thread run count.  */

__tx_ts_restore:
    LDR     r7, [r1, #4]                            // Pickup the current thread run count
 8000354:	684f      	ldr	r7, [r1, #4]
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 8000356:	4c17      	ldr	r4, [pc, #92]	; (80003b4 <_tx_vfp_access+0x10>)
    LDR     r5, [r1, #24]                           // Pickup thread's current time-slice
 8000358:	698d      	ldr	r5, [r1, #24]
    ADD     r7, r7, #1                              // Increment the thread run count
 800035a:	f107 0701 	add.w	r7, r7, #1
    STR     r7, [r1, #4]                            // Store the new run count
 800035e:	604f      	str	r7, [r1, #4]

    /* Setup global time-slice with thread's current time-slice.  */

    STR     r5, [r4]                                // Setup global time-slice
 8000360:	6025      	str	r5, [r4, #0]
    POP     {r0,r1}                                 // Restore r1 (and dummy r0)
_skip_secure_restore:
#endif

    /* Restore the thread context and PSP.  */
    LDR     r12, [r1, #12]                          // Get stack start
 8000362:	f8d1 c00c 	ldr.w	ip, [r1, #12]
    MSR     PSPLIM, r12                             // Set stack limit
 8000366:	f38c 880b 	msr	PSPLIM, ip
    LDR     r12, [r1, #8]                           // Pickup thread's stack pointer
 800036a:	f8d1 c008 	ldr.w	ip, [r1, #8]
    LDMIA   r12!, {LR}                              // Pickup LR
 800036e:	f85c eb04 	ldr.w	lr, [ip], #4
#ifdef __ARM_FP
    TST     LR, #0x10                               // Determine if the VFP extended frame is present
 8000372:	f01e 0f10 	tst.w	lr, #16
    BNE     _skip_vfp_restore                       // If not, skip VFP restore
 8000376:	d101      	bne.n	800037c <_skip_vfp_restore>
    VLDMIA  r12!, {s16-s31}                         // Yes, restore additional VFP registers
 8000378:	ecbc 8a10 	vldmia	ip!, {s16-s31}

0800037c <_skip_vfp_restore>:
_skip_vfp_restore:
#endif
    LDMIA   r12!, {r4-r11}                          // Recover thread's registers
 800037c:	e8bc 0ff0 	ldmia.w	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
    MSR     PSP, r12                                // Setup the thread's stack pointer
 8000380:	f38c 8809 	msr	PSP, ip

    BX      lr                                      // Return to thread!
 8000384:	4770      	bx	lr

08000386 <__tx_ts_wait>:
    /* The following is the idle wait processing... in this case, no threads are ready for execution and the
       system will simply be idle until an interrupt occurs that makes a thread ready. Note that interrupts
       are disabled to allow use of WFI for waiting for a thread to arrive.  */

__tx_ts_wait:
    CPSID   i                                       // Disable interrupts
 8000386:	b672      	cpsid	i
    LDR     r1, [r2]                                // Pickup the next thread to execute pointer
 8000388:	6811      	ldr	r1, [r2, #0]
    STR     r1, [r0]                                // Store it in the current pointer
 800038a:	6001      	str	r1, [r0, #0]
    CBNZ    r1, __tx_ts_ready                       // If non-NULL, a new thread is ready!
 800038c:	b909      	cbnz	r1, 8000392 <__tx_ts_ready>
    PUSH    {r0-r3}
    BL      tx_low_power_exit                       // Exit low power mode
    POP     {r0-r3}
#endif

    CPSIE   i                                       // Enable interrupts
 800038e:	b662      	cpsie	i
    B       __tx_ts_wait                            // Loop to continue waiting
 8000390:	e7f9      	b.n	8000386 <__tx_ts_wait>

08000392 <__tx_ts_ready>:

    /* At this point, we have a new thread ready to go. Clear any newly pended PendSV - since we are
       already in the handler!  */
__tx_ts_ready:
    MOV     r7, #0x08000000                         // Build clear PendSV value
 8000392:	f04f 6700 	mov.w	r7, #134217728	; 0x8000000
    MOV     r8, #0xE000E000                         // Build base NVIC address
 8000396:	f04f 28e0 	mov.w	r8, #3758153728	; 0xe000e000
    STR     r7, [r8, #0xD04]                        // Clear any PendSV
 800039a:	f8c8 7d04 	str.w	r7, [r8, #3332]	; 0xd04

    /* Re-enable interrupts and restore new thread.  */
    CPSIE   i                                       // Enable interrupts
 800039e:	b662      	cpsie	i
    B       __tx_ts_restore                         // Restore the thread
 80003a0:	e7d8      	b.n	8000354 <__tx_ts_restore>
 80003a2:	bf00      	nop

080003a4 <_tx_vfp_access>:
.type _tx_vfp_access, function
_tx_vfp_access:
#if TX_ENABLE_FPU_SUPPORT
    VMOV.F32 s0, s0                                 // Simply access the VFP
#endif
    BX       lr                                     // Return to caller
 80003a4:	4770      	bx	lr
 80003a6:	0000      	.short	0x0000
    LDR     r2, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 80003a8:	20002290 	.word	0x20002290
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 80003ac:	200021f8 	.word	0x200021f8
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 80003b0:	200021fc 	.word	0x200021fc
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 80003b4:	200027fc 	.word	0x200027fc

080003b8 <_tx_thread_stack_build>:
                       pc          Initial value for pc
                       xPSR        Initial value for xPSR

    Stack Bottom: (higher memory address)  */

    LDR     r2, [r0, #16]                           // Pickup end of stack area
 80003b8:	6902      	ldr	r2, [r0, #16]
    BIC     r2, r2, #0x7                            // Align frame for 8-byte alignment
 80003ba:	f022 0207 	bic.w	r2, r2, #7
    SUB     r2, r2, #68                             // Subtract frame size
 80003be:	f1a2 0244 	sub.w	r2, r2, #68	; 0x44
#ifdef TX_SINGLE_MODE_SECURE
    LDR     r3, =0xFFFFFFFD                         // Build initial LR value for secure mode
#else
    LDR     r3, =0xFFFFFFBC                         // Build initial LR value to return to non-secure PSP
 80003c2:	f06f 0343 	mvn.w	r3, #67	; 0x43
#endif
    STR     r3, [r2, #0]                            // Save on the stack
 80003c6:	6013      	str	r3, [r2, #0]

    /* Actually build the stack frame.  */

    MOV     r3, #0                                  // Build initial register value
 80003c8:	f04f 0300 	mov.w	r3, #0
    STR     r3, [r2, #4]                            // Store initial r4
 80003cc:	6053      	str	r3, [r2, #4]
    STR     r3, [r2, #8]                            // Store initial r5
 80003ce:	6093      	str	r3, [r2, #8]
    STR     r3, [r2, #12]                           // Store initial r6
 80003d0:	60d3      	str	r3, [r2, #12]
    STR     r3, [r2, #16]                           // Store initial r7
 80003d2:	6113      	str	r3, [r2, #16]
    STR     r3, [r2, #20]                           // Store initial r8
 80003d4:	6153      	str	r3, [r2, #20]
    STR     r3, [r2, #24]                           // Store initial r9
 80003d6:	6193      	str	r3, [r2, #24]
    STR     r3, [r2, #28]                           // Store initial r10
 80003d8:	61d3      	str	r3, [r2, #28]
    STR     r3, [r2, #32]                           // Store initial r11
 80003da:	6213      	str	r3, [r2, #32]

    /* Hardware stack follows.  */

    STR     r3, [r2, #36]                           // Store initial r0
 80003dc:	6253      	str	r3, [r2, #36]	; 0x24
    STR     r3, [r2, #40]                           // Store initial r1
 80003de:	6293      	str	r3, [r2, #40]	; 0x28
    STR     r3, [r2, #44]                           // Store initial r2
 80003e0:	62d3      	str	r3, [r2, #44]	; 0x2c
    STR     r3, [r2, #48]                           // Store initial r3
 80003e2:	6313      	str	r3, [r2, #48]	; 0x30
    STR     r3, [r2, #52]                           // Store initial r12
 80003e4:	6353      	str	r3, [r2, #52]	; 0x34
    MOV     r3, #0xFFFFFFFF                         // Poison EXC_RETURN value
 80003e6:	f04f 33ff 	mov.w	r3, #4294967295
    STR     r3, [r2, #56]                           // Store initial lr
 80003ea:	6393      	str	r3, [r2, #56]	; 0x38
    STR     r1, [r2, #60]                           // Store initial pc
 80003ec:	63d1      	str	r1, [r2, #60]	; 0x3c
    MOV     r3, #0x01000000                         // Only T-bit need be set
 80003ee:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    STR     r3, [r2, #64]                           // Store initial xPSR
 80003f2:	6413      	str	r3, [r2, #64]	; 0x40

    /* Setup stack pointer.  */
    // thread_ptr -> tx_thread_stack_ptr =  r2;

    STR     r2, [r0, #8]                            // Save stack pointer in thread's
 80003f4:	6082      	str	r2, [r0, #8]
                                                    //   control block
    BX      lr                                      // Return to caller
 80003f6:	4770      	bx	lr

080003f8 <_tx_timer_interrupt>:
       for use.  */

    /* Increment the system clock.  */
    // _tx_timer_system_clock++;

    LDR     r1, =_tx_timer_system_clock             // Pickup address of system clock
 80003f8:	4922      	ldr	r1, [pc, #136]	; (8000484 <__tx_timer_nothing_expired+0x8>)
    LDR     r0, [r1, #0]                            // Pickup system clock
 80003fa:	6808      	ldr	r0, [r1, #0]
    ADD     r0, r0, #1                              // Increment system clock
 80003fc:	f100 0001 	add.w	r0, r0, #1
    STR     r0, [r1, #0]                            // Store new system clock
 8000400:	6008      	str	r0, [r1, #0]

    /* Test for time-slice expiration.  */
    // if (_tx_timer_time_slice)
    // {

    LDR     r3, =_tx_timer_time_slice               // Pickup address of time-slice
 8000402:	4b21      	ldr	r3, [pc, #132]	; (8000488 <__tx_timer_nothing_expired+0xc>)
    LDR     r2, [r3, #0]                            // Pickup time-slice
 8000404:	681a      	ldr	r2, [r3, #0]
    CBZ     r2, __tx_timer_no_time_slice            // Is it non-active?
 8000406:	b13a      	cbz	r2, 8000418 <__tx_timer_no_time_slice>
                                                    // Yes, skip time-slice processing

       /* Decrement the time_slice.  */
       // _tx_timer_time_slice--;

    SUB     r2, r2, #1                              // Decrement the time-slice
 8000408:	f1a2 0201 	sub.w	r2, r2, #1
    STR     r2, [r3, #0]                            // Store new time-slice value
 800040c:	601a      	str	r2, [r3, #0]

       /* Check for expiration.  */
       // if (__tx_timer_time_slice == 0)

    CBNZ    r2, __tx_timer_no_time_slice            // Has it expired?
 800040e:	b91a      	cbnz	r2, 8000418 <__tx_timer_no_time_slice>
                                                    // No, skip expiration processing

       /* Set the time-slice expired flag.  */
       // _tx_timer_expired_time_slice =  TX_TRUE;

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup address of expired flag
 8000410:	4b1e      	ldr	r3, [pc, #120]	; (800048c <__tx_timer_nothing_expired+0x10>)
    MOV     r0, #1                                  // Build expired value
 8000412:	f04f 0001 	mov.w	r0, #1
    STR     r0, [r3, #0]                            // Set time-slice expiration flag
 8000416:	6018      	str	r0, [r3, #0]

08000418 <__tx_timer_no_time_slice>:

    /* Test for timer expiration.  */
    // if (*_tx_timer_current_ptr)
    // {

    LDR     r1, =_tx_timer_current_ptr              // Pickup current timer pointer address
 8000418:	491d      	ldr	r1, [pc, #116]	; (8000490 <__tx_timer_nothing_expired+0x14>)
    LDR     r0, [r1, #0]                            // Pickup current timer
 800041a:	6808      	ldr	r0, [r1, #0]
    LDR     r2, [r0, #0]                            // Pickup timer list entry
 800041c:	6802      	ldr	r2, [r0, #0]
    CBZ     r2, __tx_timer_no_timer                 // Is there anything in the list?
 800041e:	b122      	cbz	r2, 800042a <__tx_timer_no_timer>
                                                    // No, just increment the timer

        /* Set expiration flag.  */
        // _tx_timer_expired =  TX_TRUE;

    LDR     r3, =_tx_timer_expired                  // Pickup expiration flag address
 8000420:	4b1c      	ldr	r3, [pc, #112]	; (8000494 <__tx_timer_nothing_expired+0x18>)
    MOV     r2, #1                                  // Build expired value
 8000422:	f04f 0201 	mov.w	r2, #1
    STR     r2, [r3, #0]                            // Set expired flag
 8000426:	601a      	str	r2, [r3, #0]
    B       __tx_timer_done                         // Finished timer processing
 8000428:	e008      	b.n	800043c <__tx_timer_done>

0800042a <__tx_timer_no_timer>:
__tx_timer_no_timer:

        /* No timer expired, increment the timer pointer.  */
        // _tx_timer_current_ptr++;

    ADD     r0, r0, #4                              // Move to next timer
 800042a:	f100 0004 	add.w	r0, r0, #4

        /* Check for wrap-around.  */
        // if (_tx_timer_current_ptr == _tx_timer_list_end)

    LDR     r3, =_tx_timer_list_end                 // Pickup addr of timer list end
 800042e:	4b1a      	ldr	r3, [pc, #104]	; (8000498 <__tx_timer_nothing_expired+0x1c>)
    LDR     r2, [r3, #0]                            // Pickup list end
 8000430:	681a      	ldr	r2, [r3, #0]
    CMP     r0, r2                                  // Are we at list end?
 8000432:	4290      	cmp	r0, r2
    BNE     __tx_timer_skip_wrap                    // No, skip wrap-around logic
 8000434:	d101      	bne.n	800043a <__tx_timer_skip_wrap>

            /* Wrap to beginning of list.  */
            // _tx_timer_current_ptr =  _tx_timer_list_start;

    LDR     r3, =_tx_timer_list_start               // Pickup addr of timer list start
 8000436:	4b19      	ldr	r3, [pc, #100]	; (800049c <__tx_timer_nothing_expired+0x20>)
    LDR     r0, [r3, #0]                            // Set current pointer to list start
 8000438:	6818      	ldr	r0, [r3, #0]

0800043a <__tx_timer_skip_wrap>:

__tx_timer_skip_wrap:

    STR     r0, [r1, #0]                            // Store new current timer pointer
 800043a:	6008      	str	r0, [r1, #0]

0800043c <__tx_timer_done>:

    /* See if anything has expired.  */
    // if ((_tx_timer_expired_time_slice) || (_tx_timer_expired))
    // {

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup addr of expired flag
 800043c:	4b13      	ldr	r3, [pc, #76]	; (800048c <__tx_timer_nothing_expired+0x10>)
    LDR     r2, [r3, #0]                            // Pickup time-slice expired flag
 800043e:	681a      	ldr	r2, [r3, #0]
    CBNZ    r2, __tx_something_expired              // Did a time-slice expire?
 8000440:	b912      	cbnz	r2, 8000448 <__tx_something_expired>
                                                    // If non-zero, time-slice expired
    LDR     r1, =_tx_timer_expired                  // Pickup addr of other expired flag
 8000442:	4914      	ldr	r1, [pc, #80]	; (8000494 <__tx_timer_nothing_expired+0x18>)
    LDR     r0, [r1, #0]                            // Pickup timer expired flag
 8000444:	6808      	ldr	r0, [r1, #0]
    CBZ     r0, __tx_timer_nothing_expired          // Did a timer expire?
 8000446:	b1c8      	cbz	r0, 800047c <__tx_timer_nothing_expired>

08000448 <__tx_something_expired>:
                                                    // No, nothing expired

__tx_something_expired:

    PUSH    {r0, lr}                                // Save the lr register on the stack
 8000448:	b501      	push	{r0, lr}

    /* Did a timer expire?  */
    // if (_tx_timer_expired)
    // {

    LDR     r1, =_tx_timer_expired                  // Pickup addr of expired flag
 800044a:	4912      	ldr	r1, [pc, #72]	; (8000494 <__tx_timer_nothing_expired+0x18>)
    LDR     r0, [r1, #0]                            // Pickup timer expired flag
 800044c:	6808      	ldr	r0, [r1, #0]
    CBZ     r0, __tx_timer_dont_activate            // Check for timer expiration
 800044e:	b108      	cbz	r0, 8000454 <__tx_timer_dont_activate>
                                                    // If not set, skip timer activation

        /* Process timer expiration.  */
        // _tx_timer_expiration_process();

    BL      _tx_timer_expiration_process            // Call the timer expiration handling routine
 8000450:	f012 fed0 	bl	80131f4 <_tx_timer_expiration_process>

08000454 <__tx_timer_dont_activate>:

    /* Did time slice expire?  */
    // if (_tx_timer_expired_time_slice)
    // {

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup addr of time-slice expired
 8000454:	4b0d      	ldr	r3, [pc, #52]	; (800048c <__tx_timer_nothing_expired+0x10>)
    LDR     r2, [r3, #0]                            // Pickup the actual flag
 8000456:	681a      	ldr	r2, [r3, #0]
    CBZ     r2, __tx_timer_not_ts_expiration        // See if the flag is set
 8000458:	b172      	cbz	r2, 8000478 <__tx_timer_not_ts_expiration>
                                                    // No, skip time-slice processing

        /* Time slice interrupted thread.  */
        // _tx_thread_time_slice();

    BL      _tx_thread_time_slice                   // Call time-slice processing
 800045a:	f012 fdaf 	bl	8012fbc <_tx_thread_time_slice>
    LDR     r0, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 800045e:	4810      	ldr	r0, [pc, #64]	; (80004a0 <__tx_timer_nothing_expired+0x24>)
    LDR     r1, [r0]                                // Is the preempt disable flag set?
 8000460:	6801      	ldr	r1, [r0, #0]
    CBNZ    r1, __tx_timer_skip_time_slice          // Yes, skip the PendSV logic
 8000462:	b949      	cbnz	r1, 8000478 <__tx_timer_not_ts_expiration>
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 8000464:	480f      	ldr	r0, [pc, #60]	; (80004a4 <__tx_timer_nothing_expired+0x28>)
    LDR     r1, [r0]                                // Pickup the current thread pointer
 8000466:	6801      	ldr	r1, [r0, #0]
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 8000468:	4a0f      	ldr	r2, [pc, #60]	; (80004a8 <__tx_timer_nothing_expired+0x2c>)
    LDR     r3, [r2]                                // Pickup the execute thread pointer
 800046a:	6813      	ldr	r3, [r2, #0]
    LDR     r0, =0xE000ED04                         // Build address of control register
 800046c:	480f      	ldr	r0, [pc, #60]	; (80004ac <__tx_timer_nothing_expired+0x30>)
    LDR     r2, =0x10000000                         // Build value for PendSV bit
 800046e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    CMP     r1, r3                                  // Are they the same?
 8000472:	4299      	cmp	r1, r3
    BEQ     __tx_timer_skip_time_slice              // If the same, there was no time-slice performed
 8000474:	d000      	beq.n	8000478 <__tx_timer_not_ts_expiration>
    STR     r2, [r0]                                // Not the same, issue the PendSV for preemption
 8000476:	6002      	str	r2, [r0, #0]

08000478 <__tx_timer_not_ts_expiration>:
__tx_timer_skip_time_slice:
    // }

__tx_timer_not_ts_expiration:

    POP     {r0, lr}                                // Recover lr register (r0 is just there for
 8000478:	e8bd 4001 	ldmia.w	sp!, {r0, lr}

0800047c <__tx_timer_nothing_expired>:

    // }

__tx_timer_nothing_expired:

    DSB                                             // Complete all memory access
 800047c:	f3bf 8f4f 	dsb	sy
    BX      lr                                      // Return to caller
 8000480:	4770      	bx	lr
 8000482:	0000      	.short	0x0000
    LDR     r1, =_tx_timer_system_clock             // Pickup address of system clock
 8000484:	2000229c 	.word	0x2000229c
    LDR     r3, =_tx_timer_time_slice               // Pickup address of time-slice
 8000488:	200027fc 	.word	0x200027fc
    LDR     r3, =_tx_timer_expired_time_slice       // Pickup address of expired flag
 800048c:	200022a0 	.word	0x200022a0
    LDR     r1, =_tx_timer_current_ptr              // Pickup current timer pointer address
 8000490:	2000232c 	.word	0x2000232c
    LDR     r3, =_tx_timer_expired                  // Pickup expiration flag address
 8000494:	20002330 	.word	0x20002330
    LDR     r3, =_tx_timer_list_end                 // Pickup addr of timer list end
 8000498:	20002328 	.word	0x20002328
    LDR     r3, =_tx_timer_list_start               // Pickup addr of timer list start
 800049c:	20002324 	.word	0x20002324
    LDR     r0, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 80004a0:	20002290 	.word	0x20002290
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 80004a4:	200021f8 	.word	0x200021f8
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 80004a8:	200021fc 	.word	0x200021fc
    LDR     r0, =0xE000ED04                         // Build address of control register
 80004ac:	e000ed04 	.word	0xe000ed04

080004b0 <__aeabi_drsub>:
 80004b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80004b4:	e002      	b.n	80004bc <__adddf3>
 80004b6:	bf00      	nop

080004b8 <__aeabi_dsub>:
 80004b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080004bc <__adddf3>:
 80004bc:	b530      	push	{r4, r5, lr}
 80004be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	bf1f      	itttt	ne
 80004d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80004d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80004da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80004de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004e2:	f000 80e2 	beq.w	80006aa <__adddf3+0x1ee>
 80004e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80004ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80004ee:	bfb8      	it	lt
 80004f0:	426d      	neglt	r5, r5
 80004f2:	dd0c      	ble.n	800050e <__adddf3+0x52>
 80004f4:	442c      	add	r4, r5
 80004f6:	ea80 0202 	eor.w	r2, r0, r2
 80004fa:	ea81 0303 	eor.w	r3, r1, r3
 80004fe:	ea82 0000 	eor.w	r0, r2, r0
 8000502:	ea83 0101 	eor.w	r1, r3, r1
 8000506:	ea80 0202 	eor.w	r2, r0, r2
 800050a:	ea81 0303 	eor.w	r3, r1, r3
 800050e:	2d36      	cmp	r5, #54	; 0x36
 8000510:	bf88      	it	hi
 8000512:	bd30      	pophi	{r4, r5, pc}
 8000514:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000518:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800051c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000520:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000524:	d002      	beq.n	800052c <__adddf3+0x70>
 8000526:	4240      	negs	r0, r0
 8000528:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800052c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000530:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000534:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000538:	d002      	beq.n	8000540 <__adddf3+0x84>
 800053a:	4252      	negs	r2, r2
 800053c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000540:	ea94 0f05 	teq	r4, r5
 8000544:	f000 80a7 	beq.w	8000696 <__adddf3+0x1da>
 8000548:	f1a4 0401 	sub.w	r4, r4, #1
 800054c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000550:	db0d      	blt.n	800056e <__adddf3+0xb2>
 8000552:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000556:	fa22 f205 	lsr.w	r2, r2, r5
 800055a:	1880      	adds	r0, r0, r2
 800055c:	f141 0100 	adc.w	r1, r1, #0
 8000560:	fa03 f20e 	lsl.w	r2, r3, lr
 8000564:	1880      	adds	r0, r0, r2
 8000566:	fa43 f305 	asr.w	r3, r3, r5
 800056a:	4159      	adcs	r1, r3
 800056c:	e00e      	b.n	800058c <__adddf3+0xd0>
 800056e:	f1a5 0520 	sub.w	r5, r5, #32
 8000572:	f10e 0e20 	add.w	lr, lr, #32
 8000576:	2a01      	cmp	r2, #1
 8000578:	fa03 fc0e 	lsl.w	ip, r3, lr
 800057c:	bf28      	it	cs
 800057e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000582:	fa43 f305 	asr.w	r3, r3, r5
 8000586:	18c0      	adds	r0, r0, r3
 8000588:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800058c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000590:	d507      	bpl.n	80005a2 <__adddf3+0xe6>
 8000592:	f04f 0e00 	mov.w	lr, #0
 8000596:	f1dc 0c00 	rsbs	ip, ip, #0
 800059a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800059e:	eb6e 0101 	sbc.w	r1, lr, r1
 80005a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80005a6:	d31b      	bcc.n	80005e0 <__adddf3+0x124>
 80005a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80005ac:	d30c      	bcc.n	80005c8 <__adddf3+0x10c>
 80005ae:	0849      	lsrs	r1, r1, #1
 80005b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80005b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005b8:	f104 0401 	add.w	r4, r4, #1
 80005bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80005c4:	f080 809a 	bcs.w	80006fc <__adddf3+0x240>
 80005c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80005cc:	bf08      	it	eq
 80005ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80005d2:	f150 0000 	adcs.w	r0, r0, #0
 80005d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005da:	ea41 0105 	orr.w	r1, r1, r5
 80005de:	bd30      	pop	{r4, r5, pc}
 80005e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80005e4:	4140      	adcs	r0, r0
 80005e6:	eb41 0101 	adc.w	r1, r1, r1
 80005ea:	3c01      	subs	r4, #1
 80005ec:	bf28      	it	cs
 80005ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80005f2:	d2e9      	bcs.n	80005c8 <__adddf3+0x10c>
 80005f4:	f091 0f00 	teq	r1, #0
 80005f8:	bf04      	itt	eq
 80005fa:	4601      	moveq	r1, r0
 80005fc:	2000      	moveq	r0, #0
 80005fe:	fab1 f381 	clz	r3, r1
 8000602:	bf08      	it	eq
 8000604:	3320      	addeq	r3, #32
 8000606:	f1a3 030b 	sub.w	r3, r3, #11
 800060a:	f1b3 0220 	subs.w	r2, r3, #32
 800060e:	da0c      	bge.n	800062a <__adddf3+0x16e>
 8000610:	320c      	adds	r2, #12
 8000612:	dd08      	ble.n	8000626 <__adddf3+0x16a>
 8000614:	f102 0c14 	add.w	ip, r2, #20
 8000618:	f1c2 020c 	rsb	r2, r2, #12
 800061c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000620:	fa21 f102 	lsr.w	r1, r1, r2
 8000624:	e00c      	b.n	8000640 <__adddf3+0x184>
 8000626:	f102 0214 	add.w	r2, r2, #20
 800062a:	bfd8      	it	le
 800062c:	f1c2 0c20 	rsble	ip, r2, #32
 8000630:	fa01 f102 	lsl.w	r1, r1, r2
 8000634:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000638:	bfdc      	itt	le
 800063a:	ea41 010c 	orrle.w	r1, r1, ip
 800063e:	4090      	lslle	r0, r2
 8000640:	1ae4      	subs	r4, r4, r3
 8000642:	bfa2      	ittt	ge
 8000644:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000648:	4329      	orrge	r1, r5
 800064a:	bd30      	popge	{r4, r5, pc}
 800064c:	ea6f 0404 	mvn.w	r4, r4
 8000650:	3c1f      	subs	r4, #31
 8000652:	da1c      	bge.n	800068e <__adddf3+0x1d2>
 8000654:	340c      	adds	r4, #12
 8000656:	dc0e      	bgt.n	8000676 <__adddf3+0x1ba>
 8000658:	f104 0414 	add.w	r4, r4, #20
 800065c:	f1c4 0220 	rsb	r2, r4, #32
 8000660:	fa20 f004 	lsr.w	r0, r0, r4
 8000664:	fa01 f302 	lsl.w	r3, r1, r2
 8000668:	ea40 0003 	orr.w	r0, r0, r3
 800066c:	fa21 f304 	lsr.w	r3, r1, r4
 8000670:	ea45 0103 	orr.w	r1, r5, r3
 8000674:	bd30      	pop	{r4, r5, pc}
 8000676:	f1c4 040c 	rsb	r4, r4, #12
 800067a:	f1c4 0220 	rsb	r2, r4, #32
 800067e:	fa20 f002 	lsr.w	r0, r0, r2
 8000682:	fa01 f304 	lsl.w	r3, r1, r4
 8000686:	ea40 0003 	orr.w	r0, r0, r3
 800068a:	4629      	mov	r1, r5
 800068c:	bd30      	pop	{r4, r5, pc}
 800068e:	fa21 f004 	lsr.w	r0, r1, r4
 8000692:	4629      	mov	r1, r5
 8000694:	bd30      	pop	{r4, r5, pc}
 8000696:	f094 0f00 	teq	r4, #0
 800069a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800069e:	bf06      	itte	eq
 80006a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80006a4:	3401      	addeq	r4, #1
 80006a6:	3d01      	subne	r5, #1
 80006a8:	e74e      	b.n	8000548 <__adddf3+0x8c>
 80006aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006ae:	bf18      	it	ne
 80006b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006b4:	d029      	beq.n	800070a <__adddf3+0x24e>
 80006b6:	ea94 0f05 	teq	r4, r5
 80006ba:	bf08      	it	eq
 80006bc:	ea90 0f02 	teqeq	r0, r2
 80006c0:	d005      	beq.n	80006ce <__adddf3+0x212>
 80006c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80006c6:	bf04      	itt	eq
 80006c8:	4619      	moveq	r1, r3
 80006ca:	4610      	moveq	r0, r2
 80006cc:	bd30      	pop	{r4, r5, pc}
 80006ce:	ea91 0f03 	teq	r1, r3
 80006d2:	bf1e      	ittt	ne
 80006d4:	2100      	movne	r1, #0
 80006d6:	2000      	movne	r0, #0
 80006d8:	bd30      	popne	{r4, r5, pc}
 80006da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80006de:	d105      	bne.n	80006ec <__adddf3+0x230>
 80006e0:	0040      	lsls	r0, r0, #1
 80006e2:	4149      	adcs	r1, r1
 80006e4:	bf28      	it	cs
 80006e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80006ea:	bd30      	pop	{r4, r5, pc}
 80006ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80006f0:	bf3c      	itt	cc
 80006f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80006f6:	bd30      	popcc	{r4, r5, pc}
 80006f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000700:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000704:	f04f 0000 	mov.w	r0, #0
 8000708:	bd30      	pop	{r4, r5, pc}
 800070a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800070e:	bf1a      	itte	ne
 8000710:	4619      	movne	r1, r3
 8000712:	4610      	movne	r0, r2
 8000714:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000718:	bf1c      	itt	ne
 800071a:	460b      	movne	r3, r1
 800071c:	4602      	movne	r2, r0
 800071e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000722:	bf06      	itte	eq
 8000724:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000728:	ea91 0f03 	teqeq	r1, r3
 800072c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000730:	bd30      	pop	{r4, r5, pc}
 8000732:	bf00      	nop

08000734 <__aeabi_ui2d>:
 8000734:	f090 0f00 	teq	r0, #0
 8000738:	bf04      	itt	eq
 800073a:	2100      	moveq	r1, #0
 800073c:	4770      	bxeq	lr
 800073e:	b530      	push	{r4, r5, lr}
 8000740:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000744:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000748:	f04f 0500 	mov.w	r5, #0
 800074c:	f04f 0100 	mov.w	r1, #0
 8000750:	e750      	b.n	80005f4 <__adddf3+0x138>
 8000752:	bf00      	nop

08000754 <__aeabi_i2d>:
 8000754:	f090 0f00 	teq	r0, #0
 8000758:	bf04      	itt	eq
 800075a:	2100      	moveq	r1, #0
 800075c:	4770      	bxeq	lr
 800075e:	b530      	push	{r4, r5, lr}
 8000760:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000764:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000768:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800076c:	bf48      	it	mi
 800076e:	4240      	negmi	r0, r0
 8000770:	f04f 0100 	mov.w	r1, #0
 8000774:	e73e      	b.n	80005f4 <__adddf3+0x138>
 8000776:	bf00      	nop

08000778 <__aeabi_f2d>:
 8000778:	0042      	lsls	r2, r0, #1
 800077a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800077e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000782:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000786:	bf1f      	itttt	ne
 8000788:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800078c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000790:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000794:	4770      	bxne	lr
 8000796:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800079a:	bf08      	it	eq
 800079c:	4770      	bxeq	lr
 800079e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80007a2:	bf04      	itt	eq
 80007a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80007a8:	4770      	bxeq	lr
 80007aa:	b530      	push	{r4, r5, lr}
 80007ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80007b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80007b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007b8:	e71c      	b.n	80005f4 <__adddf3+0x138>
 80007ba:	bf00      	nop

080007bc <__aeabi_ul2d>:
 80007bc:	ea50 0201 	orrs.w	r2, r0, r1
 80007c0:	bf08      	it	eq
 80007c2:	4770      	bxeq	lr
 80007c4:	b530      	push	{r4, r5, lr}
 80007c6:	f04f 0500 	mov.w	r5, #0
 80007ca:	e00a      	b.n	80007e2 <__aeabi_l2d+0x16>

080007cc <__aeabi_l2d>:
 80007cc:	ea50 0201 	orrs.w	r2, r0, r1
 80007d0:	bf08      	it	eq
 80007d2:	4770      	bxeq	lr
 80007d4:	b530      	push	{r4, r5, lr}
 80007d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80007da:	d502      	bpl.n	80007e2 <__aeabi_l2d+0x16>
 80007dc:	4240      	negs	r0, r0
 80007de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80007ee:	f43f aed8 	beq.w	80005a2 <__adddf3+0xe6>
 80007f2:	f04f 0203 	mov.w	r2, #3
 80007f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007fa:	bf18      	it	ne
 80007fc:	3203      	addne	r2, #3
 80007fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000802:	bf18      	it	ne
 8000804:	3203      	addne	r2, #3
 8000806:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800080a:	f1c2 0320 	rsb	r3, r2, #32
 800080e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000812:	fa20 f002 	lsr.w	r0, r0, r2
 8000816:	fa01 fe03 	lsl.w	lr, r1, r3
 800081a:	ea40 000e 	orr.w	r0, r0, lr
 800081e:	fa21 f102 	lsr.w	r1, r1, r2
 8000822:	4414      	add	r4, r2
 8000824:	e6bd      	b.n	80005a2 <__adddf3+0xe6>
 8000826:	bf00      	nop

08000828 <__aeabi_dmul>:
 8000828:	b570      	push	{r4, r5, r6, lr}
 800082a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800082e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000832:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000836:	bf1d      	ittte	ne
 8000838:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800083c:	ea94 0f0c 	teqne	r4, ip
 8000840:	ea95 0f0c 	teqne	r5, ip
 8000844:	f000 f8de 	bleq	8000a04 <__aeabi_dmul+0x1dc>
 8000848:	442c      	add	r4, r5
 800084a:	ea81 0603 	eor.w	r6, r1, r3
 800084e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000852:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000856:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800085a:	bf18      	it	ne
 800085c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000860:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000864:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000868:	d038      	beq.n	80008dc <__aeabi_dmul+0xb4>
 800086a:	fba0 ce02 	umull	ip, lr, r0, r2
 800086e:	f04f 0500 	mov.w	r5, #0
 8000872:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000876:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800087a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800087e:	f04f 0600 	mov.w	r6, #0
 8000882:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000886:	f09c 0f00 	teq	ip, #0
 800088a:	bf18      	it	ne
 800088c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000890:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000894:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000898:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800089c:	d204      	bcs.n	80008a8 <__aeabi_dmul+0x80>
 800089e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80008a2:	416d      	adcs	r5, r5
 80008a4:	eb46 0606 	adc.w	r6, r6, r6
 80008a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80008ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80008b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80008b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80008b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80008bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c0:	bf88      	it	hi
 80008c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008c6:	d81e      	bhi.n	8000906 <__aeabi_dmul+0xde>
 80008c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80008cc:	bf08      	it	eq
 80008ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80008d2:	f150 0000 	adcs.w	r0, r0, #0
 80008d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008da:	bd70      	pop	{r4, r5, r6, pc}
 80008dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80008e0:	ea46 0101 	orr.w	r1, r6, r1
 80008e4:	ea40 0002 	orr.w	r0, r0, r2
 80008e8:	ea81 0103 	eor.w	r1, r1, r3
 80008ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80008f0:	bfc2      	ittt	gt
 80008f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fa:	bd70      	popgt	{r4, r5, r6, pc}
 80008fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000900:	f04f 0e00 	mov.w	lr, #0
 8000904:	3c01      	subs	r4, #1
 8000906:	f300 80ab 	bgt.w	8000a60 <__aeabi_dmul+0x238>
 800090a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800090e:	bfde      	ittt	le
 8000910:	2000      	movle	r0, #0
 8000912:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000916:	bd70      	pople	{r4, r5, r6, pc}
 8000918:	f1c4 0400 	rsb	r4, r4, #0
 800091c:	3c20      	subs	r4, #32
 800091e:	da35      	bge.n	800098c <__aeabi_dmul+0x164>
 8000920:	340c      	adds	r4, #12
 8000922:	dc1b      	bgt.n	800095c <__aeabi_dmul+0x134>
 8000924:	f104 0414 	add.w	r4, r4, #20
 8000928:	f1c4 0520 	rsb	r5, r4, #32
 800092c:	fa00 f305 	lsl.w	r3, r0, r5
 8000930:	fa20 f004 	lsr.w	r0, r0, r4
 8000934:	fa01 f205 	lsl.w	r2, r1, r5
 8000938:	ea40 0002 	orr.w	r0, r0, r2
 800093c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000940:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000944:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000948:	fa21 f604 	lsr.w	r6, r1, r4
 800094c:	eb42 0106 	adc.w	r1, r2, r6
 8000950:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000954:	bf08      	it	eq
 8000956:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800095a:	bd70      	pop	{r4, r5, r6, pc}
 800095c:	f1c4 040c 	rsb	r4, r4, #12
 8000960:	f1c4 0520 	rsb	r5, r4, #32
 8000964:	fa00 f304 	lsl.w	r3, r0, r4
 8000968:	fa20 f005 	lsr.w	r0, r0, r5
 800096c:	fa01 f204 	lsl.w	r2, r1, r4
 8000970:	ea40 0002 	orr.w	r0, r0, r2
 8000974:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000978:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800097c:	f141 0100 	adc.w	r1, r1, #0
 8000980:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000984:	bf08      	it	eq
 8000986:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800098a:	bd70      	pop	{r4, r5, r6, pc}
 800098c:	f1c4 0520 	rsb	r5, r4, #32
 8000990:	fa00 f205 	lsl.w	r2, r0, r5
 8000994:	ea4e 0e02 	orr.w	lr, lr, r2
 8000998:	fa20 f304 	lsr.w	r3, r0, r4
 800099c:	fa01 f205 	lsl.w	r2, r1, r5
 80009a0:	ea43 0302 	orr.w	r3, r3, r2
 80009a4:	fa21 f004 	lsr.w	r0, r1, r4
 80009a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80009ac:	fa21 f204 	lsr.w	r2, r1, r4
 80009b0:	ea20 0002 	bic.w	r0, r0, r2
 80009b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80009b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80009bc:	bf08      	it	eq
 80009be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80009c2:	bd70      	pop	{r4, r5, r6, pc}
 80009c4:	f094 0f00 	teq	r4, #0
 80009c8:	d10f      	bne.n	80009ea <__aeabi_dmul+0x1c2>
 80009ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80009ce:	0040      	lsls	r0, r0, #1
 80009d0:	eb41 0101 	adc.w	r1, r1, r1
 80009d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009d8:	bf08      	it	eq
 80009da:	3c01      	subeq	r4, #1
 80009dc:	d0f7      	beq.n	80009ce <__aeabi_dmul+0x1a6>
 80009de:	ea41 0106 	orr.w	r1, r1, r6
 80009e2:	f095 0f00 	teq	r5, #0
 80009e6:	bf18      	it	ne
 80009e8:	4770      	bxne	lr
 80009ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80009ee:	0052      	lsls	r2, r2, #1
 80009f0:	eb43 0303 	adc.w	r3, r3, r3
 80009f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80009f8:	bf08      	it	eq
 80009fa:	3d01      	subeq	r5, #1
 80009fc:	d0f7      	beq.n	80009ee <__aeabi_dmul+0x1c6>
 80009fe:	ea43 0306 	orr.w	r3, r3, r6
 8000a02:	4770      	bx	lr
 8000a04:	ea94 0f0c 	teq	r4, ip
 8000a08:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0c:	bf18      	it	ne
 8000a0e:	ea95 0f0c 	teqne	r5, ip
 8000a12:	d00c      	beq.n	8000a2e <__aeabi_dmul+0x206>
 8000a14:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a18:	bf18      	it	ne
 8000a1a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a1e:	d1d1      	bne.n	80009c4 <__aeabi_dmul+0x19c>
 8000a20:	ea81 0103 	eor.w	r1, r1, r3
 8000a24:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000a28:	f04f 0000 	mov.w	r0, #0
 8000a2c:	bd70      	pop	{r4, r5, r6, pc}
 8000a2e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a32:	bf06      	itte	eq
 8000a34:	4610      	moveq	r0, r2
 8000a36:	4619      	moveq	r1, r3
 8000a38:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a3c:	d019      	beq.n	8000a72 <__aeabi_dmul+0x24a>
 8000a3e:	ea94 0f0c 	teq	r4, ip
 8000a42:	d102      	bne.n	8000a4a <__aeabi_dmul+0x222>
 8000a44:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000a48:	d113      	bne.n	8000a72 <__aeabi_dmul+0x24a>
 8000a4a:	ea95 0f0c 	teq	r5, ip
 8000a4e:	d105      	bne.n	8000a5c <__aeabi_dmul+0x234>
 8000a50:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000a54:	bf1c      	itt	ne
 8000a56:	4610      	movne	r0, r2
 8000a58:	4619      	movne	r1, r3
 8000a5a:	d10a      	bne.n	8000a72 <__aeabi_dmul+0x24a>
 8000a5c:	ea81 0103 	eor.w	r1, r1, r3
 8000a60:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000a64:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000a68:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000a6c:	f04f 0000 	mov.w	r0, #0
 8000a70:	bd70      	pop	{r4, r5, r6, pc}
 8000a72:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000a76:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000a7a:	bd70      	pop	{r4, r5, r6, pc}

08000a7c <__aeabi_ddiv>:
 8000a7c:	b570      	push	{r4, r5, r6, lr}
 8000a7e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000a82:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000a86:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000a8a:	bf1d      	ittte	ne
 8000a8c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000a90:	ea94 0f0c 	teqne	r4, ip
 8000a94:	ea95 0f0c 	teqne	r5, ip
 8000a98:	f000 f8a7 	bleq	8000bea <__aeabi_ddiv+0x16e>
 8000a9c:	eba4 0405 	sub.w	r4, r4, r5
 8000aa0:	ea81 0e03 	eor.w	lr, r1, r3
 8000aa4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000aa8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000aac:	f000 8088 	beq.w	8000bc0 <__aeabi_ddiv+0x144>
 8000ab0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000ab4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000ab8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000abc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000ac0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000ac4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000ac8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000acc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000ad0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000ad4:	429d      	cmp	r5, r3
 8000ad6:	bf08      	it	eq
 8000ad8:	4296      	cmpeq	r6, r2
 8000ada:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000ade:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000ae2:	d202      	bcs.n	8000aea <__aeabi_ddiv+0x6e>
 8000ae4:	085b      	lsrs	r3, r3, #1
 8000ae6:	ea4f 0232 	mov.w	r2, r2, rrx
 8000aea:	1ab6      	subs	r6, r6, r2
 8000aec:	eb65 0503 	sbc.w	r5, r5, r3
 8000af0:	085b      	lsrs	r3, r3, #1
 8000af2:	ea4f 0232 	mov.w	r2, r2, rrx
 8000af6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000afa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000afe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000b02:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000b06:	bf22      	ittt	cs
 8000b08:	1ab6      	subcs	r6, r6, r2
 8000b0a:	4675      	movcs	r5, lr
 8000b0c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000b10:	085b      	lsrs	r3, r3, #1
 8000b12:	ea4f 0232 	mov.w	r2, r2, rrx
 8000b16:	ebb6 0e02 	subs.w	lr, r6, r2
 8000b1a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000b1e:	bf22      	ittt	cs
 8000b20:	1ab6      	subcs	r6, r6, r2
 8000b22:	4675      	movcs	r5, lr
 8000b24:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000b28:	085b      	lsrs	r3, r3, #1
 8000b2a:	ea4f 0232 	mov.w	r2, r2, rrx
 8000b2e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000b32:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000b36:	bf22      	ittt	cs
 8000b38:	1ab6      	subcs	r6, r6, r2
 8000b3a:	4675      	movcs	r5, lr
 8000b3c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000b40:	085b      	lsrs	r3, r3, #1
 8000b42:	ea4f 0232 	mov.w	r2, r2, rrx
 8000b46:	ebb6 0e02 	subs.w	lr, r6, r2
 8000b4a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000b4e:	bf22      	ittt	cs
 8000b50:	1ab6      	subcs	r6, r6, r2
 8000b52:	4675      	movcs	r5, lr
 8000b54:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000b58:	ea55 0e06 	orrs.w	lr, r5, r6
 8000b5c:	d018      	beq.n	8000b90 <__aeabi_ddiv+0x114>
 8000b5e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000b62:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000b66:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000b6a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000b6e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000b72:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000b76:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000b7a:	d1c0      	bne.n	8000afe <__aeabi_ddiv+0x82>
 8000b7c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000b80:	d10b      	bne.n	8000b9a <__aeabi_ddiv+0x11e>
 8000b82:	ea41 0100 	orr.w	r1, r1, r0
 8000b86:	f04f 0000 	mov.w	r0, #0
 8000b8a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000b8e:	e7b6      	b.n	8000afe <__aeabi_ddiv+0x82>
 8000b90:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000b94:	bf04      	itt	eq
 8000b96:	4301      	orreq	r1, r0
 8000b98:	2000      	moveq	r0, #0
 8000b9a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000b9e:	bf88      	it	hi
 8000ba0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000ba4:	f63f aeaf 	bhi.w	8000906 <__aeabi_dmul+0xde>
 8000ba8:	ebb5 0c03 	subs.w	ip, r5, r3
 8000bac:	bf04      	itt	eq
 8000bae:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000bb2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000bb6:	f150 0000 	adcs.w	r0, r0, #0
 8000bba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000bbe:	bd70      	pop	{r4, r5, r6, pc}
 8000bc0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000bc4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000bc8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000bcc:	bfc2      	ittt	gt
 8000bce:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000bd2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000bd6:	bd70      	popgt	{r4, r5, r6, pc}
 8000bd8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bdc:	f04f 0e00 	mov.w	lr, #0
 8000be0:	3c01      	subs	r4, #1
 8000be2:	e690      	b.n	8000906 <__aeabi_dmul+0xde>
 8000be4:	ea45 0e06 	orr.w	lr, r5, r6
 8000be8:	e68d      	b.n	8000906 <__aeabi_dmul+0xde>
 8000bea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000bee:	ea94 0f0c 	teq	r4, ip
 8000bf2:	bf08      	it	eq
 8000bf4:	ea95 0f0c 	teqeq	r5, ip
 8000bf8:	f43f af3b 	beq.w	8000a72 <__aeabi_dmul+0x24a>
 8000bfc:	ea94 0f0c 	teq	r4, ip
 8000c00:	d10a      	bne.n	8000c18 <__aeabi_ddiv+0x19c>
 8000c02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000c06:	f47f af34 	bne.w	8000a72 <__aeabi_dmul+0x24a>
 8000c0a:	ea95 0f0c 	teq	r5, ip
 8000c0e:	f47f af25 	bne.w	8000a5c <__aeabi_dmul+0x234>
 8000c12:	4610      	mov	r0, r2
 8000c14:	4619      	mov	r1, r3
 8000c16:	e72c      	b.n	8000a72 <__aeabi_dmul+0x24a>
 8000c18:	ea95 0f0c 	teq	r5, ip
 8000c1c:	d106      	bne.n	8000c2c <__aeabi_ddiv+0x1b0>
 8000c1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000c22:	f43f aefd 	beq.w	8000a20 <__aeabi_dmul+0x1f8>
 8000c26:	4610      	mov	r0, r2
 8000c28:	4619      	mov	r1, r3
 8000c2a:	e722      	b.n	8000a72 <__aeabi_dmul+0x24a>
 8000c2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000c30:	bf18      	it	ne
 8000c32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000c36:	f47f aec5 	bne.w	80009c4 <__aeabi_dmul+0x19c>
 8000c3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000c3e:	f47f af0d 	bne.w	8000a5c <__aeabi_dmul+0x234>
 8000c42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000c46:	f47f aeeb 	bne.w	8000a20 <__aeabi_dmul+0x1f8>
 8000c4a:	e712      	b.n	8000a72 <__aeabi_dmul+0x24a>

08000c4c <__aeabi_d2f>:
 8000c4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c50:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c54:	bf24      	itt	cs
 8000c56:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c5a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c5e:	d90d      	bls.n	8000c7c <__aeabi_d2f+0x30>
 8000c60:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c64:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c68:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c6c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c70:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c74:	bf08      	it	eq
 8000c76:	f020 0001 	biceq.w	r0, r0, #1
 8000c7a:	4770      	bx	lr
 8000c7c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c80:	d121      	bne.n	8000cc6 <__aeabi_d2f+0x7a>
 8000c82:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c86:	bfbc      	itt	lt
 8000c88:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	4770      	bxlt	lr
 8000c8e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c92:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c96:	f1c2 0218 	rsb	r2, r2, #24
 8000c9a:	f1c2 0c20 	rsb	ip, r2, #32
 8000c9e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ca2:	fa20 f002 	lsr.w	r0, r0, r2
 8000ca6:	bf18      	it	ne
 8000ca8:	f040 0001 	orrne.w	r0, r0, #1
 8000cac:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000cb0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000cb4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000cb8:	ea40 000c 	orr.w	r0, r0, ip
 8000cbc:	fa23 f302 	lsr.w	r3, r3, r2
 8000cc0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cc4:	e7cc      	b.n	8000c60 <__aeabi_d2f+0x14>
 8000cc6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cca:	d107      	bne.n	8000cdc <__aeabi_d2f+0x90>
 8000ccc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cd0:	bf1e      	ittt	ne
 8000cd2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cd6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cda:	4770      	bxne	lr
 8000cdc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ce0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ce4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ce8:	4770      	bx	lr
 8000cea:	bf00      	nop

08000cec <__aeabi_uldivmod>:
 8000cec:	b953      	cbnz	r3, 8000d04 <__aeabi_uldivmod+0x18>
 8000cee:	b94a      	cbnz	r2, 8000d04 <__aeabi_uldivmod+0x18>
 8000cf0:	2900      	cmp	r1, #0
 8000cf2:	bf08      	it	eq
 8000cf4:	2800      	cmpeq	r0, #0
 8000cf6:	bf1c      	itt	ne
 8000cf8:	f04f 31ff 	movne.w	r1, #4294967295
 8000cfc:	f04f 30ff 	movne.w	r0, #4294967295
 8000d00:	f000 b982 	b.w	8001008 <__aeabi_idiv0>
 8000d04:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d08:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d0c:	f000 f806 	bl	8000d1c <__udivmoddi4>
 8000d10:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d14:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d18:	b004      	add	sp, #16
 8000d1a:	4770      	bx	lr

08000d1c <__udivmoddi4>:
 8000d1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000d20:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8000d22:	4604      	mov	r4, r0
 8000d24:	460f      	mov	r7, r1
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d148      	bne.n	8000dbc <__udivmoddi4+0xa0>
 8000d2a:	428a      	cmp	r2, r1
 8000d2c:	4694      	mov	ip, r2
 8000d2e:	d961      	bls.n	8000df4 <__udivmoddi4+0xd8>
 8000d30:	fab2 f382 	clz	r3, r2
 8000d34:	b143      	cbz	r3, 8000d48 <__udivmoddi4+0x2c>
 8000d36:	f1c3 0120 	rsb	r1, r3, #32
 8000d3a:	409f      	lsls	r7, r3
 8000d3c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d40:	409c      	lsls	r4, r3
 8000d42:	fa20 f101 	lsr.w	r1, r0, r1
 8000d46:	430f      	orrs	r7, r1
 8000d48:	ea4f 411c 	mov.w	r1, ip, lsr #16
 8000d4c:	fa1f fe8c 	uxth.w	lr, ip
 8000d50:	0c22      	lsrs	r2, r4, #16
 8000d52:	fbb7 f6f1 	udiv	r6, r7, r1
 8000d56:	fb01 7716 	mls	r7, r1, r6, r7
 8000d5a:	fb06 f00e 	mul.w	r0, r6, lr
 8000d5e:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d62:	4290      	cmp	r0, r2
 8000d64:	d908      	bls.n	8000d78 <__udivmoddi4+0x5c>
 8000d66:	eb1c 0202 	adds.w	r2, ip, r2
 8000d6a:	f106 37ff 	add.w	r7, r6, #4294967295
 8000d6e:	d202      	bcs.n	8000d76 <__udivmoddi4+0x5a>
 8000d70:	4290      	cmp	r0, r2
 8000d72:	f200 8137 	bhi.w	8000fe4 <__udivmoddi4+0x2c8>
 8000d76:	463e      	mov	r6, r7
 8000d78:	1a12      	subs	r2, r2, r0
 8000d7a:	b2a4      	uxth	r4, r4
 8000d7c:	fbb2 f0f1 	udiv	r0, r2, r1
 8000d80:	fb01 2210 	mls	r2, r1, r0, r2
 8000d84:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d88:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d8c:	45a6      	cmp	lr, r4
 8000d8e:	d908      	bls.n	8000da2 <__udivmoddi4+0x86>
 8000d90:	eb1c 0404 	adds.w	r4, ip, r4
 8000d94:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d98:	d202      	bcs.n	8000da0 <__udivmoddi4+0x84>
 8000d9a:	45a6      	cmp	lr, r4
 8000d9c:	f200 811c 	bhi.w	8000fd8 <__udivmoddi4+0x2bc>
 8000da0:	4610      	mov	r0, r2
 8000da2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000da6:	eba4 040e 	sub.w	r4, r4, lr
 8000daa:	2600      	movs	r6, #0
 8000dac:	b11d      	cbz	r5, 8000db6 <__udivmoddi4+0x9a>
 8000dae:	40dc      	lsrs	r4, r3
 8000db0:	2300      	movs	r3, #0
 8000db2:	e9c5 4300 	strd	r4, r3, [r5]
 8000db6:	4631      	mov	r1, r6
 8000db8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000dbc:	428b      	cmp	r3, r1
 8000dbe:	d909      	bls.n	8000dd4 <__udivmoddi4+0xb8>
 8000dc0:	2d00      	cmp	r5, #0
 8000dc2:	f000 80fd 	beq.w	8000fc0 <__udivmoddi4+0x2a4>
 8000dc6:	2600      	movs	r6, #0
 8000dc8:	e9c5 0100 	strd	r0, r1, [r5]
 8000dcc:	4630      	mov	r0, r6
 8000dce:	4631      	mov	r1, r6
 8000dd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000dd4:	fab3 f683 	clz	r6, r3
 8000dd8:	2e00      	cmp	r6, #0
 8000dda:	d14b      	bne.n	8000e74 <__udivmoddi4+0x158>
 8000ddc:	428b      	cmp	r3, r1
 8000dde:	f0c0 80f2 	bcc.w	8000fc6 <__udivmoddi4+0x2aa>
 8000de2:	4282      	cmp	r2, r0
 8000de4:	f240 80ef 	bls.w	8000fc6 <__udivmoddi4+0x2aa>
 8000de8:	4630      	mov	r0, r6
 8000dea:	2d00      	cmp	r5, #0
 8000dec:	d0e3      	beq.n	8000db6 <__udivmoddi4+0x9a>
 8000dee:	e9c5 4700 	strd	r4, r7, [r5]
 8000df2:	e7e0      	b.n	8000db6 <__udivmoddi4+0x9a>
 8000df4:	b902      	cbnz	r2, 8000df8 <__udivmoddi4+0xdc>
 8000df6:	deff      	udf	#255	; 0xff
 8000df8:	fab2 f382 	clz	r3, r2
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	f040 809d 	bne.w	8000f3c <__udivmoddi4+0x220>
 8000e02:	1a89      	subs	r1, r1, r2
 8000e04:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8000e08:	b297      	uxth	r7, r2
 8000e0a:	2601      	movs	r6, #1
 8000e0c:	0c20      	lsrs	r0, r4, #16
 8000e0e:	fbb1 f2fe 	udiv	r2, r1, lr
 8000e12:	fb0e 1112 	mls	r1, lr, r2, r1
 8000e16:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e1a:	fb07 f002 	mul.w	r0, r7, r2
 8000e1e:	4288      	cmp	r0, r1
 8000e20:	d90f      	bls.n	8000e42 <__udivmoddi4+0x126>
 8000e22:	eb1c 0101 	adds.w	r1, ip, r1
 8000e26:	f102 38ff 	add.w	r8, r2, #4294967295
 8000e2a:	bf2c      	ite	cs
 8000e2c:	f04f 0901 	movcs.w	r9, #1
 8000e30:	f04f 0900 	movcc.w	r9, #0
 8000e34:	4288      	cmp	r0, r1
 8000e36:	d903      	bls.n	8000e40 <__udivmoddi4+0x124>
 8000e38:	f1b9 0f00 	cmp.w	r9, #0
 8000e3c:	f000 80cf 	beq.w	8000fde <__udivmoddi4+0x2c2>
 8000e40:	4642      	mov	r2, r8
 8000e42:	1a09      	subs	r1, r1, r0
 8000e44:	b2a4      	uxth	r4, r4
 8000e46:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e4a:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e4e:	fb00 f707 	mul.w	r7, r0, r7
 8000e52:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e56:	42a7      	cmp	r7, r4
 8000e58:	d908      	bls.n	8000e6c <__udivmoddi4+0x150>
 8000e5a:	eb1c 0404 	adds.w	r4, ip, r4
 8000e5e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e62:	d202      	bcs.n	8000e6a <__udivmoddi4+0x14e>
 8000e64:	42a7      	cmp	r7, r4
 8000e66:	f200 80b4 	bhi.w	8000fd2 <__udivmoddi4+0x2b6>
 8000e6a:	4608      	mov	r0, r1
 8000e6c:	1be4      	subs	r4, r4, r7
 8000e6e:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8000e72:	e79b      	b.n	8000dac <__udivmoddi4+0x90>
 8000e74:	f1c6 0720 	rsb	r7, r6, #32
 8000e78:	40b3      	lsls	r3, r6
 8000e7a:	fa01 f406 	lsl.w	r4, r1, r6
 8000e7e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e82:	40f9      	lsrs	r1, r7
 8000e84:	40b2      	lsls	r2, r6
 8000e86:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e8a:	fa20 f307 	lsr.w	r3, r0, r7
 8000e8e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e92:	431c      	orrs	r4, r3
 8000e94:	fa1f fe8c 	uxth.w	lr, ip
 8000e98:	fa00 f306 	lsl.w	r3, r0, r6
 8000e9c:	0c20      	lsrs	r0, r4, #16
 8000e9e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000ea2:	fb09 1118 	mls	r1, r9, r8, r1
 8000ea6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000eaa:	fb08 f00e 	mul.w	r0, r8, lr
 8000eae:	4288      	cmp	r0, r1
 8000eb0:	d90f      	bls.n	8000ed2 <__udivmoddi4+0x1b6>
 8000eb2:	eb1c 0101 	adds.w	r1, ip, r1
 8000eb6:	f108 3aff 	add.w	sl, r8, #4294967295
 8000eba:	bf2c      	ite	cs
 8000ebc:	f04f 0b01 	movcs.w	fp, #1
 8000ec0:	f04f 0b00 	movcc.w	fp, #0
 8000ec4:	4288      	cmp	r0, r1
 8000ec6:	d903      	bls.n	8000ed0 <__udivmoddi4+0x1b4>
 8000ec8:	f1bb 0f00 	cmp.w	fp, #0
 8000ecc:	f000 808d 	beq.w	8000fea <__udivmoddi4+0x2ce>
 8000ed0:	46d0      	mov	r8, sl
 8000ed2:	1a09      	subs	r1, r1, r0
 8000ed4:	b2a4      	uxth	r4, r4
 8000ed6:	fbb1 f0f9 	udiv	r0, r1, r9
 8000eda:	fb09 1110 	mls	r1, r9, r0, r1
 8000ede:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ee2:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000ee6:	458e      	cmp	lr, r1
 8000ee8:	d907      	bls.n	8000efa <__udivmoddi4+0x1de>
 8000eea:	eb1c 0101 	adds.w	r1, ip, r1
 8000eee:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ef2:	d201      	bcs.n	8000ef8 <__udivmoddi4+0x1dc>
 8000ef4:	458e      	cmp	lr, r1
 8000ef6:	d87f      	bhi.n	8000ff8 <__udivmoddi4+0x2dc>
 8000ef8:	4620      	mov	r0, r4
 8000efa:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000efe:	eba1 010e 	sub.w	r1, r1, lr
 8000f02:	fba0 9802 	umull	r9, r8, r0, r2
 8000f06:	4541      	cmp	r1, r8
 8000f08:	464c      	mov	r4, r9
 8000f0a:	46c6      	mov	lr, r8
 8000f0c:	d302      	bcc.n	8000f14 <__udivmoddi4+0x1f8>
 8000f0e:	d106      	bne.n	8000f1e <__udivmoddi4+0x202>
 8000f10:	454b      	cmp	r3, r9
 8000f12:	d204      	bcs.n	8000f1e <__udivmoddi4+0x202>
 8000f14:	3801      	subs	r0, #1
 8000f16:	ebb9 0402 	subs.w	r4, r9, r2
 8000f1a:	eb68 0e0c 	sbc.w	lr, r8, ip
 8000f1e:	2d00      	cmp	r5, #0
 8000f20:	d070      	beq.n	8001004 <__udivmoddi4+0x2e8>
 8000f22:	1b1a      	subs	r2, r3, r4
 8000f24:	eb61 010e 	sbc.w	r1, r1, lr
 8000f28:	fa22 f306 	lsr.w	r3, r2, r6
 8000f2c:	fa01 f707 	lsl.w	r7, r1, r7
 8000f30:	40f1      	lsrs	r1, r6
 8000f32:	2600      	movs	r6, #0
 8000f34:	431f      	orrs	r7, r3
 8000f36:	e9c5 7100 	strd	r7, r1, [r5]
 8000f3a:	e73c      	b.n	8000db6 <__udivmoddi4+0x9a>
 8000f3c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f40:	f1c3 0020 	rsb	r0, r3, #32
 8000f44:	fa01 f203 	lsl.w	r2, r1, r3
 8000f48:	fa21 f600 	lsr.w	r6, r1, r0
 8000f4c:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000f50:	fa24 f100 	lsr.w	r1, r4, r0
 8000f54:	fa1f f78c 	uxth.w	r7, ip
 8000f58:	409c      	lsls	r4, r3
 8000f5a:	4311      	orrs	r1, r2
 8000f5c:	fbb6 f0fe 	udiv	r0, r6, lr
 8000f60:	0c0a      	lsrs	r2, r1, #16
 8000f62:	fb0e 6610 	mls	r6, lr, r0, r6
 8000f66:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 8000f6a:	fb00 f607 	mul.w	r6, r0, r7
 8000f6e:	4296      	cmp	r6, r2
 8000f70:	d90e      	bls.n	8000f90 <__udivmoddi4+0x274>
 8000f72:	eb1c 0202 	adds.w	r2, ip, r2
 8000f76:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f7a:	bf2c      	ite	cs
 8000f7c:	f04f 0901 	movcs.w	r9, #1
 8000f80:	f04f 0900 	movcc.w	r9, #0
 8000f84:	4296      	cmp	r6, r2
 8000f86:	d902      	bls.n	8000f8e <__udivmoddi4+0x272>
 8000f88:	f1b9 0f00 	cmp.w	r9, #0
 8000f8c:	d031      	beq.n	8000ff2 <__udivmoddi4+0x2d6>
 8000f8e:	4640      	mov	r0, r8
 8000f90:	1b92      	subs	r2, r2, r6
 8000f92:	b289      	uxth	r1, r1
 8000f94:	fbb2 f6fe 	udiv	r6, r2, lr
 8000f98:	fb0e 2216 	mls	r2, lr, r6, r2
 8000f9c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8000fa0:	fb06 f207 	mul.w	r2, r6, r7
 8000fa4:	428a      	cmp	r2, r1
 8000fa6:	d907      	bls.n	8000fb8 <__udivmoddi4+0x29c>
 8000fa8:	eb1c 0101 	adds.w	r1, ip, r1
 8000fac:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fb0:	d201      	bcs.n	8000fb6 <__udivmoddi4+0x29a>
 8000fb2:	428a      	cmp	r2, r1
 8000fb4:	d823      	bhi.n	8000ffe <__udivmoddi4+0x2e2>
 8000fb6:	4646      	mov	r6, r8
 8000fb8:	1a89      	subs	r1, r1, r2
 8000fba:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fbe:	e725      	b.n	8000e0c <__udivmoddi4+0xf0>
 8000fc0:	462e      	mov	r6, r5
 8000fc2:	4628      	mov	r0, r5
 8000fc4:	e6f7      	b.n	8000db6 <__udivmoddi4+0x9a>
 8000fc6:	1a84      	subs	r4, r0, r2
 8000fc8:	eb61 0303 	sbc.w	r3, r1, r3
 8000fcc:	2001      	movs	r0, #1
 8000fce:	461f      	mov	r7, r3
 8000fd0:	e70b      	b.n	8000dea <__udivmoddi4+0xce>
 8000fd2:	4464      	add	r4, ip
 8000fd4:	3802      	subs	r0, #2
 8000fd6:	e749      	b.n	8000e6c <__udivmoddi4+0x150>
 8000fd8:	4464      	add	r4, ip
 8000fda:	3802      	subs	r0, #2
 8000fdc:	e6e1      	b.n	8000da2 <__udivmoddi4+0x86>
 8000fde:	3a02      	subs	r2, #2
 8000fe0:	4461      	add	r1, ip
 8000fe2:	e72e      	b.n	8000e42 <__udivmoddi4+0x126>
 8000fe4:	3e02      	subs	r6, #2
 8000fe6:	4462      	add	r2, ip
 8000fe8:	e6c6      	b.n	8000d78 <__udivmoddi4+0x5c>
 8000fea:	f1a8 0802 	sub.w	r8, r8, #2
 8000fee:	4461      	add	r1, ip
 8000ff0:	e76f      	b.n	8000ed2 <__udivmoddi4+0x1b6>
 8000ff2:	3802      	subs	r0, #2
 8000ff4:	4462      	add	r2, ip
 8000ff6:	e7cb      	b.n	8000f90 <__udivmoddi4+0x274>
 8000ff8:	3802      	subs	r0, #2
 8000ffa:	4461      	add	r1, ip
 8000ffc:	e77d      	b.n	8000efa <__udivmoddi4+0x1de>
 8000ffe:	3e02      	subs	r6, #2
 8001000:	4461      	add	r1, ip
 8001002:	e7d9      	b.n	8000fb8 <__udivmoddi4+0x29c>
 8001004:	462e      	mov	r6, r5
 8001006:	e6d6      	b.n	8000db6 <__udivmoddi4+0x9a>

08001008 <__aeabi_idiv0>:
 8001008:	4770      	bx	lr
 800100a:	bf00      	nop

0800100c <tx_application_define>:
  * @brief  Define the initial system.
  * @param  first_unused_memory : Pointer to the first unused memory
  * @retval None
  */
VOID tx_application_define(VOID *first_unused_memory)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b086      	sub	sp, #24
 8001010:	af02      	add	r7, sp, #8
 8001012:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN  tx_application_define_1*/

  /* USER CODE END  tx_application_define_1 */
#if (USE_STATIC_ALLOCATION == 1)
  UINT status = TX_SUCCESS;
 8001014:	2300      	movs	r3, #0
 8001016:	60fb      	str	r3, [r7, #12]
  VOID *memory_ptr;

  if (tx_byte_pool_create(&tx_app_byte_pool, "Tx App memory pool", tx_byte_pool_buffer, TX_APP_MEM_POOL_SIZE) != TX_SUCCESS)
 8001018:	2334      	movs	r3, #52	; 0x34
 800101a:	9300      	str	r3, [sp, #0]
 800101c:	f241 6374 	movw	r3, #5748	; 0x1674
 8001020:	4a0a      	ldr	r2, [pc, #40]	; (800104c <tx_application_define+0x40>)
 8001022:	490b      	ldr	r1, [pc, #44]	; (8001050 <tx_application_define+0x44>)
 8001024:	480b      	ldr	r0, [pc, #44]	; (8001054 <tx_application_define+0x48>)
 8001026:	f012 fca1 	bl	801396c <_txe_byte_pool_create>
 800102a:	4603      	mov	r3, r0
 800102c:	2b00      	cmp	r3, #0
 800102e:	d109      	bne.n	8001044 <tx_application_define+0x38>
  {
    /* USER CODE BEGIN TX_Byte_Pool_Success */

    /* USER CODE END TX_Byte_Pool_Success */

    memory_ptr = (VOID *)&tx_app_byte_pool;
 8001030:	4b08      	ldr	r3, [pc, #32]	; (8001054 <tx_application_define+0x48>)
 8001032:	60bb      	str	r3, [r7, #8]
    status = App_ThreadX_Init(memory_ptr);
 8001034:	68b8      	ldr	r0, [r7, #8]
 8001036:	f003 fba1 	bl	800477c <App_ThreadX_Init>
 800103a:	60f8      	str	r0, [r7, #12]
    if (status != TX_SUCCESS)
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	2b00      	cmp	r3, #0
 8001040:	d000      	beq.n	8001044 <tx_application_define+0x38>
    {
      /* USER CODE BEGIN  App_ThreadX_Init_Error */
      while(1)
 8001042:	e7fe      	b.n	8001042 <tx_application_define+0x36>
  /* USER CODE BEGIN DYNAMIC_MEM_ALLOC */
  (void)first_unused_memory;
  /* USER CODE END DYNAMIC_MEM_ALLOC */
#endif

}
 8001044:	bf00      	nop
 8001046:	3710      	adds	r7, #16
 8001048:	46bd      	mov	sp, r7
 800104a:	bd80      	pop	{r7, pc}
 800104c:	20000094 	.word	0x20000094
 8001050:	080149e0 	.word	0x080149e0
 8001054:	20001708 	.word	0x20001708

08001058 <BSP_I2C1_Init>:
#define i2c_initialized (1)
#define i2c_uninitialized (0)


void BSP_I2C1_Init(void)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	af00      	add	r7, sp, #0
	if(hi2c1.State == HAL_I2C_STATE_RESET)
 800105c:	4b04      	ldr	r3, [pc, #16]	; (8001070 <BSP_I2C1_Init+0x18>)
 800105e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001062:	b2db      	uxtb	r3, r3
 8001064:	2b00      	cmp	r3, #0
 8001066:	d101      	bne.n	800106c <BSP_I2C1_Init+0x14>
	{
        I2C1_Init();
 8001068:	f004 fcd6 	bl	8005a18 <I2C1_Init>
	}
}
 800106c:	bf00      	nop
 800106e:	bd80      	pop	{r7, pc}
 8001070:	20001f3c 	.word	0x20001f3c

08001074 <BSP_I2C1_DeInit>:

void BSP_I2C1_DeInit(void)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	af00      	add	r7, sp, #0
	HAL_I2C_DeInit(&hi2c1);
 8001078:	4802      	ldr	r0, [pc, #8]	; (8001084 <BSP_I2C1_DeInit+0x10>)
 800107a:	f007 ff6c 	bl	8008f56 <HAL_I2C_DeInit>
}
 800107e:	bf00      	nop
 8001080:	bd80      	pop	{r7, pc}
 8001082:	bf00      	nop
 8001084:	20001f3c 	.word	0x20001f3c

08001088 <BSP_I2C2_Init>:

void BSP_I2C2_Init(void)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	af00      	add	r7, sp, #0
	if(hi2c2.State == HAL_I2C_STATE_RESET)
 800108c:	4b04      	ldr	r3, [pc, #16]	; (80010a0 <BSP_I2C2_Init+0x18>)
 800108e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001092:	b2db      	uxtb	r3, r3
 8001094:	2b00      	cmp	r3, #0
 8001096:	d101      	bne.n	800109c <BSP_I2C2_Init+0x14>
	{
        I2C2_Init();
 8001098:	f004 fcfe 	bl	8005a98 <I2C2_Init>
	}
}
 800109c:	bf00      	nop
 800109e:	bd80      	pop	{r7, pc}
 80010a0:	20001f88 	.word	0x20001f88

080010a4 <BSP_I2C2_DeInit>:

void BSP_I2C2_DeInit(void)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	af00      	add	r7, sp, #0
	HAL_I2C_DeInit(&hi2c2);
 80010a8:	4802      	ldr	r0, [pc, #8]	; (80010b4 <BSP_I2C2_DeInit+0x10>)
 80010aa:	f007 ff54 	bl	8008f56 <HAL_I2C_DeInit>
}
 80010ae:	bf00      	nop
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	bf00      	nop
 80010b4:	20001f88 	.word	0x20001f88

080010b8 <BSP_I2C1_WriteReg16>:
int32_t BSP_I2C1_ReadReg(uint16_t Address, uint16_t Reg, uint8_t *pData, uint16_t Length){
    int32_t ret = HAL_I2C_Mem_Read(&hi2c1, Address, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length, 1000);
    return ret;
}

int32_t BSP_I2C1_WriteReg16(uint16_t Address, uint16_t Reg, uint8_t *pData, uint16_t Length){
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b08a      	sub	sp, #40	; 0x28
 80010bc:	af04      	add	r7, sp, #16
 80010be:	60ba      	str	r2, [r7, #8]
 80010c0:	461a      	mov	r2, r3
 80010c2:	4603      	mov	r3, r0
 80010c4:	81fb      	strh	r3, [r7, #14]
 80010c6:	460b      	mov	r3, r1
 80010c8:	81bb      	strh	r3, [r7, #12]
 80010ca:	4613      	mov	r3, r2
 80010cc:	80fb      	strh	r3, [r7, #6]
    int32_t ret = HAL_I2C_Mem_Write(&hi2c1, Address, Reg, I2C_MEMADD_SIZE_16BIT, pData, Length, 1000);
 80010ce:	89ba      	ldrh	r2, [r7, #12]
 80010d0:	89f9      	ldrh	r1, [r7, #14]
 80010d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010d6:	9302      	str	r3, [sp, #8]
 80010d8:	88fb      	ldrh	r3, [r7, #6]
 80010da:	9301      	str	r3, [sp, #4]
 80010dc:	68bb      	ldr	r3, [r7, #8]
 80010de:	9300      	str	r3, [sp, #0]
 80010e0:	2302      	movs	r3, #2
 80010e2:	4805      	ldr	r0, [pc, #20]	; (80010f8 <BSP_I2C1_WriteReg16+0x40>)
 80010e4:	f007 ff66 	bl	8008fb4 <HAL_I2C_Mem_Write>
 80010e8:	4603      	mov	r3, r0
 80010ea:	617b      	str	r3, [r7, #20]
    return ret;
 80010ec:	697b      	ldr	r3, [r7, #20]
}
 80010ee:	4618      	mov	r0, r3
 80010f0:	3718      	adds	r7, #24
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	20001f3c 	.word	0x20001f3c

080010fc <BSP_I2C1_ReadReg16>:

int32_t BSP_I2C1_ReadReg16(uint16_t Address, uint16_t Reg, uint8_t *pData, uint16_t Length){
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b08a      	sub	sp, #40	; 0x28
 8001100:	af04      	add	r7, sp, #16
 8001102:	60ba      	str	r2, [r7, #8]
 8001104:	461a      	mov	r2, r3
 8001106:	4603      	mov	r3, r0
 8001108:	81fb      	strh	r3, [r7, #14]
 800110a:	460b      	mov	r3, r1
 800110c:	81bb      	strh	r3, [r7, #12]
 800110e:	4613      	mov	r3, r2
 8001110:	80fb      	strh	r3, [r7, #6]
    int32_t ret = HAL_I2C_Mem_Read(&hi2c1, Address, Reg, I2C_MEMADD_SIZE_16BIT, pData, Length, 1000);
 8001112:	89ba      	ldrh	r2, [r7, #12]
 8001114:	89f9      	ldrh	r1, [r7, #14]
 8001116:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800111a:	9302      	str	r3, [sp, #8]
 800111c:	88fb      	ldrh	r3, [r7, #6]
 800111e:	9301      	str	r3, [sp, #4]
 8001120:	68bb      	ldr	r3, [r7, #8]
 8001122:	9300      	str	r3, [sp, #0]
 8001124:	2302      	movs	r3, #2
 8001126:	4805      	ldr	r0, [pc, #20]	; (800113c <BSP_I2C1_ReadReg16+0x40>)
 8001128:	f008 f858 	bl	80091dc <HAL_I2C_Mem_Read>
 800112c:	4603      	mov	r3, r0
 800112e:	617b      	str	r3, [r7, #20]
    return ret;
 8001130:	697b      	ldr	r3, [r7, #20]
}
 8001132:	4618      	mov	r0, r3
 8001134:	3718      	adds	r7, #24
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}
 800113a:	bf00      	nop
 800113c:	20001f3c 	.word	0x20001f3c

08001140 <BSP_I2C2_WriteRegHTS221>:

int32_t BSP_I2C2_WriteRegHTS221(uint8_t Reg, uint8_t *pData, uint8_t Length){
 8001140:	b580      	push	{r7, lr}
 8001142:	b088      	sub	sp, #32
 8001144:	af04      	add	r7, sp, #16
 8001146:	4603      	mov	r3, r0
 8001148:	6039      	str	r1, [r7, #0]
 800114a:	71fb      	strb	r3, [r7, #7]
 800114c:	4613      	mov	r3, r2
 800114e:	71bb      	strb	r3, [r7, #6]
    int32_t ret = HAL_I2C_Mem_Write(&hi2c2, HTS221_I2C_ADDR, Reg | 0x80, I2C_MEMADD_SIZE_8BIT, pData, Length, 100);
 8001150:	79fb      	ldrb	r3, [r7, #7]
 8001152:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001156:	b2db      	uxtb	r3, r3
 8001158:	b29a      	uxth	r2, r3
 800115a:	79bb      	ldrb	r3, [r7, #6]
 800115c:	b29b      	uxth	r3, r3
 800115e:	2164      	movs	r1, #100	; 0x64
 8001160:	9102      	str	r1, [sp, #8]
 8001162:	9301      	str	r3, [sp, #4]
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	9300      	str	r3, [sp, #0]
 8001168:	2301      	movs	r3, #1
 800116a:	21be      	movs	r1, #190	; 0xbe
 800116c:	4804      	ldr	r0, [pc, #16]	; (8001180 <BSP_I2C2_WriteRegHTS221+0x40>)
 800116e:	f007 ff21 	bl	8008fb4 <HAL_I2C_Mem_Write>
 8001172:	4603      	mov	r3, r0
 8001174:	60fb      	str	r3, [r7, #12]
    return ret;
 8001176:	68fb      	ldr	r3, [r7, #12]
}
 8001178:	4618      	mov	r0, r3
 800117a:	3710      	adds	r7, #16
 800117c:	46bd      	mov	sp, r7
 800117e:	bd80      	pop	{r7, pc}
 8001180:	20001f88 	.word	0x20001f88

08001184 <BSP_I2C2_ReadRegHTS221>:

int32_t BSP_I2C2_ReadRegHTS221(uint8_t Reg, uint8_t *pData, uint8_t Length){
 8001184:	b580      	push	{r7, lr}
 8001186:	b088      	sub	sp, #32
 8001188:	af04      	add	r7, sp, #16
 800118a:	4603      	mov	r3, r0
 800118c:	6039      	str	r1, [r7, #0]
 800118e:	71fb      	strb	r3, [r7, #7]
 8001190:	4613      	mov	r3, r2
 8001192:	71bb      	strb	r3, [r7, #6]
    int32_t ret = HAL_I2C_Mem_Read(&hi2c2, HTS221_I2C_ADDR, Reg | 0x80, I2C_MEMADD_SIZE_8BIT, pData, Length, 100);
 8001194:	79fb      	ldrb	r3, [r7, #7]
 8001196:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800119a:	b2db      	uxtb	r3, r3
 800119c:	b29a      	uxth	r2, r3
 800119e:	79bb      	ldrb	r3, [r7, #6]
 80011a0:	b29b      	uxth	r3, r3
 80011a2:	2164      	movs	r1, #100	; 0x64
 80011a4:	9102      	str	r1, [sp, #8]
 80011a6:	9301      	str	r3, [sp, #4]
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	9300      	str	r3, [sp, #0]
 80011ac:	2301      	movs	r3, #1
 80011ae:	21be      	movs	r1, #190	; 0xbe
 80011b0:	4804      	ldr	r0, [pc, #16]	; (80011c4 <BSP_I2C2_ReadRegHTS221+0x40>)
 80011b2:	f008 f813 	bl	80091dc <HAL_I2C_Mem_Read>
 80011b6:	4603      	mov	r3, r0
 80011b8:	60fb      	str	r3, [r7, #12]
    return ret;
 80011ba:	68fb      	ldr	r3, [r7, #12]
}
 80011bc:	4618      	mov	r0, r3
 80011be:	3710      	adds	r7, #16
 80011c0:	46bd      	mov	sp, r7
 80011c2:	bd80      	pop	{r7, pc}
 80011c4:	20001f88 	.word	0x20001f88

080011c8 <BSP_I2C2_ReadRegISM330DHCX>:

int32_t BSP_I2C2_ReadRegISM330DHCX(uint8_t Reg, uint8_t *pData, uint8_t Length)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b088      	sub	sp, #32
 80011cc:	af04      	add	r7, sp, #16
 80011ce:	4603      	mov	r3, r0
 80011d0:	6039      	str	r1, [r7, #0]
 80011d2:	71fb      	strb	r3, [r7, #7]
 80011d4:	4613      	mov	r3, r2
 80011d6:	71bb      	strb	r3, [r7, #6]
	int32_t ret = HAL_I2C_Mem_Read(&hi2c2, ISM330DHCX_I2C_ADDR, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length, 100);
 80011d8:	79fb      	ldrb	r3, [r7, #7]
 80011da:	b29a      	uxth	r2, r3
 80011dc:	79bb      	ldrb	r3, [r7, #6]
 80011de:	b29b      	uxth	r3, r3
 80011e0:	2164      	movs	r1, #100	; 0x64
 80011e2:	9102      	str	r1, [sp, #8]
 80011e4:	9301      	str	r3, [sp, #4]
 80011e6:	683b      	ldr	r3, [r7, #0]
 80011e8:	9300      	str	r3, [sp, #0]
 80011ea:	2301      	movs	r3, #1
 80011ec:	21d6      	movs	r1, #214	; 0xd6
 80011ee:	4805      	ldr	r0, [pc, #20]	; (8001204 <BSP_I2C2_ReadRegISM330DHCX+0x3c>)
 80011f0:	f007 fff4 	bl	80091dc <HAL_I2C_Mem_Read>
 80011f4:	4603      	mov	r3, r0
 80011f6:	60fb      	str	r3, [r7, #12]
    return ret;
 80011f8:	68fb      	ldr	r3, [r7, #12]
}
 80011fa:	4618      	mov	r0, r3
 80011fc:	3710      	adds	r7, #16
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}
 8001202:	bf00      	nop
 8001204:	20001f88 	.word	0x20001f88

08001208 <BSP_I2C2_WriteRegISM330DHCX>:

int32_t BSP_I2C2_WriteRegISM330DHCX(uint8_t Reg, uint8_t *pData, uint8_t Length)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b088      	sub	sp, #32
 800120c:	af04      	add	r7, sp, #16
 800120e:	4603      	mov	r3, r0
 8001210:	6039      	str	r1, [r7, #0]
 8001212:	71fb      	strb	r3, [r7, #7]
 8001214:	4613      	mov	r3, r2
 8001216:	71bb      	strb	r3, [r7, #6]
	int32_t ret = HAL_I2C_Mem_Write(&hi2c2, ISM330DHCX_I2C_ADDR, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length, 100);
 8001218:	79fb      	ldrb	r3, [r7, #7]
 800121a:	b29a      	uxth	r2, r3
 800121c:	79bb      	ldrb	r3, [r7, #6]
 800121e:	b29b      	uxth	r3, r3
 8001220:	2164      	movs	r1, #100	; 0x64
 8001222:	9102      	str	r1, [sp, #8]
 8001224:	9301      	str	r3, [sp, #4]
 8001226:	683b      	ldr	r3, [r7, #0]
 8001228:	9300      	str	r3, [sp, #0]
 800122a:	2301      	movs	r3, #1
 800122c:	21d6      	movs	r1, #214	; 0xd6
 800122e:	4805      	ldr	r0, [pc, #20]	; (8001244 <BSP_I2C2_WriteRegISM330DHCX+0x3c>)
 8001230:	f007 fec0 	bl	8008fb4 <HAL_I2C_Mem_Write>
 8001234:	4603      	mov	r3, r0
 8001236:	60fb      	str	r3, [r7, #12]
    return ret;
 8001238:	68fb      	ldr	r3, [r7, #12]
}
 800123a:	4618      	mov	r0, r3
 800123c:	3710      	adds	r7, #16
 800123e:	46bd      	mov	sp, r7
 8001240:	bd80      	pop	{r7, pc}
 8001242:	bf00      	nop
 8001244:	20001f88 	.word	0x20001f88

08001248 <BSP_ReadPinISM330DHCX>:

int32_t BSP_ReadPinISM330DHCX(void)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	af00      	add	r7, sp, #0
    return HAL_GPIO_ReadPin(Mems_ISM330DLC_INT1_GPIO_Port, Mems_ISM330DLC_INT1_Pin);
 800124c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001250:	4802      	ldr	r0, [pc, #8]	; (800125c <BSP_ReadPinISM330DHCX+0x14>)
 8001252:	f007 fda7 	bl	8008da4 <HAL_GPIO_ReadPin>
 8001256:	4603      	mov	r3, r0
}
 8001258:	4618      	mov	r0, r3
 800125a:	bd80      	pop	{r7, pc}
 800125c:	42021000 	.word	0x42021000

08001260 <BSP_ISM330DHCX_IO_Init>:

void BSP_ISM330DHCX_IO_Init(void)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	af00      	add	r7, sp, #0
    MotionSensor_GPIO_Init();
 8001264:	f004 f9f2 	bl	800564c <MotionSensor_GPIO_Init>
	BSP_I2C2_Init();
 8001268:	f7ff ff0e 	bl	8001088 <BSP_I2C2_Init>
}
 800126c:	bf00      	nop
 800126e:	bd80      	pop	{r7, pc}

08001270 <BSP_LPS22HH_IO_Init>:

void BSP_LPS22HH_IO_Init(void)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	af00      	add	r7, sp, #0
	PressureSensor_GPIO_Init();
 8001274:	f004 fa0a 	bl	800568c <PressureSensor_GPIO_Init>
	BSP_I2C2_Init();
 8001278:	f7ff ff06 	bl	8001088 <BSP_I2C2_Init>
}
 800127c:	bf00      	nop
 800127e:	bd80      	pop	{r7, pc}

08001280 <BSP_I2C2_ReadRegLPS22HH>:

int32_t BSP_I2C2_ReadRegLPS22HH(uint8_t Reg, uint8_t *pData, uint8_t Length)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b088      	sub	sp, #32
 8001284:	af04      	add	r7, sp, #16
 8001286:	4603      	mov	r3, r0
 8001288:	6039      	str	r1, [r7, #0]
 800128a:	71fb      	strb	r3, [r7, #7]
 800128c:	4613      	mov	r3, r2
 800128e:	71bb      	strb	r3, [r7, #6]
	int32_t ret = HAL_I2C_Mem_Read(&hi2c2, LPS22HH_I2C_ADDR, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length, 100);
 8001290:	79fb      	ldrb	r3, [r7, #7]
 8001292:	b29a      	uxth	r2, r3
 8001294:	79bb      	ldrb	r3, [r7, #6]
 8001296:	b29b      	uxth	r3, r3
 8001298:	2164      	movs	r1, #100	; 0x64
 800129a:	9102      	str	r1, [sp, #8]
 800129c:	9301      	str	r3, [sp, #4]
 800129e:	683b      	ldr	r3, [r7, #0]
 80012a0:	9300      	str	r3, [sp, #0]
 80012a2:	2301      	movs	r3, #1
 80012a4:	21ba      	movs	r1, #186	; 0xba
 80012a6:	4805      	ldr	r0, [pc, #20]	; (80012bc <BSP_I2C2_ReadRegLPS22HH+0x3c>)
 80012a8:	f007 ff98 	bl	80091dc <HAL_I2C_Mem_Read>
 80012ac:	4603      	mov	r3, r0
 80012ae:	60fb      	str	r3, [r7, #12]
    return ret;
 80012b0:	68fb      	ldr	r3, [r7, #12]
}
 80012b2:	4618      	mov	r0, r3
 80012b4:	3710      	adds	r7, #16
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	bf00      	nop
 80012bc:	20001f88 	.word	0x20001f88

080012c0 <BSP_I2C2_WriteRegLPS22HH>:

int32_t BSP_I2C2_WriteRegLPS22HH(uint8_t Reg, uint8_t *pData, uint8_t Length)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b088      	sub	sp, #32
 80012c4:	af04      	add	r7, sp, #16
 80012c6:	4603      	mov	r3, r0
 80012c8:	6039      	str	r1, [r7, #0]
 80012ca:	71fb      	strb	r3, [r7, #7]
 80012cc:	4613      	mov	r3, r2
 80012ce:	71bb      	strb	r3, [r7, #6]
	int32_t ret = HAL_I2C_Mem_Write(&hi2c2, LPS22HH_I2C_ADDR, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length, 100);
 80012d0:	79fb      	ldrb	r3, [r7, #7]
 80012d2:	b29a      	uxth	r2, r3
 80012d4:	79bb      	ldrb	r3, [r7, #6]
 80012d6:	b29b      	uxth	r3, r3
 80012d8:	2164      	movs	r1, #100	; 0x64
 80012da:	9102      	str	r1, [sp, #8]
 80012dc:	9301      	str	r3, [sp, #4]
 80012de:	683b      	ldr	r3, [r7, #0]
 80012e0:	9300      	str	r3, [sp, #0]
 80012e2:	2301      	movs	r3, #1
 80012e4:	21ba      	movs	r1, #186	; 0xba
 80012e6:	4813      	ldr	r0, [pc, #76]	; (8001334 <BSP_I2C2_WriteRegLPS22HH+0x74>)
 80012e8:	f007 fe64 	bl	8008fb4 <HAL_I2C_Mem_Write>
 80012ec:	4603      	mov	r3, r0
 80012ee:	60fb      	str	r3, [r7, #12]
	if(ret != HAL_OK && hi2c2.ErrorCode == HAL_I2C_ERROR_AF)
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d013      	beq.n	800131e <BSP_I2C2_WriteRegLPS22HH+0x5e>
 80012f6:	4b0f      	ldr	r3, [pc, #60]	; (8001334 <BSP_I2C2_WriteRegLPS22HH+0x74>)
 80012f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012fa:	2b04      	cmp	r3, #4
 80012fc:	d10f      	bne.n	800131e <BSP_I2C2_WriteRegLPS22HH+0x5e>
	{
		ret = HAL_I2C_Mem_Write(&hi2c2, LPS22HH_I2C_ADDR, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length, 100); //Retry
 80012fe:	79fb      	ldrb	r3, [r7, #7]
 8001300:	b29a      	uxth	r2, r3
 8001302:	79bb      	ldrb	r3, [r7, #6]
 8001304:	b29b      	uxth	r3, r3
 8001306:	2164      	movs	r1, #100	; 0x64
 8001308:	9102      	str	r1, [sp, #8]
 800130a:	9301      	str	r3, [sp, #4]
 800130c:	683b      	ldr	r3, [r7, #0]
 800130e:	9300      	str	r3, [sp, #0]
 8001310:	2301      	movs	r3, #1
 8001312:	21ba      	movs	r1, #186	; 0xba
 8001314:	4807      	ldr	r0, [pc, #28]	; (8001334 <BSP_I2C2_WriteRegLPS22HH+0x74>)
 8001316:	f007 fe4d 	bl	8008fb4 <HAL_I2C_Mem_Write>
 800131a:	4603      	mov	r3, r0
 800131c:	60fb      	str	r3, [r7, #12]
	}

	if(ret != HAL_OK)
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	2b00      	cmp	r3, #0
 8001322:	d002      	beq.n	800132a <BSP_I2C2_WriteRegLPS22HH+0x6a>
	{
		return hi2c2.ErrorCode;
 8001324:	4b03      	ldr	r3, [pc, #12]	; (8001334 <BSP_I2C2_WriteRegLPS22HH+0x74>)
 8001326:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001328:	e000      	b.n	800132c <BSP_I2C2_WriteRegLPS22HH+0x6c>
	}
    return ret;
 800132a:	68fb      	ldr	r3, [r7, #12]
}
 800132c:	4618      	mov	r0, r3
 800132e:	3710      	adds	r7, #16
 8001330:	46bd      	mov	sp, r7
 8001332:	bd80      	pop	{r7, pc}
 8001334:	20001f88 	.word	0x20001f88

08001338 <BSP_ReadPinLPS22HH>:

int32_t BSP_ReadPinLPS22HH(void)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	af00      	add	r7, sp, #0
	return HAL_GPIO_ReadPin(Mems_INT_LPS22HH_GPIO_Port, Mems_INT_LPS22HH_Pin);
 800133c:	2104      	movs	r1, #4
 800133e:	4803      	ldr	r0, [pc, #12]	; (800134c <BSP_ReadPinLPS22HH+0x14>)
 8001340:	f007 fd30 	bl	8008da4 <HAL_GPIO_ReadPin>
 8001344:	4603      	mov	r3, r0
}
 8001346:	4618      	mov	r0, r3
 8001348:	bd80      	pop	{r7, pc}
 800134a:	bf00      	nop
 800134c:	42021800 	.word	0x42021800

08001350 <BSP_IIS2MDC_IO_Init>:

void BSP_IIS2MDC_IO_Init(void)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	af00      	add	r7, sp, #0
	MagSensor_GPIO_Init();
 8001354:	f004 f9ba 	bl	80056cc <MagSensor_GPIO_Init>
	BSP_I2C2_Init();
 8001358:	f7ff fe96 	bl	8001088 <BSP_I2C2_Init>
}
 800135c:	bf00      	nop
 800135e:	bd80      	pop	{r7, pc}

08001360 <BSP_I2C2_ReadRegIIS2MDC>:

int32_t BSP_I2C2_ReadRegIIS2MDC(uint8_t Reg, uint8_t *pData, uint8_t Length)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b088      	sub	sp, #32
 8001364:	af04      	add	r7, sp, #16
 8001366:	4603      	mov	r3, r0
 8001368:	6039      	str	r1, [r7, #0]
 800136a:	71fb      	strb	r3, [r7, #7]
 800136c:	4613      	mov	r3, r2
 800136e:	71bb      	strb	r3, [r7, #6]
	int32_t ret = HAL_I2C_Mem_Read(&hi2c2, IIS2MDC_I2C_ADDR, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length, 100);
 8001370:	79fb      	ldrb	r3, [r7, #7]
 8001372:	b29a      	uxth	r2, r3
 8001374:	79bb      	ldrb	r3, [r7, #6]
 8001376:	b29b      	uxth	r3, r3
 8001378:	2164      	movs	r1, #100	; 0x64
 800137a:	9102      	str	r1, [sp, #8]
 800137c:	9301      	str	r3, [sp, #4]
 800137e:	683b      	ldr	r3, [r7, #0]
 8001380:	9300      	str	r3, [sp, #0]
 8001382:	2301      	movs	r3, #1
 8001384:	213c      	movs	r1, #60	; 0x3c
 8001386:	4808      	ldr	r0, [pc, #32]	; (80013a8 <BSP_I2C2_ReadRegIIS2MDC+0x48>)
 8001388:	f007 ff28 	bl	80091dc <HAL_I2C_Mem_Read>
 800138c:	4603      	mov	r3, r0
 800138e:	60fb      	str	r3, [r7, #12]
	if(ret != HAL_OK)
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	2b00      	cmp	r3, #0
 8001394:	d002      	beq.n	800139c <BSP_I2C2_ReadRegIIS2MDC+0x3c>
	{
		return hi2c2.ErrorCode;
 8001396:	4b04      	ldr	r3, [pc, #16]	; (80013a8 <BSP_I2C2_ReadRegIIS2MDC+0x48>)
 8001398:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800139a:	e000      	b.n	800139e <BSP_I2C2_ReadRegIIS2MDC+0x3e>
	}
    return ret;
 800139c:	68fb      	ldr	r3, [r7, #12]
}
 800139e:	4618      	mov	r0, r3
 80013a0:	3710      	adds	r7, #16
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bd80      	pop	{r7, pc}
 80013a6:	bf00      	nop
 80013a8:	20001f88 	.word	0x20001f88

080013ac <BSP_I2C2_WriteRegIIS2MDC>:

int32_t BSP_I2C2_WriteRegIIS2MDC(uint8_t Reg, uint8_t *pData, uint8_t Length)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b088      	sub	sp, #32
 80013b0:	af04      	add	r7, sp, #16
 80013b2:	4603      	mov	r3, r0
 80013b4:	6039      	str	r1, [r7, #0]
 80013b6:	71fb      	strb	r3, [r7, #7]
 80013b8:	4613      	mov	r3, r2
 80013ba:	71bb      	strb	r3, [r7, #6]
	int32_t ret = HAL_I2C_Mem_Write(&hi2c2, IIS2MDC_I2C_ADDR, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length, 100);
 80013bc:	79fb      	ldrb	r3, [r7, #7]
 80013be:	b29a      	uxth	r2, r3
 80013c0:	79bb      	ldrb	r3, [r7, #6]
 80013c2:	b29b      	uxth	r3, r3
 80013c4:	2164      	movs	r1, #100	; 0x64
 80013c6:	9102      	str	r1, [sp, #8]
 80013c8:	9301      	str	r3, [sp, #4]
 80013ca:	683b      	ldr	r3, [r7, #0]
 80013cc:	9300      	str	r3, [sp, #0]
 80013ce:	2301      	movs	r3, #1
 80013d0:	213c      	movs	r1, #60	; 0x3c
 80013d2:	4808      	ldr	r0, [pc, #32]	; (80013f4 <BSP_I2C2_WriteRegIIS2MDC+0x48>)
 80013d4:	f007 fdee 	bl	8008fb4 <HAL_I2C_Mem_Write>
 80013d8:	4603      	mov	r3, r0
 80013da:	60fb      	str	r3, [r7, #12]
	if(ret != HAL_OK)
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d002      	beq.n	80013e8 <BSP_I2C2_WriteRegIIS2MDC+0x3c>
	{
		return hi2c2.ErrorCode;
 80013e2:	4b04      	ldr	r3, [pc, #16]	; (80013f4 <BSP_I2C2_WriteRegIIS2MDC+0x48>)
 80013e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013e6:	e000      	b.n	80013ea <BSP_I2C2_WriteRegIIS2MDC+0x3e>
	}
    return ret;
 80013e8:	68fb      	ldr	r3, [r7, #12]
}
 80013ea:	4618      	mov	r0, r3
 80013ec:	3710      	adds	r7, #16
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}
 80013f2:	bf00      	nop
 80013f4:	20001f88 	.word	0x20001f88

080013f8 <BSP_ReadPinIIS2MDC>:

int32_t BSP_ReadPinIIS2MDC(void)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	af00      	add	r7, sp, #0
	return HAL_GPIO_ReadPin(Mems_INT_IIS2MDC_GPIO_Port, Mems_INT_IIS2MDC_Pin);
 80013fc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001400:	4802      	ldr	r0, [pc, #8]	; (800140c <BSP_ReadPinIIS2MDC+0x14>)
 8001402:	f007 fccf 	bl	8008da4 <HAL_GPIO_ReadPin>
 8001406:	4603      	mov	r3, r0
}
 8001408:	4618      	mov	r0, r3
 800140a:	bd80      	pop	{r7, pc}
 800140c:	42020c00 	.word	0x42020c00

08001410 <BSP_GetTick>:

uint32_t BSP_GetTick(void)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	af00      	add	r7, sp, #0
    return HAL_GetTick();
 8001414:	f005 fa94 	bl	8006940 <HAL_GetTick>
 8001418:	4603      	mov	r3, r0
}
 800141a:	4618      	mov	r0, r3
 800141c:	bd80      	pop	{r7, pc}
	...

08001420 <BSP_I2C2_ReadRegVEML6030>:

int32_t BSP_I2C2_ReadRegVEML6030(uint8_t Reg, uint8_t *pData, uint8_t Length)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b088      	sub	sp, #32
 8001424:	af04      	add	r7, sp, #16
 8001426:	4603      	mov	r3, r0
 8001428:	6039      	str	r1, [r7, #0]
 800142a:	71fb      	strb	r3, [r7, #7]
 800142c:	4613      	mov	r3, r2
 800142e:	71bb      	strb	r3, [r7, #6]
	int32_t ret = HAL_I2C_Mem_Read(&hi2c2, VEML6030_I2C_ADDR, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length, 100);
 8001430:	79fb      	ldrb	r3, [r7, #7]
 8001432:	b29a      	uxth	r2, r3
 8001434:	79bb      	ldrb	r3, [r7, #6]
 8001436:	b29b      	uxth	r3, r3
 8001438:	2164      	movs	r1, #100	; 0x64
 800143a:	9102      	str	r1, [sp, #8]
 800143c:	9301      	str	r3, [sp, #4]
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	9300      	str	r3, [sp, #0]
 8001442:	2301      	movs	r3, #1
 8001444:	2120      	movs	r1, #32
 8001446:	4808      	ldr	r0, [pc, #32]	; (8001468 <BSP_I2C2_ReadRegVEML6030+0x48>)
 8001448:	f007 fec8 	bl	80091dc <HAL_I2C_Mem_Read>
 800144c:	4603      	mov	r3, r0
 800144e:	60fb      	str	r3, [r7, #12]
	if(ret != HAL_OK)
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	2b00      	cmp	r3, #0
 8001454:	d002      	beq.n	800145c <BSP_I2C2_ReadRegVEML6030+0x3c>
	{
		return hi2c2.ErrorCode;
 8001456:	4b04      	ldr	r3, [pc, #16]	; (8001468 <BSP_I2C2_ReadRegVEML6030+0x48>)
 8001458:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800145a:	e000      	b.n	800145e <BSP_I2C2_ReadRegVEML6030+0x3e>
	}
    return ret;
 800145c:	68fb      	ldr	r3, [r7, #12]
}
 800145e:	4618      	mov	r0, r3
 8001460:	3710      	adds	r7, #16
 8001462:	46bd      	mov	sp, r7
 8001464:	bd80      	pop	{r7, pc}
 8001466:	bf00      	nop
 8001468:	20001f88 	.word	0x20001f88

0800146c <BSP_I2C2_WriteRegVEML6030>:

int32_t BSP_I2C2_WriteRegVEML6030(uint8_t Reg, uint8_t *pData, uint8_t Length)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b088      	sub	sp, #32
 8001470:	af04      	add	r7, sp, #16
 8001472:	4603      	mov	r3, r0
 8001474:	6039      	str	r1, [r7, #0]
 8001476:	71fb      	strb	r3, [r7, #7]
 8001478:	4613      	mov	r3, r2
 800147a:	71bb      	strb	r3, [r7, #6]
	int32_t ret = HAL_I2C_Mem_Write(&hi2c2, VEML6030_I2C_ADDR, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length, 100);
 800147c:	79fb      	ldrb	r3, [r7, #7]
 800147e:	b29a      	uxth	r2, r3
 8001480:	79bb      	ldrb	r3, [r7, #6]
 8001482:	b29b      	uxth	r3, r3
 8001484:	2164      	movs	r1, #100	; 0x64
 8001486:	9102      	str	r1, [sp, #8]
 8001488:	9301      	str	r3, [sp, #4]
 800148a:	683b      	ldr	r3, [r7, #0]
 800148c:	9300      	str	r3, [sp, #0]
 800148e:	2301      	movs	r3, #1
 8001490:	2120      	movs	r1, #32
 8001492:	4808      	ldr	r0, [pc, #32]	; (80014b4 <BSP_I2C2_WriteRegVEML6030+0x48>)
 8001494:	f007 fd8e 	bl	8008fb4 <HAL_I2C_Mem_Write>
 8001498:	4603      	mov	r3, r0
 800149a:	60fb      	str	r3, [r7, #12]
	if(ret != HAL_OK)
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d002      	beq.n	80014a8 <BSP_I2C2_WriteRegVEML6030+0x3c>
	{
		return hi2c2.ErrorCode;
 80014a2:	4b04      	ldr	r3, [pc, #16]	; (80014b4 <BSP_I2C2_WriteRegVEML6030+0x48>)
 80014a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014a6:	e000      	b.n	80014aa <BSP_I2C2_WriteRegVEML6030+0x3e>
	}
    return ret;
 80014a8:	68fb      	ldr	r3, [r7, #12]
}
 80014aa:	4618      	mov	r0, r3
 80014ac:	3710      	adds	r7, #16
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}
 80014b2:	bf00      	nop
 80014b4:	20001f88 	.word	0x20001f88

080014b8 <BSP_LEDToggleRed>:
#include "BSP_LED.h"
#include "stm32u5xx_hal.h"
#include "main.h"

void BSP_LEDToggleRed(void)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	af00      	add	r7, sp, #0
    HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
 80014bc:	2140      	movs	r1, #64	; 0x40
 80014be:	4802      	ldr	r0, [pc, #8]	; (80014c8 <BSP_LEDToggleRed+0x10>)
 80014c0:	f007 fca0 	bl	8008e04 <HAL_GPIO_TogglePin>
}
 80014c4:	bf00      	nop
 80014c6:	bd80      	pop	{r7, pc}
 80014c8:	42021c00 	.word	0x42021c00

080014cc <BSP_LEDToggleGreen>:

void BSP_LEDToggleGreen(void)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	af00      	add	r7, sp, #0
    HAL_GPIO_TogglePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin);
 80014d0:	2180      	movs	r1, #128	; 0x80
 80014d2:	4802      	ldr	r0, [pc, #8]	; (80014dc <BSP_LEDToggleGreen+0x10>)
 80014d4:	f007 fc96 	bl	8008e04 <HAL_GPIO_TogglePin>
}
 80014d8:	bf00      	nop
 80014da:	bd80      	pop	{r7, pc}
 80014dc:	42021c00 	.word	0x42021c00

080014e0 <BSP_CameraInit>:

static void BSP_CameraHwReset(void);
static void BSP_CameraHWInit(void);

BSP_CameraStatus_t BSP_CameraInit(void)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	af00      	add	r7, sp, #0
	BSP_CameraHwReset();//Reset it
 80014e4:	f000 f818 	bl	8001518 <BSP_CameraHwReset>
    BSP_CameraHWInit(); //Init OV5460 driver
 80014e8:	f000 f83a 	bl	8001560 <BSP_CameraHWInit>
	return CameraOK;
 80014ec:	2300      	movs	r3, #0
}
 80014ee:	4618      	mov	r0, r3
 80014f0:	bd80      	pop	{r7, pc}
	...

080014f4 <BSP_CameraStart>:

void BSP_CameraStart(uint8_t* Buffer){
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b082      	sub	sp, #8
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
	  HAL_DCMI_Start_DMA(&hdcmi, DCMI_MODE_CONTINUOUS, (uint32_t)Buffer, CAMERA_DATA_SIZE);
 80014fc:	687a      	ldr	r2, [r7, #4]
 80014fe:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 8001502:	2100      	movs	r1, #0
 8001504:	4803      	ldr	r0, [pc, #12]	; (8001514 <BSP_CameraStart+0x20>)
 8001506:	f005 fc8d 	bl	8006e24 <HAL_DCMI_Start_DMA>
}
 800150a:	bf00      	nop
 800150c:	3708      	adds	r7, #8
 800150e:	46bd      	mov	sp, r7
 8001510:	bd80      	pop	{r7, pc}
 8001512:	bf00      	nop
 8001514:	20001e74 	.word	0x20001e74

08001518 <BSP_CameraHwReset>:
void BSP_CameraStop(void){
	  HAL_DCMI_Stop(&hdcmi);
}

static void BSP_CameraHwReset(void)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	af00      	add	r7, sp, #0
    /* Camera sensor RESET sequence */
    /* Assert the camera STANDBY and RSTI pins */

    HAL_GPIO_WritePin(CAM_XSDN_GPIO_Port, CAM_XSDN_Pin, GPIO_PIN_SET);
 800151c:	2201      	movs	r2, #1
 800151e:	2108      	movs	r1, #8
 8001520:	480e      	ldr	r0, [pc, #56]	; (800155c <BSP_CameraHwReset+0x44>)
 8001522:	f007 fc57 	bl	8008dd4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(CAM_RSTI_GPIO_Port, CAM_RSTI_Pin, GPIO_PIN_RESET);
 8001526:	2200      	movs	r2, #0
 8001528:	2104      	movs	r1, #4
 800152a:	480c      	ldr	r0, [pc, #48]	; (800155c <BSP_CameraHwReset+0x44>)
 800152c:	f007 fc52 	bl	8008dd4 <HAL_GPIO_WritePin>
    HAL_Delay(100);   /* RST and XSDN signals asserted during 100ms */
 8001530:	2064      	movs	r0, #100	; 0x64
 8001532:	f005 fa11 	bl	8006958 <HAL_Delay>

    /* De-assert the camera STANDBY pin (active high) */
    HAL_GPIO_WritePin(CAM_XSDN_GPIO_Port, CAM_XSDN_Pin, GPIO_PIN_RESET);
 8001536:	2200      	movs	r2, #0
 8001538:	2108      	movs	r1, #8
 800153a:	4808      	ldr	r0, [pc, #32]	; (800155c <BSP_CameraHwReset+0x44>)
 800153c:	f007 fc4a 	bl	8008dd4 <HAL_GPIO_WritePin>
    HAL_Delay(3);     /* RST de-asserted and XSDN de-asserted during 3ms */
 8001540:	2003      	movs	r0, #3
 8001542:	f005 fa09 	bl	8006958 <HAL_Delay>

    /* De-assert the camera RSTI pin (active low) */
    HAL_GPIO_WritePin(CAM_RSTI_GPIO_Port, CAM_RSTI_Pin, GPIO_PIN_SET);
 8001546:	2201      	movs	r2, #1
 8001548:	2104      	movs	r1, #4
 800154a:	4804      	ldr	r0, [pc, #16]	; (800155c <BSP_CameraHwReset+0x44>)
 800154c:	f007 fc42 	bl	8008dd4 <HAL_GPIO_WritePin>
    HAL_Delay(20);     /* RST de-asserted during 20ms */
 8001550:	2014      	movs	r0, #20
 8001552:	f005 fa01 	bl	8006958 <HAL_Delay>
}
 8001556:	bf00      	nop
 8001558:	bd80      	pop	{r7, pc}
 800155a:	bf00      	nop
 800155c:	42022000 	.word	0x42022000

08001560 <BSP_CameraHWInit>:

static void BSP_CameraHWInit(void){
 8001560:	b580      	push	{r7, lr}
 8001562:	b088      	sub	sp, #32
 8001564:	af00      	add	r7, sp, #0
	  uint32_t temp = 0;
 8001566:	2300      	movs	r3, #0
 8001568:	61fb      	str	r3, [r7, #28]
	  OV5640_IO_t              IO;
	  static OV5640_Handle_t   OV5640_Handle;
	  IO.Address = CAMERA_OV5640_ADDRESS;
 800156a:	2378      	movs	r3, #120	; 0x78
 800156c:	80bb      	strh	r3, [r7, #4]
	  IO.Init = BSP_I2C1_Init;
 800156e:	4b0f      	ldr	r3, [pc, #60]	; (80015ac <BSP_CameraHWInit+0x4c>)
 8001570:	60bb      	str	r3, [r7, #8]
	  IO.DeInit = BSP_I2C1_DeInit;
 8001572:	4b0f      	ldr	r3, [pc, #60]	; (80015b0 <BSP_CameraHWInit+0x50>)
 8001574:	60fb      	str	r3, [r7, #12]
      IO.Read = BSP_I2C1_ReadReg16;
 8001576:	4b0f      	ldr	r3, [pc, #60]	; (80015b4 <BSP_CameraHWInit+0x54>)
 8001578:	617b      	str	r3, [r7, #20]
      IO.Write = BSP_I2C1_WriteReg16;
 800157a:	4b0f      	ldr	r3, [pc, #60]	; (80015b8 <BSP_CameraHWInit+0x58>)
 800157c:	613b      	str	r3, [r7, #16]
      IO.GetTick = BSP_GetTick;
 800157e:	4b0f      	ldr	r3, [pc, #60]	; (80015bc <BSP_CameraHWInit+0x5c>)
 8001580:	61bb      	str	r3, [r7, #24]
      OV5640_LinkBus(&OV5640_Handle, &IO);
 8001582:	1d3b      	adds	r3, r7, #4
 8001584:	4619      	mov	r1, r3
 8001586:	480e      	ldr	r0, [pc, #56]	; (80015c0 <BSP_CameraHWInit+0x60>)
 8001588:	f002 fb26 	bl	8003bd8 <OV5640_LinkBus>
      OV5640_ReadID(&OV5640_Handle,&temp);
 800158c:	f107 031c 	add.w	r3, r7, #28
 8001590:	4619      	mov	r1, r3
 8001592:	480b      	ldr	r0, [pc, #44]	; (80015c0 <BSP_CameraHWInit+0x60>)
 8001594:	f002 fefc 	bl	8004390 <OV5640_ReadID>
      OV5640_Init(&OV5640_Handle, OV5640_R480x272, CAMERA_PF);
 8001598:	2200      	movs	r2, #0
 800159a:	2102      	movs	r1, #2
 800159c:	4808      	ldr	r0, [pc, #32]	; (80015c0 <BSP_CameraHWInit+0x60>)
 800159e:	f002 fb3f 	bl	8003c20 <OV5640_Init>
}
 80015a2:	bf00      	nop
 80015a4:	3720      	adds	r7, #32
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}
 80015aa:	bf00      	nop
 80015ac:	08001059 	.word	0x08001059
 80015b0:	08001075 	.word	0x08001075
 80015b4:	080010fd 	.word	0x080010fd
 80015b8:	080010b9 	.word	0x080010b9
 80015bc:	08001411 	.word	0x08001411
 80015c0:	2000173c 	.word	0x2000173c

080015c4 <HAL_DCMI_FrameEventCallback>:

void HAL_DCMI_FrameEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 80015c4:	b480      	push	{r7}
 80015c6:	b083      	sub	sp, #12
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
    UNUSED(hdcmi);
}
 80015cc:	bf00      	nop
 80015ce:	370c      	adds	r7, #12
 80015d0:	46bd      	mov	sp, r7
 80015d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d6:	4770      	bx	lr

080015d8 <BSP_TempHumSensorInit>:

static VEML6030_Handle_t AmbientLightSensor = {0};


int32_t BSP_TempHumSensorInit(void)
{
 80015d8:	b5b0      	push	{r4, r5, r7, lr}
 80015da:	b08a      	sub	sp, #40	; 0x28
 80015dc:	af00      	add	r7, sp, #0
	int32_t ret = 0;
 80015de:	2300      	movs	r3, #0
 80015e0:	627b      	str	r3, [r7, #36]	; 0x24
	HTS221_IO_t TempSensor_IO = {.Init = BSP_I2C2_Init,
 80015e2:	4b0f      	ldr	r3, [pc, #60]	; (8001620 <BSP_TempHumSensorInit+0x48>)
 80015e4:	f107 040c 	add.w	r4, r7, #12
 80015e8:	461d      	mov	r5, r3
 80015ea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80015ec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80015ee:	e895 0003 	ldmia.w	r5, {r0, r1}
 80015f2:	e884 0003 	stmia.w	r4, {r0, r1}
								 .Write = BSP_I2C2_WriteRegHTS221,
								 .GetTick = BSP_GetTick,
								 .ReadPin = NULL
	};

	HTS221_Init_Struct_t Settings = { .DataReadyConfig = HTS221_DataReadyDisable,
 80015f6:	4a0b      	ldr	r2, [pc, #44]	; (8001624 <BSP_TempHumSensorInit+0x4c>)
 80015f8:	1d3b      	adds	r3, r7, #4
 80015fa:	e892 0003 	ldmia.w	r2, {r0, r1}
 80015fe:	6018      	str	r0, [r3, #0]
 8001600:	3304      	adds	r3, #4
 8001602:	8019      	strh	r1, [r3, #0]
									  .HumidityResolution = HTS221_Hum64Samples,
									  .OutputDataRate = HTS221_1_0Hz,
									  .TemperatureResolution = HTS221_Temp32amples

	};
	ret = HTS221_Init(&TempSensor_Handle, Settings, &TempSensor_IO);
 8001604:	f107 030c 	add.w	r3, r7, #12
 8001608:	1d3a      	adds	r2, r7, #4
 800160a:	ca06      	ldmia	r2, {r1, r2}
 800160c:	4806      	ldr	r0, [pc, #24]	; (8001628 <BSP_TempHumSensorInit+0x50>)
 800160e:	f000 fa37 	bl	8001a80 <HTS221_Init>
 8001612:	6278      	str	r0, [r7, #36]	; 0x24
	return ret;
 8001614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8001616:	4618      	mov	r0, r3
 8001618:	3728      	adds	r7, #40	; 0x28
 800161a:	46bd      	mov	sp, r7
 800161c:	bdb0      	pop	{r4, r5, r7, pc}
 800161e:	bf00      	nop
 8001620:	080149f4 	.word	0x080149f4
 8001624:	08014a0c 	.word	0x08014a0c
 8001628:	20001760 	.word	0x20001760

0800162c <BSP_ReadTemperature>:

int32_t BSP_ReadTemperature(float *result)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b082      	sub	sp, #8
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
	return HTS221_ReadTemperature(&TempSensor_Handle, result);
 8001634:	6879      	ldr	r1, [r7, #4]
 8001636:	4804      	ldr	r0, [pc, #16]	; (8001648 <BSP_ReadTemperature+0x1c>)
 8001638:	f000 fa84 	bl	8001b44 <HTS221_ReadTemperature>
 800163c:	4603      	mov	r3, r0
}
 800163e:	4618      	mov	r0, r3
 8001640:	3708      	adds	r7, #8
 8001642:	46bd      	mov	sp, r7
 8001644:	bd80      	pop	{r7, pc}
 8001646:	bf00      	nop
 8001648:	20001760 	.word	0x20001760

0800164c <BSP_ReadHumidity>:


int32_t BSP_ReadHumidity(float *result)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b082      	sub	sp, #8
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
	return HTS221_ReadHumidity(&TempSensor_Handle, result);
 8001654:	6879      	ldr	r1, [r7, #4]
 8001656:	4804      	ldr	r0, [pc, #16]	; (8001668 <BSP_ReadHumidity+0x1c>)
 8001658:	f000 fab9 	bl	8001bce <HTS221_ReadHumidity>
 800165c:	4603      	mov	r3, r0
}
 800165e:	4618      	mov	r0, r3
 8001660:	3708      	adds	r7, #8
 8001662:	46bd      	mov	sp, r7
 8001664:	bd80      	pop	{r7, pc}
 8001666:	bf00      	nop
 8001668:	20001760 	.word	0x20001760

0800166c <BSP_PressureSensorInit>:
{
	return HTS221_DisableHeater(&TempSensor_Handle);
}

int32_t BSP_PressureSensorInit(void)
{
 800166c:	b5b0      	push	{r4, r5, r7, lr}
 800166e:	b090      	sub	sp, #64	; 0x40
 8001670:	af04      	add	r7, sp, #16
	LPS22HH_IO_t PressureSensor_IO =
 8001672:	4b13      	ldr	r3, [pc, #76]	; (80016c0 <BSP_PressureSensorInit+0x54>)
 8001674:	f107 0414 	add.w	r4, r7, #20
 8001678:	461d      	mov	r5, r3
 800167a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800167c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800167e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001682:	e884 0003 	stmia.w	r4, {r0, r1}
			.Write = BSP_I2C2_WriteRegLPS22HH,
			.GetTick = BSP_GetTick,
			.ReadPin = BSP_ReadPinLPS22HH
	};

	LPS22HH_Init_Struct_t PressureSettings =
 8001686:	4b0f      	ldr	r3, [pc, #60]	; (80016c4 <BSP_PressureSensorInit+0x58>)
 8001688:	463c      	mov	r4, r7
 800168a:	461d      	mov	r5, r3
 800168c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800168e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001690:	682b      	ldr	r3, [r5, #0]
 8001692:	6023      	str	r3, [r4, #0]
			.F_MODE = LPS22HH_FifoBypass,
			.WTM = LPS22HH_DefaultSetting,
			.REF_P = LPS22HH_DefaultSetting
	};

	int32_t ret = LPS22HH_Init(&PressureSensor, PressureSettings, &PressureSensor_IO);
 8001694:	f107 0314 	add.w	r3, r7, #20
 8001698:	9302      	str	r3, [sp, #8]
 800169a:	466a      	mov	r2, sp
 800169c:	f107 030c 	add.w	r3, r7, #12
 80016a0:	e893 0003 	ldmia.w	r3, {r0, r1}
 80016a4:	e882 0003 	stmia.w	r2, {r0, r1}
 80016a8:	463b      	mov	r3, r7
 80016aa:	cb0e      	ldmia	r3, {r1, r2, r3}
 80016ac:	4806      	ldr	r0, [pc, #24]	; (80016c8 <BSP_PressureSensorInit+0x5c>)
 80016ae:	f001 fedb 	bl	8003468 <LPS22HH_Init>
 80016b2:	62f8      	str	r0, [r7, #44]	; 0x2c
	return ret;
 80016b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80016b6:	4618      	mov	r0, r3
 80016b8:	3730      	adds	r7, #48	; 0x30
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bdb0      	pop	{r4, r5, r7, pc}
 80016be:	bf00      	nop
 80016c0:	08014a14 	.word	0x08014a14
 80016c4:	08014a2c 	.word	0x08014a2c
 80016c8:	20001788 	.word	0x20001788

080016cc <BSP_ReadPressure>:

int32_t BSP_ReadPressure(float *result)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b084      	sub	sp, #16
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
	int32_t ret = LPS22HH_ReadPressure(&PressureSensor, result);
 80016d4:	6879      	ldr	r1, [r7, #4]
 80016d6:	4804      	ldr	r0, [pc, #16]	; (80016e8 <BSP_ReadPressure+0x1c>)
 80016d8:	f001 ff50 	bl	800357c <LPS22HH_ReadPressure>
 80016dc:	60f8      	str	r0, [r7, #12]
	return ret;
 80016de:	68fb      	ldr	r3, [r7, #12]
}
 80016e0:	4618      	mov	r0, r3
 80016e2:	3710      	adds	r7, #16
 80016e4:	46bd      	mov	sp, r7
 80016e6:	bd80      	pop	{r7, pc}
 80016e8:	20001788 	.word	0x20001788

080016ec <BSP_MagnetometerInit>:
    return ret;
}
*/

int32_t BSP_MagnetometerInit(void)
{
 80016ec:	b5b0      	push	{r4, r5, r7, lr}
 80016ee:	b090      	sub	sp, #64	; 0x40
 80016f0:	af04      	add	r7, sp, #16
    IIS2MDC_IO_t MagnetometerIO =
 80016f2:	4b13      	ldr	r3, [pc, #76]	; (8001740 <BSP_MagnetometerInit+0x54>)
 80016f4:	f107 0414 	add.w	r4, r7, #20
 80016f8:	461d      	mov	r5, r3
 80016fa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80016fc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80016fe:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001702:	e884 0003 	stmia.w	r4, {r0, r1}
			.Write = BSP_I2C2_WriteRegIIS2MDC,
			.GetTick = BSP_GetTick,
			.ReadPin = BSP_ReadPinIIS2MDC
    };

    IIS2MDC_InitStruct_t MagnetometerSettings =
 8001706:	4b0f      	ldr	r3, [pc, #60]	; (8001744 <BSP_MagnetometerInit+0x58>)
 8001708:	463c      	mov	r4, r7
 800170a:	461d      	mov	r5, r3
 800170c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800170e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001710:	682b      	ldr	r3, [r5, #0]
 8001712:	6023      	str	r3, [r4, #0]
			.OffsetX = 0,
			.OffsetY = 0,
			.OffsetZ = 0
    };

    int32_t ret = IIS2MDC_Init(&Magnetometer, MagnetometerSettings, &MagnetometerIO);
 8001714:	f107 0314 	add.w	r3, r7, #20
 8001718:	9302      	str	r3, [sp, #8]
 800171a:	466a      	mov	r2, sp
 800171c:	f107 030c 	add.w	r3, r7, #12
 8001720:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001724:	e882 0003 	stmia.w	r2, {r0, r1}
 8001728:	463b      	mov	r3, r7
 800172a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800172c:	4806      	ldr	r0, [pc, #24]	; (8001748 <BSP_MagnetometerInit+0x5c>)
 800172e:	f000 fd9d 	bl	800226c <IIS2MDC_Init>
 8001732:	62f8      	str	r0, [r7, #44]	; 0x2c
    return ret;
 8001734:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8001736:	4618      	mov	r0, r3
 8001738:	3730      	adds	r7, #48	; 0x30
 800173a:	46bd      	mov	sp, r7
 800173c:	bdb0      	pop	{r4, r5, r7, pc}
 800173e:	bf00      	nop
 8001740:	08014a40 	.word	0x08014a40
 8001744:	08014a58 	.word	0x08014a58
 8001748:	200017b0 	.word	0x200017b0

0800174c <BSP_ReadMagnetometerXYZ>:

int32_t BSP_ReadMagnetometerXYZ(float *Mx, float *My, float *Mz)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b086      	sub	sp, #24
 8001750:	af00      	add	r7, sp, #0
 8001752:	60f8      	str	r0, [r7, #12]
 8001754:	60b9      	str	r1, [r7, #8]
 8001756:	607a      	str	r2, [r7, #4]
    int32_t ret = IIS2MDC_ReadMagnetismXYZ(&Magnetometer, Mx, My, Mz);
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	68ba      	ldr	r2, [r7, #8]
 800175c:	68f9      	ldr	r1, [r7, #12]
 800175e:	4804      	ldr	r0, [pc, #16]	; (8001770 <BSP_ReadMagnetometerXYZ+0x24>)
 8001760:	f000 fe7a 	bl	8002458 <IIS2MDC_ReadMagnetismXYZ>
 8001764:	6178      	str	r0, [r7, #20]
    return ret;
 8001766:	697b      	ldr	r3, [r7, #20]
}
 8001768:	4618      	mov	r0, r3
 800176a:	3718      	adds	r7, #24
 800176c:	46bd      	mov	sp, r7
 800176e:	bd80      	pop	{r7, pc}
 8001770:	200017b0 	.word	0x200017b0

08001774 <BSP_GetTempPeriod>:
	int32_t ret = IIS2MDC_ReadMagnetismZ(&Magnetometer, Mz);
	return ret;
}

int32_t BSP_GetTempPeriod(uint32_t *Period)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b084      	sub	sp, #16
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
    int32_t ret = HTS221_GetSamplePeriod(&TempSensor_Handle, Period);
 800177c:	6879      	ldr	r1, [r7, #4]
 800177e:	4804      	ldr	r0, [pc, #16]	; (8001790 <BSP_GetTempPeriod+0x1c>)
 8001780:	f000 fcc4 	bl	800210c <HTS221_GetSamplePeriod>
 8001784:	60f8      	str	r0, [r7, #12]
    return ret;
 8001786:	68fb      	ldr	r3, [r7, #12]
}
 8001788:	4618      	mov	r0, r3
 800178a:	3710      	adds	r7, #16
 800178c:	46bd      	mov	sp, r7
 800178e:	bd80      	pop	{r7, pc}
 8001790:	20001760 	.word	0x20001760

08001794 <BSP_GetMagneticPeriod>:


int32_t BSP_GetMagneticPeriod(uint32_t *Period)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b084      	sub	sp, #16
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
    int32_t ret = IIS2MDC_GetSamplePeriod(&Magnetometer, Period);
 800179c:	6879      	ldr	r1, [r7, #4]
 800179e:	4804      	ldr	r0, [pc, #16]	; (80017b0 <BSP_GetMagneticPeriod+0x1c>)
 80017a0:	f001 f840 	bl	8002824 <IIS2MDC_GetSamplePeriod>
 80017a4:	60f8      	str	r0, [r7, #12]
    return ret;
 80017a6:	68fb      	ldr	r3, [r7, #12]
}
 80017a8:	4618      	mov	r0, r3
 80017aa:	3710      	adds	r7, #16
 80017ac:	46bd      	mov	sp, r7
 80017ae:	bd80      	pop	{r7, pc}
 80017b0:	200017b0 	.word	0x200017b0

080017b4 <BSP_GetPressurePeriod>:

int32_t BSP_GetPressurePeriod(uint32_t *Period){
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b084      	sub	sp, #16
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
    int32_t ret = LPS22HH_GetSamplePeriod(&PressureSensor, Period);
 80017bc:	6879      	ldr	r1, [r7, #4]
 80017be:	4804      	ldr	r0, [pc, #16]	; (80017d0 <BSP_GetPressurePeriod+0x1c>)
 80017c0:	f002 f936 	bl	8003a30 <LPS22HH_GetSamplePeriod>
 80017c4:	60f8      	str	r0, [r7, #12]
    return ret;
 80017c6:	68fb      	ldr	r3, [r7, #12]
}
 80017c8:	4618      	mov	r0, r3
 80017ca:	3710      	adds	r7, #16
 80017cc:	46bd      	mov	sp, r7
 80017ce:	bd80      	pop	{r7, pc}
 80017d0:	20001788 	.word	0x20001788

080017d4 <BSP_AmbientLightInit>:

int32_t BSP_AmbientLightInit(void)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b088      	sub	sp, #32
 80017d8:	af00      	add	r7, sp, #0
    VEML6030_IO_t IO = {
 80017da:	1d3b      	adds	r3, r7, #4
 80017dc:	2200      	movs	r2, #0
 80017de:	601a      	str	r2, [r3, #0]
 80017e0:	605a      	str	r2, [r3, #4]
 80017e2:	609a      	str	r2, [r3, #8]
 80017e4:	60da      	str	r2, [r3, #12]
 80017e6:	611a      	str	r2, [r3, #16]
 80017e8:	615a      	str	r2, [r3, #20]
 80017ea:	4b0c      	ldr	r3, [pc, #48]	; (800181c <BSP_AmbientLightInit+0x48>)
 80017ec:	607b      	str	r3, [r7, #4]
 80017ee:	4b0c      	ldr	r3, [pc, #48]	; (8001820 <BSP_AmbientLightInit+0x4c>)
 80017f0:	60fb      	str	r3, [r7, #12]
 80017f2:	4b0c      	ldr	r3, [pc, #48]	; (8001824 <BSP_AmbientLightInit+0x50>)
 80017f4:	613b      	str	r3, [r7, #16]
 80017f6:	4b0c      	ldr	r3, [pc, #48]	; (8001828 <BSP_AmbientLightInit+0x54>)
 80017f8:	617b      	str	r3, [r7, #20]
			.GetTick = BSP_GetTick,
			.Read = BSP_I2C2_ReadRegVEML6030,
			.Write = BSP_I2C2_WriteRegVEML6030
    };

    VEML_InitSettings_t Settings =
 80017fa:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80017fe:	803b      	strh	r3, [r7, #0]
 8001800:	2300      	movs	r3, #0
 8001802:	70bb      	strb	r3, [r7, #2]
    {
    		.ALSConfig = VEML6030_INTTIME_100 | VEML6030_ALS_GAIN_DIV4 | VEML6030_PERS_1,
			.PowerSavingMode = VEML_POWERSAVING_MODE1
    };

    int32_t ret = VEML6030_Init(&AmbientLightSensor, Settings, &IO);
 8001804:	1d3b      	adds	r3, r7, #4
 8001806:	461a      	mov	r2, r3
 8001808:	6839      	ldr	r1, [r7, #0]
 800180a:	4808      	ldr	r0, [pc, #32]	; (800182c <BSP_AmbientLightInit+0x58>)
 800180c:	f002 fe10 	bl	8004430 <VEML6030_Init>
 8001810:	61f8      	str	r0, [r7, #28]
    return ret;
 8001812:	69fb      	ldr	r3, [r7, #28]
}
 8001814:	4618      	mov	r0, r3
 8001816:	3720      	adds	r7, #32
 8001818:	46bd      	mov	sp, r7
 800181a:	bd80      	pop	{r7, pc}
 800181c:	08001089 	.word	0x08001089
 8001820:	0800146d 	.word	0x0800146d
 8001824:	08001421 	.word	0x08001421
 8001828:	08001411 	.word	0x08001411
 800182c:	200017d8 	.word	0x200017d8

08001830 <BSP_ReadAmbientLight>:

int32_t BSP_ReadAmbientLight(float *Light)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b084      	sub	sp, #16
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
    int32_t ret = VEML6030_ReadLight(&AmbientLightSensor, Light);
 8001838:	6879      	ldr	r1, [r7, #4]
 800183a:	4804      	ldr	r0, [pc, #16]	; (800184c <BSP_ReadAmbientLight+0x1c>)
 800183c:	f002 fe92 	bl	8004564 <VEML6030_ReadLight>
 8001840:	60f8      	str	r0, [r7, #12]
    return ret;
 8001842:	68fb      	ldr	r3, [r7, #12]
}
 8001844:	4618      	mov	r0, r3
 8001846:	3710      	adds	r7, #16
 8001848:	46bd      	mov	sp, r7
 800184a:	bd80      	pop	{r7, pc}
 800184c:	200017d8 	.word	0x200017d8

08001850 <BSP_MotionSensorInit>:
#include "tim.h"

static ISM330DHCX_Handle_t MotionSensor;

int32_t BSP_MotionSensorInit(void)
{
 8001850:	b5b0      	push	{r4, r5, r7, lr}
 8001852:	b0a6      	sub	sp, #152	; 0x98
 8001854:	af0c      	add	r7, sp, #48	; 0x30
	int32_t ret = 0;
 8001856:	2300      	movs	r3, #0
 8001858:	663b      	str	r3, [r7, #96]	; 0x60
	float JunkData[3];
	uint8_t DiscardedXLSamples = 0;
 800185a:	2300      	movs	r3, #0
 800185c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	uint8_t DiscardedGyroSamples = 0;
 8001860:	2300      	movs	r3, #0
 8001862:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
	ISM330DHCX_IO_t SensorIO =
 8001866:	4b39      	ldr	r3, [pc, #228]	; (800194c <BSP_MotionSensorInit+0xfc>)
 8001868:	f107 0438 	add.w	r4, r7, #56	; 0x38
 800186c:	461d      	mov	r5, r3
 800186e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001870:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001872:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001876:	e884 0007 	stmia.w	r4, {r0, r1, r2}
			.GetTick = BSP_GetTick,
			.ReadInt1Pin = BSP_ReadPinISM330DHCX,
			.ReadInt2Pin = NULL
	};

	ISM330DHCX_Init_Struct_t Init =
 800187a:	1d3b      	adds	r3, r7, #4
 800187c:	2234      	movs	r2, #52	; 0x34
 800187e:	2100      	movs	r1, #0
 8001880:	4618      	mov	r0, r3
 8001882:	f012 fb9d 	bl	8013fc0 <memset>
 8001886:	2304      	movs	r3, #4
 8001888:	71bb      	strb	r3, [r7, #6]
 800188a:	2330      	movs	r3, #48	; 0x30
 800188c:	773b      	strb	r3, [r7, #28]
 800188e:	2302      	movs	r3, #2
 8001890:	77fb      	strb	r3, [r7, #31]
 8001892:	2360      	movs	r3, #96	; 0x60
 8001894:	f887 3020 	strb.w	r3, [r7, #32]
 8001898:	230c      	movs	r3, #12
 800189a:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
 800189e:	2330      	movs	r3, #48	; 0x30
 80018a0:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 80018a4:	2308      	movs	r3, #8
 80018a6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80018aa:	2303      	movs	r3, #3
 80018ac:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

			.TIMESTAMP_EN = ISM330DHCX_DefaultSetting

	};

	ret = ISM330DHCX_Init(&MotionSensor, Init, &SensorIO);
 80018b0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80018b4:	930a      	str	r3, [sp, #40]	; 0x28
 80018b6:	466d      	mov	r5, sp
 80018b8:	f107 0410 	add.w	r4, r7, #16
 80018bc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80018be:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80018c0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80018c2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80018c4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80018c8:	e885 0003 	stmia.w	r5, {r0, r1}
 80018cc:	1d3b      	adds	r3, r7, #4
 80018ce:	cb0e      	ldmia	r3, {r1, r2, r3}
 80018d0:	481f      	ldr	r0, [pc, #124]	; (8001950 <BSP_MotionSensorInit+0x100>)
 80018d2:	f001 f87b 	bl	80029cc <ISM330DHCX_Init>
 80018d6:	6638      	str	r0, [r7, #96]	; 0x60
	if(ret !=ISM330DHCX_Ok)
 80018d8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d029      	beq.n	8001932 <BSP_MotionSensorInit+0xe2>
	{
		return ret;
 80018de:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80018e0:	e030      	b.n	8001944 <BSP_MotionSensorInit+0xf4>
	}

	//Discard Junk Samples
	while(DiscardedXLSamples < 6 && DiscardedGyroSamples < 6)
	{
        if(BSP_ReadAccelXYZ(&JunkData[0],&JunkData[1],&JunkData[2]) ==ISM330DHCX_DataReady)
 80018e2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80018e6:	f103 0208 	add.w	r2, r3, #8
 80018ea:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80018ee:	1d19      	adds	r1, r3, #4
 80018f0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80018f4:	4618      	mov	r0, r3
 80018f6:	f000 f82d 	bl	8001954 <BSP_ReadAccelXYZ>
 80018fa:	4603      	mov	r3, r0
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d104      	bne.n	800190a <BSP_MotionSensorInit+0xba>
        {
        	DiscardedXLSamples++;
 8001900:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001904:	3301      	adds	r3, #1
 8001906:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        }

        if(BSP_ReadGyroXYZ(&JunkData[0],&JunkData[1],&JunkData[2]) ==ISM330DHCX_DataReady)
 800190a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800190e:	f103 0208 	add.w	r2, r3, #8
 8001912:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001916:	1d19      	adds	r1, r3, #4
 8001918:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800191c:	4618      	mov	r0, r3
 800191e:	f000 f835 	bl	800198c <BSP_ReadGyroXYZ>
 8001922:	4603      	mov	r3, r0
 8001924:	2b00      	cmp	r3, #0
 8001926:	d104      	bne.n	8001932 <BSP_MotionSensorInit+0xe2>
        {
        	DiscardedGyroSamples++;
 8001928:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800192c:	3301      	adds	r3, #1
 800192e:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
	while(DiscardedXLSamples < 6 && DiscardedGyroSamples < 6)
 8001932:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001936:	2b05      	cmp	r3, #5
 8001938:	d803      	bhi.n	8001942 <BSP_MotionSensorInit+0xf2>
 800193a:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800193e:	2b05      	cmp	r3, #5
 8001940:	d9cf      	bls.n	80018e2 <BSP_MotionSensorInit+0x92>
        }
	}
	return ISM330DHCX_Ok;
 8001942:	2300      	movs	r3, #0
}
 8001944:	4618      	mov	r0, r3
 8001946:	3768      	adds	r7, #104	; 0x68
 8001948:	46bd      	mov	sp, r7
 800194a:	bdb0      	pop	{r4, r5, r7, pc}
 800194c:	08014a6c 	.word	0x08014a6c
 8001950:	20001804 	.word	0x20001804

08001954 <BSP_ReadAccelXYZ>:

int32_t BSP_ReadAccelXYZ(float *Ax, float *Ay, float *Az)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b086      	sub	sp, #24
 8001958:	af00      	add	r7, sp, #0
 800195a:	60f8      	str	r0, [r7, #12]
 800195c:	60b9      	str	r1, [r7, #8]
 800195e:	607a      	str	r2, [r7, #4]
    int32_t ret = 0;
 8001960:	2300      	movs	r3, #0
 8001962:	617b      	str	r3, [r7, #20]
    ret = ISM330DHCX_ReadAccel(&MotionSensor, Ax, Ay, Az);
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	68ba      	ldr	r2, [r7, #8]
 8001968:	68f9      	ldr	r1, [r7, #12]
 800196a:	4807      	ldr	r0, [pc, #28]	; (8001988 <BSP_ReadAccelXYZ+0x34>)
 800196c:	f001 f8de 	bl	8002b2c <ISM330DHCX_ReadAccel>
 8001970:	6178      	str	r0, [r7, #20]
    if(ret != ISM330DHCX_DataReady)
 8001972:	697b      	ldr	r3, [r7, #20]
 8001974:	2b00      	cmp	r3, #0
 8001976:	d001      	beq.n	800197c <BSP_ReadAccelXYZ+0x28>
    {
    	return ret;
 8001978:	697b      	ldr	r3, [r7, #20]
 800197a:	e000      	b.n	800197e <BSP_ReadAccelXYZ+0x2a>
    }
    return ISM330DHCX_DataReady;
 800197c:	2300      	movs	r3, #0

}
 800197e:	4618      	mov	r0, r3
 8001980:	3718      	adds	r7, #24
 8001982:	46bd      	mov	sp, r7
 8001984:	bd80      	pop	{r7, pc}
 8001986:	bf00      	nop
 8001988:	20001804 	.word	0x20001804

0800198c <BSP_ReadGyroXYZ>:

int32_t BSP_ReadGyroXYZ(float *Wx, float *Wy, float *Wz)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b086      	sub	sp, #24
 8001990:	af00      	add	r7, sp, #0
 8001992:	60f8      	str	r0, [r7, #12]
 8001994:	60b9      	str	r1, [r7, #8]
 8001996:	607a      	str	r2, [r7, #4]
    int32_t ret = 0;
 8001998:	2300      	movs	r3, #0
 800199a:	617b      	str	r3, [r7, #20]
    ret = ISM330DHCX_ReadGyro(&MotionSensor, Wx, Wy, Wz);
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	68ba      	ldr	r2, [r7, #8]
 80019a0:	68f9      	ldr	r1, [r7, #12]
 80019a2:	4807      	ldr	r0, [pc, #28]	; (80019c0 <BSP_ReadGyroXYZ+0x34>)
 80019a4:	f001 f921 	bl	8002bea <ISM330DHCX_ReadGyro>
 80019a8:	6178      	str	r0, [r7, #20]
    if(ret != ISM330DHCX_DataReady)
 80019aa:	697b      	ldr	r3, [r7, #20]
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d001      	beq.n	80019b4 <BSP_ReadGyroXYZ+0x28>
    {
    	return ret;
 80019b0:	697b      	ldr	r3, [r7, #20]
 80019b2:	e000      	b.n	80019b6 <BSP_ReadGyroXYZ+0x2a>
    }
    return ISM330DHCX_DataReady;
 80019b4:	2300      	movs	r3, #0

}
 80019b6:	4618      	mov	r0, r3
 80019b8:	3718      	adds	r7, #24
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bd80      	pop	{r7, pc}
 80019be:	bf00      	nop
 80019c0:	20001804 	.word	0x20001804

080019c4 <BSP_SynchronizeIRQ>:
	int32_t ret = ISM330DHCX_GetGyroPeriod(&MotionSensor, Period);
	return ret;
}

void BSP_SynchronizeIRQ(void)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b084      	sub	sp, #16
 80019c8:	af00      	add	r7, sp, #0
    float dummy_data[3];
    //Read any data thats available
    BSP_ReadAccelXYZ(&dummy_data[0],&dummy_data[1],&dummy_data[2]);
 80019ca:	1d3b      	adds	r3, r7, #4
 80019cc:	f103 0208 	add.w	r2, r3, #8
 80019d0:	1d3b      	adds	r3, r7, #4
 80019d2:	1d19      	adds	r1, r3, #4
 80019d4:	1d3b      	adds	r3, r7, #4
 80019d6:	4618      	mov	r0, r3
 80019d8:	f7ff ffbc 	bl	8001954 <BSP_ReadAccelXYZ>
    BSP_ReadGyroXYZ(&dummy_data[0],&dummy_data[1],&dummy_data[2]);
 80019dc:	1d3b      	adds	r3, r7, #4
 80019de:	f103 0208 	add.w	r2, r3, #8
 80019e2:	1d3b      	adds	r3, r7, #4
 80019e4:	1d19      	adds	r1, r3, #4
 80019e6:	1d3b      	adds	r3, r7, #4
 80019e8:	4618      	mov	r0, r3
 80019ea:	f7ff ffcf 	bl	800198c <BSP_ReadGyroXYZ>
    //Wait for New Data
    while(BSP_ReadAccelXYZ(&dummy_data[0],&dummy_data[1],&dummy_data[2]) == ISM330DHCX_DataNotReady);
 80019ee:	bf00      	nop
 80019f0:	1d3b      	adds	r3, r7, #4
 80019f2:	f103 0208 	add.w	r2, r3, #8
 80019f6:	1d3b      	adds	r3, r7, #4
 80019f8:	1d19      	adds	r1, r3, #4
 80019fa:	1d3b      	adds	r3, r7, #4
 80019fc:	4618      	mov	r0, r3
 80019fe:	f7ff ffa9 	bl	8001954 <BSP_ReadAccelXYZ>
 8001a02:	4603      	mov	r3, r0
 8001a04:	f64b 62ef 	movw	r2, #48879	; 0xbeef
 8001a08:	4293      	cmp	r3, r2
 8001a0a:	d0f1      	beq.n	80019f0 <BSP_SynchronizeIRQ+0x2c>
    BSP_ReadGyroXYZ(&dummy_data[0],&dummy_data[1],&dummy_data[2]);
 8001a0c:	1d3b      	adds	r3, r7, #4
 8001a0e:	f103 0208 	add.w	r2, r3, #8
 8001a12:	1d3b      	adds	r3, r7, #4
 8001a14:	1d19      	adds	r1, r3, #4
 8001a16:	1d3b      	adds	r3, r7, #4
 8001a18:	4618      	mov	r0, r3
 8001a1a:	f7ff ffb7 	bl	800198c <BSP_ReadGyroXYZ>
    HAL_TIM_Base_Start_IT(&htim7);
 8001a1e:	4803      	ldr	r0, [pc, #12]	; (8001a2c <BSP_SynchronizeIRQ+0x68>)
 8001a20:	f00d fb24 	bl	800f06c <HAL_TIM_Base_Start_IT>
}
 8001a24:	bf00      	nop
 8001a26:	3710      	adds	r7, #16
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	bd80      	pop	{r7, pc}
 8001a2c:	200020e0 	.word	0x200020e0

08001a30 <BSP_RamInit>:
#include "octospi.h"
#include <stdint.h>



void BSP_RamInit(void){
 8001a30:	b580      	push	{r7, lr}
 8001a32:	af00      	add	r7, sp, #0
    OSPI_DelayBlockConfig();
 8001a34:	f004 fc30 	bl	8006298 <OSPI_DelayBlockConfig>
    OSPI_EnableMemMappedMode();
 8001a38:	f004 fbd2 	bl	80061e0 <OSPI_EnableMemMappedMode>
    BSP_RamErase();
 8001a3c:	f000 f802 	bl	8001a44 <BSP_RamErase>
   // BSP_RamTest();
}
 8001a40:	bf00      	nop
 8001a42:	bd80      	pop	{r7, pc}

08001a44 <BSP_RamErase>:

void BSP_RamErase(void){
 8001a44:	b480      	push	{r7}
 8001a46:	b083      	sub	sp, #12
 8001a48:	af00      	add	r7, sp, #0
	  uint32_t *pRam = (uint32_t*)OSPI1_RAM_BASE;
 8001a4a:	f04f 4310 	mov.w	r3, #2415919104	; 0x90000000
 8001a4e:	603b      	str	r3, [r7, #0]
	  for(uint32_t i = 0; i < (OSPI1_RAM_LENGTH / 4); i = i + 1){
 8001a50:	2300      	movs	r3, #0
 8001a52:	607b      	str	r3, [r7, #4]
 8001a54:	e008      	b.n	8001a68 <BSP_RamErase+0x24>
		  *(pRam + i) = 0;
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	009b      	lsls	r3, r3, #2
 8001a5a:	683a      	ldr	r2, [r7, #0]
 8001a5c:	4413      	add	r3, r2
 8001a5e:	2200      	movs	r2, #0
 8001a60:	601a      	str	r2, [r3, #0]
	  for(uint32_t i = 0; i < (OSPI1_RAM_LENGTH / 4); i = i + 1){
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	3301      	adds	r3, #1
 8001a66:	607b      	str	r3, [r7, #4]
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001a6e:	d3f2      	bcc.n	8001a56 <BSP_RamErase+0x12>
	  }
}
 8001a70:	bf00      	nop
 8001a72:	bf00      	nop
 8001a74:	370c      	adds	r7, #12
 8001a76:	46bd      	mov	sp, r7
 8001a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7c:	4770      	bx	lr
	...

08001a80 <HTS221_Init>:
static int32_t HTS221_CalculateTemperature(HTS221_Handle_t *Handle, float *temperature);
static int32_t HTS221_CalculateHumidity(HTS221_Handle_t *Handle, float *humidity);


int32_t HTS221_Init(HTS221_Handle_t *Handle, HTS221_Init_Struct_t Settings, HTS221_IO_t *IO)
{
 8001a80:	b5b0      	push	{r4, r5, r7, lr}
 8001a82:	b084      	sub	sp, #16
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	60f8      	str	r0, [r7, #12]
 8001a88:	1d38      	adds	r0, r7, #4
 8001a8a:	e880 0006 	stmia.w	r0, {r1, r2}
 8001a8e:	603b      	str	r3, [r7, #0]
    if(Handle == NULL)
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d102      	bne.n	8001a9c <HTS221_Init+0x1c>
    {
    	return HTS221_Error;
 8001a96:	f04f 33ff 	mov.w	r3, #4294967295
 8001a9a:	e036      	b.n	8001b0a <HTS221_Init+0x8a>
    }
    Handle->IO = *IO;
 8001a9c:	68fa      	ldr	r2, [r7, #12]
 8001a9e:	683b      	ldr	r3, [r7, #0]
 8001aa0:	4614      	mov	r4, r2
 8001aa2:	461d      	mov	r5, r3
 8001aa4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001aa6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001aa8:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001aac:	e884 0003 	stmia.w	r4, {r0, r1}
    Handle->Context.Handle = Handle;
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	68fa      	ldr	r2, [r7, #12]
 8001ab4:	619a      	str	r2, [r3, #24]
    Handle->Context.Read = HTS221_ReadRegWrapper;
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	4a16      	ldr	r2, [pc, #88]	; (8001b14 <HTS221_Init+0x94>)
 8001aba:	61da      	str	r2, [r3, #28]
    Handle->Context.Write = HTS221_WriteRegWrapper;
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	4a16      	ldr	r2, [pc, #88]	; (8001b18 <HTS221_Init+0x98>)
 8001ac0:	621a      	str	r2, [r3, #32]

    if(Settings.DataReadyConfig == HTS221_DataReadyEnable && Handle->IO.ReadPin == NULL)
 8001ac2:	7a7b      	ldrb	r3, [r7, #9]
 8001ac4:	2b04      	cmp	r3, #4
 8001ac6:	d106      	bne.n	8001ad6 <HTS221_Init+0x56>
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	695b      	ldr	r3, [r3, #20]
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d102      	bne.n	8001ad6 <HTS221_Init+0x56>
    {
    	return HTS221_Error; //Must provide a read pin function if using the data ready pin
 8001ad0:	f04f 33ff 	mov.w	r3, #4294967295
 8001ad4:	e019      	b.n	8001b0a <HTS221_Init+0x8a>
    }
    Handle->DRDY_Config = Settings.DataReadyConfig;
 8001ad6:	7a7a      	ldrb	r2, [r7, #9]
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    Handle->DRDY_Polarity = Settings.DataReadySignalPolarity;
 8001ade:	79fa      	ldrb	r2, [r7, #7]
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    //Initialized Bus
    if(Handle->IO.Init != NULL)
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d002      	beq.n	8001af4 <HTS221_Init+0x74>
    {
        Handle->IO.Init();
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	4798      	blx	r3
    }

    Handle->OutputDataRate = Settings.OutputDataRate;
 8001af4:	79ba      	ldrb	r2, [r7, #6]
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

    //Initialize Device
    return HTS221_RegisterInit(Handle, Settings);
 8001afc:	1d3b      	adds	r3, r7, #4
 8001afe:	e893 0006 	ldmia.w	r3, {r1, r2}
 8001b02:	68f8      	ldr	r0, [r7, #12]
 8001b04:	f000 f8d6 	bl	8001cb4 <HTS221_RegisterInit>
 8001b08:	4603      	mov	r3, r0
}
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	3710      	adds	r7, #16
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bdb0      	pop	{r4, r5, r7, pc}
 8001b12:	bf00      	nop
 8001b14:	08001c59 	.word	0x08001c59
 8001b18:	08001c87 	.word	0x08001c87

08001b1c <HTS221_ResetRegisters>:
	temp &= ~HTS221_HEATER_ENABLE;                                           //Modify Reg
	return HTS221_WriteReg(&Handle->Context,HTS221_REG_CTRL_REG2, &temp, 1); //Store Reg
}

int32_t HTS221_ResetRegisters(HTS221_Handle_t *Handle)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b084      	sub	sp, #16
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
	uint8_t temp = HTS221_RebootSignal;
 8001b24:	2380      	movs	r3, #128	; 0x80
 8001b26:	73fb      	strb	r3, [r7, #15]
    return HTS221_WriteReg(&Handle->Context, HTS221_REG_CTRL_REG2, &temp, 1);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	f103 0018 	add.w	r0, r3, #24
 8001b2e:	f107 020f 	add.w	r2, r7, #15
 8001b32:	2301      	movs	r3, #1
 8001b34:	2121      	movs	r1, #33	; 0x21
 8001b36:	f000 fb44 	bl	80021c2 <HTS221_WriteReg>
 8001b3a:	4603      	mov	r3, r0
}
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	3710      	adds	r7, #16
 8001b40:	46bd      	mov	sp, r7
 8001b42:	bd80      	pop	{r7, pc}

08001b44 <HTS221_ReadTemperature>:
	//turn on
	return HTS221_PowerUp(Handle);
}

int32_t HTS221_ReadTemperature(HTS221_Handle_t *Handle, float *temperature)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b086      	sub	sp, #24
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
 8001b4c:	6039      	str	r1, [r7, #0]
    int32_t ret = 0;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	617b      	str	r3, [r7, #20]
    uint8_t reg = 0;
 8001b52:	2300      	movs	r3, #0
 8001b54:	73fb      	strb	r3, [r7, #15]
	//Check if DRDY is used
	if(Handle->DRDY_Config == HTS221_DataReadyEnable)
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001b5c:	2b04      	cmp	r3, #4
 8001b5e:	d116      	bne.n	8001b8e <HTS221_ReadTemperature+0x4a>
	{
		//If its used, read it.
		int32_t PinState = Handle->IO.ReadPin();
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	695b      	ldr	r3, [r3, #20]
 8001b64:	4798      	blx	r3
 8001b66:	6138      	str	r0, [r7, #16]
		//If Its High and Polarity is Active Low OR If its Low and Polarity is Active High, return data not ready
        if((Handle->DRDY_Polarity == HTS221_DataActiveHigh && PinState == 0) || (Handle->DRDY_Polarity == HTS221_DataActiveLow && PinState != 0))
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d102      	bne.n	8001b78 <HTS221_ReadTemperature+0x34>
 8001b72:	693b      	ldr	r3, [r7, #16]
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d007      	beq.n	8001b88 <HTS221_ReadTemperature+0x44>
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001b7e:	2b80      	cmp	r3, #128	; 0x80
 8001b80:	d11c      	bne.n	8001bbc <HTS221_ReadTemperature+0x78>
 8001b82:	693b      	ldr	r3, [r7, #16]
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d019      	beq.n	8001bbc <HTS221_ReadTemperature+0x78>
        {
            return HTS221_DataNotReady;
 8001b88:	f64b 63ef 	movw	r3, #48879	; 0xbeef
 8001b8c:	e01b      	b.n	8001bc6 <HTS221_ReadTemperature+0x82>
        }
	} else
	{
		//Otherwise, read the status reg
        ret = HTS221_ReadReg(&Handle->Context, HTS221_REG_STATUS_REG, &reg, 1);
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	f103 0018 	add.w	r0, r3, #24
 8001b94:	f107 020f 	add.w	r2, r7, #15
 8001b98:	2301      	movs	r3, #1
 8001b9a:	2127      	movs	r1, #39	; 0x27
 8001b9c:	f000 fae8 	bl	8002170 <HTS221_ReadReg>
 8001ba0:	6178      	str	r0, [r7, #20]
        if(ret != HTS221_Ok)
 8001ba2:	697b      	ldr	r3, [r7, #20]
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d001      	beq.n	8001bac <HTS221_ReadTemperature+0x68>
        {
        	return ret;
 8001ba8:	697b      	ldr	r3, [r7, #20]
 8001baa:	e00c      	b.n	8001bc6 <HTS221_ReadTemperature+0x82>
        } else if ((reg & HTS221_TEMPDATA_Msk) == 0)
 8001bac:	7bfb      	ldrb	r3, [r7, #15]
 8001bae:	f003 0301 	and.w	r3, r3, #1
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d102      	bne.n	8001bbc <HTS221_ReadTemperature+0x78>
        {
        	return HTS221_DataNotReady;
 8001bb6:	f64b 63ef 	movw	r3, #48879	; 0xbeef
 8001bba:	e004      	b.n	8001bc6 <HTS221_ReadTemperature+0x82>
        }
	}
    return HTS221_CalculateTemperature(Handle, temperature);
 8001bbc:	6839      	ldr	r1, [r7, #0]
 8001bbe:	6878      	ldr	r0, [r7, #4]
 8001bc0:	f000 f8b6 	bl	8001d30 <HTS221_CalculateTemperature>
 8001bc4:	4603      	mov	r3, r0
}
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	3718      	adds	r7, #24
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bd80      	pop	{r7, pc}

08001bce <HTS221_ReadHumidity>:
int32_t HTS221_ReadHumidity(HTS221_Handle_t *Handle, float *humidity)
{
 8001bce:	b580      	push	{r7, lr}
 8001bd0:	b086      	sub	sp, #24
 8001bd2:	af00      	add	r7, sp, #0
 8001bd4:	6078      	str	r0, [r7, #4]
 8001bd6:	6039      	str	r1, [r7, #0]
    int32_t ret = 0;
 8001bd8:	2300      	movs	r3, #0
 8001bda:	617b      	str	r3, [r7, #20]
    uint8_t reg = 0;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	73fb      	strb	r3, [r7, #15]
	//Check if DRDY is used
	if(Handle->DRDY_Config == HTS221_DataReadyEnable)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001be6:	2b04      	cmp	r3, #4
 8001be8:	d116      	bne.n	8001c18 <HTS221_ReadHumidity+0x4a>
	{
		//If its used, read it.
		int32_t PinState = Handle->IO.ReadPin();
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	695b      	ldr	r3, [r3, #20]
 8001bee:	4798      	blx	r3
 8001bf0:	6138      	str	r0, [r7, #16]
		//If Its High and Polarity is Active Low OR If its Low and Polarity is Active High, return data not ready
        if((Handle->DRDY_Polarity == HTS221_DataActiveHigh && PinState == 0) || (Handle->DRDY_Polarity == HTS221_DataActiveLow && PinState != 0))
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d102      	bne.n	8001c02 <HTS221_ReadHumidity+0x34>
 8001bfc:	693b      	ldr	r3, [r7, #16]
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d007      	beq.n	8001c12 <HTS221_ReadHumidity+0x44>
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001c08:	2b80      	cmp	r3, #128	; 0x80
 8001c0a:	d11c      	bne.n	8001c46 <HTS221_ReadHumidity+0x78>
 8001c0c:	693b      	ldr	r3, [r7, #16]
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d019      	beq.n	8001c46 <HTS221_ReadHumidity+0x78>
        {
            return HTS221_DataNotReady;
 8001c12:	f64b 63ef 	movw	r3, #48879	; 0xbeef
 8001c16:	e01b      	b.n	8001c50 <HTS221_ReadHumidity+0x82>
        }
	} else
	{
		//Otherwise, read the status reg
        ret = HTS221_ReadReg(&Handle->Context, HTS221_REG_STATUS_REG, &reg, 1);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	f103 0018 	add.w	r0, r3, #24
 8001c1e:	f107 020f 	add.w	r2, r7, #15
 8001c22:	2301      	movs	r3, #1
 8001c24:	2127      	movs	r1, #39	; 0x27
 8001c26:	f000 faa3 	bl	8002170 <HTS221_ReadReg>
 8001c2a:	6178      	str	r0, [r7, #20]
        if(ret != HTS221_Ok)
 8001c2c:	697b      	ldr	r3, [r7, #20]
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d001      	beq.n	8001c36 <HTS221_ReadHumidity+0x68>
        {
        	return ret;
 8001c32:	697b      	ldr	r3, [r7, #20]
 8001c34:	e00c      	b.n	8001c50 <HTS221_ReadHumidity+0x82>
        } else if ((reg & HTS221_HUMDATA_Msk) == 0)
 8001c36:	7bfb      	ldrb	r3, [r7, #15]
 8001c38:	f003 0302 	and.w	r3, r3, #2
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d102      	bne.n	8001c46 <HTS221_ReadHumidity+0x78>
        {
        	return HTS221_DataNotReady;
 8001c40:	f64b 63ef 	movw	r3, #48879	; 0xbeef
 8001c44:	e004      	b.n	8001c50 <HTS221_ReadHumidity+0x82>
        }
	}

	return HTS221_CalculateHumidity(Handle, humidity);
 8001c46:	6839      	ldr	r1, [r7, #0]
 8001c48:	6878      	ldr	r0, [r7, #4]
 8001c4a:	f000 f96b 	bl	8001f24 <HTS221_CalculateHumidity>
 8001c4e:	4603      	mov	r3, r0
}
 8001c50:	4618      	mov	r0, r3
 8001c52:	3718      	adds	r7, #24
 8001c54:	46bd      	mov	sp, r7
 8001c56:	bd80      	pop	{r7, pc}

08001c58 <HTS221_ReadRegWrapper>:
	return HTS221_WriteReg(&Handle->Context,HTS221_REG_CTRL_REG1, &temp, 1); //Store Reg
}


static int32_t HTS221_ReadRegWrapper(void *Handle, uint8_t Reg, uint8_t *Buffer, uint8_t Length)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b086      	sub	sp, #24
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	60f8      	str	r0, [r7, #12]
 8001c60:	607a      	str	r2, [r7, #4]
 8001c62:	461a      	mov	r2, r3
 8001c64:	460b      	mov	r3, r1
 8001c66:	72fb      	strb	r3, [r7, #11]
 8001c68:	4613      	mov	r3, r2
 8001c6a:	72bb      	strb	r3, [r7, #10]
	HTS221_Handle_t *HTS221_Handle = Handle;
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	617b      	str	r3, [r7, #20]
	return HTS221_Handle->IO.Read(Reg, Buffer, Length);
 8001c70:	697b      	ldr	r3, [r7, #20]
 8001c72:	68db      	ldr	r3, [r3, #12]
 8001c74:	7aba      	ldrb	r2, [r7, #10]
 8001c76:	7af8      	ldrb	r0, [r7, #11]
 8001c78:	6879      	ldr	r1, [r7, #4]
 8001c7a:	4798      	blx	r3
 8001c7c:	4603      	mov	r3, r0
}
 8001c7e:	4618      	mov	r0, r3
 8001c80:	3718      	adds	r7, #24
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bd80      	pop	{r7, pc}

08001c86 <HTS221_WriteRegWrapper>:

static int32_t HTS221_WriteRegWrapper(void *Handle, uint8_t Reg, uint8_t *Buffer, uint8_t Length)
{
 8001c86:	b580      	push	{r7, lr}
 8001c88:	b086      	sub	sp, #24
 8001c8a:	af00      	add	r7, sp, #0
 8001c8c:	60f8      	str	r0, [r7, #12]
 8001c8e:	607a      	str	r2, [r7, #4]
 8001c90:	461a      	mov	r2, r3
 8001c92:	460b      	mov	r3, r1
 8001c94:	72fb      	strb	r3, [r7, #11]
 8001c96:	4613      	mov	r3, r2
 8001c98:	72bb      	strb	r3, [r7, #10]
	HTS221_Handle_t *HTS221_Handle = Handle;
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	617b      	str	r3, [r7, #20]
	return HTS221_Handle->IO.Write(Reg, Buffer, Length);
 8001c9e:	697b      	ldr	r3, [r7, #20]
 8001ca0:	689b      	ldr	r3, [r3, #8]
 8001ca2:	7aba      	ldrb	r2, [r7, #10]
 8001ca4:	7af8      	ldrb	r0, [r7, #11]
 8001ca6:	6879      	ldr	r1, [r7, #4]
 8001ca8:	4798      	blx	r3
 8001caa:	4603      	mov	r3, r0
}
 8001cac:	4618      	mov	r0, r3
 8001cae:	3718      	adds	r7, #24
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	bd80      	pop	{r7, pc}

08001cb4 <HTS221_RegisterInit>:

static int32_t HTS221_RegisterInit(HTS221_Handle_t *Handle, HTS221_Init_Struct_t Settings)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b086      	sub	sp, #24
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	60f8      	str	r0, [r7, #12]
 8001cbc:	1d3b      	adds	r3, r7, #4
 8001cbe:	e883 0006 	stmia.w	r3, {r1, r2}
    int32_t ret =  0;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	617b      	str	r3, [r7, #20]
    uint8_t temp = 0;
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	74fb      	strb	r3, [r7, #19]

    //reset registers to factory default
    ret = HTS221_ResetRegisters(Handle);
 8001cca:	68f8      	ldr	r0, [r7, #12]
 8001ccc:	f7ff ff26 	bl	8001b1c <HTS221_ResetRegisters>
 8001cd0:	6178      	str	r0, [r7, #20]
    if(ret != HTS221_Ok)
 8001cd2:	697b      	ldr	r3, [r7, #20]
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d001      	beq.n	8001cdc <HTS221_RegisterInit+0x28>
    {
    	return ret;
 8001cd8:	697b      	ldr	r3, [r7, #20]
 8001cda:	e025      	b.n	8001d28 <HTS221_RegisterInit+0x74>
    }

    temp = HTS221_BDU_ENABLE | Settings.OutputDataRate;
 8001cdc:	79bb      	ldrb	r3, [r7, #6]
 8001cde:	f043 0304 	orr.w	r3, r3, #4
 8001ce2:	b2db      	uxtb	r3, r3
 8001ce4:	74fb      	strb	r3, [r7, #19]
    ret = HTS221_WriteReg(&Handle->Context, HTS221_REG_CTRL_REG1, &temp,1);
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	f103 0018 	add.w	r0, r3, #24
 8001cec:	f107 0213 	add.w	r2, r7, #19
 8001cf0:	2301      	movs	r3, #1
 8001cf2:	2120      	movs	r1, #32
 8001cf4:	f000 fa65 	bl	80021c2 <HTS221_WriteReg>
 8001cf8:	6178      	str	r0, [r7, #20]
    if(ret != HTS221_Ok)
 8001cfa:	697b      	ldr	r3, [r7, #20]
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d001      	beq.n	8001d04 <HTS221_RegisterInit+0x50>
    {
    	return ret;
 8001d00:	697b      	ldr	r3, [r7, #20]
 8001d02:	e011      	b.n	8001d28 <HTS221_RegisterInit+0x74>
    }

    temp = Settings.DataReadySignalPolarity | Settings.DataReadyOutputMode | Settings.DataReadyConfig;
 8001d04:	79fa      	ldrb	r2, [r7, #7]
 8001d06:	7a3b      	ldrb	r3, [r7, #8]
 8001d08:	4313      	orrs	r3, r2
 8001d0a:	b2da      	uxtb	r2, r3
 8001d0c:	7a7b      	ldrb	r3, [r7, #9]
 8001d0e:	4313      	orrs	r3, r2
 8001d10:	b2db      	uxtb	r3, r3
 8001d12:	74fb      	strb	r3, [r7, #19]
    return HTS221_WriteReg(&Handle->Context, HTS221_REG_CTRL_REG3, &temp,1);
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	f103 0018 	add.w	r0, r3, #24
 8001d1a:	f107 0213 	add.w	r2, r7, #19
 8001d1e:	2301      	movs	r3, #1
 8001d20:	2122      	movs	r1, #34	; 0x22
 8001d22:	f000 fa4e 	bl	80021c2 <HTS221_WriteReg>
 8001d26:	4603      	mov	r3, r0
}
 8001d28:	4618      	mov	r0, r3
 8001d2a:	3718      	adds	r7, #24
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	bd80      	pop	{r7, pc}

08001d30 <HTS221_CalculateTemperature>:

static int32_t HTS221_CalculateTemperature(HTS221_Handle_t *Handle, float *temperature)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b08a      	sub	sp, #40	; 0x28
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
 8001d38:	6039      	str	r1, [r7, #0]
	int32_t ret = 0;
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t Buffer[2] = {0};
 8001d3e:	2300      	movs	r3, #0
 8001d40:	81bb      	strh	r3, [r7, #12]
	int16_t temp = 0;
 8001d42:	2300      	movs	r3, #0
 8001d44:	847b      	strh	r3, [r7, #34]	; 0x22
    float T0_OUT = 0, T1_OUT = 0;
 8001d46:	f04f 0300 	mov.w	r3, #0
 8001d4a:	61fb      	str	r3, [r7, #28]
 8001d4c:	f04f 0300 	mov.w	r3, #0
 8001d50:	61bb      	str	r3, [r7, #24]
    float T1_DEGC = 0,  T0_DEGC = 0;
 8001d52:	f04f 0300 	mov.w	r3, #0
 8001d56:	617b      	str	r3, [r7, #20]
 8001d58:	f04f 0300 	mov.w	r3, #0
 8001d5c:	613b      	str	r3, [r7, #16]


    //Fetch T0
    ret = HTS221_ReadReg(&Handle->Context, HTS221_REG_T0_OUT, Buffer, 2);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	f103 0018 	add.w	r0, r3, #24
 8001d64:	f107 020c 	add.w	r2, r7, #12
 8001d68:	2302      	movs	r3, #2
 8001d6a:	213c      	movs	r1, #60	; 0x3c
 8001d6c:	f000 fa00 	bl	8002170 <HTS221_ReadReg>
 8001d70:	6278      	str	r0, [r7, #36]	; 0x24
    if(ret != HTS221_Ok)
 8001d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d001      	beq.n	8001d7c <HTS221_CalculateTemperature+0x4c>
    {
    	return ret;
 8001d78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d7a:	e0ce      	b.n	8001f1a <HTS221_CalculateTemperature+0x1ea>
    }
    temp = (Buffer[1] << 8) + Buffer[0];
 8001d7c:	7b7b      	ldrb	r3, [r7, #13]
 8001d7e:	b29b      	uxth	r3, r3
 8001d80:	021b      	lsls	r3, r3, #8
 8001d82:	b29a      	uxth	r2, r3
 8001d84:	7b3b      	ldrb	r3, [r7, #12]
 8001d86:	b29b      	uxth	r3, r3
 8001d88:	4413      	add	r3, r2
 8001d8a:	b29b      	uxth	r3, r3
 8001d8c:	847b      	strh	r3, [r7, #34]	; 0x22
    T0_OUT = temp * 1.0f;
 8001d8e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8001d92:	ee07 3a90 	vmov	s15, r3
 8001d96:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d9a:	edc7 7a07 	vstr	s15, [r7, #28]

    //Fetch T1
    ret = HTS221_ReadReg(&Handle->Context, HTS221_REG_T1_OUT, Buffer, 2);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	f103 0018 	add.w	r0, r3, #24
 8001da4:	f107 020c 	add.w	r2, r7, #12
 8001da8:	2302      	movs	r3, #2
 8001daa:	213e      	movs	r1, #62	; 0x3e
 8001dac:	f000 f9e0 	bl	8002170 <HTS221_ReadReg>
 8001db0:	6278      	str	r0, [r7, #36]	; 0x24
    if(ret != HTS221_Ok)
 8001db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d001      	beq.n	8001dbc <HTS221_CalculateTemperature+0x8c>
    {
    	return ret;
 8001db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dba:	e0ae      	b.n	8001f1a <HTS221_CalculateTemperature+0x1ea>
    }
    temp = (Buffer[1] << 8) + Buffer[0];
 8001dbc:	7b7b      	ldrb	r3, [r7, #13]
 8001dbe:	b29b      	uxth	r3, r3
 8001dc0:	021b      	lsls	r3, r3, #8
 8001dc2:	b29a      	uxth	r2, r3
 8001dc4:	7b3b      	ldrb	r3, [r7, #12]
 8001dc6:	b29b      	uxth	r3, r3
 8001dc8:	4413      	add	r3, r2
 8001dca:	b29b      	uxth	r3, r3
 8001dcc:	847b      	strh	r3, [r7, #34]	; 0x22
    T1_OUT = temp * 1.0f;
 8001dce:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8001dd2:	ee07 3a90 	vmov	s15, r3
 8001dd6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001dda:	edc7 7a06 	vstr	s15, [r7, #24]

    //Fetch T0DegC
    ret = HTS221_ReadReg(&Handle->Context, HTS221_REG_T0_degC_x8, Buffer, 1); //Get LSB, store in Buffer16
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	f103 0018 	add.w	r0, r3, #24
 8001de4:	f107 020c 	add.w	r2, r7, #12
 8001de8:	2301      	movs	r3, #1
 8001dea:	2132      	movs	r1, #50	; 0x32
 8001dec:	f000 f9c0 	bl	8002170 <HTS221_ReadReg>
 8001df0:	6278      	str	r0, [r7, #36]	; 0x24
    if(ret != HTS221_Ok)
 8001df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d001      	beq.n	8001dfc <HTS221_CalculateTemperature+0xcc>
    {
    	return ret;
 8001df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dfa:	e08e      	b.n	8001f1a <HTS221_CalculateTemperature+0x1ea>
    }

    ret = HTS221_ReadReg(&Handle->Context, HTS221_REG_T1_T0_msb, &Buffer[1], 1);  //Get MSB, store in Buffer8
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	f103 0018 	add.w	r0, r3, #24
 8001e02:	f107 030c 	add.w	r3, r7, #12
 8001e06:	1c5a      	adds	r2, r3, #1
 8001e08:	2301      	movs	r3, #1
 8001e0a:	2135      	movs	r1, #53	; 0x35
 8001e0c:	f000 f9b0 	bl	8002170 <HTS221_ReadReg>
 8001e10:	6278      	str	r0, [r7, #36]	; 0x24
    if(ret != HTS221_Ok)
 8001e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d001      	beq.n	8001e1c <HTS221_CalculateTemperature+0xec>
    {
    	return ret;
 8001e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e1a:	e07e      	b.n	8001f1a <HTS221_CalculateTemperature+0x1ea>
    }
    temp = ((Buffer[1] & 0x03) << 8) + Buffer[0];
 8001e1c:	7b7b      	ldrb	r3, [r7, #13]
 8001e1e:	021b      	lsls	r3, r3, #8
 8001e20:	b29b      	uxth	r3, r3
 8001e22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e26:	b29a      	uxth	r2, r3
 8001e28:	7b3b      	ldrb	r3, [r7, #12]
 8001e2a:	b29b      	uxth	r3, r3
 8001e2c:	4413      	add	r3, r2
 8001e2e:	b29b      	uxth	r3, r3
 8001e30:	847b      	strh	r3, [r7, #34]	; 0x22
    T0_DEGC = temp / 8.0f; //Calculate
 8001e32:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8001e36:	ee07 3a90 	vmov	s15, r3
 8001e3a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001e3e:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 8001e42:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001e46:	edc7 7a04 	vstr	s15, [r7, #16]

    //Fetch T1DegC
    ret = HTS221_ReadReg(&Handle->Context, HTS221_REG_T1_degC_x8, Buffer, 1); //Get LSB, store in Buffer16
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	f103 0018 	add.w	r0, r3, #24
 8001e50:	f107 020c 	add.w	r2, r7, #12
 8001e54:	2301      	movs	r3, #1
 8001e56:	2133      	movs	r1, #51	; 0x33
 8001e58:	f000 f98a 	bl	8002170 <HTS221_ReadReg>
 8001e5c:	6278      	str	r0, [r7, #36]	; 0x24
    if(ret != HTS221_Ok)
 8001e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d001      	beq.n	8001e68 <HTS221_CalculateTemperature+0x138>
    {
    	return ret;
 8001e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e66:	e058      	b.n	8001f1a <HTS221_CalculateTemperature+0x1ea>
    }
    temp = ((Buffer[1] & 0x0C) << 6) + Buffer[0];
 8001e68:	7b7b      	ldrb	r3, [r7, #13]
 8001e6a:	019b      	lsls	r3, r3, #6
 8001e6c:	b29b      	uxth	r3, r3
 8001e6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e72:	b29a      	uxth	r2, r3
 8001e74:	7b3b      	ldrb	r3, [r7, #12]
 8001e76:	b29b      	uxth	r3, r3
 8001e78:	4413      	add	r3, r2
 8001e7a:	b29b      	uxth	r3, r3
 8001e7c:	847b      	strh	r3, [r7, #34]	; 0x22
    T1_DEGC = temp / 8.0f; //Calculate
 8001e7e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8001e82:	ee07 3a90 	vmov	s15, r3
 8001e86:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001e8a:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 8001e8e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001e92:	edc7 7a05 	vstr	s15, [r7, #20]

    ret = HTS221_ReadReg(&Handle->Context, HTS221_REG_TEMP_OUT_L, Buffer, 2);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	f103 0018 	add.w	r0, r3, #24
 8001e9c:	f107 020c 	add.w	r2, r7, #12
 8001ea0:	2302      	movs	r3, #2
 8001ea2:	212a      	movs	r1, #42	; 0x2a
 8001ea4:	f000 f964 	bl	8002170 <HTS221_ReadReg>
 8001ea8:	6278      	str	r0, [r7, #36]	; 0x24
    if(ret != HTS221_Ok)
 8001eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d001      	beq.n	8001eb4 <HTS221_CalculateTemperature+0x184>
    {
    	return ret;
 8001eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eb2:	e032      	b.n	8001f1a <HTS221_CalculateTemperature+0x1ea>
    }
    temp = (Buffer[1] << 8) + Buffer[0];
 8001eb4:	7b7b      	ldrb	r3, [r7, #13]
 8001eb6:	b29b      	uxth	r3, r3
 8001eb8:	021b      	lsls	r3, r3, #8
 8001eba:	b29a      	uxth	r2, r3
 8001ebc:	7b3b      	ldrb	r3, [r7, #12]
 8001ebe:	b29b      	uxth	r3, r3
 8001ec0:	4413      	add	r3, r2
 8001ec2:	b29b      	uxth	r3, r3
 8001ec4:	847b      	strh	r3, [r7, #34]	; 0x22
    *temperature = (((T1_DEGC - T0_DEGC) * temp) + ((T1_OUT * T0_DEGC) - (T0_OUT * T1_DEGC))) / (T1_OUT - T0_OUT); //Linear Interpolation
 8001ec6:	ed97 7a05 	vldr	s14, [r7, #20]
 8001eca:	edd7 7a04 	vldr	s15, [r7, #16]
 8001ece:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001ed2:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8001ed6:	ee07 3a90 	vmov	s15, r3
 8001eda:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ede:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001ee2:	edd7 6a06 	vldr	s13, [r7, #24]
 8001ee6:	edd7 7a04 	vldr	s15, [r7, #16]
 8001eea:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001eee:	ed97 6a07 	vldr	s12, [r7, #28]
 8001ef2:	edd7 7a05 	vldr	s15, [r7, #20]
 8001ef6:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001efa:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001efe:	ee77 6a27 	vadd.f32	s13, s14, s15
 8001f02:	ed97 7a06 	vldr	s14, [r7, #24]
 8001f06:	edd7 7a07 	vldr	s15, [r7, #28]
 8001f0a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001f0e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	edc3 7a00 	vstr	s15, [r3]
    return HTS221_Ok;
 8001f18:	2300      	movs	r3, #0
}
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	3728      	adds	r7, #40	; 0x28
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	bd80      	pop	{r7, pc}
	...

08001f24 <HTS221_CalculateHumidity>:

static int32_t HTS221_CalculateHumidity(HTS221_Handle_t *Handle, float *humidity)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b08a      	sub	sp, #40	; 0x28
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
 8001f2c:	6039      	str	r1, [r7, #0]
	int32_t ret = 0;
 8001f2e:	2300      	movs	r3, #0
 8001f30:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t Buffer[2] = {0};
 8001f32:	2300      	movs	r3, #0
 8001f34:	813b      	strh	r3, [r7, #8]
	int16_t temp = 0;
 8001f36:	2300      	movs	r3, #0
 8001f38:	847b      	strh	r3, [r7, #34]	; 0x22
    float H0_OUT = 0, H1_OUT = 0;
 8001f3a:	f04f 0300 	mov.w	r3, #0
 8001f3e:	61fb      	str	r3, [r7, #28]
 8001f40:	f04f 0300 	mov.w	r3, #0
 8001f44:	61bb      	str	r3, [r7, #24]
    float H1_REL = 0,  H0_REL = 0;
 8001f46:	f04f 0300 	mov.w	r3, #0
 8001f4a:	617b      	str	r3, [r7, #20]
 8001f4c:	f04f 0300 	mov.w	r3, #0
 8001f50:	613b      	str	r3, [r7, #16]
    float result = 0;
 8001f52:	f04f 0300 	mov.w	r3, #0
 8001f56:	60fb      	str	r3, [r7, #12]

    //Fetch H0
    ret = HTS221_ReadReg(&Handle->Context, HTS221_REG_H0_T0_OUT, Buffer, 2);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	f103 0018 	add.w	r0, r3, #24
 8001f5e:	f107 0208 	add.w	r2, r7, #8
 8001f62:	2302      	movs	r3, #2
 8001f64:	2136      	movs	r1, #54	; 0x36
 8001f66:	f000 f903 	bl	8002170 <HTS221_ReadReg>
 8001f6a:	6278      	str	r0, [r7, #36]	; 0x24
    if(ret != HTS221_Ok)
 8001f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d001      	beq.n	8001f76 <HTS221_CalculateHumidity+0x52>
    {
    	return ret;
 8001f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f74:	e0c1      	b.n	80020fa <HTS221_CalculateHumidity+0x1d6>
    }
    temp = (Buffer[1] << 8) + Buffer[0];
 8001f76:	7a7b      	ldrb	r3, [r7, #9]
 8001f78:	b29b      	uxth	r3, r3
 8001f7a:	021b      	lsls	r3, r3, #8
 8001f7c:	b29a      	uxth	r2, r3
 8001f7e:	7a3b      	ldrb	r3, [r7, #8]
 8001f80:	b29b      	uxth	r3, r3
 8001f82:	4413      	add	r3, r2
 8001f84:	b29b      	uxth	r3, r3
 8001f86:	847b      	strh	r3, [r7, #34]	; 0x22
    H0_OUT = temp * 1.0f;
 8001f88:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8001f8c:	ee07 3a90 	vmov	s15, r3
 8001f90:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f94:	edc7 7a07 	vstr	s15, [r7, #28]

    //Fetch H1
    ret = HTS221_ReadReg(&Handle->Context, HTS221_REG_H1_T0_OUT, Buffer, 2);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	f103 0018 	add.w	r0, r3, #24
 8001f9e:	f107 0208 	add.w	r2, r7, #8
 8001fa2:	2302      	movs	r3, #2
 8001fa4:	213a      	movs	r1, #58	; 0x3a
 8001fa6:	f000 f8e3 	bl	8002170 <HTS221_ReadReg>
 8001faa:	6278      	str	r0, [r7, #36]	; 0x24
    if(ret != HTS221_Ok)
 8001fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d001      	beq.n	8001fb6 <HTS221_CalculateHumidity+0x92>
    {
    	return ret;
 8001fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fb4:	e0a1      	b.n	80020fa <HTS221_CalculateHumidity+0x1d6>
    }
    temp = (Buffer[1] << 8) + Buffer[0];
 8001fb6:	7a7b      	ldrb	r3, [r7, #9]
 8001fb8:	b29b      	uxth	r3, r3
 8001fba:	021b      	lsls	r3, r3, #8
 8001fbc:	b29a      	uxth	r2, r3
 8001fbe:	7a3b      	ldrb	r3, [r7, #8]
 8001fc0:	b29b      	uxth	r3, r3
 8001fc2:	4413      	add	r3, r2
 8001fc4:	b29b      	uxth	r3, r3
 8001fc6:	847b      	strh	r3, [r7, #34]	; 0x22
    H1_OUT = temp * 1.0f;
 8001fc8:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8001fcc:	ee07 3a90 	vmov	s15, r3
 8001fd0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001fd4:	edc7 7a06 	vstr	s15, [r7, #24]

    //Fetch H0_Rh
    ret = HTS221_ReadReg(&Handle->Context, HTS221_REG_H0_rH_x2, Buffer, 1);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	f103 0018 	add.w	r0, r3, #24
 8001fde:	f107 0208 	add.w	r2, r7, #8
 8001fe2:	2301      	movs	r3, #1
 8001fe4:	2130      	movs	r1, #48	; 0x30
 8001fe6:	f000 f8c3 	bl	8002170 <HTS221_ReadReg>
 8001fea:	6278      	str	r0, [r7, #36]	; 0x24
    if(ret != HTS221_Ok)
 8001fec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d001      	beq.n	8001ff6 <HTS221_CalculateHumidity+0xd2>
    {
    	return ret;
 8001ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ff4:	e081      	b.n	80020fa <HTS221_CalculateHumidity+0x1d6>
    }
    H0_REL = Buffer[0] / 2.0f;
 8001ff6:	7a3b      	ldrb	r3, [r7, #8]
 8001ff8:	ee07 3a90 	vmov	s15, r3
 8001ffc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002000:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8002004:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002008:	edc7 7a04 	vstr	s15, [r7, #16]

    //Fetch H0_Rh
    ret = HTS221_ReadReg(&Handle->Context, HTS221_REG_H1_rH_x2, Buffer, 1);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	f103 0018 	add.w	r0, r3, #24
 8002012:	f107 0208 	add.w	r2, r7, #8
 8002016:	2301      	movs	r3, #1
 8002018:	2131      	movs	r1, #49	; 0x31
 800201a:	f000 f8a9 	bl	8002170 <HTS221_ReadReg>
 800201e:	6278      	str	r0, [r7, #36]	; 0x24
    if(ret != HTS221_Ok)
 8002020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002022:	2b00      	cmp	r3, #0
 8002024:	d001      	beq.n	800202a <HTS221_CalculateHumidity+0x106>
    {
    	return ret;
 8002026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002028:	e067      	b.n	80020fa <HTS221_CalculateHumidity+0x1d6>
    }
    H1_REL = Buffer[0] / 2.0f;
 800202a:	7a3b      	ldrb	r3, [r7, #8]
 800202c:	ee07 3a90 	vmov	s15, r3
 8002030:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002034:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8002038:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800203c:	edc7 7a05 	vstr	s15, [r7, #20]

    //Fetch Measurement
    ret = HTS221_ReadReg(&Handle->Context, HTS221_REG_HUMIDITY_OUT_L, Buffer, 2);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	f103 0018 	add.w	r0, r3, #24
 8002046:	f107 0208 	add.w	r2, r7, #8
 800204a:	2302      	movs	r3, #2
 800204c:	2128      	movs	r1, #40	; 0x28
 800204e:	f000 f88f 	bl	8002170 <HTS221_ReadReg>
 8002052:	6278      	str	r0, [r7, #36]	; 0x24
    if(ret != HTS221_Ok)
 8002054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002056:	2b00      	cmp	r3, #0
 8002058:	d001      	beq.n	800205e <HTS221_CalculateHumidity+0x13a>
    {
    	return ret;
 800205a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800205c:	e04d      	b.n	80020fa <HTS221_CalculateHumidity+0x1d6>
    }
    temp = (Buffer[1] << 8) + Buffer[0];
 800205e:	7a7b      	ldrb	r3, [r7, #9]
 8002060:	b29b      	uxth	r3, r3
 8002062:	021b      	lsls	r3, r3, #8
 8002064:	b29a      	uxth	r2, r3
 8002066:	7a3b      	ldrb	r3, [r7, #8]
 8002068:	b29b      	uxth	r3, r3
 800206a:	4413      	add	r3, r2
 800206c:	b29b      	uxth	r3, r3
 800206e:	847b      	strh	r3, [r7, #34]	; 0x22
    result = (((H1_REL - H0_REL) * temp) + ((H1_OUT * H0_REL) - (H0_OUT * H1_REL))) / (H1_OUT - H0_OUT); //Linear Interpolation
 8002070:	ed97 7a05 	vldr	s14, [r7, #20]
 8002074:	edd7 7a04 	vldr	s15, [r7, #16]
 8002078:	ee37 7a67 	vsub.f32	s14, s14, s15
 800207c:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8002080:	ee07 3a90 	vmov	s15, r3
 8002084:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002088:	ee27 7a27 	vmul.f32	s14, s14, s15
 800208c:	edd7 6a06 	vldr	s13, [r7, #24]
 8002090:	edd7 7a04 	vldr	s15, [r7, #16]
 8002094:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002098:	ed97 6a07 	vldr	s12, [r7, #28]
 800209c:	edd7 7a05 	vldr	s15, [r7, #20]
 80020a0:	ee66 7a27 	vmul.f32	s15, s12, s15
 80020a4:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80020a8:	ee77 6a27 	vadd.f32	s13, s14, s15
 80020ac:	ed97 7a06 	vldr	s14, [r7, #24]
 80020b0:	edd7 7a07 	vldr	s15, [r7, #28]
 80020b4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80020b8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80020bc:	edc7 7a03 	vstr	s15, [r7, #12]
    if(result > 100.0)
 80020c0:	edd7 7a03 	vldr	s15, [r7, #12]
 80020c4:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8002104 <HTS221_CalculateHumidity+0x1e0>
 80020c8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80020cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020d0:	dd03      	ble.n	80020da <HTS221_CalculateHumidity+0x1b6>
    {
    	*humidity = 100.0;
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	4a0c      	ldr	r2, [pc, #48]	; (8002108 <HTS221_CalculateHumidity+0x1e4>)
 80020d6:	601a      	str	r2, [r3, #0]
 80020d8:	e00e      	b.n	80020f8 <HTS221_CalculateHumidity+0x1d4>
    } else if (result < 0.0)
 80020da:	edd7 7a03 	vldr	s15, [r7, #12]
 80020de:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80020e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020e6:	d504      	bpl.n	80020f2 <HTS221_CalculateHumidity+0x1ce>
    {
    	*humidity = 0.0;
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	f04f 0200 	mov.w	r2, #0
 80020ee:	601a      	str	r2, [r3, #0]
 80020f0:	e002      	b.n	80020f8 <HTS221_CalculateHumidity+0x1d4>
    } else
    {
    	*humidity = result;
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	68fa      	ldr	r2, [r7, #12]
 80020f6:	601a      	str	r2, [r3, #0]
    }

    return HTS221_Ok;
 80020f8:	2300      	movs	r3, #0
}
 80020fa:	4618      	mov	r0, r3
 80020fc:	3728      	adds	r7, #40	; 0x28
 80020fe:	46bd      	mov	sp, r7
 8002100:	bd80      	pop	{r7, pc}
 8002102:	bf00      	nop
 8002104:	42c80000 	.word	0x42c80000
 8002108:	42c80000 	.word	0x42c80000

0800210c <HTS221_GetSamplePeriod>:

int32_t HTS221_GetSamplePeriod(HTS221_Handle_t *Handle, uint32_t *Period)
{
 800210c:	b480      	push	{r7}
 800210e:	b083      	sub	sp, #12
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
 8002114:	6039      	str	r1, [r7, #0]
	switch(Handle->OutputDataRate)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800211c:	2b03      	cmp	r3, #3
 800211e:	d81d      	bhi.n	800215c <HTS221_GetSamplePeriod+0x50>
 8002120:	a201      	add	r2, pc, #4	; (adr r2, 8002128 <HTS221_GetSamplePeriod+0x1c>)
 8002122:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002126:	bf00      	nop
 8002128:	08002139 	.word	0x08002139
 800212c:	08002143 	.word	0x08002143
 8002130:	0800214d 	.word	0x0800214d
 8002134:	08002155 	.word	0x08002155
	{
	case(HTS221_OneShotMode):
			*Period = 0;
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	2200      	movs	r2, #0
 800213c:	601a      	str	r2, [r3, #0]
	        return HTS221_PeriodOneShot;
 800213e:	2301      	movs	r3, #1
 8002140:	e010      	b.n	8002164 <HTS221_GetSamplePeriod+0x58>
			break;
	case(HTS221_1_0Hz):
			*Period = 1000;
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002148:	601a      	str	r2, [r3, #0]
			break;
 800214a:	e00a      	b.n	8002162 <HTS221_GetSamplePeriod+0x56>
	case(HTS221_7_0p0Hz):
			*Period = 143;
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	228f      	movs	r2, #143	; 0x8f
 8002150:	601a      	str	r2, [r3, #0]
	        break;
 8002152:	e006      	b.n	8002162 <HTS221_GetSamplePeriod+0x56>
	case(HTS221_12_5Hz):
			*Period = 80;
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	2250      	movs	r2, #80	; 0x50
 8002158:	601a      	str	r2, [r3, #0]
	        break;
 800215a:	e002      	b.n	8002162 <HTS221_GetSamplePeriod+0x56>
	default:
		   return HTS221_ODR_Error;
 800215c:	f06f 0301 	mvn.w	r3, #1
 8002160:	e000      	b.n	8002164 <HTS221_GetSamplePeriod+0x58>
	}
	return HTS221_Ok;
 8002162:	2300      	movs	r3, #0
}
 8002164:	4618      	mov	r0, r3
 8002166:	370c      	adds	r7, #12
 8002168:	46bd      	mov	sp, r7
 800216a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216e:	4770      	bx	lr

08002170 <HTS221_ReadReg>:
#include "stddef.h"

static int32_t HTS221_ValidateParams(uint8_t Reg, uint8_t *Buffer, uint8_t Length);

int32_t HTS221_ReadReg(HTS221_Context_t *Context, uint8_t Reg, uint8_t *Buffer, uint8_t Length)
{
 8002170:	b590      	push	{r4, r7, lr}
 8002172:	b087      	sub	sp, #28
 8002174:	af00      	add	r7, sp, #0
 8002176:	60f8      	str	r0, [r7, #12]
 8002178:	607a      	str	r2, [r7, #4]
 800217a:	461a      	mov	r2, r3
 800217c:	460b      	mov	r3, r1
 800217e:	72fb      	strb	r3, [r7, #11]
 8002180:	4613      	mov	r3, r2
 8002182:	72bb      	strb	r3, [r7, #10]
	int32_t ret = HTS221_ValidateParams(Reg,Buffer,Length);
 8002184:	7aba      	ldrb	r2, [r7, #10]
 8002186:	7afb      	ldrb	r3, [r7, #11]
 8002188:	6879      	ldr	r1, [r7, #4]
 800218a:	4618      	mov	r0, r3
 800218c:	f000 f842 	bl	8002214 <HTS221_ValidateParams>
 8002190:	6178      	str	r0, [r7, #20]
	if(ret != HTS221_REG_NO_ERR)
 8002192:	697b      	ldr	r3, [r7, #20]
 8002194:	2b00      	cmp	r3, #0
 8002196:	d001      	beq.n	800219c <HTS221_ReadReg+0x2c>
	{
        return ret;
 8002198:	697b      	ldr	r3, [r7, #20]
 800219a:	e00e      	b.n	80021ba <HTS221_ReadReg+0x4a>
	}

    if(Context->Read != NULL)
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	685b      	ldr	r3, [r3, #4]
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d009      	beq.n	80021b8 <HTS221_ReadReg+0x48>
    {
        return Context->Read(Context->Handle, Reg, Buffer, Length);
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	685c      	ldr	r4, [r3, #4]
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	6818      	ldr	r0, [r3, #0]
 80021ac:	7abb      	ldrb	r3, [r7, #10]
 80021ae:	7af9      	ldrb	r1, [r7, #11]
 80021b0:	687a      	ldr	r2, [r7, #4]
 80021b2:	47a0      	blx	r4
 80021b4:	4603      	mov	r3, r0
 80021b6:	e000      	b.n	80021ba <HTS221_ReadReg+0x4a>
    }

    return HTS221_REG_CONTEXT_ERR;
 80021b8:	2308      	movs	r3, #8
}
 80021ba:	4618      	mov	r0, r3
 80021bc:	371c      	adds	r7, #28
 80021be:	46bd      	mov	sp, r7
 80021c0:	bd90      	pop	{r4, r7, pc}

080021c2 <HTS221_WriteReg>:

int32_t HTS221_WriteReg(HTS221_Context_t *Context,uint8_t Reg, uint8_t *Buffer, uint8_t Length)
{
 80021c2:	b590      	push	{r4, r7, lr}
 80021c4:	b087      	sub	sp, #28
 80021c6:	af00      	add	r7, sp, #0
 80021c8:	60f8      	str	r0, [r7, #12]
 80021ca:	607a      	str	r2, [r7, #4]
 80021cc:	461a      	mov	r2, r3
 80021ce:	460b      	mov	r3, r1
 80021d0:	72fb      	strb	r3, [r7, #11]
 80021d2:	4613      	mov	r3, r2
 80021d4:	72bb      	strb	r3, [r7, #10]
	int32_t ret = HTS221_ValidateParams(Reg,Buffer,Length);
 80021d6:	7aba      	ldrb	r2, [r7, #10]
 80021d8:	7afb      	ldrb	r3, [r7, #11]
 80021da:	6879      	ldr	r1, [r7, #4]
 80021dc:	4618      	mov	r0, r3
 80021de:	f000 f819 	bl	8002214 <HTS221_ValidateParams>
 80021e2:	6178      	str	r0, [r7, #20]
	if(ret != HTS221_REG_NO_ERR)
 80021e4:	697b      	ldr	r3, [r7, #20]
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d001      	beq.n	80021ee <HTS221_WriteReg+0x2c>
	{
        return ret;
 80021ea:	697b      	ldr	r3, [r7, #20]
 80021ec:	e00e      	b.n	800220c <HTS221_WriteReg+0x4a>
	}

	if(Context->Write != NULL)
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	689b      	ldr	r3, [r3, #8]
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d009      	beq.n	800220a <HTS221_WriteReg+0x48>
	{
	    return Context->Write(Context->Handle, Reg, Buffer, Length);
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	689c      	ldr	r4, [r3, #8]
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	6818      	ldr	r0, [r3, #0]
 80021fe:	7abb      	ldrb	r3, [r7, #10]
 8002200:	7af9      	ldrb	r1, [r7, #11]
 8002202:	687a      	ldr	r2, [r7, #4]
 8002204:	47a0      	blx	r4
 8002206:	4603      	mov	r3, r0
 8002208:	e000      	b.n	800220c <HTS221_WriteReg+0x4a>
	}

	return HTS221_REG_CONTEXT_ERR;
 800220a:	2308      	movs	r3, #8
}
 800220c:	4618      	mov	r0, r3
 800220e:	371c      	adds	r7, #28
 8002210:	46bd      	mov	sp, r7
 8002212:	bd90      	pop	{r4, r7, pc}

08002214 <HTS221_ValidateParams>:

static int32_t HTS221_ValidateParams(uint8_t Reg, uint8_t *Buffer, uint8_t Length)
{
 8002214:	b480      	push	{r7}
 8002216:	b085      	sub	sp, #20
 8002218:	af00      	add	r7, sp, #0
 800221a:	4603      	mov	r3, r0
 800221c:	6039      	str	r1, [r7, #0]
 800221e:	71fb      	strb	r3, [r7, #7]
 8002220:	4613      	mov	r3, r2
 8002222:	71bb      	strb	r3, [r7, #6]
	uint32_t ret = 0;
 8002224:	2300      	movs	r3, #0
 8002226:	60fb      	str	r3, [r7, #12]

	if(Reg < HTS221_REG_WHO_AM_I || Reg > 0x3F)
 8002228:	79fb      	ldrb	r3, [r7, #7]
 800222a:	2b0e      	cmp	r3, #14
 800222c:	d902      	bls.n	8002234 <HTS221_ValidateParams+0x20>
 800222e:	79fb      	ldrb	r3, [r7, #7]
 8002230:	2b3f      	cmp	r3, #63	; 0x3f
 8002232:	d903      	bls.n	800223c <HTS221_ValidateParams+0x28>
	{
		 ret |= HTS221_REG_PARAM_ERR;
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	f043 0301 	orr.w	r3, r3, #1
 800223a:	60fb      	str	r3, [r7, #12]
	}

	if(Buffer == NULL)
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	2b00      	cmp	r3, #0
 8002240:	d103      	bne.n	800224a <HTS221_ValidateParams+0x36>
	{
		ret |= HTS221_BUFFER_PARAM_ERR;
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	f043 0302 	orr.w	r3, r3, #2
 8002248:	60fb      	str	r3, [r7, #12]
	}

	if(Length == 0 || Length > (0x3F - HTS221_REG_WHO_AM_I))
 800224a:	79bb      	ldrb	r3, [r7, #6]
 800224c:	2b00      	cmp	r3, #0
 800224e:	d002      	beq.n	8002256 <HTS221_ValidateParams+0x42>
 8002250:	79bb      	ldrb	r3, [r7, #6]
 8002252:	2b30      	cmp	r3, #48	; 0x30
 8002254:	d903      	bls.n	800225e <HTS221_ValidateParams+0x4a>
	{  //0x3F - 0x0F = 0x30 readable registers
        ret |= HTS221_LENGTH_PARAM_ERR;
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	f043 0304 	orr.w	r3, r3, #4
 800225c:	60fb      	str	r3, [r7, #12]
	}

	return ret;
 800225e:	68fb      	ldr	r3, [r7, #12]
}
 8002260:	4618      	mov	r0, r3
 8002262:	3714      	adds	r7, #20
 8002264:	46bd      	mov	sp, r7
 8002266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226a:	4770      	bx	lr

0800226c <IIS2MDC_Init>:
static void ConvertMagData(uint8_t *buffer, float *magnetism);
static void DeConvertMagData(float magnetism, uint8_t *buffer);


int32_t IIS2MDC_Init(IIS2MDC_Handle_t *Handle, IIS2MDC_InitStruct_t Settings, IIS2MDC_IO_t *IO)
{
 800226c:	b084      	sub	sp, #16
 800226e:	b5b0      	push	{r4, r5, r7, lr}
 8002270:	b086      	sub	sp, #24
 8002272:	af02      	add	r7, sp, #8
 8002274:	6078      	str	r0, [r7, #4]
 8002276:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800227a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    if(Handle->Status != IIS2MDC_Initialized)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002284:	2b01      	cmp	r3, #1
 8002286:	f000 80a5 	beq.w	80023d4 <IIS2MDC_Init+0x168>
    {
        if(Handle == NULL)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	2b00      	cmp	r3, #0
 800228e:	d102      	bne.n	8002296 <IIS2MDC_Init+0x2a>
        {
            return IIS2MDC_HandleError;
 8002290:	f04f 33ff 	mov.w	r3, #4294967295
 8002294:	e09f      	b.n	80023d6 <IIS2MDC_Init+0x16a>
        }

        if(IO->Read == NULL || IO->Write == NULL || IO->GetTick == NULL)
 8002296:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002298:	68db      	ldr	r3, [r3, #12]
 800229a:	2b00      	cmp	r3, #0
 800229c:	d007      	beq.n	80022ae <IIS2MDC_Init+0x42>
 800229e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022a0:	689b      	ldr	r3, [r3, #8]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d003      	beq.n	80022ae <IIS2MDC_Init+0x42>
 80022a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022a8:	695b      	ldr	r3, [r3, #20]
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d102      	bne.n	80022b4 <IIS2MDC_Init+0x48>
        {
        	return IIS2MDC_IOError;
 80022ae:	f06f 0301 	mvn.w	r3, #1
 80022b2:	e090      	b.n	80023d6 <IIS2MDC_Init+0x16a>
        }

        if(Settings.IntThreshold > 49150.5  || Settings.OffsetX > 49150.5 || Settings.OffsetY > 49150.5  || Settings.OffsetZ > 49150.5)
 80022b4:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80022b8:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 80023e4 <IIS2MDC_Init+0x178>
 80022bc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80022c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022c4:	dc1a      	bgt.n	80022fc <IIS2MDC_Init+0x90>
 80022c6:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80022ca:	ed9f 7a46 	vldr	s14, [pc, #280]	; 80023e4 <IIS2MDC_Init+0x178>
 80022ce:	eef4 7ac7 	vcmpe.f32	s15, s14
 80022d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022d6:	dc11      	bgt.n	80022fc <IIS2MDC_Init+0x90>
 80022d8:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80022dc:	ed9f 7a41 	vldr	s14, [pc, #260]	; 80023e4 <IIS2MDC_Init+0x178>
 80022e0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80022e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022e8:	dc08      	bgt.n	80022fc <IIS2MDC_Init+0x90>
 80022ea:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80022ee:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 80023e4 <IIS2MDC_Init+0x178>
 80022f2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80022f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022fa:	dd02      	ble.n	8002302 <IIS2MDC_Init+0x96>
        {
        	return IIS2MDC_FloatError;
 80022fc:	f06f 0303 	mvn.w	r3, #3
 8002300:	e069      	b.n	80023d6 <IIS2MDC_Init+0x16a>
        }

        if(Settings.IntThreshold < -49150.5 || Settings.OffsetX < -49150.5 || Settings.OffsetY < -49150.5  || Settings.OffsetZ < -49150.5)
 8002302:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8002306:	ed9f 7a38 	vldr	s14, [pc, #224]	; 80023e8 <IIS2MDC_Init+0x17c>
 800230a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800230e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002312:	d41a      	bmi.n	800234a <IIS2MDC_Init+0xde>
 8002314:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002318:	ed9f 7a33 	vldr	s14, [pc, #204]	; 80023e8 <IIS2MDC_Init+0x17c>
 800231c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002320:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002324:	d411      	bmi.n	800234a <IIS2MDC_Init+0xde>
 8002326:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800232a:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 80023e8 <IIS2MDC_Init+0x17c>
 800232e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002332:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002336:	d408      	bmi.n	800234a <IIS2MDC_Init+0xde>
 8002338:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800233c:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 80023e8 <IIS2MDC_Init+0x17c>
 8002340:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002344:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002348:	d502      	bpl.n	8002350 <IIS2MDC_Init+0xe4>
        {
        	return IIS2MDC_FloatError;
 800234a:	f06f 0303 	mvn.w	r3, #3
 800234e:	e042      	b.n	80023d6 <IIS2MDC_Init+0x16a>
        }

        Handle->IO = *IO;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002354:	f103 040c 	add.w	r4, r3, #12
 8002358:	4615      	mov	r5, r2
 800235a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800235c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800235e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002362:	e884 0003 	stmia.w	r4, {r0, r1}
        Handle->Context.Handle = Handle;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	687a      	ldr	r2, [r7, #4]
 800236a:	601a      	str	r2, [r3, #0]
        Handle->Context.Read = IIS2MDC_ReadRegWrapper;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	4a1f      	ldr	r2, [pc, #124]	; (80023ec <IIS2MDC_Init+0x180>)
 8002370:	605a      	str	r2, [r3, #4]
        Handle->Context.Write = IIS2MDC_WriteRegWrapper;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	4a1e      	ldr	r2, [pc, #120]	; (80023f0 <IIS2MDC_Init+0x184>)
 8002376:	609a      	str	r2, [r3, #8]
        if((Settings.ConfigRegA & IIS2MDC_ODR_Msk) == IIS2MDC_ODR_OneShot)
 8002378:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800237c:	f003 030f 	and.w	r3, r3, #15
 8002380:	2b01      	cmp	r3, #1
 8002382:	d104      	bne.n	800238e <IIS2MDC_Init+0x122>
        {
        	Handle->DataMode = IIS2MDC_OneShotMode;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2200      	movs	r2, #0
 8002388:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
 800238c:	e003      	b.n	8002396 <IIS2MDC_Init+0x12a>
        } else
        {
        	Handle->DataMode = IIS2MDC_Continuous;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	2201      	movs	r2, #1
 8002392:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
        }

        Handle->OutputDataRate = Settings.ConfigRegA & IIS2MDC_ODR_Msk;
 8002396:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800239a:	f003 030f 	and.w	r3, r3, #15
 800239e:	b2da      	uxtb	r2, r3
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
        int32_t ret = IIS2MDC_RegisterInit(Handle, Settings);
 80023a6:	466a      	mov	r2, sp
 80023a8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80023ac:	e893 0003 	ldmia.w	r3, {r0, r1}
 80023b0:	e882 0003 	stmia.w	r2, {r0, r1}
 80023b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80023b8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80023ba:	6878      	ldr	r0, [r7, #4]
 80023bc:	f000 f8d8 	bl	8002570 <IIS2MDC_RegisterInit>
 80023c0:	60f8      	str	r0, [r7, #12]
        if(ret != IIS2MDC_Ok)
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d001      	beq.n	80023cc <IIS2MDC_Init+0x160>
        {
        	return ret;
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	e004      	b.n	80023d6 <IIS2MDC_Init+0x16a>
        }
        Handle->Status = IIS2MDC_Initialized;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	2201      	movs	r2, #1
 80023d0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    }
    return IIS2MDC_Ok;
 80023d4:	2300      	movs	r3, #0
}
 80023d6:	4618      	mov	r0, r3
 80023d8:	3710      	adds	r7, #16
 80023da:	46bd      	mov	sp, r7
 80023dc:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 80023e0:	b004      	add	sp, #16
 80023e2:	4770      	bx	lr
 80023e4:	473ffe80 	.word	0x473ffe80
 80023e8:	c73ffe80 	.word	0xc73ffe80
 80023ec:	08002535 	.word	0x08002535
 80023f0:	080024f9 	.word	0x080024f9

080023f4 <IIS2MDC_ResetDevice>:

    return IIS2MDC_Ok;
}

int32_t IIS2MDC_ResetDevice(IIS2MDC_Handle_t *Handle)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b084      	sub	sp, #16
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
	int32_t ret = IIS2MDC_Ok;
 80023fc:	2300      	movs	r3, #0
 80023fe:	60fb      	str	r3, [r7, #12]
	if(Handle == NULL)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2b00      	cmp	r3, #0
 8002404:	d102      	bne.n	800240c <IIS2MDC_ResetDevice+0x18>
	{
		return IIS2MDC_HandleError;
 8002406:	f04f 33ff 	mov.w	r3, #4294967295
 800240a:	e021      	b.n	8002450 <IIS2MDC_ResetDevice+0x5c>
	}

    if(Handle->IO.Write == NULL || Handle->IO.Read == NULL || Handle->IO.GetTick == NULL)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	695b      	ldr	r3, [r3, #20]
 8002410:	2b00      	cmp	r3, #0
 8002412:	d007      	beq.n	8002424 <IIS2MDC_ResetDevice+0x30>
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	699b      	ldr	r3, [r3, #24]
 8002418:	2b00      	cmp	r3, #0
 800241a:	d003      	beq.n	8002424 <IIS2MDC_ResetDevice+0x30>
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6a1b      	ldr	r3, [r3, #32]
 8002420:	2b00      	cmp	r3, #0
 8002422:	d102      	bne.n	800242a <IIS2MDC_ResetDevice+0x36>
    {
    	return IIS2MDC_IOError;
 8002424:	f06f 0301 	mvn.w	r3, #1
 8002428:	e012      	b.n	8002450 <IIS2MDC_ResetDevice+0x5c>
    }

	ret = IIS2MDC_Reboot(Handle);
 800242a:	6878      	ldr	r0, [r7, #4]
 800242c:	f000 f98b 	bl	8002746 <IIS2MDC_Reboot>
 8002430:	60f8      	str	r0, [r7, #12]
	if(ret != IIS2MDC_Ok)
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	2b00      	cmp	r3, #0
 8002436:	d001      	beq.n	800243c <IIS2MDC_ResetDevice+0x48>
	{
		return ret;
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	e009      	b.n	8002450 <IIS2MDC_ResetDevice+0x5c>
	}


	ret = IIS2MDC_SWReset(Handle);
 800243c:	6878      	ldr	r0, [r7, #4]
 800243e:	f000 f94b 	bl	80026d8 <IIS2MDC_SWReset>
 8002442:	60f8      	str	r0, [r7, #12]
	if(ret != IIS2MDC_Ok)
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	2b00      	cmp	r3, #0
 8002448:	d001      	beq.n	800244e <IIS2MDC_ResetDevice+0x5a>
	{
		return ret;
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	e000      	b.n	8002450 <IIS2MDC_ResetDevice+0x5c>
	}

	return IIS2MDC_Ok;
 800244e:	2300      	movs	r3, #0
}
 8002450:	4618      	mov	r0, r3
 8002452:	3710      	adds	r7, #16
 8002454:	46bd      	mov	sp, r7
 8002456:	bd80      	pop	{r7, pc}

08002458 <IIS2MDC_ReadMagnetismXYZ>:
	}
	return IIS2MDC_Ok;
}

int32_t IIS2MDC_ReadMagnetismXYZ(IIS2MDC_Handle_t *Handle, float *Mx, float *My, float *Mz)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b088      	sub	sp, #32
 800245c:	af00      	add	r7, sp, #0
 800245e:	60f8      	str	r0, [r7, #12]
 8002460:	60b9      	str	r1, [r7, #8]
 8002462:	607a      	str	r2, [r7, #4]
 8002464:	603b      	str	r3, [r7, #0]
	if(Handle->Status != IIS2MDC_Initialized)
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800246c:	2b01      	cmp	r3, #1
 800246e:	d002      	beq.n	8002476 <IIS2MDC_ReadMagnetismXYZ+0x1e>
	{
		return IIS2MDC_InitError;
 8002470:	f06f 0302 	mvn.w	r3, #2
 8002474:	e03c      	b.n	80024f0 <IIS2MDC_ReadMagnetismXYZ+0x98>
	}

	uint8_t Buffer[6] = {0};
 8002476:	2300      	movs	r3, #0
 8002478:	617b      	str	r3, [r7, #20]
 800247a:	2300      	movs	r3, #0
 800247c:	833b      	strh	r3, [r7, #24]
	uint32_t ret = IIS2MDC_ReadReg(&Handle->Context, IIS2MDC_REG_STATUS_REG, Buffer, 1);
 800247e:	68f8      	ldr	r0, [r7, #12]
 8002480:	f107 0214 	add.w	r2, r7, #20
 8002484:	2301      	movs	r3, #1
 8002486:	2167      	movs	r1, #103	; 0x67
 8002488:	f000 fa58 	bl	800293c <IIS2MDC_ReadReg>
 800248c:	4603      	mov	r3, r0
 800248e:	61fb      	str	r3, [r7, #28]
	if(ret != IIS2MDC_Ok)
 8002490:	69fb      	ldr	r3, [r7, #28]
 8002492:	2b00      	cmp	r3, #0
 8002494:	d001      	beq.n	800249a <IIS2MDC_ReadMagnetismXYZ+0x42>
	{
		return ret;
 8002496:	69fb      	ldr	r3, [r7, #28]
 8002498:	e02a      	b.n	80024f0 <IIS2MDC_ReadMagnetismXYZ+0x98>
	}
	if(Buffer[0] & (IIS2MDC_XDATA_Msk | IIS2MDC_YDATA_Msk | IIS2MDC_ZDATA_Msk))
 800249a:	7d3b      	ldrb	r3, [r7, #20]
 800249c:	f003 0307 	and.w	r3, r3, #7
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d023      	beq.n	80024ec <IIS2MDC_ReadMagnetismXYZ+0x94>
	{
		ret = IIS2MDC_ReadReg(&Handle->Context, IIS2MDC_REG_OUTX_L_REG, Buffer, 6);
 80024a4:	68f8      	ldr	r0, [r7, #12]
 80024a6:	f107 0214 	add.w	r2, r7, #20
 80024aa:	2306      	movs	r3, #6
 80024ac:	2168      	movs	r1, #104	; 0x68
 80024ae:	f000 fa45 	bl	800293c <IIS2MDC_ReadReg>
 80024b2:	4603      	mov	r3, r0
 80024b4:	61fb      	str	r3, [r7, #28]
		if(ret != IIS2MDC_Ok)
 80024b6:	69fb      	ldr	r3, [r7, #28]
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d001      	beq.n	80024c0 <IIS2MDC_ReadMagnetismXYZ+0x68>
		{
			return ret;
 80024bc:	69fb      	ldr	r3, [r7, #28]
 80024be:	e017      	b.n	80024f0 <IIS2MDC_ReadMagnetismXYZ+0x98>
		}
		ConvertMagData(Buffer, Mx);
 80024c0:	f107 0314 	add.w	r3, r7, #20
 80024c4:	68b9      	ldr	r1, [r7, #8]
 80024c6:	4618      	mov	r0, r3
 80024c8:	f000 f965 	bl	8002796 <ConvertMagData>
		ConvertMagData(&Buffer[2], My);
 80024cc:	f107 0314 	add.w	r3, r7, #20
 80024d0:	3302      	adds	r3, #2
 80024d2:	6879      	ldr	r1, [r7, #4]
 80024d4:	4618      	mov	r0, r3
 80024d6:	f000 f95e 	bl	8002796 <ConvertMagData>
		ConvertMagData(&Buffer[4], Mz);
 80024da:	f107 0314 	add.w	r3, r7, #20
 80024de:	3304      	adds	r3, #4
 80024e0:	6839      	ldr	r1, [r7, #0]
 80024e2:	4618      	mov	r0, r3
 80024e4:	f000 f957 	bl	8002796 <ConvertMagData>
		return IIS2MDC_DataReady;
 80024e8:	2300      	movs	r3, #0
 80024ea:	e001      	b.n	80024f0 <IIS2MDC_ReadMagnetismXYZ+0x98>
	}
	return IIS2MDC_DataNotReady;
 80024ec:	f64b 63ef 	movw	r3, #48879	; 0xbeef
}
 80024f0:	4618      	mov	r0, r3
 80024f2:	3720      	adds	r7, #32
 80024f4:	46bd      	mov	sp, r7
 80024f6:	bd80      	pop	{r7, pc}

080024f8 <IIS2MDC_WriteRegWrapper>:
	return IIS2MDC_DataNotReady;
}


static int32_t IIS2MDC_WriteRegWrapper(void *Handle,uint8_t Reg, uint8_t *Buffer, uint8_t Length)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b086      	sub	sp, #24
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	60f8      	str	r0, [r7, #12]
 8002500:	607a      	str	r2, [r7, #4]
 8002502:	461a      	mov	r2, r3
 8002504:	460b      	mov	r3, r1
 8002506:	72fb      	strb	r3, [r7, #11]
 8002508:	4613      	mov	r3, r2
 800250a:	72bb      	strb	r3, [r7, #10]
	IIS2MDC_Handle_t *Dev= Handle;
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	617b      	str	r3, [r7, #20]
	if(Dev->IO.Write != NULL)
 8002510:	697b      	ldr	r3, [r7, #20]
 8002512:	695b      	ldr	r3, [r3, #20]
 8002514:	2b00      	cmp	r3, #0
 8002516:	d007      	beq.n	8002528 <IIS2MDC_WriteRegWrapper+0x30>
	{
		return Dev->IO.Write(Reg,Buffer,Length);
 8002518:	697b      	ldr	r3, [r7, #20]
 800251a:	695b      	ldr	r3, [r3, #20]
 800251c:	7aba      	ldrb	r2, [r7, #10]
 800251e:	7af8      	ldrb	r0, [r7, #11]
 8002520:	6879      	ldr	r1, [r7, #4]
 8002522:	4798      	blx	r3
 8002524:	4603      	mov	r3, r0
 8002526:	e001      	b.n	800252c <IIS2MDC_WriteRegWrapper+0x34>
	}
    return IIS2MDC_IOError;
 8002528:	f06f 0301 	mvn.w	r3, #1
}
 800252c:	4618      	mov	r0, r3
 800252e:	3718      	adds	r7, #24
 8002530:	46bd      	mov	sp, r7
 8002532:	bd80      	pop	{r7, pc}

08002534 <IIS2MDC_ReadRegWrapper>:

static int32_t IIS2MDC_ReadRegWrapper(void *Handle,uint8_t Reg, uint8_t *Buffer, uint8_t Length)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b086      	sub	sp, #24
 8002538:	af00      	add	r7, sp, #0
 800253a:	60f8      	str	r0, [r7, #12]
 800253c:	607a      	str	r2, [r7, #4]
 800253e:	461a      	mov	r2, r3
 8002540:	460b      	mov	r3, r1
 8002542:	72fb      	strb	r3, [r7, #11]
 8002544:	4613      	mov	r3, r2
 8002546:	72bb      	strb	r3, [r7, #10]
	IIS2MDC_Handle_t *Dev= Handle;
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	617b      	str	r3, [r7, #20]
	if(Dev->IO.Read != NULL)
 800254c:	697b      	ldr	r3, [r7, #20]
 800254e:	699b      	ldr	r3, [r3, #24]
 8002550:	2b00      	cmp	r3, #0
 8002552:	d007      	beq.n	8002564 <IIS2MDC_ReadRegWrapper+0x30>
	{
		return Dev->IO.Read(Reg,Buffer,Length);
 8002554:	697b      	ldr	r3, [r7, #20]
 8002556:	699b      	ldr	r3, [r3, #24]
 8002558:	7aba      	ldrb	r2, [r7, #10]
 800255a:	7af8      	ldrb	r0, [r7, #11]
 800255c:	6879      	ldr	r1, [r7, #4]
 800255e:	4798      	blx	r3
 8002560:	4603      	mov	r3, r0
 8002562:	e001      	b.n	8002568 <IIS2MDC_ReadRegWrapper+0x34>
	}
    return IIS2MDC_IOError;
 8002564:	f06f 0301 	mvn.w	r3, #1
}
 8002568:	4618      	mov	r0, r3
 800256a:	3718      	adds	r7, #24
 800256c:	46bd      	mov	sp, r7
 800256e:	bd80      	pop	{r7, pc}

08002570 <IIS2MDC_RegisterInit>:

static int32_t IIS2MDC_RegisterInit(IIS2MDC_Handle_t *Handle, IIS2MDC_InitStruct_t Settings)
{
 8002570:	b084      	sub	sp, #16
 8002572:	b580      	push	{r7, lr}
 8002574:	b084      	sub	sp, #16
 8002576:	af00      	add	r7, sp, #0
 8002578:	6078      	str	r0, [r7, #4]
 800257a:	f107 001c 	add.w	r0, r7, #28
 800257e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	int32_t ret = IIS2MDC_ResetDevice(Handle);
 8002582:	6878      	ldr	r0, [r7, #4]
 8002584:	f7ff ff36 	bl	80023f4 <IIS2MDC_ResetDevice>
 8002588:	60f8      	str	r0, [r7, #12]
	if(ret != IIS2MDC_Ok)
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	2b00      	cmp	r3, #0
 800258e:	d001      	beq.n	8002594 <IIS2MDC_RegisterInit+0x24>
	{
		return ret;
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	e09a      	b.n	80026ca <IIS2MDC_RegisterInit+0x15a>
	}

	uint8_t Buffer[2] = {0};
 8002594:	2300      	movs	r3, #0
 8002596:	813b      	strh	r3, [r7, #8]

	DeConvertMagData(Settings.IntThreshold, Buffer);
 8002598:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800259c:	f107 0308 	add.w	r3, r7, #8
 80025a0:	4618      	mov	r0, r3
 80025a2:	eeb0 0a67 	vmov.f32	s0, s15
 80025a6:	f000 f91a 	bl	80027de <DeConvertMagData>
	ret = IIS2MDC_WriteReg(&Handle->Context,IIS2MDC_REG_INT_THS_H_REG,Buffer,2);
 80025aa:	6878      	ldr	r0, [r7, #4]
 80025ac:	f107 0208 	add.w	r2, r7, #8
 80025b0:	2302      	movs	r3, #2
 80025b2:	2166      	movs	r1, #102	; 0x66
 80025b4:	f000 f9e6 	bl	8002984 <IIS2MDC_WriteReg>
 80025b8:	60f8      	str	r0, [r7, #12]
	if(ret != IIS2MDC_Ok)
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d001      	beq.n	80025c4 <IIS2MDC_RegisterInit+0x54>
	{
		return ret;
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	e082      	b.n	80026ca <IIS2MDC_RegisterInit+0x15a>
	}


	DeConvertMagData(Settings.OffsetX, Buffer);
 80025c4:	edd7 7a07 	vldr	s15, [r7, #28]
 80025c8:	f107 0308 	add.w	r3, r7, #8
 80025cc:	4618      	mov	r0, r3
 80025ce:	eeb0 0a67 	vmov.f32	s0, s15
 80025d2:	f000 f904 	bl	80027de <DeConvertMagData>
	ret = IIS2MDC_WriteReg(&Handle->Context,IIS2MDC_REG_OFFSET_X_REG_L,Buffer,2);
 80025d6:	6878      	ldr	r0, [r7, #4]
 80025d8:	f107 0208 	add.w	r2, r7, #8
 80025dc:	2302      	movs	r3, #2
 80025de:	2145      	movs	r1, #69	; 0x45
 80025e0:	f000 f9d0 	bl	8002984 <IIS2MDC_WriteReg>
 80025e4:	60f8      	str	r0, [r7, #12]
	if(ret != IIS2MDC_Ok)
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d001      	beq.n	80025f0 <IIS2MDC_RegisterInit+0x80>
	{
		return ret;
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	e06c      	b.n	80026ca <IIS2MDC_RegisterInit+0x15a>
	}

	DeConvertMagData(Settings.OffsetY, Buffer);
 80025f0:	edd7 7a08 	vldr	s15, [r7, #32]
 80025f4:	f107 0308 	add.w	r3, r7, #8
 80025f8:	4618      	mov	r0, r3
 80025fa:	eeb0 0a67 	vmov.f32	s0, s15
 80025fe:	f000 f8ee 	bl	80027de <DeConvertMagData>
	ret = IIS2MDC_WriteReg(&Handle->Context,IIS2MDC_REG_OFFSET_Y_REG_L,Buffer,2);
 8002602:	6878      	ldr	r0, [r7, #4]
 8002604:	f107 0208 	add.w	r2, r7, #8
 8002608:	2302      	movs	r3, #2
 800260a:	2147      	movs	r1, #71	; 0x47
 800260c:	f000 f9ba 	bl	8002984 <IIS2MDC_WriteReg>
 8002610:	60f8      	str	r0, [r7, #12]
	if(ret != IIS2MDC_Ok)
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	2b00      	cmp	r3, #0
 8002616:	d001      	beq.n	800261c <IIS2MDC_RegisterInit+0xac>
	{
		return ret;
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	e056      	b.n	80026ca <IIS2MDC_RegisterInit+0x15a>
	}

	DeConvertMagData(Settings.OffsetZ, Buffer);
 800261c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002620:	f107 0308 	add.w	r3, r7, #8
 8002624:	4618      	mov	r0, r3
 8002626:	eeb0 0a67 	vmov.f32	s0, s15
 800262a:	f000 f8d8 	bl	80027de <DeConvertMagData>
	ret = IIS2MDC_WriteReg(&Handle->Context,IIS2MDC_REG_OFFSET_Z_REG_L,Buffer,2);
 800262e:	6878      	ldr	r0, [r7, #4]
 8002630:	f107 0208 	add.w	r2, r7, #8
 8002634:	2302      	movs	r3, #2
 8002636:	2149      	movs	r1, #73	; 0x49
 8002638:	f000 f9a4 	bl	8002984 <IIS2MDC_WriteReg>
 800263c:	60f8      	str	r0, [r7, #12]
	if(ret != IIS2MDC_Ok)
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	2b00      	cmp	r3, #0
 8002642:	d001      	beq.n	8002648 <IIS2MDC_RegisterInit+0xd8>
	{
		return ret;
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	e040      	b.n	80026ca <IIS2MDC_RegisterInit+0x15a>
	}

	Buffer[0] = Settings.ConfigRegA;
 8002648:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800264c:	723b      	strb	r3, [r7, #8]
	ret = IIS2MDC_WriteReg(&Handle->Context,IIS2MDC_REG_CFG_REG_A,Buffer,1);
 800264e:	6878      	ldr	r0, [r7, #4]
 8002650:	f107 0208 	add.w	r2, r7, #8
 8002654:	2301      	movs	r3, #1
 8002656:	2160      	movs	r1, #96	; 0x60
 8002658:	f000 f994 	bl	8002984 <IIS2MDC_WriteReg>
 800265c:	60f8      	str	r0, [r7, #12]
	if(ret != IIS2MDC_Ok)
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	2b00      	cmp	r3, #0
 8002662:	d001      	beq.n	8002668 <IIS2MDC_RegisterInit+0xf8>
	{
		return ret;
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	e030      	b.n	80026ca <IIS2MDC_RegisterInit+0x15a>
	}

	Buffer[0] = Settings.ConfigRegB;
 8002668:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800266c:	723b      	strb	r3, [r7, #8]
	ret = IIS2MDC_WriteReg(&Handle->Context,IIS2MDC_REG_CFG_REG_B,Buffer,1);
 800266e:	6878      	ldr	r0, [r7, #4]
 8002670:	f107 0208 	add.w	r2, r7, #8
 8002674:	2301      	movs	r3, #1
 8002676:	2161      	movs	r1, #97	; 0x61
 8002678:	f000 f984 	bl	8002984 <IIS2MDC_WriteReg>
 800267c:	60f8      	str	r0, [r7, #12]
	if(ret != IIS2MDC_Ok)
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	2b00      	cmp	r3, #0
 8002682:	d001      	beq.n	8002688 <IIS2MDC_RegisterInit+0x118>
	{
		return ret;
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	e020      	b.n	80026ca <IIS2MDC_RegisterInit+0x15a>
	}

	Buffer[0] = Settings.ConfigRegC;
 8002688:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800268c:	723b      	strb	r3, [r7, #8]
	ret = IIS2MDC_WriteReg(&Handle->Context,IIS2MDC_REG_CFG_REG_C,Buffer,1);
 800268e:	6878      	ldr	r0, [r7, #4]
 8002690:	f107 0208 	add.w	r2, r7, #8
 8002694:	2301      	movs	r3, #1
 8002696:	2162      	movs	r1, #98	; 0x62
 8002698:	f000 f974 	bl	8002984 <IIS2MDC_WriteReg>
 800269c:	60f8      	str	r0, [r7, #12]
	if(ret != IIS2MDC_Ok)
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d001      	beq.n	80026a8 <IIS2MDC_RegisterInit+0x138>
	{
		return ret;
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	e010      	b.n	80026ca <IIS2MDC_RegisterInit+0x15a>
	}

	Buffer[0] = Settings.IntCtrlReg;
 80026a8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80026ac:	723b      	strb	r3, [r7, #8]
	ret = IIS2MDC_WriteReg(&Handle->Context,IIS2MDC_REG_INT_CTRL_REG,Buffer,1);
 80026ae:	6878      	ldr	r0, [r7, #4]
 80026b0:	f107 0208 	add.w	r2, r7, #8
 80026b4:	2301      	movs	r3, #1
 80026b6:	2163      	movs	r1, #99	; 0x63
 80026b8:	f000 f964 	bl	8002984 <IIS2MDC_WriteReg>
 80026bc:	60f8      	str	r0, [r7, #12]
	if(ret != IIS2MDC_Ok)
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d001      	beq.n	80026c8 <IIS2MDC_RegisterInit+0x158>
	{
		return ret;
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	e000      	b.n	80026ca <IIS2MDC_RegisterInit+0x15a>
	}

    return IIS2MDC_Ok;
 80026c8:	2300      	movs	r3, #0
}
 80026ca:	4618      	mov	r0, r3
 80026cc:	3710      	adds	r7, #16
 80026ce:	46bd      	mov	sp, r7
 80026d0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80026d4:	b004      	add	sp, #16
 80026d6:	4770      	bx	lr

080026d8 <IIS2MDC_SWReset>:

static int32_t IIS2MDC_SWReset(IIS2MDC_Handle_t *Handle)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b086      	sub	sp, #24
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
    int32_t ret = 0;
 80026e0:	2300      	movs	r3, #0
 80026e2:	617b      	str	r3, [r7, #20]
    uint8_t Buffer = IIS2MDC_ResetSignal;
 80026e4:	2320      	movs	r3, #32
 80026e6:	73fb      	strb	r3, [r7, #15]
    ret = IIS2MDC_WriteReg(&Handle->Context, IIS2MDC_REG_CFG_REG_A, &Buffer, 1);
 80026e8:	6878      	ldr	r0, [r7, #4]
 80026ea:	f107 020f 	add.w	r2, r7, #15
 80026ee:	2301      	movs	r3, #1
 80026f0:	2160      	movs	r1, #96	; 0x60
 80026f2:	f000 f947 	bl	8002984 <IIS2MDC_WriteReg>
 80026f6:	6178      	str	r0, [r7, #20]
    if(ret != IIS2MDC_Ok)
 80026f8:	697b      	ldr	r3, [r7, #20]
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d001      	beq.n	8002702 <IIS2MDC_SWReset+0x2a>
    {
    	return ret;
 80026fe:	697b      	ldr	r3, [r7, #20]
 8002700:	e01d      	b.n	800273e <IIS2MDC_SWReset+0x66>
    }

    uint32_t timeout = Handle->IO.GetTick();
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6a1b      	ldr	r3, [r3, #32]
 8002706:	4798      	blx	r3
 8002708:	6138      	str	r0, [r7, #16]
    while(Buffer & IIS2MDC_ResetSignal)
 800270a:	e012      	b.n	8002732 <IIS2MDC_SWReset+0x5a>
    {
        ret = IIS2MDC_ReadReg(&Handle->Context, IIS2MDC_REG_CFG_REG_A, &Buffer, 1);
 800270c:	6878      	ldr	r0, [r7, #4]
 800270e:	f107 020f 	add.w	r2, r7, #15
 8002712:	2301      	movs	r3, #1
 8002714:	2160      	movs	r1, #96	; 0x60
 8002716:	f000 f911 	bl	800293c <IIS2MDC_ReadReg>
 800271a:	6178      	str	r0, [r7, #20]
        if(Handle->IO.GetTick() > timeout + 100)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	6a1b      	ldr	r3, [r3, #32]
 8002720:	4798      	blx	r3
 8002722:	4602      	mov	r2, r0
 8002724:	693b      	ldr	r3, [r7, #16]
 8002726:	3364      	adds	r3, #100	; 0x64
 8002728:	429a      	cmp	r2, r3
 800272a:	d902      	bls.n	8002732 <IIS2MDC_SWReset+0x5a>
        {
        	return IIS2MDC_Timeout;
 800272c:	f06f 0305 	mvn.w	r3, #5
 8002730:	e005      	b.n	800273e <IIS2MDC_SWReset+0x66>
    while(Buffer & IIS2MDC_ResetSignal)
 8002732:	7bfb      	ldrb	r3, [r7, #15]
 8002734:	f003 0320 	and.w	r3, r3, #32
 8002738:	2b00      	cmp	r3, #0
 800273a:	d1e7      	bne.n	800270c <IIS2MDC_SWReset+0x34>
        }
    }
    return IIS2MDC_Ok;
 800273c:	2300      	movs	r3, #0
}
 800273e:	4618      	mov	r0, r3
 8002740:	3718      	adds	r7, #24
 8002742:	46bd      	mov	sp, r7
 8002744:	bd80      	pop	{r7, pc}

08002746 <IIS2MDC_Reboot>:

static int32_t IIS2MDC_Reboot(IIS2MDC_Handle_t *Handle)
{
 8002746:	b590      	push	{r4, r7, lr}
 8002748:	b087      	sub	sp, #28
 800274a:	af00      	add	r7, sp, #0
 800274c:	6078      	str	r0, [r7, #4]
    int32_t ret = 0;
 800274e:	2300      	movs	r3, #0
 8002750:	617b      	str	r3, [r7, #20]
    uint8_t Buffer = IIS2MDC_RebootSignal;
 8002752:	2340      	movs	r3, #64	; 0x40
 8002754:	73fb      	strb	r3, [r7, #15]
    ret = IIS2MDC_WriteReg(&Handle->Context, IIS2MDC_REG_CFG_REG_A, &Buffer, 1);
 8002756:	6878      	ldr	r0, [r7, #4]
 8002758:	f107 020f 	add.w	r2, r7, #15
 800275c:	2301      	movs	r3, #1
 800275e:	2160      	movs	r1, #96	; 0x60
 8002760:	f000 f910 	bl	8002984 <IIS2MDC_WriteReg>
 8002764:	6178      	str	r0, [r7, #20]
    if(ret != IIS2MDC_Ok)
 8002766:	697b      	ldr	r3, [r7, #20]
 8002768:	2b00      	cmp	r3, #0
 800276a:	d001      	beq.n	8002770 <IIS2MDC_Reboot+0x2a>
    {
    	return ret;
 800276c:	697b      	ldr	r3, [r7, #20]
 800276e:	e00e      	b.n	800278e <IIS2MDC_Reboot+0x48>
    }
    uint32_t timeout = Handle->IO.GetTick();
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	6a1b      	ldr	r3, [r3, #32]
 8002774:	4798      	blx	r3
 8002776:	6138      	str	r0, [r7, #16]
    while((timeout + 20) > Handle->IO.GetTick()); //Delay 20ms
 8002778:	bf00      	nop
 800277a:	693b      	ldr	r3, [r7, #16]
 800277c:	f103 0414 	add.w	r4, r3, #20
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6a1b      	ldr	r3, [r3, #32]
 8002784:	4798      	blx	r3
 8002786:	4603      	mov	r3, r0
 8002788:	429c      	cmp	r4, r3
 800278a:	d8f6      	bhi.n	800277a <IIS2MDC_Reboot+0x34>
    return IIS2MDC_Ok;
 800278c:	2300      	movs	r3, #0
}
 800278e:	4618      	mov	r0, r3
 8002790:	371c      	adds	r7, #28
 8002792:	46bd      	mov	sp, r7
 8002794:	bd90      	pop	{r4, r7, pc}

08002796 <ConvertMagData>:

static void ConvertMagData(uint8_t *buffer, float *magnetism)
{
 8002796:	b480      	push	{r7}
 8002798:	b085      	sub	sp, #20
 800279a:	af00      	add	r7, sp, #0
 800279c:	6078      	str	r0, [r7, #4]
 800279e:	6039      	str	r1, [r7, #0]
	int16_t result = (buffer[1] * 256) + buffer[0];
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	3301      	adds	r3, #1
 80027a4:	781b      	ldrb	r3, [r3, #0]
 80027a6:	b29b      	uxth	r3, r3
 80027a8:	021b      	lsls	r3, r3, #8
 80027aa:	b29a      	uxth	r2, r3
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	781b      	ldrb	r3, [r3, #0]
 80027b0:	b29b      	uxth	r3, r3
 80027b2:	4413      	add	r3, r2
 80027b4:	b29b      	uxth	r3, r3
 80027b6:	81fb      	strh	r3, [r7, #14]
	*magnetism = result * 1.5f;
 80027b8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80027bc:	ee07 3a90 	vmov	s15, r3
 80027c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80027c4:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 80027c8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	edc3 7a00 	vstr	s15, [r3]
}
 80027d2:	bf00      	nop
 80027d4:	3714      	adds	r7, #20
 80027d6:	46bd      	mov	sp, r7
 80027d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027dc:	4770      	bx	lr

080027de <DeConvertMagData>:

static void DeConvertMagData(float magnetism, uint8_t *buffer)
{
 80027de:	b480      	push	{r7}
 80027e0:	b085      	sub	sp, #20
 80027e2:	af00      	add	r7, sp, #0
 80027e4:	ed87 0a01 	vstr	s0, [r7, #4]
 80027e8:	6038      	str	r0, [r7, #0]
    int16_t result = magnetism / 1.5f;
 80027ea:	ed97 7a01 	vldr	s14, [r7, #4]
 80027ee:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 80027f2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80027f6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80027fa:	ee17 3a90 	vmov	r3, s15
 80027fe:	81fb      	strh	r3, [r7, #14]
    buffer[1] = (result & 0xFF00) >> 8;
 8002800:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002804:	121a      	asrs	r2, r3, #8
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	3301      	adds	r3, #1
 800280a:	b2d2      	uxtb	r2, r2
 800280c:	701a      	strb	r2, [r3, #0]
    buffer[0] = result & 0x00FF;
 800280e:	89fb      	ldrh	r3, [r7, #14]
 8002810:	b2da      	uxtb	r2, r3
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	701a      	strb	r2, [r3, #0]
}
 8002816:	bf00      	nop
 8002818:	3714      	adds	r7, #20
 800281a:	46bd      	mov	sp, r7
 800281c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002820:	4770      	bx	lr
	...

08002824 <IIS2MDC_GetSamplePeriod>:

int32_t IIS2MDC_GetSamplePeriod(IIS2MDC_Handle_t *Handle, uint32_t *Period)
{
 8002824:	b480      	push	{r7}
 8002826:	b083      	sub	sp, #12
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
 800282c:	6039      	str	r1, [r7, #0]
	if(Handle->Status != IIS2MDC_Initialized)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002834:	2b01      	cmp	r3, #1
 8002836:	d002      	beq.n	800283e <IIS2MDC_GetSamplePeriod+0x1a>
	{
		return IIS2MDC_InitError;
 8002838:	f06f 0302 	mvn.w	r3, #2
 800283c:	e03a      	b.n	80028b4 <IIS2MDC_GetSamplePeriod+0x90>
	}

	switch(Handle->OutputDataRate)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8002844:	2b0c      	cmp	r3, #12
 8002846:	d832      	bhi.n	80028ae <IIS2MDC_GetSamplePeriod+0x8a>
 8002848:	a201      	add	r2, pc, #4	; (adr r2, 8002850 <IIS2MDC_GetSamplePeriod+0x2c>)
 800284a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800284e:	bf00      	nop
 8002850:	0800288f 	.word	0x0800288f
 8002854:	08002885 	.word	0x08002885
 8002858:	080028af 	.word	0x080028af
 800285c:	080028af 	.word	0x080028af
 8002860:	08002897 	.word	0x08002897
 8002864:	080028af 	.word	0x080028af
 8002868:	080028af 	.word	0x080028af
 800286c:	080028af 	.word	0x080028af
 8002870:	0800289f 	.word	0x0800289f
 8002874:	080028af 	.word	0x080028af
 8002878:	080028af 	.word	0x080028af
 800287c:	080028af 	.word	0x080028af
 8002880:	080028a7 	.word	0x080028a7
	{
	case(IIS2MDC_ODR_OneShot):
			*Period = 0;
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	2200      	movs	r2, #0
 8002888:	601a      	str	r2, [r3, #0]
	        return IIS2MDC_ODR_PeriodOneShot;
 800288a:	2301      	movs	r3, #1
 800288c:	e012      	b.n	80028b4 <IIS2MDC_GetSamplePeriod+0x90>
	case(IIS2MDC_ODR_10Hz):
			*Period =  (1000 / 10);
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	2264      	movs	r2, #100	; 0x64
 8002892:	601a      	str	r2, [r3, #0]
	        break;
 8002894:	e00d      	b.n	80028b2 <IIS2MDC_GetSamplePeriod+0x8e>
	case(IIS2MDC_ODR_20Hz):
			*Period = (1000 / 20);
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	2232      	movs	r2, #50	; 0x32
 800289a:	601a      	str	r2, [r3, #0]
	        break;
 800289c:	e009      	b.n	80028b2 <IIS2MDC_GetSamplePeriod+0x8e>
	case(IIS2MDC_ODR_50Hz):
			*Period = (1000 / 50);
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	2214      	movs	r2, #20
 80028a2:	601a      	str	r2, [r3, #0]
	        break;
 80028a4:	e005      	b.n	80028b2 <IIS2MDC_GetSamplePeriod+0x8e>
	case(IIS2MDC_ODR_100Hz):
			*Period = (1000 / 100);
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	220a      	movs	r2, #10
 80028aa:	601a      	str	r2, [r3, #0]
	        break;
 80028ac:	e001      	b.n	80028b2 <IIS2MDC_GetSamplePeriod+0x8e>
	default:
		    return IIS2MDC_ODR_Error;
 80028ae:	2302      	movs	r3, #2
 80028b0:	e000      	b.n	80028b4 <IIS2MDC_GetSamplePeriod+0x90>
	}

	return IIS2MDC_Ok;
 80028b2:	2300      	movs	r3, #0
}
 80028b4:	4618      	mov	r0, r3
 80028b6:	370c      	adds	r7, #12
 80028b8:	46bd      	mov	sp, r7
 80028ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028be:	4770      	bx	lr

080028c0 <IIS2MDC_ValidateParams>:

#include "IIS2MDC_Registers.h"
#include <stddef.h>

static int32_t IIS2MDC_ValidateParams(IIS2MDC_Context_t *Context, uint8_t Reg, uint8_t *Buffer, uint8_t Length)
{
 80028c0:	b480      	push	{r7}
 80028c2:	b087      	sub	sp, #28
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	60f8      	str	r0, [r7, #12]
 80028c8:	607a      	str	r2, [r7, #4]
 80028ca:	461a      	mov	r2, r3
 80028cc:	460b      	mov	r3, r1
 80028ce:	72fb      	strb	r3, [r7, #11]
 80028d0:	4613      	mov	r3, r2
 80028d2:	72bb      	strb	r3, [r7, #10]
	int32_t ret = IIS2MDC_REG_OK;
 80028d4:	2300      	movs	r3, #0
 80028d6:	617b      	str	r3, [r7, #20]
    if(Context == NULL || Context->Read == NULL || Context->Write == NULL || Context->Handle == NULL)
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d00b      	beq.n	80028f6 <IIS2MDC_ValidateParams+0x36>
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	685b      	ldr	r3, [r3, #4]
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d007      	beq.n	80028f6 <IIS2MDC_ValidateParams+0x36>
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	689b      	ldr	r3, [r3, #8]
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d003      	beq.n	80028f6 <IIS2MDC_ValidateParams+0x36>
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d103      	bne.n	80028fe <IIS2MDC_ValidateParams+0x3e>
    {
    	ret |= IIS2MDC_REG_CONTEXT_ERR;
 80028f6:	697b      	ldr	r3, [r7, #20]
 80028f8:	f043 4308 	orr.w	r3, r3, #2281701376	; 0x88000000
 80028fc:	617b      	str	r3, [r7, #20]
    }

    if(Reg < IIS2MDC_REG_OFFSET_X_REG_L || Reg > IIS2MDC_REG_TEMP_OUT_H_REG)
 80028fe:	7afb      	ldrb	r3, [r7, #11]
 8002900:	2b44      	cmp	r3, #68	; 0x44
 8002902:	d902      	bls.n	800290a <IIS2MDC_ValidateParams+0x4a>
 8002904:	7afb      	ldrb	r3, [r7, #11]
 8002906:	2b6f      	cmp	r3, #111	; 0x6f
 8002908:	d903      	bls.n	8002912 <IIS2MDC_ValidateParams+0x52>
    {
    	ret |= IIS2MDC_REG_ADDR_ERR;
 800290a:	697b      	ldr	r3, [r7, #20]
 800290c:	f043 4310 	orr.w	r3, r3, #2415919104	; 0x90000000
 8002910:	617b      	str	r3, [r7, #20]
    }

    if(Buffer == NULL)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	2b00      	cmp	r3, #0
 8002916:	d103      	bne.n	8002920 <IIS2MDC_ValidateParams+0x60>
    {
    	ret |= IIS2MDC_REG_BUFFER_ERR;
 8002918:	697b      	ldr	r3, [r7, #20]
 800291a:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800291e:	617b      	str	r3, [r7, #20]
    }

    if(Length == 0)
 8002920:	7abb      	ldrb	r3, [r7, #10]
 8002922:	2b00      	cmp	r3, #0
 8002924:	d103      	bne.n	800292e <IIS2MDC_ValidateParams+0x6e>
    {
       ret |= IIS2MDC_REG_LENGTH_ERR;
 8002926:	697b      	ldr	r3, [r7, #20]
 8002928:	f043 4320 	orr.w	r3, r3, #2684354560	; 0xa0000000
 800292c:	617b      	str	r3, [r7, #20]
    }

    return ret;
 800292e:	697b      	ldr	r3, [r7, #20]

}
 8002930:	4618      	mov	r0, r3
 8002932:	371c      	adds	r7, #28
 8002934:	46bd      	mov	sp, r7
 8002936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293a:	4770      	bx	lr

0800293c <IIS2MDC_ReadReg>:

int32_t IIS2MDC_ReadReg(IIS2MDC_Context_t *Context, uint8_t Reg, uint8_t *Buffer, uint8_t Length)
{
 800293c:	b590      	push	{r4, r7, lr}
 800293e:	b087      	sub	sp, #28
 8002940:	af00      	add	r7, sp, #0
 8002942:	60f8      	str	r0, [r7, #12]
 8002944:	607a      	str	r2, [r7, #4]
 8002946:	461a      	mov	r2, r3
 8002948:	460b      	mov	r3, r1
 800294a:	72fb      	strb	r3, [r7, #11]
 800294c:	4613      	mov	r3, r2
 800294e:	72bb      	strb	r3, [r7, #10]
	int32_t ret = IIS2MDC_ValidateParams(Context,Reg,Buffer,Length);
 8002950:	7abb      	ldrb	r3, [r7, #10]
 8002952:	7af9      	ldrb	r1, [r7, #11]
 8002954:	687a      	ldr	r2, [r7, #4]
 8002956:	68f8      	ldr	r0, [r7, #12]
 8002958:	f7ff ffb2 	bl	80028c0 <IIS2MDC_ValidateParams>
 800295c:	6178      	str	r0, [r7, #20]
	if(ret != IIS2MDC_REG_OK)
 800295e:	697b      	ldr	r3, [r7, #20]
 8002960:	2b00      	cmp	r3, #0
 8002962:	d001      	beq.n	8002968 <IIS2MDC_ReadReg+0x2c>
	{
		return ret;
 8002964:	697b      	ldr	r3, [r7, #20]
 8002966:	e009      	b.n	800297c <IIS2MDC_ReadReg+0x40>
	}

	ret = Context->Read(Context->Handle, Reg, Buffer, Length);
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	685c      	ldr	r4, [r3, #4]
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	6818      	ldr	r0, [r3, #0]
 8002970:	7abb      	ldrb	r3, [r7, #10]
 8002972:	7af9      	ldrb	r1, [r7, #11]
 8002974:	687a      	ldr	r2, [r7, #4]
 8002976:	47a0      	blx	r4
 8002978:	6178      	str	r0, [r7, #20]
	return ret;
 800297a:	697b      	ldr	r3, [r7, #20]
}
 800297c:	4618      	mov	r0, r3
 800297e:	371c      	adds	r7, #28
 8002980:	46bd      	mov	sp, r7
 8002982:	bd90      	pop	{r4, r7, pc}

08002984 <IIS2MDC_WriteReg>:

int32_t IIS2MDC_WriteReg(IIS2MDC_Context_t *Context, uint8_t Reg, uint8_t *Buffer, uint8_t Length)
{
 8002984:	b590      	push	{r4, r7, lr}
 8002986:	b087      	sub	sp, #28
 8002988:	af00      	add	r7, sp, #0
 800298a:	60f8      	str	r0, [r7, #12]
 800298c:	607a      	str	r2, [r7, #4]
 800298e:	461a      	mov	r2, r3
 8002990:	460b      	mov	r3, r1
 8002992:	72fb      	strb	r3, [r7, #11]
 8002994:	4613      	mov	r3, r2
 8002996:	72bb      	strb	r3, [r7, #10]
	int32_t ret = IIS2MDC_ValidateParams(Context,Reg,Buffer,Length);
 8002998:	7abb      	ldrb	r3, [r7, #10]
 800299a:	7af9      	ldrb	r1, [r7, #11]
 800299c:	687a      	ldr	r2, [r7, #4]
 800299e:	68f8      	ldr	r0, [r7, #12]
 80029a0:	f7ff ff8e 	bl	80028c0 <IIS2MDC_ValidateParams>
 80029a4:	6178      	str	r0, [r7, #20]
	if(ret != IIS2MDC_REG_OK)
 80029a6:	697b      	ldr	r3, [r7, #20]
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d001      	beq.n	80029b0 <IIS2MDC_WriteReg+0x2c>
	{
		return ret;
 80029ac:	697b      	ldr	r3, [r7, #20]
 80029ae:	e009      	b.n	80029c4 <IIS2MDC_WriteReg+0x40>
	}

	ret = Context->Write(Context->Handle, Reg, Buffer, Length);
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	689c      	ldr	r4, [r3, #8]
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	6818      	ldr	r0, [r3, #0]
 80029b8:	7abb      	ldrb	r3, [r7, #10]
 80029ba:	7af9      	ldrb	r1, [r7, #11]
 80029bc:	687a      	ldr	r2, [r7, #4]
 80029be:	47a0      	blx	r4
 80029c0:	6178      	str	r0, [r7, #20]
	return ret;
 80029c2:	697b      	ldr	r3, [r7, #20]
}
 80029c4:	4618      	mov	r0, r3
 80029c6:	371c      	adds	r7, #28
 80029c8:	46bd      	mov	sp, r7
 80029ca:	bd90      	pop	{r4, r7, pc}

080029cc <ISM330DHCX_Init>:
#define T_DATA_MASK  (4U)
#define ISM330DHCX_BOOT_BIT_MSK (0x80)


int32_t ISM330DHCX_Init(ISM330DHCX_Handle_t *Handle, ISM330DHCX_Init_Struct_t Settings, ISM330DHCX_IO_t *IO)
{
 80029cc:	b084      	sub	sp, #16
 80029ce:	b5b0      	push	{r4, r5, r7, lr}
 80029d0:	b08c      	sub	sp, #48	; 0x30
 80029d2:	af0a      	add	r7, sp, #40	; 0x28
 80029d4:	6078      	str	r0, [r7, #4]
 80029d6:	f107 001c 	add.w	r0, r7, #28
 80029da:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    if(Handle == NULL)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d102      	bne.n	80029ea <ISM330DHCX_Init+0x1e>
    {
    	return ISM330DHCX_Error;
 80029e4:	f04f 33ff 	mov.w	r3, #4294967295
 80029e8:	e071      	b.n	8002ace <ISM330DHCX_Init+0x102>
    }


    if(ISM330DHCX_RegisterIOBus(Handle, IO) != ISM330DHCX_Ok)
 80029ea:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80029ec:	6878      	ldr	r0, [r7, #4]
 80029ee:	f000 f879 	bl	8002ae4 <ISM330DHCX_RegisterIOBus>
 80029f2:	4603      	mov	r3, r0
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d002      	beq.n	80029fe <ISM330DHCX_Init+0x32>
    {
    	return ISM330DHCX_ParamError;
 80029f8:	f06f 0302 	mvn.w	r3, #2
 80029fc:	e067      	b.n	8002ace <ISM330DHCX_Init+0x102>
    }

    //Validate if using INT1
    if(Settings.INT1_CTRL != 0 || ((Settings.INT2_CTRL != 0) && (Settings.INT2_on_INT1 == ISM330DHCX_IRQOnBothPins)))
 80029fe:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d107      	bne.n	8002a16 <ISM330DHCX_Init+0x4a>
 8002a06:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d00a      	beq.n	8002a24 <ISM330DHCX_Init+0x58>
 8002a0e:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002a12:	2b20      	cmp	r3, #32
 8002a14:	d106      	bne.n	8002a24 <ISM330DHCX_Init+0x58>
    {
    	if(IO->ReadInt1Pin == NULL){
 8002a16:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a18:	691b      	ldr	r3, [r3, #16]
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d102      	bne.n	8002a24 <ISM330DHCX_Init+0x58>
        	return ISM330DHCX_ParamError; //If INT1 is used in any capacity, ReadInt1Pin is required
 8002a1e:	f06f 0302 	mvn.w	r3, #2
 8002a22:	e054      	b.n	8002ace <ISM330DHCX_Init+0x102>
    	}

    }

    //Validate if using INT2
    if(Settings.INT2_CTRL != 0 && IO->ReadInt2Pin == NULL)
 8002a24:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d006      	beq.n	8002a3a <ISM330DHCX_Init+0x6e>
 8002a2c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a2e:	695b      	ldr	r3, [r3, #20]
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d102      	bne.n	8002a3a <ISM330DHCX_Init+0x6e>
    {
    	return ISM330DHCX_ParamError; //If INT2 is used in any capacity, ReadInt2Pin is required
 8002a34:	f06f 0302 	mvn.w	r3, #2
 8002a38:	e049      	b.n	8002ace <ISM330DHCX_Init+0x102>
    }

    Handle->Context.Read = ISM330DHCX_ReadWrapper;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	4a27      	ldr	r2, [pc, #156]	; (8002adc <ISM330DHCX_Init+0x110>)
 8002a3e:	625a      	str	r2, [r3, #36]	; 0x24
    Handle->Context.Write = ISM330DHCX_WriteWrapper;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	4a27      	ldr	r2, [pc, #156]	; (8002ae0 <ISM330DHCX_Init+0x114>)
 8002a44:	621a      	str	r2, [r3, #32]
    Handle->Context.Handle = Handle;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	687a      	ldr	r2, [r7, #4]
 8002a4a:	61da      	str	r2, [r3, #28]
    Handle->AccelResolution = Settings.FS_XL;
 8002a4c:	f897 2040 	ldrb.w	r2, [r7, #64]	; 0x40
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
    Handle->GyroResolution = Settings.FS_G;
 8002a56:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    Handle->Int1Mode = Settings.INT1_CTRL;
 8002a60:	f897 204b 	ldrb.w	r2, [r7, #75]	; 0x4b
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
    Handle->Int2Mode = Settings.INT2_CTRL;
 8002a6a:	f897 204c 	ldrb.w	r2, [r7, #76]	; 0x4c
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
    Handle->IntPinMux = Settings.INT2_on_INT1;
 8002a74:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    Handle->IntPolarity = Settings.H_LACTIVE;
 8002a7e:	f897 2049 	ldrb.w	r2, [r7, #73]	; 0x49
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    Handle->GyroDataRate = Settings.ODR_G;
 8002a88:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
    Handle->AccelDataRate = Settings.ODR_XL;
 8002a92:	f897 2034 	ldrb.w	r2, [r7, #52]	; 0x34
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

    //Initialize Bus
    if(Handle->IO.Init != NULL)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d002      	beq.n	8002aaa <ISM330DHCX_Init+0xde>
    {
    	Handle->IO.Init();
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	4798      	blx	r3
    }

    return ISM330DHCX_RegisterInit(Handle, Settings);
 8002aaa:	466d      	mov	r5, sp
 8002aac:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8002ab0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002ab2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002ab4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002ab6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002ab8:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002abc:	e885 0003 	stmia.w	r5, {r0, r1}
 8002ac0:	f107 031c 	add.w	r3, r7, #28
 8002ac4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002ac6:	6878      	ldr	r0, [r7, #4]
 8002ac8:	f000 f9d5 	bl	8002e76 <ISM330DHCX_RegisterInit>
 8002acc:	4603      	mov	r3, r0

}
 8002ace:	4618      	mov	r0, r3
 8002ad0:	3708      	adds	r7, #8
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8002ad8:	b004      	add	sp, #16
 8002ada:	4770      	bx	lr
 8002adc:	08002dff 	.word	0x08002dff
 8002ae0:	08002e3b 	.word	0x08002e3b

08002ae4 <ISM330DHCX_RegisterIOBus>:
    ISM330DHCX_DeInit(Handle);
    return ISM330DHCX_Init(Handle, Settings, IO);
}

int32_t ISM330DHCX_RegisterIOBus(ISM330DHCX_Handle_t *Handle, ISM330DHCX_IO_t *IO)
{
 8002ae4:	b4b0      	push	{r4, r5, r7}
 8002ae6:	b083      	sub	sp, #12
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
 8002aec:	6039      	str	r1, [r7, #0]
    //Validate if Read/Write/GetTick have been provided
    if(IO->Read == NULL || IO->Write==NULL || IO->GetTick == NULL)
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	689b      	ldr	r3, [r3, #8]
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d007      	beq.n	8002b06 <ISM330DHCX_RegisterIOBus+0x22>
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	68db      	ldr	r3, [r3, #12]
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d003      	beq.n	8002b06 <ISM330DHCX_RegisterIOBus+0x22>
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	699b      	ldr	r3, [r3, #24]
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d102      	bne.n	8002b0c <ISM330DHCX_RegisterIOBus+0x28>
    {
    	return ISM330DHCX_ParamError; //Write, Read, GetTick are required for basic device functionality
 8002b06:	f06f 0302 	mvn.w	r3, #2
 8002b0a:	e00a      	b.n	8002b22 <ISM330DHCX_RegisterIOBus+0x3e>
    }

    Handle->IO = *IO;
 8002b0c:	687a      	ldr	r2, [r7, #4]
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	4614      	mov	r4, r2
 8002b12:	461d      	mov	r5, r3
 8002b14:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002b16:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002b18:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002b1c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    return ISM330DHCX_Ok;
 8002b20:	2300      	movs	r3, #0
}
 8002b22:	4618      	mov	r0, r3
 8002b24:	370c      	adds	r7, #12
 8002b26:	46bd      	mov	sp, r7
 8002b28:	bcb0      	pop	{r4, r5, r7}
 8002b2a:	4770      	bx	lr

08002b2c <ISM330DHCX_ReadAccel>:

int32_t ISM330DHCX_ReadAccel(ISM330DHCX_Handle_t *Handle, float *Ax, float *Ay, float *Az)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b088      	sub	sp, #32
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	60f8      	str	r0, [r7, #12]
 8002b34:	60b9      	str	r1, [r7, #8]
 8002b36:	607a      	str	r2, [r7, #4]
 8002b38:	603b      	str	r3, [r7, #0]
	int32_t ret = ISM330DHCX_Ok;
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	61fb      	str	r3, [r7, #28]
	int16_t buffer[3] = {0,0,0};
 8002b3e:	2300      	movs	r3, #0
 8002b40:	82bb      	strh	r3, [r7, #20]
 8002b42:	2300      	movs	r3, #0
 8002b44:	82fb      	strh	r3, [r7, #22]
 8002b46:	2300      	movs	r3, #0
 8002b48:	833b      	strh	r3, [r7, #24]
    if(Handle == NULL)
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d102      	bne.n	8002b56 <ISM330DHCX_ReadAccel+0x2a>
    {
    	return ISM330DHCX_ParamError;
 8002b50:	f06f 0302 	mvn.w	r3, #2
 8002b54:	e045      	b.n	8002be2 <ISM330DHCX_ReadAccel+0xb6>
    }

    //Read Status register
    ret = ISM330DHCX_ReadReg(&Handle->Context, ISM330DHCX_REG_STATUS_REG, (uint8_t*)buffer, 1);
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	f103 001c 	add.w	r0, r3, #28
 8002b5c:	f107 0214 	add.w	r2, r7, #20
 8002b60:	2301      	movs	r3, #1
 8002b62:	211e      	movs	r1, #30
 8002b64:	f000 fc02 	bl	800336c <ISM330DHCX_ReadReg>
 8002b68:	61f8      	str	r0, [r7, #28]
    if(ret != ISM330DHCX_Ok)
 8002b6a:	69fb      	ldr	r3, [r7, #28]
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d001      	beq.n	8002b74 <ISM330DHCX_ReadAccel+0x48>
    {
        return ret;
 8002b70:	69fb      	ldr	r3, [r7, #28]
 8002b72:	e036      	b.n	8002be2 <ISM330DHCX_ReadAccel+0xb6>
    }
    //Check the XL Bit
    if(!(buffer[0] & XL_DATA_MASK))
 8002b74:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002b78:	b29b      	uxth	r3, r3
 8002b7a:	f003 0301 	and.w	r3, r3, #1
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d102      	bne.n	8002b88 <ISM330DHCX_ReadAccel+0x5c>
    {
        return ISM330DHCX_DataNotReady;
 8002b82:	f64b 63ef 	movw	r3, #48879	; 0xbeef
 8002b86:	e02c      	b.n	8002be2 <ISM330DHCX_ReadAccel+0xb6>
    }

    //Read the data
    ret = ISM330DHCX_ReadReg(&Handle->Context, ISM330DHCX_REG_OUTX_L_A, (uint8_t*)buffer, 6);
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	f103 001c 	add.w	r0, r3, #28
 8002b8e:	f107 0214 	add.w	r2, r7, #20
 8002b92:	2306      	movs	r3, #6
 8002b94:	2128      	movs	r1, #40	; 0x28
 8002b96:	f000 fbe9 	bl	800336c <ISM330DHCX_ReadReg>
 8002b9a:	61f8      	str	r0, [r7, #28]
    if(ret != ISM330DHCX_Ok)
 8002b9c:	69fb      	ldr	r3, [r7, #28]
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d001      	beq.n	8002ba6 <ISM330DHCX_ReadAccel+0x7a>
    {
    	return ret;
 8002ba2:	69fb      	ldr	r3, [r7, #28]
 8002ba4:	e01d      	b.n	8002be2 <ISM330DHCX_ReadAccel+0xb6>
    }
    //Convert the data to Gs
    ConvertXLData(Handle->AccelResolution, &buffer[0], Ax);
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8002bac:	f107 0114 	add.w	r1, r7, #20
 8002bb0:	68ba      	ldr	r2, [r7, #8]
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	f000 fb4a 	bl	800324c <ConvertXLData>
    ConvertXLData(Handle->AccelResolution, &buffer[1], Ay);
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	f893 0029 	ldrb.w	r0, [r3, #41]	; 0x29
 8002bbe:	f107 0314 	add.w	r3, r7, #20
 8002bc2:	3302      	adds	r3, #2
 8002bc4:	687a      	ldr	r2, [r7, #4]
 8002bc6:	4619      	mov	r1, r3
 8002bc8:	f000 fb40 	bl	800324c <ConvertXLData>
    ConvertXLData(Handle->AccelResolution, &buffer[2], Az);
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	f893 0029 	ldrb.w	r0, [r3, #41]	; 0x29
 8002bd2:	f107 0314 	add.w	r3, r7, #20
 8002bd6:	3304      	adds	r3, #4
 8002bd8:	683a      	ldr	r2, [r7, #0]
 8002bda:	4619      	mov	r1, r3
 8002bdc:	f000 fb36 	bl	800324c <ConvertXLData>
    return ISM330DHCX_DataReady;
 8002be0:	2300      	movs	r3, #0
}
 8002be2:	4618      	mov	r0, r3
 8002be4:	3720      	adds	r7, #32
 8002be6:	46bd      	mov	sp, r7
 8002be8:	bd80      	pop	{r7, pc}

08002bea <ISM330DHCX_ReadGyro>:

int32_t ISM330DHCX_ReadGyro(ISM330DHCX_Handle_t *Handle, float *Wx, float *Wy, float *Wz)
{
 8002bea:	b580      	push	{r7, lr}
 8002bec:	b088      	sub	sp, #32
 8002bee:	af00      	add	r7, sp, #0
 8002bf0:	60f8      	str	r0, [r7, #12]
 8002bf2:	60b9      	str	r1, [r7, #8]
 8002bf4:	607a      	str	r2, [r7, #4]
 8002bf6:	603b      	str	r3, [r7, #0]
	int32_t ret = ISM330DHCX_Ok;
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	61fb      	str	r3, [r7, #28]
	int16_t buffer[3] = {0,0,0};
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	82bb      	strh	r3, [r7, #20]
 8002c00:	2300      	movs	r3, #0
 8002c02:	82fb      	strh	r3, [r7, #22]
 8002c04:	2300      	movs	r3, #0
 8002c06:	833b      	strh	r3, [r7, #24]
    if(Handle == NULL)
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d102      	bne.n	8002c14 <ISM330DHCX_ReadGyro+0x2a>
    {
    	return ISM330DHCX_ParamError;
 8002c0e:	f06f 0302 	mvn.w	r3, #2
 8002c12:	e045      	b.n	8002ca0 <ISM330DHCX_ReadGyro+0xb6>
    }

    //Read Status register
    ret = ISM330DHCX_ReadReg(&Handle->Context, ISM330DHCX_REG_STATUS_REG, (uint8_t*)buffer, 1);
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	f103 001c 	add.w	r0, r3, #28
 8002c1a:	f107 0214 	add.w	r2, r7, #20
 8002c1e:	2301      	movs	r3, #1
 8002c20:	211e      	movs	r1, #30
 8002c22:	f000 fba3 	bl	800336c <ISM330DHCX_ReadReg>
 8002c26:	61f8      	str	r0, [r7, #28]
    if(ret != ISM330DHCX_Ok)
 8002c28:	69fb      	ldr	r3, [r7, #28]
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d001      	beq.n	8002c32 <ISM330DHCX_ReadGyro+0x48>
    {
        return ret;
 8002c2e:	69fb      	ldr	r3, [r7, #28]
 8002c30:	e036      	b.n	8002ca0 <ISM330DHCX_ReadGyro+0xb6>
    }
    //Check the XL Bit
    if(!(buffer[0] & G_DATA_MASK))
 8002c32:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002c36:	b29b      	uxth	r3, r3
 8002c38:	f003 0302 	and.w	r3, r3, #2
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d102      	bne.n	8002c46 <ISM330DHCX_ReadGyro+0x5c>
    {
        return ISM330DHCX_DataNotReady;
 8002c40:	f64b 63ef 	movw	r3, #48879	; 0xbeef
 8002c44:	e02c      	b.n	8002ca0 <ISM330DHCX_ReadGyro+0xb6>
    }

    //Read the data
    ret = ISM330DHCX_ReadReg(&Handle->Context, ISM330DHCX_REG_OUTX_L_G, (uint8_t*)buffer, 6);
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	f103 001c 	add.w	r0, r3, #28
 8002c4c:	f107 0214 	add.w	r2, r7, #20
 8002c50:	2306      	movs	r3, #6
 8002c52:	2122      	movs	r1, #34	; 0x22
 8002c54:	f000 fb8a 	bl	800336c <ISM330DHCX_ReadReg>
 8002c58:	61f8      	str	r0, [r7, #28]
    if(ret != ISM330DHCX_Ok)
 8002c5a:	69fb      	ldr	r3, [r7, #28]
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d001      	beq.n	8002c64 <ISM330DHCX_ReadGyro+0x7a>
    {
    	return ret;
 8002c60:	69fb      	ldr	r3, [r7, #28]
 8002c62:	e01d      	b.n	8002ca0 <ISM330DHCX_ReadGyro+0xb6>
    }
    //Convert Gyro Data to DPS
    ConvertGData(Handle->GyroResolution, &buffer[0], Wx);
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002c6a:	f107 0114 	add.w	r1, r7, #20
 8002c6e:	68ba      	ldr	r2, [r7, #8]
 8002c70:	4618      	mov	r0, r3
 8002c72:	f000 fb2b 	bl	80032cc <ConvertGData>
    ConvertGData(Handle->GyroResolution, &buffer[1], Wy);
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	f893 0028 	ldrb.w	r0, [r3, #40]	; 0x28
 8002c7c:	f107 0314 	add.w	r3, r7, #20
 8002c80:	3302      	adds	r3, #2
 8002c82:	687a      	ldr	r2, [r7, #4]
 8002c84:	4619      	mov	r1, r3
 8002c86:	f000 fb21 	bl	80032cc <ConvertGData>
    ConvertGData(Handle->GyroResolution, &buffer[2], Wz);
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	f893 0028 	ldrb.w	r0, [r3, #40]	; 0x28
 8002c90:	f107 0314 	add.w	r3, r7, #20
 8002c94:	3304      	adds	r3, #4
 8002c96:	683a      	ldr	r2, [r7, #0]
 8002c98:	4619      	mov	r1, r3
 8002c9a:	f000 fb17 	bl	80032cc <ConvertGData>
    return ISM330DHCX_DataReady;
 8002c9e:	2300      	movs	r3, #0
}
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	3720      	adds	r7, #32
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	bd80      	pop	{r7, pc}

08002ca8 <ISM330DHCX_Reboot>:
    ConvertTData(buffer, Data);
    return ISM330DHCX_DataReady;
}

int32_t ISM330DHCX_Reboot(ISM330DHCX_Handle_t *Handle)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b084      	sub	sp, #16
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
    //Put Gyro / Accel In power down mode
	uint32_t ret = ISM330DHCX_Ok;
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	60fb      	str	r3, [r7, #12]
    uint8_t buffer = 0;
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	72fb      	strb	r3, [r7, #11]
    ret = ISM330DHCX_WriteReg(&Handle->Context, ISM330DHCX_REG_CTRL1_XL, &buffer, 1);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	f103 001c 	add.w	r0, r3, #28
 8002cbe:	f107 020b 	add.w	r2, r7, #11
 8002cc2:	2301      	movs	r3, #1
 8002cc4:	2110      	movs	r1, #16
 8002cc6:	f000 fb7a 	bl	80033be <ISM330DHCX_WriteReg>
 8002cca:	4603      	mov	r3, r0
 8002ccc:	60fb      	str	r3, [r7, #12]
    if(ret != ISM330DHCX_Ok)
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d001      	beq.n	8002cd8 <ISM330DHCX_Reboot+0x30>
    {
    	return ret;
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	e038      	b.n	8002d4a <ISM330DHCX_Reboot+0xa2>
    }

    buffer = 0;
 8002cd8:	2300      	movs	r3, #0
 8002cda:	72fb      	strb	r3, [r7, #11]
    ret = ISM330DHCX_WriteReg(&Handle->Context, ISM330DHCX_REG_CTRL2_G, &buffer, 1);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	f103 001c 	add.w	r0, r3, #28
 8002ce2:	f107 020b 	add.w	r2, r7, #11
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	2111      	movs	r1, #17
 8002cea:	f000 fb68 	bl	80033be <ISM330DHCX_WriteReg>
 8002cee:	4603      	mov	r3, r0
 8002cf0:	60fb      	str	r3, [r7, #12]
    if(ret != ISM330DHCX_Ok)
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d001      	beq.n	8002cfc <ISM330DHCX_Reboot+0x54>
    {
    	return ret;
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	e026      	b.n	8002d4a <ISM330DHCX_Reboot+0xa2>
    }

	//Set BOOT bit in ctrl 3
    buffer = ISM330DHCX_BOOT_BIT_MSK;
 8002cfc:	2380      	movs	r3, #128	; 0x80
 8002cfe:	72fb      	strb	r3, [r7, #11]
    ret = ISM330DHCX_WriteReg(&Handle->Context, ISM330DHCX_REG_CTRL3_C, &buffer, 1);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	f103 001c 	add.w	r0, r3, #28
 8002d06:	f107 020b 	add.w	r2, r7, #11
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	2112      	movs	r1, #18
 8002d0e:	f000 fb56 	bl	80033be <ISM330DHCX_WriteReg>
 8002d12:	4603      	mov	r3, r0
 8002d14:	60fb      	str	r3, [r7, #12]
    if(ret != ISM330DHCX_Ok)
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d011      	beq.n	8002d40 <ISM330DHCX_Reboot+0x98>
    {
    	return ret;
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	e014      	b.n	8002d4a <ISM330DHCX_Reboot+0xa2>
    }

	//Wait for boot bit to become 0
    while(buffer & ISM330DHCX_BOOT_BIT_MSK)
    {
        ret = ISM330DHCX_ReadReg(&Handle->Context, ISM330DHCX_REG_CTRL3_C, &buffer, 1);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	f103 001c 	add.w	r0, r3, #28
 8002d26:	f107 020b 	add.w	r2, r7, #11
 8002d2a:	2301      	movs	r3, #1
 8002d2c:	2112      	movs	r1, #18
 8002d2e:	f000 fb1d 	bl	800336c <ISM330DHCX_ReadReg>
 8002d32:	4603      	mov	r3, r0
 8002d34:	60fb      	str	r3, [r7, #12]
        if(ret != ISM330DHCX_Ok)
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d001      	beq.n	8002d40 <ISM330DHCX_Reboot+0x98>
        {
        	return ret;
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	e004      	b.n	8002d4a <ISM330DHCX_Reboot+0xa2>
    while(buffer & ISM330DHCX_BOOT_BIT_MSK)
 8002d40:	7afb      	ldrb	r3, [r7, #11]
 8002d42:	b25b      	sxtb	r3, r3
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	dbeb      	blt.n	8002d20 <ISM330DHCX_Reboot+0x78>
        }
    }
    return ISM330DHCX_Ok;
 8002d48:	2300      	movs	r3, #0
}
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	3710      	adds	r7, #16
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	bd80      	pop	{r7, pc}

08002d52 <ISM330DHCX_Reset>:

int32_t ISM330DHCX_Reset(ISM330DHCX_Handle_t *Handle)
{
 8002d52:	b580      	push	{r7, lr}
 8002d54:	b084      	sub	sp, #16
 8002d56:	af00      	add	r7, sp, #0
 8002d58:	6078      	str	r0, [r7, #4]
	//Put Gyro / Accel in power down mode
	uint32_t ret = ISM330DHCX_Ok;
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	60fb      	str	r3, [r7, #12]
    uint8_t buffer = 0;
 8002d5e:	2300      	movs	r3, #0
 8002d60:	72fb      	strb	r3, [r7, #11]
    ret = ISM330DHCX_WriteReg(&Handle->Context, ISM330DHCX_REG_CTRL1_XL, &buffer, 1);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	f103 001c 	add.w	r0, r3, #28
 8002d68:	f107 020b 	add.w	r2, r7, #11
 8002d6c:	2301      	movs	r3, #1
 8002d6e:	2110      	movs	r1, #16
 8002d70:	f000 fb25 	bl	80033be <ISM330DHCX_WriteReg>
 8002d74:	4603      	mov	r3, r0
 8002d76:	60fb      	str	r3, [r7, #12]
    if(ret != ISM330DHCX_Ok)
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d001      	beq.n	8002d82 <ISM330DHCX_Reset+0x30>
    {
    	return ret;
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	e039      	b.n	8002df6 <ISM330DHCX_Reset+0xa4>
    }

    buffer = 0;
 8002d82:	2300      	movs	r3, #0
 8002d84:	72fb      	strb	r3, [r7, #11]
    ret = ISM330DHCX_WriteReg(&Handle->Context, ISM330DHCX_REG_CTRL2_G, &buffer, 1);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	f103 001c 	add.w	r0, r3, #28
 8002d8c:	f107 020b 	add.w	r2, r7, #11
 8002d90:	2301      	movs	r3, #1
 8002d92:	2111      	movs	r1, #17
 8002d94:	f000 fb13 	bl	80033be <ISM330DHCX_WriteReg>
 8002d98:	4603      	mov	r3, r0
 8002d9a:	60fb      	str	r3, [r7, #12]
    if(ret != ISM330DHCX_Ok)
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d001      	beq.n	8002da6 <ISM330DHCX_Reset+0x54>
    {
    	return ret;
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	e027      	b.n	8002df6 <ISM330DHCX_Reset+0xa4>
    }
	//Set SW Reset bit in CTRL3
    buffer = ISM330DHCX_ResetSignal;
 8002da6:	2301      	movs	r3, #1
 8002da8:	72fb      	strb	r3, [r7, #11]
    ret = ISM330DHCX_WriteReg(&Handle->Context, ISM330DHCX_REG_CTRL3_C, &buffer, 1);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	f103 001c 	add.w	r0, r3, #28
 8002db0:	f107 020b 	add.w	r2, r7, #11
 8002db4:	2301      	movs	r3, #1
 8002db6:	2112      	movs	r1, #18
 8002db8:	f000 fb01 	bl	80033be <ISM330DHCX_WriteReg>
 8002dbc:	4603      	mov	r3, r0
 8002dbe:	60fb      	str	r3, [r7, #12]
    if(ret != ISM330DHCX_Ok)
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d011      	beq.n	8002dea <ISM330DHCX_Reset+0x98>
    {
    	return ret;
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	e015      	b.n	8002df6 <ISM330DHCX_Reset+0xa4>
    }
	//Poll SW Reset bit
    while(buffer & ISM330DHCX_ResetSignal)
    {
        ret = ISM330DHCX_ReadReg(&Handle->Context, ISM330DHCX_REG_CTRL3_C, &buffer, 1);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	f103 001c 	add.w	r0, r3, #28
 8002dd0:	f107 020b 	add.w	r2, r7, #11
 8002dd4:	2301      	movs	r3, #1
 8002dd6:	2112      	movs	r1, #18
 8002dd8:	f000 fac8 	bl	800336c <ISM330DHCX_ReadReg>
 8002ddc:	4603      	mov	r3, r0
 8002dde:	60fb      	str	r3, [r7, #12]
        if(ret != ISM330DHCX_Ok)
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d001      	beq.n	8002dea <ISM330DHCX_Reset+0x98>
        {
        	return ret;
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	e005      	b.n	8002df6 <ISM330DHCX_Reset+0xa4>
    while(buffer & ISM330DHCX_ResetSignal)
 8002dea:	7afb      	ldrb	r3, [r7, #11]
 8002dec:	f003 0301 	and.w	r3, r3, #1
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d1ea      	bne.n	8002dca <ISM330DHCX_Reset+0x78>
        }
    }
    return ISM330DHCX_Ok;
 8002df4:	2300      	movs	r3, #0
}
 8002df6:	4618      	mov	r0, r3
 8002df8:	3710      	adds	r7, #16
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	bd80      	pop	{r7, pc}

08002dfe <ISM330DHCX_ReadWrapper>:

static int32_t ISM330DHCX_ReadWrapper(void *Handle, uint8_t Reg, uint8_t *Buffer, uint8_t Length)
{
 8002dfe:	b580      	push	{r7, lr}
 8002e00:	b086      	sub	sp, #24
 8002e02:	af00      	add	r7, sp, #0
 8002e04:	60f8      	str	r0, [r7, #12]
 8002e06:	607a      	str	r2, [r7, #4]
 8002e08:	461a      	mov	r2, r3
 8002e0a:	460b      	mov	r3, r1
 8002e0c:	72fb      	strb	r3, [r7, #11]
 8002e0e:	4613      	mov	r3, r2
 8002e10:	72bb      	strb	r3, [r7, #10]
    ISM330DHCX_Handle_t *DevicePtr = (ISM330DHCX_Handle_t*)Handle;
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	617b      	str	r3, [r7, #20]
    if(DevicePtr->IO.Read != NULL)
 8002e16:	697b      	ldr	r3, [r7, #20]
 8002e18:	689b      	ldr	r3, [r3, #8]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d007      	beq.n	8002e2e <ISM330DHCX_ReadWrapper+0x30>
    {
        return DevicePtr->IO.Read(Reg,Buffer,Length);
 8002e1e:	697b      	ldr	r3, [r7, #20]
 8002e20:	689b      	ldr	r3, [r3, #8]
 8002e22:	7aba      	ldrb	r2, [r7, #10]
 8002e24:	7af8      	ldrb	r0, [r7, #11]
 8002e26:	6879      	ldr	r1, [r7, #4]
 8002e28:	4798      	blx	r3
 8002e2a:	4603      	mov	r3, r0
 8002e2c:	e001      	b.n	8002e32 <ISM330DHCX_ReadWrapper+0x34>
    }
    return ISM330DHCX_ReadRegErr;
 8002e2e:	f06f 0301 	mvn.w	r3, #1
}
 8002e32:	4618      	mov	r0, r3
 8002e34:	3718      	adds	r7, #24
 8002e36:	46bd      	mov	sp, r7
 8002e38:	bd80      	pop	{r7, pc}

08002e3a <ISM330DHCX_WriteWrapper>:

static int32_t ISM330DHCX_WriteWrapper(void *Handle, uint8_t Reg, uint8_t *Buffer, uint8_t Length)
{
 8002e3a:	b580      	push	{r7, lr}
 8002e3c:	b086      	sub	sp, #24
 8002e3e:	af00      	add	r7, sp, #0
 8002e40:	60f8      	str	r0, [r7, #12]
 8002e42:	607a      	str	r2, [r7, #4]
 8002e44:	461a      	mov	r2, r3
 8002e46:	460b      	mov	r3, r1
 8002e48:	72fb      	strb	r3, [r7, #11]
 8002e4a:	4613      	mov	r3, r2
 8002e4c:	72bb      	strb	r3, [r7, #10]
    ISM330DHCX_Handle_t *DevicePtr = (ISM330DHCX_Handle_t*)Handle;
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	617b      	str	r3, [r7, #20]
    if(DevicePtr->IO.Write != NULL)
 8002e52:	697b      	ldr	r3, [r7, #20]
 8002e54:	68db      	ldr	r3, [r3, #12]
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d007      	beq.n	8002e6a <ISM330DHCX_WriteWrapper+0x30>
    {
        return DevicePtr->IO.Write(Reg,Buffer,Length);
 8002e5a:	697b      	ldr	r3, [r7, #20]
 8002e5c:	68db      	ldr	r3, [r3, #12]
 8002e5e:	7aba      	ldrb	r2, [r7, #10]
 8002e60:	7af8      	ldrb	r0, [r7, #11]
 8002e62:	6879      	ldr	r1, [r7, #4]
 8002e64:	4798      	blx	r3
 8002e66:	4603      	mov	r3, r0
 8002e68:	e001      	b.n	8002e6e <ISM330DHCX_WriteWrapper+0x34>
    }
    return ISM330DHCX_ReadRegErr;
 8002e6a:	f06f 0301 	mvn.w	r3, #1
}
 8002e6e:	4618      	mov	r0, r3
 8002e70:	3718      	adds	r7, #24
 8002e72:	46bd      	mov	sp, r7
 8002e74:	bd80      	pop	{r7, pc}

08002e76 <ISM330DHCX_RegisterInit>:

static int32_t ISM330DHCX_RegisterInit(ISM330DHCX_Handle_t *Handle,ISM330DHCX_Init_Struct_t Settings)
{
 8002e76:	b084      	sub	sp, #16
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b086      	sub	sp, #24
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
 8002e80:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8002e84:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    int32_t ret = ISM330DHCX_Ok;
 8002e88:	2300      	movs	r3, #0
 8002e8a:	617b      	str	r3, [r7, #20]
    uint8_t buffer[12] = {0};
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	60bb      	str	r3, [r7, #8]
 8002e90:	f107 030c 	add.w	r3, r7, #12
 8002e94:	2200      	movs	r2, #0
 8002e96:	601a      	str	r2, [r3, #0]
 8002e98:	605a      	str	r2, [r3, #4]
    ISM330DHCX_Reboot(Handle);
 8002e9a:	6878      	ldr	r0, [r7, #4]
 8002e9c:	f7ff ff04 	bl	8002ca8 <ISM330DHCX_Reboot>
    ISM330DHCX_Reset(Handle);
 8002ea0:	6878      	ldr	r0, [r7, #4]
 8002ea2:	f7ff ff56 	bl	8002d52 <ISM330DHCX_Reset>

    buffer[0] = Settings.SDO_PU_EN | 0x3F;
 8002ea6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002eaa:	f043 033f 	orr.w	r3, r3, #63	; 0x3f
 8002eae:	b2db      	uxtb	r3, r3
 8002eb0:	723b      	strb	r3, [r7, #8]
    ret = ISM330DHCX_WriteReg(&Handle->Context, ISM330DHCX_REG_PIN_CTRL, buffer, 1);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	f103 001c 	add.w	r0, r3, #28
 8002eb8:	f107 0208 	add.w	r2, r7, #8
 8002ebc:	2301      	movs	r3, #1
 8002ebe:	2102      	movs	r1, #2
 8002ec0:	f000 fa7d 	bl	80033be <ISM330DHCX_WriteReg>
 8002ec4:	6178      	str	r0, [r7, #20]
    if(ret != ISM330DHCX_Ok)
 8002ec6:	697b      	ldr	r3, [r7, #20]
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d001      	beq.n	8002ed0 <ISM330DHCX_RegisterInit+0x5a>
    {
    	return ret;
 8002ecc:	697b      	ldr	r3, [r7, #20]
 8002ece:	e1b5      	b.n	800323c <ISM330DHCX_RegisterInit+0x3c6>
    }


    buffer[0] = Settings.WTM & 0x00FF; //WTM Threshold is a 9 bit number
 8002ed0:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8002ed2:	b2db      	uxtb	r3, r3
 8002ed4:	723b      	strb	r3, [r7, #8]
    ret = ISM330DHCX_WriteReg(&Handle->Context, ISM330DHCX_REG_FIFO_CTRL1, buffer, 1);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	f103 001c 	add.w	r0, r3, #28
 8002edc:	f107 0208 	add.w	r2, r7, #8
 8002ee0:	2301      	movs	r3, #1
 8002ee2:	2107      	movs	r1, #7
 8002ee4:	f000 fa6b 	bl	80033be <ISM330DHCX_WriteReg>
 8002ee8:	6178      	str	r0, [r7, #20]
    if(ret != ISM330DHCX_Ok)
 8002eea:	697b      	ldr	r3, [r7, #20]
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d001      	beq.n	8002ef4 <ISM330DHCX_RegisterInit+0x7e>
    {
    	return ret;
 8002ef0:	697b      	ldr	r3, [r7, #20]
 8002ef2:	e1a3      	b.n	800323c <ISM330DHCX_RegisterInit+0x3c6>
    }


    if(Settings.WTM > 0x00FF)
 8002ef4:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8002ef6:	2bff      	cmp	r3, #255	; 0xff
 8002ef8:	d906      	bls.n	8002f08 <ISM330DHCX_RegisterInit+0x92>
    {
    	buffer[0] = Settings.STOP_ON_WTM | 0x01;
 8002efa:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8002efe:	f043 0301 	orr.w	r3, r3, #1
 8002f02:	b2db      	uxtb	r3, r3
 8002f04:	723b      	strb	r3, [r7, #8]
 8002f06:	e002      	b.n	8002f0e <ISM330DHCX_RegisterInit+0x98>
    } else
    {
    	buffer[0] = Settings.STOP_ON_WTM;
 8002f08:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8002f0c:	723b      	strb	r3, [r7, #8]
    }
    ret = ISM330DHCX_WriteReg(&Handle->Context, ISM330DHCX_REG_FIFO_CTRL2, buffer, 1);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	f103 001c 	add.w	r0, r3, #28
 8002f14:	f107 0208 	add.w	r2, r7, #8
 8002f18:	2301      	movs	r3, #1
 8002f1a:	2108      	movs	r1, #8
 8002f1c:	f000 fa4f 	bl	80033be <ISM330DHCX_WriteReg>
 8002f20:	6178      	str	r0, [r7, #20]
    if(ret != ISM330DHCX_Ok)
 8002f22:	697b      	ldr	r3, [r7, #20]
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d001      	beq.n	8002f2c <ISM330DHCX_RegisterInit+0xb6>
    {
    	return ret;
 8002f28:	697b      	ldr	r3, [r7, #20]
 8002f2a:	e187      	b.n	800323c <ISM330DHCX_RegisterInit+0x3c6>
    }


    buffer[0] = Settings.BDR_GY | Settings.BDR_XL;
 8002f2c:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 8002f30:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002f34:	4313      	orrs	r3, r2
 8002f36:	b2db      	uxtb	r3, r3
 8002f38:	723b      	strb	r3, [r7, #8]
    ret = ISM330DHCX_WriteReg(&Handle->Context, ISM330DHCX_REG_FIFO_CTRL3, buffer, 1);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	f103 001c 	add.w	r0, r3, #28
 8002f40:	f107 0208 	add.w	r2, r7, #8
 8002f44:	2301      	movs	r3, #1
 8002f46:	2109      	movs	r1, #9
 8002f48:	f000 fa39 	bl	80033be <ISM330DHCX_WriteReg>
 8002f4c:	6178      	str	r0, [r7, #20]
    if(ret != ISM330DHCX_Ok)
 8002f4e:	697b      	ldr	r3, [r7, #20]
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d001      	beq.n	8002f58 <ISM330DHCX_RegisterInit+0xe2>
    {
    	return ret;
 8002f54:	697b      	ldr	r3, [r7, #20]
 8002f56:	e171      	b.n	800323c <ISM330DHCX_RegisterInit+0x3c6>
    }


    buffer[0] = Settings.DEC_TS_BATCH | Settings.ODR_T_BATCH | Settings.FIFO_MODE;
 8002f58:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8002f5c:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8002f60:	4313      	orrs	r3, r2
 8002f62:	b2da      	uxtb	r2, r3
 8002f64:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8002f68:	4313      	orrs	r3, r2
 8002f6a:	b2db      	uxtb	r3, r3
 8002f6c:	723b      	strb	r3, [r7, #8]
    ret = ISM330DHCX_WriteReg(&Handle->Context, ISM330DHCX_REG_FIFO_CTRL4, buffer, 1);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	f103 001c 	add.w	r0, r3, #28
 8002f74:	f107 0208 	add.w	r2, r7, #8
 8002f78:	2301      	movs	r3, #1
 8002f7a:	210a      	movs	r1, #10
 8002f7c:	f000 fa1f 	bl	80033be <ISM330DHCX_WriteReg>
 8002f80:	6178      	str	r0, [r7, #20]
    if(ret != ISM330DHCX_Ok)
 8002f82:	697b      	ldr	r3, [r7, #20]
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d001      	beq.n	8002f8c <ISM330DHCX_RegisterInit+0x116>
    {
    	return ret;
 8002f88:	697b      	ldr	r3, [r7, #20]
 8002f8a:	e157      	b.n	800323c <ISM330DHCX_RegisterInit+0x3c6>
    }


    buffer[0] = Settings.CNT_BDR_TH & 0x00FF;
 8002f8c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8002f8e:	b2db      	uxtb	r3, r3
 8002f90:	723b      	strb	r3, [r7, #8]
    ret = ISM330DHCX_WriteReg(&Handle->Context, ISM330DHCX_REG_COUNTER_BDR_REG2, buffer, 1);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	f103 001c 	add.w	r0, r3, #28
 8002f98:	f107 0208 	add.w	r2, r7, #8
 8002f9c:	2301      	movs	r3, #1
 8002f9e:	210c      	movs	r1, #12
 8002fa0:	f000 fa0d 	bl	80033be <ISM330DHCX_WriteReg>
 8002fa4:	6178      	str	r0, [r7, #20]
    if(ret != ISM330DHCX_Ok)
 8002fa6:	697b      	ldr	r3, [r7, #20]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d001      	beq.n	8002fb0 <ISM330DHCX_RegisterInit+0x13a>
    {
    	return ret;
 8002fac:	697b      	ldr	r3, [r7, #20]
 8002fae:	e145      	b.n	800323c <ISM330DHCX_RegisterInit+0x3c6>
    }


    buffer[0] = ((Settings.CNT_BDR_TH & 0x0700) >> 8) | Settings.dataready_pulsed | Settings.TRIG_COUNTER_BDR;
 8002fb0:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8002fb2:	121b      	asrs	r3, r3, #8
 8002fb4:	b25b      	sxtb	r3, r3
 8002fb6:	f003 0307 	and.w	r3, r3, #7
 8002fba:	b25a      	sxtb	r2, r3
 8002fbc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002fc0:	b25b      	sxtb	r3, r3
 8002fc2:	4313      	orrs	r3, r2
 8002fc4:	b25a      	sxtb	r2, r3
 8002fc6:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8002fca:	b25b      	sxtb	r3, r3
 8002fcc:	4313      	orrs	r3, r2
 8002fce:	b25b      	sxtb	r3, r3
 8002fd0:	b2db      	uxtb	r3, r3
 8002fd2:	723b      	strb	r3, [r7, #8]
    ret = ISM330DHCX_WriteReg(&Handle->Context, ISM330DHCX_REG_COUNTER_BDR_REG1, buffer, 1);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	f103 001c 	add.w	r0, r3, #28
 8002fda:	f107 0208 	add.w	r2, r7, #8
 8002fde:	2301      	movs	r3, #1
 8002fe0:	210b      	movs	r1, #11
 8002fe2:	f000 f9ec 	bl	80033be <ISM330DHCX_WriteReg>
 8002fe6:	6178      	str	r0, [r7, #20]
    if(ret != ISM330DHCX_Ok)
 8002fe8:	697b      	ldr	r3, [r7, #20]
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d001      	beq.n	8002ff2 <ISM330DHCX_RegisterInit+0x17c>
    {
    	return ret;
 8002fee:	697b      	ldr	r3, [r7, #20]
 8002ff0:	e124      	b.n	800323c <ISM330DHCX_RegisterInit+0x3c6>
    }


    buffer[0] = Settings.INT1_CTRL;
 8002ff2:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8002ff6:	723b      	strb	r3, [r7, #8]
    ret = ISM330DHCX_WriteReg(&Handle->Context, ISM330DHCX_REG_INT1_CTRL, buffer, 1);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	f103 001c 	add.w	r0, r3, #28
 8002ffe:	f107 0208 	add.w	r2, r7, #8
 8003002:	2301      	movs	r3, #1
 8003004:	210d      	movs	r1, #13
 8003006:	f000 f9da 	bl	80033be <ISM330DHCX_WriteReg>
 800300a:	6178      	str	r0, [r7, #20]
    if(ret != ISM330DHCX_Ok)
 800300c:	697b      	ldr	r3, [r7, #20]
 800300e:	2b00      	cmp	r3, #0
 8003010:	d001      	beq.n	8003016 <ISM330DHCX_RegisterInit+0x1a0>
    {
    	return ret;
 8003012:	697b      	ldr	r3, [r7, #20]
 8003014:	e112      	b.n	800323c <ISM330DHCX_RegisterInit+0x3c6>
    }


    buffer[0] = Settings.INT2_CTRL;
 8003016:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800301a:	723b      	strb	r3, [r7, #8]
    ret = ISM330DHCX_WriteReg(&Handle->Context, ISM330DHCX_REG_INT2_CTRL, buffer, 1);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	f103 001c 	add.w	r0, r3, #28
 8003022:	f107 0208 	add.w	r2, r7, #8
 8003026:	2301      	movs	r3, #1
 8003028:	210e      	movs	r1, #14
 800302a:	f000 f9c8 	bl	80033be <ISM330DHCX_WriteReg>
 800302e:	6178      	str	r0, [r7, #20]
    if(ret != ISM330DHCX_Ok)
 8003030:	697b      	ldr	r3, [r7, #20]
 8003032:	2b00      	cmp	r3, #0
 8003034:	d001      	beq.n	800303a <ISM330DHCX_RegisterInit+0x1c4>
    {
    	return ret;
 8003036:	697b      	ldr	r3, [r7, #20]
 8003038:	e100      	b.n	800323c <ISM330DHCX_RegisterInit+0x3c6>
    }


    buffer[0] = 0x40 | Settings.PP_OD | Settings.H_LACTIVE | Settings.SIM | Settings.IF_INC;
 800303a:	f897 2052 	ldrb.w	r2, [r7, #82]	; 0x52
 800303e:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
 8003042:	4313      	orrs	r3, r2
 8003044:	b2da      	uxtb	r2, r3
 8003046:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800304a:	4313      	orrs	r3, r2
 800304c:	b2da      	uxtb	r2, r3
 800304e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003052:	4313      	orrs	r3, r2
 8003054:	b2db      	uxtb	r3, r3
 8003056:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800305a:	b2db      	uxtb	r3, r3
 800305c:	723b      	strb	r3, [r7, #8]
    ret = ISM330DHCX_WriteReg(&Handle->Context, ISM330DHCX_REG_CTRL3_C, buffer, 1);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	f103 001c 	add.w	r0, r3, #28
 8003064:	f107 0208 	add.w	r2, r7, #8
 8003068:	2301      	movs	r3, #1
 800306a:	2112      	movs	r1, #18
 800306c:	f000 f9a7 	bl	80033be <ISM330DHCX_WriteReg>
 8003070:	6178      	str	r0, [r7, #20]
    if(ret != ISM330DHCX_Ok)
 8003072:	697b      	ldr	r3, [r7, #20]
 8003074:	2b00      	cmp	r3, #0
 8003076:	d001      	beq.n	800307c <ISM330DHCX_RegisterInit+0x206>
    {
    	return ret;
 8003078:	697b      	ldr	r3, [r7, #20]
 800307a:	e0df      	b.n	800323c <ISM330DHCX_RegisterInit+0x3c6>
    }


    buffer[0] = Settings.TriggerMode | Settings.XL_HM_MODE | Settings.USR_OFF_W | Settings.FTYPE;
 800307c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8003080:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8003084:	4313      	orrs	r3, r2
 8003086:	b2da      	uxtb	r2, r3
 8003088:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 800308c:	4313      	orrs	r3, r2
 800308e:	b2da      	uxtb	r2, r3
 8003090:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8003094:	4313      	orrs	r3, r2
 8003096:	b2db      	uxtb	r3, r3
 8003098:	723b      	strb	r3, [r7, #8]
    ret = ISM330DHCX_WriteReg(&Handle->Context, ISM330DHCX_REG_CTRL6_C, buffer, 1);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	f103 001c 	add.w	r0, r3, #28
 80030a0:	f107 0208 	add.w	r2, r7, #8
 80030a4:	2301      	movs	r3, #1
 80030a6:	2115      	movs	r1, #21
 80030a8:	f000 f989 	bl	80033be <ISM330DHCX_WriteReg>
 80030ac:	6178      	str	r0, [r7, #20]
    if(ret != ISM330DHCX_Ok)
 80030ae:	697b      	ldr	r3, [r7, #20]
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d001      	beq.n	80030b8 <ISM330DHCX_RegisterInit+0x242>
    {
    	return ret;
 80030b4:	697b      	ldr	r3, [r7, #20]
 80030b6:	e0c1      	b.n	800323c <ISM330DHCX_RegisterInit+0x3c6>
    }


    buffer[0] = Settings.G_HM_MODE | Settings.HP_EN_G | Settings.HPM_G | Settings.USR_OFF_ON_OUT;
 80030b8:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 80030bc:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 80030c0:	4313      	orrs	r3, r2
 80030c2:	b2da      	uxtb	r2, r3
 80030c4:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 80030c8:	4313      	orrs	r3, r2
 80030ca:	b2da      	uxtb	r2, r3
 80030cc:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 80030d0:	4313      	orrs	r3, r2
 80030d2:	b2db      	uxtb	r3, r3
 80030d4:	723b      	strb	r3, [r7, #8]
    ret = ISM330DHCX_WriteReg(&Handle->Context, ISM330DHCX_REG_CTRL7_G, buffer, 1);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	f103 001c 	add.w	r0, r3, #28
 80030dc:	f107 0208 	add.w	r2, r7, #8
 80030e0:	2301      	movs	r3, #1
 80030e2:	2116      	movs	r1, #22
 80030e4:	f000 f96b 	bl	80033be <ISM330DHCX_WriteReg>
 80030e8:	6178      	str	r0, [r7, #20]
    if(ret != ISM330DHCX_Ok)
 80030ea:	697b      	ldr	r3, [r7, #20]
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d001      	beq.n	80030f4 <ISM330DHCX_RegisterInit+0x27e>
    {
    	return ret;
 80030f0:	697b      	ldr	r3, [r7, #20]
 80030f2:	e0a3      	b.n	800323c <ISM330DHCX_RegisterInit+0x3c6>
    }


    buffer[0] = Settings.HPCF_XL | Settings.HP_REF_MODE_XL | Settings.FASTSETTL_MODE_XL | Settings.HP_SLOPE_XL_EN;
 80030f4:	f897 2040 	ldrb.w	r2, [r7, #64]	; 0x40
 80030f8:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80030fc:	4313      	orrs	r3, r2
 80030fe:	b2da      	uxtb	r2, r3
 8003100:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003104:	4313      	orrs	r3, r2
 8003106:	b2da      	uxtb	r2, r3
 8003108:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800310c:	4313      	orrs	r3, r2
 800310e:	b2db      	uxtb	r3, r3
 8003110:	723b      	strb	r3, [r7, #8]
    ret = ISM330DHCX_WriteReg(&Handle->Context, ISM330DHCX_REG_CTRL8_XL, buffer, 1);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	f103 001c 	add.w	r0, r3, #28
 8003118:	f107 0208 	add.w	r2, r7, #8
 800311c:	2301      	movs	r3, #1
 800311e:	2117      	movs	r1, #23
 8003120:	f000 f94d 	bl	80033be <ISM330DHCX_WriteReg>
 8003124:	6178      	str	r0, [r7, #20]
    if(ret != ISM330DHCX_Ok)
 8003126:	697b      	ldr	r3, [r7, #20]
 8003128:	2b00      	cmp	r3, #0
 800312a:	d001      	beq.n	8003130 <ISM330DHCX_RegisterInit+0x2ba>
    {
    	return ret;
 800312c:	697b      	ldr	r3, [r7, #20]
 800312e:	e085      	b.n	800323c <ISM330DHCX_RegisterInit+0x3c6>
    }


    buffer[0] = Settings.DEN_X | Settings.DEN_Y | Settings.DEN_Z | Settings.DEN_XL_G | Settings.DEN_XL_EN | Settings.DEN_LH;
 8003130:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8003134:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8003138:	4313      	orrs	r3, r2
 800313a:	b2da      	uxtb	r2, r3
 800313c:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8003140:	4313      	orrs	r3, r2
 8003142:	b2da      	uxtb	r2, r3
 8003144:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003148:	4313      	orrs	r3, r2
 800314a:	b2da      	uxtb	r2, r3
 800314c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8003150:	4313      	orrs	r3, r2
 8003152:	b2da      	uxtb	r2, r3
 8003154:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003158:	4313      	orrs	r3, r2
 800315a:	b2db      	uxtb	r3, r3
 800315c:	723b      	strb	r3, [r7, #8]
    ret = ISM330DHCX_WriteReg(&Handle->Context, ISM330DHCX_REG_CTRL9_XL, buffer, 1);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	f103 001c 	add.w	r0, r3, #28
 8003164:	f107 0208 	add.w	r2, r7, #8
 8003168:	2301      	movs	r3, #1
 800316a:	2118      	movs	r1, #24
 800316c:	f000 f927 	bl	80033be <ISM330DHCX_WriteReg>
 8003170:	6178      	str	r0, [r7, #20]
    if(ret != ISM330DHCX_Ok)
 8003172:	697b      	ldr	r3, [r7, #20]
 8003174:	2b00      	cmp	r3, #0
 8003176:	d001      	beq.n	800317c <ISM330DHCX_RegisterInit+0x306>
    {
    	return ret;
 8003178:	697b      	ldr	r3, [r7, #20]
 800317a:	e05f      	b.n	800323c <ISM330DHCX_RegisterInit+0x3c6>
    }


    buffer[0] = Settings.TIMESTAMP_EN;
 800317c:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8003180:	723b      	strb	r3, [r7, #8]
    ret = ISM330DHCX_WriteReg(&Handle->Context, ISM330DHCX_REG_CTRL10_C, buffer, 1);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	f103 001c 	add.w	r0, r3, #28
 8003188:	f107 0208 	add.w	r2, r7, #8
 800318c:	2301      	movs	r3, #1
 800318e:	2119      	movs	r1, #25
 8003190:	f000 f915 	bl	80033be <ISM330DHCX_WriteReg>
 8003194:	6178      	str	r0, [r7, #20]
    if(ret != ISM330DHCX_Ok)
 8003196:	697b      	ldr	r3, [r7, #20]
 8003198:	2b00      	cmp	r3, #0
 800319a:	d001      	beq.n	80031a0 <ISM330DHCX_RegisterInit+0x32a>
    {
    	return ret;
 800319c:	697b      	ldr	r3, [r7, #20]
 800319e:	e04d      	b.n	800323c <ISM330DHCX_RegisterInit+0x3c6>
    }


    buffer[0] = Settings.ODR_XL | Settings.FS_XL | Settings.LPF2_XL_EN;
 80031a0:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 80031a4:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 80031a8:	4313      	orrs	r3, r2
 80031aa:	b2da      	uxtb	r2, r3
 80031ac:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80031b0:	4313      	orrs	r3, r2
 80031b2:	b2db      	uxtb	r3, r3
 80031b4:	723b      	strb	r3, [r7, #8]
    ret = ISM330DHCX_WriteReg(&Handle->Context, ISM330DHCX_REG_CTRL1_XL, buffer, 1);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	f103 001c 	add.w	r0, r3, #28
 80031bc:	f107 0208 	add.w	r2, r7, #8
 80031c0:	2301      	movs	r3, #1
 80031c2:	2110      	movs	r1, #16
 80031c4:	f000 f8fb 	bl	80033be <ISM330DHCX_WriteReg>
 80031c8:	6178      	str	r0, [r7, #20]
    if(ret != ISM330DHCX_Ok)
 80031ca:	697b      	ldr	r3, [r7, #20]
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d001      	beq.n	80031d4 <ISM330DHCX_RegisterInit+0x35e>
    {
    	return ret;
 80031d0:	697b      	ldr	r3, [r7, #20]
 80031d2:	e033      	b.n	800323c <ISM330DHCX_RegisterInit+0x3c6>
    }


    buffer[0] = Settings.ODR_G | Settings.FS_G;
 80031d4:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 80031d8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80031dc:	4313      	orrs	r3, r2
 80031de:	b2db      	uxtb	r3, r3
 80031e0:	723b      	strb	r3, [r7, #8]
    ret = ISM330DHCX_WriteReg(&Handle->Context, ISM330DHCX_REG_CTRL2_G, buffer, 1);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	f103 001c 	add.w	r0, r3, #28
 80031e8:	f107 0208 	add.w	r2, r7, #8
 80031ec:	2301      	movs	r3, #1
 80031ee:	2111      	movs	r1, #17
 80031f0:	f000 f8e5 	bl	80033be <ISM330DHCX_WriteReg>
 80031f4:	6178      	str	r0, [r7, #20]
    if(ret != ISM330DHCX_Ok)
 80031f6:	697b      	ldr	r3, [r7, #20]
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d001      	beq.n	8003200 <ISM330DHCX_RegisterInit+0x38a>
    {
    	return ret;
 80031fc:	697b      	ldr	r3, [r7, #20]
 80031fe:	e01d      	b.n	800323c <ISM330DHCX_RegisterInit+0x3c6>
    }

    ret = ISM330DHCX_ReadReg(&Handle->Context, ISM330DHCX_REG_OUTX_L_G, buffer, 1);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	f103 001c 	add.w	r0, r3, #28
 8003206:	f107 0208 	add.w	r2, r7, #8
 800320a:	2301      	movs	r3, #1
 800320c:	2122      	movs	r1, #34	; 0x22
 800320e:	f000 f8ad 	bl	800336c <ISM330DHCX_ReadReg>
 8003212:	6178      	str	r0, [r7, #20]
    //Discard Data that was collected during configuration
    ret = ISM330DHCX_ReadReg(&Handle->Context, ISM330DHCX_REG_OUTX_L_G, buffer, 12);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	f103 001c 	add.w	r0, r3, #28
 800321a:	f107 0208 	add.w	r2, r7, #8
 800321e:	230c      	movs	r3, #12
 8003220:	2122      	movs	r1, #34	; 0x22
 8003222:	f000 f8a3 	bl	800336c <ISM330DHCX_ReadReg>
 8003226:	6178      	str	r0, [r7, #20]
    if(ret != ISM330DHCX_Ok)
 8003228:	697b      	ldr	r3, [r7, #20]
 800322a:	2b00      	cmp	r3, #0
 800322c:	d001      	beq.n	8003232 <ISM330DHCX_RegisterInit+0x3bc>
    {
    	return ret;
 800322e:	697b      	ldr	r3, [r7, #20]
 8003230:	e004      	b.n	800323c <ISM330DHCX_RegisterInit+0x3c6>
    }
    Handle->Status = ISM330DHCX_Initialized;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	2201      	movs	r2, #1
 8003236:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return ISM330DHCX_Ok;
 800323a:	2300      	movs	r3, #0
}
 800323c:	4618      	mov	r0, r3
 800323e:	3718      	adds	r7, #24
 8003240:	46bd      	mov	sp, r7
 8003242:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003246:	b004      	add	sp, #16
 8003248:	4770      	bx	lr
	...

0800324c <ConvertXLData>:

static void ConvertXLData(ISM330DHCX_AccelFullscale_t AccelResolution, int16_t *buffer, float *data)
{
 800324c:	b480      	push	{r7}
 800324e:	b087      	sub	sp, #28
 8003250:	af00      	add	r7, sp, #0
 8003252:	4603      	mov	r3, r0
 8003254:	60b9      	str	r1, [r7, #8]
 8003256:	607a      	str	r2, [r7, #4]
 8003258:	73fb      	strb	r3, [r7, #15]
      float ConversionFactor = 0;
 800325a:	f04f 0300 	mov.w	r3, #0
 800325e:	617b      	str	r3, [r7, #20]
      if(AccelResolution == ISM330DHCX_XL_2g)
 8003260:	7bfb      	ldrb	r3, [r7, #15]
 8003262:	2b00      	cmp	r3, #0
 8003264:	d102      	bne.n	800326c <ConvertXLData+0x20>
      {
    	  ConversionFactor = 0.061;
 8003266:	4b14      	ldr	r3, [pc, #80]	; (80032b8 <ConvertXLData+0x6c>)
 8003268:	617b      	str	r3, [r7, #20]
 800326a:	e00d      	b.n	8003288 <ConvertXLData+0x3c>
      }else if(AccelResolution == ISM330DHCX_XL_16g)
 800326c:	7bfb      	ldrb	r3, [r7, #15]
 800326e:	2b04      	cmp	r3, #4
 8003270:	d102      	bne.n	8003278 <ConvertXLData+0x2c>
	  {
    	  ConversionFactor = 0.488;
 8003272:	4b12      	ldr	r3, [pc, #72]	; (80032bc <ConvertXLData+0x70>)
 8003274:	617b      	str	r3, [r7, #20]
 8003276:	e007      	b.n	8003288 <ConvertXLData+0x3c>
	  }else if(AccelResolution == ISM330DHCX_XL_8g)
 8003278:	7bfb      	ldrb	r3, [r7, #15]
 800327a:	2b0c      	cmp	r3, #12
 800327c:	d102      	bne.n	8003284 <ConvertXLData+0x38>
	  {
		  ConversionFactor = 0.244;
 800327e:	4b10      	ldr	r3, [pc, #64]	; (80032c0 <ConvertXLData+0x74>)
 8003280:	617b      	str	r3, [r7, #20]
 8003282:	e001      	b.n	8003288 <ConvertXLData+0x3c>
	  }else //4g
	  {
		  ConversionFactor = 0.122;
 8003284:	4b0f      	ldr	r3, [pc, #60]	; (80032c4 <ConvertXLData+0x78>)
 8003286:	617b      	str	r3, [r7, #20]
	  }
      *data = (ConversionFactor * (*buffer)) / 1000.0; //Div by 1000 to convert g, not mg
 8003288:	68bb      	ldr	r3, [r7, #8]
 800328a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800328e:	ee07 3a90 	vmov	s15, r3
 8003292:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003296:	edd7 7a05 	vldr	s15, [r7, #20]
 800329a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800329e:	eddf 6a0a 	vldr	s13, [pc, #40]	; 80032c8 <ConvertXLData+0x7c>
 80032a2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	edc3 7a00 	vstr	s15, [r3]
}
 80032ac:	bf00      	nop
 80032ae:	371c      	adds	r7, #28
 80032b0:	46bd      	mov	sp, r7
 80032b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b6:	4770      	bx	lr
 80032b8:	3d79db23 	.word	0x3d79db23
 80032bc:	3ef9db23 	.word	0x3ef9db23
 80032c0:	3e79db23 	.word	0x3e79db23
 80032c4:	3df9db23 	.word	0x3df9db23
 80032c8:	447a0000 	.word	0x447a0000

080032cc <ConvertGData>:

static void ConvertGData(ISM330DHCX_GyroFullScale_t GyroResolution, int16_t *buffer, float *data)
{
 80032cc:	b480      	push	{r7}
 80032ce:	b087      	sub	sp, #28
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	4603      	mov	r3, r0
 80032d4:	60b9      	str	r1, [r7, #8]
 80032d6:	607a      	str	r2, [r7, #4]
 80032d8:	73fb      	strb	r3, [r7, #15]

      float ConversionFactor = 0;
 80032da:	f04f 0300 	mov.w	r3, #0
 80032de:	617b      	str	r3, [r7, #20]
      if(GyroResolution == ISM330DHCX_G_125DPS)
 80032e0:	7bfb      	ldrb	r3, [r7, #15]
 80032e2:	2b02      	cmp	r3, #2
 80032e4:	d102      	bne.n	80032ec <ConvertGData+0x20>
      {
    	  ConversionFactor = 0.004375;
 80032e6:	4b1a      	ldr	r3, [pc, #104]	; (8003350 <ConvertGData+0x84>)
 80032e8:	617b      	str	r3, [r7, #20]
 80032ea:	e019      	b.n	8003320 <ConvertGData+0x54>
      }else if(GyroResolution == ISM330DHCX_G_250DPS)
 80032ec:	7bfb      	ldrb	r3, [r7, #15]
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d102      	bne.n	80032f8 <ConvertGData+0x2c>
	  {
    	  ConversionFactor = 0.00875;
 80032f2:	4b18      	ldr	r3, [pc, #96]	; (8003354 <ConvertGData+0x88>)
 80032f4:	617b      	str	r3, [r7, #20]
 80032f6:	e013      	b.n	8003320 <ConvertGData+0x54>
	  }else if(GyroResolution == ISM330DHCX_G_500DPS)
 80032f8:	7bfb      	ldrb	r3, [r7, #15]
 80032fa:	2b04      	cmp	r3, #4
 80032fc:	d102      	bne.n	8003304 <ConvertGData+0x38>
	  {
		  ConversionFactor = 0.0175;
 80032fe:	4b16      	ldr	r3, [pc, #88]	; (8003358 <ConvertGData+0x8c>)
 8003300:	617b      	str	r3, [r7, #20]
 8003302:	e00d      	b.n	8003320 <ConvertGData+0x54>
	  }else if(GyroResolution == ISM330DHCX_G_1000DPS)
 8003304:	7bfb      	ldrb	r3, [r7, #15]
 8003306:	2b08      	cmp	r3, #8
 8003308:	d102      	bne.n	8003310 <ConvertGData+0x44>
	  {
		  ConversionFactor = 0.035;
 800330a:	4b14      	ldr	r3, [pc, #80]	; (800335c <ConvertGData+0x90>)
 800330c:	617b      	str	r3, [r7, #20]
 800330e:	e007      	b.n	8003320 <ConvertGData+0x54>
	  }else if(GyroResolution == ISM330DHCX_G_2000DPS)
 8003310:	7bfb      	ldrb	r3, [r7, #15]
 8003312:	2b0c      	cmp	r3, #12
 8003314:	d102      	bne.n	800331c <ConvertGData+0x50>
	  {
		  ConversionFactor = 0.070;
 8003316:	4b12      	ldr	r3, [pc, #72]	; (8003360 <ConvertGData+0x94>)
 8003318:	617b      	str	r3, [r7, #20]
 800331a:	e001      	b.n	8003320 <ConvertGData+0x54>
	  }else //4000DPS
	  {
		  ConversionFactor = 0.140;
 800331c:	4b11      	ldr	r3, [pc, #68]	; (8003364 <ConvertGData+0x98>)
 800331e:	617b      	str	r3, [r7, #20]
	  }
      *data = ConversionFactor * (*buffer) / 1000.0; //Div by 1000 to convert to DPS from mDPS
 8003320:	68bb      	ldr	r3, [r7, #8]
 8003322:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003326:	ee07 3a90 	vmov	s15, r3
 800332a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800332e:	edd7 7a05 	vldr	s15, [r7, #20]
 8003332:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003336:	eddf 6a0c 	vldr	s13, [pc, #48]	; 8003368 <ConvertGData+0x9c>
 800333a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	edc3 7a00 	vstr	s15, [r3]
}
 8003344:	bf00      	nop
 8003346:	371c      	adds	r7, #28
 8003348:	46bd      	mov	sp, r7
 800334a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334e:	4770      	bx	lr
 8003350:	3b8f5c29 	.word	0x3b8f5c29
 8003354:	3c0f5c29 	.word	0x3c0f5c29
 8003358:	3c8f5c29 	.word	0x3c8f5c29
 800335c:	3d0f5c29 	.word	0x3d0f5c29
 8003360:	3d8f5c29 	.word	0x3d8f5c29
 8003364:	3e0f5c29 	.word	0x3e0f5c29
 8003368:	447a0000 	.word	0x447a0000

0800336c <ISM330DHCX_ReadReg>:
#include <stddef.h>

static int32_t ISM330DHCX_ValidateParams(uint8_t Reg, uint8_t *Buffer, uint8_t Length);

int32_t ISM330DHCX_ReadReg(ISM330DHCX_Context_t *Context, uint8_t Reg, uint8_t *Buffer, uint8_t Length)
{
 800336c:	b590      	push	{r4, r7, lr}
 800336e:	b087      	sub	sp, #28
 8003370:	af00      	add	r7, sp, #0
 8003372:	60f8      	str	r0, [r7, #12]
 8003374:	607a      	str	r2, [r7, #4]
 8003376:	461a      	mov	r2, r3
 8003378:	460b      	mov	r3, r1
 800337a:	72fb      	strb	r3, [r7, #11]
 800337c:	4613      	mov	r3, r2
 800337e:	72bb      	strb	r3, [r7, #10]
	if(Context->Read == NULL)
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	689b      	ldr	r3, [r3, #8]
 8003384:	2b00      	cmp	r3, #0
 8003386:	d101      	bne.n	800338c <ISM330DHCX_ReadReg+0x20>
	{
		return ISM330DHCX_REG_CONTEXT_ERR;
 8003388:	2308      	movs	r3, #8
 800338a:	e014      	b.n	80033b6 <ISM330DHCX_ReadReg+0x4a>
	}

	int32_t ret = ISM330DHCX_ValidateParams(Reg,Buffer,Length);
 800338c:	7aba      	ldrb	r2, [r7, #10]
 800338e:	7afb      	ldrb	r3, [r7, #11]
 8003390:	6879      	ldr	r1, [r7, #4]
 8003392:	4618      	mov	r0, r3
 8003394:	f000 f83c 	bl	8003410 <ISM330DHCX_ValidateParams>
 8003398:	6178      	str	r0, [r7, #20]
	if(ret != ISM330DHCX_REG_NO_ERR)
 800339a:	697b      	ldr	r3, [r7, #20]
 800339c:	2b00      	cmp	r3, #0
 800339e:	d001      	beq.n	80033a4 <ISM330DHCX_ReadReg+0x38>
	{
        return ret;
 80033a0:	697b      	ldr	r3, [r7, #20]
 80033a2:	e008      	b.n	80033b6 <ISM330DHCX_ReadReg+0x4a>
	}

	return Context->Read(Context->Handle, Reg, Buffer, Length);
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	689c      	ldr	r4, [r3, #8]
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	6818      	ldr	r0, [r3, #0]
 80033ac:	7abb      	ldrb	r3, [r7, #10]
 80033ae:	7af9      	ldrb	r1, [r7, #11]
 80033b0:	687a      	ldr	r2, [r7, #4]
 80033b2:	47a0      	blx	r4
 80033b4:	4603      	mov	r3, r0
}
 80033b6:	4618      	mov	r0, r3
 80033b8:	371c      	adds	r7, #28
 80033ba:	46bd      	mov	sp, r7
 80033bc:	bd90      	pop	{r4, r7, pc}

080033be <ISM330DHCX_WriteReg>:

int32_t ISM330DHCX_WriteReg(ISM330DHCX_Context_t *Context, uint8_t Reg, uint8_t *Buffer, uint8_t Length)
{
 80033be:	b590      	push	{r4, r7, lr}
 80033c0:	b087      	sub	sp, #28
 80033c2:	af00      	add	r7, sp, #0
 80033c4:	60f8      	str	r0, [r7, #12]
 80033c6:	607a      	str	r2, [r7, #4]
 80033c8:	461a      	mov	r2, r3
 80033ca:	460b      	mov	r3, r1
 80033cc:	72fb      	strb	r3, [r7, #11]
 80033ce:	4613      	mov	r3, r2
 80033d0:	72bb      	strb	r3, [r7, #10]
	if(Context->Write == NULL)
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	685b      	ldr	r3, [r3, #4]
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d101      	bne.n	80033de <ISM330DHCX_WriteReg+0x20>
	{
		return ISM330DHCX_REG_CONTEXT_ERR;
 80033da:	2308      	movs	r3, #8
 80033dc:	e014      	b.n	8003408 <ISM330DHCX_WriteReg+0x4a>
	}

	int32_t ret = ISM330DHCX_ValidateParams(Reg,Buffer,Length);
 80033de:	7aba      	ldrb	r2, [r7, #10]
 80033e0:	7afb      	ldrb	r3, [r7, #11]
 80033e2:	6879      	ldr	r1, [r7, #4]
 80033e4:	4618      	mov	r0, r3
 80033e6:	f000 f813 	bl	8003410 <ISM330DHCX_ValidateParams>
 80033ea:	6178      	str	r0, [r7, #20]
	if(ret != ISM330DHCX_REG_NO_ERR)
 80033ec:	697b      	ldr	r3, [r7, #20]
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d001      	beq.n	80033f6 <ISM330DHCX_WriteReg+0x38>
	{
        return ret;
 80033f2:	697b      	ldr	r3, [r7, #20]
 80033f4:	e008      	b.n	8003408 <ISM330DHCX_WriteReg+0x4a>
	}

	return Context->Write(Context->Handle, Reg, Buffer, Length);
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	685c      	ldr	r4, [r3, #4]
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	6818      	ldr	r0, [r3, #0]
 80033fe:	7abb      	ldrb	r3, [r7, #10]
 8003400:	7af9      	ldrb	r1, [r7, #11]
 8003402:	687a      	ldr	r2, [r7, #4]
 8003404:	47a0      	blx	r4
 8003406:	4603      	mov	r3, r0
}
 8003408:	4618      	mov	r0, r3
 800340a:	371c      	adds	r7, #28
 800340c:	46bd      	mov	sp, r7
 800340e:	bd90      	pop	{r4, r7, pc}

08003410 <ISM330DHCX_ValidateParams>:

static int32_t ISM330DHCX_ValidateParams(uint8_t Reg, uint8_t *Buffer, uint8_t Length)
{
 8003410:	b480      	push	{r7}
 8003412:	b085      	sub	sp, #20
 8003414:	af00      	add	r7, sp, #0
 8003416:	4603      	mov	r3, r0
 8003418:	6039      	str	r1, [r7, #0]
 800341a:	71fb      	strb	r3, [r7, #7]
 800341c:	4613      	mov	r3, r2
 800341e:	71bb      	strb	r3, [r7, #6]
	int32_t ret = 0;
 8003420:	2300      	movs	r3, #0
 8003422:	60fb      	str	r3, [r7, #12]
	if(Reg < ISM330DHCX_REG_FUNC_CFG_ACCESS || Reg > ISM330DHCX_REG_FIFO_OUT_Z_H)
 8003424:	79fb      	ldrb	r3, [r7, #7]
 8003426:	2b00      	cmp	r3, #0
 8003428:	d002      	beq.n	8003430 <ISM330DHCX_ValidateParams+0x20>
 800342a:	79fb      	ldrb	r3, [r7, #7]
 800342c:	2b7e      	cmp	r3, #126	; 0x7e
 800342e:	d903      	bls.n	8003438 <ISM330DHCX_ValidateParams+0x28>
	{
		ret |= ISM330DHCX_REG_PARAM_ERR;
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	f043 0301 	orr.w	r3, r3, #1
 8003436:	60fb      	str	r3, [r7, #12]
	}

	if(Buffer == NULL)
 8003438:	683b      	ldr	r3, [r7, #0]
 800343a:	2b00      	cmp	r3, #0
 800343c:	d103      	bne.n	8003446 <ISM330DHCX_ValidateParams+0x36>
	{
        ret |= ISM330DHCX_BUFFER_PARAM_ERR;
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	f043 0302 	orr.w	r3, r3, #2
 8003444:	60fb      	str	r3, [r7, #12]
	}

	if( Length == 0 || Length > (ISM330DHCX_REG_FIFO_OUT_Z_H - ISM330DHCX_REG_FUNC_CFG_ACCESS))
 8003446:	79bb      	ldrb	r3, [r7, #6]
 8003448:	2b00      	cmp	r3, #0
 800344a:	d002      	beq.n	8003452 <ISM330DHCX_ValidateParams+0x42>
 800344c:	79bb      	ldrb	r3, [r7, #6]
 800344e:	2b7d      	cmp	r3, #125	; 0x7d
 8003450:	d903      	bls.n	800345a <ISM330DHCX_ValidateParams+0x4a>
	{
		ret |= ISM330DHCX_LENGTH_PARAM_ERR;
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	f043 0304 	orr.w	r3, r3, #4
 8003458:	60fb      	str	r3, [r7, #12]
	}

	return ret;
 800345a:	68fb      	ldr	r3, [r7, #12]
}
 800345c:	4618      	mov	r0, r3
 800345e:	3714      	adds	r7, #20
 8003460:	46bd      	mov	sp, r7
 8003462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003466:	4770      	bx	lr

08003468 <LPS22HH_Init>:
static int32_t LPS22HH_ReadRegWrapper(void *Handle,uint8_t Reg, uint8_t *Buffer, uint8_t Length);
static int32_t LPS22HH_RegisterInit(LPS22HH_Handle_t *Handle, LPS22HH_Init_Struct_t Settings);
static void ConvertPressureData(uint8_t *buffer, float *pressure);

int32_t LPS22HH_Init(LPS22HH_Handle_t *Handle, LPS22HH_Init_Struct_t Settings, LPS22HH_IO_t *IO)
{
 8003468:	b084      	sub	sp, #16
 800346a:	b5b0      	push	{r4, r5, r7, lr}
 800346c:	b086      	sub	sp, #24
 800346e:	af02      	add	r7, sp, #8
 8003470:	6078      	str	r0, [r7, #4]
 8003472:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8003476:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	if(Handle->Status != LPS22HH_Initialized)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003480:	2b01      	cmp	r3, #1
 8003482:	d04a      	beq.n	800351a <LPS22HH_Init+0xb2>
	    {

	    if(Handle == NULL)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2b00      	cmp	r3, #0
 8003488:	d102      	bne.n	8003490 <LPS22HH_Init+0x28>
	    {
		    return LPS22HH_HandleError;
 800348a:	f04f 33ff 	mov.w	r3, #4294967295
 800348e:	e045      	b.n	800351c <LPS22HH_Init+0xb4>
	    }

	    if(IO->Write == NULL || IO->Read == NULL || IO->GetTick == NULL)
 8003490:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003492:	68db      	ldr	r3, [r3, #12]
 8003494:	2b00      	cmp	r3, #0
 8003496:	d007      	beq.n	80034a8 <LPS22HH_Init+0x40>
 8003498:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800349a:	689b      	ldr	r3, [r3, #8]
 800349c:	2b00      	cmp	r3, #0
 800349e:	d003      	beq.n	80034a8 <LPS22HH_Init+0x40>
 80034a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034a2:	691b      	ldr	r3, [r3, #16]
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d102      	bne.n	80034ae <LPS22HH_Init+0x46>
	    {
            return LPS22HH_IOError;
 80034a8:	f06f 0301 	mvn.w	r3, #1
 80034ac:	e036      	b.n	800351c <LPS22HH_Init+0xb4>
	    }

	    Handle->IO = *IO;
 80034ae:	687a      	ldr	r2, [r7, #4]
 80034b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034b2:	4614      	mov	r4, r2
 80034b4:	461d      	mov	r5, r3
 80034b6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80034b8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80034ba:	e895 0003 	ldmia.w	r5, {r0, r1}
 80034be:	e884 0003 	stmia.w	r4, {r0, r1}
	    Handle->DataRate = Settings.ODR;
 80034c2:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	    Handle->Context.Handle = Handle;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	687a      	ldr	r2, [r7, #4]
 80034d0:	619a      	str	r2, [r3, #24]
	    Handle->Context.Read = LPS22HH_ReadRegWrapper;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	4a15      	ldr	r2, [pc, #84]	; (800352c <LPS22HH_Init+0xc4>)
 80034d6:	61da      	str	r2, [r3, #28]
	    Handle->Context.Write = LPS22HH_WriteRegWrapper;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	4a15      	ldr	r2, [pc, #84]	; (8003530 <LPS22HH_Init+0xc8>)
 80034dc:	621a      	str	r2, [r3, #32]

	    if(Handle->IO.Init != NULL)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d002      	beq.n	80034ec <LPS22HH_Init+0x84>
	    {
	    	Handle->IO.Init();
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	4798      	blx	r3
	    }

        int32_t ret = LPS22HH_RegisterInit(Handle, Settings);
 80034ec:	466a      	mov	r2, sp
 80034ee:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80034f2:	e893 0003 	ldmia.w	r3, {r0, r1}
 80034f6:	e882 0003 	stmia.w	r2, {r0, r1}
 80034fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80034fe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003500:	6878      	ldr	r0, [r7, #4]
 8003502:	f000 f95f 	bl	80037c4 <LPS22HH_RegisterInit>
 8003506:	60f8      	str	r0, [r7, #12]
        if(ret != LPS22HH_Ok)
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	2b00      	cmp	r3, #0
 800350c:	d001      	beq.n	8003512 <LPS22HH_Init+0xaa>
        {
        	return ret;
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	e004      	b.n	800351c <LPS22HH_Init+0xb4>
        }

	    Handle->Status = LPS22HH_Initialized;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	2201      	movs	r2, #1
 8003516:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	    }
	return LPS22HH_Ok;
 800351a:	2300      	movs	r3, #0
}
 800351c:	4618      	mov	r0, r3
 800351e:	3710      	adds	r7, #16
 8003520:	46bd      	mov	sp, r7
 8003522:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8003526:	b004      	add	sp, #16
 8003528:	4770      	bx	lr
 800352a:	bf00      	nop
 800352c:	08003787 	.word	0x08003787
 8003530:	0800374b 	.word	0x0800374b

08003534 <LPS22HH_ResetDevice>:
	Handle->Status = LPS22HH_Uninitialized;
	return LPS22HH_Ok;
}

int32_t LPS22HH_ResetDevice(LPS22HH_Handle_t *Handle)
{
 8003534:	b580      	push	{r7, lr}
 8003536:	b084      	sub	sp, #16
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
	int32_t ret = LPS22HH_Ok;
 800353c:	2300      	movs	r3, #0
 800353e:	60fb      	str	r3, [r7, #12]
	if(Handle == NULL)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2b00      	cmp	r3, #0
 8003544:	d102      	bne.n	800354c <LPS22HH_ResetDevice+0x18>
	{
		return LPS22HH_HandleError;
 8003546:	f04f 33ff 	mov.w	r3, #4294967295
 800354a:	e012      	b.n	8003572 <LPS22HH_ResetDevice+0x3e>
	}

	ret = LPS22HH_Reboot(Handle);
 800354c:	6878      	ldr	r0, [r7, #4]
 800354e:	f000 f8ab 	bl	80036a8 <LPS22HH_Reboot>
 8003552:	60f8      	str	r0, [r7, #12]
	if(ret != LPS22HH_Ok)
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	2b00      	cmp	r3, #0
 8003558:	d001      	beq.n	800355e <LPS22HH_ResetDevice+0x2a>
	{
		return ret;
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	e009      	b.n	8003572 <LPS22HH_ResetDevice+0x3e>
	}


	ret = LPS22HH_SWReset(Handle);
 800355e:	6878      	ldr	r0, [r7, #4]
 8003560:	f000 f850 	bl	8003604 <LPS22HH_SWReset>
 8003564:	60f8      	str	r0, [r7, #12]
	if(ret != LPS22HH_Ok)
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	2b00      	cmp	r3, #0
 800356a:	d001      	beq.n	8003570 <LPS22HH_ResetDevice+0x3c>
	{
		return ret;
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	e000      	b.n	8003572 <LPS22HH_ResetDevice+0x3e>
	}

	return LPS22HH_Ok;
 8003570:	2300      	movs	r3, #0
}
 8003572:	4618      	mov	r0, r3
 8003574:	3710      	adds	r7, #16
 8003576:	46bd      	mov	sp, r7
 8003578:	bd80      	pop	{r7, pc}
	...

0800357c <LPS22HH_ReadPressure>:

	return LPS22HH_WriteReg(&Handle->Context,LPS22HH_REG_CTRL_REG2, &buffer, 1); //Store

}
int32_t LPS22HH_ReadPressure(LPS22HH_Handle_t *Handle, float *Pressure)
{
 800357c:	b580      	push	{r7, lr}
 800357e:	b084      	sub	sp, #16
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
 8003584:	6039      	str	r1, [r7, #0]
	if(Handle->Status != LPS22HH_Initialized)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800358c:	2b01      	cmp	r3, #1
 800358e:	d002      	beq.n	8003596 <LPS22HH_ReadPressure+0x1a>
	{
		return LPS22HH_InitError;
 8003590:	f06f 0302 	mvn.w	r3, #2
 8003594:	e030      	b.n	80035f8 <LPS22HH_ReadPressure+0x7c>
	}

	uint8_t buffer[3] = {0};
 8003596:	4b1a      	ldr	r3, [pc, #104]	; (8003600 <LPS22HH_ReadPressure+0x84>)
 8003598:	881b      	ldrh	r3, [r3, #0]
 800359a:	813b      	strh	r3, [r7, #8]
 800359c:	2300      	movs	r3, #0
 800359e:	72bb      	strb	r3, [r7, #10]

	int32_t ret = LPS22HH_ReadReg(&Handle->Context, LPS22HH_REG_STATUS, buffer, 1);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	f103 0018 	add.w	r0, r3, #24
 80035a6:	f107 0208 	add.w	r2, r7, #8
 80035aa:	2301      	movs	r3, #1
 80035ac:	2127      	movs	r1, #39	; 0x27
 80035ae:	f000 fac8 	bl	8003b42 <LPS22HH_ReadReg>
 80035b2:	60f8      	str	r0, [r7, #12]
	if(ret != LPS22HH_Ok)
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d001      	beq.n	80035be <LPS22HH_ReadPressure+0x42>
	{
		return ret;
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	e01c      	b.n	80035f8 <LPS22HH_ReadPressure+0x7c>
	}

	if(!(buffer[0] & LPS22HH_PDATA_Msk))
 80035be:	7a3b      	ldrb	r3, [r7, #8]
 80035c0:	f003 0301 	and.w	r3, r3, #1
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d101      	bne.n	80035cc <LPS22HH_ReadPressure+0x50>
	{
		return LPS22HH_NoNewData;
 80035c8:	2301      	movs	r3, #1
 80035ca:	e015      	b.n	80035f8 <LPS22HH_ReadPressure+0x7c>
	}

	ret = LPS22HH_ReadReg(&Handle->Context, LPS22HH_REG_PRESSURE_OUT_XL, buffer, 3);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	f103 0018 	add.w	r0, r3, #24
 80035d2:	f107 0208 	add.w	r2, r7, #8
 80035d6:	2303      	movs	r3, #3
 80035d8:	2128      	movs	r1, #40	; 0x28
 80035da:	f000 fab2 	bl	8003b42 <LPS22HH_ReadReg>
 80035de:	60f8      	str	r0, [r7, #12]
	if(ret != LPS22HH_Ok)
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d001      	beq.n	80035ea <LPS22HH_ReadPressure+0x6e>
	{
		return ret;
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	e006      	b.n	80035f8 <LPS22HH_ReadPressure+0x7c>
	}

	ConvertPressureData(buffer, Pressure);
 80035ea:	f107 0308 	add.w	r3, r7, #8
 80035ee:	6839      	ldr	r1, [r7, #0]
 80035f0:	4618      	mov	r0, r3
 80035f2:	f000 f9e5 	bl	80039c0 <ConvertPressureData>
	return LPS22HH_Ok;
 80035f6:	2300      	movs	r3, #0
}
 80035f8:	4618      	mov	r0, r3
 80035fa:	3710      	adds	r7, #16
 80035fc:	46bd      	mov	sp, r7
 80035fe:	bd80      	pop	{r7, pc}
 8003600:	08014a88 	.word	0x08014a88

08003604 <LPS22HH_SWReset>:


static int32_t LPS22HH_SWReset(LPS22HH_Handle_t *Handle)
{
 8003604:	b590      	push	{r4, r7, lr}
 8003606:	b087      	sub	sp, #28
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
    if(Handle == NULL)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2b00      	cmp	r3, #0
 8003610:	d102      	bne.n	8003618 <LPS22HH_SWReset+0x14>
    {
        return LPS22HH_HandleError;
 8003612:	f04f 33ff 	mov.w	r3, #4294967295
 8003616:	e043      	b.n	80036a0 <LPS22HH_SWReset+0x9c>
    }

    if(Handle->Context.Read == NULL || Handle->Context.Write == NULL)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	69db      	ldr	r3, [r3, #28]
 800361c:	2b00      	cmp	r3, #0
 800361e:	d003      	beq.n	8003628 <LPS22HH_SWReset+0x24>
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6a1b      	ldr	r3, [r3, #32]
 8003624:	2b00      	cmp	r3, #0
 8003626:	d102      	bne.n	800362e <LPS22HH_SWReset+0x2a>
    {
    	return LPS22HH_IOError;
 8003628:	f06f 0301 	mvn.w	r3, #1
 800362c:	e038      	b.n	80036a0 <LPS22HH_SWReset+0x9c>
    }


    int32_t ret = 0;
 800362e:	2300      	movs	r3, #0
 8003630:	617b      	str	r3, [r7, #20]
    uint8_t buffer = LPS22HH_ResetSignal;
 8003632:	2304      	movs	r3, #4
 8003634:	73fb      	strb	r3, [r7, #15]
    ret = LPS22HH_WriteReg(&Handle->Context, LPS22HH_REG_CTRL_REG2, &buffer, 1);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	f103 0018 	add.w	r0, r3, #24
 800363c:	f107 020f 	add.w	r2, r7, #15
 8003640:	2301      	movs	r3, #1
 8003642:	2111      	movs	r1, #17
 8003644:	f000 faa2 	bl	8003b8c <LPS22HH_WriteReg>
 8003648:	6178      	str	r0, [r7, #20]
    if(ret != LPS22HH_Ok)
 800364a:	697b      	ldr	r3, [r7, #20]
 800364c:	2b00      	cmp	r3, #0
 800364e:	d001      	beq.n	8003654 <LPS22HH_SWReset+0x50>
    {
    	return ret;
 8003650:	697b      	ldr	r3, [r7, #20]
 8003652:	e025      	b.n	80036a0 <LPS22HH_SWReset+0x9c>
    }

    uint32_t timer = Handle->IO.GetTick();
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	691b      	ldr	r3, [r3, #16]
 8003658:	4798      	blx	r3
 800365a:	6138      	str	r0, [r7, #16]
    while(buffer & LPS22HH_ResetSignal)
 800365c:	e01a      	b.n	8003694 <LPS22HH_SWReset+0x90>
    {
    	ret = LPS22HH_ReadReg(&Handle->Context, LPS22HH_REG_CTRL_REG2, &buffer, 1);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	f103 0018 	add.w	r0, r3, #24
 8003664:	f107 020f 	add.w	r2, r7, #15
 8003668:	2301      	movs	r3, #1
 800366a:	2111      	movs	r1, #17
 800366c:	f000 fa69 	bl	8003b42 <LPS22HH_ReadReg>
 8003670:	6178      	str	r0, [r7, #20]
    	if(ret != LPS22HH_Ok)
 8003672:	697b      	ldr	r3, [r7, #20]
 8003674:	2b00      	cmp	r3, #0
 8003676:	d001      	beq.n	800367c <LPS22HH_SWReset+0x78>
    	{
    		return ret;
 8003678:	697b      	ldr	r3, [r7, #20]
 800367a:	e011      	b.n	80036a0 <LPS22HH_SWReset+0x9c>
    	}

    	if(timer + 100 < Handle->IO.GetTick())
 800367c:	693b      	ldr	r3, [r7, #16]
 800367e:	f103 0464 	add.w	r4, r3, #100	; 0x64
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	691b      	ldr	r3, [r3, #16]
 8003686:	4798      	blx	r3
 8003688:	4603      	mov	r3, r0
 800368a:	429c      	cmp	r4, r3
 800368c:	d202      	bcs.n	8003694 <LPS22HH_SWReset+0x90>
    	{
    		return LPS22HH_Timeout;
 800368e:	f06f 0305 	mvn.w	r3, #5
 8003692:	e005      	b.n	80036a0 <LPS22HH_SWReset+0x9c>
    while(buffer & LPS22HH_ResetSignal)
 8003694:	7bfb      	ldrb	r3, [r7, #15]
 8003696:	f003 0304 	and.w	r3, r3, #4
 800369a:	2b00      	cmp	r3, #0
 800369c:	d1df      	bne.n	800365e <LPS22HH_SWReset+0x5a>
    	}
    }
    return ret;
 800369e:	697b      	ldr	r3, [r7, #20]
}
 80036a0:	4618      	mov	r0, r3
 80036a2:	371c      	adds	r7, #28
 80036a4:	46bd      	mov	sp, r7
 80036a6:	bd90      	pop	{r4, r7, pc}

080036a8 <LPS22HH_Reboot>:

static int32_t LPS22HH_Reboot(LPS22HH_Handle_t *Handle)
{
 80036a8:	b590      	push	{r4, r7, lr}
 80036aa:	b087      	sub	sp, #28
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
    if(Handle == NULL)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d102      	bne.n	80036bc <LPS22HH_Reboot+0x14>
    {
        return LPS22HH_HandleError;
 80036b6:	f04f 33ff 	mov.w	r3, #4294967295
 80036ba:	e042      	b.n	8003742 <LPS22HH_Reboot+0x9a>
    }

    if(Handle->Context.Read == NULL || Handle->Context.Write == NULL)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	69db      	ldr	r3, [r3, #28]
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d003      	beq.n	80036cc <LPS22HH_Reboot+0x24>
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6a1b      	ldr	r3, [r3, #32]
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d102      	bne.n	80036d2 <LPS22HH_Reboot+0x2a>
    {
    	return LPS22HH_IOError;
 80036cc:	f06f 0301 	mvn.w	r3, #1
 80036d0:	e037      	b.n	8003742 <LPS22HH_Reboot+0x9a>
    }

    int32_t ret = 0;
 80036d2:	2300      	movs	r3, #0
 80036d4:	617b      	str	r3, [r7, #20]
    uint8_t buffer = LPS22HH_RebootSignal;
 80036d6:	2380      	movs	r3, #128	; 0x80
 80036d8:	73fb      	strb	r3, [r7, #15]
    ret = LPS22HH_WriteReg(&Handle->Context, LPS22HH_REG_CTRL_REG2, &buffer, 1);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	f103 0018 	add.w	r0, r3, #24
 80036e0:	f107 020f 	add.w	r2, r7, #15
 80036e4:	2301      	movs	r3, #1
 80036e6:	2111      	movs	r1, #17
 80036e8:	f000 fa50 	bl	8003b8c <LPS22HH_WriteReg>
 80036ec:	6178      	str	r0, [r7, #20]
    if(ret != LPS22HH_Ok)
 80036ee:	697b      	ldr	r3, [r7, #20]
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d001      	beq.n	80036f8 <LPS22HH_Reboot+0x50>
    {
    	return ret;
 80036f4:	697b      	ldr	r3, [r7, #20]
 80036f6:	e024      	b.n	8003742 <LPS22HH_Reboot+0x9a>
    }

    uint32_t timer = Handle->IO.GetTick();
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	691b      	ldr	r3, [r3, #16]
 80036fc:	4798      	blx	r3
 80036fe:	6138      	str	r0, [r7, #16]
    while(buffer & LPS22HH_RebootSignal)
 8003700:	e01a      	b.n	8003738 <LPS22HH_Reboot+0x90>
    {
    	ret = LPS22HH_ReadReg(&Handle->Context, LPS22HH_REG_INT_SOURCE, &buffer, 1);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	f103 0018 	add.w	r0, r3, #24
 8003708:	f107 020f 	add.w	r2, r7, #15
 800370c:	2301      	movs	r3, #1
 800370e:	2124      	movs	r1, #36	; 0x24
 8003710:	f000 fa17 	bl	8003b42 <LPS22HH_ReadReg>
 8003714:	6178      	str	r0, [r7, #20]
    	if(ret != LPS22HH_Ok)
 8003716:	697b      	ldr	r3, [r7, #20]
 8003718:	2b00      	cmp	r3, #0
 800371a:	d001      	beq.n	8003720 <LPS22HH_Reboot+0x78>
    	{
    		return ret;
 800371c:	697b      	ldr	r3, [r7, #20]
 800371e:	e010      	b.n	8003742 <LPS22HH_Reboot+0x9a>
    	}

    	if(timer + 100 < Handle->IO.GetTick())
 8003720:	693b      	ldr	r3, [r7, #16]
 8003722:	f103 0464 	add.w	r4, r3, #100	; 0x64
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	691b      	ldr	r3, [r3, #16]
 800372a:	4798      	blx	r3
 800372c:	4603      	mov	r3, r0
 800372e:	429c      	cmp	r4, r3
 8003730:	d202      	bcs.n	8003738 <LPS22HH_Reboot+0x90>
    	{
    		return LPS22HH_Timeout;
 8003732:	f06f 0305 	mvn.w	r3, #5
 8003736:	e004      	b.n	8003742 <LPS22HH_Reboot+0x9a>
    while(buffer & LPS22HH_RebootSignal)
 8003738:	7bfb      	ldrb	r3, [r7, #15]
 800373a:	b25b      	sxtb	r3, r3
 800373c:	2b00      	cmp	r3, #0
 800373e:	dbe0      	blt.n	8003702 <LPS22HH_Reboot+0x5a>
    	}

    }
    return ret;
 8003740:	697b      	ldr	r3, [r7, #20]
}
 8003742:	4618      	mov	r0, r3
 8003744:	371c      	adds	r7, #28
 8003746:	46bd      	mov	sp, r7
 8003748:	bd90      	pop	{r4, r7, pc}

0800374a <LPS22HH_WriteRegWrapper>:

static int32_t LPS22HH_WriteRegWrapper(void *Handle, uint8_t Reg, uint8_t *Buffer, uint8_t Length)
{
 800374a:	b580      	push	{r7, lr}
 800374c:	b086      	sub	sp, #24
 800374e:	af00      	add	r7, sp, #0
 8003750:	60f8      	str	r0, [r7, #12]
 8003752:	607a      	str	r2, [r7, #4]
 8003754:	461a      	mov	r2, r3
 8003756:	460b      	mov	r3, r1
 8003758:	72fb      	strb	r3, [r7, #11]
 800375a:	4613      	mov	r3, r2
 800375c:	72bb      	strb	r3, [r7, #10]
	LPS22HH_Handle_t *Dev = Handle;
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	617b      	str	r3, [r7, #20]
	if(Dev->IO.Write != NULL)
 8003762:	697b      	ldr	r3, [r7, #20]
 8003764:	68db      	ldr	r3, [r3, #12]
 8003766:	2b00      	cmp	r3, #0
 8003768:	d007      	beq.n	800377a <LPS22HH_WriteRegWrapper+0x30>
	{
		return Dev->IO.Write(Reg, Buffer, Length);
 800376a:	697b      	ldr	r3, [r7, #20]
 800376c:	68db      	ldr	r3, [r3, #12]
 800376e:	7aba      	ldrb	r2, [r7, #10]
 8003770:	7af8      	ldrb	r0, [r7, #11]
 8003772:	6879      	ldr	r1, [r7, #4]
 8003774:	4798      	blx	r3
 8003776:	4603      	mov	r3, r0
 8003778:	e001      	b.n	800377e <LPS22HH_WriteRegWrapper+0x34>
	}
    return LPS22HH_IOError;
 800377a:	f06f 0301 	mvn.w	r3, #1
}
 800377e:	4618      	mov	r0, r3
 8003780:	3718      	adds	r7, #24
 8003782:	46bd      	mov	sp, r7
 8003784:	bd80      	pop	{r7, pc}

08003786 <LPS22HH_ReadRegWrapper>:

static int32_t LPS22HH_ReadRegWrapper(void *Handle,uint8_t Reg, uint8_t *Buffer, uint8_t Length)
{
 8003786:	b580      	push	{r7, lr}
 8003788:	b086      	sub	sp, #24
 800378a:	af00      	add	r7, sp, #0
 800378c:	60f8      	str	r0, [r7, #12]
 800378e:	607a      	str	r2, [r7, #4]
 8003790:	461a      	mov	r2, r3
 8003792:	460b      	mov	r3, r1
 8003794:	72fb      	strb	r3, [r7, #11]
 8003796:	4613      	mov	r3, r2
 8003798:	72bb      	strb	r3, [r7, #10]
	LPS22HH_Handle_t *Dev = Handle;
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	617b      	str	r3, [r7, #20]
	if(Dev->IO.Read != NULL)
 800379e:	697b      	ldr	r3, [r7, #20]
 80037a0:	689b      	ldr	r3, [r3, #8]
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d007      	beq.n	80037b6 <LPS22HH_ReadRegWrapper+0x30>
	{
		return Dev->IO.Read(Reg, Buffer, Length);
 80037a6:	697b      	ldr	r3, [r7, #20]
 80037a8:	689b      	ldr	r3, [r3, #8]
 80037aa:	7aba      	ldrb	r2, [r7, #10]
 80037ac:	7af8      	ldrb	r0, [r7, #11]
 80037ae:	6879      	ldr	r1, [r7, #4]
 80037b0:	4798      	blx	r3
 80037b2:	4603      	mov	r3, r0
 80037b4:	e001      	b.n	80037ba <LPS22HH_ReadRegWrapper+0x34>
	}
    return LPS22HH_IOError;
 80037b6:	f06f 0301 	mvn.w	r3, #1
}
 80037ba:	4618      	mov	r0, r3
 80037bc:	3718      	adds	r7, #24
 80037be:	46bd      	mov	sp, r7
 80037c0:	bd80      	pop	{r7, pc}
	...

080037c4 <LPS22HH_RegisterInit>:

static int32_t LPS22HH_RegisterInit(LPS22HH_Handle_t *Handle, LPS22HH_Init_Struct_t Settings)
{
 80037c4:	b084      	sub	sp, #16
 80037c6:	b580      	push	{r7, lr}
 80037c8:	b084      	sub	sp, #16
 80037ca:	af00      	add	r7, sp, #0
 80037cc:	6078      	str	r0, [r7, #4]
 80037ce:	f107 001c 	add.w	r0, r7, #28
 80037d2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	int32_t ret = LPS22HH_ResetDevice(Handle);
 80037d6:	6878      	ldr	r0, [r7, #4]
 80037d8:	f7ff feac 	bl	8003534 <LPS22HH_ResetDevice>
 80037dc:	60f8      	str	r0, [r7, #12]
	if(ret != LPS22HH_Ok)
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d001      	beq.n	80037e8 <LPS22HH_RegisterInit+0x24>
	{
		return ret;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	e0df      	b.n	80039a8 <LPS22HH_RegisterInit+0x1e4>
	}

	uint8_t buffer[2] = {0};
 80037e8:	2300      	movs	r3, #0
 80037ea:	813b      	strh	r3, [r7, #8]
    buffer[0] = Settings.INTERRUPT_CFG;
 80037ec:	7f3b      	ldrb	r3, [r7, #28]
 80037ee:	723b      	strb	r3, [r7, #8]
	ret = LPS22HH_WriteReg(&Handle->Context, LPS22HH_REG_INTERRUPT_CFG, &buffer[0], 1);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	f103 0018 	add.w	r0, r3, #24
 80037f6:	f107 0208 	add.w	r2, r7, #8
 80037fa:	2301      	movs	r3, #1
 80037fc:	210b      	movs	r1, #11
 80037fe:	f000 f9c5 	bl	8003b8c <LPS22HH_WriteReg>
 8003802:	60f8      	str	r0, [r7, #12]
	if(ret != LPS22HH_Ok)
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	2b00      	cmp	r3, #0
 8003808:	d001      	beq.n	800380e <LPS22HH_RegisterInit+0x4a>
	{
		return ret;
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	e0cc      	b.n	80039a8 <LPS22HH_RegisterInit+0x1e4>
	}

	if(Settings.THS_P > 32767)
 800380e:	8bfb      	ldrh	r3, [r7, #30]
 8003810:	b21b      	sxth	r3, r3
 8003812:	2b00      	cmp	r3, #0
 8003814:	da04      	bge.n	8003820 <LPS22HH_RegisterInit+0x5c>
	{
		buffer[0] = 32767 & 0x00FF;
 8003816:	23ff      	movs	r3, #255	; 0xff
 8003818:	723b      	strb	r3, [r7, #8]
		buffer[1] = (32767 & 0xFF00) >> 8;
 800381a:	237f      	movs	r3, #127	; 0x7f
 800381c:	727b      	strb	r3, [r7, #9]
 800381e:	e007      	b.n	8003830 <LPS22HH_RegisterInit+0x6c>
	} else
	{
		buffer[0] = Settings.THS_P & 0x00FF;
 8003820:	8bfb      	ldrh	r3, [r7, #30]
 8003822:	b2db      	uxtb	r3, r3
 8003824:	723b      	strb	r3, [r7, #8]
		buffer[1] = (Settings.THS_P & 0xFF00) >> 8;
 8003826:	8bfb      	ldrh	r3, [r7, #30]
 8003828:	0a1b      	lsrs	r3, r3, #8
 800382a:	b29b      	uxth	r3, r3
 800382c:	b2db      	uxtb	r3, r3
 800382e:	727b      	strb	r3, [r7, #9]
	}
	ret = LPS22HH_WriteReg(&Handle->Context, LPS22HH_REG_THS_P_L, &buffer[0], 2);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	f103 0018 	add.w	r0, r3, #24
 8003836:	f107 0208 	add.w	r2, r7, #8
 800383a:	2302      	movs	r3, #2
 800383c:	210c      	movs	r1, #12
 800383e:	f000 f9a5 	bl	8003b8c <LPS22HH_WriteReg>
 8003842:	60f8      	str	r0, [r7, #12]
	if(ret != LPS22HH_Ok)
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	2b00      	cmp	r3, #0
 8003848:	d001      	beq.n	800384e <LPS22HH_RegisterInit+0x8a>
	{
		return ret;
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	e0ac      	b.n	80039a8 <LPS22HH_RegisterInit+0x1e4>
	}

	buffer[0] = Settings.IF_CTRL;
 800384e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003852:	723b      	strb	r3, [r7, #8]
	ret = LPS22HH_WriteReg(&Handle->Context, LPS22HH_REG_IF_CTRL, &buffer[0], 1);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	f103 0018 	add.w	r0, r3, #24
 800385a:	f107 0208 	add.w	r2, r7, #8
 800385e:	2301      	movs	r3, #1
 8003860:	210e      	movs	r1, #14
 8003862:	f000 f993 	bl	8003b8c <LPS22HH_WriteReg>
 8003866:	60f8      	str	r0, [r7, #12]
	if(ret != LPS22HH_Ok)
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	2b00      	cmp	r3, #0
 800386c:	d001      	beq.n	8003872 <LPS22HH_RegisterInit+0xae>
	{
		return ret;
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	e09a      	b.n	80039a8 <LPS22HH_RegisterInit+0x1e4>
	}

	buffer[0] = Settings.ODR | Settings.LPFP | 0x02 | Settings.SIM; //Enable BDU = 0x02
 8003872:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8003876:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800387a:	4313      	orrs	r3, r2
 800387c:	b2da      	uxtb	r2, r3
 800387e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003882:	4313      	orrs	r3, r2
 8003884:	b2db      	uxtb	r3, r3
 8003886:	f043 0302 	orr.w	r3, r3, #2
 800388a:	b2db      	uxtb	r3, r3
 800388c:	723b      	strb	r3, [r7, #8]
	ret = LPS22HH_WriteReg(&Handle->Context, LPS22HH_REG_CTRL_REG1, &buffer[0], 1);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	f103 0018 	add.w	r0, r3, #24
 8003894:	f107 0208 	add.w	r2, r7, #8
 8003898:	2301      	movs	r3, #1
 800389a:	2110      	movs	r1, #16
 800389c:	f000 f976 	bl	8003b8c <LPS22HH_WriteReg>
 80038a0:	60f8      	str	r0, [r7, #12]
	if(ret != LPS22HH_Ok)
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d001      	beq.n	80038ac <LPS22HH_RegisterInit+0xe8>
	{
		return ret;
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	e07d      	b.n	80039a8 <LPS22HH_RegisterInit+0x1e4>
	}

	buffer[0] = Settings.CTRL_REG2;
 80038ac:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80038b0:	723b      	strb	r3, [r7, #8]
	ret = LPS22HH_WriteReg(&Handle->Context, LPS22HH_REG_CTRL_REG2, &buffer[0], 1);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	f103 0018 	add.w	r0, r3, #24
 80038b8:	f107 0208 	add.w	r2, r7, #8
 80038bc:	2301      	movs	r3, #1
 80038be:	2111      	movs	r1, #17
 80038c0:	f000 f964 	bl	8003b8c <LPS22HH_WriteReg>
 80038c4:	60f8      	str	r0, [r7, #12]
	if(ret != LPS22HH_Ok)
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d001      	beq.n	80038d0 <LPS22HH_RegisterInit+0x10c>
	{
		return ret;
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	e06b      	b.n	80039a8 <LPS22HH_RegisterInit+0x1e4>
	}

	buffer[0] = Settings.INT_DRDY_Control | Settings.INT_S;
 80038d0:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 80038d4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80038d8:	4313      	orrs	r3, r2
 80038da:	b2db      	uxtb	r3, r3
 80038dc:	723b      	strb	r3, [r7, #8]
	ret = LPS22HH_WriteReg(&Handle->Context, LPS22HH_REG_CTRL_REG3, &buffer[0], 1);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	f103 0018 	add.w	r0, r3, #24
 80038e4:	f107 0208 	add.w	r2, r7, #8
 80038e8:	2301      	movs	r3, #1
 80038ea:	2112      	movs	r1, #18
 80038ec:	f000 f94e 	bl	8003b8c <LPS22HH_WriteReg>
 80038f0:	60f8      	str	r0, [r7, #12]
	if(ret != LPS22HH_Ok)
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d001      	beq.n	80038fc <LPS22HH_RegisterInit+0x138>
	{
		return ret;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	e055      	b.n	80039a8 <LPS22HH_RegisterInit+0x1e4>
	}

	buffer[0] = Settings.STOP_ON_WTM | Settings.F_MODE;
 80038fc:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8003900:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003904:	4313      	orrs	r3, r2
 8003906:	b2db      	uxtb	r3, r3
 8003908:	723b      	strb	r3, [r7, #8]
	ret = LPS22HH_WriteReg(&Handle->Context, LPS22HH_REG_FIFO_CTRL, &buffer[0], 1);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	f103 0018 	add.w	r0, r3, #24
 8003910:	f107 0208 	add.w	r2, r7, #8
 8003914:	2301      	movs	r3, #1
 8003916:	2113      	movs	r1, #19
 8003918:	f000 f938 	bl	8003b8c <LPS22HH_WriteReg>
 800391c:	60f8      	str	r0, [r7, #12]
	if(ret != LPS22HH_Ok)
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	2b00      	cmp	r3, #0
 8003922:	d001      	beq.n	8003928 <LPS22HH_RegisterInit+0x164>
	{
		return ret;
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	e03f      	b.n	80039a8 <LPS22HH_RegisterInit+0x1e4>
	if(Settings.WTM > 255)
	{
		buffer[0] = 255;
	} else
	{
		buffer[0] = Settings.WTM;
 8003928:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800392c:	723b      	strb	r3, [r7, #8]
	}
	ret = LPS22HH_WriteReg(&Handle->Context, LPS22HH_REG_FIFO_WTM, &buffer[0], 1);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	f103 0018 	add.w	r0, r3, #24
 8003934:	f107 0208 	add.w	r2, r7, #8
 8003938:	2301      	movs	r3, #1
 800393a:	2114      	movs	r1, #20
 800393c:	f000 f926 	bl	8003b8c <LPS22HH_WriteReg>
 8003940:	60f8      	str	r0, [r7, #12]
	if(ret != LPS22HH_Ok)
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	2b00      	cmp	r3, #0
 8003946:	d001      	beq.n	800394c <LPS22HH_RegisterInit+0x188>
	{
		return ret;
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	e02d      	b.n	80039a8 <LPS22HH_RegisterInit+0x1e4>
	}

	if((Settings.REF_P * 4096) > 65535) //float -> LSB = multiply by 4096
 800394c:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8003950:	ed9f 7a19 	vldr	s14, [pc, #100]	; 80039b8 <LPS22HH_RegisterInit+0x1f4>
 8003954:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003958:	ed9f 7a18 	vldr	s14, [pc, #96]	; 80039bc <LPS22HH_RegisterInit+0x1f8>
 800395c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003960:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003964:	dd02      	ble.n	800396c <LPS22HH_RegisterInit+0x1a8>
	{
		return LPS22HH_RefPError;
 8003966:	f06f 0303 	mvn.w	r3, #3
 800396a:	e01d      	b.n	80039a8 <LPS22HH_RegisterInit+0x1e4>
	}

	*((uint16_t*)&buffer) = Settings.REF_P * 4096;
 800396c:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8003970:	ed9f 7a11 	vldr	s14, [pc, #68]	; 80039b8 <LPS22HH_RegisterInit+0x1f4>
 8003974:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003978:	f107 0308 	add.w	r3, r7, #8
 800397c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003980:	ee17 2a90 	vmov	r2, s15
 8003984:	b292      	uxth	r2, r2
 8003986:	801a      	strh	r2, [r3, #0]
	ret = LPS22HH_WriteReg(&Handle->Context, LPS22HH_REG_REF_P_L, &buffer[0], 2);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	f103 0018 	add.w	r0, r3, #24
 800398e:	f107 0208 	add.w	r2, r7, #8
 8003992:	2302      	movs	r3, #2
 8003994:	2115      	movs	r1, #21
 8003996:	f000 f8f9 	bl	8003b8c <LPS22HH_WriteReg>
 800399a:	60f8      	str	r0, [r7, #12]
	if(ret != LPS22HH_Ok)
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d001      	beq.n	80039a6 <LPS22HH_RegisterInit+0x1e2>
	{
		return ret;
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	e000      	b.n	80039a8 <LPS22HH_RegisterInit+0x1e4>
	}

	return LPS22HH_Ok;
 80039a6:	2300      	movs	r3, #0
}
 80039a8:	4618      	mov	r0, r3
 80039aa:	3710      	adds	r7, #16
 80039ac:	46bd      	mov	sp, r7
 80039ae:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80039b2:	b004      	add	sp, #16
 80039b4:	4770      	bx	lr
 80039b6:	bf00      	nop
 80039b8:	45800000 	.word	0x45800000
 80039bc:	477fff00 	.word	0x477fff00

080039c0 <ConvertPressureData>:

static void ConvertPressureData(uint8_t *buffer, float *pressure)
{
 80039c0:	b580      	push	{r7, lr}
 80039c2:	b084      	sub	sp, #16
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
 80039c8:	6039      	str	r1, [r7, #0]
	int32_t Data;
	//determine sign
	if(buffer[2] & 0x80)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	3302      	adds	r3, #2
 80039ce:	781b      	ldrb	r3, [r3, #0]
 80039d0:	b25b      	sxtb	r3, r3
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	da03      	bge.n	80039de <ConvertPressureData+0x1e>
	{
		Data = 0xFF000000; //Sign Extend if MSB of 24 Bit number is set
 80039d6:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 80039da:	60fb      	str	r3, [r7, #12]
 80039dc:	e001      	b.n	80039e2 <ConvertPressureData+0x22>
	} else
	{
		Data = 0;
 80039de:	2300      	movs	r3, #0
 80039e0:	60fb      	str	r3, [r7, #12]
	}
	Data = Data + buffer[2] * 65536 + buffer[1] * 256 + buffer[0]; //Data = Data + Concat buffer[2:0]
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	3302      	adds	r3, #2
 80039e6:	781b      	ldrb	r3, [r3, #0]
 80039e8:	041a      	lsls	r2, r3, #16
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	441a      	add	r2, r3
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	3301      	adds	r3, #1
 80039f2:	781b      	ldrb	r3, [r3, #0]
 80039f4:	021b      	lsls	r3, r3, #8
 80039f6:	4413      	add	r3, r2
 80039f8:	687a      	ldr	r2, [r7, #4]
 80039fa:	7812      	ldrb	r2, [r2, #0]
 80039fc:	4413      	add	r3, r2
 80039fe:	60fb      	str	r3, [r7, #12]
	*pressure = Data / 4096.0;
 8003a00:	68f8      	ldr	r0, [r7, #12]
 8003a02:	f7fc fea7 	bl	8000754 <__aeabi_i2d>
 8003a06:	f04f 0200 	mov.w	r2, #0
 8003a0a:	4b08      	ldr	r3, [pc, #32]	; (8003a2c <ConvertPressureData+0x6c>)
 8003a0c:	f7fd f836 	bl	8000a7c <__aeabi_ddiv>
 8003a10:	4602      	mov	r2, r0
 8003a12:	460b      	mov	r3, r1
 8003a14:	4610      	mov	r0, r2
 8003a16:	4619      	mov	r1, r3
 8003a18:	f7fd f918 	bl	8000c4c <__aeabi_d2f>
 8003a1c:	4602      	mov	r2, r0
 8003a1e:	683b      	ldr	r3, [r7, #0]
 8003a20:	601a      	str	r2, [r3, #0]
}
 8003a22:	bf00      	nop
 8003a24:	3710      	adds	r7, #16
 8003a26:	46bd      	mov	sp, r7
 8003a28:	bd80      	pop	{r7, pc}
 8003a2a:	bf00      	nop
 8003a2c:	40b00000 	.word	0x40b00000

08003a30 <LPS22HH_GetSamplePeriod>:

int32_t LPS22HH_GetSamplePeriod(LPS22HH_Handle_t *Handle, uint32_t *Period)
{
 8003a30:	b480      	push	{r7}
 8003a32:	b083      	sub	sp, #12
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	6078      	str	r0, [r7, #4]
 8003a38:	6039      	str	r1, [r7, #0]
	if(Handle->Status != LPS22HH_Initialized)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003a40:	2b01      	cmp	r3, #1
 8003a42:	d002      	beq.n	8003a4a <LPS22HH_GetSamplePeriod+0x1a>
	{
		return LPS22HH_InitError;
 8003a44:	f06f 0302 	mvn.w	r3, #2
 8003a48:	e043      	b.n	8003ad2 <LPS22HH_GetSamplePeriod+0xa2>
	}

	switch(Handle->DataRate)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003a50:	2b70      	cmp	r3, #112	; 0x70
 8003a52:	d039      	beq.n	8003ac8 <LPS22HH_GetSamplePeriod+0x98>
 8003a54:	2b70      	cmp	r3, #112	; 0x70
 8003a56:	dc3b      	bgt.n	8003ad0 <LPS22HH_GetSamplePeriod+0xa0>
 8003a58:	2b60      	cmp	r3, #96	; 0x60
 8003a5a:	d031      	beq.n	8003ac0 <LPS22HH_GetSamplePeriod+0x90>
 8003a5c:	2b60      	cmp	r3, #96	; 0x60
 8003a5e:	dc37      	bgt.n	8003ad0 <LPS22HH_GetSamplePeriod+0xa0>
 8003a60:	2b50      	cmp	r3, #80	; 0x50
 8003a62:	d029      	beq.n	8003ab8 <LPS22HH_GetSamplePeriod+0x88>
 8003a64:	2b50      	cmp	r3, #80	; 0x50
 8003a66:	dc33      	bgt.n	8003ad0 <LPS22HH_GetSamplePeriod+0xa0>
 8003a68:	2b40      	cmp	r3, #64	; 0x40
 8003a6a:	d021      	beq.n	8003ab0 <LPS22HH_GetSamplePeriod+0x80>
 8003a6c:	2b40      	cmp	r3, #64	; 0x40
 8003a6e:	dc2f      	bgt.n	8003ad0 <LPS22HH_GetSamplePeriod+0xa0>
 8003a70:	2b30      	cmp	r3, #48	; 0x30
 8003a72:	d019      	beq.n	8003aa8 <LPS22HH_GetSamplePeriod+0x78>
 8003a74:	2b30      	cmp	r3, #48	; 0x30
 8003a76:	dc2b      	bgt.n	8003ad0 <LPS22HH_GetSamplePeriod+0xa0>
 8003a78:	2b20      	cmp	r3, #32
 8003a7a:	d011      	beq.n	8003aa0 <LPS22HH_GetSamplePeriod+0x70>
 8003a7c:	2b20      	cmp	r3, #32
 8003a7e:	dc27      	bgt.n	8003ad0 <LPS22HH_GetSamplePeriod+0xa0>
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d002      	beq.n	8003a8a <LPS22HH_GetSamplePeriod+0x5a>
 8003a84:	2b10      	cmp	r3, #16
 8003a86:	d006      	beq.n	8003a96 <LPS22HH_GetSamplePeriod+0x66>
 8003a88:	e022      	b.n	8003ad0 <LPS22HH_GetSamplePeriod+0xa0>
	{
	case(LPS22HH_OneShot):
			*Period = 0;
 8003a8a:	683b      	ldr	r3, [r7, #0]
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	601a      	str	r2, [r3, #0]
	        return LPS22HH_OneShotError;
 8003a90:	f06f 0304 	mvn.w	r3, #4
 8003a94:	e01d      	b.n	8003ad2 <LPS22HH_GetSamplePeriod+0xa2>
			break;
	case(LPS22HH_1Hz):
			*Period = 1000 / 1;
 8003a96:	683b      	ldr	r3, [r7, #0]
 8003a98:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003a9c:	601a      	str	r2, [r3, #0]
			break;
 8003a9e:	e017      	b.n	8003ad0 <LPS22HH_GetSamplePeriod+0xa0>
	case(LPS22HH_10Hz):
			*Period = 1000 / 10;
 8003aa0:	683b      	ldr	r3, [r7, #0]
 8003aa2:	2264      	movs	r2, #100	; 0x64
 8003aa4:	601a      	str	r2, [r3, #0]
			break;
 8003aa6:	e013      	b.n	8003ad0 <LPS22HH_GetSamplePeriod+0xa0>
	case(LPS22HH_25Hz):
			*Period = 1000 / 25;
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	2228      	movs	r2, #40	; 0x28
 8003aac:	601a      	str	r2, [r3, #0]
			break;
 8003aae:	e00f      	b.n	8003ad0 <LPS22HH_GetSamplePeriod+0xa0>
	case(LPS22HH_50Hz):
			*Period = 1000 / 50;
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	2214      	movs	r2, #20
 8003ab4:	601a      	str	r2, [r3, #0]
			break;
 8003ab6:	e00b      	b.n	8003ad0 <LPS22HH_GetSamplePeriod+0xa0>
	case(LPS22HH_75Hz):
			*Period = 1000 / 75;
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	220d      	movs	r2, #13
 8003abc:	601a      	str	r2, [r3, #0]
	        break;
 8003abe:	e007      	b.n	8003ad0 <LPS22HH_GetSamplePeriod+0xa0>
	case(LPS22HH_100Hz):
			*Period = 1000 / 100;
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	220a      	movs	r2, #10
 8003ac4:	601a      	str	r2, [r3, #0]
			break;
 8003ac6:	e003      	b.n	8003ad0 <LPS22HH_GetSamplePeriod+0xa0>
	case(LPS22HH_200Hz):
			*Period = 1000 / 200;
 8003ac8:	683b      	ldr	r3, [r7, #0]
 8003aca:	2205      	movs	r2, #5
 8003acc:	601a      	str	r2, [r3, #0]
			break;
 8003ace:	bf00      	nop
	}
	return LPS22HH_Ok;
 8003ad0:	2300      	movs	r3, #0
}
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	370c      	adds	r7, #12
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003adc:	4770      	bx	lr

08003ade <LPS22HH_ValidateParams>:

#include "LPS22HH_Registers.h"
#include <stddef.h>

static uint32_t LPS22HH_ValidateParams(LPS22HH_Context_t *Context, uint8_t Reg, uint8_t *Buffer, uint8_t Length)
{
 8003ade:	b480      	push	{r7}
 8003ae0:	b087      	sub	sp, #28
 8003ae2:	af00      	add	r7, sp, #0
 8003ae4:	60f8      	str	r0, [r7, #12]
 8003ae6:	607a      	str	r2, [r7, #4]
 8003ae8:	461a      	mov	r2, r3
 8003aea:	460b      	mov	r3, r1
 8003aec:	72fb      	strb	r3, [r7, #11]
 8003aee:	4613      	mov	r3, r2
 8003af0:	72bb      	strb	r3, [r7, #10]
    int32_t ret_status = LPS22HH_REG_OK;
 8003af2:	2300      	movs	r3, #0
 8003af4:	617b      	str	r3, [r7, #20]

    if(Context == NULL)
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d103      	bne.n	8003b04 <LPS22HH_ValidateParams+0x26>
    {
    	ret_status |= LPS22HH_REG_CONTEXT_ERR;
 8003afc:	697b      	ldr	r3, [r7, #20]
 8003afe:	f043 0308 	orr.w	r3, r3, #8
 8003b02:	617b      	str	r3, [r7, #20]
    }

    if(Reg < LPS22HH_REG_INTERRUPT_CFG || Reg > LPS22HH_REG_FIFO_DATA_OUT_TEMP_H)
 8003b04:	7afb      	ldrb	r3, [r7, #11]
 8003b06:	2b0a      	cmp	r3, #10
 8003b08:	d902      	bls.n	8003b10 <LPS22HH_ValidateParams+0x32>
 8003b0a:	7afb      	ldrb	r3, [r7, #11]
 8003b0c:	2b7c      	cmp	r3, #124	; 0x7c
 8003b0e:	d903      	bls.n	8003b18 <LPS22HH_ValidateParams+0x3a>
    {
    	ret_status |= LPS22HH_REG_REGADDR_ERR;
 8003b10:	697b      	ldr	r3, [r7, #20]
 8003b12:	f043 0301 	orr.w	r3, r3, #1
 8003b16:	617b      	str	r3, [r7, #20]
    }

    if(Buffer == NULL)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d103      	bne.n	8003b26 <LPS22HH_ValidateParams+0x48>
    {
    	ret_status |= LPS22HH_REG_BUFF_ERR;
 8003b1e:	697b      	ldr	r3, [r7, #20]
 8003b20:	f043 0304 	orr.w	r3, r3, #4
 8003b24:	617b      	str	r3, [r7, #20]
    }

    if(Length == 0)
 8003b26:	7abb      	ldrb	r3, [r7, #10]
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d103      	bne.n	8003b34 <LPS22HH_ValidateParams+0x56>
    {
    	ret_status |= LPS22HH_REG_LENGTH_ERR;
 8003b2c:	697b      	ldr	r3, [r7, #20]
 8003b2e:	f043 0302 	orr.w	r3, r3, #2
 8003b32:	617b      	str	r3, [r7, #20]
    }

    return ret_status;
 8003b34:	697b      	ldr	r3, [r7, #20]
}
 8003b36:	4618      	mov	r0, r3
 8003b38:	371c      	adds	r7, #28
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b40:	4770      	bx	lr

08003b42 <LPS22HH_ReadReg>:

int32_t LPS22HH_ReadReg(LPS22HH_Context_t *Context, uint8_t Reg, uint8_t *Buffer, uint8_t Length)
{
 8003b42:	b590      	push	{r4, r7, lr}
 8003b44:	b087      	sub	sp, #28
 8003b46:	af00      	add	r7, sp, #0
 8003b48:	60f8      	str	r0, [r7, #12]
 8003b4a:	607a      	str	r2, [r7, #4]
 8003b4c:	461a      	mov	r2, r3
 8003b4e:	460b      	mov	r3, r1
 8003b50:	72fb      	strb	r3, [r7, #11]
 8003b52:	4613      	mov	r3, r2
 8003b54:	72bb      	strb	r3, [r7, #10]
	int32_t ret = LPS22HH_ValidateParams(Context,Reg,Buffer,Length);
 8003b56:	7abb      	ldrb	r3, [r7, #10]
 8003b58:	7af9      	ldrb	r1, [r7, #11]
 8003b5a:	687a      	ldr	r2, [r7, #4]
 8003b5c:	68f8      	ldr	r0, [r7, #12]
 8003b5e:	f7ff ffbe 	bl	8003ade <LPS22HH_ValidateParams>
 8003b62:	4603      	mov	r3, r0
 8003b64:	617b      	str	r3, [r7, #20]
    if(ret != LPS22HH_REG_OK)
 8003b66:	697b      	ldr	r3, [r7, #20]
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d001      	beq.n	8003b70 <LPS22HH_ReadReg+0x2e>
    {
    	return ret;
 8003b6c:	697b      	ldr	r3, [r7, #20]
 8003b6e:	e009      	b.n	8003b84 <LPS22HH_ReadReg+0x42>
    }

	ret = Context->Read(Context->Handle, Reg, Buffer, Length);
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	685c      	ldr	r4, [r3, #4]
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	6818      	ldr	r0, [r3, #0]
 8003b78:	7abb      	ldrb	r3, [r7, #10]
 8003b7a:	7af9      	ldrb	r1, [r7, #11]
 8003b7c:	687a      	ldr	r2, [r7, #4]
 8003b7e:	47a0      	blx	r4
 8003b80:	6178      	str	r0, [r7, #20]
	return ret;
 8003b82:	697b      	ldr	r3, [r7, #20]
}
 8003b84:	4618      	mov	r0, r3
 8003b86:	371c      	adds	r7, #28
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	bd90      	pop	{r4, r7, pc}

08003b8c <LPS22HH_WriteReg>:

int32_t LPS22HH_WriteReg(LPS22HH_Context_t *Context, uint8_t Reg, uint8_t *Buffer, uint8_t Length)
{
 8003b8c:	b590      	push	{r4, r7, lr}
 8003b8e:	b087      	sub	sp, #28
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	60f8      	str	r0, [r7, #12]
 8003b94:	607a      	str	r2, [r7, #4]
 8003b96:	461a      	mov	r2, r3
 8003b98:	460b      	mov	r3, r1
 8003b9a:	72fb      	strb	r3, [r7, #11]
 8003b9c:	4613      	mov	r3, r2
 8003b9e:	72bb      	strb	r3, [r7, #10]
	int32_t ret = LPS22HH_ValidateParams(Context,Reg,Buffer,Length);
 8003ba0:	7abb      	ldrb	r3, [r7, #10]
 8003ba2:	7af9      	ldrb	r1, [r7, #11]
 8003ba4:	687a      	ldr	r2, [r7, #4]
 8003ba6:	68f8      	ldr	r0, [r7, #12]
 8003ba8:	f7ff ff99 	bl	8003ade <LPS22HH_ValidateParams>
 8003bac:	4603      	mov	r3, r0
 8003bae:	617b      	str	r3, [r7, #20]
    if(ret != LPS22HH_REG_OK)
 8003bb0:	697b      	ldr	r3, [r7, #20]
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d001      	beq.n	8003bba <LPS22HH_WriteReg+0x2e>
    {
    	return ret;
 8003bb6:	697b      	ldr	r3, [r7, #20]
 8003bb8:	e009      	b.n	8003bce <LPS22HH_WriteReg+0x42>
    }

	ret = Context->Write(Context->Handle, Reg, Buffer, Length);
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	689c      	ldr	r4, [r3, #8]
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	6818      	ldr	r0, [r3, #0]
 8003bc2:	7abb      	ldrb	r3, [r7, #10]
 8003bc4:	7af9      	ldrb	r1, [r7, #11]
 8003bc6:	687a      	ldr	r2, [r7, #4]
 8003bc8:	47a0      	blx	r4
 8003bca:	6178      	str	r0, [r7, #20]
	return ret;
 8003bcc:	697b      	ldr	r3, [r7, #20]
}
 8003bce:	4618      	mov	r0, r3
 8003bd0:	371c      	adds	r7, #28
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	bd90      	pop	{r4, r7, pc}
	...

08003bd8 <OV5640_LinkBus>:
#define  OV5640_ID                                 0x5640U
static int32_t OV5640_ReadWrapper(void *Handle, uint16_t Reg, uint8_t *Data, uint16_t Length);
static int32_t OV5640_WriteWrapper(void *Handle, uint16_t Reg, uint8_t *Data, uint16_t Length);

void OV5640_LinkBus(OV5640_Handle_t *OV5640_Handle, OV5640_IO_t *CameraIO)
{
 8003bd8:	b5b0      	push	{r4, r5, r7, lr}
 8003bda:	b082      	sub	sp, #8
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
 8003be0:	6039      	str	r1, [r7, #0]
	OV5640_Handle->IO               = *CameraIO;
 8003be2:	687a      	ldr	r2, [r7, #4]
 8003be4:	683b      	ldr	r3, [r7, #0]
 8003be6:	4614      	mov	r4, r2
 8003be8:	461d      	mov	r5, r3
 8003bea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003bec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003bee:	e895 0003 	ldmia.w	r5, {r0, r1}
 8003bf2:	e884 0003 	stmia.w	r4, {r0, r1}

	OV5640_Handle->Context.Read  = OV5640_ReadWrapper;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	4a07      	ldr	r2, [pc, #28]	; (8003c18 <OV5640_LinkBus+0x40>)
 8003bfa:	61da      	str	r2, [r3, #28]
	OV5640_Handle->Context.Write = OV5640_WriteWrapper;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	4a07      	ldr	r2, [pc, #28]	; (8003c1c <OV5640_LinkBus+0x44>)
 8003c00:	619a      	str	r2, [r3, #24]
	OV5640_Handle->Context.Handle   = OV5640_Handle;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	687a      	ldr	r2, [r7, #4]
 8003c06:	621a      	str	r2, [r3, #32]

	OV5640_Handle->IO.Init();
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	685b      	ldr	r3, [r3, #4]
 8003c0c:	4798      	blx	r3
}
 8003c0e:	bf00      	nop
 8003c10:	3708      	adds	r7, #8
 8003c12:	46bd      	mov	sp, r7
 8003c14:	bdb0      	pop	{r4, r5, r7, pc}
 8003c16:	bf00      	nop
 8003c18:	08003d5d 	.word	0x08003d5d
 8003c1c:	08003d8f 	.word	0x08003d8f

08003c20 <OV5640_Init>:

int32_t OV5640_Init(OV5640_Handle_t *OV5640, uint32_t Resolution, uint32_t PixelFormat)
{
 8003c20:	b580      	push	{r7, lr}
 8003c22:	b088      	sub	sp, #32
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	60f8      	str	r0, [r7, #12]
 8003c28:	60b9      	str	r1, [r7, #8]
 8003c2a:	607a      	str	r2, [r7, #4]
  uint32_t index;
  int32_t ret = OV5640_OK;
 8003c2c:	2300      	movs	r3, #0
 8003c2e:	61bb      	str	r3, [r7, #24]
    {OV5640_SYSTEM_CTROL0, 0x02},
  };
  uint8_t tmp;

    /* Check if resolution is supported */
    if ((Resolution > OV5640_R800x480) ||
 8003c30:	68bb      	ldr	r3, [r7, #8]
 8003c32:	2b04      	cmp	r3, #4
 8003c34:	d80e      	bhi.n	8003c54 <OV5640_Init+0x34>
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d00f      	beq.n	8003c5c <OV5640_Init+0x3c>
        ((PixelFormat != OV5640_RGB565) && (PixelFormat != OV5640_YUV422) &&
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2b02      	cmp	r3, #2
 8003c40:	d00c      	beq.n	8003c5c <OV5640_Init+0x3c>
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	2b01      	cmp	r3, #1
 8003c46:	d009      	beq.n	8003c5c <OV5640_Init+0x3c>
         (PixelFormat != OV5640_RGB888) && (PixelFormat != OV5640_Y8) &&
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2b07      	cmp	r3, #7
 8003c4c:	d006      	beq.n	8003c5c <OV5640_Init+0x3c>
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	2b08      	cmp	r3, #8
 8003c52:	d003      	beq.n	8003c5c <OV5640_Init+0x3c>
         (PixelFormat != OV5640_JPEG)))
    {
      ret = OV5640_ERROR;
 8003c54:	f04f 33ff 	mov.w	r3, #4294967295
 8003c58:	61bb      	str	r3, [r7, #24]
 8003c5a:	e04a      	b.n	8003cf2 <OV5640_Init+0xd2>
    }
    else
    {
      /* Set common parameters for all resolutions */
      for (index = 0; index < (sizeof(OV5640_Common) / 4U) ; index++)
 8003c5c:	2300      	movs	r3, #0
 8003c5e:	61fb      	str	r3, [r7, #28]
 8003c60:	e01f      	b.n	8003ca2 <OV5640_Init+0x82>
      {
        if (ret != OV5640_ERROR)
 8003c62:	69bb      	ldr	r3, [r7, #24]
 8003c64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c68:	d018      	beq.n	8003c9c <OV5640_Init+0x7c>
        {
          tmp = (uint8_t)OV5640_Common[index][1];
 8003c6a:	4a24      	ldr	r2, [pc, #144]	; (8003cfc <OV5640_Init+0xdc>)
 8003c6c:	69fb      	ldr	r3, [r7, #28]
 8003c6e:	009b      	lsls	r3, r3, #2
 8003c70:	4413      	add	r3, r2
 8003c72:	885b      	ldrh	r3, [r3, #2]
 8003c74:	b2db      	uxtb	r3, r3
 8003c76:	75fb      	strb	r3, [r7, #23]

          if (OV5640_WriteReg(&OV5640->Context, OV5640_Common[index][0], &tmp, 1) != OV5640_OK)
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	f103 0018 	add.w	r0, r3, #24
 8003c7e:	4a1f      	ldr	r2, [pc, #124]	; (8003cfc <OV5640_Init+0xdc>)
 8003c80:	69fb      	ldr	r3, [r7, #28]
 8003c82:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8003c86:	f107 0217 	add.w	r2, r7, #23
 8003c8a:	2301      	movs	r3, #1
 8003c8c:	f000 f84f 	bl	8003d2e <OV5640_WriteReg>
 8003c90:	4603      	mov	r3, r0
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d002      	beq.n	8003c9c <OV5640_Init+0x7c>
          {
            ret = OV5640_ERROR;
 8003c96:	f04f 33ff 	mov.w	r3, #4294967295
 8003c9a:	61bb      	str	r3, [r7, #24]
      for (index = 0; index < (sizeof(OV5640_Common) / 4U) ; index++)
 8003c9c:	69fb      	ldr	r3, [r7, #28]
 8003c9e:	3301      	adds	r3, #1
 8003ca0:	61fb      	str	r3, [r7, #28]
 8003ca2:	69fb      	ldr	r3, [r7, #28]
 8003ca4:	2bfd      	cmp	r3, #253	; 0xfd
 8003ca6:	d9dc      	bls.n	8003c62 <OV5640_Init+0x42>
          }
        }
      }

      if (ret == OV5640_OK)
 8003ca8:	69bb      	ldr	r3, [r7, #24]
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d121      	bne.n	8003cf2 <OV5640_Init+0xd2>
      {
        /* Set specific parameters for each resolution */
        if (OV5640_SetResolution(OV5640, Resolution) != OV5640_OK)
 8003cae:	68b9      	ldr	r1, [r7, #8]
 8003cb0:	68f8      	ldr	r0, [r7, #12]
 8003cb2:	f000 f89d 	bl	8003df0 <OV5640_SetResolution>
 8003cb6:	4603      	mov	r3, r0
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d003      	beq.n	8003cc4 <OV5640_Init+0xa4>
        {
          ret = OV5640_ERROR;
 8003cbc:	f04f 33ff 	mov.w	r3, #4294967295
 8003cc0:	61bb      	str	r3, [r7, #24]
 8003cc2:	e016      	b.n	8003cf2 <OV5640_Init+0xd2>
        }/* Set specific parameters for each pixel format */
        else if (OV5640_SetPixelFormat(OV5640, PixelFormat) != OV5640_OK)
 8003cc4:	6879      	ldr	r1, [r7, #4]
 8003cc6:	68f8      	ldr	r0, [r7, #12]
 8003cc8:	f000 f988 	bl	8003fdc <OV5640_SetPixelFormat>
 8003ccc:	4603      	mov	r3, r0
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d003      	beq.n	8003cda <OV5640_Init+0xba>
        {
          ret = OV5640_ERROR;
 8003cd2:	f04f 33ff 	mov.w	r3, #4294967295
 8003cd6:	61bb      	str	r3, [r7, #24]
 8003cd8:	e00b      	b.n	8003cf2 <OV5640_Init+0xd2>
        }/* Set PixelClock, Href and VSync Polarity */
        else if (OV5640_SetPolarities(OV5640, OV5640_POLARITY_PCLK_HIGH, OV5640_POLARITY_HREF_HIGH,
 8003cda:	2300      	movs	r3, #0
 8003cdc:	2201      	movs	r2, #1
 8003cde:	2101      	movs	r1, #1
 8003ce0:	68f8      	ldr	r0, [r7, #12]
 8003ce2:	f000 fb0f 	bl	8004304 <OV5640_SetPolarities>
 8003ce6:	4603      	mov	r3, r0
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d002      	beq.n	8003cf2 <OV5640_Init+0xd2>
                                      OV5640_POLARITY_VSYNC_HIGH) != OV5640_OK)
        {
          ret = OV5640_ERROR;
 8003cec:	f04f 33ff 	mov.w	r3, #4294967295
 8003cf0:	61bb      	str	r3, [r7, #24]
        }
      }
    }


  return ret;
 8003cf2:	69bb      	ldr	r3, [r7, #24]
}
 8003cf4:	4618      	mov	r0, r3
 8003cf6:	3720      	adds	r7, #32
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	bd80      	pop	{r7, pc}
 8003cfc:	08014b44 	.word	0x08014b44

08003d00 <OV5640_ReadReg>:

int32_t OV5640_ReadReg(OV5650_Context_t *Context, uint16_t reg, uint8_t *pdata, uint16_t length)
{
 8003d00:	b590      	push	{r4, r7, lr}
 8003d02:	b085      	sub	sp, #20
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	60f8      	str	r0, [r7, #12]
 8003d08:	607a      	str	r2, [r7, #4]
 8003d0a:	461a      	mov	r2, r3
 8003d0c:	460b      	mov	r3, r1
 8003d0e:	817b      	strh	r3, [r7, #10]
 8003d10:	4613      	mov	r3, r2
 8003d12:	813b      	strh	r3, [r7, #8]
  return Context->Read(Context->Handle, reg, pdata, length);
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	685c      	ldr	r4, [r3, #4]
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	6898      	ldr	r0, [r3, #8]
 8003d1c:	893b      	ldrh	r3, [r7, #8]
 8003d1e:	8979      	ldrh	r1, [r7, #10]
 8003d20:	687a      	ldr	r2, [r7, #4]
 8003d22:	47a0      	blx	r4
 8003d24:	4603      	mov	r3, r0
}
 8003d26:	4618      	mov	r0, r3
 8003d28:	3714      	adds	r7, #20
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	bd90      	pop	{r4, r7, pc}

08003d2e <OV5640_WriteReg>:


int32_t OV5640_WriteReg(OV5650_Context_t *Context, uint16_t reg, uint8_t *pdata, uint16_t length)
{
 8003d2e:	b590      	push	{r4, r7, lr}
 8003d30:	b085      	sub	sp, #20
 8003d32:	af00      	add	r7, sp, #0
 8003d34:	60f8      	str	r0, [r7, #12]
 8003d36:	607a      	str	r2, [r7, #4]
 8003d38:	461a      	mov	r2, r3
 8003d3a:	460b      	mov	r3, r1
 8003d3c:	817b      	strh	r3, [r7, #10]
 8003d3e:	4613      	mov	r3, r2
 8003d40:	813b      	strh	r3, [r7, #8]
  return Context->Write(Context->Handle, reg, pdata, length);
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	681c      	ldr	r4, [r3, #0]
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	6898      	ldr	r0, [r3, #8]
 8003d4a:	893b      	ldrh	r3, [r7, #8]
 8003d4c:	8979      	ldrh	r1, [r7, #10]
 8003d4e:	687a      	ldr	r2, [r7, #4]
 8003d50:	47a0      	blx	r4
 8003d52:	4603      	mov	r3, r0
}
 8003d54:	4618      	mov	r0, r3
 8003d56:	3714      	adds	r7, #20
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	bd90      	pop	{r4, r7, pc}

08003d5c <OV5640_ReadWrapper>:

static int32_t OV5640_ReadWrapper(void *Handle, uint16_t Reg, uint8_t *Data, uint16_t Length){
 8003d5c:	b590      	push	{r4, r7, lr}
 8003d5e:	b087      	sub	sp, #28
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	60f8      	str	r0, [r7, #12]
 8003d64:	607a      	str	r2, [r7, #4]
 8003d66:	461a      	mov	r2, r3
 8003d68:	460b      	mov	r3, r1
 8003d6a:	817b      	strh	r3, [r7, #10]
 8003d6c:	4613      	mov	r3, r2
 8003d6e:	813b      	strh	r3, [r7, #8]
	OV5640_Handle_t *OV5640 = (OV5640_Handle_t*)Handle;
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	617b      	str	r3, [r7, #20]
    return OV5640->IO.Read(OV5640->IO.Address,Reg,Data,Length);
 8003d74:	697b      	ldr	r3, [r7, #20]
 8003d76:	691c      	ldr	r4, [r3, #16]
 8003d78:	697b      	ldr	r3, [r7, #20]
 8003d7a:	8818      	ldrh	r0, [r3, #0]
 8003d7c:	893b      	ldrh	r3, [r7, #8]
 8003d7e:	8979      	ldrh	r1, [r7, #10]
 8003d80:	687a      	ldr	r2, [r7, #4]
 8003d82:	47a0      	blx	r4
 8003d84:	4603      	mov	r3, r0
}
 8003d86:	4618      	mov	r0, r3
 8003d88:	371c      	adds	r7, #28
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	bd90      	pop	{r4, r7, pc}

08003d8e <OV5640_WriteWrapper>:

static int32_t OV5640_WriteWrapper(void *Handle, uint16_t Reg, uint8_t *Data, uint16_t Length){
 8003d8e:	b590      	push	{r4, r7, lr}
 8003d90:	b087      	sub	sp, #28
 8003d92:	af00      	add	r7, sp, #0
 8003d94:	60f8      	str	r0, [r7, #12]
 8003d96:	607a      	str	r2, [r7, #4]
 8003d98:	461a      	mov	r2, r3
 8003d9a:	460b      	mov	r3, r1
 8003d9c:	817b      	strh	r3, [r7, #10]
 8003d9e:	4613      	mov	r3, r2
 8003da0:	813b      	strh	r3, [r7, #8]
	OV5640_Handle_t *OV5640 = (OV5640_Handle_t*)Handle;
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	617b      	str	r3, [r7, #20]
	return OV5640->IO.Write(OV5640->IO.Address,Reg,Data,Length);
 8003da6:	697b      	ldr	r3, [r7, #20]
 8003da8:	68dc      	ldr	r4, [r3, #12]
 8003daa:	697b      	ldr	r3, [r7, #20]
 8003dac:	8818      	ldrh	r0, [r3, #0]
 8003dae:	893b      	ldrh	r3, [r7, #8]
 8003db0:	8979      	ldrh	r1, [r7, #10]
 8003db2:	687a      	ldr	r2, [r7, #4]
 8003db4:	47a0      	blx	r4
 8003db6:	4603      	mov	r3, r0
}
 8003db8:	4618      	mov	r0, r3
 8003dba:	371c      	adds	r7, #28
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	bd90      	pop	{r4, r7, pc}

08003dc0 <OV5640_Delay>:

static int32_t OV5640_Delay(OV5640_Handle_t *OV5640, uint32_t Delay)
{
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	b084      	sub	sp, #16
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]
 8003dc8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  tickstart = OV5640->IO.GetTick();
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	695b      	ldr	r3, [r3, #20]
 8003dce:	4798      	blx	r3
 8003dd0:	60f8      	str	r0, [r7, #12]
  while ((OV5640->IO.GetTick() - tickstart) < Delay)
 8003dd2:	bf00      	nop
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	695b      	ldr	r3, [r3, #20]
 8003dd8:	4798      	blx	r3
 8003dda:	4602      	mov	r2, r0
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	1ad3      	subs	r3, r2, r3
 8003de0:	683a      	ldr	r2, [r7, #0]
 8003de2:	429a      	cmp	r2, r3
 8003de4:	d8f6      	bhi.n	8003dd4 <OV5640_Delay+0x14>
  {
  }
  return OV5640_OK;
 8003de6:	2300      	movs	r3, #0
}
 8003de8:	4618      	mov	r0, r3
 8003dea:	3710      	adds	r7, #16
 8003dec:	46bd      	mov	sp, r7
 8003dee:	bd80      	pop	{r7, pc}

08003df0 <OV5640_SetResolution>:

int32_t OV5640_SetResolution(OV5640_Handle_t *OV5640, uint32_t Resolution)
{
 8003df0:	b580      	push	{r7, lr}
 8003df2:	b086      	sub	sp, #24
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	6078      	str	r0, [r7, #4]
 8003df8:	6039      	str	r1, [r7, #0]
  int32_t ret = OV5640_OK;
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	617b      	str	r3, [r7, #20]
    {OV5640_TIMING_DVPVO_HIGH, 0x00},
    {OV5640_TIMING_DVPVO_LOW, 0x78},
  };

  /* Check if resolution is supported */
  if (Resolution > OV5640_R800x480)
 8003dfe:	683b      	ldr	r3, [r7, #0]
 8003e00:	2b04      	cmp	r3, #4
 8003e02:	d903      	bls.n	8003e0c <OV5640_SetResolution+0x1c>
  {
    ret = OV5640_ERROR;
 8003e04:	f04f 33ff 	mov.w	r3, #4294967295
 8003e08:	617b      	str	r3, [r7, #20]
 8003e0a:	e0d8      	b.n	8003fbe <OV5640_SetResolution+0x1ce>
  }
  else
  {
    /* Initialize OV5640 */
    switch (Resolution)
 8003e0c:	683b      	ldr	r3, [r7, #0]
 8003e0e:	2b04      	cmp	r3, #4
 8003e10:	f200 80d1 	bhi.w	8003fb6 <OV5640_SetResolution+0x1c6>
 8003e14:	a201      	add	r2, pc, #4	; (adr r2, 8003e1c <OV5640_SetResolution+0x2c>)
 8003e16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e1a:	bf00      	nop
 8003e1c:	08003e31 	.word	0x08003e31
 8003e20:	08003e7f 	.word	0x08003e7f
 8003e24:	08003ecd 	.word	0x08003ecd
 8003e28:	08003f1b 	.word	0x08003f1b
 8003e2c:	08003f69 	.word	0x08003f69
    {
      case OV5640_R160x120:
        for (index = 0; index < (sizeof(OV5640_QQVGA) / 4U); index++)
 8003e30:	2300      	movs	r3, #0
 8003e32:	613b      	str	r3, [r7, #16]
 8003e34:	e01f      	b.n	8003e76 <OV5640_SetResolution+0x86>
        {
          if (ret != OV5640_ERROR)
 8003e36:	697b      	ldr	r3, [r7, #20]
 8003e38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e3c:	d018      	beq.n	8003e70 <OV5640_SetResolution+0x80>
          {
            tmp = (uint8_t)OV5640_QQVGA[index][1];
 8003e3e:	4a62      	ldr	r2, [pc, #392]	; (8003fc8 <OV5640_SetResolution+0x1d8>)
 8003e40:	693b      	ldr	r3, [r7, #16]
 8003e42:	009b      	lsls	r3, r3, #2
 8003e44:	4413      	add	r3, r2
 8003e46:	885b      	ldrh	r3, [r3, #2]
 8003e48:	b2db      	uxtb	r3, r3
 8003e4a:	73fb      	strb	r3, [r7, #15]
            if (OV5640_WriteReg(&OV5640->Context, OV5640_QQVGA[index][0], &tmp, 1) != OV5640_OK)
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	f103 0018 	add.w	r0, r3, #24
 8003e52:	4a5d      	ldr	r2, [pc, #372]	; (8003fc8 <OV5640_SetResolution+0x1d8>)
 8003e54:	693b      	ldr	r3, [r7, #16]
 8003e56:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8003e5a:	f107 020f 	add.w	r2, r7, #15
 8003e5e:	2301      	movs	r3, #1
 8003e60:	f7ff ff65 	bl	8003d2e <OV5640_WriteReg>
 8003e64:	4603      	mov	r3, r0
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d002      	beq.n	8003e70 <OV5640_SetResolution+0x80>
            {
              ret = OV5640_ERROR;
 8003e6a:	f04f 33ff 	mov.w	r3, #4294967295
 8003e6e:	617b      	str	r3, [r7, #20]
        for (index = 0; index < (sizeof(OV5640_QQVGA) / 4U); index++)
 8003e70:	693b      	ldr	r3, [r7, #16]
 8003e72:	3301      	adds	r3, #1
 8003e74:	613b      	str	r3, [r7, #16]
 8003e76:	693b      	ldr	r3, [r7, #16]
 8003e78:	2b03      	cmp	r3, #3
 8003e7a:	d9dc      	bls.n	8003e36 <OV5640_SetResolution+0x46>
            }
          }
        }
        break;
 8003e7c:	e09f      	b.n	8003fbe <OV5640_SetResolution+0x1ce>
      case OV5640_R320x240:
        for (index = 0; index < (sizeof(OV5640_QVGA) / 4U); index++)
 8003e7e:	2300      	movs	r3, #0
 8003e80:	613b      	str	r3, [r7, #16]
 8003e82:	e01f      	b.n	8003ec4 <OV5640_SetResolution+0xd4>
        {
          if (ret != OV5640_ERROR)
 8003e84:	697b      	ldr	r3, [r7, #20]
 8003e86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e8a:	d018      	beq.n	8003ebe <OV5640_SetResolution+0xce>
          {
            tmp = (uint8_t)OV5640_QVGA[index][1];
 8003e8c:	4a4f      	ldr	r2, [pc, #316]	; (8003fcc <OV5640_SetResolution+0x1dc>)
 8003e8e:	693b      	ldr	r3, [r7, #16]
 8003e90:	009b      	lsls	r3, r3, #2
 8003e92:	4413      	add	r3, r2
 8003e94:	885b      	ldrh	r3, [r3, #2]
 8003e96:	b2db      	uxtb	r3, r3
 8003e98:	73fb      	strb	r3, [r7, #15]
            if (OV5640_WriteReg(&OV5640->Context, OV5640_QVGA[index][0], &tmp, 1) != OV5640_OK)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	f103 0018 	add.w	r0, r3, #24
 8003ea0:	4a4a      	ldr	r2, [pc, #296]	; (8003fcc <OV5640_SetResolution+0x1dc>)
 8003ea2:	693b      	ldr	r3, [r7, #16]
 8003ea4:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8003ea8:	f107 020f 	add.w	r2, r7, #15
 8003eac:	2301      	movs	r3, #1
 8003eae:	f7ff ff3e 	bl	8003d2e <OV5640_WriteReg>
 8003eb2:	4603      	mov	r3, r0
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d002      	beq.n	8003ebe <OV5640_SetResolution+0xce>
            {
              ret = OV5640_ERROR;
 8003eb8:	f04f 33ff 	mov.w	r3, #4294967295
 8003ebc:	617b      	str	r3, [r7, #20]
        for (index = 0; index < (sizeof(OV5640_QVGA) / 4U); index++)
 8003ebe:	693b      	ldr	r3, [r7, #16]
 8003ec0:	3301      	adds	r3, #1
 8003ec2:	613b      	str	r3, [r7, #16]
 8003ec4:	693b      	ldr	r3, [r7, #16]
 8003ec6:	2b03      	cmp	r3, #3
 8003ec8:	d9dc      	bls.n	8003e84 <OV5640_SetResolution+0x94>
            }
          }
        }
        break;
 8003eca:	e078      	b.n	8003fbe <OV5640_SetResolution+0x1ce>
      case OV5640_R480x272:
        for (index = 0; index < (sizeof(OV5640_480x272) / 4U); index++)
 8003ecc:	2300      	movs	r3, #0
 8003ece:	613b      	str	r3, [r7, #16]
 8003ed0:	e01f      	b.n	8003f12 <OV5640_SetResolution+0x122>
        {
          if (ret != OV5640_ERROR)
 8003ed2:	697b      	ldr	r3, [r7, #20]
 8003ed4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ed8:	d018      	beq.n	8003f0c <OV5640_SetResolution+0x11c>
          {
            tmp = (uint8_t)OV5640_480x272[index][1];
 8003eda:	4a3d      	ldr	r2, [pc, #244]	; (8003fd0 <OV5640_SetResolution+0x1e0>)
 8003edc:	693b      	ldr	r3, [r7, #16]
 8003ede:	009b      	lsls	r3, r3, #2
 8003ee0:	4413      	add	r3, r2
 8003ee2:	885b      	ldrh	r3, [r3, #2]
 8003ee4:	b2db      	uxtb	r3, r3
 8003ee6:	73fb      	strb	r3, [r7, #15]
            if (OV5640_WriteReg(&OV5640->Context, OV5640_480x272[index][0], &tmp, 1) != OV5640_OK)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	f103 0018 	add.w	r0, r3, #24
 8003eee:	4a38      	ldr	r2, [pc, #224]	; (8003fd0 <OV5640_SetResolution+0x1e0>)
 8003ef0:	693b      	ldr	r3, [r7, #16]
 8003ef2:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8003ef6:	f107 020f 	add.w	r2, r7, #15
 8003efa:	2301      	movs	r3, #1
 8003efc:	f7ff ff17 	bl	8003d2e <OV5640_WriteReg>
 8003f00:	4603      	mov	r3, r0
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d002      	beq.n	8003f0c <OV5640_SetResolution+0x11c>
            {
              ret = OV5640_ERROR;
 8003f06:	f04f 33ff 	mov.w	r3, #4294967295
 8003f0a:	617b      	str	r3, [r7, #20]
        for (index = 0; index < (sizeof(OV5640_480x272) / 4U); index++)
 8003f0c:	693b      	ldr	r3, [r7, #16]
 8003f0e:	3301      	adds	r3, #1
 8003f10:	613b      	str	r3, [r7, #16]
 8003f12:	693b      	ldr	r3, [r7, #16]
 8003f14:	2b03      	cmp	r3, #3
 8003f16:	d9dc      	bls.n	8003ed2 <OV5640_SetResolution+0xe2>
            }
          }
        }
        break;
 8003f18:	e051      	b.n	8003fbe <OV5640_SetResolution+0x1ce>
      case OV5640_R640x480:
        for (index = 0; index < (sizeof(OV5640_VGA) / 4U); index++)
 8003f1a:	2300      	movs	r3, #0
 8003f1c:	613b      	str	r3, [r7, #16]
 8003f1e:	e01f      	b.n	8003f60 <OV5640_SetResolution+0x170>
        {
          if (ret != OV5640_ERROR)
 8003f20:	697b      	ldr	r3, [r7, #20]
 8003f22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f26:	d018      	beq.n	8003f5a <OV5640_SetResolution+0x16a>
          {
            tmp = (uint8_t)OV5640_VGA[index][1];
 8003f28:	4a2a      	ldr	r2, [pc, #168]	; (8003fd4 <OV5640_SetResolution+0x1e4>)
 8003f2a:	693b      	ldr	r3, [r7, #16]
 8003f2c:	009b      	lsls	r3, r3, #2
 8003f2e:	4413      	add	r3, r2
 8003f30:	885b      	ldrh	r3, [r3, #2]
 8003f32:	b2db      	uxtb	r3, r3
 8003f34:	73fb      	strb	r3, [r7, #15]
            if (OV5640_WriteReg(&OV5640->Context, OV5640_VGA[index][0], &tmp, 1) != OV5640_OK)
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	f103 0018 	add.w	r0, r3, #24
 8003f3c:	4a25      	ldr	r2, [pc, #148]	; (8003fd4 <OV5640_SetResolution+0x1e4>)
 8003f3e:	693b      	ldr	r3, [r7, #16]
 8003f40:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8003f44:	f107 020f 	add.w	r2, r7, #15
 8003f48:	2301      	movs	r3, #1
 8003f4a:	f7ff fef0 	bl	8003d2e <OV5640_WriteReg>
 8003f4e:	4603      	mov	r3, r0
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d002      	beq.n	8003f5a <OV5640_SetResolution+0x16a>
            {
              ret = OV5640_ERROR;
 8003f54:	f04f 33ff 	mov.w	r3, #4294967295
 8003f58:	617b      	str	r3, [r7, #20]
        for (index = 0; index < (sizeof(OV5640_VGA) / 4U); index++)
 8003f5a:	693b      	ldr	r3, [r7, #16]
 8003f5c:	3301      	adds	r3, #1
 8003f5e:	613b      	str	r3, [r7, #16]
 8003f60:	693b      	ldr	r3, [r7, #16]
 8003f62:	2b03      	cmp	r3, #3
 8003f64:	d9dc      	bls.n	8003f20 <OV5640_SetResolution+0x130>
            }
          }
        }
        break;
 8003f66:	e02a      	b.n	8003fbe <OV5640_SetResolution+0x1ce>
      case OV5640_R800x480:
        for (index = 0; index < (sizeof(OV5640_WVGA) / 4U); index++)
 8003f68:	2300      	movs	r3, #0
 8003f6a:	613b      	str	r3, [r7, #16]
 8003f6c:	e01f      	b.n	8003fae <OV5640_SetResolution+0x1be>
        {
          if (ret != OV5640_ERROR)
 8003f6e:	697b      	ldr	r3, [r7, #20]
 8003f70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f74:	d018      	beq.n	8003fa8 <OV5640_SetResolution+0x1b8>
          {
            tmp = (uint8_t)OV5640_WVGA[index][1];
 8003f76:	4a18      	ldr	r2, [pc, #96]	; (8003fd8 <OV5640_SetResolution+0x1e8>)
 8003f78:	693b      	ldr	r3, [r7, #16]
 8003f7a:	009b      	lsls	r3, r3, #2
 8003f7c:	4413      	add	r3, r2
 8003f7e:	885b      	ldrh	r3, [r3, #2]
 8003f80:	b2db      	uxtb	r3, r3
 8003f82:	73fb      	strb	r3, [r7, #15]
            if (OV5640_WriteReg(&OV5640->Context, OV5640_WVGA[index][0], &tmp, 1) != OV5640_OK)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	f103 0018 	add.w	r0, r3, #24
 8003f8a:	4a13      	ldr	r2, [pc, #76]	; (8003fd8 <OV5640_SetResolution+0x1e8>)
 8003f8c:	693b      	ldr	r3, [r7, #16]
 8003f8e:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8003f92:	f107 020f 	add.w	r2, r7, #15
 8003f96:	2301      	movs	r3, #1
 8003f98:	f7ff fec9 	bl	8003d2e <OV5640_WriteReg>
 8003f9c:	4603      	mov	r3, r0
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d002      	beq.n	8003fa8 <OV5640_SetResolution+0x1b8>
            {
              ret = OV5640_ERROR;
 8003fa2:	f04f 33ff 	mov.w	r3, #4294967295
 8003fa6:	617b      	str	r3, [r7, #20]
        for (index = 0; index < (sizeof(OV5640_WVGA) / 4U); index++)
 8003fa8:	693b      	ldr	r3, [r7, #16]
 8003faa:	3301      	adds	r3, #1
 8003fac:	613b      	str	r3, [r7, #16]
 8003fae:	693b      	ldr	r3, [r7, #16]
 8003fb0:	2b03      	cmp	r3, #3
 8003fb2:	d9dc      	bls.n	8003f6e <OV5640_SetResolution+0x17e>
            }
          }
        }
        break;
 8003fb4:	e003      	b.n	8003fbe <OV5640_SetResolution+0x1ce>
      default:
        ret = OV5640_ERROR;
 8003fb6:	f04f 33ff 	mov.w	r3, #4294967295
 8003fba:	617b      	str	r3, [r7, #20]
        break;
 8003fbc:	bf00      	nop
    }
  }

  return ret;
 8003fbe:	697b      	ldr	r3, [r7, #20]
}
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	3718      	adds	r7, #24
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	bd80      	pop	{r7, pc}
 8003fc8:	08014f3c 	.word	0x08014f3c
 8003fcc:	08014f4c 	.word	0x08014f4c
 8003fd0:	08014f5c 	.word	0x08014f5c
 8003fd4:	08014f6c 	.word	0x08014f6c
 8003fd8:	08014f7c 	.word	0x08014f7c

08003fdc <OV5640_SetPixelFormat>:

int32_t OV5640_SetPixelFormat(OV5640_Handle_t *OV5640, uint32_t PixelFormat)
{
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	b086      	sub	sp, #24
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
 8003fe4:	6039      	str	r1, [r7, #0]
  int32_t ret = OV5640_OK;
 8003fe6:	2300      	movs	r3, #0
 8003fe8:	617b      	str	r3, [r7, #20]
    {OV5640_FORMAT_CTRL00, 0x30},
    {OV5640_FORMAT_MUX_CTRL, 0x00},
  };

  /* Check if PixelFormat is supported */
  if ((PixelFormat != OV5640_RGB565) && (PixelFormat != OV5640_YUV422) &&
 8003fea:	683b      	ldr	r3, [r7, #0]
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d00f      	beq.n	8004010 <OV5640_SetPixelFormat+0x34>
 8003ff0:	683b      	ldr	r3, [r7, #0]
 8003ff2:	2b02      	cmp	r3, #2
 8003ff4:	d00c      	beq.n	8004010 <OV5640_SetPixelFormat+0x34>
 8003ff6:	683b      	ldr	r3, [r7, #0]
 8003ff8:	2b01      	cmp	r3, #1
 8003ffa:	d009      	beq.n	8004010 <OV5640_SetPixelFormat+0x34>
      (PixelFormat != OV5640_RGB888) && (PixelFormat != OV5640_Y8) &&
 8003ffc:	683b      	ldr	r3, [r7, #0]
 8003ffe:	2b07      	cmp	r3, #7
 8004000:	d006      	beq.n	8004010 <OV5640_SetPixelFormat+0x34>
 8004002:	683b      	ldr	r3, [r7, #0]
 8004004:	2b08      	cmp	r3, #8
 8004006:	d003      	beq.n	8004010 <OV5640_SetPixelFormat+0x34>
      (PixelFormat != OV5640_JPEG))
  {
    /* Pixel format not supported */
    ret = OV5640_ERROR;
 8004008:	f04f 33ff 	mov.w	r3, #4294967295
 800400c:	617b      	str	r3, [r7, #20]
 800400e:	e16a      	b.n	80042e6 <OV5640_SetPixelFormat+0x30a>
  }
  else
  {
    /* Set specific parameters for each PixelFormat */
    switch (PixelFormat)
 8004010:	683b      	ldr	r3, [r7, #0]
 8004012:	3b01      	subs	r3, #1
 8004014:	2b07      	cmp	r3, #7
 8004016:	f200 80c3 	bhi.w	80041a0 <OV5640_SetPixelFormat+0x1c4>
 800401a:	a201      	add	r2, pc, #4	; (adr r2, 8004020 <OV5640_SetPixelFormat+0x44>)
 800401c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004020:	08004099 	.word	0x08004099
 8004024:	08004041 	.word	0x08004041
 8004028:	080041a1 	.word	0x080041a1
 800402c:	080041a1 	.word	0x080041a1
 8004030:	080041a1 	.word	0x080041a1
 8004034:	080041a1 	.word	0x080041a1
 8004038:	080040f1 	.word	0x080040f1
 800403c:	08004149 	.word	0x08004149
    {
      case OV5640_YUV422:
        for (index = 0; index < (sizeof(OV5640_PF_YUV422) / 4U); index++)
 8004040:	2300      	movs	r3, #0
 8004042:	613b      	str	r3, [r7, #16]
 8004044:	e024      	b.n	8004090 <OV5640_SetPixelFormat+0xb4>
        {
          if (ret != OV5640_ERROR)
 8004046:	697b      	ldr	r3, [r7, #20]
 8004048:	f1b3 3fff 	cmp.w	r3, #4294967295
 800404c:	d01d      	beq.n	800408a <OV5640_SetPixelFormat+0xae>
          {
            tmp = (uint8_t)OV5640_PF_YUV422[index][1];
 800404e:	4aa8      	ldr	r2, [pc, #672]	; (80042f0 <OV5640_SetPixelFormat+0x314>)
 8004050:	693b      	ldr	r3, [r7, #16]
 8004052:	009b      	lsls	r3, r3, #2
 8004054:	4413      	add	r3, r2
 8004056:	885b      	ldrh	r3, [r3, #2]
 8004058:	b2db      	uxtb	r3, r3
 800405a:	73fb      	strb	r3, [r7, #15]
            if (OV5640_WriteReg(&OV5640->Context, OV5640_PF_YUV422[index][0], &tmp, 1) != OV5640_OK)
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	f103 0018 	add.w	r0, r3, #24
 8004062:	4aa3      	ldr	r2, [pc, #652]	; (80042f0 <OV5640_SetPixelFormat+0x314>)
 8004064:	693b      	ldr	r3, [r7, #16]
 8004066:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 800406a:	f107 020f 	add.w	r2, r7, #15
 800406e:	2301      	movs	r3, #1
 8004070:	f7ff fe5d 	bl	8003d2e <OV5640_WriteReg>
 8004074:	4603      	mov	r3, r0
 8004076:	2b00      	cmp	r3, #0
 8004078:	d003      	beq.n	8004082 <OV5640_SetPixelFormat+0xa6>
            {
              ret = OV5640_ERROR;
 800407a:	f04f 33ff 	mov.w	r3, #4294967295
 800407e:	617b      	str	r3, [r7, #20]
 8004080:	e003      	b.n	800408a <OV5640_SetPixelFormat+0xae>
            }
            else
            {
              (void)OV5640_Delay(OV5640, 1);
 8004082:	2101      	movs	r1, #1
 8004084:	6878      	ldr	r0, [r7, #4]
 8004086:	f7ff fe9b 	bl	8003dc0 <OV5640_Delay>
        for (index = 0; index < (sizeof(OV5640_PF_YUV422) / 4U); index++)
 800408a:	693b      	ldr	r3, [r7, #16]
 800408c:	3301      	adds	r3, #1
 800408e:	613b      	str	r3, [r7, #16]
 8004090:	693b      	ldr	r3, [r7, #16]
 8004092:	2b01      	cmp	r3, #1
 8004094:	d9d7      	bls.n	8004046 <OV5640_SetPixelFormat+0x6a>
            }
          }
        }
        break;
 8004096:	e0af      	b.n	80041f8 <OV5640_SetPixelFormat+0x21c>

      case OV5640_RGB888:
        for (index = 0; index < (sizeof(OV5640_PF_RGB888) / 4U); index++)
 8004098:	2300      	movs	r3, #0
 800409a:	613b      	str	r3, [r7, #16]
 800409c:	e024      	b.n	80040e8 <OV5640_SetPixelFormat+0x10c>
        {
          if (ret != OV5640_ERROR)
 800409e:	697b      	ldr	r3, [r7, #20]
 80040a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040a4:	d01d      	beq.n	80040e2 <OV5640_SetPixelFormat+0x106>
          {
            tmp = (uint8_t)OV5640_PF_RGB888[index][1];
 80040a6:	4a93      	ldr	r2, [pc, #588]	; (80042f4 <OV5640_SetPixelFormat+0x318>)
 80040a8:	693b      	ldr	r3, [r7, #16]
 80040aa:	009b      	lsls	r3, r3, #2
 80040ac:	4413      	add	r3, r2
 80040ae:	885b      	ldrh	r3, [r3, #2]
 80040b0:	b2db      	uxtb	r3, r3
 80040b2:	73fb      	strb	r3, [r7, #15]
            if (OV5640_WriteReg(&OV5640->Context, OV5640_PF_RGB888[index][0], &tmp, 1) != OV5640_OK)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	f103 0018 	add.w	r0, r3, #24
 80040ba:	4a8e      	ldr	r2, [pc, #568]	; (80042f4 <OV5640_SetPixelFormat+0x318>)
 80040bc:	693b      	ldr	r3, [r7, #16]
 80040be:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 80040c2:	f107 020f 	add.w	r2, r7, #15
 80040c6:	2301      	movs	r3, #1
 80040c8:	f7ff fe31 	bl	8003d2e <OV5640_WriteReg>
 80040cc:	4603      	mov	r3, r0
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d003      	beq.n	80040da <OV5640_SetPixelFormat+0xfe>
            {
              ret = OV5640_ERROR;
 80040d2:	f04f 33ff 	mov.w	r3, #4294967295
 80040d6:	617b      	str	r3, [r7, #20]
 80040d8:	e003      	b.n	80040e2 <OV5640_SetPixelFormat+0x106>
            }
            else
            {
              (void)OV5640_Delay(OV5640, 1);
 80040da:	2101      	movs	r1, #1
 80040dc:	6878      	ldr	r0, [r7, #4]
 80040de:	f7ff fe6f 	bl	8003dc0 <OV5640_Delay>
        for (index = 0; index < (sizeof(OV5640_PF_RGB888) / 4U); index++)
 80040e2:	693b      	ldr	r3, [r7, #16]
 80040e4:	3301      	adds	r3, #1
 80040e6:	613b      	str	r3, [r7, #16]
 80040e8:	693b      	ldr	r3, [r7, #16]
 80040ea:	2b01      	cmp	r3, #1
 80040ec:	d9d7      	bls.n	800409e <OV5640_SetPixelFormat+0xc2>
            }
          }
        }
        break;
 80040ee:	e083      	b.n	80041f8 <OV5640_SetPixelFormat+0x21c>

      case OV5640_Y8:
        for (index = 0; index < (sizeof(OV5640_PF_Y8) / 4U); index++)
 80040f0:	2300      	movs	r3, #0
 80040f2:	613b      	str	r3, [r7, #16]
 80040f4:	e024      	b.n	8004140 <OV5640_SetPixelFormat+0x164>
        {
          if (ret != OV5640_ERROR)
 80040f6:	697b      	ldr	r3, [r7, #20]
 80040f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040fc:	d01d      	beq.n	800413a <OV5640_SetPixelFormat+0x15e>
          {
            tmp = (uint8_t)OV5640_PF_Y8[index][1];
 80040fe:	4a7e      	ldr	r2, [pc, #504]	; (80042f8 <OV5640_SetPixelFormat+0x31c>)
 8004100:	693b      	ldr	r3, [r7, #16]
 8004102:	009b      	lsls	r3, r3, #2
 8004104:	4413      	add	r3, r2
 8004106:	885b      	ldrh	r3, [r3, #2]
 8004108:	b2db      	uxtb	r3, r3
 800410a:	73fb      	strb	r3, [r7, #15]
            if (OV5640_WriteReg(&OV5640->Context, OV5640_PF_Y8[index][0], &tmp, 1) != OV5640_OK)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	f103 0018 	add.w	r0, r3, #24
 8004112:	4a79      	ldr	r2, [pc, #484]	; (80042f8 <OV5640_SetPixelFormat+0x31c>)
 8004114:	693b      	ldr	r3, [r7, #16]
 8004116:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 800411a:	f107 020f 	add.w	r2, r7, #15
 800411e:	2301      	movs	r3, #1
 8004120:	f7ff fe05 	bl	8003d2e <OV5640_WriteReg>
 8004124:	4603      	mov	r3, r0
 8004126:	2b00      	cmp	r3, #0
 8004128:	d003      	beq.n	8004132 <OV5640_SetPixelFormat+0x156>
            {
              ret = OV5640_ERROR;
 800412a:	f04f 33ff 	mov.w	r3, #4294967295
 800412e:	617b      	str	r3, [r7, #20]
 8004130:	e003      	b.n	800413a <OV5640_SetPixelFormat+0x15e>
            }
            else
            {
              (void)OV5640_Delay(OV5640, 1);
 8004132:	2101      	movs	r1, #1
 8004134:	6878      	ldr	r0, [r7, #4]
 8004136:	f7ff fe43 	bl	8003dc0 <OV5640_Delay>
        for (index = 0; index < (sizeof(OV5640_PF_Y8) / 4U); index++)
 800413a:	693b      	ldr	r3, [r7, #16]
 800413c:	3301      	adds	r3, #1
 800413e:	613b      	str	r3, [r7, #16]
 8004140:	693b      	ldr	r3, [r7, #16]
 8004142:	2b01      	cmp	r3, #1
 8004144:	d9d7      	bls.n	80040f6 <OV5640_SetPixelFormat+0x11a>
            }
          }
        }
        break;
 8004146:	e057      	b.n	80041f8 <OV5640_SetPixelFormat+0x21c>

      case OV5640_JPEG:
        for (index = 0; index < (sizeof(OV5640_PF_JPEG) / 4U); index++)
 8004148:	2300      	movs	r3, #0
 800414a:	613b      	str	r3, [r7, #16]
 800414c:	e024      	b.n	8004198 <OV5640_SetPixelFormat+0x1bc>
        {
          if (ret != OV5640_ERROR)
 800414e:	697b      	ldr	r3, [r7, #20]
 8004150:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004154:	d01d      	beq.n	8004192 <OV5640_SetPixelFormat+0x1b6>
          {
            tmp = (uint8_t)OV5640_PF_JPEG[index][1];
 8004156:	4a69      	ldr	r2, [pc, #420]	; (80042fc <OV5640_SetPixelFormat+0x320>)
 8004158:	693b      	ldr	r3, [r7, #16]
 800415a:	009b      	lsls	r3, r3, #2
 800415c:	4413      	add	r3, r2
 800415e:	885b      	ldrh	r3, [r3, #2]
 8004160:	b2db      	uxtb	r3, r3
 8004162:	73fb      	strb	r3, [r7, #15]
            if (OV5640_WriteReg(&OV5640->Context, OV5640_PF_JPEG[index][0], &tmp, 1) != OV5640_OK)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	f103 0018 	add.w	r0, r3, #24
 800416a:	4a64      	ldr	r2, [pc, #400]	; (80042fc <OV5640_SetPixelFormat+0x320>)
 800416c:	693b      	ldr	r3, [r7, #16]
 800416e:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8004172:	f107 020f 	add.w	r2, r7, #15
 8004176:	2301      	movs	r3, #1
 8004178:	f7ff fdd9 	bl	8003d2e <OV5640_WriteReg>
 800417c:	4603      	mov	r3, r0
 800417e:	2b00      	cmp	r3, #0
 8004180:	d003      	beq.n	800418a <OV5640_SetPixelFormat+0x1ae>
            {
              ret = OV5640_ERROR;
 8004182:	f04f 33ff 	mov.w	r3, #4294967295
 8004186:	617b      	str	r3, [r7, #20]
 8004188:	e003      	b.n	8004192 <OV5640_SetPixelFormat+0x1b6>
            }
            else
            {
              (void)OV5640_Delay(OV5640, 1);
 800418a:	2101      	movs	r1, #1
 800418c:	6878      	ldr	r0, [r7, #4]
 800418e:	f7ff fe17 	bl	8003dc0 <OV5640_Delay>
        for (index = 0; index < (sizeof(OV5640_PF_JPEG) / 4U); index++)
 8004192:	693b      	ldr	r3, [r7, #16]
 8004194:	3301      	adds	r3, #1
 8004196:	613b      	str	r3, [r7, #16]
 8004198:	693b      	ldr	r3, [r7, #16]
 800419a:	2b01      	cmp	r3, #1
 800419c:	d9d7      	bls.n	800414e <OV5640_SetPixelFormat+0x172>
            }
          }
        }
        break;
 800419e:	e02b      	b.n	80041f8 <OV5640_SetPixelFormat+0x21c>

      case OV5640_RGB565:
      default:
        for (index = 0; index < (sizeof(OV5640_PF_RGB565) / 4U); index++)
 80041a0:	2300      	movs	r3, #0
 80041a2:	613b      	str	r3, [r7, #16]
 80041a4:	e024      	b.n	80041f0 <OV5640_SetPixelFormat+0x214>
        {
          if (ret != OV5640_ERROR)
 80041a6:	697b      	ldr	r3, [r7, #20]
 80041a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041ac:	d01d      	beq.n	80041ea <OV5640_SetPixelFormat+0x20e>
          {
            tmp = (uint8_t)OV5640_PF_RGB565[index][1];
 80041ae:	4a54      	ldr	r2, [pc, #336]	; (8004300 <OV5640_SetPixelFormat+0x324>)
 80041b0:	693b      	ldr	r3, [r7, #16]
 80041b2:	009b      	lsls	r3, r3, #2
 80041b4:	4413      	add	r3, r2
 80041b6:	885b      	ldrh	r3, [r3, #2]
 80041b8:	b2db      	uxtb	r3, r3
 80041ba:	73fb      	strb	r3, [r7, #15]
            if (OV5640_WriteReg(&OV5640->Context, OV5640_PF_RGB565[index][0], &tmp, 1) != OV5640_OK)
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	f103 0018 	add.w	r0, r3, #24
 80041c2:	4a4f      	ldr	r2, [pc, #316]	; (8004300 <OV5640_SetPixelFormat+0x324>)
 80041c4:	693b      	ldr	r3, [r7, #16]
 80041c6:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 80041ca:	f107 020f 	add.w	r2, r7, #15
 80041ce:	2301      	movs	r3, #1
 80041d0:	f7ff fdad 	bl	8003d2e <OV5640_WriteReg>
 80041d4:	4603      	mov	r3, r0
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d003      	beq.n	80041e2 <OV5640_SetPixelFormat+0x206>
            {
              ret = OV5640_ERROR;
 80041da:	f04f 33ff 	mov.w	r3, #4294967295
 80041de:	617b      	str	r3, [r7, #20]
 80041e0:	e003      	b.n	80041ea <OV5640_SetPixelFormat+0x20e>
            }
            else
            {
              (void)OV5640_Delay(OV5640, 1);
 80041e2:	2101      	movs	r1, #1
 80041e4:	6878      	ldr	r0, [r7, #4]
 80041e6:	f7ff fdeb 	bl	8003dc0 <OV5640_Delay>
        for (index = 0; index < (sizeof(OV5640_PF_RGB565) / 4U); index++)
 80041ea:	693b      	ldr	r3, [r7, #16]
 80041ec:	3301      	adds	r3, #1
 80041ee:	613b      	str	r3, [r7, #16]
 80041f0:	693b      	ldr	r3, [r7, #16]
 80041f2:	2b01      	cmp	r3, #1
 80041f4:	d9d7      	bls.n	80041a6 <OV5640_SetPixelFormat+0x1ca>
            }
          }
        }
        break;
 80041f6:	bf00      	nop

    }

    if (PixelFormat == OV5640_JPEG)
 80041f8:	683b      	ldr	r3, [r7, #0]
 80041fa:	2b08      	cmp	r3, #8
 80041fc:	d173      	bne.n	80042e6 <OV5640_SetPixelFormat+0x30a>
    {
      if (OV5640_ReadReg(&OV5640->Context, OV5640_TIMING_TC_REG21, &tmp, 1) != OV5640_OK)
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	f103 0018 	add.w	r0, r3, #24
 8004204:	f107 020f 	add.w	r2, r7, #15
 8004208:	2301      	movs	r3, #1
 800420a:	f643 0121 	movw	r1, #14369	; 0x3821
 800420e:	f7ff fd77 	bl	8003d00 <OV5640_ReadReg>
 8004212:	4603      	mov	r3, r0
 8004214:	2b00      	cmp	r3, #0
 8004216:	d003      	beq.n	8004220 <OV5640_SetPixelFormat+0x244>
      {
        ret = OV5640_ERROR;
 8004218:	f04f 33ff 	mov.w	r3, #4294967295
 800421c:	617b      	str	r3, [r7, #20]
 800421e:	e062      	b.n	80042e6 <OV5640_SetPixelFormat+0x30a>
      }
      else
      {
        tmp |= (1 << 5);
 8004220:	7bfb      	ldrb	r3, [r7, #15]
 8004222:	f043 0320 	orr.w	r3, r3, #32
 8004226:	b2db      	uxtb	r3, r3
 8004228:	73fb      	strb	r3, [r7, #15]
        if (OV5640_WriteReg(&OV5640->Context, OV5640_TIMING_TC_REG21, &tmp, 1) != OV5640_OK)
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	f103 0018 	add.w	r0, r3, #24
 8004230:	f107 020f 	add.w	r2, r7, #15
 8004234:	2301      	movs	r3, #1
 8004236:	f643 0121 	movw	r1, #14369	; 0x3821
 800423a:	f7ff fd78 	bl	8003d2e <OV5640_WriteReg>
 800423e:	4603      	mov	r3, r0
 8004240:	2b00      	cmp	r3, #0
 8004242:	d003      	beq.n	800424c <OV5640_SetPixelFormat+0x270>
        {
          ret = OV5640_ERROR;
 8004244:	f04f 33ff 	mov.w	r3, #4294967295
 8004248:	617b      	str	r3, [r7, #20]
 800424a:	e04c      	b.n	80042e6 <OV5640_SetPixelFormat+0x30a>
        }
        else
        {
          if (OV5640_ReadReg(&OV5640->Context, OV5640_SYSREM_RESET02, &tmp, 1) != OV5640_OK)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	f103 0018 	add.w	r0, r3, #24
 8004252:	f107 020f 	add.w	r2, r7, #15
 8004256:	2301      	movs	r3, #1
 8004258:	f243 0102 	movw	r1, #12290	; 0x3002
 800425c:	f7ff fd50 	bl	8003d00 <OV5640_ReadReg>
 8004260:	4603      	mov	r3, r0
 8004262:	2b00      	cmp	r3, #0
 8004264:	d003      	beq.n	800426e <OV5640_SetPixelFormat+0x292>
          {
            ret = OV5640_ERROR;
 8004266:	f04f 33ff 	mov.w	r3, #4294967295
 800426a:	617b      	str	r3, [r7, #20]
 800426c:	e03b      	b.n	80042e6 <OV5640_SetPixelFormat+0x30a>
          }
          else
          {
            tmp &= ~((1 << 4) | (1 << 3) | (1 << 2));
 800426e:	7bfb      	ldrb	r3, [r7, #15]
 8004270:	f023 031c 	bic.w	r3, r3, #28
 8004274:	b2db      	uxtb	r3, r3
 8004276:	73fb      	strb	r3, [r7, #15]
            if (OV5640_WriteReg(&OV5640->Context, OV5640_SYSREM_RESET02, &tmp, 1) != OV5640_OK)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	f103 0018 	add.w	r0, r3, #24
 800427e:	f107 020f 	add.w	r2, r7, #15
 8004282:	2301      	movs	r3, #1
 8004284:	f243 0102 	movw	r1, #12290	; 0x3002
 8004288:	f7ff fd51 	bl	8003d2e <OV5640_WriteReg>
 800428c:	4603      	mov	r3, r0
 800428e:	2b00      	cmp	r3, #0
 8004290:	d003      	beq.n	800429a <OV5640_SetPixelFormat+0x2be>
            {
              ret = OV5640_ERROR;
 8004292:	f04f 33ff 	mov.w	r3, #4294967295
 8004296:	617b      	str	r3, [r7, #20]
 8004298:	e025      	b.n	80042e6 <OV5640_SetPixelFormat+0x30a>
            }
            else
            {
              if (OV5640_ReadReg(&OV5640->Context, OV5640_CLOCK_ENABLE02, &tmp, 1) != OV5640_OK)
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	f103 0018 	add.w	r0, r3, #24
 80042a0:	f107 020f 	add.w	r2, r7, #15
 80042a4:	2301      	movs	r3, #1
 80042a6:	f243 0106 	movw	r1, #12294	; 0x3006
 80042aa:	f7ff fd29 	bl	8003d00 <OV5640_ReadReg>
 80042ae:	4603      	mov	r3, r0
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d003      	beq.n	80042bc <OV5640_SetPixelFormat+0x2e0>
              {
                ret = OV5640_ERROR;
 80042b4:	f04f 33ff 	mov.w	r3, #4294967295
 80042b8:	617b      	str	r3, [r7, #20]
 80042ba:	e014      	b.n	80042e6 <OV5640_SetPixelFormat+0x30a>
              }
              else
              {
                tmp |= ((1 << 5) | (1 << 3));
 80042bc:	7bfb      	ldrb	r3, [r7, #15]
 80042be:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 80042c2:	b2db      	uxtb	r3, r3
 80042c4:	73fb      	strb	r3, [r7, #15]
                if (OV5640_WriteReg(&OV5640->Context, OV5640_CLOCK_ENABLE02, &tmp, 1) != OV5640_OK)
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	f103 0018 	add.w	r0, r3, #24
 80042cc:	f107 020f 	add.w	r2, r7, #15
 80042d0:	2301      	movs	r3, #1
 80042d2:	f243 0106 	movw	r1, #12294	; 0x3006
 80042d6:	f7ff fd2a 	bl	8003d2e <OV5640_WriteReg>
 80042da:	4603      	mov	r3, r0
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d002      	beq.n	80042e6 <OV5640_SetPixelFormat+0x30a>
                {
                  ret = OV5640_ERROR;
 80042e0:	f04f 33ff 	mov.w	r3, #4294967295
 80042e4:	617b      	str	r3, [r7, #20]
          }
        }
      }
    }
  }
  return ret;
 80042e6:	697b      	ldr	r3, [r7, #20]
}
 80042e8:	4618      	mov	r0, r3
 80042ea:	3718      	adds	r7, #24
 80042ec:	46bd      	mov	sp, r7
 80042ee:	bd80      	pop	{r7, pc}
 80042f0:	08014f8c 	.word	0x08014f8c
 80042f4:	08014f94 	.word	0x08014f94
 80042f8:	08014f9c 	.word	0x08014f9c
 80042fc:	08014fa4 	.word	0x08014fa4
 8004300:	08014fac 	.word	0x08014fac

08004304 <OV5640_SetPolarities>:

int32_t OV5640_SetPolarities(OV5640_Handle_t *OV5640, uint32_t PclkPolarity, uint32_t HrefPolarity,
                             uint32_t VsyncPolarity)
{
 8004304:	b580      	push	{r7, lr}
 8004306:	b086      	sub	sp, #24
 8004308:	af00      	add	r7, sp, #0
 800430a:	60f8      	str	r0, [r7, #12]
 800430c:	60b9      	str	r1, [r7, #8]
 800430e:	607a      	str	r2, [r7, #4]
 8004310:	603b      	str	r3, [r7, #0]
  uint8_t tmp;
  int32_t ret = OV5640_OK;
 8004312:	2300      	movs	r3, #0
 8004314:	617b      	str	r3, [r7, #20]

  if ((OV5640 == NULL) || ((PclkPolarity != OV5640_POLARITY_PCLK_LOW) && (PclkPolarity != OV5640_POLARITY_PCLK_HIGH)) ||
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	2b00      	cmp	r3, #0
 800431a:	d011      	beq.n	8004340 <OV5640_SetPolarities+0x3c>
 800431c:	68bb      	ldr	r3, [r7, #8]
 800431e:	2b00      	cmp	r3, #0
 8004320:	d002      	beq.n	8004328 <OV5640_SetPolarities+0x24>
 8004322:	68bb      	ldr	r3, [r7, #8]
 8004324:	2b01      	cmp	r3, #1
 8004326:	d10b      	bne.n	8004340 <OV5640_SetPolarities+0x3c>
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2b00      	cmp	r3, #0
 800432c:	d002      	beq.n	8004334 <OV5640_SetPolarities+0x30>
      ((HrefPolarity != OV5640_POLARITY_HREF_LOW) && (HrefPolarity != OV5640_POLARITY_HREF_HIGH)) ||
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	2b01      	cmp	r3, #1
 8004332:	d105      	bne.n	8004340 <OV5640_SetPolarities+0x3c>
 8004334:	683b      	ldr	r3, [r7, #0]
 8004336:	2b01      	cmp	r3, #1
 8004338:	d006      	beq.n	8004348 <OV5640_SetPolarities+0x44>
      ((VsyncPolarity != OV5640_POLARITY_VSYNC_LOW) && (VsyncPolarity != OV5640_POLARITY_VSYNC_HIGH)))
 800433a:	683b      	ldr	r3, [r7, #0]
 800433c:	2b00      	cmp	r3, #0
 800433e:	d003      	beq.n	8004348 <OV5640_SetPolarities+0x44>
  {
    ret = OV5640_ERROR;
 8004340:	f04f 33ff 	mov.w	r3, #4294967295
 8004344:	617b      	str	r3, [r7, #20]
 8004346:	e01e      	b.n	8004386 <OV5640_SetPolarities+0x82>
  }
  else
  {
    tmp = (uint8_t)(PclkPolarity << 5U) | (HrefPolarity << 1U) | VsyncPolarity;
 8004348:	68bb      	ldr	r3, [r7, #8]
 800434a:	b2db      	uxtb	r3, r3
 800434c:	015b      	lsls	r3, r3, #5
 800434e:	b2da      	uxtb	r2, r3
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	b2db      	uxtb	r3, r3
 8004354:	005b      	lsls	r3, r3, #1
 8004356:	b2db      	uxtb	r3, r3
 8004358:	4313      	orrs	r3, r2
 800435a:	b2da      	uxtb	r2, r3
 800435c:	683b      	ldr	r3, [r7, #0]
 800435e:	b2db      	uxtb	r3, r3
 8004360:	4313      	orrs	r3, r2
 8004362:	b2db      	uxtb	r3, r3
 8004364:	74fb      	strb	r3, [r7, #19]

    if (OV5640_WriteReg(&OV5640->Context, OV5640_POLARITY_CTRL, &tmp, 1) != OV5640_OK)
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	f103 0018 	add.w	r0, r3, #24
 800436c:	f107 0213 	add.w	r2, r7, #19
 8004370:	2301      	movs	r3, #1
 8004372:	f244 7140 	movw	r1, #18240	; 0x4740
 8004376:	f7ff fcda 	bl	8003d2e <OV5640_WriteReg>
 800437a:	4603      	mov	r3, r0
 800437c:	2b00      	cmp	r3, #0
 800437e:	d002      	beq.n	8004386 <OV5640_SetPolarities+0x82>
    {
      ret = OV5640_ERROR;
 8004380:	f04f 33ff 	mov.w	r3, #4294967295
 8004384:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 8004386:	697b      	ldr	r3, [r7, #20]
}
 8004388:	4618      	mov	r0, r3
 800438a:	3718      	adds	r7, #24
 800438c:	46bd      	mov	sp, r7
 800438e:	bd80      	pop	{r7, pc}

08004390 <OV5640_ReadID>:

int32_t OV5640_ReadID(OV5640_Handle_t *OV5640, uint32_t *Id)
{
 8004390:	b580      	push	{r7, lr}
 8004392:	b084      	sub	sp, #16
 8004394:	af00      	add	r7, sp, #0
 8004396:	6078      	str	r0, [r7, #4]
 8004398:	6039      	str	r1, [r7, #0]

  /* Initialize I2C */
  //OV5640->IO.Init();

  /* Prepare the camera to be configured */
  tmp = 0x80;
 800439a:	2380      	movs	r3, #128	; 0x80
 800439c:	72fb      	strb	r3, [r7, #11]
  if (OV5640_WriteReg(&OV5640->Context, OV5640_SYSTEM_CTROL0, &tmp, 1) != OV5640_OK)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	f103 0018 	add.w	r0, r3, #24
 80043a4:	f107 020b 	add.w	r2, r7, #11
 80043a8:	2301      	movs	r3, #1
 80043aa:	f243 0108 	movw	r1, #12296	; 0x3008
 80043ae:	f7ff fcbe 	bl	8003d2e <OV5640_WriteReg>
 80043b2:	4603      	mov	r3, r0
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d003      	beq.n	80043c0 <OV5640_ReadID+0x30>
  {
    ret = OV5640_ERROR;
 80043b8:	f04f 33ff 	mov.w	r3, #4294967295
 80043bc:	60fb      	str	r3, [r7, #12]
 80043be:	e032      	b.n	8004426 <OV5640_ReadID+0x96>
  }
  else
  {
    (void)OV5640_Delay(OV5640, 500);
 80043c0:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80043c4:	6878      	ldr	r0, [r7, #4]
 80043c6:	f7ff fcfb 	bl	8003dc0 <OV5640_Delay>

    if (OV5640_ReadReg(&OV5640->Context, OV5640_CHIP_ID_HIGH_BYTE, &tmp, 1) != OV5640_OK)
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	f103 0018 	add.w	r0, r3, #24
 80043d0:	f107 020b 	add.w	r2, r7, #11
 80043d4:	2301      	movs	r3, #1
 80043d6:	f243 010a 	movw	r1, #12298	; 0x300a
 80043da:	f7ff fc91 	bl	8003d00 <OV5640_ReadReg>
 80043de:	4603      	mov	r3, r0
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d003      	beq.n	80043ec <OV5640_ReadID+0x5c>
    {
      ret = OV5640_ERROR;
 80043e4:	f04f 33ff 	mov.w	r3, #4294967295
 80043e8:	60fb      	str	r3, [r7, #12]
 80043ea:	e01c      	b.n	8004426 <OV5640_ReadID+0x96>
    }
    else
    {
      *Id = (uint32_t)tmp << 8U;
 80043ec:	7afb      	ldrb	r3, [r7, #11]
 80043ee:	021a      	lsls	r2, r3, #8
 80043f0:	683b      	ldr	r3, [r7, #0]
 80043f2:	601a      	str	r2, [r3, #0]
      if (OV5640_ReadReg(&OV5640->Context, OV5640_CHIP_ID_LOW_BYTE, &tmp, 1) != OV5640_OK)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	f103 0018 	add.w	r0, r3, #24
 80043fa:	f107 020b 	add.w	r2, r7, #11
 80043fe:	2301      	movs	r3, #1
 8004400:	f243 010b 	movw	r1, #12299	; 0x300b
 8004404:	f7ff fc7c 	bl	8003d00 <OV5640_ReadReg>
 8004408:	4603      	mov	r3, r0
 800440a:	2b00      	cmp	r3, #0
 800440c:	d003      	beq.n	8004416 <OV5640_ReadID+0x86>
      {
        ret = OV5640_ERROR;
 800440e:	f04f 33ff 	mov.w	r3, #4294967295
 8004412:	60fb      	str	r3, [r7, #12]
 8004414:	e007      	b.n	8004426 <OV5640_ReadID+0x96>
      }
      else
      {
        *Id |= tmp;
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	7afa      	ldrb	r2, [r7, #11]
 800441c:	431a      	orrs	r2, r3
 800441e:	683b      	ldr	r3, [r7, #0]
 8004420:	601a      	str	r2, [r3, #0]
        ret = OV5640_OK;
 8004422:	2300      	movs	r3, #0
 8004424:	60fb      	str	r3, [r7, #12]
      }
    }
  }

  /* Component status */
  return ret;
 8004426:	68fb      	ldr	r3, [r7, #12]
}
 8004428:	4618      	mov	r0, r3
 800442a:	3710      	adds	r7, #16
 800442c:	46bd      	mov	sp, r7
 800442e:	bd80      	pop	{r7, pc}

08004430 <VEML6030_Init>:

static int32_t VEML6030_ReadRegWrapper(void *Handle, uint8_t Reg, uint8_t *Buffer, uint8_t Length);
static int32_t VEML6030_WriteRegWrapper(void *Handle, uint8_t Reg, uint8_t *Buffer, uint8_t Length);

int32_t VEML6030_Init(VEML6030_Handle_t *Handle, VEML_InitSettings_t Settings, const VEML6030_IO_t *IO)
{
 8004430:	b5b0      	push	{r4, r5, r7, lr}
 8004432:	b086      	sub	sp, #24
 8004434:	af00      	add	r7, sp, #0
 8004436:	60f8      	str	r0, [r7, #12]
 8004438:	60b9      	str	r1, [r7, #8]
 800443a:	607a      	str	r2, [r7, #4]
	int32_t ret = VEML6030_Ok;
 800443c:	2300      	movs	r3, #0
 800443e:	617b      	str	r3, [r7, #20]
	if(Handle == NULL)
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	2b00      	cmp	r3, #0
 8004444:	d102      	bne.n	800444c <VEML6030_Init+0x1c>
	{
        return VEML6030_HandleError;
 8004446:	f04f 33ff 	mov.w	r3, #4294967295
 800444a:	e081      	b.n	8004550 <VEML6030_Init+0x120>
	}

	if(Settings.PowerSavingMode > 0x07)
 800444c:	7abb      	ldrb	r3, [r7, #10]
 800444e:	2b07      	cmp	r3, #7
 8004450:	d902      	bls.n	8004458 <VEML6030_Init+0x28>
	{
        return VEML6030_PSM_Err;
 8004452:	f06f 0303 	mvn.w	r3, #3
 8004456:	e07b      	b.n	8004550 <VEML6030_Init+0x120>
	}

	if(Handle->Status != VEML6030_STATUS_INITIALIZED)
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800445e:	2b01      	cmp	r3, #1
 8004460:	d075      	beq.n	800454e <VEML6030_Init+0x11e>
	{
		if(IO->Read == NULL || IO->Write == NULL)
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	68db      	ldr	r3, [r3, #12]
 8004466:	2b00      	cmp	r3, #0
 8004468:	d003      	beq.n	8004472 <VEML6030_Init+0x42>
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	689b      	ldr	r3, [r3, #8]
 800446e:	2b00      	cmp	r3, #0
 8004470:	d102      	bne.n	8004478 <VEML6030_Init+0x48>
		{
			return VEML6030_IOError;
 8004472:	f06f 0301 	mvn.w	r3, #1
 8004476:	e06b      	b.n	8004550 <VEML6030_Init+0x120>
		}

        uint16_t ALS_IT = (Settings.ALSConfig >> 6) & 0xF;
 8004478:	893b      	ldrh	r3, [r7, #8]
 800447a:	099b      	lsrs	r3, r3, #6
 800447c:	b29b      	uxth	r3, r3
 800447e:	f003 030f 	and.w	r3, r3, #15
 8004482:	827b      	strh	r3, [r7, #18]
        uint16_t ALS_GAIN = (Settings.ALSConfig >> 11) & 0x3;
 8004484:	893b      	ldrh	r3, [r7, #8]
 8004486:	0adb      	lsrs	r3, r3, #11
 8004488:	b29b      	uxth	r3, r3
 800448a:	f003 0303 	and.w	r3, r3, #3
 800448e:	823b      	strh	r3, [r7, #16]
        if(ALS_GAIN > 3 || (ALS_IT != 0 && ALS_IT != 1 && ALS_IT != 2 && ALS_IT != 3 && ALS_IT != 8 && ALS_IT != 0xC))
 8004490:	8a3b      	ldrh	r3, [r7, #16]
 8004492:	2b03      	cmp	r3, #3
 8004494:	d811      	bhi.n	80044ba <VEML6030_Init+0x8a>
 8004496:	8a7b      	ldrh	r3, [r7, #18]
 8004498:	2b00      	cmp	r3, #0
 800449a:	d011      	beq.n	80044c0 <VEML6030_Init+0x90>
 800449c:	8a7b      	ldrh	r3, [r7, #18]
 800449e:	2b01      	cmp	r3, #1
 80044a0:	d00e      	beq.n	80044c0 <VEML6030_Init+0x90>
 80044a2:	8a7b      	ldrh	r3, [r7, #18]
 80044a4:	2b02      	cmp	r3, #2
 80044a6:	d00b      	beq.n	80044c0 <VEML6030_Init+0x90>
 80044a8:	8a7b      	ldrh	r3, [r7, #18]
 80044aa:	2b03      	cmp	r3, #3
 80044ac:	d008      	beq.n	80044c0 <VEML6030_Init+0x90>
 80044ae:	8a7b      	ldrh	r3, [r7, #18]
 80044b0:	2b08      	cmp	r3, #8
 80044b2:	d005      	beq.n	80044c0 <VEML6030_Init+0x90>
 80044b4:	8a7b      	ldrh	r3, [r7, #18]
 80044b6:	2b0c      	cmp	r3, #12
 80044b8:	d002      	beq.n	80044c0 <VEML6030_Init+0x90>
        {
        	return VEML6030_ParamError;
 80044ba:	f06f 0304 	mvn.w	r3, #4
 80044be:	e047      	b.n	8004550 <VEML6030_Init+0x120>
        }
		Handle->Resolution = ResolutionLookUpTable[ALS_IT][ALS_GAIN];
 80044c0:	8a7a      	ldrh	r2, [r7, #18]
 80044c2:	8a3b      	ldrh	r3, [r7, #16]
 80044c4:	4924      	ldr	r1, [pc, #144]	; (8004558 <VEML6030_Init+0x128>)
 80044c6:	0092      	lsls	r2, r2, #2
 80044c8:	4413      	add	r3, r2
 80044ca:	009b      	lsls	r3, r3, #2
 80044cc:	440b      	add	r3, r1
 80044ce:	681a      	ldr	r2, [r3, #0]
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	629a      	str	r2, [r3, #40]	; 0x28

		Handle->Context.Handle = Handle;
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	68fa      	ldr	r2, [r7, #12]
 80044d8:	619a      	str	r2, [r3, #24]
		Handle->Context.Write = VEML6030_WriteRegWrapper;
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	4a1f      	ldr	r2, [pc, #124]	; (800455c <VEML6030_Init+0x12c>)
 80044de:	61da      	str	r2, [r3, #28]
		Handle->Context.Read = VEML6030_ReadRegWrapper;
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	4a1f      	ldr	r2, [pc, #124]	; (8004560 <VEML6030_Init+0x130>)
 80044e4:	621a      	str	r2, [r3, #32]
		Handle->IO = *IO;
 80044e6:	68fa      	ldr	r2, [r7, #12]
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	4614      	mov	r4, r2
 80044ec:	461d      	mov	r5, r3
 80044ee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80044f0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80044f2:	e895 0003 	ldmia.w	r5, {r0, r1}
 80044f6:	e884 0003 	stmia.w	r4, {r0, r1}
		if(Handle->IO.Init != NULL)
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d002      	beq.n	8004508 <VEML6030_Init+0xd8>
		{
            Handle->IO.Init();
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	4798      	blx	r3
		}

		ret = VEML6030_WriteReg(&Handle->Context, VEML6030_REG_ALS_CONF, (uint8_t*)&Settings.ALSConfig, 2);
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	f103 0018 	add.w	r0, r3, #24
 800450e:	f107 0208 	add.w	r2, r7, #8
 8004512:	2302      	movs	r3, #2
 8004514:	2100      	movs	r1, #0
 8004516:	f000 f90d 	bl	8004734 <VEML6030_WriteReg>
 800451a:	6178      	str	r0, [r7, #20]
		if(ret != VEML6030_Ok)
 800451c:	697b      	ldr	r3, [r7, #20]
 800451e:	2b00      	cmp	r3, #0
 8004520:	d001      	beq.n	8004526 <VEML6030_Init+0xf6>
		{
			return ret;
 8004522:	697b      	ldr	r3, [r7, #20]
 8004524:	e014      	b.n	8004550 <VEML6030_Init+0x120>
		}

		ret = VEML6030_WriteReg(&Handle->Context, VEML6030_REG_POWERSAVING, (uint8_t*)&Settings.PowerSavingMode, 2);
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	f103 0018 	add.w	r0, r3, #24
 800452c:	f107 0308 	add.w	r3, r7, #8
 8004530:	1c9a      	adds	r2, r3, #2
 8004532:	2302      	movs	r3, #2
 8004534:	2103      	movs	r1, #3
 8004536:	f000 f8fd 	bl	8004734 <VEML6030_WriteReg>
 800453a:	6178      	str	r0, [r7, #20]
		if(ret != VEML6030_Ok)
 800453c:	697b      	ldr	r3, [r7, #20]
 800453e:	2b00      	cmp	r3, #0
 8004540:	d001      	beq.n	8004546 <VEML6030_Init+0x116>
		{
			return ret;
 8004542:	697b      	ldr	r3, [r7, #20]
 8004544:	e004      	b.n	8004550 <VEML6030_Init+0x120>
		}
		Handle->Status = VEML6030_STATUS_INITIALIZED;
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	2201      	movs	r2, #1
 800454a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	}
	return VEML6030_Ok;
 800454e:	2300      	movs	r3, #0
}
 8004550:	4618      	mov	r0, r3
 8004552:	3718      	adds	r7, #24
 8004554:	46bd      	mov	sp, r7
 8004556:	bdb0      	pop	{r4, r5, r7, pc}
 8004558:	08014fb4 	.word	0x08014fb4
 800455c:	08004601 	.word	0x08004601
 8004560:	080045bf 	.word	0x080045bf

08004564 <VEML6030_ReadLight>:

int32_t VEML6030_ReadLight(VEML6030_Handle_t *Handle, float *Light)
{
 8004564:	b580      	push	{r7, lr}
 8004566:	b084      	sub	sp, #16
 8004568:	af00      	add	r7, sp, #0
 800456a:	6078      	str	r0, [r7, #4]
 800456c:	6039      	str	r1, [r7, #0]
	if(Handle == NULL)
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	2b00      	cmp	r3, #0
 8004572:	d102      	bne.n	800457a <VEML6030_ReadLight+0x16>
	{
		return VEML6030_HandleError;
 8004574:	f04f 33ff 	mov.w	r3, #4294967295
 8004578:	e01d      	b.n	80045b6 <VEML6030_ReadLight+0x52>
	}

	if(Handle->Status != VEML6030_STATUS_INITIALIZED)
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004580:	2b01      	cmp	r3, #1
 8004582:	d002      	beq.n	800458a <VEML6030_ReadLight+0x26>
	{
		return VEML6030_InitError;
 8004584:	f06f 0302 	mvn.w	r3, #2
 8004588:	e015      	b.n	80045b6 <VEML6030_ReadLight+0x52>
	}
	uint16_t Buffer;
	int32_t ret = VEML6030_ReadReg(&Handle->Context, VEML6030_REG_ALS, (uint8_t*)&Buffer, 2);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	f103 0018 	add.w	r0, r3, #24
 8004590:	f107 020a 	add.w	r2, r7, #10
 8004594:	2302      	movs	r3, #2
 8004596:	2104      	movs	r1, #4
 8004598:	f000 f8a8 	bl	80046ec <VEML6030_ReadReg>
 800459c:	60f8      	str	r0, [r7, #12]
	if(ret != VEML6030_Ok)
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d001      	beq.n	80045a8 <VEML6030_ReadLight+0x44>
	{
		return ret;
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	e006      	b.n	80045b6 <VEML6030_ReadLight+0x52>
	}
	ConvertLight(Handle,Buffer,Light);
 80045a8:	897b      	ldrh	r3, [r7, #10]
 80045aa:	683a      	ldr	r2, [r7, #0]
 80045ac:	4619      	mov	r1, r3
 80045ae:	6878      	ldr	r0, [r7, #4]
 80045b0:	f000 f847 	bl	8004642 <ConvertLight>
	return VEML6030_Ok;
 80045b4:	2300      	movs	r3, #0
}
 80045b6:	4618      	mov	r0, r3
 80045b8:	3710      	adds	r7, #16
 80045ba:	46bd      	mov	sp, r7
 80045bc:	bd80      	pop	{r7, pc}

080045be <VEML6030_ReadRegWrapper>:
	return VEML6030_Ok;
}


static int32_t VEML6030_ReadRegWrapper(void *Handle, uint8_t Reg, uint8_t *Buffer, uint8_t Length)
{
 80045be:	b580      	push	{r7, lr}
 80045c0:	b086      	sub	sp, #24
 80045c2:	af00      	add	r7, sp, #0
 80045c4:	60f8      	str	r0, [r7, #12]
 80045c6:	607a      	str	r2, [r7, #4]
 80045c8:	461a      	mov	r2, r3
 80045ca:	460b      	mov	r3, r1
 80045cc:	72fb      	strb	r3, [r7, #11]
 80045ce:	4613      	mov	r3, r2
 80045d0:	72bb      	strb	r3, [r7, #10]
	VEML6030_Handle_t *Dev = Handle;
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	617b      	str	r3, [r7, #20]
	int32_t ret = VEML6030_Ok;
 80045d6:	2300      	movs	r3, #0
 80045d8:	613b      	str	r3, [r7, #16]
	if(Dev->IO.Read != NULL)
 80045da:	697b      	ldr	r3, [r7, #20]
 80045dc:	68db      	ldr	r3, [r3, #12]
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d008      	beq.n	80045f4 <VEML6030_ReadRegWrapper+0x36>
	{
        ret = Dev->IO.Read(Reg,Buffer,Length);
 80045e2:	697b      	ldr	r3, [r7, #20]
 80045e4:	68db      	ldr	r3, [r3, #12]
 80045e6:	7aba      	ldrb	r2, [r7, #10]
 80045e8:	7af8      	ldrb	r0, [r7, #11]
 80045ea:	6879      	ldr	r1, [r7, #4]
 80045ec:	4798      	blx	r3
 80045ee:	6138      	str	r0, [r7, #16]
        return ret;
 80045f0:	693b      	ldr	r3, [r7, #16]
 80045f2:	e001      	b.n	80045f8 <VEML6030_ReadRegWrapper+0x3a>
	}
    return VEML6030_IOError;
 80045f4:	f06f 0301 	mvn.w	r3, #1
}
 80045f8:	4618      	mov	r0, r3
 80045fa:	3718      	adds	r7, #24
 80045fc:	46bd      	mov	sp, r7
 80045fe:	bd80      	pop	{r7, pc}

08004600 <VEML6030_WriteRegWrapper>:

static int32_t VEML6030_WriteRegWrapper(void *Handle, uint8_t Reg, uint8_t *Buffer, uint8_t Length)
{
 8004600:	b580      	push	{r7, lr}
 8004602:	b086      	sub	sp, #24
 8004604:	af00      	add	r7, sp, #0
 8004606:	60f8      	str	r0, [r7, #12]
 8004608:	607a      	str	r2, [r7, #4]
 800460a:	461a      	mov	r2, r3
 800460c:	460b      	mov	r3, r1
 800460e:	72fb      	strb	r3, [r7, #11]
 8004610:	4613      	mov	r3, r2
 8004612:	72bb      	strb	r3, [r7, #10]
	VEML6030_Handle_t *Dev = Handle;
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	617b      	str	r3, [r7, #20]
	int32_t ret = VEML6030_Ok;
 8004618:	2300      	movs	r3, #0
 800461a:	613b      	str	r3, [r7, #16]
	if(Dev->IO.Write != NULL)
 800461c:	697b      	ldr	r3, [r7, #20]
 800461e:	689b      	ldr	r3, [r3, #8]
 8004620:	2b00      	cmp	r3, #0
 8004622:	d008      	beq.n	8004636 <VEML6030_WriteRegWrapper+0x36>
	{
        ret = Dev->IO.Write(Reg,Buffer,Length);
 8004624:	697b      	ldr	r3, [r7, #20]
 8004626:	689b      	ldr	r3, [r3, #8]
 8004628:	7aba      	ldrb	r2, [r7, #10]
 800462a:	7af8      	ldrb	r0, [r7, #11]
 800462c:	6879      	ldr	r1, [r7, #4]
 800462e:	4798      	blx	r3
 8004630:	6138      	str	r0, [r7, #16]
        return ret;
 8004632:	693b      	ldr	r3, [r7, #16]
 8004634:	e001      	b.n	800463a <VEML6030_WriteRegWrapper+0x3a>
	}
    return VEML6030_IOError;
 8004636:	f06f 0301 	mvn.w	r3, #1
}
 800463a:	4618      	mov	r0, r3
 800463c:	3718      	adds	r7, #24
 800463e:	46bd      	mov	sp, r7
 8004640:	bd80      	pop	{r7, pc}

08004642 <ConvertLight>:

static void ConvertLight(VEML6030_Handle_t *Handle, uint16_t Buffer, float *Light)
{
 8004642:	b480      	push	{r7}
 8004644:	b085      	sub	sp, #20
 8004646:	af00      	add	r7, sp, #0
 8004648:	60f8      	str	r0, [r7, #12]
 800464a:	460b      	mov	r3, r1
 800464c:	607a      	str	r2, [r7, #4]
 800464e:	817b      	strh	r3, [r7, #10]
	*Light = Buffer * Handle->Resolution;
 8004650:	897b      	ldrh	r3, [r7, #10]
 8004652:	ee07 3a90 	vmov	s15, r3
 8004656:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8004660:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	edc3 7a00 	vstr	s15, [r3]
}
 800466a:	bf00      	nop
 800466c:	3714      	adds	r7, #20
 800466e:	46bd      	mov	sp, r7
 8004670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004674:	4770      	bx	lr

08004676 <VEML6030_ValidateParams>:
#include <stdint.h>
#include <stddef.h>


static int32_t VEML6030_ValidateParams(VEML6030_Context_t *Context, uint8_t Reg, uint8_t *Buffer, uint8_t Length)
{
 8004676:	b480      	push	{r7}
 8004678:	b087      	sub	sp, #28
 800467a:	af00      	add	r7, sp, #0
 800467c:	60f8      	str	r0, [r7, #12]
 800467e:	607a      	str	r2, [r7, #4]
 8004680:	461a      	mov	r2, r3
 8004682:	460b      	mov	r3, r1
 8004684:	72fb      	strb	r3, [r7, #11]
 8004686:	4613      	mov	r3, r2
 8004688:	72bb      	strb	r3, [r7, #10]
	int32_t ret = VEML6030_REG_OK;
 800468a:	2300      	movs	r3, #0
 800468c:	617b      	str	r3, [r7, #20]
    if(Context == NULL || Context->Read == NULL || Context->Write == NULL || Context->Handle == NULL)
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	2b00      	cmp	r3, #0
 8004692:	d00b      	beq.n	80046ac <VEML6030_ValidateParams+0x36>
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	689b      	ldr	r3, [r3, #8]
 8004698:	2b00      	cmp	r3, #0
 800469a:	d007      	beq.n	80046ac <VEML6030_ValidateParams+0x36>
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	685b      	ldr	r3, [r3, #4]
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d003      	beq.n	80046ac <VEML6030_ValidateParams+0x36>
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d103      	bne.n	80046b4 <VEML6030_ValidateParams+0x3e>
    {
    	ret |= VEML6030_REG_CONTEXT_ERR;
 80046ac:	697b      	ldr	r3, [r7, #20]
 80046ae:	f043 4308 	orr.w	r3, r3, #2281701376	; 0x88000000
 80046b2:	617b      	str	r3, [r7, #20]
    }

    if(Reg > VEML6030_REG_ALS_INT)
 80046b4:	7afb      	ldrb	r3, [r7, #11]
 80046b6:	2b06      	cmp	r3, #6
 80046b8:	d903      	bls.n	80046c2 <VEML6030_ValidateParams+0x4c>
    {
    	ret |= VEML6030_REG_ADDR_ERR;
 80046ba:	697b      	ldr	r3, [r7, #20]
 80046bc:	f043 4310 	orr.w	r3, r3, #2415919104	; 0x90000000
 80046c0:	617b      	str	r3, [r7, #20]
    }

    if(Buffer == NULL)
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d103      	bne.n	80046d0 <VEML6030_ValidateParams+0x5a>
    {
    	ret |= VEML6030_REG_BUFFER_ERR;
 80046c8:	697b      	ldr	r3, [r7, #20]
 80046ca:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80046ce:	617b      	str	r3, [r7, #20]
    }

    if(Length == 0)
 80046d0:	7abb      	ldrb	r3, [r7, #10]
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d103      	bne.n	80046de <VEML6030_ValidateParams+0x68>
    {
       ret |= VEML6030_REG_LENGTH_ERR;
 80046d6:	697b      	ldr	r3, [r7, #20]
 80046d8:	f043 4320 	orr.w	r3, r3, #2684354560	; 0xa0000000
 80046dc:	617b      	str	r3, [r7, #20]
    }

    return ret;
 80046de:	697b      	ldr	r3, [r7, #20]
}
 80046e0:	4618      	mov	r0, r3
 80046e2:	371c      	adds	r7, #28
 80046e4:	46bd      	mov	sp, r7
 80046e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ea:	4770      	bx	lr

080046ec <VEML6030_ReadReg>:

int32_t VEML6030_ReadReg(VEML6030_Context_t *Context,uint8_t Reg, uint8_t *Buffer, uint8_t Length)
{
 80046ec:	b590      	push	{r4, r7, lr}
 80046ee:	b087      	sub	sp, #28
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	60f8      	str	r0, [r7, #12]
 80046f4:	607a      	str	r2, [r7, #4]
 80046f6:	461a      	mov	r2, r3
 80046f8:	460b      	mov	r3, r1
 80046fa:	72fb      	strb	r3, [r7, #11]
 80046fc:	4613      	mov	r3, r2
 80046fe:	72bb      	strb	r3, [r7, #10]
    int32_t ret = VEML6030_ValidateParams(Context,Reg,Buffer,Length);
 8004700:	7abb      	ldrb	r3, [r7, #10]
 8004702:	7af9      	ldrb	r1, [r7, #11]
 8004704:	687a      	ldr	r2, [r7, #4]
 8004706:	68f8      	ldr	r0, [r7, #12]
 8004708:	f7ff ffb5 	bl	8004676 <VEML6030_ValidateParams>
 800470c:	6178      	str	r0, [r7, #20]
    if(ret != VEML6030_REG_OK)
 800470e:	697b      	ldr	r3, [r7, #20]
 8004710:	2b00      	cmp	r3, #0
 8004712:	d001      	beq.n	8004718 <VEML6030_ReadReg+0x2c>
    {
    	return ret;
 8004714:	697b      	ldr	r3, [r7, #20]
 8004716:	e009      	b.n	800472c <VEML6030_ReadReg+0x40>
    }
    ret = Context->Read(Context->Handle,Reg,Buffer,Length);
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	689c      	ldr	r4, [r3, #8]
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	6818      	ldr	r0, [r3, #0]
 8004720:	7abb      	ldrb	r3, [r7, #10]
 8004722:	7af9      	ldrb	r1, [r7, #11]
 8004724:	687a      	ldr	r2, [r7, #4]
 8004726:	47a0      	blx	r4
 8004728:	6178      	str	r0, [r7, #20]
    return ret;
 800472a:	697b      	ldr	r3, [r7, #20]
}
 800472c:	4618      	mov	r0, r3
 800472e:	371c      	adds	r7, #28
 8004730:	46bd      	mov	sp, r7
 8004732:	bd90      	pop	{r4, r7, pc}

08004734 <VEML6030_WriteReg>:

int32_t VEML6030_WriteReg(VEML6030_Context_t *Context,uint8_t Reg, uint8_t *Buffer, uint8_t Length)
{
 8004734:	b590      	push	{r4, r7, lr}
 8004736:	b087      	sub	sp, #28
 8004738:	af00      	add	r7, sp, #0
 800473a:	60f8      	str	r0, [r7, #12]
 800473c:	607a      	str	r2, [r7, #4]
 800473e:	461a      	mov	r2, r3
 8004740:	460b      	mov	r3, r1
 8004742:	72fb      	strb	r3, [r7, #11]
 8004744:	4613      	mov	r3, r2
 8004746:	72bb      	strb	r3, [r7, #10]
    int32_t ret = VEML6030_ValidateParams(Context,Reg,Buffer,Length);
 8004748:	7abb      	ldrb	r3, [r7, #10]
 800474a:	7af9      	ldrb	r1, [r7, #11]
 800474c:	687a      	ldr	r2, [r7, #4]
 800474e:	68f8      	ldr	r0, [r7, #12]
 8004750:	f7ff ff91 	bl	8004676 <VEML6030_ValidateParams>
 8004754:	6178      	str	r0, [r7, #20]
    if(ret != VEML6030_REG_OK)
 8004756:	697b      	ldr	r3, [r7, #20]
 8004758:	2b00      	cmp	r3, #0
 800475a:	d001      	beq.n	8004760 <VEML6030_WriteReg+0x2c>
    {
    	return ret;
 800475c:	697b      	ldr	r3, [r7, #20]
 800475e:	e009      	b.n	8004774 <VEML6030_WriteReg+0x40>
    }
    ret = Context->Write(Context->Handle,Reg,Buffer,Length);
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	685c      	ldr	r4, [r3, #4]
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	6818      	ldr	r0, [r3, #0]
 8004768:	7abb      	ldrb	r3, [r7, #10]
 800476a:	7af9      	ldrb	r1, [r7, #11]
 800476c:	687a      	ldr	r2, [r7, #4]
 800476e:	47a0      	blx	r4
 8004770:	6178      	str	r0, [r7, #20]
    return ret;
 8004772:	697b      	ldr	r3, [r7, #20]
}
 8004774:	4618      	mov	r0, r3
 8004776:	371c      	adds	r7, #28
 8004778:	46bd      	mov	sp, r7
 800477a:	bd90      	pop	{r4, r7, pc}

0800477c <App_ThreadX_Init>:
  * @brief  Application ThreadX Initialization.
  * @param memory_ptr: memory pointer
  * @retval int
  */
UINT App_ThreadX_Init(VOID *memory_ptr)
{
 800477c:	b580      	push	{r7, lr}
 800477e:	b08e      	sub	sp, #56	; 0x38
 8004780:	af08      	add	r7, sp, #32
 8004782:	6078      	str	r0, [r7, #4]
  UINT ret = TX_SUCCESS;
 8004784:	2300      	movs	r3, #0
 8004786:	617b      	str	r3, [r7, #20]
  TX_BYTE_POOL *byte_pool = (TX_BYTE_POOL*)memory_ptr;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	613b      	str	r3, [r7, #16]

   /* USER CODE BEGIN App_ThreadX_MEM_POOL */
  (void)byte_pool;
  UCHAR *Ptr = byte_pool->tx_byte_pool_start;
 800478c:	693b      	ldr	r3, [r7, #16]
 800478e:	699b      	ldr	r3, [r3, #24]
 8004790:	60fb      	str	r3, [r7, #12]
  /* USER CODE END App_ThreadX_MEM_POOL */

  /* USER CODE BEGIN App_ThreadX_Init */

  if(tx_byte_allocate(byte_pool, (VOID **) &Ptr, LED_STACK_SIZE, TX_NO_WAIT) != TX_SUCCESS)
 8004792:	f107 010c 	add.w	r1, r7, #12
 8004796:	2300      	movs	r3, #0
 8004798:	f44f 7200 	mov.w	r2, #512	; 0x200
 800479c:	6938      	ldr	r0, [r7, #16]
 800479e:	f00f f871 	bl	8013884 <_txe_byte_allocate>
 80047a2:	4603      	mov	r3, r0
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d001      	beq.n	80047ac <App_ThreadX_Init+0x30>
  {
	  return TX_POOL_ERROR;
 80047a8:	2302      	movs	r3, #2
 80047aa:	e113      	b.n	80049d4 <App_ThreadX_Init+0x258>
  }
  ret = tx_thread_create(&LED_Red_Toggle,           //Thread Ptr
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	22b0      	movs	r2, #176	; 0xb0
 80047b0:	9206      	str	r2, [sp, #24]
 80047b2:	2201      	movs	r2, #1
 80047b4:	9205      	str	r2, [sp, #20]
 80047b6:	2201      	movs	r2, #1
 80047b8:	9204      	str	r2, [sp, #16]
 80047ba:	220f      	movs	r2, #15
 80047bc:	9203      	str	r2, [sp, #12]
 80047be:	220f      	movs	r2, #15
 80047c0:	9202      	str	r2, [sp, #8]
 80047c2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80047c6:	9201      	str	r2, [sp, #4]
 80047c8:	9300      	str	r3, [sp, #0]
 80047ca:	2300      	movs	r3, #0
 80047cc:	4a83      	ldr	r2, [pc, #524]	; (80049dc <App_ThreadX_Init+0x260>)
 80047ce:	4984      	ldr	r1, [pc, #528]	; (80049e0 <App_ThreadX_Init+0x264>)
 80047d0:	4884      	ldr	r0, [pc, #528]	; (80049e4 <App_ThreadX_Init+0x268>)
 80047d2:	f00f fa9d 	bl	8013d10 <_txe_thread_create>
 80047d6:	6178      	str	r0, [r7, #20]
					LED_STACK_SIZE,     //Stack Size
					15,                    //Priority
					15,                    //Preempt Threshold
					1,                     //Time Slize
					TX_AUTO_START);        //Auto Start or Auto Activate
  ret = tx_byte_allocate(byte_pool, (VOID **) &Ptr, LED_STACK_SIZE, TX_NO_WAIT);
 80047d8:	f107 010c 	add.w	r1, r7, #12
 80047dc:	2300      	movs	r3, #0
 80047de:	f44f 7200 	mov.w	r2, #512	; 0x200
 80047e2:	6938      	ldr	r0, [r7, #16]
 80047e4:	f00f f84e 	bl	8013884 <_txe_byte_allocate>
 80047e8:	6178      	str	r0, [r7, #20]
  if(ret != TX_SUCCESS)
 80047ea:	697b      	ldr	r3, [r7, #20]
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d001      	beq.n	80047f4 <App_ThreadX_Init+0x78>
  {
	  return TX_POOL_ERROR;
 80047f0:	2302      	movs	r3, #2
 80047f2:	e0ef      	b.n	80049d4 <App_ThreadX_Init+0x258>
  }

  ret = tx_thread_create(&LED_Green_Toggle,           //Thread Ptr
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	22b0      	movs	r2, #176	; 0xb0
 80047f8:	9206      	str	r2, [sp, #24]
 80047fa:	2201      	movs	r2, #1
 80047fc:	9205      	str	r2, [sp, #20]
 80047fe:	2201      	movs	r2, #1
 8004800:	9204      	str	r2, [sp, #16]
 8004802:	220f      	movs	r2, #15
 8004804:	9203      	str	r2, [sp, #12]
 8004806:	220f      	movs	r2, #15
 8004808:	9202      	str	r2, [sp, #8]
 800480a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800480e:	9201      	str	r2, [sp, #4]
 8004810:	9300      	str	r3, [sp, #0]
 8004812:	2300      	movs	r3, #0
 8004814:	4a74      	ldr	r2, [pc, #464]	; (80049e8 <App_ThreadX_Init+0x26c>)
 8004816:	4975      	ldr	r1, [pc, #468]	; (80049ec <App_ThreadX_Init+0x270>)
 8004818:	4875      	ldr	r0, [pc, #468]	; (80049f0 <App_ThreadX_Init+0x274>)
 800481a:	f00f fa79 	bl	8013d10 <_txe_thread_create>
 800481e:	6178      	str	r0, [r7, #20]
					15,                    //Preempt Threshold
					1,                     //Time Slize
					TX_AUTO_START);        //Auto Start or Auto Activate

  //Motion
  if(tx_byte_allocate(byte_pool, (VOID **) &Ptr, MOT_THREAD_STACK_SIZE, TX_NO_WAIT) != TX_SUCCESS)
 8004820:	f107 010c 	add.w	r1, r7, #12
 8004824:	2300      	movs	r3, #0
 8004826:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 800482a:	6938      	ldr	r0, [r7, #16]
 800482c:	f00f f82a 	bl	8013884 <_txe_byte_allocate>
 8004830:	4603      	mov	r3, r0
 8004832:	2b00      	cmp	r3, #0
 8004834:	d001      	beq.n	800483a <App_ThreadX_Init+0xbe>
  {
	  return TX_POOL_ERROR;
 8004836:	2302      	movs	r3, #2
 8004838:	e0cc      	b.n	80049d4 <App_ThreadX_Init+0x258>
  }

  ret = tx_thread_create(&Read_MotionThreadPtr,     //Thread Ptr
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	22b0      	movs	r2, #176	; 0xb0
 800483e:	9206      	str	r2, [sp, #24]
 8004840:	2201      	movs	r2, #1
 8004842:	9205      	str	r2, [sp, #20]
 8004844:	2205      	movs	r2, #5
 8004846:	9204      	str	r2, [sp, #16]
 8004848:	220a      	movs	r2, #10
 800484a:	9203      	str	r2, [sp, #12]
 800484c:	220a      	movs	r2, #10
 800484e:	9202      	str	r2, [sp, #8]
 8004850:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 8004854:	9201      	str	r2, [sp, #4]
 8004856:	9300      	str	r3, [sp, #0]
 8004858:	2300      	movs	r3, #0
 800485a:	4a66      	ldr	r2, [pc, #408]	; (80049f4 <App_ThreadX_Init+0x278>)
 800485c:	4966      	ldr	r1, [pc, #408]	; (80049f8 <App_ThreadX_Init+0x27c>)
 800485e:	4867      	ldr	r0, [pc, #412]	; (80049fc <App_ThreadX_Init+0x280>)
 8004860:	f00f fa56 	bl	8013d10 <_txe_thread_create>
 8004864:	6178      	str	r0, [r7, #20]
					10,                    //Preempt Threshold
				    5,                     //Time Slize
					TX_AUTO_START);        //Auto Start or Auto Activate

  //Temp
  if(tx_byte_allocate(byte_pool, (VOID **) &Ptr, TEMP_THREAD_STACK_SIZE, TX_NO_WAIT) != TX_SUCCESS)
 8004866:	f107 010c 	add.w	r1, r7, #12
 800486a:	2300      	movs	r3, #0
 800486c:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 8004870:	6938      	ldr	r0, [r7, #16]
 8004872:	f00f f807 	bl	8013884 <_txe_byte_allocate>
 8004876:	4603      	mov	r3, r0
 8004878:	2b00      	cmp	r3, #0
 800487a:	d001      	beq.n	8004880 <App_ThreadX_Init+0x104>
  {
	  return TX_POOL_ERROR;
 800487c:	2302      	movs	r3, #2
 800487e:	e0a9      	b.n	80049d4 <App_ThreadX_Init+0x258>
  }

  ret = tx_thread_create(&Read_TemperatureThreadPtr,   //Thread Ptr
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	22b0      	movs	r2, #176	; 0xb0
 8004884:	9206      	str	r2, [sp, #24]
 8004886:	2201      	movs	r2, #1
 8004888:	9205      	str	r2, [sp, #20]
 800488a:	2201      	movs	r2, #1
 800488c:	9204      	str	r2, [sp, #16]
 800488e:	220f      	movs	r2, #15
 8004890:	9203      	str	r2, [sp, #12]
 8004892:	220f      	movs	r2, #15
 8004894:	9202      	str	r2, [sp, #8]
 8004896:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 800489a:	9201      	str	r2, [sp, #4]
 800489c:	9300      	str	r3, [sp, #0]
 800489e:	2300      	movs	r3, #0
 80048a0:	4a57      	ldr	r2, [pc, #348]	; (8004a00 <App_ThreadX_Init+0x284>)
 80048a2:	4958      	ldr	r1, [pc, #352]	; (8004a04 <App_ThreadX_Init+0x288>)
 80048a4:	4858      	ldr	r0, [pc, #352]	; (8004a08 <App_ThreadX_Init+0x28c>)
 80048a6:	f00f fa33 	bl	8013d10 <_txe_thread_create>
 80048aa:	6178      	str	r0, [r7, #20]
					15,                    //Priority
					15,                    //Preempt Threshold
				    1,                     //Time Slize
					TX_AUTO_START);        //Auto Start or Auto Activate
  //Humidity
  if(tx_byte_allocate(byte_pool, (VOID **) &Ptr, HUM_THREAD_STACK_SIZE, TX_NO_WAIT) != TX_SUCCESS)
 80048ac:	f107 010c 	add.w	r1, r7, #12
 80048b0:	2300      	movs	r3, #0
 80048b2:	f44f 7216 	mov.w	r2, #600	; 0x258
 80048b6:	6938      	ldr	r0, [r7, #16]
 80048b8:	f00e ffe4 	bl	8013884 <_txe_byte_allocate>
 80048bc:	4603      	mov	r3, r0
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d001      	beq.n	80048c6 <App_ThreadX_Init+0x14a>
  {
	  return TX_POOL_ERROR;
 80048c2:	2302      	movs	r3, #2
 80048c4:	e086      	b.n	80049d4 <App_ThreadX_Init+0x258>
  }

  ret = tx_thread_create(&Read_HumidityThreadPtr,   //Thread Ptr
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	22b0      	movs	r2, #176	; 0xb0
 80048ca:	9206      	str	r2, [sp, #24]
 80048cc:	2201      	movs	r2, #1
 80048ce:	9205      	str	r2, [sp, #20]
 80048d0:	2201      	movs	r2, #1
 80048d2:	9204      	str	r2, [sp, #16]
 80048d4:	220f      	movs	r2, #15
 80048d6:	9203      	str	r2, [sp, #12]
 80048d8:	220f      	movs	r2, #15
 80048da:	9202      	str	r2, [sp, #8]
 80048dc:	f44f 7216 	mov.w	r2, #600	; 0x258
 80048e0:	9201      	str	r2, [sp, #4]
 80048e2:	9300      	str	r3, [sp, #0]
 80048e4:	2300      	movs	r3, #0
 80048e6:	4a49      	ldr	r2, [pc, #292]	; (8004a0c <App_ThreadX_Init+0x290>)
 80048e8:	4949      	ldr	r1, [pc, #292]	; (8004a10 <App_ThreadX_Init+0x294>)
 80048ea:	484a      	ldr	r0, [pc, #296]	; (8004a14 <App_ThreadX_Init+0x298>)
 80048ec:	f00f fa10 	bl	8013d10 <_txe_thread_create>
 80048f0:	6178      	str	r0, [r7, #20]
					15,                    //Priority
					15,                    //Preempt Threshold
				    1,                     //Time Slize
					TX_AUTO_START);        //Auto Start or Auto Activate
  //Pressure
  if(tx_byte_allocate(byte_pool, (VOID **) &Ptr, PRES_THREAD_STACK_SIZE, TX_NO_WAIT) != TX_SUCCESS)
 80048f2:	f107 010c 	add.w	r1, r7, #12
 80048f6:	2300      	movs	r3, #0
 80048f8:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80048fc:	6938      	ldr	r0, [r7, #16]
 80048fe:	f00e ffc1 	bl	8013884 <_txe_byte_allocate>
 8004902:	4603      	mov	r3, r0
 8004904:	2b00      	cmp	r3, #0
 8004906:	d001      	beq.n	800490c <App_ThreadX_Init+0x190>
  {
	  return TX_POOL_ERROR;
 8004908:	2302      	movs	r3, #2
 800490a:	e063      	b.n	80049d4 <App_ThreadX_Init+0x258>
  }

  ret = tx_thread_create(&Read_PressureThreadPtr,   //Thread Ptr
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	22b0      	movs	r2, #176	; 0xb0
 8004910:	9206      	str	r2, [sp, #24]
 8004912:	2201      	movs	r2, #1
 8004914:	9205      	str	r2, [sp, #20]
 8004916:	2201      	movs	r2, #1
 8004918:	9204      	str	r2, [sp, #16]
 800491a:	220f      	movs	r2, #15
 800491c:	9203      	str	r2, [sp, #12]
 800491e:	220f      	movs	r2, #15
 8004920:	9202      	str	r2, [sp, #8]
 8004922:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8004926:	9201      	str	r2, [sp, #4]
 8004928:	9300      	str	r3, [sp, #0]
 800492a:	2300      	movs	r3, #0
 800492c:	4a3a      	ldr	r2, [pc, #232]	; (8004a18 <App_ThreadX_Init+0x29c>)
 800492e:	493b      	ldr	r1, [pc, #236]	; (8004a1c <App_ThreadX_Init+0x2a0>)
 8004930:	483b      	ldr	r0, [pc, #236]	; (8004a20 <App_ThreadX_Init+0x2a4>)
 8004932:	f00f f9ed 	bl	8013d10 <_txe_thread_create>
 8004936:	6178      	str	r0, [r7, #20]
					15,                    //Preempt Threshold
				    1,                     //Time Slize
					TX_AUTO_START);        //Auto Start or Auto Activate

  //Magnet
  if(tx_byte_allocate(byte_pool, (VOID **) &Ptr, MAG_THREAD_STACK_SIZE, TX_NO_WAIT) != TX_SUCCESS)
 8004938:	f107 010c 	add.w	r1, r7, #12
 800493c:	2300      	movs	r3, #0
 800493e:	f44f 7216 	mov.w	r2, #600	; 0x258
 8004942:	6938      	ldr	r0, [r7, #16]
 8004944:	f00e ff9e 	bl	8013884 <_txe_byte_allocate>
 8004948:	4603      	mov	r3, r0
 800494a:	2b00      	cmp	r3, #0
 800494c:	d001      	beq.n	8004952 <App_ThreadX_Init+0x1d6>
  {
	  return TX_POOL_ERROR;
 800494e:	2302      	movs	r3, #2
 8004950:	e040      	b.n	80049d4 <App_ThreadX_Init+0x258>
  }

  ret = tx_thread_create(&Read_MagneticThreadPtr,   //Thread Ptr
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	22b0      	movs	r2, #176	; 0xb0
 8004956:	9206      	str	r2, [sp, #24]
 8004958:	2201      	movs	r2, #1
 800495a:	9205      	str	r2, [sp, #20]
 800495c:	2201      	movs	r2, #1
 800495e:	9204      	str	r2, [sp, #16]
 8004960:	220f      	movs	r2, #15
 8004962:	9203      	str	r2, [sp, #12]
 8004964:	220f      	movs	r2, #15
 8004966:	9202      	str	r2, [sp, #8]
 8004968:	f44f 7216 	mov.w	r2, #600	; 0x258
 800496c:	9201      	str	r2, [sp, #4]
 800496e:	9300      	str	r3, [sp, #0]
 8004970:	2300      	movs	r3, #0
 8004972:	4a2c      	ldr	r2, [pc, #176]	; (8004a24 <App_ThreadX_Init+0x2a8>)
 8004974:	492c      	ldr	r1, [pc, #176]	; (8004a28 <App_ThreadX_Init+0x2ac>)
 8004976:	482d      	ldr	r0, [pc, #180]	; (8004a2c <App_ThreadX_Init+0x2b0>)
 8004978:	f00f f9ca 	bl	8013d10 <_txe_thread_create>
 800497c:	6178      	str	r0, [r7, #20]
					15,                    //Priority
					15,                    //Preempt Threshold
				    1,                     //Time Slize
					TX_AUTO_START);        //Auto Start or Auto Activate
  //Light
  if(tx_byte_allocate(byte_pool, (VOID **) &Ptr, LIGHT_THREAD_STACK_SIZE, TX_NO_WAIT) != TX_SUCCESS)
 800497e:	f107 010c 	add.w	r1, r7, #12
 8004982:	2300      	movs	r3, #0
 8004984:	f44f 7216 	mov.w	r2, #600	; 0x258
 8004988:	6938      	ldr	r0, [r7, #16]
 800498a:	f00e ff7b 	bl	8013884 <_txe_byte_allocate>
 800498e:	4603      	mov	r3, r0
 8004990:	2b00      	cmp	r3, #0
 8004992:	d001      	beq.n	8004998 <App_ThreadX_Init+0x21c>
  {
	  return TX_POOL_ERROR;
 8004994:	2302      	movs	r3, #2
 8004996:	e01d      	b.n	80049d4 <App_ThreadX_Init+0x258>
  }

  ret = tx_thread_create(&Read_LightThreadPtr,   //Thread Ptr
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	22b0      	movs	r2, #176	; 0xb0
 800499c:	9206      	str	r2, [sp, #24]
 800499e:	2201      	movs	r2, #1
 80049a0:	9205      	str	r2, [sp, #20]
 80049a2:	2201      	movs	r2, #1
 80049a4:	9204      	str	r2, [sp, #16]
 80049a6:	220f      	movs	r2, #15
 80049a8:	9203      	str	r2, [sp, #12]
 80049aa:	220f      	movs	r2, #15
 80049ac:	9202      	str	r2, [sp, #8]
 80049ae:	f44f 7216 	mov.w	r2, #600	; 0x258
 80049b2:	9201      	str	r2, [sp, #4]
 80049b4:	9300      	str	r3, [sp, #0]
 80049b6:	2300      	movs	r3, #0
 80049b8:	4a1d      	ldr	r2, [pc, #116]	; (8004a30 <App_ThreadX_Init+0x2b4>)
 80049ba:	491e      	ldr	r1, [pc, #120]	; (8004a34 <App_ThreadX_Init+0x2b8>)
 80049bc:	481e      	ldr	r0, [pc, #120]	; (8004a38 <App_ThreadX_Init+0x2bc>)
 80049be:	f00f f9a7 	bl	8013d10 <_txe_thread_create>
 80049c2:	6178      	str	r0, [r7, #20]
					15,                    //Priority
					15,                    //Preempt Threshold
				    1,                     //Time Slize
					TX_AUTO_START);        //Auto Start or Auto Activate

  ret = tx_mutex_create(&MutexI2C2, "I2C2 Mutex", TX_INHERIT);
 80049c4:	2334      	movs	r3, #52	; 0x34
 80049c6:	2201      	movs	r2, #1
 80049c8:	491c      	ldr	r1, [pc, #112]	; (8004a3c <App_ThreadX_Init+0x2c0>)
 80049ca:	481d      	ldr	r0, [pc, #116]	; (8004a40 <App_ThreadX_Init+0x2c4>)
 80049cc:	f00f f86e 	bl	8013aac <_txe_mutex_create>
 80049d0:	6178      	str	r0, [r7, #20]
  //tx_trace_enable(&tracex_buffer, TRACEX_BUFFER_SIZE,30);
  /* USER CODE END App_ThreadX_Init */

  return ret;
 80049d2:	697b      	ldr	r3, [r7, #20]
}
 80049d4:	4618      	mov	r0, r3
 80049d6:	3718      	adds	r7, #24
 80049d8:	46bd      	mov	sp, r7
 80049da:	bd80      	pop	{r7, pc}
 80049dc:	08004dd9 	.word	0x08004dd9
 80049e0:	08014a8c 	.word	0x08014a8c
 80049e4:	2000186c 	.word	0x2000186c
 80049e8:	08004ded 	.word	0x08004ded
 80049ec:	08014a94 	.word	0x08014a94
 80049f0:	2000191c 	.word	0x2000191c
 80049f4:	08004cc9 	.word	0x08004cc9
 80049f8:	08014aa0 	.word	0x08014aa0
 80049fc:	20001bdc 	.word	0x20001bdc
 8004a00:	08004a51 	.word	0x08004a51
 8004a04:	08014ab0 	.word	0x08014ab0
 8004a08:	200019cc 	.word	0x200019cc
 8004a0c:	08004ae5 	.word	0x08004ae5
 8004a10:	08014abc 	.word	0x08014abc
 8004a14:	20001a7c 	.word	0x20001a7c
 8004a18:	08004b79 	.word	0x08004b79
 8004a1c:	08014acc 	.word	0x08014acc
 8004a20:	20001b2c 	.word	0x20001b2c
 8004a24:	08004c0d 	.word	0x08004c0d
 8004a28:	08014adc 	.word	0x08014adc
 8004a2c:	20001c8c 	.word	0x20001c8c
 8004a30:	08004d8d 	.word	0x08004d8d
 8004a34:	08014aec 	.word	0x08014aec
 8004a38:	20001d3c 	.word	0x20001d3c
 8004a3c:	08014afc 	.word	0x08014afc
 8004a40:	20001dec 	.word	0x20001dec

08004a44 <MX_ThreadX_Init>:
  * @brief  MX_ThreadX_Init
  * @param  None
  * @retval None
  */
void MX_ThreadX_Init(void)
{
 8004a44:	b580      	push	{r7, lr}
 8004a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN  Before_Kernel_Start */

  /* USER CODE END  Before_Kernel_Start */

  tx_kernel_enter();
 8004a48:	f00c f9b4 	bl	8010db4 <_tx_initialize_kernel_enter>

  /* USER CODE BEGIN  Kernel_Start_Error */

  /* USER CODE END  Kernel_Start_Error */
}
 8004a4c:	bf00      	nop
 8004a4e:	bd80      	pop	{r7, pc}

08004a50 <ReadTemperatureThread>:

/* USER CODE BEGIN 1 */

VOID ReadTemperatureThread(ULONG init)
{
 8004a50:	b580      	push	{r7, lr}
 8004a52:	b086      	sub	sp, #24
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	6078      	str	r0, [r7, #4]
	int32_t ret = HTS221_Ok;
 8004a58:	2300      	movs	r3, #0
 8004a5a:	617b      	str	r3, [r7, #20]
	uint32_t SleepTime = 0;
 8004a5c:	2300      	movs	r3, #0
 8004a5e:	613b      	str	r3, [r7, #16]
	float Temperature = 0;
 8004a60:	f04f 0300 	mov.w	r3, #0
 8004a64:	60fb      	str	r3, [r7, #12]
	while(1)
	{
		//Take I2C Mutex (if available)
		tx_mutex_get(&MutexI2C2,TX_WAIT_FOREVER);
 8004a66:	f04f 31ff 	mov.w	r1, #4294967295
 8004a6a:	481b      	ldr	r0, [pc, #108]	; (8004ad8 <ReadTemperatureThread+0x88>)
 8004a6c:	f00f f8bc 	bl	8013be8 <_txe_mutex_get>
		ret = BSP_ReadTemperature(&Temperature);
 8004a70:	f107 030c 	add.w	r3, r7, #12
 8004a74:	4618      	mov	r0, r3
 8004a76:	f7fc fdd9 	bl	800162c <BSP_ReadTemperature>
 8004a7a:	6178      	str	r0, [r7, #20]
		tx_mutex_put(&MutexI2C2);
 8004a7c:	4816      	ldr	r0, [pc, #88]	; (8004ad8 <ReadTemperatureThread+0x88>)
 8004a7e:	f00f f90d 	bl	8013c9c <_txe_mutex_put>
		if(ret == HTS221_DataReady)
 8004a82:	697b      	ldr	r3, [r7, #20]
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d102      	bne.n	8004a8e <ReadTemperatureThread+0x3e>
		{
			temp_data = Temperature;
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	4a14      	ldr	r2, [pc, #80]	; (8004adc <ReadTemperatureThread+0x8c>)
 8004a8c:	6013      	str	r3, [r2, #0]
		}
		ret = BSP_GetTempPeriod(&SleepTime);
 8004a8e:	f107 0310 	add.w	r3, r7, #16
 8004a92:	4618      	mov	r0, r3
 8004a94:	f7fc fe6e 	bl	8001774 <BSP_GetTempPeriod>
 8004a98:	6178      	str	r0, [r7, #20]
		if(ret == HTS221_Ok)
 8004a9a:	697b      	ldr	r3, [r7, #20]
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d1e2      	bne.n	8004a66 <ReadTemperatureThread+0x16>
		{
			//Sleep Time given in milliseconds. OS Timeslice = 10 ms, +1 is to handle possible non-zero remainders.
			if(SleepTime % 10 == 0)
 8004aa0:	6939      	ldr	r1, [r7, #16]
 8004aa2:	4b0f      	ldr	r3, [pc, #60]	; (8004ae0 <ReadTemperatureThread+0x90>)
 8004aa4:	fba3 2301 	umull	r2, r3, r3, r1
 8004aa8:	08da      	lsrs	r2, r3, #3
 8004aaa:	4613      	mov	r3, r2
 8004aac:	009b      	lsls	r3, r3, #2
 8004aae:	4413      	add	r3, r2
 8004ab0:	005b      	lsls	r3, r3, #1
 8004ab2:	1aca      	subs	r2, r1, r3
 8004ab4:	2a00      	cmp	r2, #0
 8004ab6:	d104      	bne.n	8004ac2 <ReadTemperatureThread+0x72>
			{
				tx_thread_sleep(SleepTime);
 8004ab8:	693b      	ldr	r3, [r7, #16]
 8004aba:	4618      	mov	r0, r3
 8004abc:	f00d fca6 	bl	801240c <_tx_thread_sleep>
 8004ac0:	e7d1      	b.n	8004a66 <ReadTemperatureThread+0x16>
			} else
			{
				tx_thread_sleep((SleepTime / 10) + 1);
 8004ac2:	693b      	ldr	r3, [r7, #16]
 8004ac4:	4a06      	ldr	r2, [pc, #24]	; (8004ae0 <ReadTemperatureThread+0x90>)
 8004ac6:	fba2 2303 	umull	r2, r3, r2, r3
 8004aca:	08db      	lsrs	r3, r3, #3
 8004acc:	3301      	adds	r3, #1
 8004ace:	4618      	mov	r0, r3
 8004ad0:	f00d fc9c 	bl	801240c <_tx_thread_sleep>
		tx_mutex_get(&MutexI2C2,TX_WAIT_FOREVER);
 8004ad4:	e7c7      	b.n	8004a66 <ReadTemperatureThread+0x16>
 8004ad6:	bf00      	nop
 8004ad8:	20001dec 	.word	0x20001dec
 8004adc:	20001838 	.word	0x20001838
 8004ae0:	cccccccd 	.word	0xcccccccd

08004ae4 <ReadHumidityThread>:
		}
	}
}

VOID ReadHumidityThread(ULONG init)
{
 8004ae4:	b580      	push	{r7, lr}
 8004ae6:	b086      	sub	sp, #24
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	6078      	str	r0, [r7, #4]
	int32_t ret = HTS221_Ok;
 8004aec:	2300      	movs	r3, #0
 8004aee:	617b      	str	r3, [r7, #20]
	uint32_t SleepTime = 0;
 8004af0:	2300      	movs	r3, #0
 8004af2:	613b      	str	r3, [r7, #16]
	float Humidity = 0;
 8004af4:	f04f 0300 	mov.w	r3, #0
 8004af8:	60fb      	str	r3, [r7, #12]
	while(1)
	{
		//Take I2C Mutex (if available)
		tx_mutex_get(&MutexI2C2,TX_WAIT_FOREVER);
 8004afa:	f04f 31ff 	mov.w	r1, #4294967295
 8004afe:	481b      	ldr	r0, [pc, #108]	; (8004b6c <ReadHumidityThread+0x88>)
 8004b00:	f00f f872 	bl	8013be8 <_txe_mutex_get>
		ret = BSP_ReadHumidity(&Humidity);
 8004b04:	f107 030c 	add.w	r3, r7, #12
 8004b08:	4618      	mov	r0, r3
 8004b0a:	f7fc fd9f 	bl	800164c <BSP_ReadHumidity>
 8004b0e:	6178      	str	r0, [r7, #20]
		tx_mutex_put(&MutexI2C2);
 8004b10:	4816      	ldr	r0, [pc, #88]	; (8004b6c <ReadHumidityThread+0x88>)
 8004b12:	f00f f8c3 	bl	8013c9c <_txe_mutex_put>
		if(ret == HTS221_DataReady)
 8004b16:	697b      	ldr	r3, [r7, #20]
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d102      	bne.n	8004b22 <ReadHumidityThread+0x3e>
		{
			humidity_data = Humidity;
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	4a14      	ldr	r2, [pc, #80]	; (8004b70 <ReadHumidityThread+0x8c>)
 8004b20:	6013      	str	r3, [r2, #0]
		}
		ret = BSP_GetTempPeriod(&SleepTime);
 8004b22:	f107 0310 	add.w	r3, r7, #16
 8004b26:	4618      	mov	r0, r3
 8004b28:	f7fc fe24 	bl	8001774 <BSP_GetTempPeriod>
 8004b2c:	6178      	str	r0, [r7, #20]
		if(ret == HTS221_Ok)
 8004b2e:	697b      	ldr	r3, [r7, #20]
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d1e2      	bne.n	8004afa <ReadHumidityThread+0x16>
		{
			//Sleep Time given in milliseconds. OS Timeslice = 10 ms, +1 is to handle possible non-zero remainders.
			if(SleepTime % 10 == 0)
 8004b34:	6939      	ldr	r1, [r7, #16]
 8004b36:	4b0f      	ldr	r3, [pc, #60]	; (8004b74 <ReadHumidityThread+0x90>)
 8004b38:	fba3 2301 	umull	r2, r3, r3, r1
 8004b3c:	08da      	lsrs	r2, r3, #3
 8004b3e:	4613      	mov	r3, r2
 8004b40:	009b      	lsls	r3, r3, #2
 8004b42:	4413      	add	r3, r2
 8004b44:	005b      	lsls	r3, r3, #1
 8004b46:	1aca      	subs	r2, r1, r3
 8004b48:	2a00      	cmp	r2, #0
 8004b4a:	d104      	bne.n	8004b56 <ReadHumidityThread+0x72>
			{
				tx_thread_sleep(SleepTime);
 8004b4c:	693b      	ldr	r3, [r7, #16]
 8004b4e:	4618      	mov	r0, r3
 8004b50:	f00d fc5c 	bl	801240c <_tx_thread_sleep>
 8004b54:	e7d1      	b.n	8004afa <ReadHumidityThread+0x16>
			} else
			{
				tx_thread_sleep((SleepTime / 10) + 1);
 8004b56:	693b      	ldr	r3, [r7, #16]
 8004b58:	4a06      	ldr	r2, [pc, #24]	; (8004b74 <ReadHumidityThread+0x90>)
 8004b5a:	fba2 2303 	umull	r2, r3, r2, r3
 8004b5e:	08db      	lsrs	r3, r3, #3
 8004b60:	3301      	adds	r3, #1
 8004b62:	4618      	mov	r0, r3
 8004b64:	f00d fc52 	bl	801240c <_tx_thread_sleep>
		tx_mutex_get(&MutexI2C2,TX_WAIT_FOREVER);
 8004b68:	e7c7      	b.n	8004afa <ReadHumidityThread+0x16>
 8004b6a:	bf00      	nop
 8004b6c:	20001dec 	.word	0x20001dec
 8004b70:	2000183c 	.word	0x2000183c
 8004b74:	cccccccd 	.word	0xcccccccd

08004b78 <ReadPressureThread>:
		}
	}
}

VOID ReadPressureThread(ULONG init)
{
 8004b78:	b580      	push	{r7, lr}
 8004b7a:	b086      	sub	sp, #24
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	6078      	str	r0, [r7, #4]
	int32_t ret = LPS22HH_Ok;
 8004b80:	2300      	movs	r3, #0
 8004b82:	617b      	str	r3, [r7, #20]
	uint32_t SleepTime = 0;
 8004b84:	2300      	movs	r3, #0
 8004b86:	613b      	str	r3, [r7, #16]
	float Pressure = 0;
 8004b88:	f04f 0300 	mov.w	r3, #0
 8004b8c:	60fb      	str	r3, [r7, #12]
	while(1)
	{
		tx_mutex_get(&MutexI2C2,TX_WAIT_FOREVER);
 8004b8e:	f04f 31ff 	mov.w	r1, #4294967295
 8004b92:	481b      	ldr	r0, [pc, #108]	; (8004c00 <ReadPressureThread+0x88>)
 8004b94:	f00f f828 	bl	8013be8 <_txe_mutex_get>
		ret = BSP_ReadPressure(&Pressure);
 8004b98:	f107 030c 	add.w	r3, r7, #12
 8004b9c:	4618      	mov	r0, r3
 8004b9e:	f7fc fd95 	bl	80016cc <BSP_ReadPressure>
 8004ba2:	6178      	str	r0, [r7, #20]
		tx_mutex_put(&MutexI2C2);
 8004ba4:	4816      	ldr	r0, [pc, #88]	; (8004c00 <ReadPressureThread+0x88>)
 8004ba6:	f00f f879 	bl	8013c9c <_txe_mutex_put>
		if(ret == LPS22HH_DataReady)
 8004baa:	697b      	ldr	r3, [r7, #20]
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d102      	bne.n	8004bb6 <ReadPressureThread+0x3e>
		{
			pressure_data = Pressure;
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	4a14      	ldr	r2, [pc, #80]	; (8004c04 <ReadPressureThread+0x8c>)
 8004bb4:	6013      	str	r3, [r2, #0]
		}
		ret = BSP_GetPressurePeriod(&SleepTime);
 8004bb6:	f107 0310 	add.w	r3, r7, #16
 8004bba:	4618      	mov	r0, r3
 8004bbc:	f7fc fdfa 	bl	80017b4 <BSP_GetPressurePeriod>
 8004bc0:	6178      	str	r0, [r7, #20]
		if(ret == LPS22HH_Ok)
 8004bc2:	697b      	ldr	r3, [r7, #20]
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d1e2      	bne.n	8004b8e <ReadPressureThread+0x16>
		{
			//Sleep Time given in milliseconds. OS Timeslice = 10 ms, +1 is to handle possible non-zero remainders.
			if(SleepTime % 10 == 0)
 8004bc8:	6939      	ldr	r1, [r7, #16]
 8004bca:	4b0f      	ldr	r3, [pc, #60]	; (8004c08 <ReadPressureThread+0x90>)
 8004bcc:	fba3 2301 	umull	r2, r3, r3, r1
 8004bd0:	08da      	lsrs	r2, r3, #3
 8004bd2:	4613      	mov	r3, r2
 8004bd4:	009b      	lsls	r3, r3, #2
 8004bd6:	4413      	add	r3, r2
 8004bd8:	005b      	lsls	r3, r3, #1
 8004bda:	1aca      	subs	r2, r1, r3
 8004bdc:	2a00      	cmp	r2, #0
 8004bde:	d104      	bne.n	8004bea <ReadPressureThread+0x72>
			{
				tx_thread_sleep(SleepTime);
 8004be0:	693b      	ldr	r3, [r7, #16]
 8004be2:	4618      	mov	r0, r3
 8004be4:	f00d fc12 	bl	801240c <_tx_thread_sleep>
 8004be8:	e7d1      	b.n	8004b8e <ReadPressureThread+0x16>
			} else
			{
				tx_thread_sleep((SleepTime / 10) + 1);
 8004bea:	693b      	ldr	r3, [r7, #16]
 8004bec:	4a06      	ldr	r2, [pc, #24]	; (8004c08 <ReadPressureThread+0x90>)
 8004bee:	fba2 2303 	umull	r2, r3, r2, r3
 8004bf2:	08db      	lsrs	r3, r3, #3
 8004bf4:	3301      	adds	r3, #1
 8004bf6:	4618      	mov	r0, r3
 8004bf8:	f00d fc08 	bl	801240c <_tx_thread_sleep>
		tx_mutex_get(&MutexI2C2,TX_WAIT_FOREVER);
 8004bfc:	e7c7      	b.n	8004b8e <ReadPressureThread+0x16>
 8004bfe:	bf00      	nop
 8004c00:	20001dec 	.word	0x20001dec
 8004c04:	20001840 	.word	0x20001840
 8004c08:	cccccccd 	.word	0xcccccccd

08004c0c <ReadMagneticThread>:
		}
	}
}

VOID ReadMagneticThread(ULONG init)
{
 8004c0c:	b580      	push	{r7, lr}
 8004c0e:	b088      	sub	sp, #32
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	6078      	str	r0, [r7, #4]
	int32_t ret = IIS2MDC_Ok;
 8004c14:	2300      	movs	r3, #0
 8004c16:	61fb      	str	r3, [r7, #28]
	uint32_t SleepTime = 0;
 8004c18:	2300      	movs	r3, #0
 8004c1a:	61bb      	str	r3, [r7, #24]
	float MagX = 0;
 8004c1c:	f04f 0300 	mov.w	r3, #0
 8004c20:	617b      	str	r3, [r7, #20]
	float MagY = 0;
 8004c22:	f04f 0300 	mov.w	r3, #0
 8004c26:	613b      	str	r3, [r7, #16]
	float MagZ = 0;
 8004c28:	f04f 0300 	mov.w	r3, #0
 8004c2c:	60fb      	str	r3, [r7, #12]
	while(1)
	{
		tx_mutex_get(&MutexI2C2,TX_WAIT_FOREVER);
 8004c2e:	f04f 31ff 	mov.w	r1, #4294967295
 8004c32:	4820      	ldr	r0, [pc, #128]	; (8004cb4 <ReadMagneticThread+0xa8>)
 8004c34:	f00e ffd8 	bl	8013be8 <_txe_mutex_get>
		ret = BSP_ReadMagnetometerXYZ(&MagX, &MagY, &MagZ);
 8004c38:	f107 020c 	add.w	r2, r7, #12
 8004c3c:	f107 0110 	add.w	r1, r7, #16
 8004c40:	f107 0314 	add.w	r3, r7, #20
 8004c44:	4618      	mov	r0, r3
 8004c46:	f7fc fd81 	bl	800174c <BSP_ReadMagnetometerXYZ>
 8004c4a:	61f8      	str	r0, [r7, #28]
		tx_mutex_put(&MutexI2C2);
 8004c4c:	4819      	ldr	r0, [pc, #100]	; (8004cb4 <ReadMagneticThread+0xa8>)
 8004c4e:	f00f f825 	bl	8013c9c <_txe_mutex_put>
		if(ret == IIS2MDC_DataReady)
 8004c52:	69fb      	ldr	r3, [r7, #28]
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d108      	bne.n	8004c6a <ReadMagneticThread+0x5e>
		{
			magx = MagX;
 8004c58:	697b      	ldr	r3, [r7, #20]
 8004c5a:	4a17      	ldr	r2, [pc, #92]	; (8004cb8 <ReadMagneticThread+0xac>)
 8004c5c:	6013      	str	r3, [r2, #0]
			magy = MagY;
 8004c5e:	693b      	ldr	r3, [r7, #16]
 8004c60:	4a16      	ldr	r2, [pc, #88]	; (8004cbc <ReadMagneticThread+0xb0>)
 8004c62:	6013      	str	r3, [r2, #0]
			magz = MagZ;
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	4a16      	ldr	r2, [pc, #88]	; (8004cc0 <ReadMagneticThread+0xb4>)
 8004c68:	6013      	str	r3, [r2, #0]
		}
		ret = BSP_GetMagneticPeriod(&SleepTime);
 8004c6a:	f107 0318 	add.w	r3, r7, #24
 8004c6e:	4618      	mov	r0, r3
 8004c70:	f7fc fd90 	bl	8001794 <BSP_GetMagneticPeriod>
 8004c74:	61f8      	str	r0, [r7, #28]
		if(ret == IIS2MDC_Ok)
 8004c76:	69fb      	ldr	r3, [r7, #28]
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d1d8      	bne.n	8004c2e <ReadMagneticThread+0x22>
		{
			//Sleep Time given in milliseconds. OS Timeslice = 10 ms, +1 is to handle possible non-zero remainders.
			if(SleepTime % 10 == 0)
 8004c7c:	69b9      	ldr	r1, [r7, #24]
 8004c7e:	4b11      	ldr	r3, [pc, #68]	; (8004cc4 <ReadMagneticThread+0xb8>)
 8004c80:	fba3 2301 	umull	r2, r3, r3, r1
 8004c84:	08da      	lsrs	r2, r3, #3
 8004c86:	4613      	mov	r3, r2
 8004c88:	009b      	lsls	r3, r3, #2
 8004c8a:	4413      	add	r3, r2
 8004c8c:	005b      	lsls	r3, r3, #1
 8004c8e:	1aca      	subs	r2, r1, r3
 8004c90:	2a00      	cmp	r2, #0
 8004c92:	d104      	bne.n	8004c9e <ReadMagneticThread+0x92>
			{
				tx_thread_sleep(SleepTime);
 8004c94:	69bb      	ldr	r3, [r7, #24]
 8004c96:	4618      	mov	r0, r3
 8004c98:	f00d fbb8 	bl	801240c <_tx_thread_sleep>
 8004c9c:	e7c7      	b.n	8004c2e <ReadMagneticThread+0x22>
			} else
			{
				tx_thread_sleep((SleepTime / 10) + 1);
 8004c9e:	69bb      	ldr	r3, [r7, #24]
 8004ca0:	4a08      	ldr	r2, [pc, #32]	; (8004cc4 <ReadMagneticThread+0xb8>)
 8004ca2:	fba2 2303 	umull	r2, r3, r2, r3
 8004ca6:	08db      	lsrs	r3, r3, #3
 8004ca8:	3301      	adds	r3, #1
 8004caa:	4618      	mov	r0, r3
 8004cac:	f00d fbae 	bl	801240c <_tx_thread_sleep>
		tx_mutex_get(&MutexI2C2,TX_WAIT_FOREVER);
 8004cb0:	e7bd      	b.n	8004c2e <ReadMagneticThread+0x22>
 8004cb2:	bf00      	nop
 8004cb4:	20001dec 	.word	0x20001dec
 8004cb8:	2000185c 	.word	0x2000185c
 8004cbc:	20001860 	.word	0x20001860
 8004cc0:	20001864 	.word	0x20001864
 8004cc4:	cccccccd 	.word	0xcccccccd

08004cc8 <ReadMotionThread>:
		}
	}
}

VOID ReadMotionThread(ULONG init)
{
 8004cc8:	b580      	push	{r7, lr}
 8004cca:	b08a      	sub	sp, #40	; 0x28
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	6078      	str	r0, [r7, #4]
	int32_t ret = IIS2MDC_Ok;
 8004cd0:	2300      	movs	r3, #0
 8004cd2:	627b      	str	r3, [r7, #36]	; 0x24
	float AccelX = 0;
 8004cd4:	f04f 0300 	mov.w	r3, #0
 8004cd8:	623b      	str	r3, [r7, #32]
	float AccelY = 0;
 8004cda:	f04f 0300 	mov.w	r3, #0
 8004cde:	61fb      	str	r3, [r7, #28]
	float AccelZ = 0;
 8004ce0:	f04f 0300 	mov.w	r3, #0
 8004ce4:	61bb      	str	r3, [r7, #24]
	float GyroX = 0;
 8004ce6:	f04f 0300 	mov.w	r3, #0
 8004cea:	617b      	str	r3, [r7, #20]
	float GyroY = 0;
 8004cec:	f04f 0300 	mov.w	r3, #0
 8004cf0:	613b      	str	r3, [r7, #16]
	float GyroZ = 0;
 8004cf2:	f04f 0300 	mov.w	r3, #0
 8004cf6:	60fb      	str	r3, [r7, #12]
	//Synchronize with hardware timer
	BSP_SynchronizeIRQ();
 8004cf8:	f7fc fe64 	bl	80019c4 <BSP_SynchronizeIRQ>
	while(1)
	{
	    tx_mutex_get(&MutexI2C2,TX_NO_WAIT);
 8004cfc:	2100      	movs	r1, #0
 8004cfe:	481b      	ldr	r0, [pc, #108]	; (8004d6c <ReadMotionThread+0xa4>)
 8004d00:	f00e ff72 	bl	8013be8 <_txe_mutex_get>
	    ret = BSP_ReadAccelXYZ(&AccelX, &AccelY, &AccelZ);
 8004d04:	f107 0218 	add.w	r2, r7, #24
 8004d08:	f107 011c 	add.w	r1, r7, #28
 8004d0c:	f107 0320 	add.w	r3, r7, #32
 8004d10:	4618      	mov	r0, r3
 8004d12:	f7fc fe1f 	bl	8001954 <BSP_ReadAccelXYZ>
 8004d16:	6278      	str	r0, [r7, #36]	; 0x24
	    if(ret == ISM330DHCX_DataReady)
 8004d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d108      	bne.n	8004d30 <ReadMotionThread+0x68>
	    {
		    accelx = AccelX;
 8004d1e:	6a3b      	ldr	r3, [r7, #32]
 8004d20:	4a13      	ldr	r2, [pc, #76]	; (8004d70 <ReadMotionThread+0xa8>)
 8004d22:	6013      	str	r3, [r2, #0]
		    accely = AccelY;
 8004d24:	69fb      	ldr	r3, [r7, #28]
 8004d26:	4a13      	ldr	r2, [pc, #76]	; (8004d74 <ReadMotionThread+0xac>)
 8004d28:	6013      	str	r3, [r2, #0]
		    accelz = AccelZ;
 8004d2a:	69bb      	ldr	r3, [r7, #24]
 8004d2c:	4a12      	ldr	r2, [pc, #72]	; (8004d78 <ReadMotionThread+0xb0>)
 8004d2e:	6013      	str	r3, [r2, #0]
	    }
	    ret = BSP_ReadGyroXYZ(&GyroX, &GyroY, &GyroZ);
 8004d30:	f107 020c 	add.w	r2, r7, #12
 8004d34:	f107 0110 	add.w	r1, r7, #16
 8004d38:	f107 0314 	add.w	r3, r7, #20
 8004d3c:	4618      	mov	r0, r3
 8004d3e:	f7fc fe25 	bl	800198c <BSP_ReadGyroXYZ>
 8004d42:	6278      	str	r0, [r7, #36]	; 0x24
	    if(ret == ISM330DHCX_DataReady)
 8004d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d108      	bne.n	8004d5c <ReadMotionThread+0x94>
	    {
		    gyrox = GyroX;
 8004d4a:	697b      	ldr	r3, [r7, #20]
 8004d4c:	4a0b      	ldr	r2, [pc, #44]	; (8004d7c <ReadMotionThread+0xb4>)
 8004d4e:	6013      	str	r3, [r2, #0]
		    gyroy = GyroY;
 8004d50:	693b      	ldr	r3, [r7, #16]
 8004d52:	4a0b      	ldr	r2, [pc, #44]	; (8004d80 <ReadMotionThread+0xb8>)
 8004d54:	6013      	str	r3, [r2, #0]
		    gyroz = GyroZ;
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	4a0a      	ldr	r2, [pc, #40]	; (8004d84 <ReadMotionThread+0xbc>)
 8004d5a:	6013      	str	r3, [r2, #0]
	    }
	    tx_mutex_put(&MutexI2C2);
 8004d5c:	4803      	ldr	r0, [pc, #12]	; (8004d6c <ReadMotionThread+0xa4>)
 8004d5e:	f00e ff9d 	bl	8013c9c <_txe_mutex_put>
	    tx_thread_suspend(&Read_MotionThreadPtr);
 8004d62:	4809      	ldr	r0, [pc, #36]	; (8004d88 <ReadMotionThread+0xc0>)
 8004d64:	f00f f8e4 	bl	8013f30 <_txe_thread_suspend>
	    tx_mutex_get(&MutexI2C2,TX_NO_WAIT);
 8004d68:	e7c8      	b.n	8004cfc <ReadMotionThread+0x34>
 8004d6a:	bf00      	nop
 8004d6c:	20001dec 	.word	0x20001dec
 8004d70:	20001844 	.word	0x20001844
 8004d74:	20001848 	.word	0x20001848
 8004d78:	2000184c 	.word	0x2000184c
 8004d7c:	20001850 	.word	0x20001850
 8004d80:	20001854 	.word	0x20001854
 8004d84:	20001858 	.word	0x20001858
 8004d88:	20001bdc 	.word	0x20001bdc

08004d8c <ReadLightThread>:
	}
}

VOID ReadLightThread(ULONG init)
{
 8004d8c:	b580      	push	{r7, lr}
 8004d8e:	b084      	sub	sp, #16
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	6078      	str	r0, [r7, #4]
	float Light = 0;
 8004d94:	f04f 0300 	mov.w	r3, #0
 8004d98:	60bb      	str	r3, [r7, #8]
	int32_t ret = 0;
 8004d9a:	2300      	movs	r3, #0
 8004d9c:	60fb      	str	r3, [r7, #12]
	while(1)
	{
	    tx_mutex_get(&MutexI2C2,TX_WAIT_FOREVER);
 8004d9e:	f04f 31ff 	mov.w	r1, #4294967295
 8004da2:	480b      	ldr	r0, [pc, #44]	; (8004dd0 <ReadLightThread+0x44>)
 8004da4:	f00e ff20 	bl	8013be8 <_txe_mutex_get>
		ret = BSP_ReadAmbientLight(&Light);
 8004da8:	f107 0308 	add.w	r3, r7, #8
 8004dac:	4618      	mov	r0, r3
 8004dae:	f7fc fd3f 	bl	8001830 <BSP_ReadAmbientLight>
 8004db2:	60f8      	str	r0, [r7, #12]
	    tx_mutex_put(&MutexI2C2);
 8004db4:	4806      	ldr	r0, [pc, #24]	; (8004dd0 <ReadLightThread+0x44>)
 8004db6:	f00e ff71 	bl	8013c9c <_txe_mutex_put>
		if(ret == VEML6030_Ok)
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d102      	bne.n	8004dc6 <ReadLightThread+0x3a>
		{
			light = Light;
 8004dc0:	68bb      	ldr	r3, [r7, #8]
 8004dc2:	4a04      	ldr	r2, [pc, #16]	; (8004dd4 <ReadLightThread+0x48>)
 8004dc4:	6013      	str	r3, [r2, #0]
		}
		tx_thread_sleep(100);
 8004dc6:	2064      	movs	r0, #100	; 0x64
 8004dc8:	f00d fb20 	bl	801240c <_tx_thread_sleep>
	    tx_mutex_get(&MutexI2C2,TX_WAIT_FOREVER);
 8004dcc:	e7e7      	b.n	8004d9e <ReadLightThread+0x12>
 8004dce:	bf00      	nop
 8004dd0:	20001dec 	.word	0x20001dec
 8004dd4:	20001868 	.word	0x20001868

08004dd8 <RedLEDToggleThread>:
	}
}

VOID RedLEDToggleThread(ULONG init)
{
 8004dd8:	b580      	push	{r7, lr}
 8004dda:	b082      	sub	sp, #8
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	6078      	str	r0, [r7, #4]
	while(1)
	{
		BSP_LEDToggleRed();
 8004de0:	f7fc fb6a 	bl	80014b8 <BSP_LEDToggleRed>
		tx_thread_sleep(100);
 8004de4:	2064      	movs	r0, #100	; 0x64
 8004de6:	f00d fb11 	bl	801240c <_tx_thread_sleep>
		BSP_LEDToggleRed();
 8004dea:	e7f9      	b.n	8004de0 <RedLEDToggleThread+0x8>

08004dec <GreenLEDToggleThread>:
	}
}

VOID GreenLEDToggleThread(ULONG init)
{
 8004dec:	b580      	push	{r7, lr}
 8004dee:	b082      	sub	sp, #8
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	6078      	str	r0, [r7, #4]
	while(1)
	{
		BSP_LEDToggleGreen();
 8004df4:	f7fc fb6a 	bl	80014cc <BSP_LEDToggleGreen>
		tx_thread_sleep(100);
 8004df8:	2064      	movs	r0, #100	; 0x64
 8004dfa:	f00d fb07 	bl	801240c <_tx_thread_sleep>
		BSP_LEDToggleGreen();
 8004dfe:	e7f9      	b.n	8004df4 <GreenLEDToggleThread+0x8>

08004e00 <TIM7_ResumeMotionThread>:
	}
}


void TIM7_ResumeMotionThread(void)
{
 8004e00:	b580      	push	{r7, lr}
 8004e02:	af00      	add	r7, sp, #0
	if(Read_MotionThreadPtr.tx_thread_state == TX_SUSPENDED)
 8004e04:	4b04      	ldr	r3, [pc, #16]	; (8004e18 <TIM7_ResumeMotionThread+0x18>)
 8004e06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e08:	2b03      	cmp	r3, #3
 8004e0a:	d102      	bne.n	8004e12 <TIM7_ResumeMotionThread+0x12>
	{
		//uint32_t time = HAL_GetTick();
		//printf("Time is %lu \n", time);
	    tx_thread_resume(&Read_MotionThreadPtr);
 8004e0c:	4802      	ldr	r0, [pc, #8]	; (8004e18 <TIM7_ResumeMotionThread+0x18>)
 8004e0e:	f00f f871 	bl	8013ef4 <_txe_thread_resume>
	}
}
 8004e12:	bf00      	nop
 8004e14:	bd80      	pop	{r7, pc}
 8004e16:	bf00      	nop
 8004e18:	20001bdc 	.word	0x20001bdc

08004e1c <MX_CORDIC_Init>:

CORDIC_HandleTypeDef hcordic;

/* CORDIC init function */
void MX_CORDIC_Init(void)
{
 8004e1c:	b580      	push	{r7, lr}
 8004e1e:	af00      	add	r7, sp, #0
  /* USER CODE END CORDIC_Init 0 */

  /* USER CODE BEGIN CORDIC_Init 1 */

  /* USER CODE END CORDIC_Init 1 */
  hcordic.Instance = CORDIC;
 8004e20:	4b06      	ldr	r3, [pc, #24]	; (8004e3c <MX_CORDIC_Init+0x20>)
 8004e22:	4a07      	ldr	r2, [pc, #28]	; (8004e40 <MX_CORDIC_Init+0x24>)
 8004e24:	601a      	str	r2, [r3, #0]
  if (HAL_CORDIC_Init(&hcordic) != HAL_OK)
 8004e26:	4805      	ldr	r0, [pc, #20]	; (8004e3c <MX_CORDIC_Init+0x20>)
 8004e28:	f001 fdba 	bl	80069a0 <HAL_CORDIC_Init>
 8004e2c:	4603      	mov	r3, r0
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d001      	beq.n	8004e36 <MX_CORDIC_Init+0x1a>
  {
    Error_Handler();
 8004e32:	f000 ffdb 	bl	8005dec <Error_Handler>
  }
  /* USER CODE BEGIN CORDIC_Init 2 */

  /* USER CODE END CORDIC_Init 2 */

}
 8004e36:	bf00      	nop
 8004e38:	bd80      	pop	{r7, pc}
 8004e3a:	bf00      	nop
 8004e3c:	20001e20 	.word	0x20001e20
 8004e40:	40021000 	.word	0x40021000

08004e44 <HAL_CORDIC_MspInit>:

void HAL_CORDIC_MspInit(CORDIC_HandleTypeDef* cordicHandle)
{
 8004e44:	b480      	push	{r7}
 8004e46:	b085      	sub	sp, #20
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	6078      	str	r0, [r7, #4]

  if(cordicHandle->Instance==CORDIC)
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	4a0b      	ldr	r2, [pc, #44]	; (8004e80 <HAL_CORDIC_MspInit+0x3c>)
 8004e52:	4293      	cmp	r3, r2
 8004e54:	d10e      	bne.n	8004e74 <HAL_CORDIC_MspInit+0x30>
  {
  /* USER CODE BEGIN CORDIC_MspInit 0 */

  /* USER CODE END CORDIC_MspInit 0 */
    /* CORDIC clock enable */
    __HAL_RCC_CORDIC_CLK_ENABLE();
 8004e56:	4b0b      	ldr	r3, [pc, #44]	; (8004e84 <HAL_CORDIC_MspInit+0x40>)
 8004e58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e5c:	4a09      	ldr	r2, [pc, #36]	; (8004e84 <HAL_CORDIC_MspInit+0x40>)
 8004e5e:	f043 0302 	orr.w	r3, r3, #2
 8004e62:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8004e66:	4b07      	ldr	r3, [pc, #28]	; (8004e84 <HAL_CORDIC_MspInit+0x40>)
 8004e68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e6c:	f003 0302 	and.w	r3, r3, #2
 8004e70:	60fb      	str	r3, [r7, #12]
 8004e72:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CORDIC_MspInit 1 */

  /* USER CODE END CORDIC_MspInit 1 */
  }
}
 8004e74:	bf00      	nop
 8004e76:	3714      	adds	r7, #20
 8004e78:	46bd      	mov	sp, r7
 8004e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7e:	4770      	bx	lr
 8004e80:	40021000 	.word	0x40021000
 8004e84:	46020c00 	.word	0x46020c00

08004e88 <MX_DCACHE1_Init>:

DCACHE_HandleTypeDef hdcache1;

/* DCACHE1 init function */
void MX_DCACHE1_Init(void)
{
 8004e88:	b580      	push	{r7, lr}
 8004e8a:	af00      	add	r7, sp, #0
  /* USER CODE END DCACHE1_Init 0 */

  /* USER CODE BEGIN DCACHE1_Init 1 */

  /* USER CODE END DCACHE1_Init 1 */
  hdcache1.Instance = DCACHE1;
 8004e8c:	4b07      	ldr	r3, [pc, #28]	; (8004eac <MX_DCACHE1_Init+0x24>)
 8004e8e:	4a08      	ldr	r2, [pc, #32]	; (8004eb0 <MX_DCACHE1_Init+0x28>)
 8004e90:	601a      	str	r2, [r3, #0]
  hdcache1.Init.ReadBurstType = DCACHE_READ_BURST_WRAP;
 8004e92:	4b06      	ldr	r3, [pc, #24]	; (8004eac <MX_DCACHE1_Init+0x24>)
 8004e94:	2200      	movs	r2, #0
 8004e96:	605a      	str	r2, [r3, #4]
  if (HAL_DCACHE_Init(&hdcache1) != HAL_OK)
 8004e98:	4804      	ldr	r0, [pc, #16]	; (8004eac <MX_DCACHE1_Init+0x24>)
 8004e9a:	f001 fe93 	bl	8006bc4 <HAL_DCACHE_Init>
 8004e9e:	4603      	mov	r3, r0
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d001      	beq.n	8004ea8 <MX_DCACHE1_Init+0x20>
  {
    Error_Handler();
 8004ea4:	f000 ffa2 	bl	8005dec <Error_Handler>
  }
  /* USER CODE BEGIN DCACHE1_Init 2 */

  /* USER CODE END DCACHE1_Init 2 */

}
 8004ea8:	bf00      	nop
 8004eaa:	bd80      	pop	{r7, pc}
 8004eac:	20001e48 	.word	0x20001e48
 8004eb0:	40031400 	.word	0x40031400

08004eb4 <MX_DCMI_Init>:

DCMI_HandleTypeDef hdcmi;

/* DCMI init function */
void MX_DCMI_Init(void)
{
 8004eb4:	b580      	push	{r7, lr}
 8004eb6:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */

  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 8004eb8:	4b16      	ldr	r3, [pc, #88]	; (8004f14 <MX_DCMI_Init+0x60>)
 8004eba:	4a17      	ldr	r2, [pc, #92]	; (8004f18 <MX_DCMI_Init+0x64>)
 8004ebc:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 8004ebe:	4b15      	ldr	r3, [pc, #84]	; (8004f14 <MX_DCMI_Init+0x60>)
 8004ec0:	2200      	movs	r2, #0
 8004ec2:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_RISING;
 8004ec4:	4b13      	ldr	r3, [pc, #76]	; (8004f14 <MX_DCMI_Init+0x60>)
 8004ec6:	2220      	movs	r2, #32
 8004ec8:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_HIGH;
 8004eca:	4b12      	ldr	r3, [pc, #72]	; (8004f14 <MX_DCMI_Init+0x60>)
 8004ecc:	2280      	movs	r2, #128	; 0x80
 8004ece:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_HIGH;
 8004ed0:	4b10      	ldr	r3, [pc, #64]	; (8004f14 <MX_DCMI_Init+0x60>)
 8004ed2:	2240      	movs	r2, #64	; 0x40
 8004ed4:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 8004ed6:	4b0f      	ldr	r3, [pc, #60]	; (8004f14 <MX_DCMI_Init+0x60>)
 8004ed8:	2200      	movs	r2, #0
 8004eda:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 8004edc:	4b0d      	ldr	r3, [pc, #52]	; (8004f14 <MX_DCMI_Init+0x60>)
 8004ede:	2200      	movs	r2, #0
 8004ee0:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 8004ee2:	4b0c      	ldr	r3, [pc, #48]	; (8004f14 <MX_DCMI_Init+0x60>)
 8004ee4:	2200      	movs	r2, #0
 8004ee6:	621a      	str	r2, [r3, #32]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 8004ee8:	4b0a      	ldr	r3, [pc, #40]	; (8004f14 <MX_DCMI_Init+0x60>)
 8004eea:	2200      	movs	r2, #0
 8004eec:	625a      	str	r2, [r3, #36]	; 0x24
  hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 8004eee:	4b09      	ldr	r3, [pc, #36]	; (8004f14 <MX_DCMI_Init+0x60>)
 8004ef0:	2200      	movs	r2, #0
 8004ef2:	629a      	str	r2, [r3, #40]	; 0x28
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 8004ef4:	4b07      	ldr	r3, [pc, #28]	; (8004f14 <MX_DCMI_Init+0x60>)
 8004ef6:	2200      	movs	r2, #0
 8004ef8:	62da      	str	r2, [r3, #44]	; 0x2c
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 8004efa:	4b06      	ldr	r3, [pc, #24]	; (8004f14 <MX_DCMI_Init+0x60>)
 8004efc:	2200      	movs	r2, #0
 8004efe:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 8004f00:	4804      	ldr	r0, [pc, #16]	; (8004f14 <MX_DCMI_Init+0x60>)
 8004f02:	f001 ff15 	bl	8006d30 <HAL_DCMI_Init>
 8004f06:	4603      	mov	r3, r0
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d001      	beq.n	8004f10 <MX_DCMI_Init+0x5c>
  {
    Error_Handler();
 8004f0c:	f000 ff6e 	bl	8005dec <Error_Handler>
  }
  /* USER CODE BEGIN DCMI_Init 2 */

  /* USER CODE END DCMI_Init 2 */

}
 8004f10:	bf00      	nop
 8004f12:	bd80      	pop	{r7, pc}
 8004f14:	20001e74 	.word	0x20001e74
 8004f18:	4202c000 	.word	0x4202c000

08004f1c <HAL_DCMI_MspInit>:

void HAL_DCMI_MspInit(DCMI_HandleTypeDef* dcmiHandle)
{
 8004f1c:	b580      	push	{r7, lr}
 8004f1e:	b08e      	sub	sp, #56	; 0x38
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004f24:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004f28:	2200      	movs	r2, #0
 8004f2a:	601a      	str	r2, [r3, #0]
 8004f2c:	605a      	str	r2, [r3, #4]
 8004f2e:	609a      	str	r2, [r3, #8]
 8004f30:	60da      	str	r2, [r3, #12]
 8004f32:	611a      	str	r2, [r3, #16]
  if(dcmiHandle->Instance==DCMI)
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	4a6d      	ldr	r2, [pc, #436]	; (80050f0 <HAL_DCMI_MspInit+0x1d4>)
 8004f3a:	4293      	cmp	r3, r2
 8004f3c:	f040 80d3 	bne.w	80050e6 <HAL_DCMI_MspInit+0x1ca>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */

  /* USER CODE END DCMI_MspInit 0 */
    /* DCMI clock enable */
    __HAL_RCC_DCMI_PSSI_CLK_ENABLE();
 8004f40:	4b6c      	ldr	r3, [pc, #432]	; (80050f4 <HAL_DCMI_MspInit+0x1d8>)
 8004f42:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004f46:	4a6b      	ldr	r2, [pc, #428]	; (80050f4 <HAL_DCMI_MspInit+0x1d8>)
 8004f48:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004f4c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004f50:	4b68      	ldr	r3, [pc, #416]	; (80050f4 <HAL_DCMI_MspInit+0x1d8>)
 8004f52:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004f56:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004f5a:	623b      	str	r3, [r7, #32]
 8004f5c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOI_CLK_ENABLE();
 8004f5e:	4b65      	ldr	r3, [pc, #404]	; (80050f4 <HAL_DCMI_MspInit+0x1d8>)
 8004f60:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004f64:	4a63      	ldr	r2, [pc, #396]	; (80050f4 <HAL_DCMI_MspInit+0x1d8>)
 8004f66:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f6a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004f6e:	4b61      	ldr	r3, [pc, #388]	; (80050f4 <HAL_DCMI_MspInit+0x1d8>)
 8004f70:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004f74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f78:	61fb      	str	r3, [r7, #28]
 8004f7a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8004f7c:	4b5d      	ldr	r3, [pc, #372]	; (80050f4 <HAL_DCMI_MspInit+0x1d8>)
 8004f7e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004f82:	4a5c      	ldr	r2, [pc, #368]	; (80050f4 <HAL_DCMI_MspInit+0x1d8>)
 8004f84:	f043 0310 	orr.w	r3, r3, #16
 8004f88:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004f8c:	4b59      	ldr	r3, [pc, #356]	; (80050f4 <HAL_DCMI_MspInit+0x1d8>)
 8004f8e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004f92:	f003 0310 	and.w	r3, r3, #16
 8004f96:	61bb      	str	r3, [r7, #24]
 8004f98:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8004f9a:	4b56      	ldr	r3, [pc, #344]	; (80050f4 <HAL_DCMI_MspInit+0x1d8>)
 8004f9c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004fa0:	4a54      	ldr	r2, [pc, #336]	; (80050f4 <HAL_DCMI_MspInit+0x1d8>)
 8004fa2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004fa6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004faa:	4b52      	ldr	r3, [pc, #328]	; (80050f4 <HAL_DCMI_MspInit+0x1d8>)
 8004fac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004fb0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fb4:	617b      	str	r3, [r7, #20]
 8004fb6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004fb8:	4b4e      	ldr	r3, [pc, #312]	; (80050f4 <HAL_DCMI_MspInit+0x1d8>)
 8004fba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004fbe:	4a4d      	ldr	r2, [pc, #308]	; (80050f4 <HAL_DCMI_MspInit+0x1d8>)
 8004fc0:	f043 0302 	orr.w	r3, r3, #2
 8004fc4:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004fc8:	4b4a      	ldr	r3, [pc, #296]	; (80050f4 <HAL_DCMI_MspInit+0x1d8>)
 8004fca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004fce:	f003 0302 	and.w	r3, r3, #2
 8004fd2:	613b      	str	r3, [r7, #16]
 8004fd4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004fd6:	4b47      	ldr	r3, [pc, #284]	; (80050f4 <HAL_DCMI_MspInit+0x1d8>)
 8004fd8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004fdc:	4a45      	ldr	r2, [pc, #276]	; (80050f4 <HAL_DCMI_MspInit+0x1d8>)
 8004fde:	f043 0304 	orr.w	r3, r3, #4
 8004fe2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004fe6:	4b43      	ldr	r3, [pc, #268]	; (80050f4 <HAL_DCMI_MspInit+0x1d8>)
 8004fe8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004fec:	f003 0304 	and.w	r3, r3, #4
 8004ff0:	60fb      	str	r3, [r7, #12]
 8004ff2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004ff4:	4b3f      	ldr	r3, [pc, #252]	; (80050f4 <HAL_DCMI_MspInit+0x1d8>)
 8004ff6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004ffa:	4a3e      	ldr	r2, [pc, #248]	; (80050f4 <HAL_DCMI_MspInit+0x1d8>)
 8004ffc:	f043 0301 	orr.w	r3, r3, #1
 8005000:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8005004:	4b3b      	ldr	r3, [pc, #236]	; (80050f4 <HAL_DCMI_MspInit+0x1d8>)
 8005006:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800500a:	f003 0301 	and.w	r3, r3, #1
 800500e:	60bb      	str	r3, [r7, #8]
 8005010:	68bb      	ldr	r3, [r7, #8]
    PC8     ------> DCMI_D2
    PC7     ------> DCMI_D1
    PC6     ------> DCMI_D0
    PA6     ------> DCMI_PIXCLK
    */
    GPIO_InitStruct.Pin = CAM_D6_Pin|CAM_D5_Pin|CAM_D7_Pin;
 8005012:	23d0      	movs	r3, #208	; 0xd0
 8005014:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005016:	2302      	movs	r3, #2
 8005018:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800501a:	2300      	movs	r3, #0
 800501c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800501e:	2303      	movs	r3, #3
 8005020:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_DCMI;
 8005022:	230a      	movs	r3, #10
 8005024:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8005026:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800502a:	4619      	mov	r1, r3
 800502c:	4832      	ldr	r0, [pc, #200]	; (80050f8 <HAL_DCMI_MspInit+0x1dc>)
 800502e:	f003 fc03 	bl	8008838 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CAM_D3_Pin;
 8005032:	2302      	movs	r3, #2
 8005034:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005036:	2302      	movs	r3, #2
 8005038:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800503a:	2300      	movs	r3, #0
 800503c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800503e:	2303      	movs	r3, #3
 8005040:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_DCMI;
 8005042:	230a      	movs	r3, #10
 8005044:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(CAM_D3_GPIO_Port, &GPIO_InitStruct);
 8005046:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800504a:	4619      	mov	r1, r3
 800504c:	482b      	ldr	r0, [pc, #172]	; (80050fc <HAL_DCMI_MspInit+0x1e0>)
 800504e:	f003 fbf3 	bl	8008838 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CAM_D4_Pin|CAM_HSYNC_Pin;
 8005052:	f44f 4382 	mov.w	r3, #16640	; 0x4100
 8005056:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005058:	2302      	movs	r3, #2
 800505a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800505c:	2300      	movs	r3, #0
 800505e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005060:	2303      	movs	r3, #3
 8005062:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_DCMI;
 8005064:	230a      	movs	r3, #10
 8005066:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8005068:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800506c:	4619      	mov	r1, r3
 800506e:	4824      	ldr	r0, [pc, #144]	; (8005100 <HAL_DCMI_MspInit+0x1e4>)
 8005070:	f003 fbe2 	bl	8008838 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CAM_VSYNC_Pin;
 8005074:	2380      	movs	r3, #128	; 0x80
 8005076:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005078:	2302      	movs	r3, #2
 800507a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800507c:	2300      	movs	r3, #0
 800507e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005080:	2303      	movs	r3, #3
 8005082:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_DCMI;
 8005084:	230a      	movs	r3, #10
 8005086:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(CAM_VSYNC_GPIO_Port, &GPIO_InitStruct);
 8005088:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800508c:	4619      	mov	r1, r3
 800508e:	481d      	ldr	r0, [pc, #116]	; (8005104 <HAL_DCMI_MspInit+0x1e8>)
 8005090:	f003 fbd2 	bl	8008838 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CAM_D2_Pin|CAM_D1_Pin|CAM_D0_Pin;
 8005094:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8005098:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800509a:	2302      	movs	r3, #2
 800509c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800509e:	2300      	movs	r3, #0
 80050a0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80050a2:	2303      	movs	r3, #3
 80050a4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_DCMI;
 80050a6:	230a      	movs	r3, #10
 80050a8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80050aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80050ae:	4619      	mov	r1, r3
 80050b0:	4815      	ldr	r0, [pc, #84]	; (8005108 <HAL_DCMI_MspInit+0x1ec>)
 80050b2:	f003 fbc1 	bl	8008838 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CAM_PIXCLK_Pin;
 80050b6:	2340      	movs	r3, #64	; 0x40
 80050b8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80050ba:	2302      	movs	r3, #2
 80050bc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050be:	2300      	movs	r3, #0
 80050c0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80050c2:	2303      	movs	r3, #3
 80050c4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_DCMI;
 80050c6:	2304      	movs	r3, #4
 80050c8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(CAM_PIXCLK_GPIO_Port, &GPIO_InitStruct);
 80050ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80050ce:	4619      	mov	r1, r3
 80050d0:	480e      	ldr	r0, [pc, #56]	; (800510c <HAL_DCMI_MspInit+0x1f0>)
 80050d2:	f003 fbb1 	bl	8008838 <HAL_GPIO_Init>

    /* DCMI interrupt Init */
    HAL_NVIC_SetPriority(DCMI_PSSI_IRQn, 15, 0);
 80050d6:	2200      	movs	r2, #0
 80050d8:	210f      	movs	r1, #15
 80050da:	2077      	movs	r0, #119	; 0x77
 80050dc:	f001 fd4a 	bl	8006b74 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DCMI_PSSI_IRQn);
 80050e0:	2077      	movs	r0, #119	; 0x77
 80050e2:	f001 fd61 	bl	8006ba8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DCMI_MspInit 1 */

  /* USER CODE END DCMI_MspInit 1 */
  }
}
 80050e6:	bf00      	nop
 80050e8:	3738      	adds	r7, #56	; 0x38
 80050ea:	46bd      	mov	sp, r7
 80050ec:	bd80      	pop	{r7, pc}
 80050ee:	bf00      	nop
 80050f0:	4202c000 	.word	0x4202c000
 80050f4:	46020c00 	.word	0x46020c00
 80050f8:	42022000 	.word	0x42022000
 80050fc:	42021000 	.word	0x42021000
 8005100:	42021c00 	.word	0x42021c00
 8005104:	42020400 	.word	0x42020400
 8005108:	42020800 	.word	0x42020800
 800510c:	42020000 	.word	0x42020000

08005110 <MX_GPDMA1_Init>:
DMA_HandleTypeDef handle_GPDMA1_Channel12;
DMA_HandleTypeDef handle_GPDMA1_Channel12;

/* GPDMA1 init function */
void MX_GPDMA1_Init(void)
{
 8005110:	b580      	push	{r7, lr}
 8005112:	b082      	sub	sp, #8
 8005114:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Init 0 */

  /* USER CODE END GPDMA1_Init 0 */

  /* Peripheral clock enable */
  __HAL_RCC_GPDMA1_CLK_ENABLE();
 8005116:	4b26      	ldr	r3, [pc, #152]	; (80051b0 <MX_GPDMA1_Init+0xa0>)
 8005118:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800511c:	4a24      	ldr	r2, [pc, #144]	; (80051b0 <MX_GPDMA1_Init+0xa0>)
 800511e:	f043 0301 	orr.w	r3, r3, #1
 8005122:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8005126:	4b22      	ldr	r3, [pc, #136]	; (80051b0 <MX_GPDMA1_Init+0xa0>)
 8005128:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800512c:	f003 0301 	and.w	r3, r3, #1
 8005130:	607b      	str	r3, [r7, #4]
 8005132:	687b      	ldr	r3, [r7, #4]

  /* GPDMA1 interrupt Init */
    HAL_NVIC_SetPriority(GPDMA1_Channel12_IRQn, 15, 0);
 8005134:	2200      	movs	r2, #0
 8005136:	210f      	movs	r1, #15
 8005138:	2054      	movs	r0, #84	; 0x54
 800513a:	f001 fd1b 	bl	8006b74 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel12_IRQn);
 800513e:	2054      	movs	r0, #84	; 0x54
 8005140:	f001 fd32 	bl	8006ba8 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN GPDMA1_Init 1 */

  /* USER CODE END GPDMA1_Init 1 */
  handle_GPDMA1_Channel12.Instance = GPDMA1_Channel12;
 8005144:	4b1b      	ldr	r3, [pc, #108]	; (80051b4 <MX_GPDMA1_Init+0xa4>)
 8005146:	4a1c      	ldr	r2, [pc, #112]	; (80051b8 <MX_GPDMA1_Init+0xa8>)
 8005148:	601a      	str	r2, [r3, #0]
  handle_GPDMA1_Channel12.InitLinkedList.Priority = DMA_LOW_PRIORITY_LOW_WEIGHT;
 800514a:	4b1a      	ldr	r3, [pc, #104]	; (80051b4 <MX_GPDMA1_Init+0xa4>)
 800514c:	2200      	movs	r2, #0
 800514e:	639a      	str	r2, [r3, #56]	; 0x38
  handle_GPDMA1_Channel12.InitLinkedList.LinkStepMode = DMA_LSM_FULL_EXECUTION;
 8005150:	4b18      	ldr	r3, [pc, #96]	; (80051b4 <MX_GPDMA1_Init+0xa4>)
 8005152:	2200      	movs	r2, #0
 8005154:	63da      	str	r2, [r3, #60]	; 0x3c
  handle_GPDMA1_Channel12.InitLinkedList.LinkAllocatedPort = DMA_LINK_ALLOCATED_PORT1;
 8005156:	4b17      	ldr	r3, [pc, #92]	; (80051b4 <MX_GPDMA1_Init+0xa4>)
 8005158:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800515c:	641a      	str	r2, [r3, #64]	; 0x40
  handle_GPDMA1_Channel12.InitLinkedList.TransferEventMode = DMA_TCEM_LAST_LL_ITEM_TRANSFER;
 800515e:	4b15      	ldr	r3, [pc, #84]	; (80051b4 <MX_GPDMA1_Init+0xa4>)
 8005160:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
 8005164:	645a      	str	r2, [r3, #68]	; 0x44
  handle_GPDMA1_Channel12.InitLinkedList.LinkedListMode = DMA_LINKEDLIST_CIRCULAR;
 8005166:	4b13      	ldr	r3, [pc, #76]	; (80051b4 <MX_GPDMA1_Init+0xa4>)
 8005168:	2281      	movs	r2, #129	; 0x81
 800516a:	649a      	str	r2, [r3, #72]	; 0x48
  if (HAL_DMAEx_List_Init(&handle_GPDMA1_Channel12) != HAL_OK)
 800516c:	4811      	ldr	r0, [pc, #68]	; (80051b4 <MX_GPDMA1_Init+0xa4>)
 800516e:	f002 fc29 	bl	80079c4 <HAL_DMAEx_List_Init>
 8005172:	4603      	mov	r3, r0
 8005174:	2b00      	cmp	r3, #0
 8005176:	d001      	beq.n	800517c <MX_GPDMA1_Init+0x6c>
  {
    Error_Handler();
 8005178:	f000 fe38 	bl	8005dec <Error_Handler>
  }
  if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel12, DMA_CHANNEL_PRIV) != HAL_OK)
 800517c:	2111      	movs	r1, #17
 800517e:	480d      	ldr	r0, [pc, #52]	; (80051b4 <MX_GPDMA1_Init+0xa4>)
 8005180:	f002 fbbe 	bl	8007900 <HAL_DMA_ConfigChannelAttributes>
 8005184:	4603      	mov	r3, r0
 8005186:	2b00      	cmp	r3, #0
 8005188:	d001      	beq.n	800518e <MX_GPDMA1_Init+0x7e>
  {
    Error_Handler();
 800518a:	f000 fe2f 	bl	8005dec <Error_Handler>
  }
  /* USER CODE BEGIN GPDMA1_Init 2 */
  MX_ProjectDMAQueue_Config();
 800518e:	f000 fccf 	bl	8005b30 <MX_ProjectDMAQueue_Config>
  HAL_DMAEx_List_LinkQ(&handle_GPDMA1_Channel12, &ProjectDMAQueue);
 8005192:	490a      	ldr	r1, [pc, #40]	; (80051bc <MX_GPDMA1_Init+0xac>)
 8005194:	4807      	ldr	r0, [pc, #28]	; (80051b4 <MX_GPDMA1_Init+0xa4>)
 8005196:	f002 fed3 	bl	8007f40 <HAL_DMAEx_List_LinkQ>
  //HAL_DMAEx_List_Start(&handle_GPDMA1_Channel12);
  __HAL_LINKDMA(&hdcmi, DMA_Handle, handle_GPDMA1_Channel12);
 800519a:	4b09      	ldr	r3, [pc, #36]	; (80051c0 <MX_GPDMA1_Init+0xb0>)
 800519c:	4a05      	ldr	r2, [pc, #20]	; (80051b4 <MX_GPDMA1_Init+0xa4>)
 800519e:	649a      	str	r2, [r3, #72]	; 0x48
 80051a0:	4b04      	ldr	r3, [pc, #16]	; (80051b4 <MX_GPDMA1_Init+0xa4>)
 80051a2:	4a07      	ldr	r2, [pc, #28]	; (80051c0 <MX_GPDMA1_Init+0xb0>)
 80051a4:	65da      	str	r2, [r3, #92]	; 0x5c
  /* USER CODE END GPDMA1_Init 2 */

}
 80051a6:	bf00      	nop
 80051a8:	3708      	adds	r7, #8
 80051aa:	46bd      	mov	sp, r7
 80051ac:	bd80      	pop	{r7, pc}
 80051ae:	bf00      	nop
 80051b0:	46020c00 	.word	0x46020c00
 80051b4:	20001ec4 	.word	0x20001ec4
 80051b8:	40020650 	.word	0x40020650
 80051bc:	20001ff8 	.word	0x20001ff8
 80051c0:	20001e74 	.word	0x20001e74

080051c4 <MX_GPIO_Init>:
     PB12   ------> SPI2_NSS
     PB15   ------> UCPD1_CC2
     PB1   ------> MDF1_SDI0
*/
void MX_GPIO_Init(void)
{
 80051c4:	b580      	push	{r7, lr}
 80051c6:	b08e      	sub	sp, #56	; 0x38
 80051c8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80051ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80051ce:	2200      	movs	r2, #0
 80051d0:	601a      	str	r2, [r3, #0]
 80051d2:	605a      	str	r2, [r3, #4]
 80051d4:	609a      	str	r2, [r3, #8]
 80051d6:	60da      	str	r2, [r3, #12]
 80051d8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80051da:	4bbf      	ldr	r3, [pc, #764]	; (80054d8 <MX_GPIO_Init+0x314>)
 80051dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80051e0:	4abd      	ldr	r2, [pc, #756]	; (80054d8 <MX_GPIO_Init+0x314>)
 80051e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80051e6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80051ea:	4bbb      	ldr	r3, [pc, #748]	; (80054d8 <MX_GPIO_Init+0x314>)
 80051ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80051f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051f4:	623b      	str	r3, [r7, #32]
 80051f6:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80051f8:	4bb7      	ldr	r3, [pc, #732]	; (80054d8 <MX_GPIO_Init+0x314>)
 80051fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80051fe:	4ab6      	ldr	r2, [pc, #728]	; (80054d8 <MX_GPIO_Init+0x314>)
 8005200:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005204:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8005208:	4bb3      	ldr	r3, [pc, #716]	; (80054d8 <MX_GPIO_Init+0x314>)
 800520a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800520e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005212:	61fb      	str	r3, [r7, #28]
 8005214:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8005216:	4bb0      	ldr	r3, [pc, #704]	; (80054d8 <MX_GPIO_Init+0x314>)
 8005218:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800521c:	4aae      	ldr	r2, [pc, #696]	; (80054d8 <MX_GPIO_Init+0x314>)
 800521e:	f043 0304 	orr.w	r3, r3, #4
 8005222:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8005226:	4bac      	ldr	r3, [pc, #688]	; (80054d8 <MX_GPIO_Init+0x314>)
 8005228:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800522c:	f003 0304 	and.w	r3, r3, #4
 8005230:	61bb      	str	r3, [r7, #24]
 8005232:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8005234:	4ba8      	ldr	r3, [pc, #672]	; (80054d8 <MX_GPIO_Init+0x314>)
 8005236:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800523a:	4aa7      	ldr	r2, [pc, #668]	; (80054d8 <MX_GPIO_Init+0x314>)
 800523c:	f043 0301 	orr.w	r3, r3, #1
 8005240:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8005244:	4ba4      	ldr	r3, [pc, #656]	; (80054d8 <MX_GPIO_Init+0x314>)
 8005246:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800524a:	f003 0301 	and.w	r3, r3, #1
 800524e:	617b      	str	r3, [r7, #20]
 8005250:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8005252:	4ba1      	ldr	r3, [pc, #644]	; (80054d8 <MX_GPIO_Init+0x314>)
 8005254:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005258:	4a9f      	ldr	r2, [pc, #636]	; (80054d8 <MX_GPIO_Init+0x314>)
 800525a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800525e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8005262:	4b9d      	ldr	r3, [pc, #628]	; (80054d8 <MX_GPIO_Init+0x314>)
 8005264:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005268:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800526c:	613b      	str	r3, [r7, #16]
 800526e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8005270:	4b99      	ldr	r3, [pc, #612]	; (80054d8 <MX_GPIO_Init+0x314>)
 8005272:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005276:	4a98      	ldr	r2, [pc, #608]	; (80054d8 <MX_GPIO_Init+0x314>)
 8005278:	f043 0310 	orr.w	r3, r3, #16
 800527c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8005280:	4b95      	ldr	r3, [pc, #596]	; (80054d8 <MX_GPIO_Init+0x314>)
 8005282:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005286:	f003 0310 	and.w	r3, r3, #16
 800528a:	60fb      	str	r3, [r7, #12]
 800528c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800528e:	4b92      	ldr	r3, [pc, #584]	; (80054d8 <MX_GPIO_Init+0x314>)
 8005290:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005294:	4a90      	ldr	r2, [pc, #576]	; (80054d8 <MX_GPIO_Init+0x314>)
 8005296:	f043 0302 	orr.w	r3, r3, #2
 800529a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800529e:	4b8e      	ldr	r3, [pc, #568]	; (80054d8 <MX_GPIO_Init+0x314>)
 80052a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80052a4:	f003 0302 	and.w	r3, r3, #2
 80052a8:	60bb      	str	r3, [r7, #8]
 80052aa:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80052ac:	4b8a      	ldr	r3, [pc, #552]	; (80054d8 <MX_GPIO_Init+0x314>)
 80052ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80052b2:	4a89      	ldr	r2, [pc, #548]	; (80054d8 <MX_GPIO_Init+0x314>)
 80052b4:	f043 0308 	orr.w	r3, r3, #8
 80052b8:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80052bc:	4b86      	ldr	r3, [pc, #536]	; (80054d8 <MX_GPIO_Init+0x314>)
 80052be:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80052c2:	f003 0308 	and.w	r3, r3, #8
 80052c6:	607b      	str	r3, [r7, #4]
 80052c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80052ca:	4b83      	ldr	r3, [pc, #524]	; (80054d8 <MX_GPIO_Init+0x314>)
 80052cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80052d0:	4a81      	ldr	r2, [pc, #516]	; (80054d8 <MX_GPIO_Init+0x314>)
 80052d2:	f043 0320 	orr.w	r3, r3, #32
 80052d6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80052da:	4b7f      	ldr	r3, [pc, #508]	; (80054d8 <MX_GPIO_Init+0x314>)
 80052dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80052e0:	f003 0320 	and.w	r3, r3, #32
 80052e4:	603b      	str	r3, [r7, #0]
 80052e6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(UCPD_PWR_GPIO_Port, UCPD_PWR_Pin, GPIO_PIN_RESET);
 80052e8:	2200      	movs	r2, #0
 80052ea:	2120      	movs	r1, #32
 80052ec:	487b      	ldr	r0, [pc, #492]	; (80054dc <MX_GPIO_Init+0x318>)
 80052ee:	f003 fd71 	bl	8008dd4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CAM_XSDN_GPIO_Port, CAM_XSDN_Pin, GPIO_PIN_RESET);
 80052f2:	2200      	movs	r2, #0
 80052f4:	2108      	movs	r1, #8
 80052f6:	487a      	ldr	r0, [pc, #488]	; (80054e0 <MX_GPIO_Init+0x31c>)
 80052f8:	f003 fd6c 	bl	8008dd4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CAM_RSTI_GPIO_Port, CAM_RSTI_Pin, GPIO_PIN_SET);
 80052fc:	2201      	movs	r2, #1
 80052fe:	2104      	movs	r1, #4
 8005300:	4877      	ldr	r0, [pc, #476]	; (80054e0 <MX_GPIO_Init+0x31c>)
 8005302:	f003 fd67 	bl	8008dd4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, LED_RED_Pin|LED_GREEN_Pin|Mems_VL53_xshut_Pin, GPIO_PIN_RESET);
 8005306:	2200      	movs	r2, #0
 8005308:	21c2      	movs	r1, #194	; 0xc2
 800530a:	4876      	ldr	r0, [pc, #472]	; (80054e4 <MX_GPIO_Init+0x320>)
 800530c:	f003 fd62 	bl	8008dd4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(WRLS_WKUP_B_GPIO_Port, WRLS_WKUP_B_Pin, GPIO_PIN_RESET);
 8005310:	2200      	movs	r2, #0
 8005312:	2140      	movs	r1, #64	; 0x40
 8005314:	4874      	ldr	r0, [pc, #464]	; (80054e8 <MX_GPIO_Init+0x324>)
 8005316:	f003 fd5d 	bl	8008dd4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, Mems_STSAFE_RESET_Pin|WRLS_WKUP_W_Pin, GPIO_PIN_RESET);
 800531a:	2200      	movs	r2, #0
 800531c:	f44f 4108 	mov.w	r1, #34816	; 0x8800
 8005320:	4872      	ldr	r0, [pc, #456]	; (80054ec <MX_GPIO_Init+0x328>)
 8005322:	f003 fd57 	bl	8008dd4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = WRLS_FLOW_Pin|Mems_VLX_GPIO_Pin|Mems_INT_LPS22HH_Pin;
 8005326:	f248 0324 	movw	r3, #32804	; 0x8024
 800532a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800532c:	2300      	movs	r3, #0
 800532e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005330:	2300      	movs	r3, #0
 8005332:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8005334:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005338:	4619      	mov	r1, r3
 800533a:	486b      	ldr	r0, [pc, #428]	; (80054e8 <MX_GPIO_Init+0x324>)
 800533c:	f003 fa7c 	bl	8008838 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = WRLS_UART4_RX_Pin|WRLS_UART4_TX_Pin;
 8005340:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8005344:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005346:	2302      	movs	r3, #2
 8005348:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800534a:	2300      	movs	r3, #0
 800534c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800534e:	2300      	movs	r3, #0
 8005350:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8005352:	2308      	movs	r3, #8
 8005354:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005356:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800535a:	4619      	mov	r1, r3
 800535c:	4864      	ldr	r0, [pc, #400]	; (80054f0 <MX_GPIO_Init+0x32c>)
 800535e:	f003 fa6b 	bl	8008838 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_UCPD_CC1_Pin;
 8005362:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005366:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005368:	2303      	movs	r3, #3
 800536a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800536c:	2300      	movs	r3, #0
 800536e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_UCPD_CC1_GPIO_Port, &GPIO_InitStruct);
 8005370:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005374:	4619      	mov	r1, r3
 8005376:	485f      	ldr	r0, [pc, #380]	; (80054f4 <MX_GPIO_Init+0x330>)
 8005378:	f003 fa5e 	bl	8008838 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CAM_PLUG_Pin;
 800537c:	2302      	movs	r3, #2
 800537e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005380:	2300      	movs	r3, #0
 8005382:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005384:	2301      	movs	r3, #1
 8005386:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CAM_PLUG_GPIO_Port, &GPIO_InitStruct);
 8005388:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800538c:	4619      	mov	r1, r3
 800538e:	4854      	ldr	r0, [pc, #336]	; (80054e0 <MX_GPIO_Init+0x31c>)
 8005390:	f003 fa52 	bl	8008838 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OCTOSPI_F_NCS_Pin;
 8005394:	2320      	movs	r3, #32
 8005396:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005398:	2302      	movs	r3, #2
 800539a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800539c:	2300      	movs	r3, #0
 800539e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80053a0:	2303      	movs	r3, #3
 80053a2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_OCTOSPI2;
 80053a4:	2305      	movs	r3, #5
 80053a6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OCTOSPI_F_NCS_GPIO_Port, &GPIO_InitStruct);
 80053a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80053ac:	4619      	mov	r1, r3
 80053ae:	484c      	ldr	r0, [pc, #304]	; (80054e0 <MX_GPIO_Init+0x31c>)
 80053b0:	f003 fa42 	bl	8008838 <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin PHPin PHPin */
  GPIO_InitStruct.Pin = OCTOSPI_F_IO7_Pin|OCTOSPI_F_IO5_Pin|OCTOSPI_F_IO6_Pin|OCTOSPI_F_IO4_Pin;
 80053b4:	f44f 53f0 	mov.w	r3, #7680	; 0x1e00
 80053b8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80053ba:	2302      	movs	r3, #2
 80053bc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80053be:	2300      	movs	r3, #0
 80053c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80053c2:	2303      	movs	r3, #3
 80053c4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_OCTOSPI2;
 80053c6:	2305      	movs	r3, #5
 80053c8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80053ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80053ce:	4619      	mov	r1, r3
 80053d0:	4844      	ldr	r0, [pc, #272]	; (80054e4 <MX_GPIO_Init+0x320>)
 80053d2:	f003 fa31 	bl	8008838 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PH3_BOOT0_Pin;
 80053d6:	2308      	movs	r3, #8
 80053d8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80053da:	2300      	movs	r3, #0
 80053dc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80053de:	2300      	movs	r3, #0
 80053e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PH3_BOOT0_GPIO_Port, &GPIO_InitStruct);
 80053e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80053e6:	4619      	mov	r1, r3
 80053e8:	483e      	ldr	r0, [pc, #248]	; (80054e4 <MX_GPIO_Init+0x320>)
 80053ea:	f003 fa25 	bl	8008838 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = UCPD_PWR_Pin;
 80053ee:	2320      	movs	r3, #32
 80053f0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80053f2:	2301      	movs	r3, #1
 80053f4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80053f6:	2300      	movs	r3, #0
 80053f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80053fa:	2300      	movs	r3, #0
 80053fc:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(UCPD_PWR_GPIO_Port, &GPIO_InitStruct);
 80053fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005402:	4619      	mov	r1, r3
 8005404:	4835      	ldr	r0, [pc, #212]	; (80054dc <MX_GPIO_Init+0x318>)
 8005406:	f003 fa17 	bl	8008838 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = WRLS_SPI2_MOSI_Pin|WRLS_SPI2_MISO_Pin|WRLS_SPI2_SCK_Pin;
 800540a:	231a      	movs	r3, #26
 800540c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800540e:	2302      	movs	r3, #2
 8005410:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005412:	2300      	movs	r3, #0
 8005414:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005416:	2300      	movs	r3, #0
 8005418:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800541a:	2305      	movs	r3, #5
 800541c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800541e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005422:	4619      	mov	r1, r3
 8005424:	4834      	ldr	r0, [pc, #208]	; (80054f8 <MX_GPIO_Init+0x334>)
 8005426:	f003 fa07 	bl	8008838 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CAM_XSDN_Pin;
 800542a:	2308      	movs	r3, #8
 800542c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800542e:	2301      	movs	r3, #1
 8005430:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8005432:	2302      	movs	r3, #2
 8005434:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005436:	2300      	movs	r3, #0
 8005438:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(CAM_XSDN_GPIO_Port, &GPIO_InitStruct);
 800543a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800543e:	4619      	mov	r1, r3
 8005440:	4827      	ldr	r0, [pc, #156]	; (80054e0 <MX_GPIO_Init+0x31c>)
 8005442:	f003 f9f9 	bl	8008838 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CAM_RSTI_Pin;
 8005446:	2304      	movs	r3, #4
 8005448:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800544a:	2301      	movs	r3, #1
 800544c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800544e:	2301      	movs	r3, #1
 8005450:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005452:	2300      	movs	r3, #0
 8005454:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(CAM_RSTI_GPIO_Port, &GPIO_InitStruct);
 8005456:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800545a:	4619      	mov	r1, r3
 800545c:	4820      	ldr	r0, [pc, #128]	; (80054e0 <MX_GPIO_Init+0x31c>)
 800545e:	f003 f9eb 	bl	8008838 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin PFPin PFPin
                           PFPin PFPin */
  GPIO_InitStruct.Pin = OCTOSPI_F_IO0_Pin|OCTOSPI_F_IO1_Pin|OCTOSPI_F_IO2_Pin|OCTOSPI_F_IO3_Pin
 8005462:	f241 031f 	movw	r3, #4127	; 0x101f
 8005466:	627b      	str	r3, [r7, #36]	; 0x24
                          |OCTOSPI_F_CLK_P_Pin|OCTOSPI_F_DQS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005468:	2302      	movs	r3, #2
 800546a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800546c:	2300      	movs	r3, #0
 800546e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005470:	2303      	movs	r3, #3
 8005472:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_OCTOSPI2;
 8005474:	2305      	movs	r3, #5
 8005476:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8005478:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800547c:	4619      	mov	r1, r3
 800547e:	481b      	ldr	r0, [pc, #108]	; (80054ec <MX_GPIO_Init+0x328>)
 8005480:	f003 f9da 	bl	8008838 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Button_Pin;
 8005484:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005488:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800548a:	2300      	movs	r3, #0
 800548c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800548e:	2300      	movs	r3, #0
 8005490:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USER_Button_GPIO_Port, &GPIO_InitStruct);
 8005492:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005496:	4619      	mov	r1, r3
 8005498:	4815      	ldr	r0, [pc, #84]	; (80054f0 <MX_GPIO_Init+0x32c>)
 800549a:	f003 f9cd 	bl	8008838 <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin PHPin */
  GPIO_InitStruct.Pin = LED_RED_Pin|LED_GREEN_Pin|Mems_VL53_xshut_Pin;
 800549e:	23c2      	movs	r3, #194	; 0xc2
 80054a0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80054a2:	2301      	movs	r3, #1
 80054a4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80054a6:	2300      	movs	r3, #0
 80054a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80054aa:	2300      	movs	r3, #0
 80054ac:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80054ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80054b2:	4619      	mov	r1, r3
 80054b4:	480b      	ldr	r0, [pc, #44]	; (80054e4 <MX_GPIO_Init+0x320>)
 80054b6:	f003 f9bf 	bl	8008838 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = USB_C_P_Pin|USB_C_PA11_Pin;
 80054ba:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80054be:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80054c0:	2302      	movs	r3, #2
 80054c2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80054c4:	2300      	movs	r3, #0
 80054c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80054c8:	2300      	movs	r3, #0
 80054ca:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 80054cc:	230a      	movs	r3, #10
 80054ce:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80054d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80054d4:	4619      	mov	r1, r3
 80054d6:	e011      	b.n	80054fc <MX_GPIO_Init+0x338>
 80054d8:	46020c00 	.word	0x46020c00
 80054dc:	42020400 	.word	0x42020400
 80054e0:	42022000 	.word	0x42022000
 80054e4:	42021c00 	.word	0x42021c00
 80054e8:	42021800 	.word	0x42021800
 80054ec:	42021400 	.word	0x42021400
 80054f0:	42020800 	.word	0x42020800
 80054f4:	42020000 	.word	0x42020000
 80054f8:	42020c00 	.word	0x42020c00
 80054fc:	484d      	ldr	r0, [pc, #308]	; (8005634 <MX_GPIO_Init+0x470>)
 80054fe:	f003 f99b 	bl	8008838 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MIC_CCK1_Pin;
 8005502:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005506:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005508:	2302      	movs	r3, #2
 800550a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800550c:	2300      	movs	r3, #0
 800550e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005510:	2300      	movs	r3, #0
 8005512:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_MDF1;
 8005514:	2306      	movs	r3, #6
 8005516:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(MIC_CCK1_GPIO_Port, &GPIO_InitStruct);
 8005518:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800551c:	4619      	mov	r1, r3
 800551e:	4846      	ldr	r0, [pc, #280]	; (8005638 <MX_GPIO_Init+0x474>)
 8005520:	f003 f98a 	bl	8008838 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = MIC_SDINx_Pin|MIC_CCK0_Pin;
 8005524:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8005528:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800552a:	2302      	movs	r3, #2
 800552c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800552e:	2300      	movs	r3, #0
 8005530:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005532:	2300      	movs	r3, #0
 8005534:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF3_ADF1;
 8005536:	2303      	movs	r3, #3
 8005538:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800553a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800553e:	4619      	mov	r1, r3
 8005540:	483e      	ldr	r0, [pc, #248]	; (800563c <MX_GPIO_Init+0x478>)
 8005542:	f003 f979 	bl	8008838 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = WRLS_WKUP_B_Pin;
 8005546:	2340      	movs	r3, #64	; 0x40
 8005548:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800554a:	2301      	movs	r3, #1
 800554c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800554e:	2300      	movs	r3, #0
 8005550:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005552:	2300      	movs	r3, #0
 8005554:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(WRLS_WKUP_B_GPIO_Port, &GPIO_InitStruct);
 8005556:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800555a:	4619      	mov	r1, r3
 800555c:	4838      	ldr	r0, [pc, #224]	; (8005640 <MX_GPIO_Init+0x47c>)
 800555e:	f003 f96b 	bl	8008838 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = WRLS_NOTIFY_Pin|Mems_INT_IIS2MDC_Pin|USB_IANA_Pin;
 8005562:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 8005566:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005568:	2300      	movs	r3, #0
 800556a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800556c:	2300      	movs	r3, #0
 800556e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005570:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005574:	4619      	mov	r1, r3
 8005576:	4833      	ldr	r0, [pc, #204]	; (8005644 <MX_GPIO_Init+0x480>)
 8005578:	f003 f95e 	bl	8008838 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = USB_UCPD_FLT_Pin|Mems_ISM330DLC_INT1_Pin;
 800557c:	f44f 6310 	mov.w	r3, #2304	; 0x900
 8005580:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005582:	2300      	movs	r3, #0
 8005584:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005586:	2300      	movs	r3, #0
 8005588:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800558a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800558e:	4619      	mov	r1, r3
 8005590:	482a      	ldr	r0, [pc, #168]	; (800563c <MX_GPIO_Init+0x478>)
 8005592:	f003 f951 	bl	8008838 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_VBUS_SENSE_Pin;
 8005596:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800559a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800559c:	2300      	movs	r3, #0
 800559e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80055a0:	2300      	movs	r3, #0
 80055a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_VBUS_SENSE_GPIO_Port, &GPIO_InitStruct);
 80055a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80055a8:	4619      	mov	r1, r3
 80055aa:	4823      	ldr	r0, [pc, #140]	; (8005638 <MX_GPIO_Init+0x474>)
 80055ac:	f003 f944 	bl	8008838 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = WRLS_SPI2_NSS_Pin;
 80055b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80055b4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80055b6:	2302      	movs	r3, #2
 80055b8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80055ba:	2300      	movs	r3, #0
 80055bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80055be:	2300      	movs	r3, #0
 80055c0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80055c2:	2305      	movs	r3, #5
 80055c4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(WRLS_SPI2_NSS_GPIO_Port, &GPIO_InitStruct);
 80055c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80055ca:	4619      	mov	r1, r3
 80055cc:	481e      	ldr	r0, [pc, #120]	; (8005648 <MX_GPIO_Init+0x484>)
 80055ce:	f003 f933 	bl	8008838 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_UCPD_CC2_Pin;
 80055d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80055d6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80055d8:	2303      	movs	r3, #3
 80055da:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80055dc:	2300      	movs	r3, #0
 80055de:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_UCPD_CC2_GPIO_Port, &GPIO_InitStruct);
 80055e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80055e4:	4619      	mov	r1, r3
 80055e6:	4818      	ldr	r0, [pc, #96]	; (8005648 <MX_GPIO_Init+0x484>)
 80055e8:	f003 f926 	bl	8008838 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin */
  GPIO_InitStruct.Pin = Mems_STSAFE_RESET_Pin|WRLS_WKUP_W_Pin;
 80055ec:	f44f 4308 	mov.w	r3, #34816	; 0x8800
 80055f0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80055f2:	2301      	movs	r3, #1
 80055f4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80055f6:	2300      	movs	r3, #0
 80055f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80055fa:	2300      	movs	r3, #0
 80055fc:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80055fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005602:	4619      	mov	r1, r3
 8005604:	480c      	ldr	r0, [pc, #48]	; (8005638 <MX_GPIO_Init+0x474>)
 8005606:	f003 f917 	bl	8008838 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MIC_SDIN0_Pin;
 800560a:	2302      	movs	r3, #2
 800560c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800560e:	2302      	movs	r3, #2
 8005610:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005612:	2300      	movs	r3, #0
 8005614:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005616:	2300      	movs	r3, #0
 8005618:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_MDF1;
 800561a:	2306      	movs	r3, #6
 800561c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(MIC_SDIN0_GPIO_Port, &GPIO_InitStruct);
 800561e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005622:	4619      	mov	r1, r3
 8005624:	4808      	ldr	r0, [pc, #32]	; (8005648 <MX_GPIO_Init+0x484>)
 8005626:	f003 f907 	bl	8008838 <HAL_GPIO_Init>

}
 800562a:	bf00      	nop
 800562c:	3738      	adds	r7, #56	; 0x38
 800562e:	46bd      	mov	sp, r7
 8005630:	bd80      	pop	{r7, pc}
 8005632:	bf00      	nop
 8005634:	42020000 	.word	0x42020000
 8005638:	42021400 	.word	0x42021400
 800563c:	42021000 	.word	0x42021000
 8005640:	42021800 	.word	0x42021800
 8005644:	42020c00 	.word	0x42020c00
 8005648:	42020400 	.word	0x42020400

0800564c <MotionSensor_GPIO_Init>:
    InitStruct.Alternate = GPIO_AF10_OCTOSPI1;
    HAL_GPIO_Init(GPIOB, &InitStruct);
}

void MotionSensor_GPIO_Init(void)
{
 800564c:	b580      	push	{r7, lr}
 800564e:	b086      	sub	sp, #24
 8005650:	af00      	add	r7, sp, #0
	  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005652:	1d3b      	adds	r3, r7, #4
 8005654:	2200      	movs	r2, #0
 8005656:	601a      	str	r2, [r3, #0]
 8005658:	605a      	str	r2, [r3, #4]
 800565a:	609a      	str	r2, [r3, #8]
 800565c:	60da      	str	r2, [r3, #12]
 800565e:	611a      	str	r2, [r3, #16]
	  GPIO_InitStruct.Pin = Mems_ISM330DLC_INT1_Pin;
 8005660:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005664:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005666:	2300      	movs	r3, #0
 8005668:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800566a:	2300      	movs	r3, #0
 800566c:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800566e:	2300      	movs	r3, #0
 8005670:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005672:	2300      	movs	r3, #0
 8005674:	60fb      	str	r3, [r7, #12]
	  HAL_GPIO_Init(Mems_ISM330DLC_INT1_GPIO_Port, &GPIO_InitStruct);
 8005676:	1d3b      	adds	r3, r7, #4
 8005678:	4619      	mov	r1, r3
 800567a:	4803      	ldr	r0, [pc, #12]	; (8005688 <MotionSensor_GPIO_Init+0x3c>)
 800567c:	f003 f8dc 	bl	8008838 <HAL_GPIO_Init>
}
 8005680:	bf00      	nop
 8005682:	3718      	adds	r7, #24
 8005684:	46bd      	mov	sp, r7
 8005686:	bd80      	pop	{r7, pc}
 8005688:	42021000 	.word	0x42021000

0800568c <PressureSensor_GPIO_Init>:

void PressureSensor_GPIO_Init(void)
{
 800568c:	b580      	push	{r7, lr}
 800568e:	b086      	sub	sp, #24
 8005690:	af00      	add	r7, sp, #0
	  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005692:	1d3b      	adds	r3, r7, #4
 8005694:	2200      	movs	r2, #0
 8005696:	601a      	str	r2, [r3, #0]
 8005698:	605a      	str	r2, [r3, #4]
 800569a:	609a      	str	r2, [r3, #8]
 800569c:	60da      	str	r2, [r3, #12]
 800569e:	611a      	str	r2, [r3, #16]
	  GPIO_InitStruct.Pin = Mems_INT_LPS22HH_Pin;
 80056a0:	2304      	movs	r3, #4
 80056a2:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80056a4:	2300      	movs	r3, #0
 80056a6:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80056a8:	2300      	movs	r3, #0
 80056aa:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80056ac:	2300      	movs	r3, #0
 80056ae:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80056b0:	2300      	movs	r3, #0
 80056b2:	60fb      	str	r3, [r7, #12]
	  HAL_GPIO_Init(Mems_INT_LPS22HH_GPIO_Port, &GPIO_InitStruct);
 80056b4:	1d3b      	adds	r3, r7, #4
 80056b6:	4619      	mov	r1, r3
 80056b8:	4803      	ldr	r0, [pc, #12]	; (80056c8 <PressureSensor_GPIO_Init+0x3c>)
 80056ba:	f003 f8bd 	bl	8008838 <HAL_GPIO_Init>
}
 80056be:	bf00      	nop
 80056c0:	3718      	adds	r7, #24
 80056c2:	46bd      	mov	sp, r7
 80056c4:	bd80      	pop	{r7, pc}
 80056c6:	bf00      	nop
 80056c8:	42021800 	.word	0x42021800

080056cc <MagSensor_GPIO_Init>:

void MagSensor_GPIO_Init(void)
{
 80056cc:	b580      	push	{r7, lr}
 80056ce:	b086      	sub	sp, #24
 80056d0:	af00      	add	r7, sp, #0
	  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80056d2:	1d3b      	adds	r3, r7, #4
 80056d4:	2200      	movs	r2, #0
 80056d6:	601a      	str	r2, [r3, #0]
 80056d8:	605a      	str	r2, [r3, #4]
 80056da:	609a      	str	r2, [r3, #8]
 80056dc:	60da      	str	r2, [r3, #12]
 80056de:	611a      	str	r2, [r3, #16]
	  GPIO_InitStruct.Pin = Mems_INT_IIS2MDC_Pin;
 80056e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80056e4:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80056e6:	2300      	movs	r3, #0
 80056e8:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80056ea:	2300      	movs	r3, #0
 80056ec:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80056ee:	2300      	movs	r3, #0
 80056f0:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80056f2:	2300      	movs	r3, #0
 80056f4:	60fb      	str	r3, [r7, #12]
	  HAL_GPIO_Init(Mems_INT_IIS2MDC_GPIO_Port, &GPIO_InitStruct);
 80056f6:	1d3b      	adds	r3, r7, #4
 80056f8:	4619      	mov	r1, r3
 80056fa:	4803      	ldr	r0, [pc, #12]	; (8005708 <MagSensor_GPIO_Init+0x3c>)
 80056fc:	f003 f89c 	bl	8008838 <HAL_GPIO_Init>
}
 8005700:	bf00      	nop
 8005702:	3718      	adds	r7, #24
 8005704:	46bd      	mov	sp, r7
 8005706:	bd80      	pop	{r7, pc}
 8005708:	42020c00 	.word	0x42020c00

0800570c <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800570c:	b580      	push	{r7, lr}
 800570e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8005710:	4b1b      	ldr	r3, [pc, #108]	; (8005780 <MX_I2C1_Init+0x74>)
 8005712:	4a1c      	ldr	r2, [pc, #112]	; (8005784 <MX_I2C1_Init+0x78>)
 8005714:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x30909DEC;
 8005716:	4b1a      	ldr	r3, [pc, #104]	; (8005780 <MX_I2C1_Init+0x74>)
 8005718:	4a1b      	ldr	r2, [pc, #108]	; (8005788 <MX_I2C1_Init+0x7c>)
 800571a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800571c:	4b18      	ldr	r3, [pc, #96]	; (8005780 <MX_I2C1_Init+0x74>)
 800571e:	2200      	movs	r2, #0
 8005720:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8005722:	4b17      	ldr	r3, [pc, #92]	; (8005780 <MX_I2C1_Init+0x74>)
 8005724:	2201      	movs	r2, #1
 8005726:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8005728:	4b15      	ldr	r3, [pc, #84]	; (8005780 <MX_I2C1_Init+0x74>)
 800572a:	2200      	movs	r2, #0
 800572c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800572e:	4b14      	ldr	r3, [pc, #80]	; (8005780 <MX_I2C1_Init+0x74>)
 8005730:	2200      	movs	r2, #0
 8005732:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8005734:	4b12      	ldr	r3, [pc, #72]	; (8005780 <MX_I2C1_Init+0x74>)
 8005736:	2200      	movs	r2, #0
 8005738:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800573a:	4b11      	ldr	r3, [pc, #68]	; (8005780 <MX_I2C1_Init+0x74>)
 800573c:	2200      	movs	r2, #0
 800573e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8005740:	4b0f      	ldr	r3, [pc, #60]	; (8005780 <MX_I2C1_Init+0x74>)
 8005742:	2200      	movs	r2, #0
 8005744:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8005746:	480e      	ldr	r0, [pc, #56]	; (8005780 <MX_I2C1_Init+0x74>)
 8005748:	f003 fb76 	bl	8008e38 <HAL_I2C_Init>
 800574c:	4603      	mov	r3, r0
 800574e:	2b00      	cmp	r3, #0
 8005750:	d001      	beq.n	8005756 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8005752:	f000 fb4b 	bl	8005dec <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8005756:	2100      	movs	r1, #0
 8005758:	4809      	ldr	r0, [pc, #36]	; (8005780 <MX_I2C1_Init+0x74>)
 800575a:	f004 f8ff 	bl	800995c <HAL_I2CEx_ConfigAnalogFilter>
 800575e:	4603      	mov	r3, r0
 8005760:	2b00      	cmp	r3, #0
 8005762:	d001      	beq.n	8005768 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8005764:	f000 fb42 	bl	8005dec <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8005768:	2100      	movs	r1, #0
 800576a:	4805      	ldr	r0, [pc, #20]	; (8005780 <MX_I2C1_Init+0x74>)
 800576c:	f004 f941 	bl	80099f2 <HAL_I2CEx_ConfigDigitalFilter>
 8005770:	4603      	mov	r3, r0
 8005772:	2b00      	cmp	r3, #0
 8005774:	d001      	beq.n	800577a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8005776:	f000 fb39 	bl	8005dec <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800577a:	bf00      	nop
 800577c:	bd80      	pop	{r7, pc}
 800577e:	bf00      	nop
 8005780:	20001f3c 	.word	0x20001f3c
 8005784:	40005400 	.word	0x40005400
 8005788:	30909dec 	.word	0x30909dec

0800578c <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 800578c:	b580      	push	{r7, lr}
 800578e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8005790:	4b1b      	ldr	r3, [pc, #108]	; (8005800 <MX_I2C2_Init+0x74>)
 8005792:	4a1c      	ldr	r2, [pc, #112]	; (8005804 <MX_I2C2_Init+0x78>)
 8005794:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x30909DEC;
 8005796:	4b1a      	ldr	r3, [pc, #104]	; (8005800 <MX_I2C2_Init+0x74>)
 8005798:	4a1b      	ldr	r2, [pc, #108]	; (8005808 <MX_I2C2_Init+0x7c>)
 800579a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 800579c:	4b18      	ldr	r3, [pc, #96]	; (8005800 <MX_I2C2_Init+0x74>)
 800579e:	2200      	movs	r2, #0
 80057a0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80057a2:	4b17      	ldr	r3, [pc, #92]	; (8005800 <MX_I2C2_Init+0x74>)
 80057a4:	2201      	movs	r2, #1
 80057a6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80057a8:	4b15      	ldr	r3, [pc, #84]	; (8005800 <MX_I2C2_Init+0x74>)
 80057aa:	2200      	movs	r2, #0
 80057ac:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80057ae:	4b14      	ldr	r3, [pc, #80]	; (8005800 <MX_I2C2_Init+0x74>)
 80057b0:	2200      	movs	r2, #0
 80057b2:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80057b4:	4b12      	ldr	r3, [pc, #72]	; (8005800 <MX_I2C2_Init+0x74>)
 80057b6:	2200      	movs	r2, #0
 80057b8:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80057ba:	4b11      	ldr	r3, [pc, #68]	; (8005800 <MX_I2C2_Init+0x74>)
 80057bc:	2200      	movs	r2, #0
 80057be:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80057c0:	4b0f      	ldr	r3, [pc, #60]	; (8005800 <MX_I2C2_Init+0x74>)
 80057c2:	2200      	movs	r2, #0
 80057c4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80057c6:	480e      	ldr	r0, [pc, #56]	; (8005800 <MX_I2C2_Init+0x74>)
 80057c8:	f003 fb36 	bl	8008e38 <HAL_I2C_Init>
 80057cc:	4603      	mov	r3, r0
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d001      	beq.n	80057d6 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80057d2:	f000 fb0b 	bl	8005dec <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80057d6:	2100      	movs	r1, #0
 80057d8:	4809      	ldr	r0, [pc, #36]	; (8005800 <MX_I2C2_Init+0x74>)
 80057da:	f004 f8bf 	bl	800995c <HAL_I2CEx_ConfigAnalogFilter>
 80057de:	4603      	mov	r3, r0
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d001      	beq.n	80057e8 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80057e4:	f000 fb02 	bl	8005dec <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80057e8:	2100      	movs	r1, #0
 80057ea:	4805      	ldr	r0, [pc, #20]	; (8005800 <MX_I2C2_Init+0x74>)
 80057ec:	f004 f901 	bl	80099f2 <HAL_I2CEx_ConfigDigitalFilter>
 80057f0:	4603      	mov	r3, r0
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d001      	beq.n	80057fa <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80057f6:	f000 faf9 	bl	8005dec <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80057fa:	bf00      	nop
 80057fc:	bd80      	pop	{r7, pc}
 80057fe:	bf00      	nop
 8005800:	20001f88 	.word	0x20001f88
 8005804:	40005800 	.word	0x40005800
 8005808:	30909dec 	.word	0x30909dec

0800580c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800580c:	b580      	push	{r7, lr}
 800580e:	b0be      	sub	sp, #248	; 0xf8
 8005810:	af00      	add	r7, sp, #0
 8005812:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005814:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8005818:	2200      	movs	r2, #0
 800581a:	601a      	str	r2, [r3, #0]
 800581c:	605a      	str	r2, [r3, #4]
 800581e:	609a      	str	r2, [r3, #8]
 8005820:	60da      	str	r2, [r3, #12]
 8005822:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8005824:	f107 0318 	add.w	r3, r7, #24
 8005828:	22c8      	movs	r2, #200	; 0xc8
 800582a:	2100      	movs	r1, #0
 800582c:	4618      	mov	r0, r3
 800582e:	f00e fbc7 	bl	8013fc0 <memset>
  if(i2cHandle->Instance==I2C1)
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	4a53      	ldr	r2, [pc, #332]	; (8005984 <HAL_I2C_MspInit+0x178>)
 8005838:	4293      	cmp	r3, r2
 800583a:	d153      	bne.n	80058e4 <HAL_I2C_MspInit+0xd8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800583c:	f04f 0240 	mov.w	r2, #64	; 0x40
 8005840:	f04f 0300 	mov.w	r3, #0
 8005844:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8005848:	2300      	movs	r3, #0
 800584a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800584e:	f107 0318 	add.w	r3, r7, #24
 8005852:	4618      	mov	r0, r3
 8005854:	f006 ff68 	bl	800c728 <HAL_RCCEx_PeriphCLKConfig>
 8005858:	4603      	mov	r3, r0
 800585a:	2b00      	cmp	r3, #0
 800585c:	d001      	beq.n	8005862 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 800585e:	f000 fac5 	bl	8005dec <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005862:	4b49      	ldr	r3, [pc, #292]	; (8005988 <HAL_I2C_MspInit+0x17c>)
 8005864:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005868:	4a47      	ldr	r2, [pc, #284]	; (8005988 <HAL_I2C_MspInit+0x17c>)
 800586a:	f043 0302 	orr.w	r3, r3, #2
 800586e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8005872:	4b45      	ldr	r3, [pc, #276]	; (8005988 <HAL_I2C_MspInit+0x17c>)
 8005874:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005878:	f003 0302 	and.w	r3, r3, #2
 800587c:	617b      	str	r3, [r7, #20]
 800587e:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB9     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_8;
 8005880:	f44f 7340 	mov.w	r3, #768	; 0x300
 8005884:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005888:	2312      	movs	r3, #18
 800588a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800588e:	2300      	movs	r3, #0
 8005890:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005894:	2300      	movs	r3, #0
 8005896:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800589a:	2304      	movs	r3, #4
 800589c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80058a0:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80058a4:	4619      	mov	r1, r3
 80058a6:	4839      	ldr	r0, [pc, #228]	; (800598c <HAL_I2C_MspInit+0x180>)
 80058a8:	f002 ffc6 	bl	8008838 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80058ac:	4b36      	ldr	r3, [pc, #216]	; (8005988 <HAL_I2C_MspInit+0x17c>)
 80058ae:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80058b2:	4a35      	ldr	r2, [pc, #212]	; (8005988 <HAL_I2C_MspInit+0x17c>)
 80058b4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80058b8:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80058bc:	4b32      	ldr	r3, [pc, #200]	; (8005988 <HAL_I2C_MspInit+0x17c>)
 80058be:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80058c2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80058c6:	613b      	str	r3, [r7, #16]
 80058c8:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C1_MspInit 1 */
    __HAL_RCC_I2C1_FORCE_RESET();
 80058ca:	4b2f      	ldr	r3, [pc, #188]	; (8005988 <HAL_I2C_MspInit+0x17c>)
 80058cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80058ce:	4a2e      	ldr	r2, [pc, #184]	; (8005988 <HAL_I2C_MspInit+0x17c>)
 80058d0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80058d4:	6753      	str	r3, [r2, #116]	; 0x74
    __HAL_RCC_I2C1_RELEASE_RESET();
 80058d6:	4b2c      	ldr	r3, [pc, #176]	; (8005988 <HAL_I2C_MspInit+0x17c>)
 80058d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80058da:	4a2b      	ldr	r2, [pc, #172]	; (8005988 <HAL_I2C_MspInit+0x17c>)
 80058dc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80058e0:	6753      	str	r3, [r2, #116]	; 0x74
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 80058e2:	e04a      	b.n	800597a <HAL_I2C_MspInit+0x16e>
  else if(i2cHandle->Instance==I2C2)
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	4a29      	ldr	r2, [pc, #164]	; (8005990 <HAL_I2C_MspInit+0x184>)
 80058ea:	4293      	cmp	r3, r2
 80058ec:	d145      	bne.n	800597a <HAL_I2C_MspInit+0x16e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80058ee:	f04f 0280 	mov.w	r2, #128	; 0x80
 80058f2:	f04f 0300 	mov.w	r3, #0
 80058f6:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80058fa:	2300      	movs	r3, #0
 80058fc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005900:	f107 0318 	add.w	r3, r7, #24
 8005904:	4618      	mov	r0, r3
 8005906:	f006 ff0f 	bl	800c728 <HAL_RCCEx_PeriphCLKConfig>
 800590a:	4603      	mov	r3, r0
 800590c:	2b00      	cmp	r3, #0
 800590e:	d001      	beq.n	8005914 <HAL_I2C_MspInit+0x108>
      Error_Handler();
 8005910:	f000 fa6c 	bl	8005dec <Error_Handler>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8005914:	4b1c      	ldr	r3, [pc, #112]	; (8005988 <HAL_I2C_MspInit+0x17c>)
 8005916:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800591a:	4a1b      	ldr	r2, [pc, #108]	; (8005988 <HAL_I2C_MspInit+0x17c>)
 800591c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005920:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8005924:	4b18      	ldr	r3, [pc, #96]	; (8005988 <HAL_I2C_MspInit+0x17c>)
 8005926:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800592a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800592e:	60fb      	str	r3, [r7, #12]
 8005930:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8005932:	2330      	movs	r3, #48	; 0x30
 8005934:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005938:	2312      	movs	r3, #18
 800593a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800593e:	2300      	movs	r3, #0
 8005940:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005944:	2300      	movs	r3, #0
 8005946:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800594a:	2304      	movs	r3, #4
 800594c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8005950:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8005954:	4619      	mov	r1, r3
 8005956:	480f      	ldr	r0, [pc, #60]	; (8005994 <HAL_I2C_MspInit+0x188>)
 8005958:	f002 ff6e 	bl	8008838 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800595c:	4b0a      	ldr	r3, [pc, #40]	; (8005988 <HAL_I2C_MspInit+0x17c>)
 800595e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005962:	4a09      	ldr	r2, [pc, #36]	; (8005988 <HAL_I2C_MspInit+0x17c>)
 8005964:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005968:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 800596c:	4b06      	ldr	r3, [pc, #24]	; (8005988 <HAL_I2C_MspInit+0x17c>)
 800596e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005972:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005976:	60bb      	str	r3, [r7, #8]
 8005978:	68bb      	ldr	r3, [r7, #8]
}
 800597a:	bf00      	nop
 800597c:	37f8      	adds	r7, #248	; 0xf8
 800597e:	46bd      	mov	sp, r7
 8005980:	bd80      	pop	{r7, pc}
 8005982:	bf00      	nop
 8005984:	40005400 	.word	0x40005400
 8005988:	46020c00 	.word	0x46020c00
 800598c:	42020400 	.word	0x42020400
 8005990:	40005800 	.word	0x40005800
 8005994:	42021c00 	.word	0x42021c00

08005998 <HAL_I2C_MspDeInit>:

void HAL_I2C_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8005998:	b580      	push	{r7, lr}
 800599a:	b082      	sub	sp, #8
 800599c:	af00      	add	r7, sp, #0
 800599e:	6078      	str	r0, [r7, #4]

  if(i2cHandle->Instance==I2C1)
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	4a17      	ldr	r2, [pc, #92]	; (8005a04 <HAL_I2C_MspDeInit+0x6c>)
 80059a6:	4293      	cmp	r3, r2
 80059a8:	d112      	bne.n	80059d0 <HAL_I2C_MspDeInit+0x38>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 80059aa:	4b17      	ldr	r3, [pc, #92]	; (8005a08 <HAL_I2C_MspDeInit+0x70>)
 80059ac:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80059b0:	4a15      	ldr	r2, [pc, #84]	; (8005a08 <HAL_I2C_MspDeInit+0x70>)
 80059b2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80059b6:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c

    /**I2C1 GPIO Configuration
    PB9     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_9);
 80059ba:	f44f 7100 	mov.w	r1, #512	; 0x200
 80059be:	4813      	ldr	r0, [pc, #76]	; (8005a0c <HAL_I2C_MspDeInit+0x74>)
 80059c0:	f003 f912 	bl	8008be8 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_8);
 80059c4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80059c8:	4810      	ldr	r0, [pc, #64]	; (8005a0c <HAL_I2C_MspDeInit+0x74>)
 80059ca:	f003 f90d 	bl	8008be8 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
  }
}
 80059ce:	e014      	b.n	80059fa <HAL_I2C_MspDeInit+0x62>
  else if(i2cHandle->Instance==I2C2)
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	4a0e      	ldr	r2, [pc, #56]	; (8005a10 <HAL_I2C_MspDeInit+0x78>)
 80059d6:	4293      	cmp	r3, r2
 80059d8:	d10f      	bne.n	80059fa <HAL_I2C_MspDeInit+0x62>
    __HAL_RCC_I2C2_CLK_DISABLE();
 80059da:	4b0b      	ldr	r3, [pc, #44]	; (8005a08 <HAL_I2C_MspDeInit+0x70>)
 80059dc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80059e0:	4a09      	ldr	r2, [pc, #36]	; (8005a08 <HAL_I2C_MspDeInit+0x70>)
 80059e2:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80059e6:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
    HAL_GPIO_DeInit(GPIOH, GPIO_PIN_4);
 80059ea:	2110      	movs	r1, #16
 80059ec:	4809      	ldr	r0, [pc, #36]	; (8005a14 <HAL_I2C_MspDeInit+0x7c>)
 80059ee:	f003 f8fb 	bl	8008be8 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOH, GPIO_PIN_5);
 80059f2:	2120      	movs	r1, #32
 80059f4:	4807      	ldr	r0, [pc, #28]	; (8005a14 <HAL_I2C_MspDeInit+0x7c>)
 80059f6:	f003 f8f7 	bl	8008be8 <HAL_GPIO_DeInit>
}
 80059fa:	bf00      	nop
 80059fc:	3708      	adds	r7, #8
 80059fe:	46bd      	mov	sp, r7
 8005a00:	bd80      	pop	{r7, pc}
 8005a02:	bf00      	nop
 8005a04:	40005400 	.word	0x40005400
 8005a08:	46020c00 	.word	0x46020c00
 8005a0c:	42020400 	.word	0x42020400
 8005a10:	40005800 	.word	0x40005800
 8005a14:	42021c00 	.word	0x42021c00

08005a18 <I2C1_Init>:

/* USER CODE BEGIN 1 */
void I2C1_Init(void){
 8005a18:	b580      	push	{r7, lr}
 8005a1a:	af00      	add	r7, sp, #0

	  hi2c1.Instance = I2C1;
 8005a1c:	4b1b      	ldr	r3, [pc, #108]	; (8005a8c <I2C1_Init+0x74>)
 8005a1e:	4a1c      	ldr	r2, [pc, #112]	; (8005a90 <I2C1_Init+0x78>)
 8005a20:	601a      	str	r2, [r3, #0]
	  hi2c1.Init.Timing = 0xB0C03E40;
 8005a22:	4b1a      	ldr	r3, [pc, #104]	; (8005a8c <I2C1_Init+0x74>)
 8005a24:	4a1b      	ldr	r2, [pc, #108]	; (8005a94 <I2C1_Init+0x7c>)
 8005a26:	605a      	str	r2, [r3, #4]
	  hi2c1.Init.OwnAddress1 = 0;
 8005a28:	4b18      	ldr	r3, [pc, #96]	; (8005a8c <I2C1_Init+0x74>)
 8005a2a:	2200      	movs	r2, #0
 8005a2c:	609a      	str	r2, [r3, #8]
	  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8005a2e:	4b17      	ldr	r3, [pc, #92]	; (8005a8c <I2C1_Init+0x74>)
 8005a30:	2201      	movs	r2, #1
 8005a32:	60da      	str	r2, [r3, #12]
	  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8005a34:	4b15      	ldr	r3, [pc, #84]	; (8005a8c <I2C1_Init+0x74>)
 8005a36:	2200      	movs	r2, #0
 8005a38:	611a      	str	r2, [r3, #16]
	  hi2c1.Init.OwnAddress2 = 0;
 8005a3a:	4b14      	ldr	r3, [pc, #80]	; (8005a8c <I2C1_Init+0x74>)
 8005a3c:	2200      	movs	r2, #0
 8005a3e:	615a      	str	r2, [r3, #20]
	  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8005a40:	4b12      	ldr	r3, [pc, #72]	; (8005a8c <I2C1_Init+0x74>)
 8005a42:	2200      	movs	r2, #0
 8005a44:	619a      	str	r2, [r3, #24]
	  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8005a46:	4b11      	ldr	r3, [pc, #68]	; (8005a8c <I2C1_Init+0x74>)
 8005a48:	2200      	movs	r2, #0
 8005a4a:	61da      	str	r2, [r3, #28]
	  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8005a4c:	4b0f      	ldr	r3, [pc, #60]	; (8005a8c <I2C1_Init+0x74>)
 8005a4e:	2200      	movs	r2, #0
 8005a50:	621a      	str	r2, [r3, #32]
	  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8005a52:	480e      	ldr	r0, [pc, #56]	; (8005a8c <I2C1_Init+0x74>)
 8005a54:	f003 f9f0 	bl	8008e38 <HAL_I2C_Init>
 8005a58:	4603      	mov	r3, r0
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d001      	beq.n	8005a62 <I2C1_Init+0x4a>
	  {
	    Error_Handler();
 8005a5e:	f000 f9c5 	bl	8005dec <Error_Handler>
	  }

	  /** Configure Analogue filter
	  */
	  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8005a62:	2100      	movs	r1, #0
 8005a64:	4809      	ldr	r0, [pc, #36]	; (8005a8c <I2C1_Init+0x74>)
 8005a66:	f003 ff79 	bl	800995c <HAL_I2CEx_ConfigAnalogFilter>
 8005a6a:	4603      	mov	r3, r0
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d001      	beq.n	8005a74 <I2C1_Init+0x5c>
	  {
	    Error_Handler();
 8005a70:	f000 f9bc 	bl	8005dec <Error_Handler>
	  }

	  /** Configure Digital filter
	  */
	  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8005a74:	2100      	movs	r1, #0
 8005a76:	4805      	ldr	r0, [pc, #20]	; (8005a8c <I2C1_Init+0x74>)
 8005a78:	f003 ffbb 	bl	80099f2 <HAL_I2CEx_ConfigDigitalFilter>
 8005a7c:	4603      	mov	r3, r0
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d001      	beq.n	8005a86 <I2C1_Init+0x6e>
	  {
	    Error_Handler();
 8005a82:	f000 f9b3 	bl	8005dec <Error_Handler>
	  }

}
 8005a86:	bf00      	nop
 8005a88:	bd80      	pop	{r7, pc}
 8005a8a:	bf00      	nop
 8005a8c:	20001f3c 	.word	0x20001f3c
 8005a90:	40005400 	.word	0x40005400
 8005a94:	b0c03e40 	.word	0xb0c03e40

08005a98 <I2C2_Init>:

void I2C2_Init(void){
 8005a98:	b580      	push	{r7, lr}
 8005a9a:	af00      	add	r7, sp, #0

	  hi2c2.Instance = I2C2;
 8005a9c:	4b1b      	ldr	r3, [pc, #108]	; (8005b0c <I2C2_Init+0x74>)
 8005a9e:	4a1c      	ldr	r2, [pc, #112]	; (8005b10 <I2C2_Init+0x78>)
 8005aa0:	601a      	str	r2, [r3, #0]
	  hi2c2.Init.Timing = 0x30909DEC;
 8005aa2:	4b1a      	ldr	r3, [pc, #104]	; (8005b0c <I2C2_Init+0x74>)
 8005aa4:	4a1b      	ldr	r2, [pc, #108]	; (8005b14 <I2C2_Init+0x7c>)
 8005aa6:	605a      	str	r2, [r3, #4]
	  hi2c2.Init.OwnAddress1 = 0;
 8005aa8:	4b18      	ldr	r3, [pc, #96]	; (8005b0c <I2C2_Init+0x74>)
 8005aaa:	2200      	movs	r2, #0
 8005aac:	609a      	str	r2, [r3, #8]
	  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8005aae:	4b17      	ldr	r3, [pc, #92]	; (8005b0c <I2C2_Init+0x74>)
 8005ab0:	2201      	movs	r2, #1
 8005ab2:	60da      	str	r2, [r3, #12]
	  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8005ab4:	4b15      	ldr	r3, [pc, #84]	; (8005b0c <I2C2_Init+0x74>)
 8005ab6:	2200      	movs	r2, #0
 8005ab8:	611a      	str	r2, [r3, #16]
	  hi2c2.Init.OwnAddress2 = 0;
 8005aba:	4b14      	ldr	r3, [pc, #80]	; (8005b0c <I2C2_Init+0x74>)
 8005abc:	2200      	movs	r2, #0
 8005abe:	615a      	str	r2, [r3, #20]
	  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8005ac0:	4b12      	ldr	r3, [pc, #72]	; (8005b0c <I2C2_Init+0x74>)
 8005ac2:	2200      	movs	r2, #0
 8005ac4:	619a      	str	r2, [r3, #24]
	  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8005ac6:	4b11      	ldr	r3, [pc, #68]	; (8005b0c <I2C2_Init+0x74>)
 8005ac8:	2200      	movs	r2, #0
 8005aca:	61da      	str	r2, [r3, #28]
	  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8005acc:	4b0f      	ldr	r3, [pc, #60]	; (8005b0c <I2C2_Init+0x74>)
 8005ace:	2200      	movs	r2, #0
 8005ad0:	621a      	str	r2, [r3, #32]
	  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8005ad2:	480e      	ldr	r0, [pc, #56]	; (8005b0c <I2C2_Init+0x74>)
 8005ad4:	f003 f9b0 	bl	8008e38 <HAL_I2C_Init>
 8005ad8:	4603      	mov	r3, r0
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d001      	beq.n	8005ae2 <I2C2_Init+0x4a>
	  {
	    Error_Handler();
 8005ade:	f000 f985 	bl	8005dec <Error_Handler>
	  }

	  /** Configure Analogue filter
	  */
	  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8005ae2:	2100      	movs	r1, #0
 8005ae4:	4809      	ldr	r0, [pc, #36]	; (8005b0c <I2C2_Init+0x74>)
 8005ae6:	f003 ff39 	bl	800995c <HAL_I2CEx_ConfigAnalogFilter>
 8005aea:	4603      	mov	r3, r0
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d001      	beq.n	8005af4 <I2C2_Init+0x5c>
	  {
	    Error_Handler();
 8005af0:	f000 f97c 	bl	8005dec <Error_Handler>
	  }

	  /** Configure Digital filter
	  */
	  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8005af4:	2100      	movs	r1, #0
 8005af6:	4805      	ldr	r0, [pc, #20]	; (8005b0c <I2C2_Init+0x74>)
 8005af8:	f003 ff7b 	bl	80099f2 <HAL_I2CEx_ConfigDigitalFilter>
 8005afc:	4603      	mov	r3, r0
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d001      	beq.n	8005b06 <I2C2_Init+0x6e>
	  {
	    Error_Handler();
 8005b02:	f000 f973 	bl	8005dec <Error_Handler>
	  }

}
 8005b06:	bf00      	nop
 8005b08:	bd80      	pop	{r7, pc}
 8005b0a:	bf00      	nop
 8005b0c:	20001f88 	.word	0x20001f88
 8005b10:	40005800 	.word	0x40005800
 8005b14:	30909dec 	.word	0x30909dec

08005b18 <MX_ICACHE_Init>:

/* USER CODE END 0 */

/* ICACHE init function */
void MX_ICACHE_Init(void)
{
 8005b18:	b580      	push	{r7, lr}
 8005b1a:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache (default 2-ways set associative cache)
  */
  if (HAL_ICACHE_Enable() != HAL_OK)
 8005b1c:	f003 ffb6 	bl	8009a8c <HAL_ICACHE_Enable>
 8005b20:	4603      	mov	r3, r0
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d001      	beq.n	8005b2a <MX_ICACHE_Init+0x12>
  {
    Error_Handler();
 8005b26:	f000 f961 	bl	8005dec <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 8005b2a:	bf00      	nop
 8005b2c:	bd80      	pop	{r7, pc}
	...

08005b30 <MX_ProjectDMAQueue_Config>:
  * @brief  DMA Linked-list ProjectDMAQueue configuration
  * @param  None
  * @retval None
  */
HAL_StatusTypeDef MX_ProjectDMAQueue_Config(void)
{
 8005b30:	b580      	push	{r7, lr}
 8005b32:	b09c      	sub	sp, #112	; 0x70
 8005b34:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef ret = HAL_OK;
 8005b36:	2300      	movs	r3, #0
 8005b38:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  /* DMA node configuration declaration */
  DMA_NodeConfTypeDef pNodeConfig;

  /* Set node configuration ################################################*/
  pNodeConfig.NodeType = DMA_GPDMA_2D_NODE;
 8005b3c:	2322      	movs	r3, #34	; 0x22
 8005b3e:	603b      	str	r3, [r7, #0]
  pNodeConfig.Init.Request = GPDMA1_REQUEST_DCMI;
 8005b40:	2356      	movs	r3, #86	; 0x56
 8005b42:	607b      	str	r3, [r7, #4]
  pNodeConfig.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 8005b44:	2300      	movs	r3, #0
 8005b46:	60bb      	str	r3, [r7, #8]
  pNodeConfig.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005b48:	2300      	movs	r3, #0
 8005b4a:	60fb      	str	r3, [r7, #12]
  pNodeConfig.Init.SrcInc = DMA_SINC_FIXED;
 8005b4c:	2300      	movs	r3, #0
 8005b4e:	613b      	str	r3, [r7, #16]
  pNodeConfig.Init.DestInc = DMA_DINC_INCREMENTED;
 8005b50:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8005b54:	617b      	str	r3, [r7, #20]
  pNodeConfig.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_WORD;
 8005b56:	2302      	movs	r3, #2
 8005b58:	61bb      	str	r3, [r7, #24]
  pNodeConfig.Init.DestDataWidth = DMA_DEST_DATAWIDTH_WORD;
 8005b5a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005b5e:	61fb      	str	r3, [r7, #28]
  pNodeConfig.Init.SrcBurstLength = 1;
 8005b60:	2301      	movs	r3, #1
 8005b62:	627b      	str	r3, [r7, #36]	; 0x24
  pNodeConfig.Init.DestBurstLength = 1;
 8005b64:	2301      	movs	r3, #1
 8005b66:	62bb      	str	r3, [r7, #40]	; 0x28
  pNodeConfig.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT0;
 8005b68:	2300      	movs	r3, #0
 8005b6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  pNodeConfig.Init.TransferEventMode = DMA_TCEM_EACH_LL_ITEM_TRANSFER;
 8005b6c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005b70:	633b      	str	r3, [r7, #48]	; 0x30
  pNodeConfig.RepeatBlockConfig.RepeatCount = 1;
 8005b72:	2301      	movs	r3, #1
 8005b74:	64fb      	str	r3, [r7, #76]	; 0x4c
  pNodeConfig.RepeatBlockConfig.SrcAddrOffset = 0;
 8005b76:	2300      	movs	r3, #0
 8005b78:	653b      	str	r3, [r7, #80]	; 0x50
  pNodeConfig.RepeatBlockConfig.DestAddrOffset = 0;
 8005b7a:	2300      	movs	r3, #0
 8005b7c:	657b      	str	r3, [r7, #84]	; 0x54
  pNodeConfig.RepeatBlockConfig.BlkSrcAddrOffset = 0;
 8005b7e:	2300      	movs	r3, #0
 8005b80:	65bb      	str	r3, [r7, #88]	; 0x58
  pNodeConfig.RepeatBlockConfig.BlkDestAddrOffset = 0;
 8005b82:	2300      	movs	r3, #0
 8005b84:	65fb      	str	r3, [r7, #92]	; 0x5c
  pNodeConfig.TriggerConfig.TriggerPolarity = DMA_TRIG_POLARITY_MASKED;
 8005b86:	2300      	movs	r3, #0
 8005b88:	647b      	str	r3, [r7, #68]	; 0x44
  pNodeConfig.DataHandlingConfig.DataExchange = DMA_EXCHANGE_NONE;
 8005b8a:	2300      	movs	r3, #0
 8005b8c:	63bb      	str	r3, [r7, #56]	; 0x38
  pNodeConfig.DataHandlingConfig.DataAlignment = DMA_DATA_RIGHTALIGN_ZEROPADDED;
 8005b8e:	2300      	movs	r3, #0
 8005b90:	63fb      	str	r3, [r7, #60]	; 0x3c
  pNodeConfig.SrcAddress = 0;
 8005b92:	2300      	movs	r3, #0
 8005b94:	663b      	str	r3, [r7, #96]	; 0x60
  pNodeConfig.DstAddress = 0;
 8005b96:	2300      	movs	r3, #0
 8005b98:	667b      	str	r3, [r7, #100]	; 0x64
  pNodeConfig.DataSize = 0;
 8005b9a:	2300      	movs	r3, #0
 8005b9c:	66bb      	str	r3, [r7, #104]	; 0x68

  /* Build DCMItoMemoryPing Node */
  ret |= HAL_DMAEx_List_BuildNode(&pNodeConfig, &DCMItoMemoryPing);
 8005b9e:	463b      	mov	r3, r7
 8005ba0:	491e      	ldr	r1, [pc, #120]	; (8005c1c <MX_ProjectDMAQueue_Config+0xec>)
 8005ba2:	4618      	mov	r0, r3
 8005ba4:	f002 f8d0 	bl	8007d48 <HAL_DMAEx_List_BuildNode>
 8005ba8:	4603      	mov	r3, r0
 8005baa:	461a      	mov	r2, r3
 8005bac:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8005bb0:	4313      	orrs	r3, r2
 8005bb2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

  /* Insert DCMItoMemoryPing to Queue */
  ret |= HAL_DMAEx_List_InsertNode_Tail(&ProjectDMAQueue, &DCMItoMemoryPing);
 8005bb6:	4919      	ldr	r1, [pc, #100]	; (8005c1c <MX_ProjectDMAQueue_Config+0xec>)
 8005bb8:	4819      	ldr	r0, [pc, #100]	; (8005c20 <MX_ProjectDMAQueue_Config+0xf0>)
 8005bba:	f002 f8db 	bl	8007d74 <HAL_DMAEx_List_InsertNode_Tail>
 8005bbe:	4603      	mov	r3, r0
 8005bc0:	461a      	mov	r2, r3
 8005bc2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8005bc6:	4313      	orrs	r3, r2
 8005bc8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

  /* Set node configuration ################################################*/

  /* Build DCMItoMemoryPong Node */
  ret |= HAL_DMAEx_List_BuildNode(&pNodeConfig, &DCMItoMemoryPong);
 8005bcc:	463b      	mov	r3, r7
 8005bce:	4915      	ldr	r1, [pc, #84]	; (8005c24 <MX_ProjectDMAQueue_Config+0xf4>)
 8005bd0:	4618      	mov	r0, r3
 8005bd2:	f002 f8b9 	bl	8007d48 <HAL_DMAEx_List_BuildNode>
 8005bd6:	4603      	mov	r3, r0
 8005bd8:	461a      	mov	r2, r3
 8005bda:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8005bde:	4313      	orrs	r3, r2
 8005be0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

  /* Insert DCMItoMemoryPong to Queue */
  ret |= HAL_DMAEx_List_InsertNode_Tail(&ProjectDMAQueue, &DCMItoMemoryPong);
 8005be4:	490f      	ldr	r1, [pc, #60]	; (8005c24 <MX_ProjectDMAQueue_Config+0xf4>)
 8005be6:	480e      	ldr	r0, [pc, #56]	; (8005c20 <MX_ProjectDMAQueue_Config+0xf0>)
 8005be8:	f002 f8c4 	bl	8007d74 <HAL_DMAEx_List_InsertNode_Tail>
 8005bec:	4603      	mov	r3, r0
 8005bee:	461a      	mov	r2, r3
 8005bf0:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8005bf4:	4313      	orrs	r3, r2
 8005bf6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

  ret |= HAL_DMAEx_List_SetCircularModeConfig(&ProjectDMAQueue, &DCMItoMemoryPing);
 8005bfa:	4908      	ldr	r1, [pc, #32]	; (8005c1c <MX_ProjectDMAQueue_Config+0xec>)
 8005bfc:	4808      	ldr	r0, [pc, #32]	; (8005c20 <MX_ProjectDMAQueue_Config+0xf0>)
 8005bfe:	f002 f931 	bl	8007e64 <HAL_DMAEx_List_SetCircularModeConfig>
 8005c02:	4603      	mov	r3, r0
 8005c04:	461a      	mov	r2, r3
 8005c06:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8005c0a:	4313      	orrs	r3, r2
 8005c0c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

   return ret;
 8005c10:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 8005c14:	4618      	mov	r0, r3
 8005c16:	3770      	adds	r7, #112	; 0x70
 8005c18:	46bd      	mov	sp, r7
 8005c1a:	bd80      	pop	{r7, pc}
 8005c1c:	20001fd4 	.word	0x20001fd4
 8005c20:	20001ff8 	.word	0x20001ff8
 8005c24:	20002010 	.word	0x20002010

08005c28 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8005c28:	b580      	push	{r7, lr}
 8005c2a:	b082      	sub	sp, #8
 8005c2c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8005c2e:	f000 fe45 	bl	80068bc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8005c32:	f000 f84d 	bl	8005cd0 <SystemClock_Config>

  /* Configure the System Power */
  SystemPower_Config();
 8005c36:	f000 f8a7 	bl	8005d88 <SystemPower_Config>

  /* USER CODE BEGIN SysInit */
  __HAL_RCC_PWR_CLK_ENABLE();
 8005c3a:	4b21      	ldr	r3, [pc, #132]	; (8005cc0 <main+0x98>)
 8005c3c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005c40:	4a1f      	ldr	r2, [pc, #124]	; (8005cc0 <main+0x98>)
 8005c42:	f043 0304 	orr.w	r3, r3, #4
 8005c46:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8005c4a:	4b1d      	ldr	r3, [pc, #116]	; (8005cc0 <main+0x98>)
 8005c4c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005c50:	f003 0304 	and.w	r3, r3, #4
 8005c54:	607b      	str	r3, [r7, #4]
 8005c56:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddA();
 8005c58:	f005 fa72 	bl	800b140 <HAL_PWREx_EnableVddA>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8005c5c:	f7ff fab2 	bl	80051c4 <MX_GPIO_Init>
  MX_DCMI_Init();
 8005c60:	f7ff f928 	bl	8004eb4 <MX_DCMI_Init>
  MX_GPDMA1_Init();
 8005c64:	f7ff fa54 	bl	8005110 <MX_GPDMA1_Init>
  MX_OCTOSPI1_Init();
 8005c68:	f000 f8c6 	bl	8005df8 <MX_OCTOSPI1_Init>
  MX_ICACHE_Init();
 8005c6c:	f7ff ff54 	bl	8005b18 <MX_ICACHE_Init>
  MX_DCACHE1_Init();
 8005c70:	f7ff f90a 	bl	8004e88 <MX_DCACHE1_Init>
  MX_I2C1_Init();
 8005c74:	f7ff fd4a 	bl	800570c <MX_I2C1_Init>
  MX_I2C2_Init();
 8005c78:	f7ff fd88 	bl	800578c <MX_I2C2_Init>
  MX_CORDIC_Init();
 8005c7c:	f7ff f8ce 	bl	8004e1c <MX_CORDIC_Init>
  MX_USART1_UART_Init();
 8005c80:	f000 fd3e 	bl	8006700 <MX_USART1_UART_Init>
  MX_TIM7_Init();
 8005c84:	f000 fcde 	bl	8006644 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */
  printf("System Starting\r\n");
 8005c88:	480e      	ldr	r0, [pc, #56]	; (8005cc4 <main+0x9c>)
 8005c8a:	f00e fa0f 	bl	80140ac <puts>
  BSP_TempHumSensorInit();
 8005c8e:	f7fb fca3 	bl	80015d8 <BSP_TempHumSensorInit>
  BSP_MagnetometerInit();
 8005c92:	f7fb fd2b 	bl	80016ec <BSP_MagnetometerInit>
  BSP_MotionSensorInit();
 8005c96:	f7fb fddb 	bl	8001850 <BSP_MotionSensorInit>
  BSP_PressureSensorInit();
 8005c9a:	f7fb fce7 	bl	800166c <BSP_PressureSensorInit>
  BSP_AmbientLightInit();
 8005c9e:	f7fb fd99 	bl	80017d4 <BSP_AmbientLightInit>
  BSP_RamInit();
 8005ca2:	f7fb fec5 	bl	8001a30 <BSP_RamInit>
  BSP_CameraInit();
 8005ca6:	f7fb fc1b 	bl	80014e0 <BSP_CameraInit>
  printf("System Initialized\r\n");
 8005caa:	4807      	ldr	r0, [pc, #28]	; (8005cc8 <main+0xa0>)
 8005cac:	f00e f9fe 	bl	80140ac <puts>

  BSP_CameraStart((uint8_t*)CameraBuff);
 8005cb0:	4b06      	ldr	r3, [pc, #24]	; (8005ccc <main+0xa4>)
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	4618      	mov	r0, r3
 8005cb6:	f7fb fc1d 	bl	80014f4 <BSP_CameraStart>

  /* USER CODE END 2 */

  MX_ThreadX_Init();
 8005cba:	f7fe fec3 	bl	8004a44 <MX_ThreadX_Init>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
 8005cbe:	e7fe      	b.n	8005cbe <main+0x96>
 8005cc0:	46020c00 	.word	0x46020c00
 8005cc4:	08014b08 	.word	0x08014b08
 8005cc8:	08014b1c 	.word	0x08014b1c
 8005ccc:	20000000 	.word	0x20000000

08005cd0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005cd0:	b580      	push	{r7, lr}
 8005cd2:	b09e      	sub	sp, #120	; 0x78
 8005cd4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005cd6:	f107 0318 	add.w	r3, r7, #24
 8005cda:	2260      	movs	r2, #96	; 0x60
 8005cdc:	2100      	movs	r1, #0
 8005cde:	4618      	mov	r0, r3
 8005ce0:	f00e f96e 	bl	8013fc0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005ce4:	463b      	mov	r3, r7
 8005ce6:	2200      	movs	r2, #0
 8005ce8:	601a      	str	r2, [r3, #0]
 8005cea:	605a      	str	r2, [r3, #4]
 8005cec:	609a      	str	r2, [r3, #8]
 8005cee:	60da      	str	r2, [r3, #12]
 8005cf0:	611a      	str	r2, [r3, #16]
 8005cf2:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8005cf4:	f44f 3040 	mov.w	r0, #196608	; 0x30000
 8005cf8:	f005 f940 	bl	800af7c <HAL_PWREx_ControlVoltageScaling>
 8005cfc:	4603      	mov	r3, r0
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d001      	beq.n	8005d06 <SystemClock_Config+0x36>
  {
    Error_Handler();
 8005d02:	f000 f873 	bl	8005dec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8005d06:	2310      	movs	r3, #16
 8005d08:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8005d0a:	2301      	movs	r3, #1
 8005d0c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8005d0e:	2310      	movs	r3, #16
 8005d10:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_4;
 8005d12:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005d16:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005d18:	2302      	movs	r3, #2
 8005d1a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8005d1c:	2301      	movs	r3, #1
 8005d1e:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLMBOOST = RCC_PLLMBOOST_DIV1;
 8005d20:	2300      	movs	r3, #0
 8005d22:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8005d24:	2301      	movs	r3, #1
 8005d26:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 80;
 8005d28:	2350      	movs	r3, #80	; 0x50
 8005d2a:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLP = 2;
 8005d2c:	2302      	movs	r3, #2
 8005d2e:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8005d30:	2302      	movs	r3, #2
 8005d32:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLR = 2;
 8005d34:	2302      	movs	r3, #2
 8005d36:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLLVCIRANGE_0;
 8005d38:	2300      	movs	r3, #0
 8005d3a:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8005d3c:	2300      	movs	r3, #0
 8005d3e:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005d40:	f107 0318 	add.w	r3, r7, #24
 8005d44:	4618      	mov	r0, r3
 8005d46:	f005 fa0b 	bl	800b160 <HAL_RCC_OscConfig>
 8005d4a:	4603      	mov	r3, r0
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d001      	beq.n	8005d54 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8005d50:	f000 f84c 	bl	8005dec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005d54:	231f      	movs	r3, #31
 8005d56:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005d58:	2303      	movs	r3, #3
 8005d5a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005d5c:	2300      	movs	r3, #0
 8005d5e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8005d60:	2300      	movs	r3, #0
 8005d62:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8005d64:	2300      	movs	r3, #0
 8005d66:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 8005d68:	2300      	movs	r3, #0
 8005d6a:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8005d6c:	463b      	mov	r3, r7
 8005d6e:	2104      	movs	r1, #4
 8005d70:	4618      	mov	r0, r3
 8005d72:	f006 f8cb 	bl	800bf0c <HAL_RCC_ClockConfig>
 8005d76:	4603      	mov	r3, r0
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d001      	beq.n	8005d80 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8005d7c:	f000 f836 	bl	8005dec <Error_Handler>
  }
}
 8005d80:	bf00      	nop
 8005d82:	3778      	adds	r7, #120	; 0x78
 8005d84:	46bd      	mov	sp, r7
 8005d86:	bd80      	pop	{r7, pc}

08005d88 <SystemPower_Config>:
/**
  * @brief Power Configuration
  * @retval None
  */
static void SystemPower_Config(void)
{
 8005d88:	b580      	push	{r7, lr}
 8005d8a:	af00      	add	r7, sp, #0
  HAL_PWREx_EnableVddIO2();
 8005d8c:	f005 f9c8 	bl	800b120 <HAL_PWREx_EnableVddIO2>

  /*
   * Switch to SMPS regulator instead of LDO
   */
  if (HAL_PWREx_ConfigSupply(PWR_SMPS_SUPPLY) != HAL_OK)
 8005d90:	2002      	movs	r0, #2
 8005d92:	f005 f975 	bl	800b080 <HAL_PWREx_ConfigSupply>
 8005d96:	4603      	mov	r3, r0
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d001      	beq.n	8005da0 <SystemPower_Config+0x18>
  {
    Error_Handler();
 8005d9c:	f000 f826 	bl	8005dec <Error_Handler>
  }
}
 8005da0:	bf00      	nop
 8005da2:	bd80      	pop	{r7, pc}

08005da4 <__io_putchar>:

/* USER CODE BEGIN 4 */
int __io_putchar(int ch)
{
 8005da4:	b580      	push	{r7, lr}
 8005da6:	b082      	sub	sp, #8
 8005da8:	af00      	add	r7, sp, #0
 8005daa:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 8005dac:	1d39      	adds	r1, r7, #4
 8005dae:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005db2:	2201      	movs	r2, #1
 8005db4:	4803      	ldr	r0, [pc, #12]	; (8005dc4 <__io_putchar+0x20>)
 8005db6:	f009 fdf3 	bl	800f9a0 <HAL_UART_Transmit>
  return ch;
 8005dba:	687b      	ldr	r3, [r7, #4]
}
 8005dbc:	4618      	mov	r0, r3
 8005dbe:	3708      	adds	r7, #8
 8005dc0:	46bd      	mov	sp, r7
 8005dc2:	bd80      	pop	{r7, pc}
 8005dc4:	2000212c 	.word	0x2000212c

08005dc8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005dc8:	b580      	push	{r7, lr}
 8005dca:	b082      	sub	sp, #8
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	4a04      	ldr	r2, [pc, #16]	; (8005de8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8005dd6:	4293      	cmp	r3, r2
 8005dd8:	d101      	bne.n	8005dde <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8005dda:	f000 fd9d 	bl	8006918 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8005dde:	bf00      	nop
 8005de0:	3708      	adds	r7, #8
 8005de2:	46bd      	mov	sp, r7
 8005de4:	bd80      	pop	{r7, pc}
 8005de6:	bf00      	nop
 8005de8:	40001000 	.word	0x40001000

08005dec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005dec:	b480      	push	{r7}
 8005dee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8005df0:	b672      	cpsid	i
}
 8005df2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8005df4:	e7fe      	b.n	8005df4 <Error_Handler+0x8>
	...

08005df8 <MX_OCTOSPI1_Init>:

OSPI_HandleTypeDef hospi1;

/* OCTOSPI1 init function */
void MX_OCTOSPI1_Init(void)
{
 8005df8:	b580      	push	{r7, lr}
 8005dfa:	b088      	sub	sp, #32
 8005dfc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN OCTOSPI1_Init 0 */

  /* USER CODE END OCTOSPI1_Init 0 */

  OSPIM_CfgTypeDef sOspiManagerCfg = {0};
 8005dfe:	f107 0308 	add.w	r3, r7, #8
 8005e02:	2200      	movs	r2, #0
 8005e04:	601a      	str	r2, [r3, #0]
 8005e06:	605a      	str	r2, [r3, #4]
 8005e08:	609a      	str	r2, [r3, #8]
 8005e0a:	60da      	str	r2, [r3, #12]
 8005e0c:	611a      	str	r2, [r3, #16]
 8005e0e:	615a      	str	r2, [r3, #20]
  HAL_OSPI_DLYB_CfgTypeDef HAL_OSPI_DLYB_Cfg_Struct = {0};
 8005e10:	463b      	mov	r3, r7
 8005e12:	2200      	movs	r2, #0
 8005e14:	601a      	str	r2, [r3, #0]
 8005e16:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN OCTOSPI1_Init 1 */

  /* USER CODE END OCTOSPI1_Init 1 */
  hospi1.Instance = OCTOSPI1;
 8005e18:	4b32      	ldr	r3, [pc, #200]	; (8005ee4 <MX_OCTOSPI1_Init+0xec>)
 8005e1a:	4a33      	ldr	r2, [pc, #204]	; (8005ee8 <MX_OCTOSPI1_Init+0xf0>)
 8005e1c:	601a      	str	r2, [r3, #0]
  hospi1.Init.FifoThreshold = 1;
 8005e1e:	4b31      	ldr	r3, [pc, #196]	; (8005ee4 <MX_OCTOSPI1_Init+0xec>)
 8005e20:	2201      	movs	r2, #1
 8005e22:	605a      	str	r2, [r3, #4]
  hospi1.Init.DualQuad = HAL_OSPI_DUALQUAD_DISABLE;
 8005e24:	4b2f      	ldr	r3, [pc, #188]	; (8005ee4 <MX_OCTOSPI1_Init+0xec>)
 8005e26:	2200      	movs	r2, #0
 8005e28:	609a      	str	r2, [r3, #8]
  hospi1.Init.MemoryType = HAL_OSPI_MEMTYPE_APMEMORY;
 8005e2a:	4b2e      	ldr	r3, [pc, #184]	; (8005ee4 <MX_OCTOSPI1_Init+0xec>)
 8005e2c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005e30:	60da      	str	r2, [r3, #12]
  hospi1.Init.DeviceSize = 23;
 8005e32:	4b2c      	ldr	r3, [pc, #176]	; (8005ee4 <MX_OCTOSPI1_Init+0xec>)
 8005e34:	2217      	movs	r2, #23
 8005e36:	611a      	str	r2, [r3, #16]
  hospi1.Init.ChipSelectHighTime = 2;
 8005e38:	4b2a      	ldr	r3, [pc, #168]	; (8005ee4 <MX_OCTOSPI1_Init+0xec>)
 8005e3a:	2202      	movs	r2, #2
 8005e3c:	615a      	str	r2, [r3, #20]
  hospi1.Init.FreeRunningClock = HAL_OSPI_FREERUNCLK_DISABLE;
 8005e3e:	4b29      	ldr	r3, [pc, #164]	; (8005ee4 <MX_OCTOSPI1_Init+0xec>)
 8005e40:	2200      	movs	r2, #0
 8005e42:	619a      	str	r2, [r3, #24]
  hospi1.Init.ClockMode = HAL_OSPI_CLOCK_MODE_0;
 8005e44:	4b27      	ldr	r3, [pc, #156]	; (8005ee4 <MX_OCTOSPI1_Init+0xec>)
 8005e46:	2200      	movs	r2, #0
 8005e48:	61da      	str	r2, [r3, #28]
  hospi1.Init.WrapSize = HAL_OSPI_WRAP_NOT_SUPPORTED;
 8005e4a:	4b26      	ldr	r3, [pc, #152]	; (8005ee4 <MX_OCTOSPI1_Init+0xec>)
 8005e4c:	2200      	movs	r2, #0
 8005e4e:	621a      	str	r2, [r3, #32]
  hospi1.Init.ClockPrescaler = 2;
 8005e50:	4b24      	ldr	r3, [pc, #144]	; (8005ee4 <MX_OCTOSPI1_Init+0xec>)
 8005e52:	2202      	movs	r2, #2
 8005e54:	625a      	str	r2, [r3, #36]	; 0x24
  hospi1.Init.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 8005e56:	4b23      	ldr	r3, [pc, #140]	; (8005ee4 <MX_OCTOSPI1_Init+0xec>)
 8005e58:	2200      	movs	r2, #0
 8005e5a:	629a      	str	r2, [r3, #40]	; 0x28
  hospi1.Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_ENABLE;
 8005e5c:	4b21      	ldr	r3, [pc, #132]	; (8005ee4 <MX_OCTOSPI1_Init+0xec>)
 8005e5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e62:	62da      	str	r2, [r3, #44]	; 0x2c
  hospi1.Init.ChipSelectBoundary = 10;
 8005e64:	4b1f      	ldr	r3, [pc, #124]	; (8005ee4 <MX_OCTOSPI1_Init+0xec>)
 8005e66:	220a      	movs	r2, #10
 8005e68:	631a      	str	r2, [r3, #48]	; 0x30
  hospi1.Init.DelayBlockBypass = HAL_OSPI_DELAY_BLOCK_USED;
 8005e6a:	4b1e      	ldr	r3, [pc, #120]	; (8005ee4 <MX_OCTOSPI1_Init+0xec>)
 8005e6c:	2200      	movs	r2, #0
 8005e6e:	635a      	str	r2, [r3, #52]	; 0x34
  hospi1.Init.MaxTran = 0;
 8005e70:	4b1c      	ldr	r3, [pc, #112]	; (8005ee4 <MX_OCTOSPI1_Init+0xec>)
 8005e72:	2200      	movs	r2, #0
 8005e74:	639a      	str	r2, [r3, #56]	; 0x38
  hospi1.Init.Refresh = 320;
 8005e76:	4b1b      	ldr	r3, [pc, #108]	; (8005ee4 <MX_OCTOSPI1_Init+0xec>)
 8005e78:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8005e7c:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_OSPI_Init(&hospi1) != HAL_OK)
 8005e7e:	4819      	ldr	r0, [pc, #100]	; (8005ee4 <MX_OCTOSPI1_Init+0xec>)
 8005e80:	f003 fe34 	bl	8009aec <HAL_OSPI_Init>
 8005e84:	4603      	mov	r3, r0
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d001      	beq.n	8005e8e <MX_OCTOSPI1_Init+0x96>
  {
    Error_Handler();
 8005e8a:	f7ff ffaf 	bl	8005dec <Error_Handler>
  }
  sOspiManagerCfg.ClkPort = 1;
 8005e8e:	2301      	movs	r3, #1
 8005e90:	60bb      	str	r3, [r7, #8]
  sOspiManagerCfg.DQSPort = 1;
 8005e92:	2301      	movs	r3, #1
 8005e94:	60fb      	str	r3, [r7, #12]
  sOspiManagerCfg.NCSPort = 1;
 8005e96:	2301      	movs	r3, #1
 8005e98:	613b      	str	r3, [r7, #16]
  sOspiManagerCfg.IOLowPort = HAL_OSPIM_IOPORT_1_LOW;
 8005e9a:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 8005e9e:	617b      	str	r3, [r7, #20]
  sOspiManagerCfg.IOHighPort = HAL_OSPIM_IOPORT_1_HIGH;
 8005ea0:	4b12      	ldr	r3, [pc, #72]	; (8005eec <MX_OCTOSPI1_Init+0xf4>)
 8005ea2:	61bb      	str	r3, [r7, #24]
  if (HAL_OSPIM_Config(&hospi1, &sOspiManagerCfg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005ea4:	f107 0308 	add.w	r3, r7, #8
 8005ea8:	f241 3288 	movw	r2, #5000	; 0x1388
 8005eac:	4619      	mov	r1, r3
 8005eae:	480d      	ldr	r0, [pc, #52]	; (8005ee4 <MX_OCTOSPI1_Init+0xec>)
 8005eb0:	f004 f836 	bl	8009f20 <HAL_OSPIM_Config>
 8005eb4:	4603      	mov	r3, r0
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d001      	beq.n	8005ebe <MX_OCTOSPI1_Init+0xc6>
  {
    Error_Handler();
 8005eba:	f7ff ff97 	bl	8005dec <Error_Handler>
  }
  HAL_OSPI_DLYB_Cfg_Struct.Units = 0;
 8005ebe:	2300      	movs	r3, #0
 8005ec0:	603b      	str	r3, [r7, #0]
  HAL_OSPI_DLYB_Cfg_Struct.PhaseSel = 0;
 8005ec2:	2300      	movs	r3, #0
 8005ec4:	607b      	str	r3, [r7, #4]
  if (HAL_OSPI_DLYB_SetConfig(&hospi1, &HAL_OSPI_DLYB_Cfg_Struct) != HAL_OK)
 8005ec6:	463b      	mov	r3, r7
 8005ec8:	4619      	mov	r1, r3
 8005eca:	4806      	ldr	r0, [pc, #24]	; (8005ee4 <MX_OCTOSPI1_Init+0xec>)
 8005ecc:	f004 ff8e 	bl	800adec <HAL_OSPI_DLYB_SetConfig>
 8005ed0:	4603      	mov	r3, r0
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d001      	beq.n	8005eda <MX_OCTOSPI1_Init+0xe2>
  {
    Error_Handler();
 8005ed6:	f7ff ff89 	bl	8005dec <Error_Handler>
  }
  /* USER CODE BEGIN OCTOSPI1_Init 2 */

  /* USER CODE END OCTOSPI1_Init 2 */

}
 8005eda:	bf00      	nop
 8005edc:	3720      	adds	r7, #32
 8005ede:	46bd      	mov	sp, r7
 8005ee0:	bd80      	pop	{r7, pc}
 8005ee2:	bf00      	nop
 8005ee4:	20002034 	.word	0x20002034
 8005ee8:	420d1400 	.word	0x420d1400
 8005eec:	01000001 	.word	0x01000001

08005ef0 <HAL_OSPI_MspInit>:

void HAL_OSPI_MspInit(OSPI_HandleTypeDef* ospiHandle)
{
 8005ef0:	b580      	push	{r7, lr}
 8005ef2:	b0c4      	sub	sp, #272	; 0x110
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005efa:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005efe:	6018      	str	r0, [r3, #0]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005f00:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8005f04:	2200      	movs	r2, #0
 8005f06:	601a      	str	r2, [r3, #0]
 8005f08:	605a      	str	r2, [r3, #4]
 8005f0a:	609a      	str	r2, [r3, #8]
 8005f0c:	60da      	str	r2, [r3, #12]
 8005f0e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8005f10:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005f14:	22c8      	movs	r2, #200	; 0xc8
 8005f16:	2100      	movs	r1, #0
 8005f18:	4618      	mov	r0, r3
 8005f1a:	f00e f851 	bl	8013fc0 <memset>
  if(ospiHandle->Instance==OCTOSPI1)
 8005f1e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005f22:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	4aa4      	ldr	r2, [pc, #656]	; (80061bc <HAL_OSPI_MspInit+0x2cc>)
 8005f2c:	4293      	cmp	r3, r2
 8005f2e:	f040 813f 	bne.w	80061b0 <HAL_OSPI_MspInit+0x2c0>

  /* USER CODE END OCTOSPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_OSPI;
 8005f32:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8005f36:	f04f 0300 	mov.w	r3, #0
 8005f3a:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    PeriphClkInit.OspiClockSelection = RCC_OSPICLKSOURCE_SYSCLK;
 8005f3e:	2300      	movs	r3, #0
 8005f40:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005f44:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005f48:	4618      	mov	r0, r3
 8005f4a:	f006 fbed 	bl	800c728 <HAL_RCCEx_PeriphCLKConfig>
 8005f4e:	4603      	mov	r3, r0
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d001      	beq.n	8005f58 <HAL_OSPI_MspInit+0x68>
    {
      Error_Handler();
 8005f54:	f7ff ff4a 	bl	8005dec <Error_Handler>
    }

    /* OCTOSPI1 clock enable */
    __HAL_RCC_OSPIM_CLK_ENABLE();
 8005f58:	4b99      	ldr	r3, [pc, #612]	; (80061c0 <HAL_OSPI_MspInit+0x2d0>)
 8005f5a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005f5e:	4a98      	ldr	r2, [pc, #608]	; (80061c0 <HAL_OSPI_MspInit+0x2d0>)
 8005f60:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005f64:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8005f68:	4b95      	ldr	r3, [pc, #596]	; (80061c0 <HAL_OSPI_MspInit+0x2d0>)
 8005f6a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005f6e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005f72:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005f74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    __HAL_RCC_OSPI1_CLK_ENABLE();
 8005f76:	4b92      	ldr	r3, [pc, #584]	; (80061c0 <HAL_OSPI_MspInit+0x2d0>)
 8005f78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f7c:	4a90      	ldr	r2, [pc, #576]	; (80061c0 <HAL_OSPI_MspInit+0x2d0>)
 8005f7e:	f043 0310 	orr.w	r3, r3, #16
 8005f82:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005f86:	4b8e      	ldr	r3, [pc, #568]	; (80061c0 <HAL_OSPI_MspInit+0x2d0>)
 8005f88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f8c:	f003 0310 	and.w	r3, r3, #16
 8005f90:	62bb      	str	r3, [r7, #40]	; 0x28
 8005f92:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOI_CLK_ENABLE();
 8005f94:	4b8a      	ldr	r3, [pc, #552]	; (80061c0 <HAL_OSPI_MspInit+0x2d0>)
 8005f96:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005f9a:	4a89      	ldr	r2, [pc, #548]	; (80061c0 <HAL_OSPI_MspInit+0x2d0>)
 8005f9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005fa0:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8005fa4:	4b86      	ldr	r3, [pc, #536]	; (80061c0 <HAL_OSPI_MspInit+0x2d0>)
 8005fa6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005faa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fae:	627b      	str	r3, [r7, #36]	; 0x24
 8005fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8005fb2:	4b83      	ldr	r3, [pc, #524]	; (80061c0 <HAL_OSPI_MspInit+0x2d0>)
 8005fb4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005fb8:	4a81      	ldr	r2, [pc, #516]	; (80061c0 <HAL_OSPI_MspInit+0x2d0>)
 8005fba:	f043 0310 	orr.w	r3, r3, #16
 8005fbe:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8005fc2:	4b7f      	ldr	r3, [pc, #508]	; (80061c0 <HAL_OSPI_MspInit+0x2d0>)
 8005fc4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005fc8:	f003 0310 	and.w	r3, r3, #16
 8005fcc:	623b      	str	r3, [r7, #32]
 8005fce:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8005fd0:	4b7b      	ldr	r3, [pc, #492]	; (80061c0 <HAL_OSPI_MspInit+0x2d0>)
 8005fd2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005fd6:	4a7a      	ldr	r2, [pc, #488]	; (80061c0 <HAL_OSPI_MspInit+0x2d0>)
 8005fd8:	f043 0308 	orr.w	r3, r3, #8
 8005fdc:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8005fe0:	4b77      	ldr	r3, [pc, #476]	; (80061c0 <HAL_OSPI_MspInit+0x2d0>)
 8005fe2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005fe6:	f003 0308 	and.w	r3, r3, #8
 8005fea:	61fb      	str	r3, [r7, #28]
 8005fec:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8005fee:	4b74      	ldr	r3, [pc, #464]	; (80061c0 <HAL_OSPI_MspInit+0x2d0>)
 8005ff0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005ff4:	4a72      	ldr	r2, [pc, #456]	; (80061c0 <HAL_OSPI_MspInit+0x2d0>)
 8005ff6:	f043 0320 	orr.w	r3, r3, #32
 8005ffa:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8005ffe:	4b70      	ldr	r3, [pc, #448]	; (80061c0 <HAL_OSPI_MspInit+0x2d0>)
 8006000:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006004:	f003 0320 	and.w	r3, r3, #32
 8006008:	61bb      	str	r3, [r7, #24]
 800600a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 800600c:	4b6c      	ldr	r3, [pc, #432]	; (80061c0 <HAL_OSPI_MspInit+0x2d0>)
 800600e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006012:	4a6b      	ldr	r2, [pc, #428]	; (80061c0 <HAL_OSPI_MspInit+0x2d0>)
 8006014:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006018:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800601c:	4b68      	ldr	r3, [pc, #416]	; (80061c0 <HAL_OSPI_MspInit+0x2d0>)
 800601e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006022:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006026:	617b      	str	r3, [r7, #20]
 8006028:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800602a:	4b65      	ldr	r3, [pc, #404]	; (80061c0 <HAL_OSPI_MspInit+0x2d0>)
 800602c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006030:	4a63      	ldr	r2, [pc, #396]	; (80061c0 <HAL_OSPI_MspInit+0x2d0>)
 8006032:	f043 0304 	orr.w	r3, r3, #4
 8006036:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800603a:	4b61      	ldr	r3, [pc, #388]	; (80061c0 <HAL_OSPI_MspInit+0x2d0>)
 800603c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006040:	f003 0204 	and.w	r2, r3, #4
 8006044:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006048:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800604c:	601a      	str	r2, [r3, #0]
 800604e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006052:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8006056:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006058:	4b59      	ldr	r3, [pc, #356]	; (80061c0 <HAL_OSPI_MspInit+0x2d0>)
 800605a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800605e:	4a58      	ldr	r2, [pc, #352]	; (80061c0 <HAL_OSPI_MspInit+0x2d0>)
 8006060:	f043 0302 	orr.w	r3, r3, #2
 8006064:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8006068:	4b55      	ldr	r3, [pc, #340]	; (80061c0 <HAL_OSPI_MspInit+0x2d0>)
 800606a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800606e:	f003 0202 	and.w	r2, r3, #2
 8006072:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006076:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800607a:	601a      	str	r2, [r3, #0]
 800607c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006080:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006084:	681b      	ldr	r3, [r3, #0]
    PF6     ------> OCTOSPIM_P1_IO3
    PC3     ------> OCTOSPIM_P1_IO6
    PB10     ------> OCTOSPIM_P1_CLK
    PB11     ------> OCTOSPIM_P1_NCS
    */
    GPIO_InitStruct.Pin = OCTOSPI_R_IO5_Pin;
 8006086:	2301      	movs	r3, #1
 8006088:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800608c:	2302      	movs	r3, #2
 800608e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006092:	2300      	movs	r3, #0
 8006094:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006098:	2303      	movs	r3, #3
 800609a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    GPIO_InitStruct.Alternate = GPIO_AF3_OCTOSPI1;
 800609e:	2303      	movs	r3, #3
 80060a0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    HAL_GPIO_Init(OCTOSPI_R_IO5_GPIO_Port, &GPIO_InitStruct);
 80060a4:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80060a8:	4619      	mov	r1, r3
 80060aa:	4846      	ldr	r0, [pc, #280]	; (80061c4 <HAL_OSPI_MspInit+0x2d4>)
 80060ac:	f002 fbc4 	bl	8008838 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OCTOSPI_R_DQS_Pin;
 80060b0:	2308      	movs	r3, #8
 80060b2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80060b6:	2302      	movs	r3, #2
 80060b8:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80060bc:	2300      	movs	r3, #0
 80060be:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80060c2:	2303      	movs	r3, #3
 80060c4:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    GPIO_InitStruct.Alternate = GPIO_AF3_OCTOSPI1;
 80060c8:	2303      	movs	r3, #3
 80060ca:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    HAL_GPIO_Init(OCTOSPI_R_DQS_GPIO_Port, &GPIO_InitStruct);
 80060ce:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80060d2:	4619      	mov	r1, r3
 80060d4:	483c      	ldr	r0, [pc, #240]	; (80061c8 <HAL_OSPI_MspInit+0x2d8>)
 80060d6:	f002 fbaf 	bl	8008838 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OCTOSPI_R_IO7_Pin;
 80060da:	2380      	movs	r3, #128	; 0x80
 80060dc:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80060e0:	2302      	movs	r3, #2
 80060e2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80060e6:	2300      	movs	r3, #0
 80060e8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80060ec:	2303      	movs	r3, #3
 80060ee:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPI1;
 80060f2:	230a      	movs	r3, #10
 80060f4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    HAL_GPIO_Init(OCTOSPI_R_IO7_GPIO_Port, &GPIO_InitStruct);
 80060f8:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80060fc:	4619      	mov	r1, r3
 80060fe:	4833      	ldr	r0, [pc, #204]	; (80061cc <HAL_OSPI_MspInit+0x2dc>)
 8006100:	f002 fb9a 	bl	8008838 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OCTOSPI_R_IO0_Pin|OCTOSPI_R_IO2_Pin|OCTOSPI_R_IO1_Pin|OCTOSPI_R_IO3_Pin;
 8006104:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8006108:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800610c:	2302      	movs	r3, #2
 800610e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006112:	2300      	movs	r3, #0
 8006114:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006118:	2303      	movs	r3, #3
 800611a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPI1;
 800611e:	230a      	movs	r3, #10
 8006120:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8006124:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8006128:	4619      	mov	r1, r3
 800612a:	4829      	ldr	r0, [pc, #164]	; (80061d0 <HAL_OSPI_MspInit+0x2e0>)
 800612c:	f002 fb84 	bl	8008838 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OCTOSPI_R_IO4_Pin;
 8006130:	2304      	movs	r3, #4
 8006132:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006136:	2302      	movs	r3, #2
 8006138:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800613c:	2300      	movs	r3, #0
 800613e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006142:	2303      	movs	r3, #3
 8006144:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    GPIO_InitStruct.Alternate = GPIO_AF3_OCTOSPI1;
 8006148:	2303      	movs	r3, #3
 800614a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    HAL_GPIO_Init(OCTOSPI_R_IO4_GPIO_Port, &GPIO_InitStruct);
 800614e:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8006152:	4619      	mov	r1, r3
 8006154:	481f      	ldr	r0, [pc, #124]	; (80061d4 <HAL_OSPI_MspInit+0x2e4>)
 8006156:	f002 fb6f 	bl	8008838 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OCTOSPI_R_IO6_Pin;
 800615a:	2308      	movs	r3, #8
 800615c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006160:	2302      	movs	r3, #2
 8006162:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006166:	2300      	movs	r3, #0
 8006168:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800616c:	2303      	movs	r3, #3
 800616e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPI1;
 8006172:	230a      	movs	r3, #10
 8006174:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    HAL_GPIO_Init(OCTOSPI_R_IO6_GPIO_Port, &GPIO_InitStruct);
 8006178:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 800617c:	4619      	mov	r1, r3
 800617e:	4816      	ldr	r0, [pc, #88]	; (80061d8 <HAL_OSPI_MspInit+0x2e8>)
 8006180:	f002 fb5a 	bl	8008838 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OCTOSPI_R_CLK_P_Pin|OCTOSPI_R_NCS_Pin;
 8006184:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8006188:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800618c:	2302      	movs	r3, #2
 800618e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006192:	2300      	movs	r3, #0
 8006194:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006198:	2303      	movs	r3, #3
 800619a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPI1;
 800619e:	230a      	movs	r3, #10
 80061a0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80061a4:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80061a8:	4619      	mov	r1, r3
 80061aa:	480c      	ldr	r0, [pc, #48]	; (80061dc <HAL_OSPI_MspInit+0x2ec>)
 80061ac:	f002 fb44 	bl	8008838 <HAL_GPIO_Init>

  /* USER CODE BEGIN OCTOSPI1_MspInit 1 */

  /* USER CODE END OCTOSPI1_MspInit 1 */
  }
}
 80061b0:	bf00      	nop
 80061b2:	f507 7788 	add.w	r7, r7, #272	; 0x110
 80061b6:	46bd      	mov	sp, r7
 80061b8:	bd80      	pop	{r7, pc}
 80061ba:	bf00      	nop
 80061bc:	420d1400 	.word	0x420d1400
 80061c0:	46020c00 	.word	0x46020c00
 80061c4:	42022000 	.word	0x42022000
 80061c8:	42021000 	.word	0x42021000
 80061cc:	42020c00 	.word	0x42020c00
 80061d0:	42021400 	.word	0x42021400
 80061d4:	42021c00 	.word	0x42021c00
 80061d8:	42020800 	.word	0x42020800
 80061dc:	42020400 	.word	0x42020400

080061e0 <OSPI_EnableMemMappedMode>:
	  HAL_OSPI_DLYB_SetConfig(&hospi1, &HAL_OSPI_DLYB_Cfg_Struct);


}

void OSPI_EnableMemMappedMode(void){
 80061e0:	b580      	push	{r7, lr}
 80061e2:	b096      	sub	sp, #88	; 0x58
 80061e4:	af00      	add	r7, sp, #0
	OSPI_RegularCmdTypeDef sCommand;
	OSPI_MemoryMappedTypeDef sMemMappedCfg;
	  sCommand.OperationType      = HAL_OSPI_OPTYPE_WRITE_CFG;
 80061e6:	2302      	movs	r3, #2
 80061e8:	60bb      	str	r3, [r7, #8]
	  sCommand.FlashId            = HAL_OSPI_FLASH_ID_1;
 80061ea:	2300      	movs	r3, #0
 80061ec:	60fb      	str	r3, [r7, #12]
	  sCommand.Instruction        = WRITE_CMD;
 80061ee:	2380      	movs	r3, #128	; 0x80
 80061f0:	613b      	str	r3, [r7, #16]
	  sCommand.InstructionMode    = HAL_OSPI_INSTRUCTION_8_LINES;
 80061f2:	2304      	movs	r3, #4
 80061f4:	617b      	str	r3, [r7, #20]
	  sCommand.InstructionSize    = HAL_OSPI_INSTRUCTION_8_BITS;
 80061f6:	2300      	movs	r3, #0
 80061f8:	61bb      	str	r3, [r7, #24]
	  sCommand.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 80061fa:	2300      	movs	r3, #0
 80061fc:	61fb      	str	r3, [r7, #28]
	  sCommand.AddressMode        = HAL_OSPI_ADDRESS_8_LINES;
 80061fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006202:	627b      	str	r3, [r7, #36]	; 0x24
	  sCommand.AddressSize        = HAL_OSPI_ADDRESS_32_BITS;
 8006204:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8006208:	62bb      	str	r3, [r7, #40]	; 0x28
	  sCommand.AddressDtrMode     = HAL_OSPI_ADDRESS_DTR_ENABLE;
 800620a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800620e:	62fb      	str	r3, [r7, #44]	; 0x2c
	  sCommand.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 8006210:	2300      	movs	r3, #0
 8006212:	637b      	str	r3, [r7, #52]	; 0x34
	  sCommand.DataMode           = HAL_OSPI_DATA_8_LINES;
 8006214:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8006218:	643b      	str	r3, [r7, #64]	; 0x40
	  sCommand.DataDtrMode        = HAL_OSPI_DATA_DTR_ENABLE;
 800621a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800621e:	64bb      	str	r3, [r7, #72]	; 0x48
	  sCommand.DummyCycles        = DUMMY_CLOCK_CYCLES_WRITE;
 8006220:	2304      	movs	r3, #4
 8006222:	64fb      	str	r3, [r7, #76]	; 0x4c
	  sCommand.DQSMode            = HAL_OSPI_DQS_ENABLE;
 8006224:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8006228:	653b      	str	r3, [r7, #80]	; 0x50
	  sCommand.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 800622a:	2300      	movs	r3, #0
 800622c:	657b      	str	r3, [r7, #84]	; 0x54

	  if (HAL_OSPI_Command(&hospi1, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800622e:	f107 0308 	add.w	r3, r7, #8
 8006232:	f241 3288 	movw	r2, #5000	; 0x1388
 8006236:	4619      	mov	r1, r3
 8006238:	4816      	ldr	r0, [pc, #88]	; (8006294 <OSPI_EnableMemMappedMode+0xb4>)
 800623a:	f003 fd13 	bl	8009c64 <HAL_OSPI_Command>
 800623e:	4603      	mov	r3, r0
 8006240:	2b00      	cmp	r3, #0
 8006242:	d001      	beq.n	8006248 <OSPI_EnableMemMappedMode+0x68>
	  {
	    Error_Handler();
 8006244:	f7ff fdd2 	bl	8005dec <Error_Handler>
	  }

	  sCommand.OperationType = HAL_OSPI_OPTYPE_READ_CFG;
 8006248:	2301      	movs	r3, #1
 800624a:	60bb      	str	r3, [r7, #8]
	  sCommand.Instruction   = READ_CMD;
 800624c:	2300      	movs	r3, #0
 800624e:	613b      	str	r3, [r7, #16]
	  sCommand.DummyCycles   = DUMMY_CLOCK_CYCLES_READ;
 8006250:	2305      	movs	r3, #5
 8006252:	64fb      	str	r3, [r7, #76]	; 0x4c

	  if (HAL_OSPI_Command(&hospi1, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8006254:	f107 0308 	add.w	r3, r7, #8
 8006258:	f241 3288 	movw	r2, #5000	; 0x1388
 800625c:	4619      	mov	r1, r3
 800625e:	480d      	ldr	r0, [pc, #52]	; (8006294 <OSPI_EnableMemMappedMode+0xb4>)
 8006260:	f003 fd00 	bl	8009c64 <HAL_OSPI_Command>
 8006264:	4603      	mov	r3, r0
 8006266:	2b00      	cmp	r3, #0
 8006268:	d001      	beq.n	800626e <OSPI_EnableMemMappedMode+0x8e>
	  {
	    Error_Handler();
 800626a:	f7ff fdbf 	bl	8005dec <Error_Handler>
	  }

	  sMemMappedCfg.TimeOutActivation = HAL_OSPI_TIMEOUT_COUNTER_ENABLE;
 800626e:	2308      	movs	r3, #8
 8006270:	603b      	str	r3, [r7, #0]
	  sMemMappedCfg.TimeOutPeriod     = 0x34;
 8006272:	2334      	movs	r3, #52	; 0x34
 8006274:	607b      	str	r3, [r7, #4]

	  if (HAL_OSPI_MemoryMapped(&hospi1, &sMemMappedCfg) != HAL_OK)
 8006276:	463b      	mov	r3, r7
 8006278:	4619      	mov	r1, r3
 800627a:	4806      	ldr	r0, [pc, #24]	; (8006294 <OSPI_EnableMemMappedMode+0xb4>)
 800627c:	f003 fd7f 	bl	8009d7e <HAL_OSPI_MemoryMapped>
 8006280:	4603      	mov	r3, r0
 8006282:	2b00      	cmp	r3, #0
 8006284:	d001      	beq.n	800628a <OSPI_EnableMemMappedMode+0xaa>
	  {
	    Error_Handler();
 8006286:	f7ff fdb1 	bl	8005dec <Error_Handler>
	  }
}
 800628a:	bf00      	nop
 800628c:	3758      	adds	r7, #88	; 0x58
 800628e:	46bd      	mov	sp, r7
 8006290:	bd80      	pop	{r7, pc}
 8006292:	bf00      	nop
 8006294:	20002034 	.word	0x20002034

08006298 <OSPI_DelayBlockConfig>:

void OSPI_DelayBlockConfig(void){
 8006298:	b580      	push	{r7, lr}
 800629a:	b084      	sub	sp, #16
 800629c:	af00      	add	r7, sp, #0
	  LL_DLYB_CfgTypeDef dlyb_cfg,dlyb_cfg_test;
	  /* Delay block configuration ------------------------------------------------ */
	  HAL_OSPI_DLYB_GetClockPeriod(&hospi1,&dlyb_cfg);
 800629e:	f107 0308 	add.w	r3, r7, #8
 80062a2:	4619      	mov	r1, r3
 80062a4:	4813      	ldr	r0, [pc, #76]	; (80062f4 <OSPI_DelayBlockConfig+0x5c>)
 80062a6:	f004 fe15 	bl	800aed4 <HAL_OSPI_DLYB_GetClockPeriod>

	  /*when DTR, PhaseSel is divided by 4 (emperic value)*/
	  dlyb_cfg.PhaseSel /=4;
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	089b      	lsrs	r3, r3, #2
 80062ae:	60fb      	str	r3, [r7, #12]

	  /* save the present configuration for check*/
	  dlyb_cfg_test = dlyb_cfg;
 80062b0:	463b      	mov	r3, r7
 80062b2:	f107 0208 	add.w	r2, r7, #8
 80062b6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80062ba:	e883 0003 	stmia.w	r3, {r0, r1}

	  /*set delay block configuration*/
	  HAL_OSPI_DLYB_SetConfig(&hospi1,&dlyb_cfg);
 80062be:	f107 0308 	add.w	r3, r7, #8
 80062c2:	4619      	mov	r1, r3
 80062c4:	480b      	ldr	r0, [pc, #44]	; (80062f4 <OSPI_DelayBlockConfig+0x5c>)
 80062c6:	f004 fd91 	bl	800adec <HAL_OSPI_DLYB_SetConfig>

	  /*check the set value*/
	  HAL_OSPI_DLYB_GetConfig(&hospi1,&dlyb_cfg);
 80062ca:	f107 0308 	add.w	r3, r7, #8
 80062ce:	4619      	mov	r1, r3
 80062d0:	4808      	ldr	r0, [pc, #32]	; (80062f4 <OSPI_DelayBlockConfig+0x5c>)
 80062d2:	f004 fdd3 	bl	800ae7c <HAL_OSPI_DLYB_GetConfig>
	  if ((dlyb_cfg.PhaseSel != dlyb_cfg_test.PhaseSel) || (dlyb_cfg.Units != dlyb_cfg_test.Units))
 80062d6:	68fa      	ldr	r2, [r7, #12]
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	429a      	cmp	r2, r3
 80062dc:	d103      	bne.n	80062e6 <OSPI_DelayBlockConfig+0x4e>
 80062de:	68ba      	ldr	r2, [r7, #8]
 80062e0:	683b      	ldr	r3, [r7, #0]
 80062e2:	429a      	cmp	r2, r3
 80062e4:	d001      	beq.n	80062ea <OSPI_DelayBlockConfig+0x52>
	  {
	    Error_Handler();
 80062e6:	f7ff fd81 	bl	8005dec <Error_Handler>
	  }
}
 80062ea:	bf00      	nop
 80062ec:	3710      	adds	r7, #16
 80062ee:	46bd      	mov	sp, r7
 80062f0:	bd80      	pop	{r7, pc}
 80062f2:	bf00      	nop
 80062f4:	20002034 	.word	0x20002034

080062f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80062f8:	b480      	push	{r7}
 80062fa:	b083      	sub	sp, #12
 80062fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80062fe:	4b0a      	ldr	r3, [pc, #40]	; (8006328 <HAL_MspInit+0x30>)
 8006300:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006304:	4a08      	ldr	r2, [pc, #32]	; (8006328 <HAL_MspInit+0x30>)
 8006306:	f043 0304 	orr.w	r3, r3, #4
 800630a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800630e:	4b06      	ldr	r3, [pc, #24]	; (8006328 <HAL_MspInit+0x30>)
 8006310:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006314:	f003 0304 	and.w	r3, r3, #4
 8006318:	607b      	str	r3, [r7, #4]
 800631a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800631c:	bf00      	nop
 800631e:	370c      	adds	r7, #12
 8006320:	46bd      	mov	sp, r7
 8006322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006326:	4770      	bx	lr
 8006328:	46020c00 	.word	0x46020c00

0800632c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800632c:	b580      	push	{r7, lr}
 800632e:	b08e      	sub	sp, #56	; 0x38
 8006330:	af00      	add	r7, sp, #0
 8006332:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8006334:	2300      	movs	r3, #0
 8006336:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t              uwPrescalerValue = 0;
 8006338:	2300      	movs	r3, #0
 800633a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800633c:	4b2e      	ldr	r3, [pc, #184]	; (80063f8 <HAL_InitTick+0xcc>)
 800633e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006342:	4a2d      	ldr	r2, [pc, #180]	; (80063f8 <HAL_InitTick+0xcc>)
 8006344:	f043 0310 	orr.w	r3, r3, #16
 8006348:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 800634c:	4b2a      	ldr	r3, [pc, #168]	; (80063f8 <HAL_InitTick+0xcc>)
 800634e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006352:	f003 0310 	and.w	r3, r3, #16
 8006356:	60fb      	str	r3, [r7, #12]
 8006358:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800635a:	f107 0210 	add.w	r2, r7, #16
 800635e:	f107 0314 	add.w	r3, r7, #20
 8006362:	4611      	mov	r1, r2
 8006364:	4618      	mov	r0, r3
 8006366:	f006 f921 	bl	800c5ac <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 800636a:	f006 f8e3 	bl	800c534 <HAL_RCC_GetPCLK1Freq>
 800636e:	6338      	str	r0, [r7, #48]	; 0x30
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8006370:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006372:	4a22      	ldr	r2, [pc, #136]	; (80063fc <HAL_InitTick+0xd0>)
 8006374:	fba2 2303 	umull	r2, r3, r2, r3
 8006378:	0c9b      	lsrs	r3, r3, #18
 800637a:	3b01      	subs	r3, #1
 800637c:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800637e:	4b20      	ldr	r3, [pc, #128]	; (8006400 <HAL_InitTick+0xd4>)
 8006380:	4a20      	ldr	r2, [pc, #128]	; (8006404 <HAL_InitTick+0xd8>)
 8006382:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8006384:	4b1e      	ldr	r3, [pc, #120]	; (8006400 <HAL_InitTick+0xd4>)
 8006386:	f240 32e7 	movw	r2, #999	; 0x3e7
 800638a:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800638c:	4a1c      	ldr	r2, [pc, #112]	; (8006400 <HAL_InitTick+0xd4>)
 800638e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006390:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8006392:	4b1b      	ldr	r3, [pc, #108]	; (8006400 <HAL_InitTick+0xd4>)
 8006394:	2200      	movs	r2, #0
 8006396:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006398:	4b19      	ldr	r3, [pc, #100]	; (8006400 <HAL_InitTick+0xd4>)
 800639a:	2200      	movs	r2, #0
 800639c:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
 800639e:	4818      	ldr	r0, [pc, #96]	; (8006400 <HAL_InitTick+0xd4>)
 80063a0:	f008 fe0c 	bl	800efbc <HAL_TIM_Base_Init>
 80063a4:	4603      	mov	r3, r0
 80063a6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  if (status == HAL_OK)
 80063aa:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d118      	bne.n	80063e4 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80063b2:	4813      	ldr	r0, [pc, #76]	; (8006400 <HAL_InitTick+0xd4>)
 80063b4:	f008 fe5a 	bl	800f06c <HAL_TIM_Base_Start_IT>
 80063b8:	4603      	mov	r3, r0
 80063ba:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if (status == HAL_OK)
 80063be:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d10e      	bne.n	80063e4 <HAL_InitTick+0xb8>
    {
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	2b0f      	cmp	r3, #15
 80063ca:	d808      	bhi.n	80063de <HAL_InitTick+0xb2>
      {
        /* Enable the TIM6 global Interrupt */
        HAL_NVIC_SetPriority(TIM6_IRQn, TickPriority, 0U);
 80063cc:	2200      	movs	r2, #0
 80063ce:	6879      	ldr	r1, [r7, #4]
 80063d0:	2031      	movs	r0, #49	; 0x31
 80063d2:	f000 fbcf 	bl	8006b74 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80063d6:	4a0c      	ldr	r2, [pc, #48]	; (8006408 <HAL_InitTick+0xdc>)
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	6013      	str	r3, [r2, #0]
 80063dc:	e002      	b.n	80063e4 <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 80063de:	2301      	movs	r3, #1
 80063e0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
      }
    }
  }
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_IRQn);
 80063e4:	2031      	movs	r0, #49	; 0x31
 80063e6:	f000 fbdf 	bl	8006ba8 <HAL_NVIC_EnableIRQ>

 /* Return function status */
  return status;
 80063ea:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 80063ee:	4618      	mov	r0, r3
 80063f0:	3738      	adds	r7, #56	; 0x38
 80063f2:	46bd      	mov	sp, r7
 80063f4:	bd80      	pop	{r7, pc}
 80063f6:	bf00      	nop
 80063f8:	46020c00 	.word	0x46020c00
 80063fc:	431bde83 	.word	0x431bde83
 8006400:	20002090 	.word	0x20002090
 8006404:	40001000 	.word	0x40001000
 8006408:	20000008 	.word	0x20000008

0800640c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800640c:	b480      	push	{r7}
 800640e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8006410:	e7fe      	b.n	8006410 <NMI_Handler+0x4>

08006412 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8006412:	b480      	push	{r7}
 8006414:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8006416:	e7fe      	b.n	8006416 <HardFault_Handler+0x4>

08006418 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8006418:	b480      	push	{r7}
 800641a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800641c:	e7fe      	b.n	800641c <MemManage_Handler+0x4>

0800641e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800641e:	b480      	push	{r7}
 8006420:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8006422:	e7fe      	b.n	8006422 <BusFault_Handler+0x4>

08006424 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006424:	b480      	push	{r7}
 8006426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8006428:	e7fe      	b.n	8006428 <UsageFault_Handler+0x4>

0800642a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800642a:	b480      	push	{r7}
 800642c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800642e:	bf00      	nop
 8006430:	46bd      	mov	sp, r7
 8006432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006436:	4770      	bx	lr

08006438 <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 8006438:	b580      	push	{r7, lr}
 800643a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800643c:	4802      	ldr	r0, [pc, #8]	; (8006448 <TIM6_IRQHandler+0x10>)
 800643e:	f008 feb5 	bl	800f1ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 8006442:	bf00      	nop
 8006444:	bd80      	pop	{r7, pc}
 8006446:	bf00      	nop
 8006448:	20002090 	.word	0x20002090

0800644c <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 800644c:	b580      	push	{r7, lr}
 800644e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8006450:	4803      	ldr	r0, [pc, #12]	; (8006460 <TIM7_IRQHandler+0x14>)
 8006452:	f008 feab 	bl	800f1ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */
  TIM7_ResumeMotionThread();
 8006456:	f7fe fcd3 	bl	8004e00 <TIM7_ResumeMotionThread>
  /* USER CODE END TIM7_IRQn 1 */
}
 800645a:	bf00      	nop
 800645c:	bd80      	pop	{r7, pc}
 800645e:	bf00      	nop
 8006460:	200020e0 	.word	0x200020e0

08006464 <GPDMA1_Channel12_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 12 global interrupt.
  */
void GPDMA1_Channel12_IRQHandler(void)
{
 8006464:	b580      	push	{r7, lr}
 8006466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel12_IRQn 0 */

  /* USER CODE END GPDMA1_Channel12_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel12);
 8006468:	4802      	ldr	r0, [pc, #8]	; (8006474 <GPDMA1_Channel12_IRQHandler+0x10>)
 800646a:	f001 f8d5 	bl	8007618 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel12_IRQn 1 */

  /* USER CODE END GPDMA1_Channel12_IRQn 1 */
}
 800646e:	bf00      	nop
 8006470:	bd80      	pop	{r7, pc}
 8006472:	bf00      	nop
 8006474:	20001ec4 	.word	0x20001ec4

08006478 <DCMI_PSSI_IRQHandler>:

/**
  * @brief This function handles DCMI/PSSI global interrupt.
  */
void DCMI_PSSI_IRQHandler(void)
{
 8006478:	b580      	push	{r7, lr}
 800647a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DCMI_PSSI_IRQn 0 */

  /* USER CODE END DCMI_PSSI_IRQn 0 */
  HAL_DCMI_IRQHandler(&hdcmi);
 800647c:	4802      	ldr	r0, [pc, #8]	; (8006488 <DCMI_PSSI_IRQHandler+0x10>)
 800647e:	f000 fe73 	bl	8007168 <HAL_DCMI_IRQHandler>
  /* USER CODE BEGIN DCMI_PSSI_IRQn 1 */

  /* USER CODE END DCMI_PSSI_IRQn 1 */
}
 8006482:	bf00      	nop
 8006484:	bd80      	pop	{r7, pc}
 8006486:	bf00      	nop
 8006488:	20001e74 	.word	0x20001e74

0800648c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800648c:	b580      	push	{r7, lr}
 800648e:	b086      	sub	sp, #24
 8006490:	af00      	add	r7, sp, #0
 8006492:	60f8      	str	r0, [r7, #12]
 8006494:	60b9      	str	r1, [r7, #8]
 8006496:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006498:	2300      	movs	r3, #0
 800649a:	617b      	str	r3, [r7, #20]
 800649c:	e00a      	b.n	80064b4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800649e:	e000      	b.n	80064a2 <_read+0x16>
 80064a0:	bf00      	nop
 80064a2:	4601      	mov	r1, r0
 80064a4:	68bb      	ldr	r3, [r7, #8]
 80064a6:	1c5a      	adds	r2, r3, #1
 80064a8:	60ba      	str	r2, [r7, #8]
 80064aa:	b2ca      	uxtb	r2, r1
 80064ac:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80064ae:	697b      	ldr	r3, [r7, #20]
 80064b0:	3301      	adds	r3, #1
 80064b2:	617b      	str	r3, [r7, #20]
 80064b4:	697a      	ldr	r2, [r7, #20]
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	429a      	cmp	r2, r3
 80064ba:	dbf0      	blt.n	800649e <_read+0x12>
	}

return len;
 80064bc:	687b      	ldr	r3, [r7, #4]
}
 80064be:	4618      	mov	r0, r3
 80064c0:	3718      	adds	r7, #24
 80064c2:	46bd      	mov	sp, r7
 80064c4:	bd80      	pop	{r7, pc}

080064c6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80064c6:	b580      	push	{r7, lr}
 80064c8:	b086      	sub	sp, #24
 80064ca:	af00      	add	r7, sp, #0
 80064cc:	60f8      	str	r0, [r7, #12]
 80064ce:	60b9      	str	r1, [r7, #8]
 80064d0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80064d2:	2300      	movs	r3, #0
 80064d4:	617b      	str	r3, [r7, #20]
 80064d6:	e009      	b.n	80064ec <_write+0x26>
	{
		__io_putchar(*ptr++);
 80064d8:	68bb      	ldr	r3, [r7, #8]
 80064da:	1c5a      	adds	r2, r3, #1
 80064dc:	60ba      	str	r2, [r7, #8]
 80064de:	781b      	ldrb	r3, [r3, #0]
 80064e0:	4618      	mov	r0, r3
 80064e2:	f7ff fc5f 	bl	8005da4 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80064e6:	697b      	ldr	r3, [r7, #20]
 80064e8:	3301      	adds	r3, #1
 80064ea:	617b      	str	r3, [r7, #20]
 80064ec:	697a      	ldr	r2, [r7, #20]
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	429a      	cmp	r2, r3
 80064f2:	dbf1      	blt.n	80064d8 <_write+0x12>
	}
	return len;
 80064f4:	687b      	ldr	r3, [r7, #4]
}
 80064f6:	4618      	mov	r0, r3
 80064f8:	3718      	adds	r7, #24
 80064fa:	46bd      	mov	sp, r7
 80064fc:	bd80      	pop	{r7, pc}

080064fe <_close>:

int _close(int file)
{
 80064fe:	b480      	push	{r7}
 8006500:	b083      	sub	sp, #12
 8006502:	af00      	add	r7, sp, #0
 8006504:	6078      	str	r0, [r7, #4]
	return -1;
 8006506:	f04f 33ff 	mov.w	r3, #4294967295
}
 800650a:	4618      	mov	r0, r3
 800650c:	370c      	adds	r7, #12
 800650e:	46bd      	mov	sp, r7
 8006510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006514:	4770      	bx	lr

08006516 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8006516:	b480      	push	{r7}
 8006518:	b083      	sub	sp, #12
 800651a:	af00      	add	r7, sp, #0
 800651c:	6078      	str	r0, [r7, #4]
 800651e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8006520:	683b      	ldr	r3, [r7, #0]
 8006522:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8006526:	605a      	str	r2, [r3, #4]
	return 0;
 8006528:	2300      	movs	r3, #0
}
 800652a:	4618      	mov	r0, r3
 800652c:	370c      	adds	r7, #12
 800652e:	46bd      	mov	sp, r7
 8006530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006534:	4770      	bx	lr

08006536 <_isatty>:

int _isatty(int file)
{
 8006536:	b480      	push	{r7}
 8006538:	b083      	sub	sp, #12
 800653a:	af00      	add	r7, sp, #0
 800653c:	6078      	str	r0, [r7, #4]
	return 1;
 800653e:	2301      	movs	r3, #1
}
 8006540:	4618      	mov	r0, r3
 8006542:	370c      	adds	r7, #12
 8006544:	46bd      	mov	sp, r7
 8006546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800654a:	4770      	bx	lr

0800654c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800654c:	b480      	push	{r7}
 800654e:	b085      	sub	sp, #20
 8006550:	af00      	add	r7, sp, #0
 8006552:	60f8      	str	r0, [r7, #12]
 8006554:	60b9      	str	r1, [r7, #8]
 8006556:	607a      	str	r2, [r7, #4]
	return 0;
 8006558:	2300      	movs	r3, #0
}
 800655a:	4618      	mov	r0, r3
 800655c:	3714      	adds	r7, #20
 800655e:	46bd      	mov	sp, r7
 8006560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006564:	4770      	bx	lr
	...

08006568 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8006568:	b580      	push	{r7, lr}
 800656a:	b086      	sub	sp, #24
 800656c:	af00      	add	r7, sp, #0
 800656e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8006570:	4a14      	ldr	r2, [pc, #80]	; (80065c4 <_sbrk+0x5c>)
 8006572:	4b15      	ldr	r3, [pc, #84]	; (80065c8 <_sbrk+0x60>)
 8006574:	1ad3      	subs	r3, r2, r3
 8006576:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8006578:	697b      	ldr	r3, [r7, #20]
 800657a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800657c:	4b13      	ldr	r3, [pc, #76]	; (80065cc <_sbrk+0x64>)
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	2b00      	cmp	r3, #0
 8006582:	d102      	bne.n	800658a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8006584:	4b11      	ldr	r3, [pc, #68]	; (80065cc <_sbrk+0x64>)
 8006586:	4a12      	ldr	r2, [pc, #72]	; (80065d0 <_sbrk+0x68>)
 8006588:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800658a:	4b10      	ldr	r3, [pc, #64]	; (80065cc <_sbrk+0x64>)
 800658c:	681a      	ldr	r2, [r3, #0]
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	4413      	add	r3, r2
 8006592:	693a      	ldr	r2, [r7, #16]
 8006594:	429a      	cmp	r2, r3
 8006596:	d207      	bcs.n	80065a8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8006598:	f00d fce8 	bl	8013f6c <__errno>
 800659c:	4603      	mov	r3, r0
 800659e:	220c      	movs	r2, #12
 80065a0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80065a2:	f04f 33ff 	mov.w	r3, #4294967295
 80065a6:	e009      	b.n	80065bc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80065a8:	4b08      	ldr	r3, [pc, #32]	; (80065cc <_sbrk+0x64>)
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80065ae:	4b07      	ldr	r3, [pc, #28]	; (80065cc <_sbrk+0x64>)
 80065b0:	681a      	ldr	r2, [r3, #0]
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	4413      	add	r3, r2
 80065b6:	4a05      	ldr	r2, [pc, #20]	; (80065cc <_sbrk+0x64>)
 80065b8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80065ba:	68fb      	ldr	r3, [r7, #12]
}
 80065bc:	4618      	mov	r0, r3
 80065be:	3718      	adds	r7, #24
 80065c0:	46bd      	mov	sp, r7
 80065c2:	bd80      	pop	{r7, pc}
 80065c4:	200c0000 	.word	0x200c0000
 80065c8:	00000400 	.word	0x00000400
 80065cc:	200020dc 	.word	0x200020dc
 80065d0:	20002840 	.word	0x20002840

080065d4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80065d4:	b480      	push	{r7}
 80065d6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80065d8:	4b18      	ldr	r3, [pc, #96]	; (800663c <SystemInit+0x68>)
 80065da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065de:	4a17      	ldr	r2, [pc, #92]	; (800663c <SystemInit+0x68>)
 80065e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80065e4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 80065e8:	4b15      	ldr	r3, [pc, #84]	; (8006640 <SystemInit+0x6c>)
 80065ea:	2201      	movs	r2, #1
 80065ec:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 80065ee:	4b14      	ldr	r3, [pc, #80]	; (8006640 <SystemInit+0x6c>)
 80065f0:	2200      	movs	r2, #0
 80065f2:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 80065f4:	4b12      	ldr	r3, [pc, #72]	; (8006640 <SystemInit+0x6c>)
 80065f6:	2200      	movs	r2, #0
 80065f8:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 80065fa:	4b11      	ldr	r3, [pc, #68]	; (8006640 <SystemInit+0x6c>)
 80065fc:	2200      	movs	r2, #0
 80065fe:	625a      	str	r2, [r3, #36]	; 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 8006600:	4b0f      	ldr	r3, [pc, #60]	; (8006640 <SystemInit+0x6c>)
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	4a0e      	ldr	r2, [pc, #56]	; (8006640 <SystemInit+0x6c>)
 8006606:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 800660a:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 800660e:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 8006610:	4b0b      	ldr	r3, [pc, #44]	; (8006640 <SystemInit+0x6c>)
 8006612:	2200      	movs	r2, #0
 8006614:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8006616:	4b0a      	ldr	r3, [pc, #40]	; (8006640 <SystemInit+0x6c>)
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	4a09      	ldr	r2, [pc, #36]	; (8006640 <SystemInit+0x6c>)
 800661c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006620:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8006622:	4b07      	ldr	r3, [pc, #28]	; (8006640 <SystemInit+0x6c>)
 8006624:	2200      	movs	r2, #0
 8006626:	651a      	str	r2, [r3, #80]	; 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8006628:	4b04      	ldr	r3, [pc, #16]	; (800663c <SystemInit+0x68>)
 800662a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800662e:	609a      	str	r2, [r3, #8]
  #endif
}
 8006630:	bf00      	nop
 8006632:	46bd      	mov	sp, r7
 8006634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006638:	4770      	bx	lr
 800663a:	bf00      	nop
 800663c:	e000ed00 	.word	0xe000ed00
 8006640:	46020c00 	.word	0x46020c00

08006644 <MX_TIM7_Init>:

TIM_HandleTypeDef htim7;

/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8006644:	b580      	push	{r7, lr}
 8006646:	b084      	sub	sp, #16
 8006648:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800664a:	1d3b      	adds	r3, r7, #4
 800664c:	2200      	movs	r2, #0
 800664e:	601a      	str	r2, [r3, #0]
 8006650:	605a      	str	r2, [r3, #4]
 8006652:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8006654:	4b14      	ldr	r3, [pc, #80]	; (80066a8 <MX_TIM7_Init+0x64>)
 8006656:	4a15      	ldr	r2, [pc, #84]	; (80066ac <MX_TIM7_Init+0x68>)
 8006658:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 59170;
 800665a:	4b13      	ldr	r3, [pc, #76]	; (80066a8 <MX_TIM7_Init+0x64>)
 800665c:	f24e 7222 	movw	r2, #59170	; 0xe722
 8006660:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006662:	4b11      	ldr	r3, [pc, #68]	; (80066a8 <MX_TIM7_Init+0x64>)
 8006664:	2200      	movs	r2, #0
 8006666:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 51;
 8006668:	4b0f      	ldr	r3, [pc, #60]	; (80066a8 <MX_TIM7_Init+0x64>)
 800666a:	2233      	movs	r2, #51	; 0x33
 800666c:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800666e:	4b0e      	ldr	r3, [pc, #56]	; (80066a8 <MX_TIM7_Init+0x64>)
 8006670:	2200      	movs	r2, #0
 8006672:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8006674:	480c      	ldr	r0, [pc, #48]	; (80066a8 <MX_TIM7_Init+0x64>)
 8006676:	f008 fca1 	bl	800efbc <HAL_TIM_Base_Init>
 800667a:	4603      	mov	r3, r0
 800667c:	2b00      	cmp	r3, #0
 800667e:	d001      	beq.n	8006684 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8006680:	f7ff fbb4 	bl	8005dec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006684:	2300      	movs	r3, #0
 8006686:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006688:	2300      	movs	r3, #0
 800668a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800668c:	1d3b      	adds	r3, r7, #4
 800668e:	4619      	mov	r1, r3
 8006690:	4805      	ldr	r0, [pc, #20]	; (80066a8 <MX_TIM7_Init+0x64>)
 8006692:	f009 f82d 	bl	800f6f0 <HAL_TIMEx_MasterConfigSynchronization>
 8006696:	4603      	mov	r3, r0
 8006698:	2b00      	cmp	r3, #0
 800669a:	d001      	beq.n	80066a0 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 800669c:	f7ff fba6 	bl	8005dec <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80066a0:	bf00      	nop
 80066a2:	3710      	adds	r7, #16
 80066a4:	46bd      	mov	sp, r7
 80066a6:	bd80      	pop	{r7, pc}
 80066a8:	200020e0 	.word	0x200020e0
 80066ac:	40001400 	.word	0x40001400

080066b0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80066b0:	b580      	push	{r7, lr}
 80066b2:	b084      	sub	sp, #16
 80066b4:	af00      	add	r7, sp, #0
 80066b6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM7)
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	4a0e      	ldr	r2, [pc, #56]	; (80066f8 <HAL_TIM_Base_MspInit+0x48>)
 80066be:	4293      	cmp	r3, r2
 80066c0:	d116      	bne.n	80066f0 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* TIM7 clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 80066c2:	4b0e      	ldr	r3, [pc, #56]	; (80066fc <HAL_TIM_Base_MspInit+0x4c>)
 80066c4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80066c8:	4a0c      	ldr	r2, [pc, #48]	; (80066fc <HAL_TIM_Base_MspInit+0x4c>)
 80066ca:	f043 0320 	orr.w	r3, r3, #32
 80066ce:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80066d2:	4b0a      	ldr	r3, [pc, #40]	; (80066fc <HAL_TIM_Base_MspInit+0x4c>)
 80066d4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80066d8:	f003 0320 	and.w	r3, r3, #32
 80066dc:	60fb      	str	r3, [r7, #12]
 80066de:	68fb      	ldr	r3, [r7, #12]

    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 8, 0);
 80066e0:	2200      	movs	r2, #0
 80066e2:	2108      	movs	r1, #8
 80066e4:	2032      	movs	r0, #50	; 0x32
 80066e6:	f000 fa45 	bl	8006b74 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80066ea:	2032      	movs	r0, #50	; 0x32
 80066ec:	f000 fa5c 	bl	8006ba8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 80066f0:	bf00      	nop
 80066f2:	3710      	adds	r7, #16
 80066f4:	46bd      	mov	sp, r7
 80066f6:	bd80      	pop	{r7, pc}
 80066f8:	40001400 	.word	0x40001400
 80066fc:	46020c00 	.word	0x46020c00

08006700 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8006700:	b580      	push	{r7, lr}
 8006702:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8006704:	4b22      	ldr	r3, [pc, #136]	; (8006790 <MX_USART1_UART_Init+0x90>)
 8006706:	4a23      	ldr	r2, [pc, #140]	; (8006794 <MX_USART1_UART_Init+0x94>)
 8006708:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800670a:	4b21      	ldr	r3, [pc, #132]	; (8006790 <MX_USART1_UART_Init+0x90>)
 800670c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8006710:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8006712:	4b1f      	ldr	r3, [pc, #124]	; (8006790 <MX_USART1_UART_Init+0x90>)
 8006714:	2200      	movs	r2, #0
 8006716:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8006718:	4b1d      	ldr	r3, [pc, #116]	; (8006790 <MX_USART1_UART_Init+0x90>)
 800671a:	2200      	movs	r2, #0
 800671c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800671e:	4b1c      	ldr	r3, [pc, #112]	; (8006790 <MX_USART1_UART_Init+0x90>)
 8006720:	2200      	movs	r2, #0
 8006722:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8006724:	4b1a      	ldr	r3, [pc, #104]	; (8006790 <MX_USART1_UART_Init+0x90>)
 8006726:	220c      	movs	r2, #12
 8006728:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800672a:	4b19      	ldr	r3, [pc, #100]	; (8006790 <MX_USART1_UART_Init+0x90>)
 800672c:	2200      	movs	r2, #0
 800672e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8006730:	4b17      	ldr	r3, [pc, #92]	; (8006790 <MX_USART1_UART_Init+0x90>)
 8006732:	2200      	movs	r2, #0
 8006734:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8006736:	4b16      	ldr	r3, [pc, #88]	; (8006790 <MX_USART1_UART_Init+0x90>)
 8006738:	2200      	movs	r2, #0
 800673a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800673c:	4b14      	ldr	r3, [pc, #80]	; (8006790 <MX_USART1_UART_Init+0x90>)
 800673e:	2200      	movs	r2, #0
 8006740:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8006742:	4b13      	ldr	r3, [pc, #76]	; (8006790 <MX_USART1_UART_Init+0x90>)
 8006744:	2200      	movs	r2, #0
 8006746:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8006748:	4811      	ldr	r0, [pc, #68]	; (8006790 <MX_USART1_UART_Init+0x90>)
 800674a:	f009 f8d9 	bl	800f900 <HAL_UART_Init>
 800674e:	4603      	mov	r3, r0
 8006750:	2b00      	cmp	r3, #0
 8006752:	d001      	beq.n	8006758 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8006754:	f7ff fb4a 	bl	8005dec <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8006758:	2100      	movs	r1, #0
 800675a:	480d      	ldr	r0, [pc, #52]	; (8006790 <MX_USART1_UART_Init+0x90>)
 800675c:	f009 fd56 	bl	801020c <HAL_UARTEx_SetTxFifoThreshold>
 8006760:	4603      	mov	r3, r0
 8006762:	2b00      	cmp	r3, #0
 8006764:	d001      	beq.n	800676a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8006766:	f7ff fb41 	bl	8005dec <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800676a:	2100      	movs	r1, #0
 800676c:	4808      	ldr	r0, [pc, #32]	; (8006790 <MX_USART1_UART_Init+0x90>)
 800676e:	f009 fd8b 	bl	8010288 <HAL_UARTEx_SetRxFifoThreshold>
 8006772:	4603      	mov	r3, r0
 8006774:	2b00      	cmp	r3, #0
 8006776:	d001      	beq.n	800677c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8006778:	f7ff fb38 	bl	8005dec <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800677c:	4804      	ldr	r0, [pc, #16]	; (8006790 <MX_USART1_UART_Init+0x90>)
 800677e:	f009 fd0c 	bl	801019a <HAL_UARTEx_DisableFifoMode>
 8006782:	4603      	mov	r3, r0
 8006784:	2b00      	cmp	r3, #0
 8006786:	d001      	beq.n	800678c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8006788:	f7ff fb30 	bl	8005dec <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800678c:	bf00      	nop
 800678e:	bd80      	pop	{r7, pc}
 8006790:	2000212c 	.word	0x2000212c
 8006794:	40013800 	.word	0x40013800

08006798 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8006798:	b580      	push	{r7, lr}
 800679a:	b0bc      	sub	sp, #240	; 0xf0
 800679c:	af00      	add	r7, sp, #0
 800679e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80067a0:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80067a4:	2200      	movs	r2, #0
 80067a6:	601a      	str	r2, [r3, #0]
 80067a8:	605a      	str	r2, [r3, #4]
 80067aa:	609a      	str	r2, [r3, #8]
 80067ac:	60da      	str	r2, [r3, #12]
 80067ae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80067b0:	f107 0310 	add.w	r3, r7, #16
 80067b4:	22c8      	movs	r2, #200	; 0xc8
 80067b6:	2100      	movs	r1, #0
 80067b8:	4618      	mov	r0, r3
 80067ba:	f00d fc01 	bl	8013fc0 <memset>
  if(uartHandle->Instance==USART1)
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	4a26      	ldr	r2, [pc, #152]	; (800685c <HAL_UART_MspInit+0xc4>)
 80067c4:	4293      	cmp	r3, r2
 80067c6:	d145      	bne.n	8006854 <HAL_UART_MspInit+0xbc>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80067c8:	f04f 0201 	mov.w	r2, #1
 80067cc:	f04f 0300 	mov.w	r3, #0
 80067d0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80067d4:	2300      	movs	r3, #0
 80067d6:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80067d8:	f107 0310 	add.w	r3, r7, #16
 80067dc:	4618      	mov	r0, r3
 80067de:	f005 ffa3 	bl	800c728 <HAL_RCCEx_PeriphCLKConfig>
 80067e2:	4603      	mov	r3, r0
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d001      	beq.n	80067ec <HAL_UART_MspInit+0x54>
    {
      Error_Handler();
 80067e8:	f7ff fb00 	bl	8005dec <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80067ec:	4b1c      	ldr	r3, [pc, #112]	; (8006860 <HAL_UART_MspInit+0xc8>)
 80067ee:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80067f2:	4a1b      	ldr	r2, [pc, #108]	; (8006860 <HAL_UART_MspInit+0xc8>)
 80067f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80067f8:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
 80067fc:	4b18      	ldr	r3, [pc, #96]	; (8006860 <HAL_UART_MspInit+0xc8>)
 80067fe:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006802:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006806:	60fb      	str	r3, [r7, #12]
 8006808:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800680a:	4b15      	ldr	r3, [pc, #84]	; (8006860 <HAL_UART_MspInit+0xc8>)
 800680c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006810:	4a13      	ldr	r2, [pc, #76]	; (8006860 <HAL_UART_MspInit+0xc8>)
 8006812:	f043 0301 	orr.w	r3, r3, #1
 8006816:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800681a:	4b11      	ldr	r3, [pc, #68]	; (8006860 <HAL_UART_MspInit+0xc8>)
 800681c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006820:	f003 0301 	and.w	r3, r3, #1
 8006824:	60bb      	str	r3, [r7, #8]
 8006826:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = T_VCP_RX_Pin|T_VCP_TX_Pin;
 8006828:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800682c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006830:	2302      	movs	r3, #2
 8006832:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006836:	2300      	movs	r3, #0
 8006838:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800683c:	2300      	movs	r3, #0
 800683e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8006842:	2307      	movs	r3, #7
 8006844:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006848:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800684c:	4619      	mov	r1, r3
 800684e:	4805      	ldr	r0, [pc, #20]	; (8006864 <HAL_UART_MspInit+0xcc>)
 8006850:	f001 fff2 	bl	8008838 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8006854:	bf00      	nop
 8006856:	37f0      	adds	r7, #240	; 0xf0
 8006858:	46bd      	mov	sp, r7
 800685a:	bd80      	pop	{r7, pc}
 800685c:	40013800 	.word	0x40013800
 8006860:	46020c00 	.word	0x46020c00
 8006864:	42020000 	.word	0x42020000

08006868 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8006868:	f8df d034 	ldr.w	sp, [pc, #52]	; 80068a0 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 800686c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800686e:	e003      	b.n	8006878 <LoopCopyDataInit>

08006870 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8006870:	4b0c      	ldr	r3, [pc, #48]	; (80068a4 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8006872:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8006874:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8006876:	3104      	adds	r1, #4

08006878 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8006878:	480b      	ldr	r0, [pc, #44]	; (80068a8 <LoopForever+0xa>)
	ldr	r3, =_edata
 800687a:	4b0c      	ldr	r3, [pc, #48]	; (80068ac <LoopForever+0xe>)
	adds	r2, r0, r1
 800687c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800687e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8006880:	d3f6      	bcc.n	8006870 <CopyDataInit>
	ldr	r2, =_sbss
 8006882:	4a0b      	ldr	r2, [pc, #44]	; (80068b0 <LoopForever+0x12>)
	b	LoopFillZerobss
 8006884:	e002      	b.n	800688c <LoopFillZerobss>

08006886 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8006886:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8006888:	f842 3b04 	str.w	r3, [r2], #4

0800688c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 800688c:	4b09      	ldr	r3, [pc, #36]	; (80068b4 <LoopForever+0x16>)
	cmp	r2, r3
 800688e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8006890:	d3f9      	bcc.n	8006886 <FillZerobss>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8006892:	f7ff fe9f 	bl	80065d4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8006896:	f00d fb6f 	bl	8013f78 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800689a:	f7ff f9c5 	bl	8005c28 <main>

0800689e <LoopForever>:

LoopForever:
    b LoopForever
 800689e:	e7fe      	b.n	800689e <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 80068a0:	200c0000 	.word	0x200c0000
	ldr	r3, =_sidata
 80068a4:	08015188 	.word	0x08015188
	ldr	r0, =_sdata
 80068a8:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80068ac:	20000078 	.word	0x20000078
	ldr	r2, =_sbss
 80068b0:	20000078 	.word	0x20000078
	ldr	r3, = _ebss
 80068b4:	2000283c 	.word	0x2000283c

080068b8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80068b8:	e7fe      	b.n	80068b8 <ADC1_IRQHandler>
	...

080068bc <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80068bc:	b580      	push	{r7, lr}
 80068be:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80068c0:	4b11      	ldr	r3, [pc, #68]	; (8006908 <HAL_Init+0x4c>)
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	4a10      	ldr	r2, [pc, #64]	; (8006908 <HAL_Init+0x4c>)
 80068c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80068ca:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80068cc:	2003      	movs	r0, #3
 80068ce:	f000 f946 	bl	8006b5e <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80068d2:	f005 fd0d 	bl	800c2f0 <HAL_RCC_GetSysClockFreq>
 80068d6:	4602      	mov	r2, r0
 80068d8:	4b0c      	ldr	r3, [pc, #48]	; (800690c <HAL_Init+0x50>)
 80068da:	6a1b      	ldr	r3, [r3, #32]
 80068dc:	f003 030f 	and.w	r3, r3, #15
 80068e0:	490b      	ldr	r1, [pc, #44]	; (8006910 <HAL_Init+0x54>)
 80068e2:	5ccb      	ldrb	r3, [r1, r3]
 80068e4:	fa22 f303 	lsr.w	r3, r2, r3
 80068e8:	4a0a      	ldr	r2, [pc, #40]	; (8006914 <HAL_Init+0x58>)
 80068ea:	6013      	str	r3, [r2, #0]

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80068ec:	200f      	movs	r0, #15
 80068ee:	f7ff fd1d 	bl	800632c <HAL_InitTick>
 80068f2:	4603      	mov	r3, r0
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d001      	beq.n	80068fc <HAL_Init+0x40>
  {
    return HAL_ERROR;
 80068f8:	2301      	movs	r3, #1
 80068fa:	e002      	b.n	8006902 <HAL_Init+0x46>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80068fc:	f7ff fcfc 	bl	80062f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8006900:	2300      	movs	r3, #0
}
 8006902:	4618      	mov	r0, r3
 8006904:	bd80      	pop	{r7, pc}
 8006906:	bf00      	nop
 8006908:	40022000 	.word	0x40022000
 800690c:	46020c00 	.word	0x46020c00
 8006910:	08015014 	.word	0x08015014
 8006914:	20000004 	.word	0x20000004

08006918 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006918:	b480      	push	{r7}
 800691a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800691c:	4b06      	ldr	r3, [pc, #24]	; (8006938 <HAL_IncTick+0x20>)
 800691e:	781b      	ldrb	r3, [r3, #0]
 8006920:	461a      	mov	r2, r3
 8006922:	4b06      	ldr	r3, [pc, #24]	; (800693c <HAL_IncTick+0x24>)
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	4413      	add	r3, r2
 8006928:	4a04      	ldr	r2, [pc, #16]	; (800693c <HAL_IncTick+0x24>)
 800692a:	6013      	str	r3, [r2, #0]
}
 800692c:	bf00      	nop
 800692e:	46bd      	mov	sp, r7
 8006930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006934:	4770      	bx	lr
 8006936:	bf00      	nop
 8006938:	2000000c 	.word	0x2000000c
 800693c:	200021bc 	.word	0x200021bc

08006940 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006940:	b480      	push	{r7}
 8006942:	af00      	add	r7, sp, #0
  return uwTick;
 8006944:	4b03      	ldr	r3, [pc, #12]	; (8006954 <HAL_GetTick+0x14>)
 8006946:	681b      	ldr	r3, [r3, #0]
}
 8006948:	4618      	mov	r0, r3
 800694a:	46bd      	mov	sp, r7
 800694c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006950:	4770      	bx	lr
 8006952:	bf00      	nop
 8006954:	200021bc 	.word	0x200021bc

08006958 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006958:	b580      	push	{r7, lr}
 800695a:	b084      	sub	sp, #16
 800695c:	af00      	add	r7, sp, #0
 800695e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006960:	f7ff ffee 	bl	8006940 <HAL_GetTick>
 8006964:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006970:	d005      	beq.n	800697e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8006972:	4b0a      	ldr	r3, [pc, #40]	; (800699c <HAL_Delay+0x44>)
 8006974:	781b      	ldrb	r3, [r3, #0]
 8006976:	461a      	mov	r2, r3
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	4413      	add	r3, r2
 800697c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800697e:	bf00      	nop
 8006980:	f7ff ffde 	bl	8006940 <HAL_GetTick>
 8006984:	4602      	mov	r2, r0
 8006986:	68bb      	ldr	r3, [r7, #8]
 8006988:	1ad3      	subs	r3, r2, r3
 800698a:	68fa      	ldr	r2, [r7, #12]
 800698c:	429a      	cmp	r2, r3
 800698e:	d8f7      	bhi.n	8006980 <HAL_Delay+0x28>
  {
  }
}
 8006990:	bf00      	nop
 8006992:	bf00      	nop
 8006994:	3710      	adds	r7, #16
 8006996:	46bd      	mov	sp, r7
 8006998:	bd80      	pop	{r7, pc}
 800699a:	bf00      	nop
 800699c:	2000000c 	.word	0x2000000c

080069a0 <HAL_CORDIC_Init>:
  * @brief  Initialize the CORDIC peripheral and the associated handle.
  * @param  hcordic pointer to a CORDIC_HandleTypeDef structure.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CORDIC_Init(CORDIC_HandleTypeDef *hcordic)
{
 80069a0:	b580      	push	{r7, lr}
 80069a2:	b082      	sub	sp, #8
 80069a4:	af00      	add	r7, sp, #0
 80069a6:	6078      	str	r0, [r7, #4]
  /* Check the CORDIC handle allocation */
  if (hcordic == NULL)
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d101      	bne.n	80069b2 <HAL_CORDIC_Init+0x12>
  {
    /* Return error status */
    return HAL_ERROR;
 80069ae:	2301      	movs	r3, #1
 80069b0:	e023      	b.n	80069fa <HAL_CORDIC_Init+0x5a>

    /* Initialize the low level hardware */
    hcordic->MspInitCallback(hcordic);
  }
#else
  if (hcordic->State == HAL_CORDIC_STATE_RESET)
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80069b8:	b2db      	uxtb	r3, r3
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d106      	bne.n	80069cc <HAL_CORDIC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hcordic->Lock = HAL_UNLOCKED;
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	2200      	movs	r2, #0
 80069c2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize the low level hardware */
    HAL_CORDIC_MspInit(hcordic);
 80069c6:	6878      	ldr	r0, [r7, #4]
 80069c8:	f7fe fa3c 	bl	8004e44 <HAL_CORDIC_MspInit>
  }
#endif /* (USE_HAL_CORDIC_REGISTER_CALLBACKS) */

  /* Set CORDIC error code to none */
  hcordic->ErrorCode = HAL_CORDIC_ERROR_NONE;
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	2200      	movs	r2, #0
 80069d0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Reset pInBuff and pOutBuff */
  hcordic->pInBuff = NULL;
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	2200      	movs	r2, #0
 80069d6:	605a      	str	r2, [r3, #4]
  hcordic->pOutBuff = NULL;
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	2200      	movs	r2, #0
 80069dc:	609a      	str	r2, [r3, #8]

  /* Reset NbCalcToOrder and NbCalcToGet */
  hcordic->NbCalcToOrder = 0U;
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	2200      	movs	r2, #0
 80069e2:	60da      	str	r2, [r3, #12]
  hcordic->NbCalcToGet = 0U;
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	2200      	movs	r2, #0
 80069e8:	611a      	str	r2, [r3, #16]

  /* Reset DMADirection */
  hcordic->DMADirection = CORDIC_DMA_DIR_NONE;
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	2200      	movs	r2, #0
 80069ee:	615a      	str	r2, [r3, #20]

  /* Change CORDIC peripheral state */
  hcordic->State = HAL_CORDIC_STATE_READY;
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	2201      	movs	r2, #1
 80069f4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Return function status */
  return HAL_OK;
 80069f8:	2300      	movs	r3, #0
}
 80069fa:	4618      	mov	r0, r3
 80069fc:	3708      	adds	r7, #8
 80069fe:	46bd      	mov	sp, r7
 8006a00:	bd80      	pop	{r7, pc}
	...

08006a04 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006a04:	b480      	push	{r7}
 8006a06:	b085      	sub	sp, #20
 8006a08:	af00      	add	r7, sp, #0
 8006a0a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	f003 0307 	and.w	r3, r3, #7
 8006a12:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006a14:	4b0c      	ldr	r3, [pc, #48]	; (8006a48 <__NVIC_SetPriorityGrouping+0x44>)
 8006a16:	68db      	ldr	r3, [r3, #12]
 8006a18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006a1a:	68ba      	ldr	r2, [r7, #8]
 8006a1c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006a20:	4013      	ands	r3, r2
 8006a22:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006a28:	68bb      	ldr	r3, [r7, #8]
 8006a2a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006a2c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006a30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006a34:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006a36:	4a04      	ldr	r2, [pc, #16]	; (8006a48 <__NVIC_SetPriorityGrouping+0x44>)
 8006a38:	68bb      	ldr	r3, [r7, #8]
 8006a3a:	60d3      	str	r3, [r2, #12]
}
 8006a3c:	bf00      	nop
 8006a3e:	3714      	adds	r7, #20
 8006a40:	46bd      	mov	sp, r7
 8006a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a46:	4770      	bx	lr
 8006a48:	e000ed00 	.word	0xe000ed00

08006a4c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006a4c:	b480      	push	{r7}
 8006a4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006a50:	4b04      	ldr	r3, [pc, #16]	; (8006a64 <__NVIC_GetPriorityGrouping+0x18>)
 8006a52:	68db      	ldr	r3, [r3, #12]
 8006a54:	0a1b      	lsrs	r3, r3, #8
 8006a56:	f003 0307 	and.w	r3, r3, #7
}
 8006a5a:	4618      	mov	r0, r3
 8006a5c:	46bd      	mov	sp, r7
 8006a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a62:	4770      	bx	lr
 8006a64:	e000ed00 	.word	0xe000ed00

08006a68 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006a68:	b480      	push	{r7}
 8006a6a:	b083      	sub	sp, #12
 8006a6c:	af00      	add	r7, sp, #0
 8006a6e:	4603      	mov	r3, r0
 8006a70:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006a72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	db0b      	blt.n	8006a92 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006a7a:	79fb      	ldrb	r3, [r7, #7]
 8006a7c:	f003 021f 	and.w	r2, r3, #31
 8006a80:	4907      	ldr	r1, [pc, #28]	; (8006aa0 <__NVIC_EnableIRQ+0x38>)
 8006a82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006a86:	095b      	lsrs	r3, r3, #5
 8006a88:	2001      	movs	r0, #1
 8006a8a:	fa00 f202 	lsl.w	r2, r0, r2
 8006a8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8006a92:	bf00      	nop
 8006a94:	370c      	adds	r7, #12
 8006a96:	46bd      	mov	sp, r7
 8006a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a9c:	4770      	bx	lr
 8006a9e:	bf00      	nop
 8006aa0:	e000e100 	.word	0xe000e100

08006aa4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006aa4:	b480      	push	{r7}
 8006aa6:	b083      	sub	sp, #12
 8006aa8:	af00      	add	r7, sp, #0
 8006aaa:	4603      	mov	r3, r0
 8006aac:	6039      	str	r1, [r7, #0]
 8006aae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006ab0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	db0a      	blt.n	8006ace <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006ab8:	683b      	ldr	r3, [r7, #0]
 8006aba:	b2da      	uxtb	r2, r3
 8006abc:	490c      	ldr	r1, [pc, #48]	; (8006af0 <__NVIC_SetPriority+0x4c>)
 8006abe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006ac2:	0112      	lsls	r2, r2, #4
 8006ac4:	b2d2      	uxtb	r2, r2
 8006ac6:	440b      	add	r3, r1
 8006ac8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006acc:	e00a      	b.n	8006ae4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006ace:	683b      	ldr	r3, [r7, #0]
 8006ad0:	b2da      	uxtb	r2, r3
 8006ad2:	4908      	ldr	r1, [pc, #32]	; (8006af4 <__NVIC_SetPriority+0x50>)
 8006ad4:	79fb      	ldrb	r3, [r7, #7]
 8006ad6:	f003 030f 	and.w	r3, r3, #15
 8006ada:	3b04      	subs	r3, #4
 8006adc:	0112      	lsls	r2, r2, #4
 8006ade:	b2d2      	uxtb	r2, r2
 8006ae0:	440b      	add	r3, r1
 8006ae2:	761a      	strb	r2, [r3, #24]
}
 8006ae4:	bf00      	nop
 8006ae6:	370c      	adds	r7, #12
 8006ae8:	46bd      	mov	sp, r7
 8006aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aee:	4770      	bx	lr
 8006af0:	e000e100 	.word	0xe000e100
 8006af4:	e000ed00 	.word	0xe000ed00

08006af8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006af8:	b480      	push	{r7}
 8006afa:	b089      	sub	sp, #36	; 0x24
 8006afc:	af00      	add	r7, sp, #0
 8006afe:	60f8      	str	r0, [r7, #12]
 8006b00:	60b9      	str	r1, [r7, #8]
 8006b02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	f003 0307 	and.w	r3, r3, #7
 8006b0a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006b0c:	69fb      	ldr	r3, [r7, #28]
 8006b0e:	f1c3 0307 	rsb	r3, r3, #7
 8006b12:	2b04      	cmp	r3, #4
 8006b14:	bf28      	it	cs
 8006b16:	2304      	movcs	r3, #4
 8006b18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006b1a:	69fb      	ldr	r3, [r7, #28]
 8006b1c:	3304      	adds	r3, #4
 8006b1e:	2b06      	cmp	r3, #6
 8006b20:	d902      	bls.n	8006b28 <NVIC_EncodePriority+0x30>
 8006b22:	69fb      	ldr	r3, [r7, #28]
 8006b24:	3b03      	subs	r3, #3
 8006b26:	e000      	b.n	8006b2a <NVIC_EncodePriority+0x32>
 8006b28:	2300      	movs	r3, #0
 8006b2a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006b2c:	f04f 32ff 	mov.w	r2, #4294967295
 8006b30:	69bb      	ldr	r3, [r7, #24]
 8006b32:	fa02 f303 	lsl.w	r3, r2, r3
 8006b36:	43da      	mvns	r2, r3
 8006b38:	68bb      	ldr	r3, [r7, #8]
 8006b3a:	401a      	ands	r2, r3
 8006b3c:	697b      	ldr	r3, [r7, #20]
 8006b3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006b40:	f04f 31ff 	mov.w	r1, #4294967295
 8006b44:	697b      	ldr	r3, [r7, #20]
 8006b46:	fa01 f303 	lsl.w	r3, r1, r3
 8006b4a:	43d9      	mvns	r1, r3
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006b50:	4313      	orrs	r3, r2
         );
}
 8006b52:	4618      	mov	r0, r3
 8006b54:	3724      	adds	r7, #36	; 0x24
 8006b56:	46bd      	mov	sp, r7
 8006b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b5c:	4770      	bx	lr

08006b5e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006b5e:	b580      	push	{r7, lr}
 8006b60:	b082      	sub	sp, #8
 8006b62:	af00      	add	r7, sp, #0
 8006b64:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006b66:	6878      	ldr	r0, [r7, #4]
 8006b68:	f7ff ff4c 	bl	8006a04 <__NVIC_SetPriorityGrouping>
}
 8006b6c:	bf00      	nop
 8006b6e:	3708      	adds	r7, #8
 8006b70:	46bd      	mov	sp, r7
 8006b72:	bd80      	pop	{r7, pc}

08006b74 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006b74:	b580      	push	{r7, lr}
 8006b76:	b086      	sub	sp, #24
 8006b78:	af00      	add	r7, sp, #0
 8006b7a:	4603      	mov	r3, r0
 8006b7c:	60b9      	str	r1, [r7, #8]
 8006b7e:	607a      	str	r2, [r7, #4]
 8006b80:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8006b82:	f7ff ff63 	bl	8006a4c <__NVIC_GetPriorityGrouping>
 8006b86:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006b88:	687a      	ldr	r2, [r7, #4]
 8006b8a:	68b9      	ldr	r1, [r7, #8]
 8006b8c:	6978      	ldr	r0, [r7, #20]
 8006b8e:	f7ff ffb3 	bl	8006af8 <NVIC_EncodePriority>
 8006b92:	4602      	mov	r2, r0
 8006b94:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006b98:	4611      	mov	r1, r2
 8006b9a:	4618      	mov	r0, r3
 8006b9c:	f7ff ff82 	bl	8006aa4 <__NVIC_SetPriority>
}
 8006ba0:	bf00      	nop
 8006ba2:	3718      	adds	r7, #24
 8006ba4:	46bd      	mov	sp, r7
 8006ba6:	bd80      	pop	{r7, pc}

08006ba8 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006ba8:	b580      	push	{r7, lr}
 8006baa:	b082      	sub	sp, #8
 8006bac:	af00      	add	r7, sp, #0
 8006bae:	4603      	mov	r3, r0
 8006bb0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006bb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006bb6:	4618      	mov	r0, r3
 8006bb8:	f7ff ff56 	bl	8006a68 <__NVIC_EnableIRQ>
}
 8006bbc:	bf00      	nop
 8006bbe:	3708      	adds	r7, #8
 8006bc0:	46bd      	mov	sp, r7
 8006bc2:	bd80      	pop	{r7, pc}

08006bc4 <HAL_DCACHE_Init>:
  * @param  hdcache Pointer to a DCACHE_HandleTypeDef structure that contains
  *                 the configuration information for the specified DCACHE.
  * @retval HAL status
  */
HAL_StatusTypeDef  HAL_DCACHE_Init(DCACHE_HandleTypeDef *hdcache)
{
 8006bc4:	b580      	push	{r7, lr}
 8006bc6:	b084      	sub	sp, #16
 8006bc8:	af00      	add	r7, sp, #0
 8006bca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the DCACHE handle allocation */
  if (hdcache == NULL)
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d101      	bne.n	8006bd6 <HAL_DCACHE_Init+0x12>
  {
    return HAL_ERROR;
 8006bd2:	2301      	movs	r3, #1
 8006bd4:	e037      	b.n	8006c46 <HAL_DCACHE_Init+0x82>

  /* Check the parameters */
  assert_param(IS_DCACHE_ALL_INSTANCE(hdcache->Instance));
  assert_param(IS_DCACHE_READ_BURST_TYPE(hdcache->Init.ReadBurstType));

  if (hdcache->State == HAL_DCACHE_STATE_RESET)
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006bdc:	b2db      	uxtb	r3, r3
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d119      	bne.n	8006c16 <HAL_DCACHE_Init+0x52>
  {
    /* Init the DCACHE Callback settings with legacy weak */
    hdcache->ErrorCallback                      = HAL_DCACHE_ErrorCallback;
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	4a1a      	ldr	r2, [pc, #104]	; (8006c50 <HAL_DCACHE_Init+0x8c>)
 8006be6:	609a      	str	r2, [r3, #8]
    hdcache->CleanByAddrCallback                = HAL_DCACHE_CleanByAddrCallback;
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	4a1a      	ldr	r2, [pc, #104]	; (8006c54 <HAL_DCACHE_Init+0x90>)
 8006bec:	60da      	str	r2, [r3, #12]
    hdcache->InvalidateByAddrCallback           = HAL_DCACHE_InvalidateByAddrCallback;
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	4a19      	ldr	r2, [pc, #100]	; (8006c58 <HAL_DCACHE_Init+0x94>)
 8006bf2:	611a      	str	r2, [r3, #16]
    hdcache->InvalidateCompleteCallback         = HAL_DCACHE_InvalidateCompleteCallback;
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	4a19      	ldr	r2, [pc, #100]	; (8006c5c <HAL_DCACHE_Init+0x98>)
 8006bf8:	615a      	str	r2, [r3, #20]
    hdcache->CleanAndInvalidateByAddrCallback   = HAL_DCACHE_CleanAndInvalidateByAddrCallback;
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	4a18      	ldr	r2, [pc, #96]	; (8006c60 <HAL_DCACHE_Init+0x9c>)
 8006bfe:	619a      	str	r2, [r3, #24]

    if (hdcache->MspInitCallback == NULL)
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	69db      	ldr	r3, [r3, #28]
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d102      	bne.n	8006c0e <HAL_DCACHE_Init+0x4a>
    {
      hdcache->MspInitCallback = HAL_DCACHE_MspInit;
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	4a16      	ldr	r2, [pc, #88]	; (8006c64 <HAL_DCACHE_Init+0xa0>)
 8006c0c:	61da      	str	r2, [r3, #28]
    }

    /* Init the low level hardware */
    hdcache->MspInitCallback(hdcache);
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	69db      	ldr	r3, [r3, #28]
 8006c12:	6878      	ldr	r0, [r7, #4]
 8006c14:	4798      	blx	r3
  }

  /* Init the error code */
  hdcache->ErrorCode = HAL_DCACHE_ERROR_NONE;
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	2200      	movs	r2, #0
 8006c1a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Init the DCACHE handle state */
  hdcache->State = HAL_DCACHE_STATE_READY;
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	2201      	movs	r2, #1
 8006c20:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  /* Set requested read burst type */
  MODIFY_REG(hdcache->Instance->CR, DCACHE_CR_HBURST, hdcache->Init.ReadBurstType);
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	685a      	ldr	r2, [r3, #4]
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	430a      	orrs	r2, r1
 8006c38:	601a      	str	r2, [r3, #0]

  /* Enable the selected DCACHE peripheral */
  status = HAL_DCACHE_Enable(hdcache);
 8006c3a:	6878      	ldr	r0, [r7, #4]
 8006c3c:	f000 f81e 	bl	8006c7c <HAL_DCACHE_Enable>
 8006c40:	4603      	mov	r3, r0
 8006c42:	73fb      	strb	r3, [r7, #15]

  return status;
 8006c44:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c46:	4618      	mov	r0, r3
 8006c48:	3710      	adds	r7, #16
 8006c4a:	46bd      	mov	sp, r7
 8006c4c:	bd80      	pop	{r7, pc}
 8006c4e:	bf00      	nop
 8006c50:	08006d1b 	.word	0x08006d1b
 8006c54:	08006ccb 	.word	0x08006ccb
 8006c58:	08006cdf 	.word	0x08006cdf
 8006c5c:	08006d07 	.word	0x08006d07
 8006c60:	08006cf3 	.word	0x08006cf3
 8006c64:	08006c69 	.word	0x08006c69

08006c68 <HAL_DCACHE_MspInit>:
  * @param  hdcache Pointer to a DCACHE_HandleTypeDef structure that contains
  *                 the configuration information for the specified DCACHEx peripheral.
  * @retval None
  */
__weak void HAL_DCACHE_MspInit(DCACHE_HandleTypeDef *hdcache)
{
 8006c68:	b480      	push	{r7}
 8006c6a:	b083      	sub	sp, #12
 8006c6c:	af00      	add	r7, sp, #0
 8006c6e:	6078      	str	r0, [r7, #4]
  UNUSED(hdcache);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DCACHE_MspInit can be implemented in the user file
   */
}
 8006c70:	bf00      	nop
 8006c72:	370c      	adds	r7, #12
 8006c74:	46bd      	mov	sp, r7
 8006c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c7a:	4770      	bx	lr

08006c7c <HAL_DCACHE_Enable>:
  * @param  hdcache Pointer to a DCACHE_HandleTypeDef structure that contains
  *                 the configuration information for the specified DCACHEx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCACHE_Enable(DCACHE_HandleTypeDef *hdcache)
{
 8006c7c:	b480      	push	{r7}
 8006c7e:	b085      	sub	sp, #20
 8006c80:	af00      	add	r7, sp, #0
 8006c82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006c84:	2300      	movs	r3, #0
 8006c86:	73fb      	strb	r3, [r7, #15]

  /* Check the dcache handle allocation */
  if (hdcache == NULL)
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d101      	bne.n	8006c92 <HAL_DCACHE_Enable+0x16>
  {
    return HAL_ERROR;
 8006c8e:	2301      	movs	r3, #1
 8006c90:	e015      	b.n	8006cbe <HAL_DCACHE_Enable+0x42>

  /* Check the parameters */
  assert_param(IS_DCACHE_ALL_INSTANCE(hdcache->Instance));

  /* Check no ongoing operation */
  if (READ_BIT(hdcache->Instance->SR, (DCACHE_SR_BUSYF | DCACHE_SR_BUSYCMDF)) != 0U)
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	685b      	ldr	r3, [r3, #4]
 8006c98:	f003 0309 	and.w	r3, r3, #9
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d002      	beq.n	8006ca6 <HAL_DCACHE_Enable+0x2a>
  {
    /* Return busy status */
    status =  HAL_BUSY;
 8006ca0:	2302      	movs	r3, #2
 8006ca2:	73fb      	strb	r3, [r7, #15]
 8006ca4:	e00a      	b.n	8006cbc <HAL_DCACHE_Enable+0x40>
  }
  else
  {
    /* Update the error code */
    hdcache->ErrorCode = HAL_DCACHE_ERROR_NONE;
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	2200      	movs	r2, #0
 8006caa:	629a      	str	r2, [r3, #40]	; 0x28

    /* Enable the selected DCACHE peripheral */
    SET_BIT(hdcache->Instance->CR, DCACHE_CR_EN);
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	681a      	ldr	r2, [r3, #0]
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	f042 0201 	orr.w	r2, r2, #1
 8006cba:	601a      	str	r2, [r3, #0]
  }

  return status;
 8006cbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cbe:	4618      	mov	r0, r3
 8006cc0:	3714      	adds	r7, #20
 8006cc2:	46bd      	mov	sp, r7
 8006cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc8:	4770      	bx	lr

08006cca <HAL_DCACHE_CleanByAddrCallback>:
  * @param  hdcache Pointer to a DCACHE_HandleTypeDef structure that contains
  *                 the configuration information for the specified DCACHEx peripheral.
  * @retval None
  */
__weak void HAL_DCACHE_CleanByAddrCallback(DCACHE_HandleTypeDef *hdcache)
{
 8006cca:	b480      	push	{r7}
 8006ccc:	b083      	sub	sp, #12
 8006cce:	af00      	add	r7, sp, #0
 8006cd0:	6078      	str	r0, [r7, #4]
  UNUSED(hdcache);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DCACHE_CleanByAddrCallback() should be implemented in the user file
   */
}
 8006cd2:	bf00      	nop
 8006cd4:	370c      	adds	r7, #12
 8006cd6:	46bd      	mov	sp, r7
 8006cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cdc:	4770      	bx	lr

08006cde <HAL_DCACHE_InvalidateByAddrCallback>:
  * @param  hdcache Pointer to a DCACHE_HandleTypeDef structure that contains
  *                 the configuration information for the specified DCACHEx peripheral.
  * @retval None
  */
__weak void HAL_DCACHE_InvalidateByAddrCallback(DCACHE_HandleTypeDef *hdcache)
{
 8006cde:	b480      	push	{r7}
 8006ce0:	b083      	sub	sp, #12
 8006ce2:	af00      	add	r7, sp, #0
 8006ce4:	6078      	str	r0, [r7, #4]
  UNUSED(hdcache);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DCACHE_InvalidateByAddrCallback() should be implemented in the user file
   */
}
 8006ce6:	bf00      	nop
 8006ce8:	370c      	adds	r7, #12
 8006cea:	46bd      	mov	sp, r7
 8006cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf0:	4770      	bx	lr

08006cf2 <HAL_DCACHE_CleanAndInvalidateByAddrCallback>:
  * @param  hdcache Pointer to a DCACHE_HandleTypeDef structure that contains
  *                 the configuration information for the specified DCACHEx peripheral.
  * @retval None
  */
__weak void HAL_DCACHE_CleanAndInvalidateByAddrCallback(DCACHE_HandleTypeDef *hdcache)
{
 8006cf2:	b480      	push	{r7}
 8006cf4:	b083      	sub	sp, #12
 8006cf6:	af00      	add	r7, sp, #0
 8006cf8:	6078      	str	r0, [r7, #4]
  UNUSED(hdcache);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DCACHE_CleanAndInvalidateByAddrCallback() should be implemented in the user file
   */
}
 8006cfa:	bf00      	nop
 8006cfc:	370c      	adds	r7, #12
 8006cfe:	46bd      	mov	sp, r7
 8006d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d04:	4770      	bx	lr

08006d06 <HAL_DCACHE_InvalidateCompleteCallback>:
  * @param  hdcache Pointer to a DCACHE_HandleTypeDef structure that contains
  *                 the configuration information for the specified DCACHEx peripheral.
  * @retval None
  */
__weak void HAL_DCACHE_InvalidateCompleteCallback(DCACHE_HandleTypeDef *hdcache)
{
 8006d06:	b480      	push	{r7}
 8006d08:	b083      	sub	sp, #12
 8006d0a:	af00      	add	r7, sp, #0
 8006d0c:	6078      	str	r0, [r7, #4]
  UNUSED(hdcache);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DCACHE_InvalidateCompleteCallback() should be implemented in the user file
   */
}
 8006d0e:	bf00      	nop
 8006d10:	370c      	adds	r7, #12
 8006d12:	46bd      	mov	sp, r7
 8006d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d18:	4770      	bx	lr

08006d1a <HAL_DCACHE_ErrorCallback>:
  * @param  hdcache Pointer to a DCACHE_HandleTypeDef structure that contains
  *                 the configuration information for the specified DCACHEx peripheral.
  * @retval None
  */
__weak void HAL_DCACHE_ErrorCallback(DCACHE_HandleTypeDef *hdcache)
{
 8006d1a:	b480      	push	{r7}
 8006d1c:	b083      	sub	sp, #12
 8006d1e:	af00      	add	r7, sp, #0
 8006d20:	6078      	str	r0, [r7, #4]
  UNUSED(hdcache);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DCACHE_ErrorCallback() should be implemented in the user file
   */
}
 8006d22:	bf00      	nop
 8006d24:	370c      	adds	r7, #12
 8006d26:	46bd      	mov	sp, r7
 8006d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d2c:	4770      	bx	lr
	...

08006d30 <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 8006d30:	b580      	push	{r7, lr}
 8006d32:	b082      	sub	sp, #8
 8006d34:	af00      	add	r7, sp, #0
 8006d36:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if (hdcmi == NULL)
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d101      	bne.n	8006d42 <HAL_DCMI_Init+0x12>
  {
    return HAL_ERROR;
 8006d3e:	2301      	movs	r3, #1
 8006d40:	e069      	b.n	8006e16 <HAL_DCMI_Init+0xe6>
  assert_param(IS_DCMI_BYTE_SELECT_MODE(hdcmi->Init.ByteSelectMode));
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));

  if (hdcmi->State == HAL_DCMI_STATE_RESET)
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006d48:	b2db      	uxtb	r3, r3
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d102      	bne.n	8006d54 <HAL_DCMI_Init+0x24>
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 8006d4e:	6878      	ldr	r0, [r7, #4]
 8006d50:	f7fe f8e4 	bl	8004f1c <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	2202      	movs	r2, #2
 8006d58:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  if (hdcmi->Init.ExtendedDataMode != DCMI_EXTEND_DATA_8B)
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	699b      	ldr	r3, [r3, #24]
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d002      	beq.n	8006d6a <HAL_DCMI_Init+0x3a>
  {
    /* Byte select mode must be programmed to the reset value if the extended mode
    is not set to 8-bit data capture on every pixel clock */
    hdcmi->Init.ByteSelectMode = DCMI_BSM_ALL;
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	2200      	movs	r2, #0
 8006d68:	625a      	str	r2, [r3, #36]	; 0x24
  }
  /* Configures the HS, VS, DE and PC polarity */
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 | \
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	6819      	ldr	r1, [r3, #0]
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681a      	ldr	r2, [r3, #0]
 8006d74:	4b2a      	ldr	r3, [pc, #168]	; (8006e20 <HAL_DCMI_Init+0xf0>)
 8006d76:	400b      	ands	r3, r1
 8006d78:	6013      	str	r3, [r2, #0]
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  | \
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS | \
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	6819      	ldr	r1, [r3, #0]
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	685a      	ldr	r2, [r3, #4]
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	695b      	ldr	r3, [r3, #20]
 8006d88:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8006d8e:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	691b      	ldr	r3, [r3, #16]
 8006d94:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	689b      	ldr	r3, [r3, #8]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8006d9a:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	699b      	ldr	r3, [r3, #24]
 8006da0:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	6a1b      	ldr	r3, [r3, #32]
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8006da6:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dac:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8006db2:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006db8:	431a      	orrs	r2, r3
                                    hdcmi->Init.LineSelectStart);
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8006dbe:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	430a      	orrs	r2, r1
 8006dc6:	601a      	str	r2, [r3, #0]

  if (hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	685b      	ldr	r3, [r3, #4]
 8006dcc:	2b10      	cmp	r3, #16
 8006dce:	d112      	bne.n	8006df6 <HAL_DCMI_Init+0xc6>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	7f1b      	ldrb	r3, [r3, #28]
 8006dd4:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	7f5b      	ldrb	r3, [r3, #29]
 8006dda:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8006ddc:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	7f9b      	ldrb	r3, [r3, #30]
 8006de2:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 8006de4:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	7fdb      	ldrb	r3, [r3, #31]
 8006dec:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 8006df2:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8006df4:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	68da      	ldr	r2, [r3, #12]
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	f042 021e 	orr.w	r2, r2, #30
 8006e04:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	2200      	movs	r2, #0
 8006e0a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	2201      	movs	r2, #1
 8006e10:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8006e14:	2300      	movs	r3, #0
}
 8006e16:	4618      	mov	r0, r3
 8006e18:	3708      	adds	r7, #8
 8006e1a:	46bd      	mov	sp, r7
 8006e1c:	bd80      	pop	{r7, pc}
 8006e1e:	bf00      	nop
 8006e20:	ffe0f007 	.word	0xffe0f007

08006e24 <HAL_DCMI_Start_DMA>:
  * @param  pData     The destination memory Buffer address (LCD Frame buffer).
  * @param  Length    The length of capture to be transferred.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Start_DMA(DCMI_HandleTypeDef *hdcmi, uint32_t DCMI_Mode, uint32_t pData, uint32_t Length)
{
 8006e24:	b580      	push	{r7, lr}
 8006e26:	b08a      	sub	sp, #40	; 0x28
 8006e28:	af00      	add	r7, sp, #0
 8006e2a:	60f8      	str	r0, [r7, #12]
 8006e2c:	60b9      	str	r1, [r7, #8]
 8006e2e:	607a      	str	r2, [r7, #4]
 8006e30:	603b      	str	r3, [r7, #0]
  uint32_t tmp_length = Length;
 8006e32:	683b      	ldr	r3, [r7, #0]
 8006e34:	623b      	str	r3, [r7, #32]
  HAL_StatusTypeDef status = HAL_OK;
 8006e36:	2300      	movs	r3, #0
 8006e38:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check function parameters */
  assert_param(IS_DCMI_CAPTURE_MODE(DCMI_Mode));

  /* Process Locked */
  __HAL_LOCK(hdcmi);
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006e42:	2b01      	cmp	r3, #1
 8006e44:	d101      	bne.n	8006e4a <HAL_DCMI_Start_DMA+0x26>
 8006e46:	2302      	movs	r3, #2
 8006e48:	e189      	b.n	800715e <HAL_DCMI_Start_DMA+0x33a>
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	2201      	movs	r2, #1
 8006e4e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Lock the DCMI peripheral state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	2202      	movs	r2, #2
 8006e56:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Enable DCMI by setting DCMIEN bit */
  __HAL_DCMI_ENABLE(hdcmi);
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	681a      	ldr	r2, [r3, #0]
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006e68:	601a      	str	r2, [r3, #0]

  /* Configure the DCMI Mode */
  hdcmi->Instance->CR &= ~(DCMI_CR_CM);
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	681a      	ldr	r2, [r3, #0]
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	f022 0202 	bic.w	r2, r2, #2
 8006e78:	601a      	str	r2, [r3, #0]
  hdcmi->Instance->CR |= (uint32_t)(DCMI_Mode);
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	6819      	ldr	r1, [r3, #0]
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	68ba      	ldr	r2, [r7, #8]
 8006e86:	430a      	orrs	r2, r1
 8006e88:	601a      	str	r2, [r3, #0]

  /* Set the DMA memory0 conversion complete callback */
  hdcmi->DMA_Handle->XferCpltCallback = DCMI_DMAXferCplt;
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006e8e:	4a99      	ldr	r2, [pc, #612]	; (80070f4 <HAL_DCMI_Start_DMA+0x2d0>)
 8006e90:	661a      	str	r2, [r3, #96]	; 0x60

  /* Set the DMA error callback */
  hdcmi->DMA_Handle->XferErrorCallback = DCMI_DMAError;
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006e96:	4a98      	ldr	r2, [pc, #608]	; (80070f8 <HAL_DCMI_Start_DMA+0x2d4>)
 8006e98:	669a      	str	r2, [r3, #104]	; 0x68

  /* Set the dma abort callback */
  hdcmi->DMA_Handle->XferAbortCallback = NULL;
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006e9e:	2200      	movs	r2, #0
 8006ea0:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset transfer counters value */
  hdcmi->XferCount = 0;
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	2200      	movs	r2, #0
 8006ea6:	639a      	str	r2, [r3, #56]	; 0x38
  hdcmi->XferTransferNumber = 0;
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	2200      	movs	r2, #0
 8006eac:	641a      	str	r2, [r3, #64]	; 0x40
  hdcmi->XferSize = 0;
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	2200      	movs	r2, #0
 8006eb2:	63da      	str	r2, [r3, #60]	; 0x3c
  hdcmi->pBuffPtr = 0;
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	2200      	movs	r2, #0
 8006eb8:	645a      	str	r2, [r3, #68]	; 0x44

  /* Length should be converted to number of bytes */
  tmp_length = tmp_length * 4U;
 8006eba:	6a3b      	ldr	r3, [r7, #32]
 8006ebc:	009b      	lsls	r3, r3, #2
 8006ebe:	623b      	str	r3, [r7, #32]

  if (tmp_length <= 0xFFFFU)
 8006ec0:	6a3b      	ldr	r3, [r7, #32]
 8006ec2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006ec6:	d24c      	bcs.n	8006f62 <HAL_DCMI_Start_DMA+0x13e>
  {
    /* Continuoues Mode */
    /* Enable the DMA Stream */
    if ((hdcmi->DMA_Handle->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006ecc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ece:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d037      	beq.n	8006f46 <HAL_DCMI_Start_DMA+0x122>
    {
      if ((hdcmi->DMA_Handle->LinkedListQueue != 0U) && (hdcmi->DMA_Handle->LinkedListQueue->Head != 0U))
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006eda:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d023      	beq.n	8006f28 <HAL_DCMI_Start_DMA+0x104>
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006ee4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d01d      	beq.n	8006f28 <HAL_DCMI_Start_DMA+0x104>
      {
        /* Set Source , Destination , Length for DMA Xfer */

        /* Set DMA data size           */
        hdcmi->DMA_Handle->LinkedListQueue->Head->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = tmp_length;
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006ef0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	6a3a      	ldr	r2, [r7, #32]
 8006ef6:	609a      	str	r2, [r3, #8]
        /* Set DMA source address      */
        hdcmi->DMA_Handle->LinkedListQueue->Head->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] = \
            (uint32_t)&hdcmi->Instance->DR;
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	f103 0228 	add.w	r2, r3, #40	; 0x28
        hdcmi->DMA_Handle->LinkedListQueue->Head->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] = \
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006f04:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	60da      	str	r2, [r3, #12]
        /* Set DMA destination address */
        hdcmi->DMA_Handle->LinkedListQueue->Head->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = (uint32_t)pData;
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006f0e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	687a      	ldr	r2, [r7, #4]
 8006f14:	611a      	str	r2, [r3, #16]

        status = HAL_DMAEx_List_Start_IT(hdcmi->DMA_Handle);
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006f1a:	4618      	mov	r0, r3
 8006f1c:	f000 fe80 	bl	8007c20 <HAL_DMAEx_List_Start_IT>
 8006f20:	4603      	mov	r3, r0
 8006f22:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006f26:	e0f9      	b.n	800711c <HAL_DCMI_Start_DMA+0x2f8>
      }
      else
      {
        /* Set Error Code */
        hdcmi->ErrorCode = HAL_DCMI_ERROR_DMA;
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	2240      	movs	r2, #64	; 0x40
 8006f2c:	64da      	str	r2, [r3, #76]	; 0x4c
        /* Change DCMI state */
        hdcmi->State = HAL_DCMI_STATE_READY;
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	2201      	movs	r2, #1
 8006f32:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        /* Release Lock */
        __HAL_UNLOCK(hdcmi);
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	2200      	movs	r2, #0
 8006f3a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        /* Return function status */
        status = HAL_ERROR;
 8006f3e:	2301      	movs	r3, #1
 8006f40:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006f44:	e0ea      	b.n	800711c <HAL_DCMI_Start_DMA+0x2f8>
      }
    }
    else
    {
      status = HAL_DMA_Start_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, (uint32_t)pData, tmp_length);
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	3328      	adds	r3, #40	; 0x28
 8006f50:	4619      	mov	r1, r3
 8006f52:	6a3b      	ldr	r3, [r7, #32]
 8006f54:	687a      	ldr	r2, [r7, #4]
 8006f56:	f000 fa5a 	bl	800740e <HAL_DMA_Start_IT>
 8006f5a:	4603      	mov	r3, r0
 8006f5c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006f60:	e0dc      	b.n	800711c <HAL_DCMI_Start_DMA+0x2f8>
  {
    /* Double buffering is used through 2 Nodes
       Calculate the elementary size to be transferred by each node */

    /* Initialize transfer parameters */
    hdcmi->XferCount = 1;
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	2201      	movs	r2, #1
 8006f66:	639a      	str	r2, [r3, #56]	; 0x38
    hdcmi->XferSize = tmp_length;
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	6a3a      	ldr	r2, [r7, #32]
 8006f6c:	63da      	str	r2, [r3, #60]	; 0x3c
    hdcmi->pBuffPtr = pData;
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	687a      	ldr	r2, [r7, #4]
 8006f72:	645a      	str	r2, [r3, #68]	; 0x44

    /* Get the number of buffer */
    while (hdcmi->XferSize > 0xFFFFU)
 8006f74:	e009      	b.n	8006f8a <HAL_DCMI_Start_DMA+0x166>
    {
      hdcmi->XferSize = (hdcmi->XferSize / 2U);
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f7a:	085a      	lsrs	r2, r3, #1
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	63da      	str	r2, [r3, #60]	; 0x3c
      hdcmi->XferCount = hdcmi->XferCount * 2U;
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f84:	005a      	lsls	r2, r3, #1
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	639a      	str	r2, [r3, #56]	; 0x38
    while (hdcmi->XferSize > 0xFFFFU)
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f8e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006f92:	d2f0      	bcs.n	8006f76 <HAL_DCMI_Start_DMA+0x152>
    }

    /* Update DCMI counter  and transfer number*/
    hdcmi->XferCount = (hdcmi->XferCount - 1U);
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f98:	1e5a      	subs	r2, r3, #1
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	639a      	str	r2, [r3, #56]	; 0x38
    hdcmi->XferTransferNumber = hdcmi->XferCount;
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	641a      	str	r2, [r3, #64]	; 0x40

    if ((hdcmi->DMA_Handle->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006faa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006fac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	f000 80a3 	beq.w	80070fc <HAL_DCMI_Start_DMA+0x2d8>
    {
      if ((hdcmi->DMA_Handle->LinkedListQueue != 0U) && (hdcmi->DMA_Handle->LinkedListQueue->Head != 0U))
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006fba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	f000 808a 	beq.w	80070d6 <HAL_DCMI_Start_DMA+0x2b2>
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006fc6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	f000 8083 	beq.w	80070d6 <HAL_DCMI_Start_DMA+0x2b2>
      {
        /* Update first node */

        /* Set DMA Data size */
        hdcmi->DMA_Handle->LinkedListQueue->Head->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = hdcmi->XferSize ;
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006fd4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	68fa      	ldr	r2, [r7, #12]
 8006fda:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8006fdc:	609a      	str	r2, [r3, #8]

        /* Set DMA Source address */
        hdcmi->DMA_Handle->LinkedListQueue->Head->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] = \
            (uint32_t)&hdcmi->Instance->DR;
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	f103 0228 	add.w	r2, r3, #40	; 0x28
        hdcmi->DMA_Handle->LinkedListQueue->Head->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] = \
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006fea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	60da      	str	r2, [r3, #12]

        /* Set DMA Destination address */
        hdcmi->DMA_Handle->LinkedListQueue->Head->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = (uint32_t)pData;
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006ff4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	687a      	ldr	r2, [r7, #4]
 8006ffa:	611a      	str	r2, [r3, #16]

        /* Get CLLR offset */
        cllr_offset = (hdcmi->DMA_Handle->LinkedListQueue->Head->NodeInfo & NODE_CLLR_IDX) >> 8U;
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007000:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	6a1b      	ldr	r3, [r3, #32]
 8007006:	0a1b      	lsrs	r3, r3, #8
 8007008:	f003 0307 	and.w	r3, r3, #7
 800700c:	61fb      	str	r3, [r7, #28]

        /* Update second node */
        if (hdcmi->DMA_Handle->LinkedListQueue->Head->LinkRegisters[cllr_offset] != 0U)
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007012:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	69fa      	ldr	r2, [r7, #28]
 8007018:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800701c:	2b00      	cmp	r3, #0
 800701e:	d04b      	beq.n	80070b8 <HAL_DCMI_Start_DMA+0x294>
        {
          tmp1 = (uint32_t)hdcmi->DMA_Handle->LinkedListQueue->Head ;
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007024:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	61bb      	str	r3, [r7, #24]
          tmp2 = hdcmi->DMA_Handle->LinkedListQueue->Head->LinkRegisters[cllr_offset];
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800702e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	69fa      	ldr	r2, [r7, #28]
 8007034:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007038:	617b      	str	r3, [r7, #20]
          /* Update second node */

          /* Set DMA Data size */
          ((DMA_NodeTypeDef *)((tmp1 & DMA_CLBAR_LBA) + \
 800703a:	69bb      	ldr	r3, [r7, #24]
 800703c:	0c1b      	lsrs	r3, r3, #16
 800703e:	041b      	lsls	r3, r3, #16
                               (tmp2 & DMA_CLLR_LA)))->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = hdcmi->XferSize;
 8007040:	6979      	ldr	r1, [r7, #20]
 8007042:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 8007046:	400a      	ands	r2, r1
          ((DMA_NodeTypeDef *)((tmp1 & DMA_CLBAR_LBA) + \
 8007048:	4313      	orrs	r3, r2
 800704a:	461a      	mov	r2, r3
                               (tmp2 & DMA_CLLR_LA)))->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = hdcmi->XferSize;
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007050:	6093      	str	r3, [r2, #8]

          /* Set DMA Source address */
          ((DMA_NodeTypeDef *)((tmp1 & DMA_CLBAR_LBA) + \
                               (tmp2 & DMA_CLLR_LA)))->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] = \
                                   (uint32_t)&hdcmi->Instance->DR;
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	f103 0028 	add.w	r0, r3, #40	; 0x28
          ((DMA_NodeTypeDef *)((tmp1 & DMA_CLBAR_LBA) + \
 800705a:	69bb      	ldr	r3, [r7, #24]
 800705c:	0c1b      	lsrs	r3, r3, #16
 800705e:	041b      	lsls	r3, r3, #16
                               (tmp2 & DMA_CLLR_LA)))->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] = \
 8007060:	6979      	ldr	r1, [r7, #20]
 8007062:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 8007066:	400a      	ands	r2, r1
          ((DMA_NodeTypeDef *)((tmp1 & DMA_CLBAR_LBA) + \
 8007068:	4313      	orrs	r3, r2
                                   (uint32_t)&hdcmi->Instance->DR;
 800706a:	4602      	mov	r2, r0
                               (tmp2 & DMA_CLLR_LA)))->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] = \
 800706c:	60da      	str	r2, [r3, #12]

          /* Set DMA Destination address */
          ((DMA_NodeTypeDef *)((tmp1 & DMA_CLBAR_LBA) + \
                               (tmp2 & DMA_CLLR_LA)))->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = \
                                   (uint32_t)pData + hdcmi->XferSize;
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
          ((DMA_NodeTypeDef *)((tmp1 & DMA_CLBAR_LBA) + \
 8007072:	69bb      	ldr	r3, [r7, #24]
 8007074:	0c1b      	lsrs	r3, r3, #16
 8007076:	041b      	lsls	r3, r3, #16
                               (tmp2 & DMA_CLLR_LA)))->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = \
 8007078:	6978      	ldr	r0, [r7, #20]
 800707a:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 800707e:	4002      	ands	r2, r0
          ((DMA_NodeTypeDef *)((tmp1 & DMA_CLBAR_LBA) + \
 8007080:	4313      	orrs	r3, r2
 8007082:	461a      	mov	r2, r3
                                   (uint32_t)pData + hdcmi->XferSize;
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	440b      	add	r3, r1
                               (tmp2 & DMA_CLLR_LA)))->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = \
 8007088:	6113      	str	r3, [r2, #16]

          if (HAL_DMAEx_List_Start_IT(hdcmi->DMA_Handle) != HAL_OK)
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800708e:	4618      	mov	r0, r3
 8007090:	f000 fdc6 	bl	8007c20 <HAL_DMAEx_List_Start_IT>
 8007094:	4603      	mov	r3, r0
 8007096:	2b00      	cmp	r3, #0
 8007098:	d03f      	beq.n	800711a <HAL_DCMI_Start_DMA+0x2f6>
          {
            /* Set Error Code */
            hdcmi->ErrorCode = HAL_DCMI_ERROR_DMA;
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	2240      	movs	r2, #64	; 0x40
 800709e:	64da      	str	r2, [r3, #76]	; 0x4c
            /* Change DCMI state */
            hdcmi->State = HAL_DCMI_STATE_READY;
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	2201      	movs	r2, #1
 80070a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
            /* Release Lock */
            __HAL_UNLOCK(hdcmi);
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	2200      	movs	r2, #0
 80070ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
            /* Return function status */
            status = HAL_ERROR;
 80070b0:	2301      	movs	r3, #1
 80070b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (hdcmi->DMA_Handle->LinkedListQueue->Head->LinkRegisters[cllr_offset] != 0U)
 80070b6:	e030      	b.n	800711a <HAL_DCMI_Start_DMA+0x2f6>
          }
        }
        else
        {
          /* Set Error Code */
          hdcmi->ErrorCode = HAL_DCMI_ERROR_DMA;
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	2240      	movs	r2, #64	; 0x40
 80070bc:	64da      	str	r2, [r3, #76]	; 0x4c
          /* Change DCMI state */
          hdcmi->State = HAL_DCMI_STATE_READY;
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	2201      	movs	r2, #1
 80070c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          /* Release Lock */
          __HAL_UNLOCK(hdcmi);
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	2200      	movs	r2, #0
 80070ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          /* Return function status */
          status = HAL_ERROR;
 80070ce:	2301      	movs	r3, #1
 80070d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (hdcmi->DMA_Handle->LinkedListQueue->Head->LinkRegisters[cllr_offset] != 0U)
 80070d4:	e021      	b.n	800711a <HAL_DCMI_Start_DMA+0x2f6>
        }
      }
      else
      {
        /* Set Error Code */
        hdcmi->ErrorCode = HAL_DCMI_ERROR_DMA;
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	2240      	movs	r2, #64	; 0x40
 80070da:	64da      	str	r2, [r3, #76]	; 0x4c
        /* Change DCMI state */
        hdcmi->State = HAL_DCMI_STATE_READY;
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	2201      	movs	r2, #1
 80070e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        /* Release Lock */
        __HAL_UNLOCK(hdcmi);
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	2200      	movs	r2, #0
 80070e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        /* Return function status */
        status = HAL_ERROR;
 80070ec:	2301      	movs	r3, #1
 80070ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80070f2:	e013      	b.n	800711c <HAL_DCMI_Start_DMA+0x2f8>
 80070f4:	080072c9 	.word	0x080072c9
 80070f8:	080073d5 	.word	0x080073d5
      }
    }
    else
    {
      /* Set Error Code */
      hdcmi->ErrorCode = HAL_DCMI_ERROR_DMA;
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	2240      	movs	r2, #64	; 0x40
 8007100:	64da      	str	r2, [r3, #76]	; 0x4c
      /* Change DCMI state */
      hdcmi->State = HAL_DCMI_STATE_READY;
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	2201      	movs	r2, #1
 8007106:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      /* Release Lock */
      __HAL_UNLOCK(hdcmi);
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	2200      	movs	r2, #0
 800710e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      /* Return function status */
      status = HAL_ERROR;
 8007112:	2301      	movs	r3, #1
 8007114:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007118:	e000      	b.n	800711c <HAL_DCMI_Start_DMA+0x2f8>
        if (hdcmi->DMA_Handle->LinkedListQueue->Head->LinkRegisters[cllr_offset] != 0U)
 800711a:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 800711c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007120:	2b00      	cmp	r3, #0
 8007122:	d10c      	bne.n	800713e <HAL_DCMI_Start_DMA+0x31a>
  {
    /* Enable Capture */
    hdcmi->Instance->CR |= DCMI_CR_CAPTURE;
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	681a      	ldr	r2, [r3, #0]
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	f042 0201 	orr.w	r2, r2, #1
 8007132:	601a      	str	r2, [r3, #0]

    /* Release Lock */
    __HAL_UNLOCK(hdcmi);
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	2200      	movs	r2, #0
 8007138:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 800713c:	e00d      	b.n	800715a <HAL_DCMI_Start_DMA+0x336>
  }
  else
  {
    /* Set Error Code */
    hdcmi->ErrorCode = HAL_DCMI_ERROR_DMA;
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	2240      	movs	r2, #64	; 0x40
 8007142:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_READY;
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	2201      	movs	r2, #1
 8007148:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    /* Release Lock */
    __HAL_UNLOCK(hdcmi);
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	2200      	movs	r2, #0
 8007150:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    /* Return function status */
    status = HAL_ERROR;
 8007154:	2301      	movs	r3, #1
 8007156:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Return function status */
  return status;
 800715a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800715e:	4618      	mov	r0, r3
 8007160:	3728      	adds	r7, #40	; 0x28
 8007162:	46bd      	mov	sp, r7
 8007164:	bd80      	pop	{r7, pc}
 8007166:	bf00      	nop

08007168 <HAL_DCMI_IRQHandler>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for the DCMI.
  * @retval None
  */
void HAL_DCMI_IRQHandler(DCMI_HandleTypeDef *hdcmi)
{
 8007168:	b580      	push	{r7, lr}
 800716a:	b084      	sub	sp, #16
 800716c:	af00      	add	r7, sp, #0
 800716e:	6078      	str	r0, [r7, #4]
  uint32_t isr_value = READ_REG(hdcmi->Instance->MISR);
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	691b      	ldr	r3, [r3, #16]
 8007176:	60fb      	str	r3, [r7, #12]

  /* Synchronization error interrupt management *******************************/
  if ((isr_value & DCMI_FLAG_ERRRI) == DCMI_FLAG_ERRRI)
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	f003 0304 	and.w	r3, r3, #4
 800717e:	2b00      	cmp	r3, #0
 8007180:	d01e      	beq.n	80071c0 <HAL_DCMI_IRQHandler+0x58>
  {
    /* Clear the Synchronization error flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_ERRRI);
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	2204      	movs	r2, #4
 8007188:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_SYNC;
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800718e:	f043 0202 	orr.w	r2, r3, #2
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	2204      	movs	r2, #4
 800719a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Set the synchronization error callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80071a2:	4a39      	ldr	r2, [pc, #228]	; (8007288 <HAL_DCMI_IRQHandler+0x120>)
 80071a4:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Abort the DMA Transfer */
    if (HAL_DMA_Abort_IT(hdcmi->DMA_Handle) != HAL_OK)
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80071aa:	4618      	mov	r0, r3
 80071ac:	f000 fa0b 	bl	80075c6 <HAL_DMA_Abort_IT>
 80071b0:	4603      	mov	r3, r0
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d004      	beq.n	80071c0 <HAL_DCMI_IRQHandler+0x58>
    {
      DCMI_DMAError(hdcmi->DMA_Handle);
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80071ba:	4618      	mov	r0, r3
 80071bc:	f000 f90a 	bl	80073d4 <DCMI_DMAError>
    }
  }
  /* Overflow interrupt management ********************************************/
  if ((isr_value & DCMI_FLAG_OVRRI) == DCMI_FLAG_OVRRI)
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	f003 0302 	and.w	r3, r3, #2
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d01e      	beq.n	8007208 <HAL_DCMI_IRQHandler+0xa0>
  {
    /* Clear the Overflow flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_OVRRI);
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	2202      	movs	r2, #2
 80071d0:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_OVR;
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80071d6:	f043 0201 	orr.w	r2, r3, #1
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	2204      	movs	r2, #4
 80071e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Set the overflow callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80071ea:	4a27      	ldr	r2, [pc, #156]	; (8007288 <HAL_DCMI_IRQHandler+0x120>)
 80071ec:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Abort the DMA Transfer */
    if (HAL_DMA_Abort_IT(hdcmi->DMA_Handle) != HAL_OK)
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80071f2:	4618      	mov	r0, r3
 80071f4:	f000 f9e7 	bl	80075c6 <HAL_DMA_Abort_IT>
 80071f8:	4603      	mov	r3, r0
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d004      	beq.n	8007208 <HAL_DCMI_IRQHandler+0xa0>
    {
      DCMI_DMAError(hdcmi->DMA_Handle);
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007202:	4618      	mov	r0, r3
 8007204:	f000 f8e6 	bl	80073d4 <DCMI_DMAError>
    }
  }
  /* Line Interrupt management ************************************************/
  if ((isr_value & DCMI_FLAG_LINERI) == DCMI_FLAG_LINERI)
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	f003 0310 	and.w	r3, r3, #16
 800720e:	2b00      	cmp	r3, #0
 8007210:	d006      	beq.n	8007220 <HAL_DCMI_IRQHandler+0xb8>
  {
    /* Clear the Line interrupt flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_LINERI);
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	2210      	movs	r2, #16
 8007218:	615a      	str	r2, [r3, #20]
    /* Line interrupt Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI line event callback*/
    hdcmi->LineEventCallback(hdcmi);
#else
    HAL_DCMI_LineEventCallback(hdcmi);
 800721a:	6878      	ldr	r0, [r7, #4]
 800721c:	f000 f840 	bl	80072a0 <HAL_DCMI_LineEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
  /* VSYNC interrupt management ***********************************************/
  if ((isr_value & DCMI_FLAG_VSYNCRI) == DCMI_FLAG_VSYNCRI)
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	f003 0308 	and.w	r3, r3, #8
 8007226:	2b00      	cmp	r3, #0
 8007228:	d006      	beq.n	8007238 <HAL_DCMI_IRQHandler+0xd0>
  {
    /* Clear the VSYNC flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_VSYNCRI);
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	2208      	movs	r2, #8
 8007230:	615a      	str	r2, [r3, #20]
    /* VSYNC Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI vsync event callback*/
    hdcmi->VsyncEventCallback(hdcmi);
#else
    HAL_DCMI_VsyncEventCallback(hdcmi);
 8007232:	6878      	ldr	r0, [r7, #4]
 8007234:	f000 f83e 	bl	80072b4 <HAL_DCMI_VsyncEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
  /* FRAME interrupt management ***********************************************/
  if ((isr_value & DCMI_FLAG_FRAMERI) == DCMI_FLAG_FRAMERI)
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	f003 0301 	and.w	r3, r3, #1
 800723e:	2b00      	cmp	r3, #0
 8007240:	d01d      	beq.n	800727e <HAL_DCMI_IRQHandler+0x116>
  {
    /* When snapshot mode, disable Vsync, Error and Overrun interrupts */
    if ((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	f003 0302 	and.w	r3, r3, #2
 800724c:	2b02      	cmp	r3, #2
 800724e:	d107      	bne.n	8007260 <HAL_DCMI_IRQHandler+0xf8>
    {
      /* Disable the Line, Vsync, Error and Overrun interrupts */
      __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	68da      	ldr	r2, [r3, #12]
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	f022 021e 	bic.w	r2, r2, #30
 800725e:	60da      	str	r2, [r3, #12]
    }

    /* Disable the Frame interrupt */
    __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_FRAME);
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	68da      	ldr	r2, [r3, #12]
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	f022 0201 	bic.w	r2, r2, #1
 800726e:	60da      	str	r2, [r3, #12]

    /* Clear the End of Frame flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_FRAMERI);
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	2201      	movs	r2, #1
 8007276:	615a      	str	r2, [r3, #20]
    /* Frame Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI frame event callback*/
    hdcmi->FrameEventCallback(hdcmi);
#else
    HAL_DCMI_FrameEventCallback(hdcmi);
 8007278:	6878      	ldr	r0, [r7, #4]
 800727a:	f7fa f9a3 	bl	80015c4 <HAL_DCMI_FrameEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
}
 800727e:	bf00      	nop
 8007280:	3710      	adds	r7, #16
 8007282:	46bd      	mov	sp, r7
 8007284:	bd80      	pop	{r7, pc}
 8007286:	bf00      	nop
 8007288:	080073d5 	.word	0x080073d5

0800728c <HAL_DCMI_ErrorCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_ErrorCallback(DCMI_HandleTypeDef *hdcmi)
{
 800728c:	b480      	push	{r7}
 800728e:	b083      	sub	sp, #12
 8007290:	af00      	add	r7, sp, #0
 8007292:	6078      	str	r0, [r7, #4]
  UNUSED(hdcmi);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_ErrorCallback could be implemented in the user file
   */
}
 8007294:	bf00      	nop
 8007296:	370c      	adds	r7, #12
 8007298:	46bd      	mov	sp, r7
 800729a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800729e:	4770      	bx	lr

080072a0 <HAL_DCMI_LineEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_LineEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 80072a0:	b480      	push	{r7}
 80072a2:	b083      	sub	sp, #12
 80072a4:	af00      	add	r7, sp, #0
 80072a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_LineEventCallback could be implemented in the user file
   */
}
 80072a8:	bf00      	nop
 80072aa:	370c      	adds	r7, #12
 80072ac:	46bd      	mov	sp, r7
 80072ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b2:	4770      	bx	lr

080072b4 <HAL_DCMI_VsyncEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_VsyncEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 80072b4:	b480      	push	{r7}
 80072b6:	b083      	sub	sp, #12
 80072b8:	af00      	add	r7, sp, #0
 80072ba:	6078      	str	r0, [r7, #4]
  UNUSED(hdcmi);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_VsyncEventCallback could be implemented in the user file
   */
}
 80072bc:	bf00      	nop
 80072be:	370c      	adds	r7, #12
 80072c0:	46bd      	mov	sp, r7
 80072c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c6:	4770      	bx	lr

080072c8 <DCMI_DMAXferCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 80072c8:	b480      	push	{r7}
 80072ca:	b08b      	sub	sp, #44	; 0x2c
 80072cc:	af00      	add	r7, sp, #0
 80072ce:	6078      	str	r0, [r7, #4]

  DCMI_HandleTypeDef *hdcmi = (DCMI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80072d4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t transfernumber;
  uint32_t transfercount;
  uint32_t transfersize ;

  /* Update Nodes destinations */
  if (hdcmi->XferSize != 0U)
 80072d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d061      	beq.n	80073a2 <DCMI_DMAXferCplt+0xda>
  {
    pbuff          = hdcmi->pBuffPtr;
 80072de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80072e2:	623b      	str	r3, [r7, #32]
    transfernumber = hdcmi->XferTransferNumber;
 80072e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072e8:	61fb      	str	r3, [r7, #28]
    transfercount  = hdcmi->XferCount;
 80072ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072ee:	61bb      	str	r3, [r7, #24]
    transfersize   = hdcmi->XferSize;
 80072f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072f4:	617b      	str	r3, [r7, #20]

    tmp1 = hdcmi->DMA_Handle->Instance->CLLR & DMA_CLLR_LA;
 80072f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 80072fe:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 8007302:	4013      	ands	r3, r2
 8007304:	613b      	str	r3, [r7, #16]
    tmp2 = hdcmi->DMA_Handle->Instance->CLBAR & DMA_CLBAR_LBA;
 8007306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007308:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	0c1b      	lsrs	r3, r3, #16
 8007310:	041b      	lsls	r3, r3, #16
 8007312:	60fb      	str	r3, [r7, #12]
    pnode = (DMA_NodeTypeDef *)(uint32_t)(tmp1 | tmp2);
 8007314:	693a      	ldr	r2, [r7, #16]
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	4313      	orrs	r3, r2
 800731a:	60bb      	str	r3, [r7, #8]

    if (hdcmi->XferCount > 1U)
 800731c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800731e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007320:	2b01      	cmp	r3, #1
 8007322:	d910      	bls.n	8007346 <DCMI_DMAXferCplt+0x7e>
    {
      pnode->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = pbuff + ((transfernumber - transfercount + 2U) * transfersize);
 8007324:	69fa      	ldr	r2, [r7, #28]
 8007326:	69bb      	ldr	r3, [r7, #24]
 8007328:	1ad3      	subs	r3, r2, r3
 800732a:	3302      	adds	r3, #2
 800732c:	697a      	ldr	r2, [r7, #20]
 800732e:	fb03 f202 	mul.w	r2, r3, r2
 8007332:	6a3b      	ldr	r3, [r7, #32]
 8007334:	441a      	add	r2, r3
 8007336:	68bb      	ldr	r3, [r7, #8]
 8007338:	611a      	str	r2, [r3, #16]
      hdcmi->XferCount--;
 800733a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800733c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800733e:	1e5a      	subs	r2, r3, #1
 8007340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007342:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
    {
      hdcmi->State = HAL_DCMI_STATE_READY;
    }
  }
}
 8007344:	e040      	b.n	80073c8 <DCMI_DMAXferCplt+0x100>
    else if (hdcmi->XferCount == 1U)
 8007346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007348:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800734a:	2b01      	cmp	r3, #1
 800734c:	d109      	bne.n	8007362 <DCMI_DMAXferCplt+0x9a>
      pnode->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = hdcmi->pBuffPtr;
 800734e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007350:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007352:	68bb      	ldr	r3, [r7, #8]
 8007354:	611a      	str	r2, [r3, #16]
      hdcmi->XferCount--;
 8007356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007358:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800735a:	1e5a      	subs	r2, r3, #1
 800735c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800735e:	639a      	str	r2, [r3, #56]	; 0x38
}
 8007360:	e032      	b.n	80073c8 <DCMI_DMAXferCplt+0x100>
      pnode->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = hdcmi->pBuffPtr + hdcmi->XferSize;
 8007362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007364:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007368:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800736a:	441a      	add	r2, r3
 800736c:	68bb      	ldr	r3, [r7, #8]
 800736e:	611a      	str	r2, [r3, #16]
      if ((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_CONTINUOUS)
 8007370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	f003 0302 	and.w	r3, r3, #2
 800737a:	2b00      	cmp	r3, #0
 800737c:	d104      	bne.n	8007388 <DCMI_DMAXferCplt+0xc0>
        hdcmi->XferCount = hdcmi->XferTransferNumber ;
 800737e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007380:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007384:	639a      	str	r2, [r3, #56]	; 0x38
 8007386:	e003      	b.n	8007390 <DCMI_DMAXferCplt+0xc8>
        hdcmi->State = HAL_DCMI_STATE_READY;
 8007388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800738a:	2201      	movs	r2, #1
 800738c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_FRAME);
 8007390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	68da      	ldr	r2, [r3, #12]
 8007396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	f042 0201 	orr.w	r2, r2, #1
 800739e:	60da      	str	r2, [r3, #12]
}
 80073a0:	e012      	b.n	80073c8 <DCMI_DMAXferCplt+0x100>
    __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_FRAME);
 80073a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	68da      	ldr	r2, [r3, #12]
 80073a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	f042 0201 	orr.w	r2, r2, #1
 80073b0:	60da      	str	r2, [r3, #12]
    if ((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 80073b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	f003 0302 	and.w	r3, r3, #2
 80073bc:	2b02      	cmp	r3, #2
 80073be:	d103      	bne.n	80073c8 <DCMI_DMAXferCplt+0x100>
      hdcmi->State = HAL_DCMI_STATE_READY;
 80073c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073c2:	2201      	movs	r2, #1
 80073c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
}
 80073c8:	bf00      	nop
 80073ca:	372c      	adds	r7, #44	; 0x2c
 80073cc:	46bd      	mov	sp, r7
 80073ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d2:	4770      	bx	lr

080073d4 <DCMI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAError(DMA_HandleTypeDef *hdma)
{
 80073d4:	b580      	push	{r7, lr}
 80073d6:	b084      	sub	sp, #16
 80073d8:	af00      	add	r7, sp, #0
 80073da:	6078      	str	r0, [r7, #4]
  DCMI_HandleTypeDef *hdcmi = (DCMI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80073e0:	60fb      	str	r3, [r7, #12]

  if (hdcmi->DMA_Handle->ErrorCode != HAL_DMA_ERROR_ULE)
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80073e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80073e8:	2b02      	cmp	r3, #2
 80073ea:	d009      	beq.n	8007400 <DCMI_DMAError+0x2c>
  {
    /* Initialize the DCMI state*/
    hdcmi->State = HAL_DCMI_STATE_READY;
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	2201      	movs	r2, #1
 80073f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Set DCMI Error Code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_DMA;
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80073f8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	64da      	str	r2, [r3, #76]	; 0x4c
  /* DCMI error Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
  /*Call registered DCMI error callback*/
  hdcmi->ErrorCallback(hdcmi);
#else
  HAL_DCMI_ErrorCallback(hdcmi);
 8007400:	68f8      	ldr	r0, [r7, #12]
 8007402:	f7ff ff43 	bl	800728c <HAL_DCMI_ErrorCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */

}
 8007406:	bf00      	nop
 8007408:	3710      	adds	r7, #16
 800740a:	46bd      	mov	sp, r7
 800740c:	bd80      	pop	{r7, pc}

0800740e <HAL_DMA_Start_IT>:
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *const hdma,
                                   uint32_t SrcAddress,
                                   uint32_t DstAddress,
                                   uint32_t SrcDataSize)
{
 800740e:	b580      	push	{r7, lr}
 8007410:	b084      	sub	sp, #16
 8007412:	af00      	add	r7, sp, #0
 8007414:	60f8      	str	r0, [r7, #12]
 8007416:	60b9      	str	r1, [r7, #8]
 8007418:	607a      	str	r2, [r7, #4]
 800741a:	603b      	str	r3, [r7, #0]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	2b00      	cmp	r3, #0
 8007420:	d101      	bne.n	8007426 <HAL_DMA_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007422:	2301      	movs	r3, #1
 8007424:	e04f      	b.n	80074c6 <HAL_DMA_Start_IT+0xb8>

  /* Check the parameters */
  assert_param(IS_DMA_BLOCK_SIZE(SrcDataSize));

  /* Process locked */
  __HAL_LOCK(hdma);
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800742c:	2b01      	cmp	r3, #1
 800742e:	d101      	bne.n	8007434 <HAL_DMA_Start_IT+0x26>
 8007430:	2302      	movs	r3, #2
 8007432:	e048      	b.n	80074c6 <HAL_DMA_Start_IT+0xb8>
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	2201      	movs	r2, #1
 8007438:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  /* Check DMA channel state */
  if (hdma->State == HAL_DMA_STATE_READY)
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8007442:	b2db      	uxtb	r3, r3
 8007444:	2b01      	cmp	r3, #1
 8007446:	d136      	bne.n	80074b6 <HAL_DMA_Start_IT+0xa8>
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	2202      	movs	r2, #2
 800744c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	2200      	movs	r2, #0
 8007454:	659a      	str	r2, [r3, #88]	; 0x58

    /* Configure the source address, destination address, the data size and clear flags */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, SrcDataSize);
 8007456:	683b      	ldr	r3, [r7, #0]
 8007458:	687a      	ldr	r2, [r7, #4]
 800745a:	68b9      	ldr	r1, [r7, #8]
 800745c:	68f8      	ldr	r0, [r7, #12]
 800745e:	f000 fa8b 	bl	8007978 <DMA_SetConfig>

    /* Enable common interrupts: Transfer Complete and Transfer Errors ITs */
    __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_DTE | DMA_IT_ULE | DMA_IT_USE | DMA_IT_TO));
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	695a      	ldr	r2, [r3, #20]
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	f442 42ba 	orr.w	r2, r2, #23808	; 0x5d00
 8007470:	615a      	str	r2, [r3, #20]

    /* Check half transfer complete callback */
    if (hdma->XferHalfCpltCallback != NULL)
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007476:	2b00      	cmp	r3, #0
 8007478:	d007      	beq.n	800748a <HAL_DMA_Start_IT+0x7c>
    {
      /* If Half Transfer complete callback is set, enable the corresponding IT */
      __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	695a      	ldr	r2, [r3, #20]
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007488:	615a      	str	r2, [r3, #20]
    }

    /* Check Half suspend callback */
    if (hdma->XferSuspendCallback != NULL)
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800748e:	2b00      	cmp	r3, #0
 8007490:	d007      	beq.n	80074a2 <HAL_DMA_Start_IT+0x94>
    {
      /* If Transfer suspend callback is set, enable the corresponding IT */
      __HAL_DMA_ENABLE_IT(hdma, DMA_IT_SUSP);
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	695a      	ldr	r2, [r3, #20]
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80074a0:	615a      	str	r2, [r3, #20]
    }

    /* Enable DMA channel */
    __HAL_DMA_ENABLE(hdma);
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	695a      	ldr	r2, [r3, #20]
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	f042 0201 	orr.w	r2, r2, #1
 80074b0:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hdma);

    return HAL_ERROR;
  }

  return HAL_OK;
 80074b2:	2300      	movs	r3, #0
 80074b4:	e007      	b.n	80074c6 <HAL_DMA_Start_IT+0xb8>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	2240      	movs	r2, #64	; 0x40
 80074ba:	659a      	str	r2, [r3, #88]	; 0x58
    __HAL_UNLOCK(hdma);
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	2200      	movs	r2, #0
 80074c0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    return HAL_ERROR;
 80074c4:	2301      	movs	r3, #1
}
 80074c6:	4618      	mov	r0, r3
 80074c8:	3710      	adds	r7, #16
 80074ca:	46bd      	mov	sp, r7
 80074cc:	bd80      	pop	{r7, pc}

080074ce <HAL_DMA_Abort>:
  *         is suspended while a data transfer is on-going, the current data will be transferred and the channel will be
  *         effectively suspended only after the transfer of any on-going data is finished.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *const hdma)
{
 80074ce:	b580      	push	{r7, lr}
 80074d0:	b084      	sub	sp, #16
 80074d2:	af00      	add	r7, sp, #0
 80074d4:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart =  HAL_GetTick();
 80074d6:	f7ff fa33 	bl	8006940 <HAL_GetTick>
 80074da:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d101      	bne.n	80074e6 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80074e2:	2301      	movs	r3, #1
 80074e4:	e06b      	b.n	80075be <HAL_DMA_Abort+0xf0>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80074ec:	b2db      	uxtb	r3, r3
 80074ee:	2b02      	cmp	r3, #2
 80074f0:	d008      	beq.n	8007504 <HAL_DMA_Abort+0x36>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	2220      	movs	r2, #32
 80074f6:	659a      	str	r2, [r3, #88]	; 0x58

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	2200      	movs	r2, #0
 80074fc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

    return HAL_ERROR;
 8007500:	2301      	movs	r3, #1
 8007502:	e05c      	b.n	80075be <HAL_DMA_Abort+0xf0>
  }
  else
  {
    /* Suspend the channel */
    hdma->Instance->CCR |= DMA_CCR_SUSP;
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	695a      	ldr	r2, [r3, #20]
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	f042 0204 	orr.w	r2, r2, #4
 8007512:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_SUSPEND;
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	2205      	movs	r2, #5
 8007518:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Check if the DMA Channel is suspended */
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 800751c:	e020      	b.n	8007560 <HAL_DMA_Abort+0x92>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 800751e:	f7ff fa0f 	bl	8006940 <HAL_GetTick>
 8007522:	4602      	mov	r2, r0
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	1ad3      	subs	r3, r2, r3
 8007528:	2b05      	cmp	r3, #5
 800752a:	d919      	bls.n	8007560 <HAL_DMA_Abort+0x92>
      {
        /* Update the DMA channel error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TIMEOUT;
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007530:	f043 0210 	orr.w	r2, r3, #16
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	659a      	str	r2, [r3, #88]	; 0x58

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	2203      	movs	r2, #3
 800753c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007544:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007548:	2b00      	cmp	r3, #0
 800754a:	d003      	beq.n	8007554 <HAL_DMA_Abort+0x86>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007550:	2201      	movs	r2, #1
 8007552:	731a      	strb	r2, [r3, #12]
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	2200      	movs	r2, #0
 8007558:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        return HAL_ERROR;
 800755c:	2301      	movs	r3, #1
 800755e:	e02e      	b.n	80075be <HAL_DMA_Abort+0xf0>
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	691b      	ldr	r3, [r3, #16]
 8007566:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800756a:	2b00      	cmp	r3, #0
 800756c:	d0d7      	beq.n	800751e <HAL_DMA_Abort+0x50>
      }
    }

    /* Reset the channel */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	695a      	ldr	r2, [r3, #20]
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	f042 0202 	orr.w	r2, r2, #2
 800757c:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	2204      	movs	r2, #4
 8007582:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Clear all status flags */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	f44f 42fe 	mov.w	r2, #32512	; 0x7f00
 800758e:	60da      	str	r2, [r3, #12]
                                DMA_FLAG_TO));

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	2201      	movs	r2, #1
 8007594:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800759c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d007      	beq.n	80075b4 <HAL_DMA_Abort+0xe6>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80075a8:	2201      	movs	r2, #1
 80075aa:	731a      	strb	r2, [r3, #12]

      /* Clear remaining data size to ensure loading linked-list from memory next start */
      hdma->Instance->CBR1 = 0U;
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	2200      	movs	r2, #0
 80075b2:	649a      	str	r2, [r3, #72]	; 0x48
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	2200      	movs	r2, #0
 80075b8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80075bc:	2300      	movs	r3, #0
}
 80075be:	4618      	mov	r0, r3
 80075c0:	3710      	adds	r7, #16
 80075c2:	46bd      	mov	sp, r7
 80075c4:	bd80      	pop	{r7, pc}

080075c6 <HAL_DMA_Abort_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *const hdma)
{
 80075c6:	b480      	push	{r7}
 80075c8:	b083      	sub	sp, #12
 80075ca:	af00      	add	r7, sp, #0
 80075cc:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d101      	bne.n	80075d8 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80075d4:	2301      	movs	r3, #1
 80075d6:	e019      	b.n	800760c <HAL_DMA_Abort_IT+0x46>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80075de:	b2db      	uxtb	r3, r3
 80075e0:	2b02      	cmp	r3, #2
 80075e2:	d004      	beq.n	80075ee <HAL_DMA_Abort_IT+0x28>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	2220      	movs	r2, #32
 80075e8:	659a      	str	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 80075ea:	2301      	movs	r3, #1
 80075ec:	e00e      	b.n	800760c <HAL_DMA_Abort_IT+0x46>
  }
  else
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	2204      	movs	r2, #4
 80075f2:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Suspend the channel and activate suspend interrupt */
    hdma->Instance->CCR |= (DMA_CCR_SUSP | DMA_CCR_SUSPIE);
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	695b      	ldr	r3, [r3, #20]
 80075fc:	687a      	ldr	r2, [r7, #4]
 80075fe:	6812      	ldr	r2, [r2, #0]
 8007600:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8007604:	f043 0304 	orr.w	r3, r3, #4
 8007608:	6153      	str	r3, [r2, #20]
  }

  return HAL_OK;
 800760a:	2300      	movs	r3, #0
}
 800760c:	4618      	mov	r0, r3
 800760e:	370c      	adds	r7, #12
 8007610:	46bd      	mov	sp, r7
 8007612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007616:	4770      	bx	lr

08007618 <HAL_DMA_IRQHandler>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *const hdma)
{
 8007618:	b580      	push	{r7, lr}
 800761a:	b084      	sub	sp, #16
 800761c:	af00      	add	r7, sp, #0
 800761e:	6078      	str	r0, [r7, #4]
  DMA_TypeDef *p_dma_instance = GET_DMA_INSTANCE(hdma);
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8007628:	f023 030f 	bic.w	r3, r3, #15
 800762c:	60fb      	str	r3, [r7, #12]
  uint32_t global_it_flag =  1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007636:	3b50      	subs	r3, #80	; 0x50
 8007638:	09db      	lsrs	r3, r3, #7
 800763a:	f003 031f 	and.w	r3, r3, #31
 800763e:	2201      	movs	r2, #1
 8007640:	fa02 f303 	lsl.w	r3, r2, r3
 8007644:	60bb      	str	r3, [r7, #8]

  /* Global Interrupt Flag management *********************************************************************************/
  if (IS_DMA_GLOBAL_ACTIVE_FLAG(p_dma_instance, global_it_flag) == 0U)
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	68da      	ldr	r2, [r3, #12]
 800764a:	68bb      	ldr	r3, [r7, #8]
 800764c:	4013      	ands	r3, r2
 800764e:	2b00      	cmp	r3, #0
 8007650:	f000 8150 	beq.w	80078f4 <HAL_DMA_IRQHandler+0x2dc>
  {
    return; /* the global interrupt flag for the current channel is down , nothing to do */
  }

  /* Data Transfer Error Interrupt management *************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_DTE) != 0U))
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	691b      	ldr	r3, [r3, #16]
 800765a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800765e:	2b00      	cmp	r3, #0
 8007660:	d011      	beq.n	8007686 <HAL_DMA_IRQHandler+0x6e>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DTE) != 0U)
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	695b      	ldr	r3, [r3, #20]
 8007668:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800766c:	2b00      	cmp	r3, #0
 800766e:	d00a      	beq.n	8007686 <HAL_DMA_IRQHandler+0x6e>
    {
      /* Clear the transfer error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_DTE);
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007678:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DTE;
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800767e:	f043 0201 	orr.w	r2, r3, #1
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }

  /* Update Linked-list Error Interrupt management ********************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_ULE) != 0U))
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	691b      	ldr	r3, [r3, #16]
 800768c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007690:	2b00      	cmp	r3, #0
 8007692:	d011      	beq.n	80076b8 <HAL_DMA_IRQHandler+0xa0>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_ULE) != 0U)
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	695b      	ldr	r3, [r3, #20]
 800769a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d00a      	beq.n	80076b8 <HAL_DMA_IRQHandler+0xa0>
    {
      /* Clear the update linked-list error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_ULE);
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80076aa:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_ULE;
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80076b0:	f043 0202 	orr.w	r2, r3, #2
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }

  /* User Setting Error Interrupt management **************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_USE) != 0U))
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	691b      	ldr	r3, [r3, #16]
 80076be:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d011      	beq.n	80076ea <HAL_DMA_IRQHandler+0xd2>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_USE) != 0U)
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	695b      	ldr	r3, [r3, #20]
 80076cc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d00a      	beq.n	80076ea <HAL_DMA_IRQHandler+0xd2>
    {
      /* Clear the user setting error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_USE);
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80076dc:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_USE;
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80076e2:	f043 0204 	orr.w	r2, r3, #4
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }

  /* Trigger Overrun Interrupt management *****************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TO) != 0U))
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	691b      	ldr	r3, [r3, #16]
 80076f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d011      	beq.n	800771c <HAL_DMA_IRQHandler+0x104>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TO) != 0U)
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	695b      	ldr	r3, [r3, #20]
 80076fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007702:	2b00      	cmp	r3, #0
 8007704:	d00a      	beq.n	800771c <HAL_DMA_IRQHandler+0x104>
    {
      /* Clear the trigger overrun flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_TO);
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800770e:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TO;
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007714:	f043 0208 	orr.w	r2, r3, #8
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }

  /* Half Transfer Complete Interrupt management **********************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_HT) != 0U))
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	691b      	ldr	r3, [r3, #16]
 8007722:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007726:	2b00      	cmp	r3, #0
 8007728:	d013      	beq.n	8007752 <HAL_DMA_IRQHandler+0x13a>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	695b      	ldr	r3, [r3, #20]
 8007730:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007734:	2b00      	cmp	r3, #0
 8007736:	d00c      	beq.n	8007752 <HAL_DMA_IRQHandler+0x13a>
    {
      /* Clear the half transfer flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_HT);
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007740:	60da      	str	r2, [r3, #12]

      /* Check half transfer complete callback */
      if (hdma->XferHalfCpltCallback != NULL)
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007746:	2b00      	cmp	r3, #0
 8007748:	d003      	beq.n	8007752 <HAL_DMA_IRQHandler+0x13a>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800774e:	6878      	ldr	r0, [r7, #4]
 8007750:	4798      	blx	r3
      }
    }
  }

  /* Suspend Transfer Interrupt management ****************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_SUSP) != 0U))
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	691b      	ldr	r3, [r3, #16]
 8007758:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800775c:	2b00      	cmp	r3, #0
 800775e:	d055      	beq.n	800780c <HAL_DMA_IRQHandler+0x1f4>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_SUSP) != 0U)
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	695b      	ldr	r3, [r3, #20]
 8007766:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800776a:	2b00      	cmp	r3, #0
 800776c:	d04e      	beq.n	800780c <HAL_DMA_IRQHandler+0x1f4>
    {
      /* Clear the block transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_SUSP);
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8007776:	60da      	str	r2, [r3, #12]

      /* Check DMA channel state */
      if (hdma->State == HAL_DMA_STATE_ABORT)
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800777e:	b2db      	uxtb	r3, r3
 8007780:	2b04      	cmp	r3, #4
 8007782:	d137      	bne.n	80077f4 <HAL_DMA_IRQHandler+0x1dc>
      {
        /* Disable the suspend transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_SUSP);
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	695a      	ldr	r2, [r3, #20]
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007792:	615a      	str	r2, [r3, #20]

        /* Reset the channel internal state and reset the FIFO */
        hdma->Instance->CCR |= DMA_CCR_RESET;
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	695a      	ldr	r2, [r3, #20]
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	f042 0202 	orr.w	r2, r2, #2
 80077a2:	615a      	str	r2, [r3, #20]

        if ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	695b      	ldr	r3, [r3, #20]
 80077aa:	f003 0301 	and.w	r3, r3, #1
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d004      	beq.n	80077bc <HAL_DMA_IRQHandler+0x1a4>
        {
          /* Update the DMA channel state */
          hdma->State = HAL_DMA_STATE_ERROR;
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	2203      	movs	r2, #3
 80077b6:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 80077ba:	e003      	b.n	80077c4 <HAL_DMA_IRQHandler+0x1ac>
        }
        else
        {
          /* Update the DMA channel state */
          hdma->State = HAL_DMA_STATE_READY;
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	2201      	movs	r2, #1
 80077c0:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
        }

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80077c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d003      	beq.n	80077d8 <HAL_DMA_IRQHandler+0x1c0>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80077d4:	2201      	movs	r2, #1
 80077d6:	731a      	strb	r2, [r3, #12]
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	2200      	movs	r2, #0
 80077dc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        /* Check transfer abort callback */
        if (hdma->XferAbortCallback != NULL)
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	f000 8087 	beq.w	80078f8 <HAL_DMA_IRQHandler+0x2e0>
        {
          /* Transfer abort callback */
          hdma->XferAbortCallback(hdma);
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80077ee:	6878      	ldr	r0, [r7, #4]
 80077f0:	4798      	blx	r3
        }

        return;
 80077f2:	e081      	b.n	80078f8 <HAL_DMA_IRQHandler+0x2e0>
      }
      else
      {
        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_SUSPEND;
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	2205      	movs	r2, #5
 80077f8:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

        /* Check transfer suspend callback */
        if (hdma->XferSuspendCallback != NULL)
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007800:	2b00      	cmp	r3, #0
 8007802:	d003      	beq.n	800780c <HAL_DMA_IRQHandler+0x1f4>
        {
          /* Transfer suspend callback */
          hdma->XferSuspendCallback(hdma);
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007808:	6878      	ldr	r0, [r7, #4]
 800780a:	4798      	blx	r3
      }
    }
  }

  /* Transfer Complete Interrupt management ***************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TC) != 0U))
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	691b      	ldr	r3, [r3, #16]
 8007812:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007816:	2b00      	cmp	r3, #0
 8007818:	d039      	beq.n	800788e <HAL_DMA_IRQHandler+0x276>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	695b      	ldr	r3, [r3, #20]
 8007820:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007824:	2b00      	cmp	r3, #0
 8007826:	d032      	beq.n	800788e <HAL_DMA_IRQHandler+0x276>
    {
      /* Check DMA channel transfer mode */
      if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800782c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007830:	2b00      	cmp	r3, #0
 8007832:	d012      	beq.n	800785a <HAL_DMA_IRQHandler+0x242>
      {
        /* If linked-list transfer */
        if (hdma->Instance->CLLR == 0U)
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800783a:	2b00      	cmp	r3, #0
 800783c:	d116      	bne.n	800786c <HAL_DMA_IRQHandler+0x254>
        {
          if (hdma->Instance->CBR1 == 0U)
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007844:	2b00      	cmp	r3, #0
 8007846:	d111      	bne.n	800786c <HAL_DMA_IRQHandler+0x254>
          {
            /* Update the DMA channel state */
            hdma->State = HAL_DMA_STATE_READY;
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	2201      	movs	r2, #1
 800784c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

            /* Update the linked-list queue state */
            hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007854:	2201      	movs	r2, #1
 8007856:	731a      	strb	r2, [r3, #12]
 8007858:	e008      	b.n	800786c <HAL_DMA_IRQHandler+0x254>
        }
      }
      else
      {
        /* If normal transfer */
        if (hdma->Instance->CBR1 == 0U)
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007860:	2b00      	cmp	r3, #0
 8007862:	d103      	bne.n	800786c <HAL_DMA_IRQHandler+0x254>
        {
          /* Update the DMA channel state */
          hdma->State = HAL_DMA_STATE_READY;
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	2201      	movs	r2, #1
 8007868:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
        }
      }

      /* Clear TC and HT transfer flags */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT));
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	f44f 7240 	mov.w	r2, #768	; 0x300
 8007874:	60da      	str	r2, [r3, #12]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	2200      	movs	r2, #0
 800787a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

      /* Check transfer complete callback */
      if (hdma->XferCpltCallback != NULL)
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007882:	2b00      	cmp	r3, #0
 8007884:	d003      	beq.n	800788e <HAL_DMA_IRQHandler+0x276>
      {
        /* Channel Transfer Complete callback */
        hdma->XferCpltCallback(hdma);
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800788a:	6878      	ldr	r0, [r7, #4]
 800788c:	4798      	blx	r3
      }
    }
  }

  /* Manage error case ************************************************************************************************/
  if (hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007892:	2b00      	cmp	r3, #0
 8007894:	d031      	beq.n	80078fa <HAL_DMA_IRQHandler+0x2e2>
  {
    /* Reset the channel internal state and reset the FIFO */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	695a      	ldr	r2, [r3, #20]
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	f042 0202 	orr.w	r2, r2, #2
 80078a4:	615a      	str	r2, [r3, #20]

    if ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	695b      	ldr	r3, [r3, #20]
 80078ac:	f003 0301 	and.w	r3, r3, #1
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d004      	beq.n	80078be <HAL_DMA_IRQHandler+0x2a6>
    {
      /* Update the DMA channel state */
      hdma->State = HAL_DMA_STATE_ERROR;
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	2203      	movs	r2, #3
 80078b8:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 80078bc:	e003      	b.n	80078c6 <HAL_DMA_IRQHandler+0x2ae>
    }
    else
    {
      /* Update the DMA channel state */
      hdma->State = HAL_DMA_STATE_READY;
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	2201      	movs	r2, #1
 80078c2:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
    }

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80078ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d003      	beq.n	80078da <HAL_DMA_IRQHandler+0x2c2>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80078d6:	2201      	movs	r2, #1
 80078d8:	731a      	strb	r2, [r3, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	2200      	movs	r2, #0
 80078de:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

    /* Check transfer error callback */
    if (hdma->XferErrorCallback != NULL)
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d007      	beq.n	80078fa <HAL_DMA_IRQHandler+0x2e2>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80078ee:	6878      	ldr	r0, [r7, #4]
 80078f0:	4798      	blx	r3
 80078f2:	e002      	b.n	80078fa <HAL_DMA_IRQHandler+0x2e2>
    return; /* the global interrupt flag for the current channel is down , nothing to do */
 80078f4:	bf00      	nop
 80078f6:	e000      	b.n	80078fa <HAL_DMA_IRQHandler+0x2e2>
        return;
 80078f8:	bf00      	nop
    }
  }
}
 80078fa:	3710      	adds	r7, #16
 80078fc:	46bd      	mov	sp, r7
 80078fe:	bd80      	pop	{r7, pc}

08007900 <HAL_DMA_ConfigChannelAttributes>:
  * @param  ChannelAttributes : Specifies the DMA channel secure/privilege attributes.
  *                             This parameter can be a one or a combination of @ref DMA_Channel_Attributes.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_DMA_ConfigChannelAttributes(DMA_HandleTypeDef *const hdma, uint32_t ChannelAttributes)
{
 8007900:	b480      	push	{r7}
 8007902:	b085      	sub	sp, #20
 8007904:	af00      	add	r7, sp, #0
 8007906:	6078      	str	r0, [r7, #4]
 8007908:	6039      	str	r1, [r7, #0]
  DMA_TypeDef *p_dma_instance;
  uint32_t channel_idx;

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	2b00      	cmp	r3, #0
 800790e:	d101      	bne.n	8007914 <HAL_DMA_ConfigChannelAttributes+0x14>
  {
    return HAL_ERROR;
 8007910:	2301      	movs	r3, #1
 8007912:	e02b      	b.n	800796c <HAL_DMA_ConfigChannelAttributes+0x6c>

  /* Check the parameters */
  assert_param(IS_DMA_ATTRIBUTES(ChannelAttributes));

  /* Get DMA instance */
  p_dma_instance = GET_DMA_INSTANCE(hdma);
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800791c:	f023 030f 	bic.w	r3, r3, #15
 8007920:	60fb      	str	r3, [r7, #12]

  /* Get channel index */
  channel_idx = 1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800792a:	3b50      	subs	r3, #80	; 0x50
 800792c:	09db      	lsrs	r3, r3, #7
 800792e:	f003 031f 	and.w	r3, r3, #31
 8007932:	2201      	movs	r2, #1
 8007934:	fa02 f303 	lsl.w	r3, r2, r3
 8007938:	60bb      	str	r3, [r7, #8]

  /* Check DMA channel privilege attribute management */
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) == DMA_CHANNEL_ATTR_PRIV_MASK)
 800793a:	683b      	ldr	r3, [r7, #0]
 800793c:	f003 0310 	and.w	r3, r3, #16
 8007940:	2b00      	cmp	r3, #0
 8007942:	d012      	beq.n	800796a <HAL_DMA_ConfigChannelAttributes+0x6a>
  {
    /* Configure DMA channel privilege attribute */
    if ((ChannelAttributes & DMA_CHANNEL_PRIV) == DMA_CHANNEL_PRIV)
 8007944:	683b      	ldr	r3, [r7, #0]
 8007946:	f003 0311 	and.w	r3, r3, #17
 800794a:	2b11      	cmp	r3, #17
 800794c:	d106      	bne.n	800795c <HAL_DMA_ConfigChannelAttributes+0x5c>
    {
      p_dma_instance->PRIVCFGR |= channel_idx;
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	685a      	ldr	r2, [r3, #4]
 8007952:	68bb      	ldr	r3, [r7, #8]
 8007954:	431a      	orrs	r2, r3
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	605a      	str	r2, [r3, #4]
 800795a:	e006      	b.n	800796a <HAL_DMA_ConfigChannelAttributes+0x6a>
    }
    else
    {
      p_dma_instance->PRIVCFGR &= (~channel_idx);
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	685a      	ldr	r2, [r3, #4]
 8007960:	68bb      	ldr	r3, [r7, #8]
 8007962:	43db      	mvns	r3, r3
 8007964:	401a      	ands	r2, r3
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	605a      	str	r2, [r3, #4]
      hdma->Instance->CTR1 &= (~DMA_CTR1_DSEC);
    }
  }
#endif /* defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  return HAL_OK;
 800796a:	2300      	movs	r3, #0
}
 800796c:	4618      	mov	r0, r3
 800796e:	3714      	adds	r7, #20
 8007970:	46bd      	mov	sp, r7
 8007972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007976:	4770      	bx	lr

08007978 <DMA_SetConfig>:
  */
static void DMA_SetConfig(DMA_HandleTypeDef const *const hdma,
                          uint32_t SrcAddress,
                          uint32_t DstAddress,
                          uint32_t SrcDataSize)
{
 8007978:	b480      	push	{r7}
 800797a:	b085      	sub	sp, #20
 800797c:	af00      	add	r7, sp, #0
 800797e:	60f8      	str	r0, [r7, #12]
 8007980:	60b9      	str	r1, [r7, #8]
 8007982:	607a      	str	r2, [r7, #4]
 8007984:	603b      	str	r3, [r7, #0]
  /* Configure the DMA channel data size */
  MODIFY_REG(hdma->Instance->CBR1, DMA_CBR1_BNDT, (SrcDataSize & DMA_CBR1_BNDT));
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800798c:	0c1b      	lsrs	r3, r3, #16
 800798e:	041b      	lsls	r3, r3, #16
 8007990:	683a      	ldr	r2, [r7, #0]
 8007992:	b291      	uxth	r1, r2
 8007994:	68fa      	ldr	r2, [r7, #12]
 8007996:	6812      	ldr	r2, [r2, #0]
 8007998:	430b      	orrs	r3, r1
 800799a:	6493      	str	r3, [r2, #72]	; 0x48

  /* Clear all interrupt flags */
  __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	f44f 42fe 	mov.w	r2, #32512	; 0x7f00
 80079a4:	60da      	str	r2, [r3, #12]
                       DMA_FLAG_TO);

  /* Configure DMA channel source address */
  hdma->Instance->CSAR = SrcAddress;
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	68ba      	ldr	r2, [r7, #8]
 80079ac:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure DMA channel destination address */
  hdma->Instance->CDAR = DstAddress;
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	687a      	ldr	r2, [r7, #4]
 80079b4:	651a      	str	r2, [r3, #80]	; 0x50
}
 80079b6:	bf00      	nop
 80079b8:	3714      	adds	r7, #20
 80079ba:	46bd      	mov	sp, r7
 80079bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c0:	4770      	bx	lr
	...

080079c4 <HAL_DMAEx_List_Init>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_Init(DMA_HandleTypeDef *const hdma)
{
 80079c4:	b580      	push	{r7, lr}
 80079c6:	b084      	sub	sp, #16
 80079c8:	af00      	add	r7, sp, #0
 80079ca:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart = HAL_GetTick();
 80079cc:	f7fe ffb8 	bl	8006940 <HAL_GetTick>
 80079d0:	60f8      	str	r0, [r7, #12]

  /* Check the DMA channel handle parameter */
  if (hdma == NULL)
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d101      	bne.n	80079dc <HAL_DMAEx_List_Init+0x18>
  {
    return HAL_ERROR;
 80079d8:	2301      	movs	r3, #1
 80079da:	e0dc      	b.n	8007b96 <HAL_DMAEx_List_Init+0x1d2>
  assert_param(IS_DMA_PRIORITY(hdma->InitLinkedList.Priority));
  assert_param(IS_DMA_LINK_STEP_MODE(hdma->InitLinkedList.LinkStepMode));
  assert_param(IS_DMA_TCEM_LINKEDLIST_EVENT_MODE(hdma->InitLinkedList.TransferEventMode));
  assert_param(IS_DMA_LINKEDLIST_MODE(hdma->InitLinkedList.LinkedListMode));
  /* Check DMA channel instance */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	4a6f      	ldr	r2, [pc, #444]	; (8007ba0 <HAL_DMAEx_List_Init+0x1dc>)
 80079e2:	4293      	cmp	r3, r2
 80079e4:	f000 809f 	beq.w	8007b26 <HAL_DMAEx_List_Init+0x162>
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	4a6d      	ldr	r2, [pc, #436]	; (8007ba4 <HAL_DMAEx_List_Init+0x1e0>)
 80079ee:	4293      	cmp	r3, r2
 80079f0:	f000 8099 	beq.w	8007b26 <HAL_DMAEx_List_Init+0x162>
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	4a6b      	ldr	r2, [pc, #428]	; (8007ba8 <HAL_DMAEx_List_Init+0x1e4>)
 80079fa:	4293      	cmp	r3, r2
 80079fc:	f000 8093 	beq.w	8007b26 <HAL_DMAEx_List_Init+0x162>
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	4a69      	ldr	r2, [pc, #420]	; (8007bac <HAL_DMAEx_List_Init+0x1e8>)
 8007a06:	4293      	cmp	r3, r2
 8007a08:	f000 808d 	beq.w	8007b26 <HAL_DMAEx_List_Init+0x162>
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	4a67      	ldr	r2, [pc, #412]	; (8007bb0 <HAL_DMAEx_List_Init+0x1ec>)
 8007a12:	4293      	cmp	r3, r2
 8007a14:	f000 8087 	beq.w	8007b26 <HAL_DMAEx_List_Init+0x162>
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	4a65      	ldr	r2, [pc, #404]	; (8007bb4 <HAL_DMAEx_List_Init+0x1f0>)
 8007a1e:	4293      	cmp	r3, r2
 8007a20:	f000 8081 	beq.w	8007b26 <HAL_DMAEx_List_Init+0x162>
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	4a63      	ldr	r2, [pc, #396]	; (8007bb8 <HAL_DMAEx_List_Init+0x1f4>)
 8007a2a:	4293      	cmp	r3, r2
 8007a2c:	d07b      	beq.n	8007b26 <HAL_DMAEx_List_Init+0x162>
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	4a62      	ldr	r2, [pc, #392]	; (8007bbc <HAL_DMAEx_List_Init+0x1f8>)
 8007a34:	4293      	cmp	r3, r2
 8007a36:	d076      	beq.n	8007b26 <HAL_DMAEx_List_Init+0x162>
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	4a60      	ldr	r2, [pc, #384]	; (8007bc0 <HAL_DMAEx_List_Init+0x1fc>)
 8007a3e:	4293      	cmp	r3, r2
 8007a40:	d071      	beq.n	8007b26 <HAL_DMAEx_List_Init+0x162>
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	4a5f      	ldr	r2, [pc, #380]	; (8007bc4 <HAL_DMAEx_List_Init+0x200>)
 8007a48:	4293      	cmp	r3, r2
 8007a4a:	d06c      	beq.n	8007b26 <HAL_DMAEx_List_Init+0x162>
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	4a5d      	ldr	r2, [pc, #372]	; (8007bc8 <HAL_DMAEx_List_Init+0x204>)
 8007a52:	4293      	cmp	r3, r2
 8007a54:	d067      	beq.n	8007b26 <HAL_DMAEx_List_Init+0x162>
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	4a5c      	ldr	r2, [pc, #368]	; (8007bcc <HAL_DMAEx_List_Init+0x208>)
 8007a5c:	4293      	cmp	r3, r2
 8007a5e:	d062      	beq.n	8007b26 <HAL_DMAEx_List_Init+0x162>
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	4a5a      	ldr	r2, [pc, #360]	; (8007bd0 <HAL_DMAEx_List_Init+0x20c>)
 8007a66:	4293      	cmp	r3, r2
 8007a68:	d05d      	beq.n	8007b26 <HAL_DMAEx_List_Init+0x162>
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	4a59      	ldr	r2, [pc, #356]	; (8007bd4 <HAL_DMAEx_List_Init+0x210>)
 8007a70:	4293      	cmp	r3, r2
 8007a72:	d058      	beq.n	8007b26 <HAL_DMAEx_List_Init+0x162>
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	4a57      	ldr	r2, [pc, #348]	; (8007bd8 <HAL_DMAEx_List_Init+0x214>)
 8007a7a:	4293      	cmp	r3, r2
 8007a7c:	d053      	beq.n	8007b26 <HAL_DMAEx_List_Init+0x162>
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	4a56      	ldr	r2, [pc, #344]	; (8007bdc <HAL_DMAEx_List_Init+0x218>)
 8007a84:	4293      	cmp	r3, r2
 8007a86:	d04e      	beq.n	8007b26 <HAL_DMAEx_List_Init+0x162>
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	4a54      	ldr	r2, [pc, #336]	; (8007be0 <HAL_DMAEx_List_Init+0x21c>)
 8007a8e:	4293      	cmp	r3, r2
 8007a90:	d049      	beq.n	8007b26 <HAL_DMAEx_List_Init+0x162>
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	4a53      	ldr	r2, [pc, #332]	; (8007be4 <HAL_DMAEx_List_Init+0x220>)
 8007a98:	4293      	cmp	r3, r2
 8007a9a:	d044      	beq.n	8007b26 <HAL_DMAEx_List_Init+0x162>
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	4a51      	ldr	r2, [pc, #324]	; (8007be8 <HAL_DMAEx_List_Init+0x224>)
 8007aa2:	4293      	cmp	r3, r2
 8007aa4:	d03f      	beq.n	8007b26 <HAL_DMAEx_List_Init+0x162>
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	4a50      	ldr	r2, [pc, #320]	; (8007bec <HAL_DMAEx_List_Init+0x228>)
 8007aac:	4293      	cmp	r3, r2
 8007aae:	d03a      	beq.n	8007b26 <HAL_DMAEx_List_Init+0x162>
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	4a4e      	ldr	r2, [pc, #312]	; (8007bf0 <HAL_DMAEx_List_Init+0x22c>)
 8007ab6:	4293      	cmp	r3, r2
 8007ab8:	d035      	beq.n	8007b26 <HAL_DMAEx_List_Init+0x162>
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	4a4d      	ldr	r2, [pc, #308]	; (8007bf4 <HAL_DMAEx_List_Init+0x230>)
 8007ac0:	4293      	cmp	r3, r2
 8007ac2:	d030      	beq.n	8007b26 <HAL_DMAEx_List_Init+0x162>
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	4a4b      	ldr	r2, [pc, #300]	; (8007bf8 <HAL_DMAEx_List_Init+0x234>)
 8007aca:	4293      	cmp	r3, r2
 8007acc:	d02b      	beq.n	8007b26 <HAL_DMAEx_List_Init+0x162>
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	4a4a      	ldr	r2, [pc, #296]	; (8007bfc <HAL_DMAEx_List_Init+0x238>)
 8007ad4:	4293      	cmp	r3, r2
 8007ad6:	d026      	beq.n	8007b26 <HAL_DMAEx_List_Init+0x162>
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	4a48      	ldr	r2, [pc, #288]	; (8007c00 <HAL_DMAEx_List_Init+0x23c>)
 8007ade:	4293      	cmp	r3, r2
 8007ae0:	d021      	beq.n	8007b26 <HAL_DMAEx_List_Init+0x162>
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	4a47      	ldr	r2, [pc, #284]	; (8007c04 <HAL_DMAEx_List_Init+0x240>)
 8007ae8:	4293      	cmp	r3, r2
 8007aea:	d01c      	beq.n	8007b26 <HAL_DMAEx_List_Init+0x162>
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	4a45      	ldr	r2, [pc, #276]	; (8007c08 <HAL_DMAEx_List_Init+0x244>)
 8007af2:	4293      	cmp	r3, r2
 8007af4:	d017      	beq.n	8007b26 <HAL_DMAEx_List_Init+0x162>
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	4a44      	ldr	r2, [pc, #272]	; (8007c0c <HAL_DMAEx_List_Init+0x248>)
 8007afc:	4293      	cmp	r3, r2
 8007afe:	d012      	beq.n	8007b26 <HAL_DMAEx_List_Init+0x162>
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	4a42      	ldr	r2, [pc, #264]	; (8007c10 <HAL_DMAEx_List_Init+0x24c>)
 8007b06:	4293      	cmp	r3, r2
 8007b08:	d00d      	beq.n	8007b26 <HAL_DMAEx_List_Init+0x162>
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	4a41      	ldr	r2, [pc, #260]	; (8007c14 <HAL_DMAEx_List_Init+0x250>)
 8007b10:	4293      	cmp	r3, r2
 8007b12:	d008      	beq.n	8007b26 <HAL_DMAEx_List_Init+0x162>
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	4a3f      	ldr	r2, [pc, #252]	; (8007c18 <HAL_DMAEx_List_Init+0x254>)
 8007b1a:	4293      	cmp	r3, r2
 8007b1c:	d003      	beq.n	8007b26 <HAL_DMAEx_List_Init+0x162>
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	4a3e      	ldr	r2, [pc, #248]	; (8007c1c <HAL_DMAEx_List_Init+0x258>)
 8007b24:	4293      	cmp	r3, r2
 8007b26:	bf00      	nop
  {
    assert_param(IS_DMA_LINK_ALLOCATED_PORT(hdma->InitLinkedList.LinkAllocatedPort));
  }

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	2200      	movs	r2, #0
 8007b2c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	2202      	movs	r2, #2
 8007b34:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Disable the DMA channel */
  __HAL_DMA_DISABLE(hdma);
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	695a      	ldr	r2, [r3, #20]
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	f042 0206 	orr.w	r2, r2, #6
 8007b46:	615a      	str	r2, [r3, #20]

  /* Check if the DMA channel is effectively disabled */
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 8007b48:	e00f      	b.n	8007b6a <HAL_DMAEx_List_Init+0x1a6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 8007b4a:	f7fe fef9 	bl	8006940 <HAL_GetTick>
 8007b4e:	4602      	mov	r2, r0
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	1ad3      	subs	r3, r2, r3
 8007b54:	2b05      	cmp	r3, #5
 8007b56:	d908      	bls.n	8007b6a <HAL_DMAEx_List_Init+0x1a6>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	2210      	movs	r2, #16
 8007b5c:	659a      	str	r2, [r3, #88]	; 0x58

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_ERROR;
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	2203      	movs	r2, #3
 8007b62:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

      return HAL_ERROR;
 8007b66:	2301      	movs	r3, #1
 8007b68:	e015      	b.n	8007b96 <HAL_DMAEx_List_Init+0x1d2>
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	695b      	ldr	r3, [r3, #20]
 8007b70:	f003 0301 	and.w	r3, r3, #1
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d1e8      	bne.n	8007b4a <HAL_DMAEx_List_Init+0x186>
    }
  }

  /* Initialize the DMA channel registers */
  DMA_List_Init(hdma);
 8007b78:	6878      	ldr	r0, [r7, #4]
 8007b7a:	f000 fa77 	bl	800806c <DMA_List_Init>

  /* Update DMA channel operation mode */
  hdma->Mode = hdma->InitLinkedList.LinkedListMode;
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	651a      	str	r2, [r3, #80]	; 0x50

  /* Update the DMA channel error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	2200      	movs	r2, #0
 8007b8a:	659a      	str	r2, [r3, #88]	; 0x58

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_READY;
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	2201      	movs	r2, #1
 8007b90:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8007b94:	2300      	movs	r3, #0
}
 8007b96:	4618      	mov	r0, r3
 8007b98:	3710      	adds	r7, #16
 8007b9a:	46bd      	mov	sp, r7
 8007b9c:	bd80      	pop	{r7, pc}
 8007b9e:	bf00      	nop
 8007ba0:	40020050 	.word	0x40020050
 8007ba4:	50020050 	.word	0x50020050
 8007ba8:	400200d0 	.word	0x400200d0
 8007bac:	500200d0 	.word	0x500200d0
 8007bb0:	40020150 	.word	0x40020150
 8007bb4:	50020150 	.word	0x50020150
 8007bb8:	400201d0 	.word	0x400201d0
 8007bbc:	500201d0 	.word	0x500201d0
 8007bc0:	40020250 	.word	0x40020250
 8007bc4:	50020250 	.word	0x50020250
 8007bc8:	400202d0 	.word	0x400202d0
 8007bcc:	500202d0 	.word	0x500202d0
 8007bd0:	40020350 	.word	0x40020350
 8007bd4:	50020350 	.word	0x50020350
 8007bd8:	400203d0 	.word	0x400203d0
 8007bdc:	500203d0 	.word	0x500203d0
 8007be0:	40020450 	.word	0x40020450
 8007be4:	50020450 	.word	0x50020450
 8007be8:	400204d0 	.word	0x400204d0
 8007bec:	500204d0 	.word	0x500204d0
 8007bf0:	40020550 	.word	0x40020550
 8007bf4:	50020550 	.word	0x50020550
 8007bf8:	400205d0 	.word	0x400205d0
 8007bfc:	500205d0 	.word	0x500205d0
 8007c00:	40020650 	.word	0x40020650
 8007c04:	50020650 	.word	0x50020650
 8007c08:	400206d0 	.word	0x400206d0
 8007c0c:	500206d0 	.word	0x500206d0
 8007c10:	40020750 	.word	0x40020750
 8007c14:	50020750 	.word	0x50020750
 8007c18:	400207d0 	.word	0x400207d0
 8007c1c:	500207d0 	.word	0x500207d0

08007c20 <HAL_DMAEx_List_Start_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_Start_IT(DMA_HandleTypeDef *const hdma)
{
 8007c20:	b580      	push	{r7, lr}
 8007c22:	b086      	sub	sp, #24
 8007c24:	af00      	add	r7, sp, #0
 8007c26:	6078      	str	r0, [r7, #4]
  HAL_DMA_StateTypeDef dma_state;
  uint32_t ccr_value;
  uint32_t cllr_mask;

  /* Check the DMA peripheral handle and the linked-list queue parameters */
  if ((hdma == NULL) || (hdma->LinkedListQueue == NULL))
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d003      	beq.n	8007c36 <HAL_DMAEx_List_Start_IT+0x16>
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d101      	bne.n	8007c3a <HAL_DMAEx_List_Start_IT+0x1a>
  {
    return HAL_ERROR;
 8007c36:	2301      	movs	r3, #1
 8007c38:	e082      	b.n	8007d40 <HAL_DMAEx_List_Start_IT+0x120>
  }

  /* Check DMA channel state */
  dma_state = hdma->State;
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8007c40:	75fb      	strb	r3, [r7, #23]
  ccr_value = hdma->Instance->CCR & DMA_CCR_LSM;
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	695b      	ldr	r3, [r3, #20]
 8007c48:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007c4c:	613b      	str	r3, [r7, #16]
  if ((dma_state == HAL_DMA_STATE_READY) || ((dma_state == HAL_DMA_STATE_BUSY) && (ccr_value != 0U)))
 8007c4e:	7dfb      	ldrb	r3, [r7, #23]
 8007c50:	2b01      	cmp	r3, #1
 8007c52:	d005      	beq.n	8007c60 <HAL_DMAEx_List_Start_IT+0x40>
 8007c54:	7dfb      	ldrb	r3, [r7, #23]
 8007c56:	2b02      	cmp	r3, #2
 8007c58:	d16a      	bne.n	8007d30 <HAL_DMAEx_List_Start_IT+0x110>
 8007c5a:	693b      	ldr	r3, [r7, #16]
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d067      	beq.n	8007d30 <HAL_DMAEx_List_Start_IT+0x110>
  {
    /* Check DMA channel state is ready */
    if (hdma->State == HAL_DMA_STATE_READY)
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8007c66:	b2db      	uxtb	r3, r3
 8007c68:	2b01      	cmp	r3, #1
 8007c6a:	d157      	bne.n	8007d1c <HAL_DMAEx_List_Start_IT+0xfc>
    {
      /* Process locked */
      __HAL_LOCK(hdma);
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8007c72:	2b01      	cmp	r3, #1
 8007c74:	d101      	bne.n	8007c7a <HAL_DMAEx_List_Start_IT+0x5a>
 8007c76:	2302      	movs	r3, #2
 8007c78:	e062      	b.n	8007d40 <HAL_DMAEx_List_Start_IT+0x120>
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	2201      	movs	r2, #1
 8007c7e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

      /* Update the DMA channel and the queue states */
      hdma->State                  = HAL_DMA_STATE_BUSY;
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	2202      	movs	r2, #2
 8007c86:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_BUSY;
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007c8e:	2202      	movs	r2, #2
 8007c90:	731a      	strb	r2, [r3, #12]

      /* Update the DMA channel and the queue error codes */
      hdma->ErrorCode                  = HAL_DMA_ERROR_NONE;
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	2200      	movs	r2, #0
 8007c96:	659a      	str	r2, [r3, #88]	; 0x58
      hdma->LinkedListQueue->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007c9c:	2200      	movs	r2, #0
 8007c9e:	611a      	str	r2, [r3, #16]

      /* Enable common interrupts: Transfer Complete and Transfer Errors ITs */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_DTE | DMA_IT_ULE | DMA_IT_USE | DMA_IT_TO));
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	695a      	ldr	r2, [r3, #20]
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	f442 42ba 	orr.w	r2, r2, #23808	; 0x5d00
 8007cae:	615a      	str	r2, [r3, #20]

      /* Check half transfer complete callback */
      if (hdma->XferHalfCpltCallback != NULL)
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d007      	beq.n	8007cc8 <HAL_DMAEx_List_Start_IT+0xa8>
      {
        /* If half transfer complete callback is set, enable the corresponding IT */
        __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	695a      	ldr	r2, [r3, #20]
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007cc6:	615a      	str	r2, [r3, #20]
      }

      /* Check suspend callback */
      if (hdma->XferSuspendCallback != NULL)
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d007      	beq.n	8007ce0 <HAL_DMAEx_List_Start_IT+0xc0>
      {
        /* If transfer suspend callback is set, enable the corresponding IT */
        __HAL_DMA_ENABLE_IT(hdma, DMA_IT_SUSP);
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	695a      	ldr	r2, [r3, #20]
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007cde:	615a      	str	r2, [r3, #20]
      }

      /* Get CLLR register mask and offset */
      DMA_List_GetCLLRNodeInfo(hdma->LinkedListQueue->Head, &cllr_mask, NULL);
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	f107 010c 	add.w	r1, r7, #12
 8007cea:	2200      	movs	r2, #0
 8007cec:	4618      	mov	r0, r3
 8007cee:	f000 fcd3 	bl	8008698 <DMA_List_GetCLLRNodeInfo>

      /* Update DMA registers for linked-list transfer */
      hdma->Instance->CLBAR = ((uint32_t)hdma->LinkedListQueue->Head & DMA_CLBAR_LBA);
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	4619      	mov	r1, r3
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	681a      	ldr	r2, [r3, #0]
 8007cfe:	0c0b      	lsrs	r3, r1, #16
 8007d00:	041b      	lsls	r3, r3, #16
 8007d02:	6013      	str	r3, [r2, #0]
      hdma->Instance->CLLR  = ((uint32_t)hdma->LinkedListQueue->Head & DMA_CLLR_LA) | cllr_mask;
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	461a      	mov	r2, r3
 8007d0c:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 8007d10:	4013      	ands	r3, r2
 8007d12:	68f9      	ldr	r1, [r7, #12]
 8007d14:	687a      	ldr	r2, [r7, #4]
 8007d16:	6812      	ldr	r2, [r2, #0]
 8007d18:	430b      	orrs	r3, r1
 8007d1a:	67d3      	str	r3, [r2, #124]	; 0x7c
    }

    /* Enable DMA channel */
    __HAL_DMA_ENABLE(hdma);
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	695a      	ldr	r2, [r3, #20]
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	f042 0201 	orr.w	r2, r2, #1
 8007d2a:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hdma);

    return HAL_ERROR;
  }

  return HAL_OK;
 8007d2c:	2300      	movs	r3, #0
 8007d2e:	e007      	b.n	8007d40 <HAL_DMAEx_List_Start_IT+0x120>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	2240      	movs	r2, #64	; 0x40
 8007d34:	659a      	str	r2, [r3, #88]	; 0x58
    __HAL_UNLOCK(hdma);
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	2200      	movs	r2, #0
 8007d3a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    return HAL_ERROR;
 8007d3e:	2301      	movs	r3, #1
}
 8007d40:	4618      	mov	r0, r3
 8007d42:	3718      	adds	r7, #24
 8007d44:	46bd      	mov	sp, r7
 8007d46:	bd80      	pop	{r7, pc}

08007d48 <HAL_DMAEx_List_BuildNode>:
  *                       configurations.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_BuildNode(DMA_NodeConfTypeDef const *const pNodeConfig,
                                           DMA_NodeTypeDef *const pNode)
{
 8007d48:	b580      	push	{r7, lr}
 8007d4a:	b082      	sub	sp, #8
 8007d4c:	af00      	add	r7, sp, #0
 8007d4e:	6078      	str	r0, [r7, #4]
 8007d50:	6039      	str	r1, [r7, #0]
  /* Check the node configuration and physical node parameters */
  if ((pNodeConfig == NULL) || (pNode == NULL))
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d002      	beq.n	8007d5e <HAL_DMAEx_List_BuildNode+0x16>
 8007d58:	683b      	ldr	r3, [r7, #0]
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d101      	bne.n	8007d62 <HAL_DMAEx_List_BuildNode+0x1a>
  {
    return HAL_ERROR;
 8007d5e:	2301      	movs	r3, #1
 8007d60:	e004      	b.n	8007d6c <HAL_DMAEx_List_BuildNode+0x24>
  assert_param(IS_DMA_ATTRIBUTES(pNodeConfig->SrcSecure));
  assert_param(IS_DMA_ATTRIBUTES(pNodeConfig->DestSecure));
#endif /* defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  /* Build the DMA channel node */
  DMA_List_BuildNode(pNodeConfig, pNode);
 8007d62:	6839      	ldr	r1, [r7, #0]
 8007d64:	6878      	ldr	r0, [r7, #4]
 8007d66:	f000 fad9 	bl	800831c <DMA_List_BuildNode>

  return HAL_OK;
 8007d6a:	2300      	movs	r3, #0
}
 8007d6c:	4618      	mov	r0, r3
 8007d6e:	3708      	adds	r7, #8
 8007d70:	46bd      	mov	sp, r7
 8007d72:	bd80      	pop	{r7, pc}

08007d74 <HAL_DMAEx_List_InsertNode_Tail>:
  *                     configurations.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_InsertNode_Tail(DMA_QListTypeDef *const pQList,
                                                 DMA_NodeTypeDef *const pNewNode)
{
 8007d74:	b580      	push	{r7, lr}
 8007d76:	b08a      	sub	sp, #40	; 0x28
 8007d78:	af00      	add	r7, sp, #0
 8007d7a:	6078      	str	r0, [r7, #4]
 8007d7c:	6039      	str	r1, [r7, #0]
  uint32_t cllr_mask;
  uint32_t cllr_offset;
  DMA_NodeInQInfoTypeDef node_info;

  /* Check the queue and the new node parameters */
  if ((pQList == NULL) || (pNewNode == NULL))
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d002      	beq.n	8007d8a <HAL_DMAEx_List_InsertNode_Tail+0x16>
 8007d84:	683b      	ldr	r3, [r7, #0]
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d101      	bne.n	8007d8e <HAL_DMAEx_List_InsertNode_Tail+0x1a>
  {
    return HAL_ERROR;
 8007d8a:	2301      	movs	r3, #1
 8007d8c:	e066      	b.n	8007e5c <HAL_DMAEx_List_InsertNode_Tail+0xe8>
  }

  /* Check queue type */
  if (pQList->Type == QUEUE_TYPE_DYNAMIC)
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	695b      	ldr	r3, [r3, #20]
 8007d92:	2b01      	cmp	r3, #1
 8007d94:	d104      	bne.n	8007da0 <HAL_DMAEx_List_InsertNode_Tail+0x2c>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	2204      	movs	r2, #4
 8007d9a:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8007d9c:	2301      	movs	r3, #1
 8007d9e:	e05d      	b.n	8007e5c <HAL_DMAEx_List_InsertNode_Tail+0xe8>
  }

  /* Check nodes base addresses */
  if (DMA_List_CheckNodesBaseAddresses(pQList->Head, pNewNode, NULL) != 0U)
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	2200      	movs	r2, #0
 8007da6:	6839      	ldr	r1, [r7, #0]
 8007da8:	4618      	mov	r0, r3
 8007daa:	f000 fc09 	bl	80085c0 <DMA_List_CheckNodesBaseAddresses>
 8007dae:	4603      	mov	r3, r0
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d004      	beq.n	8007dbe <HAL_DMAEx_List_InsertNode_Tail+0x4a>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_OUTOFRANGE;
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	2205      	movs	r2, #5
 8007db8:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8007dba:	2301      	movs	r3, #1
 8007dbc:	e04e      	b.n	8007e5c <HAL_DMAEx_List_InsertNode_Tail+0xe8>
  }

  /* Check nodes types compatibility */
  if (DMA_List_CheckNodesTypes(pQList->Head, pNewNode, NULL) != 0U)
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	2200      	movs	r2, #0
 8007dc4:	6839      	ldr	r1, [r7, #0]
 8007dc6:	4618      	mov	r0, r3
 8007dc8:	f000 fc2a 	bl	8008620 <DMA_List_CheckNodesTypes>
 8007dcc:	4603      	mov	r3, r0
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d004      	beq.n	8007ddc <HAL_DMAEx_List_InsertNode_Tail+0x68>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	2204      	movs	r2, #4
 8007dd6:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8007dd8:	2301      	movs	r3, #1
 8007dda:	e03f      	b.n	8007e5c <HAL_DMAEx_List_InsertNode_Tail+0xe8>
  }

  /* Empty queue */
  if (pQList->Head == NULL)
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d103      	bne.n	8007dec <HAL_DMAEx_List_InsertNode_Tail+0x78>
  {
    pQList->Head = pNewNode;
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	683a      	ldr	r2, [r7, #0]
 8007de8:	601a      	str	r2, [r3, #0]
 8007dea:	e02b      	b.n	8007e44 <HAL_DMAEx_List_InsertNode_Tail+0xd0>
  }
  /* Not empty queue */
  else
  {
    /* Get CLLR register mask and offset */
    DMA_List_GetCLLRNodeInfo(pNewNode, &cllr_mask, &cllr_offset);
 8007dec:	f107 0220 	add.w	r2, r7, #32
 8007df0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007df4:	4619      	mov	r1, r3
 8007df6:	6838      	ldr	r0, [r7, #0]
 8007df8:	f000 fc4e 	bl	8008698 <DMA_List_GetCLLRNodeInfo>

    /* Find node and get its position in selected queue */
    node_info.cllr_offset = cllr_offset;
 8007dfc:	6a3b      	ldr	r3, [r7, #32]
 8007dfe:	60fb      	str	r3, [r7, #12]
    (void)DMA_List_FindNode(pQList, NULL, &node_info);
 8007e00:	f107 030c 	add.w	r3, r7, #12
 8007e04:	461a      	mov	r2, r3
 8007e06:	2100      	movs	r1, #0
 8007e08:	6878      	ldr	r0, [r7, #4]
 8007e0a:	f000 fc75 	bl	80086f8 <DMA_List_FindNode>

    /* Check if queue is circular */
    if (pQList->FirstCircularNode != NULL)
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	685b      	ldr	r3, [r3, #4]
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d00b      	beq.n	8007e2e <HAL_DMAEx_List_InsertNode_Tail+0xba>
    {
      pNewNode->LinkRegisters[cllr_offset] = ((uint32_t)pQList->FirstCircularNode & DMA_CLLR_LA) | cllr_mask;
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	685b      	ldr	r3, [r3, #4]
 8007e1a:	461a      	mov	r2, r3
 8007e1c:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 8007e20:	4013      	ands	r3, r2
 8007e22:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007e24:	6a3a      	ldr	r2, [r7, #32]
 8007e26:	4319      	orrs	r1, r3
 8007e28:	683b      	ldr	r3, [r7, #0]
 8007e2a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    }

    ((DMA_NodeTypeDef *)node_info.currentnode_addr)->LinkRegisters[cllr_offset] =
      ((uint32_t)pNewNode & DMA_CLLR_LA) | cllr_mask;
 8007e2e:	683a      	ldr	r2, [r7, #0]
 8007e30:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 8007e34:	4013      	ands	r3, r2
 8007e36:	6a79      	ldr	r1, [r7, #36]	; 0x24
    ((DMA_NodeTypeDef *)node_info.currentnode_addr)->LinkRegisters[cllr_offset] =
 8007e38:	69ba      	ldr	r2, [r7, #24]
 8007e3a:	4610      	mov	r0, r2
 8007e3c:	6a3a      	ldr	r2, [r7, #32]
      ((uint32_t)pNewNode & DMA_CLLR_LA) | cllr_mask;
 8007e3e:	430b      	orrs	r3, r1
    ((DMA_NodeTypeDef *)node_info.currentnode_addr)->LinkRegisters[cllr_offset] =
 8007e40:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
  }

  /* Increment queue node number */
  pQList->NodeNumber++;
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	689b      	ldr	r3, [r3, #8]
 8007e48:	1c5a      	adds	r2, r3, #1
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	609a      	str	r2, [r3, #8]

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	2200      	movs	r2, #0
 8007e52:	611a      	str	r2, [r3, #16]

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_READY;
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	2201      	movs	r2, #1
 8007e58:	731a      	strb	r2, [r3, #12]

  /* Prevent MISRA-C2012-Rule-2.2_b */
  UNUSED(node_info);

  return HAL_OK;
 8007e5a:	2300      	movs	r3, #0
}
 8007e5c:	4618      	mov	r0, r3
 8007e5e:	3728      	adds	r7, #40	; 0x28
 8007e60:	46bd      	mov	sp, r7
 8007e62:	bd80      	pop	{r7, pc}

08007e64 <HAL_DMAEx_List_SetCircularModeConfig>:
  *                              registers configurations.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_SetCircularModeConfig(DMA_QListTypeDef *const pQList,
                                                       DMA_NodeTypeDef *const pFirstCircularNode)
{
 8007e64:	b580      	push	{r7, lr}
 8007e66:	b08a      	sub	sp, #40	; 0x28
 8007e68:	af00      	add	r7, sp, #0
 8007e6a:	6078      	str	r0, [r7, #4]
 8007e6c:	6039      	str	r1, [r7, #0]
  uint32_t cllr_mask;
  uint32_t cllr_offset;
  DMA_NodeInQInfoTypeDef node_info;

  /* Check the queue and the first circular node parameters */
  if ((pQList == NULL) || (pFirstCircularNode == NULL))
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d002      	beq.n	8007e7a <HAL_DMAEx_List_SetCircularModeConfig+0x16>
 8007e74:	683b      	ldr	r3, [r7, #0]
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d101      	bne.n	8007e7e <HAL_DMAEx_List_SetCircularModeConfig+0x1a>
  {
    return HAL_ERROR;
 8007e7a:	2301      	movs	r3, #1
 8007e7c:	e05c      	b.n	8007f38 <HAL_DMAEx_List_SetCircularModeConfig+0xd4>
  }

  /* Check the queue */
  if (pQList->Head == NULL)
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d104      	bne.n	8007e90 <HAL_DMAEx_List_SetCircularModeConfig+0x2c>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_EMPTY;
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	2202      	movs	r2, #2
 8007e8a:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8007e8c:	2301      	movs	r3, #1
 8007e8e:	e053      	b.n	8007f38 <HAL_DMAEx_List_SetCircularModeConfig+0xd4>
  }

  /* Check queue circular mode */
  if (pQList->FirstCircularNode != NULL)
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	685b      	ldr	r3, [r3, #4]
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d00b      	beq.n	8007eb0 <HAL_DMAEx_List_SetCircularModeConfig+0x4c>
  {
    if (pQList->FirstCircularNode == pFirstCircularNode)
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	685b      	ldr	r3, [r3, #4]
 8007e9c:	683a      	ldr	r2, [r7, #0]
 8007e9e:	429a      	cmp	r2, r3
 8007ea0:	d101      	bne.n	8007ea6 <HAL_DMAEx_List_SetCircularModeConfig+0x42>
    {
      return HAL_OK;
 8007ea2:	2300      	movs	r3, #0
 8007ea4:	e048      	b.n	8007f38 <HAL_DMAEx_List_SetCircularModeConfig+0xd4>
    }
    else
    {
      /* Update the queue error code */
      pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	2204      	movs	r2, #4
 8007eaa:	611a      	str	r2, [r3, #16]

      return HAL_ERROR;
 8007eac:	2301      	movs	r3, #1
 8007eae:	e043      	b.n	8007f38 <HAL_DMAEx_List_SetCircularModeConfig+0xd4>
    }
  }

  /* Check queue type */
  if (pQList->Type == QUEUE_TYPE_DYNAMIC)
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	695b      	ldr	r3, [r3, #20]
 8007eb4:	2b01      	cmp	r3, #1
 8007eb6:	d104      	bne.n	8007ec2 <HAL_DMAEx_List_SetCircularModeConfig+0x5e>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	2204      	movs	r2, #4
 8007ebc:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8007ebe:	2301      	movs	r3, #1
 8007ec0:	e03a      	b.n	8007f38 <HAL_DMAEx_List_SetCircularModeConfig+0xd4>
  }

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_BUSY;
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	2202      	movs	r2, #2
 8007ec6:	731a      	strb	r2, [r3, #12]

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	2200      	movs	r2, #0
 8007ecc:	611a      	str	r2, [r3, #16]

  /* Get CLLR register mask and offset */
  DMA_List_GetCLLRNodeInfo(pFirstCircularNode, &cllr_mask, &cllr_offset);
 8007ece:	f107 0220 	add.w	r2, r7, #32
 8007ed2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007ed6:	4619      	mov	r1, r3
 8007ed8:	6838      	ldr	r0, [r7, #0]
 8007eda:	f000 fbdd 	bl	8008698 <DMA_List_GetCLLRNodeInfo>

  /* Find the first circular node and get its position in selected queue */
  node_info.cllr_offset = cllr_offset;
 8007ede:	6a3b      	ldr	r3, [r7, #32]
 8007ee0:	60fb      	str	r3, [r7, #12]
  if (DMA_List_FindNode(pQList, pFirstCircularNode, &node_info) == 0U)
 8007ee2:	f107 030c 	add.w	r3, r7, #12
 8007ee6:	461a      	mov	r2, r3
 8007ee8:	6839      	ldr	r1, [r7, #0]
 8007eea:	6878      	ldr	r0, [r7, #4]
 8007eec:	f000 fc04 	bl	80086f8 <DMA_List_FindNode>
 8007ef0:	4603      	mov	r3, r0
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d11c      	bne.n	8007f30 <HAL_DMAEx_List_SetCircularModeConfig+0xcc>
  {
    /* Find the last queue node and get its position in selected queue */
    (void)DMA_List_FindNode(pQList, NULL, &node_info);
 8007ef6:	f107 030c 	add.w	r3, r7, #12
 8007efa:	461a      	mov	r2, r3
 8007efc:	2100      	movs	r1, #0
 8007efe:	6878      	ldr	r0, [r7, #4]
 8007f00:	f000 fbfa 	bl	80086f8 <DMA_List_FindNode>

    /* Set circular mode */
    ((DMA_NodeTypeDef *)(node_info.currentnode_addr))->LinkRegisters[cllr_offset] =
      ((uint32_t)pFirstCircularNode & DMA_CLLR_LA) | cllr_mask;
 8007f04:	683a      	ldr	r2, [r7, #0]
 8007f06:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 8007f0a:	4013      	ands	r3, r2
 8007f0c:	6a79      	ldr	r1, [r7, #36]	; 0x24
    ((DMA_NodeTypeDef *)(node_info.currentnode_addr))->LinkRegisters[cllr_offset] =
 8007f0e:	69ba      	ldr	r2, [r7, #24]
 8007f10:	4610      	mov	r0, r2
 8007f12:	6a3a      	ldr	r2, [r7, #32]
      ((uint32_t)pFirstCircularNode & DMA_CLLR_LA) | cllr_mask;
 8007f14:	430b      	orrs	r3, r1
    ((DMA_NodeTypeDef *)(node_info.currentnode_addr))->LinkRegisters[cllr_offset] =
 8007f16:	f840 3022 	str.w	r3, [r0, r2, lsl #2]

    /* Update first circular node in queue */
    pQList->FirstCircularNode = pFirstCircularNode;
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	683a      	ldr	r2, [r7, #0]
 8007f1e:	605a      	str	r2, [r3, #4]

    return HAL_ERROR;
  }

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	2200      	movs	r2, #0
 8007f24:	611a      	str	r2, [r3, #16]

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_READY;
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	2201      	movs	r2, #1
 8007f2a:	731a      	strb	r2, [r3, #12]

  /* Prevent MISRA-C2012-Rule-2.2_b */
  UNUSED(node_info);

  return HAL_OK;
 8007f2c:	2300      	movs	r3, #0
 8007f2e:	e003      	b.n	8007f38 <HAL_DMAEx_List_SetCircularModeConfig+0xd4>
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NOTFOUND;
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	2206      	movs	r2, #6
 8007f34:	611a      	str	r2, [r3, #16]
    return HAL_ERROR;
 8007f36:	2301      	movs	r3, #1
}
 8007f38:	4618      	mov	r0, r3
 8007f3a:	3728      	adds	r7, #40	; 0x28
 8007f3c:	46bd      	mov	sp, r7
 8007f3e:	bd80      	pop	{r7, pc}

08007f40 <HAL_DMAEx_List_LinkQ>:
  * @param  pQList : Pointer to a DMA_QListTypeDef structure that contains queue information.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_LinkQ(DMA_HandleTypeDef *const hdma,
                                       DMA_QListTypeDef *const pQList)
{
 8007f40:	b480      	push	{r7}
 8007f42:	b085      	sub	sp, #20
 8007f44:	af00      	add	r7, sp, #0
 8007f46:	6078      	str	r0, [r7, #4]
 8007f48:	6039      	str	r1, [r7, #0]
  HAL_DMA_StateTypeDef state;

  /* Check the DMA channel handle and the queue parameters */
  if ((hdma == NULL) || (pQList == NULL))
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d002      	beq.n	8007f56 <HAL_DMAEx_List_LinkQ+0x16>
 8007f50:	683b      	ldr	r3, [r7, #0]
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d101      	bne.n	8007f5a <HAL_DMAEx_List_LinkQ+0x1a>
  {
    return HAL_ERROR;
 8007f56:	2301      	movs	r3, #1
 8007f58:	e072      	b.n	8008040 <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Get DMA state */
  state = hdma->State;
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8007f60:	73fb      	strb	r3, [r7, #15]

  /* Check DMA channel state */
  if ((hdma->State == HAL_DMA_STATE_BUSY) || (state == HAL_DMA_STATE_SUSPEND))
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8007f68:	b2db      	uxtb	r3, r3
 8007f6a:	2b02      	cmp	r3, #2
 8007f6c:	d002      	beq.n	8007f74 <HAL_DMAEx_List_LinkQ+0x34>
 8007f6e:	7bfb      	ldrb	r3, [r7, #15]
 8007f70:	2b05      	cmp	r3, #5
 8007f72:	d108      	bne.n	8007f86 <HAL_DMAEx_List_LinkQ+0x46>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	2240      	movs	r2, #64	; 0x40
 8007f78:	659a      	str	r2, [r3, #88]	; 0x58

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	2200      	movs	r2, #0
 8007f7e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

    return HAL_ERROR;
 8007f82:	2301      	movs	r3, #1
 8007f84:	e05c      	b.n	8008040 <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Check queue state */
  if (pQList->State == HAL_DMA_QUEUE_STATE_BUSY)
 8007f86:	683b      	ldr	r3, [r7, #0]
 8007f88:	7b1b      	ldrb	r3, [r3, #12]
 8007f8a:	b2db      	uxtb	r3, r3
 8007f8c:	2b02      	cmp	r3, #2
 8007f8e:	d104      	bne.n	8007f9a <HAL_DMAEx_List_LinkQ+0x5a>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_BUSY;
 8007f90:	683b      	ldr	r3, [r7, #0]
 8007f92:	2201      	movs	r2, #1
 8007f94:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8007f96:	2301      	movs	r3, #1
 8007f98:	e052      	b.n	8008040 <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Check linearity compatibility */
  if ((IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) == 0U) &&
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	4a2b      	ldr	r2, [pc, #172]	; (800804c <HAL_DMAEx_List_LinkQ+0x10c>)
 8007fa0:	4293      	cmp	r3, r2
 8007fa2:	d022      	beq.n	8007fea <HAL_DMAEx_List_LinkQ+0xaa>
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	4a29      	ldr	r2, [pc, #164]	; (8008050 <HAL_DMAEx_List_LinkQ+0x110>)
 8007faa:	4293      	cmp	r3, r2
 8007fac:	d01d      	beq.n	8007fea <HAL_DMAEx_List_LinkQ+0xaa>
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	4a28      	ldr	r2, [pc, #160]	; (8008054 <HAL_DMAEx_List_LinkQ+0x114>)
 8007fb4:	4293      	cmp	r3, r2
 8007fb6:	d018      	beq.n	8007fea <HAL_DMAEx_List_LinkQ+0xaa>
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	4a26      	ldr	r2, [pc, #152]	; (8008058 <HAL_DMAEx_List_LinkQ+0x118>)
 8007fbe:	4293      	cmp	r3, r2
 8007fc0:	d013      	beq.n	8007fea <HAL_DMAEx_List_LinkQ+0xaa>
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	4a25      	ldr	r2, [pc, #148]	; (800805c <HAL_DMAEx_List_LinkQ+0x11c>)
 8007fc8:	4293      	cmp	r3, r2
 8007fca:	d00e      	beq.n	8007fea <HAL_DMAEx_List_LinkQ+0xaa>
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	4a23      	ldr	r2, [pc, #140]	; (8008060 <HAL_DMAEx_List_LinkQ+0x120>)
 8007fd2:	4293      	cmp	r3, r2
 8007fd4:	d009      	beq.n	8007fea <HAL_DMAEx_List_LinkQ+0xaa>
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	4a22      	ldr	r2, [pc, #136]	; (8008064 <HAL_DMAEx_List_LinkQ+0x124>)
 8007fdc:	4293      	cmp	r3, r2
 8007fde:	d004      	beq.n	8007fea <HAL_DMAEx_List_LinkQ+0xaa>
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	4a20      	ldr	r2, [pc, #128]	; (8008068 <HAL_DMAEx_List_LinkQ+0x128>)
 8007fe6:	4293      	cmp	r3, r2
 8007fe8:	d101      	bne.n	8007fee <HAL_DMAEx_List_LinkQ+0xae>
 8007fea:	2301      	movs	r3, #1
 8007fec:	e000      	b.n	8007ff0 <HAL_DMAEx_List_LinkQ+0xb0>
 8007fee:	2300      	movs	r3, #0
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d10b      	bne.n	800800c <HAL_DMAEx_List_LinkQ+0xcc>
      ((pQList->Head->NodeInfo & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR))
 8007ff4:	683b      	ldr	r3, [r7, #0]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	6a1b      	ldr	r3, [r3, #32]
 8007ffa:	f003 0302 	and.w	r3, r3, #2
  if ((IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) == 0U) &&
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d004      	beq.n	800800c <HAL_DMAEx_List_LinkQ+0xcc>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_UNSUPPORTED;
 8008002:	683b      	ldr	r3, [r7, #0]
 8008004:	2203      	movs	r2, #3
 8008006:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8008008:	2301      	movs	r3, #1
 800800a:	e019      	b.n	8008040 <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Check circularity compatibility */
  if (hdma->Mode == DMA_LINKEDLIST_CIRCULAR)
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008010:	2b81      	cmp	r3, #129	; 0x81
 8008012:	d108      	bne.n	8008026 <HAL_DMAEx_List_LinkQ+0xe6>
  {
    /* Check first circular node */
    if (pQList->FirstCircularNode == NULL)
 8008014:	683b      	ldr	r3, [r7, #0]
 8008016:	685b      	ldr	r3, [r3, #4]
 8008018:	2b00      	cmp	r3, #0
 800801a:	d10d      	bne.n	8008038 <HAL_DMAEx_List_LinkQ+0xf8>
    {
      /* Update the queue error code */
      pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 800801c:	683b      	ldr	r3, [r7, #0]
 800801e:	2204      	movs	r2, #4
 8008020:	611a      	str	r2, [r3, #16]

      return HAL_ERROR;
 8008022:	2301      	movs	r3, #1
 8008024:	e00c      	b.n	8008040 <HAL_DMAEx_List_LinkQ+0x100>
    }
  }
  else
  {
    /* Check first circular node */
    if (pQList->FirstCircularNode != NULL)
 8008026:	683b      	ldr	r3, [r7, #0]
 8008028:	685b      	ldr	r3, [r3, #4]
 800802a:	2b00      	cmp	r3, #0
 800802c:	d004      	beq.n	8008038 <HAL_DMAEx_List_LinkQ+0xf8>
    {
      /* Update the queue error code */
      pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 800802e:	683b      	ldr	r3, [r7, #0]
 8008030:	2204      	movs	r2, #4
 8008032:	611a      	str	r2, [r3, #16]

      return HAL_ERROR;
 8008034:	2301      	movs	r3, #1
 8008036:	e003      	b.n	8008040 <HAL_DMAEx_List_LinkQ+0x100>
    }
  }

  /* Register queue to DMA handle */
  hdma->LinkedListQueue = pQList;
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	683a      	ldr	r2, [r7, #0]
 800803c:	675a      	str	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800803e:	2300      	movs	r3, #0
}
 8008040:	4618      	mov	r0, r3
 8008042:	3714      	adds	r7, #20
 8008044:	46bd      	mov	sp, r7
 8008046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800804a:	4770      	bx	lr
 800804c:	40020650 	.word	0x40020650
 8008050:	50020650 	.word	0x50020650
 8008054:	400206d0 	.word	0x400206d0
 8008058:	500206d0 	.word	0x500206d0
 800805c:	40020750 	.word	0x40020750
 8008060:	50020750 	.word	0x50020750
 8008064:	400207d0 	.word	0x400207d0
 8008068:	500207d0 	.word	0x500207d0

0800806c <DMA_List_Init>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
static void DMA_List_Init(DMA_HandleTypeDef const *const hdma)
{
 800806c:	b480      	push	{r7}
 800806e:	b085      	sub	sp, #20
 8008070:	af00      	add	r7, sp, #0
 8008072:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Prepare DMA Channel Control Register (CCR) value */
  tmpreg = hdma->InitLinkedList.Priority | hdma->InitLinkedList.LinkStepMode;
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800807c:	4313      	orrs	r3, r2
 800807e:	60fb      	str	r3, [r7, #12]

  /* Check DMA channel instance */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	4a85      	ldr	r2, [pc, #532]	; (800829c <DMA_List_Init+0x230>)
 8008086:	4293      	cmp	r3, r2
 8008088:	f000 80a0 	beq.w	80081cc <DMA_List_Init+0x160>
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	4a83      	ldr	r2, [pc, #524]	; (80082a0 <DMA_List_Init+0x234>)
 8008092:	4293      	cmp	r3, r2
 8008094:	f000 809a 	beq.w	80081cc <DMA_List_Init+0x160>
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	4a81      	ldr	r2, [pc, #516]	; (80082a4 <DMA_List_Init+0x238>)
 800809e:	4293      	cmp	r3, r2
 80080a0:	f000 8094 	beq.w	80081cc <DMA_List_Init+0x160>
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	4a7f      	ldr	r2, [pc, #508]	; (80082a8 <DMA_List_Init+0x23c>)
 80080aa:	4293      	cmp	r3, r2
 80080ac:	f000 808e 	beq.w	80081cc <DMA_List_Init+0x160>
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	4a7d      	ldr	r2, [pc, #500]	; (80082ac <DMA_List_Init+0x240>)
 80080b6:	4293      	cmp	r3, r2
 80080b8:	f000 8088 	beq.w	80081cc <DMA_List_Init+0x160>
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	4a7b      	ldr	r2, [pc, #492]	; (80082b0 <DMA_List_Init+0x244>)
 80080c2:	4293      	cmp	r3, r2
 80080c4:	f000 8082 	beq.w	80081cc <DMA_List_Init+0x160>
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	4a79      	ldr	r2, [pc, #484]	; (80082b4 <DMA_List_Init+0x248>)
 80080ce:	4293      	cmp	r3, r2
 80080d0:	d07c      	beq.n	80081cc <DMA_List_Init+0x160>
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	4a78      	ldr	r2, [pc, #480]	; (80082b8 <DMA_List_Init+0x24c>)
 80080d8:	4293      	cmp	r3, r2
 80080da:	d077      	beq.n	80081cc <DMA_List_Init+0x160>
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	4a76      	ldr	r2, [pc, #472]	; (80082bc <DMA_List_Init+0x250>)
 80080e2:	4293      	cmp	r3, r2
 80080e4:	d072      	beq.n	80081cc <DMA_List_Init+0x160>
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	4a75      	ldr	r2, [pc, #468]	; (80082c0 <DMA_List_Init+0x254>)
 80080ec:	4293      	cmp	r3, r2
 80080ee:	d06d      	beq.n	80081cc <DMA_List_Init+0x160>
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	4a73      	ldr	r2, [pc, #460]	; (80082c4 <DMA_List_Init+0x258>)
 80080f6:	4293      	cmp	r3, r2
 80080f8:	d068      	beq.n	80081cc <DMA_List_Init+0x160>
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	4a72      	ldr	r2, [pc, #456]	; (80082c8 <DMA_List_Init+0x25c>)
 8008100:	4293      	cmp	r3, r2
 8008102:	d063      	beq.n	80081cc <DMA_List_Init+0x160>
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	4a70      	ldr	r2, [pc, #448]	; (80082cc <DMA_List_Init+0x260>)
 800810a:	4293      	cmp	r3, r2
 800810c:	d05e      	beq.n	80081cc <DMA_List_Init+0x160>
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	4a6f      	ldr	r2, [pc, #444]	; (80082d0 <DMA_List_Init+0x264>)
 8008114:	4293      	cmp	r3, r2
 8008116:	d059      	beq.n	80081cc <DMA_List_Init+0x160>
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	4a6d      	ldr	r2, [pc, #436]	; (80082d4 <DMA_List_Init+0x268>)
 800811e:	4293      	cmp	r3, r2
 8008120:	d054      	beq.n	80081cc <DMA_List_Init+0x160>
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	4a6c      	ldr	r2, [pc, #432]	; (80082d8 <DMA_List_Init+0x26c>)
 8008128:	4293      	cmp	r3, r2
 800812a:	d04f      	beq.n	80081cc <DMA_List_Init+0x160>
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	4a6a      	ldr	r2, [pc, #424]	; (80082dc <DMA_List_Init+0x270>)
 8008132:	4293      	cmp	r3, r2
 8008134:	d04a      	beq.n	80081cc <DMA_List_Init+0x160>
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	4a69      	ldr	r2, [pc, #420]	; (80082e0 <DMA_List_Init+0x274>)
 800813c:	4293      	cmp	r3, r2
 800813e:	d045      	beq.n	80081cc <DMA_List_Init+0x160>
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	4a67      	ldr	r2, [pc, #412]	; (80082e4 <DMA_List_Init+0x278>)
 8008146:	4293      	cmp	r3, r2
 8008148:	d040      	beq.n	80081cc <DMA_List_Init+0x160>
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	4a66      	ldr	r2, [pc, #408]	; (80082e8 <DMA_List_Init+0x27c>)
 8008150:	4293      	cmp	r3, r2
 8008152:	d03b      	beq.n	80081cc <DMA_List_Init+0x160>
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	4a64      	ldr	r2, [pc, #400]	; (80082ec <DMA_List_Init+0x280>)
 800815a:	4293      	cmp	r3, r2
 800815c:	d036      	beq.n	80081cc <DMA_List_Init+0x160>
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	4a63      	ldr	r2, [pc, #396]	; (80082f0 <DMA_List_Init+0x284>)
 8008164:	4293      	cmp	r3, r2
 8008166:	d031      	beq.n	80081cc <DMA_List_Init+0x160>
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	4a61      	ldr	r2, [pc, #388]	; (80082f4 <DMA_List_Init+0x288>)
 800816e:	4293      	cmp	r3, r2
 8008170:	d02c      	beq.n	80081cc <DMA_List_Init+0x160>
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	4a60      	ldr	r2, [pc, #384]	; (80082f8 <DMA_List_Init+0x28c>)
 8008178:	4293      	cmp	r3, r2
 800817a:	d027      	beq.n	80081cc <DMA_List_Init+0x160>
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	4a5e      	ldr	r2, [pc, #376]	; (80082fc <DMA_List_Init+0x290>)
 8008182:	4293      	cmp	r3, r2
 8008184:	d022      	beq.n	80081cc <DMA_List_Init+0x160>
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	4a5d      	ldr	r2, [pc, #372]	; (8008300 <DMA_List_Init+0x294>)
 800818c:	4293      	cmp	r3, r2
 800818e:	d01d      	beq.n	80081cc <DMA_List_Init+0x160>
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	4a5b      	ldr	r2, [pc, #364]	; (8008304 <DMA_List_Init+0x298>)
 8008196:	4293      	cmp	r3, r2
 8008198:	d018      	beq.n	80081cc <DMA_List_Init+0x160>
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	4a5a      	ldr	r2, [pc, #360]	; (8008308 <DMA_List_Init+0x29c>)
 80081a0:	4293      	cmp	r3, r2
 80081a2:	d013      	beq.n	80081cc <DMA_List_Init+0x160>
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	4a58      	ldr	r2, [pc, #352]	; (800830c <DMA_List_Init+0x2a0>)
 80081aa:	4293      	cmp	r3, r2
 80081ac:	d00e      	beq.n	80081cc <DMA_List_Init+0x160>
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	4a57      	ldr	r2, [pc, #348]	; (8008310 <DMA_List_Init+0x2a4>)
 80081b4:	4293      	cmp	r3, r2
 80081b6:	d009      	beq.n	80081cc <DMA_List_Init+0x160>
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	4a55      	ldr	r2, [pc, #340]	; (8008314 <DMA_List_Init+0x2a8>)
 80081be:	4293      	cmp	r3, r2
 80081c0:	d004      	beq.n	80081cc <DMA_List_Init+0x160>
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	4a54      	ldr	r2, [pc, #336]	; (8008318 <DMA_List_Init+0x2ac>)
 80081c8:	4293      	cmp	r3, r2
 80081ca:	d101      	bne.n	80081d0 <DMA_List_Init+0x164>
 80081cc:	2301      	movs	r3, #1
 80081ce:	e000      	b.n	80081d2 <DMA_List_Init+0x166>
 80081d0:	2300      	movs	r3, #0
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d004      	beq.n	80081e0 <DMA_List_Init+0x174>
  {
    tmpreg |= hdma->InitLinkedList.LinkAllocatedPort;
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081da:	68fa      	ldr	r2, [r7, #12]
 80081dc:	4313      	orrs	r3, r2
 80081de:	60fb      	str	r3, [r7, #12]
  }

  /* Write DMA Channel Control Register (CCR) */
  MODIFY_REG(hdma->Instance->CCR, DMA_CCR_PRIO | DMA_CCR_LAP | DMA_CCR_LSM, tmpreg);
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	695b      	ldr	r3, [r3, #20]
 80081e6:	f423 0143 	bic.w	r1, r3, #12779520	; 0xc30000
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	68fa      	ldr	r2, [r7, #12]
 80081f0:	430a      	orrs	r2, r1
 80081f2:	615a      	str	r2, [r3, #20]

  /* Write DMA Channel Control Register (CTR1) */
  WRITE_REG(hdma->Instance->CTR1, 0U);
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	2200      	movs	r2, #0
 80081fa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write DMA Channel Control Register (CTR2) */
  WRITE_REG(hdma->Instance->CTR2, hdma->InitLinkedList.TransferEventMode);
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	687a      	ldr	r2, [r7, #4]
 8008202:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8008204:	645a      	str	r2, [r3, #68]	; 0x44

  /* Write DMA Channel Control Register (CBR1) */
  WRITE_REG(hdma->Instance->CBR1, 0U);
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	2200      	movs	r2, #0
 800820c:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write DMA Channel Control Register (CSAR) */
  WRITE_REG(hdma->Instance->CSAR, 0U);
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	2200      	movs	r2, #0
 8008214:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write DMA Channel Control Register (CDAR) */
  WRITE_REG(hdma->Instance->CDAR, 0U);
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	2200      	movs	r2, #0
 800821c:	651a      	str	r2, [r3, #80]	; 0x50

  /* If 2D Addressing is supported by current channel */
  if (IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) != 0U)
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	4a36      	ldr	r2, [pc, #216]	; (80082fc <DMA_List_Init+0x290>)
 8008224:	4293      	cmp	r3, r2
 8008226:	d022      	beq.n	800826e <DMA_List_Init+0x202>
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	4a34      	ldr	r2, [pc, #208]	; (8008300 <DMA_List_Init+0x294>)
 800822e:	4293      	cmp	r3, r2
 8008230:	d01d      	beq.n	800826e <DMA_List_Init+0x202>
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	4a33      	ldr	r2, [pc, #204]	; (8008304 <DMA_List_Init+0x298>)
 8008238:	4293      	cmp	r3, r2
 800823a:	d018      	beq.n	800826e <DMA_List_Init+0x202>
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	4a31      	ldr	r2, [pc, #196]	; (8008308 <DMA_List_Init+0x29c>)
 8008242:	4293      	cmp	r3, r2
 8008244:	d013      	beq.n	800826e <DMA_List_Init+0x202>
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	4a30      	ldr	r2, [pc, #192]	; (800830c <DMA_List_Init+0x2a0>)
 800824c:	4293      	cmp	r3, r2
 800824e:	d00e      	beq.n	800826e <DMA_List_Init+0x202>
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	4a2e      	ldr	r2, [pc, #184]	; (8008310 <DMA_List_Init+0x2a4>)
 8008256:	4293      	cmp	r3, r2
 8008258:	d009      	beq.n	800826e <DMA_List_Init+0x202>
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	4a2d      	ldr	r2, [pc, #180]	; (8008314 <DMA_List_Init+0x2a8>)
 8008260:	4293      	cmp	r3, r2
 8008262:	d004      	beq.n	800826e <DMA_List_Init+0x202>
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	4a2b      	ldr	r2, [pc, #172]	; (8008318 <DMA_List_Init+0x2ac>)
 800826a:	4293      	cmp	r3, r2
 800826c:	d101      	bne.n	8008272 <DMA_List_Init+0x206>
 800826e:	2301      	movs	r3, #1
 8008270:	e000      	b.n	8008274 <DMA_List_Init+0x208>
 8008272:	2300      	movs	r3, #0
 8008274:	2b00      	cmp	r3, #0
 8008276:	d007      	beq.n	8008288 <DMA_List_Init+0x21c>
  {
    /* Write DMA Channel Control Register (CTR3) */
    WRITE_REG(hdma->Instance->CTR3, 0U);
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	2200      	movs	r2, #0
 800827e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Write DMA Channel Control Register (CBR2) */
    WRITE_REG(hdma->Instance->CBR2, 0U);
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	2200      	movs	r2, #0
 8008286:	659a      	str	r2, [r3, #88]	; 0x58
  }

  /* Write DMA Channel linked-list address register (CLLR) */
  WRITE_REG(hdma->Instance->CLLR, 0U);
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	2200      	movs	r2, #0
 800828e:	67da      	str	r2, [r3, #124]	; 0x7c
}
 8008290:	bf00      	nop
 8008292:	3714      	adds	r7, #20
 8008294:	46bd      	mov	sp, r7
 8008296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800829a:	4770      	bx	lr
 800829c:	40020050 	.word	0x40020050
 80082a0:	50020050 	.word	0x50020050
 80082a4:	400200d0 	.word	0x400200d0
 80082a8:	500200d0 	.word	0x500200d0
 80082ac:	40020150 	.word	0x40020150
 80082b0:	50020150 	.word	0x50020150
 80082b4:	400201d0 	.word	0x400201d0
 80082b8:	500201d0 	.word	0x500201d0
 80082bc:	40020250 	.word	0x40020250
 80082c0:	50020250 	.word	0x50020250
 80082c4:	400202d0 	.word	0x400202d0
 80082c8:	500202d0 	.word	0x500202d0
 80082cc:	40020350 	.word	0x40020350
 80082d0:	50020350 	.word	0x50020350
 80082d4:	400203d0 	.word	0x400203d0
 80082d8:	500203d0 	.word	0x500203d0
 80082dc:	40020450 	.word	0x40020450
 80082e0:	50020450 	.word	0x50020450
 80082e4:	400204d0 	.word	0x400204d0
 80082e8:	500204d0 	.word	0x500204d0
 80082ec:	40020550 	.word	0x40020550
 80082f0:	50020550 	.word	0x50020550
 80082f4:	400205d0 	.word	0x400205d0
 80082f8:	500205d0 	.word	0x500205d0
 80082fc:	40020650 	.word	0x40020650
 8008300:	50020650 	.word	0x50020650
 8008304:	400206d0 	.word	0x400206d0
 8008308:	500206d0 	.word	0x500206d0
 800830c:	40020750 	.word	0x40020750
 8008310:	50020750 	.word	0x50020750
 8008314:	400207d0 	.word	0x400207d0
 8008318:	500207d0 	.word	0x500207d0

0800831c <DMA_List_BuildNode>:
  *                       configurations.
  * @retval None.
  */
static void DMA_List_BuildNode(DMA_NodeConfTypeDef const *const pNodeConfig,
                               DMA_NodeTypeDef *const pNode)
{
 800831c:	b480      	push	{r7}
 800831e:	b085      	sub	sp, #20
 8008320:	af00      	add	r7, sp, #0
 8008322:	6078      	str	r0, [r7, #4]
 8008324:	6039      	str	r1, [r7, #0]
  int32_t blockoffset;

  /* Update CTR1 register value ***************************************************************************************/
  /* Prepare DMA channel transfer register (CTR1) value */
  pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] = pNodeConfig->Init.DestInc                     |
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	695a      	ldr	r2, [r3, #20]
                                                   pNodeConfig->Init.DestDataWidth               |
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	69db      	ldr	r3, [r3, #28]
  pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] = pNodeConfig->Init.DestInc                     |
 800832e:	431a      	orrs	r2, r3
                                                   pNodeConfig->DataHandlingConfig.DataAlignment |
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                                                   pNodeConfig->Init.DestDataWidth               |
 8008334:	431a      	orrs	r2, r3
                                                   pNodeConfig->Init.SrcInc                      |
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	691b      	ldr	r3, [r3, #16]
                                                   pNodeConfig->DataHandlingConfig.DataAlignment |
 800833a:	431a      	orrs	r2, r3
                                                   pNodeConfig->Init.SrcDataWidth;
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	699b      	ldr	r3, [r3, #24]
                                                   pNodeConfig->Init.SrcInc                      |
 8008340:	431a      	orrs	r2, r3
  pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] = pNodeConfig->Init.DestInc                     |
 8008342:	683b      	ldr	r3, [r7, #0]
 8008344:	601a      	str	r2, [r3, #0]
    pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] |= DMA_CTR1_DSEC;
  }
#endif /* defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  /* Add parameters related to DMA configuration */
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_GPDMA) == DMA_CHANNEL_TYPE_GPDMA)
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	f003 0320 	and.w	r3, r3, #32
 800834e:	2b00      	cmp	r3, #0
 8008350:	d017      	beq.n	8008382 <DMA_List_BuildNode+0x66>
  {
    /* Prepare DMA channel transfer register (CTR1) value */
    pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] |=
 8008352:	683b      	ldr	r3, [r7, #0]
 8008354:	681a      	ldr	r2, [r3, #0]
      (pNodeConfig->Init.TransferAllocatedPort | pNodeConfig->DataHandlingConfig.DataExchange |
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800835e:	4319      	orrs	r1, r3
       (((pNodeConfig->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1)    |
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008364:	3b01      	subs	r3, #1
 8008366:	051b      	lsls	r3, r3, #20
 8008368:	f003 737c 	and.w	r3, r3, #66060288	; 0x3f00000
      (pNodeConfig->Init.TransferAllocatedPort | pNodeConfig->DataHandlingConfig.DataExchange |
 800836c:	4319      	orrs	r1, r3
       (((pNodeConfig->Init.SrcBurstLength - 1U) << DMA_CTR1_SBL_1_Pos) & DMA_CTR1_SBL_1));
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008372:	3b01      	subs	r3, #1
 8008374:	011b      	lsls	r3, r3, #4
 8008376:	f403 737c 	and.w	r3, r3, #1008	; 0x3f0
       (((pNodeConfig->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1)    |
 800837a:	430b      	orrs	r3, r1
    pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] |=
 800837c:	431a      	orrs	r2, r3
 800837e:	683b      	ldr	r3, [r7, #0]
 8008380:	601a      	str	r2, [r3, #0]
  /*********************************************************************************** CTR1 register value is updated */


  /* Update CTR2 register value ***************************************************************************************/
  /* Prepare DMA channel transfer register 2 (CTR2) value */
  pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] = pNodeConfig->Init.TransferEventMode |
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	6b1a      	ldr	r2, [r3, #48]	; 0x30
                                                   (pNodeConfig->Init.Request & (DMA_CTR2_REQSEL | DMA_CTR2_SWREQ));
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	6859      	ldr	r1, [r3, #4]
 800838a:	f240 237f 	movw	r3, #639	; 0x27f
 800838e:	400b      	ands	r3, r1
  pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] = pNodeConfig->Init.TransferEventMode |
 8008390:	431a      	orrs	r2, r3
 8008392:	683b      	ldr	r3, [r7, #0]
 8008394:	605a      	str	r2, [r3, #4]

  /* Check for memory to peripheral transfer */
  if ((pNodeConfig->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	68db      	ldr	r3, [r3, #12]
 800839a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800839e:	d10c      	bne.n	80083ba <DMA_List_BuildNode+0x9e>
  {
    /* Check for GPDMA */
    if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_GPDMA) == DMA_CHANNEL_TYPE_GPDMA)
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	f003 0320 	and.w	r3, r3, #32
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d011      	beq.n	80083d0 <DMA_List_BuildNode+0xb4>
    {
      pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |= DMA_CTR2_DREQ;
 80083ac:	683b      	ldr	r3, [r7, #0]
 80083ae:	685b      	ldr	r3, [r3, #4]
 80083b0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80083b4:	683b      	ldr	r3, [r7, #0]
 80083b6:	605a      	str	r2, [r3, #4]
 80083b8:	e00a      	b.n	80083d0 <DMA_List_BuildNode+0xb4>
    }
  }
  /* Memory to memory transfer */
  else if ((pNodeConfig->Init.Direction) == DMA_MEMORY_TO_MEMORY)
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	68db      	ldr	r3, [r3, #12]
 80083be:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80083c2:	d105      	bne.n	80083d0 <DMA_List_BuildNode+0xb4>
  {
    pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |= DMA_CTR2_SWREQ;
 80083c4:	683b      	ldr	r3, [r7, #0]
 80083c6:	685b      	ldr	r3, [r3, #4]
 80083c8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80083cc:	683b      	ldr	r3, [r7, #0]
 80083ce:	605a      	str	r2, [r3, #4]
  {
    /* Prevent MISRA-C2012-Rule-15.7 */
  }

  /* Check if trigger feature is active */
  if (pNodeConfig->TriggerConfig.TriggerPolarity != DMA_TRIG_POLARITY_MASKED)
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d00f      	beq.n	80083f8 <DMA_List_BuildNode+0xdc>
  {
    /* Prepare DMA channel transfer register 2 (CTR2) value */
    pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |=
 80083d8:	683b      	ldr	r3, [r7, #0]
 80083da:	685a      	ldr	r2, [r3, #4]
      pNodeConfig->TriggerConfig.TriggerMode | pNodeConfig->TriggerConfig.TriggerPolarity |
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80083e4:	4319      	orrs	r1, r3
      ((pNodeConfig->TriggerConfig.TriggerSelection << DMA_CTR2_TRIGSEL_Pos) & DMA_CTR2_TRIGSEL);
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80083ea:	041b      	lsls	r3, r3, #16
 80083ec:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
      pNodeConfig->TriggerConfig.TriggerMode | pNodeConfig->TriggerConfig.TriggerPolarity |
 80083f0:	430b      	orrs	r3, r1
    pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |=
 80083f2:	431a      	orrs	r2, r3
 80083f4:	683b      	ldr	r3, [r7, #0]
 80083f6:	605a      	str	r2, [r3, #4]
  /*********************************************************************************** CTR2 register value is updated */


  /* Update CBR1 register value ***************************************************************************************/
  /* Prepare DMA channel block register 1 (CBR1) value */
  pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = (pNodeConfig->DataSize & DMA_CBR1_BNDT);
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80083fc:	b29a      	uxth	r2, r3
 80083fe:	683b      	ldr	r3, [r7, #0]
 8008400:	609a      	str	r2, [r3, #8]

  /* If 2D addressing is supported by the selected DMA channel */
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	f003 0302 	and.w	r3, r3, #2
 800840a:	2b00      	cmp	r3, #0
 800840c:	d04e      	beq.n	80084ac <DMA_List_BuildNode+0x190>
  {
    /* Set the new CBR1 Register value */
    pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |=
 800840e:	683b      	ldr	r3, [r7, #0]
 8008410:	689a      	ldr	r2, [r3, #8]
      (((pNodeConfig->RepeatBlockConfig.RepeatCount - 1U) << DMA_CBR1_BRC_Pos) & DMA_CBR1_BRC);
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008416:	3b01      	subs	r3, #1
 8008418:	0419      	lsls	r1, r3, #16
 800841a:	4b67      	ldr	r3, [pc, #412]	; (80085b8 <DMA_List_BuildNode+0x29c>)
 800841c:	400b      	ands	r3, r1
    pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |=
 800841e:	431a      	orrs	r2, r3
 8008420:	683b      	ldr	r3, [r7, #0]
 8008422:	609a      	str	r2, [r3, #8]

    /* If the source address offset is negative, set SDEC bit */
    if (pNodeConfig->RepeatBlockConfig.SrcAddrOffset < 0)
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008428:	2b00      	cmp	r3, #0
 800842a:	da06      	bge.n	800843a <DMA_List_BuildNode+0x11e>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_SDEC;
 800842c:	683b      	ldr	r3, [r7, #0]
 800842e:	689b      	ldr	r3, [r3, #8]
 8008430:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8008434:	683b      	ldr	r3, [r7, #0]
 8008436:	609a      	str	r2, [r3, #8]
 8008438:	e005      	b.n	8008446 <DMA_List_BuildNode+0x12a>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_SDEC);
 800843a:	683b      	ldr	r3, [r7, #0]
 800843c:	689b      	ldr	r3, [r3, #8]
 800843e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8008442:	683b      	ldr	r3, [r7, #0]
 8008444:	609a      	str	r2, [r3, #8]
    }

    /* If the destination address offset is negative, set DDEC bit */
    if (pNodeConfig->RepeatBlockConfig.DestAddrOffset < 0)
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800844a:	2b00      	cmp	r3, #0
 800844c:	da06      	bge.n	800845c <DMA_List_BuildNode+0x140>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_DDEC;
 800844e:	683b      	ldr	r3, [r7, #0]
 8008450:	689b      	ldr	r3, [r3, #8]
 8008452:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008456:	683b      	ldr	r3, [r7, #0]
 8008458:	609a      	str	r2, [r3, #8]
 800845a:	e005      	b.n	8008468 <DMA_List_BuildNode+0x14c>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_DDEC);
 800845c:	683b      	ldr	r3, [r7, #0]
 800845e:	689b      	ldr	r3, [r3, #8]
 8008460:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8008464:	683b      	ldr	r3, [r7, #0]
 8008466:	609a      	str	r2, [r3, #8]
    }

    /* If the repeated block source address offset is negative, set BRSEC bit */
    if (pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset < 0)
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800846c:	2b00      	cmp	r3, #0
 800846e:	da06      	bge.n	800847e <DMA_List_BuildNode+0x162>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_BRSDEC;
 8008470:	683b      	ldr	r3, [r7, #0]
 8008472:	689b      	ldr	r3, [r3, #8]
 8008474:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008478:	683b      	ldr	r3, [r7, #0]
 800847a:	609a      	str	r2, [r3, #8]
 800847c:	e005      	b.n	800848a <DMA_List_BuildNode+0x16e>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_BRSDEC);
 800847e:	683b      	ldr	r3, [r7, #0]
 8008480:	689b      	ldr	r3, [r3, #8]
 8008482:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8008486:	683b      	ldr	r3, [r7, #0]
 8008488:	609a      	str	r2, [r3, #8]
    }

    /* if the repeated block destination address offset is negative, set BRDEC bit */
    if (pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset < 0)
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800848e:	2b00      	cmp	r3, #0
 8008490:	da06      	bge.n	80084a0 <DMA_List_BuildNode+0x184>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_BRDDEC;
 8008492:	683b      	ldr	r3, [r7, #0]
 8008494:	689b      	ldr	r3, [r3, #8]
 8008496:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800849a:	683b      	ldr	r3, [r7, #0]
 800849c:	609a      	str	r2, [r3, #8]
 800849e:	e005      	b.n	80084ac <DMA_List_BuildNode+0x190>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_BRDDEC);
 80084a0:	683b      	ldr	r3, [r7, #0]
 80084a2:	689b      	ldr	r3, [r3, #8]
 80084a4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80084a8:	683b      	ldr	r3, [r7, #0]
 80084aa:	609a      	str	r2, [r3, #8]
  }
  /*********************************************************************************** CBR1 register value is updated */


  /* Update CSAR register value ***************************************************************************************/
  pNode->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] = pNodeConfig->SrcAddress;
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80084b0:	683b      	ldr	r3, [r7, #0]
 80084b2:	60da      	str	r2, [r3, #12]
  /*********************************************************************************** CSAR register value is updated */


  /* Update CDAR register value ***************************************************************************************/
  pNode->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = pNodeConfig->DstAddress;
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80084b8:	683b      	ldr	r3, [r7, #0]
 80084ba:	611a      	str	r2, [r3, #16]
  /*********************************************************************************** CDAR register value is updated */


  /* Check if the selected channel is 2D addressing */
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	f003 0302 	and.w	r3, r3, #2
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d059      	beq.n	800857c <DMA_List_BuildNode+0x260>
  {
    /* Update CTR3 register value *************************************************************************************/
    /* Write new CTR3 Register value : source address offset */
    if (pNodeConfig->RepeatBlockConfig.SrcAddrOffset < 0)
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	da09      	bge.n	80084e4 <DMA_List_BuildNode+0x1c8>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.SrcAddrOffset);
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80084d4:	425b      	negs	r3, r3
 80084d6:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] = ((uint32_t)blockoffset & DMA_CTR3_SAO);
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	f3c3 020c 	ubfx	r2, r3, #0, #13
 80084de:	683b      	ldr	r3, [r7, #0]
 80084e0:	615a      	str	r2, [r3, #20]
 80084e2:	e005      	b.n	80084f0 <DMA_List_BuildNode+0x1d4>
    }
    else
    {
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] =
        ((uint32_t)pNodeConfig->RepeatBlockConfig.SrcAddrOffset & DMA_CTR3_SAO);
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80084e8:	f3c3 020c 	ubfx	r2, r3, #0, #13
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] =
 80084ec:	683b      	ldr	r3, [r7, #0]
 80084ee:	615a      	str	r2, [r3, #20]
    }

    /* Write new CTR3 Register value : destination address offset */
    if (pNodeConfig->RepeatBlockConfig.DestAddrOffset < 0)
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	da0d      	bge.n	8008514 <DMA_List_BuildNode+0x1f8>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.DestAddrOffset);
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80084fc:	425b      	negs	r3, r3
 80084fe:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] |= (((uint32_t)blockoffset << DMA_CTR3_DAO_Pos) & DMA_CTR3_DAO);
 8008500:	683b      	ldr	r3, [r7, #0]
 8008502:	695a      	ldr	r2, [r3, #20]
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	0419      	lsls	r1, r3, #16
 8008508:	4b2c      	ldr	r3, [pc, #176]	; (80085bc <DMA_List_BuildNode+0x2a0>)
 800850a:	400b      	ands	r3, r1
 800850c:	431a      	orrs	r2, r3
 800850e:	683b      	ldr	r3, [r7, #0]
 8008510:	615a      	str	r2, [r3, #20]
 8008512:	e009      	b.n	8008528 <DMA_List_BuildNode+0x20c>
    }
    else
    {
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] |=
 8008514:	683b      	ldr	r3, [r7, #0]
 8008516:	695a      	ldr	r2, [r3, #20]
        (((uint32_t)pNodeConfig->RepeatBlockConfig.DestAddrOffset << DMA_CTR3_DAO_Pos) & DMA_CTR3_DAO);
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800851c:	0419      	lsls	r1, r3, #16
 800851e:	4b27      	ldr	r3, [pc, #156]	; (80085bc <DMA_List_BuildNode+0x2a0>)
 8008520:	400b      	ands	r3, r1
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] |=
 8008522:	431a      	orrs	r2, r3
 8008524:	683b      	ldr	r3, [r7, #0]
 8008526:	615a      	str	r2, [r3, #20]
    /********************************************************************************* CTR3 register value is updated */


    /* Update CBR2 register value *************************************************************************************/
    /* Write new CBR2 Register value : repeated block source address offset */
    if (pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset < 0)
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800852c:	2b00      	cmp	r3, #0
 800852e:	da08      	bge.n	8008542 <DMA_List_BuildNode+0x226>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset);
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008534:	425b      	negs	r3, r3
 8008536:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] = ((uint32_t)blockoffset & DMA_CBR2_BRSAO);
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	b29a      	uxth	r2, r3
 800853c:	683b      	ldr	r3, [r7, #0]
 800853e:	619a      	str	r2, [r3, #24]
 8008540:	e004      	b.n	800854c <DMA_List_BuildNode+0x230>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] =
        ((uint32_t)pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset & DMA_CBR2_BRSAO);
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008546:	b29a      	uxth	r2, r3
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] =
 8008548:	683b      	ldr	r3, [r7, #0]
 800854a:	619a      	str	r2, [r3, #24]
    }

    /* Write new CBR2 Register value : repeated block destination address offset */
    if (pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset < 0)
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008550:	2b00      	cmp	r3, #0
 8008552:	da0b      	bge.n	800856c <DMA_List_BuildNode+0x250>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset);
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008558:	425b      	negs	r3, r3
 800855a:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 800855c:	683b      	ldr	r3, [r7, #0]
 800855e:	699a      	ldr	r2, [r3, #24]
        (((uint32_t)blockoffset & DMA_CBR2_BRSAO) << DMA_CBR2_BRDAO_Pos);
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	041b      	lsls	r3, r3, #16
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 8008564:	431a      	orrs	r2, r3
 8008566:	683b      	ldr	r3, [r7, #0]
 8008568:	619a      	str	r2, [r3, #24]
 800856a:	e007      	b.n	800857c <DMA_List_BuildNode+0x260>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 800856c:	683b      	ldr	r3, [r7, #0]
 800856e:	699a      	ldr	r2, [r3, #24]
        (((uint32_t)pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset << DMA_CBR2_BRDAO_Pos) & DMA_CBR2_BRDAO);
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008574:	041b      	lsls	r3, r3, #16
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 8008576:	431a      	orrs	r2, r3
 8008578:	683b      	ldr	r3, [r7, #0]
 800857a:	619a      	str	r2, [r3, #24]
  }


  /* Update node information value ************************************************************************************/
  /* Set node information */
  pNode->NodeInfo = pNodeConfig->NodeType;
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	681a      	ldr	r2, [r3, #0]
 8008580:	683b      	ldr	r3, [r7, #0]
 8008582:	621a      	str	r2, [r3, #32]
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	f003 0302 	and.w	r3, r3, #2
 800858c:	2b00      	cmp	r3, #0
 800858e:	d006      	beq.n	800859e <DMA_List_BuildNode+0x282>
  {
    pNode->NodeInfo |= (NODE_CLLR_2D_DEFAULT_OFFSET << NODE_CLLR_IDX_POS);
 8008590:	683b      	ldr	r3, [r7, #0]
 8008592:	6a1b      	ldr	r3, [r3, #32]
 8008594:	f443 62e0 	orr.w	r2, r3, #1792	; 0x700
 8008598:	683b      	ldr	r3, [r7, #0]
 800859a:	621a      	str	r2, [r3, #32]
  else
  {
    pNode->NodeInfo |= (NODE_CLLR_LINEAR_DEFAULT_OFFSET << NODE_CLLR_IDX_POS);
  }
  /******************************************************************************** Node information value is updated */
}
 800859c:	e005      	b.n	80085aa <DMA_List_BuildNode+0x28e>
    pNode->NodeInfo |= (NODE_CLLR_LINEAR_DEFAULT_OFFSET << NODE_CLLR_IDX_POS);
 800859e:	683b      	ldr	r3, [r7, #0]
 80085a0:	6a1b      	ldr	r3, [r3, #32]
 80085a2:	f443 62a0 	orr.w	r2, r3, #1280	; 0x500
 80085a6:	683b      	ldr	r3, [r7, #0]
 80085a8:	621a      	str	r2, [r3, #32]
}
 80085aa:	bf00      	nop
 80085ac:	3714      	adds	r7, #20
 80085ae:	46bd      	mov	sp, r7
 80085b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085b4:	4770      	bx	lr
 80085b6:	bf00      	nop
 80085b8:	07ff0000 	.word	0x07ff0000
 80085bc:	1fff0000 	.word	0x1fff0000

080085c0 <DMA_List_CheckNodesBaseAddresses>:
  * @retval Return 0 when nodes addresses are compatible, 1 otherwise.
  */
static uint32_t DMA_List_CheckNodesBaseAddresses(DMA_NodeTypeDef const *const pNode1,
                                                 DMA_NodeTypeDef const *const pNode2,
                                                 DMA_NodeTypeDef const *const pNode3)
{
 80085c0:	b480      	push	{r7}
 80085c2:	b087      	sub	sp, #28
 80085c4:	af00      	add	r7, sp, #0
 80085c6:	60f8      	str	r0, [r7, #12]
 80085c8:	60b9      	str	r1, [r7, #8]
 80085ca:	607a      	str	r2, [r7, #4]
  uint32_t temp = (((uint32_t)pNode1 | (uint32_t)pNode2 | (uint32_t)pNode3) & DMA_CLBAR_LBA);
 80085cc:	68fa      	ldr	r2, [r7, #12]
 80085ce:	68bb      	ldr	r3, [r7, #8]
 80085d0:	431a      	orrs	r2, r3
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	4313      	orrs	r3, r2
 80085d6:	0c1b      	lsrs	r3, r3, #16
 80085d8:	041b      	lsls	r3, r3, #16
 80085da:	613b      	str	r3, [r7, #16]
  uint32_t ref  = 0U;
 80085dc:	2300      	movs	r3, #0
 80085de:	617b      	str	r3, [r7, #20]

  /* Check node 1 address */
  if ((uint32_t)pNode1 != 0U)
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d002      	beq.n	80085ec <DMA_List_CheckNodesBaseAddresses+0x2c>
  {
    ref = (uint32_t)pNode1;
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	617b      	str	r3, [r7, #20]
 80085ea:	e00a      	b.n	8008602 <DMA_List_CheckNodesBaseAddresses+0x42>
  }
  /* Check node 2 address */
  else if ((uint32_t)pNode2 != 0U)
 80085ec:	68bb      	ldr	r3, [r7, #8]
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d002      	beq.n	80085f8 <DMA_List_CheckNodesBaseAddresses+0x38>
  {
    ref = (uint32_t)pNode2;
 80085f2:	68bb      	ldr	r3, [r7, #8]
 80085f4:	617b      	str	r3, [r7, #20]
 80085f6:	e004      	b.n	8008602 <DMA_List_CheckNodesBaseAddresses+0x42>
  }
  /* Check node 3 address */
  else if ((uint32_t)pNode3 != 0U)
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d001      	beq.n	8008602 <DMA_List_CheckNodesBaseAddresses+0x42>
  {
    ref = (uint32_t)pNode3;
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	617b      	str	r3, [r7, #20]
  {
    /* Prevent MISRA-C2012-Rule-15.7 */
  }

  /* Check addresses compatibility */
  if (temp != ((uint32_t)ref & DMA_CLBAR_LBA))
 8008602:	697b      	ldr	r3, [r7, #20]
 8008604:	0c1b      	lsrs	r3, r3, #16
 8008606:	041b      	lsls	r3, r3, #16
 8008608:	693a      	ldr	r2, [r7, #16]
 800860a:	429a      	cmp	r2, r3
 800860c:	d001      	beq.n	8008612 <DMA_List_CheckNodesBaseAddresses+0x52>
  {
    return 1U;
 800860e:	2301      	movs	r3, #1
 8008610:	e000      	b.n	8008614 <DMA_List_CheckNodesBaseAddresses+0x54>
  }

  return 0U;
 8008612:	2300      	movs	r3, #0
}
 8008614:	4618      	mov	r0, r3
 8008616:	371c      	adds	r7, #28
 8008618:	46bd      	mov	sp, r7
 800861a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800861e:	4770      	bx	lr

08008620 <DMA_List_CheckNodesTypes>:
  * @retval Return 0 when nodes types are compatible, otherwise nodes types are not compatible.
  */
static uint32_t DMA_List_CheckNodesTypes(DMA_NodeTypeDef const *const pNode1,
                                         DMA_NodeTypeDef const *const pNode2,
                                         DMA_NodeTypeDef const *const pNode3)
{
 8008620:	b480      	push	{r7}
 8008622:	b087      	sub	sp, #28
 8008624:	af00      	add	r7, sp, #0
 8008626:	60f8      	str	r0, [r7, #12]
 8008628:	60b9      	str	r1, [r7, #8]
 800862a:	607a      	str	r2, [r7, #4]
  uint32_t ref = 0U;
 800862c:	2300      	movs	r3, #0
 800862e:	617b      	str	r3, [r7, #20]

  /* Check node 1 parameter */
  if (pNode1 != NULL)
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	2b00      	cmp	r3, #0
 8008634:	d004      	beq.n	8008640 <DMA_List_CheckNodesTypes+0x20>
  {
    ref = pNode1->NodeInfo & NODE_TYPE_MASK;
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	6a1b      	ldr	r3, [r3, #32]
 800863a:	b2db      	uxtb	r3, r3
 800863c:	617b      	str	r3, [r7, #20]
 800863e:	e00e      	b.n	800865e <DMA_List_CheckNodesTypes+0x3e>
  }
  /* Check node 2 parameter */
  else if (pNode2 != NULL)
 8008640:	68bb      	ldr	r3, [r7, #8]
 8008642:	2b00      	cmp	r3, #0
 8008644:	d004      	beq.n	8008650 <DMA_List_CheckNodesTypes+0x30>
  {
    ref = pNode2->NodeInfo & NODE_TYPE_MASK;
 8008646:	68bb      	ldr	r3, [r7, #8]
 8008648:	6a1b      	ldr	r3, [r3, #32]
 800864a:	b2db      	uxtb	r3, r3
 800864c:	617b      	str	r3, [r7, #20]
 800864e:	e006      	b.n	800865e <DMA_List_CheckNodesTypes+0x3e>
  }
  /* Check node 3 parameter */
  else if (pNode3 != NULL)
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	2b00      	cmp	r3, #0
 8008654:	d003      	beq.n	800865e <DMA_List_CheckNodesTypes+0x3e>
  {
    ref = pNode3->NodeInfo & NODE_TYPE_MASK;
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	6a1b      	ldr	r3, [r3, #32]
 800865a:	b2db      	uxtb	r3, r3
 800865c:	617b      	str	r3, [r7, #20]
  {
    /* Prevent MISRA-C2012-Rule-15.7 */
  }

  /* Check node 2 parameter */
  if (pNode2 != NULL)
 800865e:	68bb      	ldr	r3, [r7, #8]
 8008660:	2b00      	cmp	r3, #0
 8008662:	d007      	beq.n	8008674 <DMA_List_CheckNodesTypes+0x54>
  {
    /* Check node type compatibility */
    if (ref != (pNode2->NodeInfo & NODE_TYPE_MASK))
 8008664:	68bb      	ldr	r3, [r7, #8]
 8008666:	6a1b      	ldr	r3, [r3, #32]
 8008668:	b2db      	uxtb	r3, r3
 800866a:	697a      	ldr	r2, [r7, #20]
 800866c:	429a      	cmp	r2, r3
 800866e:	d001      	beq.n	8008674 <DMA_List_CheckNodesTypes+0x54>
    {
      return 2U;
 8008670:	2302      	movs	r3, #2
 8008672:	e00b      	b.n	800868c <DMA_List_CheckNodesTypes+0x6c>
    }
  }

  /* Check node 3 parameter */
  if (pNode3 != NULL)
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	2b00      	cmp	r3, #0
 8008678:	d007      	beq.n	800868a <DMA_List_CheckNodesTypes+0x6a>
  {
    /* Check node type compatibility */
    if (ref != (pNode3->NodeInfo & NODE_TYPE_MASK))
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	6a1b      	ldr	r3, [r3, #32]
 800867e:	b2db      	uxtb	r3, r3
 8008680:	697a      	ldr	r2, [r7, #20]
 8008682:	429a      	cmp	r2, r3
 8008684:	d001      	beq.n	800868a <DMA_List_CheckNodesTypes+0x6a>
    {
      return 3U;
 8008686:	2303      	movs	r3, #3
 8008688:	e000      	b.n	800868c <DMA_List_CheckNodesTypes+0x6c>
    }
  }

  return 0U;
 800868a:	2300      	movs	r3, #0
}
 800868c:	4618      	mov	r0, r3
 800868e:	371c      	adds	r7, #28
 8008690:	46bd      	mov	sp, r7
 8008692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008696:	4770      	bx	lr

08008698 <DMA_List_GetCLLRNodeInfo>:
  * @retval None.
  */
static void DMA_List_GetCLLRNodeInfo(DMA_NodeTypeDef const *const pNode,
                                     uint32_t *const cllr_mask,
                                     uint32_t *const cllr_offset)
{
 8008698:	b480      	push	{r7}
 800869a:	b085      	sub	sp, #20
 800869c:	af00      	add	r7, sp, #0
 800869e:	60f8      	str	r0, [r7, #12]
 80086a0:	60b9      	str	r1, [r7, #8]
 80086a2:	607a      	str	r2, [r7, #4]
  /* Check node type */
  if ((pNode->NodeInfo & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	6a1b      	ldr	r3, [r3, #32]
 80086a8:	f003 0302 	and.w	r3, r3, #2
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d00c      	beq.n	80086ca <DMA_List_GetCLLRNodeInfo+0x32>
  {
    /* Update CLLR register mask value */
    if (cllr_mask != NULL)
 80086b0:	68bb      	ldr	r3, [r7, #8]
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d002      	beq.n	80086bc <DMA_List_GetCLLRNodeInfo+0x24>
    {
      *cllr_mask = DMA_CLLR_UT1 | DMA_CLLR_UT2 | DMA_CLLR_UB1 | DMA_CLLR_USA | DMA_CLLR_UDA | DMA_CLLR_UT3 |
 80086b6:	68bb      	ldr	r3, [r7, #8]
 80086b8:	4a0d      	ldr	r2, [pc, #52]	; (80086f0 <DMA_List_GetCLLRNodeInfo+0x58>)
 80086ba:	601a      	str	r2, [r3, #0]
                   DMA_CLLR_UB2 | DMA_CLLR_ULL;
    }

    /* Update CLLR register offset */
    if (cllr_offset != NULL)
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d00f      	beq.n	80086e2 <DMA_List_GetCLLRNodeInfo+0x4a>
    {
      *cllr_offset = NODE_CLLR_2D_DEFAULT_OFFSET;
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	2207      	movs	r2, #7
 80086c6:	601a      	str	r2, [r3, #0]
    if (cllr_offset != NULL)
    {
      *cllr_offset = NODE_CLLR_LINEAR_DEFAULT_OFFSET;
    }
  }
}
 80086c8:	e00b      	b.n	80086e2 <DMA_List_GetCLLRNodeInfo+0x4a>
    if (cllr_mask != NULL)
 80086ca:	68bb      	ldr	r3, [r7, #8]
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d002      	beq.n	80086d6 <DMA_List_GetCLLRNodeInfo+0x3e>
      *cllr_mask = DMA_CLLR_UT1 | DMA_CLLR_UT2 | DMA_CLLR_UB1 | DMA_CLLR_USA | DMA_CLLR_UDA | DMA_CLLR_ULL;
 80086d0:	68bb      	ldr	r3, [r7, #8]
 80086d2:	4a08      	ldr	r2, [pc, #32]	; (80086f4 <DMA_List_GetCLLRNodeInfo+0x5c>)
 80086d4:	601a      	str	r2, [r3, #0]
    if (cllr_offset != NULL)
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d002      	beq.n	80086e2 <DMA_List_GetCLLRNodeInfo+0x4a>
      *cllr_offset = NODE_CLLR_LINEAR_DEFAULT_OFFSET;
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	2205      	movs	r2, #5
 80086e0:	601a      	str	r2, [r3, #0]
}
 80086e2:	bf00      	nop
 80086e4:	3714      	adds	r7, #20
 80086e6:	46bd      	mov	sp, r7
 80086e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ec:	4770      	bx	lr
 80086ee:	bf00      	nop
 80086f0:	fe010000 	.word	0xfe010000
 80086f4:	f8010000 	.word	0xf8010000

080086f8 <DMA_List_FindNode>:
  * @retval Return 0 when node is found in selected queue, otherwise node is not found.
  */
static uint32_t DMA_List_FindNode(DMA_QListTypeDef const *const pQList,
                                  DMA_NodeTypeDef const *const pNode,
                                  DMA_NodeInQInfoTypeDef *const NodeInfo)
{
 80086f8:	b480      	push	{r7}
 80086fa:	b089      	sub	sp, #36	; 0x24
 80086fc:	af00      	add	r7, sp, #0
 80086fe:	60f8      	str	r0, [r7, #12]
 8008700:	60b9      	str	r1, [r7, #8]
 8008702:	607a      	str	r2, [r7, #4]
  uint32_t node_idx = 0U;
 8008704:	2300      	movs	r3, #0
 8008706:	61fb      	str	r3, [r7, #28]
  uint32_t currentnode_address  = 0U;
 8008708:	2300      	movs	r3, #0
 800870a:	61bb      	str	r3, [r7, #24]
  uint32_t previousnode_address  = 0U;
 800870c:	2300      	movs	r3, #0
 800870e:	617b      	str	r3, [r7, #20]
  uint32_t cllr_offset = NodeInfo->cllr_offset;
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	613b      	str	r3, [r7, #16]

  /* Find last node in queue */
  if (pNode ==  NULL)
 8008716:	68bb      	ldr	r3, [r7, #8]
 8008718:	2b00      	cmp	r3, #0
 800871a:	d142      	bne.n	80087a2 <DMA_List_FindNode+0xaa>
  {
    /* Check that previous node is linked to the selected queue */
    while (node_idx < pQList->NodeNumber)
 800871c:	e01d      	b.n	800875a <DMA_List_FindNode+0x62>
    {
      /* Get head node address */
      if (node_idx == 0U)
 800871e:	69fb      	ldr	r3, [r7, #28]
 8008720:	2b00      	cmp	r3, #0
 8008722:	d107      	bne.n	8008734 <DMA_List_FindNode+0x3c>
      {
        currentnode_address = (uint32_t)pQList->Head & DMA_CLLR_LA;
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	461a      	mov	r2, r3
 800872a:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 800872e:	4013      	ands	r3, r2
 8008730:	61bb      	str	r3, [r7, #24]
 8008732:	e00f      	b.n	8008754 <DMA_List_FindNode+0x5c>
      }
      /* Calculate nodes addresses */
      else
      {
        previousnode_address = currentnode_address;
 8008734:	69bb      	ldr	r3, [r7, #24]
 8008736:	617b      	str	r3, [r7, #20]
        currentnode_address =
          ((DMA_NodeTypeDef *)(currentnode_address +
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	0c1b      	lsrs	r3, r3, #16
 800873e:	041b      	lsls	r3, r3, #16
          ((DMA_NodeTypeDef *)(currentnode_address +
 8008740:	69ba      	ldr	r2, [r7, #24]
 8008742:	4413      	add	r3, r2
 8008744:	461a      	mov	r2, r3
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 8008746:	693b      	ldr	r3, [r7, #16]
 8008748:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
        currentnode_address =
 800874c:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 8008750:	4013      	ands	r3, r2
 8008752:	61bb      	str	r3, [r7, #24]
      }

      /* Increment node index */
      node_idx++;
 8008754:	69fb      	ldr	r3, [r7, #28]
 8008756:	3301      	adds	r3, #1
 8008758:	61fb      	str	r3, [r7, #28]
    while (node_idx < pQList->NodeNumber)
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	689b      	ldr	r3, [r3, #8]
 800875e:	69fa      	ldr	r2, [r7, #28]
 8008760:	429a      	cmp	r2, r3
 8008762:	d3dc      	bcc.n	800871e <DMA_List_FindNode+0x26>
 8008764:	e029      	b.n	80087ba <DMA_List_FindNode+0xc2>
  {
    /* Check that previous node is linked to the selected queue */
    while ((node_idx < pQList->NodeNumber) && (currentnode_address != ((uint32_t)pNode & DMA_CLLR_LA)))
    {
      /* Get head node address */
      if (node_idx == 0U)
 8008766:	69fb      	ldr	r3, [r7, #28]
 8008768:	2b00      	cmp	r3, #0
 800876a:	d107      	bne.n	800877c <DMA_List_FindNode+0x84>
      {
        currentnode_address = (uint32_t)pQList->Head & DMA_CLLR_LA;
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	461a      	mov	r2, r3
 8008772:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 8008776:	4013      	ands	r3, r2
 8008778:	61bb      	str	r3, [r7, #24]
 800877a:	e00f      	b.n	800879c <DMA_List_FindNode+0xa4>
      }
      /* Calculate nodes addresses */
      else
      {
        previousnode_address = currentnode_address;
 800877c:	69bb      	ldr	r3, [r7, #24]
 800877e:	617b      	str	r3, [r7, #20]
        currentnode_address =
          ((DMA_NodeTypeDef *)(currentnode_address +
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	0c1b      	lsrs	r3, r3, #16
 8008786:	041b      	lsls	r3, r3, #16
          ((DMA_NodeTypeDef *)(currentnode_address +
 8008788:	69ba      	ldr	r2, [r7, #24]
 800878a:	4413      	add	r3, r2
 800878c:	461a      	mov	r2, r3
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 800878e:	693b      	ldr	r3, [r7, #16]
 8008790:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
        currentnode_address =
 8008794:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 8008798:	4013      	ands	r3, r2
 800879a:	61bb      	str	r3, [r7, #24]
      }

      /* Increment node index */
      node_idx++;
 800879c:	69fb      	ldr	r3, [r7, #28]
 800879e:	3301      	adds	r3, #1
 80087a0:	61fb      	str	r3, [r7, #28]
    while ((node_idx < pQList->NodeNumber) && (currentnode_address != ((uint32_t)pNode & DMA_CLLR_LA)))
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	689b      	ldr	r3, [r3, #8]
 80087a6:	69fa      	ldr	r2, [r7, #28]
 80087a8:	429a      	cmp	r2, r3
 80087aa:	d206      	bcs.n	80087ba <DMA_List_FindNode+0xc2>
 80087ac:	68ba      	ldr	r2, [r7, #8]
 80087ae:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 80087b2:	4013      	ands	r3, r2
 80087b4:	69ba      	ldr	r2, [r7, #24]
 80087b6:	429a      	cmp	r2, r3
 80087b8:	d1d5      	bne.n	8008766 <DMA_List_FindNode+0x6e>
    }
  }

  /* Check stored address */
  if (pNode != NULL)
 80087ba:	68bb      	ldr	r3, [r7, #8]
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d008      	beq.n	80087d2 <DMA_List_FindNode+0xda>
  {
    if (currentnode_address != ((uint32_t)pNode & DMA_CLLR_LA))
 80087c0:	68ba      	ldr	r2, [r7, #8]
 80087c2:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 80087c6:	4013      	ands	r3, r2
 80087c8:	69ba      	ldr	r2, [r7, #24]
 80087ca:	429a      	cmp	r2, r3
 80087cc:	d001      	beq.n	80087d2 <DMA_List_FindNode+0xda>
    {
      return 1U;
 80087ce:	2301      	movs	r3, #1
 80087d0:	e02b      	b.n	800882a <DMA_List_FindNode+0x132>
    }
  }

  /* Update current node position */
  NodeInfo->currentnode_pos = node_idx;
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	69fa      	ldr	r2, [r7, #28]
 80087d6:	609a      	str	r2, [r3, #8]

  /* Update previous node address */
  NodeInfo->previousnode_addr = previousnode_address | ((uint32_t)pQList->Head & DMA_CLBAR_LBA);
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	0c1b      	lsrs	r3, r3, #16
 80087de:	041b      	lsls	r3, r3, #16
 80087e0:	697a      	ldr	r2, [r7, #20]
 80087e2:	431a      	orrs	r2, r3
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	605a      	str	r2, [r3, #4]

  /* Update current node address */
  NodeInfo->currentnode_addr = currentnode_address | ((uint32_t)pQList->Head & DMA_CLBAR_LBA);
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	0c1b      	lsrs	r3, r3, #16
 80087ee:	041b      	lsls	r3, r3, #16
 80087f0:	69ba      	ldr	r2, [r7, #24]
 80087f2:	431a      	orrs	r2, r3
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	60da      	str	r2, [r3, #12]

  /* Update next node address */
  if (((DMA_NodeTypeDef *)NodeInfo->currentnode_addr)->LinkRegisters[cllr_offset] != 0U)
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	68db      	ldr	r3, [r3, #12]
 80087fc:	461a      	mov	r2, r3
 80087fe:	693b      	ldr	r3, [r7, #16]
 8008800:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008804:	2b00      	cmp	r3, #0
 8008806:	d00f      	beq.n	8008828 <DMA_List_FindNode+0x130>
  {
    NodeInfo->nextnode_addr = (((DMA_NodeTypeDef *)NodeInfo->currentnode_addr)->LinkRegisters[cllr_offset] &
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	68db      	ldr	r3, [r3, #12]
 800880c:	461a      	mov	r2, r3
 800880e:	693b      	ldr	r3, [r7, #16]
 8008810:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008814:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 8008818:	401a      	ands	r2, r3
                               DMA_CLLR_LA) | ((uint32_t)pQList->Head & DMA_CLBAR_LBA);
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	0c1b      	lsrs	r3, r3, #16
 8008820:	041b      	lsls	r3, r3, #16
 8008822:	431a      	orrs	r2, r3
    NodeInfo->nextnode_addr = (((DMA_NodeTypeDef *)NodeInfo->currentnode_addr)->LinkRegisters[cllr_offset] &
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	611a      	str	r2, [r3, #16]
  }

  return 0U;
 8008828:	2300      	movs	r3, #0
}
 800882a:	4618      	mov	r0, r3
 800882c:	3724      	adds	r7, #36	; 0x24
 800882e:	46bd      	mov	sp, r7
 8008830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008834:	4770      	bx	lr
	...

08008838 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8008838:	b480      	push	{r7}
 800883a:	b089      	sub	sp, #36	; 0x24
 800883c:	af00      	add	r7, sp, #0
 800883e:	6078      	str	r0, [r7, #4]
 8008840:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 8008842:	2300      	movs	r3, #0
 8008844:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 800884a:	e1ba      	b.n	8008bc2 <HAL_GPIO_Init+0x38a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 800884c:	683b      	ldr	r3, [r7, #0]
 800884e:	681a      	ldr	r2, [r3, #0]
 8008850:	2101      	movs	r1, #1
 8008852:	697b      	ldr	r3, [r7, #20]
 8008854:	fa01 f303 	lsl.w	r3, r1, r3
 8008858:	4013      	ands	r3, r2
 800885a:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 800885c:	697b      	ldr	r3, [r7, #20]
 800885e:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	2b00      	cmp	r3, #0
 8008864:	f000 81aa 	beq.w	8008bbc <HAL_GPIO_Init+0x384>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	4a55      	ldr	r2, [pc, #340]	; (80089c0 <HAL_GPIO_Init+0x188>)
 800886c:	4293      	cmp	r3, r2
 800886e:	d15d      	bne.n	800892c <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 8008876:	2201      	movs	r2, #1
 8008878:	697b      	ldr	r3, [r7, #20]
 800887a:	fa02 f303 	lsl.w	r3, r2, r3
 800887e:	43db      	mvns	r3, r3
 8008880:	69fa      	ldr	r2, [r7, #28]
 8008882:	4013      	ands	r3, r2
 8008884:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 8008886:	683b      	ldr	r3, [r7, #0]
 8008888:	685b      	ldr	r3, [r3, #4]
 800888a:	f003 0201 	and.w	r2, r3, #1
 800888e:	697b      	ldr	r3, [r7, #20]
 8008890:	fa02 f303 	lsl.w	r3, r2, r3
 8008894:	69fa      	ldr	r2, [r7, #28]
 8008896:	4313      	orrs	r3, r2
 8008898:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	69fa      	ldr	r2, [r7, #28]
 800889e:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 80088a0:	4a48      	ldr	r2, [pc, #288]	; (80089c4 <HAL_GPIO_Init+0x18c>)
 80088a2:	697b      	ldr	r3, [r7, #20]
 80088a4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80088a8:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 80088aa:	4a46      	ldr	r2, [pc, #280]	; (80089c4 <HAL_GPIO_Init+0x18c>)
 80088ac:	697b      	ldr	r3, [r7, #20]
 80088ae:	00db      	lsls	r3, r3, #3
 80088b0:	4413      	add	r3, r2
 80088b2:	685b      	ldr	r3, [r3, #4]
 80088b4:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 80088b6:	69bb      	ldr	r3, [r7, #24]
 80088b8:	08da      	lsrs	r2, r3, #3
 80088ba:	693b      	ldr	r3, [r7, #16]
 80088bc:	3208      	adds	r2, #8
 80088be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80088c2:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 80088c4:	69bb      	ldr	r3, [r7, #24]
 80088c6:	f003 0307 	and.w	r3, r3, #7
 80088ca:	009b      	lsls	r3, r3, #2
 80088cc:	220f      	movs	r2, #15
 80088ce:	fa02 f303 	lsl.w	r3, r2, r3
 80088d2:	43db      	mvns	r3, r3
 80088d4:	69fa      	ldr	r2, [r7, #28]
 80088d6:	4013      	ands	r3, r2
 80088d8:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 80088da:	69bb      	ldr	r3, [r7, #24]
 80088dc:	f003 0307 	and.w	r3, r3, #7
 80088e0:	009b      	lsls	r3, r3, #2
 80088e2:	220b      	movs	r2, #11
 80088e4:	fa02 f303 	lsl.w	r3, r2, r3
 80088e8:	69fa      	ldr	r2, [r7, #28]
 80088ea:	4313      	orrs	r3, r2
 80088ec:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 80088ee:	69bb      	ldr	r3, [r7, #24]
 80088f0:	08da      	lsrs	r2, r3, #3
 80088f2:	693b      	ldr	r3, [r7, #16]
 80088f4:	3208      	adds	r2, #8
 80088f6:	69f9      	ldr	r1, [r7, #28]
 80088f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 80088fc:	693b      	ldr	r3, [r7, #16]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 8008902:	69bb      	ldr	r3, [r7, #24]
 8008904:	005b      	lsls	r3, r3, #1
 8008906:	2203      	movs	r2, #3
 8008908:	fa02 f303 	lsl.w	r3, r2, r3
 800890c:	43db      	mvns	r3, r3
 800890e:	69fa      	ldr	r2, [r7, #28]
 8008910:	4013      	ands	r3, r2
 8008912:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * 2U));
 8008914:	69bb      	ldr	r3, [r7, #24]
 8008916:	005b      	lsls	r3, r3, #1
 8008918:	2202      	movs	r2, #2
 800891a:	fa02 f303 	lsl.w	r3, r2, r3
 800891e:	69fa      	ldr	r2, [r7, #28]
 8008920:	4313      	orrs	r3, r2
 8008922:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8008924:	693b      	ldr	r3, [r7, #16]
 8008926:	69fa      	ldr	r2, [r7, #28]
 8008928:	601a      	str	r2, [r3, #0]
 800892a:	e067      	b.n	80089fc <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 800892c:	683b      	ldr	r3, [r7, #0]
 800892e:	685b      	ldr	r3, [r3, #4]
 8008930:	2b02      	cmp	r3, #2
 8008932:	d003      	beq.n	800893c <HAL_GPIO_Init+0x104>
 8008934:	683b      	ldr	r3, [r7, #0]
 8008936:	685b      	ldr	r3, [r3, #4]
 8008938:	2b12      	cmp	r3, #18
 800893a:	d145      	bne.n	80089c8 <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 800893c:	697b      	ldr	r3, [r7, #20]
 800893e:	08da      	lsrs	r2, r3, #3
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	3208      	adds	r2, #8
 8008944:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008948:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * 4U));
 800894a:	697b      	ldr	r3, [r7, #20]
 800894c:	f003 0307 	and.w	r3, r3, #7
 8008950:	009b      	lsls	r3, r3, #2
 8008952:	220f      	movs	r2, #15
 8008954:	fa02 f303 	lsl.w	r3, r2, r3
 8008958:	43db      	mvns	r3, r3
 800895a:	69fa      	ldr	r2, [r7, #28]
 800895c:	4013      	ands	r3, r2
 800895e:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 8008960:	683b      	ldr	r3, [r7, #0]
 8008962:	691b      	ldr	r3, [r3, #16]
 8008964:	f003 020f 	and.w	r2, r3, #15
 8008968:	697b      	ldr	r3, [r7, #20]
 800896a:	f003 0307 	and.w	r3, r3, #7
 800896e:	009b      	lsls	r3, r3, #2
 8008970:	fa02 f303 	lsl.w	r3, r2, r3
 8008974:	69fa      	ldr	r2, [r7, #28]
 8008976:	4313      	orrs	r3, r2
 8008978:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 800897a:	697b      	ldr	r3, [r7, #20]
 800897c:	08da      	lsrs	r2, r3, #3
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	3208      	adds	r2, #8
 8008982:	69f9      	ldr	r1, [r7, #28]
 8008984:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8008988:	693b      	ldr	r3, [r7, #16]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 800898e:	69bb      	ldr	r3, [r7, #24]
 8008990:	005b      	lsls	r3, r3, #1
 8008992:	2203      	movs	r2, #3
 8008994:	fa02 f303 	lsl.w	r3, r2, r3
 8008998:	43db      	mvns	r3, r3
 800899a:	69fa      	ldr	r2, [r7, #28]
 800899c:	4013      	ands	r3, r2
 800899e:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 80089a0:	683b      	ldr	r3, [r7, #0]
 80089a2:	685b      	ldr	r3, [r3, #4]
 80089a4:	f003 0203 	and.w	r2, r3, #3
 80089a8:	69bb      	ldr	r3, [r7, #24]
 80089aa:	005b      	lsls	r3, r3, #1
 80089ac:	fa02 f303 	lsl.w	r3, r2, r3
 80089b0:	69fa      	ldr	r2, [r7, #28]
 80089b2:	4313      	orrs	r3, r2
 80089b4:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 80089b6:	693b      	ldr	r3, [r7, #16]
 80089b8:	69fa      	ldr	r2, [r7, #28]
 80089ba:	601a      	str	r2, [r3, #0]
 80089bc:	e01e      	b.n	80089fc <HAL_GPIO_Init+0x1c4>
 80089be:	bf00      	nop
 80089c0:	46020000 	.word	0x46020000
 80089c4:	0801506c 	.word	0x0801506c
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 80089c8:	693b      	ldr	r3, [r7, #16]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 80089ce:	69bb      	ldr	r3, [r7, #24]
 80089d0:	005b      	lsls	r3, r3, #1
 80089d2:	2203      	movs	r2, #3
 80089d4:	fa02 f303 	lsl.w	r3, r2, r3
 80089d8:	43db      	mvns	r3, r3
 80089da:	69fa      	ldr	r2, [r7, #28]
 80089dc:	4013      	ands	r3, r2
 80089de:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 80089e0:	683b      	ldr	r3, [r7, #0]
 80089e2:	685b      	ldr	r3, [r3, #4]
 80089e4:	f003 0203 	and.w	r2, r3, #3
 80089e8:	69bb      	ldr	r3, [r7, #24]
 80089ea:	005b      	lsls	r3, r3, #1
 80089ec:	fa02 f303 	lsl.w	r3, r2, r3
 80089f0:	69fa      	ldr	r2, [r7, #28]
 80089f2:	4313      	orrs	r3, r2
 80089f4:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 80089f6:	693b      	ldr	r3, [r7, #16]
 80089f8:	69fa      	ldr	r2, [r7, #28]
 80089fa:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80089fc:	683b      	ldr	r3, [r7, #0]
 80089fe:	685b      	ldr	r3, [r3, #4]
 8008a00:	2b01      	cmp	r3, #1
 8008a02:	d00b      	beq.n	8008a1c <HAL_GPIO_Init+0x1e4>
 8008a04:	683b      	ldr	r3, [r7, #0]
 8008a06:	685b      	ldr	r3, [r3, #4]
 8008a08:	2b02      	cmp	r3, #2
 8008a0a:	d007      	beq.n	8008a1c <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8008a0c:	683b      	ldr	r3, [r7, #0]
 8008a0e:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8008a10:	2b11      	cmp	r3, #17
 8008a12:	d003      	beq.n	8008a1c <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8008a14:	683b      	ldr	r3, [r7, #0]
 8008a16:	685b      	ldr	r3, [r3, #4]
 8008a18:	2b12      	cmp	r3, #18
 8008a1a:	d130      	bne.n	8008a7e <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 8008a1c:	693b      	ldr	r3, [r7, #16]
 8008a1e:	689b      	ldr	r3, [r3, #8]
 8008a20:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * 2U));
 8008a22:	69bb      	ldr	r3, [r7, #24]
 8008a24:	005b      	lsls	r3, r3, #1
 8008a26:	2203      	movs	r2, #3
 8008a28:	fa02 f303 	lsl.w	r3, r2, r3
 8008a2c:	43db      	mvns	r3, r3
 8008a2e:	69fa      	ldr	r2, [r7, #28]
 8008a30:	4013      	ands	r3, r2
 8008a32:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * 2U));
 8008a34:	683b      	ldr	r3, [r7, #0]
 8008a36:	68da      	ldr	r2, [r3, #12]
 8008a38:	69bb      	ldr	r3, [r7, #24]
 8008a3a:	005b      	lsls	r3, r3, #1
 8008a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8008a40:	69fa      	ldr	r2, [r7, #28]
 8008a42:	4313      	orrs	r3, r2
 8008a44:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 8008a46:	693b      	ldr	r3, [r7, #16]
 8008a48:	69fa      	ldr	r2, [r7, #28]
 8008a4a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 8008a4c:	693b      	ldr	r3, [r7, #16]
 8008a4e:	685b      	ldr	r3, [r3, #4]
 8008a50:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 8008a52:	2201      	movs	r2, #1
 8008a54:	69bb      	ldr	r3, [r7, #24]
 8008a56:	fa02 f303 	lsl.w	r3, r2, r3
 8008a5a:	43db      	mvns	r3, r3
 8008a5c:	69fa      	ldr	r2, [r7, #28]
 8008a5e:	4013      	ands	r3, r2
 8008a60:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 8008a62:	683b      	ldr	r3, [r7, #0]
 8008a64:	685b      	ldr	r3, [r3, #4]
 8008a66:	091b      	lsrs	r3, r3, #4
 8008a68:	f003 0201 	and.w	r2, r3, #1
 8008a6c:	69bb      	ldr	r3, [r7, #24]
 8008a6e:	fa02 f303 	lsl.w	r3, r2, r3
 8008a72:	69fa      	ldr	r2, [r7, #28]
 8008a74:	4313      	orrs	r3, r2
 8008a76:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 8008a78:	693b      	ldr	r3, [r7, #16]
 8008a7a:	69fa      	ldr	r2, [r7, #28]
 8008a7c:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8008a7e:	683b      	ldr	r3, [r7, #0]
 8008a80:	685b      	ldr	r3, [r3, #4]
 8008a82:	2b03      	cmp	r3, #3
 8008a84:	d017      	beq.n	8008ab6 <HAL_GPIO_Init+0x27e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 8008a86:	693b      	ldr	r3, [r7, #16]
 8008a88:	68db      	ldr	r3, [r3, #12]
 8008a8a:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * 2U));
 8008a8c:	69bb      	ldr	r3, [r7, #24]
 8008a8e:	005b      	lsls	r3, r3, #1
 8008a90:	2203      	movs	r2, #3
 8008a92:	fa02 f303 	lsl.w	r3, r2, r3
 8008a96:	43db      	mvns	r3, r3
 8008a98:	69fa      	ldr	r2, [r7, #28]
 8008a9a:	4013      	ands	r3, r2
 8008a9c:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * 2U));
 8008a9e:	683b      	ldr	r3, [r7, #0]
 8008aa0:	689a      	ldr	r2, [r3, #8]
 8008aa2:	69bb      	ldr	r3, [r7, #24]
 8008aa4:	005b      	lsls	r3, r3, #1
 8008aa6:	fa02 f303 	lsl.w	r3, r2, r3
 8008aaa:	69fa      	ldr	r2, [r7, #28]
 8008aac:	4313      	orrs	r3, r2
 8008aae:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 8008ab0:	693b      	ldr	r3, [r7, #16]
 8008ab2:	69fa      	ldr	r2, [r7, #28]
 8008ab4:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8008ab6:	683b      	ldr	r3, [r7, #0]
 8008ab8:	685b      	ldr	r3, [r3, #4]
 8008aba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d07c      	beq.n	8008bbc <HAL_GPIO_Init+0x384>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8008ac2:	4a47      	ldr	r2, [pc, #284]	; (8008be0 <HAL_GPIO_Init+0x3a8>)
 8008ac4:	697b      	ldr	r3, [r7, #20]
 8008ac6:	089b      	lsrs	r3, r3, #2
 8008ac8:	3318      	adds	r3, #24
 8008aca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008ace:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 8008ad0:	697b      	ldr	r3, [r7, #20]
 8008ad2:	f003 0303 	and.w	r3, r3, #3
 8008ad6:	00db      	lsls	r3, r3, #3
 8008ad8:	220f      	movs	r2, #15
 8008ada:	fa02 f303 	lsl.w	r3, r2, r3
 8008ade:	43db      	mvns	r3, r3
 8008ae0:	69fa      	ldr	r2, [r7, #28]
 8008ae2:	4013      	ands	r3, r2
 8008ae4:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	0a9a      	lsrs	r2, r3, #10
 8008aea:	4b3e      	ldr	r3, [pc, #248]	; (8008be4 <HAL_GPIO_Init+0x3ac>)
 8008aec:	4013      	ands	r3, r2
 8008aee:	697a      	ldr	r2, [r7, #20]
 8008af0:	f002 0203 	and.w	r2, r2, #3
 8008af4:	00d2      	lsls	r2, r2, #3
 8008af6:	4093      	lsls	r3, r2
 8008af8:	69fa      	ldr	r2, [r7, #28]
 8008afa:	4313      	orrs	r3, r2
 8008afc:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 8008afe:	4938      	ldr	r1, [pc, #224]	; (8008be0 <HAL_GPIO_Init+0x3a8>)
 8008b00:	697b      	ldr	r3, [r7, #20]
 8008b02:	089b      	lsrs	r3, r3, #2
 8008b04:	3318      	adds	r3, #24
 8008b06:	69fa      	ldr	r2, [r7, #28]
 8008b08:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8008b0c:	4b34      	ldr	r3, [pc, #208]	; (8008be0 <HAL_GPIO_Init+0x3a8>)
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	43db      	mvns	r3, r3
 8008b16:	69fa      	ldr	r2, [r7, #28]
 8008b18:	4013      	ands	r3, r2
 8008b1a:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8008b1c:	683b      	ldr	r3, [r7, #0]
 8008b1e:	685b      	ldr	r3, [r3, #4]
 8008b20:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d003      	beq.n	8008b30 <HAL_GPIO_Init+0x2f8>
        {
          tmp |= iocurrent;
 8008b28:	69fa      	ldr	r2, [r7, #28]
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	4313      	orrs	r3, r2
 8008b2e:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 8008b30:	4a2b      	ldr	r2, [pc, #172]	; (8008be0 <HAL_GPIO_Init+0x3a8>)
 8008b32:	69fb      	ldr	r3, [r7, #28]
 8008b34:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 8008b36:	4b2a      	ldr	r3, [pc, #168]	; (8008be0 <HAL_GPIO_Init+0x3a8>)
 8008b38:	685b      	ldr	r3, [r3, #4]
 8008b3a:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	43db      	mvns	r3, r3
 8008b40:	69fa      	ldr	r2, [r7, #28]
 8008b42:	4013      	ands	r3, r2
 8008b44:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8008b46:	683b      	ldr	r3, [r7, #0]
 8008b48:	685b      	ldr	r3, [r3, #4]
 8008b4a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d003      	beq.n	8008b5a <HAL_GPIO_Init+0x322>
        {
          tmp |= iocurrent;
 8008b52:	69fa      	ldr	r2, [r7, #28]
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	4313      	orrs	r3, r2
 8008b58:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 8008b5a:	4a21      	ldr	r2, [pc, #132]	; (8008be0 <HAL_GPIO_Init+0x3a8>)
 8008b5c:	69fb      	ldr	r3, [r7, #28]
 8008b5e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8008b60:	4b1f      	ldr	r3, [pc, #124]	; (8008be0 <HAL_GPIO_Init+0x3a8>)
 8008b62:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008b66:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	43db      	mvns	r3, r3
 8008b6c:	69fa      	ldr	r2, [r7, #28]
 8008b6e:	4013      	ands	r3, r2
 8008b70:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8008b72:	683b      	ldr	r3, [r7, #0]
 8008b74:	685b      	ldr	r3, [r3, #4]
 8008b76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d003      	beq.n	8008b86 <HAL_GPIO_Init+0x34e>
        {
          tmp |= iocurrent;
 8008b7e:	69fa      	ldr	r2, [r7, #28]
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	4313      	orrs	r3, r2
 8008b84:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 8008b86:	4a16      	ldr	r2, [pc, #88]	; (8008be0 <HAL_GPIO_Init+0x3a8>)
 8008b88:	69fb      	ldr	r3, [r7, #28]
 8008b8a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        tmp = EXTI->IMR1;
 8008b8e:	4b14      	ldr	r3, [pc, #80]	; (8008be0 <HAL_GPIO_Init+0x3a8>)
 8008b90:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008b94:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	43db      	mvns	r3, r3
 8008b9a:	69fa      	ldr	r2, [r7, #28]
 8008b9c:	4013      	ands	r3, r2
 8008b9e:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8008ba0:	683b      	ldr	r3, [r7, #0]
 8008ba2:	685b      	ldr	r3, [r3, #4]
 8008ba4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d003      	beq.n	8008bb4 <HAL_GPIO_Init+0x37c>
        {
          tmp |= iocurrent;
 8008bac:	69fa      	ldr	r2, [r7, #28]
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	4313      	orrs	r3, r2
 8008bb2:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 8008bb4:	4a0a      	ldr	r2, [pc, #40]	; (8008be0 <HAL_GPIO_Init+0x3a8>)
 8008bb6:	69fb      	ldr	r3, [r7, #28]
 8008bb8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      }
    }
    position++;
 8008bbc:	697b      	ldr	r3, [r7, #20]
 8008bbe:	3301      	adds	r3, #1
 8008bc0:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8008bc2:	683b      	ldr	r3, [r7, #0]
 8008bc4:	681a      	ldr	r2, [r3, #0]
 8008bc6:	697b      	ldr	r3, [r7, #20]
 8008bc8:	fa22 f303 	lsr.w	r3, r2, r3
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	f47f ae3d 	bne.w	800884c <HAL_GPIO_Init+0x14>
  }
}
 8008bd2:	bf00      	nop
 8008bd4:	bf00      	nop
 8008bd6:	3724      	adds	r7, #36	; 0x24
 8008bd8:	46bd      	mov	sp, r7
 8008bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bde:	4770      	bx	lr
 8008be0:	46022000 	.word	0x46022000
 8008be4:	002f7f7f 	.word	0x002f7f7f

08008be8 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8008be8:	b480      	push	{r7}
 8008bea:	b089      	sub	sp, #36	; 0x24
 8008bec:	af00      	add	r7, sp, #0
 8008bee:	6078      	str	r0, [r7, #4]
 8008bf0:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 8008bf2:	2300      	movs	r3, #0
 8008bf4:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	617b      	str	r3, [r7, #20]

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0U)
 8008bfa:	e0bc      	b.n	8008d76 <HAL_GPIO_DeInit+0x18e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1UL << position);
 8008bfc:	2201      	movs	r2, #1
 8008bfe:	69bb      	ldr	r3, [r7, #24]
 8008c00:	fa02 f303 	lsl.w	r3, r2, r3
 8008c04:	683a      	ldr	r2, [r7, #0]
 8008c06:	4013      	ands	r3, r2
 8008c08:	613b      	str	r3, [r7, #16]

    /*Save Pin Position */
    pin_position = position;
 8008c0a:	69bb      	ldr	r3, [r7, #24]
 8008c0c:	61fb      	str	r3, [r7, #28]

    if (iocurrent != 0U)
 8008c0e:	693b      	ldr	r3, [r7, #16]
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	f000 80ad 	beq.w	8008d70 <HAL_GPIO_DeInit+0x188>
    {
      /* In case of LPGPIO port selected */
      if (GPIOx == LPGPIO1)
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	4a5e      	ldr	r2, [pc, #376]	; (8008d94 <HAL_GPIO_DeInit+0x1ac>)
 8008c1a:	4293      	cmp	r3, r2
 8008c1c:	d115      	bne.n	8008c4a <HAL_GPIO_DeInit+0x62>
      {
        /* Configure LP/IO in Input Mode */
        p_gpio  = LPGPIO_Map[pin_position].GPIO_PORT;
 8008c1e:	4a5e      	ldr	r2, [pc, #376]	; (8008d98 <HAL_GPIO_DeInit+0x1b0>)
 8008c20:	69fb      	ldr	r3, [r7, #28]
 8008c22:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008c26:	617b      	str	r3, [r7, #20]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 8008c28:	4a5b      	ldr	r2, [pc, #364]	; (8008d98 <HAL_GPIO_DeInit+0x1b0>)
 8008c2a:	69bb      	ldr	r3, [r7, #24]
 8008c2c:	00db      	lsls	r3, r3, #3
 8008c2e:	4413      	add	r3, r2
 8008c30:	685b      	ldr	r3, [r3, #4]
 8008c32:	61fb      	str	r3, [r7, #28]
        LPGPIO1->MODER &= ~(1U << pin_position);
 8008c34:	4b57      	ldr	r3, [pc, #348]	; (8008d94 <HAL_GPIO_DeInit+0x1ac>)
 8008c36:	681a      	ldr	r2, [r3, #0]
 8008c38:	2101      	movs	r1, #1
 8008c3a:	69fb      	ldr	r3, [r7, #28]
 8008c3c:	fa01 f303 	lsl.w	r3, r1, r3
 8008c40:	43db      	mvns	r3, r3
 8008c42:	4954      	ldr	r1, [pc, #336]	; (8008d94 <HAL_GPIO_DeInit+0x1ac>)
 8008c44:	4013      	ands	r3, r2
 8008c46:	600b      	str	r3, [r1, #0]
 8008c48:	e053      	b.n	8008cf2 <HAL_GPIO_DeInit+0x10a>
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /*------------------------- EXTI Mode Configuration --------------------*/
        /* Clear the External Interrupt or Event for the current IO */
        tmp = EXTI->EXTICR[position >> 2U];
 8008c4a:	4a54      	ldr	r2, [pc, #336]	; (8008d9c <HAL_GPIO_DeInit+0x1b4>)
 8008c4c:	69bb      	ldr	r3, [r7, #24]
 8008c4e:	089b      	lsrs	r3, r3, #2
 8008c50:	3318      	adds	r3, #24
 8008c52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008c56:	60fb      	str	r3, [r7, #12]
        tmp &= ((0x0FUL) << (8U * (position & 0x03U)));
 8008c58:	69bb      	ldr	r3, [r7, #24]
 8008c5a:	f003 0303 	and.w	r3, r3, #3
 8008c5e:	00db      	lsls	r3, r3, #3
 8008c60:	220f      	movs	r2, #15
 8008c62:	fa02 f303 	lsl.w	r3, r2, r3
 8008c66:	68fa      	ldr	r2, [r7, #12]
 8008c68:	4013      	ands	r3, r2
 8008c6a:	60fb      	str	r3, [r7, #12]
        if (tmp == (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U))))
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	0a9a      	lsrs	r2, r3, #10
 8008c70:	4b4b      	ldr	r3, [pc, #300]	; (8008da0 <HAL_GPIO_DeInit+0x1b8>)
 8008c72:	4013      	ands	r3, r2
 8008c74:	69ba      	ldr	r2, [r7, #24]
 8008c76:	f002 0203 	and.w	r2, r2, #3
 8008c7a:	00d2      	lsls	r2, r2, #3
 8008c7c:	4093      	lsls	r3, r2
 8008c7e:	68fa      	ldr	r2, [r7, #12]
 8008c80:	429a      	cmp	r2, r3
 8008c82:	d136      	bne.n	8008cf2 <HAL_GPIO_DeInit+0x10a>
        {
          /* Clear EXTI line configuration */
          EXTI->IMR1 &= ~(iocurrent);
 8008c84:	4b45      	ldr	r3, [pc, #276]	; (8008d9c <HAL_GPIO_DeInit+0x1b4>)
 8008c86:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8008c8a:	693b      	ldr	r3, [r7, #16]
 8008c8c:	43db      	mvns	r3, r3
 8008c8e:	4943      	ldr	r1, [pc, #268]	; (8008d9c <HAL_GPIO_DeInit+0x1b4>)
 8008c90:	4013      	ands	r3, r2
 8008c92:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
          EXTI->EMR1 &= ~(iocurrent);
 8008c96:	4b41      	ldr	r3, [pc, #260]	; (8008d9c <HAL_GPIO_DeInit+0x1b4>)
 8008c98:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8008c9c:	693b      	ldr	r3, [r7, #16]
 8008c9e:	43db      	mvns	r3, r3
 8008ca0:	493e      	ldr	r1, [pc, #248]	; (8008d9c <HAL_GPIO_DeInit+0x1b4>)
 8008ca2:	4013      	ands	r3, r2
 8008ca4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

          /* Clear Rising Falling edge configuration */
          EXTI->RTSR1 &= ~(iocurrent);
 8008ca8:	4b3c      	ldr	r3, [pc, #240]	; (8008d9c <HAL_GPIO_DeInit+0x1b4>)
 8008caa:	681a      	ldr	r2, [r3, #0]
 8008cac:	693b      	ldr	r3, [r7, #16]
 8008cae:	43db      	mvns	r3, r3
 8008cb0:	493a      	ldr	r1, [pc, #232]	; (8008d9c <HAL_GPIO_DeInit+0x1b4>)
 8008cb2:	4013      	ands	r3, r2
 8008cb4:	600b      	str	r3, [r1, #0]
          EXTI->FTSR1 &= ~(iocurrent);
 8008cb6:	4b39      	ldr	r3, [pc, #228]	; (8008d9c <HAL_GPIO_DeInit+0x1b4>)
 8008cb8:	685a      	ldr	r2, [r3, #4]
 8008cba:	693b      	ldr	r3, [r7, #16]
 8008cbc:	43db      	mvns	r3, r3
 8008cbe:	4937      	ldr	r1, [pc, #220]	; (8008d9c <HAL_GPIO_DeInit+0x1b4>)
 8008cc0:	4013      	ands	r3, r2
 8008cc2:	604b      	str	r3, [r1, #4]

          tmp = (0x0FUL) << (8U * (position & 0x03U));
 8008cc4:	69bb      	ldr	r3, [r7, #24]
 8008cc6:	f003 0303 	and.w	r3, r3, #3
 8008cca:	00db      	lsls	r3, r3, #3
 8008ccc:	220f      	movs	r2, #15
 8008cce:	fa02 f303 	lsl.w	r3, r2, r3
 8008cd2:	60fb      	str	r3, [r7, #12]
          EXTI->EXTICR[position >> 2U] &= ~tmp;
 8008cd4:	4a31      	ldr	r2, [pc, #196]	; (8008d9c <HAL_GPIO_DeInit+0x1b4>)
 8008cd6:	69bb      	ldr	r3, [r7, #24]
 8008cd8:	089b      	lsrs	r3, r3, #2
 8008cda:	3318      	adds	r3, #24
 8008cdc:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	43da      	mvns	r2, r3
 8008ce4:	482d      	ldr	r0, [pc, #180]	; (8008d9c <HAL_GPIO_DeInit+0x1b4>)
 8008ce6:	69bb      	ldr	r3, [r7, #24]
 8008ce8:	089b      	lsrs	r3, r3, #2
 8008cea:	400a      	ands	r2, r1
 8008cec:	3318      	adds	r3, #24
 8008cee:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
        }
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      p_gpio->MODER |= (GPIO_MODER_MODE0 << (pin_position * 2U));
 8008cf2:	697b      	ldr	r3, [r7, #20]
 8008cf4:	681a      	ldr	r2, [r3, #0]
 8008cf6:	69fb      	ldr	r3, [r7, #28]
 8008cf8:	005b      	lsls	r3, r3, #1
 8008cfa:	2103      	movs	r1, #3
 8008cfc:	fa01 f303 	lsl.w	r3, r1, r3
 8008d00:	431a      	orrs	r2, r3
 8008d02:	697b      	ldr	r3, [r7, #20]
 8008d04:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      p_gpio->AFR[pin_position >> 3U] &= ~(0x0FUL << ((pin_position & 0x07U) * 4U));
 8008d06:	69fb      	ldr	r3, [r7, #28]
 8008d08:	08da      	lsrs	r2, r3, #3
 8008d0a:	697b      	ldr	r3, [r7, #20]
 8008d0c:	3208      	adds	r2, #8
 8008d0e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008d12:	69fb      	ldr	r3, [r7, #28]
 8008d14:	f003 0307 	and.w	r3, r3, #7
 8008d18:	009b      	lsls	r3, r3, #2
 8008d1a:	220f      	movs	r2, #15
 8008d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8008d20:	43db      	mvns	r3, r3
 8008d22:	69fa      	ldr	r2, [r7, #28]
 8008d24:	08d2      	lsrs	r2, r2, #3
 8008d26:	4019      	ands	r1, r3
 8008d28:	697b      	ldr	r3, [r7, #20]
 8008d2a:	3208      	adds	r2, #8
 8008d2c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      p_gpio->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * 2U));
 8008d30:	697b      	ldr	r3, [r7, #20]
 8008d32:	689a      	ldr	r2, [r3, #8]
 8008d34:	69fb      	ldr	r3, [r7, #28]
 8008d36:	005b      	lsls	r3, r3, #1
 8008d38:	2103      	movs	r1, #3
 8008d3a:	fa01 f303 	lsl.w	r3, r1, r3
 8008d3e:	43db      	mvns	r3, r3
 8008d40:	401a      	ands	r2, r3
 8008d42:	697b      	ldr	r3, [r7, #20]
 8008d44:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      p_gpio->OTYPER  &= ~(GPIO_OTYPER_OT0 << pin_position);
 8008d46:	697b      	ldr	r3, [r7, #20]
 8008d48:	685a      	ldr	r2, [r3, #4]
 8008d4a:	2101      	movs	r1, #1
 8008d4c:	69fb      	ldr	r3, [r7, #28]
 8008d4e:	fa01 f303 	lsl.w	r3, r1, r3
 8008d52:	43db      	mvns	r3, r3
 8008d54:	401a      	ands	r2, r3
 8008d56:	697b      	ldr	r3, [r7, #20]
 8008d58:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      p_gpio->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (pin_position * 2U));
 8008d5a:	697b      	ldr	r3, [r7, #20]
 8008d5c:	68da      	ldr	r2, [r3, #12]
 8008d5e:	69fb      	ldr	r3, [r7, #28]
 8008d60:	005b      	lsls	r3, r3, #1
 8008d62:	2103      	movs	r1, #3
 8008d64:	fa01 f303 	lsl.w	r3, r1, r3
 8008d68:	43db      	mvns	r3, r3
 8008d6a:	401a      	ands	r2, r3
 8008d6c:	697b      	ldr	r3, [r7, #20]
 8008d6e:	60da      	str	r2, [r3, #12]
    }

    position++;
 8008d70:	69bb      	ldr	r3, [r7, #24]
 8008d72:	3301      	adds	r3, #1
 8008d74:	61bb      	str	r3, [r7, #24]
  while ((GPIO_Pin >> position) != 0U)
 8008d76:	683a      	ldr	r2, [r7, #0]
 8008d78:	69bb      	ldr	r3, [r7, #24]
 8008d7a:	fa22 f303 	lsr.w	r3, r2, r3
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	f47f af3c 	bne.w	8008bfc <HAL_GPIO_DeInit+0x14>
  }
}
 8008d84:	bf00      	nop
 8008d86:	bf00      	nop
 8008d88:	3724      	adds	r7, #36	; 0x24
 8008d8a:	46bd      	mov	sp, r7
 8008d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d90:	4770      	bx	lr
 8008d92:	bf00      	nop
 8008d94:	46020000 	.word	0x46020000
 8008d98:	0801506c 	.word	0x0801506c
 8008d9c:	46022000 	.word	0x46022000
 8008da0:	002f7f7f 	.word	0x002f7f7f

08008da4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8008da4:	b480      	push	{r7}
 8008da6:	b085      	sub	sp, #20
 8008da8:	af00      	add	r7, sp, #0
 8008daa:	6078      	str	r0, [r7, #4]
 8008dac:	460b      	mov	r3, r1
 8008dae:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0U)
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	691a      	ldr	r2, [r3, #16]
 8008db4:	887b      	ldrh	r3, [r7, #2]
 8008db6:	4013      	ands	r3, r2
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d002      	beq.n	8008dc2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8008dbc:	2301      	movs	r3, #1
 8008dbe:	73fb      	strb	r3, [r7, #15]
 8008dc0:	e001      	b.n	8008dc6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8008dc2:	2300      	movs	r3, #0
 8008dc4:	73fb      	strb	r3, [r7, #15]
  }

  return bitstatus;
 8008dc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8008dc8:	4618      	mov	r0, r3
 8008dca:	3714      	adds	r7, #20
 8008dcc:	46bd      	mov	sp, r7
 8008dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dd2:	4770      	bx	lr

08008dd4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008dd4:	b480      	push	{r7}
 8008dd6:	b083      	sub	sp, #12
 8008dd8:	af00      	add	r7, sp, #0
 8008dda:	6078      	str	r0, [r7, #4]
 8008ddc:	460b      	mov	r3, r1
 8008dde:	807b      	strh	r3, [r7, #2]
 8008de0:	4613      	mov	r3, r2
 8008de2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8008de4:	787b      	ldrb	r3, [r7, #1]
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d003      	beq.n	8008df2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8008dea:	887a      	ldrh	r2, [r7, #2]
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
  }
}
 8008df0:	e002      	b.n	8008df8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
 8008df2:	887a      	ldrh	r2, [r7, #2]
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8008df8:	bf00      	nop
 8008dfa:	370c      	adds	r7, #12
 8008dfc:	46bd      	mov	sp, r7
 8008dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e02:	4770      	bx	lr

08008e04 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8008e04:	b480      	push	{r7}
 8008e06:	b085      	sub	sp, #20
 8008e08:	af00      	add	r7, sp, #0
 8008e0a:	6078      	str	r0, [r7, #4]
 8008e0c:	460b      	mov	r3, r1
 8008e0e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	695b      	ldr	r3, [r3, #20]
 8008e14:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8008e16:	887a      	ldrh	r2, [r7, #2]
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	4013      	ands	r3, r2
 8008e1c:	041a      	lsls	r2, r3, #16
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	43d9      	mvns	r1, r3
 8008e22:	887b      	ldrh	r3, [r7, #2]
 8008e24:	400b      	ands	r3, r1
 8008e26:	431a      	orrs	r2, r3
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	619a      	str	r2, [r3, #24]
}
 8008e2c:	bf00      	nop
 8008e2e:	3714      	adds	r7, #20
 8008e30:	46bd      	mov	sp, r7
 8008e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e36:	4770      	bx	lr

08008e38 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8008e38:	b580      	push	{r7, lr}
 8008e3a:	b082      	sub	sp, #8
 8008e3c:	af00      	add	r7, sp, #0
 8008e3e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d101      	bne.n	8008e4a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8008e46:	2301      	movs	r3, #1
 8008e48:	e081      	b.n	8008f4e <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008e50:	b2db      	uxtb	r3, r3
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d106      	bne.n	8008e64 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	2200      	movs	r2, #0
 8008e5a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8008e5e:	6878      	ldr	r0, [r7, #4]
 8008e60:	f7fc fcd4 	bl	800580c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	2224      	movs	r2, #36	; 0x24
 8008e68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	681a      	ldr	r2, [r3, #0]
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	f022 0201 	bic.w	r2, r2, #1
 8008e7a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	685a      	ldr	r2, [r3, #4]
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8008e88:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	689a      	ldr	r2, [r3, #8]
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008e98:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	68db      	ldr	r3, [r3, #12]
 8008e9e:	2b01      	cmp	r3, #1
 8008ea0:	d107      	bne.n	8008eb2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	689a      	ldr	r2, [r3, #8]
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008eae:	609a      	str	r2, [r3, #8]
 8008eb0:	e006      	b.n	8008ec0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	689a      	ldr	r2, [r3, #8]
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8008ebe:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	68db      	ldr	r3, [r3, #12]
 8008ec4:	2b02      	cmp	r3, #2
 8008ec6:	d104      	bne.n	8008ed2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008ed0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	685b      	ldr	r3, [r3, #4]
 8008ed8:	687a      	ldr	r2, [r7, #4]
 8008eda:	6812      	ldr	r2, [r2, #0]
 8008edc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8008ee0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008ee4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	68da      	ldr	r2, [r3, #12]
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008ef4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	691a      	ldr	r2, [r3, #16]
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	695b      	ldr	r3, [r3, #20]
 8008efe:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	699b      	ldr	r3, [r3, #24]
 8008f06:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	430a      	orrs	r2, r1
 8008f0e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	69d9      	ldr	r1, [r3, #28]
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	6a1a      	ldr	r2, [r3, #32]
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	430a      	orrs	r2, r1
 8008f1e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	681a      	ldr	r2, [r3, #0]
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	f042 0201 	orr.w	r2, r2, #1
 8008f2e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	2200      	movs	r2, #0
 8008f34:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	2220      	movs	r2, #32
 8008f3a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	2200      	movs	r2, #0
 8008f42:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	2200      	movs	r2, #0
 8008f48:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8008f4c:	2300      	movs	r3, #0
}
 8008f4e:	4618      	mov	r0, r3
 8008f50:	3708      	adds	r7, #8
 8008f52:	46bd      	mov	sp, r7
 8008f54:	bd80      	pop	{r7, pc}

08008f56 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8008f56:	b580      	push	{r7, lr}
 8008f58:	b082      	sub	sp, #8
 8008f5a:	af00      	add	r7, sp, #0
 8008f5c:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	d101      	bne.n	8008f68 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8008f64:	2301      	movs	r3, #1
 8008f66:	e021      	b.n	8008fac <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	2224      	movs	r2, #36	; 0x24
 8008f6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	681a      	ldr	r2, [r3, #0]
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	f022 0201 	bic.w	r2, r2, #1
 8008f7e:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8008f80:	6878      	ldr	r0, [r7, #4]
 8008f82:	f7fc fd09 	bl	8005998 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	2200      	movs	r2, #0
 8008f8a:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	2200      	movs	r2, #0
 8008f90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	2200      	movs	r2, #0
 8008f98:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	2200      	movs	r2, #0
 8008f9e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	2200      	movs	r2, #0
 8008fa6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8008faa:	2300      	movs	r3, #0
}
 8008fac:	4618      	mov	r0, r3
 8008fae:	3708      	adds	r7, #8
 8008fb0:	46bd      	mov	sp, r7
 8008fb2:	bd80      	pop	{r7, pc}

08008fb4 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008fb4:	b580      	push	{r7, lr}
 8008fb6:	b088      	sub	sp, #32
 8008fb8:	af02      	add	r7, sp, #8
 8008fba:	60f8      	str	r0, [r7, #12]
 8008fbc:	4608      	mov	r0, r1
 8008fbe:	4611      	mov	r1, r2
 8008fc0:	461a      	mov	r2, r3
 8008fc2:	4603      	mov	r3, r0
 8008fc4:	817b      	strh	r3, [r7, #10]
 8008fc6:	460b      	mov	r3, r1
 8008fc8:	813b      	strh	r3, [r7, #8]
 8008fca:	4613      	mov	r3, r2
 8008fcc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008fce:	68fb      	ldr	r3, [r7, #12]
 8008fd0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008fd4:	b2db      	uxtb	r3, r3
 8008fd6:	2b20      	cmp	r3, #32
 8008fd8:	f040 80f9 	bne.w	80091ce <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8008fdc:	6a3b      	ldr	r3, [r7, #32]
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d002      	beq.n	8008fe8 <HAL_I2C_Mem_Write+0x34>
 8008fe2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	d105      	bne.n	8008ff4 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008fee:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8008ff0:	2301      	movs	r3, #1
 8008ff2:	e0ed      	b.n	80091d0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008ffa:	2b01      	cmp	r3, #1
 8008ffc:	d101      	bne.n	8009002 <HAL_I2C_Mem_Write+0x4e>
 8008ffe:	2302      	movs	r3, #2
 8009000:	e0e6      	b.n	80091d0 <HAL_I2C_Mem_Write+0x21c>
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	2201      	movs	r2, #1
 8009006:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800900a:	f7fd fc99 	bl	8006940 <HAL_GetTick>
 800900e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8009010:	697b      	ldr	r3, [r7, #20]
 8009012:	9300      	str	r3, [sp, #0]
 8009014:	2319      	movs	r3, #25
 8009016:	2201      	movs	r2, #1
 8009018:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800901c:	68f8      	ldr	r0, [r7, #12]
 800901e:	f000 fac3 	bl	80095a8 <I2C_WaitOnFlagUntilTimeout>
 8009022:	4603      	mov	r3, r0
 8009024:	2b00      	cmp	r3, #0
 8009026:	d001      	beq.n	800902c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8009028:	2301      	movs	r3, #1
 800902a:	e0d1      	b.n	80091d0 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	2221      	movs	r2, #33	; 0x21
 8009030:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	2240      	movs	r2, #64	; 0x40
 8009038:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	2200      	movs	r2, #0
 8009040:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	6a3a      	ldr	r2, [r7, #32]
 8009046:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800904c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	2200      	movs	r2, #0
 8009052:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8009054:	88f8      	ldrh	r0, [r7, #6]
 8009056:	893a      	ldrh	r2, [r7, #8]
 8009058:	8979      	ldrh	r1, [r7, #10]
 800905a:	697b      	ldr	r3, [r7, #20]
 800905c:	9301      	str	r3, [sp, #4]
 800905e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009060:	9300      	str	r3, [sp, #0]
 8009062:	4603      	mov	r3, r0
 8009064:	68f8      	ldr	r0, [r7, #12]
 8009066:	f000 f9d3 	bl	8009410 <I2C_RequestMemoryWrite>
 800906a:	4603      	mov	r3, r0
 800906c:	2b00      	cmp	r3, #0
 800906e:	d005      	beq.n	800907c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	2200      	movs	r2, #0
 8009074:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8009078:	2301      	movs	r3, #1
 800907a:	e0a9      	b.n	80091d0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009080:	b29b      	uxth	r3, r3
 8009082:	2bff      	cmp	r3, #255	; 0xff
 8009084:	d90e      	bls.n	80090a4 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	22ff      	movs	r2, #255	; 0xff
 800908a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009090:	b2da      	uxtb	r2, r3
 8009092:	8979      	ldrh	r1, [r7, #10]
 8009094:	2300      	movs	r3, #0
 8009096:	9300      	str	r3, [sp, #0]
 8009098:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800909c:	68f8      	ldr	r0, [r7, #12]
 800909e:	f000 fc2b 	bl	80098f8 <I2C_TransferConfig>
 80090a2:	e00f      	b.n	80090c4 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80090a8:	b29a      	uxth	r2, r3
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80090b2:	b2da      	uxtb	r2, r3
 80090b4:	8979      	ldrh	r1, [r7, #10]
 80090b6:	2300      	movs	r3, #0
 80090b8:	9300      	str	r3, [sp, #0]
 80090ba:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80090be:	68f8      	ldr	r0, [r7, #12]
 80090c0:	f000 fc1a 	bl	80098f8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80090c4:	697a      	ldr	r2, [r7, #20]
 80090c6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80090c8:	68f8      	ldr	r0, [r7, #12]
 80090ca:	f000 faad 	bl	8009628 <I2C_WaitOnTXISFlagUntilTimeout>
 80090ce:	4603      	mov	r3, r0
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	d001      	beq.n	80090d8 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80090d4:	2301      	movs	r3, #1
 80090d6:	e07b      	b.n	80091d0 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090dc:	781a      	ldrb	r2, [r3, #0]
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090e8:	1c5a      	adds	r2, r3, #1
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80090ee:	68fb      	ldr	r3, [r7, #12]
 80090f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80090f2:	b29b      	uxth	r3, r3
 80090f4:	3b01      	subs	r3, #1
 80090f6:	b29a      	uxth	r2, r3
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009100:	3b01      	subs	r3, #1
 8009102:	b29a      	uxth	r2, r3
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800910c:	b29b      	uxth	r3, r3
 800910e:	2b00      	cmp	r3, #0
 8009110:	d034      	beq.n	800917c <HAL_I2C_Mem_Write+0x1c8>
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009116:	2b00      	cmp	r3, #0
 8009118:	d130      	bne.n	800917c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800911a:	697b      	ldr	r3, [r7, #20]
 800911c:	9300      	str	r3, [sp, #0]
 800911e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009120:	2200      	movs	r2, #0
 8009122:	2180      	movs	r1, #128	; 0x80
 8009124:	68f8      	ldr	r0, [r7, #12]
 8009126:	f000 fa3f 	bl	80095a8 <I2C_WaitOnFlagUntilTimeout>
 800912a:	4603      	mov	r3, r0
 800912c:	2b00      	cmp	r3, #0
 800912e:	d001      	beq.n	8009134 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8009130:	2301      	movs	r3, #1
 8009132:	e04d      	b.n	80091d0 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009138:	b29b      	uxth	r3, r3
 800913a:	2bff      	cmp	r3, #255	; 0xff
 800913c:	d90e      	bls.n	800915c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	22ff      	movs	r2, #255	; 0xff
 8009142:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009148:	b2da      	uxtb	r2, r3
 800914a:	8979      	ldrh	r1, [r7, #10]
 800914c:	2300      	movs	r3, #0
 800914e:	9300      	str	r3, [sp, #0]
 8009150:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009154:	68f8      	ldr	r0, [r7, #12]
 8009156:	f000 fbcf 	bl	80098f8 <I2C_TransferConfig>
 800915a:	e00f      	b.n	800917c <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009160:	b29a      	uxth	r2, r3
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800916a:	b2da      	uxtb	r2, r3
 800916c:	8979      	ldrh	r1, [r7, #10]
 800916e:	2300      	movs	r3, #0
 8009170:	9300      	str	r3, [sp, #0]
 8009172:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009176:	68f8      	ldr	r0, [r7, #12]
 8009178:	f000 fbbe 	bl	80098f8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009180:	b29b      	uxth	r3, r3
 8009182:	2b00      	cmp	r3, #0
 8009184:	d19e      	bne.n	80090c4 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009186:	697a      	ldr	r2, [r7, #20]
 8009188:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800918a:	68f8      	ldr	r0, [r7, #12]
 800918c:	f000 fa8c 	bl	80096a8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8009190:	4603      	mov	r3, r0
 8009192:	2b00      	cmp	r3, #0
 8009194:	d001      	beq.n	800919a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8009196:	2301      	movs	r3, #1
 8009198:	e01a      	b.n	80091d0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	2220      	movs	r2, #32
 80091a0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	6859      	ldr	r1, [r3, #4]
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	681a      	ldr	r2, [r3, #0]
 80091ac:	4b0a      	ldr	r3, [pc, #40]	; (80091d8 <HAL_I2C_Mem_Write+0x224>)
 80091ae:	400b      	ands	r3, r1
 80091b0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	2220      	movs	r2, #32
 80091b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	2200      	movs	r2, #0
 80091be:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	2200      	movs	r2, #0
 80091c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80091ca:	2300      	movs	r3, #0
 80091cc:	e000      	b.n	80091d0 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80091ce:	2302      	movs	r3, #2
  }
}
 80091d0:	4618      	mov	r0, r3
 80091d2:	3718      	adds	r7, #24
 80091d4:	46bd      	mov	sp, r7
 80091d6:	bd80      	pop	{r7, pc}
 80091d8:	fe00e800 	.word	0xfe00e800

080091dc <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80091dc:	b580      	push	{r7, lr}
 80091de:	b088      	sub	sp, #32
 80091e0:	af02      	add	r7, sp, #8
 80091e2:	60f8      	str	r0, [r7, #12]
 80091e4:	4608      	mov	r0, r1
 80091e6:	4611      	mov	r1, r2
 80091e8:	461a      	mov	r2, r3
 80091ea:	4603      	mov	r3, r0
 80091ec:	817b      	strh	r3, [r7, #10]
 80091ee:	460b      	mov	r3, r1
 80091f0:	813b      	strh	r3, [r7, #8]
 80091f2:	4613      	mov	r3, r2
 80091f4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80091fc:	b2db      	uxtb	r3, r3
 80091fe:	2b20      	cmp	r3, #32
 8009200:	f040 80fd 	bne.w	80093fe <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8009204:	6a3b      	ldr	r3, [r7, #32]
 8009206:	2b00      	cmp	r3, #0
 8009208:	d002      	beq.n	8009210 <HAL_I2C_Mem_Read+0x34>
 800920a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800920c:	2b00      	cmp	r3, #0
 800920e:	d105      	bne.n	800921c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009216:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8009218:	2301      	movs	r3, #1
 800921a:	e0f1      	b.n	8009400 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009222:	2b01      	cmp	r3, #1
 8009224:	d101      	bne.n	800922a <HAL_I2C_Mem_Read+0x4e>
 8009226:	2302      	movs	r3, #2
 8009228:	e0ea      	b.n	8009400 <HAL_I2C_Mem_Read+0x224>
 800922a:	68fb      	ldr	r3, [r7, #12]
 800922c:	2201      	movs	r2, #1
 800922e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8009232:	f7fd fb85 	bl	8006940 <HAL_GetTick>
 8009236:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8009238:	697b      	ldr	r3, [r7, #20]
 800923a:	9300      	str	r3, [sp, #0]
 800923c:	2319      	movs	r3, #25
 800923e:	2201      	movs	r2, #1
 8009240:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8009244:	68f8      	ldr	r0, [r7, #12]
 8009246:	f000 f9af 	bl	80095a8 <I2C_WaitOnFlagUntilTimeout>
 800924a:	4603      	mov	r3, r0
 800924c:	2b00      	cmp	r3, #0
 800924e:	d001      	beq.n	8009254 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8009250:	2301      	movs	r3, #1
 8009252:	e0d5      	b.n	8009400 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8009254:	68fb      	ldr	r3, [r7, #12]
 8009256:	2222      	movs	r2, #34	; 0x22
 8009258:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	2240      	movs	r2, #64	; 0x40
 8009260:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	2200      	movs	r2, #0
 8009268:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	6a3a      	ldr	r2, [r7, #32]
 800926e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8009274:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	2200      	movs	r2, #0
 800927a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800927c:	88f8      	ldrh	r0, [r7, #6]
 800927e:	893a      	ldrh	r2, [r7, #8]
 8009280:	8979      	ldrh	r1, [r7, #10]
 8009282:	697b      	ldr	r3, [r7, #20]
 8009284:	9301      	str	r3, [sp, #4]
 8009286:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009288:	9300      	str	r3, [sp, #0]
 800928a:	4603      	mov	r3, r0
 800928c:	68f8      	ldr	r0, [r7, #12]
 800928e:	f000 f913 	bl	80094b8 <I2C_RequestMemoryRead>
 8009292:	4603      	mov	r3, r0
 8009294:	2b00      	cmp	r3, #0
 8009296:	d005      	beq.n	80092a4 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	2200      	movs	r2, #0
 800929c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80092a0:	2301      	movs	r3, #1
 80092a2:	e0ad      	b.n	8009400 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80092a8:	b29b      	uxth	r3, r3
 80092aa:	2bff      	cmp	r3, #255	; 0xff
 80092ac:	d90e      	bls.n	80092cc <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	22ff      	movs	r2, #255	; 0xff
 80092b2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80092b4:	68fb      	ldr	r3, [r7, #12]
 80092b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80092b8:	b2da      	uxtb	r2, r3
 80092ba:	8979      	ldrh	r1, [r7, #10]
 80092bc:	4b52      	ldr	r3, [pc, #328]	; (8009408 <HAL_I2C_Mem_Read+0x22c>)
 80092be:	9300      	str	r3, [sp, #0]
 80092c0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80092c4:	68f8      	ldr	r0, [r7, #12]
 80092c6:	f000 fb17 	bl	80098f8 <I2C_TransferConfig>
 80092ca:	e00f      	b.n	80092ec <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80092d0:	b29a      	uxth	r2, r3
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80092da:	b2da      	uxtb	r2, r3
 80092dc:	8979      	ldrh	r1, [r7, #10]
 80092de:	4b4a      	ldr	r3, [pc, #296]	; (8009408 <HAL_I2C_Mem_Read+0x22c>)
 80092e0:	9300      	str	r3, [sp, #0]
 80092e2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80092e6:	68f8      	ldr	r0, [r7, #12]
 80092e8:	f000 fb06 	bl	80098f8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80092ec:	697b      	ldr	r3, [r7, #20]
 80092ee:	9300      	str	r3, [sp, #0]
 80092f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092f2:	2200      	movs	r2, #0
 80092f4:	2104      	movs	r1, #4
 80092f6:	68f8      	ldr	r0, [r7, #12]
 80092f8:	f000 f956 	bl	80095a8 <I2C_WaitOnFlagUntilTimeout>
 80092fc:	4603      	mov	r3, r0
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d001      	beq.n	8009306 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8009302:	2301      	movs	r3, #1
 8009304:	e07c      	b.n	8009400 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009310:	b2d2      	uxtb	r2, r2
 8009312:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009318:	1c5a      	adds	r2, r3, #1
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800931e:	68fb      	ldr	r3, [r7, #12]
 8009320:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009322:	3b01      	subs	r3, #1
 8009324:	b29a      	uxth	r2, r3
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800932e:	b29b      	uxth	r3, r3
 8009330:	3b01      	subs	r3, #1
 8009332:	b29a      	uxth	r2, r3
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800933c:	b29b      	uxth	r3, r3
 800933e:	2b00      	cmp	r3, #0
 8009340:	d034      	beq.n	80093ac <HAL_I2C_Mem_Read+0x1d0>
 8009342:	68fb      	ldr	r3, [r7, #12]
 8009344:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009346:	2b00      	cmp	r3, #0
 8009348:	d130      	bne.n	80093ac <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800934a:	697b      	ldr	r3, [r7, #20]
 800934c:	9300      	str	r3, [sp, #0]
 800934e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009350:	2200      	movs	r2, #0
 8009352:	2180      	movs	r1, #128	; 0x80
 8009354:	68f8      	ldr	r0, [r7, #12]
 8009356:	f000 f927 	bl	80095a8 <I2C_WaitOnFlagUntilTimeout>
 800935a:	4603      	mov	r3, r0
 800935c:	2b00      	cmp	r3, #0
 800935e:	d001      	beq.n	8009364 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8009360:	2301      	movs	r3, #1
 8009362:	e04d      	b.n	8009400 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009368:	b29b      	uxth	r3, r3
 800936a:	2bff      	cmp	r3, #255	; 0xff
 800936c:	d90e      	bls.n	800938c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800936e:	68fb      	ldr	r3, [r7, #12]
 8009370:	22ff      	movs	r2, #255	; 0xff
 8009372:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009378:	b2da      	uxtb	r2, r3
 800937a:	8979      	ldrh	r1, [r7, #10]
 800937c:	2300      	movs	r3, #0
 800937e:	9300      	str	r3, [sp, #0]
 8009380:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009384:	68f8      	ldr	r0, [r7, #12]
 8009386:	f000 fab7 	bl	80098f8 <I2C_TransferConfig>
 800938a:	e00f      	b.n	80093ac <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009390:	b29a      	uxth	r2, r3
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800939a:	b2da      	uxtb	r2, r3
 800939c:	8979      	ldrh	r1, [r7, #10]
 800939e:	2300      	movs	r3, #0
 80093a0:	9300      	str	r3, [sp, #0]
 80093a2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80093a6:	68f8      	ldr	r0, [r7, #12]
 80093a8:	f000 faa6 	bl	80098f8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80093b0:	b29b      	uxth	r3, r3
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d19a      	bne.n	80092ec <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80093b6:	697a      	ldr	r2, [r7, #20]
 80093b8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80093ba:	68f8      	ldr	r0, [r7, #12]
 80093bc:	f000 f974 	bl	80096a8 <I2C_WaitOnSTOPFlagUntilTimeout>
 80093c0:	4603      	mov	r3, r0
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	d001      	beq.n	80093ca <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80093c6:	2301      	movs	r3, #1
 80093c8:	e01a      	b.n	8009400 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	2220      	movs	r2, #32
 80093d0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	6859      	ldr	r1, [r3, #4]
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	681a      	ldr	r2, [r3, #0]
 80093dc:	4b0b      	ldr	r3, [pc, #44]	; (800940c <HAL_I2C_Mem_Read+0x230>)
 80093de:	400b      	ands	r3, r1
 80093e0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	2220      	movs	r2, #32
 80093e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	2200      	movs	r2, #0
 80093ee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	2200      	movs	r2, #0
 80093f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80093fa:	2300      	movs	r3, #0
 80093fc:	e000      	b.n	8009400 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80093fe:	2302      	movs	r3, #2
  }
}
 8009400:	4618      	mov	r0, r3
 8009402:	3718      	adds	r7, #24
 8009404:	46bd      	mov	sp, r7
 8009406:	bd80      	pop	{r7, pc}
 8009408:	80002400 	.word	0x80002400
 800940c:	fe00e800 	.word	0xfe00e800

08009410 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8009410:	b580      	push	{r7, lr}
 8009412:	b086      	sub	sp, #24
 8009414:	af02      	add	r7, sp, #8
 8009416:	60f8      	str	r0, [r7, #12]
 8009418:	4608      	mov	r0, r1
 800941a:	4611      	mov	r1, r2
 800941c:	461a      	mov	r2, r3
 800941e:	4603      	mov	r3, r0
 8009420:	817b      	strh	r3, [r7, #10]
 8009422:	460b      	mov	r3, r1
 8009424:	813b      	strh	r3, [r7, #8]
 8009426:	4613      	mov	r3, r2
 8009428:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800942a:	88fb      	ldrh	r3, [r7, #6]
 800942c:	b2da      	uxtb	r2, r3
 800942e:	8979      	ldrh	r1, [r7, #10]
 8009430:	4b20      	ldr	r3, [pc, #128]	; (80094b4 <I2C_RequestMemoryWrite+0xa4>)
 8009432:	9300      	str	r3, [sp, #0]
 8009434:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009438:	68f8      	ldr	r0, [r7, #12]
 800943a:	f000 fa5d 	bl	80098f8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800943e:	69fa      	ldr	r2, [r7, #28]
 8009440:	69b9      	ldr	r1, [r7, #24]
 8009442:	68f8      	ldr	r0, [r7, #12]
 8009444:	f000 f8f0 	bl	8009628 <I2C_WaitOnTXISFlagUntilTimeout>
 8009448:	4603      	mov	r3, r0
 800944a:	2b00      	cmp	r3, #0
 800944c:	d001      	beq.n	8009452 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800944e:	2301      	movs	r3, #1
 8009450:	e02c      	b.n	80094ac <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8009452:	88fb      	ldrh	r3, [r7, #6]
 8009454:	2b01      	cmp	r3, #1
 8009456:	d105      	bne.n	8009464 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8009458:	893b      	ldrh	r3, [r7, #8]
 800945a:	b2da      	uxtb	r2, r3
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	629a      	str	r2, [r3, #40]	; 0x28
 8009462:	e015      	b.n	8009490 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8009464:	893b      	ldrh	r3, [r7, #8]
 8009466:	0a1b      	lsrs	r3, r3, #8
 8009468:	b29b      	uxth	r3, r3
 800946a:	b2da      	uxtb	r2, r3
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009472:	69fa      	ldr	r2, [r7, #28]
 8009474:	69b9      	ldr	r1, [r7, #24]
 8009476:	68f8      	ldr	r0, [r7, #12]
 8009478:	f000 f8d6 	bl	8009628 <I2C_WaitOnTXISFlagUntilTimeout>
 800947c:	4603      	mov	r3, r0
 800947e:	2b00      	cmp	r3, #0
 8009480:	d001      	beq.n	8009486 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8009482:	2301      	movs	r3, #1
 8009484:	e012      	b.n	80094ac <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8009486:	893b      	ldrh	r3, [r7, #8]
 8009488:	b2da      	uxtb	r2, r3
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8009490:	69fb      	ldr	r3, [r7, #28]
 8009492:	9300      	str	r3, [sp, #0]
 8009494:	69bb      	ldr	r3, [r7, #24]
 8009496:	2200      	movs	r2, #0
 8009498:	2180      	movs	r1, #128	; 0x80
 800949a:	68f8      	ldr	r0, [r7, #12]
 800949c:	f000 f884 	bl	80095a8 <I2C_WaitOnFlagUntilTimeout>
 80094a0:	4603      	mov	r3, r0
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d001      	beq.n	80094aa <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80094a6:	2301      	movs	r3, #1
 80094a8:	e000      	b.n	80094ac <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80094aa:	2300      	movs	r3, #0
}
 80094ac:	4618      	mov	r0, r3
 80094ae:	3710      	adds	r7, #16
 80094b0:	46bd      	mov	sp, r7
 80094b2:	bd80      	pop	{r7, pc}
 80094b4:	80002000 	.word	0x80002000

080094b8 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80094b8:	b580      	push	{r7, lr}
 80094ba:	b086      	sub	sp, #24
 80094bc:	af02      	add	r7, sp, #8
 80094be:	60f8      	str	r0, [r7, #12]
 80094c0:	4608      	mov	r0, r1
 80094c2:	4611      	mov	r1, r2
 80094c4:	461a      	mov	r2, r3
 80094c6:	4603      	mov	r3, r0
 80094c8:	817b      	strh	r3, [r7, #10]
 80094ca:	460b      	mov	r3, r1
 80094cc:	813b      	strh	r3, [r7, #8]
 80094ce:	4613      	mov	r3, r2
 80094d0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80094d2:	88fb      	ldrh	r3, [r7, #6]
 80094d4:	b2da      	uxtb	r2, r3
 80094d6:	8979      	ldrh	r1, [r7, #10]
 80094d8:	4b20      	ldr	r3, [pc, #128]	; (800955c <I2C_RequestMemoryRead+0xa4>)
 80094da:	9300      	str	r3, [sp, #0]
 80094dc:	2300      	movs	r3, #0
 80094de:	68f8      	ldr	r0, [r7, #12]
 80094e0:	f000 fa0a 	bl	80098f8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80094e4:	69fa      	ldr	r2, [r7, #28]
 80094e6:	69b9      	ldr	r1, [r7, #24]
 80094e8:	68f8      	ldr	r0, [r7, #12]
 80094ea:	f000 f89d 	bl	8009628 <I2C_WaitOnTXISFlagUntilTimeout>
 80094ee:	4603      	mov	r3, r0
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	d001      	beq.n	80094f8 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80094f4:	2301      	movs	r3, #1
 80094f6:	e02c      	b.n	8009552 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80094f8:	88fb      	ldrh	r3, [r7, #6]
 80094fa:	2b01      	cmp	r3, #1
 80094fc:	d105      	bne.n	800950a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80094fe:	893b      	ldrh	r3, [r7, #8]
 8009500:	b2da      	uxtb	r2, r3
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	629a      	str	r2, [r3, #40]	; 0x28
 8009508:	e015      	b.n	8009536 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800950a:	893b      	ldrh	r3, [r7, #8]
 800950c:	0a1b      	lsrs	r3, r3, #8
 800950e:	b29b      	uxth	r3, r3
 8009510:	b2da      	uxtb	r2, r3
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009518:	69fa      	ldr	r2, [r7, #28]
 800951a:	69b9      	ldr	r1, [r7, #24]
 800951c:	68f8      	ldr	r0, [r7, #12]
 800951e:	f000 f883 	bl	8009628 <I2C_WaitOnTXISFlagUntilTimeout>
 8009522:	4603      	mov	r3, r0
 8009524:	2b00      	cmp	r3, #0
 8009526:	d001      	beq.n	800952c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8009528:	2301      	movs	r3, #1
 800952a:	e012      	b.n	8009552 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800952c:	893b      	ldrh	r3, [r7, #8]
 800952e:	b2da      	uxtb	r2, r3
 8009530:	68fb      	ldr	r3, [r7, #12]
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8009536:	69fb      	ldr	r3, [r7, #28]
 8009538:	9300      	str	r3, [sp, #0]
 800953a:	69bb      	ldr	r3, [r7, #24]
 800953c:	2200      	movs	r2, #0
 800953e:	2140      	movs	r1, #64	; 0x40
 8009540:	68f8      	ldr	r0, [r7, #12]
 8009542:	f000 f831 	bl	80095a8 <I2C_WaitOnFlagUntilTimeout>
 8009546:	4603      	mov	r3, r0
 8009548:	2b00      	cmp	r3, #0
 800954a:	d001      	beq.n	8009550 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800954c:	2301      	movs	r3, #1
 800954e:	e000      	b.n	8009552 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8009550:	2300      	movs	r3, #0
}
 8009552:	4618      	mov	r0, r3
 8009554:	3710      	adds	r7, #16
 8009556:	46bd      	mov	sp, r7
 8009558:	bd80      	pop	{r7, pc}
 800955a:	bf00      	nop
 800955c:	80002000 	.word	0x80002000

08009560 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8009560:	b480      	push	{r7}
 8009562:	b083      	sub	sp, #12
 8009564:	af00      	add	r7, sp, #0
 8009566:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	699b      	ldr	r3, [r3, #24]
 800956e:	f003 0302 	and.w	r3, r3, #2
 8009572:	2b02      	cmp	r3, #2
 8009574:	d103      	bne.n	800957e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	2200      	movs	r2, #0
 800957c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	699b      	ldr	r3, [r3, #24]
 8009584:	f003 0301 	and.w	r3, r3, #1
 8009588:	2b01      	cmp	r3, #1
 800958a:	d007      	beq.n	800959c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	699a      	ldr	r2, [r3, #24]
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	f042 0201 	orr.w	r2, r2, #1
 800959a:	619a      	str	r2, [r3, #24]
  }
}
 800959c:	bf00      	nop
 800959e:	370c      	adds	r7, #12
 80095a0:	46bd      	mov	sp, r7
 80095a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095a6:	4770      	bx	lr

080095a8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80095a8:	b580      	push	{r7, lr}
 80095aa:	b084      	sub	sp, #16
 80095ac:	af00      	add	r7, sp, #0
 80095ae:	60f8      	str	r0, [r7, #12]
 80095b0:	60b9      	str	r1, [r7, #8]
 80095b2:	603b      	str	r3, [r7, #0]
 80095b4:	4613      	mov	r3, r2
 80095b6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80095b8:	e022      	b.n	8009600 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80095ba:	683b      	ldr	r3, [r7, #0]
 80095bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80095c0:	d01e      	beq.n	8009600 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80095c2:	f7fd f9bd 	bl	8006940 <HAL_GetTick>
 80095c6:	4602      	mov	r2, r0
 80095c8:	69bb      	ldr	r3, [r7, #24]
 80095ca:	1ad3      	subs	r3, r2, r3
 80095cc:	683a      	ldr	r2, [r7, #0]
 80095ce:	429a      	cmp	r2, r3
 80095d0:	d302      	bcc.n	80095d8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80095d2:	683b      	ldr	r3, [r7, #0]
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	d113      	bne.n	8009600 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80095dc:	f043 0220 	orr.w	r2, r3, #32
 80095e0:	68fb      	ldr	r3, [r7, #12]
 80095e2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	2220      	movs	r2, #32
 80095e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80095ec:	68fb      	ldr	r3, [r7, #12]
 80095ee:	2200      	movs	r2, #0
 80095f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	2200      	movs	r2, #0
 80095f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80095fc:	2301      	movs	r3, #1
 80095fe:	e00f      	b.n	8009620 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	699a      	ldr	r2, [r3, #24]
 8009606:	68bb      	ldr	r3, [r7, #8]
 8009608:	4013      	ands	r3, r2
 800960a:	68ba      	ldr	r2, [r7, #8]
 800960c:	429a      	cmp	r2, r3
 800960e:	bf0c      	ite	eq
 8009610:	2301      	moveq	r3, #1
 8009612:	2300      	movne	r3, #0
 8009614:	b2db      	uxtb	r3, r3
 8009616:	461a      	mov	r2, r3
 8009618:	79fb      	ldrb	r3, [r7, #7]
 800961a:	429a      	cmp	r2, r3
 800961c:	d0cd      	beq.n	80095ba <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800961e:	2300      	movs	r3, #0
}
 8009620:	4618      	mov	r0, r3
 8009622:	3710      	adds	r7, #16
 8009624:	46bd      	mov	sp, r7
 8009626:	bd80      	pop	{r7, pc}

08009628 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8009628:	b580      	push	{r7, lr}
 800962a:	b084      	sub	sp, #16
 800962c:	af00      	add	r7, sp, #0
 800962e:	60f8      	str	r0, [r7, #12]
 8009630:	60b9      	str	r1, [r7, #8]
 8009632:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8009634:	e02c      	b.n	8009690 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8009636:	687a      	ldr	r2, [r7, #4]
 8009638:	68b9      	ldr	r1, [r7, #8]
 800963a:	68f8      	ldr	r0, [r7, #12]
 800963c:	f000 f870 	bl	8009720 <I2C_IsErrorOccurred>
 8009640:	4603      	mov	r3, r0
 8009642:	2b00      	cmp	r3, #0
 8009644:	d001      	beq.n	800964a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8009646:	2301      	movs	r3, #1
 8009648:	e02a      	b.n	80096a0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800964a:	68bb      	ldr	r3, [r7, #8]
 800964c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009650:	d01e      	beq.n	8009690 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009652:	f7fd f975 	bl	8006940 <HAL_GetTick>
 8009656:	4602      	mov	r2, r0
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	1ad3      	subs	r3, r2, r3
 800965c:	68ba      	ldr	r2, [r7, #8]
 800965e:	429a      	cmp	r2, r3
 8009660:	d302      	bcc.n	8009668 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8009662:	68bb      	ldr	r3, [r7, #8]
 8009664:	2b00      	cmp	r3, #0
 8009666:	d113      	bne.n	8009690 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800966c:	f043 0220 	orr.w	r2, r3, #32
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8009674:	68fb      	ldr	r3, [r7, #12]
 8009676:	2220      	movs	r2, #32
 8009678:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	2200      	movs	r2, #0
 8009680:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009684:	68fb      	ldr	r3, [r7, #12]
 8009686:	2200      	movs	r2, #0
 8009688:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800968c:	2301      	movs	r3, #1
 800968e:	e007      	b.n	80096a0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8009690:	68fb      	ldr	r3, [r7, #12]
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	699b      	ldr	r3, [r3, #24]
 8009696:	f003 0302 	and.w	r3, r3, #2
 800969a:	2b02      	cmp	r3, #2
 800969c:	d1cb      	bne.n	8009636 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800969e:	2300      	movs	r3, #0
}
 80096a0:	4618      	mov	r0, r3
 80096a2:	3710      	adds	r7, #16
 80096a4:	46bd      	mov	sp, r7
 80096a6:	bd80      	pop	{r7, pc}

080096a8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80096a8:	b580      	push	{r7, lr}
 80096aa:	b084      	sub	sp, #16
 80096ac:	af00      	add	r7, sp, #0
 80096ae:	60f8      	str	r0, [r7, #12]
 80096b0:	60b9      	str	r1, [r7, #8]
 80096b2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80096b4:	e028      	b.n	8009708 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80096b6:	687a      	ldr	r2, [r7, #4]
 80096b8:	68b9      	ldr	r1, [r7, #8]
 80096ba:	68f8      	ldr	r0, [r7, #12]
 80096bc:	f000 f830 	bl	8009720 <I2C_IsErrorOccurred>
 80096c0:	4603      	mov	r3, r0
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	d001      	beq.n	80096ca <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80096c6:	2301      	movs	r3, #1
 80096c8:	e026      	b.n	8009718 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80096ca:	f7fd f939 	bl	8006940 <HAL_GetTick>
 80096ce:	4602      	mov	r2, r0
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	1ad3      	subs	r3, r2, r3
 80096d4:	68ba      	ldr	r2, [r7, #8]
 80096d6:	429a      	cmp	r2, r3
 80096d8:	d302      	bcc.n	80096e0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80096da:	68bb      	ldr	r3, [r7, #8]
 80096dc:	2b00      	cmp	r3, #0
 80096de:	d113      	bne.n	8009708 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80096e0:	68fb      	ldr	r3, [r7, #12]
 80096e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80096e4:	f043 0220 	orr.w	r2, r3, #32
 80096e8:	68fb      	ldr	r3, [r7, #12]
 80096ea:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	2220      	movs	r2, #32
 80096f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80096f4:	68fb      	ldr	r3, [r7, #12]
 80096f6:	2200      	movs	r2, #0
 80096f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80096fc:	68fb      	ldr	r3, [r7, #12]
 80096fe:	2200      	movs	r2, #0
 8009700:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8009704:	2301      	movs	r3, #1
 8009706:	e007      	b.n	8009718 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009708:	68fb      	ldr	r3, [r7, #12]
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	699b      	ldr	r3, [r3, #24]
 800970e:	f003 0320 	and.w	r3, r3, #32
 8009712:	2b20      	cmp	r3, #32
 8009714:	d1cf      	bne.n	80096b6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8009716:	2300      	movs	r3, #0
}
 8009718:	4618      	mov	r0, r3
 800971a:	3710      	adds	r7, #16
 800971c:	46bd      	mov	sp, r7
 800971e:	bd80      	pop	{r7, pc}

08009720 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009720:	b580      	push	{r7, lr}
 8009722:	b08a      	sub	sp, #40	; 0x28
 8009724:	af00      	add	r7, sp, #0
 8009726:	60f8      	str	r0, [r7, #12]
 8009728:	60b9      	str	r1, [r7, #8]
 800972a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800972c:	2300      	movs	r3, #0
 800972e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8009732:	68fb      	ldr	r3, [r7, #12]
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	699b      	ldr	r3, [r3, #24]
 8009738:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800973a:	2300      	movs	r3, #0
 800973c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8009742:	69bb      	ldr	r3, [r7, #24]
 8009744:	f003 0310 	and.w	r3, r3, #16
 8009748:	2b00      	cmp	r3, #0
 800974a:	d075      	beq.n	8009838 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	2210      	movs	r2, #16
 8009752:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8009754:	e056      	b.n	8009804 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8009756:	68bb      	ldr	r3, [r7, #8]
 8009758:	f1b3 3fff 	cmp.w	r3, #4294967295
 800975c:	d052      	beq.n	8009804 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800975e:	f7fd f8ef 	bl	8006940 <HAL_GetTick>
 8009762:	4602      	mov	r2, r0
 8009764:	69fb      	ldr	r3, [r7, #28]
 8009766:	1ad3      	subs	r3, r2, r3
 8009768:	68ba      	ldr	r2, [r7, #8]
 800976a:	429a      	cmp	r2, r3
 800976c:	d302      	bcc.n	8009774 <I2C_IsErrorOccurred+0x54>
 800976e:	68bb      	ldr	r3, [r7, #8]
 8009770:	2b00      	cmp	r3, #0
 8009772:	d147      	bne.n	8009804 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8009774:	68fb      	ldr	r3, [r7, #12]
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	685b      	ldr	r3, [r3, #4]
 800977a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800977e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009786:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	699b      	ldr	r3, [r3, #24]
 800978e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009792:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009796:	d12e      	bne.n	80097f6 <I2C_IsErrorOccurred+0xd6>
 8009798:	697b      	ldr	r3, [r7, #20]
 800979a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800979e:	d02a      	beq.n	80097f6 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 80097a0:	7cfb      	ldrb	r3, [r7, #19]
 80097a2:	2b20      	cmp	r3, #32
 80097a4:	d027      	beq.n	80097f6 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80097a6:	68fb      	ldr	r3, [r7, #12]
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	685a      	ldr	r2, [r3, #4]
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80097b4:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80097b6:	f7fd f8c3 	bl	8006940 <HAL_GetTick>
 80097ba:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80097bc:	e01b      	b.n	80097f6 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80097be:	f7fd f8bf 	bl	8006940 <HAL_GetTick>
 80097c2:	4602      	mov	r2, r0
 80097c4:	69fb      	ldr	r3, [r7, #28]
 80097c6:	1ad3      	subs	r3, r2, r3
 80097c8:	2b19      	cmp	r3, #25
 80097ca:	d914      	bls.n	80097f6 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80097d0:	f043 0220 	orr.w	r2, r3, #32
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	2220      	movs	r2, #32
 80097dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 80097e0:	68fb      	ldr	r3, [r7, #12]
 80097e2:	2200      	movs	r2, #0
 80097e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80097e8:	68fb      	ldr	r3, [r7, #12]
 80097ea:	2200      	movs	r2, #0
 80097ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 80097f0:	2301      	movs	r3, #1
 80097f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	699b      	ldr	r3, [r3, #24]
 80097fc:	f003 0320 	and.w	r3, r3, #32
 8009800:	2b20      	cmp	r3, #32
 8009802:	d1dc      	bne.n	80097be <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8009804:	68fb      	ldr	r3, [r7, #12]
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	699b      	ldr	r3, [r3, #24]
 800980a:	f003 0320 	and.w	r3, r3, #32
 800980e:	2b20      	cmp	r3, #32
 8009810:	d003      	beq.n	800981a <I2C_IsErrorOccurred+0xfa>
 8009812:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009816:	2b00      	cmp	r3, #0
 8009818:	d09d      	beq.n	8009756 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800981a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800981e:	2b00      	cmp	r3, #0
 8009820:	d103      	bne.n	800982a <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	2220      	movs	r2, #32
 8009828:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800982a:	6a3b      	ldr	r3, [r7, #32]
 800982c:	f043 0304 	orr.w	r3, r3, #4
 8009830:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8009832:	2301      	movs	r3, #1
 8009834:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8009838:	68fb      	ldr	r3, [r7, #12]
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	699b      	ldr	r3, [r3, #24]
 800983e:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8009840:	69bb      	ldr	r3, [r7, #24]
 8009842:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009846:	2b00      	cmp	r3, #0
 8009848:	d00b      	beq.n	8009862 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800984a:	6a3b      	ldr	r3, [r7, #32]
 800984c:	f043 0301 	orr.w	r3, r3, #1
 8009850:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8009852:	68fb      	ldr	r3, [r7, #12]
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	f44f 7280 	mov.w	r2, #256	; 0x100
 800985a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800985c:	2301      	movs	r3, #1
 800985e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8009862:	69bb      	ldr	r3, [r7, #24]
 8009864:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009868:	2b00      	cmp	r3, #0
 800986a:	d00b      	beq.n	8009884 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800986c:	6a3b      	ldr	r3, [r7, #32]
 800986e:	f043 0308 	orr.w	r3, r3, #8
 8009872:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8009874:	68fb      	ldr	r3, [r7, #12]
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800987c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800987e:	2301      	movs	r3, #1
 8009880:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8009884:	69bb      	ldr	r3, [r7, #24]
 8009886:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800988a:	2b00      	cmp	r3, #0
 800988c:	d00b      	beq.n	80098a6 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800988e:	6a3b      	ldr	r3, [r7, #32]
 8009890:	f043 0302 	orr.w	r3, r3, #2
 8009894:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8009896:	68fb      	ldr	r3, [r7, #12]
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800989e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80098a0:	2301      	movs	r3, #1
 80098a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80098a6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	d01c      	beq.n	80098e8 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80098ae:	68f8      	ldr	r0, [r7, #12]
 80098b0:	f7ff fe56 	bl	8009560 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80098b4:	68fb      	ldr	r3, [r7, #12]
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	6859      	ldr	r1, [r3, #4]
 80098ba:	68fb      	ldr	r3, [r7, #12]
 80098bc:	681a      	ldr	r2, [r3, #0]
 80098be:	4b0d      	ldr	r3, [pc, #52]	; (80098f4 <I2C_IsErrorOccurred+0x1d4>)
 80098c0:	400b      	ands	r3, r1
 80098c2:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80098c8:	6a3b      	ldr	r3, [r7, #32]
 80098ca:	431a      	orrs	r2, r3
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80098d0:	68fb      	ldr	r3, [r7, #12]
 80098d2:	2220      	movs	r2, #32
 80098d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80098d8:	68fb      	ldr	r3, [r7, #12]
 80098da:	2200      	movs	r2, #0
 80098dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80098e0:	68fb      	ldr	r3, [r7, #12]
 80098e2:	2200      	movs	r2, #0
 80098e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80098e8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80098ec:	4618      	mov	r0, r3
 80098ee:	3728      	adds	r7, #40	; 0x28
 80098f0:	46bd      	mov	sp, r7
 80098f2:	bd80      	pop	{r7, pc}
 80098f4:	fe00e800 	.word	0xfe00e800

080098f8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80098f8:	b480      	push	{r7}
 80098fa:	b087      	sub	sp, #28
 80098fc:	af00      	add	r7, sp, #0
 80098fe:	60f8      	str	r0, [r7, #12]
 8009900:	607b      	str	r3, [r7, #4]
 8009902:	460b      	mov	r3, r1
 8009904:	817b      	strh	r3, [r7, #10]
 8009906:	4613      	mov	r3, r2
 8009908:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800990a:	897b      	ldrh	r3, [r7, #10]
 800990c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8009910:	7a7b      	ldrb	r3, [r7, #9]
 8009912:	041b      	lsls	r3, r3, #16
 8009914:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009918:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800991e:	6a3b      	ldr	r3, [r7, #32]
 8009920:	4313      	orrs	r3, r2
 8009922:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009926:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8009928:	68fb      	ldr	r3, [r7, #12]
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	685a      	ldr	r2, [r3, #4]
 800992e:	6a3b      	ldr	r3, [r7, #32]
 8009930:	0d5b      	lsrs	r3, r3, #21
 8009932:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8009936:	4b08      	ldr	r3, [pc, #32]	; (8009958 <I2C_TransferConfig+0x60>)
 8009938:	430b      	orrs	r3, r1
 800993a:	43db      	mvns	r3, r3
 800993c:	ea02 0103 	and.w	r1, r2, r3
 8009940:	68fb      	ldr	r3, [r7, #12]
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	697a      	ldr	r2, [r7, #20]
 8009946:	430a      	orrs	r2, r1
 8009948:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800994a:	bf00      	nop
 800994c:	371c      	adds	r7, #28
 800994e:	46bd      	mov	sp, r7
 8009950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009954:	4770      	bx	lr
 8009956:	bf00      	nop
 8009958:	03ff63ff 	.word	0x03ff63ff

0800995c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800995c:	b480      	push	{r7}
 800995e:	b083      	sub	sp, #12
 8009960:	af00      	add	r7, sp, #0
 8009962:	6078      	str	r0, [r7, #4]
 8009964:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800996c:	b2db      	uxtb	r3, r3
 800996e:	2b20      	cmp	r3, #32
 8009970:	d138      	bne.n	80099e4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009978:	2b01      	cmp	r3, #1
 800997a:	d101      	bne.n	8009980 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800997c:	2302      	movs	r3, #2
 800997e:	e032      	b.n	80099e6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	2201      	movs	r2, #1
 8009984:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	2224      	movs	r2, #36	; 0x24
 800998c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	681a      	ldr	r2, [r3, #0]
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	f022 0201 	bic.w	r2, r2, #1
 800999e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	681a      	ldr	r2, [r3, #0]
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80099ae:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	6819      	ldr	r1, [r3, #0]
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	683a      	ldr	r2, [r7, #0]
 80099bc:	430a      	orrs	r2, r1
 80099be:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	681a      	ldr	r2, [r3, #0]
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	f042 0201 	orr.w	r2, r2, #1
 80099ce:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	2220      	movs	r2, #32
 80099d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	2200      	movs	r2, #0
 80099dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80099e0:	2300      	movs	r3, #0
 80099e2:	e000      	b.n	80099e6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80099e4:	2302      	movs	r3, #2
  }
}
 80099e6:	4618      	mov	r0, r3
 80099e8:	370c      	adds	r7, #12
 80099ea:	46bd      	mov	sp, r7
 80099ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099f0:	4770      	bx	lr

080099f2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80099f2:	b480      	push	{r7}
 80099f4:	b085      	sub	sp, #20
 80099f6:	af00      	add	r7, sp, #0
 80099f8:	6078      	str	r0, [r7, #4]
 80099fa:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009a02:	b2db      	uxtb	r3, r3
 8009a04:	2b20      	cmp	r3, #32
 8009a06:	d139      	bne.n	8009a7c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009a0e:	2b01      	cmp	r3, #1
 8009a10:	d101      	bne.n	8009a16 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8009a12:	2302      	movs	r3, #2
 8009a14:	e033      	b.n	8009a7e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	2201      	movs	r2, #1
 8009a1a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	2224      	movs	r2, #36	; 0x24
 8009a22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	681a      	ldr	r2, [r3, #0]
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	f022 0201 	bic.w	r2, r2, #1
 8009a34:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8009a3e:	68fb      	ldr	r3, [r7, #12]
 8009a40:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8009a44:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8009a46:	683b      	ldr	r3, [r7, #0]
 8009a48:	021b      	lsls	r3, r3, #8
 8009a4a:	68fa      	ldr	r2, [r7, #12]
 8009a4c:	4313      	orrs	r3, r2
 8009a4e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	68fa      	ldr	r2, [r7, #12]
 8009a56:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	681a      	ldr	r2, [r3, #0]
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	f042 0201 	orr.w	r2, r2, #1
 8009a66:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	2220      	movs	r2, #32
 8009a6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	2200      	movs	r2, #0
 8009a74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009a78:	2300      	movs	r3, #0
 8009a7a:	e000      	b.n	8009a7e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8009a7c:	2302      	movs	r3, #2
  }
}
 8009a7e:	4618      	mov	r0, r3
 8009a80:	3714      	adds	r7, #20
 8009a82:	46bd      	mov	sp, r7
 8009a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a88:	4770      	bx	lr
	...

08009a8c <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 8009a8c:	b480      	push	{r7}
 8009a8e:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 8009a90:	4b05      	ldr	r3, [pc, #20]	; (8009aa8 <HAL_ICACHE_Enable+0x1c>)
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	4a04      	ldr	r2, [pc, #16]	; (8009aa8 <HAL_ICACHE_Enable+0x1c>)
 8009a96:	f043 0301 	orr.w	r3, r3, #1
 8009a9a:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8009a9c:	2300      	movs	r3, #0
}
 8009a9e:	4618      	mov	r0, r3
 8009aa0:	46bd      	mov	sp, r7
 8009aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aa6:	4770      	bx	lr
 8009aa8:	40030400 	.word	0x40030400

08009aac <LL_DLYB_Enable>:
  * @param  DLYBx DLYB Instance
  * @retval None
  */

__STATIC_INLINE void LL_DLYB_Enable(DLYB_TypeDef *DLYBx)
{
 8009aac:	b480      	push	{r7}
 8009aae:	b083      	sub	sp, #12
 8009ab0:	af00      	add	r7, sp, #0
 8009ab2:	6078      	str	r0, [r7, #4]
  SET_BIT(DLYBx->CR, DLYB_CR_DEN);
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	f043 0201 	orr.w	r2, r3, #1
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	601a      	str	r2, [r3, #0]
}
 8009ac0:	bf00      	nop
 8009ac2:	370c      	adds	r7, #12
 8009ac4:	46bd      	mov	sp, r7
 8009ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aca:	4770      	bx	lr

08009acc <LL_DLYB_Disable>:
  * @param  DLYBx DLYB Instance.
  * @retval None
  */

__STATIC_INLINE void LL_DLYB_Disable(DLYB_TypeDef *DLYBx)
{
 8009acc:	b480      	push	{r7}
 8009ace:	b083      	sub	sp, #12
 8009ad0:	af00      	add	r7, sp, #0
 8009ad2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(DLYBx->CR, DLYB_CR_DEN);
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	f023 0201 	bic.w	r2, r3, #1
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	601a      	str	r2, [r3, #0]
}
 8009ae0:	bf00      	nop
 8009ae2:	370c      	adds	r7, #12
 8009ae4:	46bd      	mov	sp, r7
 8009ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aea:	4770      	bx	lr

08009aec <HAL_OSPI_Init>:
  *         in the OSPI_InitTypeDef and initialize the associated handle.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Init(OSPI_HandleTypeDef *hospi)
{
 8009aec:	b580      	push	{r7, lr}
 8009aee:	b086      	sub	sp, #24
 8009af0:	af02      	add	r7, sp, #8
 8009af2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009af4:	2300      	movs	r3, #0
 8009af6:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 8009af8:	f7fc ff22 	bl	8006940 <HAL_GetTick>
 8009afc:	60b8      	str	r0, [r7, #8]

  /* Check the OSPI handle allocation */
  if (hospi == NULL)
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	2b00      	cmp	r3, #0
 8009b02:	d102      	bne.n	8009b0a <HAL_OSPI_Init+0x1e>
  {
    status = HAL_ERROR;
 8009b04:	2301      	movs	r3, #1
 8009b06:	73fb      	strb	r3, [r7, #15]
 8009b08:	e0a5      	b.n	8009c56 <HAL_OSPI_Init+0x16a>
    assert_param(IS_OSPI_CS_BOUNDARY(hospi->Init.ChipSelectBoundary));
    assert_param(IS_OSPI_DLYBYP(hospi->Init.DelayBlockBypass));
    assert_param(IS_OSPI_MAXTRAN(hospi->Init.MaxTran));

    /* Initialize error code */
    hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	2200      	movs	r2, #0
 8009b0e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Check if the state is the reset state */
    if (hospi->State == HAL_OSPI_STATE_RESET)
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	f040 809e 	bne.w	8009c56 <HAL_OSPI_Init+0x16a>

      /* Init the low level hardware */
      hospi->MspInitCallback(hospi);
#else
      /* Initialization of the low level hardware */
      HAL_OSPI_MspInit(hospi);
 8009b1a:	6878      	ldr	r0, [r7, #4]
 8009b1c:	f7fc f9e8 	bl	8005ef0 <HAL_OSPI_MspInit>
#endif /* defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */

      /* Configure the default timeout for the OSPI memory access */
      (void)HAL_OSPI_SetTimeout(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE);
 8009b20:	f241 3188 	movw	r1, #5000	; 0x1388
 8009b24:	6878      	ldr	r0, [r7, #4]
 8009b26:	f000 f9ec 	bl	8009f02 <HAL_OSPI_SetTimeout>

      /* Configure memory type, device size, chip select high time, delay block bypass,
         free running clock, clock mode */
      MODIFY_REG(hospi->Instance->DCR1,
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	689a      	ldr	r2, [r3, #8]
 8009b30:	4b4b      	ldr	r3, [pc, #300]	; (8009c60 <HAL_OSPI_Init+0x174>)
 8009b32:	4013      	ands	r3, r2
 8009b34:	687a      	ldr	r2, [r7, #4]
 8009b36:	68d1      	ldr	r1, [r2, #12]
 8009b38:	687a      	ldr	r2, [r7, #4]
 8009b3a:	6912      	ldr	r2, [r2, #16]
 8009b3c:	3a01      	subs	r2, #1
 8009b3e:	0412      	lsls	r2, r2, #16
 8009b40:	4311      	orrs	r1, r2
 8009b42:	687a      	ldr	r2, [r7, #4]
 8009b44:	6952      	ldr	r2, [r2, #20]
 8009b46:	3a01      	subs	r2, #1
 8009b48:	0212      	lsls	r2, r2, #8
 8009b4a:	4311      	orrs	r1, r2
 8009b4c:	687a      	ldr	r2, [r7, #4]
 8009b4e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8009b50:	4311      	orrs	r1, r2
 8009b52:	687a      	ldr	r2, [r7, #4]
 8009b54:	69d2      	ldr	r2, [r2, #28]
 8009b56:	4311      	orrs	r1, r2
 8009b58:	687a      	ldr	r2, [r7, #4]
 8009b5a:	6812      	ldr	r2, [r2, #0]
 8009b5c:	430b      	orrs	r3, r1
 8009b5e:	6093      	str	r3, [r2, #8]
                 (hospi->Init.MemoryType | ((hospi->Init.DeviceSize - 1U) << OCTOSPI_DCR1_DEVSIZE_Pos) |
                  ((hospi->Init.ChipSelectHighTime - 1U) << OCTOSPI_DCR1_CSHT_Pos) |
                  hospi->Init.DelayBlockBypass | hospi->Init.ClockMode));

      /* Configure wrap size */
      MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_WRAPSIZE, hospi->Init.WrapSize);
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	68db      	ldr	r3, [r3, #12]
 8009b66:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	6a1a      	ldr	r2, [r3, #32]
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	430a      	orrs	r2, r1
 8009b74:	60da      	str	r2, [r3, #12]

      /* Configure chip select boundary and maximum transfer */
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b7a:	0419      	lsls	r1, r3, #16
                               (hospi->Init.MaxTran << OCTOSPI_DCR3_MAXTRAN_Pos));
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	430a      	orrs	r2, r1
 8009b86:	611a      	str	r2, [r3, #16]

      /* Configure refresh */
      hospi->Instance->DCR4 = hospi->Init.Refresh;
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	687a      	ldr	r2, [r7, #4]
 8009b8e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8009b90:	615a      	str	r2, [r3, #20]

      /* Configure FIFO threshold */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FTHRES, ((hospi->Init.FifoThreshold - 1U) << OCTOSPI_CR_FTHRES_Pos));
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	685b      	ldr	r3, [r3, #4]
 8009ba0:	3b01      	subs	r3, #1
 8009ba2:	021a      	lsls	r2, r3, #8
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	430a      	orrs	r2, r1
 8009baa:	601a      	str	r2, [r3, #0]

      /* Wait till busy flag is reset */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009bb0:	9300      	str	r3, [sp, #0]
 8009bb2:	68bb      	ldr	r3, [r7, #8]
 8009bb4:	2200      	movs	r2, #0
 8009bb6:	2120      	movs	r1, #32
 8009bb8:	6878      	ldr	r0, [r7, #4]
 8009bba:	f000 fea3 	bl	800a904 <OSPI_WaitFlagStateUntilTimeout>
 8009bbe:	4603      	mov	r3, r0
 8009bc0:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8009bc2:	7bfb      	ldrb	r3, [r7, #15]
 8009bc4:	2b00      	cmp	r3, #0
 8009bc6:	d146      	bne.n	8009c56 <HAL_OSPI_Init+0x16a>
      {
        /* Configure clock prescaler */
        MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_PRESCALER,
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	68db      	ldr	r3, [r3, #12]
 8009bce:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bd6:	1e5a      	subs	r2, r3, #1
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	430a      	orrs	r2, r1
 8009bde:	60da      	str	r2, [r3, #12]
                   ((hospi->Init.ClockPrescaler - 1U) << OCTOSPI_DCR2_PRESCALER_Pos));

        /* Configure Dual Quad mode */
        MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_DMM, hospi->Init.DualQuad);
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	f023 0140 	bic.w	r1, r3, #64	; 0x40
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	689a      	ldr	r2, [r3, #8]
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	430a      	orrs	r2, r1
 8009bf4:	601a      	str	r2, [r3, #0]

        /* Configure sample shifting and delay hold quarter cycle */
        MODIFY_REG(hospi->Instance->TCR, (OCTOSPI_TCR_SSHIFT | OCTOSPI_TCR_DHQC),
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8009bfe:	f023 41a0 	bic.w	r1, r3, #1342177280	; 0x50000000
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c0a:	431a      	orrs	r2, r3
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	430a      	orrs	r2, r1
 8009c12:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
                   (hospi->Init.SampleShifting | hospi->Init.DelayHoldQuarterCycle));

        /* Enable OctoSPI */
        __HAL_OSPI_ENABLE(hospi);
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	681a      	ldr	r2, [r3, #0]
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	f042 0201 	orr.w	r2, r2, #1
 8009c24:	601a      	str	r2, [r3, #0]

        /* Enable free running clock if needed : must be done after OSPI enable */
        if (hospi->Init.FreeRunningClock == HAL_OSPI_FREERUNCLK_ENABLE)
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	699b      	ldr	r3, [r3, #24]
 8009c2a:	2b02      	cmp	r3, #2
 8009c2c:	d107      	bne.n	8009c3e <HAL_OSPI_Init+0x152>
        {
          SET_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	689a      	ldr	r2, [r3, #8]
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	f042 0202 	orr.w	r2, r2, #2
 8009c3c:	609a      	str	r2, [r3, #8]
        }

        /* Initialize the OSPI state */
        if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	68db      	ldr	r3, [r3, #12]
 8009c42:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009c46:	d103      	bne.n	8009c50 <HAL_OSPI_Init+0x164>
        {
          hospi->State = HAL_OSPI_STATE_HYPERBUS_INIT;
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	2201      	movs	r2, #1
 8009c4c:	651a      	str	r2, [r3, #80]	; 0x50
 8009c4e:	e002      	b.n	8009c56 <HAL_OSPI_Init+0x16a>
        }
        else
        {
          hospi->State = HAL_OSPI_STATE_READY;
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	2202      	movs	r2, #2
 8009c54:	651a      	str	r2, [r3, #80]	; 0x50
      }
    }
  }

  /* Return function status */
  return status;
 8009c56:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c58:	4618      	mov	r0, r3
 8009c5a:	3710      	adds	r7, #16
 8009c5c:	46bd      	mov	sp, r7
 8009c5e:	bd80      	pop	{r7, pc}
 8009c60:	f8e0c0f4 	.word	0xf8e0c0f4

08009c64 <HAL_OSPI_Command>:
  * @param  cmd     : structure that contains the command configuration information
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Command(OSPI_HandleTypeDef *hospi, OSPI_RegularCmdTypeDef *cmd, uint32_t Timeout)
{
 8009c64:	b580      	push	{r7, lr}
 8009c66:	b08a      	sub	sp, #40	; 0x28
 8009c68:	af02      	add	r7, sp, #8
 8009c6a:	60f8      	str	r0, [r7, #12]
 8009c6c:	60b9      	str	r1, [r7, #8]
 8009c6e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t state;
  uint32_t tickstart = HAL_GetTick();
 8009c70:	f7fc fe66 	bl	8006940 <HAL_GetTick>
 8009c74:	61b8      	str	r0, [r7, #24]
    assert_param(IS_OSPI_ALT_BYTES_SIZE(cmd->AlternateBytesSize));
    assert_param(IS_OSPI_ALT_BYTES_DTR_MODE(cmd->AlternateBytesDtrMode));
  }

  assert_param(IS_OSPI_DATA_MODE(cmd->DataMode));
  if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 8009c76:	68bb      	ldr	r3, [r7, #8]
 8009c78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c7a:	2b00      	cmp	r3, #0

  assert_param(IS_OSPI_DQS_MODE(cmd->DQSMode));
  assert_param(IS_OSPI_SIOO_MODE(cmd->SIOOMode));

  /* Check the state of the driver */
  state = hospi->State;
 8009c7c:	68fb      	ldr	r3, [r7, #12]
 8009c7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009c80:	617b      	str	r3, [r7, #20]
  if (((state == HAL_OSPI_STATE_READY)         && (hospi->Init.MemoryType != HAL_OSPI_MEMTYPE_HYPERBUS)) ||
 8009c82:	697b      	ldr	r3, [r7, #20]
 8009c84:	2b02      	cmp	r3, #2
 8009c86:	d104      	bne.n	8009c92 <HAL_OSPI_Command+0x2e>
 8009c88:	68fb      	ldr	r3, [r7, #12]
 8009c8a:	68db      	ldr	r3, [r3, #12]
 8009c8c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009c90:	d115      	bne.n	8009cbe <HAL_OSPI_Command+0x5a>
 8009c92:	697b      	ldr	r3, [r7, #20]
 8009c94:	2b14      	cmp	r3, #20
 8009c96:	d107      	bne.n	8009ca8 <HAL_OSPI_Command+0x44>
      ((state == HAL_OSPI_STATE_READ_CMD_CFG)  && ((cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG)
 8009c98:	68bb      	ldr	r3, [r7, #8]
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	2b02      	cmp	r3, #2
 8009c9e:	d00e      	beq.n	8009cbe <HAL_OSPI_Command+0x5a>
                                                   || (cmd->OperationType == HAL_OSPI_OPTYPE_WRAP_CFG))) ||
 8009ca0:	68bb      	ldr	r3, [r7, #8]
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	2b03      	cmp	r3, #3
 8009ca6:	d00a      	beq.n	8009cbe <HAL_OSPI_Command+0x5a>
 8009ca8:	697b      	ldr	r3, [r7, #20]
 8009caa:	2b24      	cmp	r3, #36	; 0x24
 8009cac:	d15b      	bne.n	8009d66 <HAL_OSPI_Command+0x102>
      ((state == HAL_OSPI_STATE_WRITE_CMD_CFG) && ((cmd->OperationType == HAL_OSPI_OPTYPE_READ_CFG)  ||
 8009cae:	68bb      	ldr	r3, [r7, #8]
 8009cb0:	681b      	ldr	r3, [r3, #0]
 8009cb2:	2b01      	cmp	r3, #1
 8009cb4:	d003      	beq.n	8009cbe <HAL_OSPI_Command+0x5a>
                                                   (cmd->OperationType == HAL_OSPI_OPTYPE_WRAP_CFG))))
 8009cb6:	68bb      	ldr	r3, [r7, #8]
 8009cb8:	681b      	ldr	r3, [r3, #0]
      ((state == HAL_OSPI_STATE_WRITE_CMD_CFG) && ((cmd->OperationType == HAL_OSPI_OPTYPE_READ_CFG)  ||
 8009cba:	2b03      	cmp	r3, #3
 8009cbc:	d153      	bne.n	8009d66 <HAL_OSPI_Command+0x102>
  {
    /* Wait till busy flag is reset */
    status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	9300      	str	r3, [sp, #0]
 8009cc2:	69bb      	ldr	r3, [r7, #24]
 8009cc4:	2200      	movs	r2, #0
 8009cc6:	2120      	movs	r1, #32
 8009cc8:	68f8      	ldr	r0, [r7, #12]
 8009cca:	f000 fe1b 	bl	800a904 <OSPI_WaitFlagStateUntilTimeout>
 8009cce:	4603      	mov	r3, r0
 8009cd0:	77fb      	strb	r3, [r7, #31]

    if (status == HAL_OK)
 8009cd2:	7ffb      	ldrb	r3, [r7, #31]
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	d14c      	bne.n	8009d72 <HAL_OSPI_Command+0x10e>
    {
      /* Initialize error code */
      hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 8009cd8:	68fb      	ldr	r3, [r7, #12]
 8009cda:	2200      	movs	r2, #0
 8009cdc:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the registers */
      status = OSPI_ConfigCmd(hospi, cmd);
 8009cde:	68b9      	ldr	r1, [r7, #8]
 8009ce0:	68f8      	ldr	r0, [r7, #12]
 8009ce2:	f000 fe4f 	bl	800a984 <OSPI_ConfigCmd>
 8009ce6:	4603      	mov	r3, r0
 8009ce8:	77fb      	strb	r3, [r7, #31]

      if (status == HAL_OK)
 8009cea:	7ffb      	ldrb	r3, [r7, #31]
 8009cec:	2b00      	cmp	r3, #0
 8009cee:	d140      	bne.n	8009d72 <HAL_OSPI_Command+0x10e>
      {
        if (cmd->DataMode == HAL_OSPI_DATA_NONE)
 8009cf0:	68bb      	ldr	r3, [r7, #8]
 8009cf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	d10e      	bne.n	8009d16 <HAL_OSPI_Command+0xb2>
        {
          /* When there is no data phase, the transfer start as soon as the configuration is done
             so wait until TC flag is set to go back in idle state */
          status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, Timeout);
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	9300      	str	r3, [sp, #0]
 8009cfc:	69bb      	ldr	r3, [r7, #24]
 8009cfe:	2201      	movs	r2, #1
 8009d00:	2102      	movs	r1, #2
 8009d02:	68f8      	ldr	r0, [r7, #12]
 8009d04:	f000 fdfe 	bl	800a904 <OSPI_WaitFlagStateUntilTimeout>
 8009d08:	4603      	mov	r3, r0
 8009d0a:	77fb      	strb	r3, [r7, #31]

          __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 8009d0c:	68fb      	ldr	r3, [r7, #12]
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	2202      	movs	r2, #2
 8009d12:	625a      	str	r2, [r3, #36]	; 0x24
    if (status == HAL_OK)
 8009d14:	e02d      	b.n	8009d72 <HAL_OSPI_Command+0x10e>
        }
        else
        {
          /* Update the state */
          if (cmd->OperationType == HAL_OSPI_OPTYPE_COMMON_CFG)
 8009d16:	68bb      	ldr	r3, [r7, #8]
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	d103      	bne.n	8009d26 <HAL_OSPI_Command+0xc2>
          {
            hospi->State = HAL_OSPI_STATE_CMD_CFG;
 8009d1e:	68fb      	ldr	r3, [r7, #12]
 8009d20:	2204      	movs	r2, #4
 8009d22:	651a      	str	r2, [r3, #80]	; 0x50
    if (status == HAL_OK)
 8009d24:	e025      	b.n	8009d72 <HAL_OSPI_Command+0x10e>
          }
          else if (cmd->OperationType == HAL_OSPI_OPTYPE_READ_CFG)
 8009d26:	68bb      	ldr	r3, [r7, #8]
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	2b01      	cmp	r3, #1
 8009d2c:	d10b      	bne.n	8009d46 <HAL_OSPI_Command+0xe2>
          {
            if (hospi->State == HAL_OSPI_STATE_WRITE_CMD_CFG)
 8009d2e:	68fb      	ldr	r3, [r7, #12]
 8009d30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009d32:	2b24      	cmp	r3, #36	; 0x24
 8009d34:	d103      	bne.n	8009d3e <HAL_OSPI_Command+0xda>
            {
              hospi->State = HAL_OSPI_STATE_CMD_CFG;
 8009d36:	68fb      	ldr	r3, [r7, #12]
 8009d38:	2204      	movs	r2, #4
 8009d3a:	651a      	str	r2, [r3, #80]	; 0x50
    if (status == HAL_OK)
 8009d3c:	e019      	b.n	8009d72 <HAL_OSPI_Command+0x10e>
            }
            else
            {
              hospi->State = HAL_OSPI_STATE_READ_CMD_CFG;
 8009d3e:	68fb      	ldr	r3, [r7, #12]
 8009d40:	2214      	movs	r2, #20
 8009d42:	651a      	str	r2, [r3, #80]	; 0x50
    if (status == HAL_OK)
 8009d44:	e015      	b.n	8009d72 <HAL_OSPI_Command+0x10e>
            }
          }
          else if (cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG)
 8009d46:	68bb      	ldr	r3, [r7, #8]
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	2b02      	cmp	r3, #2
 8009d4c:	d111      	bne.n	8009d72 <HAL_OSPI_Command+0x10e>
          {
            if (hospi->State == HAL_OSPI_STATE_READ_CMD_CFG)
 8009d4e:	68fb      	ldr	r3, [r7, #12]
 8009d50:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009d52:	2b14      	cmp	r3, #20
 8009d54:	d103      	bne.n	8009d5e <HAL_OSPI_Command+0xfa>
            {
              hospi->State = HAL_OSPI_STATE_CMD_CFG;
 8009d56:	68fb      	ldr	r3, [r7, #12]
 8009d58:	2204      	movs	r2, #4
 8009d5a:	651a      	str	r2, [r3, #80]	; 0x50
    if (status == HAL_OK)
 8009d5c:	e009      	b.n	8009d72 <HAL_OSPI_Command+0x10e>
            }
            else
            {
              hospi->State = HAL_OSPI_STATE_WRITE_CMD_CFG;
 8009d5e:	68fb      	ldr	r3, [r7, #12]
 8009d60:	2224      	movs	r2, #36	; 0x24
 8009d62:	651a      	str	r2, [r3, #80]	; 0x50
    if (status == HAL_OK)
 8009d64:	e005      	b.n	8009d72 <HAL_OSPI_Command+0x10e>
      }
    }
  }
  else
  {
    status = HAL_ERROR;
 8009d66:	2301      	movs	r3, #1
 8009d68:	77fb      	strb	r3, [r7, #31]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8009d6a:	68fb      	ldr	r3, [r7, #12]
 8009d6c:	2210      	movs	r2, #16
 8009d6e:	655a      	str	r2, [r3, #84]	; 0x54
 8009d70:	e000      	b.n	8009d74 <HAL_OSPI_Command+0x110>
    if (status == HAL_OK)
 8009d72:	bf00      	nop
  }

  /* Return function status */
  return status;
 8009d74:	7ffb      	ldrb	r3, [r7, #31]
}
 8009d76:	4618      	mov	r0, r3
 8009d78:	3720      	adds	r7, #32
 8009d7a:	46bd      	mov	sp, r7
 8009d7c:	bd80      	pop	{r7, pc}

08009d7e <HAL_OSPI_MemoryMapped>:
  * @param  cfg   : structure that contains the memory mapped configuration information.
  * @note   This function is used only in Memory mapped Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_MemoryMapped(OSPI_HandleTypeDef *hospi, OSPI_MemoryMappedTypeDef *cfg)
{
 8009d7e:	b580      	push	{r7, lr}
 8009d80:	b086      	sub	sp, #24
 8009d82:	af02      	add	r7, sp, #8
 8009d84:	6078      	str	r0, [r7, #4]
 8009d86:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8009d88:	f7fc fdda 	bl	8006940 <HAL_GetTick>
 8009d8c:	60b8      	str	r0, [r7, #8]

  /* Check the parameters of the memory-mapped configuration structure */
  assert_param(IS_OSPI_TIMEOUT_ACTIVATION(cfg->TimeOutActivation));

  /* Check the state */
  if (hospi->State == HAL_OSPI_STATE_CMD_CFG)
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009d92:	2b04      	cmp	r3, #4
 8009d94:	d136      	bne.n	8009e04 <HAL_OSPI_MemoryMapped+0x86>
  {
    /* Wait till busy flag is reset */
    status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009d9a:	9300      	str	r3, [sp, #0]
 8009d9c:	68bb      	ldr	r3, [r7, #8]
 8009d9e:	2200      	movs	r2, #0
 8009da0:	2120      	movs	r1, #32
 8009da2:	6878      	ldr	r0, [r7, #4]
 8009da4:	f000 fdae 	bl	800a904 <OSPI_WaitFlagStateUntilTimeout>
 8009da8:	4603      	mov	r3, r0
 8009daa:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8009dac:	7bfb      	ldrb	r3, [r7, #15]
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	d12d      	bne.n	8009e0e <HAL_OSPI_MemoryMapped+0x90>
    {
      /* Update state */
      hospi->State = HAL_OSPI_STATE_BUSY_MEM_MAPPED;
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	2288      	movs	r2, #136	; 0x88
 8009db6:	651a      	str	r2, [r3, #80]	; 0x50

      if (cfg->TimeOutActivation == HAL_OSPI_TIMEOUT_COUNTER_ENABLE)
 8009db8:	683b      	ldr	r3, [r7, #0]
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	2b08      	cmp	r3, #8
 8009dbe:	d111      	bne.n	8009de4 <HAL_OSPI_MemoryMapped+0x66>
      {
        assert_param(IS_OSPI_TIMEOUT_PERIOD(cfg->TimeOutPeriod));

        /* Configure register */
        WRITE_REG(hospi->Instance->LPTR, cfg->TimeOutPeriod);
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	683a      	ldr	r2, [r7, #0]
 8009dc6:	6852      	ldr	r2, [r2, #4]
 8009dc8:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130

        /* Clear flags related to interrupt */
        __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TO);
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	2210      	movs	r2, #16
 8009dd2:	625a      	str	r2, [r3, #36]	; 0x24

        /* Enable the timeout interrupt */
        __HAL_OSPI_ENABLE_IT(hospi, HAL_OSPI_IT_TO);
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	681a      	ldr	r2, [r3, #0]
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8009de2:	601a      	str	r2, [r3, #0]
      }

      /* Configure CR register with functional mode as memory-mapped */
      MODIFY_REG(hospi->Instance->CR, (OCTOSPI_CR_TCEN | OCTOSPI_CR_FMODE),
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8009dee:	f023 0308 	bic.w	r3, r3, #8
 8009df2:	683a      	ldr	r2, [r7, #0]
 8009df4:	6812      	ldr	r2, [r2, #0]
 8009df6:	431a      	orrs	r2, r3
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 8009e00:	601a      	str	r2, [r3, #0]
 8009e02:	e004      	b.n	8009e0e <HAL_OSPI_MemoryMapped+0x90>
                 (cfg->TimeOutActivation | OSPI_FUNCTIONAL_MODE_MEMORY_MAPPED));
    }
  }
  else
  {
    status = HAL_ERROR;
 8009e04:	2301      	movs	r3, #1
 8009e06:	73fb      	strb	r3, [r7, #15]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	2210      	movs	r2, #16
 8009e0c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Return function status */
  return status;
 8009e0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e10:	4618      	mov	r0, r3
 8009e12:	3710      	adds	r7, #16
 8009e14:	46bd      	mov	sp, r7
 8009e16:	bd80      	pop	{r7, pc}

08009e18 <HAL_OSPI_Abort>:
  * @brief  Abort the current transmission.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Abort(OSPI_HandleTypeDef *hospi)
{
 8009e18:	b580      	push	{r7, lr}
 8009e1a:	b088      	sub	sp, #32
 8009e1c:	af02      	add	r7, sp, #8
 8009e1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009e20:	2300      	movs	r3, #0
 8009e22:	75fb      	strb	r3, [r7, #23]
  uint32_t state;
  uint32_t tickstart = HAL_GetTick();
 8009e24:	f7fc fd8c 	bl	8006940 <HAL_GetTick>
 8009e28:	6138      	str	r0, [r7, #16]

  /* Check if the state is in one of the busy or configured states */
  state = hospi->State;
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009e2e:	60fb      	str	r3, [r7, #12]
  if (((state & OSPI_BUSY_STATE_MASK) != 0U) || ((state & OSPI_CFG_STATE_MASK) != 0U))
 8009e30:	68fb      	ldr	r3, [r7, #12]
 8009e32:	f003 0308 	and.w	r3, r3, #8
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	d104      	bne.n	8009e44 <HAL_OSPI_Abort+0x2c>
 8009e3a:	68fb      	ldr	r3, [r7, #12]
 8009e3c:	f003 0304 	and.w	r3, r3, #4
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	d052      	beq.n	8009eea <HAL_OSPI_Abort+0xd2>
  {
    /* Check if the DMA is enabled */
    if ((hospi->Instance->CR & OCTOSPI_CR_DMAEN) != 0U)
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	f003 0304 	and.w	r3, r3, #4
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	d014      	beq.n	8009e7c <HAL_OSPI_Abort+0x64>
    {
      /* Disable the DMA transfer on the OctoSPI side */
      CLEAR_BIT(hospi->Instance->CR, OCTOSPI_CR_DMAEN);
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	681a      	ldr	r2, [r3, #0]
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	f022 0204 	bic.w	r2, r2, #4
 8009e60:	601a      	str	r2, [r3, #0]

      /* Disable the DMA transfer on the DMA side */
      status = HAL_DMA_Abort(hospi->hdma);
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009e66:	4618      	mov	r0, r3
 8009e68:	f7fd fb31 	bl	80074ce <HAL_DMA_Abort>
 8009e6c:	4603      	mov	r3, r0
 8009e6e:	75fb      	strb	r3, [r7, #23]
      if (status != HAL_OK)
 8009e70:	7dfb      	ldrb	r3, [r7, #23]
 8009e72:	2b00      	cmp	r3, #0
 8009e74:	d002      	beq.n	8009e7c <HAL_OSPI_Abort+0x64>
      {
        hospi->ErrorCode = HAL_OSPI_ERROR_DMA;
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	2204      	movs	r2, #4
 8009e7a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }

    if (__HAL_OSPI_GET_FLAG(hospi, HAL_OSPI_FLAG_BUSY) != RESET)
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	6a1b      	ldr	r3, [r3, #32]
 8009e82:	f003 0320 	and.w	r3, r3, #32
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	d02b      	beq.n	8009ee2 <HAL_OSPI_Abort+0xca>
    {
      /* Perform an abort of the OctoSPI */
      SET_BIT(hospi->Instance->CR, OCTOSPI_CR_ABORT);
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	681a      	ldr	r2, [r3, #0]
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	f042 0202 	orr.w	r2, r2, #2
 8009e98:	601a      	str	r2, [r3, #0]

      /* Wait until the transfer complete flag is set to go back in idle state */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, hospi->Timeout);
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009e9e:	9300      	str	r3, [sp, #0]
 8009ea0:	693b      	ldr	r3, [r7, #16]
 8009ea2:	2201      	movs	r2, #1
 8009ea4:	2102      	movs	r1, #2
 8009ea6:	6878      	ldr	r0, [r7, #4]
 8009ea8:	f000 fd2c 	bl	800a904 <OSPI_WaitFlagStateUntilTimeout>
 8009eac:	4603      	mov	r3, r0
 8009eae:	75fb      	strb	r3, [r7, #23]

      if (status == HAL_OK)
 8009eb0:	7dfb      	ldrb	r3, [r7, #23]
 8009eb2:	2b00      	cmp	r3, #0
 8009eb4:	d11f      	bne.n	8009ef6 <HAL_OSPI_Abort+0xde>
      {
        /* Clear transfer complete flag */
        __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	2202      	movs	r2, #2
 8009ebc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Wait until the busy flag is reset to go back in idle state */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009ec2:	9300      	str	r3, [sp, #0]
 8009ec4:	693b      	ldr	r3, [r7, #16]
 8009ec6:	2200      	movs	r2, #0
 8009ec8:	2120      	movs	r1, #32
 8009eca:	6878      	ldr	r0, [r7, #4]
 8009ecc:	f000 fd1a 	bl	800a904 <OSPI_WaitFlagStateUntilTimeout>
 8009ed0:	4603      	mov	r3, r0
 8009ed2:	75fb      	strb	r3, [r7, #23]

        if (status == HAL_OK)
 8009ed4:	7dfb      	ldrb	r3, [r7, #23]
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	d10d      	bne.n	8009ef6 <HAL_OSPI_Abort+0xde>
        {
          /* Update state */
          hospi->State = HAL_OSPI_STATE_READY;
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	2202      	movs	r2, #2
 8009ede:	651a      	str	r2, [r3, #80]	; 0x50
    if (__HAL_OSPI_GET_FLAG(hospi, HAL_OSPI_FLAG_BUSY) != RESET)
 8009ee0:	e009      	b.n	8009ef6 <HAL_OSPI_Abort+0xde>
      }
    }
    else
    {
      /* Update state */
      hospi->State = HAL_OSPI_STATE_READY;
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	2202      	movs	r2, #2
 8009ee6:	651a      	str	r2, [r3, #80]	; 0x50
    if (__HAL_OSPI_GET_FLAG(hospi, HAL_OSPI_FLAG_BUSY) != RESET)
 8009ee8:	e005      	b.n	8009ef6 <HAL_OSPI_Abort+0xde>
    }
  }
  else
  {
    status = HAL_ERROR;
 8009eea:	2301      	movs	r3, #1
 8009eec:	75fb      	strb	r3, [r7, #23]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	2210      	movs	r2, #16
 8009ef2:	655a      	str	r2, [r3, #84]	; 0x54
 8009ef4:	e000      	b.n	8009ef8 <HAL_OSPI_Abort+0xe0>
    if (__HAL_OSPI_GET_FLAG(hospi, HAL_OSPI_FLAG_BUSY) != RESET)
 8009ef6:	bf00      	nop
  }

  /* Return function status */
  return status;
 8009ef8:	7dfb      	ldrb	r3, [r7, #23]
}
 8009efa:	4618      	mov	r0, r3
 8009efc:	3718      	adds	r7, #24
 8009efe:	46bd      	mov	sp, r7
 8009f00:	bd80      	pop	{r7, pc}

08009f02 <HAL_OSPI_SetTimeout>:
  * @param  hospi   : OSPI handle.
  * @param  Timeout : Timeout for the memory access.
  * @retval None
  */
HAL_StatusTypeDef HAL_OSPI_SetTimeout(OSPI_HandleTypeDef *hospi, uint32_t Timeout)
{
 8009f02:	b480      	push	{r7}
 8009f04:	b083      	sub	sp, #12
 8009f06:	af00      	add	r7, sp, #0
 8009f08:	6078      	str	r0, [r7, #4]
 8009f0a:	6039      	str	r1, [r7, #0]
  hospi->Timeout = Timeout;
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	683a      	ldr	r2, [r7, #0]
 8009f10:	659a      	str	r2, [r3, #88]	; 0x58
  return HAL_OK;
 8009f12:	2300      	movs	r3, #0
}
 8009f14:	4618      	mov	r0, r3
 8009f16:	370c      	adds	r7, #12
 8009f18:	46bd      	mov	sp, r7
 8009f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f1e:	4770      	bx	lr

08009f20 <HAL_OSPIM_Config>:
  * @param  cfg     : Configuration of the IO Manager for the instance
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPIM_Config(OSPI_HandleTypeDef *hospi, OSPIM_CfgTypeDef *cfg, uint32_t Timeout)
{
 8009f20:	b580      	push	{r7, lr}
 8009f22:	b094      	sub	sp, #80	; 0x50
 8009f24:	af00      	add	r7, sp, #0
 8009f26:	60f8      	str	r0, [r7, #12]
 8009f28:	60b9      	str	r1, [r7, #8]
 8009f2a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009f2c:	2300      	movs	r3, #0
 8009f2e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  uint32_t instance;
  uint8_t index;
  uint8_t ospi_enabled = 0U;
 8009f32:	2300      	movs	r3, #0
 8009f34:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
  assert_param(IS_OSPIM_DQS_PORT(cfg->DQSPort));
  assert_param(IS_OSPIM_PORT(cfg->NCSPort));
  assert_param(IS_OSPIM_IO_PORT(cfg->IOLowPort));
  assert_param(IS_OSPIM_IO_PORT(cfg->IOHighPort));

  if (hospi->Instance == (OCTOSPI_TypeDef *)OCTOSPI1)
 8009f38:	68fb      	ldr	r3, [r7, #12]
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	4a9d      	ldr	r2, [pc, #628]	; (800a1b4 <HAL_OSPIM_Config+0x294>)
 8009f3e:	4293      	cmp	r3, r2
 8009f40:	d105      	bne.n	8009f4e <HAL_OSPIM_Config+0x2e>
  {
    instance = 0U;
 8009f42:	2300      	movs	r3, #0
 8009f44:	64bb      	str	r3, [r7, #72]	; 0x48
    other_instance = 1U;
 8009f46:	2301      	movs	r3, #1
 8009f48:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 8009f4c:	e004      	b.n	8009f58 <HAL_OSPIM_Config+0x38>
  }
  else
  {
    instance = 1U;
 8009f4e:	2301      	movs	r3, #1
 8009f50:	64bb      	str	r3, [r7, #72]	; 0x48
    other_instance = 0U;
 8009f52:	2300      	movs	r3, #0
 8009f54:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  }

  /**************** Get current configuration of the instances ****************/
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 8009f58:	2300      	movs	r3, #0
 8009f5a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8009f5e:	e01d      	b.n	8009f9c <HAL_OSPIM_Config+0x7c>
  {
    if (OSPIM_GetConfig(index + 1U, &(IOM_cfg[index])) != HAL_OK)
 8009f60:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8009f64:	3301      	adds	r3, #1
 8009f66:	b2d8      	uxtb	r0, r3
 8009f68:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 8009f6c:	f107 0114 	add.w	r1, r7, #20
 8009f70:	4613      	mov	r3, r2
 8009f72:	005b      	lsls	r3, r3, #1
 8009f74:	4413      	add	r3, r2
 8009f76:	00db      	lsls	r3, r3, #3
 8009f78:	440b      	add	r3, r1
 8009f7a:	4619      	mov	r1, r3
 8009f7c:	f000 fe7c 	bl	800ac78 <OSPIM_GetConfig>
 8009f80:	4603      	mov	r3, r0
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	d005      	beq.n	8009f92 <HAL_OSPIM_Config+0x72>
    {
      status = HAL_ERROR;
 8009f86:	2301      	movs	r3, #1
 8009f88:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 8009f8c:	68fb      	ldr	r3, [r7, #12]
 8009f8e:	2208      	movs	r2, #8
 8009f90:	655a      	str	r2, [r3, #84]	; 0x54
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 8009f92:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8009f96:	3301      	adds	r3, #1
 8009f98:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8009f9c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8009fa0:	2b01      	cmp	r3, #1
 8009fa2:	d9dd      	bls.n	8009f60 <HAL_OSPIM_Config+0x40>
    }
  }

  if (status == HAL_OK)
 8009fa4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	f040 849e 	bne.w	800a8ea <HAL_OSPIM_Config+0x9ca>
  {
    /********** Disable both OctoSPI to configure OctoSPI IO Manager **********/
    if ((OCTOSPI1->CR & OCTOSPI_CR_EN) != 0U)
 8009fae:	4b81      	ldr	r3, [pc, #516]	; (800a1b4 <HAL_OSPIM_Config+0x294>)
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	f003 0301 	and.w	r3, r3, #1
 8009fb6:	2b00      	cmp	r3, #0
 8009fb8:	d00b      	beq.n	8009fd2 <HAL_OSPIM_Config+0xb2>
    {
      CLEAR_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 8009fba:	4b7e      	ldr	r3, [pc, #504]	; (800a1b4 <HAL_OSPIM_Config+0x294>)
 8009fbc:	681b      	ldr	r3, [r3, #0]
 8009fbe:	4a7d      	ldr	r2, [pc, #500]	; (800a1b4 <HAL_OSPIM_Config+0x294>)
 8009fc0:	f023 0301 	bic.w	r3, r3, #1
 8009fc4:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x1U;
 8009fc6:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8009fca:	f043 0301 	orr.w	r3, r3, #1
 8009fce:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    }
    if ((OCTOSPI2->CR & OCTOSPI_CR_EN) != 0U)
 8009fd2:	4b79      	ldr	r3, [pc, #484]	; (800a1b8 <HAL_OSPIM_Config+0x298>)
 8009fd4:	681b      	ldr	r3, [r3, #0]
 8009fd6:	f003 0301 	and.w	r3, r3, #1
 8009fda:	2b00      	cmp	r3, #0
 8009fdc:	d00b      	beq.n	8009ff6 <HAL_OSPIM_Config+0xd6>
    {
      CLEAR_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 8009fde:	4b76      	ldr	r3, [pc, #472]	; (800a1b8 <HAL_OSPIM_Config+0x298>)
 8009fe0:	681b      	ldr	r3, [r3, #0]
 8009fe2:	4a75      	ldr	r2, [pc, #468]	; (800a1b8 <HAL_OSPIM_Config+0x298>)
 8009fe4:	f023 0301 	bic.w	r3, r3, #1
 8009fe8:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x2U;
 8009fea:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8009fee:	f043 0302 	orr.w	r3, r3, #2
 8009ff2:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    }

    /***************** Deactivation of previous configuration *****************/
    CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].NCSPort - 1U)], OCTOSPIM_PCR_NCSEN);
 8009ff6:	4971      	ldr	r1, [pc, #452]	; (800a1bc <HAL_OSPIM_Config+0x29c>)
 8009ff8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009ffa:	4613      	mov	r3, r2
 8009ffc:	005b      	lsls	r3, r3, #1
 8009ffe:	4413      	add	r3, r2
 800a000:	00db      	lsls	r3, r3, #3
 800a002:	3350      	adds	r3, #80	; 0x50
 800a004:	443b      	add	r3, r7
 800a006:	3b34      	subs	r3, #52	; 0x34
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	3b01      	subs	r3, #1
 800a00c:	009b      	lsls	r3, r3, #2
 800a00e:	440b      	add	r3, r1
 800a010:	6859      	ldr	r1, [r3, #4]
 800a012:	486a      	ldr	r0, [pc, #424]	; (800a1bc <HAL_OSPIM_Config+0x29c>)
 800a014:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a016:	4613      	mov	r3, r2
 800a018:	005b      	lsls	r3, r3, #1
 800a01a:	4413      	add	r3, r2
 800a01c:	00db      	lsls	r3, r3, #3
 800a01e:	3350      	adds	r3, #80	; 0x50
 800a020:	443b      	add	r3, r7
 800a022:	3b34      	subs	r3, #52	; 0x34
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	3b01      	subs	r3, #1
 800a028:	f421 7280 	bic.w	r2, r1, #256	; 0x100
 800a02c:	009b      	lsls	r3, r3, #2
 800a02e:	4403      	add	r3, r0
 800a030:	605a      	str	r2, [r3, #4]
    if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) != 0U)
 800a032:	4b62      	ldr	r3, [pc, #392]	; (800a1bc <HAL_OSPIM_Config+0x29c>)
 800a034:	681b      	ldr	r3, [r3, #0]
 800a036:	f003 0301 	and.w	r3, r3, #1
 800a03a:	2b00      	cmp	r3, #0
 800a03c:	f000 80c0 	beq.w	800a1c0 <HAL_OSPIM_Config+0x2a0>
    {
      /* De-multiplexing should be performed */
      CLEAR_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
 800a040:	4b5e      	ldr	r3, [pc, #376]	; (800a1bc <HAL_OSPIM_Config+0x29c>)
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	4a5d      	ldr	r2, [pc, #372]	; (800a1bc <HAL_OSPIM_Config+0x29c>)
 800a046:	f023 0301 	bic.w	r3, r3, #1
 800a04a:	6013      	str	r3, [r2, #0]

      if (other_instance == 1U)
 800a04c:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 800a050:	2b01      	cmp	r3, #1
 800a052:	f040 8162 	bne.w	800a31a <HAL_OSPIM_Config+0x3fa>
      {
        SET_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKSRC);
 800a056:	4959      	ldr	r1, [pc, #356]	; (800a1bc <HAL_OSPIM_Config+0x29c>)
 800a058:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800a05c:	4613      	mov	r3, r2
 800a05e:	005b      	lsls	r3, r3, #1
 800a060:	4413      	add	r3, r2
 800a062:	00db      	lsls	r3, r3, #3
 800a064:	3350      	adds	r3, #80	; 0x50
 800a066:	443b      	add	r3, r7
 800a068:	3b3c      	subs	r3, #60	; 0x3c
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	3b01      	subs	r3, #1
 800a06e:	009b      	lsls	r3, r3, #2
 800a070:	440b      	add	r3, r1
 800a072:	6859      	ldr	r1, [r3, #4]
 800a074:	4851      	ldr	r0, [pc, #324]	; (800a1bc <HAL_OSPIM_Config+0x29c>)
 800a076:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800a07a:	4613      	mov	r3, r2
 800a07c:	005b      	lsls	r3, r3, #1
 800a07e:	4413      	add	r3, r2
 800a080:	00db      	lsls	r3, r3, #3
 800a082:	3350      	adds	r3, #80	; 0x50
 800a084:	443b      	add	r3, r7
 800a086:	3b3c      	subs	r3, #60	; 0x3c
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	3b01      	subs	r3, #1
 800a08c:	f041 0202 	orr.w	r2, r1, #2
 800a090:	009b      	lsls	r3, r3, #2
 800a092:	4403      	add	r3, r0
 800a094:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 800a096:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800a09a:	4613      	mov	r3, r2
 800a09c:	005b      	lsls	r3, r3, #1
 800a09e:	4413      	add	r3, r2
 800a0a0:	00db      	lsls	r3, r3, #3
 800a0a2:	3350      	adds	r3, #80	; 0x50
 800a0a4:	443b      	add	r3, r7
 800a0a6:	3b38      	subs	r3, #56	; 0x38
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	d01f      	beq.n	800a0ee <HAL_OSPIM_Config+0x1ce>
        {
          SET_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSSRC);
 800a0ae:	4943      	ldr	r1, [pc, #268]	; (800a1bc <HAL_OSPIM_Config+0x29c>)
 800a0b0:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800a0b4:	4613      	mov	r3, r2
 800a0b6:	005b      	lsls	r3, r3, #1
 800a0b8:	4413      	add	r3, r2
 800a0ba:	00db      	lsls	r3, r3, #3
 800a0bc:	3350      	adds	r3, #80	; 0x50
 800a0be:	443b      	add	r3, r7
 800a0c0:	3b38      	subs	r3, #56	; 0x38
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	3b01      	subs	r3, #1
 800a0c6:	009b      	lsls	r3, r3, #2
 800a0c8:	440b      	add	r3, r1
 800a0ca:	6859      	ldr	r1, [r3, #4]
 800a0cc:	483b      	ldr	r0, [pc, #236]	; (800a1bc <HAL_OSPIM_Config+0x29c>)
 800a0ce:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800a0d2:	4613      	mov	r3, r2
 800a0d4:	005b      	lsls	r3, r3, #1
 800a0d6:	4413      	add	r3, r2
 800a0d8:	00db      	lsls	r3, r3, #3
 800a0da:	3350      	adds	r3, #80	; 0x50
 800a0dc:	443b      	add	r3, r7
 800a0de:	3b38      	subs	r3, #56	; 0x38
 800a0e0:	681b      	ldr	r3, [r3, #0]
 800a0e2:	3b01      	subs	r3, #1
 800a0e4:	f041 0220 	orr.w	r2, r1, #32
 800a0e8:	009b      	lsls	r3, r3, #2
 800a0ea:	4403      	add	r3, r0
 800a0ec:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 800a0ee:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800a0f2:	4613      	mov	r3, r2
 800a0f4:	005b      	lsls	r3, r3, #1
 800a0f6:	4413      	add	r3, r2
 800a0f8:	00db      	lsls	r3, r3, #3
 800a0fa:	3350      	adds	r3, #80	; 0x50
 800a0fc:	443b      	add	r3, r7
 800a0fe:	3b30      	subs	r3, #48	; 0x30
 800a100:	681b      	ldr	r3, [r3, #0]
 800a102:	2b00      	cmp	r3, #0
 800a104:	d023      	beq.n	800a14e <HAL_OSPIM_Config+0x22e>
        {
          SET_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 800a106:	492d      	ldr	r1, [pc, #180]	; (800a1bc <HAL_OSPIM_Config+0x29c>)
 800a108:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800a10c:	4613      	mov	r3, r2
 800a10e:	005b      	lsls	r3, r3, #1
 800a110:	4413      	add	r3, r2
 800a112:	00db      	lsls	r3, r3, #3
 800a114:	3350      	adds	r3, #80	; 0x50
 800a116:	443b      	add	r3, r7
 800a118:	3b30      	subs	r3, #48	; 0x30
 800a11a:	681b      	ldr	r3, [r3, #0]
 800a11c:	3b01      	subs	r3, #1
 800a11e:	f003 0301 	and.w	r3, r3, #1
 800a122:	009b      	lsls	r3, r3, #2
 800a124:	440b      	add	r3, r1
 800a126:	6859      	ldr	r1, [r3, #4]
 800a128:	4824      	ldr	r0, [pc, #144]	; (800a1bc <HAL_OSPIM_Config+0x29c>)
 800a12a:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800a12e:	4613      	mov	r3, r2
 800a130:	005b      	lsls	r3, r3, #1
 800a132:	4413      	add	r3, r2
 800a134:	00db      	lsls	r3, r3, #3
 800a136:	3350      	adds	r3, #80	; 0x50
 800a138:	443b      	add	r3, r7
 800a13a:	3b30      	subs	r3, #48	; 0x30
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	3b01      	subs	r3, #1
 800a140:	f003 0301 	and.w	r3, r3, #1
 800a144:	f441 2280 	orr.w	r2, r1, #262144	; 0x40000
 800a148:	009b      	lsls	r3, r3, #2
 800a14a:	4403      	add	r3, r0
 800a14c:	605a      	str	r2, [r3, #4]
                  OCTOSPIM_PCR_IOLSRC_1);
        }
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 800a14e:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800a152:	4613      	mov	r3, r2
 800a154:	005b      	lsls	r3, r3, #1
 800a156:	4413      	add	r3, r2
 800a158:	00db      	lsls	r3, r3, #3
 800a15a:	3350      	adds	r3, #80	; 0x50
 800a15c:	443b      	add	r3, r7
 800a15e:	3b2c      	subs	r3, #44	; 0x2c
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	2b00      	cmp	r3, #0
 800a164:	f000 80d9 	beq.w	800a31a <HAL_OSPIM_Config+0x3fa>
        {
          SET_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 800a168:	4914      	ldr	r1, [pc, #80]	; (800a1bc <HAL_OSPIM_Config+0x29c>)
 800a16a:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800a16e:	4613      	mov	r3, r2
 800a170:	005b      	lsls	r3, r3, #1
 800a172:	4413      	add	r3, r2
 800a174:	00db      	lsls	r3, r3, #3
 800a176:	3350      	adds	r3, #80	; 0x50
 800a178:	443b      	add	r3, r7
 800a17a:	3b2c      	subs	r3, #44	; 0x2c
 800a17c:	681b      	ldr	r3, [r3, #0]
 800a17e:	3b01      	subs	r3, #1
 800a180:	f003 0301 	and.w	r3, r3, #1
 800a184:	009b      	lsls	r3, r3, #2
 800a186:	440b      	add	r3, r1
 800a188:	6859      	ldr	r1, [r3, #4]
 800a18a:	480c      	ldr	r0, [pc, #48]	; (800a1bc <HAL_OSPIM_Config+0x29c>)
 800a18c:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800a190:	4613      	mov	r3, r2
 800a192:	005b      	lsls	r3, r3, #1
 800a194:	4413      	add	r3, r2
 800a196:	00db      	lsls	r3, r3, #3
 800a198:	3350      	adds	r3, #80	; 0x50
 800a19a:	443b      	add	r3, r7
 800a19c:	3b2c      	subs	r3, #44	; 0x2c
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	3b01      	subs	r3, #1
 800a1a2:	f003 0301 	and.w	r3, r3, #1
 800a1a6:	f041 6280 	orr.w	r2, r1, #67108864	; 0x4000000
 800a1aa:	009b      	lsls	r3, r3, #2
 800a1ac:	4403      	add	r3, r0
 800a1ae:	605a      	str	r2, [r3, #4]
 800a1b0:	e0b3      	b.n	800a31a <HAL_OSPIM_Config+0x3fa>
 800a1b2:	bf00      	nop
 800a1b4:	420d1400 	.word	0x420d1400
 800a1b8:	420d2400 	.word	0x420d2400
 800a1bc:	420c4000 	.word	0x420c4000
        }
      }
    }
    else
    {
      if (IOM_cfg[instance].ClkPort != 0U)
 800a1c0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a1c2:	4613      	mov	r3, r2
 800a1c4:	005b      	lsls	r3, r3, #1
 800a1c6:	4413      	add	r3, r2
 800a1c8:	00db      	lsls	r3, r3, #3
 800a1ca:	3350      	adds	r3, #80	; 0x50
 800a1cc:	443b      	add	r3, r7
 800a1ce:	3b3c      	subs	r3, #60	; 0x3c
 800a1d0:	681b      	ldr	r3, [r3, #0]
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	f000 80a1 	beq.w	800a31a <HAL_OSPIM_Config+0x3fa>
      {
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKEN);
 800a1d8:	4993      	ldr	r1, [pc, #588]	; (800a428 <HAL_OSPIM_Config+0x508>)
 800a1da:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a1dc:	4613      	mov	r3, r2
 800a1de:	005b      	lsls	r3, r3, #1
 800a1e0:	4413      	add	r3, r2
 800a1e2:	00db      	lsls	r3, r3, #3
 800a1e4:	3350      	adds	r3, #80	; 0x50
 800a1e6:	443b      	add	r3, r7
 800a1e8:	3b3c      	subs	r3, #60	; 0x3c
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	3b01      	subs	r3, #1
 800a1ee:	009b      	lsls	r3, r3, #2
 800a1f0:	440b      	add	r3, r1
 800a1f2:	6859      	ldr	r1, [r3, #4]
 800a1f4:	488c      	ldr	r0, [pc, #560]	; (800a428 <HAL_OSPIM_Config+0x508>)
 800a1f6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a1f8:	4613      	mov	r3, r2
 800a1fa:	005b      	lsls	r3, r3, #1
 800a1fc:	4413      	add	r3, r2
 800a1fe:	00db      	lsls	r3, r3, #3
 800a200:	3350      	adds	r3, #80	; 0x50
 800a202:	443b      	add	r3, r7
 800a204:	3b3c      	subs	r3, #60	; 0x3c
 800a206:	681b      	ldr	r3, [r3, #0]
 800a208:	3b01      	subs	r3, #1
 800a20a:	f021 0201 	bic.w	r2, r1, #1
 800a20e:	009b      	lsls	r3, r3, #2
 800a210:	4403      	add	r3, r0
 800a212:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[instance].DQSPort != 0U)
 800a214:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a216:	4613      	mov	r3, r2
 800a218:	005b      	lsls	r3, r3, #1
 800a21a:	4413      	add	r3, r2
 800a21c:	00db      	lsls	r3, r3, #3
 800a21e:	3350      	adds	r3, #80	; 0x50
 800a220:	443b      	add	r3, r7
 800a222:	3b38      	subs	r3, #56	; 0x38
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	2b00      	cmp	r3, #0
 800a228:	d01d      	beq.n	800a266 <HAL_OSPIM_Config+0x346>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSEN);
 800a22a:	497f      	ldr	r1, [pc, #508]	; (800a428 <HAL_OSPIM_Config+0x508>)
 800a22c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a22e:	4613      	mov	r3, r2
 800a230:	005b      	lsls	r3, r3, #1
 800a232:	4413      	add	r3, r2
 800a234:	00db      	lsls	r3, r3, #3
 800a236:	3350      	adds	r3, #80	; 0x50
 800a238:	443b      	add	r3, r7
 800a23a:	3b38      	subs	r3, #56	; 0x38
 800a23c:	681b      	ldr	r3, [r3, #0]
 800a23e:	3b01      	subs	r3, #1
 800a240:	009b      	lsls	r3, r3, #2
 800a242:	440b      	add	r3, r1
 800a244:	6859      	ldr	r1, [r3, #4]
 800a246:	4878      	ldr	r0, [pc, #480]	; (800a428 <HAL_OSPIM_Config+0x508>)
 800a248:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a24a:	4613      	mov	r3, r2
 800a24c:	005b      	lsls	r3, r3, #1
 800a24e:	4413      	add	r3, r2
 800a250:	00db      	lsls	r3, r3, #3
 800a252:	3350      	adds	r3, #80	; 0x50
 800a254:	443b      	add	r3, r7
 800a256:	3b38      	subs	r3, #56	; 0x38
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	3b01      	subs	r3, #1
 800a25c:	f021 0210 	bic.w	r2, r1, #16
 800a260:	009b      	lsls	r3, r3, #2
 800a262:	4403      	add	r3, r0
 800a264:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 800a266:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a268:	4613      	mov	r3, r2
 800a26a:	005b      	lsls	r3, r3, #1
 800a26c:	4413      	add	r3, r2
 800a26e:	00db      	lsls	r3, r3, #3
 800a270:	3350      	adds	r3, #80	; 0x50
 800a272:	443b      	add	r3, r7
 800a274:	3b30      	subs	r3, #48	; 0x30
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	2b00      	cmp	r3, #0
 800a27a:	d021      	beq.n	800a2c0 <HAL_OSPIM_Config+0x3a0>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOLEN);
 800a27c:	496a      	ldr	r1, [pc, #424]	; (800a428 <HAL_OSPIM_Config+0x508>)
 800a27e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a280:	4613      	mov	r3, r2
 800a282:	005b      	lsls	r3, r3, #1
 800a284:	4413      	add	r3, r2
 800a286:	00db      	lsls	r3, r3, #3
 800a288:	3350      	adds	r3, #80	; 0x50
 800a28a:	443b      	add	r3, r7
 800a28c:	3b30      	subs	r3, #48	; 0x30
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	3b01      	subs	r3, #1
 800a292:	f003 0301 	and.w	r3, r3, #1
 800a296:	009b      	lsls	r3, r3, #2
 800a298:	440b      	add	r3, r1
 800a29a:	6859      	ldr	r1, [r3, #4]
 800a29c:	4862      	ldr	r0, [pc, #392]	; (800a428 <HAL_OSPIM_Config+0x508>)
 800a29e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a2a0:	4613      	mov	r3, r2
 800a2a2:	005b      	lsls	r3, r3, #1
 800a2a4:	4413      	add	r3, r2
 800a2a6:	00db      	lsls	r3, r3, #3
 800a2a8:	3350      	adds	r3, #80	; 0x50
 800a2aa:	443b      	add	r3, r7
 800a2ac:	3b30      	subs	r3, #48	; 0x30
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	3b01      	subs	r3, #1
 800a2b2:	f003 0301 	and.w	r3, r3, #1
 800a2b6:	f421 3280 	bic.w	r2, r1, #65536	; 0x10000
 800a2ba:	009b      	lsls	r3, r3, #2
 800a2bc:	4403      	add	r3, r0
 800a2be:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 800a2c0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a2c2:	4613      	mov	r3, r2
 800a2c4:	005b      	lsls	r3, r3, #1
 800a2c6:	4413      	add	r3, r2
 800a2c8:	00db      	lsls	r3, r3, #3
 800a2ca:	3350      	adds	r3, #80	; 0x50
 800a2cc:	443b      	add	r3, r7
 800a2ce:	3b2c      	subs	r3, #44	; 0x2c
 800a2d0:	681b      	ldr	r3, [r3, #0]
 800a2d2:	2b00      	cmp	r3, #0
 800a2d4:	d021      	beq.n	800a31a <HAL_OSPIM_Config+0x3fa>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOHEN);
 800a2d6:	4954      	ldr	r1, [pc, #336]	; (800a428 <HAL_OSPIM_Config+0x508>)
 800a2d8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a2da:	4613      	mov	r3, r2
 800a2dc:	005b      	lsls	r3, r3, #1
 800a2de:	4413      	add	r3, r2
 800a2e0:	00db      	lsls	r3, r3, #3
 800a2e2:	3350      	adds	r3, #80	; 0x50
 800a2e4:	443b      	add	r3, r7
 800a2e6:	3b2c      	subs	r3, #44	; 0x2c
 800a2e8:	681b      	ldr	r3, [r3, #0]
 800a2ea:	3b01      	subs	r3, #1
 800a2ec:	f003 0301 	and.w	r3, r3, #1
 800a2f0:	009b      	lsls	r3, r3, #2
 800a2f2:	440b      	add	r3, r1
 800a2f4:	6859      	ldr	r1, [r3, #4]
 800a2f6:	484c      	ldr	r0, [pc, #304]	; (800a428 <HAL_OSPIM_Config+0x508>)
 800a2f8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a2fa:	4613      	mov	r3, r2
 800a2fc:	005b      	lsls	r3, r3, #1
 800a2fe:	4413      	add	r3, r2
 800a300:	00db      	lsls	r3, r3, #3
 800a302:	3350      	adds	r3, #80	; 0x50
 800a304:	443b      	add	r3, r7
 800a306:	3b2c      	subs	r3, #44	; 0x2c
 800a308:	681b      	ldr	r3, [r3, #0]
 800a30a:	3b01      	subs	r3, #1
 800a30c:	f003 0301 	and.w	r3, r3, #1
 800a310:	f021 7280 	bic.w	r2, r1, #16777216	; 0x1000000
 800a314:	009b      	lsls	r3, r3, #2
 800a316:	4403      	add	r3, r0
 800a318:	605a      	str	r2, [r3, #4]
        }
      }
    }

    /********************* Deactivation of other instance *********************/
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 800a31a:	68bb      	ldr	r3, [r7, #8]
 800a31c:	6819      	ldr	r1, [r3, #0]
 800a31e:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800a322:	4613      	mov	r3, r2
 800a324:	005b      	lsls	r3, r3, #1
 800a326:	4413      	add	r3, r2
 800a328:	00db      	lsls	r3, r3, #3
 800a32a:	3350      	adds	r3, #80	; 0x50
 800a32c:	443b      	add	r3, r7
 800a32e:	3b3c      	subs	r3, #60	; 0x3c
 800a330:	681b      	ldr	r3, [r3, #0]
 800a332:	4299      	cmp	r1, r3
 800a334:	d038      	beq.n	800a3a8 <HAL_OSPIM_Config+0x488>
 800a336:	68bb      	ldr	r3, [r7, #8]
 800a338:	6859      	ldr	r1, [r3, #4]
 800a33a:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800a33e:	4613      	mov	r3, r2
 800a340:	005b      	lsls	r3, r3, #1
 800a342:	4413      	add	r3, r2
 800a344:	00db      	lsls	r3, r3, #3
 800a346:	3350      	adds	r3, #80	; 0x50
 800a348:	443b      	add	r3, r7
 800a34a:	3b38      	subs	r3, #56	; 0x38
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	4299      	cmp	r1, r3
 800a350:	d02a      	beq.n	800a3a8 <HAL_OSPIM_Config+0x488>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 800a352:	68bb      	ldr	r3, [r7, #8]
 800a354:	6899      	ldr	r1, [r3, #8]
 800a356:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800a35a:	4613      	mov	r3, r2
 800a35c:	005b      	lsls	r3, r3, #1
 800a35e:	4413      	add	r3, r2
 800a360:	00db      	lsls	r3, r3, #3
 800a362:	3350      	adds	r3, #80	; 0x50
 800a364:	443b      	add	r3, r7
 800a366:	3b34      	subs	r3, #52	; 0x34
 800a368:	681b      	ldr	r3, [r3, #0]
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 800a36a:	4299      	cmp	r1, r3
 800a36c:	d01c      	beq.n	800a3a8 <HAL_OSPIM_Config+0x488>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 800a36e:	68bb      	ldr	r3, [r7, #8]
 800a370:	68d9      	ldr	r1, [r3, #12]
 800a372:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800a376:	4613      	mov	r3, r2
 800a378:	005b      	lsls	r3, r3, #1
 800a37a:	4413      	add	r3, r2
 800a37c:	00db      	lsls	r3, r3, #3
 800a37e:	3350      	adds	r3, #80	; 0x50
 800a380:	443b      	add	r3, r7
 800a382:	3b30      	subs	r3, #48	; 0x30
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	4299      	cmp	r1, r3
 800a388:	d00e      	beq.n	800a3a8 <HAL_OSPIM_Config+0x488>
        (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
 800a38a:	68bb      	ldr	r3, [r7, #8]
 800a38c:	6919      	ldr	r1, [r3, #16]
 800a38e:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800a392:	4613      	mov	r3, r2
 800a394:	005b      	lsls	r3, r3, #1
 800a396:	4413      	add	r3, r2
 800a398:	00db      	lsls	r3, r3, #3
 800a39a:	3350      	adds	r3, #80	; 0x50
 800a39c:	443b      	add	r3, r7
 800a39e:	3b2c      	subs	r3, #44	; 0x2c
 800a3a0:	681b      	ldr	r3, [r3, #0]
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 800a3a2:	4299      	cmp	r1, r3
 800a3a4:	f040 810e 	bne.w	800a5c4 <HAL_OSPIM_Config+0x6a4>
    {
      if ((cfg->ClkPort   == IOM_cfg[other_instance].ClkPort)   &&
 800a3a8:	68bb      	ldr	r3, [r7, #8]
 800a3aa:	6819      	ldr	r1, [r3, #0]
 800a3ac:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800a3b0:	4613      	mov	r3, r2
 800a3b2:	005b      	lsls	r3, r3, #1
 800a3b4:	4413      	add	r3, r2
 800a3b6:	00db      	lsls	r3, r3, #3
 800a3b8:	3350      	adds	r3, #80	; 0x50
 800a3ba:	443b      	add	r3, r7
 800a3bc:	3b3c      	subs	r3, #60	; 0x3c
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	4299      	cmp	r1, r3
 800a3c2:	d133      	bne.n	800a42c <HAL_OSPIM_Config+0x50c>
          (cfg->DQSPort    == IOM_cfg[other_instance].DQSPort)  &&
 800a3c4:	68bb      	ldr	r3, [r7, #8]
 800a3c6:	6859      	ldr	r1, [r3, #4]
 800a3c8:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800a3cc:	4613      	mov	r3, r2
 800a3ce:	005b      	lsls	r3, r3, #1
 800a3d0:	4413      	add	r3, r2
 800a3d2:	00db      	lsls	r3, r3, #3
 800a3d4:	3350      	adds	r3, #80	; 0x50
 800a3d6:	443b      	add	r3, r7
 800a3d8:	3b38      	subs	r3, #56	; 0x38
 800a3da:	681b      	ldr	r3, [r3, #0]
      if ((cfg->ClkPort   == IOM_cfg[other_instance].ClkPort)   &&
 800a3dc:	4299      	cmp	r1, r3
 800a3de:	d125      	bne.n	800a42c <HAL_OSPIM_Config+0x50c>
          (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) &&
 800a3e0:	68bb      	ldr	r3, [r7, #8]
 800a3e2:	68d9      	ldr	r1, [r3, #12]
 800a3e4:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800a3e8:	4613      	mov	r3, r2
 800a3ea:	005b      	lsls	r3, r3, #1
 800a3ec:	4413      	add	r3, r2
 800a3ee:	00db      	lsls	r3, r3, #3
 800a3f0:	3350      	adds	r3, #80	; 0x50
 800a3f2:	443b      	add	r3, r7
 800a3f4:	3b30      	subs	r3, #48	; 0x30
 800a3f6:	681b      	ldr	r3, [r3, #0]
          (cfg->DQSPort    == IOM_cfg[other_instance].DQSPort)  &&
 800a3f8:	4299      	cmp	r1, r3
 800a3fa:	d117      	bne.n	800a42c <HAL_OSPIM_Config+0x50c>
          (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
 800a3fc:	68bb      	ldr	r3, [r7, #8]
 800a3fe:	6919      	ldr	r1, [r3, #16]
 800a400:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800a404:	4613      	mov	r3, r2
 800a406:	005b      	lsls	r3, r3, #1
 800a408:	4413      	add	r3, r2
 800a40a:	00db      	lsls	r3, r3, #3
 800a40c:	3350      	adds	r3, #80	; 0x50
 800a40e:	443b      	add	r3, r7
 800a410:	3b2c      	subs	r3, #44	; 0x2c
 800a412:	681b      	ldr	r3, [r3, #0]
          (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) &&
 800a414:	4299      	cmp	r1, r3
 800a416:	d109      	bne.n	800a42c <HAL_OSPIM_Config+0x50c>
      {
        /* Multiplexing should be performed */
        SET_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
 800a418:	4b03      	ldr	r3, [pc, #12]	; (800a428 <HAL_OSPIM_Config+0x508>)
 800a41a:	681b      	ldr	r3, [r3, #0]
 800a41c:	4a02      	ldr	r2, [pc, #8]	; (800a428 <HAL_OSPIM_Config+0x508>)
 800a41e:	f043 0301 	orr.w	r3, r3, #1
 800a422:	6013      	str	r3, [r2, #0]
 800a424:	e0ce      	b.n	800a5c4 <HAL_OSPIM_Config+0x6a4>
 800a426:	bf00      	nop
 800a428:	420c4000 	.word	0x420c4000
      }
      else
      {
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKEN);
 800a42c:	49a4      	ldr	r1, [pc, #656]	; (800a6c0 <HAL_OSPIM_Config+0x7a0>)
 800a42e:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800a432:	4613      	mov	r3, r2
 800a434:	005b      	lsls	r3, r3, #1
 800a436:	4413      	add	r3, r2
 800a438:	00db      	lsls	r3, r3, #3
 800a43a:	3350      	adds	r3, #80	; 0x50
 800a43c:	443b      	add	r3, r7
 800a43e:	3b3c      	subs	r3, #60	; 0x3c
 800a440:	681b      	ldr	r3, [r3, #0]
 800a442:	3b01      	subs	r3, #1
 800a444:	009b      	lsls	r3, r3, #2
 800a446:	440b      	add	r3, r1
 800a448:	6859      	ldr	r1, [r3, #4]
 800a44a:	489d      	ldr	r0, [pc, #628]	; (800a6c0 <HAL_OSPIM_Config+0x7a0>)
 800a44c:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800a450:	4613      	mov	r3, r2
 800a452:	005b      	lsls	r3, r3, #1
 800a454:	4413      	add	r3, r2
 800a456:	00db      	lsls	r3, r3, #3
 800a458:	3350      	adds	r3, #80	; 0x50
 800a45a:	443b      	add	r3, r7
 800a45c:	3b3c      	subs	r3, #60	; 0x3c
 800a45e:	681b      	ldr	r3, [r3, #0]
 800a460:	3b01      	subs	r3, #1
 800a462:	f021 0201 	bic.w	r2, r1, #1
 800a466:	009b      	lsls	r3, r3, #2
 800a468:	4403      	add	r3, r0
 800a46a:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 800a46c:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800a470:	4613      	mov	r3, r2
 800a472:	005b      	lsls	r3, r3, #1
 800a474:	4413      	add	r3, r2
 800a476:	00db      	lsls	r3, r3, #3
 800a478:	3350      	adds	r3, #80	; 0x50
 800a47a:	443b      	add	r3, r7
 800a47c:	3b38      	subs	r3, #56	; 0x38
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	2b00      	cmp	r3, #0
 800a482:	d01f      	beq.n	800a4c4 <HAL_OSPIM_Config+0x5a4>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSEN);
 800a484:	498e      	ldr	r1, [pc, #568]	; (800a6c0 <HAL_OSPIM_Config+0x7a0>)
 800a486:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800a48a:	4613      	mov	r3, r2
 800a48c:	005b      	lsls	r3, r3, #1
 800a48e:	4413      	add	r3, r2
 800a490:	00db      	lsls	r3, r3, #3
 800a492:	3350      	adds	r3, #80	; 0x50
 800a494:	443b      	add	r3, r7
 800a496:	3b38      	subs	r3, #56	; 0x38
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	3b01      	subs	r3, #1
 800a49c:	009b      	lsls	r3, r3, #2
 800a49e:	440b      	add	r3, r1
 800a4a0:	6859      	ldr	r1, [r3, #4]
 800a4a2:	4887      	ldr	r0, [pc, #540]	; (800a6c0 <HAL_OSPIM_Config+0x7a0>)
 800a4a4:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800a4a8:	4613      	mov	r3, r2
 800a4aa:	005b      	lsls	r3, r3, #1
 800a4ac:	4413      	add	r3, r2
 800a4ae:	00db      	lsls	r3, r3, #3
 800a4b0:	3350      	adds	r3, #80	; 0x50
 800a4b2:	443b      	add	r3, r7
 800a4b4:	3b38      	subs	r3, #56	; 0x38
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	3b01      	subs	r3, #1
 800a4ba:	f021 0210 	bic.w	r2, r1, #16
 800a4be:	009b      	lsls	r3, r3, #2
 800a4c0:	4403      	add	r3, r0
 800a4c2:	605a      	str	r2, [r3, #4]
        }
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].NCSPort - 1U)], OCTOSPIM_PCR_NCSEN);
 800a4c4:	497e      	ldr	r1, [pc, #504]	; (800a6c0 <HAL_OSPIM_Config+0x7a0>)
 800a4c6:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800a4ca:	4613      	mov	r3, r2
 800a4cc:	005b      	lsls	r3, r3, #1
 800a4ce:	4413      	add	r3, r2
 800a4d0:	00db      	lsls	r3, r3, #3
 800a4d2:	3350      	adds	r3, #80	; 0x50
 800a4d4:	443b      	add	r3, r7
 800a4d6:	3b34      	subs	r3, #52	; 0x34
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	3b01      	subs	r3, #1
 800a4dc:	009b      	lsls	r3, r3, #2
 800a4de:	440b      	add	r3, r1
 800a4e0:	6859      	ldr	r1, [r3, #4]
 800a4e2:	4877      	ldr	r0, [pc, #476]	; (800a6c0 <HAL_OSPIM_Config+0x7a0>)
 800a4e4:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800a4e8:	4613      	mov	r3, r2
 800a4ea:	005b      	lsls	r3, r3, #1
 800a4ec:	4413      	add	r3, r2
 800a4ee:	00db      	lsls	r3, r3, #3
 800a4f0:	3350      	adds	r3, #80	; 0x50
 800a4f2:	443b      	add	r3, r7
 800a4f4:	3b34      	subs	r3, #52	; 0x34
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	3b01      	subs	r3, #1
 800a4fa:	f421 7280 	bic.w	r2, r1, #256	; 0x100
 800a4fe:	009b      	lsls	r3, r3, #2
 800a500:	4403      	add	r3, r0
 800a502:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 800a504:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800a508:	4613      	mov	r3, r2
 800a50a:	005b      	lsls	r3, r3, #1
 800a50c:	4413      	add	r3, r2
 800a50e:	00db      	lsls	r3, r3, #3
 800a510:	3350      	adds	r3, #80	; 0x50
 800a512:	443b      	add	r3, r7
 800a514:	3b30      	subs	r3, #48	; 0x30
 800a516:	681b      	ldr	r3, [r3, #0]
 800a518:	2b00      	cmp	r3, #0
 800a51a:	d023      	beq.n	800a564 <HAL_OSPIM_Config+0x644>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 800a51c:	4968      	ldr	r1, [pc, #416]	; (800a6c0 <HAL_OSPIM_Config+0x7a0>)
 800a51e:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800a522:	4613      	mov	r3, r2
 800a524:	005b      	lsls	r3, r3, #1
 800a526:	4413      	add	r3, r2
 800a528:	00db      	lsls	r3, r3, #3
 800a52a:	3350      	adds	r3, #80	; 0x50
 800a52c:	443b      	add	r3, r7
 800a52e:	3b30      	subs	r3, #48	; 0x30
 800a530:	681b      	ldr	r3, [r3, #0]
 800a532:	3b01      	subs	r3, #1
 800a534:	f003 0301 	and.w	r3, r3, #1
 800a538:	009b      	lsls	r3, r3, #2
 800a53a:	440b      	add	r3, r1
 800a53c:	6859      	ldr	r1, [r3, #4]
 800a53e:	4860      	ldr	r0, [pc, #384]	; (800a6c0 <HAL_OSPIM_Config+0x7a0>)
 800a540:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800a544:	4613      	mov	r3, r2
 800a546:	005b      	lsls	r3, r3, #1
 800a548:	4413      	add	r3, r2
 800a54a:	00db      	lsls	r3, r3, #3
 800a54c:	3350      	adds	r3, #80	; 0x50
 800a54e:	443b      	add	r3, r7
 800a550:	3b30      	subs	r3, #48	; 0x30
 800a552:	681b      	ldr	r3, [r3, #0]
 800a554:	3b01      	subs	r3, #1
 800a556:	f003 0301 	and.w	r3, r3, #1
 800a55a:	f421 3280 	bic.w	r2, r1, #65536	; 0x10000
 800a55e:	009b      	lsls	r3, r3, #2
 800a560:	4403      	add	r3, r0
 800a562:	605a      	str	r2, [r3, #4]
                    OCTOSPIM_PCR_IOLEN);
        }
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 800a564:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800a568:	4613      	mov	r3, r2
 800a56a:	005b      	lsls	r3, r3, #1
 800a56c:	4413      	add	r3, r2
 800a56e:	00db      	lsls	r3, r3, #3
 800a570:	3350      	adds	r3, #80	; 0x50
 800a572:	443b      	add	r3, r7
 800a574:	3b2c      	subs	r3, #44	; 0x2c
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	2b00      	cmp	r3, #0
 800a57a:	d023      	beq.n	800a5c4 <HAL_OSPIM_Config+0x6a4>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 800a57c:	4950      	ldr	r1, [pc, #320]	; (800a6c0 <HAL_OSPIM_Config+0x7a0>)
 800a57e:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800a582:	4613      	mov	r3, r2
 800a584:	005b      	lsls	r3, r3, #1
 800a586:	4413      	add	r3, r2
 800a588:	00db      	lsls	r3, r3, #3
 800a58a:	3350      	adds	r3, #80	; 0x50
 800a58c:	443b      	add	r3, r7
 800a58e:	3b2c      	subs	r3, #44	; 0x2c
 800a590:	681b      	ldr	r3, [r3, #0]
 800a592:	3b01      	subs	r3, #1
 800a594:	f003 0301 	and.w	r3, r3, #1
 800a598:	009b      	lsls	r3, r3, #2
 800a59a:	440b      	add	r3, r1
 800a59c:	6859      	ldr	r1, [r3, #4]
 800a59e:	4848      	ldr	r0, [pc, #288]	; (800a6c0 <HAL_OSPIM_Config+0x7a0>)
 800a5a0:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800a5a4:	4613      	mov	r3, r2
 800a5a6:	005b      	lsls	r3, r3, #1
 800a5a8:	4413      	add	r3, r2
 800a5aa:	00db      	lsls	r3, r3, #3
 800a5ac:	3350      	adds	r3, #80	; 0x50
 800a5ae:	443b      	add	r3, r7
 800a5b0:	3b2c      	subs	r3, #44	; 0x2c
 800a5b2:	681b      	ldr	r3, [r3, #0]
 800a5b4:	3b01      	subs	r3, #1
 800a5b6:	f003 0301 	and.w	r3, r3, #1
 800a5ba:	f021 7280 	bic.w	r2, r1, #16777216	; 0x1000000
 800a5be:	009b      	lsls	r3, r3, #2
 800a5c0:	4403      	add	r3, r0
 800a5c2:	605a      	str	r2, [r3, #4]
        }
      }
    }

    /******************** Activation of new configuration *********************/
    MODIFY_REG(OCTOSPIM->PCR[(cfg->NCSPort - 1U)], (OCTOSPIM_PCR_NCSEN | OCTOSPIM_PCR_NCSSRC),
 800a5c4:	4a3e      	ldr	r2, [pc, #248]	; (800a6c0 <HAL_OSPIM_Config+0x7a0>)
 800a5c6:	68bb      	ldr	r3, [r7, #8]
 800a5c8:	689b      	ldr	r3, [r3, #8]
 800a5ca:	3b01      	subs	r3, #1
 800a5cc:	009b      	lsls	r3, r3, #2
 800a5ce:	4413      	add	r3, r2
 800a5d0:	685b      	ldr	r3, [r3, #4]
 800a5d2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a5d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a5d8:	025b      	lsls	r3, r3, #9
 800a5da:	431a      	orrs	r2, r3
 800a5dc:	4938      	ldr	r1, [pc, #224]	; (800a6c0 <HAL_OSPIM_Config+0x7a0>)
 800a5de:	68bb      	ldr	r3, [r7, #8]
 800a5e0:	689b      	ldr	r3, [r3, #8]
 800a5e2:	3b01      	subs	r3, #1
 800a5e4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a5e8:	009b      	lsls	r3, r3, #2
 800a5ea:	440b      	add	r3, r1
 800a5ec:	605a      	str	r2, [r3, #4]
               (OCTOSPIM_PCR_NCSEN | (instance << OCTOSPIM_PCR_NCSSRC_Pos)));

    if (((cfg->Req2AckTime) >= 1U) && ((cfg->Req2AckTime) <= 256U))
 800a5ee:	68bb      	ldr	r3, [r7, #8]
 800a5f0:	695b      	ldr	r3, [r3, #20]
 800a5f2:	2b00      	cmp	r3, #0
 800a5f4:	d018      	beq.n	800a628 <HAL_OSPIM_Config+0x708>
 800a5f6:	68bb      	ldr	r3, [r7, #8]
 800a5f8:	695b      	ldr	r3, [r3, #20]
 800a5fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a5fe:	d813      	bhi.n	800a628 <HAL_OSPIM_Config+0x708>
    {
      if ((cfg->Req2AckTime - 1U) > ((OCTOSPIM->CR & OCTOSPIM_CR_REQ2ACK_TIME) >> OCTOSPIM_CR_REQ2ACK_TIME_Pos))
 800a600:	68bb      	ldr	r3, [r7, #8]
 800a602:	695b      	ldr	r3, [r3, #20]
 800a604:	1e5a      	subs	r2, r3, #1
 800a606:	4b2e      	ldr	r3, [pc, #184]	; (800a6c0 <HAL_OSPIM_Config+0x7a0>)
 800a608:	681b      	ldr	r3, [r3, #0]
 800a60a:	0c1b      	lsrs	r3, r3, #16
 800a60c:	b2db      	uxtb	r3, r3
 800a60e:	429a      	cmp	r2, r3
 800a610:	d90a      	bls.n	800a628 <HAL_OSPIM_Config+0x708>
      {
        MODIFY_REG(OCTOSPIM->CR, OCTOSPIM_CR_REQ2ACK_TIME, ((cfg->Req2AckTime - 1U) << OCTOSPIM_CR_REQ2ACK_TIME_Pos));
 800a612:	4b2b      	ldr	r3, [pc, #172]	; (800a6c0 <HAL_OSPIM_Config+0x7a0>)
 800a614:	681b      	ldr	r3, [r3, #0]
 800a616:	f423 027f 	bic.w	r2, r3, #16711680	; 0xff0000
 800a61a:	68bb      	ldr	r3, [r7, #8]
 800a61c:	695b      	ldr	r3, [r3, #20]
 800a61e:	3b01      	subs	r3, #1
 800a620:	041b      	lsls	r3, r3, #16
 800a622:	4927      	ldr	r1, [pc, #156]	; (800a6c0 <HAL_OSPIM_Config+0x7a0>)
 800a624:	4313      	orrs	r3, r2
 800a626:	600b      	str	r3, [r1, #0]
      {
        /* Nothing to do */
      }
    }

    if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) != 0U)
 800a628:	4b25      	ldr	r3, [pc, #148]	; (800a6c0 <HAL_OSPIM_Config+0x7a0>)
 800a62a:	681b      	ldr	r3, [r3, #0]
 800a62c:	f003 0301 	and.w	r3, r3, #1
 800a630:	2b00      	cmp	r3, #0
 800a632:	f000 809a 	beq.w	800a76a <HAL_OSPIM_Config+0x84a>
    {
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort - 1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC), OCTOSPIM_PCR_CLKEN);
 800a636:	4a22      	ldr	r2, [pc, #136]	; (800a6c0 <HAL_OSPIM_Config+0x7a0>)
 800a638:	68bb      	ldr	r3, [r7, #8]
 800a63a:	681b      	ldr	r3, [r3, #0]
 800a63c:	3b01      	subs	r3, #1
 800a63e:	009b      	lsls	r3, r3, #2
 800a640:	4413      	add	r3, r2
 800a642:	685b      	ldr	r3, [r3, #4]
 800a644:	f023 0203 	bic.w	r2, r3, #3
 800a648:	491d      	ldr	r1, [pc, #116]	; (800a6c0 <HAL_OSPIM_Config+0x7a0>)
 800a64a:	68bb      	ldr	r3, [r7, #8]
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	3b01      	subs	r3, #1
 800a650:	f042 0201 	orr.w	r2, r2, #1
 800a654:	009b      	lsls	r3, r3, #2
 800a656:	440b      	add	r3, r1
 800a658:	605a      	str	r2, [r3, #4]
      if (cfg->DQSPort != 0U)
 800a65a:	68bb      	ldr	r3, [r7, #8]
 800a65c:	685b      	ldr	r3, [r3, #4]
 800a65e:	2b00      	cmp	r3, #0
 800a660:	d011      	beq.n	800a686 <HAL_OSPIM_Config+0x766>
      {
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort - 1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC), OCTOSPIM_PCR_DQSEN);
 800a662:	4a17      	ldr	r2, [pc, #92]	; (800a6c0 <HAL_OSPIM_Config+0x7a0>)
 800a664:	68bb      	ldr	r3, [r7, #8]
 800a666:	685b      	ldr	r3, [r3, #4]
 800a668:	3b01      	subs	r3, #1
 800a66a:	009b      	lsls	r3, r3, #2
 800a66c:	4413      	add	r3, r2
 800a66e:	685b      	ldr	r3, [r3, #4]
 800a670:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800a674:	4912      	ldr	r1, [pc, #72]	; (800a6c0 <HAL_OSPIM_Config+0x7a0>)
 800a676:	68bb      	ldr	r3, [r7, #8]
 800a678:	685b      	ldr	r3, [r3, #4]
 800a67a:	3b01      	subs	r3, #1
 800a67c:	f042 0210 	orr.w	r2, r2, #16
 800a680:	009b      	lsls	r3, r3, #2
 800a682:	440b      	add	r3, r1
 800a684:	605a      	str	r2, [r3, #4]
      }

      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 800a686:	68bb      	ldr	r3, [r7, #8]
 800a688:	68db      	ldr	r3, [r3, #12]
 800a68a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a68e:	2b00      	cmp	r3, #0
 800a690:	d018      	beq.n	800a6c4 <HAL_OSPIM_Config+0x7a4>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 800a692:	4a0b      	ldr	r2, [pc, #44]	; (800a6c0 <HAL_OSPIM_Config+0x7a0>)
 800a694:	68bb      	ldr	r3, [r7, #8]
 800a696:	68db      	ldr	r3, [r3, #12]
 800a698:	3b01      	subs	r3, #1
 800a69a:	f003 0301 	and.w	r3, r3, #1
 800a69e:	009b      	lsls	r3, r3, #2
 800a6a0:	4413      	add	r3, r2
 800a6a2:	685b      	ldr	r3, [r3, #4]
 800a6a4:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800a6a8:	4905      	ldr	r1, [pc, #20]	; (800a6c0 <HAL_OSPIM_Config+0x7a0>)
 800a6aa:	68bb      	ldr	r3, [r7, #8]
 800a6ac:	68db      	ldr	r3, [r3, #12]
 800a6ae:	3b01      	subs	r3, #1
 800a6b0:	f003 0301 	and.w	r3, r3, #1
 800a6b4:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800a6b8:	009b      	lsls	r3, r3, #2
 800a6ba:	440b      	add	r3, r1
 800a6bc:	605a      	str	r2, [r3, #4]
 800a6be:	e01b      	b.n	800a6f8 <HAL_OSPIM_Config+0x7d8>
 800a6c0:	420c4000 	.word	0x420c4000
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC), OCTOSPIM_PCR_IOLEN);
      }
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 800a6c4:	68bb      	ldr	r3, [r7, #8]
 800a6c6:	68db      	ldr	r3, [r3, #12]
 800a6c8:	2b00      	cmp	r3, #0
 800a6ca:	d015      	beq.n	800a6f8 <HAL_OSPIM_Config+0x7d8>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 800a6cc:	4a8a      	ldr	r2, [pc, #552]	; (800a8f8 <HAL_OSPIM_Config+0x9d8>)
 800a6ce:	68bb      	ldr	r3, [r7, #8]
 800a6d0:	68db      	ldr	r3, [r3, #12]
 800a6d2:	3b01      	subs	r3, #1
 800a6d4:	f003 0301 	and.w	r3, r3, #1
 800a6d8:	009b      	lsls	r3, r3, #2
 800a6da:	4413      	add	r3, r2
 800a6dc:	685b      	ldr	r3, [r3, #4]
 800a6de:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800a6e2:	4985      	ldr	r1, [pc, #532]	; (800a8f8 <HAL_OSPIM_Config+0x9d8>)
 800a6e4:	68bb      	ldr	r3, [r7, #8]
 800a6e6:	68db      	ldr	r3, [r3, #12]
 800a6e8:	3b01      	subs	r3, #1
 800a6ea:	f003 0301 	and.w	r3, r3, #1
 800a6ee:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 800a6f2:	009b      	lsls	r3, r3, #2
 800a6f4:	440b      	add	r3, r1
 800a6f6:	605a      	str	r2, [r3, #4]
      else
      {
        /* Nothing to do */
      }

      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 800a6f8:	68bb      	ldr	r3, [r7, #8]
 800a6fa:	691b      	ldr	r3, [r3, #16]
 800a6fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a700:	2b00      	cmp	r3, #0
 800a702:	d016      	beq.n	800a732 <HAL_OSPIM_Config+0x812>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 800a704:	4a7c      	ldr	r2, [pc, #496]	; (800a8f8 <HAL_OSPIM_Config+0x9d8>)
 800a706:	68bb      	ldr	r3, [r7, #8]
 800a708:	691b      	ldr	r3, [r3, #16]
 800a70a:	3b01      	subs	r3, #1
 800a70c:	f003 0301 	and.w	r3, r3, #1
 800a710:	009b      	lsls	r3, r3, #2
 800a712:	4413      	add	r3, r2
 800a714:	685b      	ldr	r3, [r3, #4]
 800a716:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800a71a:	4977      	ldr	r1, [pc, #476]	; (800a8f8 <HAL_OSPIM_Config+0x9d8>)
 800a71c:	68bb      	ldr	r3, [r7, #8]
 800a71e:	691b      	ldr	r3, [r3, #16]
 800a720:	3b01      	subs	r3, #1
 800a722:	f003 0301 	and.w	r3, r3, #1
 800a726:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
 800a72a:	009b      	lsls	r3, r3, #2
 800a72c:	440b      	add	r3, r1
 800a72e:	605a      	str	r2, [r3, #4]
 800a730:	e0c3      	b.n	800a8ba <HAL_OSPIM_Config+0x99a>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC), (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC_0));
      }
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 800a732:	68bb      	ldr	r3, [r7, #8]
 800a734:	691b      	ldr	r3, [r3, #16]
 800a736:	2b00      	cmp	r3, #0
 800a738:	f000 80bf 	beq.w	800a8ba <HAL_OSPIM_Config+0x99a>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 800a73c:	4a6e      	ldr	r2, [pc, #440]	; (800a8f8 <HAL_OSPIM_Config+0x9d8>)
 800a73e:	68bb      	ldr	r3, [r7, #8]
 800a740:	691b      	ldr	r3, [r3, #16]
 800a742:	3b01      	subs	r3, #1
 800a744:	f003 0301 	and.w	r3, r3, #1
 800a748:	009b      	lsls	r3, r3, #2
 800a74a:	4413      	add	r3, r2
 800a74c:	685b      	ldr	r3, [r3, #4]
 800a74e:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800a752:	4969      	ldr	r1, [pc, #420]	; (800a8f8 <HAL_OSPIM_Config+0x9d8>)
 800a754:	68bb      	ldr	r3, [r7, #8]
 800a756:	691b      	ldr	r3, [r3, #16]
 800a758:	3b01      	subs	r3, #1
 800a75a:	f003 0301 	and.w	r3, r3, #1
 800a75e:	f042 7240 	orr.w	r2, r2, #50331648	; 0x3000000
 800a762:	009b      	lsls	r3, r3, #2
 800a764:	440b      	add	r3, r1
 800a766:	605a      	str	r2, [r3, #4]
 800a768:	e0a7      	b.n	800a8ba <HAL_OSPIM_Config+0x99a>
        /* Nothing to do */
      }
    }
    else
    {
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort - 1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC),
 800a76a:	4a63      	ldr	r2, [pc, #396]	; (800a8f8 <HAL_OSPIM_Config+0x9d8>)
 800a76c:	68bb      	ldr	r3, [r7, #8]
 800a76e:	681b      	ldr	r3, [r3, #0]
 800a770:	3b01      	subs	r3, #1
 800a772:	009b      	lsls	r3, r3, #2
 800a774:	4413      	add	r3, r2
 800a776:	685b      	ldr	r3, [r3, #4]
 800a778:	f023 0203 	bic.w	r2, r3, #3
 800a77c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a77e:	005b      	lsls	r3, r3, #1
 800a780:	431a      	orrs	r2, r3
 800a782:	495d      	ldr	r1, [pc, #372]	; (800a8f8 <HAL_OSPIM_Config+0x9d8>)
 800a784:	68bb      	ldr	r3, [r7, #8]
 800a786:	681b      	ldr	r3, [r3, #0]
 800a788:	3b01      	subs	r3, #1
 800a78a:	f042 0201 	orr.w	r2, r2, #1
 800a78e:	009b      	lsls	r3, r3, #2
 800a790:	440b      	add	r3, r1
 800a792:	605a      	str	r2, [r3, #4]
                 (OCTOSPIM_PCR_CLKEN | (instance << OCTOSPIM_PCR_CLKSRC_Pos)));
      if (cfg->DQSPort != 0U)
 800a794:	68bb      	ldr	r3, [r7, #8]
 800a796:	685b      	ldr	r3, [r3, #4]
 800a798:	2b00      	cmp	r3, #0
 800a79a:	d014      	beq.n	800a7c6 <HAL_OSPIM_Config+0x8a6>
      {
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort - 1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC),
 800a79c:	4a56      	ldr	r2, [pc, #344]	; (800a8f8 <HAL_OSPIM_Config+0x9d8>)
 800a79e:	68bb      	ldr	r3, [r7, #8]
 800a7a0:	685b      	ldr	r3, [r3, #4]
 800a7a2:	3b01      	subs	r3, #1
 800a7a4:	009b      	lsls	r3, r3, #2
 800a7a6:	4413      	add	r3, r2
 800a7a8:	685b      	ldr	r3, [r3, #4]
 800a7aa:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800a7ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a7b0:	015b      	lsls	r3, r3, #5
 800a7b2:	431a      	orrs	r2, r3
 800a7b4:	4950      	ldr	r1, [pc, #320]	; (800a8f8 <HAL_OSPIM_Config+0x9d8>)
 800a7b6:	68bb      	ldr	r3, [r7, #8]
 800a7b8:	685b      	ldr	r3, [r3, #4]
 800a7ba:	3b01      	subs	r3, #1
 800a7bc:	f042 0210 	orr.w	r2, r2, #16
 800a7c0:	009b      	lsls	r3, r3, #2
 800a7c2:	440b      	add	r3, r1
 800a7c4:	605a      	str	r2, [r3, #4]
                   (OCTOSPIM_PCR_DQSEN | (instance << OCTOSPIM_PCR_DQSSRC_Pos)));
      }

      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 800a7c6:	68bb      	ldr	r3, [r7, #8]
 800a7c8:	68db      	ldr	r3, [r3, #12]
 800a7ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a7ce:	2b00      	cmp	r3, #0
 800a7d0:	d019      	beq.n	800a806 <HAL_OSPIM_Config+0x8e6>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 800a7d2:	4a49      	ldr	r2, [pc, #292]	; (800a8f8 <HAL_OSPIM_Config+0x9d8>)
 800a7d4:	68bb      	ldr	r3, [r7, #8]
 800a7d6:	68db      	ldr	r3, [r3, #12]
 800a7d8:	3b01      	subs	r3, #1
 800a7da:	f003 0301 	and.w	r3, r3, #1
 800a7de:	009b      	lsls	r3, r3, #2
 800a7e0:	4413      	add	r3, r2
 800a7e2:	685b      	ldr	r3, [r3, #4]
 800a7e4:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800a7e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a7ea:	049b      	lsls	r3, r3, #18
 800a7ec:	431a      	orrs	r2, r3
 800a7ee:	4942      	ldr	r1, [pc, #264]	; (800a8f8 <HAL_OSPIM_Config+0x9d8>)
 800a7f0:	68bb      	ldr	r3, [r7, #8]
 800a7f2:	68db      	ldr	r3, [r3, #12]
 800a7f4:	3b01      	subs	r3, #1
 800a7f6:	f003 0301 	and.w	r3, r3, #1
 800a7fa:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800a7fe:	009b      	lsls	r3, r3, #2
 800a800:	440b      	add	r3, r1
 800a802:	605a      	str	r2, [r3, #4]
 800a804:	e01c      	b.n	800a840 <HAL_OSPIM_Config+0x920>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                   (OCTOSPIM_PCR_IOLEN | (instance << (OCTOSPIM_PCR_IOLSRC_Pos + 1U))));
      }
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 800a806:	68bb      	ldr	r3, [r7, #8]
 800a808:	68db      	ldr	r3, [r3, #12]
 800a80a:	2b00      	cmp	r3, #0
 800a80c:	d018      	beq.n	800a840 <HAL_OSPIM_Config+0x920>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 800a80e:	4a3a      	ldr	r2, [pc, #232]	; (800a8f8 <HAL_OSPIM_Config+0x9d8>)
 800a810:	68bb      	ldr	r3, [r7, #8]
 800a812:	68db      	ldr	r3, [r3, #12]
 800a814:	3b01      	subs	r3, #1
 800a816:	f003 0301 	and.w	r3, r3, #1
 800a81a:	009b      	lsls	r3, r3, #2
 800a81c:	4413      	add	r3, r2
 800a81e:	685b      	ldr	r3, [r3, #4]
 800a820:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800a824:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a826:	069b      	lsls	r3, r3, #26
 800a828:	431a      	orrs	r2, r3
 800a82a:	4933      	ldr	r1, [pc, #204]	; (800a8f8 <HAL_OSPIM_Config+0x9d8>)
 800a82c:	68bb      	ldr	r3, [r7, #8]
 800a82e:	68db      	ldr	r3, [r3, #12]
 800a830:	3b01      	subs	r3, #1
 800a832:	f003 0301 	and.w	r3, r3, #1
 800a836:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 800a83a:	009b      	lsls	r3, r3, #2
 800a83c:	440b      	add	r3, r1
 800a83e:	605a      	str	r2, [r3, #4]
      else
      {
        /* Nothing to do */
      }

      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 800a840:	68bb      	ldr	r3, [r7, #8]
 800a842:	691b      	ldr	r3, [r3, #16]
 800a844:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a848:	2b00      	cmp	r3, #0
 800a84a:	d019      	beq.n	800a880 <HAL_OSPIM_Config+0x960>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 800a84c:	4a2a      	ldr	r2, [pc, #168]	; (800a8f8 <HAL_OSPIM_Config+0x9d8>)
 800a84e:	68bb      	ldr	r3, [r7, #8]
 800a850:	691b      	ldr	r3, [r3, #16]
 800a852:	3b01      	subs	r3, #1
 800a854:	f003 0301 	and.w	r3, r3, #1
 800a858:	009b      	lsls	r3, r3, #2
 800a85a:	4413      	add	r3, r2
 800a85c:	685b      	ldr	r3, [r3, #4]
 800a85e:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800a862:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a864:	049b      	lsls	r3, r3, #18
 800a866:	431a      	orrs	r2, r3
 800a868:	4923      	ldr	r1, [pc, #140]	; (800a8f8 <HAL_OSPIM_Config+0x9d8>)
 800a86a:	68bb      	ldr	r3, [r7, #8]
 800a86c:	691b      	ldr	r3, [r3, #16]
 800a86e:	3b01      	subs	r3, #1
 800a870:	f003 0301 	and.w	r3, r3, #1
 800a874:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
 800a878:	009b      	lsls	r3, r3, #2
 800a87a:	440b      	add	r3, r1
 800a87c:	605a      	str	r2, [r3, #4]
 800a87e:	e01c      	b.n	800a8ba <HAL_OSPIM_Config+0x99a>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC_0 | (instance << (OCTOSPIM_PCR_IOLSRC_Pos + 1U))));
      }
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 800a880:	68bb      	ldr	r3, [r7, #8]
 800a882:	691b      	ldr	r3, [r3, #16]
 800a884:	2b00      	cmp	r3, #0
 800a886:	d018      	beq.n	800a8ba <HAL_OSPIM_Config+0x99a>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 800a888:	4a1b      	ldr	r2, [pc, #108]	; (800a8f8 <HAL_OSPIM_Config+0x9d8>)
 800a88a:	68bb      	ldr	r3, [r7, #8]
 800a88c:	691b      	ldr	r3, [r3, #16]
 800a88e:	3b01      	subs	r3, #1
 800a890:	f003 0301 	and.w	r3, r3, #1
 800a894:	009b      	lsls	r3, r3, #2
 800a896:	4413      	add	r3, r2
 800a898:	685b      	ldr	r3, [r3, #4]
 800a89a:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800a89e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a8a0:	069b      	lsls	r3, r3, #26
 800a8a2:	431a      	orrs	r2, r3
 800a8a4:	4914      	ldr	r1, [pc, #80]	; (800a8f8 <HAL_OSPIM_Config+0x9d8>)
 800a8a6:	68bb      	ldr	r3, [r7, #8]
 800a8a8:	691b      	ldr	r3, [r3, #16]
 800a8aa:	3b01      	subs	r3, #1
 800a8ac:	f003 0301 	and.w	r3, r3, #1
 800a8b0:	f042 7240 	orr.w	r2, r2, #50331648	; 0x3000000
 800a8b4:	009b      	lsls	r3, r3, #2
 800a8b6:	440b      	add	r3, r1
 800a8b8:	605a      	str	r2, [r3, #4]
        /* Nothing to do */
      }
    }

    /******* Re-enable both OctoSPI after configure OctoSPI IO Manager ********/
    if ((ospi_enabled & 0x1U) != 0U)
 800a8ba:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800a8be:	f003 0301 	and.w	r3, r3, #1
 800a8c2:	2b00      	cmp	r3, #0
 800a8c4:	d005      	beq.n	800a8d2 <HAL_OSPIM_Config+0x9b2>
    {
      SET_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 800a8c6:	4b0d      	ldr	r3, [pc, #52]	; (800a8fc <HAL_OSPIM_Config+0x9dc>)
 800a8c8:	681b      	ldr	r3, [r3, #0]
 800a8ca:	4a0c      	ldr	r2, [pc, #48]	; (800a8fc <HAL_OSPIM_Config+0x9dc>)
 800a8cc:	f043 0301 	orr.w	r3, r3, #1
 800a8d0:	6013      	str	r3, [r2, #0]
    }
    if ((ospi_enabled & 0x2U) != 0U)
 800a8d2:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800a8d6:	f003 0302 	and.w	r3, r3, #2
 800a8da:	2b00      	cmp	r3, #0
 800a8dc:	d005      	beq.n	800a8ea <HAL_OSPIM_Config+0x9ca>
    {
      SET_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 800a8de:	4b08      	ldr	r3, [pc, #32]	; (800a900 <HAL_OSPIM_Config+0x9e0>)
 800a8e0:	681b      	ldr	r3, [r3, #0]
 800a8e2:	4a07      	ldr	r2, [pc, #28]	; (800a900 <HAL_OSPIM_Config+0x9e0>)
 800a8e4:	f043 0301 	orr.w	r3, r3, #1
 800a8e8:	6013      	str	r3, [r2, #0]
    }
  }

  /* Return function status */
  return status;
 800a8ea:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 800a8ee:	4618      	mov	r0, r3
 800a8f0:	3750      	adds	r7, #80	; 0x50
 800a8f2:	46bd      	mov	sp, r7
 800a8f4:	bd80      	pop	{r7, pc}
 800a8f6:	bf00      	nop
 800a8f8:	420c4000 	.word	0x420c4000
 800a8fc:	420d1400 	.word	0x420d1400
 800a900:	420d2400 	.word	0x420d2400

0800a904 <OSPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart : Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_WaitFlagStateUntilTimeout(OSPI_HandleTypeDef *hospi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 800a904:	b580      	push	{r7, lr}
 800a906:	b084      	sub	sp, #16
 800a908:	af00      	add	r7, sp, #0
 800a90a:	60f8      	str	r0, [r7, #12]
 800a90c:	60b9      	str	r1, [r7, #8]
 800a90e:	603b      	str	r3, [r7, #0]
 800a910:	4613      	mov	r3, r2
 800a912:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while ((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 800a914:	e022      	b.n	800a95c <OSPI_WaitFlagStateUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a916:	69bb      	ldr	r3, [r7, #24]
 800a918:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a91c:	d01e      	beq.n	800a95c <OSPI_WaitFlagStateUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a91e:	f7fc f80f 	bl	8006940 <HAL_GetTick>
 800a922:	4602      	mov	r2, r0
 800a924:	683b      	ldr	r3, [r7, #0]
 800a926:	1ad3      	subs	r3, r2, r3
 800a928:	69ba      	ldr	r2, [r7, #24]
 800a92a:	429a      	cmp	r2, r3
 800a92c:	d302      	bcc.n	800a934 <OSPI_WaitFlagStateUntilTimeout+0x30>
 800a92e:	69bb      	ldr	r3, [r7, #24]
 800a930:	2b00      	cmp	r3, #0
 800a932:	d113      	bne.n	800a95c <OSPI_WaitFlagStateUntilTimeout+0x58>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hospi->Instance->SR & Flag) != (uint32_t)State)
 800a934:	68fb      	ldr	r3, [r7, #12]
 800a936:	681b      	ldr	r3, [r3, #0]
 800a938:	6a1a      	ldr	r2, [r3, #32]
 800a93a:	68bb      	ldr	r3, [r7, #8]
 800a93c:	401a      	ands	r2, r3
 800a93e:	79fb      	ldrb	r3, [r7, #7]
 800a940:	429a      	cmp	r2, r3
 800a942:	d00b      	beq.n	800a95c <OSPI_WaitFlagStateUntilTimeout+0x58>
        {
          hospi->State     = HAL_OSPI_STATE_ERROR;
 800a944:	68fb      	ldr	r3, [r7, #12]
 800a946:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a94a:	651a      	str	r2, [r3, #80]	; 0x50
          hospi->ErrorCode |= HAL_OSPI_ERROR_TIMEOUT;
 800a94c:	68fb      	ldr	r3, [r7, #12]
 800a94e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a950:	f043 0201 	orr.w	r2, r3, #1
 800a954:	68fb      	ldr	r3, [r7, #12]
 800a956:	655a      	str	r2, [r3, #84]	; 0x54

          return HAL_ERROR;
 800a958:	2301      	movs	r3, #1
 800a95a:	e00e      	b.n	800a97a <OSPI_WaitFlagStateUntilTimeout+0x76>
  while ((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 800a95c:	68fb      	ldr	r3, [r7, #12]
 800a95e:	681b      	ldr	r3, [r3, #0]
 800a960:	6a1a      	ldr	r2, [r3, #32]
 800a962:	68bb      	ldr	r3, [r7, #8]
 800a964:	4013      	ands	r3, r2
 800a966:	2b00      	cmp	r3, #0
 800a968:	bf14      	ite	ne
 800a96a:	2301      	movne	r3, #1
 800a96c:	2300      	moveq	r3, #0
 800a96e:	b2db      	uxtb	r3, r3
 800a970:	461a      	mov	r2, r3
 800a972:	79fb      	ldrb	r3, [r7, #7]
 800a974:	429a      	cmp	r2, r3
 800a976:	d1ce      	bne.n	800a916 <OSPI_WaitFlagStateUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a978:	2300      	movs	r3, #0
}
 800a97a:	4618      	mov	r0, r3
 800a97c:	3710      	adds	r7, #16
 800a97e:	46bd      	mov	sp, r7
 800a980:	bd80      	pop	{r7, pc}
	...

0800a984 <OSPI_ConfigCmd>:
  * @param  hospi : OSPI handle
  * @param  cmd   : structure that contains the command configuration information
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_ConfigCmd(OSPI_HandleTypeDef *hospi, OSPI_RegularCmdTypeDef *cmd)
{
 800a984:	b480      	push	{r7}
 800a986:	b089      	sub	sp, #36	; 0x24
 800a988:	af00      	add	r7, sp, #0
 800a98a:	6078      	str	r0, [r7, #4]
 800a98c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a98e:	2300      	movs	r3, #0
 800a990:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *tcr_reg;
  __IO uint32_t *ir_reg;
  __IO uint32_t *abr_reg;

  /* Re-initialize the value of the functional mode */
  MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, 0U);
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	681b      	ldr	r3, [r3, #0]
 800a996:	681a      	ldr	r2, [r3, #0]
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	681b      	ldr	r3, [r3, #0]
 800a99c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800a9a0:	601a      	str	r2, [r3, #0]

  /* Configure the flash ID */
  if (hospi->Init.DualQuad == HAL_OSPI_DUALQUAD_DISABLE)
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	689b      	ldr	r3, [r3, #8]
 800a9a6:	2b00      	cmp	r3, #0
 800a9a8:	d10a      	bne.n	800a9c0 <OSPI_ConfigCmd+0x3c>
  {
    MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_MSEL, cmd->FlashId);
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	681b      	ldr	r3, [r3, #0]
 800a9ae:	681b      	ldr	r3, [r3, #0]
 800a9b0:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 800a9b4:	683b      	ldr	r3, [r7, #0]
 800a9b6:	685a      	ldr	r2, [r3, #4]
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	681b      	ldr	r3, [r3, #0]
 800a9bc:	430a      	orrs	r2, r1
 800a9be:	601a      	str	r2, [r3, #0]
  }

  if (cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG)
 800a9c0:	683b      	ldr	r3, [r7, #0]
 800a9c2:	681b      	ldr	r3, [r3, #0]
 800a9c4:	2b02      	cmp	r3, #2
 800a9c6:	d114      	bne.n	800a9f2 <OSPI_ConfigCmd+0x6e>
  {
    ccr_reg = &(hospi->Instance->WCCR);
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	681b      	ldr	r3, [r3, #0]
 800a9cc:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800a9d0:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hospi->Instance->WTCR);
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	681b      	ldr	r3, [r3, #0]
 800a9d6:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 800a9da:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hospi->Instance->WIR);
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	681b      	ldr	r3, [r3, #0]
 800a9e0:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800a9e4:	613b      	str	r3, [r7, #16]
    abr_reg = &(hospi->Instance->WABR);
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	681b      	ldr	r3, [r3, #0]
 800a9ea:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 800a9ee:	60fb      	str	r3, [r7, #12]
 800a9f0:	e02c      	b.n	800aa4c <OSPI_ConfigCmd+0xc8>
  }
  else if (cmd->OperationType == HAL_OSPI_OPTYPE_WRAP_CFG)
 800a9f2:	683b      	ldr	r3, [r7, #0]
 800a9f4:	681b      	ldr	r3, [r3, #0]
 800a9f6:	2b03      	cmp	r3, #3
 800a9f8:	d114      	bne.n	800aa24 <OSPI_ConfigCmd+0xa0>
  {
    ccr_reg = &(hospi->Instance->WPCCR);
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	681b      	ldr	r3, [r3, #0]
 800a9fe:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800aa02:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hospi->Instance->WPTCR);
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	681b      	ldr	r3, [r3, #0]
 800aa08:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 800aa0c:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hospi->Instance->WPIR);
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	681b      	ldr	r3, [r3, #0]
 800aa12:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800aa16:	613b      	str	r3, [r7, #16]
    abr_reg = &(hospi->Instance->WPABR);
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	681b      	ldr	r3, [r3, #0]
 800aa1c:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 800aa20:	60fb      	str	r3, [r7, #12]
 800aa22:	e013      	b.n	800aa4c <OSPI_ConfigCmd+0xc8>
  }
  else
  {
    ccr_reg = &(hospi->Instance->CCR);
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	681b      	ldr	r3, [r3, #0]
 800aa28:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800aa2c:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hospi->Instance->TCR);
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	681b      	ldr	r3, [r3, #0]
 800aa32:	f503 7384 	add.w	r3, r3, #264	; 0x108
 800aa36:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hospi->Instance->IR);
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	681b      	ldr	r3, [r3, #0]
 800aa3c:	f503 7388 	add.w	r3, r3, #272	; 0x110
 800aa40:	613b      	str	r3, [r7, #16]
    abr_reg = &(hospi->Instance->ABR);
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	681b      	ldr	r3, [r3, #0]
 800aa46:	f503 7390 	add.w	r3, r3, #288	; 0x120
 800aa4a:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CCR register with DQS and SIOO modes */
  *ccr_reg = (cmd->DQSMode | cmd->SIOOMode);
 800aa4c:	683b      	ldr	r3, [r7, #0]
 800aa4e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800aa50:	683b      	ldr	r3, [r7, #0]
 800aa52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aa54:	431a      	orrs	r2, r3
 800aa56:	69bb      	ldr	r3, [r7, #24]
 800aa58:	601a      	str	r2, [r3, #0]

  if (cmd->AlternateBytesMode != HAL_OSPI_ALTERNATE_BYTES_NONE)
 800aa5a:	683b      	ldr	r3, [r7, #0]
 800aa5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa5e:	2b00      	cmp	r3, #0
 800aa60:	d012      	beq.n	800aa88 <OSPI_ConfigCmd+0x104>
  {
    /* Configure the ABR register with alternate bytes value */
    *abr_reg = cmd->AlternateBytes;
 800aa62:	683b      	ldr	r3, [r7, #0]
 800aa64:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800aa66:	68fb      	ldr	r3, [r7, #12]
 800aa68:	601a      	str	r2, [r3, #0]

    /* Configure the CCR register with alternate bytes communication parameters */
    MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ABMODE | OCTOSPI_CCR_ABDTR | OCTOSPI_CCR_ABSIZE),
 800aa6a:	69bb      	ldr	r3, [r7, #24]
 800aa6c:	681b      	ldr	r3, [r3, #0]
 800aa6e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800aa72:	683b      	ldr	r3, [r7, #0]
 800aa74:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800aa76:	683b      	ldr	r3, [r7, #0]
 800aa78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aa7a:	4319      	orrs	r1, r3
 800aa7c:	683b      	ldr	r3, [r7, #0]
 800aa7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa80:	430b      	orrs	r3, r1
 800aa82:	431a      	orrs	r2, r3
 800aa84:	69bb      	ldr	r3, [r7, #24]
 800aa86:	601a      	str	r2, [r3, #0]
               (cmd->AlternateBytesMode | cmd->AlternateBytesDtrMode | cmd->AlternateBytesSize));
  }

  /* Configure the TCR register with the number of dummy cycles */
  MODIFY_REG((*tcr_reg), OCTOSPI_TCR_DCYC, cmd->DummyCycles);
 800aa88:	697b      	ldr	r3, [r7, #20]
 800aa8a:	681b      	ldr	r3, [r3, #0]
 800aa8c:	f023 021f 	bic.w	r2, r3, #31
 800aa90:	683b      	ldr	r3, [r7, #0]
 800aa92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aa94:	431a      	orrs	r2, r3
 800aa96:	697b      	ldr	r3, [r7, #20]
 800aa98:	601a      	str	r2, [r3, #0]

  if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 800aa9a:	683b      	ldr	r3, [r7, #0]
 800aa9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa9e:	2b00      	cmp	r3, #0
 800aaa0:	d009      	beq.n	800aab6 <OSPI_ConfigCmd+0x132>
  {
    if (cmd->OperationType == HAL_OSPI_OPTYPE_COMMON_CFG)
 800aaa2:	683b      	ldr	r3, [r7, #0]
 800aaa4:	681b      	ldr	r3, [r3, #0]
 800aaa6:	2b00      	cmp	r3, #0
 800aaa8:	d105      	bne.n	800aab6 <OSPI_ConfigCmd+0x132>
    {
      /* Configure the DLR register with the number of data */
      hospi->Instance->DLR = (cmd->NbData - 1U);
 800aaaa:	683b      	ldr	r3, [r7, #0]
 800aaac:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	681b      	ldr	r3, [r3, #0]
 800aab2:	3a01      	subs	r2, #1
 800aab4:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (cmd->InstructionMode != HAL_OSPI_INSTRUCTION_NONE)
 800aab6:	683b      	ldr	r3, [r7, #0]
 800aab8:	68db      	ldr	r3, [r3, #12]
 800aaba:	2b00      	cmp	r3, #0
 800aabc:	f000 8099 	beq.w	800abf2 <OSPI_ConfigCmd+0x26e>
  {
    if (cmd->AddressMode != HAL_OSPI_ADDRESS_NONE)
 800aac0:	683b      	ldr	r3, [r7, #0]
 800aac2:	69db      	ldr	r3, [r3, #28]
 800aac4:	2b00      	cmp	r3, #0
 800aac6:	d055      	beq.n	800ab74 <OSPI_ConfigCmd+0x1f0>
    {
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 800aac8:	683b      	ldr	r3, [r7, #0]
 800aaca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aacc:	2b00      	cmp	r3, #0
 800aace:	d01e      	beq.n	800ab0e <OSPI_ConfigCmd+0x18a>
      {
        /* ---- Command with instruction, address and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE  | OCTOSPI_CCR_IDTR  | OCTOSPI_CCR_ISIZE  |
 800aad0:	69bb      	ldr	r3, [r7, #24]
 800aad2:	681a      	ldr	r2, [r3, #0]
 800aad4:	4b67      	ldr	r3, [pc, #412]	; (800ac74 <OSPI_ConfigCmd+0x2f0>)
 800aad6:	4013      	ands	r3, r2
 800aad8:	683a      	ldr	r2, [r7, #0]
 800aada:	68d1      	ldr	r1, [r2, #12]
 800aadc:	683a      	ldr	r2, [r7, #0]
 800aade:	6952      	ldr	r2, [r2, #20]
 800aae0:	4311      	orrs	r1, r2
 800aae2:	683a      	ldr	r2, [r7, #0]
 800aae4:	6912      	ldr	r2, [r2, #16]
 800aae6:	4311      	orrs	r1, r2
 800aae8:	683a      	ldr	r2, [r7, #0]
 800aaea:	69d2      	ldr	r2, [r2, #28]
 800aaec:	4311      	orrs	r1, r2
 800aaee:	683a      	ldr	r2, [r7, #0]
 800aaf0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800aaf2:	4311      	orrs	r1, r2
 800aaf4:	683a      	ldr	r2, [r7, #0]
 800aaf6:	6a12      	ldr	r2, [r2, #32]
 800aaf8:	4311      	orrs	r1, r2
 800aafa:	683a      	ldr	r2, [r7, #0]
 800aafc:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800aafe:	4311      	orrs	r1, r2
 800ab00:	683a      	ldr	r2, [r7, #0]
 800ab02:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800ab04:	430a      	orrs	r2, r1
 800ab06:	431a      	orrs	r2, r3
 800ab08:	69bb      	ldr	r3, [r7, #24]
 800ab0a:	601a      	str	r2, [r3, #0]
 800ab0c:	e028      	b.n	800ab60 <OSPI_ConfigCmd+0x1dc>
      else
      {
        /* ---- Command with instruction and address ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE  | OCTOSPI_CCR_IDTR  | OCTOSPI_CCR_ISIZE  |
 800ab0e:	69bb      	ldr	r3, [r7, #24]
 800ab10:	681b      	ldr	r3, [r3, #0]
 800ab12:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800ab16:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800ab1a:	683a      	ldr	r2, [r7, #0]
 800ab1c:	68d1      	ldr	r1, [r2, #12]
 800ab1e:	683a      	ldr	r2, [r7, #0]
 800ab20:	6952      	ldr	r2, [r2, #20]
 800ab22:	4311      	orrs	r1, r2
 800ab24:	683a      	ldr	r2, [r7, #0]
 800ab26:	6912      	ldr	r2, [r2, #16]
 800ab28:	4311      	orrs	r1, r2
 800ab2a:	683a      	ldr	r2, [r7, #0]
 800ab2c:	69d2      	ldr	r2, [r2, #28]
 800ab2e:	4311      	orrs	r1, r2
 800ab30:	683a      	ldr	r2, [r7, #0]
 800ab32:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800ab34:	4311      	orrs	r1, r2
 800ab36:	683a      	ldr	r2, [r7, #0]
 800ab38:	6a12      	ldr	r2, [r2, #32]
 800ab3a:	430a      	orrs	r2, r1
 800ab3c:	431a      	orrs	r2, r3
 800ab3e:	69bb      	ldr	r3, [r7, #24]
 800ab40:	601a      	str	r2, [r3, #0]
                                OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE),
                   (cmd->InstructionMode | cmd->InstructionDtrMode | cmd->InstructionSize |
                    cmd->AddressMode     | cmd->AddressDtrMode     | cmd->AddressSize));

        /* The DHQC bit is linked with DDTR bit which should be activated */
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab46:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ab4a:	d109      	bne.n	800ab60 <OSPI_ConfigCmd+0x1dc>
            (cmd->InstructionDtrMode == HAL_OSPI_INSTRUCTION_DTR_ENABLE))
 800ab4c:	683b      	ldr	r3, [r7, #0]
 800ab4e:	695b      	ldr	r3, [r3, #20]
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 800ab50:	2b08      	cmp	r3, #8
 800ab52:	d105      	bne.n	800ab60 <OSPI_ConfigCmd+0x1dc>
        {
          MODIFY_REG((*ccr_reg), OCTOSPI_CCR_DDTR, HAL_OSPI_DATA_DTR_ENABLE);
 800ab54:	69bb      	ldr	r3, [r7, #24]
 800ab56:	681b      	ldr	r3, [r3, #0]
 800ab58:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800ab5c:	69bb      	ldr	r3, [r7, #24]
 800ab5e:	601a      	str	r2, [r3, #0]
        }
      }

      /* Configure the IR register with the instruction value */
      *ir_reg = cmd->Instruction;
 800ab60:	683b      	ldr	r3, [r7, #0]
 800ab62:	689a      	ldr	r2, [r3, #8]
 800ab64:	693b      	ldr	r3, [r7, #16]
 800ab66:	601a      	str	r2, [r3, #0]

      /* Configure the AR register with the address value */
      hospi->Instance->AR = cmd->Address;
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	681b      	ldr	r3, [r3, #0]
 800ab6c:	683a      	ldr	r2, [r7, #0]
 800ab6e:	6992      	ldr	r2, [r2, #24]
 800ab70:	649a      	str	r2, [r3, #72]	; 0x48
 800ab72:	e078      	b.n	800ac66 <OSPI_ConfigCmd+0x2e2>
    }
    else
    {
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 800ab74:	683b      	ldr	r3, [r7, #0]
 800ab76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab78:	2b00      	cmp	r3, #0
 800ab7a:	d017      	beq.n	800abac <OSPI_ConfigCmd+0x228>
      {
        /* ---- Command with instruction and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE | OCTOSPI_CCR_IDTR | OCTOSPI_CCR_ISIZE |
 800ab7c:	69bb      	ldr	r3, [r7, #24]
 800ab7e:	681b      	ldr	r3, [r3, #0]
 800ab80:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 800ab84:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800ab88:	683a      	ldr	r2, [r7, #0]
 800ab8a:	68d1      	ldr	r1, [r2, #12]
 800ab8c:	683a      	ldr	r2, [r7, #0]
 800ab8e:	6952      	ldr	r2, [r2, #20]
 800ab90:	4311      	orrs	r1, r2
 800ab92:	683a      	ldr	r2, [r7, #0]
 800ab94:	6912      	ldr	r2, [r2, #16]
 800ab96:	4311      	orrs	r1, r2
 800ab98:	683a      	ldr	r2, [r7, #0]
 800ab9a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800ab9c:	4311      	orrs	r1, r2
 800ab9e:	683a      	ldr	r2, [r7, #0]
 800aba0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800aba2:	430a      	orrs	r2, r1
 800aba4:	431a      	orrs	r2, r3
 800aba6:	69bb      	ldr	r3, [r7, #24]
 800aba8:	601a      	str	r2, [r3, #0]
 800abaa:	e01d      	b.n	800abe8 <OSPI_ConfigCmd+0x264>
      else
      {
        /* ---- Command with only instruction ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE | OCTOSPI_CCR_IDTR | OCTOSPI_CCR_ISIZE),
 800abac:	69bb      	ldr	r3, [r7, #24]
 800abae:	681b      	ldr	r3, [r3, #0]
 800abb0:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 800abb4:	683b      	ldr	r3, [r7, #0]
 800abb6:	68d9      	ldr	r1, [r3, #12]
 800abb8:	683b      	ldr	r3, [r7, #0]
 800abba:	695b      	ldr	r3, [r3, #20]
 800abbc:	4319      	orrs	r1, r3
 800abbe:	683b      	ldr	r3, [r7, #0]
 800abc0:	691b      	ldr	r3, [r3, #16]
 800abc2:	430b      	orrs	r3, r1
 800abc4:	431a      	orrs	r2, r3
 800abc6:	69bb      	ldr	r3, [r7, #24]
 800abc8:	601a      	str	r2, [r3, #0]
                   (cmd->InstructionMode | cmd->InstructionDtrMode | cmd->InstructionSize));

        /* The DHQC bit is linked with DDTR bit which should be activated */
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800abce:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800abd2:	d109      	bne.n	800abe8 <OSPI_ConfigCmd+0x264>
            (cmd->InstructionDtrMode == HAL_OSPI_INSTRUCTION_DTR_ENABLE))
 800abd4:	683b      	ldr	r3, [r7, #0]
 800abd6:	695b      	ldr	r3, [r3, #20]
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 800abd8:	2b08      	cmp	r3, #8
 800abda:	d105      	bne.n	800abe8 <OSPI_ConfigCmd+0x264>
        {
          MODIFY_REG((*ccr_reg), OCTOSPI_CCR_DDTR, HAL_OSPI_DATA_DTR_ENABLE);
 800abdc:	69bb      	ldr	r3, [r7, #24]
 800abde:	681b      	ldr	r3, [r3, #0]
 800abe0:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800abe4:	69bb      	ldr	r3, [r7, #24]
 800abe6:	601a      	str	r2, [r3, #0]
        }
      }

      /* Configure the IR register with the instruction value */
      *ir_reg = cmd->Instruction;
 800abe8:	683b      	ldr	r3, [r7, #0]
 800abea:	689a      	ldr	r2, [r3, #8]
 800abec:	693b      	ldr	r3, [r7, #16]
 800abee:	601a      	str	r2, [r3, #0]
 800abf0:	e039      	b.n	800ac66 <OSPI_ConfigCmd+0x2e2>

    }
  }
  else
  {
    if (cmd->AddressMode != HAL_OSPI_ADDRESS_NONE)
 800abf2:	683b      	ldr	r3, [r7, #0]
 800abf4:	69db      	ldr	r3, [r3, #28]
 800abf6:	2b00      	cmp	r3, #0
 800abf8:	d030      	beq.n	800ac5c <OSPI_ConfigCmd+0x2d8>
    {
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 800abfa:	683b      	ldr	r3, [r7, #0]
 800abfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800abfe:	2b00      	cmp	r3, #0
 800ac00:	d017      	beq.n	800ac32 <OSPI_ConfigCmd+0x2ae>
      {
        /* ---- Command with address and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE |
 800ac02:	69bb      	ldr	r3, [r7, #24]
 800ac04:	681b      	ldr	r3, [r3, #0]
 800ac06:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 800ac0a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800ac0e:	683a      	ldr	r2, [r7, #0]
 800ac10:	69d1      	ldr	r1, [r2, #28]
 800ac12:	683a      	ldr	r2, [r7, #0]
 800ac14:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800ac16:	4311      	orrs	r1, r2
 800ac18:	683a      	ldr	r2, [r7, #0]
 800ac1a:	6a12      	ldr	r2, [r2, #32]
 800ac1c:	4311      	orrs	r1, r2
 800ac1e:	683a      	ldr	r2, [r7, #0]
 800ac20:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800ac22:	4311      	orrs	r1, r2
 800ac24:	683a      	ldr	r2, [r7, #0]
 800ac26:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800ac28:	430a      	orrs	r2, r1
 800ac2a:	431a      	orrs	r2, r3
 800ac2c:	69bb      	ldr	r3, [r7, #24]
 800ac2e:	601a      	str	r2, [r3, #0]
 800ac30:	e00e      	b.n	800ac50 <OSPI_ConfigCmd+0x2cc>
      else
      {
        /* ---- Command with only address ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE),
 800ac32:	69bb      	ldr	r3, [r7, #24]
 800ac34:	681b      	ldr	r3, [r3, #0]
 800ac36:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800ac3a:	683b      	ldr	r3, [r7, #0]
 800ac3c:	69d9      	ldr	r1, [r3, #28]
 800ac3e:	683b      	ldr	r3, [r7, #0]
 800ac40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac42:	4319      	orrs	r1, r3
 800ac44:	683b      	ldr	r3, [r7, #0]
 800ac46:	6a1b      	ldr	r3, [r3, #32]
 800ac48:	430b      	orrs	r3, r1
 800ac4a:	431a      	orrs	r2, r3
 800ac4c:	69bb      	ldr	r3, [r7, #24]
 800ac4e:	601a      	str	r2, [r3, #0]
                   (cmd->AddressMode | cmd->AddressDtrMode | cmd->AddressSize));
      }

      /* Configure the AR register with the instruction value */
      hospi->Instance->AR = cmd->Address;
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	681b      	ldr	r3, [r3, #0]
 800ac54:	683a      	ldr	r2, [r7, #0]
 800ac56:	6992      	ldr	r2, [r2, #24]
 800ac58:	649a      	str	r2, [r3, #72]	; 0x48
 800ac5a:	e004      	b.n	800ac66 <OSPI_ConfigCmd+0x2e2>
    }
    else
    {
      /* ---- Invalid command configuration (no instruction, no address) ---- */
      status = HAL_ERROR;
 800ac5c:	2301      	movs	r3, #1
 800ac5e:	77fb      	strb	r3, [r7, #31]
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	2208      	movs	r2, #8
 800ac64:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }

  /* Return function status */
  return status;
 800ac66:	7ffb      	ldrb	r3, [r7, #31]
}
 800ac68:	4618      	mov	r0, r3
 800ac6a:	3724      	adds	r7, #36	; 0x24
 800ac6c:	46bd      	mov	sp, r7
 800ac6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac72:	4770      	bx	lr
 800ac74:	f0ffc0c0 	.word	0xf0ffc0c0

0800ac78 <OSPIM_GetConfig>:
  * @param  instance_nb : number of the instance
  * @param  cfg         : configuration of the IO Manager for the instance
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPIM_GetConfig(uint8_t instance_nb, OSPIM_CfgTypeDef *cfg)
{
 800ac78:	b480      	push	{r7}
 800ac7a:	b087      	sub	sp, #28
 800ac7c:	af00      	add	r7, sp, #0
 800ac7e:	4603      	mov	r3, r0
 800ac80:	6039      	str	r1, [r7, #0]
 800ac82:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 800ac84:	2300      	movs	r3, #0
 800ac86:	75fb      	strb	r3, [r7, #23]
  uint32_t reg;
  uint32_t value = 0U;
 800ac88:	2300      	movs	r3, #0
 800ac8a:	613b      	str	r3, [r7, #16]
  uint32_t index;

  if ((instance_nb == 0U) || (instance_nb > OSPI_NB_INSTANCE) || (cfg == NULL))
 800ac8c:	79fb      	ldrb	r3, [r7, #7]
 800ac8e:	2b00      	cmp	r3, #0
 800ac90:	d005      	beq.n	800ac9e <OSPIM_GetConfig+0x26>
 800ac92:	79fb      	ldrb	r3, [r7, #7]
 800ac94:	2b02      	cmp	r3, #2
 800ac96:	d802      	bhi.n	800ac9e <OSPIM_GetConfig+0x26>
 800ac98:	683b      	ldr	r3, [r7, #0]
 800ac9a:	2b00      	cmp	r3, #0
 800ac9c:	d102      	bne.n	800aca4 <OSPIM_GetConfig+0x2c>
  {
    /* Invalid parameter -> error returned */
    status = HAL_ERROR;
 800ac9e:	2301      	movs	r3, #1
 800aca0:	75fb      	strb	r3, [r7, #23]
 800aca2:	e098      	b.n	800add6 <OSPIM_GetConfig+0x15e>
  }
  else
  {
    /* Initialize the structure */
    cfg->ClkPort    = 0U;
 800aca4:	683b      	ldr	r3, [r7, #0]
 800aca6:	2200      	movs	r2, #0
 800aca8:	601a      	str	r2, [r3, #0]
    cfg->DQSPort    = 0U;
 800acaa:	683b      	ldr	r3, [r7, #0]
 800acac:	2200      	movs	r2, #0
 800acae:	605a      	str	r2, [r3, #4]
    cfg->NCSPort    = 0U;
 800acb0:	683b      	ldr	r3, [r7, #0]
 800acb2:	2200      	movs	r2, #0
 800acb4:	609a      	str	r2, [r3, #8]
    cfg->IOLowPort  = 0U;
 800acb6:	683b      	ldr	r3, [r7, #0]
 800acb8:	2200      	movs	r2, #0
 800acba:	60da      	str	r2, [r3, #12]
    cfg->IOHighPort = 0U;
 800acbc:	683b      	ldr	r3, [r7, #0]
 800acbe:	2200      	movs	r2, #0
 800acc0:	611a      	str	r2, [r3, #16]

    if (instance_nb == 2U)
 800acc2:	79fb      	ldrb	r3, [r7, #7]
 800acc4:	2b02      	cmp	r3, #2
 800acc6:	d10b      	bne.n	800ace0 <OSPIM_GetConfig+0x68>
    {
      if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) == 0U)
 800acc8:	4b46      	ldr	r3, [pc, #280]	; (800ade4 <OSPIM_GetConfig+0x16c>)
 800acca:	681b      	ldr	r3, [r3, #0]
 800accc:	f003 0301 	and.w	r3, r3, #1
 800acd0:	2b00      	cmp	r3, #0
 800acd2:	d102      	bne.n	800acda <OSPIM_GetConfig+0x62>
      {
        value = (OCTOSPIM_PCR_CLKSRC | OCTOSPIM_PCR_DQSSRC | OCTOSPIM_PCR_NCSSRC
 800acd4:	4b44      	ldr	r3, [pc, #272]	; (800ade8 <OSPIM_GetConfig+0x170>)
 800acd6:	613b      	str	r3, [r7, #16]
 800acd8:	e002      	b.n	800ace0 <OSPIM_GetConfig+0x68>
                 | OCTOSPIM_PCR_IOLSRC_1 | OCTOSPIM_PCR_IOHSRC_1);
      }
      else
      {
        value = OCTOSPIM_PCR_NCSSRC;
 800acda:	f44f 7300 	mov.w	r3, #512	; 0x200
 800acde:	613b      	str	r3, [r7, #16]
      }
    }

    /* Get the information about the instance */
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 800ace0:	2300      	movs	r3, #0
 800ace2:	60fb      	str	r3, [r7, #12]
 800ace4:	e074      	b.n	800add0 <OSPIM_GetConfig+0x158>
    {
      reg = OCTOSPIM->PCR[index];
 800ace6:	4a3f      	ldr	r2, [pc, #252]	; (800ade4 <OSPIM_GetConfig+0x16c>)
 800ace8:	68fb      	ldr	r3, [r7, #12]
 800acea:	009b      	lsls	r3, r3, #2
 800acec:	4413      	add	r3, r2
 800acee:	685b      	ldr	r3, [r3, #4]
 800acf0:	60bb      	str	r3, [r7, #8]

      if ((reg & OCTOSPIM_PCR_CLKEN) != 0U)
 800acf2:	68bb      	ldr	r3, [r7, #8]
 800acf4:	f003 0301 	and.w	r3, r3, #1
 800acf8:	2b00      	cmp	r3, #0
 800acfa:	d00a      	beq.n	800ad12 <OSPIM_GetConfig+0x9a>
      {
        /* The clock is enabled on this port */
        if ((reg & OCTOSPIM_PCR_CLKSRC) == (value & OCTOSPIM_PCR_CLKSRC))
 800acfc:	68ba      	ldr	r2, [r7, #8]
 800acfe:	693b      	ldr	r3, [r7, #16]
 800ad00:	4053      	eors	r3, r2
 800ad02:	f003 0302 	and.w	r3, r3, #2
 800ad06:	2b00      	cmp	r3, #0
 800ad08:	d103      	bne.n	800ad12 <OSPIM_GetConfig+0x9a>
        {
          /* The clock correspond to the instance passed as parameter */
          cfg->ClkPort = index + 1U;
 800ad0a:	68fb      	ldr	r3, [r7, #12]
 800ad0c:	1c5a      	adds	r2, r3, #1
 800ad0e:	683b      	ldr	r3, [r7, #0]
 800ad10:	601a      	str	r2, [r3, #0]
        }
      }

      if ((reg & OCTOSPIM_PCR_DQSEN) != 0U)
 800ad12:	68bb      	ldr	r3, [r7, #8]
 800ad14:	f003 0310 	and.w	r3, r3, #16
 800ad18:	2b00      	cmp	r3, #0
 800ad1a:	d00a      	beq.n	800ad32 <OSPIM_GetConfig+0xba>
      {
        /* The DQS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_DQSSRC) == (value & OCTOSPIM_PCR_DQSSRC))
 800ad1c:	68ba      	ldr	r2, [r7, #8]
 800ad1e:	693b      	ldr	r3, [r7, #16]
 800ad20:	4053      	eors	r3, r2
 800ad22:	f003 0320 	and.w	r3, r3, #32
 800ad26:	2b00      	cmp	r3, #0
 800ad28:	d103      	bne.n	800ad32 <OSPIM_GetConfig+0xba>
        {
          /* The DQS correspond to the instance passed as parameter */
          cfg->DQSPort = index + 1U;
 800ad2a:	68fb      	ldr	r3, [r7, #12]
 800ad2c:	1c5a      	adds	r2, r3, #1
 800ad2e:	683b      	ldr	r3, [r7, #0]
 800ad30:	605a      	str	r2, [r3, #4]
        }
      }

      if ((reg & OCTOSPIM_PCR_NCSEN) != 0U)
 800ad32:	68bb      	ldr	r3, [r7, #8]
 800ad34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ad38:	2b00      	cmp	r3, #0
 800ad3a:	d00a      	beq.n	800ad52 <OSPIM_GetConfig+0xda>
      {
        /* The nCS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_NCSSRC) == (value & OCTOSPIM_PCR_NCSSRC))
 800ad3c:	68ba      	ldr	r2, [r7, #8]
 800ad3e:	693b      	ldr	r3, [r7, #16]
 800ad40:	4053      	eors	r3, r2
 800ad42:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800ad46:	2b00      	cmp	r3, #0
 800ad48:	d103      	bne.n	800ad52 <OSPIM_GetConfig+0xda>
        {
          /* The nCS correspond to the instance passed as parameter */
          cfg->NCSPort = index + 1U;
 800ad4a:	68fb      	ldr	r3, [r7, #12]
 800ad4c:	1c5a      	adds	r2, r3, #1
 800ad4e:	683b      	ldr	r3, [r7, #0]
 800ad50:	609a      	str	r2, [r3, #8]
        }
      }

      if ((reg & OCTOSPIM_PCR_IOLEN) != 0U)
 800ad52:	68bb      	ldr	r3, [r7, #8]
 800ad54:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ad58:	2b00      	cmp	r3, #0
 800ad5a:	d018      	beq.n	800ad8e <OSPIM_GetConfig+0x116>
      {
        /* The IO Low is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOLSRC_1) == (value & OCTOSPIM_PCR_IOLSRC_1))
 800ad5c:	68ba      	ldr	r2, [r7, #8]
 800ad5e:	693b      	ldr	r3, [r7, #16]
 800ad60:	4053      	eors	r3, r2
 800ad62:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800ad66:	2b00      	cmp	r3, #0
 800ad68:	d111      	bne.n	800ad8e <OSPIM_GetConfig+0x116>
        {
          /* The IO Low correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOLSRC_0) == 0U)
 800ad6a:	68bb      	ldr	r3, [r7, #8]
 800ad6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ad70:	2b00      	cmp	r3, #0
 800ad72:	d106      	bne.n	800ad82 <OSPIM_GetConfig+0x10a>
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOLEN | (index + 1U));
 800ad74:	68fb      	ldr	r3, [r7, #12]
 800ad76:	3301      	adds	r3, #1
 800ad78:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800ad7c:	683b      	ldr	r3, [r7, #0]
 800ad7e:	60da      	str	r2, [r3, #12]
 800ad80:	e005      	b.n	800ad8e <OSPIM_GetConfig+0x116>
          }
          else
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOHEN | (index + 1U));
 800ad82:	68fb      	ldr	r3, [r7, #12]
 800ad84:	3301      	adds	r3, #1
 800ad86:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 800ad8a:	683b      	ldr	r3, [r7, #0]
 800ad8c:	60da      	str	r2, [r3, #12]
          }
        }
      }

      if ((reg & OCTOSPIM_PCR_IOHEN) != 0U)
 800ad8e:	68bb      	ldr	r3, [r7, #8]
 800ad90:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800ad94:	2b00      	cmp	r3, #0
 800ad96:	d018      	beq.n	800adca <OSPIM_GetConfig+0x152>
      {
        /* The IO High is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOHSRC_1) == (value & OCTOSPIM_PCR_IOHSRC_1))
 800ad98:	68ba      	ldr	r2, [r7, #8]
 800ad9a:	693b      	ldr	r3, [r7, #16]
 800ad9c:	4053      	eors	r3, r2
 800ad9e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800ada2:	2b00      	cmp	r3, #0
 800ada4:	d111      	bne.n	800adca <OSPIM_GetConfig+0x152>
        {
          /* The IO High correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOHSRC_0) == 0U)
 800ada6:	68bb      	ldr	r3, [r7, #8]
 800ada8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800adac:	2b00      	cmp	r3, #0
 800adae:	d106      	bne.n	800adbe <OSPIM_GetConfig+0x146>
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOLEN | (index + 1U));
 800adb0:	68fb      	ldr	r3, [r7, #12]
 800adb2:	3301      	adds	r3, #1
 800adb4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800adb8:	683b      	ldr	r3, [r7, #0]
 800adba:	611a      	str	r2, [r3, #16]
 800adbc:	e005      	b.n	800adca <OSPIM_GetConfig+0x152>
          }
          else
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOHEN | (index + 1U));
 800adbe:	68fb      	ldr	r3, [r7, #12]
 800adc0:	3301      	adds	r3, #1
 800adc2:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 800adc6:	683b      	ldr	r3, [r7, #0]
 800adc8:	611a      	str	r2, [r3, #16]
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 800adca:	68fb      	ldr	r3, [r7, #12]
 800adcc:	3301      	adds	r3, #1
 800adce:	60fb      	str	r3, [r7, #12]
 800add0:	68fb      	ldr	r3, [r7, #12]
 800add2:	2b01      	cmp	r3, #1
 800add4:	d987      	bls.n	800ace6 <OSPIM_GetConfig+0x6e>
      }
    }
  }

  /* Return function status */
  return status;
 800add6:	7dfb      	ldrb	r3, [r7, #23]
}
 800add8:	4618      	mov	r0, r3
 800adda:	371c      	adds	r7, #28
 800addc:	46bd      	mov	sp, r7
 800adde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ade2:	4770      	bx	lr
 800ade4:	420c4000 	.word	0x420c4000
 800ade8:	04040222 	.word	0x04040222

0800adec <HAL_OSPI_DLYB_SetConfig>:
  * @param  hospi   : OSPI handle.
  * @param  pdlyb_cfg: Pointer to DLYB configuration structure.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_OSPI_DLYB_SetConfig(OSPI_HandleTypeDef *hospi, HAL_OSPI_DLYB_CfgTypeDef  *pdlyb_cfg)
{
 800adec:	b580      	push	{r7, lr}
 800adee:	b084      	sub	sp, #16
 800adf0:	af00      	add	r7, sp, #0
 800adf2:	6078      	str	r0, [r7, #4]
 800adf4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 800adf6:	2301      	movs	r3, #1
 800adf8:	73fb      	strb	r3, [r7, #15]

  /* Enable OCTOSPI Free Running Clock (mandatory) */
  SET_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	681b      	ldr	r3, [r3, #0]
 800adfe:	689a      	ldr	r2, [r3, #8]
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	681b      	ldr	r3, [r3, #0]
 800ae04:	f042 0202 	orr.w	r2, r2, #2
 800ae08:	609a      	str	r2, [r3, #8]

  /* Update OCTOSPI state */
  hospi->State = HAL_OSPI_STATE_BUSY_CMD;
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	2208      	movs	r2, #8
 800ae0e:	651a      	str	r2, [r3, #80]	; 0x50

  if (hospi->Instance == OCTOSPI1)
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	681b      	ldr	r3, [r3, #0]
 800ae14:	4a15      	ldr	r2, [pc, #84]	; (800ae6c <HAL_OSPI_DLYB_SetConfig+0x80>)
 800ae16:	4293      	cmp	r3, r2
 800ae18:	d109      	bne.n	800ae2e <HAL_OSPI_DLYB_SetConfig+0x42>
  {
    /* Enable the DelayBlock */
    LL_DLYB_Enable(DLYB_OCTOSPI1);
 800ae1a:	4815      	ldr	r0, [pc, #84]	; (800ae70 <HAL_OSPI_DLYB_SetConfig+0x84>)
 800ae1c:	f7fe fe46 	bl	8009aac <LL_DLYB_Enable>

    /* Set the Delay Block configuration */
    LL_DLYB_SetDelay(DLYB_OCTOSPI1, pdlyb_cfg);
 800ae20:	6839      	ldr	r1, [r7, #0]
 800ae22:	4813      	ldr	r0, [pc, #76]	; (800ae70 <HAL_OSPI_DLYB_SetConfig+0x84>)
 800ae24:	f005 fabc 	bl	80103a0 <LL_DLYB_SetDelay>
    status = HAL_OK;
 800ae28:	2300      	movs	r3, #0
 800ae2a:	73fb      	strb	r3, [r7, #15]
 800ae2c:	e00d      	b.n	800ae4a <HAL_OSPI_DLYB_SetConfig+0x5e>
  }

  else if (hospi->Instance == OCTOSPI2)
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	681b      	ldr	r3, [r3, #0]
 800ae32:	4a10      	ldr	r2, [pc, #64]	; (800ae74 <HAL_OSPI_DLYB_SetConfig+0x88>)
 800ae34:	4293      	cmp	r3, r2
 800ae36:	d108      	bne.n	800ae4a <HAL_OSPI_DLYB_SetConfig+0x5e>
  {
    /* Enable the DelayBlock */
    LL_DLYB_Enable(DLYB_OCTOSPI2);
 800ae38:	480f      	ldr	r0, [pc, #60]	; (800ae78 <HAL_OSPI_DLYB_SetConfig+0x8c>)
 800ae3a:	f7fe fe37 	bl	8009aac <LL_DLYB_Enable>

    /* Set the Delay Block configuration */
    LL_DLYB_SetDelay(DLYB_OCTOSPI2, pdlyb_cfg);
 800ae3e:	6839      	ldr	r1, [r7, #0]
 800ae40:	480d      	ldr	r0, [pc, #52]	; (800ae78 <HAL_OSPI_DLYB_SetConfig+0x8c>)
 800ae42:	f005 faad 	bl	80103a0 <LL_DLYB_SetDelay>
    status = HAL_OK;
 800ae46:	2300      	movs	r3, #0
 800ae48:	73fb      	strb	r3, [r7, #15]
  {
    /* Nothing to do */
  }

  /* Abort the current OCTOSPI operation if exist */
  (void)HAL_OSPI_Abort(hospi);
 800ae4a:	6878      	ldr	r0, [r7, #4]
 800ae4c:	f7fe ffe4 	bl	8009e18 <HAL_OSPI_Abort>

  /* Disable Free Running Clock */
  CLEAR_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	681b      	ldr	r3, [r3, #0]
 800ae54:	689a      	ldr	r2, [r3, #8]
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	681b      	ldr	r3, [r3, #0]
 800ae5a:	f022 0202 	bic.w	r2, r2, #2
 800ae5e:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return status;
 800ae60:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae62:	4618      	mov	r0, r3
 800ae64:	3710      	adds	r7, #16
 800ae66:	46bd      	mov	sp, r7
 800ae68:	bd80      	pop	{r7, pc}
 800ae6a:	bf00      	nop
 800ae6c:	420d1400 	.word	0x420d1400
 800ae70:	420cf000 	.word	0x420cf000
 800ae74:	420d2400 	.word	0x420d2400
 800ae78:	420cf400 	.word	0x420cf400

0800ae7c <HAL_OSPI_DLYB_GetConfig>:
  * @param  hospi   : OSPI handle.
  * @param  pdlyb_cfg: Pointer to DLYB configuration structure.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_OSPI_DLYB_GetConfig(OSPI_HandleTypeDef *hospi, HAL_OSPI_DLYB_CfgTypeDef  *pdlyb_cfg)
{
 800ae7c:	b580      	push	{r7, lr}
 800ae7e:	b084      	sub	sp, #16
 800ae80:	af00      	add	r7, sp, #0
 800ae82:	6078      	str	r0, [r7, #4]
 800ae84:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 800ae86:	2301      	movs	r3, #1
 800ae88:	73fb      	strb	r3, [r7, #15]

  if (hospi->Instance == OCTOSPI1)
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	681b      	ldr	r3, [r3, #0]
 800ae8e:	4a0d      	ldr	r2, [pc, #52]	; (800aec4 <HAL_OSPI_DLYB_GetConfig+0x48>)
 800ae90:	4293      	cmp	r3, r2
 800ae92:	d106      	bne.n	800aea2 <HAL_OSPI_DLYB_GetConfig+0x26>
  {
    LL_DLYB_GetDelay(DLYB_OCTOSPI1, pdlyb_cfg);
 800ae94:	6839      	ldr	r1, [r7, #0]
 800ae96:	480c      	ldr	r0, [pc, #48]	; (800aec8 <HAL_OSPI_DLYB_GetConfig+0x4c>)
 800ae98:	f005 faa1 	bl	80103de <LL_DLYB_GetDelay>
    status = HAL_OK;
 800ae9c:	2300      	movs	r3, #0
 800ae9e:	73fb      	strb	r3, [r7, #15]
 800aea0:	e00a      	b.n	800aeb8 <HAL_OSPI_DLYB_GetConfig+0x3c>
  }
  else if (hospi->Instance == OCTOSPI2)
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	681b      	ldr	r3, [r3, #0]
 800aea6:	4a09      	ldr	r2, [pc, #36]	; (800aecc <HAL_OSPI_DLYB_GetConfig+0x50>)
 800aea8:	4293      	cmp	r3, r2
 800aeaa:	d105      	bne.n	800aeb8 <HAL_OSPI_DLYB_GetConfig+0x3c>
  {
    LL_DLYB_GetDelay(DLYB_OCTOSPI2, pdlyb_cfg);
 800aeac:	6839      	ldr	r1, [r7, #0]
 800aeae:	4808      	ldr	r0, [pc, #32]	; (800aed0 <HAL_OSPI_DLYB_GetConfig+0x54>)
 800aeb0:	f005 fa95 	bl	80103de <LL_DLYB_GetDelay>
    status = HAL_OK;
 800aeb4:	2300      	movs	r3, #0
 800aeb6:	73fb      	strb	r3, [r7, #15]
  {
    /* Nothing to do */
  }

  /* Return function status */
  return status;
 800aeb8:	7bfb      	ldrb	r3, [r7, #15]
}
 800aeba:	4618      	mov	r0, r3
 800aebc:	3710      	adds	r7, #16
 800aebe:	46bd      	mov	sp, r7
 800aec0:	bd80      	pop	{r7, pc}
 800aec2:	bf00      	nop
 800aec4:	420d1400 	.word	0x420d1400
 800aec8:	420cf000 	.word	0x420cf000
 800aecc:	420d2400 	.word	0x420d2400
 800aed0:	420cf400 	.word	0x420cf400

0800aed4 <HAL_OSPI_DLYB_GetClockPeriod>:
  * @brief  Get the Delay line length value.
  * @param  hospi   : OSPI handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_OSPI_DLYB_GetClockPeriod(OSPI_HandleTypeDef *hospi, HAL_OSPI_DLYB_CfgTypeDef  *pdlyb_cfg)
{
 800aed4:	b580      	push	{r7, lr}
 800aed6:	b084      	sub	sp, #16
 800aed8:	af00      	add	r7, sp, #0
 800aeda:	6078      	str	r0, [r7, #4]
 800aedc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 800aede:	2301      	movs	r3, #1
 800aee0:	73fb      	strb	r3, [r7, #15]

  /* Enable OCTOSPI Free Running Clock (mandatory) */
  SET_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	681b      	ldr	r3, [r3, #0]
 800aee6:	689a      	ldr	r2, [r3, #8]
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	681b      	ldr	r3, [r3, #0]
 800aeec:	f042 0202 	orr.w	r2, r2, #2
 800aef0:	609a      	str	r2, [r3, #8]

  /* Update OCTOSPI state */
  hospi->State = HAL_OSPI_STATE_BUSY_CMD;
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	2208      	movs	r2, #8
 800aef6:	651a      	str	r2, [r3, #80]	; 0x50

  if (hospi->Instance == OCTOSPI1)
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	681b      	ldr	r3, [r3, #0]
 800aefc:	4a1b      	ldr	r2, [pc, #108]	; (800af6c <HAL_OSPI_DLYB_GetClockPeriod+0x98>)
 800aefe:	4293      	cmp	r3, r2
 800af00:	d10f      	bne.n	800af22 <HAL_OSPI_DLYB_GetClockPeriod+0x4e>
  {
    /* Enable the DelayBlock */
    LL_DLYB_Enable(DLYB_OCTOSPI1);
 800af02:	481b      	ldr	r0, [pc, #108]	; (800af70 <HAL_OSPI_DLYB_GetClockPeriod+0x9c>)
 800af04:	f7fe fdd2 	bl	8009aac <LL_DLYB_Enable>

    /* try to detect Period */
    if (LL_DLYB_GetClockPeriod(DLYB_OCTOSPI1, pdlyb_cfg) == (uint32_t)SUCCESS)
 800af08:	6839      	ldr	r1, [r7, #0]
 800af0a:	4819      	ldr	r0, [pc, #100]	; (800af70 <HAL_OSPI_DLYB_GetClockPeriod+0x9c>)
 800af0c:	f005 fa80 	bl	8010410 <LL_DLYB_GetClockPeriod>
 800af10:	4603      	mov	r3, r0
 800af12:	2b00      	cmp	r3, #0
 800af14:	d101      	bne.n	800af1a <HAL_OSPI_DLYB_GetClockPeriod+0x46>
    {
      status = HAL_OK;
 800af16:	2300      	movs	r3, #0
 800af18:	73fb      	strb	r3, [r7, #15]
    }

    /* Disable the DelayBlock */
    LL_DLYB_Disable(DLYB_OCTOSPI1);
 800af1a:	4815      	ldr	r0, [pc, #84]	; (800af70 <HAL_OSPI_DLYB_GetClockPeriod+0x9c>)
 800af1c:	f7fe fdd6 	bl	8009acc <LL_DLYB_Disable>
 800af20:	e013      	b.n	800af4a <HAL_OSPI_DLYB_GetClockPeriod+0x76>
  }

  else if (hospi->Instance == OCTOSPI2)
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	681b      	ldr	r3, [r3, #0]
 800af26:	4a13      	ldr	r2, [pc, #76]	; (800af74 <HAL_OSPI_DLYB_GetClockPeriod+0xa0>)
 800af28:	4293      	cmp	r3, r2
 800af2a:	d10e      	bne.n	800af4a <HAL_OSPI_DLYB_GetClockPeriod+0x76>
  {
    /* Enable the DelayBlock */
    LL_DLYB_Enable(DLYB_OCTOSPI2);
 800af2c:	4812      	ldr	r0, [pc, #72]	; (800af78 <HAL_OSPI_DLYB_GetClockPeriod+0xa4>)
 800af2e:	f7fe fdbd 	bl	8009aac <LL_DLYB_Enable>

    /* try to detect Period */
    if (LL_DLYB_GetClockPeriod(DLYB_OCTOSPI2, pdlyb_cfg) == (uint32_t)SUCCESS)
 800af32:	6839      	ldr	r1, [r7, #0]
 800af34:	4810      	ldr	r0, [pc, #64]	; (800af78 <HAL_OSPI_DLYB_GetClockPeriod+0xa4>)
 800af36:	f005 fa6b 	bl	8010410 <LL_DLYB_GetClockPeriod>
 800af3a:	4603      	mov	r3, r0
 800af3c:	2b00      	cmp	r3, #0
 800af3e:	d101      	bne.n	800af44 <HAL_OSPI_DLYB_GetClockPeriod+0x70>
    {
      status = HAL_OK;
 800af40:	2300      	movs	r3, #0
 800af42:	73fb      	strb	r3, [r7, #15]
    }

    /* Disable the DelayBlock */
    LL_DLYB_Disable(DLYB_OCTOSPI2);
 800af44:	480c      	ldr	r0, [pc, #48]	; (800af78 <HAL_OSPI_DLYB_GetClockPeriod+0xa4>)
 800af46:	f7fe fdc1 	bl	8009acc <LL_DLYB_Disable>
  {
    /* Nothing to do */
  }

  /* Abort the current OctoSPI operation if exist */
  (void)HAL_OSPI_Abort(hospi);
 800af4a:	6878      	ldr	r0, [r7, #4]
 800af4c:	f7fe ff64 	bl	8009e18 <HAL_OSPI_Abort>

  /* Disable Free Running Clock */
  CLEAR_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	681b      	ldr	r3, [r3, #0]
 800af54:	689a      	ldr	r2, [r3, #8]
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	681b      	ldr	r3, [r3, #0]
 800af5a:	f022 0202 	bic.w	r2, r2, #2
 800af5e:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return status;
 800af60:	7bfb      	ldrb	r3, [r7, #15]
}
 800af62:	4618      	mov	r0, r3
 800af64:	3710      	adds	r7, #16
 800af66:	46bd      	mov	sp, r7
 800af68:	bd80      	pop	{r7, pc}
 800af6a:	bf00      	nop
 800af6c:	420d1400 	.word	0x420d1400
 800af70:	420cf000 	.word	0x420cf000
 800af74:	420d2400 	.word	0x420d2400
 800af78:	420cf400 	.word	0x420cf400

0800af7c <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800af7c:	b480      	push	{r7}
 800af7e:	b085      	sub	sp, #20
 800af80:	af00      	add	r7, sp, #0
 800af82:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 800af84:	4b34      	ldr	r3, [pc, #208]	; (800b058 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 800af86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800af88:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800af8c:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 800af8e:	68ba      	ldr	r2, [r7, #8]
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	429a      	cmp	r2, r3
 800af94:	d101      	bne.n	800af9a <HAL_PWREx_ControlVoltageScaling+0x1e>
  {
    return HAL_OK;
 800af96:	2300      	movs	r3, #0
 800af98:	e057      	b.n	800b04a <HAL_PWREx_ControlVoltageScaling+0xce>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800afa0:	d90a      	bls.n	800afb8 <HAL_PWREx_ControlVoltageScaling+0x3c>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 800afa2:	4b2d      	ldr	r3, [pc, #180]	; (800b058 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 800afa4:	68db      	ldr	r3, [r3, #12]
 800afa6:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	4313      	orrs	r3, r2
 800afae:	4a2a      	ldr	r2, [pc, #168]	; (800b058 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 800afb0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800afb4:	60d3      	str	r3, [r2, #12]
 800afb6:	e007      	b.n	800afc8 <HAL_PWREx_ControlVoltageScaling+0x4c>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 800afb8:	4b27      	ldr	r3, [pc, #156]	; (800b058 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 800afba:	68db      	ldr	r3, [r3, #12]
 800afbc:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800afc0:	4925      	ldr	r1, [pc, #148]	; (800b058 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	4313      	orrs	r3, r2
 800afc6:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 800afc8:	4b24      	ldr	r3, [pc, #144]	; (800b05c <HAL_PWREx_ControlVoltageScaling+0xe0>)
 800afca:	681b      	ldr	r3, [r3, #0]
 800afcc:	4a24      	ldr	r2, [pc, #144]	; (800b060 <HAL_PWREx_ControlVoltageScaling+0xe4>)
 800afce:	fba2 2303 	umull	r2, r3, r2, r3
 800afd2:	099b      	lsrs	r3, r3, #6
 800afd4:	2232      	movs	r2, #50	; 0x32
 800afd6:	fb02 f303 	mul.w	r3, r2, r3
 800afda:	4a21      	ldr	r2, [pc, #132]	; (800b060 <HAL_PWREx_ControlVoltageScaling+0xe4>)
 800afdc:	fba2 2303 	umull	r2, r3, r2, r3
 800afe0:	099b      	lsrs	r3, r3, #6
 800afe2:	3301      	adds	r3, #1
 800afe4:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 800afe6:	e002      	b.n	800afee <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    timeout--;
 800afe8:	68fb      	ldr	r3, [r7, #12]
 800afea:	3b01      	subs	r3, #1
 800afec:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 800afee:	4b1a      	ldr	r3, [pc, #104]	; (800b058 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 800aff0:	68db      	ldr	r3, [r3, #12]
 800aff2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800aff6:	2b00      	cmp	r3, #0
 800aff8:	d102      	bne.n	800b000 <HAL_PWREx_ControlVoltageScaling+0x84>
 800affa:	68fb      	ldr	r3, [r7, #12]
 800affc:	2b00      	cmp	r3, #0
 800affe:	d1f3      	bne.n	800afe8 <HAL_PWREx_ControlVoltageScaling+0x6c>
  }

  /* Check time out */
  if (timeout != 0U)
 800b000:	68fb      	ldr	r3, [r7, #12]
 800b002:	2b00      	cmp	r3, #0
 800b004:	d01b      	beq.n	800b03e <HAL_PWREx_ControlVoltageScaling+0xc2>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 800b006:	4b15      	ldr	r3, [pc, #84]	; (800b05c <HAL_PWREx_ControlVoltageScaling+0xe0>)
 800b008:	681b      	ldr	r3, [r3, #0]
 800b00a:	4a15      	ldr	r2, [pc, #84]	; (800b060 <HAL_PWREx_ControlVoltageScaling+0xe4>)
 800b00c:	fba2 2303 	umull	r2, r3, r2, r3
 800b010:	099b      	lsrs	r3, r3, #6
 800b012:	2232      	movs	r2, #50	; 0x32
 800b014:	fb02 f303 	mul.w	r3, r2, r3
 800b018:	4a11      	ldr	r2, [pc, #68]	; (800b060 <HAL_PWREx_ControlVoltageScaling+0xe4>)
 800b01a:	fba2 2303 	umull	r2, r3, r2, r3
 800b01e:	099b      	lsrs	r3, r3, #6
 800b020:	3301      	adds	r3, #1
 800b022:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 800b024:	e002      	b.n	800b02c <HAL_PWREx_ControlVoltageScaling+0xb0>
    {
      timeout--;
 800b026:	68fb      	ldr	r3, [r7, #12]
 800b028:	3b01      	subs	r3, #1
 800b02a:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 800b02c:	4b0a      	ldr	r3, [pc, #40]	; (800b058 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 800b02e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b030:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b034:	2b00      	cmp	r3, #0
 800b036:	d102      	bne.n	800b03e <HAL_PWREx_ControlVoltageScaling+0xc2>
 800b038:	68fb      	ldr	r3, [r7, #12]
 800b03a:	2b00      	cmp	r3, #0
 800b03c:	d1f3      	bne.n	800b026 <HAL_PWREx_ControlVoltageScaling+0xaa>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 800b03e:	68fb      	ldr	r3, [r7, #12]
 800b040:	2b00      	cmp	r3, #0
 800b042:	d101      	bne.n	800b048 <HAL_PWREx_ControlVoltageScaling+0xcc>
  {
    return HAL_TIMEOUT;
 800b044:	2303      	movs	r3, #3
 800b046:	e000      	b.n	800b04a <HAL_PWREx_ControlVoltageScaling+0xce>
  }

  return HAL_OK;
 800b048:	2300      	movs	r3, #0
}
 800b04a:	4618      	mov	r0, r3
 800b04c:	3714      	adds	r7, #20
 800b04e:	46bd      	mov	sp, r7
 800b050:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b054:	4770      	bx	lr
 800b056:	bf00      	nop
 800b058:	46020800 	.word	0x46020800
 800b05c:	20000004 	.word	0x20000004
 800b060:	10624dd3 	.word	0x10624dd3

0800b064 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800b064:	b480      	push	{r7}
 800b066:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 800b068:	4b04      	ldr	r3, [pc, #16]	; (800b07c <HAL_PWREx_GetVoltageRange+0x18>)
 800b06a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b06c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 800b070:	4618      	mov	r0, r3
 800b072:	46bd      	mov	sp, r7
 800b074:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b078:	4770      	bx	lr
 800b07a:	bf00      	nop
 800b07c:	46020800 	.word	0x46020800

0800b080 <HAL_PWREx_ConfigSupply>:
  *                        @arg PWR_LDO_SUPPLY  : The LDO regulator supplies the Vcore Power Domains.
  *                        @arg PWR_SMPS_SUPPLY : The SMPS regulator supplies the Vcore Power Domains.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply(uint32_t SupplySource)
{
 800b080:	b480      	push	{r7}
 800b082:	b085      	sub	sp, #20
 800b084:	af00      	add	r7, sp, #0
 800b086:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_SUPPLY(SupplySource));

  /* Set maximum time out */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 800b088:	4b22      	ldr	r3, [pc, #136]	; (800b114 <HAL_PWREx_ConfigSupply+0x94>)
 800b08a:	681b      	ldr	r3, [r3, #0]
 800b08c:	4a22      	ldr	r2, [pc, #136]	; (800b118 <HAL_PWREx_ConfigSupply+0x98>)
 800b08e:	fba2 2303 	umull	r2, r3, r2, r3
 800b092:	099b      	lsrs	r3, r3, #6
 800b094:	2232      	movs	r2, #50	; 0x32
 800b096:	fb02 f303 	mul.w	r3, r2, r3
 800b09a:	4a1f      	ldr	r2, [pc, #124]	; (800b118 <HAL_PWREx_ConfigSupply+0x98>)
 800b09c:	fba2 2303 	umull	r2, r3, r2, r3
 800b0a0:	099b      	lsrs	r3, r3, #6
 800b0a2:	3301      	adds	r3, #1
 800b0a4:	60fb      	str	r3, [r7, #12]

  /* Configure the LDO as system regulator supply */
  if (SupplySource == PWR_LDO_SUPPLY)
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	2b00      	cmp	r3, #0
 800b0aa:	d113      	bne.n	800b0d4 <HAL_PWREx_ConfigSupply+0x54>
  {
    /* Set the power supply configuration */
    CLEAR_BIT(PWR->CR3, PWR_CR3_REGSEL);
 800b0ac:	4b1b      	ldr	r3, [pc, #108]	; (800b11c <HAL_PWREx_ConfigSupply+0x9c>)
 800b0ae:	689b      	ldr	r3, [r3, #8]
 800b0b0:	4a1a      	ldr	r2, [pc, #104]	; (800b11c <HAL_PWREx_ConfigSupply+0x9c>)
 800b0b2:	f023 0302 	bic.w	r3, r3, #2
 800b0b6:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 800b0b8:	e002      	b.n	800b0c0 <HAL_PWREx_ConfigSupply+0x40>
    {
      timeout--;
 800b0ba:	68fb      	ldr	r3, [r7, #12]
 800b0bc:	3b01      	subs	r3, #1
 800b0be:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 800b0c0:	4b16      	ldr	r3, [pc, #88]	; (800b11c <HAL_PWREx_ConfigSupply+0x9c>)
 800b0c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b0c4:	f003 0302 	and.w	r3, r3, #2
 800b0c8:	2b02      	cmp	r3, #2
 800b0ca:	d116      	bne.n	800b0fa <HAL_PWREx_ConfigSupply+0x7a>
 800b0cc:	68fb      	ldr	r3, [r7, #12]
 800b0ce:	2b00      	cmp	r3, #0
 800b0d0:	d1f3      	bne.n	800b0ba <HAL_PWREx_ConfigSupply+0x3a>
 800b0d2:	e012      	b.n	800b0fa <HAL_PWREx_ConfigSupply+0x7a>
  }
  /* Configure the SMPS as system regulator supply */
  else
  {
    /* Set the power supply configuration */
    SET_BIT(PWR->CR3, PWR_CR3_REGSEL);
 800b0d4:	4b11      	ldr	r3, [pc, #68]	; (800b11c <HAL_PWREx_ConfigSupply+0x9c>)
 800b0d6:	689b      	ldr	r3, [r3, #8]
 800b0d8:	4a10      	ldr	r2, [pc, #64]	; (800b11c <HAL_PWREx_ConfigSupply+0x9c>)
 800b0da:	f043 0302 	orr.w	r3, r3, #2
 800b0de:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 800b0e0:	e002      	b.n	800b0e8 <HAL_PWREx_ConfigSupply+0x68>
    {
      timeout--;
 800b0e2:	68fb      	ldr	r3, [r7, #12]
 800b0e4:	3b01      	subs	r3, #1
 800b0e6:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 800b0e8:	4b0c      	ldr	r3, [pc, #48]	; (800b11c <HAL_PWREx_ConfigSupply+0x9c>)
 800b0ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b0ec:	f003 0302 	and.w	r3, r3, #2
 800b0f0:	2b00      	cmp	r3, #0
 800b0f2:	d102      	bne.n	800b0fa <HAL_PWREx_ConfigSupply+0x7a>
 800b0f4:	68fb      	ldr	r3, [r7, #12]
 800b0f6:	2b00      	cmp	r3, #0
 800b0f8:	d1f3      	bne.n	800b0e2 <HAL_PWREx_ConfigSupply+0x62>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 800b0fa:	68fb      	ldr	r3, [r7, #12]
 800b0fc:	2b00      	cmp	r3, #0
 800b0fe:	d101      	bne.n	800b104 <HAL_PWREx_ConfigSupply+0x84>
  {
    return HAL_TIMEOUT;
 800b100:	2303      	movs	r3, #3
 800b102:	e000      	b.n	800b106 <HAL_PWREx_ConfigSupply+0x86>
  }

  return HAL_OK;
 800b104:	2300      	movs	r3, #0
}
 800b106:	4618      	mov	r0, r3
 800b108:	3714      	adds	r7, #20
 800b10a:	46bd      	mov	sp, r7
 800b10c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b110:	4770      	bx	lr
 800b112:	bf00      	nop
 800b114:	20000004 	.word	0x20000004
 800b118:	10624dd3 	.word	0x10624dd3
 800b11c:	46020800 	.word	0x46020800

0800b120 <HAL_PWREx_EnableVddIO2>:
  * @note   Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddIO2(void)
{
 800b120:	b480      	push	{r7}
 800b122:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_IO2SV);
 800b124:	4b05      	ldr	r3, [pc, #20]	; (800b13c <HAL_PWREx_EnableVddIO2+0x1c>)
 800b126:	691b      	ldr	r3, [r3, #16]
 800b128:	4a04      	ldr	r2, [pc, #16]	; (800b13c <HAL_PWREx_EnableVddIO2+0x1c>)
 800b12a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b12e:	6113      	str	r3, [r2, #16]
}
 800b130:	bf00      	nop
 800b132:	46bd      	mov	sp, r7
 800b134:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b138:	4770      	bx	lr
 800b13a:	bf00      	nop
 800b13c:	46020800 	.word	0x46020800

0800b140 <HAL_PWREx_EnableVddA>:
  * @note   Remove VDDA electrical and logical isolation, once VDDA supply is
  *         present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddA(void)
{
 800b140:	b480      	push	{r7}
 800b142:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_ASV);
 800b144:	4b05      	ldr	r3, [pc, #20]	; (800b15c <HAL_PWREx_EnableVddA+0x1c>)
 800b146:	691b      	ldr	r3, [r3, #16]
 800b148:	4a04      	ldr	r2, [pc, #16]	; (800b15c <HAL_PWREx_EnableVddA+0x1c>)
 800b14a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b14e:	6113      	str	r3, [r2, #16]
}
 800b150:	bf00      	nop
 800b152:	46bd      	mov	sp, r7
 800b154:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b158:	4770      	bx	lr
 800b15a:	bf00      	nop
 800b15c:	46020800 	.word	0x46020800

0800b160 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 800b160:	b580      	push	{r7, lr}
 800b162:	b08e      	sub	sp, #56	; 0x38
 800b164:	af00      	add	r7, sp, #0
 800b166:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 800b168:	2300      	movs	r3, #0
 800b16a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	2b00      	cmp	r3, #0
 800b172:	d102      	bne.n	800b17a <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 800b174:	2301      	movs	r3, #1
 800b176:	f000 bec3 	b.w	800bf00 <HAL_RCC_OscConfig+0xda0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b17a:	4b9c      	ldr	r3, [pc, #624]	; (800b3ec <HAL_RCC_OscConfig+0x28c>)
 800b17c:	69db      	ldr	r3, [r3, #28]
 800b17e:	f003 030c 	and.w	r3, r3, #12
 800b182:	633b      	str	r3, [r7, #48]	; 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800b184:	4b99      	ldr	r3, [pc, #612]	; (800b3ec <HAL_RCC_OscConfig+0x28c>)
 800b186:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b188:	f003 0303 	and.w	r3, r3, #3
 800b18c:	62fb      	str	r3, [r7, #44]	; 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	681b      	ldr	r3, [r3, #0]
 800b192:	f003 0310 	and.w	r3, r3, #16
 800b196:	2b00      	cmp	r3, #0
 800b198:	f000 8172 	beq.w	800b480 <HAL_RCC_OscConfig+0x320>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800b19c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b19e:	2b00      	cmp	r3, #0
 800b1a0:	d007      	beq.n	800b1b2 <HAL_RCC_OscConfig+0x52>
 800b1a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1a4:	2b0c      	cmp	r3, #12
 800b1a6:	f040 80e4 	bne.w	800b372 <HAL_RCC_OscConfig+0x212>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 800b1aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b1ac:	2b01      	cmp	r3, #1
 800b1ae:	f040 80e0 	bne.w	800b372 <HAL_RCC_OscConfig+0x212>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U) && (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800b1b2:	4b8e      	ldr	r3, [pc, #568]	; (800b3ec <HAL_RCC_OscConfig+0x28c>)
 800b1b4:	681b      	ldr	r3, [r3, #0]
 800b1b6:	f003 0304 	and.w	r3, r3, #4
 800b1ba:	2b00      	cmp	r3, #0
 800b1bc:	d006      	beq.n	800b1cc <HAL_RCC_OscConfig+0x6c>
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	69db      	ldr	r3, [r3, #28]
 800b1c2:	2b00      	cmp	r3, #0
 800b1c4:	d102      	bne.n	800b1cc <HAL_RCC_OscConfig+0x6c>
      {
        return HAL_ERROR;
 800b1c6:	2301      	movs	r3, #1
 800b1c8:	f000 be9a 	b.w	800bf00 <HAL_RCC_OscConfig+0xda0>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b1d0:	4b86      	ldr	r3, [pc, #536]	; (800b3ec <HAL_RCC_OscConfig+0x28c>)
 800b1d2:	689b      	ldr	r3, [r3, #8]
 800b1d4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b1d8:	2b00      	cmp	r3, #0
 800b1da:	d004      	beq.n	800b1e6 <HAL_RCC_OscConfig+0x86>
 800b1dc:	4b83      	ldr	r3, [pc, #524]	; (800b3ec <HAL_RCC_OscConfig+0x28c>)
 800b1de:	689b      	ldr	r3, [r3, #8]
 800b1e0:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800b1e4:	e005      	b.n	800b1f2 <HAL_RCC_OscConfig+0x92>
 800b1e6:	4b81      	ldr	r3, [pc, #516]	; (800b3ec <HAL_RCC_OscConfig+0x28c>)
 800b1e8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800b1ec:	041b      	lsls	r3, r3, #16
 800b1ee:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800b1f2:	4293      	cmp	r3, r2
 800b1f4:	d255      	bcs.n	800b2a2 <HAL_RCC_OscConfig+0x142>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800b1f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1f8:	2b00      	cmp	r3, #0
 800b1fa:	d10a      	bne.n	800b212 <HAL_RCC_OscConfig+0xb2>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b200:	4618      	mov	r0, r3
 800b202:	f001 fa0b 	bl	800c61c <RCC_SetFlashLatencyFromMSIRange>
 800b206:	4603      	mov	r3, r0
 800b208:	2b00      	cmp	r3, #0
 800b20a:	d002      	beq.n	800b212 <HAL_RCC_OscConfig+0xb2>
            {
              return HAL_ERROR;
 800b20c:	2301      	movs	r3, #1
 800b20e:	f000 be77 	b.w	800bf00 <HAL_RCC_OscConfig+0xda0>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 800b212:	4b76      	ldr	r3, [pc, #472]	; (800b3ec <HAL_RCC_OscConfig+0x28c>)
 800b214:	689b      	ldr	r3, [r3, #8]
 800b216:	4a75      	ldr	r2, [pc, #468]	; (800b3ec <HAL_RCC_OscConfig+0x28c>)
 800b218:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800b21c:	6093      	str	r3, [r2, #8]
 800b21e:	4b73      	ldr	r3, [pc, #460]	; (800b3ec <HAL_RCC_OscConfig+0x28c>)
 800b220:	689b      	ldr	r3, [r3, #8]
 800b222:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b22a:	4970      	ldr	r1, [pc, #448]	; (800b3ec <HAL_RCC_OscConfig+0x28c>)
 800b22c:	4313      	orrs	r3, r2
 800b22e:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b234:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 800b238:	d309      	bcc.n	800b24e <HAL_RCC_OscConfig+0xee>
 800b23a:	4b6c      	ldr	r3, [pc, #432]	; (800b3ec <HAL_RCC_OscConfig+0x28c>)
 800b23c:	68db      	ldr	r3, [r3, #12]
 800b23e:	f023 021f 	bic.w	r2, r3, #31
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	6a1b      	ldr	r3, [r3, #32]
 800b246:	4969      	ldr	r1, [pc, #420]	; (800b3ec <HAL_RCC_OscConfig+0x28c>)
 800b248:	4313      	orrs	r3, r2
 800b24a:	60cb      	str	r3, [r1, #12]
 800b24c:	e07e      	b.n	800b34c <HAL_RCC_OscConfig+0x1ec>
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b252:	2b00      	cmp	r3, #0
 800b254:	da0a      	bge.n	800b26c <HAL_RCC_OscConfig+0x10c>
 800b256:	4b65      	ldr	r3, [pc, #404]	; (800b3ec <HAL_RCC_OscConfig+0x28c>)
 800b258:	68db      	ldr	r3, [r3, #12]
 800b25a:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	6a1b      	ldr	r3, [r3, #32]
 800b262:	015b      	lsls	r3, r3, #5
 800b264:	4961      	ldr	r1, [pc, #388]	; (800b3ec <HAL_RCC_OscConfig+0x28c>)
 800b266:	4313      	orrs	r3, r2
 800b268:	60cb      	str	r3, [r1, #12]
 800b26a:	e06f      	b.n	800b34c <HAL_RCC_OscConfig+0x1ec>
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b270:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b274:	d30a      	bcc.n	800b28c <HAL_RCC_OscConfig+0x12c>
 800b276:	4b5d      	ldr	r3, [pc, #372]	; (800b3ec <HAL_RCC_OscConfig+0x28c>)
 800b278:	68db      	ldr	r3, [r3, #12]
 800b27a:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	6a1b      	ldr	r3, [r3, #32]
 800b282:	029b      	lsls	r3, r3, #10
 800b284:	4959      	ldr	r1, [pc, #356]	; (800b3ec <HAL_RCC_OscConfig+0x28c>)
 800b286:	4313      	orrs	r3, r2
 800b288:	60cb      	str	r3, [r1, #12]
 800b28a:	e05f      	b.n	800b34c <HAL_RCC_OscConfig+0x1ec>
 800b28c:	4b57      	ldr	r3, [pc, #348]	; (800b3ec <HAL_RCC_OscConfig+0x28c>)
 800b28e:	68db      	ldr	r3, [r3, #12]
 800b290:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	6a1b      	ldr	r3, [r3, #32]
 800b298:	03db      	lsls	r3, r3, #15
 800b29a:	4954      	ldr	r1, [pc, #336]	; (800b3ec <HAL_RCC_OscConfig+0x28c>)
 800b29c:	4313      	orrs	r3, r2
 800b29e:	60cb      	str	r3, [r1, #12]
 800b2a0:	e054      	b.n	800b34c <HAL_RCC_OscConfig+0x1ec>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 800b2a2:	4b52      	ldr	r3, [pc, #328]	; (800b3ec <HAL_RCC_OscConfig+0x28c>)
 800b2a4:	689b      	ldr	r3, [r3, #8]
 800b2a6:	4a51      	ldr	r2, [pc, #324]	; (800b3ec <HAL_RCC_OscConfig+0x28c>)
 800b2a8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800b2ac:	6093      	str	r3, [r2, #8]
 800b2ae:	4b4f      	ldr	r3, [pc, #316]	; (800b3ec <HAL_RCC_OscConfig+0x28c>)
 800b2b0:	689b      	ldr	r3, [r3, #8]
 800b2b2:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2ba:	494c      	ldr	r1, [pc, #304]	; (800b3ec <HAL_RCC_OscConfig+0x28c>)
 800b2bc:	4313      	orrs	r3, r2
 800b2be:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2c4:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 800b2c8:	d309      	bcc.n	800b2de <HAL_RCC_OscConfig+0x17e>
 800b2ca:	4b48      	ldr	r3, [pc, #288]	; (800b3ec <HAL_RCC_OscConfig+0x28c>)
 800b2cc:	68db      	ldr	r3, [r3, #12]
 800b2ce:	f023 021f 	bic.w	r2, r3, #31
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	6a1b      	ldr	r3, [r3, #32]
 800b2d6:	4945      	ldr	r1, [pc, #276]	; (800b3ec <HAL_RCC_OscConfig+0x28c>)
 800b2d8:	4313      	orrs	r3, r2
 800b2da:	60cb      	str	r3, [r1, #12]
 800b2dc:	e028      	b.n	800b330 <HAL_RCC_OscConfig+0x1d0>
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2e2:	2b00      	cmp	r3, #0
 800b2e4:	da0a      	bge.n	800b2fc <HAL_RCC_OscConfig+0x19c>
 800b2e6:	4b41      	ldr	r3, [pc, #260]	; (800b3ec <HAL_RCC_OscConfig+0x28c>)
 800b2e8:	68db      	ldr	r3, [r3, #12]
 800b2ea:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	6a1b      	ldr	r3, [r3, #32]
 800b2f2:	015b      	lsls	r3, r3, #5
 800b2f4:	493d      	ldr	r1, [pc, #244]	; (800b3ec <HAL_RCC_OscConfig+0x28c>)
 800b2f6:	4313      	orrs	r3, r2
 800b2f8:	60cb      	str	r3, [r1, #12]
 800b2fa:	e019      	b.n	800b330 <HAL_RCC_OscConfig+0x1d0>
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b300:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b304:	d30a      	bcc.n	800b31c <HAL_RCC_OscConfig+0x1bc>
 800b306:	4b39      	ldr	r3, [pc, #228]	; (800b3ec <HAL_RCC_OscConfig+0x28c>)
 800b308:	68db      	ldr	r3, [r3, #12]
 800b30a:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	6a1b      	ldr	r3, [r3, #32]
 800b312:	029b      	lsls	r3, r3, #10
 800b314:	4935      	ldr	r1, [pc, #212]	; (800b3ec <HAL_RCC_OscConfig+0x28c>)
 800b316:	4313      	orrs	r3, r2
 800b318:	60cb      	str	r3, [r1, #12]
 800b31a:	e009      	b.n	800b330 <HAL_RCC_OscConfig+0x1d0>
 800b31c:	4b33      	ldr	r3, [pc, #204]	; (800b3ec <HAL_RCC_OscConfig+0x28c>)
 800b31e:	68db      	ldr	r3, [r3, #12]
 800b320:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	6a1b      	ldr	r3, [r3, #32]
 800b328:	03db      	lsls	r3, r3, #15
 800b32a:	4930      	ldr	r1, [pc, #192]	; (800b3ec <HAL_RCC_OscConfig+0x28c>)
 800b32c:	4313      	orrs	r3, r2
 800b32e:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800b330:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b332:	2b00      	cmp	r3, #0
 800b334:	d10a      	bne.n	800b34c <HAL_RCC_OscConfig+0x1ec>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b33a:	4618      	mov	r0, r3
 800b33c:	f001 f96e 	bl	800c61c <RCC_SetFlashLatencyFromMSIRange>
 800b340:	4603      	mov	r3, r0
 800b342:	2b00      	cmp	r3, #0
 800b344:	d002      	beq.n	800b34c <HAL_RCC_OscConfig+0x1ec>
            {
              return HAL_ERROR;
 800b346:	2301      	movs	r3, #1
 800b348:	f000 bdda 	b.w	800bf00 <HAL_RCC_OscConfig+0xda0>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 800b34c:	f001 f8d8 	bl	800c500 <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800b350:	4b27      	ldr	r3, [pc, #156]	; (800b3f0 <HAL_RCC_OscConfig+0x290>)
 800b352:	681b      	ldr	r3, [r3, #0]
 800b354:	4618      	mov	r0, r3
 800b356:	f7fa ffe9 	bl	800632c <HAL_InitTick>
 800b35a:	4603      	mov	r3, r0
 800b35c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (status != HAL_OK)
 800b360:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b364:	2b00      	cmp	r3, #0
 800b366:	f000 808a 	beq.w	800b47e <HAL_RCC_OscConfig+0x31e>
        {
          return status;
 800b36a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b36e:	f000 bdc7 	b.w	800bf00 <HAL_RCC_OscConfig+0xda0>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	69db      	ldr	r3, [r3, #28]
 800b376:	2b00      	cmp	r3, #0
 800b378:	d066      	beq.n	800b448 <HAL_RCC_OscConfig+0x2e8>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 800b37a:	4b1c      	ldr	r3, [pc, #112]	; (800b3ec <HAL_RCC_OscConfig+0x28c>)
 800b37c:	681b      	ldr	r3, [r3, #0]
 800b37e:	4a1b      	ldr	r2, [pc, #108]	; (800b3ec <HAL_RCC_OscConfig+0x28c>)
 800b380:	f043 0301 	orr.w	r3, r3, #1
 800b384:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800b386:	f7fb fadb 	bl	8006940 <HAL_GetTick>
 800b38a:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 800b38c:	e009      	b.n	800b3a2 <HAL_RCC_OscConfig+0x242>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800b38e:	f7fb fad7 	bl	8006940 <HAL_GetTick>
 800b392:	4602      	mov	r2, r0
 800b394:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b396:	1ad3      	subs	r3, r2, r3
 800b398:	2b02      	cmp	r3, #2
 800b39a:	d902      	bls.n	800b3a2 <HAL_RCC_OscConfig+0x242>
          {
            return HAL_TIMEOUT;
 800b39c:	2303      	movs	r3, #3
 800b39e:	f000 bdaf 	b.w	800bf00 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 800b3a2:	4b12      	ldr	r3, [pc, #72]	; (800b3ec <HAL_RCC_OscConfig+0x28c>)
 800b3a4:	681b      	ldr	r3, [r3, #0]
 800b3a6:	f003 0304 	and.w	r3, r3, #4
 800b3aa:	2b00      	cmp	r3, #0
 800b3ac:	d0ef      	beq.n	800b38e <HAL_RCC_OscConfig+0x22e>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 800b3ae:	4b0f      	ldr	r3, [pc, #60]	; (800b3ec <HAL_RCC_OscConfig+0x28c>)
 800b3b0:	689b      	ldr	r3, [r3, #8]
 800b3b2:	4a0e      	ldr	r2, [pc, #56]	; (800b3ec <HAL_RCC_OscConfig+0x28c>)
 800b3b4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800b3b8:	6093      	str	r3, [r2, #8]
 800b3ba:	4b0c      	ldr	r3, [pc, #48]	; (800b3ec <HAL_RCC_OscConfig+0x28c>)
 800b3bc:	689b      	ldr	r3, [r3, #8]
 800b3be:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3c6:	4909      	ldr	r1, [pc, #36]	; (800b3ec <HAL_RCC_OscConfig+0x28c>)
 800b3c8:	4313      	orrs	r3, r2
 800b3ca:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3d0:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 800b3d4:	d30e      	bcc.n	800b3f4 <HAL_RCC_OscConfig+0x294>
 800b3d6:	4b05      	ldr	r3, [pc, #20]	; (800b3ec <HAL_RCC_OscConfig+0x28c>)
 800b3d8:	68db      	ldr	r3, [r3, #12]
 800b3da:	f023 021f 	bic.w	r2, r3, #31
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	6a1b      	ldr	r3, [r3, #32]
 800b3e2:	4902      	ldr	r1, [pc, #8]	; (800b3ec <HAL_RCC_OscConfig+0x28c>)
 800b3e4:	4313      	orrs	r3, r2
 800b3e6:	60cb      	str	r3, [r1, #12]
 800b3e8:	e04a      	b.n	800b480 <HAL_RCC_OscConfig+0x320>
 800b3ea:	bf00      	nop
 800b3ec:	46020c00 	.word	0x46020c00
 800b3f0:	20000008 	.word	0x20000008
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3f8:	2b00      	cmp	r3, #0
 800b3fa:	da0a      	bge.n	800b412 <HAL_RCC_OscConfig+0x2b2>
 800b3fc:	4b9b      	ldr	r3, [pc, #620]	; (800b66c <HAL_RCC_OscConfig+0x50c>)
 800b3fe:	68db      	ldr	r3, [r3, #12]
 800b400:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	6a1b      	ldr	r3, [r3, #32]
 800b408:	015b      	lsls	r3, r3, #5
 800b40a:	4998      	ldr	r1, [pc, #608]	; (800b66c <HAL_RCC_OscConfig+0x50c>)
 800b40c:	4313      	orrs	r3, r2
 800b40e:	60cb      	str	r3, [r1, #12]
 800b410:	e036      	b.n	800b480 <HAL_RCC_OscConfig+0x320>
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b416:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b41a:	d30a      	bcc.n	800b432 <HAL_RCC_OscConfig+0x2d2>
 800b41c:	4b93      	ldr	r3, [pc, #588]	; (800b66c <HAL_RCC_OscConfig+0x50c>)
 800b41e:	68db      	ldr	r3, [r3, #12]
 800b420:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	6a1b      	ldr	r3, [r3, #32]
 800b428:	029b      	lsls	r3, r3, #10
 800b42a:	4990      	ldr	r1, [pc, #576]	; (800b66c <HAL_RCC_OscConfig+0x50c>)
 800b42c:	4313      	orrs	r3, r2
 800b42e:	60cb      	str	r3, [r1, #12]
 800b430:	e026      	b.n	800b480 <HAL_RCC_OscConfig+0x320>
 800b432:	4b8e      	ldr	r3, [pc, #568]	; (800b66c <HAL_RCC_OscConfig+0x50c>)
 800b434:	68db      	ldr	r3, [r3, #12]
 800b436:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	6a1b      	ldr	r3, [r3, #32]
 800b43e:	03db      	lsls	r3, r3, #15
 800b440:	498a      	ldr	r1, [pc, #552]	; (800b66c <HAL_RCC_OscConfig+0x50c>)
 800b442:	4313      	orrs	r3, r2
 800b444:	60cb      	str	r3, [r1, #12]
 800b446:	e01b      	b.n	800b480 <HAL_RCC_OscConfig+0x320>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 800b448:	4b88      	ldr	r3, [pc, #544]	; (800b66c <HAL_RCC_OscConfig+0x50c>)
 800b44a:	681b      	ldr	r3, [r3, #0]
 800b44c:	4a87      	ldr	r2, [pc, #540]	; (800b66c <HAL_RCC_OscConfig+0x50c>)
 800b44e:	f023 0301 	bic.w	r3, r3, #1
 800b452:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800b454:	f7fb fa74 	bl	8006940 <HAL_GetTick>
 800b458:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 800b45a:	e009      	b.n	800b470 <HAL_RCC_OscConfig+0x310>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800b45c:	f7fb fa70 	bl	8006940 <HAL_GetTick>
 800b460:	4602      	mov	r2, r0
 800b462:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b464:	1ad3      	subs	r3, r2, r3
 800b466:	2b02      	cmp	r3, #2
 800b468:	d902      	bls.n	800b470 <HAL_RCC_OscConfig+0x310>
          {
            return HAL_TIMEOUT;
 800b46a:	2303      	movs	r3, #3
 800b46c:	f000 bd48 	b.w	800bf00 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 800b470:	4b7e      	ldr	r3, [pc, #504]	; (800b66c <HAL_RCC_OscConfig+0x50c>)
 800b472:	681b      	ldr	r3, [r3, #0]
 800b474:	f003 0304 	and.w	r3, r3, #4
 800b478:	2b00      	cmp	r3, #0
 800b47a:	d1ef      	bne.n	800b45c <HAL_RCC_OscConfig+0x2fc>
 800b47c:	e000      	b.n	800b480 <HAL_RCC_OscConfig+0x320>
      if ((READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U) && (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800b47e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	681b      	ldr	r3, [r3, #0]
 800b484:	f003 0301 	and.w	r3, r3, #1
 800b488:	2b00      	cmp	r3, #0
 800b48a:	f000 8094 	beq.w	800b5b6 <HAL_RCC_OscConfig+0x456>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800b48e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b490:	2b08      	cmp	r3, #8
 800b492:	d005      	beq.n	800b4a0 <HAL_RCC_OscConfig+0x340>
 800b494:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b496:	2b0c      	cmp	r3, #12
 800b498:	d110      	bne.n	800b4bc <HAL_RCC_OscConfig+0x35c>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800b49a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b49c:	2b03      	cmp	r3, #3
 800b49e:	d10d      	bne.n	800b4bc <HAL_RCC_OscConfig+0x35c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b4a0:	4b72      	ldr	r3, [pc, #456]	; (800b66c <HAL_RCC_OscConfig+0x50c>)
 800b4a2:	681b      	ldr	r3, [r3, #0]
 800b4a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b4a8:	2b00      	cmp	r3, #0
 800b4aa:	f000 8083 	beq.w	800b5b4 <HAL_RCC_OscConfig+0x454>
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	685b      	ldr	r3, [r3, #4]
 800b4b2:	2b00      	cmp	r3, #0
 800b4b4:	d17e      	bne.n	800b5b4 <HAL_RCC_OscConfig+0x454>
      {
        return HAL_ERROR;
 800b4b6:	2301      	movs	r3, #1
 800b4b8:	f000 bd22 	b.w	800bf00 <HAL_RCC_OscConfig+0xda0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	685b      	ldr	r3, [r3, #4]
 800b4c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b4c4:	d106      	bne.n	800b4d4 <HAL_RCC_OscConfig+0x374>
 800b4c6:	4b69      	ldr	r3, [pc, #420]	; (800b66c <HAL_RCC_OscConfig+0x50c>)
 800b4c8:	681b      	ldr	r3, [r3, #0]
 800b4ca:	4a68      	ldr	r2, [pc, #416]	; (800b66c <HAL_RCC_OscConfig+0x50c>)
 800b4cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b4d0:	6013      	str	r3, [r2, #0]
 800b4d2:	e041      	b.n	800b558 <HAL_RCC_OscConfig+0x3f8>
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	685b      	ldr	r3, [r3, #4]
 800b4d8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b4dc:	d112      	bne.n	800b504 <HAL_RCC_OscConfig+0x3a4>
 800b4de:	4b63      	ldr	r3, [pc, #396]	; (800b66c <HAL_RCC_OscConfig+0x50c>)
 800b4e0:	681b      	ldr	r3, [r3, #0]
 800b4e2:	4a62      	ldr	r2, [pc, #392]	; (800b66c <HAL_RCC_OscConfig+0x50c>)
 800b4e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800b4e8:	6013      	str	r3, [r2, #0]
 800b4ea:	4b60      	ldr	r3, [pc, #384]	; (800b66c <HAL_RCC_OscConfig+0x50c>)
 800b4ec:	681b      	ldr	r3, [r3, #0]
 800b4ee:	4a5f      	ldr	r2, [pc, #380]	; (800b66c <HAL_RCC_OscConfig+0x50c>)
 800b4f0:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800b4f4:	6013      	str	r3, [r2, #0]
 800b4f6:	4b5d      	ldr	r3, [pc, #372]	; (800b66c <HAL_RCC_OscConfig+0x50c>)
 800b4f8:	681b      	ldr	r3, [r3, #0]
 800b4fa:	4a5c      	ldr	r2, [pc, #368]	; (800b66c <HAL_RCC_OscConfig+0x50c>)
 800b4fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b500:	6013      	str	r3, [r2, #0]
 800b502:	e029      	b.n	800b558 <HAL_RCC_OscConfig+0x3f8>
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	685b      	ldr	r3, [r3, #4]
 800b508:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 800b50c:	d112      	bne.n	800b534 <HAL_RCC_OscConfig+0x3d4>
 800b50e:	4b57      	ldr	r3, [pc, #348]	; (800b66c <HAL_RCC_OscConfig+0x50c>)
 800b510:	681b      	ldr	r3, [r3, #0]
 800b512:	4a56      	ldr	r2, [pc, #344]	; (800b66c <HAL_RCC_OscConfig+0x50c>)
 800b514:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800b518:	6013      	str	r3, [r2, #0]
 800b51a:	4b54      	ldr	r3, [pc, #336]	; (800b66c <HAL_RCC_OscConfig+0x50c>)
 800b51c:	681b      	ldr	r3, [r3, #0]
 800b51e:	4a53      	ldr	r2, [pc, #332]	; (800b66c <HAL_RCC_OscConfig+0x50c>)
 800b520:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b524:	6013      	str	r3, [r2, #0]
 800b526:	4b51      	ldr	r3, [pc, #324]	; (800b66c <HAL_RCC_OscConfig+0x50c>)
 800b528:	681b      	ldr	r3, [r3, #0]
 800b52a:	4a50      	ldr	r2, [pc, #320]	; (800b66c <HAL_RCC_OscConfig+0x50c>)
 800b52c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b530:	6013      	str	r3, [r2, #0]
 800b532:	e011      	b.n	800b558 <HAL_RCC_OscConfig+0x3f8>
 800b534:	4b4d      	ldr	r3, [pc, #308]	; (800b66c <HAL_RCC_OscConfig+0x50c>)
 800b536:	681b      	ldr	r3, [r3, #0]
 800b538:	4a4c      	ldr	r2, [pc, #304]	; (800b66c <HAL_RCC_OscConfig+0x50c>)
 800b53a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b53e:	6013      	str	r3, [r2, #0]
 800b540:	4b4a      	ldr	r3, [pc, #296]	; (800b66c <HAL_RCC_OscConfig+0x50c>)
 800b542:	681b      	ldr	r3, [r3, #0]
 800b544:	4a49      	ldr	r2, [pc, #292]	; (800b66c <HAL_RCC_OscConfig+0x50c>)
 800b546:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b54a:	6013      	str	r3, [r2, #0]
 800b54c:	4b47      	ldr	r3, [pc, #284]	; (800b66c <HAL_RCC_OscConfig+0x50c>)
 800b54e:	681b      	ldr	r3, [r3, #0]
 800b550:	4a46      	ldr	r2, [pc, #280]	; (800b66c <HAL_RCC_OscConfig+0x50c>)
 800b552:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800b556:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	685b      	ldr	r3, [r3, #4]
 800b55c:	2b00      	cmp	r3, #0
 800b55e:	d014      	beq.n	800b58a <HAL_RCC_OscConfig+0x42a>
      {
        tickstart = HAL_GetTick();
 800b560:	f7fb f9ee 	bl	8006940 <HAL_GetTick>
 800b564:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800b566:	e009      	b.n	800b57c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b568:	f7fb f9ea 	bl	8006940 <HAL_GetTick>
 800b56c:	4602      	mov	r2, r0
 800b56e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b570:	1ad3      	subs	r3, r2, r3
 800b572:	2b64      	cmp	r3, #100	; 0x64
 800b574:	d902      	bls.n	800b57c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800b576:	2303      	movs	r3, #3
 800b578:	f000 bcc2 	b.w	800bf00 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800b57c:	4b3b      	ldr	r3, [pc, #236]	; (800b66c <HAL_RCC_OscConfig+0x50c>)
 800b57e:	681b      	ldr	r3, [r3, #0]
 800b580:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b584:	2b00      	cmp	r3, #0
 800b586:	d0ef      	beq.n	800b568 <HAL_RCC_OscConfig+0x408>
 800b588:	e015      	b.n	800b5b6 <HAL_RCC_OscConfig+0x456>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 800b58a:	f7fb f9d9 	bl	8006940 <HAL_GetTick>
 800b58e:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800b590:	e009      	b.n	800b5a6 <HAL_RCC_OscConfig+0x446>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b592:	f7fb f9d5 	bl	8006940 <HAL_GetTick>
 800b596:	4602      	mov	r2, r0
 800b598:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b59a:	1ad3      	subs	r3, r2, r3
 800b59c:	2b64      	cmp	r3, #100	; 0x64
 800b59e:	d902      	bls.n	800b5a6 <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 800b5a0:	2303      	movs	r3, #3
 800b5a2:	f000 bcad 	b.w	800bf00 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800b5a6:	4b31      	ldr	r3, [pc, #196]	; (800b66c <HAL_RCC_OscConfig+0x50c>)
 800b5a8:	681b      	ldr	r3, [r3, #0]
 800b5aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b5ae:	2b00      	cmp	r3, #0
 800b5b0:	d1ef      	bne.n	800b592 <HAL_RCC_OscConfig+0x432>
 800b5b2:	e000      	b.n	800b5b6 <HAL_RCC_OscConfig+0x456>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b5b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	681b      	ldr	r3, [r3, #0]
 800b5ba:	f003 0302 	and.w	r3, r3, #2
 800b5be:	2b00      	cmp	r3, #0
 800b5c0:	d066      	beq.n	800b690 <HAL_RCC_OscConfig+0x530>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800b5c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5c4:	2b04      	cmp	r3, #4
 800b5c6:	d005      	beq.n	800b5d4 <HAL_RCC_OscConfig+0x474>
 800b5c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5ca:	2b0c      	cmp	r3, #12
 800b5cc:	d11a      	bne.n	800b604 <HAL_RCC_OscConfig+0x4a4>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800b5ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5d0:	2b02      	cmp	r3, #2
 800b5d2:	d117      	bne.n	800b604 <HAL_RCC_OscConfig+0x4a4>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800b5d4:	4b25      	ldr	r3, [pc, #148]	; (800b66c <HAL_RCC_OscConfig+0x50c>)
 800b5d6:	681b      	ldr	r3, [r3, #0]
 800b5d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b5dc:	2b00      	cmp	r3, #0
 800b5de:	d006      	beq.n	800b5ee <HAL_RCC_OscConfig+0x48e>
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	68db      	ldr	r3, [r3, #12]
 800b5e4:	2b00      	cmp	r3, #0
 800b5e6:	d102      	bne.n	800b5ee <HAL_RCC_OscConfig+0x48e>
      {
        return HAL_ERROR;
 800b5e8:	2301      	movs	r3, #1
 800b5ea:	f000 bc89 	b.w	800bf00 <HAL_RCC_OscConfig+0xda0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 800b5ee:	4b1f      	ldr	r3, [pc, #124]	; (800b66c <HAL_RCC_OscConfig+0x50c>)
 800b5f0:	691b      	ldr	r3, [r3, #16]
 800b5f2:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	691b      	ldr	r3, [r3, #16]
 800b5fa:	041b      	lsls	r3, r3, #16
 800b5fc:	491b      	ldr	r1, [pc, #108]	; (800b66c <HAL_RCC_OscConfig+0x50c>)
 800b5fe:	4313      	orrs	r3, r2
 800b600:	610b      	str	r3, [r1, #16]
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800b602:	e045      	b.n	800b690 <HAL_RCC_OscConfig+0x530>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	68db      	ldr	r3, [r3, #12]
 800b608:	2b00      	cmp	r3, #0
 800b60a:	d024      	beq.n	800b656 <HAL_RCC_OscConfig+0x4f6>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 800b60c:	4b17      	ldr	r3, [pc, #92]	; (800b66c <HAL_RCC_OscConfig+0x50c>)
 800b60e:	681b      	ldr	r3, [r3, #0]
 800b610:	4a16      	ldr	r2, [pc, #88]	; (800b66c <HAL_RCC_OscConfig+0x50c>)
 800b612:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b616:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800b618:	f7fb f992 	bl	8006940 <HAL_GetTick>
 800b61c:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800b61e:	e009      	b.n	800b634 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b620:	f7fb f98e 	bl	8006940 <HAL_GetTick>
 800b624:	4602      	mov	r2, r0
 800b626:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b628:	1ad3      	subs	r3, r2, r3
 800b62a:	2b02      	cmp	r3, #2
 800b62c:	d902      	bls.n	800b634 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 800b62e:	2303      	movs	r3, #3
 800b630:	f000 bc66 	b.w	800bf00 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800b634:	4b0d      	ldr	r3, [pc, #52]	; (800b66c <HAL_RCC_OscConfig+0x50c>)
 800b636:	681b      	ldr	r3, [r3, #0]
 800b638:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b63c:	2b00      	cmp	r3, #0
 800b63e:	d0ef      	beq.n	800b620 <HAL_RCC_OscConfig+0x4c0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 800b640:	4b0a      	ldr	r3, [pc, #40]	; (800b66c <HAL_RCC_OscConfig+0x50c>)
 800b642:	691b      	ldr	r3, [r3, #16]
 800b644:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	691b      	ldr	r3, [r3, #16]
 800b64c:	041b      	lsls	r3, r3, #16
 800b64e:	4907      	ldr	r1, [pc, #28]	; (800b66c <HAL_RCC_OscConfig+0x50c>)
 800b650:	4313      	orrs	r3, r2
 800b652:	610b      	str	r3, [r1, #16]
 800b654:	e01c      	b.n	800b690 <HAL_RCC_OscConfig+0x530>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 800b656:	4b05      	ldr	r3, [pc, #20]	; (800b66c <HAL_RCC_OscConfig+0x50c>)
 800b658:	681b      	ldr	r3, [r3, #0]
 800b65a:	4a04      	ldr	r2, [pc, #16]	; (800b66c <HAL_RCC_OscConfig+0x50c>)
 800b65c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b660:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800b662:	f7fb f96d 	bl	8006940 <HAL_GetTick>
 800b666:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800b668:	e00c      	b.n	800b684 <HAL_RCC_OscConfig+0x524>
 800b66a:	bf00      	nop
 800b66c:	46020c00 	.word	0x46020c00
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b670:	f7fb f966 	bl	8006940 <HAL_GetTick>
 800b674:	4602      	mov	r2, r0
 800b676:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b678:	1ad3      	subs	r3, r2, r3
 800b67a:	2b02      	cmp	r3, #2
 800b67c:	d902      	bls.n	800b684 <HAL_RCC_OscConfig+0x524>
          {
            return HAL_TIMEOUT;
 800b67e:	2303      	movs	r3, #3
 800b680:	f000 bc3e 	b.w	800bf00 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800b684:	4baf      	ldr	r3, [pc, #700]	; (800b944 <HAL_RCC_OscConfig+0x7e4>)
 800b686:	681b      	ldr	r3, [r3, #0]
 800b688:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b68c:	2b00      	cmp	r3, #0
 800b68e:	d1ef      	bne.n	800b670 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	681b      	ldr	r3, [r3, #0]
 800b694:	f003 0308 	and.w	r3, r3, #8
 800b698:	2b00      	cmp	r3, #0
 800b69a:	f000 80c7 	beq.w	800b82c <HAL_RCC_OscConfig+0x6cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 800b69e:	2300      	movs	r3, #0
 800b6a0:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800b6a4:	4ba7      	ldr	r3, [pc, #668]	; (800b944 <HAL_RCC_OscConfig+0x7e4>)
 800b6a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b6aa:	f003 0304 	and.w	r3, r3, #4
 800b6ae:	2b00      	cmp	r3, #0
 800b6b0:	d111      	bne.n	800b6d6 <HAL_RCC_OscConfig+0x576>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800b6b2:	4ba4      	ldr	r3, [pc, #656]	; (800b944 <HAL_RCC_OscConfig+0x7e4>)
 800b6b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b6b8:	4aa2      	ldr	r2, [pc, #648]	; (800b944 <HAL_RCC_OscConfig+0x7e4>)
 800b6ba:	f043 0304 	orr.w	r3, r3, #4
 800b6be:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800b6c2:	4ba0      	ldr	r3, [pc, #640]	; (800b944 <HAL_RCC_OscConfig+0x7e4>)
 800b6c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b6c8:	f003 0304 	and.w	r3, r3, #4
 800b6cc:	617b      	str	r3, [r7, #20]
 800b6ce:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 800b6d0:	2301      	movs	r3, #1
 800b6d2:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800b6d6:	4b9c      	ldr	r3, [pc, #624]	; (800b948 <HAL_RCC_OscConfig+0x7e8>)
 800b6d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b6da:	f003 0301 	and.w	r3, r3, #1
 800b6de:	2b00      	cmp	r3, #0
 800b6e0:	d118      	bne.n	800b714 <HAL_RCC_OscConfig+0x5b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 800b6e2:	4b99      	ldr	r3, [pc, #612]	; (800b948 <HAL_RCC_OscConfig+0x7e8>)
 800b6e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b6e6:	4a98      	ldr	r2, [pc, #608]	; (800b948 <HAL_RCC_OscConfig+0x7e8>)
 800b6e8:	f043 0301 	orr.w	r3, r3, #1
 800b6ec:	6293      	str	r3, [r2, #40]	; 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800b6ee:	f7fb f927 	bl	8006940 <HAL_GetTick>
 800b6f2:	62b8      	str	r0, [r7, #40]	; 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800b6f4:	e008      	b.n	800b708 <HAL_RCC_OscConfig+0x5a8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b6f6:	f7fb f923 	bl	8006940 <HAL_GetTick>
 800b6fa:	4602      	mov	r2, r0
 800b6fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6fe:	1ad3      	subs	r3, r2, r3
 800b700:	2b02      	cmp	r3, #2
 800b702:	d901      	bls.n	800b708 <HAL_RCC_OscConfig+0x5a8>
        {
          return HAL_TIMEOUT;
 800b704:	2303      	movs	r3, #3
 800b706:	e3fb      	b.n	800bf00 <HAL_RCC_OscConfig+0xda0>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800b708:	4b8f      	ldr	r3, [pc, #572]	; (800b948 <HAL_RCC_OscConfig+0x7e8>)
 800b70a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b70c:	f003 0301 	and.w	r3, r3, #1
 800b710:	2b00      	cmp	r3, #0
 800b712:	d0f0      	beq.n	800b6f6 <HAL_RCC_OscConfig+0x596>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	695b      	ldr	r3, [r3, #20]
 800b718:	2b00      	cmp	r3, #0
 800b71a:	d05f      	beq.n	800b7dc <HAL_RCC_OscConfig+0x67c>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 800b71c:	4b89      	ldr	r3, [pc, #548]	; (800b944 <HAL_RCC_OscConfig+0x7e4>)
 800b71e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800b722:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	699a      	ldr	r2, [r3, #24]
 800b728:	6a3b      	ldr	r3, [r7, #32]
 800b72a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b72e:	429a      	cmp	r2, r3
 800b730:	d037      	beq.n	800b7a2 <HAL_RCC_OscConfig+0x642>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 800b732:	6a3b      	ldr	r3, [r7, #32]
 800b734:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b738:	2b00      	cmp	r3, #0
 800b73a:	d006      	beq.n	800b74a <HAL_RCC_OscConfig+0x5ea>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 800b73c:	6a3b      	ldr	r3, [r7, #32]
 800b73e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 800b742:	2b00      	cmp	r3, #0
 800b744:	d101      	bne.n	800b74a <HAL_RCC_OscConfig+0x5ea>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 800b746:	2301      	movs	r3, #1
 800b748:	e3da      	b.n	800bf00 <HAL_RCC_OscConfig+0xda0>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 800b74a:	6a3b      	ldr	r3, [r7, #32]
 800b74c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800b750:	2b00      	cmp	r3, #0
 800b752:	d01b      	beq.n	800b78c <HAL_RCC_OscConfig+0x62c>
        {
          __HAL_RCC_LSI_DISABLE();
 800b754:	4b7b      	ldr	r3, [pc, #492]	; (800b944 <HAL_RCC_OscConfig+0x7e4>)
 800b756:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800b75a:	4a7a      	ldr	r2, [pc, #488]	; (800b944 <HAL_RCC_OscConfig+0x7e4>)
 800b75c:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 800b760:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

          tickstart = HAL_GetTick();
 800b764:	f7fb f8ec 	bl	8006940 <HAL_GetTick>
 800b768:	62b8      	str	r0, [r7, #40]	; 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800b76a:	e008      	b.n	800b77e <HAL_RCC_OscConfig+0x61e>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b76c:	f7fb f8e8 	bl	8006940 <HAL_GetTick>
 800b770:	4602      	mov	r2, r0
 800b772:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b774:	1ad3      	subs	r3, r2, r3
 800b776:	2b02      	cmp	r3, #2
 800b778:	d901      	bls.n	800b77e <HAL_RCC_OscConfig+0x61e>
            {
              return HAL_TIMEOUT;
 800b77a:	2303      	movs	r3, #3
 800b77c:	e3c0      	b.n	800bf00 <HAL_RCC_OscConfig+0xda0>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800b77e:	4b71      	ldr	r3, [pc, #452]	; (800b944 <HAL_RCC_OscConfig+0x7e4>)
 800b780:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800b784:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b788:	2b00      	cmp	r3, #0
 800b78a:	d1ef      	bne.n	800b76c <HAL_RCC_OscConfig+0x60c>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 800b78c:	4b6d      	ldr	r3, [pc, #436]	; (800b944 <HAL_RCC_OscConfig+0x7e4>)
 800b78e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800b792:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	699b      	ldr	r3, [r3, #24]
 800b79a:	496a      	ldr	r1, [pc, #424]	; (800b944 <HAL_RCC_OscConfig+0x7e4>)
 800b79c:	4313      	orrs	r3, r2
 800b79e:	f8c1 30f0 	str.w	r3, [r1, #240]	; 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 800b7a2:	4b68      	ldr	r3, [pc, #416]	; (800b944 <HAL_RCC_OscConfig+0x7e4>)
 800b7a4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800b7a8:	4a66      	ldr	r2, [pc, #408]	; (800b944 <HAL_RCC_OscConfig+0x7e4>)
 800b7aa:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800b7ae:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      tickstart = HAL_GetTick();
 800b7b2:	f7fb f8c5 	bl	8006940 <HAL_GetTick>
 800b7b6:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 800b7b8:	e008      	b.n	800b7cc <HAL_RCC_OscConfig+0x66c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b7ba:	f7fb f8c1 	bl	8006940 <HAL_GetTick>
 800b7be:	4602      	mov	r2, r0
 800b7c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7c2:	1ad3      	subs	r3, r2, r3
 800b7c4:	2b02      	cmp	r3, #2
 800b7c6:	d901      	bls.n	800b7cc <HAL_RCC_OscConfig+0x66c>
        {
          return HAL_TIMEOUT;
 800b7c8:	2303      	movs	r3, #3
 800b7ca:	e399      	b.n	800bf00 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 800b7cc:	4b5d      	ldr	r3, [pc, #372]	; (800b944 <HAL_RCC_OscConfig+0x7e4>)
 800b7ce:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800b7d2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b7d6:	2b00      	cmp	r3, #0
 800b7d8:	d0ef      	beq.n	800b7ba <HAL_RCC_OscConfig+0x65a>
 800b7da:	e01b      	b.n	800b814 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 800b7dc:	4b59      	ldr	r3, [pc, #356]	; (800b944 <HAL_RCC_OscConfig+0x7e4>)
 800b7de:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800b7e2:	4a58      	ldr	r2, [pc, #352]	; (800b944 <HAL_RCC_OscConfig+0x7e4>)
 800b7e4:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 800b7e8:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      tickstart = HAL_GetTick();
 800b7ec:	f7fb f8a8 	bl	8006940 <HAL_GetTick>
 800b7f0:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800b7f2:	e008      	b.n	800b806 <HAL_RCC_OscConfig+0x6a6>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b7f4:	f7fb f8a4 	bl	8006940 <HAL_GetTick>
 800b7f8:	4602      	mov	r2, r0
 800b7fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7fc:	1ad3      	subs	r3, r2, r3
 800b7fe:	2b02      	cmp	r3, #2
 800b800:	d901      	bls.n	800b806 <HAL_RCC_OscConfig+0x6a6>
        {
          return HAL_TIMEOUT;
 800b802:	2303      	movs	r3, #3
 800b804:	e37c      	b.n	800bf00 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800b806:	4b4f      	ldr	r3, [pc, #316]	; (800b944 <HAL_RCC_OscConfig+0x7e4>)
 800b808:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800b80c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b810:	2b00      	cmp	r3, #0
 800b812:	d1ef      	bne.n	800b7f4 <HAL_RCC_OscConfig+0x694>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800b814:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800b818:	2b01      	cmp	r3, #1
 800b81a:	d107      	bne.n	800b82c <HAL_RCC_OscConfig+0x6cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800b81c:	4b49      	ldr	r3, [pc, #292]	; (800b944 <HAL_RCC_OscConfig+0x7e4>)
 800b81e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b822:	4a48      	ldr	r2, [pc, #288]	; (800b944 <HAL_RCC_OscConfig+0x7e4>)
 800b824:	f023 0304 	bic.w	r3, r3, #4
 800b828:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	681b      	ldr	r3, [r3, #0]
 800b830:	f003 0304 	and.w	r3, r3, #4
 800b834:	2b00      	cmp	r3, #0
 800b836:	f000 8112 	beq.w	800ba5e <HAL_RCC_OscConfig+0x8fe>
  {
    FlagStatus pwrclkchanged = RESET;
 800b83a:	2300      	movs	r3, #0
 800b83c:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800b840:	4b40      	ldr	r3, [pc, #256]	; (800b944 <HAL_RCC_OscConfig+0x7e4>)
 800b842:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b846:	f003 0304 	and.w	r3, r3, #4
 800b84a:	2b00      	cmp	r3, #0
 800b84c:	d111      	bne.n	800b872 <HAL_RCC_OscConfig+0x712>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800b84e:	4b3d      	ldr	r3, [pc, #244]	; (800b944 <HAL_RCC_OscConfig+0x7e4>)
 800b850:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b854:	4a3b      	ldr	r2, [pc, #236]	; (800b944 <HAL_RCC_OscConfig+0x7e4>)
 800b856:	f043 0304 	orr.w	r3, r3, #4
 800b85a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800b85e:	4b39      	ldr	r3, [pc, #228]	; (800b944 <HAL_RCC_OscConfig+0x7e4>)
 800b860:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b864:	f003 0304 	and.w	r3, r3, #4
 800b868:	613b      	str	r3, [r7, #16]
 800b86a:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 800b86c:	2301      	movs	r3, #1
 800b86e:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800b872:	4b35      	ldr	r3, [pc, #212]	; (800b948 <HAL_RCC_OscConfig+0x7e8>)
 800b874:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b876:	f003 0301 	and.w	r3, r3, #1
 800b87a:	2b00      	cmp	r3, #0
 800b87c:	d118      	bne.n	800b8b0 <HAL_RCC_OscConfig+0x750>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 800b87e:	4b32      	ldr	r3, [pc, #200]	; (800b948 <HAL_RCC_OscConfig+0x7e8>)
 800b880:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b882:	4a31      	ldr	r2, [pc, #196]	; (800b948 <HAL_RCC_OscConfig+0x7e8>)
 800b884:	f043 0301 	orr.w	r3, r3, #1
 800b888:	6293      	str	r3, [r2, #40]	; 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800b88a:	f7fb f859 	bl	8006940 <HAL_GetTick>
 800b88e:	62b8      	str	r0, [r7, #40]	; 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800b890:	e008      	b.n	800b8a4 <HAL_RCC_OscConfig+0x744>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b892:	f7fb f855 	bl	8006940 <HAL_GetTick>
 800b896:	4602      	mov	r2, r0
 800b898:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b89a:	1ad3      	subs	r3, r2, r3
 800b89c:	2b02      	cmp	r3, #2
 800b89e:	d901      	bls.n	800b8a4 <HAL_RCC_OscConfig+0x744>
        {
          return HAL_TIMEOUT;
 800b8a0:	2303      	movs	r3, #3
 800b8a2:	e32d      	b.n	800bf00 <HAL_RCC_OscConfig+0xda0>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800b8a4:	4b28      	ldr	r3, [pc, #160]	; (800b948 <HAL_RCC_OscConfig+0x7e8>)
 800b8a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b8a8:	f003 0301 	and.w	r3, r3, #1
 800b8ac:	2b00      	cmp	r3, #0
 800b8ae:	d0f0      	beq.n	800b892 <HAL_RCC_OscConfig+0x732>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	689b      	ldr	r3, [r3, #8]
 800b8b4:	f003 0301 	and.w	r3, r3, #1
 800b8b8:	2b00      	cmp	r3, #0
 800b8ba:	d01f      	beq.n	800b8fc <HAL_RCC_OscConfig+0x79c>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	689b      	ldr	r3, [r3, #8]
 800b8c0:	f003 0304 	and.w	r3, r3, #4
 800b8c4:	2b00      	cmp	r3, #0
 800b8c6:	d010      	beq.n	800b8ea <HAL_RCC_OscConfig+0x78a>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800b8c8:	4b1e      	ldr	r3, [pc, #120]	; (800b944 <HAL_RCC_OscConfig+0x7e4>)
 800b8ca:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800b8ce:	4a1d      	ldr	r2, [pc, #116]	; (800b944 <HAL_RCC_OscConfig+0x7e4>)
 800b8d0:	f043 0304 	orr.w	r3, r3, #4
 800b8d4:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800b8d8:	4b1a      	ldr	r3, [pc, #104]	; (800b944 <HAL_RCC_OscConfig+0x7e4>)
 800b8da:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800b8de:	4a19      	ldr	r2, [pc, #100]	; (800b944 <HAL_RCC_OscConfig+0x7e4>)
 800b8e0:	f043 0301 	orr.w	r3, r3, #1
 800b8e4:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800b8e8:	e018      	b.n	800b91c <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800b8ea:	4b16      	ldr	r3, [pc, #88]	; (800b944 <HAL_RCC_OscConfig+0x7e4>)
 800b8ec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800b8f0:	4a14      	ldr	r2, [pc, #80]	; (800b944 <HAL_RCC_OscConfig+0x7e4>)
 800b8f2:	f043 0301 	orr.w	r3, r3, #1
 800b8f6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800b8fa:	e00f      	b.n	800b91c <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800b8fc:	4b11      	ldr	r3, [pc, #68]	; (800b944 <HAL_RCC_OscConfig+0x7e4>)
 800b8fe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800b902:	4a10      	ldr	r2, [pc, #64]	; (800b944 <HAL_RCC_OscConfig+0x7e4>)
 800b904:	f023 0301 	bic.w	r3, r3, #1
 800b908:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800b90c:	4b0d      	ldr	r3, [pc, #52]	; (800b944 <HAL_RCC_OscConfig+0x7e4>)
 800b90e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800b912:	4a0c      	ldr	r2, [pc, #48]	; (800b944 <HAL_RCC_OscConfig+0x7e4>)
 800b914:	f023 0304 	bic.w	r3, r3, #4
 800b918:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	689b      	ldr	r3, [r3, #8]
 800b920:	2b00      	cmp	r3, #0
 800b922:	d058      	beq.n	800b9d6 <HAL_RCC_OscConfig+0x876>
    {
      tickstart = HAL_GetTick();
 800b924:	f7fb f80c 	bl	8006940 <HAL_GetTick>
 800b928:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800b92a:	e00f      	b.n	800b94c <HAL_RCC_OscConfig+0x7ec>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b92c:	f7fb f808 	bl	8006940 <HAL_GetTick>
 800b930:	4602      	mov	r2, r0
 800b932:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b934:	1ad3      	subs	r3, r2, r3
 800b936:	f241 3288 	movw	r2, #5000	; 0x1388
 800b93a:	4293      	cmp	r3, r2
 800b93c:	d906      	bls.n	800b94c <HAL_RCC_OscConfig+0x7ec>
        {
          return HAL_TIMEOUT;
 800b93e:	2303      	movs	r3, #3
 800b940:	e2de      	b.n	800bf00 <HAL_RCC_OscConfig+0xda0>
 800b942:	bf00      	nop
 800b944:	46020c00 	.word	0x46020c00
 800b948:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800b94c:	4b9c      	ldr	r3, [pc, #624]	; (800bbc0 <HAL_RCC_OscConfig+0xa60>)
 800b94e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800b952:	f003 0302 	and.w	r3, r3, #2
 800b956:	2b00      	cmp	r3, #0
 800b958:	d0e8      	beq.n	800b92c <HAL_RCC_OscConfig+0x7cc>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	689b      	ldr	r3, [r3, #8]
 800b95e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b962:	2b00      	cmp	r3, #0
 800b964:	d01b      	beq.n	800b99e <HAL_RCC_OscConfig+0x83e>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800b966:	4b96      	ldr	r3, [pc, #600]	; (800bbc0 <HAL_RCC_OscConfig+0xa60>)
 800b968:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800b96c:	4a94      	ldr	r2, [pc, #592]	; (800bbc0 <HAL_RCC_OscConfig+0xa60>)
 800b96e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b972:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800b976:	e00a      	b.n	800b98e <HAL_RCC_OscConfig+0x82e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b978:	f7fa ffe2 	bl	8006940 <HAL_GetTick>
 800b97c:	4602      	mov	r2, r0
 800b97e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b980:	1ad3      	subs	r3, r2, r3
 800b982:	f241 3288 	movw	r2, #5000	; 0x1388
 800b986:	4293      	cmp	r3, r2
 800b988:	d901      	bls.n	800b98e <HAL_RCC_OscConfig+0x82e>
          {
            return HAL_TIMEOUT;
 800b98a:	2303      	movs	r3, #3
 800b98c:	e2b8      	b.n	800bf00 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800b98e:	4b8c      	ldr	r3, [pc, #560]	; (800bbc0 <HAL_RCC_OscConfig+0xa60>)
 800b990:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800b994:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b998:	2b00      	cmp	r3, #0
 800b99a:	d0ed      	beq.n	800b978 <HAL_RCC_OscConfig+0x818>
 800b99c:	e053      	b.n	800ba46 <HAL_RCC_OscConfig+0x8e6>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800b99e:	4b88      	ldr	r3, [pc, #544]	; (800bbc0 <HAL_RCC_OscConfig+0xa60>)
 800b9a0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800b9a4:	4a86      	ldr	r2, [pc, #536]	; (800bbc0 <HAL_RCC_OscConfig+0xa60>)
 800b9a6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b9aa:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800b9ae:	e00a      	b.n	800b9c6 <HAL_RCC_OscConfig+0x866>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b9b0:	f7fa ffc6 	bl	8006940 <HAL_GetTick>
 800b9b4:	4602      	mov	r2, r0
 800b9b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9b8:	1ad3      	subs	r3, r2, r3
 800b9ba:	f241 3288 	movw	r2, #5000	; 0x1388
 800b9be:	4293      	cmp	r3, r2
 800b9c0:	d901      	bls.n	800b9c6 <HAL_RCC_OscConfig+0x866>
          {
            return HAL_TIMEOUT;
 800b9c2:	2303      	movs	r3, #3
 800b9c4:	e29c      	b.n	800bf00 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800b9c6:	4b7e      	ldr	r3, [pc, #504]	; (800bbc0 <HAL_RCC_OscConfig+0xa60>)
 800b9c8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800b9cc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b9d0:	2b00      	cmp	r3, #0
 800b9d2:	d1ed      	bne.n	800b9b0 <HAL_RCC_OscConfig+0x850>
 800b9d4:	e037      	b.n	800ba46 <HAL_RCC_OscConfig+0x8e6>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 800b9d6:	f7fa ffb3 	bl	8006940 <HAL_GetTick>
 800b9da:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800b9dc:	e00a      	b.n	800b9f4 <HAL_RCC_OscConfig+0x894>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b9de:	f7fa ffaf 	bl	8006940 <HAL_GetTick>
 800b9e2:	4602      	mov	r2, r0
 800b9e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9e6:	1ad3      	subs	r3, r2, r3
 800b9e8:	f241 3288 	movw	r2, #5000	; 0x1388
 800b9ec:	4293      	cmp	r3, r2
 800b9ee:	d901      	bls.n	800b9f4 <HAL_RCC_OscConfig+0x894>
        {
          return HAL_TIMEOUT;
 800b9f0:	2303      	movs	r3, #3
 800b9f2:	e285      	b.n	800bf00 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800b9f4:	4b72      	ldr	r3, [pc, #456]	; (800bbc0 <HAL_RCC_OscConfig+0xa60>)
 800b9f6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800b9fa:	f003 0302 	and.w	r3, r3, #2
 800b9fe:	2b00      	cmp	r3, #0
 800ba00:	d1ed      	bne.n	800b9de <HAL_RCC_OscConfig+0x87e>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 800ba02:	4b6f      	ldr	r3, [pc, #444]	; (800bbc0 <HAL_RCC_OscConfig+0xa60>)
 800ba04:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800ba08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ba0c:	2b00      	cmp	r3, #0
 800ba0e:	d01a      	beq.n	800ba46 <HAL_RCC_OscConfig+0x8e6>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800ba10:	4b6b      	ldr	r3, [pc, #428]	; (800bbc0 <HAL_RCC_OscConfig+0xa60>)
 800ba12:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800ba16:	4a6a      	ldr	r2, [pc, #424]	; (800bbc0 <HAL_RCC_OscConfig+0xa60>)
 800ba18:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ba1c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800ba20:	e00a      	b.n	800ba38 <HAL_RCC_OscConfig+0x8d8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ba22:	f7fa ff8d 	bl	8006940 <HAL_GetTick>
 800ba26:	4602      	mov	r2, r0
 800ba28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba2a:	1ad3      	subs	r3, r2, r3
 800ba2c:	f241 3288 	movw	r2, #5000	; 0x1388
 800ba30:	4293      	cmp	r3, r2
 800ba32:	d901      	bls.n	800ba38 <HAL_RCC_OscConfig+0x8d8>
          {
            return HAL_TIMEOUT;
 800ba34:	2303      	movs	r3, #3
 800ba36:	e263      	b.n	800bf00 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800ba38:	4b61      	ldr	r3, [pc, #388]	; (800bbc0 <HAL_RCC_OscConfig+0xa60>)
 800ba3a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800ba3e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ba42:	2b00      	cmp	r3, #0
 800ba44:	d1ed      	bne.n	800ba22 <HAL_RCC_OscConfig+0x8c2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800ba46:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800ba4a:	2b01      	cmp	r3, #1
 800ba4c:	d107      	bne.n	800ba5e <HAL_RCC_OscConfig+0x8fe>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800ba4e:	4b5c      	ldr	r3, [pc, #368]	; (800bbc0 <HAL_RCC_OscConfig+0xa60>)
 800ba50:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800ba54:	4a5a      	ldr	r2, [pc, #360]	; (800bbc0 <HAL_RCC_OscConfig+0xa60>)
 800ba56:	f023 0304 	bic.w	r3, r3, #4
 800ba5a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	681b      	ldr	r3, [r3, #0]
 800ba62:	f003 0320 	and.w	r3, r3, #32
 800ba66:	2b00      	cmp	r3, #0
 800ba68:	d036      	beq.n	800bad8 <HAL_RCC_OscConfig+0x978>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba6e:	2b00      	cmp	r3, #0
 800ba70:	d019      	beq.n	800baa6 <HAL_RCC_OscConfig+0x946>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 800ba72:	4b53      	ldr	r3, [pc, #332]	; (800bbc0 <HAL_RCC_OscConfig+0xa60>)
 800ba74:	681b      	ldr	r3, [r3, #0]
 800ba76:	4a52      	ldr	r2, [pc, #328]	; (800bbc0 <HAL_RCC_OscConfig+0xa60>)
 800ba78:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800ba7c:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800ba7e:	f7fa ff5f 	bl	8006940 <HAL_GetTick>
 800ba82:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800ba84:	e008      	b.n	800ba98 <HAL_RCC_OscConfig+0x938>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800ba86:	f7fa ff5b 	bl	8006940 <HAL_GetTick>
 800ba8a:	4602      	mov	r2, r0
 800ba8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba8e:	1ad3      	subs	r3, r2, r3
 800ba90:	2b02      	cmp	r3, #2
 800ba92:	d901      	bls.n	800ba98 <HAL_RCC_OscConfig+0x938>
        {
          return HAL_TIMEOUT;
 800ba94:	2303      	movs	r3, #3
 800ba96:	e233      	b.n	800bf00 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800ba98:	4b49      	ldr	r3, [pc, #292]	; (800bbc0 <HAL_RCC_OscConfig+0xa60>)
 800ba9a:	681b      	ldr	r3, [r3, #0]
 800ba9c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800baa0:	2b00      	cmp	r3, #0
 800baa2:	d0f0      	beq.n	800ba86 <HAL_RCC_OscConfig+0x926>
 800baa4:	e018      	b.n	800bad8 <HAL_RCC_OscConfig+0x978>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 800baa6:	4b46      	ldr	r3, [pc, #280]	; (800bbc0 <HAL_RCC_OscConfig+0xa60>)
 800baa8:	681b      	ldr	r3, [r3, #0]
 800baaa:	4a45      	ldr	r2, [pc, #276]	; (800bbc0 <HAL_RCC_OscConfig+0xa60>)
 800baac:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800bab0:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800bab2:	f7fa ff45 	bl	8006940 <HAL_GetTick>
 800bab6:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800bab8:	e008      	b.n	800bacc <HAL_RCC_OscConfig+0x96c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800baba:	f7fa ff41 	bl	8006940 <HAL_GetTick>
 800babe:	4602      	mov	r2, r0
 800bac0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bac2:	1ad3      	subs	r3, r2, r3
 800bac4:	2b02      	cmp	r3, #2
 800bac6:	d901      	bls.n	800bacc <HAL_RCC_OscConfig+0x96c>
        {
          return HAL_TIMEOUT;
 800bac8:	2303      	movs	r3, #3
 800baca:	e219      	b.n	800bf00 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800bacc:	4b3c      	ldr	r3, [pc, #240]	; (800bbc0 <HAL_RCC_OscConfig+0xa60>)
 800bace:	681b      	ldr	r3, [r3, #0]
 800bad0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800bad4:	2b00      	cmp	r3, #0
 800bad6:	d1f0      	bne.n	800baba <HAL_RCC_OscConfig+0x95a>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	681b      	ldr	r3, [r3, #0]
 800badc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bae0:	2b00      	cmp	r3, #0
 800bae2:	d036      	beq.n	800bb52 <HAL_RCC_OscConfig+0x9f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bae8:	2b00      	cmp	r3, #0
 800baea:	d019      	beq.n	800bb20 <HAL_RCC_OscConfig+0x9c0>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 800baec:	4b34      	ldr	r3, [pc, #208]	; (800bbc0 <HAL_RCC_OscConfig+0xa60>)
 800baee:	681b      	ldr	r3, [r3, #0]
 800baf0:	4a33      	ldr	r2, [pc, #204]	; (800bbc0 <HAL_RCC_OscConfig+0xa60>)
 800baf2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800baf6:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800baf8:	f7fa ff22 	bl	8006940 <HAL_GetTick>
 800bafc:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 800bafe:	e008      	b.n	800bb12 <HAL_RCC_OscConfig+0x9b2>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 800bb00:	f7fa ff1e 	bl	8006940 <HAL_GetTick>
 800bb04:	4602      	mov	r2, r0
 800bb06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb08:	1ad3      	subs	r3, r2, r3
 800bb0a:	2b02      	cmp	r3, #2
 800bb0c:	d901      	bls.n	800bb12 <HAL_RCC_OscConfig+0x9b2>
        {
          return HAL_TIMEOUT;
 800bb0e:	2303      	movs	r3, #3
 800bb10:	e1f6      	b.n	800bf00 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 800bb12:	4b2b      	ldr	r3, [pc, #172]	; (800bbc0 <HAL_RCC_OscConfig+0xa60>)
 800bb14:	681b      	ldr	r3, [r3, #0]
 800bb16:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800bb1a:	2b00      	cmp	r3, #0
 800bb1c:	d0f0      	beq.n	800bb00 <HAL_RCC_OscConfig+0x9a0>
 800bb1e:	e018      	b.n	800bb52 <HAL_RCC_OscConfig+0x9f2>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 800bb20:	4b27      	ldr	r3, [pc, #156]	; (800bbc0 <HAL_RCC_OscConfig+0xa60>)
 800bb22:	681b      	ldr	r3, [r3, #0]
 800bb24:	4a26      	ldr	r2, [pc, #152]	; (800bbc0 <HAL_RCC_OscConfig+0xa60>)
 800bb26:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800bb2a:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800bb2c:	f7fa ff08 	bl	8006940 <HAL_GetTick>
 800bb30:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 800bb32:	e008      	b.n	800bb46 <HAL_RCC_OscConfig+0x9e6>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 800bb34:	f7fa ff04 	bl	8006940 <HAL_GetTick>
 800bb38:	4602      	mov	r2, r0
 800bb3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb3c:	1ad3      	subs	r3, r2, r3
 800bb3e:	2b02      	cmp	r3, #2
 800bb40:	d901      	bls.n	800bb46 <HAL_RCC_OscConfig+0x9e6>
        {
          return HAL_TIMEOUT;
 800bb42:	2303      	movs	r3, #3
 800bb44:	e1dc      	b.n	800bf00 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 800bb46:	4b1e      	ldr	r3, [pc, #120]	; (800bbc0 <HAL_RCC_OscConfig+0xa60>)
 800bb48:	681b      	ldr	r3, [r3, #0]
 800bb4a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800bb4e:	2b00      	cmp	r3, #0
 800bb50:	d1f0      	bne.n	800bb34 <HAL_RCC_OscConfig+0x9d4>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	681b      	ldr	r3, [r3, #0]
 800bb56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bb5a:	2b00      	cmp	r3, #0
 800bb5c:	d07f      	beq.n	800bc5e <HAL_RCC_OscConfig+0xafe>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bb62:	2b00      	cmp	r3, #0
 800bb64:	d062      	beq.n	800bc2c <HAL_RCC_OscConfig+0xacc>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 800bb66:	4b16      	ldr	r3, [pc, #88]	; (800bbc0 <HAL_RCC_OscConfig+0xa60>)
 800bb68:	689b      	ldr	r3, [r3, #8]
 800bb6a:	4a15      	ldr	r2, [pc, #84]	; (800bbc0 <HAL_RCC_OscConfig+0xa60>)
 800bb6c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800bb70:	6093      	str	r3, [r2, #8]
 800bb72:	4b13      	ldr	r3, [pc, #76]	; (800bbc0 <HAL_RCC_OscConfig+0xa60>)
 800bb74:	689b      	ldr	r3, [r3, #8]
 800bb76:	f023 6270 	bic.w	r2, r3, #251658240	; 0xf000000
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bb7e:	4910      	ldr	r1, [pc, #64]	; (800bbc0 <HAL_RCC_OscConfig+0xa60>)
 800bb80:	4313      	orrs	r3, r2
 800bb82:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb88:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 800bb8c:	d309      	bcc.n	800bba2 <HAL_RCC_OscConfig+0xa42>
 800bb8e:	4b0c      	ldr	r3, [pc, #48]	; (800bbc0 <HAL_RCC_OscConfig+0xa60>)
 800bb90:	68db      	ldr	r3, [r3, #12]
 800bb92:	f023 021f 	bic.w	r2, r3, #31
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	6a1b      	ldr	r3, [r3, #32]
 800bb9a:	4909      	ldr	r1, [pc, #36]	; (800bbc0 <HAL_RCC_OscConfig+0xa60>)
 800bb9c:	4313      	orrs	r3, r2
 800bb9e:	60cb      	str	r3, [r1, #12]
 800bba0:	e02a      	b.n	800bbf8 <HAL_RCC_OscConfig+0xa98>
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bba6:	2b00      	cmp	r3, #0
 800bba8:	da0c      	bge.n	800bbc4 <HAL_RCC_OscConfig+0xa64>
 800bbaa:	4b05      	ldr	r3, [pc, #20]	; (800bbc0 <HAL_RCC_OscConfig+0xa60>)
 800bbac:	68db      	ldr	r3, [r3, #12]
 800bbae:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	6a1b      	ldr	r3, [r3, #32]
 800bbb6:	015b      	lsls	r3, r3, #5
 800bbb8:	4901      	ldr	r1, [pc, #4]	; (800bbc0 <HAL_RCC_OscConfig+0xa60>)
 800bbba:	4313      	orrs	r3, r2
 800bbbc:	60cb      	str	r3, [r1, #12]
 800bbbe:	e01b      	b.n	800bbf8 <HAL_RCC_OscConfig+0xa98>
 800bbc0:	46020c00 	.word	0x46020c00
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbc8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bbcc:	d30a      	bcc.n	800bbe4 <HAL_RCC_OscConfig+0xa84>
 800bbce:	4ba5      	ldr	r3, [pc, #660]	; (800be64 <HAL_RCC_OscConfig+0xd04>)
 800bbd0:	68db      	ldr	r3, [r3, #12]
 800bbd2:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	6a1b      	ldr	r3, [r3, #32]
 800bbda:	029b      	lsls	r3, r3, #10
 800bbdc:	49a1      	ldr	r1, [pc, #644]	; (800be64 <HAL_RCC_OscConfig+0xd04>)
 800bbde:	4313      	orrs	r3, r2
 800bbe0:	60cb      	str	r3, [r1, #12]
 800bbe2:	e009      	b.n	800bbf8 <HAL_RCC_OscConfig+0xa98>
 800bbe4:	4b9f      	ldr	r3, [pc, #636]	; (800be64 <HAL_RCC_OscConfig+0xd04>)
 800bbe6:	68db      	ldr	r3, [r3, #12]
 800bbe8:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	6a1b      	ldr	r3, [r3, #32]
 800bbf0:	03db      	lsls	r3, r3, #15
 800bbf2:	499c      	ldr	r1, [pc, #624]	; (800be64 <HAL_RCC_OscConfig+0xd04>)
 800bbf4:	4313      	orrs	r3, r2
 800bbf6:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 800bbf8:	4b9a      	ldr	r3, [pc, #616]	; (800be64 <HAL_RCC_OscConfig+0xd04>)
 800bbfa:	681b      	ldr	r3, [r3, #0]
 800bbfc:	4a99      	ldr	r2, [pc, #612]	; (800be64 <HAL_RCC_OscConfig+0xd04>)
 800bbfe:	f043 0310 	orr.w	r3, r3, #16
 800bc02:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800bc04:	f7fa fe9c 	bl	8006940 <HAL_GetTick>
 800bc08:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 800bc0a:	e008      	b.n	800bc1e <HAL_RCC_OscConfig+0xabe>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 800bc0c:	f7fa fe98 	bl	8006940 <HAL_GetTick>
 800bc10:	4602      	mov	r2, r0
 800bc12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc14:	1ad3      	subs	r3, r2, r3
 800bc16:	2b02      	cmp	r3, #2
 800bc18:	d901      	bls.n	800bc1e <HAL_RCC_OscConfig+0xabe>
        {
          return HAL_TIMEOUT;
 800bc1a:	2303      	movs	r3, #3
 800bc1c:	e170      	b.n	800bf00 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 800bc1e:	4b91      	ldr	r3, [pc, #580]	; (800be64 <HAL_RCC_OscConfig+0xd04>)
 800bc20:	681b      	ldr	r3, [r3, #0]
 800bc22:	f003 0320 	and.w	r3, r3, #32
 800bc26:	2b00      	cmp	r3, #0
 800bc28:	d0f0      	beq.n	800bc0c <HAL_RCC_OscConfig+0xaac>
 800bc2a:	e018      	b.n	800bc5e <HAL_RCC_OscConfig+0xafe>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 800bc2c:	4b8d      	ldr	r3, [pc, #564]	; (800be64 <HAL_RCC_OscConfig+0xd04>)
 800bc2e:	681b      	ldr	r3, [r3, #0]
 800bc30:	4a8c      	ldr	r2, [pc, #560]	; (800be64 <HAL_RCC_OscConfig+0xd04>)
 800bc32:	f023 0310 	bic.w	r3, r3, #16
 800bc36:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800bc38:	f7fa fe82 	bl	8006940 <HAL_GetTick>
 800bc3c:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 800bc3e:	e008      	b.n	800bc52 <HAL_RCC_OscConfig+0xaf2>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 800bc40:	f7fa fe7e 	bl	8006940 <HAL_GetTick>
 800bc44:	4602      	mov	r2, r0
 800bc46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc48:	1ad3      	subs	r3, r2, r3
 800bc4a:	2b02      	cmp	r3, #2
 800bc4c:	d901      	bls.n	800bc52 <HAL_RCC_OscConfig+0xaf2>
        {
          return HAL_TIMEOUT;
 800bc4e:	2303      	movs	r3, #3
 800bc50:	e156      	b.n	800bf00 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 800bc52:	4b84      	ldr	r3, [pc, #528]	; (800be64 <HAL_RCC_OscConfig+0xd04>)
 800bc54:	681b      	ldr	r3, [r3, #0]
 800bc56:	f003 0320 	and.w	r3, r3, #32
 800bc5a:	2b00      	cmp	r3, #0
 800bc5c:	d1f0      	bne.n	800bc40 <HAL_RCC_OscConfig+0xae0>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bc62:	2b00      	cmp	r3, #0
 800bc64:	f000 814b 	beq.w	800befe <HAL_RCC_OscConfig+0xd9e>
  {
    FlagStatus  pwrclkchanged = RESET;
 800bc68:	2300      	movs	r3, #0
 800bc6a:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800bc6e:	4b7d      	ldr	r3, [pc, #500]	; (800be64 <HAL_RCC_OscConfig+0xd04>)
 800bc70:	69db      	ldr	r3, [r3, #28]
 800bc72:	f003 030c 	and.w	r3, r3, #12
 800bc76:	2b0c      	cmp	r3, #12
 800bc78:	f000 80fa 	beq.w	800be70 <HAL_RCC_OscConfig+0xd10>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bc80:	2b02      	cmp	r3, #2
 800bc82:	f040 80cc 	bne.w	800be1e <HAL_RCC_OscConfig+0xcbe>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 800bc86:	4b77      	ldr	r3, [pc, #476]	; (800be64 <HAL_RCC_OscConfig+0xd04>)
 800bc88:	681b      	ldr	r3, [r3, #0]
 800bc8a:	4a76      	ldr	r2, [pc, #472]	; (800be64 <HAL_RCC_OscConfig+0xd04>)
 800bc8c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800bc90:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800bc92:	f7fa fe55 	bl	8006940 <HAL_GetTick>
 800bc96:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800bc98:	e008      	b.n	800bcac <HAL_RCC_OscConfig+0xb4c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800bc9a:	f7fa fe51 	bl	8006940 <HAL_GetTick>
 800bc9e:	4602      	mov	r2, r0
 800bca0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bca2:	1ad3      	subs	r3, r2, r3
 800bca4:	2b02      	cmp	r3, #2
 800bca6:	d901      	bls.n	800bcac <HAL_RCC_OscConfig+0xb4c>
          {
            return HAL_TIMEOUT;
 800bca8:	2303      	movs	r3, #3
 800bcaa:	e129      	b.n	800bf00 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800bcac:	4b6d      	ldr	r3, [pc, #436]	; (800be64 <HAL_RCC_OscConfig+0xd04>)
 800bcae:	681b      	ldr	r3, [r3, #0]
 800bcb0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bcb4:	2b00      	cmp	r3, #0
 800bcb6:	d1f0      	bne.n	800bc9a <HAL_RCC_OscConfig+0xb3a>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800bcb8:	4b6a      	ldr	r3, [pc, #424]	; (800be64 <HAL_RCC_OscConfig+0xd04>)
 800bcba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800bcbe:	f003 0304 	and.w	r3, r3, #4
 800bcc2:	2b00      	cmp	r3, #0
 800bcc4:	d111      	bne.n	800bcea <HAL_RCC_OscConfig+0xb8a>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 800bcc6:	4b67      	ldr	r3, [pc, #412]	; (800be64 <HAL_RCC_OscConfig+0xd04>)
 800bcc8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800bccc:	4a65      	ldr	r2, [pc, #404]	; (800be64 <HAL_RCC_OscConfig+0xd04>)
 800bcce:	f043 0304 	orr.w	r3, r3, #4
 800bcd2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800bcd6:	4b63      	ldr	r3, [pc, #396]	; (800be64 <HAL_RCC_OscConfig+0xd04>)
 800bcd8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800bcdc:	f003 0304 	and.w	r3, r3, #4
 800bce0:	60fb      	str	r3, [r7, #12]
 800bce2:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 800bce4:	2301      	movs	r3, #1
 800bce6:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 800bcea:	4b5f      	ldr	r3, [pc, #380]	; (800be68 <HAL_RCC_OscConfig+0xd08>)
 800bcec:	68db      	ldr	r3, [r3, #12]
 800bcee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800bcf2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800bcf6:	d102      	bne.n	800bcfe <HAL_RCC_OscConfig+0xb9e>
        {
          pwrboosten = SET;
 800bcf8:	2301      	movs	r3, #1
 800bcfa:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 800bcfe:	4b5a      	ldr	r3, [pc, #360]	; (800be68 <HAL_RCC_OscConfig+0xd08>)
 800bd00:	68db      	ldr	r3, [r3, #12]
 800bd02:	4a59      	ldr	r2, [pc, #356]	; (800be68 <HAL_RCC_OscConfig+0xd08>)
 800bd04:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800bd08:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 800bd0a:	4b56      	ldr	r3, [pc, #344]	; (800be64 <HAL_RCC_OscConfig+0xd04>)
 800bd0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bd0e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800bd12:	f023 0303 	bic.w	r3, r3, #3
 800bd16:	687a      	ldr	r2, [r7, #4]
 800bd18:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800bd1a:	687a      	ldr	r2, [r7, #4]
 800bd1c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800bd1e:	3a01      	subs	r2, #1
 800bd20:	0212      	lsls	r2, r2, #8
 800bd22:	4311      	orrs	r1, r2
 800bd24:	687a      	ldr	r2, [r7, #4]
 800bd26:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800bd28:	430a      	orrs	r2, r1
 800bd2a:	494e      	ldr	r1, [pc, #312]	; (800be64 <HAL_RCC_OscConfig+0xd04>)
 800bd2c:	4313      	orrs	r3, r2
 800bd2e:	628b      	str	r3, [r1, #40]	; 0x28
 800bd30:	4b4c      	ldr	r3, [pc, #304]	; (800be64 <HAL_RCC_OscConfig+0xd04>)
 800bd32:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800bd34:	4b4d      	ldr	r3, [pc, #308]	; (800be6c <HAL_RCC_OscConfig+0xd0c>)
 800bd36:	4013      	ands	r3, r2
 800bd38:	687a      	ldr	r2, [r7, #4]
 800bd3a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800bd3c:	3a01      	subs	r2, #1
 800bd3e:	f3c2 0108 	ubfx	r1, r2, #0, #9
 800bd42:	687a      	ldr	r2, [r7, #4]
 800bd44:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800bd46:	3a01      	subs	r2, #1
 800bd48:	0252      	lsls	r2, r2, #9
 800bd4a:	b292      	uxth	r2, r2
 800bd4c:	4311      	orrs	r1, r2
 800bd4e:	687a      	ldr	r2, [r7, #4]
 800bd50:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800bd52:	3a01      	subs	r2, #1
 800bd54:	0412      	lsls	r2, r2, #16
 800bd56:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 800bd5a:	4311      	orrs	r1, r2
 800bd5c:	687a      	ldr	r2, [r7, #4]
 800bd5e:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800bd60:	3a01      	subs	r2, #1
 800bd62:	0612      	lsls	r2, r2, #24
 800bd64:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 800bd68:	430a      	orrs	r2, r1
 800bd6a:	493e      	ldr	r1, [pc, #248]	; (800be64 <HAL_RCC_OscConfig+0xd04>)
 800bd6c:	4313      	orrs	r3, r2
 800bd6e:	634b      	str	r3, [r1, #52]	; 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLLFRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLLFRACN_DISABLE();
 800bd70:	4b3c      	ldr	r3, [pc, #240]	; (800be64 <HAL_RCC_OscConfig+0xd04>)
 800bd72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bd74:	4a3b      	ldr	r2, [pc, #236]	; (800be64 <HAL_RCC_OscConfig+0xd04>)
 800bd76:	f023 0310 	bic.w	r3, r3, #16
 800bd7a:	6293      	str	r3, [r2, #40]	; 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 800bd7c:	4b39      	ldr	r3, [pc, #228]	; (800be64 <HAL_RCC_OscConfig+0xd04>)
 800bd7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd80:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800bd84:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800bd88:	687a      	ldr	r2, [r7, #4]
 800bd8a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800bd8c:	00d2      	lsls	r2, r2, #3
 800bd8e:	4935      	ldr	r1, [pc, #212]	; (800be64 <HAL_RCC_OscConfig+0xd04>)
 800bd90:	4313      	orrs	r3, r2
 800bd92:	638b      	str	r3, [r1, #56]	; 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLLFRACN_ENABLE();
 800bd94:	4b33      	ldr	r3, [pc, #204]	; (800be64 <HAL_RCC_OscConfig+0xd04>)
 800bd96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bd98:	4a32      	ldr	r2, [pc, #200]	; (800be64 <HAL_RCC_OscConfig+0xd04>)
 800bd9a:	f043 0310 	orr.w	r3, r3, #16
 800bd9e:	6293      	str	r3, [r2, #40]	; 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 800bda0:	4b30      	ldr	r3, [pc, #192]	; (800be64 <HAL_RCC_OscConfig+0xd04>)
 800bda2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bda4:	f023 020c 	bic.w	r2, r3, #12
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bdac:	492d      	ldr	r1, [pc, #180]	; (800be64 <HAL_RCC_OscConfig+0xd04>)
 800bdae:	4313      	orrs	r3, r2
 800bdb0:	628b      	str	r3, [r1, #40]	; 0x28

        if (pwrboosten == SET)
 800bdb2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800bdb6:	2b01      	cmp	r3, #1
 800bdb8:	d105      	bne.n	800bdc6 <HAL_RCC_OscConfig+0xc66>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 800bdba:	4b2b      	ldr	r3, [pc, #172]	; (800be68 <HAL_RCC_OscConfig+0xd08>)
 800bdbc:	68db      	ldr	r3, [r3, #12]
 800bdbe:	4a2a      	ldr	r2, [pc, #168]	; (800be68 <HAL_RCC_OscConfig+0xd08>)
 800bdc0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800bdc4:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 800bdc6:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800bdca:	2b01      	cmp	r3, #1
 800bdcc:	d107      	bne.n	800bdde <HAL_RCC_OscConfig+0xc7e>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 800bdce:	4b25      	ldr	r3, [pc, #148]	; (800be64 <HAL_RCC_OscConfig+0xd04>)
 800bdd0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800bdd4:	4a23      	ldr	r2, [pc, #140]	; (800be64 <HAL_RCC_OscConfig+0xd04>)
 800bdd6:	f023 0304 	bic.w	r3, r3, #4
 800bdda:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800bdde:	4b21      	ldr	r3, [pc, #132]	; (800be64 <HAL_RCC_OscConfig+0xd04>)
 800bde0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bde2:	4a20      	ldr	r2, [pc, #128]	; (800be64 <HAL_RCC_OscConfig+0xd04>)
 800bde4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800bde8:	6293      	str	r3, [r2, #40]	; 0x28

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 800bdea:	4b1e      	ldr	r3, [pc, #120]	; (800be64 <HAL_RCC_OscConfig+0xd04>)
 800bdec:	681b      	ldr	r3, [r3, #0]
 800bdee:	4a1d      	ldr	r2, [pc, #116]	; (800be64 <HAL_RCC_OscConfig+0xd04>)
 800bdf0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800bdf4:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800bdf6:	f7fa fda3 	bl	8006940 <HAL_GetTick>
 800bdfa:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800bdfc:	e008      	b.n	800be10 <HAL_RCC_OscConfig+0xcb0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800bdfe:	f7fa fd9f 	bl	8006940 <HAL_GetTick>
 800be02:	4602      	mov	r2, r0
 800be04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be06:	1ad3      	subs	r3, r2, r3
 800be08:	2b02      	cmp	r3, #2
 800be0a:	d901      	bls.n	800be10 <HAL_RCC_OscConfig+0xcb0>
          {
            return HAL_TIMEOUT;
 800be0c:	2303      	movs	r3, #3
 800be0e:	e077      	b.n	800bf00 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800be10:	4b14      	ldr	r3, [pc, #80]	; (800be64 <HAL_RCC_OscConfig+0xd04>)
 800be12:	681b      	ldr	r3, [r3, #0]
 800be14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800be18:	2b00      	cmp	r3, #0
 800be1a:	d0f0      	beq.n	800bdfe <HAL_RCC_OscConfig+0xc9e>
 800be1c:	e06f      	b.n	800befe <HAL_RCC_OscConfig+0xd9e>
        }
      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 800be1e:	4b11      	ldr	r3, [pc, #68]	; (800be64 <HAL_RCC_OscConfig+0xd04>)
 800be20:	681b      	ldr	r3, [r3, #0]
 800be22:	4a10      	ldr	r2, [pc, #64]	; (800be64 <HAL_RCC_OscConfig+0xd04>)
 800be24:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800be28:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800be2a:	f7fa fd89 	bl	8006940 <HAL_GetTick>
 800be2e:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800be30:	e008      	b.n	800be44 <HAL_RCC_OscConfig+0xce4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800be32:	f7fa fd85 	bl	8006940 <HAL_GetTick>
 800be36:	4602      	mov	r2, r0
 800be38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be3a:	1ad3      	subs	r3, r2, r3
 800be3c:	2b02      	cmp	r3, #2
 800be3e:	d901      	bls.n	800be44 <HAL_RCC_OscConfig+0xce4>
          {
            return HAL_TIMEOUT;
 800be40:	2303      	movs	r3, #3
 800be42:	e05d      	b.n	800bf00 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800be44:	4b07      	ldr	r3, [pc, #28]	; (800be64 <HAL_RCC_OscConfig+0xd04>)
 800be46:	681b      	ldr	r3, [r3, #0]
 800be48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800be4c:	2b00      	cmp	r3, #0
 800be4e:	d1f0      	bne.n	800be32 <HAL_RCC_OscConfig+0xcd2>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 800be50:	4b04      	ldr	r3, [pc, #16]	; (800be64 <HAL_RCC_OscConfig+0xd04>)
 800be52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800be54:	4a03      	ldr	r2, [pc, #12]	; (800be64 <HAL_RCC_OscConfig+0xd04>)
 800be56:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 800be5a:	f023 0303 	bic.w	r3, r3, #3
 800be5e:	6293      	str	r3, [r2, #40]	; 0x28
 800be60:	e04d      	b.n	800befe <HAL_RCC_OscConfig+0xd9e>
 800be62:	bf00      	nop
 800be64:	46020c00 	.word	0x46020c00
 800be68:	46020800 	.word	0x46020800
 800be6c:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 800be70:	4b25      	ldr	r3, [pc, #148]	; (800bf08 <HAL_RCC_OscConfig+0xda8>)
 800be72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800be74:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800be76:	4b24      	ldr	r3, [pc, #144]	; (800bf08 <HAL_RCC_OscConfig+0xda8>)
 800be78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800be7a:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be80:	2b01      	cmp	r3, #1
 800be82:	d03a      	beq.n	800befa <HAL_RCC_OscConfig+0xd9a>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 800be84:	69fb      	ldr	r3, [r7, #28]
 800be86:	f003 0203 	and.w	r2, r3, #3
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800be8e:	429a      	cmp	r2, r3
 800be90:	d133      	bne.n	800befa <HAL_RCC_OscConfig+0xd9a>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 800be92:	69fb      	ldr	r3, [r7, #28]
 800be94:	0a1b      	lsrs	r3, r3, #8
 800be96:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be9e:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 800bea0:	429a      	cmp	r2, r3
 800bea2:	d12a      	bne.n	800befa <HAL_RCC_OscConfig+0xd9a>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) >> \
 800bea4:	69fb      	ldr	r3, [r7, #28]
 800bea6:	0b1b      	lsrs	r3, r3, #12
 800bea8:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1MBOOST_Pos) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 800beb0:	429a      	cmp	r2, r3
 800beb2:	d122      	bne.n	800befa <HAL_RCC_OscConfig+0xd9a>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800beb4:	69bb      	ldr	r3, [r7, #24]
 800beb6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bebe:	3b01      	subs	r3, #1
            RCC_PLL1CFGR_PLL1MBOOST_Pos) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 800bec0:	429a      	cmp	r2, r3
 800bec2:	d11a      	bne.n	800befa <HAL_RCC_OscConfig+0xd9a>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 800bec4:	69bb      	ldr	r3, [r7, #24]
 800bec6:	0a5b      	lsrs	r3, r3, #9
 800bec8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bed0:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800bed2:	429a      	cmp	r2, r3
 800bed4:	d111      	bne.n	800befa <HAL_RCC_OscConfig+0xd9a>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 800bed6:	69bb      	ldr	r3, [r7, #24]
 800bed8:	0c1b      	lsrs	r3, r3, #16
 800beda:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bee2:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800bee4:	429a      	cmp	r2, r3
 800bee6:	d108      	bne.n	800befa <HAL_RCC_OscConfig+0xd9a>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 800bee8:	69bb      	ldr	r3, [r7, #24]
 800beea:	0e1b      	lsrs	r3, r3, #24
 800beec:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bef4:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800bef6:	429a      	cmp	r2, r3
 800bef8:	d001      	beq.n	800befe <HAL_RCC_OscConfig+0xd9e>
      {
        return HAL_ERROR;
 800befa:	2301      	movs	r3, #1
 800befc:	e000      	b.n	800bf00 <HAL_RCC_OscConfig+0xda0>
      }
    }
  }
  return HAL_OK;
 800befe:	2300      	movs	r3, #0
}
 800bf00:	4618      	mov	r0, r3
 800bf02:	3738      	adds	r7, #56	; 0x38
 800bf04:	46bd      	mov	sp, r7
 800bf06:	bd80      	pop	{r7, pc}
 800bf08:	46020c00 	.word	0x46020c00

0800bf0c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 800bf0c:	b580      	push	{r7, lr}
 800bf0e:	b086      	sub	sp, #24
 800bf10:	af00      	add	r7, sp, #0
 800bf12:	6078      	str	r0, [r7, #4]
 800bf14:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	2b00      	cmp	r3, #0
 800bf1a:	d101      	bne.n	800bf20 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800bf1c:	2301      	movs	r3, #1
 800bf1e:	e1d9      	b.n	800c2d4 <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800bf20:	4b9b      	ldr	r3, [pc, #620]	; (800c190 <HAL_RCC_ClockConfig+0x284>)
 800bf22:	681b      	ldr	r3, [r3, #0]
 800bf24:	f003 030f 	and.w	r3, r3, #15
 800bf28:	683a      	ldr	r2, [r7, #0]
 800bf2a:	429a      	cmp	r2, r3
 800bf2c:	d910      	bls.n	800bf50 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800bf2e:	4b98      	ldr	r3, [pc, #608]	; (800c190 <HAL_RCC_ClockConfig+0x284>)
 800bf30:	681b      	ldr	r3, [r3, #0]
 800bf32:	f023 020f 	bic.w	r2, r3, #15
 800bf36:	4996      	ldr	r1, [pc, #600]	; (800c190 <HAL_RCC_ClockConfig+0x284>)
 800bf38:	683b      	ldr	r3, [r7, #0]
 800bf3a:	4313      	orrs	r3, r2
 800bf3c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800bf3e:	4b94      	ldr	r3, [pc, #592]	; (800c190 <HAL_RCC_ClockConfig+0x284>)
 800bf40:	681b      	ldr	r3, [r3, #0]
 800bf42:	f003 030f 	and.w	r3, r3, #15
 800bf46:	683a      	ldr	r2, [r7, #0]
 800bf48:	429a      	cmp	r2, r3
 800bf4a:	d001      	beq.n	800bf50 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800bf4c:	2301      	movs	r3, #1
 800bf4e:	e1c1      	b.n	800c2d4 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	681b      	ldr	r3, [r3, #0]
 800bf54:	f003 0310 	and.w	r3, r3, #16
 800bf58:	2b00      	cmp	r3, #0
 800bf5a:	d010      	beq.n	800bf7e <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	695a      	ldr	r2, [r3, #20]
 800bf60:	4b8c      	ldr	r3, [pc, #560]	; (800c194 <HAL_RCC_ClockConfig+0x288>)
 800bf62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf64:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800bf68:	429a      	cmp	r2, r3
 800bf6a:	d908      	bls.n	800bf7e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 800bf6c:	4b89      	ldr	r3, [pc, #548]	; (800c194 <HAL_RCC_ClockConfig+0x288>)
 800bf6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf70:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	695b      	ldr	r3, [r3, #20]
 800bf78:	4986      	ldr	r1, [pc, #536]	; (800c194 <HAL_RCC_ClockConfig+0x288>)
 800bf7a:	4313      	orrs	r3, r2
 800bf7c:	624b      	str	r3, [r1, #36]	; 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	681b      	ldr	r3, [r3, #0]
 800bf82:	f003 0308 	and.w	r3, r3, #8
 800bf86:	2b00      	cmp	r3, #0
 800bf88:	d012      	beq.n	800bfb0 <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	691a      	ldr	r2, [r3, #16]
 800bf8e:	4b81      	ldr	r3, [pc, #516]	; (800c194 <HAL_RCC_ClockConfig+0x288>)
 800bf90:	6a1b      	ldr	r3, [r3, #32]
 800bf92:	091b      	lsrs	r3, r3, #4
 800bf94:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800bf98:	429a      	cmp	r2, r3
 800bf9a:	d909      	bls.n	800bfb0 <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 800bf9c:	4b7d      	ldr	r3, [pc, #500]	; (800c194 <HAL_RCC_ClockConfig+0x288>)
 800bf9e:	6a1b      	ldr	r3, [r3, #32]
 800bfa0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	691b      	ldr	r3, [r3, #16]
 800bfa8:	011b      	lsls	r3, r3, #4
 800bfaa:	497a      	ldr	r1, [pc, #488]	; (800c194 <HAL_RCC_ClockConfig+0x288>)
 800bfac:	4313      	orrs	r3, r2
 800bfae:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	681b      	ldr	r3, [r3, #0]
 800bfb4:	f003 0304 	and.w	r3, r3, #4
 800bfb8:	2b00      	cmp	r3, #0
 800bfba:	d010      	beq.n	800bfde <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	68da      	ldr	r2, [r3, #12]
 800bfc0:	4b74      	ldr	r3, [pc, #464]	; (800c194 <HAL_RCC_ClockConfig+0x288>)
 800bfc2:	6a1b      	ldr	r3, [r3, #32]
 800bfc4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800bfc8:	429a      	cmp	r2, r3
 800bfca:	d908      	bls.n	800bfde <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 800bfcc:	4b71      	ldr	r3, [pc, #452]	; (800c194 <HAL_RCC_ClockConfig+0x288>)
 800bfce:	6a1b      	ldr	r3, [r3, #32]
 800bfd0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	68db      	ldr	r3, [r3, #12]
 800bfd8:	496e      	ldr	r1, [pc, #440]	; (800c194 <HAL_RCC_ClockConfig+0x288>)
 800bfda:	4313      	orrs	r3, r2
 800bfdc:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	681b      	ldr	r3, [r3, #0]
 800bfe2:	f003 0302 	and.w	r3, r3, #2
 800bfe6:	2b00      	cmp	r3, #0
 800bfe8:	d010      	beq.n	800c00c <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	689a      	ldr	r2, [r3, #8]
 800bfee:	4b69      	ldr	r3, [pc, #420]	; (800c194 <HAL_RCC_ClockConfig+0x288>)
 800bff0:	6a1b      	ldr	r3, [r3, #32]
 800bff2:	f003 030f 	and.w	r3, r3, #15
 800bff6:	429a      	cmp	r2, r3
 800bff8:	d908      	bls.n	800c00c <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 800bffa:	4b66      	ldr	r3, [pc, #408]	; (800c194 <HAL_RCC_ClockConfig+0x288>)
 800bffc:	6a1b      	ldr	r3, [r3, #32]
 800bffe:	f023 020f 	bic.w	r2, r3, #15
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	689b      	ldr	r3, [r3, #8]
 800c006:	4963      	ldr	r1, [pc, #396]	; (800c194 <HAL_RCC_ClockConfig+0x288>)
 800c008:	4313      	orrs	r3, r2
 800c00a:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	681b      	ldr	r3, [r3, #0]
 800c010:	f003 0301 	and.w	r3, r3, #1
 800c014:	2b00      	cmp	r3, #0
 800c016:	f000 80d2 	beq.w	800c1be <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 800c01a:	2300      	movs	r3, #0
 800c01c:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	685b      	ldr	r3, [r3, #4]
 800c022:	2b03      	cmp	r3, #3
 800c024:	d143      	bne.n	800c0ae <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800c026:	4b5b      	ldr	r3, [pc, #364]	; (800c194 <HAL_RCC_ClockConfig+0x288>)
 800c028:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c02c:	f003 0304 	and.w	r3, r3, #4
 800c030:	2b00      	cmp	r3, #0
 800c032:	d110      	bne.n	800c056 <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800c034:	4b57      	ldr	r3, [pc, #348]	; (800c194 <HAL_RCC_ClockConfig+0x288>)
 800c036:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c03a:	4a56      	ldr	r2, [pc, #344]	; (800c194 <HAL_RCC_ClockConfig+0x288>)
 800c03c:	f043 0304 	orr.w	r3, r3, #4
 800c040:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800c044:	4b53      	ldr	r3, [pc, #332]	; (800c194 <HAL_RCC_ClockConfig+0x288>)
 800c046:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c04a:	f003 0304 	and.w	r3, r3, #4
 800c04e:	60bb      	str	r3, [r7, #8]
 800c050:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 800c052:	2301      	movs	r3, #1
 800c054:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 800c056:	f7fa fc73 	bl	8006940 <HAL_GetTick>
 800c05a:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 800c05c:	4b4e      	ldr	r3, [pc, #312]	; (800c198 <HAL_RCC_ClockConfig+0x28c>)
 800c05e:	68db      	ldr	r3, [r3, #12]
 800c060:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800c064:	2b00      	cmp	r3, #0
 800c066:	d00f      	beq.n	800c088 <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 800c068:	e008      	b.n	800c07c <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 800c06a:	f7fa fc69 	bl	8006940 <HAL_GetTick>
 800c06e:	4602      	mov	r2, r0
 800c070:	693b      	ldr	r3, [r7, #16]
 800c072:	1ad3      	subs	r3, r2, r3
 800c074:	2b02      	cmp	r3, #2
 800c076:	d901      	bls.n	800c07c <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 800c078:	2303      	movs	r3, #3
 800c07a:	e12b      	b.n	800c2d4 <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 800c07c:	4b46      	ldr	r3, [pc, #280]	; (800c198 <HAL_RCC_ClockConfig+0x28c>)
 800c07e:	68db      	ldr	r3, [r3, #12]
 800c080:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c084:	2b00      	cmp	r3, #0
 800c086:	d0f0      	beq.n	800c06a <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800c088:	7dfb      	ldrb	r3, [r7, #23]
 800c08a:	2b01      	cmp	r3, #1
 800c08c:	d107      	bne.n	800c09e <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 800c08e:	4b41      	ldr	r3, [pc, #260]	; (800c194 <HAL_RCC_ClockConfig+0x288>)
 800c090:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c094:	4a3f      	ldr	r2, [pc, #252]	; (800c194 <HAL_RCC_ClockConfig+0x288>)
 800c096:	f023 0304 	bic.w	r3, r3, #4
 800c09a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800c09e:	4b3d      	ldr	r3, [pc, #244]	; (800c194 <HAL_RCC_ClockConfig+0x288>)
 800c0a0:	681b      	ldr	r3, [r3, #0]
 800c0a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c0a6:	2b00      	cmp	r3, #0
 800c0a8:	d121      	bne.n	800c0ee <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 800c0aa:	2301      	movs	r3, #1
 800c0ac:	e112      	b.n	800c2d4 <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	685b      	ldr	r3, [r3, #4]
 800c0b2:	2b02      	cmp	r3, #2
 800c0b4:	d107      	bne.n	800c0c6 <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800c0b6:	4b37      	ldr	r3, [pc, #220]	; (800c194 <HAL_RCC_ClockConfig+0x288>)
 800c0b8:	681b      	ldr	r3, [r3, #0]
 800c0ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c0be:	2b00      	cmp	r3, #0
 800c0c0:	d115      	bne.n	800c0ee <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 800c0c2:	2301      	movs	r3, #1
 800c0c4:	e106      	b.n	800c2d4 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	685b      	ldr	r3, [r3, #4]
 800c0ca:	2b00      	cmp	r3, #0
 800c0cc:	d107      	bne.n	800c0de <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 800c0ce:	4b31      	ldr	r3, [pc, #196]	; (800c194 <HAL_RCC_ClockConfig+0x288>)
 800c0d0:	681b      	ldr	r3, [r3, #0]
 800c0d2:	f003 0304 	and.w	r3, r3, #4
 800c0d6:	2b00      	cmp	r3, #0
 800c0d8:	d109      	bne.n	800c0ee <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 800c0da:	2301      	movs	r3, #1
 800c0dc:	e0fa      	b.n	800c2d4 <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800c0de:	4b2d      	ldr	r3, [pc, #180]	; (800c194 <HAL_RCC_ClockConfig+0x288>)
 800c0e0:	681b      	ldr	r3, [r3, #0]
 800c0e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c0e6:	2b00      	cmp	r3, #0
 800c0e8:	d101      	bne.n	800c0ee <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 800c0ea:	2301      	movs	r3, #1
 800c0ec:	e0f2      	b.n	800c2d4 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 800c0ee:	4b29      	ldr	r3, [pc, #164]	; (800c194 <HAL_RCC_ClockConfig+0x288>)
 800c0f0:	69db      	ldr	r3, [r3, #28]
 800c0f2:	f023 0203 	bic.w	r2, r3, #3
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	685b      	ldr	r3, [r3, #4]
 800c0fa:	4926      	ldr	r1, [pc, #152]	; (800c194 <HAL_RCC_ClockConfig+0x288>)
 800c0fc:	4313      	orrs	r3, r2
 800c0fe:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 800c100:	f7fa fc1e 	bl	8006940 <HAL_GetTick>
 800c104:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	685b      	ldr	r3, [r3, #4]
 800c10a:	2b03      	cmp	r3, #3
 800c10c:	d112      	bne.n	800c134 <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800c10e:	e00a      	b.n	800c126 <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800c110:	f7fa fc16 	bl	8006940 <HAL_GetTick>
 800c114:	4602      	mov	r2, r0
 800c116:	693b      	ldr	r3, [r7, #16]
 800c118:	1ad3      	subs	r3, r2, r3
 800c11a:	f241 3288 	movw	r2, #5000	; 0x1388
 800c11e:	4293      	cmp	r3, r2
 800c120:	d901      	bls.n	800c126 <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 800c122:	2303      	movs	r3, #3
 800c124:	e0d6      	b.n	800c2d4 <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800c126:	4b1b      	ldr	r3, [pc, #108]	; (800c194 <HAL_RCC_ClockConfig+0x288>)
 800c128:	69db      	ldr	r3, [r3, #28]
 800c12a:	f003 030c 	and.w	r3, r3, #12
 800c12e:	2b0c      	cmp	r3, #12
 800c130:	d1ee      	bne.n	800c110 <HAL_RCC_ClockConfig+0x204>
 800c132:	e044      	b.n	800c1be <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	685b      	ldr	r3, [r3, #4]
 800c138:	2b02      	cmp	r3, #2
 800c13a:	d112      	bne.n	800c162 <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800c13c:	e00a      	b.n	800c154 <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800c13e:	f7fa fbff 	bl	8006940 <HAL_GetTick>
 800c142:	4602      	mov	r2, r0
 800c144:	693b      	ldr	r3, [r7, #16]
 800c146:	1ad3      	subs	r3, r2, r3
 800c148:	f241 3288 	movw	r2, #5000	; 0x1388
 800c14c:	4293      	cmp	r3, r2
 800c14e:	d901      	bls.n	800c154 <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 800c150:	2303      	movs	r3, #3
 800c152:	e0bf      	b.n	800c2d4 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800c154:	4b0f      	ldr	r3, [pc, #60]	; (800c194 <HAL_RCC_ClockConfig+0x288>)
 800c156:	69db      	ldr	r3, [r3, #28]
 800c158:	f003 030c 	and.w	r3, r3, #12
 800c15c:	2b08      	cmp	r3, #8
 800c15e:	d1ee      	bne.n	800c13e <HAL_RCC_ClockConfig+0x232>
 800c160:	e02d      	b.n	800c1be <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	685b      	ldr	r3, [r3, #4]
 800c166:	2b00      	cmp	r3, #0
 800c168:	d123      	bne.n	800c1b2 <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800c16a:	e00a      	b.n	800c182 <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800c16c:	f7fa fbe8 	bl	8006940 <HAL_GetTick>
 800c170:	4602      	mov	r2, r0
 800c172:	693b      	ldr	r3, [r7, #16]
 800c174:	1ad3      	subs	r3, r2, r3
 800c176:	f241 3288 	movw	r2, #5000	; 0x1388
 800c17a:	4293      	cmp	r3, r2
 800c17c:	d901      	bls.n	800c182 <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 800c17e:	2303      	movs	r3, #3
 800c180:	e0a8      	b.n	800c2d4 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800c182:	4b04      	ldr	r3, [pc, #16]	; (800c194 <HAL_RCC_ClockConfig+0x288>)
 800c184:	69db      	ldr	r3, [r3, #28]
 800c186:	f003 030c 	and.w	r3, r3, #12
 800c18a:	2b00      	cmp	r3, #0
 800c18c:	d1ee      	bne.n	800c16c <HAL_RCC_ClockConfig+0x260>
 800c18e:	e016      	b.n	800c1be <HAL_RCC_ClockConfig+0x2b2>
 800c190:	40022000 	.word	0x40022000
 800c194:	46020c00 	.word	0x46020c00
 800c198:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800c19c:	f7fa fbd0 	bl	8006940 <HAL_GetTick>
 800c1a0:	4602      	mov	r2, r0
 800c1a2:	693b      	ldr	r3, [r7, #16]
 800c1a4:	1ad3      	subs	r3, r2, r3
 800c1a6:	f241 3288 	movw	r2, #5000	; 0x1388
 800c1aa:	4293      	cmp	r3, r2
 800c1ac:	d901      	bls.n	800c1b2 <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 800c1ae:	2303      	movs	r3, #3
 800c1b0:	e090      	b.n	800c2d4 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800c1b2:	4b4a      	ldr	r3, [pc, #296]	; (800c2dc <HAL_RCC_ClockConfig+0x3d0>)
 800c1b4:	69db      	ldr	r3, [r3, #28]
 800c1b6:	f003 030c 	and.w	r3, r3, #12
 800c1ba:	2b04      	cmp	r3, #4
 800c1bc:	d1ee      	bne.n	800c19c <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800c1be:	687b      	ldr	r3, [r7, #4]
 800c1c0:	681b      	ldr	r3, [r3, #0]
 800c1c2:	f003 0302 	and.w	r3, r3, #2
 800c1c6:	2b00      	cmp	r3, #0
 800c1c8:	d010      	beq.n	800c1ec <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	689a      	ldr	r2, [r3, #8]
 800c1ce:	4b43      	ldr	r3, [pc, #268]	; (800c2dc <HAL_RCC_ClockConfig+0x3d0>)
 800c1d0:	6a1b      	ldr	r3, [r3, #32]
 800c1d2:	f003 030f 	and.w	r3, r3, #15
 800c1d6:	429a      	cmp	r2, r3
 800c1d8:	d208      	bcs.n	800c1ec <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 800c1da:	4b40      	ldr	r3, [pc, #256]	; (800c2dc <HAL_RCC_ClockConfig+0x3d0>)
 800c1dc:	6a1b      	ldr	r3, [r3, #32]
 800c1de:	f023 020f 	bic.w	r2, r3, #15
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	689b      	ldr	r3, [r3, #8]
 800c1e6:	493d      	ldr	r1, [pc, #244]	; (800c2dc <HAL_RCC_ClockConfig+0x3d0>)
 800c1e8:	4313      	orrs	r3, r2
 800c1ea:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800c1ec:	4b3c      	ldr	r3, [pc, #240]	; (800c2e0 <HAL_RCC_ClockConfig+0x3d4>)
 800c1ee:	681b      	ldr	r3, [r3, #0]
 800c1f0:	f003 030f 	and.w	r3, r3, #15
 800c1f4:	683a      	ldr	r2, [r7, #0]
 800c1f6:	429a      	cmp	r2, r3
 800c1f8:	d210      	bcs.n	800c21c <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c1fa:	4b39      	ldr	r3, [pc, #228]	; (800c2e0 <HAL_RCC_ClockConfig+0x3d4>)
 800c1fc:	681b      	ldr	r3, [r3, #0]
 800c1fe:	f023 020f 	bic.w	r2, r3, #15
 800c202:	4937      	ldr	r1, [pc, #220]	; (800c2e0 <HAL_RCC_ClockConfig+0x3d4>)
 800c204:	683b      	ldr	r3, [r7, #0]
 800c206:	4313      	orrs	r3, r2
 800c208:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800c20a:	4b35      	ldr	r3, [pc, #212]	; (800c2e0 <HAL_RCC_ClockConfig+0x3d4>)
 800c20c:	681b      	ldr	r3, [r3, #0]
 800c20e:	f003 030f 	and.w	r3, r3, #15
 800c212:	683a      	ldr	r2, [r7, #0]
 800c214:	429a      	cmp	r2, r3
 800c216:	d001      	beq.n	800c21c <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 800c218:	2301      	movs	r3, #1
 800c21a:	e05b      	b.n	800c2d4 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	681b      	ldr	r3, [r3, #0]
 800c220:	f003 0304 	and.w	r3, r3, #4
 800c224:	2b00      	cmp	r3, #0
 800c226:	d010      	beq.n	800c24a <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	68da      	ldr	r2, [r3, #12]
 800c22c:	4b2b      	ldr	r3, [pc, #172]	; (800c2dc <HAL_RCC_ClockConfig+0x3d0>)
 800c22e:	6a1b      	ldr	r3, [r3, #32]
 800c230:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800c234:	429a      	cmp	r2, r3
 800c236:	d208      	bcs.n	800c24a <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 800c238:	4b28      	ldr	r3, [pc, #160]	; (800c2dc <HAL_RCC_ClockConfig+0x3d0>)
 800c23a:	6a1b      	ldr	r3, [r3, #32]
 800c23c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	68db      	ldr	r3, [r3, #12]
 800c244:	4925      	ldr	r1, [pc, #148]	; (800c2dc <HAL_RCC_ClockConfig+0x3d0>)
 800c246:	4313      	orrs	r3, r2
 800c248:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	681b      	ldr	r3, [r3, #0]
 800c24e:	f003 0308 	and.w	r3, r3, #8
 800c252:	2b00      	cmp	r3, #0
 800c254:	d012      	beq.n	800c27c <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	691a      	ldr	r2, [r3, #16]
 800c25a:	4b20      	ldr	r3, [pc, #128]	; (800c2dc <HAL_RCC_ClockConfig+0x3d0>)
 800c25c:	6a1b      	ldr	r3, [r3, #32]
 800c25e:	091b      	lsrs	r3, r3, #4
 800c260:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800c264:	429a      	cmp	r2, r3
 800c266:	d209      	bcs.n	800c27c <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 800c268:	4b1c      	ldr	r3, [pc, #112]	; (800c2dc <HAL_RCC_ClockConfig+0x3d0>)
 800c26a:	6a1b      	ldr	r3, [r3, #32]
 800c26c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	691b      	ldr	r3, [r3, #16]
 800c274:	011b      	lsls	r3, r3, #4
 800c276:	4919      	ldr	r1, [pc, #100]	; (800c2dc <HAL_RCC_ClockConfig+0x3d0>)
 800c278:	4313      	orrs	r3, r2
 800c27a:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	681b      	ldr	r3, [r3, #0]
 800c280:	f003 0310 	and.w	r3, r3, #16
 800c284:	2b00      	cmp	r3, #0
 800c286:	d010      	beq.n	800c2aa <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	695a      	ldr	r2, [r3, #20]
 800c28c:	4b13      	ldr	r3, [pc, #76]	; (800c2dc <HAL_RCC_ClockConfig+0x3d0>)
 800c28e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c290:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800c294:	429a      	cmp	r2, r3
 800c296:	d208      	bcs.n	800c2aa <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 800c298:	4b10      	ldr	r3, [pc, #64]	; (800c2dc <HAL_RCC_ClockConfig+0x3d0>)
 800c29a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c29c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	695b      	ldr	r3, [r3, #20]
 800c2a4:	490d      	ldr	r1, [pc, #52]	; (800c2dc <HAL_RCC_ClockConfig+0x3d0>)
 800c2a6:	4313      	orrs	r3, r2
 800c2a8:	624b      	str	r3, [r1, #36]	; 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800c2aa:	f000 f821 	bl	800c2f0 <HAL_RCC_GetSysClockFreq>
 800c2ae:	4602      	mov	r2, r0
 800c2b0:	4b0a      	ldr	r3, [pc, #40]	; (800c2dc <HAL_RCC_ClockConfig+0x3d0>)
 800c2b2:	6a1b      	ldr	r3, [r3, #32]
 800c2b4:	f003 030f 	and.w	r3, r3, #15
 800c2b8:	490a      	ldr	r1, [pc, #40]	; (800c2e4 <HAL_RCC_ClockConfig+0x3d8>)
 800c2ba:	5ccb      	ldrb	r3, [r1, r3]
 800c2bc:	fa22 f303 	lsr.w	r3, r2, r3
 800c2c0:	4a09      	ldr	r2, [pc, #36]	; (800c2e8 <HAL_RCC_ClockConfig+0x3dc>)
 800c2c2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800c2c4:	4b09      	ldr	r3, [pc, #36]	; (800c2ec <HAL_RCC_ClockConfig+0x3e0>)
 800c2c6:	681b      	ldr	r3, [r3, #0]
 800c2c8:	4618      	mov	r0, r3
 800c2ca:	f7fa f82f 	bl	800632c <HAL_InitTick>
 800c2ce:	4603      	mov	r3, r0
 800c2d0:	73fb      	strb	r3, [r7, #15]

  return status;
 800c2d2:	7bfb      	ldrb	r3, [r7, #15]
}
 800c2d4:	4618      	mov	r0, r3
 800c2d6:	3718      	adds	r7, #24
 800c2d8:	46bd      	mov	sp, r7
 800c2da:	bd80      	pop	{r7, pc}
 800c2dc:	46020c00 	.word	0x46020c00
 800c2e0:	40022000 	.word	0x40022000
 800c2e4:	08015014 	.word	0x08015014
 800c2e8:	20000004 	.word	0x20000004
 800c2ec:	20000008 	.word	0x20000008

0800c2f0 <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800c2f0:	b480      	push	{r7}
 800c2f2:	b08b      	sub	sp, #44	; 0x2c
 800c2f4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 800c2f6:	2300      	movs	r3, #0
 800c2f8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 800c2fa:	2300      	movs	r3, #0
 800c2fc:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800c2fe:	4b7b      	ldr	r3, [pc, #492]	; (800c4ec <HAL_RCC_GetSysClockFreq+0x1fc>)
 800c300:	69db      	ldr	r3, [r3, #28]
 800c302:	f003 030c 	and.w	r3, r3, #12
 800c306:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800c308:	4b78      	ldr	r3, [pc, #480]	; (800c4ec <HAL_RCC_GetSysClockFreq+0x1fc>)
 800c30a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c30c:	f003 0303 	and.w	r3, r3, #3
 800c310:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800c312:	69bb      	ldr	r3, [r7, #24]
 800c314:	2b00      	cmp	r3, #0
 800c316:	d005      	beq.n	800c324 <HAL_RCC_GetSysClockFreq+0x34>
 800c318:	69bb      	ldr	r3, [r7, #24]
 800c31a:	2b0c      	cmp	r3, #12
 800c31c:	d121      	bne.n	800c362 <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800c31e:	697b      	ldr	r3, [r7, #20]
 800c320:	2b01      	cmp	r3, #1
 800c322:	d11e      	bne.n	800c362 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 800c324:	4b71      	ldr	r3, [pc, #452]	; (800c4ec <HAL_RCC_GetSysClockFreq+0x1fc>)
 800c326:	689b      	ldr	r3, [r3, #8]
 800c328:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c32c:	2b00      	cmp	r3, #0
 800c32e:	d107      	bne.n	800c340 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 800c330:	4b6e      	ldr	r3, [pc, #440]	; (800c4ec <HAL_RCC_GetSysClockFreq+0x1fc>)
 800c332:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800c336:	0b1b      	lsrs	r3, r3, #12
 800c338:	f003 030f 	and.w	r3, r3, #15
 800c33c:	627b      	str	r3, [r7, #36]	; 0x24
 800c33e:	e005      	b.n	800c34c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 800c340:	4b6a      	ldr	r3, [pc, #424]	; (800c4ec <HAL_RCC_GetSysClockFreq+0x1fc>)
 800c342:	689b      	ldr	r3, [r3, #8]
 800c344:	0f1b      	lsrs	r3, r3, #28
 800c346:	f003 030f 	and.w	r3, r3, #15
 800c34a:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800c34c:	4a68      	ldr	r2, [pc, #416]	; (800c4f0 <HAL_RCC_GetSysClockFreq+0x200>)
 800c34e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c350:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c354:	627b      	str	r3, [r7, #36]	; 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800c356:	69bb      	ldr	r3, [r7, #24]
 800c358:	2b00      	cmp	r3, #0
 800c35a:	d110      	bne.n	800c37e <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800c35c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c35e:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800c360:	e00d      	b.n	800c37e <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800c362:	4b62      	ldr	r3, [pc, #392]	; (800c4ec <HAL_RCC_GetSysClockFreq+0x1fc>)
 800c364:	69db      	ldr	r3, [r3, #28]
 800c366:	f003 030c 	and.w	r3, r3, #12
 800c36a:	2b04      	cmp	r3, #4
 800c36c:	d102      	bne.n	800c374 <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800c36e:	4b61      	ldr	r3, [pc, #388]	; (800c4f4 <HAL_RCC_GetSysClockFreq+0x204>)
 800c370:	623b      	str	r3, [r7, #32]
 800c372:	e004      	b.n	800c37e <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800c374:	69bb      	ldr	r3, [r7, #24]
 800c376:	2b08      	cmp	r3, #8
 800c378:	d101      	bne.n	800c37e <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800c37a:	4b5e      	ldr	r3, [pc, #376]	; (800c4f4 <HAL_RCC_GetSysClockFreq+0x204>)
 800c37c:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800c37e:	69bb      	ldr	r3, [r7, #24]
 800c380:	2b0c      	cmp	r3, #12
 800c382:	f040 80ac 	bne.w	800c4de <HAL_RCC_GetSysClockFreq+0x1ee>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 800c386:	4b59      	ldr	r3, [pc, #356]	; (800c4ec <HAL_RCC_GetSysClockFreq+0x1fc>)
 800c388:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c38a:	f003 0303 	and.w	r3, r3, #3
 800c38e:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 800c390:	4b56      	ldr	r3, [pc, #344]	; (800c4ec <HAL_RCC_GetSysClockFreq+0x1fc>)
 800c392:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c394:	0a1b      	lsrs	r3, r3, #8
 800c396:	f003 030f 	and.w	r3, r3, #15
 800c39a:	3301      	adds	r3, #1
 800c39c:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 800c39e:	4b53      	ldr	r3, [pc, #332]	; (800c4ec <HAL_RCC_GetSysClockFreq+0x1fc>)
 800c3a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c3a2:	091b      	lsrs	r3, r3, #4
 800c3a4:	f003 0301 	and.w	r3, r3, #1
 800c3a8:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 800c3aa:	4b50      	ldr	r3, [pc, #320]	; (800c4ec <HAL_RCC_GetSysClockFreq+0x1fc>)
 800c3ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c3ae:	08db      	lsrs	r3, r3, #3
 800c3b0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c3b4:	68ba      	ldr	r2, [r7, #8]
 800c3b6:	fb02 f303 	mul.w	r3, r2, r3
 800c3ba:	ee07 3a90 	vmov	s15, r3
 800c3be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c3c2:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    if (pllm != 0U)
 800c3c6:	68fb      	ldr	r3, [r7, #12]
 800c3c8:	2b00      	cmp	r3, #0
 800c3ca:	f000 8086 	beq.w	800c4da <HAL_RCC_GetSysClockFreq+0x1ea>
    {
      switch (pllsource)
 800c3ce:	693b      	ldr	r3, [r7, #16]
 800c3d0:	2b02      	cmp	r3, #2
 800c3d2:	d003      	beq.n	800c3dc <HAL_RCC_GetSysClockFreq+0xec>
 800c3d4:	693b      	ldr	r3, [r7, #16]
 800c3d6:	2b03      	cmp	r3, #3
 800c3d8:	d022      	beq.n	800c420 <HAL_RCC_GetSysClockFreq+0x130>
 800c3da:	e043      	b.n	800c464 <HAL_RCC_GetSysClockFreq+0x174>
      {
        case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800c3dc:	68fb      	ldr	r3, [r7, #12]
 800c3de:	ee07 3a90 	vmov	s15, r3
 800c3e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c3e6:	eddf 6a44 	vldr	s13, [pc, #272]	; 800c4f8 <HAL_RCC_GetSysClockFreq+0x208>
 800c3ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c3ee:	4b3f      	ldr	r3, [pc, #252]	; (800c4ec <HAL_RCC_GetSysClockFreq+0x1fc>)
 800c3f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c3f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c3f6:	ee07 3a90 	vmov	s15, r3
 800c3fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 800c3fe:	ed97 6a01 	vldr	s12, [r7, #4]
 800c402:	eddf 5a3e 	vldr	s11, [pc, #248]	; 800c4fc <HAL_RCC_GetSysClockFreq+0x20c>
 800c406:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800c40a:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 800c40e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c412:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800c416:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c41a:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 800c41e:	e046      	b.n	800c4ae <HAL_RCC_GetSysClockFreq+0x1be>

        case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800c420:	68fb      	ldr	r3, [r7, #12]
 800c422:	ee07 3a90 	vmov	s15, r3
 800c426:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c42a:	eddf 6a33 	vldr	s13, [pc, #204]	; 800c4f8 <HAL_RCC_GetSysClockFreq+0x208>
 800c42e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c432:	4b2e      	ldr	r3, [pc, #184]	; (800c4ec <HAL_RCC_GetSysClockFreq+0x1fc>)
 800c434:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c436:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c43a:	ee07 3a90 	vmov	s15, r3
 800c43e:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 800c442:	ed97 6a01 	vldr	s12, [r7, #4]
 800c446:	eddf 5a2d 	vldr	s11, [pc, #180]	; 800c4fc <HAL_RCC_GetSysClockFreq+0x20c>
 800c44a:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800c44e:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 800c452:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c456:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800c45a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c45e:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 800c462:	e024      	b.n	800c4ae <HAL_RCC_GetSysClockFreq+0x1be>

        case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        default:
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800c464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c466:	ee07 3a90 	vmov	s15, r3
 800c46a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c46e:	68fb      	ldr	r3, [r7, #12]
 800c470:	ee07 3a90 	vmov	s15, r3
 800c474:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c478:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c47c:	4b1b      	ldr	r3, [pc, #108]	; (800c4ec <HAL_RCC_GetSysClockFreq+0x1fc>)
 800c47e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c480:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c484:	ee07 3a90 	vmov	s15, r3
 800c488:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 800c48c:	ed97 6a01 	vldr	s12, [r7, #4]
 800c490:	eddf 5a1a 	vldr	s11, [pc, #104]	; 800c4fc <HAL_RCC_GetSysClockFreq+0x20c>
 800c494:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800c498:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 800c49c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c4a0:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800c4a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c4a8:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 800c4ac:	bf00      	nop
      }

      pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 800c4ae:	4b0f      	ldr	r3, [pc, #60]	; (800c4ec <HAL_RCC_GetSysClockFreq+0x1fc>)
 800c4b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c4b2:	0e1b      	lsrs	r3, r3, #24
 800c4b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c4b8:	3301      	adds	r3, #1
 800c4ba:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 800c4bc:	683b      	ldr	r3, [r7, #0]
 800c4be:	ee07 3a90 	vmov	s15, r3
 800c4c2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800c4c6:	edd7 6a07 	vldr	s13, [r7, #28]
 800c4ca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c4ce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c4d2:	ee17 3a90 	vmov	r3, s15
 800c4d6:	623b      	str	r3, [r7, #32]
 800c4d8:	e001      	b.n	800c4de <HAL_RCC_GetSysClockFreq+0x1ee>
    }
    else
    {
      sysclockfreq = 0;
 800c4da:	2300      	movs	r3, #0
 800c4dc:	623b      	str	r3, [r7, #32]
    }
  }

  return sysclockfreq;
 800c4de:	6a3b      	ldr	r3, [r7, #32]
}
 800c4e0:	4618      	mov	r0, r3
 800c4e2:	372c      	adds	r7, #44	; 0x2c
 800c4e4:	46bd      	mov	sp, r7
 800c4e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4ea:	4770      	bx	lr
 800c4ec:	46020c00 	.word	0x46020c00
 800c4f0:	0801502c 	.word	0x0801502c
 800c4f4:	00f42400 	.word	0x00f42400
 800c4f8:	4b742400 	.word	0x4b742400
 800c4fc:	46000000 	.word	0x46000000

0800c500 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800c500:	b580      	push	{r7, lr}
 800c502:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800c504:	f7ff fef4 	bl	800c2f0 <HAL_RCC_GetSysClockFreq>
 800c508:	4602      	mov	r2, r0
 800c50a:	4b07      	ldr	r3, [pc, #28]	; (800c528 <HAL_RCC_GetHCLKFreq+0x28>)
 800c50c:	6a1b      	ldr	r3, [r3, #32]
 800c50e:	f003 030f 	and.w	r3, r3, #15
 800c512:	4906      	ldr	r1, [pc, #24]	; (800c52c <HAL_RCC_GetHCLKFreq+0x2c>)
 800c514:	5ccb      	ldrb	r3, [r1, r3]
 800c516:	fa22 f303 	lsr.w	r3, r2, r3
 800c51a:	4a05      	ldr	r2, [pc, #20]	; (800c530 <HAL_RCC_GetHCLKFreq+0x30>)
 800c51c:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 800c51e:	4b04      	ldr	r3, [pc, #16]	; (800c530 <HAL_RCC_GetHCLKFreq+0x30>)
 800c520:	681b      	ldr	r3, [r3, #0]
}
 800c522:	4618      	mov	r0, r3
 800c524:	bd80      	pop	{r7, pc}
 800c526:	bf00      	nop
 800c528:	46020c00 	.word	0x46020c00
 800c52c:	08015014 	.word	0x08015014
 800c530:	20000004 	.word	0x20000004

0800c534 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800c534:	b580      	push	{r7, lr}
 800c536:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 800c538:	f7ff ffe2 	bl	800c500 <HAL_RCC_GetHCLKFreq>
 800c53c:	4602      	mov	r2, r0
 800c53e:	4b05      	ldr	r3, [pc, #20]	; (800c554 <HAL_RCC_GetPCLK1Freq+0x20>)
 800c540:	6a1b      	ldr	r3, [r3, #32]
 800c542:	091b      	lsrs	r3, r3, #4
 800c544:	f003 0307 	and.w	r3, r3, #7
 800c548:	4903      	ldr	r1, [pc, #12]	; (800c558 <HAL_RCC_GetPCLK1Freq+0x24>)
 800c54a:	5ccb      	ldrb	r3, [r1, r3]
 800c54c:	fa22 f303 	lsr.w	r3, r2, r3
}
 800c550:	4618      	mov	r0, r3
 800c552:	bd80      	pop	{r7, pc}
 800c554:	46020c00 	.word	0x46020c00
 800c558:	08015024 	.word	0x08015024

0800c55c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800c55c:	b580      	push	{r7, lr}
 800c55e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]);
 800c560:	f7ff ffce 	bl	800c500 <HAL_RCC_GetHCLKFreq>
 800c564:	4602      	mov	r2, r0
 800c566:	4b05      	ldr	r3, [pc, #20]	; (800c57c <HAL_RCC_GetPCLK2Freq+0x20>)
 800c568:	6a1b      	ldr	r3, [r3, #32]
 800c56a:	0a1b      	lsrs	r3, r3, #8
 800c56c:	f003 0307 	and.w	r3, r3, #7
 800c570:	4903      	ldr	r1, [pc, #12]	; (800c580 <HAL_RCC_GetPCLK2Freq+0x24>)
 800c572:	5ccb      	ldrb	r3, [r1, r3]
 800c574:	fa22 f303 	lsr.w	r3, r2, r3
}
 800c578:	4618      	mov	r0, r3
 800c57a:	bd80      	pop	{r7, pc}
 800c57c:	46020c00 	.word	0x46020c00
 800c580:	08015024 	.word	0x08015024

0800c584 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 800c584:	b580      	push	{r7, lr}
 800c586:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR3 & RCC_CFGR3_PPRE3) >> RCC_CFGR3_PPRE3_Pos]);
 800c588:	f7ff ffba 	bl	800c500 <HAL_RCC_GetHCLKFreq>
 800c58c:	4602      	mov	r2, r0
 800c58e:	4b05      	ldr	r3, [pc, #20]	; (800c5a4 <HAL_RCC_GetPCLK3Freq+0x20>)
 800c590:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c592:	091b      	lsrs	r3, r3, #4
 800c594:	f003 0307 	and.w	r3, r3, #7
 800c598:	4903      	ldr	r1, [pc, #12]	; (800c5a8 <HAL_RCC_GetPCLK3Freq+0x24>)
 800c59a:	5ccb      	ldrb	r3, [r1, r3]
 800c59c:	fa22 f303 	lsr.w	r3, r2, r3
}
 800c5a0:	4618      	mov	r0, r3
 800c5a2:	bd80      	pop	{r7, pc}
 800c5a4:	46020c00 	.word	0x46020c00
 800c5a8:	08015024 	.word	0x08015024

0800c5ac <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *pRCC_ClkInitStruct, uint32_t *pFLatency)
{
 800c5ac:	b480      	push	{r7}
 800c5ae:	b083      	sub	sp, #12
 800c5b0:	af00      	add	r7, sp, #0
 800c5b2:	6078      	str	r0, [r7, #4]
 800c5b4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(pRCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  pRCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | \
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	221f      	movs	r2, #31
 800c5ba:	601a      	str	r2, [r3, #0]
                                  RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_PCLK3;

  /* Get the SYSCLK configuration --------------------------------------------*/
  pRCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR1 & RCC_CFGR1_SW);
 800c5bc:	4b15      	ldr	r3, [pc, #84]	; (800c614 <HAL_RCC_GetClockConfig+0x68>)
 800c5be:	69db      	ldr	r3, [r3, #28]
 800c5c0:	f003 0203 	and.w	r2, r3, #3
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR2 & RCC_CFGR2_HPRE);
 800c5c8:	4b12      	ldr	r3, [pc, #72]	; (800c614 <HAL_RCC_GetClockConfig+0x68>)
 800c5ca:	6a1b      	ldr	r3, [r3, #32]
 800c5cc:	f003 020f 	and.w	r2, r3, #15
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR2 & RCC_CFGR2_PPRE1);
 800c5d4:	4b0f      	ldr	r3, [pc, #60]	; (800c614 <HAL_RCC_GetClockConfig+0x68>)
 800c5d6:	6a1b      	ldr	r3, [r3, #32]
 800c5d8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4);
 800c5e0:	4b0c      	ldr	r3, [pc, #48]	; (800c614 <HAL_RCC_GetClockConfig+0x68>)
 800c5e2:	6a1b      	ldr	r3, [r3, #32]
 800c5e4:	091b      	lsrs	r3, r3, #4
 800c5e6:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800c5ea:	687b      	ldr	r3, [r7, #4]
 800c5ec:	611a      	str	r2, [r3, #16]

  /* Get the APB3 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->CFGR3 & RCC_CFGR3_PPRE3);
 800c5ee:	4b09      	ldr	r3, [pc, #36]	; (800c614 <HAL_RCC_GetClockConfig+0x68>)
 800c5f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c5f2:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	615a      	str	r2, [r3, #20]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800c5fa:	4b07      	ldr	r3, [pc, #28]	; (800c618 <HAL_RCC_GetClockConfig+0x6c>)
 800c5fc:	681b      	ldr	r3, [r3, #0]
 800c5fe:	f003 020f 	and.w	r2, r3, #15
 800c602:	683b      	ldr	r3, [r7, #0]
 800c604:	601a      	str	r2, [r3, #0]
}
 800c606:	bf00      	nop
 800c608:	370c      	adds	r7, #12
 800c60a:	46bd      	mov	sp, r7
 800c60c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c610:	4770      	bx	lr
 800c612:	bf00      	nop
 800c614:	46020c00 	.word	0x46020c00
 800c618:	40022000 	.word	0x40022000

0800c61c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800c61c:	b580      	push	{r7, lr}
 800c61e:	b086      	sub	sp, #24
 800c620:	af00      	add	r7, sp, #0
 800c622:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 800c624:	4b3e      	ldr	r3, [pc, #248]	; (800c720 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800c626:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c62a:	f003 0304 	and.w	r3, r3, #4
 800c62e:	2b00      	cmp	r3, #0
 800c630:	d003      	beq.n	800c63a <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800c632:	f7fe fd17 	bl	800b064 <HAL_PWREx_GetVoltageRange>
 800c636:	6178      	str	r0, [r7, #20]
 800c638:	e019      	b.n	800c66e <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800c63a:	4b39      	ldr	r3, [pc, #228]	; (800c720 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800c63c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c640:	4a37      	ldr	r2, [pc, #220]	; (800c720 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800c642:	f043 0304 	orr.w	r3, r3, #4
 800c646:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800c64a:	4b35      	ldr	r3, [pc, #212]	; (800c720 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800c64c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c650:	f003 0304 	and.w	r3, r3, #4
 800c654:	60fb      	str	r3, [r7, #12]
 800c656:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800c658:	f7fe fd04 	bl	800b064 <HAL_PWREx_GetVoltageRange>
 800c65c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800c65e:	4b30      	ldr	r3, [pc, #192]	; (800c720 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800c660:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c664:	4a2e      	ldr	r2, [pc, #184]	; (800c720 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800c666:	f023 0304 	bic.w	r3, r3, #4
 800c66a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 800c66e:	697b      	ldr	r3, [r7, #20]
 800c670:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800c674:	d003      	beq.n	800c67e <RCC_SetFlashLatencyFromMSIRange+0x62>
 800c676:	697b      	ldr	r3, [r7, #20]
 800c678:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c67c:	d109      	bne.n	800c692 <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 800c67e:	687b      	ldr	r3, [r7, #4]
 800c680:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c684:	d202      	bcs.n	800c68c <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 800c686:	2301      	movs	r3, #1
 800c688:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 800c68a:	e033      	b.n	800c6f4 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 800c68c:	2300      	movs	r3, #0
 800c68e:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 800c690:	e030      	b.n	800c6f4 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 800c692:	687b      	ldr	r3, [r7, #4]
 800c694:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c698:	d208      	bcs.n	800c6ac <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 800c69a:	697b      	ldr	r3, [r7, #20]
 800c69c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c6a0:	d102      	bne.n	800c6a8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 800c6a2:	2303      	movs	r3, #3
 800c6a4:	613b      	str	r3, [r7, #16]
 800c6a6:	e025      	b.n	800c6f4 <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 800c6a8:	2301      	movs	r3, #1
 800c6aa:	e035      	b.n	800c718 <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c6b2:	d90f      	bls.n	800c6d4 <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 800c6b4:	697b      	ldr	r3, [r7, #20]
 800c6b6:	2b00      	cmp	r3, #0
 800c6b8:	d109      	bne.n	800c6ce <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800c6c0:	d902      	bls.n	800c6c8 <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 800c6c2:	2300      	movs	r3, #0
 800c6c4:	613b      	str	r3, [r7, #16]
 800c6c6:	e015      	b.n	800c6f4 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 800c6c8:	2301      	movs	r3, #1
 800c6ca:	613b      	str	r3, [r7, #16]
 800c6cc:	e012      	b.n	800c6f4 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 800c6ce:	2300      	movs	r3, #0
 800c6d0:	613b      	str	r3, [r7, #16]
 800c6d2:	e00f      	b.n	800c6f4 <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c6da:	d109      	bne.n	800c6f0 <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 800c6dc:	697b      	ldr	r3, [r7, #20]
 800c6de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c6e2:	d102      	bne.n	800c6ea <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 800c6e4:	2301      	movs	r3, #1
 800c6e6:	613b      	str	r3, [r7, #16]
 800c6e8:	e004      	b.n	800c6f4 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 800c6ea:	2302      	movs	r3, #2
 800c6ec:	613b      	str	r3, [r7, #16]
 800c6ee:	e001      	b.n	800c6f4 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 800c6f0:	2301      	movs	r3, #1
 800c6f2:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800c6f4:	4b0b      	ldr	r3, [pc, #44]	; (800c724 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800c6f6:	681b      	ldr	r3, [r3, #0]
 800c6f8:	f023 020f 	bic.w	r2, r3, #15
 800c6fc:	4909      	ldr	r1, [pc, #36]	; (800c724 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800c6fe:	693b      	ldr	r3, [r7, #16]
 800c700:	4313      	orrs	r3, r2
 800c702:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 800c704:	4b07      	ldr	r3, [pc, #28]	; (800c724 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800c706:	681b      	ldr	r3, [r3, #0]
 800c708:	f003 030f 	and.w	r3, r3, #15
 800c70c:	693a      	ldr	r2, [r7, #16]
 800c70e:	429a      	cmp	r2, r3
 800c710:	d001      	beq.n	800c716 <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 800c712:	2301      	movs	r3, #1
 800c714:	e000      	b.n	800c718 <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 800c716:	2300      	movs	r3, #0
}
 800c718:	4618      	mov	r0, r3
 800c71a:	3718      	adds	r7, #24
 800c71c:	46bd      	mov	sp, r7
 800c71e:	bd80      	pop	{r7, pc}
 800c720:	46020c00 	.word	0x46020c00
 800c724:	40022000 	.word	0x40022000

0800c728 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 800c728:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c72c:	b0ba      	sub	sp, #232	; 0xe8
 800c72e:	af00      	add	r7, sp, #0
 800c730:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800c734:	2300      	movs	r3, #0
 800c736:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800c73a:	2300      	movs	r3, #0
 800c73c:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800c740:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800c744:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c748:	f002 0401 	and.w	r4, r2, #1
 800c74c:	2500      	movs	r5, #0
 800c74e:	ea54 0305 	orrs.w	r3, r4, r5
 800c752:	d00b      	beq.n	800c76c <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 800c754:	4bcb      	ldr	r3, [pc, #812]	; (800ca84 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800c756:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800c75a:	f023 0103 	bic.w	r1, r3, #3
 800c75e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800c762:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c764:	4ac7      	ldr	r2, [pc, #796]	; (800ca84 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800c766:	430b      	orrs	r3, r1
 800c768:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800c76c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800c770:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c774:	f002 0802 	and.w	r8, r2, #2
 800c778:	f04f 0900 	mov.w	r9, #0
 800c77c:	ea58 0309 	orrs.w	r3, r8, r9
 800c780:	d00b      	beq.n	800c79a <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 800c782:	4bc0      	ldr	r3, [pc, #768]	; (800ca84 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800c784:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800c788:	f023 010c 	bic.w	r1, r3, #12
 800c78c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800c790:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c792:	4abc      	ldr	r2, [pc, #752]	; (800ca84 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800c794:	430b      	orrs	r3, r1
 800c796:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800c79a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800c79e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7a2:	f002 0a04 	and.w	sl, r2, #4
 800c7a6:	f04f 0b00 	mov.w	fp, #0
 800c7aa:	ea5a 030b 	orrs.w	r3, sl, fp
 800c7ae:	d00b      	beq.n	800c7c8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 800c7b0:	4bb4      	ldr	r3, [pc, #720]	; (800ca84 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800c7b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800c7b6:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 800c7ba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800c7be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c7c0:	4ab0      	ldr	r2, [pc, #704]	; (800ca84 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800c7c2:	430b      	orrs	r3, r1
 800c7c4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800c7c8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800c7cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7d0:	f002 0308 	and.w	r3, r2, #8
 800c7d4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800c7d8:	2300      	movs	r3, #0
 800c7da:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800c7de:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800c7e2:	460b      	mov	r3, r1
 800c7e4:	4313      	orrs	r3, r2
 800c7e6:	d00b      	beq.n	800c800 <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 800c7e8:	4ba6      	ldr	r3, [pc, #664]	; (800ca84 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800c7ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800c7ee:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800c7f2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800c7f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c7f8:	4aa2      	ldr	r2, [pc, #648]	; (800ca84 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800c7fa:	430b      	orrs	r3, r1
 800c7fc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800c800:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800c804:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c808:	f002 0310 	and.w	r3, r2, #16
 800c80c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800c810:	2300      	movs	r3, #0
 800c812:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800c816:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800c81a:	460b      	mov	r3, r1
 800c81c:	4313      	orrs	r3, r2
 800c81e:	d00b      	beq.n	800c838 <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 800c820:	4b98      	ldr	r3, [pc, #608]	; (800ca84 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800c822:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800c826:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800c82a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800c82e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c830:	4a94      	ldr	r2, [pc, #592]	; (800ca84 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800c832:	430b      	orrs	r3, r1
 800c834:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
    __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
  }
#endif /* USART6 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800c838:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800c83c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c840:	f002 0320 	and.w	r3, r2, #32
 800c844:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800c848:	2300      	movs	r3, #0
 800c84a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800c84e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800c852:	460b      	mov	r3, r1
 800c854:	4313      	orrs	r3, r2
 800c856:	d00b      	beq.n	800c870 <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 800c858:	4b8a      	ldr	r3, [pc, #552]	; (800ca84 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800c85a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800c85e:	f023 0107 	bic.w	r1, r3, #7
 800c862:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800c866:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c868:	4a86      	ldr	r2, [pc, #536]	; (800ca84 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800c86a:	430b      	orrs	r3, r1
 800c86c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800c870:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800c874:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c878:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800c87c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800c880:	2300      	movs	r3, #0
 800c882:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800c886:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800c88a:	460b      	mov	r3, r1
 800c88c:	4313      	orrs	r3, r2
 800c88e:	d00b      	beq.n	800c8a8 <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 800c890:	4b7c      	ldr	r3, [pc, #496]	; (800ca84 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800c892:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800c896:	f423 6140 	bic.w	r1, r3, #3072	; 0xc00
 800c89a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800c89e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c8a0:	4a78      	ldr	r2, [pc, #480]	; (800ca84 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800c8a2:	430b      	orrs	r3, r1
 800c8a4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800c8a8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800c8ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8b0:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800c8b4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800c8b8:	2300      	movs	r3, #0
 800c8ba:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800c8be:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800c8c2:	460b      	mov	r3, r1
 800c8c4:	4313      	orrs	r3, r2
 800c8c6:	d00b      	beq.n	800c8e0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 800c8c8:	4b6e      	ldr	r3, [pc, #440]	; (800ca84 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800c8ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800c8ce:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800c8d2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800c8d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c8d8:	4a6a      	ldr	r2, [pc, #424]	; (800ca84 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800c8da:	430b      	orrs	r3, r1
 800c8dc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800c8e0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800c8e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8e8:	f402 7380 	and.w	r3, r2, #256	; 0x100
 800c8ec:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800c8f0:	2300      	movs	r3, #0
 800c8f2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800c8f6:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 800c8fa:	460b      	mov	r3, r1
 800c8fc:	4313      	orrs	r3, r2
 800c8fe:	d00b      	beq.n	800c918 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 800c900:	4b60      	ldr	r3, [pc, #384]	; (800ca84 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800c902:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800c906:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800c90a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800c90e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c910:	4a5c      	ldr	r2, [pc, #368]	; (800ca84 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800c912:	430b      	orrs	r3, r1
 800c914:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800c918:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800c91c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c920:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 800c924:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800c928:	2300      	movs	r3, #0
 800c92a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800c92e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800c932:	460b      	mov	r3, r1
 800c934:	4313      	orrs	r3, r2
 800c936:	d00b      	beq.n	800c950 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 800c938:	4b52      	ldr	r3, [pc, #328]	; (800ca84 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800c93a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800c93e:	f423 4140 	bic.w	r1, r3, #49152	; 0xc000
 800c942:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800c946:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c948:	4a4e      	ldr	r2, [pc, #312]	; (800ca84 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800c94a:	430b      	orrs	r3, r1
 800c94c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
    __HAL_RCC_I2C6_CONFIG(pPeriphClkInit->I2c6ClockSelection);
  }
#endif /* I2C6 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800c950:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800c954:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c958:	f402 7300 	and.w	r3, r2, #512	; 0x200
 800c95c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800c960:	2300      	movs	r3, #0
 800c962:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800c966:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800c96a:	460b      	mov	r3, r1
 800c96c:	4313      	orrs	r3, r2
 800c96e:	d00b      	beq.n	800c988 <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 800c970:	4b44      	ldr	r3, [pc, #272]	; (800ca84 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800c972:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800c976:	f423 6140 	bic.w	r1, r3, #3072	; 0xc00
 800c97a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800c97e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c980:	4a40      	ldr	r2, [pc, #256]	; (800ca84 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800c982:	430b      	orrs	r3, r1
 800c984:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800c988:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800c98c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c990:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 800c994:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800c998:	2300      	movs	r3, #0
 800c99a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800c99e:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800c9a2:	460b      	mov	r3, r1
 800c9a4:	4313      	orrs	r3, r2
 800c9a6:	d00b      	beq.n	800c9c0 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 800c9a8:	4b36      	ldr	r3, [pc, #216]	; (800ca84 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800c9aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800c9ae:	f423 2140 	bic.w	r1, r3, #786432	; 0xc0000
 800c9b2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800c9b6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c9b8:	4a32      	ldr	r2, [pc, #200]	; (800ca84 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800c9ba:	430b      	orrs	r3, r1
 800c9bc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 800c9c0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800c9c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9c8:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800c9cc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800c9d0:	2300      	movs	r3, #0
 800c9d2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800c9d6:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800c9da:	460b      	mov	r3, r1
 800c9dc:	4313      	orrs	r3, r2
 800c9de:	d00c      	beq.n	800c9fa <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 800c9e0:	4b28      	ldr	r3, [pc, #160]	; (800ca84 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800c9e2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800c9e6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800c9ea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800c9ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c9f2:	4a24      	ldr	r2, [pc, #144]	; (800ca84 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800c9f4:	430b      	orrs	r3, r1
 800c9f6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800c9fa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800c9fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca02:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800ca06:	67bb      	str	r3, [r7, #120]	; 0x78
 800ca08:	2300      	movs	r3, #0
 800ca0a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800ca0c:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800ca10:	460b      	mov	r3, r1
 800ca12:	4313      	orrs	r3, r2
 800ca14:	d04f      	beq.n	800cab6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 800ca16:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800ca1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ca1e:	2b80      	cmp	r3, #128	; 0x80
 800ca20:	d02d      	beq.n	800ca7e <HAL_RCCEx_PeriphCLKConfig+0x356>
 800ca22:	2b80      	cmp	r3, #128	; 0x80
 800ca24:	d827      	bhi.n	800ca76 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 800ca26:	2b60      	cmp	r3, #96	; 0x60
 800ca28:	d02e      	beq.n	800ca88 <HAL_RCCEx_PeriphCLKConfig+0x360>
 800ca2a:	2b60      	cmp	r3, #96	; 0x60
 800ca2c:	d823      	bhi.n	800ca76 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 800ca2e:	2b40      	cmp	r3, #64	; 0x40
 800ca30:	d006      	beq.n	800ca40 <HAL_RCCEx_PeriphCLKConfig+0x318>
 800ca32:	2b40      	cmp	r3, #64	; 0x40
 800ca34:	d81f      	bhi.n	800ca76 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 800ca36:	2b00      	cmp	r3, #0
 800ca38:	d009      	beq.n	800ca4e <HAL_RCCEx_PeriphCLKConfig+0x326>
 800ca3a:	2b20      	cmp	r3, #32
 800ca3c:	d011      	beq.n	800ca62 <HAL_RCCEx_PeriphCLKConfig+0x33a>
 800ca3e:	e01a      	b.n	800ca76 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800ca40:	4b10      	ldr	r3, [pc, #64]	; (800ca84 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800ca42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ca44:	4a0f      	ldr	r2, [pc, #60]	; (800ca84 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800ca46:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ca4a:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 800ca4c:	e01d      	b.n	800ca8a <HAL_RCCEx_PeriphCLKConfig+0x362>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800ca4e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800ca52:	3308      	adds	r3, #8
 800ca54:	4618      	mov	r0, r3
 800ca56:	f002 f981 	bl	800ed5c <RCCEx_PLL2_Config>
 800ca5a:	4603      	mov	r3, r0
 800ca5c:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* SAI1 clock source config set later after clock selection check */
        break;
 800ca60:	e013      	b.n	800ca8a <HAL_RCCEx_PeriphCLKConfig+0x362>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800ca62:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800ca66:	332c      	adds	r3, #44	; 0x2c
 800ca68:	4618      	mov	r0, r3
 800ca6a:	f002 fa0f 	bl	800ee8c <RCCEx_PLL3_Config>
 800ca6e:	4603      	mov	r3, r0
 800ca70:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* SAI1 clock source config set later after clock selection check */
        break;
 800ca74:	e009      	b.n	800ca8a <HAL_RCCEx_PeriphCLKConfig+0x362>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ca76:	2301      	movs	r3, #1
 800ca78:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 800ca7c:	e005      	b.n	800ca8a <HAL_RCCEx_PeriphCLKConfig+0x362>
        break;
 800ca7e:	bf00      	nop
 800ca80:	e003      	b.n	800ca8a <HAL_RCCEx_PeriphCLKConfig+0x362>
 800ca82:	bf00      	nop
 800ca84:	46020c00 	.word	0x46020c00
        break;
 800ca88:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ca8a:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800ca8e:	2b00      	cmp	r3, #0
 800ca90:	d10d      	bne.n	800caae <HAL_RCCEx_PeriphCLKConfig+0x386>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 800ca92:	4bb6      	ldr	r3, [pc, #728]	; (800cd6c <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800ca94:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800ca98:	f023 01e0 	bic.w	r1, r3, #224	; 0xe0
 800ca9c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800caa0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800caa4:	4ab1      	ldr	r2, [pc, #708]	; (800cd6c <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800caa6:	430b      	orrs	r3, r1
 800caa8:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 800caac:	e003      	b.n	800cab6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800caae:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800cab2:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800cab6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800caba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cabe:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 800cac2:	673b      	str	r3, [r7, #112]	; 0x70
 800cac4:	2300      	movs	r3, #0
 800cac6:	677b      	str	r3, [r7, #116]	; 0x74
 800cac8:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800cacc:	460b      	mov	r3, r1
 800cace:	4313      	orrs	r3, r2
 800cad0:	d053      	beq.n	800cb7a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 800cad2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800cad6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800cada:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800cade:	d033      	beq.n	800cb48 <HAL_RCCEx_PeriphCLKConfig+0x420>
 800cae0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800cae4:	d82c      	bhi.n	800cb40 <HAL_RCCEx_PeriphCLKConfig+0x418>
 800cae6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800caea:	d02f      	beq.n	800cb4c <HAL_RCCEx_PeriphCLKConfig+0x424>
 800caec:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800caf0:	d826      	bhi.n	800cb40 <HAL_RCCEx_PeriphCLKConfig+0x418>
 800caf2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800caf6:	d008      	beq.n	800cb0a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
 800caf8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cafc:	d820      	bhi.n	800cb40 <HAL_RCCEx_PeriphCLKConfig+0x418>
 800cafe:	2b00      	cmp	r3, #0
 800cb00:	d00a      	beq.n	800cb18 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
 800cb02:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cb06:	d011      	beq.n	800cb2c <HAL_RCCEx_PeriphCLKConfig+0x404>
 800cb08:	e01a      	b.n	800cb40 <HAL_RCCEx_PeriphCLKConfig+0x418>
    {
      case RCC_SAI2CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800cb0a:	4b98      	ldr	r3, [pc, #608]	; (800cd6c <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800cb0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cb0e:	4a97      	ldr	r2, [pc, #604]	; (800cd6c <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800cb10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800cb14:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 800cb16:	e01a      	b.n	800cb4e <HAL_RCCEx_PeriphCLKConfig+0x426>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800cb18:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800cb1c:	3308      	adds	r3, #8
 800cb1e:	4618      	mov	r0, r3
 800cb20:	f002 f91c 	bl	800ed5c <RCCEx_PLL2_Config>
 800cb24:	4603      	mov	r3, r0
 800cb26:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* SAI2 clock source config set later after clock selection check */
        break;
 800cb2a:	e010      	b.n	800cb4e <HAL_RCCEx_PeriphCLKConfig+0x426>

      case RCC_SAI2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800cb2c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800cb30:	332c      	adds	r3, #44	; 0x2c
 800cb32:	4618      	mov	r0, r3
 800cb34:	f002 f9aa 	bl	800ee8c <RCCEx_PLL3_Config>
 800cb38:	4603      	mov	r3, r0
 800cb3a:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* SAI2 clock source config set later after clock selection check */
        break;
 800cb3e:	e006      	b.n	800cb4e <HAL_RCCEx_PeriphCLKConfig+0x426>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800cb40:	2301      	movs	r3, #1
 800cb42:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 800cb46:	e002      	b.n	800cb4e <HAL_RCCEx_PeriphCLKConfig+0x426>
        break;
 800cb48:	bf00      	nop
 800cb4a:	e000      	b.n	800cb4e <HAL_RCCEx_PeriphCLKConfig+0x426>
        break;
 800cb4c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800cb4e:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800cb52:	2b00      	cmp	r3, #0
 800cb54:	d10d      	bne.n	800cb72 <HAL_RCCEx_PeriphCLKConfig+0x44a>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 800cb56:	4b85      	ldr	r3, [pc, #532]	; (800cd6c <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800cb58:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800cb5c:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 800cb60:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800cb64:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800cb68:	4a80      	ldr	r2, [pc, #512]	; (800cd6c <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800cb6a:	430b      	orrs	r3, r1
 800cb6c:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 800cb70:	e003      	b.n	800cb7a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cb72:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800cb76:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 800cb7a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800cb7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb82:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 800cb86:	66bb      	str	r3, [r7, #104]	; 0x68
 800cb88:	2300      	movs	r3, #0
 800cb8a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800cb8c:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800cb90:	460b      	mov	r3, r1
 800cb92:	4313      	orrs	r3, r2
 800cb94:	d046      	beq.n	800cc24 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 800cb96:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800cb9a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800cb9e:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800cba2:	d028      	beq.n	800cbf6 <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 800cba4:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800cba8:	d821      	bhi.n	800cbee <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 800cbaa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800cbae:	d022      	beq.n	800cbf6 <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 800cbb0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800cbb4:	d81b      	bhi.n	800cbee <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 800cbb6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800cbba:	d01c      	beq.n	800cbf6 <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 800cbbc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800cbc0:	d815      	bhi.n	800cbee <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 800cbc2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800cbc6:	d008      	beq.n	800cbda <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 800cbc8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800cbcc:	d80f      	bhi.n	800cbee <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 800cbce:	2b00      	cmp	r3, #0
 800cbd0:	d011      	beq.n	800cbf6 <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 800cbd2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cbd6:	d00e      	beq.n	800cbf6 <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 800cbd8:	e009      	b.n	800cbee <HAL_RCCEx_PeriphCLKConfig+0x4c6>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800cbda:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800cbde:	3308      	adds	r3, #8
 800cbe0:	4618      	mov	r0, r3
 800cbe2:	f002 f8bb 	bl	800ed5c <RCCEx_PLL2_Config>
 800cbe6:	4603      	mov	r3, r0
 800cbe8:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 800cbec:	e004      	b.n	800cbf8 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800cbee:	2301      	movs	r3, #1
 800cbf0:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 800cbf4:	e000      	b.n	800cbf8 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
        break;
 800cbf6:	bf00      	nop
    }

    if (ret == HAL_OK)
 800cbf8:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800cbfc:	2b00      	cmp	r3, #0
 800cbfe:	d10d      	bne.n	800cc1c <HAL_RCCEx_PeriphCLKConfig+0x4f4>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 800cc00:	4b5a      	ldr	r3, [pc, #360]	; (800cd6c <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800cc02:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800cc06:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 800cc0a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800cc0e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800cc12:	4a56      	ldr	r2, [pc, #344]	; (800cd6c <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800cc14:	430b      	orrs	r3, r1
 800cc16:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800cc1a:	e003      	b.n	800cc24 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cc1c:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800cc20:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 800cc24:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800cc28:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc2c:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800cc30:	663b      	str	r3, [r7, #96]	; 0x60
 800cc32:	2300      	movs	r3, #0
 800cc34:	667b      	str	r3, [r7, #100]	; 0x64
 800cc36:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800cc3a:	460b      	mov	r3, r1
 800cc3c:	4313      	orrs	r3, r2
 800cc3e:	d03f      	beq.n	800ccc0 <HAL_RCCEx_PeriphCLKConfig+0x598>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 800cc40:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800cc44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cc48:	2b04      	cmp	r3, #4
 800cc4a:	d81e      	bhi.n	800cc8a <HAL_RCCEx_PeriphCLKConfig+0x562>
 800cc4c:	a201      	add	r2, pc, #4	; (adr r2, 800cc54 <HAL_RCCEx_PeriphCLKConfig+0x52c>)
 800cc4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc52:	bf00      	nop
 800cc54:	0800cc93 	.word	0x0800cc93
 800cc58:	0800cc69 	.word	0x0800cc69
 800cc5c:	0800cc77 	.word	0x0800cc77
 800cc60:	0800cc93 	.word	0x0800cc93
 800cc64:	0800cc93 	.word	0x0800cc93
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800cc68:	4b40      	ldr	r3, [pc, #256]	; (800cd6c <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800cc6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cc6c:	4a3f      	ldr	r2, [pc, #252]	; (800cd6c <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800cc6e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800cc72:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 800cc74:	e00e      	b.n	800cc94 <HAL_RCCEx_PeriphCLKConfig+0x56c>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800cc76:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800cc7a:	332c      	adds	r3, #44	; 0x2c
 800cc7c:	4618      	mov	r0, r3
 800cc7e:	f002 f905 	bl	800ee8c <RCCEx_PLL3_Config>
 800cc82:	4603      	mov	r3, r0
 800cc84:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 800cc88:	e004      	b.n	800cc94 <HAL_RCCEx_PeriphCLKConfig+0x56c>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800cc8a:	2301      	movs	r3, #1
 800cc8c:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 800cc90:	e000      	b.n	800cc94 <HAL_RCCEx_PeriphCLKConfig+0x56c>
        break;
 800cc92:	bf00      	nop
    }
    if (ret == HAL_OK)
 800cc94:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800cc98:	2b00      	cmp	r3, #0
 800cc9a:	d10d      	bne.n	800ccb8 <HAL_RCCEx_PeriphCLKConfig+0x590>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 800cc9c:	4b33      	ldr	r3, [pc, #204]	; (800cd6c <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800cc9e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800cca2:	f023 0107 	bic.w	r1, r3, #7
 800cca6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800ccaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ccae:	4a2f      	ldr	r2, [pc, #188]	; (800cd6c <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800ccb0:	430b      	orrs	r3, r1
 800ccb2:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 800ccb6:	e003      	b.n	800ccc0 <HAL_RCCEx_PeriphCLKConfig+0x598>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ccb8:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800ccbc:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 800ccc0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800ccc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccc8:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800cccc:	65bb      	str	r3, [r7, #88]	; 0x58
 800ccce:	2300      	movs	r3, #0
 800ccd0:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ccd2:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800ccd6:	460b      	mov	r3, r1
 800ccd8:	4313      	orrs	r3, r2
 800ccda:	d04d      	beq.n	800cd78 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));
    switch (pPeriphClkInit->Adf1ClockSelection)
 800ccdc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800cce0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cce4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800cce8:	d028      	beq.n	800cd3c <HAL_RCCEx_PeriphCLKConfig+0x614>
 800ccea:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800ccee:	d821      	bhi.n	800cd34 <HAL_RCCEx_PeriphCLKConfig+0x60c>
 800ccf0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800ccf4:	d024      	beq.n	800cd40 <HAL_RCCEx_PeriphCLKConfig+0x618>
 800ccf6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800ccfa:	d81b      	bhi.n	800cd34 <HAL_RCCEx_PeriphCLKConfig+0x60c>
 800ccfc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cd00:	d00e      	beq.n	800cd20 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
 800cd02:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cd06:	d815      	bhi.n	800cd34 <HAL_RCCEx_PeriphCLKConfig+0x60c>
 800cd08:	2b00      	cmp	r3, #0
 800cd0a:	d01b      	beq.n	800cd44 <HAL_RCCEx_PeriphCLKConfig+0x61c>
 800cd0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cd10:	d110      	bne.n	800cd34 <HAL_RCCEx_PeriphCLKConfig+0x60c>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800cd12:	4b16      	ldr	r3, [pc, #88]	; (800cd6c <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800cd14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cd16:	4a15      	ldr	r2, [pc, #84]	; (800cd6c <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800cd18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800cd1c:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 800cd1e:	e012      	b.n	800cd46 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800cd20:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800cd24:	332c      	adds	r3, #44	; 0x2c
 800cd26:	4618      	mov	r0, r3
 800cd28:	f002 f8b0 	bl	800ee8c <RCCEx_PLL3_Config>
 800cd2c:	4603      	mov	r3, r0
 800cd2e:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 800cd32:	e008      	b.n	800cd46 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800cd34:	2301      	movs	r3, #1
 800cd36:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 800cd3a:	e004      	b.n	800cd46 <HAL_RCCEx_PeriphCLKConfig+0x61e>
        break;
 800cd3c:	bf00      	nop
 800cd3e:	e002      	b.n	800cd46 <HAL_RCCEx_PeriphCLKConfig+0x61e>
        break;
 800cd40:	bf00      	nop
 800cd42:	e000      	b.n	800cd46 <HAL_RCCEx_PeriphCLKConfig+0x61e>
        break;
 800cd44:	bf00      	nop
    }
    if (ret == HAL_OK)
 800cd46:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800cd4a:	2b00      	cmp	r3, #0
 800cd4c:	d110      	bne.n	800cd70 <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 800cd4e:	4b07      	ldr	r3, [pc, #28]	; (800cd6c <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800cd50:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800cd54:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 800cd58:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800cd5c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cd60:	4a02      	ldr	r2, [pc, #8]	; (800cd6c <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800cd62:	430b      	orrs	r3, r1
 800cd64:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800cd68:	e006      	b.n	800cd78 <HAL_RCCEx_PeriphCLKConfig+0x650>
 800cd6a:	bf00      	nop
 800cd6c:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cd70:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800cd74:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800cd78:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800cd7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd80:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800cd84:	653b      	str	r3, [r7, #80]	; 0x50
 800cd86:	2300      	movs	r3, #0
 800cd88:	657b      	str	r3, [r7, #84]	; 0x54
 800cd8a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800cd8e:	460b      	mov	r3, r1
 800cd90:	4313      	orrs	r3, r2
 800cd92:	f000 80b5 	beq.w	800cf00 <HAL_RCCEx_PeriphCLKConfig+0x7d8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800cd96:	2300      	movs	r3, #0
 800cd98:	f887 30e1 	strb.w	r3, [r7, #225]	; 0xe1
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));
    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800cd9c:	4b9d      	ldr	r3, [pc, #628]	; (800d014 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800cd9e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800cda2:	f003 0304 	and.w	r3, r3, #4
 800cda6:	2b00      	cmp	r3, #0
 800cda8:	d113      	bne.n	800cdd2 <HAL_RCCEx_PeriphCLKConfig+0x6aa>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800cdaa:	4b9a      	ldr	r3, [pc, #616]	; (800d014 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800cdac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800cdb0:	4a98      	ldr	r2, [pc, #608]	; (800d014 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800cdb2:	f043 0304 	orr.w	r3, r3, #4
 800cdb6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800cdba:	4b96      	ldr	r3, [pc, #600]	; (800d014 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800cdbc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800cdc0:	f003 0304 	and.w	r3, r3, #4
 800cdc4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800cdc8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
      pwrclkchanged = SET;
 800cdcc:	2301      	movs	r3, #1
 800cdce:	f887 30e1 	strb.w	r3, [r7, #225]	; 0xe1
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 800cdd2:	4b91      	ldr	r3, [pc, #580]	; (800d018 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 800cdd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cdd6:	4a90      	ldr	r2, [pc, #576]	; (800d018 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 800cdd8:	f043 0301 	orr.w	r3, r3, #1
 800cddc:	6293      	str	r3, [r2, #40]	; 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800cdde:	f7f9 fdaf 	bl	8006940 <HAL_GetTick>
 800cde2:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800cde6:	e00b      	b.n	800ce00 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800cde8:	f7f9 fdaa 	bl	8006940 <HAL_GetTick>
 800cdec:	4602      	mov	r2, r0
 800cdee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800cdf2:	1ad3      	subs	r3, r2, r3
 800cdf4:	2b02      	cmp	r3, #2
 800cdf6:	d903      	bls.n	800ce00 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      {
        ret = HAL_TIMEOUT;
 800cdf8:	2303      	movs	r3, #3
 800cdfa:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 800cdfe:	e005      	b.n	800ce0c <HAL_RCCEx_PeriphCLKConfig+0x6e4>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800ce00:	4b85      	ldr	r3, [pc, #532]	; (800d018 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 800ce02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ce04:	f003 0301 	and.w	r3, r3, #1
 800ce08:	2b00      	cmp	r3, #0
 800ce0a:	d0ed      	beq.n	800cde8 <HAL_RCCEx_PeriphCLKConfig+0x6c0>
      }
    }

    if (ret == HAL_OK)
 800ce0c:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800ce10:	2b00      	cmp	r3, #0
 800ce12:	d165      	bne.n	800cee0 <HAL_RCCEx_PeriphCLKConfig+0x7b8>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800ce14:	4b7f      	ldr	r3, [pc, #508]	; (800d014 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800ce16:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800ce1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ce1e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 800ce22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ce26:	2b00      	cmp	r3, #0
 800ce28:	d023      	beq.n	800ce72 <HAL_RCCEx_PeriphCLKConfig+0x74a>
 800ce2a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800ce2e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 800ce32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ce36:	4293      	cmp	r3, r2
 800ce38:	d01b      	beq.n	800ce72 <HAL_RCCEx_PeriphCLKConfig+0x74a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800ce3a:	4b76      	ldr	r3, [pc, #472]	; (800d014 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800ce3c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800ce40:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ce44:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800ce48:	4b72      	ldr	r3, [pc, #456]	; (800d014 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800ce4a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800ce4e:	4a71      	ldr	r2, [pc, #452]	; (800d014 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800ce50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ce54:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 800ce58:	4b6e      	ldr	r3, [pc, #440]	; (800d014 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800ce5a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800ce5e:	4a6d      	ldr	r2, [pc, #436]	; (800d014 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800ce60:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ce64:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800ce68:	4a6a      	ldr	r2, [pc, #424]	; (800d014 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800ce6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ce6e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800ce72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ce76:	f003 0301 	and.w	r3, r3, #1
 800ce7a:	2b00      	cmp	r3, #0
 800ce7c:	d019      	beq.n	800ceb2 <HAL_RCCEx_PeriphCLKConfig+0x78a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ce7e:	f7f9 fd5f 	bl	8006940 <HAL_GetTick>
 800ce82:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800ce86:	e00d      	b.n	800cea4 <HAL_RCCEx_PeriphCLKConfig+0x77c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ce88:	f7f9 fd5a 	bl	8006940 <HAL_GetTick>
 800ce8c:	4602      	mov	r2, r0
 800ce8e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ce92:	1ad2      	subs	r2, r2, r3
 800ce94:	f241 3388 	movw	r3, #5000	; 0x1388
 800ce98:	429a      	cmp	r2, r3
 800ce9a:	d903      	bls.n	800cea4 <HAL_RCCEx_PeriphCLKConfig+0x77c>
          {
            ret = HAL_TIMEOUT;
 800ce9c:	2303      	movs	r3, #3
 800ce9e:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
            break;
 800cea2:	e006      	b.n	800ceb2 <HAL_RCCEx_PeriphCLKConfig+0x78a>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800cea4:	4b5b      	ldr	r3, [pc, #364]	; (800d014 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800cea6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800ceaa:	f003 0302 	and.w	r3, r3, #2
 800ceae:	2b00      	cmp	r3, #0
 800ceb0:	d0ea      	beq.n	800ce88 <HAL_RCCEx_PeriphCLKConfig+0x760>
          }
        }
      }

      if (ret == HAL_OK)
 800ceb2:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800ceb6:	2b00      	cmp	r3, #0
 800ceb8:	d10d      	bne.n	800ced6 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 800ceba:	4b56      	ldr	r3, [pc, #344]	; (800d014 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800cebc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800cec0:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800cec4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800cec8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800cecc:	4a51      	ldr	r2, [pc, #324]	; (800d014 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800cece:	430b      	orrs	r3, r1
 800ced0:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800ced4:	e008      	b.n	800cee8 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800ced6:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800ceda:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
 800cede:	e003      	b.n	800cee8 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cee0:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800cee4:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800cee8:	f897 30e1 	ldrb.w	r3, [r7, #225]	; 0xe1
 800ceec:	2b01      	cmp	r3, #1
 800ceee:	d107      	bne.n	800cf00 <HAL_RCCEx_PeriphCLKConfig+0x7d8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800cef0:	4b48      	ldr	r3, [pc, #288]	; (800d014 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800cef2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800cef6:	4a47      	ldr	r2, [pc, #284]	; (800d014 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800cef8:	f023 0304 	bic.w	r3, r3, #4
 800cefc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }

  /*-------------------------------------- ICLK Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 800cf00:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800cf04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf08:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800cf0c:	64bb      	str	r3, [r7, #72]	; 0x48
 800cf0e:	2300      	movs	r3, #0
 800cf10:	64fb      	str	r3, [r7, #76]	; 0x4c
 800cf12:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800cf16:	460b      	mov	r3, r1
 800cf18:	4313      	orrs	r3, r2
 800cf1a:	d042      	beq.n	800cfa2 <HAL_RCCEx_PeriphCLKConfig+0x87a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(pPeriphClkInit->IclkClockSelection));

    switch (pPeriphClkInit->IclkClockSelection)
 800cf1c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800cf20:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800cf24:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800cf28:	d022      	beq.n	800cf70 <HAL_RCCEx_PeriphCLKConfig+0x848>
 800cf2a:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800cf2e:	d81b      	bhi.n	800cf68 <HAL_RCCEx_PeriphCLKConfig+0x840>
 800cf30:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800cf34:	d011      	beq.n	800cf5a <HAL_RCCEx_PeriphCLKConfig+0x832>
 800cf36:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800cf3a:	d815      	bhi.n	800cf68 <HAL_RCCEx_PeriphCLKConfig+0x840>
 800cf3c:	2b00      	cmp	r3, #0
 800cf3e:	d019      	beq.n	800cf74 <HAL_RCCEx_PeriphCLKConfig+0x84c>
 800cf40:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800cf44:	d110      	bne.n	800cf68 <HAL_RCCEx_PeriphCLKConfig+0x840>
    {
      case RCC_ICLK_CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800cf46:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800cf4a:	3308      	adds	r3, #8
 800cf4c:	4618      	mov	r0, r3
 800cf4e:	f001 ff05 	bl	800ed5c <RCCEx_PLL2_Config>
 800cf52:	4603      	mov	r3, r0
 800cf54:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 800cf58:	e00d      	b.n	800cf76 <HAL_RCCEx_PeriphCLKConfig+0x84e>
      case RCC_ICLK_CLKSOURCE_PLL1:
        /* Enable ICLK Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800cf5a:	4b2e      	ldr	r3, [pc, #184]	; (800d014 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800cf5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cf5e:	4a2d      	ldr	r2, [pc, #180]	; (800d014 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800cf60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800cf64:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 800cf66:	e006      	b.n	800cf76 <HAL_RCCEx_PeriphCLKConfig+0x84e>
      case RCC_ICLK_CLKSOURCE_HSI48:
        break;
      case RCC_ICLK_CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800cf68:	2301      	movs	r3, #1
 800cf6a:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 800cf6e:	e002      	b.n	800cf76 <HAL_RCCEx_PeriphCLKConfig+0x84e>
        break;
 800cf70:	bf00      	nop
 800cf72:	e000      	b.n	800cf76 <HAL_RCCEx_PeriphCLKConfig+0x84e>
        break;
 800cf74:	bf00      	nop
    }
    if (ret == HAL_OK)
 800cf76:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800cf7a:	2b00      	cmp	r3, #0
 800cf7c:	d10d      	bne.n	800cf9a <HAL_RCCEx_PeriphCLKConfig+0x872>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 800cf7e:	4b25      	ldr	r3, [pc, #148]	; (800d014 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800cf80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800cf84:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 800cf88:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800cf8c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800cf90:	4a20      	ldr	r2, [pc, #128]	; (800d014 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800cf92:	430b      	orrs	r3, r1
 800cf94:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800cf98:	e003      	b.n	800cfa2 <HAL_RCCEx_PeriphCLKConfig+0x87a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cf9a:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800cf9e:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800cfa2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800cfa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cfaa:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800cfae:	643b      	str	r3, [r7, #64]	; 0x40
 800cfb0:	2300      	movs	r3, #0
 800cfb2:	647b      	str	r3, [r7, #68]	; 0x44
 800cfb4:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800cfb8:	460b      	mov	r3, r1
 800cfba:	4313      	orrs	r3, r2
 800cfbc:	d032      	beq.n	800d024 <HAL_RCCEx_PeriphCLKConfig+0x8fc>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 800cfbe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800cfc2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800cfc6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800cfca:	d00b      	beq.n	800cfe4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 800cfcc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800cfd0:	d804      	bhi.n	800cfdc <HAL_RCCEx_PeriphCLKConfig+0x8b4>
 800cfd2:	2b00      	cmp	r3, #0
 800cfd4:	d008      	beq.n	800cfe8 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
 800cfd6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cfda:	d007      	beq.n	800cfec <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 800cfdc:	2301      	movs	r3, #1
 800cfde:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 800cfe2:	e004      	b.n	800cfee <HAL_RCCEx_PeriphCLKConfig+0x8c6>
        break;
 800cfe4:	bf00      	nop
 800cfe6:	e002      	b.n	800cfee <HAL_RCCEx_PeriphCLKConfig+0x8c6>
        break;
 800cfe8:	bf00      	nop
 800cfea:	e000      	b.n	800cfee <HAL_RCCEx_PeriphCLKConfig+0x8c6>
        break;
 800cfec:	bf00      	nop
    }
    if (ret == HAL_OK)
 800cfee:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800cff2:	2b00      	cmp	r3, #0
 800cff4:	d112      	bne.n	800d01c <HAL_RCCEx_PeriphCLKConfig+0x8f4>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 800cff6:	4b07      	ldr	r3, [pc, #28]	; (800d014 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800cff8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800cffc:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800d000:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800d004:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800d008:	4a02      	ldr	r2, [pc, #8]	; (800d014 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800d00a:	430b      	orrs	r3, r1
 800d00c:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 800d010:	e008      	b.n	800d024 <HAL_RCCEx_PeriphCLKConfig+0x8fc>
 800d012:	bf00      	nop
 800d014:	46020c00 	.word	0x46020c00
 800d018:	46020800 	.word	0x46020800
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d01c:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800d020:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }
  /*-------------------------- SAES clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAES) == RCC_PERIPHCLK_SAES)
 800d024:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800d028:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d02c:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800d030:	63bb      	str	r3, [r7, #56]	; 0x38
 800d032:	2300      	movs	r3, #0
 800d034:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d036:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800d03a:	460b      	mov	r3, r1
 800d03c:	4313      	orrs	r3, r2
 800d03e:	d00c      	beq.n	800d05a <HAL_RCCEx_PeriphCLKConfig+0x932>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAESCLKSOURCE(pPeriphClkInit->SaesClockSelection));

    /* Configure the SAES clock source */
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
 800d040:	4b98      	ldr	r3, [pc, #608]	; (800d2a4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800d042:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800d046:	f423 6100 	bic.w	r1, r3, #2048	; 0x800
 800d04a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800d04e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800d052:	4a94      	ldr	r2, [pc, #592]	; (800d2a4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800d054:	430b      	orrs	r3, r1
 800d056:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
  }
  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 800d05a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800d05e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d062:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800d066:	633b      	str	r3, [r7, #48]	; 0x30
 800d068:	2300      	movs	r3, #0
 800d06a:	637b      	str	r3, [r7, #52]	; 0x34
 800d06c:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800d070:	460b      	mov	r3, r1
 800d072:	4313      	orrs	r3, r2
 800d074:	d019      	beq.n	800d0aa <HAL_RCCEx_PeriphCLKConfig+0x982>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 800d076:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800d07a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800d07e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800d082:	d105      	bne.n	800d090 <HAL_RCCEx_PeriphCLKConfig+0x968>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800d084:	4b87      	ldr	r3, [pc, #540]	; (800d2a4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800d086:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d088:	4a86      	ldr	r2, [pc, #536]	; (800d2a4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800d08a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d08e:	6293      	str	r3, [r2, #40]	; 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 800d090:	4b84      	ldr	r3, [pc, #528]	; (800d2a4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800d092:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800d096:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 800d09a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800d09e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800d0a2:	4a80      	ldr	r2, [pc, #512]	; (800d2a4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800d0a4:	430b      	orrs	r3, r1
 800d0a6:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 800d0aa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800d0ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0b2:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800d0b6:	62bb      	str	r3, [r7, #40]	; 0x28
 800d0b8:	2300      	movs	r3, #0
 800d0ba:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d0bc:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800d0c0:	460b      	mov	r3, r1
 800d0c2:	4313      	orrs	r3, r2
 800d0c4:	d00c      	beq.n	800d0e0 <HAL_RCCEx_PeriphCLKConfig+0x9b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 800d0c6:	4b77      	ldr	r3, [pc, #476]	; (800d2a4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800d0c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800d0cc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800d0d0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800d0d4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800d0d8:	4972      	ldr	r1, [pc, #456]	; (800d2a4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800d0da:	4313      	orrs	r3, r2
 800d0dc:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 800d0e0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800d0e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0e8:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 800d0ec:	623b      	str	r3, [r7, #32]
 800d0ee:	2300      	movs	r3, #0
 800d0f0:	627b      	str	r3, [r7, #36]	; 0x24
 800d0f2:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800d0f6:	460b      	mov	r3, r1
 800d0f8:	4313      	orrs	r3, r2
 800d0fa:	d00c      	beq.n	800d116 <HAL_RCCEx_PeriphCLKConfig+0x9ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 800d0fc:	4b69      	ldr	r3, [pc, #420]	; (800d2a4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800d0fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800d102:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800d106:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800d10a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800d10e:	4965      	ldr	r1, [pc, #404]	; (800d2a4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800d110:	4313      	orrs	r3, r2
 800d112:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 800d116:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800d11a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d11e:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 800d122:	61bb      	str	r3, [r7, #24]
 800d124:	2300      	movs	r3, #0
 800d126:	61fb      	str	r3, [r7, #28]
 800d128:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800d12c:	460b      	mov	r3, r1
 800d12e:	4313      	orrs	r3, r2
 800d130:	d00c      	beq.n	800d14c <HAL_RCCEx_PeriphCLKConfig+0xa24>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 800d132:	4b5c      	ldr	r3, [pc, #368]	; (800d2a4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800d134:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800d138:	f023 0218 	bic.w	r2, r3, #24
 800d13c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800d140:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800d144:	4957      	ldr	r1, [pc, #348]	; (800d2a4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800d146:	4313      	orrs	r3, r2
 800d148:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800d14c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800d150:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d154:	f002 6380 	and.w	r3, r2, #67108864	; 0x4000000
 800d158:	613b      	str	r3, [r7, #16]
 800d15a:	2300      	movs	r3, #0
 800d15c:	617b      	str	r3, [r7, #20]
 800d15e:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800d162:	460b      	mov	r3, r1
 800d164:	4313      	orrs	r3, r2
 800d166:	d032      	beq.n	800d1ce <HAL_RCCEx_PeriphCLKConfig+0xaa6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 800d168:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800d16c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800d170:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800d174:	d105      	bne.n	800d182 <HAL_RCCEx_PeriphCLKConfig+0xa5a>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d176:	4b4b      	ldr	r3, [pc, #300]	; (800d2a4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800d178:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d17a:	4a4a      	ldr	r2, [pc, #296]	; (800d2a4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800d17c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800d180:	6293      	str	r3, [r2, #40]	; 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 800d182:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800d186:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800d18a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800d18e:	d108      	bne.n	800d1a2 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
    {
      /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800d190:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800d194:	3308      	adds	r3, #8
 800d196:	4618      	mov	r0, r3
 800d198:	f001 fde0 	bl	800ed5c <RCCEx_PLL2_Config>
 800d19c:	4603      	mov	r3, r0
 800d19e:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
    }
    if (ret == HAL_OK)
 800d1a2:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800d1a6:	2b00      	cmp	r3, #0
 800d1a8:	d10d      	bne.n	800d1c6 <HAL_RCCEx_PeriphCLKConfig+0xa9e>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 800d1aa:	4b3e      	ldr	r3, [pc, #248]	; (800d2a4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800d1ac:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800d1b0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800d1b4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800d1b8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800d1bc:	4939      	ldr	r1, [pc, #228]	; (800d2a4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800d1be:	4313      	orrs	r3, r2
 800d1c0:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 800d1c4:	e003      	b.n	800d1ce <HAL_RCCEx_PeriphCLKConfig+0xaa6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d1c6:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800d1ca:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }
#endif /* defined(HSPI1) */

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 800d1ce:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800d1d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1d6:	f002 6300 	and.w	r3, r2, #134217728	; 0x8000000
 800d1da:	60bb      	str	r3, [r7, #8]
 800d1dc:	2300      	movs	r3, #0
 800d1de:	60fb      	str	r3, [r7, #12]
 800d1e0:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800d1e4:	460b      	mov	r3, r1
 800d1e6:	4313      	orrs	r3, r2
 800d1e8:	d03a      	beq.n	800d260 <HAL_RCCEx_PeriphCLKConfig+0xb38>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 800d1ea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800d1ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d1f2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800d1f6:	d00e      	beq.n	800d216 <HAL_RCCEx_PeriphCLKConfig+0xaee>
 800d1f8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800d1fc:	d815      	bhi.n	800d22a <HAL_RCCEx_PeriphCLKConfig+0xb02>
 800d1fe:	2b00      	cmp	r3, #0
 800d200:	d017      	beq.n	800d232 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 800d202:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800d206:	d110      	bne.n	800d22a <HAL_RCCEx_PeriphCLKConfig+0xb02>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d208:	4b26      	ldr	r3, [pc, #152]	; (800d2a4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800d20a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d20c:	4a25      	ldr	r2, [pc, #148]	; (800d2a4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800d20e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800d212:	6293      	str	r3, [r2, #40]	; 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 800d214:	e00e      	b.n	800d234 <HAL_RCCEx_PeriphCLKConfig+0xb0c>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800d216:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800d21a:	3308      	adds	r3, #8
 800d21c:	4618      	mov	r0, r3
 800d21e:	f001 fd9d 	bl	800ed5c <RCCEx_PLL2_Config>
 800d222:	4603      	mov	r3, r0
 800d224:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 800d228:	e004      	b.n	800d234 <HAL_RCCEx_PeriphCLKConfig+0xb0c>
      default:
        ret = HAL_ERROR;
 800d22a:	2301      	movs	r3, #1
 800d22c:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 800d230:	e000      	b.n	800d234 <HAL_RCCEx_PeriphCLKConfig+0xb0c>
        break;
 800d232:	bf00      	nop
    }
    if (ret == HAL_OK)
 800d234:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800d238:	2b00      	cmp	r3, #0
 800d23a:	d10d      	bne.n	800d258 <HAL_RCCEx_PeriphCLKConfig+0xb30>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 800d23c:	4b19      	ldr	r3, [pc, #100]	; (800d2a4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800d23e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800d242:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800d246:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800d24a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d24e:	4915      	ldr	r1, [pc, #84]	; (800d2a4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800d250:	4313      	orrs	r3, r2
 800d252:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
 800d256:	e003      	b.n	800d260 <HAL_RCCEx_PeriphCLKConfig+0xb38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d258:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800d25c:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 800d260:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800d264:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d268:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 800d26c:	603b      	str	r3, [r7, #0]
 800d26e:	2300      	movs	r3, #0
 800d270:	607b      	str	r3, [r7, #4]
 800d272:	e9d7 1200 	ldrd	r1, r2, [r7]
 800d276:	460b      	mov	r3, r1
 800d278:	4313      	orrs	r3, r2
 800d27a:	d00c      	beq.n	800d296 <HAL_RCCEx_PeriphCLKConfig+0xb6e>

    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 800d27c:	4b09      	ldr	r3, [pc, #36]	; (800d2a4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800d27e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800d282:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800d286:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800d28a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800d28e:	4905      	ldr	r1, [pc, #20]	; (800d2a4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800d290:	4313      	orrs	r3, r2
 800d292:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
    }
  }

#endif /* defined(USB_OTG_HS) */

  return status;
 800d296:	f897 30e2 	ldrb.w	r3, [r7, #226]	; 0xe2
}
 800d29a:	4618      	mov	r0, r3
 800d29c:	37e8      	adds	r7, #232	; 0xe8
 800d29e:	46bd      	mov	sp, r7
 800d2a0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800d2a4:	46020c00 	.word	0x46020c00

0800d2a8 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800d2a8:	b480      	push	{r7}
 800d2aa:	b089      	sub	sp, #36	; 0x24
 800d2ac:	af00      	add	r7, sp, #0
 800d2ae:	6078      	str	r0, [r7, #4]
  uint32_t pll1n;
  uint32_t pll1fracen;
  float_t fracn1;
  float_t pll1vco;

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 800d2b0:	4bac      	ldr	r3, [pc, #688]	; (800d564 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 800d2b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d2b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d2b8:	61bb      	str	r3, [r7, #24]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 800d2ba:	4baa      	ldr	r3, [pc, #680]	; (800d564 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 800d2bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d2be:	f003 0303 	and.w	r3, r3, #3
 800d2c2:	617b      	str	r3, [r7, #20]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 800d2c4:	4ba7      	ldr	r3, [pc, #668]	; (800d564 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 800d2c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d2c8:	0a1b      	lsrs	r3, r3, #8
 800d2ca:	f003 030f 	and.w	r3, r3, #15
 800d2ce:	3301      	adds	r3, #1
 800d2d0:	613b      	str	r3, [r7, #16]
  pll1fracen = RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN;
 800d2d2:	4ba4      	ldr	r3, [pc, #656]	; (800d564 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 800d2d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d2d6:	f003 0310 	and.w	r3, r3, #16
 800d2da:	60fb      	str	r3, [r7, #12]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 800d2dc:	4ba1      	ldr	r3, [pc, #644]	; (800d564 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 800d2de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d2e0:	08db      	lsrs	r3, r3, #3
 800d2e2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d2e6:	68fa      	ldr	r2, [r7, #12]
 800d2e8:	fb02 f303 	mul.w	r3, r2, r3
 800d2ec:	ee07 3a90 	vmov	s15, r3
 800d2f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d2f4:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  if (pll1m != 0U)
 800d2f8:	693b      	ldr	r3, [r7, #16]
 800d2fa:	2b00      	cmp	r3, #0
 800d2fc:	f000 8123 	beq.w	800d546 <HAL_RCCEx_GetPLL1ClockFreq+0x29e>
  {
    switch (pll1source)
 800d300:	697b      	ldr	r3, [r7, #20]
 800d302:	2b03      	cmp	r3, #3
 800d304:	d062      	beq.n	800d3cc <HAL_RCCEx_GetPLL1ClockFreq+0x124>
 800d306:	697b      	ldr	r3, [r7, #20]
 800d308:	2b03      	cmp	r3, #3
 800d30a:	f200 8081 	bhi.w	800d410 <HAL_RCCEx_GetPLL1ClockFreq+0x168>
 800d30e:	697b      	ldr	r3, [r7, #20]
 800d310:	2b01      	cmp	r3, #1
 800d312:	d024      	beq.n	800d35e <HAL_RCCEx_GetPLL1ClockFreq+0xb6>
 800d314:	697b      	ldr	r3, [r7, #20]
 800d316:	2b02      	cmp	r3, #2
 800d318:	d17a      	bne.n	800d410 <HAL_RCCEx_GetPLL1ClockFreq+0x168>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800d31a:	693b      	ldr	r3, [r7, #16]
 800d31c:	ee07 3a90 	vmov	s15, r3
 800d320:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d324:	eddf 6a90 	vldr	s13, [pc, #576]	; 800d568 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>
 800d328:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d32c:	4b8d      	ldr	r3, [pc, #564]	; (800d564 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 800d32e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d330:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d334:	ee07 3a90 	vmov	s15, r3
 800d338:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 800d33c:	ed97 6a02 	vldr	s12, [r7, #8]
 800d340:	eddf 5a8a 	vldr	s11, [pc, #552]	; 800d56c <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>
 800d344:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800d348:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 800d34c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d350:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800d354:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d358:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d35c:	e08f      	b.n	800d47e <HAL_RCCEx_GetPLL1ClockFreq+0x1d6>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800d35e:	4b81      	ldr	r3, [pc, #516]	; (800d564 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 800d360:	689b      	ldr	r3, [r3, #8]
 800d362:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d366:	2b00      	cmp	r3, #0
 800d368:	d005      	beq.n	800d376 <HAL_RCCEx_GetPLL1ClockFreq+0xce>
 800d36a:	4b7e      	ldr	r3, [pc, #504]	; (800d564 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 800d36c:	689b      	ldr	r3, [r3, #8]
 800d36e:	0f1b      	lsrs	r3, r3, #28
 800d370:	f003 030f 	and.w	r3, r3, #15
 800d374:	e006      	b.n	800d384 <HAL_RCCEx_GetPLL1ClockFreq+0xdc>
 800d376:	4b7b      	ldr	r3, [pc, #492]	; (800d564 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 800d378:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800d37c:	041b      	lsls	r3, r3, #16
 800d37e:	0f1b      	lsrs	r3, r3, #28
 800d380:	f003 030f 	and.w	r3, r3, #15
 800d384:	4a7a      	ldr	r2, [pc, #488]	; (800d570 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>)
 800d386:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d38a:	ee07 3a90 	vmov	s15, r3
 800d38e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d392:	693b      	ldr	r3, [r7, #16]
 800d394:	ee07 3a90 	vmov	s15, r3
 800d398:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d39c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d3a0:	69bb      	ldr	r3, [r7, #24]
 800d3a2:	ee07 3a90 	vmov	s15, r3
 800d3a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d3aa:	ed97 6a02 	vldr	s12, [r7, #8]
 800d3ae:	eddf 5a6f 	vldr	s11, [pc, #444]	; 800d56c <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>
 800d3b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d3b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d3ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d3be:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800d3c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d3c6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d3ca:	e058      	b.n	800d47e <HAL_RCCEx_GetPLL1ClockFreq+0x1d6>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800d3cc:	693b      	ldr	r3, [r7, #16]
 800d3ce:	ee07 3a90 	vmov	s15, r3
 800d3d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d3d6:	eddf 6a64 	vldr	s13, [pc, #400]	; 800d568 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>
 800d3da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d3de:	4b61      	ldr	r3, [pc, #388]	; (800d564 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 800d3e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d3e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d3e6:	ee07 3a90 	vmov	s15, r3
 800d3ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 800d3ee:	ed97 6a02 	vldr	s12, [r7, #8]
 800d3f2:	eddf 5a5e 	vldr	s11, [pc, #376]	; 800d56c <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>
 800d3f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800d3fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 800d3fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d402:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800d406:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d40a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d40e:	e036      	b.n	800d47e <HAL_RCCEx_GetPLL1ClockFreq+0x1d6>
      default:
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800d410:	4b54      	ldr	r3, [pc, #336]	; (800d564 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 800d412:	689b      	ldr	r3, [r3, #8]
 800d414:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d418:	2b00      	cmp	r3, #0
 800d41a:	d005      	beq.n	800d428 <HAL_RCCEx_GetPLL1ClockFreq+0x180>
 800d41c:	4b51      	ldr	r3, [pc, #324]	; (800d564 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 800d41e:	689b      	ldr	r3, [r3, #8]
 800d420:	0f1b      	lsrs	r3, r3, #28
 800d422:	f003 030f 	and.w	r3, r3, #15
 800d426:	e006      	b.n	800d436 <HAL_RCCEx_GetPLL1ClockFreq+0x18e>
 800d428:	4b4e      	ldr	r3, [pc, #312]	; (800d564 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 800d42a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800d42e:	041b      	lsls	r3, r3, #16
 800d430:	0f1b      	lsrs	r3, r3, #28
 800d432:	f003 030f 	and.w	r3, r3, #15
 800d436:	4a4e      	ldr	r2, [pc, #312]	; (800d570 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>)
 800d438:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d43c:	ee07 3a90 	vmov	s15, r3
 800d440:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d444:	693b      	ldr	r3, [r7, #16]
 800d446:	ee07 3a90 	vmov	s15, r3
 800d44a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d44e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d452:	69bb      	ldr	r3, [r7, #24]
 800d454:	ee07 3a90 	vmov	s15, r3
 800d458:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d45c:	ed97 6a02 	vldr	s12, [r7, #8]
 800d460:	eddf 5a42 	vldr	s11, [pc, #264]	; 800d56c <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>
 800d464:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d468:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d46c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d470:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800d474:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d478:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d47c:	bf00      	nop
    }

    if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 800d47e:	4b39      	ldr	r3, [pc, #228]	; (800d564 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 800d480:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d482:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d486:	2b00      	cmp	r3, #0
 800d488:	d017      	beq.n	800d4ba <HAL_RCCEx_GetPLL1ClockFreq+0x212>
    {
      PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800d48a:	4b36      	ldr	r3, [pc, #216]	; (800d564 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 800d48c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d48e:	0a5b      	lsrs	r3, r3, #9
 800d490:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d494:	ee07 3a90 	vmov	s15, r3
 800d498:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + \
 800d49c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d4a0:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800d4a4:	edd7 6a07 	vldr	s13, [r7, #28]
 800d4a8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d4ac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d4b0:	ee17 2a90 	vmov	r2, s15
 800d4b4:	687b      	ldr	r3, [r7, #4]
 800d4b6:	601a      	str	r2, [r3, #0]
 800d4b8:	e002      	b.n	800d4c0 <HAL_RCCEx_GetPLL1ClockFreq+0x218>
                                                                     (float_t)1));
    }
    else
    {
      PLL1_Clocks->PLL1_P_Frequency = 0U;
 800d4ba:	687b      	ldr	r3, [r7, #4]
 800d4bc:	2200      	movs	r2, #0
 800d4be:	601a      	str	r2, [r3, #0]
    }

    if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 800d4c0:	4b28      	ldr	r3, [pc, #160]	; (800d564 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 800d4c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d4c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d4c8:	2b00      	cmp	r3, #0
 800d4ca:	d017      	beq.n	800d4fc <HAL_RCCEx_GetPLL1ClockFreq+0x254>
    {
      PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800d4cc:	4b25      	ldr	r3, [pc, #148]	; (800d564 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 800d4ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d4d0:	0c1b      	lsrs	r3, r3, #16
 800d4d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d4d6:	ee07 3a90 	vmov	s15, r3
 800d4da:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL1DIVR_PLL1Q) >> RCC_PLL1DIVR_PLL1Q_Pos) + \
 800d4de:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d4e2:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800d4e6:	edd7 6a07 	vldr	s13, [r7, #28]
 800d4ea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d4ee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d4f2:	ee17 2a90 	vmov	r2, s15
 800d4f6:	687b      	ldr	r3, [r7, #4]
 800d4f8:	605a      	str	r2, [r3, #4]
 800d4fa:	e002      	b.n	800d502 <HAL_RCCEx_GetPLL1ClockFreq+0x25a>
                                                                     (float_t)1));
    }
    else
    {
      PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800d4fc:	687b      	ldr	r3, [r7, #4]
 800d4fe:	2200      	movs	r2, #0
 800d500:	605a      	str	r2, [r3, #4]
    }

    if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 800d502:	4b18      	ldr	r3, [pc, #96]	; (800d564 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 800d504:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d506:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800d50a:	2b00      	cmp	r3, #0
 800d50c:	d017      	beq.n	800d53e <HAL_RCCEx_GetPLL1ClockFreq+0x296>
    {
      PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800d50e:	4b15      	ldr	r3, [pc, #84]	; (800d564 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 800d510:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d512:	0e1b      	lsrs	r3, r3, #24
 800d514:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d518:	ee07 3a90 	vmov	s15, r3
 800d51c:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + \
 800d520:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d524:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800d528:	edd7 6a07 	vldr	s13, [r7, #28]
 800d52c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d530:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d534:	ee17 2a90 	vmov	r2, s15
 800d538:	687b      	ldr	r3, [r7, #4]
 800d53a:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800d53c:	e00c      	b.n	800d558 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>
      PLL1_Clocks->PLL1_R_Frequency = 0U;
 800d53e:	687b      	ldr	r3, [r7, #4]
 800d540:	2200      	movs	r2, #0
 800d542:	609a      	str	r2, [r3, #8]
}
 800d544:	e008      	b.n	800d558 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800d546:	687b      	ldr	r3, [r7, #4]
 800d548:	2200      	movs	r2, #0
 800d54a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800d54c:	687b      	ldr	r3, [r7, #4]
 800d54e:	2200      	movs	r2, #0
 800d550:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800d552:	687b      	ldr	r3, [r7, #4]
 800d554:	2200      	movs	r2, #0
 800d556:	609a      	str	r2, [r3, #8]
}
 800d558:	bf00      	nop
 800d55a:	3724      	adds	r7, #36	; 0x24
 800d55c:	46bd      	mov	sp, r7
 800d55e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d562:	4770      	bx	lr
 800d564:	46020c00 	.word	0x46020c00
 800d568:	4b742400 	.word	0x4b742400
 800d56c:	46000000 	.word	0x46000000
 800d570:	0801502c 	.word	0x0801502c

0800d574 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800d574:	b480      	push	{r7}
 800d576:	b089      	sub	sp, #36	; 0x24
 800d578:	af00      	add	r7, sp, #0
 800d57a:	6078      	str	r0, [r7, #4]
  float_t fracn2;
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 800d57c:	4bac      	ldr	r3, [pc, #688]	; (800d830 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 800d57e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d580:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d584:	61bb      	str	r3, [r7, #24]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 800d586:	4baa      	ldr	r3, [pc, #680]	; (800d830 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 800d588:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d58a:	f003 0303 	and.w	r3, r3, #3
 800d58e:	617b      	str	r3, [r7, #20]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos) + 1U;
 800d590:	4ba7      	ldr	r3, [pc, #668]	; (800d830 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 800d592:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d594:	0a1b      	lsrs	r3, r3, #8
 800d596:	f003 030f 	and.w	r3, r3, #15
 800d59a:	3301      	adds	r3, #1
 800d59c:	613b      	str	r3, [r7, #16]
  pll2fracen = RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN;
 800d59e:	4ba4      	ldr	r3, [pc, #656]	; (800d830 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 800d5a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d5a2:	f003 0310 	and.w	r3, r3, #16
 800d5a6:	60fb      	str	r3, [r7, #12]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 800d5a8:	4ba1      	ldr	r3, [pc, #644]	; (800d830 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 800d5aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d5ac:	08db      	lsrs	r3, r3, #3
 800d5ae:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d5b2:	68fa      	ldr	r2, [r7, #12]
 800d5b4:	fb02 f303 	mul.w	r3, r2, r3
 800d5b8:	ee07 3a90 	vmov	s15, r3
 800d5bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d5c0:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  if (pll2m != 0U)
 800d5c4:	693b      	ldr	r3, [r7, #16]
 800d5c6:	2b00      	cmp	r3, #0
 800d5c8:	f000 8123 	beq.w	800d812 <HAL_RCCEx_GetPLL2ClockFreq+0x29e>
  {
    switch (pll2source)
 800d5cc:	697b      	ldr	r3, [r7, #20]
 800d5ce:	2b03      	cmp	r3, #3
 800d5d0:	d062      	beq.n	800d698 <HAL_RCCEx_GetPLL2ClockFreq+0x124>
 800d5d2:	697b      	ldr	r3, [r7, #20]
 800d5d4:	2b03      	cmp	r3, #3
 800d5d6:	f200 8081 	bhi.w	800d6dc <HAL_RCCEx_GetPLL2ClockFreq+0x168>
 800d5da:	697b      	ldr	r3, [r7, #20]
 800d5dc:	2b01      	cmp	r3, #1
 800d5de:	d024      	beq.n	800d62a <HAL_RCCEx_GetPLL2ClockFreq+0xb6>
 800d5e0:	697b      	ldr	r3, [r7, #20]
 800d5e2:	2b02      	cmp	r3, #2
 800d5e4:	d17a      	bne.n	800d6dc <HAL_RCCEx_GetPLL2ClockFreq+0x168>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800d5e6:	693b      	ldr	r3, [r7, #16]
 800d5e8:	ee07 3a90 	vmov	s15, r3
 800d5ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d5f0:	eddf 6a90 	vldr	s13, [pc, #576]	; 800d834 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>
 800d5f4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d5f8:	4b8d      	ldr	r3, [pc, #564]	; (800d830 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 800d5fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d5fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d600:	ee07 3a90 	vmov	s15, r3
 800d604:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 800d608:	ed97 6a02 	vldr	s12, [r7, #8]
 800d60c:	eddf 5a8a 	vldr	s11, [pc, #552]	; 800d838 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>
 800d610:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800d614:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 800d618:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d61c:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800d620:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d624:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d628:	e08f      	b.n	800d74a <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 800d62a:	4b81      	ldr	r3, [pc, #516]	; (800d830 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 800d62c:	689b      	ldr	r3, [r3, #8]
 800d62e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d632:	2b00      	cmp	r3, #0
 800d634:	d005      	beq.n	800d642 <HAL_RCCEx_GetPLL2ClockFreq+0xce>
 800d636:	4b7e      	ldr	r3, [pc, #504]	; (800d830 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 800d638:	689b      	ldr	r3, [r3, #8]
 800d63a:	0f1b      	lsrs	r3, r3, #28
 800d63c:	f003 030f 	and.w	r3, r3, #15
 800d640:	e006      	b.n	800d650 <HAL_RCCEx_GetPLL2ClockFreq+0xdc>
 800d642:	4b7b      	ldr	r3, [pc, #492]	; (800d830 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 800d644:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800d648:	041b      	lsls	r3, r3, #16
 800d64a:	0f1b      	lsrs	r3, r3, #28
 800d64c:	f003 030f 	and.w	r3, r3, #15
 800d650:	4a7a      	ldr	r2, [pc, #488]	; (800d83c <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>)
 800d652:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d656:	ee07 3a90 	vmov	s15, r3
 800d65a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d65e:	693b      	ldr	r3, [r7, #16]
 800d660:	ee07 3a90 	vmov	s15, r3
 800d664:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d668:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 800d66c:	69bb      	ldr	r3, [r7, #24]
 800d66e:	ee07 3a90 	vmov	s15, r3
 800d672:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d676:	ed97 6a02 	vldr	s12, [r7, #8]
 800d67a:	eddf 5a6f 	vldr	s11, [pc, #444]	; 800d838 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>
 800d67e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d682:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d686:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d68a:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 800d68e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d692:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d696:	e058      	b.n	800d74a <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800d698:	693b      	ldr	r3, [r7, #16]
 800d69a:	ee07 3a90 	vmov	s15, r3
 800d69e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d6a2:	eddf 6a64 	vldr	s13, [pc, #400]	; 800d834 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>
 800d6a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d6aa:	4b61      	ldr	r3, [pc, #388]	; (800d830 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 800d6ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d6ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d6b2:	ee07 3a90 	vmov	s15, r3
 800d6b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 800d6ba:	ed97 6a02 	vldr	s12, [r7, #8]
 800d6be:	eddf 5a5e 	vldr	s11, [pc, #376]	; 800d838 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>
 800d6c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800d6c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 800d6ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d6ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800d6d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d6d6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d6da:	e036      	b.n	800d74a <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

      default:
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 800d6dc:	4b54      	ldr	r3, [pc, #336]	; (800d830 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 800d6de:	689b      	ldr	r3, [r3, #8]
 800d6e0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d6e4:	2b00      	cmp	r3, #0
 800d6e6:	d005      	beq.n	800d6f4 <HAL_RCCEx_GetPLL2ClockFreq+0x180>
 800d6e8:	4b51      	ldr	r3, [pc, #324]	; (800d830 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 800d6ea:	689b      	ldr	r3, [r3, #8]
 800d6ec:	0f1b      	lsrs	r3, r3, #28
 800d6ee:	f003 030f 	and.w	r3, r3, #15
 800d6f2:	e006      	b.n	800d702 <HAL_RCCEx_GetPLL2ClockFreq+0x18e>
 800d6f4:	4b4e      	ldr	r3, [pc, #312]	; (800d830 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 800d6f6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800d6fa:	041b      	lsls	r3, r3, #16
 800d6fc:	0f1b      	lsrs	r3, r3, #28
 800d6fe:	f003 030f 	and.w	r3, r3, #15
 800d702:	4a4e      	ldr	r2, [pc, #312]	; (800d83c <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>)
 800d704:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d708:	ee07 3a90 	vmov	s15, r3
 800d70c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d710:	693b      	ldr	r3, [r7, #16]
 800d712:	ee07 3a90 	vmov	s15, r3
 800d716:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d71a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  * ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 800d71e:	69bb      	ldr	r3, [r7, #24]
 800d720:	ee07 3a90 	vmov	s15, r3
 800d724:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d728:	ed97 6a02 	vldr	s12, [r7, #8]
 800d72c:	eddf 5a42 	vldr	s11, [pc, #264]	; 800d838 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>
 800d730:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d734:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d738:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d73c:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 800d740:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d744:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d748:	bf00      	nop
    }
    if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 800d74a:	4b39      	ldr	r3, [pc, #228]	; (800d830 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 800d74c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d74e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d752:	2b00      	cmp	r3, #0
 800d754:	d017      	beq.n	800d786 <HAL_RCCEx_GetPLL2ClockFreq+0x212>
    {
      PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800d756:	4b36      	ldr	r3, [pc, #216]	; (800d830 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 800d758:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d75a:	0a5b      	lsrs	r3, r3, #9
 800d75c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d760:	ee07 3a90 	vmov	s15, r3
 800d764:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL2DIVR_PLL2P) >> RCC_PLL2DIVR_PLL2P_Pos) + \
 800d768:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d76c:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800d770:	edd7 6a07 	vldr	s13, [r7, #28]
 800d774:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d778:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d77c:	ee17 2a90 	vmov	r2, s15
 800d780:	687b      	ldr	r3, [r7, #4]
 800d782:	601a      	str	r2, [r3, #0]
 800d784:	e002      	b.n	800d78c <HAL_RCCEx_GetPLL2ClockFreq+0x218>
                                                                     (float_t)1));
    }
    else
    {
      PLL2_Clocks->PLL2_P_Frequency = 0U;
 800d786:	687b      	ldr	r3, [r7, #4]
 800d788:	2200      	movs	r2, #0
 800d78a:	601a      	str	r2, [r3, #0]
    }
    if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 800d78c:	4b28      	ldr	r3, [pc, #160]	; (800d830 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 800d78e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d790:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d794:	2b00      	cmp	r3, #0
 800d796:	d017      	beq.n	800d7c8 <HAL_RCCEx_GetPLL2ClockFreq+0x254>
    {
      PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800d798:	4b25      	ldr	r3, [pc, #148]	; (800d830 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 800d79a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d79c:	0c1b      	lsrs	r3, r3, #16
 800d79e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d7a2:	ee07 3a90 	vmov	s15, r3
 800d7a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL2DIVR_PLL2Q) >> RCC_PLL2DIVR_PLL2Q_Pos) + \
 800d7aa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d7ae:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800d7b2:	edd7 6a07 	vldr	s13, [r7, #28]
 800d7b6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d7ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d7be:	ee17 2a90 	vmov	r2, s15
 800d7c2:	687b      	ldr	r3, [r7, #4]
 800d7c4:	605a      	str	r2, [r3, #4]
 800d7c6:	e002      	b.n	800d7ce <HAL_RCCEx_GetPLL2ClockFreq+0x25a>
                                                                     (float_t)1));
    }
    else
    {
      PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800d7c8:	687b      	ldr	r3, [r7, #4]
 800d7ca:	2200      	movs	r2, #0
 800d7cc:	605a      	str	r2, [r3, #4]
    }
    if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 800d7ce:	4b18      	ldr	r3, [pc, #96]	; (800d830 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 800d7d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d7d2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800d7d6:	2b00      	cmp	r3, #0
 800d7d8:	d017      	beq.n	800d80a <HAL_RCCEx_GetPLL2ClockFreq+0x296>
    {
      PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800d7da:	4b15      	ldr	r3, [pc, #84]	; (800d830 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 800d7dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d7de:	0e1b      	lsrs	r3, r3, #24
 800d7e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d7e4:	ee07 3a90 	vmov	s15, r3
 800d7e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL2DIVR_PLL2R) >> RCC_PLL2DIVR_PLL2R_Pos) + \
 800d7ec:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d7f0:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800d7f4:	edd7 6a07 	vldr	s13, [r7, #28]
 800d7f8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d7fc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d800:	ee17 2a90 	vmov	r2, s15
 800d804:	687b      	ldr	r3, [r7, #4]
 800d806:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800d808:	e00c      	b.n	800d824 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>
      PLL2_Clocks->PLL2_R_Frequency = 0U;
 800d80a:	687b      	ldr	r3, [r7, #4]
 800d80c:	2200      	movs	r2, #0
 800d80e:	609a      	str	r2, [r3, #8]
}
 800d810:	e008      	b.n	800d824 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800d812:	687b      	ldr	r3, [r7, #4]
 800d814:	2200      	movs	r2, #0
 800d816:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800d818:	687b      	ldr	r3, [r7, #4]
 800d81a:	2200      	movs	r2, #0
 800d81c:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800d81e:	687b      	ldr	r3, [r7, #4]
 800d820:	2200      	movs	r2, #0
 800d822:	609a      	str	r2, [r3, #8]
}
 800d824:	bf00      	nop
 800d826:	3724      	adds	r7, #36	; 0x24
 800d828:	46bd      	mov	sp, r7
 800d82a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d82e:	4770      	bx	lr
 800d830:	46020c00 	.word	0x46020c00
 800d834:	4b742400 	.word	0x4b742400
 800d838:	46000000 	.word	0x46000000
 800d83c:	0801502c 	.word	0x0801502c

0800d840 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800d840:	b480      	push	{r7}
 800d842:	b089      	sub	sp, #36	; 0x24
 800d844:	af00      	add	r7, sp, #0
 800d846:	6078      	str	r0, [r7, #4]

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLLxR
  */

  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 800d848:	4bac      	ldr	r3, [pc, #688]	; (800dafc <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 800d84a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d84c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d850:	61bb      	str	r3, [r7, #24]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 800d852:	4baa      	ldr	r3, [pc, #680]	; (800dafc <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 800d854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d856:	f003 0303 	and.w	r3, r3, #3
 800d85a:	617b      	str	r3, [r7, #20]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos) + 1U;
 800d85c:	4ba7      	ldr	r3, [pc, #668]	; (800dafc <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 800d85e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d860:	0a1b      	lsrs	r3, r3, #8
 800d862:	f003 030f 	and.w	r3, r3, #15
 800d866:	3301      	adds	r3, #1
 800d868:	613b      	str	r3, [r7, #16]
  pll3fracen = RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN;
 800d86a:	4ba4      	ldr	r3, [pc, #656]	; (800dafc <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 800d86c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d86e:	f003 0310 	and.w	r3, r3, #16
 800d872:	60fb      	str	r3, [r7, #12]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 800d874:	4ba1      	ldr	r3, [pc, #644]	; (800dafc <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 800d876:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d878:	08db      	lsrs	r3, r3, #3
 800d87a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d87e:	68fa      	ldr	r2, [r7, #12]
 800d880:	fb02 f303 	mul.w	r3, r2, r3
 800d884:	ee07 3a90 	vmov	s15, r3
 800d888:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d88c:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  if (pll3m != 0U)
 800d890:	693b      	ldr	r3, [r7, #16]
 800d892:	2b00      	cmp	r3, #0
 800d894:	f000 8123 	beq.w	800dade <HAL_RCCEx_GetPLL3ClockFreq+0x29e>
  {
    switch (pll3source)
 800d898:	697b      	ldr	r3, [r7, #20]
 800d89a:	2b03      	cmp	r3, #3
 800d89c:	d062      	beq.n	800d964 <HAL_RCCEx_GetPLL3ClockFreq+0x124>
 800d89e:	697b      	ldr	r3, [r7, #20]
 800d8a0:	2b03      	cmp	r3, #3
 800d8a2:	f200 8081 	bhi.w	800d9a8 <HAL_RCCEx_GetPLL3ClockFreq+0x168>
 800d8a6:	697b      	ldr	r3, [r7, #20]
 800d8a8:	2b01      	cmp	r3, #1
 800d8aa:	d024      	beq.n	800d8f6 <HAL_RCCEx_GetPLL3ClockFreq+0xb6>
 800d8ac:	697b      	ldr	r3, [r7, #20]
 800d8ae:	2b02      	cmp	r3, #2
 800d8b0:	d17a      	bne.n	800d9a8 <HAL_RCCEx_GetPLL3ClockFreq+0x168>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800d8b2:	693b      	ldr	r3, [r7, #16]
 800d8b4:	ee07 3a90 	vmov	s15, r3
 800d8b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d8bc:	eddf 6a90 	vldr	s13, [pc, #576]	; 800db00 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>
 800d8c0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d8c4:	4b8d      	ldr	r3, [pc, #564]	; (800dafc <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 800d8c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d8c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d8cc:	ee07 3a90 	vmov	s15, r3
 800d8d0:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 800d8d4:	ed97 6a02 	vldr	s12, [r7, #8]
 800d8d8:	eddf 5a8a 	vldr	s11, [pc, #552]	; 800db04 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>
 800d8dc:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800d8e0:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 800d8e4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d8e8:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800d8ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d8f0:	edc7 7a07 	vstr	s15, [r7, #28]

        break;
 800d8f4:	e08f      	b.n	800da16 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800d8f6:	4b81      	ldr	r3, [pc, #516]	; (800dafc <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 800d8f8:	689b      	ldr	r3, [r3, #8]
 800d8fa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d8fe:	2b00      	cmp	r3, #0
 800d900:	d005      	beq.n	800d90e <HAL_RCCEx_GetPLL3ClockFreq+0xce>
 800d902:	4b7e      	ldr	r3, [pc, #504]	; (800dafc <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 800d904:	689b      	ldr	r3, [r3, #8]
 800d906:	0f1b      	lsrs	r3, r3, #28
 800d908:	f003 030f 	and.w	r3, r3, #15
 800d90c:	e006      	b.n	800d91c <HAL_RCCEx_GetPLL3ClockFreq+0xdc>
 800d90e:	4b7b      	ldr	r3, [pc, #492]	; (800dafc <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 800d910:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800d914:	041b      	lsls	r3, r3, #16
 800d916:	0f1b      	lsrs	r3, r3, #28
 800d918:	f003 030f 	and.w	r3, r3, #15
 800d91c:	4a7a      	ldr	r2, [pc, #488]	; (800db08 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>)
 800d91e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d922:	ee07 3a90 	vmov	s15, r3
 800d926:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d92a:	693b      	ldr	r3, [r7, #16]
 800d92c:	ee07 3a90 	vmov	s15, r3
 800d930:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d934:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d938:	69bb      	ldr	r3, [r7, #24]
 800d93a:	ee07 3a90 	vmov	s15, r3
 800d93e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d942:	ed97 6a02 	vldr	s12, [r7, #8]
 800d946:	eddf 5a6f 	vldr	s11, [pc, #444]	; 800db04 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>
 800d94a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d94e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d952:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d956:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800d95a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d95e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d962:	e058      	b.n	800da16 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800d964:	693b      	ldr	r3, [r7, #16]
 800d966:	ee07 3a90 	vmov	s15, r3
 800d96a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d96e:	eddf 6a64 	vldr	s13, [pc, #400]	; 800db00 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>
 800d972:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d976:	4b61      	ldr	r3, [pc, #388]	; (800dafc <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 800d978:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d97a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d97e:	ee07 3a90 	vmov	s15, r3
 800d982:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 800d986:	ed97 6a02 	vldr	s12, [r7, #8]
 800d98a:	eddf 5a5e 	vldr	s11, [pc, #376]	; 800db04 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>
 800d98e:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800d992:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 800d996:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d99a:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800d99e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d9a2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d9a6:	e036      	b.n	800da16 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

      default:
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800d9a8:	4b54      	ldr	r3, [pc, #336]	; (800dafc <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 800d9aa:	689b      	ldr	r3, [r3, #8]
 800d9ac:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d9b0:	2b00      	cmp	r3, #0
 800d9b2:	d005      	beq.n	800d9c0 <HAL_RCCEx_GetPLL3ClockFreq+0x180>
 800d9b4:	4b51      	ldr	r3, [pc, #324]	; (800dafc <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 800d9b6:	689b      	ldr	r3, [r3, #8]
 800d9b8:	0f1b      	lsrs	r3, r3, #28
 800d9ba:	f003 030f 	and.w	r3, r3, #15
 800d9be:	e006      	b.n	800d9ce <HAL_RCCEx_GetPLL3ClockFreq+0x18e>
 800d9c0:	4b4e      	ldr	r3, [pc, #312]	; (800dafc <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 800d9c2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800d9c6:	041b      	lsls	r3, r3, #16
 800d9c8:	0f1b      	lsrs	r3, r3, #28
 800d9ca:	f003 030f 	and.w	r3, r3, #15
 800d9ce:	4a4e      	ldr	r2, [pc, #312]	; (800db08 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>)
 800d9d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d9d4:	ee07 3a90 	vmov	s15, r3
 800d9d8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d9dc:	693b      	ldr	r3, [r7, #16]
 800d9de:	ee07 3a90 	vmov	s15, r3
 800d9e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d9e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d9ea:	69bb      	ldr	r3, [r7, #24]
 800d9ec:	ee07 3a90 	vmov	s15, r3
 800d9f0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d9f4:	ed97 6a02 	vldr	s12, [r7, #8]
 800d9f8:	eddf 5a42 	vldr	s11, [pc, #264]	; 800db04 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>
 800d9fc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800da00:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800da04:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800da08:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800da0c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800da10:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800da14:	bf00      	nop
    }

    if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 800da16:	4b39      	ldr	r3, [pc, #228]	; (800dafc <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 800da18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800da1a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800da1e:	2b00      	cmp	r3, #0
 800da20:	d017      	beq.n	800da52 <HAL_RCCEx_GetPLL3ClockFreq+0x212>
    {
      PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800da22:	4b36      	ldr	r3, [pc, #216]	; (800dafc <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 800da24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800da26:	0a5b      	lsrs	r3, r3, #9
 800da28:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800da2c:	ee07 3a90 	vmov	s15, r3
 800da30:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL3DIVR_PLL3P) >> RCC_PLL3DIVR_PLL3P_Pos) + \
 800da34:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800da38:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800da3c:	edd7 6a07 	vldr	s13, [r7, #28]
 800da40:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800da44:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800da48:	ee17 2a90 	vmov	r2, s15
 800da4c:	687b      	ldr	r3, [r7, #4]
 800da4e:	601a      	str	r2, [r3, #0]
 800da50:	e002      	b.n	800da58 <HAL_RCCEx_GetPLL3ClockFreq+0x218>
                                                                     (float_t)1));
    }
    else
    {
      PLL3_Clocks->PLL3_P_Frequency = 0U;
 800da52:	687b      	ldr	r3, [r7, #4]
 800da54:	2200      	movs	r2, #0
 800da56:	601a      	str	r2, [r3, #0]
    }

    if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 800da58:	4b28      	ldr	r3, [pc, #160]	; (800dafc <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 800da5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800da5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800da60:	2b00      	cmp	r3, #0
 800da62:	d017      	beq.n	800da94 <HAL_RCCEx_GetPLL3ClockFreq+0x254>
    {
      PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800da64:	4b25      	ldr	r3, [pc, #148]	; (800dafc <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 800da66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800da68:	0c1b      	lsrs	r3, r3, #16
 800da6a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800da6e:	ee07 3a90 	vmov	s15, r3
 800da72:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL3DIVR_PLL3Q) >> RCC_PLL3DIVR_PLL3Q_Pos) + \
 800da76:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800da7a:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800da7e:	edd7 6a07 	vldr	s13, [r7, #28]
 800da82:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800da86:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800da8a:	ee17 2a90 	vmov	r2, s15
 800da8e:	687b      	ldr	r3, [r7, #4]
 800da90:	605a      	str	r2, [r3, #4]
 800da92:	e002      	b.n	800da9a <HAL_RCCEx_GetPLL3ClockFreq+0x25a>
                                                                     (float_t)1));
    }
    else
    {
      PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800da94:	687b      	ldr	r3, [r7, #4]
 800da96:	2200      	movs	r2, #0
 800da98:	605a      	str	r2, [r3, #4]
    }

    if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 800da9a:	4b18      	ldr	r3, [pc, #96]	; (800dafc <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 800da9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800da9e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800daa2:	2b00      	cmp	r3, #0
 800daa4:	d017      	beq.n	800dad6 <HAL_RCCEx_GetPLL3ClockFreq+0x296>
    {
      PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800daa6:	4b15      	ldr	r3, [pc, #84]	; (800dafc <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 800daa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800daaa:	0e1b      	lsrs	r3, r3, #24
 800daac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dab0:	ee07 3a90 	vmov	s15, r3
 800dab4:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL3DIVR_PLL3R) >> RCC_PLL3DIVR_PLL3R_Pos) + \
 800dab8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800dabc:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800dac0:	edd7 6a07 	vldr	s13, [r7, #28]
 800dac4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800dac8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800dacc:	ee17 2a90 	vmov	r2, s15
 800dad0:	687b      	ldr	r3, [r7, #4]
 800dad2:	609a      	str	r2, [r3, #8]
  {
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }
}
 800dad4:	e00c      	b.n	800daf0 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>
      PLL3_Clocks->PLL3_R_Frequency = 0U;
 800dad6:	687b      	ldr	r3, [r7, #4]
 800dad8:	2200      	movs	r2, #0
 800dada:	609a      	str	r2, [r3, #8]
}
 800dadc:	e008      	b.n	800daf0 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800dade:	687b      	ldr	r3, [r7, #4]
 800dae0:	2200      	movs	r2, #0
 800dae2:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800dae4:	687b      	ldr	r3, [r7, #4]
 800dae6:	2200      	movs	r2, #0
 800dae8:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800daea:	687b      	ldr	r3, [r7, #4]
 800daec:	2200      	movs	r2, #0
 800daee:	609a      	str	r2, [r3, #8]
}
 800daf0:	bf00      	nop
 800daf2:	3724      	adds	r7, #36	; 0x24
 800daf4:	46bd      	mov	sp, r7
 800daf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dafa:	4770      	bx	lr
 800dafc:	46020c00 	.word	0x46020c00
 800db00:	4b742400 	.word	0x4b742400
 800db04:	46000000 	.word	0x46000000
 800db08:	0801502c 	.word	0x0801502c

0800db0c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_FDCAN1 FDCAN1 peripheral clock
  *            @arg @ref RCC_PERIPHCLK_DAC1 DAC1 peripheral clock
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800db0c:	b580      	push	{r7, lr}
 800db0e:	b08e      	sub	sp, #56	; 0x38
 800db10:	af00      	add	r7, sp, #0
 800db12:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 800db16:	e9d7 2300 	ldrd	r2, r3, [r7]
 800db1a:	f5a2 2180 	sub.w	r1, r2, #262144	; 0x40000
 800db1e:	430b      	orrs	r3, r1
 800db20:	d145      	bne.n	800dbae <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 800db22:	4ba7      	ldr	r3, [pc, #668]	; (800ddc0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800db24:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800db28:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800db2c:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 800db2e:	4ba4      	ldr	r3, [pc, #656]	; (800ddc0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800db30:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800db34:	f003 0302 	and.w	r3, r3, #2
 800db38:	2b02      	cmp	r3, #2
 800db3a:	d108      	bne.n	800db4e <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 800db3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db3e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800db42:	d104      	bne.n	800db4e <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 800db44:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800db48:	637b      	str	r3, [r7, #52]	; 0x34
 800db4a:	f001 b8fc 	b.w	800ed46 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 800db4e:	4b9c      	ldr	r3, [pc, #624]	; (800ddc0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800db50:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800db54:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800db58:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800db5c:	d114      	bne.n	800db88 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 800db5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db60:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800db64:	d110      	bne.n	800db88 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800db66:	4b96      	ldr	r3, [pc, #600]	; (800ddc0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800db68:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800db6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800db70:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800db74:	d103      	bne.n	800db7e <HAL_RCCEx_GetPeriphCLKFreq+0x72>
      {
        frequency = LSI_VALUE / 128U;
 800db76:	23fa      	movs	r3, #250	; 0xfa
 800db78:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800db7a:	f001 b8e4 	b.w	800ed46 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      else
      {
        frequency = LSI_VALUE;
 800db7e:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800db82:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800db84:	f001 b8df 	b.w	800ed46 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 800db88:	4b8d      	ldr	r3, [pc, #564]	; (800ddc0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800db8a:	681b      	ldr	r3, [r3, #0]
 800db8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800db90:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800db94:	d107      	bne.n	800dba6 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 800db96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db98:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800db9c:	d103      	bne.n	800dba6 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
    {
      frequency = HSE_VALUE / 32U;
 800db9e:	4b89      	ldr	r3, [pc, #548]	; (800ddc4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 800dba0:	637b      	str	r3, [r7, #52]	; 0x34
 800dba2:	f001 b8d0 	b.w	800ed46 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 800dba6:	2300      	movs	r3, #0
 800dba8:	637b      	str	r3, [r7, #52]	; 0x34
 800dbaa:	f001 b8cc 	b.w	800ed46 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800dbae:	e9d7 2300 	ldrd	r2, r3, [r7]
 800dbb2:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 800dbb6:	430b      	orrs	r3, r1
 800dbb8:	d151      	bne.n	800dc5e <HAL_RCCEx_GetPeriphCLKFreq+0x152>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 800dbba:	4b81      	ldr	r3, [pc, #516]	; (800ddc0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800dbbc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800dbc0:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 800dbc4:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 800dbc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbc8:	2b80      	cmp	r3, #128	; 0x80
 800dbca:	d035      	beq.n	800dc38 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
 800dbcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbce:	2b80      	cmp	r3, #128	; 0x80
 800dbd0:	d841      	bhi.n	800dc56 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800dbd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbd4:	2b60      	cmp	r3, #96	; 0x60
 800dbd6:	d02a      	beq.n	800dc2e <HAL_RCCEx_GetPeriphCLKFreq+0x122>
 800dbd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbda:	2b60      	cmp	r3, #96	; 0x60
 800dbdc:	d83b      	bhi.n	800dc56 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800dbde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbe0:	2b40      	cmp	r3, #64	; 0x40
 800dbe2:	d009      	beq.n	800dbf8 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800dbe4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbe6:	2b40      	cmp	r3, #64	; 0x40
 800dbe8:	d835      	bhi.n	800dc56 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800dbea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbec:	2b00      	cmp	r3, #0
 800dbee:	d00c      	beq.n	800dc0a <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
 800dbf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbf2:	2b20      	cmp	r3, #32
 800dbf4:	d012      	beq.n	800dc1c <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 800dbf6:	e02e      	b.n	800dc56 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
    {
      case RCC_SAI1CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800dbf8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800dbfc:	4618      	mov	r0, r3
 800dbfe:	f7ff fb53 	bl	800d2a8 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800dc02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc04:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800dc06:	f001 b89e 	b.w	800ed46 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800dc0a:	f107 0318 	add.w	r3, r7, #24
 800dc0e:	4618      	mov	r0, r3
 800dc10:	f7ff fcb0 	bl	800d574 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 800dc14:	69bb      	ldr	r3, [r7, #24]
 800dc16:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800dc18:	f001 b895 	b.w	800ed46 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI1CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800dc1c:	f107 030c 	add.w	r3, r7, #12
 800dc20:	4618      	mov	r0, r3
 800dc22:	f7ff fe0d 	bl	800d840 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 800dc26:	68fb      	ldr	r3, [r7, #12]
 800dc28:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800dc2a:	f001 b88c 	b.w	800ed46 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800dc2e:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800dc32:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800dc34:	f001 b887 	b.w	800ed46 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI1CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800dc38:	4b61      	ldr	r3, [pc, #388]	; (800ddc0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800dc3a:	681b      	ldr	r3, [r3, #0]
 800dc3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800dc40:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800dc44:	d103      	bne.n	800dc4e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        {
          frequency = HSI_VALUE;
 800dc46:	4b60      	ldr	r3, [pc, #384]	; (800ddc8 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800dc48:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800dc4a:	f001 b87c 	b.w	800ed46 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
          frequency = 0U;
 800dc4e:	2300      	movs	r3, #0
 800dc50:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800dc52:	f001 b878 	b.w	800ed46 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default :
      {
        frequency = 0U;
 800dc56:	2300      	movs	r3, #0
 800dc58:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800dc5a:	f001 b874 	b.w	800ed46 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI2)
 800dc5e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800dc62:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 800dc66:	430b      	orrs	r3, r1
 800dc68:	d158      	bne.n	800dd1c <HAL_RCCEx_GetPeriphCLKFreq+0x210>
  {
    srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 800dc6a:	4b55      	ldr	r3, [pc, #340]	; (800ddc0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800dc6c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800dc70:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800dc74:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 800dc76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc78:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800dc7c:	d03b      	beq.n	800dcf6 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 800dc7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc80:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800dc84:	d846      	bhi.n	800dd14 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 800dc86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc88:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800dc8c:	d02e      	beq.n	800dcec <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
 800dc8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc90:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800dc94:	d83e      	bhi.n	800dd14 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 800dc96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc98:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800dc9c:	d00b      	beq.n	800dcb6 <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 800dc9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dca0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800dca4:	d836      	bhi.n	800dd14 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 800dca6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dca8:	2b00      	cmp	r3, #0
 800dcaa:	d00d      	beq.n	800dcc8 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 800dcac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dcae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800dcb2:	d012      	beq.n	800dcda <HAL_RCCEx_GetPeriphCLKFreq+0x1ce>
 800dcb4:	e02e      	b.n	800dd14 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
    {
      case RCC_SAI2CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800dcb6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800dcba:	4618      	mov	r0, r3
 800dcbc:	f7ff faf4 	bl	800d2a8 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800dcc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dcc2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800dcc4:	f001 b83f 	b.w	800ed46 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800dcc8:	f107 0318 	add.w	r3, r7, #24
 800dccc:	4618      	mov	r0, r3
 800dcce:	f7ff fc51 	bl	800d574 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 800dcd2:	69bb      	ldr	r3, [r7, #24]
 800dcd4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800dcd6:	f001 b836 	b.w	800ed46 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI2CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800dcda:	f107 030c 	add.w	r3, r7, #12
 800dcde:	4618      	mov	r0, r3
 800dce0:	f7ff fdae 	bl	800d840 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 800dce4:	68fb      	ldr	r3, [r7, #12]
 800dce6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800dce8:	f001 b82d 	b.w	800ed46 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI2CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800dcec:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800dcf0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800dcf2:	f001 b828 	b.w	800ed46 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI2CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800dcf6:	4b32      	ldr	r3, [pc, #200]	; (800ddc0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800dcf8:	681b      	ldr	r3, [r3, #0]
 800dcfa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800dcfe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800dd02:	d103      	bne.n	800dd0c <HAL_RCCEx_GetPeriphCLKFreq+0x200>
        {
          frequency = HSI_VALUE;
 800dd04:	4b30      	ldr	r3, [pc, #192]	; (800ddc8 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800dd06:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800dd08:	f001 b81d 	b.w	800ed46 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
          frequency = 0U;
 800dd0c:	2300      	movs	r3, #0
 800dd0e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800dd10:	f001 b819 	b.w	800ed46 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default :

        frequency = 0U;
 800dd14:	2300      	movs	r3, #0
 800dd16:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800dd18:	f001 b815 	b.w	800ed46 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAES)
 800dd1c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800dd20:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 800dd24:	430b      	orrs	r3, r1
 800dd26:	d126      	bne.n	800dd76 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
  {
    /* Get the current SAES source */
    srcclk = __HAL_RCC_GET_SAES_SOURCE();
 800dd28:	4b25      	ldr	r3, [pc, #148]	; (800ddc0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800dd2a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800dd2e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800dd32:	633b      	str	r3, [r7, #48]	; 0x30

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI))
 800dd34:	4b22      	ldr	r3, [pc, #136]	; (800ddc0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800dd36:	681b      	ldr	r3, [r3, #0]
 800dd38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800dd3c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800dd40:	d106      	bne.n	800dd50 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 800dd42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd44:	2b00      	cmp	r3, #0
 800dd46:	d103      	bne.n	800dd50 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
    {
      frequency = HSI_VALUE;
 800dd48:	4b1f      	ldr	r3, [pc, #124]	; (800ddc8 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800dd4a:	637b      	str	r3, [r7, #52]	; 0x34
 800dd4c:	f000 bffb 	b.w	800ed46 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI_DIV2))
 800dd50:	4b1b      	ldr	r3, [pc, #108]	; (800ddc0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800dd52:	681b      	ldr	r3, [r3, #0]
 800dd54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800dd58:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800dd5c:	d107      	bne.n	800dd6e <HAL_RCCEx_GetPeriphCLKFreq+0x262>
 800dd5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd60:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800dd64:	d103      	bne.n	800dd6e <HAL_RCCEx_GetPeriphCLKFreq+0x262>
    {
      frequency = HSI_VALUE >> 1U;
 800dd66:	4b19      	ldr	r3, [pc, #100]	; (800ddcc <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800dd68:	637b      	str	r3, [r7, #52]	; 0x34
 800dd6a:	f000 bfec 	b.w	800ed46 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for SAES */
    else
    {
      frequency = 0U;
 800dd6e:	2300      	movs	r3, #0
 800dd70:	637b      	str	r3, [r7, #52]	; 0x34
 800dd72:	f000 bfe8 	b.w	800ed46 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ICLK)
 800dd76:	e9d7 2300 	ldrd	r2, r3, [r7]
 800dd7a:	f5a2 1180 	sub.w	r1, r2, #1048576	; 0x100000
 800dd7e:	430b      	orrs	r3, r1
 800dd80:	d164      	bne.n	800de4c <HAL_RCCEx_GetPeriphCLKFreq+0x340>
  {
    srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 800dd82:	4b0f      	ldr	r3, [pc, #60]	; (800ddc0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800dd84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800dd88:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 800dd8c:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 800dd8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd90:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800dd94:	d03d      	beq.n	800de12 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 800dd96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd98:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800dd9c:	d852      	bhi.n	800de44 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 800dd9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dda0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800dda4:	d014      	beq.n	800ddd0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
 800dda6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dda8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ddac:	d84a      	bhi.n	800de44 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 800ddae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ddb0:	2b00      	cmp	r3, #0
 800ddb2:	d01f      	beq.n	800ddf4 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>
 800ddb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ddb6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800ddba:	d012      	beq.n	800dde2 <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
 800ddbc:	e042      	b.n	800de44 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 800ddbe:	bf00      	nop
 800ddc0:	46020c00 	.word	0x46020c00
 800ddc4:	0007a120 	.word	0x0007a120
 800ddc8:	00f42400 	.word	0x00f42400
 800ddcc:	007a1200 	.word	0x007a1200
    {
      case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ddd0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ddd4:	4618      	mov	r0, r3
 800ddd6:	f7ff fa67 	bl	800d2a8 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 800ddda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dddc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800ddde:	f000 bfb2 	b.w	800ed46 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800dde2:	f107 0318 	add.w	r3, r7, #24
 800dde6:	4618      	mov	r0, r3
 800dde8:	f7ff fbc4 	bl	800d574 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 800ddec:	69fb      	ldr	r3, [r7, #28]
 800ddee:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800ddf0:	f000 bfa9 	b.w	800ed46 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 800ddf4:	4bab      	ldr	r3, [pc, #684]	; (800e0a4 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800ddf6:	681b      	ldr	r3, [r3, #0]
 800ddf8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800ddfc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800de00:	d103      	bne.n	800de0a <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
        {
          frequency = HSI48_VALUE;
 800de02:	4ba9      	ldr	r3, [pc, #676]	; (800e0a8 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800de04:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800de06:	f000 bf9e 	b.w	800ed46 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
          frequency = 0U;
 800de0a:	2300      	movs	r3, #0
 800de0c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800de0e:	f000 bf9a 	b.w	800ed46 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800de12:	4ba4      	ldr	r3, [pc, #656]	; (800e0a4 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800de14:	689b      	ldr	r3, [r3, #8]
 800de16:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800de1a:	2b00      	cmp	r3, #0
 800de1c:	d005      	beq.n	800de2a <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 800de1e:	4ba1      	ldr	r3, [pc, #644]	; (800e0a4 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800de20:	689b      	ldr	r3, [r3, #8]
 800de22:	0e1b      	lsrs	r3, r3, #24
 800de24:	f003 030f 	and.w	r3, r3, #15
 800de28:	e006      	b.n	800de38 <HAL_RCCEx_GetPeriphCLKFreq+0x32c>
 800de2a:	4b9e      	ldr	r3, [pc, #632]	; (800e0a4 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800de2c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800de30:	041b      	lsls	r3, r3, #16
 800de32:	0e1b      	lsrs	r3, r3, #24
 800de34:	f003 030f 	and.w	r3, r3, #15
 800de38:	4a9c      	ldr	r2, [pc, #624]	; (800e0ac <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>)
 800de3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800de3e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800de40:	f000 bf81 	b.w	800ed46 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default :

        frequency = 0U;
 800de44:	2300      	movs	r3, #0
 800de46:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800de48:	f000 bf7d 	b.w	800ed46 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800de4c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800de50:	f5a2 1100 	sub.w	r1, r2, #2097152	; 0x200000
 800de54:	430b      	orrs	r3, r1
 800de56:	d175      	bne.n	800df44 <HAL_RCCEx_GetPeriphCLKFreq+0x438>
  {
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800de58:	4b92      	ldr	r3, [pc, #584]	; (800e0a4 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800de5a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800de5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800de62:	633b      	str	r3, [r7, #48]	; 0x30
    if (srcclk == RCC_SDMMCCLKSOURCE_CLK48)
 800de64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de66:	2b00      	cmp	r3, #0
 800de68:	d15b      	bne.n	800df22 <HAL_RCCEx_GetPeriphCLKFreq+0x416>
    {
      srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 800de6a:	4b8e      	ldr	r3, [pc, #568]	; (800e0a4 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800de6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800de70:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 800de74:	633b      	str	r3, [r7, #48]	; 0x30

      switch (srcclk)
 800de76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de78:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800de7c:	d034      	beq.n	800dee8 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800de7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de80:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800de84:	d849      	bhi.n	800df1a <HAL_RCCEx_GetPeriphCLKFreq+0x40e>
 800de86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de88:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800de8c:	d00b      	beq.n	800dea6 <HAL_RCCEx_GetPeriphCLKFreq+0x39a>
 800de8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de90:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800de94:	d841      	bhi.n	800df1a <HAL_RCCEx_GetPeriphCLKFreq+0x40e>
 800de96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de98:	2b00      	cmp	r3, #0
 800de9a:	d016      	beq.n	800deca <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 800de9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de9e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800dea2:	d009      	beq.n	800deb8 <HAL_RCCEx_GetPeriphCLKFreq+0x3ac>
 800dea4:	e039      	b.n	800df1a <HAL_RCCEx_GetPeriphCLKFreq+0x40e>
      {
        case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800dea6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800deaa:	4618      	mov	r0, r3
 800deac:	f7ff f9fc 	bl	800d2a8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800deb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800deb2:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 800deb4:	f000 bf47 	b.w	800ed46 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
        }
        case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800deb8:	f107 0318 	add.w	r3, r7, #24
 800debc:	4618      	mov	r0, r3
 800debe:	f7ff fb59 	bl	800d574 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800dec2:	69fb      	ldr	r3, [r7, #28]
 800dec4:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 800dec6:	f000 bf3e 	b.w	800ed46 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
        }
        case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 800deca:	4b76      	ldr	r3, [pc, #472]	; (800e0a4 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800decc:	681b      	ldr	r3, [r3, #0]
 800dece:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800ded2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ded6:	d103      	bne.n	800dee0 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
          {
            frequency = HSI48_VALUE;
 800ded8:	4b73      	ldr	r3, [pc, #460]	; (800e0a8 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800deda:	637b      	str	r3, [r7, #52]	; 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 800dedc:	f000 bf33 	b.w	800ed46 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
            frequency = 0U;
 800dee0:	2300      	movs	r3, #0
 800dee2:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 800dee4:	f000 bf2f 	b.w	800ed46 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
        }
        case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800dee8:	4b6e      	ldr	r3, [pc, #440]	; (800e0a4 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800deea:	689b      	ldr	r3, [r3, #8]
 800deec:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800def0:	2b00      	cmp	r3, #0
 800def2:	d005      	beq.n	800df00 <HAL_RCCEx_GetPeriphCLKFreq+0x3f4>
 800def4:	4b6b      	ldr	r3, [pc, #428]	; (800e0a4 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800def6:	689b      	ldr	r3, [r3, #8]
 800def8:	0e1b      	lsrs	r3, r3, #24
 800defa:	f003 030f 	and.w	r3, r3, #15
 800defe:	e006      	b.n	800df0e <HAL_RCCEx_GetPeriphCLKFreq+0x402>
 800df00:	4b68      	ldr	r3, [pc, #416]	; (800e0a4 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800df02:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800df06:	041b      	lsls	r3, r3, #16
 800df08:	0e1b      	lsrs	r3, r3, #24
 800df0a:	f003 030f 	and.w	r3, r3, #15
 800df0e:	4a67      	ldr	r2, [pc, #412]	; (800e0ac <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>)
 800df10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800df14:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 800df16:	f000 bf16 	b.w	800ed46 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
        }
        default :
        {
          frequency = 0U;
 800df1a:	2300      	movs	r3, #0
 800df1c:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 800df1e:	f000 bf12 	b.w	800ed46 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
        }
      }
    }
    else if (srcclk == RCC_SDMMCCLKSOURCE_PLL1)
 800df22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df24:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800df28:	d108      	bne.n	800df3c <HAL_RCCEx_GetPeriphCLKFreq+0x430>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800df2a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800df2e:	4618      	mov	r0, r3
 800df30:	f7ff f9ba 	bl	800d2a8 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 800df34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df36:	637b      	str	r3, [r7, #52]	; 0x34
 800df38:	f000 bf05 	b.w	800ed46 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else
    {
      frequency = 0U;
 800df3c:	2300      	movs	r3, #0
 800df3e:	637b      	str	r3, [r7, #52]	; 0x34
 800df40:	f000 bf01 	b.w	800ed46 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART1)
 800df44:	e9d7 2300 	ldrd	r2, r3, [r7]
 800df48:	1e51      	subs	r1, r2, #1
 800df4a:	430b      	orrs	r3, r1
 800df4c:	d136      	bne.n	800dfbc <HAL_RCCEx_GetPeriphCLKFreq+0x4b0>
  {
    /* Get the current USART1 source */
    srcclk = __HAL_RCC_GET_USART1_SOURCE();
 800df4e:	4b55      	ldr	r3, [pc, #340]	; (800e0a4 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800df50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800df54:	f003 0303 	and.w	r3, r3, #3
 800df58:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 800df5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df5c:	2b00      	cmp	r3, #0
 800df5e:	d104      	bne.n	800df6a <HAL_RCCEx_GetPeriphCLKFreq+0x45e>
    {
      frequency = HAL_RCC_GetPCLK2Freq();
 800df60:	f7fe fafc 	bl	800c55c <HAL_RCC_GetPCLK2Freq>
 800df64:	6378      	str	r0, [r7, #52]	; 0x34
 800df66:	f000 beee 	b.w	800ed46 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 800df6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df6c:	2b01      	cmp	r3, #1
 800df6e:	d104      	bne.n	800df7a <HAL_RCCEx_GetPeriphCLKFreq+0x46e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800df70:	f7fe f9be 	bl	800c2f0 <HAL_RCC_GetSysClockFreq>
 800df74:	6378      	str	r0, [r7, #52]	; 0x34
 800df76:	f000 bee6 	b.w	800ed46 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 800df7a:	4b4a      	ldr	r3, [pc, #296]	; (800e0a4 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800df7c:	681b      	ldr	r3, [r3, #0]
 800df7e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800df82:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800df86:	d106      	bne.n	800df96 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 800df88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df8a:	2b02      	cmp	r3, #2
 800df8c:	d103      	bne.n	800df96 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
    {
      frequency = HSI_VALUE;
 800df8e:	4b48      	ldr	r3, [pc, #288]	; (800e0b0 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 800df90:	637b      	str	r3, [r7, #52]	; 0x34
 800df92:	f000 bed8 	b.w	800ed46 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 800df96:	4b43      	ldr	r3, [pc, #268]	; (800e0a4 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800df98:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800df9c:	f003 0302 	and.w	r3, r3, #2
 800dfa0:	2b02      	cmp	r3, #2
 800dfa2:	d107      	bne.n	800dfb4 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
 800dfa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dfa6:	2b03      	cmp	r3, #3
 800dfa8:	d104      	bne.n	800dfb4 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
    {
      frequency = LSE_VALUE;
 800dfaa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800dfae:	637b      	str	r3, [r7, #52]	; 0x34
 800dfb0:	f000 bec9 	b.w	800ed46 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for USART1 */
    else
    {
      frequency = 0U;
 800dfb4:	2300      	movs	r3, #0
 800dfb6:	637b      	str	r3, [r7, #52]	; 0x34
 800dfb8:	f000 bec5 	b.w	800ed46 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART2)
 800dfbc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800dfc0:	1e91      	subs	r1, r2, #2
 800dfc2:	430b      	orrs	r3, r1
 800dfc4:	d136      	bne.n	800e034 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
  {
    /* Get the current USART2 source */
    srcclk = __HAL_RCC_GET_USART2_SOURCE();
 800dfc6:	4b37      	ldr	r3, [pc, #220]	; (800e0a4 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800dfc8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800dfcc:	f003 030c 	and.w	r3, r3, #12
 800dfd0:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 800dfd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dfd4:	2b00      	cmp	r3, #0
 800dfd6:	d104      	bne.n	800dfe2 <HAL_RCCEx_GetPeriphCLKFreq+0x4d6>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800dfd8:	f7fe faac 	bl	800c534 <HAL_RCC_GetPCLK1Freq>
 800dfdc:	6378      	str	r0, [r7, #52]	; 0x34
 800dfde:	f000 beb2 	b.w	800ed46 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 800dfe2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dfe4:	2b04      	cmp	r3, #4
 800dfe6:	d104      	bne.n	800dff2 <HAL_RCCEx_GetPeriphCLKFreq+0x4e6>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800dfe8:	f7fe f982 	bl	800c2f0 <HAL_RCC_GetSysClockFreq>
 800dfec:	6378      	str	r0, [r7, #52]	; 0x34
 800dfee:	f000 beaa 	b.w	800ed46 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 800dff2:	4b2c      	ldr	r3, [pc, #176]	; (800e0a4 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800dff4:	681b      	ldr	r3, [r3, #0]
 800dff6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800dffa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800dffe:	d106      	bne.n	800e00e <HAL_RCCEx_GetPeriphCLKFreq+0x502>
 800e000:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e002:	2b08      	cmp	r3, #8
 800e004:	d103      	bne.n	800e00e <HAL_RCCEx_GetPeriphCLKFreq+0x502>
    {
      frequency = HSI_VALUE;
 800e006:	4b2a      	ldr	r3, [pc, #168]	; (800e0b0 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 800e008:	637b      	str	r3, [r7, #52]	; 0x34
 800e00a:	f000 be9c 	b.w	800ed46 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 800e00e:	4b25      	ldr	r3, [pc, #148]	; (800e0a4 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800e010:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800e014:	f003 0302 	and.w	r3, r3, #2
 800e018:	2b02      	cmp	r3, #2
 800e01a:	d107      	bne.n	800e02c <HAL_RCCEx_GetPeriphCLKFreq+0x520>
 800e01c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e01e:	2b0c      	cmp	r3, #12
 800e020:	d104      	bne.n	800e02c <HAL_RCCEx_GetPeriphCLKFreq+0x520>
    {
      frequency = LSE_VALUE;
 800e022:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e026:	637b      	str	r3, [r7, #52]	; 0x34
 800e028:	f000 be8d 	b.w	800ed46 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for USART2 */
    else
    {
      frequency = 0U;
 800e02c:	2300      	movs	r3, #0
 800e02e:	637b      	str	r3, [r7, #52]	; 0x34
 800e030:	f000 be89 	b.w	800ed46 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART3)
 800e034:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e038:	1f11      	subs	r1, r2, #4
 800e03a:	430b      	orrs	r3, r1
 800e03c:	d13e      	bne.n	800e0bc <HAL_RCCEx_GetPeriphCLKFreq+0x5b0>
  {
    /* Get the current USART3 source */
    srcclk = __HAL_RCC_GET_USART3_SOURCE();
 800e03e:	4b19      	ldr	r3, [pc, #100]	; (800e0a4 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800e040:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800e044:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800e048:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 800e04a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e04c:	2b00      	cmp	r3, #0
 800e04e:	d104      	bne.n	800e05a <HAL_RCCEx_GetPeriphCLKFreq+0x54e>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800e050:	f7fe fa70 	bl	800c534 <HAL_RCC_GetPCLK1Freq>
 800e054:	6378      	str	r0, [r7, #52]	; 0x34
 800e056:	f000 be76 	b.w	800ed46 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 800e05a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e05c:	2b10      	cmp	r3, #16
 800e05e:	d104      	bne.n	800e06a <HAL_RCCEx_GetPeriphCLKFreq+0x55e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800e060:	f7fe f946 	bl	800c2f0 <HAL_RCC_GetSysClockFreq>
 800e064:	6378      	str	r0, [r7, #52]	; 0x34
 800e066:	f000 be6e 	b.w	800ed46 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 800e06a:	4b0e      	ldr	r3, [pc, #56]	; (800e0a4 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800e06c:	681b      	ldr	r3, [r3, #0]
 800e06e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800e072:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e076:	d106      	bne.n	800e086 <HAL_RCCEx_GetPeriphCLKFreq+0x57a>
 800e078:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e07a:	2b20      	cmp	r3, #32
 800e07c:	d103      	bne.n	800e086 <HAL_RCCEx_GetPeriphCLKFreq+0x57a>
    {
      frequency = HSI_VALUE;
 800e07e:	4b0c      	ldr	r3, [pc, #48]	; (800e0b0 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 800e080:	637b      	str	r3, [r7, #52]	; 0x34
 800e082:	f000 be60 	b.w	800ed46 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 800e086:	4b07      	ldr	r3, [pc, #28]	; (800e0a4 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800e088:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800e08c:	f003 0302 	and.w	r3, r3, #2
 800e090:	2b02      	cmp	r3, #2
 800e092:	d10f      	bne.n	800e0b4 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 800e094:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e096:	2b30      	cmp	r3, #48	; 0x30
 800e098:	d10c      	bne.n	800e0b4 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
    {
      frequency = LSE_VALUE;
 800e09a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e09e:	637b      	str	r3, [r7, #52]	; 0x34
 800e0a0:	f000 be51 	b.w	800ed46 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
 800e0a4:	46020c00 	.word	0x46020c00
 800e0a8:	02dc6c00 	.word	0x02dc6c00
 800e0ac:	0801502c 	.word	0x0801502c
 800e0b0:	00f42400 	.word	0x00f42400
    }
    /* Clock not enabled for USART3 */
    else
    {
      frequency = 0U;
 800e0b4:	2300      	movs	r3, #0
 800e0b6:	637b      	str	r3, [r7, #52]	; 0x34
 800e0b8:	f000 be45 	b.w	800ed46 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART4)
 800e0bc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e0c0:	f1a2 0108 	sub.w	r1, r2, #8
 800e0c4:	430b      	orrs	r3, r1
 800e0c6:	d136      	bne.n	800e136 <HAL_RCCEx_GetPeriphCLKFreq+0x62a>
  {
    /* Get the current UART4 source */
    srcclk = __HAL_RCC_GET_UART4_SOURCE();
 800e0c8:	4b9f      	ldr	r3, [pc, #636]	; (800e348 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800e0ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800e0ce:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800e0d2:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 800e0d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e0d6:	2b00      	cmp	r3, #0
 800e0d8:	d104      	bne.n	800e0e4 <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800e0da:	f7fe fa2b 	bl	800c534 <HAL_RCC_GetPCLK1Freq>
 800e0de:	6378      	str	r0, [r7, #52]	; 0x34
 800e0e0:	f000 be31 	b.w	800ed46 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 800e0e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e0e6:	2b40      	cmp	r3, #64	; 0x40
 800e0e8:	d104      	bne.n	800e0f4 <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800e0ea:	f7fe f901 	bl	800c2f0 <HAL_RCC_GetSysClockFreq>
 800e0ee:	6378      	str	r0, [r7, #52]	; 0x34
 800e0f0:	f000 be29 	b.w	800ed46 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 800e0f4:	4b94      	ldr	r3, [pc, #592]	; (800e348 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800e0f6:	681b      	ldr	r3, [r3, #0]
 800e0f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800e0fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e100:	d106      	bne.n	800e110 <HAL_RCCEx_GetPeriphCLKFreq+0x604>
 800e102:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e104:	2b80      	cmp	r3, #128	; 0x80
 800e106:	d103      	bne.n	800e110 <HAL_RCCEx_GetPeriphCLKFreq+0x604>
    {
      frequency = HSI_VALUE;
 800e108:	4b90      	ldr	r3, [pc, #576]	; (800e34c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800e10a:	637b      	str	r3, [r7, #52]	; 0x34
 800e10c:	f000 be1b 	b.w	800ed46 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 800e110:	4b8d      	ldr	r3, [pc, #564]	; (800e348 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800e112:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800e116:	f003 0302 	and.w	r3, r3, #2
 800e11a:	2b02      	cmp	r3, #2
 800e11c:	d107      	bne.n	800e12e <HAL_RCCEx_GetPeriphCLKFreq+0x622>
 800e11e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e120:	2bc0      	cmp	r3, #192	; 0xc0
 800e122:	d104      	bne.n	800e12e <HAL_RCCEx_GetPeriphCLKFreq+0x622>
    {
      frequency = LSE_VALUE;
 800e124:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e128:	637b      	str	r3, [r7, #52]	; 0x34
 800e12a:	f000 be0c 	b.w	800ed46 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for UART4 */
    else
    {
      frequency = 0U;
 800e12e:	2300      	movs	r3, #0
 800e130:	637b      	str	r3, [r7, #52]	; 0x34
 800e132:	f000 be08 	b.w	800ed46 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART5)
 800e136:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e13a:	f1a2 0110 	sub.w	r1, r2, #16
 800e13e:	430b      	orrs	r3, r1
 800e140:	d139      	bne.n	800e1b6 <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
  {
    /* Get the current UART5 source */
    srcclk = __HAL_RCC_GET_UART5_SOURCE();
 800e142:	4b81      	ldr	r3, [pc, #516]	; (800e348 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800e144:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800e148:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e14c:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 800e14e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e150:	2b00      	cmp	r3, #0
 800e152:	d104      	bne.n	800e15e <HAL_RCCEx_GetPeriphCLKFreq+0x652>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800e154:	f7fe f9ee 	bl	800c534 <HAL_RCC_GetPCLK1Freq>
 800e158:	6378      	str	r0, [r7, #52]	; 0x34
 800e15a:	f000 bdf4 	b.w	800ed46 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_UART5CLKSOURCE_SYSCLK)
 800e15e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e160:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e164:	d104      	bne.n	800e170 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800e166:	f7fe f8c3 	bl	800c2f0 <HAL_RCC_GetSysClockFreq>
 800e16a:	6378      	str	r0, [r7, #52]	; 0x34
 800e16c:	f000 bdeb 	b.w	800ed46 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 800e170:	4b75      	ldr	r3, [pc, #468]	; (800e348 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800e172:	681b      	ldr	r3, [r3, #0]
 800e174:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800e178:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e17c:	d107      	bne.n	800e18e <HAL_RCCEx_GetPeriphCLKFreq+0x682>
 800e17e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e180:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e184:	d103      	bne.n	800e18e <HAL_RCCEx_GetPeriphCLKFreq+0x682>
    {
      frequency = HSI_VALUE;
 800e186:	4b71      	ldr	r3, [pc, #452]	; (800e34c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800e188:	637b      	str	r3, [r7, #52]	; 0x34
 800e18a:	f000 bddc 	b.w	800ed46 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 800e18e:	4b6e      	ldr	r3, [pc, #440]	; (800e348 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800e190:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800e194:	f003 0302 	and.w	r3, r3, #2
 800e198:	2b02      	cmp	r3, #2
 800e19a:	d108      	bne.n	800e1ae <HAL_RCCEx_GetPeriphCLKFreq+0x6a2>
 800e19c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e19e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800e1a2:	d104      	bne.n	800e1ae <HAL_RCCEx_GetPeriphCLKFreq+0x6a2>
    {
      frequency = LSE_VALUE;
 800e1a4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e1a8:	637b      	str	r3, [r7, #52]	; 0x34
 800e1aa:	f000 bdcc 	b.w	800ed46 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 800e1ae:	2300      	movs	r3, #0
 800e1b0:	637b      	str	r3, [r7, #52]	; 0x34
 800e1b2:	f000 bdc8 	b.w	800ed46 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    {
      frequency = 0U;
    }
  }
#endif /* USART6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPUART1)
 800e1b6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e1ba:	f1a2 0120 	sub.w	r1, r2, #32
 800e1be:	430b      	orrs	r3, r1
 800e1c0:	d158      	bne.n	800e274 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
  {
    /* Get the current LPUART1 source */
    srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 800e1c2:	4b61      	ldr	r3, [pc, #388]	; (800e348 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800e1c4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800e1c8:	f003 0307 	and.w	r3, r3, #7
 800e1cc:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 800e1ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e1d0:	2b00      	cmp	r3, #0
 800e1d2:	d104      	bne.n	800e1de <HAL_RCCEx_GetPeriphCLKFreq+0x6d2>
    {
      frequency = HAL_RCC_GetPCLK3Freq();
 800e1d4:	f7fe f9d6 	bl	800c584 <HAL_RCC_GetPCLK3Freq>
 800e1d8:	6378      	str	r0, [r7, #52]	; 0x34
 800e1da:	f000 bdb4 	b.w	800ed46 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 800e1de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e1e0:	2b01      	cmp	r3, #1
 800e1e2:	d104      	bne.n	800e1ee <HAL_RCCEx_GetPeriphCLKFreq+0x6e2>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800e1e4:	f7fe f884 	bl	800c2f0 <HAL_RCC_GetSysClockFreq>
 800e1e8:	6378      	str	r0, [r7, #52]	; 0x34
 800e1ea:	f000 bdac 	b.w	800ed46 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 800e1ee:	4b56      	ldr	r3, [pc, #344]	; (800e348 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800e1f0:	681b      	ldr	r3, [r3, #0]
 800e1f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800e1f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e1fa:	d106      	bne.n	800e20a <HAL_RCCEx_GetPeriphCLKFreq+0x6fe>
 800e1fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e1fe:	2b02      	cmp	r3, #2
 800e200:	d103      	bne.n	800e20a <HAL_RCCEx_GetPeriphCLKFreq+0x6fe>
    {
      frequency = HSI_VALUE;
 800e202:	4b52      	ldr	r3, [pc, #328]	; (800e34c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800e204:	637b      	str	r3, [r7, #52]	; 0x34
 800e206:	f000 bd9e 	b.w	800ed46 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 800e20a:	4b4f      	ldr	r3, [pc, #316]	; (800e348 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800e20c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800e210:	f003 0302 	and.w	r3, r3, #2
 800e214:	2b02      	cmp	r3, #2
 800e216:	d107      	bne.n	800e228 <HAL_RCCEx_GetPeriphCLKFreq+0x71c>
 800e218:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e21a:	2b03      	cmp	r3, #3
 800e21c:	d104      	bne.n	800e228 <HAL_RCCEx_GetPeriphCLKFreq+0x71c>
    {
      frequency = LSE_VALUE;
 800e21e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e222:	637b      	str	r3, [r7, #52]	; 0x34
 800e224:	f000 bd8f 	b.w	800ed46 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_MSIK))
 800e228:	4b47      	ldr	r3, [pc, #284]	; (800e348 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800e22a:	681b      	ldr	r3, [r3, #0]
 800e22c:	f003 0320 	and.w	r3, r3, #32
 800e230:	2b20      	cmp	r3, #32
 800e232:	d11b      	bne.n	800e26c <HAL_RCCEx_GetPeriphCLKFreq+0x760>
 800e234:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e236:	2b04      	cmp	r3, #4
 800e238:	d118      	bne.n	800e26c <HAL_RCCEx_GetPeriphCLKFreq+0x760>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800e23a:	4b43      	ldr	r3, [pc, #268]	; (800e348 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800e23c:	689b      	ldr	r3, [r3, #8]
 800e23e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e242:	2b00      	cmp	r3, #0
 800e244:	d005      	beq.n	800e252 <HAL_RCCEx_GetPeriphCLKFreq+0x746>
 800e246:	4b40      	ldr	r3, [pc, #256]	; (800e348 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800e248:	689b      	ldr	r3, [r3, #8]
 800e24a:	0e1b      	lsrs	r3, r3, #24
 800e24c:	f003 030f 	and.w	r3, r3, #15
 800e250:	e006      	b.n	800e260 <HAL_RCCEx_GetPeriphCLKFreq+0x754>
 800e252:	4b3d      	ldr	r3, [pc, #244]	; (800e348 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800e254:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800e258:	041b      	lsls	r3, r3, #16
 800e25a:	0e1b      	lsrs	r3, r3, #24
 800e25c:	f003 030f 	and.w	r3, r3, #15
 800e260:	4a3b      	ldr	r2, [pc, #236]	; (800e350 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 800e262:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e266:	637b      	str	r3, [r7, #52]	; 0x34
 800e268:	f000 bd6d 	b.w	800ed46 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for LPUART1 */
    else
    {
      frequency = 0U;
 800e26c:	2300      	movs	r3, #0
 800e26e:	637b      	str	r3, [r7, #52]	; 0x34
 800e270:	f000 bd69 	b.w	800ed46 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADCDAC)
 800e274:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e278:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 800e27c:	430b      	orrs	r3, r1
 800e27e:	d169      	bne.n	800e354 <HAL_RCCEx_GetPeriphCLKFreq+0x848>
  {
    srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 800e280:	4b31      	ldr	r3, [pc, #196]	; (800e348 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800e282:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800e286:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800e28a:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 800e28c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e28e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e292:	d104      	bne.n	800e29e <HAL_RCCEx_GetPeriphCLKFreq+0x792>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800e294:	f7fe f82c 	bl	800c2f0 <HAL_RCC_GetSysClockFreq>
 800e298:	6378      	str	r0, [r7, #52]	; 0x34
 800e29a:	f000 bd54 	b.w	800ed46 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2)
 800e29e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e2a0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e2a4:	d108      	bne.n	800e2b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e2a6:	f107 0318 	add.w	r3, r7, #24
 800e2aa:	4618      	mov	r0, r3
 800e2ac:	f7ff f962 	bl	800d574 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_R_Frequency;
 800e2b0:	6a3b      	ldr	r3, [r7, #32]
 800e2b2:	637b      	str	r3, [r7, #52]	; 0x34
 800e2b4:	f000 bd47 	b.w	800ed46 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 800e2b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e2ba:	2b00      	cmp	r3, #0
 800e2bc:	d104      	bne.n	800e2c8 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
    {
      frequency = HAL_RCC_GetHCLKFreq();
 800e2be:	f7fe f91f 	bl	800c500 <HAL_RCC_GetHCLKFreq>
 800e2c2:	6378      	str	r0, [r7, #52]	; 0x34
 800e2c4:	f000 bd3f 	b.w	800ed46 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_MSIK)
 800e2c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e2ca:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800e2ce:	d118      	bne.n	800e302 <HAL_RCCEx_GetPeriphCLKFreq+0x7f6>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)];
 800e2d0:	4b1d      	ldr	r3, [pc, #116]	; (800e348 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800e2d2:	689b      	ldr	r3, [r3, #8]
 800e2d4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e2d8:	2b00      	cmp	r3, #0
 800e2da:	d005      	beq.n	800e2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
 800e2dc:	4b1a      	ldr	r3, [pc, #104]	; (800e348 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800e2de:	689b      	ldr	r3, [r3, #8]
 800e2e0:	0f1b      	lsrs	r3, r3, #28
 800e2e2:	f003 030f 	and.w	r3, r3, #15
 800e2e6:	e006      	b.n	800e2f6 <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
 800e2e8:	4b17      	ldr	r3, [pc, #92]	; (800e348 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800e2ea:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800e2ee:	041b      	lsls	r3, r3, #16
 800e2f0:	0f1b      	lsrs	r3, r3, #28
 800e2f2:	f003 030f 	and.w	r3, r3, #15
 800e2f6:	4a16      	ldr	r2, [pc, #88]	; (800e350 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 800e2f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e2fc:	637b      	str	r3, [r7, #52]	; 0x34
 800e2fe:	f000 bd22 	b.w	800ed46 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 800e302:	4b11      	ldr	r3, [pc, #68]	; (800e348 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800e304:	681b      	ldr	r3, [r3, #0]
 800e306:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e30a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800e30e:	d107      	bne.n	800e320 <HAL_RCCEx_GetPeriphCLKFreq+0x814>
 800e310:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e312:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800e316:	d103      	bne.n	800e320 <HAL_RCCEx_GetPeriphCLKFreq+0x814>
    {
      frequency = HSE_VALUE;
 800e318:	4b0c      	ldr	r3, [pc, #48]	; (800e34c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800e31a:	637b      	str	r3, [r7, #52]	; 0x34
 800e31c:	f000 bd13 	b.w	800ed46 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 800e320:	4b09      	ldr	r3, [pc, #36]	; (800e348 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800e322:	681b      	ldr	r3, [r3, #0]
 800e324:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800e328:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e32c:	d107      	bne.n	800e33e <HAL_RCCEx_GetPeriphCLKFreq+0x832>
 800e32e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e330:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800e334:	d103      	bne.n	800e33e <HAL_RCCEx_GetPeriphCLKFreq+0x832>
    {
      frequency = HSI_VALUE;
 800e336:	4b05      	ldr	r3, [pc, #20]	; (800e34c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800e338:	637b      	str	r3, [r7, #52]	; 0x34
 800e33a:	f000 bd04 	b.w	800ed46 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for ADC */
    else
    {
      frequency = 0U;
 800e33e:	2300      	movs	r3, #0
 800e340:	637b      	str	r3, [r7, #52]	; 0x34
 800e342:	f000 bd00 	b.w	800ed46 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
 800e346:	bf00      	nop
 800e348:	46020c00 	.word	0x46020c00
 800e34c:	00f42400 	.word	0x00f42400
 800e350:	0801502c 	.word	0x0801502c
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_MDF1)
 800e354:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e358:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 800e35c:	430b      	orrs	r3, r1
 800e35e:	d14e      	bne.n	800e3fe <HAL_RCCEx_GetPeriphCLKFreq+0x8f2>
  {
    /* Get the current MDF1 source */
    srcclk = __HAL_RCC_GET_MDF1_SOURCE();
 800e360:	4ba8      	ldr	r3, [pc, #672]	; (800e604 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800e362:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800e366:	f003 0307 	and.w	r3, r3, #7
 800e36a:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 800e36c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e36e:	2b04      	cmp	r3, #4
 800e370:	d841      	bhi.n	800e3f6 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 800e372:	a201      	add	r2, pc, #4	; (adr r2, 800e378 <HAL_RCCEx_GetPeriphCLKFreq+0x86c>)
 800e374:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e378:	0800e3b1 	.word	0x0800e3b1
 800e37c:	0800e38d 	.word	0x0800e38d
 800e380:	0800e39f 	.word	0x0800e39f
 800e384:	0800e3bb 	.word	0x0800e3bb
 800e388:	0800e3c5 	.word	0x0800e3c5
    {
      case RCC_MDF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800e38c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e390:	4618      	mov	r0, r3
 800e392:	f7fe ff89 	bl	800d2a8 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800e396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e398:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800e39a:	f000 bcd4 	b.w	800ed46 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_MDF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e39e:	f107 030c 	add.w	r3, r7, #12
 800e3a2:	4618      	mov	r0, r3
 800e3a4:	f7ff fa4c 	bl	800d840 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 800e3a8:	693b      	ldr	r3, [r7, #16]
 800e3aa:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800e3ac:	f000 bccb 	b.w	800ed46 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_MDF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 800e3b0:	f7fe f8a6 	bl	800c500 <HAL_RCC_GetHCLKFreq>
 800e3b4:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800e3b6:	f000 bcc6 	b.w	800ed46 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_MDF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800e3ba:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800e3be:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800e3c0:	f000 bcc1 	b.w	800ed46 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_MDF1CLKSOURCE_MSIK:

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800e3c4:	4b8f      	ldr	r3, [pc, #572]	; (800e604 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800e3c6:	689b      	ldr	r3, [r3, #8]
 800e3c8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e3cc:	2b00      	cmp	r3, #0
 800e3ce:	d005      	beq.n	800e3dc <HAL_RCCEx_GetPeriphCLKFreq+0x8d0>
 800e3d0:	4b8c      	ldr	r3, [pc, #560]	; (800e604 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800e3d2:	689b      	ldr	r3, [r3, #8]
 800e3d4:	0e1b      	lsrs	r3, r3, #24
 800e3d6:	f003 030f 	and.w	r3, r3, #15
 800e3da:	e006      	b.n	800e3ea <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 800e3dc:	4b89      	ldr	r3, [pc, #548]	; (800e604 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800e3de:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800e3e2:	041b      	lsls	r3, r3, #16
 800e3e4:	0e1b      	lsrs	r3, r3, #24
 800e3e6:	f003 030f 	and.w	r3, r3, #15
 800e3ea:	4a87      	ldr	r2, [pc, #540]	; (800e608 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800e3ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e3f0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800e3f2:	f000 bca8 	b.w	800ed46 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default:

        frequency = 0U;
 800e3f6:	2300      	movs	r3, #0
 800e3f8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800e3fa:	f000 bca4 	b.w	800ed46 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADF1)
 800e3fe:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e402:	f5a2 3100 	sub.w	r1, r2, #131072	; 0x20000
 800e406:	430b      	orrs	r3, r1
 800e408:	d15d      	bne.n	800e4c6 <HAL_RCCEx_GetPeriphCLKFreq+0x9ba>
  {
    /* Get the current ADF1 source */
    srcclk = __HAL_RCC_GET_ADF1_SOURCE();
 800e40a:	4b7e      	ldr	r3, [pc, #504]	; (800e604 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800e40c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800e410:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800e414:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 800e416:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e418:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800e41c:	d036      	beq.n	800e48c <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 800e41e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e420:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800e424:	d84b      	bhi.n	800e4be <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
 800e426:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e428:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800e42c:	d029      	beq.n	800e482 <HAL_RCCEx_GetPeriphCLKFreq+0x976>
 800e42e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e430:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800e434:	d843      	bhi.n	800e4be <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
 800e436:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e438:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800e43c:	d013      	beq.n	800e466 <HAL_RCCEx_GetPeriphCLKFreq+0x95a>
 800e43e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e440:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800e444:	d83b      	bhi.n	800e4be <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
 800e446:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e448:	2b00      	cmp	r3, #0
 800e44a:	d015      	beq.n	800e478 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>
 800e44c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e44e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e452:	d134      	bne.n	800e4be <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
    {
      case RCC_ADF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800e454:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e458:	4618      	mov	r0, r3
 800e45a:	f7fe ff25 	bl	800d2a8 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800e45e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e460:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800e462:	f000 bc70 	b.w	800ed46 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ADF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e466:	f107 030c 	add.w	r3, r7, #12
 800e46a:	4618      	mov	r0, r3
 800e46c:	f7ff f9e8 	bl	800d840 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 800e470:	693b      	ldr	r3, [r7, #16]
 800e472:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800e474:	f000 bc67 	b.w	800ed46 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ADF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 800e478:	f7fe f842 	bl	800c500 <HAL_RCC_GetHCLKFreq>
 800e47c:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800e47e:	f000 bc62 	b.w	800ed46 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ADF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800e482:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800e486:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800e488:	f000 bc5d 	b.w	800ed46 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ADF1CLKSOURCE_MSIK:

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800e48c:	4b5d      	ldr	r3, [pc, #372]	; (800e604 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800e48e:	689b      	ldr	r3, [r3, #8]
 800e490:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e494:	2b00      	cmp	r3, #0
 800e496:	d005      	beq.n	800e4a4 <HAL_RCCEx_GetPeriphCLKFreq+0x998>
 800e498:	4b5a      	ldr	r3, [pc, #360]	; (800e604 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800e49a:	689b      	ldr	r3, [r3, #8]
 800e49c:	0e1b      	lsrs	r3, r3, #24
 800e49e:	f003 030f 	and.w	r3, r3, #15
 800e4a2:	e006      	b.n	800e4b2 <HAL_RCCEx_GetPeriphCLKFreq+0x9a6>
 800e4a4:	4b57      	ldr	r3, [pc, #348]	; (800e604 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800e4a6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800e4aa:	041b      	lsls	r3, r3, #16
 800e4ac:	0e1b      	lsrs	r3, r3, #24
 800e4ae:	f003 030f 	and.w	r3, r3, #15
 800e4b2:	4a55      	ldr	r2, [pc, #340]	; (800e608 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800e4b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e4b8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800e4ba:	f000 bc44 	b.w	800ed46 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default:

        frequency = 0U;
 800e4be:	2300      	movs	r3, #0
 800e4c0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800e4c2:	f000 bc40 	b.w	800ed46 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C1)
 800e4c6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e4ca:	f1a2 0140 	sub.w	r1, r2, #64	; 0x40
 800e4ce:	430b      	orrs	r3, r1
 800e4d0:	d14a      	bne.n	800e568 <HAL_RCCEx_GetPeriphCLKFreq+0xa5c>
  {
    /* Get the current I2C1 source */
    srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 800e4d2:	4b4c      	ldr	r3, [pc, #304]	; (800e604 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800e4d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800e4d8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800e4dc:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 800e4de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e4e0:	2b00      	cmp	r3, #0
 800e4e2:	d104      	bne.n	800e4ee <HAL_RCCEx_GetPeriphCLKFreq+0x9e2>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800e4e4:	f7fe f826 	bl	800c534 <HAL_RCC_GetPCLK1Freq>
 800e4e8:	6378      	str	r0, [r7, #52]	; 0x34
 800e4ea:	f000 bc2c 	b.w	800ed46 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 800e4ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e4f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e4f4:	d104      	bne.n	800e500 <HAL_RCCEx_GetPeriphCLKFreq+0x9f4>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800e4f6:	f7fd fefb 	bl	800c2f0 <HAL_RCC_GetSysClockFreq>
 800e4fa:	6378      	str	r0, [r7, #52]	; 0x34
 800e4fc:	f000 bc23 	b.w	800ed46 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 800e500:	4b40      	ldr	r3, [pc, #256]	; (800e604 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800e502:	681b      	ldr	r3, [r3, #0]
 800e504:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800e508:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e50c:	d107      	bne.n	800e51e <HAL_RCCEx_GetPeriphCLKFreq+0xa12>
 800e50e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e510:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e514:	d103      	bne.n	800e51e <HAL_RCCEx_GetPeriphCLKFreq+0xa12>
    {
      frequency = HSI_VALUE;
 800e516:	4b3d      	ldr	r3, [pc, #244]	; (800e60c <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 800e518:	637b      	str	r3, [r7, #52]	; 0x34
 800e51a:	f000 bc14 	b.w	800ed46 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C1CLKSOURCE_MSIK))
 800e51e:	4b39      	ldr	r3, [pc, #228]	; (800e604 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800e520:	681b      	ldr	r3, [r3, #0]
 800e522:	f003 0320 	and.w	r3, r3, #32
 800e526:	2b20      	cmp	r3, #32
 800e528:	d11b      	bne.n	800e562 <HAL_RCCEx_GetPeriphCLKFreq+0xa56>
 800e52a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e52c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800e530:	d117      	bne.n	800e562 <HAL_RCCEx_GetPeriphCLKFreq+0xa56>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800e532:	4b34      	ldr	r3, [pc, #208]	; (800e604 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800e534:	689b      	ldr	r3, [r3, #8]
 800e536:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e53a:	2b00      	cmp	r3, #0
 800e53c:	d005      	beq.n	800e54a <HAL_RCCEx_GetPeriphCLKFreq+0xa3e>
 800e53e:	4b31      	ldr	r3, [pc, #196]	; (800e604 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800e540:	689b      	ldr	r3, [r3, #8]
 800e542:	0e1b      	lsrs	r3, r3, #24
 800e544:	f003 030f 	and.w	r3, r3, #15
 800e548:	e006      	b.n	800e558 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
 800e54a:	4b2e      	ldr	r3, [pc, #184]	; (800e604 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800e54c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800e550:	041b      	lsls	r3, r3, #16
 800e552:	0e1b      	lsrs	r3, r3, #24
 800e554:	f003 030f 	and.w	r3, r3, #15
 800e558:	4a2b      	ldr	r2, [pc, #172]	; (800e608 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800e55a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e55e:	637b      	str	r3, [r7, #52]	; 0x34
 800e560:	e3f1      	b.n	800ed46 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for I2C1 */
    else
    {
      frequency = 0U;
 800e562:	2300      	movs	r3, #0
 800e564:	637b      	str	r3, [r7, #52]	; 0x34
 800e566:	e3ee      	b.n	800ed46 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C2)
 800e568:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e56c:	f1a2 0180 	sub.w	r1, r2, #128	; 0x80
 800e570:	430b      	orrs	r3, r1
 800e572:	d14d      	bne.n	800e610 <HAL_RCCEx_GetPeriphCLKFreq+0xb04>
  {
    /* Get the current I2C2 source */
    srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 800e574:	4b23      	ldr	r3, [pc, #140]	; (800e604 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800e576:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800e57a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800e57e:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 800e580:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e582:	2b00      	cmp	r3, #0
 800e584:	d103      	bne.n	800e58e <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800e586:	f7fd ffd5 	bl	800c534 <HAL_RCC_GetPCLK1Freq>
 800e58a:	6378      	str	r0, [r7, #52]	; 0x34
 800e58c:	e3db      	b.n	800ed46 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 800e58e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e590:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e594:	d103      	bne.n	800e59e <HAL_RCCEx_GetPeriphCLKFreq+0xa92>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800e596:	f7fd feab 	bl	800c2f0 <HAL_RCC_GetSysClockFreq>
 800e59a:	6378      	str	r0, [r7, #52]	; 0x34
 800e59c:	e3d3      	b.n	800ed46 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 800e59e:	4b19      	ldr	r3, [pc, #100]	; (800e604 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800e5a0:	681b      	ldr	r3, [r3, #0]
 800e5a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800e5a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e5aa:	d106      	bne.n	800e5ba <HAL_RCCEx_GetPeriphCLKFreq+0xaae>
 800e5ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e5ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e5b2:	d102      	bne.n	800e5ba <HAL_RCCEx_GetPeriphCLKFreq+0xaae>
    {
      frequency = HSI_VALUE;
 800e5b4:	4b15      	ldr	r3, [pc, #84]	; (800e60c <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 800e5b6:	637b      	str	r3, [r7, #52]	; 0x34
 800e5b8:	e3c5      	b.n	800ed46 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C2CLKSOURCE_MSIK))
 800e5ba:	4b12      	ldr	r3, [pc, #72]	; (800e604 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800e5bc:	681b      	ldr	r3, [r3, #0]
 800e5be:	f003 0320 	and.w	r3, r3, #32
 800e5c2:	2b20      	cmp	r3, #32
 800e5c4:	d11b      	bne.n	800e5fe <HAL_RCCEx_GetPeriphCLKFreq+0xaf2>
 800e5c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e5c8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800e5cc:	d117      	bne.n	800e5fe <HAL_RCCEx_GetPeriphCLKFreq+0xaf2>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800e5ce:	4b0d      	ldr	r3, [pc, #52]	; (800e604 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800e5d0:	689b      	ldr	r3, [r3, #8]
 800e5d2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e5d6:	2b00      	cmp	r3, #0
 800e5d8:	d005      	beq.n	800e5e6 <HAL_RCCEx_GetPeriphCLKFreq+0xada>
 800e5da:	4b0a      	ldr	r3, [pc, #40]	; (800e604 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800e5dc:	689b      	ldr	r3, [r3, #8]
 800e5de:	0e1b      	lsrs	r3, r3, #24
 800e5e0:	f003 030f 	and.w	r3, r3, #15
 800e5e4:	e006      	b.n	800e5f4 <HAL_RCCEx_GetPeriphCLKFreq+0xae8>
 800e5e6:	4b07      	ldr	r3, [pc, #28]	; (800e604 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800e5e8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800e5ec:	041b      	lsls	r3, r3, #16
 800e5ee:	0e1b      	lsrs	r3, r3, #24
 800e5f0:	f003 030f 	and.w	r3, r3, #15
 800e5f4:	4a04      	ldr	r2, [pc, #16]	; (800e608 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800e5f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e5fa:	637b      	str	r3, [r7, #52]	; 0x34
 800e5fc:	e3a3      	b.n	800ed46 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for I2C2 */
    else
    {
      frequency = 0U;
 800e5fe:	2300      	movs	r3, #0
 800e600:	637b      	str	r3, [r7, #52]	; 0x34
 800e602:	e3a0      	b.n	800ed46 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
 800e604:	46020c00 	.word	0x46020c00
 800e608:	0801502c 	.word	0x0801502c
 800e60c:	00f42400 	.word	0x00f42400
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C3)
 800e610:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e614:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 800e618:	430b      	orrs	r3, r1
 800e61a:	d148      	bne.n	800e6ae <HAL_RCCEx_GetPeriphCLKFreq+0xba2>
  {
    /* Get the current I2C3 source */
    srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 800e61c:	4b9d      	ldr	r3, [pc, #628]	; (800e894 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800e61e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800e622:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800e626:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 800e628:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e62a:	2bc0      	cmp	r3, #192	; 0xc0
 800e62c:	d024      	beq.n	800e678 <HAL_RCCEx_GetPeriphCLKFreq+0xb6c>
 800e62e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e630:	2bc0      	cmp	r3, #192	; 0xc0
 800e632:	d839      	bhi.n	800e6a8 <HAL_RCCEx_GetPeriphCLKFreq+0xb9c>
 800e634:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e636:	2b80      	cmp	r3, #128	; 0x80
 800e638:	d00d      	beq.n	800e656 <HAL_RCCEx_GetPeriphCLKFreq+0xb4a>
 800e63a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e63c:	2b80      	cmp	r3, #128	; 0x80
 800e63e:	d833      	bhi.n	800e6a8 <HAL_RCCEx_GetPeriphCLKFreq+0xb9c>
 800e640:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e642:	2b00      	cmp	r3, #0
 800e644:	d003      	beq.n	800e64e <HAL_RCCEx_GetPeriphCLKFreq+0xb42>
 800e646:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e648:	2b40      	cmp	r3, #64	; 0x40
 800e64a:	d011      	beq.n	800e670 <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
 800e64c:	e02c      	b.n	800e6a8 <HAL_RCCEx_GetPeriphCLKFreq+0xb9c>
    {
      case RCC_I2C3CLKSOURCE_PCLK3:
      {
        frequency = HAL_RCC_GetPCLK3Freq();
 800e64e:	f7fd ff99 	bl	800c584 <HAL_RCC_GetPCLK3Freq>
 800e652:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800e654:	e377      	b.n	800ed46 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      case RCC_I2C3CLKSOURCE_HSI:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800e656:	4b8f      	ldr	r3, [pc, #572]	; (800e894 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800e658:	681b      	ldr	r3, [r3, #0]
 800e65a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800e65e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e662:	d102      	bne.n	800e66a <HAL_RCCEx_GetPeriphCLKFreq+0xb5e>
        {
          frequency = HSI_VALUE;
 800e664:	4b8c      	ldr	r3, [pc, #560]	; (800e898 <HAL_RCCEx_GetPeriphCLKFreq+0xd8c>)
 800e666:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800e668:	e36d      	b.n	800ed46 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
          frequency = 0U;
 800e66a:	2300      	movs	r3, #0
 800e66c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800e66e:	e36a      	b.n	800ed46 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      case RCC_I2C3CLKSOURCE_SYSCLK:
      {
        frequency = HAL_RCC_GetSysClockFreq();
 800e670:	f7fd fe3e 	bl	800c2f0 <HAL_RCC_GetSysClockFreq>
 800e674:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800e676:	e366      	b.n	800ed46 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      case RCC_I2C3CLKSOURCE_MSIK:
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)];
 800e678:	4b86      	ldr	r3, [pc, #536]	; (800e894 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800e67a:	689b      	ldr	r3, [r3, #8]
 800e67c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e680:	2b00      	cmp	r3, #0
 800e682:	d005      	beq.n	800e690 <HAL_RCCEx_GetPeriphCLKFreq+0xb84>
 800e684:	4b83      	ldr	r3, [pc, #524]	; (800e894 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800e686:	689b      	ldr	r3, [r3, #8]
 800e688:	0f1b      	lsrs	r3, r3, #28
 800e68a:	f003 030f 	and.w	r3, r3, #15
 800e68e:	e006      	b.n	800e69e <HAL_RCCEx_GetPeriphCLKFreq+0xb92>
 800e690:	4b80      	ldr	r3, [pc, #512]	; (800e894 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800e692:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800e696:	041b      	lsls	r3, r3, #16
 800e698:	0f1b      	lsrs	r3, r3, #28
 800e69a:	f003 030f 	and.w	r3, r3, #15
 800e69e:	4a7f      	ldr	r2, [pc, #508]	; (800e89c <HAL_RCCEx_GetPeriphCLKFreq+0xd90>)
 800e6a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e6a4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800e6a6:	e34e      	b.n	800ed46 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      default:
      {
        frequency = 0U;
 800e6a8:	2300      	movs	r3, #0
 800e6aa:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800e6ac:	e34b      	b.n	800ed46 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C4)
 800e6ae:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e6b2:	f5a2 0180 	sub.w	r1, r2, #4194304	; 0x400000
 800e6b6:	430b      	orrs	r3, r1
 800e6b8:	d147      	bne.n	800e74a <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
  {
    /* Get the current I2C4 source */
    srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 800e6ba:	4b76      	ldr	r3, [pc, #472]	; (800e894 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800e6bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800e6c0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800e6c4:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C4CLKSOURCE_PCLK1)
 800e6c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e6c8:	2b00      	cmp	r3, #0
 800e6ca:	d103      	bne.n	800e6d4 <HAL_RCCEx_GetPeriphCLKFreq+0xbc8>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800e6cc:	f7fd ff32 	bl	800c534 <HAL_RCC_GetPCLK1Freq>
 800e6d0:	6378      	str	r0, [r7, #52]	; 0x34
 800e6d2:	e338      	b.n	800ed46 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_I2C4CLKSOURCE_SYSCLK)
 800e6d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e6d6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800e6da:	d103      	bne.n	800e6e4 <HAL_RCCEx_GetPeriphCLKFreq+0xbd8>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800e6dc:	f7fd fe08 	bl	800c2f0 <HAL_RCC_GetSysClockFreq>
 800e6e0:	6378      	str	r0, [r7, #52]	; 0x34
 800e6e2:	e330      	b.n	800ed46 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 800e6e4:	4b6b      	ldr	r3, [pc, #428]	; (800e894 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800e6e6:	681b      	ldr	r3, [r3, #0]
 800e6e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800e6ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e6f0:	d106      	bne.n	800e700 <HAL_RCCEx_GetPeriphCLKFreq+0xbf4>
 800e6f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e6f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e6f8:	d102      	bne.n	800e700 <HAL_RCCEx_GetPeriphCLKFreq+0xbf4>
    {
      frequency = HSI_VALUE;
 800e6fa:	4b67      	ldr	r3, [pc, #412]	; (800e898 <HAL_RCCEx_GetPeriphCLKFreq+0xd8c>)
 800e6fc:	637b      	str	r3, [r7, #52]	; 0x34
 800e6fe:	e322      	b.n	800ed46 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C4CLKSOURCE_MSIK))
 800e700:	4b64      	ldr	r3, [pc, #400]	; (800e894 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800e702:	681b      	ldr	r3, [r3, #0]
 800e704:	f003 0320 	and.w	r3, r3, #32
 800e708:	2b20      	cmp	r3, #32
 800e70a:	d11b      	bne.n	800e744 <HAL_RCCEx_GetPeriphCLKFreq+0xc38>
 800e70c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e70e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800e712:	d117      	bne.n	800e744 <HAL_RCCEx_GetPeriphCLKFreq+0xc38>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800e714:	4b5f      	ldr	r3, [pc, #380]	; (800e894 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800e716:	689b      	ldr	r3, [r3, #8]
 800e718:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e71c:	2b00      	cmp	r3, #0
 800e71e:	d005      	beq.n	800e72c <HAL_RCCEx_GetPeriphCLKFreq+0xc20>
 800e720:	4b5c      	ldr	r3, [pc, #368]	; (800e894 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800e722:	689b      	ldr	r3, [r3, #8]
 800e724:	0e1b      	lsrs	r3, r3, #24
 800e726:	f003 030f 	and.w	r3, r3, #15
 800e72a:	e006      	b.n	800e73a <HAL_RCCEx_GetPeriphCLKFreq+0xc2e>
 800e72c:	4b59      	ldr	r3, [pc, #356]	; (800e894 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800e72e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800e732:	041b      	lsls	r3, r3, #16
 800e734:	0e1b      	lsrs	r3, r3, #24
 800e736:	f003 030f 	and.w	r3, r3, #15
 800e73a:	4a58      	ldr	r2, [pc, #352]	; (800e89c <HAL_RCCEx_GetPeriphCLKFreq+0xd90>)
 800e73c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e740:	637b      	str	r3, [r7, #52]	; 0x34
 800e742:	e300      	b.n	800ed46 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for I2C4 */
    else
    {
      frequency = 0U;
 800e744:	2300      	movs	r3, #0
 800e746:	637b      	str	r3, [r7, #52]	; 0x34
 800e748:	e2fd      	b.n	800ed46 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    {
      frequency = 0U;
    }
  }
#endif /* I2C6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM34)
 800e74a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e74e:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 800e752:	430b      	orrs	r3, r1
 800e754:	d15b      	bne.n	800e80e <HAL_RCCEx_GetPeriphCLKFreq+0xd02>
  {
    /* Get the current LPTIM34 source */
    srcclk = __HAL_RCC_GET_LPTIM34_SOURCE();
 800e756:	4b4f      	ldr	r3, [pc, #316]	; (800e894 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800e758:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800e75c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e760:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM34CLKSOURCE_MSIK)
 800e762:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e764:	2b00      	cmp	r3, #0
 800e766:	d117      	bne.n	800e798 <HAL_RCCEx_GetPeriphCLKFreq+0xc8c>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800e768:	4b4a      	ldr	r3, [pc, #296]	; (800e894 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800e76a:	689b      	ldr	r3, [r3, #8]
 800e76c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e770:	2b00      	cmp	r3, #0
 800e772:	d005      	beq.n	800e780 <HAL_RCCEx_GetPeriphCLKFreq+0xc74>
 800e774:	4b47      	ldr	r3, [pc, #284]	; (800e894 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800e776:	689b      	ldr	r3, [r3, #8]
 800e778:	0e1b      	lsrs	r3, r3, #24
 800e77a:	f003 030f 	and.w	r3, r3, #15
 800e77e:	e006      	b.n	800e78e <HAL_RCCEx_GetPeriphCLKFreq+0xc82>
 800e780:	4b44      	ldr	r3, [pc, #272]	; (800e894 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800e782:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800e786:	041b      	lsls	r3, r3, #16
 800e788:	0e1b      	lsrs	r3, r3, #24
 800e78a:	f003 030f 	and.w	r3, r3, #15
 800e78e:	4a43      	ldr	r2, [pc, #268]	; (800e89c <HAL_RCCEx_GetPeriphCLKFreq+0xd90>)
 800e790:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e794:	637b      	str	r3, [r7, #52]	; 0x34
 800e796:	e2d6      	b.n	800ed46 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSI))
 800e798:	4b3e      	ldr	r3, [pc, #248]	; (800e894 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800e79a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800e79e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800e7a2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800e7a6:	d112      	bne.n	800e7ce <HAL_RCCEx_GetPeriphCLKFreq+0xcc2>
 800e7a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e7aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e7ae:	d10e      	bne.n	800e7ce <HAL_RCCEx_GetPeriphCLKFreq+0xcc2>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800e7b0:	4b38      	ldr	r3, [pc, #224]	; (800e894 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800e7b2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800e7b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e7ba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800e7be:	d102      	bne.n	800e7c6 <HAL_RCCEx_GetPeriphCLKFreq+0xcba>
      {
        frequency = LSI_VALUE / 128U;
 800e7c0:	23fa      	movs	r3, #250	; 0xfa
 800e7c2:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800e7c4:	e2bf      	b.n	800ed46 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      else
      {
        frequency = LSI_VALUE;
 800e7c6:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800e7ca:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800e7cc:	e2bb      	b.n	800ed46 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_HSI))
 800e7ce:	4b31      	ldr	r3, [pc, #196]	; (800e894 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800e7d0:	681b      	ldr	r3, [r3, #0]
 800e7d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800e7d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e7da:	d106      	bne.n	800e7ea <HAL_RCCEx_GetPeriphCLKFreq+0xcde>
 800e7dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e7de:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e7e2:	d102      	bne.n	800e7ea <HAL_RCCEx_GetPeriphCLKFreq+0xcde>
    {
      frequency = HSI_VALUE;
 800e7e4:	4b2c      	ldr	r3, [pc, #176]	; (800e898 <HAL_RCCEx_GetPeriphCLKFreq+0xd8c>)
 800e7e6:	637b      	str	r3, [r7, #52]	; 0x34
 800e7e8:	e2ad      	b.n	800ed46 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSE))
 800e7ea:	4b2a      	ldr	r3, [pc, #168]	; (800e894 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800e7ec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800e7f0:	f003 0302 	and.w	r3, r3, #2
 800e7f4:	2b02      	cmp	r3, #2
 800e7f6:	d107      	bne.n	800e808 <HAL_RCCEx_GetPeriphCLKFreq+0xcfc>
 800e7f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e7fa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800e7fe:	d103      	bne.n	800e808 <HAL_RCCEx_GetPeriphCLKFreq+0xcfc>
    {
      frequency = LSE_VALUE;
 800e800:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e804:	637b      	str	r3, [r7, #52]	; 0x34
 800e806:	e29e      	b.n	800ed46 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for LPTIM34 */
    else
    {
      frequency = 0U;
 800e808:	2300      	movs	r3, #0
 800e80a:	637b      	str	r3, [r7, #52]	; 0x34
 800e80c:	e29b      	b.n	800ed46 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM1)
 800e80e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e812:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 800e816:	430b      	orrs	r3, r1
 800e818:	d162      	bne.n	800e8e0 <HAL_RCCEx_GetPeriphCLKFreq+0xdd4>
  {
    /* Get the current LPTIM1 source */
    srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 800e81a:	4b1e      	ldr	r3, [pc, #120]	; (800e894 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800e81c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800e820:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800e824:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM1CLKSOURCE_MSIK)
 800e826:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e828:	2b00      	cmp	r3, #0
 800e82a:	d117      	bne.n	800e85c <HAL_RCCEx_GetPeriphCLKFreq+0xd50>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800e82c:	4b19      	ldr	r3, [pc, #100]	; (800e894 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800e82e:	689b      	ldr	r3, [r3, #8]
 800e830:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e834:	2b00      	cmp	r3, #0
 800e836:	d005      	beq.n	800e844 <HAL_RCCEx_GetPeriphCLKFreq+0xd38>
 800e838:	4b16      	ldr	r3, [pc, #88]	; (800e894 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800e83a:	689b      	ldr	r3, [r3, #8]
 800e83c:	0e1b      	lsrs	r3, r3, #24
 800e83e:	f003 030f 	and.w	r3, r3, #15
 800e842:	e006      	b.n	800e852 <HAL_RCCEx_GetPeriphCLKFreq+0xd46>
 800e844:	4b13      	ldr	r3, [pc, #76]	; (800e894 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800e846:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800e84a:	041b      	lsls	r3, r3, #16
 800e84c:	0e1b      	lsrs	r3, r3, #24
 800e84e:	f003 030f 	and.w	r3, r3, #15
 800e852:	4a12      	ldr	r2, [pc, #72]	; (800e89c <HAL_RCCEx_GetPeriphCLKFreq+0xd90>)
 800e854:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e858:	637b      	str	r3, [r7, #52]	; 0x34
 800e85a:	e274      	b.n	800ed46 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 800e85c:	4b0d      	ldr	r3, [pc, #52]	; (800e894 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800e85e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800e862:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800e866:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800e86a:	d119      	bne.n	800e8a0 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>
 800e86c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e86e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e872:	d115      	bne.n	800e8a0 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800e874:	4b07      	ldr	r3, [pc, #28]	; (800e894 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800e876:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800e87a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e87e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800e882:	d102      	bne.n	800e88a <HAL_RCCEx_GetPeriphCLKFreq+0xd7e>
      {
        frequency = LSI_VALUE / 128U;
 800e884:	23fa      	movs	r3, #250	; 0xfa
 800e886:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800e888:	e25d      	b.n	800ed46 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      else
      {
        frequency = LSI_VALUE;
 800e88a:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800e88e:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800e890:	e259      	b.n	800ed46 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
 800e892:	bf00      	nop
 800e894:	46020c00 	.word	0x46020c00
 800e898:	00f42400 	.word	0x00f42400
 800e89c:	0801502c 	.word	0x0801502c
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 800e8a0:	4b9d      	ldr	r3, [pc, #628]	; (800eb18 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 800e8a2:	681b      	ldr	r3, [r3, #0]
 800e8a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800e8a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e8ac:	d106      	bne.n	800e8bc <HAL_RCCEx_GetPeriphCLKFreq+0xdb0>
 800e8ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e8b0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e8b4:	d102      	bne.n	800e8bc <HAL_RCCEx_GetPeriphCLKFreq+0xdb0>
    {
      frequency = HSI_VALUE;
 800e8b6:	4b99      	ldr	r3, [pc, #612]	; (800eb1c <HAL_RCCEx_GetPeriphCLKFreq+0x1010>)
 800e8b8:	637b      	str	r3, [r7, #52]	; 0x34
 800e8ba:	e244      	b.n	800ed46 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 800e8bc:	4b96      	ldr	r3, [pc, #600]	; (800eb18 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 800e8be:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800e8c2:	f003 0302 	and.w	r3, r3, #2
 800e8c6:	2b02      	cmp	r3, #2
 800e8c8:	d107      	bne.n	800e8da <HAL_RCCEx_GetPeriphCLKFreq+0xdce>
 800e8ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e8cc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800e8d0:	d103      	bne.n	800e8da <HAL_RCCEx_GetPeriphCLKFreq+0xdce>
    {
      frequency = LSE_VALUE;
 800e8d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e8d6:	637b      	str	r3, [r7, #52]	; 0x34
 800e8d8:	e235      	b.n	800ed46 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for LPTIM1 */
    else
    {
      frequency = 0U;
 800e8da:	2300      	movs	r3, #0
 800e8dc:	637b      	str	r3, [r7, #52]	; 0x34
 800e8de:	e232      	b.n	800ed46 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM2)
 800e8e0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e8e4:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 800e8e8:	430b      	orrs	r3, r1
 800e8ea:	d147      	bne.n	800e97c <HAL_RCCEx_GetPeriphCLKFreq+0xe70>
  {
    /* Get the current LPTIM2 source */
    srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 800e8ec:	4b8a      	ldr	r3, [pc, #552]	; (800eb18 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 800e8ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800e8f2:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 800e8f6:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 800e8f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e8fa:	2b00      	cmp	r3, #0
 800e8fc:	d103      	bne.n	800e906 <HAL_RCCEx_GetPeriphCLKFreq+0xdfa>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800e8fe:	f7fd fe19 	bl	800c534 <HAL_RCC_GetPCLK1Freq>
 800e902:	6378      	str	r0, [r7, #52]	; 0x34
 800e904:	e21f      	b.n	800ed46 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 800e906:	4b84      	ldr	r3, [pc, #528]	; (800eb18 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 800e908:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800e90c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800e910:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800e914:	d112      	bne.n	800e93c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
 800e916:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e918:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800e91c:	d10e      	bne.n	800e93c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800e91e:	4b7e      	ldr	r3, [pc, #504]	; (800eb18 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 800e920:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800e924:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e928:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800e92c:	d102      	bne.n	800e934 <HAL_RCCEx_GetPeriphCLKFreq+0xe28>
      {
        frequency = LSI_VALUE / 128U;
 800e92e:	23fa      	movs	r3, #250	; 0xfa
 800e930:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800e932:	e208      	b.n	800ed46 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      else
      {
        frequency = LSI_VALUE;
 800e934:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800e938:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800e93a:	e204      	b.n	800ed46 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 800e93c:	4b76      	ldr	r3, [pc, #472]	; (800eb18 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 800e93e:	681b      	ldr	r3, [r3, #0]
 800e940:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800e944:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e948:	d106      	bne.n	800e958 <HAL_RCCEx_GetPeriphCLKFreq+0xe4c>
 800e94a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e94c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800e950:	d102      	bne.n	800e958 <HAL_RCCEx_GetPeriphCLKFreq+0xe4c>
    {
      frequency = HSI_VALUE;
 800e952:	4b72      	ldr	r3, [pc, #456]	; (800eb1c <HAL_RCCEx_GetPeriphCLKFreq+0x1010>)
 800e954:	637b      	str	r3, [r7, #52]	; 0x34
 800e956:	e1f6      	b.n	800ed46 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 800e958:	4b6f      	ldr	r3, [pc, #444]	; (800eb18 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 800e95a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800e95e:	f003 0302 	and.w	r3, r3, #2
 800e962:	2b02      	cmp	r3, #2
 800e964:	d107      	bne.n	800e976 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 800e966:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e968:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800e96c:	d103      	bne.n	800e976 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
    {
      frequency = LSE_VALUE;
 800e96e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e972:	637b      	str	r3, [r7, #52]	; 0x34
 800e974:	e1e7      	b.n	800ed46 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for LPTIM2 */
    else
    {
      frequency = 0U;
 800e976:	2300      	movs	r3, #0
 800e978:	637b      	str	r3, [r7, #52]	; 0x34
 800e97a:	e1e4      	b.n	800ed46 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN1)
 800e97c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e980:	f102 4178 	add.w	r1, r2, #4160749568	; 0xf8000000
 800e984:	430b      	orrs	r3, r1
 800e986:	d12d      	bne.n	800e9e4 <HAL_RCCEx_GetPeriphCLKFreq+0xed8>
  {
    /* Get the current FDCAN1 kernel source */
    srcclk = __HAL_RCC_GET_FDCAN1_SOURCE();
 800e988:	4b63      	ldr	r3, [pc, #396]	; (800eb18 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 800e98a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800e98e:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 800e992:	633b      	str	r3, [r7, #48]	; 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCAN1CLKSOURCE_HSE))
 800e994:	4b60      	ldr	r3, [pc, #384]	; (800eb18 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 800e996:	681b      	ldr	r3, [r3, #0]
 800e998:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e99c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800e9a0:	d105      	bne.n	800e9ae <HAL_RCCEx_GetPeriphCLKFreq+0xea2>
 800e9a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e9a4:	2b00      	cmp	r3, #0
 800e9a6:	d102      	bne.n	800e9ae <HAL_RCCEx_GetPeriphCLKFreq+0xea2>
    {
      frequency = HSE_VALUE;
 800e9a8:	4b5c      	ldr	r3, [pc, #368]	; (800eb1c <HAL_RCCEx_GetPeriphCLKFreq+0x1010>)
 800e9aa:	637b      	str	r3, [r7, #52]	; 0x34
 800e9ac:	e1cb      	b.n	800ed46 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL1) /* PLL1 ? */
 800e9ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e9b0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800e9b4:	d107      	bne.n	800e9c6 <HAL_RCCEx_GetPeriphCLKFreq+0xeba>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800e9b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e9ba:	4618      	mov	r0, r3
 800e9bc:	f7fe fc74 	bl	800d2a8 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_Q_Frequency;
 800e9c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9c2:	637b      	str	r3, [r7, #52]	; 0x34
 800e9c4:	e1bf      	b.n	800ed46 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL2) /* PLL2 ? */
 800e9c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e9c8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e9cc:	d107      	bne.n	800e9de <HAL_RCCEx_GetPeriphCLKFreq+0xed2>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e9ce:	f107 0318 	add.w	r3, r7, #24
 800e9d2:	4618      	mov	r0, r3
 800e9d4:	f7fe fdce 	bl	800d574 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_P_Frequency;
 800e9d8:	69bb      	ldr	r3, [r7, #24]
 800e9da:	637b      	str	r3, [r7, #52]	; 0x34
 800e9dc:	e1b3      	b.n	800ed46 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for FDCAN1 */
    else
    {
      frequency = 0U;
 800e9de:	2300      	movs	r3, #0
 800e9e0:	637b      	str	r3, [r7, #52]	; 0x34
 800e9e2:	e1b0      	b.n	800ed46 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI1)
 800e9e4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e9e8:	f5a2 0100 	sub.w	r1, r2, #8388608	; 0x800000
 800e9ec:	430b      	orrs	r3, r1
 800e9ee:	d14d      	bne.n	800ea8c <HAL_RCCEx_GetPeriphCLKFreq+0xf80>
  {
    /* Get the current SPI1 kernel source */
    srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 800e9f0:	4b49      	ldr	r3, [pc, #292]	; (800eb18 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 800e9f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800e9f6:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800e9fa:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 800e9fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e9fe:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800ea02:	d028      	beq.n	800ea56 <HAL_RCCEx_GetPeriphCLKFreq+0xf4a>
 800ea04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea06:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800ea0a:	d83c      	bhi.n	800ea86 <HAL_RCCEx_GetPeriphCLKFreq+0xf7a>
 800ea0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea0e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ea12:	d013      	beq.n	800ea3c <HAL_RCCEx_GetPeriphCLKFreq+0xf30>
 800ea14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea16:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ea1a:	d834      	bhi.n	800ea86 <HAL_RCCEx_GetPeriphCLKFreq+0xf7a>
 800ea1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea1e:	2b00      	cmp	r3, #0
 800ea20:	d004      	beq.n	800ea2c <HAL_RCCEx_GetPeriphCLKFreq+0xf20>
 800ea22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea24:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ea28:	d004      	beq.n	800ea34 <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
 800ea2a:	e02c      	b.n	800ea86 <HAL_RCCEx_GetPeriphCLKFreq+0xf7a>
    {
      case RCC_SPI1CLKSOURCE_PCLK2:

        frequency = HAL_RCC_GetPCLK2Freq();
 800ea2c:	f7fd fd96 	bl	800c55c <HAL_RCC_GetPCLK2Freq>
 800ea30:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800ea32:	e188      	b.n	800ed46 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI1CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800ea34:	f7fd fc5c 	bl	800c2f0 <HAL_RCC_GetSysClockFreq>
 800ea38:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800ea3a:	e184      	b.n	800ed46 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI1CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800ea3c:	4b36      	ldr	r3, [pc, #216]	; (800eb18 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 800ea3e:	681b      	ldr	r3, [r3, #0]
 800ea40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ea44:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ea48:	d102      	bne.n	800ea50 <HAL_RCCEx_GetPeriphCLKFreq+0xf44>
        {
          frequency = HSI_VALUE;
 800ea4a:	4b34      	ldr	r3, [pc, #208]	; (800eb1c <HAL_RCCEx_GetPeriphCLKFreq+0x1010>)
 800ea4c:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800ea4e:	e17a      	b.n	800ed46 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
          frequency = 0U;
 800ea50:	2300      	movs	r3, #0
 800ea52:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800ea54:	e177      	b.n	800ed46 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI1CLKSOURCE_MSIK:

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800ea56:	4b30      	ldr	r3, [pc, #192]	; (800eb18 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 800ea58:	689b      	ldr	r3, [r3, #8]
 800ea5a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ea5e:	2b00      	cmp	r3, #0
 800ea60:	d005      	beq.n	800ea6e <HAL_RCCEx_GetPeriphCLKFreq+0xf62>
 800ea62:	4b2d      	ldr	r3, [pc, #180]	; (800eb18 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 800ea64:	689b      	ldr	r3, [r3, #8]
 800ea66:	0e1b      	lsrs	r3, r3, #24
 800ea68:	f003 030f 	and.w	r3, r3, #15
 800ea6c:	e006      	b.n	800ea7c <HAL_RCCEx_GetPeriphCLKFreq+0xf70>
 800ea6e:	4b2a      	ldr	r3, [pc, #168]	; (800eb18 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 800ea70:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800ea74:	041b      	lsls	r3, r3, #16
 800ea76:	0e1b      	lsrs	r3, r3, #24
 800ea78:	f003 030f 	and.w	r3, r3, #15
 800ea7c:	4a28      	ldr	r2, [pc, #160]	; (800eb20 <HAL_RCCEx_GetPeriphCLKFreq+0x1014>)
 800ea7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ea82:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800ea84:	e15f      	b.n	800ed46 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default:

        frequency = 0U;
 800ea86:	2300      	movs	r3, #0
 800ea88:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800ea8a:	e15c      	b.n	800ed46 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI2)
 800ea8c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ea90:	f102 417f 	add.w	r1, r2, #4278190080	; 0xff000000
 800ea94:	430b      	orrs	r3, r1
 800ea96:	d154      	bne.n	800eb42 <HAL_RCCEx_GetPeriphCLKFreq+0x1036>
  {
    /* Get the current SPI2 kernel source */
    srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 800ea98:	4b1f      	ldr	r3, [pc, #124]	; (800eb18 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 800ea9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800ea9e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800eaa2:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 800eaa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eaa6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800eaaa:	d028      	beq.n	800eafe <HAL_RCCEx_GetPeriphCLKFreq+0xff2>
 800eaac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eaae:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800eab2:	d843      	bhi.n	800eb3c <HAL_RCCEx_GetPeriphCLKFreq+0x1030>
 800eab4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eab6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800eaba:	d013      	beq.n	800eae4 <HAL_RCCEx_GetPeriphCLKFreq+0xfd8>
 800eabc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eabe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800eac2:	d83b      	bhi.n	800eb3c <HAL_RCCEx_GetPeriphCLKFreq+0x1030>
 800eac4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eac6:	2b00      	cmp	r3, #0
 800eac8:	d004      	beq.n	800ead4 <HAL_RCCEx_GetPeriphCLKFreq+0xfc8>
 800eaca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eacc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ead0:	d004      	beq.n	800eadc <HAL_RCCEx_GetPeriphCLKFreq+0xfd0>
 800ead2:	e033      	b.n	800eb3c <HAL_RCCEx_GetPeriphCLKFreq+0x1030>
    {
      case RCC_SPI2CLKSOURCE_PCLK1:

        frequency = HAL_RCC_GetPCLK1Freq();
 800ead4:	f7fd fd2e 	bl	800c534 <HAL_RCC_GetPCLK1Freq>
 800ead8:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800eada:	e134      	b.n	800ed46 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI2CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800eadc:	f7fd fc08 	bl	800c2f0 <HAL_RCC_GetSysClockFreq>
 800eae0:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800eae2:	e130      	b.n	800ed46 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI2CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800eae4:	4b0c      	ldr	r3, [pc, #48]	; (800eb18 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 800eae6:	681b      	ldr	r3, [r3, #0]
 800eae8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800eaec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800eaf0:	d102      	bne.n	800eaf8 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>
        {
          frequency = HSI_VALUE;
 800eaf2:	4b0a      	ldr	r3, [pc, #40]	; (800eb1c <HAL_RCCEx_GetPeriphCLKFreq+0x1010>)
 800eaf4:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800eaf6:	e126      	b.n	800ed46 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
          frequency = 0U;
 800eaf8:	2300      	movs	r3, #0
 800eafa:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800eafc:	e123      	b.n	800ed46 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI2CLKSOURCE_MSIK:

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800eafe:	4b06      	ldr	r3, [pc, #24]	; (800eb18 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 800eb00:	689b      	ldr	r3, [r3, #8]
 800eb02:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800eb06:	2b00      	cmp	r3, #0
 800eb08:	d00c      	beq.n	800eb24 <HAL_RCCEx_GetPeriphCLKFreq+0x1018>
 800eb0a:	4b03      	ldr	r3, [pc, #12]	; (800eb18 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 800eb0c:	689b      	ldr	r3, [r3, #8]
 800eb0e:	0e1b      	lsrs	r3, r3, #24
 800eb10:	f003 030f 	and.w	r3, r3, #15
 800eb14:	e00d      	b.n	800eb32 <HAL_RCCEx_GetPeriphCLKFreq+0x1026>
 800eb16:	bf00      	nop
 800eb18:	46020c00 	.word	0x46020c00
 800eb1c:	00f42400 	.word	0x00f42400
 800eb20:	0801502c 	.word	0x0801502c
 800eb24:	4b8a      	ldr	r3, [pc, #552]	; (800ed50 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 800eb26:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800eb2a:	041b      	lsls	r3, r3, #16
 800eb2c:	0e1b      	lsrs	r3, r3, #24
 800eb2e:	f003 030f 	and.w	r3, r3, #15
 800eb32:	4a88      	ldr	r2, [pc, #544]	; (800ed54 <HAL_RCCEx_GetPeriphCLKFreq+0x1248>)
 800eb34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800eb38:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800eb3a:	e104      	b.n	800ed46 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default:

        frequency = 0U;
 800eb3c:	2300      	movs	r3, #0
 800eb3e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800eb40:	e101      	b.n	800ed46 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI3)
 800eb42:	e9d7 2300 	ldrd	r2, r3, [r7]
 800eb46:	f102 417e 	add.w	r1, r2, #4261412864	; 0xfe000000
 800eb4a:	430b      	orrs	r3, r1
 800eb4c:	d16e      	bne.n	800ec2c <HAL_RCCEx_GetPeriphCLKFreq+0x1120>
  {
    /* Get the current SPI3 kernel source */
    srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 800eb4e:	4b80      	ldr	r3, [pc, #512]	; (800ed50 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 800eb50:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800eb54:	f003 0318 	and.w	r3, r3, #24
 800eb58:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 800eb5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb5c:	2b18      	cmp	r3, #24
 800eb5e:	d862      	bhi.n	800ec26 <HAL_RCCEx_GetPeriphCLKFreq+0x111a>
 800eb60:	a201      	add	r2, pc, #4	; (adr r2, 800eb68 <HAL_RCCEx_GetPeriphCLKFreq+0x105c>)
 800eb62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eb66:	bf00      	nop
 800eb68:	0800ebcd 	.word	0x0800ebcd
 800eb6c:	0800ec27 	.word	0x0800ec27
 800eb70:	0800ec27 	.word	0x0800ec27
 800eb74:	0800ec27 	.word	0x0800ec27
 800eb78:	0800ec27 	.word	0x0800ec27
 800eb7c:	0800ec27 	.word	0x0800ec27
 800eb80:	0800ec27 	.word	0x0800ec27
 800eb84:	0800ec27 	.word	0x0800ec27
 800eb88:	0800ebd5 	.word	0x0800ebd5
 800eb8c:	0800ec27 	.word	0x0800ec27
 800eb90:	0800ec27 	.word	0x0800ec27
 800eb94:	0800ec27 	.word	0x0800ec27
 800eb98:	0800ec27 	.word	0x0800ec27
 800eb9c:	0800ec27 	.word	0x0800ec27
 800eba0:	0800ec27 	.word	0x0800ec27
 800eba4:	0800ec27 	.word	0x0800ec27
 800eba8:	0800ebdd 	.word	0x0800ebdd
 800ebac:	0800ec27 	.word	0x0800ec27
 800ebb0:	0800ec27 	.word	0x0800ec27
 800ebb4:	0800ec27 	.word	0x0800ec27
 800ebb8:	0800ec27 	.word	0x0800ec27
 800ebbc:	0800ec27 	.word	0x0800ec27
 800ebc0:	0800ec27 	.word	0x0800ec27
 800ebc4:	0800ec27 	.word	0x0800ec27
 800ebc8:	0800ebf7 	.word	0x0800ebf7
    {
      case RCC_SPI3CLKSOURCE_PCLK3:

        frequency = HAL_RCC_GetPCLK3Freq();
 800ebcc:	f7fd fcda 	bl	800c584 <HAL_RCC_GetPCLK3Freq>
 800ebd0:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800ebd2:	e0b8      	b.n	800ed46 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI3CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800ebd4:	f7fd fb8c 	bl	800c2f0 <HAL_RCC_GetSysClockFreq>
 800ebd8:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800ebda:	e0b4      	b.n	800ed46 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI3CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800ebdc:	4b5c      	ldr	r3, [pc, #368]	; (800ed50 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 800ebde:	681b      	ldr	r3, [r3, #0]
 800ebe0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ebe4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ebe8:	d102      	bne.n	800ebf0 <HAL_RCCEx_GetPeriphCLKFreq+0x10e4>
        {
          frequency = HSI_VALUE;
 800ebea:	4b5b      	ldr	r3, [pc, #364]	; (800ed58 <HAL_RCCEx_GetPeriphCLKFreq+0x124c>)
 800ebec:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800ebee:	e0aa      	b.n	800ed46 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
          frequency = 0U;
 800ebf0:	2300      	movs	r3, #0
 800ebf2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800ebf4:	e0a7      	b.n	800ed46 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI3CLKSOURCE_MSIK:

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800ebf6:	4b56      	ldr	r3, [pc, #344]	; (800ed50 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 800ebf8:	689b      	ldr	r3, [r3, #8]
 800ebfa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ebfe:	2b00      	cmp	r3, #0
 800ec00:	d005      	beq.n	800ec0e <HAL_RCCEx_GetPeriphCLKFreq+0x1102>
 800ec02:	4b53      	ldr	r3, [pc, #332]	; (800ed50 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 800ec04:	689b      	ldr	r3, [r3, #8]
 800ec06:	0e1b      	lsrs	r3, r3, #24
 800ec08:	f003 030f 	and.w	r3, r3, #15
 800ec0c:	e006      	b.n	800ec1c <HAL_RCCEx_GetPeriphCLKFreq+0x1110>
 800ec0e:	4b50      	ldr	r3, [pc, #320]	; (800ed50 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 800ec10:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800ec14:	041b      	lsls	r3, r3, #16
 800ec16:	0e1b      	lsrs	r3, r3, #24
 800ec18:	f003 030f 	and.w	r3, r3, #15
 800ec1c:	4a4d      	ldr	r2, [pc, #308]	; (800ed54 <HAL_RCCEx_GetPeriphCLKFreq+0x1248>)
 800ec1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ec22:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800ec24:	e08f      	b.n	800ed46 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default:

        frequency = 0U;
 800ec26:	2300      	movs	r3, #0
 800ec28:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800ec2a:	e08c      	b.n	800ed46 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_OSPI)
 800ec2c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ec30:	f102 417c 	add.w	r1, r2, #4227858432	; 0xfc000000
 800ec34:	430b      	orrs	r3, r1
 800ec36:	d14c      	bne.n	800ecd2 <HAL_RCCEx_GetPeriphCLKFreq+0x11c6>
  {
    /* Get the current OSPI kernel source */
    srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 800ec38:	4b45      	ldr	r3, [pc, #276]	; (800ed50 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 800ec3a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800ec3e:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800ec42:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 800ec44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec46:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800ec4a:	d013      	beq.n	800ec74 <HAL_RCCEx_GetPeriphCLKFreq+0x1168>
 800ec4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec4e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800ec52:	d83b      	bhi.n	800eccc <HAL_RCCEx_GetPeriphCLKFreq+0x11c0>
 800ec54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec56:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ec5a:	d013      	beq.n	800ec84 <HAL_RCCEx_GetPeriphCLKFreq+0x1178>
 800ec5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec5e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ec62:	d833      	bhi.n	800eccc <HAL_RCCEx_GetPeriphCLKFreq+0x11c0>
 800ec64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec66:	2b00      	cmp	r3, #0
 800ec68:	d014      	beq.n	800ec94 <HAL_RCCEx_GetPeriphCLKFreq+0x1188>
 800ec6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec6c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ec70:	d014      	beq.n	800ec9c <HAL_RCCEx_GetPeriphCLKFreq+0x1190>
 800ec72:	e02b      	b.n	800eccc <HAL_RCCEx_GetPeriphCLKFreq+0x11c0>
    {
      case RCC_OSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ec74:	f107 0318 	add.w	r3, r7, #24
 800ec78:	4618      	mov	r0, r3
 800ec7a:	f7fe fc7b 	bl	800d574 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 800ec7e:	69fb      	ldr	r3, [r7, #28]
 800ec80:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800ec82:	e060      	b.n	800ed46 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_OSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ec84:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ec88:	4618      	mov	r0, r3
 800ec8a:	f7fe fb0d 	bl	800d2a8 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 800ec8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec90:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800ec92:	e058      	b.n	800ed46 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_OSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800ec94:	f7fd fb2c 	bl	800c2f0 <HAL_RCC_GetSysClockFreq>
 800ec98:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800ec9a:	e054      	b.n	800ed46 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_OSPICLKSOURCE_MSIK:

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800ec9c:	4b2c      	ldr	r3, [pc, #176]	; (800ed50 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 800ec9e:	689b      	ldr	r3, [r3, #8]
 800eca0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800eca4:	2b00      	cmp	r3, #0
 800eca6:	d005      	beq.n	800ecb4 <HAL_RCCEx_GetPeriphCLKFreq+0x11a8>
 800eca8:	4b29      	ldr	r3, [pc, #164]	; (800ed50 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 800ecaa:	689b      	ldr	r3, [r3, #8]
 800ecac:	0e1b      	lsrs	r3, r3, #24
 800ecae:	f003 030f 	and.w	r3, r3, #15
 800ecb2:	e006      	b.n	800ecc2 <HAL_RCCEx_GetPeriphCLKFreq+0x11b6>
 800ecb4:	4b26      	ldr	r3, [pc, #152]	; (800ed50 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 800ecb6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800ecba:	041b      	lsls	r3, r3, #16
 800ecbc:	0e1b      	lsrs	r3, r3, #24
 800ecbe:	f003 030f 	and.w	r3, r3, #15
 800ecc2:	4a24      	ldr	r2, [pc, #144]	; (800ed54 <HAL_RCCEx_GetPeriphCLKFreq+0x1248>)
 800ecc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ecc8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800ecca:	e03c      	b.n	800ed46 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default:

        frequency = 0U;
 800eccc:	2300      	movs	r3, #0
 800ecce:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800ecd0:	e039      	b.n	800ed46 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
        frequency = 0U;
        break;
    }
  }
#endif /* defined(HSPI1) */
  else if (PeriphClk == RCC_PERIPHCLK_DAC1)
 800ecd2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ecd6:	f102 4170 	add.w	r1, r2, #4026531840	; 0xf0000000
 800ecda:	430b      	orrs	r3, r1
 800ecdc:	d131      	bne.n	800ed42 <HAL_RCCEx_GetPeriphCLKFreq+0x1236>
  {
    /* Get the current DAC1 kernel source */
    srcclk = __HAL_RCC_GET_DAC1_SOURCE();
 800ecde:	4b1c      	ldr	r3, [pc, #112]	; (800ed50 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 800ece0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800ece4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ece8:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if LSE is ready and if DAC1 clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSE))
 800ecea:	4b19      	ldr	r3, [pc, #100]	; (800ed50 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 800ecec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800ecf0:	f003 0302 	and.w	r3, r3, #2
 800ecf4:	2b02      	cmp	r3, #2
 800ecf6:	d106      	bne.n	800ed06 <HAL_RCCEx_GetPeriphCLKFreq+0x11fa>
 800ecf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ecfa:	2b00      	cmp	r3, #0
 800ecfc:	d103      	bne.n	800ed06 <HAL_RCCEx_GetPeriphCLKFreq+0x11fa>
    {
      frequency = LSE_VALUE;
 800ecfe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ed02:	637b      	str	r3, [r7, #52]	; 0x34
 800ed04:	e01f      	b.n	800ed46 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Check if LSI is ready and if DAC1 clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSI))
 800ed06:	4b12      	ldr	r3, [pc, #72]	; (800ed50 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 800ed08:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800ed0c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ed10:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ed14:	d112      	bne.n	800ed3c <HAL_RCCEx_GetPeriphCLKFreq+0x1230>
 800ed16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed18:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ed1c:	d10e      	bne.n	800ed3c <HAL_RCCEx_GetPeriphCLKFreq+0x1230>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800ed1e:	4b0c      	ldr	r3, [pc, #48]	; (800ed50 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 800ed20:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800ed24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ed28:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ed2c:	d102      	bne.n	800ed34 <HAL_RCCEx_GetPeriphCLKFreq+0x1228>
      {
        frequency = LSI_VALUE / 128U;
 800ed2e:	23fa      	movs	r3, #250	; 0xfa
 800ed30:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800ed32:	e008      	b.n	800ed46 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      else
      {
        frequency = LSI_VALUE;
 800ed34:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800ed38:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800ed3a:	e004      	b.n	800ed46 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
    }
    /* Clock not enabled for DAC1*/
    else
    {
      frequency = 0U;
 800ed3c:	2300      	movs	r3, #0
 800ed3e:	637b      	str	r3, [r7, #52]	; 0x34
 800ed40:	e001      	b.n	800ed46 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }

  }
  else
  {
    frequency = 0;
 800ed42:	2300      	movs	r3, #0
 800ed44:	637b      	str	r3, [r7, #52]	; 0x34
  }
  return (frequency);
 800ed46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800ed48:	4618      	mov	r0, r3
 800ed4a:	3738      	adds	r7, #56	; 0x38
 800ed4c:	46bd      	mov	sp, r7
 800ed4e:	bd80      	pop	{r7, pc}
 800ed50:	46020c00 	.word	0x46020c00
 800ed54:	0801502c 	.word	0x0801502c
 800ed58:	00f42400 	.word	0x00f42400

0800ed5c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2)
{
 800ed5c:	b580      	push	{r7, lr}
 800ed5e:	b084      	sub	sp, #16
 800ed60:	af00      	add	r7, sp, #0
 800ed62:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 800ed64:	4b47      	ldr	r3, [pc, #284]	; (800ee84 <RCCEx_PLL2_Config+0x128>)
 800ed66:	681b      	ldr	r3, [r3, #0]
 800ed68:	4a46      	ldr	r2, [pc, #280]	; (800ee84 <RCCEx_PLL2_Config+0x128>)
 800ed6a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800ed6e:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800ed70:	f7f7 fde6 	bl	8006940 <HAL_GetTick>
 800ed74:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800ed76:	e008      	b.n	800ed8a <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800ed78:	f7f7 fde2 	bl	8006940 <HAL_GetTick>
 800ed7c:	4602      	mov	r2, r0
 800ed7e:	68fb      	ldr	r3, [r7, #12]
 800ed80:	1ad3      	subs	r3, r2, r3
 800ed82:	2b02      	cmp	r3, #2
 800ed84:	d901      	bls.n	800ed8a <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800ed86:	2303      	movs	r3, #3
 800ed88:	e077      	b.n	800ee7a <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800ed8a:	4b3e      	ldr	r3, [pc, #248]	; (800ee84 <RCCEx_PLL2_Config+0x128>)
 800ed8c:	681b      	ldr	r3, [r3, #0]
 800ed8e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ed92:	2b00      	cmp	r3, #0
 800ed94:	d1f0      	bne.n	800ed78 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 800ed96:	4b3b      	ldr	r3, [pc, #236]	; (800ee84 <RCCEx_PLL2_Config+0x128>)
 800ed98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ed9a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800ed9e:	f023 0303 	bic.w	r3, r3, #3
 800eda2:	687a      	ldr	r2, [r7, #4]
 800eda4:	6811      	ldr	r1, [r2, #0]
 800eda6:	687a      	ldr	r2, [r7, #4]
 800eda8:	6852      	ldr	r2, [r2, #4]
 800edaa:	3a01      	subs	r2, #1
 800edac:	0212      	lsls	r2, r2, #8
 800edae:	430a      	orrs	r2, r1
 800edb0:	4934      	ldr	r1, [pc, #208]	; (800ee84 <RCCEx_PLL2_Config+0x128>)
 800edb2:	4313      	orrs	r3, r2
 800edb4:	62cb      	str	r3, [r1, #44]	; 0x2c
 800edb6:	4b33      	ldr	r3, [pc, #204]	; (800ee84 <RCCEx_PLL2_Config+0x128>)
 800edb8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800edba:	4b33      	ldr	r3, [pc, #204]	; (800ee88 <RCCEx_PLL2_Config+0x12c>)
 800edbc:	4013      	ands	r3, r2
 800edbe:	687a      	ldr	r2, [r7, #4]
 800edc0:	6892      	ldr	r2, [r2, #8]
 800edc2:	3a01      	subs	r2, #1
 800edc4:	f3c2 0108 	ubfx	r1, r2, #0, #9
 800edc8:	687a      	ldr	r2, [r7, #4]
 800edca:	68d2      	ldr	r2, [r2, #12]
 800edcc:	3a01      	subs	r2, #1
 800edce:	0252      	lsls	r2, r2, #9
 800edd0:	b292      	uxth	r2, r2
 800edd2:	4311      	orrs	r1, r2
 800edd4:	687a      	ldr	r2, [r7, #4]
 800edd6:	6912      	ldr	r2, [r2, #16]
 800edd8:	3a01      	subs	r2, #1
 800edda:	0412      	lsls	r2, r2, #16
 800eddc:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 800ede0:	4311      	orrs	r1, r2
 800ede2:	687a      	ldr	r2, [r7, #4]
 800ede4:	6952      	ldr	r2, [r2, #20]
 800ede6:	3a01      	subs	r2, #1
 800ede8:	0612      	lsls	r2, r2, #24
 800edea:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 800edee:	430a      	orrs	r2, r1
 800edf0:	4924      	ldr	r1, [pc, #144]	; (800ee84 <RCCEx_PLL2_Config+0x128>)
 800edf2:	4313      	orrs	r3, r2
 800edf4:	63cb      	str	r3, [r1, #60]	; 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 800edf6:	4b23      	ldr	r3, [pc, #140]	; (800ee84 <RCCEx_PLL2_Config+0x128>)
 800edf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800edfa:	f023 020c 	bic.w	r2, r3, #12
 800edfe:	687b      	ldr	r3, [r7, #4]
 800ee00:	699b      	ldr	r3, [r3, #24]
 800ee02:	4920      	ldr	r1, [pc, #128]	; (800ee84 <RCCEx_PLL2_Config+0x128>)
 800ee04:	4313      	orrs	r3, r2
 800ee06:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 800ee08:	4b1e      	ldr	r3, [pc, #120]	; (800ee84 <RCCEx_PLL2_Config+0x128>)
 800ee0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ee0c:	687b      	ldr	r3, [r7, #4]
 800ee0e:	6a1b      	ldr	r3, [r3, #32]
 800ee10:	491c      	ldr	r1, [pc, #112]	; (800ee84 <RCCEx_PLL2_Config+0x128>)
 800ee12:	4313      	orrs	r3, r2
 800ee14:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 800ee16:	4b1b      	ldr	r3, [pc, #108]	; (800ee84 <RCCEx_PLL2_Config+0x128>)
 800ee18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ee1a:	4a1a      	ldr	r2, [pc, #104]	; (800ee84 <RCCEx_PLL2_Config+0x128>)
 800ee1c:	f023 0310 	bic.w	r3, r3, #16
 800ee20:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800ee22:	4b18      	ldr	r3, [pc, #96]	; (800ee84 <RCCEx_PLL2_Config+0x128>)
 800ee24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ee26:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800ee2a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800ee2e:	687a      	ldr	r2, [r7, #4]
 800ee30:	69d2      	ldr	r2, [r2, #28]
 800ee32:	00d2      	lsls	r2, r2, #3
 800ee34:	4913      	ldr	r1, [pc, #76]	; (800ee84 <RCCEx_PLL2_Config+0x128>)
 800ee36:	4313      	orrs	r3, r2
 800ee38:	640b      	str	r3, [r1, #64]	; 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 800ee3a:	4b12      	ldr	r3, [pc, #72]	; (800ee84 <RCCEx_PLL2_Config+0x128>)
 800ee3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ee3e:	4a11      	ldr	r2, [pc, #68]	; (800ee84 <RCCEx_PLL2_Config+0x128>)
 800ee40:	f043 0310 	orr.w	r3, r3, #16
 800ee44:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 800ee46:	4b0f      	ldr	r3, [pc, #60]	; (800ee84 <RCCEx_PLL2_Config+0x128>)
 800ee48:	681b      	ldr	r3, [r3, #0]
 800ee4a:	4a0e      	ldr	r2, [pc, #56]	; (800ee84 <RCCEx_PLL2_Config+0x128>)
 800ee4c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800ee50:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800ee52:	f7f7 fd75 	bl	8006940 <HAL_GetTick>
 800ee56:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800ee58:	e008      	b.n	800ee6c <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800ee5a:	f7f7 fd71 	bl	8006940 <HAL_GetTick>
 800ee5e:	4602      	mov	r2, r0
 800ee60:	68fb      	ldr	r3, [r7, #12]
 800ee62:	1ad3      	subs	r3, r2, r3
 800ee64:	2b02      	cmp	r3, #2
 800ee66:	d901      	bls.n	800ee6c <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 800ee68:	2303      	movs	r3, #3
 800ee6a:	e006      	b.n	800ee7a <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800ee6c:	4b05      	ldr	r3, [pc, #20]	; (800ee84 <RCCEx_PLL2_Config+0x128>)
 800ee6e:	681b      	ldr	r3, [r3, #0]
 800ee70:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ee74:	2b00      	cmp	r3, #0
 800ee76:	d0f0      	beq.n	800ee5a <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 800ee78:	2300      	movs	r3, #0

}
 800ee7a:	4618      	mov	r0, r3
 800ee7c:	3710      	adds	r7, #16
 800ee7e:	46bd      	mov	sp, r7
 800ee80:	bd80      	pop	{r7, pc}
 800ee82:	bf00      	nop
 800ee84:	46020c00 	.word	0x46020c00
 800ee88:	80800000 	.word	0x80800000

0800ee8c <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3)
{
 800ee8c:	b580      	push	{r7, lr}
 800ee8e:	b084      	sub	sp, #16
 800ee90:	af00      	add	r7, sp, #0
 800ee92:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 800ee94:	4b47      	ldr	r3, [pc, #284]	; (800efb4 <RCCEx_PLL3_Config+0x128>)
 800ee96:	681b      	ldr	r3, [r3, #0]
 800ee98:	4a46      	ldr	r2, [pc, #280]	; (800efb4 <RCCEx_PLL3_Config+0x128>)
 800ee9a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ee9e:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800eea0:	f7f7 fd4e 	bl	8006940 <HAL_GetTick>
 800eea4:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800eea6:	e008      	b.n	800eeba <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800eea8:	f7f7 fd4a 	bl	8006940 <HAL_GetTick>
 800eeac:	4602      	mov	r2, r0
 800eeae:	68fb      	ldr	r3, [r7, #12]
 800eeb0:	1ad3      	subs	r3, r2, r3
 800eeb2:	2b02      	cmp	r3, #2
 800eeb4:	d901      	bls.n	800eeba <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800eeb6:	2303      	movs	r3, #3
 800eeb8:	e077      	b.n	800efaa <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800eeba:	4b3e      	ldr	r3, [pc, #248]	; (800efb4 <RCCEx_PLL3_Config+0x128>)
 800eebc:	681b      	ldr	r3, [r3, #0]
 800eebe:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800eec2:	2b00      	cmp	r3, #0
 800eec4:	d1f0      	bne.n	800eea8 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 800eec6:	4b3b      	ldr	r3, [pc, #236]	; (800efb4 <RCCEx_PLL3_Config+0x128>)
 800eec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800eeca:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800eece:	f023 0303 	bic.w	r3, r3, #3
 800eed2:	687a      	ldr	r2, [r7, #4]
 800eed4:	6811      	ldr	r1, [r2, #0]
 800eed6:	687a      	ldr	r2, [r7, #4]
 800eed8:	6852      	ldr	r2, [r2, #4]
 800eeda:	3a01      	subs	r2, #1
 800eedc:	0212      	lsls	r2, r2, #8
 800eede:	430a      	orrs	r2, r1
 800eee0:	4934      	ldr	r1, [pc, #208]	; (800efb4 <RCCEx_PLL3_Config+0x128>)
 800eee2:	4313      	orrs	r3, r2
 800eee4:	630b      	str	r3, [r1, #48]	; 0x30
 800eee6:	4b33      	ldr	r3, [pc, #204]	; (800efb4 <RCCEx_PLL3_Config+0x128>)
 800eee8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800eeea:	4b33      	ldr	r3, [pc, #204]	; (800efb8 <RCCEx_PLL3_Config+0x12c>)
 800eeec:	4013      	ands	r3, r2
 800eeee:	687a      	ldr	r2, [r7, #4]
 800eef0:	6892      	ldr	r2, [r2, #8]
 800eef2:	3a01      	subs	r2, #1
 800eef4:	f3c2 0108 	ubfx	r1, r2, #0, #9
 800eef8:	687a      	ldr	r2, [r7, #4]
 800eefa:	68d2      	ldr	r2, [r2, #12]
 800eefc:	3a01      	subs	r2, #1
 800eefe:	0252      	lsls	r2, r2, #9
 800ef00:	b292      	uxth	r2, r2
 800ef02:	4311      	orrs	r1, r2
 800ef04:	687a      	ldr	r2, [r7, #4]
 800ef06:	6912      	ldr	r2, [r2, #16]
 800ef08:	3a01      	subs	r2, #1
 800ef0a:	0412      	lsls	r2, r2, #16
 800ef0c:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 800ef10:	4311      	orrs	r1, r2
 800ef12:	687a      	ldr	r2, [r7, #4]
 800ef14:	6952      	ldr	r2, [r2, #20]
 800ef16:	3a01      	subs	r2, #1
 800ef18:	0612      	lsls	r2, r2, #24
 800ef1a:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 800ef1e:	430a      	orrs	r2, r1
 800ef20:	4924      	ldr	r1, [pc, #144]	; (800efb4 <RCCEx_PLL3_Config+0x128>)
 800ef22:	4313      	orrs	r3, r2
 800ef24:	644b      	str	r3, [r1, #68]	; 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 800ef26:	4b23      	ldr	r3, [pc, #140]	; (800efb4 <RCCEx_PLL3_Config+0x128>)
 800ef28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ef2a:	f023 020c 	bic.w	r2, r3, #12
 800ef2e:	687b      	ldr	r3, [r7, #4]
 800ef30:	699b      	ldr	r3, [r3, #24]
 800ef32:	4920      	ldr	r1, [pc, #128]	; (800efb4 <RCCEx_PLL3_Config+0x128>)
 800ef34:	4313      	orrs	r3, r2
 800ef36:	630b      	str	r3, [r1, #48]	; 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 800ef38:	4b1e      	ldr	r3, [pc, #120]	; (800efb4 <RCCEx_PLL3_Config+0x128>)
 800ef3a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ef3c:	687b      	ldr	r3, [r7, #4]
 800ef3e:	6a1b      	ldr	r3, [r3, #32]
 800ef40:	491c      	ldr	r1, [pc, #112]	; (800efb4 <RCCEx_PLL3_Config+0x128>)
 800ef42:	4313      	orrs	r3, r2
 800ef44:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 800ef46:	4b1b      	ldr	r3, [pc, #108]	; (800efb4 <RCCEx_PLL3_Config+0x128>)
 800ef48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ef4a:	4a1a      	ldr	r2, [pc, #104]	; (800efb4 <RCCEx_PLL3_Config+0x128>)
 800ef4c:	f023 0310 	bic.w	r3, r3, #16
 800ef50:	6313      	str	r3, [r2, #48]	; 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800ef52:	4b18      	ldr	r3, [pc, #96]	; (800efb4 <RCCEx_PLL3_Config+0x128>)
 800ef54:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ef56:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800ef5a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800ef5e:	687a      	ldr	r2, [r7, #4]
 800ef60:	69d2      	ldr	r2, [r2, #28]
 800ef62:	00d2      	lsls	r2, r2, #3
 800ef64:	4913      	ldr	r1, [pc, #76]	; (800efb4 <RCCEx_PLL3_Config+0x128>)
 800ef66:	4313      	orrs	r3, r2
 800ef68:	648b      	str	r3, [r1, #72]	; 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 800ef6a:	4b12      	ldr	r3, [pc, #72]	; (800efb4 <RCCEx_PLL3_Config+0x128>)
 800ef6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ef6e:	4a11      	ldr	r2, [pc, #68]	; (800efb4 <RCCEx_PLL3_Config+0x128>)
 800ef70:	f043 0310 	orr.w	r3, r3, #16
 800ef74:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 800ef76:	4b0f      	ldr	r3, [pc, #60]	; (800efb4 <RCCEx_PLL3_Config+0x128>)
 800ef78:	681b      	ldr	r3, [r3, #0]
 800ef7a:	4a0e      	ldr	r2, [pc, #56]	; (800efb4 <RCCEx_PLL3_Config+0x128>)
 800ef7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ef80:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800ef82:	f7f7 fcdd 	bl	8006940 <HAL_GetTick>
 800ef86:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800ef88:	e008      	b.n	800ef9c <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800ef8a:	f7f7 fcd9 	bl	8006940 <HAL_GetTick>
 800ef8e:	4602      	mov	r2, r0
 800ef90:	68fb      	ldr	r3, [r7, #12]
 800ef92:	1ad3      	subs	r3, r2, r3
 800ef94:	2b02      	cmp	r3, #2
 800ef96:	d901      	bls.n	800ef9c <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 800ef98:	2303      	movs	r3, #3
 800ef9a:	e006      	b.n	800efaa <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800ef9c:	4b05      	ldr	r3, [pc, #20]	; (800efb4 <RCCEx_PLL3_Config+0x128>)
 800ef9e:	681b      	ldr	r3, [r3, #0]
 800efa0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800efa4:	2b00      	cmp	r3, #0
 800efa6:	d0f0      	beq.n	800ef8a <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 800efa8:	2300      	movs	r3, #0
}
 800efaa:	4618      	mov	r0, r3
 800efac:	3710      	adds	r7, #16
 800efae:	46bd      	mov	sp, r7
 800efb0:	bd80      	pop	{r7, pc}
 800efb2:	bf00      	nop
 800efb4:	46020c00 	.word	0x46020c00
 800efb8:	80800000 	.word	0x80800000

0800efbc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800efbc:	b580      	push	{r7, lr}
 800efbe:	b082      	sub	sp, #8
 800efc0:	af00      	add	r7, sp, #0
 800efc2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800efc4:	687b      	ldr	r3, [r7, #4]
 800efc6:	2b00      	cmp	r3, #0
 800efc8:	d101      	bne.n	800efce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800efca:	2301      	movs	r3, #1
 800efcc:	e049      	b.n	800f062 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800efce:	687b      	ldr	r3, [r7, #4]
 800efd0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800efd4:	b2db      	uxtb	r3, r3
 800efd6:	2b00      	cmp	r3, #0
 800efd8:	d106      	bne.n	800efe8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800efda:	687b      	ldr	r3, [r7, #4]
 800efdc:	2200      	movs	r2, #0
 800efde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800efe2:	6878      	ldr	r0, [r7, #4]
 800efe4:	f7f7 fb64 	bl	80066b0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800efe8:	687b      	ldr	r3, [r7, #4]
 800efea:	2202      	movs	r2, #2
 800efec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800eff0:	687b      	ldr	r3, [r7, #4]
 800eff2:	681a      	ldr	r2, [r3, #0]
 800eff4:	687b      	ldr	r3, [r7, #4]
 800eff6:	3304      	adds	r3, #4
 800eff8:	4619      	mov	r1, r3
 800effa:	4610      	mov	r0, r2
 800effc:	f000 fa7e 	bl	800f4fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800f000:	687b      	ldr	r3, [r7, #4]
 800f002:	2201      	movs	r2, #1
 800f004:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f008:	687b      	ldr	r3, [r7, #4]
 800f00a:	2201      	movs	r2, #1
 800f00c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800f010:	687b      	ldr	r3, [r7, #4]
 800f012:	2201      	movs	r2, #1
 800f014:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800f018:	687b      	ldr	r3, [r7, #4]
 800f01a:	2201      	movs	r2, #1
 800f01c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800f020:	687b      	ldr	r3, [r7, #4]
 800f022:	2201      	movs	r2, #1
 800f024:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800f028:	687b      	ldr	r3, [r7, #4]
 800f02a:	2201      	movs	r2, #1
 800f02c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800f030:	687b      	ldr	r3, [r7, #4]
 800f032:	2201      	movs	r2, #1
 800f034:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f038:	687b      	ldr	r3, [r7, #4]
 800f03a:	2201      	movs	r2, #1
 800f03c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f040:	687b      	ldr	r3, [r7, #4]
 800f042:	2201      	movs	r2, #1
 800f044:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f048:	687b      	ldr	r3, [r7, #4]
 800f04a:	2201      	movs	r2, #1
 800f04c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800f050:	687b      	ldr	r3, [r7, #4]
 800f052:	2201      	movs	r2, #1
 800f054:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800f058:	687b      	ldr	r3, [r7, #4]
 800f05a:	2201      	movs	r2, #1
 800f05c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800f060:	2300      	movs	r3, #0
}
 800f062:	4618      	mov	r0, r3
 800f064:	3708      	adds	r7, #8
 800f066:	46bd      	mov	sp, r7
 800f068:	bd80      	pop	{r7, pc}
	...

0800f06c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800f06c:	b480      	push	{r7}
 800f06e:	b085      	sub	sp, #20
 800f070:	af00      	add	r7, sp, #0
 800f072:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800f074:	687b      	ldr	r3, [r7, #4]
 800f076:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f07a:	b2db      	uxtb	r3, r3
 800f07c:	2b01      	cmp	r3, #1
 800f07e:	d001      	beq.n	800f084 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800f080:	2301      	movs	r3, #1
 800f082:	e072      	b.n	800f16a <HAL_TIM_Base_Start_IT+0xfe>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f084:	687b      	ldr	r3, [r7, #4]
 800f086:	2202      	movs	r2, #2
 800f088:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800f08c:	687b      	ldr	r3, [r7, #4]
 800f08e:	681b      	ldr	r3, [r3, #0]
 800f090:	68da      	ldr	r2, [r3, #12]
 800f092:	687b      	ldr	r3, [r7, #4]
 800f094:	681b      	ldr	r3, [r3, #0]
 800f096:	f042 0201 	orr.w	r2, r2, #1
 800f09a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f09c:	687b      	ldr	r3, [r7, #4]
 800f09e:	681b      	ldr	r3, [r3, #0]
 800f0a0:	4a35      	ldr	r2, [pc, #212]	; (800f178 <HAL_TIM_Base_Start_IT+0x10c>)
 800f0a2:	4293      	cmp	r3, r2
 800f0a4:	d040      	beq.n	800f128 <HAL_TIM_Base_Start_IT+0xbc>
 800f0a6:	687b      	ldr	r3, [r7, #4]
 800f0a8:	681b      	ldr	r3, [r3, #0]
 800f0aa:	4a34      	ldr	r2, [pc, #208]	; (800f17c <HAL_TIM_Base_Start_IT+0x110>)
 800f0ac:	4293      	cmp	r3, r2
 800f0ae:	d03b      	beq.n	800f128 <HAL_TIM_Base_Start_IT+0xbc>
 800f0b0:	687b      	ldr	r3, [r7, #4]
 800f0b2:	681b      	ldr	r3, [r3, #0]
 800f0b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f0b8:	d036      	beq.n	800f128 <HAL_TIM_Base_Start_IT+0xbc>
 800f0ba:	687b      	ldr	r3, [r7, #4]
 800f0bc:	681b      	ldr	r3, [r3, #0]
 800f0be:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800f0c2:	d031      	beq.n	800f128 <HAL_TIM_Base_Start_IT+0xbc>
 800f0c4:	687b      	ldr	r3, [r7, #4]
 800f0c6:	681b      	ldr	r3, [r3, #0]
 800f0c8:	4a2d      	ldr	r2, [pc, #180]	; (800f180 <HAL_TIM_Base_Start_IT+0x114>)
 800f0ca:	4293      	cmp	r3, r2
 800f0cc:	d02c      	beq.n	800f128 <HAL_TIM_Base_Start_IT+0xbc>
 800f0ce:	687b      	ldr	r3, [r7, #4]
 800f0d0:	681b      	ldr	r3, [r3, #0]
 800f0d2:	4a2c      	ldr	r2, [pc, #176]	; (800f184 <HAL_TIM_Base_Start_IT+0x118>)
 800f0d4:	4293      	cmp	r3, r2
 800f0d6:	d027      	beq.n	800f128 <HAL_TIM_Base_Start_IT+0xbc>
 800f0d8:	687b      	ldr	r3, [r7, #4]
 800f0da:	681b      	ldr	r3, [r3, #0]
 800f0dc:	4a2a      	ldr	r2, [pc, #168]	; (800f188 <HAL_TIM_Base_Start_IT+0x11c>)
 800f0de:	4293      	cmp	r3, r2
 800f0e0:	d022      	beq.n	800f128 <HAL_TIM_Base_Start_IT+0xbc>
 800f0e2:	687b      	ldr	r3, [r7, #4]
 800f0e4:	681b      	ldr	r3, [r3, #0]
 800f0e6:	4a29      	ldr	r2, [pc, #164]	; (800f18c <HAL_TIM_Base_Start_IT+0x120>)
 800f0e8:	4293      	cmp	r3, r2
 800f0ea:	d01d      	beq.n	800f128 <HAL_TIM_Base_Start_IT+0xbc>
 800f0ec:	687b      	ldr	r3, [r7, #4]
 800f0ee:	681b      	ldr	r3, [r3, #0]
 800f0f0:	4a27      	ldr	r2, [pc, #156]	; (800f190 <HAL_TIM_Base_Start_IT+0x124>)
 800f0f2:	4293      	cmp	r3, r2
 800f0f4:	d018      	beq.n	800f128 <HAL_TIM_Base_Start_IT+0xbc>
 800f0f6:	687b      	ldr	r3, [r7, #4]
 800f0f8:	681b      	ldr	r3, [r3, #0]
 800f0fa:	4a26      	ldr	r2, [pc, #152]	; (800f194 <HAL_TIM_Base_Start_IT+0x128>)
 800f0fc:	4293      	cmp	r3, r2
 800f0fe:	d013      	beq.n	800f128 <HAL_TIM_Base_Start_IT+0xbc>
 800f100:	687b      	ldr	r3, [r7, #4]
 800f102:	681b      	ldr	r3, [r3, #0]
 800f104:	4a24      	ldr	r2, [pc, #144]	; (800f198 <HAL_TIM_Base_Start_IT+0x12c>)
 800f106:	4293      	cmp	r3, r2
 800f108:	d00e      	beq.n	800f128 <HAL_TIM_Base_Start_IT+0xbc>
 800f10a:	687b      	ldr	r3, [r7, #4]
 800f10c:	681b      	ldr	r3, [r3, #0]
 800f10e:	4a23      	ldr	r2, [pc, #140]	; (800f19c <HAL_TIM_Base_Start_IT+0x130>)
 800f110:	4293      	cmp	r3, r2
 800f112:	d009      	beq.n	800f128 <HAL_TIM_Base_Start_IT+0xbc>
 800f114:	687b      	ldr	r3, [r7, #4]
 800f116:	681b      	ldr	r3, [r3, #0]
 800f118:	4a21      	ldr	r2, [pc, #132]	; (800f1a0 <HAL_TIM_Base_Start_IT+0x134>)
 800f11a:	4293      	cmp	r3, r2
 800f11c:	d004      	beq.n	800f128 <HAL_TIM_Base_Start_IT+0xbc>
 800f11e:	687b      	ldr	r3, [r7, #4]
 800f120:	681b      	ldr	r3, [r3, #0]
 800f122:	4a20      	ldr	r2, [pc, #128]	; (800f1a4 <HAL_TIM_Base_Start_IT+0x138>)
 800f124:	4293      	cmp	r3, r2
 800f126:	d115      	bne.n	800f154 <HAL_TIM_Base_Start_IT+0xe8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800f128:	687b      	ldr	r3, [r7, #4]
 800f12a:	681b      	ldr	r3, [r3, #0]
 800f12c:	689a      	ldr	r2, [r3, #8]
 800f12e:	4b1e      	ldr	r3, [pc, #120]	; (800f1a8 <HAL_TIM_Base_Start_IT+0x13c>)
 800f130:	4013      	ands	r3, r2
 800f132:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f134:	68fb      	ldr	r3, [r7, #12]
 800f136:	2b06      	cmp	r3, #6
 800f138:	d015      	beq.n	800f166 <HAL_TIM_Base_Start_IT+0xfa>
 800f13a:	68fb      	ldr	r3, [r7, #12]
 800f13c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f140:	d011      	beq.n	800f166 <HAL_TIM_Base_Start_IT+0xfa>
    {
      __HAL_TIM_ENABLE(htim);
 800f142:	687b      	ldr	r3, [r7, #4]
 800f144:	681b      	ldr	r3, [r3, #0]
 800f146:	681a      	ldr	r2, [r3, #0]
 800f148:	687b      	ldr	r3, [r7, #4]
 800f14a:	681b      	ldr	r3, [r3, #0]
 800f14c:	f042 0201 	orr.w	r2, r2, #1
 800f150:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f152:	e008      	b.n	800f166 <HAL_TIM_Base_Start_IT+0xfa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800f154:	687b      	ldr	r3, [r7, #4]
 800f156:	681b      	ldr	r3, [r3, #0]
 800f158:	681a      	ldr	r2, [r3, #0]
 800f15a:	687b      	ldr	r3, [r7, #4]
 800f15c:	681b      	ldr	r3, [r3, #0]
 800f15e:	f042 0201 	orr.w	r2, r2, #1
 800f162:	601a      	str	r2, [r3, #0]
 800f164:	e000      	b.n	800f168 <HAL_TIM_Base_Start_IT+0xfc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f166:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800f168:	2300      	movs	r3, #0
}
 800f16a:	4618      	mov	r0, r3
 800f16c:	3714      	adds	r7, #20
 800f16e:	46bd      	mov	sp, r7
 800f170:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f174:	4770      	bx	lr
 800f176:	bf00      	nop
 800f178:	40012c00 	.word	0x40012c00
 800f17c:	50012c00 	.word	0x50012c00
 800f180:	40000400 	.word	0x40000400
 800f184:	50000400 	.word	0x50000400
 800f188:	40000800 	.word	0x40000800
 800f18c:	50000800 	.word	0x50000800
 800f190:	40000c00 	.word	0x40000c00
 800f194:	50000c00 	.word	0x50000c00
 800f198:	40013400 	.word	0x40013400
 800f19c:	50013400 	.word	0x50013400
 800f1a0:	40014000 	.word	0x40014000
 800f1a4:	50014000 	.word	0x50014000
 800f1a8:	00010007 	.word	0x00010007

0800f1ac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800f1ac:	b580      	push	{r7, lr}
 800f1ae:	b082      	sub	sp, #8
 800f1b0:	af00      	add	r7, sp, #0
 800f1b2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800f1b4:	687b      	ldr	r3, [r7, #4]
 800f1b6:	681b      	ldr	r3, [r3, #0]
 800f1b8:	691b      	ldr	r3, [r3, #16]
 800f1ba:	f003 0302 	and.w	r3, r3, #2
 800f1be:	2b02      	cmp	r3, #2
 800f1c0:	d122      	bne.n	800f208 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800f1c2:	687b      	ldr	r3, [r7, #4]
 800f1c4:	681b      	ldr	r3, [r3, #0]
 800f1c6:	68db      	ldr	r3, [r3, #12]
 800f1c8:	f003 0302 	and.w	r3, r3, #2
 800f1cc:	2b02      	cmp	r3, #2
 800f1ce:	d11b      	bne.n	800f208 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800f1d0:	687b      	ldr	r3, [r7, #4]
 800f1d2:	681b      	ldr	r3, [r3, #0]
 800f1d4:	f06f 0202 	mvn.w	r2, #2
 800f1d8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800f1da:	687b      	ldr	r3, [r7, #4]
 800f1dc:	2201      	movs	r2, #1
 800f1de:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800f1e0:	687b      	ldr	r3, [r7, #4]
 800f1e2:	681b      	ldr	r3, [r3, #0]
 800f1e4:	699b      	ldr	r3, [r3, #24]
 800f1e6:	f003 0303 	and.w	r3, r3, #3
 800f1ea:	2b00      	cmp	r3, #0
 800f1ec:	d003      	beq.n	800f1f6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800f1ee:	6878      	ldr	r0, [r7, #4]
 800f1f0:	f000 f965 	bl	800f4be <HAL_TIM_IC_CaptureCallback>
 800f1f4:	e005      	b.n	800f202 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800f1f6:	6878      	ldr	r0, [r7, #4]
 800f1f8:	f000 f957 	bl	800f4aa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f1fc:	6878      	ldr	r0, [r7, #4]
 800f1fe:	f000 f968 	bl	800f4d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f202:	687b      	ldr	r3, [r7, #4]
 800f204:	2200      	movs	r2, #0
 800f206:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800f208:	687b      	ldr	r3, [r7, #4]
 800f20a:	681b      	ldr	r3, [r3, #0]
 800f20c:	691b      	ldr	r3, [r3, #16]
 800f20e:	f003 0304 	and.w	r3, r3, #4
 800f212:	2b04      	cmp	r3, #4
 800f214:	d122      	bne.n	800f25c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800f216:	687b      	ldr	r3, [r7, #4]
 800f218:	681b      	ldr	r3, [r3, #0]
 800f21a:	68db      	ldr	r3, [r3, #12]
 800f21c:	f003 0304 	and.w	r3, r3, #4
 800f220:	2b04      	cmp	r3, #4
 800f222:	d11b      	bne.n	800f25c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800f224:	687b      	ldr	r3, [r7, #4]
 800f226:	681b      	ldr	r3, [r3, #0]
 800f228:	f06f 0204 	mvn.w	r2, #4
 800f22c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800f22e:	687b      	ldr	r3, [r7, #4]
 800f230:	2202      	movs	r2, #2
 800f232:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800f234:	687b      	ldr	r3, [r7, #4]
 800f236:	681b      	ldr	r3, [r3, #0]
 800f238:	699b      	ldr	r3, [r3, #24]
 800f23a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800f23e:	2b00      	cmp	r3, #0
 800f240:	d003      	beq.n	800f24a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f242:	6878      	ldr	r0, [r7, #4]
 800f244:	f000 f93b 	bl	800f4be <HAL_TIM_IC_CaptureCallback>
 800f248:	e005      	b.n	800f256 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f24a:	6878      	ldr	r0, [r7, #4]
 800f24c:	f000 f92d 	bl	800f4aa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f250:	6878      	ldr	r0, [r7, #4]
 800f252:	f000 f93e 	bl	800f4d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f256:	687b      	ldr	r3, [r7, #4]
 800f258:	2200      	movs	r2, #0
 800f25a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800f25c:	687b      	ldr	r3, [r7, #4]
 800f25e:	681b      	ldr	r3, [r3, #0]
 800f260:	691b      	ldr	r3, [r3, #16]
 800f262:	f003 0308 	and.w	r3, r3, #8
 800f266:	2b08      	cmp	r3, #8
 800f268:	d122      	bne.n	800f2b0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800f26a:	687b      	ldr	r3, [r7, #4]
 800f26c:	681b      	ldr	r3, [r3, #0]
 800f26e:	68db      	ldr	r3, [r3, #12]
 800f270:	f003 0308 	and.w	r3, r3, #8
 800f274:	2b08      	cmp	r3, #8
 800f276:	d11b      	bne.n	800f2b0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800f278:	687b      	ldr	r3, [r7, #4]
 800f27a:	681b      	ldr	r3, [r3, #0]
 800f27c:	f06f 0208 	mvn.w	r2, #8
 800f280:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800f282:	687b      	ldr	r3, [r7, #4]
 800f284:	2204      	movs	r2, #4
 800f286:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800f288:	687b      	ldr	r3, [r7, #4]
 800f28a:	681b      	ldr	r3, [r3, #0]
 800f28c:	69db      	ldr	r3, [r3, #28]
 800f28e:	f003 0303 	and.w	r3, r3, #3
 800f292:	2b00      	cmp	r3, #0
 800f294:	d003      	beq.n	800f29e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f296:	6878      	ldr	r0, [r7, #4]
 800f298:	f000 f911 	bl	800f4be <HAL_TIM_IC_CaptureCallback>
 800f29c:	e005      	b.n	800f2aa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f29e:	6878      	ldr	r0, [r7, #4]
 800f2a0:	f000 f903 	bl	800f4aa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f2a4:	6878      	ldr	r0, [r7, #4]
 800f2a6:	f000 f914 	bl	800f4d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f2aa:	687b      	ldr	r3, [r7, #4]
 800f2ac:	2200      	movs	r2, #0
 800f2ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800f2b0:	687b      	ldr	r3, [r7, #4]
 800f2b2:	681b      	ldr	r3, [r3, #0]
 800f2b4:	691b      	ldr	r3, [r3, #16]
 800f2b6:	f003 0310 	and.w	r3, r3, #16
 800f2ba:	2b10      	cmp	r3, #16
 800f2bc:	d122      	bne.n	800f304 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800f2be:	687b      	ldr	r3, [r7, #4]
 800f2c0:	681b      	ldr	r3, [r3, #0]
 800f2c2:	68db      	ldr	r3, [r3, #12]
 800f2c4:	f003 0310 	and.w	r3, r3, #16
 800f2c8:	2b10      	cmp	r3, #16
 800f2ca:	d11b      	bne.n	800f304 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800f2cc:	687b      	ldr	r3, [r7, #4]
 800f2ce:	681b      	ldr	r3, [r3, #0]
 800f2d0:	f06f 0210 	mvn.w	r2, #16
 800f2d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800f2d6:	687b      	ldr	r3, [r7, #4]
 800f2d8:	2208      	movs	r2, #8
 800f2da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800f2dc:	687b      	ldr	r3, [r7, #4]
 800f2de:	681b      	ldr	r3, [r3, #0]
 800f2e0:	69db      	ldr	r3, [r3, #28]
 800f2e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800f2e6:	2b00      	cmp	r3, #0
 800f2e8:	d003      	beq.n	800f2f2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f2ea:	6878      	ldr	r0, [r7, #4]
 800f2ec:	f000 f8e7 	bl	800f4be <HAL_TIM_IC_CaptureCallback>
 800f2f0:	e005      	b.n	800f2fe <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f2f2:	6878      	ldr	r0, [r7, #4]
 800f2f4:	f000 f8d9 	bl	800f4aa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f2f8:	6878      	ldr	r0, [r7, #4]
 800f2fa:	f000 f8ea 	bl	800f4d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f2fe:	687b      	ldr	r3, [r7, #4]
 800f300:	2200      	movs	r2, #0
 800f302:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800f304:	687b      	ldr	r3, [r7, #4]
 800f306:	681b      	ldr	r3, [r3, #0]
 800f308:	691b      	ldr	r3, [r3, #16]
 800f30a:	f003 0301 	and.w	r3, r3, #1
 800f30e:	2b01      	cmp	r3, #1
 800f310:	d10e      	bne.n	800f330 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800f312:	687b      	ldr	r3, [r7, #4]
 800f314:	681b      	ldr	r3, [r3, #0]
 800f316:	68db      	ldr	r3, [r3, #12]
 800f318:	f003 0301 	and.w	r3, r3, #1
 800f31c:	2b01      	cmp	r3, #1
 800f31e:	d107      	bne.n	800f330 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800f320:	687b      	ldr	r3, [r7, #4]
 800f322:	681b      	ldr	r3, [r3, #0]
 800f324:	f06f 0201 	mvn.w	r2, #1
 800f328:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800f32a:	6878      	ldr	r0, [r7, #4]
 800f32c:	f7f6 fd4c 	bl	8005dc8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800f330:	687b      	ldr	r3, [r7, #4]
 800f332:	681b      	ldr	r3, [r3, #0]
 800f334:	691b      	ldr	r3, [r3, #16]
 800f336:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f33a:	2b80      	cmp	r3, #128	; 0x80
 800f33c:	d10e      	bne.n	800f35c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800f33e:	687b      	ldr	r3, [r7, #4]
 800f340:	681b      	ldr	r3, [r3, #0]
 800f342:	68db      	ldr	r3, [r3, #12]
 800f344:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f348:	2b80      	cmp	r3, #128	; 0x80
 800f34a:	d107      	bne.n	800f35c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800f34c:	687b      	ldr	r3, [r7, #4]
 800f34e:	681b      	ldr	r3, [r3, #0]
 800f350:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800f354:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800f356:	6878      	ldr	r0, [r7, #4]
 800f358:	f000 fa96 	bl	800f888 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800f35c:	687b      	ldr	r3, [r7, #4]
 800f35e:	681b      	ldr	r3, [r3, #0]
 800f360:	691b      	ldr	r3, [r3, #16]
 800f362:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f366:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f36a:	d10e      	bne.n	800f38a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800f36c:	687b      	ldr	r3, [r7, #4]
 800f36e:	681b      	ldr	r3, [r3, #0]
 800f370:	68db      	ldr	r3, [r3, #12]
 800f372:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f376:	2b80      	cmp	r3, #128	; 0x80
 800f378:	d107      	bne.n	800f38a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800f37a:	687b      	ldr	r3, [r7, #4]
 800f37c:	681b      	ldr	r3, [r3, #0]
 800f37e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800f382:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800f384:	6878      	ldr	r0, [r7, #4]
 800f386:	f000 fa89 	bl	800f89c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800f38a:	687b      	ldr	r3, [r7, #4]
 800f38c:	681b      	ldr	r3, [r3, #0]
 800f38e:	691b      	ldr	r3, [r3, #16]
 800f390:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f394:	2b40      	cmp	r3, #64	; 0x40
 800f396:	d10e      	bne.n	800f3b6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800f398:	687b      	ldr	r3, [r7, #4]
 800f39a:	681b      	ldr	r3, [r3, #0]
 800f39c:	68db      	ldr	r3, [r3, #12]
 800f39e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f3a2:	2b40      	cmp	r3, #64	; 0x40
 800f3a4:	d107      	bne.n	800f3b6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800f3a6:	687b      	ldr	r3, [r7, #4]
 800f3a8:	681b      	ldr	r3, [r3, #0]
 800f3aa:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800f3ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800f3b0:	6878      	ldr	r0, [r7, #4]
 800f3b2:	f000 f898 	bl	800f4e6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800f3b6:	687b      	ldr	r3, [r7, #4]
 800f3b8:	681b      	ldr	r3, [r3, #0]
 800f3ba:	691b      	ldr	r3, [r3, #16]
 800f3bc:	f003 0320 	and.w	r3, r3, #32
 800f3c0:	2b20      	cmp	r3, #32
 800f3c2:	d10e      	bne.n	800f3e2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800f3c4:	687b      	ldr	r3, [r7, #4]
 800f3c6:	681b      	ldr	r3, [r3, #0]
 800f3c8:	68db      	ldr	r3, [r3, #12]
 800f3ca:	f003 0320 	and.w	r3, r3, #32
 800f3ce:	2b20      	cmp	r3, #32
 800f3d0:	d107      	bne.n	800f3e2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800f3d2:	687b      	ldr	r3, [r7, #4]
 800f3d4:	681b      	ldr	r3, [r3, #0]
 800f3d6:	f06f 0220 	mvn.w	r2, #32
 800f3da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800f3dc:	6878      	ldr	r0, [r7, #4]
 800f3de:	f000 fa49 	bl	800f874 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 800f3e2:	687b      	ldr	r3, [r7, #4]
 800f3e4:	681b      	ldr	r3, [r3, #0]
 800f3e6:	691b      	ldr	r3, [r3, #16]
 800f3e8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800f3ec:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f3f0:	d10f      	bne.n	800f412 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 800f3f2:	687b      	ldr	r3, [r7, #4]
 800f3f4:	681b      	ldr	r3, [r3, #0]
 800f3f6:	68db      	ldr	r3, [r3, #12]
 800f3f8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800f3fc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f400:	d107      	bne.n	800f412 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 800f402:	687b      	ldr	r3, [r7, #4]
 800f404:	681b      	ldr	r3, [r3, #0]
 800f406:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 800f40a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800f40c:	6878      	ldr	r0, [r7, #4]
 800f40e:	f000 fa4f 	bl	800f8b0 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 800f412:	687b      	ldr	r3, [r7, #4]
 800f414:	681b      	ldr	r3, [r3, #0]
 800f416:	691b      	ldr	r3, [r3, #16]
 800f418:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800f41c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800f420:	d10f      	bne.n	800f442 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 800f422:	687b      	ldr	r3, [r7, #4]
 800f424:	681b      	ldr	r3, [r3, #0]
 800f426:	68db      	ldr	r3, [r3, #12]
 800f428:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800f42c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800f430:	d107      	bne.n	800f442 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 800f432:	687b      	ldr	r3, [r7, #4]
 800f434:	681b      	ldr	r3, [r3, #0]
 800f436:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 800f43a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800f43c:	6878      	ldr	r0, [r7, #4]
 800f43e:	f000 fa41 	bl	800f8c4 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 800f442:	687b      	ldr	r3, [r7, #4]
 800f444:	681b      	ldr	r3, [r3, #0]
 800f446:	691b      	ldr	r3, [r3, #16]
 800f448:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800f44c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800f450:	d10f      	bne.n	800f472 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 800f452:	687b      	ldr	r3, [r7, #4]
 800f454:	681b      	ldr	r3, [r3, #0]
 800f456:	68db      	ldr	r3, [r3, #12]
 800f458:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800f45c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800f460:	d107      	bne.n	800f472 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 800f462:	687b      	ldr	r3, [r7, #4]
 800f464:	681b      	ldr	r3, [r3, #0]
 800f466:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 800f46a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800f46c:	6878      	ldr	r0, [r7, #4]
 800f46e:	f000 fa33 	bl	800f8d8 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 800f472:	687b      	ldr	r3, [r7, #4]
 800f474:	681b      	ldr	r3, [r3, #0]
 800f476:	691b      	ldr	r3, [r3, #16]
 800f478:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800f47c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800f480:	d10f      	bne.n	800f4a2 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 800f482:	687b      	ldr	r3, [r7, #4]
 800f484:	681b      	ldr	r3, [r3, #0]
 800f486:	68db      	ldr	r3, [r3, #12]
 800f488:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800f48c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800f490:	d107      	bne.n	800f4a2 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 800f492:	687b      	ldr	r3, [r7, #4]
 800f494:	681b      	ldr	r3, [r3, #0]
 800f496:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 800f49a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800f49c:	6878      	ldr	r0, [r7, #4]
 800f49e:	f000 fa25 	bl	800f8ec <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800f4a2:	bf00      	nop
 800f4a4:	3708      	adds	r7, #8
 800f4a6:	46bd      	mov	sp, r7
 800f4a8:	bd80      	pop	{r7, pc}

0800f4aa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800f4aa:	b480      	push	{r7}
 800f4ac:	b083      	sub	sp, #12
 800f4ae:	af00      	add	r7, sp, #0
 800f4b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800f4b2:	bf00      	nop
 800f4b4:	370c      	adds	r7, #12
 800f4b6:	46bd      	mov	sp, r7
 800f4b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4bc:	4770      	bx	lr

0800f4be <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800f4be:	b480      	push	{r7}
 800f4c0:	b083      	sub	sp, #12
 800f4c2:	af00      	add	r7, sp, #0
 800f4c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800f4c6:	bf00      	nop
 800f4c8:	370c      	adds	r7, #12
 800f4ca:	46bd      	mov	sp, r7
 800f4cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4d0:	4770      	bx	lr

0800f4d2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800f4d2:	b480      	push	{r7}
 800f4d4:	b083      	sub	sp, #12
 800f4d6:	af00      	add	r7, sp, #0
 800f4d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800f4da:	bf00      	nop
 800f4dc:	370c      	adds	r7, #12
 800f4de:	46bd      	mov	sp, r7
 800f4e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4e4:	4770      	bx	lr

0800f4e6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800f4e6:	b480      	push	{r7}
 800f4e8:	b083      	sub	sp, #12
 800f4ea:	af00      	add	r7, sp, #0
 800f4ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800f4ee:	bf00      	nop
 800f4f0:	370c      	adds	r7, #12
 800f4f2:	46bd      	mov	sp, r7
 800f4f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4f8:	4770      	bx	lr
	...

0800f4fc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800f4fc:	b480      	push	{r7}
 800f4fe:	b085      	sub	sp, #20
 800f500:	af00      	add	r7, sp, #0
 800f502:	6078      	str	r0, [r7, #4]
 800f504:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800f506:	687b      	ldr	r3, [r7, #4]
 800f508:	681b      	ldr	r3, [r3, #0]
 800f50a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800f50c:	687b      	ldr	r3, [r7, #4]
 800f50e:	4a68      	ldr	r2, [pc, #416]	; (800f6b0 <TIM_Base_SetConfig+0x1b4>)
 800f510:	4293      	cmp	r3, r2
 800f512:	d02b      	beq.n	800f56c <TIM_Base_SetConfig+0x70>
 800f514:	687b      	ldr	r3, [r7, #4]
 800f516:	4a67      	ldr	r2, [pc, #412]	; (800f6b4 <TIM_Base_SetConfig+0x1b8>)
 800f518:	4293      	cmp	r3, r2
 800f51a:	d027      	beq.n	800f56c <TIM_Base_SetConfig+0x70>
 800f51c:	687b      	ldr	r3, [r7, #4]
 800f51e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f522:	d023      	beq.n	800f56c <TIM_Base_SetConfig+0x70>
 800f524:	687b      	ldr	r3, [r7, #4]
 800f526:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800f52a:	d01f      	beq.n	800f56c <TIM_Base_SetConfig+0x70>
 800f52c:	687b      	ldr	r3, [r7, #4]
 800f52e:	4a62      	ldr	r2, [pc, #392]	; (800f6b8 <TIM_Base_SetConfig+0x1bc>)
 800f530:	4293      	cmp	r3, r2
 800f532:	d01b      	beq.n	800f56c <TIM_Base_SetConfig+0x70>
 800f534:	687b      	ldr	r3, [r7, #4]
 800f536:	4a61      	ldr	r2, [pc, #388]	; (800f6bc <TIM_Base_SetConfig+0x1c0>)
 800f538:	4293      	cmp	r3, r2
 800f53a:	d017      	beq.n	800f56c <TIM_Base_SetConfig+0x70>
 800f53c:	687b      	ldr	r3, [r7, #4]
 800f53e:	4a60      	ldr	r2, [pc, #384]	; (800f6c0 <TIM_Base_SetConfig+0x1c4>)
 800f540:	4293      	cmp	r3, r2
 800f542:	d013      	beq.n	800f56c <TIM_Base_SetConfig+0x70>
 800f544:	687b      	ldr	r3, [r7, #4]
 800f546:	4a5f      	ldr	r2, [pc, #380]	; (800f6c4 <TIM_Base_SetConfig+0x1c8>)
 800f548:	4293      	cmp	r3, r2
 800f54a:	d00f      	beq.n	800f56c <TIM_Base_SetConfig+0x70>
 800f54c:	687b      	ldr	r3, [r7, #4]
 800f54e:	4a5e      	ldr	r2, [pc, #376]	; (800f6c8 <TIM_Base_SetConfig+0x1cc>)
 800f550:	4293      	cmp	r3, r2
 800f552:	d00b      	beq.n	800f56c <TIM_Base_SetConfig+0x70>
 800f554:	687b      	ldr	r3, [r7, #4]
 800f556:	4a5d      	ldr	r2, [pc, #372]	; (800f6cc <TIM_Base_SetConfig+0x1d0>)
 800f558:	4293      	cmp	r3, r2
 800f55a:	d007      	beq.n	800f56c <TIM_Base_SetConfig+0x70>
 800f55c:	687b      	ldr	r3, [r7, #4]
 800f55e:	4a5c      	ldr	r2, [pc, #368]	; (800f6d0 <TIM_Base_SetConfig+0x1d4>)
 800f560:	4293      	cmp	r3, r2
 800f562:	d003      	beq.n	800f56c <TIM_Base_SetConfig+0x70>
 800f564:	687b      	ldr	r3, [r7, #4]
 800f566:	4a5b      	ldr	r2, [pc, #364]	; (800f6d4 <TIM_Base_SetConfig+0x1d8>)
 800f568:	4293      	cmp	r3, r2
 800f56a:	d108      	bne.n	800f57e <TIM_Base_SetConfig+0x82>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800f56c:	68fb      	ldr	r3, [r7, #12]
 800f56e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f572:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800f574:	683b      	ldr	r3, [r7, #0]
 800f576:	685b      	ldr	r3, [r3, #4]
 800f578:	68fa      	ldr	r2, [r7, #12]
 800f57a:	4313      	orrs	r3, r2
 800f57c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800f57e:	687b      	ldr	r3, [r7, #4]
 800f580:	4a4b      	ldr	r2, [pc, #300]	; (800f6b0 <TIM_Base_SetConfig+0x1b4>)
 800f582:	4293      	cmp	r3, r2
 800f584:	d043      	beq.n	800f60e <TIM_Base_SetConfig+0x112>
 800f586:	687b      	ldr	r3, [r7, #4]
 800f588:	4a4a      	ldr	r2, [pc, #296]	; (800f6b4 <TIM_Base_SetConfig+0x1b8>)
 800f58a:	4293      	cmp	r3, r2
 800f58c:	d03f      	beq.n	800f60e <TIM_Base_SetConfig+0x112>
 800f58e:	687b      	ldr	r3, [r7, #4]
 800f590:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f594:	d03b      	beq.n	800f60e <TIM_Base_SetConfig+0x112>
 800f596:	687b      	ldr	r3, [r7, #4]
 800f598:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800f59c:	d037      	beq.n	800f60e <TIM_Base_SetConfig+0x112>
 800f59e:	687b      	ldr	r3, [r7, #4]
 800f5a0:	4a45      	ldr	r2, [pc, #276]	; (800f6b8 <TIM_Base_SetConfig+0x1bc>)
 800f5a2:	4293      	cmp	r3, r2
 800f5a4:	d033      	beq.n	800f60e <TIM_Base_SetConfig+0x112>
 800f5a6:	687b      	ldr	r3, [r7, #4]
 800f5a8:	4a44      	ldr	r2, [pc, #272]	; (800f6bc <TIM_Base_SetConfig+0x1c0>)
 800f5aa:	4293      	cmp	r3, r2
 800f5ac:	d02f      	beq.n	800f60e <TIM_Base_SetConfig+0x112>
 800f5ae:	687b      	ldr	r3, [r7, #4]
 800f5b0:	4a43      	ldr	r2, [pc, #268]	; (800f6c0 <TIM_Base_SetConfig+0x1c4>)
 800f5b2:	4293      	cmp	r3, r2
 800f5b4:	d02b      	beq.n	800f60e <TIM_Base_SetConfig+0x112>
 800f5b6:	687b      	ldr	r3, [r7, #4]
 800f5b8:	4a42      	ldr	r2, [pc, #264]	; (800f6c4 <TIM_Base_SetConfig+0x1c8>)
 800f5ba:	4293      	cmp	r3, r2
 800f5bc:	d027      	beq.n	800f60e <TIM_Base_SetConfig+0x112>
 800f5be:	687b      	ldr	r3, [r7, #4]
 800f5c0:	4a41      	ldr	r2, [pc, #260]	; (800f6c8 <TIM_Base_SetConfig+0x1cc>)
 800f5c2:	4293      	cmp	r3, r2
 800f5c4:	d023      	beq.n	800f60e <TIM_Base_SetConfig+0x112>
 800f5c6:	687b      	ldr	r3, [r7, #4]
 800f5c8:	4a40      	ldr	r2, [pc, #256]	; (800f6cc <TIM_Base_SetConfig+0x1d0>)
 800f5ca:	4293      	cmp	r3, r2
 800f5cc:	d01f      	beq.n	800f60e <TIM_Base_SetConfig+0x112>
 800f5ce:	687b      	ldr	r3, [r7, #4]
 800f5d0:	4a3f      	ldr	r2, [pc, #252]	; (800f6d0 <TIM_Base_SetConfig+0x1d4>)
 800f5d2:	4293      	cmp	r3, r2
 800f5d4:	d01b      	beq.n	800f60e <TIM_Base_SetConfig+0x112>
 800f5d6:	687b      	ldr	r3, [r7, #4]
 800f5d8:	4a3e      	ldr	r2, [pc, #248]	; (800f6d4 <TIM_Base_SetConfig+0x1d8>)
 800f5da:	4293      	cmp	r3, r2
 800f5dc:	d017      	beq.n	800f60e <TIM_Base_SetConfig+0x112>
 800f5de:	687b      	ldr	r3, [r7, #4]
 800f5e0:	4a3d      	ldr	r2, [pc, #244]	; (800f6d8 <TIM_Base_SetConfig+0x1dc>)
 800f5e2:	4293      	cmp	r3, r2
 800f5e4:	d013      	beq.n	800f60e <TIM_Base_SetConfig+0x112>
 800f5e6:	687b      	ldr	r3, [r7, #4]
 800f5e8:	4a3c      	ldr	r2, [pc, #240]	; (800f6dc <TIM_Base_SetConfig+0x1e0>)
 800f5ea:	4293      	cmp	r3, r2
 800f5ec:	d00f      	beq.n	800f60e <TIM_Base_SetConfig+0x112>
 800f5ee:	687b      	ldr	r3, [r7, #4]
 800f5f0:	4a3b      	ldr	r2, [pc, #236]	; (800f6e0 <TIM_Base_SetConfig+0x1e4>)
 800f5f2:	4293      	cmp	r3, r2
 800f5f4:	d00b      	beq.n	800f60e <TIM_Base_SetConfig+0x112>
 800f5f6:	687b      	ldr	r3, [r7, #4]
 800f5f8:	4a3a      	ldr	r2, [pc, #232]	; (800f6e4 <TIM_Base_SetConfig+0x1e8>)
 800f5fa:	4293      	cmp	r3, r2
 800f5fc:	d007      	beq.n	800f60e <TIM_Base_SetConfig+0x112>
 800f5fe:	687b      	ldr	r3, [r7, #4]
 800f600:	4a39      	ldr	r2, [pc, #228]	; (800f6e8 <TIM_Base_SetConfig+0x1ec>)
 800f602:	4293      	cmp	r3, r2
 800f604:	d003      	beq.n	800f60e <TIM_Base_SetConfig+0x112>
 800f606:	687b      	ldr	r3, [r7, #4]
 800f608:	4a38      	ldr	r2, [pc, #224]	; (800f6ec <TIM_Base_SetConfig+0x1f0>)
 800f60a:	4293      	cmp	r3, r2
 800f60c:	d108      	bne.n	800f620 <TIM_Base_SetConfig+0x124>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800f60e:	68fb      	ldr	r3, [r7, #12]
 800f610:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f614:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800f616:	683b      	ldr	r3, [r7, #0]
 800f618:	68db      	ldr	r3, [r3, #12]
 800f61a:	68fa      	ldr	r2, [r7, #12]
 800f61c:	4313      	orrs	r3, r2
 800f61e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800f620:	68fb      	ldr	r3, [r7, #12]
 800f622:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800f626:	683b      	ldr	r3, [r7, #0]
 800f628:	695b      	ldr	r3, [r3, #20]
 800f62a:	4313      	orrs	r3, r2
 800f62c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800f62e:	687b      	ldr	r3, [r7, #4]
 800f630:	68fa      	ldr	r2, [r7, #12]
 800f632:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800f634:	683b      	ldr	r3, [r7, #0]
 800f636:	689a      	ldr	r2, [r3, #8]
 800f638:	687b      	ldr	r3, [r7, #4]
 800f63a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800f63c:	683b      	ldr	r3, [r7, #0]
 800f63e:	681a      	ldr	r2, [r3, #0]
 800f640:	687b      	ldr	r3, [r7, #4]
 800f642:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800f644:	687b      	ldr	r3, [r7, #4]
 800f646:	4a1a      	ldr	r2, [pc, #104]	; (800f6b0 <TIM_Base_SetConfig+0x1b4>)
 800f648:	4293      	cmp	r3, r2
 800f64a:	d023      	beq.n	800f694 <TIM_Base_SetConfig+0x198>
 800f64c:	687b      	ldr	r3, [r7, #4]
 800f64e:	4a19      	ldr	r2, [pc, #100]	; (800f6b4 <TIM_Base_SetConfig+0x1b8>)
 800f650:	4293      	cmp	r3, r2
 800f652:	d01f      	beq.n	800f694 <TIM_Base_SetConfig+0x198>
 800f654:	687b      	ldr	r3, [r7, #4]
 800f656:	4a1e      	ldr	r2, [pc, #120]	; (800f6d0 <TIM_Base_SetConfig+0x1d4>)
 800f658:	4293      	cmp	r3, r2
 800f65a:	d01b      	beq.n	800f694 <TIM_Base_SetConfig+0x198>
 800f65c:	687b      	ldr	r3, [r7, #4]
 800f65e:	4a1d      	ldr	r2, [pc, #116]	; (800f6d4 <TIM_Base_SetConfig+0x1d8>)
 800f660:	4293      	cmp	r3, r2
 800f662:	d017      	beq.n	800f694 <TIM_Base_SetConfig+0x198>
 800f664:	687b      	ldr	r3, [r7, #4]
 800f666:	4a1c      	ldr	r2, [pc, #112]	; (800f6d8 <TIM_Base_SetConfig+0x1dc>)
 800f668:	4293      	cmp	r3, r2
 800f66a:	d013      	beq.n	800f694 <TIM_Base_SetConfig+0x198>
 800f66c:	687b      	ldr	r3, [r7, #4]
 800f66e:	4a1b      	ldr	r2, [pc, #108]	; (800f6dc <TIM_Base_SetConfig+0x1e0>)
 800f670:	4293      	cmp	r3, r2
 800f672:	d00f      	beq.n	800f694 <TIM_Base_SetConfig+0x198>
 800f674:	687b      	ldr	r3, [r7, #4]
 800f676:	4a1a      	ldr	r2, [pc, #104]	; (800f6e0 <TIM_Base_SetConfig+0x1e4>)
 800f678:	4293      	cmp	r3, r2
 800f67a:	d00b      	beq.n	800f694 <TIM_Base_SetConfig+0x198>
 800f67c:	687b      	ldr	r3, [r7, #4]
 800f67e:	4a19      	ldr	r2, [pc, #100]	; (800f6e4 <TIM_Base_SetConfig+0x1e8>)
 800f680:	4293      	cmp	r3, r2
 800f682:	d007      	beq.n	800f694 <TIM_Base_SetConfig+0x198>
 800f684:	687b      	ldr	r3, [r7, #4]
 800f686:	4a18      	ldr	r2, [pc, #96]	; (800f6e8 <TIM_Base_SetConfig+0x1ec>)
 800f688:	4293      	cmp	r3, r2
 800f68a:	d003      	beq.n	800f694 <TIM_Base_SetConfig+0x198>
 800f68c:	687b      	ldr	r3, [r7, #4]
 800f68e:	4a17      	ldr	r2, [pc, #92]	; (800f6ec <TIM_Base_SetConfig+0x1f0>)
 800f690:	4293      	cmp	r3, r2
 800f692:	d103      	bne.n	800f69c <TIM_Base_SetConfig+0x1a0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800f694:	683b      	ldr	r3, [r7, #0]
 800f696:	691a      	ldr	r2, [r3, #16]
 800f698:	687b      	ldr	r3, [r7, #4]
 800f69a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800f69c:	687b      	ldr	r3, [r7, #4]
 800f69e:	2201      	movs	r2, #1
 800f6a0:	615a      	str	r2, [r3, #20]
}
 800f6a2:	bf00      	nop
 800f6a4:	3714      	adds	r7, #20
 800f6a6:	46bd      	mov	sp, r7
 800f6a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6ac:	4770      	bx	lr
 800f6ae:	bf00      	nop
 800f6b0:	40012c00 	.word	0x40012c00
 800f6b4:	50012c00 	.word	0x50012c00
 800f6b8:	40000400 	.word	0x40000400
 800f6bc:	50000400 	.word	0x50000400
 800f6c0:	40000800 	.word	0x40000800
 800f6c4:	50000800 	.word	0x50000800
 800f6c8:	40000c00 	.word	0x40000c00
 800f6cc:	50000c00 	.word	0x50000c00
 800f6d0:	40013400 	.word	0x40013400
 800f6d4:	50013400 	.word	0x50013400
 800f6d8:	40014000 	.word	0x40014000
 800f6dc:	50014000 	.word	0x50014000
 800f6e0:	40014400 	.word	0x40014400
 800f6e4:	50014400 	.word	0x50014400
 800f6e8:	40014800 	.word	0x40014800
 800f6ec:	50014800 	.word	0x50014800

0800f6f0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800f6f0:	b480      	push	{r7}
 800f6f2:	b085      	sub	sp, #20
 800f6f4:	af00      	add	r7, sp, #0
 800f6f6:	6078      	str	r0, [r7, #4]
 800f6f8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800f6fa:	687b      	ldr	r3, [r7, #4]
 800f6fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f700:	2b01      	cmp	r3, #1
 800f702:	d101      	bne.n	800f708 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800f704:	2302      	movs	r3, #2
 800f706:	e097      	b.n	800f838 <HAL_TIMEx_MasterConfigSynchronization+0x148>
 800f708:	687b      	ldr	r3, [r7, #4]
 800f70a:	2201      	movs	r2, #1
 800f70c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f710:	687b      	ldr	r3, [r7, #4]
 800f712:	2202      	movs	r2, #2
 800f714:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800f718:	687b      	ldr	r3, [r7, #4]
 800f71a:	681b      	ldr	r3, [r3, #0]
 800f71c:	685b      	ldr	r3, [r3, #4]
 800f71e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800f720:	687b      	ldr	r3, [r7, #4]
 800f722:	681b      	ldr	r3, [r3, #0]
 800f724:	689b      	ldr	r3, [r3, #8]
 800f726:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800f728:	687b      	ldr	r3, [r7, #4]
 800f72a:	681b      	ldr	r3, [r3, #0]
 800f72c:	4a45      	ldr	r2, [pc, #276]	; (800f844 <HAL_TIMEx_MasterConfigSynchronization+0x154>)
 800f72e:	4293      	cmp	r3, r2
 800f730:	d00e      	beq.n	800f750 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 800f732:	687b      	ldr	r3, [r7, #4]
 800f734:	681b      	ldr	r3, [r3, #0]
 800f736:	4a44      	ldr	r2, [pc, #272]	; (800f848 <HAL_TIMEx_MasterConfigSynchronization+0x158>)
 800f738:	4293      	cmp	r3, r2
 800f73a:	d009      	beq.n	800f750 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 800f73c:	687b      	ldr	r3, [r7, #4]
 800f73e:	681b      	ldr	r3, [r3, #0]
 800f740:	4a42      	ldr	r2, [pc, #264]	; (800f84c <HAL_TIMEx_MasterConfigSynchronization+0x15c>)
 800f742:	4293      	cmp	r3, r2
 800f744:	d004      	beq.n	800f750 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 800f746:	687b      	ldr	r3, [r7, #4]
 800f748:	681b      	ldr	r3, [r3, #0]
 800f74a:	4a41      	ldr	r2, [pc, #260]	; (800f850 <HAL_TIMEx_MasterConfigSynchronization+0x160>)
 800f74c:	4293      	cmp	r3, r2
 800f74e:	d108      	bne.n	800f762 <HAL_TIMEx_MasterConfigSynchronization+0x72>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800f750:	68fb      	ldr	r3, [r7, #12]
 800f752:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800f756:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800f758:	683b      	ldr	r3, [r7, #0]
 800f75a:	685b      	ldr	r3, [r3, #4]
 800f75c:	68fa      	ldr	r2, [r7, #12]
 800f75e:	4313      	orrs	r3, r2
 800f760:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800f762:	68fb      	ldr	r3, [r7, #12]
 800f764:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800f768:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f76c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800f76e:	683b      	ldr	r3, [r7, #0]
 800f770:	681b      	ldr	r3, [r3, #0]
 800f772:	68fa      	ldr	r2, [r7, #12]
 800f774:	4313      	orrs	r3, r2
 800f776:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800f778:	687b      	ldr	r3, [r7, #4]
 800f77a:	681b      	ldr	r3, [r3, #0]
 800f77c:	68fa      	ldr	r2, [r7, #12]
 800f77e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f780:	687b      	ldr	r3, [r7, #4]
 800f782:	681b      	ldr	r3, [r3, #0]
 800f784:	4a2f      	ldr	r2, [pc, #188]	; (800f844 <HAL_TIMEx_MasterConfigSynchronization+0x154>)
 800f786:	4293      	cmp	r3, r2
 800f788:	d040      	beq.n	800f80c <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800f78a:	687b      	ldr	r3, [r7, #4]
 800f78c:	681b      	ldr	r3, [r3, #0]
 800f78e:	4a2e      	ldr	r2, [pc, #184]	; (800f848 <HAL_TIMEx_MasterConfigSynchronization+0x158>)
 800f790:	4293      	cmp	r3, r2
 800f792:	d03b      	beq.n	800f80c <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800f794:	687b      	ldr	r3, [r7, #4]
 800f796:	681b      	ldr	r3, [r3, #0]
 800f798:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f79c:	d036      	beq.n	800f80c <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800f79e:	687b      	ldr	r3, [r7, #4]
 800f7a0:	681b      	ldr	r3, [r3, #0]
 800f7a2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800f7a6:	d031      	beq.n	800f80c <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800f7a8:	687b      	ldr	r3, [r7, #4]
 800f7aa:	681b      	ldr	r3, [r3, #0]
 800f7ac:	4a29      	ldr	r2, [pc, #164]	; (800f854 <HAL_TIMEx_MasterConfigSynchronization+0x164>)
 800f7ae:	4293      	cmp	r3, r2
 800f7b0:	d02c      	beq.n	800f80c <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800f7b2:	687b      	ldr	r3, [r7, #4]
 800f7b4:	681b      	ldr	r3, [r3, #0]
 800f7b6:	4a28      	ldr	r2, [pc, #160]	; (800f858 <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 800f7b8:	4293      	cmp	r3, r2
 800f7ba:	d027      	beq.n	800f80c <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800f7bc:	687b      	ldr	r3, [r7, #4]
 800f7be:	681b      	ldr	r3, [r3, #0]
 800f7c0:	4a26      	ldr	r2, [pc, #152]	; (800f85c <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 800f7c2:	4293      	cmp	r3, r2
 800f7c4:	d022      	beq.n	800f80c <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800f7c6:	687b      	ldr	r3, [r7, #4]
 800f7c8:	681b      	ldr	r3, [r3, #0]
 800f7ca:	4a25      	ldr	r2, [pc, #148]	; (800f860 <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 800f7cc:	4293      	cmp	r3, r2
 800f7ce:	d01d      	beq.n	800f80c <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800f7d0:	687b      	ldr	r3, [r7, #4]
 800f7d2:	681b      	ldr	r3, [r3, #0]
 800f7d4:	4a23      	ldr	r2, [pc, #140]	; (800f864 <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 800f7d6:	4293      	cmp	r3, r2
 800f7d8:	d018      	beq.n	800f80c <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800f7da:	687b      	ldr	r3, [r7, #4]
 800f7dc:	681b      	ldr	r3, [r3, #0]
 800f7de:	4a22      	ldr	r2, [pc, #136]	; (800f868 <HAL_TIMEx_MasterConfigSynchronization+0x178>)
 800f7e0:	4293      	cmp	r3, r2
 800f7e2:	d013      	beq.n	800f80c <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800f7e4:	687b      	ldr	r3, [r7, #4]
 800f7e6:	681b      	ldr	r3, [r3, #0]
 800f7e8:	4a18      	ldr	r2, [pc, #96]	; (800f84c <HAL_TIMEx_MasterConfigSynchronization+0x15c>)
 800f7ea:	4293      	cmp	r3, r2
 800f7ec:	d00e      	beq.n	800f80c <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800f7ee:	687b      	ldr	r3, [r7, #4]
 800f7f0:	681b      	ldr	r3, [r3, #0]
 800f7f2:	4a17      	ldr	r2, [pc, #92]	; (800f850 <HAL_TIMEx_MasterConfigSynchronization+0x160>)
 800f7f4:	4293      	cmp	r3, r2
 800f7f6:	d009      	beq.n	800f80c <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800f7f8:	687b      	ldr	r3, [r7, #4]
 800f7fa:	681b      	ldr	r3, [r3, #0]
 800f7fc:	4a1b      	ldr	r2, [pc, #108]	; (800f86c <HAL_TIMEx_MasterConfigSynchronization+0x17c>)
 800f7fe:	4293      	cmp	r3, r2
 800f800:	d004      	beq.n	800f80c <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800f802:	687b      	ldr	r3, [r7, #4]
 800f804:	681b      	ldr	r3, [r3, #0]
 800f806:	4a1a      	ldr	r2, [pc, #104]	; (800f870 <HAL_TIMEx_MasterConfigSynchronization+0x180>)
 800f808:	4293      	cmp	r3, r2
 800f80a:	d10c      	bne.n	800f826 <HAL_TIMEx_MasterConfigSynchronization+0x136>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800f80c:	68bb      	ldr	r3, [r7, #8]
 800f80e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f812:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800f814:	683b      	ldr	r3, [r7, #0]
 800f816:	689b      	ldr	r3, [r3, #8]
 800f818:	68ba      	ldr	r2, [r7, #8]
 800f81a:	4313      	orrs	r3, r2
 800f81c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800f81e:	687b      	ldr	r3, [r7, #4]
 800f820:	681b      	ldr	r3, [r3, #0]
 800f822:	68ba      	ldr	r2, [r7, #8]
 800f824:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800f826:	687b      	ldr	r3, [r7, #4]
 800f828:	2201      	movs	r2, #1
 800f82a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800f82e:	687b      	ldr	r3, [r7, #4]
 800f830:	2200      	movs	r2, #0
 800f832:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800f836:	2300      	movs	r3, #0
}
 800f838:	4618      	mov	r0, r3
 800f83a:	3714      	adds	r7, #20
 800f83c:	46bd      	mov	sp, r7
 800f83e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f842:	4770      	bx	lr
 800f844:	40012c00 	.word	0x40012c00
 800f848:	50012c00 	.word	0x50012c00
 800f84c:	40013400 	.word	0x40013400
 800f850:	50013400 	.word	0x50013400
 800f854:	40000400 	.word	0x40000400
 800f858:	50000400 	.word	0x50000400
 800f85c:	40000800 	.word	0x40000800
 800f860:	50000800 	.word	0x50000800
 800f864:	40000c00 	.word	0x40000c00
 800f868:	50000c00 	.word	0x50000c00
 800f86c:	40014000 	.word	0x40014000
 800f870:	50014000 	.word	0x50014000

0800f874 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800f874:	b480      	push	{r7}
 800f876:	b083      	sub	sp, #12
 800f878:	af00      	add	r7, sp, #0
 800f87a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800f87c:	bf00      	nop
 800f87e:	370c      	adds	r7, #12
 800f880:	46bd      	mov	sp, r7
 800f882:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f886:	4770      	bx	lr

0800f888 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800f888:	b480      	push	{r7}
 800f88a:	b083      	sub	sp, #12
 800f88c:	af00      	add	r7, sp, #0
 800f88e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800f890:	bf00      	nop
 800f892:	370c      	adds	r7, #12
 800f894:	46bd      	mov	sp, r7
 800f896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f89a:	4770      	bx	lr

0800f89c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800f89c:	b480      	push	{r7}
 800f89e:	b083      	sub	sp, #12
 800f8a0:	af00      	add	r7, sp, #0
 800f8a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800f8a4:	bf00      	nop
 800f8a6:	370c      	adds	r7, #12
 800f8a8:	46bd      	mov	sp, r7
 800f8aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8ae:	4770      	bx	lr

0800f8b0 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800f8b0:	b480      	push	{r7}
 800f8b2:	b083      	sub	sp, #12
 800f8b4:	af00      	add	r7, sp, #0
 800f8b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800f8b8:	bf00      	nop
 800f8ba:	370c      	adds	r7, #12
 800f8bc:	46bd      	mov	sp, r7
 800f8be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8c2:	4770      	bx	lr

0800f8c4 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800f8c4:	b480      	push	{r7}
 800f8c6:	b083      	sub	sp, #12
 800f8c8:	af00      	add	r7, sp, #0
 800f8ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800f8cc:	bf00      	nop
 800f8ce:	370c      	adds	r7, #12
 800f8d0:	46bd      	mov	sp, r7
 800f8d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8d6:	4770      	bx	lr

0800f8d8 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800f8d8:	b480      	push	{r7}
 800f8da:	b083      	sub	sp, #12
 800f8dc:	af00      	add	r7, sp, #0
 800f8de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800f8e0:	bf00      	nop
 800f8e2:	370c      	adds	r7, #12
 800f8e4:	46bd      	mov	sp, r7
 800f8e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8ea:	4770      	bx	lr

0800f8ec <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800f8ec:	b480      	push	{r7}
 800f8ee:	b083      	sub	sp, #12
 800f8f0:	af00      	add	r7, sp, #0
 800f8f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800f8f4:	bf00      	nop
 800f8f6:	370c      	adds	r7, #12
 800f8f8:	46bd      	mov	sp, r7
 800f8fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8fe:	4770      	bx	lr

0800f900 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800f900:	b580      	push	{r7, lr}
 800f902:	b082      	sub	sp, #8
 800f904:	af00      	add	r7, sp, #0
 800f906:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800f908:	687b      	ldr	r3, [r7, #4]
 800f90a:	2b00      	cmp	r3, #0
 800f90c:	d101      	bne.n	800f912 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800f90e:	2301      	movs	r3, #1
 800f910:	e042      	b.n	800f998 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800f912:	687b      	ldr	r3, [r7, #4]
 800f914:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f918:	2b00      	cmp	r3, #0
 800f91a:	d106      	bne.n	800f92a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800f91c:	687b      	ldr	r3, [r7, #4]
 800f91e:	2200      	movs	r2, #0
 800f920:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800f924:	6878      	ldr	r0, [r7, #4]
 800f926:	f7f6 ff37 	bl	8006798 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800f92a:	687b      	ldr	r3, [r7, #4]
 800f92c:	2224      	movs	r2, #36	; 0x24
 800f92e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800f932:	687b      	ldr	r3, [r7, #4]
 800f934:	681b      	ldr	r3, [r3, #0]
 800f936:	681a      	ldr	r2, [r3, #0]
 800f938:	687b      	ldr	r3, [r7, #4]
 800f93a:	681b      	ldr	r3, [r3, #0]
 800f93c:	f022 0201 	bic.w	r2, r2, #1
 800f940:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800f942:	6878      	ldr	r0, [r7, #4]
 800f944:	f000 f8d2 	bl	800faec <UART_SetConfig>
 800f948:	4603      	mov	r3, r0
 800f94a:	2b01      	cmp	r3, #1
 800f94c:	d101      	bne.n	800f952 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800f94e:	2301      	movs	r3, #1
 800f950:	e022      	b.n	800f998 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800f952:	687b      	ldr	r3, [r7, #4]
 800f954:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f956:	2b00      	cmp	r3, #0
 800f958:	d002      	beq.n	800f960 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800f95a:	6878      	ldr	r0, [r7, #4]
 800f95c:	f000 fa68 	bl	800fe30 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800f960:	687b      	ldr	r3, [r7, #4]
 800f962:	681b      	ldr	r3, [r3, #0]
 800f964:	685a      	ldr	r2, [r3, #4]
 800f966:	687b      	ldr	r3, [r7, #4]
 800f968:	681b      	ldr	r3, [r3, #0]
 800f96a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800f96e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800f970:	687b      	ldr	r3, [r7, #4]
 800f972:	681b      	ldr	r3, [r3, #0]
 800f974:	689a      	ldr	r2, [r3, #8]
 800f976:	687b      	ldr	r3, [r7, #4]
 800f978:	681b      	ldr	r3, [r3, #0]
 800f97a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800f97e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800f980:	687b      	ldr	r3, [r7, #4]
 800f982:	681b      	ldr	r3, [r3, #0]
 800f984:	681a      	ldr	r2, [r3, #0]
 800f986:	687b      	ldr	r3, [r7, #4]
 800f988:	681b      	ldr	r3, [r3, #0]
 800f98a:	f042 0201 	orr.w	r2, r2, #1
 800f98e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800f990:	6878      	ldr	r0, [r7, #4]
 800f992:	f000 faef 	bl	800ff74 <UART_CheckIdleState>
 800f996:	4603      	mov	r3, r0
}
 800f998:	4618      	mov	r0, r3
 800f99a:	3708      	adds	r7, #8
 800f99c:	46bd      	mov	sp, r7
 800f99e:	bd80      	pop	{r7, pc}

0800f9a0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800f9a0:	b580      	push	{r7, lr}
 800f9a2:	b08a      	sub	sp, #40	; 0x28
 800f9a4:	af02      	add	r7, sp, #8
 800f9a6:	60f8      	str	r0, [r7, #12]
 800f9a8:	60b9      	str	r1, [r7, #8]
 800f9aa:	603b      	str	r3, [r7, #0]
 800f9ac:	4613      	mov	r3, r2
 800f9ae:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800f9b0:	68fb      	ldr	r3, [r7, #12]
 800f9b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f9b6:	2b20      	cmp	r3, #32
 800f9b8:	f040 8092 	bne.w	800fae0 <HAL_UART_Transmit+0x140>
  {
    if ((pData == NULL) || (Size == 0U))
 800f9bc:	68bb      	ldr	r3, [r7, #8]
 800f9be:	2b00      	cmp	r3, #0
 800f9c0:	d002      	beq.n	800f9c8 <HAL_UART_Transmit+0x28>
 800f9c2:	88fb      	ldrh	r3, [r7, #6]
 800f9c4:	2b00      	cmp	r3, #0
 800f9c6:	d101      	bne.n	800f9cc <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800f9c8:	2301      	movs	r3, #1
 800f9ca:	e08a      	b.n	800fae2 <HAL_UART_Transmit+0x142>
    }

    __HAL_LOCK(huart);
 800f9cc:	68fb      	ldr	r3, [r7, #12]
 800f9ce:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800f9d2:	2b01      	cmp	r3, #1
 800f9d4:	d101      	bne.n	800f9da <HAL_UART_Transmit+0x3a>
 800f9d6:	2302      	movs	r3, #2
 800f9d8:	e083      	b.n	800fae2 <HAL_UART_Transmit+0x142>
 800f9da:	68fb      	ldr	r3, [r7, #12]
 800f9dc:	2201      	movs	r2, #1
 800f9de:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Disable the UART DMA Tx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800f9e2:	68fb      	ldr	r3, [r7, #12]
 800f9e4:	681b      	ldr	r3, [r3, #0]
 800f9e6:	689b      	ldr	r3, [r3, #8]
 800f9e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f9ec:	2b80      	cmp	r3, #128	; 0x80
 800f9ee:	d107      	bne.n	800fa00 <HAL_UART_Transmit+0x60>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800f9f0:	68fb      	ldr	r3, [r7, #12]
 800f9f2:	681b      	ldr	r3, [r3, #0]
 800f9f4:	689a      	ldr	r2, [r3, #8]
 800f9f6:	68fb      	ldr	r3, [r7, #12]
 800f9f8:	681b      	ldr	r3, [r3, #0]
 800f9fa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800f9fe:	609a      	str	r2, [r3, #8]
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800fa00:	68fb      	ldr	r3, [r7, #12]
 800fa02:	2200      	movs	r2, #0
 800fa04:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800fa08:	68fb      	ldr	r3, [r7, #12]
 800fa0a:	2221      	movs	r2, #33	; 0x21
 800fa0c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800fa10:	f7f6 ff96 	bl	8006940 <HAL_GetTick>
 800fa14:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800fa16:	68fb      	ldr	r3, [r7, #12]
 800fa18:	88fa      	ldrh	r2, [r7, #6]
 800fa1a:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800fa1e:	68fb      	ldr	r3, [r7, #12]
 800fa20:	88fa      	ldrh	r2, [r7, #6]
 800fa22:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800fa26:	68fb      	ldr	r3, [r7, #12]
 800fa28:	689b      	ldr	r3, [r3, #8]
 800fa2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800fa2e:	d108      	bne.n	800fa42 <HAL_UART_Transmit+0xa2>
 800fa30:	68fb      	ldr	r3, [r7, #12]
 800fa32:	691b      	ldr	r3, [r3, #16]
 800fa34:	2b00      	cmp	r3, #0
 800fa36:	d104      	bne.n	800fa42 <HAL_UART_Transmit+0xa2>
    {
      pdata8bits  = NULL;
 800fa38:	2300      	movs	r3, #0
 800fa3a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800fa3c:	68bb      	ldr	r3, [r7, #8]
 800fa3e:	61bb      	str	r3, [r7, #24]
 800fa40:	e003      	b.n	800fa4a <HAL_UART_Transmit+0xaa>
    }
    else
    {
      pdata8bits  = pData;
 800fa42:	68bb      	ldr	r3, [r7, #8]
 800fa44:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800fa46:	2300      	movs	r3, #0
 800fa48:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800fa4a:	68fb      	ldr	r3, [r7, #12]
 800fa4c:	2200      	movs	r2, #0
 800fa4e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 800fa52:	e02c      	b.n	800faae <HAL_UART_Transmit+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800fa54:	683b      	ldr	r3, [r7, #0]
 800fa56:	9300      	str	r3, [sp, #0]
 800fa58:	697b      	ldr	r3, [r7, #20]
 800fa5a:	2200      	movs	r2, #0
 800fa5c:	2180      	movs	r1, #128	; 0x80
 800fa5e:	68f8      	ldr	r0, [r7, #12]
 800fa60:	f000 fad3 	bl	801000a <UART_WaitOnFlagUntilTimeout>
 800fa64:	4603      	mov	r3, r0
 800fa66:	2b00      	cmp	r3, #0
 800fa68:	d001      	beq.n	800fa6e <HAL_UART_Transmit+0xce>
      {
        return HAL_TIMEOUT;
 800fa6a:	2303      	movs	r3, #3
 800fa6c:	e039      	b.n	800fae2 <HAL_UART_Transmit+0x142>
      }
      if (pdata8bits == NULL)
 800fa6e:	69fb      	ldr	r3, [r7, #28]
 800fa70:	2b00      	cmp	r3, #0
 800fa72:	d10b      	bne.n	800fa8c <HAL_UART_Transmit+0xec>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800fa74:	69bb      	ldr	r3, [r7, #24]
 800fa76:	881b      	ldrh	r3, [r3, #0]
 800fa78:	461a      	mov	r2, r3
 800fa7a:	68fb      	ldr	r3, [r7, #12]
 800fa7c:	681b      	ldr	r3, [r3, #0]
 800fa7e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800fa82:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800fa84:	69bb      	ldr	r3, [r7, #24]
 800fa86:	3302      	adds	r3, #2
 800fa88:	61bb      	str	r3, [r7, #24]
 800fa8a:	e007      	b.n	800fa9c <HAL_UART_Transmit+0xfc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800fa8c:	69fb      	ldr	r3, [r7, #28]
 800fa8e:	781a      	ldrb	r2, [r3, #0]
 800fa90:	68fb      	ldr	r3, [r7, #12]
 800fa92:	681b      	ldr	r3, [r3, #0]
 800fa94:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800fa96:	69fb      	ldr	r3, [r7, #28]
 800fa98:	3301      	adds	r3, #1
 800fa9a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800fa9c:	68fb      	ldr	r3, [r7, #12]
 800fa9e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800faa2:	b29b      	uxth	r3, r3
 800faa4:	3b01      	subs	r3, #1
 800faa6:	b29a      	uxth	r2, r3
 800faa8:	68fb      	ldr	r3, [r7, #12]
 800faaa:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800faae:	68fb      	ldr	r3, [r7, #12]
 800fab0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800fab4:	b29b      	uxth	r3, r3
 800fab6:	2b00      	cmp	r3, #0
 800fab8:	d1cc      	bne.n	800fa54 <HAL_UART_Transmit+0xb4>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800faba:	683b      	ldr	r3, [r7, #0]
 800fabc:	9300      	str	r3, [sp, #0]
 800fabe:	697b      	ldr	r3, [r7, #20]
 800fac0:	2200      	movs	r2, #0
 800fac2:	2140      	movs	r1, #64	; 0x40
 800fac4:	68f8      	ldr	r0, [r7, #12]
 800fac6:	f000 faa0 	bl	801000a <UART_WaitOnFlagUntilTimeout>
 800faca:	4603      	mov	r3, r0
 800facc:	2b00      	cmp	r3, #0
 800face:	d001      	beq.n	800fad4 <HAL_UART_Transmit+0x134>
    {
      return HAL_TIMEOUT;
 800fad0:	2303      	movs	r3, #3
 800fad2:	e006      	b.n	800fae2 <HAL_UART_Transmit+0x142>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800fad4:	68fb      	ldr	r3, [r7, #12]
 800fad6:	2220      	movs	r2, #32
 800fad8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800fadc:	2300      	movs	r3, #0
 800fade:	e000      	b.n	800fae2 <HAL_UART_Transmit+0x142>
  }
  else
  {
    return HAL_BUSY;
 800fae0:	2302      	movs	r3, #2
  }
}
 800fae2:	4618      	mov	r0, r3
 800fae4:	3720      	adds	r7, #32
 800fae6:	46bd      	mov	sp, r7
 800fae8:	bd80      	pop	{r7, pc}
	...

0800faec <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800faec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800faf0:	b094      	sub	sp, #80	; 0x50
 800faf2:	af00      	add	r7, sp, #0
 800faf4:	62f8      	str	r0, [r7, #44]	; 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800faf6:	2300      	movs	r3, #0
 800faf8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 800fafc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fafe:	681a      	ldr	r2, [r3, #0]
 800fb00:	4b7e      	ldr	r3, [pc, #504]	; (800fcfc <UART_SetConfig+0x210>)
 800fb02:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800fb04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb06:	689a      	ldr	r2, [r3, #8]
 800fb08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb0a:	691b      	ldr	r3, [r3, #16]
 800fb0c:	431a      	orrs	r2, r3
 800fb0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb10:	695b      	ldr	r3, [r3, #20]
 800fb12:	431a      	orrs	r2, r3
 800fb14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb16:	69db      	ldr	r3, [r3, #28]
 800fb18:	4313      	orrs	r3, r2
 800fb1a:	64fb      	str	r3, [r7, #76]	; 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800fb1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb1e:	681b      	ldr	r3, [r3, #0]
 800fb20:	681b      	ldr	r3, [r3, #0]
 800fb22:	4977      	ldr	r1, [pc, #476]	; (800fd00 <UART_SetConfig+0x214>)
 800fb24:	4019      	ands	r1, r3
 800fb26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb28:	681a      	ldr	r2, [r3, #0]
 800fb2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fb2c:	430b      	orrs	r3, r1
 800fb2e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800fb30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb32:	681b      	ldr	r3, [r3, #0]
 800fb34:	685b      	ldr	r3, [r3, #4]
 800fb36:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800fb3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb3c:	68d9      	ldr	r1, [r3, #12]
 800fb3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb40:	681a      	ldr	r2, [r3, #0]
 800fb42:	ea40 0301 	orr.w	r3, r0, r1
 800fb46:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800fb48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb4a:	699b      	ldr	r3, [r3, #24]
 800fb4c:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800fb4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb50:	681a      	ldr	r2, [r3, #0]
 800fb52:	4b6a      	ldr	r3, [pc, #424]	; (800fcfc <UART_SetConfig+0x210>)
 800fb54:	429a      	cmp	r2, r3
 800fb56:	d009      	beq.n	800fb6c <UART_SetConfig+0x80>
 800fb58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb5a:	681a      	ldr	r2, [r3, #0]
 800fb5c:	4b69      	ldr	r3, [pc, #420]	; (800fd04 <UART_SetConfig+0x218>)
 800fb5e:	429a      	cmp	r2, r3
 800fb60:	d004      	beq.n	800fb6c <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800fb62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb64:	6a1a      	ldr	r2, [r3, #32]
 800fb66:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fb68:	4313      	orrs	r3, r2
 800fb6a:	64fb      	str	r3, [r7, #76]	; 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800fb6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb6e:	681b      	ldr	r3, [r3, #0]
 800fb70:	689b      	ldr	r3, [r3, #8]
 800fb72:	f023 416e 	bic.w	r1, r3, #3992977408	; 0xee000000
 800fb76:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
 800fb7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb7c:	681a      	ldr	r2, [r3, #0]
 800fb7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fb80:	430b      	orrs	r3, r1
 800fb82:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800fb84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb86:	681b      	ldr	r3, [r3, #0]
 800fb88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fb8a:	f023 000f 	bic.w	r0, r3, #15
 800fb8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb90:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800fb92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb94:	681a      	ldr	r2, [r3, #0]
 800fb96:	ea40 0301 	orr.w	r3, r0, r1
 800fb9a:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800fb9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb9e:	681a      	ldr	r2, [r3, #0]
 800fba0:	4b59      	ldr	r3, [pc, #356]	; (800fd08 <UART_SetConfig+0x21c>)
 800fba2:	429a      	cmp	r2, r3
 800fba4:	d102      	bne.n	800fbac <UART_SetConfig+0xc0>
 800fba6:	2301      	movs	r3, #1
 800fba8:	64bb      	str	r3, [r7, #72]	; 0x48
 800fbaa:	e029      	b.n	800fc00 <UART_SetConfig+0x114>
 800fbac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fbae:	681a      	ldr	r2, [r3, #0]
 800fbb0:	4b56      	ldr	r3, [pc, #344]	; (800fd0c <UART_SetConfig+0x220>)
 800fbb2:	429a      	cmp	r2, r3
 800fbb4:	d102      	bne.n	800fbbc <UART_SetConfig+0xd0>
 800fbb6:	2302      	movs	r3, #2
 800fbb8:	64bb      	str	r3, [r7, #72]	; 0x48
 800fbba:	e021      	b.n	800fc00 <UART_SetConfig+0x114>
 800fbbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fbbe:	681a      	ldr	r2, [r3, #0]
 800fbc0:	4b53      	ldr	r3, [pc, #332]	; (800fd10 <UART_SetConfig+0x224>)
 800fbc2:	429a      	cmp	r2, r3
 800fbc4:	d102      	bne.n	800fbcc <UART_SetConfig+0xe0>
 800fbc6:	2304      	movs	r3, #4
 800fbc8:	64bb      	str	r3, [r7, #72]	; 0x48
 800fbca:	e019      	b.n	800fc00 <UART_SetConfig+0x114>
 800fbcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fbce:	681a      	ldr	r2, [r3, #0]
 800fbd0:	4b50      	ldr	r3, [pc, #320]	; (800fd14 <UART_SetConfig+0x228>)
 800fbd2:	429a      	cmp	r2, r3
 800fbd4:	d102      	bne.n	800fbdc <UART_SetConfig+0xf0>
 800fbd6:	2308      	movs	r3, #8
 800fbd8:	64bb      	str	r3, [r7, #72]	; 0x48
 800fbda:	e011      	b.n	800fc00 <UART_SetConfig+0x114>
 800fbdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fbde:	681a      	ldr	r2, [r3, #0]
 800fbe0:	4b4d      	ldr	r3, [pc, #308]	; (800fd18 <UART_SetConfig+0x22c>)
 800fbe2:	429a      	cmp	r2, r3
 800fbe4:	d102      	bne.n	800fbec <UART_SetConfig+0x100>
 800fbe6:	2310      	movs	r3, #16
 800fbe8:	64bb      	str	r3, [r7, #72]	; 0x48
 800fbea:	e009      	b.n	800fc00 <UART_SetConfig+0x114>
 800fbec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fbee:	681a      	ldr	r2, [r3, #0]
 800fbf0:	4b42      	ldr	r3, [pc, #264]	; (800fcfc <UART_SetConfig+0x210>)
 800fbf2:	429a      	cmp	r2, r3
 800fbf4:	d102      	bne.n	800fbfc <UART_SetConfig+0x110>
 800fbf6:	2320      	movs	r3, #32
 800fbf8:	64bb      	str	r3, [r7, #72]	; 0x48
 800fbfa:	e001      	b.n	800fc00 <UART_SetConfig+0x114>
 800fbfc:	2300      	movs	r3, #0
 800fbfe:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800fc00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc02:	681a      	ldr	r2, [r3, #0]
 800fc04:	4b3d      	ldr	r3, [pc, #244]	; (800fcfc <UART_SetConfig+0x210>)
 800fc06:	429a      	cmp	r2, r3
 800fc08:	d005      	beq.n	800fc16 <UART_SetConfig+0x12a>
 800fc0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc0c:	681a      	ldr	r2, [r3, #0]
 800fc0e:	4b3d      	ldr	r3, [pc, #244]	; (800fd04 <UART_SetConfig+0x218>)
 800fc10:	429a      	cmp	r2, r3
 800fc12:	f040 8085 	bne.w	800fd20 <UART_SetConfig+0x234>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800fc16:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fc18:	2200      	movs	r2, #0
 800fc1a:	623b      	str	r3, [r7, #32]
 800fc1c:	627a      	str	r2, [r7, #36]	; 0x24
 800fc1e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800fc22:	f7fd ff73 	bl	800db0c <HAL_RCCEx_GetPeriphCLKFreq>
 800fc26:	6438      	str	r0, [r7, #64]	; 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 800fc28:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fc2a:	2b00      	cmp	r3, #0
 800fc2c:	f000 80e8 	beq.w	800fe00 <UART_SetConfig+0x314>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800fc30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fc34:	4a39      	ldr	r2, [pc, #228]	; (800fd1c <UART_SetConfig+0x230>)
 800fc36:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800fc3a:	461a      	mov	r2, r3
 800fc3c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fc3e:	fbb3 f3f2 	udiv	r3, r3, r2
 800fc42:	637b      	str	r3, [r7, #52]	; 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800fc44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc46:	685a      	ldr	r2, [r3, #4]
 800fc48:	4613      	mov	r3, r2
 800fc4a:	005b      	lsls	r3, r3, #1
 800fc4c:	4413      	add	r3, r2
 800fc4e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800fc50:	429a      	cmp	r2, r3
 800fc52:	d305      	bcc.n	800fc60 <UART_SetConfig+0x174>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800fc54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc56:	685b      	ldr	r3, [r3, #4]
 800fc58:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800fc5a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800fc5c:	429a      	cmp	r2, r3
 800fc5e:	d903      	bls.n	800fc68 <UART_SetConfig+0x17c>
      {
        ret = HAL_ERROR;
 800fc60:	2301      	movs	r3, #1
 800fc62:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800fc66:	e048      	b.n	800fcfa <UART_SetConfig+0x20e>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800fc68:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fc6a:	2200      	movs	r2, #0
 800fc6c:	61bb      	str	r3, [r7, #24]
 800fc6e:	61fa      	str	r2, [r7, #28]
 800fc70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fc74:	4a29      	ldr	r2, [pc, #164]	; (800fd1c <UART_SetConfig+0x230>)
 800fc76:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800fc7a:	b29b      	uxth	r3, r3
 800fc7c:	2200      	movs	r2, #0
 800fc7e:	613b      	str	r3, [r7, #16]
 800fc80:	617a      	str	r2, [r7, #20]
 800fc82:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800fc86:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800fc8a:	f7f1 f82f 	bl	8000cec <__aeabi_uldivmod>
 800fc8e:	4602      	mov	r2, r0
 800fc90:	460b      	mov	r3, r1
 800fc92:	4610      	mov	r0, r2
 800fc94:	4619      	mov	r1, r3
 800fc96:	f04f 0200 	mov.w	r2, #0
 800fc9a:	f04f 0300 	mov.w	r3, #0
 800fc9e:	020b      	lsls	r3, r1, #8
 800fca0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800fca4:	0202      	lsls	r2, r0, #8
 800fca6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800fca8:	6849      	ldr	r1, [r1, #4]
 800fcaa:	0849      	lsrs	r1, r1, #1
 800fcac:	2000      	movs	r0, #0
 800fcae:	460c      	mov	r4, r1
 800fcb0:	4605      	mov	r5, r0
 800fcb2:	eb12 0804 	adds.w	r8, r2, r4
 800fcb6:	eb43 0905 	adc.w	r9, r3, r5
 800fcba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fcbc:	685b      	ldr	r3, [r3, #4]
 800fcbe:	2200      	movs	r2, #0
 800fcc0:	60bb      	str	r3, [r7, #8]
 800fcc2:	60fa      	str	r2, [r7, #12]
 800fcc4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800fcc8:	4640      	mov	r0, r8
 800fcca:	4649      	mov	r1, r9
 800fccc:	f7f1 f80e 	bl	8000cec <__aeabi_uldivmod>
 800fcd0:	4602      	mov	r2, r0
 800fcd2:	460b      	mov	r3, r1
 800fcd4:	4613      	mov	r3, r2
 800fcd6:	63fb      	str	r3, [r7, #60]	; 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800fcd8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fcda:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800fcde:	d308      	bcc.n	800fcf2 <UART_SetConfig+0x206>
 800fce0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fce2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800fce6:	d204      	bcs.n	800fcf2 <UART_SetConfig+0x206>
        {
          huart->Instance->BRR = usartdiv;
 800fce8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fcea:	681b      	ldr	r3, [r3, #0]
 800fcec:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800fcee:	60da      	str	r2, [r3, #12]
 800fcf0:	e003      	b.n	800fcfa <UART_SetConfig+0x20e>
        }
        else
        {
          ret = HAL_ERROR;
 800fcf2:	2301      	movs	r3, #1
 800fcf4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if (pclk != 0U)
 800fcf8:	e082      	b.n	800fe00 <UART_SetConfig+0x314>
 800fcfa:	e081      	b.n	800fe00 <UART_SetConfig+0x314>
 800fcfc:	46002400 	.word	0x46002400
 800fd00:	cfff69f3 	.word	0xcfff69f3
 800fd04:	56002400 	.word	0x56002400
 800fd08:	40013800 	.word	0x40013800
 800fd0c:	40004400 	.word	0x40004400
 800fd10:	40004800 	.word	0x40004800
 800fd14:	40004c00 	.word	0x40004c00
 800fd18:	40005000 	.word	0x40005000
 800fd1c:	080150ec 	.word	0x080150ec
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800fd20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd22:	69db      	ldr	r3, [r3, #28]
 800fd24:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800fd28:	d13c      	bne.n	800fda4 <UART_SetConfig+0x2b8>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800fd2a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fd2c:	2200      	movs	r2, #0
 800fd2e:	603b      	str	r3, [r7, #0]
 800fd30:	607a      	str	r2, [r7, #4]
 800fd32:	e9d7 0100 	ldrd	r0, r1, [r7]
 800fd36:	f7fd fee9 	bl	800db0c <HAL_RCCEx_GetPeriphCLKFreq>
 800fd3a:	6438      	str	r0, [r7, #64]	; 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800fd3c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fd3e:	2b00      	cmp	r3, #0
 800fd40:	d05e      	beq.n	800fe00 <UART_SetConfig+0x314>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800fd42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fd46:	4a39      	ldr	r2, [pc, #228]	; (800fe2c <UART_SetConfig+0x340>)
 800fd48:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800fd4c:	461a      	mov	r2, r3
 800fd4e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fd50:	fbb3 f3f2 	udiv	r3, r3, r2
 800fd54:	005a      	lsls	r2, r3, #1
 800fd56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd58:	685b      	ldr	r3, [r3, #4]
 800fd5a:	085b      	lsrs	r3, r3, #1
 800fd5c:	441a      	add	r2, r3
 800fd5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd60:	685b      	ldr	r3, [r3, #4]
 800fd62:	fbb2 f3f3 	udiv	r3, r2, r3
 800fd66:	63fb      	str	r3, [r7, #60]	; 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800fd68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fd6a:	2b0f      	cmp	r3, #15
 800fd6c:	d916      	bls.n	800fd9c <UART_SetConfig+0x2b0>
 800fd6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fd70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800fd74:	d212      	bcs.n	800fd9c <UART_SetConfig+0x2b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800fd76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fd78:	b29b      	uxth	r3, r3
 800fd7a:	f023 030f 	bic.w	r3, r3, #15
 800fd7e:	877b      	strh	r3, [r7, #58]	; 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800fd80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fd82:	085b      	lsrs	r3, r3, #1
 800fd84:	b29b      	uxth	r3, r3
 800fd86:	f003 0307 	and.w	r3, r3, #7
 800fd8a:	b29a      	uxth	r2, r3
 800fd8c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800fd8e:	4313      	orrs	r3, r2
 800fd90:	877b      	strh	r3, [r7, #58]	; 0x3a
        huart->Instance->BRR = brrtemp;
 800fd92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd94:	681b      	ldr	r3, [r3, #0]
 800fd96:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800fd98:	60da      	str	r2, [r3, #12]
 800fd9a:	e031      	b.n	800fe00 <UART_SetConfig+0x314>
      }
      else
      {
        ret = HAL_ERROR;
 800fd9c:	2301      	movs	r3, #1
 800fd9e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800fda2:	e02d      	b.n	800fe00 <UART_SetConfig+0x314>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800fda4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fda6:	2200      	movs	r2, #0
 800fda8:	469a      	mov	sl, r3
 800fdaa:	4693      	mov	fp, r2
 800fdac:	4650      	mov	r0, sl
 800fdae:	4659      	mov	r1, fp
 800fdb0:	f7fd feac 	bl	800db0c <HAL_RCCEx_GetPeriphCLKFreq>
 800fdb4:	6438      	str	r0, [r7, #64]	; 0x40

    if (pclk != 0U)
 800fdb6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fdb8:	2b00      	cmp	r3, #0
 800fdba:	d021      	beq.n	800fe00 <UART_SetConfig+0x314>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800fdbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fdbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fdc0:	4a1a      	ldr	r2, [pc, #104]	; (800fe2c <UART_SetConfig+0x340>)
 800fdc2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800fdc6:	461a      	mov	r2, r3
 800fdc8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fdca:	fbb3 f2f2 	udiv	r2, r3, r2
 800fdce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fdd0:	685b      	ldr	r3, [r3, #4]
 800fdd2:	085b      	lsrs	r3, r3, #1
 800fdd4:	441a      	add	r2, r3
 800fdd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fdd8:	685b      	ldr	r3, [r3, #4]
 800fdda:	fbb2 f3f3 	udiv	r3, r2, r3
 800fdde:	63fb      	str	r3, [r7, #60]	; 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800fde0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fde2:	2b0f      	cmp	r3, #15
 800fde4:	d909      	bls.n	800fdfa <UART_SetConfig+0x30e>
 800fde6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fde8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800fdec:	d205      	bcs.n	800fdfa <UART_SetConfig+0x30e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800fdee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fdf0:	b29a      	uxth	r2, r3
 800fdf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fdf4:	681b      	ldr	r3, [r3, #0]
 800fdf6:	60da      	str	r2, [r3, #12]
 800fdf8:	e002      	b.n	800fe00 <UART_SetConfig+0x314>
      }
      else
      {
        ret = HAL_ERROR;
 800fdfa:	2301      	movs	r3, #1
 800fdfc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800fe00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe02:	2201      	movs	r2, #1
 800fe04:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800fe08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe0a:	2201      	movs	r2, #1
 800fe0c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800fe10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe12:	2200      	movs	r2, #0
 800fe14:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800fe16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe18:	2200      	movs	r2, #0
 800fe1a:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800fe1c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 800fe20:	4618      	mov	r0, r3
 800fe22:	3750      	adds	r7, #80	; 0x50
 800fe24:	46bd      	mov	sp, r7
 800fe26:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800fe2a:	bf00      	nop
 800fe2c:	080150ec 	.word	0x080150ec

0800fe30 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800fe30:	b480      	push	{r7}
 800fe32:	b083      	sub	sp, #12
 800fe34:	af00      	add	r7, sp, #0
 800fe36:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800fe38:	687b      	ldr	r3, [r7, #4]
 800fe3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fe3c:	f003 0301 	and.w	r3, r3, #1
 800fe40:	2b00      	cmp	r3, #0
 800fe42:	d00a      	beq.n	800fe5a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800fe44:	687b      	ldr	r3, [r7, #4]
 800fe46:	681b      	ldr	r3, [r3, #0]
 800fe48:	685b      	ldr	r3, [r3, #4]
 800fe4a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800fe4e:	687b      	ldr	r3, [r7, #4]
 800fe50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fe52:	687b      	ldr	r3, [r7, #4]
 800fe54:	681b      	ldr	r3, [r3, #0]
 800fe56:	430a      	orrs	r2, r1
 800fe58:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800fe5a:	687b      	ldr	r3, [r7, #4]
 800fe5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fe5e:	f003 0302 	and.w	r3, r3, #2
 800fe62:	2b00      	cmp	r3, #0
 800fe64:	d00a      	beq.n	800fe7c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800fe66:	687b      	ldr	r3, [r7, #4]
 800fe68:	681b      	ldr	r3, [r3, #0]
 800fe6a:	685b      	ldr	r3, [r3, #4]
 800fe6c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800fe70:	687b      	ldr	r3, [r7, #4]
 800fe72:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800fe74:	687b      	ldr	r3, [r7, #4]
 800fe76:	681b      	ldr	r3, [r3, #0]
 800fe78:	430a      	orrs	r2, r1
 800fe7a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800fe7c:	687b      	ldr	r3, [r7, #4]
 800fe7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fe80:	f003 0304 	and.w	r3, r3, #4
 800fe84:	2b00      	cmp	r3, #0
 800fe86:	d00a      	beq.n	800fe9e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800fe88:	687b      	ldr	r3, [r7, #4]
 800fe8a:	681b      	ldr	r3, [r3, #0]
 800fe8c:	685b      	ldr	r3, [r3, #4]
 800fe8e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800fe92:	687b      	ldr	r3, [r7, #4]
 800fe94:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800fe96:	687b      	ldr	r3, [r7, #4]
 800fe98:	681b      	ldr	r3, [r3, #0]
 800fe9a:	430a      	orrs	r2, r1
 800fe9c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800fe9e:	687b      	ldr	r3, [r7, #4]
 800fea0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fea2:	f003 0308 	and.w	r3, r3, #8
 800fea6:	2b00      	cmp	r3, #0
 800fea8:	d00a      	beq.n	800fec0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800feaa:	687b      	ldr	r3, [r7, #4]
 800feac:	681b      	ldr	r3, [r3, #0]
 800feae:	685b      	ldr	r3, [r3, #4]
 800feb0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800feb4:	687b      	ldr	r3, [r7, #4]
 800feb6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800feb8:	687b      	ldr	r3, [r7, #4]
 800feba:	681b      	ldr	r3, [r3, #0]
 800febc:	430a      	orrs	r2, r1
 800febe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800fec0:	687b      	ldr	r3, [r7, #4]
 800fec2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fec4:	f003 0310 	and.w	r3, r3, #16
 800fec8:	2b00      	cmp	r3, #0
 800feca:	d00a      	beq.n	800fee2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800fecc:	687b      	ldr	r3, [r7, #4]
 800fece:	681b      	ldr	r3, [r3, #0]
 800fed0:	689b      	ldr	r3, [r3, #8]
 800fed2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800fed6:	687b      	ldr	r3, [r7, #4]
 800fed8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800feda:	687b      	ldr	r3, [r7, #4]
 800fedc:	681b      	ldr	r3, [r3, #0]
 800fede:	430a      	orrs	r2, r1
 800fee0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800fee2:	687b      	ldr	r3, [r7, #4]
 800fee4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fee6:	f003 0320 	and.w	r3, r3, #32
 800feea:	2b00      	cmp	r3, #0
 800feec:	d00a      	beq.n	800ff04 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800feee:	687b      	ldr	r3, [r7, #4]
 800fef0:	681b      	ldr	r3, [r3, #0]
 800fef2:	689b      	ldr	r3, [r3, #8]
 800fef4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800fef8:	687b      	ldr	r3, [r7, #4]
 800fefa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800fefc:	687b      	ldr	r3, [r7, #4]
 800fefe:	681b      	ldr	r3, [r3, #0]
 800ff00:	430a      	orrs	r2, r1
 800ff02:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800ff04:	687b      	ldr	r3, [r7, #4]
 800ff06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ff08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ff0c:	2b00      	cmp	r3, #0
 800ff0e:	d01a      	beq.n	800ff46 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800ff10:	687b      	ldr	r3, [r7, #4]
 800ff12:	681b      	ldr	r3, [r3, #0]
 800ff14:	685b      	ldr	r3, [r3, #4]
 800ff16:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800ff1a:	687b      	ldr	r3, [r7, #4]
 800ff1c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ff1e:	687b      	ldr	r3, [r7, #4]
 800ff20:	681b      	ldr	r3, [r3, #0]
 800ff22:	430a      	orrs	r2, r1
 800ff24:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800ff26:	687b      	ldr	r3, [r7, #4]
 800ff28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ff2a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ff2e:	d10a      	bne.n	800ff46 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800ff30:	687b      	ldr	r3, [r7, #4]
 800ff32:	681b      	ldr	r3, [r3, #0]
 800ff34:	685b      	ldr	r3, [r3, #4]
 800ff36:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800ff3a:	687b      	ldr	r3, [r7, #4]
 800ff3c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800ff3e:	687b      	ldr	r3, [r7, #4]
 800ff40:	681b      	ldr	r3, [r3, #0]
 800ff42:	430a      	orrs	r2, r1
 800ff44:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800ff46:	687b      	ldr	r3, [r7, #4]
 800ff48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ff4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ff4e:	2b00      	cmp	r3, #0
 800ff50:	d00a      	beq.n	800ff68 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800ff52:	687b      	ldr	r3, [r7, #4]
 800ff54:	681b      	ldr	r3, [r3, #0]
 800ff56:	685b      	ldr	r3, [r3, #4]
 800ff58:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800ff5c:	687b      	ldr	r3, [r7, #4]
 800ff5e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ff60:	687b      	ldr	r3, [r7, #4]
 800ff62:	681b      	ldr	r3, [r3, #0]
 800ff64:	430a      	orrs	r2, r1
 800ff66:	605a      	str	r2, [r3, #4]
  }
}
 800ff68:	bf00      	nop
 800ff6a:	370c      	adds	r7, #12
 800ff6c:	46bd      	mov	sp, r7
 800ff6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff72:	4770      	bx	lr

0800ff74 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800ff74:	b580      	push	{r7, lr}
 800ff76:	b086      	sub	sp, #24
 800ff78:	af02      	add	r7, sp, #8
 800ff7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ff7c:	687b      	ldr	r3, [r7, #4]
 800ff7e:	2200      	movs	r2, #0
 800ff80:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800ff84:	f7f6 fcdc 	bl	8006940 <HAL_GetTick>
 800ff88:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800ff8a:	687b      	ldr	r3, [r7, #4]
 800ff8c:	681b      	ldr	r3, [r3, #0]
 800ff8e:	681b      	ldr	r3, [r3, #0]
 800ff90:	f003 0308 	and.w	r3, r3, #8
 800ff94:	2b08      	cmp	r3, #8
 800ff96:	d10e      	bne.n	800ffb6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ff98:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ff9c:	9300      	str	r3, [sp, #0]
 800ff9e:	68fb      	ldr	r3, [r7, #12]
 800ffa0:	2200      	movs	r2, #0
 800ffa2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800ffa6:	6878      	ldr	r0, [r7, #4]
 800ffa8:	f000 f82f 	bl	801000a <UART_WaitOnFlagUntilTimeout>
 800ffac:	4603      	mov	r3, r0
 800ffae:	2b00      	cmp	r3, #0
 800ffb0:	d001      	beq.n	800ffb6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ffb2:	2303      	movs	r3, #3
 800ffb4:	e025      	b.n	8010002 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800ffb6:	687b      	ldr	r3, [r7, #4]
 800ffb8:	681b      	ldr	r3, [r3, #0]
 800ffba:	681b      	ldr	r3, [r3, #0]
 800ffbc:	f003 0304 	and.w	r3, r3, #4
 800ffc0:	2b04      	cmp	r3, #4
 800ffc2:	d10e      	bne.n	800ffe2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ffc4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ffc8:	9300      	str	r3, [sp, #0]
 800ffca:	68fb      	ldr	r3, [r7, #12]
 800ffcc:	2200      	movs	r2, #0
 800ffce:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800ffd2:	6878      	ldr	r0, [r7, #4]
 800ffd4:	f000 f819 	bl	801000a <UART_WaitOnFlagUntilTimeout>
 800ffd8:	4603      	mov	r3, r0
 800ffda:	2b00      	cmp	r3, #0
 800ffdc:	d001      	beq.n	800ffe2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ffde:	2303      	movs	r3, #3
 800ffe0:	e00f      	b.n	8010002 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800ffe2:	687b      	ldr	r3, [r7, #4]
 800ffe4:	2220      	movs	r2, #32
 800ffe6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800ffea:	687b      	ldr	r3, [r7, #4]
 800ffec:	2220      	movs	r2, #32
 800ffee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fff2:	687b      	ldr	r3, [r7, #4]
 800fff4:	2200      	movs	r2, #0
 800fff6:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800fff8:	687b      	ldr	r3, [r7, #4]
 800fffa:	2200      	movs	r2, #0
 800fffc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8010000:	2300      	movs	r3, #0
}
 8010002:	4618      	mov	r0, r3
 8010004:	3710      	adds	r7, #16
 8010006:	46bd      	mov	sp, r7
 8010008:	bd80      	pop	{r7, pc}

0801000a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 801000a:	b580      	push	{r7, lr}
 801000c:	b09c      	sub	sp, #112	; 0x70
 801000e:	af00      	add	r7, sp, #0
 8010010:	60f8      	str	r0, [r7, #12]
 8010012:	60b9      	str	r1, [r7, #8]
 8010014:	603b      	str	r3, [r7, #0]
 8010016:	4613      	mov	r3, r2
 8010018:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801001a:	e0a9      	b.n	8010170 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801001c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801001e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010022:	f000 80a5 	beq.w	8010170 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8010026:	f7f6 fc8b 	bl	8006940 <HAL_GetTick>
 801002a:	4602      	mov	r2, r0
 801002c:	683b      	ldr	r3, [r7, #0]
 801002e:	1ad3      	subs	r3, r2, r3
 8010030:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8010032:	429a      	cmp	r2, r3
 8010034:	d302      	bcc.n	801003c <UART_WaitOnFlagUntilTimeout+0x32>
 8010036:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8010038:	2b00      	cmp	r3, #0
 801003a:	d140      	bne.n	80100be <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 801003c:	68fb      	ldr	r3, [r7, #12]
 801003e:	681b      	ldr	r3, [r3, #0]
 8010040:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010042:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010044:	e853 3f00 	ldrex	r3, [r3]
 8010048:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 801004a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801004c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8010050:	667b      	str	r3, [r7, #100]	; 0x64
 8010052:	68fb      	ldr	r3, [r7, #12]
 8010054:	681b      	ldr	r3, [r3, #0]
 8010056:	461a      	mov	r2, r3
 8010058:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801005a:	65fb      	str	r3, [r7, #92]	; 0x5c
 801005c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801005e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8010060:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8010062:	e841 2300 	strex	r3, r2, [r1]
 8010066:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8010068:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801006a:	2b00      	cmp	r3, #0
 801006c:	d1e6      	bne.n	801003c <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801006e:	68fb      	ldr	r3, [r7, #12]
 8010070:	681b      	ldr	r3, [r3, #0]
 8010072:	3308      	adds	r3, #8
 8010074:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010076:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010078:	e853 3f00 	ldrex	r3, [r3]
 801007c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 801007e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010080:	f023 0301 	bic.w	r3, r3, #1
 8010084:	663b      	str	r3, [r7, #96]	; 0x60
 8010086:	68fb      	ldr	r3, [r7, #12]
 8010088:	681b      	ldr	r3, [r3, #0]
 801008a:	3308      	adds	r3, #8
 801008c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801008e:	64ba      	str	r2, [r7, #72]	; 0x48
 8010090:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010092:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8010094:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010096:	e841 2300 	strex	r3, r2, [r1]
 801009a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 801009c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801009e:	2b00      	cmp	r3, #0
 80100a0:	d1e5      	bne.n	801006e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80100a2:	68fb      	ldr	r3, [r7, #12]
 80100a4:	2220      	movs	r2, #32
 80100a6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80100aa:	68fb      	ldr	r3, [r7, #12]
 80100ac:	2220      	movs	r2, #32
 80100ae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80100b2:	68fb      	ldr	r3, [r7, #12]
 80100b4:	2200      	movs	r2, #0
 80100b6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80100ba:	2303      	movs	r3, #3
 80100bc:	e069      	b.n	8010192 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80100be:	68fb      	ldr	r3, [r7, #12]
 80100c0:	681b      	ldr	r3, [r3, #0]
 80100c2:	681b      	ldr	r3, [r3, #0]
 80100c4:	f003 0304 	and.w	r3, r3, #4
 80100c8:	2b00      	cmp	r3, #0
 80100ca:	d051      	beq.n	8010170 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80100cc:	68fb      	ldr	r3, [r7, #12]
 80100ce:	681b      	ldr	r3, [r3, #0]
 80100d0:	69db      	ldr	r3, [r3, #28]
 80100d2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80100d6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80100da:	d149      	bne.n	8010170 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80100dc:	68fb      	ldr	r3, [r7, #12]
 80100de:	681b      	ldr	r3, [r3, #0]
 80100e0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80100e4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80100e6:	68fb      	ldr	r3, [r7, #12]
 80100e8:	681b      	ldr	r3, [r3, #0]
 80100ea:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80100ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80100ee:	e853 3f00 	ldrex	r3, [r3]
 80100f2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80100f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80100f6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80100fa:	66fb      	str	r3, [r7, #108]	; 0x6c
 80100fc:	68fb      	ldr	r3, [r7, #12]
 80100fe:	681b      	ldr	r3, [r3, #0]
 8010100:	461a      	mov	r2, r3
 8010102:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010104:	637b      	str	r3, [r7, #52]	; 0x34
 8010106:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010108:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801010a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801010c:	e841 2300 	strex	r3, r2, [r1]
 8010110:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8010112:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010114:	2b00      	cmp	r3, #0
 8010116:	d1e6      	bne.n	80100e6 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010118:	68fb      	ldr	r3, [r7, #12]
 801011a:	681b      	ldr	r3, [r3, #0]
 801011c:	3308      	adds	r3, #8
 801011e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010120:	697b      	ldr	r3, [r7, #20]
 8010122:	e853 3f00 	ldrex	r3, [r3]
 8010126:	613b      	str	r3, [r7, #16]
   return(result);
 8010128:	693b      	ldr	r3, [r7, #16]
 801012a:	f023 0301 	bic.w	r3, r3, #1
 801012e:	66bb      	str	r3, [r7, #104]	; 0x68
 8010130:	68fb      	ldr	r3, [r7, #12]
 8010132:	681b      	ldr	r3, [r3, #0]
 8010134:	3308      	adds	r3, #8
 8010136:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8010138:	623a      	str	r2, [r7, #32]
 801013a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801013c:	69f9      	ldr	r1, [r7, #28]
 801013e:	6a3a      	ldr	r2, [r7, #32]
 8010140:	e841 2300 	strex	r3, r2, [r1]
 8010144:	61bb      	str	r3, [r7, #24]
   return(result);
 8010146:	69bb      	ldr	r3, [r7, #24]
 8010148:	2b00      	cmp	r3, #0
 801014a:	d1e5      	bne.n	8010118 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 801014c:	68fb      	ldr	r3, [r7, #12]
 801014e:	2220      	movs	r2, #32
 8010150:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8010154:	68fb      	ldr	r3, [r7, #12]
 8010156:	2220      	movs	r2, #32
 8010158:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 801015c:	68fb      	ldr	r3, [r7, #12]
 801015e:	2220      	movs	r2, #32
 8010160:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8010164:	68fb      	ldr	r3, [r7, #12]
 8010166:	2200      	movs	r2, #0
 8010168:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 801016c:	2303      	movs	r3, #3
 801016e:	e010      	b.n	8010192 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8010170:	68fb      	ldr	r3, [r7, #12]
 8010172:	681b      	ldr	r3, [r3, #0]
 8010174:	69da      	ldr	r2, [r3, #28]
 8010176:	68bb      	ldr	r3, [r7, #8]
 8010178:	4013      	ands	r3, r2
 801017a:	68ba      	ldr	r2, [r7, #8]
 801017c:	429a      	cmp	r2, r3
 801017e:	bf0c      	ite	eq
 8010180:	2301      	moveq	r3, #1
 8010182:	2300      	movne	r3, #0
 8010184:	b2db      	uxtb	r3, r3
 8010186:	461a      	mov	r2, r3
 8010188:	79fb      	ldrb	r3, [r7, #7]
 801018a:	429a      	cmp	r2, r3
 801018c:	f43f af46 	beq.w	801001c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8010190:	2300      	movs	r3, #0
}
 8010192:	4618      	mov	r0, r3
 8010194:	3770      	adds	r7, #112	; 0x70
 8010196:	46bd      	mov	sp, r7
 8010198:	bd80      	pop	{r7, pc}

0801019a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 801019a:	b480      	push	{r7}
 801019c:	b085      	sub	sp, #20
 801019e:	af00      	add	r7, sp, #0
 80101a0:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80101a2:	687b      	ldr	r3, [r7, #4]
 80101a4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80101a8:	2b01      	cmp	r3, #1
 80101aa:	d101      	bne.n	80101b0 <HAL_UARTEx_DisableFifoMode+0x16>
 80101ac:	2302      	movs	r3, #2
 80101ae:	e027      	b.n	8010200 <HAL_UARTEx_DisableFifoMode+0x66>
 80101b0:	687b      	ldr	r3, [r7, #4]
 80101b2:	2201      	movs	r2, #1
 80101b4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80101b8:	687b      	ldr	r3, [r7, #4]
 80101ba:	2224      	movs	r2, #36	; 0x24
 80101bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80101c0:	687b      	ldr	r3, [r7, #4]
 80101c2:	681b      	ldr	r3, [r3, #0]
 80101c4:	681b      	ldr	r3, [r3, #0]
 80101c6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80101c8:	687b      	ldr	r3, [r7, #4]
 80101ca:	681b      	ldr	r3, [r3, #0]
 80101cc:	681a      	ldr	r2, [r3, #0]
 80101ce:	687b      	ldr	r3, [r7, #4]
 80101d0:	681b      	ldr	r3, [r3, #0]
 80101d2:	f022 0201 	bic.w	r2, r2, #1
 80101d6:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80101d8:	68fb      	ldr	r3, [r7, #12]
 80101da:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80101de:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80101e0:	687b      	ldr	r3, [r7, #4]
 80101e2:	2200      	movs	r2, #0
 80101e4:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80101e6:	687b      	ldr	r3, [r7, #4]
 80101e8:	681b      	ldr	r3, [r3, #0]
 80101ea:	68fa      	ldr	r2, [r7, #12]
 80101ec:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80101ee:	687b      	ldr	r3, [r7, #4]
 80101f0:	2220      	movs	r2, #32
 80101f2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80101f6:	687b      	ldr	r3, [r7, #4]
 80101f8:	2200      	movs	r2, #0
 80101fa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80101fe:	2300      	movs	r3, #0
}
 8010200:	4618      	mov	r0, r3
 8010202:	3714      	adds	r7, #20
 8010204:	46bd      	mov	sp, r7
 8010206:	f85d 7b04 	ldr.w	r7, [sp], #4
 801020a:	4770      	bx	lr

0801020c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 801020c:	b580      	push	{r7, lr}
 801020e:	b084      	sub	sp, #16
 8010210:	af00      	add	r7, sp, #0
 8010212:	6078      	str	r0, [r7, #4]
 8010214:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8010216:	687b      	ldr	r3, [r7, #4]
 8010218:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 801021c:	2b01      	cmp	r3, #1
 801021e:	d101      	bne.n	8010224 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8010220:	2302      	movs	r3, #2
 8010222:	e02d      	b.n	8010280 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8010224:	687b      	ldr	r3, [r7, #4]
 8010226:	2201      	movs	r2, #1
 8010228:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 801022c:	687b      	ldr	r3, [r7, #4]
 801022e:	2224      	movs	r2, #36	; 0x24
 8010230:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8010234:	687b      	ldr	r3, [r7, #4]
 8010236:	681b      	ldr	r3, [r3, #0]
 8010238:	681b      	ldr	r3, [r3, #0]
 801023a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801023c:	687b      	ldr	r3, [r7, #4]
 801023e:	681b      	ldr	r3, [r3, #0]
 8010240:	681a      	ldr	r2, [r3, #0]
 8010242:	687b      	ldr	r3, [r7, #4]
 8010244:	681b      	ldr	r3, [r3, #0]
 8010246:	f022 0201 	bic.w	r2, r2, #1
 801024a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 801024c:	687b      	ldr	r3, [r7, #4]
 801024e:	681b      	ldr	r3, [r3, #0]
 8010250:	689b      	ldr	r3, [r3, #8]
 8010252:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8010256:	687b      	ldr	r3, [r7, #4]
 8010258:	681b      	ldr	r3, [r3, #0]
 801025a:	683a      	ldr	r2, [r7, #0]
 801025c:	430a      	orrs	r2, r1
 801025e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8010260:	6878      	ldr	r0, [r7, #4]
 8010262:	f000 f84f 	bl	8010304 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010266:	687b      	ldr	r3, [r7, #4]
 8010268:	681b      	ldr	r3, [r3, #0]
 801026a:	68fa      	ldr	r2, [r7, #12]
 801026c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801026e:	687b      	ldr	r3, [r7, #4]
 8010270:	2220      	movs	r2, #32
 8010272:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010276:	687b      	ldr	r3, [r7, #4]
 8010278:	2200      	movs	r2, #0
 801027a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 801027e:	2300      	movs	r3, #0
}
 8010280:	4618      	mov	r0, r3
 8010282:	3710      	adds	r7, #16
 8010284:	46bd      	mov	sp, r7
 8010286:	bd80      	pop	{r7, pc}

08010288 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8010288:	b580      	push	{r7, lr}
 801028a:	b084      	sub	sp, #16
 801028c:	af00      	add	r7, sp, #0
 801028e:	6078      	str	r0, [r7, #4]
 8010290:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8010292:	687b      	ldr	r3, [r7, #4]
 8010294:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8010298:	2b01      	cmp	r3, #1
 801029a:	d101      	bne.n	80102a0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 801029c:	2302      	movs	r3, #2
 801029e:	e02d      	b.n	80102fc <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80102a0:	687b      	ldr	r3, [r7, #4]
 80102a2:	2201      	movs	r2, #1
 80102a4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80102a8:	687b      	ldr	r3, [r7, #4]
 80102aa:	2224      	movs	r2, #36	; 0x24
 80102ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80102b0:	687b      	ldr	r3, [r7, #4]
 80102b2:	681b      	ldr	r3, [r3, #0]
 80102b4:	681b      	ldr	r3, [r3, #0]
 80102b6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80102b8:	687b      	ldr	r3, [r7, #4]
 80102ba:	681b      	ldr	r3, [r3, #0]
 80102bc:	681a      	ldr	r2, [r3, #0]
 80102be:	687b      	ldr	r3, [r7, #4]
 80102c0:	681b      	ldr	r3, [r3, #0]
 80102c2:	f022 0201 	bic.w	r2, r2, #1
 80102c6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80102c8:	687b      	ldr	r3, [r7, #4]
 80102ca:	681b      	ldr	r3, [r3, #0]
 80102cc:	689b      	ldr	r3, [r3, #8]
 80102ce:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80102d2:	687b      	ldr	r3, [r7, #4]
 80102d4:	681b      	ldr	r3, [r3, #0]
 80102d6:	683a      	ldr	r2, [r7, #0]
 80102d8:	430a      	orrs	r2, r1
 80102da:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80102dc:	6878      	ldr	r0, [r7, #4]
 80102de:	f000 f811 	bl	8010304 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80102e2:	687b      	ldr	r3, [r7, #4]
 80102e4:	681b      	ldr	r3, [r3, #0]
 80102e6:	68fa      	ldr	r2, [r7, #12]
 80102e8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80102ea:	687b      	ldr	r3, [r7, #4]
 80102ec:	2220      	movs	r2, #32
 80102ee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80102f2:	687b      	ldr	r3, [r7, #4]
 80102f4:	2200      	movs	r2, #0
 80102f6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80102fa:	2300      	movs	r3, #0
}
 80102fc:	4618      	mov	r0, r3
 80102fe:	3710      	adds	r7, #16
 8010300:	46bd      	mov	sp, r7
 8010302:	bd80      	pop	{r7, pc}

08010304 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8010304:	b480      	push	{r7}
 8010306:	b085      	sub	sp, #20
 8010308:	af00      	add	r7, sp, #0
 801030a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 801030c:	687b      	ldr	r3, [r7, #4]
 801030e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010310:	2b00      	cmp	r3, #0
 8010312:	d108      	bne.n	8010326 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8010314:	687b      	ldr	r3, [r7, #4]
 8010316:	2201      	movs	r2, #1
 8010318:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 801031c:	687b      	ldr	r3, [r7, #4]
 801031e:	2201      	movs	r2, #1
 8010320:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8010324:	e031      	b.n	801038a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8010326:	2308      	movs	r3, #8
 8010328:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 801032a:	2308      	movs	r3, #8
 801032c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 801032e:	687b      	ldr	r3, [r7, #4]
 8010330:	681b      	ldr	r3, [r3, #0]
 8010332:	689b      	ldr	r3, [r3, #8]
 8010334:	0e5b      	lsrs	r3, r3, #25
 8010336:	b2db      	uxtb	r3, r3
 8010338:	f003 0307 	and.w	r3, r3, #7
 801033c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 801033e:	687b      	ldr	r3, [r7, #4]
 8010340:	681b      	ldr	r3, [r3, #0]
 8010342:	689b      	ldr	r3, [r3, #8]
 8010344:	0f5b      	lsrs	r3, r3, #29
 8010346:	b2db      	uxtb	r3, r3
 8010348:	f003 0307 	and.w	r3, r3, #7
 801034c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 801034e:	7bbb      	ldrb	r3, [r7, #14]
 8010350:	7b3a      	ldrb	r2, [r7, #12]
 8010352:	4911      	ldr	r1, [pc, #68]	; (8010398 <UARTEx_SetNbDataToProcess+0x94>)
 8010354:	5c8a      	ldrb	r2, [r1, r2]
 8010356:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 801035a:	7b3a      	ldrb	r2, [r7, #12]
 801035c:	490f      	ldr	r1, [pc, #60]	; (801039c <UARTEx_SetNbDataToProcess+0x98>)
 801035e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8010360:	fb93 f3f2 	sdiv	r3, r3, r2
 8010364:	b29a      	uxth	r2, r3
 8010366:	687b      	ldr	r3, [r7, #4]
 8010368:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 801036c:	7bfb      	ldrb	r3, [r7, #15]
 801036e:	7b7a      	ldrb	r2, [r7, #13]
 8010370:	4909      	ldr	r1, [pc, #36]	; (8010398 <UARTEx_SetNbDataToProcess+0x94>)
 8010372:	5c8a      	ldrb	r2, [r1, r2]
 8010374:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8010378:	7b7a      	ldrb	r2, [r7, #13]
 801037a:	4908      	ldr	r1, [pc, #32]	; (801039c <UARTEx_SetNbDataToProcess+0x98>)
 801037c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 801037e:	fb93 f3f2 	sdiv	r3, r3, r2
 8010382:	b29a      	uxth	r2, r3
 8010384:	687b      	ldr	r3, [r7, #4]
 8010386:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 801038a:	bf00      	nop
 801038c:	3714      	adds	r7, #20
 801038e:	46bd      	mov	sp, r7
 8010390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010394:	4770      	bx	lr
 8010396:	bf00      	nop
 8010398:	08015104 	.word	0x08015104
 801039c:	0801510c 	.word	0x0801510c

080103a0 <LL_DLYB_SetDelay>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: the Delay value is set.
  *          - ERROR: the Delay value is not set.
  */
void LL_DLYB_SetDelay(DLYB_TypeDef *DLYBx, LL_DLYB_CfgTypeDef  *pdlyb_cfg)
{
 80103a0:	b480      	push	{r7}
 80103a2:	b083      	sub	sp, #12
 80103a4:	af00      	add	r7, sp, #0
 80103a6:	6078      	str	r0, [r7, #4]
 80103a8:	6039      	str	r1, [r7, #0]
  /* Check the DelayBlock instance */
  assert_param(IS_DLYB_ALL_INSTANCE(DLYBx));

  /* Enable the length sampling */
  SET_BIT(DLYBx->CR, DLYB_CR_SEN);
 80103aa:	687b      	ldr	r3, [r7, #4]
 80103ac:	681b      	ldr	r3, [r3, #0]
 80103ae:	f043 0202 	orr.w	r2, r3, #2
 80103b2:	687b      	ldr	r3, [r7, #4]
 80103b4:	601a      	str	r2, [r3, #0]

  /* Update the UNIT and SEL field */
  DLYBx->CFGR = (pdlyb_cfg->PhaseSel) | ((pdlyb_cfg->Units) << DLYB_CFGR_UNIT_Pos);
 80103b6:	683b      	ldr	r3, [r7, #0]
 80103b8:	685a      	ldr	r2, [r3, #4]
 80103ba:	683b      	ldr	r3, [r7, #0]
 80103bc:	681b      	ldr	r3, [r3, #0]
 80103be:	021b      	lsls	r3, r3, #8
 80103c0:	431a      	orrs	r2, r3
 80103c2:	687b      	ldr	r3, [r7, #4]
 80103c4:	605a      	str	r2, [r3, #4]

  /* Disable the length sampling */
  CLEAR_BIT(DLYBx->CR, DLYB_CR_SEN);
 80103c6:	687b      	ldr	r3, [r7, #4]
 80103c8:	681b      	ldr	r3, [r3, #0]
 80103ca:	f023 0202 	bic.w	r2, r3, #2
 80103ce:	687b      	ldr	r3, [r7, #4]
 80103d0:	601a      	str	r2, [r3, #0]
}
 80103d2:	bf00      	nop
 80103d4:	370c      	adds	r7, #12
 80103d6:	46bd      	mov	sp, r7
 80103d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103dc:	4770      	bx	lr

080103de <LL_DLYB_GetDelay>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: the Delay value is received.
  *          - ERROR: the Delay value is not received.
  */
void LL_DLYB_GetDelay(DLYB_TypeDef *DLYBx, LL_DLYB_CfgTypeDef *pdlyb_cfg)
{
 80103de:	b480      	push	{r7}
 80103e0:	b083      	sub	sp, #12
 80103e2:	af00      	add	r7, sp, #0
 80103e4:	6078      	str	r0, [r7, #4]
 80103e6:	6039      	str	r1, [r7, #0]
  /* Check the DelayBlock instance */
  assert_param(IS_DLYB_ALL_INSTANCE(DLYBx));

  /* Fill the DelayBlock configuration structure with SEL and UNIT value */
  pdlyb_cfg->Units = ((DLYBx->CFGR & DLYB_CFGR_UNIT) >> DLYB_CFGR_UNIT_Pos);
 80103e8:	687b      	ldr	r3, [r7, #4]
 80103ea:	685b      	ldr	r3, [r3, #4]
 80103ec:	0a1b      	lsrs	r3, r3, #8
 80103ee:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80103f2:	683b      	ldr	r3, [r7, #0]
 80103f4:	601a      	str	r2, [r3, #0]
  pdlyb_cfg->PhaseSel = (DLYBx->CFGR & DLYB_CFGR_SEL);
 80103f6:	687b      	ldr	r3, [r7, #4]
 80103f8:	685b      	ldr	r3, [r3, #4]
 80103fa:	f003 020f 	and.w	r2, r3, #15
 80103fe:	683b      	ldr	r3, [r7, #0]
 8010400:	605a      	str	r2, [r3, #4]
}
 8010402:	bf00      	nop
 8010404:	370c      	adds	r7, #12
 8010406:	46bd      	mov	sp, r7
 8010408:	f85d 7b04 	ldr.w	r7, [sp], #4
 801040c:	4770      	bx	lr
	...

08010410 <LL_DLYB_GetClockPeriod>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: there is a valid period detected and stored in pdlyb_cfg.
  *          - ERROR: there is no valid period detected.
  */
uint32_t LL_DLYB_GetClockPeriod(DLYB_TypeDef *DLYBx, LL_DLYB_CfgTypeDef *pdlyb_cfg)
{
 8010410:	b580      	push	{r7, lr}
 8010412:	b086      	sub	sp, #24
 8010414:	af00      	add	r7, sp, #0
 8010416:	6078      	str	r0, [r7, #4]
 8010418:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 801041a:	2300      	movs	r3, #0
 801041c:	617b      	str	r3, [r7, #20]

  /* Check the DelayBlock instance */
  assert_param(IS_DLYB_ALL_INSTANCE(DLYBx));

  /* Enable the length sampling */
  SET_BIT(DLYBx->CR, DLYB_CR_SEN);
 801041e:	687b      	ldr	r3, [r7, #4]
 8010420:	681b      	ldr	r3, [r3, #0]
 8010422:	f043 0202 	orr.w	r2, r3, #2
 8010426:	687b      	ldr	r3, [r7, #4]
 8010428:	601a      	str	r2, [r3, #0]

  /* Delay line length detection */
  while (i < DLYB_MAX_UNIT)
 801042a:	e02a      	b.n	8010482 <LL_DLYB_GetClockPeriod+0x72>
  {
    /* Set the Delay of the UNIT(s)*/
    DLYBx->CFGR = DLYB_MAX_SELECT | (i << DLYB_CFGR_UNIT_Pos);
 801042c:	697b      	ldr	r3, [r7, #20]
 801042e:	021b      	lsls	r3, r3, #8
 8010430:	f043 020c 	orr.w	r2, r3, #12
 8010434:	687b      	ldr	r3, [r7, #4]
 8010436:	605a      	str	r2, [r3, #4]

    /* Waiting for a LNG valid value */
    tickstart =  HAL_GetTick();
 8010438:	f7f6 fa82 	bl	8006940 <HAL_GetTick>
 801043c:	60f8      	str	r0, [r7, #12]
    while ((DLYBx->CFGR & DLYB_CFGR_LNGF) == 0U)
 801043e:	e00c      	b.n	801045a <LL_DLYB_GetClockPeriod+0x4a>
    {
      if ((HAL_GetTick() - tickstart) >=  DLYB_TIMEOUT)
 8010440:	f7f6 fa7e 	bl	8006940 <HAL_GetTick>
 8010444:	4602      	mov	r2, r0
 8010446:	68fb      	ldr	r3, [r7, #12]
 8010448:	1ad3      	subs	r3, r2, r3
 801044a:	2bfe      	cmp	r3, #254	; 0xfe
 801044c:	d905      	bls.n	801045a <LL_DLYB_GetClockPeriod+0x4a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((DLYBx->CFGR & DLYB_CFGR_LNGF) == 0U)
 801044e:	687b      	ldr	r3, [r7, #4]
 8010450:	685b      	ldr	r3, [r3, #4]
 8010452:	2b00      	cmp	r3, #0
 8010454:	db01      	blt.n	801045a <LL_DLYB_GetClockPeriod+0x4a>
        {
          return (uint32_t) HAL_TIMEOUT;
 8010456:	2303      	movs	r3, #3
 8010458:	e042      	b.n	80104e0 <LL_DLYB_GetClockPeriod+0xd0>
    while ((DLYBx->CFGR & DLYB_CFGR_LNGF) == 0U)
 801045a:	687b      	ldr	r3, [r7, #4]
 801045c:	685b      	ldr	r3, [r3, #4]
 801045e:	2b00      	cmp	r3, #0
 8010460:	daee      	bge.n	8010440 <LL_DLYB_GetClockPeriod+0x30>
        }
      }
    }

    if ((DLYBx->CFGR & DLYB_LNG_10_0_MASK) != 0U)
 8010462:	687b      	ldr	r3, [r7, #4]
 8010464:	685a      	ldr	r2, [r3, #4]
 8010466:	4b20      	ldr	r3, [pc, #128]	; (80104e8 <LL_DLYB_GetClockPeriod+0xd8>)
 8010468:	4013      	ands	r3, r2
 801046a:	2b00      	cmp	r3, #0
 801046c:	d006      	beq.n	801047c <LL_DLYB_GetClockPeriod+0x6c>
    {
      if ((DLYBx->CFGR & (DLYB_CFGR_LNG_11 | DLYB_CFGR_LNG_10)) != DLYB_LNG_11_10_MASK)
 801046e:	687b      	ldr	r3, [r7, #4]
 8010470:	685b      	ldr	r3, [r3, #4]
 8010472:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8010476:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 801047a:	d106      	bne.n	801048a <LL_DLYB_GetClockPeriod+0x7a>
      {
        /* Delay line length is configured to one input clock period*/
        break;
      }
    }
    i++;
 801047c:	697b      	ldr	r3, [r7, #20]
 801047e:	3301      	adds	r3, #1
 8010480:	617b      	str	r3, [r7, #20]
  while (i < DLYB_MAX_UNIT)
 8010482:	697b      	ldr	r3, [r7, #20]
 8010484:	2b7f      	cmp	r3, #127	; 0x7f
 8010486:	d9d1      	bls.n	801042c <LL_DLYB_GetClockPeriod+0x1c>
 8010488:	e000      	b.n	801048c <LL_DLYB_GetClockPeriod+0x7c>
        break;
 801048a:	bf00      	nop
  }

  if (DLYB_MAX_UNIT != i)
 801048c:	697b      	ldr	r3, [r7, #20]
 801048e:	2b80      	cmp	r3, #128	; 0x80
 8010490:	d022      	beq.n	80104d8 <LL_DLYB_GetClockPeriod+0xc8>
  {
    /* Determine how many unit delays (nb) span one input clock period */
    lng = (DLYBx->CFGR & DLYB_CFGR_LNG) >> 16U;
 8010492:	687b      	ldr	r3, [r7, #4]
 8010494:	685b      	ldr	r3, [r3, #4]
 8010496:	0c1b      	lsrs	r3, r3, #16
 8010498:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801049c:	60bb      	str	r3, [r7, #8]
    nb = 10U;
 801049e:	230a      	movs	r3, #10
 80104a0:	613b      	str	r3, [r7, #16]
    while ((nb > 0U) && ((lng >> nb) == 0U))
 80104a2:	e002      	b.n	80104aa <LL_DLYB_GetClockPeriod+0x9a>
    {
      nb--;
 80104a4:	693b      	ldr	r3, [r7, #16]
 80104a6:	3b01      	subs	r3, #1
 80104a8:	613b      	str	r3, [r7, #16]
    while ((nb > 0U) && ((lng >> nb) == 0U))
 80104aa:	693b      	ldr	r3, [r7, #16]
 80104ac:	2b00      	cmp	r3, #0
 80104ae:	d005      	beq.n	80104bc <LL_DLYB_GetClockPeriod+0xac>
 80104b0:	68ba      	ldr	r2, [r7, #8]
 80104b2:	693b      	ldr	r3, [r7, #16]
 80104b4:	fa22 f303 	lsr.w	r3, r2, r3
 80104b8:	2b00      	cmp	r3, #0
 80104ba:	d0f3      	beq.n	80104a4 <LL_DLYB_GetClockPeriod+0x94>
    }
    if (nb != 0U)
 80104bc:	693b      	ldr	r3, [r7, #16]
 80104be:	2b00      	cmp	r3, #0
 80104c0:	d00a      	beq.n	80104d8 <LL_DLYB_GetClockPeriod+0xc8>
    {
      pdlyb_cfg->PhaseSel = nb ;
 80104c2:	683b      	ldr	r3, [r7, #0]
 80104c4:	693a      	ldr	r2, [r7, #16]
 80104c6:	605a      	str	r2, [r3, #4]
      pdlyb_cfg->Units = i ;
 80104c8:	683b      	ldr	r3, [r7, #0]
 80104ca:	697a      	ldr	r2, [r7, #20]
 80104cc:	601a      	str	r2, [r3, #0]

      /* Disable the length sampling */
      DLYBx->CR = DLYB_CR_SEN;
 80104ce:	687b      	ldr	r3, [r7, #4]
 80104d0:	2202      	movs	r2, #2
 80104d2:	601a      	str	r2, [r3, #0]

      return (uint32_t)SUCCESS;
 80104d4:	2300      	movs	r3, #0
 80104d6:	e003      	b.n	80104e0 <LL_DLYB_GetClockPeriod+0xd0>
    }
  }

  /* Disable the length sampling */
  DLYBx->CR = DLYB_CR_SEN;
 80104d8:	687b      	ldr	r3, [r7, #4]
 80104da:	2202      	movs	r2, #2
 80104dc:	601a      	str	r2, [r3, #0]

  return (uint32_t)ERROR;
 80104de:	2301      	movs	r3, #1

}
 80104e0:	4618      	mov	r0, r3
 80104e2:	3718      	adds	r7, #24
 80104e4:	46bd      	mov	sp, r7
 80104e6:	bd80      	pop	{r7, pc}
 80104e8:	07ff0000 	.word	0x07ff0000

080104ec <_tx_byte_allocate>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_byte_allocate(TX_BYTE_POOL *pool_ptr, VOID **memory_ptr, ULONG memory_size,  ULONG wait_option)
{
 80104ec:	b580      	push	{r7, lr}
 80104ee:	b09c      	sub	sp, #112	; 0x70
 80104f0:	af00      	add	r7, sp, #0
 80104f2:	60f8      	str	r0, [r7, #12]
 80104f4:	60b9      	str	r1, [r7, #8]
 80104f6:	607a      	str	r2, [r7, #4]
 80104f8:	603b      	str	r3, [r7, #0]
TX_THREAD                   *next_thread;
TX_THREAD                   *previous_thread;
UINT                        finished;
#ifdef TX_ENABLE_EVENT_TRACE
TX_TRACE_BUFFER_ENTRY       *entry_ptr;
ULONG                       time_stamp =  ((ULONG) 0);
 80104fa:	2300      	movs	r3, #0
 80104fc:	663b      	str	r3, [r7, #96]	; 0x60
#endif


    /* Round the memory size up to the next size that is evenly divisible by
       an ALIGN_TYPE (this is typically a 32-bit ULONG).  This guarantees proper alignment.  */
    memory_size = (((memory_size + (sizeof(ALIGN_TYPE)))-((ALIGN_TYPE) 1))/(sizeof(ALIGN_TYPE))) * (sizeof(ALIGN_TYPE));
 80104fe:	687b      	ldr	r3, [r7, #4]
 8010500:	3303      	adds	r3, #3
 8010502:	f023 0303 	bic.w	r3, r3, #3
 8010506:	607b      	str	r3, [r7, #4]
{
UINT posture;
#ifdef TX_PORT_USE_BASEPRI
    __asm__ volatile ("MRS  %0, BASEPRI ": "=r" (posture));
#else
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8010508:	f3ef 8310 	mrs	r3, PRIMASK
 801050c:	637b      	str	r3, [r7, #52]	; 0x34
#endif
    return(posture);
 801050e:	6b7b      	ldr	r3, [r7, #52]	; 0x34

__attribute__( ( always_inline ) ) static inline UINT __disable_interrupts(void)
{
UINT int_posture;

    int_posture = __get_interrupt_posture();
 8010510:	633b      	str	r3, [r7, #48]	; 0x30

#ifdef TX_PORT_USE_BASEPRI
    __set_basepri_value(TX_PORT_BASEPRI);
#else
    __asm__ volatile ("CPSID i" : : : "memory");
 8010512:	b672      	cpsid	i
#endif
    return(int_posture);
 8010514:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    /* Disable interrupts.  */
    TX_DISABLE
 8010516:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 8010518:	4b7c      	ldr	r3, [pc, #496]	; (801070c <_tx_byte_allocate+0x220>)
 801051a:	681b      	ldr	r3, [r3, #0]
 801051c:	657b      	str	r3, [r7, #84]	; 0x54
#endif

#ifdef TX_ENABLE_EVENT_TRACE

    /* If trace is enabled, save the current event pointer.  */
    entry_ptr =  _tx_trace_buffer_current_ptr;
 801051e:	4b7c      	ldr	r3, [pc, #496]	; (8010710 <_tx_byte_allocate+0x224>)
 8010520:	681b      	ldr	r3, [r3, #0]
 8010522:	653b      	str	r3, [r7, #80]	; 0x50

    /* If trace is enabled, insert this event into the trace buffer.  */
    TX_TRACE_IN_LINE_INSERT(TX_TRACE_BYTE_ALLOCATE, pool_ptr, 0, memory_size, wait_option, TX_TRACE_BYTE_POOL_EVENTS)
 8010524:	4b7a      	ldr	r3, [pc, #488]	; (8010710 <_tx_byte_allocate+0x224>)
 8010526:	681b      	ldr	r3, [r3, #0]
 8010528:	64fb      	str	r3, [r7, #76]	; 0x4c
 801052a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801052c:	2b00      	cmp	r3, #0
 801052e:	d06b      	beq.n	8010608 <_tx_byte_allocate+0x11c>
 8010530:	4b78      	ldr	r3, [pc, #480]	; (8010714 <_tx_byte_allocate+0x228>)
 8010532:	681b      	ldr	r3, [r3, #0]
 8010534:	f003 0304 	and.w	r3, r3, #4
 8010538:	2b00      	cmp	r3, #0
 801053a:	d065      	beq.n	8010608 <_tx_byte_allocate+0x11c>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 801053c:	f3ef 8305 	mrs	r3, IPSR
 8010540:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(ipsr_value);
 8010542:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010544:	4b74      	ldr	r3, [pc, #464]	; (8010718 <_tx_byte_allocate+0x22c>)
 8010546:	681b      	ldr	r3, [r3, #0]
 8010548:	4313      	orrs	r3, r2
 801054a:	64bb      	str	r3, [r7, #72]	; 0x48
 801054c:	4b6f      	ldr	r3, [pc, #444]	; (801070c <_tx_byte_allocate+0x220>)
 801054e:	681b      	ldr	r3, [r3, #0]
 8010550:	65bb      	str	r3, [r7, #88]	; 0x58
 8010552:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010554:	2b00      	cmp	r3, #0
 8010556:	d10b      	bne.n	8010570 <_tx_byte_allocate+0x84>
 8010558:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801055a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801055c:	65fb      	str	r3, [r7, #92]	; 0x5c
 801055e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010560:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010562:	041a      	lsls	r2, r3, #16
 8010564:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010566:	4313      	orrs	r3, r2
 8010568:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 801056c:	65fb      	str	r3, [r7, #92]	; 0x5c
 801056e:	e00e      	b.n	801058e <_tx_byte_allocate+0xa2>
 8010570:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010572:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 8010576:	d205      	bcs.n	8010584 <_tx_byte_allocate+0x98>
 8010578:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801057a:	65fb      	str	r3, [r7, #92]	; 0x5c
 801057c:	f04f 33ff 	mov.w	r3, #4294967295
 8010580:	65bb      	str	r3, [r7, #88]	; 0x58
 8010582:	e004      	b.n	801058e <_tx_byte_allocate+0xa2>
 8010584:	f04f 33f0 	mov.w	r3, #4042322160	; 0xf0f0f0f0
 8010588:	65bb      	str	r3, [r7, #88]	; 0x58
 801058a:	2300      	movs	r3, #0
 801058c:	65fb      	str	r3, [r7, #92]	; 0x5c
 801058e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8010590:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010592:	601a      	str	r2, [r3, #0]
 8010594:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010596:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8010598:	605a      	str	r2, [r3, #4]
 801059a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801059c:	2214      	movs	r2, #20
 801059e:	609a      	str	r2, [r3, #8]
 80105a0:	4b5e      	ldr	r3, [pc, #376]	; (801071c <_tx_byte_allocate+0x230>)
 80105a2:	681a      	ldr	r2, [r3, #0]
 80105a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80105a6:	60da      	str	r2, [r3, #12]
 80105a8:	68fa      	ldr	r2, [r7, #12]
 80105aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80105ac:	611a      	str	r2, [r3, #16]
 80105ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80105b0:	2200      	movs	r2, #0
 80105b2:	615a      	str	r2, [r3, #20]
 80105b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80105b6:	687a      	ldr	r2, [r7, #4]
 80105b8:	619a      	str	r2, [r3, #24]
 80105ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80105bc:	683a      	ldr	r2, [r7, #0]
 80105be:	61da      	str	r2, [r3, #28]
 80105c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80105c2:	3320      	adds	r3, #32
 80105c4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80105c6:	4b56      	ldr	r3, [pc, #344]	; (8010720 <_tx_byte_allocate+0x234>)
 80105c8:	681b      	ldr	r3, [r3, #0]
 80105ca:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80105cc:	429a      	cmp	r2, r3
 80105ce:	d314      	bcc.n	80105fa <_tx_byte_allocate+0x10e>
 80105d0:	4b54      	ldr	r3, [pc, #336]	; (8010724 <_tx_byte_allocate+0x238>)
 80105d2:	681b      	ldr	r3, [r3, #0]
 80105d4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80105d6:	4a4e      	ldr	r2, [pc, #312]	; (8010710 <_tx_byte_allocate+0x224>)
 80105d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80105da:	6013      	str	r3, [r2, #0]
 80105dc:	4b52      	ldr	r3, [pc, #328]	; (8010728 <_tx_byte_allocate+0x23c>)
 80105de:	681b      	ldr	r3, [r3, #0]
 80105e0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80105e2:	621a      	str	r2, [r3, #32]
 80105e4:	4b51      	ldr	r3, [pc, #324]	; (801072c <_tx_byte_allocate+0x240>)
 80105e6:	681b      	ldr	r3, [r3, #0]
 80105e8:	2b00      	cmp	r3, #0
 80105ea:	d00d      	beq.n	8010608 <_tx_byte_allocate+0x11c>
 80105ec:	4b4f      	ldr	r3, [pc, #316]	; (801072c <_tx_byte_allocate+0x240>)
 80105ee:	681b      	ldr	r3, [r3, #0]
 80105f0:	4a4d      	ldr	r2, [pc, #308]	; (8010728 <_tx_byte_allocate+0x23c>)
 80105f2:	6812      	ldr	r2, [r2, #0]
 80105f4:	4610      	mov	r0, r2
 80105f6:	4798      	blx	r3
 80105f8:	e006      	b.n	8010608 <_tx_byte_allocate+0x11c>
 80105fa:	4a45      	ldr	r2, [pc, #276]	; (8010710 <_tx_byte_allocate+0x224>)
 80105fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80105fe:	6013      	str	r3, [r2, #0]
 8010600:	4b49      	ldr	r3, [pc, #292]	; (8010728 <_tx_byte_allocate+0x23c>)
 8010602:	681b      	ldr	r3, [r3, #0]
 8010604:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8010606:	621a      	str	r2, [r3, #32]

    /* Save the time stamp for later comparison to verify that
       the event hasn't been overwritten by the time the allocate
       call succeeds.  */
    if (entry_ptr != TX_NULL)
 8010608:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801060a:	2b00      	cmp	r3, #0
 801060c:	d002      	beq.n	8010614 <_tx_byte_allocate+0x128>
    {

        time_stamp =  entry_ptr -> tx_trace_buffer_entry_time_stamp;
 801060e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010610:	68db      	ldr	r3, [r3, #12]
 8010612:	663b      	str	r3, [r7, #96]	; 0x60
    lower_tbu =  *((ULONG *) (log_entry_ptr + TX_EL_EVENT_TIME_LOWER_OFFSET));
    upper_tbu =  *((ULONG *) (log_entry_ptr + TX_EL_EVENT_TIME_UPPER_OFFSET));
#endif

    /* Set the search finished flag to false.  */
    finished =  TX_FALSE;
 8010614:	2300      	movs	r3, #0
 8010616:	667b      	str	r3, [r7, #100]	; 0x64
    /* Loop to handle cases where the owner of the pool changed.  */
    do
    {

        /* Indicate that this thread is the current owner.  */
        pool_ptr -> tx_byte_pool_owner =  thread_ptr;
 8010618:	68fb      	ldr	r3, [r7, #12]
 801061a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801061c:	621a      	str	r2, [r3, #32]
 801061e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010620:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8010622:	6a3b      	ldr	r3, [r7, #32]
 8010624:	f383 8810 	msr	PRIMASK, r3
}
 8010628:	bf00      	nop
        /* Restore interrupts.  */
        TX_RESTORE

        /* At this point, the executing thread owns the pool and can perform a search
           for free memory.  */
        work_ptr =  _tx_byte_pool_search(pool_ptr, memory_size);
 801062a:	6879      	ldr	r1, [r7, #4]
 801062c:	68f8      	ldr	r0, [r7, #12]
 801062e:	f000 fa6d 	bl	8010b0c <_tx_byte_pool_search>
 8010632:	6478      	str	r0, [r7, #68]	; 0x44
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8010634:	f3ef 8310 	mrs	r3, PRIMASK
 8010638:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 801063a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    int_posture = __get_interrupt_posture();
 801063c:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 801063e:	b672      	cpsid	i
    return(int_posture);
 8010640:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        /* Optional processing extension.  */
        TX_BYTE_ALLOCATE_EXTENSION

        /* Lockout interrupts.  */
        TX_DISABLE
 8010642:	66fb      	str	r3, [r7, #108]	; 0x6c

        /* Determine if we are finished.  */
        if (work_ptr != TX_NULL)
 8010644:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010646:	2b00      	cmp	r3, #0
 8010648:	d002      	beq.n	8010650 <_tx_byte_allocate+0x164>
        {

            /* Yes, we have found a block the search is finished.  */
            finished =  TX_TRUE;
 801064a:	2301      	movs	r3, #1
 801064c:	667b      	str	r3, [r7, #100]	; 0x64
 801064e:	e006      	b.n	801065e <_tx_byte_allocate+0x172>
        }
        else
        {

            /* No block was found, does this thread still own the pool?  */
            if (pool_ptr -> tx_byte_pool_owner == thread_ptr)
 8010650:	68fb      	ldr	r3, [r7, #12]
 8010652:	6a1b      	ldr	r3, [r3, #32]
 8010654:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8010656:	429a      	cmp	r2, r3
 8010658:	d101      	bne.n	801065e <_tx_byte_allocate+0x172>
            {

                /* Yes, then we have looked through the entire pool and haven't found the memory.  */
                finished =  TX_TRUE;
 801065a:	2301      	movs	r3, #1
 801065c:	667b      	str	r3, [r7, #100]	; 0x64
            }
        }

    } while (finished == TX_FALSE);
 801065e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010660:	2b00      	cmp	r3, #0
 8010662:	d0d9      	beq.n	8010618 <_tx_byte_allocate+0x12c>

    /* Copy the pointer into the return destination.  */
    *memory_ptr =  (VOID *) work_ptr;
 8010664:	68bb      	ldr	r3, [r7, #8]
 8010666:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010668:	601a      	str	r2, [r3, #0]

    /* Determine if memory was found.  */
    if (work_ptr != TX_NULL)
 801066a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801066c:	2b00      	cmp	r3, #0
 801066e:	d015      	beq.n	801069c <_tx_byte_allocate+0x1b0>
#ifdef TX_ENABLE_EVENT_TRACE

        /* Check that the event time stamp is unchanged.  A different
           timestamp means that a later event wrote over the byte
           allocate event.  In that case, do nothing here.  */
        if (entry_ptr != TX_NULL)
 8010670:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010672:	2b00      	cmp	r3, #0
 8010674:	d009      	beq.n	801068a <_tx_byte_allocate+0x19e>
        {

            /* Is the timestamp the same?  */
            if (time_stamp == entry_ptr -> tx_trace_buffer_entry_time_stamp)
 8010676:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010678:	68db      	ldr	r3, [r3, #12]
 801067a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801067c:	429a      	cmp	r2, r3
 801067e:	d104      	bne.n	801068a <_tx_byte_allocate+0x19e>

                /* Timestamp is the same, update the entry with the address.  */
#ifdef TX_MISRA_ENABLE
                entry_ptr -> tx_trace_buffer_entry_info_2 =  TX_POINTER_TO_ULONG_CONVERT(*memory_ptr);
#else
                entry_ptr -> tx_trace_buffer_entry_information_field_2 =  TX_POINTER_TO_ULONG_CONVERT(*memory_ptr);
 8010680:	68bb      	ldr	r3, [r7, #8]
 8010682:	681b      	ldr	r3, [r3, #0]
 8010684:	461a      	mov	r2, r3
 8010686:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010688:	615a      	str	r2, [r3, #20]
 801068a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801068c:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801068e:	69fb      	ldr	r3, [r7, #28]
 8010690:	f383 8810 	msr	PRIMASK, r3
}
 8010694:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Set the status to success.  */
        status =  TX_SUCCESS;
 8010696:	2300      	movs	r3, #0
 8010698:	66bb      	str	r3, [r7, #104]	; 0x68
 801069a:	e090      	b.n	80107be <_tx_byte_allocate+0x2d2>
    {

        /* No memory of sufficient size was found...  */

        /* Determine if the request specifies suspension.  */
        if (wait_option != TX_NO_WAIT)
 801069c:	683b      	ldr	r3, [r7, #0]
 801069e:	2b00      	cmp	r3, #0
 80106a0:	f000 8085 	beq.w	80107ae <_tx_byte_allocate+0x2c2>
        {

            /* Determine if the preempt disable flag is non-zero.  */
            if (_tx_thread_preempt_disable != ((UINT) 0))
 80106a4:	4b22      	ldr	r3, [pc, #136]	; (8010730 <_tx_byte_allocate+0x244>)
 80106a6:	681b      	ldr	r3, [r3, #0]
 80106a8:	2b00      	cmp	r3, #0
 80106aa:	d007      	beq.n	80106bc <_tx_byte_allocate+0x1d0>
            {

                /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
                status =  TX_NO_MEMORY;
 80106ac:	2310      	movs	r3, #16
 80106ae:	66bb      	str	r3, [r7, #104]	; 0x68
 80106b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80106b2:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80106b4:	69bb      	ldr	r3, [r7, #24]
 80106b6:	f383 8810 	msr	PRIMASK, r3
}
 80106ba:	e080      	b.n	80107be <_tx_byte_allocate+0x2d2>
                /* Increment the number of suspensions on this pool.  */
                pool_ptr -> tx_byte_pool_performance_suspension_count++;
#endif

                /* Setup cleanup routine pointer.  */
                thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_byte_pool_cleanup);
 80106bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80106be:	4a1d      	ldr	r2, [pc, #116]	; (8010734 <_tx_byte_allocate+0x248>)
 80106c0:	669a      	str	r2, [r3, #104]	; 0x68

                /* Setup cleanup information, i.e. this pool control
                   block.  */
                thread_ptr -> tx_thread_suspend_control_block =  (VOID *) pool_ptr;
 80106c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80106c4:	68fa      	ldr	r2, [r7, #12]
 80106c6:	66da      	str	r2, [r3, #108]	; 0x6c

                /* Save the return memory pointer address as well.  */
                thread_ptr -> tx_thread_additional_suspend_info =  (VOID *) memory_ptr;
 80106c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80106ca:	68ba      	ldr	r2, [r7, #8]
 80106cc:	67da      	str	r2, [r3, #124]	; 0x7c

                /* Save the byte size requested.  */
                thread_ptr -> tx_thread_suspend_info =  memory_size;
 80106ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80106d0:	687a      	ldr	r2, [r7, #4]
 80106d2:	679a      	str	r2, [r3, #120]	; 0x78

#ifndef TX_NOT_INTERRUPTABLE

                /* Increment the suspension sequence number, which is used to identify
                   this suspension event.  */
                thread_ptr -> tx_thread_suspension_sequence++;
 80106d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80106d6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80106da:	1c5a      	adds	r2, r3, #1
 80106dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80106de:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
#endif

                /* Pickup the number of suspended threads.  */
                suspended_count =  pool_ptr -> tx_byte_pool_suspended_count;
 80106e2:	68fb      	ldr	r3, [r7, #12]
 80106e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80106e6:	643b      	str	r3, [r7, #64]	; 0x40

                /* Increment the suspension count.  */
                (pool_ptr -> tx_byte_pool_suspended_count)++;
 80106e8:	68fb      	ldr	r3, [r7, #12]
 80106ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80106ec:	1c5a      	adds	r2, r3, #1
 80106ee:	68fb      	ldr	r3, [r7, #12]
 80106f0:	629a      	str	r2, [r3, #40]	; 0x28

                /* Setup suspension list.  */
                if (suspended_count == TX_NO_SUSPENSIONS)
 80106f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80106f4:	2b00      	cmp	r3, #0
 80106f6:	d11f      	bne.n	8010738 <_tx_byte_allocate+0x24c>
                {

                    /* No other threads are suspended.  Setup the head pointer and
                       just setup this threads pointers to itself.  */
                    pool_ptr -> tx_byte_pool_suspension_list =      thread_ptr;
 80106f8:	68fb      	ldr	r3, [r7, #12]
 80106fa:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80106fc:	625a      	str	r2, [r3, #36]	; 0x24
                    thread_ptr -> tx_thread_suspended_next =        thread_ptr;
 80106fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010700:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8010702:	671a      	str	r2, [r3, #112]	; 0x70
                    thread_ptr -> tx_thread_suspended_previous =    thread_ptr;
 8010704:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010706:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8010708:	675a      	str	r2, [r3, #116]	; 0x74
 801070a:	e027      	b.n	801075c <_tx_byte_allocate+0x270>
 801070c:	200021f8 	.word	0x200021f8
 8010710:	20002814 	.word	0x20002814
 8010714:	20002818 	.word	0x20002818
 8010718:	20000010 	.word	0x20000010
 801071c:	e0001004 	.word	0xe0001004
 8010720:	20002810 	.word	0x20002810
 8010724:	2000280c 	.word	0x2000280c
 8010728:	20002800 	.word	0x20002800
 801072c:	2000281c 	.word	0x2000281c
 8010730:	20002290 	.word	0x20002290
 8010734:	080107cd 	.word	0x080107cd
                }
                else
                {

                    /* This list is not NULL, add current thread to the end. */
                    next_thread =                                   pool_ptr -> tx_byte_pool_suspension_list;
 8010738:	68fb      	ldr	r3, [r7, #12]
 801073a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801073c:	63fb      	str	r3, [r7, #60]	; 0x3c
                    thread_ptr -> tx_thread_suspended_next =        next_thread;
 801073e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010740:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8010742:	671a      	str	r2, [r3, #112]	; 0x70
                    previous_thread =                               next_thread -> tx_thread_suspended_previous;
 8010744:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010746:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010748:	63bb      	str	r3, [r7, #56]	; 0x38
                    thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 801074a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801074c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801074e:	675a      	str	r2, [r3, #116]	; 0x74
                    previous_thread -> tx_thread_suspended_next =   thread_ptr;
 8010750:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010752:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8010754:	671a      	str	r2, [r3, #112]	; 0x70
                    next_thread -> tx_thread_suspended_previous =   thread_ptr;
 8010756:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010758:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801075a:	675a      	str	r2, [r3, #116]	; 0x74
                }

                /* Set the state to suspended.  */
                thread_ptr -> tx_thread_state =       TX_BYTE_MEMORY;
 801075c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801075e:	2209      	movs	r2, #9
 8010760:	631a      	str	r2, [r3, #48]	; 0x30
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Set the suspending flag.  */
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8010762:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010764:	2201      	movs	r2, #1
 8010766:	639a      	str	r2, [r3, #56]	; 0x38

                /* Setup the timeout period.  */
                thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 8010768:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801076a:	683a      	ldr	r2, [r7, #0]
 801076c:	64da      	str	r2, [r3, #76]	; 0x4c

                /* Temporarily disable preemption.  */
                _tx_thread_preempt_disable++;
 801076e:	4b16      	ldr	r3, [pc, #88]	; (80107c8 <_tx_byte_allocate+0x2dc>)
 8010770:	681b      	ldr	r3, [r3, #0]
 8010772:	3301      	adds	r3, #1
 8010774:	4a14      	ldr	r2, [pc, #80]	; (80107c8 <_tx_byte_allocate+0x2dc>)
 8010776:	6013      	str	r3, [r2, #0]
 8010778:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801077a:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801077c:	697b      	ldr	r3, [r7, #20]
 801077e:	f383 8810 	msr	PRIMASK, r3
}
 8010782:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Call actual thread suspension routine.  */
                _tx_thread_system_suspend(thread_ptr);
 8010784:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8010786:	f002 fa29 	bl	8012bdc <_tx_thread_system_suspend>
#ifdef TX_ENABLE_EVENT_TRACE

                /* Check that the event time stamp is unchanged.  A different
                   timestamp means that a later event wrote over the byte
                   allocate event.  In that case, do nothing here.  */
                if (entry_ptr != TX_NULL)
 801078a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801078c:	2b00      	cmp	r3, #0
 801078e:	d009      	beq.n	80107a4 <_tx_byte_allocate+0x2b8>
                {

                    /* Is the timestamp the same?  */
                    if (time_stamp == entry_ptr -> tx_trace_buffer_entry_time_stamp)
 8010790:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010792:	68db      	ldr	r3, [r3, #12]
 8010794:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8010796:	429a      	cmp	r2, r3
 8010798:	d104      	bne.n	80107a4 <_tx_byte_allocate+0x2b8>

                        /* Timestamp is the same, update the entry with the address.  */
#ifdef TX_MISRA_ENABLE
                        entry_ptr -> tx_trace_buffer_entry_info_2 =  TX_POINTER_TO_ULONG_CONVERT(*memory_ptr);
#else
                       entry_ptr -> tx_trace_buffer_entry_information_field_2 =  TX_POINTER_TO_ULONG_CONVERT(*memory_ptr);
 801079a:	68bb      	ldr	r3, [r7, #8]
 801079c:	681b      	ldr	r3, [r3, #0]
 801079e:	461a      	mov	r2, r3
 80107a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80107a2:	615a      	str	r2, [r3, #20]
                    *((ULONG *) (log_entry_ptr + TX_EL_EVENT_INFO_4_OFFSET)) =  (ULONG) *memory_ptr;
                }
#endif

                /* Return the completion status.  */
                status =  thread_ptr -> tx_thread_suspend_status;
 80107a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80107a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80107aa:	66bb      	str	r3, [r7, #104]	; 0x68
 80107ac:	e007      	b.n	80107be <_tx_byte_allocate+0x2d2>
 80107ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80107b0:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80107b2:	693b      	ldr	r3, [r7, #16]
 80107b4:	f383 8810 	msr	PRIMASK, r3
}
 80107b8:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Immediate return, return error completion.  */
            status =  TX_NO_MEMORY;
 80107ba:	2310      	movs	r3, #16
 80107bc:	66bb      	str	r3, [r7, #104]	; 0x68
        }
    }

    /* Return completion status.  */
    return(status);
 80107be:	6ebb      	ldr	r3, [r7, #104]	; 0x68
}
 80107c0:	4618      	mov	r0, r3
 80107c2:	3770      	adds	r7, #112	; 0x70
 80107c4:	46bd      	mov	sp, r7
 80107c6:	bd80      	pop	{r7, pc}
 80107c8:	20002290 	.word	0x20002290

080107cc <_tx_byte_pool_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_byte_pool_cleanup(TX_THREAD *thread_ptr, ULONG suspension_sequence)
{
 80107cc:	b580      	push	{r7, lr}
 80107ce:	b08e      	sub	sp, #56	; 0x38
 80107d0:	af00      	add	r7, sp, #0
 80107d2:	6078      	str	r0, [r7, #4]
 80107d4:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80107d6:	f3ef 8310 	mrs	r3, PRIMASK
 80107da:	623b      	str	r3, [r7, #32]
    return(posture);
 80107dc:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 80107de:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 80107e0:	b672      	cpsid	i
    return(int_posture);
 80107e2:	69fb      	ldr	r3, [r7, #28]


#ifndef TX_NOT_INTERRUPTABLE

    /* Disable interrupts to remove the suspended thread from the byte pool.  */
    TX_DISABLE
 80107e4:	637b      	str	r3, [r7, #52]	; 0x34

    /* Determine if the cleanup is still required.  */
    if (thread_ptr -> tx_thread_suspend_cleanup == &(_tx_byte_pool_cleanup))
 80107e6:	687b      	ldr	r3, [r7, #4]
 80107e8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80107ea:	4a33      	ldr	r2, [pc, #204]	; (80108b8 <_tx_byte_pool_cleanup+0xec>)
 80107ec:	4293      	cmp	r3, r2
 80107ee:	d158      	bne.n	80108a2 <_tx_byte_pool_cleanup+0xd6>
    {

        /* Check for valid suspension sequence.  */
        if (suspension_sequence == thread_ptr -> tx_thread_suspension_sequence)
 80107f0:	687b      	ldr	r3, [r7, #4]
 80107f2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80107f6:	683a      	ldr	r2, [r7, #0]
 80107f8:	429a      	cmp	r2, r3
 80107fa:	d152      	bne.n	80108a2 <_tx_byte_pool_cleanup+0xd6>
        {

            /* Setup pointer to byte pool control block.  */
            pool_ptr =  TX_VOID_TO_BYTE_POOL_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
 80107fc:	687b      	ldr	r3, [r7, #4]
 80107fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010800:	633b      	str	r3, [r7, #48]	; 0x30

            /* Check for a NULL byte pool pointer.  */
            if (pool_ptr != TX_NULL)
 8010802:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010804:	2b00      	cmp	r3, #0
 8010806:	d04c      	beq.n	80108a2 <_tx_byte_pool_cleanup+0xd6>
            {

                /* Check for valid pool ID.  */
                if (pool_ptr -> tx_byte_pool_id == TX_BYTE_POOL_ID)
 8010808:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801080a:	681b      	ldr	r3, [r3, #0]
 801080c:	4a2b      	ldr	r2, [pc, #172]	; (80108bc <_tx_byte_pool_cleanup+0xf0>)
 801080e:	4293      	cmp	r3, r2
 8010810:	d147      	bne.n	80108a2 <_tx_byte_pool_cleanup+0xd6>
                {

                    /* Determine if there are any thread suspensions.  */
                    if (pool_ptr -> tx_byte_pool_suspended_count != TX_NO_SUSPENSIONS)
 8010812:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010814:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010816:	2b00      	cmp	r3, #0
 8010818:	d043      	beq.n	80108a2 <_tx_byte_pool_cleanup+0xd6>
                        /* Setup pointer to byte pool control block.  */
                        pool_ptr =  TX_VOID_TO_BYTE_POOL_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
#endif

                        /* Thread suspended for memory... Clear the suspension cleanup flag.  */
                        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 801081a:	687b      	ldr	r3, [r7, #4]
 801081c:	2200      	movs	r2, #0
 801081e:	669a      	str	r2, [r3, #104]	; 0x68

                        /* Decrement the suspension count.  */
                        pool_ptr -> tx_byte_pool_suspended_count--;
 8010820:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010822:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010824:	1e5a      	subs	r2, r3, #1
 8010826:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010828:	629a      	str	r2, [r3, #40]	; 0x28

                        /* Pickup the suspended count.  */
                        suspended_count =  pool_ptr -> tx_byte_pool_suspended_count;
 801082a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801082c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801082e:	62fb      	str	r3, [r7, #44]	; 0x2c

                        /* Remove the suspended thread from the list.  */

                        /* See if this is the only suspended thread on the list.  */
                        if (suspended_count == TX_NO_SUSPENSIONS)
 8010830:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010832:	2b00      	cmp	r3, #0
 8010834:	d103      	bne.n	801083e <_tx_byte_pool_cleanup+0x72>
                        {

                            /* Yes, the only suspended thread.  */

                            /* Update the head pointer.  */
                            pool_ptr -> tx_byte_pool_suspension_list =  TX_NULL;
 8010836:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010838:	2200      	movs	r2, #0
 801083a:	625a      	str	r2, [r3, #36]	; 0x24
 801083c:	e013      	b.n	8010866 <_tx_byte_pool_cleanup+0x9a>
                        {

                            /* At least one more thread is on the same suspension list.  */

                            /* Update the links of the adjacent threads.  */
                            next_thread =                                   thread_ptr -> tx_thread_suspended_next;
 801083e:	687b      	ldr	r3, [r7, #4]
 8010840:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010842:	62bb      	str	r3, [r7, #40]	; 0x28
                            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 8010844:	687b      	ldr	r3, [r7, #4]
 8010846:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010848:	627b      	str	r3, [r7, #36]	; 0x24
                            next_thread -> tx_thread_suspended_previous =   previous_thread;
 801084a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801084c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801084e:	675a      	str	r2, [r3, #116]	; 0x74
                            previous_thread -> tx_thread_suspended_next =   next_thread;
 8010850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010852:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010854:	671a      	str	r2, [r3, #112]	; 0x70

                            /* Determine if we need to update the head pointer.  */
                            if (pool_ptr -> tx_byte_pool_suspension_list == thread_ptr)
 8010856:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010858:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801085a:	687a      	ldr	r2, [r7, #4]
 801085c:	429a      	cmp	r2, r3
 801085e:	d102      	bne.n	8010866 <_tx_byte_pool_cleanup+0x9a>
                            {

                                /* Update the list head pointer.  */
                                pool_ptr -> tx_byte_pool_suspension_list =      next_thread;
 8010860:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010862:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010864:	625a      	str	r2, [r3, #36]	; 0x24
                            }
                        }

                        /* Now we need to determine if this cleanup is from a terminate, timeout,
                           or from a wait abort.  */
                        if (thread_ptr -> tx_thread_state == TX_BYTE_MEMORY)
 8010866:	687b      	ldr	r3, [r7, #4]
 8010868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801086a:	2b09      	cmp	r3, #9
 801086c:	d119      	bne.n	80108a2 <_tx_byte_pool_cleanup+0xd6>
                            /* Increment the number of timeouts on this byte pool.  */
                            pool_ptr -> tx_byte_pool_performance_timeout_count++;
#endif

                            /* Setup return status.  */
                            thread_ptr -> tx_thread_suspend_status =  TX_NO_MEMORY;
 801086e:	687b      	ldr	r3, [r7, #4]
 8010870:	2210      	movs	r2, #16
 8010872:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                            /* Resume the thread!  */
                            _tx_thread_system_ni_resume(thread_ptr);
#else

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 8010876:	4b12      	ldr	r3, [pc, #72]	; (80108c0 <_tx_byte_pool_cleanup+0xf4>)
 8010878:	681b      	ldr	r3, [r3, #0]
 801087a:	3301      	adds	r3, #1
 801087c:	4a10      	ldr	r2, [pc, #64]	; (80108c0 <_tx_byte_pool_cleanup+0xf4>)
 801087e:	6013      	str	r3, [r2, #0]
 8010880:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010882:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8010884:	693b      	ldr	r3, [r7, #16]
 8010886:	f383 8810 	msr	PRIMASK, r3
}
 801088a:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Resume the thread!  */
                            _tx_thread_system_resume(thread_ptr);
 801088c:	6878      	ldr	r0, [r7, #4]
 801088e:	f001 ffeb 	bl	8012868 <_tx_thread_system_resume>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8010892:	f3ef 8310 	mrs	r3, PRIMASK
 8010896:	61bb      	str	r3, [r7, #24]
    return(posture);
 8010898:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 801089a:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 801089c:	b672      	cpsid	i
    return(int_posture);
 801089e:	697b      	ldr	r3, [r7, #20]

                            /* Disable interrupts.  */
                            TX_DISABLE
 80108a0:	637b      	str	r3, [r7, #52]	; 0x34
 80108a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80108a4:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80108a6:	68fb      	ldr	r3, [r7, #12]
 80108a8:	f383 8810 	msr	PRIMASK, r3
}
 80108ac:	bf00      	nop
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 80108ae:	bf00      	nop
 80108b0:	3738      	adds	r7, #56	; 0x38
 80108b2:	46bd      	mov	sp, r7
 80108b4:	bd80      	pop	{r7, pc}
 80108b6:	bf00      	nop
 80108b8:	080107cd 	.word	0x080107cd
 80108bc:	42595445 	.word	0x42595445
 80108c0:	20002290 	.word	0x20002290

080108c4 <_tx_byte_pool_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_byte_pool_create(TX_BYTE_POOL *pool_ptr, CHAR *name_ptr, VOID *pool_start, ULONG pool_size)
{
 80108c4:	b580      	push	{r7, lr}
 80108c6:	b096      	sub	sp, #88	; 0x58
 80108c8:	af02      	add	r7, sp, #8
 80108ca:	60f8      	str	r0, [r7, #12]
 80108cc:	60b9      	str	r1, [r7, #8]
 80108ce:	607a      	str	r2, [r7, #4]
 80108d0:	603b      	str	r3, [r7, #0]
TX_BYTE_POOL        *previous_pool;
ALIGN_TYPE          *free_ptr;


    /* Initialize the byte pool control block to all zeros.  */
    TX_MEMSET(pool_ptr, 0, (sizeof(TX_BYTE_POOL)));
 80108d2:	2234      	movs	r2, #52	; 0x34
 80108d4:	2100      	movs	r1, #0
 80108d6:	68f8      	ldr	r0, [r7, #12]
 80108d8:	f003 fb72 	bl	8013fc0 <memset>

    /* Round the pool size down to something that is evenly divisible by
       an ULONG.  */
    pool_size =   (pool_size/(sizeof(ALIGN_TYPE))) * (sizeof(ALIGN_TYPE));
 80108dc:	683b      	ldr	r3, [r7, #0]
 80108de:	f023 0303 	bic.w	r3, r3, #3
 80108e2:	603b      	str	r3, [r7, #0]

    /* Setup the basic byte pool fields.  */
    pool_ptr -> tx_byte_pool_name =              name_ptr;
 80108e4:	68fb      	ldr	r3, [r7, #12]
 80108e6:	68ba      	ldr	r2, [r7, #8]
 80108e8:	605a      	str	r2, [r3, #4]

    /* Save the start and size of the pool.  */
    pool_ptr -> tx_byte_pool_start =   TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 80108ea:	68fb      	ldr	r3, [r7, #12]
 80108ec:	687a      	ldr	r2, [r7, #4]
 80108ee:	619a      	str	r2, [r3, #24]
    pool_ptr -> tx_byte_pool_size =    pool_size;
 80108f0:	68fb      	ldr	r3, [r7, #12]
 80108f2:	683a      	ldr	r2, [r7, #0]
 80108f4:	61da      	str	r2, [r3, #28]

    /* Setup memory list to the beginning as well as the search pointer.  */
    pool_ptr -> tx_byte_pool_list =    TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 80108f6:	68fb      	ldr	r3, [r7, #12]
 80108f8:	687a      	ldr	r2, [r7, #4]
 80108fa:	611a      	str	r2, [r3, #16]
    pool_ptr -> tx_byte_pool_search =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 80108fc:	68fb      	ldr	r3, [r7, #12]
 80108fe:	687a      	ldr	r2, [r7, #4]
 8010900:	615a      	str	r2, [r3, #20]

    /* Initially, the pool will have two blocks.  One large block at the
       beginning that is available and a small allocated block at the end
       of the pool that is there just for the algorithm.  Be sure to count
       the available block's header in the available bytes count.  */
    pool_ptr -> tx_byte_pool_available =   pool_size - ((sizeof(VOID *)) + (sizeof(ALIGN_TYPE)));
 8010902:	683b      	ldr	r3, [r7, #0]
 8010904:	f1a3 0208 	sub.w	r2, r3, #8
 8010908:	68fb      	ldr	r3, [r7, #12]
 801090a:	609a      	str	r2, [r3, #8]
    pool_ptr -> tx_byte_pool_fragments =   ((UINT) 2);
 801090c:	68fb      	ldr	r3, [r7, #12]
 801090e:	2202      	movs	r2, #2
 8010910:	60da      	str	r2, [r3, #12]
    /* Each block contains a "next" pointer that points to the next block in the pool followed by a ALIGN_TYPE
       field that contains either the constant TX_BYTE_BLOCK_FREE (if the block is free) or a pointer to the
       owning pool (if the block is allocated).  */

    /* Calculate the end of the pool's memory area.  */
    block_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8010912:	687b      	ldr	r3, [r7, #4]
 8010914:	617b      	str	r3, [r7, #20]
    block_ptr =  TX_UCHAR_POINTER_ADD(block_ptr, pool_size);
 8010916:	697a      	ldr	r2, [r7, #20]
 8010918:	683b      	ldr	r3, [r7, #0]
 801091a:	4413      	add	r3, r2
 801091c:	617b      	str	r3, [r7, #20]

    /* Backup the end of the pool pointer and build the pre-allocated block.  */
    block_ptr =  TX_UCHAR_POINTER_SUB(block_ptr, (sizeof(ALIGN_TYPE)));
 801091e:	697b      	ldr	r3, [r7, #20]
 8010920:	3b04      	subs	r3, #4
 8010922:	617b      	str	r3, [r7, #20]

    /* Cast the pool pointer into a ULONG.  */
    temp_ptr =             TX_BYTE_POOL_TO_UCHAR_POINTER_CONVERT(pool_ptr);
 8010924:	68fb      	ldr	r3, [r7, #12]
 8010926:	647b      	str	r3, [r7, #68]	; 0x44
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(block_ptr);
 8010928:	697b      	ldr	r3, [r7, #20]
 801092a:	643b      	str	r3, [r7, #64]	; 0x40
    *block_indirect_ptr =  temp_ptr;
 801092c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801092e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010930:	601a      	str	r2, [r3, #0]

    block_ptr =            TX_UCHAR_POINTER_SUB(block_ptr, (sizeof(UCHAR *)));
 8010932:	697b      	ldr	r3, [r7, #20]
 8010934:	3b04      	subs	r3, #4
 8010936:	617b      	str	r3, [r7, #20]
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(block_ptr);
 8010938:	697b      	ldr	r3, [r7, #20]
 801093a:	643b      	str	r3, [r7, #64]	; 0x40
    *block_indirect_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 801093c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801093e:	687a      	ldr	r2, [r7, #4]
 8010940:	601a      	str	r2, [r3, #0]

    /* Now setup the large available block in the pool.  */
    temp_ptr =             TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8010942:	687b      	ldr	r3, [r7, #4]
 8010944:	647b      	str	r3, [r7, #68]	; 0x44
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(temp_ptr);
 8010946:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010948:	643b      	str	r3, [r7, #64]	; 0x40
    *block_indirect_ptr =  block_ptr;
 801094a:	697a      	ldr	r2, [r7, #20]
 801094c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801094e:	601a      	str	r2, [r3, #0]
    block_ptr =            TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8010950:	687b      	ldr	r3, [r7, #4]
 8010952:	617b      	str	r3, [r7, #20]
    block_ptr =            TX_UCHAR_POINTER_ADD(block_ptr, (sizeof(UCHAR *)));
 8010954:	697b      	ldr	r3, [r7, #20]
 8010956:	3304      	adds	r3, #4
 8010958:	617b      	str	r3, [r7, #20]
    free_ptr =             TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(block_ptr);
 801095a:	697b      	ldr	r3, [r7, #20]
 801095c:	63fb      	str	r3, [r7, #60]	; 0x3c
    *free_ptr =            TX_BYTE_BLOCK_FREE;
 801095e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010960:	4a5d      	ldr	r2, [pc, #372]	; (8010ad8 <_tx_byte_pool_create+0x214>)
 8010962:	601a      	str	r2, [r3, #0]

    /* Clear the owner id.  */
    pool_ptr -> tx_byte_pool_owner =  TX_NULL;
 8010964:	68fb      	ldr	r3, [r7, #12]
 8010966:	2200      	movs	r2, #0
 8010968:	621a      	str	r2, [r3, #32]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801096a:	f3ef 8310 	mrs	r3, PRIMASK
 801096e:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 8010970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    int_posture = __get_interrupt_posture();
 8010972:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSID i" : : : "memory");
 8010974:	b672      	cpsid	i
    return(int_posture);
 8010976:	6a3b      	ldr	r3, [r7, #32]

    /* Disable interrupts to place the byte pool on the created list.  */
    TX_DISABLE
 8010978:	63bb      	str	r3, [r7, #56]	; 0x38

    /* Setup the byte pool ID to make it valid.  */
    pool_ptr -> tx_byte_pool_id =  TX_BYTE_POOL_ID;
 801097a:	68fb      	ldr	r3, [r7, #12]
 801097c:	4a57      	ldr	r2, [pc, #348]	; (8010adc <_tx_byte_pool_create+0x218>)
 801097e:	601a      	str	r2, [r3, #0]

    /* Place the byte pool on the list of created byte pools.  First,
       check for an empty list.  */
    if (_tx_byte_pool_created_count == TX_EMPTY)
 8010980:	4b57      	ldr	r3, [pc, #348]	; (8010ae0 <_tx_byte_pool_create+0x21c>)
 8010982:	681b      	ldr	r3, [r3, #0]
 8010984:	2b00      	cmp	r3, #0
 8010986:	d109      	bne.n	801099c <_tx_byte_pool_create+0xd8>
    {

        /* The created byte pool list is empty.  Add byte pool to empty list.  */
        _tx_byte_pool_created_ptr =                  pool_ptr;
 8010988:	4a56      	ldr	r2, [pc, #344]	; (8010ae4 <_tx_byte_pool_create+0x220>)
 801098a:	68fb      	ldr	r3, [r7, #12]
 801098c:	6013      	str	r3, [r2, #0]
        pool_ptr -> tx_byte_pool_created_next =      pool_ptr;
 801098e:	68fb      	ldr	r3, [r7, #12]
 8010990:	68fa      	ldr	r2, [r7, #12]
 8010992:	62da      	str	r2, [r3, #44]	; 0x2c
        pool_ptr -> tx_byte_pool_created_previous =  pool_ptr;
 8010994:	68fb      	ldr	r3, [r7, #12]
 8010996:	68fa      	ldr	r2, [r7, #12]
 8010998:	631a      	str	r2, [r3, #48]	; 0x30
 801099a:	e011      	b.n	80109c0 <_tx_byte_pool_create+0xfc>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_pool =      _tx_byte_pool_created_ptr;
 801099c:	4b51      	ldr	r3, [pc, #324]	; (8010ae4 <_tx_byte_pool_create+0x220>)
 801099e:	681b      	ldr	r3, [r3, #0]
 80109a0:	637b      	str	r3, [r7, #52]	; 0x34
        previous_pool =  next_pool -> tx_byte_pool_created_previous;
 80109a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80109a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80109a6:	633b      	str	r3, [r7, #48]	; 0x30

        /* Place the new byte pool in the list.  */
        next_pool -> tx_byte_pool_created_previous =  pool_ptr;
 80109a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80109aa:	68fa      	ldr	r2, [r7, #12]
 80109ac:	631a      	str	r2, [r3, #48]	; 0x30
        previous_pool -> tx_byte_pool_created_next =  pool_ptr;
 80109ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80109b0:	68fa      	ldr	r2, [r7, #12]
 80109b2:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Setup this byte pool's created links.  */
        pool_ptr -> tx_byte_pool_created_previous =  previous_pool;
 80109b4:	68fb      	ldr	r3, [r7, #12]
 80109b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80109b8:	631a      	str	r2, [r3, #48]	; 0x30
        pool_ptr -> tx_byte_pool_created_next =      next_pool;
 80109ba:	68fb      	ldr	r3, [r7, #12]
 80109bc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80109be:	62da      	str	r2, [r3, #44]	; 0x2c
    }

    /* Increment the number of created byte pools.  */
    _tx_byte_pool_created_count++;
 80109c0:	4b47      	ldr	r3, [pc, #284]	; (8010ae0 <_tx_byte_pool_create+0x21c>)
 80109c2:	681b      	ldr	r3, [r3, #0]
 80109c4:	3301      	adds	r3, #1
 80109c6:	4a46      	ldr	r2, [pc, #280]	; (8010ae0 <_tx_byte_pool_create+0x21c>)
 80109c8:	6013      	str	r3, [r2, #0]

    /* Optional byte pool create extended processing.  */
    TX_BYTE_POOL_CREATE_EXTENSION(pool_ptr)

    /* If trace is enabled, register this object.  */
    TX_TRACE_OBJECT_REGISTER(TX_TRACE_OBJECT_TYPE_BYTE_POOL, pool_ptr, name_ptr, pool_size, 0)
 80109ca:	2300      	movs	r3, #0
 80109cc:	9300      	str	r3, [sp, #0]
 80109ce:	683b      	ldr	r3, [r7, #0]
 80109d0:	68ba      	ldr	r2, [r7, #8]
 80109d2:	68f9      	ldr	r1, [r7, #12]
 80109d4:	2008      	movs	r0, #8
 80109d6:	f002 fe69 	bl	80136ac <_tx_trace_object_register>

    /* If trace is enabled, insert this event into the trace buffer.  */
    TX_TRACE_IN_LINE_INSERT(TX_TRACE_BYTE_POOL_CREATE, pool_ptr, TX_POINTER_TO_ULONG_CONVERT(pool_start), pool_size, TX_POINTER_TO_ULONG_CONVERT(&block_ptr), TX_TRACE_BYTE_POOL_EVENTS)
 80109da:	4b43      	ldr	r3, [pc, #268]	; (8010ae8 <_tx_byte_pool_create+0x224>)
 80109dc:	681b      	ldr	r3, [r3, #0]
 80109de:	62fb      	str	r3, [r7, #44]	; 0x2c
 80109e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80109e2:	2b00      	cmp	r3, #0
 80109e4:	d06c      	beq.n	8010ac0 <_tx_byte_pool_create+0x1fc>
 80109e6:	4b41      	ldr	r3, [pc, #260]	; (8010aec <_tx_byte_pool_create+0x228>)
 80109e8:	681b      	ldr	r3, [r3, #0]
 80109ea:	f003 0304 	and.w	r3, r3, #4
 80109ee:	2b00      	cmp	r3, #0
 80109f0:	d066      	beq.n	8010ac0 <_tx_byte_pool_create+0x1fc>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80109f2:	f3ef 8305 	mrs	r3, IPSR
 80109f6:	61fb      	str	r3, [r7, #28]
    return(ipsr_value);
 80109f8:	69fa      	ldr	r2, [r7, #28]
 80109fa:	4b3d      	ldr	r3, [pc, #244]	; (8010af0 <_tx_byte_pool_create+0x22c>)
 80109fc:	681b      	ldr	r3, [r3, #0]
 80109fe:	4313      	orrs	r3, r2
 8010a00:	62bb      	str	r3, [r7, #40]	; 0x28
 8010a02:	4b3c      	ldr	r3, [pc, #240]	; (8010af4 <_tx_byte_pool_create+0x230>)
 8010a04:	681b      	ldr	r3, [r3, #0]
 8010a06:	64bb      	str	r3, [r7, #72]	; 0x48
 8010a08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010a0a:	2b00      	cmp	r3, #0
 8010a0c:	d10b      	bne.n	8010a26 <_tx_byte_pool_create+0x162>
 8010a0e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010a10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010a12:	64fb      	str	r3, [r7, #76]	; 0x4c
 8010a14:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010a16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010a18:	041a      	lsls	r2, r3, #16
 8010a1a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010a1c:	4313      	orrs	r3, r2
 8010a1e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8010a22:	64fb      	str	r3, [r7, #76]	; 0x4c
 8010a24:	e00e      	b.n	8010a44 <_tx_byte_pool_create+0x180>
 8010a26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010a28:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 8010a2c:	d205      	bcs.n	8010a3a <_tx_byte_pool_create+0x176>
 8010a2e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010a30:	64fb      	str	r3, [r7, #76]	; 0x4c
 8010a32:	f04f 33ff 	mov.w	r3, #4294967295
 8010a36:	64bb      	str	r3, [r7, #72]	; 0x48
 8010a38:	e004      	b.n	8010a44 <_tx_byte_pool_create+0x180>
 8010a3a:	f04f 33f0 	mov.w	r3, #4042322160	; 0xf0f0f0f0
 8010a3e:	64bb      	str	r3, [r7, #72]	; 0x48
 8010a40:	2300      	movs	r3, #0
 8010a42:	64fb      	str	r3, [r7, #76]	; 0x4c
 8010a44:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010a46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010a48:	601a      	str	r2, [r3, #0]
 8010a4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010a4c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8010a4e:	605a      	str	r2, [r3, #4]
 8010a50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010a52:	2215      	movs	r2, #21
 8010a54:	609a      	str	r2, [r3, #8]
 8010a56:	4b28      	ldr	r3, [pc, #160]	; (8010af8 <_tx_byte_pool_create+0x234>)
 8010a58:	681a      	ldr	r2, [r3, #0]
 8010a5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010a5c:	60da      	str	r2, [r3, #12]
 8010a5e:	68fa      	ldr	r2, [r7, #12]
 8010a60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010a62:	611a      	str	r2, [r3, #16]
 8010a64:	687a      	ldr	r2, [r7, #4]
 8010a66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010a68:	615a      	str	r2, [r3, #20]
 8010a6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010a6c:	683a      	ldr	r2, [r7, #0]
 8010a6e:	619a      	str	r2, [r3, #24]
 8010a70:	f107 0214 	add.w	r2, r7, #20
 8010a74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010a76:	61da      	str	r2, [r3, #28]
 8010a78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010a7a:	3320      	adds	r3, #32
 8010a7c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010a7e:	4b1f      	ldr	r3, [pc, #124]	; (8010afc <_tx_byte_pool_create+0x238>)
 8010a80:	681b      	ldr	r3, [r3, #0]
 8010a82:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010a84:	429a      	cmp	r2, r3
 8010a86:	d314      	bcc.n	8010ab2 <_tx_byte_pool_create+0x1ee>
 8010a88:	4b1d      	ldr	r3, [pc, #116]	; (8010b00 <_tx_byte_pool_create+0x23c>)
 8010a8a:	681b      	ldr	r3, [r3, #0]
 8010a8c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010a8e:	4a16      	ldr	r2, [pc, #88]	; (8010ae8 <_tx_byte_pool_create+0x224>)
 8010a90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010a92:	6013      	str	r3, [r2, #0]
 8010a94:	4b1b      	ldr	r3, [pc, #108]	; (8010b04 <_tx_byte_pool_create+0x240>)
 8010a96:	681b      	ldr	r3, [r3, #0]
 8010a98:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010a9a:	621a      	str	r2, [r3, #32]
 8010a9c:	4b1a      	ldr	r3, [pc, #104]	; (8010b08 <_tx_byte_pool_create+0x244>)
 8010a9e:	681b      	ldr	r3, [r3, #0]
 8010aa0:	2b00      	cmp	r3, #0
 8010aa2:	d00d      	beq.n	8010ac0 <_tx_byte_pool_create+0x1fc>
 8010aa4:	4b18      	ldr	r3, [pc, #96]	; (8010b08 <_tx_byte_pool_create+0x244>)
 8010aa6:	681b      	ldr	r3, [r3, #0]
 8010aa8:	4a16      	ldr	r2, [pc, #88]	; (8010b04 <_tx_byte_pool_create+0x240>)
 8010aaa:	6812      	ldr	r2, [r2, #0]
 8010aac:	4610      	mov	r0, r2
 8010aae:	4798      	blx	r3
 8010ab0:	e006      	b.n	8010ac0 <_tx_byte_pool_create+0x1fc>
 8010ab2:	4a0d      	ldr	r2, [pc, #52]	; (8010ae8 <_tx_byte_pool_create+0x224>)
 8010ab4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010ab6:	6013      	str	r3, [r2, #0]
 8010ab8:	4b12      	ldr	r3, [pc, #72]	; (8010b04 <_tx_byte_pool_create+0x240>)
 8010aba:	681b      	ldr	r3, [r3, #0]
 8010abc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010abe:	621a      	str	r2, [r3, #32]
 8010ac0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010ac2:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8010ac4:	69bb      	ldr	r3, [r7, #24]
 8010ac6:	f383 8810 	msr	PRIMASK, r3
}
 8010aca:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 8010acc:	2300      	movs	r3, #0
}
 8010ace:	4618      	mov	r0, r3
 8010ad0:	3750      	adds	r7, #80	; 0x50
 8010ad2:	46bd      	mov	sp, r7
 8010ad4:	bd80      	pop	{r7, pc}
 8010ad6:	bf00      	nop
 8010ad8:	ffffeeee 	.word	0xffffeeee
 8010adc:	42595445 	.word	0x42595445
 8010ae0:	200021ec 	.word	0x200021ec
 8010ae4:	200021e8 	.word	0x200021e8
 8010ae8:	20002814 	.word	0x20002814
 8010aec:	20002818 	.word	0x20002818
 8010af0:	20000010 	.word	0x20000010
 8010af4:	200021f8 	.word	0x200021f8
 8010af8:	e0001004 	.word	0xe0001004
 8010afc:	20002810 	.word	0x20002810
 8010b00:	2000280c 	.word	0x2000280c
 8010b04:	20002800 	.word	0x20002800
 8010b08:	2000281c 	.word	0x2000281c

08010b0c <_tx_byte_pool_search>:
/*                                            calculation,                */
/*                                            resulting in version 6.1.7  */
/*                                                                        */
/**************************************************************************/
UCHAR  *_tx_byte_pool_search(TX_BYTE_POOL *pool_ptr, ULONG memory_size)
{
 8010b0c:	b480      	push	{r7}
 8010b0e:	b097      	sub	sp, #92	; 0x5c
 8010b10:	af00      	add	r7, sp, #0
 8010b12:	6078      	str	r0, [r7, #4]
 8010b14:	6039      	str	r1, [r7, #0]
UCHAR           *next_ptr;
UCHAR           **this_block_link_ptr;
UCHAR           **next_block_link_ptr;
ULONG           available_bytes;
UINT            examine_blocks;
UINT            first_free_block_found =  TX_FALSE;
 8010b16:	2300      	movs	r3, #0
 8010b18:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8010b1a:	f3ef 8310 	mrs	r3, PRIMASK
 8010b1e:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 8010b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    int_posture = __get_interrupt_posture();
 8010b22:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSID i" : : : "memory");
 8010b24:	b672      	cpsid	i
    return(int_posture);
 8010b26:	6a3b      	ldr	r3, [r7, #32]
UCHAR           *work_ptr;
ULONG           total_theoretical_available;


    /* Disable interrupts.  */
    TX_DISABLE
 8010b28:	657b      	str	r3, [r7, #84]	; 0x54

    /* First, determine if there are enough bytes in the pool.  */
    /* Theoretical bytes available = free bytes + ((fragments-2) * overhead of each block) */
    total_theoretical_available = pool_ptr -> tx_byte_pool_available + ((pool_ptr -> tx_byte_pool_fragments - 2) * ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE))));
 8010b2a:	687b      	ldr	r3, [r7, #4]
 8010b2c:	689a      	ldr	r2, [r3, #8]
 8010b2e:	687b      	ldr	r3, [r7, #4]
 8010b30:	68db      	ldr	r3, [r3, #12]
 8010b32:	3b02      	subs	r3, #2
 8010b34:	00db      	lsls	r3, r3, #3
 8010b36:	4413      	add	r3, r2
 8010b38:	643b      	str	r3, [r7, #64]	; 0x40
    if (memory_size >= total_theoretical_available)
 8010b3a:	683a      	ldr	r2, [r7, #0]
 8010b3c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010b3e:	429a      	cmp	r2, r3
 8010b40:	d308      	bcc.n	8010b54 <_tx_byte_pool_search+0x48>
 8010b42:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010b44:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8010b46:	69fb      	ldr	r3, [r7, #28]
 8010b48:	f383 8810 	msr	PRIMASK, r3
}
 8010b4c:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Not enough memory, return a NULL pointer.  */
        current_ptr =  TX_NULL;
 8010b4e:	2300      	movs	r3, #0
 8010b50:	653b      	str	r3, [r7, #80]	; 0x50
 8010b52:	e0dd      	b.n	8010d10 <_tx_byte_pool_search+0x204>
    }
    else
    {

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(thread_ptr)
 8010b54:	4b72      	ldr	r3, [pc, #456]	; (8010d20 <_tx_byte_pool_search+0x214>)
 8010b56:	681b      	ldr	r3, [r3, #0]
 8010b58:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Setup ownership of the byte pool.  */
        pool_ptr -> tx_byte_pool_owner =  thread_ptr;
 8010b5a:	687b      	ldr	r3, [r7, #4]
 8010b5c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8010b5e:	621a      	str	r2, [r3, #32]

        /* Walk through the memory pool in search for a large enough block.  */
        current_ptr =      pool_ptr -> tx_byte_pool_search;
 8010b60:	687b      	ldr	r3, [r7, #4]
 8010b62:	695b      	ldr	r3, [r3, #20]
 8010b64:	653b      	str	r3, [r7, #80]	; 0x50
        examine_blocks =   pool_ptr -> tx_byte_pool_fragments + ((UINT) 1);
 8010b66:	687b      	ldr	r3, [r7, #4]
 8010b68:	68db      	ldr	r3, [r3, #12]
 8010b6a:	3301      	adds	r3, #1
 8010b6c:	64bb      	str	r3, [r7, #72]	; 0x48
        available_bytes =  ((ULONG) 0);
 8010b6e:	2300      	movs	r3, #0
 8010b70:	64fb      	str	r3, [r7, #76]	; 0x4c
            /* Increment the number of fragments searched on this pool.  */
            pool_ptr -> tx_byte_pool_performance_search_count++;
#endif

            /* Check to see if this block is free.  */
            work_ptr =  TX_UCHAR_POINTER_ADD(current_ptr, (sizeof(UCHAR *)));
 8010b72:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010b74:	3304      	adds	r3, #4
 8010b76:	63bb      	str	r3, [r7, #56]	; 0x38
            free_ptr =  TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(work_ptr);
 8010b78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010b7a:	637b      	str	r3, [r7, #52]	; 0x34
            if ((*free_ptr) == TX_BYTE_BLOCK_FREE)
 8010b7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010b7e:	681b      	ldr	r3, [r3, #0]
 8010b80:	4a68      	ldr	r2, [pc, #416]	; (8010d24 <_tx_byte_pool_search+0x218>)
 8010b82:	4293      	cmp	r3, r2
 8010b84:	d143      	bne.n	8010c0e <_tx_byte_pool_search+0x102>
            {

                /* Determine if this is the first free block.  */
                if (first_free_block_found == TX_FALSE)
 8010b86:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010b88:	2b00      	cmp	r3, #0
 8010b8a:	d104      	bne.n	8010b96 <_tx_byte_pool_search+0x8a>
                {
                    /* This is the first free block.  */
                    pool_ptr->tx_byte_pool_search =  current_ptr;
 8010b8c:	687b      	ldr	r3, [r7, #4]
 8010b8e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8010b90:	615a      	str	r2, [r3, #20]

                    /* Set the flag to indicate we have found the first free
                       block.  */
                    first_free_block_found =  TX_TRUE;
 8010b92:	2301      	movs	r3, #1
 8010b94:	647b      	str	r3, [r7, #68]	; 0x44
                }

                /* Block is free, see if it is large enough.  */

                /* Pickup the next block's pointer.  */
                this_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 8010b96:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010b98:	633b      	str	r3, [r7, #48]	; 0x30
                next_ptr =             *this_block_link_ptr;
 8010b9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010b9c:	681b      	ldr	r3, [r3, #0]
 8010b9e:	62fb      	str	r3, [r7, #44]	; 0x2c

                /* Calculate the number of bytes available in this block.  */
                available_bytes =   TX_UCHAR_POINTER_DIF(next_ptr, current_ptr);
 8010ba0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010ba2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010ba4:	1ad3      	subs	r3, r2, r3
 8010ba6:	64fb      	str	r3, [r7, #76]	; 0x4c
                available_bytes =   available_bytes - ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)));
 8010ba8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010baa:	3b08      	subs	r3, #8
 8010bac:	64fb      	str	r3, [r7, #76]	; 0x4c

                /* If this is large enough, we are done because our first-fit algorithm
                   has been satisfied!  */
                if (available_bytes >= memory_size)
 8010bae:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8010bb0:	683b      	ldr	r3, [r7, #0]
 8010bb2:	429a      	cmp	r2, r3
 8010bb4:	d257      	bcs.n	8010c66 <_tx_byte_pool_search+0x15a>
                }
                else
                {

                    /* Clear the available bytes variable.  */
                    available_bytes =  ((ULONG) 0);
 8010bb6:	2300      	movs	r3, #0
 8010bb8:	64fb      	str	r3, [r7, #76]	; 0x4c

                    /* Not enough memory, check to see if the neighbor is
                       free and can be merged.  */
                    work_ptr =  TX_UCHAR_POINTER_ADD(next_ptr, (sizeof(UCHAR *)));
 8010bba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010bbc:	3304      	adds	r3, #4
 8010bbe:	63bb      	str	r3, [r7, #56]	; 0x38
                    free_ptr =  TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(work_ptr);
 8010bc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010bc2:	637b      	str	r3, [r7, #52]	; 0x34
                    if ((*free_ptr) == TX_BYTE_BLOCK_FREE)
 8010bc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010bc6:	681b      	ldr	r3, [r3, #0]
 8010bc8:	4a56      	ldr	r2, [pc, #344]	; (8010d24 <_tx_byte_pool_search+0x218>)
 8010bca:	4293      	cmp	r3, r2
 8010bcc:	d113      	bne.n	8010bf6 <_tx_byte_pool_search+0xea>
                    {

                        /* Yes, neighbor block can be merged!  This is quickly accomplished
                           by updating the current block with the next blocks pointer.  */
                        next_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(next_ptr);
 8010bce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010bd0:	62bb      	str	r3, [r7, #40]	; 0x28
                        *this_block_link_ptr =  *next_block_link_ptr;
 8010bd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010bd4:	681a      	ldr	r2, [r3, #0]
 8010bd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010bd8:	601a      	str	r2, [r3, #0]

                        /* Reduce the fragment total.  We don't need to increase the bytes
                           available because all free headers are also included in the available
                           count.  */
                        pool_ptr -> tx_byte_pool_fragments--;
 8010bda:	687b      	ldr	r3, [r7, #4]
 8010bdc:	68db      	ldr	r3, [r3, #12]
 8010bde:	1e5a      	subs	r2, r3, #1
 8010be0:	687b      	ldr	r3, [r7, #4]
 8010be2:	60da      	str	r2, [r3, #12]
                        /* Increment the number of blocks merged on this pool.  */
                        pool_ptr -> tx_byte_pool_performance_merge_count++;
#endif

                        /* See if the search pointer is affected.  */
                        if (pool_ptr -> tx_byte_pool_search ==  next_ptr)
 8010be4:	687b      	ldr	r3, [r7, #4]
 8010be6:	695b      	ldr	r3, [r3, #20]
 8010be8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010bea:	429a      	cmp	r2, r3
 8010bec:	d114      	bne.n	8010c18 <_tx_byte_pool_search+0x10c>
                        {
                            /* Yes, update the search pointer.   */
                            pool_ptr -> tx_byte_pool_search =  current_ptr;
 8010bee:	687b      	ldr	r3, [r7, #4]
 8010bf0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8010bf2:	615a      	str	r2, [r3, #20]
 8010bf4:	e010      	b.n	8010c18 <_tx_byte_pool_search+0x10c>
                        }
                    }
                    else
                    {
                        /* Neighbor is not free so we can skip over it!  */
                        next_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(next_ptr);
 8010bf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010bf8:	62bb      	str	r3, [r7, #40]	; 0x28
                        current_ptr =  *next_block_link_ptr;
 8010bfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010bfc:	681b      	ldr	r3, [r3, #0]
 8010bfe:	653b      	str	r3, [r7, #80]	; 0x50

                        /* Decrement the examined block count to account for this one.  */
                        if (examine_blocks != ((UINT) 0))
 8010c00:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010c02:	2b00      	cmp	r3, #0
 8010c04:	d008      	beq.n	8010c18 <_tx_byte_pool_search+0x10c>
                        {
                            examine_blocks--;
 8010c06:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010c08:	3b01      	subs	r3, #1
 8010c0a:	64bb      	str	r3, [r7, #72]	; 0x48
 8010c0c:	e004      	b.n	8010c18 <_tx_byte_pool_search+0x10c>
            }
            else
            {

                /* Block is not free, move to next block.  */
                this_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 8010c0e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010c10:	633b      	str	r3, [r7, #48]	; 0x30
                current_ptr =  *this_block_link_ptr;
 8010c12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c14:	681b      	ldr	r3, [r3, #0]
 8010c16:	653b      	str	r3, [r7, #80]	; 0x50
            }

            /* Another block has been searched... decrement counter.  */
            if (examine_blocks != ((UINT) 0))
 8010c18:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010c1a:	2b00      	cmp	r3, #0
 8010c1c:	d002      	beq.n	8010c24 <_tx_byte_pool_search+0x118>
            {

                examine_blocks--;
 8010c1e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010c20:	3b01      	subs	r3, #1
 8010c22:	64bb      	str	r3, [r7, #72]	; 0x48
 8010c24:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010c26:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8010c28:	693b      	ldr	r3, [r7, #16]
 8010c2a:	f383 8810 	msr	PRIMASK, r3
}
 8010c2e:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8010c30:	f3ef 8310 	mrs	r3, PRIMASK
 8010c34:	61bb      	str	r3, [r7, #24]
    return(posture);
 8010c36:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8010c38:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8010c3a:	b672      	cpsid	i
    return(int_posture);
 8010c3c:	697b      	ldr	r3, [r7, #20]

            /* Restore interrupts temporarily.  */
            TX_RESTORE

            /* Disable interrupts.  */
            TX_DISABLE
 8010c3e:	657b      	str	r3, [r7, #84]	; 0x54

            /* Determine if anything has changed in terms of pool ownership.  */
            if (pool_ptr -> tx_byte_pool_owner != thread_ptr)
 8010c40:	687b      	ldr	r3, [r7, #4]
 8010c42:	6a1b      	ldr	r3, [r3, #32]
 8010c44:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8010c46:	429a      	cmp	r2, r3
 8010c48:	d009      	beq.n	8010c5e <_tx_byte_pool_search+0x152>
            {

                /* Pool changed ownership in the brief period interrupts were
                   enabled.  Reset the search.  */
                current_ptr =      pool_ptr -> tx_byte_pool_search;
 8010c4a:	687b      	ldr	r3, [r7, #4]
 8010c4c:	695b      	ldr	r3, [r3, #20]
 8010c4e:	653b      	str	r3, [r7, #80]	; 0x50
                examine_blocks =   pool_ptr -> tx_byte_pool_fragments + ((UINT) 1);
 8010c50:	687b      	ldr	r3, [r7, #4]
 8010c52:	68db      	ldr	r3, [r3, #12]
 8010c54:	3301      	adds	r3, #1
 8010c56:	64bb      	str	r3, [r7, #72]	; 0x48

                /* Setup our ownership again.  */
                pool_ptr -> tx_byte_pool_owner =  thread_ptr;
 8010c58:	687b      	ldr	r3, [r7, #4]
 8010c5a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8010c5c:	621a      	str	r2, [r3, #32]
            }
        } while(examine_blocks != ((UINT) 0));
 8010c5e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010c60:	2b00      	cmp	r3, #0
 8010c62:	d186      	bne.n	8010b72 <_tx_byte_pool_search+0x66>
 8010c64:	e000      	b.n	8010c68 <_tx_byte_pool_search+0x15c>
                    break;
 8010c66:	bf00      	nop

        /* Determine if a block was found.  If so, determine if it needs to be
           split.  */
        if (available_bytes != ((ULONG) 0))
 8010c68:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010c6a:	2b00      	cmp	r3, #0
 8010c6c:	d048      	beq.n	8010d00 <_tx_byte_pool_search+0x1f4>
        {

            /* Determine if we need to split this block.  */
            if ((available_bytes - memory_size) >= ((ULONG) TX_BYTE_BLOCK_MIN))
 8010c6e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8010c70:	683b      	ldr	r3, [r7, #0]
 8010c72:	1ad3      	subs	r3, r2, r3
 8010c74:	2b13      	cmp	r3, #19
 8010c76:	d91e      	bls.n	8010cb6 <_tx_byte_pool_search+0x1aa>
            {

                /* Split the block.  */
                next_ptr =  TX_UCHAR_POINTER_ADD(current_ptr, (memory_size + ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)))));
 8010c78:	683b      	ldr	r3, [r7, #0]
 8010c7a:	3308      	adds	r3, #8
 8010c7c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8010c7e:	4413      	add	r3, r2
 8010c80:	62fb      	str	r3, [r7, #44]	; 0x2c

                /* Setup the new free block.  */
                next_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(next_ptr);
 8010c82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010c84:	62bb      	str	r3, [r7, #40]	; 0x28
                this_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 8010c86:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010c88:	633b      	str	r3, [r7, #48]	; 0x30
                *next_block_link_ptr =  *this_block_link_ptr;
 8010c8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c8c:	681a      	ldr	r2, [r3, #0]
 8010c8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010c90:	601a      	str	r2, [r3, #0]
                work_ptr =              TX_UCHAR_POINTER_ADD(next_ptr, (sizeof(UCHAR *)));
 8010c92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010c94:	3304      	adds	r3, #4
 8010c96:	63bb      	str	r3, [r7, #56]	; 0x38
                free_ptr =              TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(work_ptr);
 8010c98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010c9a:	637b      	str	r3, [r7, #52]	; 0x34
                *free_ptr =             TX_BYTE_BLOCK_FREE;
 8010c9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010c9e:	4a21      	ldr	r2, [pc, #132]	; (8010d24 <_tx_byte_pool_search+0x218>)
 8010ca0:	601a      	str	r2, [r3, #0]

                /* Increase the total fragment counter.  */
                pool_ptr -> tx_byte_pool_fragments++;
 8010ca2:	687b      	ldr	r3, [r7, #4]
 8010ca4:	68db      	ldr	r3, [r3, #12]
 8010ca6:	1c5a      	adds	r2, r3, #1
 8010ca8:	687b      	ldr	r3, [r7, #4]
 8010caa:	60da      	str	r2, [r3, #12]

                /* Update the current pointer to point at the newly created block.  */
                *this_block_link_ptr =  next_ptr;
 8010cac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010cae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010cb0:	601a      	str	r2, [r3, #0]

                /* Set available equal to memory size for subsequent calculation.  */
                available_bytes =  memory_size;
 8010cb2:	683b      	ldr	r3, [r7, #0]
 8010cb4:	64fb      	str	r3, [r7, #76]	; 0x4c
                pool_ptr -> tx_byte_pool_performance_split_count++;
#endif
            }

            /* In any case, mark the current block as allocated.  */
            work_ptr =              TX_UCHAR_POINTER_ADD(current_ptr, (sizeof(UCHAR *)));
 8010cb6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010cb8:	3304      	adds	r3, #4
 8010cba:	63bb      	str	r3, [r7, #56]	; 0x38
            this_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(work_ptr);
 8010cbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010cbe:	633b      	str	r3, [r7, #48]	; 0x30
            *this_block_link_ptr =  TX_BYTE_POOL_TO_UCHAR_POINTER_CONVERT(pool_ptr);
 8010cc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010cc2:	687a      	ldr	r2, [r7, #4]
 8010cc4:	601a      	str	r2, [r3, #0]

            /* Reduce the number of available bytes in the pool.  */
            pool_ptr -> tx_byte_pool_available =  (pool_ptr -> tx_byte_pool_available - available_bytes) - ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)));
 8010cc6:	687b      	ldr	r3, [r7, #4]
 8010cc8:	689a      	ldr	r2, [r3, #8]
 8010cca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010ccc:	1ad3      	subs	r3, r2, r3
 8010cce:	f1a3 0208 	sub.w	r2, r3, #8
 8010cd2:	687b      	ldr	r3, [r7, #4]
 8010cd4:	609a      	str	r2, [r3, #8]

            /* Determine if the search pointer needs to be updated. This is only done
               if the search pointer matches the block to be returned.  */
            if (current_ptr == pool_ptr -> tx_byte_pool_search)
 8010cd6:	687b      	ldr	r3, [r7, #4]
 8010cd8:	695b      	ldr	r3, [r3, #20]
 8010cda:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8010cdc:	429a      	cmp	r2, r3
 8010cde:	d105      	bne.n	8010cec <_tx_byte_pool_search+0x1e0>
            {

                /* Yes, update the search pointer to the next block.  */
                this_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 8010ce0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010ce2:	633b      	str	r3, [r7, #48]	; 0x30
                pool_ptr -> tx_byte_pool_search =  *this_block_link_ptr;
 8010ce4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ce6:	681a      	ldr	r2, [r3, #0]
 8010ce8:	687b      	ldr	r3, [r7, #4]
 8010cea:	615a      	str	r2, [r3, #20]
 8010cec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010cee:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8010cf0:	68fb      	ldr	r3, [r7, #12]
 8010cf2:	f383 8810 	msr	PRIMASK, r3
}
 8010cf6:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Adjust the pointer for the application.  */
            current_ptr =  TX_UCHAR_POINTER_ADD(current_ptr, (((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)))));
 8010cf8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010cfa:	3308      	adds	r3, #8
 8010cfc:	653b      	str	r3, [r7, #80]	; 0x50
 8010cfe:	e007      	b.n	8010d10 <_tx_byte_pool_search+0x204>
 8010d00:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010d02:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8010d04:	68bb      	ldr	r3, [r7, #8]
 8010d06:	f383 8810 	msr	PRIMASK, r3
}
 8010d0a:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Set current pointer to NULL to indicate nothing was found.  */
            current_ptr =  TX_NULL;
 8010d0c:	2300      	movs	r3, #0
 8010d0e:	653b      	str	r3, [r7, #80]	; 0x50
        }
    }

    /* Return the search pointer.  */
    return(current_ptr);
 8010d10:	6d3b      	ldr	r3, [r7, #80]	; 0x50
}
 8010d12:	4618      	mov	r0, r3
 8010d14:	375c      	adds	r7, #92	; 0x5c
 8010d16:	46bd      	mov	sp, r7
 8010d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d1c:	4770      	bx	lr
 8010d1e:	bf00      	nop
 8010d20:	200021f8 	.word	0x200021f8
 8010d24:	ffffeeee 	.word	0xffffeeee

08010d28 <_tx_initialize_high_level>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID    _tx_initialize_high_level(VOID)
{
 8010d28:	b580      	push	{r7, lr}
 8010d2a:	af00      	add	r7, sp, #0

    /* Initialize event tracing, if enabled.  */
    TX_TRACE_INITIALIZE
 8010d2c:	f002 fc98 	bl	8013660 <_tx_trace_initialize>

    /* Initialize the event log, if enabled.  */
    TX_EL_INITIALIZE

    /* Call the thread control initialization function.  */
    _tx_thread_initialize();
 8010d30:	f001 f9fe 	bl	8012130 <_tx_thread_initialize>

#ifndef TX_NO_TIMER

    /* Call the timer control initialization function.  */
    _tx_timer_initialize();
 8010d34:	f002 fa80 	bl	8013238 <_tx_timer_initialize>
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Call the semaphore initialization function.  */
    _tx_semaphore_initialize();
 8010d38:	4b12      	ldr	r3, [pc, #72]	; (8010d84 <_tx_initialize_high_level+0x5c>)
 8010d3a:	2200      	movs	r2, #0
 8010d3c:	601a      	str	r2, [r3, #0]
 8010d3e:	4b12      	ldr	r3, [pc, #72]	; (8010d88 <_tx_initialize_high_level+0x60>)
 8010d40:	2200      	movs	r2, #0
 8010d42:	601a      	str	r2, [r3, #0]

    /* Call the queue initialization function.  */
    _tx_queue_initialize();
 8010d44:	4b11      	ldr	r3, [pc, #68]	; (8010d8c <_tx_initialize_high_level+0x64>)
 8010d46:	2200      	movs	r2, #0
 8010d48:	601a      	str	r2, [r3, #0]
 8010d4a:	4b11      	ldr	r3, [pc, #68]	; (8010d90 <_tx_initialize_high_level+0x68>)
 8010d4c:	2200      	movs	r2, #0
 8010d4e:	601a      	str	r2, [r3, #0]

    /* Call the event flag initialization function.  */
    _tx_event_flags_initialize();
 8010d50:	4b10      	ldr	r3, [pc, #64]	; (8010d94 <_tx_initialize_high_level+0x6c>)
 8010d52:	2200      	movs	r2, #0
 8010d54:	601a      	str	r2, [r3, #0]
 8010d56:	4b10      	ldr	r3, [pc, #64]	; (8010d98 <_tx_initialize_high_level+0x70>)
 8010d58:	2200      	movs	r2, #0
 8010d5a:	601a      	str	r2, [r3, #0]

    /* Call the block pool initialization function.  */
    _tx_block_pool_initialize();
 8010d5c:	4b0f      	ldr	r3, [pc, #60]	; (8010d9c <_tx_initialize_high_level+0x74>)
 8010d5e:	2200      	movs	r2, #0
 8010d60:	601a      	str	r2, [r3, #0]
 8010d62:	4b0f      	ldr	r3, [pc, #60]	; (8010da0 <_tx_initialize_high_level+0x78>)
 8010d64:	2200      	movs	r2, #0
 8010d66:	601a      	str	r2, [r3, #0]

    /* Call the byte pool initialization function.  */
    _tx_byte_pool_initialize();
 8010d68:	4b0e      	ldr	r3, [pc, #56]	; (8010da4 <_tx_initialize_high_level+0x7c>)
 8010d6a:	2200      	movs	r2, #0
 8010d6c:	601a      	str	r2, [r3, #0]
 8010d6e:	4b0e      	ldr	r3, [pc, #56]	; (8010da8 <_tx_initialize_high_level+0x80>)
 8010d70:	2200      	movs	r2, #0
 8010d72:	601a      	str	r2, [r3, #0]

    /* Call the mutex initialization function.  */
    _tx_mutex_initialize();
 8010d74:	4b0d      	ldr	r3, [pc, #52]	; (8010dac <_tx_initialize_high_level+0x84>)
 8010d76:	2200      	movs	r2, #0
 8010d78:	601a      	str	r2, [r3, #0]
 8010d7a:	4b0d      	ldr	r3, [pc, #52]	; (8010db0 <_tx_initialize_high_level+0x88>)
 8010d7c:	2200      	movs	r2, #0
 8010d7e:	601a      	str	r2, [r3, #0]
#endif
}
 8010d80:	bf00      	nop
 8010d82:	bd80      	pop	{r7, pc}
 8010d84:	200021c0 	.word	0x200021c0
 8010d88:	200021c4 	.word	0x200021c4
 8010d8c:	200021c8 	.word	0x200021c8
 8010d90:	200021cc 	.word	0x200021cc
 8010d94:	200021d0 	.word	0x200021d0
 8010d98:	200021d4 	.word	0x200021d4
 8010d9c:	200021e0 	.word	0x200021e0
 8010da0:	200021e4 	.word	0x200021e4
 8010da4:	200021e8 	.word	0x200021e8
 8010da8:	200021ec 	.word	0x200021ec
 8010dac:	200021d8 	.word	0x200021d8
 8010db0:	200021dc 	.word	0x200021dc

08010db4 <_tx_initialize_kernel_enter>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_initialize_kernel_enter(VOID)
{
 8010db4:	b580      	push	{r7, lr}
 8010db6:	af00      	add	r7, sp, #0

    /* Determine if the compiler has pre-initialized ThreadX.  */
    if (_tx_thread_system_state != TX_INITIALIZE_ALMOST_DONE)
 8010db8:	4b10      	ldr	r3, [pc, #64]	; (8010dfc <_tx_initialize_kernel_enter+0x48>)
 8010dba:	681b      	ldr	r3, [r3, #0]
 8010dbc:	f113 3f0f 	cmn.w	r3, #252645135	; 0xf0f0f0f
 8010dc0:	d00c      	beq.n	8010ddc <_tx_initialize_kernel_enter+0x28>
        /* No, the initialization still needs to take place.  */

        /* Ensure that the system state variable is set to indicate
           initialization is in progress.  Note that this variable is
           later used to represent interrupt nesting.  */
        _tx_thread_system_state =  TX_INITIALIZE_IN_PROGRESS;
 8010dc2:	4b0e      	ldr	r3, [pc, #56]	; (8010dfc <_tx_initialize_kernel_enter+0x48>)
 8010dc4:	f04f 32f0 	mov.w	r2, #4042322160	; 0xf0f0f0f0
 8010dc8:	601a      	str	r2, [r3, #0]
        /* Call any port specific preprocessing.  */
        TX_PORT_SPECIFIC_PRE_INITIALIZATION

        /* Invoke the low-level initialization to handle all processor specific
           initialization issues.  */
        _tx_initialize_low_level();
 8010dca:	f7ef fa53 	bl	8000274 <_tx_initialize_low_level>

        /* Invoke the high-level initialization to exercise all of the
           ThreadX components and the application's initialization
           function.  */
        _tx_initialize_high_level();
 8010dce:	f7ff ffab 	bl	8010d28 <_tx_initialize_high_level>

        /* Call any port specific post-processing.  */
        TX_PORT_SPECIFIC_POST_INITIALIZATION
 8010dd2:	4b0b      	ldr	r3, [pc, #44]	; (8010e00 <_tx_initialize_kernel_enter+0x4c>)
 8010dd4:	681b      	ldr	r3, [r3, #0]
 8010dd6:	3301      	adds	r3, #1
 8010dd8:	4a09      	ldr	r2, [pc, #36]	; (8010e00 <_tx_initialize_kernel_enter+0x4c>)
 8010dda:	6013      	str	r3, [r2, #0]
    TX_INITIALIZE_KERNEL_ENTER_EXTENSION

    /* Ensure that the system state variable is set to indicate
       initialization is in progress.  Note that this variable is
       later used to represent interrupt nesting.  */
    _tx_thread_system_state =  TX_INITIALIZE_IN_PROGRESS;
 8010ddc:	4b07      	ldr	r3, [pc, #28]	; (8010dfc <_tx_initialize_kernel_enter+0x48>)
 8010dde:	f04f 32f0 	mov.w	r2, #4042322160	; 0xf0f0f0f0
 8010de2:	601a      	str	r2, [r3, #0]

    /* Call the application provided initialization function.  Pass the
       first available memory address to it.  */
    tx_application_define(_tx_initialize_unused_memory);
 8010de4:	4b07      	ldr	r3, [pc, #28]	; (8010e04 <_tx_initialize_kernel_enter+0x50>)
 8010de6:	681b      	ldr	r3, [r3, #0]
 8010de8:	4618      	mov	r0, r3
 8010dea:	f7f0 f90f 	bl	800100c <tx_application_define>

    /* Set the system state in preparation for entering the thread
       scheduler.  */
    _tx_thread_system_state =  TX_INITIALIZE_IS_FINISHED;
 8010dee:	4b03      	ldr	r3, [pc, #12]	; (8010dfc <_tx_initialize_kernel_enter+0x48>)
 8010df0:	2200      	movs	r2, #0
 8010df2:	601a      	str	r2, [r3, #0]

    /* Call any port specific pre-scheduler processing.  */
    TX_PORT_SPECIFIC_PRE_SCHEDULER_INITIALIZATION

    /* Enter the scheduling loop to start executing threads!  */
    _tx_thread_schedule();
 8010df4:	f7ef fa7a 	bl	80002ec <_tx_thread_schedule>
#ifdef TX_SAFETY_CRITICAL

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif
}
 8010df8:	bf00      	nop
 8010dfa:	bd80      	pop	{r7, pc}
 8010dfc:	20000010 	.word	0x20000010
 8010e00:	20002290 	.word	0x20002290
 8010e04:	200021f0 	.word	0x200021f0

08010e08 <_tx_mutex_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_mutex_cleanup(TX_THREAD  *thread_ptr, ULONG suspension_sequence)
{
 8010e08:	b580      	push	{r7, lr}
 8010e0a:	b08e      	sub	sp, #56	; 0x38
 8010e0c:	af00      	add	r7, sp, #0
 8010e0e:	6078      	str	r0, [r7, #4]
 8010e10:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8010e12:	f3ef 8310 	mrs	r3, PRIMASK
 8010e16:	623b      	str	r3, [r7, #32]
    return(posture);
 8010e18:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 8010e1a:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 8010e1c:	b672      	cpsid	i
    return(int_posture);
 8010e1e:	69fb      	ldr	r3, [r7, #28]


#ifndef TX_NOT_INTERRUPTABLE

    /* Disable interrupts to remove the suspended thread from the mutex.  */
    TX_DISABLE
 8010e20:	637b      	str	r3, [r7, #52]	; 0x34

    /* Determine if the cleanup is still required.  */
    if (thread_ptr -> tx_thread_suspend_cleanup == &(_tx_mutex_cleanup))
 8010e22:	687b      	ldr	r3, [r7, #4]
 8010e24:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010e26:	4a33      	ldr	r2, [pc, #204]	; (8010ef4 <_tx_mutex_cleanup+0xec>)
 8010e28:	4293      	cmp	r3, r2
 8010e2a:	d158      	bne.n	8010ede <_tx_mutex_cleanup+0xd6>
    {

        /* Check for valid suspension sequence.  */
        if (suspension_sequence == thread_ptr -> tx_thread_suspension_sequence)
 8010e2c:	687b      	ldr	r3, [r7, #4]
 8010e2e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8010e32:	683a      	ldr	r2, [r7, #0]
 8010e34:	429a      	cmp	r2, r3
 8010e36:	d152      	bne.n	8010ede <_tx_mutex_cleanup+0xd6>
        {

            /* Setup pointer to mutex control block.  */
            mutex_ptr =  TX_VOID_TO_MUTEX_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
 8010e38:	687b      	ldr	r3, [r7, #4]
 8010e3a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010e3c:	633b      	str	r3, [r7, #48]	; 0x30

            /* Check for NULL mutex pointer.  */
            if (mutex_ptr != TX_NULL)
 8010e3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e40:	2b00      	cmp	r3, #0
 8010e42:	d04c      	beq.n	8010ede <_tx_mutex_cleanup+0xd6>
            {

                /* Determine if the mutex ID is valid.  */
                if (mutex_ptr -> tx_mutex_id == TX_MUTEX_ID)
 8010e44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e46:	681b      	ldr	r3, [r3, #0]
 8010e48:	4a2b      	ldr	r2, [pc, #172]	; (8010ef8 <_tx_mutex_cleanup+0xf0>)
 8010e4a:	4293      	cmp	r3, r2
 8010e4c:	d147      	bne.n	8010ede <_tx_mutex_cleanup+0xd6>
                {

                    /* Determine if there are any thread suspensions.  */
                    if (mutex_ptr -> tx_mutex_suspended_count != TX_NO_SUSPENSIONS)
 8010e4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e50:	69db      	ldr	r3, [r3, #28]
 8010e52:	2b00      	cmp	r3, #0
 8010e54:	d043      	beq.n	8010ede <_tx_mutex_cleanup+0xd6>
#endif

                        /* Yes, we still have thread suspension!  */

                        /* Clear the suspension cleanup flag.  */
                        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8010e56:	687b      	ldr	r3, [r7, #4]
 8010e58:	2200      	movs	r2, #0
 8010e5a:	669a      	str	r2, [r3, #104]	; 0x68

                        /* Decrement the suspension count.  */
                        mutex_ptr -> tx_mutex_suspended_count--;
 8010e5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e5e:	69db      	ldr	r3, [r3, #28]
 8010e60:	1e5a      	subs	r2, r3, #1
 8010e62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e64:	61da      	str	r2, [r3, #28]

                        /* Pickup the suspended count.  */
                        suspended_count =  mutex_ptr -> tx_mutex_suspended_count;
 8010e66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e68:	69db      	ldr	r3, [r3, #28]
 8010e6a:	62fb      	str	r3, [r7, #44]	; 0x2c

                        /* Remove the suspended thread from the list.  */

                        /* See if this is the only suspended thread on the list.  */
                        if (suspended_count == TX_NO_SUSPENSIONS)
 8010e6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010e6e:	2b00      	cmp	r3, #0
 8010e70:	d103      	bne.n	8010e7a <_tx_mutex_cleanup+0x72>
                        {

                            /* Yes, the only suspended thread.  */

                            /* Update the head pointer.  */
                            mutex_ptr -> tx_mutex_suspension_list =  TX_NULL;
 8010e72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e74:	2200      	movs	r2, #0
 8010e76:	619a      	str	r2, [r3, #24]
 8010e78:	e013      	b.n	8010ea2 <_tx_mutex_cleanup+0x9a>
                        {

                            /* At least one more thread is on the same suspension list.  */

                            /* Update the links of the adjacent threads.  */
                            next_thread =                                   thread_ptr -> tx_thread_suspended_next;
 8010e7a:	687b      	ldr	r3, [r7, #4]
 8010e7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010e7e:	62bb      	str	r3, [r7, #40]	; 0x28
                            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 8010e80:	687b      	ldr	r3, [r7, #4]
 8010e82:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010e84:	627b      	str	r3, [r7, #36]	; 0x24
                            next_thread -> tx_thread_suspended_previous =   previous_thread;
 8010e86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010e8a:	675a      	str	r2, [r3, #116]	; 0x74
                            previous_thread -> tx_thread_suspended_next =   next_thread;
 8010e8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e8e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010e90:	671a      	str	r2, [r3, #112]	; 0x70

                            /* Determine if we need to update the head pointer.  */
                            if (mutex_ptr -> tx_mutex_suspension_list == thread_ptr)
 8010e92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e94:	699b      	ldr	r3, [r3, #24]
 8010e96:	687a      	ldr	r2, [r7, #4]
 8010e98:	429a      	cmp	r2, r3
 8010e9a:	d102      	bne.n	8010ea2 <_tx_mutex_cleanup+0x9a>
                            {

                                /* Update the list head pointer.  */
                                mutex_ptr -> tx_mutex_suspension_list =         next_thread;
 8010e9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e9e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010ea0:	619a      	str	r2, [r3, #24]
                            }
                        }

                        /* Now we need to determine if this cleanup is from a terminate, timeout,
                           or from a wait abort.  */
                        if (thread_ptr -> tx_thread_state == TX_MUTEX_SUSP)
 8010ea2:	687b      	ldr	r3, [r7, #4]
 8010ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010ea6:	2b0d      	cmp	r3, #13
 8010ea8:	d119      	bne.n	8010ede <_tx_mutex_cleanup+0xd6>
                            /* Increment the number of timeouts on this semaphore.  */
                            mutex_ptr -> tx_mutex_performance_timeout_count++;
#endif

                            /* Setup return status.  */
                            thread_ptr -> tx_thread_suspend_status =  TX_NOT_AVAILABLE;
 8010eaa:	687b      	ldr	r3, [r7, #4]
 8010eac:	221d      	movs	r2, #29
 8010eae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                            /* Resume the thread!  */
                            _tx_thread_system_ni_resume(thread_ptr);
#else

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 8010eb2:	4b12      	ldr	r3, [pc, #72]	; (8010efc <_tx_mutex_cleanup+0xf4>)
 8010eb4:	681b      	ldr	r3, [r3, #0]
 8010eb6:	3301      	adds	r3, #1
 8010eb8:	4a10      	ldr	r2, [pc, #64]	; (8010efc <_tx_mutex_cleanup+0xf4>)
 8010eba:	6013      	str	r3, [r2, #0]
 8010ebc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010ebe:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8010ec0:	693b      	ldr	r3, [r7, #16]
 8010ec2:	f383 8810 	msr	PRIMASK, r3
}
 8010ec6:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Resume the thread!  */
                            _tx_thread_system_resume(thread_ptr);
 8010ec8:	6878      	ldr	r0, [r7, #4]
 8010eca:	f001 fccd 	bl	8012868 <_tx_thread_system_resume>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8010ece:	f3ef 8310 	mrs	r3, PRIMASK
 8010ed2:	61bb      	str	r3, [r7, #24]
    return(posture);
 8010ed4:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8010ed6:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8010ed8:	b672      	cpsid	i
    return(int_posture);
 8010eda:	697b      	ldr	r3, [r7, #20]

                            /* Disable interrupts.  */
                            TX_DISABLE
 8010edc:	637b      	str	r3, [r7, #52]	; 0x34
 8010ede:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010ee0:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8010ee2:	68fb      	ldr	r3, [r7, #12]
 8010ee4:	f383 8810 	msr	PRIMASK, r3
}
 8010ee8:	bf00      	nop
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 8010eea:	bf00      	nop
 8010eec:	3738      	adds	r7, #56	; 0x38
 8010eee:	46bd      	mov	sp, r7
 8010ef0:	bd80      	pop	{r7, pc}
 8010ef2:	bf00      	nop
 8010ef4:	08010e09 	.word	0x08010e09
 8010ef8:	4d555445 	.word	0x4d555445
 8010efc:	20002290 	.word	0x20002290

08010f00 <_tx_mutex_thread_release>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_mutex_thread_release(TX_THREAD  *thread_ptr)
{
 8010f00:	b580      	push	{r7, lr}
 8010f02:	b08a      	sub	sp, #40	; 0x28
 8010f04:	af00      	add	r7, sp, #0
 8010f06:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8010f08:	f3ef 8310 	mrs	r3, PRIMASK
 8010f0c:	61fb      	str	r3, [r7, #28]
    return(posture);
 8010f0e:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 8010f10:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 8010f12:	b672      	cpsid	i
    return(int_posture);
 8010f14:	69bb      	ldr	r3, [r7, #24]
UINT        status;
#endif


    /* Disable interrupts.  */
    TX_DISABLE
 8010f16:	627b      	str	r3, [r7, #36]	; 0x24

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 8010f18:	4b1a      	ldr	r3, [pc, #104]	; (8010f84 <_tx_mutex_thread_release+0x84>)
 8010f1a:	681b      	ldr	r3, [r3, #0]
 8010f1c:	3301      	adds	r3, #1
 8010f1e:	4a19      	ldr	r2, [pc, #100]	; (8010f84 <_tx_mutex_thread_release+0x84>)
 8010f20:	6013      	str	r3, [r2, #0]
    /* Loop to look at all the mutexes.  */
    do
    {

        /* Pickup the mutex head pointer.  */
        mutex_ptr =  thread_ptr -> tx_thread_owned_mutex_list;
 8010f22:	687b      	ldr	r3, [r7, #4]
 8010f24:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8010f28:	623b      	str	r3, [r7, #32]

        /* Determine if there is a mutex.  */
        if (mutex_ptr != TX_NULL)
 8010f2a:	6a3b      	ldr	r3, [r7, #32]
 8010f2c:	2b00      	cmp	r3, #0
 8010f2e:	d017      	beq.n	8010f60 <_tx_mutex_thread_release+0x60>
        {

            /* Yes, set the ownership count to 1.  */
            mutex_ptr -> tx_mutex_ownership_count =  ((UINT) 1);
 8010f30:	6a3b      	ldr	r3, [r7, #32]
 8010f32:	2201      	movs	r2, #1
 8010f34:	609a      	str	r2, [r3, #8]
 8010f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f38:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8010f3a:	68fb      	ldr	r3, [r7, #12]
 8010f3c:	f383 8810 	msr	PRIMASK, r3
}
 8010f40:	bf00      	nop
            do
            {
                status =  _tx_mutex_put(mutex_ptr);
            } while (status != TX_SUCCESS);
#else
            _tx_mutex_put(mutex_ptr);
 8010f42:	6a38      	ldr	r0, [r7, #32]
 8010f44:	f000 fc8e 	bl	8011864 <_tx_mutex_put>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8010f48:	f3ef 8310 	mrs	r3, PRIMASK
 8010f4c:	617b      	str	r3, [r7, #20]
    return(posture);
 8010f4e:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 8010f50:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 8010f52:	b672      	cpsid	i
    return(int_posture);
 8010f54:	693b      	ldr	r3, [r7, #16]
#endif

            /* Disable interrupts.  */
            TX_DISABLE
 8010f56:	627b      	str	r3, [r7, #36]	; 0x24

            /* Move to the next mutex.  */
            mutex_ptr =  thread_ptr -> tx_thread_owned_mutex_list;
 8010f58:	687b      	ldr	r3, [r7, #4]
 8010f5a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8010f5e:	623b      	str	r3, [r7, #32]
        }
    } while (mutex_ptr != TX_NULL);
 8010f60:	6a3b      	ldr	r3, [r7, #32]
 8010f62:	2b00      	cmp	r3, #0
 8010f64:	d1dd      	bne.n	8010f22 <_tx_mutex_thread_release+0x22>

    /* Restore preemption.  */
    _tx_thread_preempt_disable--;
 8010f66:	4b07      	ldr	r3, [pc, #28]	; (8010f84 <_tx_mutex_thread_release+0x84>)
 8010f68:	681b      	ldr	r3, [r3, #0]
 8010f6a:	3b01      	subs	r3, #1
 8010f6c:	4a05      	ldr	r2, [pc, #20]	; (8010f84 <_tx_mutex_thread_release+0x84>)
 8010f6e:	6013      	str	r3, [r2, #0]
 8010f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f72:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8010f74:	68bb      	ldr	r3, [r7, #8]
 8010f76:	f383 8810 	msr	PRIMASK, r3
}
 8010f7a:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE
}
 8010f7c:	bf00      	nop
 8010f7e:	3728      	adds	r7, #40	; 0x28
 8010f80:	46bd      	mov	sp, r7
 8010f82:	bd80      	pop	{r7, pc}
 8010f84:	20002290 	.word	0x20002290

08010f88 <_tx_mutex_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_mutex_create(TX_MUTEX *mutex_ptr, CHAR *name_ptr, UINT inherit)
{
 8010f88:	b580      	push	{r7, lr}
 8010f8a:	b092      	sub	sp, #72	; 0x48
 8010f8c:	af02      	add	r7, sp, #8
 8010f8e:	60f8      	str	r0, [r7, #12]
 8010f90:	60b9      	str	r1, [r7, #8]
 8010f92:	607a      	str	r2, [r7, #4]
TX_MUTEX        *next_mutex;
TX_MUTEX        *previous_mutex;


    /* Initialize mutex control block to all zeros.  */
    TX_MEMSET(mutex_ptr, 0, (sizeof(TX_MUTEX)));
 8010f94:	2234      	movs	r2, #52	; 0x34
 8010f96:	2100      	movs	r1, #0
 8010f98:	68f8      	ldr	r0, [r7, #12]
 8010f9a:	f003 f811 	bl	8013fc0 <memset>

    /* Setup the basic mutex fields.  */
    mutex_ptr -> tx_mutex_name =             name_ptr;
 8010f9e:	68fb      	ldr	r3, [r7, #12]
 8010fa0:	68ba      	ldr	r2, [r7, #8]
 8010fa2:	605a      	str	r2, [r3, #4]
    mutex_ptr -> tx_mutex_inherit =          inherit;
 8010fa4:	68fb      	ldr	r3, [r7, #12]
 8010fa6:	687a      	ldr	r2, [r7, #4]
 8010fa8:	611a      	str	r2, [r3, #16]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8010faa:	f3ef 8310 	mrs	r3, PRIMASK
 8010fae:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 8010fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    int_posture = __get_interrupt_posture();
 8010fb2:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSID i" : : : "memory");
 8010fb4:	b672      	cpsid	i
    return(int_posture);
 8010fb6:	6a3b      	ldr	r3, [r7, #32]

    /* Disable interrupts to place the mutex on the created list.  */
    TX_DISABLE
 8010fb8:	637b      	str	r3, [r7, #52]	; 0x34

    /* Setup the mutex ID to make it valid.  */
    mutex_ptr -> tx_mutex_id =  TX_MUTEX_ID;
 8010fba:	68fb      	ldr	r3, [r7, #12]
 8010fbc:	4a57      	ldr	r2, [pc, #348]	; (801111c <_tx_mutex_create+0x194>)
 8010fbe:	601a      	str	r2, [r3, #0]

    /* Setup the thread mutex release function pointer.  */
    _tx_thread_mutex_release =  &(_tx_mutex_thread_release);
 8010fc0:	4b57      	ldr	r3, [pc, #348]	; (8011120 <_tx_mutex_create+0x198>)
 8010fc2:	4a58      	ldr	r2, [pc, #352]	; (8011124 <_tx_mutex_create+0x19c>)
 8010fc4:	601a      	str	r2, [r3, #0]

    /* Place the mutex on the list of created mutexes.  First,
       check for an empty list.  */
    if (_tx_mutex_created_count == TX_EMPTY)
 8010fc6:	4b58      	ldr	r3, [pc, #352]	; (8011128 <_tx_mutex_create+0x1a0>)
 8010fc8:	681b      	ldr	r3, [r3, #0]
 8010fca:	2b00      	cmp	r3, #0
 8010fcc:	d109      	bne.n	8010fe2 <_tx_mutex_create+0x5a>
    {

        /* The created mutex list is empty.  Add mutex to empty list.  */
        _tx_mutex_created_ptr =                   mutex_ptr;
 8010fce:	4a57      	ldr	r2, [pc, #348]	; (801112c <_tx_mutex_create+0x1a4>)
 8010fd0:	68fb      	ldr	r3, [r7, #12]
 8010fd2:	6013      	str	r3, [r2, #0]
        mutex_ptr -> tx_mutex_created_next =      mutex_ptr;
 8010fd4:	68fb      	ldr	r3, [r7, #12]
 8010fd6:	68fa      	ldr	r2, [r7, #12]
 8010fd8:	621a      	str	r2, [r3, #32]
        mutex_ptr -> tx_mutex_created_previous =  mutex_ptr;
 8010fda:	68fb      	ldr	r3, [r7, #12]
 8010fdc:	68fa      	ldr	r2, [r7, #12]
 8010fde:	625a      	str	r2, [r3, #36]	; 0x24
 8010fe0:	e011      	b.n	8011006 <_tx_mutex_create+0x7e>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_mutex =      _tx_mutex_created_ptr;
 8010fe2:	4b52      	ldr	r3, [pc, #328]	; (801112c <_tx_mutex_create+0x1a4>)
 8010fe4:	681b      	ldr	r3, [r3, #0]
 8010fe6:	617b      	str	r3, [r7, #20]
        previous_mutex =  next_mutex -> tx_mutex_created_previous;
 8010fe8:	697b      	ldr	r3, [r7, #20]
 8010fea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010fec:	633b      	str	r3, [r7, #48]	; 0x30

        /* Place the new mutex in the list.  */
        next_mutex -> tx_mutex_created_previous =  mutex_ptr;
 8010fee:	697b      	ldr	r3, [r7, #20]
 8010ff0:	68fa      	ldr	r2, [r7, #12]
 8010ff2:	625a      	str	r2, [r3, #36]	; 0x24
        previous_mutex -> tx_mutex_created_next =  mutex_ptr;
 8010ff4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ff6:	68fa      	ldr	r2, [r7, #12]
 8010ff8:	621a      	str	r2, [r3, #32]

        /* Setup this mutex's next and previous created links.  */
        mutex_ptr -> tx_mutex_created_previous =  previous_mutex;
 8010ffa:	68fb      	ldr	r3, [r7, #12]
 8010ffc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010ffe:	625a      	str	r2, [r3, #36]	; 0x24
        mutex_ptr -> tx_mutex_created_next =      next_mutex;
 8011000:	697a      	ldr	r2, [r7, #20]
 8011002:	68fb      	ldr	r3, [r7, #12]
 8011004:	621a      	str	r2, [r3, #32]
    }

    /* Increment the ownership count.  */
    _tx_mutex_created_count++;
 8011006:	4b48      	ldr	r3, [pc, #288]	; (8011128 <_tx_mutex_create+0x1a0>)
 8011008:	681b      	ldr	r3, [r3, #0]
 801100a:	3301      	adds	r3, #1
 801100c:	4a46      	ldr	r2, [pc, #280]	; (8011128 <_tx_mutex_create+0x1a0>)
 801100e:	6013      	str	r3, [r2, #0]

    /* Optional mutex create extended processing.  */
    TX_MUTEX_CREATE_EXTENSION(mutex_ptr)

    /* If trace is enabled, register this object.  */
    TX_TRACE_OBJECT_REGISTER(TX_TRACE_OBJECT_TYPE_MUTEX, mutex_ptr, name_ptr, inherit, 0)
 8011010:	2300      	movs	r3, #0
 8011012:	9300      	str	r3, [sp, #0]
 8011014:	687b      	ldr	r3, [r7, #4]
 8011016:	68ba      	ldr	r2, [r7, #8]
 8011018:	68f9      	ldr	r1, [r7, #12]
 801101a:	2005      	movs	r0, #5
 801101c:	f002 fb46 	bl	80136ac <_tx_trace_object_register>

    /* If trace is enabled, insert this event into the trace buffer.  */
    TX_TRACE_IN_LINE_INSERT(TX_TRACE_MUTEX_CREATE, mutex_ptr, inherit, TX_POINTER_TO_ULONG_CONVERT(&next_mutex), 0, TX_TRACE_MUTEX_EVENTS)
 8011020:	4b43      	ldr	r3, [pc, #268]	; (8011130 <_tx_mutex_create+0x1a8>)
 8011022:	681b      	ldr	r3, [r3, #0]
 8011024:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011026:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011028:	2b00      	cmp	r3, #0
 801102a:	d06c      	beq.n	8011106 <_tx_mutex_create+0x17e>
 801102c:	4b41      	ldr	r3, [pc, #260]	; (8011134 <_tx_mutex_create+0x1ac>)
 801102e:	681b      	ldr	r3, [r3, #0]
 8011030:	f003 0320 	and.w	r3, r3, #32
 8011034:	2b00      	cmp	r3, #0
 8011036:	d066      	beq.n	8011106 <_tx_mutex_create+0x17e>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8011038:	f3ef 8305 	mrs	r3, IPSR
 801103c:	61fb      	str	r3, [r7, #28]
    return(ipsr_value);
 801103e:	69fa      	ldr	r2, [r7, #28]
 8011040:	4b3d      	ldr	r3, [pc, #244]	; (8011138 <_tx_mutex_create+0x1b0>)
 8011042:	681b      	ldr	r3, [r3, #0]
 8011044:	4313      	orrs	r3, r2
 8011046:	62bb      	str	r3, [r7, #40]	; 0x28
 8011048:	4b3c      	ldr	r3, [pc, #240]	; (801113c <_tx_mutex_create+0x1b4>)
 801104a:	681b      	ldr	r3, [r3, #0]
 801104c:	63bb      	str	r3, [r7, #56]	; 0x38
 801104e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011050:	2b00      	cmp	r3, #0
 8011052:	d10b      	bne.n	801106c <_tx_mutex_create+0xe4>
 8011054:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011056:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011058:	63fb      	str	r3, [r7, #60]	; 0x3c
 801105a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801105c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801105e:	041a      	lsls	r2, r3, #16
 8011060:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011062:	4313      	orrs	r3, r2
 8011064:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8011068:	63fb      	str	r3, [r7, #60]	; 0x3c
 801106a:	e00e      	b.n	801108a <_tx_mutex_create+0x102>
 801106c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801106e:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 8011072:	d205      	bcs.n	8011080 <_tx_mutex_create+0xf8>
 8011074:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011076:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011078:	f04f 33ff 	mov.w	r3, #4294967295
 801107c:	63bb      	str	r3, [r7, #56]	; 0x38
 801107e:	e004      	b.n	801108a <_tx_mutex_create+0x102>
 8011080:	f04f 33f0 	mov.w	r3, #4042322160	; 0xf0f0f0f0
 8011084:	63bb      	str	r3, [r7, #56]	; 0x38
 8011086:	2300      	movs	r3, #0
 8011088:	63fb      	str	r3, [r7, #60]	; 0x3c
 801108a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801108c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801108e:	601a      	str	r2, [r3, #0]
 8011090:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011092:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8011094:	605a      	str	r2, [r3, #4]
 8011096:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011098:	2232      	movs	r2, #50	; 0x32
 801109a:	609a      	str	r2, [r3, #8]
 801109c:	4b28      	ldr	r3, [pc, #160]	; (8011140 <_tx_mutex_create+0x1b8>)
 801109e:	681a      	ldr	r2, [r3, #0]
 80110a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80110a2:	60da      	str	r2, [r3, #12]
 80110a4:	68fa      	ldr	r2, [r7, #12]
 80110a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80110a8:	611a      	str	r2, [r3, #16]
 80110aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80110ac:	687a      	ldr	r2, [r7, #4]
 80110ae:	615a      	str	r2, [r3, #20]
 80110b0:	f107 0214 	add.w	r2, r7, #20
 80110b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80110b6:	619a      	str	r2, [r3, #24]
 80110b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80110ba:	2200      	movs	r2, #0
 80110bc:	61da      	str	r2, [r3, #28]
 80110be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80110c0:	3320      	adds	r3, #32
 80110c2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80110c4:	4b1f      	ldr	r3, [pc, #124]	; (8011144 <_tx_mutex_create+0x1bc>)
 80110c6:	681b      	ldr	r3, [r3, #0]
 80110c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80110ca:	429a      	cmp	r2, r3
 80110cc:	d314      	bcc.n	80110f8 <_tx_mutex_create+0x170>
 80110ce:	4b1e      	ldr	r3, [pc, #120]	; (8011148 <_tx_mutex_create+0x1c0>)
 80110d0:	681b      	ldr	r3, [r3, #0]
 80110d2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80110d4:	4a16      	ldr	r2, [pc, #88]	; (8011130 <_tx_mutex_create+0x1a8>)
 80110d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80110d8:	6013      	str	r3, [r2, #0]
 80110da:	4b1c      	ldr	r3, [pc, #112]	; (801114c <_tx_mutex_create+0x1c4>)
 80110dc:	681b      	ldr	r3, [r3, #0]
 80110de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80110e0:	621a      	str	r2, [r3, #32]
 80110e2:	4b1b      	ldr	r3, [pc, #108]	; (8011150 <_tx_mutex_create+0x1c8>)
 80110e4:	681b      	ldr	r3, [r3, #0]
 80110e6:	2b00      	cmp	r3, #0
 80110e8:	d00d      	beq.n	8011106 <_tx_mutex_create+0x17e>
 80110ea:	4b19      	ldr	r3, [pc, #100]	; (8011150 <_tx_mutex_create+0x1c8>)
 80110ec:	681b      	ldr	r3, [r3, #0]
 80110ee:	4a17      	ldr	r2, [pc, #92]	; (801114c <_tx_mutex_create+0x1c4>)
 80110f0:	6812      	ldr	r2, [r2, #0]
 80110f2:	4610      	mov	r0, r2
 80110f4:	4798      	blx	r3
 80110f6:	e006      	b.n	8011106 <_tx_mutex_create+0x17e>
 80110f8:	4a0d      	ldr	r2, [pc, #52]	; (8011130 <_tx_mutex_create+0x1a8>)
 80110fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80110fc:	6013      	str	r3, [r2, #0]
 80110fe:	4b13      	ldr	r3, [pc, #76]	; (801114c <_tx_mutex_create+0x1c4>)
 8011100:	681b      	ldr	r3, [r3, #0]
 8011102:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011104:	621a      	str	r2, [r3, #32]
 8011106:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011108:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801110a:	69bb      	ldr	r3, [r7, #24]
 801110c:	f383 8810 	msr	PRIMASK, r3
}
 8011110:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 8011112:	2300      	movs	r3, #0
}
 8011114:	4618      	mov	r0, r3
 8011116:	3740      	adds	r7, #64	; 0x40
 8011118:	46bd      	mov	sp, r7
 801111a:	bd80      	pop	{r7, pc}
 801111c:	4d555445 	.word	0x4d555445
 8011120:	20002294 	.word	0x20002294
 8011124:	08010f01 	.word	0x08010f01
 8011128:	200021dc 	.word	0x200021dc
 801112c:	200021d8 	.word	0x200021d8
 8011130:	20002814 	.word	0x20002814
 8011134:	20002818 	.word	0x20002818
 8011138:	20000010 	.word	0x20000010
 801113c:	200021f8 	.word	0x200021f8
 8011140:	e0001004 	.word	0xe0001004
 8011144:	20002810 	.word	0x20002810
 8011148:	2000280c 	.word	0x2000280c
 801114c:	20002800 	.word	0x20002800
 8011150:	2000281c 	.word	0x2000281c

08011154 <_tx_mutex_get>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_mutex_get(TX_MUTEX *mutex_ptr, ULONG wait_option)
{
 8011154:	b580      	push	{r7, lr}
 8011156:	b096      	sub	sp, #88	; 0x58
 8011158:	af00      	add	r7, sp, #0
 801115a:	6078      	str	r0, [r7, #4]
 801115c:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801115e:	f3ef 8310 	mrs	r3, PRIMASK
 8011162:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 8011164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    int_posture = __get_interrupt_posture();
 8011166:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSID i" : : : "memory");
 8011168:	b672      	cpsid	i
    return(int_posture);
 801116a:	6a3b      	ldr	r3, [r7, #32]
TX_THREAD       *previous_thread;
UINT            status;


    /* Disable interrupts to get an instance from the mutex.  */
    TX_DISABLE
 801116c:	64bb      	str	r3, [r7, #72]	; 0x48
    /* Increment the number of attempts to get this mutex.  */
    mutex_ptr -> tx_mutex_performance_get_count++;
#endif

    /* If trace is enabled, insert this event into the trace buffer.  */
    TX_TRACE_IN_LINE_INSERT(TX_TRACE_MUTEX_GET, mutex_ptr, wait_option, TX_POINTER_TO_ULONG_CONVERT(mutex_ptr -> tx_mutex_owner), mutex_ptr -> tx_mutex_ownership_count, TX_TRACE_MUTEX_EVENTS)
 801116e:	4b81      	ldr	r3, [pc, #516]	; (8011374 <_tx_mutex_get+0x220>)
 8011170:	681b      	ldr	r3, [r3, #0]
 8011172:	647b      	str	r3, [r7, #68]	; 0x44
 8011174:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011176:	2b00      	cmp	r3, #0
 8011178:	d06e      	beq.n	8011258 <_tx_mutex_get+0x104>
 801117a:	4b7f      	ldr	r3, [pc, #508]	; (8011378 <_tx_mutex_get+0x224>)
 801117c:	681b      	ldr	r3, [r3, #0]
 801117e:	f003 0320 	and.w	r3, r3, #32
 8011182:	2b00      	cmp	r3, #0
 8011184:	d068      	beq.n	8011258 <_tx_mutex_get+0x104>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8011186:	f3ef 8305 	mrs	r3, IPSR
 801118a:	61fb      	str	r3, [r7, #28]
    return(ipsr_value);
 801118c:	69fa      	ldr	r2, [r7, #28]
 801118e:	4b7b      	ldr	r3, [pc, #492]	; (801137c <_tx_mutex_get+0x228>)
 8011190:	681b      	ldr	r3, [r3, #0]
 8011192:	4313      	orrs	r3, r2
 8011194:	643b      	str	r3, [r7, #64]	; 0x40
 8011196:	4b7a      	ldr	r3, [pc, #488]	; (8011380 <_tx_mutex_get+0x22c>)
 8011198:	681b      	ldr	r3, [r3, #0]
 801119a:	64fb      	str	r3, [r7, #76]	; 0x4c
 801119c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801119e:	2b00      	cmp	r3, #0
 80111a0:	d10b      	bne.n	80111ba <_tx_mutex_get+0x66>
 80111a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80111a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80111a6:	653b      	str	r3, [r7, #80]	; 0x50
 80111a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80111aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80111ac:	041a      	lsls	r2, r3, #16
 80111ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80111b0:	4313      	orrs	r3, r2
 80111b2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80111b6:	653b      	str	r3, [r7, #80]	; 0x50
 80111b8:	e00e      	b.n	80111d8 <_tx_mutex_get+0x84>
 80111ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80111bc:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 80111c0:	d205      	bcs.n	80111ce <_tx_mutex_get+0x7a>
 80111c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80111c4:	653b      	str	r3, [r7, #80]	; 0x50
 80111c6:	f04f 33ff 	mov.w	r3, #4294967295
 80111ca:	64fb      	str	r3, [r7, #76]	; 0x4c
 80111cc:	e004      	b.n	80111d8 <_tx_mutex_get+0x84>
 80111ce:	f04f 33f0 	mov.w	r3, #4042322160	; 0xf0f0f0f0
 80111d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80111d4:	2300      	movs	r3, #0
 80111d6:	653b      	str	r3, [r7, #80]	; 0x50
 80111d8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80111da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80111dc:	601a      	str	r2, [r3, #0]
 80111de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80111e0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80111e2:	605a      	str	r2, [r3, #4]
 80111e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80111e6:	2234      	movs	r2, #52	; 0x34
 80111e8:	609a      	str	r2, [r3, #8]
 80111ea:	4b66      	ldr	r3, [pc, #408]	; (8011384 <_tx_mutex_get+0x230>)
 80111ec:	681a      	ldr	r2, [r3, #0]
 80111ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80111f0:	60da      	str	r2, [r3, #12]
 80111f2:	687a      	ldr	r2, [r7, #4]
 80111f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80111f6:	611a      	str	r2, [r3, #16]
 80111f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80111fa:	683a      	ldr	r2, [r7, #0]
 80111fc:	615a      	str	r2, [r3, #20]
 80111fe:	687b      	ldr	r3, [r7, #4]
 8011200:	68db      	ldr	r3, [r3, #12]
 8011202:	461a      	mov	r2, r3
 8011204:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011206:	619a      	str	r2, [r3, #24]
 8011208:	687b      	ldr	r3, [r7, #4]
 801120a:	689a      	ldr	r2, [r3, #8]
 801120c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801120e:	61da      	str	r2, [r3, #28]
 8011210:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011212:	3320      	adds	r3, #32
 8011214:	647b      	str	r3, [r7, #68]	; 0x44
 8011216:	4b5c      	ldr	r3, [pc, #368]	; (8011388 <_tx_mutex_get+0x234>)
 8011218:	681b      	ldr	r3, [r3, #0]
 801121a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801121c:	429a      	cmp	r2, r3
 801121e:	d314      	bcc.n	801124a <_tx_mutex_get+0xf6>
 8011220:	4b5a      	ldr	r3, [pc, #360]	; (801138c <_tx_mutex_get+0x238>)
 8011222:	681b      	ldr	r3, [r3, #0]
 8011224:	647b      	str	r3, [r7, #68]	; 0x44
 8011226:	4a53      	ldr	r2, [pc, #332]	; (8011374 <_tx_mutex_get+0x220>)
 8011228:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801122a:	6013      	str	r3, [r2, #0]
 801122c:	4b58      	ldr	r3, [pc, #352]	; (8011390 <_tx_mutex_get+0x23c>)
 801122e:	681b      	ldr	r3, [r3, #0]
 8011230:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8011232:	621a      	str	r2, [r3, #32]
 8011234:	4b57      	ldr	r3, [pc, #348]	; (8011394 <_tx_mutex_get+0x240>)
 8011236:	681b      	ldr	r3, [r3, #0]
 8011238:	2b00      	cmp	r3, #0
 801123a:	d00d      	beq.n	8011258 <_tx_mutex_get+0x104>
 801123c:	4b55      	ldr	r3, [pc, #340]	; (8011394 <_tx_mutex_get+0x240>)
 801123e:	681b      	ldr	r3, [r3, #0]
 8011240:	4a53      	ldr	r2, [pc, #332]	; (8011390 <_tx_mutex_get+0x23c>)
 8011242:	6812      	ldr	r2, [r2, #0]
 8011244:	4610      	mov	r0, r2
 8011246:	4798      	blx	r3
 8011248:	e006      	b.n	8011258 <_tx_mutex_get+0x104>
 801124a:	4a4a      	ldr	r2, [pc, #296]	; (8011374 <_tx_mutex_get+0x220>)
 801124c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801124e:	6013      	str	r3, [r2, #0]
 8011250:	4b4f      	ldr	r3, [pc, #316]	; (8011390 <_tx_mutex_get+0x23c>)
 8011252:	681b      	ldr	r3, [r3, #0]
 8011254:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8011256:	621a      	str	r2, [r3, #32]

    /* Log this kernel call.  */
    TX_EL_MUTEX_GET_INSERT

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 8011258:	4b49      	ldr	r3, [pc, #292]	; (8011380 <_tx_mutex_get+0x22c>)
 801125a:	681b      	ldr	r3, [r3, #0]
 801125c:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Determine if this mutex is available.  */
    if (mutex_ptr -> tx_mutex_ownership_count == ((UINT) 0))
 801125e:	687b      	ldr	r3, [r7, #4]
 8011260:	689b      	ldr	r3, [r3, #8]
 8011262:	2b00      	cmp	r3, #0
 8011264:	d144      	bne.n	80112f0 <_tx_mutex_get+0x19c>
    {

        /* Set the ownership count to 1.  */
        mutex_ptr -> tx_mutex_ownership_count =  ((UINT) 1);
 8011266:	687b      	ldr	r3, [r7, #4]
 8011268:	2201      	movs	r2, #1
 801126a:	609a      	str	r2, [r3, #8]

        /* Remember that the calling thread owns the mutex.  */
        mutex_ptr -> tx_mutex_owner =  thread_ptr;
 801126c:	687b      	ldr	r3, [r7, #4]
 801126e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8011270:	60da      	str	r2, [r3, #12]

        /* Determine if the thread pointer is valid.  */
        if (thread_ptr != TX_NULL)
 8011272:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011274:	2b00      	cmp	r3, #0
 8011276:	d032      	beq.n	80112de <_tx_mutex_get+0x18a>
        {

            /* Determine if priority inheritance is required.  */
            if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 8011278:	687b      	ldr	r3, [r7, #4]
 801127a:	691b      	ldr	r3, [r3, #16]
 801127c:	2b01      	cmp	r3, #1
 801127e:	d106      	bne.n	801128e <_tx_mutex_get+0x13a>
            {

                /* Remember the current priority of thread.  */
                mutex_ptr -> tx_mutex_original_priority =   thread_ptr -> tx_thread_priority;
 8011280:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011282:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011284:	687b      	ldr	r3, [r7, #4]
 8011286:	615a      	str	r2, [r3, #20]

                /* Setup the highest priority waiting thread.  */
                mutex_ptr -> tx_mutex_highest_priority_waiting =  ((UINT) TX_MAX_PRIORITIES);
 8011288:	687b      	ldr	r3, [r7, #4]
 801128a:	2220      	movs	r2, #32
 801128c:	629a      	str	r2, [r3, #40]	; 0x28
            }

            /* Pickup next mutex pointer, which is the head of the list.  */
            next_mutex =  thread_ptr -> tx_thread_owned_mutex_list;
 801128e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011290:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8011294:	62fb      	str	r3, [r7, #44]	; 0x2c

            /* Determine if this thread owns any other mutexes that have priority inheritance.  */
            if (next_mutex != TX_NULL)
 8011296:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011298:	2b00      	cmp	r3, #0
 801129a:	d00f      	beq.n	80112bc <_tx_mutex_get+0x168>
            {

                /* Non-empty list. Link up the mutex.  */

                /* Pickup the next and previous mutex pointer.  */
                previous_mutex =  next_mutex -> tx_mutex_owned_previous;
 801129c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801129e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80112a0:	62bb      	str	r3, [r7, #40]	; 0x28

                /* Place the owned mutex in the list.  */
                next_mutex -> tx_mutex_owned_previous =  mutex_ptr;
 80112a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80112a4:	687a      	ldr	r2, [r7, #4]
 80112a6:	631a      	str	r2, [r3, #48]	; 0x30
                previous_mutex -> tx_mutex_owned_next =  mutex_ptr;
 80112a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80112aa:	687a      	ldr	r2, [r7, #4]
 80112ac:	62da      	str	r2, [r3, #44]	; 0x2c

                /* Setup this mutex's next and previous created links.  */
                mutex_ptr -> tx_mutex_owned_previous =  previous_mutex;
 80112ae:	687b      	ldr	r3, [r7, #4]
 80112b0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80112b2:	631a      	str	r2, [r3, #48]	; 0x30
                mutex_ptr -> tx_mutex_owned_next =      next_mutex;
 80112b4:	687b      	ldr	r3, [r7, #4]
 80112b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80112b8:	62da      	str	r2, [r3, #44]	; 0x2c
 80112ba:	e009      	b.n	80112d0 <_tx_mutex_get+0x17c>
            }
            else
            {

                /* The owned mutex list is empty.  Add mutex to empty list.  */
                thread_ptr -> tx_thread_owned_mutex_list =     mutex_ptr;
 80112bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80112be:	687a      	ldr	r2, [r7, #4]
 80112c0:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
                mutex_ptr -> tx_mutex_owned_next =             mutex_ptr;
 80112c4:	687b      	ldr	r3, [r7, #4]
 80112c6:	687a      	ldr	r2, [r7, #4]
 80112c8:	62da      	str	r2, [r3, #44]	; 0x2c
                mutex_ptr -> tx_mutex_owned_previous =         mutex_ptr;
 80112ca:	687b      	ldr	r3, [r7, #4]
 80112cc:	687a      	ldr	r2, [r7, #4]
 80112ce:	631a      	str	r2, [r3, #48]	; 0x30
            }

            /* Increment the number of mutexes owned counter.  */
            thread_ptr -> tx_thread_owned_mutex_count++;
 80112d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80112d2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80112d6:	1c5a      	adds	r2, r3, #1
 80112d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80112da:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
 80112de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80112e0:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80112e2:	69bb      	ldr	r3, [r7, #24]
 80112e4:	f383 8810 	msr	PRIMASK, r3
}
 80112e8:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Return success.  */
        status =  TX_SUCCESS;
 80112ea:	2300      	movs	r3, #0
 80112ec:	657b      	str	r3, [r7, #84]	; 0x54
 80112ee:	e0b8      	b.n	8011462 <_tx_mutex_get+0x30e>
    }

    /* Otherwise, see if the owning thread is trying to obtain the same mutex.  */
    else if (mutex_ptr -> tx_mutex_owner == thread_ptr)
 80112f0:	687b      	ldr	r3, [r7, #4]
 80112f2:	68db      	ldr	r3, [r3, #12]
 80112f4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80112f6:	429a      	cmp	r2, r3
 80112f8:	d10d      	bne.n	8011316 <_tx_mutex_get+0x1c2>
    {

        /* The owning thread is requesting the mutex again, just
           increment the ownership count.  */
        mutex_ptr -> tx_mutex_ownership_count++;
 80112fa:	687b      	ldr	r3, [r7, #4]
 80112fc:	689b      	ldr	r3, [r3, #8]
 80112fe:	1c5a      	adds	r2, r3, #1
 8011300:	687b      	ldr	r3, [r7, #4]
 8011302:	609a      	str	r2, [r3, #8]
 8011304:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011306:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8011308:	697b      	ldr	r3, [r7, #20]
 801130a:	f383 8810 	msr	PRIMASK, r3
}
 801130e:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Return success.  */
        status =  TX_SUCCESS;
 8011310:	2300      	movs	r3, #0
 8011312:	657b      	str	r3, [r7, #84]	; 0x54
 8011314:	e0a5      	b.n	8011462 <_tx_mutex_get+0x30e>
    }
    else
    {

        /* Determine if the request specifies suspension.  */
        if (wait_option != TX_NO_WAIT)
 8011316:	683b      	ldr	r3, [r7, #0]
 8011318:	2b00      	cmp	r3, #0
 801131a:	f000 809a 	beq.w	8011452 <_tx_mutex_get+0x2fe>
        {

            /* Determine if the preempt disable flag is non-zero.  */
            if (_tx_thread_preempt_disable != ((UINT) 0))
 801131e:	4b1e      	ldr	r3, [pc, #120]	; (8011398 <_tx_mutex_get+0x244>)
 8011320:	681b      	ldr	r3, [r3, #0]
 8011322:	2b00      	cmp	r3, #0
 8011324:	d008      	beq.n	8011338 <_tx_mutex_get+0x1e4>
 8011326:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011328:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801132a:	693b      	ldr	r3, [r7, #16]
 801132c:	f383 8810 	msr	PRIMASK, r3
}
 8011330:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
                status =  TX_NOT_AVAILABLE;
 8011332:	231d      	movs	r3, #29
 8011334:	657b      	str	r3, [r7, #84]	; 0x54
 8011336:	e094      	b.n	8011462 <_tx_mutex_get+0x30e>
            {

                /* Prepare for suspension of this thread.  */

                /* Pickup the mutex owner.  */
                mutex_owner =  mutex_ptr -> tx_mutex_owner;
 8011338:	687b      	ldr	r3, [r7, #4]
 801133a:	68db      	ldr	r3, [r3, #12]
 801133c:	63bb      	str	r3, [r7, #56]	; 0x38
#endif
                }
#endif

                /* Setup cleanup routine pointer.  */
                thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_mutex_cleanup);
 801133e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011340:	4a16      	ldr	r2, [pc, #88]	; (801139c <_tx_mutex_get+0x248>)
 8011342:	669a      	str	r2, [r3, #104]	; 0x68

                /* Setup cleanup information, i.e. this mutex control
                   block.  */
                thread_ptr -> tx_thread_suspend_control_block =  (VOID *) mutex_ptr;
 8011344:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011346:	687a      	ldr	r2, [r7, #4]
 8011348:	66da      	str	r2, [r3, #108]	; 0x6c

#ifndef TX_NOT_INTERRUPTABLE

                /* Increment the suspension sequence number, which is used to identify
                   this suspension event.  */
                thread_ptr -> tx_thread_suspension_sequence++;
 801134a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801134c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8011350:	1c5a      	adds	r2, r3, #1
 8011352:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011354:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
#endif

                /* Setup suspension list.  */
                if (mutex_ptr -> tx_mutex_suspended_count == TX_NO_SUSPENSIONS)
 8011358:	687b      	ldr	r3, [r7, #4]
 801135a:	69db      	ldr	r3, [r3, #28]
 801135c:	2b00      	cmp	r3, #0
 801135e:	d11f      	bne.n	80113a0 <_tx_mutex_get+0x24c>
                {

                    /* No other threads are suspended.  Setup the head pointer and
                       just setup this threads pointers to itself.  */
                    mutex_ptr -> tx_mutex_suspension_list =         thread_ptr;
 8011360:	687b      	ldr	r3, [r7, #4]
 8011362:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8011364:	619a      	str	r2, [r3, #24]
                    thread_ptr -> tx_thread_suspended_next =        thread_ptr;
 8011366:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011368:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801136a:	671a      	str	r2, [r3, #112]	; 0x70
                    thread_ptr -> tx_thread_suspended_previous =    thread_ptr;
 801136c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801136e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8011370:	675a      	str	r2, [r3, #116]	; 0x74
 8011372:	e027      	b.n	80113c4 <_tx_mutex_get+0x270>
 8011374:	20002814 	.word	0x20002814
 8011378:	20002818 	.word	0x20002818
 801137c:	20000010 	.word	0x20000010
 8011380:	200021f8 	.word	0x200021f8
 8011384:	e0001004 	.word	0xe0001004
 8011388:	20002810 	.word	0x20002810
 801138c:	2000280c 	.word	0x2000280c
 8011390:	20002800 	.word	0x20002800
 8011394:	2000281c 	.word	0x2000281c
 8011398:	20002290 	.word	0x20002290
 801139c:	08010e09 	.word	0x08010e09
                }
                else
                {

                    /* This list is not NULL, add current thread to the end. */
                    next_thread =                                   mutex_ptr -> tx_mutex_suspension_list;
 80113a0:	687b      	ldr	r3, [r7, #4]
 80113a2:	699b      	ldr	r3, [r3, #24]
 80113a4:	637b      	str	r3, [r7, #52]	; 0x34
                    thread_ptr -> tx_thread_suspended_next =        next_thread;
 80113a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80113a8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80113aa:	671a      	str	r2, [r3, #112]	; 0x70
                    previous_thread =                               next_thread -> tx_thread_suspended_previous;
 80113ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80113ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80113b0:	633b      	str	r3, [r7, #48]	; 0x30
                    thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 80113b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80113b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80113b6:	675a      	str	r2, [r3, #116]	; 0x74
                    previous_thread -> tx_thread_suspended_next =   thread_ptr;
 80113b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80113ba:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80113bc:	671a      	str	r2, [r3, #112]	; 0x70
                    next_thread -> tx_thread_suspended_previous =   thread_ptr;
 80113be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80113c0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80113c2:	675a      	str	r2, [r3, #116]	; 0x74
                }

                /* Increment the suspension count.  */
                mutex_ptr -> tx_mutex_suspended_count++;
 80113c4:	687b      	ldr	r3, [r7, #4]
 80113c6:	69db      	ldr	r3, [r3, #28]
 80113c8:	1c5a      	adds	r2, r3, #1
 80113ca:	687b      	ldr	r3, [r7, #4]
 80113cc:	61da      	str	r2, [r3, #28]

                /* Set the state to suspended.  */
                thread_ptr -> tx_thread_state =    TX_MUTEX_SUSP;
 80113ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80113d0:	220d      	movs	r2, #13
 80113d2:	631a      	str	r2, [r3, #48]	; 0x30
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Set the suspending flag.  */
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 80113d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80113d6:	2201      	movs	r2, #1
 80113d8:	639a      	str	r2, [r3, #56]	; 0x38

                /* Setup the timeout period.  */
                thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 80113da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80113dc:	683a      	ldr	r2, [r7, #0]
 80113de:	64da      	str	r2, [r3, #76]	; 0x4c

                /* Temporarily disable preemption.  */
                _tx_thread_preempt_disable++;
 80113e0:	4b22      	ldr	r3, [pc, #136]	; (801146c <_tx_mutex_get+0x318>)
 80113e2:	681b      	ldr	r3, [r3, #0]
 80113e4:	3301      	adds	r3, #1
 80113e6:	4a21      	ldr	r2, [pc, #132]	; (801146c <_tx_mutex_get+0x318>)
 80113e8:	6013      	str	r3, [r2, #0]
 80113ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80113ec:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80113ee:	68fb      	ldr	r3, [r7, #12]
 80113f0:	f383 8810 	msr	PRIMASK, r3
}
 80113f4:	bf00      	nop
                /* Restore interrupts.  */
                TX_RESTORE

                /* Determine if we need to raise the priority of the thread
                   owning the mutex.  */
                if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 80113f6:	687b      	ldr	r3, [r7, #4]
 80113f8:	691b      	ldr	r3, [r3, #16]
 80113fa:	2b01      	cmp	r3, #1
 80113fc:	d121      	bne.n	8011442 <_tx_mutex_get+0x2ee>
                {

                    /* Determine if this is the highest priority to raise for this mutex.  */
                    if (mutex_ptr -> tx_mutex_highest_priority_waiting > thread_ptr -> tx_thread_priority)
 80113fe:	687b      	ldr	r3, [r7, #4]
 8011400:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8011402:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011404:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011406:	429a      	cmp	r2, r3
 8011408:	d903      	bls.n	8011412 <_tx_mutex_get+0x2be>
                    {

                        /* Remember this priority.  */
                        mutex_ptr -> tx_mutex_highest_priority_waiting =  thread_ptr -> tx_thread_priority;
 801140a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801140c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801140e:	687b      	ldr	r3, [r7, #4]
 8011410:	629a      	str	r2, [r3, #40]	; 0x28
                    }

                    /* Determine if we have to update inherit priority level of the mutex owner.  */
                    if (thread_ptr -> tx_thread_priority < mutex_owner -> tx_thread_inherit_priority)
 8011412:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011414:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011416:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011418:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 801141c:	429a      	cmp	r2, r3
 801141e:	d204      	bcs.n	801142a <_tx_mutex_get+0x2d6>
                    {

                        /* Remember the new priority inheritance priority.  */
                        mutex_owner -> tx_thread_inherit_priority =  thread_ptr -> tx_thread_priority;
 8011420:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011422:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011424:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011426:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
                    }

                    /* Priority inheritance is requested, check to see if the thread that owns the mutex is lower priority.  */
                    if (mutex_owner -> tx_thread_priority > thread_ptr -> tx_thread_priority)
 801142a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801142c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801142e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011430:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011432:	429a      	cmp	r2, r3
 8011434:	d905      	bls.n	8011442 <_tx_mutex_get+0x2ee>
                    {

                        /* Yes, raise the suspended, owning thread's priority to that
                           of the current thread.  */
                        _tx_mutex_priority_change(mutex_owner, thread_ptr -> tx_thread_priority);
 8011436:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011438:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801143a:	4619      	mov	r1, r3
 801143c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801143e:	f000 f953 	bl	80116e8 <_tx_mutex_priority_change>
#endif
                    }
                }

                /* Call actual thread suspension routine.  */
                _tx_thread_system_suspend(thread_ptr);
 8011442:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8011444:	f001 fbca 	bl	8012bdc <_tx_thread_system_suspend>
#endif
                /* Return the completion status.  */
                status =  thread_ptr -> tx_thread_suspend_status;
 8011448:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801144a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801144e:	657b      	str	r3, [r7, #84]	; 0x54
 8011450:	e007      	b.n	8011462 <_tx_mutex_get+0x30e>
 8011452:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011454:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8011456:	68bb      	ldr	r3, [r7, #8]
 8011458:	f383 8810 	msr	PRIMASK, r3
}
 801145c:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Immediate return, return error completion.  */
            status =  TX_NOT_AVAILABLE;
 801145e:	231d      	movs	r3, #29
 8011460:	657b      	str	r3, [r7, #84]	; 0x54
        }
    }

    /* Return completion status.  */
    return(status);
 8011462:	6d7b      	ldr	r3, [r7, #84]	; 0x54
}
 8011464:	4618      	mov	r0, r3
 8011466:	3758      	adds	r7, #88	; 0x58
 8011468:	46bd      	mov	sp, r7
 801146a:	bd80      	pop	{r7, pc}
 801146c:	20002290 	.word	0x20002290

08011470 <_tx_mutex_prioritize>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_mutex_prioritize(TX_MUTEX *mutex_ptr)
{
 8011470:	b580      	push	{r7, lr}
 8011472:	b098      	sub	sp, #96	; 0x60
 8011474:	af00      	add	r7, sp, #0
 8011476:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8011478:	f3ef 8310 	mrs	r3, PRIMASK
 801147c:	633b      	str	r3, [r7, #48]	; 0x30
    return(posture);
 801147e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    int_posture = __get_interrupt_posture();
 8011480:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("CPSID i" : : : "memory");
 8011482:	b672      	cpsid	i
    return(int_posture);
 8011484:	6afb      	ldr	r3, [r7, #44]	; 0x2c
UINT            status;
#endif


    /* Disable interrupts.  */
    TX_DISABLE
 8011486:	65fb      	str	r3, [r7, #92]	; 0x5c

    /* If trace is enabled, insert this event into the trace buffer.  */
    TX_TRACE_IN_LINE_INSERT(TX_TRACE_MUTEX_PRIORITIZE, mutex_ptr, mutex_ptr -> tx_mutex_suspended_count, TX_POINTER_TO_ULONG_CONVERT(&suspended_count), 0, TX_TRACE_MUTEX_EVENTS)
 8011488:	4b69      	ldr	r3, [pc, #420]	; (8011630 <_tx_mutex_prioritize+0x1c0>)
 801148a:	681b      	ldr	r3, [r3, #0]
 801148c:	643b      	str	r3, [r7, #64]	; 0x40
 801148e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011490:	2b00      	cmp	r3, #0
 8011492:	d06d      	beq.n	8011570 <_tx_mutex_prioritize+0x100>
 8011494:	4b67      	ldr	r3, [pc, #412]	; (8011634 <_tx_mutex_prioritize+0x1c4>)
 8011496:	681b      	ldr	r3, [r3, #0]
 8011498:	f003 0320 	and.w	r3, r3, #32
 801149c:	2b00      	cmp	r3, #0
 801149e:	d067      	beq.n	8011570 <_tx_mutex_prioritize+0x100>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80114a0:	f3ef 8305 	mrs	r3, IPSR
 80114a4:	62bb      	str	r3, [r7, #40]	; 0x28
    return(ipsr_value);
 80114a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80114a8:	4b63      	ldr	r3, [pc, #396]	; (8011638 <_tx_mutex_prioritize+0x1c8>)
 80114aa:	681b      	ldr	r3, [r3, #0]
 80114ac:	4313      	orrs	r3, r2
 80114ae:	63fb      	str	r3, [r7, #60]	; 0x3c
 80114b0:	4b62      	ldr	r3, [pc, #392]	; (801163c <_tx_mutex_prioritize+0x1cc>)
 80114b2:	681b      	ldr	r3, [r3, #0]
 80114b4:	647b      	str	r3, [r7, #68]	; 0x44
 80114b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80114b8:	2b00      	cmp	r3, #0
 80114ba:	d10b      	bne.n	80114d4 <_tx_mutex_prioritize+0x64>
 80114bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80114be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80114c0:	64bb      	str	r3, [r7, #72]	; 0x48
 80114c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80114c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80114c6:	041a      	lsls	r2, r3, #16
 80114c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80114ca:	4313      	orrs	r3, r2
 80114cc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80114d0:	64bb      	str	r3, [r7, #72]	; 0x48
 80114d2:	e00e      	b.n	80114f2 <_tx_mutex_prioritize+0x82>
 80114d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80114d6:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 80114da:	d205      	bcs.n	80114e8 <_tx_mutex_prioritize+0x78>
 80114dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80114de:	64bb      	str	r3, [r7, #72]	; 0x48
 80114e0:	f04f 33ff 	mov.w	r3, #4294967295
 80114e4:	647b      	str	r3, [r7, #68]	; 0x44
 80114e6:	e004      	b.n	80114f2 <_tx_mutex_prioritize+0x82>
 80114e8:	f04f 33f0 	mov.w	r3, #4042322160	; 0xf0f0f0f0
 80114ec:	647b      	str	r3, [r7, #68]	; 0x44
 80114ee:	2300      	movs	r3, #0
 80114f0:	64bb      	str	r3, [r7, #72]	; 0x48
 80114f2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80114f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80114f6:	601a      	str	r2, [r3, #0]
 80114f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80114fa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80114fc:	605a      	str	r2, [r3, #4]
 80114fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011500:	2238      	movs	r2, #56	; 0x38
 8011502:	609a      	str	r2, [r3, #8]
 8011504:	4b4e      	ldr	r3, [pc, #312]	; (8011640 <_tx_mutex_prioritize+0x1d0>)
 8011506:	681a      	ldr	r2, [r3, #0]
 8011508:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801150a:	60da      	str	r2, [r3, #12]
 801150c:	687a      	ldr	r2, [r7, #4]
 801150e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011510:	611a      	str	r2, [r3, #16]
 8011512:	687b      	ldr	r3, [r7, #4]
 8011514:	69da      	ldr	r2, [r3, #28]
 8011516:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011518:	615a      	str	r2, [r3, #20]
 801151a:	f107 020c 	add.w	r2, r7, #12
 801151e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011520:	619a      	str	r2, [r3, #24]
 8011522:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011524:	2200      	movs	r2, #0
 8011526:	61da      	str	r2, [r3, #28]
 8011528:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801152a:	3320      	adds	r3, #32
 801152c:	643b      	str	r3, [r7, #64]	; 0x40
 801152e:	4b45      	ldr	r3, [pc, #276]	; (8011644 <_tx_mutex_prioritize+0x1d4>)
 8011530:	681b      	ldr	r3, [r3, #0]
 8011532:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8011534:	429a      	cmp	r2, r3
 8011536:	d314      	bcc.n	8011562 <_tx_mutex_prioritize+0xf2>
 8011538:	4b43      	ldr	r3, [pc, #268]	; (8011648 <_tx_mutex_prioritize+0x1d8>)
 801153a:	681b      	ldr	r3, [r3, #0]
 801153c:	643b      	str	r3, [r7, #64]	; 0x40
 801153e:	4a3c      	ldr	r2, [pc, #240]	; (8011630 <_tx_mutex_prioritize+0x1c0>)
 8011540:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011542:	6013      	str	r3, [r2, #0]
 8011544:	4b41      	ldr	r3, [pc, #260]	; (801164c <_tx_mutex_prioritize+0x1dc>)
 8011546:	681b      	ldr	r3, [r3, #0]
 8011548:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801154a:	621a      	str	r2, [r3, #32]
 801154c:	4b40      	ldr	r3, [pc, #256]	; (8011650 <_tx_mutex_prioritize+0x1e0>)
 801154e:	681b      	ldr	r3, [r3, #0]
 8011550:	2b00      	cmp	r3, #0
 8011552:	d00d      	beq.n	8011570 <_tx_mutex_prioritize+0x100>
 8011554:	4b3e      	ldr	r3, [pc, #248]	; (8011650 <_tx_mutex_prioritize+0x1e0>)
 8011556:	681b      	ldr	r3, [r3, #0]
 8011558:	4a3c      	ldr	r2, [pc, #240]	; (801164c <_tx_mutex_prioritize+0x1dc>)
 801155a:	6812      	ldr	r2, [r2, #0]
 801155c:	4610      	mov	r0, r2
 801155e:	4798      	blx	r3
 8011560:	e006      	b.n	8011570 <_tx_mutex_prioritize+0x100>
 8011562:	4a33      	ldr	r2, [pc, #204]	; (8011630 <_tx_mutex_prioritize+0x1c0>)
 8011564:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011566:	6013      	str	r3, [r2, #0]
 8011568:	4b38      	ldr	r3, [pc, #224]	; (801164c <_tx_mutex_prioritize+0x1dc>)
 801156a:	681b      	ldr	r3, [r3, #0]
 801156c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801156e:	621a      	str	r2, [r3, #32]

    /* Log this kernel call.  */
    TX_EL_MUTEX_PRIORITIZE_INSERT

    /* Pickup the suspended count.  */
    suspended_count =  mutex_ptr -> tx_mutex_suspended_count;
 8011570:	687b      	ldr	r3, [r7, #4]
 8011572:	69db      	ldr	r3, [r3, #28]
 8011574:	60fb      	str	r3, [r7, #12]

    /* Determine if there are fewer than 2 suspended threads.  */
    if (suspended_count < ((UINT) 2))
 8011576:	68fb      	ldr	r3, [r7, #12]
 8011578:	2b01      	cmp	r3, #1
 801157a:	d805      	bhi.n	8011588 <_tx_mutex_prioritize+0x118>
 801157c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801157e:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8011580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011582:	f383 8810 	msr	PRIMASK, r3
}
 8011586:	e0a7      	b.n	80116d8 <_tx_mutex_prioritize+0x268>
        /* Restore interrupts.  */
        TX_RESTORE
    }

    /* Determine if there how many threads are suspended on this mutex.  */
    else if (suspended_count == ((UINT) 2))
 8011588:	68fb      	ldr	r3, [r7, #12]
 801158a:	2b02      	cmp	r3, #2
 801158c:	d114      	bne.n	80115b8 <_tx_mutex_prioritize+0x148>
    {

        /* Pickup the head pointer and the next pointer.  */
        head_ptr =  mutex_ptr -> tx_mutex_suspension_list;
 801158e:	687b      	ldr	r3, [r7, #4]
 8011590:	699b      	ldr	r3, [r3, #24]
 8011592:	653b      	str	r3, [r7, #80]	; 0x50
        next_thread =  head_ptr -> tx_thread_suspended_next;
 8011594:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011596:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011598:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Determine if the next suspended thread has a higher priority.  */
        if ((next_thread -> tx_thread_priority) < (head_ptr -> tx_thread_priority))
 801159a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801159c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801159e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80115a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80115a2:	429a      	cmp	r2, r3
 80115a4:	d202      	bcs.n	80115ac <_tx_mutex_prioritize+0x13c>
        {

            /* Yes, move the list head to the next thread.  */
            mutex_ptr -> tx_mutex_suspension_list =  next_thread;
 80115a6:	687b      	ldr	r3, [r7, #4]
 80115a8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80115aa:	619a      	str	r2, [r3, #24]
 80115ac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80115ae:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80115b0:	6a3b      	ldr	r3, [r7, #32]
 80115b2:	f383 8810 	msr	PRIMASK, r3
}
 80115b6:	e08f      	b.n	80116d8 <_tx_mutex_prioritize+0x268>
    }
    else
    {

        /* Remember the suspension count and head pointer.  */
        head_ptr =   mutex_ptr -> tx_mutex_suspension_list;
 80115b8:	687b      	ldr	r3, [r7, #4]
 80115ba:	699b      	ldr	r3, [r3, #24]
 80115bc:	653b      	str	r3, [r7, #80]	; 0x50

        /* Default the highest priority thread to the thread at the front of the list.  */
        priority_thread_ptr =  head_ptr;
 80115be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80115c0:	657b      	str	r3, [r7, #84]	; 0x54

        /* Setup search pointer.  */
        thread_ptr =  priority_thread_ptr -> tx_thread_suspended_next;
 80115c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80115c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80115c6:	65bb      	str	r3, [r7, #88]	; 0x58

        /* Disable preemption.  */
        _tx_thread_preempt_disable++;
 80115c8:	4b22      	ldr	r3, [pc, #136]	; (8011654 <_tx_mutex_prioritize+0x1e4>)
 80115ca:	681b      	ldr	r3, [r3, #0]
 80115cc:	3301      	adds	r3, #1
 80115ce:	4a21      	ldr	r2, [pc, #132]	; (8011654 <_tx_mutex_prioritize+0x1e4>)
 80115d0:	6013      	str	r3, [r2, #0]

        /* Set the list changed flag to false.  */
        list_changed =  TX_FALSE;
 80115d2:	2300      	movs	r3, #0
 80115d4:	64fb      	str	r3, [r7, #76]	; 0x4c
        /* Search through the list to find the highest priority thread.  */
        do
        {

            /* Is the current thread higher priority?  */
            if (thread_ptr -> tx_thread_priority < priority_thread_ptr -> tx_thread_priority)
 80115d6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80115d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80115da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80115dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80115de:	429a      	cmp	r2, r3
 80115e0:	d201      	bcs.n	80115e6 <_tx_mutex_prioritize+0x176>
            {

                /* Yes, remember that this thread is the highest priority.  */
                priority_thread_ptr =  thread_ptr;
 80115e2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80115e4:	657b      	str	r3, [r7, #84]	; 0x54
 80115e6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80115e8:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80115ea:	697b      	ldr	r3, [r7, #20]
 80115ec:	f383 8810 	msr	PRIMASK, r3
}
 80115f0:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80115f2:	f3ef 8310 	mrs	r3, PRIMASK
 80115f6:	61fb      	str	r3, [r7, #28]
    return(posture);
 80115f8:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 80115fa:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 80115fc:	b672      	cpsid	i
    return(int_posture);
 80115fe:	69bb      	ldr	r3, [r7, #24]

            /* Restore interrupts temporarily.  */
            TX_RESTORE

            /* Disable interrupts again.  */
            TX_DISABLE
 8011600:	65fb      	str	r3, [r7, #92]	; 0x5c

            /* Determine if any changes to the list have occurred while
               interrupts were enabled.  */

            /* Is the list head the same?  */
            if (head_ptr != mutex_ptr -> tx_mutex_suspension_list)
 8011602:	687b      	ldr	r3, [r7, #4]
 8011604:	699b      	ldr	r3, [r3, #24]
 8011606:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8011608:	429a      	cmp	r2, r3
 801160a:	d002      	beq.n	8011612 <_tx_mutex_prioritize+0x1a2>
            {

                /* The list head has changed, set the list changed flag.  */
                list_changed =  TX_TRUE;
 801160c:	2301      	movs	r3, #1
 801160e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8011610:	e006      	b.n	8011620 <_tx_mutex_prioritize+0x1b0>
            }
            else
            {

                /* Is the suspended count the same?  */
                if (suspended_count != mutex_ptr -> tx_mutex_suspended_count)
 8011612:	687b      	ldr	r3, [r7, #4]
 8011614:	69da      	ldr	r2, [r3, #28]
 8011616:	68fb      	ldr	r3, [r7, #12]
 8011618:	429a      	cmp	r2, r3
 801161a:	d001      	beq.n	8011620 <_tx_mutex_prioritize+0x1b0>
                {

                    /* The list head has changed, set the list changed flag.  */
                    list_changed =  TX_TRUE;
 801161c:	2301      	movs	r3, #1
 801161e:	64fb      	str	r3, [r7, #76]	; 0x4c
                }
            }

            /* Determine if the list has changed.  */
            if (list_changed == TX_FALSE)
 8011620:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011622:	2b00      	cmp	r3, #0
 8011624:	d118      	bne.n	8011658 <_tx_mutex_prioritize+0x1e8>
            {

                /* Move the thread pointer to the next thread.  */
                thread_ptr =  thread_ptr -> tx_thread_suspended_next;
 8011626:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8011628:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801162a:	65bb      	str	r3, [r7, #88]	; 0x58
 801162c:	e021      	b.n	8011672 <_tx_mutex_prioritize+0x202>
 801162e:	bf00      	nop
 8011630:	20002814 	.word	0x20002814
 8011634:	20002818 	.word	0x20002818
 8011638:	20000010 	.word	0x20000010
 801163c:	200021f8 	.word	0x200021f8
 8011640:	e0001004 	.word	0xe0001004
 8011644:	20002810 	.word	0x20002810
 8011648:	2000280c 	.word	0x2000280c
 801164c:	20002800 	.word	0x20002800
 8011650:	2000281c 	.word	0x2000281c
 8011654:	20002290 	.word	0x20002290
            }
            else
            {

                /* Remember the suspension count and head pointer.  */
                head_ptr =   mutex_ptr -> tx_mutex_suspension_list;
 8011658:	687b      	ldr	r3, [r7, #4]
 801165a:	699b      	ldr	r3, [r3, #24]
 801165c:	653b      	str	r3, [r7, #80]	; 0x50
                suspended_count =  mutex_ptr -> tx_mutex_suspended_count;
 801165e:	687b      	ldr	r3, [r7, #4]
 8011660:	69db      	ldr	r3, [r3, #28]
 8011662:	60fb      	str	r3, [r7, #12]

                /* Default the highest priority thread to the thread at the front of the list.  */
                priority_thread_ptr =  head_ptr;
 8011664:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011666:	657b      	str	r3, [r7, #84]	; 0x54

                /* Setup search pointer.  */
                thread_ptr =  priority_thread_ptr -> tx_thread_suspended_next;
 8011668:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801166a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801166c:	65bb      	str	r3, [r7, #88]	; 0x58

                /* Reset the list changed flag.  */
                list_changed =  TX_FALSE;
 801166e:	2300      	movs	r3, #0
 8011670:	64fb      	str	r3, [r7, #76]	; 0x4c
            }

        } while (thread_ptr != head_ptr);
 8011672:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8011674:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011676:	429a      	cmp	r2, r3
 8011678:	d1ad      	bne.n	80115d6 <_tx_mutex_prioritize+0x166>

        /* Release preemption.  */
        _tx_thread_preempt_disable--;
 801167a:	4b1a      	ldr	r3, [pc, #104]	; (80116e4 <_tx_mutex_prioritize+0x274>)
 801167c:	681b      	ldr	r3, [r3, #0]
 801167e:	3b01      	subs	r3, #1
 8011680:	4a18      	ldr	r2, [pc, #96]	; (80116e4 <_tx_mutex_prioritize+0x274>)
 8011682:	6013      	str	r3, [r2, #0]

        /* Now determine if the highest priority thread is at the front
           of the list.  */
        if (priority_thread_ptr != head_ptr)
 8011684:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8011686:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011688:	429a      	cmp	r2, r3
 801168a:	d01d      	beq.n	80116c8 <_tx_mutex_prioritize+0x258>
            /* No, we need to move the highest priority suspended thread to the
               front of the list.  */

            /* First, remove the highest priority thread by updating the
               adjacent suspended threads.  */
            next_thread =                                  priority_thread_ptr -> tx_thread_suspended_next;
 801168c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801168e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011690:	63bb      	str	r3, [r7, #56]	; 0x38
            previous_thread =                              priority_thread_ptr -> tx_thread_suspended_previous;
 8011692:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011694:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011696:	637b      	str	r3, [r7, #52]	; 0x34
            next_thread -> tx_thread_suspended_previous =  previous_thread;
 8011698:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801169a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801169c:	675a      	str	r2, [r3, #116]	; 0x74
            previous_thread -> tx_thread_suspended_next =  next_thread;
 801169e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80116a0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80116a2:	671a      	str	r2, [r3, #112]	; 0x70

            /* Now, link the highest priority thread at the front of the list.  */
            previous_thread =                                      head_ptr -> tx_thread_suspended_previous;
 80116a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80116a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80116a8:	637b      	str	r3, [r7, #52]	; 0x34
            priority_thread_ptr -> tx_thread_suspended_next =      head_ptr;
 80116aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80116ac:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80116ae:	671a      	str	r2, [r3, #112]	; 0x70
            priority_thread_ptr -> tx_thread_suspended_previous =  previous_thread;
 80116b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80116b2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80116b4:	675a      	str	r2, [r3, #116]	; 0x74
            previous_thread -> tx_thread_suspended_next =          priority_thread_ptr;
 80116b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80116b8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80116ba:	671a      	str	r2, [r3, #112]	; 0x70
            head_ptr -> tx_thread_suspended_previous =             priority_thread_ptr;
 80116bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80116be:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80116c0:	675a      	str	r2, [r3, #116]	; 0x74

            /* Move the list head pointer to the highest priority suspended thread.  */
            mutex_ptr -> tx_mutex_suspension_list =  priority_thread_ptr;
 80116c2:	687b      	ldr	r3, [r7, #4]
 80116c4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80116c6:	619a      	str	r2, [r3, #24]
 80116c8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80116ca:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80116cc:	693b      	ldr	r3, [r7, #16]
 80116ce:	f383 8810 	msr	PRIMASK, r3
}
 80116d2:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 80116d4:	f001 f88e 	bl	80127f4 <_tx_thread_system_preempt_check>
    /* Return completion status.  */
    return(status);
#else

    /* Return successful completion.  */
    return(TX_SUCCESS);
 80116d8:	2300      	movs	r3, #0
#endif
}
 80116da:	4618      	mov	r0, r3
 80116dc:	3760      	adds	r7, #96	; 0x60
 80116de:	46bd      	mov	sp, r7
 80116e0:	bd80      	pop	{r7, pc}
 80116e2:	bf00      	nop
 80116e4:	20002290 	.word	0x20002290

080116e8 <_tx_mutex_priority_change>:
/*                                            priority rather than next,  */
/*                                            resulting in version 6.1.6  */
/*                                                                        */
/**************************************************************************/
VOID  _tx_mutex_priority_change(TX_THREAD *thread_ptr, UINT new_priority)
{
 80116e8:	b580      	push	{r7, lr}
 80116ea:	b090      	sub	sp, #64	; 0x40
 80116ec:	af00      	add	r7, sp, #0
 80116ee:	6078      	str	r0, [r7, #4]
 80116f0:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80116f2:	f3ef 8310 	mrs	r3, PRIMASK
 80116f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 80116f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 80116fa:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 80116fc:	b672      	cpsid	i
    return(int_posture);
 80116fe:	6abb      	ldr	r3, [r7, #40]	; 0x28


#ifndef TX_NOT_INTERRUPTABLE

    /* Lockout interrupts while the thread is being suspended.  */
    TX_DISABLE
 8011700:	63fb      	str	r3, [r7, #60]	; 0x3c
#endif

    /* Determine if this thread is currently ready.  */
    if (thread_ptr -> tx_thread_state != TX_READY)
 8011702:	687b      	ldr	r3, [r7, #4]
 8011704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011706:	2b00      	cmp	r3, #0
 8011708:	d017      	beq.n	801173a <_tx_mutex_priority_change+0x52>
    {

        /* Change thread priority to the new mutex priority-inheritance priority.  */
        thread_ptr -> tx_thread_priority =  new_priority;
 801170a:	687b      	ldr	r3, [r7, #4]
 801170c:	683a      	ldr	r2, [r7, #0]
 801170e:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Determine how to setup the thread's preemption-threshold.  */
        if (thread_ptr -> tx_thread_user_preempt_threshold < new_priority)
 8011710:	687b      	ldr	r3, [r7, #4]
 8011712:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8011716:	683a      	ldr	r2, [r7, #0]
 8011718:	429a      	cmp	r2, r3
 801171a:	d905      	bls.n	8011728 <_tx_mutex_priority_change+0x40>
        {

            /* Change thread preemption-threshold to the user's preemption-threshold.  */
            thread_ptr -> tx_thread_preempt_threshold =  thread_ptr -> tx_thread_user_preempt_threshold;
 801171c:	687b      	ldr	r3, [r7, #4]
 801171e:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8011722:	687b      	ldr	r3, [r7, #4]
 8011724:	63da      	str	r2, [r3, #60]	; 0x3c
 8011726:	e002      	b.n	801172e <_tx_mutex_priority_change+0x46>
        }
        else
        {

            /* Change the thread preemption-threshold to the new threshold.  */
            thread_ptr -> tx_thread_preempt_threshold =  new_priority;
 8011728:	687b      	ldr	r3, [r7, #4]
 801172a:	683a      	ldr	r2, [r7, #0]
 801172c:	63da      	str	r2, [r3, #60]	; 0x3c
 801172e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011730:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8011732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011734:	f383 8810 	msr	PRIMASK, r3
}
 8011738:	e089      	b.n	801184e <_tx_mutex_priority_change+0x166>
    }
    else
    {

        /* Pickup the next thread to execute.  */
        execute_ptr =  _tx_thread_execute_ptr;
 801173a:	4b47      	ldr	r3, [pc, #284]	; (8011858 <_tx_mutex_priority_change+0x170>)
 801173c:	681b      	ldr	r3, [r3, #0]
 801173e:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Save the original priority.  */
        original_priority =  thread_ptr -> tx_thread_priority;
 8011740:	687b      	ldr	r3, [r7, #4]
 8011742:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011744:	637b      	str	r3, [r7, #52]	; 0x34
        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
#else

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable =  _tx_thread_preempt_disable + ((UINT) 2);
 8011746:	4b45      	ldr	r3, [pc, #276]	; (801185c <_tx_mutex_priority_change+0x174>)
 8011748:	681b      	ldr	r3, [r3, #0]
 801174a:	3302      	adds	r3, #2
 801174c:	4a43      	ldr	r2, [pc, #268]	; (801185c <_tx_mutex_priority_change+0x174>)
 801174e:	6013      	str	r3, [r2, #0]

        /* Set the state to priority change.  */
        thread_ptr -> tx_thread_state =    TX_PRIORITY_CHANGE;
 8011750:	687b      	ldr	r3, [r7, #4]
 8011752:	220e      	movs	r2, #14
 8011754:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the suspending flag. */
        thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8011756:	687b      	ldr	r3, [r7, #4]
 8011758:	2201      	movs	r2, #1
 801175a:	639a      	str	r2, [r3, #56]	; 0x38

        /* Setup the timeout period.  */
        thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 801175c:	687b      	ldr	r3, [r7, #4]
 801175e:	2200      	movs	r2, #0
 8011760:	64da      	str	r2, [r3, #76]	; 0x4c
 8011762:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011764:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8011766:	69bb      	ldr	r3, [r7, #24]
 8011768:	f383 8810 	msr	PRIMASK, r3
}
 801176c:	bf00      	nop
        /* Restore interrupts.  */
        TX_RESTORE

        /* The thread is ready and must first be removed from the list.  Call the
           system suspend function to accomplish this.  */
        _tx_thread_system_suspend(thread_ptr);
 801176e:	6878      	ldr	r0, [r7, #4]
 8011770:	f001 fa34 	bl	8012bdc <_tx_thread_system_suspend>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8011774:	f3ef 8310 	mrs	r3, PRIMASK
 8011778:	623b      	str	r3, [r7, #32]
    return(posture);
 801177a:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 801177c:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 801177e:	b672      	cpsid	i
    return(int_posture);
 8011780:	69fb      	ldr	r3, [r7, #28]

        /* Disable interrupts.  */
        TX_DISABLE
 8011782:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* At this point, the preempt disable flag is still set, so we still have
           protection against all preemption.  */

        /* Change thread priority to the new mutex priority-inheritance priority.  */
        thread_ptr -> tx_thread_priority =  new_priority;
 8011784:	687b      	ldr	r3, [r7, #4]
 8011786:	683a      	ldr	r2, [r7, #0]
 8011788:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Determine how to setup the thread's preemption-threshold.  */
        if (thread_ptr -> tx_thread_user_preempt_threshold < new_priority)
 801178a:	687b      	ldr	r3, [r7, #4]
 801178c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8011790:	683a      	ldr	r2, [r7, #0]
 8011792:	429a      	cmp	r2, r3
 8011794:	d905      	bls.n	80117a2 <_tx_mutex_priority_change+0xba>
        {

            /* Change thread preemption-threshold to the user's preemption-threshold.  */
            thread_ptr -> tx_thread_preempt_threshold =  thread_ptr -> tx_thread_user_preempt_threshold;
 8011796:	687b      	ldr	r3, [r7, #4]
 8011798:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 801179c:	687b      	ldr	r3, [r7, #4]
 801179e:	63da      	str	r2, [r3, #60]	; 0x3c
 80117a0:	e002      	b.n	80117a8 <_tx_mutex_priority_change+0xc0>
        }
        else
        {

            /* Change the thread preemption-threshold to the new threshold.  */
            thread_ptr -> tx_thread_preempt_threshold =  new_priority;
 80117a2:	687b      	ldr	r3, [r7, #4]
 80117a4:	683a      	ldr	r2, [r7, #0]
 80117a6:	63da      	str	r2, [r3, #60]	; 0x3c
 80117a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80117aa:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80117ac:	68fb      	ldr	r3, [r7, #12]
 80117ae:	f383 8810 	msr	PRIMASK, r3
}
 80117b2:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Resume the thread with the new priority.  */
        _tx_thread_system_resume(thread_ptr);
 80117b4:	6878      	ldr	r0, [r7, #4]
 80117b6:	f001 f857 	bl	8012868 <_tx_thread_system_resume>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80117ba:	f3ef 8310 	mrs	r3, PRIMASK
 80117be:	617b      	str	r3, [r7, #20]
    return(posture);
 80117c0:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 80117c2:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 80117c4:	b672      	cpsid	i
    return(int_posture);
 80117c6:	693b      	ldr	r3, [r7, #16]
        TX_MUTEX_PRIORITY_CHANGE_EXTENSION

#ifndef TX_NOT_INTERRUPTABLE

        /* Disable interrupts.  */
        TX_DISABLE
 80117c8:	63fb      	str	r3, [r7, #60]	; 0x3c
#endif

        /* Pickup the next thread to execute.  */
        next_execute_ptr =  _tx_thread_execute_ptr;
 80117ca:	4b23      	ldr	r3, [pc, #140]	; (8011858 <_tx_mutex_priority_change+0x170>)
 80117cc:	681b      	ldr	r3, [r3, #0]
 80117ce:	633b      	str	r3, [r7, #48]	; 0x30

        /* Determine if this thread is not the next thread to execute.  */
        if (thread_ptr != next_execute_ptr)
 80117d0:	687a      	ldr	r2, [r7, #4]
 80117d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80117d4:	429a      	cmp	r2, r3
 80117d6:	d034      	beq.n	8011842 <_tx_mutex_priority_change+0x15a>
        {

            /* Make sure the thread is still ready.  */
            if (thread_ptr -> tx_thread_state == TX_READY)
 80117d8:	687b      	ldr	r3, [r7, #4]
 80117da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80117dc:	2b00      	cmp	r3, #0
 80117de:	d130      	bne.n	8011842 <_tx_mutex_priority_change+0x15a>
            {

                /* Now check and see if this thread has an equal or higher priority.  */
                if (thread_ptr -> tx_thread_priority <= next_execute_ptr -> tx_thread_priority)
 80117e0:	687b      	ldr	r3, [r7, #4]
 80117e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80117e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80117e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80117e8:	429a      	cmp	r2, r3
 80117ea:	d811      	bhi.n	8011810 <_tx_mutex_priority_change+0x128>
                {

                    /* Now determine if this thread was the previously executing thread.  */
                    if (thread_ptr == execute_ptr)
 80117ec:	687a      	ldr	r2, [r7, #4]
 80117ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80117f0:	429a      	cmp	r2, r3
 80117f2:	d126      	bne.n	8011842 <_tx_mutex_priority_change+0x15a>

                        /* Yes, this thread was previously executing before we temporarily suspended and resumed
                           it in order to change the priority. A lower or same priority thread cannot be the next thread
                           to execute in this case since this thread really didn't suspend.  Simply reset the execute
                           pointer to this thread.  */
                        _tx_thread_execute_ptr =  thread_ptr;
 80117f4:	4a18      	ldr	r2, [pc, #96]	; (8011858 <_tx_mutex_priority_change+0x170>)
 80117f6:	687b      	ldr	r3, [r7, #4]
 80117f8:	6013      	str	r3, [r2, #0]

                        /* Determine if we moved to a lower priority. If so, move the thread to the front of its priority list.  */
                        if (original_priority < new_priority)
 80117fa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80117fc:	683b      	ldr	r3, [r7, #0]
 80117fe:	429a      	cmp	r2, r3
 8011800:	d21f      	bcs.n	8011842 <_tx_mutex_priority_change+0x15a>
                        {

                            /* Ensure that this thread is placed at the front of the priority list.  */
                            _tx_thread_priority_list[thread_ptr -> tx_thread_priority] =  thread_ptr;
 8011802:	687b      	ldr	r3, [r7, #4]
 8011804:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011806:	4916      	ldr	r1, [pc, #88]	; (8011860 <_tx_mutex_priority_change+0x178>)
 8011808:	687a      	ldr	r2, [r7, #4]
 801180a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 801180e:	e018      	b.n	8011842 <_tx_mutex_priority_change+0x15a>
                }
                else
                {

                    /* Now determine if this thread's preemption-threshold needs to be enforced.  */
                    if (thread_ptr -> tx_thread_preempt_threshold < thread_ptr -> tx_thread_priority)
 8011810:	687b      	ldr	r3, [r7, #4]
 8011812:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8011814:	687b      	ldr	r3, [r7, #4]
 8011816:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011818:	429a      	cmp	r2, r3
 801181a:	d212      	bcs.n	8011842 <_tx_mutex_priority_change+0x15a>
                    {

                        /* Yes, preemption-threshold is in force for this thread. */

                        /* Compare the next thread to execute thread's priority against the thread's preemption-threshold.  */
                        if (thread_ptr -> tx_thread_preempt_threshold <= next_execute_ptr -> tx_thread_priority)
 801181c:	687b      	ldr	r3, [r7, #4]
 801181e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8011820:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011822:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011824:	429a      	cmp	r2, r3
 8011826:	d80c      	bhi.n	8011842 <_tx_mutex_priority_change+0x15a>
                        {

                            /* We must swap execute pointers to enforce the preemption-threshold of a thread coming out of
                               priority inheritance.  */
                            _tx_thread_execute_ptr =  thread_ptr;
 8011828:	4a0b      	ldr	r2, [pc, #44]	; (8011858 <_tx_mutex_priority_change+0x170>)
 801182a:	687b      	ldr	r3, [r7, #4]
 801182c:	6013      	str	r3, [r2, #0]

                            /* Determine if we moved to a lower priority. If so, move the thread to the front of its priority list.  */
                            if (original_priority < new_priority)
 801182e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011830:	683b      	ldr	r3, [r7, #0]
 8011832:	429a      	cmp	r2, r3
 8011834:	d205      	bcs.n	8011842 <_tx_mutex_priority_change+0x15a>
                            {

                                /* Ensure that this thread is placed at the front of the priority list.  */
                                _tx_thread_priority_list[thread_ptr -> tx_thread_priority] =  thread_ptr;
 8011836:	687b      	ldr	r3, [r7, #4]
 8011838:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801183a:	4909      	ldr	r1, [pc, #36]	; (8011860 <_tx_mutex_priority_change+0x178>)
 801183c:	687a      	ldr	r2, [r7, #4]
 801183e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8011842:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011844:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8011846:	68bb      	ldr	r3, [r7, #8]
 8011848:	f383 8810 	msr	PRIMASK, r3
}
 801184c:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE
#endif
    }
}
 801184e:	bf00      	nop
 8011850:	3740      	adds	r7, #64	; 0x40
 8011852:	46bd      	mov	sp, r7
 8011854:	bd80      	pop	{r7, pc}
 8011856:	bf00      	nop
 8011858:	200021fc 	.word	0x200021fc
 801185c:	20002290 	.word	0x20002290
 8011860:	20002210 	.word	0x20002210

08011864 <_tx_mutex_put>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_mutex_put(TX_MUTEX *mutex_ptr)
{
 8011864:	b580      	push	{r7, lr}
 8011866:	b0aa      	sub	sp, #168	; 0xa8
 8011868:	af00      	add	r7, sp, #0
 801186a:	6078      	str	r0, [r7, #4]
TX_THREAD       *suspended_thread;
UINT            inheritance_priority;


    /* Setup status to indicate the processing is not complete.  */
    status =  TX_NOT_DONE;
 801186c:	2320      	movs	r3, #32
 801186e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8011872:	f3ef 8310 	mrs	r3, PRIMASK
 8011876:	663b      	str	r3, [r7, #96]	; 0x60
    return(posture);
 8011878:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    int_posture = __get_interrupt_posture();
 801187a:	65fb      	str	r3, [r7, #92]	; 0x5c
    __asm__ volatile ("CPSID i" : : : "memory");
 801187c:	b672      	cpsid	i
    return(int_posture);
 801187e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c

    /* Disable interrupts to put an instance back to the mutex.  */
    TX_DISABLE
 8011880:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    /* Increment the number of attempts to put this mutex.  */
    mutex_ptr -> tx_mutex_performance_put_count++;
#endif

    /* If trace is enabled, insert this event into the trace buffer.  */
    TX_TRACE_IN_LINE_INSERT(TX_TRACE_MUTEX_PUT, mutex_ptr, TX_POINTER_TO_ULONG_CONVERT(mutex_ptr -> tx_mutex_owner), mutex_ptr -> tx_mutex_ownership_count, TX_POINTER_TO_ULONG_CONVERT(&old_priority), TX_TRACE_MUTEX_EVENTS)
 8011884:	4ba6      	ldr	r3, [pc, #664]	; (8011b20 <_tx_mutex_put+0x2bc>)
 8011886:	681b      	ldr	r3, [r3, #0]
 8011888:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 801188c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8011890:	2b00      	cmp	r3, #0
 8011892:	f000 8091 	beq.w	80119b8 <_tx_mutex_put+0x154>
 8011896:	4ba3      	ldr	r3, [pc, #652]	; (8011b24 <_tx_mutex_put+0x2c0>)
 8011898:	681b      	ldr	r3, [r3, #0]
 801189a:	f003 0320 	and.w	r3, r3, #32
 801189e:	2b00      	cmp	r3, #0
 80118a0:	f000 808a 	beq.w	80119b8 <_tx_mutex_put+0x154>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80118a4:	f3ef 8305 	mrs	r3, IPSR
 80118a8:	65bb      	str	r3, [r7, #88]	; 0x58
    return(ipsr_value);
 80118aa:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80118ac:	4b9e      	ldr	r3, [pc, #632]	; (8011b28 <_tx_mutex_put+0x2c4>)
 80118ae:	681b      	ldr	r3, [r3, #0]
 80118b0:	4313      	orrs	r3, r2
 80118b2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80118b6:	4b9d      	ldr	r3, [pc, #628]	; (8011b2c <_tx_mutex_put+0x2c8>)
 80118b8:	681b      	ldr	r3, [r3, #0]
 80118ba:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80118be:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80118c2:	2b00      	cmp	r3, #0
 80118c4:	d110      	bne.n	80118e8 <_tx_mutex_put+0x84>
 80118c6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80118ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80118cc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80118d0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80118d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80118d6:	041a      	lsls	r2, r3, #16
 80118d8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80118dc:	4313      	orrs	r3, r2
 80118de:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80118e2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80118e6:	e014      	b.n	8011912 <_tx_mutex_put+0xae>
 80118e8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80118ec:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 80118f0:	d208      	bcs.n	8011904 <_tx_mutex_put+0xa0>
 80118f2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80118f6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80118fa:	f04f 33ff 	mov.w	r3, #4294967295
 80118fe:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8011902:	e006      	b.n	8011912 <_tx_mutex_put+0xae>
 8011904:	f04f 33f0 	mov.w	r3, #4042322160	; 0xf0f0f0f0
 8011908:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 801190c:	2300      	movs	r3, #0
 801190e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8011912:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8011916:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801191a:	601a      	str	r2, [r3, #0]
 801191c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8011920:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8011924:	605a      	str	r2, [r3, #4]
 8011926:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801192a:	2239      	movs	r2, #57	; 0x39
 801192c:	609a      	str	r2, [r3, #8]
 801192e:	4b80      	ldr	r3, [pc, #512]	; (8011b30 <_tx_mutex_put+0x2cc>)
 8011930:	681a      	ldr	r2, [r3, #0]
 8011932:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8011936:	60da      	str	r2, [r3, #12]
 8011938:	687a      	ldr	r2, [r7, #4]
 801193a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801193e:	611a      	str	r2, [r3, #16]
 8011940:	687b      	ldr	r3, [r7, #4]
 8011942:	68db      	ldr	r3, [r3, #12]
 8011944:	461a      	mov	r2, r3
 8011946:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801194a:	615a      	str	r2, [r3, #20]
 801194c:	687b      	ldr	r3, [r7, #4]
 801194e:	689a      	ldr	r2, [r3, #8]
 8011950:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8011954:	619a      	str	r2, [r3, #24]
 8011956:	f107 0208 	add.w	r2, r7, #8
 801195a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801195e:	61da      	str	r2, [r3, #28]
 8011960:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8011964:	3320      	adds	r3, #32
 8011966:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 801196a:	4b72      	ldr	r3, [pc, #456]	; (8011b34 <_tx_mutex_put+0x2d0>)
 801196c:	681b      	ldr	r3, [r3, #0]
 801196e:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8011972:	429a      	cmp	r2, r3
 8011974:	d317      	bcc.n	80119a6 <_tx_mutex_put+0x142>
 8011976:	4b70      	ldr	r3, [pc, #448]	; (8011b38 <_tx_mutex_put+0x2d4>)
 8011978:	681b      	ldr	r3, [r3, #0]
 801197a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 801197e:	4a68      	ldr	r2, [pc, #416]	; (8011b20 <_tx_mutex_put+0x2bc>)
 8011980:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8011984:	6013      	str	r3, [r2, #0]
 8011986:	4b6d      	ldr	r3, [pc, #436]	; (8011b3c <_tx_mutex_put+0x2d8>)
 8011988:	681b      	ldr	r3, [r3, #0]
 801198a:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 801198e:	621a      	str	r2, [r3, #32]
 8011990:	4b6b      	ldr	r3, [pc, #428]	; (8011b40 <_tx_mutex_put+0x2dc>)
 8011992:	681b      	ldr	r3, [r3, #0]
 8011994:	2b00      	cmp	r3, #0
 8011996:	d00f      	beq.n	80119b8 <_tx_mutex_put+0x154>
 8011998:	4b69      	ldr	r3, [pc, #420]	; (8011b40 <_tx_mutex_put+0x2dc>)
 801199a:	681b      	ldr	r3, [r3, #0]
 801199c:	4a67      	ldr	r2, [pc, #412]	; (8011b3c <_tx_mutex_put+0x2d8>)
 801199e:	6812      	ldr	r2, [r2, #0]
 80119a0:	4610      	mov	r0, r2
 80119a2:	4798      	blx	r3
 80119a4:	e008      	b.n	80119b8 <_tx_mutex_put+0x154>
 80119a6:	4a5e      	ldr	r2, [pc, #376]	; (8011b20 <_tx_mutex_put+0x2bc>)
 80119a8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80119ac:	6013      	str	r3, [r2, #0]
 80119ae:	4b63      	ldr	r3, [pc, #396]	; (8011b3c <_tx_mutex_put+0x2d8>)
 80119b0:	681b      	ldr	r3, [r3, #0]
 80119b2:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80119b6:	621a      	str	r2, [r3, #32]

    /* Log this kernel call.  */
    TX_EL_MUTEX_PUT_INSERT

    /* Determine if this mutex is owned.  */
    if (mutex_ptr -> tx_mutex_ownership_count != ((UINT) 0))
 80119b8:	687b      	ldr	r3, [r7, #4]
 80119ba:	689b      	ldr	r3, [r3, #8]
 80119bc:	2b00      	cmp	r3, #0
 80119be:	f000 8222 	beq.w	8011e06 <_tx_mutex_put+0x5a2>
    {

        /* Pickup the owning thread pointer.  */
        thread_ptr =  mutex_ptr -> tx_mutex_owner;
 80119c2:	687b      	ldr	r3, [r7, #4]
 80119c4:	68db      	ldr	r3, [r3, #12]
 80119c6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(current_thread)
 80119ca:	4b58      	ldr	r3, [pc, #352]	; (8011b2c <_tx_mutex_put+0x2c8>)
 80119cc:	681b      	ldr	r3, [r3, #0]
 80119ce:	67fb      	str	r3, [r7, #124]	; 0x7c

        /* Check to see if the mutex is owned by the calling thread.  */
        if (mutex_ptr -> tx_mutex_owner != current_thread)
 80119d0:	687b      	ldr	r3, [r7, #4]
 80119d2:	68db      	ldr	r3, [r3, #12]
 80119d4:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80119d6:	429a      	cmp	r2, r3
 80119d8:	d00d      	beq.n	80119f6 <_tx_mutex_put+0x192>
        {

            /* Determine if the preempt disable flag is set, indicating that
               the caller is not the application but from ThreadX. In such
               cases, the thread mutex owner does not need to match.  */
            if (_tx_thread_preempt_disable == ((UINT) 0))
 80119da:	4b5a      	ldr	r3, [pc, #360]	; (8011b44 <_tx_mutex_put+0x2e0>)
 80119dc:	681b      	ldr	r3, [r3, #0]
 80119de:	2b00      	cmp	r3, #0
 80119e0:	d109      	bne.n	80119f6 <_tx_mutex_put+0x192>
 80119e2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80119e6:	657b      	str	r3, [r7, #84]	; 0x54
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80119e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80119ea:	f383 8810 	msr	PRIMASK, r3
}
 80119ee:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Caller does not own the mutex.  */
                status =  TX_NOT_OWNED;
 80119f0:	231e      	movs	r3, #30
 80119f2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
            }
        }

        /* Determine if we should continue.  */
        if (status == TX_NOT_DONE)
 80119f6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80119fa:	2b20      	cmp	r3, #32
 80119fc:	f040 820d 	bne.w	8011e1a <_tx_mutex_put+0x5b6>
        {

            /* Decrement the mutex ownership count.  */
            mutex_ptr -> tx_mutex_ownership_count--;
 8011a00:	687b      	ldr	r3, [r7, #4]
 8011a02:	689b      	ldr	r3, [r3, #8]
 8011a04:	1e5a      	subs	r2, r3, #1
 8011a06:	687b      	ldr	r3, [r7, #4]
 8011a08:	609a      	str	r2, [r3, #8]

            /* Determine if the mutex is still owned by the current thread.  */
            if (mutex_ptr -> tx_mutex_ownership_count != ((UINT) 0))
 8011a0a:	687b      	ldr	r3, [r7, #4]
 8011a0c:	689b      	ldr	r3, [r3, #8]
 8011a0e:	2b00      	cmp	r3, #0
 8011a10:	d00a      	beq.n	8011a28 <_tx_mutex_put+0x1c4>
 8011a12:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8011a16:	653b      	str	r3, [r7, #80]	; 0x50
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8011a18:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011a1a:	f383 8810 	msr	PRIMASK, r3
}
 8011a1e:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Mutex is still owned, just return successful status.  */
                status =  TX_SUCCESS;
 8011a20:	2300      	movs	r3, #0
 8011a22:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8011a26:	e1f8      	b.n	8011e1a <_tx_mutex_put+0x5b6>
            }
            else
            {

                /* Check for a NULL thread pointer, which can only happen during initialization.   */
                if (thread_ptr == TX_NULL)
 8011a28:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8011a2c:	2b00      	cmp	r3, #0
 8011a2e:	d10a      	bne.n	8011a46 <_tx_mutex_put+0x1e2>
 8011a30:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8011a34:	64fb      	str	r3, [r7, #76]	; 0x4c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8011a36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011a38:	f383 8810 	msr	PRIMASK, r3
}
 8011a3c:	bf00      	nop

                    /* Restore interrupts.  */
                    TX_RESTORE

                    /* Mutex is now available, return successful status.  */
                    status =  TX_SUCCESS;
 8011a3e:	2300      	movs	r3, #0
 8011a40:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8011a44:	e1e9      	b.n	8011e1a <_tx_mutex_put+0x5b6>
                    /* The mutex is now available.   */

                    /* Remove this mutex from the owned mutex list.  */

                    /* Decrement the ownership count.  */
                    thread_ptr -> tx_thread_owned_mutex_count--;
 8011a46:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8011a4a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8011a4e:	1e5a      	subs	r2, r3, #1
 8011a50:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8011a54:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

                    /* Determine if this mutex was the only one on the list.  */
                    if (thread_ptr -> tx_thread_owned_mutex_count == ((UINT) 0))
 8011a58:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8011a5c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8011a60:	2b00      	cmp	r3, #0
 8011a62:	d105      	bne.n	8011a70 <_tx_mutex_put+0x20c>
                    {

                        /* Yes, the list is empty.  Simply set the head pointer to NULL.  */
                        thread_ptr -> tx_thread_owned_mutex_list =  TX_NULL;
 8011a64:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8011a68:	2200      	movs	r2, #0
 8011a6a:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
 8011a6e:	e01b      	b.n	8011aa8 <_tx_mutex_put+0x244>
                    {

                        /* No, there are more mutexes on the list.  */

                        /* Link-up the neighbors.  */
                        next_mutex =                             mutex_ptr -> tx_mutex_owned_next;
 8011a70:	687b      	ldr	r3, [r7, #4]
 8011a72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011a74:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                        previous_mutex =                         mutex_ptr -> tx_mutex_owned_previous;
 8011a78:	687b      	ldr	r3, [r7, #4]
 8011a7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011a7c:	67bb      	str	r3, [r7, #120]	; 0x78
                        next_mutex -> tx_mutex_owned_previous =  previous_mutex;
 8011a7e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8011a82:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8011a84:	631a      	str	r2, [r3, #48]	; 0x30
                        previous_mutex -> tx_mutex_owned_next =  next_mutex;
 8011a86:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8011a88:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8011a8c:	62da      	str	r2, [r3, #44]	; 0x2c

                        /* See if we have to update the created list head pointer.  */
                        if (thread_ptr -> tx_thread_owned_mutex_list == mutex_ptr)
 8011a8e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8011a92:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8011a96:	687a      	ldr	r2, [r7, #4]
 8011a98:	429a      	cmp	r2, r3
 8011a9a:	d105      	bne.n	8011aa8 <_tx_mutex_put+0x244>
                        {

                            /* Yes, move the head pointer to the next link. */
                            thread_ptr -> tx_thread_owned_mutex_list =  next_mutex;
 8011a9c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8011aa0:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8011aa4:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
                        }
                    }

                    /* Determine if the simple, non-suspension, non-priority inheritance case is present.  */
                    if (mutex_ptr -> tx_mutex_suspension_list == TX_NULL)
 8011aa8:	687b      	ldr	r3, [r7, #4]
 8011aaa:	699b      	ldr	r3, [r3, #24]
 8011aac:	2b00      	cmp	r3, #0
 8011aae:	d110      	bne.n	8011ad2 <_tx_mutex_put+0x26e>
                    {

                        /* Is this a priority inheritance mutex?  */
                        if (mutex_ptr -> tx_mutex_inherit == TX_FALSE)
 8011ab0:	687b      	ldr	r3, [r7, #4]
 8011ab2:	691b      	ldr	r3, [r3, #16]
 8011ab4:	2b00      	cmp	r3, #0
 8011ab6:	d10c      	bne.n	8011ad2 <_tx_mutex_put+0x26e>
                        {

                            /* Yes, we are done - set the mutex owner to NULL.   */
                            mutex_ptr -> tx_mutex_owner =  TX_NULL;
 8011ab8:	687b      	ldr	r3, [r7, #4]
 8011aba:	2200      	movs	r2, #0
 8011abc:	60da      	str	r2, [r3, #12]
 8011abe:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8011ac2:	64bb      	str	r3, [r7, #72]	; 0x48
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8011ac4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011ac6:	f383 8810 	msr	PRIMASK, r3
}
 8011aca:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Mutex is now available, return successful status.  */
                            status =  TX_SUCCESS;
 8011acc:	2300      	movs	r3, #0
 8011ace:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
                        }
                    }

                    /* Determine if the processing is complete.  */
                    if (status == TX_NOT_DONE)
 8011ad2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8011ad6:	2b20      	cmp	r3, #32
 8011ad8:	f040 819f 	bne.w	8011e1a <_tx_mutex_put+0x5b6>
                    {

                        /* Initialize original owner and thread priority.  */
                        old_owner =      TX_NULL;
 8011adc:	2300      	movs	r3, #0
 8011ade:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
                        old_priority =   thread_ptr -> tx_thread_user_priority;
 8011ae2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8011ae6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8011aea:	60bb      	str	r3, [r7, #8]

                        /* Does this mutex support priority inheritance?  */
                        if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 8011aec:	687b      	ldr	r3, [r7, #4]
 8011aee:	691b      	ldr	r3, [r3, #16]
 8011af0:	2b01      	cmp	r3, #1
 8011af2:	d16a      	bne.n	8011bca <_tx_mutex_put+0x366>
                        {

#ifndef TX_NOT_INTERRUPTABLE

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 8011af4:	4b13      	ldr	r3, [pc, #76]	; (8011b44 <_tx_mutex_put+0x2e0>)
 8011af6:	681b      	ldr	r3, [r3, #0]
 8011af8:	3301      	adds	r3, #1
 8011afa:	4a12      	ldr	r2, [pc, #72]	; (8011b44 <_tx_mutex_put+0x2e0>)
 8011afc:	6013      	str	r3, [r2, #0]
 8011afe:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8011b02:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8011b04:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011b06:	f383 8810 	msr	PRIMASK, r3
}
 8011b0a:	bf00      	nop
                            /* Restore interrupts.  */
                            TX_RESTORE
#endif

                            /* Default the inheritance priority to disabled.  */
                            inheritance_priority =  ((UINT) TX_MAX_PRIORITIES);
 8011b0c:	2320      	movs	r3, #32
 8011b0e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

                            /* Search the owned mutexes for this thread to determine the highest priority for this
                               former mutex owner to return to.  */
                            next_mutex =  thread_ptr -> tx_thread_owned_mutex_list;
 8011b12:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8011b16:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8011b1a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                            while (next_mutex != TX_NULL)
 8011b1e:	e034      	b.n	8011b8a <_tx_mutex_put+0x326>
 8011b20:	20002814 	.word	0x20002814
 8011b24:	20002818 	.word	0x20002818
 8011b28:	20000010 	.word	0x20000010
 8011b2c:	200021f8 	.word	0x200021f8
 8011b30:	e0001004 	.word	0xe0001004
 8011b34:	20002810 	.word	0x20002810
 8011b38:	2000280c 	.word	0x2000280c
 8011b3c:	20002800 	.word	0x20002800
 8011b40:	2000281c 	.word	0x2000281c
 8011b44:	20002290 	.word	0x20002290
                            {

                                /* Does this mutex support priority inheritance?  */
                                if (next_mutex -> tx_mutex_inherit == TX_TRUE)
 8011b48:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8011b4c:	691b      	ldr	r3, [r3, #16]
 8011b4e:	2b01      	cmp	r3, #1
 8011b50:	d10b      	bne.n	8011b6a <_tx_mutex_put+0x306>
                                {

                                    /* Determine if highest priority field of the mutex is higher than the priority to
                                       restore.  */
                                    if (next_mutex -> tx_mutex_highest_priority_waiting < inheritance_priority)
 8011b52:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8011b56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011b58:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8011b5c:	429a      	cmp	r2, r3
 8011b5e:	d904      	bls.n	8011b6a <_tx_mutex_put+0x306>
                                    {

                                        /* Use this priority to return releasing thread to.  */
                                        inheritance_priority =   next_mutex -> tx_mutex_highest_priority_waiting;
 8011b60:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8011b64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011b66:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
                                    }
                                }

                                /* Move mutex pointer to the next mutex in the list.  */
                                next_mutex =  next_mutex -> tx_mutex_owned_next;
 8011b6a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8011b6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011b70:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

                                /* Are we at the end of the list?  */
                                if (next_mutex == thread_ptr -> tx_thread_owned_mutex_list)
 8011b74:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8011b78:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8011b7c:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8011b80:	429a      	cmp	r2, r3
 8011b82:	d102      	bne.n	8011b8a <_tx_mutex_put+0x326>
                                {

                                    /* Yes, set the next mutex to NULL.  */
                                    next_mutex =  TX_NULL;
 8011b84:	2300      	movs	r3, #0
 8011b86:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                            while (next_mutex != TX_NULL)
 8011b8a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8011b8e:	2b00      	cmp	r3, #0
 8011b90:	d1da      	bne.n	8011b48 <_tx_mutex_put+0x2e4>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8011b92:	f3ef 8310 	mrs	r3, PRIMASK
 8011b96:	643b      	str	r3, [r7, #64]	; 0x40
    return(posture);
 8011b98:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    int_posture = __get_interrupt_posture();
 8011b9a:	63fb      	str	r3, [r7, #60]	; 0x3c
    __asm__ volatile ("CPSID i" : : : "memory");
 8011b9c:	b672      	cpsid	i
    return(int_posture);
 8011b9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                            }

#ifndef TX_NOT_INTERRUPTABLE

                            /* Disable interrupts.  */
                            TX_DISABLE
 8011ba0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

                            /* Undo the temporarily preemption disable.  */
                            _tx_thread_preempt_disable--;
 8011ba4:	4ba0      	ldr	r3, [pc, #640]	; (8011e28 <_tx_mutex_put+0x5c4>)
 8011ba6:	681b      	ldr	r3, [r3, #0]
 8011ba8:	3b01      	subs	r3, #1
 8011baa:	4a9f      	ldr	r2, [pc, #636]	; (8011e28 <_tx_mutex_put+0x5c4>)
 8011bac:	6013      	str	r3, [r2, #0]
#endif

                            /* Set the inherit priority to that of the highest priority thread waiting on the mutex.  */
                            thread_ptr -> tx_thread_inherit_priority =  inheritance_priority;
 8011bae:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8011bb2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8011bb6:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

                            /* Determine if the inheritance priority is less than the default old priority.  */
                            if (inheritance_priority < old_priority)
 8011bba:	68bb      	ldr	r3, [r7, #8]
 8011bbc:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8011bc0:	429a      	cmp	r2, r3
 8011bc2:	d202      	bcs.n	8011bca <_tx_mutex_put+0x366>
                            {

                                /* Yes, update the old priority.  */
                                old_priority =  inheritance_priority;
 8011bc4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8011bc8:	60bb      	str	r3, [r7, #8]
                            }
                        }

                        /* Determine if priority inheritance is in effect and there are one or more
                           threads suspended on the mutex.  */
                        if (mutex_ptr -> tx_mutex_suspended_count > ((UINT) 1))
 8011bca:	687b      	ldr	r3, [r7, #4]
 8011bcc:	69db      	ldr	r3, [r3, #28]
 8011bce:	2b01      	cmp	r3, #1
 8011bd0:	d920      	bls.n	8011c14 <_tx_mutex_put+0x3b0>
                        {

                            /* Is priority inheritance in effect?  */
                            if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 8011bd2:	687b      	ldr	r3, [r7, #4]
 8011bd4:	691b      	ldr	r3, [r3, #16]
 8011bd6:	2b01      	cmp	r3, #1
 8011bd8:	d11c      	bne.n	8011c14 <_tx_mutex_put+0x3b0>
                                   at the front of the suspension list.  */

#ifndef TX_NOT_INTERRUPTABLE

                                /* Temporarily disable preemption.  */
                                _tx_thread_preempt_disable++;
 8011bda:	4b93      	ldr	r3, [pc, #588]	; (8011e28 <_tx_mutex_put+0x5c4>)
 8011bdc:	681b      	ldr	r3, [r3, #0]
 8011bde:	3301      	adds	r3, #1
 8011be0:	4a91      	ldr	r2, [pc, #580]	; (8011e28 <_tx_mutex_put+0x5c4>)
 8011be2:	6013      	str	r3, [r2, #0]
 8011be4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8011be8:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8011bea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011bec:	f383 8810 	msr	PRIMASK, r3
}
 8011bf0:	bf00      	nop
                                do
                                {
                                    status =  _tx_mutex_prioritize(mutex_ptr);
                                } while (status != TX_SUCCESS);
#else
                                _tx_mutex_prioritize(mutex_ptr);
 8011bf2:	6878      	ldr	r0, [r7, #4]
 8011bf4:	f7ff fc3c 	bl	8011470 <_tx_mutex_prioritize>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8011bf8:	f3ef 8310 	mrs	r3, PRIMASK
 8011bfc:	63bb      	str	r3, [r7, #56]	; 0x38
    return(posture);
 8011bfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    int_posture = __get_interrupt_posture();
 8011c00:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile ("CPSID i" : : : "memory");
 8011c02:	b672      	cpsid	i
    return(int_posture);
 8011c04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                TX_MUTEX_PUT_EXTENSION_1

#ifndef TX_NOT_INTERRUPTABLE

                                /* Disable interrupts.  */
                                TX_DISABLE
 8011c06:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

                                /* Back off the preemption disable.  */
                                _tx_thread_preempt_disable--;
 8011c0a:	4b87      	ldr	r3, [pc, #540]	; (8011e28 <_tx_mutex_put+0x5c4>)
 8011c0c:	681b      	ldr	r3, [r3, #0]
 8011c0e:	3b01      	subs	r3, #1
 8011c10:	4a85      	ldr	r2, [pc, #532]	; (8011e28 <_tx_mutex_put+0x5c4>)
 8011c12:	6013      	str	r3, [r2, #0]
#endif
                            }
                        }

                        /* Now determine if there are any threads still waiting on the mutex.  */
                        if (mutex_ptr -> tx_mutex_suspension_list == TX_NULL)
 8011c14:	687b      	ldr	r3, [r7, #4]
 8011c16:	699b      	ldr	r3, [r3, #24]
 8011c18:	2b00      	cmp	r3, #0
 8011c1a:	d139      	bne.n	8011c90 <_tx_mutex_put+0x42c>
                            /* No, there are no longer any threads waiting on the mutex.  */

#ifndef TX_NOT_INTERRUPTABLE

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 8011c1c:	4b82      	ldr	r3, [pc, #520]	; (8011e28 <_tx_mutex_put+0x5c4>)
 8011c1e:	681b      	ldr	r3, [r3, #0]
 8011c20:	3301      	adds	r3, #1
 8011c22:	4a81      	ldr	r2, [pc, #516]	; (8011e28 <_tx_mutex_put+0x5c4>)
 8011c24:	6013      	str	r3, [r2, #0]
 8011c26:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8011c2a:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8011c2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011c2e:	f383 8810 	msr	PRIMASK, r3
}
 8011c32:	bf00      	nop
                            /* Mutex is not owned, but it is possible that a thread that
                               caused a priority inheritance to occur is no longer waiting
                               on the mutex.  */

                            /* Setup the highest priority waiting thread.  */
                            mutex_ptr -> tx_mutex_highest_priority_waiting =  (UINT) TX_MAX_PRIORITIES;
 8011c34:	687b      	ldr	r3, [r7, #4]
 8011c36:	2220      	movs	r2, #32
 8011c38:	629a      	str	r2, [r3, #40]	; 0x28

                            /* Determine if we need to restore priority.  */
                            if ((mutex_ptr -> tx_mutex_owner) -> tx_thread_priority != old_priority)
 8011c3a:	687b      	ldr	r3, [r7, #4]
 8011c3c:	68db      	ldr	r3, [r3, #12]
 8011c3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011c40:	68bb      	ldr	r3, [r7, #8]
 8011c42:	429a      	cmp	r2, r3
 8011c44:	d006      	beq.n	8011c54 <_tx_mutex_put+0x3f0>
                            {

                                /* Yes, restore the priority of thread.  */
                                _tx_mutex_priority_change(mutex_ptr -> tx_mutex_owner, old_priority);
 8011c46:	687b      	ldr	r3, [r7, #4]
 8011c48:	68db      	ldr	r3, [r3, #12]
 8011c4a:	68ba      	ldr	r2, [r7, #8]
 8011c4c:	4611      	mov	r1, r2
 8011c4e:	4618      	mov	r0, r3
 8011c50:	f7ff fd4a 	bl	80116e8 <_tx_mutex_priority_change>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8011c54:	f3ef 8310 	mrs	r3, PRIMASK
 8011c58:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 8011c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    int_posture = __get_interrupt_posture();
 8011c5c:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSID i" : : : "memory");
 8011c5e:	b672      	cpsid	i
    return(int_posture);
 8011c60:	6a3b      	ldr	r3, [r7, #32]
                            }

#ifndef TX_NOT_INTERRUPTABLE

                            /* Disable interrupts again.  */
                            TX_DISABLE
 8011c62:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

                            /* Back off the preemption disable.  */
                            _tx_thread_preempt_disable--;
 8011c66:	4b70      	ldr	r3, [pc, #448]	; (8011e28 <_tx_mutex_put+0x5c4>)
 8011c68:	681b      	ldr	r3, [r3, #0]
 8011c6a:	3b01      	subs	r3, #1
 8011c6c:	4a6e      	ldr	r2, [pc, #440]	; (8011e28 <_tx_mutex_put+0x5c4>)
 8011c6e:	6013      	str	r3, [r2, #0]
#endif

                            /* Set the mutex owner to NULL.  */
                            mutex_ptr -> tx_mutex_owner =  TX_NULL;
 8011c70:	687b      	ldr	r3, [r7, #4]
 8011c72:	2200      	movs	r2, #0
 8011c74:	60da      	str	r2, [r3, #12]
 8011c76:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8011c7a:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8011c7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011c7e:	f383 8810 	msr	PRIMASK, r3
}
 8011c82:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Check for preemption.  */
                            _tx_thread_system_preempt_check();
 8011c84:	f000 fdb6 	bl	80127f4 <_tx_thread_system_preempt_check>

                            /* Set status to success.  */
                            status =  TX_SUCCESS;
 8011c88:	2300      	movs	r3, #0
 8011c8a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8011c8e:	e0c4      	b.n	8011e1a <_tx_mutex_put+0x5b6>
                        }
                        else
                        {

                            /* Pickup the thread at the front of the suspension list.  */
                            thread_ptr =  mutex_ptr -> tx_mutex_suspension_list;
 8011c90:	687b      	ldr	r3, [r7, #4]
 8011c92:	699b      	ldr	r3, [r3, #24]
 8011c94:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

                            /* Save the previous ownership information, if inheritance is
                               in effect.  */
                            if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 8011c98:	687b      	ldr	r3, [r7, #4]
 8011c9a:	691b      	ldr	r3, [r3, #16]
 8011c9c:	2b01      	cmp	r3, #1
 8011c9e:	d10b      	bne.n	8011cb8 <_tx_mutex_put+0x454>
                            {

                                /* Remember the old mutex owner.  */
                                old_owner =  mutex_ptr -> tx_mutex_owner;
 8011ca0:	687b      	ldr	r3, [r7, #4]
 8011ca2:	68db      	ldr	r3, [r3, #12]
 8011ca4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

                                /* Setup owner thread priority information.  */
                                mutex_ptr -> tx_mutex_original_priority =   thread_ptr -> tx_thread_priority;
 8011ca8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8011cac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011cae:	687b      	ldr	r3, [r7, #4]
 8011cb0:	615a      	str	r2, [r3, #20]

                                /* Setup the highest priority waiting thread.  */
                                mutex_ptr -> tx_mutex_highest_priority_waiting =  (UINT) TX_MAX_PRIORITIES;
 8011cb2:	687b      	ldr	r3, [r7, #4]
 8011cb4:	2220      	movs	r2, #32
 8011cb6:	629a      	str	r2, [r3, #40]	; 0x28
                            }

                            /* Determine how many mutexes are owned by this thread.  */
                            owned_count =  thread_ptr -> tx_thread_owned_mutex_count;
 8011cb8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8011cbc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8011cc0:	677b      	str	r3, [r7, #116]	; 0x74

                            /* Determine if this thread owns any other mutexes that have priority inheritance.  */
                            if (owned_count == ((UINT) 0))
 8011cc2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8011cc4:	2b00      	cmp	r3, #0
 8011cc6:	d10b      	bne.n	8011ce0 <_tx_mutex_put+0x47c>
                            {

                                /* The owned mutex list is empty.  Add mutex to empty list.  */
                                thread_ptr -> tx_thread_owned_mutex_list =     mutex_ptr;
 8011cc8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8011ccc:	687a      	ldr	r2, [r7, #4]
 8011cce:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
                                mutex_ptr -> tx_mutex_owned_next =             mutex_ptr;
 8011cd2:	687b      	ldr	r3, [r7, #4]
 8011cd4:	687a      	ldr	r2, [r7, #4]
 8011cd6:	62da      	str	r2, [r3, #44]	; 0x2c
                                mutex_ptr -> tx_mutex_owned_previous =         mutex_ptr;
 8011cd8:	687b      	ldr	r3, [r7, #4]
 8011cda:	687a      	ldr	r2, [r7, #4]
 8011cdc:	631a      	str	r2, [r3, #48]	; 0x30
 8011cde:	e017      	b.n	8011d10 <_tx_mutex_put+0x4ac>
                            {

                                /* Non-empty list. Link up the mutex.  */

                                /* Pickup tail pointer.  */
                                next_mutex =                            thread_ptr -> tx_thread_owned_mutex_list;
 8011ce0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8011ce4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8011ce8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                                previous_mutex =                        next_mutex -> tx_mutex_owned_previous;
 8011cec:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8011cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011cf2:	67bb      	str	r3, [r7, #120]	; 0x78

                                /* Place the owned mutex in the list.  */
                                next_mutex -> tx_mutex_owned_previous =  mutex_ptr;
 8011cf4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8011cf8:	687a      	ldr	r2, [r7, #4]
 8011cfa:	631a      	str	r2, [r3, #48]	; 0x30
                                previous_mutex -> tx_mutex_owned_next =  mutex_ptr;
 8011cfc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8011cfe:	687a      	ldr	r2, [r7, #4]
 8011d00:	62da      	str	r2, [r3, #44]	; 0x2c

                                /* Setup this mutex's next and previous created links.  */
                                mutex_ptr -> tx_mutex_owned_previous =   previous_mutex;
 8011d02:	687b      	ldr	r3, [r7, #4]
 8011d04:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8011d06:	631a      	str	r2, [r3, #48]	; 0x30
                                mutex_ptr -> tx_mutex_owned_next =       next_mutex;
 8011d08:	687b      	ldr	r3, [r7, #4]
 8011d0a:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8011d0e:	62da      	str	r2, [r3, #44]	; 0x2c
                            }

                            /* Increment the number of mutexes owned counter.  */
                            thread_ptr -> tx_thread_owned_mutex_count =  owned_count + ((UINT) 1);
 8011d10:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8011d12:	1c5a      	adds	r2, r3, #1
 8011d14:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8011d18:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

                            /* Mark the Mutex as owned and fill in the corresponding information.  */
                            mutex_ptr -> tx_mutex_ownership_count =  (UINT) 1;
 8011d1c:	687b      	ldr	r3, [r7, #4]
 8011d1e:	2201      	movs	r2, #1
 8011d20:	609a      	str	r2, [r3, #8]
                            mutex_ptr -> tx_mutex_owner =            thread_ptr;
 8011d22:	687b      	ldr	r3, [r7, #4]
 8011d24:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8011d28:	60da      	str	r2, [r3, #12]

                            /* Remove the suspended thread from the list.  */

                            /* Decrement the suspension count.  */
                            mutex_ptr -> tx_mutex_suspended_count--;
 8011d2a:	687b      	ldr	r3, [r7, #4]
 8011d2c:	69db      	ldr	r3, [r3, #28]
 8011d2e:	1e5a      	subs	r2, r3, #1
 8011d30:	687b      	ldr	r3, [r7, #4]
 8011d32:	61da      	str	r2, [r3, #28]

                            /* Pickup the suspended count.  */
                            suspended_count =  mutex_ptr -> tx_mutex_suspended_count;
 8011d34:	687b      	ldr	r3, [r7, #4]
 8011d36:	69db      	ldr	r3, [r3, #28]
 8011d38:	673b      	str	r3, [r7, #112]	; 0x70

                            /* See if this is the only suspended thread on the list.  */
                            if (suspended_count == TX_NO_SUSPENSIONS)
 8011d3a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8011d3c:	2b00      	cmp	r3, #0
 8011d3e:	d103      	bne.n	8011d48 <_tx_mutex_put+0x4e4>
                            {

                                /* Yes, the only suspended thread.  */

                                /* Update the head pointer.  */
                                mutex_ptr -> tx_mutex_suspension_list =  TX_NULL;
 8011d40:	687b      	ldr	r3, [r7, #4]
 8011d42:	2200      	movs	r2, #0
 8011d44:	619a      	str	r2, [r3, #24]
 8011d46:	e010      	b.n	8011d6a <_tx_mutex_put+0x506>
                            {

                                /* At least one more thread is on the same expiration list.  */

                                /* Update the list head pointer.  */
                                next_thread =                                  thread_ptr -> tx_thread_suspended_next;
 8011d48:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8011d4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011d4e:	66fb      	str	r3, [r7, #108]	; 0x6c
                                mutex_ptr -> tx_mutex_suspension_list =        next_thread;
 8011d50:	687b      	ldr	r3, [r7, #4]
 8011d52:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8011d54:	619a      	str	r2, [r3, #24]

                                /* Update the links of the adjacent threads.  */
                                previous_thread =                              thread_ptr -> tx_thread_suspended_previous;
 8011d56:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8011d5a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011d5c:	66bb      	str	r3, [r7, #104]	; 0x68
                                next_thread -> tx_thread_suspended_previous =  previous_thread;
 8011d5e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011d60:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8011d62:	675a      	str	r2, [r3, #116]	; 0x74
                                previous_thread -> tx_thread_suspended_next =  next_thread;
 8011d64:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8011d66:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8011d68:	671a      	str	r2, [r3, #112]	; 0x70
                            }

                            /* Prepare for resumption of the first thread.  */

                            /* Clear cleanup routine to avoid timeout.  */
                            thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8011d6a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8011d6e:	2200      	movs	r2, #0
 8011d70:	669a      	str	r2, [r3, #104]	; 0x68

                            /* Put return status into the thread control block.  */
                            thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 8011d72:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8011d76:	2200      	movs	r2, #0
 8011d78:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                            /* Restore interrupts.  */
                            TX_RESTORE
#else

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 8011d7c:	4b2a      	ldr	r3, [pc, #168]	; (8011e28 <_tx_mutex_put+0x5c4>)
 8011d7e:	681b      	ldr	r3, [r3, #0]
 8011d80:	3301      	adds	r3, #1
 8011d82:	4a29      	ldr	r2, [pc, #164]	; (8011e28 <_tx_mutex_put+0x5c4>)
 8011d84:	6013      	str	r3, [r2, #0]
 8011d86:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8011d8a:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8011d8c:	69fb      	ldr	r3, [r7, #28]
 8011d8e:	f383 8810 	msr	PRIMASK, r3
}
 8011d92:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Determine if priority inheritance is enabled for this mutex.  */
                            if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 8011d94:	687b      	ldr	r3, [r7, #4]
 8011d96:	691b      	ldr	r3, [r3, #16]
 8011d98:	2b01      	cmp	r3, #1
 8011d9a:	d12c      	bne.n	8011df6 <_tx_mutex_put+0x592>
                            {

                                /* Yes, priority inheritance is requested.  */

                                /* Determine if there are any more threads still suspended on the mutex.  */
                                if (mutex_ptr -> tx_mutex_suspended_count != TX_NO_SUSPENSIONS)
 8011d9c:	687b      	ldr	r3, [r7, #4]
 8011d9e:	69db      	ldr	r3, [r3, #28]
 8011da0:	2b00      	cmp	r3, #0
 8011da2:	d01c      	beq.n	8011dde <_tx_mutex_put+0x57a>
                                    do
                                    {
                                        status =  _tx_mutex_prioritize(mutex_ptr);
                                    } while (status != TX_SUCCESS);
#else
                                    _tx_mutex_prioritize(mutex_ptr);
 8011da4:	6878      	ldr	r0, [r7, #4]
 8011da6:	f7ff fb63 	bl	8011470 <_tx_mutex_prioritize>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8011daa:	f3ef 8310 	mrs	r3, PRIMASK
 8011dae:	61bb      	str	r3, [r7, #24]
    return(posture);
 8011db0:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8011db2:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8011db4:	b672      	cpsid	i
    return(int_posture);
 8011db6:	697b      	ldr	r3, [r7, #20]

                                    /* Optional processing extension.  */
                                    TX_MUTEX_PUT_EXTENSION_2

                                    /* Disable interrupts.  */
                                    TX_DISABLE
 8011db8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

                                    /* Determine if there still are threads suspended for this mutex.  */
                                    suspended_thread =  mutex_ptr -> tx_mutex_suspension_list;
 8011dbc:	687b      	ldr	r3, [r7, #4]
 8011dbe:	699b      	ldr	r3, [r3, #24]
 8011dc0:	667b      	str	r3, [r7, #100]	; 0x64
                                    if (suspended_thread != TX_NULL)
 8011dc2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011dc4:	2b00      	cmp	r3, #0
 8011dc6:	d003      	beq.n	8011dd0 <_tx_mutex_put+0x56c>
                                    {

                                        /* Setup the highest priority thread waiting on this mutex.  */
                                        mutex_ptr -> tx_mutex_highest_priority_waiting =  suspended_thread -> tx_thread_priority;
 8011dc8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011dca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011dcc:	687b      	ldr	r3, [r7, #4]
 8011dce:	629a      	str	r2, [r3, #40]	; 0x28
 8011dd0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8011dd4:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8011dd6:	693b      	ldr	r3, [r7, #16]
 8011dd8:	f383 8810 	msr	PRIMASK, r3
}
 8011ddc:	bf00      	nop

                                /* Restore previous priority needs to be restored after priority
                                   inheritance.  */

                                /* Is the priority different?  */
                                if (old_owner -> tx_thread_priority != old_priority)
 8011dde:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8011de2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011de4:	68bb      	ldr	r3, [r7, #8]
 8011de6:	429a      	cmp	r2, r3
 8011de8:	d005      	beq.n	8011df6 <_tx_mutex_put+0x592>
                                {

                                    /* Restore the priority of thread.  */
                                    _tx_mutex_priority_change(old_owner, old_priority);
 8011dea:	68bb      	ldr	r3, [r7, #8]
 8011dec:	4619      	mov	r1, r3
 8011dee:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 8011df2:	f7ff fc79 	bl	80116e8 <_tx_mutex_priority_change>
                                }
                            }

                            /* Resume thread.  */
                            _tx_thread_system_resume(thread_ptr);
 8011df6:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 8011dfa:	f000 fd35 	bl	8012868 <_tx_thread_system_resume>
#endif

                            /* Return a successful status.  */
                            status =  TX_SUCCESS;
 8011dfe:	2300      	movs	r3, #0
 8011e00:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8011e04:	e009      	b.n	8011e1a <_tx_mutex_put+0x5b6>
 8011e06:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8011e0a:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8011e0c:	68fb      	ldr	r3, [r7, #12]
 8011e0e:	f383 8810 	msr	PRIMASK, r3
}
 8011e12:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Caller does not own the mutex.  */
        status =  TX_NOT_OWNED;
 8011e14:	231e      	movs	r3, #30
 8011e16:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    }

    /* Return the completion status.  */
    return(status);
 8011e1a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
}
 8011e1e:	4618      	mov	r0, r3
 8011e20:	37a8      	adds	r7, #168	; 0xa8
 8011e22:	46bd      	mov	sp, r7
 8011e24:	bd80      	pop	{r7, pc}
 8011e26:	bf00      	nop
 8011e28:	20002290 	.word	0x20002290

08011e2c <_tx_thread_create>:
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_create(TX_THREAD *thread_ptr, CHAR *name_ptr, VOID (*entry_function)(ULONG id), ULONG entry_input,
                            VOID *stack_start, ULONG stack_size, UINT priority, UINT preempt_threshold,
                            ULONG time_slice, UINT auto_start)
{
 8011e2c:	b580      	push	{r7, lr}
 8011e2e:	b09a      	sub	sp, #104	; 0x68
 8011e30:	af02      	add	r7, sp, #8
 8011e32:	60f8      	str	r0, [r7, #12]
 8011e34:	60b9      	str	r1, [r7, #8]
 8011e36:	607a      	str	r2, [r7, #4]
 8011e38:	603b      	str	r3, [r7, #0]
TX_INTERRUPT_SAVE_AREA

TX_THREAD               *next_thread;
TX_THREAD               *previous_thread;
TX_THREAD               *saved_thread_ptr;
UINT                    saved_threshold =  ((UINT) 0);
 8011e3a:	2300      	movs	r3, #0
 8011e3c:	65bb      	str	r3, [r7, #88]	; 0x58
#ifndef TX_DISABLE_STACK_FILLING

    /* Set the thread stack to a pattern prior to creating the initial
       stack frame.  This pattern is used by the stack checking routines
       to see how much has been used.  */
    TX_MEMSET(stack_start, ((UCHAR) TX_STACK_FILL), stack_size);
 8011e3e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8011e40:	21ef      	movs	r1, #239	; 0xef
 8011e42:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8011e44:	f002 f8bc 	bl	8013fc0 <memset>

    /* Prepare the thread control block prior to placing it on the created
       list.  */

    /* Initialize thread control block to all zeros.  */
    TX_MEMSET(thread_ptr, 0, (sizeof(TX_THREAD)));
 8011e48:	22b0      	movs	r2, #176	; 0xb0
 8011e4a:	2100      	movs	r1, #0
 8011e4c:	68f8      	ldr	r0, [r7, #12]
 8011e4e:	f002 f8b7 	bl	8013fc0 <memset>

    /* Place the supplied parameters into the thread's control block.  */
    thread_ptr -> tx_thread_name =              name_ptr;
 8011e52:	68fb      	ldr	r3, [r7, #12]
 8011e54:	68ba      	ldr	r2, [r7, #8]
 8011e56:	629a      	str	r2, [r3, #40]	; 0x28
    thread_ptr -> tx_thread_entry =             entry_function;
 8011e58:	68fb      	ldr	r3, [r7, #12]
 8011e5a:	687a      	ldr	r2, [r7, #4]
 8011e5c:	645a      	str	r2, [r3, #68]	; 0x44
    thread_ptr -> tx_thread_entry_parameter =   entry_input;
 8011e5e:	68fb      	ldr	r3, [r7, #12]
 8011e60:	683a      	ldr	r2, [r7, #0]
 8011e62:	649a      	str	r2, [r3, #72]	; 0x48
    thread_ptr -> tx_thread_stack_start =       stack_start;
 8011e64:	68fb      	ldr	r3, [r7, #12]
 8011e66:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8011e68:	60da      	str	r2, [r3, #12]
    thread_ptr -> tx_thread_stack_size =        stack_size;
 8011e6a:	68fb      	ldr	r3, [r7, #12]
 8011e6c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8011e6e:	615a      	str	r2, [r3, #20]
    thread_ptr -> tx_thread_priority =          priority;
 8011e70:	68fb      	ldr	r3, [r7, #12]
 8011e72:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8011e74:	62da      	str	r2, [r3, #44]	; 0x2c
    thread_ptr -> tx_thread_user_priority =     priority;
 8011e76:	68fb      	ldr	r3, [r7, #12]
 8011e78:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8011e7a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    thread_ptr -> tx_thread_time_slice =        time_slice;
 8011e7e:	68fb      	ldr	r3, [r7, #12]
 8011e80:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8011e82:	619a      	str	r2, [r3, #24]
    thread_ptr -> tx_thread_new_time_slice =    time_slice;
 8011e84:	68fb      	ldr	r3, [r7, #12]
 8011e86:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8011e88:	61da      	str	r2, [r3, #28]
    thread_ptr -> tx_thread_inherit_priority =  ((UINT) TX_MAX_PRIORITIES);
 8011e8a:	68fb      	ldr	r3, [r7, #12]
 8011e8c:	2220      	movs	r2, #32
 8011e8e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Calculate the end of the thread's stack area.  */
    temp_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(stack_start);
 8011e92:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8011e94:	64fb      	str	r3, [r7, #76]	; 0x4c
    temp_ptr =  (TX_UCHAR_POINTER_ADD(temp_ptr, (stack_size - ((ULONG) 1))));
 8011e96:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011e98:	3b01      	subs	r3, #1
 8011e9a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8011e9c:	4413      	add	r3, r2
 8011e9e:	64fb      	str	r3, [r7, #76]	; 0x4c
    thread_ptr -> tx_thread_stack_end =         TX_UCHAR_TO_VOID_POINTER_CONVERT(temp_ptr);
 8011ea0:	68fb      	ldr	r3, [r7, #12]
 8011ea2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8011ea4:	611a      	str	r2, [r3, #16]
    thread_ptr -> tx_thread_preempt_threshold =       preempt_threshold;
    thread_ptr -> tx_thread_user_preempt_threshold =  preempt_threshold;
#else

    /* Preemption-threshold is disabled, determine if preemption-threshold was required.  */
    if (priority != preempt_threshold)
 8011ea6:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8011ea8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8011eaa:	429a      	cmp	r2, r3
 8011eac:	d007      	beq.n	8011ebe <_tx_thread_create+0x92>
    {

        /* Preemption-threshold specified. Since specific preemption-threshold is not supported,
           disable all preemption.  */
        thread_ptr -> tx_thread_preempt_threshold =       ((UINT) 0);
 8011eae:	68fb      	ldr	r3, [r7, #12]
 8011eb0:	2200      	movs	r2, #0
 8011eb2:	63da      	str	r2, [r3, #60]	; 0x3c
        thread_ptr -> tx_thread_user_preempt_threshold =  ((UINT) 0);
 8011eb4:	68fb      	ldr	r3, [r7, #12]
 8011eb6:	2200      	movs	r2, #0
 8011eb8:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 8011ebc:	e006      	b.n	8011ecc <_tx_thread_create+0xa0>
    }
    else
    {

        /* Preemption-threshold is not specified, just setup with the priority.  */
        thread_ptr -> tx_thread_preempt_threshold =       priority;
 8011ebe:	68fb      	ldr	r3, [r7, #12]
 8011ec0:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8011ec2:	63da      	str	r2, [r3, #60]	; 0x3c
        thread_ptr -> tx_thread_user_preempt_threshold =  priority;
 8011ec4:	68fb      	ldr	r3, [r7, #12]
 8011ec6:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8011ec8:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    }
#endif

    /* Now fill in the values that are required for thread initialization.  */
    thread_ptr -> tx_thread_state =  TX_SUSPENDED;
 8011ecc:	68fb      	ldr	r3, [r7, #12]
 8011ece:	2203      	movs	r2, #3
 8011ed0:	631a      	str	r2, [r3, #48]	; 0x30

    /* Setup the necessary fields in the thread timer block.  */
    TX_THREAD_CREATE_TIMEOUT_SETUP(thread_ptr)
 8011ed2:	68fb      	ldr	r3, [r7, #12]
 8011ed4:	4a86      	ldr	r2, [pc, #536]	; (80120f0 <_tx_thread_create+0x2c4>)
 8011ed6:	655a      	str	r2, [r3, #84]	; 0x54
 8011ed8:	68fa      	ldr	r2, [r7, #12]
 8011eda:	68fb      	ldr	r3, [r7, #12]
 8011edc:	659a      	str	r2, [r3, #88]	; 0x58
    TX_THREAD_CREATE_INTERNAL_EXTENSION(thread_ptr)

    /* Call the target specific stack frame building routine to build the
       thread's initial stack and to setup the actual stack pointer in the
       control block.  */
    _tx_thread_stack_build(thread_ptr, _tx_thread_shell_entry);
 8011ede:	4985      	ldr	r1, [pc, #532]	; (80120f4 <_tx_thread_create+0x2c8>)
 8011ee0:	68f8      	ldr	r0, [r7, #12]
 8011ee2:	f7ee fa69 	bl	80003b8 <_tx_thread_stack_build>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8011ee6:	f3ef 8310 	mrs	r3, PRIMASK
 8011eea:	637b      	str	r3, [r7, #52]	; 0x34
    return(posture);
 8011eec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    int_posture = __get_interrupt_posture();
 8011eee:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("CPSID i" : : : "memory");
 8011ef0:	b672      	cpsid	i
    return(int_posture);
 8011ef2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    /* Setup the highest usage stack pointer.  */
    thread_ptr -> tx_thread_stack_highest_ptr =  thread_ptr -> tx_thread_stack_ptr;
#endif

    /* Prepare to make this thread a member of the created thread list.  */
    TX_DISABLE
 8011ef4:	64bb      	str	r3, [r7, #72]	; 0x48

    /* Load the thread ID field in the thread control block.  */
    thread_ptr -> tx_thread_id =  TX_THREAD_ID;
 8011ef6:	68fb      	ldr	r3, [r7, #12]
 8011ef8:	4a7f      	ldr	r2, [pc, #508]	; (80120f8 <_tx_thread_create+0x2cc>)
 8011efa:	601a      	str	r2, [r3, #0]

    /* Place the thread on the list of created threads.  First,
       check for an empty list.  */
    if (_tx_thread_created_count == TX_EMPTY)
 8011efc:	4b7f      	ldr	r3, [pc, #508]	; (80120fc <_tx_thread_create+0x2d0>)
 8011efe:	681b      	ldr	r3, [r3, #0]
 8011f00:	2b00      	cmp	r3, #0
 8011f02:	d10b      	bne.n	8011f1c <_tx_thread_create+0xf0>
    {

        /* The created thread list is empty.  Add thread to empty list.  */
        _tx_thread_created_ptr =                    thread_ptr;
 8011f04:	4a7e      	ldr	r2, [pc, #504]	; (8012100 <_tx_thread_create+0x2d4>)
 8011f06:	68fb      	ldr	r3, [r7, #12]
 8011f08:	6013      	str	r3, [r2, #0]
        thread_ptr -> tx_thread_created_next =      thread_ptr;
 8011f0a:	68fb      	ldr	r3, [r7, #12]
 8011f0c:	68fa      	ldr	r2, [r7, #12]
 8011f0e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        thread_ptr -> tx_thread_created_previous =  thread_ptr;
 8011f12:	68fb      	ldr	r3, [r7, #12]
 8011f14:	68fa      	ldr	r2, [r7, #12]
 8011f16:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 8011f1a:	e016      	b.n	8011f4a <_tx_thread_create+0x11e>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_thread =  _tx_thread_created_ptr;
 8011f1c:	4b78      	ldr	r3, [pc, #480]	; (8012100 <_tx_thread_create+0x2d4>)
 8011f1e:	681b      	ldr	r3, [r3, #0]
 8011f20:	647b      	str	r3, [r7, #68]	; 0x44
        previous_thread =  next_thread -> tx_thread_created_previous;
 8011f22:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011f24:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011f28:	643b      	str	r3, [r7, #64]	; 0x40

        /* Place the new thread in the list.  */
        next_thread -> tx_thread_created_previous =  thread_ptr;
 8011f2a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011f2c:	68fa      	ldr	r2, [r7, #12]
 8011f2e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        previous_thread -> tx_thread_created_next =  thread_ptr;
 8011f32:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011f34:	68fa      	ldr	r2, [r7, #12]
 8011f36:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Setup this thread's created links.  */
        thread_ptr -> tx_thread_created_previous =  previous_thread;
 8011f3a:	68fb      	ldr	r3, [r7, #12]
 8011f3c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8011f3e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        thread_ptr -> tx_thread_created_next =      next_thread;
 8011f42:	68fb      	ldr	r3, [r7, #12]
 8011f44:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8011f46:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* Increment the thread created count.  */
    _tx_thread_created_count++;
 8011f4a:	4b6c      	ldr	r3, [pc, #432]	; (80120fc <_tx_thread_create+0x2d0>)
 8011f4c:	681b      	ldr	r3, [r3, #0]
 8011f4e:	3301      	adds	r3, #1
 8011f50:	4a6a      	ldr	r2, [pc, #424]	; (80120fc <_tx_thread_create+0x2d0>)
 8011f52:	6013      	str	r3, [r2, #0]

    /* If trace is enabled, register this object.  */
    TX_TRACE_OBJECT_REGISTER(TX_TRACE_OBJECT_TYPE_THREAD, thread_ptr, name_ptr, TX_POINTER_TO_ULONG_CONVERT(stack_start), stack_size)
 8011f54:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8011f56:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011f58:	9300      	str	r3, [sp, #0]
 8011f5a:	4613      	mov	r3, r2
 8011f5c:	68ba      	ldr	r2, [r7, #8]
 8011f5e:	68f9      	ldr	r1, [r7, #12]
 8011f60:	2001      	movs	r0, #1
 8011f62:	f001 fba3 	bl	80136ac <_tx_trace_object_register>

    /* If trace is enabled, insert this event into the trace buffer.  */
    TX_TRACE_IN_LINE_INSERT(TX_TRACE_THREAD_CREATE, thread_ptr, priority, TX_POINTER_TO_ULONG_CONVERT(stack_start), stack_size, TX_TRACE_THREAD_EVENTS)
 8011f66:	4b67      	ldr	r3, [pc, #412]	; (8012104 <_tx_thread_create+0x2d8>)
 8011f68:	681b      	ldr	r3, [r3, #0]
 8011f6a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011f6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011f6e:	2b00      	cmp	r3, #0
 8011f70:	d06b      	beq.n	801204a <_tx_thread_create+0x21e>
 8011f72:	4b65      	ldr	r3, [pc, #404]	; (8012108 <_tx_thread_create+0x2dc>)
 8011f74:	681b      	ldr	r3, [r3, #0]
 8011f76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011f7a:	2b00      	cmp	r3, #0
 8011f7c:	d065      	beq.n	801204a <_tx_thread_create+0x21e>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8011f7e:	f3ef 8305 	mrs	r3, IPSR
 8011f82:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(ipsr_value);
 8011f84:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011f86:	4b61      	ldr	r3, [pc, #388]	; (801210c <_tx_thread_create+0x2e0>)
 8011f88:	681b      	ldr	r3, [r3, #0]
 8011f8a:	4313      	orrs	r3, r2
 8011f8c:	63bb      	str	r3, [r7, #56]	; 0x38
 8011f8e:	4b60      	ldr	r3, [pc, #384]	; (8012110 <_tx_thread_create+0x2e4>)
 8011f90:	681b      	ldr	r3, [r3, #0]
 8011f92:	653b      	str	r3, [r7, #80]	; 0x50
 8011f94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011f96:	2b00      	cmp	r3, #0
 8011f98:	d10b      	bne.n	8011fb2 <_tx_thread_create+0x186>
 8011f9a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011f9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011f9e:	657b      	str	r3, [r7, #84]	; 0x54
 8011fa0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011fa2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011fa4:	041a      	lsls	r2, r3, #16
 8011fa6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011fa8:	4313      	orrs	r3, r2
 8011faa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8011fae:	657b      	str	r3, [r7, #84]	; 0x54
 8011fb0:	e00e      	b.n	8011fd0 <_tx_thread_create+0x1a4>
 8011fb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011fb4:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 8011fb8:	d205      	bcs.n	8011fc6 <_tx_thread_create+0x19a>
 8011fba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011fbc:	657b      	str	r3, [r7, #84]	; 0x54
 8011fbe:	f04f 33ff 	mov.w	r3, #4294967295
 8011fc2:	653b      	str	r3, [r7, #80]	; 0x50
 8011fc4:	e004      	b.n	8011fd0 <_tx_thread_create+0x1a4>
 8011fc6:	f04f 33f0 	mov.w	r3, #4042322160	; 0xf0f0f0f0
 8011fca:	653b      	str	r3, [r7, #80]	; 0x50
 8011fcc:	2300      	movs	r3, #0
 8011fce:	657b      	str	r3, [r7, #84]	; 0x54
 8011fd0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8011fd2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011fd4:	601a      	str	r2, [r3, #0]
 8011fd6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011fd8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8011fda:	605a      	str	r2, [r3, #4]
 8011fdc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011fde:	2264      	movs	r2, #100	; 0x64
 8011fe0:	609a      	str	r2, [r3, #8]
 8011fe2:	4b4c      	ldr	r3, [pc, #304]	; (8012114 <_tx_thread_create+0x2e8>)
 8011fe4:	681a      	ldr	r2, [r3, #0]
 8011fe6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011fe8:	60da      	str	r2, [r3, #12]
 8011fea:	68fa      	ldr	r2, [r7, #12]
 8011fec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011fee:	611a      	str	r2, [r3, #16]
 8011ff0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011ff2:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8011ff4:	615a      	str	r2, [r3, #20]
 8011ff6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8011ff8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011ffa:	619a      	str	r2, [r3, #24]
 8011ffc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011ffe:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8012000:	61da      	str	r2, [r3, #28]
 8012002:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012004:	3320      	adds	r3, #32
 8012006:	63fb      	str	r3, [r7, #60]	; 0x3c
 8012008:	4b43      	ldr	r3, [pc, #268]	; (8012118 <_tx_thread_create+0x2ec>)
 801200a:	681b      	ldr	r3, [r3, #0]
 801200c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801200e:	429a      	cmp	r2, r3
 8012010:	d314      	bcc.n	801203c <_tx_thread_create+0x210>
 8012012:	4b42      	ldr	r3, [pc, #264]	; (801211c <_tx_thread_create+0x2f0>)
 8012014:	681b      	ldr	r3, [r3, #0]
 8012016:	63fb      	str	r3, [r7, #60]	; 0x3c
 8012018:	4a3a      	ldr	r2, [pc, #232]	; (8012104 <_tx_thread_create+0x2d8>)
 801201a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801201c:	6013      	str	r3, [r2, #0]
 801201e:	4b40      	ldr	r3, [pc, #256]	; (8012120 <_tx_thread_create+0x2f4>)
 8012020:	681b      	ldr	r3, [r3, #0]
 8012022:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8012024:	621a      	str	r2, [r3, #32]
 8012026:	4b3f      	ldr	r3, [pc, #252]	; (8012124 <_tx_thread_create+0x2f8>)
 8012028:	681b      	ldr	r3, [r3, #0]
 801202a:	2b00      	cmp	r3, #0
 801202c:	d00d      	beq.n	801204a <_tx_thread_create+0x21e>
 801202e:	4b3d      	ldr	r3, [pc, #244]	; (8012124 <_tx_thread_create+0x2f8>)
 8012030:	681b      	ldr	r3, [r3, #0]
 8012032:	4a3b      	ldr	r2, [pc, #236]	; (8012120 <_tx_thread_create+0x2f4>)
 8012034:	6812      	ldr	r2, [r2, #0]
 8012036:	4610      	mov	r0, r2
 8012038:	4798      	blx	r3
 801203a:	e006      	b.n	801204a <_tx_thread_create+0x21e>
 801203c:	4a31      	ldr	r2, [pc, #196]	; (8012104 <_tx_thread_create+0x2d8>)
 801203e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012040:	6013      	str	r3, [r2, #0]
 8012042:	4b37      	ldr	r3, [pc, #220]	; (8012120 <_tx_thread_create+0x2f4>)
 8012044:	681b      	ldr	r3, [r3, #0]
 8012046:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8012048:	621a      	str	r2, [r3, #32]
    TX_EL_THREAD_CREATE_INSERT

#ifndef TX_NOT_INTERRUPTABLE

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 801204a:	4b37      	ldr	r3, [pc, #220]	; (8012128 <_tx_thread_create+0x2fc>)
 801204c:	681b      	ldr	r3, [r3, #0]
 801204e:	3301      	adds	r3, #1
 8012050:	4a35      	ldr	r2, [pc, #212]	; (8012128 <_tx_thread_create+0x2fc>)
 8012052:	6013      	str	r3, [r2, #0]
#endif

    /* Determine if an automatic start was requested.  If so, call the resume
       thread function and then check for a preemption condition.  */
    if (auto_start == TX_AUTO_START)
 8012054:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8012056:	2b01      	cmp	r3, #1
 8012058:	d129      	bne.n	80120ae <_tx_thread_create+0x282>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 801205a:	f3ef 8305 	mrs	r3, IPSR
 801205e:	62bb      	str	r3, [r7, #40]	; 0x28
    return(ipsr_value);
 8012060:	6aba      	ldr	r2, [r7, #40]	; 0x28
    {

        /* Determine if the create call is being called from initialization.  */
        if (TX_THREAD_GET_SYSTEM_STATE() >= TX_INITIALIZE_IN_PROGRESS)
 8012062:	4b2a      	ldr	r3, [pc, #168]	; (801210c <_tx_thread_create+0x2e0>)
 8012064:	681b      	ldr	r3, [r3, #0]
 8012066:	4313      	orrs	r3, r2
 8012068:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 801206c:	d30d      	bcc.n	801208a <_tx_thread_create+0x25e>

            /* Pickup the current thread execute pointer, which corresponds to the
               highest priority thread ready to execute.  Interrupt lockout is
               not required, since interrupts are assumed to be disabled during
               initialization.  */
            saved_thread_ptr =  _tx_thread_execute_ptr;
 801206e:	4b2f      	ldr	r3, [pc, #188]	; (801212c <_tx_thread_create+0x300>)
 8012070:	681b      	ldr	r3, [r3, #0]
 8012072:	65fb      	str	r3, [r7, #92]	; 0x5c

            /* Determine if there is thread ready for execution.  */
            if (saved_thread_ptr != TX_NULL)
 8012074:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8012076:	2b00      	cmp	r3, #0
 8012078:	d009      	beq.n	801208e <_tx_thread_create+0x262>
            {

                /* Yes, a thread is ready for execution when initialization completes.  */

                /* Save the current preemption-threshold.  */
                saved_threshold =  saved_thread_ptr -> tx_thread_preempt_threshold;
 801207a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801207c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801207e:	65bb      	str	r3, [r7, #88]	; 0x58

                /* For initialization, temporarily set the preemption-threshold to the
                   priority level to make sure the highest-priority thread runs once
                   initialization is complete.  */
                saved_thread_ptr -> tx_thread_preempt_threshold =  saved_thread_ptr -> tx_thread_priority;
 8012080:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8012082:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012084:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8012086:	63da      	str	r2, [r3, #60]	; 0x3c
 8012088:	e001      	b.n	801208e <_tx_thread_create+0x262>
        }
        else
        {

            /* Simply set the saved thread pointer to NULL.  */
            saved_thread_ptr =  TX_NULL;
 801208a:	2300      	movs	r3, #0
 801208c:	65fb      	str	r3, [r7, #92]	; 0x5c
 801208e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012090:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8012092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012094:	f383 8810 	msr	PRIMASK, r3
}
 8012098:	bf00      	nop

        /* Perform any additional activities for tool or user purpose.  */
        TX_THREAD_CREATE_EXTENSION(thread_ptr)

        /* Call the resume thread function to make this thread ready.  */
        _tx_thread_system_resume(thread_ptr);
 801209a:	68f8      	ldr	r0, [r7, #12]
 801209c:	f000 fbe4 	bl	8012868 <_tx_thread_system_resume>
#endif

        /* Determine if the thread's preemption-threshold needs to be restored.  */
        if (saved_thread_ptr != TX_NULL)
 80120a0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80120a2:	2b00      	cmp	r3, #0
 80120a4:	d01e      	beq.n	80120e4 <_tx_thread_create+0x2b8>
        {

            /* Yes, restore the previous highest-priority thread's preemption-threshold. This
               can only happen if this routine is called from initialization.  */
            saved_thread_ptr -> tx_thread_preempt_threshold =  saved_threshold;
 80120a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80120a8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80120aa:	63da      	str	r2, [r3, #60]	; 0x3c
 80120ac:	e01a      	b.n	80120e4 <_tx_thread_create+0x2b8>
 80120ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80120b0:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80120b2:	697b      	ldr	r3, [r7, #20]
 80120b4:	f383 8810 	msr	PRIMASK, r3
}
 80120b8:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80120ba:	f3ef 8310 	mrs	r3, PRIMASK
 80120be:	61fb      	str	r3, [r7, #28]
    return(posture);
 80120c0:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 80120c2:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 80120c4:	b672      	cpsid	i
    return(int_posture);
 80120c6:	69bb      	ldr	r3, [r7, #24]

        /* Perform any additional activities for tool or user purpose.  */
        TX_THREAD_CREATE_EXTENSION(thread_ptr)

        /* Disable interrupts.  */
        TX_DISABLE
 80120c8:	64bb      	str	r3, [r7, #72]	; 0x48

        /* Re-enable preemption.  */
        _tx_thread_preempt_disable--;
 80120ca:	4b17      	ldr	r3, [pc, #92]	; (8012128 <_tx_thread_create+0x2fc>)
 80120cc:	681b      	ldr	r3, [r3, #0]
 80120ce:	3b01      	subs	r3, #1
 80120d0:	4a15      	ldr	r2, [pc, #84]	; (8012128 <_tx_thread_create+0x2fc>)
 80120d2:	6013      	str	r3, [r2, #0]
 80120d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80120d6:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80120d8:	6a3b      	ldr	r3, [r7, #32]
 80120da:	f383 8810 	msr	PRIMASK, r3
}
 80120de:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 80120e0:	f000 fb88 	bl	80127f4 <_tx_thread_system_preempt_check>
#endif
    }

    /* Always return a success.  */
    return(TX_SUCCESS);
 80120e4:	2300      	movs	r3, #0
}
 80120e6:	4618      	mov	r0, r3
 80120e8:	3760      	adds	r7, #96	; 0x60
 80120ea:	46bd      	mov	sp, r7
 80120ec:	bd80      	pop	{r7, pc}
 80120ee:	bf00      	nop
 80120f0:	0801317d 	.word	0x0801317d
 80120f4:	08012375 	.word	0x08012375
 80120f8:	54485244 	.word	0x54485244
 80120fc:	20002204 	.word	0x20002204
 8012100:	20002200 	.word	0x20002200
 8012104:	20002814 	.word	0x20002814
 8012108:	20002818 	.word	0x20002818
 801210c:	20000010 	.word	0x20000010
 8012110:	200021f8 	.word	0x200021f8
 8012114:	e0001004 	.word	0xe0001004
 8012118:	20002810 	.word	0x20002810
 801211c:	2000280c 	.word	0x2000280c
 8012120:	20002800 	.word	0x20002800
 8012124:	2000281c 	.word	0x2000281c
 8012128:	20002290 	.word	0x20002290
 801212c:	200021fc 	.word	0x200021fc

08012130 <_tx_thread_initialize>:
/*                                            stack check error handling, */
/*                                            resulting in version 6.1.9  */   
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_initialize(VOID)
{
 8012130:	b580      	push	{r7, lr}
 8012132:	af00      	add	r7, sp, #0
       respectively.  */

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Set current thread pointer to NULL.  */
    TX_THREAD_SET_CURRENT(TX_NULL)
 8012134:	4b13      	ldr	r3, [pc, #76]	; (8012184 <_tx_thread_initialize+0x54>)
 8012136:	2200      	movs	r2, #0
 8012138:	601a      	str	r2, [r3, #0]

    /* Initialize the execute thread pointer to NULL.  */
    _tx_thread_execute_ptr =  TX_NULL;
 801213a:	4b13      	ldr	r3, [pc, #76]	; (8012188 <_tx_thread_initialize+0x58>)
 801213c:	2200      	movs	r2, #0
 801213e:	601a      	str	r2, [r3, #0]
 8012140:	4b12      	ldr	r3, [pc, #72]	; (801218c <_tx_thread_initialize+0x5c>)
 8012142:	2200      	movs	r2, #0
 8012144:	601a      	str	r2, [r3, #0]
#endif
#endif

    /* Setup the highest priority variable to the max, indicating no thread is currently
       ready.  */
    _tx_thread_highest_priority =  ((UINT) TX_MAX_PRIORITIES);
 8012146:	4b12      	ldr	r3, [pc, #72]	; (8012190 <_tx_thread_initialize+0x60>)
 8012148:	2220      	movs	r2, #32
 801214a:	601a      	str	r2, [r3, #0]


#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the array of priority head pointers.  */
    TX_MEMSET(&_tx_thread_priority_list[0], 0, (sizeof(_tx_thread_priority_list)));
 801214c:	2280      	movs	r2, #128	; 0x80
 801214e:	2100      	movs	r1, #0
 8012150:	4810      	ldr	r0, [pc, #64]	; (8012194 <_tx_thread_initialize+0x64>)
 8012152:	f001 ff35 	bl	8013fc0 <memset>

    /* Initialize the head pointer of the created threads list and the
       number of threads created.  */
    _tx_thread_created_ptr =        TX_NULL;
 8012156:	4b10      	ldr	r3, [pc, #64]	; (8012198 <_tx_thread_initialize+0x68>)
 8012158:	2200      	movs	r2, #0
 801215a:	601a      	str	r2, [r3, #0]
    _tx_thread_created_count =      TX_EMPTY;
 801215c:	4b0f      	ldr	r3, [pc, #60]	; (801219c <_tx_thread_initialize+0x6c>)
 801215e:	2200      	movs	r2, #0
 8012160:	601a      	str	r2, [r3, #0]

    /* Clear the global preempt disable variable.  */
    _tx_thread_preempt_disable =    ((UINT) 0);
 8012162:	4b0f      	ldr	r3, [pc, #60]	; (80121a0 <_tx_thread_initialize+0x70>)
 8012164:	2200      	movs	r2, #0
 8012166:	601a      	str	r2, [r3, #0]

    /* Initialize the thread mutex release function pointer.  */
    _tx_thread_mutex_release =      TX_NULL;
 8012168:	4b0e      	ldr	r3, [pc, #56]	; (80121a4 <_tx_thread_initialize+0x74>)
 801216a:	2200      	movs	r2, #0
 801216c:	601a      	str	r2, [r3, #0]
#endif
#ifdef TX_TIMER_ENABLE_PERFORMANCE_INFO
                            | (((ULONG) 1) << 9)
#endif
#ifdef TX_ENABLE_EVENT_TRACE
                            | (((ULONG) 1) << 8)
 801216e:	4b0e      	ldr	r3, [pc, #56]	; (80121a8 <_tx_thread_initialize+0x78>)
 8012170:	681b      	ldr	r3, [r3, #0]
 8012172:	f043 2301 	orr.w	r3, r3, #16777472	; 0x1000100
 8012176:	f443 2320 	orr.w	r3, r3, #655360	; 0xa0000
    _tx_build_options =  _tx_build_options 
 801217a:	4a0b      	ldr	r2, [pc, #44]	; (80121a8 <_tx_thread_initialize+0x78>)
 801217c:	6013      	str	r3, [r2, #0]
#endif
#if TX_PORT_SPECIFIC_BUILD_OPTIONS != 0
                            | TX_PORT_SPECIFIC_BUILD_OPTIONS
#endif
                            ;
}
 801217e:	bf00      	nop
 8012180:	bd80      	pop	{r7, pc}
 8012182:	bf00      	nop
 8012184:	200021f8 	.word	0x200021f8
 8012188:	200021fc 	.word	0x200021fc
 801218c:	20002208 	.word	0x20002208
 8012190:	2000220c 	.word	0x2000220c
 8012194:	20002210 	.word	0x20002210
 8012198:	20002200 	.word	0x20002200
 801219c:	20002204 	.word	0x20002204
 80121a0:	20002290 	.word	0x20002290
 80121a4:	20002294 	.word	0x20002294
 80121a8:	20002298 	.word	0x20002298

080121ac <_tx_thread_resume>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_resume(TX_THREAD *thread_ptr)
{
 80121ac:	b580      	push	{r7, lr}
 80121ae:	b090      	sub	sp, #64	; 0x40
 80121b0:	af00      	add	r7, sp, #0
 80121b2:	6078      	str	r0, [r7, #4]

TX_INTERRUPT_SAVE_AREA

UINT        status;
TX_THREAD   *saved_thread_ptr;
UINT        saved_threshold =  ((UINT) 0);
 80121b4:	2300      	movs	r3, #0
 80121b6:	63bb      	str	r3, [r7, #56]	; 0x38
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80121b8:	f3ef 8310 	mrs	r3, PRIMASK
 80121bc:	623b      	str	r3, [r7, #32]
    return(posture);
 80121be:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 80121c0:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 80121c2:	b672      	cpsid	i
    return(int_posture);
 80121c4:	69fb      	ldr	r3, [r7, #28]
    TX_THREAD_STACK_CHECK(thread_ptr)
#endif
#endif

    /* Lockout interrupts while the thread is being resumed.  */
    TX_DISABLE
 80121c6:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* If trace is enabled, insert this event into the trace buffer.  */
    TX_TRACE_IN_LINE_INSERT(TX_TRACE_THREAD_RESUME_API, thread_ptr, thread_ptr -> tx_thread_state, TX_POINTER_TO_ULONG_CONVERT(&status), 0, TX_TRACE_THREAD_EVENTS)
 80121c8:	4b5f      	ldr	r3, [pc, #380]	; (8012348 <_tx_thread_resume+0x19c>)
 80121ca:	681b      	ldr	r3, [r3, #0]
 80121cc:	62bb      	str	r3, [r7, #40]	; 0x28
 80121ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80121d0:	2b00      	cmp	r3, #0
 80121d2:	d06d      	beq.n	80122b0 <_tx_thread_resume+0x104>
 80121d4:	4b5d      	ldr	r3, [pc, #372]	; (801234c <_tx_thread_resume+0x1a0>)
 80121d6:	681b      	ldr	r3, [r3, #0]
 80121d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80121dc:	2b00      	cmp	r3, #0
 80121de:	d067      	beq.n	80122b0 <_tx_thread_resume+0x104>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80121e0:	f3ef 8305 	mrs	r3, IPSR
 80121e4:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 80121e6:	69ba      	ldr	r2, [r7, #24]
 80121e8:	4b59      	ldr	r3, [pc, #356]	; (8012350 <_tx_thread_resume+0x1a4>)
 80121ea:	681b      	ldr	r3, [r3, #0]
 80121ec:	4313      	orrs	r3, r2
 80121ee:	627b      	str	r3, [r7, #36]	; 0x24
 80121f0:	4b58      	ldr	r3, [pc, #352]	; (8012354 <_tx_thread_resume+0x1a8>)
 80121f2:	681b      	ldr	r3, [r3, #0]
 80121f4:	633b      	str	r3, [r7, #48]	; 0x30
 80121f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80121f8:	2b00      	cmp	r3, #0
 80121fa:	d10b      	bne.n	8012214 <_tx_thread_resume+0x68>
 80121fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80121fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012200:	637b      	str	r3, [r7, #52]	; 0x34
 8012202:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012204:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012206:	041a      	lsls	r2, r3, #16
 8012208:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801220a:	4313      	orrs	r3, r2
 801220c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8012210:	637b      	str	r3, [r7, #52]	; 0x34
 8012212:	e00e      	b.n	8012232 <_tx_thread_resume+0x86>
 8012214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012216:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 801221a:	d205      	bcs.n	8012228 <_tx_thread_resume+0x7c>
 801221c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801221e:	637b      	str	r3, [r7, #52]	; 0x34
 8012220:	f04f 33ff 	mov.w	r3, #4294967295
 8012224:	633b      	str	r3, [r7, #48]	; 0x30
 8012226:	e004      	b.n	8012232 <_tx_thread_resume+0x86>
 8012228:	f04f 33f0 	mov.w	r3, #4042322160	; 0xf0f0f0f0
 801222c:	633b      	str	r3, [r7, #48]	; 0x30
 801222e:	2300      	movs	r3, #0
 8012230:	637b      	str	r3, [r7, #52]	; 0x34
 8012232:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012234:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012236:	601a      	str	r2, [r3, #0]
 8012238:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801223a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801223c:	605a      	str	r2, [r3, #4]
 801223e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012240:	226f      	movs	r2, #111	; 0x6f
 8012242:	609a      	str	r2, [r3, #8]
 8012244:	4b44      	ldr	r3, [pc, #272]	; (8012358 <_tx_thread_resume+0x1ac>)
 8012246:	681a      	ldr	r2, [r3, #0]
 8012248:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801224a:	60da      	str	r2, [r3, #12]
 801224c:	687a      	ldr	r2, [r7, #4]
 801224e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012250:	611a      	str	r2, [r3, #16]
 8012252:	687b      	ldr	r3, [r7, #4]
 8012254:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8012256:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012258:	615a      	str	r2, [r3, #20]
 801225a:	f107 0208 	add.w	r2, r7, #8
 801225e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012260:	619a      	str	r2, [r3, #24]
 8012262:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012264:	2200      	movs	r2, #0
 8012266:	61da      	str	r2, [r3, #28]
 8012268:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801226a:	3320      	adds	r3, #32
 801226c:	62bb      	str	r3, [r7, #40]	; 0x28
 801226e:	4b3b      	ldr	r3, [pc, #236]	; (801235c <_tx_thread_resume+0x1b0>)
 8012270:	681b      	ldr	r3, [r3, #0]
 8012272:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012274:	429a      	cmp	r2, r3
 8012276:	d314      	bcc.n	80122a2 <_tx_thread_resume+0xf6>
 8012278:	4b39      	ldr	r3, [pc, #228]	; (8012360 <_tx_thread_resume+0x1b4>)
 801227a:	681b      	ldr	r3, [r3, #0]
 801227c:	62bb      	str	r3, [r7, #40]	; 0x28
 801227e:	4a32      	ldr	r2, [pc, #200]	; (8012348 <_tx_thread_resume+0x19c>)
 8012280:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012282:	6013      	str	r3, [r2, #0]
 8012284:	4b37      	ldr	r3, [pc, #220]	; (8012364 <_tx_thread_resume+0x1b8>)
 8012286:	681b      	ldr	r3, [r3, #0]
 8012288:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801228a:	621a      	str	r2, [r3, #32]
 801228c:	4b36      	ldr	r3, [pc, #216]	; (8012368 <_tx_thread_resume+0x1bc>)
 801228e:	681b      	ldr	r3, [r3, #0]
 8012290:	2b00      	cmp	r3, #0
 8012292:	d00d      	beq.n	80122b0 <_tx_thread_resume+0x104>
 8012294:	4b34      	ldr	r3, [pc, #208]	; (8012368 <_tx_thread_resume+0x1bc>)
 8012296:	681b      	ldr	r3, [r3, #0]
 8012298:	4a32      	ldr	r2, [pc, #200]	; (8012364 <_tx_thread_resume+0x1b8>)
 801229a:	6812      	ldr	r2, [r2, #0]
 801229c:	4610      	mov	r0, r2
 801229e:	4798      	blx	r3
 80122a0:	e006      	b.n	80122b0 <_tx_thread_resume+0x104>
 80122a2:	4a29      	ldr	r2, [pc, #164]	; (8012348 <_tx_thread_resume+0x19c>)
 80122a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80122a6:	6013      	str	r3, [r2, #0]
 80122a8:	4b2e      	ldr	r3, [pc, #184]	; (8012364 <_tx_thread_resume+0x1b8>)
 80122aa:	681b      	ldr	r3, [r3, #0]
 80122ac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80122ae:	621a      	str	r2, [r3, #32]
    /* Log this kernel call.  */
    TX_EL_THREAD_RESUME_INSERT

    /* Determine if the thread is suspended or in the process of suspending.
       If so, call the thread resume processing.  */
    if (thread_ptr -> tx_thread_state == TX_SUSPENDED)
 80122b0:	687b      	ldr	r3, [r7, #4]
 80122b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80122b4:	2b03      	cmp	r3, #3
 80122b6:	d12f      	bne.n	8012318 <_tx_thread_resume+0x16c>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80122b8:	f3ef 8305 	mrs	r3, IPSR
 80122bc:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 80122be:	697a      	ldr	r2, [r7, #20]
    {

        /* Determine if the create call is being called from initialization.  */
        if (TX_THREAD_GET_SYSTEM_STATE() >= TX_INITIALIZE_IN_PROGRESS)
 80122c0:	4b23      	ldr	r3, [pc, #140]	; (8012350 <_tx_thread_resume+0x1a4>)
 80122c2:	681b      	ldr	r3, [r3, #0]
 80122c4:	4313      	orrs	r3, r2
 80122c6:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 80122ca:	d30d      	bcc.n	80122e8 <_tx_thread_resume+0x13c>

            /* Pickup the current thread execute pointer, which corresponds to the
               highest priority thread ready to execute.  Interrupt lockout is
               not required, since interrupts are assumed to be disabled during
               initialization.  */
            saved_thread_ptr =  _tx_thread_execute_ptr;
 80122cc:	4b27      	ldr	r3, [pc, #156]	; (801236c <_tx_thread_resume+0x1c0>)
 80122ce:	681b      	ldr	r3, [r3, #0]
 80122d0:	63fb      	str	r3, [r7, #60]	; 0x3c

            /* Determine if there is thread ready for execution.  */
            if (saved_thread_ptr != TX_NULL)
 80122d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80122d4:	2b00      	cmp	r3, #0
 80122d6:	d009      	beq.n	80122ec <_tx_thread_resume+0x140>
            {

                /* Yes, a thread is ready for execution when initialization completes.  */

                /* Save the current preemption-threshold.  */
                saved_threshold =  saved_thread_ptr -> tx_thread_preempt_threshold;
 80122d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80122da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80122dc:	63bb      	str	r3, [r7, #56]	; 0x38

                /* For initialization, temporarily set the preemption-threshold to the
                   priority level to make sure the highest-priority thread runs once
                   initialization is complete.  */
                saved_thread_ptr -> tx_thread_preempt_threshold =  saved_thread_ptr -> tx_thread_priority;
 80122de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80122e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80122e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80122e4:	63da      	str	r2, [r3, #60]	; 0x3c
 80122e6:	e001      	b.n	80122ec <_tx_thread_resume+0x140>
        }
        else
        {

            /* Simply set the saved thread pointer to NULL.  */
            saved_thread_ptr =  TX_NULL;
 80122e8:	2300      	movs	r3, #0
 80122ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Temporarily disable preemption.  */
        _tx_thread_preempt_disable++;
 80122ec:	4b20      	ldr	r3, [pc, #128]	; (8012370 <_tx_thread_resume+0x1c4>)
 80122ee:	681b      	ldr	r3, [r3, #0]
 80122f0:	3301      	adds	r3, #1
 80122f2:	4a1f      	ldr	r2, [pc, #124]	; (8012370 <_tx_thread_resume+0x1c4>)
 80122f4:	6013      	str	r3, [r2, #0]
 80122f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80122f8:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80122fa:	693b      	ldr	r3, [r7, #16]
 80122fc:	f383 8810 	msr	PRIMASK, r3
}
 8012300:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Call the actual resume service to resume the thread.  */
        _tx_thread_system_resume(thread_ptr);
 8012302:	6878      	ldr	r0, [r7, #4]
 8012304:	f000 fab0 	bl	8012868 <_tx_thread_system_resume>
#endif

        /* Determine if the thread's preemption-threshold needs to be restored.  */
        if (saved_thread_ptr != TX_NULL)
 8012308:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801230a:	2b00      	cmp	r3, #0
 801230c:	d002      	beq.n	8012314 <_tx_thread_resume+0x168>
        {

            /* Yes, restore the previous highest-priority thread's preemption-threshold. This
               can only happen if this routine is called from initialization.  */
            saved_thread_ptr -> tx_thread_preempt_threshold =  saved_threshold;
 801230e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012310:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012312:	63da      	str	r2, [r3, #60]	; 0x3c
        /* Setup successful return status.  */
        status =  TX_SUCCESS;
#else

        /* Return successful completion.  */
        return(TX_SUCCESS);
 8012314:	2300      	movs	r3, #0
 8012316:	e012      	b.n	801233e <_tx_thread_resume+0x192>

        /* Setup successful return status.  */
        status =  TX_SUCCESS;
#endif
    }
    else if (thread_ptr -> tx_thread_delayed_suspend == TX_TRUE)
 8012318:	687b      	ldr	r3, [r7, #4]
 801231a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801231c:	2b01      	cmp	r3, #1
 801231e:	d105      	bne.n	801232c <_tx_thread_resume+0x180>
    {

        /* Clear the delayed suspension.  */
        thread_ptr -> tx_thread_delayed_suspend =  TX_FALSE;
 8012320:	687b      	ldr	r3, [r7, #4]
 8012322:	2200      	movs	r2, #0
 8012324:	635a      	str	r2, [r3, #52]	; 0x34

        /* Setup delayed suspend lifted return status.  */
        status =  TX_SUSPEND_LIFTED;
 8012326:	2319      	movs	r3, #25
 8012328:	60bb      	str	r3, [r7, #8]
 801232a:	e001      	b.n	8012330 <_tx_thread_resume+0x184>
    }
    else
    {

        /* Setup invalid resume return status.  */
        status =  TX_RESUME_ERROR;
 801232c:	2312      	movs	r3, #18
 801232e:	60bb      	str	r3, [r7, #8]
 8012330:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012332:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8012334:	68fb      	ldr	r3, [r7, #12]
 8012336:	f383 8810 	msr	PRIMASK, r3
}
 801233a:	bf00      	nop
        }
    }
#endif

    /* Return completion status. */
    return(status);
 801233c:	68bb      	ldr	r3, [r7, #8]
}
 801233e:	4618      	mov	r0, r3
 8012340:	3740      	adds	r7, #64	; 0x40
 8012342:	46bd      	mov	sp, r7
 8012344:	bd80      	pop	{r7, pc}
 8012346:	bf00      	nop
 8012348:	20002814 	.word	0x20002814
 801234c:	20002818 	.word	0x20002818
 8012350:	20000010 	.word	0x20000010
 8012354:	200021f8 	.word	0x200021f8
 8012358:	e0001004 	.word	0xe0001004
 801235c:	20002810 	.word	0x20002810
 8012360:	2000280c 	.word	0x2000280c
 8012364:	20002800 	.word	0x20002800
 8012368:	2000281c 	.word	0x2000281c
 801236c:	200021fc 	.word	0x200021fc
 8012370:	20002290 	.word	0x20002290

08012374 <_tx_thread_shell_entry>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_shell_entry(VOID)
{
 8012374:	b580      	push	{r7, lr}
 8012376:	b088      	sub	sp, #32
 8012378:	af00      	add	r7, sp, #0
VOID            (*entry_exit_notify)(TX_THREAD *notify_thread_ptr, UINT type);
#endif


    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 801237a:	4b21      	ldr	r3, [pc, #132]	; (8012400 <_tx_thread_shell_entry+0x8c>)
 801237c:	681b      	ldr	r3, [r3, #0]
 801237e:	61fb      	str	r3, [r7, #28]
        (entry_exit_notify)(thread_ptr, TX_THREAD_ENTRY);
    }
#endif

    /* Call current thread's entry function.  */
    (thread_ptr -> tx_thread_entry) (thread_ptr -> tx_thread_entry_parameter);
 8012380:	69fb      	ldr	r3, [r7, #28]
 8012382:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012384:	69fa      	ldr	r2, [r7, #28]
 8012386:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8012388:	4610      	mov	r0, r2
 801238a:	4798      	blx	r3

    /* Suspend thread with a "completed" state.  */

    /* Determine if the application is using mutexes.  */
    if (_tx_thread_mutex_release != TX_NULL)
 801238c:	4b1d      	ldr	r3, [pc, #116]	; (8012404 <_tx_thread_shell_entry+0x90>)
 801238e:	681b      	ldr	r3, [r3, #0]
 8012390:	2b00      	cmp	r3, #0
 8012392:	d003      	beq.n	801239c <_tx_thread_shell_entry+0x28>
    {

        /* Yes, call the mutex release function via a function pointer that
           is setup during mutex initialization.  */
        (_tx_thread_mutex_release)(thread_ptr);
 8012394:	4b1b      	ldr	r3, [pc, #108]	; (8012404 <_tx_thread_shell_entry+0x90>)
 8012396:	681b      	ldr	r3, [r3, #0]
 8012398:	69f8      	ldr	r0, [r7, #28]
 801239a:	4798      	blx	r3
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801239c:	f3ef 8310 	mrs	r3, PRIMASK
 80123a0:	607b      	str	r3, [r7, #4]
    return(posture);
 80123a2:	687b      	ldr	r3, [r7, #4]
    int_posture = __get_interrupt_posture();
 80123a4:	603b      	str	r3, [r7, #0]
    __asm__ volatile ("CPSID i" : : : "memory");
 80123a6:	b672      	cpsid	i
    return(int_posture);
 80123a8:	683b      	ldr	r3, [r7, #0]
    }

    /* Lockout interrupts while the thread state is setup.  */
    TX_DISABLE
 80123aa:	61bb      	str	r3, [r7, #24]
    entry_exit_notify =  thread_ptr -> tx_thread_entry_exit_notify;
#endif

    /* Set the status to suspending, in order to indicate the suspension
       is in progress.  */
    thread_ptr -> tx_thread_state =  TX_COMPLETED;
 80123ac:	69fb      	ldr	r3, [r7, #28]
 80123ae:	2201      	movs	r2, #1
 80123b0:	631a      	str	r2, [r3, #48]	; 0x30
    /* Restore interrupts.  */
    TX_RESTORE
#else

    /* Set the suspending flag. */
    thread_ptr -> tx_thread_suspending =  TX_TRUE;
 80123b2:	69fb      	ldr	r3, [r7, #28]
 80123b4:	2201      	movs	r2, #1
 80123b6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Setup for no timeout period.  */
    thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 80123b8:	69fb      	ldr	r3, [r7, #28]
 80123ba:	2200      	movs	r2, #0
 80123bc:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 80123be:	4b12      	ldr	r3, [pc, #72]	; (8012408 <_tx_thread_shell_entry+0x94>)
 80123c0:	681b      	ldr	r3, [r3, #0]
 80123c2:	3301      	adds	r3, #1
 80123c4:	4a10      	ldr	r2, [pc, #64]	; (8012408 <_tx_thread_shell_entry+0x94>)
 80123c6:	6013      	str	r3, [r2, #0]
 80123c8:	69bb      	ldr	r3, [r7, #24]
 80123ca:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80123cc:	68bb      	ldr	r3, [r7, #8]
 80123ce:	f383 8810 	msr	PRIMASK, r3
}
 80123d2:	bf00      	nop
    __asm__ volatile (" MRS  %0,CONTROL ": "=r" (control_value) );
 80123d4:	f3ef 8314 	mrs	r3, CONTROL
 80123d8:	60fb      	str	r3, [r7, #12]
    return(control_value);
 80123da:	68fb      	ldr	r3, [r7, #12]

    /* Restore interrupts.  */
    TX_RESTORE

    /* Perform any additional activities for tool or user purpose.  */
    TX_THREAD_COMPLETED_EXTENSION(thread_ptr)
 80123dc:	617b      	str	r3, [r7, #20]
 80123de:	697b      	ldr	r3, [r7, #20]
 80123e0:	f023 0304 	bic.w	r3, r3, #4
 80123e4:	617b      	str	r3, [r7, #20]
 80123e6:	697b      	ldr	r3, [r7, #20]
 80123e8:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" MSR  CONTROL,%0": : "r" (control_value): "memory" );
 80123ea:	693b      	ldr	r3, [r7, #16]
 80123ec:	f383 8814 	msr	CONTROL, r3
}
 80123f0:	bf00      	nop
        (entry_exit_notify)(thread_ptr, TX_THREAD_EXIT);
    }
#endif

    /* Call actual thread suspension routine.  */
    _tx_thread_system_suspend(thread_ptr);
 80123f2:	69f8      	ldr	r0, [r7, #28]
 80123f4:	f000 fbf2 	bl	8012bdc <_tx_thread_system_suspend>
#ifdef TX_SAFETY_CRITICAL

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif
}
 80123f8:	bf00      	nop
 80123fa:	3720      	adds	r7, #32
 80123fc:	46bd      	mov	sp, r7
 80123fe:	bd80      	pop	{r7, pc}
 8012400:	200021f8 	.word	0x200021f8
 8012404:	20002294 	.word	0x20002294
 8012408:	20002290 	.word	0x20002290

0801240c <_tx_thread_sleep>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_sleep(ULONG timer_ticks)
{
 801240c:	b580      	push	{r7, lr}
 801240e:	b094      	sub	sp, #80	; 0x50
 8012410:	af00      	add	r7, sp, #0
 8012412:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8012414:	f3ef 8310 	mrs	r3, PRIMASK
 8012418:	637b      	str	r3, [r7, #52]	; 0x34
    return(posture);
 801241a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    int_posture = __get_interrupt_posture();
 801241c:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("CPSID i" : : : "memory");
 801241e:	b672      	cpsid	i
    return(int_posture);
 8012420:	6b3b      	ldr	r3, [r7, #48]	; 0x30
UINT            status;
TX_THREAD       *thread_ptr;


    /* Lockout interrupts while the thread is being resumed.  */
    TX_DISABLE
 8012422:	647b      	str	r3, [r7, #68]	; 0x44

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 8012424:	4b6f      	ldr	r3, [pc, #444]	; (80125e4 <_tx_thread_sleep+0x1d8>)
 8012426:	681b      	ldr	r3, [r3, #0]
 8012428:	643b      	str	r3, [r7, #64]	; 0x40

    /* Determine if this is a legal request.  */

    /* Is there a current thread?  */
    if (thread_ptr == TX_NULL)
 801242a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801242c:	2b00      	cmp	r3, #0
 801242e:	d108      	bne.n	8012442 <_tx_thread_sleep+0x36>
 8012430:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012432:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8012434:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012436:	f383 8810 	msr	PRIMASK, r3
}
 801243a:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Illegal caller of this service.  */
        status =  TX_CALLER_ERROR;
 801243c:	2313      	movs	r3, #19
 801243e:	60fb      	str	r3, [r7, #12]
 8012440:	e0ca      	b.n	80125d8 <_tx_thread_sleep+0x1cc>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8012442:	f3ef 8305 	mrs	r3, IPSR
 8012446:	62bb      	str	r3, [r7, #40]	; 0x28
    return(ipsr_value);
 8012448:	6aba      	ldr	r2, [r7, #40]	; 0x28
    }

    /* Is the caller an ISR or Initialization?  */
    else if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 801244a:	4b67      	ldr	r3, [pc, #412]	; (80125e8 <_tx_thread_sleep+0x1dc>)
 801244c:	681b      	ldr	r3, [r3, #0]
 801244e:	4313      	orrs	r3, r2
 8012450:	2b00      	cmp	r3, #0
 8012452:	d008      	beq.n	8012466 <_tx_thread_sleep+0x5a>
 8012454:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012456:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8012458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801245a:	f383 8810 	msr	PRIMASK, r3
}
 801245e:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Illegal caller of this service.  */
        status =  TX_CALLER_ERROR;
 8012460:	2313      	movs	r3, #19
 8012462:	60fb      	str	r3, [r7, #12]
 8012464:	e0b8      	b.n	80125d8 <_tx_thread_sleep+0x1cc>
    }

#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Is the caller the system timer thread?  */
    else if (thread_ptr == &_tx_timer_thread)
 8012466:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012468:	4a60      	ldr	r2, [pc, #384]	; (80125ec <_tx_thread_sleep+0x1e0>)
 801246a:	4293      	cmp	r3, r2
 801246c:	d108      	bne.n	8012480 <_tx_thread_sleep+0x74>
 801246e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012470:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8012472:	6a3b      	ldr	r3, [r7, #32]
 8012474:	f383 8810 	msr	PRIMASK, r3
}
 8012478:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Illegal caller of this service.  */
        status =  TX_CALLER_ERROR;
 801247a:	2313      	movs	r3, #19
 801247c:	60fb      	str	r3, [r7, #12]
 801247e:	e0ab      	b.n	80125d8 <_tx_thread_sleep+0x1cc>
    }
#endif

    /* Determine if the requested number of ticks is zero.  */
    else if (timer_ticks == ((ULONG) 0))
 8012480:	687b      	ldr	r3, [r7, #4]
 8012482:	2b00      	cmp	r3, #0
 8012484:	d108      	bne.n	8012498 <_tx_thread_sleep+0x8c>
 8012486:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012488:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801248a:	69fb      	ldr	r3, [r7, #28]
 801248c:	f383 8810 	msr	PRIMASK, r3
}
 8012490:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Just return with a successful status.  */
        status =  TX_SUCCESS;
 8012492:	2300      	movs	r3, #0
 8012494:	60fb      	str	r3, [r7, #12]
 8012496:	e09f      	b.n	80125d8 <_tx_thread_sleep+0x1cc>
    }
    else
    {

        /* Determine if the preempt disable flag is non-zero.  */
        if (_tx_thread_preempt_disable != ((UINT) 0))
 8012498:	4b55      	ldr	r3, [pc, #340]	; (80125f0 <_tx_thread_sleep+0x1e4>)
 801249a:	681b      	ldr	r3, [r3, #0]
 801249c:	2b00      	cmp	r3, #0
 801249e:	d008      	beq.n	80124b2 <_tx_thread_sleep+0xa6>
 80124a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80124a2:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80124a4:	69bb      	ldr	r3, [r7, #24]
 80124a6:	f383 8810 	msr	PRIMASK, r3
}
 80124aa:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
            status =  TX_CALLER_ERROR;
 80124ac:	2313      	movs	r3, #19
 80124ae:	60fb      	str	r3, [r7, #12]
 80124b0:	e092      	b.n	80125d8 <_tx_thread_sleep+0x1cc>
        }
        else
        {

            /* If trace is enabled, insert this event into the trace buffer.  */
            TX_TRACE_IN_LINE_INSERT(TX_TRACE_THREAD_SLEEP, TX_ULONG_TO_POINTER_CONVERT(timer_ticks), thread_ptr -> tx_thread_state, TX_POINTER_TO_ULONG_CONVERT(&status), 0, TX_TRACE_THREAD_EVENTS)
 80124b2:	4b50      	ldr	r3, [pc, #320]	; (80125f4 <_tx_thread_sleep+0x1e8>)
 80124b4:	681b      	ldr	r3, [r3, #0]
 80124b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80124b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80124ba:	2b00      	cmp	r3, #0
 80124bc:	d06d      	beq.n	801259a <_tx_thread_sleep+0x18e>
 80124be:	4b4e      	ldr	r3, [pc, #312]	; (80125f8 <_tx_thread_sleep+0x1ec>)
 80124c0:	681b      	ldr	r3, [r3, #0]
 80124c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80124c6:	2b00      	cmp	r3, #0
 80124c8:	d067      	beq.n	801259a <_tx_thread_sleep+0x18e>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80124ca:	f3ef 8305 	mrs	r3, IPSR
 80124ce:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 80124d0:	697a      	ldr	r2, [r7, #20]
 80124d2:	4b45      	ldr	r3, [pc, #276]	; (80125e8 <_tx_thread_sleep+0x1dc>)
 80124d4:	681b      	ldr	r3, [r3, #0]
 80124d6:	4313      	orrs	r3, r2
 80124d8:	63bb      	str	r3, [r7, #56]	; 0x38
 80124da:	4b42      	ldr	r3, [pc, #264]	; (80125e4 <_tx_thread_sleep+0x1d8>)
 80124dc:	681b      	ldr	r3, [r3, #0]
 80124de:	64bb      	str	r3, [r7, #72]	; 0x48
 80124e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80124e2:	2b00      	cmp	r3, #0
 80124e4:	d10b      	bne.n	80124fe <_tx_thread_sleep+0xf2>
 80124e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80124e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80124ea:	64fb      	str	r3, [r7, #76]	; 0x4c
 80124ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80124ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80124f0:	041a      	lsls	r2, r3, #16
 80124f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80124f4:	4313      	orrs	r3, r2
 80124f6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80124fa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80124fc:	e00e      	b.n	801251c <_tx_thread_sleep+0x110>
 80124fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012500:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 8012504:	d205      	bcs.n	8012512 <_tx_thread_sleep+0x106>
 8012506:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012508:	64fb      	str	r3, [r7, #76]	; 0x4c
 801250a:	f04f 33ff 	mov.w	r3, #4294967295
 801250e:	64bb      	str	r3, [r7, #72]	; 0x48
 8012510:	e004      	b.n	801251c <_tx_thread_sleep+0x110>
 8012512:	f04f 33f0 	mov.w	r3, #4042322160	; 0xf0f0f0f0
 8012516:	64bb      	str	r3, [r7, #72]	; 0x48
 8012518:	2300      	movs	r3, #0
 801251a:	64fb      	str	r3, [r7, #76]	; 0x4c
 801251c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801251e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012520:	601a      	str	r2, [r3, #0]
 8012522:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012524:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8012526:	605a      	str	r2, [r3, #4]
 8012528:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801252a:	2270      	movs	r2, #112	; 0x70
 801252c:	609a      	str	r2, [r3, #8]
 801252e:	4b33      	ldr	r3, [pc, #204]	; (80125fc <_tx_thread_sleep+0x1f0>)
 8012530:	681a      	ldr	r2, [r3, #0]
 8012532:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012534:	60da      	str	r2, [r3, #12]
 8012536:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012538:	687a      	ldr	r2, [r7, #4]
 801253a:	611a      	str	r2, [r3, #16]
 801253c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801253e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8012540:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012542:	615a      	str	r2, [r3, #20]
 8012544:	f107 020c 	add.w	r2, r7, #12
 8012548:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801254a:	619a      	str	r2, [r3, #24]
 801254c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801254e:	2200      	movs	r2, #0
 8012550:	61da      	str	r2, [r3, #28]
 8012552:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012554:	3320      	adds	r3, #32
 8012556:	63fb      	str	r3, [r7, #60]	; 0x3c
 8012558:	4b29      	ldr	r3, [pc, #164]	; (8012600 <_tx_thread_sleep+0x1f4>)
 801255a:	681b      	ldr	r3, [r3, #0]
 801255c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801255e:	429a      	cmp	r2, r3
 8012560:	d314      	bcc.n	801258c <_tx_thread_sleep+0x180>
 8012562:	4b28      	ldr	r3, [pc, #160]	; (8012604 <_tx_thread_sleep+0x1f8>)
 8012564:	681b      	ldr	r3, [r3, #0]
 8012566:	63fb      	str	r3, [r7, #60]	; 0x3c
 8012568:	4a22      	ldr	r2, [pc, #136]	; (80125f4 <_tx_thread_sleep+0x1e8>)
 801256a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801256c:	6013      	str	r3, [r2, #0]
 801256e:	4b26      	ldr	r3, [pc, #152]	; (8012608 <_tx_thread_sleep+0x1fc>)
 8012570:	681b      	ldr	r3, [r3, #0]
 8012572:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8012574:	621a      	str	r2, [r3, #32]
 8012576:	4b25      	ldr	r3, [pc, #148]	; (801260c <_tx_thread_sleep+0x200>)
 8012578:	681b      	ldr	r3, [r3, #0]
 801257a:	2b00      	cmp	r3, #0
 801257c:	d00d      	beq.n	801259a <_tx_thread_sleep+0x18e>
 801257e:	4b23      	ldr	r3, [pc, #140]	; (801260c <_tx_thread_sleep+0x200>)
 8012580:	681b      	ldr	r3, [r3, #0]
 8012582:	4a21      	ldr	r2, [pc, #132]	; (8012608 <_tx_thread_sleep+0x1fc>)
 8012584:	6812      	ldr	r2, [r2, #0]
 8012586:	4610      	mov	r0, r2
 8012588:	4798      	blx	r3
 801258a:	e006      	b.n	801259a <_tx_thread_sleep+0x18e>
 801258c:	4a19      	ldr	r2, [pc, #100]	; (80125f4 <_tx_thread_sleep+0x1e8>)
 801258e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012590:	6013      	str	r3, [r2, #0]
 8012592:	4b1d      	ldr	r3, [pc, #116]	; (8012608 <_tx_thread_sleep+0x1fc>)
 8012594:	681b      	ldr	r3, [r3, #0]
 8012596:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8012598:	621a      	str	r2, [r3, #32]
            TX_EL_THREAD_SLEEP_INSERT

            /* Suspend the current thread.  */

            /* Set the state to suspended.  */
            thread_ptr -> tx_thread_state =    TX_SLEEP;
 801259a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801259c:	2204      	movs	r2, #4
 801259e:	631a      	str	r2, [r3, #48]	; 0x30
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Set the suspending flag. */
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 80125a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80125a2:	2201      	movs	r2, #1
 80125a4:	639a      	str	r2, [r3, #56]	; 0x38

            /* Initialize the status to successful.  */
            thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 80125a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80125a8:	2200      	movs	r2, #0
 80125aa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

            /* Setup the timeout period.  */
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  timer_ticks;
 80125ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80125b0:	687a      	ldr	r2, [r7, #4]
 80125b2:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 80125b4:	4b0e      	ldr	r3, [pc, #56]	; (80125f0 <_tx_thread_sleep+0x1e4>)
 80125b6:	681b      	ldr	r3, [r3, #0]
 80125b8:	3301      	adds	r3, #1
 80125ba:	4a0d      	ldr	r2, [pc, #52]	; (80125f0 <_tx_thread_sleep+0x1e4>)
 80125bc:	6013      	str	r3, [r2, #0]
 80125be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80125c0:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80125c2:	693b      	ldr	r3, [r7, #16]
 80125c4:	f383 8810 	msr	PRIMASK, r3
}
 80125c8:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Call actual thread suspension routine.  */
            _tx_thread_system_suspend(thread_ptr);
 80125ca:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80125cc:	f000 fb06 	bl	8012bdc <_tx_thread_system_suspend>
#endif

            /* Return status to the caller.  */
            status =  thread_ptr -> tx_thread_suspend_status;
 80125d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80125d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80125d6:	60fb      	str	r3, [r7, #12]
        }
    }

    /* Return completion status.  */
    return(status);
 80125d8:	68fb      	ldr	r3, [r7, #12]
}
 80125da:	4618      	mov	r0, r3
 80125dc:	3750      	adds	r7, #80	; 0x50
 80125de:	46bd      	mov	sp, r7
 80125e0:	bd80      	pop	{r7, pc}
 80125e2:	bf00      	nop
 80125e4:	200021f8 	.word	0x200021f8
 80125e8:	20000010 	.word	0x20000010
 80125ec:	20002340 	.word	0x20002340
 80125f0:	20002290 	.word	0x20002290
 80125f4:	20002814 	.word	0x20002814
 80125f8:	20002818 	.word	0x20002818
 80125fc:	e0001004 	.word	0xe0001004
 8012600:	20002810 	.word	0x20002810
 8012604:	2000280c 	.word	0x2000280c
 8012608:	20002800 	.word	0x20002800
 801260c:	2000281c 	.word	0x2000281c

08012610 <_tx_thread_suspend>:
/*                                            a MISRA compliance issue,   */
/*                                            resulting in version 6.1.1  */
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_suspend(TX_THREAD *thread_ptr)
{
 8012610:	b580      	push	{r7, lr}
 8012612:	b090      	sub	sp, #64	; 0x40
 8012614:	af00      	add	r7, sp, #0
 8012616:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8012618:	f3ef 8310 	mrs	r3, PRIMASK
 801261c:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 801261e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    int_posture = __get_interrupt_posture();
 8012620:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSID i" : : : "memory");
 8012622:	b672      	cpsid	i
    return(int_posture);
 8012624:	6a3b      	ldr	r3, [r7, #32]


#ifndef TX_INLINE_THREAD_RESUME_SUSPEND

    /* Lockout interrupts while the thread is being suspended.  */
    TX_DISABLE
 8012626:	637b      	str	r3, [r7, #52]	; 0x34

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 8012628:	4b68      	ldr	r3, [pc, #416]	; (80127cc <_tx_thread_suspend+0x1bc>)
 801262a:	681b      	ldr	r3, [r3, #0]
 801262c:	633b      	str	r3, [r7, #48]	; 0x30

    /* If trace is enabled, insert this event into the trace buffer.  */
    TX_TRACE_IN_LINE_INSERT(TX_TRACE_THREAD_SUSPEND_API, thread_ptr, thread_ptr -> tx_thread_state, TX_POINTER_TO_ULONG_CONVERT(&status), 0, TX_TRACE_THREAD_EVENTS)
 801262e:	4b68      	ldr	r3, [pc, #416]	; (80127d0 <_tx_thread_suspend+0x1c0>)
 8012630:	681b      	ldr	r3, [r3, #0]
 8012632:	62fb      	str	r3, [r7, #44]	; 0x2c
 8012634:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012636:	2b00      	cmp	r3, #0
 8012638:	d06d      	beq.n	8012716 <_tx_thread_suspend+0x106>
 801263a:	4b66      	ldr	r3, [pc, #408]	; (80127d4 <_tx_thread_suspend+0x1c4>)
 801263c:	681b      	ldr	r3, [r3, #0]
 801263e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012642:	2b00      	cmp	r3, #0
 8012644:	d067      	beq.n	8012716 <_tx_thread_suspend+0x106>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8012646:	f3ef 8305 	mrs	r3, IPSR
 801264a:	61fb      	str	r3, [r7, #28]
    return(ipsr_value);
 801264c:	69fa      	ldr	r2, [r7, #28]
 801264e:	4b62      	ldr	r3, [pc, #392]	; (80127d8 <_tx_thread_suspend+0x1c8>)
 8012650:	681b      	ldr	r3, [r3, #0]
 8012652:	4313      	orrs	r3, r2
 8012654:	62bb      	str	r3, [r7, #40]	; 0x28
 8012656:	4b5d      	ldr	r3, [pc, #372]	; (80127cc <_tx_thread_suspend+0x1bc>)
 8012658:	681b      	ldr	r3, [r3, #0]
 801265a:	63bb      	str	r3, [r7, #56]	; 0x38
 801265c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801265e:	2b00      	cmp	r3, #0
 8012660:	d10b      	bne.n	801267a <_tx_thread_suspend+0x6a>
 8012662:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012664:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012666:	63fb      	str	r3, [r7, #60]	; 0x3c
 8012668:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801266a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801266c:	041a      	lsls	r2, r3, #16
 801266e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012670:	4313      	orrs	r3, r2
 8012672:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8012676:	63fb      	str	r3, [r7, #60]	; 0x3c
 8012678:	e00e      	b.n	8012698 <_tx_thread_suspend+0x88>
 801267a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801267c:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 8012680:	d205      	bcs.n	801268e <_tx_thread_suspend+0x7e>
 8012682:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012684:	63fb      	str	r3, [r7, #60]	; 0x3c
 8012686:	f04f 33ff 	mov.w	r3, #4294967295
 801268a:	63bb      	str	r3, [r7, #56]	; 0x38
 801268c:	e004      	b.n	8012698 <_tx_thread_suspend+0x88>
 801268e:	f04f 33f0 	mov.w	r3, #4042322160	; 0xf0f0f0f0
 8012692:	63bb      	str	r3, [r7, #56]	; 0x38
 8012694:	2300      	movs	r3, #0
 8012696:	63fb      	str	r3, [r7, #60]	; 0x3c
 8012698:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801269a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801269c:	601a      	str	r2, [r3, #0]
 801269e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80126a0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80126a2:	605a      	str	r2, [r3, #4]
 80126a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80126a6:	2272      	movs	r2, #114	; 0x72
 80126a8:	609a      	str	r2, [r3, #8]
 80126aa:	4b4c      	ldr	r3, [pc, #304]	; (80127dc <_tx_thread_suspend+0x1cc>)
 80126ac:	681a      	ldr	r2, [r3, #0]
 80126ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80126b0:	60da      	str	r2, [r3, #12]
 80126b2:	687a      	ldr	r2, [r7, #4]
 80126b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80126b6:	611a      	str	r2, [r3, #16]
 80126b8:	687b      	ldr	r3, [r7, #4]
 80126ba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80126bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80126be:	615a      	str	r2, [r3, #20]
 80126c0:	f107 020c 	add.w	r2, r7, #12
 80126c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80126c6:	619a      	str	r2, [r3, #24]
 80126c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80126ca:	2200      	movs	r2, #0
 80126cc:	61da      	str	r2, [r3, #28]
 80126ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80126d0:	3320      	adds	r3, #32
 80126d2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80126d4:	4b42      	ldr	r3, [pc, #264]	; (80127e0 <_tx_thread_suspend+0x1d0>)
 80126d6:	681b      	ldr	r3, [r3, #0]
 80126d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80126da:	429a      	cmp	r2, r3
 80126dc:	d314      	bcc.n	8012708 <_tx_thread_suspend+0xf8>
 80126de:	4b41      	ldr	r3, [pc, #260]	; (80127e4 <_tx_thread_suspend+0x1d4>)
 80126e0:	681b      	ldr	r3, [r3, #0]
 80126e2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80126e4:	4a3a      	ldr	r2, [pc, #232]	; (80127d0 <_tx_thread_suspend+0x1c0>)
 80126e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80126e8:	6013      	str	r3, [r2, #0]
 80126ea:	4b3f      	ldr	r3, [pc, #252]	; (80127e8 <_tx_thread_suspend+0x1d8>)
 80126ec:	681b      	ldr	r3, [r3, #0]
 80126ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80126f0:	621a      	str	r2, [r3, #32]
 80126f2:	4b3e      	ldr	r3, [pc, #248]	; (80127ec <_tx_thread_suspend+0x1dc>)
 80126f4:	681b      	ldr	r3, [r3, #0]
 80126f6:	2b00      	cmp	r3, #0
 80126f8:	d00d      	beq.n	8012716 <_tx_thread_suspend+0x106>
 80126fa:	4b3c      	ldr	r3, [pc, #240]	; (80127ec <_tx_thread_suspend+0x1dc>)
 80126fc:	681b      	ldr	r3, [r3, #0]
 80126fe:	4a3a      	ldr	r2, [pc, #232]	; (80127e8 <_tx_thread_suspend+0x1d8>)
 8012700:	6812      	ldr	r2, [r2, #0]
 8012702:	4610      	mov	r0, r2
 8012704:	4798      	blx	r3
 8012706:	e006      	b.n	8012716 <_tx_thread_suspend+0x106>
 8012708:	4a31      	ldr	r2, [pc, #196]	; (80127d0 <_tx_thread_suspend+0x1c0>)
 801270a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801270c:	6013      	str	r3, [r2, #0]
 801270e:	4b36      	ldr	r3, [pc, #216]	; (80127e8 <_tx_thread_suspend+0x1d8>)
 8012710:	681b      	ldr	r3, [r3, #0]
 8012712:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012714:	621a      	str	r2, [r3, #32]

    /* Log this kernel call.  */
    TX_EL_THREAD_SUSPEND_INSERT

    /* Check the specified thread's current status.  */
    if (thread_ptr -> tx_thread_state == TX_READY)
 8012716:	687b      	ldr	r3, [r7, #4]
 8012718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801271a:	2b00      	cmp	r3, #0
 801271c:	d130      	bne.n	8012780 <_tx_thread_suspend+0x170>
    {

        /* Initialize status to success.  */
        status =  TX_SUCCESS;
 801271e:	2300      	movs	r3, #0
 8012720:	60fb      	str	r3, [r7, #12]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8012722:	f3ef 8305 	mrs	r3, IPSR
 8012726:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 8012728:	69ba      	ldr	r2, [r7, #24]

        /* Determine if we are in a thread context.  */
        if (TX_THREAD_GET_SYSTEM_STATE() == ((ULONG) 0))
 801272a:	4b2b      	ldr	r3, [pc, #172]	; (80127d8 <_tx_thread_suspend+0x1c8>)
 801272c:	681b      	ldr	r3, [r3, #0]
 801272e:	4313      	orrs	r3, r2
 8012730:	2b00      	cmp	r3, #0
 8012732:	d109      	bne.n	8012748 <_tx_thread_suspend+0x138>
        {

            /* Yes, we are in a thread context.  */

            /* Determine if the current thread is also the suspending thread.  */
            if (current_thread == thread_ptr)
 8012734:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012736:	687b      	ldr	r3, [r7, #4]
 8012738:	429a      	cmp	r2, r3
 801273a:	d105      	bne.n	8012748 <_tx_thread_suspend+0x138>
            {

                /* Now determine if the preempt disable flag is non-zero.  */
                if (_tx_thread_preempt_disable != ((UINT) 0))
 801273c:	4b2c      	ldr	r3, [pc, #176]	; (80127f0 <_tx_thread_suspend+0x1e0>)
 801273e:	681b      	ldr	r3, [r3, #0]
 8012740:	2b00      	cmp	r3, #0
 8012742:	d001      	beq.n	8012748 <_tx_thread_suspend+0x138>
                {

                    /* Current thread cannot suspend when the preempt disable flag is non-zero,
                       return an error.  */
                    status =  TX_SUSPEND_ERROR;
 8012744:	2314      	movs	r3, #20
 8012746:	60fb      	str	r3, [r7, #12]
                }
            }
        }

        /* Determine if the status is still successful.  */
        if (status == TX_SUCCESS)
 8012748:	68fb      	ldr	r3, [r7, #12]
 801274a:	2b00      	cmp	r3, #0
 801274c:	d132      	bne.n	80127b4 <_tx_thread_suspend+0x1a4>
        {

            /* Set the state to suspended.  */
            thread_ptr -> tx_thread_state =    TX_SUSPENDED;
 801274e:	687b      	ldr	r3, [r7, #4]
 8012750:	2203      	movs	r2, #3
 8012752:	631a      	str	r2, [r3, #48]	; 0x30
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Set the suspending flag. */
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8012754:	687b      	ldr	r3, [r7, #4]
 8012756:	2201      	movs	r2, #1
 8012758:	639a      	str	r2, [r3, #56]	; 0x38

            /* Setup for no timeout period.  */
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 801275a:	687b      	ldr	r3, [r7, #4]
 801275c:	2200      	movs	r2, #0
 801275e:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 8012760:	4b23      	ldr	r3, [pc, #140]	; (80127f0 <_tx_thread_suspend+0x1e0>)
 8012762:	681b      	ldr	r3, [r3, #0]
 8012764:	3301      	adds	r3, #1
 8012766:	4a22      	ldr	r2, [pc, #136]	; (80127f0 <_tx_thread_suspend+0x1e0>)
 8012768:	6013      	str	r3, [r2, #0]
 801276a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801276c:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801276e:	697b      	ldr	r3, [r7, #20]
 8012770:	f383 8810 	msr	PRIMASK, r3
}
 8012774:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Call actual thread suspension routine.  */
            _tx_thread_system_suspend(thread_ptr);
 8012776:	6878      	ldr	r0, [r7, #4]
 8012778:	f000 fa30 	bl	8012bdc <_tx_thread_system_suspend>
            /* Return success.  */
            status =  TX_SUCCESS;
#else

            /* If MISRA is not enabled, return directly.  */
            return(TX_SUCCESS);
 801277c:	2300      	movs	r3, #0
 801277e:	e020      	b.n	80127c2 <_tx_thread_suspend+0x1b2>
#endif
        }
    }
    else if (thread_ptr -> tx_thread_state == TX_TERMINATED)
 8012780:	687b      	ldr	r3, [r7, #4]
 8012782:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012784:	2b02      	cmp	r3, #2
 8012786:	d102      	bne.n	801278e <_tx_thread_suspend+0x17e>
    {

        /* Thread is terminated.  */
        status =  TX_SUSPEND_ERROR;
 8012788:	2314      	movs	r3, #20
 801278a:	60fb      	str	r3, [r7, #12]
 801278c:	e012      	b.n	80127b4 <_tx_thread_suspend+0x1a4>
    }
    else if (thread_ptr -> tx_thread_state == TX_COMPLETED)
 801278e:	687b      	ldr	r3, [r7, #4]
 8012790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012792:	2b01      	cmp	r3, #1
 8012794:	d102      	bne.n	801279c <_tx_thread_suspend+0x18c>
    {

        /* Thread is completed.  */
        status =  TX_SUSPEND_ERROR;
 8012796:	2314      	movs	r3, #20
 8012798:	60fb      	str	r3, [r7, #12]
 801279a:	e00b      	b.n	80127b4 <_tx_thread_suspend+0x1a4>
    }
    else if (thread_ptr -> tx_thread_state == TX_SUSPENDED)
 801279c:	687b      	ldr	r3, [r7, #4]
 801279e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80127a0:	2b03      	cmp	r3, #3
 80127a2:	d102      	bne.n	80127aa <_tx_thread_suspend+0x19a>
    {

        /* Already suspended, just set status to success.  */
        status =  TX_SUCCESS;
 80127a4:	2300      	movs	r3, #0
 80127a6:	60fb      	str	r3, [r7, #12]
 80127a8:	e004      	b.n	80127b4 <_tx_thread_suspend+0x1a4>
    }
    else
    {

        /* Just set the delayed suspension flag.  */
        thread_ptr -> tx_thread_delayed_suspend =  TX_TRUE;
 80127aa:	687b      	ldr	r3, [r7, #4]
 80127ac:	2201      	movs	r2, #1
 80127ae:	635a      	str	r2, [r3, #52]	; 0x34

        /* Set status to success.  */
        status =  TX_SUCCESS;
 80127b0:	2300      	movs	r3, #0
 80127b2:	60fb      	str	r3, [r7, #12]
 80127b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80127b6:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80127b8:	693b      	ldr	r3, [r7, #16]
 80127ba:	f383 8810 	msr	PRIMASK, r3
}
 80127be:	bf00      	nop
    /* Restore interrupts.  */
    TX_RESTORE

    /* Always return success, since this function does not perform error
       checking.  */
    return(status);
 80127c0:	68fb      	ldr	r3, [r7, #12]
    TX_RESTORE

    /* Return completion status.  */
    return(status);
#endif
}
 80127c2:	4618      	mov	r0, r3
 80127c4:	3740      	adds	r7, #64	; 0x40
 80127c6:	46bd      	mov	sp, r7
 80127c8:	bd80      	pop	{r7, pc}
 80127ca:	bf00      	nop
 80127cc:	200021f8 	.word	0x200021f8
 80127d0:	20002814 	.word	0x20002814
 80127d4:	20002818 	.word	0x20002818
 80127d8:	20000010 	.word	0x20000010
 80127dc:	e0001004 	.word	0xe0001004
 80127e0:	20002810 	.word	0x20002810
 80127e4:	2000280c 	.word	0x2000280c
 80127e8:	20002800 	.word	0x20002800
 80127ec:	2000281c 	.word	0x2000281c
 80127f0:	20002290 	.word	0x20002290

080127f4 <_tx_thread_system_preempt_check>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_preempt_check(VOID)
{
 80127f4:	b480      	push	{r7}
 80127f6:	b089      	sub	sp, #36	; 0x24
 80127f8:	af00      	add	r7, sp, #0
TX_THREAD       *current_thread;
TX_THREAD       *thread_ptr;


    /* Combine the system state and preempt disable flags into one for comparison.  */
    TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 80127fa:	4b17      	ldr	r3, [pc, #92]	; (8012858 <_tx_thread_system_preempt_check+0x64>)
 80127fc:	681b      	ldr	r3, [r3, #0]
 80127fe:	61fb      	str	r3, [r7, #28]

    /* Determine if we are in a system state (ISR or Initialization) or internal preemption is disabled.  */
    if (combined_flags == ((ULONG) 0))
 8012800:	69fb      	ldr	r3, [r7, #28]
 8012802:	2b00      	cmp	r3, #0
 8012804:	d121      	bne.n	801284a <_tx_thread_system_preempt_check+0x56>
    {

        /* No, at thread execution level so continue checking for preemption.  */

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(current_thread)
 8012806:	4b15      	ldr	r3, [pc, #84]	; (801285c <_tx_thread_system_preempt_check+0x68>)
 8012808:	681b      	ldr	r3, [r3, #0]
 801280a:	61bb      	str	r3, [r7, #24]

        /* Pickup the next execute pointer.  */
        thread_ptr =  _tx_thread_execute_ptr;
 801280c:	4b14      	ldr	r3, [pc, #80]	; (8012860 <_tx_thread_system_preempt_check+0x6c>)
 801280e:	681b      	ldr	r3, [r3, #0]
 8012810:	617b      	str	r3, [r7, #20]

        /* Determine if preemption should take place.  */
        if (current_thread != thread_ptr)
 8012812:	69ba      	ldr	r2, [r7, #24]
 8012814:	697b      	ldr	r3, [r7, #20]
 8012816:	429a      	cmp	r2, r3
 8012818:	d017      	beq.n	801284a <_tx_thread_system_preempt_check+0x56>
__attribute__( ( always_inline ) ) static inline void _tx_thread_system_return_inline(void)
{
UINT interrupt_save;

    /* Set PendSV to invoke ThreadX scheduler.  */
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 801281a:	4b12      	ldr	r3, [pc, #72]	; (8012864 <_tx_thread_system_preempt_check+0x70>)
 801281c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012820:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8012822:	f3ef 8305 	mrs	r3, IPSR
 8012826:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 8012828:	693b      	ldr	r3, [r7, #16]
    if (_tx_ipsr_get() == 0)
 801282a:	2b00      	cmp	r3, #0
 801282c:	d10c      	bne.n	8012848 <_tx_thread_system_preempt_check+0x54>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801282e:	f3ef 8310 	mrs	r3, PRIMASK
 8012832:	60fb      	str	r3, [r7, #12]
    return(posture);
 8012834:	68fb      	ldr	r3, [r7, #12]
    {
        interrupt_save = __get_interrupt_posture();
 8012836:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("CPSIE  i": : : "memory");
 8012838:	b662      	cpsie	i
}
 801283a:	bf00      	nop
 801283c:	68bb      	ldr	r3, [r7, #8]
 801283e:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8012840:	687b      	ldr	r3, [r7, #4]
 8012842:	f383 8810 	msr	PRIMASK, r3
}
 8012846:	bf00      	nop
#else
        __enable_interrupts();
#endif
        __restore_interrupt(interrupt_save);
    }
}
 8012848:	bf00      	nop

            /* Return to the system so the higher priority thread can be scheduled.  */
            _tx_thread_system_return();
        }
    }
}
 801284a:	bf00      	nop
 801284c:	3724      	adds	r7, #36	; 0x24
 801284e:	46bd      	mov	sp, r7
 8012850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012854:	4770      	bx	lr
 8012856:	bf00      	nop
 8012858:	20002290 	.word	0x20002290
 801285c:	200021f8 	.word	0x200021f8
 8012860:	200021fc 	.word	0x200021fc
 8012864:	e000ed04 	.word	0xe000ed04

08012868 <_tx_thread_system_resume>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_resume(TX_THREAD *thread_ptr)
#ifndef TX_NOT_INTERRUPTABLE
{
 8012868:	b580      	push	{r7, lr}
 801286a:	b09e      	sub	sp, #120	; 0x78
 801286c:	af00      	add	r7, sp, #0
 801286e:	6078      	str	r0, [r7, #4]
TX_THREAD       *current_thread;
ULONG           combined_flags;

#ifdef TX_ENABLE_EVENT_TRACE
TX_TRACE_BUFFER_ENTRY       *entry_ptr;
ULONG                       time_stamp =  ((ULONG) 0);
 8012870:	2300      	movs	r3, #0
 8012872:	677b      	str	r3, [r7, #116]	; 0x74
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8012874:	f3ef 8310 	mrs	r3, PRIMASK
 8012878:	643b      	str	r3, [r7, #64]	; 0x40
    return(posture);
 801287a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    int_posture = __get_interrupt_posture();
 801287c:	63fb      	str	r3, [r7, #60]	; 0x3c
    __asm__ volatile ("CPSID i" : : : "memory");
 801287e:	b672      	cpsid	i
    return(int_posture);
 8012880:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    /* Check this thread's stack.  */
    TX_THREAD_STACK_CHECK(thread_ptr)
#endif

    /* Lockout interrupts while the thread is being resumed.  */
    TX_DISABLE
 8012882:	66bb      	str	r3, [r7, #104]	; 0x68

#ifndef TX_NO_TIMER

    /* Deactivate the timeout timer if necessary.  */
    if (thread_ptr -> tx_thread_timer.tx_timer_internal_list_head != TX_NULL)
 8012884:	687b      	ldr	r3, [r7, #4]
 8012886:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8012888:	2b00      	cmp	r3, #0
 801288a:	d005      	beq.n	8012898 <_tx_thread_system_resume+0x30>
    {

        /* Deactivate the thread's timeout timer.  */
        _tx_timer_system_deactivate(&(thread_ptr -> tx_thread_timer));
 801288c:	687b      	ldr	r3, [r7, #4]
 801288e:	334c      	adds	r3, #76	; 0x4c
 8012890:	4618      	mov	r0, r3
 8012892:	f000 fdaf 	bl	80133f4 <_tx_timer_system_deactivate>
 8012896:	e002      	b.n	801289e <_tx_thread_system_resume+0x36>
    }
    else
    {

        /* Clear the remaining time to ensure timer doesn't get activated.  */
        thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 8012898:	687b      	ldr	r3, [r7, #4]
 801289a:	2200      	movs	r2, #0
 801289c:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

#ifdef TX_ENABLE_EVENT_TRACE

    /* If trace is enabled, save the current event pointer.  */
    entry_ptr =  _tx_trace_buffer_current_ptr;
 801289e:	4b8b      	ldr	r3, [pc, #556]	; (8012acc <_tx_thread_system_resume+0x264>)
 80128a0:	681b      	ldr	r3, [r3, #0]
 80128a2:	667b      	str	r3, [r7, #100]	; 0x64
#endif

    /* Log the thread status change.  */
    TX_TRACE_IN_LINE_INSERT(TX_TRACE_THREAD_RESUME, thread_ptr, thread_ptr -> tx_thread_state, TX_POINTER_TO_ULONG_CONVERT(&execute_ptr), TX_POINTER_TO_ULONG_CONVERT(_tx_thread_execute_ptr), TX_TRACE_INTERNAL_EVENTS)
 80128a4:	4b89      	ldr	r3, [pc, #548]	; (8012acc <_tx_thread_system_resume+0x264>)
 80128a6:	681b      	ldr	r3, [r3, #0]
 80128a8:	663b      	str	r3, [r7, #96]	; 0x60
 80128aa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80128ac:	2b00      	cmp	r3, #0
 80128ae:	d06f      	beq.n	8012990 <_tx_thread_system_resume+0x128>
 80128b0:	4b87      	ldr	r3, [pc, #540]	; (8012ad0 <_tx_thread_system_resume+0x268>)
 80128b2:	681b      	ldr	r3, [r3, #0]
 80128b4:	f003 0301 	and.w	r3, r3, #1
 80128b8:	2b00      	cmp	r3, #0
 80128ba:	d069      	beq.n	8012990 <_tx_thread_system_resume+0x128>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80128bc:	f3ef 8305 	mrs	r3, IPSR
 80128c0:	63bb      	str	r3, [r7, #56]	; 0x38
    return(ipsr_value);
 80128c2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80128c4:	4b83      	ldr	r3, [pc, #524]	; (8012ad4 <_tx_thread_system_resume+0x26c>)
 80128c6:	681b      	ldr	r3, [r3, #0]
 80128c8:	4313      	orrs	r3, r2
 80128ca:	65fb      	str	r3, [r7, #92]	; 0x5c
 80128cc:	4b82      	ldr	r3, [pc, #520]	; (8012ad8 <_tx_thread_system_resume+0x270>)
 80128ce:	681b      	ldr	r3, [r3, #0]
 80128d0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80128d2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80128d4:	2b00      	cmp	r3, #0
 80128d6:	d10b      	bne.n	80128f0 <_tx_thread_system_resume+0x88>
 80128d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80128da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80128dc:	673b      	str	r3, [r7, #112]	; 0x70
 80128de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80128e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80128e2:	041a      	lsls	r2, r3, #16
 80128e4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80128e6:	4313      	orrs	r3, r2
 80128e8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80128ec:	673b      	str	r3, [r7, #112]	; 0x70
 80128ee:	e00e      	b.n	801290e <_tx_thread_system_resume+0xa6>
 80128f0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80128f2:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 80128f6:	d205      	bcs.n	8012904 <_tx_thread_system_resume+0x9c>
 80128f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80128fa:	673b      	str	r3, [r7, #112]	; 0x70
 80128fc:	f04f 33ff 	mov.w	r3, #4294967295
 8012900:	66fb      	str	r3, [r7, #108]	; 0x6c
 8012902:	e004      	b.n	801290e <_tx_thread_system_resume+0xa6>
 8012904:	f04f 33f0 	mov.w	r3, #4042322160	; 0xf0f0f0f0
 8012908:	66fb      	str	r3, [r7, #108]	; 0x6c
 801290a:	2300      	movs	r3, #0
 801290c:	673b      	str	r3, [r7, #112]	; 0x70
 801290e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8012910:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012912:	601a      	str	r2, [r3, #0]
 8012914:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012916:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8012918:	605a      	str	r2, [r3, #4]
 801291a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801291c:	2201      	movs	r2, #1
 801291e:	609a      	str	r2, [r3, #8]
 8012920:	4b6e      	ldr	r3, [pc, #440]	; (8012adc <_tx_thread_system_resume+0x274>)
 8012922:	681a      	ldr	r2, [r3, #0]
 8012924:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012926:	60da      	str	r2, [r3, #12]
 8012928:	687a      	ldr	r2, [r7, #4]
 801292a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801292c:	611a      	str	r2, [r3, #16]
 801292e:	687b      	ldr	r3, [r7, #4]
 8012930:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8012932:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012934:	615a      	str	r2, [r3, #20]
 8012936:	f107 020c 	add.w	r2, r7, #12
 801293a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801293c:	619a      	str	r2, [r3, #24]
 801293e:	4b68      	ldr	r3, [pc, #416]	; (8012ae0 <_tx_thread_system_resume+0x278>)
 8012940:	681b      	ldr	r3, [r3, #0]
 8012942:	461a      	mov	r2, r3
 8012944:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012946:	61da      	str	r2, [r3, #28]
 8012948:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801294a:	3320      	adds	r3, #32
 801294c:	663b      	str	r3, [r7, #96]	; 0x60
 801294e:	4b65      	ldr	r3, [pc, #404]	; (8012ae4 <_tx_thread_system_resume+0x27c>)
 8012950:	681b      	ldr	r3, [r3, #0]
 8012952:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8012954:	429a      	cmp	r2, r3
 8012956:	d314      	bcc.n	8012982 <_tx_thread_system_resume+0x11a>
 8012958:	4b63      	ldr	r3, [pc, #396]	; (8012ae8 <_tx_thread_system_resume+0x280>)
 801295a:	681b      	ldr	r3, [r3, #0]
 801295c:	663b      	str	r3, [r7, #96]	; 0x60
 801295e:	4a5b      	ldr	r2, [pc, #364]	; (8012acc <_tx_thread_system_resume+0x264>)
 8012960:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012962:	6013      	str	r3, [r2, #0]
 8012964:	4b61      	ldr	r3, [pc, #388]	; (8012aec <_tx_thread_system_resume+0x284>)
 8012966:	681b      	ldr	r3, [r3, #0]
 8012968:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801296a:	621a      	str	r2, [r3, #32]
 801296c:	4b60      	ldr	r3, [pc, #384]	; (8012af0 <_tx_thread_system_resume+0x288>)
 801296e:	681b      	ldr	r3, [r3, #0]
 8012970:	2b00      	cmp	r3, #0
 8012972:	d00d      	beq.n	8012990 <_tx_thread_system_resume+0x128>
 8012974:	4b5e      	ldr	r3, [pc, #376]	; (8012af0 <_tx_thread_system_resume+0x288>)
 8012976:	681b      	ldr	r3, [r3, #0]
 8012978:	4a5c      	ldr	r2, [pc, #368]	; (8012aec <_tx_thread_system_resume+0x284>)
 801297a:	6812      	ldr	r2, [r2, #0]
 801297c:	4610      	mov	r0, r2
 801297e:	4798      	blx	r3
 8012980:	e006      	b.n	8012990 <_tx_thread_system_resume+0x128>
 8012982:	4a52      	ldr	r2, [pc, #328]	; (8012acc <_tx_thread_system_resume+0x264>)
 8012984:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012986:	6013      	str	r3, [r2, #0]
 8012988:	4b58      	ldr	r3, [pc, #352]	; (8012aec <_tx_thread_system_resume+0x284>)
 801298a:	681b      	ldr	r3, [r3, #0]
 801298c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801298e:	621a      	str	r2, [r3, #32]
#ifdef TX_ENABLE_EVENT_TRACE

    /* Save the time stamp for later comparison to verify that
       the event hasn't been overwritten by the time we have
       computed the next thread to execute.  */
    if (entry_ptr != TX_NULL)
 8012990:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8012992:	2b00      	cmp	r3, #0
 8012994:	d002      	beq.n	801299c <_tx_thread_system_resume+0x134>
    {

        /* Save time stamp.  */
        time_stamp =  entry_ptr -> tx_trace_buffer_entry_time_stamp;
 8012996:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8012998:	68db      	ldr	r3, [r3, #12]
 801299a:	677b      	str	r3, [r7, #116]	; 0x74
    }
#endif

    /* Decrease the preempt disabled count.  */
    _tx_thread_preempt_disable--;
 801299c:	4b55      	ldr	r3, [pc, #340]	; (8012af4 <_tx_thread_system_resume+0x28c>)
 801299e:	681b      	ldr	r3, [r3, #0]
 80129a0:	3b01      	subs	r3, #1
 80129a2:	4a54      	ldr	r2, [pc, #336]	; (8012af4 <_tx_thread_system_resume+0x28c>)
 80129a4:	6013      	str	r3, [r2, #0]

    /* Determine if the thread is in the process of suspending.  If so, the thread
       control block is already on the linked list so nothing needs to be done.  */
    if (thread_ptr -> tx_thread_suspending == TX_FALSE)
 80129a6:	687b      	ldr	r3, [r7, #4]
 80129a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80129aa:	2b00      	cmp	r3, #0
 80129ac:	f040 80b3 	bne.w	8012b16 <_tx_thread_system_resume+0x2ae>
    {

        /* Thread is not in the process of suspending. Now check to make sure the thread
           has not already been resumed.  */
        if (thread_ptr -> tx_thread_state != TX_READY)
 80129b0:	687b      	ldr	r3, [r7, #4]
 80129b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80129b4:	2b00      	cmp	r3, #0
 80129b6:	f000 80c7 	beq.w	8012b48 <_tx_thread_system_resume+0x2e0>
        {

            /* No, now check to see if the delayed suspension flag is set.  */
            if (thread_ptr -> tx_thread_delayed_suspend == TX_FALSE)
 80129ba:	687b      	ldr	r3, [r7, #4]
 80129bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80129be:	2b00      	cmp	r3, #0
 80129c0:	f040 80a2 	bne.w	8012b08 <_tx_thread_system_resume+0x2a0>
                /* Resume the thread!  */

                /* Make this thread ready.  */

                /* Change the state to ready.  */
                thread_ptr -> tx_thread_state =  TX_READY;
 80129c4:	687b      	ldr	r3, [r7, #4]
 80129c6:	2200      	movs	r2, #0
 80129c8:	631a      	str	r2, [r3, #48]	; 0x30

                /* Pickup priority of thread.  */
                priority =  thread_ptr -> tx_thread_priority;
 80129ca:	687b      	ldr	r3, [r7, #4]
 80129cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80129ce:	65bb      	str	r3, [r7, #88]	; 0x58
                thread_ptr -> tx_thread_performance_resume_count++;
#endif

                /* Determine if there are other threads at this priority that are
                   ready.  */
                head_ptr =  _tx_thread_priority_list[priority];
 80129d0:	4a49      	ldr	r2, [pc, #292]	; (8012af8 <_tx_thread_system_resume+0x290>)
 80129d2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80129d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80129d8:	657b      	str	r3, [r7, #84]	; 0x54
                if (head_ptr == TX_NULL)
 80129da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80129dc:	2b00      	cmp	r3, #0
 80129de:	d164      	bne.n	8012aaa <_tx_thread_system_resume+0x242>
                {

                    /* First thread at this priority ready.  Add to the front of the list.  */
                    _tx_thread_priority_list[priority] =       thread_ptr;
 80129e0:	4945      	ldr	r1, [pc, #276]	; (8012af8 <_tx_thread_system_resume+0x290>)
 80129e2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80129e4:	687a      	ldr	r2, [r7, #4]
 80129e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                    thread_ptr -> tx_thread_ready_next =       thread_ptr;
 80129ea:	687b      	ldr	r3, [r7, #4]
 80129ec:	687a      	ldr	r2, [r7, #4]
 80129ee:	621a      	str	r2, [r3, #32]
                    thread_ptr -> tx_thread_ready_previous =   thread_ptr;
 80129f0:	687b      	ldr	r3, [r7, #4]
 80129f2:	687a      	ldr	r2, [r7, #4]
 80129f4:	625a      	str	r2, [r3, #36]	; 0x24
                    TX_DIV32_BIT_SET(priority, priority_bit)
                    _tx_thread_priority_map_active =  _tx_thread_priority_map_active | priority_bit;
#endif

                    /* Or in the thread's priority bit.  */
                    TX_MOD32_BIT_SET(priority, priority_bit)
 80129f6:	2201      	movs	r2, #1
 80129f8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80129fa:	fa02 f303 	lsl.w	r3, r2, r3
 80129fe:	64fb      	str	r3, [r7, #76]	; 0x4c
                    _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] | priority_bit;
 8012a00:	4b3e      	ldr	r3, [pc, #248]	; (8012afc <_tx_thread_system_resume+0x294>)
 8012a02:	681a      	ldr	r2, [r3, #0]
 8012a04:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012a06:	4313      	orrs	r3, r2
 8012a08:	4a3c      	ldr	r2, [pc, #240]	; (8012afc <_tx_thread_system_resume+0x294>)
 8012a0a:	6013      	str	r3, [r2, #0]

                    /* Determine if this newly ready thread is the highest priority.  */
                    if (priority < _tx_thread_highest_priority)
 8012a0c:	4b3c      	ldr	r3, [pc, #240]	; (8012b00 <_tx_thread_system_resume+0x298>)
 8012a0e:	681b      	ldr	r3, [r3, #0]
 8012a10:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8012a12:	429a      	cmp	r2, r3
 8012a14:	f080 8098 	bcs.w	8012b48 <_tx_thread_system_resume+0x2e0>
                    {

                        /* A new highest priority thread is present. */

                        /* Update the highest priority variable.  */
                        _tx_thread_highest_priority =  priority;
 8012a18:	4a39      	ldr	r2, [pc, #228]	; (8012b00 <_tx_thread_system_resume+0x298>)
 8012a1a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8012a1c:	6013      	str	r3, [r2, #0]

                        /* Pickup the execute pointer. Since it is going to be referenced multiple
                           times, it is placed in a local variable.  */
                        execute_ptr =  _tx_thread_execute_ptr;
 8012a1e:	4b30      	ldr	r3, [pc, #192]	; (8012ae0 <_tx_thread_system_resume+0x278>)
 8012a20:	681b      	ldr	r3, [r3, #0]
 8012a22:	60fb      	str	r3, [r7, #12]

                        /* Determine if no thread is currently executing.  */
                        if (execute_ptr == TX_NULL)
 8012a24:	68fb      	ldr	r3, [r7, #12]
 8012a26:	2b00      	cmp	r3, #0
 8012a28:	d103      	bne.n	8012a32 <_tx_thread_system_resume+0x1ca>
                        {

                            /* Simply setup the execute pointer.  */
                            _tx_thread_execute_ptr =  thread_ptr;
 8012a2a:	4a2d      	ldr	r2, [pc, #180]	; (8012ae0 <_tx_thread_system_resume+0x278>)
 8012a2c:	687b      	ldr	r3, [r7, #4]
 8012a2e:	6013      	str	r3, [r2, #0]
 8012a30:	e08a      	b.n	8012b48 <_tx_thread_system_resume+0x2e0>
                        {

                            /* Another thread has been scheduled for execution.  */

                            /* Check to see if this is a higher priority thread and determine if preemption is allowed.  */
                            if (priority < execute_ptr -> tx_thread_preempt_threshold)
 8012a32:	68fb      	ldr	r3, [r7, #12]
 8012a34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012a36:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8012a38:	429a      	cmp	r2, r3
 8012a3a:	f080 8085 	bcs.w	8012b48 <_tx_thread_system_resume+0x2e0>
                                execute_ptr -> tx_thread_performance_last_preempting_thread =  thread_ptr;

#endif

                                /* Yes, modify the execute thread pointer.  */
                                _tx_thread_execute_ptr =  thread_ptr;
 8012a3e:	4a28      	ldr	r2, [pc, #160]	; (8012ae0 <_tx_thread_system_resume+0x278>)
 8012a40:	687b      	ldr	r3, [r7, #4]
 8012a42:	6013      	str	r3, [r2, #0]
#ifdef TX_ENABLE_EVENT_TRACE

                                /* Check that the event time stamp is unchanged.  A different
                                   timestamp means that a later event wrote over the thread
                                   resume event. In that case, do nothing here.  */
                                if (entry_ptr != TX_NULL)
 8012a44:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8012a46:	2b00      	cmp	r3, #0
 8012a48:	d009      	beq.n	8012a5e <_tx_thread_system_resume+0x1f6>
                                {

                                    /* Is the timestamp the same?  */
                                    if (time_stamp == entry_ptr -> tx_trace_buffer_entry_time_stamp)
 8012a4a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8012a4c:	68db      	ldr	r3, [r3, #12]
 8012a4e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8012a50:	429a      	cmp	r2, r3
 8012a52:	d104      	bne.n	8012a5e <_tx_thread_system_resume+0x1f6>
                                    {

                                        /* Timestamp is the same, set the "next thread pointer" to NULL. This can
                                           be used by the trace analysis tool to show idle system conditions.  */
                                        entry_ptr -> tx_trace_buffer_entry_information_field_4 =  TX_POINTER_TO_ULONG_CONVERT(_tx_thread_execute_ptr);
 8012a54:	4b22      	ldr	r3, [pc, #136]	; (8012ae0 <_tx_thread_system_resume+0x278>)
 8012a56:	681b      	ldr	r3, [r3, #0]
 8012a58:	461a      	mov	r2, r3
 8012a5a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8012a5c:	61da      	str	r2, [r3, #28]
 8012a5e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8012a60:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8012a62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012a64:	f383 8810 	msr	PRIMASK, r3
}
 8012a68:	bf00      	nop
                                TX_THREAD_STACK_CHECK(thread_ptr)
#endif

                                /* Now determine if preemption should take place. This is only possible if the current thread pointer is
                                   not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
                                TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8012a6a:	4b22      	ldr	r3, [pc, #136]	; (8012af4 <_tx_thread_system_resume+0x28c>)
 8012a6c:	681b      	ldr	r3, [r3, #0]
 8012a6e:	64bb      	str	r3, [r7, #72]	; 0x48
                                if (combined_flags == ((ULONG) 0))
 8012a70:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012a72:	2b00      	cmp	r3, #0
 8012a74:	f040 80a1 	bne.w	8012bba <_tx_thread_system_resume+0x352>
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8012a78:	4b22      	ldr	r3, [pc, #136]	; (8012b04 <_tx_thread_system_resume+0x29c>)
 8012a7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012a7e:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8012a80:	f3ef 8305 	mrs	r3, IPSR
 8012a84:	633b      	str	r3, [r7, #48]	; 0x30
    return(ipsr_value);
 8012a86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    if (_tx_ipsr_get() == 0)
 8012a88:	2b00      	cmp	r3, #0
 8012a8a:	f040 8098 	bne.w	8012bbe <_tx_thread_system_resume+0x356>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8012a8e:	f3ef 8310 	mrs	r3, PRIMASK
 8012a92:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 8012a94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
        interrupt_save = __get_interrupt_posture();
 8012a96:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSIE  i": : : "memory");
 8012a98:	b662      	cpsie	i
}
 8012a9a:	bf00      	nop
 8012a9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012a9e:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8012aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012aa2:	f383 8810 	msr	PRIMASK, r3
}
 8012aa6:	bf00      	nop
}
 8012aa8:	e089      	b.n	8012bbe <_tx_thread_system_resume+0x356>
                {

                    /* No, there are other threads at this priority already ready.  */

                    /* Just add this thread to the priority list.  */
                    tail_ptr =                                 head_ptr -> tx_thread_ready_previous;
 8012aaa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012aac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012aae:	653b      	str	r3, [r7, #80]	; 0x50
                    tail_ptr -> tx_thread_ready_next =         thread_ptr;
 8012ab0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012ab2:	687a      	ldr	r2, [r7, #4]
 8012ab4:	621a      	str	r2, [r3, #32]
                    head_ptr -> tx_thread_ready_previous =     thread_ptr;
 8012ab6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012ab8:	687a      	ldr	r2, [r7, #4]
 8012aba:	625a      	str	r2, [r3, #36]	; 0x24
                    thread_ptr -> tx_thread_ready_previous =   tail_ptr;
 8012abc:	687b      	ldr	r3, [r7, #4]
 8012abe:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8012ac0:	625a      	str	r2, [r3, #36]	; 0x24
                    thread_ptr -> tx_thread_ready_next =       head_ptr;
 8012ac2:	687b      	ldr	r3, [r7, #4]
 8012ac4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8012ac6:	621a      	str	r2, [r3, #32]
 8012ac8:	e03e      	b.n	8012b48 <_tx_thread_system_resume+0x2e0>
 8012aca:	bf00      	nop
 8012acc:	20002814 	.word	0x20002814
 8012ad0:	20002818 	.word	0x20002818
 8012ad4:	20000010 	.word	0x20000010
 8012ad8:	200021f8 	.word	0x200021f8
 8012adc:	e0001004 	.word	0xe0001004
 8012ae0:	200021fc 	.word	0x200021fc
 8012ae4:	20002810 	.word	0x20002810
 8012ae8:	2000280c 	.word	0x2000280c
 8012aec:	20002800 	.word	0x20002800
 8012af0:	2000281c 	.word	0x2000281c
 8012af4:	20002290 	.word	0x20002290
 8012af8:	20002210 	.word	0x20002210
 8012afc:	20002208 	.word	0x20002208
 8012b00:	2000220c 	.word	0x2000220c
 8012b04:	e000ed04 	.word	0xe000ed04
            /* Else, delayed suspend flag was set.  */
            else
            {

                /* Clear the delayed suspend flag and change the state.  */
                thread_ptr -> tx_thread_delayed_suspend =  TX_FALSE;
 8012b08:	687b      	ldr	r3, [r7, #4]
 8012b0a:	2200      	movs	r2, #0
 8012b0c:	635a      	str	r2, [r3, #52]	; 0x34
                thread_ptr -> tx_thread_state =            TX_SUSPENDED;
 8012b0e:	687b      	ldr	r3, [r7, #4]
 8012b10:	2203      	movs	r2, #3
 8012b12:	631a      	str	r2, [r3, #48]	; 0x30
 8012b14:	e018      	b.n	8012b48 <_tx_thread_system_resume+0x2e0>
        /* A resumption occurred in the middle of a previous thread suspension.  */

        /* Make sure the type of suspension under way is not a terminate or
           thread completion.  In either of these cases, do not void the
           interrupted suspension processing.  */
        if (thread_ptr -> tx_thread_state != TX_COMPLETED)
 8012b16:	687b      	ldr	r3, [r7, #4]
 8012b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012b1a:	2b01      	cmp	r3, #1
 8012b1c:	d014      	beq.n	8012b48 <_tx_thread_system_resume+0x2e0>
        {

            /* Make sure the thread isn't terminated.  */
            if (thread_ptr -> tx_thread_state != TX_TERMINATED)
 8012b1e:	687b      	ldr	r3, [r7, #4]
 8012b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012b22:	2b02      	cmp	r3, #2
 8012b24:	d010      	beq.n	8012b48 <_tx_thread_system_resume+0x2e0>
            {

                /* No, now check to see if the delayed suspension flag is set.  */
                if (thread_ptr -> tx_thread_delayed_suspend == TX_FALSE)
 8012b26:	687b      	ldr	r3, [r7, #4]
 8012b28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012b2a:	2b00      	cmp	r3, #0
 8012b2c:	d106      	bne.n	8012b3c <_tx_thread_system_resume+0x2d4>
                {

                    /* Clear the suspending flag.  */
                    thread_ptr -> tx_thread_suspending =   TX_FALSE;
 8012b2e:	687b      	ldr	r3, [r7, #4]
 8012b30:	2200      	movs	r2, #0
 8012b32:	639a      	str	r2, [r3, #56]	; 0x38

                    /* Restore the state to ready.  */
                    thread_ptr -> tx_thread_state =        TX_READY;
 8012b34:	687b      	ldr	r3, [r7, #4]
 8012b36:	2200      	movs	r2, #0
 8012b38:	631a      	str	r2, [r3, #48]	; 0x30
 8012b3a:	e005      	b.n	8012b48 <_tx_thread_system_resume+0x2e0>
                }
                else
                {

                    /* Clear the delayed suspend flag and change the state.  */
                    thread_ptr -> tx_thread_delayed_suspend =  TX_FALSE;
 8012b3c:	687b      	ldr	r3, [r7, #4]
 8012b3e:	2200      	movs	r2, #0
 8012b40:	635a      	str	r2, [r3, #52]	; 0x34
                    thread_ptr -> tx_thread_state =            TX_SUSPENDED;
 8012b42:	687b      	ldr	r3, [r7, #4]
 8012b44:	2203      	movs	r2, #3
 8012b46:	631a      	str	r2, [r3, #48]	; 0x30
#ifdef TX_ENABLE_EVENT_TRACE

    /* Check that the event time stamp is unchanged.  A different
       timestamp means that a later event wrote over the thread
       resume event. In that case, do nothing here.  */
    if (entry_ptr != TX_NULL)
 8012b48:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8012b4a:	2b00      	cmp	r3, #0
 8012b4c:	d009      	beq.n	8012b62 <_tx_thread_system_resume+0x2fa>
    {

        /* Is the timestamp the same?  */
        if (time_stamp == entry_ptr -> tx_trace_buffer_entry_time_stamp)
 8012b4e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8012b50:	68db      	ldr	r3, [r3, #12]
 8012b52:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8012b54:	429a      	cmp	r2, r3
 8012b56:	d104      	bne.n	8012b62 <_tx_thread_system_resume+0x2fa>
            /* Timestamp is the same, set the "next thread pointer" to NULL. This can
               be used by the trace analysis tool to show idle system conditions.  */
#ifdef TX_MISRA_ENABLE
            entry_ptr -> tx_trace_buffer_entry_info_4 =  TX_POINTER_TO_ULONG_CONVERT(_tx_thread_execute_ptr);
#else
            entry_ptr -> tx_trace_buffer_entry_information_field_4 =  TX_POINTER_TO_ULONG_CONVERT(_tx_thread_execute_ptr);
 8012b58:	4b1c      	ldr	r3, [pc, #112]	; (8012bcc <_tx_thread_system_resume+0x364>)
 8012b5a:	681b      	ldr	r3, [r3, #0]
 8012b5c:	461a      	mov	r2, r3
 8012b5e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8012b60:	61da      	str	r2, [r3, #28]
        }
    }
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 8012b62:	4b1b      	ldr	r3, [pc, #108]	; (8012bd0 <_tx_thread_system_resume+0x368>)
 8012b64:	681b      	ldr	r3, [r3, #0]
 8012b66:	647b      	str	r3, [r7, #68]	; 0x44
 8012b68:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8012b6a:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8012b6c:	6a3b      	ldr	r3, [r7, #32]
 8012b6e:	f383 8810 	msr	PRIMASK, r3
}
 8012b72:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Determine if a preemption condition is present.  */
    if (current_thread != _tx_thread_execute_ptr)
 8012b74:	4b15      	ldr	r3, [pc, #84]	; (8012bcc <_tx_thread_system_resume+0x364>)
 8012b76:	681b      	ldr	r3, [r3, #0]
 8012b78:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8012b7a:	429a      	cmp	r2, r3
 8012b7c:	d022      	beq.n	8012bc4 <_tx_thread_system_resume+0x35c>
        TX_THREAD_STACK_CHECK(thread_ptr)
#endif

        /* Now determine if preemption should take place. This is only possible if the current thread pointer is
           not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
        TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8012b7e:	4b15      	ldr	r3, [pc, #84]	; (8012bd4 <_tx_thread_system_resume+0x36c>)
 8012b80:	681b      	ldr	r3, [r3, #0]
 8012b82:	64bb      	str	r3, [r7, #72]	; 0x48
        if (combined_flags == ((ULONG) 0))
 8012b84:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012b86:	2b00      	cmp	r3, #0
 8012b88:	d11c      	bne.n	8012bc4 <_tx_thread_system_resume+0x35c>
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8012b8a:	4b13      	ldr	r3, [pc, #76]	; (8012bd8 <_tx_thread_system_resume+0x370>)
 8012b8c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012b90:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8012b92:	f3ef 8305 	mrs	r3, IPSR
 8012b96:	61fb      	str	r3, [r7, #28]
    return(ipsr_value);
 8012b98:	69fb      	ldr	r3, [r7, #28]
    if (_tx_ipsr_get() == 0)
 8012b9a:	2b00      	cmp	r3, #0
 8012b9c:	d111      	bne.n	8012bc2 <_tx_thread_system_resume+0x35a>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8012b9e:	f3ef 8310 	mrs	r3, PRIMASK
 8012ba2:	61bb      	str	r3, [r7, #24]
    return(posture);
 8012ba4:	69bb      	ldr	r3, [r7, #24]
        interrupt_save = __get_interrupt_posture();
 8012ba6:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSIE  i": : : "memory");
 8012ba8:	b662      	cpsie	i
}
 8012baa:	bf00      	nop
 8012bac:	697b      	ldr	r3, [r7, #20]
 8012bae:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8012bb0:	693b      	ldr	r3, [r7, #16]
 8012bb2:	f383 8810 	msr	PRIMASK, r3
}
 8012bb6:	bf00      	nop
}
 8012bb8:	e003      	b.n	8012bc2 <_tx_thread_system_resume+0x35a>
                                return;
 8012bba:	bf00      	nop
 8012bbc:	e002      	b.n	8012bc4 <_tx_thread_system_resume+0x35c>
 8012bbe:	bf00      	nop
 8012bc0:	e000      	b.n	8012bc4 <_tx_thread_system_resume+0x35c>
 8012bc2:	bf00      	nop

            /* Preemption is needed - return to the system!  */
            _tx_thread_system_return();
        }
    }
}
 8012bc4:	3778      	adds	r7, #120	; 0x78
 8012bc6:	46bd      	mov	sp, r7
 8012bc8:	bd80      	pop	{r7, pc}
 8012bca:	bf00      	nop
 8012bcc:	200021fc 	.word	0x200021fc
 8012bd0:	200021f8 	.word	0x200021f8
 8012bd4:	20002290 	.word	0x20002290
 8012bd8:	e000ed04 	.word	0xe000ed04

08012bdc <_tx_thread_system_suspend>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_suspend(TX_THREAD *thread_ptr)
#ifndef TX_NOT_INTERRUPTABLE
{
 8012bdc:	b580      	push	{r7, lr}
 8012bde:	b0a4      	sub	sp, #144	; 0x90
 8012be0:	af00      	add	r7, sp, #0
 8012be2:	6078      	str	r0, [r7, #4]
ULONG           timeout;
#endif

#ifdef TX_ENABLE_EVENT_TRACE
TX_TRACE_BUFFER_ENTRY       *entry_ptr;
ULONG                       time_stamp =  ((ULONG) 0);
 8012be4:	2300      	movs	r3, #0
 8012be6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 8012bea:	4b98      	ldr	r3, [pc, #608]	; (8012e4c <_tx_thread_system_suspend+0x270>)
 8012bec:	681b      	ldr	r3, [r3, #0]
 8012bee:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8012bf2:	f3ef 8310 	mrs	r3, PRIMASK
 8012bf6:	653b      	str	r3, [r7, #80]	; 0x50
    return(posture);
 8012bf8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    int_posture = __get_interrupt_posture();
 8012bfa:	64fb      	str	r3, [r7, #76]	; 0x4c
    __asm__ volatile ("CPSID i" : : : "memory");
 8012bfc:	b672      	cpsid	i
    return(int_posture);
 8012bfe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    /* Check this thread's stack.  */
    TX_THREAD_STACK_CHECK(thread_ptr)
#endif

    /* Lockout interrupts while the thread is being suspended.  */
    TX_DISABLE
 8012c00:	67fb      	str	r3, [r7, #124]	; 0x7c

#ifndef TX_NO_TIMER

    /* Is the current thread suspending?  */
    if (thread_ptr == current_thread)
 8012c02:	687a      	ldr	r2, [r7, #4]
 8012c04:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8012c08:	429a      	cmp	r2, r3
 8012c0a:	d112      	bne.n	8012c32 <_tx_thread_system_suspend+0x56>
    {

        /* Pickup the wait option.  */
        timeout =  thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks;
 8012c0c:	687b      	ldr	r3, [r7, #4]
 8012c0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012c10:	67bb      	str	r3, [r7, #120]	; 0x78

        /* Determine if an activation is needed.  */
        if (timeout != TX_NO_WAIT)
 8012c12:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8012c14:	2b00      	cmp	r3, #0
 8012c16:	d008      	beq.n	8012c2a <_tx_thread_system_suspend+0x4e>
        {

            /* Make sure the suspension is not a wait-forever.  */
            if (timeout != TX_WAIT_FOREVER)
 8012c18:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8012c1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012c1e:	d004      	beq.n	8012c2a <_tx_thread_system_suspend+0x4e>
            {

                /* Activate the thread timer with the timeout value setup in the caller.  */
                _tx_timer_system_activate(&(thread_ptr -> tx_thread_timer));
 8012c20:	687b      	ldr	r3, [r7, #4]
 8012c22:	334c      	adds	r3, #76	; 0x4c
 8012c24:	4618      	mov	r0, r3
 8012c26:	f000 fb83 	bl	8013330 <_tx_timer_system_activate>
            }
        }

        /* Yes, reset time slice for current thread.  */
        _tx_timer_time_slice =  thread_ptr -> tx_thread_new_time_slice;
 8012c2a:	687b      	ldr	r3, [r7, #4]
 8012c2c:	69db      	ldr	r3, [r3, #28]
 8012c2e:	4a88      	ldr	r2, [pc, #544]	; (8012e50 <_tx_thread_system_suspend+0x274>)
 8012c30:	6013      	str	r3, [r2, #0]
    }
#endif

    /* Decrease the preempt disabled count.  */
    _tx_thread_preempt_disable--;
 8012c32:	4b88      	ldr	r3, [pc, #544]	; (8012e54 <_tx_thread_system_suspend+0x278>)
 8012c34:	681b      	ldr	r3, [r3, #0]
 8012c36:	3b01      	subs	r3, #1
 8012c38:	4a86      	ldr	r2, [pc, #536]	; (8012e54 <_tx_thread_system_suspend+0x278>)
 8012c3a:	6013      	str	r3, [r2, #0]
    _tx_thread_performance_suspend_count++;
#endif

    /* Check to make sure the thread suspending flag is still set.  If not, it
       has already been resumed.  */
    if (thread_ptr -> tx_thread_suspending == TX_TRUE)
 8012c3c:	687b      	ldr	r3, [r7, #4]
 8012c3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012c40:	2b01      	cmp	r3, #1
 8012c42:	f040 817d 	bne.w	8012f40 <_tx_thread_system_suspend+0x364>
        TX_EL_THREAD_STATUS_CHANGE_INSERT(thread_ptr, thread_ptr -> tx_thread_state)

#ifdef TX_ENABLE_EVENT_TRACE

        /* If trace is enabled, save the current event pointer.  */
        entry_ptr =  _tx_trace_buffer_current_ptr;
 8012c46:	4b84      	ldr	r3, [pc, #528]	; (8012e58 <_tx_thread_system_suspend+0x27c>)
 8012c48:	681b      	ldr	r3, [r3, #0]
 8012c4a:	677b      	str	r3, [r7, #116]	; 0x74
#endif

        /* Log the thread status change.  */
        TX_TRACE_IN_LINE_INSERT(TX_TRACE_THREAD_SUSPEND, thread_ptr, thread_ptr -> tx_thread_state, TX_POINTER_TO_ULONG_CONVERT(&priority), TX_POINTER_TO_ULONG_CONVERT(_tx_thread_execute_ptr), TX_TRACE_INTERNAL_EVENTS)
 8012c4c:	4b82      	ldr	r3, [pc, #520]	; (8012e58 <_tx_thread_system_suspend+0x27c>)
 8012c4e:	681b      	ldr	r3, [r3, #0]
 8012c50:	673b      	str	r3, [r7, #112]	; 0x70
 8012c52:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8012c54:	2b00      	cmp	r3, #0
 8012c56:	d07c      	beq.n	8012d52 <_tx_thread_system_suspend+0x176>
 8012c58:	4b80      	ldr	r3, [pc, #512]	; (8012e5c <_tx_thread_system_suspend+0x280>)
 8012c5a:	681b      	ldr	r3, [r3, #0]
 8012c5c:	f003 0301 	and.w	r3, r3, #1
 8012c60:	2b00      	cmp	r3, #0
 8012c62:	d076      	beq.n	8012d52 <_tx_thread_system_suspend+0x176>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8012c64:	f3ef 8305 	mrs	r3, IPSR
 8012c68:	64bb      	str	r3, [r7, #72]	; 0x48
    return(ipsr_value);
 8012c6a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8012c6c:	4b7c      	ldr	r3, [pc, #496]	; (8012e60 <_tx_thread_system_suspend+0x284>)
 8012c6e:	681b      	ldr	r3, [r3, #0]
 8012c70:	4313      	orrs	r3, r2
 8012c72:	66fb      	str	r3, [r7, #108]	; 0x6c
 8012c74:	4b75      	ldr	r3, [pc, #468]	; (8012e4c <_tx_thread_system_suspend+0x270>)
 8012c76:	681b      	ldr	r3, [r3, #0]
 8012c78:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8012c7c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8012c7e:	2b00      	cmp	r3, #0
 8012c80:	d110      	bne.n	8012ca4 <_tx_thread_system_suspend+0xc8>
 8012c82:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8012c86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012c88:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8012c8c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8012c90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012c92:	041a      	lsls	r2, r3, #16
 8012c94:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8012c98:	4313      	orrs	r3, r2
 8012c9a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8012c9e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8012ca2:	e013      	b.n	8012ccc <_tx_thread_system_suspend+0xf0>
 8012ca4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8012ca6:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 8012caa:	d208      	bcs.n	8012cbe <_tx_thread_system_suspend+0xe2>
 8012cac:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8012cb0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8012cb4:	f04f 33ff 	mov.w	r3, #4294967295
 8012cb8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8012cbc:	e006      	b.n	8012ccc <_tx_thread_system_suspend+0xf0>
 8012cbe:	f04f 33f0 	mov.w	r3, #4042322160	; 0xf0f0f0f0
 8012cc2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8012cc6:	2300      	movs	r3, #0
 8012cc8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8012ccc:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8012cd0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8012cd2:	601a      	str	r2, [r3, #0]
 8012cd4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8012cd6:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8012cda:	605a      	str	r2, [r3, #4]
 8012cdc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8012cde:	2202      	movs	r2, #2
 8012ce0:	609a      	str	r2, [r3, #8]
 8012ce2:	4b60      	ldr	r3, [pc, #384]	; (8012e64 <_tx_thread_system_suspend+0x288>)
 8012ce4:	681a      	ldr	r2, [r3, #0]
 8012ce6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8012ce8:	60da      	str	r2, [r3, #12]
 8012cea:	687a      	ldr	r2, [r7, #4]
 8012cec:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8012cee:	611a      	str	r2, [r3, #16]
 8012cf0:	687b      	ldr	r3, [r7, #4]
 8012cf2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8012cf4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8012cf6:	615a      	str	r2, [r3, #20]
 8012cf8:	f107 0208 	add.w	r2, r7, #8
 8012cfc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8012cfe:	619a      	str	r2, [r3, #24]
 8012d00:	4b59      	ldr	r3, [pc, #356]	; (8012e68 <_tx_thread_system_suspend+0x28c>)
 8012d02:	681b      	ldr	r3, [r3, #0]
 8012d04:	461a      	mov	r2, r3
 8012d06:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8012d08:	61da      	str	r2, [r3, #28]
 8012d0a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8012d0c:	3320      	adds	r3, #32
 8012d0e:	673b      	str	r3, [r7, #112]	; 0x70
 8012d10:	4b56      	ldr	r3, [pc, #344]	; (8012e6c <_tx_thread_system_suspend+0x290>)
 8012d12:	681b      	ldr	r3, [r3, #0]
 8012d14:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8012d16:	429a      	cmp	r2, r3
 8012d18:	d314      	bcc.n	8012d44 <_tx_thread_system_suspend+0x168>
 8012d1a:	4b55      	ldr	r3, [pc, #340]	; (8012e70 <_tx_thread_system_suspend+0x294>)
 8012d1c:	681b      	ldr	r3, [r3, #0]
 8012d1e:	673b      	str	r3, [r7, #112]	; 0x70
 8012d20:	4a4d      	ldr	r2, [pc, #308]	; (8012e58 <_tx_thread_system_suspend+0x27c>)
 8012d22:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8012d24:	6013      	str	r3, [r2, #0]
 8012d26:	4b53      	ldr	r3, [pc, #332]	; (8012e74 <_tx_thread_system_suspend+0x298>)
 8012d28:	681b      	ldr	r3, [r3, #0]
 8012d2a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8012d2c:	621a      	str	r2, [r3, #32]
 8012d2e:	4b52      	ldr	r3, [pc, #328]	; (8012e78 <_tx_thread_system_suspend+0x29c>)
 8012d30:	681b      	ldr	r3, [r3, #0]
 8012d32:	2b00      	cmp	r3, #0
 8012d34:	d00d      	beq.n	8012d52 <_tx_thread_system_suspend+0x176>
 8012d36:	4b50      	ldr	r3, [pc, #320]	; (8012e78 <_tx_thread_system_suspend+0x29c>)
 8012d38:	681b      	ldr	r3, [r3, #0]
 8012d3a:	4a4e      	ldr	r2, [pc, #312]	; (8012e74 <_tx_thread_system_suspend+0x298>)
 8012d3c:	6812      	ldr	r2, [r2, #0]
 8012d3e:	4610      	mov	r0, r2
 8012d40:	4798      	blx	r3
 8012d42:	e006      	b.n	8012d52 <_tx_thread_system_suspend+0x176>
 8012d44:	4a44      	ldr	r2, [pc, #272]	; (8012e58 <_tx_thread_system_suspend+0x27c>)
 8012d46:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8012d48:	6013      	str	r3, [r2, #0]
 8012d4a:	4b4a      	ldr	r3, [pc, #296]	; (8012e74 <_tx_thread_system_suspend+0x298>)
 8012d4c:	681b      	ldr	r3, [r3, #0]
 8012d4e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8012d50:	621a      	str	r2, [r3, #32]
#ifdef TX_ENABLE_EVENT_TRACE

        /* Save the time stamp for later comparison to verify that
           the event hasn't been overwritten by the time we have
           computed the next thread to execute.  */
        if (entry_ptr != TX_NULL)
 8012d52:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8012d54:	2b00      	cmp	r3, #0
 8012d56:	d003      	beq.n	8012d60 <_tx_thread_system_suspend+0x184>
        {

            /* Save time stamp.  */
            time_stamp =  entry_ptr -> tx_trace_buffer_entry_time_stamp;
 8012d58:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8012d5a:	68db      	ldr	r3, [r3, #12]
 8012d5c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
        }
#endif

        /* Actually suspend this thread.  But first, clear the suspending flag.  */
        thread_ptr -> tx_thread_suspending =  TX_FALSE;
 8012d60:	687b      	ldr	r3, [r7, #4]
 8012d62:	2200      	movs	r2, #0
 8012d64:	639a      	str	r2, [r3, #56]	; 0x38

        /* Pickup priority of thread.  */
        priority =  thread_ptr -> tx_thread_priority;
 8012d66:	687b      	ldr	r3, [r7, #4]
 8012d68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012d6a:	60bb      	str	r3, [r7, #8]

        /* Pickup the next ready thread pointer.  */
        ready_next =      thread_ptr -> tx_thread_ready_next;
 8012d6c:	687b      	ldr	r3, [r7, #4]
 8012d6e:	6a1b      	ldr	r3, [r3, #32]
 8012d70:	66bb      	str	r3, [r7, #104]	; 0x68

        /* Determine if there are other threads at this priority that are
           ready.  */
        if (ready_next != thread_ptr)
 8012d72:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8012d74:	687b      	ldr	r3, [r7, #4]
 8012d76:	429a      	cmp	r2, r3
 8012d78:	d016      	beq.n	8012da8 <_tx_thread_system_suspend+0x1cc>
        {

            /* Yes, there are other threads at this priority ready.  */

            /* Pickup the previous ready thread pointer.  */
            ready_previous =  thread_ptr -> tx_thread_ready_previous;
 8012d7a:	687b      	ldr	r3, [r7, #4]
 8012d7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012d7e:	657b      	str	r3, [r7, #84]	; 0x54

            /* Just remove this thread from the priority list.  */
            ready_next -> tx_thread_ready_previous =    ready_previous;
 8012d80:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8012d82:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8012d84:	625a      	str	r2, [r3, #36]	; 0x24
            ready_previous -> tx_thread_ready_next =    ready_next;
 8012d86:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012d88:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8012d8a:	621a      	str	r2, [r3, #32]

            /* Determine if this is the head of the priority list.  */
            if (_tx_thread_priority_list[priority] == thread_ptr)
 8012d8c:	68bb      	ldr	r3, [r7, #8]
 8012d8e:	4a3b      	ldr	r2, [pc, #236]	; (8012e7c <_tx_thread_system_suspend+0x2a0>)
 8012d90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012d94:	687a      	ldr	r2, [r7, #4]
 8012d96:	429a      	cmp	r2, r3
 8012d98:	f040 8085 	bne.w	8012ea6 <_tx_thread_system_suspend+0x2ca>
            {

                /* Update the head pointer of this priority list.  */
                _tx_thread_priority_list[priority] =  ready_next;
 8012d9c:	68bb      	ldr	r3, [r7, #8]
 8012d9e:	4937      	ldr	r1, [pc, #220]	; (8012e7c <_tx_thread_system_suspend+0x2a0>)
 8012da0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8012da2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8012da6:	e07e      	b.n	8012ea6 <_tx_thread_system_suspend+0x2ca>
        else
        {

            /* This is the only thread at this priority ready to run.  Set the head
               pointer to NULL.  */
            _tx_thread_priority_list[priority] =    TX_NULL;
 8012da8:	68bb      	ldr	r3, [r7, #8]
 8012daa:	4a34      	ldr	r2, [pc, #208]	; (8012e7c <_tx_thread_system_suspend+0x2a0>)
 8012dac:	2100      	movs	r1, #0
 8012dae:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            /* Calculate the index into the bit map array.  */
            map_index =  priority/((UINT) 32);
#endif

            /* Clear this priority bit in the ready priority bit map.  */
            TX_MOD32_BIT_SET(priority, priority_bit)
 8012db2:	68bb      	ldr	r3, [r7, #8]
 8012db4:	2201      	movs	r2, #1
 8012db6:	fa02 f303 	lsl.w	r3, r2, r3
 8012dba:	667b      	str	r3, [r7, #100]	; 0x64
            _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] & (~(priority_bit));
 8012dbc:	4b30      	ldr	r3, [pc, #192]	; (8012e80 <_tx_thread_system_suspend+0x2a4>)
 8012dbe:	681a      	ldr	r2, [r3, #0]
 8012dc0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8012dc2:	43db      	mvns	r3, r3
 8012dc4:	4013      	ands	r3, r2
 8012dc6:	4a2e      	ldr	r2, [pc, #184]	; (8012e80 <_tx_thread_system_suspend+0x2a4>)
 8012dc8:	6013      	str	r3, [r2, #0]
            /* Calculate the base priority as well.  */
            base_priority =  map_index * ((UINT) 32);
#else

            /* Setup the base priority to zero.  */
            base_priority =   ((UINT) 0);
 8012dca:	2300      	movs	r3, #0
 8012dcc:	663b      	str	r3, [r7, #96]	; 0x60
#endif

            /* Setup working variable for the priority map.  */
            priority_map =    _tx_thread_priority_maps[MAP_INDEX];
 8012dce:	4b2c      	ldr	r3, [pc, #176]	; (8012e80 <_tx_thread_system_suspend+0x2a4>)
 8012dd0:	681b      	ldr	r3, [r3, #0]
 8012dd2:	65fb      	str	r3, [r7, #92]	; 0x5c

            /* Make a quick check for no other threads ready for execution.  */
            if (priority_map == ((ULONG) 0))
 8012dd4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8012dd6:	2b00      	cmp	r3, #0
 8012dd8:	d158      	bne.n	8012e8c <_tx_thread_system_suspend+0x2b0>
            {

                /* Nothing else is ready.  Set highest priority and execute thread
                   accordingly.  */
                _tx_thread_highest_priority =  ((UINT) TX_MAX_PRIORITIES);
 8012dda:	4b2a      	ldr	r3, [pc, #168]	; (8012e84 <_tx_thread_system_suspend+0x2a8>)
 8012ddc:	2220      	movs	r2, #32
 8012dde:	601a      	str	r2, [r3, #0]
                _tx_thread_execute_ptr =       TX_NULL;
 8012de0:	4b21      	ldr	r3, [pc, #132]	; (8012e68 <_tx_thread_system_suspend+0x28c>)
 8012de2:	2200      	movs	r2, #0
 8012de4:	601a      	str	r2, [r3, #0]
#ifdef TX_ENABLE_EVENT_TRACE

                /* Check that the event time stamp is unchanged.  A different
                   timestamp means that a later event wrote over the thread
                   suspend event. In that case, do nothing here.  */
                if (entry_ptr != TX_NULL)
 8012de6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8012de8:	2b00      	cmp	r3, #0
 8012dea:	d008      	beq.n	8012dfe <_tx_thread_system_suspend+0x222>
                {

                    /* Is the timestamp the same?  */
                    if (time_stamp == entry_ptr -> tx_trace_buffer_entry_time_stamp)
 8012dec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8012dee:	68db      	ldr	r3, [r3, #12]
 8012df0:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8012df4:	429a      	cmp	r2, r3
 8012df6:	d102      	bne.n	8012dfe <_tx_thread_system_suspend+0x222>
                    {

                        /* Timestamp is the same, set the "next thread pointer" to the new value of the
                           next thread to execute. This can be used by the trace analysis tool to keep
                           track of next thread execution.  */
                        entry_ptr -> tx_trace_buffer_entry_information_field_4 =  0;
 8012df8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8012dfa:	2200      	movs	r2, #0
 8012dfc:	61da      	str	r2, [r3, #28]
 8012dfe:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8012e00:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8012e02:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012e04:	f383 8810 	msr	PRIMASK, r3
}
 8012e08:	bf00      	nop
                /* Restore interrupts.  */
                TX_RESTORE

                /* Determine if preemption should take place. This is only possible if the current thread pointer is
                   not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
                TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8012e0a:	4b12      	ldr	r3, [pc, #72]	; (8012e54 <_tx_thread_system_suspend+0x278>)
 8012e0c:	681b      	ldr	r3, [r3, #0]
 8012e0e:	65bb      	str	r3, [r7, #88]	; 0x58
                if (combined_flags == ((ULONG) 0))
 8012e10:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8012e12:	2b00      	cmp	r3, #0
 8012e14:	f040 80bf 	bne.w	8012f96 <_tx_thread_system_suspend+0x3ba>
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8012e18:	4b1b      	ldr	r3, [pc, #108]	; (8012e88 <_tx_thread_system_suspend+0x2ac>)
 8012e1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012e1e:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8012e20:	f3ef 8305 	mrs	r3, IPSR
 8012e24:	643b      	str	r3, [r7, #64]	; 0x40
    return(ipsr_value);
 8012e26:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    if (_tx_ipsr_get() == 0)
 8012e28:	2b00      	cmp	r3, #0
 8012e2a:	d10c      	bne.n	8012e46 <_tx_thread_system_suspend+0x26a>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8012e2c:	f3ef 8310 	mrs	r3, PRIMASK
 8012e30:	63fb      	str	r3, [r7, #60]	; 0x3c
    return(posture);
 8012e32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
        interrupt_save = __get_interrupt_posture();
 8012e34:	63bb      	str	r3, [r7, #56]	; 0x38
    __asm__ volatile ("CPSIE  i": : : "memory");
 8012e36:	b662      	cpsie	i
}
 8012e38:	bf00      	nop
 8012e3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012e3c:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8012e3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012e40:	f383 8810 	msr	PRIMASK, r3
}
 8012e44:	bf00      	nop
}
 8012e46:	bf00      	nop
                    /* Preemption is needed - return to the system!  */
                    _tx_thread_system_return();
                }

                /* Return to caller.  */
                return;
 8012e48:	e0a5      	b.n	8012f96 <_tx_thread_system_suspend+0x3ba>
 8012e4a:	bf00      	nop
 8012e4c:	200021f8 	.word	0x200021f8
 8012e50:	200027fc 	.word	0x200027fc
 8012e54:	20002290 	.word	0x20002290
 8012e58:	20002814 	.word	0x20002814
 8012e5c:	20002818 	.word	0x20002818
 8012e60:	20000010 	.word	0x20000010
 8012e64:	e0001004 	.word	0xe0001004
 8012e68:	200021fc 	.word	0x200021fc
 8012e6c:	20002810 	.word	0x20002810
 8012e70:	2000280c 	.word	0x2000280c
 8012e74:	20002800 	.word	0x20002800
 8012e78:	2000281c 	.word	0x2000281c
 8012e7c:	20002210 	.word	0x20002210
 8012e80:	20002208 	.word	0x20002208
 8012e84:	2000220c 	.word	0x2000220c
 8012e88:	e000ed04 	.word	0xe000ed04
            {

                /* Other threads at different priority levels are ready to run.  */

                /* Calculate the lowest bit set in the priority map. */
                TX_LOWEST_SET_BIT_CALCULATE(priority_map, priority_bit)
 8012e8c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8012e8e:	fa93 f3a3 	rbit	r3, r3
 8012e92:	65fb      	str	r3, [r7, #92]	; 0x5c
 8012e94:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8012e96:	fab3 f383 	clz	r3, r3
 8012e9a:	667b      	str	r3, [r7, #100]	; 0x64

                /* Setup the next highest priority variable.  */
                _tx_thread_highest_priority =  base_priority + ((UINT) priority_bit);
 8012e9c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8012e9e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8012ea0:	4413      	add	r3, r2
 8012ea2:	4a41      	ldr	r2, [pc, #260]	; (8012fa8 <_tx_thread_system_suspend+0x3cc>)
 8012ea4:	6013      	str	r3, [r2, #0]
            }
        }

        /* Determine if the suspending thread is the thread designated to execute.  */
        if (thread_ptr == _tx_thread_execute_ptr)
 8012ea6:	4b41      	ldr	r3, [pc, #260]	; (8012fac <_tx_thread_system_suspend+0x3d0>)
 8012ea8:	681b      	ldr	r3, [r3, #0]
 8012eaa:	687a      	ldr	r2, [r7, #4]
 8012eac:	429a      	cmp	r2, r3
 8012eae:	d139      	bne.n	8012f24 <_tx_thread_system_suspend+0x348>
        {

            /* Pickup the highest priority thread to execute.  */
            _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 8012eb0:	4b3d      	ldr	r3, [pc, #244]	; (8012fa8 <_tx_thread_system_suspend+0x3cc>)
 8012eb2:	681b      	ldr	r3, [r3, #0]
 8012eb4:	4a3e      	ldr	r2, [pc, #248]	; (8012fb0 <_tx_thread_system_suspend+0x3d4>)
 8012eb6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012eba:	4a3c      	ldr	r2, [pc, #240]	; (8012fac <_tx_thread_system_suspend+0x3d0>)
 8012ebc:	6013      	str	r3, [r2, #0]
#ifdef TX_ENABLE_EVENT_TRACE

            /* Check that the event time stamp is unchanged.  A different
               timestamp means that a later event wrote over the thread
               suspend event. In that case, do nothing here.  */
            if (entry_ptr != TX_NULL)
 8012ebe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8012ec0:	2b00      	cmp	r3, #0
 8012ec2:	d00a      	beq.n	8012eda <_tx_thread_system_suspend+0x2fe>
            {

                /* Is the timestamp the same?  */
                if (time_stamp == entry_ptr -> tx_trace_buffer_entry_time_stamp)
 8012ec4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8012ec6:	68db      	ldr	r3, [r3, #12]
 8012ec8:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8012ecc:	429a      	cmp	r2, r3
 8012ece:	d104      	bne.n	8012eda <_tx_thread_system_suspend+0x2fe>
                {

                    /* Timestamp is the same, set the "next thread pointer" to the new value of the
                       next thread to execute. This can be used by the trace analysis tool to keep
                       track of next thread execution.  */
                    entry_ptr -> tx_trace_buffer_entry_information_field_4 =  TX_POINTER_TO_ULONG_CONVERT(_tx_thread_execute_ptr);
 8012ed0:	4b36      	ldr	r3, [pc, #216]	; (8012fac <_tx_thread_system_suspend+0x3d0>)
 8012ed2:	681b      	ldr	r3, [r3, #0]
 8012ed4:	461a      	mov	r2, r3
 8012ed6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8012ed8:	61da      	str	r2, [r3, #28]
 8012eda:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8012edc:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8012ede:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012ee0:	f383 8810 	msr	PRIMASK, r3
}
 8012ee4:	bf00      	nop
            /* Restore interrupts.  */
            TX_RESTORE

            /* Determine if preemption should take place. This is only possible if the current thread pointer is
               not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
            TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8012ee6:	4b33      	ldr	r3, [pc, #204]	; (8012fb4 <_tx_thread_system_suspend+0x3d8>)
 8012ee8:	681b      	ldr	r3, [r3, #0]
 8012eea:	65bb      	str	r3, [r7, #88]	; 0x58
            if (combined_flags == ((ULONG) 0))
 8012eec:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8012eee:	2b00      	cmp	r3, #0
 8012ef0:	d153      	bne.n	8012f9a <_tx_thread_system_suspend+0x3be>
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8012ef2:	4b31      	ldr	r3, [pc, #196]	; (8012fb8 <_tx_thread_system_suspend+0x3dc>)
 8012ef4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012ef8:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8012efa:	f3ef 8305 	mrs	r3, IPSR
 8012efe:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(ipsr_value);
 8012f00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    if (_tx_ipsr_get() == 0)
 8012f02:	2b00      	cmp	r3, #0
 8012f04:	d10c      	bne.n	8012f20 <_tx_thread_system_suspend+0x344>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8012f06:	f3ef 8310 	mrs	r3, PRIMASK
 8012f0a:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 8012f0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
        interrupt_save = __get_interrupt_posture();
 8012f0e:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSIE  i": : : "memory");
 8012f10:	b662      	cpsie	i
}
 8012f12:	bf00      	nop
 8012f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012f16:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8012f18:	6a3b      	ldr	r3, [r7, #32]
 8012f1a:	f383 8810 	msr	PRIMASK, r3
}
 8012f1e:	bf00      	nop
}
 8012f20:	bf00      	nop
                /* Preemption is needed - return to the system!  */
                _tx_thread_system_return();
            }

            /* Return to caller.  */
            return;
 8012f22:	e03a      	b.n	8012f9a <_tx_thread_system_suspend+0x3be>
#ifdef TX_ENABLE_EVENT_TRACE

         /* Check that the event time stamp is unchanged.  A different
            timestamp means that a later event wrote over the thread
            suspend event. In that case, do nothing here.  */
         if (entry_ptr != TX_NULL)
 8012f24:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8012f26:	2b00      	cmp	r3, #0
 8012f28:	d00a      	beq.n	8012f40 <_tx_thread_system_suspend+0x364>
         {

            /* Is the timestamp the same?  */
            if (time_stamp == entry_ptr -> tx_trace_buffer_entry_time_stamp)
 8012f2a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8012f2c:	68db      	ldr	r3, [r3, #12]
 8012f2e:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8012f32:	429a      	cmp	r2, r3
 8012f34:	d104      	bne.n	8012f40 <_tx_thread_system_suspend+0x364>
                   next thread to execute. This can be used by the trace analysis tool to keep
                   track of next thread execution.  */
#ifdef TX_MISRA_ENABLE
                entry_ptr -> tx_trace_buffer_entry_info_4 =  TX_POINTER_TO_ULONG_CONVERT(_tx_thread_execute_ptr);
#else
                entry_ptr -> tx_trace_buffer_entry_information_field_4 =  TX_POINTER_TO_ULONG_CONVERT(_tx_thread_execute_ptr);
 8012f36:	4b1d      	ldr	r3, [pc, #116]	; (8012fac <_tx_thread_system_suspend+0x3d0>)
 8012f38:	681b      	ldr	r3, [r3, #0]
 8012f3a:	461a      	mov	r2, r3
 8012f3c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8012f3e:	61da      	str	r2, [r3, #28]
 8012f40:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8012f42:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8012f44:	69fb      	ldr	r3, [r7, #28]
 8012f46:	f383 8810 	msr	PRIMASK, r3
}
 8012f4a:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Determine if a preemption condition is present.  */
    if (current_thread != _tx_thread_execute_ptr)
 8012f4c:	4b17      	ldr	r3, [pc, #92]	; (8012fac <_tx_thread_system_suspend+0x3d0>)
 8012f4e:	681b      	ldr	r3, [r3, #0]
 8012f50:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8012f54:	429a      	cmp	r2, r3
 8012f56:	d022      	beq.n	8012f9e <_tx_thread_system_suspend+0x3c2>
        TX_THREAD_STACK_CHECK(thread_ptr)
#endif

        /* Determine if preemption should take place. This is only possible if the current thread pointer is
           not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
        TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8012f58:	4b16      	ldr	r3, [pc, #88]	; (8012fb4 <_tx_thread_system_suspend+0x3d8>)
 8012f5a:	681b      	ldr	r3, [r3, #0]
 8012f5c:	65bb      	str	r3, [r7, #88]	; 0x58
        if (combined_flags == ((ULONG) 0))
 8012f5e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8012f60:	2b00      	cmp	r3, #0
 8012f62:	d11c      	bne.n	8012f9e <_tx_thread_system_suspend+0x3c2>
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8012f64:	4b14      	ldr	r3, [pc, #80]	; (8012fb8 <_tx_thread_system_suspend+0x3dc>)
 8012f66:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012f6a:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8012f6c:	f3ef 8305 	mrs	r3, IPSR
 8012f70:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 8012f72:	69bb      	ldr	r3, [r7, #24]
    if (_tx_ipsr_get() == 0)
 8012f74:	2b00      	cmp	r3, #0
 8012f76:	d10c      	bne.n	8012f92 <_tx_thread_system_suspend+0x3b6>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8012f78:	f3ef 8310 	mrs	r3, PRIMASK
 8012f7c:	617b      	str	r3, [r7, #20]
    return(posture);
 8012f7e:	697b      	ldr	r3, [r7, #20]
        interrupt_save = __get_interrupt_posture();
 8012f80:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSIE  i": : : "memory");
 8012f82:	b662      	cpsie	i
}
 8012f84:	bf00      	nop
 8012f86:	693b      	ldr	r3, [r7, #16]
 8012f88:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8012f8a:	68fb      	ldr	r3, [r7, #12]
 8012f8c:	f383 8810 	msr	PRIMASK, r3
}
 8012f90:	bf00      	nop
}
 8012f92:	bf00      	nop
            _tx_thread_system_return();
        }
    }

    /* Return to caller.  */
    return;
 8012f94:	e003      	b.n	8012f9e <_tx_thread_system_suspend+0x3c2>
                return;
 8012f96:	bf00      	nop
 8012f98:	e002      	b.n	8012fa0 <_tx_thread_system_suspend+0x3c4>
            return;
 8012f9a:	bf00      	nop
 8012f9c:	e000      	b.n	8012fa0 <_tx_thread_system_suspend+0x3c4>
    return;
 8012f9e:	bf00      	nop
}
 8012fa0:	3790      	adds	r7, #144	; 0x90
 8012fa2:	46bd      	mov	sp, r7
 8012fa4:	bd80      	pop	{r7, pc}
 8012fa6:	bf00      	nop
 8012fa8:	2000220c 	.word	0x2000220c
 8012fac:	200021fc 	.word	0x200021fc
 8012fb0:	20002210 	.word	0x20002210
 8012fb4:	20002290 	.word	0x20002290
 8012fb8:	e000ed04 	.word	0xe000ed04

08012fbc <_tx_thread_time_slice>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_time_slice(VOID)
{
 8012fbc:	b580      	push	{r7, lr}
 8012fbe:	b08e      	sub	sp, #56	; 0x38
 8012fc0:	af00      	add	r7, sp, #0
ULONG           system_state;
UINT            preempt_disable;
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 8012fc2:	4b5f      	ldr	r3, [pc, #380]	; (8013140 <_tx_thread_time_slice+0x184>)
 8012fc4:	681b      	ldr	r3, [r3, #0]
 8012fc6:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8012fc8:	f3ef 8310 	mrs	r3, PRIMASK
 8012fcc:	61bb      	str	r3, [r7, #24]
    return(posture);
 8012fce:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8012fd0:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8012fd2:	b672      	cpsid	i
    return(int_posture);
 8012fd4:	697b      	ldr	r3, [r7, #20]
    /* Set the next thread pointer to NULL.  */
    next_thread_ptr =  TX_NULL;
#endif

    /* Lockout interrupts while the time-slice is evaluated.  */
    TX_DISABLE
 8012fd6:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Clear the expired time-slice flag.  */
    _tx_timer_expired_time_slice =  TX_FALSE;
 8012fd8:	4b5a      	ldr	r3, [pc, #360]	; (8013144 <_tx_thread_time_slice+0x188>)
 8012fda:	2200      	movs	r2, #0
 8012fdc:	601a      	str	r2, [r3, #0]

    /* Make sure the thread pointer is valid.  */
    if (thread_ptr != TX_NULL)
 8012fde:	687b      	ldr	r3, [r7, #4]
 8012fe0:	2b00      	cmp	r3, #0
 8012fe2:	d024      	beq.n	801302e <_tx_thread_time_slice+0x72>
    {

        /* Make sure the thread is still active, i.e. not suspended.  */
        if (thread_ptr -> tx_thread_state == TX_READY)
 8012fe4:	687b      	ldr	r3, [r7, #4]
 8012fe6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012fe8:	2b00      	cmp	r3, #0
 8012fea:	d120      	bne.n	801302e <_tx_thread_time_slice+0x72>
        {

            /* Setup a fresh time-slice for the thread.  */
            thread_ptr -> tx_thread_time_slice =  thread_ptr -> tx_thread_new_time_slice;
 8012fec:	687a      	ldr	r2, [r7, #4]
 8012fee:	687b      	ldr	r3, [r7, #4]
 8012ff0:	69d2      	ldr	r2, [r2, #28]
 8012ff2:	619a      	str	r2, [r3, #24]

            /* Reset the actual time-slice variable.  */
            _tx_timer_time_slice =  thread_ptr -> tx_thread_time_slice;
 8012ff4:	687b      	ldr	r3, [r7, #4]
 8012ff6:	699b      	ldr	r3, [r3, #24]
 8012ff8:	4a53      	ldr	r2, [pc, #332]	; (8013148 <_tx_thread_time_slice+0x18c>)
 8012ffa:	6013      	str	r3, [r2, #0]

            /* Determine if there is another thread at the same priority and preemption-threshold
               is not set.  Preemption-threshold overrides time-slicing.  */
            if (thread_ptr -> tx_thread_ready_next != thread_ptr)
 8012ffc:	687b      	ldr	r3, [r7, #4]
 8012ffe:	6a1a      	ldr	r2, [r3, #32]
 8013000:	687b      	ldr	r3, [r7, #4]
 8013002:	429a      	cmp	r2, r3
 8013004:	d013      	beq.n	801302e <_tx_thread_time_slice+0x72>
            {

                /* Check to see if preemption-threshold is not being used.  */
                if (thread_ptr -> tx_thread_priority == thread_ptr -> tx_thread_preempt_threshold)
 8013006:	687b      	ldr	r3, [r7, #4]
 8013008:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801300a:	687b      	ldr	r3, [r7, #4]
 801300c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801300e:	429a      	cmp	r2, r3
 8013010:	d10d      	bne.n	801302e <_tx_thread_time_slice+0x72>

                    /* Preemption-threshold is not being used by this thread.  */

                    /* There is another thread at this priority, make it the highest at
                       this priority level.  */
                    _tx_thread_priority_list[thread_ptr -> tx_thread_priority] =  thread_ptr -> tx_thread_ready_next;
 8013012:	687a      	ldr	r2, [r7, #4]
 8013014:	687b      	ldr	r3, [r7, #4]
 8013016:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013018:	6a12      	ldr	r2, [r2, #32]
 801301a:	494c      	ldr	r1, [pc, #304]	; (801314c <_tx_thread_time_slice+0x190>)
 801301c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

                    /* Designate the highest priority thread as the one to execute.  Don't use this
                       thread's priority as an index just in case a higher priority thread is now
                       ready!  */
                    _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 8013020:	4b4b      	ldr	r3, [pc, #300]	; (8013150 <_tx_thread_time_slice+0x194>)
 8013022:	681b      	ldr	r3, [r3, #0]
 8013024:	4a49      	ldr	r2, [pc, #292]	; (801314c <_tx_thread_time_slice+0x190>)
 8013026:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801302a:	4a4a      	ldr	r2, [pc, #296]	; (8013154 <_tx_thread_time_slice+0x198>)
 801302c:	6013      	str	r3, [r2, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 801302e:	f3ef 8305 	mrs	r3, IPSR
 8013032:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 8013034:	693a      	ldr	r2, [r7, #16]
    }

#ifdef TX_ENABLE_EVENT_TRACE

    /* Pickup the volatile information.  */
    system_state =  TX_THREAD_GET_SYSTEM_STATE();
 8013036:	4b48      	ldr	r3, [pc, #288]	; (8013158 <_tx_thread_time_slice+0x19c>)
 8013038:	681b      	ldr	r3, [r3, #0]
 801303a:	4313      	orrs	r3, r2
 801303c:	62bb      	str	r3, [r7, #40]	; 0x28
    preempt_disable =  _tx_thread_preempt_disable;
 801303e:	4b47      	ldr	r3, [pc, #284]	; (801315c <_tx_thread_time_slice+0x1a0>)
 8013040:	681b      	ldr	r3, [r3, #0]
 8013042:	627b      	str	r3, [r7, #36]	; 0x24

    /* Insert this event into the trace buffer.  */
    TX_TRACE_IN_LINE_INSERT(TX_TRACE_TIME_SLICE, _tx_thread_execute_ptr, system_state, preempt_disable, TX_POINTER_TO_ULONG_CONVERT(&thread_ptr), TX_TRACE_INTERNAL_EVENTS)
 8013044:	4b46      	ldr	r3, [pc, #280]	; (8013160 <_tx_thread_time_slice+0x1a4>)
 8013046:	681b      	ldr	r3, [r3, #0]
 8013048:	623b      	str	r3, [r7, #32]
 801304a:	6a3b      	ldr	r3, [r7, #32]
 801304c:	2b00      	cmp	r3, #0
 801304e:	d06d      	beq.n	801312c <_tx_thread_time_slice+0x170>
 8013050:	4b44      	ldr	r3, [pc, #272]	; (8013164 <_tx_thread_time_slice+0x1a8>)
 8013052:	681b      	ldr	r3, [r3, #0]
 8013054:	f003 0301 	and.w	r3, r3, #1
 8013058:	2b00      	cmp	r3, #0
 801305a:	d067      	beq.n	801312c <_tx_thread_time_slice+0x170>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 801305c:	f3ef 8305 	mrs	r3, IPSR
 8013060:	60fb      	str	r3, [r7, #12]
    return(ipsr_value);
 8013062:	68fa      	ldr	r2, [r7, #12]
 8013064:	4b3c      	ldr	r3, [pc, #240]	; (8013158 <_tx_thread_time_slice+0x19c>)
 8013066:	681b      	ldr	r3, [r3, #0]
 8013068:	4313      	orrs	r3, r2
 801306a:	61fb      	str	r3, [r7, #28]
 801306c:	4b34      	ldr	r3, [pc, #208]	; (8013140 <_tx_thread_time_slice+0x184>)
 801306e:	681b      	ldr	r3, [r3, #0]
 8013070:	633b      	str	r3, [r7, #48]	; 0x30
 8013072:	69fb      	ldr	r3, [r7, #28]
 8013074:	2b00      	cmp	r3, #0
 8013076:	d10b      	bne.n	8013090 <_tx_thread_time_slice+0xd4>
 8013078:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801307a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801307c:	637b      	str	r3, [r7, #52]	; 0x34
 801307e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013080:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013082:	041a      	lsls	r2, r3, #16
 8013084:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013086:	4313      	orrs	r3, r2
 8013088:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 801308c:	637b      	str	r3, [r7, #52]	; 0x34
 801308e:	e00e      	b.n	80130ae <_tx_thread_time_slice+0xf2>
 8013090:	69fb      	ldr	r3, [r7, #28]
 8013092:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 8013096:	d205      	bcs.n	80130a4 <_tx_thread_time_slice+0xe8>
 8013098:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801309a:	637b      	str	r3, [r7, #52]	; 0x34
 801309c:	f04f 33ff 	mov.w	r3, #4294967295
 80130a0:	633b      	str	r3, [r7, #48]	; 0x30
 80130a2:	e004      	b.n	80130ae <_tx_thread_time_slice+0xf2>
 80130a4:	f04f 33f0 	mov.w	r3, #4042322160	; 0xf0f0f0f0
 80130a8:	633b      	str	r3, [r7, #48]	; 0x30
 80130aa:	2300      	movs	r3, #0
 80130ac:	637b      	str	r3, [r7, #52]	; 0x34
 80130ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80130b0:	6a3b      	ldr	r3, [r7, #32]
 80130b2:	601a      	str	r2, [r3, #0]
 80130b4:	6a3b      	ldr	r3, [r7, #32]
 80130b6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80130b8:	605a      	str	r2, [r3, #4]
 80130ba:	6a3b      	ldr	r3, [r7, #32]
 80130bc:	2205      	movs	r2, #5
 80130be:	609a      	str	r2, [r3, #8]
 80130c0:	4b29      	ldr	r3, [pc, #164]	; (8013168 <_tx_thread_time_slice+0x1ac>)
 80130c2:	681a      	ldr	r2, [r3, #0]
 80130c4:	6a3b      	ldr	r3, [r7, #32]
 80130c6:	60da      	str	r2, [r3, #12]
 80130c8:	4b22      	ldr	r3, [pc, #136]	; (8013154 <_tx_thread_time_slice+0x198>)
 80130ca:	681b      	ldr	r3, [r3, #0]
 80130cc:	461a      	mov	r2, r3
 80130ce:	6a3b      	ldr	r3, [r7, #32]
 80130d0:	611a      	str	r2, [r3, #16]
 80130d2:	6a3b      	ldr	r3, [r7, #32]
 80130d4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80130d6:	615a      	str	r2, [r3, #20]
 80130d8:	6a3b      	ldr	r3, [r7, #32]
 80130da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80130dc:	619a      	str	r2, [r3, #24]
 80130de:	1d3a      	adds	r2, r7, #4
 80130e0:	6a3b      	ldr	r3, [r7, #32]
 80130e2:	61da      	str	r2, [r3, #28]
 80130e4:	6a3b      	ldr	r3, [r7, #32]
 80130e6:	3320      	adds	r3, #32
 80130e8:	623b      	str	r3, [r7, #32]
 80130ea:	4b20      	ldr	r3, [pc, #128]	; (801316c <_tx_thread_time_slice+0x1b0>)
 80130ec:	681b      	ldr	r3, [r3, #0]
 80130ee:	6a3a      	ldr	r2, [r7, #32]
 80130f0:	429a      	cmp	r2, r3
 80130f2:	d314      	bcc.n	801311e <_tx_thread_time_slice+0x162>
 80130f4:	4b1e      	ldr	r3, [pc, #120]	; (8013170 <_tx_thread_time_slice+0x1b4>)
 80130f6:	681b      	ldr	r3, [r3, #0]
 80130f8:	623b      	str	r3, [r7, #32]
 80130fa:	4a19      	ldr	r2, [pc, #100]	; (8013160 <_tx_thread_time_slice+0x1a4>)
 80130fc:	6a3b      	ldr	r3, [r7, #32]
 80130fe:	6013      	str	r3, [r2, #0]
 8013100:	4b1c      	ldr	r3, [pc, #112]	; (8013174 <_tx_thread_time_slice+0x1b8>)
 8013102:	681b      	ldr	r3, [r3, #0]
 8013104:	6a3a      	ldr	r2, [r7, #32]
 8013106:	621a      	str	r2, [r3, #32]
 8013108:	4b1b      	ldr	r3, [pc, #108]	; (8013178 <_tx_thread_time_slice+0x1bc>)
 801310a:	681b      	ldr	r3, [r3, #0]
 801310c:	2b00      	cmp	r3, #0
 801310e:	d00d      	beq.n	801312c <_tx_thread_time_slice+0x170>
 8013110:	4b19      	ldr	r3, [pc, #100]	; (8013178 <_tx_thread_time_slice+0x1bc>)
 8013112:	681b      	ldr	r3, [r3, #0]
 8013114:	4a17      	ldr	r2, [pc, #92]	; (8013174 <_tx_thread_time_slice+0x1b8>)
 8013116:	6812      	ldr	r2, [r2, #0]
 8013118:	4610      	mov	r0, r2
 801311a:	4798      	blx	r3
 801311c:	e006      	b.n	801312c <_tx_thread_time_slice+0x170>
 801311e:	4a10      	ldr	r2, [pc, #64]	; (8013160 <_tx_thread_time_slice+0x1a4>)
 8013120:	6a3b      	ldr	r3, [r7, #32]
 8013122:	6013      	str	r3, [r2, #0]
 8013124:	4b13      	ldr	r3, [pc, #76]	; (8013174 <_tx_thread_time_slice+0x1b8>)
 8013126:	681b      	ldr	r3, [r3, #0]
 8013128:	6a3a      	ldr	r2, [r7, #32]
 801312a:	621a      	str	r2, [r3, #32]
 801312c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801312e:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8013130:	68bb      	ldr	r3, [r7, #8]
 8013132:	f383 8810 	msr	PRIMASK, r3
}
 8013136:	bf00      	nop

        /* Yes, check this thread's stack.  */
        TX_THREAD_STACK_CHECK(next_thread_ptr)
    }
#endif
}
 8013138:	bf00      	nop
 801313a:	3738      	adds	r7, #56	; 0x38
 801313c:	46bd      	mov	sp, r7
 801313e:	bd80      	pop	{r7, pc}
 8013140:	200021f8 	.word	0x200021f8
 8013144:	200022a0 	.word	0x200022a0
 8013148:	200027fc 	.word	0x200027fc
 801314c:	20002210 	.word	0x20002210
 8013150:	2000220c 	.word	0x2000220c
 8013154:	200021fc 	.word	0x200021fc
 8013158:	20000010 	.word	0x20000010
 801315c:	20002290 	.word	0x20002290
 8013160:	20002814 	.word	0x20002814
 8013164:	20002818 	.word	0x20002818
 8013168:	e0001004 	.word	0xe0001004
 801316c:	20002810 	.word	0x20002810
 8013170:	2000280c 	.word	0x2000280c
 8013174:	20002800 	.word	0x20002800
 8013178:	2000281c 	.word	0x2000281c

0801317c <_tx_thread_timeout>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_timeout(ULONG timeout_input)
{
 801317c:	b580      	push	{r7, lr}
 801317e:	b08a      	sub	sp, #40	; 0x28
 8013180:	af00      	add	r7, sp, #0
 8013182:	6078      	str	r0, [r7, #4]
VOID            (*suspend_cleanup)(struct TX_THREAD_STRUCT *suspend_thread_ptr, ULONG suspension_sequence);
ULONG           suspension_sequence;


    /* Pickup the thread pointer.  */
    TX_THREAD_TIMEOUT_POINTER_SETUP(thread_ptr)
 8013184:	687b      	ldr	r3, [r7, #4]
 8013186:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8013188:	f3ef 8310 	mrs	r3, PRIMASK
 801318c:	617b      	str	r3, [r7, #20]
    return(posture);
 801318e:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 8013190:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 8013192:	b672      	cpsid	i
    return(int_posture);
 8013194:	693b      	ldr	r3, [r7, #16]

    /* Disable interrupts.  */
    TX_DISABLE
 8013196:	623b      	str	r3, [r7, #32]

    /* Determine how the thread is currently suspended.  */
    if (thread_ptr -> tx_thread_state == TX_SLEEP)
 8013198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801319a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801319c:	2b04      	cmp	r3, #4
 801319e:	d10e      	bne.n	80131be <_tx_thread_timeout+0x42>
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Increment the disable preemption flag.  */
        _tx_thread_preempt_disable++;
 80131a0:	4b13      	ldr	r3, [pc, #76]	; (80131f0 <_tx_thread_timeout+0x74>)
 80131a2:	681b      	ldr	r3, [r3, #0]
 80131a4:	3301      	adds	r3, #1
 80131a6:	4a12      	ldr	r2, [pc, #72]	; (80131f0 <_tx_thread_timeout+0x74>)
 80131a8:	6013      	str	r3, [r2, #0]
 80131aa:	6a3b      	ldr	r3, [r7, #32]
 80131ac:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80131ae:	68fb      	ldr	r3, [r7, #12]
 80131b0:	f383 8810 	msr	PRIMASK, r3
}
 80131b4:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Lift the suspension on the sleeping thread.  */
        _tx_thread_system_resume(thread_ptr);
 80131b6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80131b8:	f7ff fb56 	bl	8012868 <_tx_thread_system_resume>

        /* Restore interrupts.  */
        TX_RESTORE
#endif
    }
}
 80131bc:	e013      	b.n	80131e6 <_tx_thread_timeout+0x6a>
        suspend_cleanup =  thread_ptr -> tx_thread_suspend_cleanup;
 80131be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80131c0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80131c2:	61fb      	str	r3, [r7, #28]
        suspension_sequence =  thread_ptr -> tx_thread_suspension_sequence;
 80131c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80131c6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80131ca:	61bb      	str	r3, [r7, #24]
 80131cc:	6a3b      	ldr	r3, [r7, #32]
 80131ce:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80131d0:	68bb      	ldr	r3, [r7, #8]
 80131d2:	f383 8810 	msr	PRIMASK, r3
}
 80131d6:	bf00      	nop
        if (suspend_cleanup != TX_NULL)
 80131d8:	69fb      	ldr	r3, [r7, #28]
 80131da:	2b00      	cmp	r3, #0
 80131dc:	d003      	beq.n	80131e6 <_tx_thread_timeout+0x6a>
            (suspend_cleanup)(thread_ptr, suspension_sequence);
 80131de:	69fb      	ldr	r3, [r7, #28]
 80131e0:	69b9      	ldr	r1, [r7, #24]
 80131e2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80131e4:	4798      	blx	r3
}
 80131e6:	bf00      	nop
 80131e8:	3728      	adds	r7, #40	; 0x28
 80131ea:	46bd      	mov	sp, r7
 80131ec:	bd80      	pop	{r7, pc}
 80131ee:	bf00      	nop
 80131f0:	20002290 	.word	0x20002290

080131f4 <_tx_timer_expiration_process>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_expiration_process(VOID)
{
 80131f4:	b580      	push	{r7, lr}
 80131f6:	b084      	sub	sp, #16
 80131f8:	af00      	add	r7, sp, #0
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80131fa:	f3ef 8310 	mrs	r3, PRIMASK
 80131fe:	607b      	str	r3, [r7, #4]
    return(posture);
 8013200:	687b      	ldr	r3, [r7, #4]
    int_posture = __get_interrupt_posture();
 8013202:	603b      	str	r3, [r7, #0]
    __asm__ volatile ("CPSID i" : : : "memory");
 8013204:	b672      	cpsid	i
    return(int_posture);
 8013206:	683b      	ldr	r3, [r7, #0]

    /* Don't process in the ISR, wakeup the system timer thread to process the
       timer expiration.  */

    /* Disable interrupts.  */
    TX_DISABLE
 8013208:	60fb      	str	r3, [r7, #12]
    /* Restore interrupts.  */
    TX_RESTORE
#else

    /* Increment the preempt disable flag.  */
    _tx_thread_preempt_disable++;
 801320a:	4b09      	ldr	r3, [pc, #36]	; (8013230 <_tx_timer_expiration_process+0x3c>)
 801320c:	681b      	ldr	r3, [r3, #0]
 801320e:	3301      	adds	r3, #1
 8013210:	4a07      	ldr	r2, [pc, #28]	; (8013230 <_tx_timer_expiration_process+0x3c>)
 8013212:	6013      	str	r3, [r2, #0]
 8013214:	68fb      	ldr	r3, [r7, #12]
 8013216:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8013218:	68bb      	ldr	r3, [r7, #8]
 801321a:	f383 8810 	msr	PRIMASK, r3
}
 801321e:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Call the system resume function to activate the timer thread.  */
    _tx_thread_system_resume(&_tx_timer_thread);
 8013220:	4804      	ldr	r0, [pc, #16]	; (8013234 <_tx_timer_expiration_process+0x40>)
 8013222:	f7ff fb21 	bl	8012868 <_tx_thread_system_resume>
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 8013226:	bf00      	nop
 8013228:	3710      	adds	r7, #16
 801322a:	46bd      	mov	sp, r7
 801322c:	bd80      	pop	{r7, pc}
 801322e:	bf00      	nop
 8013230:	20002290 	.word	0x20002290
 8013234:	20002340 	.word	0x20002340

08013238 <_tx_timer_initialize>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_initialize(VOID)
{
 8013238:	b590      	push	{r4, r7, lr}
 801323a:	b089      	sub	sp, #36	; 0x24
 801323c:	af06      	add	r7, sp, #24
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the system clock to 0.  */
    _tx_timer_system_clock =  ((ULONG) 0);
 801323e:	4b28      	ldr	r3, [pc, #160]	; (80132e0 <_tx_timer_initialize+0xa8>)
 8013240:	2200      	movs	r2, #0
 8013242:	601a      	str	r2, [r3, #0]

    /* Initialize the time-slice value to 0 to make sure it is disabled.  */
    _tx_timer_time_slice =  ((ULONG) 0);
 8013244:	4b27      	ldr	r3, [pc, #156]	; (80132e4 <_tx_timer_initialize+0xac>)
 8013246:	2200      	movs	r2, #0
 8013248:	601a      	str	r2, [r3, #0]

    /* Clear the expired flags.  */
    _tx_timer_expired_time_slice =  TX_FALSE;
 801324a:	4b27      	ldr	r3, [pc, #156]	; (80132e8 <_tx_timer_initialize+0xb0>)
 801324c:	2200      	movs	r2, #0
 801324e:	601a      	str	r2, [r3, #0]
    _tx_timer_expired =             TX_FALSE;
 8013250:	4b26      	ldr	r3, [pc, #152]	; (80132ec <_tx_timer_initialize+0xb4>)
 8013252:	2200      	movs	r2, #0
 8013254:	601a      	str	r2, [r3, #0]

    /* Set the currently expired timer being processed pointer to NULL.  */
    _tx_timer_expired_timer_ptr =  TX_NULL;
 8013256:	4b26      	ldr	r3, [pc, #152]	; (80132f0 <_tx_timer_initialize+0xb8>)
 8013258:	2200      	movs	r2, #0
 801325a:	601a      	str	r2, [r3, #0]

    /* Initialize the thread and application timer management control structures.  */

    /* First, initialize the timer list.  */
    TX_MEMSET(&_tx_timer_list[0], 0, (sizeof(_tx_timer_list)));
 801325c:	2280      	movs	r2, #128	; 0x80
 801325e:	2100      	movs	r1, #0
 8013260:	4824      	ldr	r0, [pc, #144]	; (80132f4 <_tx_timer_initialize+0xbc>)
 8013262:	f000 fead 	bl	8013fc0 <memset>
#endif

    /* Initialize all of the list pointers.  */
    _tx_timer_list_start =   &_tx_timer_list[0];
 8013266:	4b24      	ldr	r3, [pc, #144]	; (80132f8 <_tx_timer_initialize+0xc0>)
 8013268:	4a22      	ldr	r2, [pc, #136]	; (80132f4 <_tx_timer_initialize+0xbc>)
 801326a:	601a      	str	r2, [r3, #0]
    _tx_timer_current_ptr =  &_tx_timer_list[0];
 801326c:	4b23      	ldr	r3, [pc, #140]	; (80132fc <_tx_timer_initialize+0xc4>)
 801326e:	4a21      	ldr	r2, [pc, #132]	; (80132f4 <_tx_timer_initialize+0xbc>)
 8013270:	601a      	str	r2, [r3, #0]

    /* Set the timer list end pointer to one past the actual timer list.  This is done
       to make the timer interrupt handling in assembly language a little easier.  */
    _tx_timer_list_end =     &_tx_timer_list[TX_TIMER_ENTRIES-((ULONG) 1)];
 8013272:	4b23      	ldr	r3, [pc, #140]	; (8013300 <_tx_timer_initialize+0xc8>)
 8013274:	4a23      	ldr	r2, [pc, #140]	; (8013304 <_tx_timer_initialize+0xcc>)
 8013276:	601a      	str	r2, [r3, #0]
    _tx_timer_list_end =     TX_TIMER_POINTER_ADD(_tx_timer_list_end, ((ULONG) 1));
 8013278:	4b21      	ldr	r3, [pc, #132]	; (8013300 <_tx_timer_initialize+0xc8>)
 801327a:	681b      	ldr	r3, [r3, #0]
 801327c:	3304      	adds	r3, #4
 801327e:	4a20      	ldr	r2, [pc, #128]	; (8013300 <_tx_timer_initialize+0xc8>)
 8013280:	6013      	str	r3, [r2, #0]

#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Setup the variables associated with the system timer thread's stack and
       priority.  */
    _tx_timer_stack_start =  (VOID *) &_tx_timer_thread_stack_area[0];
 8013282:	4b21      	ldr	r3, [pc, #132]	; (8013308 <_tx_timer_initialize+0xd0>)
 8013284:	4a21      	ldr	r2, [pc, #132]	; (801330c <_tx_timer_initialize+0xd4>)
 8013286:	601a      	str	r2, [r3, #0]
    _tx_timer_stack_size =   ((ULONG) TX_TIMER_THREAD_STACK_SIZE);
 8013288:	4b21      	ldr	r3, [pc, #132]	; (8013310 <_tx_timer_initialize+0xd8>)
 801328a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801328e:	601a      	str	r2, [r3, #0]
    _tx_timer_priority =     ((UINT) TX_TIMER_THREAD_PRIORITY);
 8013290:	4b20      	ldr	r3, [pc, #128]	; (8013314 <_tx_timer_initialize+0xdc>)
 8013292:	2200      	movs	r2, #0
 8013294:	601a      	str	r2, [r3, #0]
       low-level initialization component.  */
    do
    {

        /* Create the system timer thread.  */
        status =  _tx_thread_create(&_tx_timer_thread,
 8013296:	4b1c      	ldr	r3, [pc, #112]	; (8013308 <_tx_timer_initialize+0xd0>)
 8013298:	681b      	ldr	r3, [r3, #0]
 801329a:	4a1d      	ldr	r2, [pc, #116]	; (8013310 <_tx_timer_initialize+0xd8>)
 801329c:	6812      	ldr	r2, [r2, #0]
 801329e:	491d      	ldr	r1, [pc, #116]	; (8013314 <_tx_timer_initialize+0xdc>)
 80132a0:	6809      	ldr	r1, [r1, #0]
 80132a2:	481c      	ldr	r0, [pc, #112]	; (8013314 <_tx_timer_initialize+0xdc>)
 80132a4:	6800      	ldr	r0, [r0, #0]
 80132a6:	2400      	movs	r4, #0
 80132a8:	9405      	str	r4, [sp, #20]
 80132aa:	2400      	movs	r4, #0
 80132ac:	9404      	str	r4, [sp, #16]
 80132ae:	9003      	str	r0, [sp, #12]
 80132b0:	9102      	str	r1, [sp, #8]
 80132b2:	9201      	str	r2, [sp, #4]
 80132b4:	9300      	str	r3, [sp, #0]
 80132b6:	4b18      	ldr	r3, [pc, #96]	; (8013318 <_tx_timer_initialize+0xe0>)
 80132b8:	4a18      	ldr	r2, [pc, #96]	; (801331c <_tx_timer_initialize+0xe4>)
 80132ba:	4919      	ldr	r1, [pc, #100]	; (8013320 <_tx_timer_initialize+0xe8>)
 80132bc:	4819      	ldr	r0, [pc, #100]	; (8013324 <_tx_timer_initialize+0xec>)
 80132be:	f7fe fdb5 	bl	8011e2c <_tx_thread_create>
 80132c2:	6078      	str	r0, [r7, #4]
#endif

        /* Define timer initialize extension.  */
        TX_TIMER_INITIALIZE_EXTENSION(status)

    } while (status != TX_SUCCESS);
 80132c4:	687b      	ldr	r3, [r7, #4]
 80132c6:	2b00      	cmp	r3, #0
 80132c8:	d1e5      	bne.n	8013296 <_tx_timer_initialize+0x5e>
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the head pointer of the created application timer list.  */
    _tx_timer_created_ptr =  TX_NULL;
 80132ca:	4b17      	ldr	r3, [pc, #92]	; (8013328 <_tx_timer_initialize+0xf0>)
 80132cc:	2200      	movs	r2, #0
 80132ce:	601a      	str	r2, [r3, #0]

    /* Set the created count to zero.  */
    _tx_timer_created_count =  TX_EMPTY;
 80132d0:	4b16      	ldr	r3, [pc, #88]	; (801332c <_tx_timer_initialize+0xf4>)
 80132d2:	2200      	movs	r2, #0
 80132d4:	601a      	str	r2, [r3, #0]
    _tx_timer_performance_expiration_count =         ((ULONG) 0);
    _tx_timer_performance__expiration_adjust_count =  ((ULONG) 0);
#endif
#endif
#endif
}
 80132d6:	bf00      	nop
 80132d8:	370c      	adds	r7, #12
 80132da:	46bd      	mov	sp, r7
 80132dc:	bd90      	pop	{r4, r7, pc}
 80132de:	bf00      	nop
 80132e0:	2000229c 	.word	0x2000229c
 80132e4:	200027fc 	.word	0x200027fc
 80132e8:	200022a0 	.word	0x200022a0
 80132ec:	20002330 	.word	0x20002330
 80132f0:	2000233c 	.word	0x2000233c
 80132f4:	200022a4 	.word	0x200022a4
 80132f8:	20002324 	.word	0x20002324
 80132fc:	2000232c 	.word	0x2000232c
 8013300:	20002328 	.word	0x20002328
 8013304:	20002320 	.word	0x20002320
 8013308:	200023f0 	.word	0x200023f0
 801330c:	200023fc 	.word	0x200023fc
 8013310:	200023f4 	.word	0x200023f4
 8013314:	200023f8 	.word	0x200023f8
 8013318:	4154494d 	.word	0x4154494d
 801331c:	08013465 	.word	0x08013465
 8013320:	08014b30 	.word	0x08014b30
 8013324:	20002340 	.word	0x20002340
 8013328:	20002334 	.word	0x20002334
 801332c:	20002338 	.word	0x20002338

08013330 <_tx_timer_system_activate>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_system_activate(TX_TIMER_INTERNAL *timer_ptr)
{
 8013330:	b480      	push	{r7}
 8013332:	b089      	sub	sp, #36	; 0x24
 8013334:	af00      	add	r7, sp, #0
 8013336:	6078      	str	r0, [r7, #4]
ULONG                       remaining_ticks;
ULONG                       expiration_time;


    /* Pickup the remaining ticks.  */
    remaining_ticks =  timer_ptr -> tx_timer_internal_remaining_ticks;
 8013338:	687b      	ldr	r3, [r7, #4]
 801333a:	681b      	ldr	r3, [r3, #0]
 801333c:	617b      	str	r3, [r7, #20]

    /* Determine if there is a timer to activate.  */
    if (remaining_ticks != ((ULONG) 0))
 801333e:	697b      	ldr	r3, [r7, #20]
 8013340:	2b00      	cmp	r3, #0
 8013342:	d04a      	beq.n	80133da <_tx_timer_system_activate+0xaa>
    {

        /* Determine if the timer is set to wait forever.  */
        if (remaining_ticks != TX_WAIT_FOREVER)
 8013344:	697b      	ldr	r3, [r7, #20]
 8013346:	f1b3 3fff 	cmp.w	r3, #4294967295
 801334a:	d046      	beq.n	80133da <_tx_timer_system_activate+0xaa>
        {

            /* Valid timer activate request.  */

            /* Determine if the timer still needs activation.  */
            if (timer_ptr -> tx_timer_internal_list_head == TX_NULL)
 801334c:	687b      	ldr	r3, [r7, #4]
 801334e:	699b      	ldr	r3, [r3, #24]
 8013350:	2b00      	cmp	r3, #0
 8013352:	d142      	bne.n	80133da <_tx_timer_system_activate+0xaa>
            {

                /* Activate the timer.  */

                /* Calculate the amount of time remaining for the timer.  */
                if (remaining_ticks > TX_TIMER_ENTRIES)
 8013354:	697b      	ldr	r3, [r7, #20]
 8013356:	2b20      	cmp	r3, #32
 8013358:	d902      	bls.n	8013360 <_tx_timer_system_activate+0x30>
                {

                    /* Set expiration time to the maximum number of entries.  */
                    expiration_time =  TX_TIMER_ENTRIES - ((ULONG) 1);
 801335a:	231f      	movs	r3, #31
 801335c:	61bb      	str	r3, [r7, #24]
 801335e:	e002      	b.n	8013366 <_tx_timer_system_activate+0x36>
                {

                    /* Timer value fits in the timer entries.  */

                    /* Set the expiration time.  */
                    expiration_time =  (remaining_ticks - ((ULONG) 1));
 8013360:	697b      	ldr	r3, [r7, #20]
 8013362:	3b01      	subs	r3, #1
 8013364:	61bb      	str	r3, [r7, #24]

                /* At this point, we are ready to put the timer on one of
                   the timer lists.  */

                /* Calculate the proper place for the timer.  */
                timer_list =  TX_TIMER_POINTER_ADD(_tx_timer_current_ptr, expiration_time);
 8013366:	4b20      	ldr	r3, [pc, #128]	; (80133e8 <_tx_timer_system_activate+0xb8>)
 8013368:	681a      	ldr	r2, [r3, #0]
 801336a:	69bb      	ldr	r3, [r7, #24]
 801336c:	009b      	lsls	r3, r3, #2
 801336e:	4413      	add	r3, r2
 8013370:	61fb      	str	r3, [r7, #28]
                if (TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(timer_list) >= TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(_tx_timer_list_end))
 8013372:	4b1e      	ldr	r3, [pc, #120]	; (80133ec <_tx_timer_system_activate+0xbc>)
 8013374:	681b      	ldr	r3, [r3, #0]
 8013376:	69fa      	ldr	r2, [r7, #28]
 8013378:	429a      	cmp	r2, r3
 801337a:	d30b      	bcc.n	8013394 <_tx_timer_system_activate+0x64>
                {

                    /* Wrap from the beginning of the list.  */
                    delta =  TX_TIMER_POINTER_DIF(timer_list, _tx_timer_list_end);
 801337c:	4b1b      	ldr	r3, [pc, #108]	; (80133ec <_tx_timer_system_activate+0xbc>)
 801337e:	681b      	ldr	r3, [r3, #0]
 8013380:	69fa      	ldr	r2, [r7, #28]
 8013382:	1ad3      	subs	r3, r2, r3
 8013384:	109b      	asrs	r3, r3, #2
 8013386:	613b      	str	r3, [r7, #16]
                    timer_list =  TX_TIMER_POINTER_ADD(_tx_timer_list_start, delta);
 8013388:	4b19      	ldr	r3, [pc, #100]	; (80133f0 <_tx_timer_system_activate+0xc0>)
 801338a:	681a      	ldr	r2, [r3, #0]
 801338c:	693b      	ldr	r3, [r7, #16]
 801338e:	009b      	lsls	r3, r3, #2
 8013390:	4413      	add	r3, r2
 8013392:	61fb      	str	r3, [r7, #28]
                }

                /* Now put the timer on this list.  */
                if ((*timer_list) == TX_NULL)
 8013394:	69fb      	ldr	r3, [r7, #28]
 8013396:	681b      	ldr	r3, [r3, #0]
 8013398:	2b00      	cmp	r3, #0
 801339a:	d109      	bne.n	80133b0 <_tx_timer_system_activate+0x80>
                {

                    /* This list is NULL, just put the new timer on it.  */

                    /* Setup the links in this timer.  */
                    timer_ptr -> tx_timer_internal_active_next =      timer_ptr;
 801339c:	687b      	ldr	r3, [r7, #4]
 801339e:	687a      	ldr	r2, [r7, #4]
 80133a0:	611a      	str	r2, [r3, #16]
                    timer_ptr -> tx_timer_internal_active_previous =  timer_ptr;
 80133a2:	687b      	ldr	r3, [r7, #4]
 80133a4:	687a      	ldr	r2, [r7, #4]
 80133a6:	615a      	str	r2, [r3, #20]

                    /* Setup the list head pointer.  */
                    *timer_list =  timer_ptr;
 80133a8:	69fb      	ldr	r3, [r7, #28]
 80133aa:	687a      	ldr	r2, [r7, #4]
 80133ac:	601a      	str	r2, [r3, #0]
 80133ae:	e011      	b.n	80133d4 <_tx_timer_system_activate+0xa4>
                }
                else
                {

                    /* This list is not NULL, add current timer to the end. */
                    next_timer =                                        *timer_list;
 80133b0:	69fb      	ldr	r3, [r7, #28]
 80133b2:	681b      	ldr	r3, [r3, #0]
 80133b4:	60fb      	str	r3, [r7, #12]
                    previous_timer =                                    next_timer -> tx_timer_internal_active_previous;
 80133b6:	68fb      	ldr	r3, [r7, #12]
 80133b8:	695b      	ldr	r3, [r3, #20]
 80133ba:	60bb      	str	r3, [r7, #8]
                    previous_timer -> tx_timer_internal_active_next =   timer_ptr;
 80133bc:	68bb      	ldr	r3, [r7, #8]
 80133be:	687a      	ldr	r2, [r7, #4]
 80133c0:	611a      	str	r2, [r3, #16]
                    next_timer -> tx_timer_internal_active_previous =   timer_ptr;
 80133c2:	68fb      	ldr	r3, [r7, #12]
 80133c4:	687a      	ldr	r2, [r7, #4]
 80133c6:	615a      	str	r2, [r3, #20]
                    timer_ptr -> tx_timer_internal_active_next =        next_timer;
 80133c8:	687b      	ldr	r3, [r7, #4]
 80133ca:	68fa      	ldr	r2, [r7, #12]
 80133cc:	611a      	str	r2, [r3, #16]
                    timer_ptr -> tx_timer_internal_active_previous =    previous_timer;
 80133ce:	687b      	ldr	r3, [r7, #4]
 80133d0:	68ba      	ldr	r2, [r7, #8]
 80133d2:	615a      	str	r2, [r3, #20]
                }

                /* Setup list head pointer.  */
                timer_ptr -> tx_timer_internal_list_head =  timer_list;
 80133d4:	687b      	ldr	r3, [r7, #4]
 80133d6:	69fa      	ldr	r2, [r7, #28]
 80133d8:	619a      	str	r2, [r3, #24]
            }
        }
    }
}
 80133da:	bf00      	nop
 80133dc:	3724      	adds	r7, #36	; 0x24
 80133de:	46bd      	mov	sp, r7
 80133e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133e4:	4770      	bx	lr
 80133e6:	bf00      	nop
 80133e8:	2000232c 	.word	0x2000232c
 80133ec:	20002328 	.word	0x20002328
 80133f0:	20002324 	.word	0x20002324

080133f4 <_tx_timer_system_deactivate>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_system_deactivate(TX_TIMER_INTERNAL *timer_ptr)
{
 80133f4:	b480      	push	{r7}
 80133f6:	b087      	sub	sp, #28
 80133f8:	af00      	add	r7, sp, #0
 80133fa:	6078      	str	r0, [r7, #4]
TX_TIMER_INTERNAL   *next_timer;
TX_TIMER_INTERNAL   *previous_timer;


    /* Pickup the list head pointer.  */
    list_head =  timer_ptr -> tx_timer_internal_list_head;
 80133fc:	687b      	ldr	r3, [r7, #4]
 80133fe:	699b      	ldr	r3, [r3, #24]
 8013400:	617b      	str	r3, [r7, #20]

    /* Determine if the timer still needs deactivation.  */
    if (list_head != TX_NULL)
 8013402:	697b      	ldr	r3, [r7, #20]
 8013404:	2b00      	cmp	r3, #0
 8013406:	d026      	beq.n	8013456 <_tx_timer_system_deactivate+0x62>
    {

        /* Deactivate the timer.  */

        /* Pickup the next active timer.  */
        next_timer =  timer_ptr -> tx_timer_internal_active_next;
 8013408:	687b      	ldr	r3, [r7, #4]
 801340a:	691b      	ldr	r3, [r3, #16]
 801340c:	613b      	str	r3, [r7, #16]

        /* See if this is the only timer in the list.  */
        if (timer_ptr == next_timer)
 801340e:	687a      	ldr	r2, [r7, #4]
 8013410:	693b      	ldr	r3, [r7, #16]
 8013412:	429a      	cmp	r2, r3
 8013414:	d108      	bne.n	8013428 <_tx_timer_system_deactivate+0x34>
        {

            /* Yes, the only timer on the list.  */

            /* Determine if the head pointer needs to be updated.  */
            if (*(list_head) == timer_ptr)
 8013416:	697b      	ldr	r3, [r7, #20]
 8013418:	681b      	ldr	r3, [r3, #0]
 801341a:	687a      	ldr	r2, [r7, #4]
 801341c:	429a      	cmp	r2, r3
 801341e:	d117      	bne.n	8013450 <_tx_timer_system_deactivate+0x5c>
            {

                /* Update the head pointer.  */
                *(list_head) =  TX_NULL;
 8013420:	697b      	ldr	r3, [r7, #20]
 8013422:	2200      	movs	r2, #0
 8013424:	601a      	str	r2, [r3, #0]
 8013426:	e013      	b.n	8013450 <_tx_timer_system_deactivate+0x5c>
        {

            /* At least one more timer is on the same expiration list.  */

            /* Update the links of the adjacent timers.  */
            previous_timer =                                   timer_ptr -> tx_timer_internal_active_previous;
 8013428:	687b      	ldr	r3, [r7, #4]
 801342a:	695b      	ldr	r3, [r3, #20]
 801342c:	60fb      	str	r3, [r7, #12]
            next_timer -> tx_timer_internal_active_previous =  previous_timer;
 801342e:	693b      	ldr	r3, [r7, #16]
 8013430:	68fa      	ldr	r2, [r7, #12]
 8013432:	615a      	str	r2, [r3, #20]
            previous_timer -> tx_timer_internal_active_next =  next_timer;
 8013434:	68fb      	ldr	r3, [r7, #12]
 8013436:	693a      	ldr	r2, [r7, #16]
 8013438:	611a      	str	r2, [r3, #16]

            /* Determine if the head pointer needs to be updated.  */
            if (*(list_head) == timer_ptr)
 801343a:	697b      	ldr	r3, [r7, #20]
 801343c:	681b      	ldr	r3, [r3, #0]
 801343e:	687a      	ldr	r2, [r7, #4]
 8013440:	429a      	cmp	r2, r3
 8013442:	d105      	bne.n	8013450 <_tx_timer_system_deactivate+0x5c>
            {

                /* Update the next timer in the list with the list head pointer.  */
                next_timer -> tx_timer_internal_list_head =  list_head;
 8013444:	693b      	ldr	r3, [r7, #16]
 8013446:	697a      	ldr	r2, [r7, #20]
 8013448:	619a      	str	r2, [r3, #24]

                /* Update the head pointer.  */
                *(list_head) =  next_timer;
 801344a:	697b      	ldr	r3, [r7, #20]
 801344c:	693a      	ldr	r2, [r7, #16]
 801344e:	601a      	str	r2, [r3, #0]
            }
        }

        /* Clear the timer's list head pointer.  */
        timer_ptr -> tx_timer_internal_list_head =  TX_NULL;
 8013450:	687b      	ldr	r3, [r7, #4]
 8013452:	2200      	movs	r2, #0
 8013454:	619a      	str	r2, [r3, #24]
    }
}
 8013456:	bf00      	nop
 8013458:	371c      	adds	r7, #28
 801345a:	46bd      	mov	sp, r7
 801345c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013460:	4770      	bx	lr
	...

08013464 <_tx_timer_thread_entry>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
#ifndef TX_TIMER_PROCESS_IN_ISR
VOID  _tx_timer_thread_entry(ULONG timer_thread_input)
{
 8013464:	b580      	push	{r7, lr}
 8013466:	b098      	sub	sp, #96	; 0x60
 8013468:	af00      	add	r7, sp, #0
 801346a:	6078      	str	r0, [r7, #4]
TX_TIMER_INTERNAL           *reactivate_timer;
TX_TIMER_INTERNAL           *next_timer;
TX_TIMER_INTERNAL           *previous_timer;
TX_TIMER_INTERNAL           *current_timer;
VOID                        (*timeout_function)(ULONG id);
ULONG                       timeout_param =  ((ULONG) 0);
 801346c:	2300      	movs	r3, #0
 801346e:	657b      	str	r3, [r7, #84]	; 0x54
#endif


    /* Make sure the timer input is correct.  This also gets rid of the
       silly compiler warnings.  */
    if (timer_thread_input == TX_TIMER_ID)
 8013470:	687b      	ldr	r3, [r7, #4]
 8013472:	4a73      	ldr	r2, [pc, #460]	; (8013640 <_tx_timer_thread_entry+0x1dc>)
 8013474:	4293      	cmp	r3, r2
 8013476:	f040 80de 	bne.w	8013636 <_tx_timer_thread_entry+0x1d2>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801347a:	f3ef 8310 	mrs	r3, PRIMASK
 801347e:	643b      	str	r3, [r7, #64]	; 0x40
    return(posture);
 8013480:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    int_posture = __get_interrupt_posture();
 8013482:	63fb      	str	r3, [r7, #60]	; 0x3c
    __asm__ volatile ("CPSID i" : : : "memory");
 8013484:	b672      	cpsid	i
    return(int_posture);
 8013486:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
        {

            /* First, move the current list pointer and clear the timer
               expired value.  This allows the interrupt handling portion
               to continue looking for timer expirations.  */
            TX_DISABLE
 8013488:	65fb      	str	r3, [r7, #92]	; 0x5c

            /* Save the current timer expiration list pointer.  */
            expired_timers =  *_tx_timer_current_ptr;
 801348a:	4b6e      	ldr	r3, [pc, #440]	; (8013644 <_tx_timer_thread_entry+0x1e0>)
 801348c:	681b      	ldr	r3, [r3, #0]
 801348e:	681b      	ldr	r3, [r3, #0]
 8013490:	60fb      	str	r3, [r7, #12]

            /* Modify the head pointer in the first timer in the list, if there
               is one!  */
            if (expired_timers != TX_NULL)
 8013492:	68fb      	ldr	r3, [r7, #12]
 8013494:	2b00      	cmp	r3, #0
 8013496:	d003      	beq.n	80134a0 <_tx_timer_thread_entry+0x3c>
            {

                expired_timers -> tx_timer_internal_list_head =  &expired_timers;
 8013498:	68fb      	ldr	r3, [r7, #12]
 801349a:	f107 020c 	add.w	r2, r7, #12
 801349e:	619a      	str	r2, [r3, #24]
            }

            /* Set the current list pointer to NULL.  */
            *_tx_timer_current_ptr =  TX_NULL;
 80134a0:	4b68      	ldr	r3, [pc, #416]	; (8013644 <_tx_timer_thread_entry+0x1e0>)
 80134a2:	681b      	ldr	r3, [r3, #0]
 80134a4:	2200      	movs	r2, #0
 80134a6:	601a      	str	r2, [r3, #0]

            /* Move the current pointer up one timer entry wrap if we get to
               the end of the list.  */
            _tx_timer_current_ptr =  TX_TIMER_POINTER_ADD(_tx_timer_current_ptr, 1);
 80134a8:	4b66      	ldr	r3, [pc, #408]	; (8013644 <_tx_timer_thread_entry+0x1e0>)
 80134aa:	681b      	ldr	r3, [r3, #0]
 80134ac:	3304      	adds	r3, #4
 80134ae:	4a65      	ldr	r2, [pc, #404]	; (8013644 <_tx_timer_thread_entry+0x1e0>)
 80134b0:	6013      	str	r3, [r2, #0]
            if (_tx_timer_current_ptr == _tx_timer_list_end)
 80134b2:	4b64      	ldr	r3, [pc, #400]	; (8013644 <_tx_timer_thread_entry+0x1e0>)
 80134b4:	681a      	ldr	r2, [r3, #0]
 80134b6:	4b64      	ldr	r3, [pc, #400]	; (8013648 <_tx_timer_thread_entry+0x1e4>)
 80134b8:	681b      	ldr	r3, [r3, #0]
 80134ba:	429a      	cmp	r2, r3
 80134bc:	d103      	bne.n	80134c6 <_tx_timer_thread_entry+0x62>
            {

                _tx_timer_current_ptr =  _tx_timer_list_start;
 80134be:	4b63      	ldr	r3, [pc, #396]	; (801364c <_tx_timer_thread_entry+0x1e8>)
 80134c0:	681b      	ldr	r3, [r3, #0]
 80134c2:	4a60      	ldr	r2, [pc, #384]	; (8013644 <_tx_timer_thread_entry+0x1e0>)
 80134c4:	6013      	str	r3, [r2, #0]
            }

            /* Clear the expired flag.  */
            _tx_timer_expired =  TX_FALSE;
 80134c6:	4b62      	ldr	r3, [pc, #392]	; (8013650 <_tx_timer_thread_entry+0x1ec>)
 80134c8:	2200      	movs	r2, #0
 80134ca:	601a      	str	r2, [r3, #0]
 80134cc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80134ce:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80134d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80134d2:	f383 8810 	msr	PRIMASK, r3
}
 80134d6:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80134d8:	f3ef 8310 	mrs	r3, PRIMASK
 80134dc:	63bb      	str	r3, [r7, #56]	; 0x38
    return(posture);
 80134de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    int_posture = __get_interrupt_posture();
 80134e0:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile ("CPSID i" : : : "memory");
 80134e2:	b672      	cpsid	i
    return(int_posture);
 80134e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34

            /* Restore interrupts temporarily.  */
            TX_RESTORE

            /* Disable interrupts again.  */
            TX_DISABLE
 80134e6:	65fb      	str	r3, [r7, #92]	; 0x5c

            /* Next, process the expiration of the associated timers at this
               time slot.  */
            while (expired_timers != TX_NULL)
 80134e8:	e07f      	b.n	80135ea <_tx_timer_thread_entry+0x186>
            {

                /* Something is on the list.  Remove it and process the expiration.  */
                current_timer =  expired_timers;
 80134ea:	68fb      	ldr	r3, [r7, #12]
 80134ec:	64fb      	str	r3, [r7, #76]	; 0x4c

                /* Pickup the next timer.  */
                next_timer =  expired_timers -> tx_timer_internal_active_next;
 80134ee:	68fb      	ldr	r3, [r7, #12]
 80134f0:	691b      	ldr	r3, [r3, #16]
 80134f2:	64bb      	str	r3, [r7, #72]	; 0x48

                /* Set the reactivate_timer to NULL.  */
                reactivate_timer =  TX_NULL;
 80134f4:	2300      	movs	r3, #0
 80134f6:	60bb      	str	r3, [r7, #8]

                /* Determine if this is the only timer.  */
                if (current_timer == next_timer)
 80134f8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80134fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80134fc:	429a      	cmp	r2, r3
 80134fe:	d102      	bne.n	8013506 <_tx_timer_thread_entry+0xa2>
                {

                    /* Yes, this is the only timer in the list.  */

                    /* Set the head pointer to NULL.  */
                    expired_timers =  TX_NULL;
 8013500:	2300      	movs	r3, #0
 8013502:	60fb      	str	r3, [r7, #12]
 8013504:	e00e      	b.n	8013524 <_tx_timer_thread_entry+0xc0>
                {

                    /* No, not the only expired timer.  */

                    /* Remove this timer from the expired list.  */
                    previous_timer =                                   current_timer -> tx_timer_internal_active_previous;
 8013506:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013508:	695b      	ldr	r3, [r3, #20]
 801350a:	647b      	str	r3, [r7, #68]	; 0x44
                    next_timer -> tx_timer_internal_active_previous =  previous_timer;
 801350c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801350e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8013510:	615a      	str	r2, [r3, #20]
                    previous_timer -> tx_timer_internal_active_next =  next_timer;
 8013512:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013514:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8013516:	611a      	str	r2, [r3, #16]

                    /* Modify the next timer's list head to point at the current list head.  */
                    next_timer -> tx_timer_internal_list_head =  &expired_timers;
 8013518:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801351a:	f107 020c 	add.w	r2, r7, #12
 801351e:	619a      	str	r2, [r3, #24]

                    /* Set the list head pointer.  */
                    expired_timers =  next_timer;
 8013520:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013522:	60fb      	str	r3, [r7, #12]

                /* In any case, the timer is now off of the expired list.  */

                /* Determine if the timer has expired or if it is just a really
                   big timer that needs to be placed in the list again.  */
                if (current_timer -> tx_timer_internal_remaining_ticks > TX_TIMER_ENTRIES)
 8013524:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013526:	681b      	ldr	r3, [r3, #0]
 8013528:	2b20      	cmp	r3, #32
 801352a:	d911      	bls.n	8013550 <_tx_timer_thread_entry+0xec>
                    }
#endif

                    /* Decrement the remaining ticks of the timer.  */
                    current_timer -> tx_timer_internal_remaining_ticks =
                            current_timer -> tx_timer_internal_remaining_ticks - TX_TIMER_ENTRIES;
 801352c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801352e:	681b      	ldr	r3, [r3, #0]
 8013530:	f1a3 0220 	sub.w	r2, r3, #32
                    current_timer -> tx_timer_internal_remaining_ticks =
 8013534:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013536:	601a      	str	r2, [r3, #0]

                    /* Set the timeout function to NULL in order to bypass the
                       expiration.  */
                    timeout_function =  TX_NULL;
 8013538:	2300      	movs	r3, #0
 801353a:	65bb      	str	r3, [r7, #88]	; 0x58

                    /* Make the timer appear that it is still active while interrupts
                       are enabled.  This will permit proper processing of a timer
                       deactivate from an ISR.  */
                    current_timer -> tx_timer_internal_list_head =    &reactivate_timer;
 801353c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801353e:	f107 0208 	add.w	r2, r7, #8
 8013542:	619a      	str	r2, [r3, #24]
                    current_timer -> tx_timer_internal_active_next =  current_timer;
 8013544:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013546:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8013548:	611a      	str	r2, [r3, #16]

                    /* Setup the temporary timer list head pointer.  */
                    reactivate_timer =  current_timer;
 801354a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801354c:	60bb      	str	r3, [r7, #8]
 801354e:	e01a      	b.n	8013586 <_tx_timer_thread_entry+0x122>
                    }
#endif

                    /* Copy the calling function and ID into local variables before interrupts
                       are re-enabled.  */
                    timeout_function =  current_timer -> tx_timer_internal_timeout_function;
 8013550:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013552:	689b      	ldr	r3, [r3, #8]
 8013554:	65bb      	str	r3, [r7, #88]	; 0x58
                    timeout_param =     current_timer -> tx_timer_internal_timeout_param;
 8013556:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013558:	68db      	ldr	r3, [r3, #12]
 801355a:	657b      	str	r3, [r7, #84]	; 0x54

                    /* Copy the reinitialize ticks into the remaining ticks.  */
                    current_timer -> tx_timer_internal_remaining_ticks =  current_timer -> tx_timer_internal_re_initialize_ticks;
 801355c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801355e:	685a      	ldr	r2, [r3, #4]
 8013560:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013562:	601a      	str	r2, [r3, #0]

                    /* Determine if the timer should be reactivated.  */
                    if (current_timer -> tx_timer_internal_remaining_ticks != ((ULONG) 0))
 8013564:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013566:	681b      	ldr	r3, [r3, #0]
 8013568:	2b00      	cmp	r3, #0
 801356a:	d009      	beq.n	8013580 <_tx_timer_thread_entry+0x11c>

                        /* Make the timer appear that it is still active while processing
                           the expiration routine and with interrupts enabled.  This will
                           permit proper processing of a timer deactivate from both the
                           expiration routine and an ISR.  */
                        current_timer -> tx_timer_internal_list_head =    &reactivate_timer;
 801356c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801356e:	f107 0208 	add.w	r2, r7, #8
 8013572:	619a      	str	r2, [r3, #24]
                        current_timer -> tx_timer_internal_active_next =  current_timer;
 8013574:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013576:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8013578:	611a      	str	r2, [r3, #16]

                        /* Setup the temporary timer list head pointer.  */
                        reactivate_timer =  current_timer;
 801357a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801357c:	60bb      	str	r3, [r7, #8]
 801357e:	e002      	b.n	8013586 <_tx_timer_thread_entry+0x122>
                    else
                    {

                        /* Set the list pointer of this timer to NULL.  This is used to indicate
                           the timer is no longer active.  */
                        current_timer -> tx_timer_internal_list_head =  TX_NULL;
 8013580:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013582:	2200      	movs	r2, #0
 8013584:	619a      	str	r2, [r3, #24]
                    }
                }

                /* Set pointer to indicate the expired timer that is currently being processed.  */
                _tx_timer_expired_timer_ptr =  current_timer;
 8013586:	4a33      	ldr	r2, [pc, #204]	; (8013654 <_tx_timer_thread_entry+0x1f0>)
 8013588:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801358a:	6013      	str	r3, [r2, #0]
 801358c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801358e:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8013590:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013592:	f383 8810 	msr	PRIMASK, r3
}
 8013596:	bf00      	nop

                /* Restore interrupts for timer expiration call.  */
                TX_RESTORE

                /* Call the timer-expiration function, if non-NULL.  */
                if (timeout_function != TX_NULL)
 8013598:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801359a:	2b00      	cmp	r3, #0
 801359c:	d002      	beq.n	80135a4 <_tx_timer_thread_entry+0x140>
                {

                    (timeout_function) (timeout_param);
 801359e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80135a0:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80135a2:	4798      	blx	r3
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80135a4:	f3ef 8310 	mrs	r3, PRIMASK
 80135a8:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 80135aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
    int_posture = __get_interrupt_posture();
 80135ac:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 80135ae:	b672      	cpsid	i
    return(int_posture);
 80135b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                }

                /* Lockout interrupts again.  */
                TX_DISABLE
 80135b2:	65fb      	str	r3, [r7, #92]	; 0x5c

                /* Clear expired timer pointer.  */
                _tx_timer_expired_timer_ptr =  TX_NULL;
 80135b4:	4b27      	ldr	r3, [pc, #156]	; (8013654 <_tx_timer_thread_entry+0x1f0>)
 80135b6:	2200      	movs	r2, #0
 80135b8:	601a      	str	r2, [r3, #0]

                /* Determine if the timer needs to be reactivated.  */
                if (reactivate_timer == current_timer)
 80135ba:	68bb      	ldr	r3, [r7, #8]
 80135bc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80135be:	429a      	cmp	r2, r3
 80135c0:	d105      	bne.n	80135ce <_tx_timer_thread_entry+0x16a>
#else

                    /* Reactivate through the timer activate function.  */

                    /* Clear the list head for the timer activate call.  */
                    current_timer -> tx_timer_internal_list_head = TX_NULL;
 80135c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80135c4:	2200      	movs	r2, #0
 80135c6:	619a      	str	r2, [r3, #24]

                    /* Activate the current timer.  */
                    _tx_timer_system_activate(current_timer);
 80135c8:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80135ca:	f7ff feb1 	bl	8013330 <_tx_timer_system_activate>
 80135ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80135d0:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80135d2:	69bb      	ldr	r3, [r7, #24]
 80135d4:	f383 8810 	msr	PRIMASK, r3
}
 80135d8:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80135da:	f3ef 8310 	mrs	r3, PRIMASK
 80135de:	623b      	str	r3, [r7, #32]
    return(posture);
 80135e0:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 80135e2:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 80135e4:	b672      	cpsid	i
    return(int_posture);
 80135e6:	69fb      	ldr	r3, [r7, #28]

                /* Restore interrupts.  */
                TX_RESTORE

                /* Lockout interrupts again.  */
                TX_DISABLE
 80135e8:	65fb      	str	r3, [r7, #92]	; 0x5c
            while (expired_timers != TX_NULL)
 80135ea:	68fb      	ldr	r3, [r7, #12]
 80135ec:	2b00      	cmp	r3, #0
 80135ee:	f47f af7c 	bne.w	80134ea <_tx_timer_thread_entry+0x86>

            /* Finally, suspend this thread and wait for the next expiration.  */

            /* Determine if another expiration took place while we were in this
               thread.  If so, process another expiration.  */
            if (_tx_timer_expired == TX_FALSE)
 80135f2:	4b17      	ldr	r3, [pc, #92]	; (8013650 <_tx_timer_thread_entry+0x1ec>)
 80135f4:	681b      	ldr	r3, [r3, #0]
 80135f6:	2b00      	cmp	r3, #0
 80135f8:	d116      	bne.n	8013628 <_tx_timer_thread_entry+0x1c4>
            {

                /* Otherwise, no timer expiration, so suspend the thread.  */

                /* Build pointer to the timer thread.  */
                thread_ptr =  &_tx_timer_thread;
 80135fa:	4b17      	ldr	r3, [pc, #92]	; (8013658 <_tx_timer_thread_entry+0x1f4>)
 80135fc:	653b      	str	r3, [r7, #80]	; 0x50

                /* Set the status to suspending, in order to indicate the
                   suspension is in progress.  */
                thread_ptr -> tx_thread_state =  TX_SUSPENDED;
 80135fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013600:	2203      	movs	r2, #3
 8013602:	631a      	str	r2, [r3, #48]	; 0x30
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Set the suspending flag. */
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8013604:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013606:	2201      	movs	r2, #1
 8013608:	639a      	str	r2, [r3, #56]	; 0x38

                /* Increment the preempt disable count prior to suspending.  */
                _tx_thread_preempt_disable++;
 801360a:	4b14      	ldr	r3, [pc, #80]	; (801365c <_tx_timer_thread_entry+0x1f8>)
 801360c:	681b      	ldr	r3, [r3, #0]
 801360e:	3301      	adds	r3, #1
 8013610:	4a12      	ldr	r2, [pc, #72]	; (801365c <_tx_timer_thread_entry+0x1f8>)
 8013612:	6013      	str	r3, [r2, #0]
 8013614:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8013616:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8013618:	697b      	ldr	r3, [r7, #20]
 801361a:	f383 8810 	msr	PRIMASK, r3
}
 801361e:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Call actual thread suspension routine.  */
                _tx_thread_system_suspend(thread_ptr);
 8013620:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8013622:	f7ff fadb 	bl	8012bdc <_tx_thread_system_suspend>
 8013626:	e728      	b.n	801347a <_tx_timer_thread_entry+0x16>
 8013628:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801362a:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801362c:	693b      	ldr	r3, [r7, #16]
 801362e:	f383 8810 	msr	PRIMASK, r3
}
 8013632:	bf00      	nop
            TX_DISABLE
 8013634:	e721      	b.n	801347a <_tx_timer_thread_entry+0x16>

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif

}
 8013636:	bf00      	nop
 8013638:	3760      	adds	r7, #96	; 0x60
 801363a:	46bd      	mov	sp, r7
 801363c:	bd80      	pop	{r7, pc}
 801363e:	bf00      	nop
 8013640:	4154494d 	.word	0x4154494d
 8013644:	2000232c 	.word	0x2000232c
 8013648:	20002328 	.word	0x20002328
 801364c:	20002324 	.word	0x20002324
 8013650:	20002330 	.word	0x20002330
 8013654:	2000233c 	.word	0x2000233c
 8013658:	20002340 	.word	0x20002340
 801365c:	20002290 	.word	0x20002290

08013660 <_tx_trace_initialize>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_trace_initialize(VOID)
{
 8013660:	b480      	push	{r7}
 8013662:	af00      	add	r7, sp, #0

#ifdef TX_ENABLE_EVENT_TRACE
#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize all the pointers to the trace buffer to NULL.  */
    _tx_trace_header_ptr =          TX_NULL;
 8013664:	4b0b      	ldr	r3, [pc, #44]	; (8013694 <_tx_trace_initialize+0x34>)
 8013666:	2200      	movs	r2, #0
 8013668:	601a      	str	r2, [r3, #0]
    _tx_trace_registry_start_ptr =  TX_NULL;
 801366a:	4b0b      	ldr	r3, [pc, #44]	; (8013698 <_tx_trace_initialize+0x38>)
 801366c:	2200      	movs	r2, #0
 801366e:	601a      	str	r2, [r3, #0]
    _tx_trace_registry_end_ptr =    TX_NULL;
 8013670:	4b0a      	ldr	r3, [pc, #40]	; (801369c <_tx_trace_initialize+0x3c>)
 8013672:	2200      	movs	r2, #0
 8013674:	601a      	str	r2, [r3, #0]
    _tx_trace_buffer_start_ptr =    TX_NULL;
 8013676:	4b0a      	ldr	r3, [pc, #40]	; (80136a0 <_tx_trace_initialize+0x40>)
 8013678:	2200      	movs	r2, #0
 801367a:	601a      	str	r2, [r3, #0]
    _tx_trace_buffer_end_ptr =      TX_NULL;
 801367c:	4b09      	ldr	r3, [pc, #36]	; (80136a4 <_tx_trace_initialize+0x44>)
 801367e:	2200      	movs	r2, #0
 8013680:	601a      	str	r2, [r3, #0]
    _tx_trace_buffer_current_ptr =  TX_NULL;
 8013682:	4b09      	ldr	r3, [pc, #36]	; (80136a8 <_tx_trace_initialize+0x48>)
 8013684:	2200      	movs	r2, #0
 8013686:	601a      	str	r2, [r3, #0]
#endif
#endif
}
 8013688:	bf00      	nop
 801368a:	46bd      	mov	sp, r7
 801368c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013690:	4770      	bx	lr
 8013692:	bf00      	nop
 8013694:	20002800 	.word	0x20002800
 8013698:	20002804 	.word	0x20002804
 801369c:	20002808 	.word	0x20002808
 80136a0:	2000280c 	.word	0x2000280c
 80136a4:	20002810 	.word	0x20002810
 80136a8:	20002814 	.word	0x20002814

080136ac <_tx_trace_object_register>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_trace_object_register(UCHAR object_type, VOID *object_ptr, CHAR *object_name, ULONG parameter_1, ULONG parameter_2)
{
 80136ac:	b480      	push	{r7}
 80136ae:	b08d      	sub	sp, #52	; 0x34
 80136b0:	af00      	add	r7, sp, #0
 80136b2:	60b9      	str	r1, [r7, #8]
 80136b4:	607a      	str	r2, [r7, #4]
 80136b6:	603b      	str	r3, [r7, #0]
 80136b8:	4603      	mov	r3, r0
 80136ba:	73fb      	strb	r3, [r7, #15]
UCHAR                           *work_ptr;
TX_TRACE_OBJECT_ENTRY           *entry_ptr;


    /* Determine if the registry area is setup.  */
    if (_tx_trace_registry_start_ptr != TX_NULL)
 80136bc:	4b6d      	ldr	r3, [pc, #436]	; (8013874 <_tx_trace_object_register+0x1c8>)
 80136be:	681b      	ldr	r3, [r3, #0]
 80136c0:	2b00      	cmp	r3, #0
 80136c2:	f000 80d0 	beq.w	8013866 <_tx_trace_object_register+0x1ba>
    {

        /* Trace buffer is enabled, proceed.  */

        /* Pickup the total entries.  */
        entries =  _tx_trace_total_registry_entries;
 80136c6:	4b6c      	ldr	r3, [pc, #432]	; (8013878 <_tx_trace_object_register+0x1cc>)
 80136c8:	681b      	ldr	r3, [r3, #0]
 80136ca:	623b      	str	r3, [r7, #32]

        /* Determine if there are available entries in the registry.  */
        if (_tx_trace_available_registry_entries != ((ULONG) 0))
 80136cc:	4b6b      	ldr	r3, [pc, #428]	; (801387c <_tx_trace_object_register+0x1d0>)
 80136ce:	681b      	ldr	r3, [r3, #0]
 80136d0:	2b00      	cmp	r3, #0
 80136d2:	f000 80c8 	beq.w	8013866 <_tx_trace_object_register+0x1ba>
        {

            /* There are more available entries, proceed.  */

            /* Initialize found to the max entries... indicating no space was found.  */
            found =       entries;
 80136d6:	6a3b      	ldr	r3, [r7, #32]
 80136d8:	62bb      	str	r3, [r7, #40]	; 0x28
            loop_break =  TX_FALSE;
 80136da:	2300      	movs	r3, #0
 80136dc:	627b      	str	r3, [r7, #36]	; 0x24

            /* Loop to find available entry.  */
            i =  _tx_trace_registry_search_start;
 80136de:	4b68      	ldr	r3, [pc, #416]	; (8013880 <_tx_trace_object_register+0x1d4>)
 80136e0:	681b      	ldr	r3, [r3, #0]
 80136e2:	62fb      	str	r3, [r7, #44]	; 0x2c
            do
            {

                /* Setup the registry entry pointer.  */
                work_ptr =   TX_OBJECT_TO_UCHAR_POINTER_CONVERT(_tx_trace_registry_start_ptr);
 80136e4:	4b63      	ldr	r3, [pc, #396]	; (8013874 <_tx_trace_object_register+0x1c8>)
 80136e6:	681b      	ldr	r3, [r3, #0]
 80136e8:	61fb      	str	r3, [r7, #28]
                work_ptr =   TX_UCHAR_POINTER_ADD(work_ptr, ((sizeof(TX_TRACE_OBJECT_ENTRY))*i));
 80136ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80136ec:	4613      	mov	r3, r2
 80136ee:	005b      	lsls	r3, r3, #1
 80136f0:	4413      	add	r3, r2
 80136f2:	011b      	lsls	r3, r3, #4
 80136f4:	461a      	mov	r2, r3
 80136f6:	69fb      	ldr	r3, [r7, #28]
 80136f8:	4413      	add	r3, r2
 80136fa:	61fb      	str	r3, [r7, #28]
                entry_ptr =  TX_UCHAR_TO_OBJECT_POINTER_CONVERT(work_ptr);
 80136fc:	69fb      	ldr	r3, [r7, #28]
 80136fe:	61bb      	str	r3, [r7, #24]

                /* Determine if this is the first pass building the registry. A NULL object value indicates this part
                   of the registry has never been used.  */
                if (entry_ptr -> tx_trace_object_entry_thread_pointer == (ULONG) 0)
 8013700:	69bb      	ldr	r3, [r7, #24]
 8013702:	685b      	ldr	r3, [r3, #4]
 8013704:	2b00      	cmp	r3, #0
 8013706:	d103      	bne.n	8013710 <_tx_trace_object_register+0x64>
                {

                    /* Set found to this index and break out of the loop.  */
                    found =  i;
 8013708:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801370a:	62bb      	str	r3, [r7, #40]	; 0x28
                    loop_break =  TX_TRUE;
 801370c:	2301      	movs	r3, #1
 801370e:	627b      	str	r3, [r7, #36]	; 0x24
                }

                /* Determine if this entry matches the object pointer... we must reuse old entries left in the
                   registry.  */
                if (entry_ptr -> tx_trace_object_entry_thread_pointer == TX_POINTER_TO_ULONG_CONVERT(object_ptr))
 8013710:	69bb      	ldr	r3, [r7, #24]
 8013712:	685a      	ldr	r2, [r3, #4]
 8013714:	68bb      	ldr	r3, [r7, #8]
 8013716:	429a      	cmp	r2, r3
 8013718:	d103      	bne.n	8013722 <_tx_trace_object_register+0x76>
                {

                    /* Set found to this index and break out of the loop.  */
                    found =  i;
 801371a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801371c:	62bb      	str	r3, [r7, #40]	; 0x28
                    loop_break =  TX_TRUE;
 801371e:	2301      	movs	r3, #1
 8013720:	627b      	str	r3, [r7, #36]	; 0x24
                }

                /* Determine if we should break out of the loop.  */
                if (loop_break == TX_TRUE)
 8013722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013724:	2b01      	cmp	r3, #1
 8013726:	d02d      	beq.n	8013784 <_tx_trace_object_register+0xd8>
                    /* Yes, break out of the loop.  */
                    break;
                }

                /* Is this entry available?  */
                if (entry_ptr -> tx_trace_object_entry_available == TX_TRUE)
 8013728:	69bb      	ldr	r3, [r7, #24]
 801372a:	781b      	ldrb	r3, [r3, #0]
 801372c:	2b01      	cmp	r3, #1
 801372e:	d11a      	bne.n	8013766 <_tx_trace_object_register+0xba>
                {

                    /* Yes, determine if we have not already found an empty slot.  */
                    if (found == entries)
 8013730:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013732:	6a3b      	ldr	r3, [r7, #32]
 8013734:	429a      	cmp	r2, r3
 8013736:	d102      	bne.n	801373e <_tx_trace_object_register+0x92>
                    {
                        found =  i;
 8013738:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801373a:	62bb      	str	r3, [r7, #40]	; 0x28
 801373c:	e013      	b.n	8013766 <_tx_trace_object_register+0xba>
                    }
                    else
                    {

                        /* Setup a pointer to the found entry.  */
                        work_ptr =   TX_OBJECT_TO_UCHAR_POINTER_CONVERT(_tx_trace_registry_start_ptr);
 801373e:	4b4d      	ldr	r3, [pc, #308]	; (8013874 <_tx_trace_object_register+0x1c8>)
 8013740:	681b      	ldr	r3, [r3, #0]
 8013742:	61fb      	str	r3, [r7, #28]
                        work_ptr =   TX_UCHAR_POINTER_ADD(work_ptr, ((sizeof(TX_TRACE_OBJECT_ENTRY))*found));
 8013744:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013746:	4613      	mov	r3, r2
 8013748:	005b      	lsls	r3, r3, #1
 801374a:	4413      	add	r3, r2
 801374c:	011b      	lsls	r3, r3, #4
 801374e:	461a      	mov	r2, r3
 8013750:	69fb      	ldr	r3, [r7, #28]
 8013752:	4413      	add	r3, r2
 8013754:	61fb      	str	r3, [r7, #28]
                        entry_ptr =  TX_UCHAR_TO_OBJECT_POINTER_CONVERT(work_ptr);
 8013756:	69fb      	ldr	r3, [r7, #28]
 8013758:	61bb      	str	r3, [r7, #24]

                         if (entry_ptr -> tx_trace_object_entry_type != ((UCHAR) 0))
 801375a:	69bb      	ldr	r3, [r7, #24]
 801375c:	785b      	ldrb	r3, [r3, #1]
 801375e:	2b00      	cmp	r3, #0
 8013760:	d001      	beq.n	8013766 <_tx_trace_object_register+0xba>
                         {
                            found =  i;
 8013762:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013764:	62bb      	str	r3, [r7, #40]	; 0x28
                         }
                    }
                }

                /* Move to the next entry.  */
                i++;
 8013766:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013768:	3301      	adds	r3, #1
 801376a:	62fb      	str	r3, [r7, #44]	; 0x2c

                /* Determine if we have wrapped the list.  */
                if (i >= entries)
 801376c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801376e:	6a3b      	ldr	r3, [r7, #32]
 8013770:	429a      	cmp	r2, r3
 8013772:	d301      	bcc.n	8013778 <_tx_trace_object_register+0xcc>
                {

                    /* Yes, wrap to the beginning of the list.  */
                    i =  ((ULONG) 0);
 8013774:	2300      	movs	r3, #0
 8013776:	62fb      	str	r3, [r7, #44]	; 0x2c
                }

            } while (i != _tx_trace_registry_search_start);
 8013778:	4b41      	ldr	r3, [pc, #260]	; (8013880 <_tx_trace_object_register+0x1d4>)
 801377a:	681b      	ldr	r3, [r3, #0]
 801377c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801377e:	429a      	cmp	r2, r3
 8013780:	d1b0      	bne.n	80136e4 <_tx_trace_object_register+0x38>
 8013782:	e000      	b.n	8013786 <_tx_trace_object_register+0xda>
                    break;
 8013784:	bf00      	nop

            /* Now determine if an empty or reuse entry has been found.  */
            if (found < entries)
 8013786:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013788:	6a3b      	ldr	r3, [r7, #32]
 801378a:	429a      	cmp	r2, r3
 801378c:	d26b      	bcs.n	8013866 <_tx_trace_object_register+0x1ba>
            {

                /* Decrement the number of available entries.  */
                _tx_trace_available_registry_entries--;
 801378e:	4b3b      	ldr	r3, [pc, #236]	; (801387c <_tx_trace_object_register+0x1d0>)
 8013790:	681b      	ldr	r3, [r3, #0]
 8013792:	3b01      	subs	r3, #1
 8013794:	4a39      	ldr	r2, [pc, #228]	; (801387c <_tx_trace_object_register+0x1d0>)
 8013796:	6013      	str	r3, [r2, #0]

                /* Adjust the search index to the next entry.  */
                if ((found + ((ULONG) 1)) < entries)
 8013798:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801379a:	3301      	adds	r3, #1
 801379c:	6a3a      	ldr	r2, [r7, #32]
 801379e:	429a      	cmp	r2, r3
 80137a0:	d904      	bls.n	80137ac <_tx_trace_object_register+0x100>
                {

                    /* Start searching from the next index.  */
                    _tx_trace_registry_search_start =  found + ((ULONG) 1);
 80137a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80137a4:	3301      	adds	r3, #1
 80137a6:	4a36      	ldr	r2, [pc, #216]	; (8013880 <_tx_trace_object_register+0x1d4>)
 80137a8:	6013      	str	r3, [r2, #0]
 80137aa:	e002      	b.n	80137b2 <_tx_trace_object_register+0x106>
                }
                else
                {

                    /* Reset the search to the beginning of the list. */
                    _tx_trace_registry_search_start =  ((ULONG) 0);
 80137ac:	4b34      	ldr	r3, [pc, #208]	; (8013880 <_tx_trace_object_register+0x1d4>)
 80137ae:	2200      	movs	r2, #0
 80137b0:	601a      	str	r2, [r3, #0]
                }

                /* Yes, an entry has been found...  */

                /* Build a pointer to the found entry.  */
                work_ptr =   TX_OBJECT_TO_UCHAR_POINTER_CONVERT(_tx_trace_registry_start_ptr);
 80137b2:	4b30      	ldr	r3, [pc, #192]	; (8013874 <_tx_trace_object_register+0x1c8>)
 80137b4:	681b      	ldr	r3, [r3, #0]
 80137b6:	61fb      	str	r3, [r7, #28]
                work_ptr =   TX_UCHAR_POINTER_ADD(work_ptr, ((sizeof(TX_TRACE_OBJECT_ENTRY))*found));
 80137b8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80137ba:	4613      	mov	r3, r2
 80137bc:	005b      	lsls	r3, r3, #1
 80137be:	4413      	add	r3, r2
 80137c0:	011b      	lsls	r3, r3, #4
 80137c2:	461a      	mov	r2, r3
 80137c4:	69fb      	ldr	r3, [r7, #28]
 80137c6:	4413      	add	r3, r2
 80137c8:	61fb      	str	r3, [r7, #28]
                entry_ptr =  TX_UCHAR_TO_OBJECT_POINTER_CONVERT(work_ptr);
 80137ca:	69fb      	ldr	r3, [r7, #28]
 80137cc:	61bb      	str	r3, [r7, #24]

                /* Populate the found entry!  */
                entry_ptr -> tx_trace_object_entry_available =       ((UCHAR) TX_FALSE);
 80137ce:	69bb      	ldr	r3, [r7, #24]
 80137d0:	2200      	movs	r2, #0
 80137d2:	701a      	strb	r2, [r3, #0]
                entry_ptr -> tx_trace_object_entry_type =            object_type;
 80137d4:	69bb      	ldr	r3, [r7, #24]
 80137d6:	7bfa      	ldrb	r2, [r7, #15]
 80137d8:	705a      	strb	r2, [r3, #1]
                entry_ptr -> tx_trace_object_entry_thread_pointer =  TX_POINTER_TO_ULONG_CONVERT(object_ptr);
 80137da:	68ba      	ldr	r2, [r7, #8]
 80137dc:	69bb      	ldr	r3, [r7, #24]
 80137de:	605a      	str	r2, [r3, #4]
                entry_ptr -> tx_trace_object_entry_param_1 =         parameter_1;
 80137e0:	69bb      	ldr	r3, [r7, #24]
 80137e2:	683a      	ldr	r2, [r7, #0]
 80137e4:	609a      	str	r2, [r3, #8]
                entry_ptr -> tx_trace_object_entry_param_2 =         parameter_2;
 80137e6:	69bb      	ldr	r3, [r7, #24]
 80137e8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80137ea:	60da      	str	r2, [r3, #12]

                /* Loop to copy the object name string...  */
                for (i = ((ULONG) 0); i < (((ULONG) TX_TRACE_OBJECT_REGISTRY_NAME)-((ULONG) 1)); i++)
 80137ec:	2300      	movs	r3, #0
 80137ee:	62fb      	str	r3, [r7, #44]	; 0x2c
 80137f0:	e014      	b.n	801381c <_tx_trace_object_register+0x170>
                {

                    /* Setup work pointer to the object name character.  */
                    work_ptr =  TX_CHAR_TO_UCHAR_POINTER_CONVERT(object_name);
 80137f2:	687b      	ldr	r3, [r7, #4]
 80137f4:	61fb      	str	r3, [r7, #28]
                    work_ptr =  TX_UCHAR_POINTER_ADD(work_ptr, i);
 80137f6:	69fa      	ldr	r2, [r7, #28]
 80137f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80137fa:	4413      	add	r3, r2
 80137fc:	61fb      	str	r3, [r7, #28]

                    /* Copy a character of the name.  */
                    entry_ptr -> tx_trace_object_entry_name[i] =  (UCHAR) *work_ptr;
 80137fe:	69fb      	ldr	r3, [r7, #28]
 8013800:	7819      	ldrb	r1, [r3, #0]
 8013802:	69ba      	ldr	r2, [r7, #24]
 8013804:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013806:	4413      	add	r3, r2
 8013808:	3310      	adds	r3, #16
 801380a:	460a      	mov	r2, r1
 801380c:	701a      	strb	r2, [r3, #0]

                    /* Determine if we are at the end.  */
                    if (*work_ptr == ((UCHAR) 0))
 801380e:	69fb      	ldr	r3, [r7, #28]
 8013810:	781b      	ldrb	r3, [r3, #0]
 8013812:	2b00      	cmp	r3, #0
 8013814:	d006      	beq.n	8013824 <_tx_trace_object_register+0x178>
                for (i = ((ULONG) 0); i < (((ULONG) TX_TRACE_OBJECT_REGISTRY_NAME)-((ULONG) 1)); i++)
 8013816:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013818:	3301      	adds	r3, #1
 801381a:	62fb      	str	r3, [r7, #44]	; 0x2c
 801381c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801381e:	2b1e      	cmp	r3, #30
 8013820:	d9e7      	bls.n	80137f2 <_tx_trace_object_register+0x146>
 8013822:	e000      	b.n	8013826 <_tx_trace_object_register+0x17a>
                    {
                        break;
 8013824:	bf00      	nop
                    }
                }

                /* Null terminate the object string.  */
                entry_ptr -> tx_trace_object_entry_name[i] =  (UCHAR) 0;
 8013826:	69ba      	ldr	r2, [r7, #24]
 8013828:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801382a:	4413      	add	r3, r2
 801382c:	3310      	adds	r3, #16
 801382e:	2200      	movs	r2, #0
 8013830:	701a      	strb	r2, [r3, #0]

                /* Determine if a thread object type is present.  */
                if (object_type == TX_TRACE_OBJECT_TYPE_THREAD)
 8013832:	7bfb      	ldrb	r3, [r7, #15]
 8013834:	2b01      	cmp	r3, #1
 8013836:	d110      	bne.n	801385a <_tx_trace_object_register+0x1ae>
                {

                    /* Yes, a thread object is present.  */

                    /* Setup a pointer to the thread.  */
                    thread_ptr =  TX_VOID_TO_THREAD_POINTER_CONVERT(object_ptr);
 8013838:	68bb      	ldr	r3, [r7, #8]
 801383a:	617b      	str	r3, [r7, #20]

                    /* Store the thread's priority in the reserved bits.  */
                    entry_ptr -> tx_trace_object_entry_reserved1 =  ((UCHAR) 0x80) | ((UCHAR) (thread_ptr -> tx_thread_priority >> ((UCHAR) 8)));
 801383c:	697b      	ldr	r3, [r7, #20]
 801383e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013840:	0a1b      	lsrs	r3, r3, #8
 8013842:	b2db      	uxtb	r3, r3
 8013844:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8013848:	b2da      	uxtb	r2, r3
 801384a:	69bb      	ldr	r3, [r7, #24]
 801384c:	709a      	strb	r2, [r3, #2]
                    entry_ptr -> tx_trace_object_entry_reserved2 =  (UCHAR) (thread_ptr -> tx_thread_priority & ((UCHAR) 0xFF));
 801384e:	697b      	ldr	r3, [r7, #20]
 8013850:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013852:	b2da      	uxtb	r2, r3
 8013854:	69bb      	ldr	r3, [r7, #24]
 8013856:	70da      	strb	r2, [r3, #3]
                }
            }
        }
    }
#endif
}
 8013858:	e005      	b.n	8013866 <_tx_trace_object_register+0x1ba>
                    entry_ptr -> tx_trace_object_entry_reserved1 =  ((UCHAR) 0);
 801385a:	69bb      	ldr	r3, [r7, #24]
 801385c:	2200      	movs	r2, #0
 801385e:	709a      	strb	r2, [r3, #2]
                    entry_ptr -> tx_trace_object_entry_reserved2 =  ((UCHAR) 0);
 8013860:	69bb      	ldr	r3, [r7, #24]
 8013862:	2200      	movs	r2, #0
 8013864:	70da      	strb	r2, [r3, #3]
}
 8013866:	bf00      	nop
 8013868:	3734      	adds	r7, #52	; 0x34
 801386a:	46bd      	mov	sp, r7
 801386c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013870:	4770      	bx	lr
 8013872:	bf00      	nop
 8013874:	20002804 	.word	0x20002804
 8013878:	20002820 	.word	0x20002820
 801387c:	20002824 	.word	0x20002824
 8013880:	20002828 	.word	0x20002828

08013884 <_txe_byte_allocate>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_byte_allocate(TX_BYTE_POOL *pool_ptr, VOID **memory_ptr,
                                    ULONG memory_size,  ULONG wait_option)
{
 8013884:	b580      	push	{r7, lr}
 8013886:	b08a      	sub	sp, #40	; 0x28
 8013888:	af00      	add	r7, sp, #0
 801388a:	60f8      	str	r0, [r7, #12]
 801388c:	60b9      	str	r1, [r7, #8]
 801388e:	607a      	str	r2, [r7, #4]
 8013890:	603b      	str	r3, [r7, #0]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 8013892:	2300      	movs	r3, #0
 8013894:	627b      	str	r3, [r7, #36]	; 0x24

    /* Check for an invalid byte pool pointer.  */
    if (pool_ptr == TX_NULL)
 8013896:	68fb      	ldr	r3, [r7, #12]
 8013898:	2b00      	cmp	r3, #0
 801389a:	d102      	bne.n	80138a2 <_txe_byte_allocate+0x1e>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 801389c:	2302      	movs	r3, #2
 801389e:	627b      	str	r3, [r7, #36]	; 0x24
 80138a0:	e029      	b.n	80138f6 <_txe_byte_allocate+0x72>
    }

    /* Now check for invalid pool ID.  */
    else if  (pool_ptr -> tx_byte_pool_id != TX_BYTE_POOL_ID)
 80138a2:	68fb      	ldr	r3, [r7, #12]
 80138a4:	681b      	ldr	r3, [r3, #0]
 80138a6:	4a2d      	ldr	r2, [pc, #180]	; (801395c <_txe_byte_allocate+0xd8>)
 80138a8:	4293      	cmp	r3, r2
 80138aa:	d002      	beq.n	80138b2 <_txe_byte_allocate+0x2e>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 80138ac:	2302      	movs	r3, #2
 80138ae:	627b      	str	r3, [r7, #36]	; 0x24
 80138b0:	e021      	b.n	80138f6 <_txe_byte_allocate+0x72>
    }

    /* Check for an invalid destination for return pointer.  */
    else if (memory_ptr == TX_NULL)
 80138b2:	68bb      	ldr	r3, [r7, #8]
 80138b4:	2b00      	cmp	r3, #0
 80138b6:	d102      	bne.n	80138be <_txe_byte_allocate+0x3a>
    {

        /* Null destination pointer, return appropriate error.  */
        status =  TX_PTR_ERROR;
 80138b8:	2303      	movs	r3, #3
 80138ba:	627b      	str	r3, [r7, #36]	; 0x24
 80138bc:	e01b      	b.n	80138f6 <_txe_byte_allocate+0x72>
    }

    /* Check for an invalid memory size.  */
    else if (memory_size == ((ULONG) 0))
 80138be:	687b      	ldr	r3, [r7, #4]
 80138c0:	2b00      	cmp	r3, #0
 80138c2:	d102      	bne.n	80138ca <_txe_byte_allocate+0x46>
    {

        /* Error in size, return appropriate error.  */
        status =  TX_SIZE_ERROR;
 80138c4:	2305      	movs	r3, #5
 80138c6:	627b      	str	r3, [r7, #36]	; 0x24
 80138c8:	e015      	b.n	80138f6 <_txe_byte_allocate+0x72>
    }

    /* Determine if the size is greater than the pool size.  */
    else if (memory_size > pool_ptr -> tx_byte_pool_size)
 80138ca:	68fb      	ldr	r3, [r7, #12]
 80138cc:	69db      	ldr	r3, [r3, #28]
 80138ce:	687a      	ldr	r2, [r7, #4]
 80138d0:	429a      	cmp	r2, r3
 80138d2:	d902      	bls.n	80138da <_txe_byte_allocate+0x56>
    {

        /* Error in size, return appropriate error.  */
        status =  TX_SIZE_ERROR;
 80138d4:	2305      	movs	r3, #5
 80138d6:	627b      	str	r3, [r7, #36]	; 0x24
 80138d8:	e00d      	b.n	80138f6 <_txe_byte_allocate+0x72>
    else
    {

        /* Check for a wait option error.  Only threads are allowed any form of
           suspension.  */
        if (wait_option != TX_NO_WAIT)
 80138da:	683b      	ldr	r3, [r7, #0]
 80138dc:	2b00      	cmp	r3, #0
 80138de:	d00a      	beq.n	80138f6 <_txe_byte_allocate+0x72>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80138e0:	f3ef 8305 	mrs	r3, IPSR
 80138e4:	61fb      	str	r3, [r7, #28]
    return(ipsr_value);
 80138e6:	69fa      	ldr	r2, [r7, #28]
        {

            /* Is call from ISR or Initialization?  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 80138e8:	4b1d      	ldr	r3, [pc, #116]	; (8013960 <_txe_byte_allocate+0xdc>)
 80138ea:	681b      	ldr	r3, [r3, #0]
 80138ec:	4313      	orrs	r3, r2
 80138ee:	2b00      	cmp	r3, #0
 80138f0:	d001      	beq.n	80138f6 <_txe_byte_allocate+0x72>
            {

                /* A non-thread is trying to suspend, return appropriate error code.  */
                status =  TX_WAIT_ERROR;
 80138f2:	2304      	movs	r3, #4
 80138f4:	627b      	str	r3, [r7, #36]	; 0x24
        }
    }
#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Check for timer execution.  */
    if (status == TX_SUCCESS)
 80138f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80138f8:	2b00      	cmp	r3, #0
 80138fa:	d108      	bne.n	801390e <_txe_byte_allocate+0x8a>
    {

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(thread_ptr)
 80138fc:	4b19      	ldr	r3, [pc, #100]	; (8013964 <_txe_byte_allocate+0xe0>)
 80138fe:	681b      	ldr	r3, [r3, #0]
 8013900:	623b      	str	r3, [r7, #32]

        /* Check for invalid caller of this function.  First check for a calling thread.  */
        if (thread_ptr == &_tx_timer_thread)
 8013902:	6a3b      	ldr	r3, [r7, #32]
 8013904:	4a18      	ldr	r2, [pc, #96]	; (8013968 <_txe_byte_allocate+0xe4>)
 8013906:	4293      	cmp	r3, r2
 8013908:	d101      	bne.n	801390e <_txe_byte_allocate+0x8a>
        {

            /* Invalid caller of this function, return appropriate error code.  */
            status =  TX_CALLER_ERROR;
 801390a:	2313      	movs	r3, #19
 801390c:	627b      	str	r3, [r7, #36]	; 0x24
        }
    }
#endif

    /* Is everything still okay?  */
    if (status == TX_SUCCESS)
 801390e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013910:	2b00      	cmp	r3, #0
 8013912:	d114      	bne.n	801393e <_txe_byte_allocate+0xba>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8013914:	f3ef 8305 	mrs	r3, IPSR
 8013918:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 801391a:	69ba      	ldr	r2, [r7, #24]
    {

        /* Check for interrupt call.  */
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 801391c:	4b10      	ldr	r3, [pc, #64]	; (8013960 <_txe_byte_allocate+0xdc>)
 801391e:	681b      	ldr	r3, [r3, #0]
 8013920:	4313      	orrs	r3, r2
 8013922:	2b00      	cmp	r3, #0
 8013924:	d00b      	beq.n	801393e <_txe_byte_allocate+0xba>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8013926:	f3ef 8305 	mrs	r3, IPSR
 801392a:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 801392c:	697a      	ldr	r2, [r7, #20]
        {

            /* Now, make sure the call is from an interrupt and not initialization.  */
            if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 801392e:	4b0c      	ldr	r3, [pc, #48]	; (8013960 <_txe_byte_allocate+0xdc>)
 8013930:	681b      	ldr	r3, [r3, #0]
 8013932:	4313      	orrs	r3, r2
 8013934:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 8013938:	d201      	bcs.n	801393e <_txe_byte_allocate+0xba>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 801393a:	2313      	movs	r3, #19
 801393c:	627b      	str	r3, [r7, #36]	; 0x24
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 801393e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013940:	2b00      	cmp	r3, #0
 8013942:	d106      	bne.n	8013952 <_txe_byte_allocate+0xce>
    {

        /* Call actual byte memory allocate function.  */
        status =  _tx_byte_allocate(pool_ptr, memory_ptr, memory_size,  wait_option);
 8013944:	683b      	ldr	r3, [r7, #0]
 8013946:	687a      	ldr	r2, [r7, #4]
 8013948:	68b9      	ldr	r1, [r7, #8]
 801394a:	68f8      	ldr	r0, [r7, #12]
 801394c:	f7fc fdce 	bl	80104ec <_tx_byte_allocate>
 8013950:	6278      	str	r0, [r7, #36]	; 0x24
    }

    /* Return completion status.  */
    return(status);
 8013952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8013954:	4618      	mov	r0, r3
 8013956:	3728      	adds	r7, #40	; 0x28
 8013958:	46bd      	mov	sp, r7
 801395a:	bd80      	pop	{r7, pc}
 801395c:	42595445 	.word	0x42595445
 8013960:	20000010 	.word	0x20000010
 8013964:	200021f8 	.word	0x200021f8
 8013968:	20002340 	.word	0x20002340

0801396c <_txe_byte_pool_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_byte_pool_create(TX_BYTE_POOL *pool_ptr, CHAR *name_ptr, VOID *pool_start, ULONG pool_size, UINT pool_control_block_size)
{
 801396c:	b580      	push	{r7, lr}
 801396e:	b092      	sub	sp, #72	; 0x48
 8013970:	af00      	add	r7, sp, #0
 8013972:	60f8      	str	r0, [r7, #12]
 8013974:	60b9      	str	r1, [r7, #8]
 8013976:	607a      	str	r2, [r7, #4]
 8013978:	603b      	str	r3, [r7, #0]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 801397a:	2300      	movs	r3, #0
 801397c:	647b      	str	r3, [r7, #68]	; 0x44

    /* Check for an invalid byte pool pointer.  */
    if (pool_ptr == TX_NULL)
 801397e:	68fb      	ldr	r3, [r7, #12]
 8013980:	2b00      	cmp	r3, #0
 8013982:	d102      	bne.n	801398a <_txe_byte_pool_create+0x1e>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 8013984:	2302      	movs	r3, #2
 8013986:	647b      	str	r3, [r7, #68]	; 0x44
 8013988:	e075      	b.n	8013a76 <_txe_byte_pool_create+0x10a>
    }

    /* Now see if the pool control block size is valid.  */
    else if (pool_control_block_size != (sizeof(TX_BYTE_POOL)))
 801398a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801398c:	2b34      	cmp	r3, #52	; 0x34
 801398e:	d002      	beq.n	8013996 <_txe_byte_pool_create+0x2a>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 8013990:	2302      	movs	r3, #2
 8013992:	647b      	str	r3, [r7, #68]	; 0x44
 8013994:	e06f      	b.n	8013a76 <_txe_byte_pool_create+0x10a>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8013996:	f3ef 8310 	mrs	r3, PRIMASK
 801399a:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 801399c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 801399e:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 80139a0:	b672      	cpsid	i
    return(int_posture);
 80139a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 80139a4:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 80139a6:	4b3b      	ldr	r3, [pc, #236]	; (8013a94 <_txe_byte_pool_create+0x128>)
 80139a8:	681b      	ldr	r3, [r3, #0]
 80139aa:	3301      	adds	r3, #1
 80139ac:	4a39      	ldr	r2, [pc, #228]	; (8013a94 <_txe_byte_pool_create+0x128>)
 80139ae:	6013      	str	r3, [r2, #0]
 80139b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80139b2:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80139b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80139b6:	f383 8810 	msr	PRIMASK, r3
}
 80139ba:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_pool =   _tx_byte_pool_created_ptr;
 80139bc:	4b36      	ldr	r3, [pc, #216]	; (8013a98 <_txe_byte_pool_create+0x12c>)
 80139be:	681b      	ldr	r3, [r3, #0]
 80139c0:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_byte_pool_created_count; i++)
 80139c2:	2300      	movs	r3, #0
 80139c4:	643b      	str	r3, [r7, #64]	; 0x40
 80139c6:	e009      	b.n	80139dc <_txe_byte_pool_create+0x70>
        {

            /* Determine if this byte pool matches the pool in the list.  */
            if (pool_ptr == next_pool)
 80139c8:	68fa      	ldr	r2, [r7, #12]
 80139ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80139cc:	429a      	cmp	r2, r3
 80139ce:	d00b      	beq.n	80139e8 <_txe_byte_pool_create+0x7c>
            }
            else
            {

                /* Move to the next pool.  */
                next_pool =  next_pool -> tx_byte_pool_created_next;
 80139d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80139d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80139d4:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_byte_pool_created_count; i++)
 80139d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80139d8:	3301      	adds	r3, #1
 80139da:	643b      	str	r3, [r7, #64]	; 0x40
 80139dc:	4b2f      	ldr	r3, [pc, #188]	; (8013a9c <_txe_byte_pool_create+0x130>)
 80139de:	681b      	ldr	r3, [r3, #0]
 80139e0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80139e2:	429a      	cmp	r2, r3
 80139e4:	d3f0      	bcc.n	80139c8 <_txe_byte_pool_create+0x5c>
 80139e6:	e000      	b.n	80139ea <_txe_byte_pool_create+0x7e>
                break;
 80139e8:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80139ea:	f3ef 8310 	mrs	r3, PRIMASK
 80139ee:	623b      	str	r3, [r7, #32]
    return(posture);
 80139f0:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 80139f2:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 80139f4:	b672      	cpsid	i
    return(int_posture);
 80139f6:	69fb      	ldr	r3, [r7, #28]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 80139f8:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 80139fa:	4b26      	ldr	r3, [pc, #152]	; (8013a94 <_txe_byte_pool_create+0x128>)
 80139fc:	681b      	ldr	r3, [r3, #0]
 80139fe:	3b01      	subs	r3, #1
 8013a00:	4a24      	ldr	r2, [pc, #144]	; (8013a94 <_txe_byte_pool_create+0x128>)
 8013a02:	6013      	str	r3, [r2, #0]
 8013a04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013a06:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8013a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a0a:	f383 8810 	msr	PRIMASK, r3
}
 8013a0e:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 8013a10:	f7fe fef0 	bl	80127f4 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate pool.  */
        if (pool_ptr == next_pool)
 8013a14:	68fa      	ldr	r2, [r7, #12]
 8013a16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013a18:	429a      	cmp	r2, r3
 8013a1a:	d102      	bne.n	8013a22 <_txe_byte_pool_create+0xb6>
        {

            /* Pool is already created, return appropriate error code.  */
            status =  TX_POOL_ERROR;
 8013a1c:	2302      	movs	r3, #2
 8013a1e:	647b      	str	r3, [r7, #68]	; 0x44
 8013a20:	e029      	b.n	8013a76 <_txe_byte_pool_create+0x10a>
        }

        /* Check for an invalid starting address.  */
        else if (pool_start == TX_NULL)
 8013a22:	687b      	ldr	r3, [r7, #4]
 8013a24:	2b00      	cmp	r3, #0
 8013a26:	d102      	bne.n	8013a2e <_txe_byte_pool_create+0xc2>
        {

            /* Null starting address pointer, return appropriate error.  */
            status =  TX_PTR_ERROR;
 8013a28:	2303      	movs	r3, #3
 8013a2a:	647b      	str	r3, [r7, #68]	; 0x44
 8013a2c:	e023      	b.n	8013a76 <_txe_byte_pool_create+0x10a>
        }

        /* Check for invalid pool size.  */
        else if (pool_size < TX_BYTE_POOL_MIN)
 8013a2e:	683b      	ldr	r3, [r7, #0]
 8013a30:	2b63      	cmp	r3, #99	; 0x63
 8013a32:	d802      	bhi.n	8013a3a <_txe_byte_pool_create+0xce>
        {

            /* Pool not big enough, return appropriate error.  */
            status =  TX_SIZE_ERROR;
 8013a34:	2305      	movs	r3, #5
 8013a36:	647b      	str	r3, [r7, #68]	; 0x44
 8013a38:	e01d      	b.n	8013a76 <_txe_byte_pool_create+0x10a>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 8013a3a:	4b19      	ldr	r3, [pc, #100]	; (8013aa0 <_txe_byte_pool_create+0x134>)
 8013a3c:	681b      	ldr	r3, [r3, #0]
 8013a3e:	637b      	str	r3, [r7, #52]	; 0x34

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (thread_ptr == &_tx_timer_thread)
 8013a40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013a42:	4a18      	ldr	r2, [pc, #96]	; (8013aa4 <_txe_byte_pool_create+0x138>)
 8013a44:	4293      	cmp	r3, r2
 8013a46:	d101      	bne.n	8013a4c <_txe_byte_pool_create+0xe0>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 8013a48:	2313      	movs	r3, #19
 8013a4a:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8013a4c:	f3ef 8305 	mrs	r3, IPSR
 8013a50:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 8013a52:	69ba      	ldr	r2, [r7, #24]
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8013a54:	4b14      	ldr	r3, [pc, #80]	; (8013aa8 <_txe_byte_pool_create+0x13c>)
 8013a56:	681b      	ldr	r3, [r3, #0]
 8013a58:	4313      	orrs	r3, r2
 8013a5a:	2b00      	cmp	r3, #0
 8013a5c:	d00b      	beq.n	8013a76 <_txe_byte_pool_create+0x10a>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8013a5e:	f3ef 8305 	mrs	r3, IPSR
 8013a62:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 8013a64:	697a      	ldr	r2, [r7, #20]
            {

                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 8013a66:	4b10      	ldr	r3, [pc, #64]	; (8013aa8 <_txe_byte_pool_create+0x13c>)
 8013a68:	681b      	ldr	r3, [r3, #0]
 8013a6a:	4313      	orrs	r3, r2
 8013a6c:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 8013a70:	d201      	bcs.n	8013a76 <_txe_byte_pool_create+0x10a>
                {

                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 8013a72:	2313      	movs	r3, #19
 8013a74:	647b      	str	r3, [r7, #68]	; 0x44
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8013a76:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013a78:	2b00      	cmp	r3, #0
 8013a7a:	d106      	bne.n	8013a8a <_txe_byte_pool_create+0x11e>
    {

        /* Call actual byte pool create function.  */
        status =  _tx_byte_pool_create(pool_ptr, name_ptr, pool_start, pool_size);
 8013a7c:	683b      	ldr	r3, [r7, #0]
 8013a7e:	687a      	ldr	r2, [r7, #4]
 8013a80:	68b9      	ldr	r1, [r7, #8]
 8013a82:	68f8      	ldr	r0, [r7, #12]
 8013a84:	f7fc ff1e 	bl	80108c4 <_tx_byte_pool_create>
 8013a88:	6478      	str	r0, [r7, #68]	; 0x44
    }

    /* Return completion status.  */
    return(status);
 8013a8a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8013a8c:	4618      	mov	r0, r3
 8013a8e:	3748      	adds	r7, #72	; 0x48
 8013a90:	46bd      	mov	sp, r7
 8013a92:	bd80      	pop	{r7, pc}
 8013a94:	20002290 	.word	0x20002290
 8013a98:	200021e8 	.word	0x200021e8
 8013a9c:	200021ec 	.word	0x200021ec
 8013aa0:	200021f8 	.word	0x200021f8
 8013aa4:	20002340 	.word	0x20002340
 8013aa8:	20000010 	.word	0x20000010

08013aac <_txe_mutex_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_mutex_create(TX_MUTEX *mutex_ptr, CHAR *name_ptr, UINT inherit, UINT mutex_control_block_size)
{
 8013aac:	b580      	push	{r7, lr}
 8013aae:	b092      	sub	sp, #72	; 0x48
 8013ab0:	af00      	add	r7, sp, #0
 8013ab2:	60f8      	str	r0, [r7, #12]
 8013ab4:	60b9      	str	r1, [r7, #8]
 8013ab6:	607a      	str	r2, [r7, #4]
 8013ab8:	603b      	str	r3, [r7, #0]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 8013aba:	2300      	movs	r3, #0
 8013abc:	647b      	str	r3, [r7, #68]	; 0x44

    /* Check for an invalid mutex pointer.  */
    if (mutex_ptr == TX_NULL)
 8013abe:	68fb      	ldr	r3, [r7, #12]
 8013ac0:	2b00      	cmp	r3, #0
 8013ac2:	d102      	bne.n	8013aca <_txe_mutex_create+0x1e>
    {

        /* Mutex pointer is invalid, return appropriate error code.  */
        status =  TX_MUTEX_ERROR;
 8013ac4:	231c      	movs	r3, #28
 8013ac6:	647b      	str	r3, [r7, #68]	; 0x44
 8013ac8:	e053      	b.n	8013b72 <_txe_mutex_create+0xc6>
    }

    /* Now check to make sure the control block is the correct size.  */
    else if (mutex_control_block_size != (sizeof(TX_MUTEX)))
 8013aca:	683b      	ldr	r3, [r7, #0]
 8013acc:	2b34      	cmp	r3, #52	; 0x34
 8013ace:	d002      	beq.n	8013ad6 <_txe_mutex_create+0x2a>
    {

        /* Mutex pointer is invalid, return appropriate error code.  */
        status =  TX_MUTEX_ERROR;
 8013ad0:	231c      	movs	r3, #28
 8013ad2:	647b      	str	r3, [r7, #68]	; 0x44
 8013ad4:	e04d      	b.n	8013b72 <_txe_mutex_create+0xc6>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8013ad6:	f3ef 8310 	mrs	r3, PRIMASK
 8013ada:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 8013adc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 8013ade:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 8013ae0:	b672      	cpsid	i
    return(int_posture);
 8013ae2:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 8013ae4:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 8013ae6:	4b3a      	ldr	r3, [pc, #232]	; (8013bd0 <_txe_mutex_create+0x124>)
 8013ae8:	681b      	ldr	r3, [r3, #0]
 8013aea:	3301      	adds	r3, #1
 8013aec:	4a38      	ldr	r2, [pc, #224]	; (8013bd0 <_txe_mutex_create+0x124>)
 8013aee:	6013      	str	r3, [r2, #0]
 8013af0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013af2:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8013af4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013af6:	f383 8810 	msr	PRIMASK, r3
}
 8013afa:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_mutex =   _tx_mutex_created_ptr;
 8013afc:	4b35      	ldr	r3, [pc, #212]	; (8013bd4 <_txe_mutex_create+0x128>)
 8013afe:	681b      	ldr	r3, [r3, #0]
 8013b00:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_mutex_created_count; i++)
 8013b02:	2300      	movs	r3, #0
 8013b04:	643b      	str	r3, [r7, #64]	; 0x40
 8013b06:	e009      	b.n	8013b1c <_txe_mutex_create+0x70>
        {

            /* Determine if this mutex matches the mutex in the list.  */
            if (mutex_ptr == next_mutex)
 8013b08:	68fa      	ldr	r2, [r7, #12]
 8013b0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013b0c:	429a      	cmp	r2, r3
 8013b0e:	d00b      	beq.n	8013b28 <_txe_mutex_create+0x7c>
            }
            else
            {

                /* Move to the next mutex.  */
                next_mutex =  next_mutex -> tx_mutex_created_next;
 8013b10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013b12:	6a1b      	ldr	r3, [r3, #32]
 8013b14:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_mutex_created_count; i++)
 8013b16:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013b18:	3301      	adds	r3, #1
 8013b1a:	643b      	str	r3, [r7, #64]	; 0x40
 8013b1c:	4b2e      	ldr	r3, [pc, #184]	; (8013bd8 <_txe_mutex_create+0x12c>)
 8013b1e:	681b      	ldr	r3, [r3, #0]
 8013b20:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8013b22:	429a      	cmp	r2, r3
 8013b24:	d3f0      	bcc.n	8013b08 <_txe_mutex_create+0x5c>
 8013b26:	e000      	b.n	8013b2a <_txe_mutex_create+0x7e>
                break;
 8013b28:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8013b2a:	f3ef 8310 	mrs	r3, PRIMASK
 8013b2e:	623b      	str	r3, [r7, #32]
    return(posture);
 8013b30:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 8013b32:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 8013b34:	b672      	cpsid	i
    return(int_posture);
 8013b36:	69fb      	ldr	r3, [r7, #28]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 8013b38:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 8013b3a:	4b25      	ldr	r3, [pc, #148]	; (8013bd0 <_txe_mutex_create+0x124>)
 8013b3c:	681b      	ldr	r3, [r3, #0]
 8013b3e:	3b01      	subs	r3, #1
 8013b40:	4a23      	ldr	r2, [pc, #140]	; (8013bd0 <_txe_mutex_create+0x124>)
 8013b42:	6013      	str	r3, [r2, #0]
 8013b44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013b46:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8013b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013b4a:	f383 8810 	msr	PRIMASK, r3
}
 8013b4e:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 8013b50:	f7fe fe50 	bl	80127f4 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate mutex.  */
        if (mutex_ptr == next_mutex)
 8013b54:	68fa      	ldr	r2, [r7, #12]
 8013b56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013b58:	429a      	cmp	r2, r3
 8013b5a:	d102      	bne.n	8013b62 <_txe_mutex_create+0xb6>
        {

            /* Mutex is already created, return appropriate error code.  */
            status =  TX_MUTEX_ERROR;
 8013b5c:	231c      	movs	r3, #28
 8013b5e:	647b      	str	r3, [r7, #68]	; 0x44
 8013b60:	e007      	b.n	8013b72 <_txe_mutex_create+0xc6>
        }
        else
        {

            /* Check for a valid inherit option.  */
            if (inherit != TX_INHERIT)
 8013b62:	687b      	ldr	r3, [r7, #4]
 8013b64:	2b01      	cmp	r3, #1
 8013b66:	d004      	beq.n	8013b72 <_txe_mutex_create+0xc6>
            {

                if (inherit != TX_NO_INHERIT)
 8013b68:	687b      	ldr	r3, [r7, #4]
 8013b6a:	2b00      	cmp	r3, #0
 8013b6c:	d001      	beq.n	8013b72 <_txe_mutex_create+0xc6>
                {

                    /* Inherit option is illegal.  */
                    status =  TX_INHERIT_ERROR;
 8013b6e:	231f      	movs	r3, #31
 8013b70:	647b      	str	r3, [r7, #68]	; 0x44
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8013b72:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013b74:	2b00      	cmp	r3, #0
 8013b76:	d11d      	bne.n	8013bb4 <_txe_mutex_create+0x108>
    {

#ifndef TX_TIMER_PROCESS_IN_ISR

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(thread_ptr)
 8013b78:	4b18      	ldr	r3, [pc, #96]	; (8013bdc <_txe_mutex_create+0x130>)
 8013b7a:	681b      	ldr	r3, [r3, #0]
 8013b7c:	637b      	str	r3, [r7, #52]	; 0x34

        /* Check for invalid caller of this function.  First check for a calling thread.  */
        if (thread_ptr == &_tx_timer_thread)
 8013b7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013b80:	4a17      	ldr	r2, [pc, #92]	; (8013be0 <_txe_mutex_create+0x134>)
 8013b82:	4293      	cmp	r3, r2
 8013b84:	d101      	bne.n	8013b8a <_txe_mutex_create+0xde>
        {

            /* Invalid caller of this function, return appropriate error code.  */
            status =  TX_CALLER_ERROR;
 8013b86:	2313      	movs	r3, #19
 8013b88:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8013b8a:	f3ef 8305 	mrs	r3, IPSR
 8013b8e:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 8013b90:	69ba      	ldr	r2, [r7, #24]
        }
#endif

        /* Check for interrupt call.  */
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8013b92:	4b14      	ldr	r3, [pc, #80]	; (8013be4 <_txe_mutex_create+0x138>)
 8013b94:	681b      	ldr	r3, [r3, #0]
 8013b96:	4313      	orrs	r3, r2
 8013b98:	2b00      	cmp	r3, #0
 8013b9a:	d00b      	beq.n	8013bb4 <_txe_mutex_create+0x108>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8013b9c:	f3ef 8305 	mrs	r3, IPSR
 8013ba0:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 8013ba2:	697a      	ldr	r2, [r7, #20]
        {

            /* Now, make sure the call is from an interrupt and not initialization.  */
            if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 8013ba4:	4b0f      	ldr	r3, [pc, #60]	; (8013be4 <_txe_mutex_create+0x138>)
 8013ba6:	681b      	ldr	r3, [r3, #0]
 8013ba8:	4313      	orrs	r3, r2
 8013baa:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 8013bae:	d201      	bcs.n	8013bb4 <_txe_mutex_create+0x108>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 8013bb0:	2313      	movs	r3, #19
 8013bb2:	647b      	str	r3, [r7, #68]	; 0x44
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8013bb4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013bb6:	2b00      	cmp	r3, #0
 8013bb8:	d105      	bne.n	8013bc6 <_txe_mutex_create+0x11a>
    {

        /* Call actual mutex create function.  */
        status =  _tx_mutex_create(mutex_ptr, name_ptr, inherit);
 8013bba:	687a      	ldr	r2, [r7, #4]
 8013bbc:	68b9      	ldr	r1, [r7, #8]
 8013bbe:	68f8      	ldr	r0, [r7, #12]
 8013bc0:	f7fd f9e2 	bl	8010f88 <_tx_mutex_create>
 8013bc4:	6478      	str	r0, [r7, #68]	; 0x44
    }

    /* Return completion status.  */
    return(status);
 8013bc6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8013bc8:	4618      	mov	r0, r3
 8013bca:	3748      	adds	r7, #72	; 0x48
 8013bcc:	46bd      	mov	sp, r7
 8013bce:	bd80      	pop	{r7, pc}
 8013bd0:	20002290 	.word	0x20002290
 8013bd4:	200021d8 	.word	0x200021d8
 8013bd8:	200021dc 	.word	0x200021dc
 8013bdc:	200021f8 	.word	0x200021f8
 8013be0:	20002340 	.word	0x20002340
 8013be4:	20000010 	.word	0x20000010

08013be8 <_txe_mutex_get>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_mutex_get(TX_MUTEX *mutex_ptr, ULONG wait_option)
{
 8013be8:	b580      	push	{r7, lr}
 8013bea:	b088      	sub	sp, #32
 8013bec:	af00      	add	r7, sp, #0
 8013bee:	6078      	str	r0, [r7, #4]
 8013bf0:	6039      	str	r1, [r7, #0]
TX_THREAD       *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 8013bf2:	2300      	movs	r3, #0
 8013bf4:	61fb      	str	r3, [r7, #28]

    /* Check for an invalid mutex pointer.  */
    if (mutex_ptr == TX_NULL)
 8013bf6:	687b      	ldr	r3, [r7, #4]
 8013bf8:	2b00      	cmp	r3, #0
 8013bfa:	d102      	bne.n	8013c02 <_txe_mutex_get+0x1a>
    {

        /* Mutex pointer is invalid, return appropriate error code.  */
        status =  TX_MUTEX_ERROR;
 8013bfc:	231c      	movs	r3, #28
 8013bfe:	61fb      	str	r3, [r7, #28]
 8013c00:	e01f      	b.n	8013c42 <_txe_mutex_get+0x5a>
    }

    /* Now check for a valid mutex ID.  */
    else if (mutex_ptr -> tx_mutex_id != TX_MUTEX_ID)
 8013c02:	687b      	ldr	r3, [r7, #4]
 8013c04:	681b      	ldr	r3, [r3, #0]
 8013c06:	4a21      	ldr	r2, [pc, #132]	; (8013c8c <_txe_mutex_get+0xa4>)
 8013c08:	4293      	cmp	r3, r2
 8013c0a:	d002      	beq.n	8013c12 <_txe_mutex_get+0x2a>
    {

        /* Mutex pointer is invalid, return appropriate error code.  */
        status =  TX_MUTEX_ERROR;
 8013c0c:	231c      	movs	r3, #28
 8013c0e:	61fb      	str	r3, [r7, #28]
 8013c10:	e017      	b.n	8013c42 <_txe_mutex_get+0x5a>
    else
    {

        /* Check for a wait option error.  Only threads are allowed any form of
           suspension.  */
        if (wait_option != TX_NO_WAIT)
 8013c12:	683b      	ldr	r3, [r7, #0]
 8013c14:	2b00      	cmp	r3, #0
 8013c16:	d014      	beq.n	8013c42 <_txe_mutex_get+0x5a>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8013c18:	f3ef 8305 	mrs	r3, IPSR
 8013c1c:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 8013c1e:	697a      	ldr	r2, [r7, #20]
        {

            /* Is the call from an ISR or Initialization?  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8013c20:	4b1b      	ldr	r3, [pc, #108]	; (8013c90 <_txe_mutex_get+0xa8>)
 8013c22:	681b      	ldr	r3, [r3, #0]
 8013c24:	4313      	orrs	r3, r2
 8013c26:	2b00      	cmp	r3, #0
 8013c28:	d002      	beq.n	8013c30 <_txe_mutex_get+0x48>
            {

                /* A non-thread is trying to suspend, return appropriate error code.  */
                status =  TX_WAIT_ERROR;
 8013c2a:	2304      	movs	r3, #4
 8013c2c:	61fb      	str	r3, [r7, #28]
 8013c2e:	e008      	b.n	8013c42 <_txe_mutex_get+0x5a>
#ifndef TX_TIMER_PROCESS_IN_ISR
            else
            {

                /* Pickup thread pointer.  */
                TX_THREAD_GET_CURRENT(current_thread)
 8013c30:	4b18      	ldr	r3, [pc, #96]	; (8013c94 <_txe_mutex_get+0xac>)
 8013c32:	681b      	ldr	r3, [r3, #0]
 8013c34:	61bb      	str	r3, [r7, #24]

                /* Is the current thread the timer thread?  */
                if (current_thread == &_tx_timer_thread)
 8013c36:	69bb      	ldr	r3, [r7, #24]
 8013c38:	4a17      	ldr	r2, [pc, #92]	; (8013c98 <_txe_mutex_get+0xb0>)
 8013c3a:	4293      	cmp	r3, r2
 8013c3c:	d101      	bne.n	8013c42 <_txe_mutex_get+0x5a>
                {

                    /* A non-thread is trying to suspend, return appropriate error code.  */
                    status =  TX_WAIT_ERROR;
 8013c3e:	2304      	movs	r3, #4
 8013c40:	61fb      	str	r3, [r7, #28]
#endif
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8013c42:	69fb      	ldr	r3, [r7, #28]
 8013c44:	2b00      	cmp	r3, #0
 8013c46:	d114      	bne.n	8013c72 <_txe_mutex_get+0x8a>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8013c48:	f3ef 8305 	mrs	r3, IPSR
 8013c4c:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 8013c4e:	693a      	ldr	r2, [r7, #16]
    {

        /* Check for interrupt call.  */
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8013c50:	4b0f      	ldr	r3, [pc, #60]	; (8013c90 <_txe_mutex_get+0xa8>)
 8013c52:	681b      	ldr	r3, [r3, #0]
 8013c54:	4313      	orrs	r3, r2
 8013c56:	2b00      	cmp	r3, #0
 8013c58:	d00b      	beq.n	8013c72 <_txe_mutex_get+0x8a>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8013c5a:	f3ef 8305 	mrs	r3, IPSR
 8013c5e:	60fb      	str	r3, [r7, #12]
    return(ipsr_value);
 8013c60:	68fa      	ldr	r2, [r7, #12]
        {

            /* Now, make sure the call is from an interrupt and not initialization.  */
            if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 8013c62:	4b0b      	ldr	r3, [pc, #44]	; (8013c90 <_txe_mutex_get+0xa8>)
 8013c64:	681b      	ldr	r3, [r3, #0]
 8013c66:	4313      	orrs	r3, r2
 8013c68:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 8013c6c:	d201      	bcs.n	8013c72 <_txe_mutex_get+0x8a>
            {

                /* Yes, invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 8013c6e:	2313      	movs	r3, #19
 8013c70:	61fb      	str	r3, [r7, #28]
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8013c72:	69fb      	ldr	r3, [r7, #28]
 8013c74:	2b00      	cmp	r3, #0
 8013c76:	d104      	bne.n	8013c82 <_txe_mutex_get+0x9a>
    {

        /* Call actual get mutex function.  */
        status =  _tx_mutex_get(mutex_ptr, wait_option);
 8013c78:	6839      	ldr	r1, [r7, #0]
 8013c7a:	6878      	ldr	r0, [r7, #4]
 8013c7c:	f7fd fa6a 	bl	8011154 <_tx_mutex_get>
 8013c80:	61f8      	str	r0, [r7, #28]
    }

    /* Return completion status.  */
    return(status);
 8013c82:	69fb      	ldr	r3, [r7, #28]
}
 8013c84:	4618      	mov	r0, r3
 8013c86:	3720      	adds	r7, #32
 8013c88:	46bd      	mov	sp, r7
 8013c8a:	bd80      	pop	{r7, pc}
 8013c8c:	4d555445 	.word	0x4d555445
 8013c90:	20000010 	.word	0x20000010
 8013c94:	200021f8 	.word	0x200021f8
 8013c98:	20002340 	.word	0x20002340

08013c9c <_txe_mutex_put>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_mutex_put(TX_MUTEX *mutex_ptr)
{
 8013c9c:	b580      	push	{r7, lr}
 8013c9e:	b086      	sub	sp, #24
 8013ca0:	af00      	add	r7, sp, #0
 8013ca2:	6078      	str	r0, [r7, #4]

UINT            status;


    /* Default status to success.  */
    status =  TX_SUCCESS;
 8013ca4:	2300      	movs	r3, #0
 8013ca6:	617b      	str	r3, [r7, #20]

    /* Check for an invalid mutex pointer.  */
    if (mutex_ptr == TX_NULL)
 8013ca8:	687b      	ldr	r3, [r7, #4]
 8013caa:	2b00      	cmp	r3, #0
 8013cac:	d102      	bne.n	8013cb4 <_txe_mutex_put+0x18>
    {

        /* Mutex pointer is invalid, return appropriate error code.  */
        status =  TX_MUTEX_ERROR;
 8013cae:	231c      	movs	r3, #28
 8013cb0:	617b      	str	r3, [r7, #20]
 8013cb2:	e01c      	b.n	8013cee <_txe_mutex_put+0x52>
    }

    /* Now check for invalid mutex ID.  */
    else if (mutex_ptr -> tx_mutex_id != TX_MUTEX_ID)
 8013cb4:	687b      	ldr	r3, [r7, #4]
 8013cb6:	681b      	ldr	r3, [r3, #0]
 8013cb8:	4a13      	ldr	r2, [pc, #76]	; (8013d08 <_txe_mutex_put+0x6c>)
 8013cba:	4293      	cmp	r3, r2
 8013cbc:	d002      	beq.n	8013cc4 <_txe_mutex_put+0x28>
    {

        /* Mutex pointer is invalid, return appropriate error code.  */
        status =  TX_MUTEX_ERROR;
 8013cbe:	231c      	movs	r3, #28
 8013cc0:	617b      	str	r3, [r7, #20]
 8013cc2:	e014      	b.n	8013cee <_txe_mutex_put+0x52>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8013cc4:	f3ef 8305 	mrs	r3, IPSR
 8013cc8:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 8013cca:	693a      	ldr	r2, [r7, #16]
    }
    else
    {

        /* Check for interrupt call.  */
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8013ccc:	4b0f      	ldr	r3, [pc, #60]	; (8013d0c <_txe_mutex_put+0x70>)
 8013cce:	681b      	ldr	r3, [r3, #0]
 8013cd0:	4313      	orrs	r3, r2
 8013cd2:	2b00      	cmp	r3, #0
 8013cd4:	d00b      	beq.n	8013cee <_txe_mutex_put+0x52>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8013cd6:	f3ef 8305 	mrs	r3, IPSR
 8013cda:	60fb      	str	r3, [r7, #12]
    return(ipsr_value);
 8013cdc:	68fa      	ldr	r2, [r7, #12]
        {

            /* Now, make sure the call is from an interrupt and not initialization.  */
            if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 8013cde:	4b0b      	ldr	r3, [pc, #44]	; (8013d0c <_txe_mutex_put+0x70>)
 8013ce0:	681b      	ldr	r3, [r3, #0]
 8013ce2:	4313      	orrs	r3, r2
 8013ce4:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 8013ce8:	d201      	bcs.n	8013cee <_txe_mutex_put+0x52>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 8013cea:	2313      	movs	r3, #19
 8013cec:	617b      	str	r3, [r7, #20]
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8013cee:	697b      	ldr	r3, [r7, #20]
 8013cf0:	2b00      	cmp	r3, #0
 8013cf2:	d103      	bne.n	8013cfc <_txe_mutex_put+0x60>
    {

        /* Call actual put mutex function.  */
        status =  _tx_mutex_put(mutex_ptr);
 8013cf4:	6878      	ldr	r0, [r7, #4]
 8013cf6:	f7fd fdb5 	bl	8011864 <_tx_mutex_put>
 8013cfa:	6178      	str	r0, [r7, #20]
    }

    /* Return completion status.  */
    return(status);
 8013cfc:	697b      	ldr	r3, [r7, #20]
}
 8013cfe:	4618      	mov	r0, r3
 8013d00:	3718      	adds	r7, #24
 8013d02:	46bd      	mov	sp, r7
 8013d04:	bd80      	pop	{r7, pc}
 8013d06:	bf00      	nop
 8013d08:	4d555445 	.word	0x4d555445
 8013d0c:	20000010 	.word	0x20000010

08013d10 <_txe_thread_create>:
UINT    _txe_thread_create(TX_THREAD *thread_ptr, CHAR *name_ptr,
                VOID (*entry_function)(ULONG id), ULONG entry_input,
                VOID *stack_start, ULONG stack_size,
                UINT priority, UINT preempt_threshold,
                ULONG time_slice, UINT auto_start, UINT thread_control_block_size)
{
 8013d10:	b580      	push	{r7, lr}
 8013d12:	b09a      	sub	sp, #104	; 0x68
 8013d14:	af06      	add	r7, sp, #24
 8013d16:	60f8      	str	r0, [r7, #12]
 8013d18:	60b9      	str	r1, [r7, #8]
 8013d1a:	607a      	str	r2, [r7, #4]
 8013d1c:	603b      	str	r3, [r7, #0]
TX_THREAD       *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 8013d1e:	2300      	movs	r3, #0
 8013d20:	64fb      	str	r3, [r7, #76]	; 0x4c

    /* Check for an invalid thread pointer.  */
    if (thread_ptr == TX_NULL)
 8013d22:	68fb      	ldr	r3, [r7, #12]
 8013d24:	2b00      	cmp	r3, #0
 8013d26:	d102      	bne.n	8013d2e <_txe_thread_create+0x1e>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 8013d28:	230e      	movs	r3, #14
 8013d2a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8013d2c:	e0bb      	b.n	8013ea6 <_txe_thread_create+0x196>
    }

    /* Now check for invalid thread control block size.  */
    else if (thread_control_block_size != (sizeof(TX_THREAD)))
 8013d2e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8013d30:	2bb0      	cmp	r3, #176	; 0xb0
 8013d32:	d002      	beq.n	8013d3a <_txe_thread_create+0x2a>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 8013d34:	230e      	movs	r3, #14
 8013d36:	64fb      	str	r3, [r7, #76]	; 0x4c
 8013d38:	e0b5      	b.n	8013ea6 <_txe_thread_create+0x196>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8013d3a:	f3ef 8310 	mrs	r3, PRIMASK
 8013d3e:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 8013d40:	6abb      	ldr	r3, [r7, #40]	; 0x28
    int_posture = __get_interrupt_posture();
 8013d42:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 8013d44:	b672      	cpsid	i
    return(int_posture);
 8013d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 8013d48:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 8013d4a:	4b64      	ldr	r3, [pc, #400]	; (8013edc <_txe_thread_create+0x1cc>)
 8013d4c:	681b      	ldr	r3, [r3, #0]
 8013d4e:	3301      	adds	r3, #1
 8013d50:	4a62      	ldr	r2, [pc, #392]	; (8013edc <_txe_thread_create+0x1cc>)
 8013d52:	6013      	str	r3, [r2, #0]
 8013d54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013d56:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8013d58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013d5a:	f383 8810 	msr	PRIMASK, r3
}
 8013d5e:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        break_flag =   TX_FALSE;
 8013d60:	2300      	movs	r3, #0
 8013d62:	64bb      	str	r3, [r7, #72]	; 0x48
        next_thread =  _tx_thread_created_ptr;
 8013d64:	4b5e      	ldr	r3, [pc, #376]	; (8013ee0 <_txe_thread_create+0x1d0>)
 8013d66:	681b      	ldr	r3, [r3, #0]
 8013d68:	643b      	str	r3, [r7, #64]	; 0x40
        work_ptr =     TX_VOID_TO_UCHAR_POINTER_CONVERT(stack_start);
 8013d6a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8013d6c:	63bb      	str	r3, [r7, #56]	; 0x38
        work_ptr =     TX_UCHAR_POINTER_ADD(work_ptr, (stack_size - ((ULONG) 1)));
 8013d6e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8013d70:	3b01      	subs	r3, #1
 8013d72:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013d74:	4413      	add	r3, r2
 8013d76:	63bb      	str	r3, [r7, #56]	; 0x38
        stack_end =    TX_UCHAR_TO_VOID_POINTER_CONVERT(work_ptr);
 8013d78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013d7a:	637b      	str	r3, [r7, #52]	; 0x34
        for (i = ((ULONG) 0); i < _tx_thread_created_count; i++)
 8013d7c:	2300      	movs	r3, #0
 8013d7e:	647b      	str	r3, [r7, #68]	; 0x44
 8013d80:	e02b      	b.n	8013dda <_txe_thread_create+0xca>
        {

            /* Determine if this thread matches the thread in the list.  */
            if (thread_ptr == next_thread)
 8013d82:	68fa      	ldr	r2, [r7, #12]
 8013d84:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013d86:	429a      	cmp	r2, r3
 8013d88:	d101      	bne.n	8013d8e <_txe_thread_create+0x7e>
            {

                /* Set the break flag.  */
                break_flag =  TX_TRUE;
 8013d8a:	2301      	movs	r3, #1
 8013d8c:	64bb      	str	r3, [r7, #72]	; 0x48
            }

            /* Determine if we need to break the loop.  */
            if (break_flag == TX_TRUE)
 8013d8e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013d90:	2b01      	cmp	r3, #1
 8013d92:	d028      	beq.n	8013de6 <_txe_thread_create+0xd6>
                /* Yes, break out of the loop.  */
                break;
            }

            /* Check the stack pointer to see if it overlaps with this thread's stack.  */
            if (stack_start >= next_thread -> tx_thread_stack_start)
 8013d94:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013d96:	68db      	ldr	r3, [r3, #12]
 8013d98:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8013d9a:	429a      	cmp	r2, r3
 8013d9c:	d308      	bcc.n	8013db0 <_txe_thread_create+0xa0>
            {

                if (stack_start < next_thread -> tx_thread_stack_end)
 8013d9e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013da0:	691b      	ldr	r3, [r3, #16]
 8013da2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8013da4:	429a      	cmp	r2, r3
 8013da6:	d203      	bcs.n	8013db0 <_txe_thread_create+0xa0>
                {

                    /* This stack overlaps with an existing thread, clear the stack pointer to
                       force a stack error below.  */
                    stack_start =  TX_NULL;
 8013da8:	2300      	movs	r3, #0
 8013daa:	65bb      	str	r3, [r7, #88]	; 0x58

                    /* Set the break flag.  */
                    break_flag =  TX_TRUE;
 8013dac:	2301      	movs	r3, #1
 8013dae:	64bb      	str	r3, [r7, #72]	; 0x48
                }
            }

            /* Check the end of the stack to see if it is inside this thread's stack area as well.  */
            if (stack_end >= next_thread -> tx_thread_stack_start)
 8013db0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013db2:	68db      	ldr	r3, [r3, #12]
 8013db4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013db6:	429a      	cmp	r2, r3
 8013db8:	d308      	bcc.n	8013dcc <_txe_thread_create+0xbc>
            {

                if (stack_end < next_thread -> tx_thread_stack_end)
 8013dba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013dbc:	691b      	ldr	r3, [r3, #16]
 8013dbe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013dc0:	429a      	cmp	r2, r3
 8013dc2:	d203      	bcs.n	8013dcc <_txe_thread_create+0xbc>
                {

                    /* This stack overlaps with an existing thread, clear the stack pointer to
                       force a stack error below.  */
                    stack_start =  TX_NULL;
 8013dc4:	2300      	movs	r3, #0
 8013dc6:	65bb      	str	r3, [r7, #88]	; 0x58

                    /* Set the break flag.  */
                    break_flag =  TX_TRUE;
 8013dc8:	2301      	movs	r3, #1
 8013dca:	64bb      	str	r3, [r7, #72]	; 0x48
                }
            }

            /* Move to the next thread.  */
            next_thread =  next_thread -> tx_thread_created_next;
 8013dcc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013dce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8013dd2:	643b      	str	r3, [r7, #64]	; 0x40
        for (i = ((ULONG) 0); i < _tx_thread_created_count; i++)
 8013dd4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013dd6:	3301      	adds	r3, #1
 8013dd8:	647b      	str	r3, [r7, #68]	; 0x44
 8013dda:	4b42      	ldr	r3, [pc, #264]	; (8013ee4 <_txe_thread_create+0x1d4>)
 8013ddc:	681b      	ldr	r3, [r3, #0]
 8013dde:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8013de0:	429a      	cmp	r2, r3
 8013de2:	d3ce      	bcc.n	8013d82 <_txe_thread_create+0x72>
 8013de4:	e000      	b.n	8013de8 <_txe_thread_create+0xd8>
                break;
 8013de6:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8013de8:	f3ef 8310 	mrs	r3, PRIMASK
 8013dec:	61fb      	str	r3, [r7, #28]
    return(posture);
 8013dee:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 8013df0:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 8013df2:	b672      	cpsid	i
    return(int_posture);
 8013df4:	69bb      	ldr	r3, [r7, #24]
        }

        /* Disable interrupts.  */
        TX_DISABLE
 8013df6:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 8013df8:	4b38      	ldr	r3, [pc, #224]	; (8013edc <_txe_thread_create+0x1cc>)
 8013dfa:	681b      	ldr	r3, [r3, #0]
 8013dfc:	3b01      	subs	r3, #1
 8013dfe:	4a37      	ldr	r2, [pc, #220]	; (8013edc <_txe_thread_create+0x1cc>)
 8013e00:	6013      	str	r3, [r2, #0]
 8013e02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013e04:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8013e06:	6a3b      	ldr	r3, [r7, #32]
 8013e08:	f383 8810 	msr	PRIMASK, r3
}
 8013e0c:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 8013e0e:	f7fe fcf1 	bl	80127f4 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate thread.  */
        if (thread_ptr == next_thread)
 8013e12:	68fa      	ldr	r2, [r7, #12]
 8013e14:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013e16:	429a      	cmp	r2, r3
 8013e18:	d102      	bne.n	8013e20 <_txe_thread_create+0x110>
        {

            /* Thread is already created, return appropriate error code.  */
            status =  TX_THREAD_ERROR;
 8013e1a:	230e      	movs	r3, #14
 8013e1c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8013e1e:	e042      	b.n	8013ea6 <_txe_thread_create+0x196>
        }

        /* Check for invalid starting address of stack.  */
        else if (stack_start == TX_NULL)
 8013e20:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8013e22:	2b00      	cmp	r3, #0
 8013e24:	d102      	bne.n	8013e2c <_txe_thread_create+0x11c>
        {

            /* Invalid stack or entry point, return appropriate error code.  */
            status =  TX_PTR_ERROR;
 8013e26:	2303      	movs	r3, #3
 8013e28:	64fb      	str	r3, [r7, #76]	; 0x4c
 8013e2a:	e03c      	b.n	8013ea6 <_txe_thread_create+0x196>
        }

        /* Check for invalid thread entry point.  */
        else if (entry_function == TX_NULL)
 8013e2c:	687b      	ldr	r3, [r7, #4]
 8013e2e:	2b00      	cmp	r3, #0
 8013e30:	d102      	bne.n	8013e38 <_txe_thread_create+0x128>
        {

            /* Invalid stack or entry point, return appropriate error code.  */
            status =  TX_PTR_ERROR;
 8013e32:	2303      	movs	r3, #3
 8013e34:	64fb      	str	r3, [r7, #76]	; 0x4c
 8013e36:	e036      	b.n	8013ea6 <_txe_thread_create+0x196>
        }

        /* Check the stack size.  */
        else if (stack_size < ((ULONG) TX_MINIMUM_STACK))
 8013e38:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8013e3a:	2bc7      	cmp	r3, #199	; 0xc7
 8013e3c:	d802      	bhi.n	8013e44 <_txe_thread_create+0x134>
        {

            /* Stack is not big enough, return appropriate error code.  */
            status =  TX_SIZE_ERROR;
 8013e3e:	2305      	movs	r3, #5
 8013e40:	64fb      	str	r3, [r7, #76]	; 0x4c
 8013e42:	e030      	b.n	8013ea6 <_txe_thread_create+0x196>
        }

        /* Check the priority specified.  */
        else if (priority >= ((UINT) TX_MAX_PRIORITIES))
 8013e44:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8013e46:	2b1f      	cmp	r3, #31
 8013e48:	d902      	bls.n	8013e50 <_txe_thread_create+0x140>
        {

            /* Invalid priority selected, return appropriate error code.  */
            status =  TX_PRIORITY_ERROR;
 8013e4a:	230f      	movs	r3, #15
 8013e4c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8013e4e:	e02a      	b.n	8013ea6 <_txe_thread_create+0x196>
        }

        /* Check preemption threshold. */
        else if (preempt_threshold > priority)
 8013e50:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8013e52:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8013e54:	429a      	cmp	r2, r3
 8013e56:	d902      	bls.n	8013e5e <_txe_thread_create+0x14e>
        {

            /* Invalid preempt threshold, return appropriate error code.  */
            status =  TX_THRESH_ERROR;
 8013e58:	2318      	movs	r3, #24
 8013e5a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8013e5c:	e023      	b.n	8013ea6 <_txe_thread_create+0x196>
        }

        /* Check the start selection.  */
        else if (auto_start > TX_AUTO_START)
 8013e5e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8013e60:	2b01      	cmp	r3, #1
 8013e62:	d902      	bls.n	8013e6a <_txe_thread_create+0x15a>
        {

            /* Invalid auto start selection, return appropriate error code.  */
            status =  TX_START_ERROR;
 8013e64:	2310      	movs	r3, #16
 8013e66:	64fb      	str	r3, [r7, #76]	; 0x4c
 8013e68:	e01d      	b.n	8013ea6 <_txe_thread_create+0x196>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(current_thread)
 8013e6a:	4b1f      	ldr	r3, [pc, #124]	; (8013ee8 <_txe_thread_create+0x1d8>)
 8013e6c:	681b      	ldr	r3, [r3, #0]
 8013e6e:	633b      	str	r3, [r7, #48]	; 0x30

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (current_thread == &_tx_timer_thread)
 8013e70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013e72:	4a1e      	ldr	r2, [pc, #120]	; (8013eec <_txe_thread_create+0x1dc>)
 8013e74:	4293      	cmp	r3, r2
 8013e76:	d101      	bne.n	8013e7c <_txe_thread_create+0x16c>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 8013e78:	2313      	movs	r3, #19
 8013e7a:	64fb      	str	r3, [r7, #76]	; 0x4c
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8013e7c:	f3ef 8305 	mrs	r3, IPSR
 8013e80:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 8013e82:	697a      	ldr	r2, [r7, #20]
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8013e84:	4b1a      	ldr	r3, [pc, #104]	; (8013ef0 <_txe_thread_create+0x1e0>)
 8013e86:	681b      	ldr	r3, [r3, #0]
 8013e88:	4313      	orrs	r3, r2
 8013e8a:	2b00      	cmp	r3, #0
 8013e8c:	d00b      	beq.n	8013ea6 <_txe_thread_create+0x196>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8013e8e:	f3ef 8305 	mrs	r3, IPSR
 8013e92:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 8013e94:	693a      	ldr	r2, [r7, #16]
            {

                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 8013e96:	4b16      	ldr	r3, [pc, #88]	; (8013ef0 <_txe_thread_create+0x1e0>)
 8013e98:	681b      	ldr	r3, [r3, #0]
 8013e9a:	4313      	orrs	r3, r2
 8013e9c:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 8013ea0:	d201      	bcs.n	8013ea6 <_txe_thread_create+0x196>
                {

                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 8013ea2:	2313      	movs	r3, #19
 8013ea4:	64fb      	str	r3, [r7, #76]	; 0x4c
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8013ea6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013ea8:	2b00      	cmp	r3, #0
 8013eaa:	d112      	bne.n	8013ed2 <_txe_thread_create+0x1c2>
    {

        /* Call actual thread create function.  */
        status =  _tx_thread_create(thread_ptr, name_ptr, entry_function, entry_input,
 8013eac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8013eae:	9305      	str	r3, [sp, #20]
 8013eb0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8013eb2:	9304      	str	r3, [sp, #16]
 8013eb4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8013eb6:	9303      	str	r3, [sp, #12]
 8013eb8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8013eba:	9302      	str	r3, [sp, #8]
 8013ebc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8013ebe:	9301      	str	r3, [sp, #4]
 8013ec0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8013ec2:	9300      	str	r3, [sp, #0]
 8013ec4:	683b      	ldr	r3, [r7, #0]
 8013ec6:	687a      	ldr	r2, [r7, #4]
 8013ec8:	68b9      	ldr	r1, [r7, #8]
 8013eca:	68f8      	ldr	r0, [r7, #12]
 8013ecc:	f7fd ffae 	bl	8011e2c <_tx_thread_create>
 8013ed0:	64f8      	str	r0, [r7, #76]	; 0x4c
                        stack_start, stack_size, priority, preempt_threshold,
                        time_slice, auto_start);
    }

    /* Return completion status.  */
    return(status);
 8013ed2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 8013ed4:	4618      	mov	r0, r3
 8013ed6:	3750      	adds	r7, #80	; 0x50
 8013ed8:	46bd      	mov	sp, r7
 8013eda:	bd80      	pop	{r7, pc}
 8013edc:	20002290 	.word	0x20002290
 8013ee0:	20002200 	.word	0x20002200
 8013ee4:	20002204 	.word	0x20002204
 8013ee8:	200021f8 	.word	0x200021f8
 8013eec:	20002340 	.word	0x20002340
 8013ef0:	20000010 	.word	0x20000010

08013ef4 <_txe_thread_resume>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_thread_resume(TX_THREAD *thread_ptr)
{
 8013ef4:	b580      	push	{r7, lr}
 8013ef6:	b084      	sub	sp, #16
 8013ef8:	af00      	add	r7, sp, #0
 8013efa:	6078      	str	r0, [r7, #4]

UINT    status;


    /* Check for an invalid thread pointer.  */
    if (thread_ptr == TX_NULL)
 8013efc:	687b      	ldr	r3, [r7, #4]
 8013efe:	2b00      	cmp	r3, #0
 8013f00:	d102      	bne.n	8013f08 <_txe_thread_resume+0x14>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 8013f02:	230e      	movs	r3, #14
 8013f04:	60fb      	str	r3, [r7, #12]
 8013f06:	e00b      	b.n	8013f20 <_txe_thread_resume+0x2c>
    }

    /* Now check for invalid thread ID.  */
    else if (thread_ptr -> tx_thread_id != TX_THREAD_ID)
 8013f08:	687b      	ldr	r3, [r7, #4]
 8013f0a:	681b      	ldr	r3, [r3, #0]
 8013f0c:	4a07      	ldr	r2, [pc, #28]	; (8013f2c <_txe_thread_resume+0x38>)
 8013f0e:	4293      	cmp	r3, r2
 8013f10:	d002      	beq.n	8013f18 <_txe_thread_resume+0x24>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 8013f12:	230e      	movs	r3, #14
 8013f14:	60fb      	str	r3, [r7, #12]
 8013f16:	e003      	b.n	8013f20 <_txe_thread_resume+0x2c>
    }
    else
    {

        /* Call actual thread resume function.  */
        status =  _tx_thread_resume(thread_ptr);
 8013f18:	6878      	ldr	r0, [r7, #4]
 8013f1a:	f7fe f947 	bl	80121ac <_tx_thread_resume>
 8013f1e:	60f8      	str	r0, [r7, #12]
    }

    /* Return completion status.  */
    return(status);
 8013f20:	68fb      	ldr	r3, [r7, #12]
}
 8013f22:	4618      	mov	r0, r3
 8013f24:	3710      	adds	r7, #16
 8013f26:	46bd      	mov	sp, r7
 8013f28:	bd80      	pop	{r7, pc}
 8013f2a:	bf00      	nop
 8013f2c:	54485244 	.word	0x54485244

08013f30 <_txe_thread_suspend>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_thread_suspend(TX_THREAD *thread_ptr)
{
 8013f30:	b580      	push	{r7, lr}
 8013f32:	b084      	sub	sp, #16
 8013f34:	af00      	add	r7, sp, #0
 8013f36:	6078      	str	r0, [r7, #4]

UINT    status;


    /* Check for an invalid thread pointer.  */
    if (thread_ptr == TX_NULL)
 8013f38:	687b      	ldr	r3, [r7, #4]
 8013f3a:	2b00      	cmp	r3, #0
 8013f3c:	d102      	bne.n	8013f44 <_txe_thread_suspend+0x14>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 8013f3e:	230e      	movs	r3, #14
 8013f40:	60fb      	str	r3, [r7, #12]
 8013f42:	e00b      	b.n	8013f5c <_txe_thread_suspend+0x2c>
    }

    /* Now check for invalid thread ID.  */
    else if (thread_ptr -> tx_thread_id != TX_THREAD_ID)
 8013f44:	687b      	ldr	r3, [r7, #4]
 8013f46:	681b      	ldr	r3, [r3, #0]
 8013f48:	4a07      	ldr	r2, [pc, #28]	; (8013f68 <_txe_thread_suspend+0x38>)
 8013f4a:	4293      	cmp	r3, r2
 8013f4c:	d002      	beq.n	8013f54 <_txe_thread_suspend+0x24>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 8013f4e:	230e      	movs	r3, #14
 8013f50:	60fb      	str	r3, [r7, #12]
 8013f52:	e003      	b.n	8013f5c <_txe_thread_suspend+0x2c>
    }
    else
    {

        /* Call actual thread suspend function.  */
        status =  _tx_thread_suspend(thread_ptr);
 8013f54:	6878      	ldr	r0, [r7, #4]
 8013f56:	f7fe fb5b 	bl	8012610 <_tx_thread_suspend>
 8013f5a:	60f8      	str	r0, [r7, #12]
    }

    /* Return completion status.  */
    return(status);
 8013f5c:	68fb      	ldr	r3, [r7, #12]
}
 8013f5e:	4618      	mov	r0, r3
 8013f60:	3710      	adds	r7, #16
 8013f62:	46bd      	mov	sp, r7
 8013f64:	bd80      	pop	{r7, pc}
 8013f66:	bf00      	nop
 8013f68:	54485244 	.word	0x54485244

08013f6c <__errno>:
 8013f6c:	4b01      	ldr	r3, [pc, #4]	; (8013f74 <__errno+0x8>)
 8013f6e:	6818      	ldr	r0, [r3, #0]
 8013f70:	4770      	bx	lr
 8013f72:	bf00      	nop
 8013f74:	20000014 	.word	0x20000014

08013f78 <__libc_init_array>:
 8013f78:	b570      	push	{r4, r5, r6, lr}
 8013f7a:	4d0d      	ldr	r5, [pc, #52]	; (8013fb0 <__libc_init_array+0x38>)
 8013f7c:	2600      	movs	r6, #0
 8013f7e:	4c0d      	ldr	r4, [pc, #52]	; (8013fb4 <__libc_init_array+0x3c>)
 8013f80:	1b64      	subs	r4, r4, r5
 8013f82:	10a4      	asrs	r4, r4, #2
 8013f84:	42a6      	cmp	r6, r4
 8013f86:	d109      	bne.n	8013f9c <__libc_init_array+0x24>
 8013f88:	4d0b      	ldr	r5, [pc, #44]	; (8013fb8 <__libc_init_array+0x40>)
 8013f8a:	2600      	movs	r6, #0
 8013f8c:	4c0b      	ldr	r4, [pc, #44]	; (8013fbc <__libc_init_array+0x44>)
 8013f8e:	f000 fd1b 	bl	80149c8 <_init>
 8013f92:	1b64      	subs	r4, r4, r5
 8013f94:	10a4      	asrs	r4, r4, #2
 8013f96:	42a6      	cmp	r6, r4
 8013f98:	d105      	bne.n	8013fa6 <__libc_init_array+0x2e>
 8013f9a:	bd70      	pop	{r4, r5, r6, pc}
 8013f9c:	f855 3b04 	ldr.w	r3, [r5], #4
 8013fa0:	3601      	adds	r6, #1
 8013fa2:	4798      	blx	r3
 8013fa4:	e7ee      	b.n	8013f84 <__libc_init_array+0xc>
 8013fa6:	f855 3b04 	ldr.w	r3, [r5], #4
 8013faa:	3601      	adds	r6, #1
 8013fac:	4798      	blx	r3
 8013fae:	e7f2      	b.n	8013f96 <__libc_init_array+0x1e>
 8013fb0:	08015180 	.word	0x08015180
 8013fb4:	08015180 	.word	0x08015180
 8013fb8:	08015180 	.word	0x08015180
 8013fbc:	08015184 	.word	0x08015184

08013fc0 <memset>:
 8013fc0:	4402      	add	r2, r0
 8013fc2:	4603      	mov	r3, r0
 8013fc4:	4293      	cmp	r3, r2
 8013fc6:	d100      	bne.n	8013fca <memset+0xa>
 8013fc8:	4770      	bx	lr
 8013fca:	f803 1b01 	strb.w	r1, [r3], #1
 8013fce:	e7f9      	b.n	8013fc4 <memset+0x4>

08013fd0 <_puts_r>:
 8013fd0:	b570      	push	{r4, r5, r6, lr}
 8013fd2:	460e      	mov	r6, r1
 8013fd4:	4605      	mov	r5, r0
 8013fd6:	b118      	cbz	r0, 8013fe0 <_puts_r+0x10>
 8013fd8:	6983      	ldr	r3, [r0, #24]
 8013fda:	b90b      	cbnz	r3, 8013fe0 <_puts_r+0x10>
 8013fdc:	f000 fa46 	bl	801446c <__sinit>
 8013fe0:	69ab      	ldr	r3, [r5, #24]
 8013fe2:	68ac      	ldr	r4, [r5, #8]
 8013fe4:	b913      	cbnz	r3, 8013fec <_puts_r+0x1c>
 8013fe6:	4628      	mov	r0, r5
 8013fe8:	f000 fa40 	bl	801446c <__sinit>
 8013fec:	4b2c      	ldr	r3, [pc, #176]	; (80140a0 <_puts_r+0xd0>)
 8013fee:	429c      	cmp	r4, r3
 8013ff0:	d120      	bne.n	8014034 <_puts_r+0x64>
 8013ff2:	686c      	ldr	r4, [r5, #4]
 8013ff4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8013ff6:	07db      	lsls	r3, r3, #31
 8013ff8:	d405      	bmi.n	8014006 <_puts_r+0x36>
 8013ffa:	89a3      	ldrh	r3, [r4, #12]
 8013ffc:	0598      	lsls	r0, r3, #22
 8013ffe:	d402      	bmi.n	8014006 <_puts_r+0x36>
 8014000:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014002:	f000 fad1 	bl	80145a8 <__retarget_lock_acquire_recursive>
 8014006:	89a3      	ldrh	r3, [r4, #12]
 8014008:	0719      	lsls	r1, r3, #28
 801400a:	d51d      	bpl.n	8014048 <_puts_r+0x78>
 801400c:	6923      	ldr	r3, [r4, #16]
 801400e:	b1db      	cbz	r3, 8014048 <_puts_r+0x78>
 8014010:	3e01      	subs	r6, #1
 8014012:	68a3      	ldr	r3, [r4, #8]
 8014014:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8014018:	3b01      	subs	r3, #1
 801401a:	60a3      	str	r3, [r4, #8]
 801401c:	bb39      	cbnz	r1, 801406e <_puts_r+0x9e>
 801401e:	2b00      	cmp	r3, #0
 8014020:	da38      	bge.n	8014094 <_puts_r+0xc4>
 8014022:	4622      	mov	r2, r4
 8014024:	210a      	movs	r1, #10
 8014026:	4628      	mov	r0, r5
 8014028:	f000 f848 	bl	80140bc <__swbuf_r>
 801402c:	3001      	adds	r0, #1
 801402e:	d011      	beq.n	8014054 <_puts_r+0x84>
 8014030:	250a      	movs	r5, #10
 8014032:	e011      	b.n	8014058 <_puts_r+0x88>
 8014034:	4b1b      	ldr	r3, [pc, #108]	; (80140a4 <_puts_r+0xd4>)
 8014036:	429c      	cmp	r4, r3
 8014038:	d101      	bne.n	801403e <_puts_r+0x6e>
 801403a:	68ac      	ldr	r4, [r5, #8]
 801403c:	e7da      	b.n	8013ff4 <_puts_r+0x24>
 801403e:	4b1a      	ldr	r3, [pc, #104]	; (80140a8 <_puts_r+0xd8>)
 8014040:	429c      	cmp	r4, r3
 8014042:	bf08      	it	eq
 8014044:	68ec      	ldreq	r4, [r5, #12]
 8014046:	e7d5      	b.n	8013ff4 <_puts_r+0x24>
 8014048:	4621      	mov	r1, r4
 801404a:	4628      	mov	r0, r5
 801404c:	f000 f888 	bl	8014160 <__swsetup_r>
 8014050:	2800      	cmp	r0, #0
 8014052:	d0dd      	beq.n	8014010 <_puts_r+0x40>
 8014054:	f04f 35ff 	mov.w	r5, #4294967295
 8014058:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801405a:	07da      	lsls	r2, r3, #31
 801405c:	d405      	bmi.n	801406a <_puts_r+0x9a>
 801405e:	89a3      	ldrh	r3, [r4, #12]
 8014060:	059b      	lsls	r3, r3, #22
 8014062:	d402      	bmi.n	801406a <_puts_r+0x9a>
 8014064:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014066:	f000 faa0 	bl	80145aa <__retarget_lock_release_recursive>
 801406a:	4628      	mov	r0, r5
 801406c:	bd70      	pop	{r4, r5, r6, pc}
 801406e:	2b00      	cmp	r3, #0
 8014070:	da04      	bge.n	801407c <_puts_r+0xac>
 8014072:	69a2      	ldr	r2, [r4, #24]
 8014074:	429a      	cmp	r2, r3
 8014076:	dc06      	bgt.n	8014086 <_puts_r+0xb6>
 8014078:	290a      	cmp	r1, #10
 801407a:	d004      	beq.n	8014086 <_puts_r+0xb6>
 801407c:	6823      	ldr	r3, [r4, #0]
 801407e:	1c5a      	adds	r2, r3, #1
 8014080:	6022      	str	r2, [r4, #0]
 8014082:	7019      	strb	r1, [r3, #0]
 8014084:	e7c5      	b.n	8014012 <_puts_r+0x42>
 8014086:	4622      	mov	r2, r4
 8014088:	4628      	mov	r0, r5
 801408a:	f000 f817 	bl	80140bc <__swbuf_r>
 801408e:	3001      	adds	r0, #1
 8014090:	d1bf      	bne.n	8014012 <_puts_r+0x42>
 8014092:	e7df      	b.n	8014054 <_puts_r+0x84>
 8014094:	6823      	ldr	r3, [r4, #0]
 8014096:	250a      	movs	r5, #10
 8014098:	1c5a      	adds	r2, r3, #1
 801409a:	6022      	str	r2, [r4, #0]
 801409c:	701d      	strb	r5, [r3, #0]
 801409e:	e7db      	b.n	8014058 <_puts_r+0x88>
 80140a0:	08015138 	.word	0x08015138
 80140a4:	08015158 	.word	0x08015158
 80140a8:	08015118 	.word	0x08015118

080140ac <puts>:
 80140ac:	4b02      	ldr	r3, [pc, #8]	; (80140b8 <puts+0xc>)
 80140ae:	4601      	mov	r1, r0
 80140b0:	6818      	ldr	r0, [r3, #0]
 80140b2:	f7ff bf8d 	b.w	8013fd0 <_puts_r>
 80140b6:	bf00      	nop
 80140b8:	20000014 	.word	0x20000014

080140bc <__swbuf_r>:
 80140bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80140be:	460e      	mov	r6, r1
 80140c0:	4614      	mov	r4, r2
 80140c2:	4605      	mov	r5, r0
 80140c4:	b118      	cbz	r0, 80140ce <__swbuf_r+0x12>
 80140c6:	6983      	ldr	r3, [r0, #24]
 80140c8:	b90b      	cbnz	r3, 80140ce <__swbuf_r+0x12>
 80140ca:	f000 f9cf 	bl	801446c <__sinit>
 80140ce:	4b21      	ldr	r3, [pc, #132]	; (8014154 <__swbuf_r+0x98>)
 80140d0:	429c      	cmp	r4, r3
 80140d2:	d12b      	bne.n	801412c <__swbuf_r+0x70>
 80140d4:	686c      	ldr	r4, [r5, #4]
 80140d6:	69a3      	ldr	r3, [r4, #24]
 80140d8:	60a3      	str	r3, [r4, #8]
 80140da:	89a3      	ldrh	r3, [r4, #12]
 80140dc:	071a      	lsls	r2, r3, #28
 80140de:	d52f      	bpl.n	8014140 <__swbuf_r+0x84>
 80140e0:	6923      	ldr	r3, [r4, #16]
 80140e2:	b36b      	cbz	r3, 8014140 <__swbuf_r+0x84>
 80140e4:	6923      	ldr	r3, [r4, #16]
 80140e6:	b2f6      	uxtb	r6, r6
 80140e8:	6820      	ldr	r0, [r4, #0]
 80140ea:	4637      	mov	r7, r6
 80140ec:	1ac0      	subs	r0, r0, r3
 80140ee:	6963      	ldr	r3, [r4, #20]
 80140f0:	4283      	cmp	r3, r0
 80140f2:	dc04      	bgt.n	80140fe <__swbuf_r+0x42>
 80140f4:	4621      	mov	r1, r4
 80140f6:	4628      	mov	r0, r5
 80140f8:	f000 f924 	bl	8014344 <_fflush_r>
 80140fc:	bb30      	cbnz	r0, 801414c <__swbuf_r+0x90>
 80140fe:	68a3      	ldr	r3, [r4, #8]
 8014100:	3001      	adds	r0, #1
 8014102:	3b01      	subs	r3, #1
 8014104:	60a3      	str	r3, [r4, #8]
 8014106:	6823      	ldr	r3, [r4, #0]
 8014108:	1c5a      	adds	r2, r3, #1
 801410a:	6022      	str	r2, [r4, #0]
 801410c:	701e      	strb	r6, [r3, #0]
 801410e:	6963      	ldr	r3, [r4, #20]
 8014110:	4283      	cmp	r3, r0
 8014112:	d004      	beq.n	801411e <__swbuf_r+0x62>
 8014114:	89a3      	ldrh	r3, [r4, #12]
 8014116:	07db      	lsls	r3, r3, #31
 8014118:	d506      	bpl.n	8014128 <__swbuf_r+0x6c>
 801411a:	2e0a      	cmp	r6, #10
 801411c:	d104      	bne.n	8014128 <__swbuf_r+0x6c>
 801411e:	4621      	mov	r1, r4
 8014120:	4628      	mov	r0, r5
 8014122:	f000 f90f 	bl	8014344 <_fflush_r>
 8014126:	b988      	cbnz	r0, 801414c <__swbuf_r+0x90>
 8014128:	4638      	mov	r0, r7
 801412a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801412c:	4b0a      	ldr	r3, [pc, #40]	; (8014158 <__swbuf_r+0x9c>)
 801412e:	429c      	cmp	r4, r3
 8014130:	d101      	bne.n	8014136 <__swbuf_r+0x7a>
 8014132:	68ac      	ldr	r4, [r5, #8]
 8014134:	e7cf      	b.n	80140d6 <__swbuf_r+0x1a>
 8014136:	4b09      	ldr	r3, [pc, #36]	; (801415c <__swbuf_r+0xa0>)
 8014138:	429c      	cmp	r4, r3
 801413a:	bf08      	it	eq
 801413c:	68ec      	ldreq	r4, [r5, #12]
 801413e:	e7ca      	b.n	80140d6 <__swbuf_r+0x1a>
 8014140:	4621      	mov	r1, r4
 8014142:	4628      	mov	r0, r5
 8014144:	f000 f80c 	bl	8014160 <__swsetup_r>
 8014148:	2800      	cmp	r0, #0
 801414a:	d0cb      	beq.n	80140e4 <__swbuf_r+0x28>
 801414c:	f04f 37ff 	mov.w	r7, #4294967295
 8014150:	e7ea      	b.n	8014128 <__swbuf_r+0x6c>
 8014152:	bf00      	nop
 8014154:	08015138 	.word	0x08015138
 8014158:	08015158 	.word	0x08015158
 801415c:	08015118 	.word	0x08015118

08014160 <__swsetup_r>:
 8014160:	4b32      	ldr	r3, [pc, #200]	; (801422c <__swsetup_r+0xcc>)
 8014162:	b570      	push	{r4, r5, r6, lr}
 8014164:	681d      	ldr	r5, [r3, #0]
 8014166:	4606      	mov	r6, r0
 8014168:	460c      	mov	r4, r1
 801416a:	b125      	cbz	r5, 8014176 <__swsetup_r+0x16>
 801416c:	69ab      	ldr	r3, [r5, #24]
 801416e:	b913      	cbnz	r3, 8014176 <__swsetup_r+0x16>
 8014170:	4628      	mov	r0, r5
 8014172:	f000 f97b 	bl	801446c <__sinit>
 8014176:	4b2e      	ldr	r3, [pc, #184]	; (8014230 <__swsetup_r+0xd0>)
 8014178:	429c      	cmp	r4, r3
 801417a:	d10f      	bne.n	801419c <__swsetup_r+0x3c>
 801417c:	686c      	ldr	r4, [r5, #4]
 801417e:	89a3      	ldrh	r3, [r4, #12]
 8014180:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8014184:	0719      	lsls	r1, r3, #28
 8014186:	d42c      	bmi.n	80141e2 <__swsetup_r+0x82>
 8014188:	06dd      	lsls	r5, r3, #27
 801418a:	d411      	bmi.n	80141b0 <__swsetup_r+0x50>
 801418c:	2309      	movs	r3, #9
 801418e:	6033      	str	r3, [r6, #0]
 8014190:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8014194:	f04f 30ff 	mov.w	r0, #4294967295
 8014198:	81a3      	strh	r3, [r4, #12]
 801419a:	e03e      	b.n	801421a <__swsetup_r+0xba>
 801419c:	4b25      	ldr	r3, [pc, #148]	; (8014234 <__swsetup_r+0xd4>)
 801419e:	429c      	cmp	r4, r3
 80141a0:	d101      	bne.n	80141a6 <__swsetup_r+0x46>
 80141a2:	68ac      	ldr	r4, [r5, #8]
 80141a4:	e7eb      	b.n	801417e <__swsetup_r+0x1e>
 80141a6:	4b24      	ldr	r3, [pc, #144]	; (8014238 <__swsetup_r+0xd8>)
 80141a8:	429c      	cmp	r4, r3
 80141aa:	bf08      	it	eq
 80141ac:	68ec      	ldreq	r4, [r5, #12]
 80141ae:	e7e6      	b.n	801417e <__swsetup_r+0x1e>
 80141b0:	0758      	lsls	r0, r3, #29
 80141b2:	d512      	bpl.n	80141da <__swsetup_r+0x7a>
 80141b4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80141b6:	b141      	cbz	r1, 80141ca <__swsetup_r+0x6a>
 80141b8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80141bc:	4299      	cmp	r1, r3
 80141be:	d002      	beq.n	80141c6 <__swsetup_r+0x66>
 80141c0:	4630      	mov	r0, r6
 80141c2:	f000 fa59 	bl	8014678 <_free_r>
 80141c6:	2300      	movs	r3, #0
 80141c8:	6363      	str	r3, [r4, #52]	; 0x34
 80141ca:	89a3      	ldrh	r3, [r4, #12]
 80141cc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80141d0:	81a3      	strh	r3, [r4, #12]
 80141d2:	2300      	movs	r3, #0
 80141d4:	6063      	str	r3, [r4, #4]
 80141d6:	6923      	ldr	r3, [r4, #16]
 80141d8:	6023      	str	r3, [r4, #0]
 80141da:	89a3      	ldrh	r3, [r4, #12]
 80141dc:	f043 0308 	orr.w	r3, r3, #8
 80141e0:	81a3      	strh	r3, [r4, #12]
 80141e2:	6923      	ldr	r3, [r4, #16]
 80141e4:	b94b      	cbnz	r3, 80141fa <__swsetup_r+0x9a>
 80141e6:	89a3      	ldrh	r3, [r4, #12]
 80141e8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80141ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80141f0:	d003      	beq.n	80141fa <__swsetup_r+0x9a>
 80141f2:	4621      	mov	r1, r4
 80141f4:	4630      	mov	r0, r6
 80141f6:	f000 f9ff 	bl	80145f8 <__smakebuf_r>
 80141fa:	89a0      	ldrh	r0, [r4, #12]
 80141fc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8014200:	f010 0301 	ands.w	r3, r0, #1
 8014204:	d00a      	beq.n	801421c <__swsetup_r+0xbc>
 8014206:	2300      	movs	r3, #0
 8014208:	60a3      	str	r3, [r4, #8]
 801420a:	6963      	ldr	r3, [r4, #20]
 801420c:	425b      	negs	r3, r3
 801420e:	61a3      	str	r3, [r4, #24]
 8014210:	6923      	ldr	r3, [r4, #16]
 8014212:	b943      	cbnz	r3, 8014226 <__swsetup_r+0xc6>
 8014214:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8014218:	d1ba      	bne.n	8014190 <__swsetup_r+0x30>
 801421a:	bd70      	pop	{r4, r5, r6, pc}
 801421c:	0781      	lsls	r1, r0, #30
 801421e:	bf58      	it	pl
 8014220:	6963      	ldrpl	r3, [r4, #20]
 8014222:	60a3      	str	r3, [r4, #8]
 8014224:	e7f4      	b.n	8014210 <__swsetup_r+0xb0>
 8014226:	2000      	movs	r0, #0
 8014228:	e7f7      	b.n	801421a <__swsetup_r+0xba>
 801422a:	bf00      	nop
 801422c:	20000014 	.word	0x20000014
 8014230:	08015138 	.word	0x08015138
 8014234:	08015158 	.word	0x08015158
 8014238:	08015118 	.word	0x08015118

0801423c <__sflush_r>:
 801423c:	898a      	ldrh	r2, [r1, #12]
 801423e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014242:	4605      	mov	r5, r0
 8014244:	0710      	lsls	r0, r2, #28
 8014246:	460c      	mov	r4, r1
 8014248:	d458      	bmi.n	80142fc <__sflush_r+0xc0>
 801424a:	684b      	ldr	r3, [r1, #4]
 801424c:	2b00      	cmp	r3, #0
 801424e:	dc05      	bgt.n	801425c <__sflush_r+0x20>
 8014250:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8014252:	2b00      	cmp	r3, #0
 8014254:	dc02      	bgt.n	801425c <__sflush_r+0x20>
 8014256:	2000      	movs	r0, #0
 8014258:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801425c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801425e:	2e00      	cmp	r6, #0
 8014260:	d0f9      	beq.n	8014256 <__sflush_r+0x1a>
 8014262:	2300      	movs	r3, #0
 8014264:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8014268:	682f      	ldr	r7, [r5, #0]
 801426a:	602b      	str	r3, [r5, #0]
 801426c:	d032      	beq.n	80142d4 <__sflush_r+0x98>
 801426e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8014270:	89a3      	ldrh	r3, [r4, #12]
 8014272:	075a      	lsls	r2, r3, #29
 8014274:	d505      	bpl.n	8014282 <__sflush_r+0x46>
 8014276:	6863      	ldr	r3, [r4, #4]
 8014278:	1ac0      	subs	r0, r0, r3
 801427a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801427c:	b10b      	cbz	r3, 8014282 <__sflush_r+0x46>
 801427e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8014280:	1ac0      	subs	r0, r0, r3
 8014282:	2300      	movs	r3, #0
 8014284:	4602      	mov	r2, r0
 8014286:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8014288:	4628      	mov	r0, r5
 801428a:	6a21      	ldr	r1, [r4, #32]
 801428c:	47b0      	blx	r6
 801428e:	1c43      	adds	r3, r0, #1
 8014290:	89a3      	ldrh	r3, [r4, #12]
 8014292:	d106      	bne.n	80142a2 <__sflush_r+0x66>
 8014294:	6829      	ldr	r1, [r5, #0]
 8014296:	291d      	cmp	r1, #29
 8014298:	d82c      	bhi.n	80142f4 <__sflush_r+0xb8>
 801429a:	4a29      	ldr	r2, [pc, #164]	; (8014340 <__sflush_r+0x104>)
 801429c:	40ca      	lsrs	r2, r1
 801429e:	07d6      	lsls	r6, r2, #31
 80142a0:	d528      	bpl.n	80142f4 <__sflush_r+0xb8>
 80142a2:	2200      	movs	r2, #0
 80142a4:	04d9      	lsls	r1, r3, #19
 80142a6:	6062      	str	r2, [r4, #4]
 80142a8:	6922      	ldr	r2, [r4, #16]
 80142aa:	6022      	str	r2, [r4, #0]
 80142ac:	d504      	bpl.n	80142b8 <__sflush_r+0x7c>
 80142ae:	1c42      	adds	r2, r0, #1
 80142b0:	d101      	bne.n	80142b6 <__sflush_r+0x7a>
 80142b2:	682b      	ldr	r3, [r5, #0]
 80142b4:	b903      	cbnz	r3, 80142b8 <__sflush_r+0x7c>
 80142b6:	6560      	str	r0, [r4, #84]	; 0x54
 80142b8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80142ba:	602f      	str	r7, [r5, #0]
 80142bc:	2900      	cmp	r1, #0
 80142be:	d0ca      	beq.n	8014256 <__sflush_r+0x1a>
 80142c0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80142c4:	4299      	cmp	r1, r3
 80142c6:	d002      	beq.n	80142ce <__sflush_r+0x92>
 80142c8:	4628      	mov	r0, r5
 80142ca:	f000 f9d5 	bl	8014678 <_free_r>
 80142ce:	2000      	movs	r0, #0
 80142d0:	6360      	str	r0, [r4, #52]	; 0x34
 80142d2:	e7c1      	b.n	8014258 <__sflush_r+0x1c>
 80142d4:	6a21      	ldr	r1, [r4, #32]
 80142d6:	2301      	movs	r3, #1
 80142d8:	4628      	mov	r0, r5
 80142da:	47b0      	blx	r6
 80142dc:	1c41      	adds	r1, r0, #1
 80142de:	d1c7      	bne.n	8014270 <__sflush_r+0x34>
 80142e0:	682b      	ldr	r3, [r5, #0]
 80142e2:	2b00      	cmp	r3, #0
 80142e4:	d0c4      	beq.n	8014270 <__sflush_r+0x34>
 80142e6:	2b1d      	cmp	r3, #29
 80142e8:	d001      	beq.n	80142ee <__sflush_r+0xb2>
 80142ea:	2b16      	cmp	r3, #22
 80142ec:	d101      	bne.n	80142f2 <__sflush_r+0xb6>
 80142ee:	602f      	str	r7, [r5, #0]
 80142f0:	e7b1      	b.n	8014256 <__sflush_r+0x1a>
 80142f2:	89a3      	ldrh	r3, [r4, #12]
 80142f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80142f8:	81a3      	strh	r3, [r4, #12]
 80142fa:	e7ad      	b.n	8014258 <__sflush_r+0x1c>
 80142fc:	690f      	ldr	r7, [r1, #16]
 80142fe:	2f00      	cmp	r7, #0
 8014300:	d0a9      	beq.n	8014256 <__sflush_r+0x1a>
 8014302:	0793      	lsls	r3, r2, #30
 8014304:	680e      	ldr	r6, [r1, #0]
 8014306:	600f      	str	r7, [r1, #0]
 8014308:	bf0c      	ite	eq
 801430a:	694b      	ldreq	r3, [r1, #20]
 801430c:	2300      	movne	r3, #0
 801430e:	eba6 0807 	sub.w	r8, r6, r7
 8014312:	608b      	str	r3, [r1, #8]
 8014314:	f1b8 0f00 	cmp.w	r8, #0
 8014318:	dd9d      	ble.n	8014256 <__sflush_r+0x1a>
 801431a:	4643      	mov	r3, r8
 801431c:	463a      	mov	r2, r7
 801431e:	6a21      	ldr	r1, [r4, #32]
 8014320:	4628      	mov	r0, r5
 8014322:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8014324:	47b0      	blx	r6
 8014326:	2800      	cmp	r0, #0
 8014328:	dc06      	bgt.n	8014338 <__sflush_r+0xfc>
 801432a:	89a3      	ldrh	r3, [r4, #12]
 801432c:	f04f 30ff 	mov.w	r0, #4294967295
 8014330:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014334:	81a3      	strh	r3, [r4, #12]
 8014336:	e78f      	b.n	8014258 <__sflush_r+0x1c>
 8014338:	4407      	add	r7, r0
 801433a:	eba8 0800 	sub.w	r8, r8, r0
 801433e:	e7e9      	b.n	8014314 <__sflush_r+0xd8>
 8014340:	20400001 	.word	0x20400001

08014344 <_fflush_r>:
 8014344:	b538      	push	{r3, r4, r5, lr}
 8014346:	690b      	ldr	r3, [r1, #16]
 8014348:	4605      	mov	r5, r0
 801434a:	460c      	mov	r4, r1
 801434c:	b913      	cbnz	r3, 8014354 <_fflush_r+0x10>
 801434e:	2500      	movs	r5, #0
 8014350:	4628      	mov	r0, r5
 8014352:	bd38      	pop	{r3, r4, r5, pc}
 8014354:	b118      	cbz	r0, 801435e <_fflush_r+0x1a>
 8014356:	6983      	ldr	r3, [r0, #24]
 8014358:	b90b      	cbnz	r3, 801435e <_fflush_r+0x1a>
 801435a:	f000 f887 	bl	801446c <__sinit>
 801435e:	4b14      	ldr	r3, [pc, #80]	; (80143b0 <_fflush_r+0x6c>)
 8014360:	429c      	cmp	r4, r3
 8014362:	d11b      	bne.n	801439c <_fflush_r+0x58>
 8014364:	686c      	ldr	r4, [r5, #4]
 8014366:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801436a:	2b00      	cmp	r3, #0
 801436c:	d0ef      	beq.n	801434e <_fflush_r+0xa>
 801436e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8014370:	07d0      	lsls	r0, r2, #31
 8014372:	d404      	bmi.n	801437e <_fflush_r+0x3a>
 8014374:	0599      	lsls	r1, r3, #22
 8014376:	d402      	bmi.n	801437e <_fflush_r+0x3a>
 8014378:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801437a:	f000 f915 	bl	80145a8 <__retarget_lock_acquire_recursive>
 801437e:	4628      	mov	r0, r5
 8014380:	4621      	mov	r1, r4
 8014382:	f7ff ff5b 	bl	801423c <__sflush_r>
 8014386:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8014388:	4605      	mov	r5, r0
 801438a:	07da      	lsls	r2, r3, #31
 801438c:	d4e0      	bmi.n	8014350 <_fflush_r+0xc>
 801438e:	89a3      	ldrh	r3, [r4, #12]
 8014390:	059b      	lsls	r3, r3, #22
 8014392:	d4dd      	bmi.n	8014350 <_fflush_r+0xc>
 8014394:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014396:	f000 f908 	bl	80145aa <__retarget_lock_release_recursive>
 801439a:	e7d9      	b.n	8014350 <_fflush_r+0xc>
 801439c:	4b05      	ldr	r3, [pc, #20]	; (80143b4 <_fflush_r+0x70>)
 801439e:	429c      	cmp	r4, r3
 80143a0:	d101      	bne.n	80143a6 <_fflush_r+0x62>
 80143a2:	68ac      	ldr	r4, [r5, #8]
 80143a4:	e7df      	b.n	8014366 <_fflush_r+0x22>
 80143a6:	4b04      	ldr	r3, [pc, #16]	; (80143b8 <_fflush_r+0x74>)
 80143a8:	429c      	cmp	r4, r3
 80143aa:	bf08      	it	eq
 80143ac:	68ec      	ldreq	r4, [r5, #12]
 80143ae:	e7da      	b.n	8014366 <_fflush_r+0x22>
 80143b0:	08015138 	.word	0x08015138
 80143b4:	08015158 	.word	0x08015158
 80143b8:	08015118 	.word	0x08015118

080143bc <std>:
 80143bc:	2300      	movs	r3, #0
 80143be:	b510      	push	{r4, lr}
 80143c0:	4604      	mov	r4, r0
 80143c2:	6083      	str	r3, [r0, #8]
 80143c4:	8181      	strh	r1, [r0, #12]
 80143c6:	4619      	mov	r1, r3
 80143c8:	6643      	str	r3, [r0, #100]	; 0x64
 80143ca:	81c2      	strh	r2, [r0, #14]
 80143cc:	2208      	movs	r2, #8
 80143ce:	6183      	str	r3, [r0, #24]
 80143d0:	e9c0 3300 	strd	r3, r3, [r0]
 80143d4:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80143d8:	305c      	adds	r0, #92	; 0x5c
 80143da:	f7ff fdf1 	bl	8013fc0 <memset>
 80143de:	4b05      	ldr	r3, [pc, #20]	; (80143f4 <std+0x38>)
 80143e0:	6224      	str	r4, [r4, #32]
 80143e2:	6263      	str	r3, [r4, #36]	; 0x24
 80143e4:	4b04      	ldr	r3, [pc, #16]	; (80143f8 <std+0x3c>)
 80143e6:	62a3      	str	r3, [r4, #40]	; 0x28
 80143e8:	4b04      	ldr	r3, [pc, #16]	; (80143fc <std+0x40>)
 80143ea:	62e3      	str	r3, [r4, #44]	; 0x2c
 80143ec:	4b04      	ldr	r3, [pc, #16]	; (8014400 <std+0x44>)
 80143ee:	6323      	str	r3, [r4, #48]	; 0x30
 80143f0:	bd10      	pop	{r4, pc}
 80143f2:	bf00      	nop
 80143f4:	08014859 	.word	0x08014859
 80143f8:	0801487b 	.word	0x0801487b
 80143fc:	080148b3 	.word	0x080148b3
 8014400:	080148d7 	.word	0x080148d7

08014404 <_cleanup_r>:
 8014404:	4901      	ldr	r1, [pc, #4]	; (801440c <_cleanup_r+0x8>)
 8014406:	f000 b8af 	b.w	8014568 <_fwalk_reent>
 801440a:	bf00      	nop
 801440c:	08014345 	.word	0x08014345

08014410 <__sfmoreglue>:
 8014410:	b570      	push	{r4, r5, r6, lr}
 8014412:	2268      	movs	r2, #104	; 0x68
 8014414:	1e4d      	subs	r5, r1, #1
 8014416:	460e      	mov	r6, r1
 8014418:	4355      	muls	r5, r2
 801441a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801441e:	f000 f997 	bl	8014750 <_malloc_r>
 8014422:	4604      	mov	r4, r0
 8014424:	b140      	cbz	r0, 8014438 <__sfmoreglue+0x28>
 8014426:	2100      	movs	r1, #0
 8014428:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801442c:	e9c0 1600 	strd	r1, r6, [r0]
 8014430:	300c      	adds	r0, #12
 8014432:	60a0      	str	r0, [r4, #8]
 8014434:	f7ff fdc4 	bl	8013fc0 <memset>
 8014438:	4620      	mov	r0, r4
 801443a:	bd70      	pop	{r4, r5, r6, pc}

0801443c <__sfp_lock_acquire>:
 801443c:	4801      	ldr	r0, [pc, #4]	; (8014444 <__sfp_lock_acquire+0x8>)
 801443e:	f000 b8b3 	b.w	80145a8 <__retarget_lock_acquire_recursive>
 8014442:	bf00      	nop
 8014444:	2000282d 	.word	0x2000282d

08014448 <__sfp_lock_release>:
 8014448:	4801      	ldr	r0, [pc, #4]	; (8014450 <__sfp_lock_release+0x8>)
 801444a:	f000 b8ae 	b.w	80145aa <__retarget_lock_release_recursive>
 801444e:	bf00      	nop
 8014450:	2000282d 	.word	0x2000282d

08014454 <__sinit_lock_acquire>:
 8014454:	4801      	ldr	r0, [pc, #4]	; (801445c <__sinit_lock_acquire+0x8>)
 8014456:	f000 b8a7 	b.w	80145a8 <__retarget_lock_acquire_recursive>
 801445a:	bf00      	nop
 801445c:	2000282e 	.word	0x2000282e

08014460 <__sinit_lock_release>:
 8014460:	4801      	ldr	r0, [pc, #4]	; (8014468 <__sinit_lock_release+0x8>)
 8014462:	f000 b8a2 	b.w	80145aa <__retarget_lock_release_recursive>
 8014466:	bf00      	nop
 8014468:	2000282e 	.word	0x2000282e

0801446c <__sinit>:
 801446c:	b510      	push	{r4, lr}
 801446e:	4604      	mov	r4, r0
 8014470:	f7ff fff0 	bl	8014454 <__sinit_lock_acquire>
 8014474:	69a3      	ldr	r3, [r4, #24]
 8014476:	b11b      	cbz	r3, 8014480 <__sinit+0x14>
 8014478:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801447c:	f7ff bff0 	b.w	8014460 <__sinit_lock_release>
 8014480:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8014484:	6523      	str	r3, [r4, #80]	; 0x50
 8014486:	4620      	mov	r0, r4
 8014488:	4b12      	ldr	r3, [pc, #72]	; (80144d4 <__sinit+0x68>)
 801448a:	4a13      	ldr	r2, [pc, #76]	; (80144d8 <__sinit+0x6c>)
 801448c:	681b      	ldr	r3, [r3, #0]
 801448e:	62a2      	str	r2, [r4, #40]	; 0x28
 8014490:	42a3      	cmp	r3, r4
 8014492:	bf04      	itt	eq
 8014494:	2301      	moveq	r3, #1
 8014496:	61a3      	streq	r3, [r4, #24]
 8014498:	f000 f820 	bl	80144dc <__sfp>
 801449c:	6060      	str	r0, [r4, #4]
 801449e:	4620      	mov	r0, r4
 80144a0:	f000 f81c 	bl	80144dc <__sfp>
 80144a4:	60a0      	str	r0, [r4, #8]
 80144a6:	4620      	mov	r0, r4
 80144a8:	f000 f818 	bl	80144dc <__sfp>
 80144ac:	2200      	movs	r2, #0
 80144ae:	2104      	movs	r1, #4
 80144b0:	60e0      	str	r0, [r4, #12]
 80144b2:	6860      	ldr	r0, [r4, #4]
 80144b4:	f7ff ff82 	bl	80143bc <std>
 80144b8:	2201      	movs	r2, #1
 80144ba:	2109      	movs	r1, #9
 80144bc:	68a0      	ldr	r0, [r4, #8]
 80144be:	f7ff ff7d 	bl	80143bc <std>
 80144c2:	2202      	movs	r2, #2
 80144c4:	2112      	movs	r1, #18
 80144c6:	68e0      	ldr	r0, [r4, #12]
 80144c8:	f7ff ff78 	bl	80143bc <std>
 80144cc:	2301      	movs	r3, #1
 80144ce:	61a3      	str	r3, [r4, #24]
 80144d0:	e7d2      	b.n	8014478 <__sinit+0xc>
 80144d2:	bf00      	nop
 80144d4:	08015114 	.word	0x08015114
 80144d8:	08014405 	.word	0x08014405

080144dc <__sfp>:
 80144dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80144de:	4607      	mov	r7, r0
 80144e0:	f7ff ffac 	bl	801443c <__sfp_lock_acquire>
 80144e4:	4b1e      	ldr	r3, [pc, #120]	; (8014560 <__sfp+0x84>)
 80144e6:	681e      	ldr	r6, [r3, #0]
 80144e8:	69b3      	ldr	r3, [r6, #24]
 80144ea:	b913      	cbnz	r3, 80144f2 <__sfp+0x16>
 80144ec:	4630      	mov	r0, r6
 80144ee:	f7ff ffbd 	bl	801446c <__sinit>
 80144f2:	3648      	adds	r6, #72	; 0x48
 80144f4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80144f8:	3b01      	subs	r3, #1
 80144fa:	d503      	bpl.n	8014504 <__sfp+0x28>
 80144fc:	6833      	ldr	r3, [r6, #0]
 80144fe:	b30b      	cbz	r3, 8014544 <__sfp+0x68>
 8014500:	6836      	ldr	r6, [r6, #0]
 8014502:	e7f7      	b.n	80144f4 <__sfp+0x18>
 8014504:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8014508:	b9d5      	cbnz	r5, 8014540 <__sfp+0x64>
 801450a:	4b16      	ldr	r3, [pc, #88]	; (8014564 <__sfp+0x88>)
 801450c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8014510:	6665      	str	r5, [r4, #100]	; 0x64
 8014512:	60e3      	str	r3, [r4, #12]
 8014514:	f000 f847 	bl	80145a6 <__retarget_lock_init_recursive>
 8014518:	f7ff ff96 	bl	8014448 <__sfp_lock_release>
 801451c:	2208      	movs	r2, #8
 801451e:	4629      	mov	r1, r5
 8014520:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8014524:	6025      	str	r5, [r4, #0]
 8014526:	61a5      	str	r5, [r4, #24]
 8014528:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801452c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8014530:	f7ff fd46 	bl	8013fc0 <memset>
 8014534:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8014538:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801453c:	4620      	mov	r0, r4
 801453e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014540:	3468      	adds	r4, #104	; 0x68
 8014542:	e7d9      	b.n	80144f8 <__sfp+0x1c>
 8014544:	2104      	movs	r1, #4
 8014546:	4638      	mov	r0, r7
 8014548:	f7ff ff62 	bl	8014410 <__sfmoreglue>
 801454c:	4604      	mov	r4, r0
 801454e:	6030      	str	r0, [r6, #0]
 8014550:	2800      	cmp	r0, #0
 8014552:	d1d5      	bne.n	8014500 <__sfp+0x24>
 8014554:	f7ff ff78 	bl	8014448 <__sfp_lock_release>
 8014558:	230c      	movs	r3, #12
 801455a:	603b      	str	r3, [r7, #0]
 801455c:	e7ee      	b.n	801453c <__sfp+0x60>
 801455e:	bf00      	nop
 8014560:	08015114 	.word	0x08015114
 8014564:	ffff0001 	.word	0xffff0001

08014568 <_fwalk_reent>:
 8014568:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801456c:	4606      	mov	r6, r0
 801456e:	4688      	mov	r8, r1
 8014570:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8014574:	2700      	movs	r7, #0
 8014576:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801457a:	f1b9 0901 	subs.w	r9, r9, #1
 801457e:	d505      	bpl.n	801458c <_fwalk_reent+0x24>
 8014580:	6824      	ldr	r4, [r4, #0]
 8014582:	2c00      	cmp	r4, #0
 8014584:	d1f7      	bne.n	8014576 <_fwalk_reent+0xe>
 8014586:	4638      	mov	r0, r7
 8014588:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801458c:	89ab      	ldrh	r3, [r5, #12]
 801458e:	2b01      	cmp	r3, #1
 8014590:	d907      	bls.n	80145a2 <_fwalk_reent+0x3a>
 8014592:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8014596:	3301      	adds	r3, #1
 8014598:	d003      	beq.n	80145a2 <_fwalk_reent+0x3a>
 801459a:	4629      	mov	r1, r5
 801459c:	4630      	mov	r0, r6
 801459e:	47c0      	blx	r8
 80145a0:	4307      	orrs	r7, r0
 80145a2:	3568      	adds	r5, #104	; 0x68
 80145a4:	e7e9      	b.n	801457a <_fwalk_reent+0x12>

080145a6 <__retarget_lock_init_recursive>:
 80145a6:	4770      	bx	lr

080145a8 <__retarget_lock_acquire_recursive>:
 80145a8:	4770      	bx	lr

080145aa <__retarget_lock_release_recursive>:
 80145aa:	4770      	bx	lr

080145ac <__swhatbuf_r>:
 80145ac:	b570      	push	{r4, r5, r6, lr}
 80145ae:	460e      	mov	r6, r1
 80145b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80145b4:	b096      	sub	sp, #88	; 0x58
 80145b6:	4614      	mov	r4, r2
 80145b8:	2900      	cmp	r1, #0
 80145ba:	461d      	mov	r5, r3
 80145bc:	da08      	bge.n	80145d0 <__swhatbuf_r+0x24>
 80145be:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80145c2:	2200      	movs	r2, #0
 80145c4:	602a      	str	r2, [r5, #0]
 80145c6:	061a      	lsls	r2, r3, #24
 80145c8:	d410      	bmi.n	80145ec <__swhatbuf_r+0x40>
 80145ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80145ce:	e00e      	b.n	80145ee <__swhatbuf_r+0x42>
 80145d0:	466a      	mov	r2, sp
 80145d2:	f000 f9a7 	bl	8014924 <_fstat_r>
 80145d6:	2800      	cmp	r0, #0
 80145d8:	dbf1      	blt.n	80145be <__swhatbuf_r+0x12>
 80145da:	9a01      	ldr	r2, [sp, #4]
 80145dc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80145e0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80145e4:	425a      	negs	r2, r3
 80145e6:	415a      	adcs	r2, r3
 80145e8:	602a      	str	r2, [r5, #0]
 80145ea:	e7ee      	b.n	80145ca <__swhatbuf_r+0x1e>
 80145ec:	2340      	movs	r3, #64	; 0x40
 80145ee:	2000      	movs	r0, #0
 80145f0:	6023      	str	r3, [r4, #0]
 80145f2:	b016      	add	sp, #88	; 0x58
 80145f4:	bd70      	pop	{r4, r5, r6, pc}
	...

080145f8 <__smakebuf_r>:
 80145f8:	898b      	ldrh	r3, [r1, #12]
 80145fa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80145fc:	079d      	lsls	r5, r3, #30
 80145fe:	4606      	mov	r6, r0
 8014600:	460c      	mov	r4, r1
 8014602:	d507      	bpl.n	8014614 <__smakebuf_r+0x1c>
 8014604:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8014608:	6023      	str	r3, [r4, #0]
 801460a:	6123      	str	r3, [r4, #16]
 801460c:	2301      	movs	r3, #1
 801460e:	6163      	str	r3, [r4, #20]
 8014610:	b002      	add	sp, #8
 8014612:	bd70      	pop	{r4, r5, r6, pc}
 8014614:	ab01      	add	r3, sp, #4
 8014616:	466a      	mov	r2, sp
 8014618:	f7ff ffc8 	bl	80145ac <__swhatbuf_r>
 801461c:	9900      	ldr	r1, [sp, #0]
 801461e:	4605      	mov	r5, r0
 8014620:	4630      	mov	r0, r6
 8014622:	f000 f895 	bl	8014750 <_malloc_r>
 8014626:	b948      	cbnz	r0, 801463c <__smakebuf_r+0x44>
 8014628:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801462c:	059a      	lsls	r2, r3, #22
 801462e:	d4ef      	bmi.n	8014610 <__smakebuf_r+0x18>
 8014630:	f023 0303 	bic.w	r3, r3, #3
 8014634:	f043 0302 	orr.w	r3, r3, #2
 8014638:	81a3      	strh	r3, [r4, #12]
 801463a:	e7e3      	b.n	8014604 <__smakebuf_r+0xc>
 801463c:	4b0d      	ldr	r3, [pc, #52]	; (8014674 <__smakebuf_r+0x7c>)
 801463e:	62b3      	str	r3, [r6, #40]	; 0x28
 8014640:	89a3      	ldrh	r3, [r4, #12]
 8014642:	6020      	str	r0, [r4, #0]
 8014644:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014648:	6120      	str	r0, [r4, #16]
 801464a:	81a3      	strh	r3, [r4, #12]
 801464c:	9b00      	ldr	r3, [sp, #0]
 801464e:	6163      	str	r3, [r4, #20]
 8014650:	9b01      	ldr	r3, [sp, #4]
 8014652:	b15b      	cbz	r3, 801466c <__smakebuf_r+0x74>
 8014654:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014658:	4630      	mov	r0, r6
 801465a:	f000 f975 	bl	8014948 <_isatty_r>
 801465e:	b128      	cbz	r0, 801466c <__smakebuf_r+0x74>
 8014660:	89a3      	ldrh	r3, [r4, #12]
 8014662:	f023 0303 	bic.w	r3, r3, #3
 8014666:	f043 0301 	orr.w	r3, r3, #1
 801466a:	81a3      	strh	r3, [r4, #12]
 801466c:	89a0      	ldrh	r0, [r4, #12]
 801466e:	4305      	orrs	r5, r0
 8014670:	81a5      	strh	r5, [r4, #12]
 8014672:	e7cd      	b.n	8014610 <__smakebuf_r+0x18>
 8014674:	08014405 	.word	0x08014405

08014678 <_free_r>:
 8014678:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801467a:	2900      	cmp	r1, #0
 801467c:	d043      	beq.n	8014706 <_free_r+0x8e>
 801467e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014682:	1f0c      	subs	r4, r1, #4
 8014684:	9001      	str	r0, [sp, #4]
 8014686:	2b00      	cmp	r3, #0
 8014688:	bfb8      	it	lt
 801468a:	18e4      	addlt	r4, r4, r3
 801468c:	f000 f97e 	bl	801498c <__malloc_lock>
 8014690:	4a1e      	ldr	r2, [pc, #120]	; (801470c <_free_r+0x94>)
 8014692:	9801      	ldr	r0, [sp, #4]
 8014694:	6813      	ldr	r3, [r2, #0]
 8014696:	b933      	cbnz	r3, 80146a6 <_free_r+0x2e>
 8014698:	6063      	str	r3, [r4, #4]
 801469a:	6014      	str	r4, [r2, #0]
 801469c:	b003      	add	sp, #12
 801469e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80146a2:	f000 b979 	b.w	8014998 <__malloc_unlock>
 80146a6:	42a3      	cmp	r3, r4
 80146a8:	d908      	bls.n	80146bc <_free_r+0x44>
 80146aa:	6825      	ldr	r5, [r4, #0]
 80146ac:	1961      	adds	r1, r4, r5
 80146ae:	428b      	cmp	r3, r1
 80146b0:	bf01      	itttt	eq
 80146b2:	6819      	ldreq	r1, [r3, #0]
 80146b4:	685b      	ldreq	r3, [r3, #4]
 80146b6:	1949      	addeq	r1, r1, r5
 80146b8:	6021      	streq	r1, [r4, #0]
 80146ba:	e7ed      	b.n	8014698 <_free_r+0x20>
 80146bc:	461a      	mov	r2, r3
 80146be:	685b      	ldr	r3, [r3, #4]
 80146c0:	b10b      	cbz	r3, 80146c6 <_free_r+0x4e>
 80146c2:	42a3      	cmp	r3, r4
 80146c4:	d9fa      	bls.n	80146bc <_free_r+0x44>
 80146c6:	6811      	ldr	r1, [r2, #0]
 80146c8:	1855      	adds	r5, r2, r1
 80146ca:	42a5      	cmp	r5, r4
 80146cc:	d10b      	bne.n	80146e6 <_free_r+0x6e>
 80146ce:	6824      	ldr	r4, [r4, #0]
 80146d0:	4421      	add	r1, r4
 80146d2:	1854      	adds	r4, r2, r1
 80146d4:	6011      	str	r1, [r2, #0]
 80146d6:	42a3      	cmp	r3, r4
 80146d8:	d1e0      	bne.n	801469c <_free_r+0x24>
 80146da:	681c      	ldr	r4, [r3, #0]
 80146dc:	685b      	ldr	r3, [r3, #4]
 80146de:	4421      	add	r1, r4
 80146e0:	6053      	str	r3, [r2, #4]
 80146e2:	6011      	str	r1, [r2, #0]
 80146e4:	e7da      	b.n	801469c <_free_r+0x24>
 80146e6:	d902      	bls.n	80146ee <_free_r+0x76>
 80146e8:	230c      	movs	r3, #12
 80146ea:	6003      	str	r3, [r0, #0]
 80146ec:	e7d6      	b.n	801469c <_free_r+0x24>
 80146ee:	6825      	ldr	r5, [r4, #0]
 80146f0:	1961      	adds	r1, r4, r5
 80146f2:	428b      	cmp	r3, r1
 80146f4:	bf02      	ittt	eq
 80146f6:	6819      	ldreq	r1, [r3, #0]
 80146f8:	685b      	ldreq	r3, [r3, #4]
 80146fa:	1949      	addeq	r1, r1, r5
 80146fc:	6063      	str	r3, [r4, #4]
 80146fe:	bf08      	it	eq
 8014700:	6021      	streq	r1, [r4, #0]
 8014702:	6054      	str	r4, [r2, #4]
 8014704:	e7ca      	b.n	801469c <_free_r+0x24>
 8014706:	b003      	add	sp, #12
 8014708:	bd30      	pop	{r4, r5, pc}
 801470a:	bf00      	nop
 801470c:	20002830 	.word	0x20002830

08014710 <sbrk_aligned>:
 8014710:	b570      	push	{r4, r5, r6, lr}
 8014712:	4e0e      	ldr	r6, [pc, #56]	; (801474c <sbrk_aligned+0x3c>)
 8014714:	460c      	mov	r4, r1
 8014716:	4605      	mov	r5, r0
 8014718:	6831      	ldr	r1, [r6, #0]
 801471a:	b911      	cbnz	r1, 8014722 <sbrk_aligned+0x12>
 801471c:	f000 f88c 	bl	8014838 <_sbrk_r>
 8014720:	6030      	str	r0, [r6, #0]
 8014722:	4621      	mov	r1, r4
 8014724:	4628      	mov	r0, r5
 8014726:	f000 f887 	bl	8014838 <_sbrk_r>
 801472a:	1c43      	adds	r3, r0, #1
 801472c:	d00a      	beq.n	8014744 <sbrk_aligned+0x34>
 801472e:	1cc4      	adds	r4, r0, #3
 8014730:	f024 0403 	bic.w	r4, r4, #3
 8014734:	42a0      	cmp	r0, r4
 8014736:	d007      	beq.n	8014748 <sbrk_aligned+0x38>
 8014738:	1a21      	subs	r1, r4, r0
 801473a:	4628      	mov	r0, r5
 801473c:	f000 f87c 	bl	8014838 <_sbrk_r>
 8014740:	3001      	adds	r0, #1
 8014742:	d101      	bne.n	8014748 <sbrk_aligned+0x38>
 8014744:	f04f 34ff 	mov.w	r4, #4294967295
 8014748:	4620      	mov	r0, r4
 801474a:	bd70      	pop	{r4, r5, r6, pc}
 801474c:	20002834 	.word	0x20002834

08014750 <_malloc_r>:
 8014750:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014754:	1ccd      	adds	r5, r1, #3
 8014756:	4607      	mov	r7, r0
 8014758:	f025 0503 	bic.w	r5, r5, #3
 801475c:	3508      	adds	r5, #8
 801475e:	2d0c      	cmp	r5, #12
 8014760:	bf38      	it	cc
 8014762:	250c      	movcc	r5, #12
 8014764:	2d00      	cmp	r5, #0
 8014766:	db01      	blt.n	801476c <_malloc_r+0x1c>
 8014768:	42a9      	cmp	r1, r5
 801476a:	d905      	bls.n	8014778 <_malloc_r+0x28>
 801476c:	230c      	movs	r3, #12
 801476e:	2600      	movs	r6, #0
 8014770:	603b      	str	r3, [r7, #0]
 8014772:	4630      	mov	r0, r6
 8014774:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014778:	4e2e      	ldr	r6, [pc, #184]	; (8014834 <_malloc_r+0xe4>)
 801477a:	f000 f907 	bl	801498c <__malloc_lock>
 801477e:	6833      	ldr	r3, [r6, #0]
 8014780:	461c      	mov	r4, r3
 8014782:	bb34      	cbnz	r4, 80147d2 <_malloc_r+0x82>
 8014784:	4629      	mov	r1, r5
 8014786:	4638      	mov	r0, r7
 8014788:	f7ff ffc2 	bl	8014710 <sbrk_aligned>
 801478c:	1c43      	adds	r3, r0, #1
 801478e:	4604      	mov	r4, r0
 8014790:	d14d      	bne.n	801482e <_malloc_r+0xde>
 8014792:	6834      	ldr	r4, [r6, #0]
 8014794:	4626      	mov	r6, r4
 8014796:	2e00      	cmp	r6, #0
 8014798:	d140      	bne.n	801481c <_malloc_r+0xcc>
 801479a:	6823      	ldr	r3, [r4, #0]
 801479c:	4631      	mov	r1, r6
 801479e:	4638      	mov	r0, r7
 80147a0:	eb04 0803 	add.w	r8, r4, r3
 80147a4:	f000 f848 	bl	8014838 <_sbrk_r>
 80147a8:	4580      	cmp	r8, r0
 80147aa:	d13a      	bne.n	8014822 <_malloc_r+0xd2>
 80147ac:	6821      	ldr	r1, [r4, #0]
 80147ae:	3503      	adds	r5, #3
 80147b0:	4638      	mov	r0, r7
 80147b2:	1a6d      	subs	r5, r5, r1
 80147b4:	f025 0503 	bic.w	r5, r5, #3
 80147b8:	3508      	adds	r5, #8
 80147ba:	2d0c      	cmp	r5, #12
 80147bc:	bf38      	it	cc
 80147be:	250c      	movcc	r5, #12
 80147c0:	4629      	mov	r1, r5
 80147c2:	f7ff ffa5 	bl	8014710 <sbrk_aligned>
 80147c6:	3001      	adds	r0, #1
 80147c8:	d02b      	beq.n	8014822 <_malloc_r+0xd2>
 80147ca:	6823      	ldr	r3, [r4, #0]
 80147cc:	442b      	add	r3, r5
 80147ce:	6023      	str	r3, [r4, #0]
 80147d0:	e00e      	b.n	80147f0 <_malloc_r+0xa0>
 80147d2:	6822      	ldr	r2, [r4, #0]
 80147d4:	1b52      	subs	r2, r2, r5
 80147d6:	d41e      	bmi.n	8014816 <_malloc_r+0xc6>
 80147d8:	2a0b      	cmp	r2, #11
 80147da:	d916      	bls.n	801480a <_malloc_r+0xba>
 80147dc:	1961      	adds	r1, r4, r5
 80147de:	42a3      	cmp	r3, r4
 80147e0:	6025      	str	r5, [r4, #0]
 80147e2:	bf18      	it	ne
 80147e4:	6059      	strne	r1, [r3, #4]
 80147e6:	6863      	ldr	r3, [r4, #4]
 80147e8:	bf08      	it	eq
 80147ea:	6031      	streq	r1, [r6, #0]
 80147ec:	5162      	str	r2, [r4, r5]
 80147ee:	604b      	str	r3, [r1, #4]
 80147f0:	f104 060b 	add.w	r6, r4, #11
 80147f4:	4638      	mov	r0, r7
 80147f6:	f000 f8cf 	bl	8014998 <__malloc_unlock>
 80147fa:	1d23      	adds	r3, r4, #4
 80147fc:	f026 0607 	bic.w	r6, r6, #7
 8014800:	1af2      	subs	r2, r6, r3
 8014802:	d0b6      	beq.n	8014772 <_malloc_r+0x22>
 8014804:	1b9b      	subs	r3, r3, r6
 8014806:	50a3      	str	r3, [r4, r2]
 8014808:	e7b3      	b.n	8014772 <_malloc_r+0x22>
 801480a:	6862      	ldr	r2, [r4, #4]
 801480c:	42a3      	cmp	r3, r4
 801480e:	bf0c      	ite	eq
 8014810:	6032      	streq	r2, [r6, #0]
 8014812:	605a      	strne	r2, [r3, #4]
 8014814:	e7ec      	b.n	80147f0 <_malloc_r+0xa0>
 8014816:	4623      	mov	r3, r4
 8014818:	6864      	ldr	r4, [r4, #4]
 801481a:	e7b2      	b.n	8014782 <_malloc_r+0x32>
 801481c:	4634      	mov	r4, r6
 801481e:	6876      	ldr	r6, [r6, #4]
 8014820:	e7b9      	b.n	8014796 <_malloc_r+0x46>
 8014822:	230c      	movs	r3, #12
 8014824:	4638      	mov	r0, r7
 8014826:	603b      	str	r3, [r7, #0]
 8014828:	f000 f8b6 	bl	8014998 <__malloc_unlock>
 801482c:	e7a1      	b.n	8014772 <_malloc_r+0x22>
 801482e:	6025      	str	r5, [r4, #0]
 8014830:	e7de      	b.n	80147f0 <_malloc_r+0xa0>
 8014832:	bf00      	nop
 8014834:	20002830 	.word	0x20002830

08014838 <_sbrk_r>:
 8014838:	b538      	push	{r3, r4, r5, lr}
 801483a:	2300      	movs	r3, #0
 801483c:	4d05      	ldr	r5, [pc, #20]	; (8014854 <_sbrk_r+0x1c>)
 801483e:	4604      	mov	r4, r0
 8014840:	4608      	mov	r0, r1
 8014842:	602b      	str	r3, [r5, #0]
 8014844:	f7f1 fe90 	bl	8006568 <_sbrk>
 8014848:	1c43      	adds	r3, r0, #1
 801484a:	d102      	bne.n	8014852 <_sbrk_r+0x1a>
 801484c:	682b      	ldr	r3, [r5, #0]
 801484e:	b103      	cbz	r3, 8014852 <_sbrk_r+0x1a>
 8014850:	6023      	str	r3, [r4, #0]
 8014852:	bd38      	pop	{r3, r4, r5, pc}
 8014854:	20002838 	.word	0x20002838

08014858 <__sread>:
 8014858:	b510      	push	{r4, lr}
 801485a:	460c      	mov	r4, r1
 801485c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014860:	f000 f8a0 	bl	80149a4 <_read_r>
 8014864:	2800      	cmp	r0, #0
 8014866:	bfab      	itete	ge
 8014868:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801486a:	89a3      	ldrhlt	r3, [r4, #12]
 801486c:	181b      	addge	r3, r3, r0
 801486e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8014872:	bfac      	ite	ge
 8014874:	6563      	strge	r3, [r4, #84]	; 0x54
 8014876:	81a3      	strhlt	r3, [r4, #12]
 8014878:	bd10      	pop	{r4, pc}

0801487a <__swrite>:
 801487a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801487e:	461f      	mov	r7, r3
 8014880:	898b      	ldrh	r3, [r1, #12]
 8014882:	4605      	mov	r5, r0
 8014884:	460c      	mov	r4, r1
 8014886:	05db      	lsls	r3, r3, #23
 8014888:	4616      	mov	r6, r2
 801488a:	d505      	bpl.n	8014898 <__swrite+0x1e>
 801488c:	2302      	movs	r3, #2
 801488e:	2200      	movs	r2, #0
 8014890:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014894:	f000 f868 	bl	8014968 <_lseek_r>
 8014898:	89a3      	ldrh	r3, [r4, #12]
 801489a:	4632      	mov	r2, r6
 801489c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80148a0:	4628      	mov	r0, r5
 80148a2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80148a6:	81a3      	strh	r3, [r4, #12]
 80148a8:	463b      	mov	r3, r7
 80148aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80148ae:	f000 b817 	b.w	80148e0 <_write_r>

080148b2 <__sseek>:
 80148b2:	b510      	push	{r4, lr}
 80148b4:	460c      	mov	r4, r1
 80148b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80148ba:	f000 f855 	bl	8014968 <_lseek_r>
 80148be:	1c43      	adds	r3, r0, #1
 80148c0:	89a3      	ldrh	r3, [r4, #12]
 80148c2:	bf15      	itete	ne
 80148c4:	6560      	strne	r0, [r4, #84]	; 0x54
 80148c6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80148ca:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80148ce:	81a3      	strheq	r3, [r4, #12]
 80148d0:	bf18      	it	ne
 80148d2:	81a3      	strhne	r3, [r4, #12]
 80148d4:	bd10      	pop	{r4, pc}

080148d6 <__sclose>:
 80148d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80148da:	f000 b813 	b.w	8014904 <_close_r>
	...

080148e0 <_write_r>:
 80148e0:	b538      	push	{r3, r4, r5, lr}
 80148e2:	4604      	mov	r4, r0
 80148e4:	4d06      	ldr	r5, [pc, #24]	; (8014900 <_write_r+0x20>)
 80148e6:	4608      	mov	r0, r1
 80148e8:	4611      	mov	r1, r2
 80148ea:	2200      	movs	r2, #0
 80148ec:	602a      	str	r2, [r5, #0]
 80148ee:	461a      	mov	r2, r3
 80148f0:	f7f1 fde9 	bl	80064c6 <_write>
 80148f4:	1c43      	adds	r3, r0, #1
 80148f6:	d102      	bne.n	80148fe <_write_r+0x1e>
 80148f8:	682b      	ldr	r3, [r5, #0]
 80148fa:	b103      	cbz	r3, 80148fe <_write_r+0x1e>
 80148fc:	6023      	str	r3, [r4, #0]
 80148fe:	bd38      	pop	{r3, r4, r5, pc}
 8014900:	20002838 	.word	0x20002838

08014904 <_close_r>:
 8014904:	b538      	push	{r3, r4, r5, lr}
 8014906:	2300      	movs	r3, #0
 8014908:	4d05      	ldr	r5, [pc, #20]	; (8014920 <_close_r+0x1c>)
 801490a:	4604      	mov	r4, r0
 801490c:	4608      	mov	r0, r1
 801490e:	602b      	str	r3, [r5, #0]
 8014910:	f7f1 fdf5 	bl	80064fe <_close>
 8014914:	1c43      	adds	r3, r0, #1
 8014916:	d102      	bne.n	801491e <_close_r+0x1a>
 8014918:	682b      	ldr	r3, [r5, #0]
 801491a:	b103      	cbz	r3, 801491e <_close_r+0x1a>
 801491c:	6023      	str	r3, [r4, #0]
 801491e:	bd38      	pop	{r3, r4, r5, pc}
 8014920:	20002838 	.word	0x20002838

08014924 <_fstat_r>:
 8014924:	b538      	push	{r3, r4, r5, lr}
 8014926:	2300      	movs	r3, #0
 8014928:	4d06      	ldr	r5, [pc, #24]	; (8014944 <_fstat_r+0x20>)
 801492a:	4604      	mov	r4, r0
 801492c:	4608      	mov	r0, r1
 801492e:	4611      	mov	r1, r2
 8014930:	602b      	str	r3, [r5, #0]
 8014932:	f7f1 fdf0 	bl	8006516 <_fstat>
 8014936:	1c43      	adds	r3, r0, #1
 8014938:	d102      	bne.n	8014940 <_fstat_r+0x1c>
 801493a:	682b      	ldr	r3, [r5, #0]
 801493c:	b103      	cbz	r3, 8014940 <_fstat_r+0x1c>
 801493e:	6023      	str	r3, [r4, #0]
 8014940:	bd38      	pop	{r3, r4, r5, pc}
 8014942:	bf00      	nop
 8014944:	20002838 	.word	0x20002838

08014948 <_isatty_r>:
 8014948:	b538      	push	{r3, r4, r5, lr}
 801494a:	2300      	movs	r3, #0
 801494c:	4d05      	ldr	r5, [pc, #20]	; (8014964 <_isatty_r+0x1c>)
 801494e:	4604      	mov	r4, r0
 8014950:	4608      	mov	r0, r1
 8014952:	602b      	str	r3, [r5, #0]
 8014954:	f7f1 fdef 	bl	8006536 <_isatty>
 8014958:	1c43      	adds	r3, r0, #1
 801495a:	d102      	bne.n	8014962 <_isatty_r+0x1a>
 801495c:	682b      	ldr	r3, [r5, #0]
 801495e:	b103      	cbz	r3, 8014962 <_isatty_r+0x1a>
 8014960:	6023      	str	r3, [r4, #0]
 8014962:	bd38      	pop	{r3, r4, r5, pc}
 8014964:	20002838 	.word	0x20002838

08014968 <_lseek_r>:
 8014968:	b538      	push	{r3, r4, r5, lr}
 801496a:	4604      	mov	r4, r0
 801496c:	4d06      	ldr	r5, [pc, #24]	; (8014988 <_lseek_r+0x20>)
 801496e:	4608      	mov	r0, r1
 8014970:	4611      	mov	r1, r2
 8014972:	2200      	movs	r2, #0
 8014974:	602a      	str	r2, [r5, #0]
 8014976:	461a      	mov	r2, r3
 8014978:	f7f1 fde8 	bl	800654c <_lseek>
 801497c:	1c43      	adds	r3, r0, #1
 801497e:	d102      	bne.n	8014986 <_lseek_r+0x1e>
 8014980:	682b      	ldr	r3, [r5, #0]
 8014982:	b103      	cbz	r3, 8014986 <_lseek_r+0x1e>
 8014984:	6023      	str	r3, [r4, #0]
 8014986:	bd38      	pop	{r3, r4, r5, pc}
 8014988:	20002838 	.word	0x20002838

0801498c <__malloc_lock>:
 801498c:	4801      	ldr	r0, [pc, #4]	; (8014994 <__malloc_lock+0x8>)
 801498e:	f7ff be0b 	b.w	80145a8 <__retarget_lock_acquire_recursive>
 8014992:	bf00      	nop
 8014994:	2000282c 	.word	0x2000282c

08014998 <__malloc_unlock>:
 8014998:	4801      	ldr	r0, [pc, #4]	; (80149a0 <__malloc_unlock+0x8>)
 801499a:	f7ff be06 	b.w	80145aa <__retarget_lock_release_recursive>
 801499e:	bf00      	nop
 80149a0:	2000282c 	.word	0x2000282c

080149a4 <_read_r>:
 80149a4:	b538      	push	{r3, r4, r5, lr}
 80149a6:	4604      	mov	r4, r0
 80149a8:	4d06      	ldr	r5, [pc, #24]	; (80149c4 <_read_r+0x20>)
 80149aa:	4608      	mov	r0, r1
 80149ac:	4611      	mov	r1, r2
 80149ae:	2200      	movs	r2, #0
 80149b0:	602a      	str	r2, [r5, #0]
 80149b2:	461a      	mov	r2, r3
 80149b4:	f7f1 fd6a 	bl	800648c <_read>
 80149b8:	1c43      	adds	r3, r0, #1
 80149ba:	d102      	bne.n	80149c2 <_read_r+0x1e>
 80149bc:	682b      	ldr	r3, [r5, #0]
 80149be:	b103      	cbz	r3, 80149c2 <_read_r+0x1e>
 80149c0:	6023      	str	r3, [r4, #0]
 80149c2:	bd38      	pop	{r3, r4, r5, pc}
 80149c4:	20002838 	.word	0x20002838

080149c8 <_init>:
 80149c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80149ca:	bf00      	nop
 80149cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80149ce:	bc08      	pop	{r3}
 80149d0:	469e      	mov	lr, r3
 80149d2:	4770      	bx	lr

080149d4 <_fini>:
 80149d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80149d6:	bf00      	nop
 80149d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80149da:	bc08      	pop	{r3}
 80149dc:	469e      	mov	lr, r3
 80149de:	4770      	bx	lr
