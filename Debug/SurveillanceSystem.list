
SurveillanceSystem.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000234  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e560  08000234  08000234  00010234  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000062c  0800e794  0800e794  0001e794  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800edc0  0800edc0  0001edc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800edc4  0800edc4  0001edc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .trace        00000000  20000000  20000000  00020014  2**0
                  CONTENTS
  6 .data         00000014  20000000  0800edc8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000023f8  20000014  0800eddc  00020014  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  2000240c  0800eddc  0002240c  2**0
                  ALLOC
  9 .ARM.attributes 00000036  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 10 .debug_info   000321ec  00000000  00000000  0002004a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00007cd1  00000000  00000000  00052236  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000022d0  00000000  00000000  00059f08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001de0  00000000  00000000  0005c1d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003c38f  00000000  00000000  0005dfb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000340d2  00000000  00000000  0009a347  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0015d75c  00000000  00000000  000ce419  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  0022bb75  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000852c  00000000  00000000  0022bbc8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000234 <__do_global_dtors_aux>:
 8000234:	b510      	push	{r4, lr}
 8000236:	4c05      	ldr	r4, [pc, #20]	; (800024c <__do_global_dtors_aux+0x18>)
 8000238:	7823      	ldrb	r3, [r4, #0]
 800023a:	b933      	cbnz	r3, 800024a <__do_global_dtors_aux+0x16>
 800023c:	4b04      	ldr	r3, [pc, #16]	; (8000250 <__do_global_dtors_aux+0x1c>)
 800023e:	b113      	cbz	r3, 8000246 <__do_global_dtors_aux+0x12>
 8000240:	4804      	ldr	r0, [pc, #16]	; (8000254 <__do_global_dtors_aux+0x20>)
 8000242:	e000      	b.n	8000246 <__do_global_dtors_aux+0x12>
 8000244:	bf00      	nop
 8000246:	2301      	movs	r3, #1
 8000248:	7023      	strb	r3, [r4, #0]
 800024a:	bd10      	pop	{r4, pc}
 800024c:	20000014 	.word	0x20000014
 8000250:	00000000 	.word	0x00000000
 8000254:	0800e77c 	.word	0x0800e77c

08000258 <frame_dummy>:
 8000258:	b508      	push	{r3, lr}
 800025a:	4b03      	ldr	r3, [pc, #12]	; (8000268 <frame_dummy+0x10>)
 800025c:	b11b      	cbz	r3, 8000266 <frame_dummy+0xe>
 800025e:	4903      	ldr	r1, [pc, #12]	; (800026c <frame_dummy+0x14>)
 8000260:	4803      	ldr	r0, [pc, #12]	; (8000270 <frame_dummy+0x18>)
 8000262:	e000      	b.n	8000266 <frame_dummy+0xe>
 8000264:	bf00      	nop
 8000266:	bd08      	pop	{r3, pc}
 8000268:	00000000 	.word	0x00000000
 800026c:	20000018 	.word	0x20000018
 8000270:	0800e77c 	.word	0x0800e77c

08000274 <_tx_initialize_low_level>:
    .thumb_func
.type _tx_initialize_low_level, function
_tx_initialize_low_level:

    /* Disable interrupts during ThreadX initialization.  */
    CPSID   i
 8000274:	b672      	cpsid	i
    LDR     r1, =__RAM_segment_used_end__           // Build first free address
    ADD     r1, r1, #4                              //
    STR     r1, [r0]                                // Setup first unused memory pointer
#endif
    /* Setup Vector Table Offset Register.  */
    MOV     r0, #0xE000E000                         // Build address of NVIC registers
 8000276:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
    LDR     r1, =g_pfnVectors                       // Pickup address of vector table
 800027a:	4917      	ldr	r1, [pc, #92]	; (80002d8 <__tx_DBGHandler+0x4>)
    STR     r1, [r0, #0xD08]                        // Set vector table address
 800027c:	f8c0 1d08 	str.w	r1, [r0, #3336]	; 0xd08

    /* Enable the cycle count register.  */
    LDR     r0, =0xE0001000                         // Build address of DWT register
 8000280:	4816      	ldr	r0, [pc, #88]	; (80002dc <__tx_DBGHandler+0x8>)
    LDR     r1, [r0]                                // Pickup the current value
 8000282:	6801      	ldr	r1, [r0, #0]
    ORR     r1, r1, #1                              // Set the CYCCNTENA bit
 8000284:	f041 0101 	orr.w	r1, r1, #1
    STR     r1, [r0]                                // Enable the cycle count register
 8000288:	6001      	str	r1, [r0, #0]

    /* Set system stack pointer from vector value.  */
    LDR     r0, =_tx_thread_system_stack_ptr        // Build address of system stack pointer
 800028a:	4815      	ldr	r0, [pc, #84]	; (80002e0 <__tx_DBGHandler+0xc>)
    LDR     r1, =g_pfnVectors                       // Pickup address of vector table
 800028c:	4912      	ldr	r1, [pc, #72]	; (80002d8 <__tx_DBGHandler+0x4>)
    LDR     r1, [r1]                                // Pickup reset stack pointer
 800028e:	6809      	ldr	r1, [r1, #0]
    STR     r1, [r0]                                // Save system stack pointer
 8000290:	6001      	str	r1, [r0, #0]

    /* Configure SysTick.  */
    MOV     r0, #0xE000E000                         // Build address of NVIC registers
 8000292:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
    LDR     r1, =SYSTICK_CYCLES
 8000296:	4913      	ldr	r1, [pc, #76]	; (80002e4 <__tx_DBGHandler+0x10>)
    STR     r1, [r0, #0x14]                         // Setup SysTick Reload Value
 8000298:	6141      	str	r1, [r0, #20]
    MOV     r1, #0x7                                // Build SysTick Control Enable Value
 800029a:	f04f 0107 	mov.w	r1, #7
    STR     r1, [r0, #0x10]                         // Setup SysTick Control
 800029e:	6101      	str	r1, [r0, #16]

    /* Configure handler priorities.  */
    LDR     r1, =0x00000000                         // Rsrv, UsgF, BusF, MemM
 80002a0:	f04f 0100 	mov.w	r1, #0
    STR     r1, [r0, #0xD18]                        // Setup System Handlers 4-7 Priority Registers
 80002a4:	f8c0 1d18 	str.w	r1, [r0, #3352]	; 0xd18

    LDR     r1, =0xFF000000                         // SVCl, Rsrv, Rsrv, Rsrv
 80002a8:	f04f 417f 	mov.w	r1, #4278190080	; 0xff000000
    STR     r1, [r0, #0xD1C]                        // Setup System Handlers 8-11 Priority Registers
 80002ac:	f8c0 1d1c 	str.w	r1, [r0, #3356]	; 0xd1c
                                                    // Note: SVC must be lowest priority, which is 0xFF

    LDR     r1, =0x40FF0000                         // SysT, PnSV, Rsrv, DbgM
 80002b0:	490d      	ldr	r1, [pc, #52]	; (80002e8 <__tx_DBGHandler+0x14>)
    STR     r1, [r0, #0xD20]                        // Setup System Handlers 12-15 Priority Registers
 80002b2:	f8c0 1d20 	str.w	r1, [r0, #3360]	; 0xd20
                                                    // Note: PnSV must be lowest priority, which is 0xFF

    /* Return to caller.  */
    BX      lr
 80002b6:	4770      	bx	lr

080002b8 <__tx_BadHandler>:
    .eabi_attribute Tag_ABI_align_preserved, 1
    .global  __tx_BadHandler
    .thumb_func
.type __tx_BadHandler, function
__tx_BadHandler:
    B       __tx_BadHandler
 80002b8:	f7ff bffe 	b.w	80002b8 <__tx_BadHandler>

080002bc <__tx_IntHandler>:
    .thumb_func
.type __tx_IntHandler, function
__tx_IntHandler:
// VOID InterruptHandler (VOID)
// {
    PUSH    {r0,lr}     // Save LR (and dummy r0 to maintain stack alignment)
 80002bc:	b501      	push	{r0, lr}
    /* Do interrupt handler work here */
    /* .... */
#if (defined(TX_ENABLE_EXECUTION_CHANGE_NOTIFY) || defined(TX_EXECUTION_PROFILE_ENABLE))
    BL      _tx_execution_isr_exit              // Call the ISR exit function
#endif
    POP     {r0,lr}
 80002be:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    BX      lr
 80002c2:	4770      	bx	lr

080002c4 <SysTick_Handler>:
    .thumb_func
.type SysTick_Handler, function
SysTick_Handler:
// VOID TimerInterruptHandler (VOID)
// {
    PUSH    {r0,lr}     // Save LR (and dummy r0 to maintain stack alignment)
 80002c4:	b501      	push	{r0, lr}
#if (defined(TX_ENABLE_EXECUTION_CHANGE_NOTIFY) || defined(TX_EXECUTION_PROFILE_ENABLE))
    BL      _tx_execution_isr_enter             // Call the ISR enter function
#endif
    BL      _tx_timer_interrupt
 80002c6:	f000 f897 	bl	80003f8 <_tx_timer_interrupt>
#if (defined(TX_ENABLE_EXECUTION_CHANGE_NOTIFY) || defined(TX_EXECUTION_PROFILE_ENABLE))
    BL      _tx_execution_isr_exit              // Call the ISR exit function
#endif
    POP     {r0,lr}
 80002ca:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    BX      lr
 80002ce:	4770      	bx	lr

080002d0 <__tx_NMIHandler>:
    .eabi_attribute Tag_ABI_align_preserved, 1
    .global  __tx_NMIHandler
    .thumb_func
.type __tx_NMIHandler, function
__tx_NMIHandler:
    B       __tx_NMIHandler
 80002d0:	f7ff bffe 	b.w	80002d0 <__tx_NMIHandler>

080002d4 <__tx_DBGHandler>:
    .eabi_attribute Tag_ABI_align_preserved, 1
    .global  __tx_DBGHandler
    .thumb_func
.type __tx_DBGHandler, function
__tx_DBGHandler:
    B       __tx_DBGHandler
 80002d4:	f7ff bffe 	b.w	80002d4 <__tx_DBGHandler>
    LDR     r1, =g_pfnVectors                       // Pickup address of vector table
 80002d8:	08000000 	.word	0x08000000
    LDR     r0, =0xE0001000                         // Build address of DWT register
 80002dc:	e0001000 	.word	0xe0001000
    LDR     r0, =_tx_thread_system_stack_ptr        // Build address of system stack pointer
 80002e0:	20001e00 	.word	0x20001e00
    LDR     r1, =SYSTICK_CYCLES
 80002e4:	001869ff 	.word	0x001869ff
    LDR     r1, =0x40FF0000                         // SysT, PnSV, Rsrv, DbgM
 80002e8:	40ff0000 	.word	0x40ff0000

080002ec <_tx_thread_schedule>:
    /* This function should only ever be called on Cortex-M
       from the first schedule request. Subsequent scheduling occurs
       from the PendSV handling routine below. */

    /* Clear the preempt-disable flag to enable rescheduling after initialization on Cortex-M targets.  */
    MOV     r0, #0                                  // Build value for TX_FALSE
 80002ec:	f04f 0000 	mov.w	r0, #0
    LDR     r2, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 80002f0:	4a2d      	ldr	r2, [pc, #180]	; (80003a8 <_tx_vfp_access+0x4>)
    STR     r0, [r2, #0]                            // Clear preempt disable flag
 80002f2:	6010      	str	r0, [r2, #0]

#ifdef __ARM_FP
    /* Clear CONTROL.FPCA bit so VFP registers aren't unnecessarily stacked.  */
    MRS     r0, CONTROL                             // Pickup current CONTROL register
 80002f4:	f3ef 8014 	mrs	r0, CONTROL
    BIC     r0, r0, #4                              // Clear the FPCA bit
 80002f8:	f020 0004 	bic.w	r0, r0, #4
    MSR     CONTROL, r0                             // Setup new CONTROL register
 80002fc:	f380 8814 	msr	CONTROL, r0
#endif

    /* Enable interrupts */
    CPSIE   i
 8000300:	b662      	cpsie	i

    /* Enter the scheduler for the first time.  */
    MOV     r0, #0x10000000                         // Load PENDSVSET bit
 8000302:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    MOV     r1, #0xE000E000                         // Load NVIC base
 8000306:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    STR     r0, [r1, #0xD04]                        // Set PENDSVBIT in ICSR
 800030a:	f8c1 0d04 	str.w	r0, [r1, #3332]	; 0xd04
    DSB                                             // Complete all memory accesses
 800030e:	f3bf 8f4f 	dsb	sy
    ISB                                             // Flush pipeline
 8000312:	f3bf 8f6f 	isb	sy

08000316 <__tx_wait_here>:

    /* Wait here for the PendSV to take place.  */

__tx_wait_here:
    B       __tx_wait_here                          // Wait for the PendSV to happen
 8000316:	e7fe      	b.n	8000316 <__tx_wait_here>

08000318 <PendSV_Handler>:
    BL      _tx_execution_thread_exit               // Call the thread exit function
    POP     {r0, lr}                                // Recover LR
    CPSIE   i                                       // Enable interrupts
#endif

    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 8000318:	4824      	ldr	r0, [pc, #144]	; (80003ac <_tx_vfp_access+0x8>)
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 800031a:	4a25      	ldr	r2, [pc, #148]	; (80003b0 <_tx_vfp_access+0xc>)
    MOV     r3, #0                                  // Build NULL value
 800031c:	f04f 0300 	mov.w	r3, #0
    LDR     r1, [r0]                                // Pickup current thread pointer
 8000320:	6801      	ldr	r1, [r0, #0]

    /* Determine if there is a current thread to finish preserving.  */

    CBZ     r1, __tx_ts_new                         // If NULL, skip preservation
 8000322:	b191      	cbz	r1, 800034a <__tx_ts_new>

    /* Recover PSP and preserve current thread context.  */

    STR     r3, [r0]                                // Set _tx_thread_current_ptr to NULL
 8000324:	6003      	str	r3, [r0, #0]
    MRS     r12, PSP                                // Pickup PSP pointer (thread's stack pointer)
 8000326:	f3ef 8c09 	mrs	ip, PSP
    STMDB   r12!, {r4-r11}                          // Save its remaining registers
 800032a:	e92c 0ff0 	stmdb	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
#ifdef __ARM_FP
    TST     LR, #0x10                               // Determine if the VFP extended frame is present
 800032e:	f01e 0f10 	tst.w	lr, #16
    BNE     _skip_vfp_save
 8000332:	d101      	bne.n	8000338 <_skip_vfp_save>
    VSTMDB  r12!,{s16-s31}                          // Yes, save additional VFP registers
 8000334:	ed2c 8a10 	vstmdb	ip!, {s16-s31}

08000338 <_skip_vfp_save>:
_skip_vfp_save:
#endif
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 8000338:	4c1e      	ldr	r4, [pc, #120]	; (80003b4 <_tx_vfp_access+0x10>)
    STMDB   r12!, {LR}                              // Save LR on the stack
 800033a:	f84c ed04 	str.w	lr, [ip, #-4]!
    STR     r12, [r1, #8]                           // Save the thread stack pointer
 800033e:	f8c1 c008 	str.w	ip, [r1, #8]
_skip_secure_save:
#endif

    /* Determine if time-slice is active. If it isn't, skip time handling processing.  */

    LDR     r5, [r4]                                // Pickup current time-slice
 8000342:	6825      	ldr	r5, [r4, #0]
    CBZ     r5, __tx_ts_new                         // If not active, skip processing
 8000344:	b10d      	cbz	r5, 800034a <__tx_ts_new>

    /* Time-slice is active, save the current thread's time-slice and clear the global time-slice variable.  */

    STR     r5, [r1, #24]                           // Save current time-slice
 8000346:	618d      	str	r5, [r1, #24]

    /* Clear the global time-slice.  */

    STR     r3, [r4]                                // Clear time-slice
 8000348:	6023      	str	r3, [r4, #0]

0800034a <__tx_ts_new>:

__tx_ts_new:

    /* Now we are looking for a new thread to execute!  */

    CPSID   i                                       // Disable interrupts
 800034a:	b672      	cpsid	i
    LDR     r1, [r2]                                // Is there another thread ready to execute?
 800034c:	6811      	ldr	r1, [r2, #0]
    CBZ     r1, __tx_ts_wait                        // No, skip to the wait processing
 800034e:	b1d1      	cbz	r1, 8000386 <__tx_ts_wait>

    /* Yes, another thread is ready for else, make the current thread the new thread.  */

    STR     r1, [r0]                                // Setup the current thread pointer to the new thread
 8000350:	6001      	str	r1, [r0, #0]
    CPSIE   i                                       // Enable interrupts
 8000352:	b662      	cpsie	i

08000354 <__tx_ts_restore>:

    /* Increment the thread run count.  */

__tx_ts_restore:
    LDR     r7, [r1, #4]                            // Pickup the current thread run count
 8000354:	684f      	ldr	r7, [r1, #4]
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 8000356:	4c17      	ldr	r4, [pc, #92]	; (80003b4 <_tx_vfp_access+0x10>)
    LDR     r5, [r1, #24]                           // Pickup thread's current time-slice
 8000358:	698d      	ldr	r5, [r1, #24]
    ADD     r7, r7, #1                              // Increment the thread run count
 800035a:	f107 0701 	add.w	r7, r7, #1
    STR     r7, [r1, #4]                            // Store the new run count
 800035e:	604f      	str	r7, [r1, #4]

    /* Setup global time-slice with thread's current time-slice.  */

    STR     r5, [r4]                                // Setup global time-slice
 8000360:	6025      	str	r5, [r4, #0]
    POP     {r0,r1}                                 // Restore r1 (and dummy r0)
_skip_secure_restore:
#endif

    /* Restore the thread context and PSP.  */
    LDR     r12, [r1, #12]                          // Get stack start
 8000362:	f8d1 c00c 	ldr.w	ip, [r1, #12]
    MSR     PSPLIM, r12                             // Set stack limit
 8000366:	f38c 880b 	msr	PSPLIM, ip
    LDR     r12, [r1, #8]                           // Pickup thread's stack pointer
 800036a:	f8d1 c008 	ldr.w	ip, [r1, #8]
    LDMIA   r12!, {LR}                              // Pickup LR
 800036e:	f85c eb04 	ldr.w	lr, [ip], #4
#ifdef __ARM_FP
    TST     LR, #0x10                               // Determine if the VFP extended frame is present
 8000372:	f01e 0f10 	tst.w	lr, #16
    BNE     _skip_vfp_restore                       // If not, skip VFP restore
 8000376:	d101      	bne.n	800037c <_skip_vfp_restore>
    VLDMIA  r12!, {s16-s31}                         // Yes, restore additional VFP registers
 8000378:	ecbc 8a10 	vldmia	ip!, {s16-s31}

0800037c <_skip_vfp_restore>:
_skip_vfp_restore:
#endif
    LDMIA   r12!, {r4-r11}                          // Recover thread's registers
 800037c:	e8bc 0ff0 	ldmia.w	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
    MSR     PSP, r12                                // Setup the thread's stack pointer
 8000380:	f38c 8809 	msr	PSP, ip

    BX      lr                                      // Return to thread!
 8000384:	4770      	bx	lr

08000386 <__tx_ts_wait>:
    /* The following is the idle wait processing... in this case, no threads are ready for execution and the
       system will simply be idle until an interrupt occurs that makes a thread ready. Note that interrupts
       are disabled to allow use of WFI for waiting for a thread to arrive.  */

__tx_ts_wait:
    CPSID   i                                       // Disable interrupts
 8000386:	b672      	cpsid	i
    LDR     r1, [r2]                                // Pickup the next thread to execute pointer
 8000388:	6811      	ldr	r1, [r2, #0]
    STR     r1, [r0]                                // Store it in the current pointer
 800038a:	6001      	str	r1, [r0, #0]
    CBNZ    r1, __tx_ts_ready                       // If non-NULL, a new thread is ready!
 800038c:	b909      	cbnz	r1, 8000392 <__tx_ts_ready>
    PUSH    {r0-r3}
    BL      tx_low_power_exit                       // Exit low power mode
    POP     {r0-r3}
#endif

    CPSIE   i                                       // Enable interrupts
 800038e:	b662      	cpsie	i
    B       __tx_ts_wait                            // Loop to continue waiting
 8000390:	e7f9      	b.n	8000386 <__tx_ts_wait>

08000392 <__tx_ts_ready>:

    /* At this point, we have a new thread ready to go. Clear any newly pended PendSV - since we are
       already in the handler!  */
__tx_ts_ready:
    MOV     r7, #0x08000000                         // Build clear PendSV value
 8000392:	f04f 6700 	mov.w	r7, #134217728	; 0x8000000
    MOV     r8, #0xE000E000                         // Build base NVIC address
 8000396:	f04f 28e0 	mov.w	r8, #3758153728	; 0xe000e000
    STR     r7, [r8, #0xD04]                        // Clear any PendSV
 800039a:	f8c8 7d04 	str.w	r7, [r8, #3332]	; 0xd04

    /* Re-enable interrupts and restore new thread.  */
    CPSIE   i                                       // Enable interrupts
 800039e:	b662      	cpsie	i
    B       __tx_ts_restore                         // Restore the thread
 80003a0:	e7d8      	b.n	8000354 <__tx_ts_restore>
 80003a2:	bf00      	nop

080003a4 <_tx_vfp_access>:
.type _tx_vfp_access, function
_tx_vfp_access:
#if TX_ENABLE_FPU_SUPPORT
    VMOV.F32 s0, s0                                 // Simply access the VFP
#endif
    BX       lr                                     // Return to caller
 80003a4:	4770      	bx	lr
 80003a6:	0000      	.short	0x0000
    LDR     r2, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 80003a8:	20001e9c 	.word	0x20001e9c
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 80003ac:	20001e04 	.word	0x20001e04
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 80003b0:	20001e08 	.word	0x20001e08
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 80003b4:	20002408 	.word	0x20002408

080003b8 <_tx_thread_stack_build>:
                       pc          Initial value for pc
                       xPSR        Initial value for xPSR

    Stack Bottom: (higher memory address)  */

    LDR     r2, [r0, #16]                           // Pickup end of stack area
 80003b8:	6902      	ldr	r2, [r0, #16]
    BIC     r2, r2, #0x7                            // Align frame for 8-byte alignment
 80003ba:	f022 0207 	bic.w	r2, r2, #7
    SUB     r2, r2, #68                             // Subtract frame size
 80003be:	f1a2 0244 	sub.w	r2, r2, #68	; 0x44
#ifdef TX_SINGLE_MODE_SECURE
    LDR     r3, =0xFFFFFFFD                         // Build initial LR value for secure mode
#else
    LDR     r3, =0xFFFFFFBC                         // Build initial LR value to return to non-secure PSP
 80003c2:	f06f 0343 	mvn.w	r3, #67	; 0x43
#endif
    STR     r3, [r2, #0]                            // Save on the stack
 80003c6:	6013      	str	r3, [r2, #0]

    /* Actually build the stack frame.  */

    MOV     r3, #0                                  // Build initial register value
 80003c8:	f04f 0300 	mov.w	r3, #0
    STR     r3, [r2, #4]                            // Store initial r4
 80003cc:	6053      	str	r3, [r2, #4]
    STR     r3, [r2, #8]                            // Store initial r5
 80003ce:	6093      	str	r3, [r2, #8]
    STR     r3, [r2, #12]                           // Store initial r6
 80003d0:	60d3      	str	r3, [r2, #12]
    STR     r3, [r2, #16]                           // Store initial r7
 80003d2:	6113      	str	r3, [r2, #16]
    STR     r3, [r2, #20]                           // Store initial r8
 80003d4:	6153      	str	r3, [r2, #20]
    STR     r3, [r2, #24]                           // Store initial r9
 80003d6:	6193      	str	r3, [r2, #24]
    STR     r3, [r2, #28]                           // Store initial r10
 80003d8:	61d3      	str	r3, [r2, #28]
    STR     r3, [r2, #32]                           // Store initial r11
 80003da:	6213      	str	r3, [r2, #32]

    /* Hardware stack follows.  */

    STR     r3, [r2, #36]                           // Store initial r0
 80003dc:	6253      	str	r3, [r2, #36]	; 0x24
    STR     r3, [r2, #40]                           // Store initial r1
 80003de:	6293      	str	r3, [r2, #40]	; 0x28
    STR     r3, [r2, #44]                           // Store initial r2
 80003e0:	62d3      	str	r3, [r2, #44]	; 0x2c
    STR     r3, [r2, #48]                           // Store initial r3
 80003e2:	6313      	str	r3, [r2, #48]	; 0x30
    STR     r3, [r2, #52]                           // Store initial r12
 80003e4:	6353      	str	r3, [r2, #52]	; 0x34
    MOV     r3, #0xFFFFFFFF                         // Poison EXC_RETURN value
 80003e6:	f04f 33ff 	mov.w	r3, #4294967295
    STR     r3, [r2, #56]                           // Store initial lr
 80003ea:	6393      	str	r3, [r2, #56]	; 0x38
    STR     r1, [r2, #60]                           // Store initial pc
 80003ec:	63d1      	str	r1, [r2, #60]	; 0x3c
    MOV     r3, #0x01000000                         // Only T-bit need be set
 80003ee:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    STR     r3, [r2, #64]                           // Store initial xPSR
 80003f2:	6413      	str	r3, [r2, #64]	; 0x40

    /* Setup stack pointer.  */
    // thread_ptr -> tx_thread_stack_ptr =  r2;

    STR     r2, [r0, #8]                            // Save stack pointer in thread's
 80003f4:	6082      	str	r2, [r0, #8]
                                                    //   control block
    BX      lr                                      // Return to caller
 80003f6:	4770      	bx	lr

080003f8 <_tx_timer_interrupt>:
       for use.  */

    /* Increment the system clock.  */
    // _tx_timer_system_clock++;

    LDR     r1, =_tx_timer_system_clock             // Pickup address of system clock
 80003f8:	4922      	ldr	r1, [pc, #136]	; (8000484 <__tx_timer_nothing_expired+0x8>)
    LDR     r0, [r1, #0]                            // Pickup system clock
 80003fa:	6808      	ldr	r0, [r1, #0]
    ADD     r0, r0, #1                              // Increment system clock
 80003fc:	f100 0001 	add.w	r0, r0, #1
    STR     r0, [r1, #0]                            // Store new system clock
 8000400:	6008      	str	r0, [r1, #0]

    /* Test for time-slice expiration.  */
    // if (_tx_timer_time_slice)
    // {

    LDR     r3, =_tx_timer_time_slice               // Pickup address of time-slice
 8000402:	4b21      	ldr	r3, [pc, #132]	; (8000488 <__tx_timer_nothing_expired+0xc>)
    LDR     r2, [r3, #0]                            // Pickup time-slice
 8000404:	681a      	ldr	r2, [r3, #0]
    CBZ     r2, __tx_timer_no_time_slice            // Is it non-active?
 8000406:	b13a      	cbz	r2, 8000418 <__tx_timer_no_time_slice>
                                                    // Yes, skip time-slice processing

       /* Decrement the time_slice.  */
       // _tx_timer_time_slice--;

    SUB     r2, r2, #1                              // Decrement the time-slice
 8000408:	f1a2 0201 	sub.w	r2, r2, #1
    STR     r2, [r3, #0]                            // Store new time-slice value
 800040c:	601a      	str	r2, [r3, #0]

       /* Check for expiration.  */
       // if (__tx_timer_time_slice == 0)

    CBNZ    r2, __tx_timer_no_time_slice            // Has it expired?
 800040e:	b91a      	cbnz	r2, 8000418 <__tx_timer_no_time_slice>
                                                    // No, skip expiration processing

       /* Set the time-slice expired flag.  */
       // _tx_timer_expired_time_slice =  TX_TRUE;

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup address of expired flag
 8000410:	4b1e      	ldr	r3, [pc, #120]	; (800048c <__tx_timer_nothing_expired+0x10>)
    MOV     r0, #1                                  // Build expired value
 8000412:	f04f 0001 	mov.w	r0, #1
    STR     r0, [r3, #0]                            // Set time-slice expiration flag
 8000416:	6018      	str	r0, [r3, #0]

08000418 <__tx_timer_no_time_slice>:

    /* Test for timer expiration.  */
    // if (*_tx_timer_current_ptr)
    // {

    LDR     r1, =_tx_timer_current_ptr              // Pickup current timer pointer address
 8000418:	491d      	ldr	r1, [pc, #116]	; (8000490 <__tx_timer_nothing_expired+0x14>)
    LDR     r0, [r1, #0]                            // Pickup current timer
 800041a:	6808      	ldr	r0, [r1, #0]
    LDR     r2, [r0, #0]                            // Pickup timer list entry
 800041c:	6802      	ldr	r2, [r0, #0]
    CBZ     r2, __tx_timer_no_timer                 // Is there anything in the list?
 800041e:	b122      	cbz	r2, 800042a <__tx_timer_no_timer>
                                                    // No, just increment the timer

        /* Set expiration flag.  */
        // _tx_timer_expired =  TX_TRUE;

    LDR     r3, =_tx_timer_expired                  // Pickup expiration flag address
 8000420:	4b1c      	ldr	r3, [pc, #112]	; (8000494 <__tx_timer_nothing_expired+0x18>)
    MOV     r2, #1                                  // Build expired value
 8000422:	f04f 0201 	mov.w	r2, #1
    STR     r2, [r3, #0]                            // Set expired flag
 8000426:	601a      	str	r2, [r3, #0]
    B       __tx_timer_done                         // Finished timer processing
 8000428:	e008      	b.n	800043c <__tx_timer_done>

0800042a <__tx_timer_no_timer>:
__tx_timer_no_timer:

        /* No timer expired, increment the timer pointer.  */
        // _tx_timer_current_ptr++;

    ADD     r0, r0, #4                              // Move to next timer
 800042a:	f100 0004 	add.w	r0, r0, #4

        /* Check for wrap-around.  */
        // if (_tx_timer_current_ptr == _tx_timer_list_end)

    LDR     r3, =_tx_timer_list_end                 // Pickup addr of timer list end
 800042e:	4b1a      	ldr	r3, [pc, #104]	; (8000498 <__tx_timer_nothing_expired+0x1c>)
    LDR     r2, [r3, #0]                            // Pickup list end
 8000430:	681a      	ldr	r2, [r3, #0]
    CMP     r0, r2                                  // Are we at list end?
 8000432:	4290      	cmp	r0, r2
    BNE     __tx_timer_skip_wrap                    // No, skip wrap-around logic
 8000434:	d101      	bne.n	800043a <__tx_timer_skip_wrap>

            /* Wrap to beginning of list.  */
            // _tx_timer_current_ptr =  _tx_timer_list_start;

    LDR     r3, =_tx_timer_list_start               // Pickup addr of timer list start
 8000436:	4b19      	ldr	r3, [pc, #100]	; (800049c <__tx_timer_nothing_expired+0x20>)
    LDR     r0, [r3, #0]                            // Set current pointer to list start
 8000438:	6818      	ldr	r0, [r3, #0]

0800043a <__tx_timer_skip_wrap>:

__tx_timer_skip_wrap:

    STR     r0, [r1, #0]                            // Store new current timer pointer
 800043a:	6008      	str	r0, [r1, #0]

0800043c <__tx_timer_done>:

    /* See if anything has expired.  */
    // if ((_tx_timer_expired_time_slice) || (_tx_timer_expired))
    // {

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup addr of expired flag
 800043c:	4b13      	ldr	r3, [pc, #76]	; (800048c <__tx_timer_nothing_expired+0x10>)
    LDR     r2, [r3, #0]                            // Pickup time-slice expired flag
 800043e:	681a      	ldr	r2, [r3, #0]
    CBNZ    r2, __tx_something_expired              // Did a time-slice expire?
 8000440:	b912      	cbnz	r2, 8000448 <__tx_something_expired>
                                                    // If non-zero, time-slice expired
    LDR     r1, =_tx_timer_expired                  // Pickup addr of other expired flag
 8000442:	4914      	ldr	r1, [pc, #80]	; (8000494 <__tx_timer_nothing_expired+0x18>)
    LDR     r0, [r1, #0]                            // Pickup timer expired flag
 8000444:	6808      	ldr	r0, [r1, #0]
    CBZ     r0, __tx_timer_nothing_expired          // Did a timer expire?
 8000446:	b1c8      	cbz	r0, 800047c <__tx_timer_nothing_expired>

08000448 <__tx_something_expired>:
                                                    // No, nothing expired

__tx_something_expired:

    PUSH    {r0, lr}                                // Save the lr register on the stack
 8000448:	b501      	push	{r0, lr}

    /* Did a timer expire?  */
    // if (_tx_timer_expired)
    // {

    LDR     r1, =_tx_timer_expired                  // Pickup addr of expired flag
 800044a:	4912      	ldr	r1, [pc, #72]	; (8000494 <__tx_timer_nothing_expired+0x18>)
    LDR     r0, [r1, #0]                            // Pickup timer expired flag
 800044c:	6808      	ldr	r0, [r1, #0]
    CBZ     r0, __tx_timer_dont_activate            // Check for timer expiration
 800044e:	b108      	cbz	r0, 8000454 <__tx_timer_dont_activate>
                                                    // If not set, skip timer activation

        /* Process timer expiration.  */
        // _tx_timer_expiration_process();

    BL      _tx_timer_expiration_process            // Call the timer expiration handling routine
 8000450:	f00d fca4 	bl	800dd9c <_tx_timer_expiration_process>

08000454 <__tx_timer_dont_activate>:

    /* Did time slice expire?  */
    // if (_tx_timer_expired_time_slice)
    // {

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup addr of time-slice expired
 8000454:	4b0d      	ldr	r3, [pc, #52]	; (800048c <__tx_timer_nothing_expired+0x10>)
    LDR     r2, [r3, #0]                            // Pickup the actual flag
 8000456:	681a      	ldr	r2, [r3, #0]
    CBZ     r2, __tx_timer_not_ts_expiration        // See if the flag is set
 8000458:	b172      	cbz	r2, 8000478 <__tx_timer_not_ts_expiration>
                                                    // No, skip time-slice processing

        /* Time slice interrupted thread.  */
        // _tx_thread_time_slice();

    BL      _tx_thread_time_slice                   // Call time-slice processing
 800045a:	f00d fc11 	bl	800dc80 <_tx_thread_time_slice>
    LDR     r0, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 800045e:	4810      	ldr	r0, [pc, #64]	; (80004a0 <__tx_timer_nothing_expired+0x24>)
    LDR     r1, [r0]                                // Is the preempt disable flag set?
 8000460:	6801      	ldr	r1, [r0, #0]
    CBNZ    r1, __tx_timer_skip_time_slice          // Yes, skip the PendSV logic
 8000462:	b949      	cbnz	r1, 8000478 <__tx_timer_not_ts_expiration>
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 8000464:	480f      	ldr	r0, [pc, #60]	; (80004a4 <__tx_timer_nothing_expired+0x28>)
    LDR     r1, [r0]                                // Pickup the current thread pointer
 8000466:	6801      	ldr	r1, [r0, #0]
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 8000468:	4a0f      	ldr	r2, [pc, #60]	; (80004a8 <__tx_timer_nothing_expired+0x2c>)
    LDR     r3, [r2]                                // Pickup the execute thread pointer
 800046a:	6813      	ldr	r3, [r2, #0]
    LDR     r0, =0xE000ED04                         // Build address of control register
 800046c:	480f      	ldr	r0, [pc, #60]	; (80004ac <__tx_timer_nothing_expired+0x30>)
    LDR     r2, =0x10000000                         // Build value for PendSV bit
 800046e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    CMP     r1, r3                                  // Are they the same?
 8000472:	4299      	cmp	r1, r3
    BEQ     __tx_timer_skip_time_slice              // If the same, there was no time-slice performed
 8000474:	d000      	beq.n	8000478 <__tx_timer_not_ts_expiration>
    STR     r2, [r0]                                // Not the same, issue the PendSV for preemption
 8000476:	6002      	str	r2, [r0, #0]

08000478 <__tx_timer_not_ts_expiration>:
__tx_timer_skip_time_slice:
    // }

__tx_timer_not_ts_expiration:

    POP     {r0, lr}                                // Recover lr register (r0 is just there for
 8000478:	e8bd 4001 	ldmia.w	sp!, {r0, lr}

0800047c <__tx_timer_nothing_expired>:

    // }

__tx_timer_nothing_expired:

    DSB                                             // Complete all memory access
 800047c:	f3bf 8f4f 	dsb	sy
    BX      lr                                      // Return to caller
 8000480:	4770      	bx	lr
 8000482:	0000      	.short	0x0000
    LDR     r1, =_tx_timer_system_clock             // Pickup address of system clock
 8000484:	20001ea8 	.word	0x20001ea8
    LDR     r3, =_tx_timer_time_slice               // Pickup address of time-slice
 8000488:	20002408 	.word	0x20002408
    LDR     r3, =_tx_timer_expired_time_slice       // Pickup address of expired flag
 800048c:	20001eac 	.word	0x20001eac
    LDR     r1, =_tx_timer_current_ptr              // Pickup current timer pointer address
 8000490:	20001f38 	.word	0x20001f38
    LDR     r3, =_tx_timer_expired                  // Pickup expiration flag address
 8000494:	20001f3c 	.word	0x20001f3c
    LDR     r3, =_tx_timer_list_end                 // Pickup addr of timer list end
 8000498:	20001f34 	.word	0x20001f34
    LDR     r3, =_tx_timer_list_start               // Pickup addr of timer list start
 800049c:	20001f30 	.word	0x20001f30
    LDR     r0, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 80004a0:	20001e9c 	.word	0x20001e9c
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 80004a4:	20001e04 	.word	0x20001e04
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 80004a8:	20001e08 	.word	0x20001e08
    LDR     r0, =0xE000ED04                         // Build address of control register
 80004ac:	e000ed04 	.word	0xe000ed04

080004b0 <__aeabi_drsub>:
 80004b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80004b4:	e002      	b.n	80004bc <__adddf3>
 80004b6:	bf00      	nop

080004b8 <__aeabi_dsub>:
 80004b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080004bc <__adddf3>:
 80004bc:	b530      	push	{r4, r5, lr}
 80004be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	bf1f      	itttt	ne
 80004d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80004d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80004da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80004de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004e2:	f000 80e2 	beq.w	80006aa <__adddf3+0x1ee>
 80004e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80004ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80004ee:	bfb8      	it	lt
 80004f0:	426d      	neglt	r5, r5
 80004f2:	dd0c      	ble.n	800050e <__adddf3+0x52>
 80004f4:	442c      	add	r4, r5
 80004f6:	ea80 0202 	eor.w	r2, r0, r2
 80004fa:	ea81 0303 	eor.w	r3, r1, r3
 80004fe:	ea82 0000 	eor.w	r0, r2, r0
 8000502:	ea83 0101 	eor.w	r1, r3, r1
 8000506:	ea80 0202 	eor.w	r2, r0, r2
 800050a:	ea81 0303 	eor.w	r3, r1, r3
 800050e:	2d36      	cmp	r5, #54	; 0x36
 8000510:	bf88      	it	hi
 8000512:	bd30      	pophi	{r4, r5, pc}
 8000514:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000518:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800051c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000520:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000524:	d002      	beq.n	800052c <__adddf3+0x70>
 8000526:	4240      	negs	r0, r0
 8000528:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800052c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000530:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000534:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000538:	d002      	beq.n	8000540 <__adddf3+0x84>
 800053a:	4252      	negs	r2, r2
 800053c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000540:	ea94 0f05 	teq	r4, r5
 8000544:	f000 80a7 	beq.w	8000696 <__adddf3+0x1da>
 8000548:	f1a4 0401 	sub.w	r4, r4, #1
 800054c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000550:	db0d      	blt.n	800056e <__adddf3+0xb2>
 8000552:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000556:	fa22 f205 	lsr.w	r2, r2, r5
 800055a:	1880      	adds	r0, r0, r2
 800055c:	f141 0100 	adc.w	r1, r1, #0
 8000560:	fa03 f20e 	lsl.w	r2, r3, lr
 8000564:	1880      	adds	r0, r0, r2
 8000566:	fa43 f305 	asr.w	r3, r3, r5
 800056a:	4159      	adcs	r1, r3
 800056c:	e00e      	b.n	800058c <__adddf3+0xd0>
 800056e:	f1a5 0520 	sub.w	r5, r5, #32
 8000572:	f10e 0e20 	add.w	lr, lr, #32
 8000576:	2a01      	cmp	r2, #1
 8000578:	fa03 fc0e 	lsl.w	ip, r3, lr
 800057c:	bf28      	it	cs
 800057e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000582:	fa43 f305 	asr.w	r3, r3, r5
 8000586:	18c0      	adds	r0, r0, r3
 8000588:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800058c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000590:	d507      	bpl.n	80005a2 <__adddf3+0xe6>
 8000592:	f04f 0e00 	mov.w	lr, #0
 8000596:	f1dc 0c00 	rsbs	ip, ip, #0
 800059a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800059e:	eb6e 0101 	sbc.w	r1, lr, r1
 80005a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80005a6:	d31b      	bcc.n	80005e0 <__adddf3+0x124>
 80005a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80005ac:	d30c      	bcc.n	80005c8 <__adddf3+0x10c>
 80005ae:	0849      	lsrs	r1, r1, #1
 80005b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80005b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005b8:	f104 0401 	add.w	r4, r4, #1
 80005bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80005c4:	f080 809a 	bcs.w	80006fc <__adddf3+0x240>
 80005c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80005cc:	bf08      	it	eq
 80005ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80005d2:	f150 0000 	adcs.w	r0, r0, #0
 80005d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005da:	ea41 0105 	orr.w	r1, r1, r5
 80005de:	bd30      	pop	{r4, r5, pc}
 80005e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80005e4:	4140      	adcs	r0, r0
 80005e6:	eb41 0101 	adc.w	r1, r1, r1
 80005ea:	3c01      	subs	r4, #1
 80005ec:	bf28      	it	cs
 80005ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80005f2:	d2e9      	bcs.n	80005c8 <__adddf3+0x10c>
 80005f4:	f091 0f00 	teq	r1, #0
 80005f8:	bf04      	itt	eq
 80005fa:	4601      	moveq	r1, r0
 80005fc:	2000      	moveq	r0, #0
 80005fe:	fab1 f381 	clz	r3, r1
 8000602:	bf08      	it	eq
 8000604:	3320      	addeq	r3, #32
 8000606:	f1a3 030b 	sub.w	r3, r3, #11
 800060a:	f1b3 0220 	subs.w	r2, r3, #32
 800060e:	da0c      	bge.n	800062a <__adddf3+0x16e>
 8000610:	320c      	adds	r2, #12
 8000612:	dd08      	ble.n	8000626 <__adddf3+0x16a>
 8000614:	f102 0c14 	add.w	ip, r2, #20
 8000618:	f1c2 020c 	rsb	r2, r2, #12
 800061c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000620:	fa21 f102 	lsr.w	r1, r1, r2
 8000624:	e00c      	b.n	8000640 <__adddf3+0x184>
 8000626:	f102 0214 	add.w	r2, r2, #20
 800062a:	bfd8      	it	le
 800062c:	f1c2 0c20 	rsble	ip, r2, #32
 8000630:	fa01 f102 	lsl.w	r1, r1, r2
 8000634:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000638:	bfdc      	itt	le
 800063a:	ea41 010c 	orrle.w	r1, r1, ip
 800063e:	4090      	lslle	r0, r2
 8000640:	1ae4      	subs	r4, r4, r3
 8000642:	bfa2      	ittt	ge
 8000644:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000648:	4329      	orrge	r1, r5
 800064a:	bd30      	popge	{r4, r5, pc}
 800064c:	ea6f 0404 	mvn.w	r4, r4
 8000650:	3c1f      	subs	r4, #31
 8000652:	da1c      	bge.n	800068e <__adddf3+0x1d2>
 8000654:	340c      	adds	r4, #12
 8000656:	dc0e      	bgt.n	8000676 <__adddf3+0x1ba>
 8000658:	f104 0414 	add.w	r4, r4, #20
 800065c:	f1c4 0220 	rsb	r2, r4, #32
 8000660:	fa20 f004 	lsr.w	r0, r0, r4
 8000664:	fa01 f302 	lsl.w	r3, r1, r2
 8000668:	ea40 0003 	orr.w	r0, r0, r3
 800066c:	fa21 f304 	lsr.w	r3, r1, r4
 8000670:	ea45 0103 	orr.w	r1, r5, r3
 8000674:	bd30      	pop	{r4, r5, pc}
 8000676:	f1c4 040c 	rsb	r4, r4, #12
 800067a:	f1c4 0220 	rsb	r2, r4, #32
 800067e:	fa20 f002 	lsr.w	r0, r0, r2
 8000682:	fa01 f304 	lsl.w	r3, r1, r4
 8000686:	ea40 0003 	orr.w	r0, r0, r3
 800068a:	4629      	mov	r1, r5
 800068c:	bd30      	pop	{r4, r5, pc}
 800068e:	fa21 f004 	lsr.w	r0, r1, r4
 8000692:	4629      	mov	r1, r5
 8000694:	bd30      	pop	{r4, r5, pc}
 8000696:	f094 0f00 	teq	r4, #0
 800069a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800069e:	bf06      	itte	eq
 80006a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80006a4:	3401      	addeq	r4, #1
 80006a6:	3d01      	subne	r5, #1
 80006a8:	e74e      	b.n	8000548 <__adddf3+0x8c>
 80006aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006ae:	bf18      	it	ne
 80006b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006b4:	d029      	beq.n	800070a <__adddf3+0x24e>
 80006b6:	ea94 0f05 	teq	r4, r5
 80006ba:	bf08      	it	eq
 80006bc:	ea90 0f02 	teqeq	r0, r2
 80006c0:	d005      	beq.n	80006ce <__adddf3+0x212>
 80006c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80006c6:	bf04      	itt	eq
 80006c8:	4619      	moveq	r1, r3
 80006ca:	4610      	moveq	r0, r2
 80006cc:	bd30      	pop	{r4, r5, pc}
 80006ce:	ea91 0f03 	teq	r1, r3
 80006d2:	bf1e      	ittt	ne
 80006d4:	2100      	movne	r1, #0
 80006d6:	2000      	movne	r0, #0
 80006d8:	bd30      	popne	{r4, r5, pc}
 80006da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80006de:	d105      	bne.n	80006ec <__adddf3+0x230>
 80006e0:	0040      	lsls	r0, r0, #1
 80006e2:	4149      	adcs	r1, r1
 80006e4:	bf28      	it	cs
 80006e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80006ea:	bd30      	pop	{r4, r5, pc}
 80006ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80006f0:	bf3c      	itt	cc
 80006f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80006f6:	bd30      	popcc	{r4, r5, pc}
 80006f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000700:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000704:	f04f 0000 	mov.w	r0, #0
 8000708:	bd30      	pop	{r4, r5, pc}
 800070a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800070e:	bf1a      	itte	ne
 8000710:	4619      	movne	r1, r3
 8000712:	4610      	movne	r0, r2
 8000714:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000718:	bf1c      	itt	ne
 800071a:	460b      	movne	r3, r1
 800071c:	4602      	movne	r2, r0
 800071e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000722:	bf06      	itte	eq
 8000724:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000728:	ea91 0f03 	teqeq	r1, r3
 800072c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000730:	bd30      	pop	{r4, r5, pc}
 8000732:	bf00      	nop

08000734 <__aeabi_ui2d>:
 8000734:	f090 0f00 	teq	r0, #0
 8000738:	bf04      	itt	eq
 800073a:	2100      	moveq	r1, #0
 800073c:	4770      	bxeq	lr
 800073e:	b530      	push	{r4, r5, lr}
 8000740:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000744:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000748:	f04f 0500 	mov.w	r5, #0
 800074c:	f04f 0100 	mov.w	r1, #0
 8000750:	e750      	b.n	80005f4 <__adddf3+0x138>
 8000752:	bf00      	nop

08000754 <__aeabi_i2d>:
 8000754:	f090 0f00 	teq	r0, #0
 8000758:	bf04      	itt	eq
 800075a:	2100      	moveq	r1, #0
 800075c:	4770      	bxeq	lr
 800075e:	b530      	push	{r4, r5, lr}
 8000760:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000764:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000768:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800076c:	bf48      	it	mi
 800076e:	4240      	negmi	r0, r0
 8000770:	f04f 0100 	mov.w	r1, #0
 8000774:	e73e      	b.n	80005f4 <__adddf3+0x138>
 8000776:	bf00      	nop

08000778 <__aeabi_f2d>:
 8000778:	0042      	lsls	r2, r0, #1
 800077a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800077e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000782:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000786:	bf1f      	itttt	ne
 8000788:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800078c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000790:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000794:	4770      	bxne	lr
 8000796:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800079a:	bf08      	it	eq
 800079c:	4770      	bxeq	lr
 800079e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80007a2:	bf04      	itt	eq
 80007a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80007a8:	4770      	bxeq	lr
 80007aa:	b530      	push	{r4, r5, lr}
 80007ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80007b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80007b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007b8:	e71c      	b.n	80005f4 <__adddf3+0x138>
 80007ba:	bf00      	nop

080007bc <__aeabi_ul2d>:
 80007bc:	ea50 0201 	orrs.w	r2, r0, r1
 80007c0:	bf08      	it	eq
 80007c2:	4770      	bxeq	lr
 80007c4:	b530      	push	{r4, r5, lr}
 80007c6:	f04f 0500 	mov.w	r5, #0
 80007ca:	e00a      	b.n	80007e2 <__aeabi_l2d+0x16>

080007cc <__aeabi_l2d>:
 80007cc:	ea50 0201 	orrs.w	r2, r0, r1
 80007d0:	bf08      	it	eq
 80007d2:	4770      	bxeq	lr
 80007d4:	b530      	push	{r4, r5, lr}
 80007d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80007da:	d502      	bpl.n	80007e2 <__aeabi_l2d+0x16>
 80007dc:	4240      	negs	r0, r0
 80007de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80007ee:	f43f aed8 	beq.w	80005a2 <__adddf3+0xe6>
 80007f2:	f04f 0203 	mov.w	r2, #3
 80007f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007fa:	bf18      	it	ne
 80007fc:	3203      	addne	r2, #3
 80007fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000802:	bf18      	it	ne
 8000804:	3203      	addne	r2, #3
 8000806:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800080a:	f1c2 0320 	rsb	r3, r2, #32
 800080e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000812:	fa20 f002 	lsr.w	r0, r0, r2
 8000816:	fa01 fe03 	lsl.w	lr, r1, r3
 800081a:	ea40 000e 	orr.w	r0, r0, lr
 800081e:	fa21 f102 	lsr.w	r1, r1, r2
 8000822:	4414      	add	r4, r2
 8000824:	e6bd      	b.n	80005a2 <__adddf3+0xe6>
 8000826:	bf00      	nop

08000828 <__aeabi_dmul>:
 8000828:	b570      	push	{r4, r5, r6, lr}
 800082a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800082e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000832:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000836:	bf1d      	ittte	ne
 8000838:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800083c:	ea94 0f0c 	teqne	r4, ip
 8000840:	ea95 0f0c 	teqne	r5, ip
 8000844:	f000 f8de 	bleq	8000a04 <__aeabi_dmul+0x1dc>
 8000848:	442c      	add	r4, r5
 800084a:	ea81 0603 	eor.w	r6, r1, r3
 800084e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000852:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000856:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800085a:	bf18      	it	ne
 800085c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000860:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000864:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000868:	d038      	beq.n	80008dc <__aeabi_dmul+0xb4>
 800086a:	fba0 ce02 	umull	ip, lr, r0, r2
 800086e:	f04f 0500 	mov.w	r5, #0
 8000872:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000876:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800087a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800087e:	f04f 0600 	mov.w	r6, #0
 8000882:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000886:	f09c 0f00 	teq	ip, #0
 800088a:	bf18      	it	ne
 800088c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000890:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000894:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000898:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800089c:	d204      	bcs.n	80008a8 <__aeabi_dmul+0x80>
 800089e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80008a2:	416d      	adcs	r5, r5
 80008a4:	eb46 0606 	adc.w	r6, r6, r6
 80008a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80008ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80008b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80008b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80008b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80008bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c0:	bf88      	it	hi
 80008c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008c6:	d81e      	bhi.n	8000906 <__aeabi_dmul+0xde>
 80008c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80008cc:	bf08      	it	eq
 80008ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80008d2:	f150 0000 	adcs.w	r0, r0, #0
 80008d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008da:	bd70      	pop	{r4, r5, r6, pc}
 80008dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80008e0:	ea46 0101 	orr.w	r1, r6, r1
 80008e4:	ea40 0002 	orr.w	r0, r0, r2
 80008e8:	ea81 0103 	eor.w	r1, r1, r3
 80008ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80008f0:	bfc2      	ittt	gt
 80008f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fa:	bd70      	popgt	{r4, r5, r6, pc}
 80008fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000900:	f04f 0e00 	mov.w	lr, #0
 8000904:	3c01      	subs	r4, #1
 8000906:	f300 80ab 	bgt.w	8000a60 <__aeabi_dmul+0x238>
 800090a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800090e:	bfde      	ittt	le
 8000910:	2000      	movle	r0, #0
 8000912:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000916:	bd70      	pople	{r4, r5, r6, pc}
 8000918:	f1c4 0400 	rsb	r4, r4, #0
 800091c:	3c20      	subs	r4, #32
 800091e:	da35      	bge.n	800098c <__aeabi_dmul+0x164>
 8000920:	340c      	adds	r4, #12
 8000922:	dc1b      	bgt.n	800095c <__aeabi_dmul+0x134>
 8000924:	f104 0414 	add.w	r4, r4, #20
 8000928:	f1c4 0520 	rsb	r5, r4, #32
 800092c:	fa00 f305 	lsl.w	r3, r0, r5
 8000930:	fa20 f004 	lsr.w	r0, r0, r4
 8000934:	fa01 f205 	lsl.w	r2, r1, r5
 8000938:	ea40 0002 	orr.w	r0, r0, r2
 800093c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000940:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000944:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000948:	fa21 f604 	lsr.w	r6, r1, r4
 800094c:	eb42 0106 	adc.w	r1, r2, r6
 8000950:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000954:	bf08      	it	eq
 8000956:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800095a:	bd70      	pop	{r4, r5, r6, pc}
 800095c:	f1c4 040c 	rsb	r4, r4, #12
 8000960:	f1c4 0520 	rsb	r5, r4, #32
 8000964:	fa00 f304 	lsl.w	r3, r0, r4
 8000968:	fa20 f005 	lsr.w	r0, r0, r5
 800096c:	fa01 f204 	lsl.w	r2, r1, r4
 8000970:	ea40 0002 	orr.w	r0, r0, r2
 8000974:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000978:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800097c:	f141 0100 	adc.w	r1, r1, #0
 8000980:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000984:	bf08      	it	eq
 8000986:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800098a:	bd70      	pop	{r4, r5, r6, pc}
 800098c:	f1c4 0520 	rsb	r5, r4, #32
 8000990:	fa00 f205 	lsl.w	r2, r0, r5
 8000994:	ea4e 0e02 	orr.w	lr, lr, r2
 8000998:	fa20 f304 	lsr.w	r3, r0, r4
 800099c:	fa01 f205 	lsl.w	r2, r1, r5
 80009a0:	ea43 0302 	orr.w	r3, r3, r2
 80009a4:	fa21 f004 	lsr.w	r0, r1, r4
 80009a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80009ac:	fa21 f204 	lsr.w	r2, r1, r4
 80009b0:	ea20 0002 	bic.w	r0, r0, r2
 80009b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80009b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80009bc:	bf08      	it	eq
 80009be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80009c2:	bd70      	pop	{r4, r5, r6, pc}
 80009c4:	f094 0f00 	teq	r4, #0
 80009c8:	d10f      	bne.n	80009ea <__aeabi_dmul+0x1c2>
 80009ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80009ce:	0040      	lsls	r0, r0, #1
 80009d0:	eb41 0101 	adc.w	r1, r1, r1
 80009d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009d8:	bf08      	it	eq
 80009da:	3c01      	subeq	r4, #1
 80009dc:	d0f7      	beq.n	80009ce <__aeabi_dmul+0x1a6>
 80009de:	ea41 0106 	orr.w	r1, r1, r6
 80009e2:	f095 0f00 	teq	r5, #0
 80009e6:	bf18      	it	ne
 80009e8:	4770      	bxne	lr
 80009ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80009ee:	0052      	lsls	r2, r2, #1
 80009f0:	eb43 0303 	adc.w	r3, r3, r3
 80009f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80009f8:	bf08      	it	eq
 80009fa:	3d01      	subeq	r5, #1
 80009fc:	d0f7      	beq.n	80009ee <__aeabi_dmul+0x1c6>
 80009fe:	ea43 0306 	orr.w	r3, r3, r6
 8000a02:	4770      	bx	lr
 8000a04:	ea94 0f0c 	teq	r4, ip
 8000a08:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0c:	bf18      	it	ne
 8000a0e:	ea95 0f0c 	teqne	r5, ip
 8000a12:	d00c      	beq.n	8000a2e <__aeabi_dmul+0x206>
 8000a14:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a18:	bf18      	it	ne
 8000a1a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a1e:	d1d1      	bne.n	80009c4 <__aeabi_dmul+0x19c>
 8000a20:	ea81 0103 	eor.w	r1, r1, r3
 8000a24:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000a28:	f04f 0000 	mov.w	r0, #0
 8000a2c:	bd70      	pop	{r4, r5, r6, pc}
 8000a2e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a32:	bf06      	itte	eq
 8000a34:	4610      	moveq	r0, r2
 8000a36:	4619      	moveq	r1, r3
 8000a38:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a3c:	d019      	beq.n	8000a72 <__aeabi_dmul+0x24a>
 8000a3e:	ea94 0f0c 	teq	r4, ip
 8000a42:	d102      	bne.n	8000a4a <__aeabi_dmul+0x222>
 8000a44:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000a48:	d113      	bne.n	8000a72 <__aeabi_dmul+0x24a>
 8000a4a:	ea95 0f0c 	teq	r5, ip
 8000a4e:	d105      	bne.n	8000a5c <__aeabi_dmul+0x234>
 8000a50:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000a54:	bf1c      	itt	ne
 8000a56:	4610      	movne	r0, r2
 8000a58:	4619      	movne	r1, r3
 8000a5a:	d10a      	bne.n	8000a72 <__aeabi_dmul+0x24a>
 8000a5c:	ea81 0103 	eor.w	r1, r1, r3
 8000a60:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000a64:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000a68:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000a6c:	f04f 0000 	mov.w	r0, #0
 8000a70:	bd70      	pop	{r4, r5, r6, pc}
 8000a72:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000a76:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000a7a:	bd70      	pop	{r4, r5, r6, pc}

08000a7c <__aeabi_ddiv>:
 8000a7c:	b570      	push	{r4, r5, r6, lr}
 8000a7e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000a82:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000a86:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000a8a:	bf1d      	ittte	ne
 8000a8c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000a90:	ea94 0f0c 	teqne	r4, ip
 8000a94:	ea95 0f0c 	teqne	r5, ip
 8000a98:	f000 f8a7 	bleq	8000bea <__aeabi_ddiv+0x16e>
 8000a9c:	eba4 0405 	sub.w	r4, r4, r5
 8000aa0:	ea81 0e03 	eor.w	lr, r1, r3
 8000aa4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000aa8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000aac:	f000 8088 	beq.w	8000bc0 <__aeabi_ddiv+0x144>
 8000ab0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000ab4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000ab8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000abc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000ac0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000ac4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000ac8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000acc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000ad0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000ad4:	429d      	cmp	r5, r3
 8000ad6:	bf08      	it	eq
 8000ad8:	4296      	cmpeq	r6, r2
 8000ada:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000ade:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000ae2:	d202      	bcs.n	8000aea <__aeabi_ddiv+0x6e>
 8000ae4:	085b      	lsrs	r3, r3, #1
 8000ae6:	ea4f 0232 	mov.w	r2, r2, rrx
 8000aea:	1ab6      	subs	r6, r6, r2
 8000aec:	eb65 0503 	sbc.w	r5, r5, r3
 8000af0:	085b      	lsrs	r3, r3, #1
 8000af2:	ea4f 0232 	mov.w	r2, r2, rrx
 8000af6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000afa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000afe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000b02:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000b06:	bf22      	ittt	cs
 8000b08:	1ab6      	subcs	r6, r6, r2
 8000b0a:	4675      	movcs	r5, lr
 8000b0c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000b10:	085b      	lsrs	r3, r3, #1
 8000b12:	ea4f 0232 	mov.w	r2, r2, rrx
 8000b16:	ebb6 0e02 	subs.w	lr, r6, r2
 8000b1a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000b1e:	bf22      	ittt	cs
 8000b20:	1ab6      	subcs	r6, r6, r2
 8000b22:	4675      	movcs	r5, lr
 8000b24:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000b28:	085b      	lsrs	r3, r3, #1
 8000b2a:	ea4f 0232 	mov.w	r2, r2, rrx
 8000b2e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000b32:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000b36:	bf22      	ittt	cs
 8000b38:	1ab6      	subcs	r6, r6, r2
 8000b3a:	4675      	movcs	r5, lr
 8000b3c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000b40:	085b      	lsrs	r3, r3, #1
 8000b42:	ea4f 0232 	mov.w	r2, r2, rrx
 8000b46:	ebb6 0e02 	subs.w	lr, r6, r2
 8000b4a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000b4e:	bf22      	ittt	cs
 8000b50:	1ab6      	subcs	r6, r6, r2
 8000b52:	4675      	movcs	r5, lr
 8000b54:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000b58:	ea55 0e06 	orrs.w	lr, r5, r6
 8000b5c:	d018      	beq.n	8000b90 <__aeabi_ddiv+0x114>
 8000b5e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000b62:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000b66:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000b6a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000b6e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000b72:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000b76:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000b7a:	d1c0      	bne.n	8000afe <__aeabi_ddiv+0x82>
 8000b7c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000b80:	d10b      	bne.n	8000b9a <__aeabi_ddiv+0x11e>
 8000b82:	ea41 0100 	orr.w	r1, r1, r0
 8000b86:	f04f 0000 	mov.w	r0, #0
 8000b8a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000b8e:	e7b6      	b.n	8000afe <__aeabi_ddiv+0x82>
 8000b90:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000b94:	bf04      	itt	eq
 8000b96:	4301      	orreq	r1, r0
 8000b98:	2000      	moveq	r0, #0
 8000b9a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000b9e:	bf88      	it	hi
 8000ba0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000ba4:	f63f aeaf 	bhi.w	8000906 <__aeabi_dmul+0xde>
 8000ba8:	ebb5 0c03 	subs.w	ip, r5, r3
 8000bac:	bf04      	itt	eq
 8000bae:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000bb2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000bb6:	f150 0000 	adcs.w	r0, r0, #0
 8000bba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000bbe:	bd70      	pop	{r4, r5, r6, pc}
 8000bc0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000bc4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000bc8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000bcc:	bfc2      	ittt	gt
 8000bce:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000bd2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000bd6:	bd70      	popgt	{r4, r5, r6, pc}
 8000bd8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bdc:	f04f 0e00 	mov.w	lr, #0
 8000be0:	3c01      	subs	r4, #1
 8000be2:	e690      	b.n	8000906 <__aeabi_dmul+0xde>
 8000be4:	ea45 0e06 	orr.w	lr, r5, r6
 8000be8:	e68d      	b.n	8000906 <__aeabi_dmul+0xde>
 8000bea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000bee:	ea94 0f0c 	teq	r4, ip
 8000bf2:	bf08      	it	eq
 8000bf4:	ea95 0f0c 	teqeq	r5, ip
 8000bf8:	f43f af3b 	beq.w	8000a72 <__aeabi_dmul+0x24a>
 8000bfc:	ea94 0f0c 	teq	r4, ip
 8000c00:	d10a      	bne.n	8000c18 <__aeabi_ddiv+0x19c>
 8000c02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000c06:	f47f af34 	bne.w	8000a72 <__aeabi_dmul+0x24a>
 8000c0a:	ea95 0f0c 	teq	r5, ip
 8000c0e:	f47f af25 	bne.w	8000a5c <__aeabi_dmul+0x234>
 8000c12:	4610      	mov	r0, r2
 8000c14:	4619      	mov	r1, r3
 8000c16:	e72c      	b.n	8000a72 <__aeabi_dmul+0x24a>
 8000c18:	ea95 0f0c 	teq	r5, ip
 8000c1c:	d106      	bne.n	8000c2c <__aeabi_ddiv+0x1b0>
 8000c1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000c22:	f43f aefd 	beq.w	8000a20 <__aeabi_dmul+0x1f8>
 8000c26:	4610      	mov	r0, r2
 8000c28:	4619      	mov	r1, r3
 8000c2a:	e722      	b.n	8000a72 <__aeabi_dmul+0x24a>
 8000c2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000c30:	bf18      	it	ne
 8000c32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000c36:	f47f aec5 	bne.w	80009c4 <__aeabi_dmul+0x19c>
 8000c3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000c3e:	f47f af0d 	bne.w	8000a5c <__aeabi_dmul+0x234>
 8000c42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000c46:	f47f aeeb 	bne.w	8000a20 <__aeabi_dmul+0x1f8>
 8000c4a:	e712      	b.n	8000a72 <__aeabi_dmul+0x24a>

08000c4c <__aeabi_d2f>:
 8000c4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c50:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c54:	bf24      	itt	cs
 8000c56:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c5a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c5e:	d90d      	bls.n	8000c7c <__aeabi_d2f+0x30>
 8000c60:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c64:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c68:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c6c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c70:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c74:	bf08      	it	eq
 8000c76:	f020 0001 	biceq.w	r0, r0, #1
 8000c7a:	4770      	bx	lr
 8000c7c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c80:	d121      	bne.n	8000cc6 <__aeabi_d2f+0x7a>
 8000c82:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c86:	bfbc      	itt	lt
 8000c88:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	4770      	bxlt	lr
 8000c8e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c92:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c96:	f1c2 0218 	rsb	r2, r2, #24
 8000c9a:	f1c2 0c20 	rsb	ip, r2, #32
 8000c9e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ca2:	fa20 f002 	lsr.w	r0, r0, r2
 8000ca6:	bf18      	it	ne
 8000ca8:	f040 0001 	orrne.w	r0, r0, #1
 8000cac:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000cb0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000cb4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000cb8:	ea40 000c 	orr.w	r0, r0, ip
 8000cbc:	fa23 f302 	lsr.w	r3, r3, r2
 8000cc0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cc4:	e7cc      	b.n	8000c60 <__aeabi_d2f+0x14>
 8000cc6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cca:	d107      	bne.n	8000cdc <__aeabi_d2f+0x90>
 8000ccc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cd0:	bf1e      	ittt	ne
 8000cd2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cd6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cda:	4770      	bxne	lr
 8000cdc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ce0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ce4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ce8:	4770      	bx	lr
 8000cea:	bf00      	nop

08000cec <tx_application_define>:
  * @brief  Define the initial system.
  * @param  first_unused_memory : Pointer to the first unused memory
  * @retval None
  */
VOID tx_application_define(VOID *first_unused_memory)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b086      	sub	sp, #24
 8000cf0:	af02      	add	r7, sp, #8
 8000cf2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN  tx_application_define_1*/

  /* USER CODE END  tx_application_define_1 */
#if (USE_STATIC_ALLOCATION == 1)
  UINT status = TX_SUCCESS;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	60fb      	str	r3, [r7, #12]
  VOID *memory_ptr;

  if (tx_byte_pool_create(&tx_app_byte_pool, "Tx App memory pool", tx_byte_pool_buffer, TX_APP_MEM_POOL_SIZE) != TX_SUCCESS)
 8000cf8:	2334      	movs	r3, #52	; 0x34
 8000cfa:	9300      	str	r3, [sp, #0]
 8000cfc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d00:	4a0a      	ldr	r2, [pc, #40]	; (8000d2c <tx_application_define+0x40>)
 8000d02:	490b      	ldr	r1, [pc, #44]	; (8000d30 <tx_application_define+0x44>)
 8000d04:	480b      	ldr	r0, [pc, #44]	; (8000d34 <tx_application_define+0x48>)
 8000d06:	f00d fa7f 	bl	800e208 <_txe_byte_pool_create>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d109      	bne.n	8000d24 <tx_application_define+0x38>
  {
    /* USER CODE BEGIN TX_Byte_Pool_Success */

    /* USER CODE END TX_Byte_Pool_Success */

    memory_ptr = (VOID *)&tx_app_byte_pool;
 8000d10:	4b08      	ldr	r3, [pc, #32]	; (8000d34 <tx_application_define+0x48>)
 8000d12:	60bb      	str	r3, [r7, #8]
    status = App_ThreadX_Init(memory_ptr);
 8000d14:	68b8      	ldr	r0, [r7, #8]
 8000d16:	f002 ffff 	bl	8003d18 <App_ThreadX_Init>
 8000d1a:	60f8      	str	r0, [r7, #12]
    if (status != TX_SUCCESS)
 8000d1c:	68fb      	ldr	r3, [r7, #12]
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d000      	beq.n	8000d24 <tx_application_define+0x38>
    {
      /* USER CODE BEGIN  App_ThreadX_Init_Error */
      while(1)
 8000d22:	e7fe      	b.n	8000d22 <tx_application_define+0x36>
  /* USER CODE BEGIN DYNAMIC_MEM_ALLOC */
  (void)first_unused_memory;
  /* USER CODE END DYNAMIC_MEM_ALLOC */
#endif

}
 8000d24:	bf00      	nop
 8000d26:	3710      	adds	r7, #16
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	bd80      	pop	{r7, pc}
 8000d2c:	20000030 	.word	0x20000030
 8000d30:	0800e794 	.word	0x0800e794
 8000d34:	20000430 	.word	0x20000430

08000d38 <BSP_I2C1_Init>:
#define i2c_initialized (1)
#define i2c_uninitialized (0)


void BSP_I2C1_Init(void)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	af00      	add	r7, sp, #0
	if(hi2c1.State == HAL_I2C_STATE_RESET)
 8000d3c:	4b04      	ldr	r3, [pc, #16]	; (8000d50 <BSP_I2C1_Init+0x18>)
 8000d3e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000d42:	b2db      	uxtb	r3, r3
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d101      	bne.n	8000d4c <BSP_I2C1_Init+0x14>
	{
        I2C1_Init();
 8000d48:	f003 ff94 	bl	8004c74 <I2C1_Init>
	}
}
 8000d4c:	bf00      	nop
 8000d4e:	bd80      	pop	{r7, pc}
 8000d50:	200014b8 	.word	0x200014b8

08000d54 <BSP_I2C1_DeInit>:

void BSP_I2C1_DeInit(void)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	af00      	add	r7, sp, #0
	HAL_I2C_DeInit(&hi2c1);
 8000d58:	4802      	ldr	r0, [pc, #8]	; (8000d64 <BSP_I2C1_DeInit+0x10>)
 8000d5a:	f006 ffdc 	bl	8007d16 <HAL_I2C_DeInit>
}
 8000d5e:	bf00      	nop
 8000d60:	bd80      	pop	{r7, pc}
 8000d62:	bf00      	nop
 8000d64:	200014b8 	.word	0x200014b8

08000d68 <BSP_I2C2_Init>:

void BSP_I2C2_Init(void)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	af00      	add	r7, sp, #0
	if(hi2c2.State == HAL_I2C_STATE_RESET)
 8000d6c:	4b04      	ldr	r3, [pc, #16]	; (8000d80 <BSP_I2C2_Init+0x18>)
 8000d6e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000d72:	b2db      	uxtb	r3, r3
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d101      	bne.n	8000d7c <BSP_I2C2_Init+0x14>
	{
        I2C2_Init();
 8000d78:	f003 ffbc 	bl	8004cf4 <I2C2_Init>
	}
}
 8000d7c:	bf00      	nop
 8000d7e:	bd80      	pop	{r7, pc}
 8000d80:	20001504 	.word	0x20001504

08000d84 <BSP_I2C2_DeInit>:

void BSP_I2C2_DeInit(void)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	af00      	add	r7, sp, #0
	HAL_I2C_DeInit(&hi2c2);
 8000d88:	4802      	ldr	r0, [pc, #8]	; (8000d94 <BSP_I2C2_DeInit+0x10>)
 8000d8a:	f006 ffc4 	bl	8007d16 <HAL_I2C_DeInit>
}
 8000d8e:	bf00      	nop
 8000d90:	bd80      	pop	{r7, pc}
 8000d92:	bf00      	nop
 8000d94:	20001504 	.word	0x20001504

08000d98 <BSP_I2C1_WriteReg16>:
int32_t BSP_I2C1_ReadReg(uint16_t Address, uint16_t Reg, uint8_t *pData, uint16_t Length){
    int32_t ret = HAL_I2C_Mem_Read(&hi2c1, Address, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length, 1000);
    return ret;
}

int32_t BSP_I2C1_WriteReg16(uint16_t Address, uint16_t Reg, uint8_t *pData, uint16_t Length){
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b08a      	sub	sp, #40	; 0x28
 8000d9c:	af04      	add	r7, sp, #16
 8000d9e:	60ba      	str	r2, [r7, #8]
 8000da0:	461a      	mov	r2, r3
 8000da2:	4603      	mov	r3, r0
 8000da4:	81fb      	strh	r3, [r7, #14]
 8000da6:	460b      	mov	r3, r1
 8000da8:	81bb      	strh	r3, [r7, #12]
 8000daa:	4613      	mov	r3, r2
 8000dac:	80fb      	strh	r3, [r7, #6]
    int32_t ret = HAL_I2C_Mem_Write(&hi2c1, Address, Reg, I2C_MEMADD_SIZE_16BIT, pData, Length, 1000);
 8000dae:	89ba      	ldrh	r2, [r7, #12]
 8000db0:	89f9      	ldrh	r1, [r7, #14]
 8000db2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000db6:	9302      	str	r3, [sp, #8]
 8000db8:	88fb      	ldrh	r3, [r7, #6]
 8000dba:	9301      	str	r3, [sp, #4]
 8000dbc:	68bb      	ldr	r3, [r7, #8]
 8000dbe:	9300      	str	r3, [sp, #0]
 8000dc0:	2302      	movs	r3, #2
 8000dc2:	4805      	ldr	r0, [pc, #20]	; (8000dd8 <BSP_I2C1_WriteReg16+0x40>)
 8000dc4:	f006 ffd6 	bl	8007d74 <HAL_I2C_Mem_Write>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	617b      	str	r3, [r7, #20]
    return ret;
 8000dcc:	697b      	ldr	r3, [r7, #20]
}
 8000dce:	4618      	mov	r0, r3
 8000dd0:	3718      	adds	r7, #24
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bd80      	pop	{r7, pc}
 8000dd6:	bf00      	nop
 8000dd8:	200014b8 	.word	0x200014b8

08000ddc <BSP_I2C1_ReadReg16>:

int32_t BSP_I2C1_ReadReg16(uint16_t Address, uint16_t Reg, uint8_t *pData, uint16_t Length){
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b08a      	sub	sp, #40	; 0x28
 8000de0:	af04      	add	r7, sp, #16
 8000de2:	60ba      	str	r2, [r7, #8]
 8000de4:	461a      	mov	r2, r3
 8000de6:	4603      	mov	r3, r0
 8000de8:	81fb      	strh	r3, [r7, #14]
 8000dea:	460b      	mov	r3, r1
 8000dec:	81bb      	strh	r3, [r7, #12]
 8000dee:	4613      	mov	r3, r2
 8000df0:	80fb      	strh	r3, [r7, #6]
    int32_t ret = HAL_I2C_Mem_Read(&hi2c1, Address, Reg, I2C_MEMADD_SIZE_16BIT, pData, Length, 1000);
 8000df2:	89ba      	ldrh	r2, [r7, #12]
 8000df4:	89f9      	ldrh	r1, [r7, #14]
 8000df6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000dfa:	9302      	str	r3, [sp, #8]
 8000dfc:	88fb      	ldrh	r3, [r7, #6]
 8000dfe:	9301      	str	r3, [sp, #4]
 8000e00:	68bb      	ldr	r3, [r7, #8]
 8000e02:	9300      	str	r3, [sp, #0]
 8000e04:	2302      	movs	r3, #2
 8000e06:	4805      	ldr	r0, [pc, #20]	; (8000e1c <BSP_I2C1_ReadReg16+0x40>)
 8000e08:	f007 f8c8 	bl	8007f9c <HAL_I2C_Mem_Read>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	617b      	str	r3, [r7, #20]
    return ret;
 8000e10:	697b      	ldr	r3, [r7, #20]
}
 8000e12:	4618      	mov	r0, r3
 8000e14:	3718      	adds	r7, #24
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}
 8000e1a:	bf00      	nop
 8000e1c:	200014b8 	.word	0x200014b8

08000e20 <BSP_I2C2_WriteRegHTS221>:

int32_t BSP_I2C2_WriteRegHTS221(uint8_t Reg, uint8_t *pData, uint8_t Length){
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b088      	sub	sp, #32
 8000e24:	af04      	add	r7, sp, #16
 8000e26:	4603      	mov	r3, r0
 8000e28:	6039      	str	r1, [r7, #0]
 8000e2a:	71fb      	strb	r3, [r7, #7]
 8000e2c:	4613      	mov	r3, r2
 8000e2e:	71bb      	strb	r3, [r7, #6]
    int32_t ret = HAL_I2C_Mem_Write(&hi2c2, HTS221_I2C_ADDR, Reg | 0x80, I2C_MEMADD_SIZE_8BIT, pData, Length, 100);
 8000e30:	79fb      	ldrb	r3, [r7, #7]
 8000e32:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000e36:	b2db      	uxtb	r3, r3
 8000e38:	b29a      	uxth	r2, r3
 8000e3a:	79bb      	ldrb	r3, [r7, #6]
 8000e3c:	b29b      	uxth	r3, r3
 8000e3e:	2164      	movs	r1, #100	; 0x64
 8000e40:	9102      	str	r1, [sp, #8]
 8000e42:	9301      	str	r3, [sp, #4]
 8000e44:	683b      	ldr	r3, [r7, #0]
 8000e46:	9300      	str	r3, [sp, #0]
 8000e48:	2301      	movs	r3, #1
 8000e4a:	21be      	movs	r1, #190	; 0xbe
 8000e4c:	4804      	ldr	r0, [pc, #16]	; (8000e60 <BSP_I2C2_WriteRegHTS221+0x40>)
 8000e4e:	f006 ff91 	bl	8007d74 <HAL_I2C_Mem_Write>
 8000e52:	4603      	mov	r3, r0
 8000e54:	60fb      	str	r3, [r7, #12]
    return ret;
 8000e56:	68fb      	ldr	r3, [r7, #12]
}
 8000e58:	4618      	mov	r0, r3
 8000e5a:	3710      	adds	r7, #16
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	bd80      	pop	{r7, pc}
 8000e60:	20001504 	.word	0x20001504

08000e64 <BSP_I2C2_ReadRegHTS221>:

int32_t BSP_I2C2_ReadRegHTS221(uint8_t Reg, uint8_t *pData, uint8_t Length){
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b088      	sub	sp, #32
 8000e68:	af04      	add	r7, sp, #16
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	6039      	str	r1, [r7, #0]
 8000e6e:	71fb      	strb	r3, [r7, #7]
 8000e70:	4613      	mov	r3, r2
 8000e72:	71bb      	strb	r3, [r7, #6]
    int32_t ret = HAL_I2C_Mem_Read(&hi2c2, HTS221_I2C_ADDR, Reg | 0x80, I2C_MEMADD_SIZE_8BIT, pData, Length, 100);
 8000e74:	79fb      	ldrb	r3, [r7, #7]
 8000e76:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000e7a:	b2db      	uxtb	r3, r3
 8000e7c:	b29a      	uxth	r2, r3
 8000e7e:	79bb      	ldrb	r3, [r7, #6]
 8000e80:	b29b      	uxth	r3, r3
 8000e82:	2164      	movs	r1, #100	; 0x64
 8000e84:	9102      	str	r1, [sp, #8]
 8000e86:	9301      	str	r3, [sp, #4]
 8000e88:	683b      	ldr	r3, [r7, #0]
 8000e8a:	9300      	str	r3, [sp, #0]
 8000e8c:	2301      	movs	r3, #1
 8000e8e:	21be      	movs	r1, #190	; 0xbe
 8000e90:	4804      	ldr	r0, [pc, #16]	; (8000ea4 <BSP_I2C2_ReadRegHTS221+0x40>)
 8000e92:	f007 f883 	bl	8007f9c <HAL_I2C_Mem_Read>
 8000e96:	4603      	mov	r3, r0
 8000e98:	60fb      	str	r3, [r7, #12]
    return ret;
 8000e9a:	68fb      	ldr	r3, [r7, #12]
}
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	3710      	adds	r7, #16
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	bd80      	pop	{r7, pc}
 8000ea4:	20001504 	.word	0x20001504

08000ea8 <BSP_I2C2_ReadRegISM330DHCX>:

int32_t BSP_I2C2_ReadRegISM330DHCX(uint8_t Reg, uint8_t *pData, uint8_t Length)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b088      	sub	sp, #32
 8000eac:	af04      	add	r7, sp, #16
 8000eae:	4603      	mov	r3, r0
 8000eb0:	6039      	str	r1, [r7, #0]
 8000eb2:	71fb      	strb	r3, [r7, #7]
 8000eb4:	4613      	mov	r3, r2
 8000eb6:	71bb      	strb	r3, [r7, #6]
	int32_t ret = HAL_I2C_Mem_Read(&hi2c2, ISM330DHCX_I2C_ADDR, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length, 100);
 8000eb8:	79fb      	ldrb	r3, [r7, #7]
 8000eba:	b29a      	uxth	r2, r3
 8000ebc:	79bb      	ldrb	r3, [r7, #6]
 8000ebe:	b29b      	uxth	r3, r3
 8000ec0:	2164      	movs	r1, #100	; 0x64
 8000ec2:	9102      	str	r1, [sp, #8]
 8000ec4:	9301      	str	r3, [sp, #4]
 8000ec6:	683b      	ldr	r3, [r7, #0]
 8000ec8:	9300      	str	r3, [sp, #0]
 8000eca:	2301      	movs	r3, #1
 8000ecc:	21d6      	movs	r1, #214	; 0xd6
 8000ece:	4805      	ldr	r0, [pc, #20]	; (8000ee4 <BSP_I2C2_ReadRegISM330DHCX+0x3c>)
 8000ed0:	f007 f864 	bl	8007f9c <HAL_I2C_Mem_Read>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	60fb      	str	r3, [r7, #12]
    return ret;
 8000ed8:	68fb      	ldr	r3, [r7, #12]
}
 8000eda:	4618      	mov	r0, r3
 8000edc:	3710      	adds	r7, #16
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bd80      	pop	{r7, pc}
 8000ee2:	bf00      	nop
 8000ee4:	20001504 	.word	0x20001504

08000ee8 <BSP_I2C2_WriteRegISM330DHCX>:

int32_t BSP_I2C2_WriteRegISM330DHCX(uint8_t Reg, uint8_t *pData, uint8_t Length)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b088      	sub	sp, #32
 8000eec:	af04      	add	r7, sp, #16
 8000eee:	4603      	mov	r3, r0
 8000ef0:	6039      	str	r1, [r7, #0]
 8000ef2:	71fb      	strb	r3, [r7, #7]
 8000ef4:	4613      	mov	r3, r2
 8000ef6:	71bb      	strb	r3, [r7, #6]
	int32_t ret = HAL_I2C_Mem_Write(&hi2c2, ISM330DHCX_I2C_ADDR, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length, 100);
 8000ef8:	79fb      	ldrb	r3, [r7, #7]
 8000efa:	b29a      	uxth	r2, r3
 8000efc:	79bb      	ldrb	r3, [r7, #6]
 8000efe:	b29b      	uxth	r3, r3
 8000f00:	2164      	movs	r1, #100	; 0x64
 8000f02:	9102      	str	r1, [sp, #8]
 8000f04:	9301      	str	r3, [sp, #4]
 8000f06:	683b      	ldr	r3, [r7, #0]
 8000f08:	9300      	str	r3, [sp, #0]
 8000f0a:	2301      	movs	r3, #1
 8000f0c:	21d6      	movs	r1, #214	; 0xd6
 8000f0e:	4805      	ldr	r0, [pc, #20]	; (8000f24 <BSP_I2C2_WriteRegISM330DHCX+0x3c>)
 8000f10:	f006 ff30 	bl	8007d74 <HAL_I2C_Mem_Write>
 8000f14:	4603      	mov	r3, r0
 8000f16:	60fb      	str	r3, [r7, #12]
    return ret;
 8000f18:	68fb      	ldr	r3, [r7, #12]
}
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	3710      	adds	r7, #16
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bd80      	pop	{r7, pc}
 8000f22:	bf00      	nop
 8000f24:	20001504 	.word	0x20001504

08000f28 <BSP_ReadPinISM330DHCX>:

int32_t BSP_ReadPinISM330DHCX(void)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	af00      	add	r7, sp, #0
    return HAL_GPIO_ReadPin(Mems_ISM330DLC_INT1_GPIO_Port, Mems_ISM330DLC_INT1_Pin);
 8000f2c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000f30:	4802      	ldr	r0, [pc, #8]	; (8000f3c <BSP_ReadPinISM330DHCX+0x14>)
 8000f32:	f006 fe17 	bl	8007b64 <HAL_GPIO_ReadPin>
 8000f36:	4603      	mov	r3, r0
}
 8000f38:	4618      	mov	r0, r3
 8000f3a:	bd80      	pop	{r7, pc}
 8000f3c:	42021000 	.word	0x42021000

08000f40 <BSP_ISM330DHCX_IO_Init>:

void BSP_ISM330DHCX_IO_Init(void)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	af00      	add	r7, sp, #0
    MotionSensor_GPIO_Init();
 8000f44:	f003 fd30 	bl	80049a8 <MotionSensor_GPIO_Init>
	BSP_I2C2_Init();
 8000f48:	f7ff ff0e 	bl	8000d68 <BSP_I2C2_Init>
}
 8000f4c:	bf00      	nop
 8000f4e:	bd80      	pop	{r7, pc}

08000f50 <BSP_LPS22HH_IO_Init>:

void BSP_LPS22HH_IO_Init(void)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	af00      	add	r7, sp, #0
	PressureSensor_GPIO_Init();
 8000f54:	f003 fd48 	bl	80049e8 <PressureSensor_GPIO_Init>
	BSP_I2C2_Init();
 8000f58:	f7ff ff06 	bl	8000d68 <BSP_I2C2_Init>
}
 8000f5c:	bf00      	nop
 8000f5e:	bd80      	pop	{r7, pc}

08000f60 <BSP_I2C2_ReadRegLPS22HH>:

int32_t BSP_I2C2_ReadRegLPS22HH(uint8_t Reg, uint8_t *pData, uint8_t Length)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b088      	sub	sp, #32
 8000f64:	af04      	add	r7, sp, #16
 8000f66:	4603      	mov	r3, r0
 8000f68:	6039      	str	r1, [r7, #0]
 8000f6a:	71fb      	strb	r3, [r7, #7]
 8000f6c:	4613      	mov	r3, r2
 8000f6e:	71bb      	strb	r3, [r7, #6]
	int32_t ret = HAL_I2C_Mem_Read(&hi2c2, LPS22HH_I2C_ADDR, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length, 100);
 8000f70:	79fb      	ldrb	r3, [r7, #7]
 8000f72:	b29a      	uxth	r2, r3
 8000f74:	79bb      	ldrb	r3, [r7, #6]
 8000f76:	b29b      	uxth	r3, r3
 8000f78:	2164      	movs	r1, #100	; 0x64
 8000f7a:	9102      	str	r1, [sp, #8]
 8000f7c:	9301      	str	r3, [sp, #4]
 8000f7e:	683b      	ldr	r3, [r7, #0]
 8000f80:	9300      	str	r3, [sp, #0]
 8000f82:	2301      	movs	r3, #1
 8000f84:	21ba      	movs	r1, #186	; 0xba
 8000f86:	4805      	ldr	r0, [pc, #20]	; (8000f9c <BSP_I2C2_ReadRegLPS22HH+0x3c>)
 8000f88:	f007 f808 	bl	8007f9c <HAL_I2C_Mem_Read>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	60fb      	str	r3, [r7, #12]
    return ret;
 8000f90:	68fb      	ldr	r3, [r7, #12]
}
 8000f92:	4618      	mov	r0, r3
 8000f94:	3710      	adds	r7, #16
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bd80      	pop	{r7, pc}
 8000f9a:	bf00      	nop
 8000f9c:	20001504 	.word	0x20001504

08000fa0 <BSP_I2C2_WriteRegLPS22HH>:

int32_t BSP_I2C2_WriteRegLPS22HH(uint8_t Reg, uint8_t *pData, uint8_t Length)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b088      	sub	sp, #32
 8000fa4:	af04      	add	r7, sp, #16
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	6039      	str	r1, [r7, #0]
 8000faa:	71fb      	strb	r3, [r7, #7]
 8000fac:	4613      	mov	r3, r2
 8000fae:	71bb      	strb	r3, [r7, #6]
	int32_t ret = HAL_I2C_Mem_Write(&hi2c2, LPS22HH_I2C_ADDR, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length, 100);
 8000fb0:	79fb      	ldrb	r3, [r7, #7]
 8000fb2:	b29a      	uxth	r2, r3
 8000fb4:	79bb      	ldrb	r3, [r7, #6]
 8000fb6:	b29b      	uxth	r3, r3
 8000fb8:	2164      	movs	r1, #100	; 0x64
 8000fba:	9102      	str	r1, [sp, #8]
 8000fbc:	9301      	str	r3, [sp, #4]
 8000fbe:	683b      	ldr	r3, [r7, #0]
 8000fc0:	9300      	str	r3, [sp, #0]
 8000fc2:	2301      	movs	r3, #1
 8000fc4:	21ba      	movs	r1, #186	; 0xba
 8000fc6:	4813      	ldr	r0, [pc, #76]	; (8001014 <BSP_I2C2_WriteRegLPS22HH+0x74>)
 8000fc8:	f006 fed4 	bl	8007d74 <HAL_I2C_Mem_Write>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	60fb      	str	r3, [r7, #12]
	if(ret != HAL_OK && hi2c2.ErrorCode == HAL_I2C_ERROR_AF)
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d013      	beq.n	8000ffe <BSP_I2C2_WriteRegLPS22HH+0x5e>
 8000fd6:	4b0f      	ldr	r3, [pc, #60]	; (8001014 <BSP_I2C2_WriteRegLPS22HH+0x74>)
 8000fd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fda:	2b04      	cmp	r3, #4
 8000fdc:	d10f      	bne.n	8000ffe <BSP_I2C2_WriteRegLPS22HH+0x5e>
	{
		ret = HAL_I2C_Mem_Write(&hi2c2, LPS22HH_I2C_ADDR, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length, 100); //Retry
 8000fde:	79fb      	ldrb	r3, [r7, #7]
 8000fe0:	b29a      	uxth	r2, r3
 8000fe2:	79bb      	ldrb	r3, [r7, #6]
 8000fe4:	b29b      	uxth	r3, r3
 8000fe6:	2164      	movs	r1, #100	; 0x64
 8000fe8:	9102      	str	r1, [sp, #8]
 8000fea:	9301      	str	r3, [sp, #4]
 8000fec:	683b      	ldr	r3, [r7, #0]
 8000fee:	9300      	str	r3, [sp, #0]
 8000ff0:	2301      	movs	r3, #1
 8000ff2:	21ba      	movs	r1, #186	; 0xba
 8000ff4:	4807      	ldr	r0, [pc, #28]	; (8001014 <BSP_I2C2_WriteRegLPS22HH+0x74>)
 8000ff6:	f006 febd 	bl	8007d74 <HAL_I2C_Mem_Write>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	60fb      	str	r3, [r7, #12]
	}

	if(ret != HAL_OK)
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	2b00      	cmp	r3, #0
 8001002:	d002      	beq.n	800100a <BSP_I2C2_WriteRegLPS22HH+0x6a>
	{
		return hi2c2.ErrorCode;
 8001004:	4b03      	ldr	r3, [pc, #12]	; (8001014 <BSP_I2C2_WriteRegLPS22HH+0x74>)
 8001006:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001008:	e000      	b.n	800100c <BSP_I2C2_WriteRegLPS22HH+0x6c>
	}
    return ret;
 800100a:	68fb      	ldr	r3, [r7, #12]
}
 800100c:	4618      	mov	r0, r3
 800100e:	3710      	adds	r7, #16
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}
 8001014:	20001504 	.word	0x20001504

08001018 <BSP_ReadPinLPS22HH>:

int32_t BSP_ReadPinLPS22HH(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	af00      	add	r7, sp, #0
	return HAL_GPIO_ReadPin(Mems_INT_LPS22HH_GPIO_Port, Mems_INT_LPS22HH_Pin);
 800101c:	2104      	movs	r1, #4
 800101e:	4803      	ldr	r0, [pc, #12]	; (800102c <BSP_ReadPinLPS22HH+0x14>)
 8001020:	f006 fda0 	bl	8007b64 <HAL_GPIO_ReadPin>
 8001024:	4603      	mov	r3, r0
}
 8001026:	4618      	mov	r0, r3
 8001028:	bd80      	pop	{r7, pc}
 800102a:	bf00      	nop
 800102c:	42021800 	.word	0x42021800

08001030 <BSP_IIS2MDC_IO_Init>:

void BSP_IIS2MDC_IO_Init(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	af00      	add	r7, sp, #0
	MagSensor_GPIO_Init();
 8001034:	f003 fcf8 	bl	8004a28 <MagSensor_GPIO_Init>
	BSP_I2C2_Init();
 8001038:	f7ff fe96 	bl	8000d68 <BSP_I2C2_Init>
}
 800103c:	bf00      	nop
 800103e:	bd80      	pop	{r7, pc}

08001040 <BSP_I2C2_ReadRegIIS2MDC>:

int32_t BSP_I2C2_ReadRegIIS2MDC(uint8_t Reg, uint8_t *pData, uint8_t Length)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b088      	sub	sp, #32
 8001044:	af04      	add	r7, sp, #16
 8001046:	4603      	mov	r3, r0
 8001048:	6039      	str	r1, [r7, #0]
 800104a:	71fb      	strb	r3, [r7, #7]
 800104c:	4613      	mov	r3, r2
 800104e:	71bb      	strb	r3, [r7, #6]
	int32_t ret = HAL_I2C_Mem_Read(&hi2c2, IIS2MDC_I2C_ADDR, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length, 100);
 8001050:	79fb      	ldrb	r3, [r7, #7]
 8001052:	b29a      	uxth	r2, r3
 8001054:	79bb      	ldrb	r3, [r7, #6]
 8001056:	b29b      	uxth	r3, r3
 8001058:	2164      	movs	r1, #100	; 0x64
 800105a:	9102      	str	r1, [sp, #8]
 800105c:	9301      	str	r3, [sp, #4]
 800105e:	683b      	ldr	r3, [r7, #0]
 8001060:	9300      	str	r3, [sp, #0]
 8001062:	2301      	movs	r3, #1
 8001064:	213c      	movs	r1, #60	; 0x3c
 8001066:	4808      	ldr	r0, [pc, #32]	; (8001088 <BSP_I2C2_ReadRegIIS2MDC+0x48>)
 8001068:	f006 ff98 	bl	8007f9c <HAL_I2C_Mem_Read>
 800106c:	4603      	mov	r3, r0
 800106e:	60fb      	str	r3, [r7, #12]
	if(ret != HAL_OK)
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	2b00      	cmp	r3, #0
 8001074:	d002      	beq.n	800107c <BSP_I2C2_ReadRegIIS2MDC+0x3c>
	{
		return hi2c2.ErrorCode;
 8001076:	4b04      	ldr	r3, [pc, #16]	; (8001088 <BSP_I2C2_ReadRegIIS2MDC+0x48>)
 8001078:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800107a:	e000      	b.n	800107e <BSP_I2C2_ReadRegIIS2MDC+0x3e>
	}
    return ret;
 800107c:	68fb      	ldr	r3, [r7, #12]
}
 800107e:	4618      	mov	r0, r3
 8001080:	3710      	adds	r7, #16
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}
 8001086:	bf00      	nop
 8001088:	20001504 	.word	0x20001504

0800108c <BSP_I2C2_WriteRegIIS2MDC>:

int32_t BSP_I2C2_WriteRegIIS2MDC(uint8_t Reg, uint8_t *pData, uint8_t Length)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b088      	sub	sp, #32
 8001090:	af04      	add	r7, sp, #16
 8001092:	4603      	mov	r3, r0
 8001094:	6039      	str	r1, [r7, #0]
 8001096:	71fb      	strb	r3, [r7, #7]
 8001098:	4613      	mov	r3, r2
 800109a:	71bb      	strb	r3, [r7, #6]
	int32_t ret = HAL_I2C_Mem_Write(&hi2c2, IIS2MDC_I2C_ADDR, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length, 100);
 800109c:	79fb      	ldrb	r3, [r7, #7]
 800109e:	b29a      	uxth	r2, r3
 80010a0:	79bb      	ldrb	r3, [r7, #6]
 80010a2:	b29b      	uxth	r3, r3
 80010a4:	2164      	movs	r1, #100	; 0x64
 80010a6:	9102      	str	r1, [sp, #8]
 80010a8:	9301      	str	r3, [sp, #4]
 80010aa:	683b      	ldr	r3, [r7, #0]
 80010ac:	9300      	str	r3, [sp, #0]
 80010ae:	2301      	movs	r3, #1
 80010b0:	213c      	movs	r1, #60	; 0x3c
 80010b2:	4808      	ldr	r0, [pc, #32]	; (80010d4 <BSP_I2C2_WriteRegIIS2MDC+0x48>)
 80010b4:	f006 fe5e 	bl	8007d74 <HAL_I2C_Mem_Write>
 80010b8:	4603      	mov	r3, r0
 80010ba:	60fb      	str	r3, [r7, #12]
	if(ret != HAL_OK)
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d002      	beq.n	80010c8 <BSP_I2C2_WriteRegIIS2MDC+0x3c>
	{
		return hi2c2.ErrorCode;
 80010c2:	4b04      	ldr	r3, [pc, #16]	; (80010d4 <BSP_I2C2_WriteRegIIS2MDC+0x48>)
 80010c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010c6:	e000      	b.n	80010ca <BSP_I2C2_WriteRegIIS2MDC+0x3e>
	}
    return ret;
 80010c8:	68fb      	ldr	r3, [r7, #12]
}
 80010ca:	4618      	mov	r0, r3
 80010cc:	3710      	adds	r7, #16
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	bf00      	nop
 80010d4:	20001504 	.word	0x20001504

080010d8 <BSP_ReadPinIIS2MDC>:

int32_t BSP_ReadPinIIS2MDC(void)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	af00      	add	r7, sp, #0
	return HAL_GPIO_ReadPin(Mems_INT_IIS2MDC_GPIO_Port, Mems_INT_IIS2MDC_Pin);
 80010dc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80010e0:	4802      	ldr	r0, [pc, #8]	; (80010ec <BSP_ReadPinIIS2MDC+0x14>)
 80010e2:	f006 fd3f 	bl	8007b64 <HAL_GPIO_ReadPin>
 80010e6:	4603      	mov	r3, r0
}
 80010e8:	4618      	mov	r0, r3
 80010ea:	bd80      	pop	{r7, pc}
 80010ec:	42020c00 	.word	0x42020c00

080010f0 <BSP_GetTick>:

uint32_t BSP_GetTick(void)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	af00      	add	r7, sp, #0
    return HAL_GetTick();
 80010f4:	f004 fb76 	bl	80057e4 <HAL_GetTick>
 80010f8:	4603      	mov	r3, r0
}
 80010fa:	4618      	mov	r0, r3
 80010fc:	bd80      	pop	{r7, pc}

080010fe <BSP_CameraInit>:
#define CAMERA_PF_RGB888                1U

static void BSP_CameraHwReset(void);
static void BSP_CameraHWInit(void);

BSP_CameraStatus_t BSP_CameraInit(void){
 80010fe:	b580      	push	{r7, lr}
 8001100:	af00      	add	r7, sp, #0
	CAM_GPIO_Init();    //Reset Pin, Power Pin init
 8001102:	f003 fb0f 	bl	8004724 <CAM_GPIO_Init>
	//DCMI_GPIO_Init();   //DCMI GPIO Init
	DCMI_DMA_Init();    //DCMI DMA Init
 8001106:	f003 f811 	bl	800412c <DCMI_DMA_Init>
	MX_DCMI_Init();     //DCMI Init
 800110a:	f002 fee1 	bl	8003ed0 <MX_DCMI_Init>
	BSP_CameraHwReset();//Reset it
 800110e:	f000 f817 	bl	8001140 <BSP_CameraHwReset>
    BSP_CameraHWInit(); //Init OV5460 driver
 8001112:	f000 f839 	bl	8001188 <BSP_CameraHWInit>
	return CameraOK;
 8001116:	2300      	movs	r3, #0
}
 8001118:	4618      	mov	r0, r3
 800111a:	bd80      	pop	{r7, pc}

0800111c <BSP_CameraStart>:

void BSP_CameraStart(uint8_t* Buffer){
 800111c:	b580      	push	{r7, lr}
 800111e:	b082      	sub	sp, #8
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
	  HAL_DCMI_Start_DMA(&hdcmi, DCMI_MODE_CONTINUOUS, (uint32_t)Buffer, CAMERA_DATA_SIZE);
 8001124:	687a      	ldr	r2, [r7, #4]
 8001126:	4b04      	ldr	r3, [pc, #16]	; (8001138 <BSP_CameraStart+0x1c>)
 8001128:	2100      	movs	r1, #0
 800112a:	4804      	ldr	r0, [pc, #16]	; (800113c <BSP_CameraStart+0x20>)
 800112c:	f004 fd9a 	bl	8005c64 <HAL_DCMI_Start_DMA>
}
 8001130:	bf00      	nop
 8001132:	3708      	adds	r7, #8
 8001134:	46bd      	mov	sp, r7
 8001136:	bd80      	pop	{r7, pc}
 8001138:	00024540 	.word	0x00024540
 800113c:	20001390 	.word	0x20001390

08001140 <BSP_CameraHwReset>:
void BSP_CameraStop(void){
	  HAL_DCMI_Stop(&hdcmi);
}

static void BSP_CameraHwReset(void)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	af00      	add	r7, sp, #0
    /* Camera sensor RESET sequence */
    /* Assert the camera STANDBY and RSTI pins */

    HAL_GPIO_WritePin(CAM_XSDN_GPIO_Port, CAM_XSDN_Pin, GPIO_PIN_SET);
 8001144:	2201      	movs	r2, #1
 8001146:	2108      	movs	r1, #8
 8001148:	480e      	ldr	r0, [pc, #56]	; (8001184 <BSP_CameraHwReset+0x44>)
 800114a:	f006 fd23 	bl	8007b94 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(CAM_RSTI_GPIO_Port, CAM_RSTI_Pin, GPIO_PIN_RESET);
 800114e:	2200      	movs	r2, #0
 8001150:	2104      	movs	r1, #4
 8001152:	480c      	ldr	r0, [pc, #48]	; (8001184 <BSP_CameraHwReset+0x44>)
 8001154:	f006 fd1e 	bl	8007b94 <HAL_GPIO_WritePin>
    HAL_Delay(100);   /* RST and XSDN signals asserted during 100ms */
 8001158:	2064      	movs	r0, #100	; 0x64
 800115a:	f004 fb4f 	bl	80057fc <HAL_Delay>

    /* De-assert the camera STANDBY pin (active high) */
    HAL_GPIO_WritePin(CAM_XSDN_GPIO_Port, CAM_XSDN_Pin, GPIO_PIN_RESET);
 800115e:	2200      	movs	r2, #0
 8001160:	2108      	movs	r1, #8
 8001162:	4808      	ldr	r0, [pc, #32]	; (8001184 <BSP_CameraHwReset+0x44>)
 8001164:	f006 fd16 	bl	8007b94 <HAL_GPIO_WritePin>
    HAL_Delay(3);     /* RST de-asserted and XSDN de-asserted during 3ms */
 8001168:	2003      	movs	r0, #3
 800116a:	f004 fb47 	bl	80057fc <HAL_Delay>

    /* De-assert the camera RSTI pin (active low) */
    HAL_GPIO_WritePin(CAM_RSTI_GPIO_Port, CAM_RSTI_Pin, GPIO_PIN_SET);
 800116e:	2201      	movs	r2, #1
 8001170:	2104      	movs	r1, #4
 8001172:	4804      	ldr	r0, [pc, #16]	; (8001184 <BSP_CameraHwReset+0x44>)
 8001174:	f006 fd0e 	bl	8007b94 <HAL_GPIO_WritePin>
    HAL_Delay(20);     /* RST de-asserted during 20ms */
 8001178:	2014      	movs	r0, #20
 800117a:	f004 fb3f 	bl	80057fc <HAL_Delay>
}
 800117e:	bf00      	nop
 8001180:	bd80      	pop	{r7, pc}
 8001182:	bf00      	nop
 8001184:	42022000 	.word	0x42022000

08001188 <BSP_CameraHWInit>:

static void BSP_CameraHWInit(void){
 8001188:	b580      	push	{r7, lr}
 800118a:	b088      	sub	sp, #32
 800118c:	af00      	add	r7, sp, #0
	  uint32_t temp = 0;
 800118e:	2300      	movs	r3, #0
 8001190:	61fb      	str	r3, [r7, #28]
	  OV5640_IO_t              IO;
	  static OV5640_Handle_t   OV5640_Handle;
	  IO.Address = CAMERA_OV5640_ADDRESS;
 8001192:	2378      	movs	r3, #120	; 0x78
 8001194:	80bb      	strh	r3, [r7, #4]
	  IO.Init = BSP_I2C1_Init;
 8001196:	4b0f      	ldr	r3, [pc, #60]	; (80011d4 <BSP_CameraHWInit+0x4c>)
 8001198:	60bb      	str	r3, [r7, #8]
	  IO.DeInit = BSP_I2C1_DeInit;
 800119a:	4b0f      	ldr	r3, [pc, #60]	; (80011d8 <BSP_CameraHWInit+0x50>)
 800119c:	60fb      	str	r3, [r7, #12]
      IO.Read = BSP_I2C1_ReadReg16;
 800119e:	4b0f      	ldr	r3, [pc, #60]	; (80011dc <BSP_CameraHWInit+0x54>)
 80011a0:	617b      	str	r3, [r7, #20]
      IO.Write = BSP_I2C1_WriteReg16;
 80011a2:	4b0f      	ldr	r3, [pc, #60]	; (80011e0 <BSP_CameraHWInit+0x58>)
 80011a4:	613b      	str	r3, [r7, #16]
      IO.GetTick = BSP_GetTick;
 80011a6:	4b0f      	ldr	r3, [pc, #60]	; (80011e4 <BSP_CameraHWInit+0x5c>)
 80011a8:	61bb      	str	r3, [r7, #24]
      OV5640_LinkBus(&OV5640_Handle, &IO);
 80011aa:	1d3b      	adds	r3, r7, #4
 80011ac:	4619      	mov	r1, r3
 80011ae:	480e      	ldr	r0, [pc, #56]	; (80011e8 <BSP_CameraHWInit+0x60>)
 80011b0:	f002 f986 	bl	80034c0 <OV5640_LinkBus>
      OV5640_ReadID(&OV5640_Handle,&temp);
 80011b4:	f107 031c 	add.w	r3, r7, #28
 80011b8:	4619      	mov	r1, r3
 80011ba:	480b      	ldr	r0, [pc, #44]	; (80011e8 <BSP_CameraHWInit+0x60>)
 80011bc:	f002 fd5c 	bl	8003c78 <OV5640_ReadID>
      OV5640_Init(&OV5640_Handle, OV5640_R640x480, OV5640_RGB565);
 80011c0:	2200      	movs	r2, #0
 80011c2:	2103      	movs	r1, #3
 80011c4:	4808      	ldr	r0, [pc, #32]	; (80011e8 <BSP_CameraHWInit+0x60>)
 80011c6:	f002 f99f 	bl	8003508 <OV5640_Init>
}
 80011ca:	bf00      	nop
 80011cc:	3720      	adds	r7, #32
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	bf00      	nop
 80011d4:	08000d39 	.word	0x08000d39
 80011d8:	08000d55 	.word	0x08000d55
 80011dc:	08000ddd 	.word	0x08000ddd
 80011e0:	08000d99 	.word	0x08000d99
 80011e4:	080010f1 	.word	0x080010f1
 80011e8:	20000464 	.word	0x20000464

080011ec <BSP_TempHumSensorInit>:

static IIS2MDC_Handle_t Magnetometer = {0};


int32_t BSP_TempHumSensorInit(void)
{
 80011ec:	b5b0      	push	{r4, r5, r7, lr}
 80011ee:	b08a      	sub	sp, #40	; 0x28
 80011f0:	af00      	add	r7, sp, #0
	int32_t ret = 0;
 80011f2:	2300      	movs	r3, #0
 80011f4:	627b      	str	r3, [r7, #36]	; 0x24
	HTS221_IO_t TempSensor_IO = {.Init = BSP_I2C2_Init,
 80011f6:	4b0f      	ldr	r3, [pc, #60]	; (8001234 <BSP_TempHumSensorInit+0x48>)
 80011f8:	f107 040c 	add.w	r4, r7, #12
 80011fc:	461d      	mov	r5, r3
 80011fe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001200:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001202:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001206:	e884 0003 	stmia.w	r4, {r0, r1}
								 .Write = BSP_I2C2_WriteRegHTS221,
								 .GetTick = BSP_GetTick,
								 .ReadPin = NULL
	};

	HTS221_Init_Struct_t Settings = { .DataReadyConfig = HTS221_DataReadyDisable,
 800120a:	4a0b      	ldr	r2, [pc, #44]	; (8001238 <BSP_TempHumSensorInit+0x4c>)
 800120c:	1d3b      	adds	r3, r7, #4
 800120e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001212:	6018      	str	r0, [r3, #0]
 8001214:	3304      	adds	r3, #4
 8001216:	8019      	strh	r1, [r3, #0]
									  .HumidityResolution = HTS221_Hum64Samples,
									  .OutputDataRate = HTS221_1_0Hz,
									  .TemperatureResolution = HTS221_Temp32amples

	};
	ret = HTS221_Init(&TempSensor_Handle, Settings, &TempSensor_IO);
 8001218:	f107 030c 	add.w	r3, r7, #12
 800121c:	1d3a      	adds	r2, r7, #4
 800121e:	ca06      	ldmia	r2, {r1, r2}
 8001220:	4806      	ldr	r0, [pc, #24]	; (800123c <BSP_TempHumSensorInit+0x50>)
 8001222:	f000 f993 	bl	800154c <HTS221_Init>
 8001226:	6278      	str	r0, [r7, #36]	; 0x24
	return ret;
 8001228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800122a:	4618      	mov	r0, r3
 800122c:	3728      	adds	r7, #40	; 0x28
 800122e:	46bd      	mov	sp, r7
 8001230:	bdb0      	pop	{r4, r5, r7, pc}
 8001232:	bf00      	nop
 8001234:	0800e7a8 	.word	0x0800e7a8
 8001238:	0800e7c0 	.word	0x0800e7c0
 800123c:	20000488 	.word	0x20000488

08001240 <BSP_ReadTemperature>:

int32_t BSP_ReadTemperature(float *result)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b082      	sub	sp, #8
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
	return HTS221_ReadTemperature(&TempSensor_Handle, result);
 8001248:	6879      	ldr	r1, [r7, #4]
 800124a:	4804      	ldr	r0, [pc, #16]	; (800125c <BSP_ReadTemperature+0x1c>)
 800124c:	f000 f9dc 	bl	8001608 <HTS221_ReadTemperature>
 8001250:	4603      	mov	r3, r0
}
 8001252:	4618      	mov	r0, r3
 8001254:	3708      	adds	r7, #8
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	20000488 	.word	0x20000488

08001260 <BSP_ReadHumidity>:


int32_t BSP_ReadHumidity(float *result)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b082      	sub	sp, #8
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
	return HTS221_ReadHumidity(&TempSensor_Handle, result);
 8001268:	6879      	ldr	r1, [r7, #4]
 800126a:	4804      	ldr	r0, [pc, #16]	; (800127c <BSP_ReadHumidity+0x1c>)
 800126c:	f000 fa11 	bl	8001692 <HTS221_ReadHumidity>
 8001270:	4603      	mov	r3, r0
}
 8001272:	4618      	mov	r0, r3
 8001274:	3708      	adds	r7, #8
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	20000488 	.word	0x20000488

08001280 <BSP_PressureSensorInit>:
{
	return HTS221_DisableHeater(&TempSensor_Handle);
}

int32_t BSP_PressureSensorInit(void)
{
 8001280:	b5b0      	push	{r4, r5, r7, lr}
 8001282:	b090      	sub	sp, #64	; 0x40
 8001284:	af04      	add	r7, sp, #16
	LPS22HH_IO_t PressureSensor_IO =
 8001286:	4b13      	ldr	r3, [pc, #76]	; (80012d4 <BSP_PressureSensorInit+0x54>)
 8001288:	f107 0414 	add.w	r4, r7, #20
 800128c:	461d      	mov	r5, r3
 800128e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001290:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001292:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001296:	e884 0003 	stmia.w	r4, {r0, r1}
			.Write = BSP_I2C2_WriteRegLPS22HH,
			.GetTick = BSP_GetTick,
			.ReadPin = BSP_ReadPinLPS22HH
	};

	LPS22HH_Init_Struct_t PressureSettings =
 800129a:	4b0f      	ldr	r3, [pc, #60]	; (80012d8 <BSP_PressureSensorInit+0x58>)
 800129c:	463c      	mov	r4, r7
 800129e:	461d      	mov	r5, r3
 80012a0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80012a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80012a4:	682b      	ldr	r3, [r5, #0]
 80012a6:	6023      	str	r3, [r4, #0]
			.F_MODE = LPS22HH_FifoBypass,
			.WTM = LPS22HH_DefaultSetting,
			.REF_P = LPS22HH_DefaultSetting
	};

	int32_t ret = LPS22HH_Init(&PressureSensor, PressureSettings, &PressureSensor_IO);
 80012a8:	f107 0314 	add.w	r3, r7, #20
 80012ac:	9302      	str	r3, [sp, #8]
 80012ae:	466a      	mov	r2, sp
 80012b0:	f107 030c 	add.w	r3, r7, #12
 80012b4:	e893 0003 	ldmia.w	r3, {r0, r1}
 80012b8:	e882 0003 	stmia.w	r2, {r0, r1}
 80012bc:	463b      	mov	r3, r7
 80012be:	cb0e      	ldmia	r3, {r1, r2, r3}
 80012c0:	4806      	ldr	r0, [pc, #24]	; (80012dc <BSP_PressureSensorInit+0x5c>)
 80012c2:	f001 fd9d 	bl	8002e00 <LPS22HH_Init>
 80012c6:	62f8      	str	r0, [r7, #44]	; 0x2c
	return ret;
 80012c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80012ca:	4618      	mov	r0, r3
 80012cc:	3730      	adds	r7, #48	; 0x30
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bdb0      	pop	{r4, r5, r7, pc}
 80012d2:	bf00      	nop
 80012d4:	0800e7c8 	.word	0x0800e7c8
 80012d8:	0800e7e0 	.word	0x0800e7e0
 80012dc:	200004b0 	.word	0x200004b0

080012e0 <BSP_ReadPressure>:

int32_t BSP_ReadPressure(float *result)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b084      	sub	sp, #16
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
	int32_t ret = LPS22HH_ReadPressure(&PressureSensor, result);
 80012e8:	6879      	ldr	r1, [r7, #4]
 80012ea:	4804      	ldr	r0, [pc, #16]	; (80012fc <BSP_ReadPressure+0x1c>)
 80012ec:	f001 fe12 	bl	8002f14 <LPS22HH_ReadPressure>
 80012f0:	60f8      	str	r0, [r7, #12]
	return ret;
 80012f2:	68fb      	ldr	r3, [r7, #12]
}
 80012f4:	4618      	mov	r0, r3
 80012f6:	3710      	adds	r7, #16
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bd80      	pop	{r7, pc}
 80012fc:	200004b0 	.word	0x200004b0

08001300 <BSP_MagnetometerInit>:
    return ret;
}
*/

int32_t BSP_MagnetometerInit(void)
{
 8001300:	b5b0      	push	{r4, r5, r7, lr}
 8001302:	b090      	sub	sp, #64	; 0x40
 8001304:	af04      	add	r7, sp, #16
    IIS2MDC_IO_t MagnetometerIO =
 8001306:	4b13      	ldr	r3, [pc, #76]	; (8001354 <BSP_MagnetometerInit+0x54>)
 8001308:	f107 0414 	add.w	r4, r7, #20
 800130c:	461d      	mov	r5, r3
 800130e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001310:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001312:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001316:	e884 0003 	stmia.w	r4, {r0, r1}
			.Write = BSP_I2C2_WriteRegIIS2MDC,
			.GetTick = BSP_GetTick,
			.ReadPin = BSP_ReadPinIIS2MDC
    };

    IIS2MDC_InitStruct_t MagnetometerSettings =
 800131a:	4b0f      	ldr	r3, [pc, #60]	; (8001358 <BSP_MagnetometerInit+0x58>)
 800131c:	463c      	mov	r4, r7
 800131e:	461d      	mov	r5, r3
 8001320:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001322:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001324:	682b      	ldr	r3, [r5, #0]
 8001326:	6023      	str	r3, [r4, #0]
			.OffsetX = 0,
			.OffsetY = 0,
			.OffsetZ = 0
    };

    int32_t ret = IIS2MDC_Init(&Magnetometer, MagnetometerSettings, &MagnetometerIO);
 8001328:	f107 0314 	add.w	r3, r7, #20
 800132c:	9302      	str	r3, [sp, #8]
 800132e:	466a      	mov	r2, sp
 8001330:	f107 030c 	add.w	r3, r7, #12
 8001334:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001338:	e882 0003 	stmia.w	r2, {r0, r1}
 800133c:	463b      	mov	r3, r7
 800133e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001340:	4806      	ldr	r0, [pc, #24]	; (800135c <BSP_MagnetometerInit+0x5c>)
 8001342:	f000 fcc3 	bl	8001ccc <IIS2MDC_Init>
 8001346:	62f8      	str	r0, [r7, #44]	; 0x2c
    return ret;
 8001348:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800134a:	4618      	mov	r0, r3
 800134c:	3730      	adds	r7, #48	; 0x30
 800134e:	46bd      	mov	sp, r7
 8001350:	bdb0      	pop	{r4, r5, r7, pc}
 8001352:	bf00      	nop
 8001354:	0800e7f4 	.word	0x0800e7f4
 8001358:	0800e80c 	.word	0x0800e80c
 800135c:	200004d8 	.word	0x200004d8

08001360 <BSP_ReadMagnetometerXYZ>:

int32_t BSP_ReadMagnetometerXYZ(float *Mx, float *My, float *Mz)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b086      	sub	sp, #24
 8001364:	af00      	add	r7, sp, #0
 8001366:	60f8      	str	r0, [r7, #12]
 8001368:	60b9      	str	r1, [r7, #8]
 800136a:	607a      	str	r2, [r7, #4]
    int32_t ret = IIS2MDC_ReadMagnetismXYZ(&Magnetometer, Mx, My, Mz);
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	68ba      	ldr	r2, [r7, #8]
 8001370:	68f9      	ldr	r1, [r7, #12]
 8001372:	4804      	ldr	r0, [pc, #16]	; (8001384 <BSP_ReadMagnetometerXYZ+0x24>)
 8001374:	f000 fd98 	bl	8001ea8 <IIS2MDC_ReadMagnetismXYZ>
 8001378:	6178      	str	r0, [r7, #20]
    return ret;
 800137a:	697b      	ldr	r3, [r7, #20]
}
 800137c:	4618      	mov	r0, r3
 800137e:	3718      	adds	r7, #24
 8001380:	46bd      	mov	sp, r7
 8001382:	bd80      	pop	{r7, pc}
 8001384:	200004d8 	.word	0x200004d8

08001388 <BSP_MotionSensorInit>:
#include <stddef.h>

static ISM330DHCX_Handle_t MotionSensor;

int32_t BSP_MotionSensorInit(void)
{
 8001388:	b5b0      	push	{r4, r5, r7, lr}
 800138a:	b0a6      	sub	sp, #152	; 0x98
 800138c:	af0c      	add	r7, sp, #48	; 0x30
	int32_t ret = 0;
 800138e:	2300      	movs	r3, #0
 8001390:	663b      	str	r3, [r7, #96]	; 0x60
	float JunkData[3];
	uint8_t DiscardedXLSamples = 0;
 8001392:	2300      	movs	r3, #0
 8001394:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	uint8_t DiscardedGyroSamples = 0;
 8001398:	2300      	movs	r3, #0
 800139a:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
	ISM330DHCX_IO_t SensorIO =
 800139e:	4b38      	ldr	r3, [pc, #224]	; (8001480 <BSP_MotionSensorInit+0xf8>)
 80013a0:	f107 0438 	add.w	r4, r7, #56	; 0x38
 80013a4:	461d      	mov	r5, r3
 80013a6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80013a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80013aa:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80013ae:	e884 0007 	stmia.w	r4, {r0, r1, r2}
			.GetTick = BSP_GetTick,
			.ReadInt1Pin = BSP_ReadPinISM330DHCX,
			.ReadInt2Pin = NULL
	};

	ISM330DHCX_Init_Struct_t Init =
 80013b2:	1d3b      	adds	r3, r7, #4
 80013b4:	2234      	movs	r2, #52	; 0x34
 80013b6:	2100      	movs	r1, #0
 80013b8:	4618      	mov	r0, r3
 80013ba:	f00d f9d7 	bl	800e76c <memset>
 80013be:	2304      	movs	r3, #4
 80013c0:	71bb      	strb	r3, [r7, #6]
 80013c2:	2320      	movs	r3, #32
 80013c4:	773b      	strb	r3, [r7, #28]
 80013c6:	2302      	movs	r3, #2
 80013c8:	77fb      	strb	r3, [r7, #31]
 80013ca:	230c      	movs	r3, #12
 80013cc:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
 80013d0:	2320      	movs	r3, #32
 80013d2:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 80013d6:	2308      	movs	r3, #8
 80013d8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80013dc:	2303      	movs	r3, #3
 80013de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

			.TIMESTAMP_EN = ISM330DHCX_DefaultSetting

	};

	ret = ISM330DHCX_Init(&MotionSensor, Init, &SensorIO);
 80013e2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80013e6:	930a      	str	r3, [sp, #40]	; 0x28
 80013e8:	466d      	mov	r5, sp
 80013ea:	f107 0410 	add.w	r4, r7, #16
 80013ee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80013f0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80013f2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80013f4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80013f6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80013fa:	e885 0003 	stmia.w	r5, {r0, r1}
 80013fe:	1d3b      	adds	r3, r7, #4
 8001400:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001402:	4820      	ldr	r0, [pc, #128]	; (8001484 <BSP_MotionSensorInit+0xfc>)
 8001404:	f000 ffbc 	bl	8002380 <ISM330DHCX_Init>
 8001408:	6638      	str	r0, [r7, #96]	; 0x60
	if(ret !=ISM330DHCX_Ok)
 800140a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800140c:	2b00      	cmp	r3, #0
 800140e:	d029      	beq.n	8001464 <BSP_MotionSensorInit+0xdc>
	{
		return ret;
 8001410:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001412:	e030      	b.n	8001476 <BSP_MotionSensorInit+0xee>
	}

	//Discard Junk Samples
	while(DiscardedXLSamples < 6 && DiscardedGyroSamples < 6)
	{
        if(BSP_ReadAccelXYZ(&JunkData[0],&JunkData[1],&JunkData[2]) ==ISM330DHCX_DataReady)
 8001414:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001418:	f103 0208 	add.w	r2, r3, #8
 800141c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001420:	1d19      	adds	r1, r3, #4
 8001422:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001426:	4618      	mov	r0, r3
 8001428:	f000 f82e 	bl	8001488 <BSP_ReadAccelXYZ>
 800142c:	4603      	mov	r3, r0
 800142e:	2b00      	cmp	r3, #0
 8001430:	d104      	bne.n	800143c <BSP_MotionSensorInit+0xb4>
        {
        	DiscardedXLSamples++;
 8001432:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001436:	3301      	adds	r3, #1
 8001438:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        }

        if(BSP_ReadGyroXYZ(&JunkData[0],&JunkData[1],&JunkData[2]) ==ISM330DHCX_DataReady)
 800143c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001440:	f103 0208 	add.w	r2, r3, #8
 8001444:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001448:	1d19      	adds	r1, r3, #4
 800144a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800144e:	4618      	mov	r0, r3
 8001450:	f000 f836 	bl	80014c0 <BSP_ReadGyroXYZ>
 8001454:	4603      	mov	r3, r0
 8001456:	2b00      	cmp	r3, #0
 8001458:	d104      	bne.n	8001464 <BSP_MotionSensorInit+0xdc>
        {
        	DiscardedGyroSamples++;
 800145a:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800145e:	3301      	adds	r3, #1
 8001460:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
	while(DiscardedXLSamples < 6 && DiscardedGyroSamples < 6)
 8001464:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001468:	2b05      	cmp	r3, #5
 800146a:	d803      	bhi.n	8001474 <BSP_MotionSensorInit+0xec>
 800146c:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8001470:	2b05      	cmp	r3, #5
 8001472:	d9cf      	bls.n	8001414 <BSP_MotionSensorInit+0x8c>
        }
	}
	return ISM330DHCX_Ok;
 8001474:	2300      	movs	r3, #0
}
 8001476:	4618      	mov	r0, r3
 8001478:	3768      	adds	r7, #104	; 0x68
 800147a:	46bd      	mov	sp, r7
 800147c:	bdb0      	pop	{r4, r5, r7, pc}
 800147e:	bf00      	nop
 8001480:	0800e820 	.word	0x0800e820
 8001484:	20000500 	.word	0x20000500

08001488 <BSP_ReadAccelXYZ>:

int32_t BSP_ReadAccelXYZ(float *Ax, float *Ay, float *Az)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b086      	sub	sp, #24
 800148c:	af00      	add	r7, sp, #0
 800148e:	60f8      	str	r0, [r7, #12]
 8001490:	60b9      	str	r1, [r7, #8]
 8001492:	607a      	str	r2, [r7, #4]
    int32_t ret = 0;
 8001494:	2300      	movs	r3, #0
 8001496:	617b      	str	r3, [r7, #20]
    ret = ISM330DHCX_ReadAccel(&MotionSensor, Ax, Ay, Az);
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	68ba      	ldr	r2, [r7, #8]
 800149c:	68f9      	ldr	r1, [r7, #12]
 800149e:	4807      	ldr	r0, [pc, #28]	; (80014bc <BSP_ReadAccelXYZ+0x34>)
 80014a0:	f001 f814 	bl	80024cc <ISM330DHCX_ReadAccel>
 80014a4:	6178      	str	r0, [r7, #20]
    if(ret != ISM330DHCX_DataReady)
 80014a6:	697b      	ldr	r3, [r7, #20]
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d001      	beq.n	80014b0 <BSP_ReadAccelXYZ+0x28>
    {
    	return ret;
 80014ac:	697b      	ldr	r3, [r7, #20]
 80014ae:	e000      	b.n	80014b2 <BSP_ReadAccelXYZ+0x2a>
    }
    return ISM330DHCX_DataReady;
 80014b0:	2300      	movs	r3, #0

}
 80014b2:	4618      	mov	r0, r3
 80014b4:	3718      	adds	r7, #24
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}
 80014ba:	bf00      	nop
 80014bc:	20000500 	.word	0x20000500

080014c0 <BSP_ReadGyroXYZ>:

int32_t BSP_ReadGyroXYZ(float *Wx, float *Wy, float *Wz)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b086      	sub	sp, #24
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	60f8      	str	r0, [r7, #12]
 80014c8:	60b9      	str	r1, [r7, #8]
 80014ca:	607a      	str	r2, [r7, #4]
    int32_t ret = 0;
 80014cc:	2300      	movs	r3, #0
 80014ce:	617b      	str	r3, [r7, #20]
    ret = ISM330DHCX_ReadGyro(&MotionSensor, Wx, Wy, Wz);
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	68ba      	ldr	r2, [r7, #8]
 80014d4:	68f9      	ldr	r1, [r7, #12]
 80014d6:	4807      	ldr	r0, [pc, #28]	; (80014f4 <BSP_ReadGyroXYZ+0x34>)
 80014d8:	f001 f857 	bl	800258a <ISM330DHCX_ReadGyro>
 80014dc:	6178      	str	r0, [r7, #20]
    if(ret != ISM330DHCX_DataReady)
 80014de:	697b      	ldr	r3, [r7, #20]
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d001      	beq.n	80014e8 <BSP_ReadGyroXYZ+0x28>
    {
    	return ret;
 80014e4:	697b      	ldr	r3, [r7, #20]
 80014e6:	e000      	b.n	80014ea <BSP_ReadGyroXYZ+0x2a>
    }
    return ISM330DHCX_DataReady;
 80014e8:	2300      	movs	r3, #0

}
 80014ea:	4618      	mov	r0, r3
 80014ec:	3718      	adds	r7, #24
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd80      	pop	{r7, pc}
 80014f2:	bf00      	nop
 80014f4:	20000500 	.word	0x20000500

080014f8 <BSP_RamInit>:
#include "octospi.h"
#include <stdint.h>



void BSP_RamInit(void){
 80014f8:	b580      	push	{r7, lr}
 80014fa:	af00      	add	r7, sp, #0
    Ram_GPIO_Init();
 80014fc:	f003 f95a 	bl	80047b4 <Ram_GPIO_Init>
    OSPI_RamInit();
 8001500:	f003 ff16 	bl	8005330 <OSPI_RamInit>
    OSPI_DelayBlockConfig();
 8001504:	f003 ffdc 	bl	80054c0 <OSPI_DelayBlockConfig>
    OSPI_EnableMemMappedMode();
 8001508:	f003 ff7e 	bl	8005408 <OSPI_EnableMemMappedMode>
}
 800150c:	bf00      	nop
 800150e:	bd80      	pop	{r7, pc}

08001510 <BSP_RamErase>:

void BSP_RamErase(void){
 8001510:	b480      	push	{r7}
 8001512:	b083      	sub	sp, #12
 8001514:	af00      	add	r7, sp, #0
	  uint32_t *pRam = (uint32_t*)OSPI1_RAM_BASE;
 8001516:	f04f 4310 	mov.w	r3, #2415919104	; 0x90000000
 800151a:	603b      	str	r3, [r7, #0]
	  for(uint32_t i = 0; i < (OSPI1_RAM_LENGTH / 4); i = i + 1){
 800151c:	2300      	movs	r3, #0
 800151e:	607b      	str	r3, [r7, #4]
 8001520:	e008      	b.n	8001534 <BSP_RamErase+0x24>
		  *(pRam + i) = 0;
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	009b      	lsls	r3, r3, #2
 8001526:	683a      	ldr	r2, [r7, #0]
 8001528:	4413      	add	r3, r2
 800152a:	2200      	movs	r2, #0
 800152c:	601a      	str	r2, [r3, #0]
	  for(uint32_t i = 0; i < (OSPI1_RAM_LENGTH / 4); i = i + 1){
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	3301      	adds	r3, #1
 8001532:	607b      	str	r3, [r7, #4]
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800153a:	d3f2      	bcc.n	8001522 <BSP_RamErase+0x12>
	  }
}
 800153c:	bf00      	nop
 800153e:	bf00      	nop
 8001540:	370c      	adds	r7, #12
 8001542:	46bd      	mov	sp, r7
 8001544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001548:	4770      	bx	lr
	...

0800154c <HTS221_Init>:
static int32_t HTS221_CalculateTemperature(HTS221_Handle_t *Handle, float *temperature);
static int32_t HTS221_CalculateHumidity(HTS221_Handle_t *Handle, float *humidity);


int32_t HTS221_Init(HTS221_Handle_t *Handle, HTS221_Init_Struct_t Settings, HTS221_IO_t *IO)
{
 800154c:	b5b0      	push	{r4, r5, r7, lr}
 800154e:	b084      	sub	sp, #16
 8001550:	af00      	add	r7, sp, #0
 8001552:	60f8      	str	r0, [r7, #12]
 8001554:	1d38      	adds	r0, r7, #4
 8001556:	e880 0006 	stmia.w	r0, {r1, r2}
 800155a:	603b      	str	r3, [r7, #0]
    if(Handle == NULL)
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	2b00      	cmp	r3, #0
 8001560:	d102      	bne.n	8001568 <HTS221_Init+0x1c>
    {
    	return HTS221_Error;
 8001562:	f04f 33ff 	mov.w	r3, #4294967295
 8001566:	e032      	b.n	80015ce <HTS221_Init+0x82>
    }
    Handle->IO = *IO;
 8001568:	68fa      	ldr	r2, [r7, #12]
 800156a:	683b      	ldr	r3, [r7, #0]
 800156c:	4614      	mov	r4, r2
 800156e:	461d      	mov	r5, r3
 8001570:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001572:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001574:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001578:	e884 0003 	stmia.w	r4, {r0, r1}
    Handle->Context.Handle = Handle;
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	68fa      	ldr	r2, [r7, #12]
 8001580:	619a      	str	r2, [r3, #24]
    Handle->Context.Read = HTS221_ReadRegWrapper;
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	4a14      	ldr	r2, [pc, #80]	; (80015d8 <HTS221_Init+0x8c>)
 8001586:	61da      	str	r2, [r3, #28]
    Handle->Context.Write = HTS221_WriteRegWrapper;
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	4a14      	ldr	r2, [pc, #80]	; (80015dc <HTS221_Init+0x90>)
 800158c:	621a      	str	r2, [r3, #32]

    if(Settings.DataReadyConfig == HTS221_DataReadyEnable && Handle->IO.ReadPin == NULL)
 800158e:	7a7b      	ldrb	r3, [r7, #9]
 8001590:	2b04      	cmp	r3, #4
 8001592:	d106      	bne.n	80015a2 <HTS221_Init+0x56>
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	695b      	ldr	r3, [r3, #20]
 8001598:	2b00      	cmp	r3, #0
 800159a:	d102      	bne.n	80015a2 <HTS221_Init+0x56>
    {
    	return HTS221_Error; //Must provide a read pin function if using the data ready pin
 800159c:	f04f 33ff 	mov.w	r3, #4294967295
 80015a0:	e015      	b.n	80015ce <HTS221_Init+0x82>
    }
    Handle->DRDY_Config = Settings.DataReadyConfig;
 80015a2:	7a7a      	ldrb	r2, [r7, #9]
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    Handle->DRDY_Polarity = Settings.DataReadySignalPolarity;
 80015aa:	79fa      	ldrb	r2, [r7, #7]
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    //Initialized Bus
    if(Handle->IO.Init != NULL)
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d002      	beq.n	80015c0 <HTS221_Init+0x74>
    {
        Handle->IO.Init();
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	4798      	blx	r3
    }

    //Initialize Device
    return HTS221_RegisterInit(Handle, Settings);
 80015c0:	1d3b      	adds	r3, r7, #4
 80015c2:	e893 0006 	ldmia.w	r3, {r1, r2}
 80015c6:	68f8      	ldr	r0, [r7, #12]
 80015c8:	f000 f8d6 	bl	8001778 <HTS221_RegisterInit>
 80015cc:	4603      	mov	r3, r0
}
 80015ce:	4618      	mov	r0, r3
 80015d0:	3710      	adds	r7, #16
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bdb0      	pop	{r4, r5, r7, pc}
 80015d6:	bf00      	nop
 80015d8:	0800171d 	.word	0x0800171d
 80015dc:	0800174b 	.word	0x0800174b

080015e0 <HTS221_ResetRegisters>:
	temp &= ~HTS221_HEATER_ENABLE;                                           //Modify Reg
	return HTS221_WriteReg(&Handle->Context,HTS221_REG_CTRL_REG2, &temp, 1); //Store Reg
}

int32_t HTS221_ResetRegisters(HTS221_Handle_t *Handle)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b084      	sub	sp, #16
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
	uint8_t temp = HTS221_RebootSignal;
 80015e8:	2380      	movs	r3, #128	; 0x80
 80015ea:	73fb      	strb	r3, [r7, #15]
    return HTS221_WriteReg(&Handle->Context, HTS221_REG_CTRL_REG2, &temp, 1);
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	f103 0018 	add.w	r0, r3, #24
 80015f2:	f107 020f 	add.w	r2, r7, #15
 80015f6:	2301      	movs	r3, #1
 80015f8:	2121      	movs	r1, #33	; 0x21
 80015fa:	f000 fb12 	bl	8001c22 <HTS221_WriteReg>
 80015fe:	4603      	mov	r3, r0
}
 8001600:	4618      	mov	r0, r3
 8001602:	3710      	adds	r7, #16
 8001604:	46bd      	mov	sp, r7
 8001606:	bd80      	pop	{r7, pc}

08001608 <HTS221_ReadTemperature>:
	//turn on
	return HTS221_PowerUp(Handle);
}

int32_t HTS221_ReadTemperature(HTS221_Handle_t *Handle, float *temperature)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b086      	sub	sp, #24
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
 8001610:	6039      	str	r1, [r7, #0]
    int32_t ret = 0;
 8001612:	2300      	movs	r3, #0
 8001614:	617b      	str	r3, [r7, #20]
    uint8_t reg = 0;
 8001616:	2300      	movs	r3, #0
 8001618:	73fb      	strb	r3, [r7, #15]
	//Check if DRDY is used
	if(Handle->DRDY_Config == HTS221_DataReadyEnable)
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001620:	2b04      	cmp	r3, #4
 8001622:	d116      	bne.n	8001652 <HTS221_ReadTemperature+0x4a>
	{
		//If its used, read it.
		int32_t PinState = Handle->IO.ReadPin();
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	695b      	ldr	r3, [r3, #20]
 8001628:	4798      	blx	r3
 800162a:	6138      	str	r0, [r7, #16]
		//If Its High and Polarity is Active Low OR If its Low and Polarity is Active High, return data not ready
        if((Handle->DRDY_Polarity == HTS221_DataActiveHigh && PinState == 0) || (Handle->DRDY_Polarity == HTS221_DataActiveLow && PinState != 0))
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001632:	2b00      	cmp	r3, #0
 8001634:	d102      	bne.n	800163c <HTS221_ReadTemperature+0x34>
 8001636:	693b      	ldr	r3, [r7, #16]
 8001638:	2b00      	cmp	r3, #0
 800163a:	d007      	beq.n	800164c <HTS221_ReadTemperature+0x44>
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001642:	2b80      	cmp	r3, #128	; 0x80
 8001644:	d11c      	bne.n	8001680 <HTS221_ReadTemperature+0x78>
 8001646:	693b      	ldr	r3, [r7, #16]
 8001648:	2b00      	cmp	r3, #0
 800164a:	d019      	beq.n	8001680 <HTS221_ReadTemperature+0x78>
        {
            return HTS221_DataNotReady;
 800164c:	f64b 63ef 	movw	r3, #48879	; 0xbeef
 8001650:	e01b      	b.n	800168a <HTS221_ReadTemperature+0x82>
        }
	} else
	{
		//Otherwise, read the status reg
        ret = HTS221_ReadReg(&Handle->Context, HTS221_REG_STATUS_REG, &reg, 1);
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	f103 0018 	add.w	r0, r3, #24
 8001658:	f107 020f 	add.w	r2, r7, #15
 800165c:	2301      	movs	r3, #1
 800165e:	2127      	movs	r1, #39	; 0x27
 8001660:	f000 fab6 	bl	8001bd0 <HTS221_ReadReg>
 8001664:	6178      	str	r0, [r7, #20]
        if(ret != HTS221_Ok)
 8001666:	697b      	ldr	r3, [r7, #20]
 8001668:	2b00      	cmp	r3, #0
 800166a:	d001      	beq.n	8001670 <HTS221_ReadTemperature+0x68>
        {
        	return ret;
 800166c:	697b      	ldr	r3, [r7, #20]
 800166e:	e00c      	b.n	800168a <HTS221_ReadTemperature+0x82>
        } else if ((reg & HTS221_TEMPDATA_Msk) == 0)
 8001670:	7bfb      	ldrb	r3, [r7, #15]
 8001672:	f003 0301 	and.w	r3, r3, #1
 8001676:	2b00      	cmp	r3, #0
 8001678:	d102      	bne.n	8001680 <HTS221_ReadTemperature+0x78>
        {
        	return HTS221_DataNotReady;
 800167a:	f64b 63ef 	movw	r3, #48879	; 0xbeef
 800167e:	e004      	b.n	800168a <HTS221_ReadTemperature+0x82>
        }
	}
    return HTS221_CalculateTemperature(Handle, temperature);
 8001680:	6839      	ldr	r1, [r7, #0]
 8001682:	6878      	ldr	r0, [r7, #4]
 8001684:	f000 f8b6 	bl	80017f4 <HTS221_CalculateTemperature>
 8001688:	4603      	mov	r3, r0
}
 800168a:	4618      	mov	r0, r3
 800168c:	3718      	adds	r7, #24
 800168e:	46bd      	mov	sp, r7
 8001690:	bd80      	pop	{r7, pc}

08001692 <HTS221_ReadHumidity>:
int32_t HTS221_ReadHumidity(HTS221_Handle_t *Handle, float *humidity)
{
 8001692:	b580      	push	{r7, lr}
 8001694:	b086      	sub	sp, #24
 8001696:	af00      	add	r7, sp, #0
 8001698:	6078      	str	r0, [r7, #4]
 800169a:	6039      	str	r1, [r7, #0]
    int32_t ret = 0;
 800169c:	2300      	movs	r3, #0
 800169e:	617b      	str	r3, [r7, #20]
    uint8_t reg = 0;
 80016a0:	2300      	movs	r3, #0
 80016a2:	73fb      	strb	r3, [r7, #15]
	//Check if DRDY is used
	if(Handle->DRDY_Config == HTS221_DataReadyEnable)
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80016aa:	2b04      	cmp	r3, #4
 80016ac:	d116      	bne.n	80016dc <HTS221_ReadHumidity+0x4a>
	{
		//If its used, read it.
		int32_t PinState = Handle->IO.ReadPin();
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	695b      	ldr	r3, [r3, #20]
 80016b2:	4798      	blx	r3
 80016b4:	6138      	str	r0, [r7, #16]
		//If Its High and Polarity is Active Low OR If its Low and Polarity is Active High, return data not ready
        if((Handle->DRDY_Polarity == HTS221_DataActiveHigh && PinState == 0) || (Handle->DRDY_Polarity == HTS221_DataActiveLow && PinState != 0))
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d102      	bne.n	80016c6 <HTS221_ReadHumidity+0x34>
 80016c0:	693b      	ldr	r3, [r7, #16]
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d007      	beq.n	80016d6 <HTS221_ReadHumidity+0x44>
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80016cc:	2b80      	cmp	r3, #128	; 0x80
 80016ce:	d11c      	bne.n	800170a <HTS221_ReadHumidity+0x78>
 80016d0:	693b      	ldr	r3, [r7, #16]
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d019      	beq.n	800170a <HTS221_ReadHumidity+0x78>
        {
            return HTS221_DataNotReady;
 80016d6:	f64b 63ef 	movw	r3, #48879	; 0xbeef
 80016da:	e01b      	b.n	8001714 <HTS221_ReadHumidity+0x82>
        }
	} else
	{
		//Otherwise, read the status reg
        ret = HTS221_ReadReg(&Handle->Context, HTS221_REG_STATUS_REG, &reg, 1);
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	f103 0018 	add.w	r0, r3, #24
 80016e2:	f107 020f 	add.w	r2, r7, #15
 80016e6:	2301      	movs	r3, #1
 80016e8:	2127      	movs	r1, #39	; 0x27
 80016ea:	f000 fa71 	bl	8001bd0 <HTS221_ReadReg>
 80016ee:	6178      	str	r0, [r7, #20]
        if(ret != HTS221_Ok)
 80016f0:	697b      	ldr	r3, [r7, #20]
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d001      	beq.n	80016fa <HTS221_ReadHumidity+0x68>
        {
        	return ret;
 80016f6:	697b      	ldr	r3, [r7, #20]
 80016f8:	e00c      	b.n	8001714 <HTS221_ReadHumidity+0x82>
        } else if ((reg & HTS221_HUMDATA_Msk) == 0)
 80016fa:	7bfb      	ldrb	r3, [r7, #15]
 80016fc:	f003 0302 	and.w	r3, r3, #2
 8001700:	2b00      	cmp	r3, #0
 8001702:	d102      	bne.n	800170a <HTS221_ReadHumidity+0x78>
        {
        	return HTS221_DataNotReady;
 8001704:	f64b 63ef 	movw	r3, #48879	; 0xbeef
 8001708:	e004      	b.n	8001714 <HTS221_ReadHumidity+0x82>
        }
	}

	return HTS221_CalculateHumidity(Handle, humidity);
 800170a:	6839      	ldr	r1, [r7, #0]
 800170c:	6878      	ldr	r0, [r7, #4]
 800170e:	f000 f96b 	bl	80019e8 <HTS221_CalculateHumidity>
 8001712:	4603      	mov	r3, r0
}
 8001714:	4618      	mov	r0, r3
 8001716:	3718      	adds	r7, #24
 8001718:	46bd      	mov	sp, r7
 800171a:	bd80      	pop	{r7, pc}

0800171c <HTS221_ReadRegWrapper>:
	return HTS221_WriteReg(&Handle->Context,HTS221_REG_CTRL_REG1, &temp, 1); //Store Reg
}


static int32_t HTS221_ReadRegWrapper(void *Handle, uint8_t Reg, uint8_t *Buffer, uint8_t Length)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b086      	sub	sp, #24
 8001720:	af00      	add	r7, sp, #0
 8001722:	60f8      	str	r0, [r7, #12]
 8001724:	607a      	str	r2, [r7, #4]
 8001726:	461a      	mov	r2, r3
 8001728:	460b      	mov	r3, r1
 800172a:	72fb      	strb	r3, [r7, #11]
 800172c:	4613      	mov	r3, r2
 800172e:	72bb      	strb	r3, [r7, #10]
	HTS221_Handle_t *HTS221_Handle = Handle;
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	617b      	str	r3, [r7, #20]
	return HTS221_Handle->IO.Read(Reg, Buffer, Length);
 8001734:	697b      	ldr	r3, [r7, #20]
 8001736:	68db      	ldr	r3, [r3, #12]
 8001738:	7aba      	ldrb	r2, [r7, #10]
 800173a:	7af8      	ldrb	r0, [r7, #11]
 800173c:	6879      	ldr	r1, [r7, #4]
 800173e:	4798      	blx	r3
 8001740:	4603      	mov	r3, r0
}
 8001742:	4618      	mov	r0, r3
 8001744:	3718      	adds	r7, #24
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}

0800174a <HTS221_WriteRegWrapper>:

static int32_t HTS221_WriteRegWrapper(void *Handle, uint8_t Reg, uint8_t *Buffer, uint8_t Length)
{
 800174a:	b580      	push	{r7, lr}
 800174c:	b086      	sub	sp, #24
 800174e:	af00      	add	r7, sp, #0
 8001750:	60f8      	str	r0, [r7, #12]
 8001752:	607a      	str	r2, [r7, #4]
 8001754:	461a      	mov	r2, r3
 8001756:	460b      	mov	r3, r1
 8001758:	72fb      	strb	r3, [r7, #11]
 800175a:	4613      	mov	r3, r2
 800175c:	72bb      	strb	r3, [r7, #10]
	HTS221_Handle_t *HTS221_Handle = Handle;
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	617b      	str	r3, [r7, #20]
	return HTS221_Handle->IO.Write(Reg, Buffer, Length);
 8001762:	697b      	ldr	r3, [r7, #20]
 8001764:	689b      	ldr	r3, [r3, #8]
 8001766:	7aba      	ldrb	r2, [r7, #10]
 8001768:	7af8      	ldrb	r0, [r7, #11]
 800176a:	6879      	ldr	r1, [r7, #4]
 800176c:	4798      	blx	r3
 800176e:	4603      	mov	r3, r0
}
 8001770:	4618      	mov	r0, r3
 8001772:	3718      	adds	r7, #24
 8001774:	46bd      	mov	sp, r7
 8001776:	bd80      	pop	{r7, pc}

08001778 <HTS221_RegisterInit>:

static int32_t HTS221_RegisterInit(HTS221_Handle_t *Handle, HTS221_Init_Struct_t Settings)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b086      	sub	sp, #24
 800177c:	af00      	add	r7, sp, #0
 800177e:	60f8      	str	r0, [r7, #12]
 8001780:	1d3b      	adds	r3, r7, #4
 8001782:	e883 0006 	stmia.w	r3, {r1, r2}
    int32_t ret =  0;
 8001786:	2300      	movs	r3, #0
 8001788:	617b      	str	r3, [r7, #20]
    uint8_t temp = 0;
 800178a:	2300      	movs	r3, #0
 800178c:	74fb      	strb	r3, [r7, #19]

    //reset registers to factory default
    ret = HTS221_ResetRegisters(Handle);
 800178e:	68f8      	ldr	r0, [r7, #12]
 8001790:	f7ff ff26 	bl	80015e0 <HTS221_ResetRegisters>
 8001794:	6178      	str	r0, [r7, #20]
    if(ret != HTS221_Ok)
 8001796:	697b      	ldr	r3, [r7, #20]
 8001798:	2b00      	cmp	r3, #0
 800179a:	d001      	beq.n	80017a0 <HTS221_RegisterInit+0x28>
    {
    	return ret;
 800179c:	697b      	ldr	r3, [r7, #20]
 800179e:	e025      	b.n	80017ec <HTS221_RegisterInit+0x74>
    }

    temp = HTS221_BDU_ENABLE | Settings.OutputDataRate;
 80017a0:	79bb      	ldrb	r3, [r7, #6]
 80017a2:	f043 0304 	orr.w	r3, r3, #4
 80017a6:	b2db      	uxtb	r3, r3
 80017a8:	74fb      	strb	r3, [r7, #19]
    ret = HTS221_WriteReg(&Handle->Context, HTS221_REG_CTRL_REG1, &temp,1);
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	f103 0018 	add.w	r0, r3, #24
 80017b0:	f107 0213 	add.w	r2, r7, #19
 80017b4:	2301      	movs	r3, #1
 80017b6:	2120      	movs	r1, #32
 80017b8:	f000 fa33 	bl	8001c22 <HTS221_WriteReg>
 80017bc:	6178      	str	r0, [r7, #20]
    if(ret != HTS221_Ok)
 80017be:	697b      	ldr	r3, [r7, #20]
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d001      	beq.n	80017c8 <HTS221_RegisterInit+0x50>
    {
    	return ret;
 80017c4:	697b      	ldr	r3, [r7, #20]
 80017c6:	e011      	b.n	80017ec <HTS221_RegisterInit+0x74>
    }

    temp = Settings.DataReadySignalPolarity | Settings.DataReadyOutputMode | Settings.DataReadyConfig;
 80017c8:	79fa      	ldrb	r2, [r7, #7]
 80017ca:	7a3b      	ldrb	r3, [r7, #8]
 80017cc:	4313      	orrs	r3, r2
 80017ce:	b2da      	uxtb	r2, r3
 80017d0:	7a7b      	ldrb	r3, [r7, #9]
 80017d2:	4313      	orrs	r3, r2
 80017d4:	b2db      	uxtb	r3, r3
 80017d6:	74fb      	strb	r3, [r7, #19]
    return HTS221_WriteReg(&Handle->Context, HTS221_REG_CTRL_REG3, &temp,1);
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	f103 0018 	add.w	r0, r3, #24
 80017de:	f107 0213 	add.w	r2, r7, #19
 80017e2:	2301      	movs	r3, #1
 80017e4:	2122      	movs	r1, #34	; 0x22
 80017e6:	f000 fa1c 	bl	8001c22 <HTS221_WriteReg>
 80017ea:	4603      	mov	r3, r0
}
 80017ec:	4618      	mov	r0, r3
 80017ee:	3718      	adds	r7, #24
 80017f0:	46bd      	mov	sp, r7
 80017f2:	bd80      	pop	{r7, pc}

080017f4 <HTS221_CalculateTemperature>:

static int32_t HTS221_CalculateTemperature(HTS221_Handle_t *Handle, float *temperature)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b08a      	sub	sp, #40	; 0x28
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
 80017fc:	6039      	str	r1, [r7, #0]
	int32_t ret = 0;
 80017fe:	2300      	movs	r3, #0
 8001800:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t Buffer[2] = {0};
 8001802:	2300      	movs	r3, #0
 8001804:	81bb      	strh	r3, [r7, #12]
	int16_t temp = 0;
 8001806:	2300      	movs	r3, #0
 8001808:	847b      	strh	r3, [r7, #34]	; 0x22
    float T0_OUT = 0, T1_OUT = 0;
 800180a:	f04f 0300 	mov.w	r3, #0
 800180e:	61fb      	str	r3, [r7, #28]
 8001810:	f04f 0300 	mov.w	r3, #0
 8001814:	61bb      	str	r3, [r7, #24]
    float T1_DEGC = 0,  T0_DEGC = 0;
 8001816:	f04f 0300 	mov.w	r3, #0
 800181a:	617b      	str	r3, [r7, #20]
 800181c:	f04f 0300 	mov.w	r3, #0
 8001820:	613b      	str	r3, [r7, #16]


    //Fetch T0
    ret = HTS221_ReadReg(&Handle->Context, HTS221_REG_T0_OUT, Buffer, 2);
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	f103 0018 	add.w	r0, r3, #24
 8001828:	f107 020c 	add.w	r2, r7, #12
 800182c:	2302      	movs	r3, #2
 800182e:	213c      	movs	r1, #60	; 0x3c
 8001830:	f000 f9ce 	bl	8001bd0 <HTS221_ReadReg>
 8001834:	6278      	str	r0, [r7, #36]	; 0x24
    if(ret != HTS221_Ok)
 8001836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001838:	2b00      	cmp	r3, #0
 800183a:	d001      	beq.n	8001840 <HTS221_CalculateTemperature+0x4c>
    {
    	return ret;
 800183c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800183e:	e0ce      	b.n	80019de <HTS221_CalculateTemperature+0x1ea>
    }
    temp = (Buffer[1] << 8) + Buffer[0];
 8001840:	7b7b      	ldrb	r3, [r7, #13]
 8001842:	b29b      	uxth	r3, r3
 8001844:	021b      	lsls	r3, r3, #8
 8001846:	b29a      	uxth	r2, r3
 8001848:	7b3b      	ldrb	r3, [r7, #12]
 800184a:	b29b      	uxth	r3, r3
 800184c:	4413      	add	r3, r2
 800184e:	b29b      	uxth	r3, r3
 8001850:	847b      	strh	r3, [r7, #34]	; 0x22
    T0_OUT = temp * 1.0f;
 8001852:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8001856:	ee07 3a90 	vmov	s15, r3
 800185a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800185e:	edc7 7a07 	vstr	s15, [r7, #28]

    //Fetch T1
    ret = HTS221_ReadReg(&Handle->Context, HTS221_REG_T1_OUT, Buffer, 2);
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	f103 0018 	add.w	r0, r3, #24
 8001868:	f107 020c 	add.w	r2, r7, #12
 800186c:	2302      	movs	r3, #2
 800186e:	213e      	movs	r1, #62	; 0x3e
 8001870:	f000 f9ae 	bl	8001bd0 <HTS221_ReadReg>
 8001874:	6278      	str	r0, [r7, #36]	; 0x24
    if(ret != HTS221_Ok)
 8001876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001878:	2b00      	cmp	r3, #0
 800187a:	d001      	beq.n	8001880 <HTS221_CalculateTemperature+0x8c>
    {
    	return ret;
 800187c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800187e:	e0ae      	b.n	80019de <HTS221_CalculateTemperature+0x1ea>
    }
    temp = (Buffer[1] << 8) + Buffer[0];
 8001880:	7b7b      	ldrb	r3, [r7, #13]
 8001882:	b29b      	uxth	r3, r3
 8001884:	021b      	lsls	r3, r3, #8
 8001886:	b29a      	uxth	r2, r3
 8001888:	7b3b      	ldrb	r3, [r7, #12]
 800188a:	b29b      	uxth	r3, r3
 800188c:	4413      	add	r3, r2
 800188e:	b29b      	uxth	r3, r3
 8001890:	847b      	strh	r3, [r7, #34]	; 0x22
    T1_OUT = temp * 1.0f;
 8001892:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8001896:	ee07 3a90 	vmov	s15, r3
 800189a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800189e:	edc7 7a06 	vstr	s15, [r7, #24]

    //Fetch T0DegC
    ret = HTS221_ReadReg(&Handle->Context, HTS221_REG_T0_degC_x8, Buffer, 1); //Get LSB, store in Buffer16
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	f103 0018 	add.w	r0, r3, #24
 80018a8:	f107 020c 	add.w	r2, r7, #12
 80018ac:	2301      	movs	r3, #1
 80018ae:	2132      	movs	r1, #50	; 0x32
 80018b0:	f000 f98e 	bl	8001bd0 <HTS221_ReadReg>
 80018b4:	6278      	str	r0, [r7, #36]	; 0x24
    if(ret != HTS221_Ok)
 80018b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d001      	beq.n	80018c0 <HTS221_CalculateTemperature+0xcc>
    {
    	return ret;
 80018bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018be:	e08e      	b.n	80019de <HTS221_CalculateTemperature+0x1ea>
    }

    ret = HTS221_ReadReg(&Handle->Context, HTS221_REG_T1_T0_msb, &Buffer[1], 1);  //Get MSB, store in Buffer8
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	f103 0018 	add.w	r0, r3, #24
 80018c6:	f107 030c 	add.w	r3, r7, #12
 80018ca:	1c5a      	adds	r2, r3, #1
 80018cc:	2301      	movs	r3, #1
 80018ce:	2135      	movs	r1, #53	; 0x35
 80018d0:	f000 f97e 	bl	8001bd0 <HTS221_ReadReg>
 80018d4:	6278      	str	r0, [r7, #36]	; 0x24
    if(ret != HTS221_Ok)
 80018d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d001      	beq.n	80018e0 <HTS221_CalculateTemperature+0xec>
    {
    	return ret;
 80018dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018de:	e07e      	b.n	80019de <HTS221_CalculateTemperature+0x1ea>
    }
    temp = ((Buffer[1] & 0x03) << 8) + Buffer[0];
 80018e0:	7b7b      	ldrb	r3, [r7, #13]
 80018e2:	021b      	lsls	r3, r3, #8
 80018e4:	b29b      	uxth	r3, r3
 80018e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80018ea:	b29a      	uxth	r2, r3
 80018ec:	7b3b      	ldrb	r3, [r7, #12]
 80018ee:	b29b      	uxth	r3, r3
 80018f0:	4413      	add	r3, r2
 80018f2:	b29b      	uxth	r3, r3
 80018f4:	847b      	strh	r3, [r7, #34]	; 0x22
    T0_DEGC = temp / 8.0f; //Calculate
 80018f6:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80018fa:	ee07 3a90 	vmov	s15, r3
 80018fe:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001902:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 8001906:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800190a:	edc7 7a04 	vstr	s15, [r7, #16]

    //Fetch T1DegC
    ret = HTS221_ReadReg(&Handle->Context, HTS221_REG_T1_degC_x8, Buffer, 1); //Get LSB, store in Buffer16
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	f103 0018 	add.w	r0, r3, #24
 8001914:	f107 020c 	add.w	r2, r7, #12
 8001918:	2301      	movs	r3, #1
 800191a:	2133      	movs	r1, #51	; 0x33
 800191c:	f000 f958 	bl	8001bd0 <HTS221_ReadReg>
 8001920:	6278      	str	r0, [r7, #36]	; 0x24
    if(ret != HTS221_Ok)
 8001922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001924:	2b00      	cmp	r3, #0
 8001926:	d001      	beq.n	800192c <HTS221_CalculateTemperature+0x138>
    {
    	return ret;
 8001928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800192a:	e058      	b.n	80019de <HTS221_CalculateTemperature+0x1ea>
    }
    temp = ((Buffer[1] & 0x0C) << 6) + Buffer[0];
 800192c:	7b7b      	ldrb	r3, [r7, #13]
 800192e:	019b      	lsls	r3, r3, #6
 8001930:	b29b      	uxth	r3, r3
 8001932:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001936:	b29a      	uxth	r2, r3
 8001938:	7b3b      	ldrb	r3, [r7, #12]
 800193a:	b29b      	uxth	r3, r3
 800193c:	4413      	add	r3, r2
 800193e:	b29b      	uxth	r3, r3
 8001940:	847b      	strh	r3, [r7, #34]	; 0x22
    T1_DEGC = temp / 8.0f; //Calculate
 8001942:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8001946:	ee07 3a90 	vmov	s15, r3
 800194a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800194e:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 8001952:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001956:	edc7 7a05 	vstr	s15, [r7, #20]

    ret = HTS221_ReadReg(&Handle->Context, HTS221_REG_TEMP_OUT_L, Buffer, 2);
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	f103 0018 	add.w	r0, r3, #24
 8001960:	f107 020c 	add.w	r2, r7, #12
 8001964:	2302      	movs	r3, #2
 8001966:	212a      	movs	r1, #42	; 0x2a
 8001968:	f000 f932 	bl	8001bd0 <HTS221_ReadReg>
 800196c:	6278      	str	r0, [r7, #36]	; 0x24
    if(ret != HTS221_Ok)
 800196e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001970:	2b00      	cmp	r3, #0
 8001972:	d001      	beq.n	8001978 <HTS221_CalculateTemperature+0x184>
    {
    	return ret;
 8001974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001976:	e032      	b.n	80019de <HTS221_CalculateTemperature+0x1ea>
    }
    temp = (Buffer[1] << 8) + Buffer[0];
 8001978:	7b7b      	ldrb	r3, [r7, #13]
 800197a:	b29b      	uxth	r3, r3
 800197c:	021b      	lsls	r3, r3, #8
 800197e:	b29a      	uxth	r2, r3
 8001980:	7b3b      	ldrb	r3, [r7, #12]
 8001982:	b29b      	uxth	r3, r3
 8001984:	4413      	add	r3, r2
 8001986:	b29b      	uxth	r3, r3
 8001988:	847b      	strh	r3, [r7, #34]	; 0x22
    *temperature = (((T1_DEGC - T0_DEGC) * temp) + ((T1_OUT * T0_DEGC) - (T0_OUT * T1_DEGC))) / (T1_OUT - T0_OUT); //Linear Interpolation
 800198a:	ed97 7a05 	vldr	s14, [r7, #20]
 800198e:	edd7 7a04 	vldr	s15, [r7, #16]
 8001992:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001996:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800199a:	ee07 3a90 	vmov	s15, r3
 800199e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80019a2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80019a6:	edd7 6a06 	vldr	s13, [r7, #24]
 80019aa:	edd7 7a04 	vldr	s15, [r7, #16]
 80019ae:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80019b2:	ed97 6a07 	vldr	s12, [r7, #28]
 80019b6:	edd7 7a05 	vldr	s15, [r7, #20]
 80019ba:	ee66 7a27 	vmul.f32	s15, s12, s15
 80019be:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80019c2:	ee77 6a27 	vadd.f32	s13, s14, s15
 80019c6:	ed97 7a06 	vldr	s14, [r7, #24]
 80019ca:	edd7 7a07 	vldr	s15, [r7, #28]
 80019ce:	ee37 7a67 	vsub.f32	s14, s14, s15
 80019d2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80019d6:	683b      	ldr	r3, [r7, #0]
 80019d8:	edc3 7a00 	vstr	s15, [r3]
    return HTS221_Ok;
 80019dc:	2300      	movs	r3, #0
}
 80019de:	4618      	mov	r0, r3
 80019e0:	3728      	adds	r7, #40	; 0x28
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bd80      	pop	{r7, pc}
	...

080019e8 <HTS221_CalculateHumidity>:

static int32_t HTS221_CalculateHumidity(HTS221_Handle_t *Handle, float *humidity)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b08a      	sub	sp, #40	; 0x28
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
 80019f0:	6039      	str	r1, [r7, #0]
	int32_t ret = 0;
 80019f2:	2300      	movs	r3, #0
 80019f4:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t Buffer[2] = {0};
 80019f6:	2300      	movs	r3, #0
 80019f8:	813b      	strh	r3, [r7, #8]
	int16_t temp = 0;
 80019fa:	2300      	movs	r3, #0
 80019fc:	847b      	strh	r3, [r7, #34]	; 0x22
    float H0_OUT = 0, H1_OUT = 0;
 80019fe:	f04f 0300 	mov.w	r3, #0
 8001a02:	61fb      	str	r3, [r7, #28]
 8001a04:	f04f 0300 	mov.w	r3, #0
 8001a08:	61bb      	str	r3, [r7, #24]
    float H1_REL = 0,  H0_REL = 0;
 8001a0a:	f04f 0300 	mov.w	r3, #0
 8001a0e:	617b      	str	r3, [r7, #20]
 8001a10:	f04f 0300 	mov.w	r3, #0
 8001a14:	613b      	str	r3, [r7, #16]
    float result = 0;
 8001a16:	f04f 0300 	mov.w	r3, #0
 8001a1a:	60fb      	str	r3, [r7, #12]

    //Fetch H0
    ret = HTS221_ReadReg(&Handle->Context, HTS221_REG_H0_T0_OUT, Buffer, 2);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	f103 0018 	add.w	r0, r3, #24
 8001a22:	f107 0208 	add.w	r2, r7, #8
 8001a26:	2302      	movs	r3, #2
 8001a28:	2136      	movs	r1, #54	; 0x36
 8001a2a:	f000 f8d1 	bl	8001bd0 <HTS221_ReadReg>
 8001a2e:	6278      	str	r0, [r7, #36]	; 0x24
    if(ret != HTS221_Ok)
 8001a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d001      	beq.n	8001a3a <HTS221_CalculateHumidity+0x52>
    {
    	return ret;
 8001a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a38:	e0c1      	b.n	8001bbe <HTS221_CalculateHumidity+0x1d6>
    }
    temp = (Buffer[1] << 8) + Buffer[0];
 8001a3a:	7a7b      	ldrb	r3, [r7, #9]
 8001a3c:	b29b      	uxth	r3, r3
 8001a3e:	021b      	lsls	r3, r3, #8
 8001a40:	b29a      	uxth	r2, r3
 8001a42:	7a3b      	ldrb	r3, [r7, #8]
 8001a44:	b29b      	uxth	r3, r3
 8001a46:	4413      	add	r3, r2
 8001a48:	b29b      	uxth	r3, r3
 8001a4a:	847b      	strh	r3, [r7, #34]	; 0x22
    H0_OUT = temp * 1.0f;
 8001a4c:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8001a50:	ee07 3a90 	vmov	s15, r3
 8001a54:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a58:	edc7 7a07 	vstr	s15, [r7, #28]

    //Fetch H1
    ret = HTS221_ReadReg(&Handle->Context, HTS221_REG_H1_T0_OUT, Buffer, 2);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	f103 0018 	add.w	r0, r3, #24
 8001a62:	f107 0208 	add.w	r2, r7, #8
 8001a66:	2302      	movs	r3, #2
 8001a68:	213a      	movs	r1, #58	; 0x3a
 8001a6a:	f000 f8b1 	bl	8001bd0 <HTS221_ReadReg>
 8001a6e:	6278      	str	r0, [r7, #36]	; 0x24
    if(ret != HTS221_Ok)
 8001a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d001      	beq.n	8001a7a <HTS221_CalculateHumidity+0x92>
    {
    	return ret;
 8001a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a78:	e0a1      	b.n	8001bbe <HTS221_CalculateHumidity+0x1d6>
    }
    temp = (Buffer[1] << 8) + Buffer[0];
 8001a7a:	7a7b      	ldrb	r3, [r7, #9]
 8001a7c:	b29b      	uxth	r3, r3
 8001a7e:	021b      	lsls	r3, r3, #8
 8001a80:	b29a      	uxth	r2, r3
 8001a82:	7a3b      	ldrb	r3, [r7, #8]
 8001a84:	b29b      	uxth	r3, r3
 8001a86:	4413      	add	r3, r2
 8001a88:	b29b      	uxth	r3, r3
 8001a8a:	847b      	strh	r3, [r7, #34]	; 0x22
    H1_OUT = temp * 1.0f;
 8001a8c:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8001a90:	ee07 3a90 	vmov	s15, r3
 8001a94:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a98:	edc7 7a06 	vstr	s15, [r7, #24]

    //Fetch H0_Rh
    ret = HTS221_ReadReg(&Handle->Context, HTS221_REG_H0_rH_x2, Buffer, 1);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	f103 0018 	add.w	r0, r3, #24
 8001aa2:	f107 0208 	add.w	r2, r7, #8
 8001aa6:	2301      	movs	r3, #1
 8001aa8:	2130      	movs	r1, #48	; 0x30
 8001aaa:	f000 f891 	bl	8001bd0 <HTS221_ReadReg>
 8001aae:	6278      	str	r0, [r7, #36]	; 0x24
    if(ret != HTS221_Ok)
 8001ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d001      	beq.n	8001aba <HTS221_CalculateHumidity+0xd2>
    {
    	return ret;
 8001ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ab8:	e081      	b.n	8001bbe <HTS221_CalculateHumidity+0x1d6>
    }
    H0_REL = Buffer[0] / 2.0f;
 8001aba:	7a3b      	ldrb	r3, [r7, #8]
 8001abc:	ee07 3a90 	vmov	s15, r3
 8001ac0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001ac4:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001ac8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001acc:	edc7 7a04 	vstr	s15, [r7, #16]

    //Fetch H0_Rh
    ret = HTS221_ReadReg(&Handle->Context, HTS221_REG_H1_rH_x2, Buffer, 1);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	f103 0018 	add.w	r0, r3, #24
 8001ad6:	f107 0208 	add.w	r2, r7, #8
 8001ada:	2301      	movs	r3, #1
 8001adc:	2131      	movs	r1, #49	; 0x31
 8001ade:	f000 f877 	bl	8001bd0 <HTS221_ReadReg>
 8001ae2:	6278      	str	r0, [r7, #36]	; 0x24
    if(ret != HTS221_Ok)
 8001ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d001      	beq.n	8001aee <HTS221_CalculateHumidity+0x106>
    {
    	return ret;
 8001aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aec:	e067      	b.n	8001bbe <HTS221_CalculateHumidity+0x1d6>
    }
    H1_REL = Buffer[0] / 2.0f;
 8001aee:	7a3b      	ldrb	r3, [r7, #8]
 8001af0:	ee07 3a90 	vmov	s15, r3
 8001af4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001af8:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001afc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001b00:	edc7 7a05 	vstr	s15, [r7, #20]

    //Fetch Measurement
    ret = HTS221_ReadReg(&Handle->Context, HTS221_REG_HUMIDITY_OUT_L, Buffer, 2);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	f103 0018 	add.w	r0, r3, #24
 8001b0a:	f107 0208 	add.w	r2, r7, #8
 8001b0e:	2302      	movs	r3, #2
 8001b10:	2128      	movs	r1, #40	; 0x28
 8001b12:	f000 f85d 	bl	8001bd0 <HTS221_ReadReg>
 8001b16:	6278      	str	r0, [r7, #36]	; 0x24
    if(ret != HTS221_Ok)
 8001b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d001      	beq.n	8001b22 <HTS221_CalculateHumidity+0x13a>
    {
    	return ret;
 8001b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b20:	e04d      	b.n	8001bbe <HTS221_CalculateHumidity+0x1d6>
    }
    temp = (Buffer[1] << 8) + Buffer[0];
 8001b22:	7a7b      	ldrb	r3, [r7, #9]
 8001b24:	b29b      	uxth	r3, r3
 8001b26:	021b      	lsls	r3, r3, #8
 8001b28:	b29a      	uxth	r2, r3
 8001b2a:	7a3b      	ldrb	r3, [r7, #8]
 8001b2c:	b29b      	uxth	r3, r3
 8001b2e:	4413      	add	r3, r2
 8001b30:	b29b      	uxth	r3, r3
 8001b32:	847b      	strh	r3, [r7, #34]	; 0x22
    result = (((H1_REL - H0_REL) * temp) + ((H1_OUT * H0_REL) - (H0_OUT * H1_REL))) / (H1_OUT - H0_OUT); //Linear Interpolation
 8001b34:	ed97 7a05 	vldr	s14, [r7, #20]
 8001b38:	edd7 7a04 	vldr	s15, [r7, #16]
 8001b3c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001b40:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8001b44:	ee07 3a90 	vmov	s15, r3
 8001b48:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b4c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b50:	edd7 6a06 	vldr	s13, [r7, #24]
 8001b54:	edd7 7a04 	vldr	s15, [r7, #16]
 8001b58:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001b5c:	ed97 6a07 	vldr	s12, [r7, #28]
 8001b60:	edd7 7a05 	vldr	s15, [r7, #20]
 8001b64:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001b68:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001b6c:	ee77 6a27 	vadd.f32	s13, s14, s15
 8001b70:	ed97 7a06 	vldr	s14, [r7, #24]
 8001b74:	edd7 7a07 	vldr	s15, [r7, #28]
 8001b78:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001b7c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001b80:	edc7 7a03 	vstr	s15, [r7, #12]
    if(result > 100.0)
 8001b84:	edd7 7a03 	vldr	s15, [r7, #12]
 8001b88:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8001bc8 <HTS221_CalculateHumidity+0x1e0>
 8001b8c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b94:	dd03      	ble.n	8001b9e <HTS221_CalculateHumidity+0x1b6>
    {
    	*humidity = 100.0;
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	4a0c      	ldr	r2, [pc, #48]	; (8001bcc <HTS221_CalculateHumidity+0x1e4>)
 8001b9a:	601a      	str	r2, [r3, #0]
 8001b9c:	e00e      	b.n	8001bbc <HTS221_CalculateHumidity+0x1d4>
    } else if (result < 0.0)
 8001b9e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001ba2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001ba6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001baa:	d504      	bpl.n	8001bb6 <HTS221_CalculateHumidity+0x1ce>
    {
    	*humidity = 0.0;
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	f04f 0200 	mov.w	r2, #0
 8001bb2:	601a      	str	r2, [r3, #0]
 8001bb4:	e002      	b.n	8001bbc <HTS221_CalculateHumidity+0x1d4>
    } else
    {
    	*humidity = result;
 8001bb6:	683b      	ldr	r3, [r7, #0]
 8001bb8:	68fa      	ldr	r2, [r7, #12]
 8001bba:	601a      	str	r2, [r3, #0]
    }

    return HTS221_Ok;
 8001bbc:	2300      	movs	r3, #0
}
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	3728      	adds	r7, #40	; 0x28
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bd80      	pop	{r7, pc}
 8001bc6:	bf00      	nop
 8001bc8:	42c80000 	.word	0x42c80000
 8001bcc:	42c80000 	.word	0x42c80000

08001bd0 <HTS221_ReadReg>:
#include "stddef.h"

static int32_t HTS221_ValidateParams(uint8_t Reg, uint8_t *Buffer, uint8_t Length);

int32_t HTS221_ReadReg(HTS221_Context_t *Context, uint8_t Reg, uint8_t *Buffer, uint8_t Length)
{
 8001bd0:	b590      	push	{r4, r7, lr}
 8001bd2:	b087      	sub	sp, #28
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	60f8      	str	r0, [r7, #12]
 8001bd8:	607a      	str	r2, [r7, #4]
 8001bda:	461a      	mov	r2, r3
 8001bdc:	460b      	mov	r3, r1
 8001bde:	72fb      	strb	r3, [r7, #11]
 8001be0:	4613      	mov	r3, r2
 8001be2:	72bb      	strb	r3, [r7, #10]
	int32_t ret = HTS221_ValidateParams(Reg,Buffer,Length);
 8001be4:	7aba      	ldrb	r2, [r7, #10]
 8001be6:	7afb      	ldrb	r3, [r7, #11]
 8001be8:	6879      	ldr	r1, [r7, #4]
 8001bea:	4618      	mov	r0, r3
 8001bec:	f000 f842 	bl	8001c74 <HTS221_ValidateParams>
 8001bf0:	6178      	str	r0, [r7, #20]
	if(ret != HTS221_REG_NO_ERR)
 8001bf2:	697b      	ldr	r3, [r7, #20]
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d001      	beq.n	8001bfc <HTS221_ReadReg+0x2c>
	{
        return ret;
 8001bf8:	697b      	ldr	r3, [r7, #20]
 8001bfa:	e00e      	b.n	8001c1a <HTS221_ReadReg+0x4a>
	}

    if(Context->Read != NULL)
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	685b      	ldr	r3, [r3, #4]
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d009      	beq.n	8001c18 <HTS221_ReadReg+0x48>
    {
        return Context->Read(Context->Handle, Reg, Buffer, Length);
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	685c      	ldr	r4, [r3, #4]
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	6818      	ldr	r0, [r3, #0]
 8001c0c:	7abb      	ldrb	r3, [r7, #10]
 8001c0e:	7af9      	ldrb	r1, [r7, #11]
 8001c10:	687a      	ldr	r2, [r7, #4]
 8001c12:	47a0      	blx	r4
 8001c14:	4603      	mov	r3, r0
 8001c16:	e000      	b.n	8001c1a <HTS221_ReadReg+0x4a>
    }

    return HTS221_REG_CONTEXT_ERR;
 8001c18:	2308      	movs	r3, #8
}
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	371c      	adds	r7, #28
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bd90      	pop	{r4, r7, pc}

08001c22 <HTS221_WriteReg>:

int32_t HTS221_WriteReg(HTS221_Context_t *Context,uint8_t Reg, uint8_t *Buffer, uint8_t Length)
{
 8001c22:	b590      	push	{r4, r7, lr}
 8001c24:	b087      	sub	sp, #28
 8001c26:	af00      	add	r7, sp, #0
 8001c28:	60f8      	str	r0, [r7, #12]
 8001c2a:	607a      	str	r2, [r7, #4]
 8001c2c:	461a      	mov	r2, r3
 8001c2e:	460b      	mov	r3, r1
 8001c30:	72fb      	strb	r3, [r7, #11]
 8001c32:	4613      	mov	r3, r2
 8001c34:	72bb      	strb	r3, [r7, #10]
	int32_t ret = HTS221_ValidateParams(Reg,Buffer,Length);
 8001c36:	7aba      	ldrb	r2, [r7, #10]
 8001c38:	7afb      	ldrb	r3, [r7, #11]
 8001c3a:	6879      	ldr	r1, [r7, #4]
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	f000 f819 	bl	8001c74 <HTS221_ValidateParams>
 8001c42:	6178      	str	r0, [r7, #20]
	if(ret != HTS221_REG_NO_ERR)
 8001c44:	697b      	ldr	r3, [r7, #20]
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d001      	beq.n	8001c4e <HTS221_WriteReg+0x2c>
	{
        return ret;
 8001c4a:	697b      	ldr	r3, [r7, #20]
 8001c4c:	e00e      	b.n	8001c6c <HTS221_WriteReg+0x4a>
	}

	if(Context->Write != NULL)
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	689b      	ldr	r3, [r3, #8]
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d009      	beq.n	8001c6a <HTS221_WriteReg+0x48>
	{
	    return Context->Write(Context->Handle, Reg, Buffer, Length);
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	689c      	ldr	r4, [r3, #8]
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	6818      	ldr	r0, [r3, #0]
 8001c5e:	7abb      	ldrb	r3, [r7, #10]
 8001c60:	7af9      	ldrb	r1, [r7, #11]
 8001c62:	687a      	ldr	r2, [r7, #4]
 8001c64:	47a0      	blx	r4
 8001c66:	4603      	mov	r3, r0
 8001c68:	e000      	b.n	8001c6c <HTS221_WriteReg+0x4a>
	}

	return HTS221_REG_CONTEXT_ERR;
 8001c6a:	2308      	movs	r3, #8
}
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	371c      	adds	r7, #28
 8001c70:	46bd      	mov	sp, r7
 8001c72:	bd90      	pop	{r4, r7, pc}

08001c74 <HTS221_ValidateParams>:

static int32_t HTS221_ValidateParams(uint8_t Reg, uint8_t *Buffer, uint8_t Length)
{
 8001c74:	b480      	push	{r7}
 8001c76:	b085      	sub	sp, #20
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	6039      	str	r1, [r7, #0]
 8001c7e:	71fb      	strb	r3, [r7, #7]
 8001c80:	4613      	mov	r3, r2
 8001c82:	71bb      	strb	r3, [r7, #6]
	uint32_t ret = 0;
 8001c84:	2300      	movs	r3, #0
 8001c86:	60fb      	str	r3, [r7, #12]

	if(Reg < HTS221_REG_WHO_AM_I || Reg > 0x3F)
 8001c88:	79fb      	ldrb	r3, [r7, #7]
 8001c8a:	2b0e      	cmp	r3, #14
 8001c8c:	d902      	bls.n	8001c94 <HTS221_ValidateParams+0x20>
 8001c8e:	79fb      	ldrb	r3, [r7, #7]
 8001c90:	2b3f      	cmp	r3, #63	; 0x3f
 8001c92:	d903      	bls.n	8001c9c <HTS221_ValidateParams+0x28>
	{
		 ret |= HTS221_REG_PARAM_ERR;
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	f043 0301 	orr.w	r3, r3, #1
 8001c9a:	60fb      	str	r3, [r7, #12]
	}

	if(Buffer == NULL)
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d103      	bne.n	8001caa <HTS221_ValidateParams+0x36>
	{
		ret |= HTS221_BUFFER_PARAM_ERR;
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	f043 0302 	orr.w	r3, r3, #2
 8001ca8:	60fb      	str	r3, [r7, #12]
	}

	if(Length == 0 || Length > (0x3F - HTS221_REG_WHO_AM_I))
 8001caa:	79bb      	ldrb	r3, [r7, #6]
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d002      	beq.n	8001cb6 <HTS221_ValidateParams+0x42>
 8001cb0:	79bb      	ldrb	r3, [r7, #6]
 8001cb2:	2b30      	cmp	r3, #48	; 0x30
 8001cb4:	d903      	bls.n	8001cbe <HTS221_ValidateParams+0x4a>
	{  //0x3F - 0x0F = 0x30 readable registers
        ret |= HTS221_LENGTH_PARAM_ERR;
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	f043 0304 	orr.w	r3, r3, #4
 8001cbc:	60fb      	str	r3, [r7, #12]
	}

	return ret;
 8001cbe:	68fb      	ldr	r3, [r7, #12]
}
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	3714      	adds	r7, #20
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cca:	4770      	bx	lr

08001ccc <IIS2MDC_Init>:
static void ConvertMagData(uint8_t *buffer, float *magnetism);
static void DeConvertMagData(float magnetism, uint8_t *buffer);


int32_t IIS2MDC_Init(IIS2MDC_Handle_t *Handle, IIS2MDC_InitStruct_t Settings, IIS2MDC_IO_t *IO)
{
 8001ccc:	b084      	sub	sp, #16
 8001cce:	b5b0      	push	{r4, r5, r7, lr}
 8001cd0:	b086      	sub	sp, #24
 8001cd2:	af02      	add	r7, sp, #8
 8001cd4:	6078      	str	r0, [r7, #4]
 8001cd6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8001cda:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    if(Handle->Status != IIS2MDC_Initialized)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001ce4:	2b01      	cmp	r3, #1
 8001ce6:	f000 809d 	beq.w	8001e24 <IIS2MDC_Init+0x158>
    {
        if(Handle == NULL)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d102      	bne.n	8001cf6 <IIS2MDC_Init+0x2a>
        {
            return IIS2MDC_HandleError;
 8001cf0:	f04f 33ff 	mov.w	r3, #4294967295
 8001cf4:	e097      	b.n	8001e26 <IIS2MDC_Init+0x15a>
        }

        if(IO->Read == NULL || IO->Write == NULL || IO->GetTick == NULL)
 8001cf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001cf8:	68db      	ldr	r3, [r3, #12]
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d007      	beq.n	8001d0e <IIS2MDC_Init+0x42>
 8001cfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d00:	689b      	ldr	r3, [r3, #8]
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d003      	beq.n	8001d0e <IIS2MDC_Init+0x42>
 8001d06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d08:	695b      	ldr	r3, [r3, #20]
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d102      	bne.n	8001d14 <IIS2MDC_Init+0x48>
        {
        	return IIS2MDC_IOError;
 8001d0e:	f06f 0301 	mvn.w	r3, #1
 8001d12:	e088      	b.n	8001e26 <IIS2MDC_Init+0x15a>
        }

        if(Settings.IntThreshold > 49150.5  || Settings.OffsetX > 49150.5 || Settings.OffsetY > 49150.5  || Settings.OffsetZ > 49150.5)
 8001d14:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001d18:	ed9f 7a46 	vldr	s14, [pc, #280]	; 8001e34 <IIS2MDC_Init+0x168>
 8001d1c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d24:	dc1a      	bgt.n	8001d5c <IIS2MDC_Init+0x90>
 8001d26:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001d2a:	ed9f 7a42 	vldr	s14, [pc, #264]	; 8001e34 <IIS2MDC_Init+0x168>
 8001d2e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d36:	dc11      	bgt.n	8001d5c <IIS2MDC_Init+0x90>
 8001d38:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001d3c:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 8001e34 <IIS2MDC_Init+0x168>
 8001d40:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d48:	dc08      	bgt.n	8001d5c <IIS2MDC_Init+0x90>
 8001d4a:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001d4e:	ed9f 7a39 	vldr	s14, [pc, #228]	; 8001e34 <IIS2MDC_Init+0x168>
 8001d52:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d5a:	dd02      	ble.n	8001d62 <IIS2MDC_Init+0x96>
        {
        	return IIS2MDC_FloatError;
 8001d5c:	f06f 0303 	mvn.w	r3, #3
 8001d60:	e061      	b.n	8001e26 <IIS2MDC_Init+0x15a>
        }

        if(Settings.IntThreshold < -49150.5 || Settings.OffsetX < -49150.5 || Settings.OffsetY < -49150.5  || Settings.OffsetZ < -49150.5)
 8001d62:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001d66:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8001e38 <IIS2MDC_Init+0x16c>
 8001d6a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d72:	d41a      	bmi.n	8001daa <IIS2MDC_Init+0xde>
 8001d74:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001d78:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8001e38 <IIS2MDC_Init+0x16c>
 8001d7c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d84:	d411      	bmi.n	8001daa <IIS2MDC_Init+0xde>
 8001d86:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001d8a:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8001e38 <IIS2MDC_Init+0x16c>
 8001d8e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d96:	d408      	bmi.n	8001daa <IIS2MDC_Init+0xde>
 8001d98:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001d9c:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8001e38 <IIS2MDC_Init+0x16c>
 8001da0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001da4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001da8:	d502      	bpl.n	8001db0 <IIS2MDC_Init+0xe4>
        {
        	return IIS2MDC_FloatError;
 8001daa:	f06f 0303 	mvn.w	r3, #3
 8001dae:	e03a      	b.n	8001e26 <IIS2MDC_Init+0x15a>
        }

        Handle->IO = *IO;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001db4:	f103 040c 	add.w	r4, r3, #12
 8001db8:	4615      	mov	r5, r2
 8001dba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001dbc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001dbe:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001dc2:	e884 0003 	stmia.w	r4, {r0, r1}
        Handle->Context.Handle = Handle;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	687a      	ldr	r2, [r7, #4]
 8001dca:	601a      	str	r2, [r3, #0]
        Handle->Context.Read = IIS2MDC_ReadRegWrapper;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	4a1b      	ldr	r2, [pc, #108]	; (8001e3c <IIS2MDC_Init+0x170>)
 8001dd0:	605a      	str	r2, [r3, #4]
        Handle->Context.Write = IIS2MDC_WriteRegWrapper;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	4a1a      	ldr	r2, [pc, #104]	; (8001e40 <IIS2MDC_Init+0x174>)
 8001dd6:	609a      	str	r2, [r3, #8]
        if((Settings.ConfigRegA & IIS2MDC_ODR_Msk) == IISM2MDC_ODR_OneShot)
 8001dd8:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001ddc:	f003 030f 	and.w	r3, r3, #15
 8001de0:	2b01      	cmp	r3, #1
 8001de2:	d104      	bne.n	8001dee <IIS2MDC_Init+0x122>
        {
        	Handle->DataMode = IIS2MDC_OneShotMode;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	2200      	movs	r2, #0
 8001de8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
 8001dec:	e003      	b.n	8001df6 <IIS2MDC_Init+0x12a>
        } else
        {
        	Handle->DataMode = IIS2MDC_Continuous;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	2201      	movs	r2, #1
 8001df2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
        }

        int32_t ret = IIS2MDC_RegisterInit(Handle, Settings);
 8001df6:	466a      	mov	r2, sp
 8001df8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001dfc:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001e00:	e882 0003 	stmia.w	r2, {r0, r1}
 8001e04:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e08:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001e0a:	6878      	ldr	r0, [r7, #4]
 8001e0c:	f000 f8d8 	bl	8001fc0 <IIS2MDC_RegisterInit>
 8001e10:	60f8      	str	r0, [r7, #12]
        if(ret != IIS2MDC_Ok)
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d001      	beq.n	8001e1c <IIS2MDC_Init+0x150>
        {
        	return ret;
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	e004      	b.n	8001e26 <IIS2MDC_Init+0x15a>
        }
        Handle->Status = IIS2MDC_Initialized;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	2201      	movs	r2, #1
 8001e20:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    }
    return IIS2MDC_Ok;
 8001e24:	2300      	movs	r3, #0
}
 8001e26:	4618      	mov	r0, r3
 8001e28:	3710      	adds	r7, #16
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8001e30:	b004      	add	sp, #16
 8001e32:	4770      	bx	lr
 8001e34:	473ffe80 	.word	0x473ffe80
 8001e38:	c73ffe80 	.word	0xc73ffe80
 8001e3c:	08001f85 	.word	0x08001f85
 8001e40:	08001f49 	.word	0x08001f49

08001e44 <IIS2MDC_ResetDevice>:

    return IIS2MDC_Ok;
}

int32_t IIS2MDC_ResetDevice(IIS2MDC_Handle_t *Handle)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b084      	sub	sp, #16
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
	int32_t ret = IIS2MDC_Ok;
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	60fb      	str	r3, [r7, #12]
	if(Handle == NULL)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d102      	bne.n	8001e5c <IIS2MDC_ResetDevice+0x18>
	{
		return IIS2MDC_HandleError;
 8001e56:	f04f 33ff 	mov.w	r3, #4294967295
 8001e5a:	e021      	b.n	8001ea0 <IIS2MDC_ResetDevice+0x5c>
	}

    if(Handle->IO.Write == NULL || Handle->IO.Read == NULL || Handle->IO.GetTick == NULL)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	695b      	ldr	r3, [r3, #20]
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d007      	beq.n	8001e74 <IIS2MDC_ResetDevice+0x30>
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	699b      	ldr	r3, [r3, #24]
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d003      	beq.n	8001e74 <IIS2MDC_ResetDevice+0x30>
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	6a1b      	ldr	r3, [r3, #32]
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d102      	bne.n	8001e7a <IIS2MDC_ResetDevice+0x36>
    {
    	return IIS2MDC_IOError;
 8001e74:	f06f 0301 	mvn.w	r3, #1
 8001e78:	e012      	b.n	8001ea0 <IIS2MDC_ResetDevice+0x5c>
    }

	ret = IIS2MDC_Reboot(Handle);
 8001e7a:	6878      	ldr	r0, [r7, #4]
 8001e7c:	f000 f98b 	bl	8002196 <IIS2MDC_Reboot>
 8001e80:	60f8      	str	r0, [r7, #12]
	if(ret != IIS2MDC_Ok)
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d001      	beq.n	8001e8c <IIS2MDC_ResetDevice+0x48>
	{
		return ret;
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	e009      	b.n	8001ea0 <IIS2MDC_ResetDevice+0x5c>
	}


	ret = IIS2MDC_SWReset(Handle);
 8001e8c:	6878      	ldr	r0, [r7, #4]
 8001e8e:	f000 f94b 	bl	8002128 <IIS2MDC_SWReset>
 8001e92:	60f8      	str	r0, [r7, #12]
	if(ret != IIS2MDC_Ok)
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d001      	beq.n	8001e9e <IIS2MDC_ResetDevice+0x5a>
	{
		return ret;
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	e000      	b.n	8001ea0 <IIS2MDC_ResetDevice+0x5c>
	}

	return IIS2MDC_Ok;
 8001e9e:	2300      	movs	r3, #0
}
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	3710      	adds	r7, #16
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	bd80      	pop	{r7, pc}

08001ea8 <IIS2MDC_ReadMagnetismXYZ>:
	}
	return IIS2MDC_Ok;
}

int32_t IIS2MDC_ReadMagnetismXYZ(IIS2MDC_Handle_t *Handle, float *Mx, float *My, float *Mz)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b088      	sub	sp, #32
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	60f8      	str	r0, [r7, #12]
 8001eb0:	60b9      	str	r1, [r7, #8]
 8001eb2:	607a      	str	r2, [r7, #4]
 8001eb4:	603b      	str	r3, [r7, #0]
	if(Handle->Status != IIS2MDC_Initialized)
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001ebc:	2b01      	cmp	r3, #1
 8001ebe:	d002      	beq.n	8001ec6 <IIS2MDC_ReadMagnetismXYZ+0x1e>
	{
		return IIS2MDC_InitError;
 8001ec0:	f06f 0302 	mvn.w	r3, #2
 8001ec4:	e03c      	b.n	8001f40 <IIS2MDC_ReadMagnetismXYZ+0x98>
	}

	uint8_t Buffer[6] = {0};
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	617b      	str	r3, [r7, #20]
 8001eca:	2300      	movs	r3, #0
 8001ecc:	833b      	strh	r3, [r7, #24]
	uint32_t ret = IIS2MDC_ReadReg(&Handle->Context, IIS2MDC_REG_STATUS_REG, Buffer, 1);
 8001ece:	68f8      	ldr	r0, [r7, #12]
 8001ed0:	f107 0214 	add.w	r2, r7, #20
 8001ed4:	2301      	movs	r3, #1
 8001ed6:	2167      	movs	r1, #103	; 0x67
 8001ed8:	f000 fa09 	bl	80022ee <IIS2MDC_ReadReg>
 8001edc:	4603      	mov	r3, r0
 8001ede:	61fb      	str	r3, [r7, #28]
	if(ret != IIS2MDC_Ok)
 8001ee0:	69fb      	ldr	r3, [r7, #28]
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d001      	beq.n	8001eea <IIS2MDC_ReadMagnetismXYZ+0x42>
	{
		return ret;
 8001ee6:	69fb      	ldr	r3, [r7, #28]
 8001ee8:	e02a      	b.n	8001f40 <IIS2MDC_ReadMagnetismXYZ+0x98>
	}
	if(Buffer[0] & (IIS2MDC_XDATA_Msk | IIS2MDC_YDATA_Msk | IIS2MDC_ZDATA_Msk))
 8001eea:	7d3b      	ldrb	r3, [r7, #20]
 8001eec:	f003 0307 	and.w	r3, r3, #7
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d023      	beq.n	8001f3c <IIS2MDC_ReadMagnetismXYZ+0x94>
	{
		ret = IIS2MDC_ReadReg(&Handle->Context, IIS2MDC_REG_OUTX_L_REG, Buffer, 6);
 8001ef4:	68f8      	ldr	r0, [r7, #12]
 8001ef6:	f107 0214 	add.w	r2, r7, #20
 8001efa:	2306      	movs	r3, #6
 8001efc:	2168      	movs	r1, #104	; 0x68
 8001efe:	f000 f9f6 	bl	80022ee <IIS2MDC_ReadReg>
 8001f02:	4603      	mov	r3, r0
 8001f04:	61fb      	str	r3, [r7, #28]
		if(ret != IIS2MDC_Ok)
 8001f06:	69fb      	ldr	r3, [r7, #28]
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d001      	beq.n	8001f10 <IIS2MDC_ReadMagnetismXYZ+0x68>
		{
			return ret;
 8001f0c:	69fb      	ldr	r3, [r7, #28]
 8001f0e:	e017      	b.n	8001f40 <IIS2MDC_ReadMagnetismXYZ+0x98>
		}
		ConvertMagData(Buffer, Mx);
 8001f10:	f107 0314 	add.w	r3, r7, #20
 8001f14:	68b9      	ldr	r1, [r7, #8]
 8001f16:	4618      	mov	r0, r3
 8001f18:	f000 f965 	bl	80021e6 <ConvertMagData>
		ConvertMagData(&Buffer[2], My);
 8001f1c:	f107 0314 	add.w	r3, r7, #20
 8001f20:	3302      	adds	r3, #2
 8001f22:	6879      	ldr	r1, [r7, #4]
 8001f24:	4618      	mov	r0, r3
 8001f26:	f000 f95e 	bl	80021e6 <ConvertMagData>
		ConvertMagData(&Buffer[4], Mz);
 8001f2a:	f107 0314 	add.w	r3, r7, #20
 8001f2e:	3304      	adds	r3, #4
 8001f30:	6839      	ldr	r1, [r7, #0]
 8001f32:	4618      	mov	r0, r3
 8001f34:	f000 f957 	bl	80021e6 <ConvertMagData>
		return IIS2MDC_DataReady;
 8001f38:	2300      	movs	r3, #0
 8001f3a:	e001      	b.n	8001f40 <IIS2MDC_ReadMagnetismXYZ+0x98>
	}
	return IIS2MDC_DataNotReady;
 8001f3c:	f64b 63ef 	movw	r3, #48879	; 0xbeef
}
 8001f40:	4618      	mov	r0, r3
 8001f42:	3720      	adds	r7, #32
 8001f44:	46bd      	mov	sp, r7
 8001f46:	bd80      	pop	{r7, pc}

08001f48 <IIS2MDC_WriteRegWrapper>:
	return IIS2MDC_DataNotReady;
}


static int32_t IIS2MDC_WriteRegWrapper(void *Handle,uint8_t Reg, uint8_t *Buffer, uint8_t Length)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b086      	sub	sp, #24
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	60f8      	str	r0, [r7, #12]
 8001f50:	607a      	str	r2, [r7, #4]
 8001f52:	461a      	mov	r2, r3
 8001f54:	460b      	mov	r3, r1
 8001f56:	72fb      	strb	r3, [r7, #11]
 8001f58:	4613      	mov	r3, r2
 8001f5a:	72bb      	strb	r3, [r7, #10]
	IIS2MDC_Handle_t *Dev= Handle;
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	617b      	str	r3, [r7, #20]
	if(Dev->IO.Write != NULL)
 8001f60:	697b      	ldr	r3, [r7, #20]
 8001f62:	695b      	ldr	r3, [r3, #20]
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d007      	beq.n	8001f78 <IIS2MDC_WriteRegWrapper+0x30>
	{
		return Dev->IO.Write(Reg,Buffer,Length);
 8001f68:	697b      	ldr	r3, [r7, #20]
 8001f6a:	695b      	ldr	r3, [r3, #20]
 8001f6c:	7aba      	ldrb	r2, [r7, #10]
 8001f6e:	7af8      	ldrb	r0, [r7, #11]
 8001f70:	6879      	ldr	r1, [r7, #4]
 8001f72:	4798      	blx	r3
 8001f74:	4603      	mov	r3, r0
 8001f76:	e001      	b.n	8001f7c <IIS2MDC_WriteRegWrapper+0x34>
	}
    return IIS2MDC_IOError;
 8001f78:	f06f 0301 	mvn.w	r3, #1
}
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	3718      	adds	r7, #24
 8001f80:	46bd      	mov	sp, r7
 8001f82:	bd80      	pop	{r7, pc}

08001f84 <IIS2MDC_ReadRegWrapper>:

static int32_t IIS2MDC_ReadRegWrapper(void *Handle,uint8_t Reg, uint8_t *Buffer, uint8_t Length)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b086      	sub	sp, #24
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	60f8      	str	r0, [r7, #12]
 8001f8c:	607a      	str	r2, [r7, #4]
 8001f8e:	461a      	mov	r2, r3
 8001f90:	460b      	mov	r3, r1
 8001f92:	72fb      	strb	r3, [r7, #11]
 8001f94:	4613      	mov	r3, r2
 8001f96:	72bb      	strb	r3, [r7, #10]
	IIS2MDC_Handle_t *Dev= Handle;
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	617b      	str	r3, [r7, #20]
	if(Dev->IO.Read != NULL)
 8001f9c:	697b      	ldr	r3, [r7, #20]
 8001f9e:	699b      	ldr	r3, [r3, #24]
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d007      	beq.n	8001fb4 <IIS2MDC_ReadRegWrapper+0x30>
	{
		return Dev->IO.Read(Reg,Buffer,Length);
 8001fa4:	697b      	ldr	r3, [r7, #20]
 8001fa6:	699b      	ldr	r3, [r3, #24]
 8001fa8:	7aba      	ldrb	r2, [r7, #10]
 8001faa:	7af8      	ldrb	r0, [r7, #11]
 8001fac:	6879      	ldr	r1, [r7, #4]
 8001fae:	4798      	blx	r3
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	e001      	b.n	8001fb8 <IIS2MDC_ReadRegWrapper+0x34>
	}
    return IIS2MDC_IOError;
 8001fb4:	f06f 0301 	mvn.w	r3, #1
}
 8001fb8:	4618      	mov	r0, r3
 8001fba:	3718      	adds	r7, #24
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	bd80      	pop	{r7, pc}

08001fc0 <IIS2MDC_RegisterInit>:

static int32_t IIS2MDC_RegisterInit(IIS2MDC_Handle_t *Handle, IIS2MDC_InitStruct_t Settings)
{
 8001fc0:	b084      	sub	sp, #16
 8001fc2:	b580      	push	{r7, lr}
 8001fc4:	b084      	sub	sp, #16
 8001fc6:	af00      	add	r7, sp, #0
 8001fc8:	6078      	str	r0, [r7, #4]
 8001fca:	f107 001c 	add.w	r0, r7, #28
 8001fce:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	int32_t ret = IIS2MDC_ResetDevice(Handle);
 8001fd2:	6878      	ldr	r0, [r7, #4]
 8001fd4:	f7ff ff36 	bl	8001e44 <IIS2MDC_ResetDevice>
 8001fd8:	60f8      	str	r0, [r7, #12]
	if(ret != IIS2MDC_Ok)
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d001      	beq.n	8001fe4 <IIS2MDC_RegisterInit+0x24>
	{
		return ret;
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	e09a      	b.n	800211a <IIS2MDC_RegisterInit+0x15a>
	}

	uint8_t Buffer[2] = {0};
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	813b      	strh	r3, [r7, #8]

	DeConvertMagData(Settings.IntThreshold, Buffer);
 8001fe8:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001fec:	f107 0308 	add.w	r3, r7, #8
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	eeb0 0a67 	vmov.f32	s0, s15
 8001ff6:	f000 f91a 	bl	800222e <DeConvertMagData>
	ret = IIS2MDC_WriteReg(&Handle->Context,IIS2MDC_REG_INT_THS_H_REG,Buffer,2);
 8001ffa:	6878      	ldr	r0, [r7, #4]
 8001ffc:	f107 0208 	add.w	r2, r7, #8
 8002000:	2302      	movs	r3, #2
 8002002:	2166      	movs	r1, #102	; 0x66
 8002004:	f000 f997 	bl	8002336 <IIS2MDC_WriteReg>
 8002008:	60f8      	str	r0, [r7, #12]
	if(ret != IIS2MDC_Ok)
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	2b00      	cmp	r3, #0
 800200e:	d001      	beq.n	8002014 <IIS2MDC_RegisterInit+0x54>
	{
		return ret;
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	e082      	b.n	800211a <IIS2MDC_RegisterInit+0x15a>
	}


	DeConvertMagData(Settings.OffsetX, Buffer);
 8002014:	edd7 7a07 	vldr	s15, [r7, #28]
 8002018:	f107 0308 	add.w	r3, r7, #8
 800201c:	4618      	mov	r0, r3
 800201e:	eeb0 0a67 	vmov.f32	s0, s15
 8002022:	f000 f904 	bl	800222e <DeConvertMagData>
	ret = IIS2MDC_WriteReg(&Handle->Context,IIS2MDC_REG_OFFSET_X_REG_L,Buffer,2);
 8002026:	6878      	ldr	r0, [r7, #4]
 8002028:	f107 0208 	add.w	r2, r7, #8
 800202c:	2302      	movs	r3, #2
 800202e:	2145      	movs	r1, #69	; 0x45
 8002030:	f000 f981 	bl	8002336 <IIS2MDC_WriteReg>
 8002034:	60f8      	str	r0, [r7, #12]
	if(ret != IIS2MDC_Ok)
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	2b00      	cmp	r3, #0
 800203a:	d001      	beq.n	8002040 <IIS2MDC_RegisterInit+0x80>
	{
		return ret;
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	e06c      	b.n	800211a <IIS2MDC_RegisterInit+0x15a>
	}

	DeConvertMagData(Settings.OffsetY, Buffer);
 8002040:	edd7 7a08 	vldr	s15, [r7, #32]
 8002044:	f107 0308 	add.w	r3, r7, #8
 8002048:	4618      	mov	r0, r3
 800204a:	eeb0 0a67 	vmov.f32	s0, s15
 800204e:	f000 f8ee 	bl	800222e <DeConvertMagData>
	ret = IIS2MDC_WriteReg(&Handle->Context,IIS2MDC_REG_OFFSET_Y_REG_L,Buffer,2);
 8002052:	6878      	ldr	r0, [r7, #4]
 8002054:	f107 0208 	add.w	r2, r7, #8
 8002058:	2302      	movs	r3, #2
 800205a:	2147      	movs	r1, #71	; 0x47
 800205c:	f000 f96b 	bl	8002336 <IIS2MDC_WriteReg>
 8002060:	60f8      	str	r0, [r7, #12]
	if(ret != IIS2MDC_Ok)
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	2b00      	cmp	r3, #0
 8002066:	d001      	beq.n	800206c <IIS2MDC_RegisterInit+0xac>
	{
		return ret;
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	e056      	b.n	800211a <IIS2MDC_RegisterInit+0x15a>
	}

	DeConvertMagData(Settings.OffsetZ, Buffer);
 800206c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002070:	f107 0308 	add.w	r3, r7, #8
 8002074:	4618      	mov	r0, r3
 8002076:	eeb0 0a67 	vmov.f32	s0, s15
 800207a:	f000 f8d8 	bl	800222e <DeConvertMagData>
	ret = IIS2MDC_WriteReg(&Handle->Context,IIS2MDC_REG_OFFSET_Z_REG_L,Buffer,2);
 800207e:	6878      	ldr	r0, [r7, #4]
 8002080:	f107 0208 	add.w	r2, r7, #8
 8002084:	2302      	movs	r3, #2
 8002086:	2149      	movs	r1, #73	; 0x49
 8002088:	f000 f955 	bl	8002336 <IIS2MDC_WriteReg>
 800208c:	60f8      	str	r0, [r7, #12]
	if(ret != IIS2MDC_Ok)
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	2b00      	cmp	r3, #0
 8002092:	d001      	beq.n	8002098 <IIS2MDC_RegisterInit+0xd8>
	{
		return ret;
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	e040      	b.n	800211a <IIS2MDC_RegisterInit+0x15a>
	}

	Buffer[0] = Settings.ConfigRegA;
 8002098:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800209c:	723b      	strb	r3, [r7, #8]
	ret = IIS2MDC_WriteReg(&Handle->Context,IIS2MDC_REG_CFG_REG_A,Buffer,1);
 800209e:	6878      	ldr	r0, [r7, #4]
 80020a0:	f107 0208 	add.w	r2, r7, #8
 80020a4:	2301      	movs	r3, #1
 80020a6:	2160      	movs	r1, #96	; 0x60
 80020a8:	f000 f945 	bl	8002336 <IIS2MDC_WriteReg>
 80020ac:	60f8      	str	r0, [r7, #12]
	if(ret != IIS2MDC_Ok)
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d001      	beq.n	80020b8 <IIS2MDC_RegisterInit+0xf8>
	{
		return ret;
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	e030      	b.n	800211a <IIS2MDC_RegisterInit+0x15a>
	}

	Buffer[0] = Settings.ConfigRegB;
 80020b8:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 80020bc:	723b      	strb	r3, [r7, #8]
	ret = IIS2MDC_WriteReg(&Handle->Context,IIS2MDC_REG_CFG_REG_B,Buffer,1);
 80020be:	6878      	ldr	r0, [r7, #4]
 80020c0:	f107 0208 	add.w	r2, r7, #8
 80020c4:	2301      	movs	r3, #1
 80020c6:	2161      	movs	r1, #97	; 0x61
 80020c8:	f000 f935 	bl	8002336 <IIS2MDC_WriteReg>
 80020cc:	60f8      	str	r0, [r7, #12]
	if(ret != IIS2MDC_Ok)
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d001      	beq.n	80020d8 <IIS2MDC_RegisterInit+0x118>
	{
		return ret;
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	e020      	b.n	800211a <IIS2MDC_RegisterInit+0x15a>
	}

	Buffer[0] = Settings.ConfigRegC;
 80020d8:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80020dc:	723b      	strb	r3, [r7, #8]
	ret = IIS2MDC_WriteReg(&Handle->Context,IIS2MDC_REG_CFG_REG_C,Buffer,1);
 80020de:	6878      	ldr	r0, [r7, #4]
 80020e0:	f107 0208 	add.w	r2, r7, #8
 80020e4:	2301      	movs	r3, #1
 80020e6:	2162      	movs	r1, #98	; 0x62
 80020e8:	f000 f925 	bl	8002336 <IIS2MDC_WriteReg>
 80020ec:	60f8      	str	r0, [r7, #12]
	if(ret != IIS2MDC_Ok)
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d001      	beq.n	80020f8 <IIS2MDC_RegisterInit+0x138>
	{
		return ret;
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	e010      	b.n	800211a <IIS2MDC_RegisterInit+0x15a>
	}

	Buffer[0] = Settings.IntCtrlReg;
 80020f8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80020fc:	723b      	strb	r3, [r7, #8]
	ret = IIS2MDC_WriteReg(&Handle->Context,IIS2MDC_REG_INT_CTRL_REG,Buffer,1);
 80020fe:	6878      	ldr	r0, [r7, #4]
 8002100:	f107 0208 	add.w	r2, r7, #8
 8002104:	2301      	movs	r3, #1
 8002106:	2163      	movs	r1, #99	; 0x63
 8002108:	f000 f915 	bl	8002336 <IIS2MDC_WriteReg>
 800210c:	60f8      	str	r0, [r7, #12]
	if(ret != IIS2MDC_Ok)
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	2b00      	cmp	r3, #0
 8002112:	d001      	beq.n	8002118 <IIS2MDC_RegisterInit+0x158>
	{
		return ret;
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	e000      	b.n	800211a <IIS2MDC_RegisterInit+0x15a>
	}

    return IIS2MDC_Ok;
 8002118:	2300      	movs	r3, #0
}
 800211a:	4618      	mov	r0, r3
 800211c:	3710      	adds	r7, #16
 800211e:	46bd      	mov	sp, r7
 8002120:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002124:	b004      	add	sp, #16
 8002126:	4770      	bx	lr

08002128 <IIS2MDC_SWReset>:

static int32_t IIS2MDC_SWReset(IIS2MDC_Handle_t *Handle)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b086      	sub	sp, #24
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
    int32_t ret = 0;
 8002130:	2300      	movs	r3, #0
 8002132:	617b      	str	r3, [r7, #20]
    uint8_t Buffer = IIS2MDC_ResetSignal;
 8002134:	2320      	movs	r3, #32
 8002136:	73fb      	strb	r3, [r7, #15]
    ret = IIS2MDC_WriteReg(&Handle->Context, IIS2MDC_REG_CFG_REG_A, &Buffer, 1);
 8002138:	6878      	ldr	r0, [r7, #4]
 800213a:	f107 020f 	add.w	r2, r7, #15
 800213e:	2301      	movs	r3, #1
 8002140:	2160      	movs	r1, #96	; 0x60
 8002142:	f000 f8f8 	bl	8002336 <IIS2MDC_WriteReg>
 8002146:	6178      	str	r0, [r7, #20]
    if(ret != IIS2MDC_Ok)
 8002148:	697b      	ldr	r3, [r7, #20]
 800214a:	2b00      	cmp	r3, #0
 800214c:	d001      	beq.n	8002152 <IIS2MDC_SWReset+0x2a>
    {
    	return ret;
 800214e:	697b      	ldr	r3, [r7, #20]
 8002150:	e01d      	b.n	800218e <IIS2MDC_SWReset+0x66>
    }

    uint32_t timeout = Handle->IO.GetTick();
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	6a1b      	ldr	r3, [r3, #32]
 8002156:	4798      	blx	r3
 8002158:	6138      	str	r0, [r7, #16]
    while(Buffer & IIS2MDC_ResetSignal)
 800215a:	e012      	b.n	8002182 <IIS2MDC_SWReset+0x5a>
    {
        ret = IIS2MDC_ReadReg(&Handle->Context, IIS2MDC_REG_CFG_REG_A, &Buffer, 1);
 800215c:	6878      	ldr	r0, [r7, #4]
 800215e:	f107 020f 	add.w	r2, r7, #15
 8002162:	2301      	movs	r3, #1
 8002164:	2160      	movs	r1, #96	; 0x60
 8002166:	f000 f8c2 	bl	80022ee <IIS2MDC_ReadReg>
 800216a:	6178      	str	r0, [r7, #20]
        if(Handle->IO.GetTick() > timeout + 100)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	6a1b      	ldr	r3, [r3, #32]
 8002170:	4798      	blx	r3
 8002172:	4602      	mov	r2, r0
 8002174:	693b      	ldr	r3, [r7, #16]
 8002176:	3364      	adds	r3, #100	; 0x64
 8002178:	429a      	cmp	r2, r3
 800217a:	d902      	bls.n	8002182 <IIS2MDC_SWReset+0x5a>
        {
        	return IIS2MDC_Timeout;
 800217c:	f06f 0305 	mvn.w	r3, #5
 8002180:	e005      	b.n	800218e <IIS2MDC_SWReset+0x66>
    while(Buffer & IIS2MDC_ResetSignal)
 8002182:	7bfb      	ldrb	r3, [r7, #15]
 8002184:	f003 0320 	and.w	r3, r3, #32
 8002188:	2b00      	cmp	r3, #0
 800218a:	d1e7      	bne.n	800215c <IIS2MDC_SWReset+0x34>
        }
    }
    return IIS2MDC_Ok;
 800218c:	2300      	movs	r3, #0
}
 800218e:	4618      	mov	r0, r3
 8002190:	3718      	adds	r7, #24
 8002192:	46bd      	mov	sp, r7
 8002194:	bd80      	pop	{r7, pc}

08002196 <IIS2MDC_Reboot>:

static int32_t IIS2MDC_Reboot(IIS2MDC_Handle_t *Handle)
{
 8002196:	b590      	push	{r4, r7, lr}
 8002198:	b087      	sub	sp, #28
 800219a:	af00      	add	r7, sp, #0
 800219c:	6078      	str	r0, [r7, #4]
    int32_t ret = 0;
 800219e:	2300      	movs	r3, #0
 80021a0:	617b      	str	r3, [r7, #20]
    uint8_t Buffer = IIS2MDC_RebootSignal;
 80021a2:	2340      	movs	r3, #64	; 0x40
 80021a4:	73fb      	strb	r3, [r7, #15]
    ret = IIS2MDC_WriteReg(&Handle->Context, IIS2MDC_REG_CFG_REG_A, &Buffer, 1);
 80021a6:	6878      	ldr	r0, [r7, #4]
 80021a8:	f107 020f 	add.w	r2, r7, #15
 80021ac:	2301      	movs	r3, #1
 80021ae:	2160      	movs	r1, #96	; 0x60
 80021b0:	f000 f8c1 	bl	8002336 <IIS2MDC_WriteReg>
 80021b4:	6178      	str	r0, [r7, #20]
    if(ret != IIS2MDC_Ok)
 80021b6:	697b      	ldr	r3, [r7, #20]
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d001      	beq.n	80021c0 <IIS2MDC_Reboot+0x2a>
    {
    	return ret;
 80021bc:	697b      	ldr	r3, [r7, #20]
 80021be:	e00e      	b.n	80021de <IIS2MDC_Reboot+0x48>
    }
    uint32_t timeout = Handle->IO.GetTick();
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	6a1b      	ldr	r3, [r3, #32]
 80021c4:	4798      	blx	r3
 80021c6:	6138      	str	r0, [r7, #16]
    while((timeout + 20) > Handle->IO.GetTick()); //Delay 20ms
 80021c8:	bf00      	nop
 80021ca:	693b      	ldr	r3, [r7, #16]
 80021cc:	f103 0414 	add.w	r4, r3, #20
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6a1b      	ldr	r3, [r3, #32]
 80021d4:	4798      	blx	r3
 80021d6:	4603      	mov	r3, r0
 80021d8:	429c      	cmp	r4, r3
 80021da:	d8f6      	bhi.n	80021ca <IIS2MDC_Reboot+0x34>
    return IIS2MDC_Ok;
 80021dc:	2300      	movs	r3, #0
}
 80021de:	4618      	mov	r0, r3
 80021e0:	371c      	adds	r7, #28
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bd90      	pop	{r4, r7, pc}

080021e6 <ConvertMagData>:

static void ConvertMagData(uint8_t *buffer, float *magnetism)
{
 80021e6:	b480      	push	{r7}
 80021e8:	b085      	sub	sp, #20
 80021ea:	af00      	add	r7, sp, #0
 80021ec:	6078      	str	r0, [r7, #4]
 80021ee:	6039      	str	r1, [r7, #0]
	int16_t result = (buffer[1] * 256) + buffer[0];
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	3301      	adds	r3, #1
 80021f4:	781b      	ldrb	r3, [r3, #0]
 80021f6:	b29b      	uxth	r3, r3
 80021f8:	021b      	lsls	r3, r3, #8
 80021fa:	b29a      	uxth	r2, r3
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	781b      	ldrb	r3, [r3, #0]
 8002200:	b29b      	uxth	r3, r3
 8002202:	4413      	add	r3, r2
 8002204:	b29b      	uxth	r3, r3
 8002206:	81fb      	strh	r3, [r7, #14]
	*magnetism = result * 1.5f;
 8002208:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800220c:	ee07 3a90 	vmov	s15, r3
 8002210:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002214:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8002218:	ee67 7a87 	vmul.f32	s15, s15, s14
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	edc3 7a00 	vstr	s15, [r3]
}
 8002222:	bf00      	nop
 8002224:	3714      	adds	r7, #20
 8002226:	46bd      	mov	sp, r7
 8002228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222c:	4770      	bx	lr

0800222e <DeConvertMagData>:

static void DeConvertMagData(float magnetism, uint8_t *buffer)
{
 800222e:	b480      	push	{r7}
 8002230:	b085      	sub	sp, #20
 8002232:	af00      	add	r7, sp, #0
 8002234:	ed87 0a01 	vstr	s0, [r7, #4]
 8002238:	6038      	str	r0, [r7, #0]
    int16_t result = magnetism / 1.5f;
 800223a:	ed97 7a01 	vldr	s14, [r7, #4]
 800223e:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8002242:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002246:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800224a:	ee17 3a90 	vmov	r3, s15
 800224e:	81fb      	strh	r3, [r7, #14]
    buffer[1] = (result & 0xFF00) >> 8;
 8002250:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002254:	121a      	asrs	r2, r3, #8
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	3301      	adds	r3, #1
 800225a:	b2d2      	uxtb	r2, r2
 800225c:	701a      	strb	r2, [r3, #0]
    buffer[0] = result & 0x00FF;
 800225e:	89fb      	ldrh	r3, [r7, #14]
 8002260:	b2da      	uxtb	r2, r3
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	701a      	strb	r2, [r3, #0]
}
 8002266:	bf00      	nop
 8002268:	3714      	adds	r7, #20
 800226a:	46bd      	mov	sp, r7
 800226c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002270:	4770      	bx	lr

08002272 <IIS2MDC_ValidateParams>:

#include "IIS2MDC_Registers.h"
#include <stddef.h>

static int32_t IIS2MDC_ValidateParams(IIS2MDC_Context_t *Context, uint8_t Reg, uint8_t *Buffer, uint8_t Length)
{
 8002272:	b480      	push	{r7}
 8002274:	b087      	sub	sp, #28
 8002276:	af00      	add	r7, sp, #0
 8002278:	60f8      	str	r0, [r7, #12]
 800227a:	607a      	str	r2, [r7, #4]
 800227c:	461a      	mov	r2, r3
 800227e:	460b      	mov	r3, r1
 8002280:	72fb      	strb	r3, [r7, #11]
 8002282:	4613      	mov	r3, r2
 8002284:	72bb      	strb	r3, [r7, #10]
	int32_t ret = IIS2MDC_REG_OK;
 8002286:	2300      	movs	r3, #0
 8002288:	617b      	str	r3, [r7, #20]
    if(Context == NULL || Context->Read == NULL || Context->Write == NULL || Context->Handle == NULL)
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	2b00      	cmp	r3, #0
 800228e:	d00b      	beq.n	80022a8 <IIS2MDC_ValidateParams+0x36>
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	685b      	ldr	r3, [r3, #4]
 8002294:	2b00      	cmp	r3, #0
 8002296:	d007      	beq.n	80022a8 <IIS2MDC_ValidateParams+0x36>
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	689b      	ldr	r3, [r3, #8]
 800229c:	2b00      	cmp	r3, #0
 800229e:	d003      	beq.n	80022a8 <IIS2MDC_ValidateParams+0x36>
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d103      	bne.n	80022b0 <IIS2MDC_ValidateParams+0x3e>
    {
    	ret |= IIS2MDC_REG_CONTEXT_ERR;
 80022a8:	697b      	ldr	r3, [r7, #20]
 80022aa:	f043 4308 	orr.w	r3, r3, #2281701376	; 0x88000000
 80022ae:	617b      	str	r3, [r7, #20]
    }

    if(Reg < IIS2MDC_REG_OFFSET_X_REG_L || Reg > IIS2MDC_REG_TEMP_OUT_H_REG)
 80022b0:	7afb      	ldrb	r3, [r7, #11]
 80022b2:	2b44      	cmp	r3, #68	; 0x44
 80022b4:	d902      	bls.n	80022bc <IIS2MDC_ValidateParams+0x4a>
 80022b6:	7afb      	ldrb	r3, [r7, #11]
 80022b8:	2b6f      	cmp	r3, #111	; 0x6f
 80022ba:	d903      	bls.n	80022c4 <IIS2MDC_ValidateParams+0x52>
    {
    	ret |= IIS2MDC_REG_ADDR_ERR;
 80022bc:	697b      	ldr	r3, [r7, #20]
 80022be:	f043 4310 	orr.w	r3, r3, #2415919104	; 0x90000000
 80022c2:	617b      	str	r3, [r7, #20]
    }

    if(Buffer == NULL)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d103      	bne.n	80022d2 <IIS2MDC_ValidateParams+0x60>
    {
    	ret |= IIS2MDC_REG_BUFFER_ERR;
 80022ca:	697b      	ldr	r3, [r7, #20]
 80022cc:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80022d0:	617b      	str	r3, [r7, #20]
    }

    if(Length == 0)
 80022d2:	7abb      	ldrb	r3, [r7, #10]
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d103      	bne.n	80022e0 <IIS2MDC_ValidateParams+0x6e>
    {
       ret |= IIS2MDC_REG_LENGTH_ERR;
 80022d8:	697b      	ldr	r3, [r7, #20]
 80022da:	f043 4320 	orr.w	r3, r3, #2684354560	; 0xa0000000
 80022de:	617b      	str	r3, [r7, #20]
    }

    return ret;
 80022e0:	697b      	ldr	r3, [r7, #20]

}
 80022e2:	4618      	mov	r0, r3
 80022e4:	371c      	adds	r7, #28
 80022e6:	46bd      	mov	sp, r7
 80022e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ec:	4770      	bx	lr

080022ee <IIS2MDC_ReadReg>:

int32_t IIS2MDC_ReadReg(IIS2MDC_Context_t *Context, uint8_t Reg, uint8_t *Buffer, uint8_t Length)
{
 80022ee:	b590      	push	{r4, r7, lr}
 80022f0:	b087      	sub	sp, #28
 80022f2:	af00      	add	r7, sp, #0
 80022f4:	60f8      	str	r0, [r7, #12]
 80022f6:	607a      	str	r2, [r7, #4]
 80022f8:	461a      	mov	r2, r3
 80022fa:	460b      	mov	r3, r1
 80022fc:	72fb      	strb	r3, [r7, #11]
 80022fe:	4613      	mov	r3, r2
 8002300:	72bb      	strb	r3, [r7, #10]
	int32_t ret = IIS2MDC_ValidateParams(Context,Reg,Buffer,Length);
 8002302:	7abb      	ldrb	r3, [r7, #10]
 8002304:	7af9      	ldrb	r1, [r7, #11]
 8002306:	687a      	ldr	r2, [r7, #4]
 8002308:	68f8      	ldr	r0, [r7, #12]
 800230a:	f7ff ffb2 	bl	8002272 <IIS2MDC_ValidateParams>
 800230e:	6178      	str	r0, [r7, #20]
	if(ret != IIS2MDC_REG_OK)
 8002310:	697b      	ldr	r3, [r7, #20]
 8002312:	2b00      	cmp	r3, #0
 8002314:	d001      	beq.n	800231a <IIS2MDC_ReadReg+0x2c>
	{
		return ret;
 8002316:	697b      	ldr	r3, [r7, #20]
 8002318:	e009      	b.n	800232e <IIS2MDC_ReadReg+0x40>
	}

	ret = Context->Read(Context->Handle, Reg, Buffer, Length);
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	685c      	ldr	r4, [r3, #4]
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	6818      	ldr	r0, [r3, #0]
 8002322:	7abb      	ldrb	r3, [r7, #10]
 8002324:	7af9      	ldrb	r1, [r7, #11]
 8002326:	687a      	ldr	r2, [r7, #4]
 8002328:	47a0      	blx	r4
 800232a:	6178      	str	r0, [r7, #20]
	return ret;
 800232c:	697b      	ldr	r3, [r7, #20]
}
 800232e:	4618      	mov	r0, r3
 8002330:	371c      	adds	r7, #28
 8002332:	46bd      	mov	sp, r7
 8002334:	bd90      	pop	{r4, r7, pc}

08002336 <IIS2MDC_WriteReg>:

int32_t IIS2MDC_WriteReg(IIS2MDC_Context_t *Context, uint8_t Reg, uint8_t *Buffer, uint8_t Length)
{
 8002336:	b590      	push	{r4, r7, lr}
 8002338:	b087      	sub	sp, #28
 800233a:	af00      	add	r7, sp, #0
 800233c:	60f8      	str	r0, [r7, #12]
 800233e:	607a      	str	r2, [r7, #4]
 8002340:	461a      	mov	r2, r3
 8002342:	460b      	mov	r3, r1
 8002344:	72fb      	strb	r3, [r7, #11]
 8002346:	4613      	mov	r3, r2
 8002348:	72bb      	strb	r3, [r7, #10]
	int32_t ret = IIS2MDC_ValidateParams(Context,Reg,Buffer,Length);
 800234a:	7abb      	ldrb	r3, [r7, #10]
 800234c:	7af9      	ldrb	r1, [r7, #11]
 800234e:	687a      	ldr	r2, [r7, #4]
 8002350:	68f8      	ldr	r0, [r7, #12]
 8002352:	f7ff ff8e 	bl	8002272 <IIS2MDC_ValidateParams>
 8002356:	6178      	str	r0, [r7, #20]
	if(ret != IIS2MDC_REG_OK)
 8002358:	697b      	ldr	r3, [r7, #20]
 800235a:	2b00      	cmp	r3, #0
 800235c:	d001      	beq.n	8002362 <IIS2MDC_WriteReg+0x2c>
	{
		return ret;
 800235e:	697b      	ldr	r3, [r7, #20]
 8002360:	e009      	b.n	8002376 <IIS2MDC_WriteReg+0x40>
	}

	ret = Context->Write(Context->Handle, Reg, Buffer, Length);
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	689c      	ldr	r4, [r3, #8]
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	6818      	ldr	r0, [r3, #0]
 800236a:	7abb      	ldrb	r3, [r7, #10]
 800236c:	7af9      	ldrb	r1, [r7, #11]
 800236e:	687a      	ldr	r2, [r7, #4]
 8002370:	47a0      	blx	r4
 8002372:	6178      	str	r0, [r7, #20]
	return ret;
 8002374:	697b      	ldr	r3, [r7, #20]
}
 8002376:	4618      	mov	r0, r3
 8002378:	371c      	adds	r7, #28
 800237a:	46bd      	mov	sp, r7
 800237c:	bd90      	pop	{r4, r7, pc}
	...

08002380 <ISM330DHCX_Init>:
#define T_DATA_MASK  (4U)
#define ISM330DHCX_BOOT_BIT_MSK (0x80)


int32_t ISM330DHCX_Init(ISM330DHCX_Handle_t *Handle, ISM330DHCX_Init_Struct_t Settings, ISM330DHCX_IO_t *IO)
{
 8002380:	b084      	sub	sp, #16
 8002382:	b5b0      	push	{r4, r5, r7, lr}
 8002384:	b08c      	sub	sp, #48	; 0x30
 8002386:	af0a      	add	r7, sp, #40	; 0x28
 8002388:	6078      	str	r0, [r7, #4]
 800238a:	f107 001c 	add.w	r0, r7, #28
 800238e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    if(Handle == NULL)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	2b00      	cmp	r3, #0
 8002396:	d102      	bne.n	800239e <ISM330DHCX_Init+0x1e>
    {
    	return ISM330DHCX_Error;
 8002398:	f04f 33ff 	mov.w	r3, #4294967295
 800239c:	e067      	b.n	800246e <ISM330DHCX_Init+0xee>
    }


    if(ISM330DHCX_RegisterIOBus(Handle, IO) != ISM330DHCX_Ok)
 800239e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80023a0:	6878      	ldr	r0, [r7, #4]
 80023a2:	f000 f86f 	bl	8002484 <ISM330DHCX_RegisterIOBus>
 80023a6:	4603      	mov	r3, r0
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d002      	beq.n	80023b2 <ISM330DHCX_Init+0x32>
    {
    	return ISM330DHCX_ParamError;
 80023ac:	f06f 0302 	mvn.w	r3, #2
 80023b0:	e05d      	b.n	800246e <ISM330DHCX_Init+0xee>
    }

    //Validate if using INT1
    if(Settings.INT1_CTRL != 0 || ((Settings.INT2_CTRL != 0) && (Settings.INT2_on_INT1 == ISM330DHCX_IRQOnBothPins)))
 80023b2:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d107      	bne.n	80023ca <ISM330DHCX_Init+0x4a>
 80023ba:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d00a      	beq.n	80023d8 <ISM330DHCX_Init+0x58>
 80023c2:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80023c6:	2b20      	cmp	r3, #32
 80023c8:	d106      	bne.n	80023d8 <ISM330DHCX_Init+0x58>
    {
    	if(IO->ReadInt1Pin == NULL){
 80023ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80023cc:	691b      	ldr	r3, [r3, #16]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d102      	bne.n	80023d8 <ISM330DHCX_Init+0x58>
        	return ISM330DHCX_ParamError; //If INT1 is used in any capacity, ReadInt1Pin is required
 80023d2:	f06f 0302 	mvn.w	r3, #2
 80023d6:	e04a      	b.n	800246e <ISM330DHCX_Init+0xee>
    	}

    }

    //Validate if using INT2
    if(Settings.INT2_CTRL != 0 && IO->ReadInt2Pin == NULL)
 80023d8:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d006      	beq.n	80023ee <ISM330DHCX_Init+0x6e>
 80023e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80023e2:	695b      	ldr	r3, [r3, #20]
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d102      	bne.n	80023ee <ISM330DHCX_Init+0x6e>
    {
    	return ISM330DHCX_ParamError; //If INT2 is used in any capacity, ReadInt2Pin is required
 80023e8:	f06f 0302 	mvn.w	r3, #2
 80023ec:	e03f      	b.n	800246e <ISM330DHCX_Init+0xee>
    }

    Handle->Context.Read = ISM330DHCX_ReadWrapper;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	4a22      	ldr	r2, [pc, #136]	; (800247c <ISM330DHCX_Init+0xfc>)
 80023f2:	625a      	str	r2, [r3, #36]	; 0x24
    Handle->Context.Write = ISM330DHCX_WriteWrapper;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	4a22      	ldr	r2, [pc, #136]	; (8002480 <ISM330DHCX_Init+0x100>)
 80023f8:	621a      	str	r2, [r3, #32]
    Handle->Context.Handle = Handle;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	687a      	ldr	r2, [r7, #4]
 80023fe:	61da      	str	r2, [r3, #28]
    Handle->AccelResolution = Settings.FS_XL;
 8002400:	f897 2040 	ldrb.w	r2, [r7, #64]	; 0x40
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
    Handle->GyroResolution = Settings.FS_G;
 800240a:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    Handle->Int1Mode = Settings.INT1_CTRL;
 8002414:	f897 204b 	ldrb.w	r2, [r7, #75]	; 0x4b
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
    Handle->Int2Mode = Settings.INT2_CTRL;
 800241e:	f897 204c 	ldrb.w	r2, [r7, #76]	; 0x4c
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
    Handle->IntPinMux = Settings.INT2_on_INT1;
 8002428:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    Handle->IntPolarity = Settings.H_LACTIVE;
 8002432:	f897 2049 	ldrb.w	r2, [r7, #73]	; 0x49
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    //Initialize Bus
    if(Handle->IO.Init != NULL)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	2b00      	cmp	r3, #0
 8002442:	d002      	beq.n	800244a <ISM330DHCX_Init+0xca>
    {
    	Handle->IO.Init();
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	4798      	blx	r3
    }

    return ISM330DHCX_RegisterInit(Handle, Settings);
 800244a:	466d      	mov	r5, sp
 800244c:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8002450:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002452:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002454:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002456:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002458:	e894 0003 	ldmia.w	r4, {r0, r1}
 800245c:	e885 0003 	stmia.w	r5, {r0, r1}
 8002460:	f107 031c 	add.w	r3, r7, #28
 8002464:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002466:	6878      	ldr	r0, [r7, #4]
 8002468:	f000 f9d5 	bl	8002816 <ISM330DHCX_RegisterInit>
 800246c:	4603      	mov	r3, r0

}
 800246e:	4618      	mov	r0, r3
 8002470:	3708      	adds	r7, #8
 8002472:	46bd      	mov	sp, r7
 8002474:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8002478:	b004      	add	sp, #16
 800247a:	4770      	bx	lr
 800247c:	0800279f 	.word	0x0800279f
 8002480:	080027db 	.word	0x080027db

08002484 <ISM330DHCX_RegisterIOBus>:
    ISM330DHCX_DeInit(Handle);
    return ISM330DHCX_Init(Handle, Settings, IO);
}

int32_t ISM330DHCX_RegisterIOBus(ISM330DHCX_Handle_t *Handle, ISM330DHCX_IO_t *IO)
{
 8002484:	b4b0      	push	{r4, r5, r7}
 8002486:	b083      	sub	sp, #12
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
 800248c:	6039      	str	r1, [r7, #0]
    //Validate if Read/Write/GetTick have been provided
    if(IO->Read == NULL || IO->Write==NULL || IO->GetTick == NULL)
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	689b      	ldr	r3, [r3, #8]
 8002492:	2b00      	cmp	r3, #0
 8002494:	d007      	beq.n	80024a6 <ISM330DHCX_RegisterIOBus+0x22>
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	68db      	ldr	r3, [r3, #12]
 800249a:	2b00      	cmp	r3, #0
 800249c:	d003      	beq.n	80024a6 <ISM330DHCX_RegisterIOBus+0x22>
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	699b      	ldr	r3, [r3, #24]
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d102      	bne.n	80024ac <ISM330DHCX_RegisterIOBus+0x28>
    {
    	return ISM330DHCX_ParamError; //Write, Read, GetTick are required for basic device functionality
 80024a6:	f06f 0302 	mvn.w	r3, #2
 80024aa:	e00a      	b.n	80024c2 <ISM330DHCX_RegisterIOBus+0x3e>
    }

    Handle->IO = *IO;
 80024ac:	687a      	ldr	r2, [r7, #4]
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	4614      	mov	r4, r2
 80024b2:	461d      	mov	r5, r3
 80024b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80024b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80024b8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80024bc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    return ISM330DHCX_Ok;
 80024c0:	2300      	movs	r3, #0
}
 80024c2:	4618      	mov	r0, r3
 80024c4:	370c      	adds	r7, #12
 80024c6:	46bd      	mov	sp, r7
 80024c8:	bcb0      	pop	{r4, r5, r7}
 80024ca:	4770      	bx	lr

080024cc <ISM330DHCX_ReadAccel>:

int32_t ISM330DHCX_ReadAccel(ISM330DHCX_Handle_t *Handle, float *Ax, float *Ay, float *Az)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b088      	sub	sp, #32
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	60f8      	str	r0, [r7, #12]
 80024d4:	60b9      	str	r1, [r7, #8]
 80024d6:	607a      	str	r2, [r7, #4]
 80024d8:	603b      	str	r3, [r7, #0]
	int32_t ret = ISM330DHCX_Ok;
 80024da:	2300      	movs	r3, #0
 80024dc:	61fb      	str	r3, [r7, #28]
	int16_t buffer[3] = {0,0,0};
 80024de:	2300      	movs	r3, #0
 80024e0:	82bb      	strh	r3, [r7, #20]
 80024e2:	2300      	movs	r3, #0
 80024e4:	82fb      	strh	r3, [r7, #22]
 80024e6:	2300      	movs	r3, #0
 80024e8:	833b      	strh	r3, [r7, #24]
    if(Handle == NULL)
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d102      	bne.n	80024f6 <ISM330DHCX_ReadAccel+0x2a>
    {
    	return ISM330DHCX_ParamError;
 80024f0:	f06f 0302 	mvn.w	r3, #2
 80024f4:	e045      	b.n	8002582 <ISM330DHCX_ReadAccel+0xb6>
    }

    //Read Status register
    ret = ISM330DHCX_ReadReg(&Handle->Context, ISM330DHCX_REG_STATUS_REG, (uint8_t*)buffer, 1);
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	f103 001c 	add.w	r0, r3, #28
 80024fc:	f107 0214 	add.w	r2, r7, #20
 8002500:	2301      	movs	r3, #1
 8002502:	211e      	movs	r1, #30
 8002504:	f000 fbfe 	bl	8002d04 <ISM330DHCX_ReadReg>
 8002508:	61f8      	str	r0, [r7, #28]
    if(ret != ISM330DHCX_Ok)
 800250a:	69fb      	ldr	r3, [r7, #28]
 800250c:	2b00      	cmp	r3, #0
 800250e:	d001      	beq.n	8002514 <ISM330DHCX_ReadAccel+0x48>
    {
        return ret;
 8002510:	69fb      	ldr	r3, [r7, #28]
 8002512:	e036      	b.n	8002582 <ISM330DHCX_ReadAccel+0xb6>
    }
    //Check the XL Bit
    if(!(buffer[0] & XL_DATA_MASK))
 8002514:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002518:	b29b      	uxth	r3, r3
 800251a:	f003 0301 	and.w	r3, r3, #1
 800251e:	2b00      	cmp	r3, #0
 8002520:	d102      	bne.n	8002528 <ISM330DHCX_ReadAccel+0x5c>
    {
        return ISM330DHCX_DataNotReady;
 8002522:	f64b 63ef 	movw	r3, #48879	; 0xbeef
 8002526:	e02c      	b.n	8002582 <ISM330DHCX_ReadAccel+0xb6>
    }

    //Read the data
    ret = ISM330DHCX_ReadReg(&Handle->Context, ISM330DHCX_REG_OUTX_L_A, (uint8_t*)buffer, 6);
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	f103 001c 	add.w	r0, r3, #28
 800252e:	f107 0214 	add.w	r2, r7, #20
 8002532:	2306      	movs	r3, #6
 8002534:	2128      	movs	r1, #40	; 0x28
 8002536:	f000 fbe5 	bl	8002d04 <ISM330DHCX_ReadReg>
 800253a:	61f8      	str	r0, [r7, #28]
    if(ret != ISM330DHCX_Ok)
 800253c:	69fb      	ldr	r3, [r7, #28]
 800253e:	2b00      	cmp	r3, #0
 8002540:	d001      	beq.n	8002546 <ISM330DHCX_ReadAccel+0x7a>
    {
    	return ret;
 8002542:	69fb      	ldr	r3, [r7, #28]
 8002544:	e01d      	b.n	8002582 <ISM330DHCX_ReadAccel+0xb6>
    }
    //Convert the data to Gs
    ConvertXLData(Handle->AccelResolution, &buffer[0], Ax);
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800254c:	f107 0114 	add.w	r1, r7, #20
 8002550:	68ba      	ldr	r2, [r7, #8]
 8002552:	4618      	mov	r0, r3
 8002554:	f000 fb46 	bl	8002be4 <ConvertXLData>
    ConvertXLData(Handle->AccelResolution, &buffer[1], Ay);
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	f893 0029 	ldrb.w	r0, [r3, #41]	; 0x29
 800255e:	f107 0314 	add.w	r3, r7, #20
 8002562:	3302      	adds	r3, #2
 8002564:	687a      	ldr	r2, [r7, #4]
 8002566:	4619      	mov	r1, r3
 8002568:	f000 fb3c 	bl	8002be4 <ConvertXLData>
    ConvertXLData(Handle->AccelResolution, &buffer[2], Az);
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	f893 0029 	ldrb.w	r0, [r3, #41]	; 0x29
 8002572:	f107 0314 	add.w	r3, r7, #20
 8002576:	3304      	adds	r3, #4
 8002578:	683a      	ldr	r2, [r7, #0]
 800257a:	4619      	mov	r1, r3
 800257c:	f000 fb32 	bl	8002be4 <ConvertXLData>
    return ISM330DHCX_DataReady;
 8002580:	2300      	movs	r3, #0
}
 8002582:	4618      	mov	r0, r3
 8002584:	3720      	adds	r7, #32
 8002586:	46bd      	mov	sp, r7
 8002588:	bd80      	pop	{r7, pc}

0800258a <ISM330DHCX_ReadGyro>:

int32_t ISM330DHCX_ReadGyro(ISM330DHCX_Handle_t *Handle, float *Wx, float *Wy, float *Wz)
{
 800258a:	b580      	push	{r7, lr}
 800258c:	b088      	sub	sp, #32
 800258e:	af00      	add	r7, sp, #0
 8002590:	60f8      	str	r0, [r7, #12]
 8002592:	60b9      	str	r1, [r7, #8]
 8002594:	607a      	str	r2, [r7, #4]
 8002596:	603b      	str	r3, [r7, #0]
	int32_t ret = ISM330DHCX_Ok;
 8002598:	2300      	movs	r3, #0
 800259a:	61fb      	str	r3, [r7, #28]
	int16_t buffer[3] = {0,0,0};
 800259c:	2300      	movs	r3, #0
 800259e:	82bb      	strh	r3, [r7, #20]
 80025a0:	2300      	movs	r3, #0
 80025a2:	82fb      	strh	r3, [r7, #22]
 80025a4:	2300      	movs	r3, #0
 80025a6:	833b      	strh	r3, [r7, #24]
    if(Handle == NULL)
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d102      	bne.n	80025b4 <ISM330DHCX_ReadGyro+0x2a>
    {
    	return ISM330DHCX_ParamError;
 80025ae:	f06f 0302 	mvn.w	r3, #2
 80025b2:	e045      	b.n	8002640 <ISM330DHCX_ReadGyro+0xb6>
    }

    //Read Status register
    ret = ISM330DHCX_ReadReg(&Handle->Context, ISM330DHCX_REG_STATUS_REG, (uint8_t*)buffer, 1);
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	f103 001c 	add.w	r0, r3, #28
 80025ba:	f107 0214 	add.w	r2, r7, #20
 80025be:	2301      	movs	r3, #1
 80025c0:	211e      	movs	r1, #30
 80025c2:	f000 fb9f 	bl	8002d04 <ISM330DHCX_ReadReg>
 80025c6:	61f8      	str	r0, [r7, #28]
    if(ret != ISM330DHCX_Ok)
 80025c8:	69fb      	ldr	r3, [r7, #28]
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d001      	beq.n	80025d2 <ISM330DHCX_ReadGyro+0x48>
    {
        return ret;
 80025ce:	69fb      	ldr	r3, [r7, #28]
 80025d0:	e036      	b.n	8002640 <ISM330DHCX_ReadGyro+0xb6>
    }
    //Check the XL Bit
    if(!(buffer[0] & G_DATA_MASK))
 80025d2:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80025d6:	b29b      	uxth	r3, r3
 80025d8:	f003 0302 	and.w	r3, r3, #2
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d102      	bne.n	80025e6 <ISM330DHCX_ReadGyro+0x5c>
    {
        return ISM330DHCX_DataNotReady;
 80025e0:	f64b 63ef 	movw	r3, #48879	; 0xbeef
 80025e4:	e02c      	b.n	8002640 <ISM330DHCX_ReadGyro+0xb6>
    }

    //Read the data
    ret = ISM330DHCX_ReadReg(&Handle->Context, ISM330DHCX_REG_OUTX_L_G, (uint8_t*)buffer, 6);
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	f103 001c 	add.w	r0, r3, #28
 80025ec:	f107 0214 	add.w	r2, r7, #20
 80025f0:	2306      	movs	r3, #6
 80025f2:	2122      	movs	r1, #34	; 0x22
 80025f4:	f000 fb86 	bl	8002d04 <ISM330DHCX_ReadReg>
 80025f8:	61f8      	str	r0, [r7, #28]
    if(ret != ISM330DHCX_Ok)
 80025fa:	69fb      	ldr	r3, [r7, #28]
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d001      	beq.n	8002604 <ISM330DHCX_ReadGyro+0x7a>
    {
    	return ret;
 8002600:	69fb      	ldr	r3, [r7, #28]
 8002602:	e01d      	b.n	8002640 <ISM330DHCX_ReadGyro+0xb6>
    }
    //Convert Gyro Data to DPS
    ConvertGData(Handle->GyroResolution, &buffer[0], Wx);
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800260a:	f107 0114 	add.w	r1, r7, #20
 800260e:	68ba      	ldr	r2, [r7, #8]
 8002610:	4618      	mov	r0, r3
 8002612:	f000 fb27 	bl	8002c64 <ConvertGData>
    ConvertGData(Handle->GyroResolution, &buffer[1], Wy);
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	f893 0028 	ldrb.w	r0, [r3, #40]	; 0x28
 800261c:	f107 0314 	add.w	r3, r7, #20
 8002620:	3302      	adds	r3, #2
 8002622:	687a      	ldr	r2, [r7, #4]
 8002624:	4619      	mov	r1, r3
 8002626:	f000 fb1d 	bl	8002c64 <ConvertGData>
    ConvertGData(Handle->GyroResolution, &buffer[2], Wz);
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	f893 0028 	ldrb.w	r0, [r3, #40]	; 0x28
 8002630:	f107 0314 	add.w	r3, r7, #20
 8002634:	3304      	adds	r3, #4
 8002636:	683a      	ldr	r2, [r7, #0]
 8002638:	4619      	mov	r1, r3
 800263a:	f000 fb13 	bl	8002c64 <ConvertGData>
    return ISM330DHCX_DataReady;
 800263e:	2300      	movs	r3, #0
}
 8002640:	4618      	mov	r0, r3
 8002642:	3720      	adds	r7, #32
 8002644:	46bd      	mov	sp, r7
 8002646:	bd80      	pop	{r7, pc}

08002648 <ISM330DHCX_Reboot>:
    ConvertTData(buffer, Data);
    return ISM330DHCX_DataReady;
}

int32_t ISM330DHCX_Reboot(ISM330DHCX_Handle_t *Handle)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b084      	sub	sp, #16
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
    //Put Gyro / Accel In power down mode
	uint32_t ret = ISM330DHCX_Ok;
 8002650:	2300      	movs	r3, #0
 8002652:	60fb      	str	r3, [r7, #12]
    uint8_t buffer = 0;
 8002654:	2300      	movs	r3, #0
 8002656:	72fb      	strb	r3, [r7, #11]
    ret = ISM330DHCX_WriteReg(&Handle->Context, ISM330DHCX_REG_CTRL1_XL, &buffer, 1);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	f103 001c 	add.w	r0, r3, #28
 800265e:	f107 020b 	add.w	r2, r7, #11
 8002662:	2301      	movs	r3, #1
 8002664:	2110      	movs	r1, #16
 8002666:	f000 fb76 	bl	8002d56 <ISM330DHCX_WriteReg>
 800266a:	4603      	mov	r3, r0
 800266c:	60fb      	str	r3, [r7, #12]
    if(ret != ISM330DHCX_Ok)
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	2b00      	cmp	r3, #0
 8002672:	d001      	beq.n	8002678 <ISM330DHCX_Reboot+0x30>
    {
    	return ret;
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	e038      	b.n	80026ea <ISM330DHCX_Reboot+0xa2>
    }

    buffer = 0;
 8002678:	2300      	movs	r3, #0
 800267a:	72fb      	strb	r3, [r7, #11]
    ret = ISM330DHCX_WriteReg(&Handle->Context, ISM330DHCX_REG_CTRL2_G, &buffer, 1);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	f103 001c 	add.w	r0, r3, #28
 8002682:	f107 020b 	add.w	r2, r7, #11
 8002686:	2301      	movs	r3, #1
 8002688:	2111      	movs	r1, #17
 800268a:	f000 fb64 	bl	8002d56 <ISM330DHCX_WriteReg>
 800268e:	4603      	mov	r3, r0
 8002690:	60fb      	str	r3, [r7, #12]
    if(ret != ISM330DHCX_Ok)
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	2b00      	cmp	r3, #0
 8002696:	d001      	beq.n	800269c <ISM330DHCX_Reboot+0x54>
    {
    	return ret;
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	e026      	b.n	80026ea <ISM330DHCX_Reboot+0xa2>
    }

	//Set BOOT bit in ctrl 3
    buffer = ISM330DHCX_BOOT_BIT_MSK;
 800269c:	2380      	movs	r3, #128	; 0x80
 800269e:	72fb      	strb	r3, [r7, #11]
    ret = ISM330DHCX_WriteReg(&Handle->Context, ISM330DHCX_REG_CTRL3_C, &buffer, 1);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	f103 001c 	add.w	r0, r3, #28
 80026a6:	f107 020b 	add.w	r2, r7, #11
 80026aa:	2301      	movs	r3, #1
 80026ac:	2112      	movs	r1, #18
 80026ae:	f000 fb52 	bl	8002d56 <ISM330DHCX_WriteReg>
 80026b2:	4603      	mov	r3, r0
 80026b4:	60fb      	str	r3, [r7, #12]
    if(ret != ISM330DHCX_Ok)
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d011      	beq.n	80026e0 <ISM330DHCX_Reboot+0x98>
    {
    	return ret;
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	e014      	b.n	80026ea <ISM330DHCX_Reboot+0xa2>
    }

	//Wait for boot bit to become 0
    while(buffer & ISM330DHCX_BOOT_BIT_MSK)
    {
        ret = ISM330DHCX_ReadReg(&Handle->Context, ISM330DHCX_REG_CTRL3_C, &buffer, 1);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	f103 001c 	add.w	r0, r3, #28
 80026c6:	f107 020b 	add.w	r2, r7, #11
 80026ca:	2301      	movs	r3, #1
 80026cc:	2112      	movs	r1, #18
 80026ce:	f000 fb19 	bl	8002d04 <ISM330DHCX_ReadReg>
 80026d2:	4603      	mov	r3, r0
 80026d4:	60fb      	str	r3, [r7, #12]
        if(ret != ISM330DHCX_Ok)
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d001      	beq.n	80026e0 <ISM330DHCX_Reboot+0x98>
        {
        	return ret;
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	e004      	b.n	80026ea <ISM330DHCX_Reboot+0xa2>
    while(buffer & ISM330DHCX_BOOT_BIT_MSK)
 80026e0:	7afb      	ldrb	r3, [r7, #11]
 80026e2:	b25b      	sxtb	r3, r3
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	dbeb      	blt.n	80026c0 <ISM330DHCX_Reboot+0x78>
        }
    }
    return ISM330DHCX_Ok;
 80026e8:	2300      	movs	r3, #0
}
 80026ea:	4618      	mov	r0, r3
 80026ec:	3710      	adds	r7, #16
 80026ee:	46bd      	mov	sp, r7
 80026f0:	bd80      	pop	{r7, pc}

080026f2 <ISM330DHCX_Reset>:

int32_t ISM330DHCX_Reset(ISM330DHCX_Handle_t *Handle)
{
 80026f2:	b580      	push	{r7, lr}
 80026f4:	b084      	sub	sp, #16
 80026f6:	af00      	add	r7, sp, #0
 80026f8:	6078      	str	r0, [r7, #4]
	//Put Gyro / Accel in power down mode
	uint32_t ret = ISM330DHCX_Ok;
 80026fa:	2300      	movs	r3, #0
 80026fc:	60fb      	str	r3, [r7, #12]
    uint8_t buffer = 0;
 80026fe:	2300      	movs	r3, #0
 8002700:	72fb      	strb	r3, [r7, #11]
    ret = ISM330DHCX_WriteReg(&Handle->Context, ISM330DHCX_REG_CTRL1_XL, &buffer, 1);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	f103 001c 	add.w	r0, r3, #28
 8002708:	f107 020b 	add.w	r2, r7, #11
 800270c:	2301      	movs	r3, #1
 800270e:	2110      	movs	r1, #16
 8002710:	f000 fb21 	bl	8002d56 <ISM330DHCX_WriteReg>
 8002714:	4603      	mov	r3, r0
 8002716:	60fb      	str	r3, [r7, #12]
    if(ret != ISM330DHCX_Ok)
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	2b00      	cmp	r3, #0
 800271c:	d001      	beq.n	8002722 <ISM330DHCX_Reset+0x30>
    {
    	return ret;
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	e039      	b.n	8002796 <ISM330DHCX_Reset+0xa4>
    }

    buffer = 0;
 8002722:	2300      	movs	r3, #0
 8002724:	72fb      	strb	r3, [r7, #11]
    ret = ISM330DHCX_WriteReg(&Handle->Context, ISM330DHCX_REG_CTRL2_G, &buffer, 1);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	f103 001c 	add.w	r0, r3, #28
 800272c:	f107 020b 	add.w	r2, r7, #11
 8002730:	2301      	movs	r3, #1
 8002732:	2111      	movs	r1, #17
 8002734:	f000 fb0f 	bl	8002d56 <ISM330DHCX_WriteReg>
 8002738:	4603      	mov	r3, r0
 800273a:	60fb      	str	r3, [r7, #12]
    if(ret != ISM330DHCX_Ok)
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	2b00      	cmp	r3, #0
 8002740:	d001      	beq.n	8002746 <ISM330DHCX_Reset+0x54>
    {
    	return ret;
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	e027      	b.n	8002796 <ISM330DHCX_Reset+0xa4>
    }
	//Set SW Reset bit in CTRL3
    buffer = ISM330DHCX_ResetSignal;
 8002746:	2301      	movs	r3, #1
 8002748:	72fb      	strb	r3, [r7, #11]
    ret = ISM330DHCX_WriteReg(&Handle->Context, ISM330DHCX_REG_CTRL3_C, &buffer, 1);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	f103 001c 	add.w	r0, r3, #28
 8002750:	f107 020b 	add.w	r2, r7, #11
 8002754:	2301      	movs	r3, #1
 8002756:	2112      	movs	r1, #18
 8002758:	f000 fafd 	bl	8002d56 <ISM330DHCX_WriteReg>
 800275c:	4603      	mov	r3, r0
 800275e:	60fb      	str	r3, [r7, #12]
    if(ret != ISM330DHCX_Ok)
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	2b00      	cmp	r3, #0
 8002764:	d011      	beq.n	800278a <ISM330DHCX_Reset+0x98>
    {
    	return ret;
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	e015      	b.n	8002796 <ISM330DHCX_Reset+0xa4>
    }
	//Poll SW Reset bit
    while(buffer & ISM330DHCX_ResetSignal)
    {
        ret = ISM330DHCX_ReadReg(&Handle->Context, ISM330DHCX_REG_CTRL3_C, &buffer, 1);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	f103 001c 	add.w	r0, r3, #28
 8002770:	f107 020b 	add.w	r2, r7, #11
 8002774:	2301      	movs	r3, #1
 8002776:	2112      	movs	r1, #18
 8002778:	f000 fac4 	bl	8002d04 <ISM330DHCX_ReadReg>
 800277c:	4603      	mov	r3, r0
 800277e:	60fb      	str	r3, [r7, #12]
        if(ret != ISM330DHCX_Ok)
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	2b00      	cmp	r3, #0
 8002784:	d001      	beq.n	800278a <ISM330DHCX_Reset+0x98>
        {
        	return ret;
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	e005      	b.n	8002796 <ISM330DHCX_Reset+0xa4>
    while(buffer & ISM330DHCX_ResetSignal)
 800278a:	7afb      	ldrb	r3, [r7, #11]
 800278c:	f003 0301 	and.w	r3, r3, #1
 8002790:	2b00      	cmp	r3, #0
 8002792:	d1ea      	bne.n	800276a <ISM330DHCX_Reset+0x78>
        }
    }
    return ISM330DHCX_Ok;
 8002794:	2300      	movs	r3, #0
}
 8002796:	4618      	mov	r0, r3
 8002798:	3710      	adds	r7, #16
 800279a:	46bd      	mov	sp, r7
 800279c:	bd80      	pop	{r7, pc}

0800279e <ISM330DHCX_ReadWrapper>:

static int32_t ISM330DHCX_ReadWrapper(void *Handle, uint8_t Reg, uint8_t *Buffer, uint8_t Length)
{
 800279e:	b580      	push	{r7, lr}
 80027a0:	b086      	sub	sp, #24
 80027a2:	af00      	add	r7, sp, #0
 80027a4:	60f8      	str	r0, [r7, #12]
 80027a6:	607a      	str	r2, [r7, #4]
 80027a8:	461a      	mov	r2, r3
 80027aa:	460b      	mov	r3, r1
 80027ac:	72fb      	strb	r3, [r7, #11]
 80027ae:	4613      	mov	r3, r2
 80027b0:	72bb      	strb	r3, [r7, #10]
    ISM330DHCX_Handle_t *DevicePtr = (ISM330DHCX_Handle_t*)Handle;
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	617b      	str	r3, [r7, #20]
    if(DevicePtr->IO.Read != NULL)
 80027b6:	697b      	ldr	r3, [r7, #20]
 80027b8:	689b      	ldr	r3, [r3, #8]
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d007      	beq.n	80027ce <ISM330DHCX_ReadWrapper+0x30>
    {
        return DevicePtr->IO.Read(Reg,Buffer,Length);
 80027be:	697b      	ldr	r3, [r7, #20]
 80027c0:	689b      	ldr	r3, [r3, #8]
 80027c2:	7aba      	ldrb	r2, [r7, #10]
 80027c4:	7af8      	ldrb	r0, [r7, #11]
 80027c6:	6879      	ldr	r1, [r7, #4]
 80027c8:	4798      	blx	r3
 80027ca:	4603      	mov	r3, r0
 80027cc:	e001      	b.n	80027d2 <ISM330DHCX_ReadWrapper+0x34>
    }
    return ISM330DHCX_ReadRegErr;
 80027ce:	f06f 0301 	mvn.w	r3, #1
}
 80027d2:	4618      	mov	r0, r3
 80027d4:	3718      	adds	r7, #24
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bd80      	pop	{r7, pc}

080027da <ISM330DHCX_WriteWrapper>:

static int32_t ISM330DHCX_WriteWrapper(void *Handle, uint8_t Reg, uint8_t *Buffer, uint8_t Length)
{
 80027da:	b580      	push	{r7, lr}
 80027dc:	b086      	sub	sp, #24
 80027de:	af00      	add	r7, sp, #0
 80027e0:	60f8      	str	r0, [r7, #12]
 80027e2:	607a      	str	r2, [r7, #4]
 80027e4:	461a      	mov	r2, r3
 80027e6:	460b      	mov	r3, r1
 80027e8:	72fb      	strb	r3, [r7, #11]
 80027ea:	4613      	mov	r3, r2
 80027ec:	72bb      	strb	r3, [r7, #10]
    ISM330DHCX_Handle_t *DevicePtr = (ISM330DHCX_Handle_t*)Handle;
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	617b      	str	r3, [r7, #20]
    if(DevicePtr->IO.Write != NULL)
 80027f2:	697b      	ldr	r3, [r7, #20]
 80027f4:	68db      	ldr	r3, [r3, #12]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d007      	beq.n	800280a <ISM330DHCX_WriteWrapper+0x30>
    {
        return DevicePtr->IO.Write(Reg,Buffer,Length);
 80027fa:	697b      	ldr	r3, [r7, #20]
 80027fc:	68db      	ldr	r3, [r3, #12]
 80027fe:	7aba      	ldrb	r2, [r7, #10]
 8002800:	7af8      	ldrb	r0, [r7, #11]
 8002802:	6879      	ldr	r1, [r7, #4]
 8002804:	4798      	blx	r3
 8002806:	4603      	mov	r3, r0
 8002808:	e001      	b.n	800280e <ISM330DHCX_WriteWrapper+0x34>
    }
    return ISM330DHCX_ReadRegErr;
 800280a:	f06f 0301 	mvn.w	r3, #1
}
 800280e:	4618      	mov	r0, r3
 8002810:	3718      	adds	r7, #24
 8002812:	46bd      	mov	sp, r7
 8002814:	bd80      	pop	{r7, pc}

08002816 <ISM330DHCX_RegisterInit>:

static int32_t ISM330DHCX_RegisterInit(ISM330DHCX_Handle_t *Handle,ISM330DHCX_Init_Struct_t Settings)
{
 8002816:	b084      	sub	sp, #16
 8002818:	b580      	push	{r7, lr}
 800281a:	b086      	sub	sp, #24
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
 8002820:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8002824:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    int32_t ret = ISM330DHCX_Ok;
 8002828:	2300      	movs	r3, #0
 800282a:	617b      	str	r3, [r7, #20]
    uint8_t buffer[12] = {0};
 800282c:	2300      	movs	r3, #0
 800282e:	60bb      	str	r3, [r7, #8]
 8002830:	f107 030c 	add.w	r3, r7, #12
 8002834:	2200      	movs	r2, #0
 8002836:	601a      	str	r2, [r3, #0]
 8002838:	605a      	str	r2, [r3, #4]
    ISM330DHCX_Reboot(Handle);
 800283a:	6878      	ldr	r0, [r7, #4]
 800283c:	f7ff ff04 	bl	8002648 <ISM330DHCX_Reboot>
    ISM330DHCX_Reset(Handle);
 8002840:	6878      	ldr	r0, [r7, #4]
 8002842:	f7ff ff56 	bl	80026f2 <ISM330DHCX_Reset>

    buffer[0] = Settings.SDO_PU_EN | 0x3F;
 8002846:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800284a:	f043 033f 	orr.w	r3, r3, #63	; 0x3f
 800284e:	b2db      	uxtb	r3, r3
 8002850:	723b      	strb	r3, [r7, #8]
    ret = ISM330DHCX_WriteReg(&Handle->Context, ISM330DHCX_REG_PIN_CTRL, buffer, 1);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	f103 001c 	add.w	r0, r3, #28
 8002858:	f107 0208 	add.w	r2, r7, #8
 800285c:	2301      	movs	r3, #1
 800285e:	2102      	movs	r1, #2
 8002860:	f000 fa79 	bl	8002d56 <ISM330DHCX_WriteReg>
 8002864:	6178      	str	r0, [r7, #20]
    if(ret != ISM330DHCX_Ok)
 8002866:	697b      	ldr	r3, [r7, #20]
 8002868:	2b00      	cmp	r3, #0
 800286a:	d001      	beq.n	8002870 <ISM330DHCX_RegisterInit+0x5a>
    {
    	return ret;
 800286c:	697b      	ldr	r3, [r7, #20]
 800286e:	e1b1      	b.n	8002bd4 <ISM330DHCX_RegisterInit+0x3be>
    }


    buffer[0] = Settings.WTM & 0x00FF; //WTM Threshold is a 9 bit number
 8002870:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8002872:	b2db      	uxtb	r3, r3
 8002874:	723b      	strb	r3, [r7, #8]
    ret = ISM330DHCX_WriteReg(&Handle->Context, ISM330DHCX_REG_FIFO_CTRL1, buffer, 1);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	f103 001c 	add.w	r0, r3, #28
 800287c:	f107 0208 	add.w	r2, r7, #8
 8002880:	2301      	movs	r3, #1
 8002882:	2107      	movs	r1, #7
 8002884:	f000 fa67 	bl	8002d56 <ISM330DHCX_WriteReg>
 8002888:	6178      	str	r0, [r7, #20]
    if(ret != ISM330DHCX_Ok)
 800288a:	697b      	ldr	r3, [r7, #20]
 800288c:	2b00      	cmp	r3, #0
 800288e:	d001      	beq.n	8002894 <ISM330DHCX_RegisterInit+0x7e>
    {
    	return ret;
 8002890:	697b      	ldr	r3, [r7, #20]
 8002892:	e19f      	b.n	8002bd4 <ISM330DHCX_RegisterInit+0x3be>
    }


    if(Settings.WTM > 0x00FF)
 8002894:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8002896:	2bff      	cmp	r3, #255	; 0xff
 8002898:	d906      	bls.n	80028a8 <ISM330DHCX_RegisterInit+0x92>
    {
    	buffer[0] = Settings.STOP_ON_WTM | 0x01;
 800289a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800289e:	f043 0301 	orr.w	r3, r3, #1
 80028a2:	b2db      	uxtb	r3, r3
 80028a4:	723b      	strb	r3, [r7, #8]
 80028a6:	e002      	b.n	80028ae <ISM330DHCX_RegisterInit+0x98>
    } else
    {
    	buffer[0] = Settings.STOP_ON_WTM;
 80028a8:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80028ac:	723b      	strb	r3, [r7, #8]
    }
    ret = ISM330DHCX_WriteReg(&Handle->Context, ISM330DHCX_REG_FIFO_CTRL2, buffer, 1);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	f103 001c 	add.w	r0, r3, #28
 80028b4:	f107 0208 	add.w	r2, r7, #8
 80028b8:	2301      	movs	r3, #1
 80028ba:	2108      	movs	r1, #8
 80028bc:	f000 fa4b 	bl	8002d56 <ISM330DHCX_WriteReg>
 80028c0:	6178      	str	r0, [r7, #20]
    if(ret != ISM330DHCX_Ok)
 80028c2:	697b      	ldr	r3, [r7, #20]
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d001      	beq.n	80028cc <ISM330DHCX_RegisterInit+0xb6>
    {
    	return ret;
 80028c8:	697b      	ldr	r3, [r7, #20]
 80028ca:	e183      	b.n	8002bd4 <ISM330DHCX_RegisterInit+0x3be>
    }


    buffer[0] = Settings.BDR_GY | Settings.BDR_XL;
 80028cc:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 80028d0:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80028d4:	4313      	orrs	r3, r2
 80028d6:	b2db      	uxtb	r3, r3
 80028d8:	723b      	strb	r3, [r7, #8]
    ret = ISM330DHCX_WriteReg(&Handle->Context, ISM330DHCX_REG_FIFO_CTRL3, buffer, 1);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	f103 001c 	add.w	r0, r3, #28
 80028e0:	f107 0208 	add.w	r2, r7, #8
 80028e4:	2301      	movs	r3, #1
 80028e6:	2109      	movs	r1, #9
 80028e8:	f000 fa35 	bl	8002d56 <ISM330DHCX_WriteReg>
 80028ec:	6178      	str	r0, [r7, #20]
    if(ret != ISM330DHCX_Ok)
 80028ee:	697b      	ldr	r3, [r7, #20]
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d001      	beq.n	80028f8 <ISM330DHCX_RegisterInit+0xe2>
    {
    	return ret;
 80028f4:	697b      	ldr	r3, [r7, #20]
 80028f6:	e16d      	b.n	8002bd4 <ISM330DHCX_RegisterInit+0x3be>
    }


    buffer[0] = Settings.DEC_TS_BATCH | Settings.ODR_T_BATCH | Settings.FIFO_MODE;
 80028f8:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 80028fc:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8002900:	4313      	orrs	r3, r2
 8002902:	b2da      	uxtb	r2, r3
 8002904:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8002908:	4313      	orrs	r3, r2
 800290a:	b2db      	uxtb	r3, r3
 800290c:	723b      	strb	r3, [r7, #8]
    ret = ISM330DHCX_WriteReg(&Handle->Context, ISM330DHCX_REG_FIFO_CTRL4, buffer, 1);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	f103 001c 	add.w	r0, r3, #28
 8002914:	f107 0208 	add.w	r2, r7, #8
 8002918:	2301      	movs	r3, #1
 800291a:	210a      	movs	r1, #10
 800291c:	f000 fa1b 	bl	8002d56 <ISM330DHCX_WriteReg>
 8002920:	6178      	str	r0, [r7, #20]
    if(ret != ISM330DHCX_Ok)
 8002922:	697b      	ldr	r3, [r7, #20]
 8002924:	2b00      	cmp	r3, #0
 8002926:	d001      	beq.n	800292c <ISM330DHCX_RegisterInit+0x116>
    {
    	return ret;
 8002928:	697b      	ldr	r3, [r7, #20]
 800292a:	e153      	b.n	8002bd4 <ISM330DHCX_RegisterInit+0x3be>
    }


    buffer[0] = Settings.CNT_BDR_TH & 0x00FF;
 800292c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800292e:	b2db      	uxtb	r3, r3
 8002930:	723b      	strb	r3, [r7, #8]
    ret = ISM330DHCX_WriteReg(&Handle->Context, ISM330DHCX_REG_COUNTER_BDR_REG2, buffer, 1);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	f103 001c 	add.w	r0, r3, #28
 8002938:	f107 0208 	add.w	r2, r7, #8
 800293c:	2301      	movs	r3, #1
 800293e:	210c      	movs	r1, #12
 8002940:	f000 fa09 	bl	8002d56 <ISM330DHCX_WriteReg>
 8002944:	6178      	str	r0, [r7, #20]
    if(ret != ISM330DHCX_Ok)
 8002946:	697b      	ldr	r3, [r7, #20]
 8002948:	2b00      	cmp	r3, #0
 800294a:	d001      	beq.n	8002950 <ISM330DHCX_RegisterInit+0x13a>
    {
    	return ret;
 800294c:	697b      	ldr	r3, [r7, #20]
 800294e:	e141      	b.n	8002bd4 <ISM330DHCX_RegisterInit+0x3be>
    }


    buffer[0] = ((Settings.CNT_BDR_TH & 0x0700) >> 8) | Settings.dataready_pulsed | Settings.TRIG_COUNTER_BDR;
 8002950:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8002952:	121b      	asrs	r3, r3, #8
 8002954:	b25b      	sxtb	r3, r3
 8002956:	f003 0307 	and.w	r3, r3, #7
 800295a:	b25a      	sxtb	r2, r3
 800295c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002960:	b25b      	sxtb	r3, r3
 8002962:	4313      	orrs	r3, r2
 8002964:	b25a      	sxtb	r2, r3
 8002966:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800296a:	b25b      	sxtb	r3, r3
 800296c:	4313      	orrs	r3, r2
 800296e:	b25b      	sxtb	r3, r3
 8002970:	b2db      	uxtb	r3, r3
 8002972:	723b      	strb	r3, [r7, #8]
    ret = ISM330DHCX_WriteReg(&Handle->Context, ISM330DHCX_REG_COUNTER_BDR_REG1, buffer, 1);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	f103 001c 	add.w	r0, r3, #28
 800297a:	f107 0208 	add.w	r2, r7, #8
 800297e:	2301      	movs	r3, #1
 8002980:	210b      	movs	r1, #11
 8002982:	f000 f9e8 	bl	8002d56 <ISM330DHCX_WriteReg>
 8002986:	6178      	str	r0, [r7, #20]
    if(ret != ISM330DHCX_Ok)
 8002988:	697b      	ldr	r3, [r7, #20]
 800298a:	2b00      	cmp	r3, #0
 800298c:	d001      	beq.n	8002992 <ISM330DHCX_RegisterInit+0x17c>
    {
    	return ret;
 800298e:	697b      	ldr	r3, [r7, #20]
 8002990:	e120      	b.n	8002bd4 <ISM330DHCX_RegisterInit+0x3be>
    }


    buffer[0] = Settings.INT1_CTRL;
 8002992:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8002996:	723b      	strb	r3, [r7, #8]
    ret = ISM330DHCX_WriteReg(&Handle->Context, ISM330DHCX_REG_INT1_CTRL, buffer, 1);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	f103 001c 	add.w	r0, r3, #28
 800299e:	f107 0208 	add.w	r2, r7, #8
 80029a2:	2301      	movs	r3, #1
 80029a4:	210d      	movs	r1, #13
 80029a6:	f000 f9d6 	bl	8002d56 <ISM330DHCX_WriteReg>
 80029aa:	6178      	str	r0, [r7, #20]
    if(ret != ISM330DHCX_Ok)
 80029ac:	697b      	ldr	r3, [r7, #20]
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d001      	beq.n	80029b6 <ISM330DHCX_RegisterInit+0x1a0>
    {
    	return ret;
 80029b2:	697b      	ldr	r3, [r7, #20]
 80029b4:	e10e      	b.n	8002bd4 <ISM330DHCX_RegisterInit+0x3be>
    }


    buffer[0] = Settings.INT2_CTRL;
 80029b6:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 80029ba:	723b      	strb	r3, [r7, #8]
    ret = ISM330DHCX_WriteReg(&Handle->Context, ISM330DHCX_REG_INT2_CTRL, buffer, 1);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	f103 001c 	add.w	r0, r3, #28
 80029c2:	f107 0208 	add.w	r2, r7, #8
 80029c6:	2301      	movs	r3, #1
 80029c8:	210e      	movs	r1, #14
 80029ca:	f000 f9c4 	bl	8002d56 <ISM330DHCX_WriteReg>
 80029ce:	6178      	str	r0, [r7, #20]
    if(ret != ISM330DHCX_Ok)
 80029d0:	697b      	ldr	r3, [r7, #20]
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d001      	beq.n	80029da <ISM330DHCX_RegisterInit+0x1c4>
    {
    	return ret;
 80029d6:	697b      	ldr	r3, [r7, #20]
 80029d8:	e0fc      	b.n	8002bd4 <ISM330DHCX_RegisterInit+0x3be>
    }


    buffer[0] = 0x40 | Settings.PP_OD | Settings.H_LACTIVE | Settings.SIM | Settings.IF_INC;
 80029da:	f897 2052 	ldrb.w	r2, [r7, #82]	; 0x52
 80029de:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
 80029e2:	4313      	orrs	r3, r2
 80029e4:	b2da      	uxtb	r2, r3
 80029e6:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80029ea:	4313      	orrs	r3, r2
 80029ec:	b2da      	uxtb	r2, r3
 80029ee:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80029f2:	4313      	orrs	r3, r2
 80029f4:	b2db      	uxtb	r3, r3
 80029f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80029fa:	b2db      	uxtb	r3, r3
 80029fc:	723b      	strb	r3, [r7, #8]
    ret = ISM330DHCX_WriteReg(&Handle->Context, ISM330DHCX_REG_CTRL3_C, buffer, 1);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	f103 001c 	add.w	r0, r3, #28
 8002a04:	f107 0208 	add.w	r2, r7, #8
 8002a08:	2301      	movs	r3, #1
 8002a0a:	2112      	movs	r1, #18
 8002a0c:	f000 f9a3 	bl	8002d56 <ISM330DHCX_WriteReg>
 8002a10:	6178      	str	r0, [r7, #20]
    if(ret != ISM330DHCX_Ok)
 8002a12:	697b      	ldr	r3, [r7, #20]
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d001      	beq.n	8002a1c <ISM330DHCX_RegisterInit+0x206>
    {
    	return ret;
 8002a18:	697b      	ldr	r3, [r7, #20]
 8002a1a:	e0db      	b.n	8002bd4 <ISM330DHCX_RegisterInit+0x3be>
    }


    buffer[0] = Settings.TriggerMode | Settings.XL_HM_MODE | Settings.USR_OFF_W | Settings.FTYPE;
 8002a1c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8002a20:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8002a24:	4313      	orrs	r3, r2
 8002a26:	b2da      	uxtb	r2, r3
 8002a28:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 8002a2c:	4313      	orrs	r3, r2
 8002a2e:	b2da      	uxtb	r2, r3
 8002a30:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8002a34:	4313      	orrs	r3, r2
 8002a36:	b2db      	uxtb	r3, r3
 8002a38:	723b      	strb	r3, [r7, #8]
    ret = ISM330DHCX_WriteReg(&Handle->Context, ISM330DHCX_REG_CTRL6_C, buffer, 1);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	f103 001c 	add.w	r0, r3, #28
 8002a40:	f107 0208 	add.w	r2, r7, #8
 8002a44:	2301      	movs	r3, #1
 8002a46:	2115      	movs	r1, #21
 8002a48:	f000 f985 	bl	8002d56 <ISM330DHCX_WriteReg>
 8002a4c:	6178      	str	r0, [r7, #20]
    if(ret != ISM330DHCX_Ok)
 8002a4e:	697b      	ldr	r3, [r7, #20]
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d001      	beq.n	8002a58 <ISM330DHCX_RegisterInit+0x242>
    {
    	return ret;
 8002a54:	697b      	ldr	r3, [r7, #20]
 8002a56:	e0bd      	b.n	8002bd4 <ISM330DHCX_RegisterInit+0x3be>
    }


    buffer[0] = Settings.G_HM_MODE | Settings.HP_EN_G | Settings.HPM_G | Settings.USR_OFF_ON_OUT;
 8002a58:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 8002a5c:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8002a60:	4313      	orrs	r3, r2
 8002a62:	b2da      	uxtb	r2, r3
 8002a64:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8002a68:	4313      	orrs	r3, r2
 8002a6a:	b2da      	uxtb	r2, r3
 8002a6c:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 8002a70:	4313      	orrs	r3, r2
 8002a72:	b2db      	uxtb	r3, r3
 8002a74:	723b      	strb	r3, [r7, #8]
    ret = ISM330DHCX_WriteReg(&Handle->Context, ISM330DHCX_REG_CTRL7_G, buffer, 1);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	f103 001c 	add.w	r0, r3, #28
 8002a7c:	f107 0208 	add.w	r2, r7, #8
 8002a80:	2301      	movs	r3, #1
 8002a82:	2116      	movs	r1, #22
 8002a84:	f000 f967 	bl	8002d56 <ISM330DHCX_WriteReg>
 8002a88:	6178      	str	r0, [r7, #20]
    if(ret != ISM330DHCX_Ok)
 8002a8a:	697b      	ldr	r3, [r7, #20]
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d001      	beq.n	8002a94 <ISM330DHCX_RegisterInit+0x27e>
    {
    	return ret;
 8002a90:	697b      	ldr	r3, [r7, #20]
 8002a92:	e09f      	b.n	8002bd4 <ISM330DHCX_RegisterInit+0x3be>
    }


    buffer[0] = Settings.HPCF_XL | Settings.HP_REF_MODE_XL | Settings.FASTSETTL_MODE_XL | Settings.HP_SLOPE_XL_EN;
 8002a94:	f897 2040 	ldrb.w	r2, [r7, #64]	; 0x40
 8002a98:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8002a9c:	4313      	orrs	r3, r2
 8002a9e:	b2da      	uxtb	r2, r3
 8002aa0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002aa4:	4313      	orrs	r3, r2
 8002aa6:	b2da      	uxtb	r2, r3
 8002aa8:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8002aac:	4313      	orrs	r3, r2
 8002aae:	b2db      	uxtb	r3, r3
 8002ab0:	723b      	strb	r3, [r7, #8]
    ret = ISM330DHCX_WriteReg(&Handle->Context, ISM330DHCX_REG_CTRL8_XL, buffer, 1);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	f103 001c 	add.w	r0, r3, #28
 8002ab8:	f107 0208 	add.w	r2, r7, #8
 8002abc:	2301      	movs	r3, #1
 8002abe:	2117      	movs	r1, #23
 8002ac0:	f000 f949 	bl	8002d56 <ISM330DHCX_WriteReg>
 8002ac4:	6178      	str	r0, [r7, #20]
    if(ret != ISM330DHCX_Ok)
 8002ac6:	697b      	ldr	r3, [r7, #20]
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d001      	beq.n	8002ad0 <ISM330DHCX_RegisterInit+0x2ba>
    {
    	return ret;
 8002acc:	697b      	ldr	r3, [r7, #20]
 8002ace:	e081      	b.n	8002bd4 <ISM330DHCX_RegisterInit+0x3be>
    }


    buffer[0] = Settings.DEN_X | Settings.DEN_Y | Settings.DEN_Z | Settings.DEN_XL_G | Settings.DEN_XL_EN | Settings.DEN_LH;
 8002ad0:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8002ad4:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8002ad8:	4313      	orrs	r3, r2
 8002ada:	b2da      	uxtb	r2, r3
 8002adc:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8002ae0:	4313      	orrs	r3, r2
 8002ae2:	b2da      	uxtb	r2, r3
 8002ae4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002ae8:	4313      	orrs	r3, r2
 8002aea:	b2da      	uxtb	r2, r3
 8002aec:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002af0:	4313      	orrs	r3, r2
 8002af2:	b2da      	uxtb	r2, r3
 8002af4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002af8:	4313      	orrs	r3, r2
 8002afa:	b2db      	uxtb	r3, r3
 8002afc:	723b      	strb	r3, [r7, #8]
    ret = ISM330DHCX_WriteReg(&Handle->Context, ISM330DHCX_REG_CTRL9_XL, buffer, 1);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	f103 001c 	add.w	r0, r3, #28
 8002b04:	f107 0208 	add.w	r2, r7, #8
 8002b08:	2301      	movs	r3, #1
 8002b0a:	2118      	movs	r1, #24
 8002b0c:	f000 f923 	bl	8002d56 <ISM330DHCX_WriteReg>
 8002b10:	6178      	str	r0, [r7, #20]
    if(ret != ISM330DHCX_Ok)
 8002b12:	697b      	ldr	r3, [r7, #20]
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d001      	beq.n	8002b1c <ISM330DHCX_RegisterInit+0x306>
    {
    	return ret;
 8002b18:	697b      	ldr	r3, [r7, #20]
 8002b1a:	e05b      	b.n	8002bd4 <ISM330DHCX_RegisterInit+0x3be>
    }


    buffer[0] = Settings.TIMESTAMP_EN;
 8002b1c:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8002b20:	723b      	strb	r3, [r7, #8]
    ret = ISM330DHCX_WriteReg(&Handle->Context, ISM330DHCX_REG_CTRL10_C, buffer, 1);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	f103 001c 	add.w	r0, r3, #28
 8002b28:	f107 0208 	add.w	r2, r7, #8
 8002b2c:	2301      	movs	r3, #1
 8002b2e:	2119      	movs	r1, #25
 8002b30:	f000 f911 	bl	8002d56 <ISM330DHCX_WriteReg>
 8002b34:	6178      	str	r0, [r7, #20]
    if(ret != ISM330DHCX_Ok)
 8002b36:	697b      	ldr	r3, [r7, #20]
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d001      	beq.n	8002b40 <ISM330DHCX_RegisterInit+0x32a>
    {
    	return ret;
 8002b3c:	697b      	ldr	r3, [r7, #20]
 8002b3e:	e049      	b.n	8002bd4 <ISM330DHCX_RegisterInit+0x3be>
    }


    buffer[0] = Settings.ODR_XL | Settings.FS_XL | Settings.LPF2_XL_EN;
 8002b40:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 8002b44:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8002b48:	4313      	orrs	r3, r2
 8002b4a:	b2da      	uxtb	r2, r3
 8002b4c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002b50:	4313      	orrs	r3, r2
 8002b52:	b2db      	uxtb	r3, r3
 8002b54:	723b      	strb	r3, [r7, #8]
    ret = ISM330DHCX_WriteReg(&Handle->Context, ISM330DHCX_REG_CTRL1_XL, buffer, 1);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	f103 001c 	add.w	r0, r3, #28
 8002b5c:	f107 0208 	add.w	r2, r7, #8
 8002b60:	2301      	movs	r3, #1
 8002b62:	2110      	movs	r1, #16
 8002b64:	f000 f8f7 	bl	8002d56 <ISM330DHCX_WriteReg>
 8002b68:	6178      	str	r0, [r7, #20]
    if(ret != ISM330DHCX_Ok)
 8002b6a:	697b      	ldr	r3, [r7, #20]
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d001      	beq.n	8002b74 <ISM330DHCX_RegisterInit+0x35e>
    {
    	return ret;
 8002b70:	697b      	ldr	r3, [r7, #20]
 8002b72:	e02f      	b.n	8002bd4 <ISM330DHCX_RegisterInit+0x3be>
    }


    buffer[0] = Settings.ODR_G | Settings.FS_G;
 8002b74:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 8002b78:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8002b7c:	4313      	orrs	r3, r2
 8002b7e:	b2db      	uxtb	r3, r3
 8002b80:	723b      	strb	r3, [r7, #8]
    ret = ISM330DHCX_WriteReg(&Handle->Context, ISM330DHCX_REG_CTRL2_G, buffer, 1);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	f103 001c 	add.w	r0, r3, #28
 8002b88:	f107 0208 	add.w	r2, r7, #8
 8002b8c:	2301      	movs	r3, #1
 8002b8e:	2111      	movs	r1, #17
 8002b90:	f000 f8e1 	bl	8002d56 <ISM330DHCX_WriteReg>
 8002b94:	6178      	str	r0, [r7, #20]
    if(ret != ISM330DHCX_Ok)
 8002b96:	697b      	ldr	r3, [r7, #20]
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d001      	beq.n	8002ba0 <ISM330DHCX_RegisterInit+0x38a>
    {
    	return ret;
 8002b9c:	697b      	ldr	r3, [r7, #20]
 8002b9e:	e019      	b.n	8002bd4 <ISM330DHCX_RegisterInit+0x3be>
    }

    ret = ISM330DHCX_ReadReg(&Handle->Context, ISM330DHCX_REG_OUTX_L_G, buffer, 1);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	f103 001c 	add.w	r0, r3, #28
 8002ba6:	f107 0208 	add.w	r2, r7, #8
 8002baa:	2301      	movs	r3, #1
 8002bac:	2122      	movs	r1, #34	; 0x22
 8002bae:	f000 f8a9 	bl	8002d04 <ISM330DHCX_ReadReg>
 8002bb2:	6178      	str	r0, [r7, #20]
    //Discard Data that was collected during configuration
    ret = ISM330DHCX_ReadReg(&Handle->Context, ISM330DHCX_REG_OUTX_L_G, buffer, 12);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	f103 001c 	add.w	r0, r3, #28
 8002bba:	f107 0208 	add.w	r2, r7, #8
 8002bbe:	230c      	movs	r3, #12
 8002bc0:	2122      	movs	r1, #34	; 0x22
 8002bc2:	f000 f89f 	bl	8002d04 <ISM330DHCX_ReadReg>
 8002bc6:	6178      	str	r0, [r7, #20]
    if(ret != ISM330DHCX_Ok)
 8002bc8:	697b      	ldr	r3, [r7, #20]
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d001      	beq.n	8002bd2 <ISM330DHCX_RegisterInit+0x3bc>
    {
    	return ret;
 8002bce:	697b      	ldr	r3, [r7, #20]
 8002bd0:	e000      	b.n	8002bd4 <ISM330DHCX_RegisterInit+0x3be>
    }

    return ISM330DHCX_Ok;
 8002bd2:	2300      	movs	r3, #0
}
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	3718      	adds	r7, #24
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002bde:	b004      	add	sp, #16
 8002be0:	4770      	bx	lr
	...

08002be4 <ConvertXLData>:

static void ConvertXLData(ISM330DHCX_AccelFullscale_t AccelResolution, int16_t *buffer, float *data)
{
 8002be4:	b480      	push	{r7}
 8002be6:	b087      	sub	sp, #28
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	4603      	mov	r3, r0
 8002bec:	60b9      	str	r1, [r7, #8]
 8002bee:	607a      	str	r2, [r7, #4]
 8002bf0:	73fb      	strb	r3, [r7, #15]
      float ConversionFactor = 0;
 8002bf2:	f04f 0300 	mov.w	r3, #0
 8002bf6:	617b      	str	r3, [r7, #20]
      if(AccelResolution == ISM330DHCX_XL_2g)
 8002bf8:	7bfb      	ldrb	r3, [r7, #15]
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d102      	bne.n	8002c04 <ConvertXLData+0x20>
      {
    	  ConversionFactor = 0.061;
 8002bfe:	4b14      	ldr	r3, [pc, #80]	; (8002c50 <ConvertXLData+0x6c>)
 8002c00:	617b      	str	r3, [r7, #20]
 8002c02:	e00d      	b.n	8002c20 <ConvertXLData+0x3c>
      }else if(AccelResolution == ISM330DHCX_XL_16g)
 8002c04:	7bfb      	ldrb	r3, [r7, #15]
 8002c06:	2b04      	cmp	r3, #4
 8002c08:	d102      	bne.n	8002c10 <ConvertXLData+0x2c>
	  {
    	  ConversionFactor = 0.488;
 8002c0a:	4b12      	ldr	r3, [pc, #72]	; (8002c54 <ConvertXLData+0x70>)
 8002c0c:	617b      	str	r3, [r7, #20]
 8002c0e:	e007      	b.n	8002c20 <ConvertXLData+0x3c>
	  }else if(AccelResolution == ISM330DHCX_XL_8g)
 8002c10:	7bfb      	ldrb	r3, [r7, #15]
 8002c12:	2b0c      	cmp	r3, #12
 8002c14:	d102      	bne.n	8002c1c <ConvertXLData+0x38>
	  {
		  ConversionFactor = 0.244;
 8002c16:	4b10      	ldr	r3, [pc, #64]	; (8002c58 <ConvertXLData+0x74>)
 8002c18:	617b      	str	r3, [r7, #20]
 8002c1a:	e001      	b.n	8002c20 <ConvertXLData+0x3c>
	  }else //4g
	  {
		  ConversionFactor = 0.122;
 8002c1c:	4b0f      	ldr	r3, [pc, #60]	; (8002c5c <ConvertXLData+0x78>)
 8002c1e:	617b      	str	r3, [r7, #20]
	  }
      *data = (ConversionFactor * (*buffer)) / 1000.0; //Div by 1000 to convert g, not mg
 8002c20:	68bb      	ldr	r3, [r7, #8]
 8002c22:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002c26:	ee07 3a90 	vmov	s15, r3
 8002c2a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002c2e:	edd7 7a05 	vldr	s15, [r7, #20]
 8002c32:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002c36:	eddf 6a0a 	vldr	s13, [pc, #40]	; 8002c60 <ConvertXLData+0x7c>
 8002c3a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	edc3 7a00 	vstr	s15, [r3]
}
 8002c44:	bf00      	nop
 8002c46:	371c      	adds	r7, #28
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4e:	4770      	bx	lr
 8002c50:	3d79db23 	.word	0x3d79db23
 8002c54:	3ef9db23 	.word	0x3ef9db23
 8002c58:	3e79db23 	.word	0x3e79db23
 8002c5c:	3df9db23 	.word	0x3df9db23
 8002c60:	447a0000 	.word	0x447a0000

08002c64 <ConvertGData>:

static void ConvertGData(ISM330DHCX_GyroFullScale_t GyroResolution, int16_t *buffer, float *data)
{
 8002c64:	b480      	push	{r7}
 8002c66:	b087      	sub	sp, #28
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	4603      	mov	r3, r0
 8002c6c:	60b9      	str	r1, [r7, #8]
 8002c6e:	607a      	str	r2, [r7, #4]
 8002c70:	73fb      	strb	r3, [r7, #15]

      float ConversionFactor = 0;
 8002c72:	f04f 0300 	mov.w	r3, #0
 8002c76:	617b      	str	r3, [r7, #20]
      if(GyroResolution == ISM330DHCX_G_125DPS)
 8002c78:	7bfb      	ldrb	r3, [r7, #15]
 8002c7a:	2b02      	cmp	r3, #2
 8002c7c:	d102      	bne.n	8002c84 <ConvertGData+0x20>
      {
    	  ConversionFactor = 0.004375;
 8002c7e:	4b1a      	ldr	r3, [pc, #104]	; (8002ce8 <ConvertGData+0x84>)
 8002c80:	617b      	str	r3, [r7, #20]
 8002c82:	e019      	b.n	8002cb8 <ConvertGData+0x54>
      }else if(GyroResolution == ISM330DHCX_G_250DPS)
 8002c84:	7bfb      	ldrb	r3, [r7, #15]
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d102      	bne.n	8002c90 <ConvertGData+0x2c>
	  {
    	  ConversionFactor = 0.00875;
 8002c8a:	4b18      	ldr	r3, [pc, #96]	; (8002cec <ConvertGData+0x88>)
 8002c8c:	617b      	str	r3, [r7, #20]
 8002c8e:	e013      	b.n	8002cb8 <ConvertGData+0x54>
	  }else if(GyroResolution == ISM330DHCX_G_500DPS)
 8002c90:	7bfb      	ldrb	r3, [r7, #15]
 8002c92:	2b04      	cmp	r3, #4
 8002c94:	d102      	bne.n	8002c9c <ConvertGData+0x38>
	  {
		  ConversionFactor = 0.0175;
 8002c96:	4b16      	ldr	r3, [pc, #88]	; (8002cf0 <ConvertGData+0x8c>)
 8002c98:	617b      	str	r3, [r7, #20]
 8002c9a:	e00d      	b.n	8002cb8 <ConvertGData+0x54>
	  }else if(GyroResolution == ISM330DHCX_G_1000DPS)
 8002c9c:	7bfb      	ldrb	r3, [r7, #15]
 8002c9e:	2b08      	cmp	r3, #8
 8002ca0:	d102      	bne.n	8002ca8 <ConvertGData+0x44>
	  {
		  ConversionFactor = 0.035;
 8002ca2:	4b14      	ldr	r3, [pc, #80]	; (8002cf4 <ConvertGData+0x90>)
 8002ca4:	617b      	str	r3, [r7, #20]
 8002ca6:	e007      	b.n	8002cb8 <ConvertGData+0x54>
	  }else if(GyroResolution == ISM330DHCX_G_2000DPS)
 8002ca8:	7bfb      	ldrb	r3, [r7, #15]
 8002caa:	2b0c      	cmp	r3, #12
 8002cac:	d102      	bne.n	8002cb4 <ConvertGData+0x50>
	  {
		  ConversionFactor = 0.070;
 8002cae:	4b12      	ldr	r3, [pc, #72]	; (8002cf8 <ConvertGData+0x94>)
 8002cb0:	617b      	str	r3, [r7, #20]
 8002cb2:	e001      	b.n	8002cb8 <ConvertGData+0x54>
	  }else //4000DPS
	  {
		  ConversionFactor = 0.140;
 8002cb4:	4b11      	ldr	r3, [pc, #68]	; (8002cfc <ConvertGData+0x98>)
 8002cb6:	617b      	str	r3, [r7, #20]
	  }
      *data = ConversionFactor * (*buffer) / 1000.0; //Div by 1000 to convert to DPS from mDPS
 8002cb8:	68bb      	ldr	r3, [r7, #8]
 8002cba:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002cbe:	ee07 3a90 	vmov	s15, r3
 8002cc2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002cc6:	edd7 7a05 	vldr	s15, [r7, #20]
 8002cca:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002cce:	eddf 6a0c 	vldr	s13, [pc, #48]	; 8002d00 <ConvertGData+0x9c>
 8002cd2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	edc3 7a00 	vstr	s15, [r3]
}
 8002cdc:	bf00      	nop
 8002cde:	371c      	adds	r7, #28
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce6:	4770      	bx	lr
 8002ce8:	3b8f5c29 	.word	0x3b8f5c29
 8002cec:	3c0f5c29 	.word	0x3c0f5c29
 8002cf0:	3c8f5c29 	.word	0x3c8f5c29
 8002cf4:	3d0f5c29 	.word	0x3d0f5c29
 8002cf8:	3d8f5c29 	.word	0x3d8f5c29
 8002cfc:	3e0f5c29 	.word	0x3e0f5c29
 8002d00:	447a0000 	.word	0x447a0000

08002d04 <ISM330DHCX_ReadReg>:
#include <stddef.h>

static int32_t ISM330DHCX_ValidateParams(uint8_t Reg, uint8_t *Buffer, uint8_t Length);

int32_t ISM330DHCX_ReadReg(ISM330DHCX_Context_t *Context, uint8_t Reg, uint8_t *Buffer, uint8_t Length)
{
 8002d04:	b590      	push	{r4, r7, lr}
 8002d06:	b087      	sub	sp, #28
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	60f8      	str	r0, [r7, #12]
 8002d0c:	607a      	str	r2, [r7, #4]
 8002d0e:	461a      	mov	r2, r3
 8002d10:	460b      	mov	r3, r1
 8002d12:	72fb      	strb	r3, [r7, #11]
 8002d14:	4613      	mov	r3, r2
 8002d16:	72bb      	strb	r3, [r7, #10]
	if(Context->Read == NULL)
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	689b      	ldr	r3, [r3, #8]
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d101      	bne.n	8002d24 <ISM330DHCX_ReadReg+0x20>
	{
		return ISM330DHCX_REG_CONTEXT_ERR;
 8002d20:	2308      	movs	r3, #8
 8002d22:	e014      	b.n	8002d4e <ISM330DHCX_ReadReg+0x4a>
	}

	int32_t ret = ISM330DHCX_ValidateParams(Reg,Buffer,Length);
 8002d24:	7aba      	ldrb	r2, [r7, #10]
 8002d26:	7afb      	ldrb	r3, [r7, #11]
 8002d28:	6879      	ldr	r1, [r7, #4]
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	f000 f83c 	bl	8002da8 <ISM330DHCX_ValidateParams>
 8002d30:	6178      	str	r0, [r7, #20]
	if(ret != ISM330DHCX_REG_NO_ERR)
 8002d32:	697b      	ldr	r3, [r7, #20]
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d001      	beq.n	8002d3c <ISM330DHCX_ReadReg+0x38>
	{
        return ret;
 8002d38:	697b      	ldr	r3, [r7, #20]
 8002d3a:	e008      	b.n	8002d4e <ISM330DHCX_ReadReg+0x4a>
	}

	return Context->Read(Context->Handle, Reg, Buffer, Length);
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	689c      	ldr	r4, [r3, #8]
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	6818      	ldr	r0, [r3, #0]
 8002d44:	7abb      	ldrb	r3, [r7, #10]
 8002d46:	7af9      	ldrb	r1, [r7, #11]
 8002d48:	687a      	ldr	r2, [r7, #4]
 8002d4a:	47a0      	blx	r4
 8002d4c:	4603      	mov	r3, r0
}
 8002d4e:	4618      	mov	r0, r3
 8002d50:	371c      	adds	r7, #28
 8002d52:	46bd      	mov	sp, r7
 8002d54:	bd90      	pop	{r4, r7, pc}

08002d56 <ISM330DHCX_WriteReg>:

int32_t ISM330DHCX_WriteReg(ISM330DHCX_Context_t *Context, uint8_t Reg, uint8_t *Buffer, uint8_t Length)
{
 8002d56:	b590      	push	{r4, r7, lr}
 8002d58:	b087      	sub	sp, #28
 8002d5a:	af00      	add	r7, sp, #0
 8002d5c:	60f8      	str	r0, [r7, #12]
 8002d5e:	607a      	str	r2, [r7, #4]
 8002d60:	461a      	mov	r2, r3
 8002d62:	460b      	mov	r3, r1
 8002d64:	72fb      	strb	r3, [r7, #11]
 8002d66:	4613      	mov	r3, r2
 8002d68:	72bb      	strb	r3, [r7, #10]
	if(Context->Write == NULL)
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	685b      	ldr	r3, [r3, #4]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d101      	bne.n	8002d76 <ISM330DHCX_WriteReg+0x20>
	{
		return ISM330DHCX_REG_CONTEXT_ERR;
 8002d72:	2308      	movs	r3, #8
 8002d74:	e014      	b.n	8002da0 <ISM330DHCX_WriteReg+0x4a>
	}

	int32_t ret = ISM330DHCX_ValidateParams(Reg,Buffer,Length);
 8002d76:	7aba      	ldrb	r2, [r7, #10]
 8002d78:	7afb      	ldrb	r3, [r7, #11]
 8002d7a:	6879      	ldr	r1, [r7, #4]
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	f000 f813 	bl	8002da8 <ISM330DHCX_ValidateParams>
 8002d82:	6178      	str	r0, [r7, #20]
	if(ret != ISM330DHCX_REG_NO_ERR)
 8002d84:	697b      	ldr	r3, [r7, #20]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d001      	beq.n	8002d8e <ISM330DHCX_WriteReg+0x38>
	{
        return ret;
 8002d8a:	697b      	ldr	r3, [r7, #20]
 8002d8c:	e008      	b.n	8002da0 <ISM330DHCX_WriteReg+0x4a>
	}

	return Context->Write(Context->Handle, Reg, Buffer, Length);
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	685c      	ldr	r4, [r3, #4]
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	6818      	ldr	r0, [r3, #0]
 8002d96:	7abb      	ldrb	r3, [r7, #10]
 8002d98:	7af9      	ldrb	r1, [r7, #11]
 8002d9a:	687a      	ldr	r2, [r7, #4]
 8002d9c:	47a0      	blx	r4
 8002d9e:	4603      	mov	r3, r0
}
 8002da0:	4618      	mov	r0, r3
 8002da2:	371c      	adds	r7, #28
 8002da4:	46bd      	mov	sp, r7
 8002da6:	bd90      	pop	{r4, r7, pc}

08002da8 <ISM330DHCX_ValidateParams>:

static int32_t ISM330DHCX_ValidateParams(uint8_t Reg, uint8_t *Buffer, uint8_t Length)
{
 8002da8:	b480      	push	{r7}
 8002daa:	b085      	sub	sp, #20
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	4603      	mov	r3, r0
 8002db0:	6039      	str	r1, [r7, #0]
 8002db2:	71fb      	strb	r3, [r7, #7]
 8002db4:	4613      	mov	r3, r2
 8002db6:	71bb      	strb	r3, [r7, #6]
	int32_t ret = 0;
 8002db8:	2300      	movs	r3, #0
 8002dba:	60fb      	str	r3, [r7, #12]
	if(Reg < ISM330DHCX_REG_FUNC_CFG_ACCESS || Reg > ISM330DHCX_REG_FIFO_OUT_Z_H)
 8002dbc:	79fb      	ldrb	r3, [r7, #7]
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d002      	beq.n	8002dc8 <ISM330DHCX_ValidateParams+0x20>
 8002dc2:	79fb      	ldrb	r3, [r7, #7]
 8002dc4:	2b7e      	cmp	r3, #126	; 0x7e
 8002dc6:	d903      	bls.n	8002dd0 <ISM330DHCX_ValidateParams+0x28>
	{
		ret |= ISM330DHCX_REG_PARAM_ERR;
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	f043 0301 	orr.w	r3, r3, #1
 8002dce:	60fb      	str	r3, [r7, #12]
	}

	if(Buffer == NULL)
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d103      	bne.n	8002dde <ISM330DHCX_ValidateParams+0x36>
	{
        ret |= ISM330DHCX_BUFFER_PARAM_ERR;
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	f043 0302 	orr.w	r3, r3, #2
 8002ddc:	60fb      	str	r3, [r7, #12]
	}

	if( Length == 0 || Length > (ISM330DHCX_REG_FIFO_OUT_Z_H - ISM330DHCX_REG_FUNC_CFG_ACCESS))
 8002dde:	79bb      	ldrb	r3, [r7, #6]
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d002      	beq.n	8002dea <ISM330DHCX_ValidateParams+0x42>
 8002de4:	79bb      	ldrb	r3, [r7, #6]
 8002de6:	2b7d      	cmp	r3, #125	; 0x7d
 8002de8:	d903      	bls.n	8002df2 <ISM330DHCX_ValidateParams+0x4a>
	{
		ret |= ISM330DHCX_LENGTH_PARAM_ERR;
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	f043 0304 	orr.w	r3, r3, #4
 8002df0:	60fb      	str	r3, [r7, #12]
	}

	return ret;
 8002df2:	68fb      	ldr	r3, [r7, #12]
}
 8002df4:	4618      	mov	r0, r3
 8002df6:	3714      	adds	r7, #20
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfe:	4770      	bx	lr

08002e00 <LPS22HH_Init>:
static int32_t LPS22HH_ReadRegWrapper(void *Handle,uint8_t Reg, uint8_t *Buffer, uint8_t Length);
static int32_t LPS22HH_RegisterInit(LPS22HH_Handle_t *Handle, LPS22HH_Init_Struct_t Settings);
static void ConvertPressureData(uint8_t *buffer, float *pressure);

int32_t LPS22HH_Init(LPS22HH_Handle_t *Handle, LPS22HH_Init_Struct_t Settings, LPS22HH_IO_t *IO)
{
 8002e00:	b084      	sub	sp, #16
 8002e02:	b5b0      	push	{r4, r5, r7, lr}
 8002e04:	b086      	sub	sp, #24
 8002e06:	af02      	add	r7, sp, #8
 8002e08:	6078      	str	r0, [r7, #4]
 8002e0a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8002e0e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	if(Handle->Status != LPS22HH_Initialized)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002e18:	2b01      	cmp	r3, #1
 8002e1a:	d04a      	beq.n	8002eb2 <LPS22HH_Init+0xb2>
	    {

	    if(Handle == NULL)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d102      	bne.n	8002e28 <LPS22HH_Init+0x28>
	    {
		    return LPS22HH_HandleError;
 8002e22:	f04f 33ff 	mov.w	r3, #4294967295
 8002e26:	e045      	b.n	8002eb4 <LPS22HH_Init+0xb4>
	    }

	    if(IO->Write == NULL || IO->Read == NULL || IO->GetTick == NULL)
 8002e28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e2a:	68db      	ldr	r3, [r3, #12]
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d007      	beq.n	8002e40 <LPS22HH_Init+0x40>
 8002e30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e32:	689b      	ldr	r3, [r3, #8]
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d003      	beq.n	8002e40 <LPS22HH_Init+0x40>
 8002e38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e3a:	691b      	ldr	r3, [r3, #16]
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d102      	bne.n	8002e46 <LPS22HH_Init+0x46>
	    {
            return LPS22HH_IOError;
 8002e40:	f06f 0301 	mvn.w	r3, #1
 8002e44:	e036      	b.n	8002eb4 <LPS22HH_Init+0xb4>
	    }

	    Handle->IO = *IO;
 8002e46:	687a      	ldr	r2, [r7, #4]
 8002e48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e4a:	4614      	mov	r4, r2
 8002e4c:	461d      	mov	r5, r3
 8002e4e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002e50:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002e52:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002e56:	e884 0003 	stmia.w	r4, {r0, r1}
	    Handle->DataRate = Settings.ODR;
 8002e5a:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	    Handle->Context.Handle = Handle;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	687a      	ldr	r2, [r7, #4]
 8002e68:	619a      	str	r2, [r3, #24]
	    Handle->Context.Read = LPS22HH_ReadRegWrapper;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	4a15      	ldr	r2, [pc, #84]	; (8002ec4 <LPS22HH_Init+0xc4>)
 8002e6e:	61da      	str	r2, [r3, #28]
	    Handle->Context.Write = LPS22HH_WriteRegWrapper;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	4a15      	ldr	r2, [pc, #84]	; (8002ec8 <LPS22HH_Init+0xc8>)
 8002e74:	621a      	str	r2, [r3, #32]

	    if(Handle->IO.Init != NULL)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d002      	beq.n	8002e84 <LPS22HH_Init+0x84>
	    {
	    	Handle->IO.Init();
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	4798      	blx	r3
	    }

        int32_t ret = LPS22HH_RegisterInit(Handle, Settings);
 8002e84:	466a      	mov	r2, sp
 8002e86:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002e8a:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002e8e:	e882 0003 	stmia.w	r2, {r0, r1}
 8002e92:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e96:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002e98:	6878      	ldr	r0, [r7, #4]
 8002e9a:	f000 f95f 	bl	800315c <LPS22HH_RegisterInit>
 8002e9e:	60f8      	str	r0, [r7, #12]
        if(ret != LPS22HH_Ok)
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d001      	beq.n	8002eaa <LPS22HH_Init+0xaa>
        {
        	return ret;
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	e004      	b.n	8002eb4 <LPS22HH_Init+0xb4>
        }

	    Handle->Status = LPS22HH_Initialized;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	2201      	movs	r2, #1
 8002eae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	    }
	return LPS22HH_Ok;
 8002eb2:	2300      	movs	r3, #0
}
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	3710      	adds	r7, #16
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8002ebe:	b004      	add	sp, #16
 8002ec0:	4770      	bx	lr
 8002ec2:	bf00      	nop
 8002ec4:	0800311f 	.word	0x0800311f
 8002ec8:	080030e3 	.word	0x080030e3

08002ecc <LPS22HH_ResetDevice>:
	Handle->Status = LPS22HH_Uninitialized;
	return LPS22HH_Ok;
}

int32_t LPS22HH_ResetDevice(LPS22HH_Handle_t *Handle)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b084      	sub	sp, #16
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
	int32_t ret = LPS22HH_Ok;
 8002ed4:	2300      	movs	r3, #0
 8002ed6:	60fb      	str	r3, [r7, #12]
	if(Handle == NULL)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d102      	bne.n	8002ee4 <LPS22HH_ResetDevice+0x18>
	{
		return LPS22HH_HandleError;
 8002ede:	f04f 33ff 	mov.w	r3, #4294967295
 8002ee2:	e012      	b.n	8002f0a <LPS22HH_ResetDevice+0x3e>
	}

	ret = LPS22HH_Reboot(Handle);
 8002ee4:	6878      	ldr	r0, [r7, #4]
 8002ee6:	f000 f8ab 	bl	8003040 <LPS22HH_Reboot>
 8002eea:	60f8      	str	r0, [r7, #12]
	if(ret != LPS22HH_Ok)
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d001      	beq.n	8002ef6 <LPS22HH_ResetDevice+0x2a>
	{
		return ret;
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	e009      	b.n	8002f0a <LPS22HH_ResetDevice+0x3e>
	}


	ret = LPS22HH_SWReset(Handle);
 8002ef6:	6878      	ldr	r0, [r7, #4]
 8002ef8:	f000 f850 	bl	8002f9c <LPS22HH_SWReset>
 8002efc:	60f8      	str	r0, [r7, #12]
	if(ret != LPS22HH_Ok)
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d001      	beq.n	8002f08 <LPS22HH_ResetDevice+0x3c>
	{
		return ret;
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	e000      	b.n	8002f0a <LPS22HH_ResetDevice+0x3e>
	}

	return LPS22HH_Ok;
 8002f08:	2300      	movs	r3, #0
}
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	3710      	adds	r7, #16
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	bd80      	pop	{r7, pc}
	...

08002f14 <LPS22HH_ReadPressure>:

	return LPS22HH_WriteReg(&Handle->Context,LPS22HH_REG_CTRL_REG2, &buffer, 1); //Store

}
int32_t LPS22HH_ReadPressure(LPS22HH_Handle_t *Handle, float *Pressure)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b084      	sub	sp, #16
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
 8002f1c:	6039      	str	r1, [r7, #0]
	if(Handle->Status != LPS22HH_Initialized)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002f24:	2b01      	cmp	r3, #1
 8002f26:	d002      	beq.n	8002f2e <LPS22HH_ReadPressure+0x1a>
	{
		return LPS22HH_InitError;
 8002f28:	f06f 0302 	mvn.w	r3, #2
 8002f2c:	e030      	b.n	8002f90 <LPS22HH_ReadPressure+0x7c>
	}

	uint8_t buffer[3] = {0};
 8002f2e:	4b1a      	ldr	r3, [pc, #104]	; (8002f98 <LPS22HH_ReadPressure+0x84>)
 8002f30:	881b      	ldrh	r3, [r3, #0]
 8002f32:	813b      	strh	r3, [r7, #8]
 8002f34:	2300      	movs	r3, #0
 8002f36:	72bb      	strb	r3, [r7, #10]

	int32_t ret = LPS22HH_ReadReg(&Handle->Context, LPS22HH_REG_STATUS, buffer, 1);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	f103 0018 	add.w	r0, r3, #24
 8002f3e:	f107 0208 	add.w	r2, r7, #8
 8002f42:	2301      	movs	r3, #1
 8002f44:	2127      	movs	r1, #39	; 0x27
 8002f46:	f000 fa71 	bl	800342c <LPS22HH_ReadReg>
 8002f4a:	60f8      	str	r0, [r7, #12]
	if(ret != LPS22HH_Ok)
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d001      	beq.n	8002f56 <LPS22HH_ReadPressure+0x42>
	{
		return ret;
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	e01c      	b.n	8002f90 <LPS22HH_ReadPressure+0x7c>
	}

	if(!(buffer[0] & LPS22HH_PDATA_Msk))
 8002f56:	7a3b      	ldrb	r3, [r7, #8]
 8002f58:	f003 0301 	and.w	r3, r3, #1
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d101      	bne.n	8002f64 <LPS22HH_ReadPressure+0x50>
	{
		return LPS22HH_NoNewData;
 8002f60:	2301      	movs	r3, #1
 8002f62:	e015      	b.n	8002f90 <LPS22HH_ReadPressure+0x7c>
	}

	ret = LPS22HH_ReadReg(&Handle->Context, LPS22HH_REG_PRESSURE_OUT_XL, buffer, 3);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	f103 0018 	add.w	r0, r3, #24
 8002f6a:	f107 0208 	add.w	r2, r7, #8
 8002f6e:	2303      	movs	r3, #3
 8002f70:	2128      	movs	r1, #40	; 0x28
 8002f72:	f000 fa5b 	bl	800342c <LPS22HH_ReadReg>
 8002f76:	60f8      	str	r0, [r7, #12]
	if(ret != LPS22HH_Ok)
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d001      	beq.n	8002f82 <LPS22HH_ReadPressure+0x6e>
	{
		return ret;
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	e006      	b.n	8002f90 <LPS22HH_ReadPressure+0x7c>
	}

	ConvertPressureData(buffer, Pressure);
 8002f82:	f107 0308 	add.w	r3, r7, #8
 8002f86:	6839      	ldr	r1, [r7, #0]
 8002f88:	4618      	mov	r0, r3
 8002f8a:	f000 f9e5 	bl	8003358 <ConvertPressureData>
	return LPS22HH_Ok;
 8002f8e:	2300      	movs	r3, #0
}
 8002f90:	4618      	mov	r0, r3
 8002f92:	3710      	adds	r7, #16
 8002f94:	46bd      	mov	sp, r7
 8002f96:	bd80      	pop	{r7, pc}
 8002f98:	0800e83c 	.word	0x0800e83c

08002f9c <LPS22HH_SWReset>:


static int32_t LPS22HH_SWReset(LPS22HH_Handle_t *Handle)
{
 8002f9c:	b590      	push	{r4, r7, lr}
 8002f9e:	b087      	sub	sp, #28
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
    if(Handle == NULL)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d102      	bne.n	8002fb0 <LPS22HH_SWReset+0x14>
    {
        return LPS22HH_HandleError;
 8002faa:	f04f 33ff 	mov.w	r3, #4294967295
 8002fae:	e043      	b.n	8003038 <LPS22HH_SWReset+0x9c>
    }

    if(Handle->Context.Read == NULL || Handle->Context.Write == NULL)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	69db      	ldr	r3, [r3, #28]
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d003      	beq.n	8002fc0 <LPS22HH_SWReset+0x24>
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	6a1b      	ldr	r3, [r3, #32]
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d102      	bne.n	8002fc6 <LPS22HH_SWReset+0x2a>
    {
    	return LPS22HH_IOError;
 8002fc0:	f06f 0301 	mvn.w	r3, #1
 8002fc4:	e038      	b.n	8003038 <LPS22HH_SWReset+0x9c>
    }


    int32_t ret = 0;
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	617b      	str	r3, [r7, #20]
    uint8_t buffer = LPS22HH_ResetSignal;
 8002fca:	2304      	movs	r3, #4
 8002fcc:	73fb      	strb	r3, [r7, #15]
    ret = LPS22HH_WriteReg(&Handle->Context, LPS22HH_REG_CTRL_REG2, &buffer, 1);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	f103 0018 	add.w	r0, r3, #24
 8002fd4:	f107 020f 	add.w	r2, r7, #15
 8002fd8:	2301      	movs	r3, #1
 8002fda:	2111      	movs	r1, #17
 8002fdc:	f000 fa4b 	bl	8003476 <LPS22HH_WriteReg>
 8002fe0:	6178      	str	r0, [r7, #20]
    if(ret != LPS22HH_Ok)
 8002fe2:	697b      	ldr	r3, [r7, #20]
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d001      	beq.n	8002fec <LPS22HH_SWReset+0x50>
    {
    	return ret;
 8002fe8:	697b      	ldr	r3, [r7, #20]
 8002fea:	e025      	b.n	8003038 <LPS22HH_SWReset+0x9c>
    }

    uint32_t timer = Handle->IO.GetTick();
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	691b      	ldr	r3, [r3, #16]
 8002ff0:	4798      	blx	r3
 8002ff2:	6138      	str	r0, [r7, #16]
    while(buffer & LPS22HH_ResetSignal)
 8002ff4:	e01a      	b.n	800302c <LPS22HH_SWReset+0x90>
    {
    	ret = LPS22HH_ReadReg(&Handle->Context, LPS22HH_REG_CTRL_REG2, &buffer, 1);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	f103 0018 	add.w	r0, r3, #24
 8002ffc:	f107 020f 	add.w	r2, r7, #15
 8003000:	2301      	movs	r3, #1
 8003002:	2111      	movs	r1, #17
 8003004:	f000 fa12 	bl	800342c <LPS22HH_ReadReg>
 8003008:	6178      	str	r0, [r7, #20]
    	if(ret != LPS22HH_Ok)
 800300a:	697b      	ldr	r3, [r7, #20]
 800300c:	2b00      	cmp	r3, #0
 800300e:	d001      	beq.n	8003014 <LPS22HH_SWReset+0x78>
    	{
    		return ret;
 8003010:	697b      	ldr	r3, [r7, #20]
 8003012:	e011      	b.n	8003038 <LPS22HH_SWReset+0x9c>
    	}

    	if(timer + 100 < Handle->IO.GetTick())
 8003014:	693b      	ldr	r3, [r7, #16]
 8003016:	f103 0464 	add.w	r4, r3, #100	; 0x64
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	691b      	ldr	r3, [r3, #16]
 800301e:	4798      	blx	r3
 8003020:	4603      	mov	r3, r0
 8003022:	429c      	cmp	r4, r3
 8003024:	d202      	bcs.n	800302c <LPS22HH_SWReset+0x90>
    	{
    		return LPS22HH_Timeout;
 8003026:	f06f 0305 	mvn.w	r3, #5
 800302a:	e005      	b.n	8003038 <LPS22HH_SWReset+0x9c>
    while(buffer & LPS22HH_ResetSignal)
 800302c:	7bfb      	ldrb	r3, [r7, #15]
 800302e:	f003 0304 	and.w	r3, r3, #4
 8003032:	2b00      	cmp	r3, #0
 8003034:	d1df      	bne.n	8002ff6 <LPS22HH_SWReset+0x5a>
    	}
    }
    return ret;
 8003036:	697b      	ldr	r3, [r7, #20]
}
 8003038:	4618      	mov	r0, r3
 800303a:	371c      	adds	r7, #28
 800303c:	46bd      	mov	sp, r7
 800303e:	bd90      	pop	{r4, r7, pc}

08003040 <LPS22HH_Reboot>:

static int32_t LPS22HH_Reboot(LPS22HH_Handle_t *Handle)
{
 8003040:	b590      	push	{r4, r7, lr}
 8003042:	b087      	sub	sp, #28
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
    if(Handle == NULL)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2b00      	cmp	r3, #0
 800304c:	d102      	bne.n	8003054 <LPS22HH_Reboot+0x14>
    {
        return LPS22HH_HandleError;
 800304e:	f04f 33ff 	mov.w	r3, #4294967295
 8003052:	e042      	b.n	80030da <LPS22HH_Reboot+0x9a>
    }

    if(Handle->Context.Read == NULL || Handle->Context.Write == NULL)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	69db      	ldr	r3, [r3, #28]
 8003058:	2b00      	cmp	r3, #0
 800305a:	d003      	beq.n	8003064 <LPS22HH_Reboot+0x24>
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	6a1b      	ldr	r3, [r3, #32]
 8003060:	2b00      	cmp	r3, #0
 8003062:	d102      	bne.n	800306a <LPS22HH_Reboot+0x2a>
    {
    	return LPS22HH_IOError;
 8003064:	f06f 0301 	mvn.w	r3, #1
 8003068:	e037      	b.n	80030da <LPS22HH_Reboot+0x9a>
    }

    int32_t ret = 0;
 800306a:	2300      	movs	r3, #0
 800306c:	617b      	str	r3, [r7, #20]
    uint8_t buffer = LPS22HH_RebootSignal;
 800306e:	2380      	movs	r3, #128	; 0x80
 8003070:	73fb      	strb	r3, [r7, #15]
    ret = LPS22HH_WriteReg(&Handle->Context, LPS22HH_REG_CTRL_REG2, &buffer, 1);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	f103 0018 	add.w	r0, r3, #24
 8003078:	f107 020f 	add.w	r2, r7, #15
 800307c:	2301      	movs	r3, #1
 800307e:	2111      	movs	r1, #17
 8003080:	f000 f9f9 	bl	8003476 <LPS22HH_WriteReg>
 8003084:	6178      	str	r0, [r7, #20]
    if(ret != LPS22HH_Ok)
 8003086:	697b      	ldr	r3, [r7, #20]
 8003088:	2b00      	cmp	r3, #0
 800308a:	d001      	beq.n	8003090 <LPS22HH_Reboot+0x50>
    {
    	return ret;
 800308c:	697b      	ldr	r3, [r7, #20]
 800308e:	e024      	b.n	80030da <LPS22HH_Reboot+0x9a>
    }

    uint32_t timer = Handle->IO.GetTick();
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	691b      	ldr	r3, [r3, #16]
 8003094:	4798      	blx	r3
 8003096:	6138      	str	r0, [r7, #16]
    while(buffer & LPS22HH_RebootSignal)
 8003098:	e01a      	b.n	80030d0 <LPS22HH_Reboot+0x90>
    {
    	ret = LPS22HH_ReadReg(&Handle->Context, LPS22HH_REG_INT_SOURCE, &buffer, 1);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	f103 0018 	add.w	r0, r3, #24
 80030a0:	f107 020f 	add.w	r2, r7, #15
 80030a4:	2301      	movs	r3, #1
 80030a6:	2124      	movs	r1, #36	; 0x24
 80030a8:	f000 f9c0 	bl	800342c <LPS22HH_ReadReg>
 80030ac:	6178      	str	r0, [r7, #20]
    	if(ret != LPS22HH_Ok)
 80030ae:	697b      	ldr	r3, [r7, #20]
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d001      	beq.n	80030b8 <LPS22HH_Reboot+0x78>
    	{
    		return ret;
 80030b4:	697b      	ldr	r3, [r7, #20]
 80030b6:	e010      	b.n	80030da <LPS22HH_Reboot+0x9a>
    	}

    	if(timer + 100 < Handle->IO.GetTick())
 80030b8:	693b      	ldr	r3, [r7, #16]
 80030ba:	f103 0464 	add.w	r4, r3, #100	; 0x64
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	691b      	ldr	r3, [r3, #16]
 80030c2:	4798      	blx	r3
 80030c4:	4603      	mov	r3, r0
 80030c6:	429c      	cmp	r4, r3
 80030c8:	d202      	bcs.n	80030d0 <LPS22HH_Reboot+0x90>
    	{
    		return LPS22HH_Timeout;
 80030ca:	f06f 0305 	mvn.w	r3, #5
 80030ce:	e004      	b.n	80030da <LPS22HH_Reboot+0x9a>
    while(buffer & LPS22HH_RebootSignal)
 80030d0:	7bfb      	ldrb	r3, [r7, #15]
 80030d2:	b25b      	sxtb	r3, r3
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	dbe0      	blt.n	800309a <LPS22HH_Reboot+0x5a>
    	}

    }
    return ret;
 80030d8:	697b      	ldr	r3, [r7, #20]
}
 80030da:	4618      	mov	r0, r3
 80030dc:	371c      	adds	r7, #28
 80030de:	46bd      	mov	sp, r7
 80030e0:	bd90      	pop	{r4, r7, pc}

080030e2 <LPS22HH_WriteRegWrapper>:

static int32_t LPS22HH_WriteRegWrapper(void *Handle, uint8_t Reg, uint8_t *Buffer, uint8_t Length)
{
 80030e2:	b580      	push	{r7, lr}
 80030e4:	b086      	sub	sp, #24
 80030e6:	af00      	add	r7, sp, #0
 80030e8:	60f8      	str	r0, [r7, #12]
 80030ea:	607a      	str	r2, [r7, #4]
 80030ec:	461a      	mov	r2, r3
 80030ee:	460b      	mov	r3, r1
 80030f0:	72fb      	strb	r3, [r7, #11]
 80030f2:	4613      	mov	r3, r2
 80030f4:	72bb      	strb	r3, [r7, #10]
	LPS22HH_Handle_t *Dev = Handle;
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	617b      	str	r3, [r7, #20]
	if(Dev->IO.Write != NULL)
 80030fa:	697b      	ldr	r3, [r7, #20]
 80030fc:	68db      	ldr	r3, [r3, #12]
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d007      	beq.n	8003112 <LPS22HH_WriteRegWrapper+0x30>
	{
		return Dev->IO.Write(Reg, Buffer, Length);
 8003102:	697b      	ldr	r3, [r7, #20]
 8003104:	68db      	ldr	r3, [r3, #12]
 8003106:	7aba      	ldrb	r2, [r7, #10]
 8003108:	7af8      	ldrb	r0, [r7, #11]
 800310a:	6879      	ldr	r1, [r7, #4]
 800310c:	4798      	blx	r3
 800310e:	4603      	mov	r3, r0
 8003110:	e001      	b.n	8003116 <LPS22HH_WriteRegWrapper+0x34>
	}
    return LPS22HH_IOError;
 8003112:	f06f 0301 	mvn.w	r3, #1
}
 8003116:	4618      	mov	r0, r3
 8003118:	3718      	adds	r7, #24
 800311a:	46bd      	mov	sp, r7
 800311c:	bd80      	pop	{r7, pc}

0800311e <LPS22HH_ReadRegWrapper>:

static int32_t LPS22HH_ReadRegWrapper(void *Handle,uint8_t Reg, uint8_t *Buffer, uint8_t Length)
{
 800311e:	b580      	push	{r7, lr}
 8003120:	b086      	sub	sp, #24
 8003122:	af00      	add	r7, sp, #0
 8003124:	60f8      	str	r0, [r7, #12]
 8003126:	607a      	str	r2, [r7, #4]
 8003128:	461a      	mov	r2, r3
 800312a:	460b      	mov	r3, r1
 800312c:	72fb      	strb	r3, [r7, #11]
 800312e:	4613      	mov	r3, r2
 8003130:	72bb      	strb	r3, [r7, #10]
	LPS22HH_Handle_t *Dev = Handle;
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	617b      	str	r3, [r7, #20]
	if(Dev->IO.Read != NULL)
 8003136:	697b      	ldr	r3, [r7, #20]
 8003138:	689b      	ldr	r3, [r3, #8]
 800313a:	2b00      	cmp	r3, #0
 800313c:	d007      	beq.n	800314e <LPS22HH_ReadRegWrapper+0x30>
	{
		return Dev->IO.Read(Reg, Buffer, Length);
 800313e:	697b      	ldr	r3, [r7, #20]
 8003140:	689b      	ldr	r3, [r3, #8]
 8003142:	7aba      	ldrb	r2, [r7, #10]
 8003144:	7af8      	ldrb	r0, [r7, #11]
 8003146:	6879      	ldr	r1, [r7, #4]
 8003148:	4798      	blx	r3
 800314a:	4603      	mov	r3, r0
 800314c:	e001      	b.n	8003152 <LPS22HH_ReadRegWrapper+0x34>
	}
    return LPS22HH_IOError;
 800314e:	f06f 0301 	mvn.w	r3, #1
}
 8003152:	4618      	mov	r0, r3
 8003154:	3718      	adds	r7, #24
 8003156:	46bd      	mov	sp, r7
 8003158:	bd80      	pop	{r7, pc}
	...

0800315c <LPS22HH_RegisterInit>:

static int32_t LPS22HH_RegisterInit(LPS22HH_Handle_t *Handle, LPS22HH_Init_Struct_t Settings)
{
 800315c:	b084      	sub	sp, #16
 800315e:	b580      	push	{r7, lr}
 8003160:	b084      	sub	sp, #16
 8003162:	af00      	add	r7, sp, #0
 8003164:	6078      	str	r0, [r7, #4]
 8003166:	f107 001c 	add.w	r0, r7, #28
 800316a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	int32_t ret = LPS22HH_ResetDevice(Handle);
 800316e:	6878      	ldr	r0, [r7, #4]
 8003170:	f7ff feac 	bl	8002ecc <LPS22HH_ResetDevice>
 8003174:	60f8      	str	r0, [r7, #12]
	if(ret != LPS22HH_Ok)
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	2b00      	cmp	r3, #0
 800317a:	d001      	beq.n	8003180 <LPS22HH_RegisterInit+0x24>
	{
		return ret;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	e0df      	b.n	8003340 <LPS22HH_RegisterInit+0x1e4>
	}

	uint8_t buffer[2] = {0};
 8003180:	2300      	movs	r3, #0
 8003182:	813b      	strh	r3, [r7, #8]
    buffer[0] = Settings.INTERRUPT_CFG;
 8003184:	7f3b      	ldrb	r3, [r7, #28]
 8003186:	723b      	strb	r3, [r7, #8]
	ret = LPS22HH_WriteReg(&Handle->Context, LPS22HH_REG_INTERRUPT_CFG, &buffer[0], 1);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	f103 0018 	add.w	r0, r3, #24
 800318e:	f107 0208 	add.w	r2, r7, #8
 8003192:	2301      	movs	r3, #1
 8003194:	210b      	movs	r1, #11
 8003196:	f000 f96e 	bl	8003476 <LPS22HH_WriteReg>
 800319a:	60f8      	str	r0, [r7, #12]
	if(ret != LPS22HH_Ok)
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d001      	beq.n	80031a6 <LPS22HH_RegisterInit+0x4a>
	{
		return ret;
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	e0cc      	b.n	8003340 <LPS22HH_RegisterInit+0x1e4>
	}

	if(Settings.THS_P > 32767)
 80031a6:	8bfb      	ldrh	r3, [r7, #30]
 80031a8:	b21b      	sxth	r3, r3
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	da04      	bge.n	80031b8 <LPS22HH_RegisterInit+0x5c>
	{
		buffer[0] = 32767 & 0x00FF;
 80031ae:	23ff      	movs	r3, #255	; 0xff
 80031b0:	723b      	strb	r3, [r7, #8]
		buffer[1] = (32767 & 0xFF00) >> 8;
 80031b2:	237f      	movs	r3, #127	; 0x7f
 80031b4:	727b      	strb	r3, [r7, #9]
 80031b6:	e007      	b.n	80031c8 <LPS22HH_RegisterInit+0x6c>
	} else
	{
		buffer[0] = Settings.THS_P & 0x00FF;
 80031b8:	8bfb      	ldrh	r3, [r7, #30]
 80031ba:	b2db      	uxtb	r3, r3
 80031bc:	723b      	strb	r3, [r7, #8]
		buffer[1] = (Settings.THS_P & 0xFF00) >> 8;
 80031be:	8bfb      	ldrh	r3, [r7, #30]
 80031c0:	0a1b      	lsrs	r3, r3, #8
 80031c2:	b29b      	uxth	r3, r3
 80031c4:	b2db      	uxtb	r3, r3
 80031c6:	727b      	strb	r3, [r7, #9]
	}
	ret = LPS22HH_WriteReg(&Handle->Context, LPS22HH_REG_THS_P_L, &buffer[0], 2);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	f103 0018 	add.w	r0, r3, #24
 80031ce:	f107 0208 	add.w	r2, r7, #8
 80031d2:	2302      	movs	r3, #2
 80031d4:	210c      	movs	r1, #12
 80031d6:	f000 f94e 	bl	8003476 <LPS22HH_WriteReg>
 80031da:	60f8      	str	r0, [r7, #12]
	if(ret != LPS22HH_Ok)
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d001      	beq.n	80031e6 <LPS22HH_RegisterInit+0x8a>
	{
		return ret;
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	e0ac      	b.n	8003340 <LPS22HH_RegisterInit+0x1e4>
	}

	buffer[0] = Settings.IF_CTRL;
 80031e6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80031ea:	723b      	strb	r3, [r7, #8]
	ret = LPS22HH_WriteReg(&Handle->Context, LPS22HH_REG_IF_CTRL, &buffer[0], 1);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	f103 0018 	add.w	r0, r3, #24
 80031f2:	f107 0208 	add.w	r2, r7, #8
 80031f6:	2301      	movs	r3, #1
 80031f8:	210e      	movs	r1, #14
 80031fa:	f000 f93c 	bl	8003476 <LPS22HH_WriteReg>
 80031fe:	60f8      	str	r0, [r7, #12]
	if(ret != LPS22HH_Ok)
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	2b00      	cmp	r3, #0
 8003204:	d001      	beq.n	800320a <LPS22HH_RegisterInit+0xae>
	{
		return ret;
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	e09a      	b.n	8003340 <LPS22HH_RegisterInit+0x1e4>
	}

	buffer[0] = Settings.ODR | Settings.LPFP | 0x02 | Settings.SIM; //Enable BDU = 0x02
 800320a:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800320e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8003212:	4313      	orrs	r3, r2
 8003214:	b2da      	uxtb	r2, r3
 8003216:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800321a:	4313      	orrs	r3, r2
 800321c:	b2db      	uxtb	r3, r3
 800321e:	f043 0302 	orr.w	r3, r3, #2
 8003222:	b2db      	uxtb	r3, r3
 8003224:	723b      	strb	r3, [r7, #8]
	ret = LPS22HH_WriteReg(&Handle->Context, LPS22HH_REG_CTRL_REG1, &buffer[0], 1);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	f103 0018 	add.w	r0, r3, #24
 800322c:	f107 0208 	add.w	r2, r7, #8
 8003230:	2301      	movs	r3, #1
 8003232:	2110      	movs	r1, #16
 8003234:	f000 f91f 	bl	8003476 <LPS22HH_WriteReg>
 8003238:	60f8      	str	r0, [r7, #12]
	if(ret != LPS22HH_Ok)
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	2b00      	cmp	r3, #0
 800323e:	d001      	beq.n	8003244 <LPS22HH_RegisterInit+0xe8>
	{
		return ret;
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	e07d      	b.n	8003340 <LPS22HH_RegisterInit+0x1e4>
	}

	buffer[0] = Settings.CTRL_REG2;
 8003244:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003248:	723b      	strb	r3, [r7, #8]
	ret = LPS22HH_WriteReg(&Handle->Context, LPS22HH_REG_CTRL_REG2, &buffer[0], 1);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	f103 0018 	add.w	r0, r3, #24
 8003250:	f107 0208 	add.w	r2, r7, #8
 8003254:	2301      	movs	r3, #1
 8003256:	2111      	movs	r1, #17
 8003258:	f000 f90d 	bl	8003476 <LPS22HH_WriteReg>
 800325c:	60f8      	str	r0, [r7, #12]
	if(ret != LPS22HH_Ok)
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	2b00      	cmp	r3, #0
 8003262:	d001      	beq.n	8003268 <LPS22HH_RegisterInit+0x10c>
	{
		return ret;
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	e06b      	b.n	8003340 <LPS22HH_RegisterInit+0x1e4>
	}

	buffer[0] = Settings.INT_DRDY_Control | Settings.INT_S;
 8003268:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 800326c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003270:	4313      	orrs	r3, r2
 8003272:	b2db      	uxtb	r3, r3
 8003274:	723b      	strb	r3, [r7, #8]
	ret = LPS22HH_WriteReg(&Handle->Context, LPS22HH_REG_CTRL_REG3, &buffer[0], 1);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	f103 0018 	add.w	r0, r3, #24
 800327c:	f107 0208 	add.w	r2, r7, #8
 8003280:	2301      	movs	r3, #1
 8003282:	2112      	movs	r1, #18
 8003284:	f000 f8f7 	bl	8003476 <LPS22HH_WriteReg>
 8003288:	60f8      	str	r0, [r7, #12]
	if(ret != LPS22HH_Ok)
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	2b00      	cmp	r3, #0
 800328e:	d001      	beq.n	8003294 <LPS22HH_RegisterInit+0x138>
	{
		return ret;
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	e055      	b.n	8003340 <LPS22HH_RegisterInit+0x1e4>
	}

	buffer[0] = Settings.STOP_ON_WTM | Settings.F_MODE;
 8003294:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8003298:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800329c:	4313      	orrs	r3, r2
 800329e:	b2db      	uxtb	r3, r3
 80032a0:	723b      	strb	r3, [r7, #8]
	ret = LPS22HH_WriteReg(&Handle->Context, LPS22HH_REG_FIFO_CTRL, &buffer[0], 1);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	f103 0018 	add.w	r0, r3, #24
 80032a8:	f107 0208 	add.w	r2, r7, #8
 80032ac:	2301      	movs	r3, #1
 80032ae:	2113      	movs	r1, #19
 80032b0:	f000 f8e1 	bl	8003476 <LPS22HH_WriteReg>
 80032b4:	60f8      	str	r0, [r7, #12]
	if(ret != LPS22HH_Ok)
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d001      	beq.n	80032c0 <LPS22HH_RegisterInit+0x164>
	{
		return ret;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	e03f      	b.n	8003340 <LPS22HH_RegisterInit+0x1e4>
	if(Settings.WTM > 255)
	{
		buffer[0] = 255;
	} else
	{
		buffer[0] = Settings.WTM;
 80032c0:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 80032c4:	723b      	strb	r3, [r7, #8]
	}
	ret = LPS22HH_WriteReg(&Handle->Context, LPS22HH_REG_FIFO_WTM, &buffer[0], 1);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	f103 0018 	add.w	r0, r3, #24
 80032cc:	f107 0208 	add.w	r2, r7, #8
 80032d0:	2301      	movs	r3, #1
 80032d2:	2114      	movs	r1, #20
 80032d4:	f000 f8cf 	bl	8003476 <LPS22HH_WriteReg>
 80032d8:	60f8      	str	r0, [r7, #12]
	if(ret != LPS22HH_Ok)
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d001      	beq.n	80032e4 <LPS22HH_RegisterInit+0x188>
	{
		return ret;
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	e02d      	b.n	8003340 <LPS22HH_RegisterInit+0x1e4>
	}

	if((Settings.REF_P * 4096) > 65535) //float -> LSB = multiply by 4096
 80032e4:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80032e8:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8003350 <LPS22HH_RegisterInit+0x1f4>
 80032ec:	ee67 7a87 	vmul.f32	s15, s15, s14
 80032f0:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8003354 <LPS22HH_RegisterInit+0x1f8>
 80032f4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80032f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032fc:	dd02      	ble.n	8003304 <LPS22HH_RegisterInit+0x1a8>
	{
		return LPS22HH_RefPError;
 80032fe:	f06f 0303 	mvn.w	r3, #3
 8003302:	e01d      	b.n	8003340 <LPS22HH_RegisterInit+0x1e4>
	}

	*((uint16_t*)&buffer) = Settings.REF_P * 4096;
 8003304:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8003308:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8003350 <LPS22HH_RegisterInit+0x1f4>
 800330c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003310:	f107 0308 	add.w	r3, r7, #8
 8003314:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003318:	ee17 2a90 	vmov	r2, s15
 800331c:	b292      	uxth	r2, r2
 800331e:	801a      	strh	r2, [r3, #0]
	ret = LPS22HH_WriteReg(&Handle->Context, LPS22HH_REG_REF_P_L, &buffer[0], 2);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	f103 0018 	add.w	r0, r3, #24
 8003326:	f107 0208 	add.w	r2, r7, #8
 800332a:	2302      	movs	r3, #2
 800332c:	2115      	movs	r1, #21
 800332e:	f000 f8a2 	bl	8003476 <LPS22HH_WriteReg>
 8003332:	60f8      	str	r0, [r7, #12]
	if(ret != LPS22HH_Ok)
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	2b00      	cmp	r3, #0
 8003338:	d001      	beq.n	800333e <LPS22HH_RegisterInit+0x1e2>
	{
		return ret;
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	e000      	b.n	8003340 <LPS22HH_RegisterInit+0x1e4>
	}

	return LPS22HH_Ok;
 800333e:	2300      	movs	r3, #0
}
 8003340:	4618      	mov	r0, r3
 8003342:	3710      	adds	r7, #16
 8003344:	46bd      	mov	sp, r7
 8003346:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800334a:	b004      	add	sp, #16
 800334c:	4770      	bx	lr
 800334e:	bf00      	nop
 8003350:	45800000 	.word	0x45800000
 8003354:	477fff00 	.word	0x477fff00

08003358 <ConvertPressureData>:

static void ConvertPressureData(uint8_t *buffer, float *pressure)
{
 8003358:	b580      	push	{r7, lr}
 800335a:	b084      	sub	sp, #16
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
 8003360:	6039      	str	r1, [r7, #0]
	int32_t Data;
	//determine sign
	if(buffer[2] & 0x80)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	3302      	adds	r3, #2
 8003366:	781b      	ldrb	r3, [r3, #0]
 8003368:	b25b      	sxtb	r3, r3
 800336a:	2b00      	cmp	r3, #0
 800336c:	da03      	bge.n	8003376 <ConvertPressureData+0x1e>
	{
		Data = 0xFF000000; //Sign Extend if MSB of 24 Bit number is set
 800336e:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 8003372:	60fb      	str	r3, [r7, #12]
 8003374:	e001      	b.n	800337a <ConvertPressureData+0x22>
	} else
	{
		Data = 0;
 8003376:	2300      	movs	r3, #0
 8003378:	60fb      	str	r3, [r7, #12]
	}
	Data = Data + buffer[2] * 65536 + buffer[1] * 256 + buffer[0]; //Data = Data + Concat buffer[2:0]
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	3302      	adds	r3, #2
 800337e:	781b      	ldrb	r3, [r3, #0]
 8003380:	041a      	lsls	r2, r3, #16
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	441a      	add	r2, r3
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	3301      	adds	r3, #1
 800338a:	781b      	ldrb	r3, [r3, #0]
 800338c:	021b      	lsls	r3, r3, #8
 800338e:	4413      	add	r3, r2
 8003390:	687a      	ldr	r2, [r7, #4]
 8003392:	7812      	ldrb	r2, [r2, #0]
 8003394:	4413      	add	r3, r2
 8003396:	60fb      	str	r3, [r7, #12]
	*pressure = Data / 4096.0;
 8003398:	68f8      	ldr	r0, [r7, #12]
 800339a:	f7fd f9db 	bl	8000754 <__aeabi_i2d>
 800339e:	f04f 0200 	mov.w	r2, #0
 80033a2:	4b08      	ldr	r3, [pc, #32]	; (80033c4 <ConvertPressureData+0x6c>)
 80033a4:	f7fd fb6a 	bl	8000a7c <__aeabi_ddiv>
 80033a8:	4602      	mov	r2, r0
 80033aa:	460b      	mov	r3, r1
 80033ac:	4610      	mov	r0, r2
 80033ae:	4619      	mov	r1, r3
 80033b0:	f7fd fc4c 	bl	8000c4c <__aeabi_d2f>
 80033b4:	4602      	mov	r2, r0
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	601a      	str	r2, [r3, #0]
}
 80033ba:	bf00      	nop
 80033bc:	3710      	adds	r7, #16
 80033be:	46bd      	mov	sp, r7
 80033c0:	bd80      	pop	{r7, pc}
 80033c2:	bf00      	nop
 80033c4:	40b00000 	.word	0x40b00000

080033c8 <LPS22HH_ValidateParams>:

#include "LPS22HH_Registers.h"
#include <stddef.h>

static uint32_t LPS22HH_ValidateParams(LPS22HH_Context_t *Context, uint8_t Reg, uint8_t *Buffer, uint8_t Length)
{
 80033c8:	b480      	push	{r7}
 80033ca:	b087      	sub	sp, #28
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	60f8      	str	r0, [r7, #12]
 80033d0:	607a      	str	r2, [r7, #4]
 80033d2:	461a      	mov	r2, r3
 80033d4:	460b      	mov	r3, r1
 80033d6:	72fb      	strb	r3, [r7, #11]
 80033d8:	4613      	mov	r3, r2
 80033da:	72bb      	strb	r3, [r7, #10]
    int32_t ret_status = LPS22HH_REG_OK;
 80033dc:	2300      	movs	r3, #0
 80033de:	617b      	str	r3, [r7, #20]

    if(Context == NULL)
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d103      	bne.n	80033ee <LPS22HH_ValidateParams+0x26>
    {
    	ret_status |= LPS22HH_REG_CONTEXT_ERR;
 80033e6:	697b      	ldr	r3, [r7, #20]
 80033e8:	f043 0308 	orr.w	r3, r3, #8
 80033ec:	617b      	str	r3, [r7, #20]
    }

    if(Reg < LPS22HH_REG_INTERRUPT_CFG || Reg > LPS22HH_REG_FIFO_DATA_OUT_TEMP_H)
 80033ee:	7afb      	ldrb	r3, [r7, #11]
 80033f0:	2b0a      	cmp	r3, #10
 80033f2:	d902      	bls.n	80033fa <LPS22HH_ValidateParams+0x32>
 80033f4:	7afb      	ldrb	r3, [r7, #11]
 80033f6:	2b7c      	cmp	r3, #124	; 0x7c
 80033f8:	d903      	bls.n	8003402 <LPS22HH_ValidateParams+0x3a>
    {
    	ret_status |= LPS22HH_REG_REGADDR_ERR;
 80033fa:	697b      	ldr	r3, [r7, #20]
 80033fc:	f043 0301 	orr.w	r3, r3, #1
 8003400:	617b      	str	r3, [r7, #20]
    }

    if(Buffer == NULL)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	2b00      	cmp	r3, #0
 8003406:	d103      	bne.n	8003410 <LPS22HH_ValidateParams+0x48>
    {
    	ret_status |= LPS22HH_REG_BUFF_ERR;
 8003408:	697b      	ldr	r3, [r7, #20]
 800340a:	f043 0304 	orr.w	r3, r3, #4
 800340e:	617b      	str	r3, [r7, #20]
    }

    if(Length == 0)
 8003410:	7abb      	ldrb	r3, [r7, #10]
 8003412:	2b00      	cmp	r3, #0
 8003414:	d103      	bne.n	800341e <LPS22HH_ValidateParams+0x56>
    {
    	ret_status |= LPS22HH_REG_LENGTH_ERR;
 8003416:	697b      	ldr	r3, [r7, #20]
 8003418:	f043 0302 	orr.w	r3, r3, #2
 800341c:	617b      	str	r3, [r7, #20]
    }

    return ret_status;
 800341e:	697b      	ldr	r3, [r7, #20]
}
 8003420:	4618      	mov	r0, r3
 8003422:	371c      	adds	r7, #28
 8003424:	46bd      	mov	sp, r7
 8003426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342a:	4770      	bx	lr

0800342c <LPS22HH_ReadReg>:

int32_t LPS22HH_ReadReg(LPS22HH_Context_t *Context, uint8_t Reg, uint8_t *Buffer, uint8_t Length)
{
 800342c:	b590      	push	{r4, r7, lr}
 800342e:	b087      	sub	sp, #28
 8003430:	af00      	add	r7, sp, #0
 8003432:	60f8      	str	r0, [r7, #12]
 8003434:	607a      	str	r2, [r7, #4]
 8003436:	461a      	mov	r2, r3
 8003438:	460b      	mov	r3, r1
 800343a:	72fb      	strb	r3, [r7, #11]
 800343c:	4613      	mov	r3, r2
 800343e:	72bb      	strb	r3, [r7, #10]
	int32_t ret = LPS22HH_ValidateParams(Context,Reg,Buffer,Length);
 8003440:	7abb      	ldrb	r3, [r7, #10]
 8003442:	7af9      	ldrb	r1, [r7, #11]
 8003444:	687a      	ldr	r2, [r7, #4]
 8003446:	68f8      	ldr	r0, [r7, #12]
 8003448:	f7ff ffbe 	bl	80033c8 <LPS22HH_ValidateParams>
 800344c:	4603      	mov	r3, r0
 800344e:	617b      	str	r3, [r7, #20]
    if(ret != LPS22HH_REG_OK)
 8003450:	697b      	ldr	r3, [r7, #20]
 8003452:	2b00      	cmp	r3, #0
 8003454:	d001      	beq.n	800345a <LPS22HH_ReadReg+0x2e>
    {
    	return ret;
 8003456:	697b      	ldr	r3, [r7, #20]
 8003458:	e009      	b.n	800346e <LPS22HH_ReadReg+0x42>
    }

	ret = Context->Read(Context->Handle, Reg, Buffer, Length);
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	685c      	ldr	r4, [r3, #4]
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	6818      	ldr	r0, [r3, #0]
 8003462:	7abb      	ldrb	r3, [r7, #10]
 8003464:	7af9      	ldrb	r1, [r7, #11]
 8003466:	687a      	ldr	r2, [r7, #4]
 8003468:	47a0      	blx	r4
 800346a:	6178      	str	r0, [r7, #20]
	return ret;
 800346c:	697b      	ldr	r3, [r7, #20]
}
 800346e:	4618      	mov	r0, r3
 8003470:	371c      	adds	r7, #28
 8003472:	46bd      	mov	sp, r7
 8003474:	bd90      	pop	{r4, r7, pc}

08003476 <LPS22HH_WriteReg>:

int32_t LPS22HH_WriteReg(LPS22HH_Context_t *Context, uint8_t Reg, uint8_t *Buffer, uint8_t Length)
{
 8003476:	b590      	push	{r4, r7, lr}
 8003478:	b087      	sub	sp, #28
 800347a:	af00      	add	r7, sp, #0
 800347c:	60f8      	str	r0, [r7, #12]
 800347e:	607a      	str	r2, [r7, #4]
 8003480:	461a      	mov	r2, r3
 8003482:	460b      	mov	r3, r1
 8003484:	72fb      	strb	r3, [r7, #11]
 8003486:	4613      	mov	r3, r2
 8003488:	72bb      	strb	r3, [r7, #10]
	int32_t ret = LPS22HH_ValidateParams(Context,Reg,Buffer,Length);
 800348a:	7abb      	ldrb	r3, [r7, #10]
 800348c:	7af9      	ldrb	r1, [r7, #11]
 800348e:	687a      	ldr	r2, [r7, #4]
 8003490:	68f8      	ldr	r0, [r7, #12]
 8003492:	f7ff ff99 	bl	80033c8 <LPS22HH_ValidateParams>
 8003496:	4603      	mov	r3, r0
 8003498:	617b      	str	r3, [r7, #20]
    if(ret != LPS22HH_REG_OK)
 800349a:	697b      	ldr	r3, [r7, #20]
 800349c:	2b00      	cmp	r3, #0
 800349e:	d001      	beq.n	80034a4 <LPS22HH_WriteReg+0x2e>
    {
    	return ret;
 80034a0:	697b      	ldr	r3, [r7, #20]
 80034a2:	e009      	b.n	80034b8 <LPS22HH_WriteReg+0x42>
    }

	ret = Context->Write(Context->Handle, Reg, Buffer, Length);
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	689c      	ldr	r4, [r3, #8]
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	6818      	ldr	r0, [r3, #0]
 80034ac:	7abb      	ldrb	r3, [r7, #10]
 80034ae:	7af9      	ldrb	r1, [r7, #11]
 80034b0:	687a      	ldr	r2, [r7, #4]
 80034b2:	47a0      	blx	r4
 80034b4:	6178      	str	r0, [r7, #20]
	return ret;
 80034b6:	697b      	ldr	r3, [r7, #20]
}
 80034b8:	4618      	mov	r0, r3
 80034ba:	371c      	adds	r7, #28
 80034bc:	46bd      	mov	sp, r7
 80034be:	bd90      	pop	{r4, r7, pc}

080034c0 <OV5640_LinkBus>:
#define  OV5640_ID                                 0x5640U
static int32_t OV5640_ReadWrapper(void *Handle, uint16_t Reg, uint8_t *Data, uint16_t Length);
static int32_t OV5640_WriteWrapper(void *Handle, uint16_t Reg, uint8_t *Data, uint16_t Length);

void OV5640_LinkBus(OV5640_Handle_t *OV5640_Handle, OV5640_IO_t *CameraIO)
{
 80034c0:	b5b0      	push	{r4, r5, r7, lr}
 80034c2:	b082      	sub	sp, #8
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
 80034c8:	6039      	str	r1, [r7, #0]
	OV5640_Handle->IO               = *CameraIO;
 80034ca:	687a      	ldr	r2, [r7, #4]
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	4614      	mov	r4, r2
 80034d0:	461d      	mov	r5, r3
 80034d2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80034d4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80034d6:	e895 0003 	ldmia.w	r5, {r0, r1}
 80034da:	e884 0003 	stmia.w	r4, {r0, r1}

	OV5640_Handle->Context.Read  = OV5640_ReadWrapper;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	4a07      	ldr	r2, [pc, #28]	; (8003500 <OV5640_LinkBus+0x40>)
 80034e2:	61da      	str	r2, [r3, #28]
	OV5640_Handle->Context.Write = OV5640_WriteWrapper;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	4a07      	ldr	r2, [pc, #28]	; (8003504 <OV5640_LinkBus+0x44>)
 80034e8:	619a      	str	r2, [r3, #24]
	OV5640_Handle->Context.Handle   = OV5640_Handle;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	687a      	ldr	r2, [r7, #4]
 80034ee:	621a      	str	r2, [r3, #32]

	OV5640_Handle->IO.Init();
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	685b      	ldr	r3, [r3, #4]
 80034f4:	4798      	blx	r3
}
 80034f6:	bf00      	nop
 80034f8:	3708      	adds	r7, #8
 80034fa:	46bd      	mov	sp, r7
 80034fc:	bdb0      	pop	{r4, r5, r7, pc}
 80034fe:	bf00      	nop
 8003500:	08003645 	.word	0x08003645
 8003504:	08003677 	.word	0x08003677

08003508 <OV5640_Init>:

int32_t OV5640_Init(OV5640_Handle_t *OV5640, uint32_t Resolution, uint32_t PixelFormat)
{
 8003508:	b580      	push	{r7, lr}
 800350a:	b088      	sub	sp, #32
 800350c:	af00      	add	r7, sp, #0
 800350e:	60f8      	str	r0, [r7, #12]
 8003510:	60b9      	str	r1, [r7, #8]
 8003512:	607a      	str	r2, [r7, #4]
  uint32_t index;
  int32_t ret = OV5640_OK;
 8003514:	2300      	movs	r3, #0
 8003516:	61bb      	str	r3, [r7, #24]
    {OV5640_SYSTEM_CTROL0, 0x02},
  };
  uint8_t tmp;

    /* Check if resolution is supported */
    if ((Resolution > OV5640_R800x480) ||
 8003518:	68bb      	ldr	r3, [r7, #8]
 800351a:	2b04      	cmp	r3, #4
 800351c:	d80e      	bhi.n	800353c <OV5640_Init+0x34>
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	2b00      	cmp	r3, #0
 8003522:	d00f      	beq.n	8003544 <OV5640_Init+0x3c>
        ((PixelFormat != OV5640_RGB565) && (PixelFormat != OV5640_YUV422) &&
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2b02      	cmp	r3, #2
 8003528:	d00c      	beq.n	8003544 <OV5640_Init+0x3c>
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	2b01      	cmp	r3, #1
 800352e:	d009      	beq.n	8003544 <OV5640_Init+0x3c>
         (PixelFormat != OV5640_RGB888) && (PixelFormat != OV5640_Y8) &&
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2b07      	cmp	r3, #7
 8003534:	d006      	beq.n	8003544 <OV5640_Init+0x3c>
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	2b08      	cmp	r3, #8
 800353a:	d003      	beq.n	8003544 <OV5640_Init+0x3c>
         (PixelFormat != OV5640_JPEG)))
    {
      ret = OV5640_ERROR;
 800353c:	f04f 33ff 	mov.w	r3, #4294967295
 8003540:	61bb      	str	r3, [r7, #24]
 8003542:	e04a      	b.n	80035da <OV5640_Init+0xd2>
    }
    else
    {
      /* Set common parameters for all resolutions */
      for (index = 0; index < (sizeof(OV5640_Common) / 4U) ; index++)
 8003544:	2300      	movs	r3, #0
 8003546:	61fb      	str	r3, [r7, #28]
 8003548:	e01f      	b.n	800358a <OV5640_Init+0x82>
      {
        if (ret != OV5640_ERROR)
 800354a:	69bb      	ldr	r3, [r7, #24]
 800354c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003550:	d018      	beq.n	8003584 <OV5640_Init+0x7c>
        {
          tmp = (uint8_t)OV5640_Common[index][1];
 8003552:	4a24      	ldr	r2, [pc, #144]	; (80035e4 <OV5640_Init+0xdc>)
 8003554:	69fb      	ldr	r3, [r7, #28]
 8003556:	009b      	lsls	r3, r3, #2
 8003558:	4413      	add	r3, r2
 800355a:	885b      	ldrh	r3, [r3, #2]
 800355c:	b2db      	uxtb	r3, r3
 800355e:	75fb      	strb	r3, [r7, #23]

          if (OV5640_WriteReg(&OV5640->Context, OV5640_Common[index][0], &tmp, 1) != OV5640_OK)
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	f103 0018 	add.w	r0, r3, #24
 8003566:	4a1f      	ldr	r2, [pc, #124]	; (80035e4 <OV5640_Init+0xdc>)
 8003568:	69fb      	ldr	r3, [r7, #28]
 800356a:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 800356e:	f107 0217 	add.w	r2, r7, #23
 8003572:	2301      	movs	r3, #1
 8003574:	f000 f84f 	bl	8003616 <OV5640_WriteReg>
 8003578:	4603      	mov	r3, r0
 800357a:	2b00      	cmp	r3, #0
 800357c:	d002      	beq.n	8003584 <OV5640_Init+0x7c>
          {
            ret = OV5640_ERROR;
 800357e:	f04f 33ff 	mov.w	r3, #4294967295
 8003582:	61bb      	str	r3, [r7, #24]
      for (index = 0; index < (sizeof(OV5640_Common) / 4U) ; index++)
 8003584:	69fb      	ldr	r3, [r7, #28]
 8003586:	3301      	adds	r3, #1
 8003588:	61fb      	str	r3, [r7, #28]
 800358a:	69fb      	ldr	r3, [r7, #28]
 800358c:	2bfd      	cmp	r3, #253	; 0xfd
 800358e:	d9dc      	bls.n	800354a <OV5640_Init+0x42>
          }
        }
      }

      if (ret == OV5640_OK)
 8003590:	69bb      	ldr	r3, [r7, #24]
 8003592:	2b00      	cmp	r3, #0
 8003594:	d121      	bne.n	80035da <OV5640_Init+0xd2>
      {
        /* Set specific parameters for each resolution */
        if (OV5640_SetResolution(OV5640, Resolution) != OV5640_OK)
 8003596:	68b9      	ldr	r1, [r7, #8]
 8003598:	68f8      	ldr	r0, [r7, #12]
 800359a:	f000 f89d 	bl	80036d8 <OV5640_SetResolution>
 800359e:	4603      	mov	r3, r0
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d003      	beq.n	80035ac <OV5640_Init+0xa4>
        {
          ret = OV5640_ERROR;
 80035a4:	f04f 33ff 	mov.w	r3, #4294967295
 80035a8:	61bb      	str	r3, [r7, #24]
 80035aa:	e016      	b.n	80035da <OV5640_Init+0xd2>
        }/* Set specific parameters for each pixel format */
        else if (OV5640_SetPixelFormat(OV5640, PixelFormat) != OV5640_OK)
 80035ac:	6879      	ldr	r1, [r7, #4]
 80035ae:	68f8      	ldr	r0, [r7, #12]
 80035b0:	f000 f988 	bl	80038c4 <OV5640_SetPixelFormat>
 80035b4:	4603      	mov	r3, r0
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d003      	beq.n	80035c2 <OV5640_Init+0xba>
        {
          ret = OV5640_ERROR;
 80035ba:	f04f 33ff 	mov.w	r3, #4294967295
 80035be:	61bb      	str	r3, [r7, #24]
 80035c0:	e00b      	b.n	80035da <OV5640_Init+0xd2>
        }/* Set PixelClock, Href and VSync Polarity */
        else if (OV5640_SetPolarities(OV5640, OV5640_POLARITY_PCLK_HIGH, OV5640_POLARITY_HREF_HIGH,
 80035c2:	2300      	movs	r3, #0
 80035c4:	2201      	movs	r2, #1
 80035c6:	2101      	movs	r1, #1
 80035c8:	68f8      	ldr	r0, [r7, #12]
 80035ca:	f000 fb0f 	bl	8003bec <OV5640_SetPolarities>
 80035ce:	4603      	mov	r3, r0
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d002      	beq.n	80035da <OV5640_Init+0xd2>
                                      OV5640_POLARITY_VSYNC_HIGH) != OV5640_OK)
        {
          ret = OV5640_ERROR;
 80035d4:	f04f 33ff 	mov.w	r3, #4294967295
 80035d8:	61bb      	str	r3, [r7, #24]
        }
      }
    }


  return ret;
 80035da:	69bb      	ldr	r3, [r7, #24]
}
 80035dc:	4618      	mov	r0, r3
 80035de:	3720      	adds	r7, #32
 80035e0:	46bd      	mov	sp, r7
 80035e2:	bd80      	pop	{r7, pc}
 80035e4:	0800e878 	.word	0x0800e878

080035e8 <OV5640_ReadReg>:

int32_t OV5640_ReadReg(OV5650_Context_t *Context, uint16_t reg, uint8_t *pdata, uint16_t length)
{
 80035e8:	b590      	push	{r4, r7, lr}
 80035ea:	b085      	sub	sp, #20
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	60f8      	str	r0, [r7, #12]
 80035f0:	607a      	str	r2, [r7, #4]
 80035f2:	461a      	mov	r2, r3
 80035f4:	460b      	mov	r3, r1
 80035f6:	817b      	strh	r3, [r7, #10]
 80035f8:	4613      	mov	r3, r2
 80035fa:	813b      	strh	r3, [r7, #8]
  return Context->Read(Context->Handle, reg, pdata, length);
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	685c      	ldr	r4, [r3, #4]
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	6898      	ldr	r0, [r3, #8]
 8003604:	893b      	ldrh	r3, [r7, #8]
 8003606:	8979      	ldrh	r1, [r7, #10]
 8003608:	687a      	ldr	r2, [r7, #4]
 800360a:	47a0      	blx	r4
 800360c:	4603      	mov	r3, r0
}
 800360e:	4618      	mov	r0, r3
 8003610:	3714      	adds	r7, #20
 8003612:	46bd      	mov	sp, r7
 8003614:	bd90      	pop	{r4, r7, pc}

08003616 <OV5640_WriteReg>:


int32_t OV5640_WriteReg(OV5650_Context_t *Context, uint16_t reg, uint8_t *pdata, uint16_t length)
{
 8003616:	b590      	push	{r4, r7, lr}
 8003618:	b085      	sub	sp, #20
 800361a:	af00      	add	r7, sp, #0
 800361c:	60f8      	str	r0, [r7, #12]
 800361e:	607a      	str	r2, [r7, #4]
 8003620:	461a      	mov	r2, r3
 8003622:	460b      	mov	r3, r1
 8003624:	817b      	strh	r3, [r7, #10]
 8003626:	4613      	mov	r3, r2
 8003628:	813b      	strh	r3, [r7, #8]
  return Context->Write(Context->Handle, reg, pdata, length);
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	681c      	ldr	r4, [r3, #0]
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	6898      	ldr	r0, [r3, #8]
 8003632:	893b      	ldrh	r3, [r7, #8]
 8003634:	8979      	ldrh	r1, [r7, #10]
 8003636:	687a      	ldr	r2, [r7, #4]
 8003638:	47a0      	blx	r4
 800363a:	4603      	mov	r3, r0
}
 800363c:	4618      	mov	r0, r3
 800363e:	3714      	adds	r7, #20
 8003640:	46bd      	mov	sp, r7
 8003642:	bd90      	pop	{r4, r7, pc}

08003644 <OV5640_ReadWrapper>:

static int32_t OV5640_ReadWrapper(void *Handle, uint16_t Reg, uint8_t *Data, uint16_t Length){
 8003644:	b590      	push	{r4, r7, lr}
 8003646:	b087      	sub	sp, #28
 8003648:	af00      	add	r7, sp, #0
 800364a:	60f8      	str	r0, [r7, #12]
 800364c:	607a      	str	r2, [r7, #4]
 800364e:	461a      	mov	r2, r3
 8003650:	460b      	mov	r3, r1
 8003652:	817b      	strh	r3, [r7, #10]
 8003654:	4613      	mov	r3, r2
 8003656:	813b      	strh	r3, [r7, #8]
	OV5640_Handle_t *OV5640 = (OV5640_Handle_t*)Handle;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	617b      	str	r3, [r7, #20]
    return OV5640->IO.Read(OV5640->IO.Address,Reg,Data,Length);
 800365c:	697b      	ldr	r3, [r7, #20]
 800365e:	691c      	ldr	r4, [r3, #16]
 8003660:	697b      	ldr	r3, [r7, #20]
 8003662:	8818      	ldrh	r0, [r3, #0]
 8003664:	893b      	ldrh	r3, [r7, #8]
 8003666:	8979      	ldrh	r1, [r7, #10]
 8003668:	687a      	ldr	r2, [r7, #4]
 800366a:	47a0      	blx	r4
 800366c:	4603      	mov	r3, r0
}
 800366e:	4618      	mov	r0, r3
 8003670:	371c      	adds	r7, #28
 8003672:	46bd      	mov	sp, r7
 8003674:	bd90      	pop	{r4, r7, pc}

08003676 <OV5640_WriteWrapper>:

static int32_t OV5640_WriteWrapper(void *Handle, uint16_t Reg, uint8_t *Data, uint16_t Length){
 8003676:	b590      	push	{r4, r7, lr}
 8003678:	b087      	sub	sp, #28
 800367a:	af00      	add	r7, sp, #0
 800367c:	60f8      	str	r0, [r7, #12]
 800367e:	607a      	str	r2, [r7, #4]
 8003680:	461a      	mov	r2, r3
 8003682:	460b      	mov	r3, r1
 8003684:	817b      	strh	r3, [r7, #10]
 8003686:	4613      	mov	r3, r2
 8003688:	813b      	strh	r3, [r7, #8]
	OV5640_Handle_t *OV5640 = (OV5640_Handle_t*)Handle;
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	617b      	str	r3, [r7, #20]
	return OV5640->IO.Write(OV5640->IO.Address,Reg,Data,Length);
 800368e:	697b      	ldr	r3, [r7, #20]
 8003690:	68dc      	ldr	r4, [r3, #12]
 8003692:	697b      	ldr	r3, [r7, #20]
 8003694:	8818      	ldrh	r0, [r3, #0]
 8003696:	893b      	ldrh	r3, [r7, #8]
 8003698:	8979      	ldrh	r1, [r7, #10]
 800369a:	687a      	ldr	r2, [r7, #4]
 800369c:	47a0      	blx	r4
 800369e:	4603      	mov	r3, r0
}
 80036a0:	4618      	mov	r0, r3
 80036a2:	371c      	adds	r7, #28
 80036a4:	46bd      	mov	sp, r7
 80036a6:	bd90      	pop	{r4, r7, pc}

080036a8 <OV5640_Delay>:

static int32_t OV5640_Delay(OV5640_Handle_t *OV5640, uint32_t Delay)
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b084      	sub	sp, #16
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
 80036b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  tickstart = OV5640->IO.GetTick();
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	695b      	ldr	r3, [r3, #20]
 80036b6:	4798      	blx	r3
 80036b8:	60f8      	str	r0, [r7, #12]
  while ((OV5640->IO.GetTick() - tickstart) < Delay)
 80036ba:	bf00      	nop
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	695b      	ldr	r3, [r3, #20]
 80036c0:	4798      	blx	r3
 80036c2:	4602      	mov	r2, r0
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	1ad3      	subs	r3, r2, r3
 80036c8:	683a      	ldr	r2, [r7, #0]
 80036ca:	429a      	cmp	r2, r3
 80036cc:	d8f6      	bhi.n	80036bc <OV5640_Delay+0x14>
  {
  }
  return OV5640_OK;
 80036ce:	2300      	movs	r3, #0
}
 80036d0:	4618      	mov	r0, r3
 80036d2:	3710      	adds	r7, #16
 80036d4:	46bd      	mov	sp, r7
 80036d6:	bd80      	pop	{r7, pc}

080036d8 <OV5640_SetResolution>:

int32_t OV5640_SetResolution(OV5640_Handle_t *OV5640, uint32_t Resolution)
{
 80036d8:	b580      	push	{r7, lr}
 80036da:	b086      	sub	sp, #24
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
 80036e0:	6039      	str	r1, [r7, #0]
  int32_t ret = OV5640_OK;
 80036e2:	2300      	movs	r3, #0
 80036e4:	617b      	str	r3, [r7, #20]
    {OV5640_TIMING_DVPVO_HIGH, 0x00},
    {OV5640_TIMING_DVPVO_LOW, 0x78},
  };

  /* Check if resolution is supported */
  if (Resolution > OV5640_R800x480)
 80036e6:	683b      	ldr	r3, [r7, #0]
 80036e8:	2b04      	cmp	r3, #4
 80036ea:	d903      	bls.n	80036f4 <OV5640_SetResolution+0x1c>
  {
    ret = OV5640_ERROR;
 80036ec:	f04f 33ff 	mov.w	r3, #4294967295
 80036f0:	617b      	str	r3, [r7, #20]
 80036f2:	e0d8      	b.n	80038a6 <OV5640_SetResolution+0x1ce>
  }
  else
  {
    /* Initialize OV5640 */
    switch (Resolution)
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	2b04      	cmp	r3, #4
 80036f8:	f200 80d1 	bhi.w	800389e <OV5640_SetResolution+0x1c6>
 80036fc:	a201      	add	r2, pc, #4	; (adr r2, 8003704 <OV5640_SetResolution+0x2c>)
 80036fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003702:	bf00      	nop
 8003704:	08003719 	.word	0x08003719
 8003708:	08003767 	.word	0x08003767
 800370c:	080037b5 	.word	0x080037b5
 8003710:	08003803 	.word	0x08003803
 8003714:	08003851 	.word	0x08003851
    {
      case OV5640_R160x120:
        for (index = 0; index < (sizeof(OV5640_QQVGA) / 4U); index++)
 8003718:	2300      	movs	r3, #0
 800371a:	613b      	str	r3, [r7, #16]
 800371c:	e01f      	b.n	800375e <OV5640_SetResolution+0x86>
        {
          if (ret != OV5640_ERROR)
 800371e:	697b      	ldr	r3, [r7, #20]
 8003720:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003724:	d018      	beq.n	8003758 <OV5640_SetResolution+0x80>
          {
            tmp = (uint8_t)OV5640_QQVGA[index][1];
 8003726:	4a62      	ldr	r2, [pc, #392]	; (80038b0 <OV5640_SetResolution+0x1d8>)
 8003728:	693b      	ldr	r3, [r7, #16]
 800372a:	009b      	lsls	r3, r3, #2
 800372c:	4413      	add	r3, r2
 800372e:	885b      	ldrh	r3, [r3, #2]
 8003730:	b2db      	uxtb	r3, r3
 8003732:	73fb      	strb	r3, [r7, #15]
            if (OV5640_WriteReg(&OV5640->Context, OV5640_QQVGA[index][0], &tmp, 1) != OV5640_OK)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	f103 0018 	add.w	r0, r3, #24
 800373a:	4a5d      	ldr	r2, [pc, #372]	; (80038b0 <OV5640_SetResolution+0x1d8>)
 800373c:	693b      	ldr	r3, [r7, #16]
 800373e:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8003742:	f107 020f 	add.w	r2, r7, #15
 8003746:	2301      	movs	r3, #1
 8003748:	f7ff ff65 	bl	8003616 <OV5640_WriteReg>
 800374c:	4603      	mov	r3, r0
 800374e:	2b00      	cmp	r3, #0
 8003750:	d002      	beq.n	8003758 <OV5640_SetResolution+0x80>
            {
              ret = OV5640_ERROR;
 8003752:	f04f 33ff 	mov.w	r3, #4294967295
 8003756:	617b      	str	r3, [r7, #20]
        for (index = 0; index < (sizeof(OV5640_QQVGA) / 4U); index++)
 8003758:	693b      	ldr	r3, [r7, #16]
 800375a:	3301      	adds	r3, #1
 800375c:	613b      	str	r3, [r7, #16]
 800375e:	693b      	ldr	r3, [r7, #16]
 8003760:	2b03      	cmp	r3, #3
 8003762:	d9dc      	bls.n	800371e <OV5640_SetResolution+0x46>
            }
          }
        }
        break;
 8003764:	e09f      	b.n	80038a6 <OV5640_SetResolution+0x1ce>
      case OV5640_R320x240:
        for (index = 0; index < (sizeof(OV5640_QVGA) / 4U); index++)
 8003766:	2300      	movs	r3, #0
 8003768:	613b      	str	r3, [r7, #16]
 800376a:	e01f      	b.n	80037ac <OV5640_SetResolution+0xd4>
        {
          if (ret != OV5640_ERROR)
 800376c:	697b      	ldr	r3, [r7, #20]
 800376e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003772:	d018      	beq.n	80037a6 <OV5640_SetResolution+0xce>
          {
            tmp = (uint8_t)OV5640_QVGA[index][1];
 8003774:	4a4f      	ldr	r2, [pc, #316]	; (80038b4 <OV5640_SetResolution+0x1dc>)
 8003776:	693b      	ldr	r3, [r7, #16]
 8003778:	009b      	lsls	r3, r3, #2
 800377a:	4413      	add	r3, r2
 800377c:	885b      	ldrh	r3, [r3, #2]
 800377e:	b2db      	uxtb	r3, r3
 8003780:	73fb      	strb	r3, [r7, #15]
            if (OV5640_WriteReg(&OV5640->Context, OV5640_QVGA[index][0], &tmp, 1) != OV5640_OK)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	f103 0018 	add.w	r0, r3, #24
 8003788:	4a4a      	ldr	r2, [pc, #296]	; (80038b4 <OV5640_SetResolution+0x1dc>)
 800378a:	693b      	ldr	r3, [r7, #16]
 800378c:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8003790:	f107 020f 	add.w	r2, r7, #15
 8003794:	2301      	movs	r3, #1
 8003796:	f7ff ff3e 	bl	8003616 <OV5640_WriteReg>
 800379a:	4603      	mov	r3, r0
 800379c:	2b00      	cmp	r3, #0
 800379e:	d002      	beq.n	80037a6 <OV5640_SetResolution+0xce>
            {
              ret = OV5640_ERROR;
 80037a0:	f04f 33ff 	mov.w	r3, #4294967295
 80037a4:	617b      	str	r3, [r7, #20]
        for (index = 0; index < (sizeof(OV5640_QVGA) / 4U); index++)
 80037a6:	693b      	ldr	r3, [r7, #16]
 80037a8:	3301      	adds	r3, #1
 80037aa:	613b      	str	r3, [r7, #16]
 80037ac:	693b      	ldr	r3, [r7, #16]
 80037ae:	2b03      	cmp	r3, #3
 80037b0:	d9dc      	bls.n	800376c <OV5640_SetResolution+0x94>
            }
          }
        }
        break;
 80037b2:	e078      	b.n	80038a6 <OV5640_SetResolution+0x1ce>
      case OV5640_R480x272:
        for (index = 0; index < (sizeof(OV5640_480x272) / 4U); index++)
 80037b4:	2300      	movs	r3, #0
 80037b6:	613b      	str	r3, [r7, #16]
 80037b8:	e01f      	b.n	80037fa <OV5640_SetResolution+0x122>
        {
          if (ret != OV5640_ERROR)
 80037ba:	697b      	ldr	r3, [r7, #20]
 80037bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037c0:	d018      	beq.n	80037f4 <OV5640_SetResolution+0x11c>
          {
            tmp = (uint8_t)OV5640_480x272[index][1];
 80037c2:	4a3d      	ldr	r2, [pc, #244]	; (80038b8 <OV5640_SetResolution+0x1e0>)
 80037c4:	693b      	ldr	r3, [r7, #16]
 80037c6:	009b      	lsls	r3, r3, #2
 80037c8:	4413      	add	r3, r2
 80037ca:	885b      	ldrh	r3, [r3, #2]
 80037cc:	b2db      	uxtb	r3, r3
 80037ce:	73fb      	strb	r3, [r7, #15]
            if (OV5640_WriteReg(&OV5640->Context, OV5640_480x272[index][0], &tmp, 1) != OV5640_OK)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	f103 0018 	add.w	r0, r3, #24
 80037d6:	4a38      	ldr	r2, [pc, #224]	; (80038b8 <OV5640_SetResolution+0x1e0>)
 80037d8:	693b      	ldr	r3, [r7, #16]
 80037da:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 80037de:	f107 020f 	add.w	r2, r7, #15
 80037e2:	2301      	movs	r3, #1
 80037e4:	f7ff ff17 	bl	8003616 <OV5640_WriteReg>
 80037e8:	4603      	mov	r3, r0
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d002      	beq.n	80037f4 <OV5640_SetResolution+0x11c>
            {
              ret = OV5640_ERROR;
 80037ee:	f04f 33ff 	mov.w	r3, #4294967295
 80037f2:	617b      	str	r3, [r7, #20]
        for (index = 0; index < (sizeof(OV5640_480x272) / 4U); index++)
 80037f4:	693b      	ldr	r3, [r7, #16]
 80037f6:	3301      	adds	r3, #1
 80037f8:	613b      	str	r3, [r7, #16]
 80037fa:	693b      	ldr	r3, [r7, #16]
 80037fc:	2b03      	cmp	r3, #3
 80037fe:	d9dc      	bls.n	80037ba <OV5640_SetResolution+0xe2>
            }
          }
        }
        break;
 8003800:	e051      	b.n	80038a6 <OV5640_SetResolution+0x1ce>
      case OV5640_R640x480:
        for (index = 0; index < (sizeof(OV5640_VGA) / 4U); index++)
 8003802:	2300      	movs	r3, #0
 8003804:	613b      	str	r3, [r7, #16]
 8003806:	e01f      	b.n	8003848 <OV5640_SetResolution+0x170>
        {
          if (ret != OV5640_ERROR)
 8003808:	697b      	ldr	r3, [r7, #20]
 800380a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800380e:	d018      	beq.n	8003842 <OV5640_SetResolution+0x16a>
          {
            tmp = (uint8_t)OV5640_VGA[index][1];
 8003810:	4a2a      	ldr	r2, [pc, #168]	; (80038bc <OV5640_SetResolution+0x1e4>)
 8003812:	693b      	ldr	r3, [r7, #16]
 8003814:	009b      	lsls	r3, r3, #2
 8003816:	4413      	add	r3, r2
 8003818:	885b      	ldrh	r3, [r3, #2]
 800381a:	b2db      	uxtb	r3, r3
 800381c:	73fb      	strb	r3, [r7, #15]
            if (OV5640_WriteReg(&OV5640->Context, OV5640_VGA[index][0], &tmp, 1) != OV5640_OK)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	f103 0018 	add.w	r0, r3, #24
 8003824:	4a25      	ldr	r2, [pc, #148]	; (80038bc <OV5640_SetResolution+0x1e4>)
 8003826:	693b      	ldr	r3, [r7, #16]
 8003828:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 800382c:	f107 020f 	add.w	r2, r7, #15
 8003830:	2301      	movs	r3, #1
 8003832:	f7ff fef0 	bl	8003616 <OV5640_WriteReg>
 8003836:	4603      	mov	r3, r0
 8003838:	2b00      	cmp	r3, #0
 800383a:	d002      	beq.n	8003842 <OV5640_SetResolution+0x16a>
            {
              ret = OV5640_ERROR;
 800383c:	f04f 33ff 	mov.w	r3, #4294967295
 8003840:	617b      	str	r3, [r7, #20]
        for (index = 0; index < (sizeof(OV5640_VGA) / 4U); index++)
 8003842:	693b      	ldr	r3, [r7, #16]
 8003844:	3301      	adds	r3, #1
 8003846:	613b      	str	r3, [r7, #16]
 8003848:	693b      	ldr	r3, [r7, #16]
 800384a:	2b03      	cmp	r3, #3
 800384c:	d9dc      	bls.n	8003808 <OV5640_SetResolution+0x130>
            }
          }
        }
        break;
 800384e:	e02a      	b.n	80038a6 <OV5640_SetResolution+0x1ce>
      case OV5640_R800x480:
        for (index = 0; index < (sizeof(OV5640_WVGA) / 4U); index++)
 8003850:	2300      	movs	r3, #0
 8003852:	613b      	str	r3, [r7, #16]
 8003854:	e01f      	b.n	8003896 <OV5640_SetResolution+0x1be>
        {
          if (ret != OV5640_ERROR)
 8003856:	697b      	ldr	r3, [r7, #20]
 8003858:	f1b3 3fff 	cmp.w	r3, #4294967295
 800385c:	d018      	beq.n	8003890 <OV5640_SetResolution+0x1b8>
          {
            tmp = (uint8_t)OV5640_WVGA[index][1];
 800385e:	4a18      	ldr	r2, [pc, #96]	; (80038c0 <OV5640_SetResolution+0x1e8>)
 8003860:	693b      	ldr	r3, [r7, #16]
 8003862:	009b      	lsls	r3, r3, #2
 8003864:	4413      	add	r3, r2
 8003866:	885b      	ldrh	r3, [r3, #2]
 8003868:	b2db      	uxtb	r3, r3
 800386a:	73fb      	strb	r3, [r7, #15]
            if (OV5640_WriteReg(&OV5640->Context, OV5640_WVGA[index][0], &tmp, 1) != OV5640_OK)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	f103 0018 	add.w	r0, r3, #24
 8003872:	4a13      	ldr	r2, [pc, #76]	; (80038c0 <OV5640_SetResolution+0x1e8>)
 8003874:	693b      	ldr	r3, [r7, #16]
 8003876:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 800387a:	f107 020f 	add.w	r2, r7, #15
 800387e:	2301      	movs	r3, #1
 8003880:	f7ff fec9 	bl	8003616 <OV5640_WriteReg>
 8003884:	4603      	mov	r3, r0
 8003886:	2b00      	cmp	r3, #0
 8003888:	d002      	beq.n	8003890 <OV5640_SetResolution+0x1b8>
            {
              ret = OV5640_ERROR;
 800388a:	f04f 33ff 	mov.w	r3, #4294967295
 800388e:	617b      	str	r3, [r7, #20]
        for (index = 0; index < (sizeof(OV5640_WVGA) / 4U); index++)
 8003890:	693b      	ldr	r3, [r7, #16]
 8003892:	3301      	adds	r3, #1
 8003894:	613b      	str	r3, [r7, #16]
 8003896:	693b      	ldr	r3, [r7, #16]
 8003898:	2b03      	cmp	r3, #3
 800389a:	d9dc      	bls.n	8003856 <OV5640_SetResolution+0x17e>
            }
          }
        }
        break;
 800389c:	e003      	b.n	80038a6 <OV5640_SetResolution+0x1ce>
      default:
        ret = OV5640_ERROR;
 800389e:	f04f 33ff 	mov.w	r3, #4294967295
 80038a2:	617b      	str	r3, [r7, #20]
        break;
 80038a4:	bf00      	nop
    }
  }

  return ret;
 80038a6:	697b      	ldr	r3, [r7, #20]
}
 80038a8:	4618      	mov	r0, r3
 80038aa:	3718      	adds	r7, #24
 80038ac:	46bd      	mov	sp, r7
 80038ae:	bd80      	pop	{r7, pc}
 80038b0:	0800ec70 	.word	0x0800ec70
 80038b4:	0800ec80 	.word	0x0800ec80
 80038b8:	0800ec90 	.word	0x0800ec90
 80038bc:	0800eca0 	.word	0x0800eca0
 80038c0:	0800ecb0 	.word	0x0800ecb0

080038c4 <OV5640_SetPixelFormat>:

int32_t OV5640_SetPixelFormat(OV5640_Handle_t *OV5640, uint32_t PixelFormat)
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	b086      	sub	sp, #24
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
 80038cc:	6039      	str	r1, [r7, #0]
  int32_t ret = OV5640_OK;
 80038ce:	2300      	movs	r3, #0
 80038d0:	617b      	str	r3, [r7, #20]
    {OV5640_FORMAT_CTRL00, 0x30},
    {OV5640_FORMAT_MUX_CTRL, 0x00},
  };

  /* Check if PixelFormat is supported */
  if ((PixelFormat != OV5640_RGB565) && (PixelFormat != OV5640_YUV422) &&
 80038d2:	683b      	ldr	r3, [r7, #0]
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d00f      	beq.n	80038f8 <OV5640_SetPixelFormat+0x34>
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	2b02      	cmp	r3, #2
 80038dc:	d00c      	beq.n	80038f8 <OV5640_SetPixelFormat+0x34>
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	2b01      	cmp	r3, #1
 80038e2:	d009      	beq.n	80038f8 <OV5640_SetPixelFormat+0x34>
      (PixelFormat != OV5640_RGB888) && (PixelFormat != OV5640_Y8) &&
 80038e4:	683b      	ldr	r3, [r7, #0]
 80038e6:	2b07      	cmp	r3, #7
 80038e8:	d006      	beq.n	80038f8 <OV5640_SetPixelFormat+0x34>
 80038ea:	683b      	ldr	r3, [r7, #0]
 80038ec:	2b08      	cmp	r3, #8
 80038ee:	d003      	beq.n	80038f8 <OV5640_SetPixelFormat+0x34>
      (PixelFormat != OV5640_JPEG))
  {
    /* Pixel format not supported */
    ret = OV5640_ERROR;
 80038f0:	f04f 33ff 	mov.w	r3, #4294967295
 80038f4:	617b      	str	r3, [r7, #20]
 80038f6:	e16a      	b.n	8003bce <OV5640_SetPixelFormat+0x30a>
  }
  else
  {
    /* Set specific parameters for each PixelFormat */
    switch (PixelFormat)
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	3b01      	subs	r3, #1
 80038fc:	2b07      	cmp	r3, #7
 80038fe:	f200 80c3 	bhi.w	8003a88 <OV5640_SetPixelFormat+0x1c4>
 8003902:	a201      	add	r2, pc, #4	; (adr r2, 8003908 <OV5640_SetPixelFormat+0x44>)
 8003904:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003908:	08003981 	.word	0x08003981
 800390c:	08003929 	.word	0x08003929
 8003910:	08003a89 	.word	0x08003a89
 8003914:	08003a89 	.word	0x08003a89
 8003918:	08003a89 	.word	0x08003a89
 800391c:	08003a89 	.word	0x08003a89
 8003920:	080039d9 	.word	0x080039d9
 8003924:	08003a31 	.word	0x08003a31
    {
      case OV5640_YUV422:
        for (index = 0; index < (sizeof(OV5640_PF_YUV422) / 4U); index++)
 8003928:	2300      	movs	r3, #0
 800392a:	613b      	str	r3, [r7, #16]
 800392c:	e024      	b.n	8003978 <OV5640_SetPixelFormat+0xb4>
        {
          if (ret != OV5640_ERROR)
 800392e:	697b      	ldr	r3, [r7, #20]
 8003930:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003934:	d01d      	beq.n	8003972 <OV5640_SetPixelFormat+0xae>
          {
            tmp = (uint8_t)OV5640_PF_YUV422[index][1];
 8003936:	4aa8      	ldr	r2, [pc, #672]	; (8003bd8 <OV5640_SetPixelFormat+0x314>)
 8003938:	693b      	ldr	r3, [r7, #16]
 800393a:	009b      	lsls	r3, r3, #2
 800393c:	4413      	add	r3, r2
 800393e:	885b      	ldrh	r3, [r3, #2]
 8003940:	b2db      	uxtb	r3, r3
 8003942:	73fb      	strb	r3, [r7, #15]
            if (OV5640_WriteReg(&OV5640->Context, OV5640_PF_YUV422[index][0], &tmp, 1) != OV5640_OK)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	f103 0018 	add.w	r0, r3, #24
 800394a:	4aa3      	ldr	r2, [pc, #652]	; (8003bd8 <OV5640_SetPixelFormat+0x314>)
 800394c:	693b      	ldr	r3, [r7, #16]
 800394e:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8003952:	f107 020f 	add.w	r2, r7, #15
 8003956:	2301      	movs	r3, #1
 8003958:	f7ff fe5d 	bl	8003616 <OV5640_WriteReg>
 800395c:	4603      	mov	r3, r0
 800395e:	2b00      	cmp	r3, #0
 8003960:	d003      	beq.n	800396a <OV5640_SetPixelFormat+0xa6>
            {
              ret = OV5640_ERROR;
 8003962:	f04f 33ff 	mov.w	r3, #4294967295
 8003966:	617b      	str	r3, [r7, #20]
 8003968:	e003      	b.n	8003972 <OV5640_SetPixelFormat+0xae>
            }
            else
            {
              (void)OV5640_Delay(OV5640, 1);
 800396a:	2101      	movs	r1, #1
 800396c:	6878      	ldr	r0, [r7, #4]
 800396e:	f7ff fe9b 	bl	80036a8 <OV5640_Delay>
        for (index = 0; index < (sizeof(OV5640_PF_YUV422) / 4U); index++)
 8003972:	693b      	ldr	r3, [r7, #16]
 8003974:	3301      	adds	r3, #1
 8003976:	613b      	str	r3, [r7, #16]
 8003978:	693b      	ldr	r3, [r7, #16]
 800397a:	2b01      	cmp	r3, #1
 800397c:	d9d7      	bls.n	800392e <OV5640_SetPixelFormat+0x6a>
            }
          }
        }
        break;
 800397e:	e0af      	b.n	8003ae0 <OV5640_SetPixelFormat+0x21c>

      case OV5640_RGB888:
        for (index = 0; index < (sizeof(OV5640_PF_RGB888) / 4U); index++)
 8003980:	2300      	movs	r3, #0
 8003982:	613b      	str	r3, [r7, #16]
 8003984:	e024      	b.n	80039d0 <OV5640_SetPixelFormat+0x10c>
        {
          if (ret != OV5640_ERROR)
 8003986:	697b      	ldr	r3, [r7, #20]
 8003988:	f1b3 3fff 	cmp.w	r3, #4294967295
 800398c:	d01d      	beq.n	80039ca <OV5640_SetPixelFormat+0x106>
          {
            tmp = (uint8_t)OV5640_PF_RGB888[index][1];
 800398e:	4a93      	ldr	r2, [pc, #588]	; (8003bdc <OV5640_SetPixelFormat+0x318>)
 8003990:	693b      	ldr	r3, [r7, #16]
 8003992:	009b      	lsls	r3, r3, #2
 8003994:	4413      	add	r3, r2
 8003996:	885b      	ldrh	r3, [r3, #2]
 8003998:	b2db      	uxtb	r3, r3
 800399a:	73fb      	strb	r3, [r7, #15]
            if (OV5640_WriteReg(&OV5640->Context, OV5640_PF_RGB888[index][0], &tmp, 1) != OV5640_OK)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	f103 0018 	add.w	r0, r3, #24
 80039a2:	4a8e      	ldr	r2, [pc, #568]	; (8003bdc <OV5640_SetPixelFormat+0x318>)
 80039a4:	693b      	ldr	r3, [r7, #16]
 80039a6:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 80039aa:	f107 020f 	add.w	r2, r7, #15
 80039ae:	2301      	movs	r3, #1
 80039b0:	f7ff fe31 	bl	8003616 <OV5640_WriteReg>
 80039b4:	4603      	mov	r3, r0
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d003      	beq.n	80039c2 <OV5640_SetPixelFormat+0xfe>
            {
              ret = OV5640_ERROR;
 80039ba:	f04f 33ff 	mov.w	r3, #4294967295
 80039be:	617b      	str	r3, [r7, #20]
 80039c0:	e003      	b.n	80039ca <OV5640_SetPixelFormat+0x106>
            }
            else
            {
              (void)OV5640_Delay(OV5640, 1);
 80039c2:	2101      	movs	r1, #1
 80039c4:	6878      	ldr	r0, [r7, #4]
 80039c6:	f7ff fe6f 	bl	80036a8 <OV5640_Delay>
        for (index = 0; index < (sizeof(OV5640_PF_RGB888) / 4U); index++)
 80039ca:	693b      	ldr	r3, [r7, #16]
 80039cc:	3301      	adds	r3, #1
 80039ce:	613b      	str	r3, [r7, #16]
 80039d0:	693b      	ldr	r3, [r7, #16]
 80039d2:	2b01      	cmp	r3, #1
 80039d4:	d9d7      	bls.n	8003986 <OV5640_SetPixelFormat+0xc2>
            }
          }
        }
        break;
 80039d6:	e083      	b.n	8003ae0 <OV5640_SetPixelFormat+0x21c>

      case OV5640_Y8:
        for (index = 0; index < (sizeof(OV5640_PF_Y8) / 4U); index++)
 80039d8:	2300      	movs	r3, #0
 80039da:	613b      	str	r3, [r7, #16]
 80039dc:	e024      	b.n	8003a28 <OV5640_SetPixelFormat+0x164>
        {
          if (ret != OV5640_ERROR)
 80039de:	697b      	ldr	r3, [r7, #20]
 80039e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039e4:	d01d      	beq.n	8003a22 <OV5640_SetPixelFormat+0x15e>
          {
            tmp = (uint8_t)OV5640_PF_Y8[index][1];
 80039e6:	4a7e      	ldr	r2, [pc, #504]	; (8003be0 <OV5640_SetPixelFormat+0x31c>)
 80039e8:	693b      	ldr	r3, [r7, #16]
 80039ea:	009b      	lsls	r3, r3, #2
 80039ec:	4413      	add	r3, r2
 80039ee:	885b      	ldrh	r3, [r3, #2]
 80039f0:	b2db      	uxtb	r3, r3
 80039f2:	73fb      	strb	r3, [r7, #15]
            if (OV5640_WriteReg(&OV5640->Context, OV5640_PF_Y8[index][0], &tmp, 1) != OV5640_OK)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	f103 0018 	add.w	r0, r3, #24
 80039fa:	4a79      	ldr	r2, [pc, #484]	; (8003be0 <OV5640_SetPixelFormat+0x31c>)
 80039fc:	693b      	ldr	r3, [r7, #16]
 80039fe:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8003a02:	f107 020f 	add.w	r2, r7, #15
 8003a06:	2301      	movs	r3, #1
 8003a08:	f7ff fe05 	bl	8003616 <OV5640_WriteReg>
 8003a0c:	4603      	mov	r3, r0
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d003      	beq.n	8003a1a <OV5640_SetPixelFormat+0x156>
            {
              ret = OV5640_ERROR;
 8003a12:	f04f 33ff 	mov.w	r3, #4294967295
 8003a16:	617b      	str	r3, [r7, #20]
 8003a18:	e003      	b.n	8003a22 <OV5640_SetPixelFormat+0x15e>
            }
            else
            {
              (void)OV5640_Delay(OV5640, 1);
 8003a1a:	2101      	movs	r1, #1
 8003a1c:	6878      	ldr	r0, [r7, #4]
 8003a1e:	f7ff fe43 	bl	80036a8 <OV5640_Delay>
        for (index = 0; index < (sizeof(OV5640_PF_Y8) / 4U); index++)
 8003a22:	693b      	ldr	r3, [r7, #16]
 8003a24:	3301      	adds	r3, #1
 8003a26:	613b      	str	r3, [r7, #16]
 8003a28:	693b      	ldr	r3, [r7, #16]
 8003a2a:	2b01      	cmp	r3, #1
 8003a2c:	d9d7      	bls.n	80039de <OV5640_SetPixelFormat+0x11a>
            }
          }
        }
        break;
 8003a2e:	e057      	b.n	8003ae0 <OV5640_SetPixelFormat+0x21c>

      case OV5640_JPEG:
        for (index = 0; index < (sizeof(OV5640_PF_JPEG) / 4U); index++)
 8003a30:	2300      	movs	r3, #0
 8003a32:	613b      	str	r3, [r7, #16]
 8003a34:	e024      	b.n	8003a80 <OV5640_SetPixelFormat+0x1bc>
        {
          if (ret != OV5640_ERROR)
 8003a36:	697b      	ldr	r3, [r7, #20]
 8003a38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a3c:	d01d      	beq.n	8003a7a <OV5640_SetPixelFormat+0x1b6>
          {
            tmp = (uint8_t)OV5640_PF_JPEG[index][1];
 8003a3e:	4a69      	ldr	r2, [pc, #420]	; (8003be4 <OV5640_SetPixelFormat+0x320>)
 8003a40:	693b      	ldr	r3, [r7, #16]
 8003a42:	009b      	lsls	r3, r3, #2
 8003a44:	4413      	add	r3, r2
 8003a46:	885b      	ldrh	r3, [r3, #2]
 8003a48:	b2db      	uxtb	r3, r3
 8003a4a:	73fb      	strb	r3, [r7, #15]
            if (OV5640_WriteReg(&OV5640->Context, OV5640_PF_JPEG[index][0], &tmp, 1) != OV5640_OK)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	f103 0018 	add.w	r0, r3, #24
 8003a52:	4a64      	ldr	r2, [pc, #400]	; (8003be4 <OV5640_SetPixelFormat+0x320>)
 8003a54:	693b      	ldr	r3, [r7, #16]
 8003a56:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8003a5a:	f107 020f 	add.w	r2, r7, #15
 8003a5e:	2301      	movs	r3, #1
 8003a60:	f7ff fdd9 	bl	8003616 <OV5640_WriteReg>
 8003a64:	4603      	mov	r3, r0
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d003      	beq.n	8003a72 <OV5640_SetPixelFormat+0x1ae>
            {
              ret = OV5640_ERROR;
 8003a6a:	f04f 33ff 	mov.w	r3, #4294967295
 8003a6e:	617b      	str	r3, [r7, #20]
 8003a70:	e003      	b.n	8003a7a <OV5640_SetPixelFormat+0x1b6>
            }
            else
            {
              (void)OV5640_Delay(OV5640, 1);
 8003a72:	2101      	movs	r1, #1
 8003a74:	6878      	ldr	r0, [r7, #4]
 8003a76:	f7ff fe17 	bl	80036a8 <OV5640_Delay>
        for (index = 0; index < (sizeof(OV5640_PF_JPEG) / 4U); index++)
 8003a7a:	693b      	ldr	r3, [r7, #16]
 8003a7c:	3301      	adds	r3, #1
 8003a7e:	613b      	str	r3, [r7, #16]
 8003a80:	693b      	ldr	r3, [r7, #16]
 8003a82:	2b01      	cmp	r3, #1
 8003a84:	d9d7      	bls.n	8003a36 <OV5640_SetPixelFormat+0x172>
            }
          }
        }
        break;
 8003a86:	e02b      	b.n	8003ae0 <OV5640_SetPixelFormat+0x21c>

      case OV5640_RGB565:
      default:
        for (index = 0; index < (sizeof(OV5640_PF_RGB565) / 4U); index++)
 8003a88:	2300      	movs	r3, #0
 8003a8a:	613b      	str	r3, [r7, #16]
 8003a8c:	e024      	b.n	8003ad8 <OV5640_SetPixelFormat+0x214>
        {
          if (ret != OV5640_ERROR)
 8003a8e:	697b      	ldr	r3, [r7, #20]
 8003a90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a94:	d01d      	beq.n	8003ad2 <OV5640_SetPixelFormat+0x20e>
          {
            tmp = (uint8_t)OV5640_PF_RGB565[index][1];
 8003a96:	4a54      	ldr	r2, [pc, #336]	; (8003be8 <OV5640_SetPixelFormat+0x324>)
 8003a98:	693b      	ldr	r3, [r7, #16]
 8003a9a:	009b      	lsls	r3, r3, #2
 8003a9c:	4413      	add	r3, r2
 8003a9e:	885b      	ldrh	r3, [r3, #2]
 8003aa0:	b2db      	uxtb	r3, r3
 8003aa2:	73fb      	strb	r3, [r7, #15]
            if (OV5640_WriteReg(&OV5640->Context, OV5640_PF_RGB565[index][0], &tmp, 1) != OV5640_OK)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	f103 0018 	add.w	r0, r3, #24
 8003aaa:	4a4f      	ldr	r2, [pc, #316]	; (8003be8 <OV5640_SetPixelFormat+0x324>)
 8003aac:	693b      	ldr	r3, [r7, #16]
 8003aae:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8003ab2:	f107 020f 	add.w	r2, r7, #15
 8003ab6:	2301      	movs	r3, #1
 8003ab8:	f7ff fdad 	bl	8003616 <OV5640_WriteReg>
 8003abc:	4603      	mov	r3, r0
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d003      	beq.n	8003aca <OV5640_SetPixelFormat+0x206>
            {
              ret = OV5640_ERROR;
 8003ac2:	f04f 33ff 	mov.w	r3, #4294967295
 8003ac6:	617b      	str	r3, [r7, #20]
 8003ac8:	e003      	b.n	8003ad2 <OV5640_SetPixelFormat+0x20e>
            }
            else
            {
              (void)OV5640_Delay(OV5640, 1);
 8003aca:	2101      	movs	r1, #1
 8003acc:	6878      	ldr	r0, [r7, #4]
 8003ace:	f7ff fdeb 	bl	80036a8 <OV5640_Delay>
        for (index = 0; index < (sizeof(OV5640_PF_RGB565) / 4U); index++)
 8003ad2:	693b      	ldr	r3, [r7, #16]
 8003ad4:	3301      	adds	r3, #1
 8003ad6:	613b      	str	r3, [r7, #16]
 8003ad8:	693b      	ldr	r3, [r7, #16]
 8003ada:	2b01      	cmp	r3, #1
 8003adc:	d9d7      	bls.n	8003a8e <OV5640_SetPixelFormat+0x1ca>
            }
          }
        }
        break;
 8003ade:	bf00      	nop

    }

    if (PixelFormat == OV5640_JPEG)
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	2b08      	cmp	r3, #8
 8003ae4:	d173      	bne.n	8003bce <OV5640_SetPixelFormat+0x30a>
    {
      if (OV5640_ReadReg(&OV5640->Context, OV5640_TIMING_TC_REG21, &tmp, 1) != OV5640_OK)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	f103 0018 	add.w	r0, r3, #24
 8003aec:	f107 020f 	add.w	r2, r7, #15
 8003af0:	2301      	movs	r3, #1
 8003af2:	f643 0121 	movw	r1, #14369	; 0x3821
 8003af6:	f7ff fd77 	bl	80035e8 <OV5640_ReadReg>
 8003afa:	4603      	mov	r3, r0
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d003      	beq.n	8003b08 <OV5640_SetPixelFormat+0x244>
      {
        ret = OV5640_ERROR;
 8003b00:	f04f 33ff 	mov.w	r3, #4294967295
 8003b04:	617b      	str	r3, [r7, #20]
 8003b06:	e062      	b.n	8003bce <OV5640_SetPixelFormat+0x30a>
      }
      else
      {
        tmp |= (1 << 5);
 8003b08:	7bfb      	ldrb	r3, [r7, #15]
 8003b0a:	f043 0320 	orr.w	r3, r3, #32
 8003b0e:	b2db      	uxtb	r3, r3
 8003b10:	73fb      	strb	r3, [r7, #15]
        if (OV5640_WriteReg(&OV5640->Context, OV5640_TIMING_TC_REG21, &tmp, 1) != OV5640_OK)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	f103 0018 	add.w	r0, r3, #24
 8003b18:	f107 020f 	add.w	r2, r7, #15
 8003b1c:	2301      	movs	r3, #1
 8003b1e:	f643 0121 	movw	r1, #14369	; 0x3821
 8003b22:	f7ff fd78 	bl	8003616 <OV5640_WriteReg>
 8003b26:	4603      	mov	r3, r0
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d003      	beq.n	8003b34 <OV5640_SetPixelFormat+0x270>
        {
          ret = OV5640_ERROR;
 8003b2c:	f04f 33ff 	mov.w	r3, #4294967295
 8003b30:	617b      	str	r3, [r7, #20]
 8003b32:	e04c      	b.n	8003bce <OV5640_SetPixelFormat+0x30a>
        }
        else
        {
          if (OV5640_ReadReg(&OV5640->Context, OV5640_SYSREM_RESET02, &tmp, 1) != OV5640_OK)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	f103 0018 	add.w	r0, r3, #24
 8003b3a:	f107 020f 	add.w	r2, r7, #15
 8003b3e:	2301      	movs	r3, #1
 8003b40:	f243 0102 	movw	r1, #12290	; 0x3002
 8003b44:	f7ff fd50 	bl	80035e8 <OV5640_ReadReg>
 8003b48:	4603      	mov	r3, r0
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d003      	beq.n	8003b56 <OV5640_SetPixelFormat+0x292>
          {
            ret = OV5640_ERROR;
 8003b4e:	f04f 33ff 	mov.w	r3, #4294967295
 8003b52:	617b      	str	r3, [r7, #20]
 8003b54:	e03b      	b.n	8003bce <OV5640_SetPixelFormat+0x30a>
          }
          else
          {
            tmp &= ~((1 << 4) | (1 << 3) | (1 << 2));
 8003b56:	7bfb      	ldrb	r3, [r7, #15]
 8003b58:	f023 031c 	bic.w	r3, r3, #28
 8003b5c:	b2db      	uxtb	r3, r3
 8003b5e:	73fb      	strb	r3, [r7, #15]
            if (OV5640_WriteReg(&OV5640->Context, OV5640_SYSREM_RESET02, &tmp, 1) != OV5640_OK)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	f103 0018 	add.w	r0, r3, #24
 8003b66:	f107 020f 	add.w	r2, r7, #15
 8003b6a:	2301      	movs	r3, #1
 8003b6c:	f243 0102 	movw	r1, #12290	; 0x3002
 8003b70:	f7ff fd51 	bl	8003616 <OV5640_WriteReg>
 8003b74:	4603      	mov	r3, r0
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d003      	beq.n	8003b82 <OV5640_SetPixelFormat+0x2be>
            {
              ret = OV5640_ERROR;
 8003b7a:	f04f 33ff 	mov.w	r3, #4294967295
 8003b7e:	617b      	str	r3, [r7, #20]
 8003b80:	e025      	b.n	8003bce <OV5640_SetPixelFormat+0x30a>
            }
            else
            {
              if (OV5640_ReadReg(&OV5640->Context, OV5640_CLOCK_ENABLE02, &tmp, 1) != OV5640_OK)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	f103 0018 	add.w	r0, r3, #24
 8003b88:	f107 020f 	add.w	r2, r7, #15
 8003b8c:	2301      	movs	r3, #1
 8003b8e:	f243 0106 	movw	r1, #12294	; 0x3006
 8003b92:	f7ff fd29 	bl	80035e8 <OV5640_ReadReg>
 8003b96:	4603      	mov	r3, r0
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d003      	beq.n	8003ba4 <OV5640_SetPixelFormat+0x2e0>
              {
                ret = OV5640_ERROR;
 8003b9c:	f04f 33ff 	mov.w	r3, #4294967295
 8003ba0:	617b      	str	r3, [r7, #20]
 8003ba2:	e014      	b.n	8003bce <OV5640_SetPixelFormat+0x30a>
              }
              else
              {
                tmp |= ((1 << 5) | (1 << 3));
 8003ba4:	7bfb      	ldrb	r3, [r7, #15]
 8003ba6:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 8003baa:	b2db      	uxtb	r3, r3
 8003bac:	73fb      	strb	r3, [r7, #15]
                if (OV5640_WriteReg(&OV5640->Context, OV5640_CLOCK_ENABLE02, &tmp, 1) != OV5640_OK)
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	f103 0018 	add.w	r0, r3, #24
 8003bb4:	f107 020f 	add.w	r2, r7, #15
 8003bb8:	2301      	movs	r3, #1
 8003bba:	f243 0106 	movw	r1, #12294	; 0x3006
 8003bbe:	f7ff fd2a 	bl	8003616 <OV5640_WriteReg>
 8003bc2:	4603      	mov	r3, r0
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d002      	beq.n	8003bce <OV5640_SetPixelFormat+0x30a>
                {
                  ret = OV5640_ERROR;
 8003bc8:	f04f 33ff 	mov.w	r3, #4294967295
 8003bcc:	617b      	str	r3, [r7, #20]
          }
        }
      }
    }
  }
  return ret;
 8003bce:	697b      	ldr	r3, [r7, #20]
}
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	3718      	adds	r7, #24
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	bd80      	pop	{r7, pc}
 8003bd8:	0800ecc0 	.word	0x0800ecc0
 8003bdc:	0800ecc8 	.word	0x0800ecc8
 8003be0:	0800ecd0 	.word	0x0800ecd0
 8003be4:	0800ecd8 	.word	0x0800ecd8
 8003be8:	0800ece0 	.word	0x0800ece0

08003bec <OV5640_SetPolarities>:

int32_t OV5640_SetPolarities(OV5640_Handle_t *OV5640, uint32_t PclkPolarity, uint32_t HrefPolarity,
                             uint32_t VsyncPolarity)
{
 8003bec:	b580      	push	{r7, lr}
 8003bee:	b086      	sub	sp, #24
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	60f8      	str	r0, [r7, #12]
 8003bf4:	60b9      	str	r1, [r7, #8]
 8003bf6:	607a      	str	r2, [r7, #4]
 8003bf8:	603b      	str	r3, [r7, #0]
  uint8_t tmp;
  int32_t ret = OV5640_OK;
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	617b      	str	r3, [r7, #20]

  if ((OV5640 == NULL) || ((PclkPolarity != OV5640_POLARITY_PCLK_LOW) && (PclkPolarity != OV5640_POLARITY_PCLK_HIGH)) ||
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d011      	beq.n	8003c28 <OV5640_SetPolarities+0x3c>
 8003c04:	68bb      	ldr	r3, [r7, #8]
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d002      	beq.n	8003c10 <OV5640_SetPolarities+0x24>
 8003c0a:	68bb      	ldr	r3, [r7, #8]
 8003c0c:	2b01      	cmp	r3, #1
 8003c0e:	d10b      	bne.n	8003c28 <OV5640_SetPolarities+0x3c>
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d002      	beq.n	8003c1c <OV5640_SetPolarities+0x30>
      ((HrefPolarity != OV5640_POLARITY_HREF_LOW) && (HrefPolarity != OV5640_POLARITY_HREF_HIGH)) ||
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	2b01      	cmp	r3, #1
 8003c1a:	d105      	bne.n	8003c28 <OV5640_SetPolarities+0x3c>
 8003c1c:	683b      	ldr	r3, [r7, #0]
 8003c1e:	2b01      	cmp	r3, #1
 8003c20:	d006      	beq.n	8003c30 <OV5640_SetPolarities+0x44>
      ((VsyncPolarity != OV5640_POLARITY_VSYNC_LOW) && (VsyncPolarity != OV5640_POLARITY_VSYNC_HIGH)))
 8003c22:	683b      	ldr	r3, [r7, #0]
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d003      	beq.n	8003c30 <OV5640_SetPolarities+0x44>
  {
    ret = OV5640_ERROR;
 8003c28:	f04f 33ff 	mov.w	r3, #4294967295
 8003c2c:	617b      	str	r3, [r7, #20]
 8003c2e:	e01e      	b.n	8003c6e <OV5640_SetPolarities+0x82>
  }
  else
  {
    tmp = (uint8_t)(PclkPolarity << 5U) | (HrefPolarity << 1U) | VsyncPolarity;
 8003c30:	68bb      	ldr	r3, [r7, #8]
 8003c32:	b2db      	uxtb	r3, r3
 8003c34:	015b      	lsls	r3, r3, #5
 8003c36:	b2da      	uxtb	r2, r3
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	b2db      	uxtb	r3, r3
 8003c3c:	005b      	lsls	r3, r3, #1
 8003c3e:	b2db      	uxtb	r3, r3
 8003c40:	4313      	orrs	r3, r2
 8003c42:	b2da      	uxtb	r2, r3
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	b2db      	uxtb	r3, r3
 8003c48:	4313      	orrs	r3, r2
 8003c4a:	b2db      	uxtb	r3, r3
 8003c4c:	74fb      	strb	r3, [r7, #19]

    if (OV5640_WriteReg(&OV5640->Context, OV5640_POLARITY_CTRL, &tmp, 1) != OV5640_OK)
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	f103 0018 	add.w	r0, r3, #24
 8003c54:	f107 0213 	add.w	r2, r7, #19
 8003c58:	2301      	movs	r3, #1
 8003c5a:	f244 7140 	movw	r1, #18240	; 0x4740
 8003c5e:	f7ff fcda 	bl	8003616 <OV5640_WriteReg>
 8003c62:	4603      	mov	r3, r0
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d002      	beq.n	8003c6e <OV5640_SetPolarities+0x82>
    {
      ret = OV5640_ERROR;
 8003c68:	f04f 33ff 	mov.w	r3, #4294967295
 8003c6c:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 8003c6e:	697b      	ldr	r3, [r7, #20]
}
 8003c70:	4618      	mov	r0, r3
 8003c72:	3718      	adds	r7, #24
 8003c74:	46bd      	mov	sp, r7
 8003c76:	bd80      	pop	{r7, pc}

08003c78 <OV5640_ReadID>:

int32_t OV5640_ReadID(OV5640_Handle_t *OV5640, uint32_t *Id)
{
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	b084      	sub	sp, #16
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
 8003c80:	6039      	str	r1, [r7, #0]

  /* Initialize I2C */
  //OV5640->IO.Init();

  /* Prepare the camera to be configured */
  tmp = 0x80;
 8003c82:	2380      	movs	r3, #128	; 0x80
 8003c84:	72fb      	strb	r3, [r7, #11]
  if (OV5640_WriteReg(&OV5640->Context, OV5640_SYSTEM_CTROL0, &tmp, 1) != OV5640_OK)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	f103 0018 	add.w	r0, r3, #24
 8003c8c:	f107 020b 	add.w	r2, r7, #11
 8003c90:	2301      	movs	r3, #1
 8003c92:	f243 0108 	movw	r1, #12296	; 0x3008
 8003c96:	f7ff fcbe 	bl	8003616 <OV5640_WriteReg>
 8003c9a:	4603      	mov	r3, r0
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d003      	beq.n	8003ca8 <OV5640_ReadID+0x30>
  {
    ret = OV5640_ERROR;
 8003ca0:	f04f 33ff 	mov.w	r3, #4294967295
 8003ca4:	60fb      	str	r3, [r7, #12]
 8003ca6:	e032      	b.n	8003d0e <OV5640_ReadID+0x96>
  }
  else
  {
    (void)OV5640_Delay(OV5640, 500);
 8003ca8:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8003cac:	6878      	ldr	r0, [r7, #4]
 8003cae:	f7ff fcfb 	bl	80036a8 <OV5640_Delay>

    if (OV5640_ReadReg(&OV5640->Context, OV5640_CHIP_ID_HIGH_BYTE, &tmp, 1) != OV5640_OK)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	f103 0018 	add.w	r0, r3, #24
 8003cb8:	f107 020b 	add.w	r2, r7, #11
 8003cbc:	2301      	movs	r3, #1
 8003cbe:	f243 010a 	movw	r1, #12298	; 0x300a
 8003cc2:	f7ff fc91 	bl	80035e8 <OV5640_ReadReg>
 8003cc6:	4603      	mov	r3, r0
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d003      	beq.n	8003cd4 <OV5640_ReadID+0x5c>
    {
      ret = OV5640_ERROR;
 8003ccc:	f04f 33ff 	mov.w	r3, #4294967295
 8003cd0:	60fb      	str	r3, [r7, #12]
 8003cd2:	e01c      	b.n	8003d0e <OV5640_ReadID+0x96>
    }
    else
    {
      *Id = (uint32_t)tmp << 8U;
 8003cd4:	7afb      	ldrb	r3, [r7, #11]
 8003cd6:	021a      	lsls	r2, r3, #8
 8003cd8:	683b      	ldr	r3, [r7, #0]
 8003cda:	601a      	str	r2, [r3, #0]
      if (OV5640_ReadReg(&OV5640->Context, OV5640_CHIP_ID_LOW_BYTE, &tmp, 1) != OV5640_OK)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	f103 0018 	add.w	r0, r3, #24
 8003ce2:	f107 020b 	add.w	r2, r7, #11
 8003ce6:	2301      	movs	r3, #1
 8003ce8:	f243 010b 	movw	r1, #12299	; 0x300b
 8003cec:	f7ff fc7c 	bl	80035e8 <OV5640_ReadReg>
 8003cf0:	4603      	mov	r3, r0
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d003      	beq.n	8003cfe <OV5640_ReadID+0x86>
      {
        ret = OV5640_ERROR;
 8003cf6:	f04f 33ff 	mov.w	r3, #4294967295
 8003cfa:	60fb      	str	r3, [r7, #12]
 8003cfc:	e007      	b.n	8003d0e <OV5640_ReadID+0x96>
      }
      else
      {
        *Id |= tmp;
 8003cfe:	683b      	ldr	r3, [r7, #0]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	7afa      	ldrb	r2, [r7, #11]
 8003d04:	431a      	orrs	r2, r3
 8003d06:	683b      	ldr	r3, [r7, #0]
 8003d08:	601a      	str	r2, [r3, #0]
        ret = OV5640_OK;
 8003d0a:	2300      	movs	r3, #0
 8003d0c:	60fb      	str	r3, [r7, #12]
      }
    }
  }

  /* Component status */
  return ret;
 8003d0e:	68fb      	ldr	r3, [r7, #12]
}
 8003d10:	4618      	mov	r0, r3
 8003d12:	3710      	adds	r7, #16
 8003d14:	46bd      	mov	sp, r7
 8003d16:	bd80      	pop	{r7, pc}

08003d18 <App_ThreadX_Init>:
  * @brief  Application ThreadX Initialization.
  * @param memory_ptr: memory pointer
  * @retval int
  */
UINT App_ThreadX_Init(VOID *memory_ptr)
{
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	b08c      	sub	sp, #48	; 0x30
 8003d1c:	af08      	add	r7, sp, #32
 8003d1e:	6078      	str	r0, [r7, #4]
  UINT ret = TX_SUCCESS;
 8003d20:	2300      	movs	r3, #0
 8003d22:	60fb      	str	r3, [r7, #12]
  TX_BYTE_POOL *byte_pool = (TX_BYTE_POOL*)memory_ptr;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	60bb      	str	r3, [r7, #8]
   /* USER CODE BEGIN App_ThreadX_MEM_POOL */
  (void)byte_pool;
  /* USER CODE END App_ThreadX_MEM_POOL */

  /* USER CODE BEGIN App_ThreadX_Init */
  tx_event_flags_create(&LED_Evt, "LED Event");
 8003d28:	2224      	movs	r2, #36	; 0x24
 8003d2a:	4925      	ldr	r1, [pc, #148]	; (8003dc0 <App_ThreadX_Init+0xa8>)
 8003d2c:	4825      	ldr	r0, [pc, #148]	; (8003dc4 <App_ThreadX_Init+0xac>)
 8003d2e:	f00a fb0b 	bl	800e348 <_txe_event_flags_create>
  tx_thread_create(&thread_ptr1,
 8003d32:	23b0      	movs	r3, #176	; 0xb0
 8003d34:	9306      	str	r3, [sp, #24]
 8003d36:	2301      	movs	r3, #1
 8003d38:	9305      	str	r3, [sp, #20]
 8003d3a:	2301      	movs	r3, #1
 8003d3c:	9304      	str	r3, [sp, #16]
 8003d3e:	230f      	movs	r3, #15
 8003d40:	9303      	str	r3, [sp, #12]
 8003d42:	230f      	movs	r3, #15
 8003d44:	9302      	str	r3, [sp, #8]
 8003d46:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003d4a:	9301      	str	r3, [sp, #4]
 8003d4c:	4b1e      	ldr	r3, [pc, #120]	; (8003dc8 <App_ThreadX_Init+0xb0>)
 8003d4e:	9300      	str	r3, [sp, #0]
 8003d50:	f64b 63ef 	movw	r3, #48879	; 0xbeef
 8003d54:	4a1d      	ldr	r2, [pc, #116]	; (8003dcc <App_ThreadX_Init+0xb4>)
 8003d56:	491e      	ldr	r1, [pc, #120]	; (8003dd0 <App_ThreadX_Init+0xb8>)
 8003d58:	481e      	ldr	r0, [pc, #120]	; (8003dd4 <App_ThreadX_Init+0xbc>)
 8003d5a:	f00a fbb5 	bl	800e4c8 <_txe_thread_create>
					15,
					15,
					1,
					TX_AUTO_START);

  tx_thread_create(&thread_ptr2,
 8003d5e:	23b0      	movs	r3, #176	; 0xb0
 8003d60:	9306      	str	r3, [sp, #24]
 8003d62:	2301      	movs	r3, #1
 8003d64:	9305      	str	r3, [sp, #20]
 8003d66:	2301      	movs	r3, #1
 8003d68:	9304      	str	r3, [sp, #16]
 8003d6a:	230f      	movs	r3, #15
 8003d6c:	9303      	str	r3, [sp, #12]
 8003d6e:	230f      	movs	r3, #15
 8003d70:	9302      	str	r3, [sp, #8]
 8003d72:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003d76:	9301      	str	r3, [sp, #4]
 8003d78:	4b17      	ldr	r3, [pc, #92]	; (8003dd8 <App_ThreadX_Init+0xc0>)
 8003d7a:	9300      	str	r3, [sp, #0]
 8003d7c:	f64b 63ef 	movw	r3, #48879	; 0xbeef
 8003d80:	4a16      	ldr	r2, [pc, #88]	; (8003ddc <App_ThreadX_Init+0xc4>)
 8003d82:	4917      	ldr	r1, [pc, #92]	; (8003de0 <App_ThreadX_Init+0xc8>)
 8003d84:	4817      	ldr	r0, [pc, #92]	; (8003de4 <App_ThreadX_Init+0xcc>)
 8003d86:	f00a fb9f 	bl	800e4c8 <_txe_thread_create>
					15,
					15,
					1,
					TX_AUTO_START);

  tx_thread_create(&thread_ptr3,
 8003d8a:	23b0      	movs	r3, #176	; 0xb0
 8003d8c:	9306      	str	r3, [sp, #24]
 8003d8e:	2301      	movs	r3, #1
 8003d90:	9305      	str	r3, [sp, #20]
 8003d92:	2301      	movs	r3, #1
 8003d94:	9304      	str	r3, [sp, #16]
 8003d96:	230f      	movs	r3, #15
 8003d98:	9303      	str	r3, [sp, #12]
 8003d9a:	230f      	movs	r3, #15
 8003d9c:	9302      	str	r3, [sp, #8]
 8003d9e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003da2:	9301      	str	r3, [sp, #4]
 8003da4:	4b10      	ldr	r3, [pc, #64]	; (8003de8 <App_ThreadX_Init+0xd0>)
 8003da6:	9300      	str	r3, [sp, #0]
 8003da8:	f64b 63ef 	movw	r3, #48879	; 0xbeef
 8003dac:	4a0f      	ldr	r2, [pc, #60]	; (8003dec <App_ThreadX_Init+0xd4>)
 8003dae:	4910      	ldr	r1, [pc, #64]	; (8003df0 <App_ThreadX_Init+0xd8>)
 8003db0:	4810      	ldr	r0, [pc, #64]	; (8003df4 <App_ThreadX_Init+0xdc>)
 8003db2:	f00a fb89 	bl	800e4c8 <_txe_thread_create>
					15,
					1,
					TX_AUTO_START);
  /* USER CODE END App_ThreadX_Init */

  return ret;
 8003db6:	68fb      	ldr	r3, [r7, #12]
}
 8003db8:	4618      	mov	r0, r3
 8003dba:	3710      	adds	r7, #16
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	bd80      	pop	{r7, pc}
 8003dc0:	0800e840 	.word	0x0800e840
 8003dc4:	20001340 	.word	0x20001340
 8003dc8:	20000530 	.word	0x20000530
 8003dcc:	08003e05 	.word	0x08003e05
 8003dd0:	0800e84c 	.word	0x0800e84c
 8003dd4:	20001130 	.word	0x20001130
 8003dd8:	20000930 	.word	0x20000930
 8003ddc:	08003e29 	.word	0x08003e29
 8003de0:	0800e854 	.word	0x0800e854
 8003de4:	200011e0 	.word	0x200011e0
 8003de8:	20000d30 	.word	0x20000d30
 8003dec:	08003e4d 	.word	0x08003e4d
 8003df0:	0800e85c 	.word	0x0800e85c
 8003df4:	20001290 	.word	0x20001290

08003df8 <MX_ThreadX_Init>:
  * @brief  MX_ThreadX_Init
  * @param  None
  * @retval None
  */
void MX_ThreadX_Init(void)
{
 8003df8:	b580      	push	{r7, lr}
 8003dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN  Before_Kernel_Start */

  /* USER CODE END  Before_Kernel_Start */

  tx_kernel_enter();
 8003dfc:	f009 f9f6 	bl	800d1ec <_tx_initialize_kernel_enter>

  /* USER CODE BEGIN  Kernel_Start_Error */

  /* USER CODE END  Kernel_Start_Error */
}
 8003e00:	bf00      	nop
 8003e02:	bd80      	pop	{r7, pc}

08003e04 <thread1_evt>:

/* USER CODE BEGIN 1 */
VOID thread1_evt(ULONG initial_input){
 8003e04:	b580      	push	{r7, lr}
 8003e06:	b082      	sub	sp, #8
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]
	while(1)
	{
		tx_event_flags_set(&LED_Evt,1,TX_OR);
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	2101      	movs	r1, #1
 8003e10:	4803      	ldr	r0, [pc, #12]	; (8003e20 <thread1_evt+0x1c>)
 8003e12:	f00a fb2b 	bl	800e46c <_txe_event_flags_set>
		tx_thread_suspend(&thread_ptr1);
 8003e16:	4803      	ldr	r0, [pc, #12]	; (8003e24 <thread1_evt+0x20>)
 8003e18:	f00a fc66 	bl	800e6e8 <_txe_thread_suspend>
		tx_event_flags_set(&LED_Evt,1,TX_OR);
 8003e1c:	e7f6      	b.n	8003e0c <thread1_evt+0x8>
 8003e1e:	bf00      	nop
 8003e20:	20001340 	.word	0x20001340
 8003e24:	20001130 	.word	0x20001130

08003e28 <thread2_evt>:
	}
}

VOID thread2_evt(ULONG initial_input){
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	b082      	sub	sp, #8
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]
	while(1)
	{
		tx_event_flags_set(&LED_Evt,2,TX_OR);
 8003e30:	2200      	movs	r2, #0
 8003e32:	2102      	movs	r1, #2
 8003e34:	4803      	ldr	r0, [pc, #12]	; (8003e44 <thread2_evt+0x1c>)
 8003e36:	f00a fb19 	bl	800e46c <_txe_event_flags_set>
		tx_thread_suspend(&thread_ptr2);
 8003e3a:	4803      	ldr	r0, [pc, #12]	; (8003e48 <thread2_evt+0x20>)
 8003e3c:	f00a fc54 	bl	800e6e8 <_txe_thread_suspend>
		tx_event_flags_set(&LED_Evt,2,TX_OR);
 8003e40:	e7f6      	b.n	8003e30 <thread2_evt+0x8>
 8003e42:	bf00      	nop
 8003e44:	20001340 	.word	0x20001340
 8003e48:	200011e0 	.word	0x200011e0

08003e4c <thread_LED>:
	}
}

VOID thread_LED(ULONG initial_input){
 8003e4c:	b580      	push	{r7, lr}
 8003e4e:	b084      	sub	sp, #16
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
	uint32_t FlagValue = 0;
 8003e54:	2300      	movs	r3, #0
 8003e56:	60fb      	str	r3, [r7, #12]
	while(1)
	{
		FlagValue = LED_Evt.tx_event_flags_group_current;
 8003e58:	4b0e      	ldr	r3, [pc, #56]	; (8003e94 <thread_LED+0x48>)
 8003e5a:	689b      	ldr	r3, [r3, #8]
 8003e5c:	60fb      	str	r3, [r7, #12]

	    if(FlagValue == 3){
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	2b03      	cmp	r3, #3
 8003e62:	d1f9      	bne.n	8003e58 <thread_LED+0xc>
	        HAL_GPIO_TogglePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin);
 8003e64:	2180      	movs	r1, #128	; 0x80
 8003e66:	480c      	ldr	r0, [pc, #48]	; (8003e98 <thread_LED+0x4c>)
 8003e68:	f003 feac 	bl	8007bc4 <HAL_GPIO_TogglePin>
	        HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
 8003e6c:	2140      	movs	r1, #64	; 0x40
 8003e6e:	480a      	ldr	r0, [pc, #40]	; (8003e98 <thread_LED+0x4c>)
 8003e70:	f003 fea8 	bl	8007bc4 <HAL_GPIO_TogglePin>
	        tx_event_flags_set(&LED_Evt, 0xFFFC, TX_AND);
 8003e74:	2202      	movs	r2, #2
 8003e76:	f64f 71fc 	movw	r1, #65532	; 0xfffc
 8003e7a:	4806      	ldr	r0, [pc, #24]	; (8003e94 <thread_LED+0x48>)
 8003e7c:	f00a faf6 	bl	800e46c <_txe_event_flags_set>
	        tx_thread_resume(&thread_ptr1);
 8003e80:	4806      	ldr	r0, [pc, #24]	; (8003e9c <thread_LED+0x50>)
 8003e82:	f00a fc13 	bl	800e6ac <_txe_thread_resume>
	        tx_thread_resume(&thread_ptr2);
 8003e86:	4806      	ldr	r0, [pc, #24]	; (8003ea0 <thread_LED+0x54>)
 8003e88:	f00a fc10 	bl	800e6ac <_txe_thread_resume>
	        tx_thread_sleep(100);
 8003e8c:	2064      	movs	r0, #100	; 0x64
 8003e8e:	f009 fbb5 	bl	800d5fc <_tx_thread_sleep>
		FlagValue = LED_Evt.tx_event_flags_group_current;
 8003e92:	e7e1      	b.n	8003e58 <thread_LED+0xc>
 8003e94:	20001340 	.word	0x20001340
 8003e98:	42021c00 	.word	0x42021c00
 8003e9c:	20001130 	.word	0x20001130
 8003ea0:	200011e0 	.word	0x200011e0

08003ea4 <MX_DCACHE1_Init>:

DCACHE_HandleTypeDef hdcache1;

/* DCACHE1 init function */
void MX_DCACHE1_Init(void)
{
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	af00      	add	r7, sp, #0
  /* USER CODE END DCACHE1_Init 0 */

  /* USER CODE BEGIN DCACHE1_Init 1 */

  /* USER CODE END DCACHE1_Init 1 */
  hdcache1.Instance = DCACHE1;
 8003ea8:	4b07      	ldr	r3, [pc, #28]	; (8003ec8 <MX_DCACHE1_Init+0x24>)
 8003eaa:	4a08      	ldr	r2, [pc, #32]	; (8003ecc <MX_DCACHE1_Init+0x28>)
 8003eac:	601a      	str	r2, [r3, #0]
  hdcache1.Init.ReadBurstType = DCACHE_READ_BURST_WRAP;
 8003eae:	4b06      	ldr	r3, [pc, #24]	; (8003ec8 <MX_DCACHE1_Init+0x24>)
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	605a      	str	r2, [r3, #4]
  if (HAL_DCACHE_Init(&hdcache1) != HAL_OK)
 8003eb4:	4804      	ldr	r0, [pc, #16]	; (8003ec8 <MX_DCACHE1_Init+0x24>)
 8003eb6:	f001 fda5 	bl	8005a04 <HAL_DCACHE_Init>
 8003eba:	4603      	mov	r3, r0
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d001      	beq.n	8003ec4 <MX_DCACHE1_Init+0x20>
  {
    Error_Handler();
 8003ec0:	f001 f8b8 	bl	8005034 <Error_Handler>
  }
  /* USER CODE BEGIN DCACHE1_Init 2 */

  /* USER CODE END DCACHE1_Init 2 */

}
 8003ec4:	bf00      	nop
 8003ec6:	bd80      	pop	{r7, pc}
 8003ec8:	20001364 	.word	0x20001364
 8003ecc:	40031400 	.word	0x40031400

08003ed0 <MX_DCMI_Init>:

DCMI_HandleTypeDef hdcmi;

/* DCMI init function */
void MX_DCMI_Init(void)
{
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */

  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 8003ed4:	4b16      	ldr	r3, [pc, #88]	; (8003f30 <MX_DCMI_Init+0x60>)
 8003ed6:	4a17      	ldr	r2, [pc, #92]	; (8003f34 <MX_DCMI_Init+0x64>)
 8003ed8:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 8003eda:	4b15      	ldr	r3, [pc, #84]	; (8003f30 <MX_DCMI_Init+0x60>)
 8003edc:	2200      	movs	r2, #0
 8003ede:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_RISING;
 8003ee0:	4b13      	ldr	r3, [pc, #76]	; (8003f30 <MX_DCMI_Init+0x60>)
 8003ee2:	2220      	movs	r2, #32
 8003ee4:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_HIGH;
 8003ee6:	4b12      	ldr	r3, [pc, #72]	; (8003f30 <MX_DCMI_Init+0x60>)
 8003ee8:	2280      	movs	r2, #128	; 0x80
 8003eea:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_HIGH;
 8003eec:	4b10      	ldr	r3, [pc, #64]	; (8003f30 <MX_DCMI_Init+0x60>)
 8003eee:	2240      	movs	r2, #64	; 0x40
 8003ef0:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 8003ef2:	4b0f      	ldr	r3, [pc, #60]	; (8003f30 <MX_DCMI_Init+0x60>)
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 8003ef8:	4b0d      	ldr	r3, [pc, #52]	; (8003f30 <MX_DCMI_Init+0x60>)
 8003efa:	2200      	movs	r2, #0
 8003efc:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 8003efe:	4b0c      	ldr	r3, [pc, #48]	; (8003f30 <MX_DCMI_Init+0x60>)
 8003f00:	2200      	movs	r2, #0
 8003f02:	621a      	str	r2, [r3, #32]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 8003f04:	4b0a      	ldr	r3, [pc, #40]	; (8003f30 <MX_DCMI_Init+0x60>)
 8003f06:	2200      	movs	r2, #0
 8003f08:	625a      	str	r2, [r3, #36]	; 0x24
  hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 8003f0a:	4b09      	ldr	r3, [pc, #36]	; (8003f30 <MX_DCMI_Init+0x60>)
 8003f0c:	2200      	movs	r2, #0
 8003f0e:	629a      	str	r2, [r3, #40]	; 0x28
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 8003f10:	4b07      	ldr	r3, [pc, #28]	; (8003f30 <MX_DCMI_Init+0x60>)
 8003f12:	2200      	movs	r2, #0
 8003f14:	62da      	str	r2, [r3, #44]	; 0x2c
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 8003f16:	4b06      	ldr	r3, [pc, #24]	; (8003f30 <MX_DCMI_Init+0x60>)
 8003f18:	2200      	movs	r2, #0
 8003f1a:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 8003f1c:	4804      	ldr	r0, [pc, #16]	; (8003f30 <MX_DCMI_Init+0x60>)
 8003f1e:	f001 fe27 	bl	8005b70 <HAL_DCMI_Init>
 8003f22:	4603      	mov	r3, r0
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d001      	beq.n	8003f2c <MX_DCMI_Init+0x5c>
  {
    Error_Handler();
 8003f28:	f001 f884 	bl	8005034 <Error_Handler>
  }
  /* USER CODE BEGIN DCMI_Init 2 */

  /* USER CODE END DCMI_Init 2 */

}
 8003f2c:	bf00      	nop
 8003f2e:	bd80      	pop	{r7, pc}
 8003f30:	20001390 	.word	0x20001390
 8003f34:	4202c000 	.word	0x4202c000

08003f38 <HAL_DCMI_MspInit>:

void HAL_DCMI_MspInit(DCMI_HandleTypeDef* dcmiHandle)
{
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	b08e      	sub	sp, #56	; 0x38
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f40:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003f44:	2200      	movs	r2, #0
 8003f46:	601a      	str	r2, [r3, #0]
 8003f48:	605a      	str	r2, [r3, #4]
 8003f4a:	609a      	str	r2, [r3, #8]
 8003f4c:	60da      	str	r2, [r3, #12]
 8003f4e:	611a      	str	r2, [r3, #16]
  if(dcmiHandle->Instance==DCMI)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	4a6d      	ldr	r2, [pc, #436]	; (800410c <HAL_DCMI_MspInit+0x1d4>)
 8003f56:	4293      	cmp	r3, r2
 8003f58:	f040 80d3 	bne.w	8004102 <HAL_DCMI_MspInit+0x1ca>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */

  /* USER CODE END DCMI_MspInit 0 */
    /* DCMI clock enable */
    __HAL_RCC_DCMI_PSSI_CLK_ENABLE();
 8003f5c:	4b6c      	ldr	r3, [pc, #432]	; (8004110 <HAL_DCMI_MspInit+0x1d8>)
 8003f5e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003f62:	4a6b      	ldr	r2, [pc, #428]	; (8004110 <HAL_DCMI_MspInit+0x1d8>)
 8003f64:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003f68:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003f6c:	4b68      	ldr	r3, [pc, #416]	; (8004110 <HAL_DCMI_MspInit+0x1d8>)
 8003f6e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003f72:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003f76:	623b      	str	r3, [r7, #32]
 8003f78:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOI_CLK_ENABLE();
 8003f7a:	4b65      	ldr	r3, [pc, #404]	; (8004110 <HAL_DCMI_MspInit+0x1d8>)
 8003f7c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003f80:	4a63      	ldr	r2, [pc, #396]	; (8004110 <HAL_DCMI_MspInit+0x1d8>)
 8003f82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f86:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003f8a:	4b61      	ldr	r3, [pc, #388]	; (8004110 <HAL_DCMI_MspInit+0x1d8>)
 8003f8c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003f90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f94:	61fb      	str	r3, [r7, #28]
 8003f96:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003f98:	4b5d      	ldr	r3, [pc, #372]	; (8004110 <HAL_DCMI_MspInit+0x1d8>)
 8003f9a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003f9e:	4a5c      	ldr	r2, [pc, #368]	; (8004110 <HAL_DCMI_MspInit+0x1d8>)
 8003fa0:	f043 0310 	orr.w	r3, r3, #16
 8003fa4:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003fa8:	4b59      	ldr	r3, [pc, #356]	; (8004110 <HAL_DCMI_MspInit+0x1d8>)
 8003faa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003fae:	f003 0310 	and.w	r3, r3, #16
 8003fb2:	61bb      	str	r3, [r7, #24]
 8003fb4:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8003fb6:	4b56      	ldr	r3, [pc, #344]	; (8004110 <HAL_DCMI_MspInit+0x1d8>)
 8003fb8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003fbc:	4a54      	ldr	r2, [pc, #336]	; (8004110 <HAL_DCMI_MspInit+0x1d8>)
 8003fbe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003fc2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003fc6:	4b52      	ldr	r3, [pc, #328]	; (8004110 <HAL_DCMI_MspInit+0x1d8>)
 8003fc8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003fcc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fd0:	617b      	str	r3, [r7, #20]
 8003fd2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003fd4:	4b4e      	ldr	r3, [pc, #312]	; (8004110 <HAL_DCMI_MspInit+0x1d8>)
 8003fd6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003fda:	4a4d      	ldr	r2, [pc, #308]	; (8004110 <HAL_DCMI_MspInit+0x1d8>)
 8003fdc:	f043 0302 	orr.w	r3, r3, #2
 8003fe0:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003fe4:	4b4a      	ldr	r3, [pc, #296]	; (8004110 <HAL_DCMI_MspInit+0x1d8>)
 8003fe6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003fea:	f003 0302 	and.w	r3, r3, #2
 8003fee:	613b      	str	r3, [r7, #16]
 8003ff0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003ff2:	4b47      	ldr	r3, [pc, #284]	; (8004110 <HAL_DCMI_MspInit+0x1d8>)
 8003ff4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003ff8:	4a45      	ldr	r2, [pc, #276]	; (8004110 <HAL_DCMI_MspInit+0x1d8>)
 8003ffa:	f043 0304 	orr.w	r3, r3, #4
 8003ffe:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004002:	4b43      	ldr	r3, [pc, #268]	; (8004110 <HAL_DCMI_MspInit+0x1d8>)
 8004004:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004008:	f003 0304 	and.w	r3, r3, #4
 800400c:	60fb      	str	r3, [r7, #12]
 800400e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004010:	4b3f      	ldr	r3, [pc, #252]	; (8004110 <HAL_DCMI_MspInit+0x1d8>)
 8004012:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004016:	4a3e      	ldr	r2, [pc, #248]	; (8004110 <HAL_DCMI_MspInit+0x1d8>)
 8004018:	f043 0301 	orr.w	r3, r3, #1
 800401c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004020:	4b3b      	ldr	r3, [pc, #236]	; (8004110 <HAL_DCMI_MspInit+0x1d8>)
 8004022:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004026:	f003 0301 	and.w	r3, r3, #1
 800402a:	60bb      	str	r3, [r7, #8]
 800402c:	68bb      	ldr	r3, [r7, #8]
    PC8     ------> DCMI_D2
    PC7     ------> DCMI_D1
    PC6     ------> DCMI_D0
    PA6     ------> DCMI_PIXCLK
    */
    GPIO_InitStruct.Pin = CAM_D6_Pin|CAM_D5_Pin|CAM_D7_Pin;
 800402e:	23d0      	movs	r3, #208	; 0xd0
 8004030:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004032:	2302      	movs	r3, #2
 8004034:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004036:	2300      	movs	r3, #0
 8004038:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800403a:	2303      	movs	r3, #3
 800403c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_DCMI;
 800403e:	230a      	movs	r3, #10
 8004040:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8004042:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004046:	4619      	mov	r1, r3
 8004048:	4832      	ldr	r0, [pc, #200]	; (8004114 <HAL_DCMI_MspInit+0x1dc>)
 800404a:	f003 fad5 	bl	80075f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CAM_D3_Pin;
 800404e:	2302      	movs	r3, #2
 8004050:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004052:	2302      	movs	r3, #2
 8004054:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004056:	2300      	movs	r3, #0
 8004058:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800405a:	2303      	movs	r3, #3
 800405c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_DCMI;
 800405e:	230a      	movs	r3, #10
 8004060:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(CAM_D3_GPIO_Port, &GPIO_InitStruct);
 8004062:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004066:	4619      	mov	r1, r3
 8004068:	482b      	ldr	r0, [pc, #172]	; (8004118 <HAL_DCMI_MspInit+0x1e0>)
 800406a:	f003 fac5 	bl	80075f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CAM_D4_Pin|CAM_HSYNC_Pin;
 800406e:	f44f 4382 	mov.w	r3, #16640	; 0x4100
 8004072:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004074:	2302      	movs	r3, #2
 8004076:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004078:	2300      	movs	r3, #0
 800407a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800407c:	2303      	movs	r3, #3
 800407e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_DCMI;
 8004080:	230a      	movs	r3, #10
 8004082:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8004084:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004088:	4619      	mov	r1, r3
 800408a:	4824      	ldr	r0, [pc, #144]	; (800411c <HAL_DCMI_MspInit+0x1e4>)
 800408c:	f003 fab4 	bl	80075f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CAM_VSYNC_Pin;
 8004090:	2380      	movs	r3, #128	; 0x80
 8004092:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004094:	2302      	movs	r3, #2
 8004096:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004098:	2300      	movs	r3, #0
 800409a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800409c:	2303      	movs	r3, #3
 800409e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_DCMI;
 80040a0:	230a      	movs	r3, #10
 80040a2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(CAM_VSYNC_GPIO_Port, &GPIO_InitStruct);
 80040a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80040a8:	4619      	mov	r1, r3
 80040aa:	481d      	ldr	r0, [pc, #116]	; (8004120 <HAL_DCMI_MspInit+0x1e8>)
 80040ac:	f003 faa4 	bl	80075f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CAM_D2_Pin|CAM_D1_Pin|CAM_D0_Pin;
 80040b0:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 80040b4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040b6:	2302      	movs	r3, #2
 80040b8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040ba:	2300      	movs	r3, #0
 80040bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80040be:	2303      	movs	r3, #3
 80040c0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_DCMI;
 80040c2:	230a      	movs	r3, #10
 80040c4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80040c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80040ca:	4619      	mov	r1, r3
 80040cc:	4815      	ldr	r0, [pc, #84]	; (8004124 <HAL_DCMI_MspInit+0x1ec>)
 80040ce:	f003 fa93 	bl	80075f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CAM_PIXCLK_Pin;
 80040d2:	2340      	movs	r3, #64	; 0x40
 80040d4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040d6:	2302      	movs	r3, #2
 80040d8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040da:	2300      	movs	r3, #0
 80040dc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80040de:	2303      	movs	r3, #3
 80040e0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_DCMI;
 80040e2:	2304      	movs	r3, #4
 80040e4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(CAM_PIXCLK_GPIO_Port, &GPIO_InitStruct);
 80040e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80040ea:	4619      	mov	r1, r3
 80040ec:	480e      	ldr	r0, [pc, #56]	; (8004128 <HAL_DCMI_MspInit+0x1f0>)
 80040ee:	f003 fa83 	bl	80075f8 <HAL_GPIO_Init>

    /* DCMI interrupt Init */
    HAL_NVIC_SetPriority(DCMI_PSSI_IRQn, 15, 0);
 80040f2:	2200      	movs	r2, #0
 80040f4:	210f      	movs	r1, #15
 80040f6:	2077      	movs	r0, #119	; 0x77
 80040f8:	f001 fc5c 	bl	80059b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DCMI_PSSI_IRQn);
 80040fc:	2077      	movs	r0, #119	; 0x77
 80040fe:	f001 fc73 	bl	80059e8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DCMI_MspInit 1 */

  /* USER CODE END DCMI_MspInit 1 */
  }
}
 8004102:	bf00      	nop
 8004104:	3738      	adds	r7, #56	; 0x38
 8004106:	46bd      	mov	sp, r7
 8004108:	bd80      	pop	{r7, pc}
 800410a:	bf00      	nop
 800410c:	4202c000 	.word	0x4202c000
 8004110:	46020c00 	.word	0x46020c00
 8004114:	42022000 	.word	0x42022000
 8004118:	42021000 	.word	0x42021000
 800411c:	42021c00 	.word	0x42021c00
 8004120:	42020400 	.word	0x42020400
 8004124:	42020800 	.word	0x42020800
 8004128:	42020000 	.word	0x42020000

0800412c <DCMI_DMA_Init>:
  /* USER CODE END GPDMA1_Init 2 */

}

/* USER CODE BEGIN 1 */
void DCMI_DMA_Init(void){
 800412c:	b580      	push	{r7, lr}
 800412e:	b09e      	sub	sp, #120	; 0x78
 8004130:	af00      	add	r7, sp, #0

	  __HAL_RCC_DCMI_PSSI_CLK_ENABLE();
 8004132:	4b4b      	ldr	r3, [pc, #300]	; (8004260 <DCMI_DMA_Init+0x134>)
 8004134:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004138:	4a49      	ldr	r2, [pc, #292]	; (8004260 <DCMI_DMA_Init+0x134>)
 800413a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800413e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004142:	4b47      	ldr	r3, [pc, #284]	; (8004260 <DCMI_DMA_Init+0x134>)
 8004144:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004148:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800414c:	60bb      	str	r3, [r7, #8]
 800414e:	68bb      	ldr	r3, [r7, #8]
	  __HAL_RCC_GPDMA1_CLK_ENABLE();
 8004150:	4b43      	ldr	r3, [pc, #268]	; (8004260 <DCMI_DMA_Init+0x134>)
 8004152:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004156:	4a42      	ldr	r2, [pc, #264]	; (8004260 <DCMI_DMA_Init+0x134>)
 8004158:	f043 0301 	orr.w	r3, r3, #1
 800415c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8004160:	4b3f      	ldr	r3, [pc, #252]	; (8004260 <DCMI_DMA_Init+0x134>)
 8004162:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004166:	f003 0301 	and.w	r3, r3, #1
 800416a:	607b      	str	r3, [r7, #4]
 800416c:	687b      	ldr	r3, [r7, #4]
	  static DMA_NodeTypeDef DCMINode1;
	  static DMA_NodeTypeDef DCMINode2;
	  DMA_NodeConfTypeDef node_config;
	  node_config.NodeType                            = DMA_GPDMA_2D_NODE;
 800416e:	2322      	movs	r3, #34	; 0x22
 8004170:	60fb      	str	r3, [r7, #12]
	  /* Set common node parameters */
	  node_config.Init.Request                        = GPDMA1_REQUEST_DCMI;
 8004172:	2356      	movs	r3, #86	; 0x56
 8004174:	613b      	str	r3, [r7, #16]
	  node_config.Init.BlkHWRequest                   = DMA_BREQ_SINGLE_BURST;
 8004176:	2300      	movs	r3, #0
 8004178:	617b      	str	r3, [r7, #20]
	  node_config.Init.Direction                      = DMA_PERIPH_TO_MEMORY;
 800417a:	2300      	movs	r3, #0
 800417c:	61bb      	str	r3, [r7, #24]
	  node_config.Init.SrcInc                         = DMA_SINC_FIXED;
 800417e:	2300      	movs	r3, #0
 8004180:	61fb      	str	r3, [r7, #28]
	  node_config.Init.DestInc                        = DMA_DINC_INCREMENTED;
 8004182:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8004186:	623b      	str	r3, [r7, #32]
	  node_config.Init.SrcDataWidth                   = DMA_SRC_DATAWIDTH_WORD;
 8004188:	2302      	movs	r3, #2
 800418a:	627b      	str	r3, [r7, #36]	; 0x24
	  node_config.Init.DestDataWidth                  = DMA_DEST_DATAWIDTH_WORD;
 800418c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004190:	62bb      	str	r3, [r7, #40]	; 0x28
	  node_config.Init.SrcBurstLength                 = 1;
 8004192:	2301      	movs	r3, #1
 8004194:	633b      	str	r3, [r7, #48]	; 0x30
	  node_config.Init.DestBurstLength                = 1;
 8004196:	2301      	movs	r3, #1
 8004198:	637b      	str	r3, [r7, #52]	; 0x34
	  node_config.Init.TransferAllocatedPort          = DMA_SRC_ALLOCATED_PORT0 | DMA_DEST_ALLOCATED_PORT1;
 800419a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800419e:	63bb      	str	r3, [r7, #56]	; 0x38
	  node_config.Init.TransferEventMode              = DMA_TCEM_EACH_LL_ITEM_TRANSFER;
 80041a0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80041a4:	63fb      	str	r3, [r7, #60]	; 0x3c
	  /* Set node data handling parameters */
	  node_config.DataHandlingConfig.DataExchange     = DMA_EXCHANGE_NONE;
 80041a6:	2300      	movs	r3, #0
 80041a8:	647b      	str	r3, [r7, #68]	; 0x44
	  node_config.DataHandlingConfig.DataAlignment    = DMA_DATA_RIGHTALIGN_ZEROPADDED;
 80041aa:	2300      	movs	r3, #0
 80041ac:	64bb      	str	r3, [r7, #72]	; 0x48
	  /* Set node trigger parameters */
	  node_config.TriggerConfig.TriggerPolarity       = DMA_TRIG_POLARITY_MASKED;
 80041ae:	2300      	movs	r3, #0
 80041b0:	653b      	str	r3, [r7, #80]	; 0x50
	  /* Set node repeated block parameters */
	  node_config.RepeatBlockConfig.RepeatCount       = 1U;
 80041b2:	2301      	movs	r3, #1
 80041b4:	65bb      	str	r3, [r7, #88]	; 0x58
	  node_config.RepeatBlockConfig.SrcAddrOffset     = 0;
 80041b6:	2300      	movs	r3, #0
 80041b8:	65fb      	str	r3, [r7, #92]	; 0x5c
	  node_config.RepeatBlockConfig.DestAddrOffset    = 0;
 80041ba:	2300      	movs	r3, #0
 80041bc:	663b      	str	r3, [r7, #96]	; 0x60
	  node_config.RepeatBlockConfig.BlkSrcAddrOffset  = 0;
 80041be:	2300      	movs	r3, #0
 80041c0:	667b      	str	r3, [r7, #100]	; 0x64
	  node_config.RepeatBlockConfig.BlkDestAddrOffset = 0;
 80041c2:	2300      	movs	r3, #0
 80041c4:	66bb      	str	r3, [r7, #104]	; 0x68

	  /* Build DCMINode1 */
	  HAL_DMAEx_List_BuildNode(&node_config, &DCMINode1);
 80041c6:	f107 030c 	add.w	r3, r7, #12
 80041ca:	4926      	ldr	r1, [pc, #152]	; (8004264 <DCMI_DMA_Init+0x138>)
 80041cc:	4618      	mov	r0, r3
 80041ce:	f002 fca9 	bl	8006b24 <HAL_DMAEx_List_BuildNode>

	  /* Insert DCMINode1 to DCMI queue */
	  HAL_DMAEx_List_InsertNode_Tail(&DCMIQueue, &DCMINode1);
 80041d2:	4924      	ldr	r1, [pc, #144]	; (8004264 <DCMI_DMA_Init+0x138>)
 80041d4:	4824      	ldr	r0, [pc, #144]	; (8004268 <DCMI_DMA_Init+0x13c>)
 80041d6:	f002 fcbb 	bl	8006b50 <HAL_DMAEx_List_InsertNode_Tail>

	  /* Build DCMINode2 */
	  HAL_DMAEx_List_BuildNode(&node_config, &DCMINode2);
 80041da:	f107 030c 	add.w	r3, r7, #12
 80041de:	4923      	ldr	r1, [pc, #140]	; (800426c <DCMI_DMA_Init+0x140>)
 80041e0:	4618      	mov	r0, r3
 80041e2:	f002 fc9f 	bl	8006b24 <HAL_DMAEx_List_BuildNode>

	  /* Insert DCMINode2 to DCMI queue */
	  HAL_DMAEx_List_InsertNode_Tail(&DCMIQueue, &DCMINode2);
 80041e6:	4921      	ldr	r1, [pc, #132]	; (800426c <DCMI_DMA_Init+0x140>)
 80041e8:	481f      	ldr	r0, [pc, #124]	; (8004268 <DCMI_DMA_Init+0x13c>)
 80041ea:	f002 fcb1 	bl	8006b50 <HAL_DMAEx_List_InsertNode_Tail>

	  /* Set queue circular mode for DCMI queue */
	  HAL_DMAEx_List_SetCircularMode(&DCMIQueue);
 80041ee:	481e      	ldr	r0, [pc, #120]	; (8004268 <DCMI_DMA_Init+0x13c>)
 80041f0:	f002 fd26 	bl	8006c40 <HAL_DMAEx_List_SetCircularMode>

	  /*** Configure the DMA channel ***/
	  handle_GPDMA1_Channel12.Instance                         = GPDMA1_Channel12;
 80041f4:	4b1e      	ldr	r3, [pc, #120]	; (8004270 <DCMI_DMA_Init+0x144>)
 80041f6:	4a1f      	ldr	r2, [pc, #124]	; (8004274 <DCMI_DMA_Init+0x148>)
 80041f8:	601a      	str	r2, [r3, #0]
	  handle_GPDMA1_Channel12.InitLinkedList.Priority          = DMA_LOW_PRIORITY_LOW_WEIGHT;
 80041fa:	4b1d      	ldr	r3, [pc, #116]	; (8004270 <DCMI_DMA_Init+0x144>)
 80041fc:	2200      	movs	r2, #0
 80041fe:	639a      	str	r2, [r3, #56]	; 0x38
	  handle_GPDMA1_Channel12.InitLinkedList.LinkStepMode      = DMA_LSM_FULL_EXECUTION;
 8004200:	4b1b      	ldr	r3, [pc, #108]	; (8004270 <DCMI_DMA_Init+0x144>)
 8004202:	2200      	movs	r2, #0
 8004204:	63da      	str	r2, [r3, #60]	; 0x3c
	  handle_GPDMA1_Channel12.InitLinkedList.LinkAllocatedPort = DMA_LINK_ALLOCATED_PORT1;
 8004206:	4b1a      	ldr	r3, [pc, #104]	; (8004270 <DCMI_DMA_Init+0x144>)
 8004208:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800420c:	641a      	str	r2, [r3, #64]	; 0x40
	  handle_GPDMA1_Channel12.InitLinkedList.LinkedListMode    = DMA_LINKEDLIST_CIRCULAR;
 800420e:	4b18      	ldr	r3, [pc, #96]	; (8004270 <DCMI_DMA_Init+0x144>)
 8004210:	2281      	movs	r2, #129	; 0x81
 8004212:	649a      	str	r2, [r3, #72]	; 0x48
	  handle_GPDMA1_Channel12.InitLinkedList.TransferEventMode = DMA_TCEM_LAST_LL_ITEM_TRANSFER;
 8004214:	4b16      	ldr	r3, [pc, #88]	; (8004270 <DCMI_DMA_Init+0x144>)
 8004216:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
 800421a:	645a      	str	r2, [r3, #68]	; 0x44

	  /* DMA linked list init */
	  HAL_DMAEx_List_Init(&handle_GPDMA1_Channel12);
 800421c:	4814      	ldr	r0, [pc, #80]	; (8004270 <DCMI_DMA_Init+0x144>)
 800421e:	f002 fabf 	bl	80067a0 <HAL_DMAEx_List_Init>

	  /* Link DCMI queue to DMA channel */
	  HAL_DMAEx_List_LinkQ(&handle_GPDMA1_Channel12, &DCMIQueue);
 8004222:	4911      	ldr	r1, [pc, #68]	; (8004268 <DCMI_DMA_Init+0x13c>)
 8004224:	4812      	ldr	r0, [pc, #72]	; (8004270 <DCMI_DMA_Init+0x144>)
 8004226:	f002 fd6b 	bl	8006d00 <HAL_DMAEx_List_LinkQ>

	  /* Associate the initialized DMA handle to the DCMI handle */
	  __HAL_LINKDMA(&hdcmi, DMA_Handle, handle_GPDMA1_Channel12);
 800422a:	4b13      	ldr	r3, [pc, #76]	; (8004278 <DCMI_DMA_Init+0x14c>)
 800422c:	4a10      	ldr	r2, [pc, #64]	; (8004270 <DCMI_DMA_Init+0x144>)
 800422e:	649a      	str	r2, [r3, #72]	; 0x48
 8004230:	4b0f      	ldr	r3, [pc, #60]	; (8004270 <DCMI_DMA_Init+0x144>)
 8004232:	4a11      	ldr	r2, [pc, #68]	; (8004278 <DCMI_DMA_Init+0x14c>)
 8004234:	65da      	str	r2, [r3, #92]	; 0x5c

	  /*** Configure the NVIC for DCMI and DMA ***/
	  /* NVIC configuration for DCMI transfer complete interrupt */
	  HAL_NVIC_SetPriority(DCMI_PSSI_IRQn, 10, 0);
 8004236:	2200      	movs	r2, #0
 8004238:	210a      	movs	r1, #10
 800423a:	2077      	movs	r0, #119	; 0x77
 800423c:	f001 fbba 	bl	80059b4 <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(DCMI_PSSI_IRQn);
 8004240:	2077      	movs	r0, #119	; 0x77
 8004242:	f001 fbd1 	bl	80059e8 <HAL_NVIC_EnableIRQ>

	  /* NVIC configuration for GPDMA1 transfer complete interrupt */
	  HAL_NVIC_SetPriority(GPDMA1_Channel12_IRQn, 10, 0);
 8004246:	2200      	movs	r2, #0
 8004248:	210a      	movs	r1, #10
 800424a:	2054      	movs	r0, #84	; 0x54
 800424c:	f001 fbb2 	bl	80059b4 <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(GPDMA1_Channel12_IRQn);
 8004250:	2054      	movs	r0, #84	; 0x54
 8004252:	f001 fbc9 	bl	80059e8 <HAL_NVIC_EnableIRQ>
}
 8004256:	bf00      	nop
 8004258:	3778      	adds	r7, #120	; 0x78
 800425a:	46bd      	mov	sp, r7
 800425c:	bd80      	pop	{r7, pc}
 800425e:	bf00      	nop
 8004260:	46020c00 	.word	0x46020c00
 8004264:	20001470 	.word	0x20001470
 8004268:	200013e0 	.word	0x200013e0
 800426c:	20001494 	.word	0x20001494
 8004270:	200013f8 	.word	0x200013f8
 8004274:	40020650 	.word	0x40020650
 8004278:	20001390 	.word	0x20001390

0800427c <MX_GPIO_Init>:
     PB12   ------> SPI2_NSS
     PB15   ------> UCPD1_CC2
     PB1   ------> MDF1_SDI0
*/
void MX_GPIO_Init(void)
{
 800427c:	b580      	push	{r7, lr}
 800427e:	b08e      	sub	sp, #56	; 0x38
 8004280:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004282:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004286:	2200      	movs	r2, #0
 8004288:	601a      	str	r2, [r3, #0]
 800428a:	605a      	str	r2, [r3, #4]
 800428c:	609a      	str	r2, [r3, #8]
 800428e:	60da      	str	r2, [r3, #12]
 8004290:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8004292:	4bbf      	ldr	r3, [pc, #764]	; (8004590 <MX_GPIO_Init+0x314>)
 8004294:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004298:	4abd      	ldr	r2, [pc, #756]	; (8004590 <MX_GPIO_Init+0x314>)
 800429a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800429e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80042a2:	4bbb      	ldr	r3, [pc, #748]	; (8004590 <MX_GPIO_Init+0x314>)
 80042a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80042a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042ac:	623b      	str	r3, [r7, #32]
 80042ae:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80042b0:	4bb7      	ldr	r3, [pc, #732]	; (8004590 <MX_GPIO_Init+0x314>)
 80042b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80042b6:	4ab6      	ldr	r2, [pc, #728]	; (8004590 <MX_GPIO_Init+0x314>)
 80042b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80042bc:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80042c0:	4bb3      	ldr	r3, [pc, #716]	; (8004590 <MX_GPIO_Init+0x314>)
 80042c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80042c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042ca:	61fb      	str	r3, [r7, #28]
 80042cc:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80042ce:	4bb0      	ldr	r3, [pc, #704]	; (8004590 <MX_GPIO_Init+0x314>)
 80042d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80042d4:	4aae      	ldr	r2, [pc, #696]	; (8004590 <MX_GPIO_Init+0x314>)
 80042d6:	f043 0304 	orr.w	r3, r3, #4
 80042da:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80042de:	4bac      	ldr	r3, [pc, #688]	; (8004590 <MX_GPIO_Init+0x314>)
 80042e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80042e4:	f003 0304 	and.w	r3, r3, #4
 80042e8:	61bb      	str	r3, [r7, #24]
 80042ea:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80042ec:	4ba8      	ldr	r3, [pc, #672]	; (8004590 <MX_GPIO_Init+0x314>)
 80042ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80042f2:	4aa7      	ldr	r2, [pc, #668]	; (8004590 <MX_GPIO_Init+0x314>)
 80042f4:	f043 0301 	orr.w	r3, r3, #1
 80042f8:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80042fc:	4ba4      	ldr	r3, [pc, #656]	; (8004590 <MX_GPIO_Init+0x314>)
 80042fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004302:	f003 0301 	and.w	r3, r3, #1
 8004306:	617b      	str	r3, [r7, #20]
 8004308:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800430a:	4ba1      	ldr	r3, [pc, #644]	; (8004590 <MX_GPIO_Init+0x314>)
 800430c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004310:	4a9f      	ldr	r2, [pc, #636]	; (8004590 <MX_GPIO_Init+0x314>)
 8004312:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004316:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800431a:	4b9d      	ldr	r3, [pc, #628]	; (8004590 <MX_GPIO_Init+0x314>)
 800431c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004320:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004324:	613b      	str	r3, [r7, #16]
 8004326:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8004328:	4b99      	ldr	r3, [pc, #612]	; (8004590 <MX_GPIO_Init+0x314>)
 800432a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800432e:	4a98      	ldr	r2, [pc, #608]	; (8004590 <MX_GPIO_Init+0x314>)
 8004330:	f043 0310 	orr.w	r3, r3, #16
 8004334:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004338:	4b95      	ldr	r3, [pc, #596]	; (8004590 <MX_GPIO_Init+0x314>)
 800433a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800433e:	f003 0310 	and.w	r3, r3, #16
 8004342:	60fb      	str	r3, [r7, #12]
 8004344:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004346:	4b92      	ldr	r3, [pc, #584]	; (8004590 <MX_GPIO_Init+0x314>)
 8004348:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800434c:	4a90      	ldr	r2, [pc, #576]	; (8004590 <MX_GPIO_Init+0x314>)
 800434e:	f043 0302 	orr.w	r3, r3, #2
 8004352:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004356:	4b8e      	ldr	r3, [pc, #568]	; (8004590 <MX_GPIO_Init+0x314>)
 8004358:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800435c:	f003 0302 	and.w	r3, r3, #2
 8004360:	60bb      	str	r3, [r7, #8]
 8004362:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004364:	4b8a      	ldr	r3, [pc, #552]	; (8004590 <MX_GPIO_Init+0x314>)
 8004366:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800436a:	4a89      	ldr	r2, [pc, #548]	; (8004590 <MX_GPIO_Init+0x314>)
 800436c:	f043 0308 	orr.w	r3, r3, #8
 8004370:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004374:	4b86      	ldr	r3, [pc, #536]	; (8004590 <MX_GPIO_Init+0x314>)
 8004376:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800437a:	f003 0308 	and.w	r3, r3, #8
 800437e:	607b      	str	r3, [r7, #4]
 8004380:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8004382:	4b83      	ldr	r3, [pc, #524]	; (8004590 <MX_GPIO_Init+0x314>)
 8004384:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004388:	4a81      	ldr	r2, [pc, #516]	; (8004590 <MX_GPIO_Init+0x314>)
 800438a:	f043 0320 	orr.w	r3, r3, #32
 800438e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004392:	4b7f      	ldr	r3, [pc, #508]	; (8004590 <MX_GPIO_Init+0x314>)
 8004394:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004398:	f003 0320 	and.w	r3, r3, #32
 800439c:	603b      	str	r3, [r7, #0]
 800439e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(UCPD_PWR_GPIO_Port, UCPD_PWR_Pin, GPIO_PIN_RESET);
 80043a0:	2200      	movs	r2, #0
 80043a2:	2120      	movs	r1, #32
 80043a4:	487b      	ldr	r0, [pc, #492]	; (8004594 <MX_GPIO_Init+0x318>)
 80043a6:	f003 fbf5 	bl	8007b94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CAM_XSDN_GPIO_Port, CAM_XSDN_Pin, GPIO_PIN_RESET);
 80043aa:	2200      	movs	r2, #0
 80043ac:	2108      	movs	r1, #8
 80043ae:	487a      	ldr	r0, [pc, #488]	; (8004598 <MX_GPIO_Init+0x31c>)
 80043b0:	f003 fbf0 	bl	8007b94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CAM_RSTI_GPIO_Port, CAM_RSTI_Pin, GPIO_PIN_SET);
 80043b4:	2201      	movs	r2, #1
 80043b6:	2104      	movs	r1, #4
 80043b8:	4877      	ldr	r0, [pc, #476]	; (8004598 <MX_GPIO_Init+0x31c>)
 80043ba:	f003 fbeb 	bl	8007b94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, LED_RED_Pin|LED_GREEN_Pin|Mems_VL53_xshut_Pin, GPIO_PIN_RESET);
 80043be:	2200      	movs	r2, #0
 80043c0:	21c2      	movs	r1, #194	; 0xc2
 80043c2:	4876      	ldr	r0, [pc, #472]	; (800459c <MX_GPIO_Init+0x320>)
 80043c4:	f003 fbe6 	bl	8007b94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(WRLS_WKUP_B_GPIO_Port, WRLS_WKUP_B_Pin, GPIO_PIN_RESET);
 80043c8:	2200      	movs	r2, #0
 80043ca:	2140      	movs	r1, #64	; 0x40
 80043cc:	4874      	ldr	r0, [pc, #464]	; (80045a0 <MX_GPIO_Init+0x324>)
 80043ce:	f003 fbe1 	bl	8007b94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, Mems_STSAFE_RESET_Pin|WRLS_WKUP_W_Pin, GPIO_PIN_RESET);
 80043d2:	2200      	movs	r2, #0
 80043d4:	f44f 4108 	mov.w	r1, #34816	; 0x8800
 80043d8:	4872      	ldr	r0, [pc, #456]	; (80045a4 <MX_GPIO_Init+0x328>)
 80043da:	f003 fbdb 	bl	8007b94 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = WRLS_FLOW_Pin|Mems_VLX_GPIO_Pin|Mems_INT_LPS22HH_Pin;
 80043de:	f248 0324 	movw	r3, #32804	; 0x8024
 80043e2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80043e4:	2300      	movs	r3, #0
 80043e6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043e8:	2300      	movs	r3, #0
 80043ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80043ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80043f0:	4619      	mov	r1, r3
 80043f2:	486b      	ldr	r0, [pc, #428]	; (80045a0 <MX_GPIO_Init+0x324>)
 80043f4:	f003 f900 	bl	80075f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = WRLS_UART4_RX_Pin|WRLS_UART4_TX_Pin;
 80043f8:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80043fc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80043fe:	2302      	movs	r3, #2
 8004400:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004402:	2300      	movs	r3, #0
 8004404:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004406:	2300      	movs	r3, #0
 8004408:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800440a:	2308      	movs	r3, #8
 800440c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800440e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004412:	4619      	mov	r1, r3
 8004414:	4864      	ldr	r0, [pc, #400]	; (80045a8 <MX_GPIO_Init+0x32c>)
 8004416:	f003 f8ef 	bl	80075f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_UCPD_CC1_Pin;
 800441a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800441e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004420:	2303      	movs	r3, #3
 8004422:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004424:	2300      	movs	r3, #0
 8004426:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_UCPD_CC1_GPIO_Port, &GPIO_InitStruct);
 8004428:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800442c:	4619      	mov	r1, r3
 800442e:	485f      	ldr	r0, [pc, #380]	; (80045ac <MX_GPIO_Init+0x330>)
 8004430:	f003 f8e2 	bl	80075f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CAM_PLUG_Pin;
 8004434:	2302      	movs	r3, #2
 8004436:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004438:	2300      	movs	r3, #0
 800443a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800443c:	2301      	movs	r3, #1
 800443e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CAM_PLUG_GPIO_Port, &GPIO_InitStruct);
 8004440:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004444:	4619      	mov	r1, r3
 8004446:	4854      	ldr	r0, [pc, #336]	; (8004598 <MX_GPIO_Init+0x31c>)
 8004448:	f003 f8d6 	bl	80075f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OCTOSPI_F_NCS_Pin;
 800444c:	2320      	movs	r3, #32
 800444e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004450:	2302      	movs	r3, #2
 8004452:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004454:	2300      	movs	r3, #0
 8004456:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004458:	2303      	movs	r3, #3
 800445a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_OCTOSPI2;
 800445c:	2305      	movs	r3, #5
 800445e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OCTOSPI_F_NCS_GPIO_Port, &GPIO_InitStruct);
 8004460:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004464:	4619      	mov	r1, r3
 8004466:	484c      	ldr	r0, [pc, #304]	; (8004598 <MX_GPIO_Init+0x31c>)
 8004468:	f003 f8c6 	bl	80075f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin PHPin PHPin */
  GPIO_InitStruct.Pin = OCTOSPI_F_IO7_Pin|OCTOSPI_F_IO5_Pin|OCTOSPI_F_IO6_Pin|OCTOSPI_F_IO4_Pin;
 800446c:	f44f 53f0 	mov.w	r3, #7680	; 0x1e00
 8004470:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004472:	2302      	movs	r3, #2
 8004474:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004476:	2300      	movs	r3, #0
 8004478:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800447a:	2303      	movs	r3, #3
 800447c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_OCTOSPI2;
 800447e:	2305      	movs	r3, #5
 8004480:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8004482:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004486:	4619      	mov	r1, r3
 8004488:	4844      	ldr	r0, [pc, #272]	; (800459c <MX_GPIO_Init+0x320>)
 800448a:	f003 f8b5 	bl	80075f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PH3_BOOT0_Pin;
 800448e:	2308      	movs	r3, #8
 8004490:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004492:	2300      	movs	r3, #0
 8004494:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004496:	2300      	movs	r3, #0
 8004498:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PH3_BOOT0_GPIO_Port, &GPIO_InitStruct);
 800449a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800449e:	4619      	mov	r1, r3
 80044a0:	483e      	ldr	r0, [pc, #248]	; (800459c <MX_GPIO_Init+0x320>)
 80044a2:	f003 f8a9 	bl	80075f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = UCPD_PWR_Pin;
 80044a6:	2320      	movs	r3, #32
 80044a8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80044aa:	2301      	movs	r3, #1
 80044ac:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044ae:	2300      	movs	r3, #0
 80044b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80044b2:	2300      	movs	r3, #0
 80044b4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(UCPD_PWR_GPIO_Port, &GPIO_InitStruct);
 80044b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80044ba:	4619      	mov	r1, r3
 80044bc:	4835      	ldr	r0, [pc, #212]	; (8004594 <MX_GPIO_Init+0x318>)
 80044be:	f003 f89b 	bl	80075f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = WRLS_SPI2_MOSI_Pin|WRLS_SPI2_MISO_Pin|WRLS_SPI2_SCK_Pin;
 80044c2:	231a      	movs	r3, #26
 80044c4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044c6:	2302      	movs	r3, #2
 80044c8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044ca:	2300      	movs	r3, #0
 80044cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80044ce:	2300      	movs	r3, #0
 80044d0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80044d2:	2305      	movs	r3, #5
 80044d4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80044d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80044da:	4619      	mov	r1, r3
 80044dc:	4834      	ldr	r0, [pc, #208]	; (80045b0 <MX_GPIO_Init+0x334>)
 80044de:	f003 f88b 	bl	80075f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CAM_XSDN_Pin;
 80044e2:	2308      	movs	r3, #8
 80044e4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80044e6:	2301      	movs	r3, #1
 80044e8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80044ea:	2302      	movs	r3, #2
 80044ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80044ee:	2300      	movs	r3, #0
 80044f0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(CAM_XSDN_GPIO_Port, &GPIO_InitStruct);
 80044f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80044f6:	4619      	mov	r1, r3
 80044f8:	4827      	ldr	r0, [pc, #156]	; (8004598 <MX_GPIO_Init+0x31c>)
 80044fa:	f003 f87d 	bl	80075f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CAM_RSTI_Pin;
 80044fe:	2304      	movs	r3, #4
 8004500:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004502:	2301      	movs	r3, #1
 8004504:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004506:	2301      	movs	r3, #1
 8004508:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800450a:	2300      	movs	r3, #0
 800450c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(CAM_RSTI_GPIO_Port, &GPIO_InitStruct);
 800450e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004512:	4619      	mov	r1, r3
 8004514:	4820      	ldr	r0, [pc, #128]	; (8004598 <MX_GPIO_Init+0x31c>)
 8004516:	f003 f86f 	bl	80075f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin PFPin PFPin
                           PFPin PFPin */
  GPIO_InitStruct.Pin = OCTOSPI_F_IO0_Pin|OCTOSPI_F_IO1_Pin|OCTOSPI_F_IO2_Pin|OCTOSPI_F_IO3_Pin
 800451a:	f241 031f 	movw	r3, #4127	; 0x101f
 800451e:	627b      	str	r3, [r7, #36]	; 0x24
                          |OCTOSPI_F_CLK_P_Pin|OCTOSPI_F_DQS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004520:	2302      	movs	r3, #2
 8004522:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004524:	2300      	movs	r3, #0
 8004526:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004528:	2303      	movs	r3, #3
 800452a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_OCTOSPI2;
 800452c:	2305      	movs	r3, #5
 800452e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8004530:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004534:	4619      	mov	r1, r3
 8004536:	481b      	ldr	r0, [pc, #108]	; (80045a4 <MX_GPIO_Init+0x328>)
 8004538:	f003 f85e 	bl	80075f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Button_Pin;
 800453c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004540:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004542:	2300      	movs	r3, #0
 8004544:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004546:	2300      	movs	r3, #0
 8004548:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USER_Button_GPIO_Port, &GPIO_InitStruct);
 800454a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800454e:	4619      	mov	r1, r3
 8004550:	4815      	ldr	r0, [pc, #84]	; (80045a8 <MX_GPIO_Init+0x32c>)
 8004552:	f003 f851 	bl	80075f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin PHPin */
  GPIO_InitStruct.Pin = LED_RED_Pin|LED_GREEN_Pin|Mems_VL53_xshut_Pin;
 8004556:	23c2      	movs	r3, #194	; 0xc2
 8004558:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800455a:	2301      	movs	r3, #1
 800455c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800455e:	2300      	movs	r3, #0
 8004560:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004562:	2300      	movs	r3, #0
 8004564:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8004566:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800456a:	4619      	mov	r1, r3
 800456c:	480b      	ldr	r0, [pc, #44]	; (800459c <MX_GPIO_Init+0x320>)
 800456e:	f003 f843 	bl	80075f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = T_VCP_RX_Pin|T_VCP_TX_Pin;
 8004572:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8004576:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004578:	2302      	movs	r3, #2
 800457a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800457c:	2300      	movs	r3, #0
 800457e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004580:	2300      	movs	r3, #0
 8004582:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004584:	2307      	movs	r3, #7
 8004586:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004588:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800458c:	4619      	mov	r1, r3
 800458e:	e011      	b.n	80045b4 <MX_GPIO_Init+0x338>
 8004590:	46020c00 	.word	0x46020c00
 8004594:	42020400 	.word	0x42020400
 8004598:	42022000 	.word	0x42022000
 800459c:	42021c00 	.word	0x42021c00
 80045a0:	42021800 	.word	0x42021800
 80045a4:	42021400 	.word	0x42021400
 80045a8:	42020800 	.word	0x42020800
 80045ac:	42020000 	.word	0x42020000
 80045b0:	42020c00 	.word	0x42020c00
 80045b4:	4855      	ldr	r0, [pc, #340]	; (800470c <MX_GPIO_Init+0x490>)
 80045b6:	f003 f81f 	bl	80075f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = USB_C_P_Pin|USB_C_PA11_Pin;
 80045ba:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80045be:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80045c0:	2302      	movs	r3, #2
 80045c2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045c4:	2300      	movs	r3, #0
 80045c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80045c8:	2300      	movs	r3, #0
 80045ca:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 80045cc:	230a      	movs	r3, #10
 80045ce:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80045d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80045d4:	4619      	mov	r1, r3
 80045d6:	484d      	ldr	r0, [pc, #308]	; (800470c <MX_GPIO_Init+0x490>)
 80045d8:	f003 f80e 	bl	80075f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MIC_CCK1_Pin;
 80045dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80045e0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80045e2:	2302      	movs	r3, #2
 80045e4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045e6:	2300      	movs	r3, #0
 80045e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80045ea:	2300      	movs	r3, #0
 80045ec:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_MDF1;
 80045ee:	2306      	movs	r3, #6
 80045f0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(MIC_CCK1_GPIO_Port, &GPIO_InitStruct);
 80045f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80045f6:	4619      	mov	r1, r3
 80045f8:	4845      	ldr	r0, [pc, #276]	; (8004710 <MX_GPIO_Init+0x494>)
 80045fa:	f002 fffd 	bl	80075f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = MIC_SDINx_Pin|MIC_CCK0_Pin;
 80045fe:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8004602:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004604:	2302      	movs	r3, #2
 8004606:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004608:	2300      	movs	r3, #0
 800460a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800460c:	2300      	movs	r3, #0
 800460e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF3_ADF1;
 8004610:	2303      	movs	r3, #3
 8004612:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004614:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004618:	4619      	mov	r1, r3
 800461a:	483e      	ldr	r0, [pc, #248]	; (8004714 <MX_GPIO_Init+0x498>)
 800461c:	f002 ffec 	bl	80075f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = WRLS_WKUP_B_Pin;
 8004620:	2340      	movs	r3, #64	; 0x40
 8004622:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004624:	2301      	movs	r3, #1
 8004626:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004628:	2300      	movs	r3, #0
 800462a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800462c:	2300      	movs	r3, #0
 800462e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(WRLS_WKUP_B_GPIO_Port, &GPIO_InitStruct);
 8004630:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004634:	4619      	mov	r1, r3
 8004636:	4838      	ldr	r0, [pc, #224]	; (8004718 <MX_GPIO_Init+0x49c>)
 8004638:	f002 ffde 	bl	80075f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = WRLS_NOTIFY_Pin|Mems_INT_IIS2MDC_Pin|USB_IANA_Pin;
 800463c:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 8004640:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004642:	2300      	movs	r3, #0
 8004644:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004646:	2300      	movs	r3, #0
 8004648:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800464a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800464e:	4619      	mov	r1, r3
 8004650:	4832      	ldr	r0, [pc, #200]	; (800471c <MX_GPIO_Init+0x4a0>)
 8004652:	f002 ffd1 	bl	80075f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = USB_UCPD_FLT_Pin|Mems_ISM330DLC_INT1_Pin;
 8004656:	f44f 6310 	mov.w	r3, #2304	; 0x900
 800465a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800465c:	2300      	movs	r3, #0
 800465e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004660:	2300      	movs	r3, #0
 8004662:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004664:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004668:	4619      	mov	r1, r3
 800466a:	482a      	ldr	r0, [pc, #168]	; (8004714 <MX_GPIO_Init+0x498>)
 800466c:	f002 ffc4 	bl	80075f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_VBUS_SENSE_Pin;
 8004670:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004674:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004676:	2300      	movs	r3, #0
 8004678:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800467a:	2300      	movs	r3, #0
 800467c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_VBUS_SENSE_GPIO_Port, &GPIO_InitStruct);
 800467e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004682:	4619      	mov	r1, r3
 8004684:	4822      	ldr	r0, [pc, #136]	; (8004710 <MX_GPIO_Init+0x494>)
 8004686:	f002 ffb7 	bl	80075f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = WRLS_SPI2_NSS_Pin;
 800468a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800468e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004690:	2302      	movs	r3, #2
 8004692:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004694:	2300      	movs	r3, #0
 8004696:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004698:	2300      	movs	r3, #0
 800469a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800469c:	2305      	movs	r3, #5
 800469e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(WRLS_SPI2_NSS_GPIO_Port, &GPIO_InitStruct);
 80046a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80046a4:	4619      	mov	r1, r3
 80046a6:	481e      	ldr	r0, [pc, #120]	; (8004720 <MX_GPIO_Init+0x4a4>)
 80046a8:	f002 ffa6 	bl	80075f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_UCPD_CC2_Pin;
 80046ac:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80046b0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80046b2:	2303      	movs	r3, #3
 80046b4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046b6:	2300      	movs	r3, #0
 80046b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_UCPD_CC2_GPIO_Port, &GPIO_InitStruct);
 80046ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80046be:	4619      	mov	r1, r3
 80046c0:	4817      	ldr	r0, [pc, #92]	; (8004720 <MX_GPIO_Init+0x4a4>)
 80046c2:	f002 ff99 	bl	80075f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin */
  GPIO_InitStruct.Pin = Mems_STSAFE_RESET_Pin|WRLS_WKUP_W_Pin;
 80046c6:	f44f 4308 	mov.w	r3, #34816	; 0x8800
 80046ca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80046cc:	2301      	movs	r3, #1
 80046ce:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046d0:	2300      	movs	r3, #0
 80046d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80046d4:	2300      	movs	r3, #0
 80046d6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80046d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80046dc:	4619      	mov	r1, r3
 80046de:	480c      	ldr	r0, [pc, #48]	; (8004710 <MX_GPIO_Init+0x494>)
 80046e0:	f002 ff8a 	bl	80075f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MIC_SDIN0_Pin;
 80046e4:	2302      	movs	r3, #2
 80046e6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80046e8:	2302      	movs	r3, #2
 80046ea:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046ec:	2300      	movs	r3, #0
 80046ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80046f0:	2300      	movs	r3, #0
 80046f2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_MDF1;
 80046f4:	2306      	movs	r3, #6
 80046f6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(MIC_SDIN0_GPIO_Port, &GPIO_InitStruct);
 80046f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80046fc:	4619      	mov	r1, r3
 80046fe:	4808      	ldr	r0, [pc, #32]	; (8004720 <MX_GPIO_Init+0x4a4>)
 8004700:	f002 ff7a 	bl	80075f8 <HAL_GPIO_Init>

}
 8004704:	bf00      	nop
 8004706:	3738      	adds	r7, #56	; 0x38
 8004708:	46bd      	mov	sp, r7
 800470a:	bd80      	pop	{r7, pc}
 800470c:	42020000 	.word	0x42020000
 8004710:	42021400 	.word	0x42021400
 8004714:	42021000 	.word	0x42021000
 8004718:	42021800 	.word	0x42021800
 800471c:	42020c00 	.word	0x42020c00
 8004720:	42020400 	.word	0x42020400

08004724 <CAM_GPIO_Init>:

/* USER CODE BEGIN 2 */
void CAM_GPIO_Init(void){
 8004724:	b580      	push	{r7, lr}
 8004726:	b086      	sub	sp, #24
 8004728:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef InitStruct = {0};
 800472a:	1d3b      	adds	r3, r7, #4
 800472c:	2200      	movs	r2, #0
 800472e:	601a      	str	r2, [r3, #0]
 8004730:	605a      	str	r2, [r3, #4]
 8004732:	609a      	str	r2, [r3, #8]
 8004734:	60da      	str	r2, [r3, #12]
 8004736:	611a      	str	r2, [r3, #16]
	__HAL_RCC_GPIOI_CLK_ENABLE();
 8004738:	4b1c      	ldr	r3, [pc, #112]	; (80047ac <CAM_GPIO_Init+0x88>)
 800473a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800473e:	4a1b      	ldr	r2, [pc, #108]	; (80047ac <CAM_GPIO_Init+0x88>)
 8004740:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004744:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004748:	4b18      	ldr	r3, [pc, #96]	; (80047ac <CAM_GPIO_Init+0x88>)
 800474a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800474e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004752:	603b      	str	r3, [r7, #0]
 8004754:	683b      	ldr	r3, [r7, #0]

    /*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(CAM_XSDN_GPIO_Port, CAM_XSDN_Pin, GPIO_PIN_RESET);
 8004756:	2200      	movs	r2, #0
 8004758:	2108      	movs	r1, #8
 800475a:	4815      	ldr	r0, [pc, #84]	; (80047b0 <CAM_GPIO_Init+0x8c>)
 800475c:	f003 fa1a 	bl	8007b94 <HAL_GPIO_WritePin>

    /*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(CAM_RSTI_GPIO_Port, CAM_RSTI_Pin, GPIO_PIN_SET);
 8004760:	2201      	movs	r2, #1
 8004762:	2104      	movs	r1, #4
 8004764:	4812      	ldr	r0, [pc, #72]	; (80047b0 <CAM_GPIO_Init+0x8c>)
 8004766:	f003 fa15 	bl	8007b94 <HAL_GPIO_WritePin>

	InitStruct.Pin       = CAM_PLUG_Pin;
 800476a:	2302      	movs	r3, #2
 800476c:	607b      	str	r3, [r7, #4]
	InitStruct.Pull      = GPIO_PULLUP;
 800476e:	2301      	movs	r3, #1
 8004770:	60fb      	str	r3, [r7, #12]
	InitStruct.Mode      = GPIO_MODE_INPUT;
 8004772:	2300      	movs	r3, #0
 8004774:	60bb      	str	r3, [r7, #8]
	InitStruct.Alternate = GPIO_AF10_DCMI;
 8004776:	230a      	movs	r3, #10
 8004778:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(CAM_PLUG_GPIO_Port, &InitStruct);
 800477a:	1d3b      	adds	r3, r7, #4
 800477c:	4619      	mov	r1, r3
 800477e:	480c      	ldr	r0, [pc, #48]	; (80047b0 <CAM_GPIO_Init+0x8c>)
 8004780:	f002 ff3a 	bl	80075f8 <HAL_GPIO_Init>

	//Init Reset Pin
	InitStruct.Pin = CAM_RSTI_Pin | CAM_XSDN_Pin;
 8004784:	230c      	movs	r3, #12
 8004786:	607b      	str	r3, [r7, #4]
	InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004788:	2301      	movs	r3, #1
 800478a:	60bb      	str	r3, [r7, #8]
	InitStruct.Pull = GPIO_NOPULL;
 800478c:	2300      	movs	r3, #0
 800478e:	60fb      	str	r3, [r7, #12]
	InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004790:	2300      	movs	r3, #0
 8004792:	613b      	str	r3, [r7, #16]
	InitStruct.Alternate = GPIO_AF10_DCMI;
 8004794:	230a      	movs	r3, #10
 8004796:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(CAM_RSTI_GPIO_Port, &InitStruct);
 8004798:	1d3b      	adds	r3, r7, #4
 800479a:	4619      	mov	r1, r3
 800479c:	4804      	ldr	r0, [pc, #16]	; (80047b0 <CAM_GPIO_Init+0x8c>)
 800479e:	f002 ff2b 	bl	80075f8 <HAL_GPIO_Init>
}
 80047a2:	bf00      	nop
 80047a4:	3718      	adds	r7, #24
 80047a6:	46bd      	mov	sp, r7
 80047a8:	bd80      	pop	{r7, pc}
 80047aa:	bf00      	nop
 80047ac:	46020c00 	.word	0x46020c00
 80047b0:	42022000 	.word	0x42022000

080047b4 <Ram_GPIO_Init>:
     InitStruct.Alternate = GPIO_AF4_DCMI;
     HAL_GPIO_Init(CAM_PIXCLK_GPIO_Port, &InitStruct);

}

void Ram_GPIO_Init(void){
 80047b4:	b580      	push	{r7, lr}
 80047b6:	b08c      	sub	sp, #48	; 0x30
 80047b8:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef InitStruct = {0};
 80047ba:	f107 031c 	add.w	r3, r7, #28
 80047be:	2200      	movs	r2, #0
 80047c0:	601a      	str	r2, [r3, #0]
 80047c2:	605a      	str	r2, [r3, #4]
 80047c4:	609a      	str	r2, [r3, #8]
 80047c6:	60da      	str	r2, [r3, #12]
 80047c8:	611a      	str	r2, [r3, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 80047ca:	4b6f      	ldr	r3, [pc, #444]	; (8004988 <Ram_GPIO_Init+0x1d4>)
 80047cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80047d0:	4a6d      	ldr	r2, [pc, #436]	; (8004988 <Ram_GPIO_Init+0x1d4>)
 80047d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80047d6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80047da:	4b6b      	ldr	r3, [pc, #428]	; (8004988 <Ram_GPIO_Init+0x1d4>)
 80047dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80047e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047e4:	61bb      	str	r3, [r7, #24]
 80047e6:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80047e8:	4b67      	ldr	r3, [pc, #412]	; (8004988 <Ram_GPIO_Init+0x1d4>)
 80047ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80047ee:	4a66      	ldr	r2, [pc, #408]	; (8004988 <Ram_GPIO_Init+0x1d4>)
 80047f0:	f043 0310 	orr.w	r3, r3, #16
 80047f4:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80047f8:	4b63      	ldr	r3, [pc, #396]	; (8004988 <Ram_GPIO_Init+0x1d4>)
 80047fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80047fe:	f003 0310 	and.w	r3, r3, #16
 8004802:	617b      	str	r3, [r7, #20]
 8004804:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004806:	4b60      	ldr	r3, [pc, #384]	; (8004988 <Ram_GPIO_Init+0x1d4>)
 8004808:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800480c:	4a5e      	ldr	r2, [pc, #376]	; (8004988 <Ram_GPIO_Init+0x1d4>)
 800480e:	f043 0308 	orr.w	r3, r3, #8
 8004812:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004816:	4b5c      	ldr	r3, [pc, #368]	; (8004988 <Ram_GPIO_Init+0x1d4>)
 8004818:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800481c:	f003 0308 	and.w	r3, r3, #8
 8004820:	613b      	str	r3, [r7, #16]
 8004822:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8004824:	4b58      	ldr	r3, [pc, #352]	; (8004988 <Ram_GPIO_Init+0x1d4>)
 8004826:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800482a:	4a57      	ldr	r2, [pc, #348]	; (8004988 <Ram_GPIO_Init+0x1d4>)
 800482c:	f043 0320 	orr.w	r3, r3, #32
 8004830:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004834:	4b54      	ldr	r3, [pc, #336]	; (8004988 <Ram_GPIO_Init+0x1d4>)
 8004836:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800483a:	f003 0320 	and.w	r3, r3, #32
 800483e:	60fb      	str	r3, [r7, #12]
 8004840:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8004842:	4b51      	ldr	r3, [pc, #324]	; (8004988 <Ram_GPIO_Init+0x1d4>)
 8004844:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004848:	4a4f      	ldr	r2, [pc, #316]	; (8004988 <Ram_GPIO_Init+0x1d4>)
 800484a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800484e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004852:	4b4d      	ldr	r3, [pc, #308]	; (8004988 <Ram_GPIO_Init+0x1d4>)
 8004854:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004858:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800485c:	60bb      	str	r3, [r7, #8]
 800485e:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004860:	4b49      	ldr	r3, [pc, #292]	; (8004988 <Ram_GPIO_Init+0x1d4>)
 8004862:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004866:	4a48      	ldr	r2, [pc, #288]	; (8004988 <Ram_GPIO_Init+0x1d4>)
 8004868:	f043 0304 	orr.w	r3, r3, #4
 800486c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004870:	4b45      	ldr	r3, [pc, #276]	; (8004988 <Ram_GPIO_Init+0x1d4>)
 8004872:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004876:	f003 0304 	and.w	r3, r3, #4
 800487a:	607b      	str	r3, [r7, #4]
 800487c:	687b      	ldr	r3, [r7, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800487e:	4b42      	ldr	r3, [pc, #264]	; (8004988 <Ram_GPIO_Init+0x1d4>)
 8004880:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004884:	4a40      	ldr	r2, [pc, #256]	; (8004988 <Ram_GPIO_Init+0x1d4>)
 8004886:	f043 0302 	orr.w	r3, r3, #2
 800488a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800488e:	4b3e      	ldr	r3, [pc, #248]	; (8004988 <Ram_GPIO_Init+0x1d4>)
 8004890:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004894:	f003 0302 	and.w	r3, r3, #2
 8004898:	603b      	str	r3, [r7, #0]
 800489a:	683b      	ldr	r3, [r7, #0]

    InitStruct.Pin = OCTOSPI_R_IO5_Pin;
 800489c:	2301      	movs	r3, #1
 800489e:	61fb      	str	r3, [r7, #28]
    InitStruct.Mode = GPIO_MODE_AF_PP;
 80048a0:	2302      	movs	r3, #2
 80048a2:	623b      	str	r3, [r7, #32]
    InitStruct.Pull = GPIO_NOPULL;
 80048a4:	2300      	movs	r3, #0
 80048a6:	627b      	str	r3, [r7, #36]	; 0x24
    InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80048a8:	2303      	movs	r3, #3
 80048aa:	62bb      	str	r3, [r7, #40]	; 0x28
    InitStruct.Alternate = GPIO_AF3_OCTOSPI1;
 80048ac:	2303      	movs	r3, #3
 80048ae:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(OCTOSPI_R_IO5_GPIO_Port, &InitStruct);
 80048b0:	f107 031c 	add.w	r3, r7, #28
 80048b4:	4619      	mov	r1, r3
 80048b6:	4835      	ldr	r0, [pc, #212]	; (800498c <Ram_GPIO_Init+0x1d8>)
 80048b8:	f002 fe9e 	bl	80075f8 <HAL_GPIO_Init>

    InitStruct.Pin = OCTOSPI_R_DQS_Pin;
 80048bc:	2308      	movs	r3, #8
 80048be:	61fb      	str	r3, [r7, #28]
    InitStruct.Mode = GPIO_MODE_AF_PP;
 80048c0:	2302      	movs	r3, #2
 80048c2:	623b      	str	r3, [r7, #32]
    InitStruct.Pull = GPIO_NOPULL;
 80048c4:	2300      	movs	r3, #0
 80048c6:	627b      	str	r3, [r7, #36]	; 0x24
    InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80048c8:	2303      	movs	r3, #3
 80048ca:	62bb      	str	r3, [r7, #40]	; 0x28
    InitStruct.Alternate = GPIO_AF3_OCTOSPI1;
 80048cc:	2303      	movs	r3, #3
 80048ce:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(OCTOSPI_R_DQS_GPIO_Port, &InitStruct);
 80048d0:	f107 031c 	add.w	r3, r7, #28
 80048d4:	4619      	mov	r1, r3
 80048d6:	482e      	ldr	r0, [pc, #184]	; (8004990 <Ram_GPIO_Init+0x1dc>)
 80048d8:	f002 fe8e 	bl	80075f8 <HAL_GPIO_Init>

    InitStruct.Pin = OCTOSPI_R_IO7_Pin;
 80048dc:	2380      	movs	r3, #128	; 0x80
 80048de:	61fb      	str	r3, [r7, #28]
    InitStruct.Mode = GPIO_MODE_AF_PP;
 80048e0:	2302      	movs	r3, #2
 80048e2:	623b      	str	r3, [r7, #32]
    InitStruct.Pull = GPIO_NOPULL;
 80048e4:	2300      	movs	r3, #0
 80048e6:	627b      	str	r3, [r7, #36]	; 0x24
    InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80048e8:	2303      	movs	r3, #3
 80048ea:	62bb      	str	r3, [r7, #40]	; 0x28
    InitStruct.Alternate = GPIO_AF10_OCTOSPI1;
 80048ec:	230a      	movs	r3, #10
 80048ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(OCTOSPI_R_IO7_GPIO_Port, &InitStruct);
 80048f0:	f107 031c 	add.w	r3, r7, #28
 80048f4:	4619      	mov	r1, r3
 80048f6:	4827      	ldr	r0, [pc, #156]	; (8004994 <Ram_GPIO_Init+0x1e0>)
 80048f8:	f002 fe7e 	bl	80075f8 <HAL_GPIO_Init>

    InitStruct.Pin = OCTOSPI_R_IO0_Pin|OCTOSPI_R_IO2_Pin|OCTOSPI_R_IO1_Pin|OCTOSPI_R_IO3_Pin;
 80048fc:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8004900:	61fb      	str	r3, [r7, #28]
    InitStruct.Mode = GPIO_MODE_AF_PP;
 8004902:	2302      	movs	r3, #2
 8004904:	623b      	str	r3, [r7, #32]
    InitStruct.Pull = GPIO_NOPULL;
 8004906:	2300      	movs	r3, #0
 8004908:	627b      	str	r3, [r7, #36]	; 0x24
    InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800490a:	2303      	movs	r3, #3
 800490c:	62bb      	str	r3, [r7, #40]	; 0x28
    InitStruct.Alternate = GPIO_AF10_OCTOSPI1;
 800490e:	230a      	movs	r3, #10
 8004910:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &InitStruct);
 8004912:	f107 031c 	add.w	r3, r7, #28
 8004916:	4619      	mov	r1, r3
 8004918:	481f      	ldr	r0, [pc, #124]	; (8004998 <Ram_GPIO_Init+0x1e4>)
 800491a:	f002 fe6d 	bl	80075f8 <HAL_GPIO_Init>

    InitStruct.Pin = OCTOSPI_R_IO4_Pin;
 800491e:	2304      	movs	r3, #4
 8004920:	61fb      	str	r3, [r7, #28]
    InitStruct.Mode = GPIO_MODE_AF_PP;
 8004922:	2302      	movs	r3, #2
 8004924:	623b      	str	r3, [r7, #32]
    InitStruct.Pull = GPIO_NOPULL;
 8004926:	2300      	movs	r3, #0
 8004928:	627b      	str	r3, [r7, #36]	; 0x24
    InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800492a:	2303      	movs	r3, #3
 800492c:	62bb      	str	r3, [r7, #40]	; 0x28
    InitStruct.Alternate = GPIO_AF3_OCTOSPI1;
 800492e:	2303      	movs	r3, #3
 8004930:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(OCTOSPI_R_IO4_GPIO_Port, &InitStruct);
 8004932:	f107 031c 	add.w	r3, r7, #28
 8004936:	4619      	mov	r1, r3
 8004938:	4818      	ldr	r0, [pc, #96]	; (800499c <Ram_GPIO_Init+0x1e8>)
 800493a:	f002 fe5d 	bl	80075f8 <HAL_GPIO_Init>

    InitStruct.Pin = OCTOSPI_R_IO6_Pin;
 800493e:	2308      	movs	r3, #8
 8004940:	61fb      	str	r3, [r7, #28]
    InitStruct.Mode = GPIO_MODE_AF_PP;
 8004942:	2302      	movs	r3, #2
 8004944:	623b      	str	r3, [r7, #32]
    InitStruct.Pull = GPIO_NOPULL;
 8004946:	2300      	movs	r3, #0
 8004948:	627b      	str	r3, [r7, #36]	; 0x24
    InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800494a:	2303      	movs	r3, #3
 800494c:	62bb      	str	r3, [r7, #40]	; 0x28
    InitStruct.Alternate = GPIO_AF10_OCTOSPI1;
 800494e:	230a      	movs	r3, #10
 8004950:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(OCTOSPI_R_IO6_GPIO_Port, &InitStruct);
 8004952:	f107 031c 	add.w	r3, r7, #28
 8004956:	4619      	mov	r1, r3
 8004958:	4811      	ldr	r0, [pc, #68]	; (80049a0 <Ram_GPIO_Init+0x1ec>)
 800495a:	f002 fe4d 	bl	80075f8 <HAL_GPIO_Init>

    InitStruct.Pin = OCTOSPI_R_CLK_P_Pin|OCTOSPI_R_NCS_Pin;
 800495e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8004962:	61fb      	str	r3, [r7, #28]
    InitStruct.Mode = GPIO_MODE_AF_PP;
 8004964:	2302      	movs	r3, #2
 8004966:	623b      	str	r3, [r7, #32]
    InitStruct.Pull = GPIO_NOPULL;
 8004968:	2300      	movs	r3, #0
 800496a:	627b      	str	r3, [r7, #36]	; 0x24
    InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800496c:	2303      	movs	r3, #3
 800496e:	62bb      	str	r3, [r7, #40]	; 0x28
    InitStruct.Alternate = GPIO_AF10_OCTOSPI1;
 8004970:	230a      	movs	r3, #10
 8004972:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &InitStruct);
 8004974:	f107 031c 	add.w	r3, r7, #28
 8004978:	4619      	mov	r1, r3
 800497a:	480a      	ldr	r0, [pc, #40]	; (80049a4 <Ram_GPIO_Init+0x1f0>)
 800497c:	f002 fe3c 	bl	80075f8 <HAL_GPIO_Init>
}
 8004980:	bf00      	nop
 8004982:	3730      	adds	r7, #48	; 0x30
 8004984:	46bd      	mov	sp, r7
 8004986:	bd80      	pop	{r7, pc}
 8004988:	46020c00 	.word	0x46020c00
 800498c:	42022000 	.word	0x42022000
 8004990:	42021000 	.word	0x42021000
 8004994:	42020c00 	.word	0x42020c00
 8004998:	42021400 	.word	0x42021400
 800499c:	42021c00 	.word	0x42021c00
 80049a0:	42020800 	.word	0x42020800
 80049a4:	42020400 	.word	0x42020400

080049a8 <MotionSensor_GPIO_Init>:

void MotionSensor_GPIO_Init(void)
{
 80049a8:	b580      	push	{r7, lr}
 80049aa:	b086      	sub	sp, #24
 80049ac:	af00      	add	r7, sp, #0
	  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80049ae:	1d3b      	adds	r3, r7, #4
 80049b0:	2200      	movs	r2, #0
 80049b2:	601a      	str	r2, [r3, #0]
 80049b4:	605a      	str	r2, [r3, #4]
 80049b6:	609a      	str	r2, [r3, #8]
 80049b8:	60da      	str	r2, [r3, #12]
 80049ba:	611a      	str	r2, [r3, #16]
	  GPIO_InitStruct.Pin = Mems_ISM330DLC_INT1_Pin;
 80049bc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80049c0:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80049c2:	2300      	movs	r3, #0
 80049c4:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80049c6:	2300      	movs	r3, #0
 80049c8:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80049ca:	2300      	movs	r3, #0
 80049cc:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80049ce:	2300      	movs	r3, #0
 80049d0:	60fb      	str	r3, [r7, #12]
	  HAL_GPIO_Init(Mems_ISM330DLC_INT1_GPIO_Port, &GPIO_InitStruct);
 80049d2:	1d3b      	adds	r3, r7, #4
 80049d4:	4619      	mov	r1, r3
 80049d6:	4803      	ldr	r0, [pc, #12]	; (80049e4 <MotionSensor_GPIO_Init+0x3c>)
 80049d8:	f002 fe0e 	bl	80075f8 <HAL_GPIO_Init>
}
 80049dc:	bf00      	nop
 80049de:	3718      	adds	r7, #24
 80049e0:	46bd      	mov	sp, r7
 80049e2:	bd80      	pop	{r7, pc}
 80049e4:	42021000 	.word	0x42021000

080049e8 <PressureSensor_GPIO_Init>:

void PressureSensor_GPIO_Init(void)
{
 80049e8:	b580      	push	{r7, lr}
 80049ea:	b086      	sub	sp, #24
 80049ec:	af00      	add	r7, sp, #0
	  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80049ee:	1d3b      	adds	r3, r7, #4
 80049f0:	2200      	movs	r2, #0
 80049f2:	601a      	str	r2, [r3, #0]
 80049f4:	605a      	str	r2, [r3, #4]
 80049f6:	609a      	str	r2, [r3, #8]
 80049f8:	60da      	str	r2, [r3, #12]
 80049fa:	611a      	str	r2, [r3, #16]
	  GPIO_InitStruct.Pin = Mems_INT_LPS22HH_Pin;
 80049fc:	2304      	movs	r3, #4
 80049fe:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004a00:	2300      	movs	r3, #0
 8004a02:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a04:	2300      	movs	r3, #0
 8004a06:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004a08:	2300      	movs	r3, #0
 8004a0a:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a0c:	2300      	movs	r3, #0
 8004a0e:	60fb      	str	r3, [r7, #12]
	  HAL_GPIO_Init(Mems_INT_LPS22HH_GPIO_Port, &GPIO_InitStruct);
 8004a10:	1d3b      	adds	r3, r7, #4
 8004a12:	4619      	mov	r1, r3
 8004a14:	4803      	ldr	r0, [pc, #12]	; (8004a24 <PressureSensor_GPIO_Init+0x3c>)
 8004a16:	f002 fdef 	bl	80075f8 <HAL_GPIO_Init>
}
 8004a1a:	bf00      	nop
 8004a1c:	3718      	adds	r7, #24
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	bd80      	pop	{r7, pc}
 8004a22:	bf00      	nop
 8004a24:	42021800 	.word	0x42021800

08004a28 <MagSensor_GPIO_Init>:

void MagSensor_GPIO_Init(void)
{
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	b086      	sub	sp, #24
 8004a2c:	af00      	add	r7, sp, #0
	  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004a2e:	1d3b      	adds	r3, r7, #4
 8004a30:	2200      	movs	r2, #0
 8004a32:	601a      	str	r2, [r3, #0]
 8004a34:	605a      	str	r2, [r3, #4]
 8004a36:	609a      	str	r2, [r3, #8]
 8004a38:	60da      	str	r2, [r3, #12]
 8004a3a:	611a      	str	r2, [r3, #16]
	  GPIO_InitStruct.Pin = Mems_INT_IIS2MDC_Pin;
 8004a3c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004a40:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004a42:	2300      	movs	r3, #0
 8004a44:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a46:	2300      	movs	r3, #0
 8004a48:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004a4a:	2300      	movs	r3, #0
 8004a4c:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a4e:	2300      	movs	r3, #0
 8004a50:	60fb      	str	r3, [r7, #12]
	  HAL_GPIO_Init(Mems_INT_IIS2MDC_GPIO_Port, &GPIO_InitStruct);
 8004a52:	1d3b      	adds	r3, r7, #4
 8004a54:	4619      	mov	r1, r3
 8004a56:	4803      	ldr	r0, [pc, #12]	; (8004a64 <MagSensor_GPIO_Init+0x3c>)
 8004a58:	f002 fdce 	bl	80075f8 <HAL_GPIO_Init>
}
 8004a5c:	bf00      	nop
 8004a5e:	3718      	adds	r7, #24
 8004a60:	46bd      	mov	sp, r7
 8004a62:	bd80      	pop	{r7, pc}
 8004a64:	42020c00 	.word	0x42020c00

08004a68 <HAL_I2C_MspInit>:
  /* USER CODE END I2C2_Init 2 */

}

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8004a68:	b580      	push	{r7, lr}
 8004a6a:	b0be      	sub	sp, #248	; 0xf8
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004a70:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8004a74:	2200      	movs	r2, #0
 8004a76:	601a      	str	r2, [r3, #0]
 8004a78:	605a      	str	r2, [r3, #4]
 8004a7a:	609a      	str	r2, [r3, #8]
 8004a7c:	60da      	str	r2, [r3, #12]
 8004a7e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004a80:	f107 0318 	add.w	r3, r7, #24
 8004a84:	22c8      	movs	r2, #200	; 0xc8
 8004a86:	2100      	movs	r1, #0
 8004a88:	4618      	mov	r0, r3
 8004a8a:	f009 fe6f 	bl	800e76c <memset>
  if(i2cHandle->Instance==I2C1)
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	4a53      	ldr	r2, [pc, #332]	; (8004be0 <HAL_I2C_MspInit+0x178>)
 8004a94:	4293      	cmp	r3, r2
 8004a96:	d153      	bne.n	8004b40 <HAL_I2C_MspInit+0xd8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8004a98:	f04f 0240 	mov.w	r2, #64	; 0x40
 8004a9c:	f04f 0300 	mov.w	r3, #0
 8004aa0:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8004aa4:	2300      	movs	r3, #0
 8004aa6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004aaa:	f107 0318 	add.w	r3, r7, #24
 8004aae:	4618      	mov	r0, r3
 8004ab0:	f006 fce2 	bl	800b478 <HAL_RCCEx_PeriphCLKConfig>
 8004ab4:	4603      	mov	r3, r0
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d001      	beq.n	8004abe <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8004aba:	f000 fabb 	bl	8005034 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004abe:	4b49      	ldr	r3, [pc, #292]	; (8004be4 <HAL_I2C_MspInit+0x17c>)
 8004ac0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004ac4:	4a47      	ldr	r2, [pc, #284]	; (8004be4 <HAL_I2C_MspInit+0x17c>)
 8004ac6:	f043 0302 	orr.w	r3, r3, #2
 8004aca:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004ace:	4b45      	ldr	r3, [pc, #276]	; (8004be4 <HAL_I2C_MspInit+0x17c>)
 8004ad0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004ad4:	f003 0302 	and.w	r3, r3, #2
 8004ad8:	617b      	str	r3, [r7, #20]
 8004ada:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB9     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_8;
 8004adc:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004ae0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004ae4:	2312      	movs	r3, #18
 8004ae6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004aea:	2300      	movs	r3, #0
 8004aec:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004af0:	2300      	movs	r3, #0
 8004af2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004af6:	2304      	movs	r3, #4
 8004af8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004afc:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8004b00:	4619      	mov	r1, r3
 8004b02:	4839      	ldr	r0, [pc, #228]	; (8004be8 <HAL_I2C_MspInit+0x180>)
 8004b04:	f002 fd78 	bl	80075f8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004b08:	4b36      	ldr	r3, [pc, #216]	; (8004be4 <HAL_I2C_MspInit+0x17c>)
 8004b0a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004b0e:	4a35      	ldr	r2, [pc, #212]	; (8004be4 <HAL_I2C_MspInit+0x17c>)
 8004b10:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004b14:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8004b18:	4b32      	ldr	r3, [pc, #200]	; (8004be4 <HAL_I2C_MspInit+0x17c>)
 8004b1a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004b1e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004b22:	613b      	str	r3, [r7, #16]
 8004b24:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C1_MspInit 1 */
    __HAL_RCC_I2C1_FORCE_RESET();
 8004b26:	4b2f      	ldr	r3, [pc, #188]	; (8004be4 <HAL_I2C_MspInit+0x17c>)
 8004b28:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b2a:	4a2e      	ldr	r2, [pc, #184]	; (8004be4 <HAL_I2C_MspInit+0x17c>)
 8004b2c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004b30:	6753      	str	r3, [r2, #116]	; 0x74
    __HAL_RCC_I2C1_RELEASE_RESET();
 8004b32:	4b2c      	ldr	r3, [pc, #176]	; (8004be4 <HAL_I2C_MspInit+0x17c>)
 8004b34:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b36:	4a2b      	ldr	r2, [pc, #172]	; (8004be4 <HAL_I2C_MspInit+0x17c>)
 8004b38:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004b3c:	6753      	str	r3, [r2, #116]	; 0x74
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8004b3e:	e04a      	b.n	8004bd6 <HAL_I2C_MspInit+0x16e>
  else if(i2cHandle->Instance==I2C2)
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	4a29      	ldr	r2, [pc, #164]	; (8004bec <HAL_I2C_MspInit+0x184>)
 8004b46:	4293      	cmp	r3, r2
 8004b48:	d145      	bne.n	8004bd6 <HAL_I2C_MspInit+0x16e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8004b4a:	f04f 0280 	mov.w	r2, #128	; 0x80
 8004b4e:	f04f 0300 	mov.w	r3, #0
 8004b52:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8004b56:	2300      	movs	r3, #0
 8004b58:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004b5c:	f107 0318 	add.w	r3, r7, #24
 8004b60:	4618      	mov	r0, r3
 8004b62:	f006 fc89 	bl	800b478 <HAL_RCCEx_PeriphCLKConfig>
 8004b66:	4603      	mov	r3, r0
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d001      	beq.n	8004b70 <HAL_I2C_MspInit+0x108>
      Error_Handler();
 8004b6c:	f000 fa62 	bl	8005034 <Error_Handler>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8004b70:	4b1c      	ldr	r3, [pc, #112]	; (8004be4 <HAL_I2C_MspInit+0x17c>)
 8004b72:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004b76:	4a1b      	ldr	r2, [pc, #108]	; (8004be4 <HAL_I2C_MspInit+0x17c>)
 8004b78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b7c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004b80:	4b18      	ldr	r3, [pc, #96]	; (8004be4 <HAL_I2C_MspInit+0x17c>)
 8004b82:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004b86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b8a:	60fb      	str	r3, [r7, #12]
 8004b8c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8004b8e:	2330      	movs	r3, #48	; 0x30
 8004b90:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004b94:	2312      	movs	r3, #18
 8004b96:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b9a:	2300      	movs	r3, #0
 8004b9c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004ba0:	2300      	movs	r3, #0
 8004ba2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8004ba6:	2304      	movs	r3, #4
 8004ba8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8004bac:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8004bb0:	4619      	mov	r1, r3
 8004bb2:	480f      	ldr	r0, [pc, #60]	; (8004bf0 <HAL_I2C_MspInit+0x188>)
 8004bb4:	f002 fd20 	bl	80075f8 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8004bb8:	4b0a      	ldr	r3, [pc, #40]	; (8004be4 <HAL_I2C_MspInit+0x17c>)
 8004bba:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004bbe:	4a09      	ldr	r2, [pc, #36]	; (8004be4 <HAL_I2C_MspInit+0x17c>)
 8004bc0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004bc4:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8004bc8:	4b06      	ldr	r3, [pc, #24]	; (8004be4 <HAL_I2C_MspInit+0x17c>)
 8004bca:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004bce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004bd2:	60bb      	str	r3, [r7, #8]
 8004bd4:	68bb      	ldr	r3, [r7, #8]
}
 8004bd6:	bf00      	nop
 8004bd8:	37f8      	adds	r7, #248	; 0xf8
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	bd80      	pop	{r7, pc}
 8004bde:	bf00      	nop
 8004be0:	40005400 	.word	0x40005400
 8004be4:	46020c00 	.word	0x46020c00
 8004be8:	42020400 	.word	0x42020400
 8004bec:	40005800 	.word	0x40005800
 8004bf0:	42021c00 	.word	0x42021c00

08004bf4 <HAL_I2C_MspDeInit>:

void HAL_I2C_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8004bf4:	b580      	push	{r7, lr}
 8004bf6:	b082      	sub	sp, #8
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	6078      	str	r0, [r7, #4]

  if(i2cHandle->Instance==I2C1)
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	4a17      	ldr	r2, [pc, #92]	; (8004c60 <HAL_I2C_MspDeInit+0x6c>)
 8004c02:	4293      	cmp	r3, r2
 8004c04:	d112      	bne.n	8004c2c <HAL_I2C_MspDeInit+0x38>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8004c06:	4b17      	ldr	r3, [pc, #92]	; (8004c64 <HAL_I2C_MspDeInit+0x70>)
 8004c08:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004c0c:	4a15      	ldr	r2, [pc, #84]	; (8004c64 <HAL_I2C_MspDeInit+0x70>)
 8004c0e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004c12:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c

    /**I2C1 GPIO Configuration
    PB9     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_9);
 8004c16:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004c1a:	4813      	ldr	r0, [pc, #76]	; (8004c68 <HAL_I2C_MspDeInit+0x74>)
 8004c1c:	f002 fec4 	bl	80079a8 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_8);
 8004c20:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004c24:	4810      	ldr	r0, [pc, #64]	; (8004c68 <HAL_I2C_MspDeInit+0x74>)
 8004c26:	f002 febf 	bl	80079a8 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
  }
}
 8004c2a:	e014      	b.n	8004c56 <HAL_I2C_MspDeInit+0x62>
  else if(i2cHandle->Instance==I2C2)
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	4a0e      	ldr	r2, [pc, #56]	; (8004c6c <HAL_I2C_MspDeInit+0x78>)
 8004c32:	4293      	cmp	r3, r2
 8004c34:	d10f      	bne.n	8004c56 <HAL_I2C_MspDeInit+0x62>
    __HAL_RCC_I2C2_CLK_DISABLE();
 8004c36:	4b0b      	ldr	r3, [pc, #44]	; (8004c64 <HAL_I2C_MspDeInit+0x70>)
 8004c38:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004c3c:	4a09      	ldr	r2, [pc, #36]	; (8004c64 <HAL_I2C_MspDeInit+0x70>)
 8004c3e:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8004c42:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
    HAL_GPIO_DeInit(GPIOH, GPIO_PIN_4);
 8004c46:	2110      	movs	r1, #16
 8004c48:	4809      	ldr	r0, [pc, #36]	; (8004c70 <HAL_I2C_MspDeInit+0x7c>)
 8004c4a:	f002 fead 	bl	80079a8 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOH, GPIO_PIN_5);
 8004c4e:	2120      	movs	r1, #32
 8004c50:	4807      	ldr	r0, [pc, #28]	; (8004c70 <HAL_I2C_MspDeInit+0x7c>)
 8004c52:	f002 fea9 	bl	80079a8 <HAL_GPIO_DeInit>
}
 8004c56:	bf00      	nop
 8004c58:	3708      	adds	r7, #8
 8004c5a:	46bd      	mov	sp, r7
 8004c5c:	bd80      	pop	{r7, pc}
 8004c5e:	bf00      	nop
 8004c60:	40005400 	.word	0x40005400
 8004c64:	46020c00 	.word	0x46020c00
 8004c68:	42020400 	.word	0x42020400
 8004c6c:	40005800 	.word	0x40005800
 8004c70:	42021c00 	.word	0x42021c00

08004c74 <I2C1_Init>:

/* USER CODE BEGIN 1 */
void I2C1_Init(void){
 8004c74:	b580      	push	{r7, lr}
 8004c76:	af00      	add	r7, sp, #0

	  hi2c1.Instance = I2C1;
 8004c78:	4b1b      	ldr	r3, [pc, #108]	; (8004ce8 <I2C1_Init+0x74>)
 8004c7a:	4a1c      	ldr	r2, [pc, #112]	; (8004cec <I2C1_Init+0x78>)
 8004c7c:	601a      	str	r2, [r3, #0]
	  hi2c1.Init.Timing = 0xB0C03E40;
 8004c7e:	4b1a      	ldr	r3, [pc, #104]	; (8004ce8 <I2C1_Init+0x74>)
 8004c80:	4a1b      	ldr	r2, [pc, #108]	; (8004cf0 <I2C1_Init+0x7c>)
 8004c82:	605a      	str	r2, [r3, #4]
	  hi2c1.Init.OwnAddress1 = 0;
 8004c84:	4b18      	ldr	r3, [pc, #96]	; (8004ce8 <I2C1_Init+0x74>)
 8004c86:	2200      	movs	r2, #0
 8004c88:	609a      	str	r2, [r3, #8]
	  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004c8a:	4b17      	ldr	r3, [pc, #92]	; (8004ce8 <I2C1_Init+0x74>)
 8004c8c:	2201      	movs	r2, #1
 8004c8e:	60da      	str	r2, [r3, #12]
	  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004c90:	4b15      	ldr	r3, [pc, #84]	; (8004ce8 <I2C1_Init+0x74>)
 8004c92:	2200      	movs	r2, #0
 8004c94:	611a      	str	r2, [r3, #16]
	  hi2c1.Init.OwnAddress2 = 0;
 8004c96:	4b14      	ldr	r3, [pc, #80]	; (8004ce8 <I2C1_Init+0x74>)
 8004c98:	2200      	movs	r2, #0
 8004c9a:	615a      	str	r2, [r3, #20]
	  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8004c9c:	4b12      	ldr	r3, [pc, #72]	; (8004ce8 <I2C1_Init+0x74>)
 8004c9e:	2200      	movs	r2, #0
 8004ca0:	619a      	str	r2, [r3, #24]
	  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004ca2:	4b11      	ldr	r3, [pc, #68]	; (8004ce8 <I2C1_Init+0x74>)
 8004ca4:	2200      	movs	r2, #0
 8004ca6:	61da      	str	r2, [r3, #28]
	  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004ca8:	4b0f      	ldr	r3, [pc, #60]	; (8004ce8 <I2C1_Init+0x74>)
 8004caa:	2200      	movs	r2, #0
 8004cac:	621a      	str	r2, [r3, #32]
	  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8004cae:	480e      	ldr	r0, [pc, #56]	; (8004ce8 <I2C1_Init+0x74>)
 8004cb0:	f002 ffa2 	bl	8007bf8 <HAL_I2C_Init>
 8004cb4:	4603      	mov	r3, r0
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d001      	beq.n	8004cbe <I2C1_Init+0x4a>
	  {
	    Error_Handler();
 8004cba:	f000 f9bb 	bl	8005034 <Error_Handler>
	  }

	  /** Configure Analogue filter
	  */
	  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8004cbe:	2100      	movs	r1, #0
 8004cc0:	4809      	ldr	r0, [pc, #36]	; (8004ce8 <I2C1_Init+0x74>)
 8004cc2:	f003 fd2b 	bl	800871c <HAL_I2CEx_ConfigAnalogFilter>
 8004cc6:	4603      	mov	r3, r0
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d001      	beq.n	8004cd0 <I2C1_Init+0x5c>
	  {
	    Error_Handler();
 8004ccc:	f000 f9b2 	bl	8005034 <Error_Handler>
	  }

	  /** Configure Digital filter
	  */
	  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8004cd0:	2100      	movs	r1, #0
 8004cd2:	4805      	ldr	r0, [pc, #20]	; (8004ce8 <I2C1_Init+0x74>)
 8004cd4:	f003 fd6d 	bl	80087b2 <HAL_I2CEx_ConfigDigitalFilter>
 8004cd8:	4603      	mov	r3, r0
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d001      	beq.n	8004ce2 <I2C1_Init+0x6e>
	  {
	    Error_Handler();
 8004cde:	f000 f9a9 	bl	8005034 <Error_Handler>
	  }

}
 8004ce2:	bf00      	nop
 8004ce4:	bd80      	pop	{r7, pc}
 8004ce6:	bf00      	nop
 8004ce8:	200014b8 	.word	0x200014b8
 8004cec:	40005400 	.word	0x40005400
 8004cf0:	b0c03e40 	.word	0xb0c03e40

08004cf4 <I2C2_Init>:

void I2C2_Init(void){
 8004cf4:	b580      	push	{r7, lr}
 8004cf6:	af00      	add	r7, sp, #0

	  hi2c2.Instance = I2C2;
 8004cf8:	4b1b      	ldr	r3, [pc, #108]	; (8004d68 <I2C2_Init+0x74>)
 8004cfa:	4a1c      	ldr	r2, [pc, #112]	; (8004d6c <I2C2_Init+0x78>)
 8004cfc:	601a      	str	r2, [r3, #0]
	  hi2c2.Init.Timing = 0x30909DEC;
 8004cfe:	4b1a      	ldr	r3, [pc, #104]	; (8004d68 <I2C2_Init+0x74>)
 8004d00:	4a1b      	ldr	r2, [pc, #108]	; (8004d70 <I2C2_Init+0x7c>)
 8004d02:	605a      	str	r2, [r3, #4]
	  hi2c2.Init.OwnAddress1 = 0;
 8004d04:	4b18      	ldr	r3, [pc, #96]	; (8004d68 <I2C2_Init+0x74>)
 8004d06:	2200      	movs	r2, #0
 8004d08:	609a      	str	r2, [r3, #8]
	  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004d0a:	4b17      	ldr	r3, [pc, #92]	; (8004d68 <I2C2_Init+0x74>)
 8004d0c:	2201      	movs	r2, #1
 8004d0e:	60da      	str	r2, [r3, #12]
	  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004d10:	4b15      	ldr	r3, [pc, #84]	; (8004d68 <I2C2_Init+0x74>)
 8004d12:	2200      	movs	r2, #0
 8004d14:	611a      	str	r2, [r3, #16]
	  hi2c2.Init.OwnAddress2 = 0;
 8004d16:	4b14      	ldr	r3, [pc, #80]	; (8004d68 <I2C2_Init+0x74>)
 8004d18:	2200      	movs	r2, #0
 8004d1a:	615a      	str	r2, [r3, #20]
	  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8004d1c:	4b12      	ldr	r3, [pc, #72]	; (8004d68 <I2C2_Init+0x74>)
 8004d1e:	2200      	movs	r2, #0
 8004d20:	619a      	str	r2, [r3, #24]
	  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004d22:	4b11      	ldr	r3, [pc, #68]	; (8004d68 <I2C2_Init+0x74>)
 8004d24:	2200      	movs	r2, #0
 8004d26:	61da      	str	r2, [r3, #28]
	  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004d28:	4b0f      	ldr	r3, [pc, #60]	; (8004d68 <I2C2_Init+0x74>)
 8004d2a:	2200      	movs	r2, #0
 8004d2c:	621a      	str	r2, [r3, #32]
	  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8004d2e:	480e      	ldr	r0, [pc, #56]	; (8004d68 <I2C2_Init+0x74>)
 8004d30:	f002 ff62 	bl	8007bf8 <HAL_I2C_Init>
 8004d34:	4603      	mov	r3, r0
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d001      	beq.n	8004d3e <I2C2_Init+0x4a>
	  {
	    Error_Handler();
 8004d3a:	f000 f97b 	bl	8005034 <Error_Handler>
	  }

	  /** Configure Analogue filter
	  */
	  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8004d3e:	2100      	movs	r1, #0
 8004d40:	4809      	ldr	r0, [pc, #36]	; (8004d68 <I2C2_Init+0x74>)
 8004d42:	f003 fceb 	bl	800871c <HAL_I2CEx_ConfigAnalogFilter>
 8004d46:	4603      	mov	r3, r0
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d001      	beq.n	8004d50 <I2C2_Init+0x5c>
	  {
	    Error_Handler();
 8004d4c:	f000 f972 	bl	8005034 <Error_Handler>
	  }

	  /** Configure Digital filter
	  */
	  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8004d50:	2100      	movs	r1, #0
 8004d52:	4805      	ldr	r0, [pc, #20]	; (8004d68 <I2C2_Init+0x74>)
 8004d54:	f003 fd2d 	bl	80087b2 <HAL_I2CEx_ConfigDigitalFilter>
 8004d58:	4603      	mov	r3, r0
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d001      	beq.n	8004d62 <I2C2_Init+0x6e>
	  {
	    Error_Handler();
 8004d5e:	f000 f969 	bl	8005034 <Error_Handler>
	  }

}
 8004d62:	bf00      	nop
 8004d64:	bd80      	pop	{r7, pc}
 8004d66:	bf00      	nop
 8004d68:	20001504 	.word	0x20001504
 8004d6c:	40005800 	.word	0x40005800
 8004d70:	30909dec 	.word	0x30909dec

08004d74 <MX_ICACHE_Init>:

/* USER CODE END 0 */

/* ICACHE init function */
void MX_ICACHE_Init(void)
{
 8004d74:	b580      	push	{r7, lr}
 8004d76:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache (default 2-ways set associative cache)
  */
  if (HAL_ICACHE_Enable() != HAL_OK)
 8004d78:	f003 fd68 	bl	800884c <HAL_ICACHE_Enable>
 8004d7c:	4603      	mov	r3, r0
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d001      	beq.n	8004d86 <MX_ICACHE_Init+0x12>
  {
    Error_Handler();
 8004d82:	f000 f957 	bl	8005034 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 8004d86:	bf00      	nop
 8004d88:	bd80      	pop	{r7, pc}
	...

08004d8c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004d8c:	b580      	push	{r7, lr}
 8004d8e:	b088      	sub	sp, #32
 8004d90:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004d92:	f000 fce5 	bl	8005760 <HAL_Init>

  /* USER CODE BEGIN Init */
uint32_t time = 0;
 8004d96:	2300      	movs	r3, #0
 8004d98:	613b      	str	r3, [r7, #16]
uint32_t i = 0;
 8004d9a:	2300      	movs	r3, #0
 8004d9c:	61fb      	str	r3, [r7, #28]
uint32_t j = 0;
 8004d9e:	2300      	movs	r3, #0
 8004da0:	61bb      	str	r3, [r7, #24]
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004da2:	f000 f8cb 	bl	8004f3c <SystemClock_Config>

  /* Configure the System Power */
  SystemPower_Config();
 8004da6:	f000 f925 	bl	8004ff4 <SystemPower_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init(); //LED GPIO
 8004daa:	f7ff fa67 	bl	800427c <MX_GPIO_Init>
  //MX_DCMI_Init();
  //MX_GPDMA1_Init();
  //MX_OCTOSPI1_Init();
  MX_ICACHE_Init();
 8004dae:	f7ff ffe1 	bl	8004d74 <MX_ICACHE_Init>
  MX_DCACHE1_Init();
 8004db2:	f7ff f877 	bl	8003ea4 <MX_DCACHE1_Init>
  //MX_I2C1_Init();
  //MX_I2C2_Init();
  /* USER CODE BEGIN 2 */

  /***********Temp Sensor Test********/
  float temperature = 0;
 8004db6:	f04f 0300 	mov.w	r3, #0
 8004dba:	60bb      	str	r3, [r7, #8]
  float humidity = 0;
 8004dbc:	f04f 0300 	mov.w	r3, #0
 8004dc0:	607b      	str	r3, [r7, #4]
  BSP_TempHumSensorInit();
 8004dc2:	f7fc fa13 	bl	80011ec <BSP_TempHumSensorInit>
  for(uint8_t i = 0; i < 10; i++)
 8004dc6:	2300      	movs	r3, #0
 8004dc8:	75fb      	strb	r3, [r7, #23]
 8004dca:	e00f      	b.n	8004dec <main+0x60>
  {
	  BSP_ReadTemperature(&temperature);
 8004dcc:	f107 0308 	add.w	r3, r7, #8
 8004dd0:	4618      	mov	r0, r3
 8004dd2:	f7fc fa35 	bl	8001240 <BSP_ReadTemperature>
	  BSP_ReadHumidity(&humidity);
 8004dd6:	1d3b      	adds	r3, r7, #4
 8004dd8:	4618      	mov	r0, r3
 8004dda:	f7fc fa41 	bl	8001260 <BSP_ReadHumidity>
	  HAL_Delay(1200);
 8004dde:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 8004de2:	f000 fd0b 	bl	80057fc <HAL_Delay>
  for(uint8_t i = 0; i < 10; i++)
 8004de6:	7dfb      	ldrb	r3, [r7, #23]
 8004de8:	3301      	adds	r3, #1
 8004dea:	75fb      	strb	r3, [r7, #23]
 8004dec:	7dfb      	ldrb	r3, [r7, #23]
 8004dee:	2b09      	cmp	r3, #9
 8004df0:	d9ec      	bls.n	8004dcc <main+0x40>
  }
  /***********Mag Sensor Test********/
  int32_t ret = BSP_MagnetometerInit();
 8004df2:	f7fc fa85 	bl	8001300 <BSP_MagnetometerInit>
 8004df6:	60f8      	str	r0, [r7, #12]
  i = 0;
 8004df8:	2300      	movs	r3, #0
 8004dfa:	61fb      	str	r3, [r7, #28]
  time = HAL_GetTick();
 8004dfc:	f000 fcf2 	bl	80057e4 <HAL_GetTick>
 8004e00:	6138      	str	r0, [r7, #16]
  while(HAL_GetTick() < time + 1000)
 8004e02:	e014      	b.n	8004e2e <main+0xa2>
  {
      if(BSP_ReadMagnetometerXYZ(&MagX[i], &MagY[i], &MagZ[i]) == 0)
 8004e04:	69fb      	ldr	r3, [r7, #28]
 8004e06:	009b      	lsls	r3, r3, #2
 8004e08:	4a41      	ldr	r2, [pc, #260]	; (8004f10 <main+0x184>)
 8004e0a:	1898      	adds	r0, r3, r2
 8004e0c:	69fb      	ldr	r3, [r7, #28]
 8004e0e:	009b      	lsls	r3, r3, #2
 8004e10:	4a40      	ldr	r2, [pc, #256]	; (8004f14 <main+0x188>)
 8004e12:	1899      	adds	r1, r3, r2
 8004e14:	69fb      	ldr	r3, [r7, #28]
 8004e16:	009b      	lsls	r3, r3, #2
 8004e18:	4a3f      	ldr	r2, [pc, #252]	; (8004f18 <main+0x18c>)
 8004e1a:	4413      	add	r3, r2
 8004e1c:	461a      	mov	r2, r3
 8004e1e:	f7fc fa9f 	bl	8001360 <BSP_ReadMagnetometerXYZ>
 8004e22:	4603      	mov	r3, r0
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d102      	bne.n	8004e2e <main+0xa2>
      {
    	  i++;
 8004e28:	69fb      	ldr	r3, [r7, #28]
 8004e2a:	3301      	adds	r3, #1
 8004e2c:	61fb      	str	r3, [r7, #28]
  while(HAL_GetTick() < time + 1000)
 8004e2e:	f000 fcd9 	bl	80057e4 <HAL_GetTick>
 8004e32:	4602      	mov	r2, r0
 8004e34:	693b      	ldr	r3, [r7, #16]
 8004e36:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8004e3a:	429a      	cmp	r2, r3
 8004e3c:	d3e2      	bcc.n	8004e04 <main+0x78>
      }
  }
  /***********Motion Sensor Test********/
  BSP_MotionSensorInit();
 8004e3e:	f7fc faa3 	bl	8001388 <BSP_MotionSensorInit>
  time = HAL_GetTick();
 8004e42:	f000 fccf 	bl	80057e4 <HAL_GetTick>
 8004e46:	6138      	str	r0, [r7, #16]
  i = 0;
 8004e48:	2300      	movs	r3, #0
 8004e4a:	61fb      	str	r3, [r7, #28]
  j = 0;
 8004e4c:	2300      	movs	r3, #0
 8004e4e:	61bb      	str	r3, [r7, #24]
  while(HAL_GetTick() < time + 1000)
 8004e50:	e029      	b.n	8004ea6 <main+0x11a>
  {
    if(BSP_ReadAccelXYZ(&AccelX[i], &AccelY[i], &AccelZ[i]) == 0)
 8004e52:	69fb      	ldr	r3, [r7, #28]
 8004e54:	009b      	lsls	r3, r3, #2
 8004e56:	4a31      	ldr	r2, [pc, #196]	; (8004f1c <main+0x190>)
 8004e58:	1898      	adds	r0, r3, r2
 8004e5a:	69fb      	ldr	r3, [r7, #28]
 8004e5c:	009b      	lsls	r3, r3, #2
 8004e5e:	4a30      	ldr	r2, [pc, #192]	; (8004f20 <main+0x194>)
 8004e60:	1899      	adds	r1, r3, r2
 8004e62:	69fb      	ldr	r3, [r7, #28]
 8004e64:	009b      	lsls	r3, r3, #2
 8004e66:	4a2f      	ldr	r2, [pc, #188]	; (8004f24 <main+0x198>)
 8004e68:	4413      	add	r3, r2
 8004e6a:	461a      	mov	r2, r3
 8004e6c:	f7fc fb0c 	bl	8001488 <BSP_ReadAccelXYZ>
 8004e70:	4603      	mov	r3, r0
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d102      	bne.n	8004e7c <main+0xf0>
    {
    	i++;
 8004e76:	69fb      	ldr	r3, [r7, #28]
 8004e78:	3301      	adds	r3, #1
 8004e7a:	61fb      	str	r3, [r7, #28]
    }
    if(BSP_ReadGyroXYZ(&GyroX[j], &GyroY[j], &GyroZ[j]) == 0)
 8004e7c:	69bb      	ldr	r3, [r7, #24]
 8004e7e:	009b      	lsls	r3, r3, #2
 8004e80:	4a29      	ldr	r2, [pc, #164]	; (8004f28 <main+0x19c>)
 8004e82:	1898      	adds	r0, r3, r2
 8004e84:	69bb      	ldr	r3, [r7, #24]
 8004e86:	009b      	lsls	r3, r3, #2
 8004e88:	4a28      	ldr	r2, [pc, #160]	; (8004f2c <main+0x1a0>)
 8004e8a:	1899      	adds	r1, r3, r2
 8004e8c:	69bb      	ldr	r3, [r7, #24]
 8004e8e:	009b      	lsls	r3, r3, #2
 8004e90:	4a27      	ldr	r2, [pc, #156]	; (8004f30 <main+0x1a4>)
 8004e92:	4413      	add	r3, r2
 8004e94:	461a      	mov	r2, r3
 8004e96:	f7fc fb13 	bl	80014c0 <BSP_ReadGyroXYZ>
 8004e9a:	4603      	mov	r3, r0
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d102      	bne.n	8004ea6 <main+0x11a>
    {
    	j++;
 8004ea0:	69bb      	ldr	r3, [r7, #24]
 8004ea2:	3301      	adds	r3, #1
 8004ea4:	61bb      	str	r3, [r7, #24]
  while(HAL_GetTick() < time + 1000)
 8004ea6:	f000 fc9d 	bl	80057e4 <HAL_GetTick>
 8004eaa:	4602      	mov	r2, r0
 8004eac:	693b      	ldr	r3, [r7, #16]
 8004eae:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8004eb2:	429a      	cmp	r2, r3
 8004eb4:	d3cd      	bcc.n	8004e52 <main+0xc6>
    }
  }

  /***********Pressure Sensor Test********/
  BSP_PressureSensorInit();
 8004eb6:	f7fc f9e3 	bl	8001280 <BSP_PressureSensorInit>
  time = HAL_GetTick();
 8004eba:	f000 fc93 	bl	80057e4 <HAL_GetTick>
 8004ebe:	6138      	str	r0, [r7, #16]
  i = 0;
 8004ec0:	2300      	movs	r3, #0
 8004ec2:	61fb      	str	r3, [r7, #28]
  while(HAL_GetTick() < time + 5000){
 8004ec4:	e00c      	b.n	8004ee0 <main+0x154>
    if(BSP_ReadPressure(&Pressure[i]) == 0)
 8004ec6:	69fb      	ldr	r3, [r7, #28]
 8004ec8:	009b      	lsls	r3, r3, #2
 8004eca:	4a1a      	ldr	r2, [pc, #104]	; (8004f34 <main+0x1a8>)
 8004ecc:	4413      	add	r3, r2
 8004ece:	4618      	mov	r0, r3
 8004ed0:	f7fc fa06 	bl	80012e0 <BSP_ReadPressure>
 8004ed4:	4603      	mov	r3, r0
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d102      	bne.n	8004ee0 <main+0x154>
    {
    	i++;
 8004eda:	69fb      	ldr	r3, [r7, #28]
 8004edc:	3301      	adds	r3, #1
 8004ede:	61fb      	str	r3, [r7, #28]
  while(HAL_GetTick() < time + 5000){
 8004ee0:	f000 fc80 	bl	80057e4 <HAL_GetTick>
 8004ee4:	4602      	mov	r2, r0
 8004ee6:	693b      	ldr	r3, [r7, #16]
 8004ee8:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 8004eec:	3308      	adds	r3, #8
 8004eee:	429a      	cmp	r2, r3
 8004ef0:	d3e9      	bcc.n	8004ec6 <main+0x13a>
    }
  }
  /***********Camera Test********/
  BSP_RamInit();
 8004ef2:	f7fc fb01 	bl	80014f8 <BSP_RamInit>
  BSP_RamErase();
 8004ef6:	f7fc fb0b 	bl	8001510 <BSP_RamErase>
  BSP_CameraInit();
 8004efa:	f7fc f900 	bl	80010fe <BSP_CameraInit>
  BSP_CameraStart((uint8_t*)CameraBuff);
 8004efe:	4b0e      	ldr	r3, [pc, #56]	; (8004f38 <main+0x1ac>)
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	4618      	mov	r0, r3
 8004f04:	f7fc f90a 	bl	800111c <BSP_CameraStart>

  /* USER CODE END 2 */

  MX_ThreadX_Init();
 8004f08:	f7fe ff76 	bl	8003df8 <MX_ThreadX_Init>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
 8004f0c:	e7fe      	b.n	8004f0c <main+0x180>
 8004f0e:	bf00      	nop
 8004f10:	20001ac8 	.word	0x20001ac8
 8004f14:	20001b90 	.word	0x20001b90
 8004f18:	20001c58 	.word	0x20001c58
 8004f1c:	20001550 	.word	0x20001550
 8004f20:	20001618 	.word	0x20001618
 8004f24:	200016e0 	.word	0x200016e0
 8004f28:	200017a8 	.word	0x200017a8
 8004f2c:	20001870 	.word	0x20001870
 8004f30:	20001938 	.word	0x20001938
 8004f34:	20001a00 	.word	0x20001a00
 8004f38:	20000000 	.word	0x20000000

08004f3c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004f3c:	b580      	push	{r7, lr}
 8004f3e:	b09e      	sub	sp, #120	; 0x78
 8004f40:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004f42:	f107 0318 	add.w	r3, r7, #24
 8004f46:	2260      	movs	r2, #96	; 0x60
 8004f48:	2100      	movs	r1, #0
 8004f4a:	4618      	mov	r0, r3
 8004f4c:	f009 fc0e 	bl	800e76c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004f50:	463b      	mov	r3, r7
 8004f52:	2200      	movs	r2, #0
 8004f54:	601a      	str	r2, [r3, #0]
 8004f56:	605a      	str	r2, [r3, #4]
 8004f58:	609a      	str	r2, [r3, #8]
 8004f5a:	60da      	str	r2, [r3, #12]
 8004f5c:	611a      	str	r2, [r3, #16]
 8004f5e:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8004f60:	f44f 3040 	mov.w	r0, #196608	; 0x30000
 8004f64:	f004 feea 	bl	8009d3c <HAL_PWREx_ControlVoltageScaling>
 8004f68:	4603      	mov	r3, r0
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d001      	beq.n	8004f72 <SystemClock_Config+0x36>
  {
    Error_Handler();
 8004f6e:	f000 f861 	bl	8005034 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8004f72:	2310      	movs	r3, #16
 8004f74:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8004f76:	2301      	movs	r3, #1
 8004f78:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8004f7a:	2310      	movs	r3, #16
 8004f7c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_4;
 8004f7e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004f82:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004f84:	2302      	movs	r3, #2
 8004f86:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8004f88:	2301      	movs	r3, #1
 8004f8a:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLMBOOST = RCC_PLLMBOOST_DIV1;
 8004f8c:	2300      	movs	r3, #0
 8004f8e:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8004f90:	2301      	movs	r3, #1
 8004f92:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 80;
 8004f94:	2350      	movs	r3, #80	; 0x50
 8004f96:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLP = 2;
 8004f98:	2302      	movs	r3, #2
 8004f9a:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8004f9c:	2302      	movs	r3, #2
 8004f9e:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLR = 2;
 8004fa0:	2302      	movs	r3, #2
 8004fa2:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLLVCIRANGE_0;
 8004fa4:	2300      	movs	r3, #0
 8004fa6:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8004fa8:	2300      	movs	r3, #0
 8004faa:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004fac:	f107 0318 	add.w	r3, r7, #24
 8004fb0:	4618      	mov	r0, r3
 8004fb2:	f004 ffa5 	bl	8009f00 <HAL_RCC_OscConfig>
 8004fb6:	4603      	mov	r3, r0
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d001      	beq.n	8004fc0 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8004fbc:	f000 f83a 	bl	8005034 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004fc0:	231f      	movs	r3, #31
 8004fc2:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004fc4:	2303      	movs	r3, #3
 8004fc6:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004fc8:	2300      	movs	r3, #0
 8004fca:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8004fcc:	2300      	movs	r3, #0
 8004fce:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004fd0:	2300      	movs	r3, #0
 8004fd2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 8004fd4:	2300      	movs	r3, #0
 8004fd6:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8004fd8:	463b      	mov	r3, r7
 8004fda:	2104      	movs	r1, #4
 8004fdc:	4618      	mov	r0, r3
 8004fde:	f005 fe65 	bl	800acac <HAL_RCC_ClockConfig>
 8004fe2:	4603      	mov	r3, r0
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d001      	beq.n	8004fec <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8004fe8:	f000 f824 	bl	8005034 <Error_Handler>
  }
}
 8004fec:	bf00      	nop
 8004fee:	3778      	adds	r7, #120	; 0x78
 8004ff0:	46bd      	mov	sp, r7
 8004ff2:	bd80      	pop	{r7, pc}

08004ff4 <SystemPower_Config>:
/**
  * @brief Power Configuration
  * @retval None
  */
static void SystemPower_Config(void)
{
 8004ff4:	b580      	push	{r7, lr}
 8004ff6:	af00      	add	r7, sp, #0
  HAL_PWREx_EnableVddIO2();
 8004ff8:	f004 ff72 	bl	8009ee0 <HAL_PWREx_EnableVddIO2>

  /*
   * Switch to SMPS regulator instead of LDO
   */
  if (HAL_PWREx_ConfigSupply(PWR_SMPS_SUPPLY) != HAL_OK)
 8004ffc:	2002      	movs	r0, #2
 8004ffe:	f004 ff1f 	bl	8009e40 <HAL_PWREx_ConfigSupply>
 8005002:	4603      	mov	r3, r0
 8005004:	2b00      	cmp	r3, #0
 8005006:	d001      	beq.n	800500c <SystemPower_Config+0x18>
  {
    Error_Handler();
 8005008:	f000 f814 	bl	8005034 <Error_Handler>
  }
}
 800500c:	bf00      	nop
 800500e:	bd80      	pop	{r7, pc}

08005010 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005010:	b580      	push	{r7, lr}
 8005012:	b082      	sub	sp, #8
 8005014:	af00      	add	r7, sp, #0
 8005016:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	4a04      	ldr	r2, [pc, #16]	; (8005030 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800501e:	4293      	cmp	r3, r2
 8005020:	d101      	bne.n	8005026 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8005022:	f000 fbcb 	bl	80057bc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8005026:	bf00      	nop
 8005028:	3708      	adds	r7, #8
 800502a:	46bd      	mov	sp, r7
 800502c:	bd80      	pop	{r7, pc}
 800502e:	bf00      	nop
 8005030:	40001000 	.word	0x40001000

08005034 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005034:	b480      	push	{r7}
 8005036:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8005038:	b672      	cpsid	i
}
 800503a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800503c:	e7fe      	b.n	800503c <Error_Handler+0x8>
	...

08005040 <HAL_OSPI_MspInit>:
  /* USER CODE END OCTOSPI1_Init 2 */

}

void HAL_OSPI_MspInit(OSPI_HandleTypeDef* ospiHandle)
{
 8005040:	b580      	push	{r7, lr}
 8005042:	b0c4      	sub	sp, #272	; 0x110
 8005044:	af00      	add	r7, sp, #0
 8005046:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800504a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800504e:	6018      	str	r0, [r3, #0]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005050:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8005054:	2200      	movs	r2, #0
 8005056:	601a      	str	r2, [r3, #0]
 8005058:	605a      	str	r2, [r3, #4]
 800505a:	609a      	str	r2, [r3, #8]
 800505c:	60da      	str	r2, [r3, #12]
 800505e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8005060:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005064:	22c8      	movs	r2, #200	; 0xc8
 8005066:	2100      	movs	r1, #0
 8005068:	4618      	mov	r0, r3
 800506a:	f009 fb7f 	bl	800e76c <memset>
  if(ospiHandle->Instance==OCTOSPI1)
 800506e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005072:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	4aa4      	ldr	r2, [pc, #656]	; (800530c <HAL_OSPI_MspInit+0x2cc>)
 800507c:	4293      	cmp	r3, r2
 800507e:	f040 813f 	bne.w	8005300 <HAL_OSPI_MspInit+0x2c0>

  /* USER CODE END OCTOSPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_OSPI;
 8005082:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8005086:	f04f 0300 	mov.w	r3, #0
 800508a:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    PeriphClkInit.OspiClockSelection = RCC_OSPICLKSOURCE_SYSCLK;
 800508e:	2300      	movs	r3, #0
 8005090:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005094:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005098:	4618      	mov	r0, r3
 800509a:	f006 f9ed 	bl	800b478 <HAL_RCCEx_PeriphCLKConfig>
 800509e:	4603      	mov	r3, r0
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d001      	beq.n	80050a8 <HAL_OSPI_MspInit+0x68>
    {
      Error_Handler();
 80050a4:	f7ff ffc6 	bl	8005034 <Error_Handler>
    }

    /* OCTOSPI1 clock enable */
    __HAL_RCC_OSPIM_CLK_ENABLE();
 80050a8:	4b99      	ldr	r3, [pc, #612]	; (8005310 <HAL_OSPI_MspInit+0x2d0>)
 80050aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80050ae:	4a98      	ldr	r2, [pc, #608]	; (8005310 <HAL_OSPI_MspInit+0x2d0>)
 80050b0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80050b4:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80050b8:	4b95      	ldr	r3, [pc, #596]	; (8005310 <HAL_OSPI_MspInit+0x2d0>)
 80050ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80050be:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80050c2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80050c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    __HAL_RCC_OSPI1_CLK_ENABLE();
 80050c6:	4b92      	ldr	r3, [pc, #584]	; (8005310 <HAL_OSPI_MspInit+0x2d0>)
 80050c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050cc:	4a90      	ldr	r2, [pc, #576]	; (8005310 <HAL_OSPI_MspInit+0x2d0>)
 80050ce:	f043 0310 	orr.w	r3, r3, #16
 80050d2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80050d6:	4b8e      	ldr	r3, [pc, #568]	; (8005310 <HAL_OSPI_MspInit+0x2d0>)
 80050d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050dc:	f003 0310 	and.w	r3, r3, #16
 80050e0:	62bb      	str	r3, [r7, #40]	; 0x28
 80050e2:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOI_CLK_ENABLE();
 80050e4:	4b8a      	ldr	r3, [pc, #552]	; (8005310 <HAL_OSPI_MspInit+0x2d0>)
 80050e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80050ea:	4a89      	ldr	r2, [pc, #548]	; (8005310 <HAL_OSPI_MspInit+0x2d0>)
 80050ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80050f0:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80050f4:	4b86      	ldr	r3, [pc, #536]	; (8005310 <HAL_OSPI_MspInit+0x2d0>)
 80050f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80050fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050fe:	627b      	str	r3, [r7, #36]	; 0x24
 8005100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8005102:	4b83      	ldr	r3, [pc, #524]	; (8005310 <HAL_OSPI_MspInit+0x2d0>)
 8005104:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005108:	4a81      	ldr	r2, [pc, #516]	; (8005310 <HAL_OSPI_MspInit+0x2d0>)
 800510a:	f043 0310 	orr.w	r3, r3, #16
 800510e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8005112:	4b7f      	ldr	r3, [pc, #508]	; (8005310 <HAL_OSPI_MspInit+0x2d0>)
 8005114:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005118:	f003 0310 	and.w	r3, r3, #16
 800511c:	623b      	str	r3, [r7, #32]
 800511e:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8005120:	4b7b      	ldr	r3, [pc, #492]	; (8005310 <HAL_OSPI_MspInit+0x2d0>)
 8005122:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005126:	4a7a      	ldr	r2, [pc, #488]	; (8005310 <HAL_OSPI_MspInit+0x2d0>)
 8005128:	f043 0308 	orr.w	r3, r3, #8
 800512c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8005130:	4b77      	ldr	r3, [pc, #476]	; (8005310 <HAL_OSPI_MspInit+0x2d0>)
 8005132:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005136:	f003 0308 	and.w	r3, r3, #8
 800513a:	61fb      	str	r3, [r7, #28]
 800513c:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800513e:	4b74      	ldr	r3, [pc, #464]	; (8005310 <HAL_OSPI_MspInit+0x2d0>)
 8005140:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005144:	4a72      	ldr	r2, [pc, #456]	; (8005310 <HAL_OSPI_MspInit+0x2d0>)
 8005146:	f043 0320 	orr.w	r3, r3, #32
 800514a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800514e:	4b70      	ldr	r3, [pc, #448]	; (8005310 <HAL_OSPI_MspInit+0x2d0>)
 8005150:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005154:	f003 0320 	and.w	r3, r3, #32
 8005158:	61bb      	str	r3, [r7, #24]
 800515a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 800515c:	4b6c      	ldr	r3, [pc, #432]	; (8005310 <HAL_OSPI_MspInit+0x2d0>)
 800515e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005162:	4a6b      	ldr	r2, [pc, #428]	; (8005310 <HAL_OSPI_MspInit+0x2d0>)
 8005164:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005168:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800516c:	4b68      	ldr	r3, [pc, #416]	; (8005310 <HAL_OSPI_MspInit+0x2d0>)
 800516e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005172:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005176:	617b      	str	r3, [r7, #20]
 8005178:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800517a:	4b65      	ldr	r3, [pc, #404]	; (8005310 <HAL_OSPI_MspInit+0x2d0>)
 800517c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005180:	4a63      	ldr	r2, [pc, #396]	; (8005310 <HAL_OSPI_MspInit+0x2d0>)
 8005182:	f043 0304 	orr.w	r3, r3, #4
 8005186:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800518a:	4b61      	ldr	r3, [pc, #388]	; (8005310 <HAL_OSPI_MspInit+0x2d0>)
 800518c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005190:	f003 0204 	and.w	r2, r3, #4
 8005194:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005198:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800519c:	601a      	str	r2, [r3, #0]
 800519e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80051a2:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80051a6:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80051a8:	4b59      	ldr	r3, [pc, #356]	; (8005310 <HAL_OSPI_MspInit+0x2d0>)
 80051aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80051ae:	4a58      	ldr	r2, [pc, #352]	; (8005310 <HAL_OSPI_MspInit+0x2d0>)
 80051b0:	f043 0302 	orr.w	r3, r3, #2
 80051b4:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80051b8:	4b55      	ldr	r3, [pc, #340]	; (8005310 <HAL_OSPI_MspInit+0x2d0>)
 80051ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80051be:	f003 0202 	and.w	r2, r3, #2
 80051c2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80051c6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80051ca:	601a      	str	r2, [r3, #0]
 80051cc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80051d0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80051d4:	681b      	ldr	r3, [r3, #0]
    PF6     ------> OCTOSPIM_P1_IO3
    PC3     ------> OCTOSPIM_P1_IO6
    PB10     ------> OCTOSPIM_P1_CLK
    PB11     ------> OCTOSPIM_P1_NCS
    */
    GPIO_InitStruct.Pin = OCTOSPI_R_IO5_Pin;
 80051d6:	2301      	movs	r3, #1
 80051d8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80051dc:	2302      	movs	r3, #2
 80051de:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80051e2:	2300      	movs	r3, #0
 80051e4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80051e8:	2303      	movs	r3, #3
 80051ea:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    GPIO_InitStruct.Alternate = GPIO_AF3_OCTOSPI1;
 80051ee:	2303      	movs	r3, #3
 80051f0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    HAL_GPIO_Init(OCTOSPI_R_IO5_GPIO_Port, &GPIO_InitStruct);
 80051f4:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80051f8:	4619      	mov	r1, r3
 80051fa:	4846      	ldr	r0, [pc, #280]	; (8005314 <HAL_OSPI_MspInit+0x2d4>)
 80051fc:	f002 f9fc 	bl	80075f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OCTOSPI_R_DQS_Pin;
 8005200:	2308      	movs	r3, #8
 8005202:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005206:	2302      	movs	r3, #2
 8005208:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800520c:	2300      	movs	r3, #0
 800520e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005212:	2303      	movs	r3, #3
 8005214:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    GPIO_InitStruct.Alternate = GPIO_AF3_OCTOSPI1;
 8005218:	2303      	movs	r3, #3
 800521a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    HAL_GPIO_Init(OCTOSPI_R_DQS_GPIO_Port, &GPIO_InitStruct);
 800521e:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8005222:	4619      	mov	r1, r3
 8005224:	483c      	ldr	r0, [pc, #240]	; (8005318 <HAL_OSPI_MspInit+0x2d8>)
 8005226:	f002 f9e7 	bl	80075f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OCTOSPI_R_IO7_Pin;
 800522a:	2380      	movs	r3, #128	; 0x80
 800522c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005230:	2302      	movs	r3, #2
 8005232:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005236:	2300      	movs	r3, #0
 8005238:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800523c:	2303      	movs	r3, #3
 800523e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPI1;
 8005242:	230a      	movs	r3, #10
 8005244:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    HAL_GPIO_Init(OCTOSPI_R_IO7_GPIO_Port, &GPIO_InitStruct);
 8005248:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 800524c:	4619      	mov	r1, r3
 800524e:	4833      	ldr	r0, [pc, #204]	; (800531c <HAL_OSPI_MspInit+0x2dc>)
 8005250:	f002 f9d2 	bl	80075f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OCTOSPI_R_IO0_Pin|OCTOSPI_R_IO2_Pin|OCTOSPI_R_IO1_Pin|OCTOSPI_R_IO3_Pin;
 8005254:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8005258:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800525c:	2302      	movs	r3, #2
 800525e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005262:	2300      	movs	r3, #0
 8005264:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005268:	2303      	movs	r3, #3
 800526a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPI1;
 800526e:	230a      	movs	r3, #10
 8005270:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8005274:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8005278:	4619      	mov	r1, r3
 800527a:	4829      	ldr	r0, [pc, #164]	; (8005320 <HAL_OSPI_MspInit+0x2e0>)
 800527c:	f002 f9bc 	bl	80075f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OCTOSPI_R_IO4_Pin;
 8005280:	2304      	movs	r3, #4
 8005282:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005286:	2302      	movs	r3, #2
 8005288:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800528c:	2300      	movs	r3, #0
 800528e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005292:	2303      	movs	r3, #3
 8005294:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    GPIO_InitStruct.Alternate = GPIO_AF3_OCTOSPI1;
 8005298:	2303      	movs	r3, #3
 800529a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    HAL_GPIO_Init(OCTOSPI_R_IO4_GPIO_Port, &GPIO_InitStruct);
 800529e:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80052a2:	4619      	mov	r1, r3
 80052a4:	481f      	ldr	r0, [pc, #124]	; (8005324 <HAL_OSPI_MspInit+0x2e4>)
 80052a6:	f002 f9a7 	bl	80075f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OCTOSPI_R_IO6_Pin;
 80052aa:	2308      	movs	r3, #8
 80052ac:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80052b0:	2302      	movs	r3, #2
 80052b2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80052b6:	2300      	movs	r3, #0
 80052b8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80052bc:	2303      	movs	r3, #3
 80052be:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPI1;
 80052c2:	230a      	movs	r3, #10
 80052c4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    HAL_GPIO_Init(OCTOSPI_R_IO6_GPIO_Port, &GPIO_InitStruct);
 80052c8:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80052cc:	4619      	mov	r1, r3
 80052ce:	4816      	ldr	r0, [pc, #88]	; (8005328 <HAL_OSPI_MspInit+0x2e8>)
 80052d0:	f002 f992 	bl	80075f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OCTOSPI_R_CLK_P_Pin|OCTOSPI_R_NCS_Pin;
 80052d4:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80052d8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80052dc:	2302      	movs	r3, #2
 80052de:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80052e2:	2300      	movs	r3, #0
 80052e4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80052e8:	2303      	movs	r3, #3
 80052ea:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPI1;
 80052ee:	230a      	movs	r3, #10
 80052f0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80052f4:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80052f8:	4619      	mov	r1, r3
 80052fa:	480c      	ldr	r0, [pc, #48]	; (800532c <HAL_OSPI_MspInit+0x2ec>)
 80052fc:	f002 f97c 	bl	80075f8 <HAL_GPIO_Init>

  /* USER CODE BEGIN OCTOSPI1_MspInit 1 */

  /* USER CODE END OCTOSPI1_MspInit 1 */
  }
}
 8005300:	bf00      	nop
 8005302:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8005306:	46bd      	mov	sp, r7
 8005308:	bd80      	pop	{r7, pc}
 800530a:	bf00      	nop
 800530c:	420d1400 	.word	0x420d1400
 8005310:	46020c00 	.word	0x46020c00
 8005314:	42022000 	.word	0x42022000
 8005318:	42021000 	.word	0x42021000
 800531c:	42020c00 	.word	0x42020c00
 8005320:	42021400 	.word	0x42021400
 8005324:	42021c00 	.word	0x42021c00
 8005328:	42020800 	.word	0x42020800
 800532c:	42020400 	.word	0x42020400

08005330 <OSPI_RamInit>:
  /* USER CODE END OCTOSPI1_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void OSPI_RamInit(void){
 8005330:	b580      	push	{r7, lr}
 8005332:	b088      	sub	sp, #32
 8005334:	af00      	add	r7, sp, #0
	  OSPIM_CfgTypeDef sOspiManagerCfg = {0};
 8005336:	f107 0308 	add.w	r3, r7, #8
 800533a:	2200      	movs	r2, #0
 800533c:	601a      	str	r2, [r3, #0]
 800533e:	605a      	str	r2, [r3, #4]
 8005340:	609a      	str	r2, [r3, #8]
 8005342:	60da      	str	r2, [r3, #12]
 8005344:	611a      	str	r2, [r3, #16]
 8005346:	615a      	str	r2, [r3, #20]
	  HAL_OSPI_DLYB_CfgTypeDef HAL_OSPI_DLYB_Cfg_Struct = {0};
 8005348:	463b      	mov	r3, r7
 800534a:	2200      	movs	r2, #0
 800534c:	601a      	str	r2, [r3, #0]
 800534e:	605a      	str	r2, [r3, #4]

	  hospi1.Instance = OCTOSPI1;
 8005350:	4b2a      	ldr	r3, [pc, #168]	; (80053fc <OSPI_RamInit+0xcc>)
 8005352:	4a2b      	ldr	r2, [pc, #172]	; (8005400 <OSPI_RamInit+0xd0>)
 8005354:	601a      	str	r2, [r3, #0]
	  hospi1.Init.FifoThreshold = 1;
 8005356:	4b29      	ldr	r3, [pc, #164]	; (80053fc <OSPI_RamInit+0xcc>)
 8005358:	2201      	movs	r2, #1
 800535a:	605a      	str	r2, [r3, #4]
	  hospi1.Init.DualQuad = HAL_OSPI_DUALQUAD_DISABLE;
 800535c:	4b27      	ldr	r3, [pc, #156]	; (80053fc <OSPI_RamInit+0xcc>)
 800535e:	2200      	movs	r2, #0
 8005360:	609a      	str	r2, [r3, #8]
	  hospi1.Init.MemoryType = HAL_OSPI_MEMTYPE_APMEMORY;
 8005362:	4b26      	ldr	r3, [pc, #152]	; (80053fc <OSPI_RamInit+0xcc>)
 8005364:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005368:	60da      	str	r2, [r3, #12]
	  hospi1.Init.DeviceSize = 23;
 800536a:	4b24      	ldr	r3, [pc, #144]	; (80053fc <OSPI_RamInit+0xcc>)
 800536c:	2217      	movs	r2, #23
 800536e:	611a      	str	r2, [r3, #16]
	  hospi1.Init.ChipSelectHighTime = 1;
 8005370:	4b22      	ldr	r3, [pc, #136]	; (80053fc <OSPI_RamInit+0xcc>)
 8005372:	2201      	movs	r2, #1
 8005374:	615a      	str	r2, [r3, #20]
	  hospi1.Init.FreeRunningClock = HAL_OSPI_FREERUNCLK_DISABLE;
 8005376:	4b21      	ldr	r3, [pc, #132]	; (80053fc <OSPI_RamInit+0xcc>)
 8005378:	2200      	movs	r2, #0
 800537a:	619a      	str	r2, [r3, #24]
	  hospi1.Init.ClockMode = HAL_OSPI_CLOCK_MODE_0;
 800537c:	4b1f      	ldr	r3, [pc, #124]	; (80053fc <OSPI_RamInit+0xcc>)
 800537e:	2200      	movs	r2, #0
 8005380:	61da      	str	r2, [r3, #28]
	  hospi1.Init.WrapSize = HAL_OSPI_WRAP_NOT_SUPPORTED;
 8005382:	4b1e      	ldr	r3, [pc, #120]	; (80053fc <OSPI_RamInit+0xcc>)
 8005384:	2200      	movs	r2, #0
 8005386:	621a      	str	r2, [r3, #32]
	  hospi1.Init.ClockPrescaler = 2;
 8005388:	4b1c      	ldr	r3, [pc, #112]	; (80053fc <OSPI_RamInit+0xcc>)
 800538a:	2202      	movs	r2, #2
 800538c:	625a      	str	r2, [r3, #36]	; 0x24
	  hospi1.Init.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 800538e:	4b1b      	ldr	r3, [pc, #108]	; (80053fc <OSPI_RamInit+0xcc>)
 8005390:	2200      	movs	r2, #0
 8005392:	629a      	str	r2, [r3, #40]	; 0x28
	  hospi1.Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_ENABLE;
 8005394:	4b19      	ldr	r3, [pc, #100]	; (80053fc <OSPI_RamInit+0xcc>)
 8005396:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800539a:	62da      	str	r2, [r3, #44]	; 0x2c
	  hospi1.Init.ChipSelectBoundary = 0;
 800539c:	4b17      	ldr	r3, [pc, #92]	; (80053fc <OSPI_RamInit+0xcc>)
 800539e:	2200      	movs	r2, #0
 80053a0:	631a      	str	r2, [r3, #48]	; 0x30
	  hospi1.Init.DelayBlockBypass = HAL_OSPI_DELAY_BLOCK_USED;
 80053a2:	4b16      	ldr	r3, [pc, #88]	; (80053fc <OSPI_RamInit+0xcc>)
 80053a4:	2200      	movs	r2, #0
 80053a6:	635a      	str	r2, [r3, #52]	; 0x34
	  hospi1.Init.MaxTran = 0;
 80053a8:	4b14      	ldr	r3, [pc, #80]	; (80053fc <OSPI_RamInit+0xcc>)
 80053aa:	2200      	movs	r2, #0
 80053ac:	639a      	str	r2, [r3, #56]	; 0x38
	  hospi1.Init.Refresh = 320;
 80053ae:	4b13      	ldr	r3, [pc, #76]	; (80053fc <OSPI_RamInit+0xcc>)
 80053b0:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80053b4:	63da      	str	r2, [r3, #60]	; 0x3c
	  HAL_OSPI_Init(&hospi1);
 80053b6:	4811      	ldr	r0, [pc, #68]	; (80053fc <OSPI_RamInit+0xcc>)
 80053b8:	f003 fa78 	bl	80088ac <HAL_OSPI_Init>

	  sOspiManagerCfg.ClkPort = 1;
 80053bc:	2301      	movs	r3, #1
 80053be:	60bb      	str	r3, [r7, #8]
	  sOspiManagerCfg.DQSPort = 1;
 80053c0:	2301      	movs	r3, #1
 80053c2:	60fb      	str	r3, [r7, #12]
	  sOspiManagerCfg.NCSPort = 1;
 80053c4:	2301      	movs	r3, #1
 80053c6:	613b      	str	r3, [r7, #16]
	  sOspiManagerCfg.IOLowPort = HAL_OSPIM_IOPORT_1_LOW;
 80053c8:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 80053cc:	617b      	str	r3, [r7, #20]
	  sOspiManagerCfg.IOHighPort = HAL_OSPIM_IOPORT_1_HIGH;
 80053ce:	4b0d      	ldr	r3, [pc, #52]	; (8005404 <OSPI_RamInit+0xd4>)
 80053d0:	61bb      	str	r3, [r7, #24]
	  HAL_OSPIM_Config(&hospi1, &sOspiManagerCfg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE);
 80053d2:	f107 0308 	add.w	r3, r7, #8
 80053d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80053da:	4619      	mov	r1, r3
 80053dc:	4807      	ldr	r0, [pc, #28]	; (80053fc <OSPI_RamInit+0xcc>)
 80053de:	f003 fc7f 	bl	8008ce0 <HAL_OSPIM_Config>

	  HAL_OSPI_DLYB_Cfg_Struct.Units = 0;
 80053e2:	2300      	movs	r3, #0
 80053e4:	603b      	str	r3, [r7, #0]
	  HAL_OSPI_DLYB_Cfg_Struct.PhaseSel = 0;
 80053e6:	2300      	movs	r3, #0
 80053e8:	607b      	str	r3, [r7, #4]
	  HAL_OSPI_DLYB_SetConfig(&hospi1, &HAL_OSPI_DLYB_Cfg_Struct);
 80053ea:	463b      	mov	r3, r7
 80053ec:	4619      	mov	r1, r3
 80053ee:	4803      	ldr	r0, [pc, #12]	; (80053fc <OSPI_RamInit+0xcc>)
 80053f0:	f004 fbdc 	bl	8009bac <HAL_OSPI_DLYB_SetConfig>


}
 80053f4:	bf00      	nop
 80053f6:	3720      	adds	r7, #32
 80053f8:	46bd      	mov	sp, r7
 80053fa:	bd80      	pop	{r7, pc}
 80053fc:	20001d20 	.word	0x20001d20
 8005400:	420d1400 	.word	0x420d1400
 8005404:	01000001 	.word	0x01000001

08005408 <OSPI_EnableMemMappedMode>:

void OSPI_EnableMemMappedMode(void){
 8005408:	b580      	push	{r7, lr}
 800540a:	b096      	sub	sp, #88	; 0x58
 800540c:	af00      	add	r7, sp, #0
	OSPI_RegularCmdTypeDef sCommand;
	OSPI_MemoryMappedTypeDef sMemMappedCfg;
	  sCommand.OperationType      = HAL_OSPI_OPTYPE_WRITE_CFG;
 800540e:	2302      	movs	r3, #2
 8005410:	60bb      	str	r3, [r7, #8]
	  sCommand.FlashId            = HAL_OSPI_FLASH_ID_1;
 8005412:	2300      	movs	r3, #0
 8005414:	60fb      	str	r3, [r7, #12]
	  sCommand.Instruction        = WRITE_CMD;
 8005416:	2380      	movs	r3, #128	; 0x80
 8005418:	613b      	str	r3, [r7, #16]
	  sCommand.InstructionMode    = HAL_OSPI_INSTRUCTION_8_LINES;
 800541a:	2304      	movs	r3, #4
 800541c:	617b      	str	r3, [r7, #20]
	  sCommand.InstructionSize    = HAL_OSPI_INSTRUCTION_8_BITS;
 800541e:	2300      	movs	r3, #0
 8005420:	61bb      	str	r3, [r7, #24]
	  sCommand.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8005422:	2300      	movs	r3, #0
 8005424:	61fb      	str	r3, [r7, #28]
	  sCommand.AddressMode        = HAL_OSPI_ADDRESS_8_LINES;
 8005426:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800542a:	627b      	str	r3, [r7, #36]	; 0x24
	  sCommand.AddressSize        = HAL_OSPI_ADDRESS_32_BITS;
 800542c:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8005430:	62bb      	str	r3, [r7, #40]	; 0x28
	  sCommand.AddressDtrMode     = HAL_OSPI_ADDRESS_DTR_ENABLE;
 8005432:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005436:	62fb      	str	r3, [r7, #44]	; 0x2c
	  sCommand.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 8005438:	2300      	movs	r3, #0
 800543a:	637b      	str	r3, [r7, #52]	; 0x34
	  sCommand.DataMode           = HAL_OSPI_DATA_8_LINES;
 800543c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8005440:	643b      	str	r3, [r7, #64]	; 0x40
	  sCommand.DataDtrMode        = HAL_OSPI_DATA_DTR_ENABLE;
 8005442:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005446:	64bb      	str	r3, [r7, #72]	; 0x48
	  sCommand.DummyCycles        = DUMMY_CLOCK_CYCLES_WRITE;
 8005448:	2304      	movs	r3, #4
 800544a:	64fb      	str	r3, [r7, #76]	; 0x4c
	  sCommand.DQSMode            = HAL_OSPI_DQS_ENABLE;
 800544c:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8005450:	653b      	str	r3, [r7, #80]	; 0x50
	  sCommand.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 8005452:	2300      	movs	r3, #0
 8005454:	657b      	str	r3, [r7, #84]	; 0x54

	  if (HAL_OSPI_Command(&hospi1, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005456:	f107 0308 	add.w	r3, r7, #8
 800545a:	f241 3288 	movw	r2, #5000	; 0x1388
 800545e:	4619      	mov	r1, r3
 8005460:	4816      	ldr	r0, [pc, #88]	; (80054bc <OSPI_EnableMemMappedMode+0xb4>)
 8005462:	f003 fadf 	bl	8008a24 <HAL_OSPI_Command>
 8005466:	4603      	mov	r3, r0
 8005468:	2b00      	cmp	r3, #0
 800546a:	d001      	beq.n	8005470 <OSPI_EnableMemMappedMode+0x68>
	  {
	    Error_Handler();
 800546c:	f7ff fde2 	bl	8005034 <Error_Handler>
	  }

	  sCommand.OperationType = HAL_OSPI_OPTYPE_READ_CFG;
 8005470:	2301      	movs	r3, #1
 8005472:	60bb      	str	r3, [r7, #8]
	  sCommand.Instruction   = READ_CMD;
 8005474:	2300      	movs	r3, #0
 8005476:	613b      	str	r3, [r7, #16]
	  sCommand.DummyCycles   = DUMMY_CLOCK_CYCLES_READ;
 8005478:	2305      	movs	r3, #5
 800547a:	64fb      	str	r3, [r7, #76]	; 0x4c

	  if (HAL_OSPI_Command(&hospi1, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800547c:	f107 0308 	add.w	r3, r7, #8
 8005480:	f241 3288 	movw	r2, #5000	; 0x1388
 8005484:	4619      	mov	r1, r3
 8005486:	480d      	ldr	r0, [pc, #52]	; (80054bc <OSPI_EnableMemMappedMode+0xb4>)
 8005488:	f003 facc 	bl	8008a24 <HAL_OSPI_Command>
 800548c:	4603      	mov	r3, r0
 800548e:	2b00      	cmp	r3, #0
 8005490:	d001      	beq.n	8005496 <OSPI_EnableMemMappedMode+0x8e>
	  {
	    Error_Handler();
 8005492:	f7ff fdcf 	bl	8005034 <Error_Handler>
	  }

	  sMemMappedCfg.TimeOutActivation = HAL_OSPI_TIMEOUT_COUNTER_ENABLE;
 8005496:	2308      	movs	r3, #8
 8005498:	603b      	str	r3, [r7, #0]
	  sMemMappedCfg.TimeOutPeriod     = 0x34;
 800549a:	2334      	movs	r3, #52	; 0x34
 800549c:	607b      	str	r3, [r7, #4]

	  if (HAL_OSPI_MemoryMapped(&hospi1, &sMemMappedCfg) != HAL_OK)
 800549e:	463b      	mov	r3, r7
 80054a0:	4619      	mov	r1, r3
 80054a2:	4806      	ldr	r0, [pc, #24]	; (80054bc <OSPI_EnableMemMappedMode+0xb4>)
 80054a4:	f003 fb4b 	bl	8008b3e <HAL_OSPI_MemoryMapped>
 80054a8:	4603      	mov	r3, r0
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d001      	beq.n	80054b2 <OSPI_EnableMemMappedMode+0xaa>
	  {
	    Error_Handler();
 80054ae:	f7ff fdc1 	bl	8005034 <Error_Handler>
	  }
}
 80054b2:	bf00      	nop
 80054b4:	3758      	adds	r7, #88	; 0x58
 80054b6:	46bd      	mov	sp, r7
 80054b8:	bd80      	pop	{r7, pc}
 80054ba:	bf00      	nop
 80054bc:	20001d20 	.word	0x20001d20

080054c0 <OSPI_DelayBlockConfig>:

void OSPI_DelayBlockConfig(void){
 80054c0:	b580      	push	{r7, lr}
 80054c2:	b084      	sub	sp, #16
 80054c4:	af00      	add	r7, sp, #0
	  LL_DLYB_CfgTypeDef dlyb_cfg,dlyb_cfg_test;
	  /* Delay block configuration ------------------------------------------------ */
	  HAL_OSPI_DLYB_GetClockPeriod(&hospi1,&dlyb_cfg);
 80054c6:	f107 0308 	add.w	r3, r7, #8
 80054ca:	4619      	mov	r1, r3
 80054cc:	4813      	ldr	r0, [pc, #76]	; (800551c <OSPI_DelayBlockConfig+0x5c>)
 80054ce:	f004 fbe1 	bl	8009c94 <HAL_OSPI_DLYB_GetClockPeriod>

	  /*when DTR, PhaseSel is divided by 4 (emperic value)*/
	  dlyb_cfg.PhaseSel /=4;
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	089b      	lsrs	r3, r3, #2
 80054d6:	60fb      	str	r3, [r7, #12]

	  /* save the present configuration for check*/
	  dlyb_cfg_test = dlyb_cfg;
 80054d8:	463b      	mov	r3, r7
 80054da:	f107 0208 	add.w	r2, r7, #8
 80054de:	e892 0003 	ldmia.w	r2, {r0, r1}
 80054e2:	e883 0003 	stmia.w	r3, {r0, r1}

	  /*set delay block configuration*/
	  HAL_OSPI_DLYB_SetConfig(&hospi1,&dlyb_cfg);
 80054e6:	f107 0308 	add.w	r3, r7, #8
 80054ea:	4619      	mov	r1, r3
 80054ec:	480b      	ldr	r0, [pc, #44]	; (800551c <OSPI_DelayBlockConfig+0x5c>)
 80054ee:	f004 fb5d 	bl	8009bac <HAL_OSPI_DLYB_SetConfig>

	  /*check the set value*/
	  HAL_OSPI_DLYB_GetConfig(&hospi1,&dlyb_cfg);
 80054f2:	f107 0308 	add.w	r3, r7, #8
 80054f6:	4619      	mov	r1, r3
 80054f8:	4808      	ldr	r0, [pc, #32]	; (800551c <OSPI_DelayBlockConfig+0x5c>)
 80054fa:	f004 fb9f 	bl	8009c3c <HAL_OSPI_DLYB_GetConfig>
	  if ((dlyb_cfg.PhaseSel != dlyb_cfg_test.PhaseSel) || (dlyb_cfg.Units != dlyb_cfg_test.Units))
 80054fe:	68fa      	ldr	r2, [r7, #12]
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	429a      	cmp	r2, r3
 8005504:	d103      	bne.n	800550e <OSPI_DelayBlockConfig+0x4e>
 8005506:	68ba      	ldr	r2, [r7, #8]
 8005508:	683b      	ldr	r3, [r7, #0]
 800550a:	429a      	cmp	r2, r3
 800550c:	d001      	beq.n	8005512 <OSPI_DelayBlockConfig+0x52>
	  {
	    Error_Handler();
 800550e:	f7ff fd91 	bl	8005034 <Error_Handler>
	  }
}
 8005512:	bf00      	nop
 8005514:	3710      	adds	r7, #16
 8005516:	46bd      	mov	sp, r7
 8005518:	bd80      	pop	{r7, pc}
 800551a:	bf00      	nop
 800551c:	20001d20 	.word	0x20001d20

08005520 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005520:	b480      	push	{r7}
 8005522:	b083      	sub	sp, #12
 8005524:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8005526:	4b0a      	ldr	r3, [pc, #40]	; (8005550 <HAL_MspInit+0x30>)
 8005528:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800552c:	4a08      	ldr	r2, [pc, #32]	; (8005550 <HAL_MspInit+0x30>)
 800552e:	f043 0304 	orr.w	r3, r3, #4
 8005532:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8005536:	4b06      	ldr	r3, [pc, #24]	; (8005550 <HAL_MspInit+0x30>)
 8005538:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800553c:	f003 0304 	and.w	r3, r3, #4
 8005540:	607b      	str	r3, [r7, #4]
 8005542:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005544:	bf00      	nop
 8005546:	370c      	adds	r7, #12
 8005548:	46bd      	mov	sp, r7
 800554a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554e:	4770      	bx	lr
 8005550:	46020c00 	.word	0x46020c00

08005554 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005554:	b580      	push	{r7, lr}
 8005556:	b08e      	sub	sp, #56	; 0x38
 8005558:	af00      	add	r7, sp, #0
 800555a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800555c:	2300      	movs	r3, #0
 800555e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t              uwPrescalerValue = 0;
 8005560:	2300      	movs	r3, #0
 8005562:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8005564:	4b2e      	ldr	r3, [pc, #184]	; (8005620 <HAL_InitTick+0xcc>)
 8005566:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800556a:	4a2d      	ldr	r2, [pc, #180]	; (8005620 <HAL_InitTick+0xcc>)
 800556c:	f043 0310 	orr.w	r3, r3, #16
 8005570:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8005574:	4b2a      	ldr	r3, [pc, #168]	; (8005620 <HAL_InitTick+0xcc>)
 8005576:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800557a:	f003 0310 	and.w	r3, r3, #16
 800557e:	60fb      	str	r3, [r7, #12]
 8005580:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8005582:	f107 0210 	add.w	r2, r7, #16
 8005586:	f107 0314 	add.w	r3, r7, #20
 800558a:	4611      	mov	r1, r2
 800558c:	4618      	mov	r0, r3
 800558e:	f005 feb5 	bl	800b2fc <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8005592:	f005 fe9f 	bl	800b2d4 <HAL_RCC_GetPCLK1Freq>
 8005596:	6338      	str	r0, [r7, #48]	; 0x30
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8005598:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800559a:	4a22      	ldr	r2, [pc, #136]	; (8005624 <HAL_InitTick+0xd0>)
 800559c:	fba2 2303 	umull	r2, r3, r2, r3
 80055a0:	0c9b      	lsrs	r3, r3, #18
 80055a2:	3b01      	subs	r3, #1
 80055a4:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80055a6:	4b20      	ldr	r3, [pc, #128]	; (8005628 <HAL_InitTick+0xd4>)
 80055a8:	4a20      	ldr	r2, [pc, #128]	; (800562c <HAL_InitTick+0xd8>)
 80055aa:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80055ac:	4b1e      	ldr	r3, [pc, #120]	; (8005628 <HAL_InitTick+0xd4>)
 80055ae:	f240 32e7 	movw	r2, #999	; 0x3e7
 80055b2:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80055b4:	4a1c      	ldr	r2, [pc, #112]	; (8005628 <HAL_InitTick+0xd4>)
 80055b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055b8:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80055ba:	4b1b      	ldr	r3, [pc, #108]	; (8005628 <HAL_InitTick+0xd4>)
 80055bc:	2200      	movs	r2, #0
 80055be:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80055c0:	4b19      	ldr	r3, [pc, #100]	; (8005628 <HAL_InitTick+0xd4>)
 80055c2:	2200      	movs	r2, #0
 80055c4:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
 80055c6:	4818      	ldr	r0, [pc, #96]	; (8005628 <HAL_InitTick+0xd4>)
 80055c8:	f006 fe46 	bl	800c258 <HAL_TIM_Base_Init>
 80055cc:	4603      	mov	r3, r0
 80055ce:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  if (status == HAL_OK)
 80055d2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d118      	bne.n	800560c <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80055da:	4813      	ldr	r0, [pc, #76]	; (8005628 <HAL_InitTick+0xd4>)
 80055dc:	f006 fe9e 	bl	800c31c <HAL_TIM_Base_Start_IT>
 80055e0:	4603      	mov	r3, r0
 80055e2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if (status == HAL_OK)
 80055e6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d10e      	bne.n	800560c <HAL_InitTick+0xb8>
    {
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	2b0f      	cmp	r3, #15
 80055f2:	d808      	bhi.n	8005606 <HAL_InitTick+0xb2>
      {
        /* Enable the TIM6 global Interrupt */
        HAL_NVIC_SetPriority(TIM6_IRQn, TickPriority, 0U);
 80055f4:	2200      	movs	r2, #0
 80055f6:	6879      	ldr	r1, [r7, #4]
 80055f8:	2031      	movs	r0, #49	; 0x31
 80055fa:	f000 f9db 	bl	80059b4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80055fe:	4a0c      	ldr	r2, [pc, #48]	; (8005630 <HAL_InitTick+0xdc>)
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	6013      	str	r3, [r2, #0]
 8005604:	e002      	b.n	800560c <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 8005606:	2301      	movs	r3, #1
 8005608:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
      }
    }
  }
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_IRQn);
 800560c:	2031      	movs	r0, #49	; 0x31
 800560e:	f000 f9eb 	bl	80059e8 <HAL_NVIC_EnableIRQ>

 /* Return function status */
  return status;
 8005612:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 8005616:	4618      	mov	r0, r3
 8005618:	3738      	adds	r7, #56	; 0x38
 800561a:	46bd      	mov	sp, r7
 800561c:	bd80      	pop	{r7, pc}
 800561e:	bf00      	nop
 8005620:	46020c00 	.word	0x46020c00
 8005624:	431bde83 	.word	0x431bde83
 8005628:	20001d7c 	.word	0x20001d7c
 800562c:	40001000 	.word	0x40001000
 8005630:	20000008 	.word	0x20000008

08005634 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005634:	b480      	push	{r7}
 8005636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8005638:	e7fe      	b.n	8005638 <NMI_Handler+0x4>

0800563a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800563a:	b480      	push	{r7}
 800563c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800563e:	e7fe      	b.n	800563e <HardFault_Handler+0x4>

08005640 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005640:	b480      	push	{r7}
 8005642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005644:	e7fe      	b.n	8005644 <MemManage_Handler+0x4>

08005646 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005646:	b480      	push	{r7}
 8005648:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800564a:	e7fe      	b.n	800564a <BusFault_Handler+0x4>

0800564c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800564c:	b480      	push	{r7}
 800564e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005650:	e7fe      	b.n	8005650 <UsageFault_Handler+0x4>

08005652 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005652:	b480      	push	{r7}
 8005654:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005656:	bf00      	nop
 8005658:	46bd      	mov	sp, r7
 800565a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565e:	4770      	bx	lr

08005660 <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 8005660:	b580      	push	{r7, lr}
 8005662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8005664:	4802      	ldr	r0, [pc, #8]	; (8005670 <TIM6_IRQHandler+0x10>)
 8005666:	f006 fef9 	bl	800c45c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 800566a:	bf00      	nop
 800566c:	bd80      	pop	{r7, pc}
 800566e:	bf00      	nop
 8005670:	20001d7c 	.word	0x20001d7c

08005674 <GPDMA1_Channel12_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 12 global interrupt.
  */
void GPDMA1_Channel12_IRQHandler(void)
{
 8005674:	b580      	push	{r7, lr}
 8005676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel12_IRQn 0 */

  /* USER CODE END GPDMA1_Channel12_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel12);
 8005678:	4802      	ldr	r0, [pc, #8]	; (8005684 <GPDMA1_Channel12_IRQHandler+0x10>)
 800567a:	f000 fef7 	bl	800646c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel12_IRQn 1 */

  /* USER CODE END GPDMA1_Channel12_IRQn 1 */
}
 800567e:	bf00      	nop
 8005680:	bd80      	pop	{r7, pc}
 8005682:	bf00      	nop
 8005684:	200013f8 	.word	0x200013f8

08005688 <DCMI_PSSI_IRQHandler>:

/**
  * @brief This function handles DCMI/PSSI global interrupt.
  */
void DCMI_PSSI_IRQHandler(void)
{
 8005688:	b580      	push	{r7, lr}
 800568a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DCMI_PSSI_IRQn 0 */

  /* USER CODE END DCMI_PSSI_IRQn 0 */
  HAL_DCMI_IRQHandler(&hdcmi);
 800568c:	4802      	ldr	r0, [pc, #8]	; (8005698 <DCMI_PSSI_IRQHandler+0x10>)
 800568e:	f000 fc8b 	bl	8005fa8 <HAL_DCMI_IRQHandler>
  /* USER CODE BEGIN DCMI_PSSI_IRQn 1 */

  /* USER CODE END DCMI_PSSI_IRQn 1 */
}
 8005692:	bf00      	nop
 8005694:	bd80      	pop	{r7, pc}
 8005696:	bf00      	nop
 8005698:	20001390 	.word	0x20001390

0800569c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800569c:	b480      	push	{r7}
 800569e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80056a0:	4b18      	ldr	r3, [pc, #96]	; (8005704 <SystemInit+0x68>)
 80056a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056a6:	4a17      	ldr	r2, [pc, #92]	; (8005704 <SystemInit+0x68>)
 80056a8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80056ac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 80056b0:	4b15      	ldr	r3, [pc, #84]	; (8005708 <SystemInit+0x6c>)
 80056b2:	2201      	movs	r2, #1
 80056b4:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 80056b6:	4b14      	ldr	r3, [pc, #80]	; (8005708 <SystemInit+0x6c>)
 80056b8:	2200      	movs	r2, #0
 80056ba:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 80056bc:	4b12      	ldr	r3, [pc, #72]	; (8005708 <SystemInit+0x6c>)
 80056be:	2200      	movs	r2, #0
 80056c0:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 80056c2:	4b11      	ldr	r3, [pc, #68]	; (8005708 <SystemInit+0x6c>)
 80056c4:	2200      	movs	r2, #0
 80056c6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 80056c8:	4b0f      	ldr	r3, [pc, #60]	; (8005708 <SystemInit+0x6c>)
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	4a0e      	ldr	r2, [pc, #56]	; (8005708 <SystemInit+0x6c>)
 80056ce:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80056d2:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80056d6:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 80056d8:	4b0b      	ldr	r3, [pc, #44]	; (8005708 <SystemInit+0x6c>)
 80056da:	2200      	movs	r2, #0
 80056dc:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 80056de:	4b0a      	ldr	r3, [pc, #40]	; (8005708 <SystemInit+0x6c>)
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	4a09      	ldr	r2, [pc, #36]	; (8005708 <SystemInit+0x6c>)
 80056e4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80056e8:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 80056ea:	4b07      	ldr	r3, [pc, #28]	; (8005708 <SystemInit+0x6c>)
 80056ec:	2200      	movs	r2, #0
 80056ee:	651a      	str	r2, [r3, #80]	; 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80056f0:	4b04      	ldr	r3, [pc, #16]	; (8005704 <SystemInit+0x68>)
 80056f2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80056f6:	609a      	str	r2, [r3, #8]
  #endif
}
 80056f8:	bf00      	nop
 80056fa:	46bd      	mov	sp, r7
 80056fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005700:	4770      	bx	lr
 8005702:	bf00      	nop
 8005704:	e000ed00 	.word	0xe000ed00
 8005708:	46020c00 	.word	0x46020c00

0800570c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 800570c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005744 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8005710:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8005712:	e003      	b.n	800571c <LoopCopyDataInit>

08005714 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8005714:	4b0c      	ldr	r3, [pc, #48]	; (8005748 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8005716:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8005718:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800571a:	3104      	adds	r1, #4

0800571c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 800571c:	480b      	ldr	r0, [pc, #44]	; (800574c <LoopForever+0xa>)
	ldr	r3, =_edata
 800571e:	4b0c      	ldr	r3, [pc, #48]	; (8005750 <LoopForever+0xe>)
	adds	r2, r0, r1
 8005720:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8005722:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8005724:	d3f6      	bcc.n	8005714 <CopyDataInit>
	ldr	r2, =_sbss
 8005726:	4a0b      	ldr	r2, [pc, #44]	; (8005754 <LoopForever+0x12>)
	b	LoopFillZerobss
 8005728:	e002      	b.n	8005730 <LoopFillZerobss>

0800572a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800572a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 800572c:	f842 3b04 	str.w	r3, [r2], #4

08005730 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8005730:	4b09      	ldr	r3, [pc, #36]	; (8005758 <LoopForever+0x16>)
	cmp	r2, r3
 8005732:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8005734:	d3f9      	bcc.n	800572a <FillZerobss>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8005736:	f7ff ffb1 	bl	800569c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800573a:	f008 fff3 	bl	800e724 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800573e:	f7ff fb25 	bl	8004d8c <main>

08005742 <LoopForever>:

LoopForever:
    b LoopForever
 8005742:	e7fe      	b.n	8005742 <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8005744:	200c0000 	.word	0x200c0000
	ldr	r3, =_sidata
 8005748:	0800edc8 	.word	0x0800edc8
	ldr	r0, =_sdata
 800574c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8005750:	20000014 	.word	0x20000014
	ldr	r2, =_sbss
 8005754:	20000014 	.word	0x20000014
	ldr	r3, = _ebss
 8005758:	2000240c 	.word	0x2000240c

0800575c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800575c:	e7fe      	b.n	800575c <ADC1_IRQHandler>
	...

08005760 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005760:	b580      	push	{r7, lr}
 8005762:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005764:	4b11      	ldr	r3, [pc, #68]	; (80057ac <HAL_Init+0x4c>)
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	4a10      	ldr	r2, [pc, #64]	; (80057ac <HAL_Init+0x4c>)
 800576a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800576e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005770:	2003      	movs	r0, #3
 8005772:	f000 f914 	bl	800599e <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8005776:	f005 fc8b 	bl	800b090 <HAL_RCC_GetSysClockFreq>
 800577a:	4602      	mov	r2, r0
 800577c:	4b0c      	ldr	r3, [pc, #48]	; (80057b0 <HAL_Init+0x50>)
 800577e:	6a1b      	ldr	r3, [r3, #32]
 8005780:	f003 030f 	and.w	r3, r3, #15
 8005784:	490b      	ldr	r1, [pc, #44]	; (80057b4 <HAL_Init+0x54>)
 8005786:	5ccb      	ldrb	r3, [r1, r3]
 8005788:	fa22 f303 	lsr.w	r3, r2, r3
 800578c:	4a0a      	ldr	r2, [pc, #40]	; (80057b8 <HAL_Init+0x58>)
 800578e:	6013      	str	r3, [r2, #0]

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8005790:	200f      	movs	r0, #15
 8005792:	f7ff fedf 	bl	8005554 <HAL_InitTick>
 8005796:	4603      	mov	r3, r0
 8005798:	2b00      	cmp	r3, #0
 800579a:	d001      	beq.n	80057a0 <HAL_Init+0x40>
  {
    return HAL_ERROR;
 800579c:	2301      	movs	r3, #1
 800579e:	e002      	b.n	80057a6 <HAL_Init+0x46>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80057a0:	f7ff febe 	bl	8005520 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80057a4:	2300      	movs	r3, #0
}
 80057a6:	4618      	mov	r0, r3
 80057a8:	bd80      	pop	{r7, pc}
 80057aa:	bf00      	nop
 80057ac:	40022000 	.word	0x40022000
 80057b0:	46020c00 	.word	0x46020c00
 80057b4:	0800ece8 	.word	0x0800ece8
 80057b8:	20000004 	.word	0x20000004

080057bc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80057bc:	b480      	push	{r7}
 80057be:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80057c0:	4b06      	ldr	r3, [pc, #24]	; (80057dc <HAL_IncTick+0x20>)
 80057c2:	781b      	ldrb	r3, [r3, #0]
 80057c4:	461a      	mov	r2, r3
 80057c6:	4b06      	ldr	r3, [pc, #24]	; (80057e0 <HAL_IncTick+0x24>)
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	4413      	add	r3, r2
 80057cc:	4a04      	ldr	r2, [pc, #16]	; (80057e0 <HAL_IncTick+0x24>)
 80057ce:	6013      	str	r3, [r2, #0]
}
 80057d0:	bf00      	nop
 80057d2:	46bd      	mov	sp, r7
 80057d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d8:	4770      	bx	lr
 80057da:	bf00      	nop
 80057dc:	2000000c 	.word	0x2000000c
 80057e0:	20001dc8 	.word	0x20001dc8

080057e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80057e4:	b480      	push	{r7}
 80057e6:	af00      	add	r7, sp, #0
  return uwTick;
 80057e8:	4b03      	ldr	r3, [pc, #12]	; (80057f8 <HAL_GetTick+0x14>)
 80057ea:	681b      	ldr	r3, [r3, #0]
}
 80057ec:	4618      	mov	r0, r3
 80057ee:	46bd      	mov	sp, r7
 80057f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f4:	4770      	bx	lr
 80057f6:	bf00      	nop
 80057f8:	20001dc8 	.word	0x20001dc8

080057fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80057fc:	b580      	push	{r7, lr}
 80057fe:	b084      	sub	sp, #16
 8005800:	af00      	add	r7, sp, #0
 8005802:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005804:	f7ff ffee 	bl	80057e4 <HAL_GetTick>
 8005808:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005814:	d005      	beq.n	8005822 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005816:	4b0a      	ldr	r3, [pc, #40]	; (8005840 <HAL_Delay+0x44>)
 8005818:	781b      	ldrb	r3, [r3, #0]
 800581a:	461a      	mov	r2, r3
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	4413      	add	r3, r2
 8005820:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005822:	bf00      	nop
 8005824:	f7ff ffde 	bl	80057e4 <HAL_GetTick>
 8005828:	4602      	mov	r2, r0
 800582a:	68bb      	ldr	r3, [r7, #8]
 800582c:	1ad3      	subs	r3, r2, r3
 800582e:	68fa      	ldr	r2, [r7, #12]
 8005830:	429a      	cmp	r2, r3
 8005832:	d8f7      	bhi.n	8005824 <HAL_Delay+0x28>
  {
  }
}
 8005834:	bf00      	nop
 8005836:	bf00      	nop
 8005838:	3710      	adds	r7, #16
 800583a:	46bd      	mov	sp, r7
 800583c:	bd80      	pop	{r7, pc}
 800583e:	bf00      	nop
 8005840:	2000000c 	.word	0x2000000c

08005844 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005844:	b480      	push	{r7}
 8005846:	b085      	sub	sp, #20
 8005848:	af00      	add	r7, sp, #0
 800584a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	f003 0307 	and.w	r3, r3, #7
 8005852:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005854:	4b0c      	ldr	r3, [pc, #48]	; (8005888 <__NVIC_SetPriorityGrouping+0x44>)
 8005856:	68db      	ldr	r3, [r3, #12]
 8005858:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800585a:	68ba      	ldr	r2, [r7, #8]
 800585c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005860:	4013      	ands	r3, r2
 8005862:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005868:	68bb      	ldr	r3, [r7, #8]
 800586a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800586c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005870:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005874:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005876:	4a04      	ldr	r2, [pc, #16]	; (8005888 <__NVIC_SetPriorityGrouping+0x44>)
 8005878:	68bb      	ldr	r3, [r7, #8]
 800587a:	60d3      	str	r3, [r2, #12]
}
 800587c:	bf00      	nop
 800587e:	3714      	adds	r7, #20
 8005880:	46bd      	mov	sp, r7
 8005882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005886:	4770      	bx	lr
 8005888:	e000ed00 	.word	0xe000ed00

0800588c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800588c:	b480      	push	{r7}
 800588e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005890:	4b04      	ldr	r3, [pc, #16]	; (80058a4 <__NVIC_GetPriorityGrouping+0x18>)
 8005892:	68db      	ldr	r3, [r3, #12]
 8005894:	0a1b      	lsrs	r3, r3, #8
 8005896:	f003 0307 	and.w	r3, r3, #7
}
 800589a:	4618      	mov	r0, r3
 800589c:	46bd      	mov	sp, r7
 800589e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a2:	4770      	bx	lr
 80058a4:	e000ed00 	.word	0xe000ed00

080058a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80058a8:	b480      	push	{r7}
 80058aa:	b083      	sub	sp, #12
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	4603      	mov	r3, r0
 80058b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80058b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	db0b      	blt.n	80058d2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80058ba:	79fb      	ldrb	r3, [r7, #7]
 80058bc:	f003 021f 	and.w	r2, r3, #31
 80058c0:	4907      	ldr	r1, [pc, #28]	; (80058e0 <__NVIC_EnableIRQ+0x38>)
 80058c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80058c6:	095b      	lsrs	r3, r3, #5
 80058c8:	2001      	movs	r0, #1
 80058ca:	fa00 f202 	lsl.w	r2, r0, r2
 80058ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80058d2:	bf00      	nop
 80058d4:	370c      	adds	r7, #12
 80058d6:	46bd      	mov	sp, r7
 80058d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058dc:	4770      	bx	lr
 80058de:	bf00      	nop
 80058e0:	e000e100 	.word	0xe000e100

080058e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80058e4:	b480      	push	{r7}
 80058e6:	b083      	sub	sp, #12
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	4603      	mov	r3, r0
 80058ec:	6039      	str	r1, [r7, #0]
 80058ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80058f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	db0a      	blt.n	800590e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80058f8:	683b      	ldr	r3, [r7, #0]
 80058fa:	b2da      	uxtb	r2, r3
 80058fc:	490c      	ldr	r1, [pc, #48]	; (8005930 <__NVIC_SetPriority+0x4c>)
 80058fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005902:	0112      	lsls	r2, r2, #4
 8005904:	b2d2      	uxtb	r2, r2
 8005906:	440b      	add	r3, r1
 8005908:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800590c:	e00a      	b.n	8005924 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800590e:	683b      	ldr	r3, [r7, #0]
 8005910:	b2da      	uxtb	r2, r3
 8005912:	4908      	ldr	r1, [pc, #32]	; (8005934 <__NVIC_SetPriority+0x50>)
 8005914:	79fb      	ldrb	r3, [r7, #7]
 8005916:	f003 030f 	and.w	r3, r3, #15
 800591a:	3b04      	subs	r3, #4
 800591c:	0112      	lsls	r2, r2, #4
 800591e:	b2d2      	uxtb	r2, r2
 8005920:	440b      	add	r3, r1
 8005922:	761a      	strb	r2, [r3, #24]
}
 8005924:	bf00      	nop
 8005926:	370c      	adds	r7, #12
 8005928:	46bd      	mov	sp, r7
 800592a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800592e:	4770      	bx	lr
 8005930:	e000e100 	.word	0xe000e100
 8005934:	e000ed00 	.word	0xe000ed00

08005938 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005938:	b480      	push	{r7}
 800593a:	b089      	sub	sp, #36	; 0x24
 800593c:	af00      	add	r7, sp, #0
 800593e:	60f8      	str	r0, [r7, #12]
 8005940:	60b9      	str	r1, [r7, #8]
 8005942:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	f003 0307 	and.w	r3, r3, #7
 800594a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800594c:	69fb      	ldr	r3, [r7, #28]
 800594e:	f1c3 0307 	rsb	r3, r3, #7
 8005952:	2b04      	cmp	r3, #4
 8005954:	bf28      	it	cs
 8005956:	2304      	movcs	r3, #4
 8005958:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800595a:	69fb      	ldr	r3, [r7, #28]
 800595c:	3304      	adds	r3, #4
 800595e:	2b06      	cmp	r3, #6
 8005960:	d902      	bls.n	8005968 <NVIC_EncodePriority+0x30>
 8005962:	69fb      	ldr	r3, [r7, #28]
 8005964:	3b03      	subs	r3, #3
 8005966:	e000      	b.n	800596a <NVIC_EncodePriority+0x32>
 8005968:	2300      	movs	r3, #0
 800596a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800596c:	f04f 32ff 	mov.w	r2, #4294967295
 8005970:	69bb      	ldr	r3, [r7, #24]
 8005972:	fa02 f303 	lsl.w	r3, r2, r3
 8005976:	43da      	mvns	r2, r3
 8005978:	68bb      	ldr	r3, [r7, #8]
 800597a:	401a      	ands	r2, r3
 800597c:	697b      	ldr	r3, [r7, #20]
 800597e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005980:	f04f 31ff 	mov.w	r1, #4294967295
 8005984:	697b      	ldr	r3, [r7, #20]
 8005986:	fa01 f303 	lsl.w	r3, r1, r3
 800598a:	43d9      	mvns	r1, r3
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005990:	4313      	orrs	r3, r2
         );
}
 8005992:	4618      	mov	r0, r3
 8005994:	3724      	adds	r7, #36	; 0x24
 8005996:	46bd      	mov	sp, r7
 8005998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800599c:	4770      	bx	lr

0800599e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800599e:	b580      	push	{r7, lr}
 80059a0:	b082      	sub	sp, #8
 80059a2:	af00      	add	r7, sp, #0
 80059a4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80059a6:	6878      	ldr	r0, [r7, #4]
 80059a8:	f7ff ff4c 	bl	8005844 <__NVIC_SetPriorityGrouping>
}
 80059ac:	bf00      	nop
 80059ae:	3708      	adds	r7, #8
 80059b0:	46bd      	mov	sp, r7
 80059b2:	bd80      	pop	{r7, pc}

080059b4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80059b4:	b580      	push	{r7, lr}
 80059b6:	b086      	sub	sp, #24
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	4603      	mov	r3, r0
 80059bc:	60b9      	str	r1, [r7, #8]
 80059be:	607a      	str	r2, [r7, #4]
 80059c0:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80059c2:	f7ff ff63 	bl	800588c <__NVIC_GetPriorityGrouping>
 80059c6:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80059c8:	687a      	ldr	r2, [r7, #4]
 80059ca:	68b9      	ldr	r1, [r7, #8]
 80059cc:	6978      	ldr	r0, [r7, #20]
 80059ce:	f7ff ffb3 	bl	8005938 <NVIC_EncodePriority>
 80059d2:	4602      	mov	r2, r0
 80059d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80059d8:	4611      	mov	r1, r2
 80059da:	4618      	mov	r0, r3
 80059dc:	f7ff ff82 	bl	80058e4 <__NVIC_SetPriority>
}
 80059e0:	bf00      	nop
 80059e2:	3718      	adds	r7, #24
 80059e4:	46bd      	mov	sp, r7
 80059e6:	bd80      	pop	{r7, pc}

080059e8 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80059e8:	b580      	push	{r7, lr}
 80059ea:	b082      	sub	sp, #8
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	4603      	mov	r3, r0
 80059f0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80059f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80059f6:	4618      	mov	r0, r3
 80059f8:	f7ff ff56 	bl	80058a8 <__NVIC_EnableIRQ>
}
 80059fc:	bf00      	nop
 80059fe:	3708      	adds	r7, #8
 8005a00:	46bd      	mov	sp, r7
 8005a02:	bd80      	pop	{r7, pc}

08005a04 <HAL_DCACHE_Init>:
  * @param  hdcache Pointer to a DCACHE_HandleTypeDef structure that contains
  *                 the configuration information for the specified DCACHE.
  * @retval HAL status
  */
HAL_StatusTypeDef  HAL_DCACHE_Init(DCACHE_HandleTypeDef *hdcache)
{
 8005a04:	b580      	push	{r7, lr}
 8005a06:	b084      	sub	sp, #16
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the DCACHE handle allocation */
  if (hdcache == NULL)
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d101      	bne.n	8005a16 <HAL_DCACHE_Init+0x12>
  {
    return HAL_ERROR;
 8005a12:	2301      	movs	r3, #1
 8005a14:	e037      	b.n	8005a86 <HAL_DCACHE_Init+0x82>

  /* Check the parameters */
  assert_param(IS_DCACHE_ALL_INSTANCE(hdcache->Instance));
  assert_param(IS_DCACHE_READ_BURST_TYPE(hdcache->Init.ReadBurstType));

  if (hdcache->State == HAL_DCACHE_STATE_RESET)
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005a1c:	b2db      	uxtb	r3, r3
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d119      	bne.n	8005a56 <HAL_DCACHE_Init+0x52>
  {
    /* Init the DCACHE Callback settings with legacy weak */
    hdcache->ErrorCallback                      = HAL_DCACHE_ErrorCallback;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	4a1a      	ldr	r2, [pc, #104]	; (8005a90 <HAL_DCACHE_Init+0x8c>)
 8005a26:	609a      	str	r2, [r3, #8]
    hdcache->CleanByAddrCallback                = HAL_DCACHE_CleanByAddrCallback;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	4a1a      	ldr	r2, [pc, #104]	; (8005a94 <HAL_DCACHE_Init+0x90>)
 8005a2c:	60da      	str	r2, [r3, #12]
    hdcache->InvalidateByAddrCallback           = HAL_DCACHE_InvalidateByAddrCallback;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	4a19      	ldr	r2, [pc, #100]	; (8005a98 <HAL_DCACHE_Init+0x94>)
 8005a32:	611a      	str	r2, [r3, #16]
    hdcache->InvalidateCompleteCallback         = HAL_DCACHE_InvalidateCompleteCallback;
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	4a19      	ldr	r2, [pc, #100]	; (8005a9c <HAL_DCACHE_Init+0x98>)
 8005a38:	615a      	str	r2, [r3, #20]
    hdcache->CleanAndInvalidateByAddrCallback   = HAL_DCACHE_CleanAndInvalidateByAddrCallback;
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	4a18      	ldr	r2, [pc, #96]	; (8005aa0 <HAL_DCACHE_Init+0x9c>)
 8005a3e:	619a      	str	r2, [r3, #24]

    if (hdcache->MspInitCallback == NULL)
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	69db      	ldr	r3, [r3, #28]
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d102      	bne.n	8005a4e <HAL_DCACHE_Init+0x4a>
    {
      hdcache->MspInitCallback = HAL_DCACHE_MspInit;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	4a16      	ldr	r2, [pc, #88]	; (8005aa4 <HAL_DCACHE_Init+0xa0>)
 8005a4c:	61da      	str	r2, [r3, #28]
    }

    /* Init the low level hardware */
    hdcache->MspInitCallback(hdcache);
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	69db      	ldr	r3, [r3, #28]
 8005a52:	6878      	ldr	r0, [r7, #4]
 8005a54:	4798      	blx	r3
  }

  /* Init the error code */
  hdcache->ErrorCode = HAL_DCACHE_ERROR_NONE;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	2200      	movs	r2, #0
 8005a5a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Init the DCACHE handle state */
  hdcache->State = HAL_DCACHE_STATE_READY;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	2201      	movs	r2, #1
 8005a60:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  /* Set requested read burst type */
  MODIFY_REG(hdcache->Instance->CR, DCACHE_CR_HBURST, hdcache->Init.ReadBurstType);
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	685a      	ldr	r2, [r3, #4]
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	430a      	orrs	r2, r1
 8005a78:	601a      	str	r2, [r3, #0]

  /* Enable the selected DCACHE peripheral */
  status = HAL_DCACHE_Enable(hdcache);
 8005a7a:	6878      	ldr	r0, [r7, #4]
 8005a7c:	f000 f81e 	bl	8005abc <HAL_DCACHE_Enable>
 8005a80:	4603      	mov	r3, r0
 8005a82:	73fb      	strb	r3, [r7, #15]

  return status;
 8005a84:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a86:	4618      	mov	r0, r3
 8005a88:	3710      	adds	r7, #16
 8005a8a:	46bd      	mov	sp, r7
 8005a8c:	bd80      	pop	{r7, pc}
 8005a8e:	bf00      	nop
 8005a90:	08005b5b 	.word	0x08005b5b
 8005a94:	08005b0b 	.word	0x08005b0b
 8005a98:	08005b1f 	.word	0x08005b1f
 8005a9c:	08005b47 	.word	0x08005b47
 8005aa0:	08005b33 	.word	0x08005b33
 8005aa4:	08005aa9 	.word	0x08005aa9

08005aa8 <HAL_DCACHE_MspInit>:
  * @param  hdcache Pointer to a DCACHE_HandleTypeDef structure that contains
  *                 the configuration information for the specified DCACHEx peripheral.
  * @retval None
  */
__weak void HAL_DCACHE_MspInit(DCACHE_HandleTypeDef *hdcache)
{
 8005aa8:	b480      	push	{r7}
 8005aaa:	b083      	sub	sp, #12
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	6078      	str	r0, [r7, #4]
  UNUSED(hdcache);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DCACHE_MspInit can be implemented in the user file
   */
}
 8005ab0:	bf00      	nop
 8005ab2:	370c      	adds	r7, #12
 8005ab4:	46bd      	mov	sp, r7
 8005ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aba:	4770      	bx	lr

08005abc <HAL_DCACHE_Enable>:
  * @param  hdcache Pointer to a DCACHE_HandleTypeDef structure that contains
  *                 the configuration information for the specified DCACHEx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCACHE_Enable(DCACHE_HandleTypeDef *hdcache)
{
 8005abc:	b480      	push	{r7}
 8005abe:	b085      	sub	sp, #20
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005ac4:	2300      	movs	r3, #0
 8005ac6:	73fb      	strb	r3, [r7, #15]

  /* Check the dcache handle allocation */
  if (hdcache == NULL)
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d101      	bne.n	8005ad2 <HAL_DCACHE_Enable+0x16>
  {
    return HAL_ERROR;
 8005ace:	2301      	movs	r3, #1
 8005ad0:	e015      	b.n	8005afe <HAL_DCACHE_Enable+0x42>

  /* Check the parameters */
  assert_param(IS_DCACHE_ALL_INSTANCE(hdcache->Instance));

  /* Check no ongoing operation */
  if (READ_BIT(hdcache->Instance->SR, (DCACHE_SR_BUSYF | DCACHE_SR_BUSYCMDF)) != 0U)
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	685b      	ldr	r3, [r3, #4]
 8005ad8:	f003 0309 	and.w	r3, r3, #9
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d002      	beq.n	8005ae6 <HAL_DCACHE_Enable+0x2a>
  {
    /* Return busy status */
    status =  HAL_BUSY;
 8005ae0:	2302      	movs	r3, #2
 8005ae2:	73fb      	strb	r3, [r7, #15]
 8005ae4:	e00a      	b.n	8005afc <HAL_DCACHE_Enable+0x40>
  }
  else
  {
    /* Update the error code */
    hdcache->ErrorCode = HAL_DCACHE_ERROR_NONE;
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	2200      	movs	r2, #0
 8005aea:	629a      	str	r2, [r3, #40]	; 0x28

    /* Enable the selected DCACHE peripheral */
    SET_BIT(hdcache->Instance->CR, DCACHE_CR_EN);
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	681a      	ldr	r2, [r3, #0]
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	f042 0201 	orr.w	r2, r2, #1
 8005afa:	601a      	str	r2, [r3, #0]
  }

  return status;
 8005afc:	7bfb      	ldrb	r3, [r7, #15]
}
 8005afe:	4618      	mov	r0, r3
 8005b00:	3714      	adds	r7, #20
 8005b02:	46bd      	mov	sp, r7
 8005b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b08:	4770      	bx	lr

08005b0a <HAL_DCACHE_CleanByAddrCallback>:
  * @param  hdcache Pointer to a DCACHE_HandleTypeDef structure that contains
  *                 the configuration information for the specified DCACHEx peripheral.
  * @retval None
  */
__weak void HAL_DCACHE_CleanByAddrCallback(DCACHE_HandleTypeDef *hdcache)
{
 8005b0a:	b480      	push	{r7}
 8005b0c:	b083      	sub	sp, #12
 8005b0e:	af00      	add	r7, sp, #0
 8005b10:	6078      	str	r0, [r7, #4]
  UNUSED(hdcache);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DCACHE_CleanByAddrCallback() should be implemented in the user file
   */
}
 8005b12:	bf00      	nop
 8005b14:	370c      	adds	r7, #12
 8005b16:	46bd      	mov	sp, r7
 8005b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b1c:	4770      	bx	lr

08005b1e <HAL_DCACHE_InvalidateByAddrCallback>:
  * @param  hdcache Pointer to a DCACHE_HandleTypeDef structure that contains
  *                 the configuration information for the specified DCACHEx peripheral.
  * @retval None
  */
__weak void HAL_DCACHE_InvalidateByAddrCallback(DCACHE_HandleTypeDef *hdcache)
{
 8005b1e:	b480      	push	{r7}
 8005b20:	b083      	sub	sp, #12
 8005b22:	af00      	add	r7, sp, #0
 8005b24:	6078      	str	r0, [r7, #4]
  UNUSED(hdcache);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DCACHE_InvalidateByAddrCallback() should be implemented in the user file
   */
}
 8005b26:	bf00      	nop
 8005b28:	370c      	adds	r7, #12
 8005b2a:	46bd      	mov	sp, r7
 8005b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b30:	4770      	bx	lr

08005b32 <HAL_DCACHE_CleanAndInvalidateByAddrCallback>:
  * @param  hdcache Pointer to a DCACHE_HandleTypeDef structure that contains
  *                 the configuration information for the specified DCACHEx peripheral.
  * @retval None
  */
__weak void HAL_DCACHE_CleanAndInvalidateByAddrCallback(DCACHE_HandleTypeDef *hdcache)
{
 8005b32:	b480      	push	{r7}
 8005b34:	b083      	sub	sp, #12
 8005b36:	af00      	add	r7, sp, #0
 8005b38:	6078      	str	r0, [r7, #4]
  UNUSED(hdcache);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DCACHE_CleanAndInvalidateByAddrCallback() should be implemented in the user file
   */
}
 8005b3a:	bf00      	nop
 8005b3c:	370c      	adds	r7, #12
 8005b3e:	46bd      	mov	sp, r7
 8005b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b44:	4770      	bx	lr

08005b46 <HAL_DCACHE_InvalidateCompleteCallback>:
  * @param  hdcache Pointer to a DCACHE_HandleTypeDef structure that contains
  *                 the configuration information for the specified DCACHEx peripheral.
  * @retval None
  */
__weak void HAL_DCACHE_InvalidateCompleteCallback(DCACHE_HandleTypeDef *hdcache)
{
 8005b46:	b480      	push	{r7}
 8005b48:	b083      	sub	sp, #12
 8005b4a:	af00      	add	r7, sp, #0
 8005b4c:	6078      	str	r0, [r7, #4]
  UNUSED(hdcache);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DCACHE_InvalidateCompleteCallback() should be implemented in the user file
   */
}
 8005b4e:	bf00      	nop
 8005b50:	370c      	adds	r7, #12
 8005b52:	46bd      	mov	sp, r7
 8005b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b58:	4770      	bx	lr

08005b5a <HAL_DCACHE_ErrorCallback>:
  * @param  hdcache Pointer to a DCACHE_HandleTypeDef structure that contains
  *                 the configuration information for the specified DCACHEx peripheral.
  * @retval None
  */
__weak void HAL_DCACHE_ErrorCallback(DCACHE_HandleTypeDef *hdcache)
{
 8005b5a:	b480      	push	{r7}
 8005b5c:	b083      	sub	sp, #12
 8005b5e:	af00      	add	r7, sp, #0
 8005b60:	6078      	str	r0, [r7, #4]
  UNUSED(hdcache);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DCACHE_ErrorCallback() should be implemented in the user file
   */
}
 8005b62:	bf00      	nop
 8005b64:	370c      	adds	r7, #12
 8005b66:	46bd      	mov	sp, r7
 8005b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b6c:	4770      	bx	lr
	...

08005b70 <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 8005b70:	b580      	push	{r7, lr}
 8005b72:	b082      	sub	sp, #8
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if (hdcmi == NULL)
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d101      	bne.n	8005b82 <HAL_DCMI_Init+0x12>
  {
    return HAL_ERROR;
 8005b7e:	2301      	movs	r3, #1
 8005b80:	e069      	b.n	8005c56 <HAL_DCMI_Init+0xe6>
  assert_param(IS_DCMI_BYTE_SELECT_MODE(hdcmi->Init.ByteSelectMode));
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));

  if (hdcmi->State == HAL_DCMI_STATE_RESET)
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005b88:	b2db      	uxtb	r3, r3
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d102      	bne.n	8005b94 <HAL_DCMI_Init+0x24>
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 8005b8e:	6878      	ldr	r0, [r7, #4]
 8005b90:	f7fe f9d2 	bl	8003f38 <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	2202      	movs	r2, #2
 8005b98:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  if (hdcmi->Init.ExtendedDataMode != DCMI_EXTEND_DATA_8B)
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	699b      	ldr	r3, [r3, #24]
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d002      	beq.n	8005baa <HAL_DCMI_Init+0x3a>
  {
    /* Byte select mode must be programmed to the reset value if the extended mode
    is not set to 8-bit data capture on every pixel clock */
    hdcmi->Init.ByteSelectMode = DCMI_BSM_ALL;
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	2200      	movs	r2, #0
 8005ba8:	625a      	str	r2, [r3, #36]	; 0x24
  }
  /* Configures the HS, VS, DE and PC polarity */
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 | \
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	6819      	ldr	r1, [r3, #0]
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681a      	ldr	r2, [r3, #0]
 8005bb4:	4b2a      	ldr	r3, [pc, #168]	; (8005c60 <HAL_DCMI_Init+0xf0>)
 8005bb6:	400b      	ands	r3, r1
 8005bb8:	6013      	str	r3, [r2, #0]
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  | \
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS | \
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	6819      	ldr	r1, [r3, #0]
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	685a      	ldr	r2, [r3, #4]
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	695b      	ldr	r3, [r3, #20]
 8005bc8:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8005bce:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	691b      	ldr	r3, [r3, #16]
 8005bd4:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	689b      	ldr	r3, [r3, #8]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8005bda:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	699b      	ldr	r3, [r3, #24]
 8005be0:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	6a1b      	ldr	r3, [r3, #32]
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8005be6:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bec:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8005bf2:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bf8:	431a      	orrs	r2, r3
                                    hdcmi->Init.LineSelectStart);
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8005bfe:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	430a      	orrs	r2, r1
 8005c06:	601a      	str	r2, [r3, #0]

  if (hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	685b      	ldr	r3, [r3, #4]
 8005c0c:	2b10      	cmp	r3, #16
 8005c0e:	d112      	bne.n	8005c36 <HAL_DCMI_Init+0xc6>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	7f1b      	ldrb	r3, [r3, #28]
 8005c14:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	7f5b      	ldrb	r3, [r3, #29]
 8005c1a:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8005c1c:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	7f9b      	ldrb	r3, [r3, #30]
 8005c22:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 8005c24:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	7fdb      	ldrb	r3, [r3, #31]
 8005c2c:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 8005c32:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8005c34:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	68da      	ldr	r2, [r3, #12]
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	f042 021e 	orr.w	r2, r2, #30
 8005c44:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	2200      	movs	r2, #0
 8005c4a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	2201      	movs	r2, #1
 8005c50:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005c54:	2300      	movs	r3, #0
}
 8005c56:	4618      	mov	r0, r3
 8005c58:	3708      	adds	r7, #8
 8005c5a:	46bd      	mov	sp, r7
 8005c5c:	bd80      	pop	{r7, pc}
 8005c5e:	bf00      	nop
 8005c60:	ffe0f007 	.word	0xffe0f007

08005c64 <HAL_DCMI_Start_DMA>:
  * @param  pData     The destination memory Buffer address (LCD Frame buffer).
  * @param  Length    The length of capture to be transferred.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Start_DMA(DCMI_HandleTypeDef *hdcmi, uint32_t DCMI_Mode, uint32_t pData, uint32_t Length)
{
 8005c64:	b580      	push	{r7, lr}
 8005c66:	b08a      	sub	sp, #40	; 0x28
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	60f8      	str	r0, [r7, #12]
 8005c6c:	60b9      	str	r1, [r7, #8]
 8005c6e:	607a      	str	r2, [r7, #4]
 8005c70:	603b      	str	r3, [r7, #0]
  uint32_t tmp_length = Length;
 8005c72:	683b      	ldr	r3, [r7, #0]
 8005c74:	623b      	str	r3, [r7, #32]
  HAL_StatusTypeDef status = HAL_OK;
 8005c76:	2300      	movs	r3, #0
 8005c78:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check function parameters */
  assert_param(IS_DCMI_CAPTURE_MODE(DCMI_Mode));

  /* Process Locked */
  __HAL_LOCK(hdcmi);
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005c82:	2b01      	cmp	r3, #1
 8005c84:	d101      	bne.n	8005c8a <HAL_DCMI_Start_DMA+0x26>
 8005c86:	2302      	movs	r3, #2
 8005c88:	e189      	b.n	8005f9e <HAL_DCMI_Start_DMA+0x33a>
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	2201      	movs	r2, #1
 8005c8e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Lock the DCMI peripheral state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	2202      	movs	r2, #2
 8005c96:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Enable DCMI by setting DCMIEN bit */
  __HAL_DCMI_ENABLE(hdcmi);
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	681a      	ldr	r2, [r3, #0]
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005ca8:	601a      	str	r2, [r3, #0]

  /* Configure the DCMI Mode */
  hdcmi->Instance->CR &= ~(DCMI_CR_CM);
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	681a      	ldr	r2, [r3, #0]
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	f022 0202 	bic.w	r2, r2, #2
 8005cb8:	601a      	str	r2, [r3, #0]
  hdcmi->Instance->CR |= (uint32_t)(DCMI_Mode);
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	6819      	ldr	r1, [r3, #0]
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	68ba      	ldr	r2, [r7, #8]
 8005cc6:	430a      	orrs	r2, r1
 8005cc8:	601a      	str	r2, [r3, #0]

  /* Set the DMA memory0 conversion complete callback */
  hdcmi->DMA_Handle->XferCpltCallback = DCMI_DMAXferCplt;
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005cce:	4a99      	ldr	r2, [pc, #612]	; (8005f34 <HAL_DCMI_Start_DMA+0x2d0>)
 8005cd0:	661a      	str	r2, [r3, #96]	; 0x60

  /* Set the DMA error callback */
  hdcmi->DMA_Handle->XferErrorCallback = DCMI_DMAError;
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005cd6:	4a98      	ldr	r2, [pc, #608]	; (8005f38 <HAL_DCMI_Start_DMA+0x2d4>)
 8005cd8:	669a      	str	r2, [r3, #104]	; 0x68

  /* Set the dma abort callback */
  hdcmi->DMA_Handle->XferAbortCallback = NULL;
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005cde:	2200      	movs	r2, #0
 8005ce0:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset transfer counters value */
  hdcmi->XferCount = 0;
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	2200      	movs	r2, #0
 8005ce6:	639a      	str	r2, [r3, #56]	; 0x38
  hdcmi->XferTransferNumber = 0;
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	2200      	movs	r2, #0
 8005cec:	641a      	str	r2, [r3, #64]	; 0x40
  hdcmi->XferSize = 0;
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	2200      	movs	r2, #0
 8005cf2:	63da      	str	r2, [r3, #60]	; 0x3c
  hdcmi->pBuffPtr = 0;
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	2200      	movs	r2, #0
 8005cf8:	645a      	str	r2, [r3, #68]	; 0x44

  /* Length should be converted to number of bytes */
  tmp_length = tmp_length * 4U;
 8005cfa:	6a3b      	ldr	r3, [r7, #32]
 8005cfc:	009b      	lsls	r3, r3, #2
 8005cfe:	623b      	str	r3, [r7, #32]

  if (tmp_length <= 0xFFFFU)
 8005d00:	6a3b      	ldr	r3, [r7, #32]
 8005d02:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d06:	d24c      	bcs.n	8005da2 <HAL_DCMI_Start_DMA+0x13e>
  {
    /* Continuoues Mode */
    /* Enable the DMA Stream */
    if ((hdcmi->DMA_Handle->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005d0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d037      	beq.n	8005d86 <HAL_DCMI_Start_DMA+0x122>
    {
      if ((hdcmi->DMA_Handle->LinkedListQueue != 0U) && (hdcmi->DMA_Handle->LinkedListQueue->Head != 0U))
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005d1a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d023      	beq.n	8005d68 <HAL_DCMI_Start_DMA+0x104>
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005d24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d01d      	beq.n	8005d68 <HAL_DCMI_Start_DMA+0x104>
      {
        /* Set Source , Destination , Length for DMA Xfer */

        /* Set DMA data size           */
        hdcmi->DMA_Handle->LinkedListQueue->Head->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = tmp_length;
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005d30:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	6a3a      	ldr	r2, [r7, #32]
 8005d36:	609a      	str	r2, [r3, #8]
        /* Set DMA source address      */
        hdcmi->DMA_Handle->LinkedListQueue->Head->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] = \
            (uint32_t)&hdcmi->Instance->DR;
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	f103 0228 	add.w	r2, r3, #40	; 0x28
        hdcmi->DMA_Handle->LinkedListQueue->Head->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] = \
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005d44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	60da      	str	r2, [r3, #12]
        /* Set DMA destination address */
        hdcmi->DMA_Handle->LinkedListQueue->Head->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = (uint32_t)pData;
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005d4e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	687a      	ldr	r2, [r7, #4]
 8005d54:	611a      	str	r2, [r3, #16]

        status = HAL_DMAEx_List_Start_IT(hdcmi->DMA_Handle);
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005d5a:	4618      	mov	r0, r3
 8005d5c:	f000 fe4e 	bl	80069fc <HAL_DMAEx_List_Start_IT>
 8005d60:	4603      	mov	r3, r0
 8005d62:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8005d66:	e0f9      	b.n	8005f5c <HAL_DCMI_Start_DMA+0x2f8>
      }
      else
      {
        /* Set Error Code */
        hdcmi->ErrorCode = HAL_DCMI_ERROR_DMA;
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	2240      	movs	r2, #64	; 0x40
 8005d6c:	64da      	str	r2, [r3, #76]	; 0x4c
        /* Change DCMI state */
        hdcmi->State = HAL_DCMI_STATE_READY;
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	2201      	movs	r2, #1
 8005d72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        /* Release Lock */
        __HAL_UNLOCK(hdcmi);
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	2200      	movs	r2, #0
 8005d7a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        /* Return function status */
        status = HAL_ERROR;
 8005d7e:	2301      	movs	r3, #1
 8005d80:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8005d84:	e0ea      	b.n	8005f5c <HAL_DCMI_Start_DMA+0x2f8>
      }
    }
    else
    {
      status = HAL_DMA_Start_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, (uint32_t)pData, tmp_length);
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	3328      	adds	r3, #40	; 0x28
 8005d90:	4619      	mov	r1, r3
 8005d92:	6a3b      	ldr	r3, [r7, #32]
 8005d94:	687a      	ldr	r2, [r7, #4]
 8005d96:	f000 fa64 	bl	8006262 <HAL_DMA_Start_IT>
 8005d9a:	4603      	mov	r3, r0
 8005d9c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8005da0:	e0dc      	b.n	8005f5c <HAL_DCMI_Start_DMA+0x2f8>
  {
    /* Double buffering is used through 2 Nodes
       Calculate the elementary size to be transferred by each node */

    /* Initialize transfer parameters */
    hdcmi->XferCount = 1;
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	2201      	movs	r2, #1
 8005da6:	639a      	str	r2, [r3, #56]	; 0x38
    hdcmi->XferSize = tmp_length;
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	6a3a      	ldr	r2, [r7, #32]
 8005dac:	63da      	str	r2, [r3, #60]	; 0x3c
    hdcmi->pBuffPtr = pData;
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	687a      	ldr	r2, [r7, #4]
 8005db2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Get the number of buffer */
    while (hdcmi->XferSize > 0xFFFFU)
 8005db4:	e009      	b.n	8005dca <HAL_DCMI_Start_DMA+0x166>
    {
      hdcmi->XferSize = (hdcmi->XferSize / 2U);
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005dba:	085a      	lsrs	r2, r3, #1
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	63da      	str	r2, [r3, #60]	; 0x3c
      hdcmi->XferCount = hdcmi->XferCount * 2U;
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dc4:	005a      	lsls	r2, r3, #1
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	639a      	str	r2, [r3, #56]	; 0x38
    while (hdcmi->XferSize > 0xFFFFU)
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005dce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005dd2:	d2f0      	bcs.n	8005db6 <HAL_DCMI_Start_DMA+0x152>
    }

    /* Update DCMI counter  and transfer number*/
    hdcmi->XferCount = (hdcmi->XferCount - 1U);
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dd8:	1e5a      	subs	r2, r3, #1
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	639a      	str	r2, [r3, #56]	; 0x38
    hdcmi->XferTransferNumber = hdcmi->XferCount;
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	641a      	str	r2, [r3, #64]	; 0x40

    if ((hdcmi->DMA_Handle->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005dea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005dec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	f000 80a3 	beq.w	8005f3c <HAL_DCMI_Start_DMA+0x2d8>
    {
      if ((hdcmi->DMA_Handle->LinkedListQueue != 0U) && (hdcmi->DMA_Handle->LinkedListQueue->Head != 0U))
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005dfa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	f000 808a 	beq.w	8005f16 <HAL_DCMI_Start_DMA+0x2b2>
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005e06:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	f000 8083 	beq.w	8005f16 <HAL_DCMI_Start_DMA+0x2b2>
      {
        /* Update first node */

        /* Set DMA Data size */
        hdcmi->DMA_Handle->LinkedListQueue->Head->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = hdcmi->XferSize ;
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005e14:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	68fa      	ldr	r2, [r7, #12]
 8005e1a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005e1c:	609a      	str	r2, [r3, #8]

        /* Set DMA Source address */
        hdcmi->DMA_Handle->LinkedListQueue->Head->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] = \
            (uint32_t)&hdcmi->Instance->DR;
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	f103 0228 	add.w	r2, r3, #40	; 0x28
        hdcmi->DMA_Handle->LinkedListQueue->Head->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] = \
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005e2a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	60da      	str	r2, [r3, #12]

        /* Set DMA Destination address */
        hdcmi->DMA_Handle->LinkedListQueue->Head->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = (uint32_t)pData;
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005e34:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	687a      	ldr	r2, [r7, #4]
 8005e3a:	611a      	str	r2, [r3, #16]

        /* Get CLLR offset */
        cllr_offset = (hdcmi->DMA_Handle->LinkedListQueue->Head->NodeInfo & NODE_CLLR_IDX) >> 8U;
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005e40:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	6a1b      	ldr	r3, [r3, #32]
 8005e46:	0a1b      	lsrs	r3, r3, #8
 8005e48:	f003 0307 	and.w	r3, r3, #7
 8005e4c:	61fb      	str	r3, [r7, #28]

        /* Update second node */
        if (hdcmi->DMA_Handle->LinkedListQueue->Head->LinkRegisters[cllr_offset] != 0U)
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005e52:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	69fa      	ldr	r2, [r7, #28]
 8005e58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d04b      	beq.n	8005ef8 <HAL_DCMI_Start_DMA+0x294>
        {
          tmp1 = (uint32_t)hdcmi->DMA_Handle->LinkedListQueue->Head ;
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005e64:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	61bb      	str	r3, [r7, #24]
          tmp2 = hdcmi->DMA_Handle->LinkedListQueue->Head->LinkRegisters[cllr_offset];
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005e6e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	69fa      	ldr	r2, [r7, #28]
 8005e74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e78:	617b      	str	r3, [r7, #20]
          /* Update second node */

          /* Set DMA Data size */
          ((DMA_NodeTypeDef *)((tmp1 & DMA_CLBAR_LBA) + \
 8005e7a:	69bb      	ldr	r3, [r7, #24]
 8005e7c:	0c1b      	lsrs	r3, r3, #16
 8005e7e:	041b      	lsls	r3, r3, #16
                               (tmp2 & DMA_CLLR_LA)))->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = hdcmi->XferSize;
 8005e80:	6979      	ldr	r1, [r7, #20]
 8005e82:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 8005e86:	400a      	ands	r2, r1
          ((DMA_NodeTypeDef *)((tmp1 & DMA_CLBAR_LBA) + \
 8005e88:	4313      	orrs	r3, r2
 8005e8a:	461a      	mov	r2, r3
                               (tmp2 & DMA_CLLR_LA)))->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = hdcmi->XferSize;
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e90:	6093      	str	r3, [r2, #8]

          /* Set DMA Source address */
          ((DMA_NodeTypeDef *)((tmp1 & DMA_CLBAR_LBA) + \
                               (tmp2 & DMA_CLLR_LA)))->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] = \
                                   (uint32_t)&hdcmi->Instance->DR;
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	f103 0028 	add.w	r0, r3, #40	; 0x28
          ((DMA_NodeTypeDef *)((tmp1 & DMA_CLBAR_LBA) + \
 8005e9a:	69bb      	ldr	r3, [r7, #24]
 8005e9c:	0c1b      	lsrs	r3, r3, #16
 8005e9e:	041b      	lsls	r3, r3, #16
                               (tmp2 & DMA_CLLR_LA)))->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] = \
 8005ea0:	6979      	ldr	r1, [r7, #20]
 8005ea2:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 8005ea6:	400a      	ands	r2, r1
          ((DMA_NodeTypeDef *)((tmp1 & DMA_CLBAR_LBA) + \
 8005ea8:	4313      	orrs	r3, r2
                                   (uint32_t)&hdcmi->Instance->DR;
 8005eaa:	4602      	mov	r2, r0
                               (tmp2 & DMA_CLLR_LA)))->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] = \
 8005eac:	60da      	str	r2, [r3, #12]

          /* Set DMA Destination address */
          ((DMA_NodeTypeDef *)((tmp1 & DMA_CLBAR_LBA) + \
                               (tmp2 & DMA_CLLR_LA)))->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = \
                                   (uint32_t)pData + hdcmi->XferSize;
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
          ((DMA_NodeTypeDef *)((tmp1 & DMA_CLBAR_LBA) + \
 8005eb2:	69bb      	ldr	r3, [r7, #24]
 8005eb4:	0c1b      	lsrs	r3, r3, #16
 8005eb6:	041b      	lsls	r3, r3, #16
                               (tmp2 & DMA_CLLR_LA)))->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = \
 8005eb8:	6978      	ldr	r0, [r7, #20]
 8005eba:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 8005ebe:	4002      	ands	r2, r0
          ((DMA_NodeTypeDef *)((tmp1 & DMA_CLBAR_LBA) + \
 8005ec0:	4313      	orrs	r3, r2
 8005ec2:	461a      	mov	r2, r3
                                   (uint32_t)pData + hdcmi->XferSize;
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	440b      	add	r3, r1
                               (tmp2 & DMA_CLLR_LA)))->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = \
 8005ec8:	6113      	str	r3, [r2, #16]

          if (HAL_DMAEx_List_Start_IT(hdcmi->DMA_Handle) != HAL_OK)
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005ece:	4618      	mov	r0, r3
 8005ed0:	f000 fd94 	bl	80069fc <HAL_DMAEx_List_Start_IT>
 8005ed4:	4603      	mov	r3, r0
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d03f      	beq.n	8005f5a <HAL_DCMI_Start_DMA+0x2f6>
          {
            /* Set Error Code */
            hdcmi->ErrorCode = HAL_DCMI_ERROR_DMA;
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	2240      	movs	r2, #64	; 0x40
 8005ede:	64da      	str	r2, [r3, #76]	; 0x4c
            /* Change DCMI state */
            hdcmi->State = HAL_DCMI_STATE_READY;
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	2201      	movs	r2, #1
 8005ee4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
            /* Release Lock */
            __HAL_UNLOCK(hdcmi);
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	2200      	movs	r2, #0
 8005eec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
            /* Return function status */
            status = HAL_ERROR;
 8005ef0:	2301      	movs	r3, #1
 8005ef2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (hdcmi->DMA_Handle->LinkedListQueue->Head->LinkRegisters[cllr_offset] != 0U)
 8005ef6:	e030      	b.n	8005f5a <HAL_DCMI_Start_DMA+0x2f6>
          }
        }
        else
        {
          /* Set Error Code */
          hdcmi->ErrorCode = HAL_DCMI_ERROR_DMA;
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	2240      	movs	r2, #64	; 0x40
 8005efc:	64da      	str	r2, [r3, #76]	; 0x4c
          /* Change DCMI state */
          hdcmi->State = HAL_DCMI_STATE_READY;
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	2201      	movs	r2, #1
 8005f02:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          /* Release Lock */
          __HAL_UNLOCK(hdcmi);
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	2200      	movs	r2, #0
 8005f0a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          /* Return function status */
          status = HAL_ERROR;
 8005f0e:	2301      	movs	r3, #1
 8005f10:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (hdcmi->DMA_Handle->LinkedListQueue->Head->LinkRegisters[cllr_offset] != 0U)
 8005f14:	e021      	b.n	8005f5a <HAL_DCMI_Start_DMA+0x2f6>
        }
      }
      else
      {
        /* Set Error Code */
        hdcmi->ErrorCode = HAL_DCMI_ERROR_DMA;
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	2240      	movs	r2, #64	; 0x40
 8005f1a:	64da      	str	r2, [r3, #76]	; 0x4c
        /* Change DCMI state */
        hdcmi->State = HAL_DCMI_STATE_READY;
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	2201      	movs	r2, #1
 8005f20:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        /* Release Lock */
        __HAL_UNLOCK(hdcmi);
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	2200      	movs	r2, #0
 8005f28:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        /* Return function status */
        status = HAL_ERROR;
 8005f2c:	2301      	movs	r3, #1
 8005f2e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8005f32:	e013      	b.n	8005f5c <HAL_DCMI_Start_DMA+0x2f8>
 8005f34:	0800611d 	.word	0x0800611d
 8005f38:	08006229 	.word	0x08006229
      }
    }
    else
    {
      /* Set Error Code */
      hdcmi->ErrorCode = HAL_DCMI_ERROR_DMA;
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	2240      	movs	r2, #64	; 0x40
 8005f40:	64da      	str	r2, [r3, #76]	; 0x4c
      /* Change DCMI state */
      hdcmi->State = HAL_DCMI_STATE_READY;
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	2201      	movs	r2, #1
 8005f46:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      /* Release Lock */
      __HAL_UNLOCK(hdcmi);
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	2200      	movs	r2, #0
 8005f4e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      /* Return function status */
      status = HAL_ERROR;
 8005f52:	2301      	movs	r3, #1
 8005f54:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8005f58:	e000      	b.n	8005f5c <HAL_DCMI_Start_DMA+0x2f8>
        if (hdcmi->DMA_Handle->LinkedListQueue->Head->LinkRegisters[cllr_offset] != 0U)
 8005f5a:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 8005f5c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d10c      	bne.n	8005f7e <HAL_DCMI_Start_DMA+0x31a>
  {
    /* Enable Capture */
    hdcmi->Instance->CR |= DCMI_CR_CAPTURE;
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	681a      	ldr	r2, [r3, #0]
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	f042 0201 	orr.w	r2, r2, #1
 8005f72:	601a      	str	r2, [r3, #0]

    /* Release Lock */
    __HAL_UNLOCK(hdcmi);
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	2200      	movs	r2, #0
 8005f78:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 8005f7c:	e00d      	b.n	8005f9a <HAL_DCMI_Start_DMA+0x336>
  }
  else
  {
    /* Set Error Code */
    hdcmi->ErrorCode = HAL_DCMI_ERROR_DMA;
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	2240      	movs	r2, #64	; 0x40
 8005f82:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_READY;
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	2201      	movs	r2, #1
 8005f88:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    /* Release Lock */
    __HAL_UNLOCK(hdcmi);
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	2200      	movs	r2, #0
 8005f90:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    /* Return function status */
    status = HAL_ERROR;
 8005f94:	2301      	movs	r3, #1
 8005f96:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Return function status */
  return status;
 8005f9a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8005f9e:	4618      	mov	r0, r3
 8005fa0:	3728      	adds	r7, #40	; 0x28
 8005fa2:	46bd      	mov	sp, r7
 8005fa4:	bd80      	pop	{r7, pc}
 8005fa6:	bf00      	nop

08005fa8 <HAL_DCMI_IRQHandler>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for the DCMI.
  * @retval None
  */
void HAL_DCMI_IRQHandler(DCMI_HandleTypeDef *hdcmi)
{
 8005fa8:	b580      	push	{r7, lr}
 8005faa:	b084      	sub	sp, #16
 8005fac:	af00      	add	r7, sp, #0
 8005fae:	6078      	str	r0, [r7, #4]
  uint32_t isr_value = READ_REG(hdcmi->Instance->MISR);
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	691b      	ldr	r3, [r3, #16]
 8005fb6:	60fb      	str	r3, [r7, #12]

  /* Synchronization error interrupt management *******************************/
  if ((isr_value & DCMI_FLAG_ERRRI) == DCMI_FLAG_ERRRI)
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	f003 0304 	and.w	r3, r3, #4
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d01e      	beq.n	8006000 <HAL_DCMI_IRQHandler+0x58>
  {
    /* Clear the Synchronization error flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_ERRRI);
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	2204      	movs	r2, #4
 8005fc8:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_SYNC;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005fce:	f043 0202 	orr.w	r2, r3, #2
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	2204      	movs	r2, #4
 8005fda:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Set the synchronization error callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005fe2:	4a39      	ldr	r2, [pc, #228]	; (80060c8 <HAL_DCMI_IRQHandler+0x120>)
 8005fe4:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Abort the DMA Transfer */
    if (HAL_DMA_Abort_IT(hdcmi->DMA_Handle) != HAL_OK)
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005fea:	4618      	mov	r0, r3
 8005fec:	f000 fa15 	bl	800641a <HAL_DMA_Abort_IT>
 8005ff0:	4603      	mov	r3, r0
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d004      	beq.n	8006000 <HAL_DCMI_IRQHandler+0x58>
    {
      DCMI_DMAError(hdcmi->DMA_Handle);
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005ffa:	4618      	mov	r0, r3
 8005ffc:	f000 f914 	bl	8006228 <DCMI_DMAError>
    }
  }
  /* Overflow interrupt management ********************************************/
  if ((isr_value & DCMI_FLAG_OVRRI) == DCMI_FLAG_OVRRI)
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	f003 0302 	and.w	r3, r3, #2
 8006006:	2b00      	cmp	r3, #0
 8006008:	d01e      	beq.n	8006048 <HAL_DCMI_IRQHandler+0xa0>
  {
    /* Clear the Overflow flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_OVRRI);
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	2202      	movs	r2, #2
 8006010:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_OVR;
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006016:	f043 0201 	orr.w	r2, r3, #1
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	2204      	movs	r2, #4
 8006022:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Set the overflow callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800602a:	4a27      	ldr	r2, [pc, #156]	; (80060c8 <HAL_DCMI_IRQHandler+0x120>)
 800602c:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Abort the DMA Transfer */
    if (HAL_DMA_Abort_IT(hdcmi->DMA_Handle) != HAL_OK)
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006032:	4618      	mov	r0, r3
 8006034:	f000 f9f1 	bl	800641a <HAL_DMA_Abort_IT>
 8006038:	4603      	mov	r3, r0
 800603a:	2b00      	cmp	r3, #0
 800603c:	d004      	beq.n	8006048 <HAL_DCMI_IRQHandler+0xa0>
    {
      DCMI_DMAError(hdcmi->DMA_Handle);
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006042:	4618      	mov	r0, r3
 8006044:	f000 f8f0 	bl	8006228 <DCMI_DMAError>
    }
  }
  /* Line Interrupt management ************************************************/
  if ((isr_value & DCMI_FLAG_LINERI) == DCMI_FLAG_LINERI)
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	f003 0310 	and.w	r3, r3, #16
 800604e:	2b00      	cmp	r3, #0
 8006050:	d006      	beq.n	8006060 <HAL_DCMI_IRQHandler+0xb8>
  {
    /* Clear the Line interrupt flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_LINERI);
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	2210      	movs	r2, #16
 8006058:	615a      	str	r2, [r3, #20]
    /* Line interrupt Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI line event callback*/
    hdcmi->LineEventCallback(hdcmi);
#else
    HAL_DCMI_LineEventCallback(hdcmi);
 800605a:	6878      	ldr	r0, [r7, #4]
 800605c:	f000 f840 	bl	80060e0 <HAL_DCMI_LineEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
  /* VSYNC interrupt management ***********************************************/
  if ((isr_value & DCMI_FLAG_VSYNCRI) == DCMI_FLAG_VSYNCRI)
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	f003 0308 	and.w	r3, r3, #8
 8006066:	2b00      	cmp	r3, #0
 8006068:	d006      	beq.n	8006078 <HAL_DCMI_IRQHandler+0xd0>
  {
    /* Clear the VSYNC flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_VSYNCRI);
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	2208      	movs	r2, #8
 8006070:	615a      	str	r2, [r3, #20]
    /* VSYNC Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI vsync event callback*/
    hdcmi->VsyncEventCallback(hdcmi);
#else
    HAL_DCMI_VsyncEventCallback(hdcmi);
 8006072:	6878      	ldr	r0, [r7, #4]
 8006074:	f000 f83e 	bl	80060f4 <HAL_DCMI_VsyncEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
  /* FRAME interrupt management ***********************************************/
  if ((isr_value & DCMI_FLAG_FRAMERI) == DCMI_FLAG_FRAMERI)
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	f003 0301 	and.w	r3, r3, #1
 800607e:	2b00      	cmp	r3, #0
 8006080:	d01d      	beq.n	80060be <HAL_DCMI_IRQHandler+0x116>
  {
    /* When snapshot mode, disable Vsync, Error and Overrun interrupts */
    if ((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	f003 0302 	and.w	r3, r3, #2
 800608c:	2b02      	cmp	r3, #2
 800608e:	d107      	bne.n	80060a0 <HAL_DCMI_IRQHandler+0xf8>
    {
      /* Disable the Line, Vsync, Error and Overrun interrupts */
      __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	68da      	ldr	r2, [r3, #12]
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	f022 021e 	bic.w	r2, r2, #30
 800609e:	60da      	str	r2, [r3, #12]
    }

    /* Disable the Frame interrupt */
    __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_FRAME);
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	68da      	ldr	r2, [r3, #12]
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	f022 0201 	bic.w	r2, r2, #1
 80060ae:	60da      	str	r2, [r3, #12]

    /* Clear the End of Frame flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_FRAMERI);
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	2201      	movs	r2, #1
 80060b6:	615a      	str	r2, [r3, #20]
    /* Frame Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI frame event callback*/
    hdcmi->FrameEventCallback(hdcmi);
#else
    HAL_DCMI_FrameEventCallback(hdcmi);
 80060b8:	6878      	ldr	r0, [r7, #4]
 80060ba:	f000 f825 	bl	8006108 <HAL_DCMI_FrameEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
}
 80060be:	bf00      	nop
 80060c0:	3710      	adds	r7, #16
 80060c2:	46bd      	mov	sp, r7
 80060c4:	bd80      	pop	{r7, pc}
 80060c6:	bf00      	nop
 80060c8:	08006229 	.word	0x08006229

080060cc <HAL_DCMI_ErrorCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_ErrorCallback(DCMI_HandleTypeDef *hdcmi)
{
 80060cc:	b480      	push	{r7}
 80060ce:	b083      	sub	sp, #12
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	6078      	str	r0, [r7, #4]
  UNUSED(hdcmi);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_ErrorCallback could be implemented in the user file
   */
}
 80060d4:	bf00      	nop
 80060d6:	370c      	adds	r7, #12
 80060d8:	46bd      	mov	sp, r7
 80060da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060de:	4770      	bx	lr

080060e0 <HAL_DCMI_LineEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_LineEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 80060e0:	b480      	push	{r7}
 80060e2:	b083      	sub	sp, #12
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_LineEventCallback could be implemented in the user file
   */
}
 80060e8:	bf00      	nop
 80060ea:	370c      	adds	r7, #12
 80060ec:	46bd      	mov	sp, r7
 80060ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f2:	4770      	bx	lr

080060f4 <HAL_DCMI_VsyncEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_VsyncEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 80060f4:	b480      	push	{r7}
 80060f6:	b083      	sub	sp, #12
 80060f8:	af00      	add	r7, sp, #0
 80060fa:	6078      	str	r0, [r7, #4]
  UNUSED(hdcmi);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_VsyncEventCallback could be implemented in the user file
   */
}
 80060fc:	bf00      	nop
 80060fe:	370c      	adds	r7, #12
 8006100:	46bd      	mov	sp, r7
 8006102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006106:	4770      	bx	lr

08006108 <HAL_DCMI_FrameEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_FrameEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8006108:	b480      	push	{r7}
 800610a:	b083      	sub	sp, #12
 800610c:	af00      	add	r7, sp, #0
 800610e:	6078      	str	r0, [r7, #4]
  UNUSED(hdcmi);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_FrameEventCallback could be implemented in the user file
   */
}
 8006110:	bf00      	nop
 8006112:	370c      	adds	r7, #12
 8006114:	46bd      	mov	sp, r7
 8006116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611a:	4770      	bx	lr

0800611c <DCMI_DMAXferCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 800611c:	b480      	push	{r7}
 800611e:	b08b      	sub	sp, #44	; 0x2c
 8006120:	af00      	add	r7, sp, #0
 8006122:	6078      	str	r0, [r7, #4]

  DCMI_HandleTypeDef *hdcmi = (DCMI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006128:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t transfernumber;
  uint32_t transfercount;
  uint32_t transfersize ;

  /* Update Nodes destinations */
  if (hdcmi->XferSize != 0U)
 800612a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800612c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800612e:	2b00      	cmp	r3, #0
 8006130:	d061      	beq.n	80061f6 <DCMI_DMAXferCplt+0xda>
  {
    pbuff          = hdcmi->pBuffPtr;
 8006132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006134:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006136:	623b      	str	r3, [r7, #32]
    transfernumber = hdcmi->XferTransferNumber;
 8006138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800613a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800613c:	61fb      	str	r3, [r7, #28]
    transfercount  = hdcmi->XferCount;
 800613e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006140:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006142:	61bb      	str	r3, [r7, #24]
    transfersize   = hdcmi->XferSize;
 8006144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006146:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006148:	617b      	str	r3, [r7, #20]

    tmp1 = hdcmi->DMA_Handle->Instance->CLLR & DMA_CLLR_LA;
 800614a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800614c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8006152:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 8006156:	4013      	ands	r3, r2
 8006158:	613b      	str	r3, [r7, #16]
    tmp2 = hdcmi->DMA_Handle->Instance->CLBAR & DMA_CLBAR_LBA;
 800615a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800615c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	0c1b      	lsrs	r3, r3, #16
 8006164:	041b      	lsls	r3, r3, #16
 8006166:	60fb      	str	r3, [r7, #12]
    pnode = (DMA_NodeTypeDef *)(uint32_t)(tmp1 | tmp2);
 8006168:	693a      	ldr	r2, [r7, #16]
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	4313      	orrs	r3, r2
 800616e:	60bb      	str	r3, [r7, #8]

    if (hdcmi->XferCount > 1U)
 8006170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006172:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006174:	2b01      	cmp	r3, #1
 8006176:	d910      	bls.n	800619a <DCMI_DMAXferCplt+0x7e>
    {
      pnode->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = pbuff + ((transfernumber - transfercount + 2U) * transfersize);
 8006178:	69fa      	ldr	r2, [r7, #28]
 800617a:	69bb      	ldr	r3, [r7, #24]
 800617c:	1ad3      	subs	r3, r2, r3
 800617e:	3302      	adds	r3, #2
 8006180:	697a      	ldr	r2, [r7, #20]
 8006182:	fb03 f202 	mul.w	r2, r3, r2
 8006186:	6a3b      	ldr	r3, [r7, #32]
 8006188:	441a      	add	r2, r3
 800618a:	68bb      	ldr	r3, [r7, #8]
 800618c:	611a      	str	r2, [r3, #16]
      hdcmi->XferCount--;
 800618e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006190:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006192:	1e5a      	subs	r2, r3, #1
 8006194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006196:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
    {
      hdcmi->State = HAL_DCMI_STATE_READY;
    }
  }
}
 8006198:	e040      	b.n	800621c <DCMI_DMAXferCplt+0x100>
    else if (hdcmi->XferCount == 1U)
 800619a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800619c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800619e:	2b01      	cmp	r3, #1
 80061a0:	d109      	bne.n	80061b6 <DCMI_DMAXferCplt+0x9a>
      pnode->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = hdcmi->pBuffPtr;
 80061a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061a4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80061a6:	68bb      	ldr	r3, [r7, #8]
 80061a8:	611a      	str	r2, [r3, #16]
      hdcmi->XferCount--;
 80061aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061ae:	1e5a      	subs	r2, r3, #1
 80061b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061b2:	639a      	str	r2, [r3, #56]	; 0x38
}
 80061b4:	e032      	b.n	800621c <DCMI_DMAXferCplt+0x100>
      pnode->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = hdcmi->pBuffPtr + hdcmi->XferSize;
 80061b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061b8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80061ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061be:	441a      	add	r2, r3
 80061c0:	68bb      	ldr	r3, [r7, #8]
 80061c2:	611a      	str	r2, [r3, #16]
      if ((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_CONTINUOUS)
 80061c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	f003 0302 	and.w	r3, r3, #2
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d104      	bne.n	80061dc <DCMI_DMAXferCplt+0xc0>
        hdcmi->XferCount = hdcmi->XferTransferNumber ;
 80061d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061d4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80061d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061d8:	639a      	str	r2, [r3, #56]	; 0x38
 80061da:	e003      	b.n	80061e4 <DCMI_DMAXferCplt+0xc8>
        hdcmi->State = HAL_DCMI_STATE_READY;
 80061dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061de:	2201      	movs	r2, #1
 80061e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_FRAME);
 80061e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	68da      	ldr	r2, [r3, #12]
 80061ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	f042 0201 	orr.w	r2, r2, #1
 80061f2:	60da      	str	r2, [r3, #12]
}
 80061f4:	e012      	b.n	800621c <DCMI_DMAXferCplt+0x100>
    __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_FRAME);
 80061f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	68da      	ldr	r2, [r3, #12]
 80061fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	f042 0201 	orr.w	r2, r2, #1
 8006204:	60da      	str	r2, [r3, #12]
    if ((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 8006206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	f003 0302 	and.w	r3, r3, #2
 8006210:	2b02      	cmp	r3, #2
 8006212:	d103      	bne.n	800621c <DCMI_DMAXferCplt+0x100>
      hdcmi->State = HAL_DCMI_STATE_READY;
 8006214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006216:	2201      	movs	r2, #1
 8006218:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
}
 800621c:	bf00      	nop
 800621e:	372c      	adds	r7, #44	; 0x2c
 8006220:	46bd      	mov	sp, r7
 8006222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006226:	4770      	bx	lr

08006228 <DCMI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAError(DMA_HandleTypeDef *hdma)
{
 8006228:	b580      	push	{r7, lr}
 800622a:	b084      	sub	sp, #16
 800622c:	af00      	add	r7, sp, #0
 800622e:	6078      	str	r0, [r7, #4]
  DCMI_HandleTypeDef *hdcmi = (DCMI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006234:	60fb      	str	r3, [r7, #12]

  if (hdcmi->DMA_Handle->ErrorCode != HAL_DMA_ERROR_ULE)
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800623a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800623c:	2b02      	cmp	r3, #2
 800623e:	d009      	beq.n	8006254 <DCMI_DMAError+0x2c>
  {
    /* Initialize the DCMI state*/
    hdcmi->State = HAL_DCMI_STATE_READY;
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	2201      	movs	r2, #1
 8006244:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Set DCMI Error Code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_DMA;
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800624c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	64da      	str	r2, [r3, #76]	; 0x4c
  /* DCMI error Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
  /*Call registered DCMI error callback*/
  hdcmi->ErrorCallback(hdcmi);
#else
  HAL_DCMI_ErrorCallback(hdcmi);
 8006254:	68f8      	ldr	r0, [r7, #12]
 8006256:	f7ff ff39 	bl	80060cc <HAL_DCMI_ErrorCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */

}
 800625a:	bf00      	nop
 800625c:	3710      	adds	r7, #16
 800625e:	46bd      	mov	sp, r7
 8006260:	bd80      	pop	{r7, pc}

08006262 <HAL_DMA_Start_IT>:
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *const hdma,
                                   uint32_t SrcAddress,
                                   uint32_t DstAddress,
                                   uint32_t SrcDataSize)
{
 8006262:	b580      	push	{r7, lr}
 8006264:	b084      	sub	sp, #16
 8006266:	af00      	add	r7, sp, #0
 8006268:	60f8      	str	r0, [r7, #12]
 800626a:	60b9      	str	r1, [r7, #8]
 800626c:	607a      	str	r2, [r7, #4]
 800626e:	603b      	str	r3, [r7, #0]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	2b00      	cmp	r3, #0
 8006274:	d101      	bne.n	800627a <HAL_DMA_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006276:	2301      	movs	r3, #1
 8006278:	e04f      	b.n	800631a <HAL_DMA_Start_IT+0xb8>

  /* Check the parameters */
  assert_param(IS_DMA_BLOCK_SIZE(SrcDataSize));

  /* Process locked */
  __HAL_LOCK(hdma);
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8006280:	2b01      	cmp	r3, #1
 8006282:	d101      	bne.n	8006288 <HAL_DMA_Start_IT+0x26>
 8006284:	2302      	movs	r3, #2
 8006286:	e048      	b.n	800631a <HAL_DMA_Start_IT+0xb8>
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	2201      	movs	r2, #1
 800628c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  /* Check DMA channel state */
  if (hdma->State == HAL_DMA_STATE_READY)
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8006296:	b2db      	uxtb	r3, r3
 8006298:	2b01      	cmp	r3, #1
 800629a:	d136      	bne.n	800630a <HAL_DMA_Start_IT+0xa8>
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	2202      	movs	r2, #2
 80062a0:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	2200      	movs	r2, #0
 80062a8:	659a      	str	r2, [r3, #88]	; 0x58

    /* Configure the source address, destination address, the data size and clear flags */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, SrcDataSize);
 80062aa:	683b      	ldr	r3, [r7, #0]
 80062ac:	687a      	ldr	r2, [r7, #4]
 80062ae:	68b9      	ldr	r1, [r7, #8]
 80062b0:	68f8      	ldr	r0, [r7, #12]
 80062b2:	f000 fa4f 	bl	8006754 <DMA_SetConfig>

    /* Enable common interrupts: Transfer Complete and Transfer Errors ITs */
    __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_DTE | DMA_IT_ULE | DMA_IT_USE | DMA_IT_TO));
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	695a      	ldr	r2, [r3, #20]
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	f442 42ba 	orr.w	r2, r2, #23808	; 0x5d00
 80062c4:	615a      	str	r2, [r3, #20]

    /* Check half transfer complete callback */
    if (hdma->XferHalfCpltCallback != NULL)
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d007      	beq.n	80062de <HAL_DMA_Start_IT+0x7c>
    {
      /* If Half Transfer complete callback is set, enable the corresponding IT */
      __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	695a      	ldr	r2, [r3, #20]
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80062dc:	615a      	str	r2, [r3, #20]
    }

    /* Check Half suspend callback */
    if (hdma->XferSuspendCallback != NULL)
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d007      	beq.n	80062f6 <HAL_DMA_Start_IT+0x94>
    {
      /* If Transfer suspend callback is set, enable the corresponding IT */
      __HAL_DMA_ENABLE_IT(hdma, DMA_IT_SUSP);
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	695a      	ldr	r2, [r3, #20]
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80062f4:	615a      	str	r2, [r3, #20]
    }

    /* Enable DMA channel */
    __HAL_DMA_ENABLE(hdma);
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	695a      	ldr	r2, [r3, #20]
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	f042 0201 	orr.w	r2, r2, #1
 8006304:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hdma);

    return HAL_ERROR;
  }

  return HAL_OK;
 8006306:	2300      	movs	r3, #0
 8006308:	e007      	b.n	800631a <HAL_DMA_Start_IT+0xb8>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	2240      	movs	r2, #64	; 0x40
 800630e:	659a      	str	r2, [r3, #88]	; 0x58
    __HAL_UNLOCK(hdma);
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	2200      	movs	r2, #0
 8006314:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    return HAL_ERROR;
 8006318:	2301      	movs	r3, #1
}
 800631a:	4618      	mov	r0, r3
 800631c:	3710      	adds	r7, #16
 800631e:	46bd      	mov	sp, r7
 8006320:	bd80      	pop	{r7, pc}

08006322 <HAL_DMA_Abort>:
  *         is suspended while a data transfer is on-going, the current data will be transferred and the channel will be
  *         effectively suspended only after the transfer of any on-going data is finished.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *const hdma)
{
 8006322:	b580      	push	{r7, lr}
 8006324:	b084      	sub	sp, #16
 8006326:	af00      	add	r7, sp, #0
 8006328:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart =  HAL_GetTick();
 800632a:	f7ff fa5b 	bl	80057e4 <HAL_GetTick>
 800632e:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	2b00      	cmp	r3, #0
 8006334:	d101      	bne.n	800633a <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8006336:	2301      	movs	r3, #1
 8006338:	e06b      	b.n	8006412 <HAL_DMA_Abort+0xf0>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8006340:	b2db      	uxtb	r3, r3
 8006342:	2b02      	cmp	r3, #2
 8006344:	d008      	beq.n	8006358 <HAL_DMA_Abort+0x36>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	2220      	movs	r2, #32
 800634a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	2200      	movs	r2, #0
 8006350:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

    return HAL_ERROR;
 8006354:	2301      	movs	r3, #1
 8006356:	e05c      	b.n	8006412 <HAL_DMA_Abort+0xf0>
  }
  else
  {
    /* Suspend the channel */
    hdma->Instance->CCR |= DMA_CCR_SUSP;
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	695a      	ldr	r2, [r3, #20]
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	f042 0204 	orr.w	r2, r2, #4
 8006366:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_SUSPEND;
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	2205      	movs	r2, #5
 800636c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Check if the DMA Channel is suspended */
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 8006370:	e020      	b.n	80063b4 <HAL_DMA_Abort+0x92>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 8006372:	f7ff fa37 	bl	80057e4 <HAL_GetTick>
 8006376:	4602      	mov	r2, r0
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	1ad3      	subs	r3, r2, r3
 800637c:	2b05      	cmp	r3, #5
 800637e:	d919      	bls.n	80063b4 <HAL_DMA_Abort+0x92>
      {
        /* Update the DMA channel error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TIMEOUT;
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006384:	f043 0210 	orr.w	r2, r3, #16
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	659a      	str	r2, [r3, #88]	; 0x58

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	2203      	movs	r2, #3
 8006390:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006398:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800639c:	2b00      	cmp	r3, #0
 800639e:	d003      	beq.n	80063a8 <HAL_DMA_Abort+0x86>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80063a4:	2201      	movs	r2, #1
 80063a6:	731a      	strb	r2, [r3, #12]
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	2200      	movs	r2, #0
 80063ac:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        return HAL_ERROR;
 80063b0:	2301      	movs	r3, #1
 80063b2:	e02e      	b.n	8006412 <HAL_DMA_Abort+0xf0>
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	691b      	ldr	r3, [r3, #16]
 80063ba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d0d7      	beq.n	8006372 <HAL_DMA_Abort+0x50>
      }
    }

    /* Reset the channel */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	695a      	ldr	r2, [r3, #20]
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	f042 0202 	orr.w	r2, r2, #2
 80063d0:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	2204      	movs	r2, #4
 80063d6:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Clear all status flags */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	f44f 42fe 	mov.w	r2, #32512	; 0x7f00
 80063e2:	60da      	str	r2, [r3, #12]
                                DMA_FLAG_TO));

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	2201      	movs	r2, #1
 80063e8:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80063f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d007      	beq.n	8006408 <HAL_DMA_Abort+0xe6>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80063fc:	2201      	movs	r2, #1
 80063fe:	731a      	strb	r2, [r3, #12]

      /* Clear remaining data size to ensure loading linked-list from memory next start */
      hdma->Instance->CBR1 = 0U;
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	2200      	movs	r2, #0
 8006406:	649a      	str	r2, [r3, #72]	; 0x48
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	2200      	movs	r2, #0
 800640c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8006410:	2300      	movs	r3, #0
}
 8006412:	4618      	mov	r0, r3
 8006414:	3710      	adds	r7, #16
 8006416:	46bd      	mov	sp, r7
 8006418:	bd80      	pop	{r7, pc}

0800641a <HAL_DMA_Abort_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *const hdma)
{
 800641a:	b480      	push	{r7}
 800641c:	b083      	sub	sp, #12
 800641e:	af00      	add	r7, sp, #0
 8006420:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	2b00      	cmp	r3, #0
 8006426:	d101      	bne.n	800642c <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8006428:	2301      	movs	r3, #1
 800642a:	e019      	b.n	8006460 <HAL_DMA_Abort_IT+0x46>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8006432:	b2db      	uxtb	r3, r3
 8006434:	2b02      	cmp	r3, #2
 8006436:	d004      	beq.n	8006442 <HAL_DMA_Abort_IT+0x28>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	2220      	movs	r2, #32
 800643c:	659a      	str	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 800643e:	2301      	movs	r3, #1
 8006440:	e00e      	b.n	8006460 <HAL_DMA_Abort_IT+0x46>
  }
  else
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	2204      	movs	r2, #4
 8006446:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Suspend the channel and activate suspend interrupt */
    hdma->Instance->CCR |= (DMA_CCR_SUSP | DMA_CCR_SUSPIE);
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	695b      	ldr	r3, [r3, #20]
 8006450:	687a      	ldr	r2, [r7, #4]
 8006452:	6812      	ldr	r2, [r2, #0]
 8006454:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8006458:	f043 0304 	orr.w	r3, r3, #4
 800645c:	6153      	str	r3, [r2, #20]
  }

  return HAL_OK;
 800645e:	2300      	movs	r3, #0
}
 8006460:	4618      	mov	r0, r3
 8006462:	370c      	adds	r7, #12
 8006464:	46bd      	mov	sp, r7
 8006466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800646a:	4770      	bx	lr

0800646c <HAL_DMA_IRQHandler>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *const hdma)
{
 800646c:	b580      	push	{r7, lr}
 800646e:	b084      	sub	sp, #16
 8006470:	af00      	add	r7, sp, #0
 8006472:	6078      	str	r0, [r7, #4]
  DMA_TypeDef *p_dma_instance = GET_DMA_INSTANCE(hdma);
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800647c:	f023 030f 	bic.w	r3, r3, #15
 8006480:	60fb      	str	r3, [r7, #12]
  uint32_t global_it_flag =  1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800648a:	3b50      	subs	r3, #80	; 0x50
 800648c:	09db      	lsrs	r3, r3, #7
 800648e:	f003 031f 	and.w	r3, r3, #31
 8006492:	2201      	movs	r2, #1
 8006494:	fa02 f303 	lsl.w	r3, r2, r3
 8006498:	60bb      	str	r3, [r7, #8]

  /* Global Interrupt Flag management *********************************************************************************/
  if (IS_DMA_GLOBAL_ACTIVE_FLAG(p_dma_instance, global_it_flag) == 0U)
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	68da      	ldr	r2, [r3, #12]
 800649e:	68bb      	ldr	r3, [r7, #8]
 80064a0:	4013      	ands	r3, r2
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	f000 8150 	beq.w	8006748 <HAL_DMA_IRQHandler+0x2dc>
  {
    return; /* the global interrupt flag for the current channel is down , nothing to do */
  }

  /* Data Transfer Error Interrupt management *************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_DTE) != 0U))
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	691b      	ldr	r3, [r3, #16]
 80064ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d011      	beq.n	80064da <HAL_DMA_IRQHandler+0x6e>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DTE) != 0U)
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	695b      	ldr	r3, [r3, #20]
 80064bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d00a      	beq.n	80064da <HAL_DMA_IRQHandler+0x6e>
    {
      /* Clear the transfer error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_DTE);
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80064cc:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DTE;
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064d2:	f043 0201 	orr.w	r2, r3, #1
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }

  /* Update Linked-list Error Interrupt management ********************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_ULE) != 0U))
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	691b      	ldr	r3, [r3, #16]
 80064e0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d011      	beq.n	800650c <HAL_DMA_IRQHandler+0xa0>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_ULE) != 0U)
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	695b      	ldr	r3, [r3, #20]
 80064ee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d00a      	beq.n	800650c <HAL_DMA_IRQHandler+0xa0>
    {
      /* Clear the update linked-list error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_ULE);
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80064fe:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_ULE;
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006504:	f043 0202 	orr.w	r2, r3, #2
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }

  /* User Setting Error Interrupt management **************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_USE) != 0U))
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	691b      	ldr	r3, [r3, #16]
 8006512:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006516:	2b00      	cmp	r3, #0
 8006518:	d011      	beq.n	800653e <HAL_DMA_IRQHandler+0xd2>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_USE) != 0U)
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	695b      	ldr	r3, [r3, #20]
 8006520:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006524:	2b00      	cmp	r3, #0
 8006526:	d00a      	beq.n	800653e <HAL_DMA_IRQHandler+0xd2>
    {
      /* Clear the user setting error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_USE);
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006530:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_USE;
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006536:	f043 0204 	orr.w	r2, r3, #4
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }

  /* Trigger Overrun Interrupt management *****************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TO) != 0U))
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	691b      	ldr	r3, [r3, #16]
 8006544:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006548:	2b00      	cmp	r3, #0
 800654a:	d011      	beq.n	8006570 <HAL_DMA_IRQHandler+0x104>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TO) != 0U)
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	695b      	ldr	r3, [r3, #20]
 8006552:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006556:	2b00      	cmp	r3, #0
 8006558:	d00a      	beq.n	8006570 <HAL_DMA_IRQHandler+0x104>
    {
      /* Clear the trigger overrun flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_TO);
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006562:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TO;
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006568:	f043 0208 	orr.w	r2, r3, #8
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }

  /* Half Transfer Complete Interrupt management **********************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_HT) != 0U))
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	691b      	ldr	r3, [r3, #16]
 8006576:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800657a:	2b00      	cmp	r3, #0
 800657c:	d013      	beq.n	80065a6 <HAL_DMA_IRQHandler+0x13a>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	695b      	ldr	r3, [r3, #20]
 8006584:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006588:	2b00      	cmp	r3, #0
 800658a:	d00c      	beq.n	80065a6 <HAL_DMA_IRQHandler+0x13a>
    {
      /* Clear the half transfer flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_HT);
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006594:	60da      	str	r2, [r3, #12]

      /* Check half transfer complete callback */
      if (hdma->XferHalfCpltCallback != NULL)
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800659a:	2b00      	cmp	r3, #0
 800659c:	d003      	beq.n	80065a6 <HAL_DMA_IRQHandler+0x13a>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80065a2:	6878      	ldr	r0, [r7, #4]
 80065a4:	4798      	blx	r3
      }
    }
  }

  /* Suspend Transfer Interrupt management ****************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_SUSP) != 0U))
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	691b      	ldr	r3, [r3, #16]
 80065ac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d055      	beq.n	8006660 <HAL_DMA_IRQHandler+0x1f4>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_SUSP) != 0U)
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	695b      	ldr	r3, [r3, #20]
 80065ba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d04e      	beq.n	8006660 <HAL_DMA_IRQHandler+0x1f4>
    {
      /* Clear the block transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_SUSP);
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80065ca:	60da      	str	r2, [r3, #12]

      /* Check DMA channel state */
      if (hdma->State == HAL_DMA_STATE_ABORT)
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80065d2:	b2db      	uxtb	r3, r3
 80065d4:	2b04      	cmp	r3, #4
 80065d6:	d137      	bne.n	8006648 <HAL_DMA_IRQHandler+0x1dc>
      {
        /* Disable the suspend transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_SUSP);
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	695a      	ldr	r2, [r3, #20]
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80065e6:	615a      	str	r2, [r3, #20]

        /* Reset the channel internal state and reset the FIFO */
        hdma->Instance->CCR |= DMA_CCR_RESET;
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	695a      	ldr	r2, [r3, #20]
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	f042 0202 	orr.w	r2, r2, #2
 80065f6:	615a      	str	r2, [r3, #20]

        if ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	695b      	ldr	r3, [r3, #20]
 80065fe:	f003 0301 	and.w	r3, r3, #1
 8006602:	2b00      	cmp	r3, #0
 8006604:	d004      	beq.n	8006610 <HAL_DMA_IRQHandler+0x1a4>
        {
          /* Update the DMA channel state */
          hdma->State = HAL_DMA_STATE_ERROR;
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	2203      	movs	r2, #3
 800660a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 800660e:	e003      	b.n	8006618 <HAL_DMA_IRQHandler+0x1ac>
        }
        else
        {
          /* Update the DMA channel state */
          hdma->State = HAL_DMA_STATE_READY;
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	2201      	movs	r2, #1
 8006614:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
        }

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800661c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006620:	2b00      	cmp	r3, #0
 8006622:	d003      	beq.n	800662c <HAL_DMA_IRQHandler+0x1c0>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006628:	2201      	movs	r2, #1
 800662a:	731a      	strb	r2, [r3, #12]
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	2200      	movs	r2, #0
 8006630:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        /* Check transfer abort callback */
        if (hdma->XferAbortCallback != NULL)
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006638:	2b00      	cmp	r3, #0
 800663a:	f000 8087 	beq.w	800674c <HAL_DMA_IRQHandler+0x2e0>
        {
          /* Transfer abort callback */
          hdma->XferAbortCallback(hdma);
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006642:	6878      	ldr	r0, [r7, #4]
 8006644:	4798      	blx	r3
        }

        return;
 8006646:	e081      	b.n	800674c <HAL_DMA_IRQHandler+0x2e0>
      }
      else
      {
        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_SUSPEND;
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	2205      	movs	r2, #5
 800664c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

        /* Check transfer suspend callback */
        if (hdma->XferSuspendCallback != NULL)
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006654:	2b00      	cmp	r3, #0
 8006656:	d003      	beq.n	8006660 <HAL_DMA_IRQHandler+0x1f4>
        {
          /* Transfer suspend callback */
          hdma->XferSuspendCallback(hdma);
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800665c:	6878      	ldr	r0, [r7, #4]
 800665e:	4798      	blx	r3
      }
    }
  }

  /* Transfer Complete Interrupt management ***************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TC) != 0U))
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	691b      	ldr	r3, [r3, #16]
 8006666:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800666a:	2b00      	cmp	r3, #0
 800666c:	d039      	beq.n	80066e2 <HAL_DMA_IRQHandler+0x276>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	695b      	ldr	r3, [r3, #20]
 8006674:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006678:	2b00      	cmp	r3, #0
 800667a:	d032      	beq.n	80066e2 <HAL_DMA_IRQHandler+0x276>
    {
      /* Check DMA channel transfer mode */
      if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006680:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006684:	2b00      	cmp	r3, #0
 8006686:	d012      	beq.n	80066ae <HAL_DMA_IRQHandler+0x242>
      {
        /* If linked-list transfer */
        if (hdma->Instance->CLLR == 0U)
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800668e:	2b00      	cmp	r3, #0
 8006690:	d116      	bne.n	80066c0 <HAL_DMA_IRQHandler+0x254>
        {
          if (hdma->Instance->CBR1 == 0U)
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006698:	2b00      	cmp	r3, #0
 800669a:	d111      	bne.n	80066c0 <HAL_DMA_IRQHandler+0x254>
          {
            /* Update the DMA channel state */
            hdma->State = HAL_DMA_STATE_READY;
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	2201      	movs	r2, #1
 80066a0:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

            /* Update the linked-list queue state */
            hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80066a8:	2201      	movs	r2, #1
 80066aa:	731a      	strb	r2, [r3, #12]
 80066ac:	e008      	b.n	80066c0 <HAL_DMA_IRQHandler+0x254>
        }
      }
      else
      {
        /* If normal transfer */
        if (hdma->Instance->CBR1 == 0U)
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d103      	bne.n	80066c0 <HAL_DMA_IRQHandler+0x254>
        {
          /* Update the DMA channel state */
          hdma->State = HAL_DMA_STATE_READY;
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	2201      	movs	r2, #1
 80066bc:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
        }
      }

      /* Clear TC and HT transfer flags */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT));
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	f44f 7240 	mov.w	r2, #768	; 0x300
 80066c8:	60da      	str	r2, [r3, #12]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	2200      	movs	r2, #0
 80066ce:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

      /* Check transfer complete callback */
      if (hdma->XferCpltCallback != NULL)
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d003      	beq.n	80066e2 <HAL_DMA_IRQHandler+0x276>
      {
        /* Channel Transfer Complete callback */
        hdma->XferCpltCallback(hdma);
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80066de:	6878      	ldr	r0, [r7, #4]
 80066e0:	4798      	blx	r3
      }
    }
  }

  /* Manage error case ************************************************************************************************/
  if (hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d031      	beq.n	800674e <HAL_DMA_IRQHandler+0x2e2>
  {
    /* Reset the channel internal state and reset the FIFO */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	695a      	ldr	r2, [r3, #20]
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	f042 0202 	orr.w	r2, r2, #2
 80066f8:	615a      	str	r2, [r3, #20]

    if ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	695b      	ldr	r3, [r3, #20]
 8006700:	f003 0301 	and.w	r3, r3, #1
 8006704:	2b00      	cmp	r3, #0
 8006706:	d004      	beq.n	8006712 <HAL_DMA_IRQHandler+0x2a6>
    {
      /* Update the DMA channel state */
      hdma->State = HAL_DMA_STATE_ERROR;
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	2203      	movs	r2, #3
 800670c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 8006710:	e003      	b.n	800671a <HAL_DMA_IRQHandler+0x2ae>
    }
    else
    {
      /* Update the DMA channel state */
      hdma->State = HAL_DMA_STATE_READY;
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	2201      	movs	r2, #1
 8006716:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
    }

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800671e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006722:	2b00      	cmp	r3, #0
 8006724:	d003      	beq.n	800672e <HAL_DMA_IRQHandler+0x2c2>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800672a:	2201      	movs	r2, #1
 800672c:	731a      	strb	r2, [r3, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	2200      	movs	r2, #0
 8006732:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

    /* Check transfer error callback */
    if (hdma->XferErrorCallback != NULL)
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800673a:	2b00      	cmp	r3, #0
 800673c:	d007      	beq.n	800674e <HAL_DMA_IRQHandler+0x2e2>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006742:	6878      	ldr	r0, [r7, #4]
 8006744:	4798      	blx	r3
 8006746:	e002      	b.n	800674e <HAL_DMA_IRQHandler+0x2e2>
    return; /* the global interrupt flag for the current channel is down , nothing to do */
 8006748:	bf00      	nop
 800674a:	e000      	b.n	800674e <HAL_DMA_IRQHandler+0x2e2>
        return;
 800674c:	bf00      	nop
    }
  }
}
 800674e:	3710      	adds	r7, #16
 8006750:	46bd      	mov	sp, r7
 8006752:	bd80      	pop	{r7, pc}

08006754 <DMA_SetConfig>:
  */
static void DMA_SetConfig(DMA_HandleTypeDef const *const hdma,
                          uint32_t SrcAddress,
                          uint32_t DstAddress,
                          uint32_t SrcDataSize)
{
 8006754:	b480      	push	{r7}
 8006756:	b085      	sub	sp, #20
 8006758:	af00      	add	r7, sp, #0
 800675a:	60f8      	str	r0, [r7, #12]
 800675c:	60b9      	str	r1, [r7, #8]
 800675e:	607a      	str	r2, [r7, #4]
 8006760:	603b      	str	r3, [r7, #0]
  /* Configure the DMA channel data size */
  MODIFY_REG(hdma->Instance->CBR1, DMA_CBR1_BNDT, (SrcDataSize & DMA_CBR1_BNDT));
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006768:	0c1b      	lsrs	r3, r3, #16
 800676a:	041b      	lsls	r3, r3, #16
 800676c:	683a      	ldr	r2, [r7, #0]
 800676e:	b291      	uxth	r1, r2
 8006770:	68fa      	ldr	r2, [r7, #12]
 8006772:	6812      	ldr	r2, [r2, #0]
 8006774:	430b      	orrs	r3, r1
 8006776:	6493      	str	r3, [r2, #72]	; 0x48

  /* Clear all interrupt flags */
  __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	f44f 42fe 	mov.w	r2, #32512	; 0x7f00
 8006780:	60da      	str	r2, [r3, #12]
                       DMA_FLAG_TO);

  /* Configure DMA channel source address */
  hdma->Instance->CSAR = SrcAddress;
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	68ba      	ldr	r2, [r7, #8]
 8006788:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure DMA channel destination address */
  hdma->Instance->CDAR = DstAddress;
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	687a      	ldr	r2, [r7, #4]
 8006790:	651a      	str	r2, [r3, #80]	; 0x50
}
 8006792:	bf00      	nop
 8006794:	3714      	adds	r7, #20
 8006796:	46bd      	mov	sp, r7
 8006798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800679c:	4770      	bx	lr
	...

080067a0 <HAL_DMAEx_List_Init>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_Init(DMA_HandleTypeDef *const hdma)
{
 80067a0:	b580      	push	{r7, lr}
 80067a2:	b084      	sub	sp, #16
 80067a4:	af00      	add	r7, sp, #0
 80067a6:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart = HAL_GetTick();
 80067a8:	f7ff f81c 	bl	80057e4 <HAL_GetTick>
 80067ac:	60f8      	str	r0, [r7, #12]

  /* Check the DMA channel handle parameter */
  if (hdma == NULL)
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d101      	bne.n	80067b8 <HAL_DMAEx_List_Init+0x18>
  {
    return HAL_ERROR;
 80067b4:	2301      	movs	r3, #1
 80067b6:	e0dc      	b.n	8006972 <HAL_DMAEx_List_Init+0x1d2>
  assert_param(IS_DMA_PRIORITY(hdma->InitLinkedList.Priority));
  assert_param(IS_DMA_LINK_STEP_MODE(hdma->InitLinkedList.LinkStepMode));
  assert_param(IS_DMA_TCEM_LINKEDLIST_EVENT_MODE(hdma->InitLinkedList.TransferEventMode));
  assert_param(IS_DMA_LINKEDLIST_MODE(hdma->InitLinkedList.LinkedListMode));
  /* Check DMA channel instance */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	4a6f      	ldr	r2, [pc, #444]	; (800697c <HAL_DMAEx_List_Init+0x1dc>)
 80067be:	4293      	cmp	r3, r2
 80067c0:	f000 809f 	beq.w	8006902 <HAL_DMAEx_List_Init+0x162>
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	4a6d      	ldr	r2, [pc, #436]	; (8006980 <HAL_DMAEx_List_Init+0x1e0>)
 80067ca:	4293      	cmp	r3, r2
 80067cc:	f000 8099 	beq.w	8006902 <HAL_DMAEx_List_Init+0x162>
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	4a6b      	ldr	r2, [pc, #428]	; (8006984 <HAL_DMAEx_List_Init+0x1e4>)
 80067d6:	4293      	cmp	r3, r2
 80067d8:	f000 8093 	beq.w	8006902 <HAL_DMAEx_List_Init+0x162>
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	4a69      	ldr	r2, [pc, #420]	; (8006988 <HAL_DMAEx_List_Init+0x1e8>)
 80067e2:	4293      	cmp	r3, r2
 80067e4:	f000 808d 	beq.w	8006902 <HAL_DMAEx_List_Init+0x162>
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	4a67      	ldr	r2, [pc, #412]	; (800698c <HAL_DMAEx_List_Init+0x1ec>)
 80067ee:	4293      	cmp	r3, r2
 80067f0:	f000 8087 	beq.w	8006902 <HAL_DMAEx_List_Init+0x162>
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	4a65      	ldr	r2, [pc, #404]	; (8006990 <HAL_DMAEx_List_Init+0x1f0>)
 80067fa:	4293      	cmp	r3, r2
 80067fc:	f000 8081 	beq.w	8006902 <HAL_DMAEx_List_Init+0x162>
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	4a63      	ldr	r2, [pc, #396]	; (8006994 <HAL_DMAEx_List_Init+0x1f4>)
 8006806:	4293      	cmp	r3, r2
 8006808:	d07b      	beq.n	8006902 <HAL_DMAEx_List_Init+0x162>
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	4a62      	ldr	r2, [pc, #392]	; (8006998 <HAL_DMAEx_List_Init+0x1f8>)
 8006810:	4293      	cmp	r3, r2
 8006812:	d076      	beq.n	8006902 <HAL_DMAEx_List_Init+0x162>
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	4a60      	ldr	r2, [pc, #384]	; (800699c <HAL_DMAEx_List_Init+0x1fc>)
 800681a:	4293      	cmp	r3, r2
 800681c:	d071      	beq.n	8006902 <HAL_DMAEx_List_Init+0x162>
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	4a5f      	ldr	r2, [pc, #380]	; (80069a0 <HAL_DMAEx_List_Init+0x200>)
 8006824:	4293      	cmp	r3, r2
 8006826:	d06c      	beq.n	8006902 <HAL_DMAEx_List_Init+0x162>
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	4a5d      	ldr	r2, [pc, #372]	; (80069a4 <HAL_DMAEx_List_Init+0x204>)
 800682e:	4293      	cmp	r3, r2
 8006830:	d067      	beq.n	8006902 <HAL_DMAEx_List_Init+0x162>
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	4a5c      	ldr	r2, [pc, #368]	; (80069a8 <HAL_DMAEx_List_Init+0x208>)
 8006838:	4293      	cmp	r3, r2
 800683a:	d062      	beq.n	8006902 <HAL_DMAEx_List_Init+0x162>
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	4a5a      	ldr	r2, [pc, #360]	; (80069ac <HAL_DMAEx_List_Init+0x20c>)
 8006842:	4293      	cmp	r3, r2
 8006844:	d05d      	beq.n	8006902 <HAL_DMAEx_List_Init+0x162>
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	4a59      	ldr	r2, [pc, #356]	; (80069b0 <HAL_DMAEx_List_Init+0x210>)
 800684c:	4293      	cmp	r3, r2
 800684e:	d058      	beq.n	8006902 <HAL_DMAEx_List_Init+0x162>
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	4a57      	ldr	r2, [pc, #348]	; (80069b4 <HAL_DMAEx_List_Init+0x214>)
 8006856:	4293      	cmp	r3, r2
 8006858:	d053      	beq.n	8006902 <HAL_DMAEx_List_Init+0x162>
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	4a56      	ldr	r2, [pc, #344]	; (80069b8 <HAL_DMAEx_List_Init+0x218>)
 8006860:	4293      	cmp	r3, r2
 8006862:	d04e      	beq.n	8006902 <HAL_DMAEx_List_Init+0x162>
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	4a54      	ldr	r2, [pc, #336]	; (80069bc <HAL_DMAEx_List_Init+0x21c>)
 800686a:	4293      	cmp	r3, r2
 800686c:	d049      	beq.n	8006902 <HAL_DMAEx_List_Init+0x162>
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	4a53      	ldr	r2, [pc, #332]	; (80069c0 <HAL_DMAEx_List_Init+0x220>)
 8006874:	4293      	cmp	r3, r2
 8006876:	d044      	beq.n	8006902 <HAL_DMAEx_List_Init+0x162>
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	4a51      	ldr	r2, [pc, #324]	; (80069c4 <HAL_DMAEx_List_Init+0x224>)
 800687e:	4293      	cmp	r3, r2
 8006880:	d03f      	beq.n	8006902 <HAL_DMAEx_List_Init+0x162>
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	4a50      	ldr	r2, [pc, #320]	; (80069c8 <HAL_DMAEx_List_Init+0x228>)
 8006888:	4293      	cmp	r3, r2
 800688a:	d03a      	beq.n	8006902 <HAL_DMAEx_List_Init+0x162>
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	4a4e      	ldr	r2, [pc, #312]	; (80069cc <HAL_DMAEx_List_Init+0x22c>)
 8006892:	4293      	cmp	r3, r2
 8006894:	d035      	beq.n	8006902 <HAL_DMAEx_List_Init+0x162>
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	4a4d      	ldr	r2, [pc, #308]	; (80069d0 <HAL_DMAEx_List_Init+0x230>)
 800689c:	4293      	cmp	r3, r2
 800689e:	d030      	beq.n	8006902 <HAL_DMAEx_List_Init+0x162>
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	4a4b      	ldr	r2, [pc, #300]	; (80069d4 <HAL_DMAEx_List_Init+0x234>)
 80068a6:	4293      	cmp	r3, r2
 80068a8:	d02b      	beq.n	8006902 <HAL_DMAEx_List_Init+0x162>
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	4a4a      	ldr	r2, [pc, #296]	; (80069d8 <HAL_DMAEx_List_Init+0x238>)
 80068b0:	4293      	cmp	r3, r2
 80068b2:	d026      	beq.n	8006902 <HAL_DMAEx_List_Init+0x162>
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	4a48      	ldr	r2, [pc, #288]	; (80069dc <HAL_DMAEx_List_Init+0x23c>)
 80068ba:	4293      	cmp	r3, r2
 80068bc:	d021      	beq.n	8006902 <HAL_DMAEx_List_Init+0x162>
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	4a47      	ldr	r2, [pc, #284]	; (80069e0 <HAL_DMAEx_List_Init+0x240>)
 80068c4:	4293      	cmp	r3, r2
 80068c6:	d01c      	beq.n	8006902 <HAL_DMAEx_List_Init+0x162>
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	4a45      	ldr	r2, [pc, #276]	; (80069e4 <HAL_DMAEx_List_Init+0x244>)
 80068ce:	4293      	cmp	r3, r2
 80068d0:	d017      	beq.n	8006902 <HAL_DMAEx_List_Init+0x162>
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	4a44      	ldr	r2, [pc, #272]	; (80069e8 <HAL_DMAEx_List_Init+0x248>)
 80068d8:	4293      	cmp	r3, r2
 80068da:	d012      	beq.n	8006902 <HAL_DMAEx_List_Init+0x162>
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	4a42      	ldr	r2, [pc, #264]	; (80069ec <HAL_DMAEx_List_Init+0x24c>)
 80068e2:	4293      	cmp	r3, r2
 80068e4:	d00d      	beq.n	8006902 <HAL_DMAEx_List_Init+0x162>
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	4a41      	ldr	r2, [pc, #260]	; (80069f0 <HAL_DMAEx_List_Init+0x250>)
 80068ec:	4293      	cmp	r3, r2
 80068ee:	d008      	beq.n	8006902 <HAL_DMAEx_List_Init+0x162>
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	4a3f      	ldr	r2, [pc, #252]	; (80069f4 <HAL_DMAEx_List_Init+0x254>)
 80068f6:	4293      	cmp	r3, r2
 80068f8:	d003      	beq.n	8006902 <HAL_DMAEx_List_Init+0x162>
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	4a3e      	ldr	r2, [pc, #248]	; (80069f8 <HAL_DMAEx_List_Init+0x258>)
 8006900:	4293      	cmp	r3, r2
 8006902:	bf00      	nop
  {
    assert_param(IS_DMA_LINK_ALLOCATED_PORT(hdma->InitLinkedList.LinkAllocatedPort));
  }

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	2200      	movs	r2, #0
 8006908:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	2202      	movs	r2, #2
 8006910:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Disable the DMA channel */
  __HAL_DMA_DISABLE(hdma);
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	695a      	ldr	r2, [r3, #20]
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	f042 0206 	orr.w	r2, r2, #6
 8006922:	615a      	str	r2, [r3, #20]

  /* Check if the DMA channel is effectively disabled */
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 8006924:	e00f      	b.n	8006946 <HAL_DMAEx_List_Init+0x1a6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 8006926:	f7fe ff5d 	bl	80057e4 <HAL_GetTick>
 800692a:	4602      	mov	r2, r0
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	1ad3      	subs	r3, r2, r3
 8006930:	2b05      	cmp	r3, #5
 8006932:	d908      	bls.n	8006946 <HAL_DMAEx_List_Init+0x1a6>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	2210      	movs	r2, #16
 8006938:	659a      	str	r2, [r3, #88]	; 0x58

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_ERROR;
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	2203      	movs	r2, #3
 800693e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

      return HAL_ERROR;
 8006942:	2301      	movs	r3, #1
 8006944:	e015      	b.n	8006972 <HAL_DMAEx_List_Init+0x1d2>
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	695b      	ldr	r3, [r3, #20]
 800694c:	f003 0301 	and.w	r3, r3, #1
 8006950:	2b00      	cmp	r3, #0
 8006952:	d1e8      	bne.n	8006926 <HAL_DMAEx_List_Init+0x186>
    }
  }

  /* Initialize the DMA channel registers */
  DMA_List_Init(hdma);
 8006954:	6878      	ldr	r0, [r7, #4]
 8006956:	f000 fa69 	bl	8006e2c <DMA_List_Init>

  /* Update DMA channel operation mode */
  hdma->Mode = hdma->InitLinkedList.LinkedListMode;
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	651a      	str	r2, [r3, #80]	; 0x50

  /* Update the DMA channel error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	2200      	movs	r2, #0
 8006966:	659a      	str	r2, [r3, #88]	; 0x58

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_READY;
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	2201      	movs	r2, #1
 800696c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8006970:	2300      	movs	r3, #0
}
 8006972:	4618      	mov	r0, r3
 8006974:	3710      	adds	r7, #16
 8006976:	46bd      	mov	sp, r7
 8006978:	bd80      	pop	{r7, pc}
 800697a:	bf00      	nop
 800697c:	40020050 	.word	0x40020050
 8006980:	50020050 	.word	0x50020050
 8006984:	400200d0 	.word	0x400200d0
 8006988:	500200d0 	.word	0x500200d0
 800698c:	40020150 	.word	0x40020150
 8006990:	50020150 	.word	0x50020150
 8006994:	400201d0 	.word	0x400201d0
 8006998:	500201d0 	.word	0x500201d0
 800699c:	40020250 	.word	0x40020250
 80069a0:	50020250 	.word	0x50020250
 80069a4:	400202d0 	.word	0x400202d0
 80069a8:	500202d0 	.word	0x500202d0
 80069ac:	40020350 	.word	0x40020350
 80069b0:	50020350 	.word	0x50020350
 80069b4:	400203d0 	.word	0x400203d0
 80069b8:	500203d0 	.word	0x500203d0
 80069bc:	40020450 	.word	0x40020450
 80069c0:	50020450 	.word	0x50020450
 80069c4:	400204d0 	.word	0x400204d0
 80069c8:	500204d0 	.word	0x500204d0
 80069cc:	40020550 	.word	0x40020550
 80069d0:	50020550 	.word	0x50020550
 80069d4:	400205d0 	.word	0x400205d0
 80069d8:	500205d0 	.word	0x500205d0
 80069dc:	40020650 	.word	0x40020650
 80069e0:	50020650 	.word	0x50020650
 80069e4:	400206d0 	.word	0x400206d0
 80069e8:	500206d0 	.word	0x500206d0
 80069ec:	40020750 	.word	0x40020750
 80069f0:	50020750 	.word	0x50020750
 80069f4:	400207d0 	.word	0x400207d0
 80069f8:	500207d0 	.word	0x500207d0

080069fc <HAL_DMAEx_List_Start_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_Start_IT(DMA_HandleTypeDef *const hdma)
{
 80069fc:	b580      	push	{r7, lr}
 80069fe:	b086      	sub	sp, #24
 8006a00:	af00      	add	r7, sp, #0
 8006a02:	6078      	str	r0, [r7, #4]
  HAL_DMA_StateTypeDef dma_state;
  uint32_t ccr_value;
  uint32_t cllr_mask;

  /* Check the DMA peripheral handle and the linked-list queue parameters */
  if ((hdma == NULL) || (hdma->LinkedListQueue == NULL))
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d003      	beq.n	8006a12 <HAL_DMAEx_List_Start_IT+0x16>
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d101      	bne.n	8006a16 <HAL_DMAEx_List_Start_IT+0x1a>
  {
    return HAL_ERROR;
 8006a12:	2301      	movs	r3, #1
 8006a14:	e082      	b.n	8006b1c <HAL_DMAEx_List_Start_IT+0x120>
  }

  /* Check DMA channel state */
  dma_state = hdma->State;
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8006a1c:	75fb      	strb	r3, [r7, #23]
  ccr_value = hdma->Instance->CCR & DMA_CCR_LSM;
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	695b      	ldr	r3, [r3, #20]
 8006a24:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006a28:	613b      	str	r3, [r7, #16]
  if ((dma_state == HAL_DMA_STATE_READY) || ((dma_state == HAL_DMA_STATE_BUSY) && (ccr_value != 0U)))
 8006a2a:	7dfb      	ldrb	r3, [r7, #23]
 8006a2c:	2b01      	cmp	r3, #1
 8006a2e:	d005      	beq.n	8006a3c <HAL_DMAEx_List_Start_IT+0x40>
 8006a30:	7dfb      	ldrb	r3, [r7, #23]
 8006a32:	2b02      	cmp	r3, #2
 8006a34:	d16a      	bne.n	8006b0c <HAL_DMAEx_List_Start_IT+0x110>
 8006a36:	693b      	ldr	r3, [r7, #16]
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d067      	beq.n	8006b0c <HAL_DMAEx_List_Start_IT+0x110>
  {
    /* Check DMA channel state is ready */
    if (hdma->State == HAL_DMA_STATE_READY)
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8006a42:	b2db      	uxtb	r3, r3
 8006a44:	2b01      	cmp	r3, #1
 8006a46:	d157      	bne.n	8006af8 <HAL_DMAEx_List_Start_IT+0xfc>
    {
      /* Process locked */
      __HAL_LOCK(hdma);
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8006a4e:	2b01      	cmp	r3, #1
 8006a50:	d101      	bne.n	8006a56 <HAL_DMAEx_List_Start_IT+0x5a>
 8006a52:	2302      	movs	r3, #2
 8006a54:	e062      	b.n	8006b1c <HAL_DMAEx_List_Start_IT+0x120>
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	2201      	movs	r2, #1
 8006a5a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

      /* Update the DMA channel and the queue states */
      hdma->State                  = HAL_DMA_STATE_BUSY;
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	2202      	movs	r2, #2
 8006a62:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_BUSY;
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006a6a:	2202      	movs	r2, #2
 8006a6c:	731a      	strb	r2, [r3, #12]

      /* Update the DMA channel and the queue error codes */
      hdma->ErrorCode                  = HAL_DMA_ERROR_NONE;
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	2200      	movs	r2, #0
 8006a72:	659a      	str	r2, [r3, #88]	; 0x58
      hdma->LinkedListQueue->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006a78:	2200      	movs	r2, #0
 8006a7a:	611a      	str	r2, [r3, #16]

      /* Enable common interrupts: Transfer Complete and Transfer Errors ITs */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_DTE | DMA_IT_ULE | DMA_IT_USE | DMA_IT_TO));
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	695a      	ldr	r2, [r3, #20]
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	f442 42ba 	orr.w	r2, r2, #23808	; 0x5d00
 8006a8a:	615a      	str	r2, [r3, #20]

      /* Check half transfer complete callback */
      if (hdma->XferHalfCpltCallback != NULL)
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d007      	beq.n	8006aa4 <HAL_DMAEx_List_Start_IT+0xa8>
      {
        /* If half transfer complete callback is set, enable the corresponding IT */
        __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	695a      	ldr	r2, [r3, #20]
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006aa2:	615a      	str	r2, [r3, #20]
      }

      /* Check suspend callback */
      if (hdma->XferSuspendCallback != NULL)
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d007      	beq.n	8006abc <HAL_DMAEx_List_Start_IT+0xc0>
      {
        /* If transfer suspend callback is set, enable the corresponding IT */
        __HAL_DMA_ENABLE_IT(hdma, DMA_IT_SUSP);
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	695a      	ldr	r2, [r3, #20]
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006aba:	615a      	str	r2, [r3, #20]
      }

      /* Get CLLR register mask and offset */
      DMA_List_GetCLLRNodeInfo(hdma->LinkedListQueue->Head, &cllr_mask, NULL);
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	f107 010c 	add.w	r1, r7, #12
 8006ac6:	2200      	movs	r2, #0
 8006ac8:	4618      	mov	r0, r3
 8006aca:	f000 fcc5 	bl	8007458 <DMA_List_GetCLLRNodeInfo>

      /* Update DMA registers for linked-list transfer */
      hdma->Instance->CLBAR = ((uint32_t)hdma->LinkedListQueue->Head & DMA_CLBAR_LBA);
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	4619      	mov	r1, r3
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681a      	ldr	r2, [r3, #0]
 8006ada:	0c0b      	lsrs	r3, r1, #16
 8006adc:	041b      	lsls	r3, r3, #16
 8006ade:	6013      	str	r3, [r2, #0]
      hdma->Instance->CLLR  = ((uint32_t)hdma->LinkedListQueue->Head & DMA_CLLR_LA) | cllr_mask;
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	461a      	mov	r2, r3
 8006ae8:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 8006aec:	4013      	ands	r3, r2
 8006aee:	68f9      	ldr	r1, [r7, #12]
 8006af0:	687a      	ldr	r2, [r7, #4]
 8006af2:	6812      	ldr	r2, [r2, #0]
 8006af4:	430b      	orrs	r3, r1
 8006af6:	67d3      	str	r3, [r2, #124]	; 0x7c
    }

    /* Enable DMA channel */
    __HAL_DMA_ENABLE(hdma);
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	695a      	ldr	r2, [r3, #20]
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	f042 0201 	orr.w	r2, r2, #1
 8006b06:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hdma);

    return HAL_ERROR;
  }

  return HAL_OK;
 8006b08:	2300      	movs	r3, #0
 8006b0a:	e007      	b.n	8006b1c <HAL_DMAEx_List_Start_IT+0x120>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	2240      	movs	r2, #64	; 0x40
 8006b10:	659a      	str	r2, [r3, #88]	; 0x58
    __HAL_UNLOCK(hdma);
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	2200      	movs	r2, #0
 8006b16:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    return HAL_ERROR;
 8006b1a:	2301      	movs	r3, #1
}
 8006b1c:	4618      	mov	r0, r3
 8006b1e:	3718      	adds	r7, #24
 8006b20:	46bd      	mov	sp, r7
 8006b22:	bd80      	pop	{r7, pc}

08006b24 <HAL_DMAEx_List_BuildNode>:
  *                       configurations.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_BuildNode(DMA_NodeConfTypeDef const *const pNodeConfig,
                                           DMA_NodeTypeDef *const pNode)
{
 8006b24:	b580      	push	{r7, lr}
 8006b26:	b082      	sub	sp, #8
 8006b28:	af00      	add	r7, sp, #0
 8006b2a:	6078      	str	r0, [r7, #4]
 8006b2c:	6039      	str	r1, [r7, #0]
  /* Check the node configuration and physical node parameters */
  if ((pNodeConfig == NULL) || (pNode == NULL))
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d002      	beq.n	8006b3a <HAL_DMAEx_List_BuildNode+0x16>
 8006b34:	683b      	ldr	r3, [r7, #0]
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d101      	bne.n	8006b3e <HAL_DMAEx_List_BuildNode+0x1a>
  {
    return HAL_ERROR;
 8006b3a:	2301      	movs	r3, #1
 8006b3c:	e004      	b.n	8006b48 <HAL_DMAEx_List_BuildNode+0x24>
  assert_param(IS_DMA_ATTRIBUTES(pNodeConfig->SrcSecure));
  assert_param(IS_DMA_ATTRIBUTES(pNodeConfig->DestSecure));
#endif /* defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  /* Build the DMA channel node */
  DMA_List_BuildNode(pNodeConfig, pNode);
 8006b3e:	6839      	ldr	r1, [r7, #0]
 8006b40:	6878      	ldr	r0, [r7, #4]
 8006b42:	f000 facb 	bl	80070dc <DMA_List_BuildNode>

  return HAL_OK;
 8006b46:	2300      	movs	r3, #0
}
 8006b48:	4618      	mov	r0, r3
 8006b4a:	3708      	adds	r7, #8
 8006b4c:	46bd      	mov	sp, r7
 8006b4e:	bd80      	pop	{r7, pc}

08006b50 <HAL_DMAEx_List_InsertNode_Tail>:
  *                     configurations.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_InsertNode_Tail(DMA_QListTypeDef *const pQList,
                                                 DMA_NodeTypeDef *const pNewNode)
{
 8006b50:	b580      	push	{r7, lr}
 8006b52:	b08a      	sub	sp, #40	; 0x28
 8006b54:	af00      	add	r7, sp, #0
 8006b56:	6078      	str	r0, [r7, #4]
 8006b58:	6039      	str	r1, [r7, #0]
  uint32_t cllr_mask;
  uint32_t cllr_offset;
  DMA_NodeInQInfoTypeDef node_info;

  /* Check the queue and the new node parameters */
  if ((pQList == NULL) || (pNewNode == NULL))
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d002      	beq.n	8006b66 <HAL_DMAEx_List_InsertNode_Tail+0x16>
 8006b60:	683b      	ldr	r3, [r7, #0]
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d101      	bne.n	8006b6a <HAL_DMAEx_List_InsertNode_Tail+0x1a>
  {
    return HAL_ERROR;
 8006b66:	2301      	movs	r3, #1
 8006b68:	e066      	b.n	8006c38 <HAL_DMAEx_List_InsertNode_Tail+0xe8>
  }

  /* Check queue type */
  if (pQList->Type == QUEUE_TYPE_DYNAMIC)
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	695b      	ldr	r3, [r3, #20]
 8006b6e:	2b01      	cmp	r3, #1
 8006b70:	d104      	bne.n	8006b7c <HAL_DMAEx_List_InsertNode_Tail+0x2c>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	2204      	movs	r2, #4
 8006b76:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8006b78:	2301      	movs	r3, #1
 8006b7a:	e05d      	b.n	8006c38 <HAL_DMAEx_List_InsertNode_Tail+0xe8>
  }

  /* Check nodes base addresses */
  if (DMA_List_CheckNodesBaseAddresses(pQList->Head, pNewNode, NULL) != 0U)
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	2200      	movs	r2, #0
 8006b82:	6839      	ldr	r1, [r7, #0]
 8006b84:	4618      	mov	r0, r3
 8006b86:	f000 fbfb 	bl	8007380 <DMA_List_CheckNodesBaseAddresses>
 8006b8a:	4603      	mov	r3, r0
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d004      	beq.n	8006b9a <HAL_DMAEx_List_InsertNode_Tail+0x4a>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_OUTOFRANGE;
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	2205      	movs	r2, #5
 8006b94:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8006b96:	2301      	movs	r3, #1
 8006b98:	e04e      	b.n	8006c38 <HAL_DMAEx_List_InsertNode_Tail+0xe8>
  }

  /* Check nodes types compatibility */
  if (DMA_List_CheckNodesTypes(pQList->Head, pNewNode, NULL) != 0U)
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	2200      	movs	r2, #0
 8006ba0:	6839      	ldr	r1, [r7, #0]
 8006ba2:	4618      	mov	r0, r3
 8006ba4:	f000 fc1c 	bl	80073e0 <DMA_List_CheckNodesTypes>
 8006ba8:	4603      	mov	r3, r0
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d004      	beq.n	8006bb8 <HAL_DMAEx_List_InsertNode_Tail+0x68>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	2204      	movs	r2, #4
 8006bb2:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8006bb4:	2301      	movs	r3, #1
 8006bb6:	e03f      	b.n	8006c38 <HAL_DMAEx_List_InsertNode_Tail+0xe8>
  }

  /* Empty queue */
  if (pQList->Head == NULL)
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d103      	bne.n	8006bc8 <HAL_DMAEx_List_InsertNode_Tail+0x78>
  {
    pQList->Head = pNewNode;
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	683a      	ldr	r2, [r7, #0]
 8006bc4:	601a      	str	r2, [r3, #0]
 8006bc6:	e02b      	b.n	8006c20 <HAL_DMAEx_List_InsertNode_Tail+0xd0>
  }
  /* Not empty queue */
  else
  {
    /* Get CLLR register mask and offset */
    DMA_List_GetCLLRNodeInfo(pNewNode, &cllr_mask, &cllr_offset);
 8006bc8:	f107 0220 	add.w	r2, r7, #32
 8006bcc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006bd0:	4619      	mov	r1, r3
 8006bd2:	6838      	ldr	r0, [r7, #0]
 8006bd4:	f000 fc40 	bl	8007458 <DMA_List_GetCLLRNodeInfo>

    /* Find node and get its position in selected queue */
    node_info.cllr_offset = cllr_offset;
 8006bd8:	6a3b      	ldr	r3, [r7, #32]
 8006bda:	60fb      	str	r3, [r7, #12]
    (void)DMA_List_FindNode(pQList, NULL, &node_info);
 8006bdc:	f107 030c 	add.w	r3, r7, #12
 8006be0:	461a      	mov	r2, r3
 8006be2:	2100      	movs	r1, #0
 8006be4:	6878      	ldr	r0, [r7, #4]
 8006be6:	f000 fc67 	bl	80074b8 <DMA_List_FindNode>

    /* Check if queue is circular */
    if (pQList->FirstCircularNode != NULL)
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	685b      	ldr	r3, [r3, #4]
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d00b      	beq.n	8006c0a <HAL_DMAEx_List_InsertNode_Tail+0xba>
    {
      pNewNode->LinkRegisters[cllr_offset] = ((uint32_t)pQList->FirstCircularNode & DMA_CLLR_LA) | cllr_mask;
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	685b      	ldr	r3, [r3, #4]
 8006bf6:	461a      	mov	r2, r3
 8006bf8:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 8006bfc:	4013      	ands	r3, r2
 8006bfe:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006c00:	6a3a      	ldr	r2, [r7, #32]
 8006c02:	4319      	orrs	r1, r3
 8006c04:	683b      	ldr	r3, [r7, #0]
 8006c06:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    }

    ((DMA_NodeTypeDef *)node_info.currentnode_addr)->LinkRegisters[cllr_offset] =
      ((uint32_t)pNewNode & DMA_CLLR_LA) | cllr_mask;
 8006c0a:	683a      	ldr	r2, [r7, #0]
 8006c0c:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 8006c10:	4013      	ands	r3, r2
 8006c12:	6a79      	ldr	r1, [r7, #36]	; 0x24
    ((DMA_NodeTypeDef *)node_info.currentnode_addr)->LinkRegisters[cllr_offset] =
 8006c14:	69ba      	ldr	r2, [r7, #24]
 8006c16:	4610      	mov	r0, r2
 8006c18:	6a3a      	ldr	r2, [r7, #32]
      ((uint32_t)pNewNode & DMA_CLLR_LA) | cllr_mask;
 8006c1a:	430b      	orrs	r3, r1
    ((DMA_NodeTypeDef *)node_info.currentnode_addr)->LinkRegisters[cllr_offset] =
 8006c1c:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
  }

  /* Increment queue node number */
  pQList->NodeNumber++;
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	689b      	ldr	r3, [r3, #8]
 8006c24:	1c5a      	adds	r2, r3, #1
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	609a      	str	r2, [r3, #8]

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	2200      	movs	r2, #0
 8006c2e:	611a      	str	r2, [r3, #16]

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_READY;
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	2201      	movs	r2, #1
 8006c34:	731a      	strb	r2, [r3, #12]

  /* Prevent MISRA-C2012-Rule-2.2_b */
  UNUSED(node_info);

  return HAL_OK;
 8006c36:	2300      	movs	r3, #0
}
 8006c38:	4618      	mov	r0, r3
 8006c3a:	3728      	adds	r7, #40	; 0x28
 8006c3c:	46bd      	mov	sp, r7
 8006c3e:	bd80      	pop	{r7, pc}

08006c40 <HAL_DMAEx_List_SetCircularMode>:
  * @brief  Set circular mode for linked-list queue.
  * @param  pQList : Pointer to a DMA_QListTypeDef structure that contains queue information.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_SetCircularMode(DMA_QListTypeDef *const pQList)
{
 8006c40:	b580      	push	{r7, lr}
 8006c42:	b08a      	sub	sp, #40	; 0x28
 8006c44:	af00      	add	r7, sp, #0
 8006c46:	6078      	str	r0, [r7, #4]
  uint32_t cllr_mask;
  uint32_t cllr_offset;
  DMA_NodeInQInfoTypeDef node_info;

  /* Check the queue parameter */
  if (pQList == NULL)
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d101      	bne.n	8006c52 <HAL_DMAEx_List_SetCircularMode+0x12>
  {
    return HAL_ERROR;
 8006c4e:	2301      	movs	r3, #1
 8006c50:	e052      	b.n	8006cf8 <HAL_DMAEx_List_SetCircularMode+0xb8>
  }

  /* Check the queue */
  if (pQList->Head == NULL)
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d104      	bne.n	8006c64 <HAL_DMAEx_List_SetCircularMode+0x24>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_EMPTY;
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	2202      	movs	r2, #2
 8006c5e:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8006c60:	2301      	movs	r3, #1
 8006c62:	e049      	b.n	8006cf8 <HAL_DMAEx_List_SetCircularMode+0xb8>
  }

  /* Check queue circular mode */
  if (pQList->FirstCircularNode != NULL)
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	685b      	ldr	r3, [r3, #4]
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d00c      	beq.n	8006c86 <HAL_DMAEx_List_SetCircularMode+0x46>
  {
    if (pQList->FirstCircularNode == pQList->Head)
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	685a      	ldr	r2, [r3, #4]
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	429a      	cmp	r2, r3
 8006c76:	d101      	bne.n	8006c7c <HAL_DMAEx_List_SetCircularMode+0x3c>
    {
      return HAL_OK;
 8006c78:	2300      	movs	r3, #0
 8006c7a:	e03d      	b.n	8006cf8 <HAL_DMAEx_List_SetCircularMode+0xb8>
    }
    else
    {
      /* Update the queue error code */
      pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	2204      	movs	r2, #4
 8006c80:	611a      	str	r2, [r3, #16]

      return HAL_ERROR;
 8006c82:	2301      	movs	r3, #1
 8006c84:	e038      	b.n	8006cf8 <HAL_DMAEx_List_SetCircularMode+0xb8>
    }
  }

  /* Check queue type */
  if (pQList->Type == QUEUE_TYPE_DYNAMIC)
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	695b      	ldr	r3, [r3, #20]
 8006c8a:	2b01      	cmp	r3, #1
 8006c8c:	d104      	bne.n	8006c98 <HAL_DMAEx_List_SetCircularMode+0x58>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	2204      	movs	r2, #4
 8006c92:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8006c94:	2301      	movs	r3, #1
 8006c96:	e02f      	b.n	8006cf8 <HAL_DMAEx_List_SetCircularMode+0xb8>
  }

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_BUSY;
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	2202      	movs	r2, #2
 8006c9c:	731a      	strb	r2, [r3, #12]

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	2200      	movs	r2, #0
 8006ca2:	611a      	str	r2, [r3, #16]

  /* Get CLLR register mask and offset */
  DMA_List_GetCLLRNodeInfo(pQList->Head, &cllr_mask, &cllr_offset);
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	f107 0220 	add.w	r2, r7, #32
 8006cac:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8006cb0:	4618      	mov	r0, r3
 8006cb2:	f000 fbd1 	bl	8007458 <DMA_List_GetCLLRNodeInfo>

  /* Find the last queue node and get its position in selected queue */
  node_info.cllr_offset = cllr_offset;
 8006cb6:	6a3b      	ldr	r3, [r7, #32]
 8006cb8:	60fb      	str	r3, [r7, #12]
  (void)DMA_List_FindNode(pQList, NULL, &node_info);
 8006cba:	f107 030c 	add.w	r3, r7, #12
 8006cbe:	461a      	mov	r2, r3
 8006cc0:	2100      	movs	r1, #0
 8006cc2:	6878      	ldr	r0, [r7, #4]
 8006cc4:	f000 fbf8 	bl	80074b8 <DMA_List_FindNode>

  /* Set circular mode */
  ((DMA_NodeTypeDef *)(node_info.currentnode_addr))->LinkRegisters[cllr_offset] =
    ((uint32_t)pQList->Head & DMA_CLLR_LA) | cllr_mask;
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	461a      	mov	r2, r3
 8006cce:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 8006cd2:	4013      	ands	r3, r2
 8006cd4:	6a79      	ldr	r1, [r7, #36]	; 0x24
  ((DMA_NodeTypeDef *)(node_info.currentnode_addr))->LinkRegisters[cllr_offset] =
 8006cd6:	69ba      	ldr	r2, [r7, #24]
 8006cd8:	4610      	mov	r0, r2
 8006cda:	6a3a      	ldr	r2, [r7, #32]
    ((uint32_t)pQList->Head & DMA_CLLR_LA) | cllr_mask;
 8006cdc:	430b      	orrs	r3, r1
  ((DMA_NodeTypeDef *)(node_info.currentnode_addr))->LinkRegisters[cllr_offset] =
 8006cde:	f840 3022 	str.w	r3, [r0, r2, lsl #2]

  /* Update linked-list circular state */
  pQList->FirstCircularNode = pQList->Head;
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681a      	ldr	r2, [r3, #0]
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	605a      	str	r2, [r3, #4]

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	2200      	movs	r2, #0
 8006cee:	611a      	str	r2, [r3, #16]

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_READY;
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	2201      	movs	r2, #1
 8006cf4:	731a      	strb	r2, [r3, #12]

  /* Prevent MISRA-C2012-Rule-2.2_b */
  UNUSED(node_info);

  return HAL_OK;
 8006cf6:	2300      	movs	r3, #0
}
 8006cf8:	4618      	mov	r0, r3
 8006cfa:	3728      	adds	r7, #40	; 0x28
 8006cfc:	46bd      	mov	sp, r7
 8006cfe:	bd80      	pop	{r7, pc}

08006d00 <HAL_DMAEx_List_LinkQ>:
  * @param  pQList : Pointer to a DMA_QListTypeDef structure that contains queue information.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_LinkQ(DMA_HandleTypeDef *const hdma,
                                       DMA_QListTypeDef *const pQList)
{
 8006d00:	b480      	push	{r7}
 8006d02:	b085      	sub	sp, #20
 8006d04:	af00      	add	r7, sp, #0
 8006d06:	6078      	str	r0, [r7, #4]
 8006d08:	6039      	str	r1, [r7, #0]
  HAL_DMA_StateTypeDef state;

  /* Check the DMA channel handle and the queue parameters */
  if ((hdma == NULL) || (pQList == NULL))
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d002      	beq.n	8006d16 <HAL_DMAEx_List_LinkQ+0x16>
 8006d10:	683b      	ldr	r3, [r7, #0]
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d101      	bne.n	8006d1a <HAL_DMAEx_List_LinkQ+0x1a>
  {
    return HAL_ERROR;
 8006d16:	2301      	movs	r3, #1
 8006d18:	e072      	b.n	8006e00 <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Get DMA state */
  state = hdma->State;
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8006d20:	73fb      	strb	r3, [r7, #15]

  /* Check DMA channel state */
  if ((hdma->State == HAL_DMA_STATE_BUSY) || (state == HAL_DMA_STATE_SUSPEND))
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8006d28:	b2db      	uxtb	r3, r3
 8006d2a:	2b02      	cmp	r3, #2
 8006d2c:	d002      	beq.n	8006d34 <HAL_DMAEx_List_LinkQ+0x34>
 8006d2e:	7bfb      	ldrb	r3, [r7, #15]
 8006d30:	2b05      	cmp	r3, #5
 8006d32:	d108      	bne.n	8006d46 <HAL_DMAEx_List_LinkQ+0x46>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	2240      	movs	r2, #64	; 0x40
 8006d38:	659a      	str	r2, [r3, #88]	; 0x58

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	2200      	movs	r2, #0
 8006d3e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

    return HAL_ERROR;
 8006d42:	2301      	movs	r3, #1
 8006d44:	e05c      	b.n	8006e00 <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Check queue state */
  if (pQList->State == HAL_DMA_QUEUE_STATE_BUSY)
 8006d46:	683b      	ldr	r3, [r7, #0]
 8006d48:	7b1b      	ldrb	r3, [r3, #12]
 8006d4a:	b2db      	uxtb	r3, r3
 8006d4c:	2b02      	cmp	r3, #2
 8006d4e:	d104      	bne.n	8006d5a <HAL_DMAEx_List_LinkQ+0x5a>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_BUSY;
 8006d50:	683b      	ldr	r3, [r7, #0]
 8006d52:	2201      	movs	r2, #1
 8006d54:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8006d56:	2301      	movs	r3, #1
 8006d58:	e052      	b.n	8006e00 <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Check linearity compatibility */
  if ((IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) == 0U) &&
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	4a2b      	ldr	r2, [pc, #172]	; (8006e0c <HAL_DMAEx_List_LinkQ+0x10c>)
 8006d60:	4293      	cmp	r3, r2
 8006d62:	d022      	beq.n	8006daa <HAL_DMAEx_List_LinkQ+0xaa>
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	4a29      	ldr	r2, [pc, #164]	; (8006e10 <HAL_DMAEx_List_LinkQ+0x110>)
 8006d6a:	4293      	cmp	r3, r2
 8006d6c:	d01d      	beq.n	8006daa <HAL_DMAEx_List_LinkQ+0xaa>
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	4a28      	ldr	r2, [pc, #160]	; (8006e14 <HAL_DMAEx_List_LinkQ+0x114>)
 8006d74:	4293      	cmp	r3, r2
 8006d76:	d018      	beq.n	8006daa <HAL_DMAEx_List_LinkQ+0xaa>
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	4a26      	ldr	r2, [pc, #152]	; (8006e18 <HAL_DMAEx_List_LinkQ+0x118>)
 8006d7e:	4293      	cmp	r3, r2
 8006d80:	d013      	beq.n	8006daa <HAL_DMAEx_List_LinkQ+0xaa>
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	4a25      	ldr	r2, [pc, #148]	; (8006e1c <HAL_DMAEx_List_LinkQ+0x11c>)
 8006d88:	4293      	cmp	r3, r2
 8006d8a:	d00e      	beq.n	8006daa <HAL_DMAEx_List_LinkQ+0xaa>
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	4a23      	ldr	r2, [pc, #140]	; (8006e20 <HAL_DMAEx_List_LinkQ+0x120>)
 8006d92:	4293      	cmp	r3, r2
 8006d94:	d009      	beq.n	8006daa <HAL_DMAEx_List_LinkQ+0xaa>
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	4a22      	ldr	r2, [pc, #136]	; (8006e24 <HAL_DMAEx_List_LinkQ+0x124>)
 8006d9c:	4293      	cmp	r3, r2
 8006d9e:	d004      	beq.n	8006daa <HAL_DMAEx_List_LinkQ+0xaa>
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	4a20      	ldr	r2, [pc, #128]	; (8006e28 <HAL_DMAEx_List_LinkQ+0x128>)
 8006da6:	4293      	cmp	r3, r2
 8006da8:	d101      	bne.n	8006dae <HAL_DMAEx_List_LinkQ+0xae>
 8006daa:	2301      	movs	r3, #1
 8006dac:	e000      	b.n	8006db0 <HAL_DMAEx_List_LinkQ+0xb0>
 8006dae:	2300      	movs	r3, #0
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d10b      	bne.n	8006dcc <HAL_DMAEx_List_LinkQ+0xcc>
      ((pQList->Head->NodeInfo & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR))
 8006db4:	683b      	ldr	r3, [r7, #0]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	6a1b      	ldr	r3, [r3, #32]
 8006dba:	f003 0302 	and.w	r3, r3, #2
  if ((IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) == 0U) &&
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d004      	beq.n	8006dcc <HAL_DMAEx_List_LinkQ+0xcc>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_UNSUPPORTED;
 8006dc2:	683b      	ldr	r3, [r7, #0]
 8006dc4:	2203      	movs	r2, #3
 8006dc6:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8006dc8:	2301      	movs	r3, #1
 8006dca:	e019      	b.n	8006e00 <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Check circularity compatibility */
  if (hdma->Mode == DMA_LINKEDLIST_CIRCULAR)
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006dd0:	2b81      	cmp	r3, #129	; 0x81
 8006dd2:	d108      	bne.n	8006de6 <HAL_DMAEx_List_LinkQ+0xe6>
  {
    /* Check first circular node */
    if (pQList->FirstCircularNode == NULL)
 8006dd4:	683b      	ldr	r3, [r7, #0]
 8006dd6:	685b      	ldr	r3, [r3, #4]
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d10d      	bne.n	8006df8 <HAL_DMAEx_List_LinkQ+0xf8>
    {
      /* Update the queue error code */
      pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8006ddc:	683b      	ldr	r3, [r7, #0]
 8006dde:	2204      	movs	r2, #4
 8006de0:	611a      	str	r2, [r3, #16]

      return HAL_ERROR;
 8006de2:	2301      	movs	r3, #1
 8006de4:	e00c      	b.n	8006e00 <HAL_DMAEx_List_LinkQ+0x100>
    }
  }
  else
  {
    /* Check first circular node */
    if (pQList->FirstCircularNode != NULL)
 8006de6:	683b      	ldr	r3, [r7, #0]
 8006de8:	685b      	ldr	r3, [r3, #4]
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d004      	beq.n	8006df8 <HAL_DMAEx_List_LinkQ+0xf8>
    {
      /* Update the queue error code */
      pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8006dee:	683b      	ldr	r3, [r7, #0]
 8006df0:	2204      	movs	r2, #4
 8006df2:	611a      	str	r2, [r3, #16]

      return HAL_ERROR;
 8006df4:	2301      	movs	r3, #1
 8006df6:	e003      	b.n	8006e00 <HAL_DMAEx_List_LinkQ+0x100>
    }
  }

  /* Register queue to DMA handle */
  hdma->LinkedListQueue = pQList;
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	683a      	ldr	r2, [r7, #0]
 8006dfc:	675a      	str	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8006dfe:	2300      	movs	r3, #0
}
 8006e00:	4618      	mov	r0, r3
 8006e02:	3714      	adds	r7, #20
 8006e04:	46bd      	mov	sp, r7
 8006e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e0a:	4770      	bx	lr
 8006e0c:	40020650 	.word	0x40020650
 8006e10:	50020650 	.word	0x50020650
 8006e14:	400206d0 	.word	0x400206d0
 8006e18:	500206d0 	.word	0x500206d0
 8006e1c:	40020750 	.word	0x40020750
 8006e20:	50020750 	.word	0x50020750
 8006e24:	400207d0 	.word	0x400207d0
 8006e28:	500207d0 	.word	0x500207d0

08006e2c <DMA_List_Init>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
static void DMA_List_Init(DMA_HandleTypeDef const *const hdma)
{
 8006e2c:	b480      	push	{r7}
 8006e2e:	b085      	sub	sp, #20
 8006e30:	af00      	add	r7, sp, #0
 8006e32:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Prepare DMA Channel Control Register (CCR) value */
  tmpreg = hdma->InitLinkedList.Priority | hdma->InitLinkedList.LinkStepMode;
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e3c:	4313      	orrs	r3, r2
 8006e3e:	60fb      	str	r3, [r7, #12]

  /* Check DMA channel instance */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	4a85      	ldr	r2, [pc, #532]	; (800705c <DMA_List_Init+0x230>)
 8006e46:	4293      	cmp	r3, r2
 8006e48:	f000 80a0 	beq.w	8006f8c <DMA_List_Init+0x160>
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	4a83      	ldr	r2, [pc, #524]	; (8007060 <DMA_List_Init+0x234>)
 8006e52:	4293      	cmp	r3, r2
 8006e54:	f000 809a 	beq.w	8006f8c <DMA_List_Init+0x160>
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	4a81      	ldr	r2, [pc, #516]	; (8007064 <DMA_List_Init+0x238>)
 8006e5e:	4293      	cmp	r3, r2
 8006e60:	f000 8094 	beq.w	8006f8c <DMA_List_Init+0x160>
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	4a7f      	ldr	r2, [pc, #508]	; (8007068 <DMA_List_Init+0x23c>)
 8006e6a:	4293      	cmp	r3, r2
 8006e6c:	f000 808e 	beq.w	8006f8c <DMA_List_Init+0x160>
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	4a7d      	ldr	r2, [pc, #500]	; (800706c <DMA_List_Init+0x240>)
 8006e76:	4293      	cmp	r3, r2
 8006e78:	f000 8088 	beq.w	8006f8c <DMA_List_Init+0x160>
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	4a7b      	ldr	r2, [pc, #492]	; (8007070 <DMA_List_Init+0x244>)
 8006e82:	4293      	cmp	r3, r2
 8006e84:	f000 8082 	beq.w	8006f8c <DMA_List_Init+0x160>
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	4a79      	ldr	r2, [pc, #484]	; (8007074 <DMA_List_Init+0x248>)
 8006e8e:	4293      	cmp	r3, r2
 8006e90:	d07c      	beq.n	8006f8c <DMA_List_Init+0x160>
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	4a78      	ldr	r2, [pc, #480]	; (8007078 <DMA_List_Init+0x24c>)
 8006e98:	4293      	cmp	r3, r2
 8006e9a:	d077      	beq.n	8006f8c <DMA_List_Init+0x160>
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	4a76      	ldr	r2, [pc, #472]	; (800707c <DMA_List_Init+0x250>)
 8006ea2:	4293      	cmp	r3, r2
 8006ea4:	d072      	beq.n	8006f8c <DMA_List_Init+0x160>
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	4a75      	ldr	r2, [pc, #468]	; (8007080 <DMA_List_Init+0x254>)
 8006eac:	4293      	cmp	r3, r2
 8006eae:	d06d      	beq.n	8006f8c <DMA_List_Init+0x160>
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	4a73      	ldr	r2, [pc, #460]	; (8007084 <DMA_List_Init+0x258>)
 8006eb6:	4293      	cmp	r3, r2
 8006eb8:	d068      	beq.n	8006f8c <DMA_List_Init+0x160>
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	4a72      	ldr	r2, [pc, #456]	; (8007088 <DMA_List_Init+0x25c>)
 8006ec0:	4293      	cmp	r3, r2
 8006ec2:	d063      	beq.n	8006f8c <DMA_List_Init+0x160>
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	4a70      	ldr	r2, [pc, #448]	; (800708c <DMA_List_Init+0x260>)
 8006eca:	4293      	cmp	r3, r2
 8006ecc:	d05e      	beq.n	8006f8c <DMA_List_Init+0x160>
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	4a6f      	ldr	r2, [pc, #444]	; (8007090 <DMA_List_Init+0x264>)
 8006ed4:	4293      	cmp	r3, r2
 8006ed6:	d059      	beq.n	8006f8c <DMA_List_Init+0x160>
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	4a6d      	ldr	r2, [pc, #436]	; (8007094 <DMA_List_Init+0x268>)
 8006ede:	4293      	cmp	r3, r2
 8006ee0:	d054      	beq.n	8006f8c <DMA_List_Init+0x160>
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	4a6c      	ldr	r2, [pc, #432]	; (8007098 <DMA_List_Init+0x26c>)
 8006ee8:	4293      	cmp	r3, r2
 8006eea:	d04f      	beq.n	8006f8c <DMA_List_Init+0x160>
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	4a6a      	ldr	r2, [pc, #424]	; (800709c <DMA_List_Init+0x270>)
 8006ef2:	4293      	cmp	r3, r2
 8006ef4:	d04a      	beq.n	8006f8c <DMA_List_Init+0x160>
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	4a69      	ldr	r2, [pc, #420]	; (80070a0 <DMA_List_Init+0x274>)
 8006efc:	4293      	cmp	r3, r2
 8006efe:	d045      	beq.n	8006f8c <DMA_List_Init+0x160>
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	4a67      	ldr	r2, [pc, #412]	; (80070a4 <DMA_List_Init+0x278>)
 8006f06:	4293      	cmp	r3, r2
 8006f08:	d040      	beq.n	8006f8c <DMA_List_Init+0x160>
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	4a66      	ldr	r2, [pc, #408]	; (80070a8 <DMA_List_Init+0x27c>)
 8006f10:	4293      	cmp	r3, r2
 8006f12:	d03b      	beq.n	8006f8c <DMA_List_Init+0x160>
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	4a64      	ldr	r2, [pc, #400]	; (80070ac <DMA_List_Init+0x280>)
 8006f1a:	4293      	cmp	r3, r2
 8006f1c:	d036      	beq.n	8006f8c <DMA_List_Init+0x160>
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	4a63      	ldr	r2, [pc, #396]	; (80070b0 <DMA_List_Init+0x284>)
 8006f24:	4293      	cmp	r3, r2
 8006f26:	d031      	beq.n	8006f8c <DMA_List_Init+0x160>
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	4a61      	ldr	r2, [pc, #388]	; (80070b4 <DMA_List_Init+0x288>)
 8006f2e:	4293      	cmp	r3, r2
 8006f30:	d02c      	beq.n	8006f8c <DMA_List_Init+0x160>
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	4a60      	ldr	r2, [pc, #384]	; (80070b8 <DMA_List_Init+0x28c>)
 8006f38:	4293      	cmp	r3, r2
 8006f3a:	d027      	beq.n	8006f8c <DMA_List_Init+0x160>
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	4a5e      	ldr	r2, [pc, #376]	; (80070bc <DMA_List_Init+0x290>)
 8006f42:	4293      	cmp	r3, r2
 8006f44:	d022      	beq.n	8006f8c <DMA_List_Init+0x160>
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	4a5d      	ldr	r2, [pc, #372]	; (80070c0 <DMA_List_Init+0x294>)
 8006f4c:	4293      	cmp	r3, r2
 8006f4e:	d01d      	beq.n	8006f8c <DMA_List_Init+0x160>
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	4a5b      	ldr	r2, [pc, #364]	; (80070c4 <DMA_List_Init+0x298>)
 8006f56:	4293      	cmp	r3, r2
 8006f58:	d018      	beq.n	8006f8c <DMA_List_Init+0x160>
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	4a5a      	ldr	r2, [pc, #360]	; (80070c8 <DMA_List_Init+0x29c>)
 8006f60:	4293      	cmp	r3, r2
 8006f62:	d013      	beq.n	8006f8c <DMA_List_Init+0x160>
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	4a58      	ldr	r2, [pc, #352]	; (80070cc <DMA_List_Init+0x2a0>)
 8006f6a:	4293      	cmp	r3, r2
 8006f6c:	d00e      	beq.n	8006f8c <DMA_List_Init+0x160>
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	4a57      	ldr	r2, [pc, #348]	; (80070d0 <DMA_List_Init+0x2a4>)
 8006f74:	4293      	cmp	r3, r2
 8006f76:	d009      	beq.n	8006f8c <DMA_List_Init+0x160>
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	4a55      	ldr	r2, [pc, #340]	; (80070d4 <DMA_List_Init+0x2a8>)
 8006f7e:	4293      	cmp	r3, r2
 8006f80:	d004      	beq.n	8006f8c <DMA_List_Init+0x160>
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	4a54      	ldr	r2, [pc, #336]	; (80070d8 <DMA_List_Init+0x2ac>)
 8006f88:	4293      	cmp	r3, r2
 8006f8a:	d101      	bne.n	8006f90 <DMA_List_Init+0x164>
 8006f8c:	2301      	movs	r3, #1
 8006f8e:	e000      	b.n	8006f92 <DMA_List_Init+0x166>
 8006f90:	2300      	movs	r3, #0
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d004      	beq.n	8006fa0 <DMA_List_Init+0x174>
  {
    tmpreg |= hdma->InitLinkedList.LinkAllocatedPort;
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f9a:	68fa      	ldr	r2, [r7, #12]
 8006f9c:	4313      	orrs	r3, r2
 8006f9e:	60fb      	str	r3, [r7, #12]
  }

  /* Write DMA Channel Control Register (CCR) */
  MODIFY_REG(hdma->Instance->CCR, DMA_CCR_PRIO | DMA_CCR_LAP | DMA_CCR_LSM, tmpreg);
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	695b      	ldr	r3, [r3, #20]
 8006fa6:	f423 0143 	bic.w	r1, r3, #12779520	; 0xc30000
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	68fa      	ldr	r2, [r7, #12]
 8006fb0:	430a      	orrs	r2, r1
 8006fb2:	615a      	str	r2, [r3, #20]

  /* Write DMA Channel Control Register (CTR1) */
  WRITE_REG(hdma->Instance->CTR1, 0U);
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	2200      	movs	r2, #0
 8006fba:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write DMA Channel Control Register (CTR2) */
  WRITE_REG(hdma->Instance->CTR2, hdma->InitLinkedList.TransferEventMode);
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	687a      	ldr	r2, [r7, #4]
 8006fc2:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8006fc4:	645a      	str	r2, [r3, #68]	; 0x44

  /* Write DMA Channel Control Register (CBR1) */
  WRITE_REG(hdma->Instance->CBR1, 0U);
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	2200      	movs	r2, #0
 8006fcc:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write DMA Channel Control Register (CSAR) */
  WRITE_REG(hdma->Instance->CSAR, 0U);
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	2200      	movs	r2, #0
 8006fd4:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write DMA Channel Control Register (CDAR) */
  WRITE_REG(hdma->Instance->CDAR, 0U);
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	2200      	movs	r2, #0
 8006fdc:	651a      	str	r2, [r3, #80]	; 0x50

  /* If 2D Addressing is supported by current channel */
  if (IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) != 0U)
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	4a36      	ldr	r2, [pc, #216]	; (80070bc <DMA_List_Init+0x290>)
 8006fe4:	4293      	cmp	r3, r2
 8006fe6:	d022      	beq.n	800702e <DMA_List_Init+0x202>
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	4a34      	ldr	r2, [pc, #208]	; (80070c0 <DMA_List_Init+0x294>)
 8006fee:	4293      	cmp	r3, r2
 8006ff0:	d01d      	beq.n	800702e <DMA_List_Init+0x202>
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	4a33      	ldr	r2, [pc, #204]	; (80070c4 <DMA_List_Init+0x298>)
 8006ff8:	4293      	cmp	r3, r2
 8006ffa:	d018      	beq.n	800702e <DMA_List_Init+0x202>
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	4a31      	ldr	r2, [pc, #196]	; (80070c8 <DMA_List_Init+0x29c>)
 8007002:	4293      	cmp	r3, r2
 8007004:	d013      	beq.n	800702e <DMA_List_Init+0x202>
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	4a30      	ldr	r2, [pc, #192]	; (80070cc <DMA_List_Init+0x2a0>)
 800700c:	4293      	cmp	r3, r2
 800700e:	d00e      	beq.n	800702e <DMA_List_Init+0x202>
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	4a2e      	ldr	r2, [pc, #184]	; (80070d0 <DMA_List_Init+0x2a4>)
 8007016:	4293      	cmp	r3, r2
 8007018:	d009      	beq.n	800702e <DMA_List_Init+0x202>
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	4a2d      	ldr	r2, [pc, #180]	; (80070d4 <DMA_List_Init+0x2a8>)
 8007020:	4293      	cmp	r3, r2
 8007022:	d004      	beq.n	800702e <DMA_List_Init+0x202>
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	4a2b      	ldr	r2, [pc, #172]	; (80070d8 <DMA_List_Init+0x2ac>)
 800702a:	4293      	cmp	r3, r2
 800702c:	d101      	bne.n	8007032 <DMA_List_Init+0x206>
 800702e:	2301      	movs	r3, #1
 8007030:	e000      	b.n	8007034 <DMA_List_Init+0x208>
 8007032:	2300      	movs	r3, #0
 8007034:	2b00      	cmp	r3, #0
 8007036:	d007      	beq.n	8007048 <DMA_List_Init+0x21c>
  {
    /* Write DMA Channel Control Register (CTR3) */
    WRITE_REG(hdma->Instance->CTR3, 0U);
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	2200      	movs	r2, #0
 800703e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Write DMA Channel Control Register (CBR2) */
    WRITE_REG(hdma->Instance->CBR2, 0U);
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	2200      	movs	r2, #0
 8007046:	659a      	str	r2, [r3, #88]	; 0x58
  }

  /* Write DMA Channel linked-list address register (CLLR) */
  WRITE_REG(hdma->Instance->CLLR, 0U);
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	2200      	movs	r2, #0
 800704e:	67da      	str	r2, [r3, #124]	; 0x7c
}
 8007050:	bf00      	nop
 8007052:	3714      	adds	r7, #20
 8007054:	46bd      	mov	sp, r7
 8007056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800705a:	4770      	bx	lr
 800705c:	40020050 	.word	0x40020050
 8007060:	50020050 	.word	0x50020050
 8007064:	400200d0 	.word	0x400200d0
 8007068:	500200d0 	.word	0x500200d0
 800706c:	40020150 	.word	0x40020150
 8007070:	50020150 	.word	0x50020150
 8007074:	400201d0 	.word	0x400201d0
 8007078:	500201d0 	.word	0x500201d0
 800707c:	40020250 	.word	0x40020250
 8007080:	50020250 	.word	0x50020250
 8007084:	400202d0 	.word	0x400202d0
 8007088:	500202d0 	.word	0x500202d0
 800708c:	40020350 	.word	0x40020350
 8007090:	50020350 	.word	0x50020350
 8007094:	400203d0 	.word	0x400203d0
 8007098:	500203d0 	.word	0x500203d0
 800709c:	40020450 	.word	0x40020450
 80070a0:	50020450 	.word	0x50020450
 80070a4:	400204d0 	.word	0x400204d0
 80070a8:	500204d0 	.word	0x500204d0
 80070ac:	40020550 	.word	0x40020550
 80070b0:	50020550 	.word	0x50020550
 80070b4:	400205d0 	.word	0x400205d0
 80070b8:	500205d0 	.word	0x500205d0
 80070bc:	40020650 	.word	0x40020650
 80070c0:	50020650 	.word	0x50020650
 80070c4:	400206d0 	.word	0x400206d0
 80070c8:	500206d0 	.word	0x500206d0
 80070cc:	40020750 	.word	0x40020750
 80070d0:	50020750 	.word	0x50020750
 80070d4:	400207d0 	.word	0x400207d0
 80070d8:	500207d0 	.word	0x500207d0

080070dc <DMA_List_BuildNode>:
  *                       configurations.
  * @retval None.
  */
static void DMA_List_BuildNode(DMA_NodeConfTypeDef const *const pNodeConfig,
                               DMA_NodeTypeDef *const pNode)
{
 80070dc:	b480      	push	{r7}
 80070de:	b085      	sub	sp, #20
 80070e0:	af00      	add	r7, sp, #0
 80070e2:	6078      	str	r0, [r7, #4]
 80070e4:	6039      	str	r1, [r7, #0]
  int32_t blockoffset;

  /* Update CTR1 register value ***************************************************************************************/
  /* Prepare DMA channel transfer register (CTR1) value */
  pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] = pNodeConfig->Init.DestInc                     |
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	695a      	ldr	r2, [r3, #20]
                                                   pNodeConfig->Init.DestDataWidth               |
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	69db      	ldr	r3, [r3, #28]
  pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] = pNodeConfig->Init.DestInc                     |
 80070ee:	431a      	orrs	r2, r3
                                                   pNodeConfig->DataHandlingConfig.DataAlignment |
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                                                   pNodeConfig->Init.DestDataWidth               |
 80070f4:	431a      	orrs	r2, r3
                                                   pNodeConfig->Init.SrcInc                      |
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	691b      	ldr	r3, [r3, #16]
                                                   pNodeConfig->DataHandlingConfig.DataAlignment |
 80070fa:	431a      	orrs	r2, r3
                                                   pNodeConfig->Init.SrcDataWidth;
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	699b      	ldr	r3, [r3, #24]
                                                   pNodeConfig->Init.SrcInc                      |
 8007100:	431a      	orrs	r2, r3
  pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] = pNodeConfig->Init.DestInc                     |
 8007102:	683b      	ldr	r3, [r7, #0]
 8007104:	601a      	str	r2, [r3, #0]
    pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] |= DMA_CTR1_DSEC;
  }
#endif /* defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  /* Add parameters related to DMA configuration */
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_GPDMA) == DMA_CHANNEL_TYPE_GPDMA)
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	f003 0320 	and.w	r3, r3, #32
 800710e:	2b00      	cmp	r3, #0
 8007110:	d017      	beq.n	8007142 <DMA_List_BuildNode+0x66>
  {
    /* Prepare DMA channel transfer register (CTR1) value */
    pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] |=
 8007112:	683b      	ldr	r3, [r7, #0]
 8007114:	681a      	ldr	r2, [r3, #0]
      (pNodeConfig->Init.TransferAllocatedPort | pNodeConfig->DataHandlingConfig.DataExchange |
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800711e:	4319      	orrs	r1, r3
       (((pNodeConfig->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1)    |
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007124:	3b01      	subs	r3, #1
 8007126:	051b      	lsls	r3, r3, #20
 8007128:	f003 737c 	and.w	r3, r3, #66060288	; 0x3f00000
      (pNodeConfig->Init.TransferAllocatedPort | pNodeConfig->DataHandlingConfig.DataExchange |
 800712c:	4319      	orrs	r1, r3
       (((pNodeConfig->Init.SrcBurstLength - 1U) << DMA_CTR1_SBL_1_Pos) & DMA_CTR1_SBL_1));
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007132:	3b01      	subs	r3, #1
 8007134:	011b      	lsls	r3, r3, #4
 8007136:	f403 737c 	and.w	r3, r3, #1008	; 0x3f0
       (((pNodeConfig->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1)    |
 800713a:	430b      	orrs	r3, r1
    pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] |=
 800713c:	431a      	orrs	r2, r3
 800713e:	683b      	ldr	r3, [r7, #0]
 8007140:	601a      	str	r2, [r3, #0]
  /*********************************************************************************** CTR1 register value is updated */


  /* Update CTR2 register value ***************************************************************************************/
  /* Prepare DMA channel transfer register 2 (CTR2) value */
  pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] = pNodeConfig->Init.TransferEventMode |
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	6b1a      	ldr	r2, [r3, #48]	; 0x30
                                                   (pNodeConfig->Init.Request & (DMA_CTR2_REQSEL | DMA_CTR2_SWREQ));
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	6859      	ldr	r1, [r3, #4]
 800714a:	f240 237f 	movw	r3, #639	; 0x27f
 800714e:	400b      	ands	r3, r1
  pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] = pNodeConfig->Init.TransferEventMode |
 8007150:	431a      	orrs	r2, r3
 8007152:	683b      	ldr	r3, [r7, #0]
 8007154:	605a      	str	r2, [r3, #4]

  /* Check for memory to peripheral transfer */
  if ((pNodeConfig->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	68db      	ldr	r3, [r3, #12]
 800715a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800715e:	d10c      	bne.n	800717a <DMA_List_BuildNode+0x9e>
  {
    /* Check for GPDMA */
    if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_GPDMA) == DMA_CHANNEL_TYPE_GPDMA)
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	f003 0320 	and.w	r3, r3, #32
 8007168:	2b00      	cmp	r3, #0
 800716a:	d011      	beq.n	8007190 <DMA_List_BuildNode+0xb4>
    {
      pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |= DMA_CTR2_DREQ;
 800716c:	683b      	ldr	r3, [r7, #0]
 800716e:	685b      	ldr	r3, [r3, #4]
 8007170:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8007174:	683b      	ldr	r3, [r7, #0]
 8007176:	605a      	str	r2, [r3, #4]
 8007178:	e00a      	b.n	8007190 <DMA_List_BuildNode+0xb4>
    }
  }
  /* Memory to memory transfer */
  else if ((pNodeConfig->Init.Direction) == DMA_MEMORY_TO_MEMORY)
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	68db      	ldr	r3, [r3, #12]
 800717e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007182:	d105      	bne.n	8007190 <DMA_List_BuildNode+0xb4>
  {
    pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |= DMA_CTR2_SWREQ;
 8007184:	683b      	ldr	r3, [r7, #0]
 8007186:	685b      	ldr	r3, [r3, #4]
 8007188:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800718c:	683b      	ldr	r3, [r7, #0]
 800718e:	605a      	str	r2, [r3, #4]
  {
    /* Prevent MISRA-C2012-Rule-15.7 */
  }

  /* Check if trigger feature is active */
  if (pNodeConfig->TriggerConfig.TriggerPolarity != DMA_TRIG_POLARITY_MASKED)
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007194:	2b00      	cmp	r3, #0
 8007196:	d00f      	beq.n	80071b8 <DMA_List_BuildNode+0xdc>
  {
    /* Prepare DMA channel transfer register 2 (CTR2) value */
    pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |=
 8007198:	683b      	ldr	r3, [r7, #0]
 800719a:	685a      	ldr	r2, [r3, #4]
      pNodeConfig->TriggerConfig.TriggerMode | pNodeConfig->TriggerConfig.TriggerPolarity |
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071a4:	4319      	orrs	r1, r3
      ((pNodeConfig->TriggerConfig.TriggerSelection << DMA_CTR2_TRIGSEL_Pos) & DMA_CTR2_TRIGSEL);
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80071aa:	041b      	lsls	r3, r3, #16
 80071ac:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
      pNodeConfig->TriggerConfig.TriggerMode | pNodeConfig->TriggerConfig.TriggerPolarity |
 80071b0:	430b      	orrs	r3, r1
    pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |=
 80071b2:	431a      	orrs	r2, r3
 80071b4:	683b      	ldr	r3, [r7, #0]
 80071b6:	605a      	str	r2, [r3, #4]
  /*********************************************************************************** CTR2 register value is updated */


  /* Update CBR1 register value ***************************************************************************************/
  /* Prepare DMA channel block register 1 (CBR1) value */
  pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = (pNodeConfig->DataSize & DMA_CBR1_BNDT);
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80071bc:	b29a      	uxth	r2, r3
 80071be:	683b      	ldr	r3, [r7, #0]
 80071c0:	609a      	str	r2, [r3, #8]

  /* If 2D addressing is supported by the selected DMA channel */
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	f003 0302 	and.w	r3, r3, #2
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d04e      	beq.n	800726c <DMA_List_BuildNode+0x190>
  {
    /* Set the new CBR1 Register value */
    pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |=
 80071ce:	683b      	ldr	r3, [r7, #0]
 80071d0:	689a      	ldr	r2, [r3, #8]
      (((pNodeConfig->RepeatBlockConfig.RepeatCount - 1U) << DMA_CBR1_BRC_Pos) & DMA_CBR1_BRC);
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80071d6:	3b01      	subs	r3, #1
 80071d8:	0419      	lsls	r1, r3, #16
 80071da:	4b67      	ldr	r3, [pc, #412]	; (8007378 <DMA_List_BuildNode+0x29c>)
 80071dc:	400b      	ands	r3, r1
    pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |=
 80071de:	431a      	orrs	r2, r3
 80071e0:	683b      	ldr	r3, [r7, #0]
 80071e2:	609a      	str	r2, [r3, #8]

    /* If the source address offset is negative, set SDEC bit */
    if (pNodeConfig->RepeatBlockConfig.SrcAddrOffset < 0)
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	da06      	bge.n	80071fa <DMA_List_BuildNode+0x11e>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_SDEC;
 80071ec:	683b      	ldr	r3, [r7, #0]
 80071ee:	689b      	ldr	r3, [r3, #8]
 80071f0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80071f4:	683b      	ldr	r3, [r7, #0]
 80071f6:	609a      	str	r2, [r3, #8]
 80071f8:	e005      	b.n	8007206 <DMA_List_BuildNode+0x12a>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_SDEC);
 80071fa:	683b      	ldr	r3, [r7, #0]
 80071fc:	689b      	ldr	r3, [r3, #8]
 80071fe:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8007202:	683b      	ldr	r3, [r7, #0]
 8007204:	609a      	str	r2, [r3, #8]
    }

    /* If the destination address offset is negative, set DDEC bit */
    if (pNodeConfig->RepeatBlockConfig.DestAddrOffset < 0)
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800720a:	2b00      	cmp	r3, #0
 800720c:	da06      	bge.n	800721c <DMA_List_BuildNode+0x140>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_DDEC;
 800720e:	683b      	ldr	r3, [r7, #0]
 8007210:	689b      	ldr	r3, [r3, #8]
 8007212:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007216:	683b      	ldr	r3, [r7, #0]
 8007218:	609a      	str	r2, [r3, #8]
 800721a:	e005      	b.n	8007228 <DMA_List_BuildNode+0x14c>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_DDEC);
 800721c:	683b      	ldr	r3, [r7, #0]
 800721e:	689b      	ldr	r3, [r3, #8]
 8007220:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8007224:	683b      	ldr	r3, [r7, #0]
 8007226:	609a      	str	r2, [r3, #8]
    }

    /* If the repeated block source address offset is negative, set BRSEC bit */
    if (pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset < 0)
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800722c:	2b00      	cmp	r3, #0
 800722e:	da06      	bge.n	800723e <DMA_List_BuildNode+0x162>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_BRSDEC;
 8007230:	683b      	ldr	r3, [r7, #0]
 8007232:	689b      	ldr	r3, [r3, #8]
 8007234:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007238:	683b      	ldr	r3, [r7, #0]
 800723a:	609a      	str	r2, [r3, #8]
 800723c:	e005      	b.n	800724a <DMA_List_BuildNode+0x16e>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_BRSDEC);
 800723e:	683b      	ldr	r3, [r7, #0]
 8007240:	689b      	ldr	r3, [r3, #8]
 8007242:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8007246:	683b      	ldr	r3, [r7, #0]
 8007248:	609a      	str	r2, [r3, #8]
    }

    /* if the repeated block destination address offset is negative, set BRDEC bit */
    if (pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset < 0)
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800724e:	2b00      	cmp	r3, #0
 8007250:	da06      	bge.n	8007260 <DMA_List_BuildNode+0x184>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_BRDDEC;
 8007252:	683b      	ldr	r3, [r7, #0]
 8007254:	689b      	ldr	r3, [r3, #8]
 8007256:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800725a:	683b      	ldr	r3, [r7, #0]
 800725c:	609a      	str	r2, [r3, #8]
 800725e:	e005      	b.n	800726c <DMA_List_BuildNode+0x190>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_BRDDEC);
 8007260:	683b      	ldr	r3, [r7, #0]
 8007262:	689b      	ldr	r3, [r3, #8]
 8007264:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8007268:	683b      	ldr	r3, [r7, #0]
 800726a:	609a      	str	r2, [r3, #8]
  }
  /*********************************************************************************** CBR1 register value is updated */


  /* Update CSAR register value ***************************************************************************************/
  pNode->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] = pNodeConfig->SrcAddress;
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8007270:	683b      	ldr	r3, [r7, #0]
 8007272:	60da      	str	r2, [r3, #12]
  /*********************************************************************************** CSAR register value is updated */


  /* Update CDAR register value ***************************************************************************************/
  pNode->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = pNodeConfig->DstAddress;
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8007278:	683b      	ldr	r3, [r7, #0]
 800727a:	611a      	str	r2, [r3, #16]
  /*********************************************************************************** CDAR register value is updated */


  /* Check if the selected channel is 2D addressing */
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	f003 0302 	and.w	r3, r3, #2
 8007284:	2b00      	cmp	r3, #0
 8007286:	d059      	beq.n	800733c <DMA_List_BuildNode+0x260>
  {
    /* Update CTR3 register value *************************************************************************************/
    /* Write new CTR3 Register value : source address offset */
    if (pNodeConfig->RepeatBlockConfig.SrcAddrOffset < 0)
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800728c:	2b00      	cmp	r3, #0
 800728e:	da09      	bge.n	80072a4 <DMA_List_BuildNode+0x1c8>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.SrcAddrOffset);
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007294:	425b      	negs	r3, r3
 8007296:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] = ((uint32_t)blockoffset & DMA_CTR3_SAO);
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	f3c3 020c 	ubfx	r2, r3, #0, #13
 800729e:	683b      	ldr	r3, [r7, #0]
 80072a0:	615a      	str	r2, [r3, #20]
 80072a2:	e005      	b.n	80072b0 <DMA_List_BuildNode+0x1d4>
    }
    else
    {
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] =
        ((uint32_t)pNodeConfig->RepeatBlockConfig.SrcAddrOffset & DMA_CTR3_SAO);
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80072a8:	f3c3 020c 	ubfx	r2, r3, #0, #13
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] =
 80072ac:	683b      	ldr	r3, [r7, #0]
 80072ae:	615a      	str	r2, [r3, #20]
    }

    /* Write new CTR3 Register value : destination address offset */
    if (pNodeConfig->RepeatBlockConfig.DestAddrOffset < 0)
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	da0d      	bge.n	80072d4 <DMA_List_BuildNode+0x1f8>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.DestAddrOffset);
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80072bc:	425b      	negs	r3, r3
 80072be:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] |= (((uint32_t)blockoffset << DMA_CTR3_DAO_Pos) & DMA_CTR3_DAO);
 80072c0:	683b      	ldr	r3, [r7, #0]
 80072c2:	695a      	ldr	r2, [r3, #20]
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	0419      	lsls	r1, r3, #16
 80072c8:	4b2c      	ldr	r3, [pc, #176]	; (800737c <DMA_List_BuildNode+0x2a0>)
 80072ca:	400b      	ands	r3, r1
 80072cc:	431a      	orrs	r2, r3
 80072ce:	683b      	ldr	r3, [r7, #0]
 80072d0:	615a      	str	r2, [r3, #20]
 80072d2:	e009      	b.n	80072e8 <DMA_List_BuildNode+0x20c>
    }
    else
    {
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] |=
 80072d4:	683b      	ldr	r3, [r7, #0]
 80072d6:	695a      	ldr	r2, [r3, #20]
        (((uint32_t)pNodeConfig->RepeatBlockConfig.DestAddrOffset << DMA_CTR3_DAO_Pos) & DMA_CTR3_DAO);
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80072dc:	0419      	lsls	r1, r3, #16
 80072de:	4b27      	ldr	r3, [pc, #156]	; (800737c <DMA_List_BuildNode+0x2a0>)
 80072e0:	400b      	ands	r3, r1
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] |=
 80072e2:	431a      	orrs	r2, r3
 80072e4:	683b      	ldr	r3, [r7, #0]
 80072e6:	615a      	str	r2, [r3, #20]
    /********************************************************************************* CTR3 register value is updated */


    /* Update CBR2 register value *************************************************************************************/
    /* Write new CBR2 Register value : repeated block source address offset */
    if (pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset < 0)
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	da08      	bge.n	8007302 <DMA_List_BuildNode+0x226>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset);
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80072f4:	425b      	negs	r3, r3
 80072f6:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] = ((uint32_t)blockoffset & DMA_CBR2_BRSAO);
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	b29a      	uxth	r2, r3
 80072fc:	683b      	ldr	r3, [r7, #0]
 80072fe:	619a      	str	r2, [r3, #24]
 8007300:	e004      	b.n	800730c <DMA_List_BuildNode+0x230>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] =
        ((uint32_t)pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset & DMA_CBR2_BRSAO);
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007306:	b29a      	uxth	r2, r3
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] =
 8007308:	683b      	ldr	r3, [r7, #0]
 800730a:	619a      	str	r2, [r3, #24]
    }

    /* Write new CBR2 Register value : repeated block destination address offset */
    if (pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset < 0)
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007310:	2b00      	cmp	r3, #0
 8007312:	da0b      	bge.n	800732c <DMA_List_BuildNode+0x250>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset);
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007318:	425b      	negs	r3, r3
 800731a:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 800731c:	683b      	ldr	r3, [r7, #0]
 800731e:	699a      	ldr	r2, [r3, #24]
        (((uint32_t)blockoffset & DMA_CBR2_BRSAO) << DMA_CBR2_BRDAO_Pos);
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	041b      	lsls	r3, r3, #16
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 8007324:	431a      	orrs	r2, r3
 8007326:	683b      	ldr	r3, [r7, #0]
 8007328:	619a      	str	r2, [r3, #24]
 800732a:	e007      	b.n	800733c <DMA_List_BuildNode+0x260>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 800732c:	683b      	ldr	r3, [r7, #0]
 800732e:	699a      	ldr	r2, [r3, #24]
        (((uint32_t)pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset << DMA_CBR2_BRDAO_Pos) & DMA_CBR2_BRDAO);
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007334:	041b      	lsls	r3, r3, #16
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 8007336:	431a      	orrs	r2, r3
 8007338:	683b      	ldr	r3, [r7, #0]
 800733a:	619a      	str	r2, [r3, #24]
  }


  /* Update node information value ************************************************************************************/
  /* Set node information */
  pNode->NodeInfo = pNodeConfig->NodeType;
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681a      	ldr	r2, [r3, #0]
 8007340:	683b      	ldr	r3, [r7, #0]
 8007342:	621a      	str	r2, [r3, #32]
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	f003 0302 	and.w	r3, r3, #2
 800734c:	2b00      	cmp	r3, #0
 800734e:	d006      	beq.n	800735e <DMA_List_BuildNode+0x282>
  {
    pNode->NodeInfo |= (NODE_CLLR_2D_DEFAULT_OFFSET << NODE_CLLR_IDX_POS);
 8007350:	683b      	ldr	r3, [r7, #0]
 8007352:	6a1b      	ldr	r3, [r3, #32]
 8007354:	f443 62e0 	orr.w	r2, r3, #1792	; 0x700
 8007358:	683b      	ldr	r3, [r7, #0]
 800735a:	621a      	str	r2, [r3, #32]
  else
  {
    pNode->NodeInfo |= (NODE_CLLR_LINEAR_DEFAULT_OFFSET << NODE_CLLR_IDX_POS);
  }
  /******************************************************************************** Node information value is updated */
}
 800735c:	e005      	b.n	800736a <DMA_List_BuildNode+0x28e>
    pNode->NodeInfo |= (NODE_CLLR_LINEAR_DEFAULT_OFFSET << NODE_CLLR_IDX_POS);
 800735e:	683b      	ldr	r3, [r7, #0]
 8007360:	6a1b      	ldr	r3, [r3, #32]
 8007362:	f443 62a0 	orr.w	r2, r3, #1280	; 0x500
 8007366:	683b      	ldr	r3, [r7, #0]
 8007368:	621a      	str	r2, [r3, #32]
}
 800736a:	bf00      	nop
 800736c:	3714      	adds	r7, #20
 800736e:	46bd      	mov	sp, r7
 8007370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007374:	4770      	bx	lr
 8007376:	bf00      	nop
 8007378:	07ff0000 	.word	0x07ff0000
 800737c:	1fff0000 	.word	0x1fff0000

08007380 <DMA_List_CheckNodesBaseAddresses>:
  * @retval Return 0 when nodes addresses are compatible, 1 otherwise.
  */
static uint32_t DMA_List_CheckNodesBaseAddresses(DMA_NodeTypeDef const *const pNode1,
                                                 DMA_NodeTypeDef const *const pNode2,
                                                 DMA_NodeTypeDef const *const pNode3)
{
 8007380:	b480      	push	{r7}
 8007382:	b087      	sub	sp, #28
 8007384:	af00      	add	r7, sp, #0
 8007386:	60f8      	str	r0, [r7, #12]
 8007388:	60b9      	str	r1, [r7, #8]
 800738a:	607a      	str	r2, [r7, #4]
  uint32_t temp = (((uint32_t)pNode1 | (uint32_t)pNode2 | (uint32_t)pNode3) & DMA_CLBAR_LBA);
 800738c:	68fa      	ldr	r2, [r7, #12]
 800738e:	68bb      	ldr	r3, [r7, #8]
 8007390:	431a      	orrs	r2, r3
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	4313      	orrs	r3, r2
 8007396:	0c1b      	lsrs	r3, r3, #16
 8007398:	041b      	lsls	r3, r3, #16
 800739a:	613b      	str	r3, [r7, #16]
  uint32_t ref  = 0U;
 800739c:	2300      	movs	r3, #0
 800739e:	617b      	str	r3, [r7, #20]

  /* Check node 1 address */
  if ((uint32_t)pNode1 != 0U)
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d002      	beq.n	80073ac <DMA_List_CheckNodesBaseAddresses+0x2c>
  {
    ref = (uint32_t)pNode1;
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	617b      	str	r3, [r7, #20]
 80073aa:	e00a      	b.n	80073c2 <DMA_List_CheckNodesBaseAddresses+0x42>
  }
  /* Check node 2 address */
  else if ((uint32_t)pNode2 != 0U)
 80073ac:	68bb      	ldr	r3, [r7, #8]
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d002      	beq.n	80073b8 <DMA_List_CheckNodesBaseAddresses+0x38>
  {
    ref = (uint32_t)pNode2;
 80073b2:	68bb      	ldr	r3, [r7, #8]
 80073b4:	617b      	str	r3, [r7, #20]
 80073b6:	e004      	b.n	80073c2 <DMA_List_CheckNodesBaseAddresses+0x42>
  }
  /* Check node 3 address */
  else if ((uint32_t)pNode3 != 0U)
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d001      	beq.n	80073c2 <DMA_List_CheckNodesBaseAddresses+0x42>
  {
    ref = (uint32_t)pNode3;
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	617b      	str	r3, [r7, #20]
  {
    /* Prevent MISRA-C2012-Rule-15.7 */
  }

  /* Check addresses compatibility */
  if (temp != ((uint32_t)ref & DMA_CLBAR_LBA))
 80073c2:	697b      	ldr	r3, [r7, #20]
 80073c4:	0c1b      	lsrs	r3, r3, #16
 80073c6:	041b      	lsls	r3, r3, #16
 80073c8:	693a      	ldr	r2, [r7, #16]
 80073ca:	429a      	cmp	r2, r3
 80073cc:	d001      	beq.n	80073d2 <DMA_List_CheckNodesBaseAddresses+0x52>
  {
    return 1U;
 80073ce:	2301      	movs	r3, #1
 80073d0:	e000      	b.n	80073d4 <DMA_List_CheckNodesBaseAddresses+0x54>
  }

  return 0U;
 80073d2:	2300      	movs	r3, #0
}
 80073d4:	4618      	mov	r0, r3
 80073d6:	371c      	adds	r7, #28
 80073d8:	46bd      	mov	sp, r7
 80073da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073de:	4770      	bx	lr

080073e0 <DMA_List_CheckNodesTypes>:
  * @retval Return 0 when nodes types are compatible, otherwise nodes types are not compatible.
  */
static uint32_t DMA_List_CheckNodesTypes(DMA_NodeTypeDef const *const pNode1,
                                         DMA_NodeTypeDef const *const pNode2,
                                         DMA_NodeTypeDef const *const pNode3)
{
 80073e0:	b480      	push	{r7}
 80073e2:	b087      	sub	sp, #28
 80073e4:	af00      	add	r7, sp, #0
 80073e6:	60f8      	str	r0, [r7, #12]
 80073e8:	60b9      	str	r1, [r7, #8]
 80073ea:	607a      	str	r2, [r7, #4]
  uint32_t ref = 0U;
 80073ec:	2300      	movs	r3, #0
 80073ee:	617b      	str	r3, [r7, #20]

  /* Check node 1 parameter */
  if (pNode1 != NULL)
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d004      	beq.n	8007400 <DMA_List_CheckNodesTypes+0x20>
  {
    ref = pNode1->NodeInfo & NODE_TYPE_MASK;
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	6a1b      	ldr	r3, [r3, #32]
 80073fa:	b2db      	uxtb	r3, r3
 80073fc:	617b      	str	r3, [r7, #20]
 80073fe:	e00e      	b.n	800741e <DMA_List_CheckNodesTypes+0x3e>
  }
  /* Check node 2 parameter */
  else if (pNode2 != NULL)
 8007400:	68bb      	ldr	r3, [r7, #8]
 8007402:	2b00      	cmp	r3, #0
 8007404:	d004      	beq.n	8007410 <DMA_List_CheckNodesTypes+0x30>
  {
    ref = pNode2->NodeInfo & NODE_TYPE_MASK;
 8007406:	68bb      	ldr	r3, [r7, #8]
 8007408:	6a1b      	ldr	r3, [r3, #32]
 800740a:	b2db      	uxtb	r3, r3
 800740c:	617b      	str	r3, [r7, #20]
 800740e:	e006      	b.n	800741e <DMA_List_CheckNodesTypes+0x3e>
  }
  /* Check node 3 parameter */
  else if (pNode3 != NULL)
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	2b00      	cmp	r3, #0
 8007414:	d003      	beq.n	800741e <DMA_List_CheckNodesTypes+0x3e>
  {
    ref = pNode3->NodeInfo & NODE_TYPE_MASK;
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	6a1b      	ldr	r3, [r3, #32]
 800741a:	b2db      	uxtb	r3, r3
 800741c:	617b      	str	r3, [r7, #20]
  {
    /* Prevent MISRA-C2012-Rule-15.7 */
  }

  /* Check node 2 parameter */
  if (pNode2 != NULL)
 800741e:	68bb      	ldr	r3, [r7, #8]
 8007420:	2b00      	cmp	r3, #0
 8007422:	d007      	beq.n	8007434 <DMA_List_CheckNodesTypes+0x54>
  {
    /* Check node type compatibility */
    if (ref != (pNode2->NodeInfo & NODE_TYPE_MASK))
 8007424:	68bb      	ldr	r3, [r7, #8]
 8007426:	6a1b      	ldr	r3, [r3, #32]
 8007428:	b2db      	uxtb	r3, r3
 800742a:	697a      	ldr	r2, [r7, #20]
 800742c:	429a      	cmp	r2, r3
 800742e:	d001      	beq.n	8007434 <DMA_List_CheckNodesTypes+0x54>
    {
      return 2U;
 8007430:	2302      	movs	r3, #2
 8007432:	e00b      	b.n	800744c <DMA_List_CheckNodesTypes+0x6c>
    }
  }

  /* Check node 3 parameter */
  if (pNode3 != NULL)
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	2b00      	cmp	r3, #0
 8007438:	d007      	beq.n	800744a <DMA_List_CheckNodesTypes+0x6a>
  {
    /* Check node type compatibility */
    if (ref != (pNode3->NodeInfo & NODE_TYPE_MASK))
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	6a1b      	ldr	r3, [r3, #32]
 800743e:	b2db      	uxtb	r3, r3
 8007440:	697a      	ldr	r2, [r7, #20]
 8007442:	429a      	cmp	r2, r3
 8007444:	d001      	beq.n	800744a <DMA_List_CheckNodesTypes+0x6a>
    {
      return 3U;
 8007446:	2303      	movs	r3, #3
 8007448:	e000      	b.n	800744c <DMA_List_CheckNodesTypes+0x6c>
    }
  }

  return 0U;
 800744a:	2300      	movs	r3, #0
}
 800744c:	4618      	mov	r0, r3
 800744e:	371c      	adds	r7, #28
 8007450:	46bd      	mov	sp, r7
 8007452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007456:	4770      	bx	lr

08007458 <DMA_List_GetCLLRNodeInfo>:
  * @retval None.
  */
static void DMA_List_GetCLLRNodeInfo(DMA_NodeTypeDef const *const pNode,
                                     uint32_t *const cllr_mask,
                                     uint32_t *const cllr_offset)
{
 8007458:	b480      	push	{r7}
 800745a:	b085      	sub	sp, #20
 800745c:	af00      	add	r7, sp, #0
 800745e:	60f8      	str	r0, [r7, #12]
 8007460:	60b9      	str	r1, [r7, #8]
 8007462:	607a      	str	r2, [r7, #4]
  /* Check node type */
  if ((pNode->NodeInfo & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	6a1b      	ldr	r3, [r3, #32]
 8007468:	f003 0302 	and.w	r3, r3, #2
 800746c:	2b00      	cmp	r3, #0
 800746e:	d00c      	beq.n	800748a <DMA_List_GetCLLRNodeInfo+0x32>
  {
    /* Update CLLR register mask value */
    if (cllr_mask != NULL)
 8007470:	68bb      	ldr	r3, [r7, #8]
 8007472:	2b00      	cmp	r3, #0
 8007474:	d002      	beq.n	800747c <DMA_List_GetCLLRNodeInfo+0x24>
    {
      *cllr_mask = DMA_CLLR_UT1 | DMA_CLLR_UT2 | DMA_CLLR_UB1 | DMA_CLLR_USA | DMA_CLLR_UDA | DMA_CLLR_UT3 |
 8007476:	68bb      	ldr	r3, [r7, #8]
 8007478:	4a0d      	ldr	r2, [pc, #52]	; (80074b0 <DMA_List_GetCLLRNodeInfo+0x58>)
 800747a:	601a      	str	r2, [r3, #0]
                   DMA_CLLR_UB2 | DMA_CLLR_ULL;
    }

    /* Update CLLR register offset */
    if (cllr_offset != NULL)
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	2b00      	cmp	r3, #0
 8007480:	d00f      	beq.n	80074a2 <DMA_List_GetCLLRNodeInfo+0x4a>
    {
      *cllr_offset = NODE_CLLR_2D_DEFAULT_OFFSET;
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	2207      	movs	r2, #7
 8007486:	601a      	str	r2, [r3, #0]
    if (cllr_offset != NULL)
    {
      *cllr_offset = NODE_CLLR_LINEAR_DEFAULT_OFFSET;
    }
  }
}
 8007488:	e00b      	b.n	80074a2 <DMA_List_GetCLLRNodeInfo+0x4a>
    if (cllr_mask != NULL)
 800748a:	68bb      	ldr	r3, [r7, #8]
 800748c:	2b00      	cmp	r3, #0
 800748e:	d002      	beq.n	8007496 <DMA_List_GetCLLRNodeInfo+0x3e>
      *cllr_mask = DMA_CLLR_UT1 | DMA_CLLR_UT2 | DMA_CLLR_UB1 | DMA_CLLR_USA | DMA_CLLR_UDA | DMA_CLLR_ULL;
 8007490:	68bb      	ldr	r3, [r7, #8]
 8007492:	4a08      	ldr	r2, [pc, #32]	; (80074b4 <DMA_List_GetCLLRNodeInfo+0x5c>)
 8007494:	601a      	str	r2, [r3, #0]
    if (cllr_offset != NULL)
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	2b00      	cmp	r3, #0
 800749a:	d002      	beq.n	80074a2 <DMA_List_GetCLLRNodeInfo+0x4a>
      *cllr_offset = NODE_CLLR_LINEAR_DEFAULT_OFFSET;
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	2205      	movs	r2, #5
 80074a0:	601a      	str	r2, [r3, #0]
}
 80074a2:	bf00      	nop
 80074a4:	3714      	adds	r7, #20
 80074a6:	46bd      	mov	sp, r7
 80074a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ac:	4770      	bx	lr
 80074ae:	bf00      	nop
 80074b0:	fe010000 	.word	0xfe010000
 80074b4:	f8010000 	.word	0xf8010000

080074b8 <DMA_List_FindNode>:
  * @retval Return 0 when node is found in selected queue, otherwise node is not found.
  */
static uint32_t DMA_List_FindNode(DMA_QListTypeDef const *const pQList,
                                  DMA_NodeTypeDef const *const pNode,
                                  DMA_NodeInQInfoTypeDef *const NodeInfo)
{
 80074b8:	b480      	push	{r7}
 80074ba:	b089      	sub	sp, #36	; 0x24
 80074bc:	af00      	add	r7, sp, #0
 80074be:	60f8      	str	r0, [r7, #12]
 80074c0:	60b9      	str	r1, [r7, #8]
 80074c2:	607a      	str	r2, [r7, #4]
  uint32_t node_idx = 0U;
 80074c4:	2300      	movs	r3, #0
 80074c6:	61fb      	str	r3, [r7, #28]
  uint32_t currentnode_address  = 0U;
 80074c8:	2300      	movs	r3, #0
 80074ca:	61bb      	str	r3, [r7, #24]
  uint32_t previousnode_address  = 0U;
 80074cc:	2300      	movs	r3, #0
 80074ce:	617b      	str	r3, [r7, #20]
  uint32_t cllr_offset = NodeInfo->cllr_offset;
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	613b      	str	r3, [r7, #16]

  /* Find last node in queue */
  if (pNode ==  NULL)
 80074d6:	68bb      	ldr	r3, [r7, #8]
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d142      	bne.n	8007562 <DMA_List_FindNode+0xaa>
  {
    /* Check that previous node is linked to the selected queue */
    while (node_idx < pQList->NodeNumber)
 80074dc:	e01d      	b.n	800751a <DMA_List_FindNode+0x62>
    {
      /* Get head node address */
      if (node_idx == 0U)
 80074de:	69fb      	ldr	r3, [r7, #28]
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d107      	bne.n	80074f4 <DMA_List_FindNode+0x3c>
      {
        currentnode_address = (uint32_t)pQList->Head & DMA_CLLR_LA;
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	461a      	mov	r2, r3
 80074ea:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 80074ee:	4013      	ands	r3, r2
 80074f0:	61bb      	str	r3, [r7, #24]
 80074f2:	e00f      	b.n	8007514 <DMA_List_FindNode+0x5c>
      }
      /* Calculate nodes addresses */
      else
      {
        previousnode_address = currentnode_address;
 80074f4:	69bb      	ldr	r3, [r7, #24]
 80074f6:	617b      	str	r3, [r7, #20]
        currentnode_address =
          ((DMA_NodeTypeDef *)(currentnode_address +
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	0c1b      	lsrs	r3, r3, #16
 80074fe:	041b      	lsls	r3, r3, #16
          ((DMA_NodeTypeDef *)(currentnode_address +
 8007500:	69ba      	ldr	r2, [r7, #24]
 8007502:	4413      	add	r3, r2
 8007504:	461a      	mov	r2, r3
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 8007506:	693b      	ldr	r3, [r7, #16]
 8007508:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
        currentnode_address =
 800750c:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 8007510:	4013      	ands	r3, r2
 8007512:	61bb      	str	r3, [r7, #24]
      }

      /* Increment node index */
      node_idx++;
 8007514:	69fb      	ldr	r3, [r7, #28]
 8007516:	3301      	adds	r3, #1
 8007518:	61fb      	str	r3, [r7, #28]
    while (node_idx < pQList->NodeNumber)
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	689b      	ldr	r3, [r3, #8]
 800751e:	69fa      	ldr	r2, [r7, #28]
 8007520:	429a      	cmp	r2, r3
 8007522:	d3dc      	bcc.n	80074de <DMA_List_FindNode+0x26>
 8007524:	e029      	b.n	800757a <DMA_List_FindNode+0xc2>
  {
    /* Check that previous node is linked to the selected queue */
    while ((node_idx < pQList->NodeNumber) && (currentnode_address != ((uint32_t)pNode & DMA_CLLR_LA)))
    {
      /* Get head node address */
      if (node_idx == 0U)
 8007526:	69fb      	ldr	r3, [r7, #28]
 8007528:	2b00      	cmp	r3, #0
 800752a:	d107      	bne.n	800753c <DMA_List_FindNode+0x84>
      {
        currentnode_address = (uint32_t)pQList->Head & DMA_CLLR_LA;
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	461a      	mov	r2, r3
 8007532:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 8007536:	4013      	ands	r3, r2
 8007538:	61bb      	str	r3, [r7, #24]
 800753a:	e00f      	b.n	800755c <DMA_List_FindNode+0xa4>
      }
      /* Calculate nodes addresses */
      else
      {
        previousnode_address = currentnode_address;
 800753c:	69bb      	ldr	r3, [r7, #24]
 800753e:	617b      	str	r3, [r7, #20]
        currentnode_address =
          ((DMA_NodeTypeDef *)(currentnode_address +
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	0c1b      	lsrs	r3, r3, #16
 8007546:	041b      	lsls	r3, r3, #16
          ((DMA_NodeTypeDef *)(currentnode_address +
 8007548:	69ba      	ldr	r2, [r7, #24]
 800754a:	4413      	add	r3, r2
 800754c:	461a      	mov	r2, r3
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 800754e:	693b      	ldr	r3, [r7, #16]
 8007550:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
        currentnode_address =
 8007554:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 8007558:	4013      	ands	r3, r2
 800755a:	61bb      	str	r3, [r7, #24]
      }

      /* Increment node index */
      node_idx++;
 800755c:	69fb      	ldr	r3, [r7, #28]
 800755e:	3301      	adds	r3, #1
 8007560:	61fb      	str	r3, [r7, #28]
    while ((node_idx < pQList->NodeNumber) && (currentnode_address != ((uint32_t)pNode & DMA_CLLR_LA)))
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	689b      	ldr	r3, [r3, #8]
 8007566:	69fa      	ldr	r2, [r7, #28]
 8007568:	429a      	cmp	r2, r3
 800756a:	d206      	bcs.n	800757a <DMA_List_FindNode+0xc2>
 800756c:	68ba      	ldr	r2, [r7, #8]
 800756e:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 8007572:	4013      	ands	r3, r2
 8007574:	69ba      	ldr	r2, [r7, #24]
 8007576:	429a      	cmp	r2, r3
 8007578:	d1d5      	bne.n	8007526 <DMA_List_FindNode+0x6e>
    }
  }

  /* Check stored address */
  if (pNode != NULL)
 800757a:	68bb      	ldr	r3, [r7, #8]
 800757c:	2b00      	cmp	r3, #0
 800757e:	d008      	beq.n	8007592 <DMA_List_FindNode+0xda>
  {
    if (currentnode_address != ((uint32_t)pNode & DMA_CLLR_LA))
 8007580:	68ba      	ldr	r2, [r7, #8]
 8007582:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 8007586:	4013      	ands	r3, r2
 8007588:	69ba      	ldr	r2, [r7, #24]
 800758a:	429a      	cmp	r2, r3
 800758c:	d001      	beq.n	8007592 <DMA_List_FindNode+0xda>
    {
      return 1U;
 800758e:	2301      	movs	r3, #1
 8007590:	e02b      	b.n	80075ea <DMA_List_FindNode+0x132>
    }
  }

  /* Update current node position */
  NodeInfo->currentnode_pos = node_idx;
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	69fa      	ldr	r2, [r7, #28]
 8007596:	609a      	str	r2, [r3, #8]

  /* Update previous node address */
  NodeInfo->previousnode_addr = previousnode_address | ((uint32_t)pQList->Head & DMA_CLBAR_LBA);
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	0c1b      	lsrs	r3, r3, #16
 800759e:	041b      	lsls	r3, r3, #16
 80075a0:	697a      	ldr	r2, [r7, #20]
 80075a2:	431a      	orrs	r2, r3
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	605a      	str	r2, [r3, #4]

  /* Update current node address */
  NodeInfo->currentnode_addr = currentnode_address | ((uint32_t)pQList->Head & DMA_CLBAR_LBA);
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	0c1b      	lsrs	r3, r3, #16
 80075ae:	041b      	lsls	r3, r3, #16
 80075b0:	69ba      	ldr	r2, [r7, #24]
 80075b2:	431a      	orrs	r2, r3
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	60da      	str	r2, [r3, #12]

  /* Update next node address */
  if (((DMA_NodeTypeDef *)NodeInfo->currentnode_addr)->LinkRegisters[cllr_offset] != 0U)
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	68db      	ldr	r3, [r3, #12]
 80075bc:	461a      	mov	r2, r3
 80075be:	693b      	ldr	r3, [r7, #16]
 80075c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d00f      	beq.n	80075e8 <DMA_List_FindNode+0x130>
  {
    NodeInfo->nextnode_addr = (((DMA_NodeTypeDef *)NodeInfo->currentnode_addr)->LinkRegisters[cllr_offset] &
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	68db      	ldr	r3, [r3, #12]
 80075cc:	461a      	mov	r2, r3
 80075ce:	693b      	ldr	r3, [r7, #16]
 80075d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80075d4:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 80075d8:	401a      	ands	r2, r3
                               DMA_CLLR_LA) | ((uint32_t)pQList->Head & DMA_CLBAR_LBA);
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	0c1b      	lsrs	r3, r3, #16
 80075e0:	041b      	lsls	r3, r3, #16
 80075e2:	431a      	orrs	r2, r3
    NodeInfo->nextnode_addr = (((DMA_NodeTypeDef *)NodeInfo->currentnode_addr)->LinkRegisters[cllr_offset] &
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	611a      	str	r2, [r3, #16]
  }

  return 0U;
 80075e8:	2300      	movs	r3, #0
}
 80075ea:	4618      	mov	r0, r3
 80075ec:	3724      	adds	r7, #36	; 0x24
 80075ee:	46bd      	mov	sp, r7
 80075f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f4:	4770      	bx	lr
	...

080075f8 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 80075f8:	b480      	push	{r7}
 80075fa:	b089      	sub	sp, #36	; 0x24
 80075fc:	af00      	add	r7, sp, #0
 80075fe:	6078      	str	r0, [r7, #4]
 8007600:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 8007602:	2300      	movs	r3, #0
 8007604:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 800760a:	e1ba      	b.n	8007982 <HAL_GPIO_Init+0x38a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 800760c:	683b      	ldr	r3, [r7, #0]
 800760e:	681a      	ldr	r2, [r3, #0]
 8007610:	2101      	movs	r1, #1
 8007612:	697b      	ldr	r3, [r7, #20]
 8007614:	fa01 f303 	lsl.w	r3, r1, r3
 8007618:	4013      	ands	r3, r2
 800761a:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 800761c:	697b      	ldr	r3, [r7, #20]
 800761e:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	2b00      	cmp	r3, #0
 8007624:	f000 81aa 	beq.w	800797c <HAL_GPIO_Init+0x384>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	4a55      	ldr	r2, [pc, #340]	; (8007780 <HAL_GPIO_Init+0x188>)
 800762c:	4293      	cmp	r3, r2
 800762e:	d15d      	bne.n	80076ec <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 8007636:	2201      	movs	r2, #1
 8007638:	697b      	ldr	r3, [r7, #20]
 800763a:	fa02 f303 	lsl.w	r3, r2, r3
 800763e:	43db      	mvns	r3, r3
 8007640:	69fa      	ldr	r2, [r7, #28]
 8007642:	4013      	ands	r3, r2
 8007644:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 8007646:	683b      	ldr	r3, [r7, #0]
 8007648:	685b      	ldr	r3, [r3, #4]
 800764a:	f003 0201 	and.w	r2, r3, #1
 800764e:	697b      	ldr	r3, [r7, #20]
 8007650:	fa02 f303 	lsl.w	r3, r2, r3
 8007654:	69fa      	ldr	r2, [r7, #28]
 8007656:	4313      	orrs	r3, r2
 8007658:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	69fa      	ldr	r2, [r7, #28]
 800765e:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 8007660:	4a48      	ldr	r2, [pc, #288]	; (8007784 <HAL_GPIO_Init+0x18c>)
 8007662:	697b      	ldr	r3, [r7, #20]
 8007664:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007668:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 800766a:	4a46      	ldr	r2, [pc, #280]	; (8007784 <HAL_GPIO_Init+0x18c>)
 800766c:	697b      	ldr	r3, [r7, #20]
 800766e:	00db      	lsls	r3, r3, #3
 8007670:	4413      	add	r3, r2
 8007672:	685b      	ldr	r3, [r3, #4]
 8007674:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 8007676:	69bb      	ldr	r3, [r7, #24]
 8007678:	08da      	lsrs	r2, r3, #3
 800767a:	693b      	ldr	r3, [r7, #16]
 800767c:	3208      	adds	r2, #8
 800767e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007682:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 8007684:	69bb      	ldr	r3, [r7, #24]
 8007686:	f003 0307 	and.w	r3, r3, #7
 800768a:	009b      	lsls	r3, r3, #2
 800768c:	220f      	movs	r2, #15
 800768e:	fa02 f303 	lsl.w	r3, r2, r3
 8007692:	43db      	mvns	r3, r3
 8007694:	69fa      	ldr	r2, [r7, #28]
 8007696:	4013      	ands	r3, r2
 8007698:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 800769a:	69bb      	ldr	r3, [r7, #24]
 800769c:	f003 0307 	and.w	r3, r3, #7
 80076a0:	009b      	lsls	r3, r3, #2
 80076a2:	220b      	movs	r2, #11
 80076a4:	fa02 f303 	lsl.w	r3, r2, r3
 80076a8:	69fa      	ldr	r2, [r7, #28]
 80076aa:	4313      	orrs	r3, r2
 80076ac:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 80076ae:	69bb      	ldr	r3, [r7, #24]
 80076b0:	08da      	lsrs	r2, r3, #3
 80076b2:	693b      	ldr	r3, [r7, #16]
 80076b4:	3208      	adds	r2, #8
 80076b6:	69f9      	ldr	r1, [r7, #28]
 80076b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 80076bc:	693b      	ldr	r3, [r7, #16]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 80076c2:	69bb      	ldr	r3, [r7, #24]
 80076c4:	005b      	lsls	r3, r3, #1
 80076c6:	2203      	movs	r2, #3
 80076c8:	fa02 f303 	lsl.w	r3, r2, r3
 80076cc:	43db      	mvns	r3, r3
 80076ce:	69fa      	ldr	r2, [r7, #28]
 80076d0:	4013      	ands	r3, r2
 80076d2:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * 2U));
 80076d4:	69bb      	ldr	r3, [r7, #24]
 80076d6:	005b      	lsls	r3, r3, #1
 80076d8:	2202      	movs	r2, #2
 80076da:	fa02 f303 	lsl.w	r3, r2, r3
 80076de:	69fa      	ldr	r2, [r7, #28]
 80076e0:	4313      	orrs	r3, r2
 80076e2:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 80076e4:	693b      	ldr	r3, [r7, #16]
 80076e6:	69fa      	ldr	r2, [r7, #28]
 80076e8:	601a      	str	r2, [r3, #0]
 80076ea:	e067      	b.n	80077bc <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80076ec:	683b      	ldr	r3, [r7, #0]
 80076ee:	685b      	ldr	r3, [r3, #4]
 80076f0:	2b02      	cmp	r3, #2
 80076f2:	d003      	beq.n	80076fc <HAL_GPIO_Init+0x104>
 80076f4:	683b      	ldr	r3, [r7, #0]
 80076f6:	685b      	ldr	r3, [r3, #4]
 80076f8:	2b12      	cmp	r3, #18
 80076fa:	d145      	bne.n	8007788 <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 80076fc:	697b      	ldr	r3, [r7, #20]
 80076fe:	08da      	lsrs	r2, r3, #3
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	3208      	adds	r2, #8
 8007704:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007708:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * 4U));
 800770a:	697b      	ldr	r3, [r7, #20]
 800770c:	f003 0307 	and.w	r3, r3, #7
 8007710:	009b      	lsls	r3, r3, #2
 8007712:	220f      	movs	r2, #15
 8007714:	fa02 f303 	lsl.w	r3, r2, r3
 8007718:	43db      	mvns	r3, r3
 800771a:	69fa      	ldr	r2, [r7, #28]
 800771c:	4013      	ands	r3, r2
 800771e:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 8007720:	683b      	ldr	r3, [r7, #0]
 8007722:	691b      	ldr	r3, [r3, #16]
 8007724:	f003 020f 	and.w	r2, r3, #15
 8007728:	697b      	ldr	r3, [r7, #20]
 800772a:	f003 0307 	and.w	r3, r3, #7
 800772e:	009b      	lsls	r3, r3, #2
 8007730:	fa02 f303 	lsl.w	r3, r2, r3
 8007734:	69fa      	ldr	r2, [r7, #28]
 8007736:	4313      	orrs	r3, r2
 8007738:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 800773a:	697b      	ldr	r3, [r7, #20]
 800773c:	08da      	lsrs	r2, r3, #3
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	3208      	adds	r2, #8
 8007742:	69f9      	ldr	r1, [r7, #28]
 8007744:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8007748:	693b      	ldr	r3, [r7, #16]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 800774e:	69bb      	ldr	r3, [r7, #24]
 8007750:	005b      	lsls	r3, r3, #1
 8007752:	2203      	movs	r2, #3
 8007754:	fa02 f303 	lsl.w	r3, r2, r3
 8007758:	43db      	mvns	r3, r3
 800775a:	69fa      	ldr	r2, [r7, #28]
 800775c:	4013      	ands	r3, r2
 800775e:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 8007760:	683b      	ldr	r3, [r7, #0]
 8007762:	685b      	ldr	r3, [r3, #4]
 8007764:	f003 0203 	and.w	r2, r3, #3
 8007768:	69bb      	ldr	r3, [r7, #24]
 800776a:	005b      	lsls	r3, r3, #1
 800776c:	fa02 f303 	lsl.w	r3, r2, r3
 8007770:	69fa      	ldr	r2, [r7, #28]
 8007772:	4313      	orrs	r3, r2
 8007774:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8007776:	693b      	ldr	r3, [r7, #16]
 8007778:	69fa      	ldr	r2, [r7, #28]
 800777a:	601a      	str	r2, [r3, #0]
 800777c:	e01e      	b.n	80077bc <HAL_GPIO_Init+0x1c4>
 800777e:	bf00      	nop
 8007780:	46020000 	.word	0x46020000
 8007784:	0800ed40 	.word	0x0800ed40
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 8007788:	693b      	ldr	r3, [r7, #16]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 800778e:	69bb      	ldr	r3, [r7, #24]
 8007790:	005b      	lsls	r3, r3, #1
 8007792:	2203      	movs	r2, #3
 8007794:	fa02 f303 	lsl.w	r3, r2, r3
 8007798:	43db      	mvns	r3, r3
 800779a:	69fa      	ldr	r2, [r7, #28]
 800779c:	4013      	ands	r3, r2
 800779e:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 80077a0:	683b      	ldr	r3, [r7, #0]
 80077a2:	685b      	ldr	r3, [r3, #4]
 80077a4:	f003 0203 	and.w	r2, r3, #3
 80077a8:	69bb      	ldr	r3, [r7, #24]
 80077aa:	005b      	lsls	r3, r3, #1
 80077ac:	fa02 f303 	lsl.w	r3, r2, r3
 80077b0:	69fa      	ldr	r2, [r7, #28]
 80077b2:	4313      	orrs	r3, r2
 80077b4:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 80077b6:	693b      	ldr	r3, [r7, #16]
 80077b8:	69fa      	ldr	r2, [r7, #28]
 80077ba:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80077bc:	683b      	ldr	r3, [r7, #0]
 80077be:	685b      	ldr	r3, [r3, #4]
 80077c0:	2b01      	cmp	r3, #1
 80077c2:	d00b      	beq.n	80077dc <HAL_GPIO_Init+0x1e4>
 80077c4:	683b      	ldr	r3, [r7, #0]
 80077c6:	685b      	ldr	r3, [r3, #4]
 80077c8:	2b02      	cmp	r3, #2
 80077ca:	d007      	beq.n	80077dc <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80077cc:	683b      	ldr	r3, [r7, #0]
 80077ce:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80077d0:	2b11      	cmp	r3, #17
 80077d2:	d003      	beq.n	80077dc <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80077d4:	683b      	ldr	r3, [r7, #0]
 80077d6:	685b      	ldr	r3, [r3, #4]
 80077d8:	2b12      	cmp	r3, #18
 80077da:	d130      	bne.n	800783e <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 80077dc:	693b      	ldr	r3, [r7, #16]
 80077de:	689b      	ldr	r3, [r3, #8]
 80077e0:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * 2U));
 80077e2:	69bb      	ldr	r3, [r7, #24]
 80077e4:	005b      	lsls	r3, r3, #1
 80077e6:	2203      	movs	r2, #3
 80077e8:	fa02 f303 	lsl.w	r3, r2, r3
 80077ec:	43db      	mvns	r3, r3
 80077ee:	69fa      	ldr	r2, [r7, #28]
 80077f0:	4013      	ands	r3, r2
 80077f2:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * 2U));
 80077f4:	683b      	ldr	r3, [r7, #0]
 80077f6:	68da      	ldr	r2, [r3, #12]
 80077f8:	69bb      	ldr	r3, [r7, #24]
 80077fa:	005b      	lsls	r3, r3, #1
 80077fc:	fa02 f303 	lsl.w	r3, r2, r3
 8007800:	69fa      	ldr	r2, [r7, #28]
 8007802:	4313      	orrs	r3, r2
 8007804:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 8007806:	693b      	ldr	r3, [r7, #16]
 8007808:	69fa      	ldr	r2, [r7, #28]
 800780a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 800780c:	693b      	ldr	r3, [r7, #16]
 800780e:	685b      	ldr	r3, [r3, #4]
 8007810:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 8007812:	2201      	movs	r2, #1
 8007814:	69bb      	ldr	r3, [r7, #24]
 8007816:	fa02 f303 	lsl.w	r3, r2, r3
 800781a:	43db      	mvns	r3, r3
 800781c:	69fa      	ldr	r2, [r7, #28]
 800781e:	4013      	ands	r3, r2
 8007820:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 8007822:	683b      	ldr	r3, [r7, #0]
 8007824:	685b      	ldr	r3, [r3, #4]
 8007826:	091b      	lsrs	r3, r3, #4
 8007828:	f003 0201 	and.w	r2, r3, #1
 800782c:	69bb      	ldr	r3, [r7, #24]
 800782e:	fa02 f303 	lsl.w	r3, r2, r3
 8007832:	69fa      	ldr	r2, [r7, #28]
 8007834:	4313      	orrs	r3, r2
 8007836:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 8007838:	693b      	ldr	r3, [r7, #16]
 800783a:	69fa      	ldr	r2, [r7, #28]
 800783c:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 800783e:	683b      	ldr	r3, [r7, #0]
 8007840:	685b      	ldr	r3, [r3, #4]
 8007842:	2b03      	cmp	r3, #3
 8007844:	d017      	beq.n	8007876 <HAL_GPIO_Init+0x27e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 8007846:	693b      	ldr	r3, [r7, #16]
 8007848:	68db      	ldr	r3, [r3, #12]
 800784a:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * 2U));
 800784c:	69bb      	ldr	r3, [r7, #24]
 800784e:	005b      	lsls	r3, r3, #1
 8007850:	2203      	movs	r2, #3
 8007852:	fa02 f303 	lsl.w	r3, r2, r3
 8007856:	43db      	mvns	r3, r3
 8007858:	69fa      	ldr	r2, [r7, #28]
 800785a:	4013      	ands	r3, r2
 800785c:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * 2U));
 800785e:	683b      	ldr	r3, [r7, #0]
 8007860:	689a      	ldr	r2, [r3, #8]
 8007862:	69bb      	ldr	r3, [r7, #24]
 8007864:	005b      	lsls	r3, r3, #1
 8007866:	fa02 f303 	lsl.w	r3, r2, r3
 800786a:	69fa      	ldr	r2, [r7, #28]
 800786c:	4313      	orrs	r3, r2
 800786e:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 8007870:	693b      	ldr	r3, [r7, #16]
 8007872:	69fa      	ldr	r2, [r7, #28]
 8007874:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8007876:	683b      	ldr	r3, [r7, #0]
 8007878:	685b      	ldr	r3, [r3, #4]
 800787a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800787e:	2b00      	cmp	r3, #0
 8007880:	d07c      	beq.n	800797c <HAL_GPIO_Init+0x384>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8007882:	4a47      	ldr	r2, [pc, #284]	; (80079a0 <HAL_GPIO_Init+0x3a8>)
 8007884:	697b      	ldr	r3, [r7, #20]
 8007886:	089b      	lsrs	r3, r3, #2
 8007888:	3318      	adds	r3, #24
 800788a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800788e:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 8007890:	697b      	ldr	r3, [r7, #20]
 8007892:	f003 0303 	and.w	r3, r3, #3
 8007896:	00db      	lsls	r3, r3, #3
 8007898:	220f      	movs	r2, #15
 800789a:	fa02 f303 	lsl.w	r3, r2, r3
 800789e:	43db      	mvns	r3, r3
 80078a0:	69fa      	ldr	r2, [r7, #28]
 80078a2:	4013      	ands	r3, r2
 80078a4:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	0a9a      	lsrs	r2, r3, #10
 80078aa:	4b3e      	ldr	r3, [pc, #248]	; (80079a4 <HAL_GPIO_Init+0x3ac>)
 80078ac:	4013      	ands	r3, r2
 80078ae:	697a      	ldr	r2, [r7, #20]
 80078b0:	f002 0203 	and.w	r2, r2, #3
 80078b4:	00d2      	lsls	r2, r2, #3
 80078b6:	4093      	lsls	r3, r2
 80078b8:	69fa      	ldr	r2, [r7, #28]
 80078ba:	4313      	orrs	r3, r2
 80078bc:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 80078be:	4938      	ldr	r1, [pc, #224]	; (80079a0 <HAL_GPIO_Init+0x3a8>)
 80078c0:	697b      	ldr	r3, [r7, #20]
 80078c2:	089b      	lsrs	r3, r3, #2
 80078c4:	3318      	adds	r3, #24
 80078c6:	69fa      	ldr	r2, [r7, #28]
 80078c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 80078cc:	4b34      	ldr	r3, [pc, #208]	; (80079a0 <HAL_GPIO_Init+0x3a8>)
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	43db      	mvns	r3, r3
 80078d6:	69fa      	ldr	r2, [r7, #28]
 80078d8:	4013      	ands	r3, r2
 80078da:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80078dc:	683b      	ldr	r3, [r7, #0]
 80078de:	685b      	ldr	r3, [r3, #4]
 80078e0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d003      	beq.n	80078f0 <HAL_GPIO_Init+0x2f8>
        {
          tmp |= iocurrent;
 80078e8:	69fa      	ldr	r2, [r7, #28]
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	4313      	orrs	r3, r2
 80078ee:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 80078f0:	4a2b      	ldr	r2, [pc, #172]	; (80079a0 <HAL_GPIO_Init+0x3a8>)
 80078f2:	69fb      	ldr	r3, [r7, #28]
 80078f4:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 80078f6:	4b2a      	ldr	r3, [pc, #168]	; (80079a0 <HAL_GPIO_Init+0x3a8>)
 80078f8:	685b      	ldr	r3, [r3, #4]
 80078fa:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	43db      	mvns	r3, r3
 8007900:	69fa      	ldr	r2, [r7, #28]
 8007902:	4013      	ands	r3, r2
 8007904:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8007906:	683b      	ldr	r3, [r7, #0]
 8007908:	685b      	ldr	r3, [r3, #4]
 800790a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800790e:	2b00      	cmp	r3, #0
 8007910:	d003      	beq.n	800791a <HAL_GPIO_Init+0x322>
        {
          tmp |= iocurrent;
 8007912:	69fa      	ldr	r2, [r7, #28]
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	4313      	orrs	r3, r2
 8007918:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 800791a:	4a21      	ldr	r2, [pc, #132]	; (80079a0 <HAL_GPIO_Init+0x3a8>)
 800791c:	69fb      	ldr	r3, [r7, #28]
 800791e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8007920:	4b1f      	ldr	r3, [pc, #124]	; (80079a0 <HAL_GPIO_Init+0x3a8>)
 8007922:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007926:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	43db      	mvns	r3, r3
 800792c:	69fa      	ldr	r2, [r7, #28]
 800792e:	4013      	ands	r3, r2
 8007930:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8007932:	683b      	ldr	r3, [r7, #0]
 8007934:	685b      	ldr	r3, [r3, #4]
 8007936:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800793a:	2b00      	cmp	r3, #0
 800793c:	d003      	beq.n	8007946 <HAL_GPIO_Init+0x34e>
        {
          tmp |= iocurrent;
 800793e:	69fa      	ldr	r2, [r7, #28]
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	4313      	orrs	r3, r2
 8007944:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 8007946:	4a16      	ldr	r2, [pc, #88]	; (80079a0 <HAL_GPIO_Init+0x3a8>)
 8007948:	69fb      	ldr	r3, [r7, #28]
 800794a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        tmp = EXTI->IMR1;
 800794e:	4b14      	ldr	r3, [pc, #80]	; (80079a0 <HAL_GPIO_Init+0x3a8>)
 8007950:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007954:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	43db      	mvns	r3, r3
 800795a:	69fa      	ldr	r2, [r7, #28]
 800795c:	4013      	ands	r3, r2
 800795e:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8007960:	683b      	ldr	r3, [r7, #0]
 8007962:	685b      	ldr	r3, [r3, #4]
 8007964:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007968:	2b00      	cmp	r3, #0
 800796a:	d003      	beq.n	8007974 <HAL_GPIO_Init+0x37c>
        {
          tmp |= iocurrent;
 800796c:	69fa      	ldr	r2, [r7, #28]
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	4313      	orrs	r3, r2
 8007972:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 8007974:	4a0a      	ldr	r2, [pc, #40]	; (80079a0 <HAL_GPIO_Init+0x3a8>)
 8007976:	69fb      	ldr	r3, [r7, #28]
 8007978:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      }
    }
    position++;
 800797c:	697b      	ldr	r3, [r7, #20]
 800797e:	3301      	adds	r3, #1
 8007980:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8007982:	683b      	ldr	r3, [r7, #0]
 8007984:	681a      	ldr	r2, [r3, #0]
 8007986:	697b      	ldr	r3, [r7, #20]
 8007988:	fa22 f303 	lsr.w	r3, r2, r3
 800798c:	2b00      	cmp	r3, #0
 800798e:	f47f ae3d 	bne.w	800760c <HAL_GPIO_Init+0x14>
  }
}
 8007992:	bf00      	nop
 8007994:	bf00      	nop
 8007996:	3724      	adds	r7, #36	; 0x24
 8007998:	46bd      	mov	sp, r7
 800799a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800799e:	4770      	bx	lr
 80079a0:	46022000 	.word	0x46022000
 80079a4:	002f7f7f 	.word	0x002f7f7f

080079a8 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80079a8:	b480      	push	{r7}
 80079aa:	b089      	sub	sp, #36	; 0x24
 80079ac:	af00      	add	r7, sp, #0
 80079ae:	6078      	str	r0, [r7, #4]
 80079b0:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 80079b2:	2300      	movs	r3, #0
 80079b4:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	617b      	str	r3, [r7, #20]

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0U)
 80079ba:	e0bc      	b.n	8007b36 <HAL_GPIO_DeInit+0x18e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1UL << position);
 80079bc:	2201      	movs	r2, #1
 80079be:	69bb      	ldr	r3, [r7, #24]
 80079c0:	fa02 f303 	lsl.w	r3, r2, r3
 80079c4:	683a      	ldr	r2, [r7, #0]
 80079c6:	4013      	ands	r3, r2
 80079c8:	613b      	str	r3, [r7, #16]

    /*Save Pin Position */
    pin_position = position;
 80079ca:	69bb      	ldr	r3, [r7, #24]
 80079cc:	61fb      	str	r3, [r7, #28]

    if (iocurrent != 0U)
 80079ce:	693b      	ldr	r3, [r7, #16]
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	f000 80ad 	beq.w	8007b30 <HAL_GPIO_DeInit+0x188>
    {
      /* In case of LPGPIO port selected */
      if (GPIOx == LPGPIO1)
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	4a5e      	ldr	r2, [pc, #376]	; (8007b54 <HAL_GPIO_DeInit+0x1ac>)
 80079da:	4293      	cmp	r3, r2
 80079dc:	d115      	bne.n	8007a0a <HAL_GPIO_DeInit+0x62>
      {
        /* Configure LP/IO in Input Mode */
        p_gpio  = LPGPIO_Map[pin_position].GPIO_PORT;
 80079de:	4a5e      	ldr	r2, [pc, #376]	; (8007b58 <HAL_GPIO_DeInit+0x1b0>)
 80079e0:	69fb      	ldr	r3, [r7, #28]
 80079e2:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80079e6:	617b      	str	r3, [r7, #20]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 80079e8:	4a5b      	ldr	r2, [pc, #364]	; (8007b58 <HAL_GPIO_DeInit+0x1b0>)
 80079ea:	69bb      	ldr	r3, [r7, #24]
 80079ec:	00db      	lsls	r3, r3, #3
 80079ee:	4413      	add	r3, r2
 80079f0:	685b      	ldr	r3, [r3, #4]
 80079f2:	61fb      	str	r3, [r7, #28]
        LPGPIO1->MODER &= ~(1U << pin_position);
 80079f4:	4b57      	ldr	r3, [pc, #348]	; (8007b54 <HAL_GPIO_DeInit+0x1ac>)
 80079f6:	681a      	ldr	r2, [r3, #0]
 80079f8:	2101      	movs	r1, #1
 80079fa:	69fb      	ldr	r3, [r7, #28]
 80079fc:	fa01 f303 	lsl.w	r3, r1, r3
 8007a00:	43db      	mvns	r3, r3
 8007a02:	4954      	ldr	r1, [pc, #336]	; (8007b54 <HAL_GPIO_DeInit+0x1ac>)
 8007a04:	4013      	ands	r3, r2
 8007a06:	600b      	str	r3, [r1, #0]
 8007a08:	e053      	b.n	8007ab2 <HAL_GPIO_DeInit+0x10a>
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /*------------------------- EXTI Mode Configuration --------------------*/
        /* Clear the External Interrupt or Event for the current IO */
        tmp = EXTI->EXTICR[position >> 2U];
 8007a0a:	4a54      	ldr	r2, [pc, #336]	; (8007b5c <HAL_GPIO_DeInit+0x1b4>)
 8007a0c:	69bb      	ldr	r3, [r7, #24]
 8007a0e:	089b      	lsrs	r3, r3, #2
 8007a10:	3318      	adds	r3, #24
 8007a12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007a16:	60fb      	str	r3, [r7, #12]
        tmp &= ((0x0FUL) << (8U * (position & 0x03U)));
 8007a18:	69bb      	ldr	r3, [r7, #24]
 8007a1a:	f003 0303 	and.w	r3, r3, #3
 8007a1e:	00db      	lsls	r3, r3, #3
 8007a20:	220f      	movs	r2, #15
 8007a22:	fa02 f303 	lsl.w	r3, r2, r3
 8007a26:	68fa      	ldr	r2, [r7, #12]
 8007a28:	4013      	ands	r3, r2
 8007a2a:	60fb      	str	r3, [r7, #12]
        if (tmp == (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U))))
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	0a9a      	lsrs	r2, r3, #10
 8007a30:	4b4b      	ldr	r3, [pc, #300]	; (8007b60 <HAL_GPIO_DeInit+0x1b8>)
 8007a32:	4013      	ands	r3, r2
 8007a34:	69ba      	ldr	r2, [r7, #24]
 8007a36:	f002 0203 	and.w	r2, r2, #3
 8007a3a:	00d2      	lsls	r2, r2, #3
 8007a3c:	4093      	lsls	r3, r2
 8007a3e:	68fa      	ldr	r2, [r7, #12]
 8007a40:	429a      	cmp	r2, r3
 8007a42:	d136      	bne.n	8007ab2 <HAL_GPIO_DeInit+0x10a>
        {
          /* Clear EXTI line configuration */
          EXTI->IMR1 &= ~(iocurrent);
 8007a44:	4b45      	ldr	r3, [pc, #276]	; (8007b5c <HAL_GPIO_DeInit+0x1b4>)
 8007a46:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8007a4a:	693b      	ldr	r3, [r7, #16]
 8007a4c:	43db      	mvns	r3, r3
 8007a4e:	4943      	ldr	r1, [pc, #268]	; (8007b5c <HAL_GPIO_DeInit+0x1b4>)
 8007a50:	4013      	ands	r3, r2
 8007a52:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
          EXTI->EMR1 &= ~(iocurrent);
 8007a56:	4b41      	ldr	r3, [pc, #260]	; (8007b5c <HAL_GPIO_DeInit+0x1b4>)
 8007a58:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8007a5c:	693b      	ldr	r3, [r7, #16]
 8007a5e:	43db      	mvns	r3, r3
 8007a60:	493e      	ldr	r1, [pc, #248]	; (8007b5c <HAL_GPIO_DeInit+0x1b4>)
 8007a62:	4013      	ands	r3, r2
 8007a64:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

          /* Clear Rising Falling edge configuration */
          EXTI->RTSR1 &= ~(iocurrent);
 8007a68:	4b3c      	ldr	r3, [pc, #240]	; (8007b5c <HAL_GPIO_DeInit+0x1b4>)
 8007a6a:	681a      	ldr	r2, [r3, #0]
 8007a6c:	693b      	ldr	r3, [r7, #16]
 8007a6e:	43db      	mvns	r3, r3
 8007a70:	493a      	ldr	r1, [pc, #232]	; (8007b5c <HAL_GPIO_DeInit+0x1b4>)
 8007a72:	4013      	ands	r3, r2
 8007a74:	600b      	str	r3, [r1, #0]
          EXTI->FTSR1 &= ~(iocurrent);
 8007a76:	4b39      	ldr	r3, [pc, #228]	; (8007b5c <HAL_GPIO_DeInit+0x1b4>)
 8007a78:	685a      	ldr	r2, [r3, #4]
 8007a7a:	693b      	ldr	r3, [r7, #16]
 8007a7c:	43db      	mvns	r3, r3
 8007a7e:	4937      	ldr	r1, [pc, #220]	; (8007b5c <HAL_GPIO_DeInit+0x1b4>)
 8007a80:	4013      	ands	r3, r2
 8007a82:	604b      	str	r3, [r1, #4]

          tmp = (0x0FUL) << (8U * (position & 0x03U));
 8007a84:	69bb      	ldr	r3, [r7, #24]
 8007a86:	f003 0303 	and.w	r3, r3, #3
 8007a8a:	00db      	lsls	r3, r3, #3
 8007a8c:	220f      	movs	r2, #15
 8007a8e:	fa02 f303 	lsl.w	r3, r2, r3
 8007a92:	60fb      	str	r3, [r7, #12]
          EXTI->EXTICR[position >> 2U] &= ~tmp;
 8007a94:	4a31      	ldr	r2, [pc, #196]	; (8007b5c <HAL_GPIO_DeInit+0x1b4>)
 8007a96:	69bb      	ldr	r3, [r7, #24]
 8007a98:	089b      	lsrs	r3, r3, #2
 8007a9a:	3318      	adds	r3, #24
 8007a9c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	43da      	mvns	r2, r3
 8007aa4:	482d      	ldr	r0, [pc, #180]	; (8007b5c <HAL_GPIO_DeInit+0x1b4>)
 8007aa6:	69bb      	ldr	r3, [r7, #24]
 8007aa8:	089b      	lsrs	r3, r3, #2
 8007aaa:	400a      	ands	r2, r1
 8007aac:	3318      	adds	r3, #24
 8007aae:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
        }
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      p_gpio->MODER |= (GPIO_MODER_MODE0 << (pin_position * 2U));
 8007ab2:	697b      	ldr	r3, [r7, #20]
 8007ab4:	681a      	ldr	r2, [r3, #0]
 8007ab6:	69fb      	ldr	r3, [r7, #28]
 8007ab8:	005b      	lsls	r3, r3, #1
 8007aba:	2103      	movs	r1, #3
 8007abc:	fa01 f303 	lsl.w	r3, r1, r3
 8007ac0:	431a      	orrs	r2, r3
 8007ac2:	697b      	ldr	r3, [r7, #20]
 8007ac4:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      p_gpio->AFR[pin_position >> 3U] &= ~(0x0FUL << ((pin_position & 0x07U) * 4U));
 8007ac6:	69fb      	ldr	r3, [r7, #28]
 8007ac8:	08da      	lsrs	r2, r3, #3
 8007aca:	697b      	ldr	r3, [r7, #20]
 8007acc:	3208      	adds	r2, #8
 8007ace:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007ad2:	69fb      	ldr	r3, [r7, #28]
 8007ad4:	f003 0307 	and.w	r3, r3, #7
 8007ad8:	009b      	lsls	r3, r3, #2
 8007ada:	220f      	movs	r2, #15
 8007adc:	fa02 f303 	lsl.w	r3, r2, r3
 8007ae0:	43db      	mvns	r3, r3
 8007ae2:	69fa      	ldr	r2, [r7, #28]
 8007ae4:	08d2      	lsrs	r2, r2, #3
 8007ae6:	4019      	ands	r1, r3
 8007ae8:	697b      	ldr	r3, [r7, #20]
 8007aea:	3208      	adds	r2, #8
 8007aec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      p_gpio->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * 2U));
 8007af0:	697b      	ldr	r3, [r7, #20]
 8007af2:	689a      	ldr	r2, [r3, #8]
 8007af4:	69fb      	ldr	r3, [r7, #28]
 8007af6:	005b      	lsls	r3, r3, #1
 8007af8:	2103      	movs	r1, #3
 8007afa:	fa01 f303 	lsl.w	r3, r1, r3
 8007afe:	43db      	mvns	r3, r3
 8007b00:	401a      	ands	r2, r3
 8007b02:	697b      	ldr	r3, [r7, #20]
 8007b04:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      p_gpio->OTYPER  &= ~(GPIO_OTYPER_OT0 << pin_position);
 8007b06:	697b      	ldr	r3, [r7, #20]
 8007b08:	685a      	ldr	r2, [r3, #4]
 8007b0a:	2101      	movs	r1, #1
 8007b0c:	69fb      	ldr	r3, [r7, #28]
 8007b0e:	fa01 f303 	lsl.w	r3, r1, r3
 8007b12:	43db      	mvns	r3, r3
 8007b14:	401a      	ands	r2, r3
 8007b16:	697b      	ldr	r3, [r7, #20]
 8007b18:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      p_gpio->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (pin_position * 2U));
 8007b1a:	697b      	ldr	r3, [r7, #20]
 8007b1c:	68da      	ldr	r2, [r3, #12]
 8007b1e:	69fb      	ldr	r3, [r7, #28]
 8007b20:	005b      	lsls	r3, r3, #1
 8007b22:	2103      	movs	r1, #3
 8007b24:	fa01 f303 	lsl.w	r3, r1, r3
 8007b28:	43db      	mvns	r3, r3
 8007b2a:	401a      	ands	r2, r3
 8007b2c:	697b      	ldr	r3, [r7, #20]
 8007b2e:	60da      	str	r2, [r3, #12]
    }

    position++;
 8007b30:	69bb      	ldr	r3, [r7, #24]
 8007b32:	3301      	adds	r3, #1
 8007b34:	61bb      	str	r3, [r7, #24]
  while ((GPIO_Pin >> position) != 0U)
 8007b36:	683a      	ldr	r2, [r7, #0]
 8007b38:	69bb      	ldr	r3, [r7, #24]
 8007b3a:	fa22 f303 	lsr.w	r3, r2, r3
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	f47f af3c 	bne.w	80079bc <HAL_GPIO_DeInit+0x14>
  }
}
 8007b44:	bf00      	nop
 8007b46:	bf00      	nop
 8007b48:	3724      	adds	r7, #36	; 0x24
 8007b4a:	46bd      	mov	sp, r7
 8007b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b50:	4770      	bx	lr
 8007b52:	bf00      	nop
 8007b54:	46020000 	.word	0x46020000
 8007b58:	0800ed40 	.word	0x0800ed40
 8007b5c:	46022000 	.word	0x46022000
 8007b60:	002f7f7f 	.word	0x002f7f7f

08007b64 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8007b64:	b480      	push	{r7}
 8007b66:	b085      	sub	sp, #20
 8007b68:	af00      	add	r7, sp, #0
 8007b6a:	6078      	str	r0, [r7, #4]
 8007b6c:	460b      	mov	r3, r1
 8007b6e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0U)
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	691a      	ldr	r2, [r3, #16]
 8007b74:	887b      	ldrh	r3, [r7, #2]
 8007b76:	4013      	ands	r3, r2
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d002      	beq.n	8007b82 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8007b7c:	2301      	movs	r3, #1
 8007b7e:	73fb      	strb	r3, [r7, #15]
 8007b80:	e001      	b.n	8007b86 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8007b82:	2300      	movs	r3, #0
 8007b84:	73fb      	strb	r3, [r7, #15]
  }

  return bitstatus;
 8007b86:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b88:	4618      	mov	r0, r3
 8007b8a:	3714      	adds	r7, #20
 8007b8c:	46bd      	mov	sp, r7
 8007b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b92:	4770      	bx	lr

08007b94 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007b94:	b480      	push	{r7}
 8007b96:	b083      	sub	sp, #12
 8007b98:	af00      	add	r7, sp, #0
 8007b9a:	6078      	str	r0, [r7, #4]
 8007b9c:	460b      	mov	r3, r1
 8007b9e:	807b      	strh	r3, [r7, #2]
 8007ba0:	4613      	mov	r3, r2
 8007ba2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007ba4:	787b      	ldrb	r3, [r7, #1]
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d003      	beq.n	8007bb2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8007baa:	887a      	ldrh	r2, [r7, #2]
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
  }
}
 8007bb0:	e002      	b.n	8007bb8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
 8007bb2:	887a      	ldrh	r2, [r7, #2]
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8007bb8:	bf00      	nop
 8007bba:	370c      	adds	r7, #12
 8007bbc:	46bd      	mov	sp, r7
 8007bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bc2:	4770      	bx	lr

08007bc4 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8007bc4:	b480      	push	{r7}
 8007bc6:	b085      	sub	sp, #20
 8007bc8:	af00      	add	r7, sp, #0
 8007bca:	6078      	str	r0, [r7, #4]
 8007bcc:	460b      	mov	r3, r1
 8007bce:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	695b      	ldr	r3, [r3, #20]
 8007bd4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8007bd6:	887a      	ldrh	r2, [r7, #2]
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	4013      	ands	r3, r2
 8007bdc:	041a      	lsls	r2, r3, #16
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	43d9      	mvns	r1, r3
 8007be2:	887b      	ldrh	r3, [r7, #2]
 8007be4:	400b      	ands	r3, r1
 8007be6:	431a      	orrs	r2, r3
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	619a      	str	r2, [r3, #24]
}
 8007bec:	bf00      	nop
 8007bee:	3714      	adds	r7, #20
 8007bf0:	46bd      	mov	sp, r7
 8007bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf6:	4770      	bx	lr

08007bf8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007bf8:	b580      	push	{r7, lr}
 8007bfa:	b082      	sub	sp, #8
 8007bfc:	af00      	add	r7, sp, #0
 8007bfe:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d101      	bne.n	8007c0a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007c06:	2301      	movs	r3, #1
 8007c08:	e081      	b.n	8007d0e <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007c10:	b2db      	uxtb	r3, r3
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d106      	bne.n	8007c24 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	2200      	movs	r2, #0
 8007c1a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8007c1e:	6878      	ldr	r0, [r7, #4]
 8007c20:	f7fc ff22 	bl	8004a68 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	2224      	movs	r2, #36	; 0x24
 8007c28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	681a      	ldr	r2, [r3, #0]
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	f022 0201 	bic.w	r2, r2, #1
 8007c3a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	685a      	ldr	r2, [r3, #4]
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8007c48:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	689a      	ldr	r2, [r3, #8]
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007c58:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	68db      	ldr	r3, [r3, #12]
 8007c5e:	2b01      	cmp	r3, #1
 8007c60:	d107      	bne.n	8007c72 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	689a      	ldr	r2, [r3, #8]
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007c6e:	609a      	str	r2, [r3, #8]
 8007c70:	e006      	b.n	8007c80 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	689a      	ldr	r2, [r3, #8]
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8007c7e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	68db      	ldr	r3, [r3, #12]
 8007c84:	2b02      	cmp	r3, #2
 8007c86:	d104      	bne.n	8007c92 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007c90:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	685b      	ldr	r3, [r3, #4]
 8007c98:	687a      	ldr	r2, [r7, #4]
 8007c9a:	6812      	ldr	r2, [r2, #0]
 8007c9c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8007ca0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007ca4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	68da      	ldr	r2, [r3, #12]
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007cb4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	691a      	ldr	r2, [r3, #16]
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	695b      	ldr	r3, [r3, #20]
 8007cbe:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	699b      	ldr	r3, [r3, #24]
 8007cc6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	430a      	orrs	r2, r1
 8007cce:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	69d9      	ldr	r1, [r3, #28]
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	6a1a      	ldr	r2, [r3, #32]
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	430a      	orrs	r2, r1
 8007cde:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	681a      	ldr	r2, [r3, #0]
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	f042 0201 	orr.w	r2, r2, #1
 8007cee:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	2200      	movs	r2, #0
 8007cf4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	2220      	movs	r2, #32
 8007cfa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	2200      	movs	r2, #0
 8007d02:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	2200      	movs	r2, #0
 8007d08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8007d0c:	2300      	movs	r3, #0
}
 8007d0e:	4618      	mov	r0, r3
 8007d10:	3708      	adds	r7, #8
 8007d12:	46bd      	mov	sp, r7
 8007d14:	bd80      	pop	{r7, pc}

08007d16 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8007d16:	b580      	push	{r7, lr}
 8007d18:	b082      	sub	sp, #8
 8007d1a:	af00      	add	r7, sp, #0
 8007d1c:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d101      	bne.n	8007d28 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8007d24:	2301      	movs	r3, #1
 8007d26:	e021      	b.n	8007d6c <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	2224      	movs	r2, #36	; 0x24
 8007d2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	681a      	ldr	r2, [r3, #0]
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	f022 0201 	bic.w	r2, r2, #1
 8007d3e:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8007d40:	6878      	ldr	r0, [r7, #4]
 8007d42:	f7fc ff57 	bl	8004bf4 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	2200      	movs	r2, #0
 8007d4a:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	2200      	movs	r2, #0
 8007d50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	2200      	movs	r2, #0
 8007d58:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	2200      	movs	r2, #0
 8007d5e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	2200      	movs	r2, #0
 8007d66:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8007d6a:	2300      	movs	r3, #0
}
 8007d6c:	4618      	mov	r0, r3
 8007d6e:	3708      	adds	r7, #8
 8007d70:	46bd      	mov	sp, r7
 8007d72:	bd80      	pop	{r7, pc}

08007d74 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007d74:	b580      	push	{r7, lr}
 8007d76:	b088      	sub	sp, #32
 8007d78:	af02      	add	r7, sp, #8
 8007d7a:	60f8      	str	r0, [r7, #12]
 8007d7c:	4608      	mov	r0, r1
 8007d7e:	4611      	mov	r1, r2
 8007d80:	461a      	mov	r2, r3
 8007d82:	4603      	mov	r3, r0
 8007d84:	817b      	strh	r3, [r7, #10]
 8007d86:	460b      	mov	r3, r1
 8007d88:	813b      	strh	r3, [r7, #8]
 8007d8a:	4613      	mov	r3, r2
 8007d8c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007d94:	b2db      	uxtb	r3, r3
 8007d96:	2b20      	cmp	r3, #32
 8007d98:	f040 80f9 	bne.w	8007f8e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007d9c:	6a3b      	ldr	r3, [r7, #32]
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d002      	beq.n	8007da8 <HAL_I2C_Mem_Write+0x34>
 8007da2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d105      	bne.n	8007db4 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007dae:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8007db0:	2301      	movs	r3, #1
 8007db2:	e0ed      	b.n	8007f90 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007dba:	2b01      	cmp	r3, #1
 8007dbc:	d101      	bne.n	8007dc2 <HAL_I2C_Mem_Write+0x4e>
 8007dbe:	2302      	movs	r3, #2
 8007dc0:	e0e6      	b.n	8007f90 <HAL_I2C_Mem_Write+0x21c>
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	2201      	movs	r2, #1
 8007dc6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8007dca:	f7fd fd0b 	bl	80057e4 <HAL_GetTick>
 8007dce:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007dd0:	697b      	ldr	r3, [r7, #20]
 8007dd2:	9300      	str	r3, [sp, #0]
 8007dd4:	2319      	movs	r3, #25
 8007dd6:	2201      	movs	r2, #1
 8007dd8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007ddc:	68f8      	ldr	r0, [r7, #12]
 8007dde:	f000 fac3 	bl	8008368 <I2C_WaitOnFlagUntilTimeout>
 8007de2:	4603      	mov	r3, r0
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d001      	beq.n	8007dec <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8007de8:	2301      	movs	r3, #1
 8007dea:	e0d1      	b.n	8007f90 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	2221      	movs	r2, #33	; 0x21
 8007df0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	2240      	movs	r2, #64	; 0x40
 8007df8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	2200      	movs	r2, #0
 8007e00:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	6a3a      	ldr	r2, [r7, #32]
 8007e06:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8007e0c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	2200      	movs	r2, #0
 8007e12:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007e14:	88f8      	ldrh	r0, [r7, #6]
 8007e16:	893a      	ldrh	r2, [r7, #8]
 8007e18:	8979      	ldrh	r1, [r7, #10]
 8007e1a:	697b      	ldr	r3, [r7, #20]
 8007e1c:	9301      	str	r3, [sp, #4]
 8007e1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e20:	9300      	str	r3, [sp, #0]
 8007e22:	4603      	mov	r3, r0
 8007e24:	68f8      	ldr	r0, [r7, #12]
 8007e26:	f000 f9d3 	bl	80081d0 <I2C_RequestMemoryWrite>
 8007e2a:	4603      	mov	r3, r0
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d005      	beq.n	8007e3c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	2200      	movs	r2, #0
 8007e34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8007e38:	2301      	movs	r3, #1
 8007e3a:	e0a9      	b.n	8007f90 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e40:	b29b      	uxth	r3, r3
 8007e42:	2bff      	cmp	r3, #255	; 0xff
 8007e44:	d90e      	bls.n	8007e64 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	22ff      	movs	r2, #255	; 0xff
 8007e4a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007e50:	b2da      	uxtb	r2, r3
 8007e52:	8979      	ldrh	r1, [r7, #10]
 8007e54:	2300      	movs	r3, #0
 8007e56:	9300      	str	r3, [sp, #0]
 8007e58:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007e5c:	68f8      	ldr	r0, [r7, #12]
 8007e5e:	f000 fc2b 	bl	80086b8 <I2C_TransferConfig>
 8007e62:	e00f      	b.n	8007e84 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e68:	b29a      	uxth	r2, r3
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007e72:	b2da      	uxtb	r2, r3
 8007e74:	8979      	ldrh	r1, [r7, #10]
 8007e76:	2300      	movs	r3, #0
 8007e78:	9300      	str	r3, [sp, #0]
 8007e7a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007e7e:	68f8      	ldr	r0, [r7, #12]
 8007e80:	f000 fc1a 	bl	80086b8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007e84:	697a      	ldr	r2, [r7, #20]
 8007e86:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007e88:	68f8      	ldr	r0, [r7, #12]
 8007e8a:	f000 faad 	bl	80083e8 <I2C_WaitOnTXISFlagUntilTimeout>
 8007e8e:	4603      	mov	r3, r0
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d001      	beq.n	8007e98 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8007e94:	2301      	movs	r3, #1
 8007e96:	e07b      	b.n	8007f90 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e9c:	781a      	ldrb	r2, [r3, #0]
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ea8:	1c5a      	adds	r2, r3, #1
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007eb2:	b29b      	uxth	r3, r3
 8007eb4:	3b01      	subs	r3, #1
 8007eb6:	b29a      	uxth	r2, r3
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007ec0:	3b01      	subs	r3, #1
 8007ec2:	b29a      	uxth	r2, r3
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007ecc:	b29b      	uxth	r3, r3
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d034      	beq.n	8007f3c <HAL_I2C_Mem_Write+0x1c8>
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d130      	bne.n	8007f3c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007eda:	697b      	ldr	r3, [r7, #20]
 8007edc:	9300      	str	r3, [sp, #0]
 8007ede:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ee0:	2200      	movs	r2, #0
 8007ee2:	2180      	movs	r1, #128	; 0x80
 8007ee4:	68f8      	ldr	r0, [r7, #12]
 8007ee6:	f000 fa3f 	bl	8008368 <I2C_WaitOnFlagUntilTimeout>
 8007eea:	4603      	mov	r3, r0
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d001      	beq.n	8007ef4 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8007ef0:	2301      	movs	r3, #1
 8007ef2:	e04d      	b.n	8007f90 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007ef8:	b29b      	uxth	r3, r3
 8007efa:	2bff      	cmp	r3, #255	; 0xff
 8007efc:	d90e      	bls.n	8007f1c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	22ff      	movs	r2, #255	; 0xff
 8007f02:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007f08:	b2da      	uxtb	r2, r3
 8007f0a:	8979      	ldrh	r1, [r7, #10]
 8007f0c:	2300      	movs	r3, #0
 8007f0e:	9300      	str	r3, [sp, #0]
 8007f10:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007f14:	68f8      	ldr	r0, [r7, #12]
 8007f16:	f000 fbcf 	bl	80086b8 <I2C_TransferConfig>
 8007f1a:	e00f      	b.n	8007f3c <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007f20:	b29a      	uxth	r2, r3
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007f2a:	b2da      	uxtb	r2, r3
 8007f2c:	8979      	ldrh	r1, [r7, #10]
 8007f2e:	2300      	movs	r3, #0
 8007f30:	9300      	str	r3, [sp, #0]
 8007f32:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007f36:	68f8      	ldr	r0, [r7, #12]
 8007f38:	f000 fbbe 	bl	80086b8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007f40:	b29b      	uxth	r3, r3
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d19e      	bne.n	8007e84 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007f46:	697a      	ldr	r2, [r7, #20]
 8007f48:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007f4a:	68f8      	ldr	r0, [r7, #12]
 8007f4c:	f000 fa8c 	bl	8008468 <I2C_WaitOnSTOPFlagUntilTimeout>
 8007f50:	4603      	mov	r3, r0
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d001      	beq.n	8007f5a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8007f56:	2301      	movs	r3, #1
 8007f58:	e01a      	b.n	8007f90 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	2220      	movs	r2, #32
 8007f60:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	6859      	ldr	r1, [r3, #4]
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	681a      	ldr	r2, [r3, #0]
 8007f6c:	4b0a      	ldr	r3, [pc, #40]	; (8007f98 <HAL_I2C_Mem_Write+0x224>)
 8007f6e:	400b      	ands	r3, r1
 8007f70:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	2220      	movs	r2, #32
 8007f76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	2200      	movs	r2, #0
 8007f7e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	2200      	movs	r2, #0
 8007f86:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007f8a:	2300      	movs	r3, #0
 8007f8c:	e000      	b.n	8007f90 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8007f8e:	2302      	movs	r3, #2
  }
}
 8007f90:	4618      	mov	r0, r3
 8007f92:	3718      	adds	r7, #24
 8007f94:	46bd      	mov	sp, r7
 8007f96:	bd80      	pop	{r7, pc}
 8007f98:	fe00e800 	.word	0xfe00e800

08007f9c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007f9c:	b580      	push	{r7, lr}
 8007f9e:	b088      	sub	sp, #32
 8007fa0:	af02      	add	r7, sp, #8
 8007fa2:	60f8      	str	r0, [r7, #12]
 8007fa4:	4608      	mov	r0, r1
 8007fa6:	4611      	mov	r1, r2
 8007fa8:	461a      	mov	r2, r3
 8007faa:	4603      	mov	r3, r0
 8007fac:	817b      	strh	r3, [r7, #10]
 8007fae:	460b      	mov	r3, r1
 8007fb0:	813b      	strh	r3, [r7, #8]
 8007fb2:	4613      	mov	r3, r2
 8007fb4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007fbc:	b2db      	uxtb	r3, r3
 8007fbe:	2b20      	cmp	r3, #32
 8007fc0:	f040 80fd 	bne.w	80081be <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8007fc4:	6a3b      	ldr	r3, [r7, #32]
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d002      	beq.n	8007fd0 <HAL_I2C_Mem_Read+0x34>
 8007fca:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d105      	bne.n	8007fdc <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007fd6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8007fd8:	2301      	movs	r3, #1
 8007fda:	e0f1      	b.n	80081c0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007fe2:	2b01      	cmp	r3, #1
 8007fe4:	d101      	bne.n	8007fea <HAL_I2C_Mem_Read+0x4e>
 8007fe6:	2302      	movs	r3, #2
 8007fe8:	e0ea      	b.n	80081c0 <HAL_I2C_Mem_Read+0x224>
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	2201      	movs	r2, #1
 8007fee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8007ff2:	f7fd fbf7 	bl	80057e4 <HAL_GetTick>
 8007ff6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007ff8:	697b      	ldr	r3, [r7, #20]
 8007ffa:	9300      	str	r3, [sp, #0]
 8007ffc:	2319      	movs	r3, #25
 8007ffe:	2201      	movs	r2, #1
 8008000:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008004:	68f8      	ldr	r0, [r7, #12]
 8008006:	f000 f9af 	bl	8008368 <I2C_WaitOnFlagUntilTimeout>
 800800a:	4603      	mov	r3, r0
 800800c:	2b00      	cmp	r3, #0
 800800e:	d001      	beq.n	8008014 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8008010:	2301      	movs	r3, #1
 8008012:	e0d5      	b.n	80081c0 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	2222      	movs	r2, #34	; 0x22
 8008018:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	2240      	movs	r2, #64	; 0x40
 8008020:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	2200      	movs	r2, #0
 8008028:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	6a3a      	ldr	r2, [r7, #32]
 800802e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8008034:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	2200      	movs	r2, #0
 800803a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800803c:	88f8      	ldrh	r0, [r7, #6]
 800803e:	893a      	ldrh	r2, [r7, #8]
 8008040:	8979      	ldrh	r1, [r7, #10]
 8008042:	697b      	ldr	r3, [r7, #20]
 8008044:	9301      	str	r3, [sp, #4]
 8008046:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008048:	9300      	str	r3, [sp, #0]
 800804a:	4603      	mov	r3, r0
 800804c:	68f8      	ldr	r0, [r7, #12]
 800804e:	f000 f913 	bl	8008278 <I2C_RequestMemoryRead>
 8008052:	4603      	mov	r3, r0
 8008054:	2b00      	cmp	r3, #0
 8008056:	d005      	beq.n	8008064 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	2200      	movs	r2, #0
 800805c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8008060:	2301      	movs	r3, #1
 8008062:	e0ad      	b.n	80081c0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008068:	b29b      	uxth	r3, r3
 800806a:	2bff      	cmp	r3, #255	; 0xff
 800806c:	d90e      	bls.n	800808c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	22ff      	movs	r2, #255	; 0xff
 8008072:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008078:	b2da      	uxtb	r2, r3
 800807a:	8979      	ldrh	r1, [r7, #10]
 800807c:	4b52      	ldr	r3, [pc, #328]	; (80081c8 <HAL_I2C_Mem_Read+0x22c>)
 800807e:	9300      	str	r3, [sp, #0]
 8008080:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008084:	68f8      	ldr	r0, [r7, #12]
 8008086:	f000 fb17 	bl	80086b8 <I2C_TransferConfig>
 800808a:	e00f      	b.n	80080ac <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008090:	b29a      	uxth	r2, r3
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800809a:	b2da      	uxtb	r2, r3
 800809c:	8979      	ldrh	r1, [r7, #10]
 800809e:	4b4a      	ldr	r3, [pc, #296]	; (80081c8 <HAL_I2C_Mem_Read+0x22c>)
 80080a0:	9300      	str	r3, [sp, #0]
 80080a2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80080a6:	68f8      	ldr	r0, [r7, #12]
 80080a8:	f000 fb06 	bl	80086b8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80080ac:	697b      	ldr	r3, [r7, #20]
 80080ae:	9300      	str	r3, [sp, #0]
 80080b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080b2:	2200      	movs	r2, #0
 80080b4:	2104      	movs	r1, #4
 80080b6:	68f8      	ldr	r0, [r7, #12]
 80080b8:	f000 f956 	bl	8008368 <I2C_WaitOnFlagUntilTimeout>
 80080bc:	4603      	mov	r3, r0
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d001      	beq.n	80080c6 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80080c2:	2301      	movs	r3, #1
 80080c4:	e07c      	b.n	80081c0 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080d0:	b2d2      	uxtb	r2, r2
 80080d2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080d8:	1c5a      	adds	r2, r3, #1
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80080e2:	3b01      	subs	r3, #1
 80080e4:	b29a      	uxth	r2, r3
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80080ee:	b29b      	uxth	r3, r3
 80080f0:	3b01      	subs	r3, #1
 80080f2:	b29a      	uxth	r2, r3
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80080fc:	b29b      	uxth	r3, r3
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d034      	beq.n	800816c <HAL_I2C_Mem_Read+0x1d0>
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008106:	2b00      	cmp	r3, #0
 8008108:	d130      	bne.n	800816c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800810a:	697b      	ldr	r3, [r7, #20]
 800810c:	9300      	str	r3, [sp, #0]
 800810e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008110:	2200      	movs	r2, #0
 8008112:	2180      	movs	r1, #128	; 0x80
 8008114:	68f8      	ldr	r0, [r7, #12]
 8008116:	f000 f927 	bl	8008368 <I2C_WaitOnFlagUntilTimeout>
 800811a:	4603      	mov	r3, r0
 800811c:	2b00      	cmp	r3, #0
 800811e:	d001      	beq.n	8008124 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8008120:	2301      	movs	r3, #1
 8008122:	e04d      	b.n	80081c0 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008128:	b29b      	uxth	r3, r3
 800812a:	2bff      	cmp	r3, #255	; 0xff
 800812c:	d90e      	bls.n	800814c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	22ff      	movs	r2, #255	; 0xff
 8008132:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008138:	b2da      	uxtb	r2, r3
 800813a:	8979      	ldrh	r1, [r7, #10]
 800813c:	2300      	movs	r3, #0
 800813e:	9300      	str	r3, [sp, #0]
 8008140:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008144:	68f8      	ldr	r0, [r7, #12]
 8008146:	f000 fab7 	bl	80086b8 <I2C_TransferConfig>
 800814a:	e00f      	b.n	800816c <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008150:	b29a      	uxth	r2, r3
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800815a:	b2da      	uxtb	r2, r3
 800815c:	8979      	ldrh	r1, [r7, #10]
 800815e:	2300      	movs	r3, #0
 8008160:	9300      	str	r3, [sp, #0]
 8008162:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008166:	68f8      	ldr	r0, [r7, #12]
 8008168:	f000 faa6 	bl	80086b8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008170:	b29b      	uxth	r3, r3
 8008172:	2b00      	cmp	r3, #0
 8008174:	d19a      	bne.n	80080ac <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008176:	697a      	ldr	r2, [r7, #20]
 8008178:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800817a:	68f8      	ldr	r0, [r7, #12]
 800817c:	f000 f974 	bl	8008468 <I2C_WaitOnSTOPFlagUntilTimeout>
 8008180:	4603      	mov	r3, r0
 8008182:	2b00      	cmp	r3, #0
 8008184:	d001      	beq.n	800818a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8008186:	2301      	movs	r3, #1
 8008188:	e01a      	b.n	80081c0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	2220      	movs	r2, #32
 8008190:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	6859      	ldr	r1, [r3, #4]
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	681a      	ldr	r2, [r3, #0]
 800819c:	4b0b      	ldr	r3, [pc, #44]	; (80081cc <HAL_I2C_Mem_Read+0x230>)
 800819e:	400b      	ands	r3, r1
 80081a0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	2220      	movs	r2, #32
 80081a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	2200      	movs	r2, #0
 80081ae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	2200      	movs	r2, #0
 80081b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80081ba:	2300      	movs	r3, #0
 80081bc:	e000      	b.n	80081c0 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80081be:	2302      	movs	r3, #2
  }
}
 80081c0:	4618      	mov	r0, r3
 80081c2:	3718      	adds	r7, #24
 80081c4:	46bd      	mov	sp, r7
 80081c6:	bd80      	pop	{r7, pc}
 80081c8:	80002400 	.word	0x80002400
 80081cc:	fe00e800 	.word	0xfe00e800

080081d0 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80081d0:	b580      	push	{r7, lr}
 80081d2:	b086      	sub	sp, #24
 80081d4:	af02      	add	r7, sp, #8
 80081d6:	60f8      	str	r0, [r7, #12]
 80081d8:	4608      	mov	r0, r1
 80081da:	4611      	mov	r1, r2
 80081dc:	461a      	mov	r2, r3
 80081de:	4603      	mov	r3, r0
 80081e0:	817b      	strh	r3, [r7, #10]
 80081e2:	460b      	mov	r3, r1
 80081e4:	813b      	strh	r3, [r7, #8]
 80081e6:	4613      	mov	r3, r2
 80081e8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80081ea:	88fb      	ldrh	r3, [r7, #6]
 80081ec:	b2da      	uxtb	r2, r3
 80081ee:	8979      	ldrh	r1, [r7, #10]
 80081f0:	4b20      	ldr	r3, [pc, #128]	; (8008274 <I2C_RequestMemoryWrite+0xa4>)
 80081f2:	9300      	str	r3, [sp, #0]
 80081f4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80081f8:	68f8      	ldr	r0, [r7, #12]
 80081fa:	f000 fa5d 	bl	80086b8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80081fe:	69fa      	ldr	r2, [r7, #28]
 8008200:	69b9      	ldr	r1, [r7, #24]
 8008202:	68f8      	ldr	r0, [r7, #12]
 8008204:	f000 f8f0 	bl	80083e8 <I2C_WaitOnTXISFlagUntilTimeout>
 8008208:	4603      	mov	r3, r0
 800820a:	2b00      	cmp	r3, #0
 800820c:	d001      	beq.n	8008212 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800820e:	2301      	movs	r3, #1
 8008210:	e02c      	b.n	800826c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008212:	88fb      	ldrh	r3, [r7, #6]
 8008214:	2b01      	cmp	r3, #1
 8008216:	d105      	bne.n	8008224 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008218:	893b      	ldrh	r3, [r7, #8]
 800821a:	b2da      	uxtb	r2, r3
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	629a      	str	r2, [r3, #40]	; 0x28
 8008222:	e015      	b.n	8008250 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8008224:	893b      	ldrh	r3, [r7, #8]
 8008226:	0a1b      	lsrs	r3, r3, #8
 8008228:	b29b      	uxth	r3, r3
 800822a:	b2da      	uxtb	r2, r3
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008232:	69fa      	ldr	r2, [r7, #28]
 8008234:	69b9      	ldr	r1, [r7, #24]
 8008236:	68f8      	ldr	r0, [r7, #12]
 8008238:	f000 f8d6 	bl	80083e8 <I2C_WaitOnTXISFlagUntilTimeout>
 800823c:	4603      	mov	r3, r0
 800823e:	2b00      	cmp	r3, #0
 8008240:	d001      	beq.n	8008246 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8008242:	2301      	movs	r3, #1
 8008244:	e012      	b.n	800826c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008246:	893b      	ldrh	r3, [r7, #8]
 8008248:	b2da      	uxtb	r2, r3
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8008250:	69fb      	ldr	r3, [r7, #28]
 8008252:	9300      	str	r3, [sp, #0]
 8008254:	69bb      	ldr	r3, [r7, #24]
 8008256:	2200      	movs	r2, #0
 8008258:	2180      	movs	r1, #128	; 0x80
 800825a:	68f8      	ldr	r0, [r7, #12]
 800825c:	f000 f884 	bl	8008368 <I2C_WaitOnFlagUntilTimeout>
 8008260:	4603      	mov	r3, r0
 8008262:	2b00      	cmp	r3, #0
 8008264:	d001      	beq.n	800826a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8008266:	2301      	movs	r3, #1
 8008268:	e000      	b.n	800826c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800826a:	2300      	movs	r3, #0
}
 800826c:	4618      	mov	r0, r3
 800826e:	3710      	adds	r7, #16
 8008270:	46bd      	mov	sp, r7
 8008272:	bd80      	pop	{r7, pc}
 8008274:	80002000 	.word	0x80002000

08008278 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8008278:	b580      	push	{r7, lr}
 800827a:	b086      	sub	sp, #24
 800827c:	af02      	add	r7, sp, #8
 800827e:	60f8      	str	r0, [r7, #12]
 8008280:	4608      	mov	r0, r1
 8008282:	4611      	mov	r1, r2
 8008284:	461a      	mov	r2, r3
 8008286:	4603      	mov	r3, r0
 8008288:	817b      	strh	r3, [r7, #10]
 800828a:	460b      	mov	r3, r1
 800828c:	813b      	strh	r3, [r7, #8]
 800828e:	4613      	mov	r3, r2
 8008290:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8008292:	88fb      	ldrh	r3, [r7, #6]
 8008294:	b2da      	uxtb	r2, r3
 8008296:	8979      	ldrh	r1, [r7, #10]
 8008298:	4b20      	ldr	r3, [pc, #128]	; (800831c <I2C_RequestMemoryRead+0xa4>)
 800829a:	9300      	str	r3, [sp, #0]
 800829c:	2300      	movs	r3, #0
 800829e:	68f8      	ldr	r0, [r7, #12]
 80082a0:	f000 fa0a 	bl	80086b8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80082a4:	69fa      	ldr	r2, [r7, #28]
 80082a6:	69b9      	ldr	r1, [r7, #24]
 80082a8:	68f8      	ldr	r0, [r7, #12]
 80082aa:	f000 f89d 	bl	80083e8 <I2C_WaitOnTXISFlagUntilTimeout>
 80082ae:	4603      	mov	r3, r0
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d001      	beq.n	80082b8 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80082b4:	2301      	movs	r3, #1
 80082b6:	e02c      	b.n	8008312 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80082b8:	88fb      	ldrh	r3, [r7, #6]
 80082ba:	2b01      	cmp	r3, #1
 80082bc:	d105      	bne.n	80082ca <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80082be:	893b      	ldrh	r3, [r7, #8]
 80082c0:	b2da      	uxtb	r2, r3
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	629a      	str	r2, [r3, #40]	; 0x28
 80082c8:	e015      	b.n	80082f6 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80082ca:	893b      	ldrh	r3, [r7, #8]
 80082cc:	0a1b      	lsrs	r3, r3, #8
 80082ce:	b29b      	uxth	r3, r3
 80082d0:	b2da      	uxtb	r2, r3
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80082d8:	69fa      	ldr	r2, [r7, #28]
 80082da:	69b9      	ldr	r1, [r7, #24]
 80082dc:	68f8      	ldr	r0, [r7, #12]
 80082de:	f000 f883 	bl	80083e8 <I2C_WaitOnTXISFlagUntilTimeout>
 80082e2:	4603      	mov	r3, r0
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d001      	beq.n	80082ec <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80082e8:	2301      	movs	r3, #1
 80082ea:	e012      	b.n	8008312 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80082ec:	893b      	ldrh	r3, [r7, #8]
 80082ee:	b2da      	uxtb	r2, r3
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80082f6:	69fb      	ldr	r3, [r7, #28]
 80082f8:	9300      	str	r3, [sp, #0]
 80082fa:	69bb      	ldr	r3, [r7, #24]
 80082fc:	2200      	movs	r2, #0
 80082fe:	2140      	movs	r1, #64	; 0x40
 8008300:	68f8      	ldr	r0, [r7, #12]
 8008302:	f000 f831 	bl	8008368 <I2C_WaitOnFlagUntilTimeout>
 8008306:	4603      	mov	r3, r0
 8008308:	2b00      	cmp	r3, #0
 800830a:	d001      	beq.n	8008310 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800830c:	2301      	movs	r3, #1
 800830e:	e000      	b.n	8008312 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8008310:	2300      	movs	r3, #0
}
 8008312:	4618      	mov	r0, r3
 8008314:	3710      	adds	r7, #16
 8008316:	46bd      	mov	sp, r7
 8008318:	bd80      	pop	{r7, pc}
 800831a:	bf00      	nop
 800831c:	80002000 	.word	0x80002000

08008320 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8008320:	b480      	push	{r7}
 8008322:	b083      	sub	sp, #12
 8008324:	af00      	add	r7, sp, #0
 8008326:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	699b      	ldr	r3, [r3, #24]
 800832e:	f003 0302 	and.w	r3, r3, #2
 8008332:	2b02      	cmp	r3, #2
 8008334:	d103      	bne.n	800833e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	2200      	movs	r2, #0
 800833c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	699b      	ldr	r3, [r3, #24]
 8008344:	f003 0301 	and.w	r3, r3, #1
 8008348:	2b01      	cmp	r3, #1
 800834a:	d007      	beq.n	800835c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	699a      	ldr	r2, [r3, #24]
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	f042 0201 	orr.w	r2, r2, #1
 800835a:	619a      	str	r2, [r3, #24]
  }
}
 800835c:	bf00      	nop
 800835e:	370c      	adds	r7, #12
 8008360:	46bd      	mov	sp, r7
 8008362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008366:	4770      	bx	lr

08008368 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8008368:	b580      	push	{r7, lr}
 800836a:	b084      	sub	sp, #16
 800836c:	af00      	add	r7, sp, #0
 800836e:	60f8      	str	r0, [r7, #12]
 8008370:	60b9      	str	r1, [r7, #8]
 8008372:	603b      	str	r3, [r7, #0]
 8008374:	4613      	mov	r3, r2
 8008376:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008378:	e022      	b.n	80083c0 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800837a:	683b      	ldr	r3, [r7, #0]
 800837c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008380:	d01e      	beq.n	80083c0 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008382:	f7fd fa2f 	bl	80057e4 <HAL_GetTick>
 8008386:	4602      	mov	r2, r0
 8008388:	69bb      	ldr	r3, [r7, #24]
 800838a:	1ad3      	subs	r3, r2, r3
 800838c:	683a      	ldr	r2, [r7, #0]
 800838e:	429a      	cmp	r2, r3
 8008390:	d302      	bcc.n	8008398 <I2C_WaitOnFlagUntilTimeout+0x30>
 8008392:	683b      	ldr	r3, [r7, #0]
 8008394:	2b00      	cmp	r3, #0
 8008396:	d113      	bne.n	80083c0 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800839c:	f043 0220 	orr.w	r2, r3, #32
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	2220      	movs	r2, #32
 80083a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	2200      	movs	r2, #0
 80083b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	2200      	movs	r2, #0
 80083b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80083bc:	2301      	movs	r3, #1
 80083be:	e00f      	b.n	80083e0 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	699a      	ldr	r2, [r3, #24]
 80083c6:	68bb      	ldr	r3, [r7, #8]
 80083c8:	4013      	ands	r3, r2
 80083ca:	68ba      	ldr	r2, [r7, #8]
 80083cc:	429a      	cmp	r2, r3
 80083ce:	bf0c      	ite	eq
 80083d0:	2301      	moveq	r3, #1
 80083d2:	2300      	movne	r3, #0
 80083d4:	b2db      	uxtb	r3, r3
 80083d6:	461a      	mov	r2, r3
 80083d8:	79fb      	ldrb	r3, [r7, #7]
 80083da:	429a      	cmp	r2, r3
 80083dc:	d0cd      	beq.n	800837a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80083de:	2300      	movs	r3, #0
}
 80083e0:	4618      	mov	r0, r3
 80083e2:	3710      	adds	r7, #16
 80083e4:	46bd      	mov	sp, r7
 80083e6:	bd80      	pop	{r7, pc}

080083e8 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80083e8:	b580      	push	{r7, lr}
 80083ea:	b084      	sub	sp, #16
 80083ec:	af00      	add	r7, sp, #0
 80083ee:	60f8      	str	r0, [r7, #12]
 80083f0:	60b9      	str	r1, [r7, #8]
 80083f2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80083f4:	e02c      	b.n	8008450 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80083f6:	687a      	ldr	r2, [r7, #4]
 80083f8:	68b9      	ldr	r1, [r7, #8]
 80083fa:	68f8      	ldr	r0, [r7, #12]
 80083fc:	f000 f870 	bl	80084e0 <I2C_IsErrorOccurred>
 8008400:	4603      	mov	r3, r0
 8008402:	2b00      	cmp	r3, #0
 8008404:	d001      	beq.n	800840a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8008406:	2301      	movs	r3, #1
 8008408:	e02a      	b.n	8008460 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800840a:	68bb      	ldr	r3, [r7, #8]
 800840c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008410:	d01e      	beq.n	8008450 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008412:	f7fd f9e7 	bl	80057e4 <HAL_GetTick>
 8008416:	4602      	mov	r2, r0
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	1ad3      	subs	r3, r2, r3
 800841c:	68ba      	ldr	r2, [r7, #8]
 800841e:	429a      	cmp	r2, r3
 8008420:	d302      	bcc.n	8008428 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8008422:	68bb      	ldr	r3, [r7, #8]
 8008424:	2b00      	cmp	r3, #0
 8008426:	d113      	bne.n	8008450 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800842c:	f043 0220 	orr.w	r2, r3, #32
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	2220      	movs	r2, #32
 8008438:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	2200      	movs	r2, #0
 8008440:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	2200      	movs	r2, #0
 8008448:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800844c:	2301      	movs	r3, #1
 800844e:	e007      	b.n	8008460 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	699b      	ldr	r3, [r3, #24]
 8008456:	f003 0302 	and.w	r3, r3, #2
 800845a:	2b02      	cmp	r3, #2
 800845c:	d1cb      	bne.n	80083f6 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800845e:	2300      	movs	r3, #0
}
 8008460:	4618      	mov	r0, r3
 8008462:	3710      	adds	r7, #16
 8008464:	46bd      	mov	sp, r7
 8008466:	bd80      	pop	{r7, pc}

08008468 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8008468:	b580      	push	{r7, lr}
 800846a:	b084      	sub	sp, #16
 800846c:	af00      	add	r7, sp, #0
 800846e:	60f8      	str	r0, [r7, #12]
 8008470:	60b9      	str	r1, [r7, #8]
 8008472:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008474:	e028      	b.n	80084c8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8008476:	687a      	ldr	r2, [r7, #4]
 8008478:	68b9      	ldr	r1, [r7, #8]
 800847a:	68f8      	ldr	r0, [r7, #12]
 800847c:	f000 f830 	bl	80084e0 <I2C_IsErrorOccurred>
 8008480:	4603      	mov	r3, r0
 8008482:	2b00      	cmp	r3, #0
 8008484:	d001      	beq.n	800848a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8008486:	2301      	movs	r3, #1
 8008488:	e026      	b.n	80084d8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800848a:	f7fd f9ab 	bl	80057e4 <HAL_GetTick>
 800848e:	4602      	mov	r2, r0
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	1ad3      	subs	r3, r2, r3
 8008494:	68ba      	ldr	r2, [r7, #8]
 8008496:	429a      	cmp	r2, r3
 8008498:	d302      	bcc.n	80084a0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800849a:	68bb      	ldr	r3, [r7, #8]
 800849c:	2b00      	cmp	r3, #0
 800849e:	d113      	bne.n	80084c8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80084a4:	f043 0220 	orr.w	r2, r3, #32
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	2220      	movs	r2, #32
 80084b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	2200      	movs	r2, #0
 80084b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	2200      	movs	r2, #0
 80084c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80084c4:	2301      	movs	r3, #1
 80084c6:	e007      	b.n	80084d8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	699b      	ldr	r3, [r3, #24]
 80084ce:	f003 0320 	and.w	r3, r3, #32
 80084d2:	2b20      	cmp	r3, #32
 80084d4:	d1cf      	bne.n	8008476 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80084d6:	2300      	movs	r3, #0
}
 80084d8:	4618      	mov	r0, r3
 80084da:	3710      	adds	r7, #16
 80084dc:	46bd      	mov	sp, r7
 80084de:	bd80      	pop	{r7, pc}

080084e0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80084e0:	b580      	push	{r7, lr}
 80084e2:	b08a      	sub	sp, #40	; 0x28
 80084e4:	af00      	add	r7, sp, #0
 80084e6:	60f8      	str	r0, [r7, #12]
 80084e8:	60b9      	str	r1, [r7, #8]
 80084ea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80084ec:	2300      	movs	r3, #0
 80084ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	699b      	ldr	r3, [r3, #24]
 80084f8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80084fa:	2300      	movs	r3, #0
 80084fc:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8008502:	69bb      	ldr	r3, [r7, #24]
 8008504:	f003 0310 	and.w	r3, r3, #16
 8008508:	2b00      	cmp	r3, #0
 800850a:	d075      	beq.n	80085f8 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	2210      	movs	r2, #16
 8008512:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8008514:	e056      	b.n	80085c4 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8008516:	68bb      	ldr	r3, [r7, #8]
 8008518:	f1b3 3fff 	cmp.w	r3, #4294967295
 800851c:	d052      	beq.n	80085c4 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800851e:	f7fd f961 	bl	80057e4 <HAL_GetTick>
 8008522:	4602      	mov	r2, r0
 8008524:	69fb      	ldr	r3, [r7, #28]
 8008526:	1ad3      	subs	r3, r2, r3
 8008528:	68ba      	ldr	r2, [r7, #8]
 800852a:	429a      	cmp	r2, r3
 800852c:	d302      	bcc.n	8008534 <I2C_IsErrorOccurred+0x54>
 800852e:	68bb      	ldr	r3, [r7, #8]
 8008530:	2b00      	cmp	r3, #0
 8008532:	d147      	bne.n	80085c4 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	685b      	ldr	r3, [r3, #4]
 800853a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800853e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008546:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	699b      	ldr	r3, [r3, #24]
 800854e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008552:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008556:	d12e      	bne.n	80085b6 <I2C_IsErrorOccurred+0xd6>
 8008558:	697b      	ldr	r3, [r7, #20]
 800855a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800855e:	d02a      	beq.n	80085b6 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8008560:	7cfb      	ldrb	r3, [r7, #19]
 8008562:	2b20      	cmp	r3, #32
 8008564:	d027      	beq.n	80085b6 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	685a      	ldr	r2, [r3, #4]
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008574:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8008576:	f7fd f935 	bl	80057e4 <HAL_GetTick>
 800857a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800857c:	e01b      	b.n	80085b6 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800857e:	f7fd f931 	bl	80057e4 <HAL_GetTick>
 8008582:	4602      	mov	r2, r0
 8008584:	69fb      	ldr	r3, [r7, #28]
 8008586:	1ad3      	subs	r3, r2, r3
 8008588:	2b19      	cmp	r3, #25
 800858a:	d914      	bls.n	80085b6 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008590:	f043 0220 	orr.w	r2, r3, #32
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	2220      	movs	r2, #32
 800859c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	2200      	movs	r2, #0
 80085a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	2200      	movs	r2, #0
 80085ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 80085b0:	2301      	movs	r3, #1
 80085b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	699b      	ldr	r3, [r3, #24]
 80085bc:	f003 0320 	and.w	r3, r3, #32
 80085c0:	2b20      	cmp	r3, #32
 80085c2:	d1dc      	bne.n	800857e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	699b      	ldr	r3, [r3, #24]
 80085ca:	f003 0320 	and.w	r3, r3, #32
 80085ce:	2b20      	cmp	r3, #32
 80085d0:	d003      	beq.n	80085da <I2C_IsErrorOccurred+0xfa>
 80085d2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d09d      	beq.n	8008516 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80085da:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d103      	bne.n	80085ea <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	2220      	movs	r2, #32
 80085e8:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80085ea:	6a3b      	ldr	r3, [r7, #32]
 80085ec:	f043 0304 	orr.w	r3, r3, #4
 80085f0:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80085f2:	2301      	movs	r3, #1
 80085f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	699b      	ldr	r3, [r3, #24]
 80085fe:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8008600:	69bb      	ldr	r3, [r7, #24]
 8008602:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008606:	2b00      	cmp	r3, #0
 8008608:	d00b      	beq.n	8008622 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800860a:	6a3b      	ldr	r3, [r7, #32]
 800860c:	f043 0301 	orr.w	r3, r3, #1
 8008610:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	f44f 7280 	mov.w	r2, #256	; 0x100
 800861a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800861c:	2301      	movs	r3, #1
 800861e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8008622:	69bb      	ldr	r3, [r7, #24]
 8008624:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008628:	2b00      	cmp	r3, #0
 800862a:	d00b      	beq.n	8008644 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800862c:	6a3b      	ldr	r3, [r7, #32]
 800862e:	f043 0308 	orr.w	r3, r3, #8
 8008632:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800863c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800863e:	2301      	movs	r3, #1
 8008640:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8008644:	69bb      	ldr	r3, [r7, #24]
 8008646:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800864a:	2b00      	cmp	r3, #0
 800864c:	d00b      	beq.n	8008666 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800864e:	6a3b      	ldr	r3, [r7, #32]
 8008650:	f043 0302 	orr.w	r3, r3, #2
 8008654:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800865e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008660:	2301      	movs	r3, #1
 8008662:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8008666:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800866a:	2b00      	cmp	r3, #0
 800866c:	d01c      	beq.n	80086a8 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800866e:	68f8      	ldr	r0, [r7, #12]
 8008670:	f7ff fe56 	bl	8008320 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	6859      	ldr	r1, [r3, #4]
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	681a      	ldr	r2, [r3, #0]
 800867e:	4b0d      	ldr	r3, [pc, #52]	; (80086b4 <I2C_IsErrorOccurred+0x1d4>)
 8008680:	400b      	ands	r3, r1
 8008682:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008688:	6a3b      	ldr	r3, [r7, #32]
 800868a:	431a      	orrs	r2, r3
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	2220      	movs	r2, #32
 8008694:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	2200      	movs	r2, #0
 800869c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	2200      	movs	r2, #0
 80086a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80086a8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80086ac:	4618      	mov	r0, r3
 80086ae:	3728      	adds	r7, #40	; 0x28
 80086b0:	46bd      	mov	sp, r7
 80086b2:	bd80      	pop	{r7, pc}
 80086b4:	fe00e800 	.word	0xfe00e800

080086b8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80086b8:	b480      	push	{r7}
 80086ba:	b087      	sub	sp, #28
 80086bc:	af00      	add	r7, sp, #0
 80086be:	60f8      	str	r0, [r7, #12]
 80086c0:	607b      	str	r3, [r7, #4]
 80086c2:	460b      	mov	r3, r1
 80086c4:	817b      	strh	r3, [r7, #10]
 80086c6:	4613      	mov	r3, r2
 80086c8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80086ca:	897b      	ldrh	r3, [r7, #10]
 80086cc:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80086d0:	7a7b      	ldrb	r3, [r7, #9]
 80086d2:	041b      	lsls	r3, r3, #16
 80086d4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80086d8:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80086de:	6a3b      	ldr	r3, [r7, #32]
 80086e0:	4313      	orrs	r3, r2
 80086e2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80086e6:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	685a      	ldr	r2, [r3, #4]
 80086ee:	6a3b      	ldr	r3, [r7, #32]
 80086f0:	0d5b      	lsrs	r3, r3, #21
 80086f2:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80086f6:	4b08      	ldr	r3, [pc, #32]	; (8008718 <I2C_TransferConfig+0x60>)
 80086f8:	430b      	orrs	r3, r1
 80086fa:	43db      	mvns	r3, r3
 80086fc:	ea02 0103 	and.w	r1, r2, r3
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	697a      	ldr	r2, [r7, #20]
 8008706:	430a      	orrs	r2, r1
 8008708:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800870a:	bf00      	nop
 800870c:	371c      	adds	r7, #28
 800870e:	46bd      	mov	sp, r7
 8008710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008714:	4770      	bx	lr
 8008716:	bf00      	nop
 8008718:	03ff63ff 	.word	0x03ff63ff

0800871c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800871c:	b480      	push	{r7}
 800871e:	b083      	sub	sp, #12
 8008720:	af00      	add	r7, sp, #0
 8008722:	6078      	str	r0, [r7, #4]
 8008724:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800872c:	b2db      	uxtb	r3, r3
 800872e:	2b20      	cmp	r3, #32
 8008730:	d138      	bne.n	80087a4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008738:	2b01      	cmp	r3, #1
 800873a:	d101      	bne.n	8008740 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800873c:	2302      	movs	r3, #2
 800873e:	e032      	b.n	80087a6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	2201      	movs	r2, #1
 8008744:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	2224      	movs	r2, #36	; 0x24
 800874c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	681a      	ldr	r2, [r3, #0]
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	f022 0201 	bic.w	r2, r2, #1
 800875e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	681a      	ldr	r2, [r3, #0]
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800876e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	6819      	ldr	r1, [r3, #0]
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	683a      	ldr	r2, [r7, #0]
 800877c:	430a      	orrs	r2, r1
 800877e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	681a      	ldr	r2, [r3, #0]
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	f042 0201 	orr.w	r2, r2, #1
 800878e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	2220      	movs	r2, #32
 8008794:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	2200      	movs	r2, #0
 800879c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80087a0:	2300      	movs	r3, #0
 80087a2:	e000      	b.n	80087a6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80087a4:	2302      	movs	r3, #2
  }
}
 80087a6:	4618      	mov	r0, r3
 80087a8:	370c      	adds	r7, #12
 80087aa:	46bd      	mov	sp, r7
 80087ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087b0:	4770      	bx	lr

080087b2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80087b2:	b480      	push	{r7}
 80087b4:	b085      	sub	sp, #20
 80087b6:	af00      	add	r7, sp, #0
 80087b8:	6078      	str	r0, [r7, #4]
 80087ba:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80087c2:	b2db      	uxtb	r3, r3
 80087c4:	2b20      	cmp	r3, #32
 80087c6:	d139      	bne.n	800883c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80087ce:	2b01      	cmp	r3, #1
 80087d0:	d101      	bne.n	80087d6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80087d2:	2302      	movs	r3, #2
 80087d4:	e033      	b.n	800883e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	2201      	movs	r2, #1
 80087da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	2224      	movs	r2, #36	; 0x24
 80087e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	681a      	ldr	r2, [r3, #0]
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	f022 0201 	bic.w	r2, r2, #1
 80087f4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8008804:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8008806:	683b      	ldr	r3, [r7, #0]
 8008808:	021b      	lsls	r3, r3, #8
 800880a:	68fa      	ldr	r2, [r7, #12]
 800880c:	4313      	orrs	r3, r2
 800880e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	68fa      	ldr	r2, [r7, #12]
 8008816:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	681a      	ldr	r2, [r3, #0]
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	f042 0201 	orr.w	r2, r2, #1
 8008826:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	2220      	movs	r2, #32
 800882c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	2200      	movs	r2, #0
 8008834:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008838:	2300      	movs	r3, #0
 800883a:	e000      	b.n	800883e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800883c:	2302      	movs	r3, #2
  }
}
 800883e:	4618      	mov	r0, r3
 8008840:	3714      	adds	r7, #20
 8008842:	46bd      	mov	sp, r7
 8008844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008848:	4770      	bx	lr
	...

0800884c <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 800884c:	b480      	push	{r7}
 800884e:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 8008850:	4b05      	ldr	r3, [pc, #20]	; (8008868 <HAL_ICACHE_Enable+0x1c>)
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	4a04      	ldr	r2, [pc, #16]	; (8008868 <HAL_ICACHE_Enable+0x1c>)
 8008856:	f043 0301 	orr.w	r3, r3, #1
 800885a:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800885c:	2300      	movs	r3, #0
}
 800885e:	4618      	mov	r0, r3
 8008860:	46bd      	mov	sp, r7
 8008862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008866:	4770      	bx	lr
 8008868:	40030400 	.word	0x40030400

0800886c <LL_DLYB_Enable>:
  * @param  DLYBx DLYB Instance
  * @retval None
  */

__STATIC_INLINE void LL_DLYB_Enable(DLYB_TypeDef *DLYBx)
{
 800886c:	b480      	push	{r7}
 800886e:	b083      	sub	sp, #12
 8008870:	af00      	add	r7, sp, #0
 8008872:	6078      	str	r0, [r7, #4]
  SET_BIT(DLYBx->CR, DLYB_CR_DEN);
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	f043 0201 	orr.w	r2, r3, #1
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	601a      	str	r2, [r3, #0]
}
 8008880:	bf00      	nop
 8008882:	370c      	adds	r7, #12
 8008884:	46bd      	mov	sp, r7
 8008886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800888a:	4770      	bx	lr

0800888c <LL_DLYB_Disable>:
  * @param  DLYBx DLYB Instance.
  * @retval None
  */

__STATIC_INLINE void LL_DLYB_Disable(DLYB_TypeDef *DLYBx)
{
 800888c:	b480      	push	{r7}
 800888e:	b083      	sub	sp, #12
 8008890:	af00      	add	r7, sp, #0
 8008892:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(DLYBx->CR, DLYB_CR_DEN);
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	f023 0201 	bic.w	r2, r3, #1
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	601a      	str	r2, [r3, #0]
}
 80088a0:	bf00      	nop
 80088a2:	370c      	adds	r7, #12
 80088a4:	46bd      	mov	sp, r7
 80088a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088aa:	4770      	bx	lr

080088ac <HAL_OSPI_Init>:
  *         in the OSPI_InitTypeDef and initialize the associated handle.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Init(OSPI_HandleTypeDef *hospi)
{
 80088ac:	b580      	push	{r7, lr}
 80088ae:	b086      	sub	sp, #24
 80088b0:	af02      	add	r7, sp, #8
 80088b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80088b4:	2300      	movs	r3, #0
 80088b6:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 80088b8:	f7fc ff94 	bl	80057e4 <HAL_GetTick>
 80088bc:	60b8      	str	r0, [r7, #8]

  /* Check the OSPI handle allocation */
  if (hospi == NULL)
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d102      	bne.n	80088ca <HAL_OSPI_Init+0x1e>
  {
    status = HAL_ERROR;
 80088c4:	2301      	movs	r3, #1
 80088c6:	73fb      	strb	r3, [r7, #15]
 80088c8:	e0a5      	b.n	8008a16 <HAL_OSPI_Init+0x16a>
    assert_param(IS_OSPI_CS_BOUNDARY(hospi->Init.ChipSelectBoundary));
    assert_param(IS_OSPI_DLYBYP(hospi->Init.DelayBlockBypass));
    assert_param(IS_OSPI_MAXTRAN(hospi->Init.MaxTran));

    /* Initialize error code */
    hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	2200      	movs	r2, #0
 80088ce:	655a      	str	r2, [r3, #84]	; 0x54

    /* Check if the state is the reset state */
    if (hospi->State == HAL_OSPI_STATE_RESET)
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	f040 809e 	bne.w	8008a16 <HAL_OSPI_Init+0x16a>

      /* Init the low level hardware */
      hospi->MspInitCallback(hospi);
#else
      /* Initialization of the low level hardware */
      HAL_OSPI_MspInit(hospi);
 80088da:	6878      	ldr	r0, [r7, #4]
 80088dc:	f7fc fbb0 	bl	8005040 <HAL_OSPI_MspInit>
#endif /* defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */

      /* Configure the default timeout for the OSPI memory access */
      (void)HAL_OSPI_SetTimeout(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE);
 80088e0:	f241 3188 	movw	r1, #5000	; 0x1388
 80088e4:	6878      	ldr	r0, [r7, #4]
 80088e6:	f000 f9ec 	bl	8008cc2 <HAL_OSPI_SetTimeout>

      /* Configure memory type, device size, chip select high time, delay block bypass,
         free running clock, clock mode */
      MODIFY_REG(hospi->Instance->DCR1,
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	689a      	ldr	r2, [r3, #8]
 80088f0:	4b4b      	ldr	r3, [pc, #300]	; (8008a20 <HAL_OSPI_Init+0x174>)
 80088f2:	4013      	ands	r3, r2
 80088f4:	687a      	ldr	r2, [r7, #4]
 80088f6:	68d1      	ldr	r1, [r2, #12]
 80088f8:	687a      	ldr	r2, [r7, #4]
 80088fa:	6912      	ldr	r2, [r2, #16]
 80088fc:	3a01      	subs	r2, #1
 80088fe:	0412      	lsls	r2, r2, #16
 8008900:	4311      	orrs	r1, r2
 8008902:	687a      	ldr	r2, [r7, #4]
 8008904:	6952      	ldr	r2, [r2, #20]
 8008906:	3a01      	subs	r2, #1
 8008908:	0212      	lsls	r2, r2, #8
 800890a:	4311      	orrs	r1, r2
 800890c:	687a      	ldr	r2, [r7, #4]
 800890e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8008910:	4311      	orrs	r1, r2
 8008912:	687a      	ldr	r2, [r7, #4]
 8008914:	69d2      	ldr	r2, [r2, #28]
 8008916:	4311      	orrs	r1, r2
 8008918:	687a      	ldr	r2, [r7, #4]
 800891a:	6812      	ldr	r2, [r2, #0]
 800891c:	430b      	orrs	r3, r1
 800891e:	6093      	str	r3, [r2, #8]
                 (hospi->Init.MemoryType | ((hospi->Init.DeviceSize - 1U) << OCTOSPI_DCR1_DEVSIZE_Pos) |
                  ((hospi->Init.ChipSelectHighTime - 1U) << OCTOSPI_DCR1_CSHT_Pos) |
                  hospi->Init.DelayBlockBypass | hospi->Init.ClockMode));

      /* Configure wrap size */
      MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_WRAPSIZE, hospi->Init.WrapSize);
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	68db      	ldr	r3, [r3, #12]
 8008926:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	6a1a      	ldr	r2, [r3, #32]
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	430a      	orrs	r2, r1
 8008934:	60da      	str	r2, [r3, #12]

      /* Configure chip select boundary and maximum transfer */
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800893a:	0419      	lsls	r1, r3, #16
                               (hospi->Init.MaxTran << OCTOSPI_DCR3_MAXTRAN_Pos));
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	430a      	orrs	r2, r1
 8008946:	611a      	str	r2, [r3, #16]

      /* Configure refresh */
      hospi->Instance->DCR4 = hospi->Init.Refresh;
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	687a      	ldr	r2, [r7, #4]
 800894e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8008950:	615a      	str	r2, [r3, #20]

      /* Configure FIFO threshold */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FTHRES, ((hospi->Init.FifoThreshold - 1U) << OCTOSPI_CR_FTHRES_Pos));
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	685b      	ldr	r3, [r3, #4]
 8008960:	3b01      	subs	r3, #1
 8008962:	021a      	lsls	r2, r3, #8
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	430a      	orrs	r2, r1
 800896a:	601a      	str	r2, [r3, #0]

      /* Wait till busy flag is reset */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008970:	9300      	str	r3, [sp, #0]
 8008972:	68bb      	ldr	r3, [r7, #8]
 8008974:	2200      	movs	r2, #0
 8008976:	2120      	movs	r1, #32
 8008978:	6878      	ldr	r0, [r7, #4]
 800897a:	f000 fea3 	bl	80096c4 <OSPI_WaitFlagStateUntilTimeout>
 800897e:	4603      	mov	r3, r0
 8008980:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8008982:	7bfb      	ldrb	r3, [r7, #15]
 8008984:	2b00      	cmp	r3, #0
 8008986:	d146      	bne.n	8008a16 <HAL_OSPI_Init+0x16a>
      {
        /* Configure clock prescaler */
        MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_PRESCALER,
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	68db      	ldr	r3, [r3, #12]
 800898e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008996:	1e5a      	subs	r2, r3, #1
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	430a      	orrs	r2, r1
 800899e:	60da      	str	r2, [r3, #12]
                   ((hospi->Init.ClockPrescaler - 1U) << OCTOSPI_DCR2_PRESCALER_Pos));

        /* Configure Dual Quad mode */
        MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_DMM, hospi->Init.DualQuad);
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	f023 0140 	bic.w	r1, r3, #64	; 0x40
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	689a      	ldr	r2, [r3, #8]
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	430a      	orrs	r2, r1
 80089b4:	601a      	str	r2, [r3, #0]

        /* Configure sample shifting and delay hold quarter cycle */
        MODIFY_REG(hospi->Instance->TCR, (OCTOSPI_TCR_SSHIFT | OCTOSPI_TCR_DHQC),
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80089be:	f023 41a0 	bic.w	r1, r3, #1342177280	; 0x50000000
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089ca:	431a      	orrs	r2, r3
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	430a      	orrs	r2, r1
 80089d2:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
                   (hospi->Init.SampleShifting | hospi->Init.DelayHoldQuarterCycle));

        /* Enable OctoSPI */
        __HAL_OSPI_ENABLE(hospi);
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	681a      	ldr	r2, [r3, #0]
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	f042 0201 	orr.w	r2, r2, #1
 80089e4:	601a      	str	r2, [r3, #0]

        /* Enable free running clock if needed : must be done after OSPI enable */
        if (hospi->Init.FreeRunningClock == HAL_OSPI_FREERUNCLK_ENABLE)
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	699b      	ldr	r3, [r3, #24]
 80089ea:	2b02      	cmp	r3, #2
 80089ec:	d107      	bne.n	80089fe <HAL_OSPI_Init+0x152>
        {
          SET_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	689a      	ldr	r2, [r3, #8]
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	f042 0202 	orr.w	r2, r2, #2
 80089fc:	609a      	str	r2, [r3, #8]
        }

        /* Initialize the OSPI state */
        if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	68db      	ldr	r3, [r3, #12]
 8008a02:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008a06:	d103      	bne.n	8008a10 <HAL_OSPI_Init+0x164>
        {
          hospi->State = HAL_OSPI_STATE_HYPERBUS_INIT;
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	2201      	movs	r2, #1
 8008a0c:	651a      	str	r2, [r3, #80]	; 0x50
 8008a0e:	e002      	b.n	8008a16 <HAL_OSPI_Init+0x16a>
        }
        else
        {
          hospi->State = HAL_OSPI_STATE_READY;
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	2202      	movs	r2, #2
 8008a14:	651a      	str	r2, [r3, #80]	; 0x50
      }
    }
  }

  /* Return function status */
  return status;
 8008a16:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a18:	4618      	mov	r0, r3
 8008a1a:	3710      	adds	r7, #16
 8008a1c:	46bd      	mov	sp, r7
 8008a1e:	bd80      	pop	{r7, pc}
 8008a20:	f8e0c0f4 	.word	0xf8e0c0f4

08008a24 <HAL_OSPI_Command>:
  * @param  cmd     : structure that contains the command configuration information
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Command(OSPI_HandleTypeDef *hospi, OSPI_RegularCmdTypeDef *cmd, uint32_t Timeout)
{
 8008a24:	b580      	push	{r7, lr}
 8008a26:	b08a      	sub	sp, #40	; 0x28
 8008a28:	af02      	add	r7, sp, #8
 8008a2a:	60f8      	str	r0, [r7, #12]
 8008a2c:	60b9      	str	r1, [r7, #8]
 8008a2e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t state;
  uint32_t tickstart = HAL_GetTick();
 8008a30:	f7fc fed8 	bl	80057e4 <HAL_GetTick>
 8008a34:	61b8      	str	r0, [r7, #24]
    assert_param(IS_OSPI_ALT_BYTES_SIZE(cmd->AlternateBytesSize));
    assert_param(IS_OSPI_ALT_BYTES_DTR_MODE(cmd->AlternateBytesDtrMode));
  }

  assert_param(IS_OSPI_DATA_MODE(cmd->DataMode));
  if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 8008a36:	68bb      	ldr	r3, [r7, #8]
 8008a38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a3a:	2b00      	cmp	r3, #0

  assert_param(IS_OSPI_DQS_MODE(cmd->DQSMode));
  assert_param(IS_OSPI_SIOO_MODE(cmd->SIOOMode));

  /* Check the state of the driver */
  state = hospi->State;
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008a40:	617b      	str	r3, [r7, #20]
  if (((state == HAL_OSPI_STATE_READY)         && (hospi->Init.MemoryType != HAL_OSPI_MEMTYPE_HYPERBUS)) ||
 8008a42:	697b      	ldr	r3, [r7, #20]
 8008a44:	2b02      	cmp	r3, #2
 8008a46:	d104      	bne.n	8008a52 <HAL_OSPI_Command+0x2e>
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	68db      	ldr	r3, [r3, #12]
 8008a4c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008a50:	d115      	bne.n	8008a7e <HAL_OSPI_Command+0x5a>
 8008a52:	697b      	ldr	r3, [r7, #20]
 8008a54:	2b14      	cmp	r3, #20
 8008a56:	d107      	bne.n	8008a68 <HAL_OSPI_Command+0x44>
      ((state == HAL_OSPI_STATE_READ_CMD_CFG)  && ((cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG)
 8008a58:	68bb      	ldr	r3, [r7, #8]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	2b02      	cmp	r3, #2
 8008a5e:	d00e      	beq.n	8008a7e <HAL_OSPI_Command+0x5a>
                                                   || (cmd->OperationType == HAL_OSPI_OPTYPE_WRAP_CFG))) ||
 8008a60:	68bb      	ldr	r3, [r7, #8]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	2b03      	cmp	r3, #3
 8008a66:	d00a      	beq.n	8008a7e <HAL_OSPI_Command+0x5a>
 8008a68:	697b      	ldr	r3, [r7, #20]
 8008a6a:	2b24      	cmp	r3, #36	; 0x24
 8008a6c:	d15b      	bne.n	8008b26 <HAL_OSPI_Command+0x102>
      ((state == HAL_OSPI_STATE_WRITE_CMD_CFG) && ((cmd->OperationType == HAL_OSPI_OPTYPE_READ_CFG)  ||
 8008a6e:	68bb      	ldr	r3, [r7, #8]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	2b01      	cmp	r3, #1
 8008a74:	d003      	beq.n	8008a7e <HAL_OSPI_Command+0x5a>
                                                   (cmd->OperationType == HAL_OSPI_OPTYPE_WRAP_CFG))))
 8008a76:	68bb      	ldr	r3, [r7, #8]
 8008a78:	681b      	ldr	r3, [r3, #0]
      ((state == HAL_OSPI_STATE_WRITE_CMD_CFG) && ((cmd->OperationType == HAL_OSPI_OPTYPE_READ_CFG)  ||
 8008a7a:	2b03      	cmp	r3, #3
 8008a7c:	d153      	bne.n	8008b26 <HAL_OSPI_Command+0x102>
  {
    /* Wait till busy flag is reset */
    status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	9300      	str	r3, [sp, #0]
 8008a82:	69bb      	ldr	r3, [r7, #24]
 8008a84:	2200      	movs	r2, #0
 8008a86:	2120      	movs	r1, #32
 8008a88:	68f8      	ldr	r0, [r7, #12]
 8008a8a:	f000 fe1b 	bl	80096c4 <OSPI_WaitFlagStateUntilTimeout>
 8008a8e:	4603      	mov	r3, r0
 8008a90:	77fb      	strb	r3, [r7, #31]

    if (status == HAL_OK)
 8008a92:	7ffb      	ldrb	r3, [r7, #31]
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	d14c      	bne.n	8008b32 <HAL_OSPI_Command+0x10e>
    {
      /* Initialize error code */
      hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	2200      	movs	r2, #0
 8008a9c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the registers */
      status = OSPI_ConfigCmd(hospi, cmd);
 8008a9e:	68b9      	ldr	r1, [r7, #8]
 8008aa0:	68f8      	ldr	r0, [r7, #12]
 8008aa2:	f000 fe4f 	bl	8009744 <OSPI_ConfigCmd>
 8008aa6:	4603      	mov	r3, r0
 8008aa8:	77fb      	strb	r3, [r7, #31]

      if (status == HAL_OK)
 8008aaa:	7ffb      	ldrb	r3, [r7, #31]
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d140      	bne.n	8008b32 <HAL_OSPI_Command+0x10e>
      {
        if (cmd->DataMode == HAL_OSPI_DATA_NONE)
 8008ab0:	68bb      	ldr	r3, [r7, #8]
 8008ab2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d10e      	bne.n	8008ad6 <HAL_OSPI_Command+0xb2>
        {
          /* When there is no data phase, the transfer start as soon as the configuration is done
             so wait until TC flag is set to go back in idle state */
          status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, Timeout);
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	9300      	str	r3, [sp, #0]
 8008abc:	69bb      	ldr	r3, [r7, #24]
 8008abe:	2201      	movs	r2, #1
 8008ac0:	2102      	movs	r1, #2
 8008ac2:	68f8      	ldr	r0, [r7, #12]
 8008ac4:	f000 fdfe 	bl	80096c4 <OSPI_WaitFlagStateUntilTimeout>
 8008ac8:	4603      	mov	r3, r0
 8008aca:	77fb      	strb	r3, [r7, #31]

          __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	2202      	movs	r2, #2
 8008ad2:	625a      	str	r2, [r3, #36]	; 0x24
    if (status == HAL_OK)
 8008ad4:	e02d      	b.n	8008b32 <HAL_OSPI_Command+0x10e>
        }
        else
        {
          /* Update the state */
          if (cmd->OperationType == HAL_OSPI_OPTYPE_COMMON_CFG)
 8008ad6:	68bb      	ldr	r3, [r7, #8]
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d103      	bne.n	8008ae6 <HAL_OSPI_Command+0xc2>
          {
            hospi->State = HAL_OSPI_STATE_CMD_CFG;
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	2204      	movs	r2, #4
 8008ae2:	651a      	str	r2, [r3, #80]	; 0x50
    if (status == HAL_OK)
 8008ae4:	e025      	b.n	8008b32 <HAL_OSPI_Command+0x10e>
          }
          else if (cmd->OperationType == HAL_OSPI_OPTYPE_READ_CFG)
 8008ae6:	68bb      	ldr	r3, [r7, #8]
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	2b01      	cmp	r3, #1
 8008aec:	d10b      	bne.n	8008b06 <HAL_OSPI_Command+0xe2>
          {
            if (hospi->State == HAL_OSPI_STATE_WRITE_CMD_CFG)
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008af2:	2b24      	cmp	r3, #36	; 0x24
 8008af4:	d103      	bne.n	8008afe <HAL_OSPI_Command+0xda>
            {
              hospi->State = HAL_OSPI_STATE_CMD_CFG;
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	2204      	movs	r2, #4
 8008afa:	651a      	str	r2, [r3, #80]	; 0x50
    if (status == HAL_OK)
 8008afc:	e019      	b.n	8008b32 <HAL_OSPI_Command+0x10e>
            }
            else
            {
              hospi->State = HAL_OSPI_STATE_READ_CMD_CFG;
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	2214      	movs	r2, #20
 8008b02:	651a      	str	r2, [r3, #80]	; 0x50
    if (status == HAL_OK)
 8008b04:	e015      	b.n	8008b32 <HAL_OSPI_Command+0x10e>
            }
          }
          else if (cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG)
 8008b06:	68bb      	ldr	r3, [r7, #8]
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	2b02      	cmp	r3, #2
 8008b0c:	d111      	bne.n	8008b32 <HAL_OSPI_Command+0x10e>
          {
            if (hospi->State == HAL_OSPI_STATE_READ_CMD_CFG)
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008b12:	2b14      	cmp	r3, #20
 8008b14:	d103      	bne.n	8008b1e <HAL_OSPI_Command+0xfa>
            {
              hospi->State = HAL_OSPI_STATE_CMD_CFG;
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	2204      	movs	r2, #4
 8008b1a:	651a      	str	r2, [r3, #80]	; 0x50
    if (status == HAL_OK)
 8008b1c:	e009      	b.n	8008b32 <HAL_OSPI_Command+0x10e>
            }
            else
            {
              hospi->State = HAL_OSPI_STATE_WRITE_CMD_CFG;
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	2224      	movs	r2, #36	; 0x24
 8008b22:	651a      	str	r2, [r3, #80]	; 0x50
    if (status == HAL_OK)
 8008b24:	e005      	b.n	8008b32 <HAL_OSPI_Command+0x10e>
      }
    }
  }
  else
  {
    status = HAL_ERROR;
 8008b26:	2301      	movs	r3, #1
 8008b28:	77fb      	strb	r3, [r7, #31]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	2210      	movs	r2, #16
 8008b2e:	655a      	str	r2, [r3, #84]	; 0x54
 8008b30:	e000      	b.n	8008b34 <HAL_OSPI_Command+0x110>
    if (status == HAL_OK)
 8008b32:	bf00      	nop
  }

  /* Return function status */
  return status;
 8008b34:	7ffb      	ldrb	r3, [r7, #31]
}
 8008b36:	4618      	mov	r0, r3
 8008b38:	3720      	adds	r7, #32
 8008b3a:	46bd      	mov	sp, r7
 8008b3c:	bd80      	pop	{r7, pc}

08008b3e <HAL_OSPI_MemoryMapped>:
  * @param  cfg   : structure that contains the memory mapped configuration information.
  * @note   This function is used only in Memory mapped Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_MemoryMapped(OSPI_HandleTypeDef *hospi, OSPI_MemoryMappedTypeDef *cfg)
{
 8008b3e:	b580      	push	{r7, lr}
 8008b40:	b086      	sub	sp, #24
 8008b42:	af02      	add	r7, sp, #8
 8008b44:	6078      	str	r0, [r7, #4]
 8008b46:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8008b48:	f7fc fe4c 	bl	80057e4 <HAL_GetTick>
 8008b4c:	60b8      	str	r0, [r7, #8]

  /* Check the parameters of the memory-mapped configuration structure */
  assert_param(IS_OSPI_TIMEOUT_ACTIVATION(cfg->TimeOutActivation));

  /* Check the state */
  if (hospi->State == HAL_OSPI_STATE_CMD_CFG)
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008b52:	2b04      	cmp	r3, #4
 8008b54:	d136      	bne.n	8008bc4 <HAL_OSPI_MemoryMapped+0x86>
  {
    /* Wait till busy flag is reset */
    status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008b5a:	9300      	str	r3, [sp, #0]
 8008b5c:	68bb      	ldr	r3, [r7, #8]
 8008b5e:	2200      	movs	r2, #0
 8008b60:	2120      	movs	r1, #32
 8008b62:	6878      	ldr	r0, [r7, #4]
 8008b64:	f000 fdae 	bl	80096c4 <OSPI_WaitFlagStateUntilTimeout>
 8008b68:	4603      	mov	r3, r0
 8008b6a:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8008b6c:	7bfb      	ldrb	r3, [r7, #15]
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d12d      	bne.n	8008bce <HAL_OSPI_MemoryMapped+0x90>
    {
      /* Update state */
      hospi->State = HAL_OSPI_STATE_BUSY_MEM_MAPPED;
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	2288      	movs	r2, #136	; 0x88
 8008b76:	651a      	str	r2, [r3, #80]	; 0x50

      if (cfg->TimeOutActivation == HAL_OSPI_TIMEOUT_COUNTER_ENABLE)
 8008b78:	683b      	ldr	r3, [r7, #0]
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	2b08      	cmp	r3, #8
 8008b7e:	d111      	bne.n	8008ba4 <HAL_OSPI_MemoryMapped+0x66>
      {
        assert_param(IS_OSPI_TIMEOUT_PERIOD(cfg->TimeOutPeriod));

        /* Configure register */
        WRITE_REG(hospi->Instance->LPTR, cfg->TimeOutPeriod);
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	683a      	ldr	r2, [r7, #0]
 8008b86:	6852      	ldr	r2, [r2, #4]
 8008b88:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130

        /* Clear flags related to interrupt */
        __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TO);
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	2210      	movs	r2, #16
 8008b92:	625a      	str	r2, [r3, #36]	; 0x24

        /* Enable the timeout interrupt */
        __HAL_OSPI_ENABLE_IT(hospi, HAL_OSPI_IT_TO);
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	681a      	ldr	r2, [r3, #0]
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8008ba2:	601a      	str	r2, [r3, #0]
      }

      /* Configure CR register with functional mode as memory-mapped */
      MODIFY_REG(hospi->Instance->CR, (OCTOSPI_CR_TCEN | OCTOSPI_CR_FMODE),
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8008bae:	f023 0308 	bic.w	r3, r3, #8
 8008bb2:	683a      	ldr	r2, [r7, #0]
 8008bb4:	6812      	ldr	r2, [r2, #0]
 8008bb6:	431a      	orrs	r2, r3
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 8008bc0:	601a      	str	r2, [r3, #0]
 8008bc2:	e004      	b.n	8008bce <HAL_OSPI_MemoryMapped+0x90>
                 (cfg->TimeOutActivation | OSPI_FUNCTIONAL_MODE_MEMORY_MAPPED));
    }
  }
  else
  {
    status = HAL_ERROR;
 8008bc4:	2301      	movs	r3, #1
 8008bc6:	73fb      	strb	r3, [r7, #15]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	2210      	movs	r2, #16
 8008bcc:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Return function status */
  return status;
 8008bce:	7bfb      	ldrb	r3, [r7, #15]
}
 8008bd0:	4618      	mov	r0, r3
 8008bd2:	3710      	adds	r7, #16
 8008bd4:	46bd      	mov	sp, r7
 8008bd6:	bd80      	pop	{r7, pc}

08008bd8 <HAL_OSPI_Abort>:
  * @brief  Abort the current transmission.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Abort(OSPI_HandleTypeDef *hospi)
{
 8008bd8:	b580      	push	{r7, lr}
 8008bda:	b088      	sub	sp, #32
 8008bdc:	af02      	add	r7, sp, #8
 8008bde:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008be0:	2300      	movs	r3, #0
 8008be2:	75fb      	strb	r3, [r7, #23]
  uint32_t state;
  uint32_t tickstart = HAL_GetTick();
 8008be4:	f7fc fdfe 	bl	80057e4 <HAL_GetTick>
 8008be8:	6138      	str	r0, [r7, #16]

  /* Check if the state is in one of the busy or configured states */
  state = hospi->State;
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008bee:	60fb      	str	r3, [r7, #12]
  if (((state & OSPI_BUSY_STATE_MASK) != 0U) || ((state & OSPI_CFG_STATE_MASK) != 0U))
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	f003 0308 	and.w	r3, r3, #8
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d104      	bne.n	8008c04 <HAL_OSPI_Abort+0x2c>
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	f003 0304 	and.w	r3, r3, #4
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d052      	beq.n	8008caa <HAL_OSPI_Abort+0xd2>
  {
    /* Check if the DMA is enabled */
    if ((hospi->Instance->CR & OCTOSPI_CR_DMAEN) != 0U)
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	f003 0304 	and.w	r3, r3, #4
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d014      	beq.n	8008c3c <HAL_OSPI_Abort+0x64>
    {
      /* Disable the DMA transfer on the OctoSPI side */
      CLEAR_BIT(hospi->Instance->CR, OCTOSPI_CR_DMAEN);
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	681a      	ldr	r2, [r3, #0]
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	f022 0204 	bic.w	r2, r2, #4
 8008c20:	601a      	str	r2, [r3, #0]

      /* Disable the DMA transfer on the DMA side */
      status = HAL_DMA_Abort(hospi->hdma);
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008c26:	4618      	mov	r0, r3
 8008c28:	f7fd fb7b 	bl	8006322 <HAL_DMA_Abort>
 8008c2c:	4603      	mov	r3, r0
 8008c2e:	75fb      	strb	r3, [r7, #23]
      if (status != HAL_OK)
 8008c30:	7dfb      	ldrb	r3, [r7, #23]
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d002      	beq.n	8008c3c <HAL_OSPI_Abort+0x64>
      {
        hospi->ErrorCode = HAL_OSPI_ERROR_DMA;
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	2204      	movs	r2, #4
 8008c3a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }

    if (__HAL_OSPI_GET_FLAG(hospi, HAL_OSPI_FLAG_BUSY) != RESET)
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	6a1b      	ldr	r3, [r3, #32]
 8008c42:	f003 0320 	and.w	r3, r3, #32
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d02b      	beq.n	8008ca2 <HAL_OSPI_Abort+0xca>
    {
      /* Perform an abort of the OctoSPI */
      SET_BIT(hospi->Instance->CR, OCTOSPI_CR_ABORT);
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	681a      	ldr	r2, [r3, #0]
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	f042 0202 	orr.w	r2, r2, #2
 8008c58:	601a      	str	r2, [r3, #0]

      /* Wait until the transfer complete flag is set to go back in idle state */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, hospi->Timeout);
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008c5e:	9300      	str	r3, [sp, #0]
 8008c60:	693b      	ldr	r3, [r7, #16]
 8008c62:	2201      	movs	r2, #1
 8008c64:	2102      	movs	r1, #2
 8008c66:	6878      	ldr	r0, [r7, #4]
 8008c68:	f000 fd2c 	bl	80096c4 <OSPI_WaitFlagStateUntilTimeout>
 8008c6c:	4603      	mov	r3, r0
 8008c6e:	75fb      	strb	r3, [r7, #23]

      if (status == HAL_OK)
 8008c70:	7dfb      	ldrb	r3, [r7, #23]
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d11f      	bne.n	8008cb6 <HAL_OSPI_Abort+0xde>
      {
        /* Clear transfer complete flag */
        __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	2202      	movs	r2, #2
 8008c7c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Wait until the busy flag is reset to go back in idle state */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008c82:	9300      	str	r3, [sp, #0]
 8008c84:	693b      	ldr	r3, [r7, #16]
 8008c86:	2200      	movs	r2, #0
 8008c88:	2120      	movs	r1, #32
 8008c8a:	6878      	ldr	r0, [r7, #4]
 8008c8c:	f000 fd1a 	bl	80096c4 <OSPI_WaitFlagStateUntilTimeout>
 8008c90:	4603      	mov	r3, r0
 8008c92:	75fb      	strb	r3, [r7, #23]

        if (status == HAL_OK)
 8008c94:	7dfb      	ldrb	r3, [r7, #23]
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d10d      	bne.n	8008cb6 <HAL_OSPI_Abort+0xde>
        {
          /* Update state */
          hospi->State = HAL_OSPI_STATE_READY;
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	2202      	movs	r2, #2
 8008c9e:	651a      	str	r2, [r3, #80]	; 0x50
    if (__HAL_OSPI_GET_FLAG(hospi, HAL_OSPI_FLAG_BUSY) != RESET)
 8008ca0:	e009      	b.n	8008cb6 <HAL_OSPI_Abort+0xde>
      }
    }
    else
    {
      /* Update state */
      hospi->State = HAL_OSPI_STATE_READY;
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	2202      	movs	r2, #2
 8008ca6:	651a      	str	r2, [r3, #80]	; 0x50
    if (__HAL_OSPI_GET_FLAG(hospi, HAL_OSPI_FLAG_BUSY) != RESET)
 8008ca8:	e005      	b.n	8008cb6 <HAL_OSPI_Abort+0xde>
    }
  }
  else
  {
    status = HAL_ERROR;
 8008caa:	2301      	movs	r3, #1
 8008cac:	75fb      	strb	r3, [r7, #23]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	2210      	movs	r2, #16
 8008cb2:	655a      	str	r2, [r3, #84]	; 0x54
 8008cb4:	e000      	b.n	8008cb8 <HAL_OSPI_Abort+0xe0>
    if (__HAL_OSPI_GET_FLAG(hospi, HAL_OSPI_FLAG_BUSY) != RESET)
 8008cb6:	bf00      	nop
  }

  /* Return function status */
  return status;
 8008cb8:	7dfb      	ldrb	r3, [r7, #23]
}
 8008cba:	4618      	mov	r0, r3
 8008cbc:	3718      	adds	r7, #24
 8008cbe:	46bd      	mov	sp, r7
 8008cc0:	bd80      	pop	{r7, pc}

08008cc2 <HAL_OSPI_SetTimeout>:
  * @param  hospi   : OSPI handle.
  * @param  Timeout : Timeout for the memory access.
  * @retval None
  */
HAL_StatusTypeDef HAL_OSPI_SetTimeout(OSPI_HandleTypeDef *hospi, uint32_t Timeout)
{
 8008cc2:	b480      	push	{r7}
 8008cc4:	b083      	sub	sp, #12
 8008cc6:	af00      	add	r7, sp, #0
 8008cc8:	6078      	str	r0, [r7, #4]
 8008cca:	6039      	str	r1, [r7, #0]
  hospi->Timeout = Timeout;
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	683a      	ldr	r2, [r7, #0]
 8008cd0:	659a      	str	r2, [r3, #88]	; 0x58
  return HAL_OK;
 8008cd2:	2300      	movs	r3, #0
}
 8008cd4:	4618      	mov	r0, r3
 8008cd6:	370c      	adds	r7, #12
 8008cd8:	46bd      	mov	sp, r7
 8008cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cde:	4770      	bx	lr

08008ce0 <HAL_OSPIM_Config>:
  * @param  cfg     : Configuration of the IO Manager for the instance
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPIM_Config(OSPI_HandleTypeDef *hospi, OSPIM_CfgTypeDef *cfg, uint32_t Timeout)
{
 8008ce0:	b580      	push	{r7, lr}
 8008ce2:	b094      	sub	sp, #80	; 0x50
 8008ce4:	af00      	add	r7, sp, #0
 8008ce6:	60f8      	str	r0, [r7, #12]
 8008ce8:	60b9      	str	r1, [r7, #8]
 8008cea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008cec:	2300      	movs	r3, #0
 8008cee:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  uint32_t instance;
  uint8_t index;
  uint8_t ospi_enabled = 0U;
 8008cf2:	2300      	movs	r3, #0
 8008cf4:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
  assert_param(IS_OSPIM_DQS_PORT(cfg->DQSPort));
  assert_param(IS_OSPIM_PORT(cfg->NCSPort));
  assert_param(IS_OSPIM_IO_PORT(cfg->IOLowPort));
  assert_param(IS_OSPIM_IO_PORT(cfg->IOHighPort));

  if (hospi->Instance == (OCTOSPI_TypeDef *)OCTOSPI1)
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	4a9d      	ldr	r2, [pc, #628]	; (8008f74 <HAL_OSPIM_Config+0x294>)
 8008cfe:	4293      	cmp	r3, r2
 8008d00:	d105      	bne.n	8008d0e <HAL_OSPIM_Config+0x2e>
  {
    instance = 0U;
 8008d02:	2300      	movs	r3, #0
 8008d04:	64bb      	str	r3, [r7, #72]	; 0x48
    other_instance = 1U;
 8008d06:	2301      	movs	r3, #1
 8008d08:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 8008d0c:	e004      	b.n	8008d18 <HAL_OSPIM_Config+0x38>
  }
  else
  {
    instance = 1U;
 8008d0e:	2301      	movs	r3, #1
 8008d10:	64bb      	str	r3, [r7, #72]	; 0x48
    other_instance = 0U;
 8008d12:	2300      	movs	r3, #0
 8008d14:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  }

  /**************** Get current configuration of the instances ****************/
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 8008d18:	2300      	movs	r3, #0
 8008d1a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8008d1e:	e01d      	b.n	8008d5c <HAL_OSPIM_Config+0x7c>
  {
    if (OSPIM_GetConfig(index + 1U, &(IOM_cfg[index])) != HAL_OK)
 8008d20:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8008d24:	3301      	adds	r3, #1
 8008d26:	b2d8      	uxtb	r0, r3
 8008d28:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 8008d2c:	f107 0114 	add.w	r1, r7, #20
 8008d30:	4613      	mov	r3, r2
 8008d32:	005b      	lsls	r3, r3, #1
 8008d34:	4413      	add	r3, r2
 8008d36:	00db      	lsls	r3, r3, #3
 8008d38:	440b      	add	r3, r1
 8008d3a:	4619      	mov	r1, r3
 8008d3c:	f000 fe7c 	bl	8009a38 <OSPIM_GetConfig>
 8008d40:	4603      	mov	r3, r0
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d005      	beq.n	8008d52 <HAL_OSPIM_Config+0x72>
    {
      status = HAL_ERROR;
 8008d46:	2301      	movs	r3, #1
 8008d48:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	2208      	movs	r2, #8
 8008d50:	655a      	str	r2, [r3, #84]	; 0x54
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 8008d52:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8008d56:	3301      	adds	r3, #1
 8008d58:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8008d5c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8008d60:	2b01      	cmp	r3, #1
 8008d62:	d9dd      	bls.n	8008d20 <HAL_OSPIM_Config+0x40>
    }
  }

  if (status == HAL_OK)
 8008d64:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	f040 849e 	bne.w	80096aa <HAL_OSPIM_Config+0x9ca>
  {
    /********** Disable both OctoSPI to configure OctoSPI IO Manager **********/
    if ((OCTOSPI1->CR & OCTOSPI_CR_EN) != 0U)
 8008d6e:	4b81      	ldr	r3, [pc, #516]	; (8008f74 <HAL_OSPIM_Config+0x294>)
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	f003 0301 	and.w	r3, r3, #1
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d00b      	beq.n	8008d92 <HAL_OSPIM_Config+0xb2>
    {
      CLEAR_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 8008d7a:	4b7e      	ldr	r3, [pc, #504]	; (8008f74 <HAL_OSPIM_Config+0x294>)
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	4a7d      	ldr	r2, [pc, #500]	; (8008f74 <HAL_OSPIM_Config+0x294>)
 8008d80:	f023 0301 	bic.w	r3, r3, #1
 8008d84:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x1U;
 8008d86:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8008d8a:	f043 0301 	orr.w	r3, r3, #1
 8008d8e:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    }
    if ((OCTOSPI2->CR & OCTOSPI_CR_EN) != 0U)
 8008d92:	4b79      	ldr	r3, [pc, #484]	; (8008f78 <HAL_OSPIM_Config+0x298>)
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	f003 0301 	and.w	r3, r3, #1
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d00b      	beq.n	8008db6 <HAL_OSPIM_Config+0xd6>
    {
      CLEAR_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 8008d9e:	4b76      	ldr	r3, [pc, #472]	; (8008f78 <HAL_OSPIM_Config+0x298>)
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	4a75      	ldr	r2, [pc, #468]	; (8008f78 <HAL_OSPIM_Config+0x298>)
 8008da4:	f023 0301 	bic.w	r3, r3, #1
 8008da8:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x2U;
 8008daa:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8008dae:	f043 0302 	orr.w	r3, r3, #2
 8008db2:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    }

    /***************** Deactivation of previous configuration *****************/
    CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].NCSPort - 1U)], OCTOSPIM_PCR_NCSEN);
 8008db6:	4971      	ldr	r1, [pc, #452]	; (8008f7c <HAL_OSPIM_Config+0x29c>)
 8008db8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008dba:	4613      	mov	r3, r2
 8008dbc:	005b      	lsls	r3, r3, #1
 8008dbe:	4413      	add	r3, r2
 8008dc0:	00db      	lsls	r3, r3, #3
 8008dc2:	3350      	adds	r3, #80	; 0x50
 8008dc4:	443b      	add	r3, r7
 8008dc6:	3b34      	subs	r3, #52	; 0x34
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	3b01      	subs	r3, #1
 8008dcc:	009b      	lsls	r3, r3, #2
 8008dce:	440b      	add	r3, r1
 8008dd0:	6859      	ldr	r1, [r3, #4]
 8008dd2:	486a      	ldr	r0, [pc, #424]	; (8008f7c <HAL_OSPIM_Config+0x29c>)
 8008dd4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008dd6:	4613      	mov	r3, r2
 8008dd8:	005b      	lsls	r3, r3, #1
 8008dda:	4413      	add	r3, r2
 8008ddc:	00db      	lsls	r3, r3, #3
 8008dde:	3350      	adds	r3, #80	; 0x50
 8008de0:	443b      	add	r3, r7
 8008de2:	3b34      	subs	r3, #52	; 0x34
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	3b01      	subs	r3, #1
 8008de8:	f421 7280 	bic.w	r2, r1, #256	; 0x100
 8008dec:	009b      	lsls	r3, r3, #2
 8008dee:	4403      	add	r3, r0
 8008df0:	605a      	str	r2, [r3, #4]
    if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) != 0U)
 8008df2:	4b62      	ldr	r3, [pc, #392]	; (8008f7c <HAL_OSPIM_Config+0x29c>)
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	f003 0301 	and.w	r3, r3, #1
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	f000 80c0 	beq.w	8008f80 <HAL_OSPIM_Config+0x2a0>
    {
      /* De-multiplexing should be performed */
      CLEAR_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
 8008e00:	4b5e      	ldr	r3, [pc, #376]	; (8008f7c <HAL_OSPIM_Config+0x29c>)
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	4a5d      	ldr	r2, [pc, #372]	; (8008f7c <HAL_OSPIM_Config+0x29c>)
 8008e06:	f023 0301 	bic.w	r3, r3, #1
 8008e0a:	6013      	str	r3, [r2, #0]

      if (other_instance == 1U)
 8008e0c:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8008e10:	2b01      	cmp	r3, #1
 8008e12:	f040 8162 	bne.w	80090da <HAL_OSPIM_Config+0x3fa>
      {
        SET_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKSRC);
 8008e16:	4959      	ldr	r1, [pc, #356]	; (8008f7c <HAL_OSPIM_Config+0x29c>)
 8008e18:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8008e1c:	4613      	mov	r3, r2
 8008e1e:	005b      	lsls	r3, r3, #1
 8008e20:	4413      	add	r3, r2
 8008e22:	00db      	lsls	r3, r3, #3
 8008e24:	3350      	adds	r3, #80	; 0x50
 8008e26:	443b      	add	r3, r7
 8008e28:	3b3c      	subs	r3, #60	; 0x3c
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	3b01      	subs	r3, #1
 8008e2e:	009b      	lsls	r3, r3, #2
 8008e30:	440b      	add	r3, r1
 8008e32:	6859      	ldr	r1, [r3, #4]
 8008e34:	4851      	ldr	r0, [pc, #324]	; (8008f7c <HAL_OSPIM_Config+0x29c>)
 8008e36:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8008e3a:	4613      	mov	r3, r2
 8008e3c:	005b      	lsls	r3, r3, #1
 8008e3e:	4413      	add	r3, r2
 8008e40:	00db      	lsls	r3, r3, #3
 8008e42:	3350      	adds	r3, #80	; 0x50
 8008e44:	443b      	add	r3, r7
 8008e46:	3b3c      	subs	r3, #60	; 0x3c
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	3b01      	subs	r3, #1
 8008e4c:	f041 0202 	orr.w	r2, r1, #2
 8008e50:	009b      	lsls	r3, r3, #2
 8008e52:	4403      	add	r3, r0
 8008e54:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 8008e56:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8008e5a:	4613      	mov	r3, r2
 8008e5c:	005b      	lsls	r3, r3, #1
 8008e5e:	4413      	add	r3, r2
 8008e60:	00db      	lsls	r3, r3, #3
 8008e62:	3350      	adds	r3, #80	; 0x50
 8008e64:	443b      	add	r3, r7
 8008e66:	3b38      	subs	r3, #56	; 0x38
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d01f      	beq.n	8008eae <HAL_OSPIM_Config+0x1ce>
        {
          SET_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSSRC);
 8008e6e:	4943      	ldr	r1, [pc, #268]	; (8008f7c <HAL_OSPIM_Config+0x29c>)
 8008e70:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8008e74:	4613      	mov	r3, r2
 8008e76:	005b      	lsls	r3, r3, #1
 8008e78:	4413      	add	r3, r2
 8008e7a:	00db      	lsls	r3, r3, #3
 8008e7c:	3350      	adds	r3, #80	; 0x50
 8008e7e:	443b      	add	r3, r7
 8008e80:	3b38      	subs	r3, #56	; 0x38
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	3b01      	subs	r3, #1
 8008e86:	009b      	lsls	r3, r3, #2
 8008e88:	440b      	add	r3, r1
 8008e8a:	6859      	ldr	r1, [r3, #4]
 8008e8c:	483b      	ldr	r0, [pc, #236]	; (8008f7c <HAL_OSPIM_Config+0x29c>)
 8008e8e:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8008e92:	4613      	mov	r3, r2
 8008e94:	005b      	lsls	r3, r3, #1
 8008e96:	4413      	add	r3, r2
 8008e98:	00db      	lsls	r3, r3, #3
 8008e9a:	3350      	adds	r3, #80	; 0x50
 8008e9c:	443b      	add	r3, r7
 8008e9e:	3b38      	subs	r3, #56	; 0x38
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	3b01      	subs	r3, #1
 8008ea4:	f041 0220 	orr.w	r2, r1, #32
 8008ea8:	009b      	lsls	r3, r3, #2
 8008eaa:	4403      	add	r3, r0
 8008eac:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8008eae:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8008eb2:	4613      	mov	r3, r2
 8008eb4:	005b      	lsls	r3, r3, #1
 8008eb6:	4413      	add	r3, r2
 8008eb8:	00db      	lsls	r3, r3, #3
 8008eba:	3350      	adds	r3, #80	; 0x50
 8008ebc:	443b      	add	r3, r7
 8008ebe:	3b30      	subs	r3, #48	; 0x30
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d023      	beq.n	8008f0e <HAL_OSPIM_Config+0x22e>
        {
          SET_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 8008ec6:	492d      	ldr	r1, [pc, #180]	; (8008f7c <HAL_OSPIM_Config+0x29c>)
 8008ec8:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8008ecc:	4613      	mov	r3, r2
 8008ece:	005b      	lsls	r3, r3, #1
 8008ed0:	4413      	add	r3, r2
 8008ed2:	00db      	lsls	r3, r3, #3
 8008ed4:	3350      	adds	r3, #80	; 0x50
 8008ed6:	443b      	add	r3, r7
 8008ed8:	3b30      	subs	r3, #48	; 0x30
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	3b01      	subs	r3, #1
 8008ede:	f003 0301 	and.w	r3, r3, #1
 8008ee2:	009b      	lsls	r3, r3, #2
 8008ee4:	440b      	add	r3, r1
 8008ee6:	6859      	ldr	r1, [r3, #4]
 8008ee8:	4824      	ldr	r0, [pc, #144]	; (8008f7c <HAL_OSPIM_Config+0x29c>)
 8008eea:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8008eee:	4613      	mov	r3, r2
 8008ef0:	005b      	lsls	r3, r3, #1
 8008ef2:	4413      	add	r3, r2
 8008ef4:	00db      	lsls	r3, r3, #3
 8008ef6:	3350      	adds	r3, #80	; 0x50
 8008ef8:	443b      	add	r3, r7
 8008efa:	3b30      	subs	r3, #48	; 0x30
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	3b01      	subs	r3, #1
 8008f00:	f003 0301 	and.w	r3, r3, #1
 8008f04:	f441 2280 	orr.w	r2, r1, #262144	; 0x40000
 8008f08:	009b      	lsls	r3, r3, #2
 8008f0a:	4403      	add	r3, r0
 8008f0c:	605a      	str	r2, [r3, #4]
                  OCTOSPIM_PCR_IOLSRC_1);
        }
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8008f0e:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8008f12:	4613      	mov	r3, r2
 8008f14:	005b      	lsls	r3, r3, #1
 8008f16:	4413      	add	r3, r2
 8008f18:	00db      	lsls	r3, r3, #3
 8008f1a:	3350      	adds	r3, #80	; 0x50
 8008f1c:	443b      	add	r3, r7
 8008f1e:	3b2c      	subs	r3, #44	; 0x2c
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	f000 80d9 	beq.w	80090da <HAL_OSPIM_Config+0x3fa>
        {
          SET_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 8008f28:	4914      	ldr	r1, [pc, #80]	; (8008f7c <HAL_OSPIM_Config+0x29c>)
 8008f2a:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8008f2e:	4613      	mov	r3, r2
 8008f30:	005b      	lsls	r3, r3, #1
 8008f32:	4413      	add	r3, r2
 8008f34:	00db      	lsls	r3, r3, #3
 8008f36:	3350      	adds	r3, #80	; 0x50
 8008f38:	443b      	add	r3, r7
 8008f3a:	3b2c      	subs	r3, #44	; 0x2c
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	3b01      	subs	r3, #1
 8008f40:	f003 0301 	and.w	r3, r3, #1
 8008f44:	009b      	lsls	r3, r3, #2
 8008f46:	440b      	add	r3, r1
 8008f48:	6859      	ldr	r1, [r3, #4]
 8008f4a:	480c      	ldr	r0, [pc, #48]	; (8008f7c <HAL_OSPIM_Config+0x29c>)
 8008f4c:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8008f50:	4613      	mov	r3, r2
 8008f52:	005b      	lsls	r3, r3, #1
 8008f54:	4413      	add	r3, r2
 8008f56:	00db      	lsls	r3, r3, #3
 8008f58:	3350      	adds	r3, #80	; 0x50
 8008f5a:	443b      	add	r3, r7
 8008f5c:	3b2c      	subs	r3, #44	; 0x2c
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	3b01      	subs	r3, #1
 8008f62:	f003 0301 	and.w	r3, r3, #1
 8008f66:	f041 6280 	orr.w	r2, r1, #67108864	; 0x4000000
 8008f6a:	009b      	lsls	r3, r3, #2
 8008f6c:	4403      	add	r3, r0
 8008f6e:	605a      	str	r2, [r3, #4]
 8008f70:	e0b3      	b.n	80090da <HAL_OSPIM_Config+0x3fa>
 8008f72:	bf00      	nop
 8008f74:	420d1400 	.word	0x420d1400
 8008f78:	420d2400 	.word	0x420d2400
 8008f7c:	420c4000 	.word	0x420c4000
        }
      }
    }
    else
    {
      if (IOM_cfg[instance].ClkPort != 0U)
 8008f80:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008f82:	4613      	mov	r3, r2
 8008f84:	005b      	lsls	r3, r3, #1
 8008f86:	4413      	add	r3, r2
 8008f88:	00db      	lsls	r3, r3, #3
 8008f8a:	3350      	adds	r3, #80	; 0x50
 8008f8c:	443b      	add	r3, r7
 8008f8e:	3b3c      	subs	r3, #60	; 0x3c
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	f000 80a1 	beq.w	80090da <HAL_OSPIM_Config+0x3fa>
      {
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKEN);
 8008f98:	4993      	ldr	r1, [pc, #588]	; (80091e8 <HAL_OSPIM_Config+0x508>)
 8008f9a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008f9c:	4613      	mov	r3, r2
 8008f9e:	005b      	lsls	r3, r3, #1
 8008fa0:	4413      	add	r3, r2
 8008fa2:	00db      	lsls	r3, r3, #3
 8008fa4:	3350      	adds	r3, #80	; 0x50
 8008fa6:	443b      	add	r3, r7
 8008fa8:	3b3c      	subs	r3, #60	; 0x3c
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	3b01      	subs	r3, #1
 8008fae:	009b      	lsls	r3, r3, #2
 8008fb0:	440b      	add	r3, r1
 8008fb2:	6859      	ldr	r1, [r3, #4]
 8008fb4:	488c      	ldr	r0, [pc, #560]	; (80091e8 <HAL_OSPIM_Config+0x508>)
 8008fb6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008fb8:	4613      	mov	r3, r2
 8008fba:	005b      	lsls	r3, r3, #1
 8008fbc:	4413      	add	r3, r2
 8008fbe:	00db      	lsls	r3, r3, #3
 8008fc0:	3350      	adds	r3, #80	; 0x50
 8008fc2:	443b      	add	r3, r7
 8008fc4:	3b3c      	subs	r3, #60	; 0x3c
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	3b01      	subs	r3, #1
 8008fca:	f021 0201 	bic.w	r2, r1, #1
 8008fce:	009b      	lsls	r3, r3, #2
 8008fd0:	4403      	add	r3, r0
 8008fd2:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[instance].DQSPort != 0U)
 8008fd4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008fd6:	4613      	mov	r3, r2
 8008fd8:	005b      	lsls	r3, r3, #1
 8008fda:	4413      	add	r3, r2
 8008fdc:	00db      	lsls	r3, r3, #3
 8008fde:	3350      	adds	r3, #80	; 0x50
 8008fe0:	443b      	add	r3, r7
 8008fe2:	3b38      	subs	r3, #56	; 0x38
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d01d      	beq.n	8009026 <HAL_OSPIM_Config+0x346>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSEN);
 8008fea:	497f      	ldr	r1, [pc, #508]	; (80091e8 <HAL_OSPIM_Config+0x508>)
 8008fec:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008fee:	4613      	mov	r3, r2
 8008ff0:	005b      	lsls	r3, r3, #1
 8008ff2:	4413      	add	r3, r2
 8008ff4:	00db      	lsls	r3, r3, #3
 8008ff6:	3350      	adds	r3, #80	; 0x50
 8008ff8:	443b      	add	r3, r7
 8008ffa:	3b38      	subs	r3, #56	; 0x38
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	3b01      	subs	r3, #1
 8009000:	009b      	lsls	r3, r3, #2
 8009002:	440b      	add	r3, r1
 8009004:	6859      	ldr	r1, [r3, #4]
 8009006:	4878      	ldr	r0, [pc, #480]	; (80091e8 <HAL_OSPIM_Config+0x508>)
 8009008:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800900a:	4613      	mov	r3, r2
 800900c:	005b      	lsls	r3, r3, #1
 800900e:	4413      	add	r3, r2
 8009010:	00db      	lsls	r3, r3, #3
 8009012:	3350      	adds	r3, #80	; 0x50
 8009014:	443b      	add	r3, r7
 8009016:	3b38      	subs	r3, #56	; 0x38
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	3b01      	subs	r3, #1
 800901c:	f021 0210 	bic.w	r2, r1, #16
 8009020:	009b      	lsls	r3, r3, #2
 8009022:	4403      	add	r3, r0
 8009024:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8009026:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009028:	4613      	mov	r3, r2
 800902a:	005b      	lsls	r3, r3, #1
 800902c:	4413      	add	r3, r2
 800902e:	00db      	lsls	r3, r3, #3
 8009030:	3350      	adds	r3, #80	; 0x50
 8009032:	443b      	add	r3, r7
 8009034:	3b30      	subs	r3, #48	; 0x30
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	2b00      	cmp	r3, #0
 800903a:	d021      	beq.n	8009080 <HAL_OSPIM_Config+0x3a0>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOLEN);
 800903c:	496a      	ldr	r1, [pc, #424]	; (80091e8 <HAL_OSPIM_Config+0x508>)
 800903e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009040:	4613      	mov	r3, r2
 8009042:	005b      	lsls	r3, r3, #1
 8009044:	4413      	add	r3, r2
 8009046:	00db      	lsls	r3, r3, #3
 8009048:	3350      	adds	r3, #80	; 0x50
 800904a:	443b      	add	r3, r7
 800904c:	3b30      	subs	r3, #48	; 0x30
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	3b01      	subs	r3, #1
 8009052:	f003 0301 	and.w	r3, r3, #1
 8009056:	009b      	lsls	r3, r3, #2
 8009058:	440b      	add	r3, r1
 800905a:	6859      	ldr	r1, [r3, #4]
 800905c:	4862      	ldr	r0, [pc, #392]	; (80091e8 <HAL_OSPIM_Config+0x508>)
 800905e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009060:	4613      	mov	r3, r2
 8009062:	005b      	lsls	r3, r3, #1
 8009064:	4413      	add	r3, r2
 8009066:	00db      	lsls	r3, r3, #3
 8009068:	3350      	adds	r3, #80	; 0x50
 800906a:	443b      	add	r3, r7
 800906c:	3b30      	subs	r3, #48	; 0x30
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	3b01      	subs	r3, #1
 8009072:	f003 0301 	and.w	r3, r3, #1
 8009076:	f421 3280 	bic.w	r2, r1, #65536	; 0x10000
 800907a:	009b      	lsls	r3, r3, #2
 800907c:	4403      	add	r3, r0
 800907e:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8009080:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009082:	4613      	mov	r3, r2
 8009084:	005b      	lsls	r3, r3, #1
 8009086:	4413      	add	r3, r2
 8009088:	00db      	lsls	r3, r3, #3
 800908a:	3350      	adds	r3, #80	; 0x50
 800908c:	443b      	add	r3, r7
 800908e:	3b2c      	subs	r3, #44	; 0x2c
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	2b00      	cmp	r3, #0
 8009094:	d021      	beq.n	80090da <HAL_OSPIM_Config+0x3fa>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOHEN);
 8009096:	4954      	ldr	r1, [pc, #336]	; (80091e8 <HAL_OSPIM_Config+0x508>)
 8009098:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800909a:	4613      	mov	r3, r2
 800909c:	005b      	lsls	r3, r3, #1
 800909e:	4413      	add	r3, r2
 80090a0:	00db      	lsls	r3, r3, #3
 80090a2:	3350      	adds	r3, #80	; 0x50
 80090a4:	443b      	add	r3, r7
 80090a6:	3b2c      	subs	r3, #44	; 0x2c
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	3b01      	subs	r3, #1
 80090ac:	f003 0301 	and.w	r3, r3, #1
 80090b0:	009b      	lsls	r3, r3, #2
 80090b2:	440b      	add	r3, r1
 80090b4:	6859      	ldr	r1, [r3, #4]
 80090b6:	484c      	ldr	r0, [pc, #304]	; (80091e8 <HAL_OSPIM_Config+0x508>)
 80090b8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80090ba:	4613      	mov	r3, r2
 80090bc:	005b      	lsls	r3, r3, #1
 80090be:	4413      	add	r3, r2
 80090c0:	00db      	lsls	r3, r3, #3
 80090c2:	3350      	adds	r3, #80	; 0x50
 80090c4:	443b      	add	r3, r7
 80090c6:	3b2c      	subs	r3, #44	; 0x2c
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	3b01      	subs	r3, #1
 80090cc:	f003 0301 	and.w	r3, r3, #1
 80090d0:	f021 7280 	bic.w	r2, r1, #16777216	; 0x1000000
 80090d4:	009b      	lsls	r3, r3, #2
 80090d6:	4403      	add	r3, r0
 80090d8:	605a      	str	r2, [r3, #4]
        }
      }
    }

    /********************* Deactivation of other instance *********************/
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 80090da:	68bb      	ldr	r3, [r7, #8]
 80090dc:	6819      	ldr	r1, [r3, #0]
 80090de:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80090e2:	4613      	mov	r3, r2
 80090e4:	005b      	lsls	r3, r3, #1
 80090e6:	4413      	add	r3, r2
 80090e8:	00db      	lsls	r3, r3, #3
 80090ea:	3350      	adds	r3, #80	; 0x50
 80090ec:	443b      	add	r3, r7
 80090ee:	3b3c      	subs	r3, #60	; 0x3c
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	4299      	cmp	r1, r3
 80090f4:	d038      	beq.n	8009168 <HAL_OSPIM_Config+0x488>
 80090f6:	68bb      	ldr	r3, [r7, #8]
 80090f8:	6859      	ldr	r1, [r3, #4]
 80090fa:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80090fe:	4613      	mov	r3, r2
 8009100:	005b      	lsls	r3, r3, #1
 8009102:	4413      	add	r3, r2
 8009104:	00db      	lsls	r3, r3, #3
 8009106:	3350      	adds	r3, #80	; 0x50
 8009108:	443b      	add	r3, r7
 800910a:	3b38      	subs	r3, #56	; 0x38
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	4299      	cmp	r1, r3
 8009110:	d02a      	beq.n	8009168 <HAL_OSPIM_Config+0x488>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8009112:	68bb      	ldr	r3, [r7, #8]
 8009114:	6899      	ldr	r1, [r3, #8]
 8009116:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800911a:	4613      	mov	r3, r2
 800911c:	005b      	lsls	r3, r3, #1
 800911e:	4413      	add	r3, r2
 8009120:	00db      	lsls	r3, r3, #3
 8009122:	3350      	adds	r3, #80	; 0x50
 8009124:	443b      	add	r3, r7
 8009126:	3b34      	subs	r3, #52	; 0x34
 8009128:	681b      	ldr	r3, [r3, #0]
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 800912a:	4299      	cmp	r1, r3
 800912c:	d01c      	beq.n	8009168 <HAL_OSPIM_Config+0x488>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 800912e:	68bb      	ldr	r3, [r7, #8]
 8009130:	68d9      	ldr	r1, [r3, #12]
 8009132:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8009136:	4613      	mov	r3, r2
 8009138:	005b      	lsls	r3, r3, #1
 800913a:	4413      	add	r3, r2
 800913c:	00db      	lsls	r3, r3, #3
 800913e:	3350      	adds	r3, #80	; 0x50
 8009140:	443b      	add	r3, r7
 8009142:	3b30      	subs	r3, #48	; 0x30
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	4299      	cmp	r1, r3
 8009148:	d00e      	beq.n	8009168 <HAL_OSPIM_Config+0x488>
        (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
 800914a:	68bb      	ldr	r3, [r7, #8]
 800914c:	6919      	ldr	r1, [r3, #16]
 800914e:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8009152:	4613      	mov	r3, r2
 8009154:	005b      	lsls	r3, r3, #1
 8009156:	4413      	add	r3, r2
 8009158:	00db      	lsls	r3, r3, #3
 800915a:	3350      	adds	r3, #80	; 0x50
 800915c:	443b      	add	r3, r7
 800915e:	3b2c      	subs	r3, #44	; 0x2c
 8009160:	681b      	ldr	r3, [r3, #0]
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8009162:	4299      	cmp	r1, r3
 8009164:	f040 810e 	bne.w	8009384 <HAL_OSPIM_Config+0x6a4>
    {
      if ((cfg->ClkPort   == IOM_cfg[other_instance].ClkPort)   &&
 8009168:	68bb      	ldr	r3, [r7, #8]
 800916a:	6819      	ldr	r1, [r3, #0]
 800916c:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8009170:	4613      	mov	r3, r2
 8009172:	005b      	lsls	r3, r3, #1
 8009174:	4413      	add	r3, r2
 8009176:	00db      	lsls	r3, r3, #3
 8009178:	3350      	adds	r3, #80	; 0x50
 800917a:	443b      	add	r3, r7
 800917c:	3b3c      	subs	r3, #60	; 0x3c
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	4299      	cmp	r1, r3
 8009182:	d133      	bne.n	80091ec <HAL_OSPIM_Config+0x50c>
          (cfg->DQSPort    == IOM_cfg[other_instance].DQSPort)  &&
 8009184:	68bb      	ldr	r3, [r7, #8]
 8009186:	6859      	ldr	r1, [r3, #4]
 8009188:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800918c:	4613      	mov	r3, r2
 800918e:	005b      	lsls	r3, r3, #1
 8009190:	4413      	add	r3, r2
 8009192:	00db      	lsls	r3, r3, #3
 8009194:	3350      	adds	r3, #80	; 0x50
 8009196:	443b      	add	r3, r7
 8009198:	3b38      	subs	r3, #56	; 0x38
 800919a:	681b      	ldr	r3, [r3, #0]
      if ((cfg->ClkPort   == IOM_cfg[other_instance].ClkPort)   &&
 800919c:	4299      	cmp	r1, r3
 800919e:	d125      	bne.n	80091ec <HAL_OSPIM_Config+0x50c>
          (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) &&
 80091a0:	68bb      	ldr	r3, [r7, #8]
 80091a2:	68d9      	ldr	r1, [r3, #12]
 80091a4:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80091a8:	4613      	mov	r3, r2
 80091aa:	005b      	lsls	r3, r3, #1
 80091ac:	4413      	add	r3, r2
 80091ae:	00db      	lsls	r3, r3, #3
 80091b0:	3350      	adds	r3, #80	; 0x50
 80091b2:	443b      	add	r3, r7
 80091b4:	3b30      	subs	r3, #48	; 0x30
 80091b6:	681b      	ldr	r3, [r3, #0]
          (cfg->DQSPort    == IOM_cfg[other_instance].DQSPort)  &&
 80091b8:	4299      	cmp	r1, r3
 80091ba:	d117      	bne.n	80091ec <HAL_OSPIM_Config+0x50c>
          (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
 80091bc:	68bb      	ldr	r3, [r7, #8]
 80091be:	6919      	ldr	r1, [r3, #16]
 80091c0:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80091c4:	4613      	mov	r3, r2
 80091c6:	005b      	lsls	r3, r3, #1
 80091c8:	4413      	add	r3, r2
 80091ca:	00db      	lsls	r3, r3, #3
 80091cc:	3350      	adds	r3, #80	; 0x50
 80091ce:	443b      	add	r3, r7
 80091d0:	3b2c      	subs	r3, #44	; 0x2c
 80091d2:	681b      	ldr	r3, [r3, #0]
          (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) &&
 80091d4:	4299      	cmp	r1, r3
 80091d6:	d109      	bne.n	80091ec <HAL_OSPIM_Config+0x50c>
      {
        /* Multiplexing should be performed */
        SET_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
 80091d8:	4b03      	ldr	r3, [pc, #12]	; (80091e8 <HAL_OSPIM_Config+0x508>)
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	4a02      	ldr	r2, [pc, #8]	; (80091e8 <HAL_OSPIM_Config+0x508>)
 80091de:	f043 0301 	orr.w	r3, r3, #1
 80091e2:	6013      	str	r3, [r2, #0]
 80091e4:	e0ce      	b.n	8009384 <HAL_OSPIM_Config+0x6a4>
 80091e6:	bf00      	nop
 80091e8:	420c4000 	.word	0x420c4000
      }
      else
      {
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKEN);
 80091ec:	49a4      	ldr	r1, [pc, #656]	; (8009480 <HAL_OSPIM_Config+0x7a0>)
 80091ee:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80091f2:	4613      	mov	r3, r2
 80091f4:	005b      	lsls	r3, r3, #1
 80091f6:	4413      	add	r3, r2
 80091f8:	00db      	lsls	r3, r3, #3
 80091fa:	3350      	adds	r3, #80	; 0x50
 80091fc:	443b      	add	r3, r7
 80091fe:	3b3c      	subs	r3, #60	; 0x3c
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	3b01      	subs	r3, #1
 8009204:	009b      	lsls	r3, r3, #2
 8009206:	440b      	add	r3, r1
 8009208:	6859      	ldr	r1, [r3, #4]
 800920a:	489d      	ldr	r0, [pc, #628]	; (8009480 <HAL_OSPIM_Config+0x7a0>)
 800920c:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8009210:	4613      	mov	r3, r2
 8009212:	005b      	lsls	r3, r3, #1
 8009214:	4413      	add	r3, r2
 8009216:	00db      	lsls	r3, r3, #3
 8009218:	3350      	adds	r3, #80	; 0x50
 800921a:	443b      	add	r3, r7
 800921c:	3b3c      	subs	r3, #60	; 0x3c
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	3b01      	subs	r3, #1
 8009222:	f021 0201 	bic.w	r2, r1, #1
 8009226:	009b      	lsls	r3, r3, #2
 8009228:	4403      	add	r3, r0
 800922a:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 800922c:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8009230:	4613      	mov	r3, r2
 8009232:	005b      	lsls	r3, r3, #1
 8009234:	4413      	add	r3, r2
 8009236:	00db      	lsls	r3, r3, #3
 8009238:	3350      	adds	r3, #80	; 0x50
 800923a:	443b      	add	r3, r7
 800923c:	3b38      	subs	r3, #56	; 0x38
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	2b00      	cmp	r3, #0
 8009242:	d01f      	beq.n	8009284 <HAL_OSPIM_Config+0x5a4>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSEN);
 8009244:	498e      	ldr	r1, [pc, #568]	; (8009480 <HAL_OSPIM_Config+0x7a0>)
 8009246:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800924a:	4613      	mov	r3, r2
 800924c:	005b      	lsls	r3, r3, #1
 800924e:	4413      	add	r3, r2
 8009250:	00db      	lsls	r3, r3, #3
 8009252:	3350      	adds	r3, #80	; 0x50
 8009254:	443b      	add	r3, r7
 8009256:	3b38      	subs	r3, #56	; 0x38
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	3b01      	subs	r3, #1
 800925c:	009b      	lsls	r3, r3, #2
 800925e:	440b      	add	r3, r1
 8009260:	6859      	ldr	r1, [r3, #4]
 8009262:	4887      	ldr	r0, [pc, #540]	; (8009480 <HAL_OSPIM_Config+0x7a0>)
 8009264:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8009268:	4613      	mov	r3, r2
 800926a:	005b      	lsls	r3, r3, #1
 800926c:	4413      	add	r3, r2
 800926e:	00db      	lsls	r3, r3, #3
 8009270:	3350      	adds	r3, #80	; 0x50
 8009272:	443b      	add	r3, r7
 8009274:	3b38      	subs	r3, #56	; 0x38
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	3b01      	subs	r3, #1
 800927a:	f021 0210 	bic.w	r2, r1, #16
 800927e:	009b      	lsls	r3, r3, #2
 8009280:	4403      	add	r3, r0
 8009282:	605a      	str	r2, [r3, #4]
        }
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].NCSPort - 1U)], OCTOSPIM_PCR_NCSEN);
 8009284:	497e      	ldr	r1, [pc, #504]	; (8009480 <HAL_OSPIM_Config+0x7a0>)
 8009286:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800928a:	4613      	mov	r3, r2
 800928c:	005b      	lsls	r3, r3, #1
 800928e:	4413      	add	r3, r2
 8009290:	00db      	lsls	r3, r3, #3
 8009292:	3350      	adds	r3, #80	; 0x50
 8009294:	443b      	add	r3, r7
 8009296:	3b34      	subs	r3, #52	; 0x34
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	3b01      	subs	r3, #1
 800929c:	009b      	lsls	r3, r3, #2
 800929e:	440b      	add	r3, r1
 80092a0:	6859      	ldr	r1, [r3, #4]
 80092a2:	4877      	ldr	r0, [pc, #476]	; (8009480 <HAL_OSPIM_Config+0x7a0>)
 80092a4:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80092a8:	4613      	mov	r3, r2
 80092aa:	005b      	lsls	r3, r3, #1
 80092ac:	4413      	add	r3, r2
 80092ae:	00db      	lsls	r3, r3, #3
 80092b0:	3350      	adds	r3, #80	; 0x50
 80092b2:	443b      	add	r3, r7
 80092b4:	3b34      	subs	r3, #52	; 0x34
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	3b01      	subs	r3, #1
 80092ba:	f421 7280 	bic.w	r2, r1, #256	; 0x100
 80092be:	009b      	lsls	r3, r3, #2
 80092c0:	4403      	add	r3, r0
 80092c2:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 80092c4:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80092c8:	4613      	mov	r3, r2
 80092ca:	005b      	lsls	r3, r3, #1
 80092cc:	4413      	add	r3, r2
 80092ce:	00db      	lsls	r3, r3, #3
 80092d0:	3350      	adds	r3, #80	; 0x50
 80092d2:	443b      	add	r3, r7
 80092d4:	3b30      	subs	r3, #48	; 0x30
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d023      	beq.n	8009324 <HAL_OSPIM_Config+0x644>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 80092dc:	4968      	ldr	r1, [pc, #416]	; (8009480 <HAL_OSPIM_Config+0x7a0>)
 80092de:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80092e2:	4613      	mov	r3, r2
 80092e4:	005b      	lsls	r3, r3, #1
 80092e6:	4413      	add	r3, r2
 80092e8:	00db      	lsls	r3, r3, #3
 80092ea:	3350      	adds	r3, #80	; 0x50
 80092ec:	443b      	add	r3, r7
 80092ee:	3b30      	subs	r3, #48	; 0x30
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	3b01      	subs	r3, #1
 80092f4:	f003 0301 	and.w	r3, r3, #1
 80092f8:	009b      	lsls	r3, r3, #2
 80092fa:	440b      	add	r3, r1
 80092fc:	6859      	ldr	r1, [r3, #4]
 80092fe:	4860      	ldr	r0, [pc, #384]	; (8009480 <HAL_OSPIM_Config+0x7a0>)
 8009300:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8009304:	4613      	mov	r3, r2
 8009306:	005b      	lsls	r3, r3, #1
 8009308:	4413      	add	r3, r2
 800930a:	00db      	lsls	r3, r3, #3
 800930c:	3350      	adds	r3, #80	; 0x50
 800930e:	443b      	add	r3, r7
 8009310:	3b30      	subs	r3, #48	; 0x30
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	3b01      	subs	r3, #1
 8009316:	f003 0301 	and.w	r3, r3, #1
 800931a:	f421 3280 	bic.w	r2, r1, #65536	; 0x10000
 800931e:	009b      	lsls	r3, r3, #2
 8009320:	4403      	add	r3, r0
 8009322:	605a      	str	r2, [r3, #4]
                    OCTOSPIM_PCR_IOLEN);
        }
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8009324:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8009328:	4613      	mov	r3, r2
 800932a:	005b      	lsls	r3, r3, #1
 800932c:	4413      	add	r3, r2
 800932e:	00db      	lsls	r3, r3, #3
 8009330:	3350      	adds	r3, #80	; 0x50
 8009332:	443b      	add	r3, r7
 8009334:	3b2c      	subs	r3, #44	; 0x2c
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	2b00      	cmp	r3, #0
 800933a:	d023      	beq.n	8009384 <HAL_OSPIM_Config+0x6a4>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 800933c:	4950      	ldr	r1, [pc, #320]	; (8009480 <HAL_OSPIM_Config+0x7a0>)
 800933e:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8009342:	4613      	mov	r3, r2
 8009344:	005b      	lsls	r3, r3, #1
 8009346:	4413      	add	r3, r2
 8009348:	00db      	lsls	r3, r3, #3
 800934a:	3350      	adds	r3, #80	; 0x50
 800934c:	443b      	add	r3, r7
 800934e:	3b2c      	subs	r3, #44	; 0x2c
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	3b01      	subs	r3, #1
 8009354:	f003 0301 	and.w	r3, r3, #1
 8009358:	009b      	lsls	r3, r3, #2
 800935a:	440b      	add	r3, r1
 800935c:	6859      	ldr	r1, [r3, #4]
 800935e:	4848      	ldr	r0, [pc, #288]	; (8009480 <HAL_OSPIM_Config+0x7a0>)
 8009360:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8009364:	4613      	mov	r3, r2
 8009366:	005b      	lsls	r3, r3, #1
 8009368:	4413      	add	r3, r2
 800936a:	00db      	lsls	r3, r3, #3
 800936c:	3350      	adds	r3, #80	; 0x50
 800936e:	443b      	add	r3, r7
 8009370:	3b2c      	subs	r3, #44	; 0x2c
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	3b01      	subs	r3, #1
 8009376:	f003 0301 	and.w	r3, r3, #1
 800937a:	f021 7280 	bic.w	r2, r1, #16777216	; 0x1000000
 800937e:	009b      	lsls	r3, r3, #2
 8009380:	4403      	add	r3, r0
 8009382:	605a      	str	r2, [r3, #4]
        }
      }
    }

    /******************** Activation of new configuration *********************/
    MODIFY_REG(OCTOSPIM->PCR[(cfg->NCSPort - 1U)], (OCTOSPIM_PCR_NCSEN | OCTOSPIM_PCR_NCSSRC),
 8009384:	4a3e      	ldr	r2, [pc, #248]	; (8009480 <HAL_OSPIM_Config+0x7a0>)
 8009386:	68bb      	ldr	r3, [r7, #8]
 8009388:	689b      	ldr	r3, [r3, #8]
 800938a:	3b01      	subs	r3, #1
 800938c:	009b      	lsls	r3, r3, #2
 800938e:	4413      	add	r3, r2
 8009390:	685b      	ldr	r3, [r3, #4]
 8009392:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009396:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009398:	025b      	lsls	r3, r3, #9
 800939a:	431a      	orrs	r2, r3
 800939c:	4938      	ldr	r1, [pc, #224]	; (8009480 <HAL_OSPIM_Config+0x7a0>)
 800939e:	68bb      	ldr	r3, [r7, #8]
 80093a0:	689b      	ldr	r3, [r3, #8]
 80093a2:	3b01      	subs	r3, #1
 80093a4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80093a8:	009b      	lsls	r3, r3, #2
 80093aa:	440b      	add	r3, r1
 80093ac:	605a      	str	r2, [r3, #4]
               (OCTOSPIM_PCR_NCSEN | (instance << OCTOSPIM_PCR_NCSSRC_Pos)));

    if (((cfg->Req2AckTime) >= 1U) && ((cfg->Req2AckTime) <= 256U))
 80093ae:	68bb      	ldr	r3, [r7, #8]
 80093b0:	695b      	ldr	r3, [r3, #20]
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d018      	beq.n	80093e8 <HAL_OSPIM_Config+0x708>
 80093b6:	68bb      	ldr	r3, [r7, #8]
 80093b8:	695b      	ldr	r3, [r3, #20]
 80093ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80093be:	d813      	bhi.n	80093e8 <HAL_OSPIM_Config+0x708>
    {
      if ((cfg->Req2AckTime - 1U) > ((OCTOSPIM->CR & OCTOSPIM_CR_REQ2ACK_TIME) >> OCTOSPIM_CR_REQ2ACK_TIME_Pos))
 80093c0:	68bb      	ldr	r3, [r7, #8]
 80093c2:	695b      	ldr	r3, [r3, #20]
 80093c4:	1e5a      	subs	r2, r3, #1
 80093c6:	4b2e      	ldr	r3, [pc, #184]	; (8009480 <HAL_OSPIM_Config+0x7a0>)
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	0c1b      	lsrs	r3, r3, #16
 80093cc:	b2db      	uxtb	r3, r3
 80093ce:	429a      	cmp	r2, r3
 80093d0:	d90a      	bls.n	80093e8 <HAL_OSPIM_Config+0x708>
      {
        MODIFY_REG(OCTOSPIM->CR, OCTOSPIM_CR_REQ2ACK_TIME, ((cfg->Req2AckTime - 1U) << OCTOSPIM_CR_REQ2ACK_TIME_Pos));
 80093d2:	4b2b      	ldr	r3, [pc, #172]	; (8009480 <HAL_OSPIM_Config+0x7a0>)
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	f423 027f 	bic.w	r2, r3, #16711680	; 0xff0000
 80093da:	68bb      	ldr	r3, [r7, #8]
 80093dc:	695b      	ldr	r3, [r3, #20]
 80093de:	3b01      	subs	r3, #1
 80093e0:	041b      	lsls	r3, r3, #16
 80093e2:	4927      	ldr	r1, [pc, #156]	; (8009480 <HAL_OSPIM_Config+0x7a0>)
 80093e4:	4313      	orrs	r3, r2
 80093e6:	600b      	str	r3, [r1, #0]
      {
        /* Nothing to do */
      }
    }

    if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) != 0U)
 80093e8:	4b25      	ldr	r3, [pc, #148]	; (8009480 <HAL_OSPIM_Config+0x7a0>)
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	f003 0301 	and.w	r3, r3, #1
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	f000 809a 	beq.w	800952a <HAL_OSPIM_Config+0x84a>
    {
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort - 1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC), OCTOSPIM_PCR_CLKEN);
 80093f6:	4a22      	ldr	r2, [pc, #136]	; (8009480 <HAL_OSPIM_Config+0x7a0>)
 80093f8:	68bb      	ldr	r3, [r7, #8]
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	3b01      	subs	r3, #1
 80093fe:	009b      	lsls	r3, r3, #2
 8009400:	4413      	add	r3, r2
 8009402:	685b      	ldr	r3, [r3, #4]
 8009404:	f023 0203 	bic.w	r2, r3, #3
 8009408:	491d      	ldr	r1, [pc, #116]	; (8009480 <HAL_OSPIM_Config+0x7a0>)
 800940a:	68bb      	ldr	r3, [r7, #8]
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	3b01      	subs	r3, #1
 8009410:	f042 0201 	orr.w	r2, r2, #1
 8009414:	009b      	lsls	r3, r3, #2
 8009416:	440b      	add	r3, r1
 8009418:	605a      	str	r2, [r3, #4]
      if (cfg->DQSPort != 0U)
 800941a:	68bb      	ldr	r3, [r7, #8]
 800941c:	685b      	ldr	r3, [r3, #4]
 800941e:	2b00      	cmp	r3, #0
 8009420:	d011      	beq.n	8009446 <HAL_OSPIM_Config+0x766>
      {
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort - 1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC), OCTOSPIM_PCR_DQSEN);
 8009422:	4a17      	ldr	r2, [pc, #92]	; (8009480 <HAL_OSPIM_Config+0x7a0>)
 8009424:	68bb      	ldr	r3, [r7, #8]
 8009426:	685b      	ldr	r3, [r3, #4]
 8009428:	3b01      	subs	r3, #1
 800942a:	009b      	lsls	r3, r3, #2
 800942c:	4413      	add	r3, r2
 800942e:	685b      	ldr	r3, [r3, #4]
 8009430:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8009434:	4912      	ldr	r1, [pc, #72]	; (8009480 <HAL_OSPIM_Config+0x7a0>)
 8009436:	68bb      	ldr	r3, [r7, #8]
 8009438:	685b      	ldr	r3, [r3, #4]
 800943a:	3b01      	subs	r3, #1
 800943c:	f042 0210 	orr.w	r2, r2, #16
 8009440:	009b      	lsls	r3, r3, #2
 8009442:	440b      	add	r3, r1
 8009444:	605a      	str	r2, [r3, #4]
      }

      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8009446:	68bb      	ldr	r3, [r7, #8]
 8009448:	68db      	ldr	r3, [r3, #12]
 800944a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800944e:	2b00      	cmp	r3, #0
 8009450:	d018      	beq.n	8009484 <HAL_OSPIM_Config+0x7a4>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 8009452:	4a0b      	ldr	r2, [pc, #44]	; (8009480 <HAL_OSPIM_Config+0x7a0>)
 8009454:	68bb      	ldr	r3, [r7, #8]
 8009456:	68db      	ldr	r3, [r3, #12]
 8009458:	3b01      	subs	r3, #1
 800945a:	f003 0301 	and.w	r3, r3, #1
 800945e:	009b      	lsls	r3, r3, #2
 8009460:	4413      	add	r3, r2
 8009462:	685b      	ldr	r3, [r3, #4]
 8009464:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8009468:	4905      	ldr	r1, [pc, #20]	; (8009480 <HAL_OSPIM_Config+0x7a0>)
 800946a:	68bb      	ldr	r3, [r7, #8]
 800946c:	68db      	ldr	r3, [r3, #12]
 800946e:	3b01      	subs	r3, #1
 8009470:	f003 0301 	and.w	r3, r3, #1
 8009474:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8009478:	009b      	lsls	r3, r3, #2
 800947a:	440b      	add	r3, r1
 800947c:	605a      	str	r2, [r3, #4]
 800947e:	e01b      	b.n	80094b8 <HAL_OSPIM_Config+0x7d8>
 8009480:	420c4000 	.word	0x420c4000
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC), OCTOSPIM_PCR_IOLEN);
      }
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8009484:	68bb      	ldr	r3, [r7, #8]
 8009486:	68db      	ldr	r3, [r3, #12]
 8009488:	2b00      	cmp	r3, #0
 800948a:	d015      	beq.n	80094b8 <HAL_OSPIM_Config+0x7d8>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 800948c:	4a8a      	ldr	r2, [pc, #552]	; (80096b8 <HAL_OSPIM_Config+0x9d8>)
 800948e:	68bb      	ldr	r3, [r7, #8]
 8009490:	68db      	ldr	r3, [r3, #12]
 8009492:	3b01      	subs	r3, #1
 8009494:	f003 0301 	and.w	r3, r3, #1
 8009498:	009b      	lsls	r3, r3, #2
 800949a:	4413      	add	r3, r2
 800949c:	685b      	ldr	r3, [r3, #4]
 800949e:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80094a2:	4985      	ldr	r1, [pc, #532]	; (80096b8 <HAL_OSPIM_Config+0x9d8>)
 80094a4:	68bb      	ldr	r3, [r7, #8]
 80094a6:	68db      	ldr	r3, [r3, #12]
 80094a8:	3b01      	subs	r3, #1
 80094aa:	f003 0301 	and.w	r3, r3, #1
 80094ae:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 80094b2:	009b      	lsls	r3, r3, #2
 80094b4:	440b      	add	r3, r1
 80094b6:	605a      	str	r2, [r3, #4]
      else
      {
        /* Nothing to do */
      }

      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 80094b8:	68bb      	ldr	r3, [r7, #8]
 80094ba:	691b      	ldr	r3, [r3, #16]
 80094bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	d016      	beq.n	80094f2 <HAL_OSPIM_Config+0x812>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 80094c4:	4a7c      	ldr	r2, [pc, #496]	; (80096b8 <HAL_OSPIM_Config+0x9d8>)
 80094c6:	68bb      	ldr	r3, [r7, #8]
 80094c8:	691b      	ldr	r3, [r3, #16]
 80094ca:	3b01      	subs	r3, #1
 80094cc:	f003 0301 	and.w	r3, r3, #1
 80094d0:	009b      	lsls	r3, r3, #2
 80094d2:	4413      	add	r3, r2
 80094d4:	685b      	ldr	r3, [r3, #4]
 80094d6:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80094da:	4977      	ldr	r1, [pc, #476]	; (80096b8 <HAL_OSPIM_Config+0x9d8>)
 80094dc:	68bb      	ldr	r3, [r7, #8]
 80094de:	691b      	ldr	r3, [r3, #16]
 80094e0:	3b01      	subs	r3, #1
 80094e2:	f003 0301 	and.w	r3, r3, #1
 80094e6:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
 80094ea:	009b      	lsls	r3, r3, #2
 80094ec:	440b      	add	r3, r1
 80094ee:	605a      	str	r2, [r3, #4]
 80094f0:	e0c3      	b.n	800967a <HAL_OSPIM_Config+0x99a>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC), (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC_0));
      }
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 80094f2:	68bb      	ldr	r3, [r7, #8]
 80094f4:	691b      	ldr	r3, [r3, #16]
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	f000 80bf 	beq.w	800967a <HAL_OSPIM_Config+0x99a>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 80094fc:	4a6e      	ldr	r2, [pc, #440]	; (80096b8 <HAL_OSPIM_Config+0x9d8>)
 80094fe:	68bb      	ldr	r3, [r7, #8]
 8009500:	691b      	ldr	r3, [r3, #16]
 8009502:	3b01      	subs	r3, #1
 8009504:	f003 0301 	and.w	r3, r3, #1
 8009508:	009b      	lsls	r3, r3, #2
 800950a:	4413      	add	r3, r2
 800950c:	685b      	ldr	r3, [r3, #4]
 800950e:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8009512:	4969      	ldr	r1, [pc, #420]	; (80096b8 <HAL_OSPIM_Config+0x9d8>)
 8009514:	68bb      	ldr	r3, [r7, #8]
 8009516:	691b      	ldr	r3, [r3, #16]
 8009518:	3b01      	subs	r3, #1
 800951a:	f003 0301 	and.w	r3, r3, #1
 800951e:	f042 7240 	orr.w	r2, r2, #50331648	; 0x3000000
 8009522:	009b      	lsls	r3, r3, #2
 8009524:	440b      	add	r3, r1
 8009526:	605a      	str	r2, [r3, #4]
 8009528:	e0a7      	b.n	800967a <HAL_OSPIM_Config+0x99a>
        /* Nothing to do */
      }
    }
    else
    {
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort - 1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC),
 800952a:	4a63      	ldr	r2, [pc, #396]	; (80096b8 <HAL_OSPIM_Config+0x9d8>)
 800952c:	68bb      	ldr	r3, [r7, #8]
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	3b01      	subs	r3, #1
 8009532:	009b      	lsls	r3, r3, #2
 8009534:	4413      	add	r3, r2
 8009536:	685b      	ldr	r3, [r3, #4]
 8009538:	f023 0203 	bic.w	r2, r3, #3
 800953c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800953e:	005b      	lsls	r3, r3, #1
 8009540:	431a      	orrs	r2, r3
 8009542:	495d      	ldr	r1, [pc, #372]	; (80096b8 <HAL_OSPIM_Config+0x9d8>)
 8009544:	68bb      	ldr	r3, [r7, #8]
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	3b01      	subs	r3, #1
 800954a:	f042 0201 	orr.w	r2, r2, #1
 800954e:	009b      	lsls	r3, r3, #2
 8009550:	440b      	add	r3, r1
 8009552:	605a      	str	r2, [r3, #4]
                 (OCTOSPIM_PCR_CLKEN | (instance << OCTOSPIM_PCR_CLKSRC_Pos)));
      if (cfg->DQSPort != 0U)
 8009554:	68bb      	ldr	r3, [r7, #8]
 8009556:	685b      	ldr	r3, [r3, #4]
 8009558:	2b00      	cmp	r3, #0
 800955a:	d014      	beq.n	8009586 <HAL_OSPIM_Config+0x8a6>
      {
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort - 1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC),
 800955c:	4a56      	ldr	r2, [pc, #344]	; (80096b8 <HAL_OSPIM_Config+0x9d8>)
 800955e:	68bb      	ldr	r3, [r7, #8]
 8009560:	685b      	ldr	r3, [r3, #4]
 8009562:	3b01      	subs	r3, #1
 8009564:	009b      	lsls	r3, r3, #2
 8009566:	4413      	add	r3, r2
 8009568:	685b      	ldr	r3, [r3, #4]
 800956a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800956e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009570:	015b      	lsls	r3, r3, #5
 8009572:	431a      	orrs	r2, r3
 8009574:	4950      	ldr	r1, [pc, #320]	; (80096b8 <HAL_OSPIM_Config+0x9d8>)
 8009576:	68bb      	ldr	r3, [r7, #8]
 8009578:	685b      	ldr	r3, [r3, #4]
 800957a:	3b01      	subs	r3, #1
 800957c:	f042 0210 	orr.w	r2, r2, #16
 8009580:	009b      	lsls	r3, r3, #2
 8009582:	440b      	add	r3, r1
 8009584:	605a      	str	r2, [r3, #4]
                   (OCTOSPIM_PCR_DQSEN | (instance << OCTOSPIM_PCR_DQSSRC_Pos)));
      }

      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8009586:	68bb      	ldr	r3, [r7, #8]
 8009588:	68db      	ldr	r3, [r3, #12]
 800958a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800958e:	2b00      	cmp	r3, #0
 8009590:	d019      	beq.n	80095c6 <HAL_OSPIM_Config+0x8e6>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 8009592:	4a49      	ldr	r2, [pc, #292]	; (80096b8 <HAL_OSPIM_Config+0x9d8>)
 8009594:	68bb      	ldr	r3, [r7, #8]
 8009596:	68db      	ldr	r3, [r3, #12]
 8009598:	3b01      	subs	r3, #1
 800959a:	f003 0301 	and.w	r3, r3, #1
 800959e:	009b      	lsls	r3, r3, #2
 80095a0:	4413      	add	r3, r2
 80095a2:	685b      	ldr	r3, [r3, #4]
 80095a4:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80095a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80095aa:	049b      	lsls	r3, r3, #18
 80095ac:	431a      	orrs	r2, r3
 80095ae:	4942      	ldr	r1, [pc, #264]	; (80096b8 <HAL_OSPIM_Config+0x9d8>)
 80095b0:	68bb      	ldr	r3, [r7, #8]
 80095b2:	68db      	ldr	r3, [r3, #12]
 80095b4:	3b01      	subs	r3, #1
 80095b6:	f003 0301 	and.w	r3, r3, #1
 80095ba:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80095be:	009b      	lsls	r3, r3, #2
 80095c0:	440b      	add	r3, r1
 80095c2:	605a      	str	r2, [r3, #4]
 80095c4:	e01c      	b.n	8009600 <HAL_OSPIM_Config+0x920>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                   (OCTOSPIM_PCR_IOLEN | (instance << (OCTOSPIM_PCR_IOLSRC_Pos + 1U))));
      }
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 80095c6:	68bb      	ldr	r3, [r7, #8]
 80095c8:	68db      	ldr	r3, [r3, #12]
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d018      	beq.n	8009600 <HAL_OSPIM_Config+0x920>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 80095ce:	4a3a      	ldr	r2, [pc, #232]	; (80096b8 <HAL_OSPIM_Config+0x9d8>)
 80095d0:	68bb      	ldr	r3, [r7, #8]
 80095d2:	68db      	ldr	r3, [r3, #12]
 80095d4:	3b01      	subs	r3, #1
 80095d6:	f003 0301 	and.w	r3, r3, #1
 80095da:	009b      	lsls	r3, r3, #2
 80095dc:	4413      	add	r3, r2
 80095de:	685b      	ldr	r3, [r3, #4]
 80095e0:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80095e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80095e6:	069b      	lsls	r3, r3, #26
 80095e8:	431a      	orrs	r2, r3
 80095ea:	4933      	ldr	r1, [pc, #204]	; (80096b8 <HAL_OSPIM_Config+0x9d8>)
 80095ec:	68bb      	ldr	r3, [r7, #8]
 80095ee:	68db      	ldr	r3, [r3, #12]
 80095f0:	3b01      	subs	r3, #1
 80095f2:	f003 0301 	and.w	r3, r3, #1
 80095f6:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 80095fa:	009b      	lsls	r3, r3, #2
 80095fc:	440b      	add	r3, r1
 80095fe:	605a      	str	r2, [r3, #4]
      else
      {
        /* Nothing to do */
      }

      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8009600:	68bb      	ldr	r3, [r7, #8]
 8009602:	691b      	ldr	r3, [r3, #16]
 8009604:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009608:	2b00      	cmp	r3, #0
 800960a:	d019      	beq.n	8009640 <HAL_OSPIM_Config+0x960>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 800960c:	4a2a      	ldr	r2, [pc, #168]	; (80096b8 <HAL_OSPIM_Config+0x9d8>)
 800960e:	68bb      	ldr	r3, [r7, #8]
 8009610:	691b      	ldr	r3, [r3, #16]
 8009612:	3b01      	subs	r3, #1
 8009614:	f003 0301 	and.w	r3, r3, #1
 8009618:	009b      	lsls	r3, r3, #2
 800961a:	4413      	add	r3, r2
 800961c:	685b      	ldr	r3, [r3, #4]
 800961e:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8009622:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009624:	049b      	lsls	r3, r3, #18
 8009626:	431a      	orrs	r2, r3
 8009628:	4923      	ldr	r1, [pc, #140]	; (80096b8 <HAL_OSPIM_Config+0x9d8>)
 800962a:	68bb      	ldr	r3, [r7, #8]
 800962c:	691b      	ldr	r3, [r3, #16]
 800962e:	3b01      	subs	r3, #1
 8009630:	f003 0301 	and.w	r3, r3, #1
 8009634:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
 8009638:	009b      	lsls	r3, r3, #2
 800963a:	440b      	add	r3, r1
 800963c:	605a      	str	r2, [r3, #4]
 800963e:	e01c      	b.n	800967a <HAL_OSPIM_Config+0x99a>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC_0 | (instance << (OCTOSPIM_PCR_IOLSRC_Pos + 1U))));
      }
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8009640:	68bb      	ldr	r3, [r7, #8]
 8009642:	691b      	ldr	r3, [r3, #16]
 8009644:	2b00      	cmp	r3, #0
 8009646:	d018      	beq.n	800967a <HAL_OSPIM_Config+0x99a>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 8009648:	4a1b      	ldr	r2, [pc, #108]	; (80096b8 <HAL_OSPIM_Config+0x9d8>)
 800964a:	68bb      	ldr	r3, [r7, #8]
 800964c:	691b      	ldr	r3, [r3, #16]
 800964e:	3b01      	subs	r3, #1
 8009650:	f003 0301 	and.w	r3, r3, #1
 8009654:	009b      	lsls	r3, r3, #2
 8009656:	4413      	add	r3, r2
 8009658:	685b      	ldr	r3, [r3, #4]
 800965a:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800965e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009660:	069b      	lsls	r3, r3, #26
 8009662:	431a      	orrs	r2, r3
 8009664:	4914      	ldr	r1, [pc, #80]	; (80096b8 <HAL_OSPIM_Config+0x9d8>)
 8009666:	68bb      	ldr	r3, [r7, #8]
 8009668:	691b      	ldr	r3, [r3, #16]
 800966a:	3b01      	subs	r3, #1
 800966c:	f003 0301 	and.w	r3, r3, #1
 8009670:	f042 7240 	orr.w	r2, r2, #50331648	; 0x3000000
 8009674:	009b      	lsls	r3, r3, #2
 8009676:	440b      	add	r3, r1
 8009678:	605a      	str	r2, [r3, #4]
        /* Nothing to do */
      }
    }

    /******* Re-enable both OctoSPI after configure OctoSPI IO Manager ********/
    if ((ospi_enabled & 0x1U) != 0U)
 800967a:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800967e:	f003 0301 	and.w	r3, r3, #1
 8009682:	2b00      	cmp	r3, #0
 8009684:	d005      	beq.n	8009692 <HAL_OSPIM_Config+0x9b2>
    {
      SET_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 8009686:	4b0d      	ldr	r3, [pc, #52]	; (80096bc <HAL_OSPIM_Config+0x9dc>)
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	4a0c      	ldr	r2, [pc, #48]	; (80096bc <HAL_OSPIM_Config+0x9dc>)
 800968c:	f043 0301 	orr.w	r3, r3, #1
 8009690:	6013      	str	r3, [r2, #0]
    }
    if ((ospi_enabled & 0x2U) != 0U)
 8009692:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8009696:	f003 0302 	and.w	r3, r3, #2
 800969a:	2b00      	cmp	r3, #0
 800969c:	d005      	beq.n	80096aa <HAL_OSPIM_Config+0x9ca>
    {
      SET_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 800969e:	4b08      	ldr	r3, [pc, #32]	; (80096c0 <HAL_OSPIM_Config+0x9e0>)
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	4a07      	ldr	r2, [pc, #28]	; (80096c0 <HAL_OSPIM_Config+0x9e0>)
 80096a4:	f043 0301 	orr.w	r3, r3, #1
 80096a8:	6013      	str	r3, [r2, #0]
    }
  }

  /* Return function status */
  return status;
 80096aa:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 80096ae:	4618      	mov	r0, r3
 80096b0:	3750      	adds	r7, #80	; 0x50
 80096b2:	46bd      	mov	sp, r7
 80096b4:	bd80      	pop	{r7, pc}
 80096b6:	bf00      	nop
 80096b8:	420c4000 	.word	0x420c4000
 80096bc:	420d1400 	.word	0x420d1400
 80096c0:	420d2400 	.word	0x420d2400

080096c4 <OSPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart : Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_WaitFlagStateUntilTimeout(OSPI_HandleTypeDef *hospi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 80096c4:	b580      	push	{r7, lr}
 80096c6:	b084      	sub	sp, #16
 80096c8:	af00      	add	r7, sp, #0
 80096ca:	60f8      	str	r0, [r7, #12]
 80096cc:	60b9      	str	r1, [r7, #8]
 80096ce:	603b      	str	r3, [r7, #0]
 80096d0:	4613      	mov	r3, r2
 80096d2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while ((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 80096d4:	e022      	b.n	800971c <OSPI_WaitFlagStateUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80096d6:	69bb      	ldr	r3, [r7, #24]
 80096d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80096dc:	d01e      	beq.n	800971c <OSPI_WaitFlagStateUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80096de:	f7fc f881 	bl	80057e4 <HAL_GetTick>
 80096e2:	4602      	mov	r2, r0
 80096e4:	683b      	ldr	r3, [r7, #0]
 80096e6:	1ad3      	subs	r3, r2, r3
 80096e8:	69ba      	ldr	r2, [r7, #24]
 80096ea:	429a      	cmp	r2, r3
 80096ec:	d302      	bcc.n	80096f4 <OSPI_WaitFlagStateUntilTimeout+0x30>
 80096ee:	69bb      	ldr	r3, [r7, #24]
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	d113      	bne.n	800971c <OSPI_WaitFlagStateUntilTimeout+0x58>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hospi->Instance->SR & Flag) != (uint32_t)State)
 80096f4:	68fb      	ldr	r3, [r7, #12]
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	6a1a      	ldr	r2, [r3, #32]
 80096fa:	68bb      	ldr	r3, [r7, #8]
 80096fc:	401a      	ands	r2, r3
 80096fe:	79fb      	ldrb	r3, [r7, #7]
 8009700:	429a      	cmp	r2, r3
 8009702:	d00b      	beq.n	800971c <OSPI_WaitFlagStateUntilTimeout+0x58>
        {
          hospi->State     = HAL_OSPI_STATE_ERROR;
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	f44f 7200 	mov.w	r2, #512	; 0x200
 800970a:	651a      	str	r2, [r3, #80]	; 0x50
          hospi->ErrorCode |= HAL_OSPI_ERROR_TIMEOUT;
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009710:	f043 0201 	orr.w	r2, r3, #1
 8009714:	68fb      	ldr	r3, [r7, #12]
 8009716:	655a      	str	r2, [r3, #84]	; 0x54

          return HAL_ERROR;
 8009718:	2301      	movs	r3, #1
 800971a:	e00e      	b.n	800973a <OSPI_WaitFlagStateUntilTimeout+0x76>
  while ((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 800971c:	68fb      	ldr	r3, [r7, #12]
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	6a1a      	ldr	r2, [r3, #32]
 8009722:	68bb      	ldr	r3, [r7, #8]
 8009724:	4013      	ands	r3, r2
 8009726:	2b00      	cmp	r3, #0
 8009728:	bf14      	ite	ne
 800972a:	2301      	movne	r3, #1
 800972c:	2300      	moveq	r3, #0
 800972e:	b2db      	uxtb	r3, r3
 8009730:	461a      	mov	r2, r3
 8009732:	79fb      	ldrb	r3, [r7, #7]
 8009734:	429a      	cmp	r2, r3
 8009736:	d1ce      	bne.n	80096d6 <OSPI_WaitFlagStateUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009738:	2300      	movs	r3, #0
}
 800973a:	4618      	mov	r0, r3
 800973c:	3710      	adds	r7, #16
 800973e:	46bd      	mov	sp, r7
 8009740:	bd80      	pop	{r7, pc}
	...

08009744 <OSPI_ConfigCmd>:
  * @param  hospi : OSPI handle
  * @param  cmd   : structure that contains the command configuration information
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_ConfigCmd(OSPI_HandleTypeDef *hospi, OSPI_RegularCmdTypeDef *cmd)
{
 8009744:	b480      	push	{r7}
 8009746:	b089      	sub	sp, #36	; 0x24
 8009748:	af00      	add	r7, sp, #0
 800974a:	6078      	str	r0, [r7, #4]
 800974c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800974e:	2300      	movs	r3, #0
 8009750:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *tcr_reg;
  __IO uint32_t *ir_reg;
  __IO uint32_t *abr_reg;

  /* Re-initialize the value of the functional mode */
  MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, 0U);
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	681a      	ldr	r2, [r3, #0]
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8009760:	601a      	str	r2, [r3, #0]

  /* Configure the flash ID */
  if (hospi->Init.DualQuad == HAL_OSPI_DUALQUAD_DISABLE)
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	689b      	ldr	r3, [r3, #8]
 8009766:	2b00      	cmp	r3, #0
 8009768:	d10a      	bne.n	8009780 <OSPI_ConfigCmd+0x3c>
  {
    MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_MSEL, cmd->FlashId);
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8009774:	683b      	ldr	r3, [r7, #0]
 8009776:	685a      	ldr	r2, [r3, #4]
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	430a      	orrs	r2, r1
 800977e:	601a      	str	r2, [r3, #0]
  }

  if (cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG)
 8009780:	683b      	ldr	r3, [r7, #0]
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	2b02      	cmp	r3, #2
 8009786:	d114      	bne.n	80097b2 <OSPI_ConfigCmd+0x6e>
  {
    ccr_reg = &(hospi->Instance->WCCR);
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8009790:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hospi->Instance->WTCR);
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 800979a:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hospi->Instance->WIR);
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 80097a4:	613b      	str	r3, [r7, #16]
    abr_reg = &(hospi->Instance->WABR);
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 80097ae:	60fb      	str	r3, [r7, #12]
 80097b0:	e02c      	b.n	800980c <OSPI_ConfigCmd+0xc8>
  }
  else if (cmd->OperationType == HAL_OSPI_OPTYPE_WRAP_CFG)
 80097b2:	683b      	ldr	r3, [r7, #0]
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	2b03      	cmp	r3, #3
 80097b8:	d114      	bne.n	80097e4 <OSPI_ConfigCmd+0xa0>
  {
    ccr_reg = &(hospi->Instance->WPCCR);
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 80097c2:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hospi->Instance->WPTCR);
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 80097cc:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hospi->Instance->WPIR);
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80097d6:	613b      	str	r3, [r7, #16]
    abr_reg = &(hospi->Instance->WPABR);
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 80097e0:	60fb      	str	r3, [r7, #12]
 80097e2:	e013      	b.n	800980c <OSPI_ConfigCmd+0xc8>
  }
  else
  {
    ccr_reg = &(hospi->Instance->CCR);
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80097ec:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hospi->Instance->TCR);
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	f503 7384 	add.w	r3, r3, #264	; 0x108
 80097f6:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hospi->Instance->IR);
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8009800:	613b      	str	r3, [r7, #16]
    abr_reg = &(hospi->Instance->ABR);
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	f503 7390 	add.w	r3, r3, #288	; 0x120
 800980a:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CCR register with DQS and SIOO modes */
  *ccr_reg = (cmd->DQSMode | cmd->SIOOMode);
 800980c:	683b      	ldr	r3, [r7, #0]
 800980e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009810:	683b      	ldr	r3, [r7, #0]
 8009812:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009814:	431a      	orrs	r2, r3
 8009816:	69bb      	ldr	r3, [r7, #24]
 8009818:	601a      	str	r2, [r3, #0]

  if (cmd->AlternateBytesMode != HAL_OSPI_ALTERNATE_BYTES_NONE)
 800981a:	683b      	ldr	r3, [r7, #0]
 800981c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800981e:	2b00      	cmp	r3, #0
 8009820:	d012      	beq.n	8009848 <OSPI_ConfigCmd+0x104>
  {
    /* Configure the ABR register with alternate bytes value */
    *abr_reg = cmd->AlternateBytes;
 8009822:	683b      	ldr	r3, [r7, #0]
 8009824:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009826:	68fb      	ldr	r3, [r7, #12]
 8009828:	601a      	str	r2, [r3, #0]

    /* Configure the CCR register with alternate bytes communication parameters */
    MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ABMODE | OCTOSPI_CCR_ABDTR | OCTOSPI_CCR_ABSIZE),
 800982a:	69bb      	ldr	r3, [r7, #24]
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8009832:	683b      	ldr	r3, [r7, #0]
 8009834:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8009836:	683b      	ldr	r3, [r7, #0]
 8009838:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800983a:	4319      	orrs	r1, r3
 800983c:	683b      	ldr	r3, [r7, #0]
 800983e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009840:	430b      	orrs	r3, r1
 8009842:	431a      	orrs	r2, r3
 8009844:	69bb      	ldr	r3, [r7, #24]
 8009846:	601a      	str	r2, [r3, #0]
               (cmd->AlternateBytesMode | cmd->AlternateBytesDtrMode | cmd->AlternateBytesSize));
  }

  /* Configure the TCR register with the number of dummy cycles */
  MODIFY_REG((*tcr_reg), OCTOSPI_TCR_DCYC, cmd->DummyCycles);
 8009848:	697b      	ldr	r3, [r7, #20]
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	f023 021f 	bic.w	r2, r3, #31
 8009850:	683b      	ldr	r3, [r7, #0]
 8009852:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009854:	431a      	orrs	r2, r3
 8009856:	697b      	ldr	r3, [r7, #20]
 8009858:	601a      	str	r2, [r3, #0]

  if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 800985a:	683b      	ldr	r3, [r7, #0]
 800985c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800985e:	2b00      	cmp	r3, #0
 8009860:	d009      	beq.n	8009876 <OSPI_ConfigCmd+0x132>
  {
    if (cmd->OperationType == HAL_OSPI_OPTYPE_COMMON_CFG)
 8009862:	683b      	ldr	r3, [r7, #0]
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	2b00      	cmp	r3, #0
 8009868:	d105      	bne.n	8009876 <OSPI_ConfigCmd+0x132>
    {
      /* Configure the DLR register with the number of data */
      hospi->Instance->DLR = (cmd->NbData - 1U);
 800986a:	683b      	ldr	r3, [r7, #0]
 800986c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	3a01      	subs	r2, #1
 8009874:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (cmd->InstructionMode != HAL_OSPI_INSTRUCTION_NONE)
 8009876:	683b      	ldr	r3, [r7, #0]
 8009878:	68db      	ldr	r3, [r3, #12]
 800987a:	2b00      	cmp	r3, #0
 800987c:	f000 8099 	beq.w	80099b2 <OSPI_ConfigCmd+0x26e>
  {
    if (cmd->AddressMode != HAL_OSPI_ADDRESS_NONE)
 8009880:	683b      	ldr	r3, [r7, #0]
 8009882:	69db      	ldr	r3, [r3, #28]
 8009884:	2b00      	cmp	r3, #0
 8009886:	d055      	beq.n	8009934 <OSPI_ConfigCmd+0x1f0>
    {
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 8009888:	683b      	ldr	r3, [r7, #0]
 800988a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800988c:	2b00      	cmp	r3, #0
 800988e:	d01e      	beq.n	80098ce <OSPI_ConfigCmd+0x18a>
      {
        /* ---- Command with instruction, address and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE  | OCTOSPI_CCR_IDTR  | OCTOSPI_CCR_ISIZE  |
 8009890:	69bb      	ldr	r3, [r7, #24]
 8009892:	681a      	ldr	r2, [r3, #0]
 8009894:	4b67      	ldr	r3, [pc, #412]	; (8009a34 <OSPI_ConfigCmd+0x2f0>)
 8009896:	4013      	ands	r3, r2
 8009898:	683a      	ldr	r2, [r7, #0]
 800989a:	68d1      	ldr	r1, [r2, #12]
 800989c:	683a      	ldr	r2, [r7, #0]
 800989e:	6952      	ldr	r2, [r2, #20]
 80098a0:	4311      	orrs	r1, r2
 80098a2:	683a      	ldr	r2, [r7, #0]
 80098a4:	6912      	ldr	r2, [r2, #16]
 80098a6:	4311      	orrs	r1, r2
 80098a8:	683a      	ldr	r2, [r7, #0]
 80098aa:	69d2      	ldr	r2, [r2, #28]
 80098ac:	4311      	orrs	r1, r2
 80098ae:	683a      	ldr	r2, [r7, #0]
 80098b0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80098b2:	4311      	orrs	r1, r2
 80098b4:	683a      	ldr	r2, [r7, #0]
 80098b6:	6a12      	ldr	r2, [r2, #32]
 80098b8:	4311      	orrs	r1, r2
 80098ba:	683a      	ldr	r2, [r7, #0]
 80098bc:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80098be:	4311      	orrs	r1, r2
 80098c0:	683a      	ldr	r2, [r7, #0]
 80098c2:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80098c4:	430a      	orrs	r2, r1
 80098c6:	431a      	orrs	r2, r3
 80098c8:	69bb      	ldr	r3, [r7, #24]
 80098ca:	601a      	str	r2, [r3, #0]
 80098cc:	e028      	b.n	8009920 <OSPI_ConfigCmd+0x1dc>
      else
      {
        /* ---- Command with instruction and address ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE  | OCTOSPI_CCR_IDTR  | OCTOSPI_CCR_ISIZE  |
 80098ce:	69bb      	ldr	r3, [r7, #24]
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80098d6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80098da:	683a      	ldr	r2, [r7, #0]
 80098dc:	68d1      	ldr	r1, [r2, #12]
 80098de:	683a      	ldr	r2, [r7, #0]
 80098e0:	6952      	ldr	r2, [r2, #20]
 80098e2:	4311      	orrs	r1, r2
 80098e4:	683a      	ldr	r2, [r7, #0]
 80098e6:	6912      	ldr	r2, [r2, #16]
 80098e8:	4311      	orrs	r1, r2
 80098ea:	683a      	ldr	r2, [r7, #0]
 80098ec:	69d2      	ldr	r2, [r2, #28]
 80098ee:	4311      	orrs	r1, r2
 80098f0:	683a      	ldr	r2, [r7, #0]
 80098f2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80098f4:	4311      	orrs	r1, r2
 80098f6:	683a      	ldr	r2, [r7, #0]
 80098f8:	6a12      	ldr	r2, [r2, #32]
 80098fa:	430a      	orrs	r2, r1
 80098fc:	431a      	orrs	r2, r3
 80098fe:	69bb      	ldr	r3, [r7, #24]
 8009900:	601a      	str	r2, [r3, #0]
                                OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE),
                   (cmd->InstructionMode | cmd->InstructionDtrMode | cmd->InstructionSize |
                    cmd->AddressMode     | cmd->AddressDtrMode     | cmd->AddressSize));

        /* The DHQC bit is linked with DDTR bit which should be activated */
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009906:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800990a:	d109      	bne.n	8009920 <OSPI_ConfigCmd+0x1dc>
            (cmd->InstructionDtrMode == HAL_OSPI_INSTRUCTION_DTR_ENABLE))
 800990c:	683b      	ldr	r3, [r7, #0]
 800990e:	695b      	ldr	r3, [r3, #20]
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 8009910:	2b08      	cmp	r3, #8
 8009912:	d105      	bne.n	8009920 <OSPI_ConfigCmd+0x1dc>
        {
          MODIFY_REG((*ccr_reg), OCTOSPI_CCR_DDTR, HAL_OSPI_DATA_DTR_ENABLE);
 8009914:	69bb      	ldr	r3, [r7, #24]
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800991c:	69bb      	ldr	r3, [r7, #24]
 800991e:	601a      	str	r2, [r3, #0]
        }
      }

      /* Configure the IR register with the instruction value */
      *ir_reg = cmd->Instruction;
 8009920:	683b      	ldr	r3, [r7, #0]
 8009922:	689a      	ldr	r2, [r3, #8]
 8009924:	693b      	ldr	r3, [r7, #16]
 8009926:	601a      	str	r2, [r3, #0]

      /* Configure the AR register with the address value */
      hospi->Instance->AR = cmd->Address;
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	683a      	ldr	r2, [r7, #0]
 800992e:	6992      	ldr	r2, [r2, #24]
 8009930:	649a      	str	r2, [r3, #72]	; 0x48
 8009932:	e078      	b.n	8009a26 <OSPI_ConfigCmd+0x2e2>
    }
    else
    {
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 8009934:	683b      	ldr	r3, [r7, #0]
 8009936:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009938:	2b00      	cmp	r3, #0
 800993a:	d017      	beq.n	800996c <OSPI_ConfigCmd+0x228>
      {
        /* ---- Command with instruction and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE | OCTOSPI_CCR_IDTR | OCTOSPI_CCR_ISIZE |
 800993c:	69bb      	ldr	r3, [r7, #24]
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8009944:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8009948:	683a      	ldr	r2, [r7, #0]
 800994a:	68d1      	ldr	r1, [r2, #12]
 800994c:	683a      	ldr	r2, [r7, #0]
 800994e:	6952      	ldr	r2, [r2, #20]
 8009950:	4311      	orrs	r1, r2
 8009952:	683a      	ldr	r2, [r7, #0]
 8009954:	6912      	ldr	r2, [r2, #16]
 8009956:	4311      	orrs	r1, r2
 8009958:	683a      	ldr	r2, [r7, #0]
 800995a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800995c:	4311      	orrs	r1, r2
 800995e:	683a      	ldr	r2, [r7, #0]
 8009960:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8009962:	430a      	orrs	r2, r1
 8009964:	431a      	orrs	r2, r3
 8009966:	69bb      	ldr	r3, [r7, #24]
 8009968:	601a      	str	r2, [r3, #0]
 800996a:	e01d      	b.n	80099a8 <OSPI_ConfigCmd+0x264>
      else
      {
        /* ---- Command with only instruction ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE | OCTOSPI_CCR_IDTR | OCTOSPI_CCR_ISIZE),
 800996c:	69bb      	ldr	r3, [r7, #24]
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8009974:	683b      	ldr	r3, [r7, #0]
 8009976:	68d9      	ldr	r1, [r3, #12]
 8009978:	683b      	ldr	r3, [r7, #0]
 800997a:	695b      	ldr	r3, [r3, #20]
 800997c:	4319      	orrs	r1, r3
 800997e:	683b      	ldr	r3, [r7, #0]
 8009980:	691b      	ldr	r3, [r3, #16]
 8009982:	430b      	orrs	r3, r1
 8009984:	431a      	orrs	r2, r3
 8009986:	69bb      	ldr	r3, [r7, #24]
 8009988:	601a      	str	r2, [r3, #0]
                   (cmd->InstructionMode | cmd->InstructionDtrMode | cmd->InstructionSize));

        /* The DHQC bit is linked with DDTR bit which should be activated */
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800998e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009992:	d109      	bne.n	80099a8 <OSPI_ConfigCmd+0x264>
            (cmd->InstructionDtrMode == HAL_OSPI_INSTRUCTION_DTR_ENABLE))
 8009994:	683b      	ldr	r3, [r7, #0]
 8009996:	695b      	ldr	r3, [r3, #20]
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 8009998:	2b08      	cmp	r3, #8
 800999a:	d105      	bne.n	80099a8 <OSPI_ConfigCmd+0x264>
        {
          MODIFY_REG((*ccr_reg), OCTOSPI_CCR_DDTR, HAL_OSPI_DATA_DTR_ENABLE);
 800999c:	69bb      	ldr	r3, [r7, #24]
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80099a4:	69bb      	ldr	r3, [r7, #24]
 80099a6:	601a      	str	r2, [r3, #0]
        }
      }

      /* Configure the IR register with the instruction value */
      *ir_reg = cmd->Instruction;
 80099a8:	683b      	ldr	r3, [r7, #0]
 80099aa:	689a      	ldr	r2, [r3, #8]
 80099ac:	693b      	ldr	r3, [r7, #16]
 80099ae:	601a      	str	r2, [r3, #0]
 80099b0:	e039      	b.n	8009a26 <OSPI_ConfigCmd+0x2e2>

    }
  }
  else
  {
    if (cmd->AddressMode != HAL_OSPI_ADDRESS_NONE)
 80099b2:	683b      	ldr	r3, [r7, #0]
 80099b4:	69db      	ldr	r3, [r3, #28]
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	d030      	beq.n	8009a1c <OSPI_ConfigCmd+0x2d8>
    {
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 80099ba:	683b      	ldr	r3, [r7, #0]
 80099bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099be:	2b00      	cmp	r3, #0
 80099c0:	d017      	beq.n	80099f2 <OSPI_ConfigCmd+0x2ae>
      {
        /* ---- Command with address and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE |
 80099c2:	69bb      	ldr	r3, [r7, #24]
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 80099ca:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80099ce:	683a      	ldr	r2, [r7, #0]
 80099d0:	69d1      	ldr	r1, [r2, #28]
 80099d2:	683a      	ldr	r2, [r7, #0]
 80099d4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80099d6:	4311      	orrs	r1, r2
 80099d8:	683a      	ldr	r2, [r7, #0]
 80099da:	6a12      	ldr	r2, [r2, #32]
 80099dc:	4311      	orrs	r1, r2
 80099de:	683a      	ldr	r2, [r7, #0]
 80099e0:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80099e2:	4311      	orrs	r1, r2
 80099e4:	683a      	ldr	r2, [r7, #0]
 80099e6:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80099e8:	430a      	orrs	r2, r1
 80099ea:	431a      	orrs	r2, r3
 80099ec:	69bb      	ldr	r3, [r7, #24]
 80099ee:	601a      	str	r2, [r3, #0]
 80099f0:	e00e      	b.n	8009a10 <OSPI_ConfigCmd+0x2cc>
      else
      {
        /* ---- Command with only address ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE),
 80099f2:	69bb      	ldr	r3, [r7, #24]
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80099fa:	683b      	ldr	r3, [r7, #0]
 80099fc:	69d9      	ldr	r1, [r3, #28]
 80099fe:	683b      	ldr	r3, [r7, #0]
 8009a00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a02:	4319      	orrs	r1, r3
 8009a04:	683b      	ldr	r3, [r7, #0]
 8009a06:	6a1b      	ldr	r3, [r3, #32]
 8009a08:	430b      	orrs	r3, r1
 8009a0a:	431a      	orrs	r2, r3
 8009a0c:	69bb      	ldr	r3, [r7, #24]
 8009a0e:	601a      	str	r2, [r3, #0]
                   (cmd->AddressMode | cmd->AddressDtrMode | cmd->AddressSize));
      }

      /* Configure the AR register with the instruction value */
      hospi->Instance->AR = cmd->Address;
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	683a      	ldr	r2, [r7, #0]
 8009a16:	6992      	ldr	r2, [r2, #24]
 8009a18:	649a      	str	r2, [r3, #72]	; 0x48
 8009a1a:	e004      	b.n	8009a26 <OSPI_ConfigCmd+0x2e2>
    }
    else
    {
      /* ---- Invalid command configuration (no instruction, no address) ---- */
      status = HAL_ERROR;
 8009a1c:	2301      	movs	r3, #1
 8009a1e:	77fb      	strb	r3, [r7, #31]
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	2208      	movs	r2, #8
 8009a24:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }

  /* Return function status */
  return status;
 8009a26:	7ffb      	ldrb	r3, [r7, #31]
}
 8009a28:	4618      	mov	r0, r3
 8009a2a:	3724      	adds	r7, #36	; 0x24
 8009a2c:	46bd      	mov	sp, r7
 8009a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a32:	4770      	bx	lr
 8009a34:	f0ffc0c0 	.word	0xf0ffc0c0

08009a38 <OSPIM_GetConfig>:
  * @param  instance_nb : number of the instance
  * @param  cfg         : configuration of the IO Manager for the instance
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPIM_GetConfig(uint8_t instance_nb, OSPIM_CfgTypeDef *cfg)
{
 8009a38:	b480      	push	{r7}
 8009a3a:	b087      	sub	sp, #28
 8009a3c:	af00      	add	r7, sp, #0
 8009a3e:	4603      	mov	r3, r0
 8009a40:	6039      	str	r1, [r7, #0]
 8009a42:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 8009a44:	2300      	movs	r3, #0
 8009a46:	75fb      	strb	r3, [r7, #23]
  uint32_t reg;
  uint32_t value = 0U;
 8009a48:	2300      	movs	r3, #0
 8009a4a:	613b      	str	r3, [r7, #16]
  uint32_t index;

  if ((instance_nb == 0U) || (instance_nb > OSPI_NB_INSTANCE) || (cfg == NULL))
 8009a4c:	79fb      	ldrb	r3, [r7, #7]
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	d005      	beq.n	8009a5e <OSPIM_GetConfig+0x26>
 8009a52:	79fb      	ldrb	r3, [r7, #7]
 8009a54:	2b02      	cmp	r3, #2
 8009a56:	d802      	bhi.n	8009a5e <OSPIM_GetConfig+0x26>
 8009a58:	683b      	ldr	r3, [r7, #0]
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	d102      	bne.n	8009a64 <OSPIM_GetConfig+0x2c>
  {
    /* Invalid parameter -> error returned */
    status = HAL_ERROR;
 8009a5e:	2301      	movs	r3, #1
 8009a60:	75fb      	strb	r3, [r7, #23]
 8009a62:	e098      	b.n	8009b96 <OSPIM_GetConfig+0x15e>
  }
  else
  {
    /* Initialize the structure */
    cfg->ClkPort    = 0U;
 8009a64:	683b      	ldr	r3, [r7, #0]
 8009a66:	2200      	movs	r2, #0
 8009a68:	601a      	str	r2, [r3, #0]
    cfg->DQSPort    = 0U;
 8009a6a:	683b      	ldr	r3, [r7, #0]
 8009a6c:	2200      	movs	r2, #0
 8009a6e:	605a      	str	r2, [r3, #4]
    cfg->NCSPort    = 0U;
 8009a70:	683b      	ldr	r3, [r7, #0]
 8009a72:	2200      	movs	r2, #0
 8009a74:	609a      	str	r2, [r3, #8]
    cfg->IOLowPort  = 0U;
 8009a76:	683b      	ldr	r3, [r7, #0]
 8009a78:	2200      	movs	r2, #0
 8009a7a:	60da      	str	r2, [r3, #12]
    cfg->IOHighPort = 0U;
 8009a7c:	683b      	ldr	r3, [r7, #0]
 8009a7e:	2200      	movs	r2, #0
 8009a80:	611a      	str	r2, [r3, #16]

    if (instance_nb == 2U)
 8009a82:	79fb      	ldrb	r3, [r7, #7]
 8009a84:	2b02      	cmp	r3, #2
 8009a86:	d10b      	bne.n	8009aa0 <OSPIM_GetConfig+0x68>
    {
      if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) == 0U)
 8009a88:	4b46      	ldr	r3, [pc, #280]	; (8009ba4 <OSPIM_GetConfig+0x16c>)
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	f003 0301 	and.w	r3, r3, #1
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	d102      	bne.n	8009a9a <OSPIM_GetConfig+0x62>
      {
        value = (OCTOSPIM_PCR_CLKSRC | OCTOSPIM_PCR_DQSSRC | OCTOSPIM_PCR_NCSSRC
 8009a94:	4b44      	ldr	r3, [pc, #272]	; (8009ba8 <OSPIM_GetConfig+0x170>)
 8009a96:	613b      	str	r3, [r7, #16]
 8009a98:	e002      	b.n	8009aa0 <OSPIM_GetConfig+0x68>
                 | OCTOSPIM_PCR_IOLSRC_1 | OCTOSPIM_PCR_IOHSRC_1);
      }
      else
      {
        value = OCTOSPIM_PCR_NCSSRC;
 8009a9a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009a9e:	613b      	str	r3, [r7, #16]
      }
    }

    /* Get the information about the instance */
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 8009aa0:	2300      	movs	r3, #0
 8009aa2:	60fb      	str	r3, [r7, #12]
 8009aa4:	e074      	b.n	8009b90 <OSPIM_GetConfig+0x158>
    {
      reg = OCTOSPIM->PCR[index];
 8009aa6:	4a3f      	ldr	r2, [pc, #252]	; (8009ba4 <OSPIM_GetConfig+0x16c>)
 8009aa8:	68fb      	ldr	r3, [r7, #12]
 8009aaa:	009b      	lsls	r3, r3, #2
 8009aac:	4413      	add	r3, r2
 8009aae:	685b      	ldr	r3, [r3, #4]
 8009ab0:	60bb      	str	r3, [r7, #8]

      if ((reg & OCTOSPIM_PCR_CLKEN) != 0U)
 8009ab2:	68bb      	ldr	r3, [r7, #8]
 8009ab4:	f003 0301 	and.w	r3, r3, #1
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	d00a      	beq.n	8009ad2 <OSPIM_GetConfig+0x9a>
      {
        /* The clock is enabled on this port */
        if ((reg & OCTOSPIM_PCR_CLKSRC) == (value & OCTOSPIM_PCR_CLKSRC))
 8009abc:	68ba      	ldr	r2, [r7, #8]
 8009abe:	693b      	ldr	r3, [r7, #16]
 8009ac0:	4053      	eors	r3, r2
 8009ac2:	f003 0302 	and.w	r3, r3, #2
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	d103      	bne.n	8009ad2 <OSPIM_GetConfig+0x9a>
        {
          /* The clock correspond to the instance passed as parameter */
          cfg->ClkPort = index + 1U;
 8009aca:	68fb      	ldr	r3, [r7, #12]
 8009acc:	1c5a      	adds	r2, r3, #1
 8009ace:	683b      	ldr	r3, [r7, #0]
 8009ad0:	601a      	str	r2, [r3, #0]
        }
      }

      if ((reg & OCTOSPIM_PCR_DQSEN) != 0U)
 8009ad2:	68bb      	ldr	r3, [r7, #8]
 8009ad4:	f003 0310 	and.w	r3, r3, #16
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	d00a      	beq.n	8009af2 <OSPIM_GetConfig+0xba>
      {
        /* The DQS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_DQSSRC) == (value & OCTOSPIM_PCR_DQSSRC))
 8009adc:	68ba      	ldr	r2, [r7, #8]
 8009ade:	693b      	ldr	r3, [r7, #16]
 8009ae0:	4053      	eors	r3, r2
 8009ae2:	f003 0320 	and.w	r3, r3, #32
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	d103      	bne.n	8009af2 <OSPIM_GetConfig+0xba>
        {
          /* The DQS correspond to the instance passed as parameter */
          cfg->DQSPort = index + 1U;
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	1c5a      	adds	r2, r3, #1
 8009aee:	683b      	ldr	r3, [r7, #0]
 8009af0:	605a      	str	r2, [r3, #4]
        }
      }

      if ((reg & OCTOSPIM_PCR_NCSEN) != 0U)
 8009af2:	68bb      	ldr	r3, [r7, #8]
 8009af4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	d00a      	beq.n	8009b12 <OSPIM_GetConfig+0xda>
      {
        /* The nCS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_NCSSRC) == (value & OCTOSPIM_PCR_NCSSRC))
 8009afc:	68ba      	ldr	r2, [r7, #8]
 8009afe:	693b      	ldr	r3, [r7, #16]
 8009b00:	4053      	eors	r3, r2
 8009b02:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	d103      	bne.n	8009b12 <OSPIM_GetConfig+0xda>
        {
          /* The nCS correspond to the instance passed as parameter */
          cfg->NCSPort = index + 1U;
 8009b0a:	68fb      	ldr	r3, [r7, #12]
 8009b0c:	1c5a      	adds	r2, r3, #1
 8009b0e:	683b      	ldr	r3, [r7, #0]
 8009b10:	609a      	str	r2, [r3, #8]
        }
      }

      if ((reg & OCTOSPIM_PCR_IOLEN) != 0U)
 8009b12:	68bb      	ldr	r3, [r7, #8]
 8009b14:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	d018      	beq.n	8009b4e <OSPIM_GetConfig+0x116>
      {
        /* The IO Low is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOLSRC_1) == (value & OCTOSPIM_PCR_IOLSRC_1))
 8009b1c:	68ba      	ldr	r2, [r7, #8]
 8009b1e:	693b      	ldr	r3, [r7, #16]
 8009b20:	4053      	eors	r3, r2
 8009b22:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	d111      	bne.n	8009b4e <OSPIM_GetConfig+0x116>
        {
          /* The IO Low correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOLSRC_0) == 0U)
 8009b2a:	68bb      	ldr	r3, [r7, #8]
 8009b2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	d106      	bne.n	8009b42 <OSPIM_GetConfig+0x10a>
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOLEN | (index + 1U));
 8009b34:	68fb      	ldr	r3, [r7, #12]
 8009b36:	3301      	adds	r3, #1
 8009b38:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8009b3c:	683b      	ldr	r3, [r7, #0]
 8009b3e:	60da      	str	r2, [r3, #12]
 8009b40:	e005      	b.n	8009b4e <OSPIM_GetConfig+0x116>
          }
          else
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOHEN | (index + 1U));
 8009b42:	68fb      	ldr	r3, [r7, #12]
 8009b44:	3301      	adds	r3, #1
 8009b46:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8009b4a:	683b      	ldr	r3, [r7, #0]
 8009b4c:	60da      	str	r2, [r3, #12]
          }
        }
      }

      if ((reg & OCTOSPIM_PCR_IOHEN) != 0U)
 8009b4e:	68bb      	ldr	r3, [r7, #8]
 8009b50:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	d018      	beq.n	8009b8a <OSPIM_GetConfig+0x152>
      {
        /* The IO High is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOHSRC_1) == (value & OCTOSPIM_PCR_IOHSRC_1))
 8009b58:	68ba      	ldr	r2, [r7, #8]
 8009b5a:	693b      	ldr	r3, [r7, #16]
 8009b5c:	4053      	eors	r3, r2
 8009b5e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	d111      	bne.n	8009b8a <OSPIM_GetConfig+0x152>
        {
          /* The IO High correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOHSRC_0) == 0U)
 8009b66:	68bb      	ldr	r3, [r7, #8]
 8009b68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	d106      	bne.n	8009b7e <OSPIM_GetConfig+0x146>
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOLEN | (index + 1U));
 8009b70:	68fb      	ldr	r3, [r7, #12]
 8009b72:	3301      	adds	r3, #1
 8009b74:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8009b78:	683b      	ldr	r3, [r7, #0]
 8009b7a:	611a      	str	r2, [r3, #16]
 8009b7c:	e005      	b.n	8009b8a <OSPIM_GetConfig+0x152>
          }
          else
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOHEN | (index + 1U));
 8009b7e:	68fb      	ldr	r3, [r7, #12]
 8009b80:	3301      	adds	r3, #1
 8009b82:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8009b86:	683b      	ldr	r3, [r7, #0]
 8009b88:	611a      	str	r2, [r3, #16]
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 8009b8a:	68fb      	ldr	r3, [r7, #12]
 8009b8c:	3301      	adds	r3, #1
 8009b8e:	60fb      	str	r3, [r7, #12]
 8009b90:	68fb      	ldr	r3, [r7, #12]
 8009b92:	2b01      	cmp	r3, #1
 8009b94:	d987      	bls.n	8009aa6 <OSPIM_GetConfig+0x6e>
      }
    }
  }

  /* Return function status */
  return status;
 8009b96:	7dfb      	ldrb	r3, [r7, #23]
}
 8009b98:	4618      	mov	r0, r3
 8009b9a:	371c      	adds	r7, #28
 8009b9c:	46bd      	mov	sp, r7
 8009b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ba2:	4770      	bx	lr
 8009ba4:	420c4000 	.word	0x420c4000
 8009ba8:	04040222 	.word	0x04040222

08009bac <HAL_OSPI_DLYB_SetConfig>:
  * @param  hospi   : OSPI handle.
  * @param  pdlyb_cfg: Pointer to DLYB configuration structure.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_OSPI_DLYB_SetConfig(OSPI_HandleTypeDef *hospi, HAL_OSPI_DLYB_CfgTypeDef  *pdlyb_cfg)
{
 8009bac:	b580      	push	{r7, lr}
 8009bae:	b084      	sub	sp, #16
 8009bb0:	af00      	add	r7, sp, #0
 8009bb2:	6078      	str	r0, [r7, #4]
 8009bb4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8009bb6:	2301      	movs	r3, #1
 8009bb8:	73fb      	strb	r3, [r7, #15]

  /* Enable OCTOSPI Free Running Clock (mandatory) */
  SET_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	681b      	ldr	r3, [r3, #0]
 8009bbe:	689a      	ldr	r2, [r3, #8]
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	f042 0202 	orr.w	r2, r2, #2
 8009bc8:	609a      	str	r2, [r3, #8]

  /* Update OCTOSPI state */
  hospi->State = HAL_OSPI_STATE_BUSY_CMD;
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	2208      	movs	r2, #8
 8009bce:	651a      	str	r2, [r3, #80]	; 0x50

  if (hospi->Instance == OCTOSPI1)
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	4a15      	ldr	r2, [pc, #84]	; (8009c2c <HAL_OSPI_DLYB_SetConfig+0x80>)
 8009bd6:	4293      	cmp	r3, r2
 8009bd8:	d109      	bne.n	8009bee <HAL_OSPI_DLYB_SetConfig+0x42>
  {
    /* Enable the DelayBlock */
    LL_DLYB_Enable(DLYB_OCTOSPI1);
 8009bda:	4815      	ldr	r0, [pc, #84]	; (8009c30 <HAL_OSPI_DLYB_SetConfig+0x84>)
 8009bdc:	f7fe fe46 	bl	800886c <LL_DLYB_Enable>

    /* Set the Delay Block configuration */
    LL_DLYB_SetDelay(DLYB_OCTOSPI1, pdlyb_cfg);
 8009be0:	6839      	ldr	r1, [r7, #0]
 8009be2:	4813      	ldr	r0, [pc, #76]	; (8009c30 <HAL_OSPI_DLYB_SetConfig+0x84>)
 8009be4:	f002 ff22 	bl	800ca2c <LL_DLYB_SetDelay>
    status = HAL_OK;
 8009be8:	2300      	movs	r3, #0
 8009bea:	73fb      	strb	r3, [r7, #15]
 8009bec:	e00d      	b.n	8009c0a <HAL_OSPI_DLYB_SetConfig+0x5e>
  }

  else if (hospi->Instance == OCTOSPI2)
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	4a10      	ldr	r2, [pc, #64]	; (8009c34 <HAL_OSPI_DLYB_SetConfig+0x88>)
 8009bf4:	4293      	cmp	r3, r2
 8009bf6:	d108      	bne.n	8009c0a <HAL_OSPI_DLYB_SetConfig+0x5e>
  {
    /* Enable the DelayBlock */
    LL_DLYB_Enable(DLYB_OCTOSPI2);
 8009bf8:	480f      	ldr	r0, [pc, #60]	; (8009c38 <HAL_OSPI_DLYB_SetConfig+0x8c>)
 8009bfa:	f7fe fe37 	bl	800886c <LL_DLYB_Enable>

    /* Set the Delay Block configuration */
    LL_DLYB_SetDelay(DLYB_OCTOSPI2, pdlyb_cfg);
 8009bfe:	6839      	ldr	r1, [r7, #0]
 8009c00:	480d      	ldr	r0, [pc, #52]	; (8009c38 <HAL_OSPI_DLYB_SetConfig+0x8c>)
 8009c02:	f002 ff13 	bl	800ca2c <LL_DLYB_SetDelay>
    status = HAL_OK;
 8009c06:	2300      	movs	r3, #0
 8009c08:	73fb      	strb	r3, [r7, #15]
  {
    /* Nothing to do */
  }

  /* Abort the current OCTOSPI operation if exist */
  (void)HAL_OSPI_Abort(hospi);
 8009c0a:	6878      	ldr	r0, [r7, #4]
 8009c0c:	f7fe ffe4 	bl	8008bd8 <HAL_OSPI_Abort>

  /* Disable Free Running Clock */
  CLEAR_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	689a      	ldr	r2, [r3, #8]
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	f022 0202 	bic.w	r2, r2, #2
 8009c1e:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return status;
 8009c20:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c22:	4618      	mov	r0, r3
 8009c24:	3710      	adds	r7, #16
 8009c26:	46bd      	mov	sp, r7
 8009c28:	bd80      	pop	{r7, pc}
 8009c2a:	bf00      	nop
 8009c2c:	420d1400 	.word	0x420d1400
 8009c30:	420cf000 	.word	0x420cf000
 8009c34:	420d2400 	.word	0x420d2400
 8009c38:	420cf400 	.word	0x420cf400

08009c3c <HAL_OSPI_DLYB_GetConfig>:
  * @param  hospi   : OSPI handle.
  * @param  pdlyb_cfg: Pointer to DLYB configuration structure.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_OSPI_DLYB_GetConfig(OSPI_HandleTypeDef *hospi, HAL_OSPI_DLYB_CfgTypeDef  *pdlyb_cfg)
{
 8009c3c:	b580      	push	{r7, lr}
 8009c3e:	b084      	sub	sp, #16
 8009c40:	af00      	add	r7, sp, #0
 8009c42:	6078      	str	r0, [r7, #4]
 8009c44:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8009c46:	2301      	movs	r3, #1
 8009c48:	73fb      	strb	r3, [r7, #15]

  if (hospi->Instance == OCTOSPI1)
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	681b      	ldr	r3, [r3, #0]
 8009c4e:	4a0d      	ldr	r2, [pc, #52]	; (8009c84 <HAL_OSPI_DLYB_GetConfig+0x48>)
 8009c50:	4293      	cmp	r3, r2
 8009c52:	d106      	bne.n	8009c62 <HAL_OSPI_DLYB_GetConfig+0x26>
  {
    LL_DLYB_GetDelay(DLYB_OCTOSPI1, pdlyb_cfg);
 8009c54:	6839      	ldr	r1, [r7, #0]
 8009c56:	480c      	ldr	r0, [pc, #48]	; (8009c88 <HAL_OSPI_DLYB_GetConfig+0x4c>)
 8009c58:	f002 ff07 	bl	800ca6a <LL_DLYB_GetDelay>
    status = HAL_OK;
 8009c5c:	2300      	movs	r3, #0
 8009c5e:	73fb      	strb	r3, [r7, #15]
 8009c60:	e00a      	b.n	8009c78 <HAL_OSPI_DLYB_GetConfig+0x3c>
  }
  else if (hospi->Instance == OCTOSPI2)
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	4a09      	ldr	r2, [pc, #36]	; (8009c8c <HAL_OSPI_DLYB_GetConfig+0x50>)
 8009c68:	4293      	cmp	r3, r2
 8009c6a:	d105      	bne.n	8009c78 <HAL_OSPI_DLYB_GetConfig+0x3c>
  {
    LL_DLYB_GetDelay(DLYB_OCTOSPI2, pdlyb_cfg);
 8009c6c:	6839      	ldr	r1, [r7, #0]
 8009c6e:	4808      	ldr	r0, [pc, #32]	; (8009c90 <HAL_OSPI_DLYB_GetConfig+0x54>)
 8009c70:	f002 fefb 	bl	800ca6a <LL_DLYB_GetDelay>
    status = HAL_OK;
 8009c74:	2300      	movs	r3, #0
 8009c76:	73fb      	strb	r3, [r7, #15]
  {
    /* Nothing to do */
  }

  /* Return function status */
  return status;
 8009c78:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c7a:	4618      	mov	r0, r3
 8009c7c:	3710      	adds	r7, #16
 8009c7e:	46bd      	mov	sp, r7
 8009c80:	bd80      	pop	{r7, pc}
 8009c82:	bf00      	nop
 8009c84:	420d1400 	.word	0x420d1400
 8009c88:	420cf000 	.word	0x420cf000
 8009c8c:	420d2400 	.word	0x420d2400
 8009c90:	420cf400 	.word	0x420cf400

08009c94 <HAL_OSPI_DLYB_GetClockPeriod>:
  * @brief  Get the Delay line length value.
  * @param  hospi   : OSPI handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_OSPI_DLYB_GetClockPeriod(OSPI_HandleTypeDef *hospi, HAL_OSPI_DLYB_CfgTypeDef  *pdlyb_cfg)
{
 8009c94:	b580      	push	{r7, lr}
 8009c96:	b084      	sub	sp, #16
 8009c98:	af00      	add	r7, sp, #0
 8009c9a:	6078      	str	r0, [r7, #4]
 8009c9c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8009c9e:	2301      	movs	r3, #1
 8009ca0:	73fb      	strb	r3, [r7, #15]

  /* Enable OCTOSPI Free Running Clock (mandatory) */
  SET_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	689a      	ldr	r2, [r3, #8]
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	f042 0202 	orr.w	r2, r2, #2
 8009cb0:	609a      	str	r2, [r3, #8]

  /* Update OCTOSPI state */
  hospi->State = HAL_OSPI_STATE_BUSY_CMD;
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	2208      	movs	r2, #8
 8009cb6:	651a      	str	r2, [r3, #80]	; 0x50

  if (hospi->Instance == OCTOSPI1)
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	4a1b      	ldr	r2, [pc, #108]	; (8009d2c <HAL_OSPI_DLYB_GetClockPeriod+0x98>)
 8009cbe:	4293      	cmp	r3, r2
 8009cc0:	d10f      	bne.n	8009ce2 <HAL_OSPI_DLYB_GetClockPeriod+0x4e>
  {
    /* Enable the DelayBlock */
    LL_DLYB_Enable(DLYB_OCTOSPI1);
 8009cc2:	481b      	ldr	r0, [pc, #108]	; (8009d30 <HAL_OSPI_DLYB_GetClockPeriod+0x9c>)
 8009cc4:	f7fe fdd2 	bl	800886c <LL_DLYB_Enable>

    /* try to detect Period */
    if (LL_DLYB_GetClockPeriod(DLYB_OCTOSPI1, pdlyb_cfg) == (uint32_t)SUCCESS)
 8009cc8:	6839      	ldr	r1, [r7, #0]
 8009cca:	4819      	ldr	r0, [pc, #100]	; (8009d30 <HAL_OSPI_DLYB_GetClockPeriod+0x9c>)
 8009ccc:	f002 fee6 	bl	800ca9c <LL_DLYB_GetClockPeriod>
 8009cd0:	4603      	mov	r3, r0
 8009cd2:	2b00      	cmp	r3, #0
 8009cd4:	d101      	bne.n	8009cda <HAL_OSPI_DLYB_GetClockPeriod+0x46>
    {
      status = HAL_OK;
 8009cd6:	2300      	movs	r3, #0
 8009cd8:	73fb      	strb	r3, [r7, #15]
    }

    /* Disable the DelayBlock */
    LL_DLYB_Disable(DLYB_OCTOSPI1);
 8009cda:	4815      	ldr	r0, [pc, #84]	; (8009d30 <HAL_OSPI_DLYB_GetClockPeriod+0x9c>)
 8009cdc:	f7fe fdd6 	bl	800888c <LL_DLYB_Disable>
 8009ce0:	e013      	b.n	8009d0a <HAL_OSPI_DLYB_GetClockPeriod+0x76>
  }

  else if (hospi->Instance == OCTOSPI2)
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	4a13      	ldr	r2, [pc, #76]	; (8009d34 <HAL_OSPI_DLYB_GetClockPeriod+0xa0>)
 8009ce8:	4293      	cmp	r3, r2
 8009cea:	d10e      	bne.n	8009d0a <HAL_OSPI_DLYB_GetClockPeriod+0x76>
  {
    /* Enable the DelayBlock */
    LL_DLYB_Enable(DLYB_OCTOSPI2);
 8009cec:	4812      	ldr	r0, [pc, #72]	; (8009d38 <HAL_OSPI_DLYB_GetClockPeriod+0xa4>)
 8009cee:	f7fe fdbd 	bl	800886c <LL_DLYB_Enable>

    /* try to detect Period */
    if (LL_DLYB_GetClockPeriod(DLYB_OCTOSPI2, pdlyb_cfg) == (uint32_t)SUCCESS)
 8009cf2:	6839      	ldr	r1, [r7, #0]
 8009cf4:	4810      	ldr	r0, [pc, #64]	; (8009d38 <HAL_OSPI_DLYB_GetClockPeriod+0xa4>)
 8009cf6:	f002 fed1 	bl	800ca9c <LL_DLYB_GetClockPeriod>
 8009cfa:	4603      	mov	r3, r0
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	d101      	bne.n	8009d04 <HAL_OSPI_DLYB_GetClockPeriod+0x70>
    {
      status = HAL_OK;
 8009d00:	2300      	movs	r3, #0
 8009d02:	73fb      	strb	r3, [r7, #15]
    }

    /* Disable the DelayBlock */
    LL_DLYB_Disable(DLYB_OCTOSPI2);
 8009d04:	480c      	ldr	r0, [pc, #48]	; (8009d38 <HAL_OSPI_DLYB_GetClockPeriod+0xa4>)
 8009d06:	f7fe fdc1 	bl	800888c <LL_DLYB_Disable>
  {
    /* Nothing to do */
  }

  /* Abort the current OctoSPI operation if exist */
  (void)HAL_OSPI_Abort(hospi);
 8009d0a:	6878      	ldr	r0, [r7, #4]
 8009d0c:	f7fe ff64 	bl	8008bd8 <HAL_OSPI_Abort>

  /* Disable Free Running Clock */
  CLEAR_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	689a      	ldr	r2, [r3, #8]
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	f022 0202 	bic.w	r2, r2, #2
 8009d1e:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return status;
 8009d20:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d22:	4618      	mov	r0, r3
 8009d24:	3710      	adds	r7, #16
 8009d26:	46bd      	mov	sp, r7
 8009d28:	bd80      	pop	{r7, pc}
 8009d2a:	bf00      	nop
 8009d2c:	420d1400 	.word	0x420d1400
 8009d30:	420cf000 	.word	0x420cf000
 8009d34:	420d2400 	.word	0x420d2400
 8009d38:	420cf400 	.word	0x420cf400

08009d3c <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8009d3c:	b480      	push	{r7}
 8009d3e:	b085      	sub	sp, #20
 8009d40:	af00      	add	r7, sp, #0
 8009d42:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 8009d44:	4b34      	ldr	r3, [pc, #208]	; (8009e18 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 8009d46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009d48:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8009d4c:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 8009d4e:	68ba      	ldr	r2, [r7, #8]
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	429a      	cmp	r2, r3
 8009d54:	d101      	bne.n	8009d5a <HAL_PWREx_ControlVoltageScaling+0x1e>
  {
    return HAL_OK;
 8009d56:	2300      	movs	r3, #0
 8009d58:	e057      	b.n	8009e0a <HAL_PWREx_ControlVoltageScaling+0xce>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009d60:	d90a      	bls.n	8009d78 <HAL_PWREx_ControlVoltageScaling+0x3c>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 8009d62:	4b2d      	ldr	r3, [pc, #180]	; (8009e18 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 8009d64:	68db      	ldr	r3, [r3, #12]
 8009d66:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	4313      	orrs	r3, r2
 8009d6e:	4a2a      	ldr	r2, [pc, #168]	; (8009e18 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 8009d70:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009d74:	60d3      	str	r3, [r2, #12]
 8009d76:	e007      	b.n	8009d88 <HAL_PWREx_ControlVoltageScaling+0x4c>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 8009d78:	4b27      	ldr	r3, [pc, #156]	; (8009e18 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 8009d7a:	68db      	ldr	r3, [r3, #12]
 8009d7c:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8009d80:	4925      	ldr	r1, [pc, #148]	; (8009e18 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	4313      	orrs	r3, r2
 8009d86:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8009d88:	4b24      	ldr	r3, [pc, #144]	; (8009e1c <HAL_PWREx_ControlVoltageScaling+0xe0>)
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	4a24      	ldr	r2, [pc, #144]	; (8009e20 <HAL_PWREx_ControlVoltageScaling+0xe4>)
 8009d8e:	fba2 2303 	umull	r2, r3, r2, r3
 8009d92:	099b      	lsrs	r3, r3, #6
 8009d94:	2232      	movs	r2, #50	; 0x32
 8009d96:	fb02 f303 	mul.w	r3, r2, r3
 8009d9a:	4a21      	ldr	r2, [pc, #132]	; (8009e20 <HAL_PWREx_ControlVoltageScaling+0xe4>)
 8009d9c:	fba2 2303 	umull	r2, r3, r2, r3
 8009da0:	099b      	lsrs	r3, r3, #6
 8009da2:	3301      	adds	r3, #1
 8009da4:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8009da6:	e002      	b.n	8009dae <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    timeout--;
 8009da8:	68fb      	ldr	r3, [r7, #12]
 8009daa:	3b01      	subs	r3, #1
 8009dac:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8009dae:	4b1a      	ldr	r3, [pc, #104]	; (8009e18 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 8009db0:	68db      	ldr	r3, [r3, #12]
 8009db2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009db6:	2b00      	cmp	r3, #0
 8009db8:	d102      	bne.n	8009dc0 <HAL_PWREx_ControlVoltageScaling+0x84>
 8009dba:	68fb      	ldr	r3, [r7, #12]
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	d1f3      	bne.n	8009da8 <HAL_PWREx_ControlVoltageScaling+0x6c>
  }

  /* Check time out */
  if (timeout != 0U)
 8009dc0:	68fb      	ldr	r3, [r7, #12]
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	d01b      	beq.n	8009dfe <HAL_PWREx_ControlVoltageScaling+0xc2>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8009dc6:	4b15      	ldr	r3, [pc, #84]	; (8009e1c <HAL_PWREx_ControlVoltageScaling+0xe0>)
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	4a15      	ldr	r2, [pc, #84]	; (8009e20 <HAL_PWREx_ControlVoltageScaling+0xe4>)
 8009dcc:	fba2 2303 	umull	r2, r3, r2, r3
 8009dd0:	099b      	lsrs	r3, r3, #6
 8009dd2:	2232      	movs	r2, #50	; 0x32
 8009dd4:	fb02 f303 	mul.w	r3, r2, r3
 8009dd8:	4a11      	ldr	r2, [pc, #68]	; (8009e20 <HAL_PWREx_ControlVoltageScaling+0xe4>)
 8009dda:	fba2 2303 	umull	r2, r3, r2, r3
 8009dde:	099b      	lsrs	r3, r3, #6
 8009de0:	3301      	adds	r3, #1
 8009de2:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8009de4:	e002      	b.n	8009dec <HAL_PWREx_ControlVoltageScaling+0xb0>
    {
      timeout--;
 8009de6:	68fb      	ldr	r3, [r7, #12]
 8009de8:	3b01      	subs	r3, #1
 8009dea:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8009dec:	4b0a      	ldr	r3, [pc, #40]	; (8009e18 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 8009dee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009df0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	d102      	bne.n	8009dfe <HAL_PWREx_ControlVoltageScaling+0xc2>
 8009df8:	68fb      	ldr	r3, [r7, #12]
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	d1f3      	bne.n	8009de6 <HAL_PWREx_ControlVoltageScaling+0xaa>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 8009dfe:	68fb      	ldr	r3, [r7, #12]
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	d101      	bne.n	8009e08 <HAL_PWREx_ControlVoltageScaling+0xcc>
  {
    return HAL_TIMEOUT;
 8009e04:	2303      	movs	r3, #3
 8009e06:	e000      	b.n	8009e0a <HAL_PWREx_ControlVoltageScaling+0xce>
  }

  return HAL_OK;
 8009e08:	2300      	movs	r3, #0
}
 8009e0a:	4618      	mov	r0, r3
 8009e0c:	3714      	adds	r7, #20
 8009e0e:	46bd      	mov	sp, r7
 8009e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e14:	4770      	bx	lr
 8009e16:	bf00      	nop
 8009e18:	46020800 	.word	0x46020800
 8009e1c:	20000004 	.word	0x20000004
 8009e20:	10624dd3 	.word	0x10624dd3

08009e24 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8009e24:	b480      	push	{r7}
 8009e26:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 8009e28:	4b04      	ldr	r3, [pc, #16]	; (8009e3c <HAL_PWREx_GetVoltageRange+0x18>)
 8009e2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009e2c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 8009e30:	4618      	mov	r0, r3
 8009e32:	46bd      	mov	sp, r7
 8009e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e38:	4770      	bx	lr
 8009e3a:	bf00      	nop
 8009e3c:	46020800 	.word	0x46020800

08009e40 <HAL_PWREx_ConfigSupply>:
  *                        @arg PWR_LDO_SUPPLY  : The LDO regulator supplies the Vcore Power Domains.
  *                        @arg PWR_SMPS_SUPPLY : The SMPS regulator supplies the Vcore Power Domains.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply(uint32_t SupplySource)
{
 8009e40:	b480      	push	{r7}
 8009e42:	b085      	sub	sp, #20
 8009e44:	af00      	add	r7, sp, #0
 8009e46:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_SUPPLY(SupplySource));

  /* Set maximum time out */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8009e48:	4b22      	ldr	r3, [pc, #136]	; (8009ed4 <HAL_PWREx_ConfigSupply+0x94>)
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	4a22      	ldr	r2, [pc, #136]	; (8009ed8 <HAL_PWREx_ConfigSupply+0x98>)
 8009e4e:	fba2 2303 	umull	r2, r3, r2, r3
 8009e52:	099b      	lsrs	r3, r3, #6
 8009e54:	2232      	movs	r2, #50	; 0x32
 8009e56:	fb02 f303 	mul.w	r3, r2, r3
 8009e5a:	4a1f      	ldr	r2, [pc, #124]	; (8009ed8 <HAL_PWREx_ConfigSupply+0x98>)
 8009e5c:	fba2 2303 	umull	r2, r3, r2, r3
 8009e60:	099b      	lsrs	r3, r3, #6
 8009e62:	3301      	adds	r3, #1
 8009e64:	60fb      	str	r3, [r7, #12]

  /* Configure the LDO as system regulator supply */
  if (SupplySource == PWR_LDO_SUPPLY)
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	2b00      	cmp	r3, #0
 8009e6a:	d113      	bne.n	8009e94 <HAL_PWREx_ConfigSupply+0x54>
  {
    /* Set the power supply configuration */
    CLEAR_BIT(PWR->CR3, PWR_CR3_REGSEL);
 8009e6c:	4b1b      	ldr	r3, [pc, #108]	; (8009edc <HAL_PWREx_ConfigSupply+0x9c>)
 8009e6e:	689b      	ldr	r3, [r3, #8]
 8009e70:	4a1a      	ldr	r2, [pc, #104]	; (8009edc <HAL_PWREx_ConfigSupply+0x9c>)
 8009e72:	f023 0302 	bic.w	r3, r3, #2
 8009e76:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8009e78:	e002      	b.n	8009e80 <HAL_PWREx_ConfigSupply+0x40>
    {
      timeout--;
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	3b01      	subs	r3, #1
 8009e7e:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8009e80:	4b16      	ldr	r3, [pc, #88]	; (8009edc <HAL_PWREx_ConfigSupply+0x9c>)
 8009e82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009e84:	f003 0302 	and.w	r3, r3, #2
 8009e88:	2b02      	cmp	r3, #2
 8009e8a:	d116      	bne.n	8009eba <HAL_PWREx_ConfigSupply+0x7a>
 8009e8c:	68fb      	ldr	r3, [r7, #12]
 8009e8e:	2b00      	cmp	r3, #0
 8009e90:	d1f3      	bne.n	8009e7a <HAL_PWREx_ConfigSupply+0x3a>
 8009e92:	e012      	b.n	8009eba <HAL_PWREx_ConfigSupply+0x7a>
  }
  /* Configure the SMPS as system regulator supply */
  else
  {
    /* Set the power supply configuration */
    SET_BIT(PWR->CR3, PWR_CR3_REGSEL);
 8009e94:	4b11      	ldr	r3, [pc, #68]	; (8009edc <HAL_PWREx_ConfigSupply+0x9c>)
 8009e96:	689b      	ldr	r3, [r3, #8]
 8009e98:	4a10      	ldr	r2, [pc, #64]	; (8009edc <HAL_PWREx_ConfigSupply+0x9c>)
 8009e9a:	f043 0302 	orr.w	r3, r3, #2
 8009e9e:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8009ea0:	e002      	b.n	8009ea8 <HAL_PWREx_ConfigSupply+0x68>
    {
      timeout--;
 8009ea2:	68fb      	ldr	r3, [r7, #12]
 8009ea4:	3b01      	subs	r3, #1
 8009ea6:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8009ea8:	4b0c      	ldr	r3, [pc, #48]	; (8009edc <HAL_PWREx_ConfigSupply+0x9c>)
 8009eaa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009eac:	f003 0302 	and.w	r3, r3, #2
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	d102      	bne.n	8009eba <HAL_PWREx_ConfigSupply+0x7a>
 8009eb4:	68fb      	ldr	r3, [r7, #12]
 8009eb6:	2b00      	cmp	r3, #0
 8009eb8:	d1f3      	bne.n	8009ea2 <HAL_PWREx_ConfigSupply+0x62>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 8009eba:	68fb      	ldr	r3, [r7, #12]
 8009ebc:	2b00      	cmp	r3, #0
 8009ebe:	d101      	bne.n	8009ec4 <HAL_PWREx_ConfigSupply+0x84>
  {
    return HAL_TIMEOUT;
 8009ec0:	2303      	movs	r3, #3
 8009ec2:	e000      	b.n	8009ec6 <HAL_PWREx_ConfigSupply+0x86>
  }

  return HAL_OK;
 8009ec4:	2300      	movs	r3, #0
}
 8009ec6:	4618      	mov	r0, r3
 8009ec8:	3714      	adds	r7, #20
 8009eca:	46bd      	mov	sp, r7
 8009ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ed0:	4770      	bx	lr
 8009ed2:	bf00      	nop
 8009ed4:	20000004 	.word	0x20000004
 8009ed8:	10624dd3 	.word	0x10624dd3
 8009edc:	46020800 	.word	0x46020800

08009ee0 <HAL_PWREx_EnableVddIO2>:
  * @note   Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8009ee0:	b480      	push	{r7}
 8009ee2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_IO2SV);
 8009ee4:	4b05      	ldr	r3, [pc, #20]	; (8009efc <HAL_PWREx_EnableVddIO2+0x1c>)
 8009ee6:	691b      	ldr	r3, [r3, #16]
 8009ee8:	4a04      	ldr	r2, [pc, #16]	; (8009efc <HAL_PWREx_EnableVddIO2+0x1c>)
 8009eea:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009eee:	6113      	str	r3, [r2, #16]
}
 8009ef0:	bf00      	nop
 8009ef2:	46bd      	mov	sp, r7
 8009ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ef8:	4770      	bx	lr
 8009efa:	bf00      	nop
 8009efc:	46020800 	.word	0x46020800

08009f00 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 8009f00:	b580      	push	{r7, lr}
 8009f02:	b08e      	sub	sp, #56	; 0x38
 8009f04:	af00      	add	r7, sp, #0
 8009f06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 8009f08:	2300      	movs	r3, #0
 8009f0a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	d102      	bne.n	8009f1a <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8009f14:	2301      	movs	r3, #1
 8009f16:	f000 bec3 	b.w	800aca0 <HAL_RCC_OscConfig+0xda0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009f1a:	4b9c      	ldr	r3, [pc, #624]	; (800a18c <HAL_RCC_OscConfig+0x28c>)
 8009f1c:	69db      	ldr	r3, [r3, #28]
 8009f1e:	f003 030c 	and.w	r3, r3, #12
 8009f22:	633b      	str	r3, [r7, #48]	; 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8009f24:	4b99      	ldr	r3, [pc, #612]	; (800a18c <HAL_RCC_OscConfig+0x28c>)
 8009f26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f28:	f003 0303 	and.w	r3, r3, #3
 8009f2c:	62fb      	str	r3, [r7, #44]	; 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	f003 0310 	and.w	r3, r3, #16
 8009f36:	2b00      	cmp	r3, #0
 8009f38:	f000 8172 	beq.w	800a220 <HAL_RCC_OscConfig+0x320>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8009f3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	d007      	beq.n	8009f52 <HAL_RCC_OscConfig+0x52>
 8009f42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f44:	2b0c      	cmp	r3, #12
 8009f46:	f040 80e4 	bne.w	800a112 <HAL_RCC_OscConfig+0x212>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8009f4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f4c:	2b01      	cmp	r3, #1
 8009f4e:	f040 80e0 	bne.w	800a112 <HAL_RCC_OscConfig+0x212>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U) && (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8009f52:	4b8e      	ldr	r3, [pc, #568]	; (800a18c <HAL_RCC_OscConfig+0x28c>)
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	f003 0304 	and.w	r3, r3, #4
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	d006      	beq.n	8009f6c <HAL_RCC_OscConfig+0x6c>
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	69db      	ldr	r3, [r3, #28]
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	d102      	bne.n	8009f6c <HAL_RCC_OscConfig+0x6c>
      {
        return HAL_ERROR;
 8009f66:	2301      	movs	r3, #1
 8009f68:	f000 be9a 	b.w	800aca0 <HAL_RCC_OscConfig+0xda0>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009f70:	4b86      	ldr	r3, [pc, #536]	; (800a18c <HAL_RCC_OscConfig+0x28c>)
 8009f72:	689b      	ldr	r3, [r3, #8]
 8009f74:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	d004      	beq.n	8009f86 <HAL_RCC_OscConfig+0x86>
 8009f7c:	4b83      	ldr	r3, [pc, #524]	; (800a18c <HAL_RCC_OscConfig+0x28c>)
 8009f7e:	689b      	ldr	r3, [r3, #8]
 8009f80:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8009f84:	e005      	b.n	8009f92 <HAL_RCC_OscConfig+0x92>
 8009f86:	4b81      	ldr	r3, [pc, #516]	; (800a18c <HAL_RCC_OscConfig+0x28c>)
 8009f88:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8009f8c:	041b      	lsls	r3, r3, #16
 8009f8e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8009f92:	4293      	cmp	r3, r2
 8009f94:	d255      	bcs.n	800a042 <HAL_RCC_OscConfig+0x142>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8009f96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	d10a      	bne.n	8009fb2 <HAL_RCC_OscConfig+0xb2>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fa0:	4618      	mov	r0, r3
 8009fa2:	f001 f9e3 	bl	800b36c <RCC_SetFlashLatencyFromMSIRange>
 8009fa6:	4603      	mov	r3, r0
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	d002      	beq.n	8009fb2 <HAL_RCC_OscConfig+0xb2>
            {
              return HAL_ERROR;
 8009fac:	2301      	movs	r3, #1
 8009fae:	f000 be77 	b.w	800aca0 <HAL_RCC_OscConfig+0xda0>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8009fb2:	4b76      	ldr	r3, [pc, #472]	; (800a18c <HAL_RCC_OscConfig+0x28c>)
 8009fb4:	689b      	ldr	r3, [r3, #8]
 8009fb6:	4a75      	ldr	r2, [pc, #468]	; (800a18c <HAL_RCC_OscConfig+0x28c>)
 8009fb8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009fbc:	6093      	str	r3, [r2, #8]
 8009fbe:	4b73      	ldr	r3, [pc, #460]	; (800a18c <HAL_RCC_OscConfig+0x28c>)
 8009fc0:	689b      	ldr	r3, [r3, #8]
 8009fc2:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fca:	4970      	ldr	r1, [pc, #448]	; (800a18c <HAL_RCC_OscConfig+0x28c>)
 8009fcc:	4313      	orrs	r3, r2
 8009fce:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fd4:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8009fd8:	d309      	bcc.n	8009fee <HAL_RCC_OscConfig+0xee>
 8009fda:	4b6c      	ldr	r3, [pc, #432]	; (800a18c <HAL_RCC_OscConfig+0x28c>)
 8009fdc:	68db      	ldr	r3, [r3, #12]
 8009fde:	f023 021f 	bic.w	r2, r3, #31
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	6a1b      	ldr	r3, [r3, #32]
 8009fe6:	4969      	ldr	r1, [pc, #420]	; (800a18c <HAL_RCC_OscConfig+0x28c>)
 8009fe8:	4313      	orrs	r3, r2
 8009fea:	60cb      	str	r3, [r1, #12]
 8009fec:	e07e      	b.n	800a0ec <HAL_RCC_OscConfig+0x1ec>
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	da0a      	bge.n	800a00c <HAL_RCC_OscConfig+0x10c>
 8009ff6:	4b65      	ldr	r3, [pc, #404]	; (800a18c <HAL_RCC_OscConfig+0x28c>)
 8009ff8:	68db      	ldr	r3, [r3, #12]
 8009ffa:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	6a1b      	ldr	r3, [r3, #32]
 800a002:	015b      	lsls	r3, r3, #5
 800a004:	4961      	ldr	r1, [pc, #388]	; (800a18c <HAL_RCC_OscConfig+0x28c>)
 800a006:	4313      	orrs	r3, r2
 800a008:	60cb      	str	r3, [r1, #12]
 800a00a:	e06f      	b.n	800a0ec <HAL_RCC_OscConfig+0x1ec>
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a010:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a014:	d30a      	bcc.n	800a02c <HAL_RCC_OscConfig+0x12c>
 800a016:	4b5d      	ldr	r3, [pc, #372]	; (800a18c <HAL_RCC_OscConfig+0x28c>)
 800a018:	68db      	ldr	r3, [r3, #12]
 800a01a:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	6a1b      	ldr	r3, [r3, #32]
 800a022:	029b      	lsls	r3, r3, #10
 800a024:	4959      	ldr	r1, [pc, #356]	; (800a18c <HAL_RCC_OscConfig+0x28c>)
 800a026:	4313      	orrs	r3, r2
 800a028:	60cb      	str	r3, [r1, #12]
 800a02a:	e05f      	b.n	800a0ec <HAL_RCC_OscConfig+0x1ec>
 800a02c:	4b57      	ldr	r3, [pc, #348]	; (800a18c <HAL_RCC_OscConfig+0x28c>)
 800a02e:	68db      	ldr	r3, [r3, #12]
 800a030:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	6a1b      	ldr	r3, [r3, #32]
 800a038:	03db      	lsls	r3, r3, #15
 800a03a:	4954      	ldr	r1, [pc, #336]	; (800a18c <HAL_RCC_OscConfig+0x28c>)
 800a03c:	4313      	orrs	r3, r2
 800a03e:	60cb      	str	r3, [r1, #12]
 800a040:	e054      	b.n	800a0ec <HAL_RCC_OscConfig+0x1ec>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 800a042:	4b52      	ldr	r3, [pc, #328]	; (800a18c <HAL_RCC_OscConfig+0x28c>)
 800a044:	689b      	ldr	r3, [r3, #8]
 800a046:	4a51      	ldr	r2, [pc, #324]	; (800a18c <HAL_RCC_OscConfig+0x28c>)
 800a048:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800a04c:	6093      	str	r3, [r2, #8]
 800a04e:	4b4f      	ldr	r3, [pc, #316]	; (800a18c <HAL_RCC_OscConfig+0x28c>)
 800a050:	689b      	ldr	r3, [r3, #8]
 800a052:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a05a:	494c      	ldr	r1, [pc, #304]	; (800a18c <HAL_RCC_OscConfig+0x28c>)
 800a05c:	4313      	orrs	r3, r2
 800a05e:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a064:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 800a068:	d309      	bcc.n	800a07e <HAL_RCC_OscConfig+0x17e>
 800a06a:	4b48      	ldr	r3, [pc, #288]	; (800a18c <HAL_RCC_OscConfig+0x28c>)
 800a06c:	68db      	ldr	r3, [r3, #12]
 800a06e:	f023 021f 	bic.w	r2, r3, #31
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	6a1b      	ldr	r3, [r3, #32]
 800a076:	4945      	ldr	r1, [pc, #276]	; (800a18c <HAL_RCC_OscConfig+0x28c>)
 800a078:	4313      	orrs	r3, r2
 800a07a:	60cb      	str	r3, [r1, #12]
 800a07c:	e028      	b.n	800a0d0 <HAL_RCC_OscConfig+0x1d0>
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a082:	2b00      	cmp	r3, #0
 800a084:	da0a      	bge.n	800a09c <HAL_RCC_OscConfig+0x19c>
 800a086:	4b41      	ldr	r3, [pc, #260]	; (800a18c <HAL_RCC_OscConfig+0x28c>)
 800a088:	68db      	ldr	r3, [r3, #12]
 800a08a:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	6a1b      	ldr	r3, [r3, #32]
 800a092:	015b      	lsls	r3, r3, #5
 800a094:	493d      	ldr	r1, [pc, #244]	; (800a18c <HAL_RCC_OscConfig+0x28c>)
 800a096:	4313      	orrs	r3, r2
 800a098:	60cb      	str	r3, [r1, #12]
 800a09a:	e019      	b.n	800a0d0 <HAL_RCC_OscConfig+0x1d0>
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a0a4:	d30a      	bcc.n	800a0bc <HAL_RCC_OscConfig+0x1bc>
 800a0a6:	4b39      	ldr	r3, [pc, #228]	; (800a18c <HAL_RCC_OscConfig+0x28c>)
 800a0a8:	68db      	ldr	r3, [r3, #12]
 800a0aa:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	6a1b      	ldr	r3, [r3, #32]
 800a0b2:	029b      	lsls	r3, r3, #10
 800a0b4:	4935      	ldr	r1, [pc, #212]	; (800a18c <HAL_RCC_OscConfig+0x28c>)
 800a0b6:	4313      	orrs	r3, r2
 800a0b8:	60cb      	str	r3, [r1, #12]
 800a0ba:	e009      	b.n	800a0d0 <HAL_RCC_OscConfig+0x1d0>
 800a0bc:	4b33      	ldr	r3, [pc, #204]	; (800a18c <HAL_RCC_OscConfig+0x28c>)
 800a0be:	68db      	ldr	r3, [r3, #12]
 800a0c0:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	6a1b      	ldr	r3, [r3, #32]
 800a0c8:	03db      	lsls	r3, r3, #15
 800a0ca:	4930      	ldr	r1, [pc, #192]	; (800a18c <HAL_RCC_OscConfig+0x28c>)
 800a0cc:	4313      	orrs	r3, r2
 800a0ce:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800a0d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	d10a      	bne.n	800a0ec <HAL_RCC_OscConfig+0x1ec>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0da:	4618      	mov	r0, r3
 800a0dc:	f001 f946 	bl	800b36c <RCC_SetFlashLatencyFromMSIRange>
 800a0e0:	4603      	mov	r3, r0
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	d002      	beq.n	800a0ec <HAL_RCC_OscConfig+0x1ec>
            {
              return HAL_ERROR;
 800a0e6:	2301      	movs	r3, #1
 800a0e8:	f000 bdda 	b.w	800aca0 <HAL_RCC_OscConfig+0xda0>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 800a0ec:	f001 f8d8 	bl	800b2a0 <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800a0f0:	4b27      	ldr	r3, [pc, #156]	; (800a190 <HAL_RCC_OscConfig+0x290>)
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	4618      	mov	r0, r3
 800a0f6:	f7fb fa2d 	bl	8005554 <HAL_InitTick>
 800a0fa:	4603      	mov	r3, r0
 800a0fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (status != HAL_OK)
 800a100:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a104:	2b00      	cmp	r3, #0
 800a106:	f000 808a 	beq.w	800a21e <HAL_RCC_OscConfig+0x31e>
        {
          return status;
 800a10a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a10e:	f000 bdc7 	b.w	800aca0 <HAL_RCC_OscConfig+0xda0>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	69db      	ldr	r3, [r3, #28]
 800a116:	2b00      	cmp	r3, #0
 800a118:	d066      	beq.n	800a1e8 <HAL_RCC_OscConfig+0x2e8>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 800a11a:	4b1c      	ldr	r3, [pc, #112]	; (800a18c <HAL_RCC_OscConfig+0x28c>)
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	4a1b      	ldr	r2, [pc, #108]	; (800a18c <HAL_RCC_OscConfig+0x28c>)
 800a120:	f043 0301 	orr.w	r3, r3, #1
 800a124:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800a126:	f7fb fb5d 	bl	80057e4 <HAL_GetTick>
 800a12a:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 800a12c:	e009      	b.n	800a142 <HAL_RCC_OscConfig+0x242>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800a12e:	f7fb fb59 	bl	80057e4 <HAL_GetTick>
 800a132:	4602      	mov	r2, r0
 800a134:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a136:	1ad3      	subs	r3, r2, r3
 800a138:	2b02      	cmp	r3, #2
 800a13a:	d902      	bls.n	800a142 <HAL_RCC_OscConfig+0x242>
          {
            return HAL_TIMEOUT;
 800a13c:	2303      	movs	r3, #3
 800a13e:	f000 bdaf 	b.w	800aca0 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 800a142:	4b12      	ldr	r3, [pc, #72]	; (800a18c <HAL_RCC_OscConfig+0x28c>)
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	f003 0304 	and.w	r3, r3, #4
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	d0ef      	beq.n	800a12e <HAL_RCC_OscConfig+0x22e>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 800a14e:	4b0f      	ldr	r3, [pc, #60]	; (800a18c <HAL_RCC_OscConfig+0x28c>)
 800a150:	689b      	ldr	r3, [r3, #8]
 800a152:	4a0e      	ldr	r2, [pc, #56]	; (800a18c <HAL_RCC_OscConfig+0x28c>)
 800a154:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800a158:	6093      	str	r3, [r2, #8]
 800a15a:	4b0c      	ldr	r3, [pc, #48]	; (800a18c <HAL_RCC_OscConfig+0x28c>)
 800a15c:	689b      	ldr	r3, [r3, #8]
 800a15e:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a166:	4909      	ldr	r1, [pc, #36]	; (800a18c <HAL_RCC_OscConfig+0x28c>)
 800a168:	4313      	orrs	r3, r2
 800a16a:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a170:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 800a174:	d30e      	bcc.n	800a194 <HAL_RCC_OscConfig+0x294>
 800a176:	4b05      	ldr	r3, [pc, #20]	; (800a18c <HAL_RCC_OscConfig+0x28c>)
 800a178:	68db      	ldr	r3, [r3, #12]
 800a17a:	f023 021f 	bic.w	r2, r3, #31
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	6a1b      	ldr	r3, [r3, #32]
 800a182:	4902      	ldr	r1, [pc, #8]	; (800a18c <HAL_RCC_OscConfig+0x28c>)
 800a184:	4313      	orrs	r3, r2
 800a186:	60cb      	str	r3, [r1, #12]
 800a188:	e04a      	b.n	800a220 <HAL_RCC_OscConfig+0x320>
 800a18a:	bf00      	nop
 800a18c:	46020c00 	.word	0x46020c00
 800a190:	20000008 	.word	0x20000008
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a198:	2b00      	cmp	r3, #0
 800a19a:	da0a      	bge.n	800a1b2 <HAL_RCC_OscConfig+0x2b2>
 800a19c:	4b9b      	ldr	r3, [pc, #620]	; (800a40c <HAL_RCC_OscConfig+0x50c>)
 800a19e:	68db      	ldr	r3, [r3, #12]
 800a1a0:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	6a1b      	ldr	r3, [r3, #32]
 800a1a8:	015b      	lsls	r3, r3, #5
 800a1aa:	4998      	ldr	r1, [pc, #608]	; (800a40c <HAL_RCC_OscConfig+0x50c>)
 800a1ac:	4313      	orrs	r3, r2
 800a1ae:	60cb      	str	r3, [r1, #12]
 800a1b0:	e036      	b.n	800a220 <HAL_RCC_OscConfig+0x320>
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a1ba:	d30a      	bcc.n	800a1d2 <HAL_RCC_OscConfig+0x2d2>
 800a1bc:	4b93      	ldr	r3, [pc, #588]	; (800a40c <HAL_RCC_OscConfig+0x50c>)
 800a1be:	68db      	ldr	r3, [r3, #12]
 800a1c0:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	6a1b      	ldr	r3, [r3, #32]
 800a1c8:	029b      	lsls	r3, r3, #10
 800a1ca:	4990      	ldr	r1, [pc, #576]	; (800a40c <HAL_RCC_OscConfig+0x50c>)
 800a1cc:	4313      	orrs	r3, r2
 800a1ce:	60cb      	str	r3, [r1, #12]
 800a1d0:	e026      	b.n	800a220 <HAL_RCC_OscConfig+0x320>
 800a1d2:	4b8e      	ldr	r3, [pc, #568]	; (800a40c <HAL_RCC_OscConfig+0x50c>)
 800a1d4:	68db      	ldr	r3, [r3, #12]
 800a1d6:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	6a1b      	ldr	r3, [r3, #32]
 800a1de:	03db      	lsls	r3, r3, #15
 800a1e0:	498a      	ldr	r1, [pc, #552]	; (800a40c <HAL_RCC_OscConfig+0x50c>)
 800a1e2:	4313      	orrs	r3, r2
 800a1e4:	60cb      	str	r3, [r1, #12]
 800a1e6:	e01b      	b.n	800a220 <HAL_RCC_OscConfig+0x320>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 800a1e8:	4b88      	ldr	r3, [pc, #544]	; (800a40c <HAL_RCC_OscConfig+0x50c>)
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	4a87      	ldr	r2, [pc, #540]	; (800a40c <HAL_RCC_OscConfig+0x50c>)
 800a1ee:	f023 0301 	bic.w	r3, r3, #1
 800a1f2:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800a1f4:	f7fb faf6 	bl	80057e4 <HAL_GetTick>
 800a1f8:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 800a1fa:	e009      	b.n	800a210 <HAL_RCC_OscConfig+0x310>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800a1fc:	f7fb faf2 	bl	80057e4 <HAL_GetTick>
 800a200:	4602      	mov	r2, r0
 800a202:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a204:	1ad3      	subs	r3, r2, r3
 800a206:	2b02      	cmp	r3, #2
 800a208:	d902      	bls.n	800a210 <HAL_RCC_OscConfig+0x310>
          {
            return HAL_TIMEOUT;
 800a20a:	2303      	movs	r3, #3
 800a20c:	f000 bd48 	b.w	800aca0 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 800a210:	4b7e      	ldr	r3, [pc, #504]	; (800a40c <HAL_RCC_OscConfig+0x50c>)
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	f003 0304 	and.w	r3, r3, #4
 800a218:	2b00      	cmp	r3, #0
 800a21a:	d1ef      	bne.n	800a1fc <HAL_RCC_OscConfig+0x2fc>
 800a21c:	e000      	b.n	800a220 <HAL_RCC_OscConfig+0x320>
      if ((READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U) && (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800a21e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	f003 0301 	and.w	r3, r3, #1
 800a228:	2b00      	cmp	r3, #0
 800a22a:	f000 8094 	beq.w	800a356 <HAL_RCC_OscConfig+0x456>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800a22e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a230:	2b08      	cmp	r3, #8
 800a232:	d005      	beq.n	800a240 <HAL_RCC_OscConfig+0x340>
 800a234:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a236:	2b0c      	cmp	r3, #12
 800a238:	d110      	bne.n	800a25c <HAL_RCC_OscConfig+0x35c>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800a23a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a23c:	2b03      	cmp	r3, #3
 800a23e:	d10d      	bne.n	800a25c <HAL_RCC_OscConfig+0x35c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a240:	4b72      	ldr	r3, [pc, #456]	; (800a40c <HAL_RCC_OscConfig+0x50c>)
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a248:	2b00      	cmp	r3, #0
 800a24a:	f000 8083 	beq.w	800a354 <HAL_RCC_OscConfig+0x454>
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	685b      	ldr	r3, [r3, #4]
 800a252:	2b00      	cmp	r3, #0
 800a254:	d17e      	bne.n	800a354 <HAL_RCC_OscConfig+0x454>
      {
        return HAL_ERROR;
 800a256:	2301      	movs	r3, #1
 800a258:	f000 bd22 	b.w	800aca0 <HAL_RCC_OscConfig+0xda0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	685b      	ldr	r3, [r3, #4]
 800a260:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a264:	d106      	bne.n	800a274 <HAL_RCC_OscConfig+0x374>
 800a266:	4b69      	ldr	r3, [pc, #420]	; (800a40c <HAL_RCC_OscConfig+0x50c>)
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	4a68      	ldr	r2, [pc, #416]	; (800a40c <HAL_RCC_OscConfig+0x50c>)
 800a26c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a270:	6013      	str	r3, [r2, #0]
 800a272:	e041      	b.n	800a2f8 <HAL_RCC_OscConfig+0x3f8>
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	685b      	ldr	r3, [r3, #4]
 800a278:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a27c:	d112      	bne.n	800a2a4 <HAL_RCC_OscConfig+0x3a4>
 800a27e:	4b63      	ldr	r3, [pc, #396]	; (800a40c <HAL_RCC_OscConfig+0x50c>)
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	4a62      	ldr	r2, [pc, #392]	; (800a40c <HAL_RCC_OscConfig+0x50c>)
 800a284:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a288:	6013      	str	r3, [r2, #0]
 800a28a:	4b60      	ldr	r3, [pc, #384]	; (800a40c <HAL_RCC_OscConfig+0x50c>)
 800a28c:	681b      	ldr	r3, [r3, #0]
 800a28e:	4a5f      	ldr	r2, [pc, #380]	; (800a40c <HAL_RCC_OscConfig+0x50c>)
 800a290:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800a294:	6013      	str	r3, [r2, #0]
 800a296:	4b5d      	ldr	r3, [pc, #372]	; (800a40c <HAL_RCC_OscConfig+0x50c>)
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	4a5c      	ldr	r2, [pc, #368]	; (800a40c <HAL_RCC_OscConfig+0x50c>)
 800a29c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a2a0:	6013      	str	r3, [r2, #0]
 800a2a2:	e029      	b.n	800a2f8 <HAL_RCC_OscConfig+0x3f8>
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	685b      	ldr	r3, [r3, #4]
 800a2a8:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 800a2ac:	d112      	bne.n	800a2d4 <HAL_RCC_OscConfig+0x3d4>
 800a2ae:	4b57      	ldr	r3, [pc, #348]	; (800a40c <HAL_RCC_OscConfig+0x50c>)
 800a2b0:	681b      	ldr	r3, [r3, #0]
 800a2b2:	4a56      	ldr	r2, [pc, #344]	; (800a40c <HAL_RCC_OscConfig+0x50c>)
 800a2b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a2b8:	6013      	str	r3, [r2, #0]
 800a2ba:	4b54      	ldr	r3, [pc, #336]	; (800a40c <HAL_RCC_OscConfig+0x50c>)
 800a2bc:	681b      	ldr	r3, [r3, #0]
 800a2be:	4a53      	ldr	r2, [pc, #332]	; (800a40c <HAL_RCC_OscConfig+0x50c>)
 800a2c0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a2c4:	6013      	str	r3, [r2, #0]
 800a2c6:	4b51      	ldr	r3, [pc, #324]	; (800a40c <HAL_RCC_OscConfig+0x50c>)
 800a2c8:	681b      	ldr	r3, [r3, #0]
 800a2ca:	4a50      	ldr	r2, [pc, #320]	; (800a40c <HAL_RCC_OscConfig+0x50c>)
 800a2cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a2d0:	6013      	str	r3, [r2, #0]
 800a2d2:	e011      	b.n	800a2f8 <HAL_RCC_OscConfig+0x3f8>
 800a2d4:	4b4d      	ldr	r3, [pc, #308]	; (800a40c <HAL_RCC_OscConfig+0x50c>)
 800a2d6:	681b      	ldr	r3, [r3, #0]
 800a2d8:	4a4c      	ldr	r2, [pc, #304]	; (800a40c <HAL_RCC_OscConfig+0x50c>)
 800a2da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a2de:	6013      	str	r3, [r2, #0]
 800a2e0:	4b4a      	ldr	r3, [pc, #296]	; (800a40c <HAL_RCC_OscConfig+0x50c>)
 800a2e2:	681b      	ldr	r3, [r3, #0]
 800a2e4:	4a49      	ldr	r2, [pc, #292]	; (800a40c <HAL_RCC_OscConfig+0x50c>)
 800a2e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a2ea:	6013      	str	r3, [r2, #0]
 800a2ec:	4b47      	ldr	r3, [pc, #284]	; (800a40c <HAL_RCC_OscConfig+0x50c>)
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	4a46      	ldr	r2, [pc, #280]	; (800a40c <HAL_RCC_OscConfig+0x50c>)
 800a2f2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800a2f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	685b      	ldr	r3, [r3, #4]
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	d014      	beq.n	800a32a <HAL_RCC_OscConfig+0x42a>
      {
        tickstart = HAL_GetTick();
 800a300:	f7fb fa70 	bl	80057e4 <HAL_GetTick>
 800a304:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800a306:	e009      	b.n	800a31c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a308:	f7fb fa6c 	bl	80057e4 <HAL_GetTick>
 800a30c:	4602      	mov	r2, r0
 800a30e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a310:	1ad3      	subs	r3, r2, r3
 800a312:	2b64      	cmp	r3, #100	; 0x64
 800a314:	d902      	bls.n	800a31c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800a316:	2303      	movs	r3, #3
 800a318:	f000 bcc2 	b.w	800aca0 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800a31c:	4b3b      	ldr	r3, [pc, #236]	; (800a40c <HAL_RCC_OscConfig+0x50c>)
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a324:	2b00      	cmp	r3, #0
 800a326:	d0ef      	beq.n	800a308 <HAL_RCC_OscConfig+0x408>
 800a328:	e015      	b.n	800a356 <HAL_RCC_OscConfig+0x456>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 800a32a:	f7fb fa5b 	bl	80057e4 <HAL_GetTick>
 800a32e:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800a330:	e009      	b.n	800a346 <HAL_RCC_OscConfig+0x446>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a332:	f7fb fa57 	bl	80057e4 <HAL_GetTick>
 800a336:	4602      	mov	r2, r0
 800a338:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a33a:	1ad3      	subs	r3, r2, r3
 800a33c:	2b64      	cmp	r3, #100	; 0x64
 800a33e:	d902      	bls.n	800a346 <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 800a340:	2303      	movs	r3, #3
 800a342:	f000 bcad 	b.w	800aca0 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800a346:	4b31      	ldr	r3, [pc, #196]	; (800a40c <HAL_RCC_OscConfig+0x50c>)
 800a348:	681b      	ldr	r3, [r3, #0]
 800a34a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a34e:	2b00      	cmp	r3, #0
 800a350:	d1ef      	bne.n	800a332 <HAL_RCC_OscConfig+0x432>
 800a352:	e000      	b.n	800a356 <HAL_RCC_OscConfig+0x456>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a354:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	f003 0302 	and.w	r3, r3, #2
 800a35e:	2b00      	cmp	r3, #0
 800a360:	d066      	beq.n	800a430 <HAL_RCC_OscConfig+0x530>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800a362:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a364:	2b04      	cmp	r3, #4
 800a366:	d005      	beq.n	800a374 <HAL_RCC_OscConfig+0x474>
 800a368:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a36a:	2b0c      	cmp	r3, #12
 800a36c:	d11a      	bne.n	800a3a4 <HAL_RCC_OscConfig+0x4a4>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800a36e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a370:	2b02      	cmp	r3, #2
 800a372:	d117      	bne.n	800a3a4 <HAL_RCC_OscConfig+0x4a4>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a374:	4b25      	ldr	r3, [pc, #148]	; (800a40c <HAL_RCC_OscConfig+0x50c>)
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a37c:	2b00      	cmp	r3, #0
 800a37e:	d006      	beq.n	800a38e <HAL_RCC_OscConfig+0x48e>
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	68db      	ldr	r3, [r3, #12]
 800a384:	2b00      	cmp	r3, #0
 800a386:	d102      	bne.n	800a38e <HAL_RCC_OscConfig+0x48e>
      {
        return HAL_ERROR;
 800a388:	2301      	movs	r3, #1
 800a38a:	f000 bc89 	b.w	800aca0 <HAL_RCC_OscConfig+0xda0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 800a38e:	4b1f      	ldr	r3, [pc, #124]	; (800a40c <HAL_RCC_OscConfig+0x50c>)
 800a390:	691b      	ldr	r3, [r3, #16]
 800a392:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	691b      	ldr	r3, [r3, #16]
 800a39a:	041b      	lsls	r3, r3, #16
 800a39c:	491b      	ldr	r1, [pc, #108]	; (800a40c <HAL_RCC_OscConfig+0x50c>)
 800a39e:	4313      	orrs	r3, r2
 800a3a0:	610b      	str	r3, [r1, #16]
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a3a2:	e045      	b.n	800a430 <HAL_RCC_OscConfig+0x530>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	68db      	ldr	r3, [r3, #12]
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	d024      	beq.n	800a3f6 <HAL_RCC_OscConfig+0x4f6>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 800a3ac:	4b17      	ldr	r3, [pc, #92]	; (800a40c <HAL_RCC_OscConfig+0x50c>)
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	4a16      	ldr	r2, [pc, #88]	; (800a40c <HAL_RCC_OscConfig+0x50c>)
 800a3b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a3b6:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800a3b8:	f7fb fa14 	bl	80057e4 <HAL_GetTick>
 800a3bc:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800a3be:	e009      	b.n	800a3d4 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a3c0:	f7fb fa10 	bl	80057e4 <HAL_GetTick>
 800a3c4:	4602      	mov	r2, r0
 800a3c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3c8:	1ad3      	subs	r3, r2, r3
 800a3ca:	2b02      	cmp	r3, #2
 800a3cc:	d902      	bls.n	800a3d4 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 800a3ce:	2303      	movs	r3, #3
 800a3d0:	f000 bc66 	b.w	800aca0 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800a3d4:	4b0d      	ldr	r3, [pc, #52]	; (800a40c <HAL_RCC_OscConfig+0x50c>)
 800a3d6:	681b      	ldr	r3, [r3, #0]
 800a3d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a3dc:	2b00      	cmp	r3, #0
 800a3de:	d0ef      	beq.n	800a3c0 <HAL_RCC_OscConfig+0x4c0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 800a3e0:	4b0a      	ldr	r3, [pc, #40]	; (800a40c <HAL_RCC_OscConfig+0x50c>)
 800a3e2:	691b      	ldr	r3, [r3, #16]
 800a3e4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	691b      	ldr	r3, [r3, #16]
 800a3ec:	041b      	lsls	r3, r3, #16
 800a3ee:	4907      	ldr	r1, [pc, #28]	; (800a40c <HAL_RCC_OscConfig+0x50c>)
 800a3f0:	4313      	orrs	r3, r2
 800a3f2:	610b      	str	r3, [r1, #16]
 800a3f4:	e01c      	b.n	800a430 <HAL_RCC_OscConfig+0x530>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 800a3f6:	4b05      	ldr	r3, [pc, #20]	; (800a40c <HAL_RCC_OscConfig+0x50c>)
 800a3f8:	681b      	ldr	r3, [r3, #0]
 800a3fa:	4a04      	ldr	r2, [pc, #16]	; (800a40c <HAL_RCC_OscConfig+0x50c>)
 800a3fc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a400:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800a402:	f7fb f9ef 	bl	80057e4 <HAL_GetTick>
 800a406:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800a408:	e00c      	b.n	800a424 <HAL_RCC_OscConfig+0x524>
 800a40a:	bf00      	nop
 800a40c:	46020c00 	.word	0x46020c00
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a410:	f7fb f9e8 	bl	80057e4 <HAL_GetTick>
 800a414:	4602      	mov	r2, r0
 800a416:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a418:	1ad3      	subs	r3, r2, r3
 800a41a:	2b02      	cmp	r3, #2
 800a41c:	d902      	bls.n	800a424 <HAL_RCC_OscConfig+0x524>
          {
            return HAL_TIMEOUT;
 800a41e:	2303      	movs	r3, #3
 800a420:	f000 bc3e 	b.w	800aca0 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800a424:	4baf      	ldr	r3, [pc, #700]	; (800a6e4 <HAL_RCC_OscConfig+0x7e4>)
 800a426:	681b      	ldr	r3, [r3, #0]
 800a428:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a42c:	2b00      	cmp	r3, #0
 800a42e:	d1ef      	bne.n	800a410 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	f003 0308 	and.w	r3, r3, #8
 800a438:	2b00      	cmp	r3, #0
 800a43a:	f000 80c7 	beq.w	800a5cc <HAL_RCC_OscConfig+0x6cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 800a43e:	2300      	movs	r3, #0
 800a440:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a444:	4ba7      	ldr	r3, [pc, #668]	; (800a6e4 <HAL_RCC_OscConfig+0x7e4>)
 800a446:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a44a:	f003 0304 	and.w	r3, r3, #4
 800a44e:	2b00      	cmp	r3, #0
 800a450:	d111      	bne.n	800a476 <HAL_RCC_OscConfig+0x576>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a452:	4ba4      	ldr	r3, [pc, #656]	; (800a6e4 <HAL_RCC_OscConfig+0x7e4>)
 800a454:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a458:	4aa2      	ldr	r2, [pc, #648]	; (800a6e4 <HAL_RCC_OscConfig+0x7e4>)
 800a45a:	f043 0304 	orr.w	r3, r3, #4
 800a45e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800a462:	4ba0      	ldr	r3, [pc, #640]	; (800a6e4 <HAL_RCC_OscConfig+0x7e4>)
 800a464:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a468:	f003 0304 	and.w	r3, r3, #4
 800a46c:	617b      	str	r3, [r7, #20]
 800a46e:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 800a470:	2301      	movs	r3, #1
 800a472:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800a476:	4b9c      	ldr	r3, [pc, #624]	; (800a6e8 <HAL_RCC_OscConfig+0x7e8>)
 800a478:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a47a:	f003 0301 	and.w	r3, r3, #1
 800a47e:	2b00      	cmp	r3, #0
 800a480:	d118      	bne.n	800a4b4 <HAL_RCC_OscConfig+0x5b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 800a482:	4b99      	ldr	r3, [pc, #612]	; (800a6e8 <HAL_RCC_OscConfig+0x7e8>)
 800a484:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a486:	4a98      	ldr	r2, [pc, #608]	; (800a6e8 <HAL_RCC_OscConfig+0x7e8>)
 800a488:	f043 0301 	orr.w	r3, r3, #1
 800a48c:	6293      	str	r3, [r2, #40]	; 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800a48e:	f7fb f9a9 	bl	80057e4 <HAL_GetTick>
 800a492:	62b8      	str	r0, [r7, #40]	; 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800a494:	e008      	b.n	800a4a8 <HAL_RCC_OscConfig+0x5a8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a496:	f7fb f9a5 	bl	80057e4 <HAL_GetTick>
 800a49a:	4602      	mov	r2, r0
 800a49c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a49e:	1ad3      	subs	r3, r2, r3
 800a4a0:	2b02      	cmp	r3, #2
 800a4a2:	d901      	bls.n	800a4a8 <HAL_RCC_OscConfig+0x5a8>
        {
          return HAL_TIMEOUT;
 800a4a4:	2303      	movs	r3, #3
 800a4a6:	e3fb      	b.n	800aca0 <HAL_RCC_OscConfig+0xda0>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800a4a8:	4b8f      	ldr	r3, [pc, #572]	; (800a6e8 <HAL_RCC_OscConfig+0x7e8>)
 800a4aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a4ac:	f003 0301 	and.w	r3, r3, #1
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	d0f0      	beq.n	800a496 <HAL_RCC_OscConfig+0x596>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	695b      	ldr	r3, [r3, #20]
 800a4b8:	2b00      	cmp	r3, #0
 800a4ba:	d05f      	beq.n	800a57c <HAL_RCC_OscConfig+0x67c>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 800a4bc:	4b89      	ldr	r3, [pc, #548]	; (800a6e4 <HAL_RCC_OscConfig+0x7e4>)
 800a4be:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800a4c2:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	699a      	ldr	r2, [r3, #24]
 800a4c8:	6a3b      	ldr	r3, [r7, #32]
 800a4ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a4ce:	429a      	cmp	r2, r3
 800a4d0:	d037      	beq.n	800a542 <HAL_RCC_OscConfig+0x642>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 800a4d2:	6a3b      	ldr	r3, [r7, #32]
 800a4d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	d006      	beq.n	800a4ea <HAL_RCC_OscConfig+0x5ea>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 800a4dc:	6a3b      	ldr	r3, [r7, #32]
 800a4de:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 800a4e2:	2b00      	cmp	r3, #0
 800a4e4:	d101      	bne.n	800a4ea <HAL_RCC_OscConfig+0x5ea>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 800a4e6:	2301      	movs	r3, #1
 800a4e8:	e3da      	b.n	800aca0 <HAL_RCC_OscConfig+0xda0>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 800a4ea:	6a3b      	ldr	r3, [r7, #32]
 800a4ec:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800a4f0:	2b00      	cmp	r3, #0
 800a4f2:	d01b      	beq.n	800a52c <HAL_RCC_OscConfig+0x62c>
        {
          __HAL_RCC_LSI_DISABLE();
 800a4f4:	4b7b      	ldr	r3, [pc, #492]	; (800a6e4 <HAL_RCC_OscConfig+0x7e4>)
 800a4f6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800a4fa:	4a7a      	ldr	r2, [pc, #488]	; (800a6e4 <HAL_RCC_OscConfig+0x7e4>)
 800a4fc:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 800a500:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

          tickstart = HAL_GetTick();
 800a504:	f7fb f96e 	bl	80057e4 <HAL_GetTick>
 800a508:	62b8      	str	r0, [r7, #40]	; 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800a50a:	e008      	b.n	800a51e <HAL_RCC_OscConfig+0x61e>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a50c:	f7fb f96a 	bl	80057e4 <HAL_GetTick>
 800a510:	4602      	mov	r2, r0
 800a512:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a514:	1ad3      	subs	r3, r2, r3
 800a516:	2b02      	cmp	r3, #2
 800a518:	d901      	bls.n	800a51e <HAL_RCC_OscConfig+0x61e>
            {
              return HAL_TIMEOUT;
 800a51a:	2303      	movs	r3, #3
 800a51c:	e3c0      	b.n	800aca0 <HAL_RCC_OscConfig+0xda0>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800a51e:	4b71      	ldr	r3, [pc, #452]	; (800a6e4 <HAL_RCC_OscConfig+0x7e4>)
 800a520:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800a524:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a528:	2b00      	cmp	r3, #0
 800a52a:	d1ef      	bne.n	800a50c <HAL_RCC_OscConfig+0x60c>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 800a52c:	4b6d      	ldr	r3, [pc, #436]	; (800a6e4 <HAL_RCC_OscConfig+0x7e4>)
 800a52e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800a532:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	699b      	ldr	r3, [r3, #24]
 800a53a:	496a      	ldr	r1, [pc, #424]	; (800a6e4 <HAL_RCC_OscConfig+0x7e4>)
 800a53c:	4313      	orrs	r3, r2
 800a53e:	f8c1 30f0 	str.w	r3, [r1, #240]	; 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 800a542:	4b68      	ldr	r3, [pc, #416]	; (800a6e4 <HAL_RCC_OscConfig+0x7e4>)
 800a544:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800a548:	4a66      	ldr	r2, [pc, #408]	; (800a6e4 <HAL_RCC_OscConfig+0x7e4>)
 800a54a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800a54e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      tickstart = HAL_GetTick();
 800a552:	f7fb f947 	bl	80057e4 <HAL_GetTick>
 800a556:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 800a558:	e008      	b.n	800a56c <HAL_RCC_OscConfig+0x66c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a55a:	f7fb f943 	bl	80057e4 <HAL_GetTick>
 800a55e:	4602      	mov	r2, r0
 800a560:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a562:	1ad3      	subs	r3, r2, r3
 800a564:	2b02      	cmp	r3, #2
 800a566:	d901      	bls.n	800a56c <HAL_RCC_OscConfig+0x66c>
        {
          return HAL_TIMEOUT;
 800a568:	2303      	movs	r3, #3
 800a56a:	e399      	b.n	800aca0 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 800a56c:	4b5d      	ldr	r3, [pc, #372]	; (800a6e4 <HAL_RCC_OscConfig+0x7e4>)
 800a56e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800a572:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a576:	2b00      	cmp	r3, #0
 800a578:	d0ef      	beq.n	800a55a <HAL_RCC_OscConfig+0x65a>
 800a57a:	e01b      	b.n	800a5b4 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 800a57c:	4b59      	ldr	r3, [pc, #356]	; (800a6e4 <HAL_RCC_OscConfig+0x7e4>)
 800a57e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800a582:	4a58      	ldr	r2, [pc, #352]	; (800a6e4 <HAL_RCC_OscConfig+0x7e4>)
 800a584:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 800a588:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      tickstart = HAL_GetTick();
 800a58c:	f7fb f92a 	bl	80057e4 <HAL_GetTick>
 800a590:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800a592:	e008      	b.n	800a5a6 <HAL_RCC_OscConfig+0x6a6>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a594:	f7fb f926 	bl	80057e4 <HAL_GetTick>
 800a598:	4602      	mov	r2, r0
 800a59a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a59c:	1ad3      	subs	r3, r2, r3
 800a59e:	2b02      	cmp	r3, #2
 800a5a0:	d901      	bls.n	800a5a6 <HAL_RCC_OscConfig+0x6a6>
        {
          return HAL_TIMEOUT;
 800a5a2:	2303      	movs	r3, #3
 800a5a4:	e37c      	b.n	800aca0 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800a5a6:	4b4f      	ldr	r3, [pc, #316]	; (800a6e4 <HAL_RCC_OscConfig+0x7e4>)
 800a5a8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800a5ac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a5b0:	2b00      	cmp	r3, #0
 800a5b2:	d1ef      	bne.n	800a594 <HAL_RCC_OscConfig+0x694>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800a5b4:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800a5b8:	2b01      	cmp	r3, #1
 800a5ba:	d107      	bne.n	800a5cc <HAL_RCC_OscConfig+0x6cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a5bc:	4b49      	ldr	r3, [pc, #292]	; (800a6e4 <HAL_RCC_OscConfig+0x7e4>)
 800a5be:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a5c2:	4a48      	ldr	r2, [pc, #288]	; (800a6e4 <HAL_RCC_OscConfig+0x7e4>)
 800a5c4:	f023 0304 	bic.w	r3, r3, #4
 800a5c8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	f003 0304 	and.w	r3, r3, #4
 800a5d4:	2b00      	cmp	r3, #0
 800a5d6:	f000 8112 	beq.w	800a7fe <HAL_RCC_OscConfig+0x8fe>
  {
    FlagStatus pwrclkchanged = RESET;
 800a5da:	2300      	movs	r3, #0
 800a5dc:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a5e0:	4b40      	ldr	r3, [pc, #256]	; (800a6e4 <HAL_RCC_OscConfig+0x7e4>)
 800a5e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a5e6:	f003 0304 	and.w	r3, r3, #4
 800a5ea:	2b00      	cmp	r3, #0
 800a5ec:	d111      	bne.n	800a612 <HAL_RCC_OscConfig+0x712>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a5ee:	4b3d      	ldr	r3, [pc, #244]	; (800a6e4 <HAL_RCC_OscConfig+0x7e4>)
 800a5f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a5f4:	4a3b      	ldr	r2, [pc, #236]	; (800a6e4 <HAL_RCC_OscConfig+0x7e4>)
 800a5f6:	f043 0304 	orr.w	r3, r3, #4
 800a5fa:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800a5fe:	4b39      	ldr	r3, [pc, #228]	; (800a6e4 <HAL_RCC_OscConfig+0x7e4>)
 800a600:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a604:	f003 0304 	and.w	r3, r3, #4
 800a608:	613b      	str	r3, [r7, #16]
 800a60a:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 800a60c:	2301      	movs	r3, #1
 800a60e:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800a612:	4b35      	ldr	r3, [pc, #212]	; (800a6e8 <HAL_RCC_OscConfig+0x7e8>)
 800a614:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a616:	f003 0301 	and.w	r3, r3, #1
 800a61a:	2b00      	cmp	r3, #0
 800a61c:	d118      	bne.n	800a650 <HAL_RCC_OscConfig+0x750>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 800a61e:	4b32      	ldr	r3, [pc, #200]	; (800a6e8 <HAL_RCC_OscConfig+0x7e8>)
 800a620:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a622:	4a31      	ldr	r2, [pc, #196]	; (800a6e8 <HAL_RCC_OscConfig+0x7e8>)
 800a624:	f043 0301 	orr.w	r3, r3, #1
 800a628:	6293      	str	r3, [r2, #40]	; 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800a62a:	f7fb f8db 	bl	80057e4 <HAL_GetTick>
 800a62e:	62b8      	str	r0, [r7, #40]	; 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800a630:	e008      	b.n	800a644 <HAL_RCC_OscConfig+0x744>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a632:	f7fb f8d7 	bl	80057e4 <HAL_GetTick>
 800a636:	4602      	mov	r2, r0
 800a638:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a63a:	1ad3      	subs	r3, r2, r3
 800a63c:	2b02      	cmp	r3, #2
 800a63e:	d901      	bls.n	800a644 <HAL_RCC_OscConfig+0x744>
        {
          return HAL_TIMEOUT;
 800a640:	2303      	movs	r3, #3
 800a642:	e32d      	b.n	800aca0 <HAL_RCC_OscConfig+0xda0>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800a644:	4b28      	ldr	r3, [pc, #160]	; (800a6e8 <HAL_RCC_OscConfig+0x7e8>)
 800a646:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a648:	f003 0301 	and.w	r3, r3, #1
 800a64c:	2b00      	cmp	r3, #0
 800a64e:	d0f0      	beq.n	800a632 <HAL_RCC_OscConfig+0x732>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	689b      	ldr	r3, [r3, #8]
 800a654:	f003 0301 	and.w	r3, r3, #1
 800a658:	2b00      	cmp	r3, #0
 800a65a:	d01f      	beq.n	800a69c <HAL_RCC_OscConfig+0x79c>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	689b      	ldr	r3, [r3, #8]
 800a660:	f003 0304 	and.w	r3, r3, #4
 800a664:	2b00      	cmp	r3, #0
 800a666:	d010      	beq.n	800a68a <HAL_RCC_OscConfig+0x78a>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800a668:	4b1e      	ldr	r3, [pc, #120]	; (800a6e4 <HAL_RCC_OscConfig+0x7e4>)
 800a66a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800a66e:	4a1d      	ldr	r2, [pc, #116]	; (800a6e4 <HAL_RCC_OscConfig+0x7e4>)
 800a670:	f043 0304 	orr.w	r3, r3, #4
 800a674:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800a678:	4b1a      	ldr	r3, [pc, #104]	; (800a6e4 <HAL_RCC_OscConfig+0x7e4>)
 800a67a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800a67e:	4a19      	ldr	r2, [pc, #100]	; (800a6e4 <HAL_RCC_OscConfig+0x7e4>)
 800a680:	f043 0301 	orr.w	r3, r3, #1
 800a684:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800a688:	e018      	b.n	800a6bc <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800a68a:	4b16      	ldr	r3, [pc, #88]	; (800a6e4 <HAL_RCC_OscConfig+0x7e4>)
 800a68c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800a690:	4a14      	ldr	r2, [pc, #80]	; (800a6e4 <HAL_RCC_OscConfig+0x7e4>)
 800a692:	f043 0301 	orr.w	r3, r3, #1
 800a696:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800a69a:	e00f      	b.n	800a6bc <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800a69c:	4b11      	ldr	r3, [pc, #68]	; (800a6e4 <HAL_RCC_OscConfig+0x7e4>)
 800a69e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800a6a2:	4a10      	ldr	r2, [pc, #64]	; (800a6e4 <HAL_RCC_OscConfig+0x7e4>)
 800a6a4:	f023 0301 	bic.w	r3, r3, #1
 800a6a8:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800a6ac:	4b0d      	ldr	r3, [pc, #52]	; (800a6e4 <HAL_RCC_OscConfig+0x7e4>)
 800a6ae:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800a6b2:	4a0c      	ldr	r2, [pc, #48]	; (800a6e4 <HAL_RCC_OscConfig+0x7e4>)
 800a6b4:	f023 0304 	bic.w	r3, r3, #4
 800a6b8:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	689b      	ldr	r3, [r3, #8]
 800a6c0:	2b00      	cmp	r3, #0
 800a6c2:	d058      	beq.n	800a776 <HAL_RCC_OscConfig+0x876>
    {
      tickstart = HAL_GetTick();
 800a6c4:	f7fb f88e 	bl	80057e4 <HAL_GetTick>
 800a6c8:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a6ca:	e00f      	b.n	800a6ec <HAL_RCC_OscConfig+0x7ec>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a6cc:	f7fb f88a 	bl	80057e4 <HAL_GetTick>
 800a6d0:	4602      	mov	r2, r0
 800a6d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6d4:	1ad3      	subs	r3, r2, r3
 800a6d6:	f241 3288 	movw	r2, #5000	; 0x1388
 800a6da:	4293      	cmp	r3, r2
 800a6dc:	d906      	bls.n	800a6ec <HAL_RCC_OscConfig+0x7ec>
        {
          return HAL_TIMEOUT;
 800a6de:	2303      	movs	r3, #3
 800a6e0:	e2de      	b.n	800aca0 <HAL_RCC_OscConfig+0xda0>
 800a6e2:	bf00      	nop
 800a6e4:	46020c00 	.word	0x46020c00
 800a6e8:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a6ec:	4b9c      	ldr	r3, [pc, #624]	; (800a960 <HAL_RCC_OscConfig+0xa60>)
 800a6ee:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800a6f2:	f003 0302 	and.w	r3, r3, #2
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	d0e8      	beq.n	800a6cc <HAL_RCC_OscConfig+0x7cc>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	689b      	ldr	r3, [r3, #8]
 800a6fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a702:	2b00      	cmp	r3, #0
 800a704:	d01b      	beq.n	800a73e <HAL_RCC_OscConfig+0x83e>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800a706:	4b96      	ldr	r3, [pc, #600]	; (800a960 <HAL_RCC_OscConfig+0xa60>)
 800a708:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800a70c:	4a94      	ldr	r2, [pc, #592]	; (800a960 <HAL_RCC_OscConfig+0xa60>)
 800a70e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a712:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800a716:	e00a      	b.n	800a72e <HAL_RCC_OscConfig+0x82e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a718:	f7fb f864 	bl	80057e4 <HAL_GetTick>
 800a71c:	4602      	mov	r2, r0
 800a71e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a720:	1ad3      	subs	r3, r2, r3
 800a722:	f241 3288 	movw	r2, #5000	; 0x1388
 800a726:	4293      	cmp	r3, r2
 800a728:	d901      	bls.n	800a72e <HAL_RCC_OscConfig+0x82e>
          {
            return HAL_TIMEOUT;
 800a72a:	2303      	movs	r3, #3
 800a72c:	e2b8      	b.n	800aca0 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800a72e:	4b8c      	ldr	r3, [pc, #560]	; (800a960 <HAL_RCC_OscConfig+0xa60>)
 800a730:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800a734:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a738:	2b00      	cmp	r3, #0
 800a73a:	d0ed      	beq.n	800a718 <HAL_RCC_OscConfig+0x818>
 800a73c:	e053      	b.n	800a7e6 <HAL_RCC_OscConfig+0x8e6>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800a73e:	4b88      	ldr	r3, [pc, #544]	; (800a960 <HAL_RCC_OscConfig+0xa60>)
 800a740:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800a744:	4a86      	ldr	r2, [pc, #536]	; (800a960 <HAL_RCC_OscConfig+0xa60>)
 800a746:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a74a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800a74e:	e00a      	b.n	800a766 <HAL_RCC_OscConfig+0x866>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a750:	f7fb f848 	bl	80057e4 <HAL_GetTick>
 800a754:	4602      	mov	r2, r0
 800a756:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a758:	1ad3      	subs	r3, r2, r3
 800a75a:	f241 3288 	movw	r2, #5000	; 0x1388
 800a75e:	4293      	cmp	r3, r2
 800a760:	d901      	bls.n	800a766 <HAL_RCC_OscConfig+0x866>
          {
            return HAL_TIMEOUT;
 800a762:	2303      	movs	r3, #3
 800a764:	e29c      	b.n	800aca0 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800a766:	4b7e      	ldr	r3, [pc, #504]	; (800a960 <HAL_RCC_OscConfig+0xa60>)
 800a768:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800a76c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a770:	2b00      	cmp	r3, #0
 800a772:	d1ed      	bne.n	800a750 <HAL_RCC_OscConfig+0x850>
 800a774:	e037      	b.n	800a7e6 <HAL_RCC_OscConfig+0x8e6>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 800a776:	f7fb f835 	bl	80057e4 <HAL_GetTick>
 800a77a:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800a77c:	e00a      	b.n	800a794 <HAL_RCC_OscConfig+0x894>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a77e:	f7fb f831 	bl	80057e4 <HAL_GetTick>
 800a782:	4602      	mov	r2, r0
 800a784:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a786:	1ad3      	subs	r3, r2, r3
 800a788:	f241 3288 	movw	r2, #5000	; 0x1388
 800a78c:	4293      	cmp	r3, r2
 800a78e:	d901      	bls.n	800a794 <HAL_RCC_OscConfig+0x894>
        {
          return HAL_TIMEOUT;
 800a790:	2303      	movs	r3, #3
 800a792:	e285      	b.n	800aca0 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800a794:	4b72      	ldr	r3, [pc, #456]	; (800a960 <HAL_RCC_OscConfig+0xa60>)
 800a796:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800a79a:	f003 0302 	and.w	r3, r3, #2
 800a79e:	2b00      	cmp	r3, #0
 800a7a0:	d1ed      	bne.n	800a77e <HAL_RCC_OscConfig+0x87e>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 800a7a2:	4b6f      	ldr	r3, [pc, #444]	; (800a960 <HAL_RCC_OscConfig+0xa60>)
 800a7a4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800a7a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	d01a      	beq.n	800a7e6 <HAL_RCC_OscConfig+0x8e6>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800a7b0:	4b6b      	ldr	r3, [pc, #428]	; (800a960 <HAL_RCC_OscConfig+0xa60>)
 800a7b2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800a7b6:	4a6a      	ldr	r2, [pc, #424]	; (800a960 <HAL_RCC_OscConfig+0xa60>)
 800a7b8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a7bc:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800a7c0:	e00a      	b.n	800a7d8 <HAL_RCC_OscConfig+0x8d8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a7c2:	f7fb f80f 	bl	80057e4 <HAL_GetTick>
 800a7c6:	4602      	mov	r2, r0
 800a7c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7ca:	1ad3      	subs	r3, r2, r3
 800a7cc:	f241 3288 	movw	r2, #5000	; 0x1388
 800a7d0:	4293      	cmp	r3, r2
 800a7d2:	d901      	bls.n	800a7d8 <HAL_RCC_OscConfig+0x8d8>
          {
            return HAL_TIMEOUT;
 800a7d4:	2303      	movs	r3, #3
 800a7d6:	e263      	b.n	800aca0 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800a7d8:	4b61      	ldr	r3, [pc, #388]	; (800a960 <HAL_RCC_OscConfig+0xa60>)
 800a7da:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800a7de:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a7e2:	2b00      	cmp	r3, #0
 800a7e4:	d1ed      	bne.n	800a7c2 <HAL_RCC_OscConfig+0x8c2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800a7e6:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800a7ea:	2b01      	cmp	r3, #1
 800a7ec:	d107      	bne.n	800a7fe <HAL_RCC_OscConfig+0x8fe>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a7ee:	4b5c      	ldr	r3, [pc, #368]	; (800a960 <HAL_RCC_OscConfig+0xa60>)
 800a7f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a7f4:	4a5a      	ldr	r2, [pc, #360]	; (800a960 <HAL_RCC_OscConfig+0xa60>)
 800a7f6:	f023 0304 	bic.w	r3, r3, #4
 800a7fa:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	681b      	ldr	r3, [r3, #0]
 800a802:	f003 0320 	and.w	r3, r3, #32
 800a806:	2b00      	cmp	r3, #0
 800a808:	d036      	beq.n	800a878 <HAL_RCC_OscConfig+0x978>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a80e:	2b00      	cmp	r3, #0
 800a810:	d019      	beq.n	800a846 <HAL_RCC_OscConfig+0x946>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 800a812:	4b53      	ldr	r3, [pc, #332]	; (800a960 <HAL_RCC_OscConfig+0xa60>)
 800a814:	681b      	ldr	r3, [r3, #0]
 800a816:	4a52      	ldr	r2, [pc, #328]	; (800a960 <HAL_RCC_OscConfig+0xa60>)
 800a818:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800a81c:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800a81e:	f7fa ffe1 	bl	80057e4 <HAL_GetTick>
 800a822:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800a824:	e008      	b.n	800a838 <HAL_RCC_OscConfig+0x938>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800a826:	f7fa ffdd 	bl	80057e4 <HAL_GetTick>
 800a82a:	4602      	mov	r2, r0
 800a82c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a82e:	1ad3      	subs	r3, r2, r3
 800a830:	2b02      	cmp	r3, #2
 800a832:	d901      	bls.n	800a838 <HAL_RCC_OscConfig+0x938>
        {
          return HAL_TIMEOUT;
 800a834:	2303      	movs	r3, #3
 800a836:	e233      	b.n	800aca0 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800a838:	4b49      	ldr	r3, [pc, #292]	; (800a960 <HAL_RCC_OscConfig+0xa60>)
 800a83a:	681b      	ldr	r3, [r3, #0]
 800a83c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a840:	2b00      	cmp	r3, #0
 800a842:	d0f0      	beq.n	800a826 <HAL_RCC_OscConfig+0x926>
 800a844:	e018      	b.n	800a878 <HAL_RCC_OscConfig+0x978>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 800a846:	4b46      	ldr	r3, [pc, #280]	; (800a960 <HAL_RCC_OscConfig+0xa60>)
 800a848:	681b      	ldr	r3, [r3, #0]
 800a84a:	4a45      	ldr	r2, [pc, #276]	; (800a960 <HAL_RCC_OscConfig+0xa60>)
 800a84c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a850:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800a852:	f7fa ffc7 	bl	80057e4 <HAL_GetTick>
 800a856:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800a858:	e008      	b.n	800a86c <HAL_RCC_OscConfig+0x96c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800a85a:	f7fa ffc3 	bl	80057e4 <HAL_GetTick>
 800a85e:	4602      	mov	r2, r0
 800a860:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a862:	1ad3      	subs	r3, r2, r3
 800a864:	2b02      	cmp	r3, #2
 800a866:	d901      	bls.n	800a86c <HAL_RCC_OscConfig+0x96c>
        {
          return HAL_TIMEOUT;
 800a868:	2303      	movs	r3, #3
 800a86a:	e219      	b.n	800aca0 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800a86c:	4b3c      	ldr	r3, [pc, #240]	; (800a960 <HAL_RCC_OscConfig+0xa60>)
 800a86e:	681b      	ldr	r3, [r3, #0]
 800a870:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a874:	2b00      	cmp	r3, #0
 800a876:	d1f0      	bne.n	800a85a <HAL_RCC_OscConfig+0x95a>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	681b      	ldr	r3, [r3, #0]
 800a87c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a880:	2b00      	cmp	r3, #0
 800a882:	d036      	beq.n	800a8f2 <HAL_RCC_OscConfig+0x9f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a888:	2b00      	cmp	r3, #0
 800a88a:	d019      	beq.n	800a8c0 <HAL_RCC_OscConfig+0x9c0>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 800a88c:	4b34      	ldr	r3, [pc, #208]	; (800a960 <HAL_RCC_OscConfig+0xa60>)
 800a88e:	681b      	ldr	r3, [r3, #0]
 800a890:	4a33      	ldr	r2, [pc, #204]	; (800a960 <HAL_RCC_OscConfig+0xa60>)
 800a892:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a896:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800a898:	f7fa ffa4 	bl	80057e4 <HAL_GetTick>
 800a89c:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 800a89e:	e008      	b.n	800a8b2 <HAL_RCC_OscConfig+0x9b2>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 800a8a0:	f7fa ffa0 	bl	80057e4 <HAL_GetTick>
 800a8a4:	4602      	mov	r2, r0
 800a8a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8a8:	1ad3      	subs	r3, r2, r3
 800a8aa:	2b02      	cmp	r3, #2
 800a8ac:	d901      	bls.n	800a8b2 <HAL_RCC_OscConfig+0x9b2>
        {
          return HAL_TIMEOUT;
 800a8ae:	2303      	movs	r3, #3
 800a8b0:	e1f6      	b.n	800aca0 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 800a8b2:	4b2b      	ldr	r3, [pc, #172]	; (800a960 <HAL_RCC_OscConfig+0xa60>)
 800a8b4:	681b      	ldr	r3, [r3, #0]
 800a8b6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a8ba:	2b00      	cmp	r3, #0
 800a8bc:	d0f0      	beq.n	800a8a0 <HAL_RCC_OscConfig+0x9a0>
 800a8be:	e018      	b.n	800a8f2 <HAL_RCC_OscConfig+0x9f2>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 800a8c0:	4b27      	ldr	r3, [pc, #156]	; (800a960 <HAL_RCC_OscConfig+0xa60>)
 800a8c2:	681b      	ldr	r3, [r3, #0]
 800a8c4:	4a26      	ldr	r2, [pc, #152]	; (800a960 <HAL_RCC_OscConfig+0xa60>)
 800a8c6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a8ca:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800a8cc:	f7fa ff8a 	bl	80057e4 <HAL_GetTick>
 800a8d0:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 800a8d2:	e008      	b.n	800a8e6 <HAL_RCC_OscConfig+0x9e6>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 800a8d4:	f7fa ff86 	bl	80057e4 <HAL_GetTick>
 800a8d8:	4602      	mov	r2, r0
 800a8da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8dc:	1ad3      	subs	r3, r2, r3
 800a8de:	2b02      	cmp	r3, #2
 800a8e0:	d901      	bls.n	800a8e6 <HAL_RCC_OscConfig+0x9e6>
        {
          return HAL_TIMEOUT;
 800a8e2:	2303      	movs	r3, #3
 800a8e4:	e1dc      	b.n	800aca0 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 800a8e6:	4b1e      	ldr	r3, [pc, #120]	; (800a960 <HAL_RCC_OscConfig+0xa60>)
 800a8e8:	681b      	ldr	r3, [r3, #0]
 800a8ea:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a8ee:	2b00      	cmp	r3, #0
 800a8f0:	d1f0      	bne.n	800a8d4 <HAL_RCC_OscConfig+0x9d4>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	681b      	ldr	r3, [r3, #0]
 800a8f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a8fa:	2b00      	cmp	r3, #0
 800a8fc:	d07f      	beq.n	800a9fe <HAL_RCC_OscConfig+0xafe>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a902:	2b00      	cmp	r3, #0
 800a904:	d062      	beq.n	800a9cc <HAL_RCC_OscConfig+0xacc>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 800a906:	4b16      	ldr	r3, [pc, #88]	; (800a960 <HAL_RCC_OscConfig+0xa60>)
 800a908:	689b      	ldr	r3, [r3, #8]
 800a90a:	4a15      	ldr	r2, [pc, #84]	; (800a960 <HAL_RCC_OscConfig+0xa60>)
 800a90c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800a910:	6093      	str	r3, [r2, #8]
 800a912:	4b13      	ldr	r3, [pc, #76]	; (800a960 <HAL_RCC_OscConfig+0xa60>)
 800a914:	689b      	ldr	r3, [r3, #8]
 800a916:	f023 6270 	bic.w	r2, r3, #251658240	; 0xf000000
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a91e:	4910      	ldr	r1, [pc, #64]	; (800a960 <HAL_RCC_OscConfig+0xa60>)
 800a920:	4313      	orrs	r3, r2
 800a922:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a928:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 800a92c:	d309      	bcc.n	800a942 <HAL_RCC_OscConfig+0xa42>
 800a92e:	4b0c      	ldr	r3, [pc, #48]	; (800a960 <HAL_RCC_OscConfig+0xa60>)
 800a930:	68db      	ldr	r3, [r3, #12]
 800a932:	f023 021f 	bic.w	r2, r3, #31
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	6a1b      	ldr	r3, [r3, #32]
 800a93a:	4909      	ldr	r1, [pc, #36]	; (800a960 <HAL_RCC_OscConfig+0xa60>)
 800a93c:	4313      	orrs	r3, r2
 800a93e:	60cb      	str	r3, [r1, #12]
 800a940:	e02a      	b.n	800a998 <HAL_RCC_OscConfig+0xa98>
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a946:	2b00      	cmp	r3, #0
 800a948:	da0c      	bge.n	800a964 <HAL_RCC_OscConfig+0xa64>
 800a94a:	4b05      	ldr	r3, [pc, #20]	; (800a960 <HAL_RCC_OscConfig+0xa60>)
 800a94c:	68db      	ldr	r3, [r3, #12]
 800a94e:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	6a1b      	ldr	r3, [r3, #32]
 800a956:	015b      	lsls	r3, r3, #5
 800a958:	4901      	ldr	r1, [pc, #4]	; (800a960 <HAL_RCC_OscConfig+0xa60>)
 800a95a:	4313      	orrs	r3, r2
 800a95c:	60cb      	str	r3, [r1, #12]
 800a95e:	e01b      	b.n	800a998 <HAL_RCC_OscConfig+0xa98>
 800a960:	46020c00 	.word	0x46020c00
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a968:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a96c:	d30a      	bcc.n	800a984 <HAL_RCC_OscConfig+0xa84>
 800a96e:	4ba5      	ldr	r3, [pc, #660]	; (800ac04 <HAL_RCC_OscConfig+0xd04>)
 800a970:	68db      	ldr	r3, [r3, #12]
 800a972:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	6a1b      	ldr	r3, [r3, #32]
 800a97a:	029b      	lsls	r3, r3, #10
 800a97c:	49a1      	ldr	r1, [pc, #644]	; (800ac04 <HAL_RCC_OscConfig+0xd04>)
 800a97e:	4313      	orrs	r3, r2
 800a980:	60cb      	str	r3, [r1, #12]
 800a982:	e009      	b.n	800a998 <HAL_RCC_OscConfig+0xa98>
 800a984:	4b9f      	ldr	r3, [pc, #636]	; (800ac04 <HAL_RCC_OscConfig+0xd04>)
 800a986:	68db      	ldr	r3, [r3, #12]
 800a988:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	6a1b      	ldr	r3, [r3, #32]
 800a990:	03db      	lsls	r3, r3, #15
 800a992:	499c      	ldr	r1, [pc, #624]	; (800ac04 <HAL_RCC_OscConfig+0xd04>)
 800a994:	4313      	orrs	r3, r2
 800a996:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 800a998:	4b9a      	ldr	r3, [pc, #616]	; (800ac04 <HAL_RCC_OscConfig+0xd04>)
 800a99a:	681b      	ldr	r3, [r3, #0]
 800a99c:	4a99      	ldr	r2, [pc, #612]	; (800ac04 <HAL_RCC_OscConfig+0xd04>)
 800a99e:	f043 0310 	orr.w	r3, r3, #16
 800a9a2:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800a9a4:	f7fa ff1e 	bl	80057e4 <HAL_GetTick>
 800a9a8:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 800a9aa:	e008      	b.n	800a9be <HAL_RCC_OscConfig+0xabe>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 800a9ac:	f7fa ff1a 	bl	80057e4 <HAL_GetTick>
 800a9b0:	4602      	mov	r2, r0
 800a9b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9b4:	1ad3      	subs	r3, r2, r3
 800a9b6:	2b02      	cmp	r3, #2
 800a9b8:	d901      	bls.n	800a9be <HAL_RCC_OscConfig+0xabe>
        {
          return HAL_TIMEOUT;
 800a9ba:	2303      	movs	r3, #3
 800a9bc:	e170      	b.n	800aca0 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 800a9be:	4b91      	ldr	r3, [pc, #580]	; (800ac04 <HAL_RCC_OscConfig+0xd04>)
 800a9c0:	681b      	ldr	r3, [r3, #0]
 800a9c2:	f003 0320 	and.w	r3, r3, #32
 800a9c6:	2b00      	cmp	r3, #0
 800a9c8:	d0f0      	beq.n	800a9ac <HAL_RCC_OscConfig+0xaac>
 800a9ca:	e018      	b.n	800a9fe <HAL_RCC_OscConfig+0xafe>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 800a9cc:	4b8d      	ldr	r3, [pc, #564]	; (800ac04 <HAL_RCC_OscConfig+0xd04>)
 800a9ce:	681b      	ldr	r3, [r3, #0]
 800a9d0:	4a8c      	ldr	r2, [pc, #560]	; (800ac04 <HAL_RCC_OscConfig+0xd04>)
 800a9d2:	f023 0310 	bic.w	r3, r3, #16
 800a9d6:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800a9d8:	f7fa ff04 	bl	80057e4 <HAL_GetTick>
 800a9dc:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 800a9de:	e008      	b.n	800a9f2 <HAL_RCC_OscConfig+0xaf2>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 800a9e0:	f7fa ff00 	bl	80057e4 <HAL_GetTick>
 800a9e4:	4602      	mov	r2, r0
 800a9e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9e8:	1ad3      	subs	r3, r2, r3
 800a9ea:	2b02      	cmp	r3, #2
 800a9ec:	d901      	bls.n	800a9f2 <HAL_RCC_OscConfig+0xaf2>
        {
          return HAL_TIMEOUT;
 800a9ee:	2303      	movs	r3, #3
 800a9f0:	e156      	b.n	800aca0 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 800a9f2:	4b84      	ldr	r3, [pc, #528]	; (800ac04 <HAL_RCC_OscConfig+0xd04>)
 800a9f4:	681b      	ldr	r3, [r3, #0]
 800a9f6:	f003 0320 	and.w	r3, r3, #32
 800a9fa:	2b00      	cmp	r3, #0
 800a9fc:	d1f0      	bne.n	800a9e0 <HAL_RCC_OscConfig+0xae0>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa02:	2b00      	cmp	r3, #0
 800aa04:	f000 814b 	beq.w	800ac9e <HAL_RCC_OscConfig+0xd9e>
  {
    FlagStatus  pwrclkchanged = RESET;
 800aa08:	2300      	movs	r3, #0
 800aa0a:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800aa0e:	4b7d      	ldr	r3, [pc, #500]	; (800ac04 <HAL_RCC_OscConfig+0xd04>)
 800aa10:	69db      	ldr	r3, [r3, #28]
 800aa12:	f003 030c 	and.w	r3, r3, #12
 800aa16:	2b0c      	cmp	r3, #12
 800aa18:	f000 80fa 	beq.w	800ac10 <HAL_RCC_OscConfig+0xd10>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa20:	2b02      	cmp	r3, #2
 800aa22:	f040 80cc 	bne.w	800abbe <HAL_RCC_OscConfig+0xcbe>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 800aa26:	4b77      	ldr	r3, [pc, #476]	; (800ac04 <HAL_RCC_OscConfig+0xd04>)
 800aa28:	681b      	ldr	r3, [r3, #0]
 800aa2a:	4a76      	ldr	r2, [pc, #472]	; (800ac04 <HAL_RCC_OscConfig+0xd04>)
 800aa2c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800aa30:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800aa32:	f7fa fed7 	bl	80057e4 <HAL_GetTick>
 800aa36:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800aa38:	e008      	b.n	800aa4c <HAL_RCC_OscConfig+0xb4c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800aa3a:	f7fa fed3 	bl	80057e4 <HAL_GetTick>
 800aa3e:	4602      	mov	r2, r0
 800aa40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa42:	1ad3      	subs	r3, r2, r3
 800aa44:	2b02      	cmp	r3, #2
 800aa46:	d901      	bls.n	800aa4c <HAL_RCC_OscConfig+0xb4c>
          {
            return HAL_TIMEOUT;
 800aa48:	2303      	movs	r3, #3
 800aa4a:	e129      	b.n	800aca0 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800aa4c:	4b6d      	ldr	r3, [pc, #436]	; (800ac04 <HAL_RCC_OscConfig+0xd04>)
 800aa4e:	681b      	ldr	r3, [r3, #0]
 800aa50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800aa54:	2b00      	cmp	r3, #0
 800aa56:	d1f0      	bne.n	800aa3a <HAL_RCC_OscConfig+0xb3a>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800aa58:	4b6a      	ldr	r3, [pc, #424]	; (800ac04 <HAL_RCC_OscConfig+0xd04>)
 800aa5a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800aa5e:	f003 0304 	and.w	r3, r3, #4
 800aa62:	2b00      	cmp	r3, #0
 800aa64:	d111      	bne.n	800aa8a <HAL_RCC_OscConfig+0xb8a>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 800aa66:	4b67      	ldr	r3, [pc, #412]	; (800ac04 <HAL_RCC_OscConfig+0xd04>)
 800aa68:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800aa6c:	4a65      	ldr	r2, [pc, #404]	; (800ac04 <HAL_RCC_OscConfig+0xd04>)
 800aa6e:	f043 0304 	orr.w	r3, r3, #4
 800aa72:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800aa76:	4b63      	ldr	r3, [pc, #396]	; (800ac04 <HAL_RCC_OscConfig+0xd04>)
 800aa78:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800aa7c:	f003 0304 	and.w	r3, r3, #4
 800aa80:	60fb      	str	r3, [r7, #12]
 800aa82:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 800aa84:	2301      	movs	r3, #1
 800aa86:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 800aa8a:	4b5f      	ldr	r3, [pc, #380]	; (800ac08 <HAL_RCC_OscConfig+0xd08>)
 800aa8c:	68db      	ldr	r3, [r3, #12]
 800aa8e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800aa92:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800aa96:	d102      	bne.n	800aa9e <HAL_RCC_OscConfig+0xb9e>
        {
          pwrboosten = SET;
 800aa98:	2301      	movs	r3, #1
 800aa9a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 800aa9e:	4b5a      	ldr	r3, [pc, #360]	; (800ac08 <HAL_RCC_OscConfig+0xd08>)
 800aaa0:	68db      	ldr	r3, [r3, #12]
 800aaa2:	4a59      	ldr	r2, [pc, #356]	; (800ac08 <HAL_RCC_OscConfig+0xd08>)
 800aaa4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800aaa8:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 800aaaa:	4b56      	ldr	r3, [pc, #344]	; (800ac04 <HAL_RCC_OscConfig+0xd04>)
 800aaac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aaae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800aab2:	f023 0303 	bic.w	r3, r3, #3
 800aab6:	687a      	ldr	r2, [r7, #4]
 800aab8:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800aaba:	687a      	ldr	r2, [r7, #4]
 800aabc:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800aabe:	3a01      	subs	r2, #1
 800aac0:	0212      	lsls	r2, r2, #8
 800aac2:	4311      	orrs	r1, r2
 800aac4:	687a      	ldr	r2, [r7, #4]
 800aac6:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800aac8:	430a      	orrs	r2, r1
 800aaca:	494e      	ldr	r1, [pc, #312]	; (800ac04 <HAL_RCC_OscConfig+0xd04>)
 800aacc:	4313      	orrs	r3, r2
 800aace:	628b      	str	r3, [r1, #40]	; 0x28
 800aad0:	4b4c      	ldr	r3, [pc, #304]	; (800ac04 <HAL_RCC_OscConfig+0xd04>)
 800aad2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800aad4:	4b4d      	ldr	r3, [pc, #308]	; (800ac0c <HAL_RCC_OscConfig+0xd0c>)
 800aad6:	4013      	ands	r3, r2
 800aad8:	687a      	ldr	r2, [r7, #4]
 800aada:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800aadc:	3a01      	subs	r2, #1
 800aade:	f3c2 0108 	ubfx	r1, r2, #0, #9
 800aae2:	687a      	ldr	r2, [r7, #4]
 800aae4:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800aae6:	3a01      	subs	r2, #1
 800aae8:	0252      	lsls	r2, r2, #9
 800aaea:	b292      	uxth	r2, r2
 800aaec:	4311      	orrs	r1, r2
 800aaee:	687a      	ldr	r2, [r7, #4]
 800aaf0:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800aaf2:	3a01      	subs	r2, #1
 800aaf4:	0412      	lsls	r2, r2, #16
 800aaf6:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 800aafa:	4311      	orrs	r1, r2
 800aafc:	687a      	ldr	r2, [r7, #4]
 800aafe:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800ab00:	3a01      	subs	r2, #1
 800ab02:	0612      	lsls	r2, r2, #24
 800ab04:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 800ab08:	430a      	orrs	r2, r1
 800ab0a:	493e      	ldr	r1, [pc, #248]	; (800ac04 <HAL_RCC_OscConfig+0xd04>)
 800ab0c:	4313      	orrs	r3, r2
 800ab0e:	634b      	str	r3, [r1, #52]	; 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLLFRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLLFRACN_DISABLE();
 800ab10:	4b3c      	ldr	r3, [pc, #240]	; (800ac04 <HAL_RCC_OscConfig+0xd04>)
 800ab12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab14:	4a3b      	ldr	r2, [pc, #236]	; (800ac04 <HAL_RCC_OscConfig+0xd04>)
 800ab16:	f023 0310 	bic.w	r3, r3, #16
 800ab1a:	6293      	str	r3, [r2, #40]	; 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 800ab1c:	4b39      	ldr	r3, [pc, #228]	; (800ac04 <HAL_RCC_OscConfig+0xd04>)
 800ab1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab20:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800ab24:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800ab28:	687a      	ldr	r2, [r7, #4]
 800ab2a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800ab2c:	00d2      	lsls	r2, r2, #3
 800ab2e:	4935      	ldr	r1, [pc, #212]	; (800ac04 <HAL_RCC_OscConfig+0xd04>)
 800ab30:	4313      	orrs	r3, r2
 800ab32:	638b      	str	r3, [r1, #56]	; 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLLFRACN_ENABLE();
 800ab34:	4b33      	ldr	r3, [pc, #204]	; (800ac04 <HAL_RCC_OscConfig+0xd04>)
 800ab36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab38:	4a32      	ldr	r2, [pc, #200]	; (800ac04 <HAL_RCC_OscConfig+0xd04>)
 800ab3a:	f043 0310 	orr.w	r3, r3, #16
 800ab3e:	6293      	str	r3, [r2, #40]	; 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 800ab40:	4b30      	ldr	r3, [pc, #192]	; (800ac04 <HAL_RCC_OscConfig+0xd04>)
 800ab42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab44:	f023 020c 	bic.w	r2, r3, #12
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ab4c:	492d      	ldr	r1, [pc, #180]	; (800ac04 <HAL_RCC_OscConfig+0xd04>)
 800ab4e:	4313      	orrs	r3, r2
 800ab50:	628b      	str	r3, [r1, #40]	; 0x28

        if (pwrboosten == SET)
 800ab52:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ab56:	2b01      	cmp	r3, #1
 800ab58:	d105      	bne.n	800ab66 <HAL_RCC_OscConfig+0xc66>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 800ab5a:	4b2b      	ldr	r3, [pc, #172]	; (800ac08 <HAL_RCC_OscConfig+0xd08>)
 800ab5c:	68db      	ldr	r3, [r3, #12]
 800ab5e:	4a2a      	ldr	r2, [pc, #168]	; (800ac08 <HAL_RCC_OscConfig+0xd08>)
 800ab60:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800ab64:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 800ab66:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800ab6a:	2b01      	cmp	r3, #1
 800ab6c:	d107      	bne.n	800ab7e <HAL_RCC_OscConfig+0xc7e>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 800ab6e:	4b25      	ldr	r3, [pc, #148]	; (800ac04 <HAL_RCC_OscConfig+0xd04>)
 800ab70:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800ab74:	4a23      	ldr	r2, [pc, #140]	; (800ac04 <HAL_RCC_OscConfig+0xd04>)
 800ab76:	f023 0304 	bic.w	r3, r3, #4
 800ab7a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800ab7e:	4b21      	ldr	r3, [pc, #132]	; (800ac04 <HAL_RCC_OscConfig+0xd04>)
 800ab80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab82:	4a20      	ldr	r2, [pc, #128]	; (800ac04 <HAL_RCC_OscConfig+0xd04>)
 800ab84:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800ab88:	6293      	str	r3, [r2, #40]	; 0x28

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 800ab8a:	4b1e      	ldr	r3, [pc, #120]	; (800ac04 <HAL_RCC_OscConfig+0xd04>)
 800ab8c:	681b      	ldr	r3, [r3, #0]
 800ab8e:	4a1d      	ldr	r2, [pc, #116]	; (800ac04 <HAL_RCC_OscConfig+0xd04>)
 800ab90:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800ab94:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800ab96:	f7fa fe25 	bl	80057e4 <HAL_GetTick>
 800ab9a:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800ab9c:	e008      	b.n	800abb0 <HAL_RCC_OscConfig+0xcb0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ab9e:	f7fa fe21 	bl	80057e4 <HAL_GetTick>
 800aba2:	4602      	mov	r2, r0
 800aba4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aba6:	1ad3      	subs	r3, r2, r3
 800aba8:	2b02      	cmp	r3, #2
 800abaa:	d901      	bls.n	800abb0 <HAL_RCC_OscConfig+0xcb0>
          {
            return HAL_TIMEOUT;
 800abac:	2303      	movs	r3, #3
 800abae:	e077      	b.n	800aca0 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800abb0:	4b14      	ldr	r3, [pc, #80]	; (800ac04 <HAL_RCC_OscConfig+0xd04>)
 800abb2:	681b      	ldr	r3, [r3, #0]
 800abb4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800abb8:	2b00      	cmp	r3, #0
 800abba:	d0f0      	beq.n	800ab9e <HAL_RCC_OscConfig+0xc9e>
 800abbc:	e06f      	b.n	800ac9e <HAL_RCC_OscConfig+0xd9e>
        }
      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 800abbe:	4b11      	ldr	r3, [pc, #68]	; (800ac04 <HAL_RCC_OscConfig+0xd04>)
 800abc0:	681b      	ldr	r3, [r3, #0]
 800abc2:	4a10      	ldr	r2, [pc, #64]	; (800ac04 <HAL_RCC_OscConfig+0xd04>)
 800abc4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800abc8:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800abca:	f7fa fe0b 	bl	80057e4 <HAL_GetTick>
 800abce:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800abd0:	e008      	b.n	800abe4 <HAL_RCC_OscConfig+0xce4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800abd2:	f7fa fe07 	bl	80057e4 <HAL_GetTick>
 800abd6:	4602      	mov	r2, r0
 800abd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abda:	1ad3      	subs	r3, r2, r3
 800abdc:	2b02      	cmp	r3, #2
 800abde:	d901      	bls.n	800abe4 <HAL_RCC_OscConfig+0xce4>
          {
            return HAL_TIMEOUT;
 800abe0:	2303      	movs	r3, #3
 800abe2:	e05d      	b.n	800aca0 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800abe4:	4b07      	ldr	r3, [pc, #28]	; (800ac04 <HAL_RCC_OscConfig+0xd04>)
 800abe6:	681b      	ldr	r3, [r3, #0]
 800abe8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800abec:	2b00      	cmp	r3, #0
 800abee:	d1f0      	bne.n	800abd2 <HAL_RCC_OscConfig+0xcd2>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 800abf0:	4b04      	ldr	r3, [pc, #16]	; (800ac04 <HAL_RCC_OscConfig+0xd04>)
 800abf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800abf4:	4a03      	ldr	r2, [pc, #12]	; (800ac04 <HAL_RCC_OscConfig+0xd04>)
 800abf6:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 800abfa:	f023 0303 	bic.w	r3, r3, #3
 800abfe:	6293      	str	r3, [r2, #40]	; 0x28
 800ac00:	e04d      	b.n	800ac9e <HAL_RCC_OscConfig+0xd9e>
 800ac02:	bf00      	nop
 800ac04:	46020c00 	.word	0x46020c00
 800ac08:	46020800 	.word	0x46020800
 800ac0c:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 800ac10:	4b25      	ldr	r3, [pc, #148]	; (800aca8 <HAL_RCC_OscConfig+0xda8>)
 800ac12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac14:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800ac16:	4b24      	ldr	r3, [pc, #144]	; (800aca8 <HAL_RCC_OscConfig+0xda8>)
 800ac18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ac1a:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac20:	2b01      	cmp	r3, #1
 800ac22:	d03a      	beq.n	800ac9a <HAL_RCC_OscConfig+0xd9a>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 800ac24:	69fb      	ldr	r3, [r7, #28]
 800ac26:	f003 0203 	and.w	r2, r3, #3
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800ac2e:	429a      	cmp	r2, r3
 800ac30:	d133      	bne.n	800ac9a <HAL_RCC_OscConfig+0xd9a>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 800ac32:	69fb      	ldr	r3, [r7, #28]
 800ac34:	0a1b      	lsrs	r3, r3, #8
 800ac36:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac3e:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 800ac40:	429a      	cmp	r2, r3
 800ac42:	d12a      	bne.n	800ac9a <HAL_RCC_OscConfig+0xd9a>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) >> \
 800ac44:	69fb      	ldr	r3, [r7, #28]
 800ac46:	0b1b      	lsrs	r3, r3, #12
 800ac48:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1MBOOST_Pos) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 800ac50:	429a      	cmp	r2, r3
 800ac52:	d122      	bne.n	800ac9a <HAL_RCC_OscConfig+0xd9a>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800ac54:	69bb      	ldr	r3, [r7, #24]
 800ac56:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ac5e:	3b01      	subs	r3, #1
            RCC_PLL1CFGR_PLL1MBOOST_Pos) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 800ac60:	429a      	cmp	r2, r3
 800ac62:	d11a      	bne.n	800ac9a <HAL_RCC_OscConfig+0xd9a>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 800ac64:	69bb      	ldr	r3, [r7, #24]
 800ac66:	0a5b      	lsrs	r3, r3, #9
 800ac68:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ac70:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800ac72:	429a      	cmp	r2, r3
 800ac74:	d111      	bne.n	800ac9a <HAL_RCC_OscConfig+0xd9a>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 800ac76:	69bb      	ldr	r3, [r7, #24]
 800ac78:	0c1b      	lsrs	r3, r3, #16
 800ac7a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ac82:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800ac84:	429a      	cmp	r2, r3
 800ac86:	d108      	bne.n	800ac9a <HAL_RCC_OscConfig+0xd9a>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 800ac88:	69bb      	ldr	r3, [r7, #24]
 800ac8a:	0e1b      	lsrs	r3, r3, #24
 800ac8c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ac94:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800ac96:	429a      	cmp	r2, r3
 800ac98:	d001      	beq.n	800ac9e <HAL_RCC_OscConfig+0xd9e>
      {
        return HAL_ERROR;
 800ac9a:	2301      	movs	r3, #1
 800ac9c:	e000      	b.n	800aca0 <HAL_RCC_OscConfig+0xda0>
      }
    }
  }
  return HAL_OK;
 800ac9e:	2300      	movs	r3, #0
}
 800aca0:	4618      	mov	r0, r3
 800aca2:	3738      	adds	r7, #56	; 0x38
 800aca4:	46bd      	mov	sp, r7
 800aca6:	bd80      	pop	{r7, pc}
 800aca8:	46020c00 	.word	0x46020c00

0800acac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 800acac:	b580      	push	{r7, lr}
 800acae:	b086      	sub	sp, #24
 800acb0:	af00      	add	r7, sp, #0
 800acb2:	6078      	str	r0, [r7, #4]
 800acb4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	2b00      	cmp	r3, #0
 800acba:	d101      	bne.n	800acc0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800acbc:	2301      	movs	r3, #1
 800acbe:	e1d9      	b.n	800b074 <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800acc0:	4b9b      	ldr	r3, [pc, #620]	; (800af30 <HAL_RCC_ClockConfig+0x284>)
 800acc2:	681b      	ldr	r3, [r3, #0]
 800acc4:	f003 030f 	and.w	r3, r3, #15
 800acc8:	683a      	ldr	r2, [r7, #0]
 800acca:	429a      	cmp	r2, r3
 800accc:	d910      	bls.n	800acf0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800acce:	4b98      	ldr	r3, [pc, #608]	; (800af30 <HAL_RCC_ClockConfig+0x284>)
 800acd0:	681b      	ldr	r3, [r3, #0]
 800acd2:	f023 020f 	bic.w	r2, r3, #15
 800acd6:	4996      	ldr	r1, [pc, #600]	; (800af30 <HAL_RCC_ClockConfig+0x284>)
 800acd8:	683b      	ldr	r3, [r7, #0]
 800acda:	4313      	orrs	r3, r2
 800acdc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800acde:	4b94      	ldr	r3, [pc, #592]	; (800af30 <HAL_RCC_ClockConfig+0x284>)
 800ace0:	681b      	ldr	r3, [r3, #0]
 800ace2:	f003 030f 	and.w	r3, r3, #15
 800ace6:	683a      	ldr	r2, [r7, #0]
 800ace8:	429a      	cmp	r2, r3
 800acea:	d001      	beq.n	800acf0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800acec:	2301      	movs	r3, #1
 800acee:	e1c1      	b.n	800b074 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	681b      	ldr	r3, [r3, #0]
 800acf4:	f003 0310 	and.w	r3, r3, #16
 800acf8:	2b00      	cmp	r3, #0
 800acfa:	d010      	beq.n	800ad1e <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	695a      	ldr	r2, [r3, #20]
 800ad00:	4b8c      	ldr	r3, [pc, #560]	; (800af34 <HAL_RCC_ClockConfig+0x288>)
 800ad02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad04:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800ad08:	429a      	cmp	r2, r3
 800ad0a:	d908      	bls.n	800ad1e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 800ad0c:	4b89      	ldr	r3, [pc, #548]	; (800af34 <HAL_RCC_ClockConfig+0x288>)
 800ad0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad10:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	695b      	ldr	r3, [r3, #20]
 800ad18:	4986      	ldr	r1, [pc, #536]	; (800af34 <HAL_RCC_ClockConfig+0x288>)
 800ad1a:	4313      	orrs	r3, r2
 800ad1c:	624b      	str	r3, [r1, #36]	; 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	681b      	ldr	r3, [r3, #0]
 800ad22:	f003 0308 	and.w	r3, r3, #8
 800ad26:	2b00      	cmp	r3, #0
 800ad28:	d012      	beq.n	800ad50 <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	691a      	ldr	r2, [r3, #16]
 800ad2e:	4b81      	ldr	r3, [pc, #516]	; (800af34 <HAL_RCC_ClockConfig+0x288>)
 800ad30:	6a1b      	ldr	r3, [r3, #32]
 800ad32:	091b      	lsrs	r3, r3, #4
 800ad34:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800ad38:	429a      	cmp	r2, r3
 800ad3a:	d909      	bls.n	800ad50 <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 800ad3c:	4b7d      	ldr	r3, [pc, #500]	; (800af34 <HAL_RCC_ClockConfig+0x288>)
 800ad3e:	6a1b      	ldr	r3, [r3, #32]
 800ad40:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	691b      	ldr	r3, [r3, #16]
 800ad48:	011b      	lsls	r3, r3, #4
 800ad4a:	497a      	ldr	r1, [pc, #488]	; (800af34 <HAL_RCC_ClockConfig+0x288>)
 800ad4c:	4313      	orrs	r3, r2
 800ad4e:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	681b      	ldr	r3, [r3, #0]
 800ad54:	f003 0304 	and.w	r3, r3, #4
 800ad58:	2b00      	cmp	r3, #0
 800ad5a:	d010      	beq.n	800ad7e <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	68da      	ldr	r2, [r3, #12]
 800ad60:	4b74      	ldr	r3, [pc, #464]	; (800af34 <HAL_RCC_ClockConfig+0x288>)
 800ad62:	6a1b      	ldr	r3, [r3, #32]
 800ad64:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800ad68:	429a      	cmp	r2, r3
 800ad6a:	d908      	bls.n	800ad7e <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 800ad6c:	4b71      	ldr	r3, [pc, #452]	; (800af34 <HAL_RCC_ClockConfig+0x288>)
 800ad6e:	6a1b      	ldr	r3, [r3, #32]
 800ad70:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	68db      	ldr	r3, [r3, #12]
 800ad78:	496e      	ldr	r1, [pc, #440]	; (800af34 <HAL_RCC_ClockConfig+0x288>)
 800ad7a:	4313      	orrs	r3, r2
 800ad7c:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	681b      	ldr	r3, [r3, #0]
 800ad82:	f003 0302 	and.w	r3, r3, #2
 800ad86:	2b00      	cmp	r3, #0
 800ad88:	d010      	beq.n	800adac <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	689a      	ldr	r2, [r3, #8]
 800ad8e:	4b69      	ldr	r3, [pc, #420]	; (800af34 <HAL_RCC_ClockConfig+0x288>)
 800ad90:	6a1b      	ldr	r3, [r3, #32]
 800ad92:	f003 030f 	and.w	r3, r3, #15
 800ad96:	429a      	cmp	r2, r3
 800ad98:	d908      	bls.n	800adac <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 800ad9a:	4b66      	ldr	r3, [pc, #408]	; (800af34 <HAL_RCC_ClockConfig+0x288>)
 800ad9c:	6a1b      	ldr	r3, [r3, #32]
 800ad9e:	f023 020f 	bic.w	r2, r3, #15
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	689b      	ldr	r3, [r3, #8]
 800ada6:	4963      	ldr	r1, [pc, #396]	; (800af34 <HAL_RCC_ClockConfig+0x288>)
 800ada8:	4313      	orrs	r3, r2
 800adaa:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	681b      	ldr	r3, [r3, #0]
 800adb0:	f003 0301 	and.w	r3, r3, #1
 800adb4:	2b00      	cmp	r3, #0
 800adb6:	f000 80d2 	beq.w	800af5e <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 800adba:	2300      	movs	r3, #0
 800adbc:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	685b      	ldr	r3, [r3, #4]
 800adc2:	2b03      	cmp	r3, #3
 800adc4:	d143      	bne.n	800ae4e <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800adc6:	4b5b      	ldr	r3, [pc, #364]	; (800af34 <HAL_RCC_ClockConfig+0x288>)
 800adc8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800adcc:	f003 0304 	and.w	r3, r3, #4
 800add0:	2b00      	cmp	r3, #0
 800add2:	d110      	bne.n	800adf6 <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800add4:	4b57      	ldr	r3, [pc, #348]	; (800af34 <HAL_RCC_ClockConfig+0x288>)
 800add6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800adda:	4a56      	ldr	r2, [pc, #344]	; (800af34 <HAL_RCC_ClockConfig+0x288>)
 800addc:	f043 0304 	orr.w	r3, r3, #4
 800ade0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800ade4:	4b53      	ldr	r3, [pc, #332]	; (800af34 <HAL_RCC_ClockConfig+0x288>)
 800ade6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800adea:	f003 0304 	and.w	r3, r3, #4
 800adee:	60bb      	str	r3, [r7, #8]
 800adf0:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 800adf2:	2301      	movs	r3, #1
 800adf4:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 800adf6:	f7fa fcf5 	bl	80057e4 <HAL_GetTick>
 800adfa:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 800adfc:	4b4e      	ldr	r3, [pc, #312]	; (800af38 <HAL_RCC_ClockConfig+0x28c>)
 800adfe:	68db      	ldr	r3, [r3, #12]
 800ae00:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800ae04:	2b00      	cmp	r3, #0
 800ae06:	d00f      	beq.n	800ae28 <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 800ae08:	e008      	b.n	800ae1c <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 800ae0a:	f7fa fceb 	bl	80057e4 <HAL_GetTick>
 800ae0e:	4602      	mov	r2, r0
 800ae10:	693b      	ldr	r3, [r7, #16]
 800ae12:	1ad3      	subs	r3, r2, r3
 800ae14:	2b02      	cmp	r3, #2
 800ae16:	d901      	bls.n	800ae1c <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 800ae18:	2303      	movs	r3, #3
 800ae1a:	e12b      	b.n	800b074 <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 800ae1c:	4b46      	ldr	r3, [pc, #280]	; (800af38 <HAL_RCC_ClockConfig+0x28c>)
 800ae1e:	68db      	ldr	r3, [r3, #12]
 800ae20:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ae24:	2b00      	cmp	r3, #0
 800ae26:	d0f0      	beq.n	800ae0a <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800ae28:	7dfb      	ldrb	r3, [r7, #23]
 800ae2a:	2b01      	cmp	r3, #1
 800ae2c:	d107      	bne.n	800ae3e <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 800ae2e:	4b41      	ldr	r3, [pc, #260]	; (800af34 <HAL_RCC_ClockConfig+0x288>)
 800ae30:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800ae34:	4a3f      	ldr	r2, [pc, #252]	; (800af34 <HAL_RCC_ClockConfig+0x288>)
 800ae36:	f023 0304 	bic.w	r3, r3, #4
 800ae3a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800ae3e:	4b3d      	ldr	r3, [pc, #244]	; (800af34 <HAL_RCC_ClockConfig+0x288>)
 800ae40:	681b      	ldr	r3, [r3, #0]
 800ae42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ae46:	2b00      	cmp	r3, #0
 800ae48:	d121      	bne.n	800ae8e <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 800ae4a:	2301      	movs	r3, #1
 800ae4c:	e112      	b.n	800b074 <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	685b      	ldr	r3, [r3, #4]
 800ae52:	2b02      	cmp	r3, #2
 800ae54:	d107      	bne.n	800ae66 <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800ae56:	4b37      	ldr	r3, [pc, #220]	; (800af34 <HAL_RCC_ClockConfig+0x288>)
 800ae58:	681b      	ldr	r3, [r3, #0]
 800ae5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ae5e:	2b00      	cmp	r3, #0
 800ae60:	d115      	bne.n	800ae8e <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 800ae62:	2301      	movs	r3, #1
 800ae64:	e106      	b.n	800b074 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	685b      	ldr	r3, [r3, #4]
 800ae6a:	2b00      	cmp	r3, #0
 800ae6c:	d107      	bne.n	800ae7e <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 800ae6e:	4b31      	ldr	r3, [pc, #196]	; (800af34 <HAL_RCC_ClockConfig+0x288>)
 800ae70:	681b      	ldr	r3, [r3, #0]
 800ae72:	f003 0304 	and.w	r3, r3, #4
 800ae76:	2b00      	cmp	r3, #0
 800ae78:	d109      	bne.n	800ae8e <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 800ae7a:	2301      	movs	r3, #1
 800ae7c:	e0fa      	b.n	800b074 <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800ae7e:	4b2d      	ldr	r3, [pc, #180]	; (800af34 <HAL_RCC_ClockConfig+0x288>)
 800ae80:	681b      	ldr	r3, [r3, #0]
 800ae82:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ae86:	2b00      	cmp	r3, #0
 800ae88:	d101      	bne.n	800ae8e <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 800ae8a:	2301      	movs	r3, #1
 800ae8c:	e0f2      	b.n	800b074 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 800ae8e:	4b29      	ldr	r3, [pc, #164]	; (800af34 <HAL_RCC_ClockConfig+0x288>)
 800ae90:	69db      	ldr	r3, [r3, #28]
 800ae92:	f023 0203 	bic.w	r2, r3, #3
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	685b      	ldr	r3, [r3, #4]
 800ae9a:	4926      	ldr	r1, [pc, #152]	; (800af34 <HAL_RCC_ClockConfig+0x288>)
 800ae9c:	4313      	orrs	r3, r2
 800ae9e:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 800aea0:	f7fa fca0 	bl	80057e4 <HAL_GetTick>
 800aea4:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	685b      	ldr	r3, [r3, #4]
 800aeaa:	2b03      	cmp	r3, #3
 800aeac:	d112      	bne.n	800aed4 <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800aeae:	e00a      	b.n	800aec6 <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800aeb0:	f7fa fc98 	bl	80057e4 <HAL_GetTick>
 800aeb4:	4602      	mov	r2, r0
 800aeb6:	693b      	ldr	r3, [r7, #16]
 800aeb8:	1ad3      	subs	r3, r2, r3
 800aeba:	f241 3288 	movw	r2, #5000	; 0x1388
 800aebe:	4293      	cmp	r3, r2
 800aec0:	d901      	bls.n	800aec6 <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 800aec2:	2303      	movs	r3, #3
 800aec4:	e0d6      	b.n	800b074 <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800aec6:	4b1b      	ldr	r3, [pc, #108]	; (800af34 <HAL_RCC_ClockConfig+0x288>)
 800aec8:	69db      	ldr	r3, [r3, #28]
 800aeca:	f003 030c 	and.w	r3, r3, #12
 800aece:	2b0c      	cmp	r3, #12
 800aed0:	d1ee      	bne.n	800aeb0 <HAL_RCC_ClockConfig+0x204>
 800aed2:	e044      	b.n	800af5e <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	685b      	ldr	r3, [r3, #4]
 800aed8:	2b02      	cmp	r3, #2
 800aeda:	d112      	bne.n	800af02 <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800aedc:	e00a      	b.n	800aef4 <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800aede:	f7fa fc81 	bl	80057e4 <HAL_GetTick>
 800aee2:	4602      	mov	r2, r0
 800aee4:	693b      	ldr	r3, [r7, #16]
 800aee6:	1ad3      	subs	r3, r2, r3
 800aee8:	f241 3288 	movw	r2, #5000	; 0x1388
 800aeec:	4293      	cmp	r3, r2
 800aeee:	d901      	bls.n	800aef4 <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 800aef0:	2303      	movs	r3, #3
 800aef2:	e0bf      	b.n	800b074 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800aef4:	4b0f      	ldr	r3, [pc, #60]	; (800af34 <HAL_RCC_ClockConfig+0x288>)
 800aef6:	69db      	ldr	r3, [r3, #28]
 800aef8:	f003 030c 	and.w	r3, r3, #12
 800aefc:	2b08      	cmp	r3, #8
 800aefe:	d1ee      	bne.n	800aede <HAL_RCC_ClockConfig+0x232>
 800af00:	e02d      	b.n	800af5e <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	685b      	ldr	r3, [r3, #4]
 800af06:	2b00      	cmp	r3, #0
 800af08:	d123      	bne.n	800af52 <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800af0a:	e00a      	b.n	800af22 <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800af0c:	f7fa fc6a 	bl	80057e4 <HAL_GetTick>
 800af10:	4602      	mov	r2, r0
 800af12:	693b      	ldr	r3, [r7, #16]
 800af14:	1ad3      	subs	r3, r2, r3
 800af16:	f241 3288 	movw	r2, #5000	; 0x1388
 800af1a:	4293      	cmp	r3, r2
 800af1c:	d901      	bls.n	800af22 <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 800af1e:	2303      	movs	r3, #3
 800af20:	e0a8      	b.n	800b074 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800af22:	4b04      	ldr	r3, [pc, #16]	; (800af34 <HAL_RCC_ClockConfig+0x288>)
 800af24:	69db      	ldr	r3, [r3, #28]
 800af26:	f003 030c 	and.w	r3, r3, #12
 800af2a:	2b00      	cmp	r3, #0
 800af2c:	d1ee      	bne.n	800af0c <HAL_RCC_ClockConfig+0x260>
 800af2e:	e016      	b.n	800af5e <HAL_RCC_ClockConfig+0x2b2>
 800af30:	40022000 	.word	0x40022000
 800af34:	46020c00 	.word	0x46020c00
 800af38:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800af3c:	f7fa fc52 	bl	80057e4 <HAL_GetTick>
 800af40:	4602      	mov	r2, r0
 800af42:	693b      	ldr	r3, [r7, #16]
 800af44:	1ad3      	subs	r3, r2, r3
 800af46:	f241 3288 	movw	r2, #5000	; 0x1388
 800af4a:	4293      	cmp	r3, r2
 800af4c:	d901      	bls.n	800af52 <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 800af4e:	2303      	movs	r3, #3
 800af50:	e090      	b.n	800b074 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800af52:	4b4a      	ldr	r3, [pc, #296]	; (800b07c <HAL_RCC_ClockConfig+0x3d0>)
 800af54:	69db      	ldr	r3, [r3, #28]
 800af56:	f003 030c 	and.w	r3, r3, #12
 800af5a:	2b04      	cmp	r3, #4
 800af5c:	d1ee      	bne.n	800af3c <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	681b      	ldr	r3, [r3, #0]
 800af62:	f003 0302 	and.w	r3, r3, #2
 800af66:	2b00      	cmp	r3, #0
 800af68:	d010      	beq.n	800af8c <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	689a      	ldr	r2, [r3, #8]
 800af6e:	4b43      	ldr	r3, [pc, #268]	; (800b07c <HAL_RCC_ClockConfig+0x3d0>)
 800af70:	6a1b      	ldr	r3, [r3, #32]
 800af72:	f003 030f 	and.w	r3, r3, #15
 800af76:	429a      	cmp	r2, r3
 800af78:	d208      	bcs.n	800af8c <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 800af7a:	4b40      	ldr	r3, [pc, #256]	; (800b07c <HAL_RCC_ClockConfig+0x3d0>)
 800af7c:	6a1b      	ldr	r3, [r3, #32]
 800af7e:	f023 020f 	bic.w	r2, r3, #15
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	689b      	ldr	r3, [r3, #8]
 800af86:	493d      	ldr	r1, [pc, #244]	; (800b07c <HAL_RCC_ClockConfig+0x3d0>)
 800af88:	4313      	orrs	r3, r2
 800af8a:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800af8c:	4b3c      	ldr	r3, [pc, #240]	; (800b080 <HAL_RCC_ClockConfig+0x3d4>)
 800af8e:	681b      	ldr	r3, [r3, #0]
 800af90:	f003 030f 	and.w	r3, r3, #15
 800af94:	683a      	ldr	r2, [r7, #0]
 800af96:	429a      	cmp	r2, r3
 800af98:	d210      	bcs.n	800afbc <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800af9a:	4b39      	ldr	r3, [pc, #228]	; (800b080 <HAL_RCC_ClockConfig+0x3d4>)
 800af9c:	681b      	ldr	r3, [r3, #0]
 800af9e:	f023 020f 	bic.w	r2, r3, #15
 800afa2:	4937      	ldr	r1, [pc, #220]	; (800b080 <HAL_RCC_ClockConfig+0x3d4>)
 800afa4:	683b      	ldr	r3, [r7, #0]
 800afa6:	4313      	orrs	r3, r2
 800afa8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800afaa:	4b35      	ldr	r3, [pc, #212]	; (800b080 <HAL_RCC_ClockConfig+0x3d4>)
 800afac:	681b      	ldr	r3, [r3, #0]
 800afae:	f003 030f 	and.w	r3, r3, #15
 800afb2:	683a      	ldr	r2, [r7, #0]
 800afb4:	429a      	cmp	r2, r3
 800afb6:	d001      	beq.n	800afbc <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 800afb8:	2301      	movs	r3, #1
 800afba:	e05b      	b.n	800b074 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	681b      	ldr	r3, [r3, #0]
 800afc0:	f003 0304 	and.w	r3, r3, #4
 800afc4:	2b00      	cmp	r3, #0
 800afc6:	d010      	beq.n	800afea <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	68da      	ldr	r2, [r3, #12]
 800afcc:	4b2b      	ldr	r3, [pc, #172]	; (800b07c <HAL_RCC_ClockConfig+0x3d0>)
 800afce:	6a1b      	ldr	r3, [r3, #32]
 800afd0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800afd4:	429a      	cmp	r2, r3
 800afd6:	d208      	bcs.n	800afea <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 800afd8:	4b28      	ldr	r3, [pc, #160]	; (800b07c <HAL_RCC_ClockConfig+0x3d0>)
 800afda:	6a1b      	ldr	r3, [r3, #32]
 800afdc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	68db      	ldr	r3, [r3, #12]
 800afe4:	4925      	ldr	r1, [pc, #148]	; (800b07c <HAL_RCC_ClockConfig+0x3d0>)
 800afe6:	4313      	orrs	r3, r2
 800afe8:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	681b      	ldr	r3, [r3, #0]
 800afee:	f003 0308 	and.w	r3, r3, #8
 800aff2:	2b00      	cmp	r3, #0
 800aff4:	d012      	beq.n	800b01c <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	691a      	ldr	r2, [r3, #16]
 800affa:	4b20      	ldr	r3, [pc, #128]	; (800b07c <HAL_RCC_ClockConfig+0x3d0>)
 800affc:	6a1b      	ldr	r3, [r3, #32]
 800affe:	091b      	lsrs	r3, r3, #4
 800b000:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800b004:	429a      	cmp	r2, r3
 800b006:	d209      	bcs.n	800b01c <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 800b008:	4b1c      	ldr	r3, [pc, #112]	; (800b07c <HAL_RCC_ClockConfig+0x3d0>)
 800b00a:	6a1b      	ldr	r3, [r3, #32]
 800b00c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	691b      	ldr	r3, [r3, #16]
 800b014:	011b      	lsls	r3, r3, #4
 800b016:	4919      	ldr	r1, [pc, #100]	; (800b07c <HAL_RCC_ClockConfig+0x3d0>)
 800b018:	4313      	orrs	r3, r2
 800b01a:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	681b      	ldr	r3, [r3, #0]
 800b020:	f003 0310 	and.w	r3, r3, #16
 800b024:	2b00      	cmp	r3, #0
 800b026:	d010      	beq.n	800b04a <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	695a      	ldr	r2, [r3, #20]
 800b02c:	4b13      	ldr	r3, [pc, #76]	; (800b07c <HAL_RCC_ClockConfig+0x3d0>)
 800b02e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b030:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800b034:	429a      	cmp	r2, r3
 800b036:	d208      	bcs.n	800b04a <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 800b038:	4b10      	ldr	r3, [pc, #64]	; (800b07c <HAL_RCC_ClockConfig+0x3d0>)
 800b03a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b03c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	695b      	ldr	r3, [r3, #20]
 800b044:	490d      	ldr	r1, [pc, #52]	; (800b07c <HAL_RCC_ClockConfig+0x3d0>)
 800b046:	4313      	orrs	r3, r2
 800b048:	624b      	str	r3, [r1, #36]	; 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800b04a:	f000 f821 	bl	800b090 <HAL_RCC_GetSysClockFreq>
 800b04e:	4602      	mov	r2, r0
 800b050:	4b0a      	ldr	r3, [pc, #40]	; (800b07c <HAL_RCC_ClockConfig+0x3d0>)
 800b052:	6a1b      	ldr	r3, [r3, #32]
 800b054:	f003 030f 	and.w	r3, r3, #15
 800b058:	490a      	ldr	r1, [pc, #40]	; (800b084 <HAL_RCC_ClockConfig+0x3d8>)
 800b05a:	5ccb      	ldrb	r3, [r1, r3]
 800b05c:	fa22 f303 	lsr.w	r3, r2, r3
 800b060:	4a09      	ldr	r2, [pc, #36]	; (800b088 <HAL_RCC_ClockConfig+0x3dc>)
 800b062:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800b064:	4b09      	ldr	r3, [pc, #36]	; (800b08c <HAL_RCC_ClockConfig+0x3e0>)
 800b066:	681b      	ldr	r3, [r3, #0]
 800b068:	4618      	mov	r0, r3
 800b06a:	f7fa fa73 	bl	8005554 <HAL_InitTick>
 800b06e:	4603      	mov	r3, r0
 800b070:	73fb      	strb	r3, [r7, #15]

  return status;
 800b072:	7bfb      	ldrb	r3, [r7, #15]
}
 800b074:	4618      	mov	r0, r3
 800b076:	3718      	adds	r7, #24
 800b078:	46bd      	mov	sp, r7
 800b07a:	bd80      	pop	{r7, pc}
 800b07c:	46020c00 	.word	0x46020c00
 800b080:	40022000 	.word	0x40022000
 800b084:	0800ece8 	.word	0x0800ece8
 800b088:	20000004 	.word	0x20000004
 800b08c:	20000008 	.word	0x20000008

0800b090 <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800b090:	b480      	push	{r7}
 800b092:	b08b      	sub	sp, #44	; 0x2c
 800b094:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 800b096:	2300      	movs	r3, #0
 800b098:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 800b09a:	2300      	movs	r3, #0
 800b09c:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b09e:	4b7b      	ldr	r3, [pc, #492]	; (800b28c <HAL_RCC_GetSysClockFreq+0x1fc>)
 800b0a0:	69db      	ldr	r3, [r3, #28]
 800b0a2:	f003 030c 	and.w	r3, r3, #12
 800b0a6:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800b0a8:	4b78      	ldr	r3, [pc, #480]	; (800b28c <HAL_RCC_GetSysClockFreq+0x1fc>)
 800b0aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b0ac:	f003 0303 	and.w	r3, r3, #3
 800b0b0:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800b0b2:	69bb      	ldr	r3, [r7, #24]
 800b0b4:	2b00      	cmp	r3, #0
 800b0b6:	d005      	beq.n	800b0c4 <HAL_RCC_GetSysClockFreq+0x34>
 800b0b8:	69bb      	ldr	r3, [r7, #24]
 800b0ba:	2b0c      	cmp	r3, #12
 800b0bc:	d121      	bne.n	800b102 <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800b0be:	697b      	ldr	r3, [r7, #20]
 800b0c0:	2b01      	cmp	r3, #1
 800b0c2:	d11e      	bne.n	800b102 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 800b0c4:	4b71      	ldr	r3, [pc, #452]	; (800b28c <HAL_RCC_GetSysClockFreq+0x1fc>)
 800b0c6:	689b      	ldr	r3, [r3, #8]
 800b0c8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b0cc:	2b00      	cmp	r3, #0
 800b0ce:	d107      	bne.n	800b0e0 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 800b0d0:	4b6e      	ldr	r3, [pc, #440]	; (800b28c <HAL_RCC_GetSysClockFreq+0x1fc>)
 800b0d2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800b0d6:	0b1b      	lsrs	r3, r3, #12
 800b0d8:	f003 030f 	and.w	r3, r3, #15
 800b0dc:	627b      	str	r3, [r7, #36]	; 0x24
 800b0de:	e005      	b.n	800b0ec <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 800b0e0:	4b6a      	ldr	r3, [pc, #424]	; (800b28c <HAL_RCC_GetSysClockFreq+0x1fc>)
 800b0e2:	689b      	ldr	r3, [r3, #8]
 800b0e4:	0f1b      	lsrs	r3, r3, #28
 800b0e6:	f003 030f 	and.w	r3, r3, #15
 800b0ea:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800b0ec:	4a68      	ldr	r2, [pc, #416]	; (800b290 <HAL_RCC_GetSysClockFreq+0x200>)
 800b0ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b0f4:	627b      	str	r3, [r7, #36]	; 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800b0f6:	69bb      	ldr	r3, [r7, #24]
 800b0f8:	2b00      	cmp	r3, #0
 800b0fa:	d110      	bne.n	800b11e <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800b0fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0fe:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800b100:	e00d      	b.n	800b11e <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800b102:	4b62      	ldr	r3, [pc, #392]	; (800b28c <HAL_RCC_GetSysClockFreq+0x1fc>)
 800b104:	69db      	ldr	r3, [r3, #28]
 800b106:	f003 030c 	and.w	r3, r3, #12
 800b10a:	2b04      	cmp	r3, #4
 800b10c:	d102      	bne.n	800b114 <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800b10e:	4b61      	ldr	r3, [pc, #388]	; (800b294 <HAL_RCC_GetSysClockFreq+0x204>)
 800b110:	623b      	str	r3, [r7, #32]
 800b112:	e004      	b.n	800b11e <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800b114:	69bb      	ldr	r3, [r7, #24]
 800b116:	2b08      	cmp	r3, #8
 800b118:	d101      	bne.n	800b11e <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800b11a:	4b5e      	ldr	r3, [pc, #376]	; (800b294 <HAL_RCC_GetSysClockFreq+0x204>)
 800b11c:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800b11e:	69bb      	ldr	r3, [r7, #24]
 800b120:	2b0c      	cmp	r3, #12
 800b122:	f040 80ac 	bne.w	800b27e <HAL_RCC_GetSysClockFreq+0x1ee>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 800b126:	4b59      	ldr	r3, [pc, #356]	; (800b28c <HAL_RCC_GetSysClockFreq+0x1fc>)
 800b128:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b12a:	f003 0303 	and.w	r3, r3, #3
 800b12e:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 800b130:	4b56      	ldr	r3, [pc, #344]	; (800b28c <HAL_RCC_GetSysClockFreq+0x1fc>)
 800b132:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b134:	0a1b      	lsrs	r3, r3, #8
 800b136:	f003 030f 	and.w	r3, r3, #15
 800b13a:	3301      	adds	r3, #1
 800b13c:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 800b13e:	4b53      	ldr	r3, [pc, #332]	; (800b28c <HAL_RCC_GetSysClockFreq+0x1fc>)
 800b140:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b142:	091b      	lsrs	r3, r3, #4
 800b144:	f003 0301 	and.w	r3, r3, #1
 800b148:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 800b14a:	4b50      	ldr	r3, [pc, #320]	; (800b28c <HAL_RCC_GetSysClockFreq+0x1fc>)
 800b14c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b14e:	08db      	lsrs	r3, r3, #3
 800b150:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b154:	68ba      	ldr	r2, [r7, #8]
 800b156:	fb02 f303 	mul.w	r3, r2, r3
 800b15a:	ee07 3a90 	vmov	s15, r3
 800b15e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b162:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    if (pllm != 0U)
 800b166:	68fb      	ldr	r3, [r7, #12]
 800b168:	2b00      	cmp	r3, #0
 800b16a:	f000 8086 	beq.w	800b27a <HAL_RCC_GetSysClockFreq+0x1ea>
    {
      switch (pllsource)
 800b16e:	693b      	ldr	r3, [r7, #16]
 800b170:	2b02      	cmp	r3, #2
 800b172:	d003      	beq.n	800b17c <HAL_RCC_GetSysClockFreq+0xec>
 800b174:	693b      	ldr	r3, [r7, #16]
 800b176:	2b03      	cmp	r3, #3
 800b178:	d022      	beq.n	800b1c0 <HAL_RCC_GetSysClockFreq+0x130>
 800b17a:	e043      	b.n	800b204 <HAL_RCC_GetSysClockFreq+0x174>
      {
        case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800b17c:	68fb      	ldr	r3, [r7, #12]
 800b17e:	ee07 3a90 	vmov	s15, r3
 800b182:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b186:	eddf 6a44 	vldr	s13, [pc, #272]	; 800b298 <HAL_RCC_GetSysClockFreq+0x208>
 800b18a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b18e:	4b3f      	ldr	r3, [pc, #252]	; (800b28c <HAL_RCC_GetSysClockFreq+0x1fc>)
 800b190:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b192:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b196:	ee07 3a90 	vmov	s15, r3
 800b19a:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 800b19e:	ed97 6a01 	vldr	s12, [r7, #4]
 800b1a2:	eddf 5a3e 	vldr	s11, [pc, #248]	; 800b29c <HAL_RCC_GetSysClockFreq+0x20c>
 800b1a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800b1aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 800b1ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b1b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800b1b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b1ba:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 800b1be:	e046      	b.n	800b24e <HAL_RCC_GetSysClockFreq+0x1be>

        case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800b1c0:	68fb      	ldr	r3, [r7, #12]
 800b1c2:	ee07 3a90 	vmov	s15, r3
 800b1c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b1ca:	eddf 6a33 	vldr	s13, [pc, #204]	; 800b298 <HAL_RCC_GetSysClockFreq+0x208>
 800b1ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b1d2:	4b2e      	ldr	r3, [pc, #184]	; (800b28c <HAL_RCC_GetSysClockFreq+0x1fc>)
 800b1d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b1d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b1da:	ee07 3a90 	vmov	s15, r3
 800b1de:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 800b1e2:	ed97 6a01 	vldr	s12, [r7, #4]
 800b1e6:	eddf 5a2d 	vldr	s11, [pc, #180]	; 800b29c <HAL_RCC_GetSysClockFreq+0x20c>
 800b1ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800b1ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 800b1f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b1f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800b1fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b1fe:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 800b202:	e024      	b.n	800b24e <HAL_RCC_GetSysClockFreq+0x1be>

        case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        default:
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800b204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b206:	ee07 3a90 	vmov	s15, r3
 800b20a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b20e:	68fb      	ldr	r3, [r7, #12]
 800b210:	ee07 3a90 	vmov	s15, r3
 800b214:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b218:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b21c:	4b1b      	ldr	r3, [pc, #108]	; (800b28c <HAL_RCC_GetSysClockFreq+0x1fc>)
 800b21e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b220:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b224:	ee07 3a90 	vmov	s15, r3
 800b228:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 800b22c:	ed97 6a01 	vldr	s12, [r7, #4]
 800b230:	eddf 5a1a 	vldr	s11, [pc, #104]	; 800b29c <HAL_RCC_GetSysClockFreq+0x20c>
 800b234:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800b238:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 800b23c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b240:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800b244:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b248:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 800b24c:	bf00      	nop
      }

      pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 800b24e:	4b0f      	ldr	r3, [pc, #60]	; (800b28c <HAL_RCC_GetSysClockFreq+0x1fc>)
 800b250:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b252:	0e1b      	lsrs	r3, r3, #24
 800b254:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b258:	3301      	adds	r3, #1
 800b25a:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 800b25c:	683b      	ldr	r3, [r7, #0]
 800b25e:	ee07 3a90 	vmov	s15, r3
 800b262:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800b266:	edd7 6a07 	vldr	s13, [r7, #28]
 800b26a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b26e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b272:	ee17 3a90 	vmov	r3, s15
 800b276:	623b      	str	r3, [r7, #32]
 800b278:	e001      	b.n	800b27e <HAL_RCC_GetSysClockFreq+0x1ee>
    }
    else
    {
      sysclockfreq = 0;
 800b27a:	2300      	movs	r3, #0
 800b27c:	623b      	str	r3, [r7, #32]
    }
  }

  return sysclockfreq;
 800b27e:	6a3b      	ldr	r3, [r7, #32]
}
 800b280:	4618      	mov	r0, r3
 800b282:	372c      	adds	r7, #44	; 0x2c
 800b284:	46bd      	mov	sp, r7
 800b286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b28a:	4770      	bx	lr
 800b28c:	46020c00 	.word	0x46020c00
 800b290:	0800ed00 	.word	0x0800ed00
 800b294:	00f42400 	.word	0x00f42400
 800b298:	4b742400 	.word	0x4b742400
 800b29c:	46000000 	.word	0x46000000

0800b2a0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b2a0:	b580      	push	{r7, lr}
 800b2a2:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800b2a4:	f7ff fef4 	bl	800b090 <HAL_RCC_GetSysClockFreq>
 800b2a8:	4602      	mov	r2, r0
 800b2aa:	4b07      	ldr	r3, [pc, #28]	; (800b2c8 <HAL_RCC_GetHCLKFreq+0x28>)
 800b2ac:	6a1b      	ldr	r3, [r3, #32]
 800b2ae:	f003 030f 	and.w	r3, r3, #15
 800b2b2:	4906      	ldr	r1, [pc, #24]	; (800b2cc <HAL_RCC_GetHCLKFreq+0x2c>)
 800b2b4:	5ccb      	ldrb	r3, [r1, r3]
 800b2b6:	fa22 f303 	lsr.w	r3, r2, r3
 800b2ba:	4a05      	ldr	r2, [pc, #20]	; (800b2d0 <HAL_RCC_GetHCLKFreq+0x30>)
 800b2bc:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 800b2be:	4b04      	ldr	r3, [pc, #16]	; (800b2d0 <HAL_RCC_GetHCLKFreq+0x30>)
 800b2c0:	681b      	ldr	r3, [r3, #0]
}
 800b2c2:	4618      	mov	r0, r3
 800b2c4:	bd80      	pop	{r7, pc}
 800b2c6:	bf00      	nop
 800b2c8:	46020c00 	.word	0x46020c00
 800b2cc:	0800ece8 	.word	0x0800ece8
 800b2d0:	20000004 	.word	0x20000004

0800b2d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800b2d4:	b580      	push	{r7, lr}
 800b2d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 800b2d8:	f7ff ffe2 	bl	800b2a0 <HAL_RCC_GetHCLKFreq>
 800b2dc:	4602      	mov	r2, r0
 800b2de:	4b05      	ldr	r3, [pc, #20]	; (800b2f4 <HAL_RCC_GetPCLK1Freq+0x20>)
 800b2e0:	6a1b      	ldr	r3, [r3, #32]
 800b2e2:	091b      	lsrs	r3, r3, #4
 800b2e4:	f003 0307 	and.w	r3, r3, #7
 800b2e8:	4903      	ldr	r1, [pc, #12]	; (800b2f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800b2ea:	5ccb      	ldrb	r3, [r1, r3]
 800b2ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b2f0:	4618      	mov	r0, r3
 800b2f2:	bd80      	pop	{r7, pc}
 800b2f4:	46020c00 	.word	0x46020c00
 800b2f8:	0800ecf8 	.word	0x0800ecf8

0800b2fc <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *pRCC_ClkInitStruct, uint32_t *pFLatency)
{
 800b2fc:	b480      	push	{r7}
 800b2fe:	b083      	sub	sp, #12
 800b300:	af00      	add	r7, sp, #0
 800b302:	6078      	str	r0, [r7, #4]
 800b304:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(pRCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  pRCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | \
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	221f      	movs	r2, #31
 800b30a:	601a      	str	r2, [r3, #0]
                                  RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_PCLK3;

  /* Get the SYSCLK configuration --------------------------------------------*/
  pRCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR1 & RCC_CFGR1_SW);
 800b30c:	4b15      	ldr	r3, [pc, #84]	; (800b364 <HAL_RCC_GetClockConfig+0x68>)
 800b30e:	69db      	ldr	r3, [r3, #28]
 800b310:	f003 0203 	and.w	r2, r3, #3
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR2 & RCC_CFGR2_HPRE);
 800b318:	4b12      	ldr	r3, [pc, #72]	; (800b364 <HAL_RCC_GetClockConfig+0x68>)
 800b31a:	6a1b      	ldr	r3, [r3, #32]
 800b31c:	f003 020f 	and.w	r2, r3, #15
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR2 & RCC_CFGR2_PPRE1);
 800b324:	4b0f      	ldr	r3, [pc, #60]	; (800b364 <HAL_RCC_GetClockConfig+0x68>)
 800b326:	6a1b      	ldr	r3, [r3, #32]
 800b328:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4);
 800b330:	4b0c      	ldr	r3, [pc, #48]	; (800b364 <HAL_RCC_GetClockConfig+0x68>)
 800b332:	6a1b      	ldr	r3, [r3, #32]
 800b334:	091b      	lsrs	r3, r3, #4
 800b336:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	611a      	str	r2, [r3, #16]

  /* Get the APB3 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->CFGR3 & RCC_CFGR3_PPRE3);
 800b33e:	4b09      	ldr	r3, [pc, #36]	; (800b364 <HAL_RCC_GetClockConfig+0x68>)
 800b340:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b342:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	615a      	str	r2, [r3, #20]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800b34a:	4b07      	ldr	r3, [pc, #28]	; (800b368 <HAL_RCC_GetClockConfig+0x6c>)
 800b34c:	681b      	ldr	r3, [r3, #0]
 800b34e:	f003 020f 	and.w	r2, r3, #15
 800b352:	683b      	ldr	r3, [r7, #0]
 800b354:	601a      	str	r2, [r3, #0]
}
 800b356:	bf00      	nop
 800b358:	370c      	adds	r7, #12
 800b35a:	46bd      	mov	sp, r7
 800b35c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b360:	4770      	bx	lr
 800b362:	bf00      	nop
 800b364:	46020c00 	.word	0x46020c00
 800b368:	40022000 	.word	0x40022000

0800b36c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800b36c:	b580      	push	{r7, lr}
 800b36e:	b086      	sub	sp, #24
 800b370:	af00      	add	r7, sp, #0
 800b372:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 800b374:	4b3e      	ldr	r3, [pc, #248]	; (800b470 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800b376:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b37a:	f003 0304 	and.w	r3, r3, #4
 800b37e:	2b00      	cmp	r3, #0
 800b380:	d003      	beq.n	800b38a <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800b382:	f7fe fd4f 	bl	8009e24 <HAL_PWREx_GetVoltageRange>
 800b386:	6178      	str	r0, [r7, #20]
 800b388:	e019      	b.n	800b3be <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800b38a:	4b39      	ldr	r3, [pc, #228]	; (800b470 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800b38c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b390:	4a37      	ldr	r2, [pc, #220]	; (800b470 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800b392:	f043 0304 	orr.w	r3, r3, #4
 800b396:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800b39a:	4b35      	ldr	r3, [pc, #212]	; (800b470 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800b39c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b3a0:	f003 0304 	and.w	r3, r3, #4
 800b3a4:	60fb      	str	r3, [r7, #12]
 800b3a6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800b3a8:	f7fe fd3c 	bl	8009e24 <HAL_PWREx_GetVoltageRange>
 800b3ac:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800b3ae:	4b30      	ldr	r3, [pc, #192]	; (800b470 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800b3b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b3b4:	4a2e      	ldr	r2, [pc, #184]	; (800b470 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800b3b6:	f023 0304 	bic.w	r3, r3, #4
 800b3ba:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 800b3be:	697b      	ldr	r3, [r7, #20]
 800b3c0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800b3c4:	d003      	beq.n	800b3ce <RCC_SetFlashLatencyFromMSIRange+0x62>
 800b3c6:	697b      	ldr	r3, [r7, #20]
 800b3c8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b3cc:	d109      	bne.n	800b3e2 <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b3d4:	d202      	bcs.n	800b3dc <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 800b3d6:	2301      	movs	r3, #1
 800b3d8:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 800b3da:	e033      	b.n	800b444 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 800b3dc:	2300      	movs	r3, #0
 800b3de:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 800b3e0:	e030      	b.n	800b444 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b3e8:	d208      	bcs.n	800b3fc <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 800b3ea:	697b      	ldr	r3, [r7, #20]
 800b3ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b3f0:	d102      	bne.n	800b3f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 800b3f2:	2303      	movs	r3, #3
 800b3f4:	613b      	str	r3, [r7, #16]
 800b3f6:	e025      	b.n	800b444 <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 800b3f8:	2301      	movs	r3, #1
 800b3fa:	e035      	b.n	800b468 <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b402:	d90f      	bls.n	800b424 <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 800b404:	697b      	ldr	r3, [r7, #20]
 800b406:	2b00      	cmp	r3, #0
 800b408:	d109      	bne.n	800b41e <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b410:	d902      	bls.n	800b418 <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 800b412:	2300      	movs	r3, #0
 800b414:	613b      	str	r3, [r7, #16]
 800b416:	e015      	b.n	800b444 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 800b418:	2301      	movs	r3, #1
 800b41a:	613b      	str	r3, [r7, #16]
 800b41c:	e012      	b.n	800b444 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 800b41e:	2300      	movs	r3, #0
 800b420:	613b      	str	r3, [r7, #16]
 800b422:	e00f      	b.n	800b444 <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b42a:	d109      	bne.n	800b440 <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 800b42c:	697b      	ldr	r3, [r7, #20]
 800b42e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b432:	d102      	bne.n	800b43a <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 800b434:	2301      	movs	r3, #1
 800b436:	613b      	str	r3, [r7, #16]
 800b438:	e004      	b.n	800b444 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 800b43a:	2302      	movs	r3, #2
 800b43c:	613b      	str	r3, [r7, #16]
 800b43e:	e001      	b.n	800b444 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 800b440:	2301      	movs	r3, #1
 800b442:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800b444:	4b0b      	ldr	r3, [pc, #44]	; (800b474 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800b446:	681b      	ldr	r3, [r3, #0]
 800b448:	f023 020f 	bic.w	r2, r3, #15
 800b44c:	4909      	ldr	r1, [pc, #36]	; (800b474 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800b44e:	693b      	ldr	r3, [r7, #16]
 800b450:	4313      	orrs	r3, r2
 800b452:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 800b454:	4b07      	ldr	r3, [pc, #28]	; (800b474 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800b456:	681b      	ldr	r3, [r3, #0]
 800b458:	f003 030f 	and.w	r3, r3, #15
 800b45c:	693a      	ldr	r2, [r7, #16]
 800b45e:	429a      	cmp	r2, r3
 800b460:	d001      	beq.n	800b466 <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 800b462:	2301      	movs	r3, #1
 800b464:	e000      	b.n	800b468 <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 800b466:	2300      	movs	r3, #0
}
 800b468:	4618      	mov	r0, r3
 800b46a:	3718      	adds	r7, #24
 800b46c:	46bd      	mov	sp, r7
 800b46e:	bd80      	pop	{r7, pc}
 800b470:	46020c00 	.word	0x46020c00
 800b474:	40022000 	.word	0x40022000

0800b478 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 800b478:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b47c:	b0ba      	sub	sp, #232	; 0xe8
 800b47e:	af00      	add	r7, sp, #0
 800b480:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800b484:	2300      	movs	r3, #0
 800b486:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800b48a:	2300      	movs	r3, #0
 800b48c:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800b490:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b494:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b498:	f002 0401 	and.w	r4, r2, #1
 800b49c:	2500      	movs	r5, #0
 800b49e:	ea54 0305 	orrs.w	r3, r4, r5
 800b4a2:	d00b      	beq.n	800b4bc <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 800b4a4:	4bcb      	ldr	r3, [pc, #812]	; (800b7d4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800b4a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b4aa:	f023 0103 	bic.w	r1, r3, #3
 800b4ae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b4b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b4b4:	4ac7      	ldr	r2, [pc, #796]	; (800b7d4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800b4b6:	430b      	orrs	r3, r1
 800b4b8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800b4bc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b4c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4c4:	f002 0802 	and.w	r8, r2, #2
 800b4c8:	f04f 0900 	mov.w	r9, #0
 800b4cc:	ea58 0309 	orrs.w	r3, r8, r9
 800b4d0:	d00b      	beq.n	800b4ea <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 800b4d2:	4bc0      	ldr	r3, [pc, #768]	; (800b7d4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800b4d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b4d8:	f023 010c 	bic.w	r1, r3, #12
 800b4dc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b4e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b4e2:	4abc      	ldr	r2, [pc, #752]	; (800b7d4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800b4e4:	430b      	orrs	r3, r1
 800b4e6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800b4ea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b4ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4f2:	f002 0a04 	and.w	sl, r2, #4
 800b4f6:	f04f 0b00 	mov.w	fp, #0
 800b4fa:	ea5a 030b 	orrs.w	r3, sl, fp
 800b4fe:	d00b      	beq.n	800b518 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 800b500:	4bb4      	ldr	r3, [pc, #720]	; (800b7d4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800b502:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b506:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 800b50a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b50e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b510:	4ab0      	ldr	r2, [pc, #704]	; (800b7d4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800b512:	430b      	orrs	r3, r1
 800b514:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800b518:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b51c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b520:	f002 0308 	and.w	r3, r2, #8
 800b524:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b528:	2300      	movs	r3, #0
 800b52a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800b52e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800b532:	460b      	mov	r3, r1
 800b534:	4313      	orrs	r3, r2
 800b536:	d00b      	beq.n	800b550 <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 800b538:	4ba6      	ldr	r3, [pc, #664]	; (800b7d4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800b53a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b53e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800b542:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b546:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b548:	4aa2      	ldr	r2, [pc, #648]	; (800b7d4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800b54a:	430b      	orrs	r3, r1
 800b54c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800b550:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b554:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b558:	f002 0310 	and.w	r3, r2, #16
 800b55c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b560:	2300      	movs	r3, #0
 800b562:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b566:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800b56a:	460b      	mov	r3, r1
 800b56c:	4313      	orrs	r3, r2
 800b56e:	d00b      	beq.n	800b588 <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 800b570:	4b98      	ldr	r3, [pc, #608]	; (800b7d4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800b572:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b576:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800b57a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b57e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b580:	4a94      	ldr	r2, [pc, #592]	; (800b7d4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800b582:	430b      	orrs	r3, r1
 800b584:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
    __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
  }
#endif /* USART6 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800b588:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b58c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b590:	f002 0320 	and.w	r3, r2, #32
 800b594:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b598:	2300      	movs	r3, #0
 800b59a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800b59e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800b5a2:	460b      	mov	r3, r1
 800b5a4:	4313      	orrs	r3, r2
 800b5a6:	d00b      	beq.n	800b5c0 <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 800b5a8:	4b8a      	ldr	r3, [pc, #552]	; (800b7d4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800b5aa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800b5ae:	f023 0107 	bic.w	r1, r3, #7
 800b5b2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b5b6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b5b8:	4a86      	ldr	r2, [pc, #536]	; (800b7d4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800b5ba:	430b      	orrs	r3, r1
 800b5bc:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800b5c0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b5c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5c8:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800b5cc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b5d0:	2300      	movs	r3, #0
 800b5d2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b5d6:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800b5da:	460b      	mov	r3, r1
 800b5dc:	4313      	orrs	r3, r2
 800b5de:	d00b      	beq.n	800b5f8 <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 800b5e0:	4b7c      	ldr	r3, [pc, #496]	; (800b7d4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800b5e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b5e6:	f423 6140 	bic.w	r1, r3, #3072	; 0xc00
 800b5ea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b5ee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b5f0:	4a78      	ldr	r2, [pc, #480]	; (800b7d4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800b5f2:	430b      	orrs	r3, r1
 800b5f4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800b5f8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b5fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b600:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800b604:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800b608:	2300      	movs	r3, #0
 800b60a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b60e:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800b612:	460b      	mov	r3, r1
 800b614:	4313      	orrs	r3, r2
 800b616:	d00b      	beq.n	800b630 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 800b618:	4b6e      	ldr	r3, [pc, #440]	; (800b7d4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800b61a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b61e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800b622:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b626:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b628:	4a6a      	ldr	r2, [pc, #424]	; (800b7d4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800b62a:	430b      	orrs	r3, r1
 800b62c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800b630:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b634:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b638:	f402 7380 	and.w	r3, r2, #256	; 0x100
 800b63c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800b640:	2300      	movs	r3, #0
 800b642:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800b646:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 800b64a:	460b      	mov	r3, r1
 800b64c:	4313      	orrs	r3, r2
 800b64e:	d00b      	beq.n	800b668 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 800b650:	4b60      	ldr	r3, [pc, #384]	; (800b7d4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800b652:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800b656:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800b65a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b65e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b660:	4a5c      	ldr	r2, [pc, #368]	; (800b7d4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800b662:	430b      	orrs	r3, r1
 800b664:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800b668:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b66c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b670:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 800b674:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800b678:	2300      	movs	r3, #0
 800b67a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800b67e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800b682:	460b      	mov	r3, r1
 800b684:	4313      	orrs	r3, r2
 800b686:	d00b      	beq.n	800b6a0 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 800b688:	4b52      	ldr	r3, [pc, #328]	; (800b7d4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800b68a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b68e:	f423 4140 	bic.w	r1, r3, #49152	; 0xc000
 800b692:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b696:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b698:	4a4e      	ldr	r2, [pc, #312]	; (800b7d4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800b69a:	430b      	orrs	r3, r1
 800b69c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
    __HAL_RCC_I2C6_CONFIG(pPeriphClkInit->I2c6ClockSelection);
  }
#endif /* I2C6 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800b6a0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b6a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6a8:	f402 7300 	and.w	r3, r2, #512	; 0x200
 800b6ac:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800b6b0:	2300      	movs	r3, #0
 800b6b2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800b6b6:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800b6ba:	460b      	mov	r3, r1
 800b6bc:	4313      	orrs	r3, r2
 800b6be:	d00b      	beq.n	800b6d8 <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 800b6c0:	4b44      	ldr	r3, [pc, #272]	; (800b7d4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800b6c2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800b6c6:	f423 6140 	bic.w	r1, r3, #3072	; 0xc00
 800b6ca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b6ce:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b6d0:	4a40      	ldr	r2, [pc, #256]	; (800b7d4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800b6d2:	430b      	orrs	r3, r1
 800b6d4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800b6d8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b6dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6e0:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 800b6e4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800b6e8:	2300      	movs	r3, #0
 800b6ea:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800b6ee:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800b6f2:	460b      	mov	r3, r1
 800b6f4:	4313      	orrs	r3, r2
 800b6f6:	d00b      	beq.n	800b710 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 800b6f8:	4b36      	ldr	r3, [pc, #216]	; (800b7d4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800b6fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b6fe:	f423 2140 	bic.w	r1, r3, #786432	; 0xc0000
 800b702:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b706:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b708:	4a32      	ldr	r2, [pc, #200]	; (800b7d4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800b70a:	430b      	orrs	r3, r1
 800b70c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 800b710:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b714:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b718:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800b71c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800b720:	2300      	movs	r3, #0
 800b722:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800b726:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800b72a:	460b      	mov	r3, r1
 800b72c:	4313      	orrs	r3, r2
 800b72e:	d00c      	beq.n	800b74a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 800b730:	4b28      	ldr	r3, [pc, #160]	; (800b7d4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800b732:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800b736:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800b73a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b73e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b742:	4a24      	ldr	r2, [pc, #144]	; (800b7d4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800b744:	430b      	orrs	r3, r1
 800b746:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800b74a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b74e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b752:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800b756:	67bb      	str	r3, [r7, #120]	; 0x78
 800b758:	2300      	movs	r3, #0
 800b75a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800b75c:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800b760:	460b      	mov	r3, r1
 800b762:	4313      	orrs	r3, r2
 800b764:	d04f      	beq.n	800b806 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 800b766:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b76a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b76e:	2b80      	cmp	r3, #128	; 0x80
 800b770:	d02d      	beq.n	800b7ce <HAL_RCCEx_PeriphCLKConfig+0x356>
 800b772:	2b80      	cmp	r3, #128	; 0x80
 800b774:	d827      	bhi.n	800b7c6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 800b776:	2b60      	cmp	r3, #96	; 0x60
 800b778:	d02e      	beq.n	800b7d8 <HAL_RCCEx_PeriphCLKConfig+0x360>
 800b77a:	2b60      	cmp	r3, #96	; 0x60
 800b77c:	d823      	bhi.n	800b7c6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 800b77e:	2b40      	cmp	r3, #64	; 0x40
 800b780:	d006      	beq.n	800b790 <HAL_RCCEx_PeriphCLKConfig+0x318>
 800b782:	2b40      	cmp	r3, #64	; 0x40
 800b784:	d81f      	bhi.n	800b7c6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 800b786:	2b00      	cmp	r3, #0
 800b788:	d009      	beq.n	800b79e <HAL_RCCEx_PeriphCLKConfig+0x326>
 800b78a:	2b20      	cmp	r3, #32
 800b78c:	d011      	beq.n	800b7b2 <HAL_RCCEx_PeriphCLKConfig+0x33a>
 800b78e:	e01a      	b.n	800b7c6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800b790:	4b10      	ldr	r3, [pc, #64]	; (800b7d4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800b792:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b794:	4a0f      	ldr	r2, [pc, #60]	; (800b7d4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800b796:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b79a:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 800b79c:	e01d      	b.n	800b7da <HAL_RCCEx_PeriphCLKConfig+0x362>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800b79e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b7a2:	3308      	adds	r3, #8
 800b7a4:	4618      	mov	r0, r3
 800b7a6:	f000 fc27 	bl	800bff8 <RCCEx_PLL2_Config>
 800b7aa:	4603      	mov	r3, r0
 800b7ac:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* SAI1 clock source config set later after clock selection check */
        break;
 800b7b0:	e013      	b.n	800b7da <HAL_RCCEx_PeriphCLKConfig+0x362>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800b7b2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b7b6:	332c      	adds	r3, #44	; 0x2c
 800b7b8:	4618      	mov	r0, r3
 800b7ba:	f000 fcb5 	bl	800c128 <RCCEx_PLL3_Config>
 800b7be:	4603      	mov	r3, r0
 800b7c0:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* SAI1 clock source config set later after clock selection check */
        break;
 800b7c4:	e009      	b.n	800b7da <HAL_RCCEx_PeriphCLKConfig+0x362>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b7c6:	2301      	movs	r3, #1
 800b7c8:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 800b7cc:	e005      	b.n	800b7da <HAL_RCCEx_PeriphCLKConfig+0x362>
        break;
 800b7ce:	bf00      	nop
 800b7d0:	e003      	b.n	800b7da <HAL_RCCEx_PeriphCLKConfig+0x362>
 800b7d2:	bf00      	nop
 800b7d4:	46020c00 	.word	0x46020c00
        break;
 800b7d8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b7da:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800b7de:	2b00      	cmp	r3, #0
 800b7e0:	d10d      	bne.n	800b7fe <HAL_RCCEx_PeriphCLKConfig+0x386>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 800b7e2:	4bb6      	ldr	r3, [pc, #728]	; (800babc <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800b7e4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800b7e8:	f023 01e0 	bic.w	r1, r3, #224	; 0xe0
 800b7ec:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b7f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b7f4:	4ab1      	ldr	r2, [pc, #708]	; (800babc <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800b7f6:	430b      	orrs	r3, r1
 800b7f8:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 800b7fc:	e003      	b.n	800b806 <HAL_RCCEx_PeriphCLKConfig+0x38e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b7fe:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800b802:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800b806:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b80a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b80e:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 800b812:	673b      	str	r3, [r7, #112]	; 0x70
 800b814:	2300      	movs	r3, #0
 800b816:	677b      	str	r3, [r7, #116]	; 0x74
 800b818:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800b81c:	460b      	mov	r3, r1
 800b81e:	4313      	orrs	r3, r2
 800b820:	d053      	beq.n	800b8ca <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 800b822:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b826:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b82a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b82e:	d033      	beq.n	800b898 <HAL_RCCEx_PeriphCLKConfig+0x420>
 800b830:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b834:	d82c      	bhi.n	800b890 <HAL_RCCEx_PeriphCLKConfig+0x418>
 800b836:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b83a:	d02f      	beq.n	800b89c <HAL_RCCEx_PeriphCLKConfig+0x424>
 800b83c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b840:	d826      	bhi.n	800b890 <HAL_RCCEx_PeriphCLKConfig+0x418>
 800b842:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b846:	d008      	beq.n	800b85a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
 800b848:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b84c:	d820      	bhi.n	800b890 <HAL_RCCEx_PeriphCLKConfig+0x418>
 800b84e:	2b00      	cmp	r3, #0
 800b850:	d00a      	beq.n	800b868 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
 800b852:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b856:	d011      	beq.n	800b87c <HAL_RCCEx_PeriphCLKConfig+0x404>
 800b858:	e01a      	b.n	800b890 <HAL_RCCEx_PeriphCLKConfig+0x418>
    {
      case RCC_SAI2CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800b85a:	4b98      	ldr	r3, [pc, #608]	; (800babc <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800b85c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b85e:	4a97      	ldr	r2, [pc, #604]	; (800babc <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800b860:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b864:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 800b866:	e01a      	b.n	800b89e <HAL_RCCEx_PeriphCLKConfig+0x426>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800b868:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b86c:	3308      	adds	r3, #8
 800b86e:	4618      	mov	r0, r3
 800b870:	f000 fbc2 	bl	800bff8 <RCCEx_PLL2_Config>
 800b874:	4603      	mov	r3, r0
 800b876:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* SAI2 clock source config set later after clock selection check */
        break;
 800b87a:	e010      	b.n	800b89e <HAL_RCCEx_PeriphCLKConfig+0x426>

      case RCC_SAI2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800b87c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b880:	332c      	adds	r3, #44	; 0x2c
 800b882:	4618      	mov	r0, r3
 800b884:	f000 fc50 	bl	800c128 <RCCEx_PLL3_Config>
 800b888:	4603      	mov	r3, r0
 800b88a:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* SAI2 clock source config set later after clock selection check */
        break;
 800b88e:	e006      	b.n	800b89e <HAL_RCCEx_PeriphCLKConfig+0x426>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b890:	2301      	movs	r3, #1
 800b892:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 800b896:	e002      	b.n	800b89e <HAL_RCCEx_PeriphCLKConfig+0x426>
        break;
 800b898:	bf00      	nop
 800b89a:	e000      	b.n	800b89e <HAL_RCCEx_PeriphCLKConfig+0x426>
        break;
 800b89c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b89e:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800b8a2:	2b00      	cmp	r3, #0
 800b8a4:	d10d      	bne.n	800b8c2 <HAL_RCCEx_PeriphCLKConfig+0x44a>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 800b8a6:	4b85      	ldr	r3, [pc, #532]	; (800babc <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800b8a8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800b8ac:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 800b8b0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b8b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b8b8:	4a80      	ldr	r2, [pc, #512]	; (800babc <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800b8ba:	430b      	orrs	r3, r1
 800b8bc:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 800b8c0:	e003      	b.n	800b8ca <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b8c2:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800b8c6:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 800b8ca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b8ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8d2:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 800b8d6:	66bb      	str	r3, [r7, #104]	; 0x68
 800b8d8:	2300      	movs	r3, #0
 800b8da:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b8dc:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800b8e0:	460b      	mov	r3, r1
 800b8e2:	4313      	orrs	r3, r2
 800b8e4:	d046      	beq.n	800b974 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 800b8e6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b8ea:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800b8ee:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800b8f2:	d028      	beq.n	800b946 <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 800b8f4:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800b8f8:	d821      	bhi.n	800b93e <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 800b8fa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b8fe:	d022      	beq.n	800b946 <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 800b900:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b904:	d81b      	bhi.n	800b93e <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 800b906:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b90a:	d01c      	beq.n	800b946 <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 800b90c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b910:	d815      	bhi.n	800b93e <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 800b912:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b916:	d008      	beq.n	800b92a <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 800b918:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b91c:	d80f      	bhi.n	800b93e <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 800b91e:	2b00      	cmp	r3, #0
 800b920:	d011      	beq.n	800b946 <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 800b922:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b926:	d00e      	beq.n	800b946 <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 800b928:	e009      	b.n	800b93e <HAL_RCCEx_PeriphCLKConfig+0x4c6>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800b92a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b92e:	3308      	adds	r3, #8
 800b930:	4618      	mov	r0, r3
 800b932:	f000 fb61 	bl	800bff8 <RCCEx_PLL2_Config>
 800b936:	4603      	mov	r3, r0
 800b938:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 800b93c:	e004      	b.n	800b948 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800b93e:	2301      	movs	r3, #1
 800b940:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 800b944:	e000      	b.n	800b948 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
        break;
 800b946:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b948:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800b94c:	2b00      	cmp	r3, #0
 800b94e:	d10d      	bne.n	800b96c <HAL_RCCEx_PeriphCLKConfig+0x4f4>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 800b950:	4b5a      	ldr	r3, [pc, #360]	; (800babc <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800b952:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800b956:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 800b95a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b95e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800b962:	4a56      	ldr	r2, [pc, #344]	; (800babc <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800b964:	430b      	orrs	r3, r1
 800b966:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800b96a:	e003      	b.n	800b974 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b96c:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800b970:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 800b974:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b978:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b97c:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800b980:	663b      	str	r3, [r7, #96]	; 0x60
 800b982:	2300      	movs	r3, #0
 800b984:	667b      	str	r3, [r7, #100]	; 0x64
 800b986:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800b98a:	460b      	mov	r3, r1
 800b98c:	4313      	orrs	r3, r2
 800b98e:	d03f      	beq.n	800ba10 <HAL_RCCEx_PeriphCLKConfig+0x598>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 800b990:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b994:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b998:	2b04      	cmp	r3, #4
 800b99a:	d81e      	bhi.n	800b9da <HAL_RCCEx_PeriphCLKConfig+0x562>
 800b99c:	a201      	add	r2, pc, #4	; (adr r2, 800b9a4 <HAL_RCCEx_PeriphCLKConfig+0x52c>)
 800b99e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b9a2:	bf00      	nop
 800b9a4:	0800b9e3 	.word	0x0800b9e3
 800b9a8:	0800b9b9 	.word	0x0800b9b9
 800b9ac:	0800b9c7 	.word	0x0800b9c7
 800b9b0:	0800b9e3 	.word	0x0800b9e3
 800b9b4:	0800b9e3 	.word	0x0800b9e3
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800b9b8:	4b40      	ldr	r3, [pc, #256]	; (800babc <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800b9ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b9bc:	4a3f      	ldr	r2, [pc, #252]	; (800babc <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800b9be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b9c2:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 800b9c4:	e00e      	b.n	800b9e4 <HAL_RCCEx_PeriphCLKConfig+0x56c>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800b9c6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b9ca:	332c      	adds	r3, #44	; 0x2c
 800b9cc:	4618      	mov	r0, r3
 800b9ce:	f000 fbab 	bl	800c128 <RCCEx_PLL3_Config>
 800b9d2:	4603      	mov	r3, r0
 800b9d4:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 800b9d8:	e004      	b.n	800b9e4 <HAL_RCCEx_PeriphCLKConfig+0x56c>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800b9da:	2301      	movs	r3, #1
 800b9dc:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 800b9e0:	e000      	b.n	800b9e4 <HAL_RCCEx_PeriphCLKConfig+0x56c>
        break;
 800b9e2:	bf00      	nop
    }
    if (ret == HAL_OK)
 800b9e4:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800b9e8:	2b00      	cmp	r3, #0
 800b9ea:	d10d      	bne.n	800ba08 <HAL_RCCEx_PeriphCLKConfig+0x590>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 800b9ec:	4b33      	ldr	r3, [pc, #204]	; (800babc <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800b9ee:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800b9f2:	f023 0107 	bic.w	r1, r3, #7
 800b9f6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b9fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b9fe:	4a2f      	ldr	r2, [pc, #188]	; (800babc <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800ba00:	430b      	orrs	r3, r1
 800ba02:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 800ba06:	e003      	b.n	800ba10 <HAL_RCCEx_PeriphCLKConfig+0x598>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ba08:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800ba0c:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 800ba10:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800ba14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba18:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800ba1c:	65bb      	str	r3, [r7, #88]	; 0x58
 800ba1e:	2300      	movs	r3, #0
 800ba20:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ba22:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800ba26:	460b      	mov	r3, r1
 800ba28:	4313      	orrs	r3, r2
 800ba2a:	d04d      	beq.n	800bac8 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));
    switch (pPeriphClkInit->Adf1ClockSelection)
 800ba2c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800ba30:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ba34:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800ba38:	d028      	beq.n	800ba8c <HAL_RCCEx_PeriphCLKConfig+0x614>
 800ba3a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800ba3e:	d821      	bhi.n	800ba84 <HAL_RCCEx_PeriphCLKConfig+0x60c>
 800ba40:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800ba44:	d024      	beq.n	800ba90 <HAL_RCCEx_PeriphCLKConfig+0x618>
 800ba46:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800ba4a:	d81b      	bhi.n	800ba84 <HAL_RCCEx_PeriphCLKConfig+0x60c>
 800ba4c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ba50:	d00e      	beq.n	800ba70 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
 800ba52:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ba56:	d815      	bhi.n	800ba84 <HAL_RCCEx_PeriphCLKConfig+0x60c>
 800ba58:	2b00      	cmp	r3, #0
 800ba5a:	d01b      	beq.n	800ba94 <HAL_RCCEx_PeriphCLKConfig+0x61c>
 800ba5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ba60:	d110      	bne.n	800ba84 <HAL_RCCEx_PeriphCLKConfig+0x60c>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800ba62:	4b16      	ldr	r3, [pc, #88]	; (800babc <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800ba64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba66:	4a15      	ldr	r2, [pc, #84]	; (800babc <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800ba68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ba6c:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 800ba6e:	e012      	b.n	800ba96 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800ba70:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800ba74:	332c      	adds	r3, #44	; 0x2c
 800ba76:	4618      	mov	r0, r3
 800ba78:	f000 fb56 	bl	800c128 <RCCEx_PLL3_Config>
 800ba7c:	4603      	mov	r3, r0
 800ba7e:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 800ba82:	e008      	b.n	800ba96 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800ba84:	2301      	movs	r3, #1
 800ba86:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 800ba8a:	e004      	b.n	800ba96 <HAL_RCCEx_PeriphCLKConfig+0x61e>
        break;
 800ba8c:	bf00      	nop
 800ba8e:	e002      	b.n	800ba96 <HAL_RCCEx_PeriphCLKConfig+0x61e>
        break;
 800ba90:	bf00      	nop
 800ba92:	e000      	b.n	800ba96 <HAL_RCCEx_PeriphCLKConfig+0x61e>
        break;
 800ba94:	bf00      	nop
    }
    if (ret == HAL_OK)
 800ba96:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800ba9a:	2b00      	cmp	r3, #0
 800ba9c:	d110      	bne.n	800bac0 <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 800ba9e:	4b07      	ldr	r3, [pc, #28]	; (800babc <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800baa0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800baa4:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 800baa8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800baac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bab0:	4a02      	ldr	r2, [pc, #8]	; (800babc <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800bab2:	430b      	orrs	r3, r1
 800bab4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800bab8:	e006      	b.n	800bac8 <HAL_RCCEx_PeriphCLKConfig+0x650>
 800baba:	bf00      	nop
 800babc:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bac0:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800bac4:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800bac8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800bacc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bad0:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800bad4:	653b      	str	r3, [r7, #80]	; 0x50
 800bad6:	2300      	movs	r3, #0
 800bad8:	657b      	str	r3, [r7, #84]	; 0x54
 800bada:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800bade:	460b      	mov	r3, r1
 800bae0:	4313      	orrs	r3, r2
 800bae2:	f000 80b5 	beq.w	800bc50 <HAL_RCCEx_PeriphCLKConfig+0x7d8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800bae6:	2300      	movs	r3, #0
 800bae8:	f887 30e1 	strb.w	r3, [r7, #225]	; 0xe1
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));
    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800baec:	4b9d      	ldr	r3, [pc, #628]	; (800bd64 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800baee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800baf2:	f003 0304 	and.w	r3, r3, #4
 800baf6:	2b00      	cmp	r3, #0
 800baf8:	d113      	bne.n	800bb22 <HAL_RCCEx_PeriphCLKConfig+0x6aa>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800bafa:	4b9a      	ldr	r3, [pc, #616]	; (800bd64 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800bafc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800bb00:	4a98      	ldr	r2, [pc, #608]	; (800bd64 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800bb02:	f043 0304 	orr.w	r3, r3, #4
 800bb06:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800bb0a:	4b96      	ldr	r3, [pc, #600]	; (800bd64 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800bb0c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800bb10:	f003 0304 	and.w	r3, r3, #4
 800bb14:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800bb18:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
      pwrclkchanged = SET;
 800bb1c:	2301      	movs	r3, #1
 800bb1e:	f887 30e1 	strb.w	r3, [r7, #225]	; 0xe1
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 800bb22:	4b91      	ldr	r3, [pc, #580]	; (800bd68 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 800bb24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bb26:	4a90      	ldr	r2, [pc, #576]	; (800bd68 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 800bb28:	f043 0301 	orr.w	r3, r3, #1
 800bb2c:	6293      	str	r3, [r2, #40]	; 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800bb2e:	f7f9 fe59 	bl	80057e4 <HAL_GetTick>
 800bb32:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800bb36:	e00b      	b.n	800bb50 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800bb38:	f7f9 fe54 	bl	80057e4 <HAL_GetTick>
 800bb3c:	4602      	mov	r2, r0
 800bb3e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bb42:	1ad3      	subs	r3, r2, r3
 800bb44:	2b02      	cmp	r3, #2
 800bb46:	d903      	bls.n	800bb50 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      {
        ret = HAL_TIMEOUT;
 800bb48:	2303      	movs	r3, #3
 800bb4a:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 800bb4e:	e005      	b.n	800bb5c <HAL_RCCEx_PeriphCLKConfig+0x6e4>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800bb50:	4b85      	ldr	r3, [pc, #532]	; (800bd68 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 800bb52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bb54:	f003 0301 	and.w	r3, r3, #1
 800bb58:	2b00      	cmp	r3, #0
 800bb5a:	d0ed      	beq.n	800bb38 <HAL_RCCEx_PeriphCLKConfig+0x6c0>
      }
    }

    if (ret == HAL_OK)
 800bb5c:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800bb60:	2b00      	cmp	r3, #0
 800bb62:	d165      	bne.n	800bc30 <HAL_RCCEx_PeriphCLKConfig+0x7b8>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800bb64:	4b7f      	ldr	r3, [pc, #508]	; (800bd64 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800bb66:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800bb6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bb6e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 800bb72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bb76:	2b00      	cmp	r3, #0
 800bb78:	d023      	beq.n	800bbc2 <HAL_RCCEx_PeriphCLKConfig+0x74a>
 800bb7a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800bb7e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 800bb82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bb86:	4293      	cmp	r3, r2
 800bb88:	d01b      	beq.n	800bbc2 <HAL_RCCEx_PeriphCLKConfig+0x74a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800bb8a:	4b76      	ldr	r3, [pc, #472]	; (800bd64 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800bb8c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800bb90:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bb94:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800bb98:	4b72      	ldr	r3, [pc, #456]	; (800bd64 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800bb9a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800bb9e:	4a71      	ldr	r2, [pc, #452]	; (800bd64 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800bba0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800bba4:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 800bba8:	4b6e      	ldr	r3, [pc, #440]	; (800bd64 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800bbaa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800bbae:	4a6d      	ldr	r2, [pc, #436]	; (800bd64 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800bbb0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800bbb4:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800bbb8:	4a6a      	ldr	r2, [pc, #424]	; (800bd64 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800bbba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bbbe:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800bbc2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bbc6:	f003 0301 	and.w	r3, r3, #1
 800bbca:	2b00      	cmp	r3, #0
 800bbcc:	d019      	beq.n	800bc02 <HAL_RCCEx_PeriphCLKConfig+0x78a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bbce:	f7f9 fe09 	bl	80057e4 <HAL_GetTick>
 800bbd2:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800bbd6:	e00d      	b.n	800bbf4 <HAL_RCCEx_PeriphCLKConfig+0x77c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800bbd8:	f7f9 fe04 	bl	80057e4 <HAL_GetTick>
 800bbdc:	4602      	mov	r2, r0
 800bbde:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bbe2:	1ad2      	subs	r2, r2, r3
 800bbe4:	f241 3388 	movw	r3, #5000	; 0x1388
 800bbe8:	429a      	cmp	r2, r3
 800bbea:	d903      	bls.n	800bbf4 <HAL_RCCEx_PeriphCLKConfig+0x77c>
          {
            ret = HAL_TIMEOUT;
 800bbec:	2303      	movs	r3, #3
 800bbee:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
            break;
 800bbf2:	e006      	b.n	800bc02 <HAL_RCCEx_PeriphCLKConfig+0x78a>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800bbf4:	4b5b      	ldr	r3, [pc, #364]	; (800bd64 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800bbf6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800bbfa:	f003 0302 	and.w	r3, r3, #2
 800bbfe:	2b00      	cmp	r3, #0
 800bc00:	d0ea      	beq.n	800bbd8 <HAL_RCCEx_PeriphCLKConfig+0x760>
          }
        }
      }

      if (ret == HAL_OK)
 800bc02:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800bc06:	2b00      	cmp	r3, #0
 800bc08:	d10d      	bne.n	800bc26 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 800bc0a:	4b56      	ldr	r3, [pc, #344]	; (800bd64 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800bc0c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800bc10:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800bc14:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800bc18:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800bc1c:	4a51      	ldr	r2, [pc, #324]	; (800bd64 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800bc1e:	430b      	orrs	r3, r1
 800bc20:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800bc24:	e008      	b.n	800bc38 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800bc26:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800bc2a:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
 800bc2e:	e003      	b.n	800bc38 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bc30:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800bc34:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800bc38:	f897 30e1 	ldrb.w	r3, [r7, #225]	; 0xe1
 800bc3c:	2b01      	cmp	r3, #1
 800bc3e:	d107      	bne.n	800bc50 <HAL_RCCEx_PeriphCLKConfig+0x7d8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800bc40:	4b48      	ldr	r3, [pc, #288]	; (800bd64 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800bc42:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800bc46:	4a47      	ldr	r2, [pc, #284]	; (800bd64 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800bc48:	f023 0304 	bic.w	r3, r3, #4
 800bc4c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }

  /*-------------------------------------- ICLK Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 800bc50:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800bc54:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc58:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800bc5c:	64bb      	str	r3, [r7, #72]	; 0x48
 800bc5e:	2300      	movs	r3, #0
 800bc60:	64fb      	str	r3, [r7, #76]	; 0x4c
 800bc62:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800bc66:	460b      	mov	r3, r1
 800bc68:	4313      	orrs	r3, r2
 800bc6a:	d042      	beq.n	800bcf2 <HAL_RCCEx_PeriphCLKConfig+0x87a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(pPeriphClkInit->IclkClockSelection));

    switch (pPeriphClkInit->IclkClockSelection)
 800bc6c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800bc70:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800bc74:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800bc78:	d022      	beq.n	800bcc0 <HAL_RCCEx_PeriphCLKConfig+0x848>
 800bc7a:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800bc7e:	d81b      	bhi.n	800bcb8 <HAL_RCCEx_PeriphCLKConfig+0x840>
 800bc80:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bc84:	d011      	beq.n	800bcaa <HAL_RCCEx_PeriphCLKConfig+0x832>
 800bc86:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bc8a:	d815      	bhi.n	800bcb8 <HAL_RCCEx_PeriphCLKConfig+0x840>
 800bc8c:	2b00      	cmp	r3, #0
 800bc8e:	d019      	beq.n	800bcc4 <HAL_RCCEx_PeriphCLKConfig+0x84c>
 800bc90:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800bc94:	d110      	bne.n	800bcb8 <HAL_RCCEx_PeriphCLKConfig+0x840>
    {
      case RCC_ICLK_CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800bc96:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800bc9a:	3308      	adds	r3, #8
 800bc9c:	4618      	mov	r0, r3
 800bc9e:	f000 f9ab 	bl	800bff8 <RCCEx_PLL2_Config>
 800bca2:	4603      	mov	r3, r0
 800bca4:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 800bca8:	e00d      	b.n	800bcc6 <HAL_RCCEx_PeriphCLKConfig+0x84e>
      case RCC_ICLK_CLKSOURCE_PLL1:
        /* Enable ICLK Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bcaa:	4b2e      	ldr	r3, [pc, #184]	; (800bd64 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800bcac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bcae:	4a2d      	ldr	r2, [pc, #180]	; (800bd64 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800bcb0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bcb4:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 800bcb6:	e006      	b.n	800bcc6 <HAL_RCCEx_PeriphCLKConfig+0x84e>
      case RCC_ICLK_CLKSOURCE_HSI48:
        break;
      case RCC_ICLK_CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800bcb8:	2301      	movs	r3, #1
 800bcba:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 800bcbe:	e002      	b.n	800bcc6 <HAL_RCCEx_PeriphCLKConfig+0x84e>
        break;
 800bcc0:	bf00      	nop
 800bcc2:	e000      	b.n	800bcc6 <HAL_RCCEx_PeriphCLKConfig+0x84e>
        break;
 800bcc4:	bf00      	nop
    }
    if (ret == HAL_OK)
 800bcc6:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800bcca:	2b00      	cmp	r3, #0
 800bccc:	d10d      	bne.n	800bcea <HAL_RCCEx_PeriphCLKConfig+0x872>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 800bcce:	4b25      	ldr	r3, [pc, #148]	; (800bd64 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800bcd0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800bcd4:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 800bcd8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800bcdc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800bce0:	4a20      	ldr	r2, [pc, #128]	; (800bd64 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800bce2:	430b      	orrs	r3, r1
 800bce4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800bce8:	e003      	b.n	800bcf2 <HAL_RCCEx_PeriphCLKConfig+0x87a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bcea:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800bcee:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800bcf2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800bcf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcfa:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800bcfe:	643b      	str	r3, [r7, #64]	; 0x40
 800bd00:	2300      	movs	r3, #0
 800bd02:	647b      	str	r3, [r7, #68]	; 0x44
 800bd04:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800bd08:	460b      	mov	r3, r1
 800bd0a:	4313      	orrs	r3, r2
 800bd0c:	d032      	beq.n	800bd74 <HAL_RCCEx_PeriphCLKConfig+0x8fc>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 800bd0e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800bd12:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800bd16:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bd1a:	d00b      	beq.n	800bd34 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 800bd1c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bd20:	d804      	bhi.n	800bd2c <HAL_RCCEx_PeriphCLKConfig+0x8b4>
 800bd22:	2b00      	cmp	r3, #0
 800bd24:	d008      	beq.n	800bd38 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
 800bd26:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bd2a:	d007      	beq.n	800bd3c <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 800bd2c:	2301      	movs	r3, #1
 800bd2e:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 800bd32:	e004      	b.n	800bd3e <HAL_RCCEx_PeriphCLKConfig+0x8c6>
        break;
 800bd34:	bf00      	nop
 800bd36:	e002      	b.n	800bd3e <HAL_RCCEx_PeriphCLKConfig+0x8c6>
        break;
 800bd38:	bf00      	nop
 800bd3a:	e000      	b.n	800bd3e <HAL_RCCEx_PeriphCLKConfig+0x8c6>
        break;
 800bd3c:	bf00      	nop
    }
    if (ret == HAL_OK)
 800bd3e:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800bd42:	2b00      	cmp	r3, #0
 800bd44:	d112      	bne.n	800bd6c <HAL_RCCEx_PeriphCLKConfig+0x8f4>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 800bd46:	4b07      	ldr	r3, [pc, #28]	; (800bd64 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800bd48:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800bd4c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800bd50:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800bd54:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800bd58:	4a02      	ldr	r2, [pc, #8]	; (800bd64 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800bd5a:	430b      	orrs	r3, r1
 800bd5c:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 800bd60:	e008      	b.n	800bd74 <HAL_RCCEx_PeriphCLKConfig+0x8fc>
 800bd62:	bf00      	nop
 800bd64:	46020c00 	.word	0x46020c00
 800bd68:	46020800 	.word	0x46020800
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bd6c:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800bd70:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }
  /*-------------------------- SAES clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAES) == RCC_PERIPHCLK_SAES)
 800bd74:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800bd78:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd7c:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800bd80:	63bb      	str	r3, [r7, #56]	; 0x38
 800bd82:	2300      	movs	r3, #0
 800bd84:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bd86:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800bd8a:	460b      	mov	r3, r1
 800bd8c:	4313      	orrs	r3, r2
 800bd8e:	d00c      	beq.n	800bdaa <HAL_RCCEx_PeriphCLKConfig+0x932>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAESCLKSOURCE(pPeriphClkInit->SaesClockSelection));

    /* Configure the SAES clock source */
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
 800bd90:	4b98      	ldr	r3, [pc, #608]	; (800bff4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800bd92:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800bd96:	f423 6100 	bic.w	r1, r3, #2048	; 0x800
 800bd9a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800bd9e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800bda2:	4a94      	ldr	r2, [pc, #592]	; (800bff4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800bda4:	430b      	orrs	r3, r1
 800bda6:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
  }
  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 800bdaa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800bdae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdb2:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800bdb6:	633b      	str	r3, [r7, #48]	; 0x30
 800bdb8:	2300      	movs	r3, #0
 800bdba:	637b      	str	r3, [r7, #52]	; 0x34
 800bdbc:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800bdc0:	460b      	mov	r3, r1
 800bdc2:	4313      	orrs	r3, r2
 800bdc4:	d019      	beq.n	800bdfa <HAL_RCCEx_PeriphCLKConfig+0x982>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 800bdc6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800bdca:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800bdce:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800bdd2:	d105      	bne.n	800bde0 <HAL_RCCEx_PeriphCLKConfig+0x968>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800bdd4:	4b87      	ldr	r3, [pc, #540]	; (800bff4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800bdd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bdd8:	4a86      	ldr	r2, [pc, #536]	; (800bff4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800bdda:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800bdde:	6293      	str	r3, [r2, #40]	; 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 800bde0:	4b84      	ldr	r3, [pc, #528]	; (800bff4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800bde2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800bde6:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 800bdea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800bdee:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800bdf2:	4a80      	ldr	r2, [pc, #512]	; (800bff4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800bdf4:	430b      	orrs	r3, r1
 800bdf6:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 800bdfa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800bdfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be02:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800be06:	62bb      	str	r3, [r7, #40]	; 0x28
 800be08:	2300      	movs	r3, #0
 800be0a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800be0c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800be10:	460b      	mov	r3, r1
 800be12:	4313      	orrs	r3, r2
 800be14:	d00c      	beq.n	800be30 <HAL_RCCEx_PeriphCLKConfig+0x9b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 800be16:	4b77      	ldr	r3, [pc, #476]	; (800bff4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800be18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800be1c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800be20:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800be24:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800be28:	4972      	ldr	r1, [pc, #456]	; (800bff4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800be2a:	4313      	orrs	r3, r2
 800be2c:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 800be30:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800be34:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be38:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 800be3c:	623b      	str	r3, [r7, #32]
 800be3e:	2300      	movs	r3, #0
 800be40:	627b      	str	r3, [r7, #36]	; 0x24
 800be42:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800be46:	460b      	mov	r3, r1
 800be48:	4313      	orrs	r3, r2
 800be4a:	d00c      	beq.n	800be66 <HAL_RCCEx_PeriphCLKConfig+0x9ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 800be4c:	4b69      	ldr	r3, [pc, #420]	; (800bff4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800be4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800be52:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800be56:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800be5a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800be5e:	4965      	ldr	r1, [pc, #404]	; (800bff4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800be60:	4313      	orrs	r3, r2
 800be62:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 800be66:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800be6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be6e:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 800be72:	61bb      	str	r3, [r7, #24]
 800be74:	2300      	movs	r3, #0
 800be76:	61fb      	str	r3, [r7, #28]
 800be78:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800be7c:	460b      	mov	r3, r1
 800be7e:	4313      	orrs	r3, r2
 800be80:	d00c      	beq.n	800be9c <HAL_RCCEx_PeriphCLKConfig+0xa24>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 800be82:	4b5c      	ldr	r3, [pc, #368]	; (800bff4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800be84:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800be88:	f023 0218 	bic.w	r2, r3, #24
 800be8c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800be90:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800be94:	4957      	ldr	r1, [pc, #348]	; (800bff4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800be96:	4313      	orrs	r3, r2
 800be98:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800be9c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800bea0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bea4:	f002 6380 	and.w	r3, r2, #67108864	; 0x4000000
 800bea8:	613b      	str	r3, [r7, #16]
 800beaa:	2300      	movs	r3, #0
 800beac:	617b      	str	r3, [r7, #20]
 800beae:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800beb2:	460b      	mov	r3, r1
 800beb4:	4313      	orrs	r3, r2
 800beb6:	d032      	beq.n	800bf1e <HAL_RCCEx_PeriphCLKConfig+0xaa6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 800beb8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800bebc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800bec0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800bec4:	d105      	bne.n	800bed2 <HAL_RCCEx_PeriphCLKConfig+0xa5a>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bec6:	4b4b      	ldr	r3, [pc, #300]	; (800bff4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800bec8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800beca:	4a4a      	ldr	r2, [pc, #296]	; (800bff4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800becc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bed0:	6293      	str	r3, [r2, #40]	; 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 800bed2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800bed6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800beda:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800bede:	d108      	bne.n	800bef2 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
    {
      /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800bee0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800bee4:	3308      	adds	r3, #8
 800bee6:	4618      	mov	r0, r3
 800bee8:	f000 f886 	bl	800bff8 <RCCEx_PLL2_Config>
 800beec:	4603      	mov	r3, r0
 800beee:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
    }
    if (ret == HAL_OK)
 800bef2:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800bef6:	2b00      	cmp	r3, #0
 800bef8:	d10d      	bne.n	800bf16 <HAL_RCCEx_PeriphCLKConfig+0xa9e>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 800befa:	4b3e      	ldr	r3, [pc, #248]	; (800bff4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800befc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800bf00:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800bf04:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800bf08:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800bf0c:	4939      	ldr	r1, [pc, #228]	; (800bff4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800bf0e:	4313      	orrs	r3, r2
 800bf10:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 800bf14:	e003      	b.n	800bf1e <HAL_RCCEx_PeriphCLKConfig+0xaa6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bf16:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800bf1a:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }
#endif /* defined(HSPI1) */

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 800bf1e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800bf22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf26:	f002 6300 	and.w	r3, r2, #134217728	; 0x8000000
 800bf2a:	60bb      	str	r3, [r7, #8]
 800bf2c:	2300      	movs	r3, #0
 800bf2e:	60fb      	str	r3, [r7, #12]
 800bf30:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800bf34:	460b      	mov	r3, r1
 800bf36:	4313      	orrs	r3, r2
 800bf38:	d03a      	beq.n	800bfb0 <HAL_RCCEx_PeriphCLKConfig+0xb38>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 800bf3a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800bf3e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bf42:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bf46:	d00e      	beq.n	800bf66 <HAL_RCCEx_PeriphCLKConfig+0xaee>
 800bf48:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bf4c:	d815      	bhi.n	800bf7a <HAL_RCCEx_PeriphCLKConfig+0xb02>
 800bf4e:	2b00      	cmp	r3, #0
 800bf50:	d017      	beq.n	800bf82 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 800bf52:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800bf56:	d110      	bne.n	800bf7a <HAL_RCCEx_PeriphCLKConfig+0xb02>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bf58:	4b26      	ldr	r3, [pc, #152]	; (800bff4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800bf5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bf5c:	4a25      	ldr	r2, [pc, #148]	; (800bff4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800bf5e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bf62:	6293      	str	r3, [r2, #40]	; 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 800bf64:	e00e      	b.n	800bf84 <HAL_RCCEx_PeriphCLKConfig+0xb0c>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800bf66:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800bf6a:	3308      	adds	r3, #8
 800bf6c:	4618      	mov	r0, r3
 800bf6e:	f000 f843 	bl	800bff8 <RCCEx_PLL2_Config>
 800bf72:	4603      	mov	r3, r0
 800bf74:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 800bf78:	e004      	b.n	800bf84 <HAL_RCCEx_PeriphCLKConfig+0xb0c>
      default:
        ret = HAL_ERROR;
 800bf7a:	2301      	movs	r3, #1
 800bf7c:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 800bf80:	e000      	b.n	800bf84 <HAL_RCCEx_PeriphCLKConfig+0xb0c>
        break;
 800bf82:	bf00      	nop
    }
    if (ret == HAL_OK)
 800bf84:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800bf88:	2b00      	cmp	r3, #0
 800bf8a:	d10d      	bne.n	800bfa8 <HAL_RCCEx_PeriphCLKConfig+0xb30>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 800bf8c:	4b19      	ldr	r3, [pc, #100]	; (800bff4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800bf8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800bf92:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800bf96:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800bf9a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bf9e:	4915      	ldr	r1, [pc, #84]	; (800bff4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800bfa0:	4313      	orrs	r3, r2
 800bfa2:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
 800bfa6:	e003      	b.n	800bfb0 <HAL_RCCEx_PeriphCLKConfig+0xb38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bfa8:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800bfac:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 800bfb0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800bfb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfb8:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 800bfbc:	603b      	str	r3, [r7, #0]
 800bfbe:	2300      	movs	r3, #0
 800bfc0:	607b      	str	r3, [r7, #4]
 800bfc2:	e9d7 1200 	ldrd	r1, r2, [r7]
 800bfc6:	460b      	mov	r3, r1
 800bfc8:	4313      	orrs	r3, r2
 800bfca:	d00c      	beq.n	800bfe6 <HAL_RCCEx_PeriphCLKConfig+0xb6e>

    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 800bfcc:	4b09      	ldr	r3, [pc, #36]	; (800bff4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800bfce:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800bfd2:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800bfd6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800bfda:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800bfde:	4905      	ldr	r1, [pc, #20]	; (800bff4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800bfe0:	4313      	orrs	r3, r2
 800bfe2:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
    }
  }

#endif /* defined(USB_OTG_HS) */

  return status;
 800bfe6:	f897 30e2 	ldrb.w	r3, [r7, #226]	; 0xe2
}
 800bfea:	4618      	mov	r0, r3
 800bfec:	37e8      	adds	r7, #232	; 0xe8
 800bfee:	46bd      	mov	sp, r7
 800bff0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800bff4:	46020c00 	.word	0x46020c00

0800bff8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2)
{
 800bff8:	b580      	push	{r7, lr}
 800bffa:	b084      	sub	sp, #16
 800bffc:	af00      	add	r7, sp, #0
 800bffe:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 800c000:	4b47      	ldr	r3, [pc, #284]	; (800c120 <RCCEx_PLL2_Config+0x128>)
 800c002:	681b      	ldr	r3, [r3, #0]
 800c004:	4a46      	ldr	r2, [pc, #280]	; (800c120 <RCCEx_PLL2_Config+0x128>)
 800c006:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800c00a:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800c00c:	f7f9 fbea 	bl	80057e4 <HAL_GetTick>
 800c010:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800c012:	e008      	b.n	800c026 <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800c014:	f7f9 fbe6 	bl	80057e4 <HAL_GetTick>
 800c018:	4602      	mov	r2, r0
 800c01a:	68fb      	ldr	r3, [r7, #12]
 800c01c:	1ad3      	subs	r3, r2, r3
 800c01e:	2b02      	cmp	r3, #2
 800c020:	d901      	bls.n	800c026 <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800c022:	2303      	movs	r3, #3
 800c024:	e077      	b.n	800c116 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800c026:	4b3e      	ldr	r3, [pc, #248]	; (800c120 <RCCEx_PLL2_Config+0x128>)
 800c028:	681b      	ldr	r3, [r3, #0]
 800c02a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c02e:	2b00      	cmp	r3, #0
 800c030:	d1f0      	bne.n	800c014 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 800c032:	4b3b      	ldr	r3, [pc, #236]	; (800c120 <RCCEx_PLL2_Config+0x128>)
 800c034:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c036:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800c03a:	f023 0303 	bic.w	r3, r3, #3
 800c03e:	687a      	ldr	r2, [r7, #4]
 800c040:	6811      	ldr	r1, [r2, #0]
 800c042:	687a      	ldr	r2, [r7, #4]
 800c044:	6852      	ldr	r2, [r2, #4]
 800c046:	3a01      	subs	r2, #1
 800c048:	0212      	lsls	r2, r2, #8
 800c04a:	430a      	orrs	r2, r1
 800c04c:	4934      	ldr	r1, [pc, #208]	; (800c120 <RCCEx_PLL2_Config+0x128>)
 800c04e:	4313      	orrs	r3, r2
 800c050:	62cb      	str	r3, [r1, #44]	; 0x2c
 800c052:	4b33      	ldr	r3, [pc, #204]	; (800c120 <RCCEx_PLL2_Config+0x128>)
 800c054:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c056:	4b33      	ldr	r3, [pc, #204]	; (800c124 <RCCEx_PLL2_Config+0x12c>)
 800c058:	4013      	ands	r3, r2
 800c05a:	687a      	ldr	r2, [r7, #4]
 800c05c:	6892      	ldr	r2, [r2, #8]
 800c05e:	3a01      	subs	r2, #1
 800c060:	f3c2 0108 	ubfx	r1, r2, #0, #9
 800c064:	687a      	ldr	r2, [r7, #4]
 800c066:	68d2      	ldr	r2, [r2, #12]
 800c068:	3a01      	subs	r2, #1
 800c06a:	0252      	lsls	r2, r2, #9
 800c06c:	b292      	uxth	r2, r2
 800c06e:	4311      	orrs	r1, r2
 800c070:	687a      	ldr	r2, [r7, #4]
 800c072:	6912      	ldr	r2, [r2, #16]
 800c074:	3a01      	subs	r2, #1
 800c076:	0412      	lsls	r2, r2, #16
 800c078:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 800c07c:	4311      	orrs	r1, r2
 800c07e:	687a      	ldr	r2, [r7, #4]
 800c080:	6952      	ldr	r2, [r2, #20]
 800c082:	3a01      	subs	r2, #1
 800c084:	0612      	lsls	r2, r2, #24
 800c086:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 800c08a:	430a      	orrs	r2, r1
 800c08c:	4924      	ldr	r1, [pc, #144]	; (800c120 <RCCEx_PLL2_Config+0x128>)
 800c08e:	4313      	orrs	r3, r2
 800c090:	63cb      	str	r3, [r1, #60]	; 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 800c092:	4b23      	ldr	r3, [pc, #140]	; (800c120 <RCCEx_PLL2_Config+0x128>)
 800c094:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c096:	f023 020c 	bic.w	r2, r3, #12
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	699b      	ldr	r3, [r3, #24]
 800c09e:	4920      	ldr	r1, [pc, #128]	; (800c120 <RCCEx_PLL2_Config+0x128>)
 800c0a0:	4313      	orrs	r3, r2
 800c0a2:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 800c0a4:	4b1e      	ldr	r3, [pc, #120]	; (800c120 <RCCEx_PLL2_Config+0x128>)
 800c0a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	6a1b      	ldr	r3, [r3, #32]
 800c0ac:	491c      	ldr	r1, [pc, #112]	; (800c120 <RCCEx_PLL2_Config+0x128>)
 800c0ae:	4313      	orrs	r3, r2
 800c0b0:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 800c0b2:	4b1b      	ldr	r3, [pc, #108]	; (800c120 <RCCEx_PLL2_Config+0x128>)
 800c0b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c0b6:	4a1a      	ldr	r2, [pc, #104]	; (800c120 <RCCEx_PLL2_Config+0x128>)
 800c0b8:	f023 0310 	bic.w	r3, r3, #16
 800c0bc:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800c0be:	4b18      	ldr	r3, [pc, #96]	; (800c120 <RCCEx_PLL2_Config+0x128>)
 800c0c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c0c2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c0c6:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800c0ca:	687a      	ldr	r2, [r7, #4]
 800c0cc:	69d2      	ldr	r2, [r2, #28]
 800c0ce:	00d2      	lsls	r2, r2, #3
 800c0d0:	4913      	ldr	r1, [pc, #76]	; (800c120 <RCCEx_PLL2_Config+0x128>)
 800c0d2:	4313      	orrs	r3, r2
 800c0d4:	640b      	str	r3, [r1, #64]	; 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 800c0d6:	4b12      	ldr	r3, [pc, #72]	; (800c120 <RCCEx_PLL2_Config+0x128>)
 800c0d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c0da:	4a11      	ldr	r2, [pc, #68]	; (800c120 <RCCEx_PLL2_Config+0x128>)
 800c0dc:	f043 0310 	orr.w	r3, r3, #16
 800c0e0:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 800c0e2:	4b0f      	ldr	r3, [pc, #60]	; (800c120 <RCCEx_PLL2_Config+0x128>)
 800c0e4:	681b      	ldr	r3, [r3, #0]
 800c0e6:	4a0e      	ldr	r2, [pc, #56]	; (800c120 <RCCEx_PLL2_Config+0x128>)
 800c0e8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800c0ec:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800c0ee:	f7f9 fb79 	bl	80057e4 <HAL_GetTick>
 800c0f2:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800c0f4:	e008      	b.n	800c108 <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800c0f6:	f7f9 fb75 	bl	80057e4 <HAL_GetTick>
 800c0fa:	4602      	mov	r2, r0
 800c0fc:	68fb      	ldr	r3, [r7, #12]
 800c0fe:	1ad3      	subs	r3, r2, r3
 800c100:	2b02      	cmp	r3, #2
 800c102:	d901      	bls.n	800c108 <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 800c104:	2303      	movs	r3, #3
 800c106:	e006      	b.n	800c116 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800c108:	4b05      	ldr	r3, [pc, #20]	; (800c120 <RCCEx_PLL2_Config+0x128>)
 800c10a:	681b      	ldr	r3, [r3, #0]
 800c10c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c110:	2b00      	cmp	r3, #0
 800c112:	d0f0      	beq.n	800c0f6 <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 800c114:	2300      	movs	r3, #0

}
 800c116:	4618      	mov	r0, r3
 800c118:	3710      	adds	r7, #16
 800c11a:	46bd      	mov	sp, r7
 800c11c:	bd80      	pop	{r7, pc}
 800c11e:	bf00      	nop
 800c120:	46020c00 	.word	0x46020c00
 800c124:	80800000 	.word	0x80800000

0800c128 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3)
{
 800c128:	b580      	push	{r7, lr}
 800c12a:	b084      	sub	sp, #16
 800c12c:	af00      	add	r7, sp, #0
 800c12e:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 800c130:	4b47      	ldr	r3, [pc, #284]	; (800c250 <RCCEx_PLL3_Config+0x128>)
 800c132:	681b      	ldr	r3, [r3, #0]
 800c134:	4a46      	ldr	r2, [pc, #280]	; (800c250 <RCCEx_PLL3_Config+0x128>)
 800c136:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c13a:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800c13c:	f7f9 fb52 	bl	80057e4 <HAL_GetTick>
 800c140:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800c142:	e008      	b.n	800c156 <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800c144:	f7f9 fb4e 	bl	80057e4 <HAL_GetTick>
 800c148:	4602      	mov	r2, r0
 800c14a:	68fb      	ldr	r3, [r7, #12]
 800c14c:	1ad3      	subs	r3, r2, r3
 800c14e:	2b02      	cmp	r3, #2
 800c150:	d901      	bls.n	800c156 <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800c152:	2303      	movs	r3, #3
 800c154:	e077      	b.n	800c246 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800c156:	4b3e      	ldr	r3, [pc, #248]	; (800c250 <RCCEx_PLL3_Config+0x128>)
 800c158:	681b      	ldr	r3, [r3, #0]
 800c15a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c15e:	2b00      	cmp	r3, #0
 800c160:	d1f0      	bne.n	800c144 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 800c162:	4b3b      	ldr	r3, [pc, #236]	; (800c250 <RCCEx_PLL3_Config+0x128>)
 800c164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c166:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800c16a:	f023 0303 	bic.w	r3, r3, #3
 800c16e:	687a      	ldr	r2, [r7, #4]
 800c170:	6811      	ldr	r1, [r2, #0]
 800c172:	687a      	ldr	r2, [r7, #4]
 800c174:	6852      	ldr	r2, [r2, #4]
 800c176:	3a01      	subs	r2, #1
 800c178:	0212      	lsls	r2, r2, #8
 800c17a:	430a      	orrs	r2, r1
 800c17c:	4934      	ldr	r1, [pc, #208]	; (800c250 <RCCEx_PLL3_Config+0x128>)
 800c17e:	4313      	orrs	r3, r2
 800c180:	630b      	str	r3, [r1, #48]	; 0x30
 800c182:	4b33      	ldr	r3, [pc, #204]	; (800c250 <RCCEx_PLL3_Config+0x128>)
 800c184:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c186:	4b33      	ldr	r3, [pc, #204]	; (800c254 <RCCEx_PLL3_Config+0x12c>)
 800c188:	4013      	ands	r3, r2
 800c18a:	687a      	ldr	r2, [r7, #4]
 800c18c:	6892      	ldr	r2, [r2, #8]
 800c18e:	3a01      	subs	r2, #1
 800c190:	f3c2 0108 	ubfx	r1, r2, #0, #9
 800c194:	687a      	ldr	r2, [r7, #4]
 800c196:	68d2      	ldr	r2, [r2, #12]
 800c198:	3a01      	subs	r2, #1
 800c19a:	0252      	lsls	r2, r2, #9
 800c19c:	b292      	uxth	r2, r2
 800c19e:	4311      	orrs	r1, r2
 800c1a0:	687a      	ldr	r2, [r7, #4]
 800c1a2:	6912      	ldr	r2, [r2, #16]
 800c1a4:	3a01      	subs	r2, #1
 800c1a6:	0412      	lsls	r2, r2, #16
 800c1a8:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 800c1ac:	4311      	orrs	r1, r2
 800c1ae:	687a      	ldr	r2, [r7, #4]
 800c1b0:	6952      	ldr	r2, [r2, #20]
 800c1b2:	3a01      	subs	r2, #1
 800c1b4:	0612      	lsls	r2, r2, #24
 800c1b6:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 800c1ba:	430a      	orrs	r2, r1
 800c1bc:	4924      	ldr	r1, [pc, #144]	; (800c250 <RCCEx_PLL3_Config+0x128>)
 800c1be:	4313      	orrs	r3, r2
 800c1c0:	644b      	str	r3, [r1, #68]	; 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 800c1c2:	4b23      	ldr	r3, [pc, #140]	; (800c250 <RCCEx_PLL3_Config+0x128>)
 800c1c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c1c6:	f023 020c 	bic.w	r2, r3, #12
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	699b      	ldr	r3, [r3, #24]
 800c1ce:	4920      	ldr	r1, [pc, #128]	; (800c250 <RCCEx_PLL3_Config+0x128>)
 800c1d0:	4313      	orrs	r3, r2
 800c1d2:	630b      	str	r3, [r1, #48]	; 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 800c1d4:	4b1e      	ldr	r3, [pc, #120]	; (800c250 <RCCEx_PLL3_Config+0x128>)
 800c1d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	6a1b      	ldr	r3, [r3, #32]
 800c1dc:	491c      	ldr	r1, [pc, #112]	; (800c250 <RCCEx_PLL3_Config+0x128>)
 800c1de:	4313      	orrs	r3, r2
 800c1e0:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 800c1e2:	4b1b      	ldr	r3, [pc, #108]	; (800c250 <RCCEx_PLL3_Config+0x128>)
 800c1e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c1e6:	4a1a      	ldr	r2, [pc, #104]	; (800c250 <RCCEx_PLL3_Config+0x128>)
 800c1e8:	f023 0310 	bic.w	r3, r3, #16
 800c1ec:	6313      	str	r3, [r2, #48]	; 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800c1ee:	4b18      	ldr	r3, [pc, #96]	; (800c250 <RCCEx_PLL3_Config+0x128>)
 800c1f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c1f2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c1f6:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800c1fa:	687a      	ldr	r2, [r7, #4]
 800c1fc:	69d2      	ldr	r2, [r2, #28]
 800c1fe:	00d2      	lsls	r2, r2, #3
 800c200:	4913      	ldr	r1, [pc, #76]	; (800c250 <RCCEx_PLL3_Config+0x128>)
 800c202:	4313      	orrs	r3, r2
 800c204:	648b      	str	r3, [r1, #72]	; 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 800c206:	4b12      	ldr	r3, [pc, #72]	; (800c250 <RCCEx_PLL3_Config+0x128>)
 800c208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c20a:	4a11      	ldr	r2, [pc, #68]	; (800c250 <RCCEx_PLL3_Config+0x128>)
 800c20c:	f043 0310 	orr.w	r3, r3, #16
 800c210:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 800c212:	4b0f      	ldr	r3, [pc, #60]	; (800c250 <RCCEx_PLL3_Config+0x128>)
 800c214:	681b      	ldr	r3, [r3, #0]
 800c216:	4a0e      	ldr	r2, [pc, #56]	; (800c250 <RCCEx_PLL3_Config+0x128>)
 800c218:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c21c:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800c21e:	f7f9 fae1 	bl	80057e4 <HAL_GetTick>
 800c222:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800c224:	e008      	b.n	800c238 <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800c226:	f7f9 fadd 	bl	80057e4 <HAL_GetTick>
 800c22a:	4602      	mov	r2, r0
 800c22c:	68fb      	ldr	r3, [r7, #12]
 800c22e:	1ad3      	subs	r3, r2, r3
 800c230:	2b02      	cmp	r3, #2
 800c232:	d901      	bls.n	800c238 <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 800c234:	2303      	movs	r3, #3
 800c236:	e006      	b.n	800c246 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800c238:	4b05      	ldr	r3, [pc, #20]	; (800c250 <RCCEx_PLL3_Config+0x128>)
 800c23a:	681b      	ldr	r3, [r3, #0]
 800c23c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c240:	2b00      	cmp	r3, #0
 800c242:	d0f0      	beq.n	800c226 <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 800c244:	2300      	movs	r3, #0
}
 800c246:	4618      	mov	r0, r3
 800c248:	3710      	adds	r7, #16
 800c24a:	46bd      	mov	sp, r7
 800c24c:	bd80      	pop	{r7, pc}
 800c24e:	bf00      	nop
 800c250:	46020c00 	.word	0x46020c00
 800c254:	80800000 	.word	0x80800000

0800c258 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800c258:	b580      	push	{r7, lr}
 800c25a:	b082      	sub	sp, #8
 800c25c:	af00      	add	r7, sp, #0
 800c25e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	2b00      	cmp	r3, #0
 800c264:	d101      	bne.n	800c26a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800c266:	2301      	movs	r3, #1
 800c268:	e049      	b.n	800c2fe <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c270:	b2db      	uxtb	r3, r3
 800c272:	2b00      	cmp	r3, #0
 800c274:	d106      	bne.n	800c284 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	2200      	movs	r2, #0
 800c27a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800c27e:	6878      	ldr	r0, [r7, #4]
 800c280:	f000 f841 	bl	800c306 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	2202      	movs	r2, #2
 800c288:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	681a      	ldr	r2, [r3, #0]
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	3304      	adds	r3, #4
 800c294:	4619      	mov	r1, r3
 800c296:	4610      	mov	r0, r2
 800c298:	f000 fa88 	bl	800c7ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	2201      	movs	r2, #1
 800c2a0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	2201      	movs	r2, #1
 800c2a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	2201      	movs	r2, #1
 800c2b0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	2201      	movs	r2, #1
 800c2b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	2201      	movs	r2, #1
 800c2c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	2201      	movs	r2, #1
 800c2c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	2201      	movs	r2, #1
 800c2d0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	2201      	movs	r2, #1
 800c2d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	2201      	movs	r2, #1
 800c2e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	2201      	movs	r2, #1
 800c2e8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	2201      	movs	r2, #1
 800c2f0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	2201      	movs	r2, #1
 800c2f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c2fc:	2300      	movs	r3, #0
}
 800c2fe:	4618      	mov	r0, r3
 800c300:	3708      	adds	r7, #8
 800c302:	46bd      	mov	sp, r7
 800c304:	bd80      	pop	{r7, pc}

0800c306 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800c306:	b480      	push	{r7}
 800c308:	b083      	sub	sp, #12
 800c30a:	af00      	add	r7, sp, #0
 800c30c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800c30e:	bf00      	nop
 800c310:	370c      	adds	r7, #12
 800c312:	46bd      	mov	sp, r7
 800c314:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c318:	4770      	bx	lr
	...

0800c31c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800c31c:	b480      	push	{r7}
 800c31e:	b085      	sub	sp, #20
 800c320:	af00      	add	r7, sp, #0
 800c322:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c32a:	b2db      	uxtb	r3, r3
 800c32c:	2b01      	cmp	r3, #1
 800c32e:	d001      	beq.n	800c334 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800c330:	2301      	movs	r3, #1
 800c332:	e072      	b.n	800c41a <HAL_TIM_Base_Start_IT+0xfe>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	2202      	movs	r2, #2
 800c338:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	681b      	ldr	r3, [r3, #0]
 800c340:	68da      	ldr	r2, [r3, #12]
 800c342:	687b      	ldr	r3, [r7, #4]
 800c344:	681b      	ldr	r3, [r3, #0]
 800c346:	f042 0201 	orr.w	r2, r2, #1
 800c34a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	681b      	ldr	r3, [r3, #0]
 800c350:	4a35      	ldr	r2, [pc, #212]	; (800c428 <HAL_TIM_Base_Start_IT+0x10c>)
 800c352:	4293      	cmp	r3, r2
 800c354:	d040      	beq.n	800c3d8 <HAL_TIM_Base_Start_IT+0xbc>
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	681b      	ldr	r3, [r3, #0]
 800c35a:	4a34      	ldr	r2, [pc, #208]	; (800c42c <HAL_TIM_Base_Start_IT+0x110>)
 800c35c:	4293      	cmp	r3, r2
 800c35e:	d03b      	beq.n	800c3d8 <HAL_TIM_Base_Start_IT+0xbc>
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	681b      	ldr	r3, [r3, #0]
 800c364:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c368:	d036      	beq.n	800c3d8 <HAL_TIM_Base_Start_IT+0xbc>
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	681b      	ldr	r3, [r3, #0]
 800c36e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c372:	d031      	beq.n	800c3d8 <HAL_TIM_Base_Start_IT+0xbc>
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	681b      	ldr	r3, [r3, #0]
 800c378:	4a2d      	ldr	r2, [pc, #180]	; (800c430 <HAL_TIM_Base_Start_IT+0x114>)
 800c37a:	4293      	cmp	r3, r2
 800c37c:	d02c      	beq.n	800c3d8 <HAL_TIM_Base_Start_IT+0xbc>
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	681b      	ldr	r3, [r3, #0]
 800c382:	4a2c      	ldr	r2, [pc, #176]	; (800c434 <HAL_TIM_Base_Start_IT+0x118>)
 800c384:	4293      	cmp	r3, r2
 800c386:	d027      	beq.n	800c3d8 <HAL_TIM_Base_Start_IT+0xbc>
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	681b      	ldr	r3, [r3, #0]
 800c38c:	4a2a      	ldr	r2, [pc, #168]	; (800c438 <HAL_TIM_Base_Start_IT+0x11c>)
 800c38e:	4293      	cmp	r3, r2
 800c390:	d022      	beq.n	800c3d8 <HAL_TIM_Base_Start_IT+0xbc>
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	681b      	ldr	r3, [r3, #0]
 800c396:	4a29      	ldr	r2, [pc, #164]	; (800c43c <HAL_TIM_Base_Start_IT+0x120>)
 800c398:	4293      	cmp	r3, r2
 800c39a:	d01d      	beq.n	800c3d8 <HAL_TIM_Base_Start_IT+0xbc>
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	681b      	ldr	r3, [r3, #0]
 800c3a0:	4a27      	ldr	r2, [pc, #156]	; (800c440 <HAL_TIM_Base_Start_IT+0x124>)
 800c3a2:	4293      	cmp	r3, r2
 800c3a4:	d018      	beq.n	800c3d8 <HAL_TIM_Base_Start_IT+0xbc>
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	681b      	ldr	r3, [r3, #0]
 800c3aa:	4a26      	ldr	r2, [pc, #152]	; (800c444 <HAL_TIM_Base_Start_IT+0x128>)
 800c3ac:	4293      	cmp	r3, r2
 800c3ae:	d013      	beq.n	800c3d8 <HAL_TIM_Base_Start_IT+0xbc>
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	681b      	ldr	r3, [r3, #0]
 800c3b4:	4a24      	ldr	r2, [pc, #144]	; (800c448 <HAL_TIM_Base_Start_IT+0x12c>)
 800c3b6:	4293      	cmp	r3, r2
 800c3b8:	d00e      	beq.n	800c3d8 <HAL_TIM_Base_Start_IT+0xbc>
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	681b      	ldr	r3, [r3, #0]
 800c3be:	4a23      	ldr	r2, [pc, #140]	; (800c44c <HAL_TIM_Base_Start_IT+0x130>)
 800c3c0:	4293      	cmp	r3, r2
 800c3c2:	d009      	beq.n	800c3d8 <HAL_TIM_Base_Start_IT+0xbc>
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	681b      	ldr	r3, [r3, #0]
 800c3c8:	4a21      	ldr	r2, [pc, #132]	; (800c450 <HAL_TIM_Base_Start_IT+0x134>)
 800c3ca:	4293      	cmp	r3, r2
 800c3cc:	d004      	beq.n	800c3d8 <HAL_TIM_Base_Start_IT+0xbc>
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	681b      	ldr	r3, [r3, #0]
 800c3d2:	4a20      	ldr	r2, [pc, #128]	; (800c454 <HAL_TIM_Base_Start_IT+0x138>)
 800c3d4:	4293      	cmp	r3, r2
 800c3d6:	d115      	bne.n	800c404 <HAL_TIM_Base_Start_IT+0xe8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	681b      	ldr	r3, [r3, #0]
 800c3dc:	689a      	ldr	r2, [r3, #8]
 800c3de:	4b1e      	ldr	r3, [pc, #120]	; (800c458 <HAL_TIM_Base_Start_IT+0x13c>)
 800c3e0:	4013      	ands	r3, r2
 800c3e2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c3e4:	68fb      	ldr	r3, [r7, #12]
 800c3e6:	2b06      	cmp	r3, #6
 800c3e8:	d015      	beq.n	800c416 <HAL_TIM_Base_Start_IT+0xfa>
 800c3ea:	68fb      	ldr	r3, [r7, #12]
 800c3ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c3f0:	d011      	beq.n	800c416 <HAL_TIM_Base_Start_IT+0xfa>
    {
      __HAL_TIM_ENABLE(htim);
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	681b      	ldr	r3, [r3, #0]
 800c3f6:	681a      	ldr	r2, [r3, #0]
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	681b      	ldr	r3, [r3, #0]
 800c3fc:	f042 0201 	orr.w	r2, r2, #1
 800c400:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c402:	e008      	b.n	800c416 <HAL_TIM_Base_Start_IT+0xfa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	681b      	ldr	r3, [r3, #0]
 800c408:	681a      	ldr	r2, [r3, #0]
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	681b      	ldr	r3, [r3, #0]
 800c40e:	f042 0201 	orr.w	r2, r2, #1
 800c412:	601a      	str	r2, [r3, #0]
 800c414:	e000      	b.n	800c418 <HAL_TIM_Base_Start_IT+0xfc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c416:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800c418:	2300      	movs	r3, #0
}
 800c41a:	4618      	mov	r0, r3
 800c41c:	3714      	adds	r7, #20
 800c41e:	46bd      	mov	sp, r7
 800c420:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c424:	4770      	bx	lr
 800c426:	bf00      	nop
 800c428:	40012c00 	.word	0x40012c00
 800c42c:	50012c00 	.word	0x50012c00
 800c430:	40000400 	.word	0x40000400
 800c434:	50000400 	.word	0x50000400
 800c438:	40000800 	.word	0x40000800
 800c43c:	50000800 	.word	0x50000800
 800c440:	40000c00 	.word	0x40000c00
 800c444:	50000c00 	.word	0x50000c00
 800c448:	40013400 	.word	0x40013400
 800c44c:	50013400 	.word	0x50013400
 800c450:	40014000 	.word	0x40014000
 800c454:	50014000 	.word	0x50014000
 800c458:	00010007 	.word	0x00010007

0800c45c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800c45c:	b580      	push	{r7, lr}
 800c45e:	b082      	sub	sp, #8
 800c460:	af00      	add	r7, sp, #0
 800c462:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	681b      	ldr	r3, [r3, #0]
 800c468:	691b      	ldr	r3, [r3, #16]
 800c46a:	f003 0302 	and.w	r3, r3, #2
 800c46e:	2b02      	cmp	r3, #2
 800c470:	d122      	bne.n	800c4b8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	681b      	ldr	r3, [r3, #0]
 800c476:	68db      	ldr	r3, [r3, #12]
 800c478:	f003 0302 	and.w	r3, r3, #2
 800c47c:	2b02      	cmp	r3, #2
 800c47e:	d11b      	bne.n	800c4b8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	681b      	ldr	r3, [r3, #0]
 800c484:	f06f 0202 	mvn.w	r2, #2
 800c488:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800c48a:	687b      	ldr	r3, [r7, #4]
 800c48c:	2201      	movs	r2, #1
 800c48e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	681b      	ldr	r3, [r3, #0]
 800c494:	699b      	ldr	r3, [r3, #24]
 800c496:	f003 0303 	and.w	r3, r3, #3
 800c49a:	2b00      	cmp	r3, #0
 800c49c:	d003      	beq.n	800c4a6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800c49e:	6878      	ldr	r0, [r7, #4]
 800c4a0:	f000 f965 	bl	800c76e <HAL_TIM_IC_CaptureCallback>
 800c4a4:	e005      	b.n	800c4b2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800c4a6:	6878      	ldr	r0, [r7, #4]
 800c4a8:	f000 f957 	bl	800c75a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c4ac:	6878      	ldr	r0, [r7, #4]
 800c4ae:	f000 f968 	bl	800c782 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	2200      	movs	r2, #0
 800c4b6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	681b      	ldr	r3, [r3, #0]
 800c4bc:	691b      	ldr	r3, [r3, #16]
 800c4be:	f003 0304 	and.w	r3, r3, #4
 800c4c2:	2b04      	cmp	r3, #4
 800c4c4:	d122      	bne.n	800c50c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	681b      	ldr	r3, [r3, #0]
 800c4ca:	68db      	ldr	r3, [r3, #12]
 800c4cc:	f003 0304 	and.w	r3, r3, #4
 800c4d0:	2b04      	cmp	r3, #4
 800c4d2:	d11b      	bne.n	800c50c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	681b      	ldr	r3, [r3, #0]
 800c4d8:	f06f 0204 	mvn.w	r2, #4
 800c4dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	2202      	movs	r2, #2
 800c4e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	681b      	ldr	r3, [r3, #0]
 800c4e8:	699b      	ldr	r3, [r3, #24]
 800c4ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c4ee:	2b00      	cmp	r3, #0
 800c4f0:	d003      	beq.n	800c4fa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c4f2:	6878      	ldr	r0, [r7, #4]
 800c4f4:	f000 f93b 	bl	800c76e <HAL_TIM_IC_CaptureCallback>
 800c4f8:	e005      	b.n	800c506 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c4fa:	6878      	ldr	r0, [r7, #4]
 800c4fc:	f000 f92d 	bl	800c75a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c500:	6878      	ldr	r0, [r7, #4]
 800c502:	f000 f93e 	bl	800c782 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	2200      	movs	r2, #0
 800c50a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	681b      	ldr	r3, [r3, #0]
 800c510:	691b      	ldr	r3, [r3, #16]
 800c512:	f003 0308 	and.w	r3, r3, #8
 800c516:	2b08      	cmp	r3, #8
 800c518:	d122      	bne.n	800c560 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	681b      	ldr	r3, [r3, #0]
 800c51e:	68db      	ldr	r3, [r3, #12]
 800c520:	f003 0308 	and.w	r3, r3, #8
 800c524:	2b08      	cmp	r3, #8
 800c526:	d11b      	bne.n	800c560 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	681b      	ldr	r3, [r3, #0]
 800c52c:	f06f 0208 	mvn.w	r2, #8
 800c530:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	2204      	movs	r2, #4
 800c536:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	681b      	ldr	r3, [r3, #0]
 800c53c:	69db      	ldr	r3, [r3, #28]
 800c53e:	f003 0303 	and.w	r3, r3, #3
 800c542:	2b00      	cmp	r3, #0
 800c544:	d003      	beq.n	800c54e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c546:	6878      	ldr	r0, [r7, #4]
 800c548:	f000 f911 	bl	800c76e <HAL_TIM_IC_CaptureCallback>
 800c54c:	e005      	b.n	800c55a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c54e:	6878      	ldr	r0, [r7, #4]
 800c550:	f000 f903 	bl	800c75a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c554:	6878      	ldr	r0, [r7, #4]
 800c556:	f000 f914 	bl	800c782 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	2200      	movs	r2, #0
 800c55e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	681b      	ldr	r3, [r3, #0]
 800c564:	691b      	ldr	r3, [r3, #16]
 800c566:	f003 0310 	and.w	r3, r3, #16
 800c56a:	2b10      	cmp	r3, #16
 800c56c:	d122      	bne.n	800c5b4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	681b      	ldr	r3, [r3, #0]
 800c572:	68db      	ldr	r3, [r3, #12]
 800c574:	f003 0310 	and.w	r3, r3, #16
 800c578:	2b10      	cmp	r3, #16
 800c57a:	d11b      	bne.n	800c5b4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	681b      	ldr	r3, [r3, #0]
 800c580:	f06f 0210 	mvn.w	r2, #16
 800c584:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	2208      	movs	r2, #8
 800c58a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	681b      	ldr	r3, [r3, #0]
 800c590:	69db      	ldr	r3, [r3, #28]
 800c592:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c596:	2b00      	cmp	r3, #0
 800c598:	d003      	beq.n	800c5a2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c59a:	6878      	ldr	r0, [r7, #4]
 800c59c:	f000 f8e7 	bl	800c76e <HAL_TIM_IC_CaptureCallback>
 800c5a0:	e005      	b.n	800c5ae <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c5a2:	6878      	ldr	r0, [r7, #4]
 800c5a4:	f000 f8d9 	bl	800c75a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c5a8:	6878      	ldr	r0, [r7, #4]
 800c5aa:	f000 f8ea 	bl	800c782 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	2200      	movs	r2, #0
 800c5b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	681b      	ldr	r3, [r3, #0]
 800c5b8:	691b      	ldr	r3, [r3, #16]
 800c5ba:	f003 0301 	and.w	r3, r3, #1
 800c5be:	2b01      	cmp	r3, #1
 800c5c0:	d10e      	bne.n	800c5e0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	681b      	ldr	r3, [r3, #0]
 800c5c6:	68db      	ldr	r3, [r3, #12]
 800c5c8:	f003 0301 	and.w	r3, r3, #1
 800c5cc:	2b01      	cmp	r3, #1
 800c5ce:	d107      	bne.n	800c5e0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	681b      	ldr	r3, [r3, #0]
 800c5d4:	f06f 0201 	mvn.w	r2, #1
 800c5d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800c5da:	6878      	ldr	r0, [r7, #4]
 800c5dc:	f7f8 fd18 	bl	8005010 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	681b      	ldr	r3, [r3, #0]
 800c5e4:	691b      	ldr	r3, [r3, #16]
 800c5e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c5ea:	2b80      	cmp	r3, #128	; 0x80
 800c5ec:	d10e      	bne.n	800c60c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	681b      	ldr	r3, [r3, #0]
 800c5f2:	68db      	ldr	r3, [r3, #12]
 800c5f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c5f8:	2b80      	cmp	r3, #128	; 0x80
 800c5fa:	d107      	bne.n	800c60c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	681b      	ldr	r3, [r3, #0]
 800c600:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800c604:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800c606:	6878      	ldr	r0, [r7, #4]
 800c608:	f000 f9d4 	bl	800c9b4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	681b      	ldr	r3, [r3, #0]
 800c610:	691b      	ldr	r3, [r3, #16]
 800c612:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c616:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c61a:	d10e      	bne.n	800c63a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	681b      	ldr	r3, [r3, #0]
 800c620:	68db      	ldr	r3, [r3, #12]
 800c622:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c626:	2b80      	cmp	r3, #128	; 0x80
 800c628:	d107      	bne.n	800c63a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800c62a:	687b      	ldr	r3, [r7, #4]
 800c62c:	681b      	ldr	r3, [r3, #0]
 800c62e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800c632:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800c634:	6878      	ldr	r0, [r7, #4]
 800c636:	f000 f9c7 	bl	800c9c8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	681b      	ldr	r3, [r3, #0]
 800c63e:	691b      	ldr	r3, [r3, #16]
 800c640:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c644:	2b40      	cmp	r3, #64	; 0x40
 800c646:	d10e      	bne.n	800c666 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	681b      	ldr	r3, [r3, #0]
 800c64c:	68db      	ldr	r3, [r3, #12]
 800c64e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c652:	2b40      	cmp	r3, #64	; 0x40
 800c654:	d107      	bne.n	800c666 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	681b      	ldr	r3, [r3, #0]
 800c65a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800c65e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800c660:	6878      	ldr	r0, [r7, #4]
 800c662:	f000 f898 	bl	800c796 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800c666:	687b      	ldr	r3, [r7, #4]
 800c668:	681b      	ldr	r3, [r3, #0]
 800c66a:	691b      	ldr	r3, [r3, #16]
 800c66c:	f003 0320 	and.w	r3, r3, #32
 800c670:	2b20      	cmp	r3, #32
 800c672:	d10e      	bne.n	800c692 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	681b      	ldr	r3, [r3, #0]
 800c678:	68db      	ldr	r3, [r3, #12]
 800c67a:	f003 0320 	and.w	r3, r3, #32
 800c67e:	2b20      	cmp	r3, #32
 800c680:	d107      	bne.n	800c692 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	681b      	ldr	r3, [r3, #0]
 800c686:	f06f 0220 	mvn.w	r2, #32
 800c68a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800c68c:	6878      	ldr	r0, [r7, #4]
 800c68e:	f000 f987 	bl	800c9a0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 800c692:	687b      	ldr	r3, [r7, #4]
 800c694:	681b      	ldr	r3, [r3, #0]
 800c696:	691b      	ldr	r3, [r3, #16]
 800c698:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c69c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c6a0:	d10f      	bne.n	800c6c2 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	681b      	ldr	r3, [r3, #0]
 800c6a6:	68db      	ldr	r3, [r3, #12]
 800c6a8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c6ac:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c6b0:	d107      	bne.n	800c6c2 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	681b      	ldr	r3, [r3, #0]
 800c6b6:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 800c6ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800c6bc:	6878      	ldr	r0, [r7, #4]
 800c6be:	f000 f98d 	bl	800c9dc <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	681b      	ldr	r3, [r3, #0]
 800c6c6:	691b      	ldr	r3, [r3, #16]
 800c6c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800c6cc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c6d0:	d10f      	bne.n	800c6f2 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	681b      	ldr	r3, [r3, #0]
 800c6d6:	68db      	ldr	r3, [r3, #12]
 800c6d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800c6dc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c6e0:	d107      	bne.n	800c6f2 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 800c6e2:	687b      	ldr	r3, [r7, #4]
 800c6e4:	681b      	ldr	r3, [r3, #0]
 800c6e6:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 800c6ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800c6ec:	6878      	ldr	r0, [r7, #4]
 800c6ee:	f000 f97f 	bl	800c9f0 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	681b      	ldr	r3, [r3, #0]
 800c6f6:	691b      	ldr	r3, [r3, #16]
 800c6f8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c6fc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c700:	d10f      	bne.n	800c722 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	681b      	ldr	r3, [r3, #0]
 800c706:	68db      	ldr	r3, [r3, #12]
 800c708:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c70c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c710:	d107      	bne.n	800c722 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	681b      	ldr	r3, [r3, #0]
 800c716:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 800c71a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800c71c:	6878      	ldr	r0, [r7, #4]
 800c71e:	f000 f971 	bl	800ca04 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 800c722:	687b      	ldr	r3, [r7, #4]
 800c724:	681b      	ldr	r3, [r3, #0]
 800c726:	691b      	ldr	r3, [r3, #16]
 800c728:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c72c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800c730:	d10f      	bne.n	800c752 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	681b      	ldr	r3, [r3, #0]
 800c736:	68db      	ldr	r3, [r3, #12]
 800c738:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c73c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800c740:	d107      	bne.n	800c752 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	681b      	ldr	r3, [r3, #0]
 800c746:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 800c74a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800c74c:	6878      	ldr	r0, [r7, #4]
 800c74e:	f000 f963 	bl	800ca18 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800c752:	bf00      	nop
 800c754:	3708      	adds	r7, #8
 800c756:	46bd      	mov	sp, r7
 800c758:	bd80      	pop	{r7, pc}

0800c75a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800c75a:	b480      	push	{r7}
 800c75c:	b083      	sub	sp, #12
 800c75e:	af00      	add	r7, sp, #0
 800c760:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800c762:	bf00      	nop
 800c764:	370c      	adds	r7, #12
 800c766:	46bd      	mov	sp, r7
 800c768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c76c:	4770      	bx	lr

0800c76e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800c76e:	b480      	push	{r7}
 800c770:	b083      	sub	sp, #12
 800c772:	af00      	add	r7, sp, #0
 800c774:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800c776:	bf00      	nop
 800c778:	370c      	adds	r7, #12
 800c77a:	46bd      	mov	sp, r7
 800c77c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c780:	4770      	bx	lr

0800c782 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800c782:	b480      	push	{r7}
 800c784:	b083      	sub	sp, #12
 800c786:	af00      	add	r7, sp, #0
 800c788:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800c78a:	bf00      	nop
 800c78c:	370c      	adds	r7, #12
 800c78e:	46bd      	mov	sp, r7
 800c790:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c794:	4770      	bx	lr

0800c796 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800c796:	b480      	push	{r7}
 800c798:	b083      	sub	sp, #12
 800c79a:	af00      	add	r7, sp, #0
 800c79c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800c79e:	bf00      	nop
 800c7a0:	370c      	adds	r7, #12
 800c7a2:	46bd      	mov	sp, r7
 800c7a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7a8:	4770      	bx	lr
	...

0800c7ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800c7ac:	b480      	push	{r7}
 800c7ae:	b085      	sub	sp, #20
 800c7b0:	af00      	add	r7, sp, #0
 800c7b2:	6078      	str	r0, [r7, #4]
 800c7b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	681b      	ldr	r3, [r3, #0]
 800c7ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c7bc:	687b      	ldr	r3, [r7, #4]
 800c7be:	4a68      	ldr	r2, [pc, #416]	; (800c960 <TIM_Base_SetConfig+0x1b4>)
 800c7c0:	4293      	cmp	r3, r2
 800c7c2:	d02b      	beq.n	800c81c <TIM_Base_SetConfig+0x70>
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	4a67      	ldr	r2, [pc, #412]	; (800c964 <TIM_Base_SetConfig+0x1b8>)
 800c7c8:	4293      	cmp	r3, r2
 800c7ca:	d027      	beq.n	800c81c <TIM_Base_SetConfig+0x70>
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c7d2:	d023      	beq.n	800c81c <TIM_Base_SetConfig+0x70>
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c7da:	d01f      	beq.n	800c81c <TIM_Base_SetConfig+0x70>
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	4a62      	ldr	r2, [pc, #392]	; (800c968 <TIM_Base_SetConfig+0x1bc>)
 800c7e0:	4293      	cmp	r3, r2
 800c7e2:	d01b      	beq.n	800c81c <TIM_Base_SetConfig+0x70>
 800c7e4:	687b      	ldr	r3, [r7, #4]
 800c7e6:	4a61      	ldr	r2, [pc, #388]	; (800c96c <TIM_Base_SetConfig+0x1c0>)
 800c7e8:	4293      	cmp	r3, r2
 800c7ea:	d017      	beq.n	800c81c <TIM_Base_SetConfig+0x70>
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	4a60      	ldr	r2, [pc, #384]	; (800c970 <TIM_Base_SetConfig+0x1c4>)
 800c7f0:	4293      	cmp	r3, r2
 800c7f2:	d013      	beq.n	800c81c <TIM_Base_SetConfig+0x70>
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	4a5f      	ldr	r2, [pc, #380]	; (800c974 <TIM_Base_SetConfig+0x1c8>)
 800c7f8:	4293      	cmp	r3, r2
 800c7fa:	d00f      	beq.n	800c81c <TIM_Base_SetConfig+0x70>
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	4a5e      	ldr	r2, [pc, #376]	; (800c978 <TIM_Base_SetConfig+0x1cc>)
 800c800:	4293      	cmp	r3, r2
 800c802:	d00b      	beq.n	800c81c <TIM_Base_SetConfig+0x70>
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	4a5d      	ldr	r2, [pc, #372]	; (800c97c <TIM_Base_SetConfig+0x1d0>)
 800c808:	4293      	cmp	r3, r2
 800c80a:	d007      	beq.n	800c81c <TIM_Base_SetConfig+0x70>
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	4a5c      	ldr	r2, [pc, #368]	; (800c980 <TIM_Base_SetConfig+0x1d4>)
 800c810:	4293      	cmp	r3, r2
 800c812:	d003      	beq.n	800c81c <TIM_Base_SetConfig+0x70>
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	4a5b      	ldr	r2, [pc, #364]	; (800c984 <TIM_Base_SetConfig+0x1d8>)
 800c818:	4293      	cmp	r3, r2
 800c81a:	d108      	bne.n	800c82e <TIM_Base_SetConfig+0x82>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c81c:	68fb      	ldr	r3, [r7, #12]
 800c81e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c822:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c824:	683b      	ldr	r3, [r7, #0]
 800c826:	685b      	ldr	r3, [r3, #4]
 800c828:	68fa      	ldr	r2, [r7, #12]
 800c82a:	4313      	orrs	r3, r2
 800c82c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	4a4b      	ldr	r2, [pc, #300]	; (800c960 <TIM_Base_SetConfig+0x1b4>)
 800c832:	4293      	cmp	r3, r2
 800c834:	d043      	beq.n	800c8be <TIM_Base_SetConfig+0x112>
 800c836:	687b      	ldr	r3, [r7, #4]
 800c838:	4a4a      	ldr	r2, [pc, #296]	; (800c964 <TIM_Base_SetConfig+0x1b8>)
 800c83a:	4293      	cmp	r3, r2
 800c83c:	d03f      	beq.n	800c8be <TIM_Base_SetConfig+0x112>
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c844:	d03b      	beq.n	800c8be <TIM_Base_SetConfig+0x112>
 800c846:	687b      	ldr	r3, [r7, #4]
 800c848:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c84c:	d037      	beq.n	800c8be <TIM_Base_SetConfig+0x112>
 800c84e:	687b      	ldr	r3, [r7, #4]
 800c850:	4a45      	ldr	r2, [pc, #276]	; (800c968 <TIM_Base_SetConfig+0x1bc>)
 800c852:	4293      	cmp	r3, r2
 800c854:	d033      	beq.n	800c8be <TIM_Base_SetConfig+0x112>
 800c856:	687b      	ldr	r3, [r7, #4]
 800c858:	4a44      	ldr	r2, [pc, #272]	; (800c96c <TIM_Base_SetConfig+0x1c0>)
 800c85a:	4293      	cmp	r3, r2
 800c85c:	d02f      	beq.n	800c8be <TIM_Base_SetConfig+0x112>
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	4a43      	ldr	r2, [pc, #268]	; (800c970 <TIM_Base_SetConfig+0x1c4>)
 800c862:	4293      	cmp	r3, r2
 800c864:	d02b      	beq.n	800c8be <TIM_Base_SetConfig+0x112>
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	4a42      	ldr	r2, [pc, #264]	; (800c974 <TIM_Base_SetConfig+0x1c8>)
 800c86a:	4293      	cmp	r3, r2
 800c86c:	d027      	beq.n	800c8be <TIM_Base_SetConfig+0x112>
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	4a41      	ldr	r2, [pc, #260]	; (800c978 <TIM_Base_SetConfig+0x1cc>)
 800c872:	4293      	cmp	r3, r2
 800c874:	d023      	beq.n	800c8be <TIM_Base_SetConfig+0x112>
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	4a40      	ldr	r2, [pc, #256]	; (800c97c <TIM_Base_SetConfig+0x1d0>)
 800c87a:	4293      	cmp	r3, r2
 800c87c:	d01f      	beq.n	800c8be <TIM_Base_SetConfig+0x112>
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	4a3f      	ldr	r2, [pc, #252]	; (800c980 <TIM_Base_SetConfig+0x1d4>)
 800c882:	4293      	cmp	r3, r2
 800c884:	d01b      	beq.n	800c8be <TIM_Base_SetConfig+0x112>
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	4a3e      	ldr	r2, [pc, #248]	; (800c984 <TIM_Base_SetConfig+0x1d8>)
 800c88a:	4293      	cmp	r3, r2
 800c88c:	d017      	beq.n	800c8be <TIM_Base_SetConfig+0x112>
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	4a3d      	ldr	r2, [pc, #244]	; (800c988 <TIM_Base_SetConfig+0x1dc>)
 800c892:	4293      	cmp	r3, r2
 800c894:	d013      	beq.n	800c8be <TIM_Base_SetConfig+0x112>
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	4a3c      	ldr	r2, [pc, #240]	; (800c98c <TIM_Base_SetConfig+0x1e0>)
 800c89a:	4293      	cmp	r3, r2
 800c89c:	d00f      	beq.n	800c8be <TIM_Base_SetConfig+0x112>
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	4a3b      	ldr	r2, [pc, #236]	; (800c990 <TIM_Base_SetConfig+0x1e4>)
 800c8a2:	4293      	cmp	r3, r2
 800c8a4:	d00b      	beq.n	800c8be <TIM_Base_SetConfig+0x112>
 800c8a6:	687b      	ldr	r3, [r7, #4]
 800c8a8:	4a3a      	ldr	r2, [pc, #232]	; (800c994 <TIM_Base_SetConfig+0x1e8>)
 800c8aa:	4293      	cmp	r3, r2
 800c8ac:	d007      	beq.n	800c8be <TIM_Base_SetConfig+0x112>
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	4a39      	ldr	r2, [pc, #228]	; (800c998 <TIM_Base_SetConfig+0x1ec>)
 800c8b2:	4293      	cmp	r3, r2
 800c8b4:	d003      	beq.n	800c8be <TIM_Base_SetConfig+0x112>
 800c8b6:	687b      	ldr	r3, [r7, #4]
 800c8b8:	4a38      	ldr	r2, [pc, #224]	; (800c99c <TIM_Base_SetConfig+0x1f0>)
 800c8ba:	4293      	cmp	r3, r2
 800c8bc:	d108      	bne.n	800c8d0 <TIM_Base_SetConfig+0x124>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c8be:	68fb      	ldr	r3, [r7, #12]
 800c8c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c8c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c8c6:	683b      	ldr	r3, [r7, #0]
 800c8c8:	68db      	ldr	r3, [r3, #12]
 800c8ca:	68fa      	ldr	r2, [r7, #12]
 800c8cc:	4313      	orrs	r3, r2
 800c8ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c8d0:	68fb      	ldr	r3, [r7, #12]
 800c8d2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800c8d6:	683b      	ldr	r3, [r7, #0]
 800c8d8:	695b      	ldr	r3, [r3, #20]
 800c8da:	4313      	orrs	r3, r2
 800c8dc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	68fa      	ldr	r2, [r7, #12]
 800c8e2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c8e4:	683b      	ldr	r3, [r7, #0]
 800c8e6:	689a      	ldr	r2, [r3, #8]
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c8ec:	683b      	ldr	r3, [r7, #0]
 800c8ee:	681a      	ldr	r2, [r3, #0]
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	4a1a      	ldr	r2, [pc, #104]	; (800c960 <TIM_Base_SetConfig+0x1b4>)
 800c8f8:	4293      	cmp	r3, r2
 800c8fa:	d023      	beq.n	800c944 <TIM_Base_SetConfig+0x198>
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	4a19      	ldr	r2, [pc, #100]	; (800c964 <TIM_Base_SetConfig+0x1b8>)
 800c900:	4293      	cmp	r3, r2
 800c902:	d01f      	beq.n	800c944 <TIM_Base_SetConfig+0x198>
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	4a1e      	ldr	r2, [pc, #120]	; (800c980 <TIM_Base_SetConfig+0x1d4>)
 800c908:	4293      	cmp	r3, r2
 800c90a:	d01b      	beq.n	800c944 <TIM_Base_SetConfig+0x198>
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	4a1d      	ldr	r2, [pc, #116]	; (800c984 <TIM_Base_SetConfig+0x1d8>)
 800c910:	4293      	cmp	r3, r2
 800c912:	d017      	beq.n	800c944 <TIM_Base_SetConfig+0x198>
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	4a1c      	ldr	r2, [pc, #112]	; (800c988 <TIM_Base_SetConfig+0x1dc>)
 800c918:	4293      	cmp	r3, r2
 800c91a:	d013      	beq.n	800c944 <TIM_Base_SetConfig+0x198>
 800c91c:	687b      	ldr	r3, [r7, #4]
 800c91e:	4a1b      	ldr	r2, [pc, #108]	; (800c98c <TIM_Base_SetConfig+0x1e0>)
 800c920:	4293      	cmp	r3, r2
 800c922:	d00f      	beq.n	800c944 <TIM_Base_SetConfig+0x198>
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	4a1a      	ldr	r2, [pc, #104]	; (800c990 <TIM_Base_SetConfig+0x1e4>)
 800c928:	4293      	cmp	r3, r2
 800c92a:	d00b      	beq.n	800c944 <TIM_Base_SetConfig+0x198>
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	4a19      	ldr	r2, [pc, #100]	; (800c994 <TIM_Base_SetConfig+0x1e8>)
 800c930:	4293      	cmp	r3, r2
 800c932:	d007      	beq.n	800c944 <TIM_Base_SetConfig+0x198>
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	4a18      	ldr	r2, [pc, #96]	; (800c998 <TIM_Base_SetConfig+0x1ec>)
 800c938:	4293      	cmp	r3, r2
 800c93a:	d003      	beq.n	800c944 <TIM_Base_SetConfig+0x198>
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	4a17      	ldr	r2, [pc, #92]	; (800c99c <TIM_Base_SetConfig+0x1f0>)
 800c940:	4293      	cmp	r3, r2
 800c942:	d103      	bne.n	800c94c <TIM_Base_SetConfig+0x1a0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c944:	683b      	ldr	r3, [r7, #0]
 800c946:	691a      	ldr	r2, [r3, #16]
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c94c:	687b      	ldr	r3, [r7, #4]
 800c94e:	2201      	movs	r2, #1
 800c950:	615a      	str	r2, [r3, #20]
}
 800c952:	bf00      	nop
 800c954:	3714      	adds	r7, #20
 800c956:	46bd      	mov	sp, r7
 800c958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c95c:	4770      	bx	lr
 800c95e:	bf00      	nop
 800c960:	40012c00 	.word	0x40012c00
 800c964:	50012c00 	.word	0x50012c00
 800c968:	40000400 	.word	0x40000400
 800c96c:	50000400 	.word	0x50000400
 800c970:	40000800 	.word	0x40000800
 800c974:	50000800 	.word	0x50000800
 800c978:	40000c00 	.word	0x40000c00
 800c97c:	50000c00 	.word	0x50000c00
 800c980:	40013400 	.word	0x40013400
 800c984:	50013400 	.word	0x50013400
 800c988:	40014000 	.word	0x40014000
 800c98c:	50014000 	.word	0x50014000
 800c990:	40014400 	.word	0x40014400
 800c994:	50014400 	.word	0x50014400
 800c998:	40014800 	.word	0x40014800
 800c99c:	50014800 	.word	0x50014800

0800c9a0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800c9a0:	b480      	push	{r7}
 800c9a2:	b083      	sub	sp, #12
 800c9a4:	af00      	add	r7, sp, #0
 800c9a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800c9a8:	bf00      	nop
 800c9aa:	370c      	adds	r7, #12
 800c9ac:	46bd      	mov	sp, r7
 800c9ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9b2:	4770      	bx	lr

0800c9b4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800c9b4:	b480      	push	{r7}
 800c9b6:	b083      	sub	sp, #12
 800c9b8:	af00      	add	r7, sp, #0
 800c9ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800c9bc:	bf00      	nop
 800c9be:	370c      	adds	r7, #12
 800c9c0:	46bd      	mov	sp, r7
 800c9c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9c6:	4770      	bx	lr

0800c9c8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800c9c8:	b480      	push	{r7}
 800c9ca:	b083      	sub	sp, #12
 800c9cc:	af00      	add	r7, sp, #0
 800c9ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800c9d0:	bf00      	nop
 800c9d2:	370c      	adds	r7, #12
 800c9d4:	46bd      	mov	sp, r7
 800c9d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9da:	4770      	bx	lr

0800c9dc <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800c9dc:	b480      	push	{r7}
 800c9de:	b083      	sub	sp, #12
 800c9e0:	af00      	add	r7, sp, #0
 800c9e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800c9e4:	bf00      	nop
 800c9e6:	370c      	adds	r7, #12
 800c9e8:	46bd      	mov	sp, r7
 800c9ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9ee:	4770      	bx	lr

0800c9f0 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800c9f0:	b480      	push	{r7}
 800c9f2:	b083      	sub	sp, #12
 800c9f4:	af00      	add	r7, sp, #0
 800c9f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800c9f8:	bf00      	nop
 800c9fa:	370c      	adds	r7, #12
 800c9fc:	46bd      	mov	sp, r7
 800c9fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca02:	4770      	bx	lr

0800ca04 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800ca04:	b480      	push	{r7}
 800ca06:	b083      	sub	sp, #12
 800ca08:	af00      	add	r7, sp, #0
 800ca0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800ca0c:	bf00      	nop
 800ca0e:	370c      	adds	r7, #12
 800ca10:	46bd      	mov	sp, r7
 800ca12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca16:	4770      	bx	lr

0800ca18 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800ca18:	b480      	push	{r7}
 800ca1a:	b083      	sub	sp, #12
 800ca1c:	af00      	add	r7, sp, #0
 800ca1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800ca20:	bf00      	nop
 800ca22:	370c      	adds	r7, #12
 800ca24:	46bd      	mov	sp, r7
 800ca26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca2a:	4770      	bx	lr

0800ca2c <LL_DLYB_SetDelay>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: the Delay value is set.
  *          - ERROR: the Delay value is not set.
  */
void LL_DLYB_SetDelay(DLYB_TypeDef *DLYBx, LL_DLYB_CfgTypeDef  *pdlyb_cfg)
{
 800ca2c:	b480      	push	{r7}
 800ca2e:	b083      	sub	sp, #12
 800ca30:	af00      	add	r7, sp, #0
 800ca32:	6078      	str	r0, [r7, #4]
 800ca34:	6039      	str	r1, [r7, #0]
  /* Check the DelayBlock instance */
  assert_param(IS_DLYB_ALL_INSTANCE(DLYBx));

  /* Enable the length sampling */
  SET_BIT(DLYBx->CR, DLYB_CR_SEN);
 800ca36:	687b      	ldr	r3, [r7, #4]
 800ca38:	681b      	ldr	r3, [r3, #0]
 800ca3a:	f043 0202 	orr.w	r2, r3, #2
 800ca3e:	687b      	ldr	r3, [r7, #4]
 800ca40:	601a      	str	r2, [r3, #0]

  /* Update the UNIT and SEL field */
  DLYBx->CFGR = (pdlyb_cfg->PhaseSel) | ((pdlyb_cfg->Units) << DLYB_CFGR_UNIT_Pos);
 800ca42:	683b      	ldr	r3, [r7, #0]
 800ca44:	685a      	ldr	r2, [r3, #4]
 800ca46:	683b      	ldr	r3, [r7, #0]
 800ca48:	681b      	ldr	r3, [r3, #0]
 800ca4a:	021b      	lsls	r3, r3, #8
 800ca4c:	431a      	orrs	r2, r3
 800ca4e:	687b      	ldr	r3, [r7, #4]
 800ca50:	605a      	str	r2, [r3, #4]

  /* Disable the length sampling */
  CLEAR_BIT(DLYBx->CR, DLYB_CR_SEN);
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	681b      	ldr	r3, [r3, #0]
 800ca56:	f023 0202 	bic.w	r2, r3, #2
 800ca5a:	687b      	ldr	r3, [r7, #4]
 800ca5c:	601a      	str	r2, [r3, #0]
}
 800ca5e:	bf00      	nop
 800ca60:	370c      	adds	r7, #12
 800ca62:	46bd      	mov	sp, r7
 800ca64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca68:	4770      	bx	lr

0800ca6a <LL_DLYB_GetDelay>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: the Delay value is received.
  *          - ERROR: the Delay value is not received.
  */
void LL_DLYB_GetDelay(DLYB_TypeDef *DLYBx, LL_DLYB_CfgTypeDef *pdlyb_cfg)
{
 800ca6a:	b480      	push	{r7}
 800ca6c:	b083      	sub	sp, #12
 800ca6e:	af00      	add	r7, sp, #0
 800ca70:	6078      	str	r0, [r7, #4]
 800ca72:	6039      	str	r1, [r7, #0]
  /* Check the DelayBlock instance */
  assert_param(IS_DLYB_ALL_INSTANCE(DLYBx));

  /* Fill the DelayBlock configuration structure with SEL and UNIT value */
  pdlyb_cfg->Units = ((DLYBx->CFGR & DLYB_CFGR_UNIT) >> DLYB_CFGR_UNIT_Pos);
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	685b      	ldr	r3, [r3, #4]
 800ca78:	0a1b      	lsrs	r3, r3, #8
 800ca7a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ca7e:	683b      	ldr	r3, [r7, #0]
 800ca80:	601a      	str	r2, [r3, #0]
  pdlyb_cfg->PhaseSel = (DLYBx->CFGR & DLYB_CFGR_SEL);
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	685b      	ldr	r3, [r3, #4]
 800ca86:	f003 020f 	and.w	r2, r3, #15
 800ca8a:	683b      	ldr	r3, [r7, #0]
 800ca8c:	605a      	str	r2, [r3, #4]
}
 800ca8e:	bf00      	nop
 800ca90:	370c      	adds	r7, #12
 800ca92:	46bd      	mov	sp, r7
 800ca94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca98:	4770      	bx	lr
	...

0800ca9c <LL_DLYB_GetClockPeriod>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: there is a valid period detected and stored in pdlyb_cfg.
  *          - ERROR: there is no valid period detected.
  */
uint32_t LL_DLYB_GetClockPeriod(DLYB_TypeDef *DLYBx, LL_DLYB_CfgTypeDef *pdlyb_cfg)
{
 800ca9c:	b580      	push	{r7, lr}
 800ca9e:	b086      	sub	sp, #24
 800caa0:	af00      	add	r7, sp, #0
 800caa2:	6078      	str	r0, [r7, #4]
 800caa4:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 800caa6:	2300      	movs	r3, #0
 800caa8:	617b      	str	r3, [r7, #20]

  /* Check the DelayBlock instance */
  assert_param(IS_DLYB_ALL_INSTANCE(DLYBx));

  /* Enable the length sampling */
  SET_BIT(DLYBx->CR, DLYB_CR_SEN);
 800caaa:	687b      	ldr	r3, [r7, #4]
 800caac:	681b      	ldr	r3, [r3, #0]
 800caae:	f043 0202 	orr.w	r2, r3, #2
 800cab2:	687b      	ldr	r3, [r7, #4]
 800cab4:	601a      	str	r2, [r3, #0]

  /* Delay line length detection */
  while (i < DLYB_MAX_UNIT)
 800cab6:	e02a      	b.n	800cb0e <LL_DLYB_GetClockPeriod+0x72>
  {
    /* Set the Delay of the UNIT(s)*/
    DLYBx->CFGR = DLYB_MAX_SELECT | (i << DLYB_CFGR_UNIT_Pos);
 800cab8:	697b      	ldr	r3, [r7, #20]
 800caba:	021b      	lsls	r3, r3, #8
 800cabc:	f043 020c 	orr.w	r2, r3, #12
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	605a      	str	r2, [r3, #4]

    /* Waiting for a LNG valid value */
    tickstart =  HAL_GetTick();
 800cac4:	f7f8 fe8e 	bl	80057e4 <HAL_GetTick>
 800cac8:	60f8      	str	r0, [r7, #12]
    while ((DLYBx->CFGR & DLYB_CFGR_LNGF) == 0U)
 800caca:	e00c      	b.n	800cae6 <LL_DLYB_GetClockPeriod+0x4a>
    {
      if ((HAL_GetTick() - tickstart) >=  DLYB_TIMEOUT)
 800cacc:	f7f8 fe8a 	bl	80057e4 <HAL_GetTick>
 800cad0:	4602      	mov	r2, r0
 800cad2:	68fb      	ldr	r3, [r7, #12]
 800cad4:	1ad3      	subs	r3, r2, r3
 800cad6:	2bfe      	cmp	r3, #254	; 0xfe
 800cad8:	d905      	bls.n	800cae6 <LL_DLYB_GetClockPeriod+0x4a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((DLYBx->CFGR & DLYB_CFGR_LNGF) == 0U)
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	685b      	ldr	r3, [r3, #4]
 800cade:	2b00      	cmp	r3, #0
 800cae0:	db01      	blt.n	800cae6 <LL_DLYB_GetClockPeriod+0x4a>
        {
          return (uint32_t) HAL_TIMEOUT;
 800cae2:	2303      	movs	r3, #3
 800cae4:	e042      	b.n	800cb6c <LL_DLYB_GetClockPeriod+0xd0>
    while ((DLYBx->CFGR & DLYB_CFGR_LNGF) == 0U)
 800cae6:	687b      	ldr	r3, [r7, #4]
 800cae8:	685b      	ldr	r3, [r3, #4]
 800caea:	2b00      	cmp	r3, #0
 800caec:	daee      	bge.n	800cacc <LL_DLYB_GetClockPeriod+0x30>
        }
      }
    }

    if ((DLYBx->CFGR & DLYB_LNG_10_0_MASK) != 0U)
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	685a      	ldr	r2, [r3, #4]
 800caf2:	4b20      	ldr	r3, [pc, #128]	; (800cb74 <LL_DLYB_GetClockPeriod+0xd8>)
 800caf4:	4013      	ands	r3, r2
 800caf6:	2b00      	cmp	r3, #0
 800caf8:	d006      	beq.n	800cb08 <LL_DLYB_GetClockPeriod+0x6c>
    {
      if ((DLYBx->CFGR & (DLYB_CFGR_LNG_11 | DLYB_CFGR_LNG_10)) != DLYB_LNG_11_10_MASK)
 800cafa:	687b      	ldr	r3, [r7, #4]
 800cafc:	685b      	ldr	r3, [r3, #4]
 800cafe:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 800cb02:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800cb06:	d106      	bne.n	800cb16 <LL_DLYB_GetClockPeriod+0x7a>
      {
        /* Delay line length is configured to one input clock period*/
        break;
      }
    }
    i++;
 800cb08:	697b      	ldr	r3, [r7, #20]
 800cb0a:	3301      	adds	r3, #1
 800cb0c:	617b      	str	r3, [r7, #20]
  while (i < DLYB_MAX_UNIT)
 800cb0e:	697b      	ldr	r3, [r7, #20]
 800cb10:	2b7f      	cmp	r3, #127	; 0x7f
 800cb12:	d9d1      	bls.n	800cab8 <LL_DLYB_GetClockPeriod+0x1c>
 800cb14:	e000      	b.n	800cb18 <LL_DLYB_GetClockPeriod+0x7c>
        break;
 800cb16:	bf00      	nop
  }

  if (DLYB_MAX_UNIT != i)
 800cb18:	697b      	ldr	r3, [r7, #20]
 800cb1a:	2b80      	cmp	r3, #128	; 0x80
 800cb1c:	d022      	beq.n	800cb64 <LL_DLYB_GetClockPeriod+0xc8>
  {
    /* Determine how many unit delays (nb) span one input clock period */
    lng = (DLYBx->CFGR & DLYB_CFGR_LNG) >> 16U;
 800cb1e:	687b      	ldr	r3, [r7, #4]
 800cb20:	685b      	ldr	r3, [r3, #4]
 800cb22:	0c1b      	lsrs	r3, r3, #16
 800cb24:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800cb28:	60bb      	str	r3, [r7, #8]
    nb = 10U;
 800cb2a:	230a      	movs	r3, #10
 800cb2c:	613b      	str	r3, [r7, #16]
    while ((nb > 0U) && ((lng >> nb) == 0U))
 800cb2e:	e002      	b.n	800cb36 <LL_DLYB_GetClockPeriod+0x9a>
    {
      nb--;
 800cb30:	693b      	ldr	r3, [r7, #16]
 800cb32:	3b01      	subs	r3, #1
 800cb34:	613b      	str	r3, [r7, #16]
    while ((nb > 0U) && ((lng >> nb) == 0U))
 800cb36:	693b      	ldr	r3, [r7, #16]
 800cb38:	2b00      	cmp	r3, #0
 800cb3a:	d005      	beq.n	800cb48 <LL_DLYB_GetClockPeriod+0xac>
 800cb3c:	68ba      	ldr	r2, [r7, #8]
 800cb3e:	693b      	ldr	r3, [r7, #16]
 800cb40:	fa22 f303 	lsr.w	r3, r2, r3
 800cb44:	2b00      	cmp	r3, #0
 800cb46:	d0f3      	beq.n	800cb30 <LL_DLYB_GetClockPeriod+0x94>
    }
    if (nb != 0U)
 800cb48:	693b      	ldr	r3, [r7, #16]
 800cb4a:	2b00      	cmp	r3, #0
 800cb4c:	d00a      	beq.n	800cb64 <LL_DLYB_GetClockPeriod+0xc8>
    {
      pdlyb_cfg->PhaseSel = nb ;
 800cb4e:	683b      	ldr	r3, [r7, #0]
 800cb50:	693a      	ldr	r2, [r7, #16]
 800cb52:	605a      	str	r2, [r3, #4]
      pdlyb_cfg->Units = i ;
 800cb54:	683b      	ldr	r3, [r7, #0]
 800cb56:	697a      	ldr	r2, [r7, #20]
 800cb58:	601a      	str	r2, [r3, #0]

      /* Disable the length sampling */
      DLYBx->CR = DLYB_CR_SEN;
 800cb5a:	687b      	ldr	r3, [r7, #4]
 800cb5c:	2202      	movs	r2, #2
 800cb5e:	601a      	str	r2, [r3, #0]

      return (uint32_t)SUCCESS;
 800cb60:	2300      	movs	r3, #0
 800cb62:	e003      	b.n	800cb6c <LL_DLYB_GetClockPeriod+0xd0>
    }
  }

  /* Disable the length sampling */
  DLYBx->CR = DLYB_CR_SEN;
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	2202      	movs	r2, #2
 800cb68:	601a      	str	r2, [r3, #0]

  return (uint32_t)ERROR;
 800cb6a:	2301      	movs	r3, #1

}
 800cb6c:	4618      	mov	r0, r3
 800cb6e:	3718      	adds	r7, #24
 800cb70:	46bd      	mov	sp, r7
 800cb72:	bd80      	pop	{r7, pc}
 800cb74:	07ff0000 	.word	0x07ff0000

0800cb78 <_tx_byte_pool_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_byte_pool_create(TX_BYTE_POOL *pool_ptr, CHAR *name_ptr, VOID *pool_start, ULONG pool_size)
{
 800cb78:	b580      	push	{r7, lr}
 800cb7a:	b08e      	sub	sp, #56	; 0x38
 800cb7c:	af00      	add	r7, sp, #0
 800cb7e:	60f8      	str	r0, [r7, #12]
 800cb80:	60b9      	str	r1, [r7, #8]
 800cb82:	607a      	str	r2, [r7, #4]
 800cb84:	603b      	str	r3, [r7, #0]
TX_BYTE_POOL        *previous_pool;
ALIGN_TYPE          *free_ptr;


    /* Initialize the byte pool control block to all zeros.  */
    TX_MEMSET(pool_ptr, 0, (sizeof(TX_BYTE_POOL)));
 800cb86:	2234      	movs	r2, #52	; 0x34
 800cb88:	2100      	movs	r1, #0
 800cb8a:	68f8      	ldr	r0, [r7, #12]
 800cb8c:	f001 fdee 	bl	800e76c <memset>

    /* Round the pool size down to something that is evenly divisible by
       an ULONG.  */
    pool_size =   (pool_size/(sizeof(ALIGN_TYPE))) * (sizeof(ALIGN_TYPE));
 800cb90:	683b      	ldr	r3, [r7, #0]
 800cb92:	f023 0303 	bic.w	r3, r3, #3
 800cb96:	603b      	str	r3, [r7, #0]

    /* Setup the basic byte pool fields.  */
    pool_ptr -> tx_byte_pool_name =              name_ptr;
 800cb98:	68fb      	ldr	r3, [r7, #12]
 800cb9a:	68ba      	ldr	r2, [r7, #8]
 800cb9c:	605a      	str	r2, [r3, #4]

    /* Save the start and size of the pool.  */
    pool_ptr -> tx_byte_pool_start =   TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800cb9e:	68fb      	ldr	r3, [r7, #12]
 800cba0:	687a      	ldr	r2, [r7, #4]
 800cba2:	619a      	str	r2, [r3, #24]
    pool_ptr -> tx_byte_pool_size =    pool_size;
 800cba4:	68fb      	ldr	r3, [r7, #12]
 800cba6:	683a      	ldr	r2, [r7, #0]
 800cba8:	61da      	str	r2, [r3, #28]

    /* Setup memory list to the beginning as well as the search pointer.  */
    pool_ptr -> tx_byte_pool_list =    TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800cbaa:	68fb      	ldr	r3, [r7, #12]
 800cbac:	687a      	ldr	r2, [r7, #4]
 800cbae:	611a      	str	r2, [r3, #16]
    pool_ptr -> tx_byte_pool_search =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800cbb0:	68fb      	ldr	r3, [r7, #12]
 800cbb2:	687a      	ldr	r2, [r7, #4]
 800cbb4:	615a      	str	r2, [r3, #20]

    /* Initially, the pool will have two blocks.  One large block at the
       beginning that is available and a small allocated block at the end
       of the pool that is there just for the algorithm.  Be sure to count
       the available block's header in the available bytes count.  */
    pool_ptr -> tx_byte_pool_available =   pool_size - ((sizeof(VOID *)) + (sizeof(ALIGN_TYPE)));
 800cbb6:	683b      	ldr	r3, [r7, #0]
 800cbb8:	f1a3 0208 	sub.w	r2, r3, #8
 800cbbc:	68fb      	ldr	r3, [r7, #12]
 800cbbe:	609a      	str	r2, [r3, #8]
    pool_ptr -> tx_byte_pool_fragments =   ((UINT) 2);
 800cbc0:	68fb      	ldr	r3, [r7, #12]
 800cbc2:	2202      	movs	r2, #2
 800cbc4:	60da      	str	r2, [r3, #12]
    /* Each block contains a "next" pointer that points to the next block in the pool followed by a ALIGN_TYPE
       field that contains either the constant TX_BYTE_BLOCK_FREE (if the block is free) or a pointer to the
       owning pool (if the block is allocated).  */

    /* Calculate the end of the pool's memory area.  */
    block_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800cbc6:	687b      	ldr	r3, [r7, #4]
 800cbc8:	637b      	str	r3, [r7, #52]	; 0x34
    block_ptr =  TX_UCHAR_POINTER_ADD(block_ptr, pool_size);
 800cbca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cbcc:	683b      	ldr	r3, [r7, #0]
 800cbce:	4413      	add	r3, r2
 800cbd0:	637b      	str	r3, [r7, #52]	; 0x34

    /* Backup the end of the pool pointer and build the pre-allocated block.  */
    block_ptr =  TX_UCHAR_POINTER_SUB(block_ptr, (sizeof(ALIGN_TYPE)));
 800cbd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cbd4:	3b04      	subs	r3, #4
 800cbd6:	637b      	str	r3, [r7, #52]	; 0x34

    /* Cast the pool pointer into a ULONG.  */
    temp_ptr =             TX_BYTE_POOL_TO_UCHAR_POINTER_CONVERT(pool_ptr);
 800cbd8:	68fb      	ldr	r3, [r7, #12]
 800cbda:	633b      	str	r3, [r7, #48]	; 0x30
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(block_ptr);
 800cbdc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cbde:	62fb      	str	r3, [r7, #44]	; 0x2c
    *block_indirect_ptr =  temp_ptr;
 800cbe0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbe2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cbe4:	601a      	str	r2, [r3, #0]

    block_ptr =            TX_UCHAR_POINTER_SUB(block_ptr, (sizeof(UCHAR *)));
 800cbe6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cbe8:	3b04      	subs	r3, #4
 800cbea:	637b      	str	r3, [r7, #52]	; 0x34
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(block_ptr);
 800cbec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cbee:	62fb      	str	r3, [r7, #44]	; 0x2c
    *block_indirect_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800cbf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbf2:	687a      	ldr	r2, [r7, #4]
 800cbf4:	601a      	str	r2, [r3, #0]

    /* Now setup the large available block in the pool.  */
    temp_ptr =             TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800cbf6:	687b      	ldr	r3, [r7, #4]
 800cbf8:	633b      	str	r3, [r7, #48]	; 0x30
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(temp_ptr);
 800cbfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbfc:	62fb      	str	r3, [r7, #44]	; 0x2c
    *block_indirect_ptr =  block_ptr;
 800cbfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc00:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cc02:	601a      	str	r2, [r3, #0]
    block_ptr =            TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800cc04:	687b      	ldr	r3, [r7, #4]
 800cc06:	637b      	str	r3, [r7, #52]	; 0x34
    block_ptr =            TX_UCHAR_POINTER_ADD(block_ptr, (sizeof(UCHAR *)));
 800cc08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cc0a:	3304      	adds	r3, #4
 800cc0c:	637b      	str	r3, [r7, #52]	; 0x34
    free_ptr =             TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(block_ptr);
 800cc0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cc10:	62bb      	str	r3, [r7, #40]	; 0x28
    *free_ptr =            TX_BYTE_BLOCK_FREE;
 800cc12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc14:	4a1f      	ldr	r2, [pc, #124]	; (800cc94 <_tx_byte_pool_create+0x11c>)
 800cc16:	601a      	str	r2, [r3, #0]

    /* Clear the owner id.  */
    pool_ptr -> tx_byte_pool_owner =  TX_NULL;
 800cc18:	68fb      	ldr	r3, [r7, #12]
 800cc1a:	2200      	movs	r2, #0
 800cc1c:	621a      	str	r2, [r3, #32]
{
UINT posture;
#ifdef TX_PORT_USE_BASEPRI
    __asm__ volatile ("MRS  %0, BASEPRI ": "=r" (posture));
#else
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800cc1e:	f3ef 8310 	mrs	r3, PRIMASK
 800cc22:	61bb      	str	r3, [r7, #24]
#endif
    return(posture);
 800cc24:	69bb      	ldr	r3, [r7, #24]

__attribute__( ( always_inline ) ) static inline UINT __disable_interrupts(void)
{
UINT int_posture;

    int_posture = __get_interrupt_posture();
 800cc26:	617b      	str	r3, [r7, #20]

#ifdef TX_PORT_USE_BASEPRI
    __set_basepri_value(TX_PORT_BASEPRI);
#else
    __asm__ volatile ("CPSID i" : : : "memory");
 800cc28:	b672      	cpsid	i
#endif
    return(int_posture);
 800cc2a:	697b      	ldr	r3, [r7, #20]

    /* Disable interrupts to place the byte pool on the created list.  */
    TX_DISABLE
 800cc2c:	627b      	str	r3, [r7, #36]	; 0x24

    /* Setup the byte pool ID to make it valid.  */
    pool_ptr -> tx_byte_pool_id =  TX_BYTE_POOL_ID;
 800cc2e:	68fb      	ldr	r3, [r7, #12]
 800cc30:	4a19      	ldr	r2, [pc, #100]	; (800cc98 <_tx_byte_pool_create+0x120>)
 800cc32:	601a      	str	r2, [r3, #0]

    /* Place the byte pool on the list of created byte pools.  First,
       check for an empty list.  */
    if (_tx_byte_pool_created_count == TX_EMPTY)
 800cc34:	4b19      	ldr	r3, [pc, #100]	; (800cc9c <_tx_byte_pool_create+0x124>)
 800cc36:	681b      	ldr	r3, [r3, #0]
 800cc38:	2b00      	cmp	r3, #0
 800cc3a:	d109      	bne.n	800cc50 <_tx_byte_pool_create+0xd8>
    {

        /* The created byte pool list is empty.  Add byte pool to empty list.  */
        _tx_byte_pool_created_ptr =                  pool_ptr;
 800cc3c:	4a18      	ldr	r2, [pc, #96]	; (800cca0 <_tx_byte_pool_create+0x128>)
 800cc3e:	68fb      	ldr	r3, [r7, #12]
 800cc40:	6013      	str	r3, [r2, #0]
        pool_ptr -> tx_byte_pool_created_next =      pool_ptr;
 800cc42:	68fb      	ldr	r3, [r7, #12]
 800cc44:	68fa      	ldr	r2, [r7, #12]
 800cc46:	62da      	str	r2, [r3, #44]	; 0x2c
        pool_ptr -> tx_byte_pool_created_previous =  pool_ptr;
 800cc48:	68fb      	ldr	r3, [r7, #12]
 800cc4a:	68fa      	ldr	r2, [r7, #12]
 800cc4c:	631a      	str	r2, [r3, #48]	; 0x30
 800cc4e:	e011      	b.n	800cc74 <_tx_byte_pool_create+0xfc>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_pool =      _tx_byte_pool_created_ptr;
 800cc50:	4b13      	ldr	r3, [pc, #76]	; (800cca0 <_tx_byte_pool_create+0x128>)
 800cc52:	681b      	ldr	r3, [r3, #0]
 800cc54:	623b      	str	r3, [r7, #32]
        previous_pool =  next_pool -> tx_byte_pool_created_previous;
 800cc56:	6a3b      	ldr	r3, [r7, #32]
 800cc58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cc5a:	61fb      	str	r3, [r7, #28]

        /* Place the new byte pool in the list.  */
        next_pool -> tx_byte_pool_created_previous =  pool_ptr;
 800cc5c:	6a3b      	ldr	r3, [r7, #32]
 800cc5e:	68fa      	ldr	r2, [r7, #12]
 800cc60:	631a      	str	r2, [r3, #48]	; 0x30
        previous_pool -> tx_byte_pool_created_next =  pool_ptr;
 800cc62:	69fb      	ldr	r3, [r7, #28]
 800cc64:	68fa      	ldr	r2, [r7, #12]
 800cc66:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Setup this byte pool's created links.  */
        pool_ptr -> tx_byte_pool_created_previous =  previous_pool;
 800cc68:	68fb      	ldr	r3, [r7, #12]
 800cc6a:	69fa      	ldr	r2, [r7, #28]
 800cc6c:	631a      	str	r2, [r3, #48]	; 0x30
        pool_ptr -> tx_byte_pool_created_next =      next_pool;
 800cc6e:	68fb      	ldr	r3, [r7, #12]
 800cc70:	6a3a      	ldr	r2, [r7, #32]
 800cc72:	62da      	str	r2, [r3, #44]	; 0x2c
    }

    /* Increment the number of created byte pools.  */
    _tx_byte_pool_created_count++;
 800cc74:	4b09      	ldr	r3, [pc, #36]	; (800cc9c <_tx_byte_pool_create+0x124>)
 800cc76:	681b      	ldr	r3, [r3, #0]
 800cc78:	3301      	adds	r3, #1
 800cc7a:	4a08      	ldr	r2, [pc, #32]	; (800cc9c <_tx_byte_pool_create+0x124>)
 800cc7c:	6013      	str	r3, [r2, #0]
 800cc7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc80:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800cc82:	693b      	ldr	r3, [r7, #16]
 800cc84:	f383 8810 	msr	PRIMASK, r3
}
 800cc88:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 800cc8a:	2300      	movs	r3, #0
}
 800cc8c:	4618      	mov	r0, r3
 800cc8e:	3738      	adds	r7, #56	; 0x38
 800cc90:	46bd      	mov	sp, r7
 800cc92:	bd80      	pop	{r7, pc}
 800cc94:	ffffeeee 	.word	0xffffeeee
 800cc98:	42595445 	.word	0x42595445
 800cc9c:	20001df8 	.word	0x20001df8
 800cca0:	20001df4 	.word	0x20001df4

0800cca4 <_tx_event_flags_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_event_flags_create(TX_EVENT_FLAGS_GROUP *group_ptr, CHAR *name_ptr)
{
 800cca4:	b580      	push	{r7, lr}
 800cca6:	b088      	sub	sp, #32
 800cca8:	af00      	add	r7, sp, #0
 800ccaa:	6078      	str	r0, [r7, #4]
 800ccac:	6039      	str	r1, [r7, #0]
TX_EVENT_FLAGS_GROUP    *next_group;
TX_EVENT_FLAGS_GROUP    *previous_group;


    /* Initialize event flags control block to all zeros.  */
    TX_MEMSET(group_ptr, 0, (sizeof(TX_EVENT_FLAGS_GROUP)));
 800ccae:	2224      	movs	r2, #36	; 0x24
 800ccb0:	2100      	movs	r1, #0
 800ccb2:	6878      	ldr	r0, [r7, #4]
 800ccb4:	f001 fd5a 	bl	800e76c <memset>

    /* Setup the basic event flags group fields.  */
    group_ptr -> tx_event_flags_group_name =             name_ptr;
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	683a      	ldr	r2, [r7, #0]
 800ccbc:	605a      	str	r2, [r3, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800ccbe:	f3ef 8310 	mrs	r3, PRIMASK
 800ccc2:	613b      	str	r3, [r7, #16]
    return(posture);
 800ccc4:	693b      	ldr	r3, [r7, #16]
    int_posture = __get_interrupt_posture();
 800ccc6:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("CPSID i" : : : "memory");
 800ccc8:	b672      	cpsid	i
    return(int_posture);
 800ccca:	68fb      	ldr	r3, [r7, #12]

    /* Disable interrupts to put the event flags group on the created list.  */
    TX_DISABLE
 800cccc:	61fb      	str	r3, [r7, #28]

    /* Setup the event flags ID to make it valid.  */
    group_ptr -> tx_event_flags_group_id =  TX_EVENT_FLAGS_ID;
 800ccce:	687b      	ldr	r3, [r7, #4]
 800ccd0:	4a18      	ldr	r2, [pc, #96]	; (800cd34 <_tx_event_flags_create+0x90>)
 800ccd2:	601a      	str	r2, [r3, #0]

    /* Place the group on the list of created event flag groups.  First,
       check for an empty list.  */
    if (_tx_event_flags_created_count == TX_EMPTY)
 800ccd4:	4b18      	ldr	r3, [pc, #96]	; (800cd38 <_tx_event_flags_create+0x94>)
 800ccd6:	681b      	ldr	r3, [r3, #0]
 800ccd8:	2b00      	cmp	r3, #0
 800ccda:	d109      	bne.n	800ccf0 <_tx_event_flags_create+0x4c>
    {

        /* The created event flags list is empty.  Add event flag group to empty list.  */
        _tx_event_flags_created_ptr =                         group_ptr;
 800ccdc:	4a17      	ldr	r2, [pc, #92]	; (800cd3c <_tx_event_flags_create+0x98>)
 800ccde:	687b      	ldr	r3, [r7, #4]
 800cce0:	6013      	str	r3, [r2, #0]
        group_ptr -> tx_event_flags_group_created_next =      group_ptr;
 800cce2:	687b      	ldr	r3, [r7, #4]
 800cce4:	687a      	ldr	r2, [r7, #4]
 800cce6:	619a      	str	r2, [r3, #24]
        group_ptr -> tx_event_flags_group_created_previous =  group_ptr;
 800cce8:	687b      	ldr	r3, [r7, #4]
 800ccea:	687a      	ldr	r2, [r7, #4]
 800ccec:	61da      	str	r2, [r3, #28]
 800ccee:	e011      	b.n	800cd14 <_tx_event_flags_create+0x70>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_group =      _tx_event_flags_created_ptr;
 800ccf0:	4b12      	ldr	r3, [pc, #72]	; (800cd3c <_tx_event_flags_create+0x98>)
 800ccf2:	681b      	ldr	r3, [r3, #0]
 800ccf4:	61bb      	str	r3, [r7, #24]
        previous_group =  next_group -> tx_event_flags_group_created_previous;
 800ccf6:	69bb      	ldr	r3, [r7, #24]
 800ccf8:	69db      	ldr	r3, [r3, #28]
 800ccfa:	617b      	str	r3, [r7, #20]

        /* Place the new event flag group in the list.  */
        next_group -> tx_event_flags_group_created_previous =  group_ptr;
 800ccfc:	69bb      	ldr	r3, [r7, #24]
 800ccfe:	687a      	ldr	r2, [r7, #4]
 800cd00:	61da      	str	r2, [r3, #28]
        previous_group -> tx_event_flags_group_created_next =  group_ptr;
 800cd02:	697b      	ldr	r3, [r7, #20]
 800cd04:	687a      	ldr	r2, [r7, #4]
 800cd06:	619a      	str	r2, [r3, #24]

        /* Setup this group's created links.  */
        group_ptr -> tx_event_flags_group_created_previous =  previous_group;
 800cd08:	687b      	ldr	r3, [r7, #4]
 800cd0a:	697a      	ldr	r2, [r7, #20]
 800cd0c:	61da      	str	r2, [r3, #28]
        group_ptr -> tx_event_flags_group_created_next =      next_group;
 800cd0e:	687b      	ldr	r3, [r7, #4]
 800cd10:	69ba      	ldr	r2, [r7, #24]
 800cd12:	619a      	str	r2, [r3, #24]
    }

    /* Increment the number of created event flag groups.  */
    _tx_event_flags_created_count++;
 800cd14:	4b08      	ldr	r3, [pc, #32]	; (800cd38 <_tx_event_flags_create+0x94>)
 800cd16:	681b      	ldr	r3, [r3, #0]
 800cd18:	3301      	adds	r3, #1
 800cd1a:	4a07      	ldr	r2, [pc, #28]	; (800cd38 <_tx_event_flags_create+0x94>)
 800cd1c:	6013      	str	r3, [r2, #0]
 800cd1e:	69fb      	ldr	r3, [r7, #28]
 800cd20:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800cd22:	68bb      	ldr	r3, [r7, #8]
 800cd24:	f383 8810 	msr	PRIMASK, r3
}
 800cd28:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 800cd2a:	2300      	movs	r3, #0
}
 800cd2c:	4618      	mov	r0, r3
 800cd2e:	3720      	adds	r7, #32
 800cd30:	46bd      	mov	sp, r7
 800cd32:	bd80      	pop	{r7, pc}
 800cd34:	4456444e 	.word	0x4456444e
 800cd38:	20001de0 	.word	0x20001de0
 800cd3c:	20001ddc 	.word	0x20001ddc

0800cd40 <_tx_event_flags_set>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_event_flags_set(TX_EVENT_FLAGS_GROUP *group_ptr, ULONG flags_to_set, UINT set_option)
{
 800cd40:	b580      	push	{r7, lr}
 800cd42:	b0a6      	sub	sp, #152	; 0x98
 800cd44:	af00      	add	r7, sp, #0
 800cd46:	60f8      	str	r0, [r7, #12]
 800cd48:	60b9      	str	r1, [r7, #8]
 800cd4a:	607a      	str	r2, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800cd4c:	f3ef 8310 	mrs	r3, PRIMASK
 800cd50:	64fb      	str	r3, [r7, #76]	; 0x4c
    return(posture);
 800cd52:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    int_posture = __get_interrupt_posture();
 800cd54:	64bb      	str	r3, [r7, #72]	; 0x48
    __asm__ volatile ("CPSID i" : : : "memory");
 800cd56:	b672      	cpsid	i
    return(int_posture);
 800cd58:	6cbb      	ldr	r3, [r7, #72]	; 0x48
VOID            (*events_set_notify)(struct TX_EVENT_FLAGS_GROUP_STRUCT *notify_group_ptr);
#endif


    /* Disable interrupts to remove the semaphore from the created list.  */
    TX_DISABLE
 800cd5a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

    /* Log this kernel call.  */
    TX_EL_EVENT_FLAGS_SET_INSERT

    /* Determine how to set this group's event flags.  */
    if ((set_option & TX_EVENT_FLAGS_AND_MASK) == TX_AND)
 800cd5e:	687b      	ldr	r3, [r7, #4]
 800cd60:	f003 0302 	and.w	r3, r3, #2
 800cd64:	2b00      	cmp	r3, #0
 800cd66:	d023      	beq.n	800cdb0 <_tx_event_flags_set+0x70>
    {

#ifndef TX_NOT_INTERRUPTABLE

        /* Set interrupted set request flag to false.  */
        interrupted_set_request =  TX_FALSE;
 800cd68:	2300      	movs	r3, #0
 800cd6a:	673b      	str	r3, [r7, #112]	; 0x70

        /* Determine if the suspension list is being processed by an interrupted
           set request.  */
        if (group_ptr -> tx_event_flags_group_suspended_count != TX_NO_SUSPENSIONS)
 800cd6c:	68fb      	ldr	r3, [r7, #12]
 800cd6e:	695b      	ldr	r3, [r3, #20]
 800cd70:	2b00      	cmp	r3, #0
 800cd72:	d005      	beq.n	800cd80 <_tx_event_flags_set+0x40>
        {

            if (group_ptr -> tx_event_flags_group_suspension_list == TX_NULL)
 800cd74:	68fb      	ldr	r3, [r7, #12]
 800cd76:	691b      	ldr	r3, [r3, #16]
 800cd78:	2b00      	cmp	r3, #0
 800cd7a:	d101      	bne.n	800cd80 <_tx_event_flags_set+0x40>
            {

                /* Set the interrupted set request flag.  */
                interrupted_set_request =  TX_TRUE;
 800cd7c:	2301      	movs	r3, #1
 800cd7e:	673b      	str	r3, [r7, #112]	; 0x70
            }
        }

        /* Was a set request interrupted?  */
        if (interrupted_set_request == TX_TRUE)
 800cd80:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800cd82:	2b01      	cmp	r3, #1
 800cd84:	d107      	bne.n	800cd96 <_tx_event_flags_set+0x56>
            /* A previous set operation was interrupted, we need to defer the
               event clearing until the set operation is complete.  */

            /* Remember the events to clear.  */
            group_ptr -> tx_event_flags_group_delayed_clear =
                                        group_ptr -> tx_event_flags_group_delayed_clear | ~flags_to_set;
 800cd86:	68fb      	ldr	r3, [r7, #12]
 800cd88:	6a1a      	ldr	r2, [r3, #32]
 800cd8a:	68bb      	ldr	r3, [r7, #8]
 800cd8c:	43db      	mvns	r3, r3
 800cd8e:	431a      	orrs	r2, r3
            group_ptr -> tx_event_flags_group_delayed_clear =
 800cd90:	68fb      	ldr	r3, [r7, #12]
 800cd92:	621a      	str	r2, [r3, #32]
 800cd94:	e005      	b.n	800cda2 <_tx_event_flags_set+0x62>

            /* Previous set operation was not interrupted, simply clear the
               specified flags by "ANDing" the flags into the current events
               of the group.  */
            group_ptr -> tx_event_flags_group_current =
                group_ptr -> tx_event_flags_group_current & flags_to_set;
 800cd96:	68fb      	ldr	r3, [r7, #12]
 800cd98:	689a      	ldr	r2, [r3, #8]
 800cd9a:	68bb      	ldr	r3, [r7, #8]
 800cd9c:	401a      	ands	r2, r3
            group_ptr -> tx_event_flags_group_current =
 800cd9e:	68fb      	ldr	r3, [r7, #12]
 800cda0:	609a      	str	r2, [r3, #8]
 800cda2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800cda6:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800cda8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cdaa:	f383 8810 	msr	PRIMASK, r3
}
 800cdae:	e1d4      	b.n	800d15a <_tx_event_flags_set+0x41a>
        events_set_notify =  group_ptr -> tx_event_flags_group_set_notify;
#endif

        /* "OR" the flags into the current events of the group.  */
        group_ptr -> tx_event_flags_group_current =
            group_ptr -> tx_event_flags_group_current | flags_to_set;
 800cdb0:	68fb      	ldr	r3, [r7, #12]
 800cdb2:	689a      	ldr	r2, [r3, #8]
 800cdb4:	68bb      	ldr	r3, [r7, #8]
 800cdb6:	431a      	orrs	r2, r3
        group_ptr -> tx_event_flags_group_current =
 800cdb8:	68fb      	ldr	r3, [r7, #12]
 800cdba:	609a      	str	r2, [r3, #8]

#ifndef TX_NOT_INTERRUPTABLE

        /* Determine if there are any delayed flags to clear.  */
        if (group_ptr -> tx_event_flags_group_delayed_clear != ((ULONG) 0))
 800cdbc:	68fb      	ldr	r3, [r7, #12]
 800cdbe:	6a1b      	ldr	r3, [r3, #32]
 800cdc0:	2b00      	cmp	r3, #0
 800cdc2:	d006      	beq.n	800cdd2 <_tx_event_flags_set+0x92>
        {

            /* Yes, we need to neutralize the delayed clearing as well.  */
            group_ptr -> tx_event_flags_group_delayed_clear =
                                        group_ptr -> tx_event_flags_group_delayed_clear & ~flags_to_set;
 800cdc4:	68fb      	ldr	r3, [r7, #12]
 800cdc6:	6a1a      	ldr	r2, [r3, #32]
 800cdc8:	68bb      	ldr	r3, [r7, #8]
 800cdca:	43db      	mvns	r3, r3
 800cdcc:	401a      	ands	r2, r3
            group_ptr -> tx_event_flags_group_delayed_clear =
 800cdce:	68fb      	ldr	r3, [r7, #12]
 800cdd0:	621a      	str	r2, [r3, #32]
        }
#endif

        /* Clear the preempt check flag.  */
        preempt_check =  TX_FALSE;
 800cdd2:	2300      	movs	r3, #0
 800cdd4:	677b      	str	r3, [r7, #116]	; 0x74

        /* Pickup the thread suspended count.  */
        suspended_count =  group_ptr -> tx_event_flags_group_suspended_count;
 800cdd6:	68fb      	ldr	r3, [r7, #12]
 800cdd8:	695b      	ldr	r3, [r3, #20]
 800cdda:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

        /* Determine if there are any threads suspended on the event flag group.  */
        if (group_ptr -> tx_event_flags_group_suspension_list != TX_NULL)
 800cdde:	68fb      	ldr	r3, [r7, #12]
 800cde0:	691b      	ldr	r3, [r3, #16]
 800cde2:	2b00      	cmp	r3, #0
 800cde4:	f000 81a6 	beq.w	800d134 <_tx_event_flags_set+0x3f4>
        {

            /* Determine if there is just a single thread waiting on the event
               flag group.  */
            if (suspended_count == ((UINT) 1))
 800cde8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800cdec:	2b01      	cmp	r3, #1
 800cdee:	d169      	bne.n	800cec4 <_tx_event_flags_set+0x184>

                /* Single thread waiting for event flags.  Bypass the multiple thread
                   logic.  */

                /* Setup thread pointer.  */
                thread_ptr =  group_ptr -> tx_event_flags_group_suspension_list;
 800cdf0:	68fb      	ldr	r3, [r7, #12]
 800cdf2:	691b      	ldr	r3, [r3, #16]
 800cdf4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

                /* Pickup the current event flags.  */
                current_event_flags =  group_ptr -> tx_event_flags_group_current;
 800cdf8:	68fb      	ldr	r3, [r7, #12]
 800cdfa:	689b      	ldr	r3, [r3, #8]
 800cdfc:	67fb      	str	r3, [r7, #124]	; 0x7c

                /* Pickup the suspend information.  */
                requested_flags =  thread_ptr -> tx_thread_suspend_info;
 800cdfe:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800ce02:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ce04:	66bb      	str	r3, [r7, #104]	; 0x68

                /* Pickup the suspend option.  */
                get_option =  thread_ptr -> tx_thread_suspend_option;
 800ce06:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800ce0a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ce0e:	667b      	str	r3, [r7, #100]	; 0x64

                /* Isolate the AND selection.  */
                and_request =  (get_option & TX_AND);
 800ce10:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ce12:	f003 0302 	and.w	r3, r3, #2
 800ce16:	663b      	str	r3, [r7, #96]	; 0x60

                /* Check for AND condition. All flags must be present to satisfy request.  */
                if (and_request == TX_AND)
 800ce18:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ce1a:	2b02      	cmp	r3, #2
 800ce1c:	d10a      	bne.n	800ce34 <_tx_event_flags_set+0xf4>
                {

                    /* AND request is present.  */

                    /* Calculate the flags present.  */
                    flags_satisfied =  (current_event_flags & requested_flags);
 800ce1e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800ce20:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ce22:	4013      	ands	r3, r2
 800ce24:	67bb      	str	r3, [r7, #120]	; 0x78

                    /* Determine if they satisfy the AND request.  */
                    if (flags_satisfied != requested_flags)
 800ce26:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800ce28:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ce2a:	429a      	cmp	r2, r3
 800ce2c:	d006      	beq.n	800ce3c <_tx_event_flags_set+0xfc>
                    {

                        /* No, not all the requested flags are present. Clear the flags present variable.  */
                        flags_satisfied =  ((ULONG) 0);
 800ce2e:	2300      	movs	r3, #0
 800ce30:	67bb      	str	r3, [r7, #120]	; 0x78
 800ce32:	e003      	b.n	800ce3c <_tx_event_flags_set+0xfc>
                }
                else
                {

                    /* OR request is present. Simply or the requested flags and the current flags.  */
                    flags_satisfied =  (current_event_flags & requested_flags);
 800ce34:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800ce36:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ce38:	4013      	ands	r3, r2
 800ce3a:	67bb      	str	r3, [r7, #120]	; 0x78
                }

                /* Determine if the request is satisfied.  */
                if (flags_satisfied != ((ULONG) 0))
 800ce3c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ce3e:	2b00      	cmp	r3, #0
 800ce40:	f000 817f 	beq.w	800d142 <_tx_event_flags_set+0x402>

                    /* Yes, resume the thread and apply any event flag
                       clearing.  */

                    /* Set the preempt check flag.  */
                    preempt_check =  TX_TRUE;
 800ce44:	2301      	movs	r3, #1
 800ce46:	677b      	str	r3, [r7, #116]	; 0x74

                    /* Return the actual event flags that satisfied the request.  */
                    suspend_info_ptr =   TX_VOID_TO_ULONG_POINTER_CONVERT(thread_ptr -> tx_thread_additional_suspend_info);
 800ce48:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800ce4c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ce4e:	65fb      	str	r3, [r7, #92]	; 0x5c
                    *suspend_info_ptr =  current_event_flags;
 800ce50:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ce52:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800ce54:	601a      	str	r2, [r3, #0]

                    /* Pickup the clear bit.  */
                    clear_request =  (get_option & TX_EVENT_FLAGS_CLEAR_MASK);
 800ce56:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ce58:	f003 0301 	and.w	r3, r3, #1
 800ce5c:	65bb      	str	r3, [r7, #88]	; 0x58

                    /* Determine whether or not clearing needs to take place.  */
                    if (clear_request == TX_TRUE)
 800ce5e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ce60:	2b01      	cmp	r3, #1
 800ce62:	d106      	bne.n	800ce72 <_tx_event_flags_set+0x132>
                    {

                        /* Yes, clear the flags that satisfied this request.  */
                        group_ptr -> tx_event_flags_group_current =  group_ptr -> tx_event_flags_group_current & (~requested_flags);
 800ce64:	68fb      	ldr	r3, [r7, #12]
 800ce66:	689a      	ldr	r2, [r3, #8]
 800ce68:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ce6a:	43db      	mvns	r3, r3
 800ce6c:	401a      	ands	r2, r3
 800ce6e:	68fb      	ldr	r3, [r7, #12]
 800ce70:	609a      	str	r2, [r3, #8]
                    }

                    /* Clear the suspension information in the event flag group.  */
                    group_ptr -> tx_event_flags_group_suspension_list =  TX_NULL;
 800ce72:	68fb      	ldr	r3, [r7, #12]
 800ce74:	2200      	movs	r2, #0
 800ce76:	611a      	str	r2, [r3, #16]
                    group_ptr -> tx_event_flags_group_suspended_count =  TX_NO_SUSPENSIONS;
 800ce78:	68fb      	ldr	r3, [r7, #12]
 800ce7a:	2200      	movs	r2, #0
 800ce7c:	615a      	str	r2, [r3, #20]

                    /* Clear cleanup routine to avoid timeout.  */
                    thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800ce7e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800ce82:	2200      	movs	r2, #0
 800ce84:	669a      	str	r2, [r3, #104]	; 0x68

                    /* Put return status into the thread control block.  */
                    thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 800ce86:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800ce8a:	2200      	movs	r2, #0
 800ce8c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                    /* Resume the thread!  */
                    _tx_thread_system_ni_resume(thread_ptr);
#else

                    /* Temporarily disable preemption.  */
                    _tx_thread_preempt_disable++;
 800ce90:	4ba7      	ldr	r3, [pc, #668]	; (800d130 <_tx_event_flags_set+0x3f0>)
 800ce92:	681b      	ldr	r3, [r3, #0]
 800ce94:	3301      	adds	r3, #1
 800ce96:	4aa6      	ldr	r2, [pc, #664]	; (800d130 <_tx_event_flags_set+0x3f0>)
 800ce98:	6013      	str	r3, [r2, #0]
 800ce9a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800ce9e:	63bb      	str	r3, [r7, #56]	; 0x38
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800cea0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cea2:	f383 8810 	msr	PRIMASK, r3
}
 800cea6:	bf00      	nop

                    /* Restore interrupts.  */
                    TX_RESTORE

                    /* Resume thread.  */
                    _tx_thread_system_resume(thread_ptr);
 800cea8:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 800ceac:	f000 fcd0 	bl	800d850 <_tx_thread_system_resume>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800ceb0:	f3ef 8310 	mrs	r3, PRIMASK
 800ceb4:	643b      	str	r3, [r7, #64]	; 0x40
    return(posture);
 800ceb6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    int_posture = __get_interrupt_posture();
 800ceb8:	63fb      	str	r3, [r7, #60]	; 0x3c
    __asm__ volatile ("CPSID i" : : : "memory");
 800ceba:	b672      	cpsid	i
    return(int_posture);
 800cebc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c

                    /* Disable interrupts to remove the semaphore from the created list.  */
                    TX_DISABLE
 800cebe:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800cec2:	e13e      	b.n	800d142 <_tx_event_flags_set+0x402>

                /* Otherwise, the event flag requests of multiple threads must be
                   examined.  */

                /* Setup thread pointer, keep a local copy of the head pointer.  */
                suspended_list =  group_ptr -> tx_event_flags_group_suspension_list;
 800cec4:	68fb      	ldr	r3, [r7, #12]
 800cec6:	691b      	ldr	r3, [r3, #16]
 800cec8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
                thread_ptr =      suspended_list;
 800cecc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800ced0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

                /* Clear the suspended list head pointer to thwart manipulation of
                   the list in ISR's while we are processing here.  */
                group_ptr -> tx_event_flags_group_suspension_list =  TX_NULL;
 800ced4:	68fb      	ldr	r3, [r7, #12]
 800ced6:	2200      	movs	r2, #0
 800ced8:	611a      	str	r2, [r3, #16]

                /* Setup the satisfied thread pointers.  */
                satisfied_list =  TX_NULL;
 800ceda:	2300      	movs	r3, #0
 800cedc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                last_satisfied =  TX_NULL;
 800cee0:	2300      	movs	r3, #0
 800cee2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

                /* Pickup the current event flags.  */
                current_event_flags =  group_ptr -> tx_event_flags_group_current;
 800cee6:	68fb      	ldr	r3, [r7, #12]
 800cee8:	689b      	ldr	r3, [r3, #8]
 800ceea:	67fb      	str	r3, [r7, #124]	; 0x7c

                /* Disable preemption while we process the suspended list.  */
                _tx_thread_preempt_disable++;
 800ceec:	4b90      	ldr	r3, [pc, #576]	; (800d130 <_tx_event_flags_set+0x3f0>)
 800ceee:	681b      	ldr	r3, [r3, #0]
 800cef0:	3301      	adds	r3, #1
 800cef2:	4a8f      	ldr	r2, [pc, #572]	; (800d130 <_tx_event_flags_set+0x3f0>)
 800cef4:	6013      	str	r3, [r2, #0]
 800cef6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800cefa:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800cefc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cefe:	f383 8810 	msr	PRIMASK, r3
}
 800cf02:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800cf04:	f3ef 8310 	mrs	r3, PRIMASK
 800cf08:	637b      	str	r3, [r7, #52]	; 0x34
    return(posture);
 800cf0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    int_posture = __get_interrupt_posture();
 800cf0c:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("CPSID i" : : : "memory");
 800cf0e:	b672      	cpsid	i
    return(int_posture);
 800cf10:	6b3b      	ldr	r3, [r7, #48]	; 0x30

                    /* Restore interrupts temporarily.  */
                    TX_RESTORE

                    /* Disable interrupts again.  */
                    TX_DISABLE
 800cf12:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
#endif

                    /* Determine if we need to reset the search.  */
                    if (group_ptr -> tx_event_flags_group_reset_search != TX_FALSE)
 800cf16:	68fb      	ldr	r3, [r7, #12]
 800cf18:	68db      	ldr	r3, [r3, #12]
 800cf1a:	2b00      	cmp	r3, #0
 800cf1c:	d00f      	beq.n	800cf3e <_tx_event_flags_set+0x1fe>
                    {

                        /* Clear the reset search flag.  */
                        group_ptr -> tx_event_flags_group_reset_search =  TX_FALSE;
 800cf1e:	68fb      	ldr	r3, [r7, #12]
 800cf20:	2200      	movs	r2, #0
 800cf22:	60da      	str	r2, [r3, #12]

                        /* Move the thread pointer to the beginning of the search list.  */
                        thread_ptr =  suspended_list;
 800cf24:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800cf28:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

                        /* Reset the suspended count.  */
                        suspended_count =  group_ptr -> tx_event_flags_group_suspended_count;
 800cf2c:	68fb      	ldr	r3, [r7, #12]
 800cf2e:	695b      	ldr	r3, [r3, #20]
 800cf30:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

                        /* Update the current events with any new ones that might
                           have been set in a nested set events call from an ISR.  */
                        current_event_flags =  current_event_flags | group_ptr -> tx_event_flags_group_current;
 800cf34:	68fb      	ldr	r3, [r7, #12]
 800cf36:	689b      	ldr	r3, [r3, #8]
 800cf38:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800cf3a:	4313      	orrs	r3, r2
 800cf3c:	67fb      	str	r3, [r7, #124]	; 0x7c
                    }

                    /* Save next thread pointer.  */
                    next_thread_ptr =  thread_ptr -> tx_thread_suspended_next;
 800cf3e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800cf42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cf44:	66fb      	str	r3, [r7, #108]	; 0x6c

                    /* Pickup the suspend information.  */
                    requested_flags =  thread_ptr -> tx_thread_suspend_info;
 800cf46:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800cf4a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cf4c:	66bb      	str	r3, [r7, #104]	; 0x68

                    /* Pickup this thread's suspension get option.  */
                    get_option =  thread_ptr -> tx_thread_suspend_option;
 800cf4e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800cf52:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800cf56:	667b      	str	r3, [r7, #100]	; 0x64

                    /* Isolate the AND selection.  */
                    and_request =  (get_option & TX_AND);
 800cf58:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800cf5a:	f003 0302 	and.w	r3, r3, #2
 800cf5e:	663b      	str	r3, [r7, #96]	; 0x60

                    /* Check for AND condition. All flags must be present to satisfy request.  */
                    if (and_request == TX_AND)
 800cf60:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800cf62:	2b02      	cmp	r3, #2
 800cf64:	d10a      	bne.n	800cf7c <_tx_event_flags_set+0x23c>
                    {

                        /* AND request is present.  */

                        /* Calculate the flags present.  */
                        flags_satisfied =  (current_event_flags & requested_flags);
 800cf66:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800cf68:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800cf6a:	4013      	ands	r3, r2
 800cf6c:	67bb      	str	r3, [r7, #120]	; 0x78

                        /* Determine if they satisfy the AND request.  */
                        if (flags_satisfied != requested_flags)
 800cf6e:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800cf70:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800cf72:	429a      	cmp	r2, r3
 800cf74:	d006      	beq.n	800cf84 <_tx_event_flags_set+0x244>
                        {

                            /* No, not all the requested flags are present. Clear the flags present variable.  */
                            flags_satisfied =  ((ULONG) 0);
 800cf76:	2300      	movs	r3, #0
 800cf78:	67bb      	str	r3, [r7, #120]	; 0x78
 800cf7a:	e003      	b.n	800cf84 <_tx_event_flags_set+0x244>
                    }
                    else
                    {

                        /* OR request is present. Simply or the requested flags and the current flags.  */
                        flags_satisfied =  (current_event_flags & requested_flags);
 800cf7c:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800cf7e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800cf80:	4013      	ands	r3, r2
 800cf82:	67bb      	str	r3, [r7, #120]	; 0x78
                    }

                    /* Check to see if the thread had a timeout or wait abort during the event search processing.
                       If so, just set the flags satisfied to ensure the processing here removes the thread from
                       the suspension list.  */
                    if (thread_ptr -> tx_thread_state != TX_EVENT_FLAG)
 800cf84:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800cf88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cf8a:	2b07      	cmp	r3, #7
 800cf8c:	d001      	beq.n	800cf92 <_tx_event_flags_set+0x252>
                    {

                       /* Simply set the satisfied flags to 1 in order to remove the thread from the suspension list.  */
                        flags_satisfied =  ((ULONG) 1);
 800cf8e:	2301      	movs	r3, #1
 800cf90:	67bb      	str	r3, [r7, #120]	; 0x78
                    }

                    /* Determine if the request is satisfied.  */
                    if (flags_satisfied != ((ULONG) 0))
 800cf92:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800cf94:	2b00      	cmp	r3, #0
 800cf96:	d06b      	beq.n	800d070 <_tx_event_flags_set+0x330>
                    {

                        /* Yes, this request can be handled now.  */

                        /* Set the preempt check flag.  */
                        preempt_check =  TX_TRUE;
 800cf98:	2301      	movs	r3, #1
 800cf9a:	677b      	str	r3, [r7, #116]	; 0x74

                        /* Determine if the thread is still suspended on the event flag group. If not, a wait
                           abort must have been done from an ISR.  */
                        if (thread_ptr -> tx_thread_state == TX_EVENT_FLAG)
 800cf9c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800cfa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cfa2:	2b07      	cmp	r3, #7
 800cfa4:	d11d      	bne.n	800cfe2 <_tx_event_flags_set+0x2a2>
                        {

                            /* Return the actual event flags that satisfied the request.  */
                            suspend_info_ptr =   TX_VOID_TO_ULONG_POINTER_CONVERT(thread_ptr -> tx_thread_additional_suspend_info);
 800cfa6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800cfaa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cfac:	65fb      	str	r3, [r7, #92]	; 0x5c
                            *suspend_info_ptr =  current_event_flags;
 800cfae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cfb0:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800cfb2:	601a      	str	r2, [r3, #0]

                            /* Pickup the clear bit.  */
                            clear_request =  (get_option & TX_EVENT_FLAGS_CLEAR_MASK);
 800cfb4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800cfb6:	f003 0301 	and.w	r3, r3, #1
 800cfba:	65bb      	str	r3, [r7, #88]	; 0x58

                            /* Determine whether or not clearing needs to take place.  */
                            if (clear_request == TX_TRUE)
 800cfbc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800cfbe:	2b01      	cmp	r3, #1
 800cfc0:	d106      	bne.n	800cfd0 <_tx_event_flags_set+0x290>
                            {

                                /* Yes, clear the flags that satisfied this request.  */
                                group_ptr -> tx_event_flags_group_current =  group_ptr -> tx_event_flags_group_current & ~requested_flags;
 800cfc2:	68fb      	ldr	r3, [r7, #12]
 800cfc4:	689a      	ldr	r2, [r3, #8]
 800cfc6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800cfc8:	43db      	mvns	r3, r3
 800cfca:	401a      	ands	r2, r3
 800cfcc:	68fb      	ldr	r3, [r7, #12]
 800cfce:	609a      	str	r2, [r3, #8]
                            }

                            /* Prepare for resumption of the first thread.  */

                            /* Clear cleanup routine to avoid timeout.  */
                            thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800cfd0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800cfd4:	2200      	movs	r2, #0
 800cfd6:	669a      	str	r2, [r3, #104]	; 0x68

                            /* Put return status into the thread control block.  */
                            thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 800cfd8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800cfdc:	2200      	movs	r2, #0
 800cfde:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

                        /* We need to remove the thread from the suspension list and place it in the
                           expired list.  */

                        /* See if this is the only suspended thread on the list.  */
                        if (thread_ptr == thread_ptr -> tx_thread_suspended_next)
 800cfe2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800cfe6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cfe8:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800cfec:	429a      	cmp	r2, r3
 800cfee:	d103      	bne.n	800cff8 <_tx_event_flags_set+0x2b8>
                        {

                            /* Yes, the only suspended thread.  */

                            /* Update the head pointer.  */
                            suspended_list =  TX_NULL;
 800cff0:	2300      	movs	r3, #0
 800cff2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800cff6:	e018      	b.n	800d02a <_tx_event_flags_set+0x2ea>
                        {

                            /* At least one more thread is on the same expiration list.  */

                            /* Update the links of the adjacent threads.  */
                            next_thread =                                  thread_ptr -> tx_thread_suspended_next;
 800cff8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800cffc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cffe:	657b      	str	r3, [r7, #84]	; 0x54
                            previous_thread =                              thread_ptr -> tx_thread_suspended_previous;
 800d000:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800d004:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d006:	653b      	str	r3, [r7, #80]	; 0x50
                            next_thread -> tx_thread_suspended_previous =  previous_thread;
 800d008:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d00a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d00c:	675a      	str	r2, [r3, #116]	; 0x74
                            previous_thread -> tx_thread_suspended_next =  next_thread;
 800d00e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d010:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800d012:	671a      	str	r2, [r3, #112]	; 0x70

                            /* Update the list head pointer, if removing the head of the
                               list.  */
                            if (suspended_list == thread_ptr)
 800d014:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800d018:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800d01c:	429a      	cmp	r2, r3
 800d01e:	d104      	bne.n	800d02a <_tx_event_flags_set+0x2ea>
                            {

                                /* Yes, head pointer needs to be updated.  */
                                suspended_list =  thread_ptr -> tx_thread_suspended_next;
 800d020:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800d024:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d026:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
                            }
                        }

                        /* Decrement the suspension count.  */
                        group_ptr -> tx_event_flags_group_suspended_count--;
 800d02a:	68fb      	ldr	r3, [r7, #12]
 800d02c:	695b      	ldr	r3, [r3, #20]
 800d02e:	1e5a      	subs	r2, r3, #1
 800d030:	68fb      	ldr	r3, [r7, #12]
 800d032:	615a      	str	r2, [r3, #20]

                        /* Place this thread on the expired list.  */
                        if (satisfied_list == TX_NULL)
 800d034:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d038:	2b00      	cmp	r3, #0
 800d03a:	d10c      	bne.n	800d056 <_tx_event_flags_set+0x316>
                        {

                            /* First thread on the satisfied list.  */
                            satisfied_list =  thread_ptr;
 800d03c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800d040:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                            last_satisfied =  thread_ptr;
 800d044:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800d048:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

                            /* Setup initial next pointer.  */
                            thread_ptr -> tx_thread_suspended_next =  TX_NULL;
 800d04c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800d050:	2200      	movs	r2, #0
 800d052:	671a      	str	r2, [r3, #112]	; 0x70
 800d054:	e00c      	b.n	800d070 <_tx_event_flags_set+0x330>
                        {

                            /* Not the first thread on the satisfied list.  */

                            /* Link it up at the end.  */
                            last_satisfied -> tx_thread_suspended_next =  thread_ptr;
 800d056:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800d05a:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800d05e:	671a      	str	r2, [r3, #112]	; 0x70
                            thread_ptr -> tx_thread_suspended_next =      TX_NULL;
 800d060:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800d064:	2200      	movs	r2, #0
 800d066:	671a      	str	r2, [r3, #112]	; 0x70
                            last_satisfied =                              thread_ptr;
 800d068:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800d06c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                        }
                    }

                    /* Copy next thread pointer to working thread ptr.  */
                    thread_ptr =  next_thread_ptr;
 800d070:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d072:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

                    /* Decrement the suspension count.  */
                    suspended_count--;
 800d076:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800d07a:	3b01      	subs	r3, #1
 800d07c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

                } while (suspended_count != TX_NO_SUSPENSIONS);
 800d080:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800d084:	2b00      	cmp	r3, #0
 800d086:	f47f af36 	bne.w	800cef6 <_tx_event_flags_set+0x1b6>

                /* Setup the group's suspension list head again.  */
                group_ptr -> tx_event_flags_group_suspension_list =  suspended_list;
 800d08a:	68fb      	ldr	r3, [r7, #12]
 800d08c:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800d090:	611a      	str	r2, [r3, #16]

#ifndef TX_NOT_INTERRUPTABLE

                /* Determine if there is any delayed event clearing to perform.  */
                if (group_ptr -> tx_event_flags_group_delayed_clear != ((ULONG) 0))
 800d092:	68fb      	ldr	r3, [r7, #12]
 800d094:	6a1b      	ldr	r3, [r3, #32]
 800d096:	2b00      	cmp	r3, #0
 800d098:	d00a      	beq.n	800d0b0 <_tx_event_flags_set+0x370>
                {

                    /* Perform the delayed event clearing.  */
                    group_ptr -> tx_event_flags_group_current =
                        group_ptr -> tx_event_flags_group_current & ~(group_ptr -> tx_event_flags_group_delayed_clear);
 800d09a:	68fb      	ldr	r3, [r7, #12]
 800d09c:	689a      	ldr	r2, [r3, #8]
 800d09e:	68fb      	ldr	r3, [r7, #12]
 800d0a0:	6a1b      	ldr	r3, [r3, #32]
 800d0a2:	43db      	mvns	r3, r3
 800d0a4:	401a      	ands	r2, r3
                    group_ptr -> tx_event_flags_group_current =
 800d0a6:	68fb      	ldr	r3, [r7, #12]
 800d0a8:	609a      	str	r2, [r3, #8]

                    /* Clear the delayed event flag clear value.  */
                    group_ptr -> tx_event_flags_group_delayed_clear =  ((ULONG) 0);
 800d0aa:	68fb      	ldr	r3, [r7, #12]
 800d0ac:	2200      	movs	r2, #0
 800d0ae:	621a      	str	r2, [r3, #32]
 800d0b0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800d0b4:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d0b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0b8:	f383 8810 	msr	PRIMASK, r3
}
 800d0bc:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Walk through the satisfied list, setup initial thread pointer. */
                thread_ptr =  satisfied_list;
 800d0be:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d0c2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
                while(thread_ptr != TX_NULL)
 800d0c6:	e01f      	b.n	800d108 <_tx_event_flags_set+0x3c8>
                {

                    /* Get next pointer first.  */
                    next_thread_ptr =  thread_ptr -> tx_thread_suspended_next;
 800d0c8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800d0cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d0ce:	66fb      	str	r3, [r7, #108]	; 0x6c
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800d0d0:	f3ef 8310 	mrs	r3, PRIMASK
 800d0d4:	623b      	str	r3, [r7, #32]
    return(posture);
 800d0d6:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800d0d8:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 800d0da:	b672      	cpsid	i
    return(int_posture);
 800d0dc:	69fb      	ldr	r3, [r7, #28]

                    /* Disable interrupts.  */
                    TX_DISABLE
 800d0de:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
                    /* Restore interrupts.  */
                    TX_RESTORE
#else

                    /* Disable preemption again.  */
                    _tx_thread_preempt_disable++;
 800d0e2:	4b13      	ldr	r3, [pc, #76]	; (800d130 <_tx_event_flags_set+0x3f0>)
 800d0e4:	681b      	ldr	r3, [r3, #0]
 800d0e6:	3301      	adds	r3, #1
 800d0e8:	4a11      	ldr	r2, [pc, #68]	; (800d130 <_tx_event_flags_set+0x3f0>)
 800d0ea:	6013      	str	r3, [r2, #0]
 800d0ec:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800d0f0:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d0f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0f4:	f383 8810 	msr	PRIMASK, r3
}
 800d0f8:	bf00      	nop

                    /* Restore interrupt posture.  */
                    TX_RESTORE

                    /* Resume the thread.  */
                    _tx_thread_system_resume(thread_ptr);
 800d0fa:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 800d0fe:	f000 fba7 	bl	800d850 <_tx_thread_system_resume>
#endif

                    /* Move next thread to current.  */
                    thread_ptr =  next_thread_ptr;
 800d102:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d104:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
                while(thread_ptr != TX_NULL)
 800d108:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800d10c:	2b00      	cmp	r3, #0
 800d10e:	d1db      	bne.n	800d0c8 <_tx_event_flags_set+0x388>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800d110:	f3ef 8310 	mrs	r3, PRIMASK
 800d114:	61bb      	str	r3, [r7, #24]
    return(posture);
 800d116:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800d118:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800d11a:	b672      	cpsid	i
    return(int_posture);
 800d11c:	697b      	ldr	r3, [r7, #20]
                }

                /* Disable interrupts.  */
                TX_DISABLE
 800d11e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

                /* Release thread preemption disable.  */
                _tx_thread_preempt_disable--;
 800d122:	4b03      	ldr	r3, [pc, #12]	; (800d130 <_tx_event_flags_set+0x3f0>)
 800d124:	681b      	ldr	r3, [r3, #0]
 800d126:	3b01      	subs	r3, #1
 800d128:	4a01      	ldr	r2, [pc, #4]	; (800d130 <_tx_event_flags_set+0x3f0>)
 800d12a:	6013      	str	r3, [r2, #0]
 800d12c:	e009      	b.n	800d142 <_tx_event_flags_set+0x402>
 800d12e:	bf00      	nop
 800d130:	20001e9c 	.word	0x20001e9c
        }
        else
        {

            /* Determine if we need to set the reset search field.  */
            if (group_ptr -> tx_event_flags_group_suspended_count != TX_NO_SUSPENSIONS)
 800d134:	68fb      	ldr	r3, [r7, #12]
 800d136:	695b      	ldr	r3, [r3, #20]
 800d138:	2b00      	cmp	r3, #0
 800d13a:	d002      	beq.n	800d142 <_tx_event_flags_set+0x402>
            {

                /* We interrupted a search of an event flag group suspension
                   list.  Make sure we reset the search.  */
                group_ptr -> tx_event_flags_group_reset_search =  TX_TRUE;
 800d13c:	68fb      	ldr	r3, [r7, #12]
 800d13e:	2201      	movs	r2, #1
 800d140:	60da      	str	r2, [r3, #12]
 800d142:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800d146:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d148:	693b      	ldr	r3, [r7, #16]
 800d14a:	f383 8810 	msr	PRIMASK, r3
}
 800d14e:	bf00      	nop
            (events_set_notify)(group_ptr);
        }
#endif

        /* Determine if a check for preemption is necessary.  */
        if (preempt_check == TX_TRUE)
 800d150:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d152:	2b01      	cmp	r3, #1
 800d154:	d101      	bne.n	800d15a <_tx_event_flags_set+0x41a>
        {

            /* Yes, one or more threads were resumed, check for preemption.  */
            _tx_thread_system_preempt_check();
 800d156:	f000 fb41 	bl	800d7dc <_tx_thread_system_preempt_check>
        }
    }

    /* Return completion status.  */
    return(TX_SUCCESS);
 800d15a:	2300      	movs	r3, #0
}
 800d15c:	4618      	mov	r0, r3
 800d15e:	3798      	adds	r7, #152	; 0x98
 800d160:	46bd      	mov	sp, r7
 800d162:	bd80      	pop	{r7, pc}

0800d164 <_tx_initialize_high_level>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID    _tx_initialize_high_level(VOID)
{
 800d164:	b580      	push	{r7, lr}
 800d166:	af00      	add	r7, sp, #0

    /* Initialize the event log, if enabled.  */
    TX_EL_INITIALIZE

    /* Call the thread control initialization function.  */
    _tx_thread_initialize();
 800d168:	f000 f960 	bl	800d42c <_tx_thread_initialize>

#ifndef TX_NO_TIMER

    /* Call the timer control initialization function.  */
    _tx_timer_initialize();
 800d16c:	f000 fe38 	bl	800dde0 <_tx_timer_initialize>
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Call the semaphore initialization function.  */
    _tx_semaphore_initialize();
 800d170:	4b12      	ldr	r3, [pc, #72]	; (800d1bc <_tx_initialize_high_level+0x58>)
 800d172:	2200      	movs	r2, #0
 800d174:	601a      	str	r2, [r3, #0]
 800d176:	4b12      	ldr	r3, [pc, #72]	; (800d1c0 <_tx_initialize_high_level+0x5c>)
 800d178:	2200      	movs	r2, #0
 800d17a:	601a      	str	r2, [r3, #0]

    /* Call the queue initialization function.  */
    _tx_queue_initialize();
 800d17c:	4b11      	ldr	r3, [pc, #68]	; (800d1c4 <_tx_initialize_high_level+0x60>)
 800d17e:	2200      	movs	r2, #0
 800d180:	601a      	str	r2, [r3, #0]
 800d182:	4b11      	ldr	r3, [pc, #68]	; (800d1c8 <_tx_initialize_high_level+0x64>)
 800d184:	2200      	movs	r2, #0
 800d186:	601a      	str	r2, [r3, #0]

    /* Call the event flag initialization function.  */
    _tx_event_flags_initialize();
 800d188:	4b10      	ldr	r3, [pc, #64]	; (800d1cc <_tx_initialize_high_level+0x68>)
 800d18a:	2200      	movs	r2, #0
 800d18c:	601a      	str	r2, [r3, #0]
 800d18e:	4b10      	ldr	r3, [pc, #64]	; (800d1d0 <_tx_initialize_high_level+0x6c>)
 800d190:	2200      	movs	r2, #0
 800d192:	601a      	str	r2, [r3, #0]

    /* Call the block pool initialization function.  */
    _tx_block_pool_initialize();
 800d194:	4b0f      	ldr	r3, [pc, #60]	; (800d1d4 <_tx_initialize_high_level+0x70>)
 800d196:	2200      	movs	r2, #0
 800d198:	601a      	str	r2, [r3, #0]
 800d19a:	4b0f      	ldr	r3, [pc, #60]	; (800d1d8 <_tx_initialize_high_level+0x74>)
 800d19c:	2200      	movs	r2, #0
 800d19e:	601a      	str	r2, [r3, #0]

    /* Call the byte pool initialization function.  */
    _tx_byte_pool_initialize();
 800d1a0:	4b0e      	ldr	r3, [pc, #56]	; (800d1dc <_tx_initialize_high_level+0x78>)
 800d1a2:	2200      	movs	r2, #0
 800d1a4:	601a      	str	r2, [r3, #0]
 800d1a6:	4b0e      	ldr	r3, [pc, #56]	; (800d1e0 <_tx_initialize_high_level+0x7c>)
 800d1a8:	2200      	movs	r2, #0
 800d1aa:	601a      	str	r2, [r3, #0]

    /* Call the mutex initialization function.  */
    _tx_mutex_initialize();
 800d1ac:	4b0d      	ldr	r3, [pc, #52]	; (800d1e4 <_tx_initialize_high_level+0x80>)
 800d1ae:	2200      	movs	r2, #0
 800d1b0:	601a      	str	r2, [r3, #0]
 800d1b2:	4b0d      	ldr	r3, [pc, #52]	; (800d1e8 <_tx_initialize_high_level+0x84>)
 800d1b4:	2200      	movs	r2, #0
 800d1b6:	601a      	str	r2, [r3, #0]
#endif
}
 800d1b8:	bf00      	nop
 800d1ba:	bd80      	pop	{r7, pc}
 800d1bc:	20001dcc 	.word	0x20001dcc
 800d1c0:	20001dd0 	.word	0x20001dd0
 800d1c4:	20001dd4 	.word	0x20001dd4
 800d1c8:	20001dd8 	.word	0x20001dd8
 800d1cc:	20001ddc 	.word	0x20001ddc
 800d1d0:	20001de0 	.word	0x20001de0
 800d1d4:	20001dec 	.word	0x20001dec
 800d1d8:	20001df0 	.word	0x20001df0
 800d1dc:	20001df4 	.word	0x20001df4
 800d1e0:	20001df8 	.word	0x20001df8
 800d1e4:	20001de4 	.word	0x20001de4
 800d1e8:	20001de8 	.word	0x20001de8

0800d1ec <_tx_initialize_kernel_enter>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_initialize_kernel_enter(VOID)
{
 800d1ec:	b580      	push	{r7, lr}
 800d1ee:	af00      	add	r7, sp, #0

    /* Determine if the compiler has pre-initialized ThreadX.  */
    if (_tx_thread_system_state != TX_INITIALIZE_ALMOST_DONE)
 800d1f0:	4b10      	ldr	r3, [pc, #64]	; (800d234 <_tx_initialize_kernel_enter+0x48>)
 800d1f2:	681b      	ldr	r3, [r3, #0]
 800d1f4:	f113 3f0f 	cmn.w	r3, #252645135	; 0xf0f0f0f
 800d1f8:	d00c      	beq.n	800d214 <_tx_initialize_kernel_enter+0x28>
        /* No, the initialization still needs to take place.  */

        /* Ensure that the system state variable is set to indicate
           initialization is in progress.  Note that this variable is
           later used to represent interrupt nesting.  */
        _tx_thread_system_state =  TX_INITIALIZE_IN_PROGRESS;
 800d1fa:	4b0e      	ldr	r3, [pc, #56]	; (800d234 <_tx_initialize_kernel_enter+0x48>)
 800d1fc:	f04f 32f0 	mov.w	r2, #4042322160	; 0xf0f0f0f0
 800d200:	601a      	str	r2, [r3, #0]
        /* Call any port specific preprocessing.  */
        TX_PORT_SPECIFIC_PRE_INITIALIZATION

        /* Invoke the low-level initialization to handle all processor specific
           initialization issues.  */
        _tx_initialize_low_level();
 800d202:	f7f3 f837 	bl	8000274 <_tx_initialize_low_level>

        /* Invoke the high-level initialization to exercise all of the
           ThreadX components and the application's initialization
           function.  */
        _tx_initialize_high_level();
 800d206:	f7ff ffad 	bl	800d164 <_tx_initialize_high_level>

        /* Call any port specific post-processing.  */
        TX_PORT_SPECIFIC_POST_INITIALIZATION
 800d20a:	4b0b      	ldr	r3, [pc, #44]	; (800d238 <_tx_initialize_kernel_enter+0x4c>)
 800d20c:	681b      	ldr	r3, [r3, #0]
 800d20e:	3301      	adds	r3, #1
 800d210:	4a09      	ldr	r2, [pc, #36]	; (800d238 <_tx_initialize_kernel_enter+0x4c>)
 800d212:	6013      	str	r3, [r2, #0]
    TX_INITIALIZE_KERNEL_ENTER_EXTENSION

    /* Ensure that the system state variable is set to indicate
       initialization is in progress.  Note that this variable is
       later used to represent interrupt nesting.  */
    _tx_thread_system_state =  TX_INITIALIZE_IN_PROGRESS;
 800d214:	4b07      	ldr	r3, [pc, #28]	; (800d234 <_tx_initialize_kernel_enter+0x48>)
 800d216:	f04f 32f0 	mov.w	r2, #4042322160	; 0xf0f0f0f0
 800d21a:	601a      	str	r2, [r3, #0]

    /* Call the application provided initialization function.  Pass the
       first available memory address to it.  */
    tx_application_define(_tx_initialize_unused_memory);
 800d21c:	4b07      	ldr	r3, [pc, #28]	; (800d23c <_tx_initialize_kernel_enter+0x50>)
 800d21e:	681b      	ldr	r3, [r3, #0]
 800d220:	4618      	mov	r0, r3
 800d222:	f7f3 fd63 	bl	8000cec <tx_application_define>

    /* Set the system state in preparation for entering the thread
       scheduler.  */
    _tx_thread_system_state =  TX_INITIALIZE_IS_FINISHED;
 800d226:	4b03      	ldr	r3, [pc, #12]	; (800d234 <_tx_initialize_kernel_enter+0x48>)
 800d228:	2200      	movs	r2, #0
 800d22a:	601a      	str	r2, [r3, #0]

    /* Call any port specific pre-scheduler processing.  */
    TX_PORT_SPECIFIC_PRE_SCHEDULER_INITIALIZATION

    /* Enter the scheduling loop to start executing threads!  */
    _tx_thread_schedule();
 800d22c:	f7f3 f85e 	bl	80002ec <_tx_thread_schedule>
#ifdef TX_SAFETY_CRITICAL

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif
}
 800d230:	bf00      	nop
 800d232:	bd80      	pop	{r7, pc}
 800d234:	20000010 	.word	0x20000010
 800d238:	20001e9c 	.word	0x20001e9c
 800d23c:	20001dfc 	.word	0x20001dfc

0800d240 <_tx_thread_create>:
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_create(TX_THREAD *thread_ptr, CHAR *name_ptr, VOID (*entry_function)(ULONG id), ULONG entry_input,
                            VOID *stack_start, ULONG stack_size, UINT priority, UINT preempt_threshold,
                            ULONG time_slice, UINT auto_start)
{
 800d240:	b580      	push	{r7, lr}
 800d242:	b092      	sub	sp, #72	; 0x48
 800d244:	af00      	add	r7, sp, #0
 800d246:	60f8      	str	r0, [r7, #12]
 800d248:	60b9      	str	r1, [r7, #8]
 800d24a:	607a      	str	r2, [r7, #4]
 800d24c:	603b      	str	r3, [r7, #0]
TX_INTERRUPT_SAVE_AREA

TX_THREAD               *next_thread;
TX_THREAD               *previous_thread;
TX_THREAD               *saved_thread_ptr;
UINT                    saved_threshold =  ((UINT) 0);
 800d24e:	2300      	movs	r3, #0
 800d250:	643b      	str	r3, [r7, #64]	; 0x40
#ifndef TX_DISABLE_STACK_FILLING

    /* Set the thread stack to a pattern prior to creating the initial
       stack frame.  This pattern is used by the stack checking routines
       to see how much has been used.  */
    TX_MEMSET(stack_start, ((UCHAR) TX_STACK_FILL), stack_size);
 800d252:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800d254:	21ef      	movs	r1, #239	; 0xef
 800d256:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800d258:	f001 fa88 	bl	800e76c <memset>

    /* Prepare the thread control block prior to placing it on the created
       list.  */

    /* Initialize thread control block to all zeros.  */
    TX_MEMSET(thread_ptr, 0, (sizeof(TX_THREAD)));
 800d25c:	22b0      	movs	r2, #176	; 0xb0
 800d25e:	2100      	movs	r1, #0
 800d260:	68f8      	ldr	r0, [r7, #12]
 800d262:	f001 fa83 	bl	800e76c <memset>

    /* Place the supplied parameters into the thread's control block.  */
    thread_ptr -> tx_thread_name =              name_ptr;
 800d266:	68fb      	ldr	r3, [r7, #12]
 800d268:	68ba      	ldr	r2, [r7, #8]
 800d26a:	629a      	str	r2, [r3, #40]	; 0x28
    thread_ptr -> tx_thread_entry =             entry_function;
 800d26c:	68fb      	ldr	r3, [r7, #12]
 800d26e:	687a      	ldr	r2, [r7, #4]
 800d270:	645a      	str	r2, [r3, #68]	; 0x44
    thread_ptr -> tx_thread_entry_parameter =   entry_input;
 800d272:	68fb      	ldr	r3, [r7, #12]
 800d274:	683a      	ldr	r2, [r7, #0]
 800d276:	649a      	str	r2, [r3, #72]	; 0x48
    thread_ptr -> tx_thread_stack_start =       stack_start;
 800d278:	68fb      	ldr	r3, [r7, #12]
 800d27a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d27c:	60da      	str	r2, [r3, #12]
    thread_ptr -> tx_thread_stack_size =        stack_size;
 800d27e:	68fb      	ldr	r3, [r7, #12]
 800d280:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800d282:	615a      	str	r2, [r3, #20]
    thread_ptr -> tx_thread_priority =          priority;
 800d284:	68fb      	ldr	r3, [r7, #12]
 800d286:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d288:	62da      	str	r2, [r3, #44]	; 0x2c
    thread_ptr -> tx_thread_user_priority =     priority;
 800d28a:	68fb      	ldr	r3, [r7, #12]
 800d28c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d28e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    thread_ptr -> tx_thread_time_slice =        time_slice;
 800d292:	68fb      	ldr	r3, [r7, #12]
 800d294:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800d296:	619a      	str	r2, [r3, #24]
    thread_ptr -> tx_thread_new_time_slice =    time_slice;
 800d298:	68fb      	ldr	r3, [r7, #12]
 800d29a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800d29c:	61da      	str	r2, [r3, #28]
    thread_ptr -> tx_thread_inherit_priority =  ((UINT) TX_MAX_PRIORITIES);
 800d29e:	68fb      	ldr	r3, [r7, #12]
 800d2a0:	2220      	movs	r2, #32
 800d2a2:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Calculate the end of the thread's stack area.  */
    temp_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(stack_start);
 800d2a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d2a8:	63fb      	str	r3, [r7, #60]	; 0x3c
    temp_ptr =  (TX_UCHAR_POINTER_ADD(temp_ptr, (stack_size - ((ULONG) 1))));
 800d2aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d2ac:	3b01      	subs	r3, #1
 800d2ae:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d2b0:	4413      	add	r3, r2
 800d2b2:	63fb      	str	r3, [r7, #60]	; 0x3c
    thread_ptr -> tx_thread_stack_end =         TX_UCHAR_TO_VOID_POINTER_CONVERT(temp_ptr);
 800d2b4:	68fb      	ldr	r3, [r7, #12]
 800d2b6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d2b8:	611a      	str	r2, [r3, #16]
    thread_ptr -> tx_thread_preempt_threshold =       preempt_threshold;
    thread_ptr -> tx_thread_user_preempt_threshold =  preempt_threshold;
#else

    /* Preemption-threshold is disabled, determine if preemption-threshold was required.  */
    if (priority != preempt_threshold)
 800d2ba:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d2bc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d2be:	429a      	cmp	r2, r3
 800d2c0:	d007      	beq.n	800d2d2 <_tx_thread_create+0x92>
    {

        /* Preemption-threshold specified. Since specific preemption-threshold is not supported,
           disable all preemption.  */
        thread_ptr -> tx_thread_preempt_threshold =       ((UINT) 0);
 800d2c2:	68fb      	ldr	r3, [r7, #12]
 800d2c4:	2200      	movs	r2, #0
 800d2c6:	63da      	str	r2, [r3, #60]	; 0x3c
        thread_ptr -> tx_thread_user_preempt_threshold =  ((UINT) 0);
 800d2c8:	68fb      	ldr	r3, [r7, #12]
 800d2ca:	2200      	movs	r2, #0
 800d2cc:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 800d2d0:	e006      	b.n	800d2e0 <_tx_thread_create+0xa0>
    }
    else
    {

        /* Preemption-threshold is not specified, just setup with the priority.  */
        thread_ptr -> tx_thread_preempt_threshold =       priority;
 800d2d2:	68fb      	ldr	r3, [r7, #12]
 800d2d4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d2d6:	63da      	str	r2, [r3, #60]	; 0x3c
        thread_ptr -> tx_thread_user_preempt_threshold =  priority;
 800d2d8:	68fb      	ldr	r3, [r7, #12]
 800d2da:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d2dc:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    }
#endif

    /* Now fill in the values that are required for thread initialization.  */
    thread_ptr -> tx_thread_state =  TX_SUSPENDED;
 800d2e0:	68fb      	ldr	r3, [r7, #12]
 800d2e2:	2203      	movs	r2, #3
 800d2e4:	631a      	str	r2, [r3, #48]	; 0x30

    /* Setup the necessary fields in the thread timer block.  */
    TX_THREAD_CREATE_TIMEOUT_SETUP(thread_ptr)
 800d2e6:	68fb      	ldr	r3, [r7, #12]
 800d2e8:	4a48      	ldr	r2, [pc, #288]	; (800d40c <_tx_thread_create+0x1cc>)
 800d2ea:	655a      	str	r2, [r3, #84]	; 0x54
 800d2ec:	68fa      	ldr	r2, [r7, #12]
 800d2ee:	68fb      	ldr	r3, [r7, #12]
 800d2f0:	659a      	str	r2, [r3, #88]	; 0x58
    TX_THREAD_CREATE_INTERNAL_EXTENSION(thread_ptr)

    /* Call the target specific stack frame building routine to build the
       thread's initial stack and to setup the actual stack pointer in the
       control block.  */
    _tx_thread_stack_build(thread_ptr, _tx_thread_shell_entry);
 800d2f2:	4947      	ldr	r1, [pc, #284]	; (800d410 <_tx_thread_create+0x1d0>)
 800d2f4:	68f8      	ldr	r0, [r7, #12]
 800d2f6:	f7f3 f85f 	bl	80003b8 <_tx_thread_stack_build>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800d2fa:	f3ef 8310 	mrs	r3, PRIMASK
 800d2fe:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 800d300:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 800d302:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 800d304:	b672      	cpsid	i
    return(int_posture);
 800d306:	6abb      	ldr	r3, [r7, #40]	; 0x28
    /* Setup the highest usage stack pointer.  */
    thread_ptr -> tx_thread_stack_highest_ptr =  thread_ptr -> tx_thread_stack_ptr;
#endif

    /* Prepare to make this thread a member of the created thread list.  */
    TX_DISABLE
 800d308:	63bb      	str	r3, [r7, #56]	; 0x38

    /* Load the thread ID field in the thread control block.  */
    thread_ptr -> tx_thread_id =  TX_THREAD_ID;
 800d30a:	68fb      	ldr	r3, [r7, #12]
 800d30c:	4a41      	ldr	r2, [pc, #260]	; (800d414 <_tx_thread_create+0x1d4>)
 800d30e:	601a      	str	r2, [r3, #0]

    /* Place the thread on the list of created threads.  First,
       check for an empty list.  */
    if (_tx_thread_created_count == TX_EMPTY)
 800d310:	4b41      	ldr	r3, [pc, #260]	; (800d418 <_tx_thread_create+0x1d8>)
 800d312:	681b      	ldr	r3, [r3, #0]
 800d314:	2b00      	cmp	r3, #0
 800d316:	d10b      	bne.n	800d330 <_tx_thread_create+0xf0>
    {

        /* The created thread list is empty.  Add thread to empty list.  */
        _tx_thread_created_ptr =                    thread_ptr;
 800d318:	4a40      	ldr	r2, [pc, #256]	; (800d41c <_tx_thread_create+0x1dc>)
 800d31a:	68fb      	ldr	r3, [r7, #12]
 800d31c:	6013      	str	r3, [r2, #0]
        thread_ptr -> tx_thread_created_next =      thread_ptr;
 800d31e:	68fb      	ldr	r3, [r7, #12]
 800d320:	68fa      	ldr	r2, [r7, #12]
 800d322:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        thread_ptr -> tx_thread_created_previous =  thread_ptr;
 800d326:	68fb      	ldr	r3, [r7, #12]
 800d328:	68fa      	ldr	r2, [r7, #12]
 800d32a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 800d32e:	e016      	b.n	800d35e <_tx_thread_create+0x11e>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_thread =  _tx_thread_created_ptr;
 800d330:	4b3a      	ldr	r3, [pc, #232]	; (800d41c <_tx_thread_create+0x1dc>)
 800d332:	681b      	ldr	r3, [r3, #0]
 800d334:	637b      	str	r3, [r7, #52]	; 0x34
        previous_thread =  next_thread -> tx_thread_created_previous;
 800d336:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d338:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d33c:	633b      	str	r3, [r7, #48]	; 0x30

        /* Place the new thread in the list.  */
        next_thread -> tx_thread_created_previous =  thread_ptr;
 800d33e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d340:	68fa      	ldr	r2, [r7, #12]
 800d342:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        previous_thread -> tx_thread_created_next =  thread_ptr;
 800d346:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d348:	68fa      	ldr	r2, [r7, #12]
 800d34a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Setup this thread's created links.  */
        thread_ptr -> tx_thread_created_previous =  previous_thread;
 800d34e:	68fb      	ldr	r3, [r7, #12]
 800d350:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d352:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        thread_ptr -> tx_thread_created_next =      next_thread;
 800d356:	68fb      	ldr	r3, [r7, #12]
 800d358:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d35a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* Increment the thread created count.  */
    _tx_thread_created_count++;
 800d35e:	4b2e      	ldr	r3, [pc, #184]	; (800d418 <_tx_thread_create+0x1d8>)
 800d360:	681b      	ldr	r3, [r3, #0]
 800d362:	3301      	adds	r3, #1
 800d364:	4a2c      	ldr	r2, [pc, #176]	; (800d418 <_tx_thread_create+0x1d8>)
 800d366:	6013      	str	r3, [r2, #0]
    TX_EL_THREAD_CREATE_INSERT

#ifndef TX_NOT_INTERRUPTABLE

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 800d368:	4b2d      	ldr	r3, [pc, #180]	; (800d420 <_tx_thread_create+0x1e0>)
 800d36a:	681b      	ldr	r3, [r3, #0]
 800d36c:	3301      	adds	r3, #1
 800d36e:	4a2c      	ldr	r2, [pc, #176]	; (800d420 <_tx_thread_create+0x1e0>)
 800d370:	6013      	str	r3, [r2, #0]
#endif

    /* Determine if an automatic start was requested.  If so, call the resume
       thread function and then check for a preemption condition.  */
    if (auto_start == TX_AUTO_START)
 800d372:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d374:	2b01      	cmp	r3, #1
 800d376:	d129      	bne.n	800d3cc <_tx_thread_create+0x18c>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800d378:	f3ef 8305 	mrs	r3, IPSR
 800d37c:	627b      	str	r3, [r7, #36]	; 0x24
    return(ipsr_value);
 800d37e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    {

        /* Determine if the create call is being called from initialization.  */
        if (TX_THREAD_GET_SYSTEM_STATE() >= TX_INITIALIZE_IN_PROGRESS)
 800d380:	4b28      	ldr	r3, [pc, #160]	; (800d424 <_tx_thread_create+0x1e4>)
 800d382:	681b      	ldr	r3, [r3, #0]
 800d384:	4313      	orrs	r3, r2
 800d386:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800d38a:	d30d      	bcc.n	800d3a8 <_tx_thread_create+0x168>

            /* Pickup the current thread execute pointer, which corresponds to the
               highest priority thread ready to execute.  Interrupt lockout is
               not required, since interrupts are assumed to be disabled during
               initialization.  */
            saved_thread_ptr =  _tx_thread_execute_ptr;
 800d38c:	4b26      	ldr	r3, [pc, #152]	; (800d428 <_tx_thread_create+0x1e8>)
 800d38e:	681b      	ldr	r3, [r3, #0]
 800d390:	647b      	str	r3, [r7, #68]	; 0x44

            /* Determine if there is thread ready for execution.  */
            if (saved_thread_ptr != TX_NULL)
 800d392:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d394:	2b00      	cmp	r3, #0
 800d396:	d009      	beq.n	800d3ac <_tx_thread_create+0x16c>
            {

                /* Yes, a thread is ready for execution when initialization completes.  */

                /* Save the current preemption-threshold.  */
                saved_threshold =  saved_thread_ptr -> tx_thread_preempt_threshold;
 800d398:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d39a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d39c:	643b      	str	r3, [r7, #64]	; 0x40

                /* For initialization, temporarily set the preemption-threshold to the
                   priority level to make sure the highest-priority thread runs once
                   initialization is complete.  */
                saved_thread_ptr -> tx_thread_preempt_threshold =  saved_thread_ptr -> tx_thread_priority;
 800d39e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d3a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d3a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d3a4:	63da      	str	r2, [r3, #60]	; 0x3c
 800d3a6:	e001      	b.n	800d3ac <_tx_thread_create+0x16c>
        }
        else
        {

            /* Simply set the saved thread pointer to NULL.  */
            saved_thread_ptr =  TX_NULL;
 800d3a8:	2300      	movs	r3, #0
 800d3aa:	647b      	str	r3, [r7, #68]	; 0x44
 800d3ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d3ae:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d3b0:	6a3b      	ldr	r3, [r7, #32]
 800d3b2:	f383 8810 	msr	PRIMASK, r3
}
 800d3b6:	bf00      	nop

        /* Perform any additional activities for tool or user purpose.  */
        TX_THREAD_CREATE_EXTENSION(thread_ptr)

        /* Call the resume thread function to make this thread ready.  */
        _tx_thread_system_resume(thread_ptr);
 800d3b8:	68f8      	ldr	r0, [r7, #12]
 800d3ba:	f000 fa49 	bl	800d850 <_tx_thread_system_resume>
#endif

        /* Determine if the thread's preemption-threshold needs to be restored.  */
        if (saved_thread_ptr != TX_NULL)
 800d3be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d3c0:	2b00      	cmp	r3, #0
 800d3c2:	d01e      	beq.n	800d402 <_tx_thread_create+0x1c2>
        {

            /* Yes, restore the previous highest-priority thread's preemption-threshold. This
               can only happen if this routine is called from initialization.  */
            saved_thread_ptr -> tx_thread_preempt_threshold =  saved_threshold;
 800d3c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d3c6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d3c8:	63da      	str	r2, [r3, #60]	; 0x3c
 800d3ca:	e01a      	b.n	800d402 <_tx_thread_create+0x1c2>
 800d3cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d3ce:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d3d0:	693b      	ldr	r3, [r7, #16]
 800d3d2:	f383 8810 	msr	PRIMASK, r3
}
 800d3d6:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800d3d8:	f3ef 8310 	mrs	r3, PRIMASK
 800d3dc:	61bb      	str	r3, [r7, #24]
    return(posture);
 800d3de:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800d3e0:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800d3e2:	b672      	cpsid	i
    return(int_posture);
 800d3e4:	697b      	ldr	r3, [r7, #20]

        /* Perform any additional activities for tool or user purpose.  */
        TX_THREAD_CREATE_EXTENSION(thread_ptr)

        /* Disable interrupts.  */
        TX_DISABLE
 800d3e6:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Re-enable preemption.  */
        _tx_thread_preempt_disable--;
 800d3e8:	4b0d      	ldr	r3, [pc, #52]	; (800d420 <_tx_thread_create+0x1e0>)
 800d3ea:	681b      	ldr	r3, [r3, #0]
 800d3ec:	3b01      	subs	r3, #1
 800d3ee:	4a0c      	ldr	r2, [pc, #48]	; (800d420 <_tx_thread_create+0x1e0>)
 800d3f0:	6013      	str	r3, [r2, #0]
 800d3f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d3f4:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d3f6:	69fb      	ldr	r3, [r7, #28]
 800d3f8:	f383 8810 	msr	PRIMASK, r3
}
 800d3fc:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 800d3fe:	f000 f9ed 	bl	800d7dc <_tx_thread_system_preempt_check>
#endif
    }

    /* Always return a success.  */
    return(TX_SUCCESS);
 800d402:	2300      	movs	r3, #0
}
 800d404:	4618      	mov	r0, r3
 800d406:	3748      	adds	r7, #72	; 0x48
 800d408:	46bd      	mov	sp, r7
 800d40a:	bd80      	pop	{r7, pc}
 800d40c:	0800dd25 	.word	0x0800dd25
 800d410:	0800d565 	.word	0x0800d565
 800d414:	54485244 	.word	0x54485244
 800d418:	20001e10 	.word	0x20001e10
 800d41c:	20001e0c 	.word	0x20001e0c
 800d420:	20001e9c 	.word	0x20001e9c
 800d424:	20000010 	.word	0x20000010
 800d428:	20001e08 	.word	0x20001e08

0800d42c <_tx_thread_initialize>:
/*                                            stack check error handling, */
/*                                            resulting in version 6.1.9  */   
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_initialize(VOID)
{
 800d42c:	b580      	push	{r7, lr}
 800d42e:	af00      	add	r7, sp, #0
       respectively.  */

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Set current thread pointer to NULL.  */
    TX_THREAD_SET_CURRENT(TX_NULL)
 800d430:	4b12      	ldr	r3, [pc, #72]	; (800d47c <_tx_thread_initialize+0x50>)
 800d432:	2200      	movs	r2, #0
 800d434:	601a      	str	r2, [r3, #0]

    /* Initialize the execute thread pointer to NULL.  */
    _tx_thread_execute_ptr =  TX_NULL;
 800d436:	4b12      	ldr	r3, [pc, #72]	; (800d480 <_tx_thread_initialize+0x54>)
 800d438:	2200      	movs	r2, #0
 800d43a:	601a      	str	r2, [r3, #0]
 800d43c:	4b11      	ldr	r3, [pc, #68]	; (800d484 <_tx_thread_initialize+0x58>)
 800d43e:	2200      	movs	r2, #0
 800d440:	601a      	str	r2, [r3, #0]
#endif
#endif

    /* Setup the highest priority variable to the max, indicating no thread is currently
       ready.  */
    _tx_thread_highest_priority =  ((UINT) TX_MAX_PRIORITIES);
 800d442:	4b11      	ldr	r3, [pc, #68]	; (800d488 <_tx_thread_initialize+0x5c>)
 800d444:	2220      	movs	r2, #32
 800d446:	601a      	str	r2, [r3, #0]


#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the array of priority head pointers.  */
    TX_MEMSET(&_tx_thread_priority_list[0], 0, (sizeof(_tx_thread_priority_list)));
 800d448:	2280      	movs	r2, #128	; 0x80
 800d44a:	2100      	movs	r1, #0
 800d44c:	480f      	ldr	r0, [pc, #60]	; (800d48c <_tx_thread_initialize+0x60>)
 800d44e:	f001 f98d 	bl	800e76c <memset>

    /* Initialize the head pointer of the created threads list and the
       number of threads created.  */
    _tx_thread_created_ptr =        TX_NULL;
 800d452:	4b0f      	ldr	r3, [pc, #60]	; (800d490 <_tx_thread_initialize+0x64>)
 800d454:	2200      	movs	r2, #0
 800d456:	601a      	str	r2, [r3, #0]
    _tx_thread_created_count =      TX_EMPTY;
 800d458:	4b0e      	ldr	r3, [pc, #56]	; (800d494 <_tx_thread_initialize+0x68>)
 800d45a:	2200      	movs	r2, #0
 800d45c:	601a      	str	r2, [r3, #0]

    /* Clear the global preempt disable variable.  */
    _tx_thread_preempt_disable =    ((UINT) 0);
 800d45e:	4b0e      	ldr	r3, [pc, #56]	; (800d498 <_tx_thread_initialize+0x6c>)
 800d460:	2200      	movs	r2, #0
 800d462:	601a      	str	r2, [r3, #0]

    /* Initialize the thread mutex release function pointer.  */
    _tx_thread_mutex_release =      TX_NULL;
 800d464:	4b0d      	ldr	r3, [pc, #52]	; (800d49c <_tx_thread_initialize+0x70>)
 800d466:	2200      	movs	r2, #0
 800d468:	601a      	str	r2, [r3, #0]
#endif
#ifdef TX_DISABLE_REDUNDANT_CLEARING
                            | (((ULONG) 1) << 18)
#endif
#ifdef TX_DISABLE_NOTIFY_CALLBACKS
                            | (((ULONG) 1) << 17)
 800d46a:	4b0d      	ldr	r3, [pc, #52]	; (800d4a0 <_tx_thread_initialize+0x74>)
 800d46c:	681b      	ldr	r3, [r3, #0]
 800d46e:	f043 7385 	orr.w	r3, r3, #17432576	; 0x10a0000
    _tx_build_options =  _tx_build_options 
 800d472:	4a0b      	ldr	r2, [pc, #44]	; (800d4a0 <_tx_thread_initialize+0x74>)
 800d474:	6013      	str	r3, [r2, #0]
#endif
#if TX_PORT_SPECIFIC_BUILD_OPTIONS != 0
                            | TX_PORT_SPECIFIC_BUILD_OPTIONS
#endif
                            ;
}
 800d476:	bf00      	nop
 800d478:	bd80      	pop	{r7, pc}
 800d47a:	bf00      	nop
 800d47c:	20001e04 	.word	0x20001e04
 800d480:	20001e08 	.word	0x20001e08
 800d484:	20001e14 	.word	0x20001e14
 800d488:	20001e18 	.word	0x20001e18
 800d48c:	20001e1c 	.word	0x20001e1c
 800d490:	20001e0c 	.word	0x20001e0c
 800d494:	20001e10 	.word	0x20001e10
 800d498:	20001e9c 	.word	0x20001e9c
 800d49c:	20001ea0 	.word	0x20001ea0
 800d4a0:	20001ea4 	.word	0x20001ea4

0800d4a4 <_tx_thread_resume>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_resume(TX_THREAD *thread_ptr)
{
 800d4a4:	b580      	push	{r7, lr}
 800d4a6:	b08c      	sub	sp, #48	; 0x30
 800d4a8:	af00      	add	r7, sp, #0
 800d4aa:	6078      	str	r0, [r7, #4]

TX_INTERRUPT_SAVE_AREA

UINT        status;
TX_THREAD   *saved_thread_ptr;
UINT        saved_threshold =  ((UINT) 0);
 800d4ac:	2300      	movs	r3, #0
 800d4ae:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800d4b0:	f3ef 8310 	mrs	r3, PRIMASK
 800d4b4:	61fb      	str	r3, [r7, #28]
    return(posture);
 800d4b6:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 800d4b8:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 800d4ba:	b672      	cpsid	i
    return(int_posture);
 800d4bc:	69bb      	ldr	r3, [r7, #24]
    TX_THREAD_STACK_CHECK(thread_ptr)
#endif
#endif

    /* Lockout interrupts while the thread is being resumed.  */
    TX_DISABLE
 800d4be:	623b      	str	r3, [r7, #32]
    /* Log this kernel call.  */
    TX_EL_THREAD_RESUME_INSERT

    /* Determine if the thread is suspended or in the process of suspending.
       If so, call the thread resume processing.  */
    if (thread_ptr -> tx_thread_state == TX_SUSPENDED)
 800d4c0:	687b      	ldr	r3, [r7, #4]
 800d4c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d4c4:	2b03      	cmp	r3, #3
 800d4c6:	d12f      	bne.n	800d528 <_tx_thread_resume+0x84>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800d4c8:	f3ef 8305 	mrs	r3, IPSR
 800d4cc:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800d4ce:	697a      	ldr	r2, [r7, #20]
    {

        /* Determine if the create call is being called from initialization.  */
        if (TX_THREAD_GET_SYSTEM_STATE() >= TX_INITIALIZE_IN_PROGRESS)
 800d4d0:	4b21      	ldr	r3, [pc, #132]	; (800d558 <_tx_thread_resume+0xb4>)
 800d4d2:	681b      	ldr	r3, [r3, #0]
 800d4d4:	4313      	orrs	r3, r2
 800d4d6:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800d4da:	d30d      	bcc.n	800d4f8 <_tx_thread_resume+0x54>

            /* Pickup the current thread execute pointer, which corresponds to the
               highest priority thread ready to execute.  Interrupt lockout is
               not required, since interrupts are assumed to be disabled during
               initialization.  */
            saved_thread_ptr =  _tx_thread_execute_ptr;
 800d4dc:	4b1f      	ldr	r3, [pc, #124]	; (800d55c <_tx_thread_resume+0xb8>)
 800d4de:	681b      	ldr	r3, [r3, #0]
 800d4e0:	62bb      	str	r3, [r7, #40]	; 0x28

            /* Determine if there is thread ready for execution.  */
            if (saved_thread_ptr != TX_NULL)
 800d4e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d4e4:	2b00      	cmp	r3, #0
 800d4e6:	d009      	beq.n	800d4fc <_tx_thread_resume+0x58>
            {

                /* Yes, a thread is ready for execution when initialization completes.  */

                /* Save the current preemption-threshold.  */
                saved_threshold =  saved_thread_ptr -> tx_thread_preempt_threshold;
 800d4e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d4ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d4ec:	627b      	str	r3, [r7, #36]	; 0x24

                /* For initialization, temporarily set the preemption-threshold to the
                   priority level to make sure the highest-priority thread runs once
                   initialization is complete.  */
                saved_thread_ptr -> tx_thread_preempt_threshold =  saved_thread_ptr -> tx_thread_priority;
 800d4ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d4f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d4f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d4f4:	63da      	str	r2, [r3, #60]	; 0x3c
 800d4f6:	e001      	b.n	800d4fc <_tx_thread_resume+0x58>
        }
        else
        {

            /* Simply set the saved thread pointer to NULL.  */
            saved_thread_ptr =  TX_NULL;
 800d4f8:	2300      	movs	r3, #0
 800d4fa:	62bb      	str	r3, [r7, #40]	; 0x28
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Temporarily disable preemption.  */
        _tx_thread_preempt_disable++;
 800d4fc:	4b18      	ldr	r3, [pc, #96]	; (800d560 <_tx_thread_resume+0xbc>)
 800d4fe:	681b      	ldr	r3, [r3, #0]
 800d500:	3301      	adds	r3, #1
 800d502:	4a17      	ldr	r2, [pc, #92]	; (800d560 <_tx_thread_resume+0xbc>)
 800d504:	6013      	str	r3, [r2, #0]
 800d506:	6a3b      	ldr	r3, [r7, #32]
 800d508:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d50a:	693b      	ldr	r3, [r7, #16]
 800d50c:	f383 8810 	msr	PRIMASK, r3
}
 800d510:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Call the actual resume service to resume the thread.  */
        _tx_thread_system_resume(thread_ptr);
 800d512:	6878      	ldr	r0, [r7, #4]
 800d514:	f000 f99c 	bl	800d850 <_tx_thread_system_resume>
#endif

        /* Determine if the thread's preemption-threshold needs to be restored.  */
        if (saved_thread_ptr != TX_NULL)
 800d518:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d51a:	2b00      	cmp	r3, #0
 800d51c:	d002      	beq.n	800d524 <_tx_thread_resume+0x80>
        {

            /* Yes, restore the previous highest-priority thread's preemption-threshold. This
               can only happen if this routine is called from initialization.  */
            saved_thread_ptr -> tx_thread_preempt_threshold =  saved_threshold;
 800d51e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d520:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d522:	63da      	str	r2, [r3, #60]	; 0x3c
        /* Setup successful return status.  */
        status =  TX_SUCCESS;
#else

        /* Return successful completion.  */
        return(TX_SUCCESS);
 800d524:	2300      	movs	r3, #0
 800d526:	e012      	b.n	800d54e <_tx_thread_resume+0xaa>

        /* Setup successful return status.  */
        status =  TX_SUCCESS;
#endif
    }
    else if (thread_ptr -> tx_thread_delayed_suspend == TX_TRUE)
 800d528:	687b      	ldr	r3, [r7, #4]
 800d52a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d52c:	2b01      	cmp	r3, #1
 800d52e:	d105      	bne.n	800d53c <_tx_thread_resume+0x98>
    {

        /* Clear the delayed suspension.  */
        thread_ptr -> tx_thread_delayed_suspend =  TX_FALSE;
 800d530:	687b      	ldr	r3, [r7, #4]
 800d532:	2200      	movs	r2, #0
 800d534:	635a      	str	r2, [r3, #52]	; 0x34

        /* Setup delayed suspend lifted return status.  */
        status =  TX_SUSPEND_LIFTED;
 800d536:	2319      	movs	r3, #25
 800d538:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d53a:	e001      	b.n	800d540 <_tx_thread_resume+0x9c>
    }
    else
    {

        /* Setup invalid resume return status.  */
        status =  TX_RESUME_ERROR;
 800d53c:	2312      	movs	r3, #18
 800d53e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d540:	6a3b      	ldr	r3, [r7, #32]
 800d542:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d544:	68fb      	ldr	r3, [r7, #12]
 800d546:	f383 8810 	msr	PRIMASK, r3
}
 800d54a:	bf00      	nop
        }
    }
#endif

    /* Return completion status. */
    return(status);
 800d54c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800d54e:	4618      	mov	r0, r3
 800d550:	3730      	adds	r7, #48	; 0x30
 800d552:	46bd      	mov	sp, r7
 800d554:	bd80      	pop	{r7, pc}
 800d556:	bf00      	nop
 800d558:	20000010 	.word	0x20000010
 800d55c:	20001e08 	.word	0x20001e08
 800d560:	20001e9c 	.word	0x20001e9c

0800d564 <_tx_thread_shell_entry>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_shell_entry(VOID)
{
 800d564:	b580      	push	{r7, lr}
 800d566:	b088      	sub	sp, #32
 800d568:	af00      	add	r7, sp, #0
VOID            (*entry_exit_notify)(TX_THREAD *notify_thread_ptr, UINT type);
#endif


    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 800d56a:	4b21      	ldr	r3, [pc, #132]	; (800d5f0 <_tx_thread_shell_entry+0x8c>)
 800d56c:	681b      	ldr	r3, [r3, #0]
 800d56e:	61fb      	str	r3, [r7, #28]
        (entry_exit_notify)(thread_ptr, TX_THREAD_ENTRY);
    }
#endif

    /* Call current thread's entry function.  */
    (thread_ptr -> tx_thread_entry) (thread_ptr -> tx_thread_entry_parameter);
 800d570:	69fb      	ldr	r3, [r7, #28]
 800d572:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d574:	69fa      	ldr	r2, [r7, #28]
 800d576:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800d578:	4610      	mov	r0, r2
 800d57a:	4798      	blx	r3

    /* Suspend thread with a "completed" state.  */

    /* Determine if the application is using mutexes.  */
    if (_tx_thread_mutex_release != TX_NULL)
 800d57c:	4b1d      	ldr	r3, [pc, #116]	; (800d5f4 <_tx_thread_shell_entry+0x90>)
 800d57e:	681b      	ldr	r3, [r3, #0]
 800d580:	2b00      	cmp	r3, #0
 800d582:	d003      	beq.n	800d58c <_tx_thread_shell_entry+0x28>
    {

        /* Yes, call the mutex release function via a function pointer that
           is setup during mutex initialization.  */
        (_tx_thread_mutex_release)(thread_ptr);
 800d584:	4b1b      	ldr	r3, [pc, #108]	; (800d5f4 <_tx_thread_shell_entry+0x90>)
 800d586:	681b      	ldr	r3, [r3, #0]
 800d588:	69f8      	ldr	r0, [r7, #28]
 800d58a:	4798      	blx	r3
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800d58c:	f3ef 8310 	mrs	r3, PRIMASK
 800d590:	607b      	str	r3, [r7, #4]
    return(posture);
 800d592:	687b      	ldr	r3, [r7, #4]
    int_posture = __get_interrupt_posture();
 800d594:	603b      	str	r3, [r7, #0]
    __asm__ volatile ("CPSID i" : : : "memory");
 800d596:	b672      	cpsid	i
    return(int_posture);
 800d598:	683b      	ldr	r3, [r7, #0]
    }

    /* Lockout interrupts while the thread state is setup.  */
    TX_DISABLE
 800d59a:	61bb      	str	r3, [r7, #24]
    entry_exit_notify =  thread_ptr -> tx_thread_entry_exit_notify;
#endif

    /* Set the status to suspending, in order to indicate the suspension
       is in progress.  */
    thread_ptr -> tx_thread_state =  TX_COMPLETED;
 800d59c:	69fb      	ldr	r3, [r7, #28]
 800d59e:	2201      	movs	r2, #1
 800d5a0:	631a      	str	r2, [r3, #48]	; 0x30
    /* Restore interrupts.  */
    TX_RESTORE
#else

    /* Set the suspending flag. */
    thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800d5a2:	69fb      	ldr	r3, [r7, #28]
 800d5a4:	2201      	movs	r2, #1
 800d5a6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Setup for no timeout period.  */
    thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 800d5a8:	69fb      	ldr	r3, [r7, #28]
 800d5aa:	2200      	movs	r2, #0
 800d5ac:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 800d5ae:	4b12      	ldr	r3, [pc, #72]	; (800d5f8 <_tx_thread_shell_entry+0x94>)
 800d5b0:	681b      	ldr	r3, [r3, #0]
 800d5b2:	3301      	adds	r3, #1
 800d5b4:	4a10      	ldr	r2, [pc, #64]	; (800d5f8 <_tx_thread_shell_entry+0x94>)
 800d5b6:	6013      	str	r3, [r2, #0]
 800d5b8:	69bb      	ldr	r3, [r7, #24]
 800d5ba:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d5bc:	68bb      	ldr	r3, [r7, #8]
 800d5be:	f383 8810 	msr	PRIMASK, r3
}
 800d5c2:	bf00      	nop
    __asm__ volatile (" MRS  %0,CONTROL ": "=r" (control_value) );
 800d5c4:	f3ef 8314 	mrs	r3, CONTROL
 800d5c8:	60fb      	str	r3, [r7, #12]
    return(control_value);
 800d5ca:	68fb      	ldr	r3, [r7, #12]

    /* Restore interrupts.  */
    TX_RESTORE

    /* Perform any additional activities for tool or user purpose.  */
    TX_THREAD_COMPLETED_EXTENSION(thread_ptr)
 800d5cc:	617b      	str	r3, [r7, #20]
 800d5ce:	697b      	ldr	r3, [r7, #20]
 800d5d0:	f023 0304 	bic.w	r3, r3, #4
 800d5d4:	617b      	str	r3, [r7, #20]
 800d5d6:	697b      	ldr	r3, [r7, #20]
 800d5d8:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" MSR  CONTROL,%0": : "r" (control_value): "memory" );
 800d5da:	693b      	ldr	r3, [r7, #16]
 800d5dc:	f383 8814 	msr	CONTROL, r3
}
 800d5e0:	bf00      	nop
        (entry_exit_notify)(thread_ptr, TX_THREAD_EXIT);
    }
#endif

    /* Call actual thread suspension routine.  */
    _tx_thread_system_suspend(thread_ptr);
 800d5e2:	69f8      	ldr	r0, [r7, #28]
 800d5e4:	f000 fa34 	bl	800da50 <_tx_thread_system_suspend>
#ifdef TX_SAFETY_CRITICAL

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif
}
 800d5e8:	bf00      	nop
 800d5ea:	3720      	adds	r7, #32
 800d5ec:	46bd      	mov	sp, r7
 800d5ee:	bd80      	pop	{r7, pc}
 800d5f0:	20001e04 	.word	0x20001e04
 800d5f4:	20001ea0 	.word	0x20001ea0
 800d5f8:	20001e9c 	.word	0x20001e9c

0800d5fc <_tx_thread_sleep>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_sleep(ULONG timer_ticks)
{
 800d5fc:	b580      	push	{r7, lr}
 800d5fe:	b08e      	sub	sp, #56	; 0x38
 800d600:	af00      	add	r7, sp, #0
 800d602:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800d604:	f3ef 8310 	mrs	r3, PRIMASK
 800d608:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 800d60a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    int_posture = __get_interrupt_posture();
 800d60c:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 800d60e:	b672      	cpsid	i
    return(int_posture);
 800d610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
UINT            status;
TX_THREAD       *thread_ptr;


    /* Lockout interrupts while the thread is being resumed.  */
    TX_DISABLE
 800d612:	633b      	str	r3, [r7, #48]	; 0x30

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 800d614:	4b35      	ldr	r3, [pc, #212]	; (800d6ec <_tx_thread_sleep+0xf0>)
 800d616:	681b      	ldr	r3, [r3, #0]
 800d618:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Determine if this is a legal request.  */

    /* Is there a current thread?  */
    if (thread_ptr == TX_NULL)
 800d61a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d61c:	2b00      	cmp	r3, #0
 800d61e:	d108      	bne.n	800d632 <_tx_thread_sleep+0x36>
 800d620:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d622:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d624:	6a3b      	ldr	r3, [r7, #32]
 800d626:	f383 8810 	msr	PRIMASK, r3
}
 800d62a:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Illegal caller of this service.  */
        status =  TX_CALLER_ERROR;
 800d62c:	2313      	movs	r3, #19
 800d62e:	637b      	str	r3, [r7, #52]	; 0x34
 800d630:	e056      	b.n	800d6e0 <_tx_thread_sleep+0xe4>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800d632:	f3ef 8305 	mrs	r3, IPSR
 800d636:	61fb      	str	r3, [r7, #28]
    return(ipsr_value);
 800d638:	69fa      	ldr	r2, [r7, #28]
    }

    /* Is the caller an ISR or Initialization?  */
    else if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800d63a:	4b2d      	ldr	r3, [pc, #180]	; (800d6f0 <_tx_thread_sleep+0xf4>)
 800d63c:	681b      	ldr	r3, [r3, #0]
 800d63e:	4313      	orrs	r3, r2
 800d640:	2b00      	cmp	r3, #0
 800d642:	d008      	beq.n	800d656 <_tx_thread_sleep+0x5a>
 800d644:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d646:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d648:	69bb      	ldr	r3, [r7, #24]
 800d64a:	f383 8810 	msr	PRIMASK, r3
}
 800d64e:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Illegal caller of this service.  */
        status =  TX_CALLER_ERROR;
 800d650:	2313      	movs	r3, #19
 800d652:	637b      	str	r3, [r7, #52]	; 0x34
 800d654:	e044      	b.n	800d6e0 <_tx_thread_sleep+0xe4>
    }

#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Is the caller the system timer thread?  */
    else if (thread_ptr == &_tx_timer_thread)
 800d656:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d658:	4a26      	ldr	r2, [pc, #152]	; (800d6f4 <_tx_thread_sleep+0xf8>)
 800d65a:	4293      	cmp	r3, r2
 800d65c:	d108      	bne.n	800d670 <_tx_thread_sleep+0x74>
 800d65e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d660:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d662:	697b      	ldr	r3, [r7, #20]
 800d664:	f383 8810 	msr	PRIMASK, r3
}
 800d668:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Illegal caller of this service.  */
        status =  TX_CALLER_ERROR;
 800d66a:	2313      	movs	r3, #19
 800d66c:	637b      	str	r3, [r7, #52]	; 0x34
 800d66e:	e037      	b.n	800d6e0 <_tx_thread_sleep+0xe4>
    }
#endif

    /* Determine if the requested number of ticks is zero.  */
    else if (timer_ticks == ((ULONG) 0))
 800d670:	687b      	ldr	r3, [r7, #4]
 800d672:	2b00      	cmp	r3, #0
 800d674:	d108      	bne.n	800d688 <_tx_thread_sleep+0x8c>
 800d676:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d678:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d67a:	693b      	ldr	r3, [r7, #16]
 800d67c:	f383 8810 	msr	PRIMASK, r3
}
 800d680:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Just return with a successful status.  */
        status =  TX_SUCCESS;
 800d682:	2300      	movs	r3, #0
 800d684:	637b      	str	r3, [r7, #52]	; 0x34
 800d686:	e02b      	b.n	800d6e0 <_tx_thread_sleep+0xe4>
    }
    else
    {

        /* Determine if the preempt disable flag is non-zero.  */
        if (_tx_thread_preempt_disable != ((UINT) 0))
 800d688:	4b1b      	ldr	r3, [pc, #108]	; (800d6f8 <_tx_thread_sleep+0xfc>)
 800d68a:	681b      	ldr	r3, [r3, #0]
 800d68c:	2b00      	cmp	r3, #0
 800d68e:	d008      	beq.n	800d6a2 <_tx_thread_sleep+0xa6>
 800d690:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d692:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d694:	68fb      	ldr	r3, [r7, #12]
 800d696:	f383 8810 	msr	PRIMASK, r3
}
 800d69a:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
            status =  TX_CALLER_ERROR;
 800d69c:	2313      	movs	r3, #19
 800d69e:	637b      	str	r3, [r7, #52]	; 0x34
 800d6a0:	e01e      	b.n	800d6e0 <_tx_thread_sleep+0xe4>
            TX_EL_THREAD_SLEEP_INSERT

            /* Suspend the current thread.  */

            /* Set the state to suspended.  */
            thread_ptr -> tx_thread_state =    TX_SLEEP;
 800d6a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6a4:	2204      	movs	r2, #4
 800d6a6:	631a      	str	r2, [r3, #48]	; 0x30
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Set the suspending flag. */
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800d6a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6aa:	2201      	movs	r2, #1
 800d6ac:	639a      	str	r2, [r3, #56]	; 0x38

            /* Initialize the status to successful.  */
            thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 800d6ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6b0:	2200      	movs	r2, #0
 800d6b2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

            /* Setup the timeout period.  */
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  timer_ticks;
 800d6b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6b8:	687a      	ldr	r2, [r7, #4]
 800d6ba:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 800d6bc:	4b0e      	ldr	r3, [pc, #56]	; (800d6f8 <_tx_thread_sleep+0xfc>)
 800d6be:	681b      	ldr	r3, [r3, #0]
 800d6c0:	3301      	adds	r3, #1
 800d6c2:	4a0d      	ldr	r2, [pc, #52]	; (800d6f8 <_tx_thread_sleep+0xfc>)
 800d6c4:	6013      	str	r3, [r2, #0]
 800d6c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d6c8:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d6ca:	68bb      	ldr	r3, [r7, #8]
 800d6cc:	f383 8810 	msr	PRIMASK, r3
}
 800d6d0:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Call actual thread suspension routine.  */
            _tx_thread_system_suspend(thread_ptr);
 800d6d2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d6d4:	f000 f9bc 	bl	800da50 <_tx_thread_system_suspend>
#endif

            /* Return status to the caller.  */
            status =  thread_ptr -> tx_thread_suspend_status;
 800d6d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6da:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d6de:	637b      	str	r3, [r7, #52]	; 0x34
        }
    }

    /* Return completion status.  */
    return(status);
 800d6e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800d6e2:	4618      	mov	r0, r3
 800d6e4:	3738      	adds	r7, #56	; 0x38
 800d6e6:	46bd      	mov	sp, r7
 800d6e8:	bd80      	pop	{r7, pc}
 800d6ea:	bf00      	nop
 800d6ec:	20001e04 	.word	0x20001e04
 800d6f0:	20000010 	.word	0x20000010
 800d6f4:	20001f4c 	.word	0x20001f4c
 800d6f8:	20001e9c 	.word	0x20001e9c

0800d6fc <_tx_thread_suspend>:
/*                                            a MISRA compliance issue,   */
/*                                            resulting in version 6.1.1  */
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_suspend(TX_THREAD *thread_ptr)
{
 800d6fc:	b580      	push	{r7, lr}
 800d6fe:	b08a      	sub	sp, #40	; 0x28
 800d700:	af00      	add	r7, sp, #0
 800d702:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800d704:	f3ef 8310 	mrs	r3, PRIMASK
 800d708:	61bb      	str	r3, [r7, #24]
    return(posture);
 800d70a:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800d70c:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800d70e:	b672      	cpsid	i
    return(int_posture);
 800d710:	697b      	ldr	r3, [r7, #20]


#ifndef TX_INLINE_THREAD_RESUME_SUSPEND

    /* Lockout interrupts while the thread is being suspended.  */
    TX_DISABLE
 800d712:	623b      	str	r3, [r7, #32]

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 800d714:	4b2e      	ldr	r3, [pc, #184]	; (800d7d0 <_tx_thread_suspend+0xd4>)
 800d716:	681b      	ldr	r3, [r3, #0]
 800d718:	61fb      	str	r3, [r7, #28]

    /* Log this kernel call.  */
    TX_EL_THREAD_SUSPEND_INSERT

    /* Check the specified thread's current status.  */
    if (thread_ptr -> tx_thread_state == TX_READY)
 800d71a:	687b      	ldr	r3, [r7, #4]
 800d71c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d71e:	2b00      	cmp	r3, #0
 800d720:	d130      	bne.n	800d784 <_tx_thread_suspend+0x88>
    {

        /* Initialize status to success.  */
        status =  TX_SUCCESS;
 800d722:	2300      	movs	r3, #0
 800d724:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800d726:	f3ef 8305 	mrs	r3, IPSR
 800d72a:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 800d72c:	693a      	ldr	r2, [r7, #16]

        /* Determine if we are in a thread context.  */
        if (TX_THREAD_GET_SYSTEM_STATE() == ((ULONG) 0))
 800d72e:	4b29      	ldr	r3, [pc, #164]	; (800d7d4 <_tx_thread_suspend+0xd8>)
 800d730:	681b      	ldr	r3, [r3, #0]
 800d732:	4313      	orrs	r3, r2
 800d734:	2b00      	cmp	r3, #0
 800d736:	d109      	bne.n	800d74c <_tx_thread_suspend+0x50>
        {

            /* Yes, we are in a thread context.  */

            /* Determine if the current thread is also the suspending thread.  */
            if (current_thread == thread_ptr)
 800d738:	69fa      	ldr	r2, [r7, #28]
 800d73a:	687b      	ldr	r3, [r7, #4]
 800d73c:	429a      	cmp	r2, r3
 800d73e:	d105      	bne.n	800d74c <_tx_thread_suspend+0x50>
            {

                /* Now determine if the preempt disable flag is non-zero.  */
                if (_tx_thread_preempt_disable != ((UINT) 0))
 800d740:	4b25      	ldr	r3, [pc, #148]	; (800d7d8 <_tx_thread_suspend+0xdc>)
 800d742:	681b      	ldr	r3, [r3, #0]
 800d744:	2b00      	cmp	r3, #0
 800d746:	d001      	beq.n	800d74c <_tx_thread_suspend+0x50>
                {

                    /* Current thread cannot suspend when the preempt disable flag is non-zero,
                       return an error.  */
                    status =  TX_SUSPEND_ERROR;
 800d748:	2314      	movs	r3, #20
 800d74a:	627b      	str	r3, [r7, #36]	; 0x24
                }
            }
        }

        /* Determine if the status is still successful.  */
        if (status == TX_SUCCESS)
 800d74c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d74e:	2b00      	cmp	r3, #0
 800d750:	d132      	bne.n	800d7b8 <_tx_thread_suspend+0xbc>
        {

            /* Set the state to suspended.  */
            thread_ptr -> tx_thread_state =    TX_SUSPENDED;
 800d752:	687b      	ldr	r3, [r7, #4]
 800d754:	2203      	movs	r2, #3
 800d756:	631a      	str	r2, [r3, #48]	; 0x30
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Set the suspending flag. */
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800d758:	687b      	ldr	r3, [r7, #4]
 800d75a:	2201      	movs	r2, #1
 800d75c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Setup for no timeout period.  */
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 800d75e:	687b      	ldr	r3, [r7, #4]
 800d760:	2200      	movs	r2, #0
 800d762:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 800d764:	4b1c      	ldr	r3, [pc, #112]	; (800d7d8 <_tx_thread_suspend+0xdc>)
 800d766:	681b      	ldr	r3, [r3, #0]
 800d768:	3301      	adds	r3, #1
 800d76a:	4a1b      	ldr	r2, [pc, #108]	; (800d7d8 <_tx_thread_suspend+0xdc>)
 800d76c:	6013      	str	r3, [r2, #0]
 800d76e:	6a3b      	ldr	r3, [r7, #32]
 800d770:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d772:	68fb      	ldr	r3, [r7, #12]
 800d774:	f383 8810 	msr	PRIMASK, r3
}
 800d778:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Call actual thread suspension routine.  */
            _tx_thread_system_suspend(thread_ptr);
 800d77a:	6878      	ldr	r0, [r7, #4]
 800d77c:	f000 f968 	bl	800da50 <_tx_thread_system_suspend>
            /* Return success.  */
            status =  TX_SUCCESS;
#else

            /* If MISRA is not enabled, return directly.  */
            return(TX_SUCCESS);
 800d780:	2300      	movs	r3, #0
 800d782:	e020      	b.n	800d7c6 <_tx_thread_suspend+0xca>
#endif
        }
    }
    else if (thread_ptr -> tx_thread_state == TX_TERMINATED)
 800d784:	687b      	ldr	r3, [r7, #4]
 800d786:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d788:	2b02      	cmp	r3, #2
 800d78a:	d102      	bne.n	800d792 <_tx_thread_suspend+0x96>
    {

        /* Thread is terminated.  */
        status =  TX_SUSPEND_ERROR;
 800d78c:	2314      	movs	r3, #20
 800d78e:	627b      	str	r3, [r7, #36]	; 0x24
 800d790:	e012      	b.n	800d7b8 <_tx_thread_suspend+0xbc>
    }
    else if (thread_ptr -> tx_thread_state == TX_COMPLETED)
 800d792:	687b      	ldr	r3, [r7, #4]
 800d794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d796:	2b01      	cmp	r3, #1
 800d798:	d102      	bne.n	800d7a0 <_tx_thread_suspend+0xa4>
    {

        /* Thread is completed.  */
        status =  TX_SUSPEND_ERROR;
 800d79a:	2314      	movs	r3, #20
 800d79c:	627b      	str	r3, [r7, #36]	; 0x24
 800d79e:	e00b      	b.n	800d7b8 <_tx_thread_suspend+0xbc>
    }
    else if (thread_ptr -> tx_thread_state == TX_SUSPENDED)
 800d7a0:	687b      	ldr	r3, [r7, #4]
 800d7a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d7a4:	2b03      	cmp	r3, #3
 800d7a6:	d102      	bne.n	800d7ae <_tx_thread_suspend+0xb2>
    {

        /* Already suspended, just set status to success.  */
        status =  TX_SUCCESS;
 800d7a8:	2300      	movs	r3, #0
 800d7aa:	627b      	str	r3, [r7, #36]	; 0x24
 800d7ac:	e004      	b.n	800d7b8 <_tx_thread_suspend+0xbc>
    }
    else
    {

        /* Just set the delayed suspension flag.  */
        thread_ptr -> tx_thread_delayed_suspend =  TX_TRUE;
 800d7ae:	687b      	ldr	r3, [r7, #4]
 800d7b0:	2201      	movs	r2, #1
 800d7b2:	635a      	str	r2, [r3, #52]	; 0x34

        /* Set status to success.  */
        status =  TX_SUCCESS;
 800d7b4:	2300      	movs	r3, #0
 800d7b6:	627b      	str	r3, [r7, #36]	; 0x24
 800d7b8:	6a3b      	ldr	r3, [r7, #32]
 800d7ba:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d7bc:	68bb      	ldr	r3, [r7, #8]
 800d7be:	f383 8810 	msr	PRIMASK, r3
}
 800d7c2:	bf00      	nop
    /* Restore interrupts.  */
    TX_RESTORE

    /* Always return success, since this function does not perform error
       checking.  */
    return(status);
 800d7c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    TX_RESTORE

    /* Return completion status.  */
    return(status);
#endif
}
 800d7c6:	4618      	mov	r0, r3
 800d7c8:	3728      	adds	r7, #40	; 0x28
 800d7ca:	46bd      	mov	sp, r7
 800d7cc:	bd80      	pop	{r7, pc}
 800d7ce:	bf00      	nop
 800d7d0:	20001e04 	.word	0x20001e04
 800d7d4:	20000010 	.word	0x20000010
 800d7d8:	20001e9c 	.word	0x20001e9c

0800d7dc <_tx_thread_system_preempt_check>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_preempt_check(VOID)
{
 800d7dc:	b480      	push	{r7}
 800d7de:	b089      	sub	sp, #36	; 0x24
 800d7e0:	af00      	add	r7, sp, #0
TX_THREAD       *current_thread;
TX_THREAD       *thread_ptr;


    /* Combine the system state and preempt disable flags into one for comparison.  */
    TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 800d7e2:	4b17      	ldr	r3, [pc, #92]	; (800d840 <_tx_thread_system_preempt_check+0x64>)
 800d7e4:	681b      	ldr	r3, [r3, #0]
 800d7e6:	61fb      	str	r3, [r7, #28]

    /* Determine if we are in a system state (ISR or Initialization) or internal preemption is disabled.  */
    if (combined_flags == ((ULONG) 0))
 800d7e8:	69fb      	ldr	r3, [r7, #28]
 800d7ea:	2b00      	cmp	r3, #0
 800d7ec:	d121      	bne.n	800d832 <_tx_thread_system_preempt_check+0x56>
    {

        /* No, at thread execution level so continue checking for preemption.  */

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(current_thread)
 800d7ee:	4b15      	ldr	r3, [pc, #84]	; (800d844 <_tx_thread_system_preempt_check+0x68>)
 800d7f0:	681b      	ldr	r3, [r3, #0]
 800d7f2:	61bb      	str	r3, [r7, #24]

        /* Pickup the next execute pointer.  */
        thread_ptr =  _tx_thread_execute_ptr;
 800d7f4:	4b14      	ldr	r3, [pc, #80]	; (800d848 <_tx_thread_system_preempt_check+0x6c>)
 800d7f6:	681b      	ldr	r3, [r3, #0]
 800d7f8:	617b      	str	r3, [r7, #20]

        /* Determine if preemption should take place.  */
        if (current_thread != thread_ptr)
 800d7fa:	69ba      	ldr	r2, [r7, #24]
 800d7fc:	697b      	ldr	r3, [r7, #20]
 800d7fe:	429a      	cmp	r2, r3
 800d800:	d017      	beq.n	800d832 <_tx_thread_system_preempt_check+0x56>
__attribute__( ( always_inline ) ) static inline void _tx_thread_system_return_inline(void)
{
UINT interrupt_save;

    /* Set PendSV to invoke ThreadX scheduler.  */
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 800d802:	4b12      	ldr	r3, [pc, #72]	; (800d84c <_tx_thread_system_preempt_check+0x70>)
 800d804:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d808:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800d80a:	f3ef 8305 	mrs	r3, IPSR
 800d80e:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 800d810:	693b      	ldr	r3, [r7, #16]
    if (_tx_ipsr_get() == 0)
 800d812:	2b00      	cmp	r3, #0
 800d814:	d10c      	bne.n	800d830 <_tx_thread_system_preempt_check+0x54>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800d816:	f3ef 8310 	mrs	r3, PRIMASK
 800d81a:	60fb      	str	r3, [r7, #12]
    return(posture);
 800d81c:	68fb      	ldr	r3, [r7, #12]
    {
        interrupt_save = __get_interrupt_posture();
 800d81e:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("CPSIE  i": : : "memory");
 800d820:	b662      	cpsie	i
}
 800d822:	bf00      	nop
 800d824:	68bb      	ldr	r3, [r7, #8]
 800d826:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d828:	687b      	ldr	r3, [r7, #4]
 800d82a:	f383 8810 	msr	PRIMASK, r3
}
 800d82e:	bf00      	nop
#else
        __enable_interrupts();
#endif
        __restore_interrupt(interrupt_save);
    }
}
 800d830:	bf00      	nop

            /* Return to the system so the higher priority thread can be scheduled.  */
            _tx_thread_system_return();
        }
    }
}
 800d832:	bf00      	nop
 800d834:	3724      	adds	r7, #36	; 0x24
 800d836:	46bd      	mov	sp, r7
 800d838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d83c:	4770      	bx	lr
 800d83e:	bf00      	nop
 800d840:	20001e9c 	.word	0x20001e9c
 800d844:	20001e04 	.word	0x20001e04
 800d848:	20001e08 	.word	0x20001e08
 800d84c:	e000ed04 	.word	0xe000ed04

0800d850 <_tx_thread_system_resume>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_resume(TX_THREAD *thread_ptr)
#ifndef TX_NOT_INTERRUPTABLE
{
 800d850:	b580      	push	{r7, lr}
 800d852:	b096      	sub	sp, #88	; 0x58
 800d854:	af00      	add	r7, sp, #0
 800d856:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800d858:	f3ef 8310 	mrs	r3, PRIMASK
 800d85c:	637b      	str	r3, [r7, #52]	; 0x34
    return(posture);
 800d85e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    int_posture = __get_interrupt_posture();
 800d860:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("CPSID i" : : : "memory");
 800d862:	b672      	cpsid	i
    return(int_posture);
 800d864:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    /* Check this thread's stack.  */
    TX_THREAD_STACK_CHECK(thread_ptr)
#endif

    /* Lockout interrupts while the thread is being resumed.  */
    TX_DISABLE
 800d866:	657b      	str	r3, [r7, #84]	; 0x54

#ifndef TX_NO_TIMER

    /* Deactivate the timeout timer if necessary.  */
    if (thread_ptr -> tx_thread_timer.tx_timer_internal_list_head != TX_NULL)
 800d868:	687b      	ldr	r3, [r7, #4]
 800d86a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d86c:	2b00      	cmp	r3, #0
 800d86e:	d005      	beq.n	800d87c <_tx_thread_system_resume+0x2c>
    {

        /* Deactivate the thread's timeout timer.  */
        _tx_timer_system_deactivate(&(thread_ptr -> tx_thread_timer));
 800d870:	687b      	ldr	r3, [r7, #4]
 800d872:	334c      	adds	r3, #76	; 0x4c
 800d874:	4618      	mov	r0, r3
 800d876:	f000 fb91 	bl	800df9c <_tx_timer_system_deactivate>
 800d87a:	e002      	b.n	800d882 <_tx_thread_system_resume+0x32>
    }
    else
    {

        /* Clear the remaining time to ensure timer doesn't get activated.  */
        thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 800d87c:	687b      	ldr	r3, [r7, #4]
 800d87e:	2200      	movs	r2, #0
 800d880:	64da      	str	r2, [r3, #76]	; 0x4c
        time_stamp =  entry_ptr -> tx_trace_buffer_entry_time_stamp;
    }
#endif

    /* Decrease the preempt disabled count.  */
    _tx_thread_preempt_disable--;
 800d882:	4b6c      	ldr	r3, [pc, #432]	; (800da34 <_tx_thread_system_resume+0x1e4>)
 800d884:	681b      	ldr	r3, [r3, #0]
 800d886:	3b01      	subs	r3, #1
 800d888:	4a6a      	ldr	r2, [pc, #424]	; (800da34 <_tx_thread_system_resume+0x1e4>)
 800d88a:	6013      	str	r3, [r2, #0]

    /* Determine if the thread is in the process of suspending.  If so, the thread
       control block is already on the linked list so nothing needs to be done.  */
    if (thread_ptr -> tx_thread_suspending == TX_FALSE)
 800d88c:	687b      	ldr	r3, [r7, #4]
 800d88e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d890:	2b00      	cmp	r3, #0
 800d892:	f040 8083 	bne.w	800d99c <_tx_thread_system_resume+0x14c>
    {

        /* Thread is not in the process of suspending. Now check to make sure the thread
           has not already been resumed.  */
        if (thread_ptr -> tx_thread_state != TX_READY)
 800d896:	687b      	ldr	r3, [r7, #4]
 800d898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d89a:	2b00      	cmp	r3, #0
 800d89c:	f000 8097 	beq.w	800d9ce <_tx_thread_system_resume+0x17e>
        {

            /* No, now check to see if the delayed suspension flag is set.  */
            if (thread_ptr -> tx_thread_delayed_suspend == TX_FALSE)
 800d8a0:	687b      	ldr	r3, [r7, #4]
 800d8a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d8a4:	2b00      	cmp	r3, #0
 800d8a6:	d172      	bne.n	800d98e <_tx_thread_system_resume+0x13e>
                /* Resume the thread!  */

                /* Make this thread ready.  */

                /* Change the state to ready.  */
                thread_ptr -> tx_thread_state =  TX_READY;
 800d8a8:	687b      	ldr	r3, [r7, #4]
 800d8aa:	2200      	movs	r2, #0
 800d8ac:	631a      	str	r2, [r3, #48]	; 0x30

                /* Pickup priority of thread.  */
                priority =  thread_ptr -> tx_thread_priority;
 800d8ae:	687b      	ldr	r3, [r7, #4]
 800d8b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d8b2:	653b      	str	r3, [r7, #80]	; 0x50
                thread_ptr -> tx_thread_performance_resume_count++;
#endif

                /* Determine if there are other threads at this priority that are
                   ready.  */
                head_ptr =  _tx_thread_priority_list[priority];
 800d8b4:	4a60      	ldr	r2, [pc, #384]	; (800da38 <_tx_thread_system_resume+0x1e8>)
 800d8b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d8b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d8bc:	64fb      	str	r3, [r7, #76]	; 0x4c
                if (head_ptr == TX_NULL)
 800d8be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d8c0:	2b00      	cmp	r3, #0
 800d8c2:	d154      	bne.n	800d96e <_tx_thread_system_resume+0x11e>
                {

                    /* First thread at this priority ready.  Add to the front of the list.  */
                    _tx_thread_priority_list[priority] =       thread_ptr;
 800d8c4:	495c      	ldr	r1, [pc, #368]	; (800da38 <_tx_thread_system_resume+0x1e8>)
 800d8c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d8c8:	687a      	ldr	r2, [r7, #4]
 800d8ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                    thread_ptr -> tx_thread_ready_next =       thread_ptr;
 800d8ce:	687b      	ldr	r3, [r7, #4]
 800d8d0:	687a      	ldr	r2, [r7, #4]
 800d8d2:	621a      	str	r2, [r3, #32]
                    thread_ptr -> tx_thread_ready_previous =   thread_ptr;
 800d8d4:	687b      	ldr	r3, [r7, #4]
 800d8d6:	687a      	ldr	r2, [r7, #4]
 800d8d8:	625a      	str	r2, [r3, #36]	; 0x24
                    TX_DIV32_BIT_SET(priority, priority_bit)
                    _tx_thread_priority_map_active =  _tx_thread_priority_map_active | priority_bit;
#endif

                    /* Or in the thread's priority bit.  */
                    TX_MOD32_BIT_SET(priority, priority_bit)
 800d8da:	2201      	movs	r2, #1
 800d8dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d8de:	fa02 f303 	lsl.w	r3, r2, r3
 800d8e2:	647b      	str	r3, [r7, #68]	; 0x44
                    _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] | priority_bit;
 800d8e4:	4b55      	ldr	r3, [pc, #340]	; (800da3c <_tx_thread_system_resume+0x1ec>)
 800d8e6:	681a      	ldr	r2, [r3, #0]
 800d8e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d8ea:	4313      	orrs	r3, r2
 800d8ec:	4a53      	ldr	r2, [pc, #332]	; (800da3c <_tx_thread_system_resume+0x1ec>)
 800d8ee:	6013      	str	r3, [r2, #0]

                    /* Determine if this newly ready thread is the highest priority.  */
                    if (priority < _tx_thread_highest_priority)
 800d8f0:	4b53      	ldr	r3, [pc, #332]	; (800da40 <_tx_thread_system_resume+0x1f0>)
 800d8f2:	681b      	ldr	r3, [r3, #0]
 800d8f4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d8f6:	429a      	cmp	r2, r3
 800d8f8:	d269      	bcs.n	800d9ce <_tx_thread_system_resume+0x17e>
                    {

                        /* A new highest priority thread is present. */

                        /* Update the highest priority variable.  */
                        _tx_thread_highest_priority =  priority;
 800d8fa:	4a51      	ldr	r2, [pc, #324]	; (800da40 <_tx_thread_system_resume+0x1f0>)
 800d8fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d8fe:	6013      	str	r3, [r2, #0]

                        /* Pickup the execute pointer. Since it is going to be referenced multiple
                           times, it is placed in a local variable.  */
                        execute_ptr =  _tx_thread_execute_ptr;
 800d900:	4b50      	ldr	r3, [pc, #320]	; (800da44 <_tx_thread_system_resume+0x1f4>)
 800d902:	681b      	ldr	r3, [r3, #0]
 800d904:	643b      	str	r3, [r7, #64]	; 0x40

                        /* Determine if no thread is currently executing.  */
                        if (execute_ptr == TX_NULL)
 800d906:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d908:	2b00      	cmp	r3, #0
 800d90a:	d103      	bne.n	800d914 <_tx_thread_system_resume+0xc4>
                        {

                            /* Simply setup the execute pointer.  */
                            _tx_thread_execute_ptr =  thread_ptr;
 800d90c:	4a4d      	ldr	r2, [pc, #308]	; (800da44 <_tx_thread_system_resume+0x1f4>)
 800d90e:	687b      	ldr	r3, [r7, #4]
 800d910:	6013      	str	r3, [r2, #0]
 800d912:	e05c      	b.n	800d9ce <_tx_thread_system_resume+0x17e>
                        {

                            /* Another thread has been scheduled for execution.  */

                            /* Check to see if this is a higher priority thread and determine if preemption is allowed.  */
                            if (priority < execute_ptr -> tx_thread_preempt_threshold)
 800d914:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d916:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d918:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d91a:	429a      	cmp	r2, r3
 800d91c:	d257      	bcs.n	800d9ce <_tx_thread_system_resume+0x17e>
                                execute_ptr -> tx_thread_performance_last_preempting_thread =  thread_ptr;

#endif

                                /* Yes, modify the execute thread pointer.  */
                                _tx_thread_execute_ptr =  thread_ptr;
 800d91e:	4a49      	ldr	r2, [pc, #292]	; (800da44 <_tx_thread_system_resume+0x1f4>)
 800d920:	687b      	ldr	r3, [r7, #4]
 800d922:	6013      	str	r3, [r2, #0]
 800d924:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d926:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d928:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d92a:	f383 8810 	msr	PRIMASK, r3
}
 800d92e:	bf00      	nop
                                TX_THREAD_STACK_CHECK(thread_ptr)
#endif

                                /* Now determine if preemption should take place. This is only possible if the current thread pointer is
                                   not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
                                TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 800d930:	4b40      	ldr	r3, [pc, #256]	; (800da34 <_tx_thread_system_resume+0x1e4>)
 800d932:	681b      	ldr	r3, [r3, #0]
 800d934:	63fb      	str	r3, [r7, #60]	; 0x3c
                                if (combined_flags == ((ULONG) 0))
 800d936:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d938:	2b00      	cmp	r3, #0
 800d93a:	d174      	bne.n	800da26 <_tx_thread_system_resume+0x1d6>
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 800d93c:	4b42      	ldr	r3, [pc, #264]	; (800da48 <_tx_thread_system_resume+0x1f8>)
 800d93e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d942:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800d944:	f3ef 8305 	mrs	r3, IPSR
 800d948:	62bb      	str	r3, [r7, #40]	; 0x28
    return(ipsr_value);
 800d94a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    if (_tx_ipsr_get() == 0)
 800d94c:	2b00      	cmp	r3, #0
 800d94e:	d10c      	bne.n	800d96a <_tx_thread_system_resume+0x11a>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800d950:	f3ef 8310 	mrs	r3, PRIMASK
 800d954:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 800d956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
        interrupt_save = __get_interrupt_posture();
 800d958:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSIE  i": : : "memory");
 800d95a:	b662      	cpsie	i
}
 800d95c:	bf00      	nop
 800d95e:	6a3b      	ldr	r3, [r7, #32]
 800d960:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d962:	69fb      	ldr	r3, [r7, #28]
 800d964:	f383 8810 	msr	PRIMASK, r3
}
 800d968:	bf00      	nop
}
 800d96a:	bf00      	nop
                                    /* Preemption is needed - return to the system!  */
                                    _tx_thread_system_return();
                                }

                                /* Return in-line when MISRA is not enabled.  */
                                return;
 800d96c:	e05b      	b.n	800da26 <_tx_thread_system_resume+0x1d6>
                {

                    /* No, there are other threads at this priority already ready.  */

                    /* Just add this thread to the priority list.  */
                    tail_ptr =                                 head_ptr -> tx_thread_ready_previous;
 800d96e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d970:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d972:	64bb      	str	r3, [r7, #72]	; 0x48
                    tail_ptr -> tx_thread_ready_next =         thread_ptr;
 800d974:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d976:	687a      	ldr	r2, [r7, #4]
 800d978:	621a      	str	r2, [r3, #32]
                    head_ptr -> tx_thread_ready_previous =     thread_ptr;
 800d97a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d97c:	687a      	ldr	r2, [r7, #4]
 800d97e:	625a      	str	r2, [r3, #36]	; 0x24
                    thread_ptr -> tx_thread_ready_previous =   tail_ptr;
 800d980:	687b      	ldr	r3, [r7, #4]
 800d982:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d984:	625a      	str	r2, [r3, #36]	; 0x24
                    thread_ptr -> tx_thread_ready_next =       head_ptr;
 800d986:	687b      	ldr	r3, [r7, #4]
 800d988:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800d98a:	621a      	str	r2, [r3, #32]
 800d98c:	e01f      	b.n	800d9ce <_tx_thread_system_resume+0x17e>
            /* Else, delayed suspend flag was set.  */
            else
            {

                /* Clear the delayed suspend flag and change the state.  */
                thread_ptr -> tx_thread_delayed_suspend =  TX_FALSE;
 800d98e:	687b      	ldr	r3, [r7, #4]
 800d990:	2200      	movs	r2, #0
 800d992:	635a      	str	r2, [r3, #52]	; 0x34
                thread_ptr -> tx_thread_state =            TX_SUSPENDED;
 800d994:	687b      	ldr	r3, [r7, #4]
 800d996:	2203      	movs	r2, #3
 800d998:	631a      	str	r2, [r3, #48]	; 0x30
 800d99a:	e018      	b.n	800d9ce <_tx_thread_system_resume+0x17e>
        /* A resumption occurred in the middle of a previous thread suspension.  */

        /* Make sure the type of suspension under way is not a terminate or
           thread completion.  In either of these cases, do not void the
           interrupted suspension processing.  */
        if (thread_ptr -> tx_thread_state != TX_COMPLETED)
 800d99c:	687b      	ldr	r3, [r7, #4]
 800d99e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d9a0:	2b01      	cmp	r3, #1
 800d9a2:	d014      	beq.n	800d9ce <_tx_thread_system_resume+0x17e>
        {

            /* Make sure the thread isn't terminated.  */
            if (thread_ptr -> tx_thread_state != TX_TERMINATED)
 800d9a4:	687b      	ldr	r3, [r7, #4]
 800d9a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d9a8:	2b02      	cmp	r3, #2
 800d9aa:	d010      	beq.n	800d9ce <_tx_thread_system_resume+0x17e>
            {

                /* No, now check to see if the delayed suspension flag is set.  */
                if (thread_ptr -> tx_thread_delayed_suspend == TX_FALSE)
 800d9ac:	687b      	ldr	r3, [r7, #4]
 800d9ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d9b0:	2b00      	cmp	r3, #0
 800d9b2:	d106      	bne.n	800d9c2 <_tx_thread_system_resume+0x172>
                {

                    /* Clear the suspending flag.  */
                    thread_ptr -> tx_thread_suspending =   TX_FALSE;
 800d9b4:	687b      	ldr	r3, [r7, #4]
 800d9b6:	2200      	movs	r2, #0
 800d9b8:	639a      	str	r2, [r3, #56]	; 0x38

                    /* Restore the state to ready.  */
                    thread_ptr -> tx_thread_state =        TX_READY;
 800d9ba:	687b      	ldr	r3, [r7, #4]
 800d9bc:	2200      	movs	r2, #0
 800d9be:	631a      	str	r2, [r3, #48]	; 0x30
 800d9c0:	e005      	b.n	800d9ce <_tx_thread_system_resume+0x17e>
                }
                else
                {

                    /* Clear the delayed suspend flag and change the state.  */
                    thread_ptr -> tx_thread_delayed_suspend =  TX_FALSE;
 800d9c2:	687b      	ldr	r3, [r7, #4]
 800d9c4:	2200      	movs	r2, #0
 800d9c6:	635a      	str	r2, [r3, #52]	; 0x34
                    thread_ptr -> tx_thread_state =            TX_SUSPENDED;
 800d9c8:	687b      	ldr	r3, [r7, #4]
 800d9ca:	2203      	movs	r2, #3
 800d9cc:	631a      	str	r2, [r3, #48]	; 0x30
        }
    }
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 800d9ce:	4b1f      	ldr	r3, [pc, #124]	; (800da4c <_tx_thread_system_resume+0x1fc>)
 800d9d0:	681b      	ldr	r3, [r3, #0]
 800d9d2:	63bb      	str	r3, [r7, #56]	; 0x38
 800d9d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d9d6:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d9d8:	69bb      	ldr	r3, [r7, #24]
 800d9da:	f383 8810 	msr	PRIMASK, r3
}
 800d9de:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Determine if a preemption condition is present.  */
    if (current_thread != _tx_thread_execute_ptr)
 800d9e0:	4b18      	ldr	r3, [pc, #96]	; (800da44 <_tx_thread_system_resume+0x1f4>)
 800d9e2:	681b      	ldr	r3, [r3, #0]
 800d9e4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d9e6:	429a      	cmp	r2, r3
 800d9e8:	d020      	beq.n	800da2c <_tx_thread_system_resume+0x1dc>
        TX_THREAD_STACK_CHECK(thread_ptr)
#endif

        /* Now determine if preemption should take place. This is only possible if the current thread pointer is
           not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
        TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 800d9ea:	4b12      	ldr	r3, [pc, #72]	; (800da34 <_tx_thread_system_resume+0x1e4>)
 800d9ec:	681b      	ldr	r3, [r3, #0]
 800d9ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        if (combined_flags == ((ULONG) 0))
 800d9f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d9f2:	2b00      	cmp	r3, #0
 800d9f4:	d11a      	bne.n	800da2c <_tx_thread_system_resume+0x1dc>
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 800d9f6:	4b14      	ldr	r3, [pc, #80]	; (800da48 <_tx_thread_system_resume+0x1f8>)
 800d9f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d9fc:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800d9fe:	f3ef 8305 	mrs	r3, IPSR
 800da02:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800da04:	697b      	ldr	r3, [r7, #20]
    if (_tx_ipsr_get() == 0)
 800da06:	2b00      	cmp	r3, #0
 800da08:	d10f      	bne.n	800da2a <_tx_thread_system_resume+0x1da>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800da0a:	f3ef 8310 	mrs	r3, PRIMASK
 800da0e:	613b      	str	r3, [r7, #16]
    return(posture);
 800da10:	693b      	ldr	r3, [r7, #16]
        interrupt_save = __get_interrupt_posture();
 800da12:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("CPSIE  i": : : "memory");
 800da14:	b662      	cpsie	i
}
 800da16:	bf00      	nop
 800da18:	68fb      	ldr	r3, [r7, #12]
 800da1a:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800da1c:	68bb      	ldr	r3, [r7, #8]
 800da1e:	f383 8810 	msr	PRIMASK, r3
}
 800da22:	bf00      	nop
}
 800da24:	e001      	b.n	800da2a <_tx_thread_system_resume+0x1da>
                                return;
 800da26:	bf00      	nop
 800da28:	e000      	b.n	800da2c <_tx_thread_system_resume+0x1dc>
 800da2a:	bf00      	nop

            /* Preemption is needed - return to the system!  */
            _tx_thread_system_return();
        }
    }
}
 800da2c:	3758      	adds	r7, #88	; 0x58
 800da2e:	46bd      	mov	sp, r7
 800da30:	bd80      	pop	{r7, pc}
 800da32:	bf00      	nop
 800da34:	20001e9c 	.word	0x20001e9c
 800da38:	20001e1c 	.word	0x20001e1c
 800da3c:	20001e14 	.word	0x20001e14
 800da40:	20001e18 	.word	0x20001e18
 800da44:	20001e08 	.word	0x20001e08
 800da48:	e000ed04 	.word	0xe000ed04
 800da4c:	20001e04 	.word	0x20001e04

0800da50 <_tx_thread_system_suspend>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_suspend(TX_THREAD *thread_ptr)
#ifndef TX_NOT_INTERRUPTABLE
{
 800da50:	b580      	push	{r7, lr}
 800da52:	b09e      	sub	sp, #120	; 0x78
 800da54:	af00      	add	r7, sp, #0
 800da56:	6078      	str	r0, [r7, #4]
TX_TRACE_BUFFER_ENTRY       *entry_ptr;
ULONG                       time_stamp =  ((ULONG) 0);
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 800da58:	4b81      	ldr	r3, [pc, #516]	; (800dc60 <_tx_thread_system_suspend+0x210>)
 800da5a:	681b      	ldr	r3, [r3, #0]
 800da5c:	677b      	str	r3, [r7, #116]	; 0x74
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800da5e:	f3ef 8310 	mrs	r3, PRIMASK
 800da62:	64fb      	str	r3, [r7, #76]	; 0x4c
    return(posture);
 800da64:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    int_posture = __get_interrupt_posture();
 800da66:	64bb      	str	r3, [r7, #72]	; 0x48
    __asm__ volatile ("CPSID i" : : : "memory");
 800da68:	b672      	cpsid	i
    return(int_posture);
 800da6a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    /* Check this thread's stack.  */
    TX_THREAD_STACK_CHECK(thread_ptr)
#endif

    /* Lockout interrupts while the thread is being suspended.  */
    TX_DISABLE
 800da6c:	673b      	str	r3, [r7, #112]	; 0x70

#ifndef TX_NO_TIMER

    /* Is the current thread suspending?  */
    if (thread_ptr == current_thread)
 800da6e:	687a      	ldr	r2, [r7, #4]
 800da70:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800da72:	429a      	cmp	r2, r3
 800da74:	d112      	bne.n	800da9c <_tx_thread_system_suspend+0x4c>
    {

        /* Pickup the wait option.  */
        timeout =  thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks;
 800da76:	687b      	ldr	r3, [r7, #4]
 800da78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800da7a:	66fb      	str	r3, [r7, #108]	; 0x6c

        /* Determine if an activation is needed.  */
        if (timeout != TX_NO_WAIT)
 800da7c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800da7e:	2b00      	cmp	r3, #0
 800da80:	d008      	beq.n	800da94 <_tx_thread_system_suspend+0x44>
        {

            /* Make sure the suspension is not a wait-forever.  */
            if (timeout != TX_WAIT_FOREVER)
 800da82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800da84:	f1b3 3fff 	cmp.w	r3, #4294967295
 800da88:	d004      	beq.n	800da94 <_tx_thread_system_suspend+0x44>
            {

                /* Activate the thread timer with the timeout value setup in the caller.  */
                _tx_timer_system_activate(&(thread_ptr -> tx_thread_timer));
 800da8a:	687b      	ldr	r3, [r7, #4]
 800da8c:	334c      	adds	r3, #76	; 0x4c
 800da8e:	4618      	mov	r0, r3
 800da90:	f000 fa22 	bl	800ded8 <_tx_timer_system_activate>
            }
        }

        /* Yes, reset time slice for current thread.  */
        _tx_timer_time_slice =  thread_ptr -> tx_thread_new_time_slice;
 800da94:	687b      	ldr	r3, [r7, #4]
 800da96:	69db      	ldr	r3, [r3, #28]
 800da98:	4a72      	ldr	r2, [pc, #456]	; (800dc64 <_tx_thread_system_suspend+0x214>)
 800da9a:	6013      	str	r3, [r2, #0]
    }
#endif

    /* Decrease the preempt disabled count.  */
    _tx_thread_preempt_disable--;
 800da9c:	4b72      	ldr	r3, [pc, #456]	; (800dc68 <_tx_thread_system_suspend+0x218>)
 800da9e:	681b      	ldr	r3, [r3, #0]
 800daa0:	3b01      	subs	r3, #1
 800daa2:	4a71      	ldr	r2, [pc, #452]	; (800dc68 <_tx_thread_system_suspend+0x218>)
 800daa4:	6013      	str	r3, [r2, #0]
    _tx_thread_performance_suspend_count++;
#endif

    /* Check to make sure the thread suspending flag is still set.  If not, it
       has already been resumed.  */
    if (thread_ptr -> tx_thread_suspending == TX_TRUE)
 800daa6:	687b      	ldr	r3, [r7, #4]
 800daa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800daaa:	2b01      	cmp	r3, #1
 800daac:	f040 80a6 	bne.w	800dbfc <_tx_thread_system_suspend+0x1ac>
            time_stamp =  entry_ptr -> tx_trace_buffer_entry_time_stamp;
        }
#endif

        /* Actually suspend this thread.  But first, clear the suspending flag.  */
        thread_ptr -> tx_thread_suspending =  TX_FALSE;
 800dab0:	687b      	ldr	r3, [r7, #4]
 800dab2:	2200      	movs	r2, #0
 800dab4:	639a      	str	r2, [r3, #56]	; 0x38

        /* Pickup priority of thread.  */
        priority =  thread_ptr -> tx_thread_priority;
 800dab6:	687b      	ldr	r3, [r7, #4]
 800dab8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800daba:	66bb      	str	r3, [r7, #104]	; 0x68

        /* Pickup the next ready thread pointer.  */
        ready_next =      thread_ptr -> tx_thread_ready_next;
 800dabc:	687b      	ldr	r3, [r7, #4]
 800dabe:	6a1b      	ldr	r3, [r3, #32]
 800dac0:	667b      	str	r3, [r7, #100]	; 0x64

        /* Determine if there are other threads at this priority that are
           ready.  */
        if (ready_next != thread_ptr)
 800dac2:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800dac4:	687b      	ldr	r3, [r7, #4]
 800dac6:	429a      	cmp	r2, r3
 800dac8:	d015      	beq.n	800daf6 <_tx_thread_system_suspend+0xa6>
        {

            /* Yes, there are other threads at this priority ready.  */

            /* Pickup the previous ready thread pointer.  */
            ready_previous =  thread_ptr -> tx_thread_ready_previous;
 800daca:	687b      	ldr	r3, [r7, #4]
 800dacc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dace:	653b      	str	r3, [r7, #80]	; 0x50

            /* Just remove this thread from the priority list.  */
            ready_next -> tx_thread_ready_previous =    ready_previous;
 800dad0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800dad2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800dad4:	625a      	str	r2, [r3, #36]	; 0x24
            ready_previous -> tx_thread_ready_next =    ready_next;
 800dad6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dad8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800dada:	621a      	str	r2, [r3, #32]

            /* Determine if this is the head of the priority list.  */
            if (_tx_thread_priority_list[priority] == thread_ptr)
 800dadc:	4a63      	ldr	r2, [pc, #396]	; (800dc6c <_tx_thread_system_suspend+0x21c>)
 800dade:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800dae0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800dae4:	687a      	ldr	r2, [r7, #4]
 800dae6:	429a      	cmp	r2, r3
 800dae8:	d157      	bne.n	800db9a <_tx_thread_system_suspend+0x14a>
            {

                /* Update the head pointer of this priority list.  */
                _tx_thread_priority_list[priority] =  ready_next;
 800daea:	4960      	ldr	r1, [pc, #384]	; (800dc6c <_tx_thread_system_suspend+0x21c>)
 800daec:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800daee:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800daf0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800daf4:	e051      	b.n	800db9a <_tx_thread_system_suspend+0x14a>
        else
        {

            /* This is the only thread at this priority ready to run.  Set the head
               pointer to NULL.  */
            _tx_thread_priority_list[priority] =    TX_NULL;
 800daf6:	4a5d      	ldr	r2, [pc, #372]	; (800dc6c <_tx_thread_system_suspend+0x21c>)
 800daf8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800dafa:	2100      	movs	r1, #0
 800dafc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            /* Calculate the index into the bit map array.  */
            map_index =  priority/((UINT) 32);
#endif

            /* Clear this priority bit in the ready priority bit map.  */
            TX_MOD32_BIT_SET(priority, priority_bit)
 800db00:	2201      	movs	r2, #1
 800db02:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800db04:	fa02 f303 	lsl.w	r3, r2, r3
 800db08:	663b      	str	r3, [r7, #96]	; 0x60
            _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] & (~(priority_bit));
 800db0a:	4b59      	ldr	r3, [pc, #356]	; (800dc70 <_tx_thread_system_suspend+0x220>)
 800db0c:	681a      	ldr	r2, [r3, #0]
 800db0e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800db10:	43db      	mvns	r3, r3
 800db12:	4013      	ands	r3, r2
 800db14:	4a56      	ldr	r2, [pc, #344]	; (800dc70 <_tx_thread_system_suspend+0x220>)
 800db16:	6013      	str	r3, [r2, #0]
            /* Calculate the base priority as well.  */
            base_priority =  map_index * ((UINT) 32);
#else

            /* Setup the base priority to zero.  */
            base_priority =   ((UINT) 0);
 800db18:	2300      	movs	r3, #0
 800db1a:	65fb      	str	r3, [r7, #92]	; 0x5c
#endif

            /* Setup working variable for the priority map.  */
            priority_map =    _tx_thread_priority_maps[MAP_INDEX];
 800db1c:	4b54      	ldr	r3, [pc, #336]	; (800dc70 <_tx_thread_system_suspend+0x220>)
 800db1e:	681b      	ldr	r3, [r3, #0]
 800db20:	65bb      	str	r3, [r7, #88]	; 0x58

            /* Make a quick check for no other threads ready for execution.  */
            if (priority_map == ((ULONG) 0))
 800db22:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800db24:	2b00      	cmp	r3, #0
 800db26:	d12b      	bne.n	800db80 <_tx_thread_system_suspend+0x130>
            {

                /* Nothing else is ready.  Set highest priority and execute thread
                   accordingly.  */
                _tx_thread_highest_priority =  ((UINT) TX_MAX_PRIORITIES);
 800db28:	4b52      	ldr	r3, [pc, #328]	; (800dc74 <_tx_thread_system_suspend+0x224>)
 800db2a:	2220      	movs	r2, #32
 800db2c:	601a      	str	r2, [r3, #0]
                _tx_thread_execute_ptr =       TX_NULL;
 800db2e:	4b52      	ldr	r3, [pc, #328]	; (800dc78 <_tx_thread_system_suspend+0x228>)
 800db30:	2200      	movs	r2, #0
 800db32:	601a      	str	r2, [r3, #0]
 800db34:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800db36:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800db38:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800db3a:	f383 8810 	msr	PRIMASK, r3
}
 800db3e:	bf00      	nop
                /* Restore interrupts.  */
                TX_RESTORE

                /* Determine if preemption should take place. This is only possible if the current thread pointer is
                   not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
                TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 800db40:	4b49      	ldr	r3, [pc, #292]	; (800dc68 <_tx_thread_system_suspend+0x218>)
 800db42:	681b      	ldr	r3, [r3, #0]
 800db44:	657b      	str	r3, [r7, #84]	; 0x54
                if (combined_flags == ((ULONG) 0))
 800db46:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800db48:	2b00      	cmp	r3, #0
 800db4a:	f040 8081 	bne.w	800dc50 <_tx_thread_system_suspend+0x200>
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 800db4e:	4b4b      	ldr	r3, [pc, #300]	; (800dc7c <_tx_thread_system_suspend+0x22c>)
 800db50:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800db54:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800db56:	f3ef 8305 	mrs	r3, IPSR
 800db5a:	643b      	str	r3, [r7, #64]	; 0x40
    return(ipsr_value);
 800db5c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    if (_tx_ipsr_get() == 0)
 800db5e:	2b00      	cmp	r3, #0
 800db60:	d10c      	bne.n	800db7c <_tx_thread_system_suspend+0x12c>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800db62:	f3ef 8310 	mrs	r3, PRIMASK
 800db66:	63fb      	str	r3, [r7, #60]	; 0x3c
    return(posture);
 800db68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
        interrupt_save = __get_interrupt_posture();
 800db6a:	63bb      	str	r3, [r7, #56]	; 0x38
    __asm__ volatile ("CPSIE  i": : : "memory");
 800db6c:	b662      	cpsie	i
}
 800db6e:	bf00      	nop
 800db70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db72:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800db74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800db76:	f383 8810 	msr	PRIMASK, r3
}
 800db7a:	bf00      	nop
}
 800db7c:	bf00      	nop
                    /* Preemption is needed - return to the system!  */
                    _tx_thread_system_return();
                }

                /* Return to caller.  */
                return;
 800db7e:	e067      	b.n	800dc50 <_tx_thread_system_suspend+0x200>
            {

                /* Other threads at different priority levels are ready to run.  */

                /* Calculate the lowest bit set in the priority map. */
                TX_LOWEST_SET_BIT_CALCULATE(priority_map, priority_bit)
 800db80:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800db82:	fa93 f3a3 	rbit	r3, r3
 800db86:	65bb      	str	r3, [r7, #88]	; 0x58
 800db88:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800db8a:	fab3 f383 	clz	r3, r3
 800db8e:	663b      	str	r3, [r7, #96]	; 0x60

                /* Setup the next highest priority variable.  */
                _tx_thread_highest_priority =  base_priority + ((UINT) priority_bit);
 800db90:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800db92:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800db94:	4413      	add	r3, r2
 800db96:	4a37      	ldr	r2, [pc, #220]	; (800dc74 <_tx_thread_system_suspend+0x224>)
 800db98:	6013      	str	r3, [r2, #0]
            }
        }

        /* Determine if the suspending thread is the thread designated to execute.  */
        if (thread_ptr == _tx_thread_execute_ptr)
 800db9a:	4b37      	ldr	r3, [pc, #220]	; (800dc78 <_tx_thread_system_suspend+0x228>)
 800db9c:	681b      	ldr	r3, [r3, #0]
 800db9e:	687a      	ldr	r2, [r7, #4]
 800dba0:	429a      	cmp	r2, r3
 800dba2:	d12b      	bne.n	800dbfc <_tx_thread_system_suspend+0x1ac>
        {

            /* Pickup the highest priority thread to execute.  */
            _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 800dba4:	4b33      	ldr	r3, [pc, #204]	; (800dc74 <_tx_thread_system_suspend+0x224>)
 800dba6:	681b      	ldr	r3, [r3, #0]
 800dba8:	4a30      	ldr	r2, [pc, #192]	; (800dc6c <_tx_thread_system_suspend+0x21c>)
 800dbaa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800dbae:	4a32      	ldr	r2, [pc, #200]	; (800dc78 <_tx_thread_system_suspend+0x228>)
 800dbb0:	6013      	str	r3, [r2, #0]
 800dbb2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800dbb4:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800dbb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbb8:	f383 8810 	msr	PRIMASK, r3
}
 800dbbc:	bf00      	nop
            /* Restore interrupts.  */
            TX_RESTORE

            /* Determine if preemption should take place. This is only possible if the current thread pointer is
               not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
            TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 800dbbe:	4b2a      	ldr	r3, [pc, #168]	; (800dc68 <_tx_thread_system_suspend+0x218>)
 800dbc0:	681b      	ldr	r3, [r3, #0]
 800dbc2:	657b      	str	r3, [r7, #84]	; 0x54
            if (combined_flags == ((ULONG) 0))
 800dbc4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800dbc6:	2b00      	cmp	r3, #0
 800dbc8:	d144      	bne.n	800dc54 <_tx_thread_system_suspend+0x204>
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 800dbca:	4b2c      	ldr	r3, [pc, #176]	; (800dc7c <_tx_thread_system_suspend+0x22c>)
 800dbcc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dbd0:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800dbd2:	f3ef 8305 	mrs	r3, IPSR
 800dbd6:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(ipsr_value);
 800dbd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    if (_tx_ipsr_get() == 0)
 800dbda:	2b00      	cmp	r3, #0
 800dbdc:	d10c      	bne.n	800dbf8 <_tx_thread_system_suspend+0x1a8>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800dbde:	f3ef 8310 	mrs	r3, PRIMASK
 800dbe2:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 800dbe4:	6abb      	ldr	r3, [r7, #40]	; 0x28
        interrupt_save = __get_interrupt_posture();
 800dbe6:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSIE  i": : : "memory");
 800dbe8:	b662      	cpsie	i
}
 800dbea:	bf00      	nop
 800dbec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbee:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800dbf0:	6a3b      	ldr	r3, [r7, #32]
 800dbf2:	f383 8810 	msr	PRIMASK, r3
}
 800dbf6:	bf00      	nop
}
 800dbf8:	bf00      	nop
                /* Preemption is needed - return to the system!  */
                _tx_thread_system_return();
            }

            /* Return to caller.  */
            return;
 800dbfa:	e02b      	b.n	800dc54 <_tx_thread_system_suspend+0x204>
 800dbfc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800dbfe:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800dc00:	69fb      	ldr	r3, [r7, #28]
 800dc02:	f383 8810 	msr	PRIMASK, r3
}
 800dc06:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Determine if a preemption condition is present.  */
    if (current_thread != _tx_thread_execute_ptr)
 800dc08:	4b1b      	ldr	r3, [pc, #108]	; (800dc78 <_tx_thread_system_suspend+0x228>)
 800dc0a:	681b      	ldr	r3, [r3, #0]
 800dc0c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800dc0e:	429a      	cmp	r2, r3
 800dc10:	d022      	beq.n	800dc58 <_tx_thread_system_suspend+0x208>
        TX_THREAD_STACK_CHECK(thread_ptr)
#endif

        /* Determine if preemption should take place. This is only possible if the current thread pointer is
           not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
        TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 800dc12:	4b15      	ldr	r3, [pc, #84]	; (800dc68 <_tx_thread_system_suspend+0x218>)
 800dc14:	681b      	ldr	r3, [r3, #0]
 800dc16:	657b      	str	r3, [r7, #84]	; 0x54
        if (combined_flags == ((ULONG) 0))
 800dc18:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800dc1a:	2b00      	cmp	r3, #0
 800dc1c:	d11c      	bne.n	800dc58 <_tx_thread_system_suspend+0x208>
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 800dc1e:	4b17      	ldr	r3, [pc, #92]	; (800dc7c <_tx_thread_system_suspend+0x22c>)
 800dc20:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dc24:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800dc26:	f3ef 8305 	mrs	r3, IPSR
 800dc2a:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 800dc2c:	69bb      	ldr	r3, [r7, #24]
    if (_tx_ipsr_get() == 0)
 800dc2e:	2b00      	cmp	r3, #0
 800dc30:	d10c      	bne.n	800dc4c <_tx_thread_system_suspend+0x1fc>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800dc32:	f3ef 8310 	mrs	r3, PRIMASK
 800dc36:	617b      	str	r3, [r7, #20]
    return(posture);
 800dc38:	697b      	ldr	r3, [r7, #20]
        interrupt_save = __get_interrupt_posture();
 800dc3a:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSIE  i": : : "memory");
 800dc3c:	b662      	cpsie	i
}
 800dc3e:	bf00      	nop
 800dc40:	693b      	ldr	r3, [r7, #16]
 800dc42:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800dc44:	68fb      	ldr	r3, [r7, #12]
 800dc46:	f383 8810 	msr	PRIMASK, r3
}
 800dc4a:	bf00      	nop
}
 800dc4c:	bf00      	nop
            _tx_thread_system_return();
        }
    }

    /* Return to caller.  */
    return;
 800dc4e:	e003      	b.n	800dc58 <_tx_thread_system_suspend+0x208>
                return;
 800dc50:	bf00      	nop
 800dc52:	e002      	b.n	800dc5a <_tx_thread_system_suspend+0x20a>
            return;
 800dc54:	bf00      	nop
 800dc56:	e000      	b.n	800dc5a <_tx_thread_system_suspend+0x20a>
    return;
 800dc58:	bf00      	nop
}
 800dc5a:	3778      	adds	r7, #120	; 0x78
 800dc5c:	46bd      	mov	sp, r7
 800dc5e:	bd80      	pop	{r7, pc}
 800dc60:	20001e04 	.word	0x20001e04
 800dc64:	20002408 	.word	0x20002408
 800dc68:	20001e9c 	.word	0x20001e9c
 800dc6c:	20001e1c 	.word	0x20001e1c
 800dc70:	20001e14 	.word	0x20001e14
 800dc74:	20001e18 	.word	0x20001e18
 800dc78:	20001e08 	.word	0x20001e08
 800dc7c:	e000ed04 	.word	0xe000ed04

0800dc80 <_tx_thread_time_slice>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_time_slice(VOID)
{
 800dc80:	b480      	push	{r7}
 800dc82:	b087      	sub	sp, #28
 800dc84:	af00      	add	r7, sp, #0
ULONG           system_state;
UINT            preempt_disable;
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 800dc86:	4b21      	ldr	r3, [pc, #132]	; (800dd0c <_tx_thread_time_slice+0x8c>)
 800dc88:	681b      	ldr	r3, [r3, #0]
 800dc8a:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800dc8c:	f3ef 8310 	mrs	r3, PRIMASK
 800dc90:	60fb      	str	r3, [r7, #12]
    return(posture);
 800dc92:	68fb      	ldr	r3, [r7, #12]
    int_posture = __get_interrupt_posture();
 800dc94:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("CPSID i" : : : "memory");
 800dc96:	b672      	cpsid	i
    return(int_posture);
 800dc98:	68bb      	ldr	r3, [r7, #8]
    /* Set the next thread pointer to NULL.  */
    next_thread_ptr =  TX_NULL;
#endif

    /* Lockout interrupts while the time-slice is evaluated.  */
    TX_DISABLE
 800dc9a:	613b      	str	r3, [r7, #16]

    /* Clear the expired time-slice flag.  */
    _tx_timer_expired_time_slice =  TX_FALSE;
 800dc9c:	4b1c      	ldr	r3, [pc, #112]	; (800dd10 <_tx_thread_time_slice+0x90>)
 800dc9e:	2200      	movs	r2, #0
 800dca0:	601a      	str	r2, [r3, #0]

    /* Make sure the thread pointer is valid.  */
    if (thread_ptr != TX_NULL)
 800dca2:	697b      	ldr	r3, [r7, #20]
 800dca4:	2b00      	cmp	r3, #0
 800dca6:	d024      	beq.n	800dcf2 <_tx_thread_time_slice+0x72>
    {

        /* Make sure the thread is still active, i.e. not suspended.  */
        if (thread_ptr -> tx_thread_state == TX_READY)
 800dca8:	697b      	ldr	r3, [r7, #20]
 800dcaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dcac:	2b00      	cmp	r3, #0
 800dcae:	d120      	bne.n	800dcf2 <_tx_thread_time_slice+0x72>
        {

            /* Setup a fresh time-slice for the thread.  */
            thread_ptr -> tx_thread_time_slice =  thread_ptr -> tx_thread_new_time_slice;
 800dcb0:	697b      	ldr	r3, [r7, #20]
 800dcb2:	69da      	ldr	r2, [r3, #28]
 800dcb4:	697b      	ldr	r3, [r7, #20]
 800dcb6:	619a      	str	r2, [r3, #24]

            /* Reset the actual time-slice variable.  */
            _tx_timer_time_slice =  thread_ptr -> tx_thread_time_slice;
 800dcb8:	697b      	ldr	r3, [r7, #20]
 800dcba:	699b      	ldr	r3, [r3, #24]
 800dcbc:	4a15      	ldr	r2, [pc, #84]	; (800dd14 <_tx_thread_time_slice+0x94>)
 800dcbe:	6013      	str	r3, [r2, #0]

            /* Determine if there is another thread at the same priority and preemption-threshold
               is not set.  Preemption-threshold overrides time-slicing.  */
            if (thread_ptr -> tx_thread_ready_next != thread_ptr)
 800dcc0:	697b      	ldr	r3, [r7, #20]
 800dcc2:	6a1b      	ldr	r3, [r3, #32]
 800dcc4:	697a      	ldr	r2, [r7, #20]
 800dcc6:	429a      	cmp	r2, r3
 800dcc8:	d013      	beq.n	800dcf2 <_tx_thread_time_slice+0x72>
            {

                /* Check to see if preemption-threshold is not being used.  */
                if (thread_ptr -> tx_thread_priority == thread_ptr -> tx_thread_preempt_threshold)
 800dcca:	697b      	ldr	r3, [r7, #20]
 800dccc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dcce:	697b      	ldr	r3, [r7, #20]
 800dcd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dcd2:	429a      	cmp	r2, r3
 800dcd4:	d10d      	bne.n	800dcf2 <_tx_thread_time_slice+0x72>

                    /* Preemption-threshold is not being used by this thread.  */

                    /* There is another thread at this priority, make it the highest at
                       this priority level.  */
                    _tx_thread_priority_list[thread_ptr -> tx_thread_priority] =  thread_ptr -> tx_thread_ready_next;
 800dcd6:	697b      	ldr	r3, [r7, #20]
 800dcd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dcda:	697a      	ldr	r2, [r7, #20]
 800dcdc:	6a12      	ldr	r2, [r2, #32]
 800dcde:	490e      	ldr	r1, [pc, #56]	; (800dd18 <_tx_thread_time_slice+0x98>)
 800dce0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

                    /* Designate the highest priority thread as the one to execute.  Don't use this
                       thread's priority as an index just in case a higher priority thread is now
                       ready!  */
                    _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 800dce4:	4b0d      	ldr	r3, [pc, #52]	; (800dd1c <_tx_thread_time_slice+0x9c>)
 800dce6:	681b      	ldr	r3, [r3, #0]
 800dce8:	4a0b      	ldr	r2, [pc, #44]	; (800dd18 <_tx_thread_time_slice+0x98>)
 800dcea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800dcee:	4a0c      	ldr	r2, [pc, #48]	; (800dd20 <_tx_thread_time_slice+0xa0>)
 800dcf0:	6013      	str	r3, [r2, #0]
 800dcf2:	693b      	ldr	r3, [r7, #16]
 800dcf4:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800dcf6:	687b      	ldr	r3, [r7, #4]
 800dcf8:	f383 8810 	msr	PRIMASK, r3
}
 800dcfc:	bf00      	nop

        /* Yes, check this thread's stack.  */
        TX_THREAD_STACK_CHECK(next_thread_ptr)
    }
#endif
}
 800dcfe:	bf00      	nop
 800dd00:	371c      	adds	r7, #28
 800dd02:	46bd      	mov	sp, r7
 800dd04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd08:	4770      	bx	lr
 800dd0a:	bf00      	nop
 800dd0c:	20001e04 	.word	0x20001e04
 800dd10:	20001eac 	.word	0x20001eac
 800dd14:	20002408 	.word	0x20002408
 800dd18:	20001e1c 	.word	0x20001e1c
 800dd1c:	20001e18 	.word	0x20001e18
 800dd20:	20001e08 	.word	0x20001e08

0800dd24 <_tx_thread_timeout>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_timeout(ULONG timeout_input)
{
 800dd24:	b580      	push	{r7, lr}
 800dd26:	b08a      	sub	sp, #40	; 0x28
 800dd28:	af00      	add	r7, sp, #0
 800dd2a:	6078      	str	r0, [r7, #4]
VOID            (*suspend_cleanup)(struct TX_THREAD_STRUCT *suspend_thread_ptr, ULONG suspension_sequence);
ULONG           suspension_sequence;


    /* Pickup the thread pointer.  */
    TX_THREAD_TIMEOUT_POINTER_SETUP(thread_ptr)
 800dd2c:	687b      	ldr	r3, [r7, #4]
 800dd2e:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800dd30:	f3ef 8310 	mrs	r3, PRIMASK
 800dd34:	617b      	str	r3, [r7, #20]
    return(posture);
 800dd36:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 800dd38:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 800dd3a:	b672      	cpsid	i
    return(int_posture);
 800dd3c:	693b      	ldr	r3, [r7, #16]

    /* Disable interrupts.  */
    TX_DISABLE
 800dd3e:	623b      	str	r3, [r7, #32]

    /* Determine how the thread is currently suspended.  */
    if (thread_ptr -> tx_thread_state == TX_SLEEP)
 800dd40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dd44:	2b04      	cmp	r3, #4
 800dd46:	d10e      	bne.n	800dd66 <_tx_thread_timeout+0x42>
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Increment the disable preemption flag.  */
        _tx_thread_preempt_disable++;
 800dd48:	4b13      	ldr	r3, [pc, #76]	; (800dd98 <_tx_thread_timeout+0x74>)
 800dd4a:	681b      	ldr	r3, [r3, #0]
 800dd4c:	3301      	adds	r3, #1
 800dd4e:	4a12      	ldr	r2, [pc, #72]	; (800dd98 <_tx_thread_timeout+0x74>)
 800dd50:	6013      	str	r3, [r2, #0]
 800dd52:	6a3b      	ldr	r3, [r7, #32]
 800dd54:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800dd56:	68fb      	ldr	r3, [r7, #12]
 800dd58:	f383 8810 	msr	PRIMASK, r3
}
 800dd5c:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Lift the suspension on the sleeping thread.  */
        _tx_thread_system_resume(thread_ptr);
 800dd5e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800dd60:	f7ff fd76 	bl	800d850 <_tx_thread_system_resume>

        /* Restore interrupts.  */
        TX_RESTORE
#endif
    }
}
 800dd64:	e013      	b.n	800dd8e <_tx_thread_timeout+0x6a>
        suspend_cleanup =  thread_ptr -> tx_thread_suspend_cleanup;
 800dd66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd68:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800dd6a:	61fb      	str	r3, [r7, #28]
        suspension_sequence =  thread_ptr -> tx_thread_suspension_sequence;
 800dd6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd6e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800dd72:	61bb      	str	r3, [r7, #24]
 800dd74:	6a3b      	ldr	r3, [r7, #32]
 800dd76:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800dd78:	68bb      	ldr	r3, [r7, #8]
 800dd7a:	f383 8810 	msr	PRIMASK, r3
}
 800dd7e:	bf00      	nop
        if (suspend_cleanup != TX_NULL)
 800dd80:	69fb      	ldr	r3, [r7, #28]
 800dd82:	2b00      	cmp	r3, #0
 800dd84:	d003      	beq.n	800dd8e <_tx_thread_timeout+0x6a>
            (suspend_cleanup)(thread_ptr, suspension_sequence);
 800dd86:	69fb      	ldr	r3, [r7, #28]
 800dd88:	69b9      	ldr	r1, [r7, #24]
 800dd8a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800dd8c:	4798      	blx	r3
}
 800dd8e:	bf00      	nop
 800dd90:	3728      	adds	r7, #40	; 0x28
 800dd92:	46bd      	mov	sp, r7
 800dd94:	bd80      	pop	{r7, pc}
 800dd96:	bf00      	nop
 800dd98:	20001e9c 	.word	0x20001e9c

0800dd9c <_tx_timer_expiration_process>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_expiration_process(VOID)
{
 800dd9c:	b580      	push	{r7, lr}
 800dd9e:	b084      	sub	sp, #16
 800dda0:	af00      	add	r7, sp, #0
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800dda2:	f3ef 8310 	mrs	r3, PRIMASK
 800dda6:	607b      	str	r3, [r7, #4]
    return(posture);
 800dda8:	687b      	ldr	r3, [r7, #4]
    int_posture = __get_interrupt_posture();
 800ddaa:	603b      	str	r3, [r7, #0]
    __asm__ volatile ("CPSID i" : : : "memory");
 800ddac:	b672      	cpsid	i
    return(int_posture);
 800ddae:	683b      	ldr	r3, [r7, #0]

    /* Don't process in the ISR, wakeup the system timer thread to process the
       timer expiration.  */

    /* Disable interrupts.  */
    TX_DISABLE
 800ddb0:	60fb      	str	r3, [r7, #12]
    /* Restore interrupts.  */
    TX_RESTORE
#else

    /* Increment the preempt disable flag.  */
    _tx_thread_preempt_disable++;
 800ddb2:	4b09      	ldr	r3, [pc, #36]	; (800ddd8 <_tx_timer_expiration_process+0x3c>)
 800ddb4:	681b      	ldr	r3, [r3, #0]
 800ddb6:	3301      	adds	r3, #1
 800ddb8:	4a07      	ldr	r2, [pc, #28]	; (800ddd8 <_tx_timer_expiration_process+0x3c>)
 800ddba:	6013      	str	r3, [r2, #0]
 800ddbc:	68fb      	ldr	r3, [r7, #12]
 800ddbe:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800ddc0:	68bb      	ldr	r3, [r7, #8]
 800ddc2:	f383 8810 	msr	PRIMASK, r3
}
 800ddc6:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Call the system resume function to activate the timer thread.  */
    _tx_thread_system_resume(&_tx_timer_thread);
 800ddc8:	4804      	ldr	r0, [pc, #16]	; (800dddc <_tx_timer_expiration_process+0x40>)
 800ddca:	f7ff fd41 	bl	800d850 <_tx_thread_system_resume>
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 800ddce:	bf00      	nop
 800ddd0:	3710      	adds	r7, #16
 800ddd2:	46bd      	mov	sp, r7
 800ddd4:	bd80      	pop	{r7, pc}
 800ddd6:	bf00      	nop
 800ddd8:	20001e9c 	.word	0x20001e9c
 800dddc:	20001f4c 	.word	0x20001f4c

0800dde0 <_tx_timer_initialize>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_initialize(VOID)
{
 800dde0:	b590      	push	{r4, r7, lr}
 800dde2:	b089      	sub	sp, #36	; 0x24
 800dde4:	af06      	add	r7, sp, #24
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the system clock to 0.  */
    _tx_timer_system_clock =  ((ULONG) 0);
 800dde6:	4b28      	ldr	r3, [pc, #160]	; (800de88 <_tx_timer_initialize+0xa8>)
 800dde8:	2200      	movs	r2, #0
 800ddea:	601a      	str	r2, [r3, #0]

    /* Initialize the time-slice value to 0 to make sure it is disabled.  */
    _tx_timer_time_slice =  ((ULONG) 0);
 800ddec:	4b27      	ldr	r3, [pc, #156]	; (800de8c <_tx_timer_initialize+0xac>)
 800ddee:	2200      	movs	r2, #0
 800ddf0:	601a      	str	r2, [r3, #0]

    /* Clear the expired flags.  */
    _tx_timer_expired_time_slice =  TX_FALSE;
 800ddf2:	4b27      	ldr	r3, [pc, #156]	; (800de90 <_tx_timer_initialize+0xb0>)
 800ddf4:	2200      	movs	r2, #0
 800ddf6:	601a      	str	r2, [r3, #0]
    _tx_timer_expired =             TX_FALSE;
 800ddf8:	4b26      	ldr	r3, [pc, #152]	; (800de94 <_tx_timer_initialize+0xb4>)
 800ddfa:	2200      	movs	r2, #0
 800ddfc:	601a      	str	r2, [r3, #0]

    /* Set the currently expired timer being processed pointer to NULL.  */
    _tx_timer_expired_timer_ptr =  TX_NULL;
 800ddfe:	4b26      	ldr	r3, [pc, #152]	; (800de98 <_tx_timer_initialize+0xb8>)
 800de00:	2200      	movs	r2, #0
 800de02:	601a      	str	r2, [r3, #0]

    /* Initialize the thread and application timer management control structures.  */

    /* First, initialize the timer list.  */
    TX_MEMSET(&_tx_timer_list[0], 0, (sizeof(_tx_timer_list)));
 800de04:	2280      	movs	r2, #128	; 0x80
 800de06:	2100      	movs	r1, #0
 800de08:	4824      	ldr	r0, [pc, #144]	; (800de9c <_tx_timer_initialize+0xbc>)
 800de0a:	f000 fcaf 	bl	800e76c <memset>
#endif

    /* Initialize all of the list pointers.  */
    _tx_timer_list_start =   &_tx_timer_list[0];
 800de0e:	4b24      	ldr	r3, [pc, #144]	; (800dea0 <_tx_timer_initialize+0xc0>)
 800de10:	4a22      	ldr	r2, [pc, #136]	; (800de9c <_tx_timer_initialize+0xbc>)
 800de12:	601a      	str	r2, [r3, #0]
    _tx_timer_current_ptr =  &_tx_timer_list[0];
 800de14:	4b23      	ldr	r3, [pc, #140]	; (800dea4 <_tx_timer_initialize+0xc4>)
 800de16:	4a21      	ldr	r2, [pc, #132]	; (800de9c <_tx_timer_initialize+0xbc>)
 800de18:	601a      	str	r2, [r3, #0]

    /* Set the timer list end pointer to one past the actual timer list.  This is done
       to make the timer interrupt handling in assembly language a little easier.  */
    _tx_timer_list_end =     &_tx_timer_list[TX_TIMER_ENTRIES-((ULONG) 1)];
 800de1a:	4b23      	ldr	r3, [pc, #140]	; (800dea8 <_tx_timer_initialize+0xc8>)
 800de1c:	4a23      	ldr	r2, [pc, #140]	; (800deac <_tx_timer_initialize+0xcc>)
 800de1e:	601a      	str	r2, [r3, #0]
    _tx_timer_list_end =     TX_TIMER_POINTER_ADD(_tx_timer_list_end, ((ULONG) 1));
 800de20:	4b21      	ldr	r3, [pc, #132]	; (800dea8 <_tx_timer_initialize+0xc8>)
 800de22:	681b      	ldr	r3, [r3, #0]
 800de24:	3304      	adds	r3, #4
 800de26:	4a20      	ldr	r2, [pc, #128]	; (800dea8 <_tx_timer_initialize+0xc8>)
 800de28:	6013      	str	r3, [r2, #0]

#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Setup the variables associated with the system timer thread's stack and
       priority.  */
    _tx_timer_stack_start =  (VOID *) &_tx_timer_thread_stack_area[0];
 800de2a:	4b21      	ldr	r3, [pc, #132]	; (800deb0 <_tx_timer_initialize+0xd0>)
 800de2c:	4a21      	ldr	r2, [pc, #132]	; (800deb4 <_tx_timer_initialize+0xd4>)
 800de2e:	601a      	str	r2, [r3, #0]
    _tx_timer_stack_size =   ((ULONG) TX_TIMER_THREAD_STACK_SIZE);
 800de30:	4b21      	ldr	r3, [pc, #132]	; (800deb8 <_tx_timer_initialize+0xd8>)
 800de32:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800de36:	601a      	str	r2, [r3, #0]
    _tx_timer_priority =     ((UINT) TX_TIMER_THREAD_PRIORITY);
 800de38:	4b20      	ldr	r3, [pc, #128]	; (800debc <_tx_timer_initialize+0xdc>)
 800de3a:	2200      	movs	r2, #0
 800de3c:	601a      	str	r2, [r3, #0]
       low-level initialization component.  */
    do
    {

        /* Create the system timer thread.  */
        status =  _tx_thread_create(&_tx_timer_thread,
 800de3e:	4b1c      	ldr	r3, [pc, #112]	; (800deb0 <_tx_timer_initialize+0xd0>)
 800de40:	681b      	ldr	r3, [r3, #0]
 800de42:	4a1d      	ldr	r2, [pc, #116]	; (800deb8 <_tx_timer_initialize+0xd8>)
 800de44:	6812      	ldr	r2, [r2, #0]
 800de46:	491d      	ldr	r1, [pc, #116]	; (800debc <_tx_timer_initialize+0xdc>)
 800de48:	6809      	ldr	r1, [r1, #0]
 800de4a:	481c      	ldr	r0, [pc, #112]	; (800debc <_tx_timer_initialize+0xdc>)
 800de4c:	6800      	ldr	r0, [r0, #0]
 800de4e:	2400      	movs	r4, #0
 800de50:	9405      	str	r4, [sp, #20]
 800de52:	2400      	movs	r4, #0
 800de54:	9404      	str	r4, [sp, #16]
 800de56:	9003      	str	r0, [sp, #12]
 800de58:	9102      	str	r1, [sp, #8]
 800de5a:	9201      	str	r2, [sp, #4]
 800de5c:	9300      	str	r3, [sp, #0]
 800de5e:	4b18      	ldr	r3, [pc, #96]	; (800dec0 <_tx_timer_initialize+0xe0>)
 800de60:	4a18      	ldr	r2, [pc, #96]	; (800dec4 <_tx_timer_initialize+0xe4>)
 800de62:	4919      	ldr	r1, [pc, #100]	; (800dec8 <_tx_timer_initialize+0xe8>)
 800de64:	4819      	ldr	r0, [pc, #100]	; (800decc <_tx_timer_initialize+0xec>)
 800de66:	f7ff f9eb 	bl	800d240 <_tx_thread_create>
 800de6a:	6078      	str	r0, [r7, #4]
#endif

        /* Define timer initialize extension.  */
        TX_TIMER_INITIALIZE_EXTENSION(status)

    } while (status != TX_SUCCESS);
 800de6c:	687b      	ldr	r3, [r7, #4]
 800de6e:	2b00      	cmp	r3, #0
 800de70:	d1e5      	bne.n	800de3e <_tx_timer_initialize+0x5e>
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the head pointer of the created application timer list.  */
    _tx_timer_created_ptr =  TX_NULL;
 800de72:	4b17      	ldr	r3, [pc, #92]	; (800ded0 <_tx_timer_initialize+0xf0>)
 800de74:	2200      	movs	r2, #0
 800de76:	601a      	str	r2, [r3, #0]

    /* Set the created count to zero.  */
    _tx_timer_created_count =  TX_EMPTY;
 800de78:	4b16      	ldr	r3, [pc, #88]	; (800ded4 <_tx_timer_initialize+0xf4>)
 800de7a:	2200      	movs	r2, #0
 800de7c:	601a      	str	r2, [r3, #0]
    _tx_timer_performance_expiration_count =         ((ULONG) 0);
    _tx_timer_performance__expiration_adjust_count =  ((ULONG) 0);
#endif
#endif
#endif
}
 800de7e:	bf00      	nop
 800de80:	370c      	adds	r7, #12
 800de82:	46bd      	mov	sp, r7
 800de84:	bd90      	pop	{r4, r7, pc}
 800de86:	bf00      	nop
 800de88:	20001ea8 	.word	0x20001ea8
 800de8c:	20002408 	.word	0x20002408
 800de90:	20001eac 	.word	0x20001eac
 800de94:	20001f3c 	.word	0x20001f3c
 800de98:	20001f48 	.word	0x20001f48
 800de9c:	20001eb0 	.word	0x20001eb0
 800dea0:	20001f30 	.word	0x20001f30
 800dea4:	20001f38 	.word	0x20001f38
 800dea8:	20001f34 	.word	0x20001f34
 800deac:	20001f2c 	.word	0x20001f2c
 800deb0:	20001ffc 	.word	0x20001ffc
 800deb4:	20002008 	.word	0x20002008
 800deb8:	20002000 	.word	0x20002000
 800debc:	20002004 	.word	0x20002004
 800dec0:	4154494d 	.word	0x4154494d
 800dec4:	0800e00d 	.word	0x0800e00d
 800dec8:	0800e864 	.word	0x0800e864
 800decc:	20001f4c 	.word	0x20001f4c
 800ded0:	20001f40 	.word	0x20001f40
 800ded4:	20001f44 	.word	0x20001f44

0800ded8 <_tx_timer_system_activate>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_system_activate(TX_TIMER_INTERNAL *timer_ptr)
{
 800ded8:	b480      	push	{r7}
 800deda:	b089      	sub	sp, #36	; 0x24
 800dedc:	af00      	add	r7, sp, #0
 800dede:	6078      	str	r0, [r7, #4]
ULONG                       remaining_ticks;
ULONG                       expiration_time;


    /* Pickup the remaining ticks.  */
    remaining_ticks =  timer_ptr -> tx_timer_internal_remaining_ticks;
 800dee0:	687b      	ldr	r3, [r7, #4]
 800dee2:	681b      	ldr	r3, [r3, #0]
 800dee4:	617b      	str	r3, [r7, #20]

    /* Determine if there is a timer to activate.  */
    if (remaining_ticks != ((ULONG) 0))
 800dee6:	697b      	ldr	r3, [r7, #20]
 800dee8:	2b00      	cmp	r3, #0
 800deea:	d04a      	beq.n	800df82 <_tx_timer_system_activate+0xaa>
    {

        /* Determine if the timer is set to wait forever.  */
        if (remaining_ticks != TX_WAIT_FOREVER)
 800deec:	697b      	ldr	r3, [r7, #20]
 800deee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800def2:	d046      	beq.n	800df82 <_tx_timer_system_activate+0xaa>
        {

            /* Valid timer activate request.  */

            /* Determine if the timer still needs activation.  */
            if (timer_ptr -> tx_timer_internal_list_head == TX_NULL)
 800def4:	687b      	ldr	r3, [r7, #4]
 800def6:	699b      	ldr	r3, [r3, #24]
 800def8:	2b00      	cmp	r3, #0
 800defa:	d142      	bne.n	800df82 <_tx_timer_system_activate+0xaa>
            {

                /* Activate the timer.  */

                /* Calculate the amount of time remaining for the timer.  */
                if (remaining_ticks > TX_TIMER_ENTRIES)
 800defc:	697b      	ldr	r3, [r7, #20]
 800defe:	2b20      	cmp	r3, #32
 800df00:	d902      	bls.n	800df08 <_tx_timer_system_activate+0x30>
                {

                    /* Set expiration time to the maximum number of entries.  */
                    expiration_time =  TX_TIMER_ENTRIES - ((ULONG) 1);
 800df02:	231f      	movs	r3, #31
 800df04:	61bb      	str	r3, [r7, #24]
 800df06:	e002      	b.n	800df0e <_tx_timer_system_activate+0x36>
                {

                    /* Timer value fits in the timer entries.  */

                    /* Set the expiration time.  */
                    expiration_time =  (remaining_ticks - ((ULONG) 1));
 800df08:	697b      	ldr	r3, [r7, #20]
 800df0a:	3b01      	subs	r3, #1
 800df0c:	61bb      	str	r3, [r7, #24]

                /* At this point, we are ready to put the timer on one of
                   the timer lists.  */

                /* Calculate the proper place for the timer.  */
                timer_list =  TX_TIMER_POINTER_ADD(_tx_timer_current_ptr, expiration_time);
 800df0e:	4b20      	ldr	r3, [pc, #128]	; (800df90 <_tx_timer_system_activate+0xb8>)
 800df10:	681a      	ldr	r2, [r3, #0]
 800df12:	69bb      	ldr	r3, [r7, #24]
 800df14:	009b      	lsls	r3, r3, #2
 800df16:	4413      	add	r3, r2
 800df18:	61fb      	str	r3, [r7, #28]
                if (TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(timer_list) >= TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(_tx_timer_list_end))
 800df1a:	4b1e      	ldr	r3, [pc, #120]	; (800df94 <_tx_timer_system_activate+0xbc>)
 800df1c:	681b      	ldr	r3, [r3, #0]
 800df1e:	69fa      	ldr	r2, [r7, #28]
 800df20:	429a      	cmp	r2, r3
 800df22:	d30b      	bcc.n	800df3c <_tx_timer_system_activate+0x64>
                {

                    /* Wrap from the beginning of the list.  */
                    delta =  TX_TIMER_POINTER_DIF(timer_list, _tx_timer_list_end);
 800df24:	4b1b      	ldr	r3, [pc, #108]	; (800df94 <_tx_timer_system_activate+0xbc>)
 800df26:	681b      	ldr	r3, [r3, #0]
 800df28:	69fa      	ldr	r2, [r7, #28]
 800df2a:	1ad3      	subs	r3, r2, r3
 800df2c:	109b      	asrs	r3, r3, #2
 800df2e:	613b      	str	r3, [r7, #16]
                    timer_list =  TX_TIMER_POINTER_ADD(_tx_timer_list_start, delta);
 800df30:	4b19      	ldr	r3, [pc, #100]	; (800df98 <_tx_timer_system_activate+0xc0>)
 800df32:	681a      	ldr	r2, [r3, #0]
 800df34:	693b      	ldr	r3, [r7, #16]
 800df36:	009b      	lsls	r3, r3, #2
 800df38:	4413      	add	r3, r2
 800df3a:	61fb      	str	r3, [r7, #28]
                }

                /* Now put the timer on this list.  */
                if ((*timer_list) == TX_NULL)
 800df3c:	69fb      	ldr	r3, [r7, #28]
 800df3e:	681b      	ldr	r3, [r3, #0]
 800df40:	2b00      	cmp	r3, #0
 800df42:	d109      	bne.n	800df58 <_tx_timer_system_activate+0x80>
                {

                    /* This list is NULL, just put the new timer on it.  */

                    /* Setup the links in this timer.  */
                    timer_ptr -> tx_timer_internal_active_next =      timer_ptr;
 800df44:	687b      	ldr	r3, [r7, #4]
 800df46:	687a      	ldr	r2, [r7, #4]
 800df48:	611a      	str	r2, [r3, #16]
                    timer_ptr -> tx_timer_internal_active_previous =  timer_ptr;
 800df4a:	687b      	ldr	r3, [r7, #4]
 800df4c:	687a      	ldr	r2, [r7, #4]
 800df4e:	615a      	str	r2, [r3, #20]

                    /* Setup the list head pointer.  */
                    *timer_list =  timer_ptr;
 800df50:	69fb      	ldr	r3, [r7, #28]
 800df52:	687a      	ldr	r2, [r7, #4]
 800df54:	601a      	str	r2, [r3, #0]
 800df56:	e011      	b.n	800df7c <_tx_timer_system_activate+0xa4>
                }
                else
                {

                    /* This list is not NULL, add current timer to the end. */
                    next_timer =                                        *timer_list;
 800df58:	69fb      	ldr	r3, [r7, #28]
 800df5a:	681b      	ldr	r3, [r3, #0]
 800df5c:	60fb      	str	r3, [r7, #12]
                    previous_timer =                                    next_timer -> tx_timer_internal_active_previous;
 800df5e:	68fb      	ldr	r3, [r7, #12]
 800df60:	695b      	ldr	r3, [r3, #20]
 800df62:	60bb      	str	r3, [r7, #8]
                    previous_timer -> tx_timer_internal_active_next =   timer_ptr;
 800df64:	68bb      	ldr	r3, [r7, #8]
 800df66:	687a      	ldr	r2, [r7, #4]
 800df68:	611a      	str	r2, [r3, #16]
                    next_timer -> tx_timer_internal_active_previous =   timer_ptr;
 800df6a:	68fb      	ldr	r3, [r7, #12]
 800df6c:	687a      	ldr	r2, [r7, #4]
 800df6e:	615a      	str	r2, [r3, #20]
                    timer_ptr -> tx_timer_internal_active_next =        next_timer;
 800df70:	687b      	ldr	r3, [r7, #4]
 800df72:	68fa      	ldr	r2, [r7, #12]
 800df74:	611a      	str	r2, [r3, #16]
                    timer_ptr -> tx_timer_internal_active_previous =    previous_timer;
 800df76:	687b      	ldr	r3, [r7, #4]
 800df78:	68ba      	ldr	r2, [r7, #8]
 800df7a:	615a      	str	r2, [r3, #20]
                }

                /* Setup list head pointer.  */
                timer_ptr -> tx_timer_internal_list_head =  timer_list;
 800df7c:	687b      	ldr	r3, [r7, #4]
 800df7e:	69fa      	ldr	r2, [r7, #28]
 800df80:	619a      	str	r2, [r3, #24]
            }
        }
    }
}
 800df82:	bf00      	nop
 800df84:	3724      	adds	r7, #36	; 0x24
 800df86:	46bd      	mov	sp, r7
 800df88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df8c:	4770      	bx	lr
 800df8e:	bf00      	nop
 800df90:	20001f38 	.word	0x20001f38
 800df94:	20001f34 	.word	0x20001f34
 800df98:	20001f30 	.word	0x20001f30

0800df9c <_tx_timer_system_deactivate>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_system_deactivate(TX_TIMER_INTERNAL *timer_ptr)
{
 800df9c:	b480      	push	{r7}
 800df9e:	b087      	sub	sp, #28
 800dfa0:	af00      	add	r7, sp, #0
 800dfa2:	6078      	str	r0, [r7, #4]
TX_TIMER_INTERNAL   *next_timer;
TX_TIMER_INTERNAL   *previous_timer;


    /* Pickup the list head pointer.  */
    list_head =  timer_ptr -> tx_timer_internal_list_head;
 800dfa4:	687b      	ldr	r3, [r7, #4]
 800dfa6:	699b      	ldr	r3, [r3, #24]
 800dfa8:	617b      	str	r3, [r7, #20]

    /* Determine if the timer still needs deactivation.  */
    if (list_head != TX_NULL)
 800dfaa:	697b      	ldr	r3, [r7, #20]
 800dfac:	2b00      	cmp	r3, #0
 800dfae:	d026      	beq.n	800dffe <_tx_timer_system_deactivate+0x62>
    {

        /* Deactivate the timer.  */

        /* Pickup the next active timer.  */
        next_timer =  timer_ptr -> tx_timer_internal_active_next;
 800dfb0:	687b      	ldr	r3, [r7, #4]
 800dfb2:	691b      	ldr	r3, [r3, #16]
 800dfb4:	613b      	str	r3, [r7, #16]

        /* See if this is the only timer in the list.  */
        if (timer_ptr == next_timer)
 800dfb6:	687a      	ldr	r2, [r7, #4]
 800dfb8:	693b      	ldr	r3, [r7, #16]
 800dfba:	429a      	cmp	r2, r3
 800dfbc:	d108      	bne.n	800dfd0 <_tx_timer_system_deactivate+0x34>
        {

            /* Yes, the only timer on the list.  */

            /* Determine if the head pointer needs to be updated.  */
            if (*(list_head) == timer_ptr)
 800dfbe:	697b      	ldr	r3, [r7, #20]
 800dfc0:	681b      	ldr	r3, [r3, #0]
 800dfc2:	687a      	ldr	r2, [r7, #4]
 800dfc4:	429a      	cmp	r2, r3
 800dfc6:	d117      	bne.n	800dff8 <_tx_timer_system_deactivate+0x5c>
            {

                /* Update the head pointer.  */
                *(list_head) =  TX_NULL;
 800dfc8:	697b      	ldr	r3, [r7, #20]
 800dfca:	2200      	movs	r2, #0
 800dfcc:	601a      	str	r2, [r3, #0]
 800dfce:	e013      	b.n	800dff8 <_tx_timer_system_deactivate+0x5c>
        {

            /* At least one more timer is on the same expiration list.  */

            /* Update the links of the adjacent timers.  */
            previous_timer =                                   timer_ptr -> tx_timer_internal_active_previous;
 800dfd0:	687b      	ldr	r3, [r7, #4]
 800dfd2:	695b      	ldr	r3, [r3, #20]
 800dfd4:	60fb      	str	r3, [r7, #12]
            next_timer -> tx_timer_internal_active_previous =  previous_timer;
 800dfd6:	693b      	ldr	r3, [r7, #16]
 800dfd8:	68fa      	ldr	r2, [r7, #12]
 800dfda:	615a      	str	r2, [r3, #20]
            previous_timer -> tx_timer_internal_active_next =  next_timer;
 800dfdc:	68fb      	ldr	r3, [r7, #12]
 800dfde:	693a      	ldr	r2, [r7, #16]
 800dfe0:	611a      	str	r2, [r3, #16]

            /* Determine if the head pointer needs to be updated.  */
            if (*(list_head) == timer_ptr)
 800dfe2:	697b      	ldr	r3, [r7, #20]
 800dfe4:	681b      	ldr	r3, [r3, #0]
 800dfe6:	687a      	ldr	r2, [r7, #4]
 800dfe8:	429a      	cmp	r2, r3
 800dfea:	d105      	bne.n	800dff8 <_tx_timer_system_deactivate+0x5c>
            {

                /* Update the next timer in the list with the list head pointer.  */
                next_timer -> tx_timer_internal_list_head =  list_head;
 800dfec:	693b      	ldr	r3, [r7, #16]
 800dfee:	697a      	ldr	r2, [r7, #20]
 800dff0:	619a      	str	r2, [r3, #24]

                /* Update the head pointer.  */
                *(list_head) =  next_timer;
 800dff2:	697b      	ldr	r3, [r7, #20]
 800dff4:	693a      	ldr	r2, [r7, #16]
 800dff6:	601a      	str	r2, [r3, #0]
            }
        }

        /* Clear the timer's list head pointer.  */
        timer_ptr -> tx_timer_internal_list_head =  TX_NULL;
 800dff8:	687b      	ldr	r3, [r7, #4]
 800dffa:	2200      	movs	r2, #0
 800dffc:	619a      	str	r2, [r3, #24]
    }
}
 800dffe:	bf00      	nop
 800e000:	371c      	adds	r7, #28
 800e002:	46bd      	mov	sp, r7
 800e004:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e008:	4770      	bx	lr
	...

0800e00c <_tx_timer_thread_entry>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
#ifndef TX_TIMER_PROCESS_IN_ISR
VOID  _tx_timer_thread_entry(ULONG timer_thread_input)
{
 800e00c:	b580      	push	{r7, lr}
 800e00e:	b098      	sub	sp, #96	; 0x60
 800e010:	af00      	add	r7, sp, #0
 800e012:	6078      	str	r0, [r7, #4]
TX_TIMER_INTERNAL           *reactivate_timer;
TX_TIMER_INTERNAL           *next_timer;
TX_TIMER_INTERNAL           *previous_timer;
TX_TIMER_INTERNAL           *current_timer;
VOID                        (*timeout_function)(ULONG id);
ULONG                       timeout_param =  ((ULONG) 0);
 800e014:	2300      	movs	r3, #0
 800e016:	657b      	str	r3, [r7, #84]	; 0x54
#endif


    /* Make sure the timer input is correct.  This also gets rid of the
       silly compiler warnings.  */
    if (timer_thread_input == TX_TIMER_ID)
 800e018:	687b      	ldr	r3, [r7, #4]
 800e01a:	4a73      	ldr	r2, [pc, #460]	; (800e1e8 <_tx_timer_thread_entry+0x1dc>)
 800e01c:	4293      	cmp	r3, r2
 800e01e:	f040 80de 	bne.w	800e1de <_tx_timer_thread_entry+0x1d2>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800e022:	f3ef 8310 	mrs	r3, PRIMASK
 800e026:	643b      	str	r3, [r7, #64]	; 0x40
    return(posture);
 800e028:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    int_posture = __get_interrupt_posture();
 800e02a:	63fb      	str	r3, [r7, #60]	; 0x3c
    __asm__ volatile ("CPSID i" : : : "memory");
 800e02c:	b672      	cpsid	i
    return(int_posture);
 800e02e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
        {

            /* First, move the current list pointer and clear the timer
               expired value.  This allows the interrupt handling portion
               to continue looking for timer expirations.  */
            TX_DISABLE
 800e030:	65fb      	str	r3, [r7, #92]	; 0x5c

            /* Save the current timer expiration list pointer.  */
            expired_timers =  *_tx_timer_current_ptr;
 800e032:	4b6e      	ldr	r3, [pc, #440]	; (800e1ec <_tx_timer_thread_entry+0x1e0>)
 800e034:	681b      	ldr	r3, [r3, #0]
 800e036:	681b      	ldr	r3, [r3, #0]
 800e038:	60fb      	str	r3, [r7, #12]

            /* Modify the head pointer in the first timer in the list, if there
               is one!  */
            if (expired_timers != TX_NULL)
 800e03a:	68fb      	ldr	r3, [r7, #12]
 800e03c:	2b00      	cmp	r3, #0
 800e03e:	d003      	beq.n	800e048 <_tx_timer_thread_entry+0x3c>
            {

                expired_timers -> tx_timer_internal_list_head =  &expired_timers;
 800e040:	68fb      	ldr	r3, [r7, #12]
 800e042:	f107 020c 	add.w	r2, r7, #12
 800e046:	619a      	str	r2, [r3, #24]
            }

            /* Set the current list pointer to NULL.  */
            *_tx_timer_current_ptr =  TX_NULL;
 800e048:	4b68      	ldr	r3, [pc, #416]	; (800e1ec <_tx_timer_thread_entry+0x1e0>)
 800e04a:	681b      	ldr	r3, [r3, #0]
 800e04c:	2200      	movs	r2, #0
 800e04e:	601a      	str	r2, [r3, #0]

            /* Move the current pointer up one timer entry wrap if we get to
               the end of the list.  */
            _tx_timer_current_ptr =  TX_TIMER_POINTER_ADD(_tx_timer_current_ptr, 1);
 800e050:	4b66      	ldr	r3, [pc, #408]	; (800e1ec <_tx_timer_thread_entry+0x1e0>)
 800e052:	681b      	ldr	r3, [r3, #0]
 800e054:	3304      	adds	r3, #4
 800e056:	4a65      	ldr	r2, [pc, #404]	; (800e1ec <_tx_timer_thread_entry+0x1e0>)
 800e058:	6013      	str	r3, [r2, #0]
            if (_tx_timer_current_ptr == _tx_timer_list_end)
 800e05a:	4b64      	ldr	r3, [pc, #400]	; (800e1ec <_tx_timer_thread_entry+0x1e0>)
 800e05c:	681a      	ldr	r2, [r3, #0]
 800e05e:	4b64      	ldr	r3, [pc, #400]	; (800e1f0 <_tx_timer_thread_entry+0x1e4>)
 800e060:	681b      	ldr	r3, [r3, #0]
 800e062:	429a      	cmp	r2, r3
 800e064:	d103      	bne.n	800e06e <_tx_timer_thread_entry+0x62>
            {

                _tx_timer_current_ptr =  _tx_timer_list_start;
 800e066:	4b63      	ldr	r3, [pc, #396]	; (800e1f4 <_tx_timer_thread_entry+0x1e8>)
 800e068:	681b      	ldr	r3, [r3, #0]
 800e06a:	4a60      	ldr	r2, [pc, #384]	; (800e1ec <_tx_timer_thread_entry+0x1e0>)
 800e06c:	6013      	str	r3, [r2, #0]
            }

            /* Clear the expired flag.  */
            _tx_timer_expired =  TX_FALSE;
 800e06e:	4b62      	ldr	r3, [pc, #392]	; (800e1f8 <_tx_timer_thread_entry+0x1ec>)
 800e070:	2200      	movs	r2, #0
 800e072:	601a      	str	r2, [r3, #0]
 800e074:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e076:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800e078:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e07a:	f383 8810 	msr	PRIMASK, r3
}
 800e07e:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800e080:	f3ef 8310 	mrs	r3, PRIMASK
 800e084:	63bb      	str	r3, [r7, #56]	; 0x38
    return(posture);
 800e086:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    int_posture = __get_interrupt_posture();
 800e088:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile ("CPSID i" : : : "memory");
 800e08a:	b672      	cpsid	i
    return(int_posture);
 800e08c:	6b7b      	ldr	r3, [r7, #52]	; 0x34

            /* Restore interrupts temporarily.  */
            TX_RESTORE

            /* Disable interrupts again.  */
            TX_DISABLE
 800e08e:	65fb      	str	r3, [r7, #92]	; 0x5c

            /* Next, process the expiration of the associated timers at this
               time slot.  */
            while (expired_timers != TX_NULL)
 800e090:	e07f      	b.n	800e192 <_tx_timer_thread_entry+0x186>
            {

                /* Something is on the list.  Remove it and process the expiration.  */
                current_timer =  expired_timers;
 800e092:	68fb      	ldr	r3, [r7, #12]
 800e094:	64fb      	str	r3, [r7, #76]	; 0x4c

                /* Pickup the next timer.  */
                next_timer =  expired_timers -> tx_timer_internal_active_next;
 800e096:	68fb      	ldr	r3, [r7, #12]
 800e098:	691b      	ldr	r3, [r3, #16]
 800e09a:	64bb      	str	r3, [r7, #72]	; 0x48

                /* Set the reactivate_timer to NULL.  */
                reactivate_timer =  TX_NULL;
 800e09c:	2300      	movs	r3, #0
 800e09e:	60bb      	str	r3, [r7, #8]

                /* Determine if this is the only timer.  */
                if (current_timer == next_timer)
 800e0a0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800e0a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e0a4:	429a      	cmp	r2, r3
 800e0a6:	d102      	bne.n	800e0ae <_tx_timer_thread_entry+0xa2>
                {

                    /* Yes, this is the only timer in the list.  */

                    /* Set the head pointer to NULL.  */
                    expired_timers =  TX_NULL;
 800e0a8:	2300      	movs	r3, #0
 800e0aa:	60fb      	str	r3, [r7, #12]
 800e0ac:	e00e      	b.n	800e0cc <_tx_timer_thread_entry+0xc0>
                {

                    /* No, not the only expired timer.  */

                    /* Remove this timer from the expired list.  */
                    previous_timer =                                   current_timer -> tx_timer_internal_active_previous;
 800e0ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e0b0:	695b      	ldr	r3, [r3, #20]
 800e0b2:	647b      	str	r3, [r7, #68]	; 0x44
                    next_timer -> tx_timer_internal_active_previous =  previous_timer;
 800e0b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e0b6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e0b8:	615a      	str	r2, [r3, #20]
                    previous_timer -> tx_timer_internal_active_next =  next_timer;
 800e0ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e0bc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e0be:	611a      	str	r2, [r3, #16]

                    /* Modify the next timer's list head to point at the current list head.  */
                    next_timer -> tx_timer_internal_list_head =  &expired_timers;
 800e0c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e0c2:	f107 020c 	add.w	r2, r7, #12
 800e0c6:	619a      	str	r2, [r3, #24]

                    /* Set the list head pointer.  */
                    expired_timers =  next_timer;
 800e0c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e0ca:	60fb      	str	r3, [r7, #12]

                /* In any case, the timer is now off of the expired list.  */

                /* Determine if the timer has expired or if it is just a really
                   big timer that needs to be placed in the list again.  */
                if (current_timer -> tx_timer_internal_remaining_ticks > TX_TIMER_ENTRIES)
 800e0cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e0ce:	681b      	ldr	r3, [r3, #0]
 800e0d0:	2b20      	cmp	r3, #32
 800e0d2:	d911      	bls.n	800e0f8 <_tx_timer_thread_entry+0xec>
                    }
#endif

                    /* Decrement the remaining ticks of the timer.  */
                    current_timer -> tx_timer_internal_remaining_ticks =
                            current_timer -> tx_timer_internal_remaining_ticks - TX_TIMER_ENTRIES;
 800e0d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e0d6:	681b      	ldr	r3, [r3, #0]
 800e0d8:	f1a3 0220 	sub.w	r2, r3, #32
                    current_timer -> tx_timer_internal_remaining_ticks =
 800e0dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e0de:	601a      	str	r2, [r3, #0]

                    /* Set the timeout function to NULL in order to bypass the
                       expiration.  */
                    timeout_function =  TX_NULL;
 800e0e0:	2300      	movs	r3, #0
 800e0e2:	65bb      	str	r3, [r7, #88]	; 0x58

                    /* Make the timer appear that it is still active while interrupts
                       are enabled.  This will permit proper processing of a timer
                       deactivate from an ISR.  */
                    current_timer -> tx_timer_internal_list_head =    &reactivate_timer;
 800e0e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e0e6:	f107 0208 	add.w	r2, r7, #8
 800e0ea:	619a      	str	r2, [r3, #24]
                    current_timer -> tx_timer_internal_active_next =  current_timer;
 800e0ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e0ee:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800e0f0:	611a      	str	r2, [r3, #16]

                    /* Setup the temporary timer list head pointer.  */
                    reactivate_timer =  current_timer;
 800e0f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e0f4:	60bb      	str	r3, [r7, #8]
 800e0f6:	e01a      	b.n	800e12e <_tx_timer_thread_entry+0x122>
                    }
#endif

                    /* Copy the calling function and ID into local variables before interrupts
                       are re-enabled.  */
                    timeout_function =  current_timer -> tx_timer_internal_timeout_function;
 800e0f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e0fa:	689b      	ldr	r3, [r3, #8]
 800e0fc:	65bb      	str	r3, [r7, #88]	; 0x58
                    timeout_param =     current_timer -> tx_timer_internal_timeout_param;
 800e0fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e100:	68db      	ldr	r3, [r3, #12]
 800e102:	657b      	str	r3, [r7, #84]	; 0x54

                    /* Copy the reinitialize ticks into the remaining ticks.  */
                    current_timer -> tx_timer_internal_remaining_ticks =  current_timer -> tx_timer_internal_re_initialize_ticks;
 800e104:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e106:	685a      	ldr	r2, [r3, #4]
 800e108:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e10a:	601a      	str	r2, [r3, #0]

                    /* Determine if the timer should be reactivated.  */
                    if (current_timer -> tx_timer_internal_remaining_ticks != ((ULONG) 0))
 800e10c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e10e:	681b      	ldr	r3, [r3, #0]
 800e110:	2b00      	cmp	r3, #0
 800e112:	d009      	beq.n	800e128 <_tx_timer_thread_entry+0x11c>

                        /* Make the timer appear that it is still active while processing
                           the expiration routine and with interrupts enabled.  This will
                           permit proper processing of a timer deactivate from both the
                           expiration routine and an ISR.  */
                        current_timer -> tx_timer_internal_list_head =    &reactivate_timer;
 800e114:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e116:	f107 0208 	add.w	r2, r7, #8
 800e11a:	619a      	str	r2, [r3, #24]
                        current_timer -> tx_timer_internal_active_next =  current_timer;
 800e11c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e11e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800e120:	611a      	str	r2, [r3, #16]

                        /* Setup the temporary timer list head pointer.  */
                        reactivate_timer =  current_timer;
 800e122:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e124:	60bb      	str	r3, [r7, #8]
 800e126:	e002      	b.n	800e12e <_tx_timer_thread_entry+0x122>
                    else
                    {

                        /* Set the list pointer of this timer to NULL.  This is used to indicate
                           the timer is no longer active.  */
                        current_timer -> tx_timer_internal_list_head =  TX_NULL;
 800e128:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e12a:	2200      	movs	r2, #0
 800e12c:	619a      	str	r2, [r3, #24]
                    }
                }

                /* Set pointer to indicate the expired timer that is currently being processed.  */
                _tx_timer_expired_timer_ptr =  current_timer;
 800e12e:	4a33      	ldr	r2, [pc, #204]	; (800e1fc <_tx_timer_thread_entry+0x1f0>)
 800e130:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e132:	6013      	str	r3, [r2, #0]
 800e134:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e136:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800e138:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e13a:	f383 8810 	msr	PRIMASK, r3
}
 800e13e:	bf00      	nop

                /* Restore interrupts for timer expiration call.  */
                TX_RESTORE

                /* Call the timer-expiration function, if non-NULL.  */
                if (timeout_function != TX_NULL)
 800e140:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e142:	2b00      	cmp	r3, #0
 800e144:	d002      	beq.n	800e14c <_tx_timer_thread_entry+0x140>
                {

                    (timeout_function) (timeout_param);
 800e146:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e148:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800e14a:	4798      	blx	r3
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800e14c:	f3ef 8310 	mrs	r3, PRIMASK
 800e150:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 800e152:	6abb      	ldr	r3, [r7, #40]	; 0x28
    int_posture = __get_interrupt_posture();
 800e154:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 800e156:	b672      	cpsid	i
    return(int_posture);
 800e158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                }

                /* Lockout interrupts again.  */
                TX_DISABLE
 800e15a:	65fb      	str	r3, [r7, #92]	; 0x5c

                /* Clear expired timer pointer.  */
                _tx_timer_expired_timer_ptr =  TX_NULL;
 800e15c:	4b27      	ldr	r3, [pc, #156]	; (800e1fc <_tx_timer_thread_entry+0x1f0>)
 800e15e:	2200      	movs	r2, #0
 800e160:	601a      	str	r2, [r3, #0]

                /* Determine if the timer needs to be reactivated.  */
                if (reactivate_timer == current_timer)
 800e162:	68bb      	ldr	r3, [r7, #8]
 800e164:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800e166:	429a      	cmp	r2, r3
 800e168:	d105      	bne.n	800e176 <_tx_timer_thread_entry+0x16a>
#else

                    /* Reactivate through the timer activate function.  */

                    /* Clear the list head for the timer activate call.  */
                    current_timer -> tx_timer_internal_list_head = TX_NULL;
 800e16a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e16c:	2200      	movs	r2, #0
 800e16e:	619a      	str	r2, [r3, #24]

                    /* Activate the current timer.  */
                    _tx_timer_system_activate(current_timer);
 800e170:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800e172:	f7ff feb1 	bl	800ded8 <_tx_timer_system_activate>
 800e176:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e178:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800e17a:	69bb      	ldr	r3, [r7, #24]
 800e17c:	f383 8810 	msr	PRIMASK, r3
}
 800e180:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800e182:	f3ef 8310 	mrs	r3, PRIMASK
 800e186:	623b      	str	r3, [r7, #32]
    return(posture);
 800e188:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800e18a:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 800e18c:	b672      	cpsid	i
    return(int_posture);
 800e18e:	69fb      	ldr	r3, [r7, #28]

                /* Restore interrupts.  */
                TX_RESTORE

                /* Lockout interrupts again.  */
                TX_DISABLE
 800e190:	65fb      	str	r3, [r7, #92]	; 0x5c
            while (expired_timers != TX_NULL)
 800e192:	68fb      	ldr	r3, [r7, #12]
 800e194:	2b00      	cmp	r3, #0
 800e196:	f47f af7c 	bne.w	800e092 <_tx_timer_thread_entry+0x86>

            /* Finally, suspend this thread and wait for the next expiration.  */

            /* Determine if another expiration took place while we were in this
               thread.  If so, process another expiration.  */
            if (_tx_timer_expired == TX_FALSE)
 800e19a:	4b17      	ldr	r3, [pc, #92]	; (800e1f8 <_tx_timer_thread_entry+0x1ec>)
 800e19c:	681b      	ldr	r3, [r3, #0]
 800e19e:	2b00      	cmp	r3, #0
 800e1a0:	d116      	bne.n	800e1d0 <_tx_timer_thread_entry+0x1c4>
            {

                /* Otherwise, no timer expiration, so suspend the thread.  */

                /* Build pointer to the timer thread.  */
                thread_ptr =  &_tx_timer_thread;
 800e1a2:	4b17      	ldr	r3, [pc, #92]	; (800e200 <_tx_timer_thread_entry+0x1f4>)
 800e1a4:	653b      	str	r3, [r7, #80]	; 0x50

                /* Set the status to suspending, in order to indicate the
                   suspension is in progress.  */
                thread_ptr -> tx_thread_state =  TX_SUSPENDED;
 800e1a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e1a8:	2203      	movs	r2, #3
 800e1aa:	631a      	str	r2, [r3, #48]	; 0x30
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Set the suspending flag. */
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800e1ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e1ae:	2201      	movs	r2, #1
 800e1b0:	639a      	str	r2, [r3, #56]	; 0x38

                /* Increment the preempt disable count prior to suspending.  */
                _tx_thread_preempt_disable++;
 800e1b2:	4b14      	ldr	r3, [pc, #80]	; (800e204 <_tx_timer_thread_entry+0x1f8>)
 800e1b4:	681b      	ldr	r3, [r3, #0]
 800e1b6:	3301      	adds	r3, #1
 800e1b8:	4a12      	ldr	r2, [pc, #72]	; (800e204 <_tx_timer_thread_entry+0x1f8>)
 800e1ba:	6013      	str	r3, [r2, #0]
 800e1bc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e1be:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800e1c0:	697b      	ldr	r3, [r7, #20]
 800e1c2:	f383 8810 	msr	PRIMASK, r3
}
 800e1c6:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Call actual thread suspension routine.  */
                _tx_thread_system_suspend(thread_ptr);
 800e1c8:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800e1ca:	f7ff fc41 	bl	800da50 <_tx_thread_system_suspend>
 800e1ce:	e728      	b.n	800e022 <_tx_timer_thread_entry+0x16>
 800e1d0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e1d2:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800e1d4:	693b      	ldr	r3, [r7, #16]
 800e1d6:	f383 8810 	msr	PRIMASK, r3
}
 800e1da:	bf00      	nop
            TX_DISABLE
 800e1dc:	e721      	b.n	800e022 <_tx_timer_thread_entry+0x16>

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif

}
 800e1de:	bf00      	nop
 800e1e0:	3760      	adds	r7, #96	; 0x60
 800e1e2:	46bd      	mov	sp, r7
 800e1e4:	bd80      	pop	{r7, pc}
 800e1e6:	bf00      	nop
 800e1e8:	4154494d 	.word	0x4154494d
 800e1ec:	20001f38 	.word	0x20001f38
 800e1f0:	20001f34 	.word	0x20001f34
 800e1f4:	20001f30 	.word	0x20001f30
 800e1f8:	20001f3c 	.word	0x20001f3c
 800e1fc:	20001f48 	.word	0x20001f48
 800e200:	20001f4c 	.word	0x20001f4c
 800e204:	20001e9c 	.word	0x20001e9c

0800e208 <_txe_byte_pool_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_byte_pool_create(TX_BYTE_POOL *pool_ptr, CHAR *name_ptr, VOID *pool_start, ULONG pool_size, UINT pool_control_block_size)
{
 800e208:	b580      	push	{r7, lr}
 800e20a:	b092      	sub	sp, #72	; 0x48
 800e20c:	af00      	add	r7, sp, #0
 800e20e:	60f8      	str	r0, [r7, #12]
 800e210:	60b9      	str	r1, [r7, #8]
 800e212:	607a      	str	r2, [r7, #4]
 800e214:	603b      	str	r3, [r7, #0]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800e216:	2300      	movs	r3, #0
 800e218:	647b      	str	r3, [r7, #68]	; 0x44

    /* Check for an invalid byte pool pointer.  */
    if (pool_ptr == TX_NULL)
 800e21a:	68fb      	ldr	r3, [r7, #12]
 800e21c:	2b00      	cmp	r3, #0
 800e21e:	d102      	bne.n	800e226 <_txe_byte_pool_create+0x1e>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 800e220:	2302      	movs	r3, #2
 800e222:	647b      	str	r3, [r7, #68]	; 0x44
 800e224:	e075      	b.n	800e312 <_txe_byte_pool_create+0x10a>
    }

    /* Now see if the pool control block size is valid.  */
    else if (pool_control_block_size != (sizeof(TX_BYTE_POOL)))
 800e226:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e228:	2b34      	cmp	r3, #52	; 0x34
 800e22a:	d002      	beq.n	800e232 <_txe_byte_pool_create+0x2a>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 800e22c:	2302      	movs	r3, #2
 800e22e:	647b      	str	r3, [r7, #68]	; 0x44
 800e230:	e06f      	b.n	800e312 <_txe_byte_pool_create+0x10a>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800e232:	f3ef 8310 	mrs	r3, PRIMASK
 800e236:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 800e238:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 800e23a:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 800e23c:	b672      	cpsid	i
    return(int_posture);
 800e23e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 800e240:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 800e242:	4b3b      	ldr	r3, [pc, #236]	; (800e330 <_txe_byte_pool_create+0x128>)
 800e244:	681b      	ldr	r3, [r3, #0]
 800e246:	3301      	adds	r3, #1
 800e248:	4a39      	ldr	r2, [pc, #228]	; (800e330 <_txe_byte_pool_create+0x128>)
 800e24a:	6013      	str	r3, [r2, #0]
 800e24c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e24e:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800e250:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e252:	f383 8810 	msr	PRIMASK, r3
}
 800e256:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_pool =   _tx_byte_pool_created_ptr;
 800e258:	4b36      	ldr	r3, [pc, #216]	; (800e334 <_txe_byte_pool_create+0x12c>)
 800e25a:	681b      	ldr	r3, [r3, #0]
 800e25c:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_byte_pool_created_count; i++)
 800e25e:	2300      	movs	r3, #0
 800e260:	643b      	str	r3, [r7, #64]	; 0x40
 800e262:	e009      	b.n	800e278 <_txe_byte_pool_create+0x70>
        {

            /* Determine if this byte pool matches the pool in the list.  */
            if (pool_ptr == next_pool)
 800e264:	68fa      	ldr	r2, [r7, #12]
 800e266:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e268:	429a      	cmp	r2, r3
 800e26a:	d00b      	beq.n	800e284 <_txe_byte_pool_create+0x7c>
            }
            else
            {

                /* Move to the next pool.  */
                next_pool =  next_pool -> tx_byte_pool_created_next;
 800e26c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e26e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e270:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_byte_pool_created_count; i++)
 800e272:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e274:	3301      	adds	r3, #1
 800e276:	643b      	str	r3, [r7, #64]	; 0x40
 800e278:	4b2f      	ldr	r3, [pc, #188]	; (800e338 <_txe_byte_pool_create+0x130>)
 800e27a:	681b      	ldr	r3, [r3, #0]
 800e27c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e27e:	429a      	cmp	r2, r3
 800e280:	d3f0      	bcc.n	800e264 <_txe_byte_pool_create+0x5c>
 800e282:	e000      	b.n	800e286 <_txe_byte_pool_create+0x7e>
                break;
 800e284:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800e286:	f3ef 8310 	mrs	r3, PRIMASK
 800e28a:	623b      	str	r3, [r7, #32]
    return(posture);
 800e28c:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800e28e:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 800e290:	b672      	cpsid	i
    return(int_posture);
 800e292:	69fb      	ldr	r3, [r7, #28]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 800e294:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 800e296:	4b26      	ldr	r3, [pc, #152]	; (800e330 <_txe_byte_pool_create+0x128>)
 800e298:	681b      	ldr	r3, [r3, #0]
 800e29a:	3b01      	subs	r3, #1
 800e29c:	4a24      	ldr	r2, [pc, #144]	; (800e330 <_txe_byte_pool_create+0x128>)
 800e29e:	6013      	str	r3, [r2, #0]
 800e2a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e2a2:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800e2a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2a6:	f383 8810 	msr	PRIMASK, r3
}
 800e2aa:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 800e2ac:	f7ff fa96 	bl	800d7dc <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate pool.  */
        if (pool_ptr == next_pool)
 800e2b0:	68fa      	ldr	r2, [r7, #12]
 800e2b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e2b4:	429a      	cmp	r2, r3
 800e2b6:	d102      	bne.n	800e2be <_txe_byte_pool_create+0xb6>
        {

            /* Pool is already created, return appropriate error code.  */
            status =  TX_POOL_ERROR;
 800e2b8:	2302      	movs	r3, #2
 800e2ba:	647b      	str	r3, [r7, #68]	; 0x44
 800e2bc:	e029      	b.n	800e312 <_txe_byte_pool_create+0x10a>
        }

        /* Check for an invalid starting address.  */
        else if (pool_start == TX_NULL)
 800e2be:	687b      	ldr	r3, [r7, #4]
 800e2c0:	2b00      	cmp	r3, #0
 800e2c2:	d102      	bne.n	800e2ca <_txe_byte_pool_create+0xc2>
        {

            /* Null starting address pointer, return appropriate error.  */
            status =  TX_PTR_ERROR;
 800e2c4:	2303      	movs	r3, #3
 800e2c6:	647b      	str	r3, [r7, #68]	; 0x44
 800e2c8:	e023      	b.n	800e312 <_txe_byte_pool_create+0x10a>
        }

        /* Check for invalid pool size.  */
        else if (pool_size < TX_BYTE_POOL_MIN)
 800e2ca:	683b      	ldr	r3, [r7, #0]
 800e2cc:	2b63      	cmp	r3, #99	; 0x63
 800e2ce:	d802      	bhi.n	800e2d6 <_txe_byte_pool_create+0xce>
        {

            /* Pool not big enough, return appropriate error.  */
            status =  TX_SIZE_ERROR;
 800e2d0:	2305      	movs	r3, #5
 800e2d2:	647b      	str	r3, [r7, #68]	; 0x44
 800e2d4:	e01d      	b.n	800e312 <_txe_byte_pool_create+0x10a>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 800e2d6:	4b19      	ldr	r3, [pc, #100]	; (800e33c <_txe_byte_pool_create+0x134>)
 800e2d8:	681b      	ldr	r3, [r3, #0]
 800e2da:	637b      	str	r3, [r7, #52]	; 0x34

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (thread_ptr == &_tx_timer_thread)
 800e2dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e2de:	4a18      	ldr	r2, [pc, #96]	; (800e340 <_txe_byte_pool_create+0x138>)
 800e2e0:	4293      	cmp	r3, r2
 800e2e2:	d101      	bne.n	800e2e8 <_txe_byte_pool_create+0xe0>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 800e2e4:	2313      	movs	r3, #19
 800e2e6:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800e2e8:	f3ef 8305 	mrs	r3, IPSR
 800e2ec:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 800e2ee:	69ba      	ldr	r2, [r7, #24]
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800e2f0:	4b14      	ldr	r3, [pc, #80]	; (800e344 <_txe_byte_pool_create+0x13c>)
 800e2f2:	681b      	ldr	r3, [r3, #0]
 800e2f4:	4313      	orrs	r3, r2
 800e2f6:	2b00      	cmp	r3, #0
 800e2f8:	d00b      	beq.n	800e312 <_txe_byte_pool_create+0x10a>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800e2fa:	f3ef 8305 	mrs	r3, IPSR
 800e2fe:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800e300:	697a      	ldr	r2, [r7, #20]
            {

                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 800e302:	4b10      	ldr	r3, [pc, #64]	; (800e344 <_txe_byte_pool_create+0x13c>)
 800e304:	681b      	ldr	r3, [r3, #0]
 800e306:	4313      	orrs	r3, r2
 800e308:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800e30c:	d201      	bcs.n	800e312 <_txe_byte_pool_create+0x10a>
                {

                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 800e30e:	2313      	movs	r3, #19
 800e310:	647b      	str	r3, [r7, #68]	; 0x44
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800e312:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e314:	2b00      	cmp	r3, #0
 800e316:	d106      	bne.n	800e326 <_txe_byte_pool_create+0x11e>
    {

        /* Call actual byte pool create function.  */
        status =  _tx_byte_pool_create(pool_ptr, name_ptr, pool_start, pool_size);
 800e318:	683b      	ldr	r3, [r7, #0]
 800e31a:	687a      	ldr	r2, [r7, #4]
 800e31c:	68b9      	ldr	r1, [r7, #8]
 800e31e:	68f8      	ldr	r0, [r7, #12]
 800e320:	f7fe fc2a 	bl	800cb78 <_tx_byte_pool_create>
 800e324:	6478      	str	r0, [r7, #68]	; 0x44
    }

    /* Return completion status.  */
    return(status);
 800e326:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 800e328:	4618      	mov	r0, r3
 800e32a:	3748      	adds	r7, #72	; 0x48
 800e32c:	46bd      	mov	sp, r7
 800e32e:	bd80      	pop	{r7, pc}
 800e330:	20001e9c 	.word	0x20001e9c
 800e334:	20001df4 	.word	0x20001df4
 800e338:	20001df8 	.word	0x20001df8
 800e33c:	20001e04 	.word	0x20001e04
 800e340:	20001f4c 	.word	0x20001f4c
 800e344:	20000010 	.word	0x20000010

0800e348 <_txe_event_flags_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_event_flags_create(TX_EVENT_FLAGS_GROUP *group_ptr, CHAR *name_ptr, UINT event_control_block_size)
{
 800e348:	b580      	push	{r7, lr}
 800e34a:	b092      	sub	sp, #72	; 0x48
 800e34c:	af00      	add	r7, sp, #0
 800e34e:	60f8      	str	r0, [r7, #12]
 800e350:	60b9      	str	r1, [r7, #8]
 800e352:	607a      	str	r2, [r7, #4]
TX_THREAD                   *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800e354:	2300      	movs	r3, #0
 800e356:	647b      	str	r3, [r7, #68]	; 0x44

    /* Check for an invalid event flags group pointer.  */
    if (group_ptr == TX_NULL)
 800e358:	68fb      	ldr	r3, [r7, #12]
 800e35a:	2b00      	cmp	r3, #0
 800e35c:	d102      	bne.n	800e364 <_txe_event_flags_create+0x1c>
    {

        /* Event flags group pointer is invalid, return appropriate error code.  */
        status =  TX_GROUP_ERROR;
 800e35e:	2306      	movs	r3, #6
 800e360:	647b      	str	r3, [r7, #68]	; 0x44
 800e362:	e069      	b.n	800e438 <_txe_event_flags_create+0xf0>
    }

    /* Now check for proper control block size.  */
    else if (event_control_block_size != (sizeof(TX_EVENT_FLAGS_GROUP)))
 800e364:	687b      	ldr	r3, [r7, #4]
 800e366:	2b24      	cmp	r3, #36	; 0x24
 800e368:	d002      	beq.n	800e370 <_txe_event_flags_create+0x28>
    {

        /* Event flags group pointer is invalid, return appropriate error code.  */
        status =  TX_GROUP_ERROR;
 800e36a:	2306      	movs	r3, #6
 800e36c:	647b      	str	r3, [r7, #68]	; 0x44
 800e36e:	e063      	b.n	800e438 <_txe_event_flags_create+0xf0>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800e370:	f3ef 8310 	mrs	r3, PRIMASK
 800e374:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 800e376:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 800e378:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 800e37a:	b672      	cpsid	i
    return(int_posture);
 800e37c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 800e37e:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 800e380:	4b34      	ldr	r3, [pc, #208]	; (800e454 <_txe_event_flags_create+0x10c>)
 800e382:	681b      	ldr	r3, [r3, #0]
 800e384:	3301      	adds	r3, #1
 800e386:	4a33      	ldr	r2, [pc, #204]	; (800e454 <_txe_event_flags_create+0x10c>)
 800e388:	6013      	str	r3, [r2, #0]
 800e38a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e38c:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800e38e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e390:	f383 8810 	msr	PRIMASK, r3
}
 800e394:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_group =   _tx_event_flags_created_ptr;
 800e396:	4b30      	ldr	r3, [pc, #192]	; (800e458 <_txe_event_flags_create+0x110>)
 800e398:	681b      	ldr	r3, [r3, #0]
 800e39a:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_event_flags_created_count; i++)
 800e39c:	2300      	movs	r3, #0
 800e39e:	643b      	str	r3, [r7, #64]	; 0x40
 800e3a0:	e009      	b.n	800e3b6 <_txe_event_flags_create+0x6e>
        {

            /* Determine if this group matches the event flags group in the list.  */
            if (group_ptr == next_group)
 800e3a2:	68fa      	ldr	r2, [r7, #12]
 800e3a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e3a6:	429a      	cmp	r2, r3
 800e3a8:	d00b      	beq.n	800e3c2 <_txe_event_flags_create+0x7a>
            }
            else
            {

                /* Move to the next group.  */
                next_group =  next_group -> tx_event_flags_group_created_next;
 800e3aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e3ac:	699b      	ldr	r3, [r3, #24]
 800e3ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_event_flags_created_count; i++)
 800e3b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e3b2:	3301      	adds	r3, #1
 800e3b4:	643b      	str	r3, [r7, #64]	; 0x40
 800e3b6:	4b29      	ldr	r3, [pc, #164]	; (800e45c <_txe_event_flags_create+0x114>)
 800e3b8:	681b      	ldr	r3, [r3, #0]
 800e3ba:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e3bc:	429a      	cmp	r2, r3
 800e3be:	d3f0      	bcc.n	800e3a2 <_txe_event_flags_create+0x5a>
 800e3c0:	e000      	b.n	800e3c4 <_txe_event_flags_create+0x7c>
                break;
 800e3c2:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800e3c4:	f3ef 8310 	mrs	r3, PRIMASK
 800e3c8:	623b      	str	r3, [r7, #32]
    return(posture);
 800e3ca:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800e3cc:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 800e3ce:	b672      	cpsid	i
    return(int_posture);
 800e3d0:	69fb      	ldr	r3, [r7, #28]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 800e3d2:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 800e3d4:	4b1f      	ldr	r3, [pc, #124]	; (800e454 <_txe_event_flags_create+0x10c>)
 800e3d6:	681b      	ldr	r3, [r3, #0]
 800e3d8:	3b01      	subs	r3, #1
 800e3da:	4a1e      	ldr	r2, [pc, #120]	; (800e454 <_txe_event_flags_create+0x10c>)
 800e3dc:	6013      	str	r3, [r2, #0]
 800e3de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e3e0:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800e3e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3e4:	f383 8810 	msr	PRIMASK, r3
}
 800e3e8:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 800e3ea:	f7ff f9f7 	bl	800d7dc <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate event flag group.  */
        if (group_ptr == next_group)
 800e3ee:	68fa      	ldr	r2, [r7, #12]
 800e3f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e3f2:	429a      	cmp	r2, r3
 800e3f4:	d102      	bne.n	800e3fc <_txe_event_flags_create+0xb4>
        {

            /* Group is already created, return appropriate error code.  */
            status =  TX_GROUP_ERROR;
 800e3f6:	2306      	movs	r3, #6
 800e3f8:	647b      	str	r3, [r7, #68]	; 0x44
 800e3fa:	e01d      	b.n	800e438 <_txe_event_flags_create+0xf0>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 800e3fc:	4b18      	ldr	r3, [pc, #96]	; (800e460 <_txe_event_flags_create+0x118>)
 800e3fe:	681b      	ldr	r3, [r3, #0]
 800e400:	637b      	str	r3, [r7, #52]	; 0x34

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (thread_ptr == &_tx_timer_thread)
 800e402:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e404:	4a17      	ldr	r2, [pc, #92]	; (800e464 <_txe_event_flags_create+0x11c>)
 800e406:	4293      	cmp	r3, r2
 800e408:	d101      	bne.n	800e40e <_txe_event_flags_create+0xc6>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 800e40a:	2313      	movs	r3, #19
 800e40c:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800e40e:	f3ef 8305 	mrs	r3, IPSR
 800e412:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 800e414:	69ba      	ldr	r2, [r7, #24]
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800e416:	4b14      	ldr	r3, [pc, #80]	; (800e468 <_txe_event_flags_create+0x120>)
 800e418:	681b      	ldr	r3, [r3, #0]
 800e41a:	4313      	orrs	r3, r2
 800e41c:	2b00      	cmp	r3, #0
 800e41e:	d00b      	beq.n	800e438 <_txe_event_flags_create+0xf0>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800e420:	f3ef 8305 	mrs	r3, IPSR
 800e424:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800e426:	697a      	ldr	r2, [r7, #20]
            {

                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 800e428:	4b0f      	ldr	r3, [pc, #60]	; (800e468 <_txe_event_flags_create+0x120>)
 800e42a:	681b      	ldr	r3, [r3, #0]
 800e42c:	4313      	orrs	r3, r2
 800e42e:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800e432:	d201      	bcs.n	800e438 <_txe_event_flags_create+0xf0>
                {

                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 800e434:	2313      	movs	r3, #19
 800e436:	647b      	str	r3, [r7, #68]	; 0x44
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800e438:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e43a:	2b00      	cmp	r3, #0
 800e43c:	d104      	bne.n	800e448 <_txe_event_flags_create+0x100>
    {

        /* Call actual event flags create function.  */
        status =  _tx_event_flags_create(group_ptr, name_ptr);
 800e43e:	68b9      	ldr	r1, [r7, #8]
 800e440:	68f8      	ldr	r0, [r7, #12]
 800e442:	f7fe fc2f 	bl	800cca4 <_tx_event_flags_create>
 800e446:	6478      	str	r0, [r7, #68]	; 0x44
    }

    /* Return completion status.  */
    return(status);
 800e448:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 800e44a:	4618      	mov	r0, r3
 800e44c:	3748      	adds	r7, #72	; 0x48
 800e44e:	46bd      	mov	sp, r7
 800e450:	bd80      	pop	{r7, pc}
 800e452:	bf00      	nop
 800e454:	20001e9c 	.word	0x20001e9c
 800e458:	20001ddc 	.word	0x20001ddc
 800e45c:	20001de0 	.word	0x20001de0
 800e460:	20001e04 	.word	0x20001e04
 800e464:	20001f4c 	.word	0x20001f4c
 800e468:	20000010 	.word	0x20000010

0800e46c <_txe_event_flags_set>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_event_flags_set(TX_EVENT_FLAGS_GROUP *group_ptr, ULONG flags_to_set, UINT set_option)
{
 800e46c:	b580      	push	{r7, lr}
 800e46e:	b086      	sub	sp, #24
 800e470:	af00      	add	r7, sp, #0
 800e472:	60f8      	str	r0, [r7, #12]
 800e474:	60b9      	str	r1, [r7, #8]
 800e476:	607a      	str	r2, [r7, #4]

UINT        status;


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800e478:	2300      	movs	r3, #0
 800e47a:	617b      	str	r3, [r7, #20]

    /* Check for an invalid event flag group pointer.  */
    if (group_ptr == TX_NULL)
 800e47c:	68fb      	ldr	r3, [r7, #12]
 800e47e:	2b00      	cmp	r3, #0
 800e480:	d102      	bne.n	800e488 <_txe_event_flags_set+0x1c>
    {

        /* Event flags group pointer is invalid, return appropriate error code.  */
        status =  TX_GROUP_ERROR;
 800e482:	2306      	movs	r3, #6
 800e484:	617b      	str	r3, [r7, #20]
 800e486:	e00f      	b.n	800e4a8 <_txe_event_flags_set+0x3c>
    }

    /* Now check for invalid event flag group ID.  */
    else if (group_ptr -> tx_event_flags_group_id != TX_EVENT_FLAGS_ID)
 800e488:	68fb      	ldr	r3, [r7, #12]
 800e48a:	681b      	ldr	r3, [r3, #0]
 800e48c:	4a0d      	ldr	r2, [pc, #52]	; (800e4c4 <_txe_event_flags_set+0x58>)
 800e48e:	4293      	cmp	r3, r2
 800e490:	d002      	beq.n	800e498 <_txe_event_flags_set+0x2c>
    {

        /* Event flags group pointer is invalid, return appropriate error code.  */
        status =  TX_GROUP_ERROR;
 800e492:	2306      	movs	r3, #6
 800e494:	617b      	str	r3, [r7, #20]
 800e496:	e007      	b.n	800e4a8 <_txe_event_flags_set+0x3c>
    }
    else
    {

        /* Check for invalid set option.  */
        if (set_option != TX_AND)
 800e498:	687b      	ldr	r3, [r7, #4]
 800e49a:	2b02      	cmp	r3, #2
 800e49c:	d004      	beq.n	800e4a8 <_txe_event_flags_set+0x3c>
        {

            if (set_option != TX_OR)
 800e49e:	687b      	ldr	r3, [r7, #4]
 800e4a0:	2b00      	cmp	r3, #0
 800e4a2:	d001      	beq.n	800e4a8 <_txe_event_flags_set+0x3c>
            {

                /* Invalid set events option, return appropriate error.  */
                status =  TX_OPTION_ERROR;
 800e4a4:	2308      	movs	r3, #8
 800e4a6:	617b      	str	r3, [r7, #20]
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800e4a8:	697b      	ldr	r3, [r7, #20]
 800e4aa:	2b00      	cmp	r3, #0
 800e4ac:	d105      	bne.n	800e4ba <_txe_event_flags_set+0x4e>
    {

        /* Call actual event flags set function.  */
        status =  _tx_event_flags_set(group_ptr, flags_to_set, set_option);
 800e4ae:	687a      	ldr	r2, [r7, #4]
 800e4b0:	68b9      	ldr	r1, [r7, #8]
 800e4b2:	68f8      	ldr	r0, [r7, #12]
 800e4b4:	f7fe fc44 	bl	800cd40 <_tx_event_flags_set>
 800e4b8:	6178      	str	r0, [r7, #20]
    }

    /* Return completion status.  */
    return(status);
 800e4ba:	697b      	ldr	r3, [r7, #20]
}
 800e4bc:	4618      	mov	r0, r3
 800e4be:	3718      	adds	r7, #24
 800e4c0:	46bd      	mov	sp, r7
 800e4c2:	bd80      	pop	{r7, pc}
 800e4c4:	4456444e 	.word	0x4456444e

0800e4c8 <_txe_thread_create>:
UINT    _txe_thread_create(TX_THREAD *thread_ptr, CHAR *name_ptr,
                VOID (*entry_function)(ULONG id), ULONG entry_input,
                VOID *stack_start, ULONG stack_size,
                UINT priority, UINT preempt_threshold,
                ULONG time_slice, UINT auto_start, UINT thread_control_block_size)
{
 800e4c8:	b580      	push	{r7, lr}
 800e4ca:	b09a      	sub	sp, #104	; 0x68
 800e4cc:	af06      	add	r7, sp, #24
 800e4ce:	60f8      	str	r0, [r7, #12]
 800e4d0:	60b9      	str	r1, [r7, #8]
 800e4d2:	607a      	str	r2, [r7, #4]
 800e4d4:	603b      	str	r3, [r7, #0]
TX_THREAD       *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800e4d6:	2300      	movs	r3, #0
 800e4d8:	64fb      	str	r3, [r7, #76]	; 0x4c

    /* Check for an invalid thread pointer.  */
    if (thread_ptr == TX_NULL)
 800e4da:	68fb      	ldr	r3, [r7, #12]
 800e4dc:	2b00      	cmp	r3, #0
 800e4de:	d102      	bne.n	800e4e6 <_txe_thread_create+0x1e>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 800e4e0:	230e      	movs	r3, #14
 800e4e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e4e4:	e0bb      	b.n	800e65e <_txe_thread_create+0x196>
    }

    /* Now check for invalid thread control block size.  */
    else if (thread_control_block_size != (sizeof(TX_THREAD)))
 800e4e6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e4e8:	2bb0      	cmp	r3, #176	; 0xb0
 800e4ea:	d002      	beq.n	800e4f2 <_txe_thread_create+0x2a>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 800e4ec:	230e      	movs	r3, #14
 800e4ee:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e4f0:	e0b5      	b.n	800e65e <_txe_thread_create+0x196>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800e4f2:	f3ef 8310 	mrs	r3, PRIMASK
 800e4f6:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 800e4f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
    int_posture = __get_interrupt_posture();
 800e4fa:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 800e4fc:	b672      	cpsid	i
    return(int_posture);
 800e4fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 800e500:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 800e502:	4b64      	ldr	r3, [pc, #400]	; (800e694 <_txe_thread_create+0x1cc>)
 800e504:	681b      	ldr	r3, [r3, #0]
 800e506:	3301      	adds	r3, #1
 800e508:	4a62      	ldr	r2, [pc, #392]	; (800e694 <_txe_thread_create+0x1cc>)
 800e50a:	6013      	str	r3, [r2, #0]
 800e50c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e50e:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800e510:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e512:	f383 8810 	msr	PRIMASK, r3
}
 800e516:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        break_flag =   TX_FALSE;
 800e518:	2300      	movs	r3, #0
 800e51a:	64bb      	str	r3, [r7, #72]	; 0x48
        next_thread =  _tx_thread_created_ptr;
 800e51c:	4b5e      	ldr	r3, [pc, #376]	; (800e698 <_txe_thread_create+0x1d0>)
 800e51e:	681b      	ldr	r3, [r3, #0]
 800e520:	643b      	str	r3, [r7, #64]	; 0x40
        work_ptr =     TX_VOID_TO_UCHAR_POINTER_CONVERT(stack_start);
 800e522:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e524:	63bb      	str	r3, [r7, #56]	; 0x38
        work_ptr =     TX_UCHAR_POINTER_ADD(work_ptr, (stack_size - ((ULONG) 1)));
 800e526:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e528:	3b01      	subs	r3, #1
 800e52a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e52c:	4413      	add	r3, r2
 800e52e:	63bb      	str	r3, [r7, #56]	; 0x38
        stack_end =    TX_UCHAR_TO_VOID_POINTER_CONVERT(work_ptr);
 800e530:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e532:	637b      	str	r3, [r7, #52]	; 0x34
        for (i = ((ULONG) 0); i < _tx_thread_created_count; i++)
 800e534:	2300      	movs	r3, #0
 800e536:	647b      	str	r3, [r7, #68]	; 0x44
 800e538:	e02b      	b.n	800e592 <_txe_thread_create+0xca>
        {

            /* Determine if this thread matches the thread in the list.  */
            if (thread_ptr == next_thread)
 800e53a:	68fa      	ldr	r2, [r7, #12]
 800e53c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e53e:	429a      	cmp	r2, r3
 800e540:	d101      	bne.n	800e546 <_txe_thread_create+0x7e>
            {

                /* Set the break flag.  */
                break_flag =  TX_TRUE;
 800e542:	2301      	movs	r3, #1
 800e544:	64bb      	str	r3, [r7, #72]	; 0x48
            }

            /* Determine if we need to break the loop.  */
            if (break_flag == TX_TRUE)
 800e546:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e548:	2b01      	cmp	r3, #1
 800e54a:	d028      	beq.n	800e59e <_txe_thread_create+0xd6>
                /* Yes, break out of the loop.  */
                break;
            }

            /* Check the stack pointer to see if it overlaps with this thread's stack.  */
            if (stack_start >= next_thread -> tx_thread_stack_start)
 800e54c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e54e:	68db      	ldr	r3, [r3, #12]
 800e550:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800e552:	429a      	cmp	r2, r3
 800e554:	d308      	bcc.n	800e568 <_txe_thread_create+0xa0>
            {

                if (stack_start < next_thread -> tx_thread_stack_end)
 800e556:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e558:	691b      	ldr	r3, [r3, #16]
 800e55a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800e55c:	429a      	cmp	r2, r3
 800e55e:	d203      	bcs.n	800e568 <_txe_thread_create+0xa0>
                {

                    /* This stack overlaps with an existing thread, clear the stack pointer to
                       force a stack error below.  */
                    stack_start =  TX_NULL;
 800e560:	2300      	movs	r3, #0
 800e562:	65bb      	str	r3, [r7, #88]	; 0x58

                    /* Set the break flag.  */
                    break_flag =  TX_TRUE;
 800e564:	2301      	movs	r3, #1
 800e566:	64bb      	str	r3, [r7, #72]	; 0x48
                }
            }

            /* Check the end of the stack to see if it is inside this thread's stack area as well.  */
            if (stack_end >= next_thread -> tx_thread_stack_start)
 800e568:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e56a:	68db      	ldr	r3, [r3, #12]
 800e56c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e56e:	429a      	cmp	r2, r3
 800e570:	d308      	bcc.n	800e584 <_txe_thread_create+0xbc>
            {

                if (stack_end < next_thread -> tx_thread_stack_end)
 800e572:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e574:	691b      	ldr	r3, [r3, #16]
 800e576:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e578:	429a      	cmp	r2, r3
 800e57a:	d203      	bcs.n	800e584 <_txe_thread_create+0xbc>
                {

                    /* This stack overlaps with an existing thread, clear the stack pointer to
                       force a stack error below.  */
                    stack_start =  TX_NULL;
 800e57c:	2300      	movs	r3, #0
 800e57e:	65bb      	str	r3, [r7, #88]	; 0x58

                    /* Set the break flag.  */
                    break_flag =  TX_TRUE;
 800e580:	2301      	movs	r3, #1
 800e582:	64bb      	str	r3, [r7, #72]	; 0x48
                }
            }

            /* Move to the next thread.  */
            next_thread =  next_thread -> tx_thread_created_next;
 800e584:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e586:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e58a:	643b      	str	r3, [r7, #64]	; 0x40
        for (i = ((ULONG) 0); i < _tx_thread_created_count; i++)
 800e58c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e58e:	3301      	adds	r3, #1
 800e590:	647b      	str	r3, [r7, #68]	; 0x44
 800e592:	4b42      	ldr	r3, [pc, #264]	; (800e69c <_txe_thread_create+0x1d4>)
 800e594:	681b      	ldr	r3, [r3, #0]
 800e596:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e598:	429a      	cmp	r2, r3
 800e59a:	d3ce      	bcc.n	800e53a <_txe_thread_create+0x72>
 800e59c:	e000      	b.n	800e5a0 <_txe_thread_create+0xd8>
                break;
 800e59e:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800e5a0:	f3ef 8310 	mrs	r3, PRIMASK
 800e5a4:	61fb      	str	r3, [r7, #28]
    return(posture);
 800e5a6:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 800e5a8:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 800e5aa:	b672      	cpsid	i
    return(int_posture);
 800e5ac:	69bb      	ldr	r3, [r7, #24]
        }

        /* Disable interrupts.  */
        TX_DISABLE
 800e5ae:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 800e5b0:	4b38      	ldr	r3, [pc, #224]	; (800e694 <_txe_thread_create+0x1cc>)
 800e5b2:	681b      	ldr	r3, [r3, #0]
 800e5b4:	3b01      	subs	r3, #1
 800e5b6:	4a37      	ldr	r2, [pc, #220]	; (800e694 <_txe_thread_create+0x1cc>)
 800e5b8:	6013      	str	r3, [r2, #0]
 800e5ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e5bc:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800e5be:	6a3b      	ldr	r3, [r7, #32]
 800e5c0:	f383 8810 	msr	PRIMASK, r3
}
 800e5c4:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 800e5c6:	f7ff f909 	bl	800d7dc <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate thread.  */
        if (thread_ptr == next_thread)
 800e5ca:	68fa      	ldr	r2, [r7, #12]
 800e5cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e5ce:	429a      	cmp	r2, r3
 800e5d0:	d102      	bne.n	800e5d8 <_txe_thread_create+0x110>
        {

            /* Thread is already created, return appropriate error code.  */
            status =  TX_THREAD_ERROR;
 800e5d2:	230e      	movs	r3, #14
 800e5d4:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e5d6:	e042      	b.n	800e65e <_txe_thread_create+0x196>
        }

        /* Check for invalid starting address of stack.  */
        else if (stack_start == TX_NULL)
 800e5d8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e5da:	2b00      	cmp	r3, #0
 800e5dc:	d102      	bne.n	800e5e4 <_txe_thread_create+0x11c>
        {

            /* Invalid stack or entry point, return appropriate error code.  */
            status =  TX_PTR_ERROR;
 800e5de:	2303      	movs	r3, #3
 800e5e0:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e5e2:	e03c      	b.n	800e65e <_txe_thread_create+0x196>
        }

        /* Check for invalid thread entry point.  */
        else if (entry_function == TX_NULL)
 800e5e4:	687b      	ldr	r3, [r7, #4]
 800e5e6:	2b00      	cmp	r3, #0
 800e5e8:	d102      	bne.n	800e5f0 <_txe_thread_create+0x128>
        {

            /* Invalid stack or entry point, return appropriate error code.  */
            status =  TX_PTR_ERROR;
 800e5ea:	2303      	movs	r3, #3
 800e5ec:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e5ee:	e036      	b.n	800e65e <_txe_thread_create+0x196>
        }

        /* Check the stack size.  */
        else if (stack_size < ((ULONG) TX_MINIMUM_STACK))
 800e5f0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e5f2:	2bc7      	cmp	r3, #199	; 0xc7
 800e5f4:	d802      	bhi.n	800e5fc <_txe_thread_create+0x134>
        {

            /* Stack is not big enough, return appropriate error code.  */
            status =  TX_SIZE_ERROR;
 800e5f6:	2305      	movs	r3, #5
 800e5f8:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e5fa:	e030      	b.n	800e65e <_txe_thread_create+0x196>
        }

        /* Check the priority specified.  */
        else if (priority >= ((UINT) TX_MAX_PRIORITIES))
 800e5fc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e5fe:	2b1f      	cmp	r3, #31
 800e600:	d902      	bls.n	800e608 <_txe_thread_create+0x140>
        {

            /* Invalid priority selected, return appropriate error code.  */
            status =  TX_PRIORITY_ERROR;
 800e602:	230f      	movs	r3, #15
 800e604:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e606:	e02a      	b.n	800e65e <_txe_thread_create+0x196>
        }

        /* Check preemption threshold. */
        else if (preempt_threshold > priority)
 800e608:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800e60a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e60c:	429a      	cmp	r2, r3
 800e60e:	d902      	bls.n	800e616 <_txe_thread_create+0x14e>
        {

            /* Invalid preempt threshold, return appropriate error code.  */
            status =  TX_THRESH_ERROR;
 800e610:	2318      	movs	r3, #24
 800e612:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e614:	e023      	b.n	800e65e <_txe_thread_create+0x196>
        }

        /* Check the start selection.  */
        else if (auto_start > TX_AUTO_START)
 800e616:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e618:	2b01      	cmp	r3, #1
 800e61a:	d902      	bls.n	800e622 <_txe_thread_create+0x15a>
        {

            /* Invalid auto start selection, return appropriate error code.  */
            status =  TX_START_ERROR;
 800e61c:	2310      	movs	r3, #16
 800e61e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e620:	e01d      	b.n	800e65e <_txe_thread_create+0x196>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(current_thread)
 800e622:	4b1f      	ldr	r3, [pc, #124]	; (800e6a0 <_txe_thread_create+0x1d8>)
 800e624:	681b      	ldr	r3, [r3, #0]
 800e626:	633b      	str	r3, [r7, #48]	; 0x30

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (current_thread == &_tx_timer_thread)
 800e628:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e62a:	4a1e      	ldr	r2, [pc, #120]	; (800e6a4 <_txe_thread_create+0x1dc>)
 800e62c:	4293      	cmp	r3, r2
 800e62e:	d101      	bne.n	800e634 <_txe_thread_create+0x16c>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 800e630:	2313      	movs	r3, #19
 800e632:	64fb      	str	r3, [r7, #76]	; 0x4c
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800e634:	f3ef 8305 	mrs	r3, IPSR
 800e638:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800e63a:	697a      	ldr	r2, [r7, #20]
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800e63c:	4b1a      	ldr	r3, [pc, #104]	; (800e6a8 <_txe_thread_create+0x1e0>)
 800e63e:	681b      	ldr	r3, [r3, #0]
 800e640:	4313      	orrs	r3, r2
 800e642:	2b00      	cmp	r3, #0
 800e644:	d00b      	beq.n	800e65e <_txe_thread_create+0x196>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800e646:	f3ef 8305 	mrs	r3, IPSR
 800e64a:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 800e64c:	693a      	ldr	r2, [r7, #16]
            {

                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 800e64e:	4b16      	ldr	r3, [pc, #88]	; (800e6a8 <_txe_thread_create+0x1e0>)
 800e650:	681b      	ldr	r3, [r3, #0]
 800e652:	4313      	orrs	r3, r2
 800e654:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800e658:	d201      	bcs.n	800e65e <_txe_thread_create+0x196>
                {

                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 800e65a:	2313      	movs	r3, #19
 800e65c:	64fb      	str	r3, [r7, #76]	; 0x4c
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800e65e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e660:	2b00      	cmp	r3, #0
 800e662:	d112      	bne.n	800e68a <_txe_thread_create+0x1c2>
    {

        /* Call actual thread create function.  */
        status =  _tx_thread_create(thread_ptr, name_ptr, entry_function, entry_input,
 800e664:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e666:	9305      	str	r3, [sp, #20]
 800e668:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e66a:	9304      	str	r3, [sp, #16]
 800e66c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e66e:	9303      	str	r3, [sp, #12]
 800e670:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e672:	9302      	str	r3, [sp, #8]
 800e674:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e676:	9301      	str	r3, [sp, #4]
 800e678:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e67a:	9300      	str	r3, [sp, #0]
 800e67c:	683b      	ldr	r3, [r7, #0]
 800e67e:	687a      	ldr	r2, [r7, #4]
 800e680:	68b9      	ldr	r1, [r7, #8]
 800e682:	68f8      	ldr	r0, [r7, #12]
 800e684:	f7fe fddc 	bl	800d240 <_tx_thread_create>
 800e688:	64f8      	str	r0, [r7, #76]	; 0x4c
                        stack_start, stack_size, priority, preempt_threshold,
                        time_slice, auto_start);
    }

    /* Return completion status.  */
    return(status);
 800e68a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 800e68c:	4618      	mov	r0, r3
 800e68e:	3750      	adds	r7, #80	; 0x50
 800e690:	46bd      	mov	sp, r7
 800e692:	bd80      	pop	{r7, pc}
 800e694:	20001e9c 	.word	0x20001e9c
 800e698:	20001e0c 	.word	0x20001e0c
 800e69c:	20001e10 	.word	0x20001e10
 800e6a0:	20001e04 	.word	0x20001e04
 800e6a4:	20001f4c 	.word	0x20001f4c
 800e6a8:	20000010 	.word	0x20000010

0800e6ac <_txe_thread_resume>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_thread_resume(TX_THREAD *thread_ptr)
{
 800e6ac:	b580      	push	{r7, lr}
 800e6ae:	b084      	sub	sp, #16
 800e6b0:	af00      	add	r7, sp, #0
 800e6b2:	6078      	str	r0, [r7, #4]

UINT    status;


    /* Check for an invalid thread pointer.  */
    if (thread_ptr == TX_NULL)
 800e6b4:	687b      	ldr	r3, [r7, #4]
 800e6b6:	2b00      	cmp	r3, #0
 800e6b8:	d102      	bne.n	800e6c0 <_txe_thread_resume+0x14>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 800e6ba:	230e      	movs	r3, #14
 800e6bc:	60fb      	str	r3, [r7, #12]
 800e6be:	e00b      	b.n	800e6d8 <_txe_thread_resume+0x2c>
    }

    /* Now check for invalid thread ID.  */
    else if (thread_ptr -> tx_thread_id != TX_THREAD_ID)
 800e6c0:	687b      	ldr	r3, [r7, #4]
 800e6c2:	681b      	ldr	r3, [r3, #0]
 800e6c4:	4a07      	ldr	r2, [pc, #28]	; (800e6e4 <_txe_thread_resume+0x38>)
 800e6c6:	4293      	cmp	r3, r2
 800e6c8:	d002      	beq.n	800e6d0 <_txe_thread_resume+0x24>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 800e6ca:	230e      	movs	r3, #14
 800e6cc:	60fb      	str	r3, [r7, #12]
 800e6ce:	e003      	b.n	800e6d8 <_txe_thread_resume+0x2c>
    }
    else
    {

        /* Call actual thread resume function.  */
        status =  _tx_thread_resume(thread_ptr);
 800e6d0:	6878      	ldr	r0, [r7, #4]
 800e6d2:	f7fe fee7 	bl	800d4a4 <_tx_thread_resume>
 800e6d6:	60f8      	str	r0, [r7, #12]
    }

    /* Return completion status.  */
    return(status);
 800e6d8:	68fb      	ldr	r3, [r7, #12]
}
 800e6da:	4618      	mov	r0, r3
 800e6dc:	3710      	adds	r7, #16
 800e6de:	46bd      	mov	sp, r7
 800e6e0:	bd80      	pop	{r7, pc}
 800e6e2:	bf00      	nop
 800e6e4:	54485244 	.word	0x54485244

0800e6e8 <_txe_thread_suspend>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_thread_suspend(TX_THREAD *thread_ptr)
{
 800e6e8:	b580      	push	{r7, lr}
 800e6ea:	b084      	sub	sp, #16
 800e6ec:	af00      	add	r7, sp, #0
 800e6ee:	6078      	str	r0, [r7, #4]

UINT    status;


    /* Check for an invalid thread pointer.  */
    if (thread_ptr == TX_NULL)
 800e6f0:	687b      	ldr	r3, [r7, #4]
 800e6f2:	2b00      	cmp	r3, #0
 800e6f4:	d102      	bne.n	800e6fc <_txe_thread_suspend+0x14>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 800e6f6:	230e      	movs	r3, #14
 800e6f8:	60fb      	str	r3, [r7, #12]
 800e6fa:	e00b      	b.n	800e714 <_txe_thread_suspend+0x2c>
    }

    /* Now check for invalid thread ID.  */
    else if (thread_ptr -> tx_thread_id != TX_THREAD_ID)
 800e6fc:	687b      	ldr	r3, [r7, #4]
 800e6fe:	681b      	ldr	r3, [r3, #0]
 800e700:	4a07      	ldr	r2, [pc, #28]	; (800e720 <_txe_thread_suspend+0x38>)
 800e702:	4293      	cmp	r3, r2
 800e704:	d002      	beq.n	800e70c <_txe_thread_suspend+0x24>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 800e706:	230e      	movs	r3, #14
 800e708:	60fb      	str	r3, [r7, #12]
 800e70a:	e003      	b.n	800e714 <_txe_thread_suspend+0x2c>
    }
    else
    {

        /* Call actual thread suspend function.  */
        status =  _tx_thread_suspend(thread_ptr);
 800e70c:	6878      	ldr	r0, [r7, #4]
 800e70e:	f7fe fff5 	bl	800d6fc <_tx_thread_suspend>
 800e712:	60f8      	str	r0, [r7, #12]
    }

    /* Return completion status.  */
    return(status);
 800e714:	68fb      	ldr	r3, [r7, #12]
}
 800e716:	4618      	mov	r0, r3
 800e718:	3710      	adds	r7, #16
 800e71a:	46bd      	mov	sp, r7
 800e71c:	bd80      	pop	{r7, pc}
 800e71e:	bf00      	nop
 800e720:	54485244 	.word	0x54485244

0800e724 <__libc_init_array>:
 800e724:	b570      	push	{r4, r5, r6, lr}
 800e726:	4d0d      	ldr	r5, [pc, #52]	; (800e75c <__libc_init_array+0x38>)
 800e728:	2600      	movs	r6, #0
 800e72a:	4c0d      	ldr	r4, [pc, #52]	; (800e760 <__libc_init_array+0x3c>)
 800e72c:	1b64      	subs	r4, r4, r5
 800e72e:	10a4      	asrs	r4, r4, #2
 800e730:	42a6      	cmp	r6, r4
 800e732:	d109      	bne.n	800e748 <__libc_init_array+0x24>
 800e734:	4d0b      	ldr	r5, [pc, #44]	; (800e764 <__libc_init_array+0x40>)
 800e736:	2600      	movs	r6, #0
 800e738:	4c0b      	ldr	r4, [pc, #44]	; (800e768 <__libc_init_array+0x44>)
 800e73a:	f000 f81f 	bl	800e77c <_init>
 800e73e:	1b64      	subs	r4, r4, r5
 800e740:	10a4      	asrs	r4, r4, #2
 800e742:	42a6      	cmp	r6, r4
 800e744:	d105      	bne.n	800e752 <__libc_init_array+0x2e>
 800e746:	bd70      	pop	{r4, r5, r6, pc}
 800e748:	f855 3b04 	ldr.w	r3, [r5], #4
 800e74c:	3601      	adds	r6, #1
 800e74e:	4798      	blx	r3
 800e750:	e7ee      	b.n	800e730 <__libc_init_array+0xc>
 800e752:	f855 3b04 	ldr.w	r3, [r5], #4
 800e756:	3601      	adds	r6, #1
 800e758:	4798      	blx	r3
 800e75a:	e7f2      	b.n	800e742 <__libc_init_array+0x1e>
 800e75c:	0800edc0 	.word	0x0800edc0
 800e760:	0800edc0 	.word	0x0800edc0
 800e764:	0800edc0 	.word	0x0800edc0
 800e768:	0800edc4 	.word	0x0800edc4

0800e76c <memset>:
 800e76c:	4402      	add	r2, r0
 800e76e:	4603      	mov	r3, r0
 800e770:	4293      	cmp	r3, r2
 800e772:	d100      	bne.n	800e776 <memset+0xa>
 800e774:	4770      	bx	lr
 800e776:	f803 1b01 	strb.w	r1, [r3], #1
 800e77a:	e7f9      	b.n	800e770 <memset+0x4>

0800e77c <_init>:
 800e77c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e77e:	bf00      	nop
 800e780:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e782:	bc08      	pop	{r3}
 800e784:	469e      	mov	lr, r3
 800e786:	4770      	bx	lr

0800e788 <_fini>:
 800e788:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e78a:	bf00      	nop
 800e78c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e78e:	bc08      	pop	{r3}
 800e790:	469e      	mov	lr, r3
 800e792:	4770      	bx	lr
