
SurveillanceSystem.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000234  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e6f0  08000234  08000234  00010234  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000062c  0800e924  0800e924  0001e924  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800ef50  0800ef50  0001ef50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800ef54  0800ef54  0001ef54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .trace        00000000  20000000  20000000  00020014  2**0
                  CONTENTS
  6 .data         00000014  20000000  0800ef58  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000028d4  20000014  0800ef6c  00020014  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  200028e8  0800ef6c  000228e8  2**0
                  ALLOC
  9 .ARM.attributes 00000036  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 10 .debug_info   0003420a  00000000  00000000  0002004a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00008256  00000000  00000000  00054254  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000023d8  00000000  00000000  0005c4b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001eb8  00000000  00000000  0005e888  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003cf46  00000000  00000000  00060740  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0003642a  00000000  00000000  0009d686  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0015f3ce  00000000  00000000  000d3ab0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  00232e7e  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000088e8  00000000  00000000  00232ed0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000234 <__do_global_dtors_aux>:
 8000234:	b510      	push	{r4, lr}
 8000236:	4c05      	ldr	r4, [pc, #20]	; (800024c <__do_global_dtors_aux+0x18>)
 8000238:	7823      	ldrb	r3, [r4, #0]
 800023a:	b933      	cbnz	r3, 800024a <__do_global_dtors_aux+0x16>
 800023c:	4b04      	ldr	r3, [pc, #16]	; (8000250 <__do_global_dtors_aux+0x1c>)
 800023e:	b113      	cbz	r3, 8000246 <__do_global_dtors_aux+0x12>
 8000240:	4804      	ldr	r0, [pc, #16]	; (8000254 <__do_global_dtors_aux+0x20>)
 8000242:	e000      	b.n	8000246 <__do_global_dtors_aux+0x12>
 8000244:	bf00      	nop
 8000246:	2301      	movs	r3, #1
 8000248:	7023      	strb	r3, [r4, #0]
 800024a:	bd10      	pop	{r4, pc}
 800024c:	20000014 	.word	0x20000014
 8000250:	00000000 	.word	0x00000000
 8000254:	0800e90c 	.word	0x0800e90c

08000258 <frame_dummy>:
 8000258:	b508      	push	{r3, lr}
 800025a:	4b03      	ldr	r3, [pc, #12]	; (8000268 <frame_dummy+0x10>)
 800025c:	b11b      	cbz	r3, 8000266 <frame_dummy+0xe>
 800025e:	4903      	ldr	r1, [pc, #12]	; (800026c <frame_dummy+0x14>)
 8000260:	4803      	ldr	r0, [pc, #12]	; (8000270 <frame_dummy+0x18>)
 8000262:	e000      	b.n	8000266 <frame_dummy+0xe>
 8000264:	bf00      	nop
 8000266:	bd08      	pop	{r3, pc}
 8000268:	00000000 	.word	0x00000000
 800026c:	20000018 	.word	0x20000018
 8000270:	0800e90c 	.word	0x0800e90c

08000274 <_tx_initialize_low_level>:
    .thumb_func
.type _tx_initialize_low_level, function
_tx_initialize_low_level:

    /* Disable interrupts during ThreadX initialization.  */
    CPSID   i
 8000274:	b672      	cpsid	i
    LDR     r1, =__RAM_segment_used_end__           // Build first free address
    ADD     r1, r1, #4                              //
    STR     r1, [r0]                                // Setup first unused memory pointer
#endif
    /* Setup Vector Table Offset Register.  */
    MOV     r0, #0xE000E000                         // Build address of NVIC registers
 8000276:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
    LDR     r1, =g_pfnVectors                       // Pickup address of vector table
 800027a:	4917      	ldr	r1, [pc, #92]	; (80002d8 <__tx_DBGHandler+0x4>)
    STR     r1, [r0, #0xD08]                        // Set vector table address
 800027c:	f8c0 1d08 	str.w	r1, [r0, #3336]	; 0xd08

    /* Enable the cycle count register.  */
    LDR     r0, =0xE0001000                         // Build address of DWT register
 8000280:	4816      	ldr	r0, [pc, #88]	; (80002dc <__tx_DBGHandler+0x8>)
    LDR     r1, [r0]                                // Pickup the current value
 8000282:	6801      	ldr	r1, [r0, #0]
    ORR     r1, r1, #1                              // Set the CYCCNTENA bit
 8000284:	f041 0101 	orr.w	r1, r1, #1
    STR     r1, [r0]                                // Enable the cycle count register
 8000288:	6001      	str	r1, [r0, #0]

    /* Set system stack pointer from vector value.  */
    LDR     r0, =_tx_thread_system_stack_ptr        // Build address of system stack pointer
 800028a:	4815      	ldr	r0, [pc, #84]	; (80002e0 <__tx_DBGHandler+0xc>)
    LDR     r1, =g_pfnVectors                       // Pickup address of vector table
 800028c:	4912      	ldr	r1, [pc, #72]	; (80002d8 <__tx_DBGHandler+0x4>)
    LDR     r1, [r1]                                // Pickup reset stack pointer
 800028e:	6809      	ldr	r1, [r1, #0]
    STR     r1, [r0]                                // Save system stack pointer
 8000290:	6001      	str	r1, [r0, #0]

    /* Configure SysTick.  */
    MOV     r0, #0xE000E000                         // Build address of NVIC registers
 8000292:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
    LDR     r1, =SYSTICK_CYCLES
 8000296:	4913      	ldr	r1, [pc, #76]	; (80002e4 <__tx_DBGHandler+0x10>)
    STR     r1, [r0, #0x14]                         // Setup SysTick Reload Value
 8000298:	6141      	str	r1, [r0, #20]
    MOV     r1, #0x7                                // Build SysTick Control Enable Value
 800029a:	f04f 0107 	mov.w	r1, #7
    STR     r1, [r0, #0x10]                         // Setup SysTick Control
 800029e:	6101      	str	r1, [r0, #16]

    /* Configure handler priorities.  */
    LDR     r1, =0x00000000                         // Rsrv, UsgF, BusF, MemM
 80002a0:	f04f 0100 	mov.w	r1, #0
    STR     r1, [r0, #0xD18]                        // Setup System Handlers 4-7 Priority Registers
 80002a4:	f8c0 1d18 	str.w	r1, [r0, #3352]	; 0xd18

    LDR     r1, =0xFF000000                         // SVCl, Rsrv, Rsrv, Rsrv
 80002a8:	f04f 417f 	mov.w	r1, #4278190080	; 0xff000000
    STR     r1, [r0, #0xD1C]                        // Setup System Handlers 8-11 Priority Registers
 80002ac:	f8c0 1d1c 	str.w	r1, [r0, #3356]	; 0xd1c
                                                    // Note: SVC must be lowest priority, which is 0xFF

    LDR     r1, =0x40FF0000                         // SysT, PnSV, Rsrv, DbgM
 80002b0:	490d      	ldr	r1, [pc, #52]	; (80002e8 <__tx_DBGHandler+0x14>)
    STR     r1, [r0, #0xD20]                        // Setup System Handlers 12-15 Priority Registers
 80002b2:	f8c0 1d20 	str.w	r1, [r0, #3360]	; 0xd20
                                                    // Note: PnSV must be lowest priority, which is 0xFF

    /* Return to caller.  */
    BX      lr
 80002b6:	4770      	bx	lr

080002b8 <__tx_BadHandler>:
    .eabi_attribute Tag_ABI_align_preserved, 1
    .global  __tx_BadHandler
    .thumb_func
.type __tx_BadHandler, function
__tx_BadHandler:
    B       __tx_BadHandler
 80002b8:	f7ff bffe 	b.w	80002b8 <__tx_BadHandler>

080002bc <__tx_IntHandler>:
    .thumb_func
.type __tx_IntHandler, function
__tx_IntHandler:
// VOID InterruptHandler (VOID)
// {
    PUSH    {r0,lr}     // Save LR (and dummy r0 to maintain stack alignment)
 80002bc:	b501      	push	{r0, lr}
    /* Do interrupt handler work here */
    /* .... */
#if (defined(TX_ENABLE_EXECUTION_CHANGE_NOTIFY) || defined(TX_EXECUTION_PROFILE_ENABLE))
    BL      _tx_execution_isr_exit              // Call the ISR exit function
#endif
    POP     {r0,lr}
 80002be:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    BX      lr
 80002c2:	4770      	bx	lr

080002c4 <SysTick_Handler>:
    .thumb_func
.type SysTick_Handler, function
SysTick_Handler:
// VOID TimerInterruptHandler (VOID)
// {
    PUSH    {r0,lr}     // Save LR (and dummy r0 to maintain stack alignment)
 80002c4:	b501      	push	{r0, lr}
#if (defined(TX_ENABLE_EXECUTION_CHANGE_NOTIFY) || defined(TX_EXECUTION_PROFILE_ENABLE))
    BL      _tx_execution_isr_enter             // Call the ISR enter function
#endif
    BL      _tx_timer_interrupt
 80002c6:	f000 f897 	bl	80003f8 <_tx_timer_interrupt>
#if (defined(TX_ENABLE_EXECUTION_CHANGE_NOTIFY) || defined(TX_EXECUTION_PROFILE_ENABLE))
    BL      _tx_execution_isr_exit              // Call the ISR exit function
#endif
    POP     {r0,lr}
 80002ca:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    BX      lr
 80002ce:	4770      	bx	lr

080002d0 <__tx_NMIHandler>:
    .eabi_attribute Tag_ABI_align_preserved, 1
    .global  __tx_NMIHandler
    .thumb_func
.type __tx_NMIHandler, function
__tx_NMIHandler:
    B       __tx_NMIHandler
 80002d0:	f7ff bffe 	b.w	80002d0 <__tx_NMIHandler>

080002d4 <__tx_DBGHandler>:
    .eabi_attribute Tag_ABI_align_preserved, 1
    .global  __tx_DBGHandler
    .thumb_func
.type __tx_DBGHandler, function
__tx_DBGHandler:
    B       __tx_DBGHandler
 80002d4:	f7ff bffe 	b.w	80002d4 <__tx_DBGHandler>
    LDR     r1, =g_pfnVectors                       // Pickup address of vector table
 80002d8:	08000000 	.word	0x08000000
    LDR     r0, =0xE0001000                         // Build address of DWT register
 80002dc:	e0001000 	.word	0xe0001000
    LDR     r0, =_tx_thread_system_stack_ptr        // Build address of system stack pointer
 80002e0:	200022dc 	.word	0x200022dc
    LDR     r1, =SYSTICK_CYCLES
 80002e4:	001869ff 	.word	0x001869ff
    LDR     r1, =0x40FF0000                         // SysT, PnSV, Rsrv, DbgM
 80002e8:	40ff0000 	.word	0x40ff0000

080002ec <_tx_thread_schedule>:
    /* This function should only ever be called on Cortex-M
       from the first schedule request. Subsequent scheduling occurs
       from the PendSV handling routine below. */

    /* Clear the preempt-disable flag to enable rescheduling after initialization on Cortex-M targets.  */
    MOV     r0, #0                                  // Build value for TX_FALSE
 80002ec:	f04f 0000 	mov.w	r0, #0
    LDR     r2, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 80002f0:	4a2d      	ldr	r2, [pc, #180]	; (80003a8 <_tx_vfp_access+0x4>)
    STR     r0, [r2, #0]                            // Clear preempt disable flag
 80002f2:	6010      	str	r0, [r2, #0]

#ifdef __ARM_FP
    /* Clear CONTROL.FPCA bit so VFP registers aren't unnecessarily stacked.  */
    MRS     r0, CONTROL                             // Pickup current CONTROL register
 80002f4:	f3ef 8014 	mrs	r0, CONTROL
    BIC     r0, r0, #4                              // Clear the FPCA bit
 80002f8:	f020 0004 	bic.w	r0, r0, #4
    MSR     CONTROL, r0                             // Setup new CONTROL register
 80002fc:	f380 8814 	msr	CONTROL, r0
#endif

    /* Enable interrupts */
    CPSIE   i
 8000300:	b662      	cpsie	i

    /* Enter the scheduler for the first time.  */
    MOV     r0, #0x10000000                         // Load PENDSVSET bit
 8000302:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    MOV     r1, #0xE000E000                         // Load NVIC base
 8000306:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    STR     r0, [r1, #0xD04]                        // Set PENDSVBIT in ICSR
 800030a:	f8c1 0d04 	str.w	r0, [r1, #3332]	; 0xd04
    DSB                                             // Complete all memory accesses
 800030e:	f3bf 8f4f 	dsb	sy
    ISB                                             // Flush pipeline
 8000312:	f3bf 8f6f 	isb	sy

08000316 <__tx_wait_here>:

    /* Wait here for the PendSV to take place.  */

__tx_wait_here:
    B       __tx_wait_here                          // Wait for the PendSV to happen
 8000316:	e7fe      	b.n	8000316 <__tx_wait_here>

08000318 <PendSV_Handler>:
    BL      _tx_execution_thread_exit               // Call the thread exit function
    POP     {r0, lr}                                // Recover LR
    CPSIE   i                                       // Enable interrupts
#endif

    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 8000318:	4824      	ldr	r0, [pc, #144]	; (80003ac <_tx_vfp_access+0x8>)
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 800031a:	4a25      	ldr	r2, [pc, #148]	; (80003b0 <_tx_vfp_access+0xc>)
    MOV     r3, #0                                  // Build NULL value
 800031c:	f04f 0300 	mov.w	r3, #0
    LDR     r1, [r0]                                // Pickup current thread pointer
 8000320:	6801      	ldr	r1, [r0, #0]

    /* Determine if there is a current thread to finish preserving.  */

    CBZ     r1, __tx_ts_new                         // If NULL, skip preservation
 8000322:	b191      	cbz	r1, 800034a <__tx_ts_new>

    /* Recover PSP and preserve current thread context.  */

    STR     r3, [r0]                                // Set _tx_thread_current_ptr to NULL
 8000324:	6003      	str	r3, [r0, #0]
    MRS     r12, PSP                                // Pickup PSP pointer (thread's stack pointer)
 8000326:	f3ef 8c09 	mrs	ip, PSP
    STMDB   r12!, {r4-r11}                          // Save its remaining registers
 800032a:	e92c 0ff0 	stmdb	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
#ifdef __ARM_FP
    TST     LR, #0x10                               // Determine if the VFP extended frame is present
 800032e:	f01e 0f10 	tst.w	lr, #16
    BNE     _skip_vfp_save
 8000332:	d101      	bne.n	8000338 <_skip_vfp_save>
    VSTMDB  r12!,{s16-s31}                          // Yes, save additional VFP registers
 8000334:	ed2c 8a10 	vstmdb	ip!, {s16-s31}

08000338 <_skip_vfp_save>:
_skip_vfp_save:
#endif
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 8000338:	4c1e      	ldr	r4, [pc, #120]	; (80003b4 <_tx_vfp_access+0x10>)
    STMDB   r12!, {LR}                              // Save LR on the stack
 800033a:	f84c ed04 	str.w	lr, [ip, #-4]!
    STR     r12, [r1, #8]                           // Save the thread stack pointer
 800033e:	f8c1 c008 	str.w	ip, [r1, #8]
_skip_secure_save:
#endif

    /* Determine if time-slice is active. If it isn't, skip time handling processing.  */

    LDR     r5, [r4]                                // Pickup current time-slice
 8000342:	6825      	ldr	r5, [r4, #0]
    CBZ     r5, __tx_ts_new                         // If not active, skip processing
 8000344:	b10d      	cbz	r5, 800034a <__tx_ts_new>

    /* Time-slice is active, save the current thread's time-slice and clear the global time-slice variable.  */

    STR     r5, [r1, #24]                           // Save current time-slice
 8000346:	618d      	str	r5, [r1, #24]

    /* Clear the global time-slice.  */

    STR     r3, [r4]                                // Clear time-slice
 8000348:	6023      	str	r3, [r4, #0]

0800034a <__tx_ts_new>:

__tx_ts_new:

    /* Now we are looking for a new thread to execute!  */

    CPSID   i                                       // Disable interrupts
 800034a:	b672      	cpsid	i
    LDR     r1, [r2]                                // Is there another thread ready to execute?
 800034c:	6811      	ldr	r1, [r2, #0]
    CBZ     r1, __tx_ts_wait                        // No, skip to the wait processing
 800034e:	b1d1      	cbz	r1, 8000386 <__tx_ts_wait>

    /* Yes, another thread is ready for else, make the current thread the new thread.  */

    STR     r1, [r0]                                // Setup the current thread pointer to the new thread
 8000350:	6001      	str	r1, [r0, #0]
    CPSIE   i                                       // Enable interrupts
 8000352:	b662      	cpsie	i

08000354 <__tx_ts_restore>:

    /* Increment the thread run count.  */

__tx_ts_restore:
    LDR     r7, [r1, #4]                            // Pickup the current thread run count
 8000354:	684f      	ldr	r7, [r1, #4]
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 8000356:	4c17      	ldr	r4, [pc, #92]	; (80003b4 <_tx_vfp_access+0x10>)
    LDR     r5, [r1, #24]                           // Pickup thread's current time-slice
 8000358:	698d      	ldr	r5, [r1, #24]
    ADD     r7, r7, #1                              // Increment the thread run count
 800035a:	f107 0701 	add.w	r7, r7, #1
    STR     r7, [r1, #4]                            // Store the new run count
 800035e:	604f      	str	r7, [r1, #4]

    /* Setup global time-slice with thread's current time-slice.  */

    STR     r5, [r4]                                // Setup global time-slice
 8000360:	6025      	str	r5, [r4, #0]
    POP     {r0,r1}                                 // Restore r1 (and dummy r0)
_skip_secure_restore:
#endif

    /* Restore the thread context and PSP.  */
    LDR     r12, [r1, #12]                          // Get stack start
 8000362:	f8d1 c00c 	ldr.w	ip, [r1, #12]
    MSR     PSPLIM, r12                             // Set stack limit
 8000366:	f38c 880b 	msr	PSPLIM, ip
    LDR     r12, [r1, #8]                           // Pickup thread's stack pointer
 800036a:	f8d1 c008 	ldr.w	ip, [r1, #8]
    LDMIA   r12!, {LR}                              // Pickup LR
 800036e:	f85c eb04 	ldr.w	lr, [ip], #4
#ifdef __ARM_FP
    TST     LR, #0x10                               // Determine if the VFP extended frame is present
 8000372:	f01e 0f10 	tst.w	lr, #16
    BNE     _skip_vfp_restore                       // If not, skip VFP restore
 8000376:	d101      	bne.n	800037c <_skip_vfp_restore>
    VLDMIA  r12!, {s16-s31}                         // Yes, restore additional VFP registers
 8000378:	ecbc 8a10 	vldmia	ip!, {s16-s31}

0800037c <_skip_vfp_restore>:
_skip_vfp_restore:
#endif
    LDMIA   r12!, {r4-r11}                          // Recover thread's registers
 800037c:	e8bc 0ff0 	ldmia.w	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
    MSR     PSP, r12                                // Setup the thread's stack pointer
 8000380:	f38c 8809 	msr	PSP, ip

    BX      lr                                      // Return to thread!
 8000384:	4770      	bx	lr

08000386 <__tx_ts_wait>:
    /* The following is the idle wait processing... in this case, no threads are ready for execution and the
       system will simply be idle until an interrupt occurs that makes a thread ready. Note that interrupts
       are disabled to allow use of WFI for waiting for a thread to arrive.  */

__tx_ts_wait:
    CPSID   i                                       // Disable interrupts
 8000386:	b672      	cpsid	i
    LDR     r1, [r2]                                // Pickup the next thread to execute pointer
 8000388:	6811      	ldr	r1, [r2, #0]
    STR     r1, [r0]                                // Store it in the current pointer
 800038a:	6001      	str	r1, [r0, #0]
    CBNZ    r1, __tx_ts_ready                       // If non-NULL, a new thread is ready!
 800038c:	b909      	cbnz	r1, 8000392 <__tx_ts_ready>
    PUSH    {r0-r3}
    BL      tx_low_power_exit                       // Exit low power mode
    POP     {r0-r3}
#endif

    CPSIE   i                                       // Enable interrupts
 800038e:	b662      	cpsie	i
    B       __tx_ts_wait                            // Loop to continue waiting
 8000390:	e7f9      	b.n	8000386 <__tx_ts_wait>

08000392 <__tx_ts_ready>:

    /* At this point, we have a new thread ready to go. Clear any newly pended PendSV - since we are
       already in the handler!  */
__tx_ts_ready:
    MOV     r7, #0x08000000                         // Build clear PendSV value
 8000392:	f04f 6700 	mov.w	r7, #134217728	; 0x8000000
    MOV     r8, #0xE000E000                         // Build base NVIC address
 8000396:	f04f 28e0 	mov.w	r8, #3758153728	; 0xe000e000
    STR     r7, [r8, #0xD04]                        // Clear any PendSV
 800039a:	f8c8 7d04 	str.w	r7, [r8, #3332]	; 0xd04

    /* Re-enable interrupts and restore new thread.  */
    CPSIE   i                                       // Enable interrupts
 800039e:	b662      	cpsie	i
    B       __tx_ts_restore                         // Restore the thread
 80003a0:	e7d8      	b.n	8000354 <__tx_ts_restore>
 80003a2:	bf00      	nop

080003a4 <_tx_vfp_access>:
.type _tx_vfp_access, function
_tx_vfp_access:
#if TX_ENABLE_FPU_SUPPORT
    VMOV.F32 s0, s0                                 // Simply access the VFP
#endif
    BX       lr                                     // Return to caller
 80003a4:	4770      	bx	lr
 80003a6:	0000      	.short	0x0000
    LDR     r2, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 80003a8:	20002378 	.word	0x20002378
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 80003ac:	200022e0 	.word	0x200022e0
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 80003b0:	200022e4 	.word	0x200022e4
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 80003b4:	200028e4 	.word	0x200028e4

080003b8 <_tx_thread_stack_build>:
                       pc          Initial value for pc
                       xPSR        Initial value for xPSR

    Stack Bottom: (higher memory address)  */

    LDR     r2, [r0, #16]                           // Pickup end of stack area
 80003b8:	6902      	ldr	r2, [r0, #16]
    BIC     r2, r2, #0x7                            // Align frame for 8-byte alignment
 80003ba:	f022 0207 	bic.w	r2, r2, #7
    SUB     r2, r2, #68                             // Subtract frame size
 80003be:	f1a2 0244 	sub.w	r2, r2, #68	; 0x44
#ifdef TX_SINGLE_MODE_SECURE
    LDR     r3, =0xFFFFFFFD                         // Build initial LR value for secure mode
#else
    LDR     r3, =0xFFFFFFBC                         // Build initial LR value to return to non-secure PSP
 80003c2:	f06f 0343 	mvn.w	r3, #67	; 0x43
#endif
    STR     r3, [r2, #0]                            // Save on the stack
 80003c6:	6013      	str	r3, [r2, #0]

    /* Actually build the stack frame.  */

    MOV     r3, #0                                  // Build initial register value
 80003c8:	f04f 0300 	mov.w	r3, #0
    STR     r3, [r2, #4]                            // Store initial r4
 80003cc:	6053      	str	r3, [r2, #4]
    STR     r3, [r2, #8]                            // Store initial r5
 80003ce:	6093      	str	r3, [r2, #8]
    STR     r3, [r2, #12]                           // Store initial r6
 80003d0:	60d3      	str	r3, [r2, #12]
    STR     r3, [r2, #16]                           // Store initial r7
 80003d2:	6113      	str	r3, [r2, #16]
    STR     r3, [r2, #20]                           // Store initial r8
 80003d4:	6153      	str	r3, [r2, #20]
    STR     r3, [r2, #24]                           // Store initial r9
 80003d6:	6193      	str	r3, [r2, #24]
    STR     r3, [r2, #28]                           // Store initial r10
 80003d8:	61d3      	str	r3, [r2, #28]
    STR     r3, [r2, #32]                           // Store initial r11
 80003da:	6213      	str	r3, [r2, #32]

    /* Hardware stack follows.  */

    STR     r3, [r2, #36]                           // Store initial r0
 80003dc:	6253      	str	r3, [r2, #36]	; 0x24
    STR     r3, [r2, #40]                           // Store initial r1
 80003de:	6293      	str	r3, [r2, #40]	; 0x28
    STR     r3, [r2, #44]                           // Store initial r2
 80003e0:	62d3      	str	r3, [r2, #44]	; 0x2c
    STR     r3, [r2, #48]                           // Store initial r3
 80003e2:	6313      	str	r3, [r2, #48]	; 0x30
    STR     r3, [r2, #52]                           // Store initial r12
 80003e4:	6353      	str	r3, [r2, #52]	; 0x34
    MOV     r3, #0xFFFFFFFF                         // Poison EXC_RETURN value
 80003e6:	f04f 33ff 	mov.w	r3, #4294967295
    STR     r3, [r2, #56]                           // Store initial lr
 80003ea:	6393      	str	r3, [r2, #56]	; 0x38
    STR     r1, [r2, #60]                           // Store initial pc
 80003ec:	63d1      	str	r1, [r2, #60]	; 0x3c
    MOV     r3, #0x01000000                         // Only T-bit need be set
 80003ee:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    STR     r3, [r2, #64]                           // Store initial xPSR
 80003f2:	6413      	str	r3, [r2, #64]	; 0x40

    /* Setup stack pointer.  */
    // thread_ptr -> tx_thread_stack_ptr =  r2;

    STR     r2, [r0, #8]                            // Save stack pointer in thread's
 80003f4:	6082      	str	r2, [r0, #8]
                                                    //   control block
    BX      lr                                      // Return to caller
 80003f6:	4770      	bx	lr

080003f8 <_tx_timer_interrupt>:
       for use.  */

    /* Increment the system clock.  */
    // _tx_timer_system_clock++;

    LDR     r1, =_tx_timer_system_clock             // Pickup address of system clock
 80003f8:	4922      	ldr	r1, [pc, #136]	; (8000484 <__tx_timer_nothing_expired+0x8>)
    LDR     r0, [r1, #0]                            // Pickup system clock
 80003fa:	6808      	ldr	r0, [r1, #0]
    ADD     r0, r0, #1                              // Increment system clock
 80003fc:	f100 0001 	add.w	r0, r0, #1
    STR     r0, [r1, #0]                            // Store new system clock
 8000400:	6008      	str	r0, [r1, #0]

    /* Test for time-slice expiration.  */
    // if (_tx_timer_time_slice)
    // {

    LDR     r3, =_tx_timer_time_slice               // Pickup address of time-slice
 8000402:	4b21      	ldr	r3, [pc, #132]	; (8000488 <__tx_timer_nothing_expired+0xc>)
    LDR     r2, [r3, #0]                            // Pickup time-slice
 8000404:	681a      	ldr	r2, [r3, #0]
    CBZ     r2, __tx_timer_no_time_slice            // Is it non-active?
 8000406:	b13a      	cbz	r2, 8000418 <__tx_timer_no_time_slice>
                                                    // Yes, skip time-slice processing

       /* Decrement the time_slice.  */
       // _tx_timer_time_slice--;

    SUB     r2, r2, #1                              // Decrement the time-slice
 8000408:	f1a2 0201 	sub.w	r2, r2, #1
    STR     r2, [r3, #0]                            // Store new time-slice value
 800040c:	601a      	str	r2, [r3, #0]

       /* Check for expiration.  */
       // if (__tx_timer_time_slice == 0)

    CBNZ    r2, __tx_timer_no_time_slice            // Has it expired?
 800040e:	b91a      	cbnz	r2, 8000418 <__tx_timer_no_time_slice>
                                                    // No, skip expiration processing

       /* Set the time-slice expired flag.  */
       // _tx_timer_expired_time_slice =  TX_TRUE;

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup address of expired flag
 8000410:	4b1e      	ldr	r3, [pc, #120]	; (800048c <__tx_timer_nothing_expired+0x10>)
    MOV     r0, #1                                  // Build expired value
 8000412:	f04f 0001 	mov.w	r0, #1
    STR     r0, [r3, #0]                            // Set time-slice expiration flag
 8000416:	6018      	str	r0, [r3, #0]

08000418 <__tx_timer_no_time_slice>:

    /* Test for timer expiration.  */
    // if (*_tx_timer_current_ptr)
    // {

    LDR     r1, =_tx_timer_current_ptr              // Pickup current timer pointer address
 8000418:	491d      	ldr	r1, [pc, #116]	; (8000490 <__tx_timer_nothing_expired+0x14>)
    LDR     r0, [r1, #0]                            // Pickup current timer
 800041a:	6808      	ldr	r0, [r1, #0]
    LDR     r2, [r0, #0]                            // Pickup timer list entry
 800041c:	6802      	ldr	r2, [r0, #0]
    CBZ     r2, __tx_timer_no_timer                 // Is there anything in the list?
 800041e:	b122      	cbz	r2, 800042a <__tx_timer_no_timer>
                                                    // No, just increment the timer

        /* Set expiration flag.  */
        // _tx_timer_expired =  TX_TRUE;

    LDR     r3, =_tx_timer_expired                  // Pickup expiration flag address
 8000420:	4b1c      	ldr	r3, [pc, #112]	; (8000494 <__tx_timer_nothing_expired+0x18>)
    MOV     r2, #1                                  // Build expired value
 8000422:	f04f 0201 	mov.w	r2, #1
    STR     r2, [r3, #0]                            // Set expired flag
 8000426:	601a      	str	r2, [r3, #0]
    B       __tx_timer_done                         // Finished timer processing
 8000428:	e008      	b.n	800043c <__tx_timer_done>

0800042a <__tx_timer_no_timer>:
__tx_timer_no_timer:

        /* No timer expired, increment the timer pointer.  */
        // _tx_timer_current_ptr++;

    ADD     r0, r0, #4                              // Move to next timer
 800042a:	f100 0004 	add.w	r0, r0, #4

        /* Check for wrap-around.  */
        // if (_tx_timer_current_ptr == _tx_timer_list_end)

    LDR     r3, =_tx_timer_list_end                 // Pickup addr of timer list end
 800042e:	4b1a      	ldr	r3, [pc, #104]	; (8000498 <__tx_timer_nothing_expired+0x1c>)
    LDR     r2, [r3, #0]                            // Pickup list end
 8000430:	681a      	ldr	r2, [r3, #0]
    CMP     r0, r2                                  // Are we at list end?
 8000432:	4290      	cmp	r0, r2
    BNE     __tx_timer_skip_wrap                    // No, skip wrap-around logic
 8000434:	d101      	bne.n	800043a <__tx_timer_skip_wrap>

            /* Wrap to beginning of list.  */
            // _tx_timer_current_ptr =  _tx_timer_list_start;

    LDR     r3, =_tx_timer_list_start               // Pickup addr of timer list start
 8000436:	4b19      	ldr	r3, [pc, #100]	; (800049c <__tx_timer_nothing_expired+0x20>)
    LDR     r0, [r3, #0]                            // Set current pointer to list start
 8000438:	6818      	ldr	r0, [r3, #0]

0800043a <__tx_timer_skip_wrap>:

__tx_timer_skip_wrap:

    STR     r0, [r1, #0]                            // Store new current timer pointer
 800043a:	6008      	str	r0, [r1, #0]

0800043c <__tx_timer_done>:

    /* See if anything has expired.  */
    // if ((_tx_timer_expired_time_slice) || (_tx_timer_expired))
    // {

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup addr of expired flag
 800043c:	4b13      	ldr	r3, [pc, #76]	; (800048c <__tx_timer_nothing_expired+0x10>)
    LDR     r2, [r3, #0]                            // Pickup time-slice expired flag
 800043e:	681a      	ldr	r2, [r3, #0]
    CBNZ    r2, __tx_something_expired              // Did a time-slice expire?
 8000440:	b912      	cbnz	r2, 8000448 <__tx_something_expired>
                                                    // If non-zero, time-slice expired
    LDR     r1, =_tx_timer_expired                  // Pickup addr of other expired flag
 8000442:	4914      	ldr	r1, [pc, #80]	; (8000494 <__tx_timer_nothing_expired+0x18>)
    LDR     r0, [r1, #0]                            // Pickup timer expired flag
 8000444:	6808      	ldr	r0, [r1, #0]
    CBZ     r0, __tx_timer_nothing_expired          // Did a timer expire?
 8000446:	b1c8      	cbz	r0, 800047c <__tx_timer_nothing_expired>

08000448 <__tx_something_expired>:
                                                    // No, nothing expired

__tx_something_expired:

    PUSH    {r0, lr}                                // Save the lr register on the stack
 8000448:	b501      	push	{r0, lr}

    /* Did a timer expire?  */
    // if (_tx_timer_expired)
    // {

    LDR     r1, =_tx_timer_expired                  // Pickup addr of expired flag
 800044a:	4912      	ldr	r1, [pc, #72]	; (8000494 <__tx_timer_nothing_expired+0x18>)
    LDR     r0, [r1, #0]                            // Pickup timer expired flag
 800044c:	6808      	ldr	r0, [r1, #0]
    CBZ     r0, __tx_timer_dont_activate            // Check for timer expiration
 800044e:	b108      	cbz	r0, 8000454 <__tx_timer_dont_activate>
                                                    // If not set, skip timer activation

        /* Process timer expiration.  */
        // _tx_timer_expiration_process();

    BL      _tx_timer_expiration_process            // Call the timer expiration handling routine
 8000450:	f00d fd6c 	bl	800df2c <_tx_timer_expiration_process>

08000454 <__tx_timer_dont_activate>:

    /* Did time slice expire?  */
    // if (_tx_timer_expired_time_slice)
    // {

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup addr of time-slice expired
 8000454:	4b0d      	ldr	r3, [pc, #52]	; (800048c <__tx_timer_nothing_expired+0x10>)
    LDR     r2, [r3, #0]                            // Pickup the actual flag
 8000456:	681a      	ldr	r2, [r3, #0]
    CBZ     r2, __tx_timer_not_ts_expiration        // See if the flag is set
 8000458:	b172      	cbz	r2, 8000478 <__tx_timer_not_ts_expiration>
                                                    // No, skip time-slice processing

        /* Time slice interrupted thread.  */
        // _tx_thread_time_slice();

    BL      _tx_thread_time_slice                   // Call time-slice processing
 800045a:	f00d fcd9 	bl	800de10 <_tx_thread_time_slice>
    LDR     r0, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 800045e:	4810      	ldr	r0, [pc, #64]	; (80004a0 <__tx_timer_nothing_expired+0x24>)
    LDR     r1, [r0]                                // Is the preempt disable flag set?
 8000460:	6801      	ldr	r1, [r0, #0]
    CBNZ    r1, __tx_timer_skip_time_slice          // Yes, skip the PendSV logic
 8000462:	b949      	cbnz	r1, 8000478 <__tx_timer_not_ts_expiration>
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 8000464:	480f      	ldr	r0, [pc, #60]	; (80004a4 <__tx_timer_nothing_expired+0x28>)
    LDR     r1, [r0]                                // Pickup the current thread pointer
 8000466:	6801      	ldr	r1, [r0, #0]
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 8000468:	4a0f      	ldr	r2, [pc, #60]	; (80004a8 <__tx_timer_nothing_expired+0x2c>)
    LDR     r3, [r2]                                // Pickup the execute thread pointer
 800046a:	6813      	ldr	r3, [r2, #0]
    LDR     r0, =0xE000ED04                         // Build address of control register
 800046c:	480f      	ldr	r0, [pc, #60]	; (80004ac <__tx_timer_nothing_expired+0x30>)
    LDR     r2, =0x10000000                         // Build value for PendSV bit
 800046e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    CMP     r1, r3                                  // Are they the same?
 8000472:	4299      	cmp	r1, r3
    BEQ     __tx_timer_skip_time_slice              // If the same, there was no time-slice performed
 8000474:	d000      	beq.n	8000478 <__tx_timer_not_ts_expiration>
    STR     r2, [r0]                                // Not the same, issue the PendSV for preemption
 8000476:	6002      	str	r2, [r0, #0]

08000478 <__tx_timer_not_ts_expiration>:
__tx_timer_skip_time_slice:
    // }

__tx_timer_not_ts_expiration:

    POP     {r0, lr}                                // Recover lr register (r0 is just there for
 8000478:	e8bd 4001 	ldmia.w	sp!, {r0, lr}

0800047c <__tx_timer_nothing_expired>:

    // }

__tx_timer_nothing_expired:

    DSB                                             // Complete all memory access
 800047c:	f3bf 8f4f 	dsb	sy
    BX      lr                                      // Return to caller
 8000480:	4770      	bx	lr
 8000482:	0000      	.short	0x0000
    LDR     r1, =_tx_timer_system_clock             // Pickup address of system clock
 8000484:	20002384 	.word	0x20002384
    LDR     r3, =_tx_timer_time_slice               // Pickup address of time-slice
 8000488:	200028e4 	.word	0x200028e4
    LDR     r3, =_tx_timer_expired_time_slice       // Pickup address of expired flag
 800048c:	20002388 	.word	0x20002388
    LDR     r1, =_tx_timer_current_ptr              // Pickup current timer pointer address
 8000490:	20002414 	.word	0x20002414
    LDR     r3, =_tx_timer_expired                  // Pickup expiration flag address
 8000494:	20002418 	.word	0x20002418
    LDR     r3, =_tx_timer_list_end                 // Pickup addr of timer list end
 8000498:	20002410 	.word	0x20002410
    LDR     r3, =_tx_timer_list_start               // Pickup addr of timer list start
 800049c:	2000240c 	.word	0x2000240c
    LDR     r0, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 80004a0:	20002378 	.word	0x20002378
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 80004a4:	200022e0 	.word	0x200022e0
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 80004a8:	200022e4 	.word	0x200022e4
    LDR     r0, =0xE000ED04                         // Build address of control register
 80004ac:	e000ed04 	.word	0xe000ed04

080004b0 <__aeabi_drsub>:
 80004b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80004b4:	e002      	b.n	80004bc <__adddf3>
 80004b6:	bf00      	nop

080004b8 <__aeabi_dsub>:
 80004b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080004bc <__adddf3>:
 80004bc:	b530      	push	{r4, r5, lr}
 80004be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	bf1f      	itttt	ne
 80004d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80004d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80004da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80004de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004e2:	f000 80e2 	beq.w	80006aa <__adddf3+0x1ee>
 80004e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80004ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80004ee:	bfb8      	it	lt
 80004f0:	426d      	neglt	r5, r5
 80004f2:	dd0c      	ble.n	800050e <__adddf3+0x52>
 80004f4:	442c      	add	r4, r5
 80004f6:	ea80 0202 	eor.w	r2, r0, r2
 80004fa:	ea81 0303 	eor.w	r3, r1, r3
 80004fe:	ea82 0000 	eor.w	r0, r2, r0
 8000502:	ea83 0101 	eor.w	r1, r3, r1
 8000506:	ea80 0202 	eor.w	r2, r0, r2
 800050a:	ea81 0303 	eor.w	r3, r1, r3
 800050e:	2d36      	cmp	r5, #54	; 0x36
 8000510:	bf88      	it	hi
 8000512:	bd30      	pophi	{r4, r5, pc}
 8000514:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000518:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800051c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000520:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000524:	d002      	beq.n	800052c <__adddf3+0x70>
 8000526:	4240      	negs	r0, r0
 8000528:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800052c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000530:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000534:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000538:	d002      	beq.n	8000540 <__adddf3+0x84>
 800053a:	4252      	negs	r2, r2
 800053c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000540:	ea94 0f05 	teq	r4, r5
 8000544:	f000 80a7 	beq.w	8000696 <__adddf3+0x1da>
 8000548:	f1a4 0401 	sub.w	r4, r4, #1
 800054c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000550:	db0d      	blt.n	800056e <__adddf3+0xb2>
 8000552:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000556:	fa22 f205 	lsr.w	r2, r2, r5
 800055a:	1880      	adds	r0, r0, r2
 800055c:	f141 0100 	adc.w	r1, r1, #0
 8000560:	fa03 f20e 	lsl.w	r2, r3, lr
 8000564:	1880      	adds	r0, r0, r2
 8000566:	fa43 f305 	asr.w	r3, r3, r5
 800056a:	4159      	adcs	r1, r3
 800056c:	e00e      	b.n	800058c <__adddf3+0xd0>
 800056e:	f1a5 0520 	sub.w	r5, r5, #32
 8000572:	f10e 0e20 	add.w	lr, lr, #32
 8000576:	2a01      	cmp	r2, #1
 8000578:	fa03 fc0e 	lsl.w	ip, r3, lr
 800057c:	bf28      	it	cs
 800057e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000582:	fa43 f305 	asr.w	r3, r3, r5
 8000586:	18c0      	adds	r0, r0, r3
 8000588:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800058c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000590:	d507      	bpl.n	80005a2 <__adddf3+0xe6>
 8000592:	f04f 0e00 	mov.w	lr, #0
 8000596:	f1dc 0c00 	rsbs	ip, ip, #0
 800059a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800059e:	eb6e 0101 	sbc.w	r1, lr, r1
 80005a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80005a6:	d31b      	bcc.n	80005e0 <__adddf3+0x124>
 80005a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80005ac:	d30c      	bcc.n	80005c8 <__adddf3+0x10c>
 80005ae:	0849      	lsrs	r1, r1, #1
 80005b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80005b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005b8:	f104 0401 	add.w	r4, r4, #1
 80005bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80005c4:	f080 809a 	bcs.w	80006fc <__adddf3+0x240>
 80005c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80005cc:	bf08      	it	eq
 80005ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80005d2:	f150 0000 	adcs.w	r0, r0, #0
 80005d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005da:	ea41 0105 	orr.w	r1, r1, r5
 80005de:	bd30      	pop	{r4, r5, pc}
 80005e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80005e4:	4140      	adcs	r0, r0
 80005e6:	eb41 0101 	adc.w	r1, r1, r1
 80005ea:	3c01      	subs	r4, #1
 80005ec:	bf28      	it	cs
 80005ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80005f2:	d2e9      	bcs.n	80005c8 <__adddf3+0x10c>
 80005f4:	f091 0f00 	teq	r1, #0
 80005f8:	bf04      	itt	eq
 80005fa:	4601      	moveq	r1, r0
 80005fc:	2000      	moveq	r0, #0
 80005fe:	fab1 f381 	clz	r3, r1
 8000602:	bf08      	it	eq
 8000604:	3320      	addeq	r3, #32
 8000606:	f1a3 030b 	sub.w	r3, r3, #11
 800060a:	f1b3 0220 	subs.w	r2, r3, #32
 800060e:	da0c      	bge.n	800062a <__adddf3+0x16e>
 8000610:	320c      	adds	r2, #12
 8000612:	dd08      	ble.n	8000626 <__adddf3+0x16a>
 8000614:	f102 0c14 	add.w	ip, r2, #20
 8000618:	f1c2 020c 	rsb	r2, r2, #12
 800061c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000620:	fa21 f102 	lsr.w	r1, r1, r2
 8000624:	e00c      	b.n	8000640 <__adddf3+0x184>
 8000626:	f102 0214 	add.w	r2, r2, #20
 800062a:	bfd8      	it	le
 800062c:	f1c2 0c20 	rsble	ip, r2, #32
 8000630:	fa01 f102 	lsl.w	r1, r1, r2
 8000634:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000638:	bfdc      	itt	le
 800063a:	ea41 010c 	orrle.w	r1, r1, ip
 800063e:	4090      	lslle	r0, r2
 8000640:	1ae4      	subs	r4, r4, r3
 8000642:	bfa2      	ittt	ge
 8000644:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000648:	4329      	orrge	r1, r5
 800064a:	bd30      	popge	{r4, r5, pc}
 800064c:	ea6f 0404 	mvn.w	r4, r4
 8000650:	3c1f      	subs	r4, #31
 8000652:	da1c      	bge.n	800068e <__adddf3+0x1d2>
 8000654:	340c      	adds	r4, #12
 8000656:	dc0e      	bgt.n	8000676 <__adddf3+0x1ba>
 8000658:	f104 0414 	add.w	r4, r4, #20
 800065c:	f1c4 0220 	rsb	r2, r4, #32
 8000660:	fa20 f004 	lsr.w	r0, r0, r4
 8000664:	fa01 f302 	lsl.w	r3, r1, r2
 8000668:	ea40 0003 	orr.w	r0, r0, r3
 800066c:	fa21 f304 	lsr.w	r3, r1, r4
 8000670:	ea45 0103 	orr.w	r1, r5, r3
 8000674:	bd30      	pop	{r4, r5, pc}
 8000676:	f1c4 040c 	rsb	r4, r4, #12
 800067a:	f1c4 0220 	rsb	r2, r4, #32
 800067e:	fa20 f002 	lsr.w	r0, r0, r2
 8000682:	fa01 f304 	lsl.w	r3, r1, r4
 8000686:	ea40 0003 	orr.w	r0, r0, r3
 800068a:	4629      	mov	r1, r5
 800068c:	bd30      	pop	{r4, r5, pc}
 800068e:	fa21 f004 	lsr.w	r0, r1, r4
 8000692:	4629      	mov	r1, r5
 8000694:	bd30      	pop	{r4, r5, pc}
 8000696:	f094 0f00 	teq	r4, #0
 800069a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800069e:	bf06      	itte	eq
 80006a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80006a4:	3401      	addeq	r4, #1
 80006a6:	3d01      	subne	r5, #1
 80006a8:	e74e      	b.n	8000548 <__adddf3+0x8c>
 80006aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006ae:	bf18      	it	ne
 80006b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006b4:	d029      	beq.n	800070a <__adddf3+0x24e>
 80006b6:	ea94 0f05 	teq	r4, r5
 80006ba:	bf08      	it	eq
 80006bc:	ea90 0f02 	teqeq	r0, r2
 80006c0:	d005      	beq.n	80006ce <__adddf3+0x212>
 80006c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80006c6:	bf04      	itt	eq
 80006c8:	4619      	moveq	r1, r3
 80006ca:	4610      	moveq	r0, r2
 80006cc:	bd30      	pop	{r4, r5, pc}
 80006ce:	ea91 0f03 	teq	r1, r3
 80006d2:	bf1e      	ittt	ne
 80006d4:	2100      	movne	r1, #0
 80006d6:	2000      	movne	r0, #0
 80006d8:	bd30      	popne	{r4, r5, pc}
 80006da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80006de:	d105      	bne.n	80006ec <__adddf3+0x230>
 80006e0:	0040      	lsls	r0, r0, #1
 80006e2:	4149      	adcs	r1, r1
 80006e4:	bf28      	it	cs
 80006e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80006ea:	bd30      	pop	{r4, r5, pc}
 80006ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80006f0:	bf3c      	itt	cc
 80006f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80006f6:	bd30      	popcc	{r4, r5, pc}
 80006f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000700:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000704:	f04f 0000 	mov.w	r0, #0
 8000708:	bd30      	pop	{r4, r5, pc}
 800070a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800070e:	bf1a      	itte	ne
 8000710:	4619      	movne	r1, r3
 8000712:	4610      	movne	r0, r2
 8000714:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000718:	bf1c      	itt	ne
 800071a:	460b      	movne	r3, r1
 800071c:	4602      	movne	r2, r0
 800071e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000722:	bf06      	itte	eq
 8000724:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000728:	ea91 0f03 	teqeq	r1, r3
 800072c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000730:	bd30      	pop	{r4, r5, pc}
 8000732:	bf00      	nop

08000734 <__aeabi_ui2d>:
 8000734:	f090 0f00 	teq	r0, #0
 8000738:	bf04      	itt	eq
 800073a:	2100      	moveq	r1, #0
 800073c:	4770      	bxeq	lr
 800073e:	b530      	push	{r4, r5, lr}
 8000740:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000744:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000748:	f04f 0500 	mov.w	r5, #0
 800074c:	f04f 0100 	mov.w	r1, #0
 8000750:	e750      	b.n	80005f4 <__adddf3+0x138>
 8000752:	bf00      	nop

08000754 <__aeabi_i2d>:
 8000754:	f090 0f00 	teq	r0, #0
 8000758:	bf04      	itt	eq
 800075a:	2100      	moveq	r1, #0
 800075c:	4770      	bxeq	lr
 800075e:	b530      	push	{r4, r5, lr}
 8000760:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000764:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000768:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800076c:	bf48      	it	mi
 800076e:	4240      	negmi	r0, r0
 8000770:	f04f 0100 	mov.w	r1, #0
 8000774:	e73e      	b.n	80005f4 <__adddf3+0x138>
 8000776:	bf00      	nop

08000778 <__aeabi_f2d>:
 8000778:	0042      	lsls	r2, r0, #1
 800077a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800077e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000782:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000786:	bf1f      	itttt	ne
 8000788:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800078c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000790:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000794:	4770      	bxne	lr
 8000796:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800079a:	bf08      	it	eq
 800079c:	4770      	bxeq	lr
 800079e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80007a2:	bf04      	itt	eq
 80007a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80007a8:	4770      	bxeq	lr
 80007aa:	b530      	push	{r4, r5, lr}
 80007ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80007b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80007b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007b8:	e71c      	b.n	80005f4 <__adddf3+0x138>
 80007ba:	bf00      	nop

080007bc <__aeabi_ul2d>:
 80007bc:	ea50 0201 	orrs.w	r2, r0, r1
 80007c0:	bf08      	it	eq
 80007c2:	4770      	bxeq	lr
 80007c4:	b530      	push	{r4, r5, lr}
 80007c6:	f04f 0500 	mov.w	r5, #0
 80007ca:	e00a      	b.n	80007e2 <__aeabi_l2d+0x16>

080007cc <__aeabi_l2d>:
 80007cc:	ea50 0201 	orrs.w	r2, r0, r1
 80007d0:	bf08      	it	eq
 80007d2:	4770      	bxeq	lr
 80007d4:	b530      	push	{r4, r5, lr}
 80007d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80007da:	d502      	bpl.n	80007e2 <__aeabi_l2d+0x16>
 80007dc:	4240      	negs	r0, r0
 80007de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80007ee:	f43f aed8 	beq.w	80005a2 <__adddf3+0xe6>
 80007f2:	f04f 0203 	mov.w	r2, #3
 80007f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007fa:	bf18      	it	ne
 80007fc:	3203      	addne	r2, #3
 80007fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000802:	bf18      	it	ne
 8000804:	3203      	addne	r2, #3
 8000806:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800080a:	f1c2 0320 	rsb	r3, r2, #32
 800080e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000812:	fa20 f002 	lsr.w	r0, r0, r2
 8000816:	fa01 fe03 	lsl.w	lr, r1, r3
 800081a:	ea40 000e 	orr.w	r0, r0, lr
 800081e:	fa21 f102 	lsr.w	r1, r1, r2
 8000822:	4414      	add	r4, r2
 8000824:	e6bd      	b.n	80005a2 <__adddf3+0xe6>
 8000826:	bf00      	nop

08000828 <__aeabi_dmul>:
 8000828:	b570      	push	{r4, r5, r6, lr}
 800082a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800082e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000832:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000836:	bf1d      	ittte	ne
 8000838:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800083c:	ea94 0f0c 	teqne	r4, ip
 8000840:	ea95 0f0c 	teqne	r5, ip
 8000844:	f000 f8de 	bleq	8000a04 <__aeabi_dmul+0x1dc>
 8000848:	442c      	add	r4, r5
 800084a:	ea81 0603 	eor.w	r6, r1, r3
 800084e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000852:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000856:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800085a:	bf18      	it	ne
 800085c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000860:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000864:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000868:	d038      	beq.n	80008dc <__aeabi_dmul+0xb4>
 800086a:	fba0 ce02 	umull	ip, lr, r0, r2
 800086e:	f04f 0500 	mov.w	r5, #0
 8000872:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000876:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800087a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800087e:	f04f 0600 	mov.w	r6, #0
 8000882:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000886:	f09c 0f00 	teq	ip, #0
 800088a:	bf18      	it	ne
 800088c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000890:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000894:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000898:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800089c:	d204      	bcs.n	80008a8 <__aeabi_dmul+0x80>
 800089e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80008a2:	416d      	adcs	r5, r5
 80008a4:	eb46 0606 	adc.w	r6, r6, r6
 80008a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80008ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80008b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80008b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80008b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80008bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c0:	bf88      	it	hi
 80008c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008c6:	d81e      	bhi.n	8000906 <__aeabi_dmul+0xde>
 80008c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80008cc:	bf08      	it	eq
 80008ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80008d2:	f150 0000 	adcs.w	r0, r0, #0
 80008d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008da:	bd70      	pop	{r4, r5, r6, pc}
 80008dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80008e0:	ea46 0101 	orr.w	r1, r6, r1
 80008e4:	ea40 0002 	orr.w	r0, r0, r2
 80008e8:	ea81 0103 	eor.w	r1, r1, r3
 80008ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80008f0:	bfc2      	ittt	gt
 80008f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fa:	bd70      	popgt	{r4, r5, r6, pc}
 80008fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000900:	f04f 0e00 	mov.w	lr, #0
 8000904:	3c01      	subs	r4, #1
 8000906:	f300 80ab 	bgt.w	8000a60 <__aeabi_dmul+0x238>
 800090a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800090e:	bfde      	ittt	le
 8000910:	2000      	movle	r0, #0
 8000912:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000916:	bd70      	pople	{r4, r5, r6, pc}
 8000918:	f1c4 0400 	rsb	r4, r4, #0
 800091c:	3c20      	subs	r4, #32
 800091e:	da35      	bge.n	800098c <__aeabi_dmul+0x164>
 8000920:	340c      	adds	r4, #12
 8000922:	dc1b      	bgt.n	800095c <__aeabi_dmul+0x134>
 8000924:	f104 0414 	add.w	r4, r4, #20
 8000928:	f1c4 0520 	rsb	r5, r4, #32
 800092c:	fa00 f305 	lsl.w	r3, r0, r5
 8000930:	fa20 f004 	lsr.w	r0, r0, r4
 8000934:	fa01 f205 	lsl.w	r2, r1, r5
 8000938:	ea40 0002 	orr.w	r0, r0, r2
 800093c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000940:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000944:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000948:	fa21 f604 	lsr.w	r6, r1, r4
 800094c:	eb42 0106 	adc.w	r1, r2, r6
 8000950:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000954:	bf08      	it	eq
 8000956:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800095a:	bd70      	pop	{r4, r5, r6, pc}
 800095c:	f1c4 040c 	rsb	r4, r4, #12
 8000960:	f1c4 0520 	rsb	r5, r4, #32
 8000964:	fa00 f304 	lsl.w	r3, r0, r4
 8000968:	fa20 f005 	lsr.w	r0, r0, r5
 800096c:	fa01 f204 	lsl.w	r2, r1, r4
 8000970:	ea40 0002 	orr.w	r0, r0, r2
 8000974:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000978:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800097c:	f141 0100 	adc.w	r1, r1, #0
 8000980:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000984:	bf08      	it	eq
 8000986:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800098a:	bd70      	pop	{r4, r5, r6, pc}
 800098c:	f1c4 0520 	rsb	r5, r4, #32
 8000990:	fa00 f205 	lsl.w	r2, r0, r5
 8000994:	ea4e 0e02 	orr.w	lr, lr, r2
 8000998:	fa20 f304 	lsr.w	r3, r0, r4
 800099c:	fa01 f205 	lsl.w	r2, r1, r5
 80009a0:	ea43 0302 	orr.w	r3, r3, r2
 80009a4:	fa21 f004 	lsr.w	r0, r1, r4
 80009a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80009ac:	fa21 f204 	lsr.w	r2, r1, r4
 80009b0:	ea20 0002 	bic.w	r0, r0, r2
 80009b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80009b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80009bc:	bf08      	it	eq
 80009be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80009c2:	bd70      	pop	{r4, r5, r6, pc}
 80009c4:	f094 0f00 	teq	r4, #0
 80009c8:	d10f      	bne.n	80009ea <__aeabi_dmul+0x1c2>
 80009ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80009ce:	0040      	lsls	r0, r0, #1
 80009d0:	eb41 0101 	adc.w	r1, r1, r1
 80009d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009d8:	bf08      	it	eq
 80009da:	3c01      	subeq	r4, #1
 80009dc:	d0f7      	beq.n	80009ce <__aeabi_dmul+0x1a6>
 80009de:	ea41 0106 	orr.w	r1, r1, r6
 80009e2:	f095 0f00 	teq	r5, #0
 80009e6:	bf18      	it	ne
 80009e8:	4770      	bxne	lr
 80009ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80009ee:	0052      	lsls	r2, r2, #1
 80009f0:	eb43 0303 	adc.w	r3, r3, r3
 80009f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80009f8:	bf08      	it	eq
 80009fa:	3d01      	subeq	r5, #1
 80009fc:	d0f7      	beq.n	80009ee <__aeabi_dmul+0x1c6>
 80009fe:	ea43 0306 	orr.w	r3, r3, r6
 8000a02:	4770      	bx	lr
 8000a04:	ea94 0f0c 	teq	r4, ip
 8000a08:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0c:	bf18      	it	ne
 8000a0e:	ea95 0f0c 	teqne	r5, ip
 8000a12:	d00c      	beq.n	8000a2e <__aeabi_dmul+0x206>
 8000a14:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a18:	bf18      	it	ne
 8000a1a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a1e:	d1d1      	bne.n	80009c4 <__aeabi_dmul+0x19c>
 8000a20:	ea81 0103 	eor.w	r1, r1, r3
 8000a24:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000a28:	f04f 0000 	mov.w	r0, #0
 8000a2c:	bd70      	pop	{r4, r5, r6, pc}
 8000a2e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a32:	bf06      	itte	eq
 8000a34:	4610      	moveq	r0, r2
 8000a36:	4619      	moveq	r1, r3
 8000a38:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a3c:	d019      	beq.n	8000a72 <__aeabi_dmul+0x24a>
 8000a3e:	ea94 0f0c 	teq	r4, ip
 8000a42:	d102      	bne.n	8000a4a <__aeabi_dmul+0x222>
 8000a44:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000a48:	d113      	bne.n	8000a72 <__aeabi_dmul+0x24a>
 8000a4a:	ea95 0f0c 	teq	r5, ip
 8000a4e:	d105      	bne.n	8000a5c <__aeabi_dmul+0x234>
 8000a50:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000a54:	bf1c      	itt	ne
 8000a56:	4610      	movne	r0, r2
 8000a58:	4619      	movne	r1, r3
 8000a5a:	d10a      	bne.n	8000a72 <__aeabi_dmul+0x24a>
 8000a5c:	ea81 0103 	eor.w	r1, r1, r3
 8000a60:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000a64:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000a68:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000a6c:	f04f 0000 	mov.w	r0, #0
 8000a70:	bd70      	pop	{r4, r5, r6, pc}
 8000a72:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000a76:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000a7a:	bd70      	pop	{r4, r5, r6, pc}

08000a7c <__aeabi_ddiv>:
 8000a7c:	b570      	push	{r4, r5, r6, lr}
 8000a7e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000a82:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000a86:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000a8a:	bf1d      	ittte	ne
 8000a8c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000a90:	ea94 0f0c 	teqne	r4, ip
 8000a94:	ea95 0f0c 	teqne	r5, ip
 8000a98:	f000 f8a7 	bleq	8000bea <__aeabi_ddiv+0x16e>
 8000a9c:	eba4 0405 	sub.w	r4, r4, r5
 8000aa0:	ea81 0e03 	eor.w	lr, r1, r3
 8000aa4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000aa8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000aac:	f000 8088 	beq.w	8000bc0 <__aeabi_ddiv+0x144>
 8000ab0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000ab4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000ab8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000abc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000ac0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000ac4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000ac8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000acc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000ad0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000ad4:	429d      	cmp	r5, r3
 8000ad6:	bf08      	it	eq
 8000ad8:	4296      	cmpeq	r6, r2
 8000ada:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000ade:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000ae2:	d202      	bcs.n	8000aea <__aeabi_ddiv+0x6e>
 8000ae4:	085b      	lsrs	r3, r3, #1
 8000ae6:	ea4f 0232 	mov.w	r2, r2, rrx
 8000aea:	1ab6      	subs	r6, r6, r2
 8000aec:	eb65 0503 	sbc.w	r5, r5, r3
 8000af0:	085b      	lsrs	r3, r3, #1
 8000af2:	ea4f 0232 	mov.w	r2, r2, rrx
 8000af6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000afa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000afe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000b02:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000b06:	bf22      	ittt	cs
 8000b08:	1ab6      	subcs	r6, r6, r2
 8000b0a:	4675      	movcs	r5, lr
 8000b0c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000b10:	085b      	lsrs	r3, r3, #1
 8000b12:	ea4f 0232 	mov.w	r2, r2, rrx
 8000b16:	ebb6 0e02 	subs.w	lr, r6, r2
 8000b1a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000b1e:	bf22      	ittt	cs
 8000b20:	1ab6      	subcs	r6, r6, r2
 8000b22:	4675      	movcs	r5, lr
 8000b24:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000b28:	085b      	lsrs	r3, r3, #1
 8000b2a:	ea4f 0232 	mov.w	r2, r2, rrx
 8000b2e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000b32:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000b36:	bf22      	ittt	cs
 8000b38:	1ab6      	subcs	r6, r6, r2
 8000b3a:	4675      	movcs	r5, lr
 8000b3c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000b40:	085b      	lsrs	r3, r3, #1
 8000b42:	ea4f 0232 	mov.w	r2, r2, rrx
 8000b46:	ebb6 0e02 	subs.w	lr, r6, r2
 8000b4a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000b4e:	bf22      	ittt	cs
 8000b50:	1ab6      	subcs	r6, r6, r2
 8000b52:	4675      	movcs	r5, lr
 8000b54:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000b58:	ea55 0e06 	orrs.w	lr, r5, r6
 8000b5c:	d018      	beq.n	8000b90 <__aeabi_ddiv+0x114>
 8000b5e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000b62:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000b66:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000b6a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000b6e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000b72:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000b76:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000b7a:	d1c0      	bne.n	8000afe <__aeabi_ddiv+0x82>
 8000b7c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000b80:	d10b      	bne.n	8000b9a <__aeabi_ddiv+0x11e>
 8000b82:	ea41 0100 	orr.w	r1, r1, r0
 8000b86:	f04f 0000 	mov.w	r0, #0
 8000b8a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000b8e:	e7b6      	b.n	8000afe <__aeabi_ddiv+0x82>
 8000b90:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000b94:	bf04      	itt	eq
 8000b96:	4301      	orreq	r1, r0
 8000b98:	2000      	moveq	r0, #0
 8000b9a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000b9e:	bf88      	it	hi
 8000ba0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000ba4:	f63f aeaf 	bhi.w	8000906 <__aeabi_dmul+0xde>
 8000ba8:	ebb5 0c03 	subs.w	ip, r5, r3
 8000bac:	bf04      	itt	eq
 8000bae:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000bb2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000bb6:	f150 0000 	adcs.w	r0, r0, #0
 8000bba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000bbe:	bd70      	pop	{r4, r5, r6, pc}
 8000bc0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000bc4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000bc8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000bcc:	bfc2      	ittt	gt
 8000bce:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000bd2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000bd6:	bd70      	popgt	{r4, r5, r6, pc}
 8000bd8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bdc:	f04f 0e00 	mov.w	lr, #0
 8000be0:	3c01      	subs	r4, #1
 8000be2:	e690      	b.n	8000906 <__aeabi_dmul+0xde>
 8000be4:	ea45 0e06 	orr.w	lr, r5, r6
 8000be8:	e68d      	b.n	8000906 <__aeabi_dmul+0xde>
 8000bea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000bee:	ea94 0f0c 	teq	r4, ip
 8000bf2:	bf08      	it	eq
 8000bf4:	ea95 0f0c 	teqeq	r5, ip
 8000bf8:	f43f af3b 	beq.w	8000a72 <__aeabi_dmul+0x24a>
 8000bfc:	ea94 0f0c 	teq	r4, ip
 8000c00:	d10a      	bne.n	8000c18 <__aeabi_ddiv+0x19c>
 8000c02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000c06:	f47f af34 	bne.w	8000a72 <__aeabi_dmul+0x24a>
 8000c0a:	ea95 0f0c 	teq	r5, ip
 8000c0e:	f47f af25 	bne.w	8000a5c <__aeabi_dmul+0x234>
 8000c12:	4610      	mov	r0, r2
 8000c14:	4619      	mov	r1, r3
 8000c16:	e72c      	b.n	8000a72 <__aeabi_dmul+0x24a>
 8000c18:	ea95 0f0c 	teq	r5, ip
 8000c1c:	d106      	bne.n	8000c2c <__aeabi_ddiv+0x1b0>
 8000c1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000c22:	f43f aefd 	beq.w	8000a20 <__aeabi_dmul+0x1f8>
 8000c26:	4610      	mov	r0, r2
 8000c28:	4619      	mov	r1, r3
 8000c2a:	e722      	b.n	8000a72 <__aeabi_dmul+0x24a>
 8000c2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000c30:	bf18      	it	ne
 8000c32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000c36:	f47f aec5 	bne.w	80009c4 <__aeabi_dmul+0x19c>
 8000c3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000c3e:	f47f af0d 	bne.w	8000a5c <__aeabi_dmul+0x234>
 8000c42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000c46:	f47f aeeb 	bne.w	8000a20 <__aeabi_dmul+0x1f8>
 8000c4a:	e712      	b.n	8000a72 <__aeabi_dmul+0x24a>

08000c4c <__aeabi_d2f>:
 8000c4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c50:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c54:	bf24      	itt	cs
 8000c56:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c5a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c5e:	d90d      	bls.n	8000c7c <__aeabi_d2f+0x30>
 8000c60:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c64:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c68:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c6c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c70:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c74:	bf08      	it	eq
 8000c76:	f020 0001 	biceq.w	r0, r0, #1
 8000c7a:	4770      	bx	lr
 8000c7c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c80:	d121      	bne.n	8000cc6 <__aeabi_d2f+0x7a>
 8000c82:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c86:	bfbc      	itt	lt
 8000c88:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	4770      	bxlt	lr
 8000c8e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c92:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c96:	f1c2 0218 	rsb	r2, r2, #24
 8000c9a:	f1c2 0c20 	rsb	ip, r2, #32
 8000c9e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ca2:	fa20 f002 	lsr.w	r0, r0, r2
 8000ca6:	bf18      	it	ne
 8000ca8:	f040 0001 	orrne.w	r0, r0, #1
 8000cac:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000cb0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000cb4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000cb8:	ea40 000c 	orr.w	r0, r0, ip
 8000cbc:	fa23 f302 	lsr.w	r3, r3, r2
 8000cc0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cc4:	e7cc      	b.n	8000c60 <__aeabi_d2f+0x14>
 8000cc6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cca:	d107      	bne.n	8000cdc <__aeabi_d2f+0x90>
 8000ccc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cd0:	bf1e      	ittt	ne
 8000cd2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cd6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cda:	4770      	bxne	lr
 8000cdc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ce0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ce4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ce8:	4770      	bx	lr
 8000cea:	bf00      	nop

08000cec <tx_application_define>:
  * @brief  Define the initial system.
  * @param  first_unused_memory : Pointer to the first unused memory
  * @retval None
  */
VOID tx_application_define(VOID *first_unused_memory)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b086      	sub	sp, #24
 8000cf0:	af02      	add	r7, sp, #8
 8000cf2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN  tx_application_define_1*/

  /* USER CODE END  tx_application_define_1 */
#if (USE_STATIC_ALLOCATION == 1)
  UINT status = TX_SUCCESS;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	60fb      	str	r3, [r7, #12]
  VOID *memory_ptr;

  if (tx_byte_pool_create(&tx_app_byte_pool, "Tx App memory pool", tx_byte_pool_buffer, TX_APP_MEM_POOL_SIZE) != TX_SUCCESS)
 8000cf8:	2334      	movs	r3, #52	; 0x34
 8000cfa:	9300      	str	r3, [sp, #0]
 8000cfc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d00:	4a0a      	ldr	r2, [pc, #40]	; (8000d2c <tx_application_define+0x40>)
 8000d02:	490b      	ldr	r1, [pc, #44]	; (8000d30 <tx_application_define+0x44>)
 8000d04:	480b      	ldr	r0, [pc, #44]	; (8000d34 <tx_application_define+0x48>)
 8000d06:	f00d fb47 	bl	800e398 <_txe_byte_pool_create>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d109      	bne.n	8000d24 <tx_application_define+0x38>
  {
    /* USER CODE BEGIN TX_Byte_Pool_Success */

    /* USER CODE END TX_Byte_Pool_Success */

    memory_ptr = (VOID *)&tx_app_byte_pool;
 8000d10:	4b08      	ldr	r3, [pc, #32]	; (8000d34 <tx_application_define+0x48>)
 8000d12:	60bb      	str	r3, [r7, #8]
    status = App_ThreadX_Init(memory_ptr);
 8000d14:	68b8      	ldr	r0, [r7, #8]
 8000d16:	f003 f807 	bl	8003d28 <App_ThreadX_Init>
 8000d1a:	60f8      	str	r0, [r7, #12]
    if (status != TX_SUCCESS)
 8000d1c:	68fb      	ldr	r3, [r7, #12]
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d000      	beq.n	8000d24 <tx_application_define+0x38>
    {
      /* USER CODE BEGIN  App_ThreadX_Init_Error */
      while(1)
 8000d22:	e7fe      	b.n	8000d22 <tx_application_define+0x36>
  /* USER CODE BEGIN DYNAMIC_MEM_ALLOC */
  (void)first_unused_memory;
  /* USER CODE END DYNAMIC_MEM_ALLOC */
#endif

}
 8000d24:	bf00      	nop
 8000d26:	3710      	adds	r7, #16
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	bd80      	pop	{r7, pc}
 8000d2c:	20000030 	.word	0x20000030
 8000d30:	0800e924 	.word	0x0800e924
 8000d34:	20000430 	.word	0x20000430

08000d38 <BSP_I2C1_Init>:
#define i2c_initialized (1)
#define i2c_uninitialized (0)


void BSP_I2C1_Init(void)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	af00      	add	r7, sp, #0
	if(hi2c1.State == HAL_I2C_STATE_RESET)
 8000d3c:	4b04      	ldr	r3, [pc, #16]	; (8000d50 <BSP_I2C1_Init+0x18>)
 8000d3e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000d42:	b2db      	uxtb	r3, r3
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d101      	bne.n	8000d4c <BSP_I2C1_Init+0x14>
	{
        I2C1_Init();
 8000d48:	f003 ff3c 	bl	8004bc4 <I2C1_Init>
	}
}
 8000d4c:	bf00      	nop
 8000d4e:	bd80      	pop	{r7, pc}
 8000d50:	20001480 	.word	0x20001480

08000d54 <BSP_I2C1_DeInit>:

void BSP_I2C1_DeInit(void)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	af00      	add	r7, sp, #0
	HAL_I2C_DeInit(&hi2c1);
 8000d58:	4802      	ldr	r0, [pc, #8]	; (8000d64 <BSP_I2C1_DeInit+0x10>)
 8000d5a:	f007 f894 	bl	8007e86 <HAL_I2C_DeInit>
}
 8000d5e:	bf00      	nop
 8000d60:	bd80      	pop	{r7, pc}
 8000d62:	bf00      	nop
 8000d64:	20001480 	.word	0x20001480

08000d68 <BSP_I2C2_Init>:

void BSP_I2C2_Init(void)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	af00      	add	r7, sp, #0
	if(hi2c2.State == HAL_I2C_STATE_RESET)
 8000d6c:	4b04      	ldr	r3, [pc, #16]	; (8000d80 <BSP_I2C2_Init+0x18>)
 8000d6e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000d72:	b2db      	uxtb	r3, r3
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d101      	bne.n	8000d7c <BSP_I2C2_Init+0x14>
	{
        I2C2_Init();
 8000d78:	f003 ff64 	bl	8004c44 <I2C2_Init>
	}
}
 8000d7c:	bf00      	nop
 8000d7e:	bd80      	pop	{r7, pc}
 8000d80:	200014cc 	.word	0x200014cc

08000d84 <BSP_I2C2_DeInit>:

void BSP_I2C2_DeInit(void)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	af00      	add	r7, sp, #0
	HAL_I2C_DeInit(&hi2c2);
 8000d88:	4802      	ldr	r0, [pc, #8]	; (8000d94 <BSP_I2C2_DeInit+0x10>)
 8000d8a:	f007 f87c 	bl	8007e86 <HAL_I2C_DeInit>
}
 8000d8e:	bf00      	nop
 8000d90:	bd80      	pop	{r7, pc}
 8000d92:	bf00      	nop
 8000d94:	200014cc 	.word	0x200014cc

08000d98 <BSP_I2C1_WriteReg16>:
int32_t BSP_I2C1_ReadReg(uint16_t Address, uint16_t Reg, uint8_t *pData, uint16_t Length){
    int32_t ret = HAL_I2C_Mem_Read(&hi2c1, Address, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length, 1000);
    return ret;
}

int32_t BSP_I2C1_WriteReg16(uint16_t Address, uint16_t Reg, uint8_t *pData, uint16_t Length){
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b08a      	sub	sp, #40	; 0x28
 8000d9c:	af04      	add	r7, sp, #16
 8000d9e:	60ba      	str	r2, [r7, #8]
 8000da0:	461a      	mov	r2, r3
 8000da2:	4603      	mov	r3, r0
 8000da4:	81fb      	strh	r3, [r7, #14]
 8000da6:	460b      	mov	r3, r1
 8000da8:	81bb      	strh	r3, [r7, #12]
 8000daa:	4613      	mov	r3, r2
 8000dac:	80fb      	strh	r3, [r7, #6]
    int32_t ret = HAL_I2C_Mem_Write(&hi2c1, Address, Reg, I2C_MEMADD_SIZE_16BIT, pData, Length, 1000);
 8000dae:	89ba      	ldrh	r2, [r7, #12]
 8000db0:	89f9      	ldrh	r1, [r7, #14]
 8000db2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000db6:	9302      	str	r3, [sp, #8]
 8000db8:	88fb      	ldrh	r3, [r7, #6]
 8000dba:	9301      	str	r3, [sp, #4]
 8000dbc:	68bb      	ldr	r3, [r7, #8]
 8000dbe:	9300      	str	r3, [sp, #0]
 8000dc0:	2302      	movs	r3, #2
 8000dc2:	4805      	ldr	r0, [pc, #20]	; (8000dd8 <BSP_I2C1_WriteReg16+0x40>)
 8000dc4:	f007 f88e 	bl	8007ee4 <HAL_I2C_Mem_Write>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	617b      	str	r3, [r7, #20]
    return ret;
 8000dcc:	697b      	ldr	r3, [r7, #20]
}
 8000dce:	4618      	mov	r0, r3
 8000dd0:	3718      	adds	r7, #24
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bd80      	pop	{r7, pc}
 8000dd6:	bf00      	nop
 8000dd8:	20001480 	.word	0x20001480

08000ddc <BSP_I2C1_ReadReg16>:

int32_t BSP_I2C1_ReadReg16(uint16_t Address, uint16_t Reg, uint8_t *pData, uint16_t Length){
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b08a      	sub	sp, #40	; 0x28
 8000de0:	af04      	add	r7, sp, #16
 8000de2:	60ba      	str	r2, [r7, #8]
 8000de4:	461a      	mov	r2, r3
 8000de6:	4603      	mov	r3, r0
 8000de8:	81fb      	strh	r3, [r7, #14]
 8000dea:	460b      	mov	r3, r1
 8000dec:	81bb      	strh	r3, [r7, #12]
 8000dee:	4613      	mov	r3, r2
 8000df0:	80fb      	strh	r3, [r7, #6]
    int32_t ret = HAL_I2C_Mem_Read(&hi2c1, Address, Reg, I2C_MEMADD_SIZE_16BIT, pData, Length, 1000);
 8000df2:	89ba      	ldrh	r2, [r7, #12]
 8000df4:	89f9      	ldrh	r1, [r7, #14]
 8000df6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000dfa:	9302      	str	r3, [sp, #8]
 8000dfc:	88fb      	ldrh	r3, [r7, #6]
 8000dfe:	9301      	str	r3, [sp, #4]
 8000e00:	68bb      	ldr	r3, [r7, #8]
 8000e02:	9300      	str	r3, [sp, #0]
 8000e04:	2302      	movs	r3, #2
 8000e06:	4805      	ldr	r0, [pc, #20]	; (8000e1c <BSP_I2C1_ReadReg16+0x40>)
 8000e08:	f007 f980 	bl	800810c <HAL_I2C_Mem_Read>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	617b      	str	r3, [r7, #20]
    return ret;
 8000e10:	697b      	ldr	r3, [r7, #20]
}
 8000e12:	4618      	mov	r0, r3
 8000e14:	3718      	adds	r7, #24
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}
 8000e1a:	bf00      	nop
 8000e1c:	20001480 	.word	0x20001480

08000e20 <BSP_I2C2_WriteRegHTS221>:

int32_t BSP_I2C2_WriteRegHTS221(uint8_t Reg, uint8_t *pData, uint8_t Length){
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b088      	sub	sp, #32
 8000e24:	af04      	add	r7, sp, #16
 8000e26:	4603      	mov	r3, r0
 8000e28:	6039      	str	r1, [r7, #0]
 8000e2a:	71fb      	strb	r3, [r7, #7]
 8000e2c:	4613      	mov	r3, r2
 8000e2e:	71bb      	strb	r3, [r7, #6]
    int32_t ret = HAL_I2C_Mem_Write(&hi2c2, HTS221_I2C_ADDR, Reg | 0x80, I2C_MEMADD_SIZE_8BIT, pData, Length, 100);
 8000e30:	79fb      	ldrb	r3, [r7, #7]
 8000e32:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000e36:	b2db      	uxtb	r3, r3
 8000e38:	b29a      	uxth	r2, r3
 8000e3a:	79bb      	ldrb	r3, [r7, #6]
 8000e3c:	b29b      	uxth	r3, r3
 8000e3e:	2164      	movs	r1, #100	; 0x64
 8000e40:	9102      	str	r1, [sp, #8]
 8000e42:	9301      	str	r3, [sp, #4]
 8000e44:	683b      	ldr	r3, [r7, #0]
 8000e46:	9300      	str	r3, [sp, #0]
 8000e48:	2301      	movs	r3, #1
 8000e4a:	21be      	movs	r1, #190	; 0xbe
 8000e4c:	4804      	ldr	r0, [pc, #16]	; (8000e60 <BSP_I2C2_WriteRegHTS221+0x40>)
 8000e4e:	f007 f849 	bl	8007ee4 <HAL_I2C_Mem_Write>
 8000e52:	4603      	mov	r3, r0
 8000e54:	60fb      	str	r3, [r7, #12]
    return ret;
 8000e56:	68fb      	ldr	r3, [r7, #12]
}
 8000e58:	4618      	mov	r0, r3
 8000e5a:	3710      	adds	r7, #16
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	bd80      	pop	{r7, pc}
 8000e60:	200014cc 	.word	0x200014cc

08000e64 <BSP_I2C2_ReadRegHTS221>:

int32_t BSP_I2C2_ReadRegHTS221(uint8_t Reg, uint8_t *pData, uint8_t Length){
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b088      	sub	sp, #32
 8000e68:	af04      	add	r7, sp, #16
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	6039      	str	r1, [r7, #0]
 8000e6e:	71fb      	strb	r3, [r7, #7]
 8000e70:	4613      	mov	r3, r2
 8000e72:	71bb      	strb	r3, [r7, #6]
    int32_t ret = HAL_I2C_Mem_Read(&hi2c2, HTS221_I2C_ADDR, Reg | 0x80, I2C_MEMADD_SIZE_8BIT, pData, Length, 100);
 8000e74:	79fb      	ldrb	r3, [r7, #7]
 8000e76:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000e7a:	b2db      	uxtb	r3, r3
 8000e7c:	b29a      	uxth	r2, r3
 8000e7e:	79bb      	ldrb	r3, [r7, #6]
 8000e80:	b29b      	uxth	r3, r3
 8000e82:	2164      	movs	r1, #100	; 0x64
 8000e84:	9102      	str	r1, [sp, #8]
 8000e86:	9301      	str	r3, [sp, #4]
 8000e88:	683b      	ldr	r3, [r7, #0]
 8000e8a:	9300      	str	r3, [sp, #0]
 8000e8c:	2301      	movs	r3, #1
 8000e8e:	21be      	movs	r1, #190	; 0xbe
 8000e90:	4804      	ldr	r0, [pc, #16]	; (8000ea4 <BSP_I2C2_ReadRegHTS221+0x40>)
 8000e92:	f007 f93b 	bl	800810c <HAL_I2C_Mem_Read>
 8000e96:	4603      	mov	r3, r0
 8000e98:	60fb      	str	r3, [r7, #12]
    return ret;
 8000e9a:	68fb      	ldr	r3, [r7, #12]
}
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	3710      	adds	r7, #16
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	bd80      	pop	{r7, pc}
 8000ea4:	200014cc 	.word	0x200014cc

08000ea8 <BSP_I2C2_ReadRegISM330DHCX>:

int32_t BSP_I2C2_ReadRegISM330DHCX(uint8_t Reg, uint8_t *pData, uint8_t Length)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b088      	sub	sp, #32
 8000eac:	af04      	add	r7, sp, #16
 8000eae:	4603      	mov	r3, r0
 8000eb0:	6039      	str	r1, [r7, #0]
 8000eb2:	71fb      	strb	r3, [r7, #7]
 8000eb4:	4613      	mov	r3, r2
 8000eb6:	71bb      	strb	r3, [r7, #6]
	int32_t ret = HAL_I2C_Mem_Read(&hi2c2, ISM330DHCX_I2C_ADDR, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length, 100);
 8000eb8:	79fb      	ldrb	r3, [r7, #7]
 8000eba:	b29a      	uxth	r2, r3
 8000ebc:	79bb      	ldrb	r3, [r7, #6]
 8000ebe:	b29b      	uxth	r3, r3
 8000ec0:	2164      	movs	r1, #100	; 0x64
 8000ec2:	9102      	str	r1, [sp, #8]
 8000ec4:	9301      	str	r3, [sp, #4]
 8000ec6:	683b      	ldr	r3, [r7, #0]
 8000ec8:	9300      	str	r3, [sp, #0]
 8000eca:	2301      	movs	r3, #1
 8000ecc:	21d6      	movs	r1, #214	; 0xd6
 8000ece:	4805      	ldr	r0, [pc, #20]	; (8000ee4 <BSP_I2C2_ReadRegISM330DHCX+0x3c>)
 8000ed0:	f007 f91c 	bl	800810c <HAL_I2C_Mem_Read>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	60fb      	str	r3, [r7, #12]
    return ret;
 8000ed8:	68fb      	ldr	r3, [r7, #12]
}
 8000eda:	4618      	mov	r0, r3
 8000edc:	3710      	adds	r7, #16
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bd80      	pop	{r7, pc}
 8000ee2:	bf00      	nop
 8000ee4:	200014cc 	.word	0x200014cc

08000ee8 <BSP_I2C2_WriteRegISM330DHCX>:

int32_t BSP_I2C2_WriteRegISM330DHCX(uint8_t Reg, uint8_t *pData, uint8_t Length)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b088      	sub	sp, #32
 8000eec:	af04      	add	r7, sp, #16
 8000eee:	4603      	mov	r3, r0
 8000ef0:	6039      	str	r1, [r7, #0]
 8000ef2:	71fb      	strb	r3, [r7, #7]
 8000ef4:	4613      	mov	r3, r2
 8000ef6:	71bb      	strb	r3, [r7, #6]
	int32_t ret = HAL_I2C_Mem_Write(&hi2c2, ISM330DHCX_I2C_ADDR, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length, 100);
 8000ef8:	79fb      	ldrb	r3, [r7, #7]
 8000efa:	b29a      	uxth	r2, r3
 8000efc:	79bb      	ldrb	r3, [r7, #6]
 8000efe:	b29b      	uxth	r3, r3
 8000f00:	2164      	movs	r1, #100	; 0x64
 8000f02:	9102      	str	r1, [sp, #8]
 8000f04:	9301      	str	r3, [sp, #4]
 8000f06:	683b      	ldr	r3, [r7, #0]
 8000f08:	9300      	str	r3, [sp, #0]
 8000f0a:	2301      	movs	r3, #1
 8000f0c:	21d6      	movs	r1, #214	; 0xd6
 8000f0e:	4805      	ldr	r0, [pc, #20]	; (8000f24 <BSP_I2C2_WriteRegISM330DHCX+0x3c>)
 8000f10:	f006 ffe8 	bl	8007ee4 <HAL_I2C_Mem_Write>
 8000f14:	4603      	mov	r3, r0
 8000f16:	60fb      	str	r3, [r7, #12]
    return ret;
 8000f18:	68fb      	ldr	r3, [r7, #12]
}
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	3710      	adds	r7, #16
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bd80      	pop	{r7, pc}
 8000f22:	bf00      	nop
 8000f24:	200014cc 	.word	0x200014cc

08000f28 <BSP_ReadPinISM330DHCX>:

int32_t BSP_ReadPinISM330DHCX(void)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	af00      	add	r7, sp, #0
    return HAL_GPIO_ReadPin(Mems_ISM330DLC_INT1_GPIO_Port, Mems_ISM330DLC_INT1_Pin);
 8000f2c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000f30:	4802      	ldr	r0, [pc, #8]	; (8000f3c <BSP_ReadPinISM330DHCX+0x14>)
 8000f32:	f006 fecf 	bl	8007cd4 <HAL_GPIO_ReadPin>
 8000f36:	4603      	mov	r3, r0
}
 8000f38:	4618      	mov	r0, r3
 8000f3a:	bd80      	pop	{r7, pc}
 8000f3c:	42021000 	.word	0x42021000

08000f40 <BSP_ISM330DHCX_IO_Init>:

void BSP_ISM330DHCX_IO_Init(void)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	af00      	add	r7, sp, #0
    MotionSensor_GPIO_Init();
 8000f44:	f003 fcd8 	bl	80048f8 <MotionSensor_GPIO_Init>
	BSP_I2C2_Init();
 8000f48:	f7ff ff0e 	bl	8000d68 <BSP_I2C2_Init>
}
 8000f4c:	bf00      	nop
 8000f4e:	bd80      	pop	{r7, pc}

08000f50 <BSP_LPS22HH_IO_Init>:

void BSP_LPS22HH_IO_Init(void)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	af00      	add	r7, sp, #0
	PressureSensor_GPIO_Init();
 8000f54:	f003 fcf0 	bl	8004938 <PressureSensor_GPIO_Init>
	BSP_I2C2_Init();
 8000f58:	f7ff ff06 	bl	8000d68 <BSP_I2C2_Init>
}
 8000f5c:	bf00      	nop
 8000f5e:	bd80      	pop	{r7, pc}

08000f60 <BSP_I2C2_ReadRegLPS22HH>:

int32_t BSP_I2C2_ReadRegLPS22HH(uint8_t Reg, uint8_t *pData, uint8_t Length)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b088      	sub	sp, #32
 8000f64:	af04      	add	r7, sp, #16
 8000f66:	4603      	mov	r3, r0
 8000f68:	6039      	str	r1, [r7, #0]
 8000f6a:	71fb      	strb	r3, [r7, #7]
 8000f6c:	4613      	mov	r3, r2
 8000f6e:	71bb      	strb	r3, [r7, #6]
	int32_t ret = HAL_I2C_Mem_Read(&hi2c2, LPS22HH_I2C_ADDR, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length, 100);
 8000f70:	79fb      	ldrb	r3, [r7, #7]
 8000f72:	b29a      	uxth	r2, r3
 8000f74:	79bb      	ldrb	r3, [r7, #6]
 8000f76:	b29b      	uxth	r3, r3
 8000f78:	2164      	movs	r1, #100	; 0x64
 8000f7a:	9102      	str	r1, [sp, #8]
 8000f7c:	9301      	str	r3, [sp, #4]
 8000f7e:	683b      	ldr	r3, [r7, #0]
 8000f80:	9300      	str	r3, [sp, #0]
 8000f82:	2301      	movs	r3, #1
 8000f84:	21ba      	movs	r1, #186	; 0xba
 8000f86:	4805      	ldr	r0, [pc, #20]	; (8000f9c <BSP_I2C2_ReadRegLPS22HH+0x3c>)
 8000f88:	f007 f8c0 	bl	800810c <HAL_I2C_Mem_Read>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	60fb      	str	r3, [r7, #12]
    return ret;
 8000f90:	68fb      	ldr	r3, [r7, #12]
}
 8000f92:	4618      	mov	r0, r3
 8000f94:	3710      	adds	r7, #16
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bd80      	pop	{r7, pc}
 8000f9a:	bf00      	nop
 8000f9c:	200014cc 	.word	0x200014cc

08000fa0 <BSP_I2C2_WriteRegLPS22HH>:

int32_t BSP_I2C2_WriteRegLPS22HH(uint8_t Reg, uint8_t *pData, uint8_t Length)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b088      	sub	sp, #32
 8000fa4:	af04      	add	r7, sp, #16
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	6039      	str	r1, [r7, #0]
 8000faa:	71fb      	strb	r3, [r7, #7]
 8000fac:	4613      	mov	r3, r2
 8000fae:	71bb      	strb	r3, [r7, #6]
	int32_t ret = HAL_I2C_Mem_Write(&hi2c2, LPS22HH_I2C_ADDR, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length, 100);
 8000fb0:	79fb      	ldrb	r3, [r7, #7]
 8000fb2:	b29a      	uxth	r2, r3
 8000fb4:	79bb      	ldrb	r3, [r7, #6]
 8000fb6:	b29b      	uxth	r3, r3
 8000fb8:	2164      	movs	r1, #100	; 0x64
 8000fba:	9102      	str	r1, [sp, #8]
 8000fbc:	9301      	str	r3, [sp, #4]
 8000fbe:	683b      	ldr	r3, [r7, #0]
 8000fc0:	9300      	str	r3, [sp, #0]
 8000fc2:	2301      	movs	r3, #1
 8000fc4:	21ba      	movs	r1, #186	; 0xba
 8000fc6:	4813      	ldr	r0, [pc, #76]	; (8001014 <BSP_I2C2_WriteRegLPS22HH+0x74>)
 8000fc8:	f006 ff8c 	bl	8007ee4 <HAL_I2C_Mem_Write>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	60fb      	str	r3, [r7, #12]
	if(ret != HAL_OK && hi2c2.ErrorCode == HAL_I2C_ERROR_AF)
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d013      	beq.n	8000ffe <BSP_I2C2_WriteRegLPS22HH+0x5e>
 8000fd6:	4b0f      	ldr	r3, [pc, #60]	; (8001014 <BSP_I2C2_WriteRegLPS22HH+0x74>)
 8000fd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fda:	2b04      	cmp	r3, #4
 8000fdc:	d10f      	bne.n	8000ffe <BSP_I2C2_WriteRegLPS22HH+0x5e>
	{
		ret = HAL_I2C_Mem_Write(&hi2c2, LPS22HH_I2C_ADDR, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length, 100); //Retry
 8000fde:	79fb      	ldrb	r3, [r7, #7]
 8000fe0:	b29a      	uxth	r2, r3
 8000fe2:	79bb      	ldrb	r3, [r7, #6]
 8000fe4:	b29b      	uxth	r3, r3
 8000fe6:	2164      	movs	r1, #100	; 0x64
 8000fe8:	9102      	str	r1, [sp, #8]
 8000fea:	9301      	str	r3, [sp, #4]
 8000fec:	683b      	ldr	r3, [r7, #0]
 8000fee:	9300      	str	r3, [sp, #0]
 8000ff0:	2301      	movs	r3, #1
 8000ff2:	21ba      	movs	r1, #186	; 0xba
 8000ff4:	4807      	ldr	r0, [pc, #28]	; (8001014 <BSP_I2C2_WriteRegLPS22HH+0x74>)
 8000ff6:	f006 ff75 	bl	8007ee4 <HAL_I2C_Mem_Write>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	60fb      	str	r3, [r7, #12]
	}

	if(ret != HAL_OK)
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	2b00      	cmp	r3, #0
 8001002:	d002      	beq.n	800100a <BSP_I2C2_WriteRegLPS22HH+0x6a>
	{
		return hi2c2.ErrorCode;
 8001004:	4b03      	ldr	r3, [pc, #12]	; (8001014 <BSP_I2C2_WriteRegLPS22HH+0x74>)
 8001006:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001008:	e000      	b.n	800100c <BSP_I2C2_WriteRegLPS22HH+0x6c>
	}
    return ret;
 800100a:	68fb      	ldr	r3, [r7, #12]
}
 800100c:	4618      	mov	r0, r3
 800100e:	3710      	adds	r7, #16
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}
 8001014:	200014cc 	.word	0x200014cc

08001018 <BSP_ReadPinLPS22HH>:

int32_t BSP_ReadPinLPS22HH(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	af00      	add	r7, sp, #0
	return HAL_GPIO_ReadPin(Mems_INT_LPS22HH_GPIO_Port, Mems_INT_LPS22HH_Pin);
 800101c:	2104      	movs	r1, #4
 800101e:	4803      	ldr	r0, [pc, #12]	; (800102c <BSP_ReadPinLPS22HH+0x14>)
 8001020:	f006 fe58 	bl	8007cd4 <HAL_GPIO_ReadPin>
 8001024:	4603      	mov	r3, r0
}
 8001026:	4618      	mov	r0, r3
 8001028:	bd80      	pop	{r7, pc}
 800102a:	bf00      	nop
 800102c:	42021800 	.word	0x42021800

08001030 <BSP_IIS2MDC_IO_Init>:

void BSP_IIS2MDC_IO_Init(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	af00      	add	r7, sp, #0
	MagSensor_GPIO_Init();
 8001034:	f003 fca0 	bl	8004978 <MagSensor_GPIO_Init>
	BSP_I2C2_Init();
 8001038:	f7ff fe96 	bl	8000d68 <BSP_I2C2_Init>
}
 800103c:	bf00      	nop
 800103e:	bd80      	pop	{r7, pc}

08001040 <BSP_I2C2_ReadRegIIS2MDC>:

int32_t BSP_I2C2_ReadRegIIS2MDC(uint8_t Reg, uint8_t *pData, uint8_t Length)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b088      	sub	sp, #32
 8001044:	af04      	add	r7, sp, #16
 8001046:	4603      	mov	r3, r0
 8001048:	6039      	str	r1, [r7, #0]
 800104a:	71fb      	strb	r3, [r7, #7]
 800104c:	4613      	mov	r3, r2
 800104e:	71bb      	strb	r3, [r7, #6]
	int32_t ret = HAL_I2C_Mem_Read(&hi2c2, IIS2MDC_I2C_ADDR, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length, 100);
 8001050:	79fb      	ldrb	r3, [r7, #7]
 8001052:	b29a      	uxth	r2, r3
 8001054:	79bb      	ldrb	r3, [r7, #6]
 8001056:	b29b      	uxth	r3, r3
 8001058:	2164      	movs	r1, #100	; 0x64
 800105a:	9102      	str	r1, [sp, #8]
 800105c:	9301      	str	r3, [sp, #4]
 800105e:	683b      	ldr	r3, [r7, #0]
 8001060:	9300      	str	r3, [sp, #0]
 8001062:	2301      	movs	r3, #1
 8001064:	213c      	movs	r1, #60	; 0x3c
 8001066:	4808      	ldr	r0, [pc, #32]	; (8001088 <BSP_I2C2_ReadRegIIS2MDC+0x48>)
 8001068:	f007 f850 	bl	800810c <HAL_I2C_Mem_Read>
 800106c:	4603      	mov	r3, r0
 800106e:	60fb      	str	r3, [r7, #12]
	if(ret != HAL_OK)
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	2b00      	cmp	r3, #0
 8001074:	d002      	beq.n	800107c <BSP_I2C2_ReadRegIIS2MDC+0x3c>
	{
		return hi2c2.ErrorCode;
 8001076:	4b04      	ldr	r3, [pc, #16]	; (8001088 <BSP_I2C2_ReadRegIIS2MDC+0x48>)
 8001078:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800107a:	e000      	b.n	800107e <BSP_I2C2_ReadRegIIS2MDC+0x3e>
	}
    return ret;
 800107c:	68fb      	ldr	r3, [r7, #12]
}
 800107e:	4618      	mov	r0, r3
 8001080:	3710      	adds	r7, #16
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}
 8001086:	bf00      	nop
 8001088:	200014cc 	.word	0x200014cc

0800108c <BSP_I2C2_WriteRegIIS2MDC>:

int32_t BSP_I2C2_WriteRegIIS2MDC(uint8_t Reg, uint8_t *pData, uint8_t Length)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b088      	sub	sp, #32
 8001090:	af04      	add	r7, sp, #16
 8001092:	4603      	mov	r3, r0
 8001094:	6039      	str	r1, [r7, #0]
 8001096:	71fb      	strb	r3, [r7, #7]
 8001098:	4613      	mov	r3, r2
 800109a:	71bb      	strb	r3, [r7, #6]
	int32_t ret = HAL_I2C_Mem_Write(&hi2c2, IIS2MDC_I2C_ADDR, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length, 100);
 800109c:	79fb      	ldrb	r3, [r7, #7]
 800109e:	b29a      	uxth	r2, r3
 80010a0:	79bb      	ldrb	r3, [r7, #6]
 80010a2:	b29b      	uxth	r3, r3
 80010a4:	2164      	movs	r1, #100	; 0x64
 80010a6:	9102      	str	r1, [sp, #8]
 80010a8:	9301      	str	r3, [sp, #4]
 80010aa:	683b      	ldr	r3, [r7, #0]
 80010ac:	9300      	str	r3, [sp, #0]
 80010ae:	2301      	movs	r3, #1
 80010b0:	213c      	movs	r1, #60	; 0x3c
 80010b2:	4808      	ldr	r0, [pc, #32]	; (80010d4 <BSP_I2C2_WriteRegIIS2MDC+0x48>)
 80010b4:	f006 ff16 	bl	8007ee4 <HAL_I2C_Mem_Write>
 80010b8:	4603      	mov	r3, r0
 80010ba:	60fb      	str	r3, [r7, #12]
	if(ret != HAL_OK)
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d002      	beq.n	80010c8 <BSP_I2C2_WriteRegIIS2MDC+0x3c>
	{
		return hi2c2.ErrorCode;
 80010c2:	4b04      	ldr	r3, [pc, #16]	; (80010d4 <BSP_I2C2_WriteRegIIS2MDC+0x48>)
 80010c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010c6:	e000      	b.n	80010ca <BSP_I2C2_WriteRegIIS2MDC+0x3e>
	}
    return ret;
 80010c8:	68fb      	ldr	r3, [r7, #12]
}
 80010ca:	4618      	mov	r0, r3
 80010cc:	3710      	adds	r7, #16
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	bf00      	nop
 80010d4:	200014cc 	.word	0x200014cc

080010d8 <BSP_ReadPinIIS2MDC>:

int32_t BSP_ReadPinIIS2MDC(void)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	af00      	add	r7, sp, #0
	return HAL_GPIO_ReadPin(Mems_INT_IIS2MDC_GPIO_Port, Mems_INT_IIS2MDC_Pin);
 80010dc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80010e0:	4802      	ldr	r0, [pc, #8]	; (80010ec <BSP_ReadPinIIS2MDC+0x14>)
 80010e2:	f006 fdf7 	bl	8007cd4 <HAL_GPIO_ReadPin>
 80010e6:	4603      	mov	r3, r0
}
 80010e8:	4618      	mov	r0, r3
 80010ea:	bd80      	pop	{r7, pc}
 80010ec:	42020c00 	.word	0x42020c00

080010f0 <BSP_GetTick>:

uint32_t BSP_GetTick(void)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	af00      	add	r7, sp, #0
    return HAL_GetTick();
 80010f4:	f004 fbbc 	bl	8005870 <HAL_GetTick>
 80010f8:	4603      	mov	r3, r0
}
 80010fa:	4618      	mov	r0, r3
 80010fc:	bd80      	pop	{r7, pc}

080010fe <BSP_CameraInit>:

static void BSP_CameraHwReset(void);
static void BSP_CameraHWInit(void);

BSP_CameraStatus_t BSP_CameraInit(void)
{
 80010fe:	b580      	push	{r7, lr}
 8001100:	af00      	add	r7, sp, #0
	MX_GPDMA1_Init();
 8001102:	f003 f851 	bl	80041a8 <MX_GPDMA1_Init>
	MX_DCMI_Init();
 8001106:	f002 ff21 	bl	8003f4c <MX_DCMI_Init>
	BSP_CameraHwReset();//Reset it
 800110a:	f000 f817 	bl	800113c <BSP_CameraHwReset>
    BSP_CameraHWInit(); //Init OV5460 driver
 800110e:	f000 f839 	bl	8001184 <BSP_CameraHWInit>
	return CameraOK;
 8001112:	2300      	movs	r3, #0
}
 8001114:	4618      	mov	r0, r3
 8001116:	bd80      	pop	{r7, pc}

08001118 <BSP_CameraStart>:

void BSP_CameraStart(uint8_t* Buffer){
 8001118:	b580      	push	{r7, lr}
 800111a:	b082      	sub	sp, #8
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
	  HAL_DCMI_Start_DMA(&hdcmi, DCMI_MODE_CONTINUOUS, (uint32_t)Buffer, CAMERA_DATA_SIZE);
 8001120:	687a      	ldr	r2, [r7, #4]
 8001122:	f44f 3316 	mov.w	r3, #153600	; 0x25800
 8001126:	2100      	movs	r1, #0
 8001128:	4803      	ldr	r0, [pc, #12]	; (8001138 <BSP_CameraStart+0x20>)
 800112a:	f004 fe13 	bl	8005d54 <HAL_DCMI_Start_DMA>
}
 800112e:	bf00      	nop
 8001130:	3708      	adds	r7, #8
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}
 8001136:	bf00      	nop
 8001138:	200013b8 	.word	0x200013b8

0800113c <BSP_CameraHwReset>:
void BSP_CameraStop(void){
	  HAL_DCMI_Stop(&hdcmi);
}

static void BSP_CameraHwReset(void)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	af00      	add	r7, sp, #0
    /* Camera sensor RESET sequence */
    /* Assert the camera STANDBY and RSTI pins */

    HAL_GPIO_WritePin(CAM_XSDN_GPIO_Port, CAM_XSDN_Pin, GPIO_PIN_SET);
 8001140:	2201      	movs	r2, #1
 8001142:	2108      	movs	r1, #8
 8001144:	480e      	ldr	r0, [pc, #56]	; (8001180 <BSP_CameraHwReset+0x44>)
 8001146:	f006 fddd 	bl	8007d04 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(CAM_RSTI_GPIO_Port, CAM_RSTI_Pin, GPIO_PIN_RESET);
 800114a:	2200      	movs	r2, #0
 800114c:	2104      	movs	r1, #4
 800114e:	480c      	ldr	r0, [pc, #48]	; (8001180 <BSP_CameraHwReset+0x44>)
 8001150:	f006 fdd8 	bl	8007d04 <HAL_GPIO_WritePin>
    HAL_Delay(100);   /* RST and XSDN signals asserted during 100ms */
 8001154:	2064      	movs	r0, #100	; 0x64
 8001156:	f004 fb97 	bl	8005888 <HAL_Delay>

    /* De-assert the camera STANDBY pin (active high) */
    HAL_GPIO_WritePin(CAM_XSDN_GPIO_Port, CAM_XSDN_Pin, GPIO_PIN_RESET);
 800115a:	2200      	movs	r2, #0
 800115c:	2108      	movs	r1, #8
 800115e:	4808      	ldr	r0, [pc, #32]	; (8001180 <BSP_CameraHwReset+0x44>)
 8001160:	f006 fdd0 	bl	8007d04 <HAL_GPIO_WritePin>
    HAL_Delay(3);     /* RST de-asserted and XSDN de-asserted during 3ms */
 8001164:	2003      	movs	r0, #3
 8001166:	f004 fb8f 	bl	8005888 <HAL_Delay>

    /* De-assert the camera RSTI pin (active low) */
    HAL_GPIO_WritePin(CAM_RSTI_GPIO_Port, CAM_RSTI_Pin, GPIO_PIN_SET);
 800116a:	2201      	movs	r2, #1
 800116c:	2104      	movs	r1, #4
 800116e:	4804      	ldr	r0, [pc, #16]	; (8001180 <BSP_CameraHwReset+0x44>)
 8001170:	f006 fdc8 	bl	8007d04 <HAL_GPIO_WritePin>
    HAL_Delay(20);     /* RST de-asserted during 20ms */
 8001174:	2014      	movs	r0, #20
 8001176:	f004 fb87 	bl	8005888 <HAL_Delay>
}
 800117a:	bf00      	nop
 800117c:	bd80      	pop	{r7, pc}
 800117e:	bf00      	nop
 8001180:	42022000 	.word	0x42022000

08001184 <BSP_CameraHWInit>:

static void BSP_CameraHWInit(void){
 8001184:	b580      	push	{r7, lr}
 8001186:	b088      	sub	sp, #32
 8001188:	af00      	add	r7, sp, #0
	  uint32_t temp = 0;
 800118a:	2300      	movs	r3, #0
 800118c:	61fb      	str	r3, [r7, #28]
	  OV5640_IO_t              IO;
	  static OV5640_Handle_t   OV5640_Handle;
	  IO.Address = CAMERA_OV5640_ADDRESS;
 800118e:	2378      	movs	r3, #120	; 0x78
 8001190:	80bb      	strh	r3, [r7, #4]
	  IO.Init = BSP_I2C1_Init;
 8001192:	4b0f      	ldr	r3, [pc, #60]	; (80011d0 <BSP_CameraHWInit+0x4c>)
 8001194:	60bb      	str	r3, [r7, #8]
	  IO.DeInit = BSP_I2C1_DeInit;
 8001196:	4b0f      	ldr	r3, [pc, #60]	; (80011d4 <BSP_CameraHWInit+0x50>)
 8001198:	60fb      	str	r3, [r7, #12]
      IO.Read = BSP_I2C1_ReadReg16;
 800119a:	4b0f      	ldr	r3, [pc, #60]	; (80011d8 <BSP_CameraHWInit+0x54>)
 800119c:	617b      	str	r3, [r7, #20]
      IO.Write = BSP_I2C1_WriteReg16;
 800119e:	4b0f      	ldr	r3, [pc, #60]	; (80011dc <BSP_CameraHWInit+0x58>)
 80011a0:	613b      	str	r3, [r7, #16]
      IO.GetTick = BSP_GetTick;
 80011a2:	4b0f      	ldr	r3, [pc, #60]	; (80011e0 <BSP_CameraHWInit+0x5c>)
 80011a4:	61bb      	str	r3, [r7, #24]
      OV5640_LinkBus(&OV5640_Handle, &IO);
 80011a6:	1d3b      	adds	r3, r7, #4
 80011a8:	4619      	mov	r1, r3
 80011aa:	480e      	ldr	r0, [pc, #56]	; (80011e4 <BSP_CameraHWInit+0x60>)
 80011ac:	f002 f990 	bl	80034d0 <OV5640_LinkBus>
      OV5640_ReadID(&OV5640_Handle,&temp);
 80011b0:	f107 031c 	add.w	r3, r7, #28
 80011b4:	4619      	mov	r1, r3
 80011b6:	480b      	ldr	r0, [pc, #44]	; (80011e4 <BSP_CameraHWInit+0x60>)
 80011b8:	f002 fd66 	bl	8003c88 <OV5640_ReadID>
      OV5640_Init(&OV5640_Handle, OV5640_R640x480, CAMERA_PF);
 80011bc:	2200      	movs	r2, #0
 80011be:	2103      	movs	r1, #3
 80011c0:	4808      	ldr	r0, [pc, #32]	; (80011e4 <BSP_CameraHWInit+0x60>)
 80011c2:	f002 f9a9 	bl	8003518 <OV5640_Init>
}
 80011c6:	bf00      	nop
 80011c8:	3720      	adds	r7, #32
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}
 80011ce:	bf00      	nop
 80011d0:	08000d39 	.word	0x08000d39
 80011d4:	08000d55 	.word	0x08000d55
 80011d8:	08000ddd 	.word	0x08000ddd
 80011dc:	08000d99 	.word	0x08000d99
 80011e0:	080010f1 	.word	0x080010f1
 80011e4:	20000464 	.word	0x20000464

080011e8 <HAL_DCMI_FrameEventCallback>:

void HAL_DCMI_FrameEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 80011e8:	b480      	push	{r7}
 80011ea:	b083      	sub	sp, #12
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
    UNUSED(hdcmi);
}
 80011f0:	bf00      	nop
 80011f2:	370c      	adds	r7, #12
 80011f4:	46bd      	mov	sp, r7
 80011f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fa:	4770      	bx	lr

080011fc <BSP_TempHumSensorInit>:

static IIS2MDC_Handle_t Magnetometer = {0};


int32_t BSP_TempHumSensorInit(void)
{
 80011fc:	b5b0      	push	{r4, r5, r7, lr}
 80011fe:	b08a      	sub	sp, #40	; 0x28
 8001200:	af00      	add	r7, sp, #0
	int32_t ret = 0;
 8001202:	2300      	movs	r3, #0
 8001204:	627b      	str	r3, [r7, #36]	; 0x24
	HTS221_IO_t TempSensor_IO = {.Init = BSP_I2C2_Init,
 8001206:	4b0f      	ldr	r3, [pc, #60]	; (8001244 <BSP_TempHumSensorInit+0x48>)
 8001208:	f107 040c 	add.w	r4, r7, #12
 800120c:	461d      	mov	r5, r3
 800120e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001210:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001212:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001216:	e884 0003 	stmia.w	r4, {r0, r1}
								 .Write = BSP_I2C2_WriteRegHTS221,
								 .GetTick = BSP_GetTick,
								 .ReadPin = NULL
	};

	HTS221_Init_Struct_t Settings = { .DataReadyConfig = HTS221_DataReadyDisable,
 800121a:	4a0b      	ldr	r2, [pc, #44]	; (8001248 <BSP_TempHumSensorInit+0x4c>)
 800121c:	1d3b      	adds	r3, r7, #4
 800121e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001222:	6018      	str	r0, [r3, #0]
 8001224:	3304      	adds	r3, #4
 8001226:	8019      	strh	r1, [r3, #0]
									  .HumidityResolution = HTS221_Hum64Samples,
									  .OutputDataRate = HTS221_1_0Hz,
									  .TemperatureResolution = HTS221_Temp32amples

	};
	ret = HTS221_Init(&TempSensor_Handle, Settings, &TempSensor_IO);
 8001228:	f107 030c 	add.w	r3, r7, #12
 800122c:	1d3a      	adds	r2, r7, #4
 800122e:	ca06      	ldmia	r2, {r1, r2}
 8001230:	4806      	ldr	r0, [pc, #24]	; (800124c <BSP_TempHumSensorInit+0x50>)
 8001232:	f000 f993 	bl	800155c <HTS221_Init>
 8001236:	6278      	str	r0, [r7, #36]	; 0x24
	return ret;
 8001238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800123a:	4618      	mov	r0, r3
 800123c:	3728      	adds	r7, #40	; 0x28
 800123e:	46bd      	mov	sp, r7
 8001240:	bdb0      	pop	{r4, r5, r7, pc}
 8001242:	bf00      	nop
 8001244:	0800e938 	.word	0x0800e938
 8001248:	0800e950 	.word	0x0800e950
 800124c:	20000488 	.word	0x20000488

08001250 <BSP_ReadTemperature>:

int32_t BSP_ReadTemperature(float *result)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b082      	sub	sp, #8
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
	return HTS221_ReadTemperature(&TempSensor_Handle, result);
 8001258:	6879      	ldr	r1, [r7, #4]
 800125a:	4804      	ldr	r0, [pc, #16]	; (800126c <BSP_ReadTemperature+0x1c>)
 800125c:	f000 f9dc 	bl	8001618 <HTS221_ReadTemperature>
 8001260:	4603      	mov	r3, r0
}
 8001262:	4618      	mov	r0, r3
 8001264:	3708      	adds	r7, #8
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}
 800126a:	bf00      	nop
 800126c:	20000488 	.word	0x20000488

08001270 <BSP_ReadHumidity>:


int32_t BSP_ReadHumidity(float *result)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b082      	sub	sp, #8
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
	return HTS221_ReadHumidity(&TempSensor_Handle, result);
 8001278:	6879      	ldr	r1, [r7, #4]
 800127a:	4804      	ldr	r0, [pc, #16]	; (800128c <BSP_ReadHumidity+0x1c>)
 800127c:	f000 fa11 	bl	80016a2 <HTS221_ReadHumidity>
 8001280:	4603      	mov	r3, r0
}
 8001282:	4618      	mov	r0, r3
 8001284:	3708      	adds	r7, #8
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}
 800128a:	bf00      	nop
 800128c:	20000488 	.word	0x20000488

08001290 <BSP_PressureSensorInit>:
{
	return HTS221_DisableHeater(&TempSensor_Handle);
}

int32_t BSP_PressureSensorInit(void)
{
 8001290:	b5b0      	push	{r4, r5, r7, lr}
 8001292:	b090      	sub	sp, #64	; 0x40
 8001294:	af04      	add	r7, sp, #16
	LPS22HH_IO_t PressureSensor_IO =
 8001296:	4b13      	ldr	r3, [pc, #76]	; (80012e4 <BSP_PressureSensorInit+0x54>)
 8001298:	f107 0414 	add.w	r4, r7, #20
 800129c:	461d      	mov	r5, r3
 800129e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80012a0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80012a2:	e895 0003 	ldmia.w	r5, {r0, r1}
 80012a6:	e884 0003 	stmia.w	r4, {r0, r1}
			.Write = BSP_I2C2_WriteRegLPS22HH,
			.GetTick = BSP_GetTick,
			.ReadPin = BSP_ReadPinLPS22HH
	};

	LPS22HH_Init_Struct_t PressureSettings =
 80012aa:	4b0f      	ldr	r3, [pc, #60]	; (80012e8 <BSP_PressureSensorInit+0x58>)
 80012ac:	463c      	mov	r4, r7
 80012ae:	461d      	mov	r5, r3
 80012b0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80012b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80012b4:	682b      	ldr	r3, [r5, #0]
 80012b6:	6023      	str	r3, [r4, #0]
			.F_MODE = LPS22HH_FifoBypass,
			.WTM = LPS22HH_DefaultSetting,
			.REF_P = LPS22HH_DefaultSetting
	};

	int32_t ret = LPS22HH_Init(&PressureSensor, PressureSettings, &PressureSensor_IO);
 80012b8:	f107 0314 	add.w	r3, r7, #20
 80012bc:	9302      	str	r3, [sp, #8]
 80012be:	466a      	mov	r2, sp
 80012c0:	f107 030c 	add.w	r3, r7, #12
 80012c4:	e893 0003 	ldmia.w	r3, {r0, r1}
 80012c8:	e882 0003 	stmia.w	r2, {r0, r1}
 80012cc:	463b      	mov	r3, r7
 80012ce:	cb0e      	ldmia	r3, {r1, r2, r3}
 80012d0:	4806      	ldr	r0, [pc, #24]	; (80012ec <BSP_PressureSensorInit+0x5c>)
 80012d2:	f001 fd9d 	bl	8002e10 <LPS22HH_Init>
 80012d6:	62f8      	str	r0, [r7, #44]	; 0x2c
	return ret;
 80012d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80012da:	4618      	mov	r0, r3
 80012dc:	3730      	adds	r7, #48	; 0x30
 80012de:	46bd      	mov	sp, r7
 80012e0:	bdb0      	pop	{r4, r5, r7, pc}
 80012e2:	bf00      	nop
 80012e4:	0800e958 	.word	0x0800e958
 80012e8:	0800e970 	.word	0x0800e970
 80012ec:	200004b0 	.word	0x200004b0

080012f0 <BSP_ReadPressure>:

int32_t BSP_ReadPressure(float *result)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b084      	sub	sp, #16
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
	int32_t ret = LPS22HH_ReadPressure(&PressureSensor, result);
 80012f8:	6879      	ldr	r1, [r7, #4]
 80012fa:	4804      	ldr	r0, [pc, #16]	; (800130c <BSP_ReadPressure+0x1c>)
 80012fc:	f001 fe12 	bl	8002f24 <LPS22HH_ReadPressure>
 8001300:	60f8      	str	r0, [r7, #12]
	return ret;
 8001302:	68fb      	ldr	r3, [r7, #12]
}
 8001304:	4618      	mov	r0, r3
 8001306:	3710      	adds	r7, #16
 8001308:	46bd      	mov	sp, r7
 800130a:	bd80      	pop	{r7, pc}
 800130c:	200004b0 	.word	0x200004b0

08001310 <BSP_MagnetometerInit>:
    return ret;
}
*/

int32_t BSP_MagnetometerInit(void)
{
 8001310:	b5b0      	push	{r4, r5, r7, lr}
 8001312:	b090      	sub	sp, #64	; 0x40
 8001314:	af04      	add	r7, sp, #16
    IIS2MDC_IO_t MagnetometerIO =
 8001316:	4b13      	ldr	r3, [pc, #76]	; (8001364 <BSP_MagnetometerInit+0x54>)
 8001318:	f107 0414 	add.w	r4, r7, #20
 800131c:	461d      	mov	r5, r3
 800131e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001320:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001322:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001326:	e884 0003 	stmia.w	r4, {r0, r1}
			.Write = BSP_I2C2_WriteRegIIS2MDC,
			.GetTick = BSP_GetTick,
			.ReadPin = BSP_ReadPinIIS2MDC
    };

    IIS2MDC_InitStruct_t MagnetometerSettings =
 800132a:	4b0f      	ldr	r3, [pc, #60]	; (8001368 <BSP_MagnetometerInit+0x58>)
 800132c:	463c      	mov	r4, r7
 800132e:	461d      	mov	r5, r3
 8001330:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001332:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001334:	682b      	ldr	r3, [r5, #0]
 8001336:	6023      	str	r3, [r4, #0]
			.OffsetX = 0,
			.OffsetY = 0,
			.OffsetZ = 0
    };

    int32_t ret = IIS2MDC_Init(&Magnetometer, MagnetometerSettings, &MagnetometerIO);
 8001338:	f107 0314 	add.w	r3, r7, #20
 800133c:	9302      	str	r3, [sp, #8]
 800133e:	466a      	mov	r2, sp
 8001340:	f107 030c 	add.w	r3, r7, #12
 8001344:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001348:	e882 0003 	stmia.w	r2, {r0, r1}
 800134c:	463b      	mov	r3, r7
 800134e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001350:	4806      	ldr	r0, [pc, #24]	; (800136c <BSP_MagnetometerInit+0x5c>)
 8001352:	f000 fcc3 	bl	8001cdc <IIS2MDC_Init>
 8001356:	62f8      	str	r0, [r7, #44]	; 0x2c
    return ret;
 8001358:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800135a:	4618      	mov	r0, r3
 800135c:	3730      	adds	r7, #48	; 0x30
 800135e:	46bd      	mov	sp, r7
 8001360:	bdb0      	pop	{r4, r5, r7, pc}
 8001362:	bf00      	nop
 8001364:	0800e984 	.word	0x0800e984
 8001368:	0800e99c 	.word	0x0800e99c
 800136c:	200004d8 	.word	0x200004d8

08001370 <BSP_ReadMagnetometerXYZ>:

int32_t BSP_ReadMagnetometerXYZ(float *Mx, float *My, float *Mz)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b086      	sub	sp, #24
 8001374:	af00      	add	r7, sp, #0
 8001376:	60f8      	str	r0, [r7, #12]
 8001378:	60b9      	str	r1, [r7, #8]
 800137a:	607a      	str	r2, [r7, #4]
    int32_t ret = IIS2MDC_ReadMagnetismXYZ(&Magnetometer, Mx, My, Mz);
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	68ba      	ldr	r2, [r7, #8]
 8001380:	68f9      	ldr	r1, [r7, #12]
 8001382:	4804      	ldr	r0, [pc, #16]	; (8001394 <BSP_ReadMagnetometerXYZ+0x24>)
 8001384:	f000 fd98 	bl	8001eb8 <IIS2MDC_ReadMagnetismXYZ>
 8001388:	6178      	str	r0, [r7, #20]
    return ret;
 800138a:	697b      	ldr	r3, [r7, #20]
}
 800138c:	4618      	mov	r0, r3
 800138e:	3718      	adds	r7, #24
 8001390:	46bd      	mov	sp, r7
 8001392:	bd80      	pop	{r7, pc}
 8001394:	200004d8 	.word	0x200004d8

08001398 <BSP_MotionSensorInit>:
#include <stddef.h>

static ISM330DHCX_Handle_t MotionSensor;

int32_t BSP_MotionSensorInit(void)
{
 8001398:	b5b0      	push	{r4, r5, r7, lr}
 800139a:	b0a6      	sub	sp, #152	; 0x98
 800139c:	af0c      	add	r7, sp, #48	; 0x30
	int32_t ret = 0;
 800139e:	2300      	movs	r3, #0
 80013a0:	663b      	str	r3, [r7, #96]	; 0x60
	float JunkData[3];
	uint8_t DiscardedXLSamples = 0;
 80013a2:	2300      	movs	r3, #0
 80013a4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	uint8_t DiscardedGyroSamples = 0;
 80013a8:	2300      	movs	r3, #0
 80013aa:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
	ISM330DHCX_IO_t SensorIO =
 80013ae:	4b38      	ldr	r3, [pc, #224]	; (8001490 <BSP_MotionSensorInit+0xf8>)
 80013b0:	f107 0438 	add.w	r4, r7, #56	; 0x38
 80013b4:	461d      	mov	r5, r3
 80013b6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80013b8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80013ba:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80013be:	e884 0007 	stmia.w	r4, {r0, r1, r2}
			.GetTick = BSP_GetTick,
			.ReadInt1Pin = BSP_ReadPinISM330DHCX,
			.ReadInt2Pin = NULL
	};

	ISM330DHCX_Init_Struct_t Init =
 80013c2:	1d3b      	adds	r3, r7, #4
 80013c4:	2234      	movs	r2, #52	; 0x34
 80013c6:	2100      	movs	r1, #0
 80013c8:	4618      	mov	r0, r3
 80013ca:	f00d fa97 	bl	800e8fc <memset>
 80013ce:	2304      	movs	r3, #4
 80013d0:	71bb      	strb	r3, [r7, #6]
 80013d2:	2330      	movs	r3, #48	; 0x30
 80013d4:	773b      	strb	r3, [r7, #28]
 80013d6:	2302      	movs	r3, #2
 80013d8:	77fb      	strb	r3, [r7, #31]
 80013da:	230c      	movs	r3, #12
 80013dc:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
 80013e0:	2330      	movs	r3, #48	; 0x30
 80013e2:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 80013e6:	2308      	movs	r3, #8
 80013e8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80013ec:	2303      	movs	r3, #3
 80013ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

			.TIMESTAMP_EN = ISM330DHCX_DefaultSetting

	};

	ret = ISM330DHCX_Init(&MotionSensor, Init, &SensorIO);
 80013f2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80013f6:	930a      	str	r3, [sp, #40]	; 0x28
 80013f8:	466d      	mov	r5, sp
 80013fa:	f107 0410 	add.w	r4, r7, #16
 80013fe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001400:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001402:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001404:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001406:	e894 0003 	ldmia.w	r4, {r0, r1}
 800140a:	e885 0003 	stmia.w	r5, {r0, r1}
 800140e:	1d3b      	adds	r3, r7, #4
 8001410:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001412:	4820      	ldr	r0, [pc, #128]	; (8001494 <BSP_MotionSensorInit+0xfc>)
 8001414:	f000 ffbc 	bl	8002390 <ISM330DHCX_Init>
 8001418:	6638      	str	r0, [r7, #96]	; 0x60
	if(ret !=ISM330DHCX_Ok)
 800141a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800141c:	2b00      	cmp	r3, #0
 800141e:	d029      	beq.n	8001474 <BSP_MotionSensorInit+0xdc>
	{
		return ret;
 8001420:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001422:	e030      	b.n	8001486 <BSP_MotionSensorInit+0xee>
	}

	//Discard Junk Samples
	while(DiscardedXLSamples < 6 && DiscardedGyroSamples < 6)
	{
        if(BSP_ReadAccelXYZ(&JunkData[0],&JunkData[1],&JunkData[2]) ==ISM330DHCX_DataReady)
 8001424:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001428:	f103 0208 	add.w	r2, r3, #8
 800142c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001430:	1d19      	adds	r1, r3, #4
 8001432:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001436:	4618      	mov	r0, r3
 8001438:	f000 f82e 	bl	8001498 <BSP_ReadAccelXYZ>
 800143c:	4603      	mov	r3, r0
 800143e:	2b00      	cmp	r3, #0
 8001440:	d104      	bne.n	800144c <BSP_MotionSensorInit+0xb4>
        {
        	DiscardedXLSamples++;
 8001442:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001446:	3301      	adds	r3, #1
 8001448:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        }

        if(BSP_ReadGyroXYZ(&JunkData[0],&JunkData[1],&JunkData[2]) ==ISM330DHCX_DataReady)
 800144c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001450:	f103 0208 	add.w	r2, r3, #8
 8001454:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001458:	1d19      	adds	r1, r3, #4
 800145a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800145e:	4618      	mov	r0, r3
 8001460:	f000 f836 	bl	80014d0 <BSP_ReadGyroXYZ>
 8001464:	4603      	mov	r3, r0
 8001466:	2b00      	cmp	r3, #0
 8001468:	d104      	bne.n	8001474 <BSP_MotionSensorInit+0xdc>
        {
        	DiscardedGyroSamples++;
 800146a:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800146e:	3301      	adds	r3, #1
 8001470:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
	while(DiscardedXLSamples < 6 && DiscardedGyroSamples < 6)
 8001474:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001478:	2b05      	cmp	r3, #5
 800147a:	d803      	bhi.n	8001484 <BSP_MotionSensorInit+0xec>
 800147c:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8001480:	2b05      	cmp	r3, #5
 8001482:	d9cf      	bls.n	8001424 <BSP_MotionSensorInit+0x8c>
        }
	}
	return ISM330DHCX_Ok;
 8001484:	2300      	movs	r3, #0
}
 8001486:	4618      	mov	r0, r3
 8001488:	3768      	adds	r7, #104	; 0x68
 800148a:	46bd      	mov	sp, r7
 800148c:	bdb0      	pop	{r4, r5, r7, pc}
 800148e:	bf00      	nop
 8001490:	0800e9b0 	.word	0x0800e9b0
 8001494:	20000500 	.word	0x20000500

08001498 <BSP_ReadAccelXYZ>:

int32_t BSP_ReadAccelXYZ(float *Ax, float *Ay, float *Az)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b086      	sub	sp, #24
 800149c:	af00      	add	r7, sp, #0
 800149e:	60f8      	str	r0, [r7, #12]
 80014a0:	60b9      	str	r1, [r7, #8]
 80014a2:	607a      	str	r2, [r7, #4]
    int32_t ret = 0;
 80014a4:	2300      	movs	r3, #0
 80014a6:	617b      	str	r3, [r7, #20]
    ret = ISM330DHCX_ReadAccel(&MotionSensor, Ax, Ay, Az);
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	68ba      	ldr	r2, [r7, #8]
 80014ac:	68f9      	ldr	r1, [r7, #12]
 80014ae:	4807      	ldr	r0, [pc, #28]	; (80014cc <BSP_ReadAccelXYZ+0x34>)
 80014b0:	f001 f814 	bl	80024dc <ISM330DHCX_ReadAccel>
 80014b4:	6178      	str	r0, [r7, #20]
    if(ret != ISM330DHCX_DataReady)
 80014b6:	697b      	ldr	r3, [r7, #20]
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d001      	beq.n	80014c0 <BSP_ReadAccelXYZ+0x28>
    {
    	return ret;
 80014bc:	697b      	ldr	r3, [r7, #20]
 80014be:	e000      	b.n	80014c2 <BSP_ReadAccelXYZ+0x2a>
    }
    return ISM330DHCX_DataReady;
 80014c0:	2300      	movs	r3, #0

}
 80014c2:	4618      	mov	r0, r3
 80014c4:	3718      	adds	r7, #24
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}
 80014ca:	bf00      	nop
 80014cc:	20000500 	.word	0x20000500

080014d0 <BSP_ReadGyroXYZ>:

int32_t BSP_ReadGyroXYZ(float *Wx, float *Wy, float *Wz)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b086      	sub	sp, #24
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	60f8      	str	r0, [r7, #12]
 80014d8:	60b9      	str	r1, [r7, #8]
 80014da:	607a      	str	r2, [r7, #4]
    int32_t ret = 0;
 80014dc:	2300      	movs	r3, #0
 80014de:	617b      	str	r3, [r7, #20]
    ret = ISM330DHCX_ReadGyro(&MotionSensor, Wx, Wy, Wz);
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	68ba      	ldr	r2, [r7, #8]
 80014e4:	68f9      	ldr	r1, [r7, #12]
 80014e6:	4807      	ldr	r0, [pc, #28]	; (8001504 <BSP_ReadGyroXYZ+0x34>)
 80014e8:	f001 f857 	bl	800259a <ISM330DHCX_ReadGyro>
 80014ec:	6178      	str	r0, [r7, #20]
    if(ret != ISM330DHCX_DataReady)
 80014ee:	697b      	ldr	r3, [r7, #20]
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d001      	beq.n	80014f8 <BSP_ReadGyroXYZ+0x28>
    {
    	return ret;
 80014f4:	697b      	ldr	r3, [r7, #20]
 80014f6:	e000      	b.n	80014fa <BSP_ReadGyroXYZ+0x2a>
    }
    return ISM330DHCX_DataReady;
 80014f8:	2300      	movs	r3, #0

}
 80014fa:	4618      	mov	r0, r3
 80014fc:	3718      	adds	r7, #24
 80014fe:	46bd      	mov	sp, r7
 8001500:	bd80      	pop	{r7, pc}
 8001502:	bf00      	nop
 8001504:	20000500 	.word	0x20000500

08001508 <BSP_RamInit>:
#include "octospi.h"
#include <stdint.h>



void BSP_RamInit(void){
 8001508:	b580      	push	{r7, lr}
 800150a:	af00      	add	r7, sp, #0
    Ram_GPIO_Init();
 800150c:	f003 f8fa 	bl	8004704 <Ram_GPIO_Init>
    OSPI_RamInit();
 8001510:	f003 ff46 	bl	80053a0 <OSPI_RamInit>
    OSPI_DelayBlockConfig();
 8001514:	f004 f80c 	bl	8005530 <OSPI_DelayBlockConfig>
    OSPI_EnableMemMappedMode();
 8001518:	f003 ffae 	bl	8005478 <OSPI_EnableMemMappedMode>
}
 800151c:	bf00      	nop
 800151e:	bd80      	pop	{r7, pc}

08001520 <BSP_RamErase>:

void BSP_RamErase(void){
 8001520:	b480      	push	{r7}
 8001522:	b083      	sub	sp, #12
 8001524:	af00      	add	r7, sp, #0
	  uint32_t *pRam = (uint32_t*)OSPI1_RAM_BASE;
 8001526:	f04f 4310 	mov.w	r3, #2415919104	; 0x90000000
 800152a:	603b      	str	r3, [r7, #0]
	  for(uint32_t i = 0; i < (OSPI1_RAM_LENGTH / 4); i = i + 1){
 800152c:	2300      	movs	r3, #0
 800152e:	607b      	str	r3, [r7, #4]
 8001530:	e008      	b.n	8001544 <BSP_RamErase+0x24>
		  *(pRam + i) = 0;
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	009b      	lsls	r3, r3, #2
 8001536:	683a      	ldr	r2, [r7, #0]
 8001538:	4413      	add	r3, r2
 800153a:	2200      	movs	r2, #0
 800153c:	601a      	str	r2, [r3, #0]
	  for(uint32_t i = 0; i < (OSPI1_RAM_LENGTH / 4); i = i + 1){
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	3301      	adds	r3, #1
 8001542:	607b      	str	r3, [r7, #4]
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800154a:	d3f2      	bcc.n	8001532 <BSP_RamErase+0x12>
	  }
}
 800154c:	bf00      	nop
 800154e:	bf00      	nop
 8001550:	370c      	adds	r7, #12
 8001552:	46bd      	mov	sp, r7
 8001554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001558:	4770      	bx	lr
	...

0800155c <HTS221_Init>:
static int32_t HTS221_CalculateTemperature(HTS221_Handle_t *Handle, float *temperature);
static int32_t HTS221_CalculateHumidity(HTS221_Handle_t *Handle, float *humidity);


int32_t HTS221_Init(HTS221_Handle_t *Handle, HTS221_Init_Struct_t Settings, HTS221_IO_t *IO)
{
 800155c:	b5b0      	push	{r4, r5, r7, lr}
 800155e:	b084      	sub	sp, #16
 8001560:	af00      	add	r7, sp, #0
 8001562:	60f8      	str	r0, [r7, #12]
 8001564:	1d38      	adds	r0, r7, #4
 8001566:	e880 0006 	stmia.w	r0, {r1, r2}
 800156a:	603b      	str	r3, [r7, #0]
    if(Handle == NULL)
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	2b00      	cmp	r3, #0
 8001570:	d102      	bne.n	8001578 <HTS221_Init+0x1c>
    {
    	return HTS221_Error;
 8001572:	f04f 33ff 	mov.w	r3, #4294967295
 8001576:	e032      	b.n	80015de <HTS221_Init+0x82>
    }
    Handle->IO = *IO;
 8001578:	68fa      	ldr	r2, [r7, #12]
 800157a:	683b      	ldr	r3, [r7, #0]
 800157c:	4614      	mov	r4, r2
 800157e:	461d      	mov	r5, r3
 8001580:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001582:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001584:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001588:	e884 0003 	stmia.w	r4, {r0, r1}
    Handle->Context.Handle = Handle;
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	68fa      	ldr	r2, [r7, #12]
 8001590:	619a      	str	r2, [r3, #24]
    Handle->Context.Read = HTS221_ReadRegWrapper;
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	4a14      	ldr	r2, [pc, #80]	; (80015e8 <HTS221_Init+0x8c>)
 8001596:	61da      	str	r2, [r3, #28]
    Handle->Context.Write = HTS221_WriteRegWrapper;
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	4a14      	ldr	r2, [pc, #80]	; (80015ec <HTS221_Init+0x90>)
 800159c:	621a      	str	r2, [r3, #32]

    if(Settings.DataReadyConfig == HTS221_DataReadyEnable && Handle->IO.ReadPin == NULL)
 800159e:	7a7b      	ldrb	r3, [r7, #9]
 80015a0:	2b04      	cmp	r3, #4
 80015a2:	d106      	bne.n	80015b2 <HTS221_Init+0x56>
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	695b      	ldr	r3, [r3, #20]
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d102      	bne.n	80015b2 <HTS221_Init+0x56>
    {
    	return HTS221_Error; //Must provide a read pin function if using the data ready pin
 80015ac:	f04f 33ff 	mov.w	r3, #4294967295
 80015b0:	e015      	b.n	80015de <HTS221_Init+0x82>
    }
    Handle->DRDY_Config = Settings.DataReadyConfig;
 80015b2:	7a7a      	ldrb	r2, [r7, #9]
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    Handle->DRDY_Polarity = Settings.DataReadySignalPolarity;
 80015ba:	79fa      	ldrb	r2, [r7, #7]
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    //Initialized Bus
    if(Handle->IO.Init != NULL)
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d002      	beq.n	80015d0 <HTS221_Init+0x74>
    {
        Handle->IO.Init();
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	4798      	blx	r3
    }

    //Initialize Device
    return HTS221_RegisterInit(Handle, Settings);
 80015d0:	1d3b      	adds	r3, r7, #4
 80015d2:	e893 0006 	ldmia.w	r3, {r1, r2}
 80015d6:	68f8      	ldr	r0, [r7, #12]
 80015d8:	f000 f8d6 	bl	8001788 <HTS221_RegisterInit>
 80015dc:	4603      	mov	r3, r0
}
 80015de:	4618      	mov	r0, r3
 80015e0:	3710      	adds	r7, #16
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bdb0      	pop	{r4, r5, r7, pc}
 80015e6:	bf00      	nop
 80015e8:	0800172d 	.word	0x0800172d
 80015ec:	0800175b 	.word	0x0800175b

080015f0 <HTS221_ResetRegisters>:
	temp &= ~HTS221_HEATER_ENABLE;                                           //Modify Reg
	return HTS221_WriteReg(&Handle->Context,HTS221_REG_CTRL_REG2, &temp, 1); //Store Reg
}

int32_t HTS221_ResetRegisters(HTS221_Handle_t *Handle)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b084      	sub	sp, #16
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
	uint8_t temp = HTS221_RebootSignal;
 80015f8:	2380      	movs	r3, #128	; 0x80
 80015fa:	73fb      	strb	r3, [r7, #15]
    return HTS221_WriteReg(&Handle->Context, HTS221_REG_CTRL_REG2, &temp, 1);
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	f103 0018 	add.w	r0, r3, #24
 8001602:	f107 020f 	add.w	r2, r7, #15
 8001606:	2301      	movs	r3, #1
 8001608:	2121      	movs	r1, #33	; 0x21
 800160a:	f000 fb12 	bl	8001c32 <HTS221_WriteReg>
 800160e:	4603      	mov	r3, r0
}
 8001610:	4618      	mov	r0, r3
 8001612:	3710      	adds	r7, #16
 8001614:	46bd      	mov	sp, r7
 8001616:	bd80      	pop	{r7, pc}

08001618 <HTS221_ReadTemperature>:
	//turn on
	return HTS221_PowerUp(Handle);
}

int32_t HTS221_ReadTemperature(HTS221_Handle_t *Handle, float *temperature)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b086      	sub	sp, #24
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
 8001620:	6039      	str	r1, [r7, #0]
    int32_t ret = 0;
 8001622:	2300      	movs	r3, #0
 8001624:	617b      	str	r3, [r7, #20]
    uint8_t reg = 0;
 8001626:	2300      	movs	r3, #0
 8001628:	73fb      	strb	r3, [r7, #15]
	//Check if DRDY is used
	if(Handle->DRDY_Config == HTS221_DataReadyEnable)
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001630:	2b04      	cmp	r3, #4
 8001632:	d116      	bne.n	8001662 <HTS221_ReadTemperature+0x4a>
	{
		//If its used, read it.
		int32_t PinState = Handle->IO.ReadPin();
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	695b      	ldr	r3, [r3, #20]
 8001638:	4798      	blx	r3
 800163a:	6138      	str	r0, [r7, #16]
		//If Its High and Polarity is Active Low OR If its Low and Polarity is Active High, return data not ready
        if((Handle->DRDY_Polarity == HTS221_DataActiveHigh && PinState == 0) || (Handle->DRDY_Polarity == HTS221_DataActiveLow && PinState != 0))
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001642:	2b00      	cmp	r3, #0
 8001644:	d102      	bne.n	800164c <HTS221_ReadTemperature+0x34>
 8001646:	693b      	ldr	r3, [r7, #16]
 8001648:	2b00      	cmp	r3, #0
 800164a:	d007      	beq.n	800165c <HTS221_ReadTemperature+0x44>
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001652:	2b80      	cmp	r3, #128	; 0x80
 8001654:	d11c      	bne.n	8001690 <HTS221_ReadTemperature+0x78>
 8001656:	693b      	ldr	r3, [r7, #16]
 8001658:	2b00      	cmp	r3, #0
 800165a:	d019      	beq.n	8001690 <HTS221_ReadTemperature+0x78>
        {
            return HTS221_DataNotReady;
 800165c:	f64b 63ef 	movw	r3, #48879	; 0xbeef
 8001660:	e01b      	b.n	800169a <HTS221_ReadTemperature+0x82>
        }
	} else
	{
		//Otherwise, read the status reg
        ret = HTS221_ReadReg(&Handle->Context, HTS221_REG_STATUS_REG, &reg, 1);
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	f103 0018 	add.w	r0, r3, #24
 8001668:	f107 020f 	add.w	r2, r7, #15
 800166c:	2301      	movs	r3, #1
 800166e:	2127      	movs	r1, #39	; 0x27
 8001670:	f000 fab6 	bl	8001be0 <HTS221_ReadReg>
 8001674:	6178      	str	r0, [r7, #20]
        if(ret != HTS221_Ok)
 8001676:	697b      	ldr	r3, [r7, #20]
 8001678:	2b00      	cmp	r3, #0
 800167a:	d001      	beq.n	8001680 <HTS221_ReadTemperature+0x68>
        {
        	return ret;
 800167c:	697b      	ldr	r3, [r7, #20]
 800167e:	e00c      	b.n	800169a <HTS221_ReadTemperature+0x82>
        } else if ((reg & HTS221_TEMPDATA_Msk) == 0)
 8001680:	7bfb      	ldrb	r3, [r7, #15]
 8001682:	f003 0301 	and.w	r3, r3, #1
 8001686:	2b00      	cmp	r3, #0
 8001688:	d102      	bne.n	8001690 <HTS221_ReadTemperature+0x78>
        {
        	return HTS221_DataNotReady;
 800168a:	f64b 63ef 	movw	r3, #48879	; 0xbeef
 800168e:	e004      	b.n	800169a <HTS221_ReadTemperature+0x82>
        }
	}
    return HTS221_CalculateTemperature(Handle, temperature);
 8001690:	6839      	ldr	r1, [r7, #0]
 8001692:	6878      	ldr	r0, [r7, #4]
 8001694:	f000 f8b6 	bl	8001804 <HTS221_CalculateTemperature>
 8001698:	4603      	mov	r3, r0
}
 800169a:	4618      	mov	r0, r3
 800169c:	3718      	adds	r7, #24
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd80      	pop	{r7, pc}

080016a2 <HTS221_ReadHumidity>:
int32_t HTS221_ReadHumidity(HTS221_Handle_t *Handle, float *humidity)
{
 80016a2:	b580      	push	{r7, lr}
 80016a4:	b086      	sub	sp, #24
 80016a6:	af00      	add	r7, sp, #0
 80016a8:	6078      	str	r0, [r7, #4]
 80016aa:	6039      	str	r1, [r7, #0]
    int32_t ret = 0;
 80016ac:	2300      	movs	r3, #0
 80016ae:	617b      	str	r3, [r7, #20]
    uint8_t reg = 0;
 80016b0:	2300      	movs	r3, #0
 80016b2:	73fb      	strb	r3, [r7, #15]
	//Check if DRDY is used
	if(Handle->DRDY_Config == HTS221_DataReadyEnable)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80016ba:	2b04      	cmp	r3, #4
 80016bc:	d116      	bne.n	80016ec <HTS221_ReadHumidity+0x4a>
	{
		//If its used, read it.
		int32_t PinState = Handle->IO.ReadPin();
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	695b      	ldr	r3, [r3, #20]
 80016c2:	4798      	blx	r3
 80016c4:	6138      	str	r0, [r7, #16]
		//If Its High and Polarity is Active Low OR If its Low and Polarity is Active High, return data not ready
        if((Handle->DRDY_Polarity == HTS221_DataActiveHigh && PinState == 0) || (Handle->DRDY_Polarity == HTS221_DataActiveLow && PinState != 0))
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d102      	bne.n	80016d6 <HTS221_ReadHumidity+0x34>
 80016d0:	693b      	ldr	r3, [r7, #16]
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d007      	beq.n	80016e6 <HTS221_ReadHumidity+0x44>
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80016dc:	2b80      	cmp	r3, #128	; 0x80
 80016de:	d11c      	bne.n	800171a <HTS221_ReadHumidity+0x78>
 80016e0:	693b      	ldr	r3, [r7, #16]
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d019      	beq.n	800171a <HTS221_ReadHumidity+0x78>
        {
            return HTS221_DataNotReady;
 80016e6:	f64b 63ef 	movw	r3, #48879	; 0xbeef
 80016ea:	e01b      	b.n	8001724 <HTS221_ReadHumidity+0x82>
        }
	} else
	{
		//Otherwise, read the status reg
        ret = HTS221_ReadReg(&Handle->Context, HTS221_REG_STATUS_REG, &reg, 1);
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	f103 0018 	add.w	r0, r3, #24
 80016f2:	f107 020f 	add.w	r2, r7, #15
 80016f6:	2301      	movs	r3, #1
 80016f8:	2127      	movs	r1, #39	; 0x27
 80016fa:	f000 fa71 	bl	8001be0 <HTS221_ReadReg>
 80016fe:	6178      	str	r0, [r7, #20]
        if(ret != HTS221_Ok)
 8001700:	697b      	ldr	r3, [r7, #20]
 8001702:	2b00      	cmp	r3, #0
 8001704:	d001      	beq.n	800170a <HTS221_ReadHumidity+0x68>
        {
        	return ret;
 8001706:	697b      	ldr	r3, [r7, #20]
 8001708:	e00c      	b.n	8001724 <HTS221_ReadHumidity+0x82>
        } else if ((reg & HTS221_HUMDATA_Msk) == 0)
 800170a:	7bfb      	ldrb	r3, [r7, #15]
 800170c:	f003 0302 	and.w	r3, r3, #2
 8001710:	2b00      	cmp	r3, #0
 8001712:	d102      	bne.n	800171a <HTS221_ReadHumidity+0x78>
        {
        	return HTS221_DataNotReady;
 8001714:	f64b 63ef 	movw	r3, #48879	; 0xbeef
 8001718:	e004      	b.n	8001724 <HTS221_ReadHumidity+0x82>
        }
	}

	return HTS221_CalculateHumidity(Handle, humidity);
 800171a:	6839      	ldr	r1, [r7, #0]
 800171c:	6878      	ldr	r0, [r7, #4]
 800171e:	f000 f96b 	bl	80019f8 <HTS221_CalculateHumidity>
 8001722:	4603      	mov	r3, r0
}
 8001724:	4618      	mov	r0, r3
 8001726:	3718      	adds	r7, #24
 8001728:	46bd      	mov	sp, r7
 800172a:	bd80      	pop	{r7, pc}

0800172c <HTS221_ReadRegWrapper>:
	return HTS221_WriteReg(&Handle->Context,HTS221_REG_CTRL_REG1, &temp, 1); //Store Reg
}


static int32_t HTS221_ReadRegWrapper(void *Handle, uint8_t Reg, uint8_t *Buffer, uint8_t Length)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b086      	sub	sp, #24
 8001730:	af00      	add	r7, sp, #0
 8001732:	60f8      	str	r0, [r7, #12]
 8001734:	607a      	str	r2, [r7, #4]
 8001736:	461a      	mov	r2, r3
 8001738:	460b      	mov	r3, r1
 800173a:	72fb      	strb	r3, [r7, #11]
 800173c:	4613      	mov	r3, r2
 800173e:	72bb      	strb	r3, [r7, #10]
	HTS221_Handle_t *HTS221_Handle = Handle;
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	617b      	str	r3, [r7, #20]
	return HTS221_Handle->IO.Read(Reg, Buffer, Length);
 8001744:	697b      	ldr	r3, [r7, #20]
 8001746:	68db      	ldr	r3, [r3, #12]
 8001748:	7aba      	ldrb	r2, [r7, #10]
 800174a:	7af8      	ldrb	r0, [r7, #11]
 800174c:	6879      	ldr	r1, [r7, #4]
 800174e:	4798      	blx	r3
 8001750:	4603      	mov	r3, r0
}
 8001752:	4618      	mov	r0, r3
 8001754:	3718      	adds	r7, #24
 8001756:	46bd      	mov	sp, r7
 8001758:	bd80      	pop	{r7, pc}

0800175a <HTS221_WriteRegWrapper>:

static int32_t HTS221_WriteRegWrapper(void *Handle, uint8_t Reg, uint8_t *Buffer, uint8_t Length)
{
 800175a:	b580      	push	{r7, lr}
 800175c:	b086      	sub	sp, #24
 800175e:	af00      	add	r7, sp, #0
 8001760:	60f8      	str	r0, [r7, #12]
 8001762:	607a      	str	r2, [r7, #4]
 8001764:	461a      	mov	r2, r3
 8001766:	460b      	mov	r3, r1
 8001768:	72fb      	strb	r3, [r7, #11]
 800176a:	4613      	mov	r3, r2
 800176c:	72bb      	strb	r3, [r7, #10]
	HTS221_Handle_t *HTS221_Handle = Handle;
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	617b      	str	r3, [r7, #20]
	return HTS221_Handle->IO.Write(Reg, Buffer, Length);
 8001772:	697b      	ldr	r3, [r7, #20]
 8001774:	689b      	ldr	r3, [r3, #8]
 8001776:	7aba      	ldrb	r2, [r7, #10]
 8001778:	7af8      	ldrb	r0, [r7, #11]
 800177a:	6879      	ldr	r1, [r7, #4]
 800177c:	4798      	blx	r3
 800177e:	4603      	mov	r3, r0
}
 8001780:	4618      	mov	r0, r3
 8001782:	3718      	adds	r7, #24
 8001784:	46bd      	mov	sp, r7
 8001786:	bd80      	pop	{r7, pc}

08001788 <HTS221_RegisterInit>:

static int32_t HTS221_RegisterInit(HTS221_Handle_t *Handle, HTS221_Init_Struct_t Settings)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b086      	sub	sp, #24
 800178c:	af00      	add	r7, sp, #0
 800178e:	60f8      	str	r0, [r7, #12]
 8001790:	1d3b      	adds	r3, r7, #4
 8001792:	e883 0006 	stmia.w	r3, {r1, r2}
    int32_t ret =  0;
 8001796:	2300      	movs	r3, #0
 8001798:	617b      	str	r3, [r7, #20]
    uint8_t temp = 0;
 800179a:	2300      	movs	r3, #0
 800179c:	74fb      	strb	r3, [r7, #19]

    //reset registers to factory default
    ret = HTS221_ResetRegisters(Handle);
 800179e:	68f8      	ldr	r0, [r7, #12]
 80017a0:	f7ff ff26 	bl	80015f0 <HTS221_ResetRegisters>
 80017a4:	6178      	str	r0, [r7, #20]
    if(ret != HTS221_Ok)
 80017a6:	697b      	ldr	r3, [r7, #20]
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d001      	beq.n	80017b0 <HTS221_RegisterInit+0x28>
    {
    	return ret;
 80017ac:	697b      	ldr	r3, [r7, #20]
 80017ae:	e025      	b.n	80017fc <HTS221_RegisterInit+0x74>
    }

    temp = HTS221_BDU_ENABLE | Settings.OutputDataRate;
 80017b0:	79bb      	ldrb	r3, [r7, #6]
 80017b2:	f043 0304 	orr.w	r3, r3, #4
 80017b6:	b2db      	uxtb	r3, r3
 80017b8:	74fb      	strb	r3, [r7, #19]
    ret = HTS221_WriteReg(&Handle->Context, HTS221_REG_CTRL_REG1, &temp,1);
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	f103 0018 	add.w	r0, r3, #24
 80017c0:	f107 0213 	add.w	r2, r7, #19
 80017c4:	2301      	movs	r3, #1
 80017c6:	2120      	movs	r1, #32
 80017c8:	f000 fa33 	bl	8001c32 <HTS221_WriteReg>
 80017cc:	6178      	str	r0, [r7, #20]
    if(ret != HTS221_Ok)
 80017ce:	697b      	ldr	r3, [r7, #20]
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d001      	beq.n	80017d8 <HTS221_RegisterInit+0x50>
    {
    	return ret;
 80017d4:	697b      	ldr	r3, [r7, #20]
 80017d6:	e011      	b.n	80017fc <HTS221_RegisterInit+0x74>
    }

    temp = Settings.DataReadySignalPolarity | Settings.DataReadyOutputMode | Settings.DataReadyConfig;
 80017d8:	79fa      	ldrb	r2, [r7, #7]
 80017da:	7a3b      	ldrb	r3, [r7, #8]
 80017dc:	4313      	orrs	r3, r2
 80017de:	b2da      	uxtb	r2, r3
 80017e0:	7a7b      	ldrb	r3, [r7, #9]
 80017e2:	4313      	orrs	r3, r2
 80017e4:	b2db      	uxtb	r3, r3
 80017e6:	74fb      	strb	r3, [r7, #19]
    return HTS221_WriteReg(&Handle->Context, HTS221_REG_CTRL_REG3, &temp,1);
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	f103 0018 	add.w	r0, r3, #24
 80017ee:	f107 0213 	add.w	r2, r7, #19
 80017f2:	2301      	movs	r3, #1
 80017f4:	2122      	movs	r1, #34	; 0x22
 80017f6:	f000 fa1c 	bl	8001c32 <HTS221_WriteReg>
 80017fa:	4603      	mov	r3, r0
}
 80017fc:	4618      	mov	r0, r3
 80017fe:	3718      	adds	r7, #24
 8001800:	46bd      	mov	sp, r7
 8001802:	bd80      	pop	{r7, pc}

08001804 <HTS221_CalculateTemperature>:

static int32_t HTS221_CalculateTemperature(HTS221_Handle_t *Handle, float *temperature)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b08a      	sub	sp, #40	; 0x28
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
 800180c:	6039      	str	r1, [r7, #0]
	int32_t ret = 0;
 800180e:	2300      	movs	r3, #0
 8001810:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t Buffer[2] = {0};
 8001812:	2300      	movs	r3, #0
 8001814:	81bb      	strh	r3, [r7, #12]
	int16_t temp = 0;
 8001816:	2300      	movs	r3, #0
 8001818:	847b      	strh	r3, [r7, #34]	; 0x22
    float T0_OUT = 0, T1_OUT = 0;
 800181a:	f04f 0300 	mov.w	r3, #0
 800181e:	61fb      	str	r3, [r7, #28]
 8001820:	f04f 0300 	mov.w	r3, #0
 8001824:	61bb      	str	r3, [r7, #24]
    float T1_DEGC = 0,  T0_DEGC = 0;
 8001826:	f04f 0300 	mov.w	r3, #0
 800182a:	617b      	str	r3, [r7, #20]
 800182c:	f04f 0300 	mov.w	r3, #0
 8001830:	613b      	str	r3, [r7, #16]


    //Fetch T0
    ret = HTS221_ReadReg(&Handle->Context, HTS221_REG_T0_OUT, Buffer, 2);
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	f103 0018 	add.w	r0, r3, #24
 8001838:	f107 020c 	add.w	r2, r7, #12
 800183c:	2302      	movs	r3, #2
 800183e:	213c      	movs	r1, #60	; 0x3c
 8001840:	f000 f9ce 	bl	8001be0 <HTS221_ReadReg>
 8001844:	6278      	str	r0, [r7, #36]	; 0x24
    if(ret != HTS221_Ok)
 8001846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001848:	2b00      	cmp	r3, #0
 800184a:	d001      	beq.n	8001850 <HTS221_CalculateTemperature+0x4c>
    {
    	return ret;
 800184c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800184e:	e0ce      	b.n	80019ee <HTS221_CalculateTemperature+0x1ea>
    }
    temp = (Buffer[1] << 8) + Buffer[0];
 8001850:	7b7b      	ldrb	r3, [r7, #13]
 8001852:	b29b      	uxth	r3, r3
 8001854:	021b      	lsls	r3, r3, #8
 8001856:	b29a      	uxth	r2, r3
 8001858:	7b3b      	ldrb	r3, [r7, #12]
 800185a:	b29b      	uxth	r3, r3
 800185c:	4413      	add	r3, r2
 800185e:	b29b      	uxth	r3, r3
 8001860:	847b      	strh	r3, [r7, #34]	; 0x22
    T0_OUT = temp * 1.0f;
 8001862:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8001866:	ee07 3a90 	vmov	s15, r3
 800186a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800186e:	edc7 7a07 	vstr	s15, [r7, #28]

    //Fetch T1
    ret = HTS221_ReadReg(&Handle->Context, HTS221_REG_T1_OUT, Buffer, 2);
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	f103 0018 	add.w	r0, r3, #24
 8001878:	f107 020c 	add.w	r2, r7, #12
 800187c:	2302      	movs	r3, #2
 800187e:	213e      	movs	r1, #62	; 0x3e
 8001880:	f000 f9ae 	bl	8001be0 <HTS221_ReadReg>
 8001884:	6278      	str	r0, [r7, #36]	; 0x24
    if(ret != HTS221_Ok)
 8001886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001888:	2b00      	cmp	r3, #0
 800188a:	d001      	beq.n	8001890 <HTS221_CalculateTemperature+0x8c>
    {
    	return ret;
 800188c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800188e:	e0ae      	b.n	80019ee <HTS221_CalculateTemperature+0x1ea>
    }
    temp = (Buffer[1] << 8) + Buffer[0];
 8001890:	7b7b      	ldrb	r3, [r7, #13]
 8001892:	b29b      	uxth	r3, r3
 8001894:	021b      	lsls	r3, r3, #8
 8001896:	b29a      	uxth	r2, r3
 8001898:	7b3b      	ldrb	r3, [r7, #12]
 800189a:	b29b      	uxth	r3, r3
 800189c:	4413      	add	r3, r2
 800189e:	b29b      	uxth	r3, r3
 80018a0:	847b      	strh	r3, [r7, #34]	; 0x22
    T1_OUT = temp * 1.0f;
 80018a2:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80018a6:	ee07 3a90 	vmov	s15, r3
 80018aa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80018ae:	edc7 7a06 	vstr	s15, [r7, #24]

    //Fetch T0DegC
    ret = HTS221_ReadReg(&Handle->Context, HTS221_REG_T0_degC_x8, Buffer, 1); //Get LSB, store in Buffer16
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	f103 0018 	add.w	r0, r3, #24
 80018b8:	f107 020c 	add.w	r2, r7, #12
 80018bc:	2301      	movs	r3, #1
 80018be:	2132      	movs	r1, #50	; 0x32
 80018c0:	f000 f98e 	bl	8001be0 <HTS221_ReadReg>
 80018c4:	6278      	str	r0, [r7, #36]	; 0x24
    if(ret != HTS221_Ok)
 80018c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d001      	beq.n	80018d0 <HTS221_CalculateTemperature+0xcc>
    {
    	return ret;
 80018cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ce:	e08e      	b.n	80019ee <HTS221_CalculateTemperature+0x1ea>
    }

    ret = HTS221_ReadReg(&Handle->Context, HTS221_REG_T1_T0_msb, &Buffer[1], 1);  //Get MSB, store in Buffer8
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	f103 0018 	add.w	r0, r3, #24
 80018d6:	f107 030c 	add.w	r3, r7, #12
 80018da:	1c5a      	adds	r2, r3, #1
 80018dc:	2301      	movs	r3, #1
 80018de:	2135      	movs	r1, #53	; 0x35
 80018e0:	f000 f97e 	bl	8001be0 <HTS221_ReadReg>
 80018e4:	6278      	str	r0, [r7, #36]	; 0x24
    if(ret != HTS221_Ok)
 80018e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d001      	beq.n	80018f0 <HTS221_CalculateTemperature+0xec>
    {
    	return ret;
 80018ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ee:	e07e      	b.n	80019ee <HTS221_CalculateTemperature+0x1ea>
    }
    temp = ((Buffer[1] & 0x03) << 8) + Buffer[0];
 80018f0:	7b7b      	ldrb	r3, [r7, #13]
 80018f2:	021b      	lsls	r3, r3, #8
 80018f4:	b29b      	uxth	r3, r3
 80018f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80018fa:	b29a      	uxth	r2, r3
 80018fc:	7b3b      	ldrb	r3, [r7, #12]
 80018fe:	b29b      	uxth	r3, r3
 8001900:	4413      	add	r3, r2
 8001902:	b29b      	uxth	r3, r3
 8001904:	847b      	strh	r3, [r7, #34]	; 0x22
    T0_DEGC = temp / 8.0f; //Calculate
 8001906:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800190a:	ee07 3a90 	vmov	s15, r3
 800190e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001912:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 8001916:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800191a:	edc7 7a04 	vstr	s15, [r7, #16]

    //Fetch T1DegC
    ret = HTS221_ReadReg(&Handle->Context, HTS221_REG_T1_degC_x8, Buffer, 1); //Get LSB, store in Buffer16
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	f103 0018 	add.w	r0, r3, #24
 8001924:	f107 020c 	add.w	r2, r7, #12
 8001928:	2301      	movs	r3, #1
 800192a:	2133      	movs	r1, #51	; 0x33
 800192c:	f000 f958 	bl	8001be0 <HTS221_ReadReg>
 8001930:	6278      	str	r0, [r7, #36]	; 0x24
    if(ret != HTS221_Ok)
 8001932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001934:	2b00      	cmp	r3, #0
 8001936:	d001      	beq.n	800193c <HTS221_CalculateTemperature+0x138>
    {
    	return ret;
 8001938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800193a:	e058      	b.n	80019ee <HTS221_CalculateTemperature+0x1ea>
    }
    temp = ((Buffer[1] & 0x0C) << 6) + Buffer[0];
 800193c:	7b7b      	ldrb	r3, [r7, #13]
 800193e:	019b      	lsls	r3, r3, #6
 8001940:	b29b      	uxth	r3, r3
 8001942:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001946:	b29a      	uxth	r2, r3
 8001948:	7b3b      	ldrb	r3, [r7, #12]
 800194a:	b29b      	uxth	r3, r3
 800194c:	4413      	add	r3, r2
 800194e:	b29b      	uxth	r3, r3
 8001950:	847b      	strh	r3, [r7, #34]	; 0x22
    T1_DEGC = temp / 8.0f; //Calculate
 8001952:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8001956:	ee07 3a90 	vmov	s15, r3
 800195a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800195e:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 8001962:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001966:	edc7 7a05 	vstr	s15, [r7, #20]

    ret = HTS221_ReadReg(&Handle->Context, HTS221_REG_TEMP_OUT_L, Buffer, 2);
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	f103 0018 	add.w	r0, r3, #24
 8001970:	f107 020c 	add.w	r2, r7, #12
 8001974:	2302      	movs	r3, #2
 8001976:	212a      	movs	r1, #42	; 0x2a
 8001978:	f000 f932 	bl	8001be0 <HTS221_ReadReg>
 800197c:	6278      	str	r0, [r7, #36]	; 0x24
    if(ret != HTS221_Ok)
 800197e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001980:	2b00      	cmp	r3, #0
 8001982:	d001      	beq.n	8001988 <HTS221_CalculateTemperature+0x184>
    {
    	return ret;
 8001984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001986:	e032      	b.n	80019ee <HTS221_CalculateTemperature+0x1ea>
    }
    temp = (Buffer[1] << 8) + Buffer[0];
 8001988:	7b7b      	ldrb	r3, [r7, #13]
 800198a:	b29b      	uxth	r3, r3
 800198c:	021b      	lsls	r3, r3, #8
 800198e:	b29a      	uxth	r2, r3
 8001990:	7b3b      	ldrb	r3, [r7, #12]
 8001992:	b29b      	uxth	r3, r3
 8001994:	4413      	add	r3, r2
 8001996:	b29b      	uxth	r3, r3
 8001998:	847b      	strh	r3, [r7, #34]	; 0x22
    *temperature = (((T1_DEGC - T0_DEGC) * temp) + ((T1_OUT * T0_DEGC) - (T0_OUT * T1_DEGC))) / (T1_OUT - T0_OUT); //Linear Interpolation
 800199a:	ed97 7a05 	vldr	s14, [r7, #20]
 800199e:	edd7 7a04 	vldr	s15, [r7, #16]
 80019a2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80019a6:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80019aa:	ee07 3a90 	vmov	s15, r3
 80019ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80019b2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80019b6:	edd7 6a06 	vldr	s13, [r7, #24]
 80019ba:	edd7 7a04 	vldr	s15, [r7, #16]
 80019be:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80019c2:	ed97 6a07 	vldr	s12, [r7, #28]
 80019c6:	edd7 7a05 	vldr	s15, [r7, #20]
 80019ca:	ee66 7a27 	vmul.f32	s15, s12, s15
 80019ce:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80019d2:	ee77 6a27 	vadd.f32	s13, s14, s15
 80019d6:	ed97 7a06 	vldr	s14, [r7, #24]
 80019da:	edd7 7a07 	vldr	s15, [r7, #28]
 80019de:	ee37 7a67 	vsub.f32	s14, s14, s15
 80019e2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80019e6:	683b      	ldr	r3, [r7, #0]
 80019e8:	edc3 7a00 	vstr	s15, [r3]
    return HTS221_Ok;
 80019ec:	2300      	movs	r3, #0
}
 80019ee:	4618      	mov	r0, r3
 80019f0:	3728      	adds	r7, #40	; 0x28
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}
	...

080019f8 <HTS221_CalculateHumidity>:

static int32_t HTS221_CalculateHumidity(HTS221_Handle_t *Handle, float *humidity)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b08a      	sub	sp, #40	; 0x28
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
 8001a00:	6039      	str	r1, [r7, #0]
	int32_t ret = 0;
 8001a02:	2300      	movs	r3, #0
 8001a04:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t Buffer[2] = {0};
 8001a06:	2300      	movs	r3, #0
 8001a08:	813b      	strh	r3, [r7, #8]
	int16_t temp = 0;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	847b      	strh	r3, [r7, #34]	; 0x22
    float H0_OUT = 0, H1_OUT = 0;
 8001a0e:	f04f 0300 	mov.w	r3, #0
 8001a12:	61fb      	str	r3, [r7, #28]
 8001a14:	f04f 0300 	mov.w	r3, #0
 8001a18:	61bb      	str	r3, [r7, #24]
    float H1_REL = 0,  H0_REL = 0;
 8001a1a:	f04f 0300 	mov.w	r3, #0
 8001a1e:	617b      	str	r3, [r7, #20]
 8001a20:	f04f 0300 	mov.w	r3, #0
 8001a24:	613b      	str	r3, [r7, #16]
    float result = 0;
 8001a26:	f04f 0300 	mov.w	r3, #0
 8001a2a:	60fb      	str	r3, [r7, #12]

    //Fetch H0
    ret = HTS221_ReadReg(&Handle->Context, HTS221_REG_H0_T0_OUT, Buffer, 2);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	f103 0018 	add.w	r0, r3, #24
 8001a32:	f107 0208 	add.w	r2, r7, #8
 8001a36:	2302      	movs	r3, #2
 8001a38:	2136      	movs	r1, #54	; 0x36
 8001a3a:	f000 f8d1 	bl	8001be0 <HTS221_ReadReg>
 8001a3e:	6278      	str	r0, [r7, #36]	; 0x24
    if(ret != HTS221_Ok)
 8001a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d001      	beq.n	8001a4a <HTS221_CalculateHumidity+0x52>
    {
    	return ret;
 8001a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a48:	e0c1      	b.n	8001bce <HTS221_CalculateHumidity+0x1d6>
    }
    temp = (Buffer[1] << 8) + Buffer[0];
 8001a4a:	7a7b      	ldrb	r3, [r7, #9]
 8001a4c:	b29b      	uxth	r3, r3
 8001a4e:	021b      	lsls	r3, r3, #8
 8001a50:	b29a      	uxth	r2, r3
 8001a52:	7a3b      	ldrb	r3, [r7, #8]
 8001a54:	b29b      	uxth	r3, r3
 8001a56:	4413      	add	r3, r2
 8001a58:	b29b      	uxth	r3, r3
 8001a5a:	847b      	strh	r3, [r7, #34]	; 0x22
    H0_OUT = temp * 1.0f;
 8001a5c:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8001a60:	ee07 3a90 	vmov	s15, r3
 8001a64:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a68:	edc7 7a07 	vstr	s15, [r7, #28]

    //Fetch H1
    ret = HTS221_ReadReg(&Handle->Context, HTS221_REG_H1_T0_OUT, Buffer, 2);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	f103 0018 	add.w	r0, r3, #24
 8001a72:	f107 0208 	add.w	r2, r7, #8
 8001a76:	2302      	movs	r3, #2
 8001a78:	213a      	movs	r1, #58	; 0x3a
 8001a7a:	f000 f8b1 	bl	8001be0 <HTS221_ReadReg>
 8001a7e:	6278      	str	r0, [r7, #36]	; 0x24
    if(ret != HTS221_Ok)
 8001a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d001      	beq.n	8001a8a <HTS221_CalculateHumidity+0x92>
    {
    	return ret;
 8001a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a88:	e0a1      	b.n	8001bce <HTS221_CalculateHumidity+0x1d6>
    }
    temp = (Buffer[1] << 8) + Buffer[0];
 8001a8a:	7a7b      	ldrb	r3, [r7, #9]
 8001a8c:	b29b      	uxth	r3, r3
 8001a8e:	021b      	lsls	r3, r3, #8
 8001a90:	b29a      	uxth	r2, r3
 8001a92:	7a3b      	ldrb	r3, [r7, #8]
 8001a94:	b29b      	uxth	r3, r3
 8001a96:	4413      	add	r3, r2
 8001a98:	b29b      	uxth	r3, r3
 8001a9a:	847b      	strh	r3, [r7, #34]	; 0x22
    H1_OUT = temp * 1.0f;
 8001a9c:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8001aa0:	ee07 3a90 	vmov	s15, r3
 8001aa4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001aa8:	edc7 7a06 	vstr	s15, [r7, #24]

    //Fetch H0_Rh
    ret = HTS221_ReadReg(&Handle->Context, HTS221_REG_H0_rH_x2, Buffer, 1);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	f103 0018 	add.w	r0, r3, #24
 8001ab2:	f107 0208 	add.w	r2, r7, #8
 8001ab6:	2301      	movs	r3, #1
 8001ab8:	2130      	movs	r1, #48	; 0x30
 8001aba:	f000 f891 	bl	8001be0 <HTS221_ReadReg>
 8001abe:	6278      	str	r0, [r7, #36]	; 0x24
    if(ret != HTS221_Ok)
 8001ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d001      	beq.n	8001aca <HTS221_CalculateHumidity+0xd2>
    {
    	return ret;
 8001ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ac8:	e081      	b.n	8001bce <HTS221_CalculateHumidity+0x1d6>
    }
    H0_REL = Buffer[0] / 2.0f;
 8001aca:	7a3b      	ldrb	r3, [r7, #8]
 8001acc:	ee07 3a90 	vmov	s15, r3
 8001ad0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001ad4:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001ad8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001adc:	edc7 7a04 	vstr	s15, [r7, #16]

    //Fetch H0_Rh
    ret = HTS221_ReadReg(&Handle->Context, HTS221_REG_H1_rH_x2, Buffer, 1);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	f103 0018 	add.w	r0, r3, #24
 8001ae6:	f107 0208 	add.w	r2, r7, #8
 8001aea:	2301      	movs	r3, #1
 8001aec:	2131      	movs	r1, #49	; 0x31
 8001aee:	f000 f877 	bl	8001be0 <HTS221_ReadReg>
 8001af2:	6278      	str	r0, [r7, #36]	; 0x24
    if(ret != HTS221_Ok)
 8001af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d001      	beq.n	8001afe <HTS221_CalculateHumidity+0x106>
    {
    	return ret;
 8001afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001afc:	e067      	b.n	8001bce <HTS221_CalculateHumidity+0x1d6>
    }
    H1_REL = Buffer[0] / 2.0f;
 8001afe:	7a3b      	ldrb	r3, [r7, #8]
 8001b00:	ee07 3a90 	vmov	s15, r3
 8001b04:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001b08:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001b0c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001b10:	edc7 7a05 	vstr	s15, [r7, #20]

    //Fetch Measurement
    ret = HTS221_ReadReg(&Handle->Context, HTS221_REG_HUMIDITY_OUT_L, Buffer, 2);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	f103 0018 	add.w	r0, r3, #24
 8001b1a:	f107 0208 	add.w	r2, r7, #8
 8001b1e:	2302      	movs	r3, #2
 8001b20:	2128      	movs	r1, #40	; 0x28
 8001b22:	f000 f85d 	bl	8001be0 <HTS221_ReadReg>
 8001b26:	6278      	str	r0, [r7, #36]	; 0x24
    if(ret != HTS221_Ok)
 8001b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d001      	beq.n	8001b32 <HTS221_CalculateHumidity+0x13a>
    {
    	return ret;
 8001b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b30:	e04d      	b.n	8001bce <HTS221_CalculateHumidity+0x1d6>
    }
    temp = (Buffer[1] << 8) + Buffer[0];
 8001b32:	7a7b      	ldrb	r3, [r7, #9]
 8001b34:	b29b      	uxth	r3, r3
 8001b36:	021b      	lsls	r3, r3, #8
 8001b38:	b29a      	uxth	r2, r3
 8001b3a:	7a3b      	ldrb	r3, [r7, #8]
 8001b3c:	b29b      	uxth	r3, r3
 8001b3e:	4413      	add	r3, r2
 8001b40:	b29b      	uxth	r3, r3
 8001b42:	847b      	strh	r3, [r7, #34]	; 0x22
    result = (((H1_REL - H0_REL) * temp) + ((H1_OUT * H0_REL) - (H0_OUT * H1_REL))) / (H1_OUT - H0_OUT); //Linear Interpolation
 8001b44:	ed97 7a05 	vldr	s14, [r7, #20]
 8001b48:	edd7 7a04 	vldr	s15, [r7, #16]
 8001b4c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001b50:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8001b54:	ee07 3a90 	vmov	s15, r3
 8001b58:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b5c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b60:	edd7 6a06 	vldr	s13, [r7, #24]
 8001b64:	edd7 7a04 	vldr	s15, [r7, #16]
 8001b68:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001b6c:	ed97 6a07 	vldr	s12, [r7, #28]
 8001b70:	edd7 7a05 	vldr	s15, [r7, #20]
 8001b74:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001b78:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001b7c:	ee77 6a27 	vadd.f32	s13, s14, s15
 8001b80:	ed97 7a06 	vldr	s14, [r7, #24]
 8001b84:	edd7 7a07 	vldr	s15, [r7, #28]
 8001b88:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001b8c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001b90:	edc7 7a03 	vstr	s15, [r7, #12]
    if(result > 100.0)
 8001b94:	edd7 7a03 	vldr	s15, [r7, #12]
 8001b98:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8001bd8 <HTS221_CalculateHumidity+0x1e0>
 8001b9c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001ba0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ba4:	dd03      	ble.n	8001bae <HTS221_CalculateHumidity+0x1b6>
    {
    	*humidity = 100.0;
 8001ba6:	683b      	ldr	r3, [r7, #0]
 8001ba8:	4a0c      	ldr	r2, [pc, #48]	; (8001bdc <HTS221_CalculateHumidity+0x1e4>)
 8001baa:	601a      	str	r2, [r3, #0]
 8001bac:	e00e      	b.n	8001bcc <HTS221_CalculateHumidity+0x1d4>
    } else if (result < 0.0)
 8001bae:	edd7 7a03 	vldr	s15, [r7, #12]
 8001bb2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001bb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bba:	d504      	bpl.n	8001bc6 <HTS221_CalculateHumidity+0x1ce>
    {
    	*humidity = 0.0;
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	f04f 0200 	mov.w	r2, #0
 8001bc2:	601a      	str	r2, [r3, #0]
 8001bc4:	e002      	b.n	8001bcc <HTS221_CalculateHumidity+0x1d4>
    } else
    {
    	*humidity = result;
 8001bc6:	683b      	ldr	r3, [r7, #0]
 8001bc8:	68fa      	ldr	r2, [r7, #12]
 8001bca:	601a      	str	r2, [r3, #0]
    }

    return HTS221_Ok;
 8001bcc:	2300      	movs	r3, #0
}
 8001bce:	4618      	mov	r0, r3
 8001bd0:	3728      	adds	r7, #40	; 0x28
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bd80      	pop	{r7, pc}
 8001bd6:	bf00      	nop
 8001bd8:	42c80000 	.word	0x42c80000
 8001bdc:	42c80000 	.word	0x42c80000

08001be0 <HTS221_ReadReg>:
#include "stddef.h"

static int32_t HTS221_ValidateParams(uint8_t Reg, uint8_t *Buffer, uint8_t Length);

int32_t HTS221_ReadReg(HTS221_Context_t *Context, uint8_t Reg, uint8_t *Buffer, uint8_t Length)
{
 8001be0:	b590      	push	{r4, r7, lr}
 8001be2:	b087      	sub	sp, #28
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	60f8      	str	r0, [r7, #12]
 8001be8:	607a      	str	r2, [r7, #4]
 8001bea:	461a      	mov	r2, r3
 8001bec:	460b      	mov	r3, r1
 8001bee:	72fb      	strb	r3, [r7, #11]
 8001bf0:	4613      	mov	r3, r2
 8001bf2:	72bb      	strb	r3, [r7, #10]
	int32_t ret = HTS221_ValidateParams(Reg,Buffer,Length);
 8001bf4:	7aba      	ldrb	r2, [r7, #10]
 8001bf6:	7afb      	ldrb	r3, [r7, #11]
 8001bf8:	6879      	ldr	r1, [r7, #4]
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	f000 f842 	bl	8001c84 <HTS221_ValidateParams>
 8001c00:	6178      	str	r0, [r7, #20]
	if(ret != HTS221_REG_NO_ERR)
 8001c02:	697b      	ldr	r3, [r7, #20]
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d001      	beq.n	8001c0c <HTS221_ReadReg+0x2c>
	{
        return ret;
 8001c08:	697b      	ldr	r3, [r7, #20]
 8001c0a:	e00e      	b.n	8001c2a <HTS221_ReadReg+0x4a>
	}

    if(Context->Read != NULL)
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	685b      	ldr	r3, [r3, #4]
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d009      	beq.n	8001c28 <HTS221_ReadReg+0x48>
    {
        return Context->Read(Context->Handle, Reg, Buffer, Length);
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	685c      	ldr	r4, [r3, #4]
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	6818      	ldr	r0, [r3, #0]
 8001c1c:	7abb      	ldrb	r3, [r7, #10]
 8001c1e:	7af9      	ldrb	r1, [r7, #11]
 8001c20:	687a      	ldr	r2, [r7, #4]
 8001c22:	47a0      	blx	r4
 8001c24:	4603      	mov	r3, r0
 8001c26:	e000      	b.n	8001c2a <HTS221_ReadReg+0x4a>
    }

    return HTS221_REG_CONTEXT_ERR;
 8001c28:	2308      	movs	r3, #8
}
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	371c      	adds	r7, #28
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bd90      	pop	{r4, r7, pc}

08001c32 <HTS221_WriteReg>:

int32_t HTS221_WriteReg(HTS221_Context_t *Context,uint8_t Reg, uint8_t *Buffer, uint8_t Length)
{
 8001c32:	b590      	push	{r4, r7, lr}
 8001c34:	b087      	sub	sp, #28
 8001c36:	af00      	add	r7, sp, #0
 8001c38:	60f8      	str	r0, [r7, #12]
 8001c3a:	607a      	str	r2, [r7, #4]
 8001c3c:	461a      	mov	r2, r3
 8001c3e:	460b      	mov	r3, r1
 8001c40:	72fb      	strb	r3, [r7, #11]
 8001c42:	4613      	mov	r3, r2
 8001c44:	72bb      	strb	r3, [r7, #10]
	int32_t ret = HTS221_ValidateParams(Reg,Buffer,Length);
 8001c46:	7aba      	ldrb	r2, [r7, #10]
 8001c48:	7afb      	ldrb	r3, [r7, #11]
 8001c4a:	6879      	ldr	r1, [r7, #4]
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	f000 f819 	bl	8001c84 <HTS221_ValidateParams>
 8001c52:	6178      	str	r0, [r7, #20]
	if(ret != HTS221_REG_NO_ERR)
 8001c54:	697b      	ldr	r3, [r7, #20]
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d001      	beq.n	8001c5e <HTS221_WriteReg+0x2c>
	{
        return ret;
 8001c5a:	697b      	ldr	r3, [r7, #20]
 8001c5c:	e00e      	b.n	8001c7c <HTS221_WriteReg+0x4a>
	}

	if(Context->Write != NULL)
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	689b      	ldr	r3, [r3, #8]
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d009      	beq.n	8001c7a <HTS221_WriteReg+0x48>
	{
	    return Context->Write(Context->Handle, Reg, Buffer, Length);
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	689c      	ldr	r4, [r3, #8]
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	6818      	ldr	r0, [r3, #0]
 8001c6e:	7abb      	ldrb	r3, [r7, #10]
 8001c70:	7af9      	ldrb	r1, [r7, #11]
 8001c72:	687a      	ldr	r2, [r7, #4]
 8001c74:	47a0      	blx	r4
 8001c76:	4603      	mov	r3, r0
 8001c78:	e000      	b.n	8001c7c <HTS221_WriteReg+0x4a>
	}

	return HTS221_REG_CONTEXT_ERR;
 8001c7a:	2308      	movs	r3, #8
}
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	371c      	adds	r7, #28
 8001c80:	46bd      	mov	sp, r7
 8001c82:	bd90      	pop	{r4, r7, pc}

08001c84 <HTS221_ValidateParams>:

static int32_t HTS221_ValidateParams(uint8_t Reg, uint8_t *Buffer, uint8_t Length)
{
 8001c84:	b480      	push	{r7}
 8001c86:	b085      	sub	sp, #20
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	6039      	str	r1, [r7, #0]
 8001c8e:	71fb      	strb	r3, [r7, #7]
 8001c90:	4613      	mov	r3, r2
 8001c92:	71bb      	strb	r3, [r7, #6]
	uint32_t ret = 0;
 8001c94:	2300      	movs	r3, #0
 8001c96:	60fb      	str	r3, [r7, #12]

	if(Reg < HTS221_REG_WHO_AM_I || Reg > 0x3F)
 8001c98:	79fb      	ldrb	r3, [r7, #7]
 8001c9a:	2b0e      	cmp	r3, #14
 8001c9c:	d902      	bls.n	8001ca4 <HTS221_ValidateParams+0x20>
 8001c9e:	79fb      	ldrb	r3, [r7, #7]
 8001ca0:	2b3f      	cmp	r3, #63	; 0x3f
 8001ca2:	d903      	bls.n	8001cac <HTS221_ValidateParams+0x28>
	{
		 ret |= HTS221_REG_PARAM_ERR;
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	f043 0301 	orr.w	r3, r3, #1
 8001caa:	60fb      	str	r3, [r7, #12]
	}

	if(Buffer == NULL)
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d103      	bne.n	8001cba <HTS221_ValidateParams+0x36>
	{
		ret |= HTS221_BUFFER_PARAM_ERR;
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	f043 0302 	orr.w	r3, r3, #2
 8001cb8:	60fb      	str	r3, [r7, #12]
	}

	if(Length == 0 || Length > (0x3F - HTS221_REG_WHO_AM_I))
 8001cba:	79bb      	ldrb	r3, [r7, #6]
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d002      	beq.n	8001cc6 <HTS221_ValidateParams+0x42>
 8001cc0:	79bb      	ldrb	r3, [r7, #6]
 8001cc2:	2b30      	cmp	r3, #48	; 0x30
 8001cc4:	d903      	bls.n	8001cce <HTS221_ValidateParams+0x4a>
	{  //0x3F - 0x0F = 0x30 readable registers
        ret |= HTS221_LENGTH_PARAM_ERR;
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	f043 0304 	orr.w	r3, r3, #4
 8001ccc:	60fb      	str	r3, [r7, #12]
	}

	return ret;
 8001cce:	68fb      	ldr	r3, [r7, #12]
}
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	3714      	adds	r7, #20
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cda:	4770      	bx	lr

08001cdc <IIS2MDC_Init>:
static void ConvertMagData(uint8_t *buffer, float *magnetism);
static void DeConvertMagData(float magnetism, uint8_t *buffer);


int32_t IIS2MDC_Init(IIS2MDC_Handle_t *Handle, IIS2MDC_InitStruct_t Settings, IIS2MDC_IO_t *IO)
{
 8001cdc:	b084      	sub	sp, #16
 8001cde:	b5b0      	push	{r4, r5, r7, lr}
 8001ce0:	b086      	sub	sp, #24
 8001ce2:	af02      	add	r7, sp, #8
 8001ce4:	6078      	str	r0, [r7, #4]
 8001ce6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8001cea:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    if(Handle->Status != IIS2MDC_Initialized)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001cf4:	2b01      	cmp	r3, #1
 8001cf6:	f000 809d 	beq.w	8001e34 <IIS2MDC_Init+0x158>
    {
        if(Handle == NULL)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d102      	bne.n	8001d06 <IIS2MDC_Init+0x2a>
        {
            return IIS2MDC_HandleError;
 8001d00:	f04f 33ff 	mov.w	r3, #4294967295
 8001d04:	e097      	b.n	8001e36 <IIS2MDC_Init+0x15a>
        }

        if(IO->Read == NULL || IO->Write == NULL || IO->GetTick == NULL)
 8001d06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d08:	68db      	ldr	r3, [r3, #12]
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d007      	beq.n	8001d1e <IIS2MDC_Init+0x42>
 8001d0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d10:	689b      	ldr	r3, [r3, #8]
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d003      	beq.n	8001d1e <IIS2MDC_Init+0x42>
 8001d16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d18:	695b      	ldr	r3, [r3, #20]
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d102      	bne.n	8001d24 <IIS2MDC_Init+0x48>
        {
        	return IIS2MDC_IOError;
 8001d1e:	f06f 0301 	mvn.w	r3, #1
 8001d22:	e088      	b.n	8001e36 <IIS2MDC_Init+0x15a>
        }

        if(Settings.IntThreshold > 49150.5  || Settings.OffsetX > 49150.5 || Settings.OffsetY > 49150.5  || Settings.OffsetZ > 49150.5)
 8001d24:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001d28:	ed9f 7a46 	vldr	s14, [pc, #280]	; 8001e44 <IIS2MDC_Init+0x168>
 8001d2c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d34:	dc1a      	bgt.n	8001d6c <IIS2MDC_Init+0x90>
 8001d36:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001d3a:	ed9f 7a42 	vldr	s14, [pc, #264]	; 8001e44 <IIS2MDC_Init+0x168>
 8001d3e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d46:	dc11      	bgt.n	8001d6c <IIS2MDC_Init+0x90>
 8001d48:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001d4c:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 8001e44 <IIS2MDC_Init+0x168>
 8001d50:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d58:	dc08      	bgt.n	8001d6c <IIS2MDC_Init+0x90>
 8001d5a:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001d5e:	ed9f 7a39 	vldr	s14, [pc, #228]	; 8001e44 <IIS2MDC_Init+0x168>
 8001d62:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d6a:	dd02      	ble.n	8001d72 <IIS2MDC_Init+0x96>
        {
        	return IIS2MDC_FloatError;
 8001d6c:	f06f 0303 	mvn.w	r3, #3
 8001d70:	e061      	b.n	8001e36 <IIS2MDC_Init+0x15a>
        }

        if(Settings.IntThreshold < -49150.5 || Settings.OffsetX < -49150.5 || Settings.OffsetY < -49150.5  || Settings.OffsetZ < -49150.5)
 8001d72:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001d76:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8001e48 <IIS2MDC_Init+0x16c>
 8001d7a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d82:	d41a      	bmi.n	8001dba <IIS2MDC_Init+0xde>
 8001d84:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001d88:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8001e48 <IIS2MDC_Init+0x16c>
 8001d8c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d94:	d411      	bmi.n	8001dba <IIS2MDC_Init+0xde>
 8001d96:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001d9a:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8001e48 <IIS2MDC_Init+0x16c>
 8001d9e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001da2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001da6:	d408      	bmi.n	8001dba <IIS2MDC_Init+0xde>
 8001da8:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001dac:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8001e48 <IIS2MDC_Init+0x16c>
 8001db0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001db4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001db8:	d502      	bpl.n	8001dc0 <IIS2MDC_Init+0xe4>
        {
        	return IIS2MDC_FloatError;
 8001dba:	f06f 0303 	mvn.w	r3, #3
 8001dbe:	e03a      	b.n	8001e36 <IIS2MDC_Init+0x15a>
        }

        Handle->IO = *IO;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001dc4:	f103 040c 	add.w	r4, r3, #12
 8001dc8:	4615      	mov	r5, r2
 8001dca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001dcc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001dce:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001dd2:	e884 0003 	stmia.w	r4, {r0, r1}
        Handle->Context.Handle = Handle;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	687a      	ldr	r2, [r7, #4]
 8001dda:	601a      	str	r2, [r3, #0]
        Handle->Context.Read = IIS2MDC_ReadRegWrapper;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	4a1b      	ldr	r2, [pc, #108]	; (8001e4c <IIS2MDC_Init+0x170>)
 8001de0:	605a      	str	r2, [r3, #4]
        Handle->Context.Write = IIS2MDC_WriteRegWrapper;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	4a1a      	ldr	r2, [pc, #104]	; (8001e50 <IIS2MDC_Init+0x174>)
 8001de6:	609a      	str	r2, [r3, #8]
        if((Settings.ConfigRegA & IIS2MDC_ODR_Msk) == IISM2MDC_ODR_OneShot)
 8001de8:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001dec:	f003 030f 	and.w	r3, r3, #15
 8001df0:	2b01      	cmp	r3, #1
 8001df2:	d104      	bne.n	8001dfe <IIS2MDC_Init+0x122>
        {
        	Handle->DataMode = IIS2MDC_OneShotMode;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	2200      	movs	r2, #0
 8001df8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
 8001dfc:	e003      	b.n	8001e06 <IIS2MDC_Init+0x12a>
        } else
        {
        	Handle->DataMode = IIS2MDC_Continuous;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	2201      	movs	r2, #1
 8001e02:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
        }

        int32_t ret = IIS2MDC_RegisterInit(Handle, Settings);
 8001e06:	466a      	mov	r2, sp
 8001e08:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001e0c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001e10:	e882 0003 	stmia.w	r2, {r0, r1}
 8001e14:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e18:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001e1a:	6878      	ldr	r0, [r7, #4]
 8001e1c:	f000 f8d8 	bl	8001fd0 <IIS2MDC_RegisterInit>
 8001e20:	60f8      	str	r0, [r7, #12]
        if(ret != IIS2MDC_Ok)
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d001      	beq.n	8001e2c <IIS2MDC_Init+0x150>
        {
        	return ret;
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	e004      	b.n	8001e36 <IIS2MDC_Init+0x15a>
        }
        Handle->Status = IIS2MDC_Initialized;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	2201      	movs	r2, #1
 8001e30:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    }
    return IIS2MDC_Ok;
 8001e34:	2300      	movs	r3, #0
}
 8001e36:	4618      	mov	r0, r3
 8001e38:	3710      	adds	r7, #16
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8001e40:	b004      	add	sp, #16
 8001e42:	4770      	bx	lr
 8001e44:	473ffe80 	.word	0x473ffe80
 8001e48:	c73ffe80 	.word	0xc73ffe80
 8001e4c:	08001f95 	.word	0x08001f95
 8001e50:	08001f59 	.word	0x08001f59

08001e54 <IIS2MDC_ResetDevice>:

    return IIS2MDC_Ok;
}

int32_t IIS2MDC_ResetDevice(IIS2MDC_Handle_t *Handle)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b084      	sub	sp, #16
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
	int32_t ret = IIS2MDC_Ok;
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	60fb      	str	r3, [r7, #12]
	if(Handle == NULL)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d102      	bne.n	8001e6c <IIS2MDC_ResetDevice+0x18>
	{
		return IIS2MDC_HandleError;
 8001e66:	f04f 33ff 	mov.w	r3, #4294967295
 8001e6a:	e021      	b.n	8001eb0 <IIS2MDC_ResetDevice+0x5c>
	}

    if(Handle->IO.Write == NULL || Handle->IO.Read == NULL || Handle->IO.GetTick == NULL)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	695b      	ldr	r3, [r3, #20]
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d007      	beq.n	8001e84 <IIS2MDC_ResetDevice+0x30>
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	699b      	ldr	r3, [r3, #24]
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d003      	beq.n	8001e84 <IIS2MDC_ResetDevice+0x30>
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	6a1b      	ldr	r3, [r3, #32]
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d102      	bne.n	8001e8a <IIS2MDC_ResetDevice+0x36>
    {
    	return IIS2MDC_IOError;
 8001e84:	f06f 0301 	mvn.w	r3, #1
 8001e88:	e012      	b.n	8001eb0 <IIS2MDC_ResetDevice+0x5c>
    }

	ret = IIS2MDC_Reboot(Handle);
 8001e8a:	6878      	ldr	r0, [r7, #4]
 8001e8c:	f000 f98b 	bl	80021a6 <IIS2MDC_Reboot>
 8001e90:	60f8      	str	r0, [r7, #12]
	if(ret != IIS2MDC_Ok)
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d001      	beq.n	8001e9c <IIS2MDC_ResetDevice+0x48>
	{
		return ret;
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	e009      	b.n	8001eb0 <IIS2MDC_ResetDevice+0x5c>
	}


	ret = IIS2MDC_SWReset(Handle);
 8001e9c:	6878      	ldr	r0, [r7, #4]
 8001e9e:	f000 f94b 	bl	8002138 <IIS2MDC_SWReset>
 8001ea2:	60f8      	str	r0, [r7, #12]
	if(ret != IIS2MDC_Ok)
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d001      	beq.n	8001eae <IIS2MDC_ResetDevice+0x5a>
	{
		return ret;
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	e000      	b.n	8001eb0 <IIS2MDC_ResetDevice+0x5c>
	}

	return IIS2MDC_Ok;
 8001eae:	2300      	movs	r3, #0
}
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	3710      	adds	r7, #16
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	bd80      	pop	{r7, pc}

08001eb8 <IIS2MDC_ReadMagnetismXYZ>:
	}
	return IIS2MDC_Ok;
}

int32_t IIS2MDC_ReadMagnetismXYZ(IIS2MDC_Handle_t *Handle, float *Mx, float *My, float *Mz)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b088      	sub	sp, #32
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	60f8      	str	r0, [r7, #12]
 8001ec0:	60b9      	str	r1, [r7, #8]
 8001ec2:	607a      	str	r2, [r7, #4]
 8001ec4:	603b      	str	r3, [r7, #0]
	if(Handle->Status != IIS2MDC_Initialized)
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001ecc:	2b01      	cmp	r3, #1
 8001ece:	d002      	beq.n	8001ed6 <IIS2MDC_ReadMagnetismXYZ+0x1e>
	{
		return IIS2MDC_InitError;
 8001ed0:	f06f 0302 	mvn.w	r3, #2
 8001ed4:	e03c      	b.n	8001f50 <IIS2MDC_ReadMagnetismXYZ+0x98>
	}

	uint8_t Buffer[6] = {0};
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	617b      	str	r3, [r7, #20]
 8001eda:	2300      	movs	r3, #0
 8001edc:	833b      	strh	r3, [r7, #24]
	uint32_t ret = IIS2MDC_ReadReg(&Handle->Context, IIS2MDC_REG_STATUS_REG, Buffer, 1);
 8001ede:	68f8      	ldr	r0, [r7, #12]
 8001ee0:	f107 0214 	add.w	r2, r7, #20
 8001ee4:	2301      	movs	r3, #1
 8001ee6:	2167      	movs	r1, #103	; 0x67
 8001ee8:	f000 fa09 	bl	80022fe <IIS2MDC_ReadReg>
 8001eec:	4603      	mov	r3, r0
 8001eee:	61fb      	str	r3, [r7, #28]
	if(ret != IIS2MDC_Ok)
 8001ef0:	69fb      	ldr	r3, [r7, #28]
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d001      	beq.n	8001efa <IIS2MDC_ReadMagnetismXYZ+0x42>
	{
		return ret;
 8001ef6:	69fb      	ldr	r3, [r7, #28]
 8001ef8:	e02a      	b.n	8001f50 <IIS2MDC_ReadMagnetismXYZ+0x98>
	}
	if(Buffer[0] & (IIS2MDC_XDATA_Msk | IIS2MDC_YDATA_Msk | IIS2MDC_ZDATA_Msk))
 8001efa:	7d3b      	ldrb	r3, [r7, #20]
 8001efc:	f003 0307 	and.w	r3, r3, #7
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d023      	beq.n	8001f4c <IIS2MDC_ReadMagnetismXYZ+0x94>
	{
		ret = IIS2MDC_ReadReg(&Handle->Context, IIS2MDC_REG_OUTX_L_REG, Buffer, 6);
 8001f04:	68f8      	ldr	r0, [r7, #12]
 8001f06:	f107 0214 	add.w	r2, r7, #20
 8001f0a:	2306      	movs	r3, #6
 8001f0c:	2168      	movs	r1, #104	; 0x68
 8001f0e:	f000 f9f6 	bl	80022fe <IIS2MDC_ReadReg>
 8001f12:	4603      	mov	r3, r0
 8001f14:	61fb      	str	r3, [r7, #28]
		if(ret != IIS2MDC_Ok)
 8001f16:	69fb      	ldr	r3, [r7, #28]
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d001      	beq.n	8001f20 <IIS2MDC_ReadMagnetismXYZ+0x68>
		{
			return ret;
 8001f1c:	69fb      	ldr	r3, [r7, #28]
 8001f1e:	e017      	b.n	8001f50 <IIS2MDC_ReadMagnetismXYZ+0x98>
		}
		ConvertMagData(Buffer, Mx);
 8001f20:	f107 0314 	add.w	r3, r7, #20
 8001f24:	68b9      	ldr	r1, [r7, #8]
 8001f26:	4618      	mov	r0, r3
 8001f28:	f000 f965 	bl	80021f6 <ConvertMagData>
		ConvertMagData(&Buffer[2], My);
 8001f2c:	f107 0314 	add.w	r3, r7, #20
 8001f30:	3302      	adds	r3, #2
 8001f32:	6879      	ldr	r1, [r7, #4]
 8001f34:	4618      	mov	r0, r3
 8001f36:	f000 f95e 	bl	80021f6 <ConvertMagData>
		ConvertMagData(&Buffer[4], Mz);
 8001f3a:	f107 0314 	add.w	r3, r7, #20
 8001f3e:	3304      	adds	r3, #4
 8001f40:	6839      	ldr	r1, [r7, #0]
 8001f42:	4618      	mov	r0, r3
 8001f44:	f000 f957 	bl	80021f6 <ConvertMagData>
		return IIS2MDC_DataReady;
 8001f48:	2300      	movs	r3, #0
 8001f4a:	e001      	b.n	8001f50 <IIS2MDC_ReadMagnetismXYZ+0x98>
	}
	return IIS2MDC_DataNotReady;
 8001f4c:	f64b 63ef 	movw	r3, #48879	; 0xbeef
}
 8001f50:	4618      	mov	r0, r3
 8001f52:	3720      	adds	r7, #32
 8001f54:	46bd      	mov	sp, r7
 8001f56:	bd80      	pop	{r7, pc}

08001f58 <IIS2MDC_WriteRegWrapper>:
	return IIS2MDC_DataNotReady;
}


static int32_t IIS2MDC_WriteRegWrapper(void *Handle,uint8_t Reg, uint8_t *Buffer, uint8_t Length)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b086      	sub	sp, #24
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	60f8      	str	r0, [r7, #12]
 8001f60:	607a      	str	r2, [r7, #4]
 8001f62:	461a      	mov	r2, r3
 8001f64:	460b      	mov	r3, r1
 8001f66:	72fb      	strb	r3, [r7, #11]
 8001f68:	4613      	mov	r3, r2
 8001f6a:	72bb      	strb	r3, [r7, #10]
	IIS2MDC_Handle_t *Dev= Handle;
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	617b      	str	r3, [r7, #20]
	if(Dev->IO.Write != NULL)
 8001f70:	697b      	ldr	r3, [r7, #20]
 8001f72:	695b      	ldr	r3, [r3, #20]
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d007      	beq.n	8001f88 <IIS2MDC_WriteRegWrapper+0x30>
	{
		return Dev->IO.Write(Reg,Buffer,Length);
 8001f78:	697b      	ldr	r3, [r7, #20]
 8001f7a:	695b      	ldr	r3, [r3, #20]
 8001f7c:	7aba      	ldrb	r2, [r7, #10]
 8001f7e:	7af8      	ldrb	r0, [r7, #11]
 8001f80:	6879      	ldr	r1, [r7, #4]
 8001f82:	4798      	blx	r3
 8001f84:	4603      	mov	r3, r0
 8001f86:	e001      	b.n	8001f8c <IIS2MDC_WriteRegWrapper+0x34>
	}
    return IIS2MDC_IOError;
 8001f88:	f06f 0301 	mvn.w	r3, #1
}
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	3718      	adds	r7, #24
 8001f90:	46bd      	mov	sp, r7
 8001f92:	bd80      	pop	{r7, pc}

08001f94 <IIS2MDC_ReadRegWrapper>:

static int32_t IIS2MDC_ReadRegWrapper(void *Handle,uint8_t Reg, uint8_t *Buffer, uint8_t Length)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b086      	sub	sp, #24
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	60f8      	str	r0, [r7, #12]
 8001f9c:	607a      	str	r2, [r7, #4]
 8001f9e:	461a      	mov	r2, r3
 8001fa0:	460b      	mov	r3, r1
 8001fa2:	72fb      	strb	r3, [r7, #11]
 8001fa4:	4613      	mov	r3, r2
 8001fa6:	72bb      	strb	r3, [r7, #10]
	IIS2MDC_Handle_t *Dev= Handle;
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	617b      	str	r3, [r7, #20]
	if(Dev->IO.Read != NULL)
 8001fac:	697b      	ldr	r3, [r7, #20]
 8001fae:	699b      	ldr	r3, [r3, #24]
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d007      	beq.n	8001fc4 <IIS2MDC_ReadRegWrapper+0x30>
	{
		return Dev->IO.Read(Reg,Buffer,Length);
 8001fb4:	697b      	ldr	r3, [r7, #20]
 8001fb6:	699b      	ldr	r3, [r3, #24]
 8001fb8:	7aba      	ldrb	r2, [r7, #10]
 8001fba:	7af8      	ldrb	r0, [r7, #11]
 8001fbc:	6879      	ldr	r1, [r7, #4]
 8001fbe:	4798      	blx	r3
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	e001      	b.n	8001fc8 <IIS2MDC_ReadRegWrapper+0x34>
	}
    return IIS2MDC_IOError;
 8001fc4:	f06f 0301 	mvn.w	r3, #1
}
 8001fc8:	4618      	mov	r0, r3
 8001fca:	3718      	adds	r7, #24
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	bd80      	pop	{r7, pc}

08001fd0 <IIS2MDC_RegisterInit>:

static int32_t IIS2MDC_RegisterInit(IIS2MDC_Handle_t *Handle, IIS2MDC_InitStruct_t Settings)
{
 8001fd0:	b084      	sub	sp, #16
 8001fd2:	b580      	push	{r7, lr}
 8001fd4:	b084      	sub	sp, #16
 8001fd6:	af00      	add	r7, sp, #0
 8001fd8:	6078      	str	r0, [r7, #4]
 8001fda:	f107 001c 	add.w	r0, r7, #28
 8001fde:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	int32_t ret = IIS2MDC_ResetDevice(Handle);
 8001fe2:	6878      	ldr	r0, [r7, #4]
 8001fe4:	f7ff ff36 	bl	8001e54 <IIS2MDC_ResetDevice>
 8001fe8:	60f8      	str	r0, [r7, #12]
	if(ret != IIS2MDC_Ok)
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d001      	beq.n	8001ff4 <IIS2MDC_RegisterInit+0x24>
	{
		return ret;
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	e09a      	b.n	800212a <IIS2MDC_RegisterInit+0x15a>
	}

	uint8_t Buffer[2] = {0};
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	813b      	strh	r3, [r7, #8]

	DeConvertMagData(Settings.IntThreshold, Buffer);
 8001ff8:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001ffc:	f107 0308 	add.w	r3, r7, #8
 8002000:	4618      	mov	r0, r3
 8002002:	eeb0 0a67 	vmov.f32	s0, s15
 8002006:	f000 f91a 	bl	800223e <DeConvertMagData>
	ret = IIS2MDC_WriteReg(&Handle->Context,IIS2MDC_REG_INT_THS_H_REG,Buffer,2);
 800200a:	6878      	ldr	r0, [r7, #4]
 800200c:	f107 0208 	add.w	r2, r7, #8
 8002010:	2302      	movs	r3, #2
 8002012:	2166      	movs	r1, #102	; 0x66
 8002014:	f000 f997 	bl	8002346 <IIS2MDC_WriteReg>
 8002018:	60f8      	str	r0, [r7, #12]
	if(ret != IIS2MDC_Ok)
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	2b00      	cmp	r3, #0
 800201e:	d001      	beq.n	8002024 <IIS2MDC_RegisterInit+0x54>
	{
		return ret;
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	e082      	b.n	800212a <IIS2MDC_RegisterInit+0x15a>
	}


	DeConvertMagData(Settings.OffsetX, Buffer);
 8002024:	edd7 7a07 	vldr	s15, [r7, #28]
 8002028:	f107 0308 	add.w	r3, r7, #8
 800202c:	4618      	mov	r0, r3
 800202e:	eeb0 0a67 	vmov.f32	s0, s15
 8002032:	f000 f904 	bl	800223e <DeConvertMagData>
	ret = IIS2MDC_WriteReg(&Handle->Context,IIS2MDC_REG_OFFSET_X_REG_L,Buffer,2);
 8002036:	6878      	ldr	r0, [r7, #4]
 8002038:	f107 0208 	add.w	r2, r7, #8
 800203c:	2302      	movs	r3, #2
 800203e:	2145      	movs	r1, #69	; 0x45
 8002040:	f000 f981 	bl	8002346 <IIS2MDC_WriteReg>
 8002044:	60f8      	str	r0, [r7, #12]
	if(ret != IIS2MDC_Ok)
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	2b00      	cmp	r3, #0
 800204a:	d001      	beq.n	8002050 <IIS2MDC_RegisterInit+0x80>
	{
		return ret;
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	e06c      	b.n	800212a <IIS2MDC_RegisterInit+0x15a>
	}

	DeConvertMagData(Settings.OffsetY, Buffer);
 8002050:	edd7 7a08 	vldr	s15, [r7, #32]
 8002054:	f107 0308 	add.w	r3, r7, #8
 8002058:	4618      	mov	r0, r3
 800205a:	eeb0 0a67 	vmov.f32	s0, s15
 800205e:	f000 f8ee 	bl	800223e <DeConvertMagData>
	ret = IIS2MDC_WriteReg(&Handle->Context,IIS2MDC_REG_OFFSET_Y_REG_L,Buffer,2);
 8002062:	6878      	ldr	r0, [r7, #4]
 8002064:	f107 0208 	add.w	r2, r7, #8
 8002068:	2302      	movs	r3, #2
 800206a:	2147      	movs	r1, #71	; 0x47
 800206c:	f000 f96b 	bl	8002346 <IIS2MDC_WriteReg>
 8002070:	60f8      	str	r0, [r7, #12]
	if(ret != IIS2MDC_Ok)
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	2b00      	cmp	r3, #0
 8002076:	d001      	beq.n	800207c <IIS2MDC_RegisterInit+0xac>
	{
		return ret;
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	e056      	b.n	800212a <IIS2MDC_RegisterInit+0x15a>
	}

	DeConvertMagData(Settings.OffsetZ, Buffer);
 800207c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002080:	f107 0308 	add.w	r3, r7, #8
 8002084:	4618      	mov	r0, r3
 8002086:	eeb0 0a67 	vmov.f32	s0, s15
 800208a:	f000 f8d8 	bl	800223e <DeConvertMagData>
	ret = IIS2MDC_WriteReg(&Handle->Context,IIS2MDC_REG_OFFSET_Z_REG_L,Buffer,2);
 800208e:	6878      	ldr	r0, [r7, #4]
 8002090:	f107 0208 	add.w	r2, r7, #8
 8002094:	2302      	movs	r3, #2
 8002096:	2149      	movs	r1, #73	; 0x49
 8002098:	f000 f955 	bl	8002346 <IIS2MDC_WriteReg>
 800209c:	60f8      	str	r0, [r7, #12]
	if(ret != IIS2MDC_Ok)
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d001      	beq.n	80020a8 <IIS2MDC_RegisterInit+0xd8>
	{
		return ret;
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	e040      	b.n	800212a <IIS2MDC_RegisterInit+0x15a>
	}

	Buffer[0] = Settings.ConfigRegA;
 80020a8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80020ac:	723b      	strb	r3, [r7, #8]
	ret = IIS2MDC_WriteReg(&Handle->Context,IIS2MDC_REG_CFG_REG_A,Buffer,1);
 80020ae:	6878      	ldr	r0, [r7, #4]
 80020b0:	f107 0208 	add.w	r2, r7, #8
 80020b4:	2301      	movs	r3, #1
 80020b6:	2160      	movs	r1, #96	; 0x60
 80020b8:	f000 f945 	bl	8002346 <IIS2MDC_WriteReg>
 80020bc:	60f8      	str	r0, [r7, #12]
	if(ret != IIS2MDC_Ok)
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d001      	beq.n	80020c8 <IIS2MDC_RegisterInit+0xf8>
	{
		return ret;
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	e030      	b.n	800212a <IIS2MDC_RegisterInit+0x15a>
	}

	Buffer[0] = Settings.ConfigRegB;
 80020c8:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 80020cc:	723b      	strb	r3, [r7, #8]
	ret = IIS2MDC_WriteReg(&Handle->Context,IIS2MDC_REG_CFG_REG_B,Buffer,1);
 80020ce:	6878      	ldr	r0, [r7, #4]
 80020d0:	f107 0208 	add.w	r2, r7, #8
 80020d4:	2301      	movs	r3, #1
 80020d6:	2161      	movs	r1, #97	; 0x61
 80020d8:	f000 f935 	bl	8002346 <IIS2MDC_WriteReg>
 80020dc:	60f8      	str	r0, [r7, #12]
	if(ret != IIS2MDC_Ok)
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d001      	beq.n	80020e8 <IIS2MDC_RegisterInit+0x118>
	{
		return ret;
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	e020      	b.n	800212a <IIS2MDC_RegisterInit+0x15a>
	}

	Buffer[0] = Settings.ConfigRegC;
 80020e8:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80020ec:	723b      	strb	r3, [r7, #8]
	ret = IIS2MDC_WriteReg(&Handle->Context,IIS2MDC_REG_CFG_REG_C,Buffer,1);
 80020ee:	6878      	ldr	r0, [r7, #4]
 80020f0:	f107 0208 	add.w	r2, r7, #8
 80020f4:	2301      	movs	r3, #1
 80020f6:	2162      	movs	r1, #98	; 0x62
 80020f8:	f000 f925 	bl	8002346 <IIS2MDC_WriteReg>
 80020fc:	60f8      	str	r0, [r7, #12]
	if(ret != IIS2MDC_Ok)
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	2b00      	cmp	r3, #0
 8002102:	d001      	beq.n	8002108 <IIS2MDC_RegisterInit+0x138>
	{
		return ret;
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	e010      	b.n	800212a <IIS2MDC_RegisterInit+0x15a>
	}

	Buffer[0] = Settings.IntCtrlReg;
 8002108:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800210c:	723b      	strb	r3, [r7, #8]
	ret = IIS2MDC_WriteReg(&Handle->Context,IIS2MDC_REG_INT_CTRL_REG,Buffer,1);
 800210e:	6878      	ldr	r0, [r7, #4]
 8002110:	f107 0208 	add.w	r2, r7, #8
 8002114:	2301      	movs	r3, #1
 8002116:	2163      	movs	r1, #99	; 0x63
 8002118:	f000 f915 	bl	8002346 <IIS2MDC_WriteReg>
 800211c:	60f8      	str	r0, [r7, #12]
	if(ret != IIS2MDC_Ok)
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	2b00      	cmp	r3, #0
 8002122:	d001      	beq.n	8002128 <IIS2MDC_RegisterInit+0x158>
	{
		return ret;
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	e000      	b.n	800212a <IIS2MDC_RegisterInit+0x15a>
	}

    return IIS2MDC_Ok;
 8002128:	2300      	movs	r3, #0
}
 800212a:	4618      	mov	r0, r3
 800212c:	3710      	adds	r7, #16
 800212e:	46bd      	mov	sp, r7
 8002130:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002134:	b004      	add	sp, #16
 8002136:	4770      	bx	lr

08002138 <IIS2MDC_SWReset>:

static int32_t IIS2MDC_SWReset(IIS2MDC_Handle_t *Handle)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b086      	sub	sp, #24
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
    int32_t ret = 0;
 8002140:	2300      	movs	r3, #0
 8002142:	617b      	str	r3, [r7, #20]
    uint8_t Buffer = IIS2MDC_ResetSignal;
 8002144:	2320      	movs	r3, #32
 8002146:	73fb      	strb	r3, [r7, #15]
    ret = IIS2MDC_WriteReg(&Handle->Context, IIS2MDC_REG_CFG_REG_A, &Buffer, 1);
 8002148:	6878      	ldr	r0, [r7, #4]
 800214a:	f107 020f 	add.w	r2, r7, #15
 800214e:	2301      	movs	r3, #1
 8002150:	2160      	movs	r1, #96	; 0x60
 8002152:	f000 f8f8 	bl	8002346 <IIS2MDC_WriteReg>
 8002156:	6178      	str	r0, [r7, #20]
    if(ret != IIS2MDC_Ok)
 8002158:	697b      	ldr	r3, [r7, #20]
 800215a:	2b00      	cmp	r3, #0
 800215c:	d001      	beq.n	8002162 <IIS2MDC_SWReset+0x2a>
    {
    	return ret;
 800215e:	697b      	ldr	r3, [r7, #20]
 8002160:	e01d      	b.n	800219e <IIS2MDC_SWReset+0x66>
    }

    uint32_t timeout = Handle->IO.GetTick();
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	6a1b      	ldr	r3, [r3, #32]
 8002166:	4798      	blx	r3
 8002168:	6138      	str	r0, [r7, #16]
    while(Buffer & IIS2MDC_ResetSignal)
 800216a:	e012      	b.n	8002192 <IIS2MDC_SWReset+0x5a>
    {
        ret = IIS2MDC_ReadReg(&Handle->Context, IIS2MDC_REG_CFG_REG_A, &Buffer, 1);
 800216c:	6878      	ldr	r0, [r7, #4]
 800216e:	f107 020f 	add.w	r2, r7, #15
 8002172:	2301      	movs	r3, #1
 8002174:	2160      	movs	r1, #96	; 0x60
 8002176:	f000 f8c2 	bl	80022fe <IIS2MDC_ReadReg>
 800217a:	6178      	str	r0, [r7, #20]
        if(Handle->IO.GetTick() > timeout + 100)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	6a1b      	ldr	r3, [r3, #32]
 8002180:	4798      	blx	r3
 8002182:	4602      	mov	r2, r0
 8002184:	693b      	ldr	r3, [r7, #16]
 8002186:	3364      	adds	r3, #100	; 0x64
 8002188:	429a      	cmp	r2, r3
 800218a:	d902      	bls.n	8002192 <IIS2MDC_SWReset+0x5a>
        {
        	return IIS2MDC_Timeout;
 800218c:	f06f 0305 	mvn.w	r3, #5
 8002190:	e005      	b.n	800219e <IIS2MDC_SWReset+0x66>
    while(Buffer & IIS2MDC_ResetSignal)
 8002192:	7bfb      	ldrb	r3, [r7, #15]
 8002194:	f003 0320 	and.w	r3, r3, #32
 8002198:	2b00      	cmp	r3, #0
 800219a:	d1e7      	bne.n	800216c <IIS2MDC_SWReset+0x34>
        }
    }
    return IIS2MDC_Ok;
 800219c:	2300      	movs	r3, #0
}
 800219e:	4618      	mov	r0, r3
 80021a0:	3718      	adds	r7, #24
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bd80      	pop	{r7, pc}

080021a6 <IIS2MDC_Reboot>:

static int32_t IIS2MDC_Reboot(IIS2MDC_Handle_t *Handle)
{
 80021a6:	b590      	push	{r4, r7, lr}
 80021a8:	b087      	sub	sp, #28
 80021aa:	af00      	add	r7, sp, #0
 80021ac:	6078      	str	r0, [r7, #4]
    int32_t ret = 0;
 80021ae:	2300      	movs	r3, #0
 80021b0:	617b      	str	r3, [r7, #20]
    uint8_t Buffer = IIS2MDC_RebootSignal;
 80021b2:	2340      	movs	r3, #64	; 0x40
 80021b4:	73fb      	strb	r3, [r7, #15]
    ret = IIS2MDC_WriteReg(&Handle->Context, IIS2MDC_REG_CFG_REG_A, &Buffer, 1);
 80021b6:	6878      	ldr	r0, [r7, #4]
 80021b8:	f107 020f 	add.w	r2, r7, #15
 80021bc:	2301      	movs	r3, #1
 80021be:	2160      	movs	r1, #96	; 0x60
 80021c0:	f000 f8c1 	bl	8002346 <IIS2MDC_WriteReg>
 80021c4:	6178      	str	r0, [r7, #20]
    if(ret != IIS2MDC_Ok)
 80021c6:	697b      	ldr	r3, [r7, #20]
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d001      	beq.n	80021d0 <IIS2MDC_Reboot+0x2a>
    {
    	return ret;
 80021cc:	697b      	ldr	r3, [r7, #20]
 80021ce:	e00e      	b.n	80021ee <IIS2MDC_Reboot+0x48>
    }
    uint32_t timeout = Handle->IO.GetTick();
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6a1b      	ldr	r3, [r3, #32]
 80021d4:	4798      	blx	r3
 80021d6:	6138      	str	r0, [r7, #16]
    while((timeout + 20) > Handle->IO.GetTick()); //Delay 20ms
 80021d8:	bf00      	nop
 80021da:	693b      	ldr	r3, [r7, #16]
 80021dc:	f103 0414 	add.w	r4, r3, #20
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	6a1b      	ldr	r3, [r3, #32]
 80021e4:	4798      	blx	r3
 80021e6:	4603      	mov	r3, r0
 80021e8:	429c      	cmp	r4, r3
 80021ea:	d8f6      	bhi.n	80021da <IIS2MDC_Reboot+0x34>
    return IIS2MDC_Ok;
 80021ec:	2300      	movs	r3, #0
}
 80021ee:	4618      	mov	r0, r3
 80021f0:	371c      	adds	r7, #28
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bd90      	pop	{r4, r7, pc}

080021f6 <ConvertMagData>:

static void ConvertMagData(uint8_t *buffer, float *magnetism)
{
 80021f6:	b480      	push	{r7}
 80021f8:	b085      	sub	sp, #20
 80021fa:	af00      	add	r7, sp, #0
 80021fc:	6078      	str	r0, [r7, #4]
 80021fe:	6039      	str	r1, [r7, #0]
	int16_t result = (buffer[1] * 256) + buffer[0];
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	3301      	adds	r3, #1
 8002204:	781b      	ldrb	r3, [r3, #0]
 8002206:	b29b      	uxth	r3, r3
 8002208:	021b      	lsls	r3, r3, #8
 800220a:	b29a      	uxth	r2, r3
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	781b      	ldrb	r3, [r3, #0]
 8002210:	b29b      	uxth	r3, r3
 8002212:	4413      	add	r3, r2
 8002214:	b29b      	uxth	r3, r3
 8002216:	81fb      	strh	r3, [r7, #14]
	*magnetism = result * 1.5f;
 8002218:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800221c:	ee07 3a90 	vmov	s15, r3
 8002220:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002224:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8002228:	ee67 7a87 	vmul.f32	s15, s15, s14
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	edc3 7a00 	vstr	s15, [r3]
}
 8002232:	bf00      	nop
 8002234:	3714      	adds	r7, #20
 8002236:	46bd      	mov	sp, r7
 8002238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223c:	4770      	bx	lr

0800223e <DeConvertMagData>:

static void DeConvertMagData(float magnetism, uint8_t *buffer)
{
 800223e:	b480      	push	{r7}
 8002240:	b085      	sub	sp, #20
 8002242:	af00      	add	r7, sp, #0
 8002244:	ed87 0a01 	vstr	s0, [r7, #4]
 8002248:	6038      	str	r0, [r7, #0]
    int16_t result = magnetism / 1.5f;
 800224a:	ed97 7a01 	vldr	s14, [r7, #4]
 800224e:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8002252:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002256:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800225a:	ee17 3a90 	vmov	r3, s15
 800225e:	81fb      	strh	r3, [r7, #14]
    buffer[1] = (result & 0xFF00) >> 8;
 8002260:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002264:	121a      	asrs	r2, r3, #8
 8002266:	683b      	ldr	r3, [r7, #0]
 8002268:	3301      	adds	r3, #1
 800226a:	b2d2      	uxtb	r2, r2
 800226c:	701a      	strb	r2, [r3, #0]
    buffer[0] = result & 0x00FF;
 800226e:	89fb      	ldrh	r3, [r7, #14]
 8002270:	b2da      	uxtb	r2, r3
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	701a      	strb	r2, [r3, #0]
}
 8002276:	bf00      	nop
 8002278:	3714      	adds	r7, #20
 800227a:	46bd      	mov	sp, r7
 800227c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002280:	4770      	bx	lr

08002282 <IIS2MDC_ValidateParams>:

#include "IIS2MDC_Registers.h"
#include <stddef.h>

static int32_t IIS2MDC_ValidateParams(IIS2MDC_Context_t *Context, uint8_t Reg, uint8_t *Buffer, uint8_t Length)
{
 8002282:	b480      	push	{r7}
 8002284:	b087      	sub	sp, #28
 8002286:	af00      	add	r7, sp, #0
 8002288:	60f8      	str	r0, [r7, #12]
 800228a:	607a      	str	r2, [r7, #4]
 800228c:	461a      	mov	r2, r3
 800228e:	460b      	mov	r3, r1
 8002290:	72fb      	strb	r3, [r7, #11]
 8002292:	4613      	mov	r3, r2
 8002294:	72bb      	strb	r3, [r7, #10]
	int32_t ret = IIS2MDC_REG_OK;
 8002296:	2300      	movs	r3, #0
 8002298:	617b      	str	r3, [r7, #20]
    if(Context == NULL || Context->Read == NULL || Context->Write == NULL || Context->Handle == NULL)
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	2b00      	cmp	r3, #0
 800229e:	d00b      	beq.n	80022b8 <IIS2MDC_ValidateParams+0x36>
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	685b      	ldr	r3, [r3, #4]
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d007      	beq.n	80022b8 <IIS2MDC_ValidateParams+0x36>
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	689b      	ldr	r3, [r3, #8]
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d003      	beq.n	80022b8 <IIS2MDC_ValidateParams+0x36>
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d103      	bne.n	80022c0 <IIS2MDC_ValidateParams+0x3e>
    {
    	ret |= IIS2MDC_REG_CONTEXT_ERR;
 80022b8:	697b      	ldr	r3, [r7, #20]
 80022ba:	f043 4308 	orr.w	r3, r3, #2281701376	; 0x88000000
 80022be:	617b      	str	r3, [r7, #20]
    }

    if(Reg < IIS2MDC_REG_OFFSET_X_REG_L || Reg > IIS2MDC_REG_TEMP_OUT_H_REG)
 80022c0:	7afb      	ldrb	r3, [r7, #11]
 80022c2:	2b44      	cmp	r3, #68	; 0x44
 80022c4:	d902      	bls.n	80022cc <IIS2MDC_ValidateParams+0x4a>
 80022c6:	7afb      	ldrb	r3, [r7, #11]
 80022c8:	2b6f      	cmp	r3, #111	; 0x6f
 80022ca:	d903      	bls.n	80022d4 <IIS2MDC_ValidateParams+0x52>
    {
    	ret |= IIS2MDC_REG_ADDR_ERR;
 80022cc:	697b      	ldr	r3, [r7, #20]
 80022ce:	f043 4310 	orr.w	r3, r3, #2415919104	; 0x90000000
 80022d2:	617b      	str	r3, [r7, #20]
    }

    if(Buffer == NULL)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d103      	bne.n	80022e2 <IIS2MDC_ValidateParams+0x60>
    {
    	ret |= IIS2MDC_REG_BUFFER_ERR;
 80022da:	697b      	ldr	r3, [r7, #20]
 80022dc:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80022e0:	617b      	str	r3, [r7, #20]
    }

    if(Length == 0)
 80022e2:	7abb      	ldrb	r3, [r7, #10]
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d103      	bne.n	80022f0 <IIS2MDC_ValidateParams+0x6e>
    {
       ret |= IIS2MDC_REG_LENGTH_ERR;
 80022e8:	697b      	ldr	r3, [r7, #20]
 80022ea:	f043 4320 	orr.w	r3, r3, #2684354560	; 0xa0000000
 80022ee:	617b      	str	r3, [r7, #20]
    }

    return ret;
 80022f0:	697b      	ldr	r3, [r7, #20]

}
 80022f2:	4618      	mov	r0, r3
 80022f4:	371c      	adds	r7, #28
 80022f6:	46bd      	mov	sp, r7
 80022f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fc:	4770      	bx	lr

080022fe <IIS2MDC_ReadReg>:

int32_t IIS2MDC_ReadReg(IIS2MDC_Context_t *Context, uint8_t Reg, uint8_t *Buffer, uint8_t Length)
{
 80022fe:	b590      	push	{r4, r7, lr}
 8002300:	b087      	sub	sp, #28
 8002302:	af00      	add	r7, sp, #0
 8002304:	60f8      	str	r0, [r7, #12]
 8002306:	607a      	str	r2, [r7, #4]
 8002308:	461a      	mov	r2, r3
 800230a:	460b      	mov	r3, r1
 800230c:	72fb      	strb	r3, [r7, #11]
 800230e:	4613      	mov	r3, r2
 8002310:	72bb      	strb	r3, [r7, #10]
	int32_t ret = IIS2MDC_ValidateParams(Context,Reg,Buffer,Length);
 8002312:	7abb      	ldrb	r3, [r7, #10]
 8002314:	7af9      	ldrb	r1, [r7, #11]
 8002316:	687a      	ldr	r2, [r7, #4]
 8002318:	68f8      	ldr	r0, [r7, #12]
 800231a:	f7ff ffb2 	bl	8002282 <IIS2MDC_ValidateParams>
 800231e:	6178      	str	r0, [r7, #20]
	if(ret != IIS2MDC_REG_OK)
 8002320:	697b      	ldr	r3, [r7, #20]
 8002322:	2b00      	cmp	r3, #0
 8002324:	d001      	beq.n	800232a <IIS2MDC_ReadReg+0x2c>
	{
		return ret;
 8002326:	697b      	ldr	r3, [r7, #20]
 8002328:	e009      	b.n	800233e <IIS2MDC_ReadReg+0x40>
	}

	ret = Context->Read(Context->Handle, Reg, Buffer, Length);
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	685c      	ldr	r4, [r3, #4]
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	6818      	ldr	r0, [r3, #0]
 8002332:	7abb      	ldrb	r3, [r7, #10]
 8002334:	7af9      	ldrb	r1, [r7, #11]
 8002336:	687a      	ldr	r2, [r7, #4]
 8002338:	47a0      	blx	r4
 800233a:	6178      	str	r0, [r7, #20]
	return ret;
 800233c:	697b      	ldr	r3, [r7, #20]
}
 800233e:	4618      	mov	r0, r3
 8002340:	371c      	adds	r7, #28
 8002342:	46bd      	mov	sp, r7
 8002344:	bd90      	pop	{r4, r7, pc}

08002346 <IIS2MDC_WriteReg>:

int32_t IIS2MDC_WriteReg(IIS2MDC_Context_t *Context, uint8_t Reg, uint8_t *Buffer, uint8_t Length)
{
 8002346:	b590      	push	{r4, r7, lr}
 8002348:	b087      	sub	sp, #28
 800234a:	af00      	add	r7, sp, #0
 800234c:	60f8      	str	r0, [r7, #12]
 800234e:	607a      	str	r2, [r7, #4]
 8002350:	461a      	mov	r2, r3
 8002352:	460b      	mov	r3, r1
 8002354:	72fb      	strb	r3, [r7, #11]
 8002356:	4613      	mov	r3, r2
 8002358:	72bb      	strb	r3, [r7, #10]
	int32_t ret = IIS2MDC_ValidateParams(Context,Reg,Buffer,Length);
 800235a:	7abb      	ldrb	r3, [r7, #10]
 800235c:	7af9      	ldrb	r1, [r7, #11]
 800235e:	687a      	ldr	r2, [r7, #4]
 8002360:	68f8      	ldr	r0, [r7, #12]
 8002362:	f7ff ff8e 	bl	8002282 <IIS2MDC_ValidateParams>
 8002366:	6178      	str	r0, [r7, #20]
	if(ret != IIS2MDC_REG_OK)
 8002368:	697b      	ldr	r3, [r7, #20]
 800236a:	2b00      	cmp	r3, #0
 800236c:	d001      	beq.n	8002372 <IIS2MDC_WriteReg+0x2c>
	{
		return ret;
 800236e:	697b      	ldr	r3, [r7, #20]
 8002370:	e009      	b.n	8002386 <IIS2MDC_WriteReg+0x40>
	}

	ret = Context->Write(Context->Handle, Reg, Buffer, Length);
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	689c      	ldr	r4, [r3, #8]
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	6818      	ldr	r0, [r3, #0]
 800237a:	7abb      	ldrb	r3, [r7, #10]
 800237c:	7af9      	ldrb	r1, [r7, #11]
 800237e:	687a      	ldr	r2, [r7, #4]
 8002380:	47a0      	blx	r4
 8002382:	6178      	str	r0, [r7, #20]
	return ret;
 8002384:	697b      	ldr	r3, [r7, #20]
}
 8002386:	4618      	mov	r0, r3
 8002388:	371c      	adds	r7, #28
 800238a:	46bd      	mov	sp, r7
 800238c:	bd90      	pop	{r4, r7, pc}
	...

08002390 <ISM330DHCX_Init>:
#define T_DATA_MASK  (4U)
#define ISM330DHCX_BOOT_BIT_MSK (0x80)


int32_t ISM330DHCX_Init(ISM330DHCX_Handle_t *Handle, ISM330DHCX_Init_Struct_t Settings, ISM330DHCX_IO_t *IO)
{
 8002390:	b084      	sub	sp, #16
 8002392:	b5b0      	push	{r4, r5, r7, lr}
 8002394:	b08c      	sub	sp, #48	; 0x30
 8002396:	af0a      	add	r7, sp, #40	; 0x28
 8002398:	6078      	str	r0, [r7, #4]
 800239a:	f107 001c 	add.w	r0, r7, #28
 800239e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    if(Handle == NULL)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d102      	bne.n	80023ae <ISM330DHCX_Init+0x1e>
    {
    	return ISM330DHCX_Error;
 80023a8:	f04f 33ff 	mov.w	r3, #4294967295
 80023ac:	e067      	b.n	800247e <ISM330DHCX_Init+0xee>
    }


    if(ISM330DHCX_RegisterIOBus(Handle, IO) != ISM330DHCX_Ok)
 80023ae:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80023b0:	6878      	ldr	r0, [r7, #4]
 80023b2:	f000 f86f 	bl	8002494 <ISM330DHCX_RegisterIOBus>
 80023b6:	4603      	mov	r3, r0
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d002      	beq.n	80023c2 <ISM330DHCX_Init+0x32>
    {
    	return ISM330DHCX_ParamError;
 80023bc:	f06f 0302 	mvn.w	r3, #2
 80023c0:	e05d      	b.n	800247e <ISM330DHCX_Init+0xee>
    }

    //Validate if using INT1
    if(Settings.INT1_CTRL != 0 || ((Settings.INT2_CTRL != 0) && (Settings.INT2_on_INT1 == ISM330DHCX_IRQOnBothPins)))
 80023c2:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d107      	bne.n	80023da <ISM330DHCX_Init+0x4a>
 80023ca:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d00a      	beq.n	80023e8 <ISM330DHCX_Init+0x58>
 80023d2:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80023d6:	2b20      	cmp	r3, #32
 80023d8:	d106      	bne.n	80023e8 <ISM330DHCX_Init+0x58>
    {
    	if(IO->ReadInt1Pin == NULL){
 80023da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80023dc:	691b      	ldr	r3, [r3, #16]
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d102      	bne.n	80023e8 <ISM330DHCX_Init+0x58>
        	return ISM330DHCX_ParamError; //If INT1 is used in any capacity, ReadInt1Pin is required
 80023e2:	f06f 0302 	mvn.w	r3, #2
 80023e6:	e04a      	b.n	800247e <ISM330DHCX_Init+0xee>
    	}

    }

    //Validate if using INT2
    if(Settings.INT2_CTRL != 0 && IO->ReadInt2Pin == NULL)
 80023e8:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d006      	beq.n	80023fe <ISM330DHCX_Init+0x6e>
 80023f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80023f2:	695b      	ldr	r3, [r3, #20]
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d102      	bne.n	80023fe <ISM330DHCX_Init+0x6e>
    {
    	return ISM330DHCX_ParamError; //If INT2 is used in any capacity, ReadInt2Pin is required
 80023f8:	f06f 0302 	mvn.w	r3, #2
 80023fc:	e03f      	b.n	800247e <ISM330DHCX_Init+0xee>
    }

    Handle->Context.Read = ISM330DHCX_ReadWrapper;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	4a22      	ldr	r2, [pc, #136]	; (800248c <ISM330DHCX_Init+0xfc>)
 8002402:	625a      	str	r2, [r3, #36]	; 0x24
    Handle->Context.Write = ISM330DHCX_WriteWrapper;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	4a22      	ldr	r2, [pc, #136]	; (8002490 <ISM330DHCX_Init+0x100>)
 8002408:	621a      	str	r2, [r3, #32]
    Handle->Context.Handle = Handle;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	687a      	ldr	r2, [r7, #4]
 800240e:	61da      	str	r2, [r3, #28]
    Handle->AccelResolution = Settings.FS_XL;
 8002410:	f897 2040 	ldrb.w	r2, [r7, #64]	; 0x40
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
    Handle->GyroResolution = Settings.FS_G;
 800241a:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    Handle->Int1Mode = Settings.INT1_CTRL;
 8002424:	f897 204b 	ldrb.w	r2, [r7, #75]	; 0x4b
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
    Handle->Int2Mode = Settings.INT2_CTRL;
 800242e:	f897 204c 	ldrb.w	r2, [r7, #76]	; 0x4c
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
    Handle->IntPinMux = Settings.INT2_on_INT1;
 8002438:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    Handle->IntPolarity = Settings.H_LACTIVE;
 8002442:	f897 2049 	ldrb.w	r2, [r7, #73]	; 0x49
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    //Initialize Bus
    if(Handle->IO.Init != NULL)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	2b00      	cmp	r3, #0
 8002452:	d002      	beq.n	800245a <ISM330DHCX_Init+0xca>
    {
    	Handle->IO.Init();
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	4798      	blx	r3
    }

    return ISM330DHCX_RegisterInit(Handle, Settings);
 800245a:	466d      	mov	r5, sp
 800245c:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8002460:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002462:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002464:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002466:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002468:	e894 0003 	ldmia.w	r4, {r0, r1}
 800246c:	e885 0003 	stmia.w	r5, {r0, r1}
 8002470:	f107 031c 	add.w	r3, r7, #28
 8002474:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002476:	6878      	ldr	r0, [r7, #4]
 8002478:	f000 f9d5 	bl	8002826 <ISM330DHCX_RegisterInit>
 800247c:	4603      	mov	r3, r0

}
 800247e:	4618      	mov	r0, r3
 8002480:	3708      	adds	r7, #8
 8002482:	46bd      	mov	sp, r7
 8002484:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8002488:	b004      	add	sp, #16
 800248a:	4770      	bx	lr
 800248c:	080027af 	.word	0x080027af
 8002490:	080027eb 	.word	0x080027eb

08002494 <ISM330DHCX_RegisterIOBus>:
    ISM330DHCX_DeInit(Handle);
    return ISM330DHCX_Init(Handle, Settings, IO);
}

int32_t ISM330DHCX_RegisterIOBus(ISM330DHCX_Handle_t *Handle, ISM330DHCX_IO_t *IO)
{
 8002494:	b4b0      	push	{r4, r5, r7}
 8002496:	b083      	sub	sp, #12
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
 800249c:	6039      	str	r1, [r7, #0]
    //Validate if Read/Write/GetTick have been provided
    if(IO->Read == NULL || IO->Write==NULL || IO->GetTick == NULL)
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	689b      	ldr	r3, [r3, #8]
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d007      	beq.n	80024b6 <ISM330DHCX_RegisterIOBus+0x22>
 80024a6:	683b      	ldr	r3, [r7, #0]
 80024a8:	68db      	ldr	r3, [r3, #12]
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d003      	beq.n	80024b6 <ISM330DHCX_RegisterIOBus+0x22>
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	699b      	ldr	r3, [r3, #24]
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d102      	bne.n	80024bc <ISM330DHCX_RegisterIOBus+0x28>
    {
    	return ISM330DHCX_ParamError; //Write, Read, GetTick are required for basic device functionality
 80024b6:	f06f 0302 	mvn.w	r3, #2
 80024ba:	e00a      	b.n	80024d2 <ISM330DHCX_RegisterIOBus+0x3e>
    }

    Handle->IO = *IO;
 80024bc:	687a      	ldr	r2, [r7, #4]
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	4614      	mov	r4, r2
 80024c2:	461d      	mov	r5, r3
 80024c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80024c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80024c8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80024cc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    return ISM330DHCX_Ok;
 80024d0:	2300      	movs	r3, #0
}
 80024d2:	4618      	mov	r0, r3
 80024d4:	370c      	adds	r7, #12
 80024d6:	46bd      	mov	sp, r7
 80024d8:	bcb0      	pop	{r4, r5, r7}
 80024da:	4770      	bx	lr

080024dc <ISM330DHCX_ReadAccel>:

int32_t ISM330DHCX_ReadAccel(ISM330DHCX_Handle_t *Handle, float *Ax, float *Ay, float *Az)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b088      	sub	sp, #32
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	60f8      	str	r0, [r7, #12]
 80024e4:	60b9      	str	r1, [r7, #8]
 80024e6:	607a      	str	r2, [r7, #4]
 80024e8:	603b      	str	r3, [r7, #0]
	int32_t ret = ISM330DHCX_Ok;
 80024ea:	2300      	movs	r3, #0
 80024ec:	61fb      	str	r3, [r7, #28]
	int16_t buffer[3] = {0,0,0};
 80024ee:	2300      	movs	r3, #0
 80024f0:	82bb      	strh	r3, [r7, #20]
 80024f2:	2300      	movs	r3, #0
 80024f4:	82fb      	strh	r3, [r7, #22]
 80024f6:	2300      	movs	r3, #0
 80024f8:	833b      	strh	r3, [r7, #24]
    if(Handle == NULL)
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d102      	bne.n	8002506 <ISM330DHCX_ReadAccel+0x2a>
    {
    	return ISM330DHCX_ParamError;
 8002500:	f06f 0302 	mvn.w	r3, #2
 8002504:	e045      	b.n	8002592 <ISM330DHCX_ReadAccel+0xb6>
    }

    //Read Status register
    ret = ISM330DHCX_ReadReg(&Handle->Context, ISM330DHCX_REG_STATUS_REG, (uint8_t*)buffer, 1);
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	f103 001c 	add.w	r0, r3, #28
 800250c:	f107 0214 	add.w	r2, r7, #20
 8002510:	2301      	movs	r3, #1
 8002512:	211e      	movs	r1, #30
 8002514:	f000 fbfe 	bl	8002d14 <ISM330DHCX_ReadReg>
 8002518:	61f8      	str	r0, [r7, #28]
    if(ret != ISM330DHCX_Ok)
 800251a:	69fb      	ldr	r3, [r7, #28]
 800251c:	2b00      	cmp	r3, #0
 800251e:	d001      	beq.n	8002524 <ISM330DHCX_ReadAccel+0x48>
    {
        return ret;
 8002520:	69fb      	ldr	r3, [r7, #28]
 8002522:	e036      	b.n	8002592 <ISM330DHCX_ReadAccel+0xb6>
    }
    //Check the XL Bit
    if(!(buffer[0] & XL_DATA_MASK))
 8002524:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002528:	b29b      	uxth	r3, r3
 800252a:	f003 0301 	and.w	r3, r3, #1
 800252e:	2b00      	cmp	r3, #0
 8002530:	d102      	bne.n	8002538 <ISM330DHCX_ReadAccel+0x5c>
    {
        return ISM330DHCX_DataNotReady;
 8002532:	f64b 63ef 	movw	r3, #48879	; 0xbeef
 8002536:	e02c      	b.n	8002592 <ISM330DHCX_ReadAccel+0xb6>
    }

    //Read the data
    ret = ISM330DHCX_ReadReg(&Handle->Context, ISM330DHCX_REG_OUTX_L_A, (uint8_t*)buffer, 6);
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	f103 001c 	add.w	r0, r3, #28
 800253e:	f107 0214 	add.w	r2, r7, #20
 8002542:	2306      	movs	r3, #6
 8002544:	2128      	movs	r1, #40	; 0x28
 8002546:	f000 fbe5 	bl	8002d14 <ISM330DHCX_ReadReg>
 800254a:	61f8      	str	r0, [r7, #28]
    if(ret != ISM330DHCX_Ok)
 800254c:	69fb      	ldr	r3, [r7, #28]
 800254e:	2b00      	cmp	r3, #0
 8002550:	d001      	beq.n	8002556 <ISM330DHCX_ReadAccel+0x7a>
    {
    	return ret;
 8002552:	69fb      	ldr	r3, [r7, #28]
 8002554:	e01d      	b.n	8002592 <ISM330DHCX_ReadAccel+0xb6>
    }
    //Convert the data to Gs
    ConvertXLData(Handle->AccelResolution, &buffer[0], Ax);
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800255c:	f107 0114 	add.w	r1, r7, #20
 8002560:	68ba      	ldr	r2, [r7, #8]
 8002562:	4618      	mov	r0, r3
 8002564:	f000 fb46 	bl	8002bf4 <ConvertXLData>
    ConvertXLData(Handle->AccelResolution, &buffer[1], Ay);
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	f893 0029 	ldrb.w	r0, [r3, #41]	; 0x29
 800256e:	f107 0314 	add.w	r3, r7, #20
 8002572:	3302      	adds	r3, #2
 8002574:	687a      	ldr	r2, [r7, #4]
 8002576:	4619      	mov	r1, r3
 8002578:	f000 fb3c 	bl	8002bf4 <ConvertXLData>
    ConvertXLData(Handle->AccelResolution, &buffer[2], Az);
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	f893 0029 	ldrb.w	r0, [r3, #41]	; 0x29
 8002582:	f107 0314 	add.w	r3, r7, #20
 8002586:	3304      	adds	r3, #4
 8002588:	683a      	ldr	r2, [r7, #0]
 800258a:	4619      	mov	r1, r3
 800258c:	f000 fb32 	bl	8002bf4 <ConvertXLData>
    return ISM330DHCX_DataReady;
 8002590:	2300      	movs	r3, #0
}
 8002592:	4618      	mov	r0, r3
 8002594:	3720      	adds	r7, #32
 8002596:	46bd      	mov	sp, r7
 8002598:	bd80      	pop	{r7, pc}

0800259a <ISM330DHCX_ReadGyro>:

int32_t ISM330DHCX_ReadGyro(ISM330DHCX_Handle_t *Handle, float *Wx, float *Wy, float *Wz)
{
 800259a:	b580      	push	{r7, lr}
 800259c:	b088      	sub	sp, #32
 800259e:	af00      	add	r7, sp, #0
 80025a0:	60f8      	str	r0, [r7, #12]
 80025a2:	60b9      	str	r1, [r7, #8]
 80025a4:	607a      	str	r2, [r7, #4]
 80025a6:	603b      	str	r3, [r7, #0]
	int32_t ret = ISM330DHCX_Ok;
 80025a8:	2300      	movs	r3, #0
 80025aa:	61fb      	str	r3, [r7, #28]
	int16_t buffer[3] = {0,0,0};
 80025ac:	2300      	movs	r3, #0
 80025ae:	82bb      	strh	r3, [r7, #20]
 80025b0:	2300      	movs	r3, #0
 80025b2:	82fb      	strh	r3, [r7, #22]
 80025b4:	2300      	movs	r3, #0
 80025b6:	833b      	strh	r3, [r7, #24]
    if(Handle == NULL)
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d102      	bne.n	80025c4 <ISM330DHCX_ReadGyro+0x2a>
    {
    	return ISM330DHCX_ParamError;
 80025be:	f06f 0302 	mvn.w	r3, #2
 80025c2:	e045      	b.n	8002650 <ISM330DHCX_ReadGyro+0xb6>
    }

    //Read Status register
    ret = ISM330DHCX_ReadReg(&Handle->Context, ISM330DHCX_REG_STATUS_REG, (uint8_t*)buffer, 1);
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	f103 001c 	add.w	r0, r3, #28
 80025ca:	f107 0214 	add.w	r2, r7, #20
 80025ce:	2301      	movs	r3, #1
 80025d0:	211e      	movs	r1, #30
 80025d2:	f000 fb9f 	bl	8002d14 <ISM330DHCX_ReadReg>
 80025d6:	61f8      	str	r0, [r7, #28]
    if(ret != ISM330DHCX_Ok)
 80025d8:	69fb      	ldr	r3, [r7, #28]
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d001      	beq.n	80025e2 <ISM330DHCX_ReadGyro+0x48>
    {
        return ret;
 80025de:	69fb      	ldr	r3, [r7, #28]
 80025e0:	e036      	b.n	8002650 <ISM330DHCX_ReadGyro+0xb6>
    }
    //Check the XL Bit
    if(!(buffer[0] & G_DATA_MASK))
 80025e2:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80025e6:	b29b      	uxth	r3, r3
 80025e8:	f003 0302 	and.w	r3, r3, #2
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d102      	bne.n	80025f6 <ISM330DHCX_ReadGyro+0x5c>
    {
        return ISM330DHCX_DataNotReady;
 80025f0:	f64b 63ef 	movw	r3, #48879	; 0xbeef
 80025f4:	e02c      	b.n	8002650 <ISM330DHCX_ReadGyro+0xb6>
    }

    //Read the data
    ret = ISM330DHCX_ReadReg(&Handle->Context, ISM330DHCX_REG_OUTX_L_G, (uint8_t*)buffer, 6);
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	f103 001c 	add.w	r0, r3, #28
 80025fc:	f107 0214 	add.w	r2, r7, #20
 8002600:	2306      	movs	r3, #6
 8002602:	2122      	movs	r1, #34	; 0x22
 8002604:	f000 fb86 	bl	8002d14 <ISM330DHCX_ReadReg>
 8002608:	61f8      	str	r0, [r7, #28]
    if(ret != ISM330DHCX_Ok)
 800260a:	69fb      	ldr	r3, [r7, #28]
 800260c:	2b00      	cmp	r3, #0
 800260e:	d001      	beq.n	8002614 <ISM330DHCX_ReadGyro+0x7a>
    {
    	return ret;
 8002610:	69fb      	ldr	r3, [r7, #28]
 8002612:	e01d      	b.n	8002650 <ISM330DHCX_ReadGyro+0xb6>
    }
    //Convert Gyro Data to DPS
    ConvertGData(Handle->GyroResolution, &buffer[0], Wx);
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800261a:	f107 0114 	add.w	r1, r7, #20
 800261e:	68ba      	ldr	r2, [r7, #8]
 8002620:	4618      	mov	r0, r3
 8002622:	f000 fb27 	bl	8002c74 <ConvertGData>
    ConvertGData(Handle->GyroResolution, &buffer[1], Wy);
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	f893 0028 	ldrb.w	r0, [r3, #40]	; 0x28
 800262c:	f107 0314 	add.w	r3, r7, #20
 8002630:	3302      	adds	r3, #2
 8002632:	687a      	ldr	r2, [r7, #4]
 8002634:	4619      	mov	r1, r3
 8002636:	f000 fb1d 	bl	8002c74 <ConvertGData>
    ConvertGData(Handle->GyroResolution, &buffer[2], Wz);
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	f893 0028 	ldrb.w	r0, [r3, #40]	; 0x28
 8002640:	f107 0314 	add.w	r3, r7, #20
 8002644:	3304      	adds	r3, #4
 8002646:	683a      	ldr	r2, [r7, #0]
 8002648:	4619      	mov	r1, r3
 800264a:	f000 fb13 	bl	8002c74 <ConvertGData>
    return ISM330DHCX_DataReady;
 800264e:	2300      	movs	r3, #0
}
 8002650:	4618      	mov	r0, r3
 8002652:	3720      	adds	r7, #32
 8002654:	46bd      	mov	sp, r7
 8002656:	bd80      	pop	{r7, pc}

08002658 <ISM330DHCX_Reboot>:
    ConvertTData(buffer, Data);
    return ISM330DHCX_DataReady;
}

int32_t ISM330DHCX_Reboot(ISM330DHCX_Handle_t *Handle)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b084      	sub	sp, #16
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
    //Put Gyro / Accel In power down mode
	uint32_t ret = ISM330DHCX_Ok;
 8002660:	2300      	movs	r3, #0
 8002662:	60fb      	str	r3, [r7, #12]
    uint8_t buffer = 0;
 8002664:	2300      	movs	r3, #0
 8002666:	72fb      	strb	r3, [r7, #11]
    ret = ISM330DHCX_WriteReg(&Handle->Context, ISM330DHCX_REG_CTRL1_XL, &buffer, 1);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	f103 001c 	add.w	r0, r3, #28
 800266e:	f107 020b 	add.w	r2, r7, #11
 8002672:	2301      	movs	r3, #1
 8002674:	2110      	movs	r1, #16
 8002676:	f000 fb76 	bl	8002d66 <ISM330DHCX_WriteReg>
 800267a:	4603      	mov	r3, r0
 800267c:	60fb      	str	r3, [r7, #12]
    if(ret != ISM330DHCX_Ok)
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	2b00      	cmp	r3, #0
 8002682:	d001      	beq.n	8002688 <ISM330DHCX_Reboot+0x30>
    {
    	return ret;
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	e038      	b.n	80026fa <ISM330DHCX_Reboot+0xa2>
    }

    buffer = 0;
 8002688:	2300      	movs	r3, #0
 800268a:	72fb      	strb	r3, [r7, #11]
    ret = ISM330DHCX_WriteReg(&Handle->Context, ISM330DHCX_REG_CTRL2_G, &buffer, 1);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	f103 001c 	add.w	r0, r3, #28
 8002692:	f107 020b 	add.w	r2, r7, #11
 8002696:	2301      	movs	r3, #1
 8002698:	2111      	movs	r1, #17
 800269a:	f000 fb64 	bl	8002d66 <ISM330DHCX_WriteReg>
 800269e:	4603      	mov	r3, r0
 80026a0:	60fb      	str	r3, [r7, #12]
    if(ret != ISM330DHCX_Ok)
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d001      	beq.n	80026ac <ISM330DHCX_Reboot+0x54>
    {
    	return ret;
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	e026      	b.n	80026fa <ISM330DHCX_Reboot+0xa2>
    }

	//Set BOOT bit in ctrl 3
    buffer = ISM330DHCX_BOOT_BIT_MSK;
 80026ac:	2380      	movs	r3, #128	; 0x80
 80026ae:	72fb      	strb	r3, [r7, #11]
    ret = ISM330DHCX_WriteReg(&Handle->Context, ISM330DHCX_REG_CTRL3_C, &buffer, 1);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	f103 001c 	add.w	r0, r3, #28
 80026b6:	f107 020b 	add.w	r2, r7, #11
 80026ba:	2301      	movs	r3, #1
 80026bc:	2112      	movs	r1, #18
 80026be:	f000 fb52 	bl	8002d66 <ISM330DHCX_WriteReg>
 80026c2:	4603      	mov	r3, r0
 80026c4:	60fb      	str	r3, [r7, #12]
    if(ret != ISM330DHCX_Ok)
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d011      	beq.n	80026f0 <ISM330DHCX_Reboot+0x98>
    {
    	return ret;
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	e014      	b.n	80026fa <ISM330DHCX_Reboot+0xa2>
    }

	//Wait for boot bit to become 0
    while(buffer & ISM330DHCX_BOOT_BIT_MSK)
    {
        ret = ISM330DHCX_ReadReg(&Handle->Context, ISM330DHCX_REG_CTRL3_C, &buffer, 1);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	f103 001c 	add.w	r0, r3, #28
 80026d6:	f107 020b 	add.w	r2, r7, #11
 80026da:	2301      	movs	r3, #1
 80026dc:	2112      	movs	r1, #18
 80026de:	f000 fb19 	bl	8002d14 <ISM330DHCX_ReadReg>
 80026e2:	4603      	mov	r3, r0
 80026e4:	60fb      	str	r3, [r7, #12]
        if(ret != ISM330DHCX_Ok)
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d001      	beq.n	80026f0 <ISM330DHCX_Reboot+0x98>
        {
        	return ret;
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	e004      	b.n	80026fa <ISM330DHCX_Reboot+0xa2>
    while(buffer & ISM330DHCX_BOOT_BIT_MSK)
 80026f0:	7afb      	ldrb	r3, [r7, #11]
 80026f2:	b25b      	sxtb	r3, r3
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	dbeb      	blt.n	80026d0 <ISM330DHCX_Reboot+0x78>
        }
    }
    return ISM330DHCX_Ok;
 80026f8:	2300      	movs	r3, #0
}
 80026fa:	4618      	mov	r0, r3
 80026fc:	3710      	adds	r7, #16
 80026fe:	46bd      	mov	sp, r7
 8002700:	bd80      	pop	{r7, pc}

08002702 <ISM330DHCX_Reset>:

int32_t ISM330DHCX_Reset(ISM330DHCX_Handle_t *Handle)
{
 8002702:	b580      	push	{r7, lr}
 8002704:	b084      	sub	sp, #16
 8002706:	af00      	add	r7, sp, #0
 8002708:	6078      	str	r0, [r7, #4]
	//Put Gyro / Accel in power down mode
	uint32_t ret = ISM330DHCX_Ok;
 800270a:	2300      	movs	r3, #0
 800270c:	60fb      	str	r3, [r7, #12]
    uint8_t buffer = 0;
 800270e:	2300      	movs	r3, #0
 8002710:	72fb      	strb	r3, [r7, #11]
    ret = ISM330DHCX_WriteReg(&Handle->Context, ISM330DHCX_REG_CTRL1_XL, &buffer, 1);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	f103 001c 	add.w	r0, r3, #28
 8002718:	f107 020b 	add.w	r2, r7, #11
 800271c:	2301      	movs	r3, #1
 800271e:	2110      	movs	r1, #16
 8002720:	f000 fb21 	bl	8002d66 <ISM330DHCX_WriteReg>
 8002724:	4603      	mov	r3, r0
 8002726:	60fb      	str	r3, [r7, #12]
    if(ret != ISM330DHCX_Ok)
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	2b00      	cmp	r3, #0
 800272c:	d001      	beq.n	8002732 <ISM330DHCX_Reset+0x30>
    {
    	return ret;
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	e039      	b.n	80027a6 <ISM330DHCX_Reset+0xa4>
    }

    buffer = 0;
 8002732:	2300      	movs	r3, #0
 8002734:	72fb      	strb	r3, [r7, #11]
    ret = ISM330DHCX_WriteReg(&Handle->Context, ISM330DHCX_REG_CTRL2_G, &buffer, 1);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	f103 001c 	add.w	r0, r3, #28
 800273c:	f107 020b 	add.w	r2, r7, #11
 8002740:	2301      	movs	r3, #1
 8002742:	2111      	movs	r1, #17
 8002744:	f000 fb0f 	bl	8002d66 <ISM330DHCX_WriteReg>
 8002748:	4603      	mov	r3, r0
 800274a:	60fb      	str	r3, [r7, #12]
    if(ret != ISM330DHCX_Ok)
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	2b00      	cmp	r3, #0
 8002750:	d001      	beq.n	8002756 <ISM330DHCX_Reset+0x54>
    {
    	return ret;
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	e027      	b.n	80027a6 <ISM330DHCX_Reset+0xa4>
    }
	//Set SW Reset bit in CTRL3
    buffer = ISM330DHCX_ResetSignal;
 8002756:	2301      	movs	r3, #1
 8002758:	72fb      	strb	r3, [r7, #11]
    ret = ISM330DHCX_WriteReg(&Handle->Context, ISM330DHCX_REG_CTRL3_C, &buffer, 1);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	f103 001c 	add.w	r0, r3, #28
 8002760:	f107 020b 	add.w	r2, r7, #11
 8002764:	2301      	movs	r3, #1
 8002766:	2112      	movs	r1, #18
 8002768:	f000 fafd 	bl	8002d66 <ISM330DHCX_WriteReg>
 800276c:	4603      	mov	r3, r0
 800276e:	60fb      	str	r3, [r7, #12]
    if(ret != ISM330DHCX_Ok)
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	2b00      	cmp	r3, #0
 8002774:	d011      	beq.n	800279a <ISM330DHCX_Reset+0x98>
    {
    	return ret;
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	e015      	b.n	80027a6 <ISM330DHCX_Reset+0xa4>
    }
	//Poll SW Reset bit
    while(buffer & ISM330DHCX_ResetSignal)
    {
        ret = ISM330DHCX_ReadReg(&Handle->Context, ISM330DHCX_REG_CTRL3_C, &buffer, 1);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	f103 001c 	add.w	r0, r3, #28
 8002780:	f107 020b 	add.w	r2, r7, #11
 8002784:	2301      	movs	r3, #1
 8002786:	2112      	movs	r1, #18
 8002788:	f000 fac4 	bl	8002d14 <ISM330DHCX_ReadReg>
 800278c:	4603      	mov	r3, r0
 800278e:	60fb      	str	r3, [r7, #12]
        if(ret != ISM330DHCX_Ok)
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	2b00      	cmp	r3, #0
 8002794:	d001      	beq.n	800279a <ISM330DHCX_Reset+0x98>
        {
        	return ret;
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	e005      	b.n	80027a6 <ISM330DHCX_Reset+0xa4>
    while(buffer & ISM330DHCX_ResetSignal)
 800279a:	7afb      	ldrb	r3, [r7, #11]
 800279c:	f003 0301 	and.w	r3, r3, #1
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d1ea      	bne.n	800277a <ISM330DHCX_Reset+0x78>
        }
    }
    return ISM330DHCX_Ok;
 80027a4:	2300      	movs	r3, #0
}
 80027a6:	4618      	mov	r0, r3
 80027a8:	3710      	adds	r7, #16
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bd80      	pop	{r7, pc}

080027ae <ISM330DHCX_ReadWrapper>:

static int32_t ISM330DHCX_ReadWrapper(void *Handle, uint8_t Reg, uint8_t *Buffer, uint8_t Length)
{
 80027ae:	b580      	push	{r7, lr}
 80027b0:	b086      	sub	sp, #24
 80027b2:	af00      	add	r7, sp, #0
 80027b4:	60f8      	str	r0, [r7, #12]
 80027b6:	607a      	str	r2, [r7, #4]
 80027b8:	461a      	mov	r2, r3
 80027ba:	460b      	mov	r3, r1
 80027bc:	72fb      	strb	r3, [r7, #11]
 80027be:	4613      	mov	r3, r2
 80027c0:	72bb      	strb	r3, [r7, #10]
    ISM330DHCX_Handle_t *DevicePtr = (ISM330DHCX_Handle_t*)Handle;
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	617b      	str	r3, [r7, #20]
    if(DevicePtr->IO.Read != NULL)
 80027c6:	697b      	ldr	r3, [r7, #20]
 80027c8:	689b      	ldr	r3, [r3, #8]
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d007      	beq.n	80027de <ISM330DHCX_ReadWrapper+0x30>
    {
        return DevicePtr->IO.Read(Reg,Buffer,Length);
 80027ce:	697b      	ldr	r3, [r7, #20]
 80027d0:	689b      	ldr	r3, [r3, #8]
 80027d2:	7aba      	ldrb	r2, [r7, #10]
 80027d4:	7af8      	ldrb	r0, [r7, #11]
 80027d6:	6879      	ldr	r1, [r7, #4]
 80027d8:	4798      	blx	r3
 80027da:	4603      	mov	r3, r0
 80027dc:	e001      	b.n	80027e2 <ISM330DHCX_ReadWrapper+0x34>
    }
    return ISM330DHCX_ReadRegErr;
 80027de:	f06f 0301 	mvn.w	r3, #1
}
 80027e2:	4618      	mov	r0, r3
 80027e4:	3718      	adds	r7, #24
 80027e6:	46bd      	mov	sp, r7
 80027e8:	bd80      	pop	{r7, pc}

080027ea <ISM330DHCX_WriteWrapper>:

static int32_t ISM330DHCX_WriteWrapper(void *Handle, uint8_t Reg, uint8_t *Buffer, uint8_t Length)
{
 80027ea:	b580      	push	{r7, lr}
 80027ec:	b086      	sub	sp, #24
 80027ee:	af00      	add	r7, sp, #0
 80027f0:	60f8      	str	r0, [r7, #12]
 80027f2:	607a      	str	r2, [r7, #4]
 80027f4:	461a      	mov	r2, r3
 80027f6:	460b      	mov	r3, r1
 80027f8:	72fb      	strb	r3, [r7, #11]
 80027fa:	4613      	mov	r3, r2
 80027fc:	72bb      	strb	r3, [r7, #10]
    ISM330DHCX_Handle_t *DevicePtr = (ISM330DHCX_Handle_t*)Handle;
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	617b      	str	r3, [r7, #20]
    if(DevicePtr->IO.Write != NULL)
 8002802:	697b      	ldr	r3, [r7, #20]
 8002804:	68db      	ldr	r3, [r3, #12]
 8002806:	2b00      	cmp	r3, #0
 8002808:	d007      	beq.n	800281a <ISM330DHCX_WriteWrapper+0x30>
    {
        return DevicePtr->IO.Write(Reg,Buffer,Length);
 800280a:	697b      	ldr	r3, [r7, #20]
 800280c:	68db      	ldr	r3, [r3, #12]
 800280e:	7aba      	ldrb	r2, [r7, #10]
 8002810:	7af8      	ldrb	r0, [r7, #11]
 8002812:	6879      	ldr	r1, [r7, #4]
 8002814:	4798      	blx	r3
 8002816:	4603      	mov	r3, r0
 8002818:	e001      	b.n	800281e <ISM330DHCX_WriteWrapper+0x34>
    }
    return ISM330DHCX_ReadRegErr;
 800281a:	f06f 0301 	mvn.w	r3, #1
}
 800281e:	4618      	mov	r0, r3
 8002820:	3718      	adds	r7, #24
 8002822:	46bd      	mov	sp, r7
 8002824:	bd80      	pop	{r7, pc}

08002826 <ISM330DHCX_RegisterInit>:

static int32_t ISM330DHCX_RegisterInit(ISM330DHCX_Handle_t *Handle,ISM330DHCX_Init_Struct_t Settings)
{
 8002826:	b084      	sub	sp, #16
 8002828:	b580      	push	{r7, lr}
 800282a:	b086      	sub	sp, #24
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
 8002830:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8002834:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    int32_t ret = ISM330DHCX_Ok;
 8002838:	2300      	movs	r3, #0
 800283a:	617b      	str	r3, [r7, #20]
    uint8_t buffer[12] = {0};
 800283c:	2300      	movs	r3, #0
 800283e:	60bb      	str	r3, [r7, #8]
 8002840:	f107 030c 	add.w	r3, r7, #12
 8002844:	2200      	movs	r2, #0
 8002846:	601a      	str	r2, [r3, #0]
 8002848:	605a      	str	r2, [r3, #4]
    ISM330DHCX_Reboot(Handle);
 800284a:	6878      	ldr	r0, [r7, #4]
 800284c:	f7ff ff04 	bl	8002658 <ISM330DHCX_Reboot>
    ISM330DHCX_Reset(Handle);
 8002850:	6878      	ldr	r0, [r7, #4]
 8002852:	f7ff ff56 	bl	8002702 <ISM330DHCX_Reset>

    buffer[0] = Settings.SDO_PU_EN | 0x3F;
 8002856:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800285a:	f043 033f 	orr.w	r3, r3, #63	; 0x3f
 800285e:	b2db      	uxtb	r3, r3
 8002860:	723b      	strb	r3, [r7, #8]
    ret = ISM330DHCX_WriteReg(&Handle->Context, ISM330DHCX_REG_PIN_CTRL, buffer, 1);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	f103 001c 	add.w	r0, r3, #28
 8002868:	f107 0208 	add.w	r2, r7, #8
 800286c:	2301      	movs	r3, #1
 800286e:	2102      	movs	r1, #2
 8002870:	f000 fa79 	bl	8002d66 <ISM330DHCX_WriteReg>
 8002874:	6178      	str	r0, [r7, #20]
    if(ret != ISM330DHCX_Ok)
 8002876:	697b      	ldr	r3, [r7, #20]
 8002878:	2b00      	cmp	r3, #0
 800287a:	d001      	beq.n	8002880 <ISM330DHCX_RegisterInit+0x5a>
    {
    	return ret;
 800287c:	697b      	ldr	r3, [r7, #20]
 800287e:	e1b1      	b.n	8002be4 <ISM330DHCX_RegisterInit+0x3be>
    }


    buffer[0] = Settings.WTM & 0x00FF; //WTM Threshold is a 9 bit number
 8002880:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8002882:	b2db      	uxtb	r3, r3
 8002884:	723b      	strb	r3, [r7, #8]
    ret = ISM330DHCX_WriteReg(&Handle->Context, ISM330DHCX_REG_FIFO_CTRL1, buffer, 1);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	f103 001c 	add.w	r0, r3, #28
 800288c:	f107 0208 	add.w	r2, r7, #8
 8002890:	2301      	movs	r3, #1
 8002892:	2107      	movs	r1, #7
 8002894:	f000 fa67 	bl	8002d66 <ISM330DHCX_WriteReg>
 8002898:	6178      	str	r0, [r7, #20]
    if(ret != ISM330DHCX_Ok)
 800289a:	697b      	ldr	r3, [r7, #20]
 800289c:	2b00      	cmp	r3, #0
 800289e:	d001      	beq.n	80028a4 <ISM330DHCX_RegisterInit+0x7e>
    {
    	return ret;
 80028a0:	697b      	ldr	r3, [r7, #20]
 80028a2:	e19f      	b.n	8002be4 <ISM330DHCX_RegisterInit+0x3be>
    }


    if(Settings.WTM > 0x00FF)
 80028a4:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80028a6:	2bff      	cmp	r3, #255	; 0xff
 80028a8:	d906      	bls.n	80028b8 <ISM330DHCX_RegisterInit+0x92>
    {
    	buffer[0] = Settings.STOP_ON_WTM | 0x01;
 80028aa:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80028ae:	f043 0301 	orr.w	r3, r3, #1
 80028b2:	b2db      	uxtb	r3, r3
 80028b4:	723b      	strb	r3, [r7, #8]
 80028b6:	e002      	b.n	80028be <ISM330DHCX_RegisterInit+0x98>
    } else
    {
    	buffer[0] = Settings.STOP_ON_WTM;
 80028b8:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80028bc:	723b      	strb	r3, [r7, #8]
    }
    ret = ISM330DHCX_WriteReg(&Handle->Context, ISM330DHCX_REG_FIFO_CTRL2, buffer, 1);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	f103 001c 	add.w	r0, r3, #28
 80028c4:	f107 0208 	add.w	r2, r7, #8
 80028c8:	2301      	movs	r3, #1
 80028ca:	2108      	movs	r1, #8
 80028cc:	f000 fa4b 	bl	8002d66 <ISM330DHCX_WriteReg>
 80028d0:	6178      	str	r0, [r7, #20]
    if(ret != ISM330DHCX_Ok)
 80028d2:	697b      	ldr	r3, [r7, #20]
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d001      	beq.n	80028dc <ISM330DHCX_RegisterInit+0xb6>
    {
    	return ret;
 80028d8:	697b      	ldr	r3, [r7, #20]
 80028da:	e183      	b.n	8002be4 <ISM330DHCX_RegisterInit+0x3be>
    }


    buffer[0] = Settings.BDR_GY | Settings.BDR_XL;
 80028dc:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 80028e0:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80028e4:	4313      	orrs	r3, r2
 80028e6:	b2db      	uxtb	r3, r3
 80028e8:	723b      	strb	r3, [r7, #8]
    ret = ISM330DHCX_WriteReg(&Handle->Context, ISM330DHCX_REG_FIFO_CTRL3, buffer, 1);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	f103 001c 	add.w	r0, r3, #28
 80028f0:	f107 0208 	add.w	r2, r7, #8
 80028f4:	2301      	movs	r3, #1
 80028f6:	2109      	movs	r1, #9
 80028f8:	f000 fa35 	bl	8002d66 <ISM330DHCX_WriteReg>
 80028fc:	6178      	str	r0, [r7, #20]
    if(ret != ISM330DHCX_Ok)
 80028fe:	697b      	ldr	r3, [r7, #20]
 8002900:	2b00      	cmp	r3, #0
 8002902:	d001      	beq.n	8002908 <ISM330DHCX_RegisterInit+0xe2>
    {
    	return ret;
 8002904:	697b      	ldr	r3, [r7, #20]
 8002906:	e16d      	b.n	8002be4 <ISM330DHCX_RegisterInit+0x3be>
    }


    buffer[0] = Settings.DEC_TS_BATCH | Settings.ODR_T_BATCH | Settings.FIFO_MODE;
 8002908:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 800290c:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8002910:	4313      	orrs	r3, r2
 8002912:	b2da      	uxtb	r2, r3
 8002914:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8002918:	4313      	orrs	r3, r2
 800291a:	b2db      	uxtb	r3, r3
 800291c:	723b      	strb	r3, [r7, #8]
    ret = ISM330DHCX_WriteReg(&Handle->Context, ISM330DHCX_REG_FIFO_CTRL4, buffer, 1);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	f103 001c 	add.w	r0, r3, #28
 8002924:	f107 0208 	add.w	r2, r7, #8
 8002928:	2301      	movs	r3, #1
 800292a:	210a      	movs	r1, #10
 800292c:	f000 fa1b 	bl	8002d66 <ISM330DHCX_WriteReg>
 8002930:	6178      	str	r0, [r7, #20]
    if(ret != ISM330DHCX_Ok)
 8002932:	697b      	ldr	r3, [r7, #20]
 8002934:	2b00      	cmp	r3, #0
 8002936:	d001      	beq.n	800293c <ISM330DHCX_RegisterInit+0x116>
    {
    	return ret;
 8002938:	697b      	ldr	r3, [r7, #20]
 800293a:	e153      	b.n	8002be4 <ISM330DHCX_RegisterInit+0x3be>
    }


    buffer[0] = Settings.CNT_BDR_TH & 0x00FF;
 800293c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800293e:	b2db      	uxtb	r3, r3
 8002940:	723b      	strb	r3, [r7, #8]
    ret = ISM330DHCX_WriteReg(&Handle->Context, ISM330DHCX_REG_COUNTER_BDR_REG2, buffer, 1);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	f103 001c 	add.w	r0, r3, #28
 8002948:	f107 0208 	add.w	r2, r7, #8
 800294c:	2301      	movs	r3, #1
 800294e:	210c      	movs	r1, #12
 8002950:	f000 fa09 	bl	8002d66 <ISM330DHCX_WriteReg>
 8002954:	6178      	str	r0, [r7, #20]
    if(ret != ISM330DHCX_Ok)
 8002956:	697b      	ldr	r3, [r7, #20]
 8002958:	2b00      	cmp	r3, #0
 800295a:	d001      	beq.n	8002960 <ISM330DHCX_RegisterInit+0x13a>
    {
    	return ret;
 800295c:	697b      	ldr	r3, [r7, #20]
 800295e:	e141      	b.n	8002be4 <ISM330DHCX_RegisterInit+0x3be>
    }


    buffer[0] = ((Settings.CNT_BDR_TH & 0x0700) >> 8) | Settings.dataready_pulsed | Settings.TRIG_COUNTER_BDR;
 8002960:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8002962:	121b      	asrs	r3, r3, #8
 8002964:	b25b      	sxtb	r3, r3
 8002966:	f003 0307 	and.w	r3, r3, #7
 800296a:	b25a      	sxtb	r2, r3
 800296c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002970:	b25b      	sxtb	r3, r3
 8002972:	4313      	orrs	r3, r2
 8002974:	b25a      	sxtb	r2, r3
 8002976:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800297a:	b25b      	sxtb	r3, r3
 800297c:	4313      	orrs	r3, r2
 800297e:	b25b      	sxtb	r3, r3
 8002980:	b2db      	uxtb	r3, r3
 8002982:	723b      	strb	r3, [r7, #8]
    ret = ISM330DHCX_WriteReg(&Handle->Context, ISM330DHCX_REG_COUNTER_BDR_REG1, buffer, 1);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	f103 001c 	add.w	r0, r3, #28
 800298a:	f107 0208 	add.w	r2, r7, #8
 800298e:	2301      	movs	r3, #1
 8002990:	210b      	movs	r1, #11
 8002992:	f000 f9e8 	bl	8002d66 <ISM330DHCX_WriteReg>
 8002996:	6178      	str	r0, [r7, #20]
    if(ret != ISM330DHCX_Ok)
 8002998:	697b      	ldr	r3, [r7, #20]
 800299a:	2b00      	cmp	r3, #0
 800299c:	d001      	beq.n	80029a2 <ISM330DHCX_RegisterInit+0x17c>
    {
    	return ret;
 800299e:	697b      	ldr	r3, [r7, #20]
 80029a0:	e120      	b.n	8002be4 <ISM330DHCX_RegisterInit+0x3be>
    }


    buffer[0] = Settings.INT1_CTRL;
 80029a2:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 80029a6:	723b      	strb	r3, [r7, #8]
    ret = ISM330DHCX_WriteReg(&Handle->Context, ISM330DHCX_REG_INT1_CTRL, buffer, 1);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	f103 001c 	add.w	r0, r3, #28
 80029ae:	f107 0208 	add.w	r2, r7, #8
 80029b2:	2301      	movs	r3, #1
 80029b4:	210d      	movs	r1, #13
 80029b6:	f000 f9d6 	bl	8002d66 <ISM330DHCX_WriteReg>
 80029ba:	6178      	str	r0, [r7, #20]
    if(ret != ISM330DHCX_Ok)
 80029bc:	697b      	ldr	r3, [r7, #20]
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d001      	beq.n	80029c6 <ISM330DHCX_RegisterInit+0x1a0>
    {
    	return ret;
 80029c2:	697b      	ldr	r3, [r7, #20]
 80029c4:	e10e      	b.n	8002be4 <ISM330DHCX_RegisterInit+0x3be>
    }


    buffer[0] = Settings.INT2_CTRL;
 80029c6:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 80029ca:	723b      	strb	r3, [r7, #8]
    ret = ISM330DHCX_WriteReg(&Handle->Context, ISM330DHCX_REG_INT2_CTRL, buffer, 1);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	f103 001c 	add.w	r0, r3, #28
 80029d2:	f107 0208 	add.w	r2, r7, #8
 80029d6:	2301      	movs	r3, #1
 80029d8:	210e      	movs	r1, #14
 80029da:	f000 f9c4 	bl	8002d66 <ISM330DHCX_WriteReg>
 80029de:	6178      	str	r0, [r7, #20]
    if(ret != ISM330DHCX_Ok)
 80029e0:	697b      	ldr	r3, [r7, #20]
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d001      	beq.n	80029ea <ISM330DHCX_RegisterInit+0x1c4>
    {
    	return ret;
 80029e6:	697b      	ldr	r3, [r7, #20]
 80029e8:	e0fc      	b.n	8002be4 <ISM330DHCX_RegisterInit+0x3be>
    }


    buffer[0] = 0x40 | Settings.PP_OD | Settings.H_LACTIVE | Settings.SIM | Settings.IF_INC;
 80029ea:	f897 2052 	ldrb.w	r2, [r7, #82]	; 0x52
 80029ee:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
 80029f2:	4313      	orrs	r3, r2
 80029f4:	b2da      	uxtb	r2, r3
 80029f6:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80029fa:	4313      	orrs	r3, r2
 80029fc:	b2da      	uxtb	r2, r3
 80029fe:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002a02:	4313      	orrs	r3, r2
 8002a04:	b2db      	uxtb	r3, r3
 8002a06:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002a0a:	b2db      	uxtb	r3, r3
 8002a0c:	723b      	strb	r3, [r7, #8]
    ret = ISM330DHCX_WriteReg(&Handle->Context, ISM330DHCX_REG_CTRL3_C, buffer, 1);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	f103 001c 	add.w	r0, r3, #28
 8002a14:	f107 0208 	add.w	r2, r7, #8
 8002a18:	2301      	movs	r3, #1
 8002a1a:	2112      	movs	r1, #18
 8002a1c:	f000 f9a3 	bl	8002d66 <ISM330DHCX_WriteReg>
 8002a20:	6178      	str	r0, [r7, #20]
    if(ret != ISM330DHCX_Ok)
 8002a22:	697b      	ldr	r3, [r7, #20]
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d001      	beq.n	8002a2c <ISM330DHCX_RegisterInit+0x206>
    {
    	return ret;
 8002a28:	697b      	ldr	r3, [r7, #20]
 8002a2a:	e0db      	b.n	8002be4 <ISM330DHCX_RegisterInit+0x3be>
    }


    buffer[0] = Settings.TriggerMode | Settings.XL_HM_MODE | Settings.USR_OFF_W | Settings.FTYPE;
 8002a2c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8002a30:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8002a34:	4313      	orrs	r3, r2
 8002a36:	b2da      	uxtb	r2, r3
 8002a38:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 8002a3c:	4313      	orrs	r3, r2
 8002a3e:	b2da      	uxtb	r2, r3
 8002a40:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8002a44:	4313      	orrs	r3, r2
 8002a46:	b2db      	uxtb	r3, r3
 8002a48:	723b      	strb	r3, [r7, #8]
    ret = ISM330DHCX_WriteReg(&Handle->Context, ISM330DHCX_REG_CTRL6_C, buffer, 1);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	f103 001c 	add.w	r0, r3, #28
 8002a50:	f107 0208 	add.w	r2, r7, #8
 8002a54:	2301      	movs	r3, #1
 8002a56:	2115      	movs	r1, #21
 8002a58:	f000 f985 	bl	8002d66 <ISM330DHCX_WriteReg>
 8002a5c:	6178      	str	r0, [r7, #20]
    if(ret != ISM330DHCX_Ok)
 8002a5e:	697b      	ldr	r3, [r7, #20]
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d001      	beq.n	8002a68 <ISM330DHCX_RegisterInit+0x242>
    {
    	return ret;
 8002a64:	697b      	ldr	r3, [r7, #20]
 8002a66:	e0bd      	b.n	8002be4 <ISM330DHCX_RegisterInit+0x3be>
    }


    buffer[0] = Settings.G_HM_MODE | Settings.HP_EN_G | Settings.HPM_G | Settings.USR_OFF_ON_OUT;
 8002a68:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 8002a6c:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8002a70:	4313      	orrs	r3, r2
 8002a72:	b2da      	uxtb	r2, r3
 8002a74:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8002a78:	4313      	orrs	r3, r2
 8002a7a:	b2da      	uxtb	r2, r3
 8002a7c:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 8002a80:	4313      	orrs	r3, r2
 8002a82:	b2db      	uxtb	r3, r3
 8002a84:	723b      	strb	r3, [r7, #8]
    ret = ISM330DHCX_WriteReg(&Handle->Context, ISM330DHCX_REG_CTRL7_G, buffer, 1);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	f103 001c 	add.w	r0, r3, #28
 8002a8c:	f107 0208 	add.w	r2, r7, #8
 8002a90:	2301      	movs	r3, #1
 8002a92:	2116      	movs	r1, #22
 8002a94:	f000 f967 	bl	8002d66 <ISM330DHCX_WriteReg>
 8002a98:	6178      	str	r0, [r7, #20]
    if(ret != ISM330DHCX_Ok)
 8002a9a:	697b      	ldr	r3, [r7, #20]
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d001      	beq.n	8002aa4 <ISM330DHCX_RegisterInit+0x27e>
    {
    	return ret;
 8002aa0:	697b      	ldr	r3, [r7, #20]
 8002aa2:	e09f      	b.n	8002be4 <ISM330DHCX_RegisterInit+0x3be>
    }


    buffer[0] = Settings.HPCF_XL | Settings.HP_REF_MODE_XL | Settings.FASTSETTL_MODE_XL | Settings.HP_SLOPE_XL_EN;
 8002aa4:	f897 2040 	ldrb.w	r2, [r7, #64]	; 0x40
 8002aa8:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8002aac:	4313      	orrs	r3, r2
 8002aae:	b2da      	uxtb	r2, r3
 8002ab0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002ab4:	4313      	orrs	r3, r2
 8002ab6:	b2da      	uxtb	r2, r3
 8002ab8:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8002abc:	4313      	orrs	r3, r2
 8002abe:	b2db      	uxtb	r3, r3
 8002ac0:	723b      	strb	r3, [r7, #8]
    ret = ISM330DHCX_WriteReg(&Handle->Context, ISM330DHCX_REG_CTRL8_XL, buffer, 1);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	f103 001c 	add.w	r0, r3, #28
 8002ac8:	f107 0208 	add.w	r2, r7, #8
 8002acc:	2301      	movs	r3, #1
 8002ace:	2117      	movs	r1, #23
 8002ad0:	f000 f949 	bl	8002d66 <ISM330DHCX_WriteReg>
 8002ad4:	6178      	str	r0, [r7, #20]
    if(ret != ISM330DHCX_Ok)
 8002ad6:	697b      	ldr	r3, [r7, #20]
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d001      	beq.n	8002ae0 <ISM330DHCX_RegisterInit+0x2ba>
    {
    	return ret;
 8002adc:	697b      	ldr	r3, [r7, #20]
 8002ade:	e081      	b.n	8002be4 <ISM330DHCX_RegisterInit+0x3be>
    }


    buffer[0] = Settings.DEN_X | Settings.DEN_Y | Settings.DEN_Z | Settings.DEN_XL_G | Settings.DEN_XL_EN | Settings.DEN_LH;
 8002ae0:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8002ae4:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8002ae8:	4313      	orrs	r3, r2
 8002aea:	b2da      	uxtb	r2, r3
 8002aec:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8002af0:	4313      	orrs	r3, r2
 8002af2:	b2da      	uxtb	r2, r3
 8002af4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002af8:	4313      	orrs	r3, r2
 8002afa:	b2da      	uxtb	r2, r3
 8002afc:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002b00:	4313      	orrs	r3, r2
 8002b02:	b2da      	uxtb	r2, r3
 8002b04:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002b08:	4313      	orrs	r3, r2
 8002b0a:	b2db      	uxtb	r3, r3
 8002b0c:	723b      	strb	r3, [r7, #8]
    ret = ISM330DHCX_WriteReg(&Handle->Context, ISM330DHCX_REG_CTRL9_XL, buffer, 1);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	f103 001c 	add.w	r0, r3, #28
 8002b14:	f107 0208 	add.w	r2, r7, #8
 8002b18:	2301      	movs	r3, #1
 8002b1a:	2118      	movs	r1, #24
 8002b1c:	f000 f923 	bl	8002d66 <ISM330DHCX_WriteReg>
 8002b20:	6178      	str	r0, [r7, #20]
    if(ret != ISM330DHCX_Ok)
 8002b22:	697b      	ldr	r3, [r7, #20]
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d001      	beq.n	8002b2c <ISM330DHCX_RegisterInit+0x306>
    {
    	return ret;
 8002b28:	697b      	ldr	r3, [r7, #20]
 8002b2a:	e05b      	b.n	8002be4 <ISM330DHCX_RegisterInit+0x3be>
    }


    buffer[0] = Settings.TIMESTAMP_EN;
 8002b2c:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8002b30:	723b      	strb	r3, [r7, #8]
    ret = ISM330DHCX_WriteReg(&Handle->Context, ISM330DHCX_REG_CTRL10_C, buffer, 1);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	f103 001c 	add.w	r0, r3, #28
 8002b38:	f107 0208 	add.w	r2, r7, #8
 8002b3c:	2301      	movs	r3, #1
 8002b3e:	2119      	movs	r1, #25
 8002b40:	f000 f911 	bl	8002d66 <ISM330DHCX_WriteReg>
 8002b44:	6178      	str	r0, [r7, #20]
    if(ret != ISM330DHCX_Ok)
 8002b46:	697b      	ldr	r3, [r7, #20]
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d001      	beq.n	8002b50 <ISM330DHCX_RegisterInit+0x32a>
    {
    	return ret;
 8002b4c:	697b      	ldr	r3, [r7, #20]
 8002b4e:	e049      	b.n	8002be4 <ISM330DHCX_RegisterInit+0x3be>
    }


    buffer[0] = Settings.ODR_XL | Settings.FS_XL | Settings.LPF2_XL_EN;
 8002b50:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 8002b54:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8002b58:	4313      	orrs	r3, r2
 8002b5a:	b2da      	uxtb	r2, r3
 8002b5c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002b60:	4313      	orrs	r3, r2
 8002b62:	b2db      	uxtb	r3, r3
 8002b64:	723b      	strb	r3, [r7, #8]
    ret = ISM330DHCX_WriteReg(&Handle->Context, ISM330DHCX_REG_CTRL1_XL, buffer, 1);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	f103 001c 	add.w	r0, r3, #28
 8002b6c:	f107 0208 	add.w	r2, r7, #8
 8002b70:	2301      	movs	r3, #1
 8002b72:	2110      	movs	r1, #16
 8002b74:	f000 f8f7 	bl	8002d66 <ISM330DHCX_WriteReg>
 8002b78:	6178      	str	r0, [r7, #20]
    if(ret != ISM330DHCX_Ok)
 8002b7a:	697b      	ldr	r3, [r7, #20]
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d001      	beq.n	8002b84 <ISM330DHCX_RegisterInit+0x35e>
    {
    	return ret;
 8002b80:	697b      	ldr	r3, [r7, #20]
 8002b82:	e02f      	b.n	8002be4 <ISM330DHCX_RegisterInit+0x3be>
    }


    buffer[0] = Settings.ODR_G | Settings.FS_G;
 8002b84:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 8002b88:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8002b8c:	4313      	orrs	r3, r2
 8002b8e:	b2db      	uxtb	r3, r3
 8002b90:	723b      	strb	r3, [r7, #8]
    ret = ISM330DHCX_WriteReg(&Handle->Context, ISM330DHCX_REG_CTRL2_G, buffer, 1);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	f103 001c 	add.w	r0, r3, #28
 8002b98:	f107 0208 	add.w	r2, r7, #8
 8002b9c:	2301      	movs	r3, #1
 8002b9e:	2111      	movs	r1, #17
 8002ba0:	f000 f8e1 	bl	8002d66 <ISM330DHCX_WriteReg>
 8002ba4:	6178      	str	r0, [r7, #20]
    if(ret != ISM330DHCX_Ok)
 8002ba6:	697b      	ldr	r3, [r7, #20]
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d001      	beq.n	8002bb0 <ISM330DHCX_RegisterInit+0x38a>
    {
    	return ret;
 8002bac:	697b      	ldr	r3, [r7, #20]
 8002bae:	e019      	b.n	8002be4 <ISM330DHCX_RegisterInit+0x3be>
    }

    ret = ISM330DHCX_ReadReg(&Handle->Context, ISM330DHCX_REG_OUTX_L_G, buffer, 1);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	f103 001c 	add.w	r0, r3, #28
 8002bb6:	f107 0208 	add.w	r2, r7, #8
 8002bba:	2301      	movs	r3, #1
 8002bbc:	2122      	movs	r1, #34	; 0x22
 8002bbe:	f000 f8a9 	bl	8002d14 <ISM330DHCX_ReadReg>
 8002bc2:	6178      	str	r0, [r7, #20]
    //Discard Data that was collected during configuration
    ret = ISM330DHCX_ReadReg(&Handle->Context, ISM330DHCX_REG_OUTX_L_G, buffer, 12);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	f103 001c 	add.w	r0, r3, #28
 8002bca:	f107 0208 	add.w	r2, r7, #8
 8002bce:	230c      	movs	r3, #12
 8002bd0:	2122      	movs	r1, #34	; 0x22
 8002bd2:	f000 f89f 	bl	8002d14 <ISM330DHCX_ReadReg>
 8002bd6:	6178      	str	r0, [r7, #20]
    if(ret != ISM330DHCX_Ok)
 8002bd8:	697b      	ldr	r3, [r7, #20]
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d001      	beq.n	8002be2 <ISM330DHCX_RegisterInit+0x3bc>
    {
    	return ret;
 8002bde:	697b      	ldr	r3, [r7, #20]
 8002be0:	e000      	b.n	8002be4 <ISM330DHCX_RegisterInit+0x3be>
    }

    return ISM330DHCX_Ok;
 8002be2:	2300      	movs	r3, #0
}
 8002be4:	4618      	mov	r0, r3
 8002be6:	3718      	adds	r7, #24
 8002be8:	46bd      	mov	sp, r7
 8002bea:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002bee:	b004      	add	sp, #16
 8002bf0:	4770      	bx	lr
	...

08002bf4 <ConvertXLData>:

static void ConvertXLData(ISM330DHCX_AccelFullscale_t AccelResolution, int16_t *buffer, float *data)
{
 8002bf4:	b480      	push	{r7}
 8002bf6:	b087      	sub	sp, #28
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	4603      	mov	r3, r0
 8002bfc:	60b9      	str	r1, [r7, #8]
 8002bfe:	607a      	str	r2, [r7, #4]
 8002c00:	73fb      	strb	r3, [r7, #15]
      float ConversionFactor = 0;
 8002c02:	f04f 0300 	mov.w	r3, #0
 8002c06:	617b      	str	r3, [r7, #20]
      if(AccelResolution == ISM330DHCX_XL_2g)
 8002c08:	7bfb      	ldrb	r3, [r7, #15]
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d102      	bne.n	8002c14 <ConvertXLData+0x20>
      {
    	  ConversionFactor = 0.061;
 8002c0e:	4b14      	ldr	r3, [pc, #80]	; (8002c60 <ConvertXLData+0x6c>)
 8002c10:	617b      	str	r3, [r7, #20]
 8002c12:	e00d      	b.n	8002c30 <ConvertXLData+0x3c>
      }else if(AccelResolution == ISM330DHCX_XL_16g)
 8002c14:	7bfb      	ldrb	r3, [r7, #15]
 8002c16:	2b04      	cmp	r3, #4
 8002c18:	d102      	bne.n	8002c20 <ConvertXLData+0x2c>
	  {
    	  ConversionFactor = 0.488;
 8002c1a:	4b12      	ldr	r3, [pc, #72]	; (8002c64 <ConvertXLData+0x70>)
 8002c1c:	617b      	str	r3, [r7, #20]
 8002c1e:	e007      	b.n	8002c30 <ConvertXLData+0x3c>
	  }else if(AccelResolution == ISM330DHCX_XL_8g)
 8002c20:	7bfb      	ldrb	r3, [r7, #15]
 8002c22:	2b0c      	cmp	r3, #12
 8002c24:	d102      	bne.n	8002c2c <ConvertXLData+0x38>
	  {
		  ConversionFactor = 0.244;
 8002c26:	4b10      	ldr	r3, [pc, #64]	; (8002c68 <ConvertXLData+0x74>)
 8002c28:	617b      	str	r3, [r7, #20]
 8002c2a:	e001      	b.n	8002c30 <ConvertXLData+0x3c>
	  }else //4g
	  {
		  ConversionFactor = 0.122;
 8002c2c:	4b0f      	ldr	r3, [pc, #60]	; (8002c6c <ConvertXLData+0x78>)
 8002c2e:	617b      	str	r3, [r7, #20]
	  }
      *data = (ConversionFactor * (*buffer)) / 1000.0; //Div by 1000 to convert g, not mg
 8002c30:	68bb      	ldr	r3, [r7, #8]
 8002c32:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002c36:	ee07 3a90 	vmov	s15, r3
 8002c3a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002c3e:	edd7 7a05 	vldr	s15, [r7, #20]
 8002c42:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002c46:	eddf 6a0a 	vldr	s13, [pc, #40]	; 8002c70 <ConvertXLData+0x7c>
 8002c4a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	edc3 7a00 	vstr	s15, [r3]
}
 8002c54:	bf00      	nop
 8002c56:	371c      	adds	r7, #28
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5e:	4770      	bx	lr
 8002c60:	3d79db23 	.word	0x3d79db23
 8002c64:	3ef9db23 	.word	0x3ef9db23
 8002c68:	3e79db23 	.word	0x3e79db23
 8002c6c:	3df9db23 	.word	0x3df9db23
 8002c70:	447a0000 	.word	0x447a0000

08002c74 <ConvertGData>:

static void ConvertGData(ISM330DHCX_GyroFullScale_t GyroResolution, int16_t *buffer, float *data)
{
 8002c74:	b480      	push	{r7}
 8002c76:	b087      	sub	sp, #28
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	4603      	mov	r3, r0
 8002c7c:	60b9      	str	r1, [r7, #8]
 8002c7e:	607a      	str	r2, [r7, #4]
 8002c80:	73fb      	strb	r3, [r7, #15]

      float ConversionFactor = 0;
 8002c82:	f04f 0300 	mov.w	r3, #0
 8002c86:	617b      	str	r3, [r7, #20]
      if(GyroResolution == ISM330DHCX_G_125DPS)
 8002c88:	7bfb      	ldrb	r3, [r7, #15]
 8002c8a:	2b02      	cmp	r3, #2
 8002c8c:	d102      	bne.n	8002c94 <ConvertGData+0x20>
      {
    	  ConversionFactor = 0.004375;
 8002c8e:	4b1a      	ldr	r3, [pc, #104]	; (8002cf8 <ConvertGData+0x84>)
 8002c90:	617b      	str	r3, [r7, #20]
 8002c92:	e019      	b.n	8002cc8 <ConvertGData+0x54>
      }else if(GyroResolution == ISM330DHCX_G_250DPS)
 8002c94:	7bfb      	ldrb	r3, [r7, #15]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d102      	bne.n	8002ca0 <ConvertGData+0x2c>
	  {
    	  ConversionFactor = 0.00875;
 8002c9a:	4b18      	ldr	r3, [pc, #96]	; (8002cfc <ConvertGData+0x88>)
 8002c9c:	617b      	str	r3, [r7, #20]
 8002c9e:	e013      	b.n	8002cc8 <ConvertGData+0x54>
	  }else if(GyroResolution == ISM330DHCX_G_500DPS)
 8002ca0:	7bfb      	ldrb	r3, [r7, #15]
 8002ca2:	2b04      	cmp	r3, #4
 8002ca4:	d102      	bne.n	8002cac <ConvertGData+0x38>
	  {
		  ConversionFactor = 0.0175;
 8002ca6:	4b16      	ldr	r3, [pc, #88]	; (8002d00 <ConvertGData+0x8c>)
 8002ca8:	617b      	str	r3, [r7, #20]
 8002caa:	e00d      	b.n	8002cc8 <ConvertGData+0x54>
	  }else if(GyroResolution == ISM330DHCX_G_1000DPS)
 8002cac:	7bfb      	ldrb	r3, [r7, #15]
 8002cae:	2b08      	cmp	r3, #8
 8002cb0:	d102      	bne.n	8002cb8 <ConvertGData+0x44>
	  {
		  ConversionFactor = 0.035;
 8002cb2:	4b14      	ldr	r3, [pc, #80]	; (8002d04 <ConvertGData+0x90>)
 8002cb4:	617b      	str	r3, [r7, #20]
 8002cb6:	e007      	b.n	8002cc8 <ConvertGData+0x54>
	  }else if(GyroResolution == ISM330DHCX_G_2000DPS)
 8002cb8:	7bfb      	ldrb	r3, [r7, #15]
 8002cba:	2b0c      	cmp	r3, #12
 8002cbc:	d102      	bne.n	8002cc4 <ConvertGData+0x50>
	  {
		  ConversionFactor = 0.070;
 8002cbe:	4b12      	ldr	r3, [pc, #72]	; (8002d08 <ConvertGData+0x94>)
 8002cc0:	617b      	str	r3, [r7, #20]
 8002cc2:	e001      	b.n	8002cc8 <ConvertGData+0x54>
	  }else //4000DPS
	  {
		  ConversionFactor = 0.140;
 8002cc4:	4b11      	ldr	r3, [pc, #68]	; (8002d0c <ConvertGData+0x98>)
 8002cc6:	617b      	str	r3, [r7, #20]
	  }
      *data = ConversionFactor * (*buffer) / 1000.0; //Div by 1000 to convert to DPS from mDPS
 8002cc8:	68bb      	ldr	r3, [r7, #8]
 8002cca:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002cce:	ee07 3a90 	vmov	s15, r3
 8002cd2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002cd6:	edd7 7a05 	vldr	s15, [r7, #20]
 8002cda:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002cde:	eddf 6a0c 	vldr	s13, [pc, #48]	; 8002d10 <ConvertGData+0x9c>
 8002ce2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	edc3 7a00 	vstr	s15, [r3]
}
 8002cec:	bf00      	nop
 8002cee:	371c      	adds	r7, #28
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf6:	4770      	bx	lr
 8002cf8:	3b8f5c29 	.word	0x3b8f5c29
 8002cfc:	3c0f5c29 	.word	0x3c0f5c29
 8002d00:	3c8f5c29 	.word	0x3c8f5c29
 8002d04:	3d0f5c29 	.word	0x3d0f5c29
 8002d08:	3d8f5c29 	.word	0x3d8f5c29
 8002d0c:	3e0f5c29 	.word	0x3e0f5c29
 8002d10:	447a0000 	.word	0x447a0000

08002d14 <ISM330DHCX_ReadReg>:
#include <stddef.h>

static int32_t ISM330DHCX_ValidateParams(uint8_t Reg, uint8_t *Buffer, uint8_t Length);

int32_t ISM330DHCX_ReadReg(ISM330DHCX_Context_t *Context, uint8_t Reg, uint8_t *Buffer, uint8_t Length)
{
 8002d14:	b590      	push	{r4, r7, lr}
 8002d16:	b087      	sub	sp, #28
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	60f8      	str	r0, [r7, #12]
 8002d1c:	607a      	str	r2, [r7, #4]
 8002d1e:	461a      	mov	r2, r3
 8002d20:	460b      	mov	r3, r1
 8002d22:	72fb      	strb	r3, [r7, #11]
 8002d24:	4613      	mov	r3, r2
 8002d26:	72bb      	strb	r3, [r7, #10]
	if(Context->Read == NULL)
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	689b      	ldr	r3, [r3, #8]
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d101      	bne.n	8002d34 <ISM330DHCX_ReadReg+0x20>
	{
		return ISM330DHCX_REG_CONTEXT_ERR;
 8002d30:	2308      	movs	r3, #8
 8002d32:	e014      	b.n	8002d5e <ISM330DHCX_ReadReg+0x4a>
	}

	int32_t ret = ISM330DHCX_ValidateParams(Reg,Buffer,Length);
 8002d34:	7aba      	ldrb	r2, [r7, #10]
 8002d36:	7afb      	ldrb	r3, [r7, #11]
 8002d38:	6879      	ldr	r1, [r7, #4]
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	f000 f83c 	bl	8002db8 <ISM330DHCX_ValidateParams>
 8002d40:	6178      	str	r0, [r7, #20]
	if(ret != ISM330DHCX_REG_NO_ERR)
 8002d42:	697b      	ldr	r3, [r7, #20]
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d001      	beq.n	8002d4c <ISM330DHCX_ReadReg+0x38>
	{
        return ret;
 8002d48:	697b      	ldr	r3, [r7, #20]
 8002d4a:	e008      	b.n	8002d5e <ISM330DHCX_ReadReg+0x4a>
	}

	return Context->Read(Context->Handle, Reg, Buffer, Length);
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	689c      	ldr	r4, [r3, #8]
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	6818      	ldr	r0, [r3, #0]
 8002d54:	7abb      	ldrb	r3, [r7, #10]
 8002d56:	7af9      	ldrb	r1, [r7, #11]
 8002d58:	687a      	ldr	r2, [r7, #4]
 8002d5a:	47a0      	blx	r4
 8002d5c:	4603      	mov	r3, r0
}
 8002d5e:	4618      	mov	r0, r3
 8002d60:	371c      	adds	r7, #28
 8002d62:	46bd      	mov	sp, r7
 8002d64:	bd90      	pop	{r4, r7, pc}

08002d66 <ISM330DHCX_WriteReg>:

int32_t ISM330DHCX_WriteReg(ISM330DHCX_Context_t *Context, uint8_t Reg, uint8_t *Buffer, uint8_t Length)
{
 8002d66:	b590      	push	{r4, r7, lr}
 8002d68:	b087      	sub	sp, #28
 8002d6a:	af00      	add	r7, sp, #0
 8002d6c:	60f8      	str	r0, [r7, #12]
 8002d6e:	607a      	str	r2, [r7, #4]
 8002d70:	461a      	mov	r2, r3
 8002d72:	460b      	mov	r3, r1
 8002d74:	72fb      	strb	r3, [r7, #11]
 8002d76:	4613      	mov	r3, r2
 8002d78:	72bb      	strb	r3, [r7, #10]
	if(Context->Write == NULL)
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	685b      	ldr	r3, [r3, #4]
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d101      	bne.n	8002d86 <ISM330DHCX_WriteReg+0x20>
	{
		return ISM330DHCX_REG_CONTEXT_ERR;
 8002d82:	2308      	movs	r3, #8
 8002d84:	e014      	b.n	8002db0 <ISM330DHCX_WriteReg+0x4a>
	}

	int32_t ret = ISM330DHCX_ValidateParams(Reg,Buffer,Length);
 8002d86:	7aba      	ldrb	r2, [r7, #10]
 8002d88:	7afb      	ldrb	r3, [r7, #11]
 8002d8a:	6879      	ldr	r1, [r7, #4]
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	f000 f813 	bl	8002db8 <ISM330DHCX_ValidateParams>
 8002d92:	6178      	str	r0, [r7, #20]
	if(ret != ISM330DHCX_REG_NO_ERR)
 8002d94:	697b      	ldr	r3, [r7, #20]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d001      	beq.n	8002d9e <ISM330DHCX_WriteReg+0x38>
	{
        return ret;
 8002d9a:	697b      	ldr	r3, [r7, #20]
 8002d9c:	e008      	b.n	8002db0 <ISM330DHCX_WriteReg+0x4a>
	}

	return Context->Write(Context->Handle, Reg, Buffer, Length);
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	685c      	ldr	r4, [r3, #4]
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	6818      	ldr	r0, [r3, #0]
 8002da6:	7abb      	ldrb	r3, [r7, #10]
 8002da8:	7af9      	ldrb	r1, [r7, #11]
 8002daa:	687a      	ldr	r2, [r7, #4]
 8002dac:	47a0      	blx	r4
 8002dae:	4603      	mov	r3, r0
}
 8002db0:	4618      	mov	r0, r3
 8002db2:	371c      	adds	r7, #28
 8002db4:	46bd      	mov	sp, r7
 8002db6:	bd90      	pop	{r4, r7, pc}

08002db8 <ISM330DHCX_ValidateParams>:

static int32_t ISM330DHCX_ValidateParams(uint8_t Reg, uint8_t *Buffer, uint8_t Length)
{
 8002db8:	b480      	push	{r7}
 8002dba:	b085      	sub	sp, #20
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	4603      	mov	r3, r0
 8002dc0:	6039      	str	r1, [r7, #0]
 8002dc2:	71fb      	strb	r3, [r7, #7]
 8002dc4:	4613      	mov	r3, r2
 8002dc6:	71bb      	strb	r3, [r7, #6]
	int32_t ret = 0;
 8002dc8:	2300      	movs	r3, #0
 8002dca:	60fb      	str	r3, [r7, #12]
	if(Reg < ISM330DHCX_REG_FUNC_CFG_ACCESS || Reg > ISM330DHCX_REG_FIFO_OUT_Z_H)
 8002dcc:	79fb      	ldrb	r3, [r7, #7]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d002      	beq.n	8002dd8 <ISM330DHCX_ValidateParams+0x20>
 8002dd2:	79fb      	ldrb	r3, [r7, #7]
 8002dd4:	2b7e      	cmp	r3, #126	; 0x7e
 8002dd6:	d903      	bls.n	8002de0 <ISM330DHCX_ValidateParams+0x28>
	{
		ret |= ISM330DHCX_REG_PARAM_ERR;
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	f043 0301 	orr.w	r3, r3, #1
 8002dde:	60fb      	str	r3, [r7, #12]
	}

	if(Buffer == NULL)
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d103      	bne.n	8002dee <ISM330DHCX_ValidateParams+0x36>
	{
        ret |= ISM330DHCX_BUFFER_PARAM_ERR;
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	f043 0302 	orr.w	r3, r3, #2
 8002dec:	60fb      	str	r3, [r7, #12]
	}

	if( Length == 0 || Length > (ISM330DHCX_REG_FIFO_OUT_Z_H - ISM330DHCX_REG_FUNC_CFG_ACCESS))
 8002dee:	79bb      	ldrb	r3, [r7, #6]
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d002      	beq.n	8002dfa <ISM330DHCX_ValidateParams+0x42>
 8002df4:	79bb      	ldrb	r3, [r7, #6]
 8002df6:	2b7d      	cmp	r3, #125	; 0x7d
 8002df8:	d903      	bls.n	8002e02 <ISM330DHCX_ValidateParams+0x4a>
	{
		ret |= ISM330DHCX_LENGTH_PARAM_ERR;
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	f043 0304 	orr.w	r3, r3, #4
 8002e00:	60fb      	str	r3, [r7, #12]
	}

	return ret;
 8002e02:	68fb      	ldr	r3, [r7, #12]
}
 8002e04:	4618      	mov	r0, r3
 8002e06:	3714      	adds	r7, #20
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0e:	4770      	bx	lr

08002e10 <LPS22HH_Init>:
static int32_t LPS22HH_ReadRegWrapper(void *Handle,uint8_t Reg, uint8_t *Buffer, uint8_t Length);
static int32_t LPS22HH_RegisterInit(LPS22HH_Handle_t *Handle, LPS22HH_Init_Struct_t Settings);
static void ConvertPressureData(uint8_t *buffer, float *pressure);

int32_t LPS22HH_Init(LPS22HH_Handle_t *Handle, LPS22HH_Init_Struct_t Settings, LPS22HH_IO_t *IO)
{
 8002e10:	b084      	sub	sp, #16
 8002e12:	b5b0      	push	{r4, r5, r7, lr}
 8002e14:	b086      	sub	sp, #24
 8002e16:	af02      	add	r7, sp, #8
 8002e18:	6078      	str	r0, [r7, #4]
 8002e1a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8002e1e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	if(Handle->Status != LPS22HH_Initialized)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002e28:	2b01      	cmp	r3, #1
 8002e2a:	d04a      	beq.n	8002ec2 <LPS22HH_Init+0xb2>
	    {

	    if(Handle == NULL)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d102      	bne.n	8002e38 <LPS22HH_Init+0x28>
	    {
		    return LPS22HH_HandleError;
 8002e32:	f04f 33ff 	mov.w	r3, #4294967295
 8002e36:	e045      	b.n	8002ec4 <LPS22HH_Init+0xb4>
	    }

	    if(IO->Write == NULL || IO->Read == NULL || IO->GetTick == NULL)
 8002e38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e3a:	68db      	ldr	r3, [r3, #12]
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d007      	beq.n	8002e50 <LPS22HH_Init+0x40>
 8002e40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e42:	689b      	ldr	r3, [r3, #8]
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d003      	beq.n	8002e50 <LPS22HH_Init+0x40>
 8002e48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e4a:	691b      	ldr	r3, [r3, #16]
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d102      	bne.n	8002e56 <LPS22HH_Init+0x46>
	    {
            return LPS22HH_IOError;
 8002e50:	f06f 0301 	mvn.w	r3, #1
 8002e54:	e036      	b.n	8002ec4 <LPS22HH_Init+0xb4>
	    }

	    Handle->IO = *IO;
 8002e56:	687a      	ldr	r2, [r7, #4]
 8002e58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e5a:	4614      	mov	r4, r2
 8002e5c:	461d      	mov	r5, r3
 8002e5e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002e60:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002e62:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002e66:	e884 0003 	stmia.w	r4, {r0, r1}
	    Handle->DataRate = Settings.ODR;
 8002e6a:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	    Handle->Context.Handle = Handle;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	687a      	ldr	r2, [r7, #4]
 8002e78:	619a      	str	r2, [r3, #24]
	    Handle->Context.Read = LPS22HH_ReadRegWrapper;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	4a15      	ldr	r2, [pc, #84]	; (8002ed4 <LPS22HH_Init+0xc4>)
 8002e7e:	61da      	str	r2, [r3, #28]
	    Handle->Context.Write = LPS22HH_WriteRegWrapper;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	4a15      	ldr	r2, [pc, #84]	; (8002ed8 <LPS22HH_Init+0xc8>)
 8002e84:	621a      	str	r2, [r3, #32]

	    if(Handle->IO.Init != NULL)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d002      	beq.n	8002e94 <LPS22HH_Init+0x84>
	    {
	    	Handle->IO.Init();
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	4798      	blx	r3
	    }

        int32_t ret = LPS22HH_RegisterInit(Handle, Settings);
 8002e94:	466a      	mov	r2, sp
 8002e96:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002e9a:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002e9e:	e882 0003 	stmia.w	r2, {r0, r1}
 8002ea2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ea6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002ea8:	6878      	ldr	r0, [r7, #4]
 8002eaa:	f000 f95f 	bl	800316c <LPS22HH_RegisterInit>
 8002eae:	60f8      	str	r0, [r7, #12]
        if(ret != LPS22HH_Ok)
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d001      	beq.n	8002eba <LPS22HH_Init+0xaa>
        {
        	return ret;
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	e004      	b.n	8002ec4 <LPS22HH_Init+0xb4>
        }

	    Handle->Status = LPS22HH_Initialized;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	2201      	movs	r2, #1
 8002ebe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	    }
	return LPS22HH_Ok;
 8002ec2:	2300      	movs	r3, #0
}
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	3710      	adds	r7, #16
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8002ece:	b004      	add	sp, #16
 8002ed0:	4770      	bx	lr
 8002ed2:	bf00      	nop
 8002ed4:	0800312f 	.word	0x0800312f
 8002ed8:	080030f3 	.word	0x080030f3

08002edc <LPS22HH_ResetDevice>:
	Handle->Status = LPS22HH_Uninitialized;
	return LPS22HH_Ok;
}

int32_t LPS22HH_ResetDevice(LPS22HH_Handle_t *Handle)
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b084      	sub	sp, #16
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
	int32_t ret = LPS22HH_Ok;
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	60fb      	str	r3, [r7, #12]
	if(Handle == NULL)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d102      	bne.n	8002ef4 <LPS22HH_ResetDevice+0x18>
	{
		return LPS22HH_HandleError;
 8002eee:	f04f 33ff 	mov.w	r3, #4294967295
 8002ef2:	e012      	b.n	8002f1a <LPS22HH_ResetDevice+0x3e>
	}

	ret = LPS22HH_Reboot(Handle);
 8002ef4:	6878      	ldr	r0, [r7, #4]
 8002ef6:	f000 f8ab 	bl	8003050 <LPS22HH_Reboot>
 8002efa:	60f8      	str	r0, [r7, #12]
	if(ret != LPS22HH_Ok)
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d001      	beq.n	8002f06 <LPS22HH_ResetDevice+0x2a>
	{
		return ret;
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	e009      	b.n	8002f1a <LPS22HH_ResetDevice+0x3e>
	}


	ret = LPS22HH_SWReset(Handle);
 8002f06:	6878      	ldr	r0, [r7, #4]
 8002f08:	f000 f850 	bl	8002fac <LPS22HH_SWReset>
 8002f0c:	60f8      	str	r0, [r7, #12]
	if(ret != LPS22HH_Ok)
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d001      	beq.n	8002f18 <LPS22HH_ResetDevice+0x3c>
	{
		return ret;
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	e000      	b.n	8002f1a <LPS22HH_ResetDevice+0x3e>
	}

	return LPS22HH_Ok;
 8002f18:	2300      	movs	r3, #0
}
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	3710      	adds	r7, #16
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	bd80      	pop	{r7, pc}
	...

08002f24 <LPS22HH_ReadPressure>:

	return LPS22HH_WriteReg(&Handle->Context,LPS22HH_REG_CTRL_REG2, &buffer, 1); //Store

}
int32_t LPS22HH_ReadPressure(LPS22HH_Handle_t *Handle, float *Pressure)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b084      	sub	sp, #16
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
 8002f2c:	6039      	str	r1, [r7, #0]
	if(Handle->Status != LPS22HH_Initialized)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002f34:	2b01      	cmp	r3, #1
 8002f36:	d002      	beq.n	8002f3e <LPS22HH_ReadPressure+0x1a>
	{
		return LPS22HH_InitError;
 8002f38:	f06f 0302 	mvn.w	r3, #2
 8002f3c:	e030      	b.n	8002fa0 <LPS22HH_ReadPressure+0x7c>
	}

	uint8_t buffer[3] = {0};
 8002f3e:	4b1a      	ldr	r3, [pc, #104]	; (8002fa8 <LPS22HH_ReadPressure+0x84>)
 8002f40:	881b      	ldrh	r3, [r3, #0]
 8002f42:	813b      	strh	r3, [r7, #8]
 8002f44:	2300      	movs	r3, #0
 8002f46:	72bb      	strb	r3, [r7, #10]

	int32_t ret = LPS22HH_ReadReg(&Handle->Context, LPS22HH_REG_STATUS, buffer, 1);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	f103 0018 	add.w	r0, r3, #24
 8002f4e:	f107 0208 	add.w	r2, r7, #8
 8002f52:	2301      	movs	r3, #1
 8002f54:	2127      	movs	r1, #39	; 0x27
 8002f56:	f000 fa71 	bl	800343c <LPS22HH_ReadReg>
 8002f5a:	60f8      	str	r0, [r7, #12]
	if(ret != LPS22HH_Ok)
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d001      	beq.n	8002f66 <LPS22HH_ReadPressure+0x42>
	{
		return ret;
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	e01c      	b.n	8002fa0 <LPS22HH_ReadPressure+0x7c>
	}

	if(!(buffer[0] & LPS22HH_PDATA_Msk))
 8002f66:	7a3b      	ldrb	r3, [r7, #8]
 8002f68:	f003 0301 	and.w	r3, r3, #1
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d101      	bne.n	8002f74 <LPS22HH_ReadPressure+0x50>
	{
		return LPS22HH_NoNewData;
 8002f70:	2301      	movs	r3, #1
 8002f72:	e015      	b.n	8002fa0 <LPS22HH_ReadPressure+0x7c>
	}

	ret = LPS22HH_ReadReg(&Handle->Context, LPS22HH_REG_PRESSURE_OUT_XL, buffer, 3);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	f103 0018 	add.w	r0, r3, #24
 8002f7a:	f107 0208 	add.w	r2, r7, #8
 8002f7e:	2303      	movs	r3, #3
 8002f80:	2128      	movs	r1, #40	; 0x28
 8002f82:	f000 fa5b 	bl	800343c <LPS22HH_ReadReg>
 8002f86:	60f8      	str	r0, [r7, #12]
	if(ret != LPS22HH_Ok)
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d001      	beq.n	8002f92 <LPS22HH_ReadPressure+0x6e>
	{
		return ret;
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	e006      	b.n	8002fa0 <LPS22HH_ReadPressure+0x7c>
	}

	ConvertPressureData(buffer, Pressure);
 8002f92:	f107 0308 	add.w	r3, r7, #8
 8002f96:	6839      	ldr	r1, [r7, #0]
 8002f98:	4618      	mov	r0, r3
 8002f9a:	f000 f9e5 	bl	8003368 <ConvertPressureData>
	return LPS22HH_Ok;
 8002f9e:	2300      	movs	r3, #0
}
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	3710      	adds	r7, #16
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	bd80      	pop	{r7, pc}
 8002fa8:	0800e9cc 	.word	0x0800e9cc

08002fac <LPS22HH_SWReset>:


static int32_t LPS22HH_SWReset(LPS22HH_Handle_t *Handle)
{
 8002fac:	b590      	push	{r4, r7, lr}
 8002fae:	b087      	sub	sp, #28
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
    if(Handle == NULL)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d102      	bne.n	8002fc0 <LPS22HH_SWReset+0x14>
    {
        return LPS22HH_HandleError;
 8002fba:	f04f 33ff 	mov.w	r3, #4294967295
 8002fbe:	e043      	b.n	8003048 <LPS22HH_SWReset+0x9c>
    }

    if(Handle->Context.Read == NULL || Handle->Context.Write == NULL)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	69db      	ldr	r3, [r3, #28]
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d003      	beq.n	8002fd0 <LPS22HH_SWReset+0x24>
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	6a1b      	ldr	r3, [r3, #32]
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d102      	bne.n	8002fd6 <LPS22HH_SWReset+0x2a>
    {
    	return LPS22HH_IOError;
 8002fd0:	f06f 0301 	mvn.w	r3, #1
 8002fd4:	e038      	b.n	8003048 <LPS22HH_SWReset+0x9c>
    }


    int32_t ret = 0;
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	617b      	str	r3, [r7, #20]
    uint8_t buffer = LPS22HH_ResetSignal;
 8002fda:	2304      	movs	r3, #4
 8002fdc:	73fb      	strb	r3, [r7, #15]
    ret = LPS22HH_WriteReg(&Handle->Context, LPS22HH_REG_CTRL_REG2, &buffer, 1);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	f103 0018 	add.w	r0, r3, #24
 8002fe4:	f107 020f 	add.w	r2, r7, #15
 8002fe8:	2301      	movs	r3, #1
 8002fea:	2111      	movs	r1, #17
 8002fec:	f000 fa4b 	bl	8003486 <LPS22HH_WriteReg>
 8002ff0:	6178      	str	r0, [r7, #20]
    if(ret != LPS22HH_Ok)
 8002ff2:	697b      	ldr	r3, [r7, #20]
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d001      	beq.n	8002ffc <LPS22HH_SWReset+0x50>
    {
    	return ret;
 8002ff8:	697b      	ldr	r3, [r7, #20]
 8002ffa:	e025      	b.n	8003048 <LPS22HH_SWReset+0x9c>
    }

    uint32_t timer = Handle->IO.GetTick();
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	691b      	ldr	r3, [r3, #16]
 8003000:	4798      	blx	r3
 8003002:	6138      	str	r0, [r7, #16]
    while(buffer & LPS22HH_ResetSignal)
 8003004:	e01a      	b.n	800303c <LPS22HH_SWReset+0x90>
    {
    	ret = LPS22HH_ReadReg(&Handle->Context, LPS22HH_REG_CTRL_REG2, &buffer, 1);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	f103 0018 	add.w	r0, r3, #24
 800300c:	f107 020f 	add.w	r2, r7, #15
 8003010:	2301      	movs	r3, #1
 8003012:	2111      	movs	r1, #17
 8003014:	f000 fa12 	bl	800343c <LPS22HH_ReadReg>
 8003018:	6178      	str	r0, [r7, #20]
    	if(ret != LPS22HH_Ok)
 800301a:	697b      	ldr	r3, [r7, #20]
 800301c:	2b00      	cmp	r3, #0
 800301e:	d001      	beq.n	8003024 <LPS22HH_SWReset+0x78>
    	{
    		return ret;
 8003020:	697b      	ldr	r3, [r7, #20]
 8003022:	e011      	b.n	8003048 <LPS22HH_SWReset+0x9c>
    	}

    	if(timer + 100 < Handle->IO.GetTick())
 8003024:	693b      	ldr	r3, [r7, #16]
 8003026:	f103 0464 	add.w	r4, r3, #100	; 0x64
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	691b      	ldr	r3, [r3, #16]
 800302e:	4798      	blx	r3
 8003030:	4603      	mov	r3, r0
 8003032:	429c      	cmp	r4, r3
 8003034:	d202      	bcs.n	800303c <LPS22HH_SWReset+0x90>
    	{
    		return LPS22HH_Timeout;
 8003036:	f06f 0305 	mvn.w	r3, #5
 800303a:	e005      	b.n	8003048 <LPS22HH_SWReset+0x9c>
    while(buffer & LPS22HH_ResetSignal)
 800303c:	7bfb      	ldrb	r3, [r7, #15]
 800303e:	f003 0304 	and.w	r3, r3, #4
 8003042:	2b00      	cmp	r3, #0
 8003044:	d1df      	bne.n	8003006 <LPS22HH_SWReset+0x5a>
    	}
    }
    return ret;
 8003046:	697b      	ldr	r3, [r7, #20]
}
 8003048:	4618      	mov	r0, r3
 800304a:	371c      	adds	r7, #28
 800304c:	46bd      	mov	sp, r7
 800304e:	bd90      	pop	{r4, r7, pc}

08003050 <LPS22HH_Reboot>:

static int32_t LPS22HH_Reboot(LPS22HH_Handle_t *Handle)
{
 8003050:	b590      	push	{r4, r7, lr}
 8003052:	b087      	sub	sp, #28
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
    if(Handle == NULL)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2b00      	cmp	r3, #0
 800305c:	d102      	bne.n	8003064 <LPS22HH_Reboot+0x14>
    {
        return LPS22HH_HandleError;
 800305e:	f04f 33ff 	mov.w	r3, #4294967295
 8003062:	e042      	b.n	80030ea <LPS22HH_Reboot+0x9a>
    }

    if(Handle->Context.Read == NULL || Handle->Context.Write == NULL)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	69db      	ldr	r3, [r3, #28]
 8003068:	2b00      	cmp	r3, #0
 800306a:	d003      	beq.n	8003074 <LPS22HH_Reboot+0x24>
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6a1b      	ldr	r3, [r3, #32]
 8003070:	2b00      	cmp	r3, #0
 8003072:	d102      	bne.n	800307a <LPS22HH_Reboot+0x2a>
    {
    	return LPS22HH_IOError;
 8003074:	f06f 0301 	mvn.w	r3, #1
 8003078:	e037      	b.n	80030ea <LPS22HH_Reboot+0x9a>
    }

    int32_t ret = 0;
 800307a:	2300      	movs	r3, #0
 800307c:	617b      	str	r3, [r7, #20]
    uint8_t buffer = LPS22HH_RebootSignal;
 800307e:	2380      	movs	r3, #128	; 0x80
 8003080:	73fb      	strb	r3, [r7, #15]
    ret = LPS22HH_WriteReg(&Handle->Context, LPS22HH_REG_CTRL_REG2, &buffer, 1);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	f103 0018 	add.w	r0, r3, #24
 8003088:	f107 020f 	add.w	r2, r7, #15
 800308c:	2301      	movs	r3, #1
 800308e:	2111      	movs	r1, #17
 8003090:	f000 f9f9 	bl	8003486 <LPS22HH_WriteReg>
 8003094:	6178      	str	r0, [r7, #20]
    if(ret != LPS22HH_Ok)
 8003096:	697b      	ldr	r3, [r7, #20]
 8003098:	2b00      	cmp	r3, #0
 800309a:	d001      	beq.n	80030a0 <LPS22HH_Reboot+0x50>
    {
    	return ret;
 800309c:	697b      	ldr	r3, [r7, #20]
 800309e:	e024      	b.n	80030ea <LPS22HH_Reboot+0x9a>
    }

    uint32_t timer = Handle->IO.GetTick();
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	691b      	ldr	r3, [r3, #16]
 80030a4:	4798      	blx	r3
 80030a6:	6138      	str	r0, [r7, #16]
    while(buffer & LPS22HH_RebootSignal)
 80030a8:	e01a      	b.n	80030e0 <LPS22HH_Reboot+0x90>
    {
    	ret = LPS22HH_ReadReg(&Handle->Context, LPS22HH_REG_INT_SOURCE, &buffer, 1);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	f103 0018 	add.w	r0, r3, #24
 80030b0:	f107 020f 	add.w	r2, r7, #15
 80030b4:	2301      	movs	r3, #1
 80030b6:	2124      	movs	r1, #36	; 0x24
 80030b8:	f000 f9c0 	bl	800343c <LPS22HH_ReadReg>
 80030bc:	6178      	str	r0, [r7, #20]
    	if(ret != LPS22HH_Ok)
 80030be:	697b      	ldr	r3, [r7, #20]
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d001      	beq.n	80030c8 <LPS22HH_Reboot+0x78>
    	{
    		return ret;
 80030c4:	697b      	ldr	r3, [r7, #20]
 80030c6:	e010      	b.n	80030ea <LPS22HH_Reboot+0x9a>
    	}

    	if(timer + 100 < Handle->IO.GetTick())
 80030c8:	693b      	ldr	r3, [r7, #16]
 80030ca:	f103 0464 	add.w	r4, r3, #100	; 0x64
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	691b      	ldr	r3, [r3, #16]
 80030d2:	4798      	blx	r3
 80030d4:	4603      	mov	r3, r0
 80030d6:	429c      	cmp	r4, r3
 80030d8:	d202      	bcs.n	80030e0 <LPS22HH_Reboot+0x90>
    	{
    		return LPS22HH_Timeout;
 80030da:	f06f 0305 	mvn.w	r3, #5
 80030de:	e004      	b.n	80030ea <LPS22HH_Reboot+0x9a>
    while(buffer & LPS22HH_RebootSignal)
 80030e0:	7bfb      	ldrb	r3, [r7, #15]
 80030e2:	b25b      	sxtb	r3, r3
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	dbe0      	blt.n	80030aa <LPS22HH_Reboot+0x5a>
    	}

    }
    return ret;
 80030e8:	697b      	ldr	r3, [r7, #20]
}
 80030ea:	4618      	mov	r0, r3
 80030ec:	371c      	adds	r7, #28
 80030ee:	46bd      	mov	sp, r7
 80030f0:	bd90      	pop	{r4, r7, pc}

080030f2 <LPS22HH_WriteRegWrapper>:

static int32_t LPS22HH_WriteRegWrapper(void *Handle, uint8_t Reg, uint8_t *Buffer, uint8_t Length)
{
 80030f2:	b580      	push	{r7, lr}
 80030f4:	b086      	sub	sp, #24
 80030f6:	af00      	add	r7, sp, #0
 80030f8:	60f8      	str	r0, [r7, #12]
 80030fa:	607a      	str	r2, [r7, #4]
 80030fc:	461a      	mov	r2, r3
 80030fe:	460b      	mov	r3, r1
 8003100:	72fb      	strb	r3, [r7, #11]
 8003102:	4613      	mov	r3, r2
 8003104:	72bb      	strb	r3, [r7, #10]
	LPS22HH_Handle_t *Dev = Handle;
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	617b      	str	r3, [r7, #20]
	if(Dev->IO.Write != NULL)
 800310a:	697b      	ldr	r3, [r7, #20]
 800310c:	68db      	ldr	r3, [r3, #12]
 800310e:	2b00      	cmp	r3, #0
 8003110:	d007      	beq.n	8003122 <LPS22HH_WriteRegWrapper+0x30>
	{
		return Dev->IO.Write(Reg, Buffer, Length);
 8003112:	697b      	ldr	r3, [r7, #20]
 8003114:	68db      	ldr	r3, [r3, #12]
 8003116:	7aba      	ldrb	r2, [r7, #10]
 8003118:	7af8      	ldrb	r0, [r7, #11]
 800311a:	6879      	ldr	r1, [r7, #4]
 800311c:	4798      	blx	r3
 800311e:	4603      	mov	r3, r0
 8003120:	e001      	b.n	8003126 <LPS22HH_WriteRegWrapper+0x34>
	}
    return LPS22HH_IOError;
 8003122:	f06f 0301 	mvn.w	r3, #1
}
 8003126:	4618      	mov	r0, r3
 8003128:	3718      	adds	r7, #24
 800312a:	46bd      	mov	sp, r7
 800312c:	bd80      	pop	{r7, pc}

0800312e <LPS22HH_ReadRegWrapper>:

static int32_t LPS22HH_ReadRegWrapper(void *Handle,uint8_t Reg, uint8_t *Buffer, uint8_t Length)
{
 800312e:	b580      	push	{r7, lr}
 8003130:	b086      	sub	sp, #24
 8003132:	af00      	add	r7, sp, #0
 8003134:	60f8      	str	r0, [r7, #12]
 8003136:	607a      	str	r2, [r7, #4]
 8003138:	461a      	mov	r2, r3
 800313a:	460b      	mov	r3, r1
 800313c:	72fb      	strb	r3, [r7, #11]
 800313e:	4613      	mov	r3, r2
 8003140:	72bb      	strb	r3, [r7, #10]
	LPS22HH_Handle_t *Dev = Handle;
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	617b      	str	r3, [r7, #20]
	if(Dev->IO.Read != NULL)
 8003146:	697b      	ldr	r3, [r7, #20]
 8003148:	689b      	ldr	r3, [r3, #8]
 800314a:	2b00      	cmp	r3, #0
 800314c:	d007      	beq.n	800315e <LPS22HH_ReadRegWrapper+0x30>
	{
		return Dev->IO.Read(Reg, Buffer, Length);
 800314e:	697b      	ldr	r3, [r7, #20]
 8003150:	689b      	ldr	r3, [r3, #8]
 8003152:	7aba      	ldrb	r2, [r7, #10]
 8003154:	7af8      	ldrb	r0, [r7, #11]
 8003156:	6879      	ldr	r1, [r7, #4]
 8003158:	4798      	blx	r3
 800315a:	4603      	mov	r3, r0
 800315c:	e001      	b.n	8003162 <LPS22HH_ReadRegWrapper+0x34>
	}
    return LPS22HH_IOError;
 800315e:	f06f 0301 	mvn.w	r3, #1
}
 8003162:	4618      	mov	r0, r3
 8003164:	3718      	adds	r7, #24
 8003166:	46bd      	mov	sp, r7
 8003168:	bd80      	pop	{r7, pc}
	...

0800316c <LPS22HH_RegisterInit>:

static int32_t LPS22HH_RegisterInit(LPS22HH_Handle_t *Handle, LPS22HH_Init_Struct_t Settings)
{
 800316c:	b084      	sub	sp, #16
 800316e:	b580      	push	{r7, lr}
 8003170:	b084      	sub	sp, #16
 8003172:	af00      	add	r7, sp, #0
 8003174:	6078      	str	r0, [r7, #4]
 8003176:	f107 001c 	add.w	r0, r7, #28
 800317a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	int32_t ret = LPS22HH_ResetDevice(Handle);
 800317e:	6878      	ldr	r0, [r7, #4]
 8003180:	f7ff feac 	bl	8002edc <LPS22HH_ResetDevice>
 8003184:	60f8      	str	r0, [r7, #12]
	if(ret != LPS22HH_Ok)
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	2b00      	cmp	r3, #0
 800318a:	d001      	beq.n	8003190 <LPS22HH_RegisterInit+0x24>
	{
		return ret;
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	e0df      	b.n	8003350 <LPS22HH_RegisterInit+0x1e4>
	}

	uint8_t buffer[2] = {0};
 8003190:	2300      	movs	r3, #0
 8003192:	813b      	strh	r3, [r7, #8]
    buffer[0] = Settings.INTERRUPT_CFG;
 8003194:	7f3b      	ldrb	r3, [r7, #28]
 8003196:	723b      	strb	r3, [r7, #8]
	ret = LPS22HH_WriteReg(&Handle->Context, LPS22HH_REG_INTERRUPT_CFG, &buffer[0], 1);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	f103 0018 	add.w	r0, r3, #24
 800319e:	f107 0208 	add.w	r2, r7, #8
 80031a2:	2301      	movs	r3, #1
 80031a4:	210b      	movs	r1, #11
 80031a6:	f000 f96e 	bl	8003486 <LPS22HH_WriteReg>
 80031aa:	60f8      	str	r0, [r7, #12]
	if(ret != LPS22HH_Ok)
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d001      	beq.n	80031b6 <LPS22HH_RegisterInit+0x4a>
	{
		return ret;
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	e0cc      	b.n	8003350 <LPS22HH_RegisterInit+0x1e4>
	}

	if(Settings.THS_P > 32767)
 80031b6:	8bfb      	ldrh	r3, [r7, #30]
 80031b8:	b21b      	sxth	r3, r3
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	da04      	bge.n	80031c8 <LPS22HH_RegisterInit+0x5c>
	{
		buffer[0] = 32767 & 0x00FF;
 80031be:	23ff      	movs	r3, #255	; 0xff
 80031c0:	723b      	strb	r3, [r7, #8]
		buffer[1] = (32767 & 0xFF00) >> 8;
 80031c2:	237f      	movs	r3, #127	; 0x7f
 80031c4:	727b      	strb	r3, [r7, #9]
 80031c6:	e007      	b.n	80031d8 <LPS22HH_RegisterInit+0x6c>
	} else
	{
		buffer[0] = Settings.THS_P & 0x00FF;
 80031c8:	8bfb      	ldrh	r3, [r7, #30]
 80031ca:	b2db      	uxtb	r3, r3
 80031cc:	723b      	strb	r3, [r7, #8]
		buffer[1] = (Settings.THS_P & 0xFF00) >> 8;
 80031ce:	8bfb      	ldrh	r3, [r7, #30]
 80031d0:	0a1b      	lsrs	r3, r3, #8
 80031d2:	b29b      	uxth	r3, r3
 80031d4:	b2db      	uxtb	r3, r3
 80031d6:	727b      	strb	r3, [r7, #9]
	}
	ret = LPS22HH_WriteReg(&Handle->Context, LPS22HH_REG_THS_P_L, &buffer[0], 2);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	f103 0018 	add.w	r0, r3, #24
 80031de:	f107 0208 	add.w	r2, r7, #8
 80031e2:	2302      	movs	r3, #2
 80031e4:	210c      	movs	r1, #12
 80031e6:	f000 f94e 	bl	8003486 <LPS22HH_WriteReg>
 80031ea:	60f8      	str	r0, [r7, #12]
	if(ret != LPS22HH_Ok)
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d001      	beq.n	80031f6 <LPS22HH_RegisterInit+0x8a>
	{
		return ret;
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	e0ac      	b.n	8003350 <LPS22HH_RegisterInit+0x1e4>
	}

	buffer[0] = Settings.IF_CTRL;
 80031f6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80031fa:	723b      	strb	r3, [r7, #8]
	ret = LPS22HH_WriteReg(&Handle->Context, LPS22HH_REG_IF_CTRL, &buffer[0], 1);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	f103 0018 	add.w	r0, r3, #24
 8003202:	f107 0208 	add.w	r2, r7, #8
 8003206:	2301      	movs	r3, #1
 8003208:	210e      	movs	r1, #14
 800320a:	f000 f93c 	bl	8003486 <LPS22HH_WriteReg>
 800320e:	60f8      	str	r0, [r7, #12]
	if(ret != LPS22HH_Ok)
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	2b00      	cmp	r3, #0
 8003214:	d001      	beq.n	800321a <LPS22HH_RegisterInit+0xae>
	{
		return ret;
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	e09a      	b.n	8003350 <LPS22HH_RegisterInit+0x1e4>
	}

	buffer[0] = Settings.ODR | Settings.LPFP | 0x02 | Settings.SIM; //Enable BDU = 0x02
 800321a:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800321e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8003222:	4313      	orrs	r3, r2
 8003224:	b2da      	uxtb	r2, r3
 8003226:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800322a:	4313      	orrs	r3, r2
 800322c:	b2db      	uxtb	r3, r3
 800322e:	f043 0302 	orr.w	r3, r3, #2
 8003232:	b2db      	uxtb	r3, r3
 8003234:	723b      	strb	r3, [r7, #8]
	ret = LPS22HH_WriteReg(&Handle->Context, LPS22HH_REG_CTRL_REG1, &buffer[0], 1);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	f103 0018 	add.w	r0, r3, #24
 800323c:	f107 0208 	add.w	r2, r7, #8
 8003240:	2301      	movs	r3, #1
 8003242:	2110      	movs	r1, #16
 8003244:	f000 f91f 	bl	8003486 <LPS22HH_WriteReg>
 8003248:	60f8      	str	r0, [r7, #12]
	if(ret != LPS22HH_Ok)
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	2b00      	cmp	r3, #0
 800324e:	d001      	beq.n	8003254 <LPS22HH_RegisterInit+0xe8>
	{
		return ret;
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	e07d      	b.n	8003350 <LPS22HH_RegisterInit+0x1e4>
	}

	buffer[0] = Settings.CTRL_REG2;
 8003254:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003258:	723b      	strb	r3, [r7, #8]
	ret = LPS22HH_WriteReg(&Handle->Context, LPS22HH_REG_CTRL_REG2, &buffer[0], 1);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	f103 0018 	add.w	r0, r3, #24
 8003260:	f107 0208 	add.w	r2, r7, #8
 8003264:	2301      	movs	r3, #1
 8003266:	2111      	movs	r1, #17
 8003268:	f000 f90d 	bl	8003486 <LPS22HH_WriteReg>
 800326c:	60f8      	str	r0, [r7, #12]
	if(ret != LPS22HH_Ok)
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	2b00      	cmp	r3, #0
 8003272:	d001      	beq.n	8003278 <LPS22HH_RegisterInit+0x10c>
	{
		return ret;
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	e06b      	b.n	8003350 <LPS22HH_RegisterInit+0x1e4>
	}

	buffer[0] = Settings.INT_DRDY_Control | Settings.INT_S;
 8003278:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 800327c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003280:	4313      	orrs	r3, r2
 8003282:	b2db      	uxtb	r3, r3
 8003284:	723b      	strb	r3, [r7, #8]
	ret = LPS22HH_WriteReg(&Handle->Context, LPS22HH_REG_CTRL_REG3, &buffer[0], 1);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	f103 0018 	add.w	r0, r3, #24
 800328c:	f107 0208 	add.w	r2, r7, #8
 8003290:	2301      	movs	r3, #1
 8003292:	2112      	movs	r1, #18
 8003294:	f000 f8f7 	bl	8003486 <LPS22HH_WriteReg>
 8003298:	60f8      	str	r0, [r7, #12]
	if(ret != LPS22HH_Ok)
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	2b00      	cmp	r3, #0
 800329e:	d001      	beq.n	80032a4 <LPS22HH_RegisterInit+0x138>
	{
		return ret;
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	e055      	b.n	8003350 <LPS22HH_RegisterInit+0x1e4>
	}

	buffer[0] = Settings.STOP_ON_WTM | Settings.F_MODE;
 80032a4:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80032a8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80032ac:	4313      	orrs	r3, r2
 80032ae:	b2db      	uxtb	r3, r3
 80032b0:	723b      	strb	r3, [r7, #8]
	ret = LPS22HH_WriteReg(&Handle->Context, LPS22HH_REG_FIFO_CTRL, &buffer[0], 1);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	f103 0018 	add.w	r0, r3, #24
 80032b8:	f107 0208 	add.w	r2, r7, #8
 80032bc:	2301      	movs	r3, #1
 80032be:	2113      	movs	r1, #19
 80032c0:	f000 f8e1 	bl	8003486 <LPS22HH_WriteReg>
 80032c4:	60f8      	str	r0, [r7, #12]
	if(ret != LPS22HH_Ok)
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d001      	beq.n	80032d0 <LPS22HH_RegisterInit+0x164>
	{
		return ret;
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	e03f      	b.n	8003350 <LPS22HH_RegisterInit+0x1e4>
	if(Settings.WTM > 255)
	{
		buffer[0] = 255;
	} else
	{
		buffer[0] = Settings.WTM;
 80032d0:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 80032d4:	723b      	strb	r3, [r7, #8]
	}
	ret = LPS22HH_WriteReg(&Handle->Context, LPS22HH_REG_FIFO_WTM, &buffer[0], 1);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	f103 0018 	add.w	r0, r3, #24
 80032dc:	f107 0208 	add.w	r2, r7, #8
 80032e0:	2301      	movs	r3, #1
 80032e2:	2114      	movs	r1, #20
 80032e4:	f000 f8cf 	bl	8003486 <LPS22HH_WriteReg>
 80032e8:	60f8      	str	r0, [r7, #12]
	if(ret != LPS22HH_Ok)
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d001      	beq.n	80032f4 <LPS22HH_RegisterInit+0x188>
	{
		return ret;
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	e02d      	b.n	8003350 <LPS22HH_RegisterInit+0x1e4>
	}

	if((Settings.REF_P * 4096) > 65535) //float -> LSB = multiply by 4096
 80032f4:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80032f8:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8003360 <LPS22HH_RegisterInit+0x1f4>
 80032fc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003300:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8003364 <LPS22HH_RegisterInit+0x1f8>
 8003304:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003308:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800330c:	dd02      	ble.n	8003314 <LPS22HH_RegisterInit+0x1a8>
	{
		return LPS22HH_RefPError;
 800330e:	f06f 0303 	mvn.w	r3, #3
 8003312:	e01d      	b.n	8003350 <LPS22HH_RegisterInit+0x1e4>
	}

	*((uint16_t*)&buffer) = Settings.REF_P * 4096;
 8003314:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8003318:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8003360 <LPS22HH_RegisterInit+0x1f4>
 800331c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003320:	f107 0308 	add.w	r3, r7, #8
 8003324:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003328:	ee17 2a90 	vmov	r2, s15
 800332c:	b292      	uxth	r2, r2
 800332e:	801a      	strh	r2, [r3, #0]
	ret = LPS22HH_WriteReg(&Handle->Context, LPS22HH_REG_REF_P_L, &buffer[0], 2);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	f103 0018 	add.w	r0, r3, #24
 8003336:	f107 0208 	add.w	r2, r7, #8
 800333a:	2302      	movs	r3, #2
 800333c:	2115      	movs	r1, #21
 800333e:	f000 f8a2 	bl	8003486 <LPS22HH_WriteReg>
 8003342:	60f8      	str	r0, [r7, #12]
	if(ret != LPS22HH_Ok)
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	2b00      	cmp	r3, #0
 8003348:	d001      	beq.n	800334e <LPS22HH_RegisterInit+0x1e2>
	{
		return ret;
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	e000      	b.n	8003350 <LPS22HH_RegisterInit+0x1e4>
	}

	return LPS22HH_Ok;
 800334e:	2300      	movs	r3, #0
}
 8003350:	4618      	mov	r0, r3
 8003352:	3710      	adds	r7, #16
 8003354:	46bd      	mov	sp, r7
 8003356:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800335a:	b004      	add	sp, #16
 800335c:	4770      	bx	lr
 800335e:	bf00      	nop
 8003360:	45800000 	.word	0x45800000
 8003364:	477fff00 	.word	0x477fff00

08003368 <ConvertPressureData>:

static void ConvertPressureData(uint8_t *buffer, float *pressure)
{
 8003368:	b580      	push	{r7, lr}
 800336a:	b084      	sub	sp, #16
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
 8003370:	6039      	str	r1, [r7, #0]
	int32_t Data;
	//determine sign
	if(buffer[2] & 0x80)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	3302      	adds	r3, #2
 8003376:	781b      	ldrb	r3, [r3, #0]
 8003378:	b25b      	sxtb	r3, r3
 800337a:	2b00      	cmp	r3, #0
 800337c:	da03      	bge.n	8003386 <ConvertPressureData+0x1e>
	{
		Data = 0xFF000000; //Sign Extend if MSB of 24 Bit number is set
 800337e:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 8003382:	60fb      	str	r3, [r7, #12]
 8003384:	e001      	b.n	800338a <ConvertPressureData+0x22>
	} else
	{
		Data = 0;
 8003386:	2300      	movs	r3, #0
 8003388:	60fb      	str	r3, [r7, #12]
	}
	Data = Data + buffer[2] * 65536 + buffer[1] * 256 + buffer[0]; //Data = Data + Concat buffer[2:0]
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	3302      	adds	r3, #2
 800338e:	781b      	ldrb	r3, [r3, #0]
 8003390:	041a      	lsls	r2, r3, #16
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	441a      	add	r2, r3
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	3301      	adds	r3, #1
 800339a:	781b      	ldrb	r3, [r3, #0]
 800339c:	021b      	lsls	r3, r3, #8
 800339e:	4413      	add	r3, r2
 80033a0:	687a      	ldr	r2, [r7, #4]
 80033a2:	7812      	ldrb	r2, [r2, #0]
 80033a4:	4413      	add	r3, r2
 80033a6:	60fb      	str	r3, [r7, #12]
	*pressure = Data / 4096.0;
 80033a8:	68f8      	ldr	r0, [r7, #12]
 80033aa:	f7fd f9d3 	bl	8000754 <__aeabi_i2d>
 80033ae:	f04f 0200 	mov.w	r2, #0
 80033b2:	4b08      	ldr	r3, [pc, #32]	; (80033d4 <ConvertPressureData+0x6c>)
 80033b4:	f7fd fb62 	bl	8000a7c <__aeabi_ddiv>
 80033b8:	4602      	mov	r2, r0
 80033ba:	460b      	mov	r3, r1
 80033bc:	4610      	mov	r0, r2
 80033be:	4619      	mov	r1, r3
 80033c0:	f7fd fc44 	bl	8000c4c <__aeabi_d2f>
 80033c4:	4602      	mov	r2, r0
 80033c6:	683b      	ldr	r3, [r7, #0]
 80033c8:	601a      	str	r2, [r3, #0]
}
 80033ca:	bf00      	nop
 80033cc:	3710      	adds	r7, #16
 80033ce:	46bd      	mov	sp, r7
 80033d0:	bd80      	pop	{r7, pc}
 80033d2:	bf00      	nop
 80033d4:	40b00000 	.word	0x40b00000

080033d8 <LPS22HH_ValidateParams>:

#include "LPS22HH_Registers.h"
#include <stddef.h>

static uint32_t LPS22HH_ValidateParams(LPS22HH_Context_t *Context, uint8_t Reg, uint8_t *Buffer, uint8_t Length)
{
 80033d8:	b480      	push	{r7}
 80033da:	b087      	sub	sp, #28
 80033dc:	af00      	add	r7, sp, #0
 80033de:	60f8      	str	r0, [r7, #12]
 80033e0:	607a      	str	r2, [r7, #4]
 80033e2:	461a      	mov	r2, r3
 80033e4:	460b      	mov	r3, r1
 80033e6:	72fb      	strb	r3, [r7, #11]
 80033e8:	4613      	mov	r3, r2
 80033ea:	72bb      	strb	r3, [r7, #10]
    int32_t ret_status = LPS22HH_REG_OK;
 80033ec:	2300      	movs	r3, #0
 80033ee:	617b      	str	r3, [r7, #20]

    if(Context == NULL)
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d103      	bne.n	80033fe <LPS22HH_ValidateParams+0x26>
    {
    	ret_status |= LPS22HH_REG_CONTEXT_ERR;
 80033f6:	697b      	ldr	r3, [r7, #20]
 80033f8:	f043 0308 	orr.w	r3, r3, #8
 80033fc:	617b      	str	r3, [r7, #20]
    }

    if(Reg < LPS22HH_REG_INTERRUPT_CFG || Reg > LPS22HH_REG_FIFO_DATA_OUT_TEMP_H)
 80033fe:	7afb      	ldrb	r3, [r7, #11]
 8003400:	2b0a      	cmp	r3, #10
 8003402:	d902      	bls.n	800340a <LPS22HH_ValidateParams+0x32>
 8003404:	7afb      	ldrb	r3, [r7, #11]
 8003406:	2b7c      	cmp	r3, #124	; 0x7c
 8003408:	d903      	bls.n	8003412 <LPS22HH_ValidateParams+0x3a>
    {
    	ret_status |= LPS22HH_REG_REGADDR_ERR;
 800340a:	697b      	ldr	r3, [r7, #20]
 800340c:	f043 0301 	orr.w	r3, r3, #1
 8003410:	617b      	str	r3, [r7, #20]
    }

    if(Buffer == NULL)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	2b00      	cmp	r3, #0
 8003416:	d103      	bne.n	8003420 <LPS22HH_ValidateParams+0x48>
    {
    	ret_status |= LPS22HH_REG_BUFF_ERR;
 8003418:	697b      	ldr	r3, [r7, #20]
 800341a:	f043 0304 	orr.w	r3, r3, #4
 800341e:	617b      	str	r3, [r7, #20]
    }

    if(Length == 0)
 8003420:	7abb      	ldrb	r3, [r7, #10]
 8003422:	2b00      	cmp	r3, #0
 8003424:	d103      	bne.n	800342e <LPS22HH_ValidateParams+0x56>
    {
    	ret_status |= LPS22HH_REG_LENGTH_ERR;
 8003426:	697b      	ldr	r3, [r7, #20]
 8003428:	f043 0302 	orr.w	r3, r3, #2
 800342c:	617b      	str	r3, [r7, #20]
    }

    return ret_status;
 800342e:	697b      	ldr	r3, [r7, #20]
}
 8003430:	4618      	mov	r0, r3
 8003432:	371c      	adds	r7, #28
 8003434:	46bd      	mov	sp, r7
 8003436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343a:	4770      	bx	lr

0800343c <LPS22HH_ReadReg>:

int32_t LPS22HH_ReadReg(LPS22HH_Context_t *Context, uint8_t Reg, uint8_t *Buffer, uint8_t Length)
{
 800343c:	b590      	push	{r4, r7, lr}
 800343e:	b087      	sub	sp, #28
 8003440:	af00      	add	r7, sp, #0
 8003442:	60f8      	str	r0, [r7, #12]
 8003444:	607a      	str	r2, [r7, #4]
 8003446:	461a      	mov	r2, r3
 8003448:	460b      	mov	r3, r1
 800344a:	72fb      	strb	r3, [r7, #11]
 800344c:	4613      	mov	r3, r2
 800344e:	72bb      	strb	r3, [r7, #10]
	int32_t ret = LPS22HH_ValidateParams(Context,Reg,Buffer,Length);
 8003450:	7abb      	ldrb	r3, [r7, #10]
 8003452:	7af9      	ldrb	r1, [r7, #11]
 8003454:	687a      	ldr	r2, [r7, #4]
 8003456:	68f8      	ldr	r0, [r7, #12]
 8003458:	f7ff ffbe 	bl	80033d8 <LPS22HH_ValidateParams>
 800345c:	4603      	mov	r3, r0
 800345e:	617b      	str	r3, [r7, #20]
    if(ret != LPS22HH_REG_OK)
 8003460:	697b      	ldr	r3, [r7, #20]
 8003462:	2b00      	cmp	r3, #0
 8003464:	d001      	beq.n	800346a <LPS22HH_ReadReg+0x2e>
    {
    	return ret;
 8003466:	697b      	ldr	r3, [r7, #20]
 8003468:	e009      	b.n	800347e <LPS22HH_ReadReg+0x42>
    }

	ret = Context->Read(Context->Handle, Reg, Buffer, Length);
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	685c      	ldr	r4, [r3, #4]
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	6818      	ldr	r0, [r3, #0]
 8003472:	7abb      	ldrb	r3, [r7, #10]
 8003474:	7af9      	ldrb	r1, [r7, #11]
 8003476:	687a      	ldr	r2, [r7, #4]
 8003478:	47a0      	blx	r4
 800347a:	6178      	str	r0, [r7, #20]
	return ret;
 800347c:	697b      	ldr	r3, [r7, #20]
}
 800347e:	4618      	mov	r0, r3
 8003480:	371c      	adds	r7, #28
 8003482:	46bd      	mov	sp, r7
 8003484:	bd90      	pop	{r4, r7, pc}

08003486 <LPS22HH_WriteReg>:

int32_t LPS22HH_WriteReg(LPS22HH_Context_t *Context, uint8_t Reg, uint8_t *Buffer, uint8_t Length)
{
 8003486:	b590      	push	{r4, r7, lr}
 8003488:	b087      	sub	sp, #28
 800348a:	af00      	add	r7, sp, #0
 800348c:	60f8      	str	r0, [r7, #12]
 800348e:	607a      	str	r2, [r7, #4]
 8003490:	461a      	mov	r2, r3
 8003492:	460b      	mov	r3, r1
 8003494:	72fb      	strb	r3, [r7, #11]
 8003496:	4613      	mov	r3, r2
 8003498:	72bb      	strb	r3, [r7, #10]
	int32_t ret = LPS22HH_ValidateParams(Context,Reg,Buffer,Length);
 800349a:	7abb      	ldrb	r3, [r7, #10]
 800349c:	7af9      	ldrb	r1, [r7, #11]
 800349e:	687a      	ldr	r2, [r7, #4]
 80034a0:	68f8      	ldr	r0, [r7, #12]
 80034a2:	f7ff ff99 	bl	80033d8 <LPS22HH_ValidateParams>
 80034a6:	4603      	mov	r3, r0
 80034a8:	617b      	str	r3, [r7, #20]
    if(ret != LPS22HH_REG_OK)
 80034aa:	697b      	ldr	r3, [r7, #20]
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d001      	beq.n	80034b4 <LPS22HH_WriteReg+0x2e>
    {
    	return ret;
 80034b0:	697b      	ldr	r3, [r7, #20]
 80034b2:	e009      	b.n	80034c8 <LPS22HH_WriteReg+0x42>
    }

	ret = Context->Write(Context->Handle, Reg, Buffer, Length);
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	689c      	ldr	r4, [r3, #8]
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	6818      	ldr	r0, [r3, #0]
 80034bc:	7abb      	ldrb	r3, [r7, #10]
 80034be:	7af9      	ldrb	r1, [r7, #11]
 80034c0:	687a      	ldr	r2, [r7, #4]
 80034c2:	47a0      	blx	r4
 80034c4:	6178      	str	r0, [r7, #20]
	return ret;
 80034c6:	697b      	ldr	r3, [r7, #20]
}
 80034c8:	4618      	mov	r0, r3
 80034ca:	371c      	adds	r7, #28
 80034cc:	46bd      	mov	sp, r7
 80034ce:	bd90      	pop	{r4, r7, pc}

080034d0 <OV5640_LinkBus>:
#define  OV5640_ID                                 0x5640U
static int32_t OV5640_ReadWrapper(void *Handle, uint16_t Reg, uint8_t *Data, uint16_t Length);
static int32_t OV5640_WriteWrapper(void *Handle, uint16_t Reg, uint8_t *Data, uint16_t Length);

void OV5640_LinkBus(OV5640_Handle_t *OV5640_Handle, OV5640_IO_t *CameraIO)
{
 80034d0:	b5b0      	push	{r4, r5, r7, lr}
 80034d2:	b082      	sub	sp, #8
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
 80034d8:	6039      	str	r1, [r7, #0]
	OV5640_Handle->IO               = *CameraIO;
 80034da:	687a      	ldr	r2, [r7, #4]
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	4614      	mov	r4, r2
 80034e0:	461d      	mov	r5, r3
 80034e2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80034e4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80034e6:	e895 0003 	ldmia.w	r5, {r0, r1}
 80034ea:	e884 0003 	stmia.w	r4, {r0, r1}

	OV5640_Handle->Context.Read  = OV5640_ReadWrapper;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	4a07      	ldr	r2, [pc, #28]	; (8003510 <OV5640_LinkBus+0x40>)
 80034f2:	61da      	str	r2, [r3, #28]
	OV5640_Handle->Context.Write = OV5640_WriteWrapper;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	4a07      	ldr	r2, [pc, #28]	; (8003514 <OV5640_LinkBus+0x44>)
 80034f8:	619a      	str	r2, [r3, #24]
	OV5640_Handle->Context.Handle   = OV5640_Handle;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	687a      	ldr	r2, [r7, #4]
 80034fe:	621a      	str	r2, [r3, #32]

	OV5640_Handle->IO.Init();
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	685b      	ldr	r3, [r3, #4]
 8003504:	4798      	blx	r3
}
 8003506:	bf00      	nop
 8003508:	3708      	adds	r7, #8
 800350a:	46bd      	mov	sp, r7
 800350c:	bdb0      	pop	{r4, r5, r7, pc}
 800350e:	bf00      	nop
 8003510:	08003655 	.word	0x08003655
 8003514:	08003687 	.word	0x08003687

08003518 <OV5640_Init>:

int32_t OV5640_Init(OV5640_Handle_t *OV5640, uint32_t Resolution, uint32_t PixelFormat)
{
 8003518:	b580      	push	{r7, lr}
 800351a:	b088      	sub	sp, #32
 800351c:	af00      	add	r7, sp, #0
 800351e:	60f8      	str	r0, [r7, #12]
 8003520:	60b9      	str	r1, [r7, #8]
 8003522:	607a      	str	r2, [r7, #4]
  uint32_t index;
  int32_t ret = OV5640_OK;
 8003524:	2300      	movs	r3, #0
 8003526:	61bb      	str	r3, [r7, #24]
    {OV5640_SYSTEM_CTROL0, 0x02},
  };
  uint8_t tmp;

    /* Check if resolution is supported */
    if ((Resolution > OV5640_R800x480) ||
 8003528:	68bb      	ldr	r3, [r7, #8]
 800352a:	2b04      	cmp	r3, #4
 800352c:	d80e      	bhi.n	800354c <OV5640_Init+0x34>
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	2b00      	cmp	r3, #0
 8003532:	d00f      	beq.n	8003554 <OV5640_Init+0x3c>
        ((PixelFormat != OV5640_RGB565) && (PixelFormat != OV5640_YUV422) &&
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2b02      	cmp	r3, #2
 8003538:	d00c      	beq.n	8003554 <OV5640_Init+0x3c>
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	2b01      	cmp	r3, #1
 800353e:	d009      	beq.n	8003554 <OV5640_Init+0x3c>
         (PixelFormat != OV5640_RGB888) && (PixelFormat != OV5640_Y8) &&
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2b07      	cmp	r3, #7
 8003544:	d006      	beq.n	8003554 <OV5640_Init+0x3c>
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	2b08      	cmp	r3, #8
 800354a:	d003      	beq.n	8003554 <OV5640_Init+0x3c>
         (PixelFormat != OV5640_JPEG)))
    {
      ret = OV5640_ERROR;
 800354c:	f04f 33ff 	mov.w	r3, #4294967295
 8003550:	61bb      	str	r3, [r7, #24]
 8003552:	e04a      	b.n	80035ea <OV5640_Init+0xd2>
    }
    else
    {
      /* Set common parameters for all resolutions */
      for (index = 0; index < (sizeof(OV5640_Common) / 4U) ; index++)
 8003554:	2300      	movs	r3, #0
 8003556:	61fb      	str	r3, [r7, #28]
 8003558:	e01f      	b.n	800359a <OV5640_Init+0x82>
      {
        if (ret != OV5640_ERROR)
 800355a:	69bb      	ldr	r3, [r7, #24]
 800355c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003560:	d018      	beq.n	8003594 <OV5640_Init+0x7c>
        {
          tmp = (uint8_t)OV5640_Common[index][1];
 8003562:	4a24      	ldr	r2, [pc, #144]	; (80035f4 <OV5640_Init+0xdc>)
 8003564:	69fb      	ldr	r3, [r7, #28]
 8003566:	009b      	lsls	r3, r3, #2
 8003568:	4413      	add	r3, r2
 800356a:	885b      	ldrh	r3, [r3, #2]
 800356c:	b2db      	uxtb	r3, r3
 800356e:	75fb      	strb	r3, [r7, #23]

          if (OV5640_WriteReg(&OV5640->Context, OV5640_Common[index][0], &tmp, 1) != OV5640_OK)
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	f103 0018 	add.w	r0, r3, #24
 8003576:	4a1f      	ldr	r2, [pc, #124]	; (80035f4 <OV5640_Init+0xdc>)
 8003578:	69fb      	ldr	r3, [r7, #28]
 800357a:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 800357e:	f107 0217 	add.w	r2, r7, #23
 8003582:	2301      	movs	r3, #1
 8003584:	f000 f84f 	bl	8003626 <OV5640_WriteReg>
 8003588:	4603      	mov	r3, r0
 800358a:	2b00      	cmp	r3, #0
 800358c:	d002      	beq.n	8003594 <OV5640_Init+0x7c>
          {
            ret = OV5640_ERROR;
 800358e:	f04f 33ff 	mov.w	r3, #4294967295
 8003592:	61bb      	str	r3, [r7, #24]
      for (index = 0; index < (sizeof(OV5640_Common) / 4U) ; index++)
 8003594:	69fb      	ldr	r3, [r7, #28]
 8003596:	3301      	adds	r3, #1
 8003598:	61fb      	str	r3, [r7, #28]
 800359a:	69fb      	ldr	r3, [r7, #28]
 800359c:	2bfd      	cmp	r3, #253	; 0xfd
 800359e:	d9dc      	bls.n	800355a <OV5640_Init+0x42>
          }
        }
      }

      if (ret == OV5640_OK)
 80035a0:	69bb      	ldr	r3, [r7, #24]
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d121      	bne.n	80035ea <OV5640_Init+0xd2>
      {
        /* Set specific parameters for each resolution */
        if (OV5640_SetResolution(OV5640, Resolution) != OV5640_OK)
 80035a6:	68b9      	ldr	r1, [r7, #8]
 80035a8:	68f8      	ldr	r0, [r7, #12]
 80035aa:	f000 f89d 	bl	80036e8 <OV5640_SetResolution>
 80035ae:	4603      	mov	r3, r0
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d003      	beq.n	80035bc <OV5640_Init+0xa4>
        {
          ret = OV5640_ERROR;
 80035b4:	f04f 33ff 	mov.w	r3, #4294967295
 80035b8:	61bb      	str	r3, [r7, #24]
 80035ba:	e016      	b.n	80035ea <OV5640_Init+0xd2>
        }/* Set specific parameters for each pixel format */
        else if (OV5640_SetPixelFormat(OV5640, PixelFormat) != OV5640_OK)
 80035bc:	6879      	ldr	r1, [r7, #4]
 80035be:	68f8      	ldr	r0, [r7, #12]
 80035c0:	f000 f988 	bl	80038d4 <OV5640_SetPixelFormat>
 80035c4:	4603      	mov	r3, r0
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d003      	beq.n	80035d2 <OV5640_Init+0xba>
        {
          ret = OV5640_ERROR;
 80035ca:	f04f 33ff 	mov.w	r3, #4294967295
 80035ce:	61bb      	str	r3, [r7, #24]
 80035d0:	e00b      	b.n	80035ea <OV5640_Init+0xd2>
        }/* Set PixelClock, Href and VSync Polarity */
        else if (OV5640_SetPolarities(OV5640, OV5640_POLARITY_PCLK_HIGH, OV5640_POLARITY_HREF_HIGH,
 80035d2:	2300      	movs	r3, #0
 80035d4:	2201      	movs	r2, #1
 80035d6:	2101      	movs	r1, #1
 80035d8:	68f8      	ldr	r0, [r7, #12]
 80035da:	f000 fb0f 	bl	8003bfc <OV5640_SetPolarities>
 80035de:	4603      	mov	r3, r0
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d002      	beq.n	80035ea <OV5640_Init+0xd2>
                                      OV5640_POLARITY_VSYNC_HIGH) != OV5640_OK)
        {
          ret = OV5640_ERROR;
 80035e4:	f04f 33ff 	mov.w	r3, #4294967295
 80035e8:	61bb      	str	r3, [r7, #24]
        }
      }
    }


  return ret;
 80035ea:	69bb      	ldr	r3, [r7, #24]
}
 80035ec:	4618      	mov	r0, r3
 80035ee:	3720      	adds	r7, #32
 80035f0:	46bd      	mov	sp, r7
 80035f2:	bd80      	pop	{r7, pc}
 80035f4:	0800ea08 	.word	0x0800ea08

080035f8 <OV5640_ReadReg>:

int32_t OV5640_ReadReg(OV5650_Context_t *Context, uint16_t reg, uint8_t *pdata, uint16_t length)
{
 80035f8:	b590      	push	{r4, r7, lr}
 80035fa:	b085      	sub	sp, #20
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	60f8      	str	r0, [r7, #12]
 8003600:	607a      	str	r2, [r7, #4]
 8003602:	461a      	mov	r2, r3
 8003604:	460b      	mov	r3, r1
 8003606:	817b      	strh	r3, [r7, #10]
 8003608:	4613      	mov	r3, r2
 800360a:	813b      	strh	r3, [r7, #8]
  return Context->Read(Context->Handle, reg, pdata, length);
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	685c      	ldr	r4, [r3, #4]
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	6898      	ldr	r0, [r3, #8]
 8003614:	893b      	ldrh	r3, [r7, #8]
 8003616:	8979      	ldrh	r1, [r7, #10]
 8003618:	687a      	ldr	r2, [r7, #4]
 800361a:	47a0      	blx	r4
 800361c:	4603      	mov	r3, r0
}
 800361e:	4618      	mov	r0, r3
 8003620:	3714      	adds	r7, #20
 8003622:	46bd      	mov	sp, r7
 8003624:	bd90      	pop	{r4, r7, pc}

08003626 <OV5640_WriteReg>:


int32_t OV5640_WriteReg(OV5650_Context_t *Context, uint16_t reg, uint8_t *pdata, uint16_t length)
{
 8003626:	b590      	push	{r4, r7, lr}
 8003628:	b085      	sub	sp, #20
 800362a:	af00      	add	r7, sp, #0
 800362c:	60f8      	str	r0, [r7, #12]
 800362e:	607a      	str	r2, [r7, #4]
 8003630:	461a      	mov	r2, r3
 8003632:	460b      	mov	r3, r1
 8003634:	817b      	strh	r3, [r7, #10]
 8003636:	4613      	mov	r3, r2
 8003638:	813b      	strh	r3, [r7, #8]
  return Context->Write(Context->Handle, reg, pdata, length);
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	681c      	ldr	r4, [r3, #0]
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	6898      	ldr	r0, [r3, #8]
 8003642:	893b      	ldrh	r3, [r7, #8]
 8003644:	8979      	ldrh	r1, [r7, #10]
 8003646:	687a      	ldr	r2, [r7, #4]
 8003648:	47a0      	blx	r4
 800364a:	4603      	mov	r3, r0
}
 800364c:	4618      	mov	r0, r3
 800364e:	3714      	adds	r7, #20
 8003650:	46bd      	mov	sp, r7
 8003652:	bd90      	pop	{r4, r7, pc}

08003654 <OV5640_ReadWrapper>:

static int32_t OV5640_ReadWrapper(void *Handle, uint16_t Reg, uint8_t *Data, uint16_t Length){
 8003654:	b590      	push	{r4, r7, lr}
 8003656:	b087      	sub	sp, #28
 8003658:	af00      	add	r7, sp, #0
 800365a:	60f8      	str	r0, [r7, #12]
 800365c:	607a      	str	r2, [r7, #4]
 800365e:	461a      	mov	r2, r3
 8003660:	460b      	mov	r3, r1
 8003662:	817b      	strh	r3, [r7, #10]
 8003664:	4613      	mov	r3, r2
 8003666:	813b      	strh	r3, [r7, #8]
	OV5640_Handle_t *OV5640 = (OV5640_Handle_t*)Handle;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	617b      	str	r3, [r7, #20]
    return OV5640->IO.Read(OV5640->IO.Address,Reg,Data,Length);
 800366c:	697b      	ldr	r3, [r7, #20]
 800366e:	691c      	ldr	r4, [r3, #16]
 8003670:	697b      	ldr	r3, [r7, #20]
 8003672:	8818      	ldrh	r0, [r3, #0]
 8003674:	893b      	ldrh	r3, [r7, #8]
 8003676:	8979      	ldrh	r1, [r7, #10]
 8003678:	687a      	ldr	r2, [r7, #4]
 800367a:	47a0      	blx	r4
 800367c:	4603      	mov	r3, r0
}
 800367e:	4618      	mov	r0, r3
 8003680:	371c      	adds	r7, #28
 8003682:	46bd      	mov	sp, r7
 8003684:	bd90      	pop	{r4, r7, pc}

08003686 <OV5640_WriteWrapper>:

static int32_t OV5640_WriteWrapper(void *Handle, uint16_t Reg, uint8_t *Data, uint16_t Length){
 8003686:	b590      	push	{r4, r7, lr}
 8003688:	b087      	sub	sp, #28
 800368a:	af00      	add	r7, sp, #0
 800368c:	60f8      	str	r0, [r7, #12]
 800368e:	607a      	str	r2, [r7, #4]
 8003690:	461a      	mov	r2, r3
 8003692:	460b      	mov	r3, r1
 8003694:	817b      	strh	r3, [r7, #10]
 8003696:	4613      	mov	r3, r2
 8003698:	813b      	strh	r3, [r7, #8]
	OV5640_Handle_t *OV5640 = (OV5640_Handle_t*)Handle;
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	617b      	str	r3, [r7, #20]
	return OV5640->IO.Write(OV5640->IO.Address,Reg,Data,Length);
 800369e:	697b      	ldr	r3, [r7, #20]
 80036a0:	68dc      	ldr	r4, [r3, #12]
 80036a2:	697b      	ldr	r3, [r7, #20]
 80036a4:	8818      	ldrh	r0, [r3, #0]
 80036a6:	893b      	ldrh	r3, [r7, #8]
 80036a8:	8979      	ldrh	r1, [r7, #10]
 80036aa:	687a      	ldr	r2, [r7, #4]
 80036ac:	47a0      	blx	r4
 80036ae:	4603      	mov	r3, r0
}
 80036b0:	4618      	mov	r0, r3
 80036b2:	371c      	adds	r7, #28
 80036b4:	46bd      	mov	sp, r7
 80036b6:	bd90      	pop	{r4, r7, pc}

080036b8 <OV5640_Delay>:

static int32_t OV5640_Delay(OV5640_Handle_t *OV5640, uint32_t Delay)
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b084      	sub	sp, #16
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
 80036c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  tickstart = OV5640->IO.GetTick();
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	695b      	ldr	r3, [r3, #20]
 80036c6:	4798      	blx	r3
 80036c8:	60f8      	str	r0, [r7, #12]
  while ((OV5640->IO.GetTick() - tickstart) < Delay)
 80036ca:	bf00      	nop
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	695b      	ldr	r3, [r3, #20]
 80036d0:	4798      	blx	r3
 80036d2:	4602      	mov	r2, r0
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	1ad3      	subs	r3, r2, r3
 80036d8:	683a      	ldr	r2, [r7, #0]
 80036da:	429a      	cmp	r2, r3
 80036dc:	d8f6      	bhi.n	80036cc <OV5640_Delay+0x14>
  {
  }
  return OV5640_OK;
 80036de:	2300      	movs	r3, #0
}
 80036e0:	4618      	mov	r0, r3
 80036e2:	3710      	adds	r7, #16
 80036e4:	46bd      	mov	sp, r7
 80036e6:	bd80      	pop	{r7, pc}

080036e8 <OV5640_SetResolution>:

int32_t OV5640_SetResolution(OV5640_Handle_t *OV5640, uint32_t Resolution)
{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	b086      	sub	sp, #24
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
 80036f0:	6039      	str	r1, [r7, #0]
  int32_t ret = OV5640_OK;
 80036f2:	2300      	movs	r3, #0
 80036f4:	617b      	str	r3, [r7, #20]
    {OV5640_TIMING_DVPVO_HIGH, 0x00},
    {OV5640_TIMING_DVPVO_LOW, 0x78},
  };

  /* Check if resolution is supported */
  if (Resolution > OV5640_R800x480)
 80036f6:	683b      	ldr	r3, [r7, #0]
 80036f8:	2b04      	cmp	r3, #4
 80036fa:	d903      	bls.n	8003704 <OV5640_SetResolution+0x1c>
  {
    ret = OV5640_ERROR;
 80036fc:	f04f 33ff 	mov.w	r3, #4294967295
 8003700:	617b      	str	r3, [r7, #20]
 8003702:	e0d8      	b.n	80038b6 <OV5640_SetResolution+0x1ce>
  }
  else
  {
    /* Initialize OV5640 */
    switch (Resolution)
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	2b04      	cmp	r3, #4
 8003708:	f200 80d1 	bhi.w	80038ae <OV5640_SetResolution+0x1c6>
 800370c:	a201      	add	r2, pc, #4	; (adr r2, 8003714 <OV5640_SetResolution+0x2c>)
 800370e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003712:	bf00      	nop
 8003714:	08003729 	.word	0x08003729
 8003718:	08003777 	.word	0x08003777
 800371c:	080037c5 	.word	0x080037c5
 8003720:	08003813 	.word	0x08003813
 8003724:	08003861 	.word	0x08003861
    {
      case OV5640_R160x120:
        for (index = 0; index < (sizeof(OV5640_QQVGA) / 4U); index++)
 8003728:	2300      	movs	r3, #0
 800372a:	613b      	str	r3, [r7, #16]
 800372c:	e01f      	b.n	800376e <OV5640_SetResolution+0x86>
        {
          if (ret != OV5640_ERROR)
 800372e:	697b      	ldr	r3, [r7, #20]
 8003730:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003734:	d018      	beq.n	8003768 <OV5640_SetResolution+0x80>
          {
            tmp = (uint8_t)OV5640_QQVGA[index][1];
 8003736:	4a62      	ldr	r2, [pc, #392]	; (80038c0 <OV5640_SetResolution+0x1d8>)
 8003738:	693b      	ldr	r3, [r7, #16]
 800373a:	009b      	lsls	r3, r3, #2
 800373c:	4413      	add	r3, r2
 800373e:	885b      	ldrh	r3, [r3, #2]
 8003740:	b2db      	uxtb	r3, r3
 8003742:	73fb      	strb	r3, [r7, #15]
            if (OV5640_WriteReg(&OV5640->Context, OV5640_QQVGA[index][0], &tmp, 1) != OV5640_OK)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	f103 0018 	add.w	r0, r3, #24
 800374a:	4a5d      	ldr	r2, [pc, #372]	; (80038c0 <OV5640_SetResolution+0x1d8>)
 800374c:	693b      	ldr	r3, [r7, #16]
 800374e:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8003752:	f107 020f 	add.w	r2, r7, #15
 8003756:	2301      	movs	r3, #1
 8003758:	f7ff ff65 	bl	8003626 <OV5640_WriteReg>
 800375c:	4603      	mov	r3, r0
 800375e:	2b00      	cmp	r3, #0
 8003760:	d002      	beq.n	8003768 <OV5640_SetResolution+0x80>
            {
              ret = OV5640_ERROR;
 8003762:	f04f 33ff 	mov.w	r3, #4294967295
 8003766:	617b      	str	r3, [r7, #20]
        for (index = 0; index < (sizeof(OV5640_QQVGA) / 4U); index++)
 8003768:	693b      	ldr	r3, [r7, #16]
 800376a:	3301      	adds	r3, #1
 800376c:	613b      	str	r3, [r7, #16]
 800376e:	693b      	ldr	r3, [r7, #16]
 8003770:	2b03      	cmp	r3, #3
 8003772:	d9dc      	bls.n	800372e <OV5640_SetResolution+0x46>
            }
          }
        }
        break;
 8003774:	e09f      	b.n	80038b6 <OV5640_SetResolution+0x1ce>
      case OV5640_R320x240:
        for (index = 0; index < (sizeof(OV5640_QVGA) / 4U); index++)
 8003776:	2300      	movs	r3, #0
 8003778:	613b      	str	r3, [r7, #16]
 800377a:	e01f      	b.n	80037bc <OV5640_SetResolution+0xd4>
        {
          if (ret != OV5640_ERROR)
 800377c:	697b      	ldr	r3, [r7, #20]
 800377e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003782:	d018      	beq.n	80037b6 <OV5640_SetResolution+0xce>
          {
            tmp = (uint8_t)OV5640_QVGA[index][1];
 8003784:	4a4f      	ldr	r2, [pc, #316]	; (80038c4 <OV5640_SetResolution+0x1dc>)
 8003786:	693b      	ldr	r3, [r7, #16]
 8003788:	009b      	lsls	r3, r3, #2
 800378a:	4413      	add	r3, r2
 800378c:	885b      	ldrh	r3, [r3, #2]
 800378e:	b2db      	uxtb	r3, r3
 8003790:	73fb      	strb	r3, [r7, #15]
            if (OV5640_WriteReg(&OV5640->Context, OV5640_QVGA[index][0], &tmp, 1) != OV5640_OK)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	f103 0018 	add.w	r0, r3, #24
 8003798:	4a4a      	ldr	r2, [pc, #296]	; (80038c4 <OV5640_SetResolution+0x1dc>)
 800379a:	693b      	ldr	r3, [r7, #16]
 800379c:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 80037a0:	f107 020f 	add.w	r2, r7, #15
 80037a4:	2301      	movs	r3, #1
 80037a6:	f7ff ff3e 	bl	8003626 <OV5640_WriteReg>
 80037aa:	4603      	mov	r3, r0
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d002      	beq.n	80037b6 <OV5640_SetResolution+0xce>
            {
              ret = OV5640_ERROR;
 80037b0:	f04f 33ff 	mov.w	r3, #4294967295
 80037b4:	617b      	str	r3, [r7, #20]
        for (index = 0; index < (sizeof(OV5640_QVGA) / 4U); index++)
 80037b6:	693b      	ldr	r3, [r7, #16]
 80037b8:	3301      	adds	r3, #1
 80037ba:	613b      	str	r3, [r7, #16]
 80037bc:	693b      	ldr	r3, [r7, #16]
 80037be:	2b03      	cmp	r3, #3
 80037c0:	d9dc      	bls.n	800377c <OV5640_SetResolution+0x94>
            }
          }
        }
        break;
 80037c2:	e078      	b.n	80038b6 <OV5640_SetResolution+0x1ce>
      case OV5640_R480x272:
        for (index = 0; index < (sizeof(OV5640_480x272) / 4U); index++)
 80037c4:	2300      	movs	r3, #0
 80037c6:	613b      	str	r3, [r7, #16]
 80037c8:	e01f      	b.n	800380a <OV5640_SetResolution+0x122>
        {
          if (ret != OV5640_ERROR)
 80037ca:	697b      	ldr	r3, [r7, #20]
 80037cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037d0:	d018      	beq.n	8003804 <OV5640_SetResolution+0x11c>
          {
            tmp = (uint8_t)OV5640_480x272[index][1];
 80037d2:	4a3d      	ldr	r2, [pc, #244]	; (80038c8 <OV5640_SetResolution+0x1e0>)
 80037d4:	693b      	ldr	r3, [r7, #16]
 80037d6:	009b      	lsls	r3, r3, #2
 80037d8:	4413      	add	r3, r2
 80037da:	885b      	ldrh	r3, [r3, #2]
 80037dc:	b2db      	uxtb	r3, r3
 80037de:	73fb      	strb	r3, [r7, #15]
            if (OV5640_WriteReg(&OV5640->Context, OV5640_480x272[index][0], &tmp, 1) != OV5640_OK)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	f103 0018 	add.w	r0, r3, #24
 80037e6:	4a38      	ldr	r2, [pc, #224]	; (80038c8 <OV5640_SetResolution+0x1e0>)
 80037e8:	693b      	ldr	r3, [r7, #16]
 80037ea:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 80037ee:	f107 020f 	add.w	r2, r7, #15
 80037f2:	2301      	movs	r3, #1
 80037f4:	f7ff ff17 	bl	8003626 <OV5640_WriteReg>
 80037f8:	4603      	mov	r3, r0
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d002      	beq.n	8003804 <OV5640_SetResolution+0x11c>
            {
              ret = OV5640_ERROR;
 80037fe:	f04f 33ff 	mov.w	r3, #4294967295
 8003802:	617b      	str	r3, [r7, #20]
        for (index = 0; index < (sizeof(OV5640_480x272) / 4U); index++)
 8003804:	693b      	ldr	r3, [r7, #16]
 8003806:	3301      	adds	r3, #1
 8003808:	613b      	str	r3, [r7, #16]
 800380a:	693b      	ldr	r3, [r7, #16]
 800380c:	2b03      	cmp	r3, #3
 800380e:	d9dc      	bls.n	80037ca <OV5640_SetResolution+0xe2>
            }
          }
        }
        break;
 8003810:	e051      	b.n	80038b6 <OV5640_SetResolution+0x1ce>
      case OV5640_R640x480:
        for (index = 0; index < (sizeof(OV5640_VGA) / 4U); index++)
 8003812:	2300      	movs	r3, #0
 8003814:	613b      	str	r3, [r7, #16]
 8003816:	e01f      	b.n	8003858 <OV5640_SetResolution+0x170>
        {
          if (ret != OV5640_ERROR)
 8003818:	697b      	ldr	r3, [r7, #20]
 800381a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800381e:	d018      	beq.n	8003852 <OV5640_SetResolution+0x16a>
          {
            tmp = (uint8_t)OV5640_VGA[index][1];
 8003820:	4a2a      	ldr	r2, [pc, #168]	; (80038cc <OV5640_SetResolution+0x1e4>)
 8003822:	693b      	ldr	r3, [r7, #16]
 8003824:	009b      	lsls	r3, r3, #2
 8003826:	4413      	add	r3, r2
 8003828:	885b      	ldrh	r3, [r3, #2]
 800382a:	b2db      	uxtb	r3, r3
 800382c:	73fb      	strb	r3, [r7, #15]
            if (OV5640_WriteReg(&OV5640->Context, OV5640_VGA[index][0], &tmp, 1) != OV5640_OK)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	f103 0018 	add.w	r0, r3, #24
 8003834:	4a25      	ldr	r2, [pc, #148]	; (80038cc <OV5640_SetResolution+0x1e4>)
 8003836:	693b      	ldr	r3, [r7, #16]
 8003838:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 800383c:	f107 020f 	add.w	r2, r7, #15
 8003840:	2301      	movs	r3, #1
 8003842:	f7ff fef0 	bl	8003626 <OV5640_WriteReg>
 8003846:	4603      	mov	r3, r0
 8003848:	2b00      	cmp	r3, #0
 800384a:	d002      	beq.n	8003852 <OV5640_SetResolution+0x16a>
            {
              ret = OV5640_ERROR;
 800384c:	f04f 33ff 	mov.w	r3, #4294967295
 8003850:	617b      	str	r3, [r7, #20]
        for (index = 0; index < (sizeof(OV5640_VGA) / 4U); index++)
 8003852:	693b      	ldr	r3, [r7, #16]
 8003854:	3301      	adds	r3, #1
 8003856:	613b      	str	r3, [r7, #16]
 8003858:	693b      	ldr	r3, [r7, #16]
 800385a:	2b03      	cmp	r3, #3
 800385c:	d9dc      	bls.n	8003818 <OV5640_SetResolution+0x130>
            }
          }
        }
        break;
 800385e:	e02a      	b.n	80038b6 <OV5640_SetResolution+0x1ce>
      case OV5640_R800x480:
        for (index = 0; index < (sizeof(OV5640_WVGA) / 4U); index++)
 8003860:	2300      	movs	r3, #0
 8003862:	613b      	str	r3, [r7, #16]
 8003864:	e01f      	b.n	80038a6 <OV5640_SetResolution+0x1be>
        {
          if (ret != OV5640_ERROR)
 8003866:	697b      	ldr	r3, [r7, #20]
 8003868:	f1b3 3fff 	cmp.w	r3, #4294967295
 800386c:	d018      	beq.n	80038a0 <OV5640_SetResolution+0x1b8>
          {
            tmp = (uint8_t)OV5640_WVGA[index][1];
 800386e:	4a18      	ldr	r2, [pc, #96]	; (80038d0 <OV5640_SetResolution+0x1e8>)
 8003870:	693b      	ldr	r3, [r7, #16]
 8003872:	009b      	lsls	r3, r3, #2
 8003874:	4413      	add	r3, r2
 8003876:	885b      	ldrh	r3, [r3, #2]
 8003878:	b2db      	uxtb	r3, r3
 800387a:	73fb      	strb	r3, [r7, #15]
            if (OV5640_WriteReg(&OV5640->Context, OV5640_WVGA[index][0], &tmp, 1) != OV5640_OK)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	f103 0018 	add.w	r0, r3, #24
 8003882:	4a13      	ldr	r2, [pc, #76]	; (80038d0 <OV5640_SetResolution+0x1e8>)
 8003884:	693b      	ldr	r3, [r7, #16]
 8003886:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 800388a:	f107 020f 	add.w	r2, r7, #15
 800388e:	2301      	movs	r3, #1
 8003890:	f7ff fec9 	bl	8003626 <OV5640_WriteReg>
 8003894:	4603      	mov	r3, r0
 8003896:	2b00      	cmp	r3, #0
 8003898:	d002      	beq.n	80038a0 <OV5640_SetResolution+0x1b8>
            {
              ret = OV5640_ERROR;
 800389a:	f04f 33ff 	mov.w	r3, #4294967295
 800389e:	617b      	str	r3, [r7, #20]
        for (index = 0; index < (sizeof(OV5640_WVGA) / 4U); index++)
 80038a0:	693b      	ldr	r3, [r7, #16]
 80038a2:	3301      	adds	r3, #1
 80038a4:	613b      	str	r3, [r7, #16]
 80038a6:	693b      	ldr	r3, [r7, #16]
 80038a8:	2b03      	cmp	r3, #3
 80038aa:	d9dc      	bls.n	8003866 <OV5640_SetResolution+0x17e>
            }
          }
        }
        break;
 80038ac:	e003      	b.n	80038b6 <OV5640_SetResolution+0x1ce>
      default:
        ret = OV5640_ERROR;
 80038ae:	f04f 33ff 	mov.w	r3, #4294967295
 80038b2:	617b      	str	r3, [r7, #20]
        break;
 80038b4:	bf00      	nop
    }
  }

  return ret;
 80038b6:	697b      	ldr	r3, [r7, #20]
}
 80038b8:	4618      	mov	r0, r3
 80038ba:	3718      	adds	r7, #24
 80038bc:	46bd      	mov	sp, r7
 80038be:	bd80      	pop	{r7, pc}
 80038c0:	0800ee00 	.word	0x0800ee00
 80038c4:	0800ee10 	.word	0x0800ee10
 80038c8:	0800ee20 	.word	0x0800ee20
 80038cc:	0800ee30 	.word	0x0800ee30
 80038d0:	0800ee40 	.word	0x0800ee40

080038d4 <OV5640_SetPixelFormat>:

int32_t OV5640_SetPixelFormat(OV5640_Handle_t *OV5640, uint32_t PixelFormat)
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b086      	sub	sp, #24
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
 80038dc:	6039      	str	r1, [r7, #0]
  int32_t ret = OV5640_OK;
 80038de:	2300      	movs	r3, #0
 80038e0:	617b      	str	r3, [r7, #20]
    {OV5640_FORMAT_CTRL00, 0x30},
    {OV5640_FORMAT_MUX_CTRL, 0x00},
  };

  /* Check if PixelFormat is supported */
  if ((PixelFormat != OV5640_RGB565) && (PixelFormat != OV5640_YUV422) &&
 80038e2:	683b      	ldr	r3, [r7, #0]
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d00f      	beq.n	8003908 <OV5640_SetPixelFormat+0x34>
 80038e8:	683b      	ldr	r3, [r7, #0]
 80038ea:	2b02      	cmp	r3, #2
 80038ec:	d00c      	beq.n	8003908 <OV5640_SetPixelFormat+0x34>
 80038ee:	683b      	ldr	r3, [r7, #0]
 80038f0:	2b01      	cmp	r3, #1
 80038f2:	d009      	beq.n	8003908 <OV5640_SetPixelFormat+0x34>
      (PixelFormat != OV5640_RGB888) && (PixelFormat != OV5640_Y8) &&
 80038f4:	683b      	ldr	r3, [r7, #0]
 80038f6:	2b07      	cmp	r3, #7
 80038f8:	d006      	beq.n	8003908 <OV5640_SetPixelFormat+0x34>
 80038fa:	683b      	ldr	r3, [r7, #0]
 80038fc:	2b08      	cmp	r3, #8
 80038fe:	d003      	beq.n	8003908 <OV5640_SetPixelFormat+0x34>
      (PixelFormat != OV5640_JPEG))
  {
    /* Pixel format not supported */
    ret = OV5640_ERROR;
 8003900:	f04f 33ff 	mov.w	r3, #4294967295
 8003904:	617b      	str	r3, [r7, #20]
 8003906:	e16a      	b.n	8003bde <OV5640_SetPixelFormat+0x30a>
  }
  else
  {
    /* Set specific parameters for each PixelFormat */
    switch (PixelFormat)
 8003908:	683b      	ldr	r3, [r7, #0]
 800390a:	3b01      	subs	r3, #1
 800390c:	2b07      	cmp	r3, #7
 800390e:	f200 80c3 	bhi.w	8003a98 <OV5640_SetPixelFormat+0x1c4>
 8003912:	a201      	add	r2, pc, #4	; (adr r2, 8003918 <OV5640_SetPixelFormat+0x44>)
 8003914:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003918:	08003991 	.word	0x08003991
 800391c:	08003939 	.word	0x08003939
 8003920:	08003a99 	.word	0x08003a99
 8003924:	08003a99 	.word	0x08003a99
 8003928:	08003a99 	.word	0x08003a99
 800392c:	08003a99 	.word	0x08003a99
 8003930:	080039e9 	.word	0x080039e9
 8003934:	08003a41 	.word	0x08003a41
    {
      case OV5640_YUV422:
        for (index = 0; index < (sizeof(OV5640_PF_YUV422) / 4U); index++)
 8003938:	2300      	movs	r3, #0
 800393a:	613b      	str	r3, [r7, #16]
 800393c:	e024      	b.n	8003988 <OV5640_SetPixelFormat+0xb4>
        {
          if (ret != OV5640_ERROR)
 800393e:	697b      	ldr	r3, [r7, #20]
 8003940:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003944:	d01d      	beq.n	8003982 <OV5640_SetPixelFormat+0xae>
          {
            tmp = (uint8_t)OV5640_PF_YUV422[index][1];
 8003946:	4aa8      	ldr	r2, [pc, #672]	; (8003be8 <OV5640_SetPixelFormat+0x314>)
 8003948:	693b      	ldr	r3, [r7, #16]
 800394a:	009b      	lsls	r3, r3, #2
 800394c:	4413      	add	r3, r2
 800394e:	885b      	ldrh	r3, [r3, #2]
 8003950:	b2db      	uxtb	r3, r3
 8003952:	73fb      	strb	r3, [r7, #15]
            if (OV5640_WriteReg(&OV5640->Context, OV5640_PF_YUV422[index][0], &tmp, 1) != OV5640_OK)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	f103 0018 	add.w	r0, r3, #24
 800395a:	4aa3      	ldr	r2, [pc, #652]	; (8003be8 <OV5640_SetPixelFormat+0x314>)
 800395c:	693b      	ldr	r3, [r7, #16]
 800395e:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8003962:	f107 020f 	add.w	r2, r7, #15
 8003966:	2301      	movs	r3, #1
 8003968:	f7ff fe5d 	bl	8003626 <OV5640_WriteReg>
 800396c:	4603      	mov	r3, r0
 800396e:	2b00      	cmp	r3, #0
 8003970:	d003      	beq.n	800397a <OV5640_SetPixelFormat+0xa6>
            {
              ret = OV5640_ERROR;
 8003972:	f04f 33ff 	mov.w	r3, #4294967295
 8003976:	617b      	str	r3, [r7, #20]
 8003978:	e003      	b.n	8003982 <OV5640_SetPixelFormat+0xae>
            }
            else
            {
              (void)OV5640_Delay(OV5640, 1);
 800397a:	2101      	movs	r1, #1
 800397c:	6878      	ldr	r0, [r7, #4]
 800397e:	f7ff fe9b 	bl	80036b8 <OV5640_Delay>
        for (index = 0; index < (sizeof(OV5640_PF_YUV422) / 4U); index++)
 8003982:	693b      	ldr	r3, [r7, #16]
 8003984:	3301      	adds	r3, #1
 8003986:	613b      	str	r3, [r7, #16]
 8003988:	693b      	ldr	r3, [r7, #16]
 800398a:	2b01      	cmp	r3, #1
 800398c:	d9d7      	bls.n	800393e <OV5640_SetPixelFormat+0x6a>
            }
          }
        }
        break;
 800398e:	e0af      	b.n	8003af0 <OV5640_SetPixelFormat+0x21c>

      case OV5640_RGB888:
        for (index = 0; index < (sizeof(OV5640_PF_RGB888) / 4U); index++)
 8003990:	2300      	movs	r3, #0
 8003992:	613b      	str	r3, [r7, #16]
 8003994:	e024      	b.n	80039e0 <OV5640_SetPixelFormat+0x10c>
        {
          if (ret != OV5640_ERROR)
 8003996:	697b      	ldr	r3, [r7, #20]
 8003998:	f1b3 3fff 	cmp.w	r3, #4294967295
 800399c:	d01d      	beq.n	80039da <OV5640_SetPixelFormat+0x106>
          {
            tmp = (uint8_t)OV5640_PF_RGB888[index][1];
 800399e:	4a93      	ldr	r2, [pc, #588]	; (8003bec <OV5640_SetPixelFormat+0x318>)
 80039a0:	693b      	ldr	r3, [r7, #16]
 80039a2:	009b      	lsls	r3, r3, #2
 80039a4:	4413      	add	r3, r2
 80039a6:	885b      	ldrh	r3, [r3, #2]
 80039a8:	b2db      	uxtb	r3, r3
 80039aa:	73fb      	strb	r3, [r7, #15]
            if (OV5640_WriteReg(&OV5640->Context, OV5640_PF_RGB888[index][0], &tmp, 1) != OV5640_OK)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	f103 0018 	add.w	r0, r3, #24
 80039b2:	4a8e      	ldr	r2, [pc, #568]	; (8003bec <OV5640_SetPixelFormat+0x318>)
 80039b4:	693b      	ldr	r3, [r7, #16]
 80039b6:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 80039ba:	f107 020f 	add.w	r2, r7, #15
 80039be:	2301      	movs	r3, #1
 80039c0:	f7ff fe31 	bl	8003626 <OV5640_WriteReg>
 80039c4:	4603      	mov	r3, r0
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d003      	beq.n	80039d2 <OV5640_SetPixelFormat+0xfe>
            {
              ret = OV5640_ERROR;
 80039ca:	f04f 33ff 	mov.w	r3, #4294967295
 80039ce:	617b      	str	r3, [r7, #20]
 80039d0:	e003      	b.n	80039da <OV5640_SetPixelFormat+0x106>
            }
            else
            {
              (void)OV5640_Delay(OV5640, 1);
 80039d2:	2101      	movs	r1, #1
 80039d4:	6878      	ldr	r0, [r7, #4]
 80039d6:	f7ff fe6f 	bl	80036b8 <OV5640_Delay>
        for (index = 0; index < (sizeof(OV5640_PF_RGB888) / 4U); index++)
 80039da:	693b      	ldr	r3, [r7, #16]
 80039dc:	3301      	adds	r3, #1
 80039de:	613b      	str	r3, [r7, #16]
 80039e0:	693b      	ldr	r3, [r7, #16]
 80039e2:	2b01      	cmp	r3, #1
 80039e4:	d9d7      	bls.n	8003996 <OV5640_SetPixelFormat+0xc2>
            }
          }
        }
        break;
 80039e6:	e083      	b.n	8003af0 <OV5640_SetPixelFormat+0x21c>

      case OV5640_Y8:
        for (index = 0; index < (sizeof(OV5640_PF_Y8) / 4U); index++)
 80039e8:	2300      	movs	r3, #0
 80039ea:	613b      	str	r3, [r7, #16]
 80039ec:	e024      	b.n	8003a38 <OV5640_SetPixelFormat+0x164>
        {
          if (ret != OV5640_ERROR)
 80039ee:	697b      	ldr	r3, [r7, #20]
 80039f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039f4:	d01d      	beq.n	8003a32 <OV5640_SetPixelFormat+0x15e>
          {
            tmp = (uint8_t)OV5640_PF_Y8[index][1];
 80039f6:	4a7e      	ldr	r2, [pc, #504]	; (8003bf0 <OV5640_SetPixelFormat+0x31c>)
 80039f8:	693b      	ldr	r3, [r7, #16]
 80039fa:	009b      	lsls	r3, r3, #2
 80039fc:	4413      	add	r3, r2
 80039fe:	885b      	ldrh	r3, [r3, #2]
 8003a00:	b2db      	uxtb	r3, r3
 8003a02:	73fb      	strb	r3, [r7, #15]
            if (OV5640_WriteReg(&OV5640->Context, OV5640_PF_Y8[index][0], &tmp, 1) != OV5640_OK)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	f103 0018 	add.w	r0, r3, #24
 8003a0a:	4a79      	ldr	r2, [pc, #484]	; (8003bf0 <OV5640_SetPixelFormat+0x31c>)
 8003a0c:	693b      	ldr	r3, [r7, #16]
 8003a0e:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8003a12:	f107 020f 	add.w	r2, r7, #15
 8003a16:	2301      	movs	r3, #1
 8003a18:	f7ff fe05 	bl	8003626 <OV5640_WriteReg>
 8003a1c:	4603      	mov	r3, r0
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d003      	beq.n	8003a2a <OV5640_SetPixelFormat+0x156>
            {
              ret = OV5640_ERROR;
 8003a22:	f04f 33ff 	mov.w	r3, #4294967295
 8003a26:	617b      	str	r3, [r7, #20]
 8003a28:	e003      	b.n	8003a32 <OV5640_SetPixelFormat+0x15e>
            }
            else
            {
              (void)OV5640_Delay(OV5640, 1);
 8003a2a:	2101      	movs	r1, #1
 8003a2c:	6878      	ldr	r0, [r7, #4]
 8003a2e:	f7ff fe43 	bl	80036b8 <OV5640_Delay>
        for (index = 0; index < (sizeof(OV5640_PF_Y8) / 4U); index++)
 8003a32:	693b      	ldr	r3, [r7, #16]
 8003a34:	3301      	adds	r3, #1
 8003a36:	613b      	str	r3, [r7, #16]
 8003a38:	693b      	ldr	r3, [r7, #16]
 8003a3a:	2b01      	cmp	r3, #1
 8003a3c:	d9d7      	bls.n	80039ee <OV5640_SetPixelFormat+0x11a>
            }
          }
        }
        break;
 8003a3e:	e057      	b.n	8003af0 <OV5640_SetPixelFormat+0x21c>

      case OV5640_JPEG:
        for (index = 0; index < (sizeof(OV5640_PF_JPEG) / 4U); index++)
 8003a40:	2300      	movs	r3, #0
 8003a42:	613b      	str	r3, [r7, #16]
 8003a44:	e024      	b.n	8003a90 <OV5640_SetPixelFormat+0x1bc>
        {
          if (ret != OV5640_ERROR)
 8003a46:	697b      	ldr	r3, [r7, #20]
 8003a48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a4c:	d01d      	beq.n	8003a8a <OV5640_SetPixelFormat+0x1b6>
          {
            tmp = (uint8_t)OV5640_PF_JPEG[index][1];
 8003a4e:	4a69      	ldr	r2, [pc, #420]	; (8003bf4 <OV5640_SetPixelFormat+0x320>)
 8003a50:	693b      	ldr	r3, [r7, #16]
 8003a52:	009b      	lsls	r3, r3, #2
 8003a54:	4413      	add	r3, r2
 8003a56:	885b      	ldrh	r3, [r3, #2]
 8003a58:	b2db      	uxtb	r3, r3
 8003a5a:	73fb      	strb	r3, [r7, #15]
            if (OV5640_WriteReg(&OV5640->Context, OV5640_PF_JPEG[index][0], &tmp, 1) != OV5640_OK)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	f103 0018 	add.w	r0, r3, #24
 8003a62:	4a64      	ldr	r2, [pc, #400]	; (8003bf4 <OV5640_SetPixelFormat+0x320>)
 8003a64:	693b      	ldr	r3, [r7, #16]
 8003a66:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8003a6a:	f107 020f 	add.w	r2, r7, #15
 8003a6e:	2301      	movs	r3, #1
 8003a70:	f7ff fdd9 	bl	8003626 <OV5640_WriteReg>
 8003a74:	4603      	mov	r3, r0
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d003      	beq.n	8003a82 <OV5640_SetPixelFormat+0x1ae>
            {
              ret = OV5640_ERROR;
 8003a7a:	f04f 33ff 	mov.w	r3, #4294967295
 8003a7e:	617b      	str	r3, [r7, #20]
 8003a80:	e003      	b.n	8003a8a <OV5640_SetPixelFormat+0x1b6>
            }
            else
            {
              (void)OV5640_Delay(OV5640, 1);
 8003a82:	2101      	movs	r1, #1
 8003a84:	6878      	ldr	r0, [r7, #4]
 8003a86:	f7ff fe17 	bl	80036b8 <OV5640_Delay>
        for (index = 0; index < (sizeof(OV5640_PF_JPEG) / 4U); index++)
 8003a8a:	693b      	ldr	r3, [r7, #16]
 8003a8c:	3301      	adds	r3, #1
 8003a8e:	613b      	str	r3, [r7, #16]
 8003a90:	693b      	ldr	r3, [r7, #16]
 8003a92:	2b01      	cmp	r3, #1
 8003a94:	d9d7      	bls.n	8003a46 <OV5640_SetPixelFormat+0x172>
            }
          }
        }
        break;
 8003a96:	e02b      	b.n	8003af0 <OV5640_SetPixelFormat+0x21c>

      case OV5640_RGB565:
      default:
        for (index = 0; index < (sizeof(OV5640_PF_RGB565) / 4U); index++)
 8003a98:	2300      	movs	r3, #0
 8003a9a:	613b      	str	r3, [r7, #16]
 8003a9c:	e024      	b.n	8003ae8 <OV5640_SetPixelFormat+0x214>
        {
          if (ret != OV5640_ERROR)
 8003a9e:	697b      	ldr	r3, [r7, #20]
 8003aa0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003aa4:	d01d      	beq.n	8003ae2 <OV5640_SetPixelFormat+0x20e>
          {
            tmp = (uint8_t)OV5640_PF_RGB565[index][1];
 8003aa6:	4a54      	ldr	r2, [pc, #336]	; (8003bf8 <OV5640_SetPixelFormat+0x324>)
 8003aa8:	693b      	ldr	r3, [r7, #16]
 8003aaa:	009b      	lsls	r3, r3, #2
 8003aac:	4413      	add	r3, r2
 8003aae:	885b      	ldrh	r3, [r3, #2]
 8003ab0:	b2db      	uxtb	r3, r3
 8003ab2:	73fb      	strb	r3, [r7, #15]
            if (OV5640_WriteReg(&OV5640->Context, OV5640_PF_RGB565[index][0], &tmp, 1) != OV5640_OK)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	f103 0018 	add.w	r0, r3, #24
 8003aba:	4a4f      	ldr	r2, [pc, #316]	; (8003bf8 <OV5640_SetPixelFormat+0x324>)
 8003abc:	693b      	ldr	r3, [r7, #16]
 8003abe:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8003ac2:	f107 020f 	add.w	r2, r7, #15
 8003ac6:	2301      	movs	r3, #1
 8003ac8:	f7ff fdad 	bl	8003626 <OV5640_WriteReg>
 8003acc:	4603      	mov	r3, r0
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d003      	beq.n	8003ada <OV5640_SetPixelFormat+0x206>
            {
              ret = OV5640_ERROR;
 8003ad2:	f04f 33ff 	mov.w	r3, #4294967295
 8003ad6:	617b      	str	r3, [r7, #20]
 8003ad8:	e003      	b.n	8003ae2 <OV5640_SetPixelFormat+0x20e>
            }
            else
            {
              (void)OV5640_Delay(OV5640, 1);
 8003ada:	2101      	movs	r1, #1
 8003adc:	6878      	ldr	r0, [r7, #4]
 8003ade:	f7ff fdeb 	bl	80036b8 <OV5640_Delay>
        for (index = 0; index < (sizeof(OV5640_PF_RGB565) / 4U); index++)
 8003ae2:	693b      	ldr	r3, [r7, #16]
 8003ae4:	3301      	adds	r3, #1
 8003ae6:	613b      	str	r3, [r7, #16]
 8003ae8:	693b      	ldr	r3, [r7, #16]
 8003aea:	2b01      	cmp	r3, #1
 8003aec:	d9d7      	bls.n	8003a9e <OV5640_SetPixelFormat+0x1ca>
            }
          }
        }
        break;
 8003aee:	bf00      	nop

    }

    if (PixelFormat == OV5640_JPEG)
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	2b08      	cmp	r3, #8
 8003af4:	d173      	bne.n	8003bde <OV5640_SetPixelFormat+0x30a>
    {
      if (OV5640_ReadReg(&OV5640->Context, OV5640_TIMING_TC_REG21, &tmp, 1) != OV5640_OK)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	f103 0018 	add.w	r0, r3, #24
 8003afc:	f107 020f 	add.w	r2, r7, #15
 8003b00:	2301      	movs	r3, #1
 8003b02:	f643 0121 	movw	r1, #14369	; 0x3821
 8003b06:	f7ff fd77 	bl	80035f8 <OV5640_ReadReg>
 8003b0a:	4603      	mov	r3, r0
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d003      	beq.n	8003b18 <OV5640_SetPixelFormat+0x244>
      {
        ret = OV5640_ERROR;
 8003b10:	f04f 33ff 	mov.w	r3, #4294967295
 8003b14:	617b      	str	r3, [r7, #20]
 8003b16:	e062      	b.n	8003bde <OV5640_SetPixelFormat+0x30a>
      }
      else
      {
        tmp |= (1 << 5);
 8003b18:	7bfb      	ldrb	r3, [r7, #15]
 8003b1a:	f043 0320 	orr.w	r3, r3, #32
 8003b1e:	b2db      	uxtb	r3, r3
 8003b20:	73fb      	strb	r3, [r7, #15]
        if (OV5640_WriteReg(&OV5640->Context, OV5640_TIMING_TC_REG21, &tmp, 1) != OV5640_OK)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	f103 0018 	add.w	r0, r3, #24
 8003b28:	f107 020f 	add.w	r2, r7, #15
 8003b2c:	2301      	movs	r3, #1
 8003b2e:	f643 0121 	movw	r1, #14369	; 0x3821
 8003b32:	f7ff fd78 	bl	8003626 <OV5640_WriteReg>
 8003b36:	4603      	mov	r3, r0
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d003      	beq.n	8003b44 <OV5640_SetPixelFormat+0x270>
        {
          ret = OV5640_ERROR;
 8003b3c:	f04f 33ff 	mov.w	r3, #4294967295
 8003b40:	617b      	str	r3, [r7, #20]
 8003b42:	e04c      	b.n	8003bde <OV5640_SetPixelFormat+0x30a>
        }
        else
        {
          if (OV5640_ReadReg(&OV5640->Context, OV5640_SYSREM_RESET02, &tmp, 1) != OV5640_OK)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	f103 0018 	add.w	r0, r3, #24
 8003b4a:	f107 020f 	add.w	r2, r7, #15
 8003b4e:	2301      	movs	r3, #1
 8003b50:	f243 0102 	movw	r1, #12290	; 0x3002
 8003b54:	f7ff fd50 	bl	80035f8 <OV5640_ReadReg>
 8003b58:	4603      	mov	r3, r0
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d003      	beq.n	8003b66 <OV5640_SetPixelFormat+0x292>
          {
            ret = OV5640_ERROR;
 8003b5e:	f04f 33ff 	mov.w	r3, #4294967295
 8003b62:	617b      	str	r3, [r7, #20]
 8003b64:	e03b      	b.n	8003bde <OV5640_SetPixelFormat+0x30a>
          }
          else
          {
            tmp &= ~((1 << 4) | (1 << 3) | (1 << 2));
 8003b66:	7bfb      	ldrb	r3, [r7, #15]
 8003b68:	f023 031c 	bic.w	r3, r3, #28
 8003b6c:	b2db      	uxtb	r3, r3
 8003b6e:	73fb      	strb	r3, [r7, #15]
            if (OV5640_WriteReg(&OV5640->Context, OV5640_SYSREM_RESET02, &tmp, 1) != OV5640_OK)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	f103 0018 	add.w	r0, r3, #24
 8003b76:	f107 020f 	add.w	r2, r7, #15
 8003b7a:	2301      	movs	r3, #1
 8003b7c:	f243 0102 	movw	r1, #12290	; 0x3002
 8003b80:	f7ff fd51 	bl	8003626 <OV5640_WriteReg>
 8003b84:	4603      	mov	r3, r0
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d003      	beq.n	8003b92 <OV5640_SetPixelFormat+0x2be>
            {
              ret = OV5640_ERROR;
 8003b8a:	f04f 33ff 	mov.w	r3, #4294967295
 8003b8e:	617b      	str	r3, [r7, #20]
 8003b90:	e025      	b.n	8003bde <OV5640_SetPixelFormat+0x30a>
            }
            else
            {
              if (OV5640_ReadReg(&OV5640->Context, OV5640_CLOCK_ENABLE02, &tmp, 1) != OV5640_OK)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	f103 0018 	add.w	r0, r3, #24
 8003b98:	f107 020f 	add.w	r2, r7, #15
 8003b9c:	2301      	movs	r3, #1
 8003b9e:	f243 0106 	movw	r1, #12294	; 0x3006
 8003ba2:	f7ff fd29 	bl	80035f8 <OV5640_ReadReg>
 8003ba6:	4603      	mov	r3, r0
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d003      	beq.n	8003bb4 <OV5640_SetPixelFormat+0x2e0>
              {
                ret = OV5640_ERROR;
 8003bac:	f04f 33ff 	mov.w	r3, #4294967295
 8003bb0:	617b      	str	r3, [r7, #20]
 8003bb2:	e014      	b.n	8003bde <OV5640_SetPixelFormat+0x30a>
              }
              else
              {
                tmp |= ((1 << 5) | (1 << 3));
 8003bb4:	7bfb      	ldrb	r3, [r7, #15]
 8003bb6:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 8003bba:	b2db      	uxtb	r3, r3
 8003bbc:	73fb      	strb	r3, [r7, #15]
                if (OV5640_WriteReg(&OV5640->Context, OV5640_CLOCK_ENABLE02, &tmp, 1) != OV5640_OK)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	f103 0018 	add.w	r0, r3, #24
 8003bc4:	f107 020f 	add.w	r2, r7, #15
 8003bc8:	2301      	movs	r3, #1
 8003bca:	f243 0106 	movw	r1, #12294	; 0x3006
 8003bce:	f7ff fd2a 	bl	8003626 <OV5640_WriteReg>
 8003bd2:	4603      	mov	r3, r0
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d002      	beq.n	8003bde <OV5640_SetPixelFormat+0x30a>
                {
                  ret = OV5640_ERROR;
 8003bd8:	f04f 33ff 	mov.w	r3, #4294967295
 8003bdc:	617b      	str	r3, [r7, #20]
          }
        }
      }
    }
  }
  return ret;
 8003bde:	697b      	ldr	r3, [r7, #20]
}
 8003be0:	4618      	mov	r0, r3
 8003be2:	3718      	adds	r7, #24
 8003be4:	46bd      	mov	sp, r7
 8003be6:	bd80      	pop	{r7, pc}
 8003be8:	0800ee50 	.word	0x0800ee50
 8003bec:	0800ee58 	.word	0x0800ee58
 8003bf0:	0800ee60 	.word	0x0800ee60
 8003bf4:	0800ee68 	.word	0x0800ee68
 8003bf8:	0800ee70 	.word	0x0800ee70

08003bfc <OV5640_SetPolarities>:

int32_t OV5640_SetPolarities(OV5640_Handle_t *OV5640, uint32_t PclkPolarity, uint32_t HrefPolarity,
                             uint32_t VsyncPolarity)
{
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	b086      	sub	sp, #24
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	60f8      	str	r0, [r7, #12]
 8003c04:	60b9      	str	r1, [r7, #8]
 8003c06:	607a      	str	r2, [r7, #4]
 8003c08:	603b      	str	r3, [r7, #0]
  uint8_t tmp;
  int32_t ret = OV5640_OK;
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	617b      	str	r3, [r7, #20]

  if ((OV5640 == NULL) || ((PclkPolarity != OV5640_POLARITY_PCLK_LOW) && (PclkPolarity != OV5640_POLARITY_PCLK_HIGH)) ||
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d011      	beq.n	8003c38 <OV5640_SetPolarities+0x3c>
 8003c14:	68bb      	ldr	r3, [r7, #8]
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d002      	beq.n	8003c20 <OV5640_SetPolarities+0x24>
 8003c1a:	68bb      	ldr	r3, [r7, #8]
 8003c1c:	2b01      	cmp	r3, #1
 8003c1e:	d10b      	bne.n	8003c38 <OV5640_SetPolarities+0x3c>
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d002      	beq.n	8003c2c <OV5640_SetPolarities+0x30>
      ((HrefPolarity != OV5640_POLARITY_HREF_LOW) && (HrefPolarity != OV5640_POLARITY_HREF_HIGH)) ||
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	2b01      	cmp	r3, #1
 8003c2a:	d105      	bne.n	8003c38 <OV5640_SetPolarities+0x3c>
 8003c2c:	683b      	ldr	r3, [r7, #0]
 8003c2e:	2b01      	cmp	r3, #1
 8003c30:	d006      	beq.n	8003c40 <OV5640_SetPolarities+0x44>
      ((VsyncPolarity != OV5640_POLARITY_VSYNC_LOW) && (VsyncPolarity != OV5640_POLARITY_VSYNC_HIGH)))
 8003c32:	683b      	ldr	r3, [r7, #0]
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d003      	beq.n	8003c40 <OV5640_SetPolarities+0x44>
  {
    ret = OV5640_ERROR;
 8003c38:	f04f 33ff 	mov.w	r3, #4294967295
 8003c3c:	617b      	str	r3, [r7, #20]
 8003c3e:	e01e      	b.n	8003c7e <OV5640_SetPolarities+0x82>
  }
  else
  {
    tmp = (uint8_t)(PclkPolarity << 5U) | (HrefPolarity << 1U) | VsyncPolarity;
 8003c40:	68bb      	ldr	r3, [r7, #8]
 8003c42:	b2db      	uxtb	r3, r3
 8003c44:	015b      	lsls	r3, r3, #5
 8003c46:	b2da      	uxtb	r2, r3
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	b2db      	uxtb	r3, r3
 8003c4c:	005b      	lsls	r3, r3, #1
 8003c4e:	b2db      	uxtb	r3, r3
 8003c50:	4313      	orrs	r3, r2
 8003c52:	b2da      	uxtb	r2, r3
 8003c54:	683b      	ldr	r3, [r7, #0]
 8003c56:	b2db      	uxtb	r3, r3
 8003c58:	4313      	orrs	r3, r2
 8003c5a:	b2db      	uxtb	r3, r3
 8003c5c:	74fb      	strb	r3, [r7, #19]

    if (OV5640_WriteReg(&OV5640->Context, OV5640_POLARITY_CTRL, &tmp, 1) != OV5640_OK)
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	f103 0018 	add.w	r0, r3, #24
 8003c64:	f107 0213 	add.w	r2, r7, #19
 8003c68:	2301      	movs	r3, #1
 8003c6a:	f244 7140 	movw	r1, #18240	; 0x4740
 8003c6e:	f7ff fcda 	bl	8003626 <OV5640_WriteReg>
 8003c72:	4603      	mov	r3, r0
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d002      	beq.n	8003c7e <OV5640_SetPolarities+0x82>
    {
      ret = OV5640_ERROR;
 8003c78:	f04f 33ff 	mov.w	r3, #4294967295
 8003c7c:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 8003c7e:	697b      	ldr	r3, [r7, #20]
}
 8003c80:	4618      	mov	r0, r3
 8003c82:	3718      	adds	r7, #24
 8003c84:	46bd      	mov	sp, r7
 8003c86:	bd80      	pop	{r7, pc}

08003c88 <OV5640_ReadID>:

int32_t OV5640_ReadID(OV5640_Handle_t *OV5640, uint32_t *Id)
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b084      	sub	sp, #16
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
 8003c90:	6039      	str	r1, [r7, #0]

  /* Initialize I2C */
  //OV5640->IO.Init();

  /* Prepare the camera to be configured */
  tmp = 0x80;
 8003c92:	2380      	movs	r3, #128	; 0x80
 8003c94:	72fb      	strb	r3, [r7, #11]
  if (OV5640_WriteReg(&OV5640->Context, OV5640_SYSTEM_CTROL0, &tmp, 1) != OV5640_OK)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	f103 0018 	add.w	r0, r3, #24
 8003c9c:	f107 020b 	add.w	r2, r7, #11
 8003ca0:	2301      	movs	r3, #1
 8003ca2:	f243 0108 	movw	r1, #12296	; 0x3008
 8003ca6:	f7ff fcbe 	bl	8003626 <OV5640_WriteReg>
 8003caa:	4603      	mov	r3, r0
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d003      	beq.n	8003cb8 <OV5640_ReadID+0x30>
  {
    ret = OV5640_ERROR;
 8003cb0:	f04f 33ff 	mov.w	r3, #4294967295
 8003cb4:	60fb      	str	r3, [r7, #12]
 8003cb6:	e032      	b.n	8003d1e <OV5640_ReadID+0x96>
  }
  else
  {
    (void)OV5640_Delay(OV5640, 500);
 8003cb8:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8003cbc:	6878      	ldr	r0, [r7, #4]
 8003cbe:	f7ff fcfb 	bl	80036b8 <OV5640_Delay>

    if (OV5640_ReadReg(&OV5640->Context, OV5640_CHIP_ID_HIGH_BYTE, &tmp, 1) != OV5640_OK)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	f103 0018 	add.w	r0, r3, #24
 8003cc8:	f107 020b 	add.w	r2, r7, #11
 8003ccc:	2301      	movs	r3, #1
 8003cce:	f243 010a 	movw	r1, #12298	; 0x300a
 8003cd2:	f7ff fc91 	bl	80035f8 <OV5640_ReadReg>
 8003cd6:	4603      	mov	r3, r0
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d003      	beq.n	8003ce4 <OV5640_ReadID+0x5c>
    {
      ret = OV5640_ERROR;
 8003cdc:	f04f 33ff 	mov.w	r3, #4294967295
 8003ce0:	60fb      	str	r3, [r7, #12]
 8003ce2:	e01c      	b.n	8003d1e <OV5640_ReadID+0x96>
    }
    else
    {
      *Id = (uint32_t)tmp << 8U;
 8003ce4:	7afb      	ldrb	r3, [r7, #11]
 8003ce6:	021a      	lsls	r2, r3, #8
 8003ce8:	683b      	ldr	r3, [r7, #0]
 8003cea:	601a      	str	r2, [r3, #0]
      if (OV5640_ReadReg(&OV5640->Context, OV5640_CHIP_ID_LOW_BYTE, &tmp, 1) != OV5640_OK)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	f103 0018 	add.w	r0, r3, #24
 8003cf2:	f107 020b 	add.w	r2, r7, #11
 8003cf6:	2301      	movs	r3, #1
 8003cf8:	f243 010b 	movw	r1, #12299	; 0x300b
 8003cfc:	f7ff fc7c 	bl	80035f8 <OV5640_ReadReg>
 8003d00:	4603      	mov	r3, r0
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d003      	beq.n	8003d0e <OV5640_ReadID+0x86>
      {
        ret = OV5640_ERROR;
 8003d06:	f04f 33ff 	mov.w	r3, #4294967295
 8003d0a:	60fb      	str	r3, [r7, #12]
 8003d0c:	e007      	b.n	8003d1e <OV5640_ReadID+0x96>
      }
      else
      {
        *Id |= tmp;
 8003d0e:	683b      	ldr	r3, [r7, #0]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	7afa      	ldrb	r2, [r7, #11]
 8003d14:	431a      	orrs	r2, r3
 8003d16:	683b      	ldr	r3, [r7, #0]
 8003d18:	601a      	str	r2, [r3, #0]
        ret = OV5640_OK;
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	60fb      	str	r3, [r7, #12]
      }
    }
  }

  /* Component status */
  return ret;
 8003d1e:	68fb      	ldr	r3, [r7, #12]
}
 8003d20:	4618      	mov	r0, r3
 8003d22:	3710      	adds	r7, #16
 8003d24:	46bd      	mov	sp, r7
 8003d26:	bd80      	pop	{r7, pc}

08003d28 <App_ThreadX_Init>:
  * @brief  Application ThreadX Initialization.
  * @param memory_ptr: memory pointer
  * @retval int
  */
UINT App_ThreadX_Init(VOID *memory_ptr)
{
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	b08c      	sub	sp, #48	; 0x30
 8003d2c:	af08      	add	r7, sp, #32
 8003d2e:	6078      	str	r0, [r7, #4]
  UINT ret = TX_SUCCESS;
 8003d30:	2300      	movs	r3, #0
 8003d32:	60fb      	str	r3, [r7, #12]
  TX_BYTE_POOL *byte_pool = (TX_BYTE_POOL*)memory_ptr;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	60bb      	str	r3, [r7, #8]
   /* USER CODE BEGIN App_ThreadX_MEM_POOL */
  (void)byte_pool;
  /* USER CODE END App_ThreadX_MEM_POOL */

  /* USER CODE BEGIN App_ThreadX_Init */
  tx_event_flags_create(&LED_Evt, "LED Event");
 8003d38:	2224      	movs	r2, #36	; 0x24
 8003d3a:	4925      	ldr	r1, [pc, #148]	; (8003dd0 <App_ThreadX_Init+0xa8>)
 8003d3c:	4825      	ldr	r0, [pc, #148]	; (8003dd4 <App_ThreadX_Init+0xac>)
 8003d3e:	f00a fbcb 	bl	800e4d8 <_txe_event_flags_create>
  tx_thread_create(&thread_ptr1,
 8003d42:	23b0      	movs	r3, #176	; 0xb0
 8003d44:	9306      	str	r3, [sp, #24]
 8003d46:	2301      	movs	r3, #1
 8003d48:	9305      	str	r3, [sp, #20]
 8003d4a:	2301      	movs	r3, #1
 8003d4c:	9304      	str	r3, [sp, #16]
 8003d4e:	230f      	movs	r3, #15
 8003d50:	9303      	str	r3, [sp, #12]
 8003d52:	230f      	movs	r3, #15
 8003d54:	9302      	str	r3, [sp, #8]
 8003d56:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003d5a:	9301      	str	r3, [sp, #4]
 8003d5c:	4b1e      	ldr	r3, [pc, #120]	; (8003dd8 <App_ThreadX_Init+0xb0>)
 8003d5e:	9300      	str	r3, [sp, #0]
 8003d60:	f64b 63ef 	movw	r3, #48879	; 0xbeef
 8003d64:	4a1d      	ldr	r2, [pc, #116]	; (8003ddc <App_ThreadX_Init+0xb4>)
 8003d66:	491e      	ldr	r1, [pc, #120]	; (8003de0 <App_ThreadX_Init+0xb8>)
 8003d68:	481e      	ldr	r0, [pc, #120]	; (8003de4 <App_ThreadX_Init+0xbc>)
 8003d6a:	f00a fc75 	bl	800e658 <_txe_thread_create>
					15,
					15,
					1,
					TX_AUTO_START);

  tx_thread_create(&thread_ptr2,
 8003d6e:	23b0      	movs	r3, #176	; 0xb0
 8003d70:	9306      	str	r3, [sp, #24]
 8003d72:	2301      	movs	r3, #1
 8003d74:	9305      	str	r3, [sp, #20]
 8003d76:	2301      	movs	r3, #1
 8003d78:	9304      	str	r3, [sp, #16]
 8003d7a:	230f      	movs	r3, #15
 8003d7c:	9303      	str	r3, [sp, #12]
 8003d7e:	230f      	movs	r3, #15
 8003d80:	9302      	str	r3, [sp, #8]
 8003d82:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003d86:	9301      	str	r3, [sp, #4]
 8003d88:	4b17      	ldr	r3, [pc, #92]	; (8003de8 <App_ThreadX_Init+0xc0>)
 8003d8a:	9300      	str	r3, [sp, #0]
 8003d8c:	f64b 63ef 	movw	r3, #48879	; 0xbeef
 8003d90:	4a16      	ldr	r2, [pc, #88]	; (8003dec <App_ThreadX_Init+0xc4>)
 8003d92:	4917      	ldr	r1, [pc, #92]	; (8003df0 <App_ThreadX_Init+0xc8>)
 8003d94:	4817      	ldr	r0, [pc, #92]	; (8003df4 <App_ThreadX_Init+0xcc>)
 8003d96:	f00a fc5f 	bl	800e658 <_txe_thread_create>
					15,
					15,
					1,
					TX_AUTO_START);

  tx_thread_create(&thread_ptr3,
 8003d9a:	23b0      	movs	r3, #176	; 0xb0
 8003d9c:	9306      	str	r3, [sp, #24]
 8003d9e:	2301      	movs	r3, #1
 8003da0:	9305      	str	r3, [sp, #20]
 8003da2:	2301      	movs	r3, #1
 8003da4:	9304      	str	r3, [sp, #16]
 8003da6:	230f      	movs	r3, #15
 8003da8:	9303      	str	r3, [sp, #12]
 8003daa:	230f      	movs	r3, #15
 8003dac:	9302      	str	r3, [sp, #8]
 8003dae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003db2:	9301      	str	r3, [sp, #4]
 8003db4:	4b10      	ldr	r3, [pc, #64]	; (8003df8 <App_ThreadX_Init+0xd0>)
 8003db6:	9300      	str	r3, [sp, #0]
 8003db8:	f64b 63ef 	movw	r3, #48879	; 0xbeef
 8003dbc:	4a0f      	ldr	r2, [pc, #60]	; (8003dfc <App_ThreadX_Init+0xd4>)
 8003dbe:	4910      	ldr	r1, [pc, #64]	; (8003e00 <App_ThreadX_Init+0xd8>)
 8003dc0:	4810      	ldr	r0, [pc, #64]	; (8003e04 <App_ThreadX_Init+0xdc>)
 8003dc2:	f00a fc49 	bl	800e658 <_txe_thread_create>
					15,
					1,
					TX_AUTO_START);
  /* USER CODE END App_ThreadX_Init */

  return ret;
 8003dc6:	68fb      	ldr	r3, [r7, #12]
}
 8003dc8:	4618      	mov	r0, r3
 8003dca:	3710      	adds	r7, #16
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	bd80      	pop	{r7, pc}
 8003dd0:	0800e9d0 	.word	0x0800e9d0
 8003dd4:	20001340 	.word	0x20001340
 8003dd8:	20000530 	.word	0x20000530
 8003ddc:	08003e15 	.word	0x08003e15
 8003de0:	0800e9dc 	.word	0x0800e9dc
 8003de4:	20001130 	.word	0x20001130
 8003de8:	20000930 	.word	0x20000930
 8003dec:	08003e39 	.word	0x08003e39
 8003df0:	0800e9e4 	.word	0x0800e9e4
 8003df4:	200011e0 	.word	0x200011e0
 8003df8:	20000d30 	.word	0x20000d30
 8003dfc:	08003e5d 	.word	0x08003e5d
 8003e00:	0800e9ec 	.word	0x0800e9ec
 8003e04:	20001290 	.word	0x20001290

08003e08 <MX_ThreadX_Init>:
  * @brief  MX_ThreadX_Init
  * @param  None
  * @retval None
  */
void MX_ThreadX_Init(void)
{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN  Before_Kernel_Start */

  /* USER CODE END  Before_Kernel_Start */

  tx_kernel_enter();
 8003e0c:	f009 fab6 	bl	800d37c <_tx_initialize_kernel_enter>

  /* USER CODE BEGIN  Kernel_Start_Error */

  /* USER CODE END  Kernel_Start_Error */
}
 8003e10:	bf00      	nop
 8003e12:	bd80      	pop	{r7, pc}

08003e14 <thread1_evt>:

/* USER CODE BEGIN 1 */
VOID thread1_evt(ULONG initial_input){
 8003e14:	b580      	push	{r7, lr}
 8003e16:	b082      	sub	sp, #8
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
	while(1)
	{
		tx_event_flags_set(&LED_Evt,1,TX_OR);
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	2101      	movs	r1, #1
 8003e20:	4803      	ldr	r0, [pc, #12]	; (8003e30 <thread1_evt+0x1c>)
 8003e22:	f00a fbeb 	bl	800e5fc <_txe_event_flags_set>
		tx_thread_suspend(&thread_ptr1);
 8003e26:	4803      	ldr	r0, [pc, #12]	; (8003e34 <thread1_evt+0x20>)
 8003e28:	f00a fd26 	bl	800e878 <_txe_thread_suspend>
		tx_event_flags_set(&LED_Evt,1,TX_OR);
 8003e2c:	e7f6      	b.n	8003e1c <thread1_evt+0x8>
 8003e2e:	bf00      	nop
 8003e30:	20001340 	.word	0x20001340
 8003e34:	20001130 	.word	0x20001130

08003e38 <thread2_evt>:
	}
}

VOID thread2_evt(ULONG initial_input){
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	b082      	sub	sp, #8
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	6078      	str	r0, [r7, #4]
	while(1)
	{
		tx_event_flags_set(&LED_Evt,2,TX_OR);
 8003e40:	2200      	movs	r2, #0
 8003e42:	2102      	movs	r1, #2
 8003e44:	4803      	ldr	r0, [pc, #12]	; (8003e54 <thread2_evt+0x1c>)
 8003e46:	f00a fbd9 	bl	800e5fc <_txe_event_flags_set>
		tx_thread_suspend(&thread_ptr2);
 8003e4a:	4803      	ldr	r0, [pc, #12]	; (8003e58 <thread2_evt+0x20>)
 8003e4c:	f00a fd14 	bl	800e878 <_txe_thread_suspend>
		tx_event_flags_set(&LED_Evt,2,TX_OR);
 8003e50:	e7f6      	b.n	8003e40 <thread2_evt+0x8>
 8003e52:	bf00      	nop
 8003e54:	20001340 	.word	0x20001340
 8003e58:	200011e0 	.word	0x200011e0

08003e5c <thread_LED>:
	}
}

VOID thread_LED(ULONG initial_input){
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	b084      	sub	sp, #16
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]
	uint32_t FlagValue = 0;
 8003e64:	2300      	movs	r3, #0
 8003e66:	60fb      	str	r3, [r7, #12]
	while(1)
	{
		FlagValue = LED_Evt.tx_event_flags_group_current;
 8003e68:	4b0e      	ldr	r3, [pc, #56]	; (8003ea4 <thread_LED+0x48>)
 8003e6a:	689b      	ldr	r3, [r3, #8]
 8003e6c:	60fb      	str	r3, [r7, #12]

	    if(FlagValue == 3){
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	2b03      	cmp	r3, #3
 8003e72:	d1f9      	bne.n	8003e68 <thread_LED+0xc>
	        HAL_GPIO_TogglePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin);
 8003e74:	2180      	movs	r1, #128	; 0x80
 8003e76:	480c      	ldr	r0, [pc, #48]	; (8003ea8 <thread_LED+0x4c>)
 8003e78:	f003 ff5c 	bl	8007d34 <HAL_GPIO_TogglePin>
	        HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
 8003e7c:	2140      	movs	r1, #64	; 0x40
 8003e7e:	480a      	ldr	r0, [pc, #40]	; (8003ea8 <thread_LED+0x4c>)
 8003e80:	f003 ff58 	bl	8007d34 <HAL_GPIO_TogglePin>
	        tx_event_flags_set(&LED_Evt, 0xFFFC, TX_AND);
 8003e84:	2202      	movs	r2, #2
 8003e86:	f64f 71fc 	movw	r1, #65532	; 0xfffc
 8003e8a:	4806      	ldr	r0, [pc, #24]	; (8003ea4 <thread_LED+0x48>)
 8003e8c:	f00a fbb6 	bl	800e5fc <_txe_event_flags_set>
	        tx_thread_resume(&thread_ptr1);
 8003e90:	4806      	ldr	r0, [pc, #24]	; (8003eac <thread_LED+0x50>)
 8003e92:	f00a fcd3 	bl	800e83c <_txe_thread_resume>
	        tx_thread_resume(&thread_ptr2);
 8003e96:	4806      	ldr	r0, [pc, #24]	; (8003eb0 <thread_LED+0x54>)
 8003e98:	f00a fcd0 	bl	800e83c <_txe_thread_resume>
	        tx_thread_sleep(100);
 8003e9c:	2064      	movs	r0, #100	; 0x64
 8003e9e:	f009 fc75 	bl	800d78c <_tx_thread_sleep>
		FlagValue = LED_Evt.tx_event_flags_group_current;
 8003ea2:	e7e1      	b.n	8003e68 <thread_LED+0xc>
 8003ea4:	20001340 	.word	0x20001340
 8003ea8:	42021c00 	.word	0x42021c00
 8003eac:	20001130 	.word	0x20001130
 8003eb0:	200011e0 	.word	0x200011e0

08003eb4 <MX_CORDIC_Init>:

CORDIC_HandleTypeDef hcordic;

/* CORDIC init function */
void MX_CORDIC_Init(void)
{
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	af00      	add	r7, sp, #0
  /* USER CODE END CORDIC_Init 0 */

  /* USER CODE BEGIN CORDIC_Init 1 */

  /* USER CODE END CORDIC_Init 1 */
  hcordic.Instance = CORDIC;
 8003eb8:	4b06      	ldr	r3, [pc, #24]	; (8003ed4 <MX_CORDIC_Init+0x20>)
 8003eba:	4a07      	ldr	r2, [pc, #28]	; (8003ed8 <MX_CORDIC_Init+0x24>)
 8003ebc:	601a      	str	r2, [r3, #0]
  if (HAL_CORDIC_Init(&hcordic) != HAL_OK)
 8003ebe:	4805      	ldr	r0, [pc, #20]	; (8003ed4 <MX_CORDIC_Init+0x20>)
 8003ec0:	f001 fd06 	bl	80058d0 <HAL_CORDIC_Init>
 8003ec4:	4603      	mov	r3, r0
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d001      	beq.n	8003ece <MX_CORDIC_Init+0x1a>
  {
    Error_Handler();
 8003eca:	f001 f8eb 	bl	80050a4 <Error_Handler>
  }
  /* USER CODE BEGIN CORDIC_Init 2 */

  /* USER CODE END CORDIC_Init 2 */

}
 8003ece:	bf00      	nop
 8003ed0:	bd80      	pop	{r7, pc}
 8003ed2:	bf00      	nop
 8003ed4:	20001364 	.word	0x20001364
 8003ed8:	40021000 	.word	0x40021000

08003edc <HAL_CORDIC_MspInit>:

void HAL_CORDIC_MspInit(CORDIC_HandleTypeDef* cordicHandle)
{
 8003edc:	b480      	push	{r7}
 8003ede:	b085      	sub	sp, #20
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]

  if(cordicHandle->Instance==CORDIC)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	4a0b      	ldr	r2, [pc, #44]	; (8003f18 <HAL_CORDIC_MspInit+0x3c>)
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d10e      	bne.n	8003f0c <HAL_CORDIC_MspInit+0x30>
  {
  /* USER CODE BEGIN CORDIC_MspInit 0 */

  /* USER CODE END CORDIC_MspInit 0 */
    /* CORDIC clock enable */
    __HAL_RCC_CORDIC_CLK_ENABLE();
 8003eee:	4b0b      	ldr	r3, [pc, #44]	; (8003f1c <HAL_CORDIC_MspInit+0x40>)
 8003ef0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ef4:	4a09      	ldr	r2, [pc, #36]	; (8003f1c <HAL_CORDIC_MspInit+0x40>)
 8003ef6:	f043 0302 	orr.w	r3, r3, #2
 8003efa:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8003efe:	4b07      	ldr	r3, [pc, #28]	; (8003f1c <HAL_CORDIC_MspInit+0x40>)
 8003f00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f04:	f003 0302 	and.w	r3, r3, #2
 8003f08:	60fb      	str	r3, [r7, #12]
 8003f0a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CORDIC_MspInit 1 */

  /* USER CODE END CORDIC_MspInit 1 */
  }
}
 8003f0c:	bf00      	nop
 8003f0e:	3714      	adds	r7, #20
 8003f10:	46bd      	mov	sp, r7
 8003f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f16:	4770      	bx	lr
 8003f18:	40021000 	.word	0x40021000
 8003f1c:	46020c00 	.word	0x46020c00

08003f20 <MX_DCACHE1_Init>:

DCACHE_HandleTypeDef hdcache1;

/* DCACHE1 init function */
void MX_DCACHE1_Init(void)
{
 8003f20:	b580      	push	{r7, lr}
 8003f22:	af00      	add	r7, sp, #0
  /* USER CODE END DCACHE1_Init 0 */

  /* USER CODE BEGIN DCACHE1_Init 1 */

  /* USER CODE END DCACHE1_Init 1 */
  hdcache1.Instance = DCACHE1;
 8003f24:	4b07      	ldr	r3, [pc, #28]	; (8003f44 <MX_DCACHE1_Init+0x24>)
 8003f26:	4a08      	ldr	r2, [pc, #32]	; (8003f48 <MX_DCACHE1_Init+0x28>)
 8003f28:	601a      	str	r2, [r3, #0]
  hdcache1.Init.ReadBurstType = DCACHE_READ_BURST_WRAP;
 8003f2a:	4b06      	ldr	r3, [pc, #24]	; (8003f44 <MX_DCACHE1_Init+0x24>)
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	605a      	str	r2, [r3, #4]
  if (HAL_DCACHE_Init(&hdcache1) != HAL_OK)
 8003f30:	4804      	ldr	r0, [pc, #16]	; (8003f44 <MX_DCACHE1_Init+0x24>)
 8003f32:	f001 fddf 	bl	8005af4 <HAL_DCACHE_Init>
 8003f36:	4603      	mov	r3, r0
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d001      	beq.n	8003f40 <MX_DCACHE1_Init+0x20>
  {
    Error_Handler();
 8003f3c:	f001 f8b2 	bl	80050a4 <Error_Handler>
  }
  /* USER CODE BEGIN DCACHE1_Init 2 */

  /* USER CODE END DCACHE1_Init 2 */

}
 8003f40:	bf00      	nop
 8003f42:	bd80      	pop	{r7, pc}
 8003f44:	2000138c 	.word	0x2000138c
 8003f48:	40031400 	.word	0x40031400

08003f4c <MX_DCMI_Init>:

DCMI_HandleTypeDef hdcmi;

/* DCMI init function */
void MX_DCMI_Init(void)
{
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */

  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 8003f50:	4b16      	ldr	r3, [pc, #88]	; (8003fac <MX_DCMI_Init+0x60>)
 8003f52:	4a17      	ldr	r2, [pc, #92]	; (8003fb0 <MX_DCMI_Init+0x64>)
 8003f54:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 8003f56:	4b15      	ldr	r3, [pc, #84]	; (8003fac <MX_DCMI_Init+0x60>)
 8003f58:	2200      	movs	r2, #0
 8003f5a:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_RISING;
 8003f5c:	4b13      	ldr	r3, [pc, #76]	; (8003fac <MX_DCMI_Init+0x60>)
 8003f5e:	2220      	movs	r2, #32
 8003f60:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_HIGH;
 8003f62:	4b12      	ldr	r3, [pc, #72]	; (8003fac <MX_DCMI_Init+0x60>)
 8003f64:	2280      	movs	r2, #128	; 0x80
 8003f66:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_HIGH;
 8003f68:	4b10      	ldr	r3, [pc, #64]	; (8003fac <MX_DCMI_Init+0x60>)
 8003f6a:	2240      	movs	r2, #64	; 0x40
 8003f6c:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 8003f6e:	4b0f      	ldr	r3, [pc, #60]	; (8003fac <MX_DCMI_Init+0x60>)
 8003f70:	2200      	movs	r2, #0
 8003f72:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 8003f74:	4b0d      	ldr	r3, [pc, #52]	; (8003fac <MX_DCMI_Init+0x60>)
 8003f76:	2200      	movs	r2, #0
 8003f78:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 8003f7a:	4b0c      	ldr	r3, [pc, #48]	; (8003fac <MX_DCMI_Init+0x60>)
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	621a      	str	r2, [r3, #32]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 8003f80:	4b0a      	ldr	r3, [pc, #40]	; (8003fac <MX_DCMI_Init+0x60>)
 8003f82:	2200      	movs	r2, #0
 8003f84:	625a      	str	r2, [r3, #36]	; 0x24
  hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 8003f86:	4b09      	ldr	r3, [pc, #36]	; (8003fac <MX_DCMI_Init+0x60>)
 8003f88:	2200      	movs	r2, #0
 8003f8a:	629a      	str	r2, [r3, #40]	; 0x28
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 8003f8c:	4b07      	ldr	r3, [pc, #28]	; (8003fac <MX_DCMI_Init+0x60>)
 8003f8e:	2200      	movs	r2, #0
 8003f90:	62da      	str	r2, [r3, #44]	; 0x2c
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 8003f92:	4b06      	ldr	r3, [pc, #24]	; (8003fac <MX_DCMI_Init+0x60>)
 8003f94:	2200      	movs	r2, #0
 8003f96:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 8003f98:	4804      	ldr	r0, [pc, #16]	; (8003fac <MX_DCMI_Init+0x60>)
 8003f9a:	f001 fe61 	bl	8005c60 <HAL_DCMI_Init>
 8003f9e:	4603      	mov	r3, r0
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d001      	beq.n	8003fa8 <MX_DCMI_Init+0x5c>
  {
    Error_Handler();
 8003fa4:	f001 f87e 	bl	80050a4 <Error_Handler>
  }
  /* USER CODE BEGIN DCMI_Init 2 */

  /* USER CODE END DCMI_Init 2 */

}
 8003fa8:	bf00      	nop
 8003faa:	bd80      	pop	{r7, pc}
 8003fac:	200013b8 	.word	0x200013b8
 8003fb0:	4202c000 	.word	0x4202c000

08003fb4 <HAL_DCMI_MspInit>:

void HAL_DCMI_MspInit(DCMI_HandleTypeDef* dcmiHandle)
{
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	b08e      	sub	sp, #56	; 0x38
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003fbc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	601a      	str	r2, [r3, #0]
 8003fc4:	605a      	str	r2, [r3, #4]
 8003fc6:	609a      	str	r2, [r3, #8]
 8003fc8:	60da      	str	r2, [r3, #12]
 8003fca:	611a      	str	r2, [r3, #16]
  if(dcmiHandle->Instance==DCMI)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	4a6d      	ldr	r2, [pc, #436]	; (8004188 <HAL_DCMI_MspInit+0x1d4>)
 8003fd2:	4293      	cmp	r3, r2
 8003fd4:	f040 80d3 	bne.w	800417e <HAL_DCMI_MspInit+0x1ca>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */

  /* USER CODE END DCMI_MspInit 0 */
    /* DCMI clock enable */
    __HAL_RCC_DCMI_PSSI_CLK_ENABLE();
 8003fd8:	4b6c      	ldr	r3, [pc, #432]	; (800418c <HAL_DCMI_MspInit+0x1d8>)
 8003fda:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003fde:	4a6b      	ldr	r2, [pc, #428]	; (800418c <HAL_DCMI_MspInit+0x1d8>)
 8003fe0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003fe4:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003fe8:	4b68      	ldr	r3, [pc, #416]	; (800418c <HAL_DCMI_MspInit+0x1d8>)
 8003fea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003fee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003ff2:	623b      	str	r3, [r7, #32]
 8003ff4:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOI_CLK_ENABLE();
 8003ff6:	4b65      	ldr	r3, [pc, #404]	; (800418c <HAL_DCMI_MspInit+0x1d8>)
 8003ff8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003ffc:	4a63      	ldr	r2, [pc, #396]	; (800418c <HAL_DCMI_MspInit+0x1d8>)
 8003ffe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004002:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004006:	4b61      	ldr	r3, [pc, #388]	; (800418c <HAL_DCMI_MspInit+0x1d8>)
 8004008:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800400c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004010:	61fb      	str	r3, [r7, #28]
 8004012:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8004014:	4b5d      	ldr	r3, [pc, #372]	; (800418c <HAL_DCMI_MspInit+0x1d8>)
 8004016:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800401a:	4a5c      	ldr	r2, [pc, #368]	; (800418c <HAL_DCMI_MspInit+0x1d8>)
 800401c:	f043 0310 	orr.w	r3, r3, #16
 8004020:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004024:	4b59      	ldr	r3, [pc, #356]	; (800418c <HAL_DCMI_MspInit+0x1d8>)
 8004026:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800402a:	f003 0310 	and.w	r3, r3, #16
 800402e:	61bb      	str	r3, [r7, #24]
 8004030:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8004032:	4b56      	ldr	r3, [pc, #344]	; (800418c <HAL_DCMI_MspInit+0x1d8>)
 8004034:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004038:	4a54      	ldr	r2, [pc, #336]	; (800418c <HAL_DCMI_MspInit+0x1d8>)
 800403a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800403e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004042:	4b52      	ldr	r3, [pc, #328]	; (800418c <HAL_DCMI_MspInit+0x1d8>)
 8004044:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004048:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800404c:	617b      	str	r3, [r7, #20]
 800404e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004050:	4b4e      	ldr	r3, [pc, #312]	; (800418c <HAL_DCMI_MspInit+0x1d8>)
 8004052:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004056:	4a4d      	ldr	r2, [pc, #308]	; (800418c <HAL_DCMI_MspInit+0x1d8>)
 8004058:	f043 0302 	orr.w	r3, r3, #2
 800405c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004060:	4b4a      	ldr	r3, [pc, #296]	; (800418c <HAL_DCMI_MspInit+0x1d8>)
 8004062:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004066:	f003 0302 	and.w	r3, r3, #2
 800406a:	613b      	str	r3, [r7, #16]
 800406c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800406e:	4b47      	ldr	r3, [pc, #284]	; (800418c <HAL_DCMI_MspInit+0x1d8>)
 8004070:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004074:	4a45      	ldr	r2, [pc, #276]	; (800418c <HAL_DCMI_MspInit+0x1d8>)
 8004076:	f043 0304 	orr.w	r3, r3, #4
 800407a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800407e:	4b43      	ldr	r3, [pc, #268]	; (800418c <HAL_DCMI_MspInit+0x1d8>)
 8004080:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004084:	f003 0304 	and.w	r3, r3, #4
 8004088:	60fb      	str	r3, [r7, #12]
 800408a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800408c:	4b3f      	ldr	r3, [pc, #252]	; (800418c <HAL_DCMI_MspInit+0x1d8>)
 800408e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004092:	4a3e      	ldr	r2, [pc, #248]	; (800418c <HAL_DCMI_MspInit+0x1d8>)
 8004094:	f043 0301 	orr.w	r3, r3, #1
 8004098:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800409c:	4b3b      	ldr	r3, [pc, #236]	; (800418c <HAL_DCMI_MspInit+0x1d8>)
 800409e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80040a2:	f003 0301 	and.w	r3, r3, #1
 80040a6:	60bb      	str	r3, [r7, #8]
 80040a8:	68bb      	ldr	r3, [r7, #8]
    PC8     ------> DCMI_D2
    PC7     ------> DCMI_D1
    PC6     ------> DCMI_D0
    PA6     ------> DCMI_PIXCLK
    */
    GPIO_InitStruct.Pin = CAM_D6_Pin|CAM_D5_Pin|CAM_D7_Pin;
 80040aa:	23d0      	movs	r3, #208	; 0xd0
 80040ac:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040ae:	2302      	movs	r3, #2
 80040b0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040b2:	2300      	movs	r3, #0
 80040b4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80040b6:	2303      	movs	r3, #3
 80040b8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_DCMI;
 80040ba:	230a      	movs	r3, #10
 80040bc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80040be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80040c2:	4619      	mov	r1, r3
 80040c4:	4832      	ldr	r0, [pc, #200]	; (8004190 <HAL_DCMI_MspInit+0x1dc>)
 80040c6:	f003 fb4f 	bl	8007768 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CAM_D3_Pin;
 80040ca:	2302      	movs	r3, #2
 80040cc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040ce:	2302      	movs	r3, #2
 80040d0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040d2:	2300      	movs	r3, #0
 80040d4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80040d6:	2303      	movs	r3, #3
 80040d8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_DCMI;
 80040da:	230a      	movs	r3, #10
 80040dc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(CAM_D3_GPIO_Port, &GPIO_InitStruct);
 80040de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80040e2:	4619      	mov	r1, r3
 80040e4:	482b      	ldr	r0, [pc, #172]	; (8004194 <HAL_DCMI_MspInit+0x1e0>)
 80040e6:	f003 fb3f 	bl	8007768 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CAM_D4_Pin|CAM_HSYNC_Pin;
 80040ea:	f44f 4382 	mov.w	r3, #16640	; 0x4100
 80040ee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040f0:	2302      	movs	r3, #2
 80040f2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040f4:	2300      	movs	r3, #0
 80040f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80040f8:	2303      	movs	r3, #3
 80040fa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_DCMI;
 80040fc:	230a      	movs	r3, #10
 80040fe:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8004100:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004104:	4619      	mov	r1, r3
 8004106:	4824      	ldr	r0, [pc, #144]	; (8004198 <HAL_DCMI_MspInit+0x1e4>)
 8004108:	f003 fb2e 	bl	8007768 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CAM_VSYNC_Pin;
 800410c:	2380      	movs	r3, #128	; 0x80
 800410e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004110:	2302      	movs	r3, #2
 8004112:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004114:	2300      	movs	r3, #0
 8004116:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004118:	2303      	movs	r3, #3
 800411a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_DCMI;
 800411c:	230a      	movs	r3, #10
 800411e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(CAM_VSYNC_GPIO_Port, &GPIO_InitStruct);
 8004120:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004124:	4619      	mov	r1, r3
 8004126:	481d      	ldr	r0, [pc, #116]	; (800419c <HAL_DCMI_MspInit+0x1e8>)
 8004128:	f003 fb1e 	bl	8007768 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CAM_D2_Pin|CAM_D1_Pin|CAM_D0_Pin;
 800412c:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8004130:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004132:	2302      	movs	r3, #2
 8004134:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004136:	2300      	movs	r3, #0
 8004138:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800413a:	2303      	movs	r3, #3
 800413c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_DCMI;
 800413e:	230a      	movs	r3, #10
 8004140:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004142:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004146:	4619      	mov	r1, r3
 8004148:	4815      	ldr	r0, [pc, #84]	; (80041a0 <HAL_DCMI_MspInit+0x1ec>)
 800414a:	f003 fb0d 	bl	8007768 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CAM_PIXCLK_Pin;
 800414e:	2340      	movs	r3, #64	; 0x40
 8004150:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004152:	2302      	movs	r3, #2
 8004154:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004156:	2300      	movs	r3, #0
 8004158:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800415a:	2303      	movs	r3, #3
 800415c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_DCMI;
 800415e:	2304      	movs	r3, #4
 8004160:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(CAM_PIXCLK_GPIO_Port, &GPIO_InitStruct);
 8004162:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004166:	4619      	mov	r1, r3
 8004168:	480e      	ldr	r0, [pc, #56]	; (80041a4 <HAL_DCMI_MspInit+0x1f0>)
 800416a:	f003 fafd 	bl	8007768 <HAL_GPIO_Init>

    /* DCMI interrupt Init */
    HAL_NVIC_SetPriority(DCMI_PSSI_IRQn, 15, 0);
 800416e:	2200      	movs	r2, #0
 8004170:	210f      	movs	r1, #15
 8004172:	2077      	movs	r0, #119	; 0x77
 8004174:	f001 fc96 	bl	8005aa4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DCMI_PSSI_IRQn);
 8004178:	2077      	movs	r0, #119	; 0x77
 800417a:	f001 fcad 	bl	8005ad8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DCMI_MspInit 1 */

  /* USER CODE END DCMI_MspInit 1 */
  }
}
 800417e:	bf00      	nop
 8004180:	3738      	adds	r7, #56	; 0x38
 8004182:	46bd      	mov	sp, r7
 8004184:	bd80      	pop	{r7, pc}
 8004186:	bf00      	nop
 8004188:	4202c000 	.word	0x4202c000
 800418c:	46020c00 	.word	0x46020c00
 8004190:	42022000 	.word	0x42022000
 8004194:	42021000 	.word	0x42021000
 8004198:	42021c00 	.word	0x42021c00
 800419c:	42020400 	.word	0x42020400
 80041a0:	42020800 	.word	0x42020800
 80041a4:	42020000 	.word	0x42020000

080041a8 <MX_GPDMA1_Init>:
DMA_HandleTypeDef handle_GPDMA1_Channel12;
DMA_HandleTypeDef handle_GPDMA1_Channel12;

/* GPDMA1 init function */
void MX_GPDMA1_Init(void)
{
 80041a8:	b580      	push	{r7, lr}
 80041aa:	b082      	sub	sp, #8
 80041ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Init 0 */

  /* USER CODE END GPDMA1_Init 0 */

  /* Peripheral clock enable */
  __HAL_RCC_GPDMA1_CLK_ENABLE();
 80041ae:	4b26      	ldr	r3, [pc, #152]	; (8004248 <MX_GPDMA1_Init+0xa0>)
 80041b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041b4:	4a24      	ldr	r2, [pc, #144]	; (8004248 <MX_GPDMA1_Init+0xa0>)
 80041b6:	f043 0301 	orr.w	r3, r3, #1
 80041ba:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 80041be:	4b22      	ldr	r3, [pc, #136]	; (8004248 <MX_GPDMA1_Init+0xa0>)
 80041c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041c4:	f003 0301 	and.w	r3, r3, #1
 80041c8:	607b      	str	r3, [r7, #4]
 80041ca:	687b      	ldr	r3, [r7, #4]

  /* GPDMA1 interrupt Init */
    HAL_NVIC_SetPriority(GPDMA1_Channel12_IRQn, 15, 0);
 80041cc:	2200      	movs	r2, #0
 80041ce:	210f      	movs	r1, #15
 80041d0:	2054      	movs	r0, #84	; 0x54
 80041d2:	f001 fc67 	bl	8005aa4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel12_IRQn);
 80041d6:	2054      	movs	r0, #84	; 0x54
 80041d8:	f001 fc7e 	bl	8005ad8 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN GPDMA1_Init 1 */

  /* USER CODE END GPDMA1_Init 1 */
  handle_GPDMA1_Channel12.Instance = GPDMA1_Channel12;
 80041dc:	4b1b      	ldr	r3, [pc, #108]	; (800424c <MX_GPDMA1_Init+0xa4>)
 80041de:	4a1c      	ldr	r2, [pc, #112]	; (8004250 <MX_GPDMA1_Init+0xa8>)
 80041e0:	601a      	str	r2, [r3, #0]
  handle_GPDMA1_Channel12.InitLinkedList.Priority = DMA_LOW_PRIORITY_LOW_WEIGHT;
 80041e2:	4b1a      	ldr	r3, [pc, #104]	; (800424c <MX_GPDMA1_Init+0xa4>)
 80041e4:	2200      	movs	r2, #0
 80041e6:	639a      	str	r2, [r3, #56]	; 0x38
  handle_GPDMA1_Channel12.InitLinkedList.LinkStepMode = DMA_LSM_FULL_EXECUTION;
 80041e8:	4b18      	ldr	r3, [pc, #96]	; (800424c <MX_GPDMA1_Init+0xa4>)
 80041ea:	2200      	movs	r2, #0
 80041ec:	63da      	str	r2, [r3, #60]	; 0x3c
  handle_GPDMA1_Channel12.InitLinkedList.LinkAllocatedPort = DMA_LINK_ALLOCATED_PORT1;
 80041ee:	4b17      	ldr	r3, [pc, #92]	; (800424c <MX_GPDMA1_Init+0xa4>)
 80041f0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80041f4:	641a      	str	r2, [r3, #64]	; 0x40
  handle_GPDMA1_Channel12.InitLinkedList.TransferEventMode = DMA_TCEM_LAST_LL_ITEM_TRANSFER;
 80041f6:	4b15      	ldr	r3, [pc, #84]	; (800424c <MX_GPDMA1_Init+0xa4>)
 80041f8:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
 80041fc:	645a      	str	r2, [r3, #68]	; 0x44
  handle_GPDMA1_Channel12.InitLinkedList.LinkedListMode = DMA_LINKEDLIST_CIRCULAR;
 80041fe:	4b13      	ldr	r3, [pc, #76]	; (800424c <MX_GPDMA1_Init+0xa4>)
 8004200:	2281      	movs	r2, #129	; 0x81
 8004202:	649a      	str	r2, [r3, #72]	; 0x48
  if (HAL_DMAEx_List_Init(&handle_GPDMA1_Channel12) != HAL_OK)
 8004204:	4811      	ldr	r0, [pc, #68]	; (800424c <MX_GPDMA1_Init+0xa4>)
 8004206:	f002 fb75 	bl	80068f4 <HAL_DMAEx_List_Init>
 800420a:	4603      	mov	r3, r0
 800420c:	2b00      	cmp	r3, #0
 800420e:	d001      	beq.n	8004214 <MX_GPDMA1_Init+0x6c>
  {
    Error_Handler();
 8004210:	f000 ff48 	bl	80050a4 <Error_Handler>
  }
  if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel12, DMA_CHANNEL_PRIV) != HAL_OK)
 8004214:	2111      	movs	r1, #17
 8004216:	480d      	ldr	r0, [pc, #52]	; (800424c <MX_GPDMA1_Init+0xa4>)
 8004218:	f002 fb0a 	bl	8006830 <HAL_DMA_ConfigChannelAttributes>
 800421c:	4603      	mov	r3, r0
 800421e:	2b00      	cmp	r3, #0
 8004220:	d001      	beq.n	8004226 <MX_GPDMA1_Init+0x7e>
  {
    Error_Handler();
 8004222:	f000 ff3f 	bl	80050a4 <Error_Handler>
  }
  /* USER CODE BEGIN GPDMA1_Init 2 */
  MX_ProjectDMAQueue_Config();
 8004226:	f000 fd59 	bl	8004cdc <MX_ProjectDMAQueue_Config>
  HAL_DMAEx_List_LinkQ(&handle_GPDMA1_Channel12, &ProjectDMAQueue);
 800422a:	490a      	ldr	r1, [pc, #40]	; (8004254 <MX_GPDMA1_Init+0xac>)
 800422c:	4807      	ldr	r0, [pc, #28]	; (800424c <MX_GPDMA1_Init+0xa4>)
 800422e:	f002 fe1f 	bl	8006e70 <HAL_DMAEx_List_LinkQ>
  //HAL_DMAEx_List_Start(&handle_GPDMA1_Channel12);
  __HAL_LINKDMA(&hdcmi, DMA_Handle, handle_GPDMA1_Channel12);
 8004232:	4b09      	ldr	r3, [pc, #36]	; (8004258 <MX_GPDMA1_Init+0xb0>)
 8004234:	4a05      	ldr	r2, [pc, #20]	; (800424c <MX_GPDMA1_Init+0xa4>)
 8004236:	649a      	str	r2, [r3, #72]	; 0x48
 8004238:	4b04      	ldr	r3, [pc, #16]	; (800424c <MX_GPDMA1_Init+0xa4>)
 800423a:	4a07      	ldr	r2, [pc, #28]	; (8004258 <MX_GPDMA1_Init+0xb0>)
 800423c:	65da      	str	r2, [r3, #92]	; 0x5c
  /* USER CODE END GPDMA1_Init 2 */

}
 800423e:	bf00      	nop
 8004240:	3708      	adds	r7, #8
 8004242:	46bd      	mov	sp, r7
 8004244:	bd80      	pop	{r7, pc}
 8004246:	bf00      	nop
 8004248:	46020c00 	.word	0x46020c00
 800424c:	20001408 	.word	0x20001408
 8004250:	40020650 	.word	0x40020650
 8004254:	2000153c 	.word	0x2000153c
 8004258:	200013b8 	.word	0x200013b8

0800425c <MX_GPIO_Init>:
     PB12   ------> SPI2_NSS
     PB15   ------> UCPD1_CC2
     PB1   ------> MDF1_SDI0
*/
void MX_GPIO_Init(void)
{
 800425c:	b580      	push	{r7, lr}
 800425e:	b08e      	sub	sp, #56	; 0x38
 8004260:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004262:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004266:	2200      	movs	r2, #0
 8004268:	601a      	str	r2, [r3, #0]
 800426a:	605a      	str	r2, [r3, #4]
 800426c:	609a      	str	r2, [r3, #8]
 800426e:	60da      	str	r2, [r3, #12]
 8004270:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8004272:	4bbf      	ldr	r3, [pc, #764]	; (8004570 <MX_GPIO_Init+0x314>)
 8004274:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004278:	4abd      	ldr	r2, [pc, #756]	; (8004570 <MX_GPIO_Init+0x314>)
 800427a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800427e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004282:	4bbb      	ldr	r3, [pc, #748]	; (8004570 <MX_GPIO_Init+0x314>)
 8004284:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004288:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800428c:	623b      	str	r3, [r7, #32]
 800428e:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8004290:	4bb7      	ldr	r3, [pc, #732]	; (8004570 <MX_GPIO_Init+0x314>)
 8004292:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004296:	4ab6      	ldr	r2, [pc, #728]	; (8004570 <MX_GPIO_Init+0x314>)
 8004298:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800429c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80042a0:	4bb3      	ldr	r3, [pc, #716]	; (8004570 <MX_GPIO_Init+0x314>)
 80042a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80042a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042aa:	61fb      	str	r3, [r7, #28]
 80042ac:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80042ae:	4bb0      	ldr	r3, [pc, #704]	; (8004570 <MX_GPIO_Init+0x314>)
 80042b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80042b4:	4aae      	ldr	r2, [pc, #696]	; (8004570 <MX_GPIO_Init+0x314>)
 80042b6:	f043 0304 	orr.w	r3, r3, #4
 80042ba:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80042be:	4bac      	ldr	r3, [pc, #688]	; (8004570 <MX_GPIO_Init+0x314>)
 80042c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80042c4:	f003 0304 	and.w	r3, r3, #4
 80042c8:	61bb      	str	r3, [r7, #24]
 80042ca:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80042cc:	4ba8      	ldr	r3, [pc, #672]	; (8004570 <MX_GPIO_Init+0x314>)
 80042ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80042d2:	4aa7      	ldr	r2, [pc, #668]	; (8004570 <MX_GPIO_Init+0x314>)
 80042d4:	f043 0301 	orr.w	r3, r3, #1
 80042d8:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80042dc:	4ba4      	ldr	r3, [pc, #656]	; (8004570 <MX_GPIO_Init+0x314>)
 80042de:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80042e2:	f003 0301 	and.w	r3, r3, #1
 80042e6:	617b      	str	r3, [r7, #20]
 80042e8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80042ea:	4ba1      	ldr	r3, [pc, #644]	; (8004570 <MX_GPIO_Init+0x314>)
 80042ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80042f0:	4a9f      	ldr	r2, [pc, #636]	; (8004570 <MX_GPIO_Init+0x314>)
 80042f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80042f6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80042fa:	4b9d      	ldr	r3, [pc, #628]	; (8004570 <MX_GPIO_Init+0x314>)
 80042fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004300:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004304:	613b      	str	r3, [r7, #16]
 8004306:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8004308:	4b99      	ldr	r3, [pc, #612]	; (8004570 <MX_GPIO_Init+0x314>)
 800430a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800430e:	4a98      	ldr	r2, [pc, #608]	; (8004570 <MX_GPIO_Init+0x314>)
 8004310:	f043 0310 	orr.w	r3, r3, #16
 8004314:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004318:	4b95      	ldr	r3, [pc, #596]	; (8004570 <MX_GPIO_Init+0x314>)
 800431a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800431e:	f003 0310 	and.w	r3, r3, #16
 8004322:	60fb      	str	r3, [r7, #12]
 8004324:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004326:	4b92      	ldr	r3, [pc, #584]	; (8004570 <MX_GPIO_Init+0x314>)
 8004328:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800432c:	4a90      	ldr	r2, [pc, #576]	; (8004570 <MX_GPIO_Init+0x314>)
 800432e:	f043 0302 	orr.w	r3, r3, #2
 8004332:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004336:	4b8e      	ldr	r3, [pc, #568]	; (8004570 <MX_GPIO_Init+0x314>)
 8004338:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800433c:	f003 0302 	and.w	r3, r3, #2
 8004340:	60bb      	str	r3, [r7, #8]
 8004342:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004344:	4b8a      	ldr	r3, [pc, #552]	; (8004570 <MX_GPIO_Init+0x314>)
 8004346:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800434a:	4a89      	ldr	r2, [pc, #548]	; (8004570 <MX_GPIO_Init+0x314>)
 800434c:	f043 0308 	orr.w	r3, r3, #8
 8004350:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004354:	4b86      	ldr	r3, [pc, #536]	; (8004570 <MX_GPIO_Init+0x314>)
 8004356:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800435a:	f003 0308 	and.w	r3, r3, #8
 800435e:	607b      	str	r3, [r7, #4]
 8004360:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8004362:	4b83      	ldr	r3, [pc, #524]	; (8004570 <MX_GPIO_Init+0x314>)
 8004364:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004368:	4a81      	ldr	r2, [pc, #516]	; (8004570 <MX_GPIO_Init+0x314>)
 800436a:	f043 0320 	orr.w	r3, r3, #32
 800436e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004372:	4b7f      	ldr	r3, [pc, #508]	; (8004570 <MX_GPIO_Init+0x314>)
 8004374:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004378:	f003 0320 	and.w	r3, r3, #32
 800437c:	603b      	str	r3, [r7, #0]
 800437e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(UCPD_PWR_GPIO_Port, UCPD_PWR_Pin, GPIO_PIN_RESET);
 8004380:	2200      	movs	r2, #0
 8004382:	2120      	movs	r1, #32
 8004384:	487b      	ldr	r0, [pc, #492]	; (8004574 <MX_GPIO_Init+0x318>)
 8004386:	f003 fcbd 	bl	8007d04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CAM_XSDN_GPIO_Port, CAM_XSDN_Pin, GPIO_PIN_RESET);
 800438a:	2200      	movs	r2, #0
 800438c:	2108      	movs	r1, #8
 800438e:	487a      	ldr	r0, [pc, #488]	; (8004578 <MX_GPIO_Init+0x31c>)
 8004390:	f003 fcb8 	bl	8007d04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CAM_RSTI_GPIO_Port, CAM_RSTI_Pin, GPIO_PIN_SET);
 8004394:	2201      	movs	r2, #1
 8004396:	2104      	movs	r1, #4
 8004398:	4877      	ldr	r0, [pc, #476]	; (8004578 <MX_GPIO_Init+0x31c>)
 800439a:	f003 fcb3 	bl	8007d04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, LED_RED_Pin|LED_GREEN_Pin|Mems_VL53_xshut_Pin, GPIO_PIN_RESET);
 800439e:	2200      	movs	r2, #0
 80043a0:	21c2      	movs	r1, #194	; 0xc2
 80043a2:	4876      	ldr	r0, [pc, #472]	; (800457c <MX_GPIO_Init+0x320>)
 80043a4:	f003 fcae 	bl	8007d04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(WRLS_WKUP_B_GPIO_Port, WRLS_WKUP_B_Pin, GPIO_PIN_RESET);
 80043a8:	2200      	movs	r2, #0
 80043aa:	2140      	movs	r1, #64	; 0x40
 80043ac:	4874      	ldr	r0, [pc, #464]	; (8004580 <MX_GPIO_Init+0x324>)
 80043ae:	f003 fca9 	bl	8007d04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, Mems_STSAFE_RESET_Pin|WRLS_WKUP_W_Pin, GPIO_PIN_RESET);
 80043b2:	2200      	movs	r2, #0
 80043b4:	f44f 4108 	mov.w	r1, #34816	; 0x8800
 80043b8:	4872      	ldr	r0, [pc, #456]	; (8004584 <MX_GPIO_Init+0x328>)
 80043ba:	f003 fca3 	bl	8007d04 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = WRLS_FLOW_Pin|Mems_VLX_GPIO_Pin|Mems_INT_LPS22HH_Pin;
 80043be:	f248 0324 	movw	r3, #32804	; 0x8024
 80043c2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80043c4:	2300      	movs	r3, #0
 80043c6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043c8:	2300      	movs	r3, #0
 80043ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80043cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80043d0:	4619      	mov	r1, r3
 80043d2:	486b      	ldr	r0, [pc, #428]	; (8004580 <MX_GPIO_Init+0x324>)
 80043d4:	f003 f9c8 	bl	8007768 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = WRLS_UART4_RX_Pin|WRLS_UART4_TX_Pin;
 80043d8:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80043dc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80043de:	2302      	movs	r3, #2
 80043e0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043e2:	2300      	movs	r3, #0
 80043e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80043e6:	2300      	movs	r3, #0
 80043e8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80043ea:	2308      	movs	r3, #8
 80043ec:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80043ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80043f2:	4619      	mov	r1, r3
 80043f4:	4864      	ldr	r0, [pc, #400]	; (8004588 <MX_GPIO_Init+0x32c>)
 80043f6:	f003 f9b7 	bl	8007768 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_UCPD_CC1_Pin;
 80043fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80043fe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004400:	2303      	movs	r3, #3
 8004402:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004404:	2300      	movs	r3, #0
 8004406:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_UCPD_CC1_GPIO_Port, &GPIO_InitStruct);
 8004408:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800440c:	4619      	mov	r1, r3
 800440e:	485f      	ldr	r0, [pc, #380]	; (800458c <MX_GPIO_Init+0x330>)
 8004410:	f003 f9aa 	bl	8007768 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CAM_PLUG_Pin;
 8004414:	2302      	movs	r3, #2
 8004416:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004418:	2300      	movs	r3, #0
 800441a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800441c:	2301      	movs	r3, #1
 800441e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CAM_PLUG_GPIO_Port, &GPIO_InitStruct);
 8004420:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004424:	4619      	mov	r1, r3
 8004426:	4854      	ldr	r0, [pc, #336]	; (8004578 <MX_GPIO_Init+0x31c>)
 8004428:	f003 f99e 	bl	8007768 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OCTOSPI_F_NCS_Pin;
 800442c:	2320      	movs	r3, #32
 800442e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004430:	2302      	movs	r3, #2
 8004432:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004434:	2300      	movs	r3, #0
 8004436:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004438:	2303      	movs	r3, #3
 800443a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_OCTOSPI2;
 800443c:	2305      	movs	r3, #5
 800443e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OCTOSPI_F_NCS_GPIO_Port, &GPIO_InitStruct);
 8004440:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004444:	4619      	mov	r1, r3
 8004446:	484c      	ldr	r0, [pc, #304]	; (8004578 <MX_GPIO_Init+0x31c>)
 8004448:	f003 f98e 	bl	8007768 <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin PHPin PHPin */
  GPIO_InitStruct.Pin = OCTOSPI_F_IO7_Pin|OCTOSPI_F_IO5_Pin|OCTOSPI_F_IO6_Pin|OCTOSPI_F_IO4_Pin;
 800444c:	f44f 53f0 	mov.w	r3, #7680	; 0x1e00
 8004450:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004452:	2302      	movs	r3, #2
 8004454:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004456:	2300      	movs	r3, #0
 8004458:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800445a:	2303      	movs	r3, #3
 800445c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_OCTOSPI2;
 800445e:	2305      	movs	r3, #5
 8004460:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8004462:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004466:	4619      	mov	r1, r3
 8004468:	4844      	ldr	r0, [pc, #272]	; (800457c <MX_GPIO_Init+0x320>)
 800446a:	f003 f97d 	bl	8007768 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PH3_BOOT0_Pin;
 800446e:	2308      	movs	r3, #8
 8004470:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004472:	2300      	movs	r3, #0
 8004474:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004476:	2300      	movs	r3, #0
 8004478:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PH3_BOOT0_GPIO_Port, &GPIO_InitStruct);
 800447a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800447e:	4619      	mov	r1, r3
 8004480:	483e      	ldr	r0, [pc, #248]	; (800457c <MX_GPIO_Init+0x320>)
 8004482:	f003 f971 	bl	8007768 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = UCPD_PWR_Pin;
 8004486:	2320      	movs	r3, #32
 8004488:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800448a:	2301      	movs	r3, #1
 800448c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800448e:	2300      	movs	r3, #0
 8004490:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004492:	2300      	movs	r3, #0
 8004494:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(UCPD_PWR_GPIO_Port, &GPIO_InitStruct);
 8004496:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800449a:	4619      	mov	r1, r3
 800449c:	4835      	ldr	r0, [pc, #212]	; (8004574 <MX_GPIO_Init+0x318>)
 800449e:	f003 f963 	bl	8007768 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = WRLS_SPI2_MOSI_Pin|WRLS_SPI2_MISO_Pin|WRLS_SPI2_SCK_Pin;
 80044a2:	231a      	movs	r3, #26
 80044a4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044a6:	2302      	movs	r3, #2
 80044a8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044aa:	2300      	movs	r3, #0
 80044ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80044ae:	2300      	movs	r3, #0
 80044b0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80044b2:	2305      	movs	r3, #5
 80044b4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80044b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80044ba:	4619      	mov	r1, r3
 80044bc:	4834      	ldr	r0, [pc, #208]	; (8004590 <MX_GPIO_Init+0x334>)
 80044be:	f003 f953 	bl	8007768 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CAM_XSDN_Pin;
 80044c2:	2308      	movs	r3, #8
 80044c4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80044c6:	2301      	movs	r3, #1
 80044c8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80044ca:	2302      	movs	r3, #2
 80044cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80044ce:	2300      	movs	r3, #0
 80044d0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(CAM_XSDN_GPIO_Port, &GPIO_InitStruct);
 80044d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80044d6:	4619      	mov	r1, r3
 80044d8:	4827      	ldr	r0, [pc, #156]	; (8004578 <MX_GPIO_Init+0x31c>)
 80044da:	f003 f945 	bl	8007768 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CAM_RSTI_Pin;
 80044de:	2304      	movs	r3, #4
 80044e0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80044e2:	2301      	movs	r3, #1
 80044e4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80044e6:	2301      	movs	r3, #1
 80044e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80044ea:	2300      	movs	r3, #0
 80044ec:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(CAM_RSTI_GPIO_Port, &GPIO_InitStruct);
 80044ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80044f2:	4619      	mov	r1, r3
 80044f4:	4820      	ldr	r0, [pc, #128]	; (8004578 <MX_GPIO_Init+0x31c>)
 80044f6:	f003 f937 	bl	8007768 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin PFPin PFPin
                           PFPin PFPin */
  GPIO_InitStruct.Pin = OCTOSPI_F_IO0_Pin|OCTOSPI_F_IO1_Pin|OCTOSPI_F_IO2_Pin|OCTOSPI_F_IO3_Pin
 80044fa:	f241 031f 	movw	r3, #4127	; 0x101f
 80044fe:	627b      	str	r3, [r7, #36]	; 0x24
                          |OCTOSPI_F_CLK_P_Pin|OCTOSPI_F_DQS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004500:	2302      	movs	r3, #2
 8004502:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004504:	2300      	movs	r3, #0
 8004506:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004508:	2303      	movs	r3, #3
 800450a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_OCTOSPI2;
 800450c:	2305      	movs	r3, #5
 800450e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8004510:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004514:	4619      	mov	r1, r3
 8004516:	481b      	ldr	r0, [pc, #108]	; (8004584 <MX_GPIO_Init+0x328>)
 8004518:	f003 f926 	bl	8007768 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Button_Pin;
 800451c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004520:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004522:	2300      	movs	r3, #0
 8004524:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004526:	2300      	movs	r3, #0
 8004528:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USER_Button_GPIO_Port, &GPIO_InitStruct);
 800452a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800452e:	4619      	mov	r1, r3
 8004530:	4815      	ldr	r0, [pc, #84]	; (8004588 <MX_GPIO_Init+0x32c>)
 8004532:	f003 f919 	bl	8007768 <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin PHPin */
  GPIO_InitStruct.Pin = LED_RED_Pin|LED_GREEN_Pin|Mems_VL53_xshut_Pin;
 8004536:	23c2      	movs	r3, #194	; 0xc2
 8004538:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800453a:	2301      	movs	r3, #1
 800453c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800453e:	2300      	movs	r3, #0
 8004540:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004542:	2300      	movs	r3, #0
 8004544:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8004546:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800454a:	4619      	mov	r1, r3
 800454c:	480b      	ldr	r0, [pc, #44]	; (800457c <MX_GPIO_Init+0x320>)
 800454e:	f003 f90b 	bl	8007768 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = T_VCP_RX_Pin|T_VCP_TX_Pin;
 8004552:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8004556:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004558:	2302      	movs	r3, #2
 800455a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800455c:	2300      	movs	r3, #0
 800455e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004560:	2300      	movs	r3, #0
 8004562:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004564:	2307      	movs	r3, #7
 8004566:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004568:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800456c:	4619      	mov	r1, r3
 800456e:	e011      	b.n	8004594 <MX_GPIO_Init+0x338>
 8004570:	46020c00 	.word	0x46020c00
 8004574:	42020400 	.word	0x42020400
 8004578:	42022000 	.word	0x42022000
 800457c:	42021c00 	.word	0x42021c00
 8004580:	42021800 	.word	0x42021800
 8004584:	42021400 	.word	0x42021400
 8004588:	42020800 	.word	0x42020800
 800458c:	42020000 	.word	0x42020000
 8004590:	42020c00 	.word	0x42020c00
 8004594:	4855      	ldr	r0, [pc, #340]	; (80046ec <MX_GPIO_Init+0x490>)
 8004596:	f003 f8e7 	bl	8007768 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = USB_C_P_Pin|USB_C_PA11_Pin;
 800459a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800459e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80045a0:	2302      	movs	r3, #2
 80045a2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045a4:	2300      	movs	r3, #0
 80045a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80045a8:	2300      	movs	r3, #0
 80045aa:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 80045ac:	230a      	movs	r3, #10
 80045ae:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80045b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80045b4:	4619      	mov	r1, r3
 80045b6:	484d      	ldr	r0, [pc, #308]	; (80046ec <MX_GPIO_Init+0x490>)
 80045b8:	f003 f8d6 	bl	8007768 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MIC_CCK1_Pin;
 80045bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80045c0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80045c2:	2302      	movs	r3, #2
 80045c4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045c6:	2300      	movs	r3, #0
 80045c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80045ca:	2300      	movs	r3, #0
 80045cc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_MDF1;
 80045ce:	2306      	movs	r3, #6
 80045d0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(MIC_CCK1_GPIO_Port, &GPIO_InitStruct);
 80045d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80045d6:	4619      	mov	r1, r3
 80045d8:	4845      	ldr	r0, [pc, #276]	; (80046f0 <MX_GPIO_Init+0x494>)
 80045da:	f003 f8c5 	bl	8007768 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = MIC_SDINx_Pin|MIC_CCK0_Pin;
 80045de:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80045e2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80045e4:	2302      	movs	r3, #2
 80045e6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045e8:	2300      	movs	r3, #0
 80045ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80045ec:	2300      	movs	r3, #0
 80045ee:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF3_ADF1;
 80045f0:	2303      	movs	r3, #3
 80045f2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80045f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80045f8:	4619      	mov	r1, r3
 80045fa:	483e      	ldr	r0, [pc, #248]	; (80046f4 <MX_GPIO_Init+0x498>)
 80045fc:	f003 f8b4 	bl	8007768 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = WRLS_WKUP_B_Pin;
 8004600:	2340      	movs	r3, #64	; 0x40
 8004602:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004604:	2301      	movs	r3, #1
 8004606:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004608:	2300      	movs	r3, #0
 800460a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800460c:	2300      	movs	r3, #0
 800460e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(WRLS_WKUP_B_GPIO_Port, &GPIO_InitStruct);
 8004610:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004614:	4619      	mov	r1, r3
 8004616:	4838      	ldr	r0, [pc, #224]	; (80046f8 <MX_GPIO_Init+0x49c>)
 8004618:	f003 f8a6 	bl	8007768 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = WRLS_NOTIFY_Pin|Mems_INT_IIS2MDC_Pin|USB_IANA_Pin;
 800461c:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 8004620:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004622:	2300      	movs	r3, #0
 8004624:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004626:	2300      	movs	r3, #0
 8004628:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800462a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800462e:	4619      	mov	r1, r3
 8004630:	4832      	ldr	r0, [pc, #200]	; (80046fc <MX_GPIO_Init+0x4a0>)
 8004632:	f003 f899 	bl	8007768 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = USB_UCPD_FLT_Pin|Mems_ISM330DLC_INT1_Pin;
 8004636:	f44f 6310 	mov.w	r3, #2304	; 0x900
 800463a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800463c:	2300      	movs	r3, #0
 800463e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004640:	2300      	movs	r3, #0
 8004642:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004644:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004648:	4619      	mov	r1, r3
 800464a:	482a      	ldr	r0, [pc, #168]	; (80046f4 <MX_GPIO_Init+0x498>)
 800464c:	f003 f88c 	bl	8007768 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_VBUS_SENSE_Pin;
 8004650:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004654:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004656:	2300      	movs	r3, #0
 8004658:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800465a:	2300      	movs	r3, #0
 800465c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_VBUS_SENSE_GPIO_Port, &GPIO_InitStruct);
 800465e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004662:	4619      	mov	r1, r3
 8004664:	4822      	ldr	r0, [pc, #136]	; (80046f0 <MX_GPIO_Init+0x494>)
 8004666:	f003 f87f 	bl	8007768 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = WRLS_SPI2_NSS_Pin;
 800466a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800466e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004670:	2302      	movs	r3, #2
 8004672:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004674:	2300      	movs	r3, #0
 8004676:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004678:	2300      	movs	r3, #0
 800467a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800467c:	2305      	movs	r3, #5
 800467e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(WRLS_SPI2_NSS_GPIO_Port, &GPIO_InitStruct);
 8004680:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004684:	4619      	mov	r1, r3
 8004686:	481e      	ldr	r0, [pc, #120]	; (8004700 <MX_GPIO_Init+0x4a4>)
 8004688:	f003 f86e 	bl	8007768 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_UCPD_CC2_Pin;
 800468c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004690:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004692:	2303      	movs	r3, #3
 8004694:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004696:	2300      	movs	r3, #0
 8004698:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_UCPD_CC2_GPIO_Port, &GPIO_InitStruct);
 800469a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800469e:	4619      	mov	r1, r3
 80046a0:	4817      	ldr	r0, [pc, #92]	; (8004700 <MX_GPIO_Init+0x4a4>)
 80046a2:	f003 f861 	bl	8007768 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin */
  GPIO_InitStruct.Pin = Mems_STSAFE_RESET_Pin|WRLS_WKUP_W_Pin;
 80046a6:	f44f 4308 	mov.w	r3, #34816	; 0x8800
 80046aa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80046ac:	2301      	movs	r3, #1
 80046ae:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046b0:	2300      	movs	r3, #0
 80046b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80046b4:	2300      	movs	r3, #0
 80046b6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80046b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80046bc:	4619      	mov	r1, r3
 80046be:	480c      	ldr	r0, [pc, #48]	; (80046f0 <MX_GPIO_Init+0x494>)
 80046c0:	f003 f852 	bl	8007768 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MIC_SDIN0_Pin;
 80046c4:	2302      	movs	r3, #2
 80046c6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80046c8:	2302      	movs	r3, #2
 80046ca:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046cc:	2300      	movs	r3, #0
 80046ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80046d0:	2300      	movs	r3, #0
 80046d2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_MDF1;
 80046d4:	2306      	movs	r3, #6
 80046d6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(MIC_SDIN0_GPIO_Port, &GPIO_InitStruct);
 80046d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80046dc:	4619      	mov	r1, r3
 80046de:	4808      	ldr	r0, [pc, #32]	; (8004700 <MX_GPIO_Init+0x4a4>)
 80046e0:	f003 f842 	bl	8007768 <HAL_GPIO_Init>

}
 80046e4:	bf00      	nop
 80046e6:	3738      	adds	r7, #56	; 0x38
 80046e8:	46bd      	mov	sp, r7
 80046ea:	bd80      	pop	{r7, pc}
 80046ec:	42020000 	.word	0x42020000
 80046f0:	42021400 	.word	0x42021400
 80046f4:	42021000 	.word	0x42021000
 80046f8:	42021800 	.word	0x42021800
 80046fc:	42020c00 	.word	0x42020c00
 8004700:	42020400 	.word	0x42020400

08004704 <Ram_GPIO_Init>:
     InitStruct.Alternate = GPIO_AF4_DCMI;
     HAL_GPIO_Init(CAM_PIXCLK_GPIO_Port, &InitStruct);

}

void Ram_GPIO_Init(void){
 8004704:	b580      	push	{r7, lr}
 8004706:	b08c      	sub	sp, #48	; 0x30
 8004708:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef InitStruct = {0};
 800470a:	f107 031c 	add.w	r3, r7, #28
 800470e:	2200      	movs	r2, #0
 8004710:	601a      	str	r2, [r3, #0]
 8004712:	605a      	str	r2, [r3, #4]
 8004714:	609a      	str	r2, [r3, #8]
 8004716:	60da      	str	r2, [r3, #12]
 8004718:	611a      	str	r2, [r3, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 800471a:	4b6f      	ldr	r3, [pc, #444]	; (80048d8 <Ram_GPIO_Init+0x1d4>)
 800471c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004720:	4a6d      	ldr	r2, [pc, #436]	; (80048d8 <Ram_GPIO_Init+0x1d4>)
 8004722:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004726:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800472a:	4b6b      	ldr	r3, [pc, #428]	; (80048d8 <Ram_GPIO_Init+0x1d4>)
 800472c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004730:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004734:	61bb      	str	r3, [r7, #24]
 8004736:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8004738:	4b67      	ldr	r3, [pc, #412]	; (80048d8 <Ram_GPIO_Init+0x1d4>)
 800473a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800473e:	4a66      	ldr	r2, [pc, #408]	; (80048d8 <Ram_GPIO_Init+0x1d4>)
 8004740:	f043 0310 	orr.w	r3, r3, #16
 8004744:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004748:	4b63      	ldr	r3, [pc, #396]	; (80048d8 <Ram_GPIO_Init+0x1d4>)
 800474a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800474e:	f003 0310 	and.w	r3, r3, #16
 8004752:	617b      	str	r3, [r7, #20]
 8004754:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004756:	4b60      	ldr	r3, [pc, #384]	; (80048d8 <Ram_GPIO_Init+0x1d4>)
 8004758:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800475c:	4a5e      	ldr	r2, [pc, #376]	; (80048d8 <Ram_GPIO_Init+0x1d4>)
 800475e:	f043 0308 	orr.w	r3, r3, #8
 8004762:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004766:	4b5c      	ldr	r3, [pc, #368]	; (80048d8 <Ram_GPIO_Init+0x1d4>)
 8004768:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800476c:	f003 0308 	and.w	r3, r3, #8
 8004770:	613b      	str	r3, [r7, #16]
 8004772:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8004774:	4b58      	ldr	r3, [pc, #352]	; (80048d8 <Ram_GPIO_Init+0x1d4>)
 8004776:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800477a:	4a57      	ldr	r2, [pc, #348]	; (80048d8 <Ram_GPIO_Init+0x1d4>)
 800477c:	f043 0320 	orr.w	r3, r3, #32
 8004780:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004784:	4b54      	ldr	r3, [pc, #336]	; (80048d8 <Ram_GPIO_Init+0x1d4>)
 8004786:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800478a:	f003 0320 	and.w	r3, r3, #32
 800478e:	60fb      	str	r3, [r7, #12]
 8004790:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8004792:	4b51      	ldr	r3, [pc, #324]	; (80048d8 <Ram_GPIO_Init+0x1d4>)
 8004794:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004798:	4a4f      	ldr	r2, [pc, #316]	; (80048d8 <Ram_GPIO_Init+0x1d4>)
 800479a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800479e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80047a2:	4b4d      	ldr	r3, [pc, #308]	; (80048d8 <Ram_GPIO_Init+0x1d4>)
 80047a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80047a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047ac:	60bb      	str	r3, [r7, #8]
 80047ae:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80047b0:	4b49      	ldr	r3, [pc, #292]	; (80048d8 <Ram_GPIO_Init+0x1d4>)
 80047b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80047b6:	4a48      	ldr	r2, [pc, #288]	; (80048d8 <Ram_GPIO_Init+0x1d4>)
 80047b8:	f043 0304 	orr.w	r3, r3, #4
 80047bc:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80047c0:	4b45      	ldr	r3, [pc, #276]	; (80048d8 <Ram_GPIO_Init+0x1d4>)
 80047c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80047c6:	f003 0304 	and.w	r3, r3, #4
 80047ca:	607b      	str	r3, [r7, #4]
 80047cc:	687b      	ldr	r3, [r7, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80047ce:	4b42      	ldr	r3, [pc, #264]	; (80048d8 <Ram_GPIO_Init+0x1d4>)
 80047d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80047d4:	4a40      	ldr	r2, [pc, #256]	; (80048d8 <Ram_GPIO_Init+0x1d4>)
 80047d6:	f043 0302 	orr.w	r3, r3, #2
 80047da:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80047de:	4b3e      	ldr	r3, [pc, #248]	; (80048d8 <Ram_GPIO_Init+0x1d4>)
 80047e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80047e4:	f003 0302 	and.w	r3, r3, #2
 80047e8:	603b      	str	r3, [r7, #0]
 80047ea:	683b      	ldr	r3, [r7, #0]

    InitStruct.Pin = OCTOSPI_R_IO5_Pin;
 80047ec:	2301      	movs	r3, #1
 80047ee:	61fb      	str	r3, [r7, #28]
    InitStruct.Mode = GPIO_MODE_AF_PP;
 80047f0:	2302      	movs	r3, #2
 80047f2:	623b      	str	r3, [r7, #32]
    InitStruct.Pull = GPIO_NOPULL;
 80047f4:	2300      	movs	r3, #0
 80047f6:	627b      	str	r3, [r7, #36]	; 0x24
    InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80047f8:	2303      	movs	r3, #3
 80047fa:	62bb      	str	r3, [r7, #40]	; 0x28
    InitStruct.Alternate = GPIO_AF3_OCTOSPI1;
 80047fc:	2303      	movs	r3, #3
 80047fe:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(OCTOSPI_R_IO5_GPIO_Port, &InitStruct);
 8004800:	f107 031c 	add.w	r3, r7, #28
 8004804:	4619      	mov	r1, r3
 8004806:	4835      	ldr	r0, [pc, #212]	; (80048dc <Ram_GPIO_Init+0x1d8>)
 8004808:	f002 ffae 	bl	8007768 <HAL_GPIO_Init>

    InitStruct.Pin = OCTOSPI_R_DQS_Pin;
 800480c:	2308      	movs	r3, #8
 800480e:	61fb      	str	r3, [r7, #28]
    InitStruct.Mode = GPIO_MODE_AF_PP;
 8004810:	2302      	movs	r3, #2
 8004812:	623b      	str	r3, [r7, #32]
    InitStruct.Pull = GPIO_NOPULL;
 8004814:	2300      	movs	r3, #0
 8004816:	627b      	str	r3, [r7, #36]	; 0x24
    InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004818:	2303      	movs	r3, #3
 800481a:	62bb      	str	r3, [r7, #40]	; 0x28
    InitStruct.Alternate = GPIO_AF3_OCTOSPI1;
 800481c:	2303      	movs	r3, #3
 800481e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(OCTOSPI_R_DQS_GPIO_Port, &InitStruct);
 8004820:	f107 031c 	add.w	r3, r7, #28
 8004824:	4619      	mov	r1, r3
 8004826:	482e      	ldr	r0, [pc, #184]	; (80048e0 <Ram_GPIO_Init+0x1dc>)
 8004828:	f002 ff9e 	bl	8007768 <HAL_GPIO_Init>

    InitStruct.Pin = OCTOSPI_R_IO7_Pin;
 800482c:	2380      	movs	r3, #128	; 0x80
 800482e:	61fb      	str	r3, [r7, #28]
    InitStruct.Mode = GPIO_MODE_AF_PP;
 8004830:	2302      	movs	r3, #2
 8004832:	623b      	str	r3, [r7, #32]
    InitStruct.Pull = GPIO_NOPULL;
 8004834:	2300      	movs	r3, #0
 8004836:	627b      	str	r3, [r7, #36]	; 0x24
    InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004838:	2303      	movs	r3, #3
 800483a:	62bb      	str	r3, [r7, #40]	; 0x28
    InitStruct.Alternate = GPIO_AF10_OCTOSPI1;
 800483c:	230a      	movs	r3, #10
 800483e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(OCTOSPI_R_IO7_GPIO_Port, &InitStruct);
 8004840:	f107 031c 	add.w	r3, r7, #28
 8004844:	4619      	mov	r1, r3
 8004846:	4827      	ldr	r0, [pc, #156]	; (80048e4 <Ram_GPIO_Init+0x1e0>)
 8004848:	f002 ff8e 	bl	8007768 <HAL_GPIO_Init>

    InitStruct.Pin = OCTOSPI_R_IO0_Pin|OCTOSPI_R_IO2_Pin|OCTOSPI_R_IO1_Pin|OCTOSPI_R_IO3_Pin;
 800484c:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8004850:	61fb      	str	r3, [r7, #28]
    InitStruct.Mode = GPIO_MODE_AF_PP;
 8004852:	2302      	movs	r3, #2
 8004854:	623b      	str	r3, [r7, #32]
    InitStruct.Pull = GPIO_NOPULL;
 8004856:	2300      	movs	r3, #0
 8004858:	627b      	str	r3, [r7, #36]	; 0x24
    InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800485a:	2303      	movs	r3, #3
 800485c:	62bb      	str	r3, [r7, #40]	; 0x28
    InitStruct.Alternate = GPIO_AF10_OCTOSPI1;
 800485e:	230a      	movs	r3, #10
 8004860:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &InitStruct);
 8004862:	f107 031c 	add.w	r3, r7, #28
 8004866:	4619      	mov	r1, r3
 8004868:	481f      	ldr	r0, [pc, #124]	; (80048e8 <Ram_GPIO_Init+0x1e4>)
 800486a:	f002 ff7d 	bl	8007768 <HAL_GPIO_Init>

    InitStruct.Pin = OCTOSPI_R_IO4_Pin;
 800486e:	2304      	movs	r3, #4
 8004870:	61fb      	str	r3, [r7, #28]
    InitStruct.Mode = GPIO_MODE_AF_PP;
 8004872:	2302      	movs	r3, #2
 8004874:	623b      	str	r3, [r7, #32]
    InitStruct.Pull = GPIO_NOPULL;
 8004876:	2300      	movs	r3, #0
 8004878:	627b      	str	r3, [r7, #36]	; 0x24
    InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800487a:	2303      	movs	r3, #3
 800487c:	62bb      	str	r3, [r7, #40]	; 0x28
    InitStruct.Alternate = GPIO_AF3_OCTOSPI1;
 800487e:	2303      	movs	r3, #3
 8004880:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(OCTOSPI_R_IO4_GPIO_Port, &InitStruct);
 8004882:	f107 031c 	add.w	r3, r7, #28
 8004886:	4619      	mov	r1, r3
 8004888:	4818      	ldr	r0, [pc, #96]	; (80048ec <Ram_GPIO_Init+0x1e8>)
 800488a:	f002 ff6d 	bl	8007768 <HAL_GPIO_Init>

    InitStruct.Pin = OCTOSPI_R_IO6_Pin;
 800488e:	2308      	movs	r3, #8
 8004890:	61fb      	str	r3, [r7, #28]
    InitStruct.Mode = GPIO_MODE_AF_PP;
 8004892:	2302      	movs	r3, #2
 8004894:	623b      	str	r3, [r7, #32]
    InitStruct.Pull = GPIO_NOPULL;
 8004896:	2300      	movs	r3, #0
 8004898:	627b      	str	r3, [r7, #36]	; 0x24
    InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800489a:	2303      	movs	r3, #3
 800489c:	62bb      	str	r3, [r7, #40]	; 0x28
    InitStruct.Alternate = GPIO_AF10_OCTOSPI1;
 800489e:	230a      	movs	r3, #10
 80048a0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(OCTOSPI_R_IO6_GPIO_Port, &InitStruct);
 80048a2:	f107 031c 	add.w	r3, r7, #28
 80048a6:	4619      	mov	r1, r3
 80048a8:	4811      	ldr	r0, [pc, #68]	; (80048f0 <Ram_GPIO_Init+0x1ec>)
 80048aa:	f002 ff5d 	bl	8007768 <HAL_GPIO_Init>

    InitStruct.Pin = OCTOSPI_R_CLK_P_Pin|OCTOSPI_R_NCS_Pin;
 80048ae:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80048b2:	61fb      	str	r3, [r7, #28]
    InitStruct.Mode = GPIO_MODE_AF_PP;
 80048b4:	2302      	movs	r3, #2
 80048b6:	623b      	str	r3, [r7, #32]
    InitStruct.Pull = GPIO_NOPULL;
 80048b8:	2300      	movs	r3, #0
 80048ba:	627b      	str	r3, [r7, #36]	; 0x24
    InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80048bc:	2303      	movs	r3, #3
 80048be:	62bb      	str	r3, [r7, #40]	; 0x28
    InitStruct.Alternate = GPIO_AF10_OCTOSPI1;
 80048c0:	230a      	movs	r3, #10
 80048c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &InitStruct);
 80048c4:	f107 031c 	add.w	r3, r7, #28
 80048c8:	4619      	mov	r1, r3
 80048ca:	480a      	ldr	r0, [pc, #40]	; (80048f4 <Ram_GPIO_Init+0x1f0>)
 80048cc:	f002 ff4c 	bl	8007768 <HAL_GPIO_Init>
}
 80048d0:	bf00      	nop
 80048d2:	3730      	adds	r7, #48	; 0x30
 80048d4:	46bd      	mov	sp, r7
 80048d6:	bd80      	pop	{r7, pc}
 80048d8:	46020c00 	.word	0x46020c00
 80048dc:	42022000 	.word	0x42022000
 80048e0:	42021000 	.word	0x42021000
 80048e4:	42020c00 	.word	0x42020c00
 80048e8:	42021400 	.word	0x42021400
 80048ec:	42021c00 	.word	0x42021c00
 80048f0:	42020800 	.word	0x42020800
 80048f4:	42020400 	.word	0x42020400

080048f8 <MotionSensor_GPIO_Init>:

void MotionSensor_GPIO_Init(void)
{
 80048f8:	b580      	push	{r7, lr}
 80048fa:	b086      	sub	sp, #24
 80048fc:	af00      	add	r7, sp, #0
	  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80048fe:	1d3b      	adds	r3, r7, #4
 8004900:	2200      	movs	r2, #0
 8004902:	601a      	str	r2, [r3, #0]
 8004904:	605a      	str	r2, [r3, #4]
 8004906:	609a      	str	r2, [r3, #8]
 8004908:	60da      	str	r2, [r3, #12]
 800490a:	611a      	str	r2, [r3, #16]
	  GPIO_InitStruct.Pin = Mems_ISM330DLC_INT1_Pin;
 800490c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004910:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004912:	2300      	movs	r3, #0
 8004914:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004916:	2300      	movs	r3, #0
 8004918:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800491a:	2300      	movs	r3, #0
 800491c:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800491e:	2300      	movs	r3, #0
 8004920:	60fb      	str	r3, [r7, #12]
	  HAL_GPIO_Init(Mems_ISM330DLC_INT1_GPIO_Port, &GPIO_InitStruct);
 8004922:	1d3b      	adds	r3, r7, #4
 8004924:	4619      	mov	r1, r3
 8004926:	4803      	ldr	r0, [pc, #12]	; (8004934 <MotionSensor_GPIO_Init+0x3c>)
 8004928:	f002 ff1e 	bl	8007768 <HAL_GPIO_Init>
}
 800492c:	bf00      	nop
 800492e:	3718      	adds	r7, #24
 8004930:	46bd      	mov	sp, r7
 8004932:	bd80      	pop	{r7, pc}
 8004934:	42021000 	.word	0x42021000

08004938 <PressureSensor_GPIO_Init>:

void PressureSensor_GPIO_Init(void)
{
 8004938:	b580      	push	{r7, lr}
 800493a:	b086      	sub	sp, #24
 800493c:	af00      	add	r7, sp, #0
	  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800493e:	1d3b      	adds	r3, r7, #4
 8004940:	2200      	movs	r2, #0
 8004942:	601a      	str	r2, [r3, #0]
 8004944:	605a      	str	r2, [r3, #4]
 8004946:	609a      	str	r2, [r3, #8]
 8004948:	60da      	str	r2, [r3, #12]
 800494a:	611a      	str	r2, [r3, #16]
	  GPIO_InitStruct.Pin = Mems_INT_LPS22HH_Pin;
 800494c:	2304      	movs	r3, #4
 800494e:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004950:	2300      	movs	r3, #0
 8004952:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004954:	2300      	movs	r3, #0
 8004956:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004958:	2300      	movs	r3, #0
 800495a:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800495c:	2300      	movs	r3, #0
 800495e:	60fb      	str	r3, [r7, #12]
	  HAL_GPIO_Init(Mems_INT_LPS22HH_GPIO_Port, &GPIO_InitStruct);
 8004960:	1d3b      	adds	r3, r7, #4
 8004962:	4619      	mov	r1, r3
 8004964:	4803      	ldr	r0, [pc, #12]	; (8004974 <PressureSensor_GPIO_Init+0x3c>)
 8004966:	f002 feff 	bl	8007768 <HAL_GPIO_Init>
}
 800496a:	bf00      	nop
 800496c:	3718      	adds	r7, #24
 800496e:	46bd      	mov	sp, r7
 8004970:	bd80      	pop	{r7, pc}
 8004972:	bf00      	nop
 8004974:	42021800 	.word	0x42021800

08004978 <MagSensor_GPIO_Init>:

void MagSensor_GPIO_Init(void)
{
 8004978:	b580      	push	{r7, lr}
 800497a:	b086      	sub	sp, #24
 800497c:	af00      	add	r7, sp, #0
	  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800497e:	1d3b      	adds	r3, r7, #4
 8004980:	2200      	movs	r2, #0
 8004982:	601a      	str	r2, [r3, #0]
 8004984:	605a      	str	r2, [r3, #4]
 8004986:	609a      	str	r2, [r3, #8]
 8004988:	60da      	str	r2, [r3, #12]
 800498a:	611a      	str	r2, [r3, #16]
	  GPIO_InitStruct.Pin = Mems_INT_IIS2MDC_Pin;
 800498c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004990:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004992:	2300      	movs	r3, #0
 8004994:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004996:	2300      	movs	r3, #0
 8004998:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800499a:	2300      	movs	r3, #0
 800499c:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800499e:	2300      	movs	r3, #0
 80049a0:	60fb      	str	r3, [r7, #12]
	  HAL_GPIO_Init(Mems_INT_IIS2MDC_GPIO_Port, &GPIO_InitStruct);
 80049a2:	1d3b      	adds	r3, r7, #4
 80049a4:	4619      	mov	r1, r3
 80049a6:	4803      	ldr	r0, [pc, #12]	; (80049b4 <MagSensor_GPIO_Init+0x3c>)
 80049a8:	f002 fede 	bl	8007768 <HAL_GPIO_Init>
}
 80049ac:	bf00      	nop
 80049ae:	3718      	adds	r7, #24
 80049b0:	46bd      	mov	sp, r7
 80049b2:	bd80      	pop	{r7, pc}
 80049b4:	42020c00 	.word	0x42020c00

080049b8 <HAL_I2C_MspInit>:
  /* USER CODE END I2C2_Init 2 */

}

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80049b8:	b580      	push	{r7, lr}
 80049ba:	b0be      	sub	sp, #248	; 0xf8
 80049bc:	af00      	add	r7, sp, #0
 80049be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80049c0:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80049c4:	2200      	movs	r2, #0
 80049c6:	601a      	str	r2, [r3, #0]
 80049c8:	605a      	str	r2, [r3, #4]
 80049ca:	609a      	str	r2, [r3, #8]
 80049cc:	60da      	str	r2, [r3, #12]
 80049ce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80049d0:	f107 0318 	add.w	r3, r7, #24
 80049d4:	22c8      	movs	r2, #200	; 0xc8
 80049d6:	2100      	movs	r1, #0
 80049d8:	4618      	mov	r0, r3
 80049da:	f009 ff8f 	bl	800e8fc <memset>
  if(i2cHandle->Instance==I2C1)
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	4a53      	ldr	r2, [pc, #332]	; (8004b30 <HAL_I2C_MspInit+0x178>)
 80049e4:	4293      	cmp	r3, r2
 80049e6:	d153      	bne.n	8004a90 <HAL_I2C_MspInit+0xd8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80049e8:	f04f 0240 	mov.w	r2, #64	; 0x40
 80049ec:	f04f 0300 	mov.w	r3, #0
 80049f0:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80049f4:	2300      	movs	r3, #0
 80049f6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80049fa:	f107 0318 	add.w	r3, r7, #24
 80049fe:	4618      	mov	r0, r3
 8004a00:	f006 fe02 	bl	800b608 <HAL_RCCEx_PeriphCLKConfig>
 8004a04:	4603      	mov	r3, r0
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d001      	beq.n	8004a0e <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8004a0a:	f000 fb4b 	bl	80050a4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004a0e:	4b49      	ldr	r3, [pc, #292]	; (8004b34 <HAL_I2C_MspInit+0x17c>)
 8004a10:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004a14:	4a47      	ldr	r2, [pc, #284]	; (8004b34 <HAL_I2C_MspInit+0x17c>)
 8004a16:	f043 0302 	orr.w	r3, r3, #2
 8004a1a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004a1e:	4b45      	ldr	r3, [pc, #276]	; (8004b34 <HAL_I2C_MspInit+0x17c>)
 8004a20:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004a24:	f003 0302 	and.w	r3, r3, #2
 8004a28:	617b      	str	r3, [r7, #20]
 8004a2a:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB9     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_8;
 8004a2c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004a30:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004a34:	2312      	movs	r3, #18
 8004a36:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a3a:	2300      	movs	r3, #0
 8004a3c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004a40:	2300      	movs	r3, #0
 8004a42:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004a46:	2304      	movs	r3, #4
 8004a48:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004a4c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8004a50:	4619      	mov	r1, r3
 8004a52:	4839      	ldr	r0, [pc, #228]	; (8004b38 <HAL_I2C_MspInit+0x180>)
 8004a54:	f002 fe88 	bl	8007768 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004a58:	4b36      	ldr	r3, [pc, #216]	; (8004b34 <HAL_I2C_MspInit+0x17c>)
 8004a5a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004a5e:	4a35      	ldr	r2, [pc, #212]	; (8004b34 <HAL_I2C_MspInit+0x17c>)
 8004a60:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004a64:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8004a68:	4b32      	ldr	r3, [pc, #200]	; (8004b34 <HAL_I2C_MspInit+0x17c>)
 8004a6a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004a6e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004a72:	613b      	str	r3, [r7, #16]
 8004a74:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C1_MspInit 1 */
    __HAL_RCC_I2C1_FORCE_RESET();
 8004a76:	4b2f      	ldr	r3, [pc, #188]	; (8004b34 <HAL_I2C_MspInit+0x17c>)
 8004a78:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a7a:	4a2e      	ldr	r2, [pc, #184]	; (8004b34 <HAL_I2C_MspInit+0x17c>)
 8004a7c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004a80:	6753      	str	r3, [r2, #116]	; 0x74
    __HAL_RCC_I2C1_RELEASE_RESET();
 8004a82:	4b2c      	ldr	r3, [pc, #176]	; (8004b34 <HAL_I2C_MspInit+0x17c>)
 8004a84:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a86:	4a2b      	ldr	r2, [pc, #172]	; (8004b34 <HAL_I2C_MspInit+0x17c>)
 8004a88:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004a8c:	6753      	str	r3, [r2, #116]	; 0x74
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8004a8e:	e04a      	b.n	8004b26 <HAL_I2C_MspInit+0x16e>
  else if(i2cHandle->Instance==I2C2)
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	4a29      	ldr	r2, [pc, #164]	; (8004b3c <HAL_I2C_MspInit+0x184>)
 8004a96:	4293      	cmp	r3, r2
 8004a98:	d145      	bne.n	8004b26 <HAL_I2C_MspInit+0x16e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8004a9a:	f04f 0280 	mov.w	r2, #128	; 0x80
 8004a9e:	f04f 0300 	mov.w	r3, #0
 8004aa2:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8004aa6:	2300      	movs	r3, #0
 8004aa8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004aac:	f107 0318 	add.w	r3, r7, #24
 8004ab0:	4618      	mov	r0, r3
 8004ab2:	f006 fda9 	bl	800b608 <HAL_RCCEx_PeriphCLKConfig>
 8004ab6:	4603      	mov	r3, r0
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d001      	beq.n	8004ac0 <HAL_I2C_MspInit+0x108>
      Error_Handler();
 8004abc:	f000 faf2 	bl	80050a4 <Error_Handler>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8004ac0:	4b1c      	ldr	r3, [pc, #112]	; (8004b34 <HAL_I2C_MspInit+0x17c>)
 8004ac2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004ac6:	4a1b      	ldr	r2, [pc, #108]	; (8004b34 <HAL_I2C_MspInit+0x17c>)
 8004ac8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004acc:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004ad0:	4b18      	ldr	r3, [pc, #96]	; (8004b34 <HAL_I2C_MspInit+0x17c>)
 8004ad2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004ad6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ada:	60fb      	str	r3, [r7, #12]
 8004adc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8004ade:	2330      	movs	r3, #48	; 0x30
 8004ae0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004ae4:	2312      	movs	r3, #18
 8004ae6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004aea:	2300      	movs	r3, #0
 8004aec:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004af0:	2300      	movs	r3, #0
 8004af2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8004af6:	2304      	movs	r3, #4
 8004af8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8004afc:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8004b00:	4619      	mov	r1, r3
 8004b02:	480f      	ldr	r0, [pc, #60]	; (8004b40 <HAL_I2C_MspInit+0x188>)
 8004b04:	f002 fe30 	bl	8007768 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8004b08:	4b0a      	ldr	r3, [pc, #40]	; (8004b34 <HAL_I2C_MspInit+0x17c>)
 8004b0a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004b0e:	4a09      	ldr	r2, [pc, #36]	; (8004b34 <HAL_I2C_MspInit+0x17c>)
 8004b10:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004b14:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8004b18:	4b06      	ldr	r3, [pc, #24]	; (8004b34 <HAL_I2C_MspInit+0x17c>)
 8004b1a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004b1e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b22:	60bb      	str	r3, [r7, #8]
 8004b24:	68bb      	ldr	r3, [r7, #8]
}
 8004b26:	bf00      	nop
 8004b28:	37f8      	adds	r7, #248	; 0xf8
 8004b2a:	46bd      	mov	sp, r7
 8004b2c:	bd80      	pop	{r7, pc}
 8004b2e:	bf00      	nop
 8004b30:	40005400 	.word	0x40005400
 8004b34:	46020c00 	.word	0x46020c00
 8004b38:	42020400 	.word	0x42020400
 8004b3c:	40005800 	.word	0x40005800
 8004b40:	42021c00 	.word	0x42021c00

08004b44 <HAL_I2C_MspDeInit>:

void HAL_I2C_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8004b44:	b580      	push	{r7, lr}
 8004b46:	b082      	sub	sp, #8
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	6078      	str	r0, [r7, #4]

  if(i2cHandle->Instance==I2C1)
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	4a17      	ldr	r2, [pc, #92]	; (8004bb0 <HAL_I2C_MspDeInit+0x6c>)
 8004b52:	4293      	cmp	r3, r2
 8004b54:	d112      	bne.n	8004b7c <HAL_I2C_MspDeInit+0x38>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8004b56:	4b17      	ldr	r3, [pc, #92]	; (8004bb4 <HAL_I2C_MspDeInit+0x70>)
 8004b58:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004b5c:	4a15      	ldr	r2, [pc, #84]	; (8004bb4 <HAL_I2C_MspDeInit+0x70>)
 8004b5e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004b62:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c

    /**I2C1 GPIO Configuration
    PB9     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_9);
 8004b66:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004b6a:	4813      	ldr	r0, [pc, #76]	; (8004bb8 <HAL_I2C_MspDeInit+0x74>)
 8004b6c:	f002 ffd4 	bl	8007b18 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_8);
 8004b70:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004b74:	4810      	ldr	r0, [pc, #64]	; (8004bb8 <HAL_I2C_MspDeInit+0x74>)
 8004b76:	f002 ffcf 	bl	8007b18 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
  }
}
 8004b7a:	e014      	b.n	8004ba6 <HAL_I2C_MspDeInit+0x62>
  else if(i2cHandle->Instance==I2C2)
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	4a0e      	ldr	r2, [pc, #56]	; (8004bbc <HAL_I2C_MspDeInit+0x78>)
 8004b82:	4293      	cmp	r3, r2
 8004b84:	d10f      	bne.n	8004ba6 <HAL_I2C_MspDeInit+0x62>
    __HAL_RCC_I2C2_CLK_DISABLE();
 8004b86:	4b0b      	ldr	r3, [pc, #44]	; (8004bb4 <HAL_I2C_MspDeInit+0x70>)
 8004b88:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004b8c:	4a09      	ldr	r2, [pc, #36]	; (8004bb4 <HAL_I2C_MspDeInit+0x70>)
 8004b8e:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8004b92:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
    HAL_GPIO_DeInit(GPIOH, GPIO_PIN_4);
 8004b96:	2110      	movs	r1, #16
 8004b98:	4809      	ldr	r0, [pc, #36]	; (8004bc0 <HAL_I2C_MspDeInit+0x7c>)
 8004b9a:	f002 ffbd 	bl	8007b18 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOH, GPIO_PIN_5);
 8004b9e:	2120      	movs	r1, #32
 8004ba0:	4807      	ldr	r0, [pc, #28]	; (8004bc0 <HAL_I2C_MspDeInit+0x7c>)
 8004ba2:	f002 ffb9 	bl	8007b18 <HAL_GPIO_DeInit>
}
 8004ba6:	bf00      	nop
 8004ba8:	3708      	adds	r7, #8
 8004baa:	46bd      	mov	sp, r7
 8004bac:	bd80      	pop	{r7, pc}
 8004bae:	bf00      	nop
 8004bb0:	40005400 	.word	0x40005400
 8004bb4:	46020c00 	.word	0x46020c00
 8004bb8:	42020400 	.word	0x42020400
 8004bbc:	40005800 	.word	0x40005800
 8004bc0:	42021c00 	.word	0x42021c00

08004bc4 <I2C1_Init>:

/* USER CODE BEGIN 1 */
void I2C1_Init(void){
 8004bc4:	b580      	push	{r7, lr}
 8004bc6:	af00      	add	r7, sp, #0

	  hi2c1.Instance = I2C1;
 8004bc8:	4b1b      	ldr	r3, [pc, #108]	; (8004c38 <I2C1_Init+0x74>)
 8004bca:	4a1c      	ldr	r2, [pc, #112]	; (8004c3c <I2C1_Init+0x78>)
 8004bcc:	601a      	str	r2, [r3, #0]
	  hi2c1.Init.Timing = 0xB0C03E40;
 8004bce:	4b1a      	ldr	r3, [pc, #104]	; (8004c38 <I2C1_Init+0x74>)
 8004bd0:	4a1b      	ldr	r2, [pc, #108]	; (8004c40 <I2C1_Init+0x7c>)
 8004bd2:	605a      	str	r2, [r3, #4]
	  hi2c1.Init.OwnAddress1 = 0;
 8004bd4:	4b18      	ldr	r3, [pc, #96]	; (8004c38 <I2C1_Init+0x74>)
 8004bd6:	2200      	movs	r2, #0
 8004bd8:	609a      	str	r2, [r3, #8]
	  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004bda:	4b17      	ldr	r3, [pc, #92]	; (8004c38 <I2C1_Init+0x74>)
 8004bdc:	2201      	movs	r2, #1
 8004bde:	60da      	str	r2, [r3, #12]
	  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004be0:	4b15      	ldr	r3, [pc, #84]	; (8004c38 <I2C1_Init+0x74>)
 8004be2:	2200      	movs	r2, #0
 8004be4:	611a      	str	r2, [r3, #16]
	  hi2c1.Init.OwnAddress2 = 0;
 8004be6:	4b14      	ldr	r3, [pc, #80]	; (8004c38 <I2C1_Init+0x74>)
 8004be8:	2200      	movs	r2, #0
 8004bea:	615a      	str	r2, [r3, #20]
	  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8004bec:	4b12      	ldr	r3, [pc, #72]	; (8004c38 <I2C1_Init+0x74>)
 8004bee:	2200      	movs	r2, #0
 8004bf0:	619a      	str	r2, [r3, #24]
	  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004bf2:	4b11      	ldr	r3, [pc, #68]	; (8004c38 <I2C1_Init+0x74>)
 8004bf4:	2200      	movs	r2, #0
 8004bf6:	61da      	str	r2, [r3, #28]
	  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004bf8:	4b0f      	ldr	r3, [pc, #60]	; (8004c38 <I2C1_Init+0x74>)
 8004bfa:	2200      	movs	r2, #0
 8004bfc:	621a      	str	r2, [r3, #32]
	  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8004bfe:	480e      	ldr	r0, [pc, #56]	; (8004c38 <I2C1_Init+0x74>)
 8004c00:	f003 f8b2 	bl	8007d68 <HAL_I2C_Init>
 8004c04:	4603      	mov	r3, r0
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d001      	beq.n	8004c0e <I2C1_Init+0x4a>
	  {
	    Error_Handler();
 8004c0a:	f000 fa4b 	bl	80050a4 <Error_Handler>
	  }

	  /** Configure Analogue filter
	  */
	  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8004c0e:	2100      	movs	r1, #0
 8004c10:	4809      	ldr	r0, [pc, #36]	; (8004c38 <I2C1_Init+0x74>)
 8004c12:	f003 fe3b 	bl	800888c <HAL_I2CEx_ConfigAnalogFilter>
 8004c16:	4603      	mov	r3, r0
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d001      	beq.n	8004c20 <I2C1_Init+0x5c>
	  {
	    Error_Handler();
 8004c1c:	f000 fa42 	bl	80050a4 <Error_Handler>
	  }

	  /** Configure Digital filter
	  */
	  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8004c20:	2100      	movs	r1, #0
 8004c22:	4805      	ldr	r0, [pc, #20]	; (8004c38 <I2C1_Init+0x74>)
 8004c24:	f003 fe7d 	bl	8008922 <HAL_I2CEx_ConfigDigitalFilter>
 8004c28:	4603      	mov	r3, r0
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d001      	beq.n	8004c32 <I2C1_Init+0x6e>
	  {
	    Error_Handler();
 8004c2e:	f000 fa39 	bl	80050a4 <Error_Handler>
	  }

}
 8004c32:	bf00      	nop
 8004c34:	bd80      	pop	{r7, pc}
 8004c36:	bf00      	nop
 8004c38:	20001480 	.word	0x20001480
 8004c3c:	40005400 	.word	0x40005400
 8004c40:	b0c03e40 	.word	0xb0c03e40

08004c44 <I2C2_Init>:

void I2C2_Init(void){
 8004c44:	b580      	push	{r7, lr}
 8004c46:	af00      	add	r7, sp, #0

	  hi2c2.Instance = I2C2;
 8004c48:	4b1b      	ldr	r3, [pc, #108]	; (8004cb8 <I2C2_Init+0x74>)
 8004c4a:	4a1c      	ldr	r2, [pc, #112]	; (8004cbc <I2C2_Init+0x78>)
 8004c4c:	601a      	str	r2, [r3, #0]
	  hi2c2.Init.Timing = 0x30909DEC;
 8004c4e:	4b1a      	ldr	r3, [pc, #104]	; (8004cb8 <I2C2_Init+0x74>)
 8004c50:	4a1b      	ldr	r2, [pc, #108]	; (8004cc0 <I2C2_Init+0x7c>)
 8004c52:	605a      	str	r2, [r3, #4]
	  hi2c2.Init.OwnAddress1 = 0;
 8004c54:	4b18      	ldr	r3, [pc, #96]	; (8004cb8 <I2C2_Init+0x74>)
 8004c56:	2200      	movs	r2, #0
 8004c58:	609a      	str	r2, [r3, #8]
	  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004c5a:	4b17      	ldr	r3, [pc, #92]	; (8004cb8 <I2C2_Init+0x74>)
 8004c5c:	2201      	movs	r2, #1
 8004c5e:	60da      	str	r2, [r3, #12]
	  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004c60:	4b15      	ldr	r3, [pc, #84]	; (8004cb8 <I2C2_Init+0x74>)
 8004c62:	2200      	movs	r2, #0
 8004c64:	611a      	str	r2, [r3, #16]
	  hi2c2.Init.OwnAddress2 = 0;
 8004c66:	4b14      	ldr	r3, [pc, #80]	; (8004cb8 <I2C2_Init+0x74>)
 8004c68:	2200      	movs	r2, #0
 8004c6a:	615a      	str	r2, [r3, #20]
	  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8004c6c:	4b12      	ldr	r3, [pc, #72]	; (8004cb8 <I2C2_Init+0x74>)
 8004c6e:	2200      	movs	r2, #0
 8004c70:	619a      	str	r2, [r3, #24]
	  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004c72:	4b11      	ldr	r3, [pc, #68]	; (8004cb8 <I2C2_Init+0x74>)
 8004c74:	2200      	movs	r2, #0
 8004c76:	61da      	str	r2, [r3, #28]
	  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004c78:	4b0f      	ldr	r3, [pc, #60]	; (8004cb8 <I2C2_Init+0x74>)
 8004c7a:	2200      	movs	r2, #0
 8004c7c:	621a      	str	r2, [r3, #32]
	  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8004c7e:	480e      	ldr	r0, [pc, #56]	; (8004cb8 <I2C2_Init+0x74>)
 8004c80:	f003 f872 	bl	8007d68 <HAL_I2C_Init>
 8004c84:	4603      	mov	r3, r0
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d001      	beq.n	8004c8e <I2C2_Init+0x4a>
	  {
	    Error_Handler();
 8004c8a:	f000 fa0b 	bl	80050a4 <Error_Handler>
	  }

	  /** Configure Analogue filter
	  */
	  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8004c8e:	2100      	movs	r1, #0
 8004c90:	4809      	ldr	r0, [pc, #36]	; (8004cb8 <I2C2_Init+0x74>)
 8004c92:	f003 fdfb 	bl	800888c <HAL_I2CEx_ConfigAnalogFilter>
 8004c96:	4603      	mov	r3, r0
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d001      	beq.n	8004ca0 <I2C2_Init+0x5c>
	  {
	    Error_Handler();
 8004c9c:	f000 fa02 	bl	80050a4 <Error_Handler>
	  }

	  /** Configure Digital filter
	  */
	  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8004ca0:	2100      	movs	r1, #0
 8004ca2:	4805      	ldr	r0, [pc, #20]	; (8004cb8 <I2C2_Init+0x74>)
 8004ca4:	f003 fe3d 	bl	8008922 <HAL_I2CEx_ConfigDigitalFilter>
 8004ca8:	4603      	mov	r3, r0
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d001      	beq.n	8004cb2 <I2C2_Init+0x6e>
	  {
	    Error_Handler();
 8004cae:	f000 f9f9 	bl	80050a4 <Error_Handler>
	  }

}
 8004cb2:	bf00      	nop
 8004cb4:	bd80      	pop	{r7, pc}
 8004cb6:	bf00      	nop
 8004cb8:	200014cc 	.word	0x200014cc
 8004cbc:	40005800 	.word	0x40005800
 8004cc0:	30909dec 	.word	0x30909dec

08004cc4 <MX_ICACHE_Init>:

/* USER CODE END 0 */

/* ICACHE init function */
void MX_ICACHE_Init(void)
{
 8004cc4:	b580      	push	{r7, lr}
 8004cc6:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache (default 2-ways set associative cache)
  */
  if (HAL_ICACHE_Enable() != HAL_OK)
 8004cc8:	f003 fe78 	bl	80089bc <HAL_ICACHE_Enable>
 8004ccc:	4603      	mov	r3, r0
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d001      	beq.n	8004cd6 <MX_ICACHE_Init+0x12>
  {
    Error_Handler();
 8004cd2:	f000 f9e7 	bl	80050a4 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 8004cd6:	bf00      	nop
 8004cd8:	bd80      	pop	{r7, pc}
	...

08004cdc <MX_ProjectDMAQueue_Config>:
  * @brief  DMA Linked-list ProjectDMAQueue configuration
  * @param  None
  * @retval None
  */
HAL_StatusTypeDef MX_ProjectDMAQueue_Config(void)
{
 8004cdc:	b580      	push	{r7, lr}
 8004cde:	b09c      	sub	sp, #112	; 0x70
 8004ce0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef ret = HAL_OK;
 8004ce2:	2300      	movs	r3, #0
 8004ce4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  /* DMA node configuration declaration */
  DMA_NodeConfTypeDef pNodeConfig;

  /* Set node configuration ################################################*/
  pNodeConfig.NodeType = DMA_GPDMA_2D_NODE;
 8004ce8:	2322      	movs	r3, #34	; 0x22
 8004cea:	603b      	str	r3, [r7, #0]
  pNodeConfig.Init.Request = GPDMA1_REQUEST_DCMI;
 8004cec:	2356      	movs	r3, #86	; 0x56
 8004cee:	607b      	str	r3, [r7, #4]
  pNodeConfig.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 8004cf0:	2300      	movs	r3, #0
 8004cf2:	60bb      	str	r3, [r7, #8]
  pNodeConfig.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004cf4:	2300      	movs	r3, #0
 8004cf6:	60fb      	str	r3, [r7, #12]
  pNodeConfig.Init.SrcInc = DMA_SINC_FIXED;
 8004cf8:	2300      	movs	r3, #0
 8004cfa:	613b      	str	r3, [r7, #16]
  pNodeConfig.Init.DestInc = DMA_DINC_INCREMENTED;
 8004cfc:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8004d00:	617b      	str	r3, [r7, #20]
  pNodeConfig.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_WORD;
 8004d02:	2302      	movs	r3, #2
 8004d04:	61bb      	str	r3, [r7, #24]
  pNodeConfig.Init.DestDataWidth = DMA_DEST_DATAWIDTH_WORD;
 8004d06:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004d0a:	61fb      	str	r3, [r7, #28]
  pNodeConfig.Init.SrcBurstLength = 1;
 8004d0c:	2301      	movs	r3, #1
 8004d0e:	627b      	str	r3, [r7, #36]	; 0x24
  pNodeConfig.Init.DestBurstLength = 1;
 8004d10:	2301      	movs	r3, #1
 8004d12:	62bb      	str	r3, [r7, #40]	; 0x28
  pNodeConfig.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT0;
 8004d14:	2300      	movs	r3, #0
 8004d16:	62fb      	str	r3, [r7, #44]	; 0x2c
  pNodeConfig.Init.TransferEventMode = DMA_TCEM_EACH_LL_ITEM_TRANSFER;
 8004d18:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004d1c:	633b      	str	r3, [r7, #48]	; 0x30
  pNodeConfig.RepeatBlockConfig.RepeatCount = 1;
 8004d1e:	2301      	movs	r3, #1
 8004d20:	64fb      	str	r3, [r7, #76]	; 0x4c
  pNodeConfig.RepeatBlockConfig.SrcAddrOffset = 0;
 8004d22:	2300      	movs	r3, #0
 8004d24:	653b      	str	r3, [r7, #80]	; 0x50
  pNodeConfig.RepeatBlockConfig.DestAddrOffset = 0;
 8004d26:	2300      	movs	r3, #0
 8004d28:	657b      	str	r3, [r7, #84]	; 0x54
  pNodeConfig.RepeatBlockConfig.BlkSrcAddrOffset = 0;
 8004d2a:	2300      	movs	r3, #0
 8004d2c:	65bb      	str	r3, [r7, #88]	; 0x58
  pNodeConfig.RepeatBlockConfig.BlkDestAddrOffset = 0;
 8004d2e:	2300      	movs	r3, #0
 8004d30:	65fb      	str	r3, [r7, #92]	; 0x5c
  pNodeConfig.TriggerConfig.TriggerPolarity = DMA_TRIG_POLARITY_MASKED;
 8004d32:	2300      	movs	r3, #0
 8004d34:	647b      	str	r3, [r7, #68]	; 0x44
  pNodeConfig.DataHandlingConfig.DataExchange = DMA_EXCHANGE_NONE;
 8004d36:	2300      	movs	r3, #0
 8004d38:	63bb      	str	r3, [r7, #56]	; 0x38
  pNodeConfig.DataHandlingConfig.DataAlignment = DMA_DATA_RIGHTALIGN_ZEROPADDED;
 8004d3a:	2300      	movs	r3, #0
 8004d3c:	63fb      	str	r3, [r7, #60]	; 0x3c
  pNodeConfig.SrcAddress = 0;
 8004d3e:	2300      	movs	r3, #0
 8004d40:	663b      	str	r3, [r7, #96]	; 0x60
  pNodeConfig.DstAddress = 0;
 8004d42:	2300      	movs	r3, #0
 8004d44:	667b      	str	r3, [r7, #100]	; 0x64
  pNodeConfig.DataSize = 0;
 8004d46:	2300      	movs	r3, #0
 8004d48:	66bb      	str	r3, [r7, #104]	; 0x68

  /* Build DCMItoMemoryPing Node */
  ret |= HAL_DMAEx_List_BuildNode(&pNodeConfig, &DCMItoMemoryPing);
 8004d4a:	463b      	mov	r3, r7
 8004d4c:	491e      	ldr	r1, [pc, #120]	; (8004dc8 <MX_ProjectDMAQueue_Config+0xec>)
 8004d4e:	4618      	mov	r0, r3
 8004d50:	f001 ff92 	bl	8006c78 <HAL_DMAEx_List_BuildNode>
 8004d54:	4603      	mov	r3, r0
 8004d56:	461a      	mov	r2, r3
 8004d58:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8004d5c:	4313      	orrs	r3, r2
 8004d5e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

  /* Insert DCMItoMemoryPing to Queue */
  ret |= HAL_DMAEx_List_InsertNode_Tail(&ProjectDMAQueue, &DCMItoMemoryPing);
 8004d62:	4919      	ldr	r1, [pc, #100]	; (8004dc8 <MX_ProjectDMAQueue_Config+0xec>)
 8004d64:	4819      	ldr	r0, [pc, #100]	; (8004dcc <MX_ProjectDMAQueue_Config+0xf0>)
 8004d66:	f001 ff9d 	bl	8006ca4 <HAL_DMAEx_List_InsertNode_Tail>
 8004d6a:	4603      	mov	r3, r0
 8004d6c:	461a      	mov	r2, r3
 8004d6e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8004d72:	4313      	orrs	r3, r2
 8004d74:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

  /* Set node configuration ################################################*/

  /* Build DCMItoMemoryPong Node */
  ret |= HAL_DMAEx_List_BuildNode(&pNodeConfig, &DCMItoMemoryPong);
 8004d78:	463b      	mov	r3, r7
 8004d7a:	4915      	ldr	r1, [pc, #84]	; (8004dd0 <MX_ProjectDMAQueue_Config+0xf4>)
 8004d7c:	4618      	mov	r0, r3
 8004d7e:	f001 ff7b 	bl	8006c78 <HAL_DMAEx_List_BuildNode>
 8004d82:	4603      	mov	r3, r0
 8004d84:	461a      	mov	r2, r3
 8004d86:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8004d8a:	4313      	orrs	r3, r2
 8004d8c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

  /* Insert DCMItoMemoryPong to Queue */
  ret |= HAL_DMAEx_List_InsertNode_Tail(&ProjectDMAQueue, &DCMItoMemoryPong);
 8004d90:	490f      	ldr	r1, [pc, #60]	; (8004dd0 <MX_ProjectDMAQueue_Config+0xf4>)
 8004d92:	480e      	ldr	r0, [pc, #56]	; (8004dcc <MX_ProjectDMAQueue_Config+0xf0>)
 8004d94:	f001 ff86 	bl	8006ca4 <HAL_DMAEx_List_InsertNode_Tail>
 8004d98:	4603      	mov	r3, r0
 8004d9a:	461a      	mov	r2, r3
 8004d9c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8004da0:	4313      	orrs	r3, r2
 8004da2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

  ret |= HAL_DMAEx_List_SetCircularModeConfig(&ProjectDMAQueue, &DCMItoMemoryPing);
 8004da6:	4908      	ldr	r1, [pc, #32]	; (8004dc8 <MX_ProjectDMAQueue_Config+0xec>)
 8004da8:	4808      	ldr	r0, [pc, #32]	; (8004dcc <MX_ProjectDMAQueue_Config+0xf0>)
 8004daa:	f001 fff3 	bl	8006d94 <HAL_DMAEx_List_SetCircularModeConfig>
 8004dae:	4603      	mov	r3, r0
 8004db0:	461a      	mov	r2, r3
 8004db2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8004db6:	4313      	orrs	r3, r2
 8004db8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

   return ret;
 8004dbc:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 8004dc0:	4618      	mov	r0, r3
 8004dc2:	3770      	adds	r7, #112	; 0x70
 8004dc4:	46bd      	mov	sp, r7
 8004dc6:	bd80      	pop	{r7, pc}
 8004dc8:	20001518 	.word	0x20001518
 8004dcc:	2000153c 	.word	0x2000153c
 8004dd0:	20001554 	.word	0x20001554

08004dd4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004dd4:	b580      	push	{r7, lr}
 8004dd6:	b088      	sub	sp, #32
 8004dd8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004dda:	f000 fd07 	bl	80057ec <HAL_Init>

  /* USER CODE BEGIN Init */
uint32_t time = 0;
 8004dde:	2300      	movs	r3, #0
 8004de0:	613b      	str	r3, [r7, #16]
uint32_t i = 0;
 8004de2:	2300      	movs	r3, #0
 8004de4:	61fb      	str	r3, [r7, #28]
uint32_t j = 0;
 8004de6:	2300      	movs	r3, #0
 8004de8:	61bb      	str	r3, [r7, #24]
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004dea:	f000 f8df 	bl	8004fac <SystemClock_Config>

  /* Configure the System Power */
  SystemPower_Config();
 8004dee:	f000 f939 	bl	8005064 <SystemPower_Config>

  /* USER CODE BEGIN SysInit */
  __HAL_RCC_PWR_CLK_ENABLE();
 8004df2:	4b62      	ldr	r3, [pc, #392]	; (8004f7c <main+0x1a8>)
 8004df4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004df8:	4a60      	ldr	r2, [pc, #384]	; (8004f7c <main+0x1a8>)
 8004dfa:	f043 0304 	orr.w	r3, r3, #4
 8004dfe:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8004e02:	4b5e      	ldr	r3, [pc, #376]	; (8004f7c <main+0x1a8>)
 8004e04:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004e08:	f003 0304 	and.w	r3, r3, #4
 8004e0c:	607b      	str	r3, [r7, #4]
 8004e0e:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddA();
 8004e10:	f005 f92e 	bl	800a070 <HAL_PWREx_EnableVddA>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004e14:	f7ff fa22 	bl	800425c <MX_GPIO_Init>
  //MX_DCMI_Init();
  //MX_GPDMA1_Init();
  //MX_OCTOSPI1_Init();
  MX_ICACHE_Init();
 8004e18:	f7ff ff54 	bl	8004cc4 <MX_ICACHE_Init>
  MX_DCACHE1_Init();
 8004e1c:	f7ff f880 	bl	8003f20 <MX_DCACHE1_Init>
  //MX_I2C1_Init();
  //MX_I2C2_Init();
  MX_CORDIC_Init();
 8004e20:	f7ff f848 	bl	8003eb4 <MX_CORDIC_Init>
  /* USER CODE BEGIN 2 */

  /***********Temp Sensor Test********/
  float temperature = 0;
 8004e24:	f04f 0300 	mov.w	r3, #0
 8004e28:	60fb      	str	r3, [r7, #12]
  float humidity = 0;
 8004e2a:	f04f 0300 	mov.w	r3, #0
 8004e2e:	60bb      	str	r3, [r7, #8]
  BSP_TempHumSensorInit();
 8004e30:	f7fc f9e4 	bl	80011fc <BSP_TempHumSensorInit>
  for(uint8_t i = 0; i < 10; i++)
 8004e34:	2300      	movs	r3, #0
 8004e36:	75fb      	strb	r3, [r7, #23]
 8004e38:	e010      	b.n	8004e5c <main+0x88>
  {
	  BSP_ReadTemperature(&temperature);
 8004e3a:	f107 030c 	add.w	r3, r7, #12
 8004e3e:	4618      	mov	r0, r3
 8004e40:	f7fc fa06 	bl	8001250 <BSP_ReadTemperature>
	  BSP_ReadHumidity(&humidity);
 8004e44:	f107 0308 	add.w	r3, r7, #8
 8004e48:	4618      	mov	r0, r3
 8004e4a:	f7fc fa11 	bl	8001270 <BSP_ReadHumidity>
	  HAL_Delay(1200);
 8004e4e:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 8004e52:	f000 fd19 	bl	8005888 <HAL_Delay>
  for(uint8_t i = 0; i < 10; i++)
 8004e56:	7dfb      	ldrb	r3, [r7, #23]
 8004e58:	3301      	adds	r3, #1
 8004e5a:	75fb      	strb	r3, [r7, #23]
 8004e5c:	7dfb      	ldrb	r3, [r7, #23]
 8004e5e:	2b09      	cmp	r3, #9
 8004e60:	d9eb      	bls.n	8004e3a <main+0x66>
  }
  /***********Mag Sensor Test********/
  BSP_MagnetometerInit();
 8004e62:	f7fc fa55 	bl	8001310 <BSP_MagnetometerInit>
  i = 0;
 8004e66:	2300      	movs	r3, #0
 8004e68:	61fb      	str	r3, [r7, #28]
  time = HAL_GetTick();
 8004e6a:	f000 fd01 	bl	8005870 <HAL_GetTick>
 8004e6e:	6138      	str	r0, [r7, #16]
  while(HAL_GetTick() < time + 1000)
 8004e70:	e014      	b.n	8004e9c <main+0xc8>
  {
      if(BSP_ReadMagnetometerXYZ(&MagX[i], &MagY[i], &MagZ[i]) == 0)
 8004e72:	69fb      	ldr	r3, [r7, #28]
 8004e74:	009b      	lsls	r3, r3, #2
 8004e76:	4a42      	ldr	r2, [pc, #264]	; (8004f80 <main+0x1ac>)
 8004e78:	1898      	adds	r0, r3, r2
 8004e7a:	69fb      	ldr	r3, [r7, #28]
 8004e7c:	009b      	lsls	r3, r3, #2
 8004e7e:	4a41      	ldr	r2, [pc, #260]	; (8004f84 <main+0x1b0>)
 8004e80:	1899      	adds	r1, r3, r2
 8004e82:	69fb      	ldr	r3, [r7, #28]
 8004e84:	009b      	lsls	r3, r3, #2
 8004e86:	4a40      	ldr	r2, [pc, #256]	; (8004f88 <main+0x1b4>)
 8004e88:	4413      	add	r3, r2
 8004e8a:	461a      	mov	r2, r3
 8004e8c:	f7fc fa70 	bl	8001370 <BSP_ReadMagnetometerXYZ>
 8004e90:	4603      	mov	r3, r0
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d102      	bne.n	8004e9c <main+0xc8>
      {
    	  i++;
 8004e96:	69fb      	ldr	r3, [r7, #28]
 8004e98:	3301      	adds	r3, #1
 8004e9a:	61fb      	str	r3, [r7, #28]
  while(HAL_GetTick() < time + 1000)
 8004e9c:	f000 fce8 	bl	8005870 <HAL_GetTick>
 8004ea0:	4602      	mov	r2, r0
 8004ea2:	693b      	ldr	r3, [r7, #16]
 8004ea4:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8004ea8:	429a      	cmp	r2, r3
 8004eaa:	d3e2      	bcc.n	8004e72 <main+0x9e>
      }
  }
  /***********Motion Sensor Test********/
  BSP_MotionSensorInit();
 8004eac:	f7fc fa74 	bl	8001398 <BSP_MotionSensorInit>
  time = HAL_GetTick();
 8004eb0:	f000 fcde 	bl	8005870 <HAL_GetTick>
 8004eb4:	6138      	str	r0, [r7, #16]
  i = 0;
 8004eb6:	2300      	movs	r3, #0
 8004eb8:	61fb      	str	r3, [r7, #28]
  j = 0;
 8004eba:	2300      	movs	r3, #0
 8004ebc:	61bb      	str	r3, [r7, #24]
  while(HAL_GetTick() < time + 1000)
 8004ebe:	e029      	b.n	8004f14 <main+0x140>
  {
    if(BSP_ReadAccelXYZ(&AccelX[i], &AccelY[i], &AccelZ[i]) == 0)
 8004ec0:	69fb      	ldr	r3, [r7, #28]
 8004ec2:	009b      	lsls	r3, r3, #2
 8004ec4:	4a31      	ldr	r2, [pc, #196]	; (8004f8c <main+0x1b8>)
 8004ec6:	1898      	adds	r0, r3, r2
 8004ec8:	69fb      	ldr	r3, [r7, #28]
 8004eca:	009b      	lsls	r3, r3, #2
 8004ecc:	4a30      	ldr	r2, [pc, #192]	; (8004f90 <main+0x1bc>)
 8004ece:	1899      	adds	r1, r3, r2
 8004ed0:	69fb      	ldr	r3, [r7, #28]
 8004ed2:	009b      	lsls	r3, r3, #2
 8004ed4:	4a2f      	ldr	r2, [pc, #188]	; (8004f94 <main+0x1c0>)
 8004ed6:	4413      	add	r3, r2
 8004ed8:	461a      	mov	r2, r3
 8004eda:	f7fc fadd 	bl	8001498 <BSP_ReadAccelXYZ>
 8004ede:	4603      	mov	r3, r0
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d102      	bne.n	8004eea <main+0x116>
    {
    	i++;
 8004ee4:	69fb      	ldr	r3, [r7, #28]
 8004ee6:	3301      	adds	r3, #1
 8004ee8:	61fb      	str	r3, [r7, #28]
    }
    if(BSP_ReadGyroXYZ(&GyroX[j], &GyroY[j], &GyroZ[j]) == 0)
 8004eea:	69bb      	ldr	r3, [r7, #24]
 8004eec:	009b      	lsls	r3, r3, #2
 8004eee:	4a2a      	ldr	r2, [pc, #168]	; (8004f98 <main+0x1c4>)
 8004ef0:	1898      	adds	r0, r3, r2
 8004ef2:	69bb      	ldr	r3, [r7, #24]
 8004ef4:	009b      	lsls	r3, r3, #2
 8004ef6:	4a29      	ldr	r2, [pc, #164]	; (8004f9c <main+0x1c8>)
 8004ef8:	1899      	adds	r1, r3, r2
 8004efa:	69bb      	ldr	r3, [r7, #24]
 8004efc:	009b      	lsls	r3, r3, #2
 8004efe:	4a28      	ldr	r2, [pc, #160]	; (8004fa0 <main+0x1cc>)
 8004f00:	4413      	add	r3, r2
 8004f02:	461a      	mov	r2, r3
 8004f04:	f7fc fae4 	bl	80014d0 <BSP_ReadGyroXYZ>
 8004f08:	4603      	mov	r3, r0
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d102      	bne.n	8004f14 <main+0x140>
    {
    	j++;
 8004f0e:	69bb      	ldr	r3, [r7, #24]
 8004f10:	3301      	adds	r3, #1
 8004f12:	61bb      	str	r3, [r7, #24]
  while(HAL_GetTick() < time + 1000)
 8004f14:	f000 fcac 	bl	8005870 <HAL_GetTick>
 8004f18:	4602      	mov	r2, r0
 8004f1a:	693b      	ldr	r3, [r7, #16]
 8004f1c:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8004f20:	429a      	cmp	r2, r3
 8004f22:	d3cd      	bcc.n	8004ec0 <main+0xec>
    }
  }

  /***********Pressure Sensor Test********/
  BSP_PressureSensorInit();
 8004f24:	f7fc f9b4 	bl	8001290 <BSP_PressureSensorInit>
  time = HAL_GetTick();
 8004f28:	f000 fca2 	bl	8005870 <HAL_GetTick>
 8004f2c:	6138      	str	r0, [r7, #16]
  i = 0;
 8004f2e:	2300      	movs	r3, #0
 8004f30:	61fb      	str	r3, [r7, #28]
  while(HAL_GetTick() < time + 5000){
 8004f32:	e00c      	b.n	8004f4e <main+0x17a>
    if(BSP_ReadPressure(&Pressure[i]) == 0)
 8004f34:	69fb      	ldr	r3, [r7, #28]
 8004f36:	009b      	lsls	r3, r3, #2
 8004f38:	4a1a      	ldr	r2, [pc, #104]	; (8004fa4 <main+0x1d0>)
 8004f3a:	4413      	add	r3, r2
 8004f3c:	4618      	mov	r0, r3
 8004f3e:	f7fc f9d7 	bl	80012f0 <BSP_ReadPressure>
 8004f42:	4603      	mov	r3, r0
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d102      	bne.n	8004f4e <main+0x17a>
    {
    	i++;
 8004f48:	69fb      	ldr	r3, [r7, #28]
 8004f4a:	3301      	adds	r3, #1
 8004f4c:	61fb      	str	r3, [r7, #28]
  while(HAL_GetTick() < time + 5000){
 8004f4e:	f000 fc8f 	bl	8005870 <HAL_GetTick>
 8004f52:	4602      	mov	r2, r0
 8004f54:	693b      	ldr	r3, [r7, #16]
 8004f56:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 8004f5a:	3308      	adds	r3, #8
 8004f5c:	429a      	cmp	r2, r3
 8004f5e:	d3e9      	bcc.n	8004f34 <main+0x160>
    }
  }
  /***********Camera Test********/
  BSP_RamInit();
 8004f60:	f7fc fad2 	bl	8001508 <BSP_RamInit>
  BSP_RamErase();
 8004f64:	f7fc fadc 	bl	8001520 <BSP_RamErase>
  BSP_CameraInit();
 8004f68:	f7fc f8c9 	bl	80010fe <BSP_CameraInit>
  BSP_CameraStart((uint8_t*)CameraBuff);
 8004f6c:	4b0e      	ldr	r3, [pc, #56]	; (8004fa8 <main+0x1d4>)
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	4618      	mov	r0, r3
 8004f72:	f7fc f8d1 	bl	8001118 <BSP_CameraStart>

  /* USER CODE END 2 */

  MX_ThreadX_Init();
 8004f76:	f7fe ff47 	bl	8003e08 <MX_ThreadX_Init>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
 8004f7a:	e7fe      	b.n	8004f7a <main+0x1a6>
 8004f7c:	46020c00 	.word	0x46020c00
 8004f80:	20001fa0 	.word	0x20001fa0
 8004f84:	20002068 	.word	0x20002068
 8004f88:	20002130 	.word	0x20002130
 8004f8c:	20001578 	.word	0x20001578
 8004f90:	20001708 	.word	0x20001708
 8004f94:	20001898 	.word	0x20001898
 8004f98:	20001a28 	.word	0x20001a28
 8004f9c:	20001bb8 	.word	0x20001bb8
 8004fa0:	20001d48 	.word	0x20001d48
 8004fa4:	20001ed8 	.word	0x20001ed8
 8004fa8:	20000000 	.word	0x20000000

08004fac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004fac:	b580      	push	{r7, lr}
 8004fae:	b09e      	sub	sp, #120	; 0x78
 8004fb0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004fb2:	f107 0318 	add.w	r3, r7, #24
 8004fb6:	2260      	movs	r2, #96	; 0x60
 8004fb8:	2100      	movs	r1, #0
 8004fba:	4618      	mov	r0, r3
 8004fbc:	f009 fc9e 	bl	800e8fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004fc0:	463b      	mov	r3, r7
 8004fc2:	2200      	movs	r2, #0
 8004fc4:	601a      	str	r2, [r3, #0]
 8004fc6:	605a      	str	r2, [r3, #4]
 8004fc8:	609a      	str	r2, [r3, #8]
 8004fca:	60da      	str	r2, [r3, #12]
 8004fcc:	611a      	str	r2, [r3, #16]
 8004fce:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8004fd0:	f44f 3040 	mov.w	r0, #196608	; 0x30000
 8004fd4:	f004 ff6a 	bl	8009eac <HAL_PWREx_ControlVoltageScaling>
 8004fd8:	4603      	mov	r3, r0
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d001      	beq.n	8004fe2 <SystemClock_Config+0x36>
  {
    Error_Handler();
 8004fde:	f000 f861 	bl	80050a4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8004fe2:	2310      	movs	r3, #16
 8004fe4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8004fe6:	2301      	movs	r3, #1
 8004fe8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8004fea:	2310      	movs	r3, #16
 8004fec:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_4;
 8004fee:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004ff2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004ff4:	2302      	movs	r3, #2
 8004ff6:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8004ff8:	2301      	movs	r3, #1
 8004ffa:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLMBOOST = RCC_PLLMBOOST_DIV1;
 8004ffc:	2300      	movs	r3, #0
 8004ffe:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8005000:	2301      	movs	r3, #1
 8005002:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 80;
 8005004:	2350      	movs	r3, #80	; 0x50
 8005006:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLP = 2;
 8005008:	2302      	movs	r3, #2
 800500a:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800500c:	2302      	movs	r3, #2
 800500e:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLR = 2;
 8005010:	2302      	movs	r3, #2
 8005012:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLLVCIRANGE_0;
 8005014:	2300      	movs	r3, #0
 8005016:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8005018:	2300      	movs	r3, #0
 800501a:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800501c:	f107 0318 	add.w	r3, r7, #24
 8005020:	4618      	mov	r0, r3
 8005022:	f005 f835 	bl	800a090 <HAL_RCC_OscConfig>
 8005026:	4603      	mov	r3, r0
 8005028:	2b00      	cmp	r3, #0
 800502a:	d001      	beq.n	8005030 <SystemClock_Config+0x84>
  {
    Error_Handler();
 800502c:	f000 f83a 	bl	80050a4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005030:	231f      	movs	r3, #31
 8005032:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005034:	2303      	movs	r3, #3
 8005036:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005038:	2300      	movs	r3, #0
 800503a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800503c:	2300      	movs	r3, #0
 800503e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8005040:	2300      	movs	r3, #0
 8005042:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 8005044:	2300      	movs	r3, #0
 8005046:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8005048:	463b      	mov	r3, r7
 800504a:	2104      	movs	r1, #4
 800504c:	4618      	mov	r0, r3
 800504e:	f005 fef5 	bl	800ae3c <HAL_RCC_ClockConfig>
 8005052:	4603      	mov	r3, r0
 8005054:	2b00      	cmp	r3, #0
 8005056:	d001      	beq.n	800505c <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8005058:	f000 f824 	bl	80050a4 <Error_Handler>
  }
}
 800505c:	bf00      	nop
 800505e:	3778      	adds	r7, #120	; 0x78
 8005060:	46bd      	mov	sp, r7
 8005062:	bd80      	pop	{r7, pc}

08005064 <SystemPower_Config>:
/**
  * @brief Power Configuration
  * @retval None
  */
static void SystemPower_Config(void)
{
 8005064:	b580      	push	{r7, lr}
 8005066:	af00      	add	r7, sp, #0
  HAL_PWREx_EnableVddIO2();
 8005068:	f004 fff2 	bl	800a050 <HAL_PWREx_EnableVddIO2>

  /*
   * Switch to SMPS regulator instead of LDO
   */
  if (HAL_PWREx_ConfigSupply(PWR_SMPS_SUPPLY) != HAL_OK)
 800506c:	2002      	movs	r0, #2
 800506e:	f004 ff9f 	bl	8009fb0 <HAL_PWREx_ConfigSupply>
 8005072:	4603      	mov	r3, r0
 8005074:	2b00      	cmp	r3, #0
 8005076:	d001      	beq.n	800507c <SystemPower_Config+0x18>
  {
    Error_Handler();
 8005078:	f000 f814 	bl	80050a4 <Error_Handler>
  }
}
 800507c:	bf00      	nop
 800507e:	bd80      	pop	{r7, pc}

08005080 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005080:	b580      	push	{r7, lr}
 8005082:	b082      	sub	sp, #8
 8005084:	af00      	add	r7, sp, #0
 8005086:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	4a04      	ldr	r2, [pc, #16]	; (80050a0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800508e:	4293      	cmp	r3, r2
 8005090:	d101      	bne.n	8005096 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8005092:	f000 fbd9 	bl	8005848 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8005096:	bf00      	nop
 8005098:	3708      	adds	r7, #8
 800509a:	46bd      	mov	sp, r7
 800509c:	bd80      	pop	{r7, pc}
 800509e:	bf00      	nop
 80050a0:	40001000 	.word	0x40001000

080050a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80050a4:	b480      	push	{r7}
 80050a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80050a8:	b672      	cpsid	i
}
 80050aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80050ac:	e7fe      	b.n	80050ac <Error_Handler+0x8>
	...

080050b0 <HAL_OSPI_MspInit>:
  /* USER CODE END OCTOSPI1_Init 2 */

}

void HAL_OSPI_MspInit(OSPI_HandleTypeDef* ospiHandle)
{
 80050b0:	b580      	push	{r7, lr}
 80050b2:	b0c4      	sub	sp, #272	; 0x110
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80050ba:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80050be:	6018      	str	r0, [r3, #0]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80050c0:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80050c4:	2200      	movs	r2, #0
 80050c6:	601a      	str	r2, [r3, #0]
 80050c8:	605a      	str	r2, [r3, #4]
 80050ca:	609a      	str	r2, [r3, #8]
 80050cc:	60da      	str	r2, [r3, #12]
 80050ce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80050d0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80050d4:	22c8      	movs	r2, #200	; 0xc8
 80050d6:	2100      	movs	r1, #0
 80050d8:	4618      	mov	r0, r3
 80050da:	f009 fc0f 	bl	800e8fc <memset>
  if(ospiHandle->Instance==OCTOSPI1)
 80050de:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80050e2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	4aa4      	ldr	r2, [pc, #656]	; (800537c <HAL_OSPI_MspInit+0x2cc>)
 80050ec:	4293      	cmp	r3, r2
 80050ee:	f040 813f 	bne.w	8005370 <HAL_OSPI_MspInit+0x2c0>

  /* USER CODE END OCTOSPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_OSPI;
 80050f2:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80050f6:	f04f 0300 	mov.w	r3, #0
 80050fa:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    PeriphClkInit.OspiClockSelection = RCC_OSPICLKSOURCE_SYSCLK;
 80050fe:	2300      	movs	r3, #0
 8005100:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005104:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005108:	4618      	mov	r0, r3
 800510a:	f006 fa7d 	bl	800b608 <HAL_RCCEx_PeriphCLKConfig>
 800510e:	4603      	mov	r3, r0
 8005110:	2b00      	cmp	r3, #0
 8005112:	d001      	beq.n	8005118 <HAL_OSPI_MspInit+0x68>
    {
      Error_Handler();
 8005114:	f7ff ffc6 	bl	80050a4 <Error_Handler>
    }

    /* OCTOSPI1 clock enable */
    __HAL_RCC_OSPIM_CLK_ENABLE();
 8005118:	4b99      	ldr	r3, [pc, #612]	; (8005380 <HAL_OSPI_MspInit+0x2d0>)
 800511a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800511e:	4a98      	ldr	r2, [pc, #608]	; (8005380 <HAL_OSPI_MspInit+0x2d0>)
 8005120:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005124:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8005128:	4b95      	ldr	r3, [pc, #596]	; (8005380 <HAL_OSPI_MspInit+0x2d0>)
 800512a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800512e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005132:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005134:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    __HAL_RCC_OSPI1_CLK_ENABLE();
 8005136:	4b92      	ldr	r3, [pc, #584]	; (8005380 <HAL_OSPI_MspInit+0x2d0>)
 8005138:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800513c:	4a90      	ldr	r2, [pc, #576]	; (8005380 <HAL_OSPI_MspInit+0x2d0>)
 800513e:	f043 0310 	orr.w	r3, r3, #16
 8005142:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005146:	4b8e      	ldr	r3, [pc, #568]	; (8005380 <HAL_OSPI_MspInit+0x2d0>)
 8005148:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800514c:	f003 0310 	and.w	r3, r3, #16
 8005150:	62bb      	str	r3, [r7, #40]	; 0x28
 8005152:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOI_CLK_ENABLE();
 8005154:	4b8a      	ldr	r3, [pc, #552]	; (8005380 <HAL_OSPI_MspInit+0x2d0>)
 8005156:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800515a:	4a89      	ldr	r2, [pc, #548]	; (8005380 <HAL_OSPI_MspInit+0x2d0>)
 800515c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005160:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8005164:	4b86      	ldr	r3, [pc, #536]	; (8005380 <HAL_OSPI_MspInit+0x2d0>)
 8005166:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800516a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800516e:	627b      	str	r3, [r7, #36]	; 0x24
 8005170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8005172:	4b83      	ldr	r3, [pc, #524]	; (8005380 <HAL_OSPI_MspInit+0x2d0>)
 8005174:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005178:	4a81      	ldr	r2, [pc, #516]	; (8005380 <HAL_OSPI_MspInit+0x2d0>)
 800517a:	f043 0310 	orr.w	r3, r3, #16
 800517e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8005182:	4b7f      	ldr	r3, [pc, #508]	; (8005380 <HAL_OSPI_MspInit+0x2d0>)
 8005184:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005188:	f003 0310 	and.w	r3, r3, #16
 800518c:	623b      	str	r3, [r7, #32]
 800518e:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8005190:	4b7b      	ldr	r3, [pc, #492]	; (8005380 <HAL_OSPI_MspInit+0x2d0>)
 8005192:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005196:	4a7a      	ldr	r2, [pc, #488]	; (8005380 <HAL_OSPI_MspInit+0x2d0>)
 8005198:	f043 0308 	orr.w	r3, r3, #8
 800519c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80051a0:	4b77      	ldr	r3, [pc, #476]	; (8005380 <HAL_OSPI_MspInit+0x2d0>)
 80051a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80051a6:	f003 0308 	and.w	r3, r3, #8
 80051aa:	61fb      	str	r3, [r7, #28]
 80051ac:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80051ae:	4b74      	ldr	r3, [pc, #464]	; (8005380 <HAL_OSPI_MspInit+0x2d0>)
 80051b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80051b4:	4a72      	ldr	r2, [pc, #456]	; (8005380 <HAL_OSPI_MspInit+0x2d0>)
 80051b6:	f043 0320 	orr.w	r3, r3, #32
 80051ba:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80051be:	4b70      	ldr	r3, [pc, #448]	; (8005380 <HAL_OSPI_MspInit+0x2d0>)
 80051c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80051c4:	f003 0320 	and.w	r3, r3, #32
 80051c8:	61bb      	str	r3, [r7, #24]
 80051ca:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80051cc:	4b6c      	ldr	r3, [pc, #432]	; (8005380 <HAL_OSPI_MspInit+0x2d0>)
 80051ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80051d2:	4a6b      	ldr	r2, [pc, #428]	; (8005380 <HAL_OSPI_MspInit+0x2d0>)
 80051d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80051d8:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80051dc:	4b68      	ldr	r3, [pc, #416]	; (8005380 <HAL_OSPI_MspInit+0x2d0>)
 80051de:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80051e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051e6:	617b      	str	r3, [r7, #20]
 80051e8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80051ea:	4b65      	ldr	r3, [pc, #404]	; (8005380 <HAL_OSPI_MspInit+0x2d0>)
 80051ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80051f0:	4a63      	ldr	r2, [pc, #396]	; (8005380 <HAL_OSPI_MspInit+0x2d0>)
 80051f2:	f043 0304 	orr.w	r3, r3, #4
 80051f6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80051fa:	4b61      	ldr	r3, [pc, #388]	; (8005380 <HAL_OSPI_MspInit+0x2d0>)
 80051fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005200:	f003 0204 	and.w	r2, r3, #4
 8005204:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005208:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800520c:	601a      	str	r2, [r3, #0]
 800520e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005212:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8005216:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005218:	4b59      	ldr	r3, [pc, #356]	; (8005380 <HAL_OSPI_MspInit+0x2d0>)
 800521a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800521e:	4a58      	ldr	r2, [pc, #352]	; (8005380 <HAL_OSPI_MspInit+0x2d0>)
 8005220:	f043 0302 	orr.w	r3, r3, #2
 8005224:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8005228:	4b55      	ldr	r3, [pc, #340]	; (8005380 <HAL_OSPI_MspInit+0x2d0>)
 800522a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800522e:	f003 0202 	and.w	r2, r3, #2
 8005232:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005236:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800523a:	601a      	str	r2, [r3, #0]
 800523c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005240:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005244:	681b      	ldr	r3, [r3, #0]
    PF6     ------> OCTOSPIM_P1_IO3
    PC3     ------> OCTOSPIM_P1_IO6
    PB10     ------> OCTOSPIM_P1_CLK
    PB11     ------> OCTOSPIM_P1_NCS
    */
    GPIO_InitStruct.Pin = OCTOSPI_R_IO5_Pin;
 8005246:	2301      	movs	r3, #1
 8005248:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800524c:	2302      	movs	r3, #2
 800524e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005252:	2300      	movs	r3, #0
 8005254:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005258:	2303      	movs	r3, #3
 800525a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    GPIO_InitStruct.Alternate = GPIO_AF3_OCTOSPI1;
 800525e:	2303      	movs	r3, #3
 8005260:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    HAL_GPIO_Init(OCTOSPI_R_IO5_GPIO_Port, &GPIO_InitStruct);
 8005264:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8005268:	4619      	mov	r1, r3
 800526a:	4846      	ldr	r0, [pc, #280]	; (8005384 <HAL_OSPI_MspInit+0x2d4>)
 800526c:	f002 fa7c 	bl	8007768 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OCTOSPI_R_DQS_Pin;
 8005270:	2308      	movs	r3, #8
 8005272:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005276:	2302      	movs	r3, #2
 8005278:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800527c:	2300      	movs	r3, #0
 800527e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005282:	2303      	movs	r3, #3
 8005284:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    GPIO_InitStruct.Alternate = GPIO_AF3_OCTOSPI1;
 8005288:	2303      	movs	r3, #3
 800528a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    HAL_GPIO_Init(OCTOSPI_R_DQS_GPIO_Port, &GPIO_InitStruct);
 800528e:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8005292:	4619      	mov	r1, r3
 8005294:	483c      	ldr	r0, [pc, #240]	; (8005388 <HAL_OSPI_MspInit+0x2d8>)
 8005296:	f002 fa67 	bl	8007768 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OCTOSPI_R_IO7_Pin;
 800529a:	2380      	movs	r3, #128	; 0x80
 800529c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80052a0:	2302      	movs	r3, #2
 80052a2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80052a6:	2300      	movs	r3, #0
 80052a8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80052ac:	2303      	movs	r3, #3
 80052ae:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPI1;
 80052b2:	230a      	movs	r3, #10
 80052b4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    HAL_GPIO_Init(OCTOSPI_R_IO7_GPIO_Port, &GPIO_InitStruct);
 80052b8:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80052bc:	4619      	mov	r1, r3
 80052be:	4833      	ldr	r0, [pc, #204]	; (800538c <HAL_OSPI_MspInit+0x2dc>)
 80052c0:	f002 fa52 	bl	8007768 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OCTOSPI_R_IO0_Pin|OCTOSPI_R_IO2_Pin|OCTOSPI_R_IO1_Pin|OCTOSPI_R_IO3_Pin;
 80052c4:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 80052c8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80052cc:	2302      	movs	r3, #2
 80052ce:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80052d2:	2300      	movs	r3, #0
 80052d4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80052d8:	2303      	movs	r3, #3
 80052da:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPI1;
 80052de:	230a      	movs	r3, #10
 80052e0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80052e4:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80052e8:	4619      	mov	r1, r3
 80052ea:	4829      	ldr	r0, [pc, #164]	; (8005390 <HAL_OSPI_MspInit+0x2e0>)
 80052ec:	f002 fa3c 	bl	8007768 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OCTOSPI_R_IO4_Pin;
 80052f0:	2304      	movs	r3, #4
 80052f2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80052f6:	2302      	movs	r3, #2
 80052f8:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80052fc:	2300      	movs	r3, #0
 80052fe:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005302:	2303      	movs	r3, #3
 8005304:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    GPIO_InitStruct.Alternate = GPIO_AF3_OCTOSPI1;
 8005308:	2303      	movs	r3, #3
 800530a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    HAL_GPIO_Init(OCTOSPI_R_IO4_GPIO_Port, &GPIO_InitStruct);
 800530e:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8005312:	4619      	mov	r1, r3
 8005314:	481f      	ldr	r0, [pc, #124]	; (8005394 <HAL_OSPI_MspInit+0x2e4>)
 8005316:	f002 fa27 	bl	8007768 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OCTOSPI_R_IO6_Pin;
 800531a:	2308      	movs	r3, #8
 800531c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005320:	2302      	movs	r3, #2
 8005322:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005326:	2300      	movs	r3, #0
 8005328:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800532c:	2303      	movs	r3, #3
 800532e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPI1;
 8005332:	230a      	movs	r3, #10
 8005334:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    HAL_GPIO_Init(OCTOSPI_R_IO6_GPIO_Port, &GPIO_InitStruct);
 8005338:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 800533c:	4619      	mov	r1, r3
 800533e:	4816      	ldr	r0, [pc, #88]	; (8005398 <HAL_OSPI_MspInit+0x2e8>)
 8005340:	f002 fa12 	bl	8007768 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OCTOSPI_R_CLK_P_Pin|OCTOSPI_R_NCS_Pin;
 8005344:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8005348:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800534c:	2302      	movs	r3, #2
 800534e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005352:	2300      	movs	r3, #0
 8005354:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005358:	2303      	movs	r3, #3
 800535a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPI1;
 800535e:	230a      	movs	r3, #10
 8005360:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005364:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8005368:	4619      	mov	r1, r3
 800536a:	480c      	ldr	r0, [pc, #48]	; (800539c <HAL_OSPI_MspInit+0x2ec>)
 800536c:	f002 f9fc 	bl	8007768 <HAL_GPIO_Init>

  /* USER CODE BEGIN OCTOSPI1_MspInit 1 */

  /* USER CODE END OCTOSPI1_MspInit 1 */
  }
}
 8005370:	bf00      	nop
 8005372:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8005376:	46bd      	mov	sp, r7
 8005378:	bd80      	pop	{r7, pc}
 800537a:	bf00      	nop
 800537c:	420d1400 	.word	0x420d1400
 8005380:	46020c00 	.word	0x46020c00
 8005384:	42022000 	.word	0x42022000
 8005388:	42021000 	.word	0x42021000
 800538c:	42020c00 	.word	0x42020c00
 8005390:	42021400 	.word	0x42021400
 8005394:	42021c00 	.word	0x42021c00
 8005398:	42020800 	.word	0x42020800
 800539c:	42020400 	.word	0x42020400

080053a0 <OSPI_RamInit>:
  /* USER CODE END OCTOSPI1_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void OSPI_RamInit(void){
 80053a0:	b580      	push	{r7, lr}
 80053a2:	b088      	sub	sp, #32
 80053a4:	af00      	add	r7, sp, #0
	  OSPIM_CfgTypeDef sOspiManagerCfg = {0};
 80053a6:	f107 0308 	add.w	r3, r7, #8
 80053aa:	2200      	movs	r2, #0
 80053ac:	601a      	str	r2, [r3, #0]
 80053ae:	605a      	str	r2, [r3, #4]
 80053b0:	609a      	str	r2, [r3, #8]
 80053b2:	60da      	str	r2, [r3, #12]
 80053b4:	611a      	str	r2, [r3, #16]
 80053b6:	615a      	str	r2, [r3, #20]
	  HAL_OSPI_DLYB_CfgTypeDef HAL_OSPI_DLYB_Cfg_Struct = {0};
 80053b8:	463b      	mov	r3, r7
 80053ba:	2200      	movs	r2, #0
 80053bc:	601a      	str	r2, [r3, #0]
 80053be:	605a      	str	r2, [r3, #4]

	  hospi1.Instance = OCTOSPI1;
 80053c0:	4b2a      	ldr	r3, [pc, #168]	; (800546c <OSPI_RamInit+0xcc>)
 80053c2:	4a2b      	ldr	r2, [pc, #172]	; (8005470 <OSPI_RamInit+0xd0>)
 80053c4:	601a      	str	r2, [r3, #0]
	  hospi1.Init.FifoThreshold = 1;
 80053c6:	4b29      	ldr	r3, [pc, #164]	; (800546c <OSPI_RamInit+0xcc>)
 80053c8:	2201      	movs	r2, #1
 80053ca:	605a      	str	r2, [r3, #4]
	  hospi1.Init.DualQuad = HAL_OSPI_DUALQUAD_DISABLE;
 80053cc:	4b27      	ldr	r3, [pc, #156]	; (800546c <OSPI_RamInit+0xcc>)
 80053ce:	2200      	movs	r2, #0
 80053d0:	609a      	str	r2, [r3, #8]
	  hospi1.Init.MemoryType = HAL_OSPI_MEMTYPE_APMEMORY;
 80053d2:	4b26      	ldr	r3, [pc, #152]	; (800546c <OSPI_RamInit+0xcc>)
 80053d4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80053d8:	60da      	str	r2, [r3, #12]
	  hospi1.Init.DeviceSize = 23;
 80053da:	4b24      	ldr	r3, [pc, #144]	; (800546c <OSPI_RamInit+0xcc>)
 80053dc:	2217      	movs	r2, #23
 80053de:	611a      	str	r2, [r3, #16]
	  hospi1.Init.ChipSelectHighTime = 1;
 80053e0:	4b22      	ldr	r3, [pc, #136]	; (800546c <OSPI_RamInit+0xcc>)
 80053e2:	2201      	movs	r2, #1
 80053e4:	615a      	str	r2, [r3, #20]
	  hospi1.Init.FreeRunningClock = HAL_OSPI_FREERUNCLK_DISABLE;
 80053e6:	4b21      	ldr	r3, [pc, #132]	; (800546c <OSPI_RamInit+0xcc>)
 80053e8:	2200      	movs	r2, #0
 80053ea:	619a      	str	r2, [r3, #24]
	  hospi1.Init.ClockMode = HAL_OSPI_CLOCK_MODE_0;
 80053ec:	4b1f      	ldr	r3, [pc, #124]	; (800546c <OSPI_RamInit+0xcc>)
 80053ee:	2200      	movs	r2, #0
 80053f0:	61da      	str	r2, [r3, #28]
	  hospi1.Init.WrapSize = HAL_OSPI_WRAP_NOT_SUPPORTED;
 80053f2:	4b1e      	ldr	r3, [pc, #120]	; (800546c <OSPI_RamInit+0xcc>)
 80053f4:	2200      	movs	r2, #0
 80053f6:	621a      	str	r2, [r3, #32]
	  hospi1.Init.ClockPrescaler = 2;
 80053f8:	4b1c      	ldr	r3, [pc, #112]	; (800546c <OSPI_RamInit+0xcc>)
 80053fa:	2202      	movs	r2, #2
 80053fc:	625a      	str	r2, [r3, #36]	; 0x24
	  hospi1.Init.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 80053fe:	4b1b      	ldr	r3, [pc, #108]	; (800546c <OSPI_RamInit+0xcc>)
 8005400:	2200      	movs	r2, #0
 8005402:	629a      	str	r2, [r3, #40]	; 0x28
	  hospi1.Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_ENABLE;
 8005404:	4b19      	ldr	r3, [pc, #100]	; (800546c <OSPI_RamInit+0xcc>)
 8005406:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800540a:	62da      	str	r2, [r3, #44]	; 0x2c
	  hospi1.Init.ChipSelectBoundary = 0;
 800540c:	4b17      	ldr	r3, [pc, #92]	; (800546c <OSPI_RamInit+0xcc>)
 800540e:	2200      	movs	r2, #0
 8005410:	631a      	str	r2, [r3, #48]	; 0x30
	  hospi1.Init.DelayBlockBypass = HAL_OSPI_DELAY_BLOCK_USED;
 8005412:	4b16      	ldr	r3, [pc, #88]	; (800546c <OSPI_RamInit+0xcc>)
 8005414:	2200      	movs	r2, #0
 8005416:	635a      	str	r2, [r3, #52]	; 0x34
	  hospi1.Init.MaxTran = 0;
 8005418:	4b14      	ldr	r3, [pc, #80]	; (800546c <OSPI_RamInit+0xcc>)
 800541a:	2200      	movs	r2, #0
 800541c:	639a      	str	r2, [r3, #56]	; 0x38
	  hospi1.Init.Refresh = 320;
 800541e:	4b13      	ldr	r3, [pc, #76]	; (800546c <OSPI_RamInit+0xcc>)
 8005420:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8005424:	63da      	str	r2, [r3, #60]	; 0x3c
	  HAL_OSPI_Init(&hospi1);
 8005426:	4811      	ldr	r0, [pc, #68]	; (800546c <OSPI_RamInit+0xcc>)
 8005428:	f003 faf8 	bl	8008a1c <HAL_OSPI_Init>

	  sOspiManagerCfg.ClkPort = 1;
 800542c:	2301      	movs	r3, #1
 800542e:	60bb      	str	r3, [r7, #8]
	  sOspiManagerCfg.DQSPort = 1;
 8005430:	2301      	movs	r3, #1
 8005432:	60fb      	str	r3, [r7, #12]
	  sOspiManagerCfg.NCSPort = 1;
 8005434:	2301      	movs	r3, #1
 8005436:	613b      	str	r3, [r7, #16]
	  sOspiManagerCfg.IOLowPort = HAL_OSPIM_IOPORT_1_LOW;
 8005438:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 800543c:	617b      	str	r3, [r7, #20]
	  sOspiManagerCfg.IOHighPort = HAL_OSPIM_IOPORT_1_HIGH;
 800543e:	4b0d      	ldr	r3, [pc, #52]	; (8005474 <OSPI_RamInit+0xd4>)
 8005440:	61bb      	str	r3, [r7, #24]
	  HAL_OSPIM_Config(&hospi1, &sOspiManagerCfg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE);
 8005442:	f107 0308 	add.w	r3, r7, #8
 8005446:	f241 3288 	movw	r2, #5000	; 0x1388
 800544a:	4619      	mov	r1, r3
 800544c:	4807      	ldr	r0, [pc, #28]	; (800546c <OSPI_RamInit+0xcc>)
 800544e:	f003 fcff 	bl	8008e50 <HAL_OSPIM_Config>

	  HAL_OSPI_DLYB_Cfg_Struct.Units = 0;
 8005452:	2300      	movs	r3, #0
 8005454:	603b      	str	r3, [r7, #0]
	  HAL_OSPI_DLYB_Cfg_Struct.PhaseSel = 0;
 8005456:	2300      	movs	r3, #0
 8005458:	607b      	str	r3, [r7, #4]
	  HAL_OSPI_DLYB_SetConfig(&hospi1, &HAL_OSPI_DLYB_Cfg_Struct);
 800545a:	463b      	mov	r3, r7
 800545c:	4619      	mov	r1, r3
 800545e:	4803      	ldr	r0, [pc, #12]	; (800546c <OSPI_RamInit+0xcc>)
 8005460:	f004 fc5c 	bl	8009d1c <HAL_OSPI_DLYB_SetConfig>


}
 8005464:	bf00      	nop
 8005466:	3720      	adds	r7, #32
 8005468:	46bd      	mov	sp, r7
 800546a:	bd80      	pop	{r7, pc}
 800546c:	200021f8 	.word	0x200021f8
 8005470:	420d1400 	.word	0x420d1400
 8005474:	01000001 	.word	0x01000001

08005478 <OSPI_EnableMemMappedMode>:

void OSPI_EnableMemMappedMode(void){
 8005478:	b580      	push	{r7, lr}
 800547a:	b096      	sub	sp, #88	; 0x58
 800547c:	af00      	add	r7, sp, #0
	OSPI_RegularCmdTypeDef sCommand;
	OSPI_MemoryMappedTypeDef sMemMappedCfg;
	  sCommand.OperationType      = HAL_OSPI_OPTYPE_WRITE_CFG;
 800547e:	2302      	movs	r3, #2
 8005480:	60bb      	str	r3, [r7, #8]
	  sCommand.FlashId            = HAL_OSPI_FLASH_ID_1;
 8005482:	2300      	movs	r3, #0
 8005484:	60fb      	str	r3, [r7, #12]
	  sCommand.Instruction        = WRITE_CMD;
 8005486:	2380      	movs	r3, #128	; 0x80
 8005488:	613b      	str	r3, [r7, #16]
	  sCommand.InstructionMode    = HAL_OSPI_INSTRUCTION_8_LINES;
 800548a:	2304      	movs	r3, #4
 800548c:	617b      	str	r3, [r7, #20]
	  sCommand.InstructionSize    = HAL_OSPI_INSTRUCTION_8_BITS;
 800548e:	2300      	movs	r3, #0
 8005490:	61bb      	str	r3, [r7, #24]
	  sCommand.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8005492:	2300      	movs	r3, #0
 8005494:	61fb      	str	r3, [r7, #28]
	  sCommand.AddressMode        = HAL_OSPI_ADDRESS_8_LINES;
 8005496:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800549a:	627b      	str	r3, [r7, #36]	; 0x24
	  sCommand.AddressSize        = HAL_OSPI_ADDRESS_32_BITS;
 800549c:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80054a0:	62bb      	str	r3, [r7, #40]	; 0x28
	  sCommand.AddressDtrMode     = HAL_OSPI_ADDRESS_DTR_ENABLE;
 80054a2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80054a6:	62fb      	str	r3, [r7, #44]	; 0x2c
	  sCommand.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 80054a8:	2300      	movs	r3, #0
 80054aa:	637b      	str	r3, [r7, #52]	; 0x34
	  sCommand.DataMode           = HAL_OSPI_DATA_8_LINES;
 80054ac:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80054b0:	643b      	str	r3, [r7, #64]	; 0x40
	  sCommand.DataDtrMode        = HAL_OSPI_DATA_DTR_ENABLE;
 80054b2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80054b6:	64bb      	str	r3, [r7, #72]	; 0x48
	  sCommand.DummyCycles        = DUMMY_CLOCK_CYCLES_WRITE;
 80054b8:	2304      	movs	r3, #4
 80054ba:	64fb      	str	r3, [r7, #76]	; 0x4c
	  sCommand.DQSMode            = HAL_OSPI_DQS_ENABLE;
 80054bc:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80054c0:	653b      	str	r3, [r7, #80]	; 0x50
	  sCommand.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 80054c2:	2300      	movs	r3, #0
 80054c4:	657b      	str	r3, [r7, #84]	; 0x54

	  if (HAL_OSPI_Command(&hospi1, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80054c6:	f107 0308 	add.w	r3, r7, #8
 80054ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80054ce:	4619      	mov	r1, r3
 80054d0:	4816      	ldr	r0, [pc, #88]	; (800552c <OSPI_EnableMemMappedMode+0xb4>)
 80054d2:	f003 fb5f 	bl	8008b94 <HAL_OSPI_Command>
 80054d6:	4603      	mov	r3, r0
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d001      	beq.n	80054e0 <OSPI_EnableMemMappedMode+0x68>
	  {
	    Error_Handler();
 80054dc:	f7ff fde2 	bl	80050a4 <Error_Handler>
	  }

	  sCommand.OperationType = HAL_OSPI_OPTYPE_READ_CFG;
 80054e0:	2301      	movs	r3, #1
 80054e2:	60bb      	str	r3, [r7, #8]
	  sCommand.Instruction   = READ_CMD;
 80054e4:	2300      	movs	r3, #0
 80054e6:	613b      	str	r3, [r7, #16]
	  sCommand.DummyCycles   = DUMMY_CLOCK_CYCLES_READ;
 80054e8:	2305      	movs	r3, #5
 80054ea:	64fb      	str	r3, [r7, #76]	; 0x4c

	  if (HAL_OSPI_Command(&hospi1, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80054ec:	f107 0308 	add.w	r3, r7, #8
 80054f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80054f4:	4619      	mov	r1, r3
 80054f6:	480d      	ldr	r0, [pc, #52]	; (800552c <OSPI_EnableMemMappedMode+0xb4>)
 80054f8:	f003 fb4c 	bl	8008b94 <HAL_OSPI_Command>
 80054fc:	4603      	mov	r3, r0
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d001      	beq.n	8005506 <OSPI_EnableMemMappedMode+0x8e>
	  {
	    Error_Handler();
 8005502:	f7ff fdcf 	bl	80050a4 <Error_Handler>
	  }

	  sMemMappedCfg.TimeOutActivation = HAL_OSPI_TIMEOUT_COUNTER_ENABLE;
 8005506:	2308      	movs	r3, #8
 8005508:	603b      	str	r3, [r7, #0]
	  sMemMappedCfg.TimeOutPeriod     = 0x34;
 800550a:	2334      	movs	r3, #52	; 0x34
 800550c:	607b      	str	r3, [r7, #4]

	  if (HAL_OSPI_MemoryMapped(&hospi1, &sMemMappedCfg) != HAL_OK)
 800550e:	463b      	mov	r3, r7
 8005510:	4619      	mov	r1, r3
 8005512:	4806      	ldr	r0, [pc, #24]	; (800552c <OSPI_EnableMemMappedMode+0xb4>)
 8005514:	f003 fbcb 	bl	8008cae <HAL_OSPI_MemoryMapped>
 8005518:	4603      	mov	r3, r0
 800551a:	2b00      	cmp	r3, #0
 800551c:	d001      	beq.n	8005522 <OSPI_EnableMemMappedMode+0xaa>
	  {
	    Error_Handler();
 800551e:	f7ff fdc1 	bl	80050a4 <Error_Handler>
	  }
}
 8005522:	bf00      	nop
 8005524:	3758      	adds	r7, #88	; 0x58
 8005526:	46bd      	mov	sp, r7
 8005528:	bd80      	pop	{r7, pc}
 800552a:	bf00      	nop
 800552c:	200021f8 	.word	0x200021f8

08005530 <OSPI_DelayBlockConfig>:

void OSPI_DelayBlockConfig(void){
 8005530:	b580      	push	{r7, lr}
 8005532:	b084      	sub	sp, #16
 8005534:	af00      	add	r7, sp, #0
	  LL_DLYB_CfgTypeDef dlyb_cfg,dlyb_cfg_test;
	  /* Delay block configuration ------------------------------------------------ */
	  HAL_OSPI_DLYB_GetClockPeriod(&hospi1,&dlyb_cfg);
 8005536:	f107 0308 	add.w	r3, r7, #8
 800553a:	4619      	mov	r1, r3
 800553c:	4813      	ldr	r0, [pc, #76]	; (800558c <OSPI_DelayBlockConfig+0x5c>)
 800553e:	f004 fc61 	bl	8009e04 <HAL_OSPI_DLYB_GetClockPeriod>

	  /*when DTR, PhaseSel is divided by 4 (emperic value)*/
	  dlyb_cfg.PhaseSel /=4;
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	089b      	lsrs	r3, r3, #2
 8005546:	60fb      	str	r3, [r7, #12]

	  /* save the present configuration for check*/
	  dlyb_cfg_test = dlyb_cfg;
 8005548:	463b      	mov	r3, r7
 800554a:	f107 0208 	add.w	r2, r7, #8
 800554e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005552:	e883 0003 	stmia.w	r3, {r0, r1}

	  /*set delay block configuration*/
	  HAL_OSPI_DLYB_SetConfig(&hospi1,&dlyb_cfg);
 8005556:	f107 0308 	add.w	r3, r7, #8
 800555a:	4619      	mov	r1, r3
 800555c:	480b      	ldr	r0, [pc, #44]	; (800558c <OSPI_DelayBlockConfig+0x5c>)
 800555e:	f004 fbdd 	bl	8009d1c <HAL_OSPI_DLYB_SetConfig>

	  /*check the set value*/
	  HAL_OSPI_DLYB_GetConfig(&hospi1,&dlyb_cfg);
 8005562:	f107 0308 	add.w	r3, r7, #8
 8005566:	4619      	mov	r1, r3
 8005568:	4808      	ldr	r0, [pc, #32]	; (800558c <OSPI_DelayBlockConfig+0x5c>)
 800556a:	f004 fc1f 	bl	8009dac <HAL_OSPI_DLYB_GetConfig>
	  if ((dlyb_cfg.PhaseSel != dlyb_cfg_test.PhaseSel) || (dlyb_cfg.Units != dlyb_cfg_test.Units))
 800556e:	68fa      	ldr	r2, [r7, #12]
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	429a      	cmp	r2, r3
 8005574:	d103      	bne.n	800557e <OSPI_DelayBlockConfig+0x4e>
 8005576:	68ba      	ldr	r2, [r7, #8]
 8005578:	683b      	ldr	r3, [r7, #0]
 800557a:	429a      	cmp	r2, r3
 800557c:	d001      	beq.n	8005582 <OSPI_DelayBlockConfig+0x52>
	  {
	    Error_Handler();
 800557e:	f7ff fd91 	bl	80050a4 <Error_Handler>
	  }
}
 8005582:	bf00      	nop
 8005584:	3710      	adds	r7, #16
 8005586:	46bd      	mov	sp, r7
 8005588:	bd80      	pop	{r7, pc}
 800558a:	bf00      	nop
 800558c:	200021f8 	.word	0x200021f8

08005590 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005590:	b480      	push	{r7}
 8005592:	b083      	sub	sp, #12
 8005594:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8005596:	4b0a      	ldr	r3, [pc, #40]	; (80055c0 <HAL_MspInit+0x30>)
 8005598:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800559c:	4a08      	ldr	r2, [pc, #32]	; (80055c0 <HAL_MspInit+0x30>)
 800559e:	f043 0304 	orr.w	r3, r3, #4
 80055a2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 80055a6:	4b06      	ldr	r3, [pc, #24]	; (80055c0 <HAL_MspInit+0x30>)
 80055a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80055ac:	f003 0304 	and.w	r3, r3, #4
 80055b0:	607b      	str	r3, [r7, #4]
 80055b2:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80055b4:	bf00      	nop
 80055b6:	370c      	adds	r7, #12
 80055b8:	46bd      	mov	sp, r7
 80055ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055be:	4770      	bx	lr
 80055c0:	46020c00 	.word	0x46020c00

080055c4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80055c4:	b580      	push	{r7, lr}
 80055c6:	b08e      	sub	sp, #56	; 0x38
 80055c8:	af00      	add	r7, sp, #0
 80055ca:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80055cc:	2300      	movs	r3, #0
 80055ce:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t              uwPrescalerValue = 0;
 80055d0:	2300      	movs	r3, #0
 80055d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80055d4:	4b2e      	ldr	r3, [pc, #184]	; (8005690 <HAL_InitTick+0xcc>)
 80055d6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80055da:	4a2d      	ldr	r2, [pc, #180]	; (8005690 <HAL_InitTick+0xcc>)
 80055dc:	f043 0310 	orr.w	r3, r3, #16
 80055e0:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80055e4:	4b2a      	ldr	r3, [pc, #168]	; (8005690 <HAL_InitTick+0xcc>)
 80055e6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80055ea:	f003 0310 	and.w	r3, r3, #16
 80055ee:	60fb      	str	r3, [r7, #12]
 80055f0:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80055f2:	f107 0210 	add.w	r2, r7, #16
 80055f6:	f107 0314 	add.w	r3, r7, #20
 80055fa:	4611      	mov	r1, r2
 80055fc:	4618      	mov	r0, r3
 80055fe:	f005 ff45 	bl	800b48c <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8005602:	f005 ff2f 	bl	800b464 <HAL_RCC_GetPCLK1Freq>
 8005606:	6338      	str	r0, [r7, #48]	; 0x30
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8005608:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800560a:	4a22      	ldr	r2, [pc, #136]	; (8005694 <HAL_InitTick+0xd0>)
 800560c:	fba2 2303 	umull	r2, r3, r2, r3
 8005610:	0c9b      	lsrs	r3, r3, #18
 8005612:	3b01      	subs	r3, #1
 8005614:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8005616:	4b20      	ldr	r3, [pc, #128]	; (8005698 <HAL_InitTick+0xd4>)
 8005618:	4a20      	ldr	r2, [pc, #128]	; (800569c <HAL_InitTick+0xd8>)
 800561a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800561c:	4b1e      	ldr	r3, [pc, #120]	; (8005698 <HAL_InitTick+0xd4>)
 800561e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8005622:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8005624:	4a1c      	ldr	r2, [pc, #112]	; (8005698 <HAL_InitTick+0xd4>)
 8005626:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005628:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800562a:	4b1b      	ldr	r3, [pc, #108]	; (8005698 <HAL_InitTick+0xd4>)
 800562c:	2200      	movs	r2, #0
 800562e:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005630:	4b19      	ldr	r3, [pc, #100]	; (8005698 <HAL_InitTick+0xd4>)
 8005632:	2200      	movs	r2, #0
 8005634:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
 8005636:	4818      	ldr	r0, [pc, #96]	; (8005698 <HAL_InitTick+0xd4>)
 8005638:	f006 fed6 	bl	800c3e8 <HAL_TIM_Base_Init>
 800563c:	4603      	mov	r3, r0
 800563e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  if (status == HAL_OK)
 8005642:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005646:	2b00      	cmp	r3, #0
 8005648:	d118      	bne.n	800567c <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 800564a:	4813      	ldr	r0, [pc, #76]	; (8005698 <HAL_InitTick+0xd4>)
 800564c:	f006 ff2e 	bl	800c4ac <HAL_TIM_Base_Start_IT>
 8005650:	4603      	mov	r3, r0
 8005652:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if (status == HAL_OK)
 8005656:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800565a:	2b00      	cmp	r3, #0
 800565c:	d10e      	bne.n	800567c <HAL_InitTick+0xb8>
    {
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	2b0f      	cmp	r3, #15
 8005662:	d808      	bhi.n	8005676 <HAL_InitTick+0xb2>
      {
        /* Enable the TIM6 global Interrupt */
        HAL_NVIC_SetPriority(TIM6_IRQn, TickPriority, 0U);
 8005664:	2200      	movs	r2, #0
 8005666:	6879      	ldr	r1, [r7, #4]
 8005668:	2031      	movs	r0, #49	; 0x31
 800566a:	f000 fa1b 	bl	8005aa4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800566e:	4a0c      	ldr	r2, [pc, #48]	; (80056a0 <HAL_InitTick+0xdc>)
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	6013      	str	r3, [r2, #0]
 8005674:	e002      	b.n	800567c <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 8005676:	2301      	movs	r3, #1
 8005678:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
      }
    }
  }
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_IRQn);
 800567c:	2031      	movs	r0, #49	; 0x31
 800567e:	f000 fa2b 	bl	8005ad8 <HAL_NVIC_EnableIRQ>

 /* Return function status */
  return status;
 8005682:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 8005686:	4618      	mov	r0, r3
 8005688:	3738      	adds	r7, #56	; 0x38
 800568a:	46bd      	mov	sp, r7
 800568c:	bd80      	pop	{r7, pc}
 800568e:	bf00      	nop
 8005690:	46020c00 	.word	0x46020c00
 8005694:	431bde83 	.word	0x431bde83
 8005698:	20002254 	.word	0x20002254
 800569c:	40001000 	.word	0x40001000
 80056a0:	20000008 	.word	0x20000008

080056a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80056a4:	b480      	push	{r7}
 80056a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80056a8:	e7fe      	b.n	80056a8 <NMI_Handler+0x4>

080056aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80056aa:	b480      	push	{r7}
 80056ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80056ae:	e7fe      	b.n	80056ae <HardFault_Handler+0x4>

080056b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80056b0:	b480      	push	{r7}
 80056b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80056b4:	e7fe      	b.n	80056b4 <MemManage_Handler+0x4>

080056b6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80056b6:	b480      	push	{r7}
 80056b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80056ba:	e7fe      	b.n	80056ba <BusFault_Handler+0x4>

080056bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80056bc:	b480      	push	{r7}
 80056be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80056c0:	e7fe      	b.n	80056c0 <UsageFault_Handler+0x4>

080056c2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80056c2:	b480      	push	{r7}
 80056c4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80056c6:	bf00      	nop
 80056c8:	46bd      	mov	sp, r7
 80056ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ce:	4770      	bx	lr

080056d0 <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 80056d0:	b580      	push	{r7, lr}
 80056d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80056d4:	4802      	ldr	r0, [pc, #8]	; (80056e0 <TIM6_IRQHandler+0x10>)
 80056d6:	f006 ff89 	bl	800c5ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 80056da:	bf00      	nop
 80056dc:	bd80      	pop	{r7, pc}
 80056de:	bf00      	nop
 80056e0:	20002254 	.word	0x20002254

080056e4 <GPDMA1_Channel12_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 12 global interrupt.
  */
void GPDMA1_Channel12_IRQHandler(void)
{
 80056e4:	b580      	push	{r7, lr}
 80056e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel12_IRQn 0 */
  static uint8_t XferCpltCounts = 0;
  /* USER CODE END GPDMA1_Channel12_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel12);
 80056e8:	4808      	ldr	r0, [pc, #32]	; (800570c <GPDMA1_Channel12_IRQHandler+0x28>)
 80056ea:	f000 ff2d 	bl	8006548 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel12_IRQn 1 */
  XferCpltCounts++;
 80056ee:	4b08      	ldr	r3, [pc, #32]	; (8005710 <GPDMA1_Channel12_IRQHandler+0x2c>)
 80056f0:	781b      	ldrb	r3, [r3, #0]
 80056f2:	3301      	adds	r3, #1
 80056f4:	b2da      	uxtb	r2, r3
 80056f6:	4b06      	ldr	r3, [pc, #24]	; (8005710 <GPDMA1_Channel12_IRQHandler+0x2c>)
 80056f8:	701a      	strb	r2, [r3, #0]
  if(XferCpltCounts == 15)
 80056fa:	4b05      	ldr	r3, [pc, #20]	; (8005710 <GPDMA1_Channel12_IRQHandler+0x2c>)
 80056fc:	781b      	ldrb	r3, [r3, #0]
 80056fe:	2b0f      	cmp	r3, #15
 8005700:	d102      	bne.n	8005708 <GPDMA1_Channel12_IRQHandler+0x24>
  {
	  XferCpltCounts = 0;
 8005702:	4b03      	ldr	r3, [pc, #12]	; (8005710 <GPDMA1_Channel12_IRQHandler+0x2c>)
 8005704:	2200      	movs	r2, #0
 8005706:	701a      	strb	r2, [r3, #0]
  }
  /* USER CODE END GPDMA1_Channel12_IRQn 1 */
}
 8005708:	bf00      	nop
 800570a:	bd80      	pop	{r7, pc}
 800570c:	20001408 	.word	0x20001408
 8005710:	200022a0 	.word	0x200022a0

08005714 <DCMI_PSSI_IRQHandler>:

/**
  * @brief This function handles DCMI/PSSI global interrupt.
  */
void DCMI_PSSI_IRQHandler(void)
{
 8005714:	b580      	push	{r7, lr}
 8005716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DCMI_PSSI_IRQn 0 */

  /* USER CODE END DCMI_PSSI_IRQn 0 */
  HAL_DCMI_IRQHandler(&hdcmi);
 8005718:	4802      	ldr	r0, [pc, #8]	; (8005724 <DCMI_PSSI_IRQHandler+0x10>)
 800571a:	f000 fcbd 	bl	8006098 <HAL_DCMI_IRQHandler>
  /* USER CODE BEGIN DCMI_PSSI_IRQn 1 */

  /* USER CODE END DCMI_PSSI_IRQn 1 */
}
 800571e:	bf00      	nop
 8005720:	bd80      	pop	{r7, pc}
 8005722:	bf00      	nop
 8005724:	200013b8 	.word	0x200013b8

08005728 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8005728:	b480      	push	{r7}
 800572a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800572c:	4b18      	ldr	r3, [pc, #96]	; (8005790 <SystemInit+0x68>)
 800572e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005732:	4a17      	ldr	r2, [pc, #92]	; (8005790 <SystemInit+0x68>)
 8005734:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005738:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 800573c:	4b15      	ldr	r3, [pc, #84]	; (8005794 <SystemInit+0x6c>)
 800573e:	2201      	movs	r2, #1
 8005740:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8005742:	4b14      	ldr	r3, [pc, #80]	; (8005794 <SystemInit+0x6c>)
 8005744:	2200      	movs	r2, #0
 8005746:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8005748:	4b12      	ldr	r3, [pc, #72]	; (8005794 <SystemInit+0x6c>)
 800574a:	2200      	movs	r2, #0
 800574c:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 800574e:	4b11      	ldr	r3, [pc, #68]	; (8005794 <SystemInit+0x6c>)
 8005750:	2200      	movs	r2, #0
 8005752:	625a      	str	r2, [r3, #36]	; 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 8005754:	4b0f      	ldr	r3, [pc, #60]	; (8005794 <SystemInit+0x6c>)
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	4a0e      	ldr	r2, [pc, #56]	; (8005794 <SystemInit+0x6c>)
 800575a:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 800575e:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8005762:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 8005764:	4b0b      	ldr	r3, [pc, #44]	; (8005794 <SystemInit+0x6c>)
 8005766:	2200      	movs	r2, #0
 8005768:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 800576a:	4b0a      	ldr	r3, [pc, #40]	; (8005794 <SystemInit+0x6c>)
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	4a09      	ldr	r2, [pc, #36]	; (8005794 <SystemInit+0x6c>)
 8005770:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005774:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8005776:	4b07      	ldr	r3, [pc, #28]	; (8005794 <SystemInit+0x6c>)
 8005778:	2200      	movs	r2, #0
 800577a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800577c:	4b04      	ldr	r3, [pc, #16]	; (8005790 <SystemInit+0x68>)
 800577e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005782:	609a      	str	r2, [r3, #8]
  #endif
}
 8005784:	bf00      	nop
 8005786:	46bd      	mov	sp, r7
 8005788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800578c:	4770      	bx	lr
 800578e:	bf00      	nop
 8005790:	e000ed00 	.word	0xe000ed00
 8005794:	46020c00 	.word	0x46020c00

08005798 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8005798:	f8df d034 	ldr.w	sp, [pc, #52]	; 80057d0 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 800579c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800579e:	e003      	b.n	80057a8 <LoopCopyDataInit>

080057a0 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80057a0:	4b0c      	ldr	r3, [pc, #48]	; (80057d4 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80057a2:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80057a4:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80057a6:	3104      	adds	r1, #4

080057a8 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80057a8:	480b      	ldr	r0, [pc, #44]	; (80057d8 <LoopForever+0xa>)
	ldr	r3, =_edata
 80057aa:	4b0c      	ldr	r3, [pc, #48]	; (80057dc <LoopForever+0xe>)
	adds	r2, r0, r1
 80057ac:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80057ae:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80057b0:	d3f6      	bcc.n	80057a0 <CopyDataInit>
	ldr	r2, =_sbss
 80057b2:	4a0b      	ldr	r2, [pc, #44]	; (80057e0 <LoopForever+0x12>)
	b	LoopFillZerobss
 80057b4:	e002      	b.n	80057bc <LoopFillZerobss>

080057b6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80057b6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80057b8:	f842 3b04 	str.w	r3, [r2], #4

080057bc <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80057bc:	4b09      	ldr	r3, [pc, #36]	; (80057e4 <LoopForever+0x16>)
	cmp	r2, r3
 80057be:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80057c0:	d3f9      	bcc.n	80057b6 <FillZerobss>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80057c2:	f7ff ffb1 	bl	8005728 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80057c6:	f009 f875 	bl	800e8b4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80057ca:	f7ff fb03 	bl	8004dd4 <main>

080057ce <LoopForever>:

LoopForever:
    b LoopForever
 80057ce:	e7fe      	b.n	80057ce <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 80057d0:	200c0000 	.word	0x200c0000
	ldr	r3, =_sidata
 80057d4:	0800ef58 	.word	0x0800ef58
	ldr	r0, =_sdata
 80057d8:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80057dc:	20000014 	.word	0x20000014
	ldr	r2, =_sbss
 80057e0:	20000014 	.word	0x20000014
	ldr	r3, = _ebss
 80057e4:	200028e8 	.word	0x200028e8

080057e8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80057e8:	e7fe      	b.n	80057e8 <ADC1_IRQHandler>
	...

080057ec <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80057ec:	b580      	push	{r7, lr}
 80057ee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80057f0:	4b11      	ldr	r3, [pc, #68]	; (8005838 <HAL_Init+0x4c>)
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	4a10      	ldr	r2, [pc, #64]	; (8005838 <HAL_Init+0x4c>)
 80057f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80057fa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80057fc:	2003      	movs	r0, #3
 80057fe:	f000 f946 	bl	8005a8e <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8005802:	f005 fd0d 	bl	800b220 <HAL_RCC_GetSysClockFreq>
 8005806:	4602      	mov	r2, r0
 8005808:	4b0c      	ldr	r3, [pc, #48]	; (800583c <HAL_Init+0x50>)
 800580a:	6a1b      	ldr	r3, [r3, #32]
 800580c:	f003 030f 	and.w	r3, r3, #15
 8005810:	490b      	ldr	r1, [pc, #44]	; (8005840 <HAL_Init+0x54>)
 8005812:	5ccb      	ldrb	r3, [r1, r3]
 8005814:	fa22 f303 	lsr.w	r3, r2, r3
 8005818:	4a0a      	ldr	r2, [pc, #40]	; (8005844 <HAL_Init+0x58>)
 800581a:	6013      	str	r3, [r2, #0]

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800581c:	200f      	movs	r0, #15
 800581e:	f7ff fed1 	bl	80055c4 <HAL_InitTick>
 8005822:	4603      	mov	r3, r0
 8005824:	2b00      	cmp	r3, #0
 8005826:	d001      	beq.n	800582c <HAL_Init+0x40>
  {
    return HAL_ERROR;
 8005828:	2301      	movs	r3, #1
 800582a:	e002      	b.n	8005832 <HAL_Init+0x46>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800582c:	f7ff feb0 	bl	8005590 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005830:	2300      	movs	r3, #0
}
 8005832:	4618      	mov	r0, r3
 8005834:	bd80      	pop	{r7, pc}
 8005836:	bf00      	nop
 8005838:	40022000 	.word	0x40022000
 800583c:	46020c00 	.word	0x46020c00
 8005840:	0800ee78 	.word	0x0800ee78
 8005844:	20000004 	.word	0x20000004

08005848 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005848:	b480      	push	{r7}
 800584a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800584c:	4b06      	ldr	r3, [pc, #24]	; (8005868 <HAL_IncTick+0x20>)
 800584e:	781b      	ldrb	r3, [r3, #0]
 8005850:	461a      	mov	r2, r3
 8005852:	4b06      	ldr	r3, [pc, #24]	; (800586c <HAL_IncTick+0x24>)
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	4413      	add	r3, r2
 8005858:	4a04      	ldr	r2, [pc, #16]	; (800586c <HAL_IncTick+0x24>)
 800585a:	6013      	str	r3, [r2, #0]
}
 800585c:	bf00      	nop
 800585e:	46bd      	mov	sp, r7
 8005860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005864:	4770      	bx	lr
 8005866:	bf00      	nop
 8005868:	2000000c 	.word	0x2000000c
 800586c:	200022a4 	.word	0x200022a4

08005870 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005870:	b480      	push	{r7}
 8005872:	af00      	add	r7, sp, #0
  return uwTick;
 8005874:	4b03      	ldr	r3, [pc, #12]	; (8005884 <HAL_GetTick+0x14>)
 8005876:	681b      	ldr	r3, [r3, #0]
}
 8005878:	4618      	mov	r0, r3
 800587a:	46bd      	mov	sp, r7
 800587c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005880:	4770      	bx	lr
 8005882:	bf00      	nop
 8005884:	200022a4 	.word	0x200022a4

08005888 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005888:	b580      	push	{r7, lr}
 800588a:	b084      	sub	sp, #16
 800588c:	af00      	add	r7, sp, #0
 800588e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005890:	f7ff ffee 	bl	8005870 <HAL_GetTick>
 8005894:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058a0:	d005      	beq.n	80058ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80058a2:	4b0a      	ldr	r3, [pc, #40]	; (80058cc <HAL_Delay+0x44>)
 80058a4:	781b      	ldrb	r3, [r3, #0]
 80058a6:	461a      	mov	r2, r3
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	4413      	add	r3, r2
 80058ac:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80058ae:	bf00      	nop
 80058b0:	f7ff ffde 	bl	8005870 <HAL_GetTick>
 80058b4:	4602      	mov	r2, r0
 80058b6:	68bb      	ldr	r3, [r7, #8]
 80058b8:	1ad3      	subs	r3, r2, r3
 80058ba:	68fa      	ldr	r2, [r7, #12]
 80058bc:	429a      	cmp	r2, r3
 80058be:	d8f7      	bhi.n	80058b0 <HAL_Delay+0x28>
  {
  }
}
 80058c0:	bf00      	nop
 80058c2:	bf00      	nop
 80058c4:	3710      	adds	r7, #16
 80058c6:	46bd      	mov	sp, r7
 80058c8:	bd80      	pop	{r7, pc}
 80058ca:	bf00      	nop
 80058cc:	2000000c 	.word	0x2000000c

080058d0 <HAL_CORDIC_Init>:
  * @brief  Initialize the CORDIC peripheral and the associated handle.
  * @param  hcordic pointer to a CORDIC_HandleTypeDef structure.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CORDIC_Init(CORDIC_HandleTypeDef *hcordic)
{
 80058d0:	b580      	push	{r7, lr}
 80058d2:	b082      	sub	sp, #8
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	6078      	str	r0, [r7, #4]
  /* Check the CORDIC handle allocation */
  if (hcordic == NULL)
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d101      	bne.n	80058e2 <HAL_CORDIC_Init+0x12>
  {
    /* Return error status */
    return HAL_ERROR;
 80058de:	2301      	movs	r3, #1
 80058e0:	e023      	b.n	800592a <HAL_CORDIC_Init+0x5a>

    /* Initialize the low level hardware */
    hcordic->MspInitCallback(hcordic);
  }
#else
  if (hcordic->State == HAL_CORDIC_STATE_RESET)
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80058e8:	b2db      	uxtb	r3, r3
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d106      	bne.n	80058fc <HAL_CORDIC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hcordic->Lock = HAL_UNLOCKED;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	2200      	movs	r2, #0
 80058f2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize the low level hardware */
    HAL_CORDIC_MspInit(hcordic);
 80058f6:	6878      	ldr	r0, [r7, #4]
 80058f8:	f7fe faf0 	bl	8003edc <HAL_CORDIC_MspInit>
  }
#endif /* (USE_HAL_CORDIC_REGISTER_CALLBACKS) */

  /* Set CORDIC error code to none */
  hcordic->ErrorCode = HAL_CORDIC_ERROR_NONE;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	2200      	movs	r2, #0
 8005900:	625a      	str	r2, [r3, #36]	; 0x24

  /* Reset pInBuff and pOutBuff */
  hcordic->pInBuff = NULL;
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	2200      	movs	r2, #0
 8005906:	605a      	str	r2, [r3, #4]
  hcordic->pOutBuff = NULL;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	2200      	movs	r2, #0
 800590c:	609a      	str	r2, [r3, #8]

  /* Reset NbCalcToOrder and NbCalcToGet */
  hcordic->NbCalcToOrder = 0U;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	2200      	movs	r2, #0
 8005912:	60da      	str	r2, [r3, #12]
  hcordic->NbCalcToGet = 0U;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	2200      	movs	r2, #0
 8005918:	611a      	str	r2, [r3, #16]

  /* Reset DMADirection */
  hcordic->DMADirection = CORDIC_DMA_DIR_NONE;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	2200      	movs	r2, #0
 800591e:	615a      	str	r2, [r3, #20]

  /* Change CORDIC peripheral state */
  hcordic->State = HAL_CORDIC_STATE_READY;
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	2201      	movs	r2, #1
 8005924:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Return function status */
  return HAL_OK;
 8005928:	2300      	movs	r3, #0
}
 800592a:	4618      	mov	r0, r3
 800592c:	3708      	adds	r7, #8
 800592e:	46bd      	mov	sp, r7
 8005930:	bd80      	pop	{r7, pc}
	...

08005934 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005934:	b480      	push	{r7}
 8005936:	b085      	sub	sp, #20
 8005938:	af00      	add	r7, sp, #0
 800593a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	f003 0307 	and.w	r3, r3, #7
 8005942:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005944:	4b0c      	ldr	r3, [pc, #48]	; (8005978 <__NVIC_SetPriorityGrouping+0x44>)
 8005946:	68db      	ldr	r3, [r3, #12]
 8005948:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800594a:	68ba      	ldr	r2, [r7, #8]
 800594c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005950:	4013      	ands	r3, r2
 8005952:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005958:	68bb      	ldr	r3, [r7, #8]
 800595a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800595c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005960:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005964:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005966:	4a04      	ldr	r2, [pc, #16]	; (8005978 <__NVIC_SetPriorityGrouping+0x44>)
 8005968:	68bb      	ldr	r3, [r7, #8]
 800596a:	60d3      	str	r3, [r2, #12]
}
 800596c:	bf00      	nop
 800596e:	3714      	adds	r7, #20
 8005970:	46bd      	mov	sp, r7
 8005972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005976:	4770      	bx	lr
 8005978:	e000ed00 	.word	0xe000ed00

0800597c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800597c:	b480      	push	{r7}
 800597e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005980:	4b04      	ldr	r3, [pc, #16]	; (8005994 <__NVIC_GetPriorityGrouping+0x18>)
 8005982:	68db      	ldr	r3, [r3, #12]
 8005984:	0a1b      	lsrs	r3, r3, #8
 8005986:	f003 0307 	and.w	r3, r3, #7
}
 800598a:	4618      	mov	r0, r3
 800598c:	46bd      	mov	sp, r7
 800598e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005992:	4770      	bx	lr
 8005994:	e000ed00 	.word	0xe000ed00

08005998 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005998:	b480      	push	{r7}
 800599a:	b083      	sub	sp, #12
 800599c:	af00      	add	r7, sp, #0
 800599e:	4603      	mov	r3, r0
 80059a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80059a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	db0b      	blt.n	80059c2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80059aa:	79fb      	ldrb	r3, [r7, #7]
 80059ac:	f003 021f 	and.w	r2, r3, #31
 80059b0:	4907      	ldr	r1, [pc, #28]	; (80059d0 <__NVIC_EnableIRQ+0x38>)
 80059b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80059b6:	095b      	lsrs	r3, r3, #5
 80059b8:	2001      	movs	r0, #1
 80059ba:	fa00 f202 	lsl.w	r2, r0, r2
 80059be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80059c2:	bf00      	nop
 80059c4:	370c      	adds	r7, #12
 80059c6:	46bd      	mov	sp, r7
 80059c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059cc:	4770      	bx	lr
 80059ce:	bf00      	nop
 80059d0:	e000e100 	.word	0xe000e100

080059d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80059d4:	b480      	push	{r7}
 80059d6:	b083      	sub	sp, #12
 80059d8:	af00      	add	r7, sp, #0
 80059da:	4603      	mov	r3, r0
 80059dc:	6039      	str	r1, [r7, #0]
 80059de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80059e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	db0a      	blt.n	80059fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80059e8:	683b      	ldr	r3, [r7, #0]
 80059ea:	b2da      	uxtb	r2, r3
 80059ec:	490c      	ldr	r1, [pc, #48]	; (8005a20 <__NVIC_SetPriority+0x4c>)
 80059ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80059f2:	0112      	lsls	r2, r2, #4
 80059f4:	b2d2      	uxtb	r2, r2
 80059f6:	440b      	add	r3, r1
 80059f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80059fc:	e00a      	b.n	8005a14 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80059fe:	683b      	ldr	r3, [r7, #0]
 8005a00:	b2da      	uxtb	r2, r3
 8005a02:	4908      	ldr	r1, [pc, #32]	; (8005a24 <__NVIC_SetPriority+0x50>)
 8005a04:	79fb      	ldrb	r3, [r7, #7]
 8005a06:	f003 030f 	and.w	r3, r3, #15
 8005a0a:	3b04      	subs	r3, #4
 8005a0c:	0112      	lsls	r2, r2, #4
 8005a0e:	b2d2      	uxtb	r2, r2
 8005a10:	440b      	add	r3, r1
 8005a12:	761a      	strb	r2, [r3, #24]
}
 8005a14:	bf00      	nop
 8005a16:	370c      	adds	r7, #12
 8005a18:	46bd      	mov	sp, r7
 8005a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a1e:	4770      	bx	lr
 8005a20:	e000e100 	.word	0xe000e100
 8005a24:	e000ed00 	.word	0xe000ed00

08005a28 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005a28:	b480      	push	{r7}
 8005a2a:	b089      	sub	sp, #36	; 0x24
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	60f8      	str	r0, [r7, #12]
 8005a30:	60b9      	str	r1, [r7, #8]
 8005a32:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	f003 0307 	and.w	r3, r3, #7
 8005a3a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005a3c:	69fb      	ldr	r3, [r7, #28]
 8005a3e:	f1c3 0307 	rsb	r3, r3, #7
 8005a42:	2b04      	cmp	r3, #4
 8005a44:	bf28      	it	cs
 8005a46:	2304      	movcs	r3, #4
 8005a48:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005a4a:	69fb      	ldr	r3, [r7, #28]
 8005a4c:	3304      	adds	r3, #4
 8005a4e:	2b06      	cmp	r3, #6
 8005a50:	d902      	bls.n	8005a58 <NVIC_EncodePriority+0x30>
 8005a52:	69fb      	ldr	r3, [r7, #28]
 8005a54:	3b03      	subs	r3, #3
 8005a56:	e000      	b.n	8005a5a <NVIC_EncodePriority+0x32>
 8005a58:	2300      	movs	r3, #0
 8005a5a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005a5c:	f04f 32ff 	mov.w	r2, #4294967295
 8005a60:	69bb      	ldr	r3, [r7, #24]
 8005a62:	fa02 f303 	lsl.w	r3, r2, r3
 8005a66:	43da      	mvns	r2, r3
 8005a68:	68bb      	ldr	r3, [r7, #8]
 8005a6a:	401a      	ands	r2, r3
 8005a6c:	697b      	ldr	r3, [r7, #20]
 8005a6e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005a70:	f04f 31ff 	mov.w	r1, #4294967295
 8005a74:	697b      	ldr	r3, [r7, #20]
 8005a76:	fa01 f303 	lsl.w	r3, r1, r3
 8005a7a:	43d9      	mvns	r1, r3
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005a80:	4313      	orrs	r3, r2
         );
}
 8005a82:	4618      	mov	r0, r3
 8005a84:	3724      	adds	r7, #36	; 0x24
 8005a86:	46bd      	mov	sp, r7
 8005a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8c:	4770      	bx	lr

08005a8e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005a8e:	b580      	push	{r7, lr}
 8005a90:	b082      	sub	sp, #8
 8005a92:	af00      	add	r7, sp, #0
 8005a94:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005a96:	6878      	ldr	r0, [r7, #4]
 8005a98:	f7ff ff4c 	bl	8005934 <__NVIC_SetPriorityGrouping>
}
 8005a9c:	bf00      	nop
 8005a9e:	3708      	adds	r7, #8
 8005aa0:	46bd      	mov	sp, r7
 8005aa2:	bd80      	pop	{r7, pc}

08005aa4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005aa4:	b580      	push	{r7, lr}
 8005aa6:	b086      	sub	sp, #24
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	4603      	mov	r3, r0
 8005aac:	60b9      	str	r1, [r7, #8]
 8005aae:	607a      	str	r2, [r7, #4]
 8005ab0:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005ab2:	f7ff ff63 	bl	800597c <__NVIC_GetPriorityGrouping>
 8005ab6:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005ab8:	687a      	ldr	r2, [r7, #4]
 8005aba:	68b9      	ldr	r1, [r7, #8]
 8005abc:	6978      	ldr	r0, [r7, #20]
 8005abe:	f7ff ffb3 	bl	8005a28 <NVIC_EncodePriority>
 8005ac2:	4602      	mov	r2, r0
 8005ac4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005ac8:	4611      	mov	r1, r2
 8005aca:	4618      	mov	r0, r3
 8005acc:	f7ff ff82 	bl	80059d4 <__NVIC_SetPriority>
}
 8005ad0:	bf00      	nop
 8005ad2:	3718      	adds	r7, #24
 8005ad4:	46bd      	mov	sp, r7
 8005ad6:	bd80      	pop	{r7, pc}

08005ad8 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005ad8:	b580      	push	{r7, lr}
 8005ada:	b082      	sub	sp, #8
 8005adc:	af00      	add	r7, sp, #0
 8005ade:	4603      	mov	r3, r0
 8005ae0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005ae2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005ae6:	4618      	mov	r0, r3
 8005ae8:	f7ff ff56 	bl	8005998 <__NVIC_EnableIRQ>
}
 8005aec:	bf00      	nop
 8005aee:	3708      	adds	r7, #8
 8005af0:	46bd      	mov	sp, r7
 8005af2:	bd80      	pop	{r7, pc}

08005af4 <HAL_DCACHE_Init>:
  * @param  hdcache Pointer to a DCACHE_HandleTypeDef structure that contains
  *                 the configuration information for the specified DCACHE.
  * @retval HAL status
  */
HAL_StatusTypeDef  HAL_DCACHE_Init(DCACHE_HandleTypeDef *hdcache)
{
 8005af4:	b580      	push	{r7, lr}
 8005af6:	b084      	sub	sp, #16
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the DCACHE handle allocation */
  if (hdcache == NULL)
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d101      	bne.n	8005b06 <HAL_DCACHE_Init+0x12>
  {
    return HAL_ERROR;
 8005b02:	2301      	movs	r3, #1
 8005b04:	e037      	b.n	8005b76 <HAL_DCACHE_Init+0x82>

  /* Check the parameters */
  assert_param(IS_DCACHE_ALL_INSTANCE(hdcache->Instance));
  assert_param(IS_DCACHE_READ_BURST_TYPE(hdcache->Init.ReadBurstType));

  if (hdcache->State == HAL_DCACHE_STATE_RESET)
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005b0c:	b2db      	uxtb	r3, r3
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d119      	bne.n	8005b46 <HAL_DCACHE_Init+0x52>
  {
    /* Init the DCACHE Callback settings with legacy weak */
    hdcache->ErrorCallback                      = HAL_DCACHE_ErrorCallback;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	4a1a      	ldr	r2, [pc, #104]	; (8005b80 <HAL_DCACHE_Init+0x8c>)
 8005b16:	609a      	str	r2, [r3, #8]
    hdcache->CleanByAddrCallback                = HAL_DCACHE_CleanByAddrCallback;
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	4a1a      	ldr	r2, [pc, #104]	; (8005b84 <HAL_DCACHE_Init+0x90>)
 8005b1c:	60da      	str	r2, [r3, #12]
    hdcache->InvalidateByAddrCallback           = HAL_DCACHE_InvalidateByAddrCallback;
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	4a19      	ldr	r2, [pc, #100]	; (8005b88 <HAL_DCACHE_Init+0x94>)
 8005b22:	611a      	str	r2, [r3, #16]
    hdcache->InvalidateCompleteCallback         = HAL_DCACHE_InvalidateCompleteCallback;
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	4a19      	ldr	r2, [pc, #100]	; (8005b8c <HAL_DCACHE_Init+0x98>)
 8005b28:	615a      	str	r2, [r3, #20]
    hdcache->CleanAndInvalidateByAddrCallback   = HAL_DCACHE_CleanAndInvalidateByAddrCallback;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	4a18      	ldr	r2, [pc, #96]	; (8005b90 <HAL_DCACHE_Init+0x9c>)
 8005b2e:	619a      	str	r2, [r3, #24]

    if (hdcache->MspInitCallback == NULL)
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	69db      	ldr	r3, [r3, #28]
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d102      	bne.n	8005b3e <HAL_DCACHE_Init+0x4a>
    {
      hdcache->MspInitCallback = HAL_DCACHE_MspInit;
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	4a16      	ldr	r2, [pc, #88]	; (8005b94 <HAL_DCACHE_Init+0xa0>)
 8005b3c:	61da      	str	r2, [r3, #28]
    }

    /* Init the low level hardware */
    hdcache->MspInitCallback(hdcache);
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	69db      	ldr	r3, [r3, #28]
 8005b42:	6878      	ldr	r0, [r7, #4]
 8005b44:	4798      	blx	r3
  }

  /* Init the error code */
  hdcache->ErrorCode = HAL_DCACHE_ERROR_NONE;
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	2200      	movs	r2, #0
 8005b4a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Init the DCACHE handle state */
  hdcache->State = HAL_DCACHE_STATE_READY;
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	2201      	movs	r2, #1
 8005b50:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  /* Set requested read burst type */
  MODIFY_REG(hdcache->Instance->CR, DCACHE_CR_HBURST, hdcache->Init.ReadBurstType);
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	685a      	ldr	r2, [r3, #4]
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	430a      	orrs	r2, r1
 8005b68:	601a      	str	r2, [r3, #0]

  /* Enable the selected DCACHE peripheral */
  status = HAL_DCACHE_Enable(hdcache);
 8005b6a:	6878      	ldr	r0, [r7, #4]
 8005b6c:	f000 f81e 	bl	8005bac <HAL_DCACHE_Enable>
 8005b70:	4603      	mov	r3, r0
 8005b72:	73fb      	strb	r3, [r7, #15]

  return status;
 8005b74:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b76:	4618      	mov	r0, r3
 8005b78:	3710      	adds	r7, #16
 8005b7a:	46bd      	mov	sp, r7
 8005b7c:	bd80      	pop	{r7, pc}
 8005b7e:	bf00      	nop
 8005b80:	08005c4b 	.word	0x08005c4b
 8005b84:	08005bfb 	.word	0x08005bfb
 8005b88:	08005c0f 	.word	0x08005c0f
 8005b8c:	08005c37 	.word	0x08005c37
 8005b90:	08005c23 	.word	0x08005c23
 8005b94:	08005b99 	.word	0x08005b99

08005b98 <HAL_DCACHE_MspInit>:
  * @param  hdcache Pointer to a DCACHE_HandleTypeDef structure that contains
  *                 the configuration information for the specified DCACHEx peripheral.
  * @retval None
  */
__weak void HAL_DCACHE_MspInit(DCACHE_HandleTypeDef *hdcache)
{
 8005b98:	b480      	push	{r7}
 8005b9a:	b083      	sub	sp, #12
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	6078      	str	r0, [r7, #4]
  UNUSED(hdcache);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DCACHE_MspInit can be implemented in the user file
   */
}
 8005ba0:	bf00      	nop
 8005ba2:	370c      	adds	r7, #12
 8005ba4:	46bd      	mov	sp, r7
 8005ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005baa:	4770      	bx	lr

08005bac <HAL_DCACHE_Enable>:
  * @param  hdcache Pointer to a DCACHE_HandleTypeDef structure that contains
  *                 the configuration information for the specified DCACHEx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCACHE_Enable(DCACHE_HandleTypeDef *hdcache)
{
 8005bac:	b480      	push	{r7}
 8005bae:	b085      	sub	sp, #20
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005bb4:	2300      	movs	r3, #0
 8005bb6:	73fb      	strb	r3, [r7, #15]

  /* Check the dcache handle allocation */
  if (hdcache == NULL)
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d101      	bne.n	8005bc2 <HAL_DCACHE_Enable+0x16>
  {
    return HAL_ERROR;
 8005bbe:	2301      	movs	r3, #1
 8005bc0:	e015      	b.n	8005bee <HAL_DCACHE_Enable+0x42>

  /* Check the parameters */
  assert_param(IS_DCACHE_ALL_INSTANCE(hdcache->Instance));

  /* Check no ongoing operation */
  if (READ_BIT(hdcache->Instance->SR, (DCACHE_SR_BUSYF | DCACHE_SR_BUSYCMDF)) != 0U)
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	685b      	ldr	r3, [r3, #4]
 8005bc8:	f003 0309 	and.w	r3, r3, #9
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d002      	beq.n	8005bd6 <HAL_DCACHE_Enable+0x2a>
  {
    /* Return busy status */
    status =  HAL_BUSY;
 8005bd0:	2302      	movs	r3, #2
 8005bd2:	73fb      	strb	r3, [r7, #15]
 8005bd4:	e00a      	b.n	8005bec <HAL_DCACHE_Enable+0x40>
  }
  else
  {
    /* Update the error code */
    hdcache->ErrorCode = HAL_DCACHE_ERROR_NONE;
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	2200      	movs	r2, #0
 8005bda:	629a      	str	r2, [r3, #40]	; 0x28

    /* Enable the selected DCACHE peripheral */
    SET_BIT(hdcache->Instance->CR, DCACHE_CR_EN);
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	681a      	ldr	r2, [r3, #0]
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	f042 0201 	orr.w	r2, r2, #1
 8005bea:	601a      	str	r2, [r3, #0]
  }

  return status;
 8005bec:	7bfb      	ldrb	r3, [r7, #15]
}
 8005bee:	4618      	mov	r0, r3
 8005bf0:	3714      	adds	r7, #20
 8005bf2:	46bd      	mov	sp, r7
 8005bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf8:	4770      	bx	lr

08005bfa <HAL_DCACHE_CleanByAddrCallback>:
  * @param  hdcache Pointer to a DCACHE_HandleTypeDef structure that contains
  *                 the configuration information for the specified DCACHEx peripheral.
  * @retval None
  */
__weak void HAL_DCACHE_CleanByAddrCallback(DCACHE_HandleTypeDef *hdcache)
{
 8005bfa:	b480      	push	{r7}
 8005bfc:	b083      	sub	sp, #12
 8005bfe:	af00      	add	r7, sp, #0
 8005c00:	6078      	str	r0, [r7, #4]
  UNUSED(hdcache);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DCACHE_CleanByAddrCallback() should be implemented in the user file
   */
}
 8005c02:	bf00      	nop
 8005c04:	370c      	adds	r7, #12
 8005c06:	46bd      	mov	sp, r7
 8005c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c0c:	4770      	bx	lr

08005c0e <HAL_DCACHE_InvalidateByAddrCallback>:
  * @param  hdcache Pointer to a DCACHE_HandleTypeDef structure that contains
  *                 the configuration information for the specified DCACHEx peripheral.
  * @retval None
  */
__weak void HAL_DCACHE_InvalidateByAddrCallback(DCACHE_HandleTypeDef *hdcache)
{
 8005c0e:	b480      	push	{r7}
 8005c10:	b083      	sub	sp, #12
 8005c12:	af00      	add	r7, sp, #0
 8005c14:	6078      	str	r0, [r7, #4]
  UNUSED(hdcache);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DCACHE_InvalidateByAddrCallback() should be implemented in the user file
   */
}
 8005c16:	bf00      	nop
 8005c18:	370c      	adds	r7, #12
 8005c1a:	46bd      	mov	sp, r7
 8005c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c20:	4770      	bx	lr

08005c22 <HAL_DCACHE_CleanAndInvalidateByAddrCallback>:
  * @param  hdcache Pointer to a DCACHE_HandleTypeDef structure that contains
  *                 the configuration information for the specified DCACHEx peripheral.
  * @retval None
  */
__weak void HAL_DCACHE_CleanAndInvalidateByAddrCallback(DCACHE_HandleTypeDef *hdcache)
{
 8005c22:	b480      	push	{r7}
 8005c24:	b083      	sub	sp, #12
 8005c26:	af00      	add	r7, sp, #0
 8005c28:	6078      	str	r0, [r7, #4]
  UNUSED(hdcache);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DCACHE_CleanAndInvalidateByAddrCallback() should be implemented in the user file
   */
}
 8005c2a:	bf00      	nop
 8005c2c:	370c      	adds	r7, #12
 8005c2e:	46bd      	mov	sp, r7
 8005c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c34:	4770      	bx	lr

08005c36 <HAL_DCACHE_InvalidateCompleteCallback>:
  * @param  hdcache Pointer to a DCACHE_HandleTypeDef structure that contains
  *                 the configuration information for the specified DCACHEx peripheral.
  * @retval None
  */
__weak void HAL_DCACHE_InvalidateCompleteCallback(DCACHE_HandleTypeDef *hdcache)
{
 8005c36:	b480      	push	{r7}
 8005c38:	b083      	sub	sp, #12
 8005c3a:	af00      	add	r7, sp, #0
 8005c3c:	6078      	str	r0, [r7, #4]
  UNUSED(hdcache);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DCACHE_InvalidateCompleteCallback() should be implemented in the user file
   */
}
 8005c3e:	bf00      	nop
 8005c40:	370c      	adds	r7, #12
 8005c42:	46bd      	mov	sp, r7
 8005c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c48:	4770      	bx	lr

08005c4a <HAL_DCACHE_ErrorCallback>:
  * @param  hdcache Pointer to a DCACHE_HandleTypeDef structure that contains
  *                 the configuration information for the specified DCACHEx peripheral.
  * @retval None
  */
__weak void HAL_DCACHE_ErrorCallback(DCACHE_HandleTypeDef *hdcache)
{
 8005c4a:	b480      	push	{r7}
 8005c4c:	b083      	sub	sp, #12
 8005c4e:	af00      	add	r7, sp, #0
 8005c50:	6078      	str	r0, [r7, #4]
  UNUSED(hdcache);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DCACHE_ErrorCallback() should be implemented in the user file
   */
}
 8005c52:	bf00      	nop
 8005c54:	370c      	adds	r7, #12
 8005c56:	46bd      	mov	sp, r7
 8005c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c5c:	4770      	bx	lr
	...

08005c60 <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 8005c60:	b580      	push	{r7, lr}
 8005c62:	b082      	sub	sp, #8
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if (hdcmi == NULL)
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d101      	bne.n	8005c72 <HAL_DCMI_Init+0x12>
  {
    return HAL_ERROR;
 8005c6e:	2301      	movs	r3, #1
 8005c70:	e069      	b.n	8005d46 <HAL_DCMI_Init+0xe6>
  assert_param(IS_DCMI_BYTE_SELECT_MODE(hdcmi->Init.ByteSelectMode));
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));

  if (hdcmi->State == HAL_DCMI_STATE_RESET)
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005c78:	b2db      	uxtb	r3, r3
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d102      	bne.n	8005c84 <HAL_DCMI_Init+0x24>
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 8005c7e:	6878      	ldr	r0, [r7, #4]
 8005c80:	f7fe f998 	bl	8003fb4 <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	2202      	movs	r2, #2
 8005c88:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  if (hdcmi->Init.ExtendedDataMode != DCMI_EXTEND_DATA_8B)
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	699b      	ldr	r3, [r3, #24]
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d002      	beq.n	8005c9a <HAL_DCMI_Init+0x3a>
  {
    /* Byte select mode must be programmed to the reset value if the extended mode
    is not set to 8-bit data capture on every pixel clock */
    hdcmi->Init.ByteSelectMode = DCMI_BSM_ALL;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	2200      	movs	r2, #0
 8005c98:	625a      	str	r2, [r3, #36]	; 0x24
  }
  /* Configures the HS, VS, DE and PC polarity */
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 | \
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	6819      	ldr	r1, [r3, #0]
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681a      	ldr	r2, [r3, #0]
 8005ca4:	4b2a      	ldr	r3, [pc, #168]	; (8005d50 <HAL_DCMI_Init+0xf0>)
 8005ca6:	400b      	ands	r3, r1
 8005ca8:	6013      	str	r3, [r2, #0]
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  | \
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS | \
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	6819      	ldr	r1, [r3, #0]
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	685a      	ldr	r2, [r3, #4]
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	695b      	ldr	r3, [r3, #20]
 8005cb8:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8005cbe:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	691b      	ldr	r3, [r3, #16]
 8005cc4:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	689b      	ldr	r3, [r3, #8]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8005cca:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	699b      	ldr	r3, [r3, #24]
 8005cd0:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	6a1b      	ldr	r3, [r3, #32]
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8005cd6:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cdc:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8005ce2:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ce8:	431a      	orrs	r2, r3
                                    hdcmi->Init.LineSelectStart);
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8005cee:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	430a      	orrs	r2, r1
 8005cf6:	601a      	str	r2, [r3, #0]

  if (hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	685b      	ldr	r3, [r3, #4]
 8005cfc:	2b10      	cmp	r3, #16
 8005cfe:	d112      	bne.n	8005d26 <HAL_DCMI_Init+0xc6>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	7f1b      	ldrb	r3, [r3, #28]
 8005d04:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	7f5b      	ldrb	r3, [r3, #29]
 8005d0a:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8005d0c:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	7f9b      	ldrb	r3, [r3, #30]
 8005d12:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 8005d14:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	7fdb      	ldrb	r3, [r3, #31]
 8005d1c:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 8005d22:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8005d24:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	68da      	ldr	r2, [r3, #12]
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	f042 021e 	orr.w	r2, r2, #30
 8005d34:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	2200      	movs	r2, #0
 8005d3a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	2201      	movs	r2, #1
 8005d40:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005d44:	2300      	movs	r3, #0
}
 8005d46:	4618      	mov	r0, r3
 8005d48:	3708      	adds	r7, #8
 8005d4a:	46bd      	mov	sp, r7
 8005d4c:	bd80      	pop	{r7, pc}
 8005d4e:	bf00      	nop
 8005d50:	ffe0f007 	.word	0xffe0f007

08005d54 <HAL_DCMI_Start_DMA>:
  * @param  pData     The destination memory Buffer address (LCD Frame buffer).
  * @param  Length    The length of capture to be transferred.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Start_DMA(DCMI_HandleTypeDef *hdcmi, uint32_t DCMI_Mode, uint32_t pData, uint32_t Length)
{
 8005d54:	b580      	push	{r7, lr}
 8005d56:	b08a      	sub	sp, #40	; 0x28
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	60f8      	str	r0, [r7, #12]
 8005d5c:	60b9      	str	r1, [r7, #8]
 8005d5e:	607a      	str	r2, [r7, #4]
 8005d60:	603b      	str	r3, [r7, #0]
  uint32_t tmp_length = Length;
 8005d62:	683b      	ldr	r3, [r7, #0]
 8005d64:	623b      	str	r3, [r7, #32]
  HAL_StatusTypeDef status = HAL_OK;
 8005d66:	2300      	movs	r3, #0
 8005d68:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check function parameters */
  assert_param(IS_DCMI_CAPTURE_MODE(DCMI_Mode));

  /* Process Locked */
  __HAL_LOCK(hdcmi);
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005d72:	2b01      	cmp	r3, #1
 8005d74:	d101      	bne.n	8005d7a <HAL_DCMI_Start_DMA+0x26>
 8005d76:	2302      	movs	r3, #2
 8005d78:	e189      	b.n	800608e <HAL_DCMI_Start_DMA+0x33a>
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	2201      	movs	r2, #1
 8005d7e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Lock the DCMI peripheral state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	2202      	movs	r2, #2
 8005d86:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Enable DCMI by setting DCMIEN bit */
  __HAL_DCMI_ENABLE(hdcmi);
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	681a      	ldr	r2, [r3, #0]
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005d98:	601a      	str	r2, [r3, #0]

  /* Configure the DCMI Mode */
  hdcmi->Instance->CR &= ~(DCMI_CR_CM);
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	681a      	ldr	r2, [r3, #0]
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	f022 0202 	bic.w	r2, r2, #2
 8005da8:	601a      	str	r2, [r3, #0]
  hdcmi->Instance->CR |= (uint32_t)(DCMI_Mode);
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	6819      	ldr	r1, [r3, #0]
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	68ba      	ldr	r2, [r7, #8]
 8005db6:	430a      	orrs	r2, r1
 8005db8:	601a      	str	r2, [r3, #0]

  /* Set the DMA memory0 conversion complete callback */
  hdcmi->DMA_Handle->XferCpltCallback = DCMI_DMAXferCplt;
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005dbe:	4a99      	ldr	r2, [pc, #612]	; (8006024 <HAL_DCMI_Start_DMA+0x2d0>)
 8005dc0:	661a      	str	r2, [r3, #96]	; 0x60

  /* Set the DMA error callback */
  hdcmi->DMA_Handle->XferErrorCallback = DCMI_DMAError;
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005dc6:	4a98      	ldr	r2, [pc, #608]	; (8006028 <HAL_DCMI_Start_DMA+0x2d4>)
 8005dc8:	669a      	str	r2, [r3, #104]	; 0x68

  /* Set the dma abort callback */
  hdcmi->DMA_Handle->XferAbortCallback = NULL;
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005dce:	2200      	movs	r2, #0
 8005dd0:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset transfer counters value */
  hdcmi->XferCount = 0;
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	2200      	movs	r2, #0
 8005dd6:	639a      	str	r2, [r3, #56]	; 0x38
  hdcmi->XferTransferNumber = 0;
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	2200      	movs	r2, #0
 8005ddc:	641a      	str	r2, [r3, #64]	; 0x40
  hdcmi->XferSize = 0;
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	2200      	movs	r2, #0
 8005de2:	63da      	str	r2, [r3, #60]	; 0x3c
  hdcmi->pBuffPtr = 0;
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	2200      	movs	r2, #0
 8005de8:	645a      	str	r2, [r3, #68]	; 0x44

  /* Length should be converted to number of bytes */
  tmp_length = tmp_length * 4U;
 8005dea:	6a3b      	ldr	r3, [r7, #32]
 8005dec:	009b      	lsls	r3, r3, #2
 8005dee:	623b      	str	r3, [r7, #32]

  if (tmp_length <= 0xFFFFU)
 8005df0:	6a3b      	ldr	r3, [r7, #32]
 8005df2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005df6:	d24c      	bcs.n	8005e92 <HAL_DCMI_Start_DMA+0x13e>
  {
    /* Continuoues Mode */
    /* Enable the DMA Stream */
    if ((hdcmi->DMA_Handle->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005dfc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005dfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d037      	beq.n	8005e76 <HAL_DCMI_Start_DMA+0x122>
    {
      if ((hdcmi->DMA_Handle->LinkedListQueue != 0U) && (hdcmi->DMA_Handle->LinkedListQueue->Head != 0U))
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005e0a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d023      	beq.n	8005e58 <HAL_DCMI_Start_DMA+0x104>
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005e14:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d01d      	beq.n	8005e58 <HAL_DCMI_Start_DMA+0x104>
      {
        /* Set Source , Destination , Length for DMA Xfer */

        /* Set DMA data size           */
        hdcmi->DMA_Handle->LinkedListQueue->Head->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = tmp_length;
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005e20:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	6a3a      	ldr	r2, [r7, #32]
 8005e26:	609a      	str	r2, [r3, #8]
        /* Set DMA source address      */
        hdcmi->DMA_Handle->LinkedListQueue->Head->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] = \
            (uint32_t)&hdcmi->Instance->DR;
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	f103 0228 	add.w	r2, r3, #40	; 0x28
        hdcmi->DMA_Handle->LinkedListQueue->Head->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] = \
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005e34:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	60da      	str	r2, [r3, #12]
        /* Set DMA destination address */
        hdcmi->DMA_Handle->LinkedListQueue->Head->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = (uint32_t)pData;
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005e3e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	687a      	ldr	r2, [r7, #4]
 8005e44:	611a      	str	r2, [r3, #16]

        status = HAL_DMAEx_List_Start_IT(hdcmi->DMA_Handle);
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005e4a:	4618      	mov	r0, r3
 8005e4c:	f000 fe80 	bl	8006b50 <HAL_DMAEx_List_Start_IT>
 8005e50:	4603      	mov	r3, r0
 8005e52:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8005e56:	e0f9      	b.n	800604c <HAL_DCMI_Start_DMA+0x2f8>
      }
      else
      {
        /* Set Error Code */
        hdcmi->ErrorCode = HAL_DCMI_ERROR_DMA;
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	2240      	movs	r2, #64	; 0x40
 8005e5c:	64da      	str	r2, [r3, #76]	; 0x4c
        /* Change DCMI state */
        hdcmi->State = HAL_DCMI_STATE_READY;
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	2201      	movs	r2, #1
 8005e62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        /* Release Lock */
        __HAL_UNLOCK(hdcmi);
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	2200      	movs	r2, #0
 8005e6a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        /* Return function status */
        status = HAL_ERROR;
 8005e6e:	2301      	movs	r3, #1
 8005e70:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8005e74:	e0ea      	b.n	800604c <HAL_DCMI_Start_DMA+0x2f8>
      }
    }
    else
    {
      status = HAL_DMA_Start_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, (uint32_t)pData, tmp_length);
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	3328      	adds	r3, #40	; 0x28
 8005e80:	4619      	mov	r1, r3
 8005e82:	6a3b      	ldr	r3, [r7, #32]
 8005e84:	687a      	ldr	r2, [r7, #4]
 8005e86:	f000 fa5a 	bl	800633e <HAL_DMA_Start_IT>
 8005e8a:	4603      	mov	r3, r0
 8005e8c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8005e90:	e0dc      	b.n	800604c <HAL_DCMI_Start_DMA+0x2f8>
  {
    /* Double buffering is used through 2 Nodes
       Calculate the elementary size to be transferred by each node */

    /* Initialize transfer parameters */
    hdcmi->XferCount = 1;
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	2201      	movs	r2, #1
 8005e96:	639a      	str	r2, [r3, #56]	; 0x38
    hdcmi->XferSize = tmp_length;
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	6a3a      	ldr	r2, [r7, #32]
 8005e9c:	63da      	str	r2, [r3, #60]	; 0x3c
    hdcmi->pBuffPtr = pData;
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	687a      	ldr	r2, [r7, #4]
 8005ea2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Get the number of buffer */
    while (hdcmi->XferSize > 0xFFFFU)
 8005ea4:	e009      	b.n	8005eba <HAL_DCMI_Start_DMA+0x166>
    {
      hdcmi->XferSize = (hdcmi->XferSize / 2U);
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005eaa:	085a      	lsrs	r2, r3, #1
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	63da      	str	r2, [r3, #60]	; 0x3c
      hdcmi->XferCount = hdcmi->XferCount * 2U;
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005eb4:	005a      	lsls	r2, r3, #1
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	639a      	str	r2, [r3, #56]	; 0x38
    while (hdcmi->XferSize > 0xFFFFU)
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ebe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ec2:	d2f0      	bcs.n	8005ea6 <HAL_DCMI_Start_DMA+0x152>
    }

    /* Update DCMI counter  and transfer number*/
    hdcmi->XferCount = (hdcmi->XferCount - 1U);
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ec8:	1e5a      	subs	r2, r3, #1
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	639a      	str	r2, [r3, #56]	; 0x38
    hdcmi->XferTransferNumber = hdcmi->XferCount;
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	641a      	str	r2, [r3, #64]	; 0x40

    if ((hdcmi->DMA_Handle->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005eda:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005edc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	f000 80a3 	beq.w	800602c <HAL_DCMI_Start_DMA+0x2d8>
    {
      if ((hdcmi->DMA_Handle->LinkedListQueue != 0U) && (hdcmi->DMA_Handle->LinkedListQueue->Head != 0U))
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005eea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	f000 808a 	beq.w	8006006 <HAL_DCMI_Start_DMA+0x2b2>
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005ef6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	f000 8083 	beq.w	8006006 <HAL_DCMI_Start_DMA+0x2b2>
      {
        /* Update first node */

        /* Set DMA Data size */
        hdcmi->DMA_Handle->LinkedListQueue->Head->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = hdcmi->XferSize ;
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005f04:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	68fa      	ldr	r2, [r7, #12]
 8005f0a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005f0c:	609a      	str	r2, [r3, #8]

        /* Set DMA Source address */
        hdcmi->DMA_Handle->LinkedListQueue->Head->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] = \
            (uint32_t)&hdcmi->Instance->DR;
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	f103 0228 	add.w	r2, r3, #40	; 0x28
        hdcmi->DMA_Handle->LinkedListQueue->Head->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] = \
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005f1a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	60da      	str	r2, [r3, #12]

        /* Set DMA Destination address */
        hdcmi->DMA_Handle->LinkedListQueue->Head->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = (uint32_t)pData;
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005f24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	687a      	ldr	r2, [r7, #4]
 8005f2a:	611a      	str	r2, [r3, #16]

        /* Get CLLR offset */
        cllr_offset = (hdcmi->DMA_Handle->LinkedListQueue->Head->NodeInfo & NODE_CLLR_IDX) >> 8U;
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005f30:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	6a1b      	ldr	r3, [r3, #32]
 8005f36:	0a1b      	lsrs	r3, r3, #8
 8005f38:	f003 0307 	and.w	r3, r3, #7
 8005f3c:	61fb      	str	r3, [r7, #28]

        /* Update second node */
        if (hdcmi->DMA_Handle->LinkedListQueue->Head->LinkRegisters[cllr_offset] != 0U)
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005f42:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	69fa      	ldr	r2, [r7, #28]
 8005f48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d04b      	beq.n	8005fe8 <HAL_DCMI_Start_DMA+0x294>
        {
          tmp1 = (uint32_t)hdcmi->DMA_Handle->LinkedListQueue->Head ;
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005f54:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	61bb      	str	r3, [r7, #24]
          tmp2 = hdcmi->DMA_Handle->LinkedListQueue->Head->LinkRegisters[cllr_offset];
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005f5e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	69fa      	ldr	r2, [r7, #28]
 8005f64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f68:	617b      	str	r3, [r7, #20]
          /* Update second node */

          /* Set DMA Data size */
          ((DMA_NodeTypeDef *)((tmp1 & DMA_CLBAR_LBA) + \
 8005f6a:	69bb      	ldr	r3, [r7, #24]
 8005f6c:	0c1b      	lsrs	r3, r3, #16
 8005f6e:	041b      	lsls	r3, r3, #16
                               (tmp2 & DMA_CLLR_LA)))->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = hdcmi->XferSize;
 8005f70:	6979      	ldr	r1, [r7, #20]
 8005f72:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 8005f76:	400a      	ands	r2, r1
          ((DMA_NodeTypeDef *)((tmp1 & DMA_CLBAR_LBA) + \
 8005f78:	4313      	orrs	r3, r2
 8005f7a:	461a      	mov	r2, r3
                               (tmp2 & DMA_CLLR_LA)))->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = hdcmi->XferSize;
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f80:	6093      	str	r3, [r2, #8]

          /* Set DMA Source address */
          ((DMA_NodeTypeDef *)((tmp1 & DMA_CLBAR_LBA) + \
                               (tmp2 & DMA_CLLR_LA)))->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] = \
                                   (uint32_t)&hdcmi->Instance->DR;
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	f103 0028 	add.w	r0, r3, #40	; 0x28
          ((DMA_NodeTypeDef *)((tmp1 & DMA_CLBAR_LBA) + \
 8005f8a:	69bb      	ldr	r3, [r7, #24]
 8005f8c:	0c1b      	lsrs	r3, r3, #16
 8005f8e:	041b      	lsls	r3, r3, #16
                               (tmp2 & DMA_CLLR_LA)))->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] = \
 8005f90:	6979      	ldr	r1, [r7, #20]
 8005f92:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 8005f96:	400a      	ands	r2, r1
          ((DMA_NodeTypeDef *)((tmp1 & DMA_CLBAR_LBA) + \
 8005f98:	4313      	orrs	r3, r2
                                   (uint32_t)&hdcmi->Instance->DR;
 8005f9a:	4602      	mov	r2, r0
                               (tmp2 & DMA_CLLR_LA)))->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] = \
 8005f9c:	60da      	str	r2, [r3, #12]

          /* Set DMA Destination address */
          ((DMA_NodeTypeDef *)((tmp1 & DMA_CLBAR_LBA) + \
                               (tmp2 & DMA_CLLR_LA)))->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = \
                                   (uint32_t)pData + hdcmi->XferSize;
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
          ((DMA_NodeTypeDef *)((tmp1 & DMA_CLBAR_LBA) + \
 8005fa2:	69bb      	ldr	r3, [r7, #24]
 8005fa4:	0c1b      	lsrs	r3, r3, #16
 8005fa6:	041b      	lsls	r3, r3, #16
                               (tmp2 & DMA_CLLR_LA)))->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = \
 8005fa8:	6978      	ldr	r0, [r7, #20]
 8005faa:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 8005fae:	4002      	ands	r2, r0
          ((DMA_NodeTypeDef *)((tmp1 & DMA_CLBAR_LBA) + \
 8005fb0:	4313      	orrs	r3, r2
 8005fb2:	461a      	mov	r2, r3
                                   (uint32_t)pData + hdcmi->XferSize;
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	440b      	add	r3, r1
                               (tmp2 & DMA_CLLR_LA)))->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = \
 8005fb8:	6113      	str	r3, [r2, #16]

          if (HAL_DMAEx_List_Start_IT(hdcmi->DMA_Handle) != HAL_OK)
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005fbe:	4618      	mov	r0, r3
 8005fc0:	f000 fdc6 	bl	8006b50 <HAL_DMAEx_List_Start_IT>
 8005fc4:	4603      	mov	r3, r0
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d03f      	beq.n	800604a <HAL_DCMI_Start_DMA+0x2f6>
          {
            /* Set Error Code */
            hdcmi->ErrorCode = HAL_DCMI_ERROR_DMA;
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	2240      	movs	r2, #64	; 0x40
 8005fce:	64da      	str	r2, [r3, #76]	; 0x4c
            /* Change DCMI state */
            hdcmi->State = HAL_DCMI_STATE_READY;
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	2201      	movs	r2, #1
 8005fd4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
            /* Release Lock */
            __HAL_UNLOCK(hdcmi);
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	2200      	movs	r2, #0
 8005fdc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
            /* Return function status */
            status = HAL_ERROR;
 8005fe0:	2301      	movs	r3, #1
 8005fe2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (hdcmi->DMA_Handle->LinkedListQueue->Head->LinkRegisters[cllr_offset] != 0U)
 8005fe6:	e030      	b.n	800604a <HAL_DCMI_Start_DMA+0x2f6>
          }
        }
        else
        {
          /* Set Error Code */
          hdcmi->ErrorCode = HAL_DCMI_ERROR_DMA;
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	2240      	movs	r2, #64	; 0x40
 8005fec:	64da      	str	r2, [r3, #76]	; 0x4c
          /* Change DCMI state */
          hdcmi->State = HAL_DCMI_STATE_READY;
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	2201      	movs	r2, #1
 8005ff2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          /* Release Lock */
          __HAL_UNLOCK(hdcmi);
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	2200      	movs	r2, #0
 8005ffa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          /* Return function status */
          status = HAL_ERROR;
 8005ffe:	2301      	movs	r3, #1
 8006000:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (hdcmi->DMA_Handle->LinkedListQueue->Head->LinkRegisters[cllr_offset] != 0U)
 8006004:	e021      	b.n	800604a <HAL_DCMI_Start_DMA+0x2f6>
        }
      }
      else
      {
        /* Set Error Code */
        hdcmi->ErrorCode = HAL_DCMI_ERROR_DMA;
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	2240      	movs	r2, #64	; 0x40
 800600a:	64da      	str	r2, [r3, #76]	; 0x4c
        /* Change DCMI state */
        hdcmi->State = HAL_DCMI_STATE_READY;
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	2201      	movs	r2, #1
 8006010:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        /* Release Lock */
        __HAL_UNLOCK(hdcmi);
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	2200      	movs	r2, #0
 8006018:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        /* Return function status */
        status = HAL_ERROR;
 800601c:	2301      	movs	r3, #1
 800601e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006022:	e013      	b.n	800604c <HAL_DCMI_Start_DMA+0x2f8>
 8006024:	080061f9 	.word	0x080061f9
 8006028:	08006305 	.word	0x08006305
      }
    }
    else
    {
      /* Set Error Code */
      hdcmi->ErrorCode = HAL_DCMI_ERROR_DMA;
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	2240      	movs	r2, #64	; 0x40
 8006030:	64da      	str	r2, [r3, #76]	; 0x4c
      /* Change DCMI state */
      hdcmi->State = HAL_DCMI_STATE_READY;
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	2201      	movs	r2, #1
 8006036:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      /* Release Lock */
      __HAL_UNLOCK(hdcmi);
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	2200      	movs	r2, #0
 800603e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      /* Return function status */
      status = HAL_ERROR;
 8006042:	2301      	movs	r3, #1
 8006044:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006048:	e000      	b.n	800604c <HAL_DCMI_Start_DMA+0x2f8>
        if (hdcmi->DMA_Handle->LinkedListQueue->Head->LinkRegisters[cllr_offset] != 0U)
 800604a:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 800604c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006050:	2b00      	cmp	r3, #0
 8006052:	d10c      	bne.n	800606e <HAL_DCMI_Start_DMA+0x31a>
  {
    /* Enable Capture */
    hdcmi->Instance->CR |= DCMI_CR_CAPTURE;
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	681a      	ldr	r2, [r3, #0]
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	f042 0201 	orr.w	r2, r2, #1
 8006062:	601a      	str	r2, [r3, #0]

    /* Release Lock */
    __HAL_UNLOCK(hdcmi);
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	2200      	movs	r2, #0
 8006068:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 800606c:	e00d      	b.n	800608a <HAL_DCMI_Start_DMA+0x336>
  }
  else
  {
    /* Set Error Code */
    hdcmi->ErrorCode = HAL_DCMI_ERROR_DMA;
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	2240      	movs	r2, #64	; 0x40
 8006072:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_READY;
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	2201      	movs	r2, #1
 8006078:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    /* Release Lock */
    __HAL_UNLOCK(hdcmi);
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	2200      	movs	r2, #0
 8006080:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    /* Return function status */
    status = HAL_ERROR;
 8006084:	2301      	movs	r3, #1
 8006086:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Return function status */
  return status;
 800608a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800608e:	4618      	mov	r0, r3
 8006090:	3728      	adds	r7, #40	; 0x28
 8006092:	46bd      	mov	sp, r7
 8006094:	bd80      	pop	{r7, pc}
 8006096:	bf00      	nop

08006098 <HAL_DCMI_IRQHandler>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for the DCMI.
  * @retval None
  */
void HAL_DCMI_IRQHandler(DCMI_HandleTypeDef *hdcmi)
{
 8006098:	b580      	push	{r7, lr}
 800609a:	b084      	sub	sp, #16
 800609c:	af00      	add	r7, sp, #0
 800609e:	6078      	str	r0, [r7, #4]
  uint32_t isr_value = READ_REG(hdcmi->Instance->MISR);
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	691b      	ldr	r3, [r3, #16]
 80060a6:	60fb      	str	r3, [r7, #12]

  /* Synchronization error interrupt management *******************************/
  if ((isr_value & DCMI_FLAG_ERRRI) == DCMI_FLAG_ERRRI)
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	f003 0304 	and.w	r3, r3, #4
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d01e      	beq.n	80060f0 <HAL_DCMI_IRQHandler+0x58>
  {
    /* Clear the Synchronization error flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_ERRRI);
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	2204      	movs	r2, #4
 80060b8:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_SYNC;
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80060be:	f043 0202 	orr.w	r2, r3, #2
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	2204      	movs	r2, #4
 80060ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Set the synchronization error callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80060d2:	4a39      	ldr	r2, [pc, #228]	; (80061b8 <HAL_DCMI_IRQHandler+0x120>)
 80060d4:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Abort the DMA Transfer */
    if (HAL_DMA_Abort_IT(hdcmi->DMA_Handle) != HAL_OK)
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80060da:	4618      	mov	r0, r3
 80060dc:	f000 fa0b 	bl	80064f6 <HAL_DMA_Abort_IT>
 80060e0:	4603      	mov	r3, r0
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d004      	beq.n	80060f0 <HAL_DCMI_IRQHandler+0x58>
    {
      DCMI_DMAError(hdcmi->DMA_Handle);
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80060ea:	4618      	mov	r0, r3
 80060ec:	f000 f90a 	bl	8006304 <DCMI_DMAError>
    }
  }
  /* Overflow interrupt management ********************************************/
  if ((isr_value & DCMI_FLAG_OVRRI) == DCMI_FLAG_OVRRI)
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	f003 0302 	and.w	r3, r3, #2
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d01e      	beq.n	8006138 <HAL_DCMI_IRQHandler+0xa0>
  {
    /* Clear the Overflow flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_OVRRI);
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	2202      	movs	r2, #2
 8006100:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_OVR;
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006106:	f043 0201 	orr.w	r2, r3, #1
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	2204      	movs	r2, #4
 8006112:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Set the overflow callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800611a:	4a27      	ldr	r2, [pc, #156]	; (80061b8 <HAL_DCMI_IRQHandler+0x120>)
 800611c:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Abort the DMA Transfer */
    if (HAL_DMA_Abort_IT(hdcmi->DMA_Handle) != HAL_OK)
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006122:	4618      	mov	r0, r3
 8006124:	f000 f9e7 	bl	80064f6 <HAL_DMA_Abort_IT>
 8006128:	4603      	mov	r3, r0
 800612a:	2b00      	cmp	r3, #0
 800612c:	d004      	beq.n	8006138 <HAL_DCMI_IRQHandler+0xa0>
    {
      DCMI_DMAError(hdcmi->DMA_Handle);
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006132:	4618      	mov	r0, r3
 8006134:	f000 f8e6 	bl	8006304 <DCMI_DMAError>
    }
  }
  /* Line Interrupt management ************************************************/
  if ((isr_value & DCMI_FLAG_LINERI) == DCMI_FLAG_LINERI)
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	f003 0310 	and.w	r3, r3, #16
 800613e:	2b00      	cmp	r3, #0
 8006140:	d006      	beq.n	8006150 <HAL_DCMI_IRQHandler+0xb8>
  {
    /* Clear the Line interrupt flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_LINERI);
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	2210      	movs	r2, #16
 8006148:	615a      	str	r2, [r3, #20]
    /* Line interrupt Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI line event callback*/
    hdcmi->LineEventCallback(hdcmi);
#else
    HAL_DCMI_LineEventCallback(hdcmi);
 800614a:	6878      	ldr	r0, [r7, #4]
 800614c:	f000 f840 	bl	80061d0 <HAL_DCMI_LineEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
  /* VSYNC interrupt management ***********************************************/
  if ((isr_value & DCMI_FLAG_VSYNCRI) == DCMI_FLAG_VSYNCRI)
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	f003 0308 	and.w	r3, r3, #8
 8006156:	2b00      	cmp	r3, #0
 8006158:	d006      	beq.n	8006168 <HAL_DCMI_IRQHandler+0xd0>
  {
    /* Clear the VSYNC flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_VSYNCRI);
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	2208      	movs	r2, #8
 8006160:	615a      	str	r2, [r3, #20]
    /* VSYNC Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI vsync event callback*/
    hdcmi->VsyncEventCallback(hdcmi);
#else
    HAL_DCMI_VsyncEventCallback(hdcmi);
 8006162:	6878      	ldr	r0, [r7, #4]
 8006164:	f000 f83e 	bl	80061e4 <HAL_DCMI_VsyncEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
  /* FRAME interrupt management ***********************************************/
  if ((isr_value & DCMI_FLAG_FRAMERI) == DCMI_FLAG_FRAMERI)
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	f003 0301 	and.w	r3, r3, #1
 800616e:	2b00      	cmp	r3, #0
 8006170:	d01d      	beq.n	80061ae <HAL_DCMI_IRQHandler+0x116>
  {
    /* When snapshot mode, disable Vsync, Error and Overrun interrupts */
    if ((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	f003 0302 	and.w	r3, r3, #2
 800617c:	2b02      	cmp	r3, #2
 800617e:	d107      	bne.n	8006190 <HAL_DCMI_IRQHandler+0xf8>
    {
      /* Disable the Line, Vsync, Error and Overrun interrupts */
      __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	68da      	ldr	r2, [r3, #12]
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	f022 021e 	bic.w	r2, r2, #30
 800618e:	60da      	str	r2, [r3, #12]
    }

    /* Disable the Frame interrupt */
    __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_FRAME);
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	68da      	ldr	r2, [r3, #12]
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	f022 0201 	bic.w	r2, r2, #1
 800619e:	60da      	str	r2, [r3, #12]

    /* Clear the End of Frame flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_FRAMERI);
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	2201      	movs	r2, #1
 80061a6:	615a      	str	r2, [r3, #20]
    /* Frame Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI frame event callback*/
    hdcmi->FrameEventCallback(hdcmi);
#else
    HAL_DCMI_FrameEventCallback(hdcmi);
 80061a8:	6878      	ldr	r0, [r7, #4]
 80061aa:	f7fb f81d 	bl	80011e8 <HAL_DCMI_FrameEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
}
 80061ae:	bf00      	nop
 80061b0:	3710      	adds	r7, #16
 80061b2:	46bd      	mov	sp, r7
 80061b4:	bd80      	pop	{r7, pc}
 80061b6:	bf00      	nop
 80061b8:	08006305 	.word	0x08006305

080061bc <HAL_DCMI_ErrorCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_ErrorCallback(DCMI_HandleTypeDef *hdcmi)
{
 80061bc:	b480      	push	{r7}
 80061be:	b083      	sub	sp, #12
 80061c0:	af00      	add	r7, sp, #0
 80061c2:	6078      	str	r0, [r7, #4]
  UNUSED(hdcmi);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_ErrorCallback could be implemented in the user file
   */
}
 80061c4:	bf00      	nop
 80061c6:	370c      	adds	r7, #12
 80061c8:	46bd      	mov	sp, r7
 80061ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ce:	4770      	bx	lr

080061d0 <HAL_DCMI_LineEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_LineEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 80061d0:	b480      	push	{r7}
 80061d2:	b083      	sub	sp, #12
 80061d4:	af00      	add	r7, sp, #0
 80061d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_LineEventCallback could be implemented in the user file
   */
}
 80061d8:	bf00      	nop
 80061da:	370c      	adds	r7, #12
 80061dc:	46bd      	mov	sp, r7
 80061de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e2:	4770      	bx	lr

080061e4 <HAL_DCMI_VsyncEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_VsyncEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 80061e4:	b480      	push	{r7}
 80061e6:	b083      	sub	sp, #12
 80061e8:	af00      	add	r7, sp, #0
 80061ea:	6078      	str	r0, [r7, #4]
  UNUSED(hdcmi);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_VsyncEventCallback could be implemented in the user file
   */
}
 80061ec:	bf00      	nop
 80061ee:	370c      	adds	r7, #12
 80061f0:	46bd      	mov	sp, r7
 80061f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f6:	4770      	bx	lr

080061f8 <DCMI_DMAXferCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 80061f8:	b480      	push	{r7}
 80061fa:	b08b      	sub	sp, #44	; 0x2c
 80061fc:	af00      	add	r7, sp, #0
 80061fe:	6078      	str	r0, [r7, #4]

  DCMI_HandleTypeDef *hdcmi = (DCMI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006204:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t transfernumber;
  uint32_t transfercount;
  uint32_t transfersize ;

  /* Update Nodes destinations */
  if (hdcmi->XferSize != 0U)
 8006206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006208:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800620a:	2b00      	cmp	r3, #0
 800620c:	d061      	beq.n	80062d2 <DCMI_DMAXferCplt+0xda>
  {
    pbuff          = hdcmi->pBuffPtr;
 800620e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006210:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006212:	623b      	str	r3, [r7, #32]
    transfernumber = hdcmi->XferTransferNumber;
 8006214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006216:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006218:	61fb      	str	r3, [r7, #28]
    transfercount  = hdcmi->XferCount;
 800621a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800621c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800621e:	61bb      	str	r3, [r7, #24]
    transfersize   = hdcmi->XferSize;
 8006220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006222:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006224:	617b      	str	r3, [r7, #20]

    tmp1 = hdcmi->DMA_Handle->Instance->CLLR & DMA_CLLR_LA;
 8006226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006228:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800622e:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 8006232:	4013      	ands	r3, r2
 8006234:	613b      	str	r3, [r7, #16]
    tmp2 = hdcmi->DMA_Handle->Instance->CLBAR & DMA_CLBAR_LBA;
 8006236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006238:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	0c1b      	lsrs	r3, r3, #16
 8006240:	041b      	lsls	r3, r3, #16
 8006242:	60fb      	str	r3, [r7, #12]
    pnode = (DMA_NodeTypeDef *)(uint32_t)(tmp1 | tmp2);
 8006244:	693a      	ldr	r2, [r7, #16]
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	4313      	orrs	r3, r2
 800624a:	60bb      	str	r3, [r7, #8]

    if (hdcmi->XferCount > 1U)
 800624c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800624e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006250:	2b01      	cmp	r3, #1
 8006252:	d910      	bls.n	8006276 <DCMI_DMAXferCplt+0x7e>
    {
      pnode->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = pbuff + ((transfernumber - transfercount + 2U) * transfersize);
 8006254:	69fa      	ldr	r2, [r7, #28]
 8006256:	69bb      	ldr	r3, [r7, #24]
 8006258:	1ad3      	subs	r3, r2, r3
 800625a:	3302      	adds	r3, #2
 800625c:	697a      	ldr	r2, [r7, #20]
 800625e:	fb03 f202 	mul.w	r2, r3, r2
 8006262:	6a3b      	ldr	r3, [r7, #32]
 8006264:	441a      	add	r2, r3
 8006266:	68bb      	ldr	r3, [r7, #8]
 8006268:	611a      	str	r2, [r3, #16]
      hdcmi->XferCount--;
 800626a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800626c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800626e:	1e5a      	subs	r2, r3, #1
 8006270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006272:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
    {
      hdcmi->State = HAL_DCMI_STATE_READY;
    }
  }
}
 8006274:	e040      	b.n	80062f8 <DCMI_DMAXferCplt+0x100>
    else if (hdcmi->XferCount == 1U)
 8006276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006278:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800627a:	2b01      	cmp	r3, #1
 800627c:	d109      	bne.n	8006292 <DCMI_DMAXferCplt+0x9a>
      pnode->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = hdcmi->pBuffPtr;
 800627e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006280:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006282:	68bb      	ldr	r3, [r7, #8]
 8006284:	611a      	str	r2, [r3, #16]
      hdcmi->XferCount--;
 8006286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006288:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800628a:	1e5a      	subs	r2, r3, #1
 800628c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800628e:	639a      	str	r2, [r3, #56]	; 0x38
}
 8006290:	e032      	b.n	80062f8 <DCMI_DMAXferCplt+0x100>
      pnode->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = hdcmi->pBuffPtr + hdcmi->XferSize;
 8006292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006294:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006298:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800629a:	441a      	add	r2, r3
 800629c:	68bb      	ldr	r3, [r7, #8]
 800629e:	611a      	str	r2, [r3, #16]
      if ((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_CONTINUOUS)
 80062a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	f003 0302 	and.w	r3, r3, #2
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d104      	bne.n	80062b8 <DCMI_DMAXferCplt+0xc0>
        hdcmi->XferCount = hdcmi->XferTransferNumber ;
 80062ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062b0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80062b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062b4:	639a      	str	r2, [r3, #56]	; 0x38
 80062b6:	e003      	b.n	80062c0 <DCMI_DMAXferCplt+0xc8>
        hdcmi->State = HAL_DCMI_STATE_READY;
 80062b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062ba:	2201      	movs	r2, #1
 80062bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_FRAME);
 80062c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	68da      	ldr	r2, [r3, #12]
 80062c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	f042 0201 	orr.w	r2, r2, #1
 80062ce:	60da      	str	r2, [r3, #12]
}
 80062d0:	e012      	b.n	80062f8 <DCMI_DMAXferCplt+0x100>
    __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_FRAME);
 80062d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	68da      	ldr	r2, [r3, #12]
 80062d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	f042 0201 	orr.w	r2, r2, #1
 80062e0:	60da      	str	r2, [r3, #12]
    if ((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 80062e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	f003 0302 	and.w	r3, r3, #2
 80062ec:	2b02      	cmp	r3, #2
 80062ee:	d103      	bne.n	80062f8 <DCMI_DMAXferCplt+0x100>
      hdcmi->State = HAL_DCMI_STATE_READY;
 80062f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062f2:	2201      	movs	r2, #1
 80062f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
}
 80062f8:	bf00      	nop
 80062fa:	372c      	adds	r7, #44	; 0x2c
 80062fc:	46bd      	mov	sp, r7
 80062fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006302:	4770      	bx	lr

08006304 <DCMI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAError(DMA_HandleTypeDef *hdma)
{
 8006304:	b580      	push	{r7, lr}
 8006306:	b084      	sub	sp, #16
 8006308:	af00      	add	r7, sp, #0
 800630a:	6078      	str	r0, [r7, #4]
  DCMI_HandleTypeDef *hdcmi = (DCMI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006310:	60fb      	str	r3, [r7, #12]

  if (hdcmi->DMA_Handle->ErrorCode != HAL_DMA_ERROR_ULE)
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006316:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006318:	2b02      	cmp	r3, #2
 800631a:	d009      	beq.n	8006330 <DCMI_DMAError+0x2c>
  {
    /* Initialize the DCMI state*/
    hdcmi->State = HAL_DCMI_STATE_READY;
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	2201      	movs	r2, #1
 8006320:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Set DCMI Error Code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_DMA;
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006328:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	64da      	str	r2, [r3, #76]	; 0x4c
  /* DCMI error Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
  /*Call registered DCMI error callback*/
  hdcmi->ErrorCallback(hdcmi);
#else
  HAL_DCMI_ErrorCallback(hdcmi);
 8006330:	68f8      	ldr	r0, [r7, #12]
 8006332:	f7ff ff43 	bl	80061bc <HAL_DCMI_ErrorCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */

}
 8006336:	bf00      	nop
 8006338:	3710      	adds	r7, #16
 800633a:	46bd      	mov	sp, r7
 800633c:	bd80      	pop	{r7, pc}

0800633e <HAL_DMA_Start_IT>:
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *const hdma,
                                   uint32_t SrcAddress,
                                   uint32_t DstAddress,
                                   uint32_t SrcDataSize)
{
 800633e:	b580      	push	{r7, lr}
 8006340:	b084      	sub	sp, #16
 8006342:	af00      	add	r7, sp, #0
 8006344:	60f8      	str	r0, [r7, #12]
 8006346:	60b9      	str	r1, [r7, #8]
 8006348:	607a      	str	r2, [r7, #4]
 800634a:	603b      	str	r3, [r7, #0]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	2b00      	cmp	r3, #0
 8006350:	d101      	bne.n	8006356 <HAL_DMA_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006352:	2301      	movs	r3, #1
 8006354:	e04f      	b.n	80063f6 <HAL_DMA_Start_IT+0xb8>

  /* Check the parameters */
  assert_param(IS_DMA_BLOCK_SIZE(SrcDataSize));

  /* Process locked */
  __HAL_LOCK(hdma);
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800635c:	2b01      	cmp	r3, #1
 800635e:	d101      	bne.n	8006364 <HAL_DMA_Start_IT+0x26>
 8006360:	2302      	movs	r3, #2
 8006362:	e048      	b.n	80063f6 <HAL_DMA_Start_IT+0xb8>
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	2201      	movs	r2, #1
 8006368:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  /* Check DMA channel state */
  if (hdma->State == HAL_DMA_STATE_READY)
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8006372:	b2db      	uxtb	r3, r3
 8006374:	2b01      	cmp	r3, #1
 8006376:	d136      	bne.n	80063e6 <HAL_DMA_Start_IT+0xa8>
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	2202      	movs	r2, #2
 800637c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	2200      	movs	r2, #0
 8006384:	659a      	str	r2, [r3, #88]	; 0x58

    /* Configure the source address, destination address, the data size and clear flags */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, SrcDataSize);
 8006386:	683b      	ldr	r3, [r7, #0]
 8006388:	687a      	ldr	r2, [r7, #4]
 800638a:	68b9      	ldr	r1, [r7, #8]
 800638c:	68f8      	ldr	r0, [r7, #12]
 800638e:	f000 fa8b 	bl	80068a8 <DMA_SetConfig>

    /* Enable common interrupts: Transfer Complete and Transfer Errors ITs */
    __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_DTE | DMA_IT_ULE | DMA_IT_USE | DMA_IT_TO));
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	695a      	ldr	r2, [r3, #20]
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	f442 42ba 	orr.w	r2, r2, #23808	; 0x5d00
 80063a0:	615a      	str	r2, [r3, #20]

    /* Check half transfer complete callback */
    if (hdma->XferHalfCpltCallback != NULL)
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d007      	beq.n	80063ba <HAL_DMA_Start_IT+0x7c>
    {
      /* If Half Transfer complete callback is set, enable the corresponding IT */
      __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	695a      	ldr	r2, [r3, #20]
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80063b8:	615a      	str	r2, [r3, #20]
    }

    /* Check Half suspend callback */
    if (hdma->XferSuspendCallback != NULL)
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d007      	beq.n	80063d2 <HAL_DMA_Start_IT+0x94>
    {
      /* If Transfer suspend callback is set, enable the corresponding IT */
      __HAL_DMA_ENABLE_IT(hdma, DMA_IT_SUSP);
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	695a      	ldr	r2, [r3, #20]
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80063d0:	615a      	str	r2, [r3, #20]
    }

    /* Enable DMA channel */
    __HAL_DMA_ENABLE(hdma);
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	695a      	ldr	r2, [r3, #20]
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	f042 0201 	orr.w	r2, r2, #1
 80063e0:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hdma);

    return HAL_ERROR;
  }

  return HAL_OK;
 80063e2:	2300      	movs	r3, #0
 80063e4:	e007      	b.n	80063f6 <HAL_DMA_Start_IT+0xb8>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	2240      	movs	r2, #64	; 0x40
 80063ea:	659a      	str	r2, [r3, #88]	; 0x58
    __HAL_UNLOCK(hdma);
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	2200      	movs	r2, #0
 80063f0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    return HAL_ERROR;
 80063f4:	2301      	movs	r3, #1
}
 80063f6:	4618      	mov	r0, r3
 80063f8:	3710      	adds	r7, #16
 80063fa:	46bd      	mov	sp, r7
 80063fc:	bd80      	pop	{r7, pc}

080063fe <HAL_DMA_Abort>:
  *         is suspended while a data transfer is on-going, the current data will be transferred and the channel will be
  *         effectively suspended only after the transfer of any on-going data is finished.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *const hdma)
{
 80063fe:	b580      	push	{r7, lr}
 8006400:	b084      	sub	sp, #16
 8006402:	af00      	add	r7, sp, #0
 8006404:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart =  HAL_GetTick();
 8006406:	f7ff fa33 	bl	8005870 <HAL_GetTick>
 800640a:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	2b00      	cmp	r3, #0
 8006410:	d101      	bne.n	8006416 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8006412:	2301      	movs	r3, #1
 8006414:	e06b      	b.n	80064ee <HAL_DMA_Abort+0xf0>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800641c:	b2db      	uxtb	r3, r3
 800641e:	2b02      	cmp	r3, #2
 8006420:	d008      	beq.n	8006434 <HAL_DMA_Abort+0x36>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	2220      	movs	r2, #32
 8006426:	659a      	str	r2, [r3, #88]	; 0x58

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	2200      	movs	r2, #0
 800642c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

    return HAL_ERROR;
 8006430:	2301      	movs	r3, #1
 8006432:	e05c      	b.n	80064ee <HAL_DMA_Abort+0xf0>
  }
  else
  {
    /* Suspend the channel */
    hdma->Instance->CCR |= DMA_CCR_SUSP;
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	695a      	ldr	r2, [r3, #20]
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	f042 0204 	orr.w	r2, r2, #4
 8006442:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_SUSPEND;
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	2205      	movs	r2, #5
 8006448:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Check if the DMA Channel is suspended */
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 800644c:	e020      	b.n	8006490 <HAL_DMA_Abort+0x92>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 800644e:	f7ff fa0f 	bl	8005870 <HAL_GetTick>
 8006452:	4602      	mov	r2, r0
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	1ad3      	subs	r3, r2, r3
 8006458:	2b05      	cmp	r3, #5
 800645a:	d919      	bls.n	8006490 <HAL_DMA_Abort+0x92>
      {
        /* Update the DMA channel error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TIMEOUT;
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006460:	f043 0210 	orr.w	r2, r3, #16
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	659a      	str	r2, [r3, #88]	; 0x58

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	2203      	movs	r2, #3
 800646c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006474:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006478:	2b00      	cmp	r3, #0
 800647a:	d003      	beq.n	8006484 <HAL_DMA_Abort+0x86>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006480:	2201      	movs	r2, #1
 8006482:	731a      	strb	r2, [r3, #12]
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	2200      	movs	r2, #0
 8006488:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        return HAL_ERROR;
 800648c:	2301      	movs	r3, #1
 800648e:	e02e      	b.n	80064ee <HAL_DMA_Abort+0xf0>
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	691b      	ldr	r3, [r3, #16]
 8006496:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800649a:	2b00      	cmp	r3, #0
 800649c:	d0d7      	beq.n	800644e <HAL_DMA_Abort+0x50>
      }
    }

    /* Reset the channel */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	695a      	ldr	r2, [r3, #20]
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	f042 0202 	orr.w	r2, r2, #2
 80064ac:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	2204      	movs	r2, #4
 80064b2:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Clear all status flags */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	f44f 42fe 	mov.w	r2, #32512	; 0x7f00
 80064be:	60da      	str	r2, [r3, #12]
                                DMA_FLAG_TO));

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	2201      	movs	r2, #1
 80064c4:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80064cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d007      	beq.n	80064e4 <HAL_DMA_Abort+0xe6>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80064d8:	2201      	movs	r2, #1
 80064da:	731a      	strb	r2, [r3, #12]

      /* Clear remaining data size to ensure loading linked-list from memory next start */
      hdma->Instance->CBR1 = 0U;
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	2200      	movs	r2, #0
 80064e2:	649a      	str	r2, [r3, #72]	; 0x48
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	2200      	movs	r2, #0
 80064e8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80064ec:	2300      	movs	r3, #0
}
 80064ee:	4618      	mov	r0, r3
 80064f0:	3710      	adds	r7, #16
 80064f2:	46bd      	mov	sp, r7
 80064f4:	bd80      	pop	{r7, pc}

080064f6 <HAL_DMA_Abort_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *const hdma)
{
 80064f6:	b480      	push	{r7}
 80064f8:	b083      	sub	sp, #12
 80064fa:	af00      	add	r7, sp, #0
 80064fc:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	2b00      	cmp	r3, #0
 8006502:	d101      	bne.n	8006508 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8006504:	2301      	movs	r3, #1
 8006506:	e019      	b.n	800653c <HAL_DMA_Abort_IT+0x46>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800650e:	b2db      	uxtb	r3, r3
 8006510:	2b02      	cmp	r3, #2
 8006512:	d004      	beq.n	800651e <HAL_DMA_Abort_IT+0x28>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	2220      	movs	r2, #32
 8006518:	659a      	str	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 800651a:	2301      	movs	r3, #1
 800651c:	e00e      	b.n	800653c <HAL_DMA_Abort_IT+0x46>
  }
  else
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	2204      	movs	r2, #4
 8006522:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Suspend the channel and activate suspend interrupt */
    hdma->Instance->CCR |= (DMA_CCR_SUSP | DMA_CCR_SUSPIE);
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	695b      	ldr	r3, [r3, #20]
 800652c:	687a      	ldr	r2, [r7, #4]
 800652e:	6812      	ldr	r2, [r2, #0]
 8006530:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8006534:	f043 0304 	orr.w	r3, r3, #4
 8006538:	6153      	str	r3, [r2, #20]
  }

  return HAL_OK;
 800653a:	2300      	movs	r3, #0
}
 800653c:	4618      	mov	r0, r3
 800653e:	370c      	adds	r7, #12
 8006540:	46bd      	mov	sp, r7
 8006542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006546:	4770      	bx	lr

08006548 <HAL_DMA_IRQHandler>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *const hdma)
{
 8006548:	b580      	push	{r7, lr}
 800654a:	b084      	sub	sp, #16
 800654c:	af00      	add	r7, sp, #0
 800654e:	6078      	str	r0, [r7, #4]
  DMA_TypeDef *p_dma_instance = GET_DMA_INSTANCE(hdma);
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8006558:	f023 030f 	bic.w	r3, r3, #15
 800655c:	60fb      	str	r3, [r7, #12]
  uint32_t global_it_flag =  1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006566:	3b50      	subs	r3, #80	; 0x50
 8006568:	09db      	lsrs	r3, r3, #7
 800656a:	f003 031f 	and.w	r3, r3, #31
 800656e:	2201      	movs	r2, #1
 8006570:	fa02 f303 	lsl.w	r3, r2, r3
 8006574:	60bb      	str	r3, [r7, #8]

  /* Global Interrupt Flag management *********************************************************************************/
  if (IS_DMA_GLOBAL_ACTIVE_FLAG(p_dma_instance, global_it_flag) == 0U)
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	68da      	ldr	r2, [r3, #12]
 800657a:	68bb      	ldr	r3, [r7, #8]
 800657c:	4013      	ands	r3, r2
 800657e:	2b00      	cmp	r3, #0
 8006580:	f000 8150 	beq.w	8006824 <HAL_DMA_IRQHandler+0x2dc>
  {
    return; /* the global interrupt flag for the current channel is down , nothing to do */
  }

  /* Data Transfer Error Interrupt management *************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_DTE) != 0U))
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	691b      	ldr	r3, [r3, #16]
 800658a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800658e:	2b00      	cmp	r3, #0
 8006590:	d011      	beq.n	80065b6 <HAL_DMA_IRQHandler+0x6e>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DTE) != 0U)
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	695b      	ldr	r3, [r3, #20]
 8006598:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800659c:	2b00      	cmp	r3, #0
 800659e:	d00a      	beq.n	80065b6 <HAL_DMA_IRQHandler+0x6e>
    {
      /* Clear the transfer error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_DTE);
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80065a8:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DTE;
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80065ae:	f043 0201 	orr.w	r2, r3, #1
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }

  /* Update Linked-list Error Interrupt management ********************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_ULE) != 0U))
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	691b      	ldr	r3, [r3, #16]
 80065bc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d011      	beq.n	80065e8 <HAL_DMA_IRQHandler+0xa0>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_ULE) != 0U)
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	695b      	ldr	r3, [r3, #20]
 80065ca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d00a      	beq.n	80065e8 <HAL_DMA_IRQHandler+0xa0>
    {
      /* Clear the update linked-list error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_ULE);
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80065da:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_ULE;
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80065e0:	f043 0202 	orr.w	r2, r3, #2
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }

  /* User Setting Error Interrupt management **************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_USE) != 0U))
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	691b      	ldr	r3, [r3, #16]
 80065ee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d011      	beq.n	800661a <HAL_DMA_IRQHandler+0xd2>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_USE) != 0U)
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	695b      	ldr	r3, [r3, #20]
 80065fc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006600:	2b00      	cmp	r3, #0
 8006602:	d00a      	beq.n	800661a <HAL_DMA_IRQHandler+0xd2>
    {
      /* Clear the user setting error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_USE);
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800660c:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_USE;
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006612:	f043 0204 	orr.w	r2, r3, #4
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }

  /* Trigger Overrun Interrupt management *****************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TO) != 0U))
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	691b      	ldr	r3, [r3, #16]
 8006620:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006624:	2b00      	cmp	r3, #0
 8006626:	d011      	beq.n	800664c <HAL_DMA_IRQHandler+0x104>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TO) != 0U)
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	695b      	ldr	r3, [r3, #20]
 800662e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006632:	2b00      	cmp	r3, #0
 8006634:	d00a      	beq.n	800664c <HAL_DMA_IRQHandler+0x104>
    {
      /* Clear the trigger overrun flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_TO);
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800663e:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TO;
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006644:	f043 0208 	orr.w	r2, r3, #8
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }

  /* Half Transfer Complete Interrupt management **********************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_HT) != 0U))
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	691b      	ldr	r3, [r3, #16]
 8006652:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006656:	2b00      	cmp	r3, #0
 8006658:	d013      	beq.n	8006682 <HAL_DMA_IRQHandler+0x13a>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	695b      	ldr	r3, [r3, #20]
 8006660:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006664:	2b00      	cmp	r3, #0
 8006666:	d00c      	beq.n	8006682 <HAL_DMA_IRQHandler+0x13a>
    {
      /* Clear the half transfer flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_HT);
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006670:	60da      	str	r2, [r3, #12]

      /* Check half transfer complete callback */
      if (hdma->XferHalfCpltCallback != NULL)
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006676:	2b00      	cmp	r3, #0
 8006678:	d003      	beq.n	8006682 <HAL_DMA_IRQHandler+0x13a>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800667e:	6878      	ldr	r0, [r7, #4]
 8006680:	4798      	blx	r3
      }
    }
  }

  /* Suspend Transfer Interrupt management ****************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_SUSP) != 0U))
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	691b      	ldr	r3, [r3, #16]
 8006688:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800668c:	2b00      	cmp	r3, #0
 800668e:	d055      	beq.n	800673c <HAL_DMA_IRQHandler+0x1f4>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_SUSP) != 0U)
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	695b      	ldr	r3, [r3, #20]
 8006696:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800669a:	2b00      	cmp	r3, #0
 800669c:	d04e      	beq.n	800673c <HAL_DMA_IRQHandler+0x1f4>
    {
      /* Clear the block transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_SUSP);
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80066a6:	60da      	str	r2, [r3, #12]

      /* Check DMA channel state */
      if (hdma->State == HAL_DMA_STATE_ABORT)
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80066ae:	b2db      	uxtb	r3, r3
 80066b0:	2b04      	cmp	r3, #4
 80066b2:	d137      	bne.n	8006724 <HAL_DMA_IRQHandler+0x1dc>
      {
        /* Disable the suspend transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_SUSP);
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	695a      	ldr	r2, [r3, #20]
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80066c2:	615a      	str	r2, [r3, #20]

        /* Reset the channel internal state and reset the FIFO */
        hdma->Instance->CCR |= DMA_CCR_RESET;
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	695a      	ldr	r2, [r3, #20]
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	f042 0202 	orr.w	r2, r2, #2
 80066d2:	615a      	str	r2, [r3, #20]

        if ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	695b      	ldr	r3, [r3, #20]
 80066da:	f003 0301 	and.w	r3, r3, #1
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d004      	beq.n	80066ec <HAL_DMA_IRQHandler+0x1a4>
        {
          /* Update the DMA channel state */
          hdma->State = HAL_DMA_STATE_ERROR;
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	2203      	movs	r2, #3
 80066e6:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 80066ea:	e003      	b.n	80066f4 <HAL_DMA_IRQHandler+0x1ac>
        }
        else
        {
          /* Update the DMA channel state */
          hdma->State = HAL_DMA_STATE_READY;
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	2201      	movs	r2, #1
 80066f0:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
        }

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80066f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d003      	beq.n	8006708 <HAL_DMA_IRQHandler+0x1c0>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006704:	2201      	movs	r2, #1
 8006706:	731a      	strb	r2, [r3, #12]
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	2200      	movs	r2, #0
 800670c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        /* Check transfer abort callback */
        if (hdma->XferAbortCallback != NULL)
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006714:	2b00      	cmp	r3, #0
 8006716:	f000 8087 	beq.w	8006828 <HAL_DMA_IRQHandler+0x2e0>
        {
          /* Transfer abort callback */
          hdma->XferAbortCallback(hdma);
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800671e:	6878      	ldr	r0, [r7, #4]
 8006720:	4798      	blx	r3
        }

        return;
 8006722:	e081      	b.n	8006828 <HAL_DMA_IRQHandler+0x2e0>
      }
      else
      {
        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_SUSPEND;
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	2205      	movs	r2, #5
 8006728:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

        /* Check transfer suspend callback */
        if (hdma->XferSuspendCallback != NULL)
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006730:	2b00      	cmp	r3, #0
 8006732:	d003      	beq.n	800673c <HAL_DMA_IRQHandler+0x1f4>
        {
          /* Transfer suspend callback */
          hdma->XferSuspendCallback(hdma);
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006738:	6878      	ldr	r0, [r7, #4]
 800673a:	4798      	blx	r3
      }
    }
  }

  /* Transfer Complete Interrupt management ***************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TC) != 0U))
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	691b      	ldr	r3, [r3, #16]
 8006742:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006746:	2b00      	cmp	r3, #0
 8006748:	d039      	beq.n	80067be <HAL_DMA_IRQHandler+0x276>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	695b      	ldr	r3, [r3, #20]
 8006750:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006754:	2b00      	cmp	r3, #0
 8006756:	d032      	beq.n	80067be <HAL_DMA_IRQHandler+0x276>
    {
      /* Check DMA channel transfer mode */
      if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800675c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006760:	2b00      	cmp	r3, #0
 8006762:	d012      	beq.n	800678a <HAL_DMA_IRQHandler+0x242>
      {
        /* If linked-list transfer */
        if (hdma->Instance->CLLR == 0U)
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800676a:	2b00      	cmp	r3, #0
 800676c:	d116      	bne.n	800679c <HAL_DMA_IRQHandler+0x254>
        {
          if (hdma->Instance->CBR1 == 0U)
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006774:	2b00      	cmp	r3, #0
 8006776:	d111      	bne.n	800679c <HAL_DMA_IRQHandler+0x254>
          {
            /* Update the DMA channel state */
            hdma->State = HAL_DMA_STATE_READY;
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	2201      	movs	r2, #1
 800677c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

            /* Update the linked-list queue state */
            hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006784:	2201      	movs	r2, #1
 8006786:	731a      	strb	r2, [r3, #12]
 8006788:	e008      	b.n	800679c <HAL_DMA_IRQHandler+0x254>
        }
      }
      else
      {
        /* If normal transfer */
        if (hdma->Instance->CBR1 == 0U)
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006790:	2b00      	cmp	r3, #0
 8006792:	d103      	bne.n	800679c <HAL_DMA_IRQHandler+0x254>
        {
          /* Update the DMA channel state */
          hdma->State = HAL_DMA_STATE_READY;
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	2201      	movs	r2, #1
 8006798:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
        }
      }

      /* Clear TC and HT transfer flags */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT));
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	f44f 7240 	mov.w	r2, #768	; 0x300
 80067a4:	60da      	str	r2, [r3, #12]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	2200      	movs	r2, #0
 80067aa:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

      /* Check transfer complete callback */
      if (hdma->XferCpltCallback != NULL)
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d003      	beq.n	80067be <HAL_DMA_IRQHandler+0x276>
      {
        /* Channel Transfer Complete callback */
        hdma->XferCpltCallback(hdma);
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80067ba:	6878      	ldr	r0, [r7, #4]
 80067bc:	4798      	blx	r3
      }
    }
  }

  /* Manage error case ************************************************************************************************/
  if (hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d031      	beq.n	800682a <HAL_DMA_IRQHandler+0x2e2>
  {
    /* Reset the channel internal state and reset the FIFO */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	695a      	ldr	r2, [r3, #20]
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	f042 0202 	orr.w	r2, r2, #2
 80067d4:	615a      	str	r2, [r3, #20]

    if ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	695b      	ldr	r3, [r3, #20]
 80067dc:	f003 0301 	and.w	r3, r3, #1
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d004      	beq.n	80067ee <HAL_DMA_IRQHandler+0x2a6>
    {
      /* Update the DMA channel state */
      hdma->State = HAL_DMA_STATE_ERROR;
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	2203      	movs	r2, #3
 80067e8:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 80067ec:	e003      	b.n	80067f6 <HAL_DMA_IRQHandler+0x2ae>
    }
    else
    {
      /* Update the DMA channel state */
      hdma->State = HAL_DMA_STATE_READY;
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	2201      	movs	r2, #1
 80067f2:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
    }

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80067fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d003      	beq.n	800680a <HAL_DMA_IRQHandler+0x2c2>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006806:	2201      	movs	r2, #1
 8006808:	731a      	strb	r2, [r3, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	2200      	movs	r2, #0
 800680e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

    /* Check transfer error callback */
    if (hdma->XferErrorCallback != NULL)
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006816:	2b00      	cmp	r3, #0
 8006818:	d007      	beq.n	800682a <HAL_DMA_IRQHandler+0x2e2>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800681e:	6878      	ldr	r0, [r7, #4]
 8006820:	4798      	blx	r3
 8006822:	e002      	b.n	800682a <HAL_DMA_IRQHandler+0x2e2>
    return; /* the global interrupt flag for the current channel is down , nothing to do */
 8006824:	bf00      	nop
 8006826:	e000      	b.n	800682a <HAL_DMA_IRQHandler+0x2e2>
        return;
 8006828:	bf00      	nop
    }
  }
}
 800682a:	3710      	adds	r7, #16
 800682c:	46bd      	mov	sp, r7
 800682e:	bd80      	pop	{r7, pc}

08006830 <HAL_DMA_ConfigChannelAttributes>:
  * @param  ChannelAttributes : Specifies the DMA channel secure/privilege attributes.
  *                             This parameter can be a one or a combination of @ref DMA_Channel_Attributes.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_DMA_ConfigChannelAttributes(DMA_HandleTypeDef *const hdma, uint32_t ChannelAttributes)
{
 8006830:	b480      	push	{r7}
 8006832:	b085      	sub	sp, #20
 8006834:	af00      	add	r7, sp, #0
 8006836:	6078      	str	r0, [r7, #4]
 8006838:	6039      	str	r1, [r7, #0]
  DMA_TypeDef *p_dma_instance;
  uint32_t channel_idx;

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	2b00      	cmp	r3, #0
 800683e:	d101      	bne.n	8006844 <HAL_DMA_ConfigChannelAttributes+0x14>
  {
    return HAL_ERROR;
 8006840:	2301      	movs	r3, #1
 8006842:	e02b      	b.n	800689c <HAL_DMA_ConfigChannelAttributes+0x6c>

  /* Check the parameters */
  assert_param(IS_DMA_ATTRIBUTES(ChannelAttributes));

  /* Get DMA instance */
  p_dma_instance = GET_DMA_INSTANCE(hdma);
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800684c:	f023 030f 	bic.w	r3, r3, #15
 8006850:	60fb      	str	r3, [r7, #12]

  /* Get channel index */
  channel_idx = 1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800685a:	3b50      	subs	r3, #80	; 0x50
 800685c:	09db      	lsrs	r3, r3, #7
 800685e:	f003 031f 	and.w	r3, r3, #31
 8006862:	2201      	movs	r2, #1
 8006864:	fa02 f303 	lsl.w	r3, r2, r3
 8006868:	60bb      	str	r3, [r7, #8]

  /* Check DMA channel privilege attribute management */
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) == DMA_CHANNEL_ATTR_PRIV_MASK)
 800686a:	683b      	ldr	r3, [r7, #0]
 800686c:	f003 0310 	and.w	r3, r3, #16
 8006870:	2b00      	cmp	r3, #0
 8006872:	d012      	beq.n	800689a <HAL_DMA_ConfigChannelAttributes+0x6a>
  {
    /* Configure DMA channel privilege attribute */
    if ((ChannelAttributes & DMA_CHANNEL_PRIV) == DMA_CHANNEL_PRIV)
 8006874:	683b      	ldr	r3, [r7, #0]
 8006876:	f003 0311 	and.w	r3, r3, #17
 800687a:	2b11      	cmp	r3, #17
 800687c:	d106      	bne.n	800688c <HAL_DMA_ConfigChannelAttributes+0x5c>
    {
      p_dma_instance->PRIVCFGR |= channel_idx;
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	685a      	ldr	r2, [r3, #4]
 8006882:	68bb      	ldr	r3, [r7, #8]
 8006884:	431a      	orrs	r2, r3
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	605a      	str	r2, [r3, #4]
 800688a:	e006      	b.n	800689a <HAL_DMA_ConfigChannelAttributes+0x6a>
    }
    else
    {
      p_dma_instance->PRIVCFGR &= (~channel_idx);
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	685a      	ldr	r2, [r3, #4]
 8006890:	68bb      	ldr	r3, [r7, #8]
 8006892:	43db      	mvns	r3, r3
 8006894:	401a      	ands	r2, r3
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	605a      	str	r2, [r3, #4]
      hdma->Instance->CTR1 &= (~DMA_CTR1_DSEC);
    }
  }
#endif /* defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  return HAL_OK;
 800689a:	2300      	movs	r3, #0
}
 800689c:	4618      	mov	r0, r3
 800689e:	3714      	adds	r7, #20
 80068a0:	46bd      	mov	sp, r7
 80068a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a6:	4770      	bx	lr

080068a8 <DMA_SetConfig>:
  */
static void DMA_SetConfig(DMA_HandleTypeDef const *const hdma,
                          uint32_t SrcAddress,
                          uint32_t DstAddress,
                          uint32_t SrcDataSize)
{
 80068a8:	b480      	push	{r7}
 80068aa:	b085      	sub	sp, #20
 80068ac:	af00      	add	r7, sp, #0
 80068ae:	60f8      	str	r0, [r7, #12]
 80068b0:	60b9      	str	r1, [r7, #8]
 80068b2:	607a      	str	r2, [r7, #4]
 80068b4:	603b      	str	r3, [r7, #0]
  /* Configure the DMA channel data size */
  MODIFY_REG(hdma->Instance->CBR1, DMA_CBR1_BNDT, (SrcDataSize & DMA_CBR1_BNDT));
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80068bc:	0c1b      	lsrs	r3, r3, #16
 80068be:	041b      	lsls	r3, r3, #16
 80068c0:	683a      	ldr	r2, [r7, #0]
 80068c2:	b291      	uxth	r1, r2
 80068c4:	68fa      	ldr	r2, [r7, #12]
 80068c6:	6812      	ldr	r2, [r2, #0]
 80068c8:	430b      	orrs	r3, r1
 80068ca:	6493      	str	r3, [r2, #72]	; 0x48

  /* Clear all interrupt flags */
  __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	f44f 42fe 	mov.w	r2, #32512	; 0x7f00
 80068d4:	60da      	str	r2, [r3, #12]
                       DMA_FLAG_TO);

  /* Configure DMA channel source address */
  hdma->Instance->CSAR = SrcAddress;
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	68ba      	ldr	r2, [r7, #8]
 80068dc:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure DMA channel destination address */
  hdma->Instance->CDAR = DstAddress;
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	687a      	ldr	r2, [r7, #4]
 80068e4:	651a      	str	r2, [r3, #80]	; 0x50
}
 80068e6:	bf00      	nop
 80068e8:	3714      	adds	r7, #20
 80068ea:	46bd      	mov	sp, r7
 80068ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f0:	4770      	bx	lr
	...

080068f4 <HAL_DMAEx_List_Init>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_Init(DMA_HandleTypeDef *const hdma)
{
 80068f4:	b580      	push	{r7, lr}
 80068f6:	b084      	sub	sp, #16
 80068f8:	af00      	add	r7, sp, #0
 80068fa:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart = HAL_GetTick();
 80068fc:	f7fe ffb8 	bl	8005870 <HAL_GetTick>
 8006900:	60f8      	str	r0, [r7, #12]

  /* Check the DMA channel handle parameter */
  if (hdma == NULL)
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	2b00      	cmp	r3, #0
 8006906:	d101      	bne.n	800690c <HAL_DMAEx_List_Init+0x18>
  {
    return HAL_ERROR;
 8006908:	2301      	movs	r3, #1
 800690a:	e0dc      	b.n	8006ac6 <HAL_DMAEx_List_Init+0x1d2>
  assert_param(IS_DMA_PRIORITY(hdma->InitLinkedList.Priority));
  assert_param(IS_DMA_LINK_STEP_MODE(hdma->InitLinkedList.LinkStepMode));
  assert_param(IS_DMA_TCEM_LINKEDLIST_EVENT_MODE(hdma->InitLinkedList.TransferEventMode));
  assert_param(IS_DMA_LINKEDLIST_MODE(hdma->InitLinkedList.LinkedListMode));
  /* Check DMA channel instance */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	4a6f      	ldr	r2, [pc, #444]	; (8006ad0 <HAL_DMAEx_List_Init+0x1dc>)
 8006912:	4293      	cmp	r3, r2
 8006914:	f000 809f 	beq.w	8006a56 <HAL_DMAEx_List_Init+0x162>
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	4a6d      	ldr	r2, [pc, #436]	; (8006ad4 <HAL_DMAEx_List_Init+0x1e0>)
 800691e:	4293      	cmp	r3, r2
 8006920:	f000 8099 	beq.w	8006a56 <HAL_DMAEx_List_Init+0x162>
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	4a6b      	ldr	r2, [pc, #428]	; (8006ad8 <HAL_DMAEx_List_Init+0x1e4>)
 800692a:	4293      	cmp	r3, r2
 800692c:	f000 8093 	beq.w	8006a56 <HAL_DMAEx_List_Init+0x162>
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	4a69      	ldr	r2, [pc, #420]	; (8006adc <HAL_DMAEx_List_Init+0x1e8>)
 8006936:	4293      	cmp	r3, r2
 8006938:	f000 808d 	beq.w	8006a56 <HAL_DMAEx_List_Init+0x162>
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	4a67      	ldr	r2, [pc, #412]	; (8006ae0 <HAL_DMAEx_List_Init+0x1ec>)
 8006942:	4293      	cmp	r3, r2
 8006944:	f000 8087 	beq.w	8006a56 <HAL_DMAEx_List_Init+0x162>
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	4a65      	ldr	r2, [pc, #404]	; (8006ae4 <HAL_DMAEx_List_Init+0x1f0>)
 800694e:	4293      	cmp	r3, r2
 8006950:	f000 8081 	beq.w	8006a56 <HAL_DMAEx_List_Init+0x162>
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	4a63      	ldr	r2, [pc, #396]	; (8006ae8 <HAL_DMAEx_List_Init+0x1f4>)
 800695a:	4293      	cmp	r3, r2
 800695c:	d07b      	beq.n	8006a56 <HAL_DMAEx_List_Init+0x162>
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	4a62      	ldr	r2, [pc, #392]	; (8006aec <HAL_DMAEx_List_Init+0x1f8>)
 8006964:	4293      	cmp	r3, r2
 8006966:	d076      	beq.n	8006a56 <HAL_DMAEx_List_Init+0x162>
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	4a60      	ldr	r2, [pc, #384]	; (8006af0 <HAL_DMAEx_List_Init+0x1fc>)
 800696e:	4293      	cmp	r3, r2
 8006970:	d071      	beq.n	8006a56 <HAL_DMAEx_List_Init+0x162>
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	4a5f      	ldr	r2, [pc, #380]	; (8006af4 <HAL_DMAEx_List_Init+0x200>)
 8006978:	4293      	cmp	r3, r2
 800697a:	d06c      	beq.n	8006a56 <HAL_DMAEx_List_Init+0x162>
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	4a5d      	ldr	r2, [pc, #372]	; (8006af8 <HAL_DMAEx_List_Init+0x204>)
 8006982:	4293      	cmp	r3, r2
 8006984:	d067      	beq.n	8006a56 <HAL_DMAEx_List_Init+0x162>
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	4a5c      	ldr	r2, [pc, #368]	; (8006afc <HAL_DMAEx_List_Init+0x208>)
 800698c:	4293      	cmp	r3, r2
 800698e:	d062      	beq.n	8006a56 <HAL_DMAEx_List_Init+0x162>
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	4a5a      	ldr	r2, [pc, #360]	; (8006b00 <HAL_DMAEx_List_Init+0x20c>)
 8006996:	4293      	cmp	r3, r2
 8006998:	d05d      	beq.n	8006a56 <HAL_DMAEx_List_Init+0x162>
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	4a59      	ldr	r2, [pc, #356]	; (8006b04 <HAL_DMAEx_List_Init+0x210>)
 80069a0:	4293      	cmp	r3, r2
 80069a2:	d058      	beq.n	8006a56 <HAL_DMAEx_List_Init+0x162>
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	4a57      	ldr	r2, [pc, #348]	; (8006b08 <HAL_DMAEx_List_Init+0x214>)
 80069aa:	4293      	cmp	r3, r2
 80069ac:	d053      	beq.n	8006a56 <HAL_DMAEx_List_Init+0x162>
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	4a56      	ldr	r2, [pc, #344]	; (8006b0c <HAL_DMAEx_List_Init+0x218>)
 80069b4:	4293      	cmp	r3, r2
 80069b6:	d04e      	beq.n	8006a56 <HAL_DMAEx_List_Init+0x162>
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	4a54      	ldr	r2, [pc, #336]	; (8006b10 <HAL_DMAEx_List_Init+0x21c>)
 80069be:	4293      	cmp	r3, r2
 80069c0:	d049      	beq.n	8006a56 <HAL_DMAEx_List_Init+0x162>
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	4a53      	ldr	r2, [pc, #332]	; (8006b14 <HAL_DMAEx_List_Init+0x220>)
 80069c8:	4293      	cmp	r3, r2
 80069ca:	d044      	beq.n	8006a56 <HAL_DMAEx_List_Init+0x162>
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	4a51      	ldr	r2, [pc, #324]	; (8006b18 <HAL_DMAEx_List_Init+0x224>)
 80069d2:	4293      	cmp	r3, r2
 80069d4:	d03f      	beq.n	8006a56 <HAL_DMAEx_List_Init+0x162>
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	4a50      	ldr	r2, [pc, #320]	; (8006b1c <HAL_DMAEx_List_Init+0x228>)
 80069dc:	4293      	cmp	r3, r2
 80069de:	d03a      	beq.n	8006a56 <HAL_DMAEx_List_Init+0x162>
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	4a4e      	ldr	r2, [pc, #312]	; (8006b20 <HAL_DMAEx_List_Init+0x22c>)
 80069e6:	4293      	cmp	r3, r2
 80069e8:	d035      	beq.n	8006a56 <HAL_DMAEx_List_Init+0x162>
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	4a4d      	ldr	r2, [pc, #308]	; (8006b24 <HAL_DMAEx_List_Init+0x230>)
 80069f0:	4293      	cmp	r3, r2
 80069f2:	d030      	beq.n	8006a56 <HAL_DMAEx_List_Init+0x162>
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	4a4b      	ldr	r2, [pc, #300]	; (8006b28 <HAL_DMAEx_List_Init+0x234>)
 80069fa:	4293      	cmp	r3, r2
 80069fc:	d02b      	beq.n	8006a56 <HAL_DMAEx_List_Init+0x162>
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	4a4a      	ldr	r2, [pc, #296]	; (8006b2c <HAL_DMAEx_List_Init+0x238>)
 8006a04:	4293      	cmp	r3, r2
 8006a06:	d026      	beq.n	8006a56 <HAL_DMAEx_List_Init+0x162>
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	4a48      	ldr	r2, [pc, #288]	; (8006b30 <HAL_DMAEx_List_Init+0x23c>)
 8006a0e:	4293      	cmp	r3, r2
 8006a10:	d021      	beq.n	8006a56 <HAL_DMAEx_List_Init+0x162>
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	4a47      	ldr	r2, [pc, #284]	; (8006b34 <HAL_DMAEx_List_Init+0x240>)
 8006a18:	4293      	cmp	r3, r2
 8006a1a:	d01c      	beq.n	8006a56 <HAL_DMAEx_List_Init+0x162>
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	4a45      	ldr	r2, [pc, #276]	; (8006b38 <HAL_DMAEx_List_Init+0x244>)
 8006a22:	4293      	cmp	r3, r2
 8006a24:	d017      	beq.n	8006a56 <HAL_DMAEx_List_Init+0x162>
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	4a44      	ldr	r2, [pc, #272]	; (8006b3c <HAL_DMAEx_List_Init+0x248>)
 8006a2c:	4293      	cmp	r3, r2
 8006a2e:	d012      	beq.n	8006a56 <HAL_DMAEx_List_Init+0x162>
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	4a42      	ldr	r2, [pc, #264]	; (8006b40 <HAL_DMAEx_List_Init+0x24c>)
 8006a36:	4293      	cmp	r3, r2
 8006a38:	d00d      	beq.n	8006a56 <HAL_DMAEx_List_Init+0x162>
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	4a41      	ldr	r2, [pc, #260]	; (8006b44 <HAL_DMAEx_List_Init+0x250>)
 8006a40:	4293      	cmp	r3, r2
 8006a42:	d008      	beq.n	8006a56 <HAL_DMAEx_List_Init+0x162>
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	4a3f      	ldr	r2, [pc, #252]	; (8006b48 <HAL_DMAEx_List_Init+0x254>)
 8006a4a:	4293      	cmp	r3, r2
 8006a4c:	d003      	beq.n	8006a56 <HAL_DMAEx_List_Init+0x162>
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	4a3e      	ldr	r2, [pc, #248]	; (8006b4c <HAL_DMAEx_List_Init+0x258>)
 8006a54:	4293      	cmp	r3, r2
 8006a56:	bf00      	nop
  {
    assert_param(IS_DMA_LINK_ALLOCATED_PORT(hdma->InitLinkedList.LinkAllocatedPort));
  }

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	2200      	movs	r2, #0
 8006a5c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	2202      	movs	r2, #2
 8006a64:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Disable the DMA channel */
  __HAL_DMA_DISABLE(hdma);
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	695a      	ldr	r2, [r3, #20]
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	f042 0206 	orr.w	r2, r2, #6
 8006a76:	615a      	str	r2, [r3, #20]

  /* Check if the DMA channel is effectively disabled */
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 8006a78:	e00f      	b.n	8006a9a <HAL_DMAEx_List_Init+0x1a6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 8006a7a:	f7fe fef9 	bl	8005870 <HAL_GetTick>
 8006a7e:	4602      	mov	r2, r0
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	1ad3      	subs	r3, r2, r3
 8006a84:	2b05      	cmp	r3, #5
 8006a86:	d908      	bls.n	8006a9a <HAL_DMAEx_List_Init+0x1a6>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	2210      	movs	r2, #16
 8006a8c:	659a      	str	r2, [r3, #88]	; 0x58

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_ERROR;
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	2203      	movs	r2, #3
 8006a92:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

      return HAL_ERROR;
 8006a96:	2301      	movs	r3, #1
 8006a98:	e015      	b.n	8006ac6 <HAL_DMAEx_List_Init+0x1d2>
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	695b      	ldr	r3, [r3, #20]
 8006aa0:	f003 0301 	and.w	r3, r3, #1
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d1e8      	bne.n	8006a7a <HAL_DMAEx_List_Init+0x186>
    }
  }

  /* Initialize the DMA channel registers */
  DMA_List_Init(hdma);
 8006aa8:	6878      	ldr	r0, [r7, #4]
 8006aaa:	f000 fa77 	bl	8006f9c <DMA_List_Init>

  /* Update DMA channel operation mode */
  hdma->Mode = hdma->InitLinkedList.LinkedListMode;
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	651a      	str	r2, [r3, #80]	; 0x50

  /* Update the DMA channel error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	2200      	movs	r2, #0
 8006aba:	659a      	str	r2, [r3, #88]	; 0x58

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_READY;
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	2201      	movs	r2, #1
 8006ac0:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8006ac4:	2300      	movs	r3, #0
}
 8006ac6:	4618      	mov	r0, r3
 8006ac8:	3710      	adds	r7, #16
 8006aca:	46bd      	mov	sp, r7
 8006acc:	bd80      	pop	{r7, pc}
 8006ace:	bf00      	nop
 8006ad0:	40020050 	.word	0x40020050
 8006ad4:	50020050 	.word	0x50020050
 8006ad8:	400200d0 	.word	0x400200d0
 8006adc:	500200d0 	.word	0x500200d0
 8006ae0:	40020150 	.word	0x40020150
 8006ae4:	50020150 	.word	0x50020150
 8006ae8:	400201d0 	.word	0x400201d0
 8006aec:	500201d0 	.word	0x500201d0
 8006af0:	40020250 	.word	0x40020250
 8006af4:	50020250 	.word	0x50020250
 8006af8:	400202d0 	.word	0x400202d0
 8006afc:	500202d0 	.word	0x500202d0
 8006b00:	40020350 	.word	0x40020350
 8006b04:	50020350 	.word	0x50020350
 8006b08:	400203d0 	.word	0x400203d0
 8006b0c:	500203d0 	.word	0x500203d0
 8006b10:	40020450 	.word	0x40020450
 8006b14:	50020450 	.word	0x50020450
 8006b18:	400204d0 	.word	0x400204d0
 8006b1c:	500204d0 	.word	0x500204d0
 8006b20:	40020550 	.word	0x40020550
 8006b24:	50020550 	.word	0x50020550
 8006b28:	400205d0 	.word	0x400205d0
 8006b2c:	500205d0 	.word	0x500205d0
 8006b30:	40020650 	.word	0x40020650
 8006b34:	50020650 	.word	0x50020650
 8006b38:	400206d0 	.word	0x400206d0
 8006b3c:	500206d0 	.word	0x500206d0
 8006b40:	40020750 	.word	0x40020750
 8006b44:	50020750 	.word	0x50020750
 8006b48:	400207d0 	.word	0x400207d0
 8006b4c:	500207d0 	.word	0x500207d0

08006b50 <HAL_DMAEx_List_Start_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_Start_IT(DMA_HandleTypeDef *const hdma)
{
 8006b50:	b580      	push	{r7, lr}
 8006b52:	b086      	sub	sp, #24
 8006b54:	af00      	add	r7, sp, #0
 8006b56:	6078      	str	r0, [r7, #4]
  HAL_DMA_StateTypeDef dma_state;
  uint32_t ccr_value;
  uint32_t cllr_mask;

  /* Check the DMA peripheral handle and the linked-list queue parameters */
  if ((hdma == NULL) || (hdma->LinkedListQueue == NULL))
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d003      	beq.n	8006b66 <HAL_DMAEx_List_Start_IT+0x16>
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d101      	bne.n	8006b6a <HAL_DMAEx_List_Start_IT+0x1a>
  {
    return HAL_ERROR;
 8006b66:	2301      	movs	r3, #1
 8006b68:	e082      	b.n	8006c70 <HAL_DMAEx_List_Start_IT+0x120>
  }

  /* Check DMA channel state */
  dma_state = hdma->State;
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8006b70:	75fb      	strb	r3, [r7, #23]
  ccr_value = hdma->Instance->CCR & DMA_CCR_LSM;
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	695b      	ldr	r3, [r3, #20]
 8006b78:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006b7c:	613b      	str	r3, [r7, #16]
  if ((dma_state == HAL_DMA_STATE_READY) || ((dma_state == HAL_DMA_STATE_BUSY) && (ccr_value != 0U)))
 8006b7e:	7dfb      	ldrb	r3, [r7, #23]
 8006b80:	2b01      	cmp	r3, #1
 8006b82:	d005      	beq.n	8006b90 <HAL_DMAEx_List_Start_IT+0x40>
 8006b84:	7dfb      	ldrb	r3, [r7, #23]
 8006b86:	2b02      	cmp	r3, #2
 8006b88:	d16a      	bne.n	8006c60 <HAL_DMAEx_List_Start_IT+0x110>
 8006b8a:	693b      	ldr	r3, [r7, #16]
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d067      	beq.n	8006c60 <HAL_DMAEx_List_Start_IT+0x110>
  {
    /* Check DMA channel state is ready */
    if (hdma->State == HAL_DMA_STATE_READY)
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8006b96:	b2db      	uxtb	r3, r3
 8006b98:	2b01      	cmp	r3, #1
 8006b9a:	d157      	bne.n	8006c4c <HAL_DMAEx_List_Start_IT+0xfc>
    {
      /* Process locked */
      __HAL_LOCK(hdma);
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8006ba2:	2b01      	cmp	r3, #1
 8006ba4:	d101      	bne.n	8006baa <HAL_DMAEx_List_Start_IT+0x5a>
 8006ba6:	2302      	movs	r3, #2
 8006ba8:	e062      	b.n	8006c70 <HAL_DMAEx_List_Start_IT+0x120>
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	2201      	movs	r2, #1
 8006bae:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

      /* Update the DMA channel and the queue states */
      hdma->State                  = HAL_DMA_STATE_BUSY;
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	2202      	movs	r2, #2
 8006bb6:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_BUSY;
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006bbe:	2202      	movs	r2, #2
 8006bc0:	731a      	strb	r2, [r3, #12]

      /* Update the DMA channel and the queue error codes */
      hdma->ErrorCode                  = HAL_DMA_ERROR_NONE;
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	2200      	movs	r2, #0
 8006bc6:	659a      	str	r2, [r3, #88]	; 0x58
      hdma->LinkedListQueue->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006bcc:	2200      	movs	r2, #0
 8006bce:	611a      	str	r2, [r3, #16]

      /* Enable common interrupts: Transfer Complete and Transfer Errors ITs */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_DTE | DMA_IT_ULE | DMA_IT_USE | DMA_IT_TO));
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	695a      	ldr	r2, [r3, #20]
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	f442 42ba 	orr.w	r2, r2, #23808	; 0x5d00
 8006bde:	615a      	str	r2, [r3, #20]

      /* Check half transfer complete callback */
      if (hdma->XferHalfCpltCallback != NULL)
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d007      	beq.n	8006bf8 <HAL_DMAEx_List_Start_IT+0xa8>
      {
        /* If half transfer complete callback is set, enable the corresponding IT */
        __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	695a      	ldr	r2, [r3, #20]
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006bf6:	615a      	str	r2, [r3, #20]
      }

      /* Check suspend callback */
      if (hdma->XferSuspendCallback != NULL)
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d007      	beq.n	8006c10 <HAL_DMAEx_List_Start_IT+0xc0>
      {
        /* If transfer suspend callback is set, enable the corresponding IT */
        __HAL_DMA_ENABLE_IT(hdma, DMA_IT_SUSP);
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	695a      	ldr	r2, [r3, #20]
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006c0e:	615a      	str	r2, [r3, #20]
      }

      /* Get CLLR register mask and offset */
      DMA_List_GetCLLRNodeInfo(hdma->LinkedListQueue->Head, &cllr_mask, NULL);
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	f107 010c 	add.w	r1, r7, #12
 8006c1a:	2200      	movs	r2, #0
 8006c1c:	4618      	mov	r0, r3
 8006c1e:	f000 fcd3 	bl	80075c8 <DMA_List_GetCLLRNodeInfo>

      /* Update DMA registers for linked-list transfer */
      hdma->Instance->CLBAR = ((uint32_t)hdma->LinkedListQueue->Head & DMA_CLBAR_LBA);
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	4619      	mov	r1, r3
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681a      	ldr	r2, [r3, #0]
 8006c2e:	0c0b      	lsrs	r3, r1, #16
 8006c30:	041b      	lsls	r3, r3, #16
 8006c32:	6013      	str	r3, [r2, #0]
      hdma->Instance->CLLR  = ((uint32_t)hdma->LinkedListQueue->Head & DMA_CLLR_LA) | cllr_mask;
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	461a      	mov	r2, r3
 8006c3c:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 8006c40:	4013      	ands	r3, r2
 8006c42:	68f9      	ldr	r1, [r7, #12]
 8006c44:	687a      	ldr	r2, [r7, #4]
 8006c46:	6812      	ldr	r2, [r2, #0]
 8006c48:	430b      	orrs	r3, r1
 8006c4a:	67d3      	str	r3, [r2, #124]	; 0x7c
    }

    /* Enable DMA channel */
    __HAL_DMA_ENABLE(hdma);
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	695a      	ldr	r2, [r3, #20]
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	f042 0201 	orr.w	r2, r2, #1
 8006c5a:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hdma);

    return HAL_ERROR;
  }

  return HAL_OK;
 8006c5c:	2300      	movs	r3, #0
 8006c5e:	e007      	b.n	8006c70 <HAL_DMAEx_List_Start_IT+0x120>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	2240      	movs	r2, #64	; 0x40
 8006c64:	659a      	str	r2, [r3, #88]	; 0x58
    __HAL_UNLOCK(hdma);
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	2200      	movs	r2, #0
 8006c6a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    return HAL_ERROR;
 8006c6e:	2301      	movs	r3, #1
}
 8006c70:	4618      	mov	r0, r3
 8006c72:	3718      	adds	r7, #24
 8006c74:	46bd      	mov	sp, r7
 8006c76:	bd80      	pop	{r7, pc}

08006c78 <HAL_DMAEx_List_BuildNode>:
  *                       configurations.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_BuildNode(DMA_NodeConfTypeDef const *const pNodeConfig,
                                           DMA_NodeTypeDef *const pNode)
{
 8006c78:	b580      	push	{r7, lr}
 8006c7a:	b082      	sub	sp, #8
 8006c7c:	af00      	add	r7, sp, #0
 8006c7e:	6078      	str	r0, [r7, #4]
 8006c80:	6039      	str	r1, [r7, #0]
  /* Check the node configuration and physical node parameters */
  if ((pNodeConfig == NULL) || (pNode == NULL))
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d002      	beq.n	8006c8e <HAL_DMAEx_List_BuildNode+0x16>
 8006c88:	683b      	ldr	r3, [r7, #0]
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d101      	bne.n	8006c92 <HAL_DMAEx_List_BuildNode+0x1a>
  {
    return HAL_ERROR;
 8006c8e:	2301      	movs	r3, #1
 8006c90:	e004      	b.n	8006c9c <HAL_DMAEx_List_BuildNode+0x24>
  assert_param(IS_DMA_ATTRIBUTES(pNodeConfig->SrcSecure));
  assert_param(IS_DMA_ATTRIBUTES(pNodeConfig->DestSecure));
#endif /* defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  /* Build the DMA channel node */
  DMA_List_BuildNode(pNodeConfig, pNode);
 8006c92:	6839      	ldr	r1, [r7, #0]
 8006c94:	6878      	ldr	r0, [r7, #4]
 8006c96:	f000 fad9 	bl	800724c <DMA_List_BuildNode>

  return HAL_OK;
 8006c9a:	2300      	movs	r3, #0
}
 8006c9c:	4618      	mov	r0, r3
 8006c9e:	3708      	adds	r7, #8
 8006ca0:	46bd      	mov	sp, r7
 8006ca2:	bd80      	pop	{r7, pc}

08006ca4 <HAL_DMAEx_List_InsertNode_Tail>:
  *                     configurations.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_InsertNode_Tail(DMA_QListTypeDef *const pQList,
                                                 DMA_NodeTypeDef *const pNewNode)
{
 8006ca4:	b580      	push	{r7, lr}
 8006ca6:	b08a      	sub	sp, #40	; 0x28
 8006ca8:	af00      	add	r7, sp, #0
 8006caa:	6078      	str	r0, [r7, #4]
 8006cac:	6039      	str	r1, [r7, #0]
  uint32_t cllr_mask;
  uint32_t cllr_offset;
  DMA_NodeInQInfoTypeDef node_info;

  /* Check the queue and the new node parameters */
  if ((pQList == NULL) || (pNewNode == NULL))
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d002      	beq.n	8006cba <HAL_DMAEx_List_InsertNode_Tail+0x16>
 8006cb4:	683b      	ldr	r3, [r7, #0]
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d101      	bne.n	8006cbe <HAL_DMAEx_List_InsertNode_Tail+0x1a>
  {
    return HAL_ERROR;
 8006cba:	2301      	movs	r3, #1
 8006cbc:	e066      	b.n	8006d8c <HAL_DMAEx_List_InsertNode_Tail+0xe8>
  }

  /* Check queue type */
  if (pQList->Type == QUEUE_TYPE_DYNAMIC)
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	695b      	ldr	r3, [r3, #20]
 8006cc2:	2b01      	cmp	r3, #1
 8006cc4:	d104      	bne.n	8006cd0 <HAL_DMAEx_List_InsertNode_Tail+0x2c>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	2204      	movs	r2, #4
 8006cca:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8006ccc:	2301      	movs	r3, #1
 8006cce:	e05d      	b.n	8006d8c <HAL_DMAEx_List_InsertNode_Tail+0xe8>
  }

  /* Check nodes base addresses */
  if (DMA_List_CheckNodesBaseAddresses(pQList->Head, pNewNode, NULL) != 0U)
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	2200      	movs	r2, #0
 8006cd6:	6839      	ldr	r1, [r7, #0]
 8006cd8:	4618      	mov	r0, r3
 8006cda:	f000 fc09 	bl	80074f0 <DMA_List_CheckNodesBaseAddresses>
 8006cde:	4603      	mov	r3, r0
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d004      	beq.n	8006cee <HAL_DMAEx_List_InsertNode_Tail+0x4a>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_OUTOFRANGE;
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	2205      	movs	r2, #5
 8006ce8:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8006cea:	2301      	movs	r3, #1
 8006cec:	e04e      	b.n	8006d8c <HAL_DMAEx_List_InsertNode_Tail+0xe8>
  }

  /* Check nodes types compatibility */
  if (DMA_List_CheckNodesTypes(pQList->Head, pNewNode, NULL) != 0U)
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	2200      	movs	r2, #0
 8006cf4:	6839      	ldr	r1, [r7, #0]
 8006cf6:	4618      	mov	r0, r3
 8006cf8:	f000 fc2a 	bl	8007550 <DMA_List_CheckNodesTypes>
 8006cfc:	4603      	mov	r3, r0
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d004      	beq.n	8006d0c <HAL_DMAEx_List_InsertNode_Tail+0x68>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	2204      	movs	r2, #4
 8006d06:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8006d08:	2301      	movs	r3, #1
 8006d0a:	e03f      	b.n	8006d8c <HAL_DMAEx_List_InsertNode_Tail+0xe8>
  }

  /* Empty queue */
  if (pQList->Head == NULL)
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d103      	bne.n	8006d1c <HAL_DMAEx_List_InsertNode_Tail+0x78>
  {
    pQList->Head = pNewNode;
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	683a      	ldr	r2, [r7, #0]
 8006d18:	601a      	str	r2, [r3, #0]
 8006d1a:	e02b      	b.n	8006d74 <HAL_DMAEx_List_InsertNode_Tail+0xd0>
  }
  /* Not empty queue */
  else
  {
    /* Get CLLR register mask and offset */
    DMA_List_GetCLLRNodeInfo(pNewNode, &cllr_mask, &cllr_offset);
 8006d1c:	f107 0220 	add.w	r2, r7, #32
 8006d20:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006d24:	4619      	mov	r1, r3
 8006d26:	6838      	ldr	r0, [r7, #0]
 8006d28:	f000 fc4e 	bl	80075c8 <DMA_List_GetCLLRNodeInfo>

    /* Find node and get its position in selected queue */
    node_info.cllr_offset = cllr_offset;
 8006d2c:	6a3b      	ldr	r3, [r7, #32]
 8006d2e:	60fb      	str	r3, [r7, #12]
    (void)DMA_List_FindNode(pQList, NULL, &node_info);
 8006d30:	f107 030c 	add.w	r3, r7, #12
 8006d34:	461a      	mov	r2, r3
 8006d36:	2100      	movs	r1, #0
 8006d38:	6878      	ldr	r0, [r7, #4]
 8006d3a:	f000 fc75 	bl	8007628 <DMA_List_FindNode>

    /* Check if queue is circular */
    if (pQList->FirstCircularNode != NULL)
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	685b      	ldr	r3, [r3, #4]
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d00b      	beq.n	8006d5e <HAL_DMAEx_List_InsertNode_Tail+0xba>
    {
      pNewNode->LinkRegisters[cllr_offset] = ((uint32_t)pQList->FirstCircularNode & DMA_CLLR_LA) | cllr_mask;
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	685b      	ldr	r3, [r3, #4]
 8006d4a:	461a      	mov	r2, r3
 8006d4c:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 8006d50:	4013      	ands	r3, r2
 8006d52:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006d54:	6a3a      	ldr	r2, [r7, #32]
 8006d56:	4319      	orrs	r1, r3
 8006d58:	683b      	ldr	r3, [r7, #0]
 8006d5a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    }

    ((DMA_NodeTypeDef *)node_info.currentnode_addr)->LinkRegisters[cllr_offset] =
      ((uint32_t)pNewNode & DMA_CLLR_LA) | cllr_mask;
 8006d5e:	683a      	ldr	r2, [r7, #0]
 8006d60:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 8006d64:	4013      	ands	r3, r2
 8006d66:	6a79      	ldr	r1, [r7, #36]	; 0x24
    ((DMA_NodeTypeDef *)node_info.currentnode_addr)->LinkRegisters[cllr_offset] =
 8006d68:	69ba      	ldr	r2, [r7, #24]
 8006d6a:	4610      	mov	r0, r2
 8006d6c:	6a3a      	ldr	r2, [r7, #32]
      ((uint32_t)pNewNode & DMA_CLLR_LA) | cllr_mask;
 8006d6e:	430b      	orrs	r3, r1
    ((DMA_NodeTypeDef *)node_info.currentnode_addr)->LinkRegisters[cllr_offset] =
 8006d70:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
  }

  /* Increment queue node number */
  pQList->NodeNumber++;
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	689b      	ldr	r3, [r3, #8]
 8006d78:	1c5a      	adds	r2, r3, #1
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	609a      	str	r2, [r3, #8]

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	2200      	movs	r2, #0
 8006d82:	611a      	str	r2, [r3, #16]

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_READY;
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	2201      	movs	r2, #1
 8006d88:	731a      	strb	r2, [r3, #12]

  /* Prevent MISRA-C2012-Rule-2.2_b */
  UNUSED(node_info);

  return HAL_OK;
 8006d8a:	2300      	movs	r3, #0
}
 8006d8c:	4618      	mov	r0, r3
 8006d8e:	3728      	adds	r7, #40	; 0x28
 8006d90:	46bd      	mov	sp, r7
 8006d92:	bd80      	pop	{r7, pc}

08006d94 <HAL_DMAEx_List_SetCircularModeConfig>:
  *                              registers configurations.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_SetCircularModeConfig(DMA_QListTypeDef *const pQList,
                                                       DMA_NodeTypeDef *const pFirstCircularNode)
{
 8006d94:	b580      	push	{r7, lr}
 8006d96:	b08a      	sub	sp, #40	; 0x28
 8006d98:	af00      	add	r7, sp, #0
 8006d9a:	6078      	str	r0, [r7, #4]
 8006d9c:	6039      	str	r1, [r7, #0]
  uint32_t cllr_mask;
  uint32_t cllr_offset;
  DMA_NodeInQInfoTypeDef node_info;

  /* Check the queue and the first circular node parameters */
  if ((pQList == NULL) || (pFirstCircularNode == NULL))
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d002      	beq.n	8006daa <HAL_DMAEx_List_SetCircularModeConfig+0x16>
 8006da4:	683b      	ldr	r3, [r7, #0]
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d101      	bne.n	8006dae <HAL_DMAEx_List_SetCircularModeConfig+0x1a>
  {
    return HAL_ERROR;
 8006daa:	2301      	movs	r3, #1
 8006dac:	e05c      	b.n	8006e68 <HAL_DMAEx_List_SetCircularModeConfig+0xd4>
  }

  /* Check the queue */
  if (pQList->Head == NULL)
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d104      	bne.n	8006dc0 <HAL_DMAEx_List_SetCircularModeConfig+0x2c>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_EMPTY;
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	2202      	movs	r2, #2
 8006dba:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8006dbc:	2301      	movs	r3, #1
 8006dbe:	e053      	b.n	8006e68 <HAL_DMAEx_List_SetCircularModeConfig+0xd4>
  }

  /* Check queue circular mode */
  if (pQList->FirstCircularNode != NULL)
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	685b      	ldr	r3, [r3, #4]
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d00b      	beq.n	8006de0 <HAL_DMAEx_List_SetCircularModeConfig+0x4c>
  {
    if (pQList->FirstCircularNode == pFirstCircularNode)
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	685b      	ldr	r3, [r3, #4]
 8006dcc:	683a      	ldr	r2, [r7, #0]
 8006dce:	429a      	cmp	r2, r3
 8006dd0:	d101      	bne.n	8006dd6 <HAL_DMAEx_List_SetCircularModeConfig+0x42>
    {
      return HAL_OK;
 8006dd2:	2300      	movs	r3, #0
 8006dd4:	e048      	b.n	8006e68 <HAL_DMAEx_List_SetCircularModeConfig+0xd4>
    }
    else
    {
      /* Update the queue error code */
      pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	2204      	movs	r2, #4
 8006dda:	611a      	str	r2, [r3, #16]

      return HAL_ERROR;
 8006ddc:	2301      	movs	r3, #1
 8006dde:	e043      	b.n	8006e68 <HAL_DMAEx_List_SetCircularModeConfig+0xd4>
    }
  }

  /* Check queue type */
  if (pQList->Type == QUEUE_TYPE_DYNAMIC)
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	695b      	ldr	r3, [r3, #20]
 8006de4:	2b01      	cmp	r3, #1
 8006de6:	d104      	bne.n	8006df2 <HAL_DMAEx_List_SetCircularModeConfig+0x5e>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	2204      	movs	r2, #4
 8006dec:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8006dee:	2301      	movs	r3, #1
 8006df0:	e03a      	b.n	8006e68 <HAL_DMAEx_List_SetCircularModeConfig+0xd4>
  }

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_BUSY;
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	2202      	movs	r2, #2
 8006df6:	731a      	strb	r2, [r3, #12]

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	2200      	movs	r2, #0
 8006dfc:	611a      	str	r2, [r3, #16]

  /* Get CLLR register mask and offset */
  DMA_List_GetCLLRNodeInfo(pFirstCircularNode, &cllr_mask, &cllr_offset);
 8006dfe:	f107 0220 	add.w	r2, r7, #32
 8006e02:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006e06:	4619      	mov	r1, r3
 8006e08:	6838      	ldr	r0, [r7, #0]
 8006e0a:	f000 fbdd 	bl	80075c8 <DMA_List_GetCLLRNodeInfo>

  /* Find the first circular node and get its position in selected queue */
  node_info.cllr_offset = cllr_offset;
 8006e0e:	6a3b      	ldr	r3, [r7, #32]
 8006e10:	60fb      	str	r3, [r7, #12]
  if (DMA_List_FindNode(pQList, pFirstCircularNode, &node_info) == 0U)
 8006e12:	f107 030c 	add.w	r3, r7, #12
 8006e16:	461a      	mov	r2, r3
 8006e18:	6839      	ldr	r1, [r7, #0]
 8006e1a:	6878      	ldr	r0, [r7, #4]
 8006e1c:	f000 fc04 	bl	8007628 <DMA_List_FindNode>
 8006e20:	4603      	mov	r3, r0
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d11c      	bne.n	8006e60 <HAL_DMAEx_List_SetCircularModeConfig+0xcc>
  {
    /* Find the last queue node and get its position in selected queue */
    (void)DMA_List_FindNode(pQList, NULL, &node_info);
 8006e26:	f107 030c 	add.w	r3, r7, #12
 8006e2a:	461a      	mov	r2, r3
 8006e2c:	2100      	movs	r1, #0
 8006e2e:	6878      	ldr	r0, [r7, #4]
 8006e30:	f000 fbfa 	bl	8007628 <DMA_List_FindNode>

    /* Set circular mode */
    ((DMA_NodeTypeDef *)(node_info.currentnode_addr))->LinkRegisters[cllr_offset] =
      ((uint32_t)pFirstCircularNode & DMA_CLLR_LA) | cllr_mask;
 8006e34:	683a      	ldr	r2, [r7, #0]
 8006e36:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 8006e3a:	4013      	ands	r3, r2
 8006e3c:	6a79      	ldr	r1, [r7, #36]	; 0x24
    ((DMA_NodeTypeDef *)(node_info.currentnode_addr))->LinkRegisters[cllr_offset] =
 8006e3e:	69ba      	ldr	r2, [r7, #24]
 8006e40:	4610      	mov	r0, r2
 8006e42:	6a3a      	ldr	r2, [r7, #32]
      ((uint32_t)pFirstCircularNode & DMA_CLLR_LA) | cllr_mask;
 8006e44:	430b      	orrs	r3, r1
    ((DMA_NodeTypeDef *)(node_info.currentnode_addr))->LinkRegisters[cllr_offset] =
 8006e46:	f840 3022 	str.w	r3, [r0, r2, lsl #2]

    /* Update first circular node in queue */
    pQList->FirstCircularNode = pFirstCircularNode;
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	683a      	ldr	r2, [r7, #0]
 8006e4e:	605a      	str	r2, [r3, #4]

    return HAL_ERROR;
  }

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	2200      	movs	r2, #0
 8006e54:	611a      	str	r2, [r3, #16]

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_READY;
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	2201      	movs	r2, #1
 8006e5a:	731a      	strb	r2, [r3, #12]

  /* Prevent MISRA-C2012-Rule-2.2_b */
  UNUSED(node_info);

  return HAL_OK;
 8006e5c:	2300      	movs	r3, #0
 8006e5e:	e003      	b.n	8006e68 <HAL_DMAEx_List_SetCircularModeConfig+0xd4>
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NOTFOUND;
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	2206      	movs	r2, #6
 8006e64:	611a      	str	r2, [r3, #16]
    return HAL_ERROR;
 8006e66:	2301      	movs	r3, #1
}
 8006e68:	4618      	mov	r0, r3
 8006e6a:	3728      	adds	r7, #40	; 0x28
 8006e6c:	46bd      	mov	sp, r7
 8006e6e:	bd80      	pop	{r7, pc}

08006e70 <HAL_DMAEx_List_LinkQ>:
  * @param  pQList : Pointer to a DMA_QListTypeDef structure that contains queue information.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_LinkQ(DMA_HandleTypeDef *const hdma,
                                       DMA_QListTypeDef *const pQList)
{
 8006e70:	b480      	push	{r7}
 8006e72:	b085      	sub	sp, #20
 8006e74:	af00      	add	r7, sp, #0
 8006e76:	6078      	str	r0, [r7, #4]
 8006e78:	6039      	str	r1, [r7, #0]
  HAL_DMA_StateTypeDef state;

  /* Check the DMA channel handle and the queue parameters */
  if ((hdma == NULL) || (pQList == NULL))
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d002      	beq.n	8006e86 <HAL_DMAEx_List_LinkQ+0x16>
 8006e80:	683b      	ldr	r3, [r7, #0]
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d101      	bne.n	8006e8a <HAL_DMAEx_List_LinkQ+0x1a>
  {
    return HAL_ERROR;
 8006e86:	2301      	movs	r3, #1
 8006e88:	e072      	b.n	8006f70 <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Get DMA state */
  state = hdma->State;
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8006e90:	73fb      	strb	r3, [r7, #15]

  /* Check DMA channel state */
  if ((hdma->State == HAL_DMA_STATE_BUSY) || (state == HAL_DMA_STATE_SUSPEND))
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8006e98:	b2db      	uxtb	r3, r3
 8006e9a:	2b02      	cmp	r3, #2
 8006e9c:	d002      	beq.n	8006ea4 <HAL_DMAEx_List_LinkQ+0x34>
 8006e9e:	7bfb      	ldrb	r3, [r7, #15]
 8006ea0:	2b05      	cmp	r3, #5
 8006ea2:	d108      	bne.n	8006eb6 <HAL_DMAEx_List_LinkQ+0x46>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	2240      	movs	r2, #64	; 0x40
 8006ea8:	659a      	str	r2, [r3, #88]	; 0x58

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	2200      	movs	r2, #0
 8006eae:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

    return HAL_ERROR;
 8006eb2:	2301      	movs	r3, #1
 8006eb4:	e05c      	b.n	8006f70 <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Check queue state */
  if (pQList->State == HAL_DMA_QUEUE_STATE_BUSY)
 8006eb6:	683b      	ldr	r3, [r7, #0]
 8006eb8:	7b1b      	ldrb	r3, [r3, #12]
 8006eba:	b2db      	uxtb	r3, r3
 8006ebc:	2b02      	cmp	r3, #2
 8006ebe:	d104      	bne.n	8006eca <HAL_DMAEx_List_LinkQ+0x5a>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_BUSY;
 8006ec0:	683b      	ldr	r3, [r7, #0]
 8006ec2:	2201      	movs	r2, #1
 8006ec4:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8006ec6:	2301      	movs	r3, #1
 8006ec8:	e052      	b.n	8006f70 <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Check linearity compatibility */
  if ((IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) == 0U) &&
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	4a2b      	ldr	r2, [pc, #172]	; (8006f7c <HAL_DMAEx_List_LinkQ+0x10c>)
 8006ed0:	4293      	cmp	r3, r2
 8006ed2:	d022      	beq.n	8006f1a <HAL_DMAEx_List_LinkQ+0xaa>
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	4a29      	ldr	r2, [pc, #164]	; (8006f80 <HAL_DMAEx_List_LinkQ+0x110>)
 8006eda:	4293      	cmp	r3, r2
 8006edc:	d01d      	beq.n	8006f1a <HAL_DMAEx_List_LinkQ+0xaa>
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	4a28      	ldr	r2, [pc, #160]	; (8006f84 <HAL_DMAEx_List_LinkQ+0x114>)
 8006ee4:	4293      	cmp	r3, r2
 8006ee6:	d018      	beq.n	8006f1a <HAL_DMAEx_List_LinkQ+0xaa>
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	4a26      	ldr	r2, [pc, #152]	; (8006f88 <HAL_DMAEx_List_LinkQ+0x118>)
 8006eee:	4293      	cmp	r3, r2
 8006ef0:	d013      	beq.n	8006f1a <HAL_DMAEx_List_LinkQ+0xaa>
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	4a25      	ldr	r2, [pc, #148]	; (8006f8c <HAL_DMAEx_List_LinkQ+0x11c>)
 8006ef8:	4293      	cmp	r3, r2
 8006efa:	d00e      	beq.n	8006f1a <HAL_DMAEx_List_LinkQ+0xaa>
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	4a23      	ldr	r2, [pc, #140]	; (8006f90 <HAL_DMAEx_List_LinkQ+0x120>)
 8006f02:	4293      	cmp	r3, r2
 8006f04:	d009      	beq.n	8006f1a <HAL_DMAEx_List_LinkQ+0xaa>
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	4a22      	ldr	r2, [pc, #136]	; (8006f94 <HAL_DMAEx_List_LinkQ+0x124>)
 8006f0c:	4293      	cmp	r3, r2
 8006f0e:	d004      	beq.n	8006f1a <HAL_DMAEx_List_LinkQ+0xaa>
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	4a20      	ldr	r2, [pc, #128]	; (8006f98 <HAL_DMAEx_List_LinkQ+0x128>)
 8006f16:	4293      	cmp	r3, r2
 8006f18:	d101      	bne.n	8006f1e <HAL_DMAEx_List_LinkQ+0xae>
 8006f1a:	2301      	movs	r3, #1
 8006f1c:	e000      	b.n	8006f20 <HAL_DMAEx_List_LinkQ+0xb0>
 8006f1e:	2300      	movs	r3, #0
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d10b      	bne.n	8006f3c <HAL_DMAEx_List_LinkQ+0xcc>
      ((pQList->Head->NodeInfo & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR))
 8006f24:	683b      	ldr	r3, [r7, #0]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	6a1b      	ldr	r3, [r3, #32]
 8006f2a:	f003 0302 	and.w	r3, r3, #2
  if ((IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) == 0U) &&
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d004      	beq.n	8006f3c <HAL_DMAEx_List_LinkQ+0xcc>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_UNSUPPORTED;
 8006f32:	683b      	ldr	r3, [r7, #0]
 8006f34:	2203      	movs	r2, #3
 8006f36:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8006f38:	2301      	movs	r3, #1
 8006f3a:	e019      	b.n	8006f70 <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Check circularity compatibility */
  if (hdma->Mode == DMA_LINKEDLIST_CIRCULAR)
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f40:	2b81      	cmp	r3, #129	; 0x81
 8006f42:	d108      	bne.n	8006f56 <HAL_DMAEx_List_LinkQ+0xe6>
  {
    /* Check first circular node */
    if (pQList->FirstCircularNode == NULL)
 8006f44:	683b      	ldr	r3, [r7, #0]
 8006f46:	685b      	ldr	r3, [r3, #4]
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d10d      	bne.n	8006f68 <HAL_DMAEx_List_LinkQ+0xf8>
    {
      /* Update the queue error code */
      pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8006f4c:	683b      	ldr	r3, [r7, #0]
 8006f4e:	2204      	movs	r2, #4
 8006f50:	611a      	str	r2, [r3, #16]

      return HAL_ERROR;
 8006f52:	2301      	movs	r3, #1
 8006f54:	e00c      	b.n	8006f70 <HAL_DMAEx_List_LinkQ+0x100>
    }
  }
  else
  {
    /* Check first circular node */
    if (pQList->FirstCircularNode != NULL)
 8006f56:	683b      	ldr	r3, [r7, #0]
 8006f58:	685b      	ldr	r3, [r3, #4]
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d004      	beq.n	8006f68 <HAL_DMAEx_List_LinkQ+0xf8>
    {
      /* Update the queue error code */
      pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8006f5e:	683b      	ldr	r3, [r7, #0]
 8006f60:	2204      	movs	r2, #4
 8006f62:	611a      	str	r2, [r3, #16]

      return HAL_ERROR;
 8006f64:	2301      	movs	r3, #1
 8006f66:	e003      	b.n	8006f70 <HAL_DMAEx_List_LinkQ+0x100>
    }
  }

  /* Register queue to DMA handle */
  hdma->LinkedListQueue = pQList;
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	683a      	ldr	r2, [r7, #0]
 8006f6c:	675a      	str	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8006f6e:	2300      	movs	r3, #0
}
 8006f70:	4618      	mov	r0, r3
 8006f72:	3714      	adds	r7, #20
 8006f74:	46bd      	mov	sp, r7
 8006f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f7a:	4770      	bx	lr
 8006f7c:	40020650 	.word	0x40020650
 8006f80:	50020650 	.word	0x50020650
 8006f84:	400206d0 	.word	0x400206d0
 8006f88:	500206d0 	.word	0x500206d0
 8006f8c:	40020750 	.word	0x40020750
 8006f90:	50020750 	.word	0x50020750
 8006f94:	400207d0 	.word	0x400207d0
 8006f98:	500207d0 	.word	0x500207d0

08006f9c <DMA_List_Init>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
static void DMA_List_Init(DMA_HandleTypeDef const *const hdma)
{
 8006f9c:	b480      	push	{r7}
 8006f9e:	b085      	sub	sp, #20
 8006fa0:	af00      	add	r7, sp, #0
 8006fa2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Prepare DMA Channel Control Register (CCR) value */
  tmpreg = hdma->InitLinkedList.Priority | hdma->InitLinkedList.LinkStepMode;
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006fac:	4313      	orrs	r3, r2
 8006fae:	60fb      	str	r3, [r7, #12]

  /* Check DMA channel instance */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	4a85      	ldr	r2, [pc, #532]	; (80071cc <DMA_List_Init+0x230>)
 8006fb6:	4293      	cmp	r3, r2
 8006fb8:	f000 80a0 	beq.w	80070fc <DMA_List_Init+0x160>
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	4a83      	ldr	r2, [pc, #524]	; (80071d0 <DMA_List_Init+0x234>)
 8006fc2:	4293      	cmp	r3, r2
 8006fc4:	f000 809a 	beq.w	80070fc <DMA_List_Init+0x160>
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	4a81      	ldr	r2, [pc, #516]	; (80071d4 <DMA_List_Init+0x238>)
 8006fce:	4293      	cmp	r3, r2
 8006fd0:	f000 8094 	beq.w	80070fc <DMA_List_Init+0x160>
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	4a7f      	ldr	r2, [pc, #508]	; (80071d8 <DMA_List_Init+0x23c>)
 8006fda:	4293      	cmp	r3, r2
 8006fdc:	f000 808e 	beq.w	80070fc <DMA_List_Init+0x160>
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	4a7d      	ldr	r2, [pc, #500]	; (80071dc <DMA_List_Init+0x240>)
 8006fe6:	4293      	cmp	r3, r2
 8006fe8:	f000 8088 	beq.w	80070fc <DMA_List_Init+0x160>
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	4a7b      	ldr	r2, [pc, #492]	; (80071e0 <DMA_List_Init+0x244>)
 8006ff2:	4293      	cmp	r3, r2
 8006ff4:	f000 8082 	beq.w	80070fc <DMA_List_Init+0x160>
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	4a79      	ldr	r2, [pc, #484]	; (80071e4 <DMA_List_Init+0x248>)
 8006ffe:	4293      	cmp	r3, r2
 8007000:	d07c      	beq.n	80070fc <DMA_List_Init+0x160>
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	4a78      	ldr	r2, [pc, #480]	; (80071e8 <DMA_List_Init+0x24c>)
 8007008:	4293      	cmp	r3, r2
 800700a:	d077      	beq.n	80070fc <DMA_List_Init+0x160>
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	4a76      	ldr	r2, [pc, #472]	; (80071ec <DMA_List_Init+0x250>)
 8007012:	4293      	cmp	r3, r2
 8007014:	d072      	beq.n	80070fc <DMA_List_Init+0x160>
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	4a75      	ldr	r2, [pc, #468]	; (80071f0 <DMA_List_Init+0x254>)
 800701c:	4293      	cmp	r3, r2
 800701e:	d06d      	beq.n	80070fc <DMA_List_Init+0x160>
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	4a73      	ldr	r2, [pc, #460]	; (80071f4 <DMA_List_Init+0x258>)
 8007026:	4293      	cmp	r3, r2
 8007028:	d068      	beq.n	80070fc <DMA_List_Init+0x160>
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	4a72      	ldr	r2, [pc, #456]	; (80071f8 <DMA_List_Init+0x25c>)
 8007030:	4293      	cmp	r3, r2
 8007032:	d063      	beq.n	80070fc <DMA_List_Init+0x160>
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	4a70      	ldr	r2, [pc, #448]	; (80071fc <DMA_List_Init+0x260>)
 800703a:	4293      	cmp	r3, r2
 800703c:	d05e      	beq.n	80070fc <DMA_List_Init+0x160>
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	4a6f      	ldr	r2, [pc, #444]	; (8007200 <DMA_List_Init+0x264>)
 8007044:	4293      	cmp	r3, r2
 8007046:	d059      	beq.n	80070fc <DMA_List_Init+0x160>
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	4a6d      	ldr	r2, [pc, #436]	; (8007204 <DMA_List_Init+0x268>)
 800704e:	4293      	cmp	r3, r2
 8007050:	d054      	beq.n	80070fc <DMA_List_Init+0x160>
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	4a6c      	ldr	r2, [pc, #432]	; (8007208 <DMA_List_Init+0x26c>)
 8007058:	4293      	cmp	r3, r2
 800705a:	d04f      	beq.n	80070fc <DMA_List_Init+0x160>
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	4a6a      	ldr	r2, [pc, #424]	; (800720c <DMA_List_Init+0x270>)
 8007062:	4293      	cmp	r3, r2
 8007064:	d04a      	beq.n	80070fc <DMA_List_Init+0x160>
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	4a69      	ldr	r2, [pc, #420]	; (8007210 <DMA_List_Init+0x274>)
 800706c:	4293      	cmp	r3, r2
 800706e:	d045      	beq.n	80070fc <DMA_List_Init+0x160>
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	4a67      	ldr	r2, [pc, #412]	; (8007214 <DMA_List_Init+0x278>)
 8007076:	4293      	cmp	r3, r2
 8007078:	d040      	beq.n	80070fc <DMA_List_Init+0x160>
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	4a66      	ldr	r2, [pc, #408]	; (8007218 <DMA_List_Init+0x27c>)
 8007080:	4293      	cmp	r3, r2
 8007082:	d03b      	beq.n	80070fc <DMA_List_Init+0x160>
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	4a64      	ldr	r2, [pc, #400]	; (800721c <DMA_List_Init+0x280>)
 800708a:	4293      	cmp	r3, r2
 800708c:	d036      	beq.n	80070fc <DMA_List_Init+0x160>
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	4a63      	ldr	r2, [pc, #396]	; (8007220 <DMA_List_Init+0x284>)
 8007094:	4293      	cmp	r3, r2
 8007096:	d031      	beq.n	80070fc <DMA_List_Init+0x160>
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	4a61      	ldr	r2, [pc, #388]	; (8007224 <DMA_List_Init+0x288>)
 800709e:	4293      	cmp	r3, r2
 80070a0:	d02c      	beq.n	80070fc <DMA_List_Init+0x160>
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	4a60      	ldr	r2, [pc, #384]	; (8007228 <DMA_List_Init+0x28c>)
 80070a8:	4293      	cmp	r3, r2
 80070aa:	d027      	beq.n	80070fc <DMA_List_Init+0x160>
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	4a5e      	ldr	r2, [pc, #376]	; (800722c <DMA_List_Init+0x290>)
 80070b2:	4293      	cmp	r3, r2
 80070b4:	d022      	beq.n	80070fc <DMA_List_Init+0x160>
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	4a5d      	ldr	r2, [pc, #372]	; (8007230 <DMA_List_Init+0x294>)
 80070bc:	4293      	cmp	r3, r2
 80070be:	d01d      	beq.n	80070fc <DMA_List_Init+0x160>
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	4a5b      	ldr	r2, [pc, #364]	; (8007234 <DMA_List_Init+0x298>)
 80070c6:	4293      	cmp	r3, r2
 80070c8:	d018      	beq.n	80070fc <DMA_List_Init+0x160>
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	4a5a      	ldr	r2, [pc, #360]	; (8007238 <DMA_List_Init+0x29c>)
 80070d0:	4293      	cmp	r3, r2
 80070d2:	d013      	beq.n	80070fc <DMA_List_Init+0x160>
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	4a58      	ldr	r2, [pc, #352]	; (800723c <DMA_List_Init+0x2a0>)
 80070da:	4293      	cmp	r3, r2
 80070dc:	d00e      	beq.n	80070fc <DMA_List_Init+0x160>
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	4a57      	ldr	r2, [pc, #348]	; (8007240 <DMA_List_Init+0x2a4>)
 80070e4:	4293      	cmp	r3, r2
 80070e6:	d009      	beq.n	80070fc <DMA_List_Init+0x160>
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	4a55      	ldr	r2, [pc, #340]	; (8007244 <DMA_List_Init+0x2a8>)
 80070ee:	4293      	cmp	r3, r2
 80070f0:	d004      	beq.n	80070fc <DMA_List_Init+0x160>
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	4a54      	ldr	r2, [pc, #336]	; (8007248 <DMA_List_Init+0x2ac>)
 80070f8:	4293      	cmp	r3, r2
 80070fa:	d101      	bne.n	8007100 <DMA_List_Init+0x164>
 80070fc:	2301      	movs	r3, #1
 80070fe:	e000      	b.n	8007102 <DMA_List_Init+0x166>
 8007100:	2300      	movs	r3, #0
 8007102:	2b00      	cmp	r3, #0
 8007104:	d004      	beq.n	8007110 <DMA_List_Init+0x174>
  {
    tmpreg |= hdma->InitLinkedList.LinkAllocatedPort;
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800710a:	68fa      	ldr	r2, [r7, #12]
 800710c:	4313      	orrs	r3, r2
 800710e:	60fb      	str	r3, [r7, #12]
  }

  /* Write DMA Channel Control Register (CCR) */
  MODIFY_REG(hdma->Instance->CCR, DMA_CCR_PRIO | DMA_CCR_LAP | DMA_CCR_LSM, tmpreg);
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	695b      	ldr	r3, [r3, #20]
 8007116:	f423 0143 	bic.w	r1, r3, #12779520	; 0xc30000
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	68fa      	ldr	r2, [r7, #12]
 8007120:	430a      	orrs	r2, r1
 8007122:	615a      	str	r2, [r3, #20]

  /* Write DMA Channel Control Register (CTR1) */
  WRITE_REG(hdma->Instance->CTR1, 0U);
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	2200      	movs	r2, #0
 800712a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write DMA Channel Control Register (CTR2) */
  WRITE_REG(hdma->Instance->CTR2, hdma->InitLinkedList.TransferEventMode);
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	687a      	ldr	r2, [r7, #4]
 8007132:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8007134:	645a      	str	r2, [r3, #68]	; 0x44

  /* Write DMA Channel Control Register (CBR1) */
  WRITE_REG(hdma->Instance->CBR1, 0U);
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	2200      	movs	r2, #0
 800713c:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write DMA Channel Control Register (CSAR) */
  WRITE_REG(hdma->Instance->CSAR, 0U);
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	2200      	movs	r2, #0
 8007144:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write DMA Channel Control Register (CDAR) */
  WRITE_REG(hdma->Instance->CDAR, 0U);
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	2200      	movs	r2, #0
 800714c:	651a      	str	r2, [r3, #80]	; 0x50

  /* If 2D Addressing is supported by current channel */
  if (IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) != 0U)
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	4a36      	ldr	r2, [pc, #216]	; (800722c <DMA_List_Init+0x290>)
 8007154:	4293      	cmp	r3, r2
 8007156:	d022      	beq.n	800719e <DMA_List_Init+0x202>
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	4a34      	ldr	r2, [pc, #208]	; (8007230 <DMA_List_Init+0x294>)
 800715e:	4293      	cmp	r3, r2
 8007160:	d01d      	beq.n	800719e <DMA_List_Init+0x202>
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	4a33      	ldr	r2, [pc, #204]	; (8007234 <DMA_List_Init+0x298>)
 8007168:	4293      	cmp	r3, r2
 800716a:	d018      	beq.n	800719e <DMA_List_Init+0x202>
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	4a31      	ldr	r2, [pc, #196]	; (8007238 <DMA_List_Init+0x29c>)
 8007172:	4293      	cmp	r3, r2
 8007174:	d013      	beq.n	800719e <DMA_List_Init+0x202>
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	4a30      	ldr	r2, [pc, #192]	; (800723c <DMA_List_Init+0x2a0>)
 800717c:	4293      	cmp	r3, r2
 800717e:	d00e      	beq.n	800719e <DMA_List_Init+0x202>
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	4a2e      	ldr	r2, [pc, #184]	; (8007240 <DMA_List_Init+0x2a4>)
 8007186:	4293      	cmp	r3, r2
 8007188:	d009      	beq.n	800719e <DMA_List_Init+0x202>
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	4a2d      	ldr	r2, [pc, #180]	; (8007244 <DMA_List_Init+0x2a8>)
 8007190:	4293      	cmp	r3, r2
 8007192:	d004      	beq.n	800719e <DMA_List_Init+0x202>
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	4a2b      	ldr	r2, [pc, #172]	; (8007248 <DMA_List_Init+0x2ac>)
 800719a:	4293      	cmp	r3, r2
 800719c:	d101      	bne.n	80071a2 <DMA_List_Init+0x206>
 800719e:	2301      	movs	r3, #1
 80071a0:	e000      	b.n	80071a4 <DMA_List_Init+0x208>
 80071a2:	2300      	movs	r3, #0
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d007      	beq.n	80071b8 <DMA_List_Init+0x21c>
  {
    /* Write DMA Channel Control Register (CTR3) */
    WRITE_REG(hdma->Instance->CTR3, 0U);
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	2200      	movs	r2, #0
 80071ae:	655a      	str	r2, [r3, #84]	; 0x54

    /* Write DMA Channel Control Register (CBR2) */
    WRITE_REG(hdma->Instance->CBR2, 0U);
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	2200      	movs	r2, #0
 80071b6:	659a      	str	r2, [r3, #88]	; 0x58
  }

  /* Write DMA Channel linked-list address register (CLLR) */
  WRITE_REG(hdma->Instance->CLLR, 0U);
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	2200      	movs	r2, #0
 80071be:	67da      	str	r2, [r3, #124]	; 0x7c
}
 80071c0:	bf00      	nop
 80071c2:	3714      	adds	r7, #20
 80071c4:	46bd      	mov	sp, r7
 80071c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ca:	4770      	bx	lr
 80071cc:	40020050 	.word	0x40020050
 80071d0:	50020050 	.word	0x50020050
 80071d4:	400200d0 	.word	0x400200d0
 80071d8:	500200d0 	.word	0x500200d0
 80071dc:	40020150 	.word	0x40020150
 80071e0:	50020150 	.word	0x50020150
 80071e4:	400201d0 	.word	0x400201d0
 80071e8:	500201d0 	.word	0x500201d0
 80071ec:	40020250 	.word	0x40020250
 80071f0:	50020250 	.word	0x50020250
 80071f4:	400202d0 	.word	0x400202d0
 80071f8:	500202d0 	.word	0x500202d0
 80071fc:	40020350 	.word	0x40020350
 8007200:	50020350 	.word	0x50020350
 8007204:	400203d0 	.word	0x400203d0
 8007208:	500203d0 	.word	0x500203d0
 800720c:	40020450 	.word	0x40020450
 8007210:	50020450 	.word	0x50020450
 8007214:	400204d0 	.word	0x400204d0
 8007218:	500204d0 	.word	0x500204d0
 800721c:	40020550 	.word	0x40020550
 8007220:	50020550 	.word	0x50020550
 8007224:	400205d0 	.word	0x400205d0
 8007228:	500205d0 	.word	0x500205d0
 800722c:	40020650 	.word	0x40020650
 8007230:	50020650 	.word	0x50020650
 8007234:	400206d0 	.word	0x400206d0
 8007238:	500206d0 	.word	0x500206d0
 800723c:	40020750 	.word	0x40020750
 8007240:	50020750 	.word	0x50020750
 8007244:	400207d0 	.word	0x400207d0
 8007248:	500207d0 	.word	0x500207d0

0800724c <DMA_List_BuildNode>:
  *                       configurations.
  * @retval None.
  */
static void DMA_List_BuildNode(DMA_NodeConfTypeDef const *const pNodeConfig,
                               DMA_NodeTypeDef *const pNode)
{
 800724c:	b480      	push	{r7}
 800724e:	b085      	sub	sp, #20
 8007250:	af00      	add	r7, sp, #0
 8007252:	6078      	str	r0, [r7, #4]
 8007254:	6039      	str	r1, [r7, #0]
  int32_t blockoffset;

  /* Update CTR1 register value ***************************************************************************************/
  /* Prepare DMA channel transfer register (CTR1) value */
  pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] = pNodeConfig->Init.DestInc                     |
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	695a      	ldr	r2, [r3, #20]
                                                   pNodeConfig->Init.DestDataWidth               |
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	69db      	ldr	r3, [r3, #28]
  pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] = pNodeConfig->Init.DestInc                     |
 800725e:	431a      	orrs	r2, r3
                                                   pNodeConfig->DataHandlingConfig.DataAlignment |
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                                                   pNodeConfig->Init.DestDataWidth               |
 8007264:	431a      	orrs	r2, r3
                                                   pNodeConfig->Init.SrcInc                      |
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	691b      	ldr	r3, [r3, #16]
                                                   pNodeConfig->DataHandlingConfig.DataAlignment |
 800726a:	431a      	orrs	r2, r3
                                                   pNodeConfig->Init.SrcDataWidth;
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	699b      	ldr	r3, [r3, #24]
                                                   pNodeConfig->Init.SrcInc                      |
 8007270:	431a      	orrs	r2, r3
  pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] = pNodeConfig->Init.DestInc                     |
 8007272:	683b      	ldr	r3, [r7, #0]
 8007274:	601a      	str	r2, [r3, #0]
    pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] |= DMA_CTR1_DSEC;
  }
#endif /* defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  /* Add parameters related to DMA configuration */
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_GPDMA) == DMA_CHANNEL_TYPE_GPDMA)
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	f003 0320 	and.w	r3, r3, #32
 800727e:	2b00      	cmp	r3, #0
 8007280:	d017      	beq.n	80072b2 <DMA_List_BuildNode+0x66>
  {
    /* Prepare DMA channel transfer register (CTR1) value */
    pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] |=
 8007282:	683b      	ldr	r3, [r7, #0]
 8007284:	681a      	ldr	r2, [r3, #0]
      (pNodeConfig->Init.TransferAllocatedPort | pNodeConfig->DataHandlingConfig.DataExchange |
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800728e:	4319      	orrs	r1, r3
       (((pNodeConfig->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1)    |
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007294:	3b01      	subs	r3, #1
 8007296:	051b      	lsls	r3, r3, #20
 8007298:	f003 737c 	and.w	r3, r3, #66060288	; 0x3f00000
      (pNodeConfig->Init.TransferAllocatedPort | pNodeConfig->DataHandlingConfig.DataExchange |
 800729c:	4319      	orrs	r1, r3
       (((pNodeConfig->Init.SrcBurstLength - 1U) << DMA_CTR1_SBL_1_Pos) & DMA_CTR1_SBL_1));
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072a2:	3b01      	subs	r3, #1
 80072a4:	011b      	lsls	r3, r3, #4
 80072a6:	f403 737c 	and.w	r3, r3, #1008	; 0x3f0
       (((pNodeConfig->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1)    |
 80072aa:	430b      	orrs	r3, r1
    pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] |=
 80072ac:	431a      	orrs	r2, r3
 80072ae:	683b      	ldr	r3, [r7, #0]
 80072b0:	601a      	str	r2, [r3, #0]
  /*********************************************************************************** CTR1 register value is updated */


  /* Update CTR2 register value ***************************************************************************************/
  /* Prepare DMA channel transfer register 2 (CTR2) value */
  pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] = pNodeConfig->Init.TransferEventMode |
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
                                                   (pNodeConfig->Init.Request & (DMA_CTR2_REQSEL | DMA_CTR2_SWREQ));
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	6859      	ldr	r1, [r3, #4]
 80072ba:	f240 237f 	movw	r3, #639	; 0x27f
 80072be:	400b      	ands	r3, r1
  pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] = pNodeConfig->Init.TransferEventMode |
 80072c0:	431a      	orrs	r2, r3
 80072c2:	683b      	ldr	r3, [r7, #0]
 80072c4:	605a      	str	r2, [r3, #4]

  /* Check for memory to peripheral transfer */
  if ((pNodeConfig->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	68db      	ldr	r3, [r3, #12]
 80072ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80072ce:	d10c      	bne.n	80072ea <DMA_List_BuildNode+0x9e>
  {
    /* Check for GPDMA */
    if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_GPDMA) == DMA_CHANNEL_TYPE_GPDMA)
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	f003 0320 	and.w	r3, r3, #32
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d011      	beq.n	8007300 <DMA_List_BuildNode+0xb4>
    {
      pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |= DMA_CTR2_DREQ;
 80072dc:	683b      	ldr	r3, [r7, #0]
 80072de:	685b      	ldr	r3, [r3, #4]
 80072e0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80072e4:	683b      	ldr	r3, [r7, #0]
 80072e6:	605a      	str	r2, [r3, #4]
 80072e8:	e00a      	b.n	8007300 <DMA_List_BuildNode+0xb4>
    }
  }
  /* Memory to memory transfer */
  else if ((pNodeConfig->Init.Direction) == DMA_MEMORY_TO_MEMORY)
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	68db      	ldr	r3, [r3, #12]
 80072ee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80072f2:	d105      	bne.n	8007300 <DMA_List_BuildNode+0xb4>
  {
    pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |= DMA_CTR2_SWREQ;
 80072f4:	683b      	ldr	r3, [r7, #0]
 80072f6:	685b      	ldr	r3, [r3, #4]
 80072f8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80072fc:	683b      	ldr	r3, [r7, #0]
 80072fe:	605a      	str	r2, [r3, #4]
  {
    /* Prevent MISRA-C2012-Rule-15.7 */
  }

  /* Check if trigger feature is active */
  if (pNodeConfig->TriggerConfig.TriggerPolarity != DMA_TRIG_POLARITY_MASKED)
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007304:	2b00      	cmp	r3, #0
 8007306:	d00f      	beq.n	8007328 <DMA_List_BuildNode+0xdc>
  {
    /* Prepare DMA channel transfer register 2 (CTR2) value */
    pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |=
 8007308:	683b      	ldr	r3, [r7, #0]
 800730a:	685a      	ldr	r2, [r3, #4]
      pNodeConfig->TriggerConfig.TriggerMode | pNodeConfig->TriggerConfig.TriggerPolarity |
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007314:	4319      	orrs	r1, r3
      ((pNodeConfig->TriggerConfig.TriggerSelection << DMA_CTR2_TRIGSEL_Pos) & DMA_CTR2_TRIGSEL);
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800731a:	041b      	lsls	r3, r3, #16
 800731c:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
      pNodeConfig->TriggerConfig.TriggerMode | pNodeConfig->TriggerConfig.TriggerPolarity |
 8007320:	430b      	orrs	r3, r1
    pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |=
 8007322:	431a      	orrs	r2, r3
 8007324:	683b      	ldr	r3, [r7, #0]
 8007326:	605a      	str	r2, [r3, #4]
  /*********************************************************************************** CTR2 register value is updated */


  /* Update CBR1 register value ***************************************************************************************/
  /* Prepare DMA channel block register 1 (CBR1) value */
  pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = (pNodeConfig->DataSize & DMA_CBR1_BNDT);
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800732c:	b29a      	uxth	r2, r3
 800732e:	683b      	ldr	r3, [r7, #0]
 8007330:	609a      	str	r2, [r3, #8]

  /* If 2D addressing is supported by the selected DMA channel */
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	f003 0302 	and.w	r3, r3, #2
 800733a:	2b00      	cmp	r3, #0
 800733c:	d04e      	beq.n	80073dc <DMA_List_BuildNode+0x190>
  {
    /* Set the new CBR1 Register value */
    pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |=
 800733e:	683b      	ldr	r3, [r7, #0]
 8007340:	689a      	ldr	r2, [r3, #8]
      (((pNodeConfig->RepeatBlockConfig.RepeatCount - 1U) << DMA_CBR1_BRC_Pos) & DMA_CBR1_BRC);
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007346:	3b01      	subs	r3, #1
 8007348:	0419      	lsls	r1, r3, #16
 800734a:	4b67      	ldr	r3, [pc, #412]	; (80074e8 <DMA_List_BuildNode+0x29c>)
 800734c:	400b      	ands	r3, r1
    pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |=
 800734e:	431a      	orrs	r2, r3
 8007350:	683b      	ldr	r3, [r7, #0]
 8007352:	609a      	str	r2, [r3, #8]

    /* If the source address offset is negative, set SDEC bit */
    if (pNodeConfig->RepeatBlockConfig.SrcAddrOffset < 0)
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007358:	2b00      	cmp	r3, #0
 800735a:	da06      	bge.n	800736a <DMA_List_BuildNode+0x11e>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_SDEC;
 800735c:	683b      	ldr	r3, [r7, #0]
 800735e:	689b      	ldr	r3, [r3, #8]
 8007360:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8007364:	683b      	ldr	r3, [r7, #0]
 8007366:	609a      	str	r2, [r3, #8]
 8007368:	e005      	b.n	8007376 <DMA_List_BuildNode+0x12a>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_SDEC);
 800736a:	683b      	ldr	r3, [r7, #0]
 800736c:	689b      	ldr	r3, [r3, #8]
 800736e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8007372:	683b      	ldr	r3, [r7, #0]
 8007374:	609a      	str	r2, [r3, #8]
    }

    /* If the destination address offset is negative, set DDEC bit */
    if (pNodeConfig->RepeatBlockConfig.DestAddrOffset < 0)
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800737a:	2b00      	cmp	r3, #0
 800737c:	da06      	bge.n	800738c <DMA_List_BuildNode+0x140>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_DDEC;
 800737e:	683b      	ldr	r3, [r7, #0]
 8007380:	689b      	ldr	r3, [r3, #8]
 8007382:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007386:	683b      	ldr	r3, [r7, #0]
 8007388:	609a      	str	r2, [r3, #8]
 800738a:	e005      	b.n	8007398 <DMA_List_BuildNode+0x14c>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_DDEC);
 800738c:	683b      	ldr	r3, [r7, #0]
 800738e:	689b      	ldr	r3, [r3, #8]
 8007390:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8007394:	683b      	ldr	r3, [r7, #0]
 8007396:	609a      	str	r2, [r3, #8]
    }

    /* If the repeated block source address offset is negative, set BRSEC bit */
    if (pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset < 0)
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800739c:	2b00      	cmp	r3, #0
 800739e:	da06      	bge.n	80073ae <DMA_List_BuildNode+0x162>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_BRSDEC;
 80073a0:	683b      	ldr	r3, [r7, #0]
 80073a2:	689b      	ldr	r3, [r3, #8]
 80073a4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80073a8:	683b      	ldr	r3, [r7, #0]
 80073aa:	609a      	str	r2, [r3, #8]
 80073ac:	e005      	b.n	80073ba <DMA_List_BuildNode+0x16e>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_BRSDEC);
 80073ae:	683b      	ldr	r3, [r7, #0]
 80073b0:	689b      	ldr	r3, [r3, #8]
 80073b2:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80073b6:	683b      	ldr	r3, [r7, #0]
 80073b8:	609a      	str	r2, [r3, #8]
    }

    /* if the repeated block destination address offset is negative, set BRDEC bit */
    if (pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset < 0)
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80073be:	2b00      	cmp	r3, #0
 80073c0:	da06      	bge.n	80073d0 <DMA_List_BuildNode+0x184>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_BRDDEC;
 80073c2:	683b      	ldr	r3, [r7, #0]
 80073c4:	689b      	ldr	r3, [r3, #8]
 80073c6:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80073ca:	683b      	ldr	r3, [r7, #0]
 80073cc:	609a      	str	r2, [r3, #8]
 80073ce:	e005      	b.n	80073dc <DMA_List_BuildNode+0x190>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_BRDDEC);
 80073d0:	683b      	ldr	r3, [r7, #0]
 80073d2:	689b      	ldr	r3, [r3, #8]
 80073d4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80073d8:	683b      	ldr	r3, [r7, #0]
 80073da:	609a      	str	r2, [r3, #8]
  }
  /*********************************************************************************** CBR1 register value is updated */


  /* Update CSAR register value ***************************************************************************************/
  pNode->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] = pNodeConfig->SrcAddress;
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80073e0:	683b      	ldr	r3, [r7, #0]
 80073e2:	60da      	str	r2, [r3, #12]
  /*********************************************************************************** CSAR register value is updated */


  /* Update CDAR register value ***************************************************************************************/
  pNode->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = pNodeConfig->DstAddress;
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80073e8:	683b      	ldr	r3, [r7, #0]
 80073ea:	611a      	str	r2, [r3, #16]
  /*********************************************************************************** CDAR register value is updated */


  /* Check if the selected channel is 2D addressing */
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	f003 0302 	and.w	r3, r3, #2
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d059      	beq.n	80074ac <DMA_List_BuildNode+0x260>
  {
    /* Update CTR3 register value *************************************************************************************/
    /* Write new CTR3 Register value : source address offset */
    if (pNodeConfig->RepeatBlockConfig.SrcAddrOffset < 0)
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	da09      	bge.n	8007414 <DMA_List_BuildNode+0x1c8>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.SrcAddrOffset);
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007404:	425b      	negs	r3, r3
 8007406:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] = ((uint32_t)blockoffset & DMA_CTR3_SAO);
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	f3c3 020c 	ubfx	r2, r3, #0, #13
 800740e:	683b      	ldr	r3, [r7, #0]
 8007410:	615a      	str	r2, [r3, #20]
 8007412:	e005      	b.n	8007420 <DMA_List_BuildNode+0x1d4>
    }
    else
    {
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] =
        ((uint32_t)pNodeConfig->RepeatBlockConfig.SrcAddrOffset & DMA_CTR3_SAO);
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007418:	f3c3 020c 	ubfx	r2, r3, #0, #13
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] =
 800741c:	683b      	ldr	r3, [r7, #0]
 800741e:	615a      	str	r2, [r3, #20]
    }

    /* Write new CTR3 Register value : destination address offset */
    if (pNodeConfig->RepeatBlockConfig.DestAddrOffset < 0)
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007424:	2b00      	cmp	r3, #0
 8007426:	da0d      	bge.n	8007444 <DMA_List_BuildNode+0x1f8>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.DestAddrOffset);
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800742c:	425b      	negs	r3, r3
 800742e:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] |= (((uint32_t)blockoffset << DMA_CTR3_DAO_Pos) & DMA_CTR3_DAO);
 8007430:	683b      	ldr	r3, [r7, #0]
 8007432:	695a      	ldr	r2, [r3, #20]
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	0419      	lsls	r1, r3, #16
 8007438:	4b2c      	ldr	r3, [pc, #176]	; (80074ec <DMA_List_BuildNode+0x2a0>)
 800743a:	400b      	ands	r3, r1
 800743c:	431a      	orrs	r2, r3
 800743e:	683b      	ldr	r3, [r7, #0]
 8007440:	615a      	str	r2, [r3, #20]
 8007442:	e009      	b.n	8007458 <DMA_List_BuildNode+0x20c>
    }
    else
    {
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] |=
 8007444:	683b      	ldr	r3, [r7, #0]
 8007446:	695a      	ldr	r2, [r3, #20]
        (((uint32_t)pNodeConfig->RepeatBlockConfig.DestAddrOffset << DMA_CTR3_DAO_Pos) & DMA_CTR3_DAO);
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800744c:	0419      	lsls	r1, r3, #16
 800744e:	4b27      	ldr	r3, [pc, #156]	; (80074ec <DMA_List_BuildNode+0x2a0>)
 8007450:	400b      	ands	r3, r1
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] |=
 8007452:	431a      	orrs	r2, r3
 8007454:	683b      	ldr	r3, [r7, #0]
 8007456:	615a      	str	r2, [r3, #20]
    /********************************************************************************* CTR3 register value is updated */


    /* Update CBR2 register value *************************************************************************************/
    /* Write new CBR2 Register value : repeated block source address offset */
    if (pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset < 0)
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800745c:	2b00      	cmp	r3, #0
 800745e:	da08      	bge.n	8007472 <DMA_List_BuildNode+0x226>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset);
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007464:	425b      	negs	r3, r3
 8007466:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] = ((uint32_t)blockoffset & DMA_CBR2_BRSAO);
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	b29a      	uxth	r2, r3
 800746c:	683b      	ldr	r3, [r7, #0]
 800746e:	619a      	str	r2, [r3, #24]
 8007470:	e004      	b.n	800747c <DMA_List_BuildNode+0x230>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] =
        ((uint32_t)pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset & DMA_CBR2_BRSAO);
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007476:	b29a      	uxth	r2, r3
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] =
 8007478:	683b      	ldr	r3, [r7, #0]
 800747a:	619a      	str	r2, [r3, #24]
    }

    /* Write new CBR2 Register value : repeated block destination address offset */
    if (pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset < 0)
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007480:	2b00      	cmp	r3, #0
 8007482:	da0b      	bge.n	800749c <DMA_List_BuildNode+0x250>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset);
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007488:	425b      	negs	r3, r3
 800748a:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 800748c:	683b      	ldr	r3, [r7, #0]
 800748e:	699a      	ldr	r2, [r3, #24]
        (((uint32_t)blockoffset & DMA_CBR2_BRSAO) << DMA_CBR2_BRDAO_Pos);
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	041b      	lsls	r3, r3, #16
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 8007494:	431a      	orrs	r2, r3
 8007496:	683b      	ldr	r3, [r7, #0]
 8007498:	619a      	str	r2, [r3, #24]
 800749a:	e007      	b.n	80074ac <DMA_List_BuildNode+0x260>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 800749c:	683b      	ldr	r3, [r7, #0]
 800749e:	699a      	ldr	r2, [r3, #24]
        (((uint32_t)pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset << DMA_CBR2_BRDAO_Pos) & DMA_CBR2_BRDAO);
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80074a4:	041b      	lsls	r3, r3, #16
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 80074a6:	431a      	orrs	r2, r3
 80074a8:	683b      	ldr	r3, [r7, #0]
 80074aa:	619a      	str	r2, [r3, #24]
  }


  /* Update node information value ************************************************************************************/
  /* Set node information */
  pNode->NodeInfo = pNodeConfig->NodeType;
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681a      	ldr	r2, [r3, #0]
 80074b0:	683b      	ldr	r3, [r7, #0]
 80074b2:	621a      	str	r2, [r3, #32]
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	f003 0302 	and.w	r3, r3, #2
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d006      	beq.n	80074ce <DMA_List_BuildNode+0x282>
  {
    pNode->NodeInfo |= (NODE_CLLR_2D_DEFAULT_OFFSET << NODE_CLLR_IDX_POS);
 80074c0:	683b      	ldr	r3, [r7, #0]
 80074c2:	6a1b      	ldr	r3, [r3, #32]
 80074c4:	f443 62e0 	orr.w	r2, r3, #1792	; 0x700
 80074c8:	683b      	ldr	r3, [r7, #0]
 80074ca:	621a      	str	r2, [r3, #32]
  else
  {
    pNode->NodeInfo |= (NODE_CLLR_LINEAR_DEFAULT_OFFSET << NODE_CLLR_IDX_POS);
  }
  /******************************************************************************** Node information value is updated */
}
 80074cc:	e005      	b.n	80074da <DMA_List_BuildNode+0x28e>
    pNode->NodeInfo |= (NODE_CLLR_LINEAR_DEFAULT_OFFSET << NODE_CLLR_IDX_POS);
 80074ce:	683b      	ldr	r3, [r7, #0]
 80074d0:	6a1b      	ldr	r3, [r3, #32]
 80074d2:	f443 62a0 	orr.w	r2, r3, #1280	; 0x500
 80074d6:	683b      	ldr	r3, [r7, #0]
 80074d8:	621a      	str	r2, [r3, #32]
}
 80074da:	bf00      	nop
 80074dc:	3714      	adds	r7, #20
 80074de:	46bd      	mov	sp, r7
 80074e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e4:	4770      	bx	lr
 80074e6:	bf00      	nop
 80074e8:	07ff0000 	.word	0x07ff0000
 80074ec:	1fff0000 	.word	0x1fff0000

080074f0 <DMA_List_CheckNodesBaseAddresses>:
  * @retval Return 0 when nodes addresses are compatible, 1 otherwise.
  */
static uint32_t DMA_List_CheckNodesBaseAddresses(DMA_NodeTypeDef const *const pNode1,
                                                 DMA_NodeTypeDef const *const pNode2,
                                                 DMA_NodeTypeDef const *const pNode3)
{
 80074f0:	b480      	push	{r7}
 80074f2:	b087      	sub	sp, #28
 80074f4:	af00      	add	r7, sp, #0
 80074f6:	60f8      	str	r0, [r7, #12]
 80074f8:	60b9      	str	r1, [r7, #8]
 80074fa:	607a      	str	r2, [r7, #4]
  uint32_t temp = (((uint32_t)pNode1 | (uint32_t)pNode2 | (uint32_t)pNode3) & DMA_CLBAR_LBA);
 80074fc:	68fa      	ldr	r2, [r7, #12]
 80074fe:	68bb      	ldr	r3, [r7, #8]
 8007500:	431a      	orrs	r2, r3
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	4313      	orrs	r3, r2
 8007506:	0c1b      	lsrs	r3, r3, #16
 8007508:	041b      	lsls	r3, r3, #16
 800750a:	613b      	str	r3, [r7, #16]
  uint32_t ref  = 0U;
 800750c:	2300      	movs	r3, #0
 800750e:	617b      	str	r3, [r7, #20]

  /* Check node 1 address */
  if ((uint32_t)pNode1 != 0U)
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	2b00      	cmp	r3, #0
 8007514:	d002      	beq.n	800751c <DMA_List_CheckNodesBaseAddresses+0x2c>
  {
    ref = (uint32_t)pNode1;
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	617b      	str	r3, [r7, #20]
 800751a:	e00a      	b.n	8007532 <DMA_List_CheckNodesBaseAddresses+0x42>
  }
  /* Check node 2 address */
  else if ((uint32_t)pNode2 != 0U)
 800751c:	68bb      	ldr	r3, [r7, #8]
 800751e:	2b00      	cmp	r3, #0
 8007520:	d002      	beq.n	8007528 <DMA_List_CheckNodesBaseAddresses+0x38>
  {
    ref = (uint32_t)pNode2;
 8007522:	68bb      	ldr	r3, [r7, #8]
 8007524:	617b      	str	r3, [r7, #20]
 8007526:	e004      	b.n	8007532 <DMA_List_CheckNodesBaseAddresses+0x42>
  }
  /* Check node 3 address */
  else if ((uint32_t)pNode3 != 0U)
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	2b00      	cmp	r3, #0
 800752c:	d001      	beq.n	8007532 <DMA_List_CheckNodesBaseAddresses+0x42>
  {
    ref = (uint32_t)pNode3;
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	617b      	str	r3, [r7, #20]
  {
    /* Prevent MISRA-C2012-Rule-15.7 */
  }

  /* Check addresses compatibility */
  if (temp != ((uint32_t)ref & DMA_CLBAR_LBA))
 8007532:	697b      	ldr	r3, [r7, #20]
 8007534:	0c1b      	lsrs	r3, r3, #16
 8007536:	041b      	lsls	r3, r3, #16
 8007538:	693a      	ldr	r2, [r7, #16]
 800753a:	429a      	cmp	r2, r3
 800753c:	d001      	beq.n	8007542 <DMA_List_CheckNodesBaseAddresses+0x52>
  {
    return 1U;
 800753e:	2301      	movs	r3, #1
 8007540:	e000      	b.n	8007544 <DMA_List_CheckNodesBaseAddresses+0x54>
  }

  return 0U;
 8007542:	2300      	movs	r3, #0
}
 8007544:	4618      	mov	r0, r3
 8007546:	371c      	adds	r7, #28
 8007548:	46bd      	mov	sp, r7
 800754a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800754e:	4770      	bx	lr

08007550 <DMA_List_CheckNodesTypes>:
  * @retval Return 0 when nodes types are compatible, otherwise nodes types are not compatible.
  */
static uint32_t DMA_List_CheckNodesTypes(DMA_NodeTypeDef const *const pNode1,
                                         DMA_NodeTypeDef const *const pNode2,
                                         DMA_NodeTypeDef const *const pNode3)
{
 8007550:	b480      	push	{r7}
 8007552:	b087      	sub	sp, #28
 8007554:	af00      	add	r7, sp, #0
 8007556:	60f8      	str	r0, [r7, #12]
 8007558:	60b9      	str	r1, [r7, #8]
 800755a:	607a      	str	r2, [r7, #4]
  uint32_t ref = 0U;
 800755c:	2300      	movs	r3, #0
 800755e:	617b      	str	r3, [r7, #20]

  /* Check node 1 parameter */
  if (pNode1 != NULL)
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	2b00      	cmp	r3, #0
 8007564:	d004      	beq.n	8007570 <DMA_List_CheckNodesTypes+0x20>
  {
    ref = pNode1->NodeInfo & NODE_TYPE_MASK;
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	6a1b      	ldr	r3, [r3, #32]
 800756a:	b2db      	uxtb	r3, r3
 800756c:	617b      	str	r3, [r7, #20]
 800756e:	e00e      	b.n	800758e <DMA_List_CheckNodesTypes+0x3e>
  }
  /* Check node 2 parameter */
  else if (pNode2 != NULL)
 8007570:	68bb      	ldr	r3, [r7, #8]
 8007572:	2b00      	cmp	r3, #0
 8007574:	d004      	beq.n	8007580 <DMA_List_CheckNodesTypes+0x30>
  {
    ref = pNode2->NodeInfo & NODE_TYPE_MASK;
 8007576:	68bb      	ldr	r3, [r7, #8]
 8007578:	6a1b      	ldr	r3, [r3, #32]
 800757a:	b2db      	uxtb	r3, r3
 800757c:	617b      	str	r3, [r7, #20]
 800757e:	e006      	b.n	800758e <DMA_List_CheckNodesTypes+0x3e>
  }
  /* Check node 3 parameter */
  else if (pNode3 != NULL)
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	2b00      	cmp	r3, #0
 8007584:	d003      	beq.n	800758e <DMA_List_CheckNodesTypes+0x3e>
  {
    ref = pNode3->NodeInfo & NODE_TYPE_MASK;
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	6a1b      	ldr	r3, [r3, #32]
 800758a:	b2db      	uxtb	r3, r3
 800758c:	617b      	str	r3, [r7, #20]
  {
    /* Prevent MISRA-C2012-Rule-15.7 */
  }

  /* Check node 2 parameter */
  if (pNode2 != NULL)
 800758e:	68bb      	ldr	r3, [r7, #8]
 8007590:	2b00      	cmp	r3, #0
 8007592:	d007      	beq.n	80075a4 <DMA_List_CheckNodesTypes+0x54>
  {
    /* Check node type compatibility */
    if (ref != (pNode2->NodeInfo & NODE_TYPE_MASK))
 8007594:	68bb      	ldr	r3, [r7, #8]
 8007596:	6a1b      	ldr	r3, [r3, #32]
 8007598:	b2db      	uxtb	r3, r3
 800759a:	697a      	ldr	r2, [r7, #20]
 800759c:	429a      	cmp	r2, r3
 800759e:	d001      	beq.n	80075a4 <DMA_List_CheckNodesTypes+0x54>
    {
      return 2U;
 80075a0:	2302      	movs	r3, #2
 80075a2:	e00b      	b.n	80075bc <DMA_List_CheckNodesTypes+0x6c>
    }
  }

  /* Check node 3 parameter */
  if (pNode3 != NULL)
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d007      	beq.n	80075ba <DMA_List_CheckNodesTypes+0x6a>
  {
    /* Check node type compatibility */
    if (ref != (pNode3->NodeInfo & NODE_TYPE_MASK))
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	6a1b      	ldr	r3, [r3, #32]
 80075ae:	b2db      	uxtb	r3, r3
 80075b0:	697a      	ldr	r2, [r7, #20]
 80075b2:	429a      	cmp	r2, r3
 80075b4:	d001      	beq.n	80075ba <DMA_List_CheckNodesTypes+0x6a>
    {
      return 3U;
 80075b6:	2303      	movs	r3, #3
 80075b8:	e000      	b.n	80075bc <DMA_List_CheckNodesTypes+0x6c>
    }
  }

  return 0U;
 80075ba:	2300      	movs	r3, #0
}
 80075bc:	4618      	mov	r0, r3
 80075be:	371c      	adds	r7, #28
 80075c0:	46bd      	mov	sp, r7
 80075c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c6:	4770      	bx	lr

080075c8 <DMA_List_GetCLLRNodeInfo>:
  * @retval None.
  */
static void DMA_List_GetCLLRNodeInfo(DMA_NodeTypeDef const *const pNode,
                                     uint32_t *const cllr_mask,
                                     uint32_t *const cllr_offset)
{
 80075c8:	b480      	push	{r7}
 80075ca:	b085      	sub	sp, #20
 80075cc:	af00      	add	r7, sp, #0
 80075ce:	60f8      	str	r0, [r7, #12]
 80075d0:	60b9      	str	r1, [r7, #8]
 80075d2:	607a      	str	r2, [r7, #4]
  /* Check node type */
  if ((pNode->NodeInfo & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	6a1b      	ldr	r3, [r3, #32]
 80075d8:	f003 0302 	and.w	r3, r3, #2
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d00c      	beq.n	80075fa <DMA_List_GetCLLRNodeInfo+0x32>
  {
    /* Update CLLR register mask value */
    if (cllr_mask != NULL)
 80075e0:	68bb      	ldr	r3, [r7, #8]
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d002      	beq.n	80075ec <DMA_List_GetCLLRNodeInfo+0x24>
    {
      *cllr_mask = DMA_CLLR_UT1 | DMA_CLLR_UT2 | DMA_CLLR_UB1 | DMA_CLLR_USA | DMA_CLLR_UDA | DMA_CLLR_UT3 |
 80075e6:	68bb      	ldr	r3, [r7, #8]
 80075e8:	4a0d      	ldr	r2, [pc, #52]	; (8007620 <DMA_List_GetCLLRNodeInfo+0x58>)
 80075ea:	601a      	str	r2, [r3, #0]
                   DMA_CLLR_UB2 | DMA_CLLR_ULL;
    }

    /* Update CLLR register offset */
    if (cllr_offset != NULL)
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d00f      	beq.n	8007612 <DMA_List_GetCLLRNodeInfo+0x4a>
    {
      *cllr_offset = NODE_CLLR_2D_DEFAULT_OFFSET;
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	2207      	movs	r2, #7
 80075f6:	601a      	str	r2, [r3, #0]
    if (cllr_offset != NULL)
    {
      *cllr_offset = NODE_CLLR_LINEAR_DEFAULT_OFFSET;
    }
  }
}
 80075f8:	e00b      	b.n	8007612 <DMA_List_GetCLLRNodeInfo+0x4a>
    if (cllr_mask != NULL)
 80075fa:	68bb      	ldr	r3, [r7, #8]
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d002      	beq.n	8007606 <DMA_List_GetCLLRNodeInfo+0x3e>
      *cllr_mask = DMA_CLLR_UT1 | DMA_CLLR_UT2 | DMA_CLLR_UB1 | DMA_CLLR_USA | DMA_CLLR_UDA | DMA_CLLR_ULL;
 8007600:	68bb      	ldr	r3, [r7, #8]
 8007602:	4a08      	ldr	r2, [pc, #32]	; (8007624 <DMA_List_GetCLLRNodeInfo+0x5c>)
 8007604:	601a      	str	r2, [r3, #0]
    if (cllr_offset != NULL)
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	2b00      	cmp	r3, #0
 800760a:	d002      	beq.n	8007612 <DMA_List_GetCLLRNodeInfo+0x4a>
      *cllr_offset = NODE_CLLR_LINEAR_DEFAULT_OFFSET;
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	2205      	movs	r2, #5
 8007610:	601a      	str	r2, [r3, #0]
}
 8007612:	bf00      	nop
 8007614:	3714      	adds	r7, #20
 8007616:	46bd      	mov	sp, r7
 8007618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800761c:	4770      	bx	lr
 800761e:	bf00      	nop
 8007620:	fe010000 	.word	0xfe010000
 8007624:	f8010000 	.word	0xf8010000

08007628 <DMA_List_FindNode>:
  * @retval Return 0 when node is found in selected queue, otherwise node is not found.
  */
static uint32_t DMA_List_FindNode(DMA_QListTypeDef const *const pQList,
                                  DMA_NodeTypeDef const *const pNode,
                                  DMA_NodeInQInfoTypeDef *const NodeInfo)
{
 8007628:	b480      	push	{r7}
 800762a:	b089      	sub	sp, #36	; 0x24
 800762c:	af00      	add	r7, sp, #0
 800762e:	60f8      	str	r0, [r7, #12]
 8007630:	60b9      	str	r1, [r7, #8]
 8007632:	607a      	str	r2, [r7, #4]
  uint32_t node_idx = 0U;
 8007634:	2300      	movs	r3, #0
 8007636:	61fb      	str	r3, [r7, #28]
  uint32_t currentnode_address  = 0U;
 8007638:	2300      	movs	r3, #0
 800763a:	61bb      	str	r3, [r7, #24]
  uint32_t previousnode_address  = 0U;
 800763c:	2300      	movs	r3, #0
 800763e:	617b      	str	r3, [r7, #20]
  uint32_t cllr_offset = NodeInfo->cllr_offset;
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	613b      	str	r3, [r7, #16]

  /* Find last node in queue */
  if (pNode ==  NULL)
 8007646:	68bb      	ldr	r3, [r7, #8]
 8007648:	2b00      	cmp	r3, #0
 800764a:	d142      	bne.n	80076d2 <DMA_List_FindNode+0xaa>
  {
    /* Check that previous node is linked to the selected queue */
    while (node_idx < pQList->NodeNumber)
 800764c:	e01d      	b.n	800768a <DMA_List_FindNode+0x62>
    {
      /* Get head node address */
      if (node_idx == 0U)
 800764e:	69fb      	ldr	r3, [r7, #28]
 8007650:	2b00      	cmp	r3, #0
 8007652:	d107      	bne.n	8007664 <DMA_List_FindNode+0x3c>
      {
        currentnode_address = (uint32_t)pQList->Head & DMA_CLLR_LA;
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	461a      	mov	r2, r3
 800765a:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 800765e:	4013      	ands	r3, r2
 8007660:	61bb      	str	r3, [r7, #24]
 8007662:	e00f      	b.n	8007684 <DMA_List_FindNode+0x5c>
      }
      /* Calculate nodes addresses */
      else
      {
        previousnode_address = currentnode_address;
 8007664:	69bb      	ldr	r3, [r7, #24]
 8007666:	617b      	str	r3, [r7, #20]
        currentnode_address =
          ((DMA_NodeTypeDef *)(currentnode_address +
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	0c1b      	lsrs	r3, r3, #16
 800766e:	041b      	lsls	r3, r3, #16
          ((DMA_NodeTypeDef *)(currentnode_address +
 8007670:	69ba      	ldr	r2, [r7, #24]
 8007672:	4413      	add	r3, r2
 8007674:	461a      	mov	r2, r3
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 8007676:	693b      	ldr	r3, [r7, #16]
 8007678:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
        currentnode_address =
 800767c:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 8007680:	4013      	ands	r3, r2
 8007682:	61bb      	str	r3, [r7, #24]
      }

      /* Increment node index */
      node_idx++;
 8007684:	69fb      	ldr	r3, [r7, #28]
 8007686:	3301      	adds	r3, #1
 8007688:	61fb      	str	r3, [r7, #28]
    while (node_idx < pQList->NodeNumber)
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	689b      	ldr	r3, [r3, #8]
 800768e:	69fa      	ldr	r2, [r7, #28]
 8007690:	429a      	cmp	r2, r3
 8007692:	d3dc      	bcc.n	800764e <DMA_List_FindNode+0x26>
 8007694:	e029      	b.n	80076ea <DMA_List_FindNode+0xc2>
  {
    /* Check that previous node is linked to the selected queue */
    while ((node_idx < pQList->NodeNumber) && (currentnode_address != ((uint32_t)pNode & DMA_CLLR_LA)))
    {
      /* Get head node address */
      if (node_idx == 0U)
 8007696:	69fb      	ldr	r3, [r7, #28]
 8007698:	2b00      	cmp	r3, #0
 800769a:	d107      	bne.n	80076ac <DMA_List_FindNode+0x84>
      {
        currentnode_address = (uint32_t)pQList->Head & DMA_CLLR_LA;
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	461a      	mov	r2, r3
 80076a2:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 80076a6:	4013      	ands	r3, r2
 80076a8:	61bb      	str	r3, [r7, #24]
 80076aa:	e00f      	b.n	80076cc <DMA_List_FindNode+0xa4>
      }
      /* Calculate nodes addresses */
      else
      {
        previousnode_address = currentnode_address;
 80076ac:	69bb      	ldr	r3, [r7, #24]
 80076ae:	617b      	str	r3, [r7, #20]
        currentnode_address =
          ((DMA_NodeTypeDef *)(currentnode_address +
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	0c1b      	lsrs	r3, r3, #16
 80076b6:	041b      	lsls	r3, r3, #16
          ((DMA_NodeTypeDef *)(currentnode_address +
 80076b8:	69ba      	ldr	r2, [r7, #24]
 80076ba:	4413      	add	r3, r2
 80076bc:	461a      	mov	r2, r3
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 80076be:	693b      	ldr	r3, [r7, #16]
 80076c0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
        currentnode_address =
 80076c4:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 80076c8:	4013      	ands	r3, r2
 80076ca:	61bb      	str	r3, [r7, #24]
      }

      /* Increment node index */
      node_idx++;
 80076cc:	69fb      	ldr	r3, [r7, #28]
 80076ce:	3301      	adds	r3, #1
 80076d0:	61fb      	str	r3, [r7, #28]
    while ((node_idx < pQList->NodeNumber) && (currentnode_address != ((uint32_t)pNode & DMA_CLLR_LA)))
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	689b      	ldr	r3, [r3, #8]
 80076d6:	69fa      	ldr	r2, [r7, #28]
 80076d8:	429a      	cmp	r2, r3
 80076da:	d206      	bcs.n	80076ea <DMA_List_FindNode+0xc2>
 80076dc:	68ba      	ldr	r2, [r7, #8]
 80076de:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 80076e2:	4013      	ands	r3, r2
 80076e4:	69ba      	ldr	r2, [r7, #24]
 80076e6:	429a      	cmp	r2, r3
 80076e8:	d1d5      	bne.n	8007696 <DMA_List_FindNode+0x6e>
    }
  }

  /* Check stored address */
  if (pNode != NULL)
 80076ea:	68bb      	ldr	r3, [r7, #8]
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d008      	beq.n	8007702 <DMA_List_FindNode+0xda>
  {
    if (currentnode_address != ((uint32_t)pNode & DMA_CLLR_LA))
 80076f0:	68ba      	ldr	r2, [r7, #8]
 80076f2:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 80076f6:	4013      	ands	r3, r2
 80076f8:	69ba      	ldr	r2, [r7, #24]
 80076fa:	429a      	cmp	r2, r3
 80076fc:	d001      	beq.n	8007702 <DMA_List_FindNode+0xda>
    {
      return 1U;
 80076fe:	2301      	movs	r3, #1
 8007700:	e02b      	b.n	800775a <DMA_List_FindNode+0x132>
    }
  }

  /* Update current node position */
  NodeInfo->currentnode_pos = node_idx;
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	69fa      	ldr	r2, [r7, #28]
 8007706:	609a      	str	r2, [r3, #8]

  /* Update previous node address */
  NodeInfo->previousnode_addr = previousnode_address | ((uint32_t)pQList->Head & DMA_CLBAR_LBA);
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	0c1b      	lsrs	r3, r3, #16
 800770e:	041b      	lsls	r3, r3, #16
 8007710:	697a      	ldr	r2, [r7, #20]
 8007712:	431a      	orrs	r2, r3
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	605a      	str	r2, [r3, #4]

  /* Update current node address */
  NodeInfo->currentnode_addr = currentnode_address | ((uint32_t)pQList->Head & DMA_CLBAR_LBA);
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	0c1b      	lsrs	r3, r3, #16
 800771e:	041b      	lsls	r3, r3, #16
 8007720:	69ba      	ldr	r2, [r7, #24]
 8007722:	431a      	orrs	r2, r3
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	60da      	str	r2, [r3, #12]

  /* Update next node address */
  if (((DMA_NodeTypeDef *)NodeInfo->currentnode_addr)->LinkRegisters[cllr_offset] != 0U)
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	68db      	ldr	r3, [r3, #12]
 800772c:	461a      	mov	r2, r3
 800772e:	693b      	ldr	r3, [r7, #16]
 8007730:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007734:	2b00      	cmp	r3, #0
 8007736:	d00f      	beq.n	8007758 <DMA_List_FindNode+0x130>
  {
    NodeInfo->nextnode_addr = (((DMA_NodeTypeDef *)NodeInfo->currentnode_addr)->LinkRegisters[cllr_offset] &
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	68db      	ldr	r3, [r3, #12]
 800773c:	461a      	mov	r2, r3
 800773e:	693b      	ldr	r3, [r7, #16]
 8007740:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007744:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 8007748:	401a      	ands	r2, r3
                               DMA_CLLR_LA) | ((uint32_t)pQList->Head & DMA_CLBAR_LBA);
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	0c1b      	lsrs	r3, r3, #16
 8007750:	041b      	lsls	r3, r3, #16
 8007752:	431a      	orrs	r2, r3
    NodeInfo->nextnode_addr = (((DMA_NodeTypeDef *)NodeInfo->currentnode_addr)->LinkRegisters[cllr_offset] &
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	611a      	str	r2, [r3, #16]
  }

  return 0U;
 8007758:	2300      	movs	r3, #0
}
 800775a:	4618      	mov	r0, r3
 800775c:	3724      	adds	r7, #36	; 0x24
 800775e:	46bd      	mov	sp, r7
 8007760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007764:	4770      	bx	lr
	...

08007768 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8007768:	b480      	push	{r7}
 800776a:	b089      	sub	sp, #36	; 0x24
 800776c:	af00      	add	r7, sp, #0
 800776e:	6078      	str	r0, [r7, #4]
 8007770:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 8007772:	2300      	movs	r3, #0
 8007774:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 800777a:	e1ba      	b.n	8007af2 <HAL_GPIO_Init+0x38a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 800777c:	683b      	ldr	r3, [r7, #0]
 800777e:	681a      	ldr	r2, [r3, #0]
 8007780:	2101      	movs	r1, #1
 8007782:	697b      	ldr	r3, [r7, #20]
 8007784:	fa01 f303 	lsl.w	r3, r1, r3
 8007788:	4013      	ands	r3, r2
 800778a:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 800778c:	697b      	ldr	r3, [r7, #20]
 800778e:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	2b00      	cmp	r3, #0
 8007794:	f000 81aa 	beq.w	8007aec <HAL_GPIO_Init+0x384>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	4a55      	ldr	r2, [pc, #340]	; (80078f0 <HAL_GPIO_Init+0x188>)
 800779c:	4293      	cmp	r3, r2
 800779e:	d15d      	bne.n	800785c <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 80077a6:	2201      	movs	r2, #1
 80077a8:	697b      	ldr	r3, [r7, #20]
 80077aa:	fa02 f303 	lsl.w	r3, r2, r3
 80077ae:	43db      	mvns	r3, r3
 80077b0:	69fa      	ldr	r2, [r7, #28]
 80077b2:	4013      	ands	r3, r2
 80077b4:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 80077b6:	683b      	ldr	r3, [r7, #0]
 80077b8:	685b      	ldr	r3, [r3, #4]
 80077ba:	f003 0201 	and.w	r2, r3, #1
 80077be:	697b      	ldr	r3, [r7, #20]
 80077c0:	fa02 f303 	lsl.w	r3, r2, r3
 80077c4:	69fa      	ldr	r2, [r7, #28]
 80077c6:	4313      	orrs	r3, r2
 80077c8:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	69fa      	ldr	r2, [r7, #28]
 80077ce:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 80077d0:	4a48      	ldr	r2, [pc, #288]	; (80078f4 <HAL_GPIO_Init+0x18c>)
 80077d2:	697b      	ldr	r3, [r7, #20]
 80077d4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80077d8:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 80077da:	4a46      	ldr	r2, [pc, #280]	; (80078f4 <HAL_GPIO_Init+0x18c>)
 80077dc:	697b      	ldr	r3, [r7, #20]
 80077de:	00db      	lsls	r3, r3, #3
 80077e0:	4413      	add	r3, r2
 80077e2:	685b      	ldr	r3, [r3, #4]
 80077e4:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 80077e6:	69bb      	ldr	r3, [r7, #24]
 80077e8:	08da      	lsrs	r2, r3, #3
 80077ea:	693b      	ldr	r3, [r7, #16]
 80077ec:	3208      	adds	r2, #8
 80077ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80077f2:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 80077f4:	69bb      	ldr	r3, [r7, #24]
 80077f6:	f003 0307 	and.w	r3, r3, #7
 80077fa:	009b      	lsls	r3, r3, #2
 80077fc:	220f      	movs	r2, #15
 80077fe:	fa02 f303 	lsl.w	r3, r2, r3
 8007802:	43db      	mvns	r3, r3
 8007804:	69fa      	ldr	r2, [r7, #28]
 8007806:	4013      	ands	r3, r2
 8007808:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 800780a:	69bb      	ldr	r3, [r7, #24]
 800780c:	f003 0307 	and.w	r3, r3, #7
 8007810:	009b      	lsls	r3, r3, #2
 8007812:	220b      	movs	r2, #11
 8007814:	fa02 f303 	lsl.w	r3, r2, r3
 8007818:	69fa      	ldr	r2, [r7, #28]
 800781a:	4313      	orrs	r3, r2
 800781c:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 800781e:	69bb      	ldr	r3, [r7, #24]
 8007820:	08da      	lsrs	r2, r3, #3
 8007822:	693b      	ldr	r3, [r7, #16]
 8007824:	3208      	adds	r2, #8
 8007826:	69f9      	ldr	r1, [r7, #28]
 8007828:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 800782c:	693b      	ldr	r3, [r7, #16]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 8007832:	69bb      	ldr	r3, [r7, #24]
 8007834:	005b      	lsls	r3, r3, #1
 8007836:	2203      	movs	r2, #3
 8007838:	fa02 f303 	lsl.w	r3, r2, r3
 800783c:	43db      	mvns	r3, r3
 800783e:	69fa      	ldr	r2, [r7, #28]
 8007840:	4013      	ands	r3, r2
 8007842:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * 2U));
 8007844:	69bb      	ldr	r3, [r7, #24]
 8007846:	005b      	lsls	r3, r3, #1
 8007848:	2202      	movs	r2, #2
 800784a:	fa02 f303 	lsl.w	r3, r2, r3
 800784e:	69fa      	ldr	r2, [r7, #28]
 8007850:	4313      	orrs	r3, r2
 8007852:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8007854:	693b      	ldr	r3, [r7, #16]
 8007856:	69fa      	ldr	r2, [r7, #28]
 8007858:	601a      	str	r2, [r3, #0]
 800785a:	e067      	b.n	800792c <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 800785c:	683b      	ldr	r3, [r7, #0]
 800785e:	685b      	ldr	r3, [r3, #4]
 8007860:	2b02      	cmp	r3, #2
 8007862:	d003      	beq.n	800786c <HAL_GPIO_Init+0x104>
 8007864:	683b      	ldr	r3, [r7, #0]
 8007866:	685b      	ldr	r3, [r3, #4]
 8007868:	2b12      	cmp	r3, #18
 800786a:	d145      	bne.n	80078f8 <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 800786c:	697b      	ldr	r3, [r7, #20]
 800786e:	08da      	lsrs	r2, r3, #3
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	3208      	adds	r2, #8
 8007874:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007878:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * 4U));
 800787a:	697b      	ldr	r3, [r7, #20]
 800787c:	f003 0307 	and.w	r3, r3, #7
 8007880:	009b      	lsls	r3, r3, #2
 8007882:	220f      	movs	r2, #15
 8007884:	fa02 f303 	lsl.w	r3, r2, r3
 8007888:	43db      	mvns	r3, r3
 800788a:	69fa      	ldr	r2, [r7, #28]
 800788c:	4013      	ands	r3, r2
 800788e:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 8007890:	683b      	ldr	r3, [r7, #0]
 8007892:	691b      	ldr	r3, [r3, #16]
 8007894:	f003 020f 	and.w	r2, r3, #15
 8007898:	697b      	ldr	r3, [r7, #20]
 800789a:	f003 0307 	and.w	r3, r3, #7
 800789e:	009b      	lsls	r3, r3, #2
 80078a0:	fa02 f303 	lsl.w	r3, r2, r3
 80078a4:	69fa      	ldr	r2, [r7, #28]
 80078a6:	4313      	orrs	r3, r2
 80078a8:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 80078aa:	697b      	ldr	r3, [r7, #20]
 80078ac:	08da      	lsrs	r2, r3, #3
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	3208      	adds	r2, #8
 80078b2:	69f9      	ldr	r1, [r7, #28]
 80078b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 80078b8:	693b      	ldr	r3, [r7, #16]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 80078be:	69bb      	ldr	r3, [r7, #24]
 80078c0:	005b      	lsls	r3, r3, #1
 80078c2:	2203      	movs	r2, #3
 80078c4:	fa02 f303 	lsl.w	r3, r2, r3
 80078c8:	43db      	mvns	r3, r3
 80078ca:	69fa      	ldr	r2, [r7, #28]
 80078cc:	4013      	ands	r3, r2
 80078ce:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 80078d0:	683b      	ldr	r3, [r7, #0]
 80078d2:	685b      	ldr	r3, [r3, #4]
 80078d4:	f003 0203 	and.w	r2, r3, #3
 80078d8:	69bb      	ldr	r3, [r7, #24]
 80078da:	005b      	lsls	r3, r3, #1
 80078dc:	fa02 f303 	lsl.w	r3, r2, r3
 80078e0:	69fa      	ldr	r2, [r7, #28]
 80078e2:	4313      	orrs	r3, r2
 80078e4:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 80078e6:	693b      	ldr	r3, [r7, #16]
 80078e8:	69fa      	ldr	r2, [r7, #28]
 80078ea:	601a      	str	r2, [r3, #0]
 80078ec:	e01e      	b.n	800792c <HAL_GPIO_Init+0x1c4>
 80078ee:	bf00      	nop
 80078f0:	46020000 	.word	0x46020000
 80078f4:	0800eed0 	.word	0x0800eed0
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 80078f8:	693b      	ldr	r3, [r7, #16]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 80078fe:	69bb      	ldr	r3, [r7, #24]
 8007900:	005b      	lsls	r3, r3, #1
 8007902:	2203      	movs	r2, #3
 8007904:	fa02 f303 	lsl.w	r3, r2, r3
 8007908:	43db      	mvns	r3, r3
 800790a:	69fa      	ldr	r2, [r7, #28]
 800790c:	4013      	ands	r3, r2
 800790e:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 8007910:	683b      	ldr	r3, [r7, #0]
 8007912:	685b      	ldr	r3, [r3, #4]
 8007914:	f003 0203 	and.w	r2, r3, #3
 8007918:	69bb      	ldr	r3, [r7, #24]
 800791a:	005b      	lsls	r3, r3, #1
 800791c:	fa02 f303 	lsl.w	r3, r2, r3
 8007920:	69fa      	ldr	r2, [r7, #28]
 8007922:	4313      	orrs	r3, r2
 8007924:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8007926:	693b      	ldr	r3, [r7, #16]
 8007928:	69fa      	ldr	r2, [r7, #28]
 800792a:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800792c:	683b      	ldr	r3, [r7, #0]
 800792e:	685b      	ldr	r3, [r3, #4]
 8007930:	2b01      	cmp	r3, #1
 8007932:	d00b      	beq.n	800794c <HAL_GPIO_Init+0x1e4>
 8007934:	683b      	ldr	r3, [r7, #0]
 8007936:	685b      	ldr	r3, [r3, #4]
 8007938:	2b02      	cmp	r3, #2
 800793a:	d007      	beq.n	800794c <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 800793c:	683b      	ldr	r3, [r7, #0]
 800793e:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8007940:	2b11      	cmp	r3, #17
 8007942:	d003      	beq.n	800794c <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007944:	683b      	ldr	r3, [r7, #0]
 8007946:	685b      	ldr	r3, [r3, #4]
 8007948:	2b12      	cmp	r3, #18
 800794a:	d130      	bne.n	80079ae <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 800794c:	693b      	ldr	r3, [r7, #16]
 800794e:	689b      	ldr	r3, [r3, #8]
 8007950:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * 2U));
 8007952:	69bb      	ldr	r3, [r7, #24]
 8007954:	005b      	lsls	r3, r3, #1
 8007956:	2203      	movs	r2, #3
 8007958:	fa02 f303 	lsl.w	r3, r2, r3
 800795c:	43db      	mvns	r3, r3
 800795e:	69fa      	ldr	r2, [r7, #28]
 8007960:	4013      	ands	r3, r2
 8007962:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * 2U));
 8007964:	683b      	ldr	r3, [r7, #0]
 8007966:	68da      	ldr	r2, [r3, #12]
 8007968:	69bb      	ldr	r3, [r7, #24]
 800796a:	005b      	lsls	r3, r3, #1
 800796c:	fa02 f303 	lsl.w	r3, r2, r3
 8007970:	69fa      	ldr	r2, [r7, #28]
 8007972:	4313      	orrs	r3, r2
 8007974:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 8007976:	693b      	ldr	r3, [r7, #16]
 8007978:	69fa      	ldr	r2, [r7, #28]
 800797a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 800797c:	693b      	ldr	r3, [r7, #16]
 800797e:	685b      	ldr	r3, [r3, #4]
 8007980:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 8007982:	2201      	movs	r2, #1
 8007984:	69bb      	ldr	r3, [r7, #24]
 8007986:	fa02 f303 	lsl.w	r3, r2, r3
 800798a:	43db      	mvns	r3, r3
 800798c:	69fa      	ldr	r2, [r7, #28]
 800798e:	4013      	ands	r3, r2
 8007990:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 8007992:	683b      	ldr	r3, [r7, #0]
 8007994:	685b      	ldr	r3, [r3, #4]
 8007996:	091b      	lsrs	r3, r3, #4
 8007998:	f003 0201 	and.w	r2, r3, #1
 800799c:	69bb      	ldr	r3, [r7, #24]
 800799e:	fa02 f303 	lsl.w	r3, r2, r3
 80079a2:	69fa      	ldr	r2, [r7, #28]
 80079a4:	4313      	orrs	r3, r2
 80079a6:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 80079a8:	693b      	ldr	r3, [r7, #16]
 80079aa:	69fa      	ldr	r2, [r7, #28]
 80079ac:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 80079ae:	683b      	ldr	r3, [r7, #0]
 80079b0:	685b      	ldr	r3, [r3, #4]
 80079b2:	2b03      	cmp	r3, #3
 80079b4:	d017      	beq.n	80079e6 <HAL_GPIO_Init+0x27e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 80079b6:	693b      	ldr	r3, [r7, #16]
 80079b8:	68db      	ldr	r3, [r3, #12]
 80079ba:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * 2U));
 80079bc:	69bb      	ldr	r3, [r7, #24]
 80079be:	005b      	lsls	r3, r3, #1
 80079c0:	2203      	movs	r2, #3
 80079c2:	fa02 f303 	lsl.w	r3, r2, r3
 80079c6:	43db      	mvns	r3, r3
 80079c8:	69fa      	ldr	r2, [r7, #28]
 80079ca:	4013      	ands	r3, r2
 80079cc:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * 2U));
 80079ce:	683b      	ldr	r3, [r7, #0]
 80079d0:	689a      	ldr	r2, [r3, #8]
 80079d2:	69bb      	ldr	r3, [r7, #24]
 80079d4:	005b      	lsls	r3, r3, #1
 80079d6:	fa02 f303 	lsl.w	r3, r2, r3
 80079da:	69fa      	ldr	r2, [r7, #28]
 80079dc:	4313      	orrs	r3, r2
 80079de:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 80079e0:	693b      	ldr	r3, [r7, #16]
 80079e2:	69fa      	ldr	r2, [r7, #28]
 80079e4:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80079e6:	683b      	ldr	r3, [r7, #0]
 80079e8:	685b      	ldr	r3, [r3, #4]
 80079ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d07c      	beq.n	8007aec <HAL_GPIO_Init+0x384>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 80079f2:	4a47      	ldr	r2, [pc, #284]	; (8007b10 <HAL_GPIO_Init+0x3a8>)
 80079f4:	697b      	ldr	r3, [r7, #20]
 80079f6:	089b      	lsrs	r3, r3, #2
 80079f8:	3318      	adds	r3, #24
 80079fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80079fe:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 8007a00:	697b      	ldr	r3, [r7, #20]
 8007a02:	f003 0303 	and.w	r3, r3, #3
 8007a06:	00db      	lsls	r3, r3, #3
 8007a08:	220f      	movs	r2, #15
 8007a0a:	fa02 f303 	lsl.w	r3, r2, r3
 8007a0e:	43db      	mvns	r3, r3
 8007a10:	69fa      	ldr	r2, [r7, #28]
 8007a12:	4013      	ands	r3, r2
 8007a14:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	0a9a      	lsrs	r2, r3, #10
 8007a1a:	4b3e      	ldr	r3, [pc, #248]	; (8007b14 <HAL_GPIO_Init+0x3ac>)
 8007a1c:	4013      	ands	r3, r2
 8007a1e:	697a      	ldr	r2, [r7, #20]
 8007a20:	f002 0203 	and.w	r2, r2, #3
 8007a24:	00d2      	lsls	r2, r2, #3
 8007a26:	4093      	lsls	r3, r2
 8007a28:	69fa      	ldr	r2, [r7, #28]
 8007a2a:	4313      	orrs	r3, r2
 8007a2c:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 8007a2e:	4938      	ldr	r1, [pc, #224]	; (8007b10 <HAL_GPIO_Init+0x3a8>)
 8007a30:	697b      	ldr	r3, [r7, #20]
 8007a32:	089b      	lsrs	r3, r3, #2
 8007a34:	3318      	adds	r3, #24
 8007a36:	69fa      	ldr	r2, [r7, #28]
 8007a38:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8007a3c:	4b34      	ldr	r3, [pc, #208]	; (8007b10 <HAL_GPIO_Init+0x3a8>)
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	43db      	mvns	r3, r3
 8007a46:	69fa      	ldr	r2, [r7, #28]
 8007a48:	4013      	ands	r3, r2
 8007a4a:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8007a4c:	683b      	ldr	r3, [r7, #0]
 8007a4e:	685b      	ldr	r3, [r3, #4]
 8007a50:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d003      	beq.n	8007a60 <HAL_GPIO_Init+0x2f8>
        {
          tmp |= iocurrent;
 8007a58:	69fa      	ldr	r2, [r7, #28]
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	4313      	orrs	r3, r2
 8007a5e:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 8007a60:	4a2b      	ldr	r2, [pc, #172]	; (8007b10 <HAL_GPIO_Init+0x3a8>)
 8007a62:	69fb      	ldr	r3, [r7, #28]
 8007a64:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 8007a66:	4b2a      	ldr	r3, [pc, #168]	; (8007b10 <HAL_GPIO_Init+0x3a8>)
 8007a68:	685b      	ldr	r3, [r3, #4]
 8007a6a:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	43db      	mvns	r3, r3
 8007a70:	69fa      	ldr	r2, [r7, #28]
 8007a72:	4013      	ands	r3, r2
 8007a74:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8007a76:	683b      	ldr	r3, [r7, #0]
 8007a78:	685b      	ldr	r3, [r3, #4]
 8007a7a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d003      	beq.n	8007a8a <HAL_GPIO_Init+0x322>
        {
          tmp |= iocurrent;
 8007a82:	69fa      	ldr	r2, [r7, #28]
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	4313      	orrs	r3, r2
 8007a88:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 8007a8a:	4a21      	ldr	r2, [pc, #132]	; (8007b10 <HAL_GPIO_Init+0x3a8>)
 8007a8c:	69fb      	ldr	r3, [r7, #28]
 8007a8e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8007a90:	4b1f      	ldr	r3, [pc, #124]	; (8007b10 <HAL_GPIO_Init+0x3a8>)
 8007a92:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007a96:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	43db      	mvns	r3, r3
 8007a9c:	69fa      	ldr	r2, [r7, #28]
 8007a9e:	4013      	ands	r3, r2
 8007aa0:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8007aa2:	683b      	ldr	r3, [r7, #0]
 8007aa4:	685b      	ldr	r3, [r3, #4]
 8007aa6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d003      	beq.n	8007ab6 <HAL_GPIO_Init+0x34e>
        {
          tmp |= iocurrent;
 8007aae:	69fa      	ldr	r2, [r7, #28]
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	4313      	orrs	r3, r2
 8007ab4:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 8007ab6:	4a16      	ldr	r2, [pc, #88]	; (8007b10 <HAL_GPIO_Init+0x3a8>)
 8007ab8:	69fb      	ldr	r3, [r7, #28]
 8007aba:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        tmp = EXTI->IMR1;
 8007abe:	4b14      	ldr	r3, [pc, #80]	; (8007b10 <HAL_GPIO_Init+0x3a8>)
 8007ac0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007ac4:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	43db      	mvns	r3, r3
 8007aca:	69fa      	ldr	r2, [r7, #28]
 8007acc:	4013      	ands	r3, r2
 8007ace:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8007ad0:	683b      	ldr	r3, [r7, #0]
 8007ad2:	685b      	ldr	r3, [r3, #4]
 8007ad4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d003      	beq.n	8007ae4 <HAL_GPIO_Init+0x37c>
        {
          tmp |= iocurrent;
 8007adc:	69fa      	ldr	r2, [r7, #28]
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	4313      	orrs	r3, r2
 8007ae2:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 8007ae4:	4a0a      	ldr	r2, [pc, #40]	; (8007b10 <HAL_GPIO_Init+0x3a8>)
 8007ae6:	69fb      	ldr	r3, [r7, #28]
 8007ae8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      }
    }
    position++;
 8007aec:	697b      	ldr	r3, [r7, #20]
 8007aee:	3301      	adds	r3, #1
 8007af0:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8007af2:	683b      	ldr	r3, [r7, #0]
 8007af4:	681a      	ldr	r2, [r3, #0]
 8007af6:	697b      	ldr	r3, [r7, #20]
 8007af8:	fa22 f303 	lsr.w	r3, r2, r3
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	f47f ae3d 	bne.w	800777c <HAL_GPIO_Init+0x14>
  }
}
 8007b02:	bf00      	nop
 8007b04:	bf00      	nop
 8007b06:	3724      	adds	r7, #36	; 0x24
 8007b08:	46bd      	mov	sp, r7
 8007b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b0e:	4770      	bx	lr
 8007b10:	46022000 	.word	0x46022000
 8007b14:	002f7f7f 	.word	0x002f7f7f

08007b18 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8007b18:	b480      	push	{r7}
 8007b1a:	b089      	sub	sp, #36	; 0x24
 8007b1c:	af00      	add	r7, sp, #0
 8007b1e:	6078      	str	r0, [r7, #4]
 8007b20:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 8007b22:	2300      	movs	r3, #0
 8007b24:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	617b      	str	r3, [r7, #20]

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0U)
 8007b2a:	e0bc      	b.n	8007ca6 <HAL_GPIO_DeInit+0x18e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1UL << position);
 8007b2c:	2201      	movs	r2, #1
 8007b2e:	69bb      	ldr	r3, [r7, #24]
 8007b30:	fa02 f303 	lsl.w	r3, r2, r3
 8007b34:	683a      	ldr	r2, [r7, #0]
 8007b36:	4013      	ands	r3, r2
 8007b38:	613b      	str	r3, [r7, #16]

    /*Save Pin Position */
    pin_position = position;
 8007b3a:	69bb      	ldr	r3, [r7, #24]
 8007b3c:	61fb      	str	r3, [r7, #28]

    if (iocurrent != 0U)
 8007b3e:	693b      	ldr	r3, [r7, #16]
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	f000 80ad 	beq.w	8007ca0 <HAL_GPIO_DeInit+0x188>
    {
      /* In case of LPGPIO port selected */
      if (GPIOx == LPGPIO1)
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	4a5e      	ldr	r2, [pc, #376]	; (8007cc4 <HAL_GPIO_DeInit+0x1ac>)
 8007b4a:	4293      	cmp	r3, r2
 8007b4c:	d115      	bne.n	8007b7a <HAL_GPIO_DeInit+0x62>
      {
        /* Configure LP/IO in Input Mode */
        p_gpio  = LPGPIO_Map[pin_position].GPIO_PORT;
 8007b4e:	4a5e      	ldr	r2, [pc, #376]	; (8007cc8 <HAL_GPIO_DeInit+0x1b0>)
 8007b50:	69fb      	ldr	r3, [r7, #28]
 8007b52:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007b56:	617b      	str	r3, [r7, #20]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 8007b58:	4a5b      	ldr	r2, [pc, #364]	; (8007cc8 <HAL_GPIO_DeInit+0x1b0>)
 8007b5a:	69bb      	ldr	r3, [r7, #24]
 8007b5c:	00db      	lsls	r3, r3, #3
 8007b5e:	4413      	add	r3, r2
 8007b60:	685b      	ldr	r3, [r3, #4]
 8007b62:	61fb      	str	r3, [r7, #28]
        LPGPIO1->MODER &= ~(1U << pin_position);
 8007b64:	4b57      	ldr	r3, [pc, #348]	; (8007cc4 <HAL_GPIO_DeInit+0x1ac>)
 8007b66:	681a      	ldr	r2, [r3, #0]
 8007b68:	2101      	movs	r1, #1
 8007b6a:	69fb      	ldr	r3, [r7, #28]
 8007b6c:	fa01 f303 	lsl.w	r3, r1, r3
 8007b70:	43db      	mvns	r3, r3
 8007b72:	4954      	ldr	r1, [pc, #336]	; (8007cc4 <HAL_GPIO_DeInit+0x1ac>)
 8007b74:	4013      	ands	r3, r2
 8007b76:	600b      	str	r3, [r1, #0]
 8007b78:	e053      	b.n	8007c22 <HAL_GPIO_DeInit+0x10a>
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /*------------------------- EXTI Mode Configuration --------------------*/
        /* Clear the External Interrupt or Event for the current IO */
        tmp = EXTI->EXTICR[position >> 2U];
 8007b7a:	4a54      	ldr	r2, [pc, #336]	; (8007ccc <HAL_GPIO_DeInit+0x1b4>)
 8007b7c:	69bb      	ldr	r3, [r7, #24]
 8007b7e:	089b      	lsrs	r3, r3, #2
 8007b80:	3318      	adds	r3, #24
 8007b82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007b86:	60fb      	str	r3, [r7, #12]
        tmp &= ((0x0FUL) << (8U * (position & 0x03U)));
 8007b88:	69bb      	ldr	r3, [r7, #24]
 8007b8a:	f003 0303 	and.w	r3, r3, #3
 8007b8e:	00db      	lsls	r3, r3, #3
 8007b90:	220f      	movs	r2, #15
 8007b92:	fa02 f303 	lsl.w	r3, r2, r3
 8007b96:	68fa      	ldr	r2, [r7, #12]
 8007b98:	4013      	ands	r3, r2
 8007b9a:	60fb      	str	r3, [r7, #12]
        if (tmp == (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U))))
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	0a9a      	lsrs	r2, r3, #10
 8007ba0:	4b4b      	ldr	r3, [pc, #300]	; (8007cd0 <HAL_GPIO_DeInit+0x1b8>)
 8007ba2:	4013      	ands	r3, r2
 8007ba4:	69ba      	ldr	r2, [r7, #24]
 8007ba6:	f002 0203 	and.w	r2, r2, #3
 8007baa:	00d2      	lsls	r2, r2, #3
 8007bac:	4093      	lsls	r3, r2
 8007bae:	68fa      	ldr	r2, [r7, #12]
 8007bb0:	429a      	cmp	r2, r3
 8007bb2:	d136      	bne.n	8007c22 <HAL_GPIO_DeInit+0x10a>
        {
          /* Clear EXTI line configuration */
          EXTI->IMR1 &= ~(iocurrent);
 8007bb4:	4b45      	ldr	r3, [pc, #276]	; (8007ccc <HAL_GPIO_DeInit+0x1b4>)
 8007bb6:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8007bba:	693b      	ldr	r3, [r7, #16]
 8007bbc:	43db      	mvns	r3, r3
 8007bbe:	4943      	ldr	r1, [pc, #268]	; (8007ccc <HAL_GPIO_DeInit+0x1b4>)
 8007bc0:	4013      	ands	r3, r2
 8007bc2:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
          EXTI->EMR1 &= ~(iocurrent);
 8007bc6:	4b41      	ldr	r3, [pc, #260]	; (8007ccc <HAL_GPIO_DeInit+0x1b4>)
 8007bc8:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8007bcc:	693b      	ldr	r3, [r7, #16]
 8007bce:	43db      	mvns	r3, r3
 8007bd0:	493e      	ldr	r1, [pc, #248]	; (8007ccc <HAL_GPIO_DeInit+0x1b4>)
 8007bd2:	4013      	ands	r3, r2
 8007bd4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

          /* Clear Rising Falling edge configuration */
          EXTI->RTSR1 &= ~(iocurrent);
 8007bd8:	4b3c      	ldr	r3, [pc, #240]	; (8007ccc <HAL_GPIO_DeInit+0x1b4>)
 8007bda:	681a      	ldr	r2, [r3, #0]
 8007bdc:	693b      	ldr	r3, [r7, #16]
 8007bde:	43db      	mvns	r3, r3
 8007be0:	493a      	ldr	r1, [pc, #232]	; (8007ccc <HAL_GPIO_DeInit+0x1b4>)
 8007be2:	4013      	ands	r3, r2
 8007be4:	600b      	str	r3, [r1, #0]
          EXTI->FTSR1 &= ~(iocurrent);
 8007be6:	4b39      	ldr	r3, [pc, #228]	; (8007ccc <HAL_GPIO_DeInit+0x1b4>)
 8007be8:	685a      	ldr	r2, [r3, #4]
 8007bea:	693b      	ldr	r3, [r7, #16]
 8007bec:	43db      	mvns	r3, r3
 8007bee:	4937      	ldr	r1, [pc, #220]	; (8007ccc <HAL_GPIO_DeInit+0x1b4>)
 8007bf0:	4013      	ands	r3, r2
 8007bf2:	604b      	str	r3, [r1, #4]

          tmp = (0x0FUL) << (8U * (position & 0x03U));
 8007bf4:	69bb      	ldr	r3, [r7, #24]
 8007bf6:	f003 0303 	and.w	r3, r3, #3
 8007bfa:	00db      	lsls	r3, r3, #3
 8007bfc:	220f      	movs	r2, #15
 8007bfe:	fa02 f303 	lsl.w	r3, r2, r3
 8007c02:	60fb      	str	r3, [r7, #12]
          EXTI->EXTICR[position >> 2U] &= ~tmp;
 8007c04:	4a31      	ldr	r2, [pc, #196]	; (8007ccc <HAL_GPIO_DeInit+0x1b4>)
 8007c06:	69bb      	ldr	r3, [r7, #24]
 8007c08:	089b      	lsrs	r3, r3, #2
 8007c0a:	3318      	adds	r3, #24
 8007c0c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	43da      	mvns	r2, r3
 8007c14:	482d      	ldr	r0, [pc, #180]	; (8007ccc <HAL_GPIO_DeInit+0x1b4>)
 8007c16:	69bb      	ldr	r3, [r7, #24]
 8007c18:	089b      	lsrs	r3, r3, #2
 8007c1a:	400a      	ands	r2, r1
 8007c1c:	3318      	adds	r3, #24
 8007c1e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
        }
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      p_gpio->MODER |= (GPIO_MODER_MODE0 << (pin_position * 2U));
 8007c22:	697b      	ldr	r3, [r7, #20]
 8007c24:	681a      	ldr	r2, [r3, #0]
 8007c26:	69fb      	ldr	r3, [r7, #28]
 8007c28:	005b      	lsls	r3, r3, #1
 8007c2a:	2103      	movs	r1, #3
 8007c2c:	fa01 f303 	lsl.w	r3, r1, r3
 8007c30:	431a      	orrs	r2, r3
 8007c32:	697b      	ldr	r3, [r7, #20]
 8007c34:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      p_gpio->AFR[pin_position >> 3U] &= ~(0x0FUL << ((pin_position & 0x07U) * 4U));
 8007c36:	69fb      	ldr	r3, [r7, #28]
 8007c38:	08da      	lsrs	r2, r3, #3
 8007c3a:	697b      	ldr	r3, [r7, #20]
 8007c3c:	3208      	adds	r2, #8
 8007c3e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007c42:	69fb      	ldr	r3, [r7, #28]
 8007c44:	f003 0307 	and.w	r3, r3, #7
 8007c48:	009b      	lsls	r3, r3, #2
 8007c4a:	220f      	movs	r2, #15
 8007c4c:	fa02 f303 	lsl.w	r3, r2, r3
 8007c50:	43db      	mvns	r3, r3
 8007c52:	69fa      	ldr	r2, [r7, #28]
 8007c54:	08d2      	lsrs	r2, r2, #3
 8007c56:	4019      	ands	r1, r3
 8007c58:	697b      	ldr	r3, [r7, #20]
 8007c5a:	3208      	adds	r2, #8
 8007c5c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      p_gpio->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * 2U));
 8007c60:	697b      	ldr	r3, [r7, #20]
 8007c62:	689a      	ldr	r2, [r3, #8]
 8007c64:	69fb      	ldr	r3, [r7, #28]
 8007c66:	005b      	lsls	r3, r3, #1
 8007c68:	2103      	movs	r1, #3
 8007c6a:	fa01 f303 	lsl.w	r3, r1, r3
 8007c6e:	43db      	mvns	r3, r3
 8007c70:	401a      	ands	r2, r3
 8007c72:	697b      	ldr	r3, [r7, #20]
 8007c74:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      p_gpio->OTYPER  &= ~(GPIO_OTYPER_OT0 << pin_position);
 8007c76:	697b      	ldr	r3, [r7, #20]
 8007c78:	685a      	ldr	r2, [r3, #4]
 8007c7a:	2101      	movs	r1, #1
 8007c7c:	69fb      	ldr	r3, [r7, #28]
 8007c7e:	fa01 f303 	lsl.w	r3, r1, r3
 8007c82:	43db      	mvns	r3, r3
 8007c84:	401a      	ands	r2, r3
 8007c86:	697b      	ldr	r3, [r7, #20]
 8007c88:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      p_gpio->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (pin_position * 2U));
 8007c8a:	697b      	ldr	r3, [r7, #20]
 8007c8c:	68da      	ldr	r2, [r3, #12]
 8007c8e:	69fb      	ldr	r3, [r7, #28]
 8007c90:	005b      	lsls	r3, r3, #1
 8007c92:	2103      	movs	r1, #3
 8007c94:	fa01 f303 	lsl.w	r3, r1, r3
 8007c98:	43db      	mvns	r3, r3
 8007c9a:	401a      	ands	r2, r3
 8007c9c:	697b      	ldr	r3, [r7, #20]
 8007c9e:	60da      	str	r2, [r3, #12]
    }

    position++;
 8007ca0:	69bb      	ldr	r3, [r7, #24]
 8007ca2:	3301      	adds	r3, #1
 8007ca4:	61bb      	str	r3, [r7, #24]
  while ((GPIO_Pin >> position) != 0U)
 8007ca6:	683a      	ldr	r2, [r7, #0]
 8007ca8:	69bb      	ldr	r3, [r7, #24]
 8007caa:	fa22 f303 	lsr.w	r3, r2, r3
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	f47f af3c 	bne.w	8007b2c <HAL_GPIO_DeInit+0x14>
  }
}
 8007cb4:	bf00      	nop
 8007cb6:	bf00      	nop
 8007cb8:	3724      	adds	r7, #36	; 0x24
 8007cba:	46bd      	mov	sp, r7
 8007cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc0:	4770      	bx	lr
 8007cc2:	bf00      	nop
 8007cc4:	46020000 	.word	0x46020000
 8007cc8:	0800eed0 	.word	0x0800eed0
 8007ccc:	46022000 	.word	0x46022000
 8007cd0:	002f7f7f 	.word	0x002f7f7f

08007cd4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8007cd4:	b480      	push	{r7}
 8007cd6:	b085      	sub	sp, #20
 8007cd8:	af00      	add	r7, sp, #0
 8007cda:	6078      	str	r0, [r7, #4]
 8007cdc:	460b      	mov	r3, r1
 8007cde:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0U)
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	691a      	ldr	r2, [r3, #16]
 8007ce4:	887b      	ldrh	r3, [r7, #2]
 8007ce6:	4013      	ands	r3, r2
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d002      	beq.n	8007cf2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8007cec:	2301      	movs	r3, #1
 8007cee:	73fb      	strb	r3, [r7, #15]
 8007cf0:	e001      	b.n	8007cf6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8007cf2:	2300      	movs	r3, #0
 8007cf4:	73fb      	strb	r3, [r7, #15]
  }

  return bitstatus;
 8007cf6:	7bfb      	ldrb	r3, [r7, #15]
}
 8007cf8:	4618      	mov	r0, r3
 8007cfa:	3714      	adds	r7, #20
 8007cfc:	46bd      	mov	sp, r7
 8007cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d02:	4770      	bx	lr

08007d04 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007d04:	b480      	push	{r7}
 8007d06:	b083      	sub	sp, #12
 8007d08:	af00      	add	r7, sp, #0
 8007d0a:	6078      	str	r0, [r7, #4]
 8007d0c:	460b      	mov	r3, r1
 8007d0e:	807b      	strh	r3, [r7, #2]
 8007d10:	4613      	mov	r3, r2
 8007d12:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007d14:	787b      	ldrb	r3, [r7, #1]
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d003      	beq.n	8007d22 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8007d1a:	887a      	ldrh	r2, [r7, #2]
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
  }
}
 8007d20:	e002      	b.n	8007d28 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
 8007d22:	887a      	ldrh	r2, [r7, #2]
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	629a      	str	r2, [r3, #40]	; 0x28
}
 8007d28:	bf00      	nop
 8007d2a:	370c      	adds	r7, #12
 8007d2c:	46bd      	mov	sp, r7
 8007d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d32:	4770      	bx	lr

08007d34 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8007d34:	b480      	push	{r7}
 8007d36:	b085      	sub	sp, #20
 8007d38:	af00      	add	r7, sp, #0
 8007d3a:	6078      	str	r0, [r7, #4]
 8007d3c:	460b      	mov	r3, r1
 8007d3e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	695b      	ldr	r3, [r3, #20]
 8007d44:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8007d46:	887a      	ldrh	r2, [r7, #2]
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	4013      	ands	r3, r2
 8007d4c:	041a      	lsls	r2, r3, #16
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	43d9      	mvns	r1, r3
 8007d52:	887b      	ldrh	r3, [r7, #2]
 8007d54:	400b      	ands	r3, r1
 8007d56:	431a      	orrs	r2, r3
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	619a      	str	r2, [r3, #24]
}
 8007d5c:	bf00      	nop
 8007d5e:	3714      	adds	r7, #20
 8007d60:	46bd      	mov	sp, r7
 8007d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d66:	4770      	bx	lr

08007d68 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007d68:	b580      	push	{r7, lr}
 8007d6a:	b082      	sub	sp, #8
 8007d6c:	af00      	add	r7, sp, #0
 8007d6e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d101      	bne.n	8007d7a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007d76:	2301      	movs	r3, #1
 8007d78:	e081      	b.n	8007e7e <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007d80:	b2db      	uxtb	r3, r3
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d106      	bne.n	8007d94 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	2200      	movs	r2, #0
 8007d8a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8007d8e:	6878      	ldr	r0, [r7, #4]
 8007d90:	f7fc fe12 	bl	80049b8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	2224      	movs	r2, #36	; 0x24
 8007d98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	681a      	ldr	r2, [r3, #0]
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	f022 0201 	bic.w	r2, r2, #1
 8007daa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	685a      	ldr	r2, [r3, #4]
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8007db8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	689a      	ldr	r2, [r3, #8]
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007dc8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	68db      	ldr	r3, [r3, #12]
 8007dce:	2b01      	cmp	r3, #1
 8007dd0:	d107      	bne.n	8007de2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	689a      	ldr	r2, [r3, #8]
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007dde:	609a      	str	r2, [r3, #8]
 8007de0:	e006      	b.n	8007df0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	689a      	ldr	r2, [r3, #8]
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8007dee:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	68db      	ldr	r3, [r3, #12]
 8007df4:	2b02      	cmp	r3, #2
 8007df6:	d104      	bne.n	8007e02 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007e00:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	685b      	ldr	r3, [r3, #4]
 8007e08:	687a      	ldr	r2, [r7, #4]
 8007e0a:	6812      	ldr	r2, [r2, #0]
 8007e0c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8007e10:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007e14:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	68da      	ldr	r2, [r3, #12]
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007e24:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	691a      	ldr	r2, [r3, #16]
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	695b      	ldr	r3, [r3, #20]
 8007e2e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	699b      	ldr	r3, [r3, #24]
 8007e36:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	430a      	orrs	r2, r1
 8007e3e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	69d9      	ldr	r1, [r3, #28]
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	6a1a      	ldr	r2, [r3, #32]
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	430a      	orrs	r2, r1
 8007e4e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	681a      	ldr	r2, [r3, #0]
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	f042 0201 	orr.w	r2, r2, #1
 8007e5e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	2200      	movs	r2, #0
 8007e64:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	2220      	movs	r2, #32
 8007e6a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	2200      	movs	r2, #0
 8007e72:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	2200      	movs	r2, #0
 8007e78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8007e7c:	2300      	movs	r3, #0
}
 8007e7e:	4618      	mov	r0, r3
 8007e80:	3708      	adds	r7, #8
 8007e82:	46bd      	mov	sp, r7
 8007e84:	bd80      	pop	{r7, pc}

08007e86 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8007e86:	b580      	push	{r7, lr}
 8007e88:	b082      	sub	sp, #8
 8007e8a:	af00      	add	r7, sp, #0
 8007e8c:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d101      	bne.n	8007e98 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8007e94:	2301      	movs	r3, #1
 8007e96:	e021      	b.n	8007edc <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	2224      	movs	r2, #36	; 0x24
 8007e9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	681a      	ldr	r2, [r3, #0]
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	f022 0201 	bic.w	r2, r2, #1
 8007eae:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8007eb0:	6878      	ldr	r0, [r7, #4]
 8007eb2:	f7fc fe47 	bl	8004b44 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	2200      	movs	r2, #0
 8007eba:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	2200      	movs	r2, #0
 8007ec0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	2200      	movs	r2, #0
 8007ec8:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	2200      	movs	r2, #0
 8007ece:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	2200      	movs	r2, #0
 8007ed6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8007eda:	2300      	movs	r3, #0
}
 8007edc:	4618      	mov	r0, r3
 8007ede:	3708      	adds	r7, #8
 8007ee0:	46bd      	mov	sp, r7
 8007ee2:	bd80      	pop	{r7, pc}

08007ee4 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007ee4:	b580      	push	{r7, lr}
 8007ee6:	b088      	sub	sp, #32
 8007ee8:	af02      	add	r7, sp, #8
 8007eea:	60f8      	str	r0, [r7, #12]
 8007eec:	4608      	mov	r0, r1
 8007eee:	4611      	mov	r1, r2
 8007ef0:	461a      	mov	r2, r3
 8007ef2:	4603      	mov	r3, r0
 8007ef4:	817b      	strh	r3, [r7, #10]
 8007ef6:	460b      	mov	r3, r1
 8007ef8:	813b      	strh	r3, [r7, #8]
 8007efa:	4613      	mov	r3, r2
 8007efc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007f04:	b2db      	uxtb	r3, r3
 8007f06:	2b20      	cmp	r3, #32
 8007f08:	f040 80f9 	bne.w	80080fe <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007f0c:	6a3b      	ldr	r3, [r7, #32]
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d002      	beq.n	8007f18 <HAL_I2C_Mem_Write+0x34>
 8007f12:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d105      	bne.n	8007f24 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007f1e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8007f20:	2301      	movs	r3, #1
 8007f22:	e0ed      	b.n	8008100 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007f2a:	2b01      	cmp	r3, #1
 8007f2c:	d101      	bne.n	8007f32 <HAL_I2C_Mem_Write+0x4e>
 8007f2e:	2302      	movs	r3, #2
 8007f30:	e0e6      	b.n	8008100 <HAL_I2C_Mem_Write+0x21c>
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	2201      	movs	r2, #1
 8007f36:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8007f3a:	f7fd fc99 	bl	8005870 <HAL_GetTick>
 8007f3e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007f40:	697b      	ldr	r3, [r7, #20]
 8007f42:	9300      	str	r3, [sp, #0]
 8007f44:	2319      	movs	r3, #25
 8007f46:	2201      	movs	r2, #1
 8007f48:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007f4c:	68f8      	ldr	r0, [r7, #12]
 8007f4e:	f000 fac3 	bl	80084d8 <I2C_WaitOnFlagUntilTimeout>
 8007f52:	4603      	mov	r3, r0
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d001      	beq.n	8007f5c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8007f58:	2301      	movs	r3, #1
 8007f5a:	e0d1      	b.n	8008100 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	2221      	movs	r2, #33	; 0x21
 8007f60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	2240      	movs	r2, #64	; 0x40
 8007f68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	2200      	movs	r2, #0
 8007f70:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	6a3a      	ldr	r2, [r7, #32]
 8007f76:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8007f7c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	2200      	movs	r2, #0
 8007f82:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007f84:	88f8      	ldrh	r0, [r7, #6]
 8007f86:	893a      	ldrh	r2, [r7, #8]
 8007f88:	8979      	ldrh	r1, [r7, #10]
 8007f8a:	697b      	ldr	r3, [r7, #20]
 8007f8c:	9301      	str	r3, [sp, #4]
 8007f8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f90:	9300      	str	r3, [sp, #0]
 8007f92:	4603      	mov	r3, r0
 8007f94:	68f8      	ldr	r0, [r7, #12]
 8007f96:	f000 f9d3 	bl	8008340 <I2C_RequestMemoryWrite>
 8007f9a:	4603      	mov	r3, r0
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d005      	beq.n	8007fac <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	2200      	movs	r2, #0
 8007fa4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8007fa8:	2301      	movs	r3, #1
 8007faa:	e0a9      	b.n	8008100 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007fb0:	b29b      	uxth	r3, r3
 8007fb2:	2bff      	cmp	r3, #255	; 0xff
 8007fb4:	d90e      	bls.n	8007fd4 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	22ff      	movs	r2, #255	; 0xff
 8007fba:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007fc0:	b2da      	uxtb	r2, r3
 8007fc2:	8979      	ldrh	r1, [r7, #10]
 8007fc4:	2300      	movs	r3, #0
 8007fc6:	9300      	str	r3, [sp, #0]
 8007fc8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007fcc:	68f8      	ldr	r0, [r7, #12]
 8007fce:	f000 fc2b 	bl	8008828 <I2C_TransferConfig>
 8007fd2:	e00f      	b.n	8007ff4 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007fd8:	b29a      	uxth	r2, r3
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007fe2:	b2da      	uxtb	r2, r3
 8007fe4:	8979      	ldrh	r1, [r7, #10]
 8007fe6:	2300      	movs	r3, #0
 8007fe8:	9300      	str	r3, [sp, #0]
 8007fea:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007fee:	68f8      	ldr	r0, [r7, #12]
 8007ff0:	f000 fc1a 	bl	8008828 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007ff4:	697a      	ldr	r2, [r7, #20]
 8007ff6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007ff8:	68f8      	ldr	r0, [r7, #12]
 8007ffa:	f000 faad 	bl	8008558 <I2C_WaitOnTXISFlagUntilTimeout>
 8007ffe:	4603      	mov	r3, r0
 8008000:	2b00      	cmp	r3, #0
 8008002:	d001      	beq.n	8008008 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8008004:	2301      	movs	r3, #1
 8008006:	e07b      	b.n	8008100 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800800c:	781a      	ldrb	r2, [r3, #0]
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008018:	1c5a      	adds	r2, r3, #1
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008022:	b29b      	uxth	r3, r3
 8008024:	3b01      	subs	r3, #1
 8008026:	b29a      	uxth	r2, r3
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008030:	3b01      	subs	r3, #1
 8008032:	b29a      	uxth	r2, r3
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800803c:	b29b      	uxth	r3, r3
 800803e:	2b00      	cmp	r3, #0
 8008040:	d034      	beq.n	80080ac <HAL_I2C_Mem_Write+0x1c8>
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008046:	2b00      	cmp	r3, #0
 8008048:	d130      	bne.n	80080ac <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800804a:	697b      	ldr	r3, [r7, #20]
 800804c:	9300      	str	r3, [sp, #0]
 800804e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008050:	2200      	movs	r2, #0
 8008052:	2180      	movs	r1, #128	; 0x80
 8008054:	68f8      	ldr	r0, [r7, #12]
 8008056:	f000 fa3f 	bl	80084d8 <I2C_WaitOnFlagUntilTimeout>
 800805a:	4603      	mov	r3, r0
 800805c:	2b00      	cmp	r3, #0
 800805e:	d001      	beq.n	8008064 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8008060:	2301      	movs	r3, #1
 8008062:	e04d      	b.n	8008100 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008068:	b29b      	uxth	r3, r3
 800806a:	2bff      	cmp	r3, #255	; 0xff
 800806c:	d90e      	bls.n	800808c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	22ff      	movs	r2, #255	; 0xff
 8008072:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008078:	b2da      	uxtb	r2, r3
 800807a:	8979      	ldrh	r1, [r7, #10]
 800807c:	2300      	movs	r3, #0
 800807e:	9300      	str	r3, [sp, #0]
 8008080:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008084:	68f8      	ldr	r0, [r7, #12]
 8008086:	f000 fbcf 	bl	8008828 <I2C_TransferConfig>
 800808a:	e00f      	b.n	80080ac <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008090:	b29a      	uxth	r2, r3
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800809a:	b2da      	uxtb	r2, r3
 800809c:	8979      	ldrh	r1, [r7, #10]
 800809e:	2300      	movs	r3, #0
 80080a0:	9300      	str	r3, [sp, #0]
 80080a2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80080a6:	68f8      	ldr	r0, [r7, #12]
 80080a8:	f000 fbbe 	bl	8008828 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80080b0:	b29b      	uxth	r3, r3
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d19e      	bne.n	8007ff4 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80080b6:	697a      	ldr	r2, [r7, #20]
 80080b8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80080ba:	68f8      	ldr	r0, [r7, #12]
 80080bc:	f000 fa8c 	bl	80085d8 <I2C_WaitOnSTOPFlagUntilTimeout>
 80080c0:	4603      	mov	r3, r0
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d001      	beq.n	80080ca <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80080c6:	2301      	movs	r3, #1
 80080c8:	e01a      	b.n	8008100 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	2220      	movs	r2, #32
 80080d0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	6859      	ldr	r1, [r3, #4]
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	681a      	ldr	r2, [r3, #0]
 80080dc:	4b0a      	ldr	r3, [pc, #40]	; (8008108 <HAL_I2C_Mem_Write+0x224>)
 80080de:	400b      	ands	r3, r1
 80080e0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	2220      	movs	r2, #32
 80080e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	2200      	movs	r2, #0
 80080ee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	2200      	movs	r2, #0
 80080f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80080fa:	2300      	movs	r3, #0
 80080fc:	e000      	b.n	8008100 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80080fe:	2302      	movs	r3, #2
  }
}
 8008100:	4618      	mov	r0, r3
 8008102:	3718      	adds	r7, #24
 8008104:	46bd      	mov	sp, r7
 8008106:	bd80      	pop	{r7, pc}
 8008108:	fe00e800 	.word	0xfe00e800

0800810c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800810c:	b580      	push	{r7, lr}
 800810e:	b088      	sub	sp, #32
 8008110:	af02      	add	r7, sp, #8
 8008112:	60f8      	str	r0, [r7, #12]
 8008114:	4608      	mov	r0, r1
 8008116:	4611      	mov	r1, r2
 8008118:	461a      	mov	r2, r3
 800811a:	4603      	mov	r3, r0
 800811c:	817b      	strh	r3, [r7, #10]
 800811e:	460b      	mov	r3, r1
 8008120:	813b      	strh	r3, [r7, #8]
 8008122:	4613      	mov	r3, r2
 8008124:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800812c:	b2db      	uxtb	r3, r3
 800812e:	2b20      	cmp	r3, #32
 8008130:	f040 80fd 	bne.w	800832e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8008134:	6a3b      	ldr	r3, [r7, #32]
 8008136:	2b00      	cmp	r3, #0
 8008138:	d002      	beq.n	8008140 <HAL_I2C_Mem_Read+0x34>
 800813a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800813c:	2b00      	cmp	r3, #0
 800813e:	d105      	bne.n	800814c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008146:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8008148:	2301      	movs	r3, #1
 800814a:	e0f1      	b.n	8008330 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008152:	2b01      	cmp	r3, #1
 8008154:	d101      	bne.n	800815a <HAL_I2C_Mem_Read+0x4e>
 8008156:	2302      	movs	r3, #2
 8008158:	e0ea      	b.n	8008330 <HAL_I2C_Mem_Read+0x224>
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	2201      	movs	r2, #1
 800815e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8008162:	f7fd fb85 	bl	8005870 <HAL_GetTick>
 8008166:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8008168:	697b      	ldr	r3, [r7, #20]
 800816a:	9300      	str	r3, [sp, #0]
 800816c:	2319      	movs	r3, #25
 800816e:	2201      	movs	r2, #1
 8008170:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008174:	68f8      	ldr	r0, [r7, #12]
 8008176:	f000 f9af 	bl	80084d8 <I2C_WaitOnFlagUntilTimeout>
 800817a:	4603      	mov	r3, r0
 800817c:	2b00      	cmp	r3, #0
 800817e:	d001      	beq.n	8008184 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8008180:	2301      	movs	r3, #1
 8008182:	e0d5      	b.n	8008330 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	2222      	movs	r2, #34	; 0x22
 8008188:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	2240      	movs	r2, #64	; 0x40
 8008190:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	2200      	movs	r2, #0
 8008198:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	6a3a      	ldr	r2, [r7, #32]
 800819e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80081a4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	2200      	movs	r2, #0
 80081aa:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80081ac:	88f8      	ldrh	r0, [r7, #6]
 80081ae:	893a      	ldrh	r2, [r7, #8]
 80081b0:	8979      	ldrh	r1, [r7, #10]
 80081b2:	697b      	ldr	r3, [r7, #20]
 80081b4:	9301      	str	r3, [sp, #4]
 80081b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081b8:	9300      	str	r3, [sp, #0]
 80081ba:	4603      	mov	r3, r0
 80081bc:	68f8      	ldr	r0, [r7, #12]
 80081be:	f000 f913 	bl	80083e8 <I2C_RequestMemoryRead>
 80081c2:	4603      	mov	r3, r0
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d005      	beq.n	80081d4 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	2200      	movs	r2, #0
 80081cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80081d0:	2301      	movs	r3, #1
 80081d2:	e0ad      	b.n	8008330 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80081d8:	b29b      	uxth	r3, r3
 80081da:	2bff      	cmp	r3, #255	; 0xff
 80081dc:	d90e      	bls.n	80081fc <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	22ff      	movs	r2, #255	; 0xff
 80081e2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80081e8:	b2da      	uxtb	r2, r3
 80081ea:	8979      	ldrh	r1, [r7, #10]
 80081ec:	4b52      	ldr	r3, [pc, #328]	; (8008338 <HAL_I2C_Mem_Read+0x22c>)
 80081ee:	9300      	str	r3, [sp, #0]
 80081f0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80081f4:	68f8      	ldr	r0, [r7, #12]
 80081f6:	f000 fb17 	bl	8008828 <I2C_TransferConfig>
 80081fa:	e00f      	b.n	800821c <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008200:	b29a      	uxth	r2, r3
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800820a:	b2da      	uxtb	r2, r3
 800820c:	8979      	ldrh	r1, [r7, #10]
 800820e:	4b4a      	ldr	r3, [pc, #296]	; (8008338 <HAL_I2C_Mem_Read+0x22c>)
 8008210:	9300      	str	r3, [sp, #0]
 8008212:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008216:	68f8      	ldr	r0, [r7, #12]
 8008218:	f000 fb06 	bl	8008828 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800821c:	697b      	ldr	r3, [r7, #20]
 800821e:	9300      	str	r3, [sp, #0]
 8008220:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008222:	2200      	movs	r2, #0
 8008224:	2104      	movs	r1, #4
 8008226:	68f8      	ldr	r0, [r7, #12]
 8008228:	f000 f956 	bl	80084d8 <I2C_WaitOnFlagUntilTimeout>
 800822c:	4603      	mov	r3, r0
 800822e:	2b00      	cmp	r3, #0
 8008230:	d001      	beq.n	8008236 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8008232:	2301      	movs	r3, #1
 8008234:	e07c      	b.n	8008330 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008240:	b2d2      	uxtb	r2, r2
 8008242:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008248:	1c5a      	adds	r2, r3, #1
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008252:	3b01      	subs	r3, #1
 8008254:	b29a      	uxth	r2, r3
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800825e:	b29b      	uxth	r3, r3
 8008260:	3b01      	subs	r3, #1
 8008262:	b29a      	uxth	r2, r3
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800826c:	b29b      	uxth	r3, r3
 800826e:	2b00      	cmp	r3, #0
 8008270:	d034      	beq.n	80082dc <HAL_I2C_Mem_Read+0x1d0>
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008276:	2b00      	cmp	r3, #0
 8008278:	d130      	bne.n	80082dc <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800827a:	697b      	ldr	r3, [r7, #20]
 800827c:	9300      	str	r3, [sp, #0]
 800827e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008280:	2200      	movs	r2, #0
 8008282:	2180      	movs	r1, #128	; 0x80
 8008284:	68f8      	ldr	r0, [r7, #12]
 8008286:	f000 f927 	bl	80084d8 <I2C_WaitOnFlagUntilTimeout>
 800828a:	4603      	mov	r3, r0
 800828c:	2b00      	cmp	r3, #0
 800828e:	d001      	beq.n	8008294 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8008290:	2301      	movs	r3, #1
 8008292:	e04d      	b.n	8008330 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008298:	b29b      	uxth	r3, r3
 800829a:	2bff      	cmp	r3, #255	; 0xff
 800829c:	d90e      	bls.n	80082bc <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	22ff      	movs	r2, #255	; 0xff
 80082a2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80082a8:	b2da      	uxtb	r2, r3
 80082aa:	8979      	ldrh	r1, [r7, #10]
 80082ac:	2300      	movs	r3, #0
 80082ae:	9300      	str	r3, [sp, #0]
 80082b0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80082b4:	68f8      	ldr	r0, [r7, #12]
 80082b6:	f000 fab7 	bl	8008828 <I2C_TransferConfig>
 80082ba:	e00f      	b.n	80082dc <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80082c0:	b29a      	uxth	r2, r3
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80082ca:	b2da      	uxtb	r2, r3
 80082cc:	8979      	ldrh	r1, [r7, #10]
 80082ce:	2300      	movs	r3, #0
 80082d0:	9300      	str	r3, [sp, #0]
 80082d2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80082d6:	68f8      	ldr	r0, [r7, #12]
 80082d8:	f000 faa6 	bl	8008828 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80082e0:	b29b      	uxth	r3, r3
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d19a      	bne.n	800821c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80082e6:	697a      	ldr	r2, [r7, #20]
 80082e8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80082ea:	68f8      	ldr	r0, [r7, #12]
 80082ec:	f000 f974 	bl	80085d8 <I2C_WaitOnSTOPFlagUntilTimeout>
 80082f0:	4603      	mov	r3, r0
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d001      	beq.n	80082fa <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80082f6:	2301      	movs	r3, #1
 80082f8:	e01a      	b.n	8008330 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	2220      	movs	r2, #32
 8008300:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	6859      	ldr	r1, [r3, #4]
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	681a      	ldr	r2, [r3, #0]
 800830c:	4b0b      	ldr	r3, [pc, #44]	; (800833c <HAL_I2C_Mem_Read+0x230>)
 800830e:	400b      	ands	r3, r1
 8008310:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	2220      	movs	r2, #32
 8008316:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	2200      	movs	r2, #0
 800831e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	2200      	movs	r2, #0
 8008326:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800832a:	2300      	movs	r3, #0
 800832c:	e000      	b.n	8008330 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800832e:	2302      	movs	r3, #2
  }
}
 8008330:	4618      	mov	r0, r3
 8008332:	3718      	adds	r7, #24
 8008334:	46bd      	mov	sp, r7
 8008336:	bd80      	pop	{r7, pc}
 8008338:	80002400 	.word	0x80002400
 800833c:	fe00e800 	.word	0xfe00e800

08008340 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8008340:	b580      	push	{r7, lr}
 8008342:	b086      	sub	sp, #24
 8008344:	af02      	add	r7, sp, #8
 8008346:	60f8      	str	r0, [r7, #12]
 8008348:	4608      	mov	r0, r1
 800834a:	4611      	mov	r1, r2
 800834c:	461a      	mov	r2, r3
 800834e:	4603      	mov	r3, r0
 8008350:	817b      	strh	r3, [r7, #10]
 8008352:	460b      	mov	r3, r1
 8008354:	813b      	strh	r3, [r7, #8]
 8008356:	4613      	mov	r3, r2
 8008358:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800835a:	88fb      	ldrh	r3, [r7, #6]
 800835c:	b2da      	uxtb	r2, r3
 800835e:	8979      	ldrh	r1, [r7, #10]
 8008360:	4b20      	ldr	r3, [pc, #128]	; (80083e4 <I2C_RequestMemoryWrite+0xa4>)
 8008362:	9300      	str	r3, [sp, #0]
 8008364:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008368:	68f8      	ldr	r0, [r7, #12]
 800836a:	f000 fa5d 	bl	8008828 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800836e:	69fa      	ldr	r2, [r7, #28]
 8008370:	69b9      	ldr	r1, [r7, #24]
 8008372:	68f8      	ldr	r0, [r7, #12]
 8008374:	f000 f8f0 	bl	8008558 <I2C_WaitOnTXISFlagUntilTimeout>
 8008378:	4603      	mov	r3, r0
 800837a:	2b00      	cmp	r3, #0
 800837c:	d001      	beq.n	8008382 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800837e:	2301      	movs	r3, #1
 8008380:	e02c      	b.n	80083dc <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008382:	88fb      	ldrh	r3, [r7, #6]
 8008384:	2b01      	cmp	r3, #1
 8008386:	d105      	bne.n	8008394 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008388:	893b      	ldrh	r3, [r7, #8]
 800838a:	b2da      	uxtb	r2, r3
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	629a      	str	r2, [r3, #40]	; 0x28
 8008392:	e015      	b.n	80083c0 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8008394:	893b      	ldrh	r3, [r7, #8]
 8008396:	0a1b      	lsrs	r3, r3, #8
 8008398:	b29b      	uxth	r3, r3
 800839a:	b2da      	uxtb	r2, r3
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80083a2:	69fa      	ldr	r2, [r7, #28]
 80083a4:	69b9      	ldr	r1, [r7, #24]
 80083a6:	68f8      	ldr	r0, [r7, #12]
 80083a8:	f000 f8d6 	bl	8008558 <I2C_WaitOnTXISFlagUntilTimeout>
 80083ac:	4603      	mov	r3, r0
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d001      	beq.n	80083b6 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80083b2:	2301      	movs	r3, #1
 80083b4:	e012      	b.n	80083dc <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80083b6:	893b      	ldrh	r3, [r7, #8]
 80083b8:	b2da      	uxtb	r2, r3
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80083c0:	69fb      	ldr	r3, [r7, #28]
 80083c2:	9300      	str	r3, [sp, #0]
 80083c4:	69bb      	ldr	r3, [r7, #24]
 80083c6:	2200      	movs	r2, #0
 80083c8:	2180      	movs	r1, #128	; 0x80
 80083ca:	68f8      	ldr	r0, [r7, #12]
 80083cc:	f000 f884 	bl	80084d8 <I2C_WaitOnFlagUntilTimeout>
 80083d0:	4603      	mov	r3, r0
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d001      	beq.n	80083da <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80083d6:	2301      	movs	r3, #1
 80083d8:	e000      	b.n	80083dc <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80083da:	2300      	movs	r3, #0
}
 80083dc:	4618      	mov	r0, r3
 80083de:	3710      	adds	r7, #16
 80083e0:	46bd      	mov	sp, r7
 80083e2:	bd80      	pop	{r7, pc}
 80083e4:	80002000 	.word	0x80002000

080083e8 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80083e8:	b580      	push	{r7, lr}
 80083ea:	b086      	sub	sp, #24
 80083ec:	af02      	add	r7, sp, #8
 80083ee:	60f8      	str	r0, [r7, #12]
 80083f0:	4608      	mov	r0, r1
 80083f2:	4611      	mov	r1, r2
 80083f4:	461a      	mov	r2, r3
 80083f6:	4603      	mov	r3, r0
 80083f8:	817b      	strh	r3, [r7, #10]
 80083fa:	460b      	mov	r3, r1
 80083fc:	813b      	strh	r3, [r7, #8]
 80083fe:	4613      	mov	r3, r2
 8008400:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8008402:	88fb      	ldrh	r3, [r7, #6]
 8008404:	b2da      	uxtb	r2, r3
 8008406:	8979      	ldrh	r1, [r7, #10]
 8008408:	4b20      	ldr	r3, [pc, #128]	; (800848c <I2C_RequestMemoryRead+0xa4>)
 800840a:	9300      	str	r3, [sp, #0]
 800840c:	2300      	movs	r3, #0
 800840e:	68f8      	ldr	r0, [r7, #12]
 8008410:	f000 fa0a 	bl	8008828 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008414:	69fa      	ldr	r2, [r7, #28]
 8008416:	69b9      	ldr	r1, [r7, #24]
 8008418:	68f8      	ldr	r0, [r7, #12]
 800841a:	f000 f89d 	bl	8008558 <I2C_WaitOnTXISFlagUntilTimeout>
 800841e:	4603      	mov	r3, r0
 8008420:	2b00      	cmp	r3, #0
 8008422:	d001      	beq.n	8008428 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8008424:	2301      	movs	r3, #1
 8008426:	e02c      	b.n	8008482 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008428:	88fb      	ldrh	r3, [r7, #6]
 800842a:	2b01      	cmp	r3, #1
 800842c:	d105      	bne.n	800843a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800842e:	893b      	ldrh	r3, [r7, #8]
 8008430:	b2da      	uxtb	r2, r3
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	629a      	str	r2, [r3, #40]	; 0x28
 8008438:	e015      	b.n	8008466 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800843a:	893b      	ldrh	r3, [r7, #8]
 800843c:	0a1b      	lsrs	r3, r3, #8
 800843e:	b29b      	uxth	r3, r3
 8008440:	b2da      	uxtb	r2, r3
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008448:	69fa      	ldr	r2, [r7, #28]
 800844a:	69b9      	ldr	r1, [r7, #24]
 800844c:	68f8      	ldr	r0, [r7, #12]
 800844e:	f000 f883 	bl	8008558 <I2C_WaitOnTXISFlagUntilTimeout>
 8008452:	4603      	mov	r3, r0
 8008454:	2b00      	cmp	r3, #0
 8008456:	d001      	beq.n	800845c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8008458:	2301      	movs	r3, #1
 800845a:	e012      	b.n	8008482 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800845c:	893b      	ldrh	r3, [r7, #8]
 800845e:	b2da      	uxtb	r2, r3
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8008466:	69fb      	ldr	r3, [r7, #28]
 8008468:	9300      	str	r3, [sp, #0]
 800846a:	69bb      	ldr	r3, [r7, #24]
 800846c:	2200      	movs	r2, #0
 800846e:	2140      	movs	r1, #64	; 0x40
 8008470:	68f8      	ldr	r0, [r7, #12]
 8008472:	f000 f831 	bl	80084d8 <I2C_WaitOnFlagUntilTimeout>
 8008476:	4603      	mov	r3, r0
 8008478:	2b00      	cmp	r3, #0
 800847a:	d001      	beq.n	8008480 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800847c:	2301      	movs	r3, #1
 800847e:	e000      	b.n	8008482 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8008480:	2300      	movs	r3, #0
}
 8008482:	4618      	mov	r0, r3
 8008484:	3710      	adds	r7, #16
 8008486:	46bd      	mov	sp, r7
 8008488:	bd80      	pop	{r7, pc}
 800848a:	bf00      	nop
 800848c:	80002000 	.word	0x80002000

08008490 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8008490:	b480      	push	{r7}
 8008492:	b083      	sub	sp, #12
 8008494:	af00      	add	r7, sp, #0
 8008496:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	699b      	ldr	r3, [r3, #24]
 800849e:	f003 0302 	and.w	r3, r3, #2
 80084a2:	2b02      	cmp	r3, #2
 80084a4:	d103      	bne.n	80084ae <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	2200      	movs	r2, #0
 80084ac:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	699b      	ldr	r3, [r3, #24]
 80084b4:	f003 0301 	and.w	r3, r3, #1
 80084b8:	2b01      	cmp	r3, #1
 80084ba:	d007      	beq.n	80084cc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	699a      	ldr	r2, [r3, #24]
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	f042 0201 	orr.w	r2, r2, #1
 80084ca:	619a      	str	r2, [r3, #24]
  }
}
 80084cc:	bf00      	nop
 80084ce:	370c      	adds	r7, #12
 80084d0:	46bd      	mov	sp, r7
 80084d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084d6:	4770      	bx	lr

080084d8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80084d8:	b580      	push	{r7, lr}
 80084da:	b084      	sub	sp, #16
 80084dc:	af00      	add	r7, sp, #0
 80084de:	60f8      	str	r0, [r7, #12]
 80084e0:	60b9      	str	r1, [r7, #8]
 80084e2:	603b      	str	r3, [r7, #0]
 80084e4:	4613      	mov	r3, r2
 80084e6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80084e8:	e022      	b.n	8008530 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80084ea:	683b      	ldr	r3, [r7, #0]
 80084ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084f0:	d01e      	beq.n	8008530 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80084f2:	f7fd f9bd 	bl	8005870 <HAL_GetTick>
 80084f6:	4602      	mov	r2, r0
 80084f8:	69bb      	ldr	r3, [r7, #24]
 80084fa:	1ad3      	subs	r3, r2, r3
 80084fc:	683a      	ldr	r2, [r7, #0]
 80084fe:	429a      	cmp	r2, r3
 8008500:	d302      	bcc.n	8008508 <I2C_WaitOnFlagUntilTimeout+0x30>
 8008502:	683b      	ldr	r3, [r7, #0]
 8008504:	2b00      	cmp	r3, #0
 8008506:	d113      	bne.n	8008530 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800850c:	f043 0220 	orr.w	r2, r3, #32
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	2220      	movs	r2, #32
 8008518:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	2200      	movs	r2, #0
 8008520:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	2200      	movs	r2, #0
 8008528:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800852c:	2301      	movs	r3, #1
 800852e:	e00f      	b.n	8008550 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	699a      	ldr	r2, [r3, #24]
 8008536:	68bb      	ldr	r3, [r7, #8]
 8008538:	4013      	ands	r3, r2
 800853a:	68ba      	ldr	r2, [r7, #8]
 800853c:	429a      	cmp	r2, r3
 800853e:	bf0c      	ite	eq
 8008540:	2301      	moveq	r3, #1
 8008542:	2300      	movne	r3, #0
 8008544:	b2db      	uxtb	r3, r3
 8008546:	461a      	mov	r2, r3
 8008548:	79fb      	ldrb	r3, [r7, #7]
 800854a:	429a      	cmp	r2, r3
 800854c:	d0cd      	beq.n	80084ea <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800854e:	2300      	movs	r3, #0
}
 8008550:	4618      	mov	r0, r3
 8008552:	3710      	adds	r7, #16
 8008554:	46bd      	mov	sp, r7
 8008556:	bd80      	pop	{r7, pc}

08008558 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8008558:	b580      	push	{r7, lr}
 800855a:	b084      	sub	sp, #16
 800855c:	af00      	add	r7, sp, #0
 800855e:	60f8      	str	r0, [r7, #12]
 8008560:	60b9      	str	r1, [r7, #8]
 8008562:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8008564:	e02c      	b.n	80085c0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8008566:	687a      	ldr	r2, [r7, #4]
 8008568:	68b9      	ldr	r1, [r7, #8]
 800856a:	68f8      	ldr	r0, [r7, #12]
 800856c:	f000 f870 	bl	8008650 <I2C_IsErrorOccurred>
 8008570:	4603      	mov	r3, r0
 8008572:	2b00      	cmp	r3, #0
 8008574:	d001      	beq.n	800857a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8008576:	2301      	movs	r3, #1
 8008578:	e02a      	b.n	80085d0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800857a:	68bb      	ldr	r3, [r7, #8]
 800857c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008580:	d01e      	beq.n	80085c0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008582:	f7fd f975 	bl	8005870 <HAL_GetTick>
 8008586:	4602      	mov	r2, r0
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	1ad3      	subs	r3, r2, r3
 800858c:	68ba      	ldr	r2, [r7, #8]
 800858e:	429a      	cmp	r2, r3
 8008590:	d302      	bcc.n	8008598 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8008592:	68bb      	ldr	r3, [r7, #8]
 8008594:	2b00      	cmp	r3, #0
 8008596:	d113      	bne.n	80085c0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800859c:	f043 0220 	orr.w	r2, r3, #32
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	2220      	movs	r2, #32
 80085a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	2200      	movs	r2, #0
 80085b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	2200      	movs	r2, #0
 80085b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80085bc:	2301      	movs	r3, #1
 80085be:	e007      	b.n	80085d0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	699b      	ldr	r3, [r3, #24]
 80085c6:	f003 0302 	and.w	r3, r3, #2
 80085ca:	2b02      	cmp	r3, #2
 80085cc:	d1cb      	bne.n	8008566 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80085ce:	2300      	movs	r3, #0
}
 80085d0:	4618      	mov	r0, r3
 80085d2:	3710      	adds	r7, #16
 80085d4:	46bd      	mov	sp, r7
 80085d6:	bd80      	pop	{r7, pc}

080085d8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80085d8:	b580      	push	{r7, lr}
 80085da:	b084      	sub	sp, #16
 80085dc:	af00      	add	r7, sp, #0
 80085de:	60f8      	str	r0, [r7, #12]
 80085e0:	60b9      	str	r1, [r7, #8]
 80085e2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80085e4:	e028      	b.n	8008638 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80085e6:	687a      	ldr	r2, [r7, #4]
 80085e8:	68b9      	ldr	r1, [r7, #8]
 80085ea:	68f8      	ldr	r0, [r7, #12]
 80085ec:	f000 f830 	bl	8008650 <I2C_IsErrorOccurred>
 80085f0:	4603      	mov	r3, r0
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d001      	beq.n	80085fa <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80085f6:	2301      	movs	r3, #1
 80085f8:	e026      	b.n	8008648 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80085fa:	f7fd f939 	bl	8005870 <HAL_GetTick>
 80085fe:	4602      	mov	r2, r0
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	1ad3      	subs	r3, r2, r3
 8008604:	68ba      	ldr	r2, [r7, #8]
 8008606:	429a      	cmp	r2, r3
 8008608:	d302      	bcc.n	8008610 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800860a:	68bb      	ldr	r3, [r7, #8]
 800860c:	2b00      	cmp	r3, #0
 800860e:	d113      	bne.n	8008638 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008614:	f043 0220 	orr.w	r2, r3, #32
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	2220      	movs	r2, #32
 8008620:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	2200      	movs	r2, #0
 8008628:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	2200      	movs	r2, #0
 8008630:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8008634:	2301      	movs	r3, #1
 8008636:	e007      	b.n	8008648 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	699b      	ldr	r3, [r3, #24]
 800863e:	f003 0320 	and.w	r3, r3, #32
 8008642:	2b20      	cmp	r3, #32
 8008644:	d1cf      	bne.n	80085e6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8008646:	2300      	movs	r3, #0
}
 8008648:	4618      	mov	r0, r3
 800864a:	3710      	adds	r7, #16
 800864c:	46bd      	mov	sp, r7
 800864e:	bd80      	pop	{r7, pc}

08008650 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008650:	b580      	push	{r7, lr}
 8008652:	b08a      	sub	sp, #40	; 0x28
 8008654:	af00      	add	r7, sp, #0
 8008656:	60f8      	str	r0, [r7, #12]
 8008658:	60b9      	str	r1, [r7, #8]
 800865a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800865c:	2300      	movs	r3, #0
 800865e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	699b      	ldr	r3, [r3, #24]
 8008668:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800866a:	2300      	movs	r3, #0
 800866c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8008672:	69bb      	ldr	r3, [r7, #24]
 8008674:	f003 0310 	and.w	r3, r3, #16
 8008678:	2b00      	cmp	r3, #0
 800867a:	d075      	beq.n	8008768 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	2210      	movs	r2, #16
 8008682:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8008684:	e056      	b.n	8008734 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8008686:	68bb      	ldr	r3, [r7, #8]
 8008688:	f1b3 3fff 	cmp.w	r3, #4294967295
 800868c:	d052      	beq.n	8008734 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800868e:	f7fd f8ef 	bl	8005870 <HAL_GetTick>
 8008692:	4602      	mov	r2, r0
 8008694:	69fb      	ldr	r3, [r7, #28]
 8008696:	1ad3      	subs	r3, r2, r3
 8008698:	68ba      	ldr	r2, [r7, #8]
 800869a:	429a      	cmp	r2, r3
 800869c:	d302      	bcc.n	80086a4 <I2C_IsErrorOccurred+0x54>
 800869e:	68bb      	ldr	r3, [r7, #8]
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d147      	bne.n	8008734 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	685b      	ldr	r3, [r3, #4]
 80086aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80086ae:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80086b6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	699b      	ldr	r3, [r3, #24]
 80086be:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80086c2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80086c6:	d12e      	bne.n	8008726 <I2C_IsErrorOccurred+0xd6>
 80086c8:	697b      	ldr	r3, [r7, #20]
 80086ca:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80086ce:	d02a      	beq.n	8008726 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 80086d0:	7cfb      	ldrb	r3, [r7, #19]
 80086d2:	2b20      	cmp	r3, #32
 80086d4:	d027      	beq.n	8008726 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	685a      	ldr	r2, [r3, #4]
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80086e4:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80086e6:	f7fd f8c3 	bl	8005870 <HAL_GetTick>
 80086ea:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80086ec:	e01b      	b.n	8008726 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80086ee:	f7fd f8bf 	bl	8005870 <HAL_GetTick>
 80086f2:	4602      	mov	r2, r0
 80086f4:	69fb      	ldr	r3, [r7, #28]
 80086f6:	1ad3      	subs	r3, r2, r3
 80086f8:	2b19      	cmp	r3, #25
 80086fa:	d914      	bls.n	8008726 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008700:	f043 0220 	orr.w	r2, r3, #32
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	2220      	movs	r2, #32
 800870c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	2200      	movs	r2, #0
 8008714:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	2200      	movs	r2, #0
 800871c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 8008720:	2301      	movs	r3, #1
 8008722:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	699b      	ldr	r3, [r3, #24]
 800872c:	f003 0320 	and.w	r3, r3, #32
 8008730:	2b20      	cmp	r3, #32
 8008732:	d1dc      	bne.n	80086ee <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	699b      	ldr	r3, [r3, #24]
 800873a:	f003 0320 	and.w	r3, r3, #32
 800873e:	2b20      	cmp	r3, #32
 8008740:	d003      	beq.n	800874a <I2C_IsErrorOccurred+0xfa>
 8008742:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008746:	2b00      	cmp	r3, #0
 8008748:	d09d      	beq.n	8008686 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800874a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800874e:	2b00      	cmp	r3, #0
 8008750:	d103      	bne.n	800875a <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	2220      	movs	r2, #32
 8008758:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800875a:	6a3b      	ldr	r3, [r7, #32]
 800875c:	f043 0304 	orr.w	r3, r3, #4
 8008760:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8008762:	2301      	movs	r3, #1
 8008764:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	699b      	ldr	r3, [r3, #24]
 800876e:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8008770:	69bb      	ldr	r3, [r7, #24]
 8008772:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008776:	2b00      	cmp	r3, #0
 8008778:	d00b      	beq.n	8008792 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800877a:	6a3b      	ldr	r3, [r7, #32]
 800877c:	f043 0301 	orr.w	r3, r3, #1
 8008780:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	f44f 7280 	mov.w	r2, #256	; 0x100
 800878a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800878c:	2301      	movs	r3, #1
 800878e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8008792:	69bb      	ldr	r3, [r7, #24]
 8008794:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008798:	2b00      	cmp	r3, #0
 800879a:	d00b      	beq.n	80087b4 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800879c:	6a3b      	ldr	r3, [r7, #32]
 800879e:	f043 0308 	orr.w	r3, r3, #8
 80087a2:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80087ac:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80087ae:	2301      	movs	r3, #1
 80087b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80087b4:	69bb      	ldr	r3, [r7, #24]
 80087b6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d00b      	beq.n	80087d6 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80087be:	6a3b      	ldr	r3, [r7, #32]
 80087c0:	f043 0302 	orr.w	r3, r3, #2
 80087c4:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	f44f 7200 	mov.w	r2, #512	; 0x200
 80087ce:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80087d0:	2301      	movs	r3, #1
 80087d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80087d6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d01c      	beq.n	8008818 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80087de:	68f8      	ldr	r0, [r7, #12]
 80087e0:	f7ff fe56 	bl	8008490 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	6859      	ldr	r1, [r3, #4]
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	681a      	ldr	r2, [r3, #0]
 80087ee:	4b0d      	ldr	r3, [pc, #52]	; (8008824 <I2C_IsErrorOccurred+0x1d4>)
 80087f0:	400b      	ands	r3, r1
 80087f2:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80087f8:	6a3b      	ldr	r3, [r7, #32]
 80087fa:	431a      	orrs	r2, r3
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	2220      	movs	r2, #32
 8008804:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	2200      	movs	r2, #0
 800880c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	2200      	movs	r2, #0
 8008814:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8008818:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800881c:	4618      	mov	r0, r3
 800881e:	3728      	adds	r7, #40	; 0x28
 8008820:	46bd      	mov	sp, r7
 8008822:	bd80      	pop	{r7, pc}
 8008824:	fe00e800 	.word	0xfe00e800

08008828 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8008828:	b480      	push	{r7}
 800882a:	b087      	sub	sp, #28
 800882c:	af00      	add	r7, sp, #0
 800882e:	60f8      	str	r0, [r7, #12]
 8008830:	607b      	str	r3, [r7, #4]
 8008832:	460b      	mov	r3, r1
 8008834:	817b      	strh	r3, [r7, #10]
 8008836:	4613      	mov	r3, r2
 8008838:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800883a:	897b      	ldrh	r3, [r7, #10]
 800883c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8008840:	7a7b      	ldrb	r3, [r7, #9]
 8008842:	041b      	lsls	r3, r3, #16
 8008844:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008848:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800884e:	6a3b      	ldr	r3, [r7, #32]
 8008850:	4313      	orrs	r3, r2
 8008852:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008856:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	685a      	ldr	r2, [r3, #4]
 800885e:	6a3b      	ldr	r3, [r7, #32]
 8008860:	0d5b      	lsrs	r3, r3, #21
 8008862:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8008866:	4b08      	ldr	r3, [pc, #32]	; (8008888 <I2C_TransferConfig+0x60>)
 8008868:	430b      	orrs	r3, r1
 800886a:	43db      	mvns	r3, r3
 800886c:	ea02 0103 	and.w	r1, r2, r3
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	697a      	ldr	r2, [r7, #20]
 8008876:	430a      	orrs	r2, r1
 8008878:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800887a:	bf00      	nop
 800887c:	371c      	adds	r7, #28
 800887e:	46bd      	mov	sp, r7
 8008880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008884:	4770      	bx	lr
 8008886:	bf00      	nop
 8008888:	03ff63ff 	.word	0x03ff63ff

0800888c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800888c:	b480      	push	{r7}
 800888e:	b083      	sub	sp, #12
 8008890:	af00      	add	r7, sp, #0
 8008892:	6078      	str	r0, [r7, #4]
 8008894:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800889c:	b2db      	uxtb	r3, r3
 800889e:	2b20      	cmp	r3, #32
 80088a0:	d138      	bne.n	8008914 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80088a8:	2b01      	cmp	r3, #1
 80088aa:	d101      	bne.n	80088b0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80088ac:	2302      	movs	r3, #2
 80088ae:	e032      	b.n	8008916 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	2201      	movs	r2, #1
 80088b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	2224      	movs	r2, #36	; 0x24
 80088bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	681a      	ldr	r2, [r3, #0]
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	f022 0201 	bic.w	r2, r2, #1
 80088ce:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	681a      	ldr	r2, [r3, #0]
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80088de:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	6819      	ldr	r1, [r3, #0]
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	683a      	ldr	r2, [r7, #0]
 80088ec:	430a      	orrs	r2, r1
 80088ee:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	681a      	ldr	r2, [r3, #0]
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	f042 0201 	orr.w	r2, r2, #1
 80088fe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	2220      	movs	r2, #32
 8008904:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	2200      	movs	r2, #0
 800890c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008910:	2300      	movs	r3, #0
 8008912:	e000      	b.n	8008916 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8008914:	2302      	movs	r3, #2
  }
}
 8008916:	4618      	mov	r0, r3
 8008918:	370c      	adds	r7, #12
 800891a:	46bd      	mov	sp, r7
 800891c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008920:	4770      	bx	lr

08008922 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8008922:	b480      	push	{r7}
 8008924:	b085      	sub	sp, #20
 8008926:	af00      	add	r7, sp, #0
 8008928:	6078      	str	r0, [r7, #4]
 800892a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008932:	b2db      	uxtb	r3, r3
 8008934:	2b20      	cmp	r3, #32
 8008936:	d139      	bne.n	80089ac <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800893e:	2b01      	cmp	r3, #1
 8008940:	d101      	bne.n	8008946 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8008942:	2302      	movs	r3, #2
 8008944:	e033      	b.n	80089ae <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	2201      	movs	r2, #1
 800894a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	2224      	movs	r2, #36	; 0x24
 8008952:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	681a      	ldr	r2, [r3, #0]
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	f022 0201 	bic.w	r2, r2, #1
 8008964:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8008974:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8008976:	683b      	ldr	r3, [r7, #0]
 8008978:	021b      	lsls	r3, r3, #8
 800897a:	68fa      	ldr	r2, [r7, #12]
 800897c:	4313      	orrs	r3, r2
 800897e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	68fa      	ldr	r2, [r7, #12]
 8008986:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	681a      	ldr	r2, [r3, #0]
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	f042 0201 	orr.w	r2, r2, #1
 8008996:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	2220      	movs	r2, #32
 800899c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	2200      	movs	r2, #0
 80089a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80089a8:	2300      	movs	r3, #0
 80089aa:	e000      	b.n	80089ae <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80089ac:	2302      	movs	r3, #2
  }
}
 80089ae:	4618      	mov	r0, r3
 80089b0:	3714      	adds	r7, #20
 80089b2:	46bd      	mov	sp, r7
 80089b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089b8:	4770      	bx	lr
	...

080089bc <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 80089bc:	b480      	push	{r7}
 80089be:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 80089c0:	4b05      	ldr	r3, [pc, #20]	; (80089d8 <HAL_ICACHE_Enable+0x1c>)
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	4a04      	ldr	r2, [pc, #16]	; (80089d8 <HAL_ICACHE_Enable+0x1c>)
 80089c6:	f043 0301 	orr.w	r3, r3, #1
 80089ca:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80089cc:	2300      	movs	r3, #0
}
 80089ce:	4618      	mov	r0, r3
 80089d0:	46bd      	mov	sp, r7
 80089d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089d6:	4770      	bx	lr
 80089d8:	40030400 	.word	0x40030400

080089dc <LL_DLYB_Enable>:
  * @param  DLYBx DLYB Instance
  * @retval None
  */

__STATIC_INLINE void LL_DLYB_Enable(DLYB_TypeDef *DLYBx)
{
 80089dc:	b480      	push	{r7}
 80089de:	b083      	sub	sp, #12
 80089e0:	af00      	add	r7, sp, #0
 80089e2:	6078      	str	r0, [r7, #4]
  SET_BIT(DLYBx->CR, DLYB_CR_DEN);
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	f043 0201 	orr.w	r2, r3, #1
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	601a      	str	r2, [r3, #0]
}
 80089f0:	bf00      	nop
 80089f2:	370c      	adds	r7, #12
 80089f4:	46bd      	mov	sp, r7
 80089f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089fa:	4770      	bx	lr

080089fc <LL_DLYB_Disable>:
  * @param  DLYBx DLYB Instance.
  * @retval None
  */

__STATIC_INLINE void LL_DLYB_Disable(DLYB_TypeDef *DLYBx)
{
 80089fc:	b480      	push	{r7}
 80089fe:	b083      	sub	sp, #12
 8008a00:	af00      	add	r7, sp, #0
 8008a02:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(DLYBx->CR, DLYB_CR_DEN);
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	f023 0201 	bic.w	r2, r3, #1
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	601a      	str	r2, [r3, #0]
}
 8008a10:	bf00      	nop
 8008a12:	370c      	adds	r7, #12
 8008a14:	46bd      	mov	sp, r7
 8008a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a1a:	4770      	bx	lr

08008a1c <HAL_OSPI_Init>:
  *         in the OSPI_InitTypeDef and initialize the associated handle.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Init(OSPI_HandleTypeDef *hospi)
{
 8008a1c:	b580      	push	{r7, lr}
 8008a1e:	b086      	sub	sp, #24
 8008a20:	af02      	add	r7, sp, #8
 8008a22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008a24:	2300      	movs	r3, #0
 8008a26:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 8008a28:	f7fc ff22 	bl	8005870 <HAL_GetTick>
 8008a2c:	60b8      	str	r0, [r7, #8]

  /* Check the OSPI handle allocation */
  if (hospi == NULL)
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d102      	bne.n	8008a3a <HAL_OSPI_Init+0x1e>
  {
    status = HAL_ERROR;
 8008a34:	2301      	movs	r3, #1
 8008a36:	73fb      	strb	r3, [r7, #15]
 8008a38:	e0a5      	b.n	8008b86 <HAL_OSPI_Init+0x16a>
    assert_param(IS_OSPI_CS_BOUNDARY(hospi->Init.ChipSelectBoundary));
    assert_param(IS_OSPI_DLYBYP(hospi->Init.DelayBlockBypass));
    assert_param(IS_OSPI_MAXTRAN(hospi->Init.MaxTran));

    /* Initialize error code */
    hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	2200      	movs	r2, #0
 8008a3e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Check if the state is the reset state */
    if (hospi->State == HAL_OSPI_STATE_RESET)
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	f040 809e 	bne.w	8008b86 <HAL_OSPI_Init+0x16a>

      /* Init the low level hardware */
      hospi->MspInitCallback(hospi);
#else
      /* Initialization of the low level hardware */
      HAL_OSPI_MspInit(hospi);
 8008a4a:	6878      	ldr	r0, [r7, #4]
 8008a4c:	f7fc fb30 	bl	80050b0 <HAL_OSPI_MspInit>
#endif /* defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */

      /* Configure the default timeout for the OSPI memory access */
      (void)HAL_OSPI_SetTimeout(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE);
 8008a50:	f241 3188 	movw	r1, #5000	; 0x1388
 8008a54:	6878      	ldr	r0, [r7, #4]
 8008a56:	f000 f9ec 	bl	8008e32 <HAL_OSPI_SetTimeout>

      /* Configure memory type, device size, chip select high time, delay block bypass,
         free running clock, clock mode */
      MODIFY_REG(hospi->Instance->DCR1,
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	689a      	ldr	r2, [r3, #8]
 8008a60:	4b4b      	ldr	r3, [pc, #300]	; (8008b90 <HAL_OSPI_Init+0x174>)
 8008a62:	4013      	ands	r3, r2
 8008a64:	687a      	ldr	r2, [r7, #4]
 8008a66:	68d1      	ldr	r1, [r2, #12]
 8008a68:	687a      	ldr	r2, [r7, #4]
 8008a6a:	6912      	ldr	r2, [r2, #16]
 8008a6c:	3a01      	subs	r2, #1
 8008a6e:	0412      	lsls	r2, r2, #16
 8008a70:	4311      	orrs	r1, r2
 8008a72:	687a      	ldr	r2, [r7, #4]
 8008a74:	6952      	ldr	r2, [r2, #20]
 8008a76:	3a01      	subs	r2, #1
 8008a78:	0212      	lsls	r2, r2, #8
 8008a7a:	4311      	orrs	r1, r2
 8008a7c:	687a      	ldr	r2, [r7, #4]
 8008a7e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8008a80:	4311      	orrs	r1, r2
 8008a82:	687a      	ldr	r2, [r7, #4]
 8008a84:	69d2      	ldr	r2, [r2, #28]
 8008a86:	4311      	orrs	r1, r2
 8008a88:	687a      	ldr	r2, [r7, #4]
 8008a8a:	6812      	ldr	r2, [r2, #0]
 8008a8c:	430b      	orrs	r3, r1
 8008a8e:	6093      	str	r3, [r2, #8]
                 (hospi->Init.MemoryType | ((hospi->Init.DeviceSize - 1U) << OCTOSPI_DCR1_DEVSIZE_Pos) |
                  ((hospi->Init.ChipSelectHighTime - 1U) << OCTOSPI_DCR1_CSHT_Pos) |
                  hospi->Init.DelayBlockBypass | hospi->Init.ClockMode));

      /* Configure wrap size */
      MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_WRAPSIZE, hospi->Init.WrapSize);
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	68db      	ldr	r3, [r3, #12]
 8008a96:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	6a1a      	ldr	r2, [r3, #32]
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	430a      	orrs	r2, r1
 8008aa4:	60da      	str	r2, [r3, #12]

      /* Configure chip select boundary and maximum transfer */
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008aaa:	0419      	lsls	r1, r3, #16
                               (hospi->Init.MaxTran << OCTOSPI_DCR3_MAXTRAN_Pos));
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	430a      	orrs	r2, r1
 8008ab6:	611a      	str	r2, [r3, #16]

      /* Configure refresh */
      hospi->Instance->DCR4 = hospi->Init.Refresh;
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	687a      	ldr	r2, [r7, #4]
 8008abe:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8008ac0:	615a      	str	r2, [r3, #20]

      /* Configure FIFO threshold */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FTHRES, ((hospi->Init.FifoThreshold - 1U) << OCTOSPI_CR_FTHRES_Pos));
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	685b      	ldr	r3, [r3, #4]
 8008ad0:	3b01      	subs	r3, #1
 8008ad2:	021a      	lsls	r2, r3, #8
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	430a      	orrs	r2, r1
 8008ada:	601a      	str	r2, [r3, #0]

      /* Wait till busy flag is reset */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008ae0:	9300      	str	r3, [sp, #0]
 8008ae2:	68bb      	ldr	r3, [r7, #8]
 8008ae4:	2200      	movs	r2, #0
 8008ae6:	2120      	movs	r1, #32
 8008ae8:	6878      	ldr	r0, [r7, #4]
 8008aea:	f000 fea3 	bl	8009834 <OSPI_WaitFlagStateUntilTimeout>
 8008aee:	4603      	mov	r3, r0
 8008af0:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8008af2:	7bfb      	ldrb	r3, [r7, #15]
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d146      	bne.n	8008b86 <HAL_OSPI_Init+0x16a>
      {
        /* Configure clock prescaler */
        MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_PRESCALER,
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	68db      	ldr	r3, [r3, #12]
 8008afe:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b06:	1e5a      	subs	r2, r3, #1
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	430a      	orrs	r2, r1
 8008b0e:	60da      	str	r2, [r3, #12]
                   ((hospi->Init.ClockPrescaler - 1U) << OCTOSPI_DCR2_PRESCALER_Pos));

        /* Configure Dual Quad mode */
        MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_DMM, hospi->Init.DualQuad);
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	f023 0140 	bic.w	r1, r3, #64	; 0x40
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	689a      	ldr	r2, [r3, #8]
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	430a      	orrs	r2, r1
 8008b24:	601a      	str	r2, [r3, #0]

        /* Configure sample shifting and delay hold quarter cycle */
        MODIFY_REG(hospi->Instance->TCR, (OCTOSPI_TCR_SSHIFT | OCTOSPI_TCR_DHQC),
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8008b2e:	f023 41a0 	bic.w	r1, r3, #1342177280	; 0x50000000
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b3a:	431a      	orrs	r2, r3
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	430a      	orrs	r2, r1
 8008b42:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
                   (hospi->Init.SampleShifting | hospi->Init.DelayHoldQuarterCycle));

        /* Enable OctoSPI */
        __HAL_OSPI_ENABLE(hospi);
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	681a      	ldr	r2, [r3, #0]
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	f042 0201 	orr.w	r2, r2, #1
 8008b54:	601a      	str	r2, [r3, #0]

        /* Enable free running clock if needed : must be done after OSPI enable */
        if (hospi->Init.FreeRunningClock == HAL_OSPI_FREERUNCLK_ENABLE)
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	699b      	ldr	r3, [r3, #24]
 8008b5a:	2b02      	cmp	r3, #2
 8008b5c:	d107      	bne.n	8008b6e <HAL_OSPI_Init+0x152>
        {
          SET_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	689a      	ldr	r2, [r3, #8]
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	f042 0202 	orr.w	r2, r2, #2
 8008b6c:	609a      	str	r2, [r3, #8]
        }

        /* Initialize the OSPI state */
        if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	68db      	ldr	r3, [r3, #12]
 8008b72:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008b76:	d103      	bne.n	8008b80 <HAL_OSPI_Init+0x164>
        {
          hospi->State = HAL_OSPI_STATE_HYPERBUS_INIT;
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	2201      	movs	r2, #1
 8008b7c:	651a      	str	r2, [r3, #80]	; 0x50
 8008b7e:	e002      	b.n	8008b86 <HAL_OSPI_Init+0x16a>
        }
        else
        {
          hospi->State = HAL_OSPI_STATE_READY;
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	2202      	movs	r2, #2
 8008b84:	651a      	str	r2, [r3, #80]	; 0x50
      }
    }
  }

  /* Return function status */
  return status;
 8008b86:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b88:	4618      	mov	r0, r3
 8008b8a:	3710      	adds	r7, #16
 8008b8c:	46bd      	mov	sp, r7
 8008b8e:	bd80      	pop	{r7, pc}
 8008b90:	f8e0c0f4 	.word	0xf8e0c0f4

08008b94 <HAL_OSPI_Command>:
  * @param  cmd     : structure that contains the command configuration information
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Command(OSPI_HandleTypeDef *hospi, OSPI_RegularCmdTypeDef *cmd, uint32_t Timeout)
{
 8008b94:	b580      	push	{r7, lr}
 8008b96:	b08a      	sub	sp, #40	; 0x28
 8008b98:	af02      	add	r7, sp, #8
 8008b9a:	60f8      	str	r0, [r7, #12]
 8008b9c:	60b9      	str	r1, [r7, #8]
 8008b9e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t state;
  uint32_t tickstart = HAL_GetTick();
 8008ba0:	f7fc fe66 	bl	8005870 <HAL_GetTick>
 8008ba4:	61b8      	str	r0, [r7, #24]
    assert_param(IS_OSPI_ALT_BYTES_SIZE(cmd->AlternateBytesSize));
    assert_param(IS_OSPI_ALT_BYTES_DTR_MODE(cmd->AlternateBytesDtrMode));
  }

  assert_param(IS_OSPI_DATA_MODE(cmd->DataMode));
  if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 8008ba6:	68bb      	ldr	r3, [r7, #8]
 8008ba8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008baa:	2b00      	cmp	r3, #0

  assert_param(IS_OSPI_DQS_MODE(cmd->DQSMode));
  assert_param(IS_OSPI_SIOO_MODE(cmd->SIOOMode));

  /* Check the state of the driver */
  state = hospi->State;
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008bb0:	617b      	str	r3, [r7, #20]
  if (((state == HAL_OSPI_STATE_READY)         && (hospi->Init.MemoryType != HAL_OSPI_MEMTYPE_HYPERBUS)) ||
 8008bb2:	697b      	ldr	r3, [r7, #20]
 8008bb4:	2b02      	cmp	r3, #2
 8008bb6:	d104      	bne.n	8008bc2 <HAL_OSPI_Command+0x2e>
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	68db      	ldr	r3, [r3, #12]
 8008bbc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008bc0:	d115      	bne.n	8008bee <HAL_OSPI_Command+0x5a>
 8008bc2:	697b      	ldr	r3, [r7, #20]
 8008bc4:	2b14      	cmp	r3, #20
 8008bc6:	d107      	bne.n	8008bd8 <HAL_OSPI_Command+0x44>
      ((state == HAL_OSPI_STATE_READ_CMD_CFG)  && ((cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG)
 8008bc8:	68bb      	ldr	r3, [r7, #8]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	2b02      	cmp	r3, #2
 8008bce:	d00e      	beq.n	8008bee <HAL_OSPI_Command+0x5a>
                                                   || (cmd->OperationType == HAL_OSPI_OPTYPE_WRAP_CFG))) ||
 8008bd0:	68bb      	ldr	r3, [r7, #8]
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	2b03      	cmp	r3, #3
 8008bd6:	d00a      	beq.n	8008bee <HAL_OSPI_Command+0x5a>
 8008bd8:	697b      	ldr	r3, [r7, #20]
 8008bda:	2b24      	cmp	r3, #36	; 0x24
 8008bdc:	d15b      	bne.n	8008c96 <HAL_OSPI_Command+0x102>
      ((state == HAL_OSPI_STATE_WRITE_CMD_CFG) && ((cmd->OperationType == HAL_OSPI_OPTYPE_READ_CFG)  ||
 8008bde:	68bb      	ldr	r3, [r7, #8]
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	2b01      	cmp	r3, #1
 8008be4:	d003      	beq.n	8008bee <HAL_OSPI_Command+0x5a>
                                                   (cmd->OperationType == HAL_OSPI_OPTYPE_WRAP_CFG))))
 8008be6:	68bb      	ldr	r3, [r7, #8]
 8008be8:	681b      	ldr	r3, [r3, #0]
      ((state == HAL_OSPI_STATE_WRITE_CMD_CFG) && ((cmd->OperationType == HAL_OSPI_OPTYPE_READ_CFG)  ||
 8008bea:	2b03      	cmp	r3, #3
 8008bec:	d153      	bne.n	8008c96 <HAL_OSPI_Command+0x102>
  {
    /* Wait till busy flag is reset */
    status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	9300      	str	r3, [sp, #0]
 8008bf2:	69bb      	ldr	r3, [r7, #24]
 8008bf4:	2200      	movs	r2, #0
 8008bf6:	2120      	movs	r1, #32
 8008bf8:	68f8      	ldr	r0, [r7, #12]
 8008bfa:	f000 fe1b 	bl	8009834 <OSPI_WaitFlagStateUntilTimeout>
 8008bfe:	4603      	mov	r3, r0
 8008c00:	77fb      	strb	r3, [r7, #31]

    if (status == HAL_OK)
 8008c02:	7ffb      	ldrb	r3, [r7, #31]
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	d14c      	bne.n	8008ca2 <HAL_OSPI_Command+0x10e>
    {
      /* Initialize error code */
      hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	2200      	movs	r2, #0
 8008c0c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the registers */
      status = OSPI_ConfigCmd(hospi, cmd);
 8008c0e:	68b9      	ldr	r1, [r7, #8]
 8008c10:	68f8      	ldr	r0, [r7, #12]
 8008c12:	f000 fe4f 	bl	80098b4 <OSPI_ConfigCmd>
 8008c16:	4603      	mov	r3, r0
 8008c18:	77fb      	strb	r3, [r7, #31]

      if (status == HAL_OK)
 8008c1a:	7ffb      	ldrb	r3, [r7, #31]
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d140      	bne.n	8008ca2 <HAL_OSPI_Command+0x10e>
      {
        if (cmd->DataMode == HAL_OSPI_DATA_NONE)
 8008c20:	68bb      	ldr	r3, [r7, #8]
 8008c22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	d10e      	bne.n	8008c46 <HAL_OSPI_Command+0xb2>
        {
          /* When there is no data phase, the transfer start as soon as the configuration is done
             so wait until TC flag is set to go back in idle state */
          status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, Timeout);
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	9300      	str	r3, [sp, #0]
 8008c2c:	69bb      	ldr	r3, [r7, #24]
 8008c2e:	2201      	movs	r2, #1
 8008c30:	2102      	movs	r1, #2
 8008c32:	68f8      	ldr	r0, [r7, #12]
 8008c34:	f000 fdfe 	bl	8009834 <OSPI_WaitFlagStateUntilTimeout>
 8008c38:	4603      	mov	r3, r0
 8008c3a:	77fb      	strb	r3, [r7, #31]

          __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	2202      	movs	r2, #2
 8008c42:	625a      	str	r2, [r3, #36]	; 0x24
    if (status == HAL_OK)
 8008c44:	e02d      	b.n	8008ca2 <HAL_OSPI_Command+0x10e>
        }
        else
        {
          /* Update the state */
          if (cmd->OperationType == HAL_OSPI_OPTYPE_COMMON_CFG)
 8008c46:	68bb      	ldr	r3, [r7, #8]
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d103      	bne.n	8008c56 <HAL_OSPI_Command+0xc2>
          {
            hospi->State = HAL_OSPI_STATE_CMD_CFG;
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	2204      	movs	r2, #4
 8008c52:	651a      	str	r2, [r3, #80]	; 0x50
    if (status == HAL_OK)
 8008c54:	e025      	b.n	8008ca2 <HAL_OSPI_Command+0x10e>
          }
          else if (cmd->OperationType == HAL_OSPI_OPTYPE_READ_CFG)
 8008c56:	68bb      	ldr	r3, [r7, #8]
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	2b01      	cmp	r3, #1
 8008c5c:	d10b      	bne.n	8008c76 <HAL_OSPI_Command+0xe2>
          {
            if (hospi->State == HAL_OSPI_STATE_WRITE_CMD_CFG)
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008c62:	2b24      	cmp	r3, #36	; 0x24
 8008c64:	d103      	bne.n	8008c6e <HAL_OSPI_Command+0xda>
            {
              hospi->State = HAL_OSPI_STATE_CMD_CFG;
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	2204      	movs	r2, #4
 8008c6a:	651a      	str	r2, [r3, #80]	; 0x50
    if (status == HAL_OK)
 8008c6c:	e019      	b.n	8008ca2 <HAL_OSPI_Command+0x10e>
            }
            else
            {
              hospi->State = HAL_OSPI_STATE_READ_CMD_CFG;
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	2214      	movs	r2, #20
 8008c72:	651a      	str	r2, [r3, #80]	; 0x50
    if (status == HAL_OK)
 8008c74:	e015      	b.n	8008ca2 <HAL_OSPI_Command+0x10e>
            }
          }
          else if (cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG)
 8008c76:	68bb      	ldr	r3, [r7, #8]
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	2b02      	cmp	r3, #2
 8008c7c:	d111      	bne.n	8008ca2 <HAL_OSPI_Command+0x10e>
          {
            if (hospi->State == HAL_OSPI_STATE_READ_CMD_CFG)
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008c82:	2b14      	cmp	r3, #20
 8008c84:	d103      	bne.n	8008c8e <HAL_OSPI_Command+0xfa>
            {
              hospi->State = HAL_OSPI_STATE_CMD_CFG;
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	2204      	movs	r2, #4
 8008c8a:	651a      	str	r2, [r3, #80]	; 0x50
    if (status == HAL_OK)
 8008c8c:	e009      	b.n	8008ca2 <HAL_OSPI_Command+0x10e>
            }
            else
            {
              hospi->State = HAL_OSPI_STATE_WRITE_CMD_CFG;
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	2224      	movs	r2, #36	; 0x24
 8008c92:	651a      	str	r2, [r3, #80]	; 0x50
    if (status == HAL_OK)
 8008c94:	e005      	b.n	8008ca2 <HAL_OSPI_Command+0x10e>
      }
    }
  }
  else
  {
    status = HAL_ERROR;
 8008c96:	2301      	movs	r3, #1
 8008c98:	77fb      	strb	r3, [r7, #31]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	2210      	movs	r2, #16
 8008c9e:	655a      	str	r2, [r3, #84]	; 0x54
 8008ca0:	e000      	b.n	8008ca4 <HAL_OSPI_Command+0x110>
    if (status == HAL_OK)
 8008ca2:	bf00      	nop
  }

  /* Return function status */
  return status;
 8008ca4:	7ffb      	ldrb	r3, [r7, #31]
}
 8008ca6:	4618      	mov	r0, r3
 8008ca8:	3720      	adds	r7, #32
 8008caa:	46bd      	mov	sp, r7
 8008cac:	bd80      	pop	{r7, pc}

08008cae <HAL_OSPI_MemoryMapped>:
  * @param  cfg   : structure that contains the memory mapped configuration information.
  * @note   This function is used only in Memory mapped Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_MemoryMapped(OSPI_HandleTypeDef *hospi, OSPI_MemoryMappedTypeDef *cfg)
{
 8008cae:	b580      	push	{r7, lr}
 8008cb0:	b086      	sub	sp, #24
 8008cb2:	af02      	add	r7, sp, #8
 8008cb4:	6078      	str	r0, [r7, #4]
 8008cb6:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8008cb8:	f7fc fdda 	bl	8005870 <HAL_GetTick>
 8008cbc:	60b8      	str	r0, [r7, #8]

  /* Check the parameters of the memory-mapped configuration structure */
  assert_param(IS_OSPI_TIMEOUT_ACTIVATION(cfg->TimeOutActivation));

  /* Check the state */
  if (hospi->State == HAL_OSPI_STATE_CMD_CFG)
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008cc2:	2b04      	cmp	r3, #4
 8008cc4:	d136      	bne.n	8008d34 <HAL_OSPI_MemoryMapped+0x86>
  {
    /* Wait till busy flag is reset */
    status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008cca:	9300      	str	r3, [sp, #0]
 8008ccc:	68bb      	ldr	r3, [r7, #8]
 8008cce:	2200      	movs	r2, #0
 8008cd0:	2120      	movs	r1, #32
 8008cd2:	6878      	ldr	r0, [r7, #4]
 8008cd4:	f000 fdae 	bl	8009834 <OSPI_WaitFlagStateUntilTimeout>
 8008cd8:	4603      	mov	r3, r0
 8008cda:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8008cdc:	7bfb      	ldrb	r3, [r7, #15]
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d12d      	bne.n	8008d3e <HAL_OSPI_MemoryMapped+0x90>
    {
      /* Update state */
      hospi->State = HAL_OSPI_STATE_BUSY_MEM_MAPPED;
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	2288      	movs	r2, #136	; 0x88
 8008ce6:	651a      	str	r2, [r3, #80]	; 0x50

      if (cfg->TimeOutActivation == HAL_OSPI_TIMEOUT_COUNTER_ENABLE)
 8008ce8:	683b      	ldr	r3, [r7, #0]
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	2b08      	cmp	r3, #8
 8008cee:	d111      	bne.n	8008d14 <HAL_OSPI_MemoryMapped+0x66>
      {
        assert_param(IS_OSPI_TIMEOUT_PERIOD(cfg->TimeOutPeriod));

        /* Configure register */
        WRITE_REG(hospi->Instance->LPTR, cfg->TimeOutPeriod);
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	683a      	ldr	r2, [r7, #0]
 8008cf6:	6852      	ldr	r2, [r2, #4]
 8008cf8:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130

        /* Clear flags related to interrupt */
        __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TO);
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	2210      	movs	r2, #16
 8008d02:	625a      	str	r2, [r3, #36]	; 0x24

        /* Enable the timeout interrupt */
        __HAL_OSPI_ENABLE_IT(hospi, HAL_OSPI_IT_TO);
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	681a      	ldr	r2, [r3, #0]
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8008d12:	601a      	str	r2, [r3, #0]
      }

      /* Configure CR register with functional mode as memory-mapped */
      MODIFY_REG(hospi->Instance->CR, (OCTOSPI_CR_TCEN | OCTOSPI_CR_FMODE),
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8008d1e:	f023 0308 	bic.w	r3, r3, #8
 8008d22:	683a      	ldr	r2, [r7, #0]
 8008d24:	6812      	ldr	r2, [r2, #0]
 8008d26:	431a      	orrs	r2, r3
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 8008d30:	601a      	str	r2, [r3, #0]
 8008d32:	e004      	b.n	8008d3e <HAL_OSPI_MemoryMapped+0x90>
                 (cfg->TimeOutActivation | OSPI_FUNCTIONAL_MODE_MEMORY_MAPPED));
    }
  }
  else
  {
    status = HAL_ERROR;
 8008d34:	2301      	movs	r3, #1
 8008d36:	73fb      	strb	r3, [r7, #15]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	2210      	movs	r2, #16
 8008d3c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Return function status */
  return status;
 8008d3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d40:	4618      	mov	r0, r3
 8008d42:	3710      	adds	r7, #16
 8008d44:	46bd      	mov	sp, r7
 8008d46:	bd80      	pop	{r7, pc}

08008d48 <HAL_OSPI_Abort>:
  * @brief  Abort the current transmission.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Abort(OSPI_HandleTypeDef *hospi)
{
 8008d48:	b580      	push	{r7, lr}
 8008d4a:	b088      	sub	sp, #32
 8008d4c:	af02      	add	r7, sp, #8
 8008d4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008d50:	2300      	movs	r3, #0
 8008d52:	75fb      	strb	r3, [r7, #23]
  uint32_t state;
  uint32_t tickstart = HAL_GetTick();
 8008d54:	f7fc fd8c 	bl	8005870 <HAL_GetTick>
 8008d58:	6138      	str	r0, [r7, #16]

  /* Check if the state is in one of the busy or configured states */
  state = hospi->State;
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008d5e:	60fb      	str	r3, [r7, #12]
  if (((state & OSPI_BUSY_STATE_MASK) != 0U) || ((state & OSPI_CFG_STATE_MASK) != 0U))
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	f003 0308 	and.w	r3, r3, #8
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d104      	bne.n	8008d74 <HAL_OSPI_Abort+0x2c>
 8008d6a:	68fb      	ldr	r3, [r7, #12]
 8008d6c:	f003 0304 	and.w	r3, r3, #4
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d052      	beq.n	8008e1a <HAL_OSPI_Abort+0xd2>
  {
    /* Check if the DMA is enabled */
    if ((hospi->Instance->CR & OCTOSPI_CR_DMAEN) != 0U)
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	f003 0304 	and.w	r3, r3, #4
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d014      	beq.n	8008dac <HAL_OSPI_Abort+0x64>
    {
      /* Disable the DMA transfer on the OctoSPI side */
      CLEAR_BIT(hospi->Instance->CR, OCTOSPI_CR_DMAEN);
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	681a      	ldr	r2, [r3, #0]
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	f022 0204 	bic.w	r2, r2, #4
 8008d90:	601a      	str	r2, [r3, #0]

      /* Disable the DMA transfer on the DMA side */
      status = HAL_DMA_Abort(hospi->hdma);
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008d96:	4618      	mov	r0, r3
 8008d98:	f7fd fb31 	bl	80063fe <HAL_DMA_Abort>
 8008d9c:	4603      	mov	r3, r0
 8008d9e:	75fb      	strb	r3, [r7, #23]
      if (status != HAL_OK)
 8008da0:	7dfb      	ldrb	r3, [r7, #23]
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d002      	beq.n	8008dac <HAL_OSPI_Abort+0x64>
      {
        hospi->ErrorCode = HAL_OSPI_ERROR_DMA;
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	2204      	movs	r2, #4
 8008daa:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }

    if (__HAL_OSPI_GET_FLAG(hospi, HAL_OSPI_FLAG_BUSY) != RESET)
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	6a1b      	ldr	r3, [r3, #32]
 8008db2:	f003 0320 	and.w	r3, r3, #32
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d02b      	beq.n	8008e12 <HAL_OSPI_Abort+0xca>
    {
      /* Perform an abort of the OctoSPI */
      SET_BIT(hospi->Instance->CR, OCTOSPI_CR_ABORT);
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	681a      	ldr	r2, [r3, #0]
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	f042 0202 	orr.w	r2, r2, #2
 8008dc8:	601a      	str	r2, [r3, #0]

      /* Wait until the transfer complete flag is set to go back in idle state */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, hospi->Timeout);
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008dce:	9300      	str	r3, [sp, #0]
 8008dd0:	693b      	ldr	r3, [r7, #16]
 8008dd2:	2201      	movs	r2, #1
 8008dd4:	2102      	movs	r1, #2
 8008dd6:	6878      	ldr	r0, [r7, #4]
 8008dd8:	f000 fd2c 	bl	8009834 <OSPI_WaitFlagStateUntilTimeout>
 8008ddc:	4603      	mov	r3, r0
 8008dde:	75fb      	strb	r3, [r7, #23]

      if (status == HAL_OK)
 8008de0:	7dfb      	ldrb	r3, [r7, #23]
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d11f      	bne.n	8008e26 <HAL_OSPI_Abort+0xde>
      {
        /* Clear transfer complete flag */
        __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	2202      	movs	r2, #2
 8008dec:	625a      	str	r2, [r3, #36]	; 0x24

        /* Wait until the busy flag is reset to go back in idle state */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008df2:	9300      	str	r3, [sp, #0]
 8008df4:	693b      	ldr	r3, [r7, #16]
 8008df6:	2200      	movs	r2, #0
 8008df8:	2120      	movs	r1, #32
 8008dfa:	6878      	ldr	r0, [r7, #4]
 8008dfc:	f000 fd1a 	bl	8009834 <OSPI_WaitFlagStateUntilTimeout>
 8008e00:	4603      	mov	r3, r0
 8008e02:	75fb      	strb	r3, [r7, #23]

        if (status == HAL_OK)
 8008e04:	7dfb      	ldrb	r3, [r7, #23]
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d10d      	bne.n	8008e26 <HAL_OSPI_Abort+0xde>
        {
          /* Update state */
          hospi->State = HAL_OSPI_STATE_READY;
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	2202      	movs	r2, #2
 8008e0e:	651a      	str	r2, [r3, #80]	; 0x50
    if (__HAL_OSPI_GET_FLAG(hospi, HAL_OSPI_FLAG_BUSY) != RESET)
 8008e10:	e009      	b.n	8008e26 <HAL_OSPI_Abort+0xde>
      }
    }
    else
    {
      /* Update state */
      hospi->State = HAL_OSPI_STATE_READY;
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	2202      	movs	r2, #2
 8008e16:	651a      	str	r2, [r3, #80]	; 0x50
    if (__HAL_OSPI_GET_FLAG(hospi, HAL_OSPI_FLAG_BUSY) != RESET)
 8008e18:	e005      	b.n	8008e26 <HAL_OSPI_Abort+0xde>
    }
  }
  else
  {
    status = HAL_ERROR;
 8008e1a:	2301      	movs	r3, #1
 8008e1c:	75fb      	strb	r3, [r7, #23]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	2210      	movs	r2, #16
 8008e22:	655a      	str	r2, [r3, #84]	; 0x54
 8008e24:	e000      	b.n	8008e28 <HAL_OSPI_Abort+0xe0>
    if (__HAL_OSPI_GET_FLAG(hospi, HAL_OSPI_FLAG_BUSY) != RESET)
 8008e26:	bf00      	nop
  }

  /* Return function status */
  return status;
 8008e28:	7dfb      	ldrb	r3, [r7, #23]
}
 8008e2a:	4618      	mov	r0, r3
 8008e2c:	3718      	adds	r7, #24
 8008e2e:	46bd      	mov	sp, r7
 8008e30:	bd80      	pop	{r7, pc}

08008e32 <HAL_OSPI_SetTimeout>:
  * @param  hospi   : OSPI handle.
  * @param  Timeout : Timeout for the memory access.
  * @retval None
  */
HAL_StatusTypeDef HAL_OSPI_SetTimeout(OSPI_HandleTypeDef *hospi, uint32_t Timeout)
{
 8008e32:	b480      	push	{r7}
 8008e34:	b083      	sub	sp, #12
 8008e36:	af00      	add	r7, sp, #0
 8008e38:	6078      	str	r0, [r7, #4]
 8008e3a:	6039      	str	r1, [r7, #0]
  hospi->Timeout = Timeout;
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	683a      	ldr	r2, [r7, #0]
 8008e40:	659a      	str	r2, [r3, #88]	; 0x58
  return HAL_OK;
 8008e42:	2300      	movs	r3, #0
}
 8008e44:	4618      	mov	r0, r3
 8008e46:	370c      	adds	r7, #12
 8008e48:	46bd      	mov	sp, r7
 8008e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e4e:	4770      	bx	lr

08008e50 <HAL_OSPIM_Config>:
  * @param  cfg     : Configuration of the IO Manager for the instance
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPIM_Config(OSPI_HandleTypeDef *hospi, OSPIM_CfgTypeDef *cfg, uint32_t Timeout)
{
 8008e50:	b580      	push	{r7, lr}
 8008e52:	b094      	sub	sp, #80	; 0x50
 8008e54:	af00      	add	r7, sp, #0
 8008e56:	60f8      	str	r0, [r7, #12]
 8008e58:	60b9      	str	r1, [r7, #8]
 8008e5a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008e5c:	2300      	movs	r3, #0
 8008e5e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  uint32_t instance;
  uint8_t index;
  uint8_t ospi_enabled = 0U;
 8008e62:	2300      	movs	r3, #0
 8008e64:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
  assert_param(IS_OSPIM_DQS_PORT(cfg->DQSPort));
  assert_param(IS_OSPIM_PORT(cfg->NCSPort));
  assert_param(IS_OSPIM_IO_PORT(cfg->IOLowPort));
  assert_param(IS_OSPIM_IO_PORT(cfg->IOHighPort));

  if (hospi->Instance == (OCTOSPI_TypeDef *)OCTOSPI1)
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	4a9d      	ldr	r2, [pc, #628]	; (80090e4 <HAL_OSPIM_Config+0x294>)
 8008e6e:	4293      	cmp	r3, r2
 8008e70:	d105      	bne.n	8008e7e <HAL_OSPIM_Config+0x2e>
  {
    instance = 0U;
 8008e72:	2300      	movs	r3, #0
 8008e74:	64bb      	str	r3, [r7, #72]	; 0x48
    other_instance = 1U;
 8008e76:	2301      	movs	r3, #1
 8008e78:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 8008e7c:	e004      	b.n	8008e88 <HAL_OSPIM_Config+0x38>
  }
  else
  {
    instance = 1U;
 8008e7e:	2301      	movs	r3, #1
 8008e80:	64bb      	str	r3, [r7, #72]	; 0x48
    other_instance = 0U;
 8008e82:	2300      	movs	r3, #0
 8008e84:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  }

  /**************** Get current configuration of the instances ****************/
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 8008e88:	2300      	movs	r3, #0
 8008e8a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8008e8e:	e01d      	b.n	8008ecc <HAL_OSPIM_Config+0x7c>
  {
    if (OSPIM_GetConfig(index + 1U, &(IOM_cfg[index])) != HAL_OK)
 8008e90:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8008e94:	3301      	adds	r3, #1
 8008e96:	b2d8      	uxtb	r0, r3
 8008e98:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 8008e9c:	f107 0114 	add.w	r1, r7, #20
 8008ea0:	4613      	mov	r3, r2
 8008ea2:	005b      	lsls	r3, r3, #1
 8008ea4:	4413      	add	r3, r2
 8008ea6:	00db      	lsls	r3, r3, #3
 8008ea8:	440b      	add	r3, r1
 8008eaa:	4619      	mov	r1, r3
 8008eac:	f000 fe7c 	bl	8009ba8 <OSPIM_GetConfig>
 8008eb0:	4603      	mov	r3, r0
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d005      	beq.n	8008ec2 <HAL_OSPIM_Config+0x72>
    {
      status = HAL_ERROR;
 8008eb6:	2301      	movs	r3, #1
 8008eb8:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	2208      	movs	r2, #8
 8008ec0:	655a      	str	r2, [r3, #84]	; 0x54
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 8008ec2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8008ec6:	3301      	adds	r3, #1
 8008ec8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8008ecc:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8008ed0:	2b01      	cmp	r3, #1
 8008ed2:	d9dd      	bls.n	8008e90 <HAL_OSPIM_Config+0x40>
    }
  }

  if (status == HAL_OK)
 8008ed4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	f040 849e 	bne.w	800981a <HAL_OSPIM_Config+0x9ca>
  {
    /********** Disable both OctoSPI to configure OctoSPI IO Manager **********/
    if ((OCTOSPI1->CR & OCTOSPI_CR_EN) != 0U)
 8008ede:	4b81      	ldr	r3, [pc, #516]	; (80090e4 <HAL_OSPIM_Config+0x294>)
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	f003 0301 	and.w	r3, r3, #1
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d00b      	beq.n	8008f02 <HAL_OSPIM_Config+0xb2>
    {
      CLEAR_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 8008eea:	4b7e      	ldr	r3, [pc, #504]	; (80090e4 <HAL_OSPIM_Config+0x294>)
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	4a7d      	ldr	r2, [pc, #500]	; (80090e4 <HAL_OSPIM_Config+0x294>)
 8008ef0:	f023 0301 	bic.w	r3, r3, #1
 8008ef4:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x1U;
 8008ef6:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8008efa:	f043 0301 	orr.w	r3, r3, #1
 8008efe:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    }
    if ((OCTOSPI2->CR & OCTOSPI_CR_EN) != 0U)
 8008f02:	4b79      	ldr	r3, [pc, #484]	; (80090e8 <HAL_OSPIM_Config+0x298>)
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	f003 0301 	and.w	r3, r3, #1
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	d00b      	beq.n	8008f26 <HAL_OSPIM_Config+0xd6>
    {
      CLEAR_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 8008f0e:	4b76      	ldr	r3, [pc, #472]	; (80090e8 <HAL_OSPIM_Config+0x298>)
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	4a75      	ldr	r2, [pc, #468]	; (80090e8 <HAL_OSPIM_Config+0x298>)
 8008f14:	f023 0301 	bic.w	r3, r3, #1
 8008f18:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x2U;
 8008f1a:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8008f1e:	f043 0302 	orr.w	r3, r3, #2
 8008f22:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    }

    /***************** Deactivation of previous configuration *****************/
    CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].NCSPort - 1U)], OCTOSPIM_PCR_NCSEN);
 8008f26:	4971      	ldr	r1, [pc, #452]	; (80090ec <HAL_OSPIM_Config+0x29c>)
 8008f28:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008f2a:	4613      	mov	r3, r2
 8008f2c:	005b      	lsls	r3, r3, #1
 8008f2e:	4413      	add	r3, r2
 8008f30:	00db      	lsls	r3, r3, #3
 8008f32:	3350      	adds	r3, #80	; 0x50
 8008f34:	443b      	add	r3, r7
 8008f36:	3b34      	subs	r3, #52	; 0x34
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	3b01      	subs	r3, #1
 8008f3c:	009b      	lsls	r3, r3, #2
 8008f3e:	440b      	add	r3, r1
 8008f40:	6859      	ldr	r1, [r3, #4]
 8008f42:	486a      	ldr	r0, [pc, #424]	; (80090ec <HAL_OSPIM_Config+0x29c>)
 8008f44:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008f46:	4613      	mov	r3, r2
 8008f48:	005b      	lsls	r3, r3, #1
 8008f4a:	4413      	add	r3, r2
 8008f4c:	00db      	lsls	r3, r3, #3
 8008f4e:	3350      	adds	r3, #80	; 0x50
 8008f50:	443b      	add	r3, r7
 8008f52:	3b34      	subs	r3, #52	; 0x34
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	3b01      	subs	r3, #1
 8008f58:	f421 7280 	bic.w	r2, r1, #256	; 0x100
 8008f5c:	009b      	lsls	r3, r3, #2
 8008f5e:	4403      	add	r3, r0
 8008f60:	605a      	str	r2, [r3, #4]
    if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) != 0U)
 8008f62:	4b62      	ldr	r3, [pc, #392]	; (80090ec <HAL_OSPIM_Config+0x29c>)
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	f003 0301 	and.w	r3, r3, #1
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	f000 80c0 	beq.w	80090f0 <HAL_OSPIM_Config+0x2a0>
    {
      /* De-multiplexing should be performed */
      CLEAR_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
 8008f70:	4b5e      	ldr	r3, [pc, #376]	; (80090ec <HAL_OSPIM_Config+0x29c>)
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	4a5d      	ldr	r2, [pc, #372]	; (80090ec <HAL_OSPIM_Config+0x29c>)
 8008f76:	f023 0301 	bic.w	r3, r3, #1
 8008f7a:	6013      	str	r3, [r2, #0]

      if (other_instance == 1U)
 8008f7c:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8008f80:	2b01      	cmp	r3, #1
 8008f82:	f040 8162 	bne.w	800924a <HAL_OSPIM_Config+0x3fa>
      {
        SET_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKSRC);
 8008f86:	4959      	ldr	r1, [pc, #356]	; (80090ec <HAL_OSPIM_Config+0x29c>)
 8008f88:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8008f8c:	4613      	mov	r3, r2
 8008f8e:	005b      	lsls	r3, r3, #1
 8008f90:	4413      	add	r3, r2
 8008f92:	00db      	lsls	r3, r3, #3
 8008f94:	3350      	adds	r3, #80	; 0x50
 8008f96:	443b      	add	r3, r7
 8008f98:	3b3c      	subs	r3, #60	; 0x3c
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	3b01      	subs	r3, #1
 8008f9e:	009b      	lsls	r3, r3, #2
 8008fa0:	440b      	add	r3, r1
 8008fa2:	6859      	ldr	r1, [r3, #4]
 8008fa4:	4851      	ldr	r0, [pc, #324]	; (80090ec <HAL_OSPIM_Config+0x29c>)
 8008fa6:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8008faa:	4613      	mov	r3, r2
 8008fac:	005b      	lsls	r3, r3, #1
 8008fae:	4413      	add	r3, r2
 8008fb0:	00db      	lsls	r3, r3, #3
 8008fb2:	3350      	adds	r3, #80	; 0x50
 8008fb4:	443b      	add	r3, r7
 8008fb6:	3b3c      	subs	r3, #60	; 0x3c
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	3b01      	subs	r3, #1
 8008fbc:	f041 0202 	orr.w	r2, r1, #2
 8008fc0:	009b      	lsls	r3, r3, #2
 8008fc2:	4403      	add	r3, r0
 8008fc4:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 8008fc6:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8008fca:	4613      	mov	r3, r2
 8008fcc:	005b      	lsls	r3, r3, #1
 8008fce:	4413      	add	r3, r2
 8008fd0:	00db      	lsls	r3, r3, #3
 8008fd2:	3350      	adds	r3, #80	; 0x50
 8008fd4:	443b      	add	r3, r7
 8008fd6:	3b38      	subs	r3, #56	; 0x38
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	d01f      	beq.n	800901e <HAL_OSPIM_Config+0x1ce>
        {
          SET_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSSRC);
 8008fde:	4943      	ldr	r1, [pc, #268]	; (80090ec <HAL_OSPIM_Config+0x29c>)
 8008fe0:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8008fe4:	4613      	mov	r3, r2
 8008fe6:	005b      	lsls	r3, r3, #1
 8008fe8:	4413      	add	r3, r2
 8008fea:	00db      	lsls	r3, r3, #3
 8008fec:	3350      	adds	r3, #80	; 0x50
 8008fee:	443b      	add	r3, r7
 8008ff0:	3b38      	subs	r3, #56	; 0x38
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	3b01      	subs	r3, #1
 8008ff6:	009b      	lsls	r3, r3, #2
 8008ff8:	440b      	add	r3, r1
 8008ffa:	6859      	ldr	r1, [r3, #4]
 8008ffc:	483b      	ldr	r0, [pc, #236]	; (80090ec <HAL_OSPIM_Config+0x29c>)
 8008ffe:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8009002:	4613      	mov	r3, r2
 8009004:	005b      	lsls	r3, r3, #1
 8009006:	4413      	add	r3, r2
 8009008:	00db      	lsls	r3, r3, #3
 800900a:	3350      	adds	r3, #80	; 0x50
 800900c:	443b      	add	r3, r7
 800900e:	3b38      	subs	r3, #56	; 0x38
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	3b01      	subs	r3, #1
 8009014:	f041 0220 	orr.w	r2, r1, #32
 8009018:	009b      	lsls	r3, r3, #2
 800901a:	4403      	add	r3, r0
 800901c:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 800901e:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8009022:	4613      	mov	r3, r2
 8009024:	005b      	lsls	r3, r3, #1
 8009026:	4413      	add	r3, r2
 8009028:	00db      	lsls	r3, r3, #3
 800902a:	3350      	adds	r3, #80	; 0x50
 800902c:	443b      	add	r3, r7
 800902e:	3b30      	subs	r3, #48	; 0x30
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	2b00      	cmp	r3, #0
 8009034:	d023      	beq.n	800907e <HAL_OSPIM_Config+0x22e>
        {
          SET_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 8009036:	492d      	ldr	r1, [pc, #180]	; (80090ec <HAL_OSPIM_Config+0x29c>)
 8009038:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800903c:	4613      	mov	r3, r2
 800903e:	005b      	lsls	r3, r3, #1
 8009040:	4413      	add	r3, r2
 8009042:	00db      	lsls	r3, r3, #3
 8009044:	3350      	adds	r3, #80	; 0x50
 8009046:	443b      	add	r3, r7
 8009048:	3b30      	subs	r3, #48	; 0x30
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	3b01      	subs	r3, #1
 800904e:	f003 0301 	and.w	r3, r3, #1
 8009052:	009b      	lsls	r3, r3, #2
 8009054:	440b      	add	r3, r1
 8009056:	6859      	ldr	r1, [r3, #4]
 8009058:	4824      	ldr	r0, [pc, #144]	; (80090ec <HAL_OSPIM_Config+0x29c>)
 800905a:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800905e:	4613      	mov	r3, r2
 8009060:	005b      	lsls	r3, r3, #1
 8009062:	4413      	add	r3, r2
 8009064:	00db      	lsls	r3, r3, #3
 8009066:	3350      	adds	r3, #80	; 0x50
 8009068:	443b      	add	r3, r7
 800906a:	3b30      	subs	r3, #48	; 0x30
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	3b01      	subs	r3, #1
 8009070:	f003 0301 	and.w	r3, r3, #1
 8009074:	f441 2280 	orr.w	r2, r1, #262144	; 0x40000
 8009078:	009b      	lsls	r3, r3, #2
 800907a:	4403      	add	r3, r0
 800907c:	605a      	str	r2, [r3, #4]
                  OCTOSPIM_PCR_IOLSRC_1);
        }
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 800907e:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8009082:	4613      	mov	r3, r2
 8009084:	005b      	lsls	r3, r3, #1
 8009086:	4413      	add	r3, r2
 8009088:	00db      	lsls	r3, r3, #3
 800908a:	3350      	adds	r3, #80	; 0x50
 800908c:	443b      	add	r3, r7
 800908e:	3b2c      	subs	r3, #44	; 0x2c
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	2b00      	cmp	r3, #0
 8009094:	f000 80d9 	beq.w	800924a <HAL_OSPIM_Config+0x3fa>
        {
          SET_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 8009098:	4914      	ldr	r1, [pc, #80]	; (80090ec <HAL_OSPIM_Config+0x29c>)
 800909a:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800909e:	4613      	mov	r3, r2
 80090a0:	005b      	lsls	r3, r3, #1
 80090a2:	4413      	add	r3, r2
 80090a4:	00db      	lsls	r3, r3, #3
 80090a6:	3350      	adds	r3, #80	; 0x50
 80090a8:	443b      	add	r3, r7
 80090aa:	3b2c      	subs	r3, #44	; 0x2c
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	3b01      	subs	r3, #1
 80090b0:	f003 0301 	and.w	r3, r3, #1
 80090b4:	009b      	lsls	r3, r3, #2
 80090b6:	440b      	add	r3, r1
 80090b8:	6859      	ldr	r1, [r3, #4]
 80090ba:	480c      	ldr	r0, [pc, #48]	; (80090ec <HAL_OSPIM_Config+0x29c>)
 80090bc:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80090c0:	4613      	mov	r3, r2
 80090c2:	005b      	lsls	r3, r3, #1
 80090c4:	4413      	add	r3, r2
 80090c6:	00db      	lsls	r3, r3, #3
 80090c8:	3350      	adds	r3, #80	; 0x50
 80090ca:	443b      	add	r3, r7
 80090cc:	3b2c      	subs	r3, #44	; 0x2c
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	3b01      	subs	r3, #1
 80090d2:	f003 0301 	and.w	r3, r3, #1
 80090d6:	f041 6280 	orr.w	r2, r1, #67108864	; 0x4000000
 80090da:	009b      	lsls	r3, r3, #2
 80090dc:	4403      	add	r3, r0
 80090de:	605a      	str	r2, [r3, #4]
 80090e0:	e0b3      	b.n	800924a <HAL_OSPIM_Config+0x3fa>
 80090e2:	bf00      	nop
 80090e4:	420d1400 	.word	0x420d1400
 80090e8:	420d2400 	.word	0x420d2400
 80090ec:	420c4000 	.word	0x420c4000
        }
      }
    }
    else
    {
      if (IOM_cfg[instance].ClkPort != 0U)
 80090f0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80090f2:	4613      	mov	r3, r2
 80090f4:	005b      	lsls	r3, r3, #1
 80090f6:	4413      	add	r3, r2
 80090f8:	00db      	lsls	r3, r3, #3
 80090fa:	3350      	adds	r3, #80	; 0x50
 80090fc:	443b      	add	r3, r7
 80090fe:	3b3c      	subs	r3, #60	; 0x3c
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	2b00      	cmp	r3, #0
 8009104:	f000 80a1 	beq.w	800924a <HAL_OSPIM_Config+0x3fa>
      {
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKEN);
 8009108:	4993      	ldr	r1, [pc, #588]	; (8009358 <HAL_OSPIM_Config+0x508>)
 800910a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800910c:	4613      	mov	r3, r2
 800910e:	005b      	lsls	r3, r3, #1
 8009110:	4413      	add	r3, r2
 8009112:	00db      	lsls	r3, r3, #3
 8009114:	3350      	adds	r3, #80	; 0x50
 8009116:	443b      	add	r3, r7
 8009118:	3b3c      	subs	r3, #60	; 0x3c
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	3b01      	subs	r3, #1
 800911e:	009b      	lsls	r3, r3, #2
 8009120:	440b      	add	r3, r1
 8009122:	6859      	ldr	r1, [r3, #4]
 8009124:	488c      	ldr	r0, [pc, #560]	; (8009358 <HAL_OSPIM_Config+0x508>)
 8009126:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009128:	4613      	mov	r3, r2
 800912a:	005b      	lsls	r3, r3, #1
 800912c:	4413      	add	r3, r2
 800912e:	00db      	lsls	r3, r3, #3
 8009130:	3350      	adds	r3, #80	; 0x50
 8009132:	443b      	add	r3, r7
 8009134:	3b3c      	subs	r3, #60	; 0x3c
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	3b01      	subs	r3, #1
 800913a:	f021 0201 	bic.w	r2, r1, #1
 800913e:	009b      	lsls	r3, r3, #2
 8009140:	4403      	add	r3, r0
 8009142:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[instance].DQSPort != 0U)
 8009144:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009146:	4613      	mov	r3, r2
 8009148:	005b      	lsls	r3, r3, #1
 800914a:	4413      	add	r3, r2
 800914c:	00db      	lsls	r3, r3, #3
 800914e:	3350      	adds	r3, #80	; 0x50
 8009150:	443b      	add	r3, r7
 8009152:	3b38      	subs	r3, #56	; 0x38
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	2b00      	cmp	r3, #0
 8009158:	d01d      	beq.n	8009196 <HAL_OSPIM_Config+0x346>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSEN);
 800915a:	497f      	ldr	r1, [pc, #508]	; (8009358 <HAL_OSPIM_Config+0x508>)
 800915c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800915e:	4613      	mov	r3, r2
 8009160:	005b      	lsls	r3, r3, #1
 8009162:	4413      	add	r3, r2
 8009164:	00db      	lsls	r3, r3, #3
 8009166:	3350      	adds	r3, #80	; 0x50
 8009168:	443b      	add	r3, r7
 800916a:	3b38      	subs	r3, #56	; 0x38
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	3b01      	subs	r3, #1
 8009170:	009b      	lsls	r3, r3, #2
 8009172:	440b      	add	r3, r1
 8009174:	6859      	ldr	r1, [r3, #4]
 8009176:	4878      	ldr	r0, [pc, #480]	; (8009358 <HAL_OSPIM_Config+0x508>)
 8009178:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800917a:	4613      	mov	r3, r2
 800917c:	005b      	lsls	r3, r3, #1
 800917e:	4413      	add	r3, r2
 8009180:	00db      	lsls	r3, r3, #3
 8009182:	3350      	adds	r3, #80	; 0x50
 8009184:	443b      	add	r3, r7
 8009186:	3b38      	subs	r3, #56	; 0x38
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	3b01      	subs	r3, #1
 800918c:	f021 0210 	bic.w	r2, r1, #16
 8009190:	009b      	lsls	r3, r3, #2
 8009192:	4403      	add	r3, r0
 8009194:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8009196:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009198:	4613      	mov	r3, r2
 800919a:	005b      	lsls	r3, r3, #1
 800919c:	4413      	add	r3, r2
 800919e:	00db      	lsls	r3, r3, #3
 80091a0:	3350      	adds	r3, #80	; 0x50
 80091a2:	443b      	add	r3, r7
 80091a4:	3b30      	subs	r3, #48	; 0x30
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d021      	beq.n	80091f0 <HAL_OSPIM_Config+0x3a0>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOLEN);
 80091ac:	496a      	ldr	r1, [pc, #424]	; (8009358 <HAL_OSPIM_Config+0x508>)
 80091ae:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80091b0:	4613      	mov	r3, r2
 80091b2:	005b      	lsls	r3, r3, #1
 80091b4:	4413      	add	r3, r2
 80091b6:	00db      	lsls	r3, r3, #3
 80091b8:	3350      	adds	r3, #80	; 0x50
 80091ba:	443b      	add	r3, r7
 80091bc:	3b30      	subs	r3, #48	; 0x30
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	3b01      	subs	r3, #1
 80091c2:	f003 0301 	and.w	r3, r3, #1
 80091c6:	009b      	lsls	r3, r3, #2
 80091c8:	440b      	add	r3, r1
 80091ca:	6859      	ldr	r1, [r3, #4]
 80091cc:	4862      	ldr	r0, [pc, #392]	; (8009358 <HAL_OSPIM_Config+0x508>)
 80091ce:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80091d0:	4613      	mov	r3, r2
 80091d2:	005b      	lsls	r3, r3, #1
 80091d4:	4413      	add	r3, r2
 80091d6:	00db      	lsls	r3, r3, #3
 80091d8:	3350      	adds	r3, #80	; 0x50
 80091da:	443b      	add	r3, r7
 80091dc:	3b30      	subs	r3, #48	; 0x30
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	3b01      	subs	r3, #1
 80091e2:	f003 0301 	and.w	r3, r3, #1
 80091e6:	f421 3280 	bic.w	r2, r1, #65536	; 0x10000
 80091ea:	009b      	lsls	r3, r3, #2
 80091ec:	4403      	add	r3, r0
 80091ee:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 80091f0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80091f2:	4613      	mov	r3, r2
 80091f4:	005b      	lsls	r3, r3, #1
 80091f6:	4413      	add	r3, r2
 80091f8:	00db      	lsls	r3, r3, #3
 80091fa:	3350      	adds	r3, #80	; 0x50
 80091fc:	443b      	add	r3, r7
 80091fe:	3b2c      	subs	r3, #44	; 0x2c
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	2b00      	cmp	r3, #0
 8009204:	d021      	beq.n	800924a <HAL_OSPIM_Config+0x3fa>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOHEN);
 8009206:	4954      	ldr	r1, [pc, #336]	; (8009358 <HAL_OSPIM_Config+0x508>)
 8009208:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800920a:	4613      	mov	r3, r2
 800920c:	005b      	lsls	r3, r3, #1
 800920e:	4413      	add	r3, r2
 8009210:	00db      	lsls	r3, r3, #3
 8009212:	3350      	adds	r3, #80	; 0x50
 8009214:	443b      	add	r3, r7
 8009216:	3b2c      	subs	r3, #44	; 0x2c
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	3b01      	subs	r3, #1
 800921c:	f003 0301 	and.w	r3, r3, #1
 8009220:	009b      	lsls	r3, r3, #2
 8009222:	440b      	add	r3, r1
 8009224:	6859      	ldr	r1, [r3, #4]
 8009226:	484c      	ldr	r0, [pc, #304]	; (8009358 <HAL_OSPIM_Config+0x508>)
 8009228:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800922a:	4613      	mov	r3, r2
 800922c:	005b      	lsls	r3, r3, #1
 800922e:	4413      	add	r3, r2
 8009230:	00db      	lsls	r3, r3, #3
 8009232:	3350      	adds	r3, #80	; 0x50
 8009234:	443b      	add	r3, r7
 8009236:	3b2c      	subs	r3, #44	; 0x2c
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	3b01      	subs	r3, #1
 800923c:	f003 0301 	and.w	r3, r3, #1
 8009240:	f021 7280 	bic.w	r2, r1, #16777216	; 0x1000000
 8009244:	009b      	lsls	r3, r3, #2
 8009246:	4403      	add	r3, r0
 8009248:	605a      	str	r2, [r3, #4]
        }
      }
    }

    /********************* Deactivation of other instance *********************/
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 800924a:	68bb      	ldr	r3, [r7, #8]
 800924c:	6819      	ldr	r1, [r3, #0]
 800924e:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8009252:	4613      	mov	r3, r2
 8009254:	005b      	lsls	r3, r3, #1
 8009256:	4413      	add	r3, r2
 8009258:	00db      	lsls	r3, r3, #3
 800925a:	3350      	adds	r3, #80	; 0x50
 800925c:	443b      	add	r3, r7
 800925e:	3b3c      	subs	r3, #60	; 0x3c
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	4299      	cmp	r1, r3
 8009264:	d038      	beq.n	80092d8 <HAL_OSPIM_Config+0x488>
 8009266:	68bb      	ldr	r3, [r7, #8]
 8009268:	6859      	ldr	r1, [r3, #4]
 800926a:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800926e:	4613      	mov	r3, r2
 8009270:	005b      	lsls	r3, r3, #1
 8009272:	4413      	add	r3, r2
 8009274:	00db      	lsls	r3, r3, #3
 8009276:	3350      	adds	r3, #80	; 0x50
 8009278:	443b      	add	r3, r7
 800927a:	3b38      	subs	r3, #56	; 0x38
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	4299      	cmp	r1, r3
 8009280:	d02a      	beq.n	80092d8 <HAL_OSPIM_Config+0x488>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8009282:	68bb      	ldr	r3, [r7, #8]
 8009284:	6899      	ldr	r1, [r3, #8]
 8009286:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800928a:	4613      	mov	r3, r2
 800928c:	005b      	lsls	r3, r3, #1
 800928e:	4413      	add	r3, r2
 8009290:	00db      	lsls	r3, r3, #3
 8009292:	3350      	adds	r3, #80	; 0x50
 8009294:	443b      	add	r3, r7
 8009296:	3b34      	subs	r3, #52	; 0x34
 8009298:	681b      	ldr	r3, [r3, #0]
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 800929a:	4299      	cmp	r1, r3
 800929c:	d01c      	beq.n	80092d8 <HAL_OSPIM_Config+0x488>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 800929e:	68bb      	ldr	r3, [r7, #8]
 80092a0:	68d9      	ldr	r1, [r3, #12]
 80092a2:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80092a6:	4613      	mov	r3, r2
 80092a8:	005b      	lsls	r3, r3, #1
 80092aa:	4413      	add	r3, r2
 80092ac:	00db      	lsls	r3, r3, #3
 80092ae:	3350      	adds	r3, #80	; 0x50
 80092b0:	443b      	add	r3, r7
 80092b2:	3b30      	subs	r3, #48	; 0x30
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	4299      	cmp	r1, r3
 80092b8:	d00e      	beq.n	80092d8 <HAL_OSPIM_Config+0x488>
        (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
 80092ba:	68bb      	ldr	r3, [r7, #8]
 80092bc:	6919      	ldr	r1, [r3, #16]
 80092be:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80092c2:	4613      	mov	r3, r2
 80092c4:	005b      	lsls	r3, r3, #1
 80092c6:	4413      	add	r3, r2
 80092c8:	00db      	lsls	r3, r3, #3
 80092ca:	3350      	adds	r3, #80	; 0x50
 80092cc:	443b      	add	r3, r7
 80092ce:	3b2c      	subs	r3, #44	; 0x2c
 80092d0:	681b      	ldr	r3, [r3, #0]
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 80092d2:	4299      	cmp	r1, r3
 80092d4:	f040 810e 	bne.w	80094f4 <HAL_OSPIM_Config+0x6a4>
    {
      if ((cfg->ClkPort   == IOM_cfg[other_instance].ClkPort)   &&
 80092d8:	68bb      	ldr	r3, [r7, #8]
 80092da:	6819      	ldr	r1, [r3, #0]
 80092dc:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80092e0:	4613      	mov	r3, r2
 80092e2:	005b      	lsls	r3, r3, #1
 80092e4:	4413      	add	r3, r2
 80092e6:	00db      	lsls	r3, r3, #3
 80092e8:	3350      	adds	r3, #80	; 0x50
 80092ea:	443b      	add	r3, r7
 80092ec:	3b3c      	subs	r3, #60	; 0x3c
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	4299      	cmp	r1, r3
 80092f2:	d133      	bne.n	800935c <HAL_OSPIM_Config+0x50c>
          (cfg->DQSPort    == IOM_cfg[other_instance].DQSPort)  &&
 80092f4:	68bb      	ldr	r3, [r7, #8]
 80092f6:	6859      	ldr	r1, [r3, #4]
 80092f8:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80092fc:	4613      	mov	r3, r2
 80092fe:	005b      	lsls	r3, r3, #1
 8009300:	4413      	add	r3, r2
 8009302:	00db      	lsls	r3, r3, #3
 8009304:	3350      	adds	r3, #80	; 0x50
 8009306:	443b      	add	r3, r7
 8009308:	3b38      	subs	r3, #56	; 0x38
 800930a:	681b      	ldr	r3, [r3, #0]
      if ((cfg->ClkPort   == IOM_cfg[other_instance].ClkPort)   &&
 800930c:	4299      	cmp	r1, r3
 800930e:	d125      	bne.n	800935c <HAL_OSPIM_Config+0x50c>
          (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) &&
 8009310:	68bb      	ldr	r3, [r7, #8]
 8009312:	68d9      	ldr	r1, [r3, #12]
 8009314:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8009318:	4613      	mov	r3, r2
 800931a:	005b      	lsls	r3, r3, #1
 800931c:	4413      	add	r3, r2
 800931e:	00db      	lsls	r3, r3, #3
 8009320:	3350      	adds	r3, #80	; 0x50
 8009322:	443b      	add	r3, r7
 8009324:	3b30      	subs	r3, #48	; 0x30
 8009326:	681b      	ldr	r3, [r3, #0]
          (cfg->DQSPort    == IOM_cfg[other_instance].DQSPort)  &&
 8009328:	4299      	cmp	r1, r3
 800932a:	d117      	bne.n	800935c <HAL_OSPIM_Config+0x50c>
          (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
 800932c:	68bb      	ldr	r3, [r7, #8]
 800932e:	6919      	ldr	r1, [r3, #16]
 8009330:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8009334:	4613      	mov	r3, r2
 8009336:	005b      	lsls	r3, r3, #1
 8009338:	4413      	add	r3, r2
 800933a:	00db      	lsls	r3, r3, #3
 800933c:	3350      	adds	r3, #80	; 0x50
 800933e:	443b      	add	r3, r7
 8009340:	3b2c      	subs	r3, #44	; 0x2c
 8009342:	681b      	ldr	r3, [r3, #0]
          (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) &&
 8009344:	4299      	cmp	r1, r3
 8009346:	d109      	bne.n	800935c <HAL_OSPIM_Config+0x50c>
      {
        /* Multiplexing should be performed */
        SET_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
 8009348:	4b03      	ldr	r3, [pc, #12]	; (8009358 <HAL_OSPIM_Config+0x508>)
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	4a02      	ldr	r2, [pc, #8]	; (8009358 <HAL_OSPIM_Config+0x508>)
 800934e:	f043 0301 	orr.w	r3, r3, #1
 8009352:	6013      	str	r3, [r2, #0]
 8009354:	e0ce      	b.n	80094f4 <HAL_OSPIM_Config+0x6a4>
 8009356:	bf00      	nop
 8009358:	420c4000 	.word	0x420c4000
      }
      else
      {
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKEN);
 800935c:	49a4      	ldr	r1, [pc, #656]	; (80095f0 <HAL_OSPIM_Config+0x7a0>)
 800935e:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8009362:	4613      	mov	r3, r2
 8009364:	005b      	lsls	r3, r3, #1
 8009366:	4413      	add	r3, r2
 8009368:	00db      	lsls	r3, r3, #3
 800936a:	3350      	adds	r3, #80	; 0x50
 800936c:	443b      	add	r3, r7
 800936e:	3b3c      	subs	r3, #60	; 0x3c
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	3b01      	subs	r3, #1
 8009374:	009b      	lsls	r3, r3, #2
 8009376:	440b      	add	r3, r1
 8009378:	6859      	ldr	r1, [r3, #4]
 800937a:	489d      	ldr	r0, [pc, #628]	; (80095f0 <HAL_OSPIM_Config+0x7a0>)
 800937c:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8009380:	4613      	mov	r3, r2
 8009382:	005b      	lsls	r3, r3, #1
 8009384:	4413      	add	r3, r2
 8009386:	00db      	lsls	r3, r3, #3
 8009388:	3350      	adds	r3, #80	; 0x50
 800938a:	443b      	add	r3, r7
 800938c:	3b3c      	subs	r3, #60	; 0x3c
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	3b01      	subs	r3, #1
 8009392:	f021 0201 	bic.w	r2, r1, #1
 8009396:	009b      	lsls	r3, r3, #2
 8009398:	4403      	add	r3, r0
 800939a:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 800939c:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80093a0:	4613      	mov	r3, r2
 80093a2:	005b      	lsls	r3, r3, #1
 80093a4:	4413      	add	r3, r2
 80093a6:	00db      	lsls	r3, r3, #3
 80093a8:	3350      	adds	r3, #80	; 0x50
 80093aa:	443b      	add	r3, r7
 80093ac:	3b38      	subs	r3, #56	; 0x38
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d01f      	beq.n	80093f4 <HAL_OSPIM_Config+0x5a4>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSEN);
 80093b4:	498e      	ldr	r1, [pc, #568]	; (80095f0 <HAL_OSPIM_Config+0x7a0>)
 80093b6:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80093ba:	4613      	mov	r3, r2
 80093bc:	005b      	lsls	r3, r3, #1
 80093be:	4413      	add	r3, r2
 80093c0:	00db      	lsls	r3, r3, #3
 80093c2:	3350      	adds	r3, #80	; 0x50
 80093c4:	443b      	add	r3, r7
 80093c6:	3b38      	subs	r3, #56	; 0x38
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	3b01      	subs	r3, #1
 80093cc:	009b      	lsls	r3, r3, #2
 80093ce:	440b      	add	r3, r1
 80093d0:	6859      	ldr	r1, [r3, #4]
 80093d2:	4887      	ldr	r0, [pc, #540]	; (80095f0 <HAL_OSPIM_Config+0x7a0>)
 80093d4:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80093d8:	4613      	mov	r3, r2
 80093da:	005b      	lsls	r3, r3, #1
 80093dc:	4413      	add	r3, r2
 80093de:	00db      	lsls	r3, r3, #3
 80093e0:	3350      	adds	r3, #80	; 0x50
 80093e2:	443b      	add	r3, r7
 80093e4:	3b38      	subs	r3, #56	; 0x38
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	3b01      	subs	r3, #1
 80093ea:	f021 0210 	bic.w	r2, r1, #16
 80093ee:	009b      	lsls	r3, r3, #2
 80093f0:	4403      	add	r3, r0
 80093f2:	605a      	str	r2, [r3, #4]
        }
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].NCSPort - 1U)], OCTOSPIM_PCR_NCSEN);
 80093f4:	497e      	ldr	r1, [pc, #504]	; (80095f0 <HAL_OSPIM_Config+0x7a0>)
 80093f6:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80093fa:	4613      	mov	r3, r2
 80093fc:	005b      	lsls	r3, r3, #1
 80093fe:	4413      	add	r3, r2
 8009400:	00db      	lsls	r3, r3, #3
 8009402:	3350      	adds	r3, #80	; 0x50
 8009404:	443b      	add	r3, r7
 8009406:	3b34      	subs	r3, #52	; 0x34
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	3b01      	subs	r3, #1
 800940c:	009b      	lsls	r3, r3, #2
 800940e:	440b      	add	r3, r1
 8009410:	6859      	ldr	r1, [r3, #4]
 8009412:	4877      	ldr	r0, [pc, #476]	; (80095f0 <HAL_OSPIM_Config+0x7a0>)
 8009414:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8009418:	4613      	mov	r3, r2
 800941a:	005b      	lsls	r3, r3, #1
 800941c:	4413      	add	r3, r2
 800941e:	00db      	lsls	r3, r3, #3
 8009420:	3350      	adds	r3, #80	; 0x50
 8009422:	443b      	add	r3, r7
 8009424:	3b34      	subs	r3, #52	; 0x34
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	3b01      	subs	r3, #1
 800942a:	f421 7280 	bic.w	r2, r1, #256	; 0x100
 800942e:	009b      	lsls	r3, r3, #2
 8009430:	4403      	add	r3, r0
 8009432:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8009434:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8009438:	4613      	mov	r3, r2
 800943a:	005b      	lsls	r3, r3, #1
 800943c:	4413      	add	r3, r2
 800943e:	00db      	lsls	r3, r3, #3
 8009440:	3350      	adds	r3, #80	; 0x50
 8009442:	443b      	add	r3, r7
 8009444:	3b30      	subs	r3, #48	; 0x30
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	2b00      	cmp	r3, #0
 800944a:	d023      	beq.n	8009494 <HAL_OSPIM_Config+0x644>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 800944c:	4968      	ldr	r1, [pc, #416]	; (80095f0 <HAL_OSPIM_Config+0x7a0>)
 800944e:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8009452:	4613      	mov	r3, r2
 8009454:	005b      	lsls	r3, r3, #1
 8009456:	4413      	add	r3, r2
 8009458:	00db      	lsls	r3, r3, #3
 800945a:	3350      	adds	r3, #80	; 0x50
 800945c:	443b      	add	r3, r7
 800945e:	3b30      	subs	r3, #48	; 0x30
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	3b01      	subs	r3, #1
 8009464:	f003 0301 	and.w	r3, r3, #1
 8009468:	009b      	lsls	r3, r3, #2
 800946a:	440b      	add	r3, r1
 800946c:	6859      	ldr	r1, [r3, #4]
 800946e:	4860      	ldr	r0, [pc, #384]	; (80095f0 <HAL_OSPIM_Config+0x7a0>)
 8009470:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8009474:	4613      	mov	r3, r2
 8009476:	005b      	lsls	r3, r3, #1
 8009478:	4413      	add	r3, r2
 800947a:	00db      	lsls	r3, r3, #3
 800947c:	3350      	adds	r3, #80	; 0x50
 800947e:	443b      	add	r3, r7
 8009480:	3b30      	subs	r3, #48	; 0x30
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	3b01      	subs	r3, #1
 8009486:	f003 0301 	and.w	r3, r3, #1
 800948a:	f421 3280 	bic.w	r2, r1, #65536	; 0x10000
 800948e:	009b      	lsls	r3, r3, #2
 8009490:	4403      	add	r3, r0
 8009492:	605a      	str	r2, [r3, #4]
                    OCTOSPIM_PCR_IOLEN);
        }
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8009494:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8009498:	4613      	mov	r3, r2
 800949a:	005b      	lsls	r3, r3, #1
 800949c:	4413      	add	r3, r2
 800949e:	00db      	lsls	r3, r3, #3
 80094a0:	3350      	adds	r3, #80	; 0x50
 80094a2:	443b      	add	r3, r7
 80094a4:	3b2c      	subs	r3, #44	; 0x2c
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	d023      	beq.n	80094f4 <HAL_OSPIM_Config+0x6a4>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 80094ac:	4950      	ldr	r1, [pc, #320]	; (80095f0 <HAL_OSPIM_Config+0x7a0>)
 80094ae:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80094b2:	4613      	mov	r3, r2
 80094b4:	005b      	lsls	r3, r3, #1
 80094b6:	4413      	add	r3, r2
 80094b8:	00db      	lsls	r3, r3, #3
 80094ba:	3350      	adds	r3, #80	; 0x50
 80094bc:	443b      	add	r3, r7
 80094be:	3b2c      	subs	r3, #44	; 0x2c
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	3b01      	subs	r3, #1
 80094c4:	f003 0301 	and.w	r3, r3, #1
 80094c8:	009b      	lsls	r3, r3, #2
 80094ca:	440b      	add	r3, r1
 80094cc:	6859      	ldr	r1, [r3, #4]
 80094ce:	4848      	ldr	r0, [pc, #288]	; (80095f0 <HAL_OSPIM_Config+0x7a0>)
 80094d0:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80094d4:	4613      	mov	r3, r2
 80094d6:	005b      	lsls	r3, r3, #1
 80094d8:	4413      	add	r3, r2
 80094da:	00db      	lsls	r3, r3, #3
 80094dc:	3350      	adds	r3, #80	; 0x50
 80094de:	443b      	add	r3, r7
 80094e0:	3b2c      	subs	r3, #44	; 0x2c
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	3b01      	subs	r3, #1
 80094e6:	f003 0301 	and.w	r3, r3, #1
 80094ea:	f021 7280 	bic.w	r2, r1, #16777216	; 0x1000000
 80094ee:	009b      	lsls	r3, r3, #2
 80094f0:	4403      	add	r3, r0
 80094f2:	605a      	str	r2, [r3, #4]
        }
      }
    }

    /******************** Activation of new configuration *********************/
    MODIFY_REG(OCTOSPIM->PCR[(cfg->NCSPort - 1U)], (OCTOSPIM_PCR_NCSEN | OCTOSPIM_PCR_NCSSRC),
 80094f4:	4a3e      	ldr	r2, [pc, #248]	; (80095f0 <HAL_OSPIM_Config+0x7a0>)
 80094f6:	68bb      	ldr	r3, [r7, #8]
 80094f8:	689b      	ldr	r3, [r3, #8]
 80094fa:	3b01      	subs	r3, #1
 80094fc:	009b      	lsls	r3, r3, #2
 80094fe:	4413      	add	r3, r2
 8009500:	685b      	ldr	r3, [r3, #4]
 8009502:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009506:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009508:	025b      	lsls	r3, r3, #9
 800950a:	431a      	orrs	r2, r3
 800950c:	4938      	ldr	r1, [pc, #224]	; (80095f0 <HAL_OSPIM_Config+0x7a0>)
 800950e:	68bb      	ldr	r3, [r7, #8]
 8009510:	689b      	ldr	r3, [r3, #8]
 8009512:	3b01      	subs	r3, #1
 8009514:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009518:	009b      	lsls	r3, r3, #2
 800951a:	440b      	add	r3, r1
 800951c:	605a      	str	r2, [r3, #4]
               (OCTOSPIM_PCR_NCSEN | (instance << OCTOSPIM_PCR_NCSSRC_Pos)));

    if (((cfg->Req2AckTime) >= 1U) && ((cfg->Req2AckTime) <= 256U))
 800951e:	68bb      	ldr	r3, [r7, #8]
 8009520:	695b      	ldr	r3, [r3, #20]
 8009522:	2b00      	cmp	r3, #0
 8009524:	d018      	beq.n	8009558 <HAL_OSPIM_Config+0x708>
 8009526:	68bb      	ldr	r3, [r7, #8]
 8009528:	695b      	ldr	r3, [r3, #20]
 800952a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800952e:	d813      	bhi.n	8009558 <HAL_OSPIM_Config+0x708>
    {
      if ((cfg->Req2AckTime - 1U) > ((OCTOSPIM->CR & OCTOSPIM_CR_REQ2ACK_TIME) >> OCTOSPIM_CR_REQ2ACK_TIME_Pos))
 8009530:	68bb      	ldr	r3, [r7, #8]
 8009532:	695b      	ldr	r3, [r3, #20]
 8009534:	1e5a      	subs	r2, r3, #1
 8009536:	4b2e      	ldr	r3, [pc, #184]	; (80095f0 <HAL_OSPIM_Config+0x7a0>)
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	0c1b      	lsrs	r3, r3, #16
 800953c:	b2db      	uxtb	r3, r3
 800953e:	429a      	cmp	r2, r3
 8009540:	d90a      	bls.n	8009558 <HAL_OSPIM_Config+0x708>
      {
        MODIFY_REG(OCTOSPIM->CR, OCTOSPIM_CR_REQ2ACK_TIME, ((cfg->Req2AckTime - 1U) << OCTOSPIM_CR_REQ2ACK_TIME_Pos));
 8009542:	4b2b      	ldr	r3, [pc, #172]	; (80095f0 <HAL_OSPIM_Config+0x7a0>)
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	f423 027f 	bic.w	r2, r3, #16711680	; 0xff0000
 800954a:	68bb      	ldr	r3, [r7, #8]
 800954c:	695b      	ldr	r3, [r3, #20]
 800954e:	3b01      	subs	r3, #1
 8009550:	041b      	lsls	r3, r3, #16
 8009552:	4927      	ldr	r1, [pc, #156]	; (80095f0 <HAL_OSPIM_Config+0x7a0>)
 8009554:	4313      	orrs	r3, r2
 8009556:	600b      	str	r3, [r1, #0]
      {
        /* Nothing to do */
      }
    }

    if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) != 0U)
 8009558:	4b25      	ldr	r3, [pc, #148]	; (80095f0 <HAL_OSPIM_Config+0x7a0>)
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	f003 0301 	and.w	r3, r3, #1
 8009560:	2b00      	cmp	r3, #0
 8009562:	f000 809a 	beq.w	800969a <HAL_OSPIM_Config+0x84a>
    {
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort - 1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC), OCTOSPIM_PCR_CLKEN);
 8009566:	4a22      	ldr	r2, [pc, #136]	; (80095f0 <HAL_OSPIM_Config+0x7a0>)
 8009568:	68bb      	ldr	r3, [r7, #8]
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	3b01      	subs	r3, #1
 800956e:	009b      	lsls	r3, r3, #2
 8009570:	4413      	add	r3, r2
 8009572:	685b      	ldr	r3, [r3, #4]
 8009574:	f023 0203 	bic.w	r2, r3, #3
 8009578:	491d      	ldr	r1, [pc, #116]	; (80095f0 <HAL_OSPIM_Config+0x7a0>)
 800957a:	68bb      	ldr	r3, [r7, #8]
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	3b01      	subs	r3, #1
 8009580:	f042 0201 	orr.w	r2, r2, #1
 8009584:	009b      	lsls	r3, r3, #2
 8009586:	440b      	add	r3, r1
 8009588:	605a      	str	r2, [r3, #4]
      if (cfg->DQSPort != 0U)
 800958a:	68bb      	ldr	r3, [r7, #8]
 800958c:	685b      	ldr	r3, [r3, #4]
 800958e:	2b00      	cmp	r3, #0
 8009590:	d011      	beq.n	80095b6 <HAL_OSPIM_Config+0x766>
      {
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort - 1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC), OCTOSPIM_PCR_DQSEN);
 8009592:	4a17      	ldr	r2, [pc, #92]	; (80095f0 <HAL_OSPIM_Config+0x7a0>)
 8009594:	68bb      	ldr	r3, [r7, #8]
 8009596:	685b      	ldr	r3, [r3, #4]
 8009598:	3b01      	subs	r3, #1
 800959a:	009b      	lsls	r3, r3, #2
 800959c:	4413      	add	r3, r2
 800959e:	685b      	ldr	r3, [r3, #4]
 80095a0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80095a4:	4912      	ldr	r1, [pc, #72]	; (80095f0 <HAL_OSPIM_Config+0x7a0>)
 80095a6:	68bb      	ldr	r3, [r7, #8]
 80095a8:	685b      	ldr	r3, [r3, #4]
 80095aa:	3b01      	subs	r3, #1
 80095ac:	f042 0210 	orr.w	r2, r2, #16
 80095b0:	009b      	lsls	r3, r3, #2
 80095b2:	440b      	add	r3, r1
 80095b4:	605a      	str	r2, [r3, #4]
      }

      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 80095b6:	68bb      	ldr	r3, [r7, #8]
 80095b8:	68db      	ldr	r3, [r3, #12]
 80095ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80095be:	2b00      	cmp	r3, #0
 80095c0:	d018      	beq.n	80095f4 <HAL_OSPIM_Config+0x7a4>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 80095c2:	4a0b      	ldr	r2, [pc, #44]	; (80095f0 <HAL_OSPIM_Config+0x7a0>)
 80095c4:	68bb      	ldr	r3, [r7, #8]
 80095c6:	68db      	ldr	r3, [r3, #12]
 80095c8:	3b01      	subs	r3, #1
 80095ca:	f003 0301 	and.w	r3, r3, #1
 80095ce:	009b      	lsls	r3, r3, #2
 80095d0:	4413      	add	r3, r2
 80095d2:	685b      	ldr	r3, [r3, #4]
 80095d4:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80095d8:	4905      	ldr	r1, [pc, #20]	; (80095f0 <HAL_OSPIM_Config+0x7a0>)
 80095da:	68bb      	ldr	r3, [r7, #8]
 80095dc:	68db      	ldr	r3, [r3, #12]
 80095de:	3b01      	subs	r3, #1
 80095e0:	f003 0301 	and.w	r3, r3, #1
 80095e4:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80095e8:	009b      	lsls	r3, r3, #2
 80095ea:	440b      	add	r3, r1
 80095ec:	605a      	str	r2, [r3, #4]
 80095ee:	e01b      	b.n	8009628 <HAL_OSPIM_Config+0x7d8>
 80095f0:	420c4000 	.word	0x420c4000
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC), OCTOSPIM_PCR_IOLEN);
      }
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 80095f4:	68bb      	ldr	r3, [r7, #8]
 80095f6:	68db      	ldr	r3, [r3, #12]
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	d015      	beq.n	8009628 <HAL_OSPIM_Config+0x7d8>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 80095fc:	4a8a      	ldr	r2, [pc, #552]	; (8009828 <HAL_OSPIM_Config+0x9d8>)
 80095fe:	68bb      	ldr	r3, [r7, #8]
 8009600:	68db      	ldr	r3, [r3, #12]
 8009602:	3b01      	subs	r3, #1
 8009604:	f003 0301 	and.w	r3, r3, #1
 8009608:	009b      	lsls	r3, r3, #2
 800960a:	4413      	add	r3, r2
 800960c:	685b      	ldr	r3, [r3, #4]
 800960e:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8009612:	4985      	ldr	r1, [pc, #532]	; (8009828 <HAL_OSPIM_Config+0x9d8>)
 8009614:	68bb      	ldr	r3, [r7, #8]
 8009616:	68db      	ldr	r3, [r3, #12]
 8009618:	3b01      	subs	r3, #1
 800961a:	f003 0301 	and.w	r3, r3, #1
 800961e:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8009622:	009b      	lsls	r3, r3, #2
 8009624:	440b      	add	r3, r1
 8009626:	605a      	str	r2, [r3, #4]
      else
      {
        /* Nothing to do */
      }

      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8009628:	68bb      	ldr	r3, [r7, #8]
 800962a:	691b      	ldr	r3, [r3, #16]
 800962c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009630:	2b00      	cmp	r3, #0
 8009632:	d016      	beq.n	8009662 <HAL_OSPIM_Config+0x812>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 8009634:	4a7c      	ldr	r2, [pc, #496]	; (8009828 <HAL_OSPIM_Config+0x9d8>)
 8009636:	68bb      	ldr	r3, [r7, #8]
 8009638:	691b      	ldr	r3, [r3, #16]
 800963a:	3b01      	subs	r3, #1
 800963c:	f003 0301 	and.w	r3, r3, #1
 8009640:	009b      	lsls	r3, r3, #2
 8009642:	4413      	add	r3, r2
 8009644:	685b      	ldr	r3, [r3, #4]
 8009646:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800964a:	4977      	ldr	r1, [pc, #476]	; (8009828 <HAL_OSPIM_Config+0x9d8>)
 800964c:	68bb      	ldr	r3, [r7, #8]
 800964e:	691b      	ldr	r3, [r3, #16]
 8009650:	3b01      	subs	r3, #1
 8009652:	f003 0301 	and.w	r3, r3, #1
 8009656:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
 800965a:	009b      	lsls	r3, r3, #2
 800965c:	440b      	add	r3, r1
 800965e:	605a      	str	r2, [r3, #4]
 8009660:	e0c3      	b.n	80097ea <HAL_OSPIM_Config+0x99a>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC), (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC_0));
      }
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8009662:	68bb      	ldr	r3, [r7, #8]
 8009664:	691b      	ldr	r3, [r3, #16]
 8009666:	2b00      	cmp	r3, #0
 8009668:	f000 80bf 	beq.w	80097ea <HAL_OSPIM_Config+0x99a>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 800966c:	4a6e      	ldr	r2, [pc, #440]	; (8009828 <HAL_OSPIM_Config+0x9d8>)
 800966e:	68bb      	ldr	r3, [r7, #8]
 8009670:	691b      	ldr	r3, [r3, #16]
 8009672:	3b01      	subs	r3, #1
 8009674:	f003 0301 	and.w	r3, r3, #1
 8009678:	009b      	lsls	r3, r3, #2
 800967a:	4413      	add	r3, r2
 800967c:	685b      	ldr	r3, [r3, #4]
 800967e:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8009682:	4969      	ldr	r1, [pc, #420]	; (8009828 <HAL_OSPIM_Config+0x9d8>)
 8009684:	68bb      	ldr	r3, [r7, #8]
 8009686:	691b      	ldr	r3, [r3, #16]
 8009688:	3b01      	subs	r3, #1
 800968a:	f003 0301 	and.w	r3, r3, #1
 800968e:	f042 7240 	orr.w	r2, r2, #50331648	; 0x3000000
 8009692:	009b      	lsls	r3, r3, #2
 8009694:	440b      	add	r3, r1
 8009696:	605a      	str	r2, [r3, #4]
 8009698:	e0a7      	b.n	80097ea <HAL_OSPIM_Config+0x99a>
        /* Nothing to do */
      }
    }
    else
    {
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort - 1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC),
 800969a:	4a63      	ldr	r2, [pc, #396]	; (8009828 <HAL_OSPIM_Config+0x9d8>)
 800969c:	68bb      	ldr	r3, [r7, #8]
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	3b01      	subs	r3, #1
 80096a2:	009b      	lsls	r3, r3, #2
 80096a4:	4413      	add	r3, r2
 80096a6:	685b      	ldr	r3, [r3, #4]
 80096a8:	f023 0203 	bic.w	r2, r3, #3
 80096ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80096ae:	005b      	lsls	r3, r3, #1
 80096b0:	431a      	orrs	r2, r3
 80096b2:	495d      	ldr	r1, [pc, #372]	; (8009828 <HAL_OSPIM_Config+0x9d8>)
 80096b4:	68bb      	ldr	r3, [r7, #8]
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	3b01      	subs	r3, #1
 80096ba:	f042 0201 	orr.w	r2, r2, #1
 80096be:	009b      	lsls	r3, r3, #2
 80096c0:	440b      	add	r3, r1
 80096c2:	605a      	str	r2, [r3, #4]
                 (OCTOSPIM_PCR_CLKEN | (instance << OCTOSPIM_PCR_CLKSRC_Pos)));
      if (cfg->DQSPort != 0U)
 80096c4:	68bb      	ldr	r3, [r7, #8]
 80096c6:	685b      	ldr	r3, [r3, #4]
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	d014      	beq.n	80096f6 <HAL_OSPIM_Config+0x8a6>
      {
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort - 1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC),
 80096cc:	4a56      	ldr	r2, [pc, #344]	; (8009828 <HAL_OSPIM_Config+0x9d8>)
 80096ce:	68bb      	ldr	r3, [r7, #8]
 80096d0:	685b      	ldr	r3, [r3, #4]
 80096d2:	3b01      	subs	r3, #1
 80096d4:	009b      	lsls	r3, r3, #2
 80096d6:	4413      	add	r3, r2
 80096d8:	685b      	ldr	r3, [r3, #4]
 80096da:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80096de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80096e0:	015b      	lsls	r3, r3, #5
 80096e2:	431a      	orrs	r2, r3
 80096e4:	4950      	ldr	r1, [pc, #320]	; (8009828 <HAL_OSPIM_Config+0x9d8>)
 80096e6:	68bb      	ldr	r3, [r7, #8]
 80096e8:	685b      	ldr	r3, [r3, #4]
 80096ea:	3b01      	subs	r3, #1
 80096ec:	f042 0210 	orr.w	r2, r2, #16
 80096f0:	009b      	lsls	r3, r3, #2
 80096f2:	440b      	add	r3, r1
 80096f4:	605a      	str	r2, [r3, #4]
                   (OCTOSPIM_PCR_DQSEN | (instance << OCTOSPIM_PCR_DQSSRC_Pos)));
      }

      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 80096f6:	68bb      	ldr	r3, [r7, #8]
 80096f8:	68db      	ldr	r3, [r3, #12]
 80096fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d019      	beq.n	8009736 <HAL_OSPIM_Config+0x8e6>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 8009702:	4a49      	ldr	r2, [pc, #292]	; (8009828 <HAL_OSPIM_Config+0x9d8>)
 8009704:	68bb      	ldr	r3, [r7, #8]
 8009706:	68db      	ldr	r3, [r3, #12]
 8009708:	3b01      	subs	r3, #1
 800970a:	f003 0301 	and.w	r3, r3, #1
 800970e:	009b      	lsls	r3, r3, #2
 8009710:	4413      	add	r3, r2
 8009712:	685b      	ldr	r3, [r3, #4]
 8009714:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8009718:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800971a:	049b      	lsls	r3, r3, #18
 800971c:	431a      	orrs	r2, r3
 800971e:	4942      	ldr	r1, [pc, #264]	; (8009828 <HAL_OSPIM_Config+0x9d8>)
 8009720:	68bb      	ldr	r3, [r7, #8]
 8009722:	68db      	ldr	r3, [r3, #12]
 8009724:	3b01      	subs	r3, #1
 8009726:	f003 0301 	and.w	r3, r3, #1
 800972a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800972e:	009b      	lsls	r3, r3, #2
 8009730:	440b      	add	r3, r1
 8009732:	605a      	str	r2, [r3, #4]
 8009734:	e01c      	b.n	8009770 <HAL_OSPIM_Config+0x920>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                   (OCTOSPIM_PCR_IOLEN | (instance << (OCTOSPIM_PCR_IOLSRC_Pos + 1U))));
      }
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8009736:	68bb      	ldr	r3, [r7, #8]
 8009738:	68db      	ldr	r3, [r3, #12]
 800973a:	2b00      	cmp	r3, #0
 800973c:	d018      	beq.n	8009770 <HAL_OSPIM_Config+0x920>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 800973e:	4a3a      	ldr	r2, [pc, #232]	; (8009828 <HAL_OSPIM_Config+0x9d8>)
 8009740:	68bb      	ldr	r3, [r7, #8]
 8009742:	68db      	ldr	r3, [r3, #12]
 8009744:	3b01      	subs	r3, #1
 8009746:	f003 0301 	and.w	r3, r3, #1
 800974a:	009b      	lsls	r3, r3, #2
 800974c:	4413      	add	r3, r2
 800974e:	685b      	ldr	r3, [r3, #4]
 8009750:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8009754:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009756:	069b      	lsls	r3, r3, #26
 8009758:	431a      	orrs	r2, r3
 800975a:	4933      	ldr	r1, [pc, #204]	; (8009828 <HAL_OSPIM_Config+0x9d8>)
 800975c:	68bb      	ldr	r3, [r7, #8]
 800975e:	68db      	ldr	r3, [r3, #12]
 8009760:	3b01      	subs	r3, #1
 8009762:	f003 0301 	and.w	r3, r3, #1
 8009766:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 800976a:	009b      	lsls	r3, r3, #2
 800976c:	440b      	add	r3, r1
 800976e:	605a      	str	r2, [r3, #4]
      else
      {
        /* Nothing to do */
      }

      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8009770:	68bb      	ldr	r3, [r7, #8]
 8009772:	691b      	ldr	r3, [r3, #16]
 8009774:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009778:	2b00      	cmp	r3, #0
 800977a:	d019      	beq.n	80097b0 <HAL_OSPIM_Config+0x960>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 800977c:	4a2a      	ldr	r2, [pc, #168]	; (8009828 <HAL_OSPIM_Config+0x9d8>)
 800977e:	68bb      	ldr	r3, [r7, #8]
 8009780:	691b      	ldr	r3, [r3, #16]
 8009782:	3b01      	subs	r3, #1
 8009784:	f003 0301 	and.w	r3, r3, #1
 8009788:	009b      	lsls	r3, r3, #2
 800978a:	4413      	add	r3, r2
 800978c:	685b      	ldr	r3, [r3, #4]
 800978e:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8009792:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009794:	049b      	lsls	r3, r3, #18
 8009796:	431a      	orrs	r2, r3
 8009798:	4923      	ldr	r1, [pc, #140]	; (8009828 <HAL_OSPIM_Config+0x9d8>)
 800979a:	68bb      	ldr	r3, [r7, #8]
 800979c:	691b      	ldr	r3, [r3, #16]
 800979e:	3b01      	subs	r3, #1
 80097a0:	f003 0301 	and.w	r3, r3, #1
 80097a4:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
 80097a8:	009b      	lsls	r3, r3, #2
 80097aa:	440b      	add	r3, r1
 80097ac:	605a      	str	r2, [r3, #4]
 80097ae:	e01c      	b.n	80097ea <HAL_OSPIM_Config+0x99a>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC_0 | (instance << (OCTOSPIM_PCR_IOLSRC_Pos + 1U))));
      }
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 80097b0:	68bb      	ldr	r3, [r7, #8]
 80097b2:	691b      	ldr	r3, [r3, #16]
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	d018      	beq.n	80097ea <HAL_OSPIM_Config+0x99a>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 80097b8:	4a1b      	ldr	r2, [pc, #108]	; (8009828 <HAL_OSPIM_Config+0x9d8>)
 80097ba:	68bb      	ldr	r3, [r7, #8]
 80097bc:	691b      	ldr	r3, [r3, #16]
 80097be:	3b01      	subs	r3, #1
 80097c0:	f003 0301 	and.w	r3, r3, #1
 80097c4:	009b      	lsls	r3, r3, #2
 80097c6:	4413      	add	r3, r2
 80097c8:	685b      	ldr	r3, [r3, #4]
 80097ca:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80097ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80097d0:	069b      	lsls	r3, r3, #26
 80097d2:	431a      	orrs	r2, r3
 80097d4:	4914      	ldr	r1, [pc, #80]	; (8009828 <HAL_OSPIM_Config+0x9d8>)
 80097d6:	68bb      	ldr	r3, [r7, #8]
 80097d8:	691b      	ldr	r3, [r3, #16]
 80097da:	3b01      	subs	r3, #1
 80097dc:	f003 0301 	and.w	r3, r3, #1
 80097e0:	f042 7240 	orr.w	r2, r2, #50331648	; 0x3000000
 80097e4:	009b      	lsls	r3, r3, #2
 80097e6:	440b      	add	r3, r1
 80097e8:	605a      	str	r2, [r3, #4]
        /* Nothing to do */
      }
    }

    /******* Re-enable both OctoSPI after configure OctoSPI IO Manager ********/
    if ((ospi_enabled & 0x1U) != 0U)
 80097ea:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80097ee:	f003 0301 	and.w	r3, r3, #1
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	d005      	beq.n	8009802 <HAL_OSPIM_Config+0x9b2>
    {
      SET_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 80097f6:	4b0d      	ldr	r3, [pc, #52]	; (800982c <HAL_OSPIM_Config+0x9dc>)
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	4a0c      	ldr	r2, [pc, #48]	; (800982c <HAL_OSPIM_Config+0x9dc>)
 80097fc:	f043 0301 	orr.w	r3, r3, #1
 8009800:	6013      	str	r3, [r2, #0]
    }
    if ((ospi_enabled & 0x2U) != 0U)
 8009802:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8009806:	f003 0302 	and.w	r3, r3, #2
 800980a:	2b00      	cmp	r3, #0
 800980c:	d005      	beq.n	800981a <HAL_OSPIM_Config+0x9ca>
    {
      SET_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 800980e:	4b08      	ldr	r3, [pc, #32]	; (8009830 <HAL_OSPIM_Config+0x9e0>)
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	4a07      	ldr	r2, [pc, #28]	; (8009830 <HAL_OSPIM_Config+0x9e0>)
 8009814:	f043 0301 	orr.w	r3, r3, #1
 8009818:	6013      	str	r3, [r2, #0]
    }
  }

  /* Return function status */
  return status;
 800981a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 800981e:	4618      	mov	r0, r3
 8009820:	3750      	adds	r7, #80	; 0x50
 8009822:	46bd      	mov	sp, r7
 8009824:	bd80      	pop	{r7, pc}
 8009826:	bf00      	nop
 8009828:	420c4000 	.word	0x420c4000
 800982c:	420d1400 	.word	0x420d1400
 8009830:	420d2400 	.word	0x420d2400

08009834 <OSPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart : Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_WaitFlagStateUntilTimeout(OSPI_HandleTypeDef *hospi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8009834:	b580      	push	{r7, lr}
 8009836:	b084      	sub	sp, #16
 8009838:	af00      	add	r7, sp, #0
 800983a:	60f8      	str	r0, [r7, #12]
 800983c:	60b9      	str	r1, [r7, #8]
 800983e:	603b      	str	r3, [r7, #0]
 8009840:	4613      	mov	r3, r2
 8009842:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while ((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 8009844:	e022      	b.n	800988c <OSPI_WaitFlagStateUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009846:	69bb      	ldr	r3, [r7, #24]
 8009848:	f1b3 3fff 	cmp.w	r3, #4294967295
 800984c:	d01e      	beq.n	800988c <OSPI_WaitFlagStateUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800984e:	f7fc f80f 	bl	8005870 <HAL_GetTick>
 8009852:	4602      	mov	r2, r0
 8009854:	683b      	ldr	r3, [r7, #0]
 8009856:	1ad3      	subs	r3, r2, r3
 8009858:	69ba      	ldr	r2, [r7, #24]
 800985a:	429a      	cmp	r2, r3
 800985c:	d302      	bcc.n	8009864 <OSPI_WaitFlagStateUntilTimeout+0x30>
 800985e:	69bb      	ldr	r3, [r7, #24]
 8009860:	2b00      	cmp	r3, #0
 8009862:	d113      	bne.n	800988c <OSPI_WaitFlagStateUntilTimeout+0x58>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hospi->Instance->SR & Flag) != (uint32_t)State)
 8009864:	68fb      	ldr	r3, [r7, #12]
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	6a1a      	ldr	r2, [r3, #32]
 800986a:	68bb      	ldr	r3, [r7, #8]
 800986c:	401a      	ands	r2, r3
 800986e:	79fb      	ldrb	r3, [r7, #7]
 8009870:	429a      	cmp	r2, r3
 8009872:	d00b      	beq.n	800988c <OSPI_WaitFlagStateUntilTimeout+0x58>
        {
          hospi->State     = HAL_OSPI_STATE_ERROR;
 8009874:	68fb      	ldr	r3, [r7, #12]
 8009876:	f44f 7200 	mov.w	r2, #512	; 0x200
 800987a:	651a      	str	r2, [r3, #80]	; 0x50
          hospi->ErrorCode |= HAL_OSPI_ERROR_TIMEOUT;
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009880:	f043 0201 	orr.w	r2, r3, #1
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	655a      	str	r2, [r3, #84]	; 0x54

          return HAL_ERROR;
 8009888:	2301      	movs	r3, #1
 800988a:	e00e      	b.n	80098aa <OSPI_WaitFlagStateUntilTimeout+0x76>
  while ((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 800988c:	68fb      	ldr	r3, [r7, #12]
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	6a1a      	ldr	r2, [r3, #32]
 8009892:	68bb      	ldr	r3, [r7, #8]
 8009894:	4013      	ands	r3, r2
 8009896:	2b00      	cmp	r3, #0
 8009898:	bf14      	ite	ne
 800989a:	2301      	movne	r3, #1
 800989c:	2300      	moveq	r3, #0
 800989e:	b2db      	uxtb	r3, r3
 80098a0:	461a      	mov	r2, r3
 80098a2:	79fb      	ldrb	r3, [r7, #7]
 80098a4:	429a      	cmp	r2, r3
 80098a6:	d1ce      	bne.n	8009846 <OSPI_WaitFlagStateUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80098a8:	2300      	movs	r3, #0
}
 80098aa:	4618      	mov	r0, r3
 80098ac:	3710      	adds	r7, #16
 80098ae:	46bd      	mov	sp, r7
 80098b0:	bd80      	pop	{r7, pc}
	...

080098b4 <OSPI_ConfigCmd>:
  * @param  hospi : OSPI handle
  * @param  cmd   : structure that contains the command configuration information
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_ConfigCmd(OSPI_HandleTypeDef *hospi, OSPI_RegularCmdTypeDef *cmd)
{
 80098b4:	b480      	push	{r7}
 80098b6:	b089      	sub	sp, #36	; 0x24
 80098b8:	af00      	add	r7, sp, #0
 80098ba:	6078      	str	r0, [r7, #4]
 80098bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80098be:	2300      	movs	r3, #0
 80098c0:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *tcr_reg;
  __IO uint32_t *ir_reg;
  __IO uint32_t *abr_reg;

  /* Re-initialize the value of the functional mode */
  MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, 0U);
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	681a      	ldr	r2, [r3, #0]
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80098d0:	601a      	str	r2, [r3, #0]

  /* Configure the flash ID */
  if (hospi->Init.DualQuad == HAL_OSPI_DUALQUAD_DISABLE)
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	689b      	ldr	r3, [r3, #8]
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d10a      	bne.n	80098f0 <OSPI_ConfigCmd+0x3c>
  {
    MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_MSEL, cmd->FlashId);
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 80098e4:	683b      	ldr	r3, [r7, #0]
 80098e6:	685a      	ldr	r2, [r3, #4]
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	430a      	orrs	r2, r1
 80098ee:	601a      	str	r2, [r3, #0]
  }

  if (cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG)
 80098f0:	683b      	ldr	r3, [r7, #0]
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	2b02      	cmp	r3, #2
 80098f6:	d114      	bne.n	8009922 <OSPI_ConfigCmd+0x6e>
  {
    ccr_reg = &(hospi->Instance->WCCR);
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8009900:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hospi->Instance->WTCR);
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 800990a:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hospi->Instance->WIR);
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8009914:	613b      	str	r3, [r7, #16]
    abr_reg = &(hospi->Instance->WABR);
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 800991e:	60fb      	str	r3, [r7, #12]
 8009920:	e02c      	b.n	800997c <OSPI_ConfigCmd+0xc8>
  }
  else if (cmd->OperationType == HAL_OSPI_OPTYPE_WRAP_CFG)
 8009922:	683b      	ldr	r3, [r7, #0]
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	2b03      	cmp	r3, #3
 8009928:	d114      	bne.n	8009954 <OSPI_ConfigCmd+0xa0>
  {
    ccr_reg = &(hospi->Instance->WPCCR);
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8009932:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hospi->Instance->WPTCR);
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 800993c:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hospi->Instance->WPIR);
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009946:	613b      	str	r3, [r7, #16]
    abr_reg = &(hospi->Instance->WPABR);
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8009950:	60fb      	str	r3, [r7, #12]
 8009952:	e013      	b.n	800997c <OSPI_ConfigCmd+0xc8>
  }
  else
  {
    ccr_reg = &(hospi->Instance->CCR);
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800995c:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hospi->Instance->TCR);
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8009966:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hospi->Instance->IR);
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8009970:	613b      	str	r3, [r7, #16]
    abr_reg = &(hospi->Instance->ABR);
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	f503 7390 	add.w	r3, r3, #288	; 0x120
 800997a:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CCR register with DQS and SIOO modes */
  *ccr_reg = (cmd->DQSMode | cmd->SIOOMode);
 800997c:	683b      	ldr	r3, [r7, #0]
 800997e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009980:	683b      	ldr	r3, [r7, #0]
 8009982:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009984:	431a      	orrs	r2, r3
 8009986:	69bb      	ldr	r3, [r7, #24]
 8009988:	601a      	str	r2, [r3, #0]

  if (cmd->AlternateBytesMode != HAL_OSPI_ALTERNATE_BYTES_NONE)
 800998a:	683b      	ldr	r3, [r7, #0]
 800998c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800998e:	2b00      	cmp	r3, #0
 8009990:	d012      	beq.n	80099b8 <OSPI_ConfigCmd+0x104>
  {
    /* Configure the ABR register with alternate bytes value */
    *abr_reg = cmd->AlternateBytes;
 8009992:	683b      	ldr	r3, [r7, #0]
 8009994:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009996:	68fb      	ldr	r3, [r7, #12]
 8009998:	601a      	str	r2, [r3, #0]

    /* Configure the CCR register with alternate bytes communication parameters */
    MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ABMODE | OCTOSPI_CCR_ABDTR | OCTOSPI_CCR_ABSIZE),
 800999a:	69bb      	ldr	r3, [r7, #24]
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80099a2:	683b      	ldr	r3, [r7, #0]
 80099a4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80099a6:	683b      	ldr	r3, [r7, #0]
 80099a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80099aa:	4319      	orrs	r1, r3
 80099ac:	683b      	ldr	r3, [r7, #0]
 80099ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80099b0:	430b      	orrs	r3, r1
 80099b2:	431a      	orrs	r2, r3
 80099b4:	69bb      	ldr	r3, [r7, #24]
 80099b6:	601a      	str	r2, [r3, #0]
               (cmd->AlternateBytesMode | cmd->AlternateBytesDtrMode | cmd->AlternateBytesSize));
  }

  /* Configure the TCR register with the number of dummy cycles */
  MODIFY_REG((*tcr_reg), OCTOSPI_TCR_DCYC, cmd->DummyCycles);
 80099b8:	697b      	ldr	r3, [r7, #20]
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	f023 021f 	bic.w	r2, r3, #31
 80099c0:	683b      	ldr	r3, [r7, #0]
 80099c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80099c4:	431a      	orrs	r2, r3
 80099c6:	697b      	ldr	r3, [r7, #20]
 80099c8:	601a      	str	r2, [r3, #0]

  if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 80099ca:	683b      	ldr	r3, [r7, #0]
 80099cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	d009      	beq.n	80099e6 <OSPI_ConfigCmd+0x132>
  {
    if (cmd->OperationType == HAL_OSPI_OPTYPE_COMMON_CFG)
 80099d2:	683b      	ldr	r3, [r7, #0]
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	d105      	bne.n	80099e6 <OSPI_ConfigCmd+0x132>
    {
      /* Configure the DLR register with the number of data */
      hospi->Instance->DLR = (cmd->NbData - 1U);
 80099da:	683b      	ldr	r3, [r7, #0]
 80099dc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	3a01      	subs	r2, #1
 80099e4:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (cmd->InstructionMode != HAL_OSPI_INSTRUCTION_NONE)
 80099e6:	683b      	ldr	r3, [r7, #0]
 80099e8:	68db      	ldr	r3, [r3, #12]
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	f000 8099 	beq.w	8009b22 <OSPI_ConfigCmd+0x26e>
  {
    if (cmd->AddressMode != HAL_OSPI_ADDRESS_NONE)
 80099f0:	683b      	ldr	r3, [r7, #0]
 80099f2:	69db      	ldr	r3, [r3, #28]
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	d055      	beq.n	8009aa4 <OSPI_ConfigCmd+0x1f0>
    {
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 80099f8:	683b      	ldr	r3, [r7, #0]
 80099fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	d01e      	beq.n	8009a3e <OSPI_ConfigCmd+0x18a>
      {
        /* ---- Command with instruction, address and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE  | OCTOSPI_CCR_IDTR  | OCTOSPI_CCR_ISIZE  |
 8009a00:	69bb      	ldr	r3, [r7, #24]
 8009a02:	681a      	ldr	r2, [r3, #0]
 8009a04:	4b67      	ldr	r3, [pc, #412]	; (8009ba4 <OSPI_ConfigCmd+0x2f0>)
 8009a06:	4013      	ands	r3, r2
 8009a08:	683a      	ldr	r2, [r7, #0]
 8009a0a:	68d1      	ldr	r1, [r2, #12]
 8009a0c:	683a      	ldr	r2, [r7, #0]
 8009a0e:	6952      	ldr	r2, [r2, #20]
 8009a10:	4311      	orrs	r1, r2
 8009a12:	683a      	ldr	r2, [r7, #0]
 8009a14:	6912      	ldr	r2, [r2, #16]
 8009a16:	4311      	orrs	r1, r2
 8009a18:	683a      	ldr	r2, [r7, #0]
 8009a1a:	69d2      	ldr	r2, [r2, #28]
 8009a1c:	4311      	orrs	r1, r2
 8009a1e:	683a      	ldr	r2, [r7, #0]
 8009a20:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8009a22:	4311      	orrs	r1, r2
 8009a24:	683a      	ldr	r2, [r7, #0]
 8009a26:	6a12      	ldr	r2, [r2, #32]
 8009a28:	4311      	orrs	r1, r2
 8009a2a:	683a      	ldr	r2, [r7, #0]
 8009a2c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8009a2e:	4311      	orrs	r1, r2
 8009a30:	683a      	ldr	r2, [r7, #0]
 8009a32:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8009a34:	430a      	orrs	r2, r1
 8009a36:	431a      	orrs	r2, r3
 8009a38:	69bb      	ldr	r3, [r7, #24]
 8009a3a:	601a      	str	r2, [r3, #0]
 8009a3c:	e028      	b.n	8009a90 <OSPI_ConfigCmd+0x1dc>
      else
      {
        /* ---- Command with instruction and address ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE  | OCTOSPI_CCR_IDTR  | OCTOSPI_CCR_ISIZE  |
 8009a3e:	69bb      	ldr	r3, [r7, #24]
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8009a46:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8009a4a:	683a      	ldr	r2, [r7, #0]
 8009a4c:	68d1      	ldr	r1, [r2, #12]
 8009a4e:	683a      	ldr	r2, [r7, #0]
 8009a50:	6952      	ldr	r2, [r2, #20]
 8009a52:	4311      	orrs	r1, r2
 8009a54:	683a      	ldr	r2, [r7, #0]
 8009a56:	6912      	ldr	r2, [r2, #16]
 8009a58:	4311      	orrs	r1, r2
 8009a5a:	683a      	ldr	r2, [r7, #0]
 8009a5c:	69d2      	ldr	r2, [r2, #28]
 8009a5e:	4311      	orrs	r1, r2
 8009a60:	683a      	ldr	r2, [r7, #0]
 8009a62:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8009a64:	4311      	orrs	r1, r2
 8009a66:	683a      	ldr	r2, [r7, #0]
 8009a68:	6a12      	ldr	r2, [r2, #32]
 8009a6a:	430a      	orrs	r2, r1
 8009a6c:	431a      	orrs	r2, r3
 8009a6e:	69bb      	ldr	r3, [r7, #24]
 8009a70:	601a      	str	r2, [r3, #0]
                                OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE),
                   (cmd->InstructionMode | cmd->InstructionDtrMode | cmd->InstructionSize |
                    cmd->AddressMode     | cmd->AddressDtrMode     | cmd->AddressSize));

        /* The DHQC bit is linked with DDTR bit which should be activated */
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a76:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009a7a:	d109      	bne.n	8009a90 <OSPI_ConfigCmd+0x1dc>
            (cmd->InstructionDtrMode == HAL_OSPI_INSTRUCTION_DTR_ENABLE))
 8009a7c:	683b      	ldr	r3, [r7, #0]
 8009a7e:	695b      	ldr	r3, [r3, #20]
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 8009a80:	2b08      	cmp	r3, #8
 8009a82:	d105      	bne.n	8009a90 <OSPI_ConfigCmd+0x1dc>
        {
          MODIFY_REG((*ccr_reg), OCTOSPI_CCR_DDTR, HAL_OSPI_DATA_DTR_ENABLE);
 8009a84:	69bb      	ldr	r3, [r7, #24]
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8009a8c:	69bb      	ldr	r3, [r7, #24]
 8009a8e:	601a      	str	r2, [r3, #0]
        }
      }

      /* Configure the IR register with the instruction value */
      *ir_reg = cmd->Instruction;
 8009a90:	683b      	ldr	r3, [r7, #0]
 8009a92:	689a      	ldr	r2, [r3, #8]
 8009a94:	693b      	ldr	r3, [r7, #16]
 8009a96:	601a      	str	r2, [r3, #0]

      /* Configure the AR register with the address value */
      hospi->Instance->AR = cmd->Address;
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	683a      	ldr	r2, [r7, #0]
 8009a9e:	6992      	ldr	r2, [r2, #24]
 8009aa0:	649a      	str	r2, [r3, #72]	; 0x48
 8009aa2:	e078      	b.n	8009b96 <OSPI_ConfigCmd+0x2e2>
    }
    else
    {
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 8009aa4:	683b      	ldr	r3, [r7, #0]
 8009aa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	d017      	beq.n	8009adc <OSPI_ConfigCmd+0x228>
      {
        /* ---- Command with instruction and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE | OCTOSPI_CCR_IDTR | OCTOSPI_CCR_ISIZE |
 8009aac:	69bb      	ldr	r3, [r7, #24]
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8009ab4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8009ab8:	683a      	ldr	r2, [r7, #0]
 8009aba:	68d1      	ldr	r1, [r2, #12]
 8009abc:	683a      	ldr	r2, [r7, #0]
 8009abe:	6952      	ldr	r2, [r2, #20]
 8009ac0:	4311      	orrs	r1, r2
 8009ac2:	683a      	ldr	r2, [r7, #0]
 8009ac4:	6912      	ldr	r2, [r2, #16]
 8009ac6:	4311      	orrs	r1, r2
 8009ac8:	683a      	ldr	r2, [r7, #0]
 8009aca:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8009acc:	4311      	orrs	r1, r2
 8009ace:	683a      	ldr	r2, [r7, #0]
 8009ad0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8009ad2:	430a      	orrs	r2, r1
 8009ad4:	431a      	orrs	r2, r3
 8009ad6:	69bb      	ldr	r3, [r7, #24]
 8009ad8:	601a      	str	r2, [r3, #0]
 8009ada:	e01d      	b.n	8009b18 <OSPI_ConfigCmd+0x264>
      else
      {
        /* ---- Command with only instruction ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE | OCTOSPI_CCR_IDTR | OCTOSPI_CCR_ISIZE),
 8009adc:	69bb      	ldr	r3, [r7, #24]
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8009ae4:	683b      	ldr	r3, [r7, #0]
 8009ae6:	68d9      	ldr	r1, [r3, #12]
 8009ae8:	683b      	ldr	r3, [r7, #0]
 8009aea:	695b      	ldr	r3, [r3, #20]
 8009aec:	4319      	orrs	r1, r3
 8009aee:	683b      	ldr	r3, [r7, #0]
 8009af0:	691b      	ldr	r3, [r3, #16]
 8009af2:	430b      	orrs	r3, r1
 8009af4:	431a      	orrs	r2, r3
 8009af6:	69bb      	ldr	r3, [r7, #24]
 8009af8:	601a      	str	r2, [r3, #0]
                   (cmd->InstructionMode | cmd->InstructionDtrMode | cmd->InstructionSize));

        /* The DHQC bit is linked with DDTR bit which should be activated */
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009afe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009b02:	d109      	bne.n	8009b18 <OSPI_ConfigCmd+0x264>
            (cmd->InstructionDtrMode == HAL_OSPI_INSTRUCTION_DTR_ENABLE))
 8009b04:	683b      	ldr	r3, [r7, #0]
 8009b06:	695b      	ldr	r3, [r3, #20]
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 8009b08:	2b08      	cmp	r3, #8
 8009b0a:	d105      	bne.n	8009b18 <OSPI_ConfigCmd+0x264>
        {
          MODIFY_REG((*ccr_reg), OCTOSPI_CCR_DDTR, HAL_OSPI_DATA_DTR_ENABLE);
 8009b0c:	69bb      	ldr	r3, [r7, #24]
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8009b14:	69bb      	ldr	r3, [r7, #24]
 8009b16:	601a      	str	r2, [r3, #0]
        }
      }

      /* Configure the IR register with the instruction value */
      *ir_reg = cmd->Instruction;
 8009b18:	683b      	ldr	r3, [r7, #0]
 8009b1a:	689a      	ldr	r2, [r3, #8]
 8009b1c:	693b      	ldr	r3, [r7, #16]
 8009b1e:	601a      	str	r2, [r3, #0]
 8009b20:	e039      	b.n	8009b96 <OSPI_ConfigCmd+0x2e2>

    }
  }
  else
  {
    if (cmd->AddressMode != HAL_OSPI_ADDRESS_NONE)
 8009b22:	683b      	ldr	r3, [r7, #0]
 8009b24:	69db      	ldr	r3, [r3, #28]
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	d030      	beq.n	8009b8c <OSPI_ConfigCmd+0x2d8>
    {
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 8009b2a:	683b      	ldr	r3, [r7, #0]
 8009b2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	d017      	beq.n	8009b62 <OSPI_ConfigCmd+0x2ae>
      {
        /* ---- Command with address and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE |
 8009b32:	69bb      	ldr	r3, [r7, #24]
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8009b3a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8009b3e:	683a      	ldr	r2, [r7, #0]
 8009b40:	69d1      	ldr	r1, [r2, #28]
 8009b42:	683a      	ldr	r2, [r7, #0]
 8009b44:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8009b46:	4311      	orrs	r1, r2
 8009b48:	683a      	ldr	r2, [r7, #0]
 8009b4a:	6a12      	ldr	r2, [r2, #32]
 8009b4c:	4311      	orrs	r1, r2
 8009b4e:	683a      	ldr	r2, [r7, #0]
 8009b50:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8009b52:	4311      	orrs	r1, r2
 8009b54:	683a      	ldr	r2, [r7, #0]
 8009b56:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8009b58:	430a      	orrs	r2, r1
 8009b5a:	431a      	orrs	r2, r3
 8009b5c:	69bb      	ldr	r3, [r7, #24]
 8009b5e:	601a      	str	r2, [r3, #0]
 8009b60:	e00e      	b.n	8009b80 <OSPI_ConfigCmd+0x2cc>
      else
      {
        /* ---- Command with only address ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE),
 8009b62:	69bb      	ldr	r3, [r7, #24]
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8009b6a:	683b      	ldr	r3, [r7, #0]
 8009b6c:	69d9      	ldr	r1, [r3, #28]
 8009b6e:	683b      	ldr	r3, [r7, #0]
 8009b70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b72:	4319      	orrs	r1, r3
 8009b74:	683b      	ldr	r3, [r7, #0]
 8009b76:	6a1b      	ldr	r3, [r3, #32]
 8009b78:	430b      	orrs	r3, r1
 8009b7a:	431a      	orrs	r2, r3
 8009b7c:	69bb      	ldr	r3, [r7, #24]
 8009b7e:	601a      	str	r2, [r3, #0]
                   (cmd->AddressMode | cmd->AddressDtrMode | cmd->AddressSize));
      }

      /* Configure the AR register with the instruction value */
      hospi->Instance->AR = cmd->Address;
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	683a      	ldr	r2, [r7, #0]
 8009b86:	6992      	ldr	r2, [r2, #24]
 8009b88:	649a      	str	r2, [r3, #72]	; 0x48
 8009b8a:	e004      	b.n	8009b96 <OSPI_ConfigCmd+0x2e2>
    }
    else
    {
      /* ---- Invalid command configuration (no instruction, no address) ---- */
      status = HAL_ERROR;
 8009b8c:	2301      	movs	r3, #1
 8009b8e:	77fb      	strb	r3, [r7, #31]
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	2208      	movs	r2, #8
 8009b94:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }

  /* Return function status */
  return status;
 8009b96:	7ffb      	ldrb	r3, [r7, #31]
}
 8009b98:	4618      	mov	r0, r3
 8009b9a:	3724      	adds	r7, #36	; 0x24
 8009b9c:	46bd      	mov	sp, r7
 8009b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ba2:	4770      	bx	lr
 8009ba4:	f0ffc0c0 	.word	0xf0ffc0c0

08009ba8 <OSPIM_GetConfig>:
  * @param  instance_nb : number of the instance
  * @param  cfg         : configuration of the IO Manager for the instance
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPIM_GetConfig(uint8_t instance_nb, OSPIM_CfgTypeDef *cfg)
{
 8009ba8:	b480      	push	{r7}
 8009baa:	b087      	sub	sp, #28
 8009bac:	af00      	add	r7, sp, #0
 8009bae:	4603      	mov	r3, r0
 8009bb0:	6039      	str	r1, [r7, #0]
 8009bb2:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 8009bb4:	2300      	movs	r3, #0
 8009bb6:	75fb      	strb	r3, [r7, #23]
  uint32_t reg;
  uint32_t value = 0U;
 8009bb8:	2300      	movs	r3, #0
 8009bba:	613b      	str	r3, [r7, #16]
  uint32_t index;

  if ((instance_nb == 0U) || (instance_nb > OSPI_NB_INSTANCE) || (cfg == NULL))
 8009bbc:	79fb      	ldrb	r3, [r7, #7]
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	d005      	beq.n	8009bce <OSPIM_GetConfig+0x26>
 8009bc2:	79fb      	ldrb	r3, [r7, #7]
 8009bc4:	2b02      	cmp	r3, #2
 8009bc6:	d802      	bhi.n	8009bce <OSPIM_GetConfig+0x26>
 8009bc8:	683b      	ldr	r3, [r7, #0]
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	d102      	bne.n	8009bd4 <OSPIM_GetConfig+0x2c>
  {
    /* Invalid parameter -> error returned */
    status = HAL_ERROR;
 8009bce:	2301      	movs	r3, #1
 8009bd0:	75fb      	strb	r3, [r7, #23]
 8009bd2:	e098      	b.n	8009d06 <OSPIM_GetConfig+0x15e>
  }
  else
  {
    /* Initialize the structure */
    cfg->ClkPort    = 0U;
 8009bd4:	683b      	ldr	r3, [r7, #0]
 8009bd6:	2200      	movs	r2, #0
 8009bd8:	601a      	str	r2, [r3, #0]
    cfg->DQSPort    = 0U;
 8009bda:	683b      	ldr	r3, [r7, #0]
 8009bdc:	2200      	movs	r2, #0
 8009bde:	605a      	str	r2, [r3, #4]
    cfg->NCSPort    = 0U;
 8009be0:	683b      	ldr	r3, [r7, #0]
 8009be2:	2200      	movs	r2, #0
 8009be4:	609a      	str	r2, [r3, #8]
    cfg->IOLowPort  = 0U;
 8009be6:	683b      	ldr	r3, [r7, #0]
 8009be8:	2200      	movs	r2, #0
 8009bea:	60da      	str	r2, [r3, #12]
    cfg->IOHighPort = 0U;
 8009bec:	683b      	ldr	r3, [r7, #0]
 8009bee:	2200      	movs	r2, #0
 8009bf0:	611a      	str	r2, [r3, #16]

    if (instance_nb == 2U)
 8009bf2:	79fb      	ldrb	r3, [r7, #7]
 8009bf4:	2b02      	cmp	r3, #2
 8009bf6:	d10b      	bne.n	8009c10 <OSPIM_GetConfig+0x68>
    {
      if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) == 0U)
 8009bf8:	4b46      	ldr	r3, [pc, #280]	; (8009d14 <OSPIM_GetConfig+0x16c>)
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	f003 0301 	and.w	r3, r3, #1
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	d102      	bne.n	8009c0a <OSPIM_GetConfig+0x62>
      {
        value = (OCTOSPIM_PCR_CLKSRC | OCTOSPIM_PCR_DQSSRC | OCTOSPIM_PCR_NCSSRC
 8009c04:	4b44      	ldr	r3, [pc, #272]	; (8009d18 <OSPIM_GetConfig+0x170>)
 8009c06:	613b      	str	r3, [r7, #16]
 8009c08:	e002      	b.n	8009c10 <OSPIM_GetConfig+0x68>
                 | OCTOSPIM_PCR_IOLSRC_1 | OCTOSPIM_PCR_IOHSRC_1);
      }
      else
      {
        value = OCTOSPIM_PCR_NCSSRC;
 8009c0a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009c0e:	613b      	str	r3, [r7, #16]
      }
    }

    /* Get the information about the instance */
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 8009c10:	2300      	movs	r3, #0
 8009c12:	60fb      	str	r3, [r7, #12]
 8009c14:	e074      	b.n	8009d00 <OSPIM_GetConfig+0x158>
    {
      reg = OCTOSPIM->PCR[index];
 8009c16:	4a3f      	ldr	r2, [pc, #252]	; (8009d14 <OSPIM_GetConfig+0x16c>)
 8009c18:	68fb      	ldr	r3, [r7, #12]
 8009c1a:	009b      	lsls	r3, r3, #2
 8009c1c:	4413      	add	r3, r2
 8009c1e:	685b      	ldr	r3, [r3, #4]
 8009c20:	60bb      	str	r3, [r7, #8]

      if ((reg & OCTOSPIM_PCR_CLKEN) != 0U)
 8009c22:	68bb      	ldr	r3, [r7, #8]
 8009c24:	f003 0301 	and.w	r3, r3, #1
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	d00a      	beq.n	8009c42 <OSPIM_GetConfig+0x9a>
      {
        /* The clock is enabled on this port */
        if ((reg & OCTOSPIM_PCR_CLKSRC) == (value & OCTOSPIM_PCR_CLKSRC))
 8009c2c:	68ba      	ldr	r2, [r7, #8]
 8009c2e:	693b      	ldr	r3, [r7, #16]
 8009c30:	4053      	eors	r3, r2
 8009c32:	f003 0302 	and.w	r3, r3, #2
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	d103      	bne.n	8009c42 <OSPIM_GetConfig+0x9a>
        {
          /* The clock correspond to the instance passed as parameter */
          cfg->ClkPort = index + 1U;
 8009c3a:	68fb      	ldr	r3, [r7, #12]
 8009c3c:	1c5a      	adds	r2, r3, #1
 8009c3e:	683b      	ldr	r3, [r7, #0]
 8009c40:	601a      	str	r2, [r3, #0]
        }
      }

      if ((reg & OCTOSPIM_PCR_DQSEN) != 0U)
 8009c42:	68bb      	ldr	r3, [r7, #8]
 8009c44:	f003 0310 	and.w	r3, r3, #16
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	d00a      	beq.n	8009c62 <OSPIM_GetConfig+0xba>
      {
        /* The DQS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_DQSSRC) == (value & OCTOSPIM_PCR_DQSSRC))
 8009c4c:	68ba      	ldr	r2, [r7, #8]
 8009c4e:	693b      	ldr	r3, [r7, #16]
 8009c50:	4053      	eors	r3, r2
 8009c52:	f003 0320 	and.w	r3, r3, #32
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	d103      	bne.n	8009c62 <OSPIM_GetConfig+0xba>
        {
          /* The DQS correspond to the instance passed as parameter */
          cfg->DQSPort = index + 1U;
 8009c5a:	68fb      	ldr	r3, [r7, #12]
 8009c5c:	1c5a      	adds	r2, r3, #1
 8009c5e:	683b      	ldr	r3, [r7, #0]
 8009c60:	605a      	str	r2, [r3, #4]
        }
      }

      if ((reg & OCTOSPIM_PCR_NCSEN) != 0U)
 8009c62:	68bb      	ldr	r3, [r7, #8]
 8009c64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	d00a      	beq.n	8009c82 <OSPIM_GetConfig+0xda>
      {
        /* The nCS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_NCSSRC) == (value & OCTOSPIM_PCR_NCSSRC))
 8009c6c:	68ba      	ldr	r2, [r7, #8]
 8009c6e:	693b      	ldr	r3, [r7, #16]
 8009c70:	4053      	eors	r3, r2
 8009c72:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	d103      	bne.n	8009c82 <OSPIM_GetConfig+0xda>
        {
          /* The nCS correspond to the instance passed as parameter */
          cfg->NCSPort = index + 1U;
 8009c7a:	68fb      	ldr	r3, [r7, #12]
 8009c7c:	1c5a      	adds	r2, r3, #1
 8009c7e:	683b      	ldr	r3, [r7, #0]
 8009c80:	609a      	str	r2, [r3, #8]
        }
      }

      if ((reg & OCTOSPIM_PCR_IOLEN) != 0U)
 8009c82:	68bb      	ldr	r3, [r7, #8]
 8009c84:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	d018      	beq.n	8009cbe <OSPIM_GetConfig+0x116>
      {
        /* The IO Low is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOLSRC_1) == (value & OCTOSPIM_PCR_IOLSRC_1))
 8009c8c:	68ba      	ldr	r2, [r7, #8]
 8009c8e:	693b      	ldr	r3, [r7, #16]
 8009c90:	4053      	eors	r3, r2
 8009c92:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	d111      	bne.n	8009cbe <OSPIM_GetConfig+0x116>
        {
          /* The IO Low correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOLSRC_0) == 0U)
 8009c9a:	68bb      	ldr	r3, [r7, #8]
 8009c9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	d106      	bne.n	8009cb2 <OSPIM_GetConfig+0x10a>
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOLEN | (index + 1U));
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	3301      	adds	r3, #1
 8009ca8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8009cac:	683b      	ldr	r3, [r7, #0]
 8009cae:	60da      	str	r2, [r3, #12]
 8009cb0:	e005      	b.n	8009cbe <OSPIM_GetConfig+0x116>
          }
          else
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOHEN | (index + 1U));
 8009cb2:	68fb      	ldr	r3, [r7, #12]
 8009cb4:	3301      	adds	r3, #1
 8009cb6:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8009cba:	683b      	ldr	r3, [r7, #0]
 8009cbc:	60da      	str	r2, [r3, #12]
          }
        }
      }

      if ((reg & OCTOSPIM_PCR_IOHEN) != 0U)
 8009cbe:	68bb      	ldr	r3, [r7, #8]
 8009cc0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009cc4:	2b00      	cmp	r3, #0
 8009cc6:	d018      	beq.n	8009cfa <OSPIM_GetConfig+0x152>
      {
        /* The IO High is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOHSRC_1) == (value & OCTOSPIM_PCR_IOHSRC_1))
 8009cc8:	68ba      	ldr	r2, [r7, #8]
 8009cca:	693b      	ldr	r3, [r7, #16]
 8009ccc:	4053      	eors	r3, r2
 8009cce:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009cd2:	2b00      	cmp	r3, #0
 8009cd4:	d111      	bne.n	8009cfa <OSPIM_GetConfig+0x152>
        {
          /* The IO High correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOHSRC_0) == 0U)
 8009cd6:	68bb      	ldr	r3, [r7, #8]
 8009cd8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	d106      	bne.n	8009cee <OSPIM_GetConfig+0x146>
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOLEN | (index + 1U));
 8009ce0:	68fb      	ldr	r3, [r7, #12]
 8009ce2:	3301      	adds	r3, #1
 8009ce4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8009ce8:	683b      	ldr	r3, [r7, #0]
 8009cea:	611a      	str	r2, [r3, #16]
 8009cec:	e005      	b.n	8009cfa <OSPIM_GetConfig+0x152>
          }
          else
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOHEN | (index + 1U));
 8009cee:	68fb      	ldr	r3, [r7, #12]
 8009cf0:	3301      	adds	r3, #1
 8009cf2:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8009cf6:	683b      	ldr	r3, [r7, #0]
 8009cf8:	611a      	str	r2, [r3, #16]
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	3301      	adds	r3, #1
 8009cfe:	60fb      	str	r3, [r7, #12]
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	2b01      	cmp	r3, #1
 8009d04:	d987      	bls.n	8009c16 <OSPIM_GetConfig+0x6e>
      }
    }
  }

  /* Return function status */
  return status;
 8009d06:	7dfb      	ldrb	r3, [r7, #23]
}
 8009d08:	4618      	mov	r0, r3
 8009d0a:	371c      	adds	r7, #28
 8009d0c:	46bd      	mov	sp, r7
 8009d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d12:	4770      	bx	lr
 8009d14:	420c4000 	.word	0x420c4000
 8009d18:	04040222 	.word	0x04040222

08009d1c <HAL_OSPI_DLYB_SetConfig>:
  * @param  hospi   : OSPI handle.
  * @param  pdlyb_cfg: Pointer to DLYB configuration structure.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_OSPI_DLYB_SetConfig(OSPI_HandleTypeDef *hospi, HAL_OSPI_DLYB_CfgTypeDef  *pdlyb_cfg)
{
 8009d1c:	b580      	push	{r7, lr}
 8009d1e:	b084      	sub	sp, #16
 8009d20:	af00      	add	r7, sp, #0
 8009d22:	6078      	str	r0, [r7, #4]
 8009d24:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8009d26:	2301      	movs	r3, #1
 8009d28:	73fb      	strb	r3, [r7, #15]

  /* Enable OCTOSPI Free Running Clock (mandatory) */
  SET_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	689a      	ldr	r2, [r3, #8]
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	f042 0202 	orr.w	r2, r2, #2
 8009d38:	609a      	str	r2, [r3, #8]

  /* Update OCTOSPI state */
  hospi->State = HAL_OSPI_STATE_BUSY_CMD;
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	2208      	movs	r2, #8
 8009d3e:	651a      	str	r2, [r3, #80]	; 0x50

  if (hospi->Instance == OCTOSPI1)
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	4a15      	ldr	r2, [pc, #84]	; (8009d9c <HAL_OSPI_DLYB_SetConfig+0x80>)
 8009d46:	4293      	cmp	r3, r2
 8009d48:	d109      	bne.n	8009d5e <HAL_OSPI_DLYB_SetConfig+0x42>
  {
    /* Enable the DelayBlock */
    LL_DLYB_Enable(DLYB_OCTOSPI1);
 8009d4a:	4815      	ldr	r0, [pc, #84]	; (8009da0 <HAL_OSPI_DLYB_SetConfig+0x84>)
 8009d4c:	f7fe fe46 	bl	80089dc <LL_DLYB_Enable>

    /* Set the Delay Block configuration */
    LL_DLYB_SetDelay(DLYB_OCTOSPI1, pdlyb_cfg);
 8009d50:	6839      	ldr	r1, [r7, #0]
 8009d52:	4813      	ldr	r0, [pc, #76]	; (8009da0 <HAL_OSPI_DLYB_SetConfig+0x84>)
 8009d54:	f002 ff32 	bl	800cbbc <LL_DLYB_SetDelay>
    status = HAL_OK;
 8009d58:	2300      	movs	r3, #0
 8009d5a:	73fb      	strb	r3, [r7, #15]
 8009d5c:	e00d      	b.n	8009d7a <HAL_OSPI_DLYB_SetConfig+0x5e>
  }

  else if (hospi->Instance == OCTOSPI2)
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	4a10      	ldr	r2, [pc, #64]	; (8009da4 <HAL_OSPI_DLYB_SetConfig+0x88>)
 8009d64:	4293      	cmp	r3, r2
 8009d66:	d108      	bne.n	8009d7a <HAL_OSPI_DLYB_SetConfig+0x5e>
  {
    /* Enable the DelayBlock */
    LL_DLYB_Enable(DLYB_OCTOSPI2);
 8009d68:	480f      	ldr	r0, [pc, #60]	; (8009da8 <HAL_OSPI_DLYB_SetConfig+0x8c>)
 8009d6a:	f7fe fe37 	bl	80089dc <LL_DLYB_Enable>

    /* Set the Delay Block configuration */
    LL_DLYB_SetDelay(DLYB_OCTOSPI2, pdlyb_cfg);
 8009d6e:	6839      	ldr	r1, [r7, #0]
 8009d70:	480d      	ldr	r0, [pc, #52]	; (8009da8 <HAL_OSPI_DLYB_SetConfig+0x8c>)
 8009d72:	f002 ff23 	bl	800cbbc <LL_DLYB_SetDelay>
    status = HAL_OK;
 8009d76:	2300      	movs	r3, #0
 8009d78:	73fb      	strb	r3, [r7, #15]
  {
    /* Nothing to do */
  }

  /* Abort the current OCTOSPI operation if exist */
  (void)HAL_OSPI_Abort(hospi);
 8009d7a:	6878      	ldr	r0, [r7, #4]
 8009d7c:	f7fe ffe4 	bl	8008d48 <HAL_OSPI_Abort>

  /* Disable Free Running Clock */
  CLEAR_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	689a      	ldr	r2, [r3, #8]
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	f022 0202 	bic.w	r2, r2, #2
 8009d8e:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return status;
 8009d90:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d92:	4618      	mov	r0, r3
 8009d94:	3710      	adds	r7, #16
 8009d96:	46bd      	mov	sp, r7
 8009d98:	bd80      	pop	{r7, pc}
 8009d9a:	bf00      	nop
 8009d9c:	420d1400 	.word	0x420d1400
 8009da0:	420cf000 	.word	0x420cf000
 8009da4:	420d2400 	.word	0x420d2400
 8009da8:	420cf400 	.word	0x420cf400

08009dac <HAL_OSPI_DLYB_GetConfig>:
  * @param  hospi   : OSPI handle.
  * @param  pdlyb_cfg: Pointer to DLYB configuration structure.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_OSPI_DLYB_GetConfig(OSPI_HandleTypeDef *hospi, HAL_OSPI_DLYB_CfgTypeDef  *pdlyb_cfg)
{
 8009dac:	b580      	push	{r7, lr}
 8009dae:	b084      	sub	sp, #16
 8009db0:	af00      	add	r7, sp, #0
 8009db2:	6078      	str	r0, [r7, #4]
 8009db4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8009db6:	2301      	movs	r3, #1
 8009db8:	73fb      	strb	r3, [r7, #15]

  if (hospi->Instance == OCTOSPI1)
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	4a0d      	ldr	r2, [pc, #52]	; (8009df4 <HAL_OSPI_DLYB_GetConfig+0x48>)
 8009dc0:	4293      	cmp	r3, r2
 8009dc2:	d106      	bne.n	8009dd2 <HAL_OSPI_DLYB_GetConfig+0x26>
  {
    LL_DLYB_GetDelay(DLYB_OCTOSPI1, pdlyb_cfg);
 8009dc4:	6839      	ldr	r1, [r7, #0]
 8009dc6:	480c      	ldr	r0, [pc, #48]	; (8009df8 <HAL_OSPI_DLYB_GetConfig+0x4c>)
 8009dc8:	f002 ff17 	bl	800cbfa <LL_DLYB_GetDelay>
    status = HAL_OK;
 8009dcc:	2300      	movs	r3, #0
 8009dce:	73fb      	strb	r3, [r7, #15]
 8009dd0:	e00a      	b.n	8009de8 <HAL_OSPI_DLYB_GetConfig+0x3c>
  }
  else if (hospi->Instance == OCTOSPI2)
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	4a09      	ldr	r2, [pc, #36]	; (8009dfc <HAL_OSPI_DLYB_GetConfig+0x50>)
 8009dd8:	4293      	cmp	r3, r2
 8009dda:	d105      	bne.n	8009de8 <HAL_OSPI_DLYB_GetConfig+0x3c>
  {
    LL_DLYB_GetDelay(DLYB_OCTOSPI2, pdlyb_cfg);
 8009ddc:	6839      	ldr	r1, [r7, #0]
 8009dde:	4808      	ldr	r0, [pc, #32]	; (8009e00 <HAL_OSPI_DLYB_GetConfig+0x54>)
 8009de0:	f002 ff0b 	bl	800cbfa <LL_DLYB_GetDelay>
    status = HAL_OK;
 8009de4:	2300      	movs	r3, #0
 8009de6:	73fb      	strb	r3, [r7, #15]
  {
    /* Nothing to do */
  }

  /* Return function status */
  return status;
 8009de8:	7bfb      	ldrb	r3, [r7, #15]
}
 8009dea:	4618      	mov	r0, r3
 8009dec:	3710      	adds	r7, #16
 8009dee:	46bd      	mov	sp, r7
 8009df0:	bd80      	pop	{r7, pc}
 8009df2:	bf00      	nop
 8009df4:	420d1400 	.word	0x420d1400
 8009df8:	420cf000 	.word	0x420cf000
 8009dfc:	420d2400 	.word	0x420d2400
 8009e00:	420cf400 	.word	0x420cf400

08009e04 <HAL_OSPI_DLYB_GetClockPeriod>:
  * @brief  Get the Delay line length value.
  * @param  hospi   : OSPI handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_OSPI_DLYB_GetClockPeriod(OSPI_HandleTypeDef *hospi, HAL_OSPI_DLYB_CfgTypeDef  *pdlyb_cfg)
{
 8009e04:	b580      	push	{r7, lr}
 8009e06:	b084      	sub	sp, #16
 8009e08:	af00      	add	r7, sp, #0
 8009e0a:	6078      	str	r0, [r7, #4]
 8009e0c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8009e0e:	2301      	movs	r3, #1
 8009e10:	73fb      	strb	r3, [r7, #15]

  /* Enable OCTOSPI Free Running Clock (mandatory) */
  SET_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	689a      	ldr	r2, [r3, #8]
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	f042 0202 	orr.w	r2, r2, #2
 8009e20:	609a      	str	r2, [r3, #8]

  /* Update OCTOSPI state */
  hospi->State = HAL_OSPI_STATE_BUSY_CMD;
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	2208      	movs	r2, #8
 8009e26:	651a      	str	r2, [r3, #80]	; 0x50

  if (hospi->Instance == OCTOSPI1)
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	4a1b      	ldr	r2, [pc, #108]	; (8009e9c <HAL_OSPI_DLYB_GetClockPeriod+0x98>)
 8009e2e:	4293      	cmp	r3, r2
 8009e30:	d10f      	bne.n	8009e52 <HAL_OSPI_DLYB_GetClockPeriod+0x4e>
  {
    /* Enable the DelayBlock */
    LL_DLYB_Enable(DLYB_OCTOSPI1);
 8009e32:	481b      	ldr	r0, [pc, #108]	; (8009ea0 <HAL_OSPI_DLYB_GetClockPeriod+0x9c>)
 8009e34:	f7fe fdd2 	bl	80089dc <LL_DLYB_Enable>

    /* try to detect Period */
    if (LL_DLYB_GetClockPeriod(DLYB_OCTOSPI1, pdlyb_cfg) == (uint32_t)SUCCESS)
 8009e38:	6839      	ldr	r1, [r7, #0]
 8009e3a:	4819      	ldr	r0, [pc, #100]	; (8009ea0 <HAL_OSPI_DLYB_GetClockPeriod+0x9c>)
 8009e3c:	f002 fef6 	bl	800cc2c <LL_DLYB_GetClockPeriod>
 8009e40:	4603      	mov	r3, r0
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	d101      	bne.n	8009e4a <HAL_OSPI_DLYB_GetClockPeriod+0x46>
    {
      status = HAL_OK;
 8009e46:	2300      	movs	r3, #0
 8009e48:	73fb      	strb	r3, [r7, #15]
    }

    /* Disable the DelayBlock */
    LL_DLYB_Disable(DLYB_OCTOSPI1);
 8009e4a:	4815      	ldr	r0, [pc, #84]	; (8009ea0 <HAL_OSPI_DLYB_GetClockPeriod+0x9c>)
 8009e4c:	f7fe fdd6 	bl	80089fc <LL_DLYB_Disable>
 8009e50:	e013      	b.n	8009e7a <HAL_OSPI_DLYB_GetClockPeriod+0x76>
  }

  else if (hospi->Instance == OCTOSPI2)
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	4a13      	ldr	r2, [pc, #76]	; (8009ea4 <HAL_OSPI_DLYB_GetClockPeriod+0xa0>)
 8009e58:	4293      	cmp	r3, r2
 8009e5a:	d10e      	bne.n	8009e7a <HAL_OSPI_DLYB_GetClockPeriod+0x76>
  {
    /* Enable the DelayBlock */
    LL_DLYB_Enable(DLYB_OCTOSPI2);
 8009e5c:	4812      	ldr	r0, [pc, #72]	; (8009ea8 <HAL_OSPI_DLYB_GetClockPeriod+0xa4>)
 8009e5e:	f7fe fdbd 	bl	80089dc <LL_DLYB_Enable>

    /* try to detect Period */
    if (LL_DLYB_GetClockPeriod(DLYB_OCTOSPI2, pdlyb_cfg) == (uint32_t)SUCCESS)
 8009e62:	6839      	ldr	r1, [r7, #0]
 8009e64:	4810      	ldr	r0, [pc, #64]	; (8009ea8 <HAL_OSPI_DLYB_GetClockPeriod+0xa4>)
 8009e66:	f002 fee1 	bl	800cc2c <LL_DLYB_GetClockPeriod>
 8009e6a:	4603      	mov	r3, r0
 8009e6c:	2b00      	cmp	r3, #0
 8009e6e:	d101      	bne.n	8009e74 <HAL_OSPI_DLYB_GetClockPeriod+0x70>
    {
      status = HAL_OK;
 8009e70:	2300      	movs	r3, #0
 8009e72:	73fb      	strb	r3, [r7, #15]
    }

    /* Disable the DelayBlock */
    LL_DLYB_Disable(DLYB_OCTOSPI2);
 8009e74:	480c      	ldr	r0, [pc, #48]	; (8009ea8 <HAL_OSPI_DLYB_GetClockPeriod+0xa4>)
 8009e76:	f7fe fdc1 	bl	80089fc <LL_DLYB_Disable>
  {
    /* Nothing to do */
  }

  /* Abort the current OctoSPI operation if exist */
  (void)HAL_OSPI_Abort(hospi);
 8009e7a:	6878      	ldr	r0, [r7, #4]
 8009e7c:	f7fe ff64 	bl	8008d48 <HAL_OSPI_Abort>

  /* Disable Free Running Clock */
  CLEAR_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	689a      	ldr	r2, [r3, #8]
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	f022 0202 	bic.w	r2, r2, #2
 8009e8e:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return status;
 8009e90:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e92:	4618      	mov	r0, r3
 8009e94:	3710      	adds	r7, #16
 8009e96:	46bd      	mov	sp, r7
 8009e98:	bd80      	pop	{r7, pc}
 8009e9a:	bf00      	nop
 8009e9c:	420d1400 	.word	0x420d1400
 8009ea0:	420cf000 	.word	0x420cf000
 8009ea4:	420d2400 	.word	0x420d2400
 8009ea8:	420cf400 	.word	0x420cf400

08009eac <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8009eac:	b480      	push	{r7}
 8009eae:	b085      	sub	sp, #20
 8009eb0:	af00      	add	r7, sp, #0
 8009eb2:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 8009eb4:	4b34      	ldr	r3, [pc, #208]	; (8009f88 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 8009eb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009eb8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8009ebc:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 8009ebe:	68ba      	ldr	r2, [r7, #8]
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	429a      	cmp	r2, r3
 8009ec4:	d101      	bne.n	8009eca <HAL_PWREx_ControlVoltageScaling+0x1e>
  {
    return HAL_OK;
 8009ec6:	2300      	movs	r3, #0
 8009ec8:	e057      	b.n	8009f7a <HAL_PWREx_ControlVoltageScaling+0xce>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009ed0:	d90a      	bls.n	8009ee8 <HAL_PWREx_ControlVoltageScaling+0x3c>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 8009ed2:	4b2d      	ldr	r3, [pc, #180]	; (8009f88 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 8009ed4:	68db      	ldr	r3, [r3, #12]
 8009ed6:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	4313      	orrs	r3, r2
 8009ede:	4a2a      	ldr	r2, [pc, #168]	; (8009f88 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 8009ee0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009ee4:	60d3      	str	r3, [r2, #12]
 8009ee6:	e007      	b.n	8009ef8 <HAL_PWREx_ControlVoltageScaling+0x4c>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 8009ee8:	4b27      	ldr	r3, [pc, #156]	; (8009f88 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 8009eea:	68db      	ldr	r3, [r3, #12]
 8009eec:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8009ef0:	4925      	ldr	r1, [pc, #148]	; (8009f88 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	4313      	orrs	r3, r2
 8009ef6:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8009ef8:	4b24      	ldr	r3, [pc, #144]	; (8009f8c <HAL_PWREx_ControlVoltageScaling+0xe0>)
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	4a24      	ldr	r2, [pc, #144]	; (8009f90 <HAL_PWREx_ControlVoltageScaling+0xe4>)
 8009efe:	fba2 2303 	umull	r2, r3, r2, r3
 8009f02:	099b      	lsrs	r3, r3, #6
 8009f04:	2232      	movs	r2, #50	; 0x32
 8009f06:	fb02 f303 	mul.w	r3, r2, r3
 8009f0a:	4a21      	ldr	r2, [pc, #132]	; (8009f90 <HAL_PWREx_ControlVoltageScaling+0xe4>)
 8009f0c:	fba2 2303 	umull	r2, r3, r2, r3
 8009f10:	099b      	lsrs	r3, r3, #6
 8009f12:	3301      	adds	r3, #1
 8009f14:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8009f16:	e002      	b.n	8009f1e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    timeout--;
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	3b01      	subs	r3, #1
 8009f1c:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8009f1e:	4b1a      	ldr	r3, [pc, #104]	; (8009f88 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 8009f20:	68db      	ldr	r3, [r3, #12]
 8009f22:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	d102      	bne.n	8009f30 <HAL_PWREx_ControlVoltageScaling+0x84>
 8009f2a:	68fb      	ldr	r3, [r7, #12]
 8009f2c:	2b00      	cmp	r3, #0
 8009f2e:	d1f3      	bne.n	8009f18 <HAL_PWREx_ControlVoltageScaling+0x6c>
  }

  /* Check time out */
  if (timeout != 0U)
 8009f30:	68fb      	ldr	r3, [r7, #12]
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	d01b      	beq.n	8009f6e <HAL_PWREx_ControlVoltageScaling+0xc2>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8009f36:	4b15      	ldr	r3, [pc, #84]	; (8009f8c <HAL_PWREx_ControlVoltageScaling+0xe0>)
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	4a15      	ldr	r2, [pc, #84]	; (8009f90 <HAL_PWREx_ControlVoltageScaling+0xe4>)
 8009f3c:	fba2 2303 	umull	r2, r3, r2, r3
 8009f40:	099b      	lsrs	r3, r3, #6
 8009f42:	2232      	movs	r2, #50	; 0x32
 8009f44:	fb02 f303 	mul.w	r3, r2, r3
 8009f48:	4a11      	ldr	r2, [pc, #68]	; (8009f90 <HAL_PWREx_ControlVoltageScaling+0xe4>)
 8009f4a:	fba2 2303 	umull	r2, r3, r2, r3
 8009f4e:	099b      	lsrs	r3, r3, #6
 8009f50:	3301      	adds	r3, #1
 8009f52:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8009f54:	e002      	b.n	8009f5c <HAL_PWREx_ControlVoltageScaling+0xb0>
    {
      timeout--;
 8009f56:	68fb      	ldr	r3, [r7, #12]
 8009f58:	3b01      	subs	r3, #1
 8009f5a:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8009f5c:	4b0a      	ldr	r3, [pc, #40]	; (8009f88 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 8009f5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009f60:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009f64:	2b00      	cmp	r3, #0
 8009f66:	d102      	bne.n	8009f6e <HAL_PWREx_ControlVoltageScaling+0xc2>
 8009f68:	68fb      	ldr	r3, [r7, #12]
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	d1f3      	bne.n	8009f56 <HAL_PWREx_ControlVoltageScaling+0xaa>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 8009f6e:	68fb      	ldr	r3, [r7, #12]
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	d101      	bne.n	8009f78 <HAL_PWREx_ControlVoltageScaling+0xcc>
  {
    return HAL_TIMEOUT;
 8009f74:	2303      	movs	r3, #3
 8009f76:	e000      	b.n	8009f7a <HAL_PWREx_ControlVoltageScaling+0xce>
  }

  return HAL_OK;
 8009f78:	2300      	movs	r3, #0
}
 8009f7a:	4618      	mov	r0, r3
 8009f7c:	3714      	adds	r7, #20
 8009f7e:	46bd      	mov	sp, r7
 8009f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f84:	4770      	bx	lr
 8009f86:	bf00      	nop
 8009f88:	46020800 	.word	0x46020800
 8009f8c:	20000004 	.word	0x20000004
 8009f90:	10624dd3 	.word	0x10624dd3

08009f94 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8009f94:	b480      	push	{r7}
 8009f96:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 8009f98:	4b04      	ldr	r3, [pc, #16]	; (8009fac <HAL_PWREx_GetVoltageRange+0x18>)
 8009f9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009f9c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 8009fa0:	4618      	mov	r0, r3
 8009fa2:	46bd      	mov	sp, r7
 8009fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fa8:	4770      	bx	lr
 8009faa:	bf00      	nop
 8009fac:	46020800 	.word	0x46020800

08009fb0 <HAL_PWREx_ConfigSupply>:
  *                        @arg PWR_LDO_SUPPLY  : The LDO regulator supplies the Vcore Power Domains.
  *                        @arg PWR_SMPS_SUPPLY : The SMPS regulator supplies the Vcore Power Domains.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply(uint32_t SupplySource)
{
 8009fb0:	b480      	push	{r7}
 8009fb2:	b085      	sub	sp, #20
 8009fb4:	af00      	add	r7, sp, #0
 8009fb6:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_SUPPLY(SupplySource));

  /* Set maximum time out */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8009fb8:	4b22      	ldr	r3, [pc, #136]	; (800a044 <HAL_PWREx_ConfigSupply+0x94>)
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	4a22      	ldr	r2, [pc, #136]	; (800a048 <HAL_PWREx_ConfigSupply+0x98>)
 8009fbe:	fba2 2303 	umull	r2, r3, r2, r3
 8009fc2:	099b      	lsrs	r3, r3, #6
 8009fc4:	2232      	movs	r2, #50	; 0x32
 8009fc6:	fb02 f303 	mul.w	r3, r2, r3
 8009fca:	4a1f      	ldr	r2, [pc, #124]	; (800a048 <HAL_PWREx_ConfigSupply+0x98>)
 8009fcc:	fba2 2303 	umull	r2, r3, r2, r3
 8009fd0:	099b      	lsrs	r3, r3, #6
 8009fd2:	3301      	adds	r3, #1
 8009fd4:	60fb      	str	r3, [r7, #12]

  /* Configure the LDO as system regulator supply */
  if (SupplySource == PWR_LDO_SUPPLY)
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	d113      	bne.n	800a004 <HAL_PWREx_ConfigSupply+0x54>
  {
    /* Set the power supply configuration */
    CLEAR_BIT(PWR->CR3, PWR_CR3_REGSEL);
 8009fdc:	4b1b      	ldr	r3, [pc, #108]	; (800a04c <HAL_PWREx_ConfigSupply+0x9c>)
 8009fde:	689b      	ldr	r3, [r3, #8]
 8009fe0:	4a1a      	ldr	r2, [pc, #104]	; (800a04c <HAL_PWREx_ConfigSupply+0x9c>)
 8009fe2:	f023 0302 	bic.w	r3, r3, #2
 8009fe6:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8009fe8:	e002      	b.n	8009ff0 <HAL_PWREx_ConfigSupply+0x40>
    {
      timeout--;
 8009fea:	68fb      	ldr	r3, [r7, #12]
 8009fec:	3b01      	subs	r3, #1
 8009fee:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8009ff0:	4b16      	ldr	r3, [pc, #88]	; (800a04c <HAL_PWREx_ConfigSupply+0x9c>)
 8009ff2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009ff4:	f003 0302 	and.w	r3, r3, #2
 8009ff8:	2b02      	cmp	r3, #2
 8009ffa:	d116      	bne.n	800a02a <HAL_PWREx_ConfigSupply+0x7a>
 8009ffc:	68fb      	ldr	r3, [r7, #12]
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	d1f3      	bne.n	8009fea <HAL_PWREx_ConfigSupply+0x3a>
 800a002:	e012      	b.n	800a02a <HAL_PWREx_ConfigSupply+0x7a>
  }
  /* Configure the SMPS as system regulator supply */
  else
  {
    /* Set the power supply configuration */
    SET_BIT(PWR->CR3, PWR_CR3_REGSEL);
 800a004:	4b11      	ldr	r3, [pc, #68]	; (800a04c <HAL_PWREx_ConfigSupply+0x9c>)
 800a006:	689b      	ldr	r3, [r3, #8]
 800a008:	4a10      	ldr	r2, [pc, #64]	; (800a04c <HAL_PWREx_ConfigSupply+0x9c>)
 800a00a:	f043 0302 	orr.w	r3, r3, #2
 800a00e:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 800a010:	e002      	b.n	800a018 <HAL_PWREx_ConfigSupply+0x68>
    {
      timeout--;
 800a012:	68fb      	ldr	r3, [r7, #12]
 800a014:	3b01      	subs	r3, #1
 800a016:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 800a018:	4b0c      	ldr	r3, [pc, #48]	; (800a04c <HAL_PWREx_ConfigSupply+0x9c>)
 800a01a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a01c:	f003 0302 	and.w	r3, r3, #2
 800a020:	2b00      	cmp	r3, #0
 800a022:	d102      	bne.n	800a02a <HAL_PWREx_ConfigSupply+0x7a>
 800a024:	68fb      	ldr	r3, [r7, #12]
 800a026:	2b00      	cmp	r3, #0
 800a028:	d1f3      	bne.n	800a012 <HAL_PWREx_ConfigSupply+0x62>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 800a02a:	68fb      	ldr	r3, [r7, #12]
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	d101      	bne.n	800a034 <HAL_PWREx_ConfigSupply+0x84>
  {
    return HAL_TIMEOUT;
 800a030:	2303      	movs	r3, #3
 800a032:	e000      	b.n	800a036 <HAL_PWREx_ConfigSupply+0x86>
  }

  return HAL_OK;
 800a034:	2300      	movs	r3, #0
}
 800a036:	4618      	mov	r0, r3
 800a038:	3714      	adds	r7, #20
 800a03a:	46bd      	mov	sp, r7
 800a03c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a040:	4770      	bx	lr
 800a042:	bf00      	nop
 800a044:	20000004 	.word	0x20000004
 800a048:	10624dd3 	.word	0x10624dd3
 800a04c:	46020800 	.word	0x46020800

0800a050 <HAL_PWREx_EnableVddIO2>:
  * @note   Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddIO2(void)
{
 800a050:	b480      	push	{r7}
 800a052:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_IO2SV);
 800a054:	4b05      	ldr	r3, [pc, #20]	; (800a06c <HAL_PWREx_EnableVddIO2+0x1c>)
 800a056:	691b      	ldr	r3, [r3, #16]
 800a058:	4a04      	ldr	r2, [pc, #16]	; (800a06c <HAL_PWREx_EnableVddIO2+0x1c>)
 800a05a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a05e:	6113      	str	r3, [r2, #16]
}
 800a060:	bf00      	nop
 800a062:	46bd      	mov	sp, r7
 800a064:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a068:	4770      	bx	lr
 800a06a:	bf00      	nop
 800a06c:	46020800 	.word	0x46020800

0800a070 <HAL_PWREx_EnableVddA>:
  * @note   Remove VDDA electrical and logical isolation, once VDDA supply is
  *         present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddA(void)
{
 800a070:	b480      	push	{r7}
 800a072:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_ASV);
 800a074:	4b05      	ldr	r3, [pc, #20]	; (800a08c <HAL_PWREx_EnableVddA+0x1c>)
 800a076:	691b      	ldr	r3, [r3, #16]
 800a078:	4a04      	ldr	r2, [pc, #16]	; (800a08c <HAL_PWREx_EnableVddA+0x1c>)
 800a07a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a07e:	6113      	str	r3, [r2, #16]
}
 800a080:	bf00      	nop
 800a082:	46bd      	mov	sp, r7
 800a084:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a088:	4770      	bx	lr
 800a08a:	bf00      	nop
 800a08c:	46020800 	.word	0x46020800

0800a090 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 800a090:	b580      	push	{r7, lr}
 800a092:	b08e      	sub	sp, #56	; 0x38
 800a094:	af00      	add	r7, sp, #0
 800a096:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 800a098:	2300      	movs	r3, #0
 800a09a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	2b00      	cmp	r3, #0
 800a0a2:	d102      	bne.n	800a0aa <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 800a0a4:	2301      	movs	r3, #1
 800a0a6:	f000 bec3 	b.w	800ae30 <HAL_RCC_OscConfig+0xda0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a0aa:	4b9c      	ldr	r3, [pc, #624]	; (800a31c <HAL_RCC_OscConfig+0x28c>)
 800a0ac:	69db      	ldr	r3, [r3, #28]
 800a0ae:	f003 030c 	and.w	r3, r3, #12
 800a0b2:	633b      	str	r3, [r7, #48]	; 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800a0b4:	4b99      	ldr	r3, [pc, #612]	; (800a31c <HAL_RCC_OscConfig+0x28c>)
 800a0b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a0b8:	f003 0303 	and.w	r3, r3, #3
 800a0bc:	62fb      	str	r3, [r7, #44]	; 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	681b      	ldr	r3, [r3, #0]
 800a0c2:	f003 0310 	and.w	r3, r3, #16
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	f000 8172 	beq.w	800a3b0 <HAL_RCC_OscConfig+0x320>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800a0cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	d007      	beq.n	800a0e2 <HAL_RCC_OscConfig+0x52>
 800a0d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0d4:	2b0c      	cmp	r3, #12
 800a0d6:	f040 80e4 	bne.w	800a2a2 <HAL_RCC_OscConfig+0x212>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 800a0da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0dc:	2b01      	cmp	r3, #1
 800a0de:	f040 80e0 	bne.w	800a2a2 <HAL_RCC_OscConfig+0x212>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U) && (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800a0e2:	4b8e      	ldr	r3, [pc, #568]	; (800a31c <HAL_RCC_OscConfig+0x28c>)
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	f003 0304 	and.w	r3, r3, #4
 800a0ea:	2b00      	cmp	r3, #0
 800a0ec:	d006      	beq.n	800a0fc <HAL_RCC_OscConfig+0x6c>
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	69db      	ldr	r3, [r3, #28]
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	d102      	bne.n	800a0fc <HAL_RCC_OscConfig+0x6c>
      {
        return HAL_ERROR;
 800a0f6:	2301      	movs	r3, #1
 800a0f8:	f000 be9a 	b.w	800ae30 <HAL_RCC_OscConfig+0xda0>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a100:	4b86      	ldr	r3, [pc, #536]	; (800a31c <HAL_RCC_OscConfig+0x28c>)
 800a102:	689b      	ldr	r3, [r3, #8]
 800a104:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a108:	2b00      	cmp	r3, #0
 800a10a:	d004      	beq.n	800a116 <HAL_RCC_OscConfig+0x86>
 800a10c:	4b83      	ldr	r3, [pc, #524]	; (800a31c <HAL_RCC_OscConfig+0x28c>)
 800a10e:	689b      	ldr	r3, [r3, #8]
 800a110:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800a114:	e005      	b.n	800a122 <HAL_RCC_OscConfig+0x92>
 800a116:	4b81      	ldr	r3, [pc, #516]	; (800a31c <HAL_RCC_OscConfig+0x28c>)
 800a118:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800a11c:	041b      	lsls	r3, r3, #16
 800a11e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800a122:	4293      	cmp	r3, r2
 800a124:	d255      	bcs.n	800a1d2 <HAL_RCC_OscConfig+0x142>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800a126:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a128:	2b00      	cmp	r3, #0
 800a12a:	d10a      	bne.n	800a142 <HAL_RCC_OscConfig+0xb2>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a130:	4618      	mov	r0, r3
 800a132:	f001 f9e3 	bl	800b4fc <RCC_SetFlashLatencyFromMSIRange>
 800a136:	4603      	mov	r3, r0
 800a138:	2b00      	cmp	r3, #0
 800a13a:	d002      	beq.n	800a142 <HAL_RCC_OscConfig+0xb2>
            {
              return HAL_ERROR;
 800a13c:	2301      	movs	r3, #1
 800a13e:	f000 be77 	b.w	800ae30 <HAL_RCC_OscConfig+0xda0>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 800a142:	4b76      	ldr	r3, [pc, #472]	; (800a31c <HAL_RCC_OscConfig+0x28c>)
 800a144:	689b      	ldr	r3, [r3, #8]
 800a146:	4a75      	ldr	r2, [pc, #468]	; (800a31c <HAL_RCC_OscConfig+0x28c>)
 800a148:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800a14c:	6093      	str	r3, [r2, #8]
 800a14e:	4b73      	ldr	r3, [pc, #460]	; (800a31c <HAL_RCC_OscConfig+0x28c>)
 800a150:	689b      	ldr	r3, [r3, #8]
 800a152:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a15a:	4970      	ldr	r1, [pc, #448]	; (800a31c <HAL_RCC_OscConfig+0x28c>)
 800a15c:	4313      	orrs	r3, r2
 800a15e:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a164:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 800a168:	d309      	bcc.n	800a17e <HAL_RCC_OscConfig+0xee>
 800a16a:	4b6c      	ldr	r3, [pc, #432]	; (800a31c <HAL_RCC_OscConfig+0x28c>)
 800a16c:	68db      	ldr	r3, [r3, #12]
 800a16e:	f023 021f 	bic.w	r2, r3, #31
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	6a1b      	ldr	r3, [r3, #32]
 800a176:	4969      	ldr	r1, [pc, #420]	; (800a31c <HAL_RCC_OscConfig+0x28c>)
 800a178:	4313      	orrs	r3, r2
 800a17a:	60cb      	str	r3, [r1, #12]
 800a17c:	e07e      	b.n	800a27c <HAL_RCC_OscConfig+0x1ec>
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a182:	2b00      	cmp	r3, #0
 800a184:	da0a      	bge.n	800a19c <HAL_RCC_OscConfig+0x10c>
 800a186:	4b65      	ldr	r3, [pc, #404]	; (800a31c <HAL_RCC_OscConfig+0x28c>)
 800a188:	68db      	ldr	r3, [r3, #12]
 800a18a:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	6a1b      	ldr	r3, [r3, #32]
 800a192:	015b      	lsls	r3, r3, #5
 800a194:	4961      	ldr	r1, [pc, #388]	; (800a31c <HAL_RCC_OscConfig+0x28c>)
 800a196:	4313      	orrs	r3, r2
 800a198:	60cb      	str	r3, [r1, #12]
 800a19a:	e06f      	b.n	800a27c <HAL_RCC_OscConfig+0x1ec>
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a1a4:	d30a      	bcc.n	800a1bc <HAL_RCC_OscConfig+0x12c>
 800a1a6:	4b5d      	ldr	r3, [pc, #372]	; (800a31c <HAL_RCC_OscConfig+0x28c>)
 800a1a8:	68db      	ldr	r3, [r3, #12]
 800a1aa:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	6a1b      	ldr	r3, [r3, #32]
 800a1b2:	029b      	lsls	r3, r3, #10
 800a1b4:	4959      	ldr	r1, [pc, #356]	; (800a31c <HAL_RCC_OscConfig+0x28c>)
 800a1b6:	4313      	orrs	r3, r2
 800a1b8:	60cb      	str	r3, [r1, #12]
 800a1ba:	e05f      	b.n	800a27c <HAL_RCC_OscConfig+0x1ec>
 800a1bc:	4b57      	ldr	r3, [pc, #348]	; (800a31c <HAL_RCC_OscConfig+0x28c>)
 800a1be:	68db      	ldr	r3, [r3, #12]
 800a1c0:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	6a1b      	ldr	r3, [r3, #32]
 800a1c8:	03db      	lsls	r3, r3, #15
 800a1ca:	4954      	ldr	r1, [pc, #336]	; (800a31c <HAL_RCC_OscConfig+0x28c>)
 800a1cc:	4313      	orrs	r3, r2
 800a1ce:	60cb      	str	r3, [r1, #12]
 800a1d0:	e054      	b.n	800a27c <HAL_RCC_OscConfig+0x1ec>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 800a1d2:	4b52      	ldr	r3, [pc, #328]	; (800a31c <HAL_RCC_OscConfig+0x28c>)
 800a1d4:	689b      	ldr	r3, [r3, #8]
 800a1d6:	4a51      	ldr	r2, [pc, #324]	; (800a31c <HAL_RCC_OscConfig+0x28c>)
 800a1d8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800a1dc:	6093      	str	r3, [r2, #8]
 800a1de:	4b4f      	ldr	r3, [pc, #316]	; (800a31c <HAL_RCC_OscConfig+0x28c>)
 800a1e0:	689b      	ldr	r3, [r3, #8]
 800a1e2:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1ea:	494c      	ldr	r1, [pc, #304]	; (800a31c <HAL_RCC_OscConfig+0x28c>)
 800a1ec:	4313      	orrs	r3, r2
 800a1ee:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1f4:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 800a1f8:	d309      	bcc.n	800a20e <HAL_RCC_OscConfig+0x17e>
 800a1fa:	4b48      	ldr	r3, [pc, #288]	; (800a31c <HAL_RCC_OscConfig+0x28c>)
 800a1fc:	68db      	ldr	r3, [r3, #12]
 800a1fe:	f023 021f 	bic.w	r2, r3, #31
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	6a1b      	ldr	r3, [r3, #32]
 800a206:	4945      	ldr	r1, [pc, #276]	; (800a31c <HAL_RCC_OscConfig+0x28c>)
 800a208:	4313      	orrs	r3, r2
 800a20a:	60cb      	str	r3, [r1, #12]
 800a20c:	e028      	b.n	800a260 <HAL_RCC_OscConfig+0x1d0>
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a212:	2b00      	cmp	r3, #0
 800a214:	da0a      	bge.n	800a22c <HAL_RCC_OscConfig+0x19c>
 800a216:	4b41      	ldr	r3, [pc, #260]	; (800a31c <HAL_RCC_OscConfig+0x28c>)
 800a218:	68db      	ldr	r3, [r3, #12]
 800a21a:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	6a1b      	ldr	r3, [r3, #32]
 800a222:	015b      	lsls	r3, r3, #5
 800a224:	493d      	ldr	r1, [pc, #244]	; (800a31c <HAL_RCC_OscConfig+0x28c>)
 800a226:	4313      	orrs	r3, r2
 800a228:	60cb      	str	r3, [r1, #12]
 800a22a:	e019      	b.n	800a260 <HAL_RCC_OscConfig+0x1d0>
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a230:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a234:	d30a      	bcc.n	800a24c <HAL_RCC_OscConfig+0x1bc>
 800a236:	4b39      	ldr	r3, [pc, #228]	; (800a31c <HAL_RCC_OscConfig+0x28c>)
 800a238:	68db      	ldr	r3, [r3, #12]
 800a23a:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	6a1b      	ldr	r3, [r3, #32]
 800a242:	029b      	lsls	r3, r3, #10
 800a244:	4935      	ldr	r1, [pc, #212]	; (800a31c <HAL_RCC_OscConfig+0x28c>)
 800a246:	4313      	orrs	r3, r2
 800a248:	60cb      	str	r3, [r1, #12]
 800a24a:	e009      	b.n	800a260 <HAL_RCC_OscConfig+0x1d0>
 800a24c:	4b33      	ldr	r3, [pc, #204]	; (800a31c <HAL_RCC_OscConfig+0x28c>)
 800a24e:	68db      	ldr	r3, [r3, #12]
 800a250:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	6a1b      	ldr	r3, [r3, #32]
 800a258:	03db      	lsls	r3, r3, #15
 800a25a:	4930      	ldr	r1, [pc, #192]	; (800a31c <HAL_RCC_OscConfig+0x28c>)
 800a25c:	4313      	orrs	r3, r2
 800a25e:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800a260:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a262:	2b00      	cmp	r3, #0
 800a264:	d10a      	bne.n	800a27c <HAL_RCC_OscConfig+0x1ec>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a26a:	4618      	mov	r0, r3
 800a26c:	f001 f946 	bl	800b4fc <RCC_SetFlashLatencyFromMSIRange>
 800a270:	4603      	mov	r3, r0
 800a272:	2b00      	cmp	r3, #0
 800a274:	d002      	beq.n	800a27c <HAL_RCC_OscConfig+0x1ec>
            {
              return HAL_ERROR;
 800a276:	2301      	movs	r3, #1
 800a278:	f000 bdda 	b.w	800ae30 <HAL_RCC_OscConfig+0xda0>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 800a27c:	f001 f8d8 	bl	800b430 <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800a280:	4b27      	ldr	r3, [pc, #156]	; (800a320 <HAL_RCC_OscConfig+0x290>)
 800a282:	681b      	ldr	r3, [r3, #0]
 800a284:	4618      	mov	r0, r3
 800a286:	f7fb f99d 	bl	80055c4 <HAL_InitTick>
 800a28a:	4603      	mov	r3, r0
 800a28c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (status != HAL_OK)
 800a290:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a294:	2b00      	cmp	r3, #0
 800a296:	f000 808a 	beq.w	800a3ae <HAL_RCC_OscConfig+0x31e>
        {
          return status;
 800a29a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a29e:	f000 bdc7 	b.w	800ae30 <HAL_RCC_OscConfig+0xda0>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	69db      	ldr	r3, [r3, #28]
 800a2a6:	2b00      	cmp	r3, #0
 800a2a8:	d066      	beq.n	800a378 <HAL_RCC_OscConfig+0x2e8>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 800a2aa:	4b1c      	ldr	r3, [pc, #112]	; (800a31c <HAL_RCC_OscConfig+0x28c>)
 800a2ac:	681b      	ldr	r3, [r3, #0]
 800a2ae:	4a1b      	ldr	r2, [pc, #108]	; (800a31c <HAL_RCC_OscConfig+0x28c>)
 800a2b0:	f043 0301 	orr.w	r3, r3, #1
 800a2b4:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800a2b6:	f7fb fadb 	bl	8005870 <HAL_GetTick>
 800a2ba:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 800a2bc:	e009      	b.n	800a2d2 <HAL_RCC_OscConfig+0x242>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800a2be:	f7fb fad7 	bl	8005870 <HAL_GetTick>
 800a2c2:	4602      	mov	r2, r0
 800a2c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2c6:	1ad3      	subs	r3, r2, r3
 800a2c8:	2b02      	cmp	r3, #2
 800a2ca:	d902      	bls.n	800a2d2 <HAL_RCC_OscConfig+0x242>
          {
            return HAL_TIMEOUT;
 800a2cc:	2303      	movs	r3, #3
 800a2ce:	f000 bdaf 	b.w	800ae30 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 800a2d2:	4b12      	ldr	r3, [pc, #72]	; (800a31c <HAL_RCC_OscConfig+0x28c>)
 800a2d4:	681b      	ldr	r3, [r3, #0]
 800a2d6:	f003 0304 	and.w	r3, r3, #4
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	d0ef      	beq.n	800a2be <HAL_RCC_OscConfig+0x22e>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 800a2de:	4b0f      	ldr	r3, [pc, #60]	; (800a31c <HAL_RCC_OscConfig+0x28c>)
 800a2e0:	689b      	ldr	r3, [r3, #8]
 800a2e2:	4a0e      	ldr	r2, [pc, #56]	; (800a31c <HAL_RCC_OscConfig+0x28c>)
 800a2e4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800a2e8:	6093      	str	r3, [r2, #8]
 800a2ea:	4b0c      	ldr	r3, [pc, #48]	; (800a31c <HAL_RCC_OscConfig+0x28c>)
 800a2ec:	689b      	ldr	r3, [r3, #8]
 800a2ee:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2f6:	4909      	ldr	r1, [pc, #36]	; (800a31c <HAL_RCC_OscConfig+0x28c>)
 800a2f8:	4313      	orrs	r3, r2
 800a2fa:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a300:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 800a304:	d30e      	bcc.n	800a324 <HAL_RCC_OscConfig+0x294>
 800a306:	4b05      	ldr	r3, [pc, #20]	; (800a31c <HAL_RCC_OscConfig+0x28c>)
 800a308:	68db      	ldr	r3, [r3, #12]
 800a30a:	f023 021f 	bic.w	r2, r3, #31
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	6a1b      	ldr	r3, [r3, #32]
 800a312:	4902      	ldr	r1, [pc, #8]	; (800a31c <HAL_RCC_OscConfig+0x28c>)
 800a314:	4313      	orrs	r3, r2
 800a316:	60cb      	str	r3, [r1, #12]
 800a318:	e04a      	b.n	800a3b0 <HAL_RCC_OscConfig+0x320>
 800a31a:	bf00      	nop
 800a31c:	46020c00 	.word	0x46020c00
 800a320:	20000008 	.word	0x20000008
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a328:	2b00      	cmp	r3, #0
 800a32a:	da0a      	bge.n	800a342 <HAL_RCC_OscConfig+0x2b2>
 800a32c:	4b9b      	ldr	r3, [pc, #620]	; (800a59c <HAL_RCC_OscConfig+0x50c>)
 800a32e:	68db      	ldr	r3, [r3, #12]
 800a330:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	6a1b      	ldr	r3, [r3, #32]
 800a338:	015b      	lsls	r3, r3, #5
 800a33a:	4998      	ldr	r1, [pc, #608]	; (800a59c <HAL_RCC_OscConfig+0x50c>)
 800a33c:	4313      	orrs	r3, r2
 800a33e:	60cb      	str	r3, [r1, #12]
 800a340:	e036      	b.n	800a3b0 <HAL_RCC_OscConfig+0x320>
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a346:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a34a:	d30a      	bcc.n	800a362 <HAL_RCC_OscConfig+0x2d2>
 800a34c:	4b93      	ldr	r3, [pc, #588]	; (800a59c <HAL_RCC_OscConfig+0x50c>)
 800a34e:	68db      	ldr	r3, [r3, #12]
 800a350:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	6a1b      	ldr	r3, [r3, #32]
 800a358:	029b      	lsls	r3, r3, #10
 800a35a:	4990      	ldr	r1, [pc, #576]	; (800a59c <HAL_RCC_OscConfig+0x50c>)
 800a35c:	4313      	orrs	r3, r2
 800a35e:	60cb      	str	r3, [r1, #12]
 800a360:	e026      	b.n	800a3b0 <HAL_RCC_OscConfig+0x320>
 800a362:	4b8e      	ldr	r3, [pc, #568]	; (800a59c <HAL_RCC_OscConfig+0x50c>)
 800a364:	68db      	ldr	r3, [r3, #12]
 800a366:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	6a1b      	ldr	r3, [r3, #32]
 800a36e:	03db      	lsls	r3, r3, #15
 800a370:	498a      	ldr	r1, [pc, #552]	; (800a59c <HAL_RCC_OscConfig+0x50c>)
 800a372:	4313      	orrs	r3, r2
 800a374:	60cb      	str	r3, [r1, #12]
 800a376:	e01b      	b.n	800a3b0 <HAL_RCC_OscConfig+0x320>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 800a378:	4b88      	ldr	r3, [pc, #544]	; (800a59c <HAL_RCC_OscConfig+0x50c>)
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	4a87      	ldr	r2, [pc, #540]	; (800a59c <HAL_RCC_OscConfig+0x50c>)
 800a37e:	f023 0301 	bic.w	r3, r3, #1
 800a382:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800a384:	f7fb fa74 	bl	8005870 <HAL_GetTick>
 800a388:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 800a38a:	e009      	b.n	800a3a0 <HAL_RCC_OscConfig+0x310>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800a38c:	f7fb fa70 	bl	8005870 <HAL_GetTick>
 800a390:	4602      	mov	r2, r0
 800a392:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a394:	1ad3      	subs	r3, r2, r3
 800a396:	2b02      	cmp	r3, #2
 800a398:	d902      	bls.n	800a3a0 <HAL_RCC_OscConfig+0x310>
          {
            return HAL_TIMEOUT;
 800a39a:	2303      	movs	r3, #3
 800a39c:	f000 bd48 	b.w	800ae30 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 800a3a0:	4b7e      	ldr	r3, [pc, #504]	; (800a59c <HAL_RCC_OscConfig+0x50c>)
 800a3a2:	681b      	ldr	r3, [r3, #0]
 800a3a4:	f003 0304 	and.w	r3, r3, #4
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	d1ef      	bne.n	800a38c <HAL_RCC_OscConfig+0x2fc>
 800a3ac:	e000      	b.n	800a3b0 <HAL_RCC_OscConfig+0x320>
      if ((READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U) && (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800a3ae:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	681b      	ldr	r3, [r3, #0]
 800a3b4:	f003 0301 	and.w	r3, r3, #1
 800a3b8:	2b00      	cmp	r3, #0
 800a3ba:	f000 8094 	beq.w	800a4e6 <HAL_RCC_OscConfig+0x456>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800a3be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3c0:	2b08      	cmp	r3, #8
 800a3c2:	d005      	beq.n	800a3d0 <HAL_RCC_OscConfig+0x340>
 800a3c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3c6:	2b0c      	cmp	r3, #12
 800a3c8:	d110      	bne.n	800a3ec <HAL_RCC_OscConfig+0x35c>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800a3ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3cc:	2b03      	cmp	r3, #3
 800a3ce:	d10d      	bne.n	800a3ec <HAL_RCC_OscConfig+0x35c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a3d0:	4b72      	ldr	r3, [pc, #456]	; (800a59c <HAL_RCC_OscConfig+0x50c>)
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a3d8:	2b00      	cmp	r3, #0
 800a3da:	f000 8083 	beq.w	800a4e4 <HAL_RCC_OscConfig+0x454>
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	685b      	ldr	r3, [r3, #4]
 800a3e2:	2b00      	cmp	r3, #0
 800a3e4:	d17e      	bne.n	800a4e4 <HAL_RCC_OscConfig+0x454>
      {
        return HAL_ERROR;
 800a3e6:	2301      	movs	r3, #1
 800a3e8:	f000 bd22 	b.w	800ae30 <HAL_RCC_OscConfig+0xda0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	685b      	ldr	r3, [r3, #4]
 800a3f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a3f4:	d106      	bne.n	800a404 <HAL_RCC_OscConfig+0x374>
 800a3f6:	4b69      	ldr	r3, [pc, #420]	; (800a59c <HAL_RCC_OscConfig+0x50c>)
 800a3f8:	681b      	ldr	r3, [r3, #0]
 800a3fa:	4a68      	ldr	r2, [pc, #416]	; (800a59c <HAL_RCC_OscConfig+0x50c>)
 800a3fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a400:	6013      	str	r3, [r2, #0]
 800a402:	e041      	b.n	800a488 <HAL_RCC_OscConfig+0x3f8>
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	685b      	ldr	r3, [r3, #4]
 800a408:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a40c:	d112      	bne.n	800a434 <HAL_RCC_OscConfig+0x3a4>
 800a40e:	4b63      	ldr	r3, [pc, #396]	; (800a59c <HAL_RCC_OscConfig+0x50c>)
 800a410:	681b      	ldr	r3, [r3, #0]
 800a412:	4a62      	ldr	r2, [pc, #392]	; (800a59c <HAL_RCC_OscConfig+0x50c>)
 800a414:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a418:	6013      	str	r3, [r2, #0]
 800a41a:	4b60      	ldr	r3, [pc, #384]	; (800a59c <HAL_RCC_OscConfig+0x50c>)
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	4a5f      	ldr	r2, [pc, #380]	; (800a59c <HAL_RCC_OscConfig+0x50c>)
 800a420:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800a424:	6013      	str	r3, [r2, #0]
 800a426:	4b5d      	ldr	r3, [pc, #372]	; (800a59c <HAL_RCC_OscConfig+0x50c>)
 800a428:	681b      	ldr	r3, [r3, #0]
 800a42a:	4a5c      	ldr	r2, [pc, #368]	; (800a59c <HAL_RCC_OscConfig+0x50c>)
 800a42c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a430:	6013      	str	r3, [r2, #0]
 800a432:	e029      	b.n	800a488 <HAL_RCC_OscConfig+0x3f8>
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	685b      	ldr	r3, [r3, #4]
 800a438:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 800a43c:	d112      	bne.n	800a464 <HAL_RCC_OscConfig+0x3d4>
 800a43e:	4b57      	ldr	r3, [pc, #348]	; (800a59c <HAL_RCC_OscConfig+0x50c>)
 800a440:	681b      	ldr	r3, [r3, #0]
 800a442:	4a56      	ldr	r2, [pc, #344]	; (800a59c <HAL_RCC_OscConfig+0x50c>)
 800a444:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a448:	6013      	str	r3, [r2, #0]
 800a44a:	4b54      	ldr	r3, [pc, #336]	; (800a59c <HAL_RCC_OscConfig+0x50c>)
 800a44c:	681b      	ldr	r3, [r3, #0]
 800a44e:	4a53      	ldr	r2, [pc, #332]	; (800a59c <HAL_RCC_OscConfig+0x50c>)
 800a450:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a454:	6013      	str	r3, [r2, #0]
 800a456:	4b51      	ldr	r3, [pc, #324]	; (800a59c <HAL_RCC_OscConfig+0x50c>)
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	4a50      	ldr	r2, [pc, #320]	; (800a59c <HAL_RCC_OscConfig+0x50c>)
 800a45c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a460:	6013      	str	r3, [r2, #0]
 800a462:	e011      	b.n	800a488 <HAL_RCC_OscConfig+0x3f8>
 800a464:	4b4d      	ldr	r3, [pc, #308]	; (800a59c <HAL_RCC_OscConfig+0x50c>)
 800a466:	681b      	ldr	r3, [r3, #0]
 800a468:	4a4c      	ldr	r2, [pc, #304]	; (800a59c <HAL_RCC_OscConfig+0x50c>)
 800a46a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a46e:	6013      	str	r3, [r2, #0]
 800a470:	4b4a      	ldr	r3, [pc, #296]	; (800a59c <HAL_RCC_OscConfig+0x50c>)
 800a472:	681b      	ldr	r3, [r3, #0]
 800a474:	4a49      	ldr	r2, [pc, #292]	; (800a59c <HAL_RCC_OscConfig+0x50c>)
 800a476:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a47a:	6013      	str	r3, [r2, #0]
 800a47c:	4b47      	ldr	r3, [pc, #284]	; (800a59c <HAL_RCC_OscConfig+0x50c>)
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	4a46      	ldr	r2, [pc, #280]	; (800a59c <HAL_RCC_OscConfig+0x50c>)
 800a482:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800a486:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	685b      	ldr	r3, [r3, #4]
 800a48c:	2b00      	cmp	r3, #0
 800a48e:	d014      	beq.n	800a4ba <HAL_RCC_OscConfig+0x42a>
      {
        tickstart = HAL_GetTick();
 800a490:	f7fb f9ee 	bl	8005870 <HAL_GetTick>
 800a494:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800a496:	e009      	b.n	800a4ac <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a498:	f7fb f9ea 	bl	8005870 <HAL_GetTick>
 800a49c:	4602      	mov	r2, r0
 800a49e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4a0:	1ad3      	subs	r3, r2, r3
 800a4a2:	2b64      	cmp	r3, #100	; 0x64
 800a4a4:	d902      	bls.n	800a4ac <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800a4a6:	2303      	movs	r3, #3
 800a4a8:	f000 bcc2 	b.w	800ae30 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800a4ac:	4b3b      	ldr	r3, [pc, #236]	; (800a59c <HAL_RCC_OscConfig+0x50c>)
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a4b4:	2b00      	cmp	r3, #0
 800a4b6:	d0ef      	beq.n	800a498 <HAL_RCC_OscConfig+0x408>
 800a4b8:	e015      	b.n	800a4e6 <HAL_RCC_OscConfig+0x456>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 800a4ba:	f7fb f9d9 	bl	8005870 <HAL_GetTick>
 800a4be:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800a4c0:	e009      	b.n	800a4d6 <HAL_RCC_OscConfig+0x446>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a4c2:	f7fb f9d5 	bl	8005870 <HAL_GetTick>
 800a4c6:	4602      	mov	r2, r0
 800a4c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4ca:	1ad3      	subs	r3, r2, r3
 800a4cc:	2b64      	cmp	r3, #100	; 0x64
 800a4ce:	d902      	bls.n	800a4d6 <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 800a4d0:	2303      	movs	r3, #3
 800a4d2:	f000 bcad 	b.w	800ae30 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800a4d6:	4b31      	ldr	r3, [pc, #196]	; (800a59c <HAL_RCC_OscConfig+0x50c>)
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a4de:	2b00      	cmp	r3, #0
 800a4e0:	d1ef      	bne.n	800a4c2 <HAL_RCC_OscConfig+0x432>
 800a4e2:	e000      	b.n	800a4e6 <HAL_RCC_OscConfig+0x456>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a4e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	f003 0302 	and.w	r3, r3, #2
 800a4ee:	2b00      	cmp	r3, #0
 800a4f0:	d066      	beq.n	800a5c0 <HAL_RCC_OscConfig+0x530>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800a4f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4f4:	2b04      	cmp	r3, #4
 800a4f6:	d005      	beq.n	800a504 <HAL_RCC_OscConfig+0x474>
 800a4f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4fa:	2b0c      	cmp	r3, #12
 800a4fc:	d11a      	bne.n	800a534 <HAL_RCC_OscConfig+0x4a4>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800a4fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a500:	2b02      	cmp	r3, #2
 800a502:	d117      	bne.n	800a534 <HAL_RCC_OscConfig+0x4a4>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a504:	4b25      	ldr	r3, [pc, #148]	; (800a59c <HAL_RCC_OscConfig+0x50c>)
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a50c:	2b00      	cmp	r3, #0
 800a50e:	d006      	beq.n	800a51e <HAL_RCC_OscConfig+0x48e>
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	68db      	ldr	r3, [r3, #12]
 800a514:	2b00      	cmp	r3, #0
 800a516:	d102      	bne.n	800a51e <HAL_RCC_OscConfig+0x48e>
      {
        return HAL_ERROR;
 800a518:	2301      	movs	r3, #1
 800a51a:	f000 bc89 	b.w	800ae30 <HAL_RCC_OscConfig+0xda0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 800a51e:	4b1f      	ldr	r3, [pc, #124]	; (800a59c <HAL_RCC_OscConfig+0x50c>)
 800a520:	691b      	ldr	r3, [r3, #16]
 800a522:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	691b      	ldr	r3, [r3, #16]
 800a52a:	041b      	lsls	r3, r3, #16
 800a52c:	491b      	ldr	r1, [pc, #108]	; (800a59c <HAL_RCC_OscConfig+0x50c>)
 800a52e:	4313      	orrs	r3, r2
 800a530:	610b      	str	r3, [r1, #16]
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a532:	e045      	b.n	800a5c0 <HAL_RCC_OscConfig+0x530>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	68db      	ldr	r3, [r3, #12]
 800a538:	2b00      	cmp	r3, #0
 800a53a:	d024      	beq.n	800a586 <HAL_RCC_OscConfig+0x4f6>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 800a53c:	4b17      	ldr	r3, [pc, #92]	; (800a59c <HAL_RCC_OscConfig+0x50c>)
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	4a16      	ldr	r2, [pc, #88]	; (800a59c <HAL_RCC_OscConfig+0x50c>)
 800a542:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a546:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800a548:	f7fb f992 	bl	8005870 <HAL_GetTick>
 800a54c:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800a54e:	e009      	b.n	800a564 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a550:	f7fb f98e 	bl	8005870 <HAL_GetTick>
 800a554:	4602      	mov	r2, r0
 800a556:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a558:	1ad3      	subs	r3, r2, r3
 800a55a:	2b02      	cmp	r3, #2
 800a55c:	d902      	bls.n	800a564 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 800a55e:	2303      	movs	r3, #3
 800a560:	f000 bc66 	b.w	800ae30 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800a564:	4b0d      	ldr	r3, [pc, #52]	; (800a59c <HAL_RCC_OscConfig+0x50c>)
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a56c:	2b00      	cmp	r3, #0
 800a56e:	d0ef      	beq.n	800a550 <HAL_RCC_OscConfig+0x4c0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 800a570:	4b0a      	ldr	r3, [pc, #40]	; (800a59c <HAL_RCC_OscConfig+0x50c>)
 800a572:	691b      	ldr	r3, [r3, #16]
 800a574:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	691b      	ldr	r3, [r3, #16]
 800a57c:	041b      	lsls	r3, r3, #16
 800a57e:	4907      	ldr	r1, [pc, #28]	; (800a59c <HAL_RCC_OscConfig+0x50c>)
 800a580:	4313      	orrs	r3, r2
 800a582:	610b      	str	r3, [r1, #16]
 800a584:	e01c      	b.n	800a5c0 <HAL_RCC_OscConfig+0x530>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 800a586:	4b05      	ldr	r3, [pc, #20]	; (800a59c <HAL_RCC_OscConfig+0x50c>)
 800a588:	681b      	ldr	r3, [r3, #0]
 800a58a:	4a04      	ldr	r2, [pc, #16]	; (800a59c <HAL_RCC_OscConfig+0x50c>)
 800a58c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a590:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800a592:	f7fb f96d 	bl	8005870 <HAL_GetTick>
 800a596:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800a598:	e00c      	b.n	800a5b4 <HAL_RCC_OscConfig+0x524>
 800a59a:	bf00      	nop
 800a59c:	46020c00 	.word	0x46020c00
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a5a0:	f7fb f966 	bl	8005870 <HAL_GetTick>
 800a5a4:	4602      	mov	r2, r0
 800a5a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5a8:	1ad3      	subs	r3, r2, r3
 800a5aa:	2b02      	cmp	r3, #2
 800a5ac:	d902      	bls.n	800a5b4 <HAL_RCC_OscConfig+0x524>
          {
            return HAL_TIMEOUT;
 800a5ae:	2303      	movs	r3, #3
 800a5b0:	f000 bc3e 	b.w	800ae30 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800a5b4:	4baf      	ldr	r3, [pc, #700]	; (800a874 <HAL_RCC_OscConfig+0x7e4>)
 800a5b6:	681b      	ldr	r3, [r3, #0]
 800a5b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	d1ef      	bne.n	800a5a0 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	f003 0308 	and.w	r3, r3, #8
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	f000 80c7 	beq.w	800a75c <HAL_RCC_OscConfig+0x6cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 800a5ce:	2300      	movs	r3, #0
 800a5d0:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a5d4:	4ba7      	ldr	r3, [pc, #668]	; (800a874 <HAL_RCC_OscConfig+0x7e4>)
 800a5d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a5da:	f003 0304 	and.w	r3, r3, #4
 800a5de:	2b00      	cmp	r3, #0
 800a5e0:	d111      	bne.n	800a606 <HAL_RCC_OscConfig+0x576>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a5e2:	4ba4      	ldr	r3, [pc, #656]	; (800a874 <HAL_RCC_OscConfig+0x7e4>)
 800a5e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a5e8:	4aa2      	ldr	r2, [pc, #648]	; (800a874 <HAL_RCC_OscConfig+0x7e4>)
 800a5ea:	f043 0304 	orr.w	r3, r3, #4
 800a5ee:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800a5f2:	4ba0      	ldr	r3, [pc, #640]	; (800a874 <HAL_RCC_OscConfig+0x7e4>)
 800a5f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a5f8:	f003 0304 	and.w	r3, r3, #4
 800a5fc:	617b      	str	r3, [r7, #20]
 800a5fe:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 800a600:	2301      	movs	r3, #1
 800a602:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800a606:	4b9c      	ldr	r3, [pc, #624]	; (800a878 <HAL_RCC_OscConfig+0x7e8>)
 800a608:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a60a:	f003 0301 	and.w	r3, r3, #1
 800a60e:	2b00      	cmp	r3, #0
 800a610:	d118      	bne.n	800a644 <HAL_RCC_OscConfig+0x5b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 800a612:	4b99      	ldr	r3, [pc, #612]	; (800a878 <HAL_RCC_OscConfig+0x7e8>)
 800a614:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a616:	4a98      	ldr	r2, [pc, #608]	; (800a878 <HAL_RCC_OscConfig+0x7e8>)
 800a618:	f043 0301 	orr.w	r3, r3, #1
 800a61c:	6293      	str	r3, [r2, #40]	; 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800a61e:	f7fb f927 	bl	8005870 <HAL_GetTick>
 800a622:	62b8      	str	r0, [r7, #40]	; 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800a624:	e008      	b.n	800a638 <HAL_RCC_OscConfig+0x5a8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a626:	f7fb f923 	bl	8005870 <HAL_GetTick>
 800a62a:	4602      	mov	r2, r0
 800a62c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a62e:	1ad3      	subs	r3, r2, r3
 800a630:	2b02      	cmp	r3, #2
 800a632:	d901      	bls.n	800a638 <HAL_RCC_OscConfig+0x5a8>
        {
          return HAL_TIMEOUT;
 800a634:	2303      	movs	r3, #3
 800a636:	e3fb      	b.n	800ae30 <HAL_RCC_OscConfig+0xda0>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800a638:	4b8f      	ldr	r3, [pc, #572]	; (800a878 <HAL_RCC_OscConfig+0x7e8>)
 800a63a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a63c:	f003 0301 	and.w	r3, r3, #1
 800a640:	2b00      	cmp	r3, #0
 800a642:	d0f0      	beq.n	800a626 <HAL_RCC_OscConfig+0x596>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	695b      	ldr	r3, [r3, #20]
 800a648:	2b00      	cmp	r3, #0
 800a64a:	d05f      	beq.n	800a70c <HAL_RCC_OscConfig+0x67c>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 800a64c:	4b89      	ldr	r3, [pc, #548]	; (800a874 <HAL_RCC_OscConfig+0x7e4>)
 800a64e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800a652:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	699a      	ldr	r2, [r3, #24]
 800a658:	6a3b      	ldr	r3, [r7, #32]
 800a65a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a65e:	429a      	cmp	r2, r3
 800a660:	d037      	beq.n	800a6d2 <HAL_RCC_OscConfig+0x642>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 800a662:	6a3b      	ldr	r3, [r7, #32]
 800a664:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a668:	2b00      	cmp	r3, #0
 800a66a:	d006      	beq.n	800a67a <HAL_RCC_OscConfig+0x5ea>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 800a66c:	6a3b      	ldr	r3, [r7, #32]
 800a66e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 800a672:	2b00      	cmp	r3, #0
 800a674:	d101      	bne.n	800a67a <HAL_RCC_OscConfig+0x5ea>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 800a676:	2301      	movs	r3, #1
 800a678:	e3da      	b.n	800ae30 <HAL_RCC_OscConfig+0xda0>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 800a67a:	6a3b      	ldr	r3, [r7, #32]
 800a67c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800a680:	2b00      	cmp	r3, #0
 800a682:	d01b      	beq.n	800a6bc <HAL_RCC_OscConfig+0x62c>
        {
          __HAL_RCC_LSI_DISABLE();
 800a684:	4b7b      	ldr	r3, [pc, #492]	; (800a874 <HAL_RCC_OscConfig+0x7e4>)
 800a686:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800a68a:	4a7a      	ldr	r2, [pc, #488]	; (800a874 <HAL_RCC_OscConfig+0x7e4>)
 800a68c:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 800a690:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

          tickstart = HAL_GetTick();
 800a694:	f7fb f8ec 	bl	8005870 <HAL_GetTick>
 800a698:	62b8      	str	r0, [r7, #40]	; 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800a69a:	e008      	b.n	800a6ae <HAL_RCC_OscConfig+0x61e>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a69c:	f7fb f8e8 	bl	8005870 <HAL_GetTick>
 800a6a0:	4602      	mov	r2, r0
 800a6a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6a4:	1ad3      	subs	r3, r2, r3
 800a6a6:	2b02      	cmp	r3, #2
 800a6a8:	d901      	bls.n	800a6ae <HAL_RCC_OscConfig+0x61e>
            {
              return HAL_TIMEOUT;
 800a6aa:	2303      	movs	r3, #3
 800a6ac:	e3c0      	b.n	800ae30 <HAL_RCC_OscConfig+0xda0>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800a6ae:	4b71      	ldr	r3, [pc, #452]	; (800a874 <HAL_RCC_OscConfig+0x7e4>)
 800a6b0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800a6b4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	d1ef      	bne.n	800a69c <HAL_RCC_OscConfig+0x60c>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 800a6bc:	4b6d      	ldr	r3, [pc, #436]	; (800a874 <HAL_RCC_OscConfig+0x7e4>)
 800a6be:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800a6c2:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	699b      	ldr	r3, [r3, #24]
 800a6ca:	496a      	ldr	r1, [pc, #424]	; (800a874 <HAL_RCC_OscConfig+0x7e4>)
 800a6cc:	4313      	orrs	r3, r2
 800a6ce:	f8c1 30f0 	str.w	r3, [r1, #240]	; 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 800a6d2:	4b68      	ldr	r3, [pc, #416]	; (800a874 <HAL_RCC_OscConfig+0x7e4>)
 800a6d4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800a6d8:	4a66      	ldr	r2, [pc, #408]	; (800a874 <HAL_RCC_OscConfig+0x7e4>)
 800a6da:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800a6de:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      tickstart = HAL_GetTick();
 800a6e2:	f7fb f8c5 	bl	8005870 <HAL_GetTick>
 800a6e6:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 800a6e8:	e008      	b.n	800a6fc <HAL_RCC_OscConfig+0x66c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a6ea:	f7fb f8c1 	bl	8005870 <HAL_GetTick>
 800a6ee:	4602      	mov	r2, r0
 800a6f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6f2:	1ad3      	subs	r3, r2, r3
 800a6f4:	2b02      	cmp	r3, #2
 800a6f6:	d901      	bls.n	800a6fc <HAL_RCC_OscConfig+0x66c>
        {
          return HAL_TIMEOUT;
 800a6f8:	2303      	movs	r3, #3
 800a6fa:	e399      	b.n	800ae30 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 800a6fc:	4b5d      	ldr	r3, [pc, #372]	; (800a874 <HAL_RCC_OscConfig+0x7e4>)
 800a6fe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800a702:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a706:	2b00      	cmp	r3, #0
 800a708:	d0ef      	beq.n	800a6ea <HAL_RCC_OscConfig+0x65a>
 800a70a:	e01b      	b.n	800a744 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 800a70c:	4b59      	ldr	r3, [pc, #356]	; (800a874 <HAL_RCC_OscConfig+0x7e4>)
 800a70e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800a712:	4a58      	ldr	r2, [pc, #352]	; (800a874 <HAL_RCC_OscConfig+0x7e4>)
 800a714:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 800a718:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      tickstart = HAL_GetTick();
 800a71c:	f7fb f8a8 	bl	8005870 <HAL_GetTick>
 800a720:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800a722:	e008      	b.n	800a736 <HAL_RCC_OscConfig+0x6a6>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a724:	f7fb f8a4 	bl	8005870 <HAL_GetTick>
 800a728:	4602      	mov	r2, r0
 800a72a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a72c:	1ad3      	subs	r3, r2, r3
 800a72e:	2b02      	cmp	r3, #2
 800a730:	d901      	bls.n	800a736 <HAL_RCC_OscConfig+0x6a6>
        {
          return HAL_TIMEOUT;
 800a732:	2303      	movs	r3, #3
 800a734:	e37c      	b.n	800ae30 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800a736:	4b4f      	ldr	r3, [pc, #316]	; (800a874 <HAL_RCC_OscConfig+0x7e4>)
 800a738:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800a73c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a740:	2b00      	cmp	r3, #0
 800a742:	d1ef      	bne.n	800a724 <HAL_RCC_OscConfig+0x694>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800a744:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800a748:	2b01      	cmp	r3, #1
 800a74a:	d107      	bne.n	800a75c <HAL_RCC_OscConfig+0x6cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a74c:	4b49      	ldr	r3, [pc, #292]	; (800a874 <HAL_RCC_OscConfig+0x7e4>)
 800a74e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a752:	4a48      	ldr	r2, [pc, #288]	; (800a874 <HAL_RCC_OscConfig+0x7e4>)
 800a754:	f023 0304 	bic.w	r3, r3, #4
 800a758:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	681b      	ldr	r3, [r3, #0]
 800a760:	f003 0304 	and.w	r3, r3, #4
 800a764:	2b00      	cmp	r3, #0
 800a766:	f000 8112 	beq.w	800a98e <HAL_RCC_OscConfig+0x8fe>
  {
    FlagStatus pwrclkchanged = RESET;
 800a76a:	2300      	movs	r3, #0
 800a76c:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a770:	4b40      	ldr	r3, [pc, #256]	; (800a874 <HAL_RCC_OscConfig+0x7e4>)
 800a772:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a776:	f003 0304 	and.w	r3, r3, #4
 800a77a:	2b00      	cmp	r3, #0
 800a77c:	d111      	bne.n	800a7a2 <HAL_RCC_OscConfig+0x712>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a77e:	4b3d      	ldr	r3, [pc, #244]	; (800a874 <HAL_RCC_OscConfig+0x7e4>)
 800a780:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a784:	4a3b      	ldr	r2, [pc, #236]	; (800a874 <HAL_RCC_OscConfig+0x7e4>)
 800a786:	f043 0304 	orr.w	r3, r3, #4
 800a78a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800a78e:	4b39      	ldr	r3, [pc, #228]	; (800a874 <HAL_RCC_OscConfig+0x7e4>)
 800a790:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a794:	f003 0304 	and.w	r3, r3, #4
 800a798:	613b      	str	r3, [r7, #16]
 800a79a:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 800a79c:	2301      	movs	r3, #1
 800a79e:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800a7a2:	4b35      	ldr	r3, [pc, #212]	; (800a878 <HAL_RCC_OscConfig+0x7e8>)
 800a7a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a7a6:	f003 0301 	and.w	r3, r3, #1
 800a7aa:	2b00      	cmp	r3, #0
 800a7ac:	d118      	bne.n	800a7e0 <HAL_RCC_OscConfig+0x750>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 800a7ae:	4b32      	ldr	r3, [pc, #200]	; (800a878 <HAL_RCC_OscConfig+0x7e8>)
 800a7b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a7b2:	4a31      	ldr	r2, [pc, #196]	; (800a878 <HAL_RCC_OscConfig+0x7e8>)
 800a7b4:	f043 0301 	orr.w	r3, r3, #1
 800a7b8:	6293      	str	r3, [r2, #40]	; 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800a7ba:	f7fb f859 	bl	8005870 <HAL_GetTick>
 800a7be:	62b8      	str	r0, [r7, #40]	; 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800a7c0:	e008      	b.n	800a7d4 <HAL_RCC_OscConfig+0x744>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a7c2:	f7fb f855 	bl	8005870 <HAL_GetTick>
 800a7c6:	4602      	mov	r2, r0
 800a7c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7ca:	1ad3      	subs	r3, r2, r3
 800a7cc:	2b02      	cmp	r3, #2
 800a7ce:	d901      	bls.n	800a7d4 <HAL_RCC_OscConfig+0x744>
        {
          return HAL_TIMEOUT;
 800a7d0:	2303      	movs	r3, #3
 800a7d2:	e32d      	b.n	800ae30 <HAL_RCC_OscConfig+0xda0>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800a7d4:	4b28      	ldr	r3, [pc, #160]	; (800a878 <HAL_RCC_OscConfig+0x7e8>)
 800a7d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a7d8:	f003 0301 	and.w	r3, r3, #1
 800a7dc:	2b00      	cmp	r3, #0
 800a7de:	d0f0      	beq.n	800a7c2 <HAL_RCC_OscConfig+0x732>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	689b      	ldr	r3, [r3, #8]
 800a7e4:	f003 0301 	and.w	r3, r3, #1
 800a7e8:	2b00      	cmp	r3, #0
 800a7ea:	d01f      	beq.n	800a82c <HAL_RCC_OscConfig+0x79c>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	689b      	ldr	r3, [r3, #8]
 800a7f0:	f003 0304 	and.w	r3, r3, #4
 800a7f4:	2b00      	cmp	r3, #0
 800a7f6:	d010      	beq.n	800a81a <HAL_RCC_OscConfig+0x78a>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800a7f8:	4b1e      	ldr	r3, [pc, #120]	; (800a874 <HAL_RCC_OscConfig+0x7e4>)
 800a7fa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800a7fe:	4a1d      	ldr	r2, [pc, #116]	; (800a874 <HAL_RCC_OscConfig+0x7e4>)
 800a800:	f043 0304 	orr.w	r3, r3, #4
 800a804:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800a808:	4b1a      	ldr	r3, [pc, #104]	; (800a874 <HAL_RCC_OscConfig+0x7e4>)
 800a80a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800a80e:	4a19      	ldr	r2, [pc, #100]	; (800a874 <HAL_RCC_OscConfig+0x7e4>)
 800a810:	f043 0301 	orr.w	r3, r3, #1
 800a814:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800a818:	e018      	b.n	800a84c <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800a81a:	4b16      	ldr	r3, [pc, #88]	; (800a874 <HAL_RCC_OscConfig+0x7e4>)
 800a81c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800a820:	4a14      	ldr	r2, [pc, #80]	; (800a874 <HAL_RCC_OscConfig+0x7e4>)
 800a822:	f043 0301 	orr.w	r3, r3, #1
 800a826:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800a82a:	e00f      	b.n	800a84c <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800a82c:	4b11      	ldr	r3, [pc, #68]	; (800a874 <HAL_RCC_OscConfig+0x7e4>)
 800a82e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800a832:	4a10      	ldr	r2, [pc, #64]	; (800a874 <HAL_RCC_OscConfig+0x7e4>)
 800a834:	f023 0301 	bic.w	r3, r3, #1
 800a838:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800a83c:	4b0d      	ldr	r3, [pc, #52]	; (800a874 <HAL_RCC_OscConfig+0x7e4>)
 800a83e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800a842:	4a0c      	ldr	r2, [pc, #48]	; (800a874 <HAL_RCC_OscConfig+0x7e4>)
 800a844:	f023 0304 	bic.w	r3, r3, #4
 800a848:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	689b      	ldr	r3, [r3, #8]
 800a850:	2b00      	cmp	r3, #0
 800a852:	d058      	beq.n	800a906 <HAL_RCC_OscConfig+0x876>
    {
      tickstart = HAL_GetTick();
 800a854:	f7fb f80c 	bl	8005870 <HAL_GetTick>
 800a858:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a85a:	e00f      	b.n	800a87c <HAL_RCC_OscConfig+0x7ec>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a85c:	f7fb f808 	bl	8005870 <HAL_GetTick>
 800a860:	4602      	mov	r2, r0
 800a862:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a864:	1ad3      	subs	r3, r2, r3
 800a866:	f241 3288 	movw	r2, #5000	; 0x1388
 800a86a:	4293      	cmp	r3, r2
 800a86c:	d906      	bls.n	800a87c <HAL_RCC_OscConfig+0x7ec>
        {
          return HAL_TIMEOUT;
 800a86e:	2303      	movs	r3, #3
 800a870:	e2de      	b.n	800ae30 <HAL_RCC_OscConfig+0xda0>
 800a872:	bf00      	nop
 800a874:	46020c00 	.word	0x46020c00
 800a878:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a87c:	4b9c      	ldr	r3, [pc, #624]	; (800aaf0 <HAL_RCC_OscConfig+0xa60>)
 800a87e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800a882:	f003 0302 	and.w	r3, r3, #2
 800a886:	2b00      	cmp	r3, #0
 800a888:	d0e8      	beq.n	800a85c <HAL_RCC_OscConfig+0x7cc>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	689b      	ldr	r3, [r3, #8]
 800a88e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a892:	2b00      	cmp	r3, #0
 800a894:	d01b      	beq.n	800a8ce <HAL_RCC_OscConfig+0x83e>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800a896:	4b96      	ldr	r3, [pc, #600]	; (800aaf0 <HAL_RCC_OscConfig+0xa60>)
 800a898:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800a89c:	4a94      	ldr	r2, [pc, #592]	; (800aaf0 <HAL_RCC_OscConfig+0xa60>)
 800a89e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a8a2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800a8a6:	e00a      	b.n	800a8be <HAL_RCC_OscConfig+0x82e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a8a8:	f7fa ffe2 	bl	8005870 <HAL_GetTick>
 800a8ac:	4602      	mov	r2, r0
 800a8ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8b0:	1ad3      	subs	r3, r2, r3
 800a8b2:	f241 3288 	movw	r2, #5000	; 0x1388
 800a8b6:	4293      	cmp	r3, r2
 800a8b8:	d901      	bls.n	800a8be <HAL_RCC_OscConfig+0x82e>
          {
            return HAL_TIMEOUT;
 800a8ba:	2303      	movs	r3, #3
 800a8bc:	e2b8      	b.n	800ae30 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800a8be:	4b8c      	ldr	r3, [pc, #560]	; (800aaf0 <HAL_RCC_OscConfig+0xa60>)
 800a8c0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800a8c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a8c8:	2b00      	cmp	r3, #0
 800a8ca:	d0ed      	beq.n	800a8a8 <HAL_RCC_OscConfig+0x818>
 800a8cc:	e053      	b.n	800a976 <HAL_RCC_OscConfig+0x8e6>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800a8ce:	4b88      	ldr	r3, [pc, #544]	; (800aaf0 <HAL_RCC_OscConfig+0xa60>)
 800a8d0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800a8d4:	4a86      	ldr	r2, [pc, #536]	; (800aaf0 <HAL_RCC_OscConfig+0xa60>)
 800a8d6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a8da:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800a8de:	e00a      	b.n	800a8f6 <HAL_RCC_OscConfig+0x866>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a8e0:	f7fa ffc6 	bl	8005870 <HAL_GetTick>
 800a8e4:	4602      	mov	r2, r0
 800a8e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8e8:	1ad3      	subs	r3, r2, r3
 800a8ea:	f241 3288 	movw	r2, #5000	; 0x1388
 800a8ee:	4293      	cmp	r3, r2
 800a8f0:	d901      	bls.n	800a8f6 <HAL_RCC_OscConfig+0x866>
          {
            return HAL_TIMEOUT;
 800a8f2:	2303      	movs	r3, #3
 800a8f4:	e29c      	b.n	800ae30 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800a8f6:	4b7e      	ldr	r3, [pc, #504]	; (800aaf0 <HAL_RCC_OscConfig+0xa60>)
 800a8f8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800a8fc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a900:	2b00      	cmp	r3, #0
 800a902:	d1ed      	bne.n	800a8e0 <HAL_RCC_OscConfig+0x850>
 800a904:	e037      	b.n	800a976 <HAL_RCC_OscConfig+0x8e6>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 800a906:	f7fa ffb3 	bl	8005870 <HAL_GetTick>
 800a90a:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800a90c:	e00a      	b.n	800a924 <HAL_RCC_OscConfig+0x894>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a90e:	f7fa ffaf 	bl	8005870 <HAL_GetTick>
 800a912:	4602      	mov	r2, r0
 800a914:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a916:	1ad3      	subs	r3, r2, r3
 800a918:	f241 3288 	movw	r2, #5000	; 0x1388
 800a91c:	4293      	cmp	r3, r2
 800a91e:	d901      	bls.n	800a924 <HAL_RCC_OscConfig+0x894>
        {
          return HAL_TIMEOUT;
 800a920:	2303      	movs	r3, #3
 800a922:	e285      	b.n	800ae30 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800a924:	4b72      	ldr	r3, [pc, #456]	; (800aaf0 <HAL_RCC_OscConfig+0xa60>)
 800a926:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800a92a:	f003 0302 	and.w	r3, r3, #2
 800a92e:	2b00      	cmp	r3, #0
 800a930:	d1ed      	bne.n	800a90e <HAL_RCC_OscConfig+0x87e>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 800a932:	4b6f      	ldr	r3, [pc, #444]	; (800aaf0 <HAL_RCC_OscConfig+0xa60>)
 800a934:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800a938:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a93c:	2b00      	cmp	r3, #0
 800a93e:	d01a      	beq.n	800a976 <HAL_RCC_OscConfig+0x8e6>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800a940:	4b6b      	ldr	r3, [pc, #428]	; (800aaf0 <HAL_RCC_OscConfig+0xa60>)
 800a942:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800a946:	4a6a      	ldr	r2, [pc, #424]	; (800aaf0 <HAL_RCC_OscConfig+0xa60>)
 800a948:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a94c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800a950:	e00a      	b.n	800a968 <HAL_RCC_OscConfig+0x8d8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a952:	f7fa ff8d 	bl	8005870 <HAL_GetTick>
 800a956:	4602      	mov	r2, r0
 800a958:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a95a:	1ad3      	subs	r3, r2, r3
 800a95c:	f241 3288 	movw	r2, #5000	; 0x1388
 800a960:	4293      	cmp	r3, r2
 800a962:	d901      	bls.n	800a968 <HAL_RCC_OscConfig+0x8d8>
          {
            return HAL_TIMEOUT;
 800a964:	2303      	movs	r3, #3
 800a966:	e263      	b.n	800ae30 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800a968:	4b61      	ldr	r3, [pc, #388]	; (800aaf0 <HAL_RCC_OscConfig+0xa60>)
 800a96a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800a96e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a972:	2b00      	cmp	r3, #0
 800a974:	d1ed      	bne.n	800a952 <HAL_RCC_OscConfig+0x8c2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800a976:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800a97a:	2b01      	cmp	r3, #1
 800a97c:	d107      	bne.n	800a98e <HAL_RCC_OscConfig+0x8fe>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a97e:	4b5c      	ldr	r3, [pc, #368]	; (800aaf0 <HAL_RCC_OscConfig+0xa60>)
 800a980:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a984:	4a5a      	ldr	r2, [pc, #360]	; (800aaf0 <HAL_RCC_OscConfig+0xa60>)
 800a986:	f023 0304 	bic.w	r3, r3, #4
 800a98a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	681b      	ldr	r3, [r3, #0]
 800a992:	f003 0320 	and.w	r3, r3, #32
 800a996:	2b00      	cmp	r3, #0
 800a998:	d036      	beq.n	800aa08 <HAL_RCC_OscConfig+0x978>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a99e:	2b00      	cmp	r3, #0
 800a9a0:	d019      	beq.n	800a9d6 <HAL_RCC_OscConfig+0x946>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 800a9a2:	4b53      	ldr	r3, [pc, #332]	; (800aaf0 <HAL_RCC_OscConfig+0xa60>)
 800a9a4:	681b      	ldr	r3, [r3, #0]
 800a9a6:	4a52      	ldr	r2, [pc, #328]	; (800aaf0 <HAL_RCC_OscConfig+0xa60>)
 800a9a8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800a9ac:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800a9ae:	f7fa ff5f 	bl	8005870 <HAL_GetTick>
 800a9b2:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800a9b4:	e008      	b.n	800a9c8 <HAL_RCC_OscConfig+0x938>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800a9b6:	f7fa ff5b 	bl	8005870 <HAL_GetTick>
 800a9ba:	4602      	mov	r2, r0
 800a9bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9be:	1ad3      	subs	r3, r2, r3
 800a9c0:	2b02      	cmp	r3, #2
 800a9c2:	d901      	bls.n	800a9c8 <HAL_RCC_OscConfig+0x938>
        {
          return HAL_TIMEOUT;
 800a9c4:	2303      	movs	r3, #3
 800a9c6:	e233      	b.n	800ae30 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800a9c8:	4b49      	ldr	r3, [pc, #292]	; (800aaf0 <HAL_RCC_OscConfig+0xa60>)
 800a9ca:	681b      	ldr	r3, [r3, #0]
 800a9cc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a9d0:	2b00      	cmp	r3, #0
 800a9d2:	d0f0      	beq.n	800a9b6 <HAL_RCC_OscConfig+0x926>
 800a9d4:	e018      	b.n	800aa08 <HAL_RCC_OscConfig+0x978>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 800a9d6:	4b46      	ldr	r3, [pc, #280]	; (800aaf0 <HAL_RCC_OscConfig+0xa60>)
 800a9d8:	681b      	ldr	r3, [r3, #0]
 800a9da:	4a45      	ldr	r2, [pc, #276]	; (800aaf0 <HAL_RCC_OscConfig+0xa60>)
 800a9dc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a9e0:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800a9e2:	f7fa ff45 	bl	8005870 <HAL_GetTick>
 800a9e6:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800a9e8:	e008      	b.n	800a9fc <HAL_RCC_OscConfig+0x96c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800a9ea:	f7fa ff41 	bl	8005870 <HAL_GetTick>
 800a9ee:	4602      	mov	r2, r0
 800a9f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9f2:	1ad3      	subs	r3, r2, r3
 800a9f4:	2b02      	cmp	r3, #2
 800a9f6:	d901      	bls.n	800a9fc <HAL_RCC_OscConfig+0x96c>
        {
          return HAL_TIMEOUT;
 800a9f8:	2303      	movs	r3, #3
 800a9fa:	e219      	b.n	800ae30 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800a9fc:	4b3c      	ldr	r3, [pc, #240]	; (800aaf0 <HAL_RCC_OscConfig+0xa60>)
 800a9fe:	681b      	ldr	r3, [r3, #0]
 800aa00:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800aa04:	2b00      	cmp	r3, #0
 800aa06:	d1f0      	bne.n	800a9ea <HAL_RCC_OscConfig+0x95a>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	681b      	ldr	r3, [r3, #0]
 800aa0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aa10:	2b00      	cmp	r3, #0
 800aa12:	d036      	beq.n	800aa82 <HAL_RCC_OscConfig+0x9f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa18:	2b00      	cmp	r3, #0
 800aa1a:	d019      	beq.n	800aa50 <HAL_RCC_OscConfig+0x9c0>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 800aa1c:	4b34      	ldr	r3, [pc, #208]	; (800aaf0 <HAL_RCC_OscConfig+0xa60>)
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	4a33      	ldr	r2, [pc, #204]	; (800aaf0 <HAL_RCC_OscConfig+0xa60>)
 800aa22:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800aa26:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800aa28:	f7fa ff22 	bl	8005870 <HAL_GetTick>
 800aa2c:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 800aa2e:	e008      	b.n	800aa42 <HAL_RCC_OscConfig+0x9b2>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 800aa30:	f7fa ff1e 	bl	8005870 <HAL_GetTick>
 800aa34:	4602      	mov	r2, r0
 800aa36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa38:	1ad3      	subs	r3, r2, r3
 800aa3a:	2b02      	cmp	r3, #2
 800aa3c:	d901      	bls.n	800aa42 <HAL_RCC_OscConfig+0x9b2>
        {
          return HAL_TIMEOUT;
 800aa3e:	2303      	movs	r3, #3
 800aa40:	e1f6      	b.n	800ae30 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 800aa42:	4b2b      	ldr	r3, [pc, #172]	; (800aaf0 <HAL_RCC_OscConfig+0xa60>)
 800aa44:	681b      	ldr	r3, [r3, #0]
 800aa46:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800aa4a:	2b00      	cmp	r3, #0
 800aa4c:	d0f0      	beq.n	800aa30 <HAL_RCC_OscConfig+0x9a0>
 800aa4e:	e018      	b.n	800aa82 <HAL_RCC_OscConfig+0x9f2>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 800aa50:	4b27      	ldr	r3, [pc, #156]	; (800aaf0 <HAL_RCC_OscConfig+0xa60>)
 800aa52:	681b      	ldr	r3, [r3, #0]
 800aa54:	4a26      	ldr	r2, [pc, #152]	; (800aaf0 <HAL_RCC_OscConfig+0xa60>)
 800aa56:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800aa5a:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800aa5c:	f7fa ff08 	bl	8005870 <HAL_GetTick>
 800aa60:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 800aa62:	e008      	b.n	800aa76 <HAL_RCC_OscConfig+0x9e6>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 800aa64:	f7fa ff04 	bl	8005870 <HAL_GetTick>
 800aa68:	4602      	mov	r2, r0
 800aa6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa6c:	1ad3      	subs	r3, r2, r3
 800aa6e:	2b02      	cmp	r3, #2
 800aa70:	d901      	bls.n	800aa76 <HAL_RCC_OscConfig+0x9e6>
        {
          return HAL_TIMEOUT;
 800aa72:	2303      	movs	r3, #3
 800aa74:	e1dc      	b.n	800ae30 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 800aa76:	4b1e      	ldr	r3, [pc, #120]	; (800aaf0 <HAL_RCC_OscConfig+0xa60>)
 800aa78:	681b      	ldr	r3, [r3, #0]
 800aa7a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800aa7e:	2b00      	cmp	r3, #0
 800aa80:	d1f0      	bne.n	800aa64 <HAL_RCC_OscConfig+0x9d4>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	681b      	ldr	r3, [r3, #0]
 800aa86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aa8a:	2b00      	cmp	r3, #0
 800aa8c:	d07f      	beq.n	800ab8e <HAL_RCC_OscConfig+0xafe>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aa92:	2b00      	cmp	r3, #0
 800aa94:	d062      	beq.n	800ab5c <HAL_RCC_OscConfig+0xacc>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 800aa96:	4b16      	ldr	r3, [pc, #88]	; (800aaf0 <HAL_RCC_OscConfig+0xa60>)
 800aa98:	689b      	ldr	r3, [r3, #8]
 800aa9a:	4a15      	ldr	r2, [pc, #84]	; (800aaf0 <HAL_RCC_OscConfig+0xa60>)
 800aa9c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800aaa0:	6093      	str	r3, [r2, #8]
 800aaa2:	4b13      	ldr	r3, [pc, #76]	; (800aaf0 <HAL_RCC_OscConfig+0xa60>)
 800aaa4:	689b      	ldr	r3, [r3, #8]
 800aaa6:	f023 6270 	bic.w	r2, r3, #251658240	; 0xf000000
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aaae:	4910      	ldr	r1, [pc, #64]	; (800aaf0 <HAL_RCC_OscConfig+0xa60>)
 800aab0:	4313      	orrs	r3, r2
 800aab2:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aab8:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 800aabc:	d309      	bcc.n	800aad2 <HAL_RCC_OscConfig+0xa42>
 800aabe:	4b0c      	ldr	r3, [pc, #48]	; (800aaf0 <HAL_RCC_OscConfig+0xa60>)
 800aac0:	68db      	ldr	r3, [r3, #12]
 800aac2:	f023 021f 	bic.w	r2, r3, #31
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	6a1b      	ldr	r3, [r3, #32]
 800aaca:	4909      	ldr	r1, [pc, #36]	; (800aaf0 <HAL_RCC_OscConfig+0xa60>)
 800aacc:	4313      	orrs	r3, r2
 800aace:	60cb      	str	r3, [r1, #12]
 800aad0:	e02a      	b.n	800ab28 <HAL_RCC_OscConfig+0xa98>
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aad6:	2b00      	cmp	r3, #0
 800aad8:	da0c      	bge.n	800aaf4 <HAL_RCC_OscConfig+0xa64>
 800aada:	4b05      	ldr	r3, [pc, #20]	; (800aaf0 <HAL_RCC_OscConfig+0xa60>)
 800aadc:	68db      	ldr	r3, [r3, #12]
 800aade:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	6a1b      	ldr	r3, [r3, #32]
 800aae6:	015b      	lsls	r3, r3, #5
 800aae8:	4901      	ldr	r1, [pc, #4]	; (800aaf0 <HAL_RCC_OscConfig+0xa60>)
 800aaea:	4313      	orrs	r3, r2
 800aaec:	60cb      	str	r3, [r1, #12]
 800aaee:	e01b      	b.n	800ab28 <HAL_RCC_OscConfig+0xa98>
 800aaf0:	46020c00 	.word	0x46020c00
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aaf8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aafc:	d30a      	bcc.n	800ab14 <HAL_RCC_OscConfig+0xa84>
 800aafe:	4ba5      	ldr	r3, [pc, #660]	; (800ad94 <HAL_RCC_OscConfig+0xd04>)
 800ab00:	68db      	ldr	r3, [r3, #12]
 800ab02:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	6a1b      	ldr	r3, [r3, #32]
 800ab0a:	029b      	lsls	r3, r3, #10
 800ab0c:	49a1      	ldr	r1, [pc, #644]	; (800ad94 <HAL_RCC_OscConfig+0xd04>)
 800ab0e:	4313      	orrs	r3, r2
 800ab10:	60cb      	str	r3, [r1, #12]
 800ab12:	e009      	b.n	800ab28 <HAL_RCC_OscConfig+0xa98>
 800ab14:	4b9f      	ldr	r3, [pc, #636]	; (800ad94 <HAL_RCC_OscConfig+0xd04>)
 800ab16:	68db      	ldr	r3, [r3, #12]
 800ab18:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	6a1b      	ldr	r3, [r3, #32]
 800ab20:	03db      	lsls	r3, r3, #15
 800ab22:	499c      	ldr	r1, [pc, #624]	; (800ad94 <HAL_RCC_OscConfig+0xd04>)
 800ab24:	4313      	orrs	r3, r2
 800ab26:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 800ab28:	4b9a      	ldr	r3, [pc, #616]	; (800ad94 <HAL_RCC_OscConfig+0xd04>)
 800ab2a:	681b      	ldr	r3, [r3, #0]
 800ab2c:	4a99      	ldr	r2, [pc, #612]	; (800ad94 <HAL_RCC_OscConfig+0xd04>)
 800ab2e:	f043 0310 	orr.w	r3, r3, #16
 800ab32:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800ab34:	f7fa fe9c 	bl	8005870 <HAL_GetTick>
 800ab38:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 800ab3a:	e008      	b.n	800ab4e <HAL_RCC_OscConfig+0xabe>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 800ab3c:	f7fa fe98 	bl	8005870 <HAL_GetTick>
 800ab40:	4602      	mov	r2, r0
 800ab42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab44:	1ad3      	subs	r3, r2, r3
 800ab46:	2b02      	cmp	r3, #2
 800ab48:	d901      	bls.n	800ab4e <HAL_RCC_OscConfig+0xabe>
        {
          return HAL_TIMEOUT;
 800ab4a:	2303      	movs	r3, #3
 800ab4c:	e170      	b.n	800ae30 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 800ab4e:	4b91      	ldr	r3, [pc, #580]	; (800ad94 <HAL_RCC_OscConfig+0xd04>)
 800ab50:	681b      	ldr	r3, [r3, #0]
 800ab52:	f003 0320 	and.w	r3, r3, #32
 800ab56:	2b00      	cmp	r3, #0
 800ab58:	d0f0      	beq.n	800ab3c <HAL_RCC_OscConfig+0xaac>
 800ab5a:	e018      	b.n	800ab8e <HAL_RCC_OscConfig+0xafe>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 800ab5c:	4b8d      	ldr	r3, [pc, #564]	; (800ad94 <HAL_RCC_OscConfig+0xd04>)
 800ab5e:	681b      	ldr	r3, [r3, #0]
 800ab60:	4a8c      	ldr	r2, [pc, #560]	; (800ad94 <HAL_RCC_OscConfig+0xd04>)
 800ab62:	f023 0310 	bic.w	r3, r3, #16
 800ab66:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800ab68:	f7fa fe82 	bl	8005870 <HAL_GetTick>
 800ab6c:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 800ab6e:	e008      	b.n	800ab82 <HAL_RCC_OscConfig+0xaf2>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 800ab70:	f7fa fe7e 	bl	8005870 <HAL_GetTick>
 800ab74:	4602      	mov	r2, r0
 800ab76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab78:	1ad3      	subs	r3, r2, r3
 800ab7a:	2b02      	cmp	r3, #2
 800ab7c:	d901      	bls.n	800ab82 <HAL_RCC_OscConfig+0xaf2>
        {
          return HAL_TIMEOUT;
 800ab7e:	2303      	movs	r3, #3
 800ab80:	e156      	b.n	800ae30 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 800ab82:	4b84      	ldr	r3, [pc, #528]	; (800ad94 <HAL_RCC_OscConfig+0xd04>)
 800ab84:	681b      	ldr	r3, [r3, #0]
 800ab86:	f003 0320 	and.w	r3, r3, #32
 800ab8a:	2b00      	cmp	r3, #0
 800ab8c:	d1f0      	bne.n	800ab70 <HAL_RCC_OscConfig+0xae0>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab92:	2b00      	cmp	r3, #0
 800ab94:	f000 814b 	beq.w	800ae2e <HAL_RCC_OscConfig+0xd9e>
  {
    FlagStatus  pwrclkchanged = RESET;
 800ab98:	2300      	movs	r3, #0
 800ab9a:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800ab9e:	4b7d      	ldr	r3, [pc, #500]	; (800ad94 <HAL_RCC_OscConfig+0xd04>)
 800aba0:	69db      	ldr	r3, [r3, #28]
 800aba2:	f003 030c 	and.w	r3, r3, #12
 800aba6:	2b0c      	cmp	r3, #12
 800aba8:	f000 80fa 	beq.w	800ada0 <HAL_RCC_OscConfig+0xd10>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800abb0:	2b02      	cmp	r3, #2
 800abb2:	f040 80cc 	bne.w	800ad4e <HAL_RCC_OscConfig+0xcbe>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 800abb6:	4b77      	ldr	r3, [pc, #476]	; (800ad94 <HAL_RCC_OscConfig+0xd04>)
 800abb8:	681b      	ldr	r3, [r3, #0]
 800abba:	4a76      	ldr	r2, [pc, #472]	; (800ad94 <HAL_RCC_OscConfig+0xd04>)
 800abbc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800abc0:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800abc2:	f7fa fe55 	bl	8005870 <HAL_GetTick>
 800abc6:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800abc8:	e008      	b.n	800abdc <HAL_RCC_OscConfig+0xb4c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800abca:	f7fa fe51 	bl	8005870 <HAL_GetTick>
 800abce:	4602      	mov	r2, r0
 800abd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abd2:	1ad3      	subs	r3, r2, r3
 800abd4:	2b02      	cmp	r3, #2
 800abd6:	d901      	bls.n	800abdc <HAL_RCC_OscConfig+0xb4c>
          {
            return HAL_TIMEOUT;
 800abd8:	2303      	movs	r3, #3
 800abda:	e129      	b.n	800ae30 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800abdc:	4b6d      	ldr	r3, [pc, #436]	; (800ad94 <HAL_RCC_OscConfig+0xd04>)
 800abde:	681b      	ldr	r3, [r3, #0]
 800abe0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800abe4:	2b00      	cmp	r3, #0
 800abe6:	d1f0      	bne.n	800abca <HAL_RCC_OscConfig+0xb3a>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800abe8:	4b6a      	ldr	r3, [pc, #424]	; (800ad94 <HAL_RCC_OscConfig+0xd04>)
 800abea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800abee:	f003 0304 	and.w	r3, r3, #4
 800abf2:	2b00      	cmp	r3, #0
 800abf4:	d111      	bne.n	800ac1a <HAL_RCC_OscConfig+0xb8a>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 800abf6:	4b67      	ldr	r3, [pc, #412]	; (800ad94 <HAL_RCC_OscConfig+0xd04>)
 800abf8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800abfc:	4a65      	ldr	r2, [pc, #404]	; (800ad94 <HAL_RCC_OscConfig+0xd04>)
 800abfe:	f043 0304 	orr.w	r3, r3, #4
 800ac02:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800ac06:	4b63      	ldr	r3, [pc, #396]	; (800ad94 <HAL_RCC_OscConfig+0xd04>)
 800ac08:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800ac0c:	f003 0304 	and.w	r3, r3, #4
 800ac10:	60fb      	str	r3, [r7, #12]
 800ac12:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 800ac14:	2301      	movs	r3, #1
 800ac16:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 800ac1a:	4b5f      	ldr	r3, [pc, #380]	; (800ad98 <HAL_RCC_OscConfig+0xd08>)
 800ac1c:	68db      	ldr	r3, [r3, #12]
 800ac1e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800ac22:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800ac26:	d102      	bne.n	800ac2e <HAL_RCC_OscConfig+0xb9e>
        {
          pwrboosten = SET;
 800ac28:	2301      	movs	r3, #1
 800ac2a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 800ac2e:	4b5a      	ldr	r3, [pc, #360]	; (800ad98 <HAL_RCC_OscConfig+0xd08>)
 800ac30:	68db      	ldr	r3, [r3, #12]
 800ac32:	4a59      	ldr	r2, [pc, #356]	; (800ad98 <HAL_RCC_OscConfig+0xd08>)
 800ac34:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800ac38:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 800ac3a:	4b56      	ldr	r3, [pc, #344]	; (800ad94 <HAL_RCC_OscConfig+0xd04>)
 800ac3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac3e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800ac42:	f023 0303 	bic.w	r3, r3, #3
 800ac46:	687a      	ldr	r2, [r7, #4]
 800ac48:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800ac4a:	687a      	ldr	r2, [r7, #4]
 800ac4c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800ac4e:	3a01      	subs	r2, #1
 800ac50:	0212      	lsls	r2, r2, #8
 800ac52:	4311      	orrs	r1, r2
 800ac54:	687a      	ldr	r2, [r7, #4]
 800ac56:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800ac58:	430a      	orrs	r2, r1
 800ac5a:	494e      	ldr	r1, [pc, #312]	; (800ad94 <HAL_RCC_OscConfig+0xd04>)
 800ac5c:	4313      	orrs	r3, r2
 800ac5e:	628b      	str	r3, [r1, #40]	; 0x28
 800ac60:	4b4c      	ldr	r3, [pc, #304]	; (800ad94 <HAL_RCC_OscConfig+0xd04>)
 800ac62:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ac64:	4b4d      	ldr	r3, [pc, #308]	; (800ad9c <HAL_RCC_OscConfig+0xd0c>)
 800ac66:	4013      	ands	r3, r2
 800ac68:	687a      	ldr	r2, [r7, #4]
 800ac6a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800ac6c:	3a01      	subs	r2, #1
 800ac6e:	f3c2 0108 	ubfx	r1, r2, #0, #9
 800ac72:	687a      	ldr	r2, [r7, #4]
 800ac74:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800ac76:	3a01      	subs	r2, #1
 800ac78:	0252      	lsls	r2, r2, #9
 800ac7a:	b292      	uxth	r2, r2
 800ac7c:	4311      	orrs	r1, r2
 800ac7e:	687a      	ldr	r2, [r7, #4]
 800ac80:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800ac82:	3a01      	subs	r2, #1
 800ac84:	0412      	lsls	r2, r2, #16
 800ac86:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 800ac8a:	4311      	orrs	r1, r2
 800ac8c:	687a      	ldr	r2, [r7, #4]
 800ac8e:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800ac90:	3a01      	subs	r2, #1
 800ac92:	0612      	lsls	r2, r2, #24
 800ac94:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 800ac98:	430a      	orrs	r2, r1
 800ac9a:	493e      	ldr	r1, [pc, #248]	; (800ad94 <HAL_RCC_OscConfig+0xd04>)
 800ac9c:	4313      	orrs	r3, r2
 800ac9e:	634b      	str	r3, [r1, #52]	; 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLLFRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLLFRACN_DISABLE();
 800aca0:	4b3c      	ldr	r3, [pc, #240]	; (800ad94 <HAL_RCC_OscConfig+0xd04>)
 800aca2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aca4:	4a3b      	ldr	r2, [pc, #236]	; (800ad94 <HAL_RCC_OscConfig+0xd04>)
 800aca6:	f023 0310 	bic.w	r3, r3, #16
 800acaa:	6293      	str	r3, [r2, #40]	; 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 800acac:	4b39      	ldr	r3, [pc, #228]	; (800ad94 <HAL_RCC_OscConfig+0xd04>)
 800acae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800acb0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800acb4:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800acb8:	687a      	ldr	r2, [r7, #4]
 800acba:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800acbc:	00d2      	lsls	r2, r2, #3
 800acbe:	4935      	ldr	r1, [pc, #212]	; (800ad94 <HAL_RCC_OscConfig+0xd04>)
 800acc0:	4313      	orrs	r3, r2
 800acc2:	638b      	str	r3, [r1, #56]	; 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLLFRACN_ENABLE();
 800acc4:	4b33      	ldr	r3, [pc, #204]	; (800ad94 <HAL_RCC_OscConfig+0xd04>)
 800acc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800acc8:	4a32      	ldr	r2, [pc, #200]	; (800ad94 <HAL_RCC_OscConfig+0xd04>)
 800acca:	f043 0310 	orr.w	r3, r3, #16
 800acce:	6293      	str	r3, [r2, #40]	; 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 800acd0:	4b30      	ldr	r3, [pc, #192]	; (800ad94 <HAL_RCC_OscConfig+0xd04>)
 800acd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800acd4:	f023 020c 	bic.w	r2, r3, #12
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800acdc:	492d      	ldr	r1, [pc, #180]	; (800ad94 <HAL_RCC_OscConfig+0xd04>)
 800acde:	4313      	orrs	r3, r2
 800ace0:	628b      	str	r3, [r1, #40]	; 0x28

        if (pwrboosten == SET)
 800ace2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ace6:	2b01      	cmp	r3, #1
 800ace8:	d105      	bne.n	800acf6 <HAL_RCC_OscConfig+0xc66>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 800acea:	4b2b      	ldr	r3, [pc, #172]	; (800ad98 <HAL_RCC_OscConfig+0xd08>)
 800acec:	68db      	ldr	r3, [r3, #12]
 800acee:	4a2a      	ldr	r2, [pc, #168]	; (800ad98 <HAL_RCC_OscConfig+0xd08>)
 800acf0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800acf4:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 800acf6:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800acfa:	2b01      	cmp	r3, #1
 800acfc:	d107      	bne.n	800ad0e <HAL_RCC_OscConfig+0xc7e>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 800acfe:	4b25      	ldr	r3, [pc, #148]	; (800ad94 <HAL_RCC_OscConfig+0xd04>)
 800ad00:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800ad04:	4a23      	ldr	r2, [pc, #140]	; (800ad94 <HAL_RCC_OscConfig+0xd04>)
 800ad06:	f023 0304 	bic.w	r3, r3, #4
 800ad0a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800ad0e:	4b21      	ldr	r3, [pc, #132]	; (800ad94 <HAL_RCC_OscConfig+0xd04>)
 800ad10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ad12:	4a20      	ldr	r2, [pc, #128]	; (800ad94 <HAL_RCC_OscConfig+0xd04>)
 800ad14:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800ad18:	6293      	str	r3, [r2, #40]	; 0x28

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 800ad1a:	4b1e      	ldr	r3, [pc, #120]	; (800ad94 <HAL_RCC_OscConfig+0xd04>)
 800ad1c:	681b      	ldr	r3, [r3, #0]
 800ad1e:	4a1d      	ldr	r2, [pc, #116]	; (800ad94 <HAL_RCC_OscConfig+0xd04>)
 800ad20:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800ad24:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800ad26:	f7fa fda3 	bl	8005870 <HAL_GetTick>
 800ad2a:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800ad2c:	e008      	b.n	800ad40 <HAL_RCC_OscConfig+0xcb0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ad2e:	f7fa fd9f 	bl	8005870 <HAL_GetTick>
 800ad32:	4602      	mov	r2, r0
 800ad34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad36:	1ad3      	subs	r3, r2, r3
 800ad38:	2b02      	cmp	r3, #2
 800ad3a:	d901      	bls.n	800ad40 <HAL_RCC_OscConfig+0xcb0>
          {
            return HAL_TIMEOUT;
 800ad3c:	2303      	movs	r3, #3
 800ad3e:	e077      	b.n	800ae30 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800ad40:	4b14      	ldr	r3, [pc, #80]	; (800ad94 <HAL_RCC_OscConfig+0xd04>)
 800ad42:	681b      	ldr	r3, [r3, #0]
 800ad44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ad48:	2b00      	cmp	r3, #0
 800ad4a:	d0f0      	beq.n	800ad2e <HAL_RCC_OscConfig+0xc9e>
 800ad4c:	e06f      	b.n	800ae2e <HAL_RCC_OscConfig+0xd9e>
        }
      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 800ad4e:	4b11      	ldr	r3, [pc, #68]	; (800ad94 <HAL_RCC_OscConfig+0xd04>)
 800ad50:	681b      	ldr	r3, [r3, #0]
 800ad52:	4a10      	ldr	r2, [pc, #64]	; (800ad94 <HAL_RCC_OscConfig+0xd04>)
 800ad54:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800ad58:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800ad5a:	f7fa fd89 	bl	8005870 <HAL_GetTick>
 800ad5e:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800ad60:	e008      	b.n	800ad74 <HAL_RCC_OscConfig+0xce4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ad62:	f7fa fd85 	bl	8005870 <HAL_GetTick>
 800ad66:	4602      	mov	r2, r0
 800ad68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad6a:	1ad3      	subs	r3, r2, r3
 800ad6c:	2b02      	cmp	r3, #2
 800ad6e:	d901      	bls.n	800ad74 <HAL_RCC_OscConfig+0xce4>
          {
            return HAL_TIMEOUT;
 800ad70:	2303      	movs	r3, #3
 800ad72:	e05d      	b.n	800ae30 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800ad74:	4b07      	ldr	r3, [pc, #28]	; (800ad94 <HAL_RCC_OscConfig+0xd04>)
 800ad76:	681b      	ldr	r3, [r3, #0]
 800ad78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ad7c:	2b00      	cmp	r3, #0
 800ad7e:	d1f0      	bne.n	800ad62 <HAL_RCC_OscConfig+0xcd2>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 800ad80:	4b04      	ldr	r3, [pc, #16]	; (800ad94 <HAL_RCC_OscConfig+0xd04>)
 800ad82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ad84:	4a03      	ldr	r2, [pc, #12]	; (800ad94 <HAL_RCC_OscConfig+0xd04>)
 800ad86:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 800ad8a:	f023 0303 	bic.w	r3, r3, #3
 800ad8e:	6293      	str	r3, [r2, #40]	; 0x28
 800ad90:	e04d      	b.n	800ae2e <HAL_RCC_OscConfig+0xd9e>
 800ad92:	bf00      	nop
 800ad94:	46020c00 	.word	0x46020c00
 800ad98:	46020800 	.word	0x46020800
 800ad9c:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 800ada0:	4b25      	ldr	r3, [pc, #148]	; (800ae38 <HAL_RCC_OscConfig+0xda8>)
 800ada2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ada4:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800ada6:	4b24      	ldr	r3, [pc, #144]	; (800ae38 <HAL_RCC_OscConfig+0xda8>)
 800ada8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800adaa:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800adb0:	2b01      	cmp	r3, #1
 800adb2:	d03a      	beq.n	800ae2a <HAL_RCC_OscConfig+0xd9a>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 800adb4:	69fb      	ldr	r3, [r7, #28]
 800adb6:	f003 0203 	and.w	r2, r3, #3
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800adbe:	429a      	cmp	r2, r3
 800adc0:	d133      	bne.n	800ae2a <HAL_RCC_OscConfig+0xd9a>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 800adc2:	69fb      	ldr	r3, [r7, #28]
 800adc4:	0a1b      	lsrs	r3, r3, #8
 800adc6:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800adce:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 800add0:	429a      	cmp	r2, r3
 800add2:	d12a      	bne.n	800ae2a <HAL_RCC_OscConfig+0xd9a>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) >> \
 800add4:	69fb      	ldr	r3, [r7, #28]
 800add6:	0b1b      	lsrs	r3, r3, #12
 800add8:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1MBOOST_Pos) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 800ade0:	429a      	cmp	r2, r3
 800ade2:	d122      	bne.n	800ae2a <HAL_RCC_OscConfig+0xd9a>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800ade4:	69bb      	ldr	r3, [r7, #24]
 800ade6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800adee:	3b01      	subs	r3, #1
            RCC_PLL1CFGR_PLL1MBOOST_Pos) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 800adf0:	429a      	cmp	r2, r3
 800adf2:	d11a      	bne.n	800ae2a <HAL_RCC_OscConfig+0xd9a>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 800adf4:	69bb      	ldr	r3, [r7, #24]
 800adf6:	0a5b      	lsrs	r3, r3, #9
 800adf8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ae00:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800ae02:	429a      	cmp	r2, r3
 800ae04:	d111      	bne.n	800ae2a <HAL_RCC_OscConfig+0xd9a>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 800ae06:	69bb      	ldr	r3, [r7, #24]
 800ae08:	0c1b      	lsrs	r3, r3, #16
 800ae0a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ae12:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800ae14:	429a      	cmp	r2, r3
 800ae16:	d108      	bne.n	800ae2a <HAL_RCC_OscConfig+0xd9a>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 800ae18:	69bb      	ldr	r3, [r7, #24]
 800ae1a:	0e1b      	lsrs	r3, r3, #24
 800ae1c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ae24:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800ae26:	429a      	cmp	r2, r3
 800ae28:	d001      	beq.n	800ae2e <HAL_RCC_OscConfig+0xd9e>
      {
        return HAL_ERROR;
 800ae2a:	2301      	movs	r3, #1
 800ae2c:	e000      	b.n	800ae30 <HAL_RCC_OscConfig+0xda0>
      }
    }
  }
  return HAL_OK;
 800ae2e:	2300      	movs	r3, #0
}
 800ae30:	4618      	mov	r0, r3
 800ae32:	3738      	adds	r7, #56	; 0x38
 800ae34:	46bd      	mov	sp, r7
 800ae36:	bd80      	pop	{r7, pc}
 800ae38:	46020c00 	.word	0x46020c00

0800ae3c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 800ae3c:	b580      	push	{r7, lr}
 800ae3e:	b086      	sub	sp, #24
 800ae40:	af00      	add	r7, sp, #0
 800ae42:	6078      	str	r0, [r7, #4]
 800ae44:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	2b00      	cmp	r3, #0
 800ae4a:	d101      	bne.n	800ae50 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800ae4c:	2301      	movs	r3, #1
 800ae4e:	e1d9      	b.n	800b204 <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800ae50:	4b9b      	ldr	r3, [pc, #620]	; (800b0c0 <HAL_RCC_ClockConfig+0x284>)
 800ae52:	681b      	ldr	r3, [r3, #0]
 800ae54:	f003 030f 	and.w	r3, r3, #15
 800ae58:	683a      	ldr	r2, [r7, #0]
 800ae5a:	429a      	cmp	r2, r3
 800ae5c:	d910      	bls.n	800ae80 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ae5e:	4b98      	ldr	r3, [pc, #608]	; (800b0c0 <HAL_RCC_ClockConfig+0x284>)
 800ae60:	681b      	ldr	r3, [r3, #0]
 800ae62:	f023 020f 	bic.w	r2, r3, #15
 800ae66:	4996      	ldr	r1, [pc, #600]	; (800b0c0 <HAL_RCC_ClockConfig+0x284>)
 800ae68:	683b      	ldr	r3, [r7, #0]
 800ae6a:	4313      	orrs	r3, r2
 800ae6c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800ae6e:	4b94      	ldr	r3, [pc, #592]	; (800b0c0 <HAL_RCC_ClockConfig+0x284>)
 800ae70:	681b      	ldr	r3, [r3, #0]
 800ae72:	f003 030f 	and.w	r3, r3, #15
 800ae76:	683a      	ldr	r2, [r7, #0]
 800ae78:	429a      	cmp	r2, r3
 800ae7a:	d001      	beq.n	800ae80 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800ae7c:	2301      	movs	r3, #1
 800ae7e:	e1c1      	b.n	800b204 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	681b      	ldr	r3, [r3, #0]
 800ae84:	f003 0310 	and.w	r3, r3, #16
 800ae88:	2b00      	cmp	r3, #0
 800ae8a:	d010      	beq.n	800aeae <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	695a      	ldr	r2, [r3, #20]
 800ae90:	4b8c      	ldr	r3, [pc, #560]	; (800b0c4 <HAL_RCC_ClockConfig+0x288>)
 800ae92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae94:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800ae98:	429a      	cmp	r2, r3
 800ae9a:	d908      	bls.n	800aeae <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 800ae9c:	4b89      	ldr	r3, [pc, #548]	; (800b0c4 <HAL_RCC_ClockConfig+0x288>)
 800ae9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aea0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	695b      	ldr	r3, [r3, #20]
 800aea8:	4986      	ldr	r1, [pc, #536]	; (800b0c4 <HAL_RCC_ClockConfig+0x288>)
 800aeaa:	4313      	orrs	r3, r2
 800aeac:	624b      	str	r3, [r1, #36]	; 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	681b      	ldr	r3, [r3, #0]
 800aeb2:	f003 0308 	and.w	r3, r3, #8
 800aeb6:	2b00      	cmp	r3, #0
 800aeb8:	d012      	beq.n	800aee0 <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	691a      	ldr	r2, [r3, #16]
 800aebe:	4b81      	ldr	r3, [pc, #516]	; (800b0c4 <HAL_RCC_ClockConfig+0x288>)
 800aec0:	6a1b      	ldr	r3, [r3, #32]
 800aec2:	091b      	lsrs	r3, r3, #4
 800aec4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800aec8:	429a      	cmp	r2, r3
 800aeca:	d909      	bls.n	800aee0 <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 800aecc:	4b7d      	ldr	r3, [pc, #500]	; (800b0c4 <HAL_RCC_ClockConfig+0x288>)
 800aece:	6a1b      	ldr	r3, [r3, #32]
 800aed0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	691b      	ldr	r3, [r3, #16]
 800aed8:	011b      	lsls	r3, r3, #4
 800aeda:	497a      	ldr	r1, [pc, #488]	; (800b0c4 <HAL_RCC_ClockConfig+0x288>)
 800aedc:	4313      	orrs	r3, r2
 800aede:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	681b      	ldr	r3, [r3, #0]
 800aee4:	f003 0304 	and.w	r3, r3, #4
 800aee8:	2b00      	cmp	r3, #0
 800aeea:	d010      	beq.n	800af0e <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	68da      	ldr	r2, [r3, #12]
 800aef0:	4b74      	ldr	r3, [pc, #464]	; (800b0c4 <HAL_RCC_ClockConfig+0x288>)
 800aef2:	6a1b      	ldr	r3, [r3, #32]
 800aef4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800aef8:	429a      	cmp	r2, r3
 800aefa:	d908      	bls.n	800af0e <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 800aefc:	4b71      	ldr	r3, [pc, #452]	; (800b0c4 <HAL_RCC_ClockConfig+0x288>)
 800aefe:	6a1b      	ldr	r3, [r3, #32]
 800af00:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	68db      	ldr	r3, [r3, #12]
 800af08:	496e      	ldr	r1, [pc, #440]	; (800b0c4 <HAL_RCC_ClockConfig+0x288>)
 800af0a:	4313      	orrs	r3, r2
 800af0c:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	681b      	ldr	r3, [r3, #0]
 800af12:	f003 0302 	and.w	r3, r3, #2
 800af16:	2b00      	cmp	r3, #0
 800af18:	d010      	beq.n	800af3c <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	689a      	ldr	r2, [r3, #8]
 800af1e:	4b69      	ldr	r3, [pc, #420]	; (800b0c4 <HAL_RCC_ClockConfig+0x288>)
 800af20:	6a1b      	ldr	r3, [r3, #32]
 800af22:	f003 030f 	and.w	r3, r3, #15
 800af26:	429a      	cmp	r2, r3
 800af28:	d908      	bls.n	800af3c <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 800af2a:	4b66      	ldr	r3, [pc, #408]	; (800b0c4 <HAL_RCC_ClockConfig+0x288>)
 800af2c:	6a1b      	ldr	r3, [r3, #32]
 800af2e:	f023 020f 	bic.w	r2, r3, #15
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	689b      	ldr	r3, [r3, #8]
 800af36:	4963      	ldr	r1, [pc, #396]	; (800b0c4 <HAL_RCC_ClockConfig+0x288>)
 800af38:	4313      	orrs	r3, r2
 800af3a:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	681b      	ldr	r3, [r3, #0]
 800af40:	f003 0301 	and.w	r3, r3, #1
 800af44:	2b00      	cmp	r3, #0
 800af46:	f000 80d2 	beq.w	800b0ee <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 800af4a:	2300      	movs	r3, #0
 800af4c:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	685b      	ldr	r3, [r3, #4]
 800af52:	2b03      	cmp	r3, #3
 800af54:	d143      	bne.n	800afde <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800af56:	4b5b      	ldr	r3, [pc, #364]	; (800b0c4 <HAL_RCC_ClockConfig+0x288>)
 800af58:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800af5c:	f003 0304 	and.w	r3, r3, #4
 800af60:	2b00      	cmp	r3, #0
 800af62:	d110      	bne.n	800af86 <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800af64:	4b57      	ldr	r3, [pc, #348]	; (800b0c4 <HAL_RCC_ClockConfig+0x288>)
 800af66:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800af6a:	4a56      	ldr	r2, [pc, #344]	; (800b0c4 <HAL_RCC_ClockConfig+0x288>)
 800af6c:	f043 0304 	orr.w	r3, r3, #4
 800af70:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800af74:	4b53      	ldr	r3, [pc, #332]	; (800b0c4 <HAL_RCC_ClockConfig+0x288>)
 800af76:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800af7a:	f003 0304 	and.w	r3, r3, #4
 800af7e:	60bb      	str	r3, [r7, #8]
 800af80:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 800af82:	2301      	movs	r3, #1
 800af84:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 800af86:	f7fa fc73 	bl	8005870 <HAL_GetTick>
 800af8a:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 800af8c:	4b4e      	ldr	r3, [pc, #312]	; (800b0c8 <HAL_RCC_ClockConfig+0x28c>)
 800af8e:	68db      	ldr	r3, [r3, #12]
 800af90:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800af94:	2b00      	cmp	r3, #0
 800af96:	d00f      	beq.n	800afb8 <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 800af98:	e008      	b.n	800afac <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 800af9a:	f7fa fc69 	bl	8005870 <HAL_GetTick>
 800af9e:	4602      	mov	r2, r0
 800afa0:	693b      	ldr	r3, [r7, #16]
 800afa2:	1ad3      	subs	r3, r2, r3
 800afa4:	2b02      	cmp	r3, #2
 800afa6:	d901      	bls.n	800afac <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 800afa8:	2303      	movs	r3, #3
 800afaa:	e12b      	b.n	800b204 <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 800afac:	4b46      	ldr	r3, [pc, #280]	; (800b0c8 <HAL_RCC_ClockConfig+0x28c>)
 800afae:	68db      	ldr	r3, [r3, #12]
 800afb0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800afb4:	2b00      	cmp	r3, #0
 800afb6:	d0f0      	beq.n	800af9a <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800afb8:	7dfb      	ldrb	r3, [r7, #23]
 800afba:	2b01      	cmp	r3, #1
 800afbc:	d107      	bne.n	800afce <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 800afbe:	4b41      	ldr	r3, [pc, #260]	; (800b0c4 <HAL_RCC_ClockConfig+0x288>)
 800afc0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800afc4:	4a3f      	ldr	r2, [pc, #252]	; (800b0c4 <HAL_RCC_ClockConfig+0x288>)
 800afc6:	f023 0304 	bic.w	r3, r3, #4
 800afca:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800afce:	4b3d      	ldr	r3, [pc, #244]	; (800b0c4 <HAL_RCC_ClockConfig+0x288>)
 800afd0:	681b      	ldr	r3, [r3, #0]
 800afd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800afd6:	2b00      	cmp	r3, #0
 800afd8:	d121      	bne.n	800b01e <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 800afda:	2301      	movs	r3, #1
 800afdc:	e112      	b.n	800b204 <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	685b      	ldr	r3, [r3, #4]
 800afe2:	2b02      	cmp	r3, #2
 800afe4:	d107      	bne.n	800aff6 <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800afe6:	4b37      	ldr	r3, [pc, #220]	; (800b0c4 <HAL_RCC_ClockConfig+0x288>)
 800afe8:	681b      	ldr	r3, [r3, #0]
 800afea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800afee:	2b00      	cmp	r3, #0
 800aff0:	d115      	bne.n	800b01e <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 800aff2:	2301      	movs	r3, #1
 800aff4:	e106      	b.n	800b204 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	685b      	ldr	r3, [r3, #4]
 800affa:	2b00      	cmp	r3, #0
 800affc:	d107      	bne.n	800b00e <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 800affe:	4b31      	ldr	r3, [pc, #196]	; (800b0c4 <HAL_RCC_ClockConfig+0x288>)
 800b000:	681b      	ldr	r3, [r3, #0]
 800b002:	f003 0304 	and.w	r3, r3, #4
 800b006:	2b00      	cmp	r3, #0
 800b008:	d109      	bne.n	800b01e <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 800b00a:	2301      	movs	r3, #1
 800b00c:	e0fa      	b.n	800b204 <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800b00e:	4b2d      	ldr	r3, [pc, #180]	; (800b0c4 <HAL_RCC_ClockConfig+0x288>)
 800b010:	681b      	ldr	r3, [r3, #0]
 800b012:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b016:	2b00      	cmp	r3, #0
 800b018:	d101      	bne.n	800b01e <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 800b01a:	2301      	movs	r3, #1
 800b01c:	e0f2      	b.n	800b204 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 800b01e:	4b29      	ldr	r3, [pc, #164]	; (800b0c4 <HAL_RCC_ClockConfig+0x288>)
 800b020:	69db      	ldr	r3, [r3, #28]
 800b022:	f023 0203 	bic.w	r2, r3, #3
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	685b      	ldr	r3, [r3, #4]
 800b02a:	4926      	ldr	r1, [pc, #152]	; (800b0c4 <HAL_RCC_ClockConfig+0x288>)
 800b02c:	4313      	orrs	r3, r2
 800b02e:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 800b030:	f7fa fc1e 	bl	8005870 <HAL_GetTick>
 800b034:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	685b      	ldr	r3, [r3, #4]
 800b03a:	2b03      	cmp	r3, #3
 800b03c:	d112      	bne.n	800b064 <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800b03e:	e00a      	b.n	800b056 <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b040:	f7fa fc16 	bl	8005870 <HAL_GetTick>
 800b044:	4602      	mov	r2, r0
 800b046:	693b      	ldr	r3, [r7, #16]
 800b048:	1ad3      	subs	r3, r2, r3
 800b04a:	f241 3288 	movw	r2, #5000	; 0x1388
 800b04e:	4293      	cmp	r3, r2
 800b050:	d901      	bls.n	800b056 <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 800b052:	2303      	movs	r3, #3
 800b054:	e0d6      	b.n	800b204 <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800b056:	4b1b      	ldr	r3, [pc, #108]	; (800b0c4 <HAL_RCC_ClockConfig+0x288>)
 800b058:	69db      	ldr	r3, [r3, #28]
 800b05a:	f003 030c 	and.w	r3, r3, #12
 800b05e:	2b0c      	cmp	r3, #12
 800b060:	d1ee      	bne.n	800b040 <HAL_RCC_ClockConfig+0x204>
 800b062:	e044      	b.n	800b0ee <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	685b      	ldr	r3, [r3, #4]
 800b068:	2b02      	cmp	r3, #2
 800b06a:	d112      	bne.n	800b092 <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800b06c:	e00a      	b.n	800b084 <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b06e:	f7fa fbff 	bl	8005870 <HAL_GetTick>
 800b072:	4602      	mov	r2, r0
 800b074:	693b      	ldr	r3, [r7, #16]
 800b076:	1ad3      	subs	r3, r2, r3
 800b078:	f241 3288 	movw	r2, #5000	; 0x1388
 800b07c:	4293      	cmp	r3, r2
 800b07e:	d901      	bls.n	800b084 <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 800b080:	2303      	movs	r3, #3
 800b082:	e0bf      	b.n	800b204 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800b084:	4b0f      	ldr	r3, [pc, #60]	; (800b0c4 <HAL_RCC_ClockConfig+0x288>)
 800b086:	69db      	ldr	r3, [r3, #28]
 800b088:	f003 030c 	and.w	r3, r3, #12
 800b08c:	2b08      	cmp	r3, #8
 800b08e:	d1ee      	bne.n	800b06e <HAL_RCC_ClockConfig+0x232>
 800b090:	e02d      	b.n	800b0ee <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	685b      	ldr	r3, [r3, #4]
 800b096:	2b00      	cmp	r3, #0
 800b098:	d123      	bne.n	800b0e2 <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800b09a:	e00a      	b.n	800b0b2 <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b09c:	f7fa fbe8 	bl	8005870 <HAL_GetTick>
 800b0a0:	4602      	mov	r2, r0
 800b0a2:	693b      	ldr	r3, [r7, #16]
 800b0a4:	1ad3      	subs	r3, r2, r3
 800b0a6:	f241 3288 	movw	r2, #5000	; 0x1388
 800b0aa:	4293      	cmp	r3, r2
 800b0ac:	d901      	bls.n	800b0b2 <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 800b0ae:	2303      	movs	r3, #3
 800b0b0:	e0a8      	b.n	800b204 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800b0b2:	4b04      	ldr	r3, [pc, #16]	; (800b0c4 <HAL_RCC_ClockConfig+0x288>)
 800b0b4:	69db      	ldr	r3, [r3, #28]
 800b0b6:	f003 030c 	and.w	r3, r3, #12
 800b0ba:	2b00      	cmp	r3, #0
 800b0bc:	d1ee      	bne.n	800b09c <HAL_RCC_ClockConfig+0x260>
 800b0be:	e016      	b.n	800b0ee <HAL_RCC_ClockConfig+0x2b2>
 800b0c0:	40022000 	.word	0x40022000
 800b0c4:	46020c00 	.word	0x46020c00
 800b0c8:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b0cc:	f7fa fbd0 	bl	8005870 <HAL_GetTick>
 800b0d0:	4602      	mov	r2, r0
 800b0d2:	693b      	ldr	r3, [r7, #16]
 800b0d4:	1ad3      	subs	r3, r2, r3
 800b0d6:	f241 3288 	movw	r2, #5000	; 0x1388
 800b0da:	4293      	cmp	r3, r2
 800b0dc:	d901      	bls.n	800b0e2 <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 800b0de:	2303      	movs	r3, #3
 800b0e0:	e090      	b.n	800b204 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800b0e2:	4b4a      	ldr	r3, [pc, #296]	; (800b20c <HAL_RCC_ClockConfig+0x3d0>)
 800b0e4:	69db      	ldr	r3, [r3, #28]
 800b0e6:	f003 030c 	and.w	r3, r3, #12
 800b0ea:	2b04      	cmp	r3, #4
 800b0ec:	d1ee      	bne.n	800b0cc <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	681b      	ldr	r3, [r3, #0]
 800b0f2:	f003 0302 	and.w	r3, r3, #2
 800b0f6:	2b00      	cmp	r3, #0
 800b0f8:	d010      	beq.n	800b11c <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	689a      	ldr	r2, [r3, #8]
 800b0fe:	4b43      	ldr	r3, [pc, #268]	; (800b20c <HAL_RCC_ClockConfig+0x3d0>)
 800b100:	6a1b      	ldr	r3, [r3, #32]
 800b102:	f003 030f 	and.w	r3, r3, #15
 800b106:	429a      	cmp	r2, r3
 800b108:	d208      	bcs.n	800b11c <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 800b10a:	4b40      	ldr	r3, [pc, #256]	; (800b20c <HAL_RCC_ClockConfig+0x3d0>)
 800b10c:	6a1b      	ldr	r3, [r3, #32]
 800b10e:	f023 020f 	bic.w	r2, r3, #15
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	689b      	ldr	r3, [r3, #8]
 800b116:	493d      	ldr	r1, [pc, #244]	; (800b20c <HAL_RCC_ClockConfig+0x3d0>)
 800b118:	4313      	orrs	r3, r2
 800b11a:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800b11c:	4b3c      	ldr	r3, [pc, #240]	; (800b210 <HAL_RCC_ClockConfig+0x3d4>)
 800b11e:	681b      	ldr	r3, [r3, #0]
 800b120:	f003 030f 	and.w	r3, r3, #15
 800b124:	683a      	ldr	r2, [r7, #0]
 800b126:	429a      	cmp	r2, r3
 800b128:	d210      	bcs.n	800b14c <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b12a:	4b39      	ldr	r3, [pc, #228]	; (800b210 <HAL_RCC_ClockConfig+0x3d4>)
 800b12c:	681b      	ldr	r3, [r3, #0]
 800b12e:	f023 020f 	bic.w	r2, r3, #15
 800b132:	4937      	ldr	r1, [pc, #220]	; (800b210 <HAL_RCC_ClockConfig+0x3d4>)
 800b134:	683b      	ldr	r3, [r7, #0]
 800b136:	4313      	orrs	r3, r2
 800b138:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b13a:	4b35      	ldr	r3, [pc, #212]	; (800b210 <HAL_RCC_ClockConfig+0x3d4>)
 800b13c:	681b      	ldr	r3, [r3, #0]
 800b13e:	f003 030f 	and.w	r3, r3, #15
 800b142:	683a      	ldr	r2, [r7, #0]
 800b144:	429a      	cmp	r2, r3
 800b146:	d001      	beq.n	800b14c <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 800b148:	2301      	movs	r3, #1
 800b14a:	e05b      	b.n	800b204 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	681b      	ldr	r3, [r3, #0]
 800b150:	f003 0304 	and.w	r3, r3, #4
 800b154:	2b00      	cmp	r3, #0
 800b156:	d010      	beq.n	800b17a <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	68da      	ldr	r2, [r3, #12]
 800b15c:	4b2b      	ldr	r3, [pc, #172]	; (800b20c <HAL_RCC_ClockConfig+0x3d0>)
 800b15e:	6a1b      	ldr	r3, [r3, #32]
 800b160:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800b164:	429a      	cmp	r2, r3
 800b166:	d208      	bcs.n	800b17a <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 800b168:	4b28      	ldr	r3, [pc, #160]	; (800b20c <HAL_RCC_ClockConfig+0x3d0>)
 800b16a:	6a1b      	ldr	r3, [r3, #32]
 800b16c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	68db      	ldr	r3, [r3, #12]
 800b174:	4925      	ldr	r1, [pc, #148]	; (800b20c <HAL_RCC_ClockConfig+0x3d0>)
 800b176:	4313      	orrs	r3, r2
 800b178:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	681b      	ldr	r3, [r3, #0]
 800b17e:	f003 0308 	and.w	r3, r3, #8
 800b182:	2b00      	cmp	r3, #0
 800b184:	d012      	beq.n	800b1ac <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	691a      	ldr	r2, [r3, #16]
 800b18a:	4b20      	ldr	r3, [pc, #128]	; (800b20c <HAL_RCC_ClockConfig+0x3d0>)
 800b18c:	6a1b      	ldr	r3, [r3, #32]
 800b18e:	091b      	lsrs	r3, r3, #4
 800b190:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800b194:	429a      	cmp	r2, r3
 800b196:	d209      	bcs.n	800b1ac <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 800b198:	4b1c      	ldr	r3, [pc, #112]	; (800b20c <HAL_RCC_ClockConfig+0x3d0>)
 800b19a:	6a1b      	ldr	r3, [r3, #32]
 800b19c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	691b      	ldr	r3, [r3, #16]
 800b1a4:	011b      	lsls	r3, r3, #4
 800b1a6:	4919      	ldr	r1, [pc, #100]	; (800b20c <HAL_RCC_ClockConfig+0x3d0>)
 800b1a8:	4313      	orrs	r3, r2
 800b1aa:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	681b      	ldr	r3, [r3, #0]
 800b1b0:	f003 0310 	and.w	r3, r3, #16
 800b1b4:	2b00      	cmp	r3, #0
 800b1b6:	d010      	beq.n	800b1da <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	695a      	ldr	r2, [r3, #20]
 800b1bc:	4b13      	ldr	r3, [pc, #76]	; (800b20c <HAL_RCC_ClockConfig+0x3d0>)
 800b1be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1c0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800b1c4:	429a      	cmp	r2, r3
 800b1c6:	d208      	bcs.n	800b1da <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 800b1c8:	4b10      	ldr	r3, [pc, #64]	; (800b20c <HAL_RCC_ClockConfig+0x3d0>)
 800b1ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1cc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	695b      	ldr	r3, [r3, #20]
 800b1d4:	490d      	ldr	r1, [pc, #52]	; (800b20c <HAL_RCC_ClockConfig+0x3d0>)
 800b1d6:	4313      	orrs	r3, r2
 800b1d8:	624b      	str	r3, [r1, #36]	; 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800b1da:	f000 f821 	bl	800b220 <HAL_RCC_GetSysClockFreq>
 800b1de:	4602      	mov	r2, r0
 800b1e0:	4b0a      	ldr	r3, [pc, #40]	; (800b20c <HAL_RCC_ClockConfig+0x3d0>)
 800b1e2:	6a1b      	ldr	r3, [r3, #32]
 800b1e4:	f003 030f 	and.w	r3, r3, #15
 800b1e8:	490a      	ldr	r1, [pc, #40]	; (800b214 <HAL_RCC_ClockConfig+0x3d8>)
 800b1ea:	5ccb      	ldrb	r3, [r1, r3]
 800b1ec:	fa22 f303 	lsr.w	r3, r2, r3
 800b1f0:	4a09      	ldr	r2, [pc, #36]	; (800b218 <HAL_RCC_ClockConfig+0x3dc>)
 800b1f2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800b1f4:	4b09      	ldr	r3, [pc, #36]	; (800b21c <HAL_RCC_ClockConfig+0x3e0>)
 800b1f6:	681b      	ldr	r3, [r3, #0]
 800b1f8:	4618      	mov	r0, r3
 800b1fa:	f7fa f9e3 	bl	80055c4 <HAL_InitTick>
 800b1fe:	4603      	mov	r3, r0
 800b200:	73fb      	strb	r3, [r7, #15]

  return status;
 800b202:	7bfb      	ldrb	r3, [r7, #15]
}
 800b204:	4618      	mov	r0, r3
 800b206:	3718      	adds	r7, #24
 800b208:	46bd      	mov	sp, r7
 800b20a:	bd80      	pop	{r7, pc}
 800b20c:	46020c00 	.word	0x46020c00
 800b210:	40022000 	.word	0x40022000
 800b214:	0800ee78 	.word	0x0800ee78
 800b218:	20000004 	.word	0x20000004
 800b21c:	20000008 	.word	0x20000008

0800b220 <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800b220:	b480      	push	{r7}
 800b222:	b08b      	sub	sp, #44	; 0x2c
 800b224:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 800b226:	2300      	movs	r3, #0
 800b228:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 800b22a:	2300      	movs	r3, #0
 800b22c:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b22e:	4b7b      	ldr	r3, [pc, #492]	; (800b41c <HAL_RCC_GetSysClockFreq+0x1fc>)
 800b230:	69db      	ldr	r3, [r3, #28]
 800b232:	f003 030c 	and.w	r3, r3, #12
 800b236:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800b238:	4b78      	ldr	r3, [pc, #480]	; (800b41c <HAL_RCC_GetSysClockFreq+0x1fc>)
 800b23a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b23c:	f003 0303 	and.w	r3, r3, #3
 800b240:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800b242:	69bb      	ldr	r3, [r7, #24]
 800b244:	2b00      	cmp	r3, #0
 800b246:	d005      	beq.n	800b254 <HAL_RCC_GetSysClockFreq+0x34>
 800b248:	69bb      	ldr	r3, [r7, #24]
 800b24a:	2b0c      	cmp	r3, #12
 800b24c:	d121      	bne.n	800b292 <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800b24e:	697b      	ldr	r3, [r7, #20]
 800b250:	2b01      	cmp	r3, #1
 800b252:	d11e      	bne.n	800b292 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 800b254:	4b71      	ldr	r3, [pc, #452]	; (800b41c <HAL_RCC_GetSysClockFreq+0x1fc>)
 800b256:	689b      	ldr	r3, [r3, #8]
 800b258:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b25c:	2b00      	cmp	r3, #0
 800b25e:	d107      	bne.n	800b270 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 800b260:	4b6e      	ldr	r3, [pc, #440]	; (800b41c <HAL_RCC_GetSysClockFreq+0x1fc>)
 800b262:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800b266:	0b1b      	lsrs	r3, r3, #12
 800b268:	f003 030f 	and.w	r3, r3, #15
 800b26c:	627b      	str	r3, [r7, #36]	; 0x24
 800b26e:	e005      	b.n	800b27c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 800b270:	4b6a      	ldr	r3, [pc, #424]	; (800b41c <HAL_RCC_GetSysClockFreq+0x1fc>)
 800b272:	689b      	ldr	r3, [r3, #8]
 800b274:	0f1b      	lsrs	r3, r3, #28
 800b276:	f003 030f 	and.w	r3, r3, #15
 800b27a:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800b27c:	4a68      	ldr	r2, [pc, #416]	; (800b420 <HAL_RCC_GetSysClockFreq+0x200>)
 800b27e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b280:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b284:	627b      	str	r3, [r7, #36]	; 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800b286:	69bb      	ldr	r3, [r7, #24]
 800b288:	2b00      	cmp	r3, #0
 800b28a:	d110      	bne.n	800b2ae <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800b28c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b28e:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800b290:	e00d      	b.n	800b2ae <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800b292:	4b62      	ldr	r3, [pc, #392]	; (800b41c <HAL_RCC_GetSysClockFreq+0x1fc>)
 800b294:	69db      	ldr	r3, [r3, #28]
 800b296:	f003 030c 	and.w	r3, r3, #12
 800b29a:	2b04      	cmp	r3, #4
 800b29c:	d102      	bne.n	800b2a4 <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800b29e:	4b61      	ldr	r3, [pc, #388]	; (800b424 <HAL_RCC_GetSysClockFreq+0x204>)
 800b2a0:	623b      	str	r3, [r7, #32]
 800b2a2:	e004      	b.n	800b2ae <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800b2a4:	69bb      	ldr	r3, [r7, #24]
 800b2a6:	2b08      	cmp	r3, #8
 800b2a8:	d101      	bne.n	800b2ae <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800b2aa:	4b5e      	ldr	r3, [pc, #376]	; (800b424 <HAL_RCC_GetSysClockFreq+0x204>)
 800b2ac:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800b2ae:	69bb      	ldr	r3, [r7, #24]
 800b2b0:	2b0c      	cmp	r3, #12
 800b2b2:	f040 80ac 	bne.w	800b40e <HAL_RCC_GetSysClockFreq+0x1ee>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 800b2b6:	4b59      	ldr	r3, [pc, #356]	; (800b41c <HAL_RCC_GetSysClockFreq+0x1fc>)
 800b2b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b2ba:	f003 0303 	and.w	r3, r3, #3
 800b2be:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 800b2c0:	4b56      	ldr	r3, [pc, #344]	; (800b41c <HAL_RCC_GetSysClockFreq+0x1fc>)
 800b2c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b2c4:	0a1b      	lsrs	r3, r3, #8
 800b2c6:	f003 030f 	and.w	r3, r3, #15
 800b2ca:	3301      	adds	r3, #1
 800b2cc:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 800b2ce:	4b53      	ldr	r3, [pc, #332]	; (800b41c <HAL_RCC_GetSysClockFreq+0x1fc>)
 800b2d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b2d2:	091b      	lsrs	r3, r3, #4
 800b2d4:	f003 0301 	and.w	r3, r3, #1
 800b2d8:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 800b2da:	4b50      	ldr	r3, [pc, #320]	; (800b41c <HAL_RCC_GetSysClockFreq+0x1fc>)
 800b2dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b2de:	08db      	lsrs	r3, r3, #3
 800b2e0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b2e4:	68ba      	ldr	r2, [r7, #8]
 800b2e6:	fb02 f303 	mul.w	r3, r2, r3
 800b2ea:	ee07 3a90 	vmov	s15, r3
 800b2ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b2f2:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    if (pllm != 0U)
 800b2f6:	68fb      	ldr	r3, [r7, #12]
 800b2f8:	2b00      	cmp	r3, #0
 800b2fa:	f000 8086 	beq.w	800b40a <HAL_RCC_GetSysClockFreq+0x1ea>
    {
      switch (pllsource)
 800b2fe:	693b      	ldr	r3, [r7, #16]
 800b300:	2b02      	cmp	r3, #2
 800b302:	d003      	beq.n	800b30c <HAL_RCC_GetSysClockFreq+0xec>
 800b304:	693b      	ldr	r3, [r7, #16]
 800b306:	2b03      	cmp	r3, #3
 800b308:	d022      	beq.n	800b350 <HAL_RCC_GetSysClockFreq+0x130>
 800b30a:	e043      	b.n	800b394 <HAL_RCC_GetSysClockFreq+0x174>
      {
        case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800b30c:	68fb      	ldr	r3, [r7, #12]
 800b30e:	ee07 3a90 	vmov	s15, r3
 800b312:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b316:	eddf 6a44 	vldr	s13, [pc, #272]	; 800b428 <HAL_RCC_GetSysClockFreq+0x208>
 800b31a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b31e:	4b3f      	ldr	r3, [pc, #252]	; (800b41c <HAL_RCC_GetSysClockFreq+0x1fc>)
 800b320:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b322:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b326:	ee07 3a90 	vmov	s15, r3
 800b32a:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 800b32e:	ed97 6a01 	vldr	s12, [r7, #4]
 800b332:	eddf 5a3e 	vldr	s11, [pc, #248]	; 800b42c <HAL_RCC_GetSysClockFreq+0x20c>
 800b336:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800b33a:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 800b33e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b342:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800b346:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b34a:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 800b34e:	e046      	b.n	800b3de <HAL_RCC_GetSysClockFreq+0x1be>

        case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800b350:	68fb      	ldr	r3, [r7, #12]
 800b352:	ee07 3a90 	vmov	s15, r3
 800b356:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b35a:	eddf 6a33 	vldr	s13, [pc, #204]	; 800b428 <HAL_RCC_GetSysClockFreq+0x208>
 800b35e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b362:	4b2e      	ldr	r3, [pc, #184]	; (800b41c <HAL_RCC_GetSysClockFreq+0x1fc>)
 800b364:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b366:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b36a:	ee07 3a90 	vmov	s15, r3
 800b36e:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 800b372:	ed97 6a01 	vldr	s12, [r7, #4]
 800b376:	eddf 5a2d 	vldr	s11, [pc, #180]	; 800b42c <HAL_RCC_GetSysClockFreq+0x20c>
 800b37a:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800b37e:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 800b382:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b386:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800b38a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b38e:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 800b392:	e024      	b.n	800b3de <HAL_RCC_GetSysClockFreq+0x1be>

        case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        default:
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800b394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b396:	ee07 3a90 	vmov	s15, r3
 800b39a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b39e:	68fb      	ldr	r3, [r7, #12]
 800b3a0:	ee07 3a90 	vmov	s15, r3
 800b3a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b3a8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b3ac:	4b1b      	ldr	r3, [pc, #108]	; (800b41c <HAL_RCC_GetSysClockFreq+0x1fc>)
 800b3ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b3b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b3b4:	ee07 3a90 	vmov	s15, r3
 800b3b8:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 800b3bc:	ed97 6a01 	vldr	s12, [r7, #4]
 800b3c0:	eddf 5a1a 	vldr	s11, [pc, #104]	; 800b42c <HAL_RCC_GetSysClockFreq+0x20c>
 800b3c4:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800b3c8:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 800b3cc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b3d0:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800b3d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b3d8:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 800b3dc:	bf00      	nop
      }

      pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 800b3de:	4b0f      	ldr	r3, [pc, #60]	; (800b41c <HAL_RCC_GetSysClockFreq+0x1fc>)
 800b3e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b3e2:	0e1b      	lsrs	r3, r3, #24
 800b3e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b3e8:	3301      	adds	r3, #1
 800b3ea:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 800b3ec:	683b      	ldr	r3, [r7, #0]
 800b3ee:	ee07 3a90 	vmov	s15, r3
 800b3f2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800b3f6:	edd7 6a07 	vldr	s13, [r7, #28]
 800b3fa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b3fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b402:	ee17 3a90 	vmov	r3, s15
 800b406:	623b      	str	r3, [r7, #32]
 800b408:	e001      	b.n	800b40e <HAL_RCC_GetSysClockFreq+0x1ee>
    }
    else
    {
      sysclockfreq = 0;
 800b40a:	2300      	movs	r3, #0
 800b40c:	623b      	str	r3, [r7, #32]
    }
  }

  return sysclockfreq;
 800b40e:	6a3b      	ldr	r3, [r7, #32]
}
 800b410:	4618      	mov	r0, r3
 800b412:	372c      	adds	r7, #44	; 0x2c
 800b414:	46bd      	mov	sp, r7
 800b416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b41a:	4770      	bx	lr
 800b41c:	46020c00 	.word	0x46020c00
 800b420:	0800ee90 	.word	0x0800ee90
 800b424:	00f42400 	.word	0x00f42400
 800b428:	4b742400 	.word	0x4b742400
 800b42c:	46000000 	.word	0x46000000

0800b430 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b430:	b580      	push	{r7, lr}
 800b432:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800b434:	f7ff fef4 	bl	800b220 <HAL_RCC_GetSysClockFreq>
 800b438:	4602      	mov	r2, r0
 800b43a:	4b07      	ldr	r3, [pc, #28]	; (800b458 <HAL_RCC_GetHCLKFreq+0x28>)
 800b43c:	6a1b      	ldr	r3, [r3, #32]
 800b43e:	f003 030f 	and.w	r3, r3, #15
 800b442:	4906      	ldr	r1, [pc, #24]	; (800b45c <HAL_RCC_GetHCLKFreq+0x2c>)
 800b444:	5ccb      	ldrb	r3, [r1, r3]
 800b446:	fa22 f303 	lsr.w	r3, r2, r3
 800b44a:	4a05      	ldr	r2, [pc, #20]	; (800b460 <HAL_RCC_GetHCLKFreq+0x30>)
 800b44c:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 800b44e:	4b04      	ldr	r3, [pc, #16]	; (800b460 <HAL_RCC_GetHCLKFreq+0x30>)
 800b450:	681b      	ldr	r3, [r3, #0]
}
 800b452:	4618      	mov	r0, r3
 800b454:	bd80      	pop	{r7, pc}
 800b456:	bf00      	nop
 800b458:	46020c00 	.word	0x46020c00
 800b45c:	0800ee78 	.word	0x0800ee78
 800b460:	20000004 	.word	0x20000004

0800b464 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800b464:	b580      	push	{r7, lr}
 800b466:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 800b468:	f7ff ffe2 	bl	800b430 <HAL_RCC_GetHCLKFreq>
 800b46c:	4602      	mov	r2, r0
 800b46e:	4b05      	ldr	r3, [pc, #20]	; (800b484 <HAL_RCC_GetPCLK1Freq+0x20>)
 800b470:	6a1b      	ldr	r3, [r3, #32]
 800b472:	091b      	lsrs	r3, r3, #4
 800b474:	f003 0307 	and.w	r3, r3, #7
 800b478:	4903      	ldr	r1, [pc, #12]	; (800b488 <HAL_RCC_GetPCLK1Freq+0x24>)
 800b47a:	5ccb      	ldrb	r3, [r1, r3]
 800b47c:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b480:	4618      	mov	r0, r3
 800b482:	bd80      	pop	{r7, pc}
 800b484:	46020c00 	.word	0x46020c00
 800b488:	0800ee88 	.word	0x0800ee88

0800b48c <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *pRCC_ClkInitStruct, uint32_t *pFLatency)
{
 800b48c:	b480      	push	{r7}
 800b48e:	b083      	sub	sp, #12
 800b490:	af00      	add	r7, sp, #0
 800b492:	6078      	str	r0, [r7, #4]
 800b494:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(pRCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  pRCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | \
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	221f      	movs	r2, #31
 800b49a:	601a      	str	r2, [r3, #0]
                                  RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_PCLK3;

  /* Get the SYSCLK configuration --------------------------------------------*/
  pRCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR1 & RCC_CFGR1_SW);
 800b49c:	4b15      	ldr	r3, [pc, #84]	; (800b4f4 <HAL_RCC_GetClockConfig+0x68>)
 800b49e:	69db      	ldr	r3, [r3, #28]
 800b4a0:	f003 0203 	and.w	r2, r3, #3
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR2 & RCC_CFGR2_HPRE);
 800b4a8:	4b12      	ldr	r3, [pc, #72]	; (800b4f4 <HAL_RCC_GetClockConfig+0x68>)
 800b4aa:	6a1b      	ldr	r3, [r3, #32]
 800b4ac:	f003 020f 	and.w	r2, r3, #15
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR2 & RCC_CFGR2_PPRE1);
 800b4b4:	4b0f      	ldr	r3, [pc, #60]	; (800b4f4 <HAL_RCC_GetClockConfig+0x68>)
 800b4b6:	6a1b      	ldr	r3, [r3, #32]
 800b4b8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4);
 800b4c0:	4b0c      	ldr	r3, [pc, #48]	; (800b4f4 <HAL_RCC_GetClockConfig+0x68>)
 800b4c2:	6a1b      	ldr	r3, [r3, #32]
 800b4c4:	091b      	lsrs	r3, r3, #4
 800b4c6:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	611a      	str	r2, [r3, #16]

  /* Get the APB3 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->CFGR3 & RCC_CFGR3_PPRE3);
 800b4ce:	4b09      	ldr	r3, [pc, #36]	; (800b4f4 <HAL_RCC_GetClockConfig+0x68>)
 800b4d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4d2:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	615a      	str	r2, [r3, #20]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800b4da:	4b07      	ldr	r3, [pc, #28]	; (800b4f8 <HAL_RCC_GetClockConfig+0x6c>)
 800b4dc:	681b      	ldr	r3, [r3, #0]
 800b4de:	f003 020f 	and.w	r2, r3, #15
 800b4e2:	683b      	ldr	r3, [r7, #0]
 800b4e4:	601a      	str	r2, [r3, #0]
}
 800b4e6:	bf00      	nop
 800b4e8:	370c      	adds	r7, #12
 800b4ea:	46bd      	mov	sp, r7
 800b4ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4f0:	4770      	bx	lr
 800b4f2:	bf00      	nop
 800b4f4:	46020c00 	.word	0x46020c00
 800b4f8:	40022000 	.word	0x40022000

0800b4fc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800b4fc:	b580      	push	{r7, lr}
 800b4fe:	b086      	sub	sp, #24
 800b500:	af00      	add	r7, sp, #0
 800b502:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 800b504:	4b3e      	ldr	r3, [pc, #248]	; (800b600 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800b506:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b50a:	f003 0304 	and.w	r3, r3, #4
 800b50e:	2b00      	cmp	r3, #0
 800b510:	d003      	beq.n	800b51a <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800b512:	f7fe fd3f 	bl	8009f94 <HAL_PWREx_GetVoltageRange>
 800b516:	6178      	str	r0, [r7, #20]
 800b518:	e019      	b.n	800b54e <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800b51a:	4b39      	ldr	r3, [pc, #228]	; (800b600 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800b51c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b520:	4a37      	ldr	r2, [pc, #220]	; (800b600 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800b522:	f043 0304 	orr.w	r3, r3, #4
 800b526:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800b52a:	4b35      	ldr	r3, [pc, #212]	; (800b600 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800b52c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b530:	f003 0304 	and.w	r3, r3, #4
 800b534:	60fb      	str	r3, [r7, #12]
 800b536:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800b538:	f7fe fd2c 	bl	8009f94 <HAL_PWREx_GetVoltageRange>
 800b53c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800b53e:	4b30      	ldr	r3, [pc, #192]	; (800b600 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800b540:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b544:	4a2e      	ldr	r2, [pc, #184]	; (800b600 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800b546:	f023 0304 	bic.w	r3, r3, #4
 800b54a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 800b54e:	697b      	ldr	r3, [r7, #20]
 800b550:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800b554:	d003      	beq.n	800b55e <RCC_SetFlashLatencyFromMSIRange+0x62>
 800b556:	697b      	ldr	r3, [r7, #20]
 800b558:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b55c:	d109      	bne.n	800b572 <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b564:	d202      	bcs.n	800b56c <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 800b566:	2301      	movs	r3, #1
 800b568:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 800b56a:	e033      	b.n	800b5d4 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 800b56c:	2300      	movs	r3, #0
 800b56e:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 800b570:	e030      	b.n	800b5d4 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b578:	d208      	bcs.n	800b58c <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 800b57a:	697b      	ldr	r3, [r7, #20]
 800b57c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b580:	d102      	bne.n	800b588 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 800b582:	2303      	movs	r3, #3
 800b584:	613b      	str	r3, [r7, #16]
 800b586:	e025      	b.n	800b5d4 <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 800b588:	2301      	movs	r3, #1
 800b58a:	e035      	b.n	800b5f8 <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b592:	d90f      	bls.n	800b5b4 <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 800b594:	697b      	ldr	r3, [r7, #20]
 800b596:	2b00      	cmp	r3, #0
 800b598:	d109      	bne.n	800b5ae <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b5a0:	d902      	bls.n	800b5a8 <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 800b5a2:	2300      	movs	r3, #0
 800b5a4:	613b      	str	r3, [r7, #16]
 800b5a6:	e015      	b.n	800b5d4 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 800b5a8:	2301      	movs	r3, #1
 800b5aa:	613b      	str	r3, [r7, #16]
 800b5ac:	e012      	b.n	800b5d4 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 800b5ae:	2300      	movs	r3, #0
 800b5b0:	613b      	str	r3, [r7, #16]
 800b5b2:	e00f      	b.n	800b5d4 <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b5ba:	d109      	bne.n	800b5d0 <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 800b5bc:	697b      	ldr	r3, [r7, #20]
 800b5be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b5c2:	d102      	bne.n	800b5ca <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 800b5c4:	2301      	movs	r3, #1
 800b5c6:	613b      	str	r3, [r7, #16]
 800b5c8:	e004      	b.n	800b5d4 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 800b5ca:	2302      	movs	r3, #2
 800b5cc:	613b      	str	r3, [r7, #16]
 800b5ce:	e001      	b.n	800b5d4 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 800b5d0:	2301      	movs	r3, #1
 800b5d2:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800b5d4:	4b0b      	ldr	r3, [pc, #44]	; (800b604 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800b5d6:	681b      	ldr	r3, [r3, #0]
 800b5d8:	f023 020f 	bic.w	r2, r3, #15
 800b5dc:	4909      	ldr	r1, [pc, #36]	; (800b604 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800b5de:	693b      	ldr	r3, [r7, #16]
 800b5e0:	4313      	orrs	r3, r2
 800b5e2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 800b5e4:	4b07      	ldr	r3, [pc, #28]	; (800b604 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800b5e6:	681b      	ldr	r3, [r3, #0]
 800b5e8:	f003 030f 	and.w	r3, r3, #15
 800b5ec:	693a      	ldr	r2, [r7, #16]
 800b5ee:	429a      	cmp	r2, r3
 800b5f0:	d001      	beq.n	800b5f6 <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 800b5f2:	2301      	movs	r3, #1
 800b5f4:	e000      	b.n	800b5f8 <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 800b5f6:	2300      	movs	r3, #0
}
 800b5f8:	4618      	mov	r0, r3
 800b5fa:	3718      	adds	r7, #24
 800b5fc:	46bd      	mov	sp, r7
 800b5fe:	bd80      	pop	{r7, pc}
 800b600:	46020c00 	.word	0x46020c00
 800b604:	40022000 	.word	0x40022000

0800b608 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 800b608:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b60c:	b0ba      	sub	sp, #232	; 0xe8
 800b60e:	af00      	add	r7, sp, #0
 800b610:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800b614:	2300      	movs	r3, #0
 800b616:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800b61a:	2300      	movs	r3, #0
 800b61c:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800b620:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b624:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b628:	f002 0401 	and.w	r4, r2, #1
 800b62c:	2500      	movs	r5, #0
 800b62e:	ea54 0305 	orrs.w	r3, r4, r5
 800b632:	d00b      	beq.n	800b64c <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 800b634:	4bcb      	ldr	r3, [pc, #812]	; (800b964 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800b636:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b63a:	f023 0103 	bic.w	r1, r3, #3
 800b63e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b642:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b644:	4ac7      	ldr	r2, [pc, #796]	; (800b964 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800b646:	430b      	orrs	r3, r1
 800b648:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800b64c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b650:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b654:	f002 0802 	and.w	r8, r2, #2
 800b658:	f04f 0900 	mov.w	r9, #0
 800b65c:	ea58 0309 	orrs.w	r3, r8, r9
 800b660:	d00b      	beq.n	800b67a <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 800b662:	4bc0      	ldr	r3, [pc, #768]	; (800b964 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800b664:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b668:	f023 010c 	bic.w	r1, r3, #12
 800b66c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b670:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b672:	4abc      	ldr	r2, [pc, #752]	; (800b964 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800b674:	430b      	orrs	r3, r1
 800b676:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800b67a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b67e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b682:	f002 0a04 	and.w	sl, r2, #4
 800b686:	f04f 0b00 	mov.w	fp, #0
 800b68a:	ea5a 030b 	orrs.w	r3, sl, fp
 800b68e:	d00b      	beq.n	800b6a8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 800b690:	4bb4      	ldr	r3, [pc, #720]	; (800b964 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800b692:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b696:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 800b69a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b69e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b6a0:	4ab0      	ldr	r2, [pc, #704]	; (800b964 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800b6a2:	430b      	orrs	r3, r1
 800b6a4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800b6a8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b6ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6b0:	f002 0308 	and.w	r3, r2, #8
 800b6b4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b6b8:	2300      	movs	r3, #0
 800b6ba:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800b6be:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800b6c2:	460b      	mov	r3, r1
 800b6c4:	4313      	orrs	r3, r2
 800b6c6:	d00b      	beq.n	800b6e0 <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 800b6c8:	4ba6      	ldr	r3, [pc, #664]	; (800b964 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800b6ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b6ce:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800b6d2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b6d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b6d8:	4aa2      	ldr	r2, [pc, #648]	; (800b964 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800b6da:	430b      	orrs	r3, r1
 800b6dc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800b6e0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b6e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6e8:	f002 0310 	and.w	r3, r2, #16
 800b6ec:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b6f0:	2300      	movs	r3, #0
 800b6f2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b6f6:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800b6fa:	460b      	mov	r3, r1
 800b6fc:	4313      	orrs	r3, r2
 800b6fe:	d00b      	beq.n	800b718 <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 800b700:	4b98      	ldr	r3, [pc, #608]	; (800b964 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800b702:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b706:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800b70a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b70e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b710:	4a94      	ldr	r2, [pc, #592]	; (800b964 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800b712:	430b      	orrs	r3, r1
 800b714:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
    __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
  }
#endif /* USART6 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800b718:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b71c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b720:	f002 0320 	and.w	r3, r2, #32
 800b724:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b728:	2300      	movs	r3, #0
 800b72a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800b72e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800b732:	460b      	mov	r3, r1
 800b734:	4313      	orrs	r3, r2
 800b736:	d00b      	beq.n	800b750 <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 800b738:	4b8a      	ldr	r3, [pc, #552]	; (800b964 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800b73a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800b73e:	f023 0107 	bic.w	r1, r3, #7
 800b742:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b746:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b748:	4a86      	ldr	r2, [pc, #536]	; (800b964 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800b74a:	430b      	orrs	r3, r1
 800b74c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800b750:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b754:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b758:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800b75c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b760:	2300      	movs	r3, #0
 800b762:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b766:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800b76a:	460b      	mov	r3, r1
 800b76c:	4313      	orrs	r3, r2
 800b76e:	d00b      	beq.n	800b788 <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 800b770:	4b7c      	ldr	r3, [pc, #496]	; (800b964 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800b772:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b776:	f423 6140 	bic.w	r1, r3, #3072	; 0xc00
 800b77a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b77e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b780:	4a78      	ldr	r2, [pc, #480]	; (800b964 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800b782:	430b      	orrs	r3, r1
 800b784:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800b788:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b78c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b790:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800b794:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800b798:	2300      	movs	r3, #0
 800b79a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b79e:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800b7a2:	460b      	mov	r3, r1
 800b7a4:	4313      	orrs	r3, r2
 800b7a6:	d00b      	beq.n	800b7c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 800b7a8:	4b6e      	ldr	r3, [pc, #440]	; (800b964 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800b7aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b7ae:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800b7b2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b7b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b7b8:	4a6a      	ldr	r2, [pc, #424]	; (800b964 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800b7ba:	430b      	orrs	r3, r1
 800b7bc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800b7c0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b7c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7c8:	f402 7380 	and.w	r3, r2, #256	; 0x100
 800b7cc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800b7d0:	2300      	movs	r3, #0
 800b7d2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800b7d6:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 800b7da:	460b      	mov	r3, r1
 800b7dc:	4313      	orrs	r3, r2
 800b7de:	d00b      	beq.n	800b7f8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 800b7e0:	4b60      	ldr	r3, [pc, #384]	; (800b964 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800b7e2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800b7e6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800b7ea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b7ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b7f0:	4a5c      	ldr	r2, [pc, #368]	; (800b964 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800b7f2:	430b      	orrs	r3, r1
 800b7f4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800b7f8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b7fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b800:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 800b804:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800b808:	2300      	movs	r3, #0
 800b80a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800b80e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800b812:	460b      	mov	r3, r1
 800b814:	4313      	orrs	r3, r2
 800b816:	d00b      	beq.n	800b830 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 800b818:	4b52      	ldr	r3, [pc, #328]	; (800b964 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800b81a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b81e:	f423 4140 	bic.w	r1, r3, #49152	; 0xc000
 800b822:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b826:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b828:	4a4e      	ldr	r2, [pc, #312]	; (800b964 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800b82a:	430b      	orrs	r3, r1
 800b82c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
    __HAL_RCC_I2C6_CONFIG(pPeriphClkInit->I2c6ClockSelection);
  }
#endif /* I2C6 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800b830:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b834:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b838:	f402 7300 	and.w	r3, r2, #512	; 0x200
 800b83c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800b840:	2300      	movs	r3, #0
 800b842:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800b846:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800b84a:	460b      	mov	r3, r1
 800b84c:	4313      	orrs	r3, r2
 800b84e:	d00b      	beq.n	800b868 <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 800b850:	4b44      	ldr	r3, [pc, #272]	; (800b964 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800b852:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800b856:	f423 6140 	bic.w	r1, r3, #3072	; 0xc00
 800b85a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b85e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b860:	4a40      	ldr	r2, [pc, #256]	; (800b964 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800b862:	430b      	orrs	r3, r1
 800b864:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800b868:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b86c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b870:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 800b874:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800b878:	2300      	movs	r3, #0
 800b87a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800b87e:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800b882:	460b      	mov	r3, r1
 800b884:	4313      	orrs	r3, r2
 800b886:	d00b      	beq.n	800b8a0 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 800b888:	4b36      	ldr	r3, [pc, #216]	; (800b964 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800b88a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b88e:	f423 2140 	bic.w	r1, r3, #786432	; 0xc0000
 800b892:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b896:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b898:	4a32      	ldr	r2, [pc, #200]	; (800b964 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800b89a:	430b      	orrs	r3, r1
 800b89c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 800b8a0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b8a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8a8:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800b8ac:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800b8b0:	2300      	movs	r3, #0
 800b8b2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800b8b6:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800b8ba:	460b      	mov	r3, r1
 800b8bc:	4313      	orrs	r3, r2
 800b8be:	d00c      	beq.n	800b8da <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 800b8c0:	4b28      	ldr	r3, [pc, #160]	; (800b964 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800b8c2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800b8c6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800b8ca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b8ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b8d2:	4a24      	ldr	r2, [pc, #144]	; (800b964 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800b8d4:	430b      	orrs	r3, r1
 800b8d6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800b8da:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b8de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8e2:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800b8e6:	67bb      	str	r3, [r7, #120]	; 0x78
 800b8e8:	2300      	movs	r3, #0
 800b8ea:	67fb      	str	r3, [r7, #124]	; 0x7c
 800b8ec:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800b8f0:	460b      	mov	r3, r1
 800b8f2:	4313      	orrs	r3, r2
 800b8f4:	d04f      	beq.n	800b996 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 800b8f6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b8fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b8fe:	2b80      	cmp	r3, #128	; 0x80
 800b900:	d02d      	beq.n	800b95e <HAL_RCCEx_PeriphCLKConfig+0x356>
 800b902:	2b80      	cmp	r3, #128	; 0x80
 800b904:	d827      	bhi.n	800b956 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 800b906:	2b60      	cmp	r3, #96	; 0x60
 800b908:	d02e      	beq.n	800b968 <HAL_RCCEx_PeriphCLKConfig+0x360>
 800b90a:	2b60      	cmp	r3, #96	; 0x60
 800b90c:	d823      	bhi.n	800b956 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 800b90e:	2b40      	cmp	r3, #64	; 0x40
 800b910:	d006      	beq.n	800b920 <HAL_RCCEx_PeriphCLKConfig+0x318>
 800b912:	2b40      	cmp	r3, #64	; 0x40
 800b914:	d81f      	bhi.n	800b956 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 800b916:	2b00      	cmp	r3, #0
 800b918:	d009      	beq.n	800b92e <HAL_RCCEx_PeriphCLKConfig+0x326>
 800b91a:	2b20      	cmp	r3, #32
 800b91c:	d011      	beq.n	800b942 <HAL_RCCEx_PeriphCLKConfig+0x33a>
 800b91e:	e01a      	b.n	800b956 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800b920:	4b10      	ldr	r3, [pc, #64]	; (800b964 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800b922:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b924:	4a0f      	ldr	r2, [pc, #60]	; (800b964 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800b926:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b92a:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 800b92c:	e01d      	b.n	800b96a <HAL_RCCEx_PeriphCLKConfig+0x362>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800b92e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b932:	3308      	adds	r3, #8
 800b934:	4618      	mov	r0, r3
 800b936:	f000 fc27 	bl	800c188 <RCCEx_PLL2_Config>
 800b93a:	4603      	mov	r3, r0
 800b93c:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* SAI1 clock source config set later after clock selection check */
        break;
 800b940:	e013      	b.n	800b96a <HAL_RCCEx_PeriphCLKConfig+0x362>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800b942:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b946:	332c      	adds	r3, #44	; 0x2c
 800b948:	4618      	mov	r0, r3
 800b94a:	f000 fcb5 	bl	800c2b8 <RCCEx_PLL3_Config>
 800b94e:	4603      	mov	r3, r0
 800b950:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* SAI1 clock source config set later after clock selection check */
        break;
 800b954:	e009      	b.n	800b96a <HAL_RCCEx_PeriphCLKConfig+0x362>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b956:	2301      	movs	r3, #1
 800b958:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 800b95c:	e005      	b.n	800b96a <HAL_RCCEx_PeriphCLKConfig+0x362>
        break;
 800b95e:	bf00      	nop
 800b960:	e003      	b.n	800b96a <HAL_RCCEx_PeriphCLKConfig+0x362>
 800b962:	bf00      	nop
 800b964:	46020c00 	.word	0x46020c00
        break;
 800b968:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b96a:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800b96e:	2b00      	cmp	r3, #0
 800b970:	d10d      	bne.n	800b98e <HAL_RCCEx_PeriphCLKConfig+0x386>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 800b972:	4bb6      	ldr	r3, [pc, #728]	; (800bc4c <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800b974:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800b978:	f023 01e0 	bic.w	r1, r3, #224	; 0xe0
 800b97c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b980:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b984:	4ab1      	ldr	r2, [pc, #708]	; (800bc4c <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800b986:	430b      	orrs	r3, r1
 800b988:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 800b98c:	e003      	b.n	800b996 <HAL_RCCEx_PeriphCLKConfig+0x38e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b98e:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800b992:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800b996:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b99a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b99e:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 800b9a2:	673b      	str	r3, [r7, #112]	; 0x70
 800b9a4:	2300      	movs	r3, #0
 800b9a6:	677b      	str	r3, [r7, #116]	; 0x74
 800b9a8:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800b9ac:	460b      	mov	r3, r1
 800b9ae:	4313      	orrs	r3, r2
 800b9b0:	d053      	beq.n	800ba5a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 800b9b2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b9b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b9ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b9be:	d033      	beq.n	800ba28 <HAL_RCCEx_PeriphCLKConfig+0x420>
 800b9c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b9c4:	d82c      	bhi.n	800ba20 <HAL_RCCEx_PeriphCLKConfig+0x418>
 800b9c6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b9ca:	d02f      	beq.n	800ba2c <HAL_RCCEx_PeriphCLKConfig+0x424>
 800b9cc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b9d0:	d826      	bhi.n	800ba20 <HAL_RCCEx_PeriphCLKConfig+0x418>
 800b9d2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b9d6:	d008      	beq.n	800b9ea <HAL_RCCEx_PeriphCLKConfig+0x3e2>
 800b9d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b9dc:	d820      	bhi.n	800ba20 <HAL_RCCEx_PeriphCLKConfig+0x418>
 800b9de:	2b00      	cmp	r3, #0
 800b9e0:	d00a      	beq.n	800b9f8 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
 800b9e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b9e6:	d011      	beq.n	800ba0c <HAL_RCCEx_PeriphCLKConfig+0x404>
 800b9e8:	e01a      	b.n	800ba20 <HAL_RCCEx_PeriphCLKConfig+0x418>
    {
      case RCC_SAI2CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800b9ea:	4b98      	ldr	r3, [pc, #608]	; (800bc4c <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800b9ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b9ee:	4a97      	ldr	r2, [pc, #604]	; (800bc4c <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800b9f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b9f4:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 800b9f6:	e01a      	b.n	800ba2e <HAL_RCCEx_PeriphCLKConfig+0x426>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800b9f8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b9fc:	3308      	adds	r3, #8
 800b9fe:	4618      	mov	r0, r3
 800ba00:	f000 fbc2 	bl	800c188 <RCCEx_PLL2_Config>
 800ba04:	4603      	mov	r3, r0
 800ba06:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* SAI2 clock source config set later after clock selection check */
        break;
 800ba0a:	e010      	b.n	800ba2e <HAL_RCCEx_PeriphCLKConfig+0x426>

      case RCC_SAI2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800ba0c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800ba10:	332c      	adds	r3, #44	; 0x2c
 800ba12:	4618      	mov	r0, r3
 800ba14:	f000 fc50 	bl	800c2b8 <RCCEx_PLL3_Config>
 800ba18:	4603      	mov	r3, r0
 800ba1a:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* SAI2 clock source config set later after clock selection check */
        break;
 800ba1e:	e006      	b.n	800ba2e <HAL_RCCEx_PeriphCLKConfig+0x426>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ba20:	2301      	movs	r3, #1
 800ba22:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 800ba26:	e002      	b.n	800ba2e <HAL_RCCEx_PeriphCLKConfig+0x426>
        break;
 800ba28:	bf00      	nop
 800ba2a:	e000      	b.n	800ba2e <HAL_RCCEx_PeriphCLKConfig+0x426>
        break;
 800ba2c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ba2e:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800ba32:	2b00      	cmp	r3, #0
 800ba34:	d10d      	bne.n	800ba52 <HAL_RCCEx_PeriphCLKConfig+0x44a>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 800ba36:	4b85      	ldr	r3, [pc, #532]	; (800bc4c <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800ba38:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800ba3c:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 800ba40:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800ba44:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800ba48:	4a80      	ldr	r2, [pc, #512]	; (800bc4c <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800ba4a:	430b      	orrs	r3, r1
 800ba4c:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 800ba50:	e003      	b.n	800ba5a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ba52:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800ba56:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 800ba5a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800ba5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba62:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 800ba66:	66bb      	str	r3, [r7, #104]	; 0x68
 800ba68:	2300      	movs	r3, #0
 800ba6a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800ba6c:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800ba70:	460b      	mov	r3, r1
 800ba72:	4313      	orrs	r3, r2
 800ba74:	d046      	beq.n	800bb04 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 800ba76:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800ba7a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800ba7e:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800ba82:	d028      	beq.n	800bad6 <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 800ba84:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800ba88:	d821      	bhi.n	800bace <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 800ba8a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ba8e:	d022      	beq.n	800bad6 <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 800ba90:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ba94:	d81b      	bhi.n	800bace <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 800ba96:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800ba9a:	d01c      	beq.n	800bad6 <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 800ba9c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800baa0:	d815      	bhi.n	800bace <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 800baa2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800baa6:	d008      	beq.n	800baba <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 800baa8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800baac:	d80f      	bhi.n	800bace <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 800baae:	2b00      	cmp	r3, #0
 800bab0:	d011      	beq.n	800bad6 <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 800bab2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bab6:	d00e      	beq.n	800bad6 <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 800bab8:	e009      	b.n	800bace <HAL_RCCEx_PeriphCLKConfig+0x4c6>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800baba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800babe:	3308      	adds	r3, #8
 800bac0:	4618      	mov	r0, r3
 800bac2:	f000 fb61 	bl	800c188 <RCCEx_PLL2_Config>
 800bac6:	4603      	mov	r3, r0
 800bac8:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 800bacc:	e004      	b.n	800bad8 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800bace:	2301      	movs	r3, #1
 800bad0:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 800bad4:	e000      	b.n	800bad8 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
        break;
 800bad6:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bad8:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800badc:	2b00      	cmp	r3, #0
 800bade:	d10d      	bne.n	800bafc <HAL_RCCEx_PeriphCLKConfig+0x4f4>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 800bae0:	4b5a      	ldr	r3, [pc, #360]	; (800bc4c <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800bae2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800bae6:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 800baea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800baee:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800baf2:	4a56      	ldr	r2, [pc, #344]	; (800bc4c <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800baf4:	430b      	orrs	r3, r1
 800baf6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800bafa:	e003      	b.n	800bb04 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bafc:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800bb00:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 800bb04:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800bb08:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb0c:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800bb10:	663b      	str	r3, [r7, #96]	; 0x60
 800bb12:	2300      	movs	r3, #0
 800bb14:	667b      	str	r3, [r7, #100]	; 0x64
 800bb16:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800bb1a:	460b      	mov	r3, r1
 800bb1c:	4313      	orrs	r3, r2
 800bb1e:	d03f      	beq.n	800bba0 <HAL_RCCEx_PeriphCLKConfig+0x598>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 800bb20:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800bb24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bb28:	2b04      	cmp	r3, #4
 800bb2a:	d81e      	bhi.n	800bb6a <HAL_RCCEx_PeriphCLKConfig+0x562>
 800bb2c:	a201      	add	r2, pc, #4	; (adr r2, 800bb34 <HAL_RCCEx_PeriphCLKConfig+0x52c>)
 800bb2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb32:	bf00      	nop
 800bb34:	0800bb73 	.word	0x0800bb73
 800bb38:	0800bb49 	.word	0x0800bb49
 800bb3c:	0800bb57 	.word	0x0800bb57
 800bb40:	0800bb73 	.word	0x0800bb73
 800bb44:	0800bb73 	.word	0x0800bb73
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800bb48:	4b40      	ldr	r3, [pc, #256]	; (800bc4c <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800bb4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bb4c:	4a3f      	ldr	r2, [pc, #252]	; (800bc4c <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800bb4e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800bb52:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 800bb54:	e00e      	b.n	800bb74 <HAL_RCCEx_PeriphCLKConfig+0x56c>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800bb56:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800bb5a:	332c      	adds	r3, #44	; 0x2c
 800bb5c:	4618      	mov	r0, r3
 800bb5e:	f000 fbab 	bl	800c2b8 <RCCEx_PLL3_Config>
 800bb62:	4603      	mov	r3, r0
 800bb64:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 800bb68:	e004      	b.n	800bb74 <HAL_RCCEx_PeriphCLKConfig+0x56c>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800bb6a:	2301      	movs	r3, #1
 800bb6c:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 800bb70:	e000      	b.n	800bb74 <HAL_RCCEx_PeriphCLKConfig+0x56c>
        break;
 800bb72:	bf00      	nop
    }
    if (ret == HAL_OK)
 800bb74:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800bb78:	2b00      	cmp	r3, #0
 800bb7a:	d10d      	bne.n	800bb98 <HAL_RCCEx_PeriphCLKConfig+0x590>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 800bb7c:	4b33      	ldr	r3, [pc, #204]	; (800bc4c <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800bb7e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800bb82:	f023 0107 	bic.w	r1, r3, #7
 800bb86:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800bb8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bb8e:	4a2f      	ldr	r2, [pc, #188]	; (800bc4c <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800bb90:	430b      	orrs	r3, r1
 800bb92:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 800bb96:	e003      	b.n	800bba0 <HAL_RCCEx_PeriphCLKConfig+0x598>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bb98:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800bb9c:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 800bba0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800bba4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bba8:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800bbac:	65bb      	str	r3, [r7, #88]	; 0x58
 800bbae:	2300      	movs	r3, #0
 800bbb0:	65fb      	str	r3, [r7, #92]	; 0x5c
 800bbb2:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800bbb6:	460b      	mov	r3, r1
 800bbb8:	4313      	orrs	r3, r2
 800bbba:	d04d      	beq.n	800bc58 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));
    switch (pPeriphClkInit->Adf1ClockSelection)
 800bbbc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800bbc0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bbc4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800bbc8:	d028      	beq.n	800bc1c <HAL_RCCEx_PeriphCLKConfig+0x614>
 800bbca:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800bbce:	d821      	bhi.n	800bc14 <HAL_RCCEx_PeriphCLKConfig+0x60c>
 800bbd0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800bbd4:	d024      	beq.n	800bc20 <HAL_RCCEx_PeriphCLKConfig+0x618>
 800bbd6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800bbda:	d81b      	bhi.n	800bc14 <HAL_RCCEx_PeriphCLKConfig+0x60c>
 800bbdc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bbe0:	d00e      	beq.n	800bc00 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
 800bbe2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bbe6:	d815      	bhi.n	800bc14 <HAL_RCCEx_PeriphCLKConfig+0x60c>
 800bbe8:	2b00      	cmp	r3, #0
 800bbea:	d01b      	beq.n	800bc24 <HAL_RCCEx_PeriphCLKConfig+0x61c>
 800bbec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bbf0:	d110      	bne.n	800bc14 <HAL_RCCEx_PeriphCLKConfig+0x60c>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800bbf2:	4b16      	ldr	r3, [pc, #88]	; (800bc4c <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800bbf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bbf6:	4a15      	ldr	r2, [pc, #84]	; (800bc4c <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800bbf8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800bbfc:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 800bbfe:	e012      	b.n	800bc26 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800bc00:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800bc04:	332c      	adds	r3, #44	; 0x2c
 800bc06:	4618      	mov	r0, r3
 800bc08:	f000 fb56 	bl	800c2b8 <RCCEx_PLL3_Config>
 800bc0c:	4603      	mov	r3, r0
 800bc0e:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 800bc12:	e008      	b.n	800bc26 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800bc14:	2301      	movs	r3, #1
 800bc16:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 800bc1a:	e004      	b.n	800bc26 <HAL_RCCEx_PeriphCLKConfig+0x61e>
        break;
 800bc1c:	bf00      	nop
 800bc1e:	e002      	b.n	800bc26 <HAL_RCCEx_PeriphCLKConfig+0x61e>
        break;
 800bc20:	bf00      	nop
 800bc22:	e000      	b.n	800bc26 <HAL_RCCEx_PeriphCLKConfig+0x61e>
        break;
 800bc24:	bf00      	nop
    }
    if (ret == HAL_OK)
 800bc26:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800bc2a:	2b00      	cmp	r3, #0
 800bc2c:	d110      	bne.n	800bc50 <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 800bc2e:	4b07      	ldr	r3, [pc, #28]	; (800bc4c <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800bc30:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800bc34:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 800bc38:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800bc3c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bc40:	4a02      	ldr	r2, [pc, #8]	; (800bc4c <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800bc42:	430b      	orrs	r3, r1
 800bc44:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800bc48:	e006      	b.n	800bc58 <HAL_RCCEx_PeriphCLKConfig+0x650>
 800bc4a:	bf00      	nop
 800bc4c:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bc50:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800bc54:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800bc58:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800bc5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc60:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800bc64:	653b      	str	r3, [r7, #80]	; 0x50
 800bc66:	2300      	movs	r3, #0
 800bc68:	657b      	str	r3, [r7, #84]	; 0x54
 800bc6a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800bc6e:	460b      	mov	r3, r1
 800bc70:	4313      	orrs	r3, r2
 800bc72:	f000 80b5 	beq.w	800bde0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800bc76:	2300      	movs	r3, #0
 800bc78:	f887 30e1 	strb.w	r3, [r7, #225]	; 0xe1
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));
    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800bc7c:	4b9d      	ldr	r3, [pc, #628]	; (800bef4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800bc7e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800bc82:	f003 0304 	and.w	r3, r3, #4
 800bc86:	2b00      	cmp	r3, #0
 800bc88:	d113      	bne.n	800bcb2 <HAL_RCCEx_PeriphCLKConfig+0x6aa>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800bc8a:	4b9a      	ldr	r3, [pc, #616]	; (800bef4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800bc8c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800bc90:	4a98      	ldr	r2, [pc, #608]	; (800bef4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800bc92:	f043 0304 	orr.w	r3, r3, #4
 800bc96:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800bc9a:	4b96      	ldr	r3, [pc, #600]	; (800bef4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800bc9c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800bca0:	f003 0304 	and.w	r3, r3, #4
 800bca4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800bca8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
      pwrclkchanged = SET;
 800bcac:	2301      	movs	r3, #1
 800bcae:	f887 30e1 	strb.w	r3, [r7, #225]	; 0xe1
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 800bcb2:	4b91      	ldr	r3, [pc, #580]	; (800bef8 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 800bcb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bcb6:	4a90      	ldr	r2, [pc, #576]	; (800bef8 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 800bcb8:	f043 0301 	orr.w	r3, r3, #1
 800bcbc:	6293      	str	r3, [r2, #40]	; 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800bcbe:	f7f9 fdd7 	bl	8005870 <HAL_GetTick>
 800bcc2:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800bcc6:	e00b      	b.n	800bce0 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800bcc8:	f7f9 fdd2 	bl	8005870 <HAL_GetTick>
 800bccc:	4602      	mov	r2, r0
 800bcce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bcd2:	1ad3      	subs	r3, r2, r3
 800bcd4:	2b02      	cmp	r3, #2
 800bcd6:	d903      	bls.n	800bce0 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      {
        ret = HAL_TIMEOUT;
 800bcd8:	2303      	movs	r3, #3
 800bcda:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 800bcde:	e005      	b.n	800bcec <HAL_RCCEx_PeriphCLKConfig+0x6e4>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800bce0:	4b85      	ldr	r3, [pc, #532]	; (800bef8 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 800bce2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bce4:	f003 0301 	and.w	r3, r3, #1
 800bce8:	2b00      	cmp	r3, #0
 800bcea:	d0ed      	beq.n	800bcc8 <HAL_RCCEx_PeriphCLKConfig+0x6c0>
      }
    }

    if (ret == HAL_OK)
 800bcec:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800bcf0:	2b00      	cmp	r3, #0
 800bcf2:	d165      	bne.n	800bdc0 <HAL_RCCEx_PeriphCLKConfig+0x7b8>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800bcf4:	4b7f      	ldr	r3, [pc, #508]	; (800bef4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800bcf6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800bcfa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bcfe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 800bd02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bd06:	2b00      	cmp	r3, #0
 800bd08:	d023      	beq.n	800bd52 <HAL_RCCEx_PeriphCLKConfig+0x74a>
 800bd0a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800bd0e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 800bd12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bd16:	4293      	cmp	r3, r2
 800bd18:	d01b      	beq.n	800bd52 <HAL_RCCEx_PeriphCLKConfig+0x74a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800bd1a:	4b76      	ldr	r3, [pc, #472]	; (800bef4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800bd1c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800bd20:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bd24:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800bd28:	4b72      	ldr	r3, [pc, #456]	; (800bef4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800bd2a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800bd2e:	4a71      	ldr	r2, [pc, #452]	; (800bef4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800bd30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800bd34:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 800bd38:	4b6e      	ldr	r3, [pc, #440]	; (800bef4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800bd3a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800bd3e:	4a6d      	ldr	r2, [pc, #436]	; (800bef4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800bd40:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800bd44:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800bd48:	4a6a      	ldr	r2, [pc, #424]	; (800bef4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800bd4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bd4e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800bd52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bd56:	f003 0301 	and.w	r3, r3, #1
 800bd5a:	2b00      	cmp	r3, #0
 800bd5c:	d019      	beq.n	800bd92 <HAL_RCCEx_PeriphCLKConfig+0x78a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bd5e:	f7f9 fd87 	bl	8005870 <HAL_GetTick>
 800bd62:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800bd66:	e00d      	b.n	800bd84 <HAL_RCCEx_PeriphCLKConfig+0x77c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800bd68:	f7f9 fd82 	bl	8005870 <HAL_GetTick>
 800bd6c:	4602      	mov	r2, r0
 800bd6e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bd72:	1ad2      	subs	r2, r2, r3
 800bd74:	f241 3388 	movw	r3, #5000	; 0x1388
 800bd78:	429a      	cmp	r2, r3
 800bd7a:	d903      	bls.n	800bd84 <HAL_RCCEx_PeriphCLKConfig+0x77c>
          {
            ret = HAL_TIMEOUT;
 800bd7c:	2303      	movs	r3, #3
 800bd7e:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
            break;
 800bd82:	e006      	b.n	800bd92 <HAL_RCCEx_PeriphCLKConfig+0x78a>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800bd84:	4b5b      	ldr	r3, [pc, #364]	; (800bef4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800bd86:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800bd8a:	f003 0302 	and.w	r3, r3, #2
 800bd8e:	2b00      	cmp	r3, #0
 800bd90:	d0ea      	beq.n	800bd68 <HAL_RCCEx_PeriphCLKConfig+0x760>
          }
        }
      }

      if (ret == HAL_OK)
 800bd92:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800bd96:	2b00      	cmp	r3, #0
 800bd98:	d10d      	bne.n	800bdb6 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 800bd9a:	4b56      	ldr	r3, [pc, #344]	; (800bef4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800bd9c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800bda0:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800bda4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800bda8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800bdac:	4a51      	ldr	r2, [pc, #324]	; (800bef4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800bdae:	430b      	orrs	r3, r1
 800bdb0:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800bdb4:	e008      	b.n	800bdc8 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800bdb6:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800bdba:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
 800bdbe:	e003      	b.n	800bdc8 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bdc0:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800bdc4:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800bdc8:	f897 30e1 	ldrb.w	r3, [r7, #225]	; 0xe1
 800bdcc:	2b01      	cmp	r3, #1
 800bdce:	d107      	bne.n	800bde0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800bdd0:	4b48      	ldr	r3, [pc, #288]	; (800bef4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800bdd2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800bdd6:	4a47      	ldr	r2, [pc, #284]	; (800bef4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800bdd8:	f023 0304 	bic.w	r3, r3, #4
 800bddc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }

  /*-------------------------------------- ICLK Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 800bde0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800bde4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bde8:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800bdec:	64bb      	str	r3, [r7, #72]	; 0x48
 800bdee:	2300      	movs	r3, #0
 800bdf0:	64fb      	str	r3, [r7, #76]	; 0x4c
 800bdf2:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800bdf6:	460b      	mov	r3, r1
 800bdf8:	4313      	orrs	r3, r2
 800bdfa:	d042      	beq.n	800be82 <HAL_RCCEx_PeriphCLKConfig+0x87a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(pPeriphClkInit->IclkClockSelection));

    switch (pPeriphClkInit->IclkClockSelection)
 800bdfc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800be00:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800be04:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800be08:	d022      	beq.n	800be50 <HAL_RCCEx_PeriphCLKConfig+0x848>
 800be0a:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800be0e:	d81b      	bhi.n	800be48 <HAL_RCCEx_PeriphCLKConfig+0x840>
 800be10:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800be14:	d011      	beq.n	800be3a <HAL_RCCEx_PeriphCLKConfig+0x832>
 800be16:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800be1a:	d815      	bhi.n	800be48 <HAL_RCCEx_PeriphCLKConfig+0x840>
 800be1c:	2b00      	cmp	r3, #0
 800be1e:	d019      	beq.n	800be54 <HAL_RCCEx_PeriphCLKConfig+0x84c>
 800be20:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800be24:	d110      	bne.n	800be48 <HAL_RCCEx_PeriphCLKConfig+0x840>
    {
      case RCC_ICLK_CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800be26:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800be2a:	3308      	adds	r3, #8
 800be2c:	4618      	mov	r0, r3
 800be2e:	f000 f9ab 	bl	800c188 <RCCEx_PLL2_Config>
 800be32:	4603      	mov	r3, r0
 800be34:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 800be38:	e00d      	b.n	800be56 <HAL_RCCEx_PeriphCLKConfig+0x84e>
      case RCC_ICLK_CLKSOURCE_PLL1:
        /* Enable ICLK Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800be3a:	4b2e      	ldr	r3, [pc, #184]	; (800bef4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800be3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800be3e:	4a2d      	ldr	r2, [pc, #180]	; (800bef4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800be40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800be44:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 800be46:	e006      	b.n	800be56 <HAL_RCCEx_PeriphCLKConfig+0x84e>
      case RCC_ICLK_CLKSOURCE_HSI48:
        break;
      case RCC_ICLK_CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800be48:	2301      	movs	r3, #1
 800be4a:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 800be4e:	e002      	b.n	800be56 <HAL_RCCEx_PeriphCLKConfig+0x84e>
        break;
 800be50:	bf00      	nop
 800be52:	e000      	b.n	800be56 <HAL_RCCEx_PeriphCLKConfig+0x84e>
        break;
 800be54:	bf00      	nop
    }
    if (ret == HAL_OK)
 800be56:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800be5a:	2b00      	cmp	r3, #0
 800be5c:	d10d      	bne.n	800be7a <HAL_RCCEx_PeriphCLKConfig+0x872>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 800be5e:	4b25      	ldr	r3, [pc, #148]	; (800bef4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800be60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800be64:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 800be68:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800be6c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800be70:	4a20      	ldr	r2, [pc, #128]	; (800bef4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800be72:	430b      	orrs	r3, r1
 800be74:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800be78:	e003      	b.n	800be82 <HAL_RCCEx_PeriphCLKConfig+0x87a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800be7a:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800be7e:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800be82:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800be86:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be8a:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800be8e:	643b      	str	r3, [r7, #64]	; 0x40
 800be90:	2300      	movs	r3, #0
 800be92:	647b      	str	r3, [r7, #68]	; 0x44
 800be94:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800be98:	460b      	mov	r3, r1
 800be9a:	4313      	orrs	r3, r2
 800be9c:	d032      	beq.n	800bf04 <HAL_RCCEx_PeriphCLKConfig+0x8fc>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 800be9e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800bea2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800bea6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800beaa:	d00b      	beq.n	800bec4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 800beac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800beb0:	d804      	bhi.n	800bebc <HAL_RCCEx_PeriphCLKConfig+0x8b4>
 800beb2:	2b00      	cmp	r3, #0
 800beb4:	d008      	beq.n	800bec8 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
 800beb6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800beba:	d007      	beq.n	800becc <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 800bebc:	2301      	movs	r3, #1
 800bebe:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 800bec2:	e004      	b.n	800bece <HAL_RCCEx_PeriphCLKConfig+0x8c6>
        break;
 800bec4:	bf00      	nop
 800bec6:	e002      	b.n	800bece <HAL_RCCEx_PeriphCLKConfig+0x8c6>
        break;
 800bec8:	bf00      	nop
 800beca:	e000      	b.n	800bece <HAL_RCCEx_PeriphCLKConfig+0x8c6>
        break;
 800becc:	bf00      	nop
    }
    if (ret == HAL_OK)
 800bece:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800bed2:	2b00      	cmp	r3, #0
 800bed4:	d112      	bne.n	800befc <HAL_RCCEx_PeriphCLKConfig+0x8f4>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 800bed6:	4b07      	ldr	r3, [pc, #28]	; (800bef4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800bed8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800bedc:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800bee0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800bee4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800bee8:	4a02      	ldr	r2, [pc, #8]	; (800bef4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800beea:	430b      	orrs	r3, r1
 800beec:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 800bef0:	e008      	b.n	800bf04 <HAL_RCCEx_PeriphCLKConfig+0x8fc>
 800bef2:	bf00      	nop
 800bef4:	46020c00 	.word	0x46020c00
 800bef8:	46020800 	.word	0x46020800
    }
    else
    {
      /* set overall return value */
      status = ret;
 800befc:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800bf00:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }
  /*-------------------------- SAES clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAES) == RCC_PERIPHCLK_SAES)
 800bf04:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800bf08:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf0c:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800bf10:	63bb      	str	r3, [r7, #56]	; 0x38
 800bf12:	2300      	movs	r3, #0
 800bf14:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bf16:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800bf1a:	460b      	mov	r3, r1
 800bf1c:	4313      	orrs	r3, r2
 800bf1e:	d00c      	beq.n	800bf3a <HAL_RCCEx_PeriphCLKConfig+0x932>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAESCLKSOURCE(pPeriphClkInit->SaesClockSelection));

    /* Configure the SAES clock source */
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
 800bf20:	4b98      	ldr	r3, [pc, #608]	; (800c184 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800bf22:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800bf26:	f423 6100 	bic.w	r1, r3, #2048	; 0x800
 800bf2a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800bf2e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800bf32:	4a94      	ldr	r2, [pc, #592]	; (800c184 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800bf34:	430b      	orrs	r3, r1
 800bf36:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
  }
  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 800bf3a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800bf3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf42:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800bf46:	633b      	str	r3, [r7, #48]	; 0x30
 800bf48:	2300      	movs	r3, #0
 800bf4a:	637b      	str	r3, [r7, #52]	; 0x34
 800bf4c:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800bf50:	460b      	mov	r3, r1
 800bf52:	4313      	orrs	r3, r2
 800bf54:	d019      	beq.n	800bf8a <HAL_RCCEx_PeriphCLKConfig+0x982>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 800bf56:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800bf5a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800bf5e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800bf62:	d105      	bne.n	800bf70 <HAL_RCCEx_PeriphCLKConfig+0x968>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800bf64:	4b87      	ldr	r3, [pc, #540]	; (800c184 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800bf66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bf68:	4a86      	ldr	r2, [pc, #536]	; (800c184 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800bf6a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800bf6e:	6293      	str	r3, [r2, #40]	; 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 800bf70:	4b84      	ldr	r3, [pc, #528]	; (800c184 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800bf72:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800bf76:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 800bf7a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800bf7e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800bf82:	4a80      	ldr	r2, [pc, #512]	; (800c184 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800bf84:	430b      	orrs	r3, r1
 800bf86:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 800bf8a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800bf8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf92:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800bf96:	62bb      	str	r3, [r7, #40]	; 0x28
 800bf98:	2300      	movs	r3, #0
 800bf9a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bf9c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800bfa0:	460b      	mov	r3, r1
 800bfa2:	4313      	orrs	r3, r2
 800bfa4:	d00c      	beq.n	800bfc0 <HAL_RCCEx_PeriphCLKConfig+0x9b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 800bfa6:	4b77      	ldr	r3, [pc, #476]	; (800c184 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800bfa8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800bfac:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800bfb0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800bfb4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800bfb8:	4972      	ldr	r1, [pc, #456]	; (800c184 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800bfba:	4313      	orrs	r3, r2
 800bfbc:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 800bfc0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800bfc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfc8:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 800bfcc:	623b      	str	r3, [r7, #32]
 800bfce:	2300      	movs	r3, #0
 800bfd0:	627b      	str	r3, [r7, #36]	; 0x24
 800bfd2:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800bfd6:	460b      	mov	r3, r1
 800bfd8:	4313      	orrs	r3, r2
 800bfda:	d00c      	beq.n	800bff6 <HAL_RCCEx_PeriphCLKConfig+0x9ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 800bfdc:	4b69      	ldr	r3, [pc, #420]	; (800c184 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800bfde:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800bfe2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800bfe6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800bfea:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800bfee:	4965      	ldr	r1, [pc, #404]	; (800c184 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800bff0:	4313      	orrs	r3, r2
 800bff2:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 800bff6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800bffa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bffe:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 800c002:	61bb      	str	r3, [r7, #24]
 800c004:	2300      	movs	r3, #0
 800c006:	61fb      	str	r3, [r7, #28]
 800c008:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800c00c:	460b      	mov	r3, r1
 800c00e:	4313      	orrs	r3, r2
 800c010:	d00c      	beq.n	800c02c <HAL_RCCEx_PeriphCLKConfig+0xa24>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 800c012:	4b5c      	ldr	r3, [pc, #368]	; (800c184 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800c014:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800c018:	f023 0218 	bic.w	r2, r3, #24
 800c01c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800c020:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800c024:	4957      	ldr	r1, [pc, #348]	; (800c184 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800c026:	4313      	orrs	r3, r2
 800c028:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800c02c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800c030:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c034:	f002 6380 	and.w	r3, r2, #67108864	; 0x4000000
 800c038:	613b      	str	r3, [r7, #16]
 800c03a:	2300      	movs	r3, #0
 800c03c:	617b      	str	r3, [r7, #20]
 800c03e:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800c042:	460b      	mov	r3, r1
 800c044:	4313      	orrs	r3, r2
 800c046:	d032      	beq.n	800c0ae <HAL_RCCEx_PeriphCLKConfig+0xaa6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 800c048:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800c04c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800c050:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c054:	d105      	bne.n	800c062 <HAL_RCCEx_PeriphCLKConfig+0xa5a>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c056:	4b4b      	ldr	r3, [pc, #300]	; (800c184 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800c058:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c05a:	4a4a      	ldr	r2, [pc, #296]	; (800c184 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800c05c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c060:	6293      	str	r3, [r2, #40]	; 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 800c062:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800c066:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800c06a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800c06e:	d108      	bne.n	800c082 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
    {
      /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800c070:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800c074:	3308      	adds	r3, #8
 800c076:	4618      	mov	r0, r3
 800c078:	f000 f886 	bl	800c188 <RCCEx_PLL2_Config>
 800c07c:	4603      	mov	r3, r0
 800c07e:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
    }
    if (ret == HAL_OK)
 800c082:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800c086:	2b00      	cmp	r3, #0
 800c088:	d10d      	bne.n	800c0a6 <HAL_RCCEx_PeriphCLKConfig+0xa9e>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 800c08a:	4b3e      	ldr	r3, [pc, #248]	; (800c184 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800c08c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800c090:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800c094:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800c098:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800c09c:	4939      	ldr	r1, [pc, #228]	; (800c184 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800c09e:	4313      	orrs	r3, r2
 800c0a0:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 800c0a4:	e003      	b.n	800c0ae <HAL_RCCEx_PeriphCLKConfig+0xaa6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c0a6:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800c0aa:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }
#endif /* defined(HSPI1) */

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 800c0ae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800c0b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0b6:	f002 6300 	and.w	r3, r2, #134217728	; 0x8000000
 800c0ba:	60bb      	str	r3, [r7, #8]
 800c0bc:	2300      	movs	r3, #0
 800c0be:	60fb      	str	r3, [r7, #12]
 800c0c0:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800c0c4:	460b      	mov	r3, r1
 800c0c6:	4313      	orrs	r3, r2
 800c0c8:	d03a      	beq.n	800c140 <HAL_RCCEx_PeriphCLKConfig+0xb38>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 800c0ca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800c0ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c0d2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c0d6:	d00e      	beq.n	800c0f6 <HAL_RCCEx_PeriphCLKConfig+0xaee>
 800c0d8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c0dc:	d815      	bhi.n	800c10a <HAL_RCCEx_PeriphCLKConfig+0xb02>
 800c0de:	2b00      	cmp	r3, #0
 800c0e0:	d017      	beq.n	800c112 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 800c0e2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800c0e6:	d110      	bne.n	800c10a <HAL_RCCEx_PeriphCLKConfig+0xb02>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c0e8:	4b26      	ldr	r3, [pc, #152]	; (800c184 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800c0ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c0ec:	4a25      	ldr	r2, [pc, #148]	; (800c184 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800c0ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c0f2:	6293      	str	r3, [r2, #40]	; 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 800c0f4:	e00e      	b.n	800c114 <HAL_RCCEx_PeriphCLKConfig+0xb0c>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800c0f6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800c0fa:	3308      	adds	r3, #8
 800c0fc:	4618      	mov	r0, r3
 800c0fe:	f000 f843 	bl	800c188 <RCCEx_PLL2_Config>
 800c102:	4603      	mov	r3, r0
 800c104:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 800c108:	e004      	b.n	800c114 <HAL_RCCEx_PeriphCLKConfig+0xb0c>
      default:
        ret = HAL_ERROR;
 800c10a:	2301      	movs	r3, #1
 800c10c:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 800c110:	e000      	b.n	800c114 <HAL_RCCEx_PeriphCLKConfig+0xb0c>
        break;
 800c112:	bf00      	nop
    }
    if (ret == HAL_OK)
 800c114:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800c118:	2b00      	cmp	r3, #0
 800c11a:	d10d      	bne.n	800c138 <HAL_RCCEx_PeriphCLKConfig+0xb30>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 800c11c:	4b19      	ldr	r3, [pc, #100]	; (800c184 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800c11e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800c122:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800c126:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800c12a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c12e:	4915      	ldr	r1, [pc, #84]	; (800c184 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800c130:	4313      	orrs	r3, r2
 800c132:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
 800c136:	e003      	b.n	800c140 <HAL_RCCEx_PeriphCLKConfig+0xb38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c138:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800c13c:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 800c140:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800c144:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c148:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 800c14c:	603b      	str	r3, [r7, #0]
 800c14e:	2300      	movs	r3, #0
 800c150:	607b      	str	r3, [r7, #4]
 800c152:	e9d7 1200 	ldrd	r1, r2, [r7]
 800c156:	460b      	mov	r3, r1
 800c158:	4313      	orrs	r3, r2
 800c15a:	d00c      	beq.n	800c176 <HAL_RCCEx_PeriphCLKConfig+0xb6e>

    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 800c15c:	4b09      	ldr	r3, [pc, #36]	; (800c184 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800c15e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800c162:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800c166:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800c16a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800c16e:	4905      	ldr	r1, [pc, #20]	; (800c184 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800c170:	4313      	orrs	r3, r2
 800c172:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
    }
  }

#endif /* defined(USB_OTG_HS) */

  return status;
 800c176:	f897 30e2 	ldrb.w	r3, [r7, #226]	; 0xe2
}
 800c17a:	4618      	mov	r0, r3
 800c17c:	37e8      	adds	r7, #232	; 0xe8
 800c17e:	46bd      	mov	sp, r7
 800c180:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c184:	46020c00 	.word	0x46020c00

0800c188 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2)
{
 800c188:	b580      	push	{r7, lr}
 800c18a:	b084      	sub	sp, #16
 800c18c:	af00      	add	r7, sp, #0
 800c18e:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 800c190:	4b47      	ldr	r3, [pc, #284]	; (800c2b0 <RCCEx_PLL2_Config+0x128>)
 800c192:	681b      	ldr	r3, [r3, #0]
 800c194:	4a46      	ldr	r2, [pc, #280]	; (800c2b0 <RCCEx_PLL2_Config+0x128>)
 800c196:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800c19a:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800c19c:	f7f9 fb68 	bl	8005870 <HAL_GetTick>
 800c1a0:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800c1a2:	e008      	b.n	800c1b6 <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800c1a4:	f7f9 fb64 	bl	8005870 <HAL_GetTick>
 800c1a8:	4602      	mov	r2, r0
 800c1aa:	68fb      	ldr	r3, [r7, #12]
 800c1ac:	1ad3      	subs	r3, r2, r3
 800c1ae:	2b02      	cmp	r3, #2
 800c1b0:	d901      	bls.n	800c1b6 <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800c1b2:	2303      	movs	r3, #3
 800c1b4:	e077      	b.n	800c2a6 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800c1b6:	4b3e      	ldr	r3, [pc, #248]	; (800c2b0 <RCCEx_PLL2_Config+0x128>)
 800c1b8:	681b      	ldr	r3, [r3, #0]
 800c1ba:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c1be:	2b00      	cmp	r3, #0
 800c1c0:	d1f0      	bne.n	800c1a4 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 800c1c2:	4b3b      	ldr	r3, [pc, #236]	; (800c2b0 <RCCEx_PLL2_Config+0x128>)
 800c1c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c1c6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800c1ca:	f023 0303 	bic.w	r3, r3, #3
 800c1ce:	687a      	ldr	r2, [r7, #4]
 800c1d0:	6811      	ldr	r1, [r2, #0]
 800c1d2:	687a      	ldr	r2, [r7, #4]
 800c1d4:	6852      	ldr	r2, [r2, #4]
 800c1d6:	3a01      	subs	r2, #1
 800c1d8:	0212      	lsls	r2, r2, #8
 800c1da:	430a      	orrs	r2, r1
 800c1dc:	4934      	ldr	r1, [pc, #208]	; (800c2b0 <RCCEx_PLL2_Config+0x128>)
 800c1de:	4313      	orrs	r3, r2
 800c1e0:	62cb      	str	r3, [r1, #44]	; 0x2c
 800c1e2:	4b33      	ldr	r3, [pc, #204]	; (800c2b0 <RCCEx_PLL2_Config+0x128>)
 800c1e4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c1e6:	4b33      	ldr	r3, [pc, #204]	; (800c2b4 <RCCEx_PLL2_Config+0x12c>)
 800c1e8:	4013      	ands	r3, r2
 800c1ea:	687a      	ldr	r2, [r7, #4]
 800c1ec:	6892      	ldr	r2, [r2, #8]
 800c1ee:	3a01      	subs	r2, #1
 800c1f0:	f3c2 0108 	ubfx	r1, r2, #0, #9
 800c1f4:	687a      	ldr	r2, [r7, #4]
 800c1f6:	68d2      	ldr	r2, [r2, #12]
 800c1f8:	3a01      	subs	r2, #1
 800c1fa:	0252      	lsls	r2, r2, #9
 800c1fc:	b292      	uxth	r2, r2
 800c1fe:	4311      	orrs	r1, r2
 800c200:	687a      	ldr	r2, [r7, #4]
 800c202:	6912      	ldr	r2, [r2, #16]
 800c204:	3a01      	subs	r2, #1
 800c206:	0412      	lsls	r2, r2, #16
 800c208:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 800c20c:	4311      	orrs	r1, r2
 800c20e:	687a      	ldr	r2, [r7, #4]
 800c210:	6952      	ldr	r2, [r2, #20]
 800c212:	3a01      	subs	r2, #1
 800c214:	0612      	lsls	r2, r2, #24
 800c216:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 800c21a:	430a      	orrs	r2, r1
 800c21c:	4924      	ldr	r1, [pc, #144]	; (800c2b0 <RCCEx_PLL2_Config+0x128>)
 800c21e:	4313      	orrs	r3, r2
 800c220:	63cb      	str	r3, [r1, #60]	; 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 800c222:	4b23      	ldr	r3, [pc, #140]	; (800c2b0 <RCCEx_PLL2_Config+0x128>)
 800c224:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c226:	f023 020c 	bic.w	r2, r3, #12
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	699b      	ldr	r3, [r3, #24]
 800c22e:	4920      	ldr	r1, [pc, #128]	; (800c2b0 <RCCEx_PLL2_Config+0x128>)
 800c230:	4313      	orrs	r3, r2
 800c232:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 800c234:	4b1e      	ldr	r3, [pc, #120]	; (800c2b0 <RCCEx_PLL2_Config+0x128>)
 800c236:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	6a1b      	ldr	r3, [r3, #32]
 800c23c:	491c      	ldr	r1, [pc, #112]	; (800c2b0 <RCCEx_PLL2_Config+0x128>)
 800c23e:	4313      	orrs	r3, r2
 800c240:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 800c242:	4b1b      	ldr	r3, [pc, #108]	; (800c2b0 <RCCEx_PLL2_Config+0x128>)
 800c244:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c246:	4a1a      	ldr	r2, [pc, #104]	; (800c2b0 <RCCEx_PLL2_Config+0x128>)
 800c248:	f023 0310 	bic.w	r3, r3, #16
 800c24c:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800c24e:	4b18      	ldr	r3, [pc, #96]	; (800c2b0 <RCCEx_PLL2_Config+0x128>)
 800c250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c252:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c256:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800c25a:	687a      	ldr	r2, [r7, #4]
 800c25c:	69d2      	ldr	r2, [r2, #28]
 800c25e:	00d2      	lsls	r2, r2, #3
 800c260:	4913      	ldr	r1, [pc, #76]	; (800c2b0 <RCCEx_PLL2_Config+0x128>)
 800c262:	4313      	orrs	r3, r2
 800c264:	640b      	str	r3, [r1, #64]	; 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 800c266:	4b12      	ldr	r3, [pc, #72]	; (800c2b0 <RCCEx_PLL2_Config+0x128>)
 800c268:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c26a:	4a11      	ldr	r2, [pc, #68]	; (800c2b0 <RCCEx_PLL2_Config+0x128>)
 800c26c:	f043 0310 	orr.w	r3, r3, #16
 800c270:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 800c272:	4b0f      	ldr	r3, [pc, #60]	; (800c2b0 <RCCEx_PLL2_Config+0x128>)
 800c274:	681b      	ldr	r3, [r3, #0]
 800c276:	4a0e      	ldr	r2, [pc, #56]	; (800c2b0 <RCCEx_PLL2_Config+0x128>)
 800c278:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800c27c:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800c27e:	f7f9 faf7 	bl	8005870 <HAL_GetTick>
 800c282:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800c284:	e008      	b.n	800c298 <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800c286:	f7f9 faf3 	bl	8005870 <HAL_GetTick>
 800c28a:	4602      	mov	r2, r0
 800c28c:	68fb      	ldr	r3, [r7, #12]
 800c28e:	1ad3      	subs	r3, r2, r3
 800c290:	2b02      	cmp	r3, #2
 800c292:	d901      	bls.n	800c298 <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 800c294:	2303      	movs	r3, #3
 800c296:	e006      	b.n	800c2a6 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800c298:	4b05      	ldr	r3, [pc, #20]	; (800c2b0 <RCCEx_PLL2_Config+0x128>)
 800c29a:	681b      	ldr	r3, [r3, #0]
 800c29c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c2a0:	2b00      	cmp	r3, #0
 800c2a2:	d0f0      	beq.n	800c286 <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 800c2a4:	2300      	movs	r3, #0

}
 800c2a6:	4618      	mov	r0, r3
 800c2a8:	3710      	adds	r7, #16
 800c2aa:	46bd      	mov	sp, r7
 800c2ac:	bd80      	pop	{r7, pc}
 800c2ae:	bf00      	nop
 800c2b0:	46020c00 	.word	0x46020c00
 800c2b4:	80800000 	.word	0x80800000

0800c2b8 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3)
{
 800c2b8:	b580      	push	{r7, lr}
 800c2ba:	b084      	sub	sp, #16
 800c2bc:	af00      	add	r7, sp, #0
 800c2be:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 800c2c0:	4b47      	ldr	r3, [pc, #284]	; (800c3e0 <RCCEx_PLL3_Config+0x128>)
 800c2c2:	681b      	ldr	r3, [r3, #0]
 800c2c4:	4a46      	ldr	r2, [pc, #280]	; (800c3e0 <RCCEx_PLL3_Config+0x128>)
 800c2c6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c2ca:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800c2cc:	f7f9 fad0 	bl	8005870 <HAL_GetTick>
 800c2d0:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800c2d2:	e008      	b.n	800c2e6 <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800c2d4:	f7f9 facc 	bl	8005870 <HAL_GetTick>
 800c2d8:	4602      	mov	r2, r0
 800c2da:	68fb      	ldr	r3, [r7, #12]
 800c2dc:	1ad3      	subs	r3, r2, r3
 800c2de:	2b02      	cmp	r3, #2
 800c2e0:	d901      	bls.n	800c2e6 <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800c2e2:	2303      	movs	r3, #3
 800c2e4:	e077      	b.n	800c3d6 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800c2e6:	4b3e      	ldr	r3, [pc, #248]	; (800c3e0 <RCCEx_PLL3_Config+0x128>)
 800c2e8:	681b      	ldr	r3, [r3, #0]
 800c2ea:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c2ee:	2b00      	cmp	r3, #0
 800c2f0:	d1f0      	bne.n	800c2d4 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 800c2f2:	4b3b      	ldr	r3, [pc, #236]	; (800c3e0 <RCCEx_PLL3_Config+0x128>)
 800c2f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c2f6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800c2fa:	f023 0303 	bic.w	r3, r3, #3
 800c2fe:	687a      	ldr	r2, [r7, #4]
 800c300:	6811      	ldr	r1, [r2, #0]
 800c302:	687a      	ldr	r2, [r7, #4]
 800c304:	6852      	ldr	r2, [r2, #4]
 800c306:	3a01      	subs	r2, #1
 800c308:	0212      	lsls	r2, r2, #8
 800c30a:	430a      	orrs	r2, r1
 800c30c:	4934      	ldr	r1, [pc, #208]	; (800c3e0 <RCCEx_PLL3_Config+0x128>)
 800c30e:	4313      	orrs	r3, r2
 800c310:	630b      	str	r3, [r1, #48]	; 0x30
 800c312:	4b33      	ldr	r3, [pc, #204]	; (800c3e0 <RCCEx_PLL3_Config+0x128>)
 800c314:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c316:	4b33      	ldr	r3, [pc, #204]	; (800c3e4 <RCCEx_PLL3_Config+0x12c>)
 800c318:	4013      	ands	r3, r2
 800c31a:	687a      	ldr	r2, [r7, #4]
 800c31c:	6892      	ldr	r2, [r2, #8]
 800c31e:	3a01      	subs	r2, #1
 800c320:	f3c2 0108 	ubfx	r1, r2, #0, #9
 800c324:	687a      	ldr	r2, [r7, #4]
 800c326:	68d2      	ldr	r2, [r2, #12]
 800c328:	3a01      	subs	r2, #1
 800c32a:	0252      	lsls	r2, r2, #9
 800c32c:	b292      	uxth	r2, r2
 800c32e:	4311      	orrs	r1, r2
 800c330:	687a      	ldr	r2, [r7, #4]
 800c332:	6912      	ldr	r2, [r2, #16]
 800c334:	3a01      	subs	r2, #1
 800c336:	0412      	lsls	r2, r2, #16
 800c338:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 800c33c:	4311      	orrs	r1, r2
 800c33e:	687a      	ldr	r2, [r7, #4]
 800c340:	6952      	ldr	r2, [r2, #20]
 800c342:	3a01      	subs	r2, #1
 800c344:	0612      	lsls	r2, r2, #24
 800c346:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 800c34a:	430a      	orrs	r2, r1
 800c34c:	4924      	ldr	r1, [pc, #144]	; (800c3e0 <RCCEx_PLL3_Config+0x128>)
 800c34e:	4313      	orrs	r3, r2
 800c350:	644b      	str	r3, [r1, #68]	; 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 800c352:	4b23      	ldr	r3, [pc, #140]	; (800c3e0 <RCCEx_PLL3_Config+0x128>)
 800c354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c356:	f023 020c 	bic.w	r2, r3, #12
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	699b      	ldr	r3, [r3, #24]
 800c35e:	4920      	ldr	r1, [pc, #128]	; (800c3e0 <RCCEx_PLL3_Config+0x128>)
 800c360:	4313      	orrs	r3, r2
 800c362:	630b      	str	r3, [r1, #48]	; 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 800c364:	4b1e      	ldr	r3, [pc, #120]	; (800c3e0 <RCCEx_PLL3_Config+0x128>)
 800c366:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	6a1b      	ldr	r3, [r3, #32]
 800c36c:	491c      	ldr	r1, [pc, #112]	; (800c3e0 <RCCEx_PLL3_Config+0x128>)
 800c36e:	4313      	orrs	r3, r2
 800c370:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 800c372:	4b1b      	ldr	r3, [pc, #108]	; (800c3e0 <RCCEx_PLL3_Config+0x128>)
 800c374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c376:	4a1a      	ldr	r2, [pc, #104]	; (800c3e0 <RCCEx_PLL3_Config+0x128>)
 800c378:	f023 0310 	bic.w	r3, r3, #16
 800c37c:	6313      	str	r3, [r2, #48]	; 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800c37e:	4b18      	ldr	r3, [pc, #96]	; (800c3e0 <RCCEx_PLL3_Config+0x128>)
 800c380:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c382:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c386:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800c38a:	687a      	ldr	r2, [r7, #4]
 800c38c:	69d2      	ldr	r2, [r2, #28]
 800c38e:	00d2      	lsls	r2, r2, #3
 800c390:	4913      	ldr	r1, [pc, #76]	; (800c3e0 <RCCEx_PLL3_Config+0x128>)
 800c392:	4313      	orrs	r3, r2
 800c394:	648b      	str	r3, [r1, #72]	; 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 800c396:	4b12      	ldr	r3, [pc, #72]	; (800c3e0 <RCCEx_PLL3_Config+0x128>)
 800c398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c39a:	4a11      	ldr	r2, [pc, #68]	; (800c3e0 <RCCEx_PLL3_Config+0x128>)
 800c39c:	f043 0310 	orr.w	r3, r3, #16
 800c3a0:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 800c3a2:	4b0f      	ldr	r3, [pc, #60]	; (800c3e0 <RCCEx_PLL3_Config+0x128>)
 800c3a4:	681b      	ldr	r3, [r3, #0]
 800c3a6:	4a0e      	ldr	r2, [pc, #56]	; (800c3e0 <RCCEx_PLL3_Config+0x128>)
 800c3a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c3ac:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800c3ae:	f7f9 fa5f 	bl	8005870 <HAL_GetTick>
 800c3b2:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800c3b4:	e008      	b.n	800c3c8 <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800c3b6:	f7f9 fa5b 	bl	8005870 <HAL_GetTick>
 800c3ba:	4602      	mov	r2, r0
 800c3bc:	68fb      	ldr	r3, [r7, #12]
 800c3be:	1ad3      	subs	r3, r2, r3
 800c3c0:	2b02      	cmp	r3, #2
 800c3c2:	d901      	bls.n	800c3c8 <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 800c3c4:	2303      	movs	r3, #3
 800c3c6:	e006      	b.n	800c3d6 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800c3c8:	4b05      	ldr	r3, [pc, #20]	; (800c3e0 <RCCEx_PLL3_Config+0x128>)
 800c3ca:	681b      	ldr	r3, [r3, #0]
 800c3cc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c3d0:	2b00      	cmp	r3, #0
 800c3d2:	d0f0      	beq.n	800c3b6 <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 800c3d4:	2300      	movs	r3, #0
}
 800c3d6:	4618      	mov	r0, r3
 800c3d8:	3710      	adds	r7, #16
 800c3da:	46bd      	mov	sp, r7
 800c3dc:	bd80      	pop	{r7, pc}
 800c3de:	bf00      	nop
 800c3e0:	46020c00 	.word	0x46020c00
 800c3e4:	80800000 	.word	0x80800000

0800c3e8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800c3e8:	b580      	push	{r7, lr}
 800c3ea:	b082      	sub	sp, #8
 800c3ec:	af00      	add	r7, sp, #0
 800c3ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	2b00      	cmp	r3, #0
 800c3f4:	d101      	bne.n	800c3fa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800c3f6:	2301      	movs	r3, #1
 800c3f8:	e049      	b.n	800c48e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c400:	b2db      	uxtb	r3, r3
 800c402:	2b00      	cmp	r3, #0
 800c404:	d106      	bne.n	800c414 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c406:	687b      	ldr	r3, [r7, #4]
 800c408:	2200      	movs	r2, #0
 800c40a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800c40e:	6878      	ldr	r0, [r7, #4]
 800c410:	f000 f841 	bl	800c496 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	2202      	movs	r2, #2
 800c418:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	681a      	ldr	r2, [r3, #0]
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	3304      	adds	r3, #4
 800c424:	4619      	mov	r1, r3
 800c426:	4610      	mov	r0, r2
 800c428:	f000 fa88 	bl	800c93c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	2201      	movs	r2, #1
 800c430:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	2201      	movs	r2, #1
 800c438:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	2201      	movs	r2, #1
 800c440:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	2201      	movs	r2, #1
 800c448:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	2201      	movs	r2, #1
 800c450:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	2201      	movs	r2, #1
 800c458:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	2201      	movs	r2, #1
 800c460:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	2201      	movs	r2, #1
 800c468:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	2201      	movs	r2, #1
 800c470:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	2201      	movs	r2, #1
 800c478:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	2201      	movs	r2, #1
 800c480:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	2201      	movs	r2, #1
 800c488:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c48c:	2300      	movs	r3, #0
}
 800c48e:	4618      	mov	r0, r3
 800c490:	3708      	adds	r7, #8
 800c492:	46bd      	mov	sp, r7
 800c494:	bd80      	pop	{r7, pc}

0800c496 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800c496:	b480      	push	{r7}
 800c498:	b083      	sub	sp, #12
 800c49a:	af00      	add	r7, sp, #0
 800c49c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800c49e:	bf00      	nop
 800c4a0:	370c      	adds	r7, #12
 800c4a2:	46bd      	mov	sp, r7
 800c4a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4a8:	4770      	bx	lr
	...

0800c4ac <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800c4ac:	b480      	push	{r7}
 800c4ae:	b085      	sub	sp, #20
 800c4b0:	af00      	add	r7, sp, #0
 800c4b2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c4ba:	b2db      	uxtb	r3, r3
 800c4bc:	2b01      	cmp	r3, #1
 800c4be:	d001      	beq.n	800c4c4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800c4c0:	2301      	movs	r3, #1
 800c4c2:	e072      	b.n	800c5aa <HAL_TIM_Base_Start_IT+0xfe>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	2202      	movs	r2, #2
 800c4c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	681b      	ldr	r3, [r3, #0]
 800c4d0:	68da      	ldr	r2, [r3, #12]
 800c4d2:	687b      	ldr	r3, [r7, #4]
 800c4d4:	681b      	ldr	r3, [r3, #0]
 800c4d6:	f042 0201 	orr.w	r2, r2, #1
 800c4da:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	681b      	ldr	r3, [r3, #0]
 800c4e0:	4a35      	ldr	r2, [pc, #212]	; (800c5b8 <HAL_TIM_Base_Start_IT+0x10c>)
 800c4e2:	4293      	cmp	r3, r2
 800c4e4:	d040      	beq.n	800c568 <HAL_TIM_Base_Start_IT+0xbc>
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	681b      	ldr	r3, [r3, #0]
 800c4ea:	4a34      	ldr	r2, [pc, #208]	; (800c5bc <HAL_TIM_Base_Start_IT+0x110>)
 800c4ec:	4293      	cmp	r3, r2
 800c4ee:	d03b      	beq.n	800c568 <HAL_TIM_Base_Start_IT+0xbc>
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	681b      	ldr	r3, [r3, #0]
 800c4f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c4f8:	d036      	beq.n	800c568 <HAL_TIM_Base_Start_IT+0xbc>
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	681b      	ldr	r3, [r3, #0]
 800c4fe:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c502:	d031      	beq.n	800c568 <HAL_TIM_Base_Start_IT+0xbc>
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	681b      	ldr	r3, [r3, #0]
 800c508:	4a2d      	ldr	r2, [pc, #180]	; (800c5c0 <HAL_TIM_Base_Start_IT+0x114>)
 800c50a:	4293      	cmp	r3, r2
 800c50c:	d02c      	beq.n	800c568 <HAL_TIM_Base_Start_IT+0xbc>
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	681b      	ldr	r3, [r3, #0]
 800c512:	4a2c      	ldr	r2, [pc, #176]	; (800c5c4 <HAL_TIM_Base_Start_IT+0x118>)
 800c514:	4293      	cmp	r3, r2
 800c516:	d027      	beq.n	800c568 <HAL_TIM_Base_Start_IT+0xbc>
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	681b      	ldr	r3, [r3, #0]
 800c51c:	4a2a      	ldr	r2, [pc, #168]	; (800c5c8 <HAL_TIM_Base_Start_IT+0x11c>)
 800c51e:	4293      	cmp	r3, r2
 800c520:	d022      	beq.n	800c568 <HAL_TIM_Base_Start_IT+0xbc>
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	681b      	ldr	r3, [r3, #0]
 800c526:	4a29      	ldr	r2, [pc, #164]	; (800c5cc <HAL_TIM_Base_Start_IT+0x120>)
 800c528:	4293      	cmp	r3, r2
 800c52a:	d01d      	beq.n	800c568 <HAL_TIM_Base_Start_IT+0xbc>
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	681b      	ldr	r3, [r3, #0]
 800c530:	4a27      	ldr	r2, [pc, #156]	; (800c5d0 <HAL_TIM_Base_Start_IT+0x124>)
 800c532:	4293      	cmp	r3, r2
 800c534:	d018      	beq.n	800c568 <HAL_TIM_Base_Start_IT+0xbc>
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	681b      	ldr	r3, [r3, #0]
 800c53a:	4a26      	ldr	r2, [pc, #152]	; (800c5d4 <HAL_TIM_Base_Start_IT+0x128>)
 800c53c:	4293      	cmp	r3, r2
 800c53e:	d013      	beq.n	800c568 <HAL_TIM_Base_Start_IT+0xbc>
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	681b      	ldr	r3, [r3, #0]
 800c544:	4a24      	ldr	r2, [pc, #144]	; (800c5d8 <HAL_TIM_Base_Start_IT+0x12c>)
 800c546:	4293      	cmp	r3, r2
 800c548:	d00e      	beq.n	800c568 <HAL_TIM_Base_Start_IT+0xbc>
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	681b      	ldr	r3, [r3, #0]
 800c54e:	4a23      	ldr	r2, [pc, #140]	; (800c5dc <HAL_TIM_Base_Start_IT+0x130>)
 800c550:	4293      	cmp	r3, r2
 800c552:	d009      	beq.n	800c568 <HAL_TIM_Base_Start_IT+0xbc>
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	681b      	ldr	r3, [r3, #0]
 800c558:	4a21      	ldr	r2, [pc, #132]	; (800c5e0 <HAL_TIM_Base_Start_IT+0x134>)
 800c55a:	4293      	cmp	r3, r2
 800c55c:	d004      	beq.n	800c568 <HAL_TIM_Base_Start_IT+0xbc>
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	681b      	ldr	r3, [r3, #0]
 800c562:	4a20      	ldr	r2, [pc, #128]	; (800c5e4 <HAL_TIM_Base_Start_IT+0x138>)
 800c564:	4293      	cmp	r3, r2
 800c566:	d115      	bne.n	800c594 <HAL_TIM_Base_Start_IT+0xe8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	681b      	ldr	r3, [r3, #0]
 800c56c:	689a      	ldr	r2, [r3, #8]
 800c56e:	4b1e      	ldr	r3, [pc, #120]	; (800c5e8 <HAL_TIM_Base_Start_IT+0x13c>)
 800c570:	4013      	ands	r3, r2
 800c572:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c574:	68fb      	ldr	r3, [r7, #12]
 800c576:	2b06      	cmp	r3, #6
 800c578:	d015      	beq.n	800c5a6 <HAL_TIM_Base_Start_IT+0xfa>
 800c57a:	68fb      	ldr	r3, [r7, #12]
 800c57c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c580:	d011      	beq.n	800c5a6 <HAL_TIM_Base_Start_IT+0xfa>
    {
      __HAL_TIM_ENABLE(htim);
 800c582:	687b      	ldr	r3, [r7, #4]
 800c584:	681b      	ldr	r3, [r3, #0]
 800c586:	681a      	ldr	r2, [r3, #0]
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	681b      	ldr	r3, [r3, #0]
 800c58c:	f042 0201 	orr.w	r2, r2, #1
 800c590:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c592:	e008      	b.n	800c5a6 <HAL_TIM_Base_Start_IT+0xfa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	681b      	ldr	r3, [r3, #0]
 800c598:	681a      	ldr	r2, [r3, #0]
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	681b      	ldr	r3, [r3, #0]
 800c59e:	f042 0201 	orr.w	r2, r2, #1
 800c5a2:	601a      	str	r2, [r3, #0]
 800c5a4:	e000      	b.n	800c5a8 <HAL_TIM_Base_Start_IT+0xfc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c5a6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800c5a8:	2300      	movs	r3, #0
}
 800c5aa:	4618      	mov	r0, r3
 800c5ac:	3714      	adds	r7, #20
 800c5ae:	46bd      	mov	sp, r7
 800c5b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5b4:	4770      	bx	lr
 800c5b6:	bf00      	nop
 800c5b8:	40012c00 	.word	0x40012c00
 800c5bc:	50012c00 	.word	0x50012c00
 800c5c0:	40000400 	.word	0x40000400
 800c5c4:	50000400 	.word	0x50000400
 800c5c8:	40000800 	.word	0x40000800
 800c5cc:	50000800 	.word	0x50000800
 800c5d0:	40000c00 	.word	0x40000c00
 800c5d4:	50000c00 	.word	0x50000c00
 800c5d8:	40013400 	.word	0x40013400
 800c5dc:	50013400 	.word	0x50013400
 800c5e0:	40014000 	.word	0x40014000
 800c5e4:	50014000 	.word	0x50014000
 800c5e8:	00010007 	.word	0x00010007

0800c5ec <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800c5ec:	b580      	push	{r7, lr}
 800c5ee:	b082      	sub	sp, #8
 800c5f0:	af00      	add	r7, sp, #0
 800c5f2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800c5f4:	687b      	ldr	r3, [r7, #4]
 800c5f6:	681b      	ldr	r3, [r3, #0]
 800c5f8:	691b      	ldr	r3, [r3, #16]
 800c5fa:	f003 0302 	and.w	r3, r3, #2
 800c5fe:	2b02      	cmp	r3, #2
 800c600:	d122      	bne.n	800c648 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	681b      	ldr	r3, [r3, #0]
 800c606:	68db      	ldr	r3, [r3, #12]
 800c608:	f003 0302 	and.w	r3, r3, #2
 800c60c:	2b02      	cmp	r3, #2
 800c60e:	d11b      	bne.n	800c648 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	681b      	ldr	r3, [r3, #0]
 800c614:	f06f 0202 	mvn.w	r2, #2
 800c618:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	2201      	movs	r2, #1
 800c61e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	681b      	ldr	r3, [r3, #0]
 800c624:	699b      	ldr	r3, [r3, #24]
 800c626:	f003 0303 	and.w	r3, r3, #3
 800c62a:	2b00      	cmp	r3, #0
 800c62c:	d003      	beq.n	800c636 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800c62e:	6878      	ldr	r0, [r7, #4]
 800c630:	f000 f965 	bl	800c8fe <HAL_TIM_IC_CaptureCallback>
 800c634:	e005      	b.n	800c642 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800c636:	6878      	ldr	r0, [r7, #4]
 800c638:	f000 f957 	bl	800c8ea <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c63c:	6878      	ldr	r0, [r7, #4]
 800c63e:	f000 f968 	bl	800c912 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	2200      	movs	r2, #0
 800c646:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	681b      	ldr	r3, [r3, #0]
 800c64c:	691b      	ldr	r3, [r3, #16]
 800c64e:	f003 0304 	and.w	r3, r3, #4
 800c652:	2b04      	cmp	r3, #4
 800c654:	d122      	bne.n	800c69c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	681b      	ldr	r3, [r3, #0]
 800c65a:	68db      	ldr	r3, [r3, #12]
 800c65c:	f003 0304 	and.w	r3, r3, #4
 800c660:	2b04      	cmp	r3, #4
 800c662:	d11b      	bne.n	800c69c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	681b      	ldr	r3, [r3, #0]
 800c668:	f06f 0204 	mvn.w	r2, #4
 800c66c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c66e:	687b      	ldr	r3, [r7, #4]
 800c670:	2202      	movs	r2, #2
 800c672:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	681b      	ldr	r3, [r3, #0]
 800c678:	699b      	ldr	r3, [r3, #24]
 800c67a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c67e:	2b00      	cmp	r3, #0
 800c680:	d003      	beq.n	800c68a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c682:	6878      	ldr	r0, [r7, #4]
 800c684:	f000 f93b 	bl	800c8fe <HAL_TIM_IC_CaptureCallback>
 800c688:	e005      	b.n	800c696 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c68a:	6878      	ldr	r0, [r7, #4]
 800c68c:	f000 f92d 	bl	800c8ea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c690:	6878      	ldr	r0, [r7, #4]
 800c692:	f000 f93e 	bl	800c912 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c696:	687b      	ldr	r3, [r7, #4]
 800c698:	2200      	movs	r2, #0
 800c69a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	681b      	ldr	r3, [r3, #0]
 800c6a0:	691b      	ldr	r3, [r3, #16]
 800c6a2:	f003 0308 	and.w	r3, r3, #8
 800c6a6:	2b08      	cmp	r3, #8
 800c6a8:	d122      	bne.n	800c6f0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	681b      	ldr	r3, [r3, #0]
 800c6ae:	68db      	ldr	r3, [r3, #12]
 800c6b0:	f003 0308 	and.w	r3, r3, #8
 800c6b4:	2b08      	cmp	r3, #8
 800c6b6:	d11b      	bne.n	800c6f0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	681b      	ldr	r3, [r3, #0]
 800c6bc:	f06f 0208 	mvn.w	r2, #8
 800c6c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	2204      	movs	r2, #4
 800c6c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800c6c8:	687b      	ldr	r3, [r7, #4]
 800c6ca:	681b      	ldr	r3, [r3, #0]
 800c6cc:	69db      	ldr	r3, [r3, #28]
 800c6ce:	f003 0303 	and.w	r3, r3, #3
 800c6d2:	2b00      	cmp	r3, #0
 800c6d4:	d003      	beq.n	800c6de <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c6d6:	6878      	ldr	r0, [r7, #4]
 800c6d8:	f000 f911 	bl	800c8fe <HAL_TIM_IC_CaptureCallback>
 800c6dc:	e005      	b.n	800c6ea <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c6de:	6878      	ldr	r0, [r7, #4]
 800c6e0:	f000 f903 	bl	800c8ea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c6e4:	6878      	ldr	r0, [r7, #4]
 800c6e6:	f000 f914 	bl	800c912 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	2200      	movs	r2, #0
 800c6ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	681b      	ldr	r3, [r3, #0]
 800c6f4:	691b      	ldr	r3, [r3, #16]
 800c6f6:	f003 0310 	and.w	r3, r3, #16
 800c6fa:	2b10      	cmp	r3, #16
 800c6fc:	d122      	bne.n	800c744 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800c6fe:	687b      	ldr	r3, [r7, #4]
 800c700:	681b      	ldr	r3, [r3, #0]
 800c702:	68db      	ldr	r3, [r3, #12]
 800c704:	f003 0310 	and.w	r3, r3, #16
 800c708:	2b10      	cmp	r3, #16
 800c70a:	d11b      	bne.n	800c744 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	681b      	ldr	r3, [r3, #0]
 800c710:	f06f 0210 	mvn.w	r2, #16
 800c714:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c716:	687b      	ldr	r3, [r7, #4]
 800c718:	2208      	movs	r2, #8
 800c71a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	681b      	ldr	r3, [r3, #0]
 800c720:	69db      	ldr	r3, [r3, #28]
 800c722:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c726:	2b00      	cmp	r3, #0
 800c728:	d003      	beq.n	800c732 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c72a:	6878      	ldr	r0, [r7, #4]
 800c72c:	f000 f8e7 	bl	800c8fe <HAL_TIM_IC_CaptureCallback>
 800c730:	e005      	b.n	800c73e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c732:	6878      	ldr	r0, [r7, #4]
 800c734:	f000 f8d9 	bl	800c8ea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c738:	6878      	ldr	r0, [r7, #4]
 800c73a:	f000 f8ea 	bl	800c912 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c73e:	687b      	ldr	r3, [r7, #4]
 800c740:	2200      	movs	r2, #0
 800c742:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800c744:	687b      	ldr	r3, [r7, #4]
 800c746:	681b      	ldr	r3, [r3, #0]
 800c748:	691b      	ldr	r3, [r3, #16]
 800c74a:	f003 0301 	and.w	r3, r3, #1
 800c74e:	2b01      	cmp	r3, #1
 800c750:	d10e      	bne.n	800c770 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	681b      	ldr	r3, [r3, #0]
 800c756:	68db      	ldr	r3, [r3, #12]
 800c758:	f003 0301 	and.w	r3, r3, #1
 800c75c:	2b01      	cmp	r3, #1
 800c75e:	d107      	bne.n	800c770 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	681b      	ldr	r3, [r3, #0]
 800c764:	f06f 0201 	mvn.w	r2, #1
 800c768:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800c76a:	6878      	ldr	r0, [r7, #4]
 800c76c:	f7f8 fc88 	bl	8005080 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	681b      	ldr	r3, [r3, #0]
 800c774:	691b      	ldr	r3, [r3, #16]
 800c776:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c77a:	2b80      	cmp	r3, #128	; 0x80
 800c77c:	d10e      	bne.n	800c79c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	681b      	ldr	r3, [r3, #0]
 800c782:	68db      	ldr	r3, [r3, #12]
 800c784:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c788:	2b80      	cmp	r3, #128	; 0x80
 800c78a:	d107      	bne.n	800c79c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	681b      	ldr	r3, [r3, #0]
 800c790:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800c794:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800c796:	6878      	ldr	r0, [r7, #4]
 800c798:	f000 f9d4 	bl	800cb44 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	681b      	ldr	r3, [r3, #0]
 800c7a0:	691b      	ldr	r3, [r3, #16]
 800c7a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c7a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c7aa:	d10e      	bne.n	800c7ca <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	681b      	ldr	r3, [r3, #0]
 800c7b0:	68db      	ldr	r3, [r3, #12]
 800c7b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c7b6:	2b80      	cmp	r3, #128	; 0x80
 800c7b8:	d107      	bne.n	800c7ca <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800c7ba:	687b      	ldr	r3, [r7, #4]
 800c7bc:	681b      	ldr	r3, [r3, #0]
 800c7be:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800c7c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800c7c4:	6878      	ldr	r0, [r7, #4]
 800c7c6:	f000 f9c7 	bl	800cb58 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	681b      	ldr	r3, [r3, #0]
 800c7ce:	691b      	ldr	r3, [r3, #16]
 800c7d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c7d4:	2b40      	cmp	r3, #64	; 0x40
 800c7d6:	d10e      	bne.n	800c7f6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	681b      	ldr	r3, [r3, #0]
 800c7dc:	68db      	ldr	r3, [r3, #12]
 800c7de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c7e2:	2b40      	cmp	r3, #64	; 0x40
 800c7e4:	d107      	bne.n	800c7f6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800c7e6:	687b      	ldr	r3, [r7, #4]
 800c7e8:	681b      	ldr	r3, [r3, #0]
 800c7ea:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800c7ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800c7f0:	6878      	ldr	r0, [r7, #4]
 800c7f2:	f000 f898 	bl	800c926 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	681b      	ldr	r3, [r3, #0]
 800c7fa:	691b      	ldr	r3, [r3, #16]
 800c7fc:	f003 0320 	and.w	r3, r3, #32
 800c800:	2b20      	cmp	r3, #32
 800c802:	d10e      	bne.n	800c822 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	681b      	ldr	r3, [r3, #0]
 800c808:	68db      	ldr	r3, [r3, #12]
 800c80a:	f003 0320 	and.w	r3, r3, #32
 800c80e:	2b20      	cmp	r3, #32
 800c810:	d107      	bne.n	800c822 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	681b      	ldr	r3, [r3, #0]
 800c816:	f06f 0220 	mvn.w	r2, #32
 800c81a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800c81c:	6878      	ldr	r0, [r7, #4]
 800c81e:	f000 f987 	bl	800cb30 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	681b      	ldr	r3, [r3, #0]
 800c826:	691b      	ldr	r3, [r3, #16]
 800c828:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c82c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c830:	d10f      	bne.n	800c852 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	681b      	ldr	r3, [r3, #0]
 800c836:	68db      	ldr	r3, [r3, #12]
 800c838:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c83c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c840:	d107      	bne.n	800c852 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	681b      	ldr	r3, [r3, #0]
 800c846:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 800c84a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800c84c:	6878      	ldr	r0, [r7, #4]
 800c84e:	f000 f98d 	bl	800cb6c <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	681b      	ldr	r3, [r3, #0]
 800c856:	691b      	ldr	r3, [r3, #16]
 800c858:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800c85c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c860:	d10f      	bne.n	800c882 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	681b      	ldr	r3, [r3, #0]
 800c866:	68db      	ldr	r3, [r3, #12]
 800c868:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800c86c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c870:	d107      	bne.n	800c882 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	681b      	ldr	r3, [r3, #0]
 800c876:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 800c87a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800c87c:	6878      	ldr	r0, [r7, #4]
 800c87e:	f000 f97f 	bl	800cb80 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	681b      	ldr	r3, [r3, #0]
 800c886:	691b      	ldr	r3, [r3, #16]
 800c888:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c88c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c890:	d10f      	bne.n	800c8b2 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	681b      	ldr	r3, [r3, #0]
 800c896:	68db      	ldr	r3, [r3, #12]
 800c898:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c89c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c8a0:	d107      	bne.n	800c8b2 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	681b      	ldr	r3, [r3, #0]
 800c8a6:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 800c8aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800c8ac:	6878      	ldr	r0, [r7, #4]
 800c8ae:	f000 f971 	bl	800cb94 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	681b      	ldr	r3, [r3, #0]
 800c8b6:	691b      	ldr	r3, [r3, #16]
 800c8b8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c8bc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800c8c0:	d10f      	bne.n	800c8e2 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 800c8c2:	687b      	ldr	r3, [r7, #4]
 800c8c4:	681b      	ldr	r3, [r3, #0]
 800c8c6:	68db      	ldr	r3, [r3, #12]
 800c8c8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c8cc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800c8d0:	d107      	bne.n	800c8e2 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	681b      	ldr	r3, [r3, #0]
 800c8d6:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 800c8da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800c8dc:	6878      	ldr	r0, [r7, #4]
 800c8de:	f000 f963 	bl	800cba8 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800c8e2:	bf00      	nop
 800c8e4:	3708      	adds	r7, #8
 800c8e6:	46bd      	mov	sp, r7
 800c8e8:	bd80      	pop	{r7, pc}

0800c8ea <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800c8ea:	b480      	push	{r7}
 800c8ec:	b083      	sub	sp, #12
 800c8ee:	af00      	add	r7, sp, #0
 800c8f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800c8f2:	bf00      	nop
 800c8f4:	370c      	adds	r7, #12
 800c8f6:	46bd      	mov	sp, r7
 800c8f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8fc:	4770      	bx	lr

0800c8fe <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800c8fe:	b480      	push	{r7}
 800c900:	b083      	sub	sp, #12
 800c902:	af00      	add	r7, sp, #0
 800c904:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800c906:	bf00      	nop
 800c908:	370c      	adds	r7, #12
 800c90a:	46bd      	mov	sp, r7
 800c90c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c910:	4770      	bx	lr

0800c912 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800c912:	b480      	push	{r7}
 800c914:	b083      	sub	sp, #12
 800c916:	af00      	add	r7, sp, #0
 800c918:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800c91a:	bf00      	nop
 800c91c:	370c      	adds	r7, #12
 800c91e:	46bd      	mov	sp, r7
 800c920:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c924:	4770      	bx	lr

0800c926 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800c926:	b480      	push	{r7}
 800c928:	b083      	sub	sp, #12
 800c92a:	af00      	add	r7, sp, #0
 800c92c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800c92e:	bf00      	nop
 800c930:	370c      	adds	r7, #12
 800c932:	46bd      	mov	sp, r7
 800c934:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c938:	4770      	bx	lr
	...

0800c93c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800c93c:	b480      	push	{r7}
 800c93e:	b085      	sub	sp, #20
 800c940:	af00      	add	r7, sp, #0
 800c942:	6078      	str	r0, [r7, #4]
 800c944:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c946:	687b      	ldr	r3, [r7, #4]
 800c948:	681b      	ldr	r3, [r3, #0]
 800c94a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c94c:	687b      	ldr	r3, [r7, #4]
 800c94e:	4a68      	ldr	r2, [pc, #416]	; (800caf0 <TIM_Base_SetConfig+0x1b4>)
 800c950:	4293      	cmp	r3, r2
 800c952:	d02b      	beq.n	800c9ac <TIM_Base_SetConfig+0x70>
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	4a67      	ldr	r2, [pc, #412]	; (800caf4 <TIM_Base_SetConfig+0x1b8>)
 800c958:	4293      	cmp	r3, r2
 800c95a:	d027      	beq.n	800c9ac <TIM_Base_SetConfig+0x70>
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c962:	d023      	beq.n	800c9ac <TIM_Base_SetConfig+0x70>
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c96a:	d01f      	beq.n	800c9ac <TIM_Base_SetConfig+0x70>
 800c96c:	687b      	ldr	r3, [r7, #4]
 800c96e:	4a62      	ldr	r2, [pc, #392]	; (800caf8 <TIM_Base_SetConfig+0x1bc>)
 800c970:	4293      	cmp	r3, r2
 800c972:	d01b      	beq.n	800c9ac <TIM_Base_SetConfig+0x70>
 800c974:	687b      	ldr	r3, [r7, #4]
 800c976:	4a61      	ldr	r2, [pc, #388]	; (800cafc <TIM_Base_SetConfig+0x1c0>)
 800c978:	4293      	cmp	r3, r2
 800c97a:	d017      	beq.n	800c9ac <TIM_Base_SetConfig+0x70>
 800c97c:	687b      	ldr	r3, [r7, #4]
 800c97e:	4a60      	ldr	r2, [pc, #384]	; (800cb00 <TIM_Base_SetConfig+0x1c4>)
 800c980:	4293      	cmp	r3, r2
 800c982:	d013      	beq.n	800c9ac <TIM_Base_SetConfig+0x70>
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	4a5f      	ldr	r2, [pc, #380]	; (800cb04 <TIM_Base_SetConfig+0x1c8>)
 800c988:	4293      	cmp	r3, r2
 800c98a:	d00f      	beq.n	800c9ac <TIM_Base_SetConfig+0x70>
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	4a5e      	ldr	r2, [pc, #376]	; (800cb08 <TIM_Base_SetConfig+0x1cc>)
 800c990:	4293      	cmp	r3, r2
 800c992:	d00b      	beq.n	800c9ac <TIM_Base_SetConfig+0x70>
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	4a5d      	ldr	r2, [pc, #372]	; (800cb0c <TIM_Base_SetConfig+0x1d0>)
 800c998:	4293      	cmp	r3, r2
 800c99a:	d007      	beq.n	800c9ac <TIM_Base_SetConfig+0x70>
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	4a5c      	ldr	r2, [pc, #368]	; (800cb10 <TIM_Base_SetConfig+0x1d4>)
 800c9a0:	4293      	cmp	r3, r2
 800c9a2:	d003      	beq.n	800c9ac <TIM_Base_SetConfig+0x70>
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	4a5b      	ldr	r2, [pc, #364]	; (800cb14 <TIM_Base_SetConfig+0x1d8>)
 800c9a8:	4293      	cmp	r3, r2
 800c9aa:	d108      	bne.n	800c9be <TIM_Base_SetConfig+0x82>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c9ac:	68fb      	ldr	r3, [r7, #12]
 800c9ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c9b2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c9b4:	683b      	ldr	r3, [r7, #0]
 800c9b6:	685b      	ldr	r3, [r3, #4]
 800c9b8:	68fa      	ldr	r2, [r7, #12]
 800c9ba:	4313      	orrs	r3, r2
 800c9bc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c9be:	687b      	ldr	r3, [r7, #4]
 800c9c0:	4a4b      	ldr	r2, [pc, #300]	; (800caf0 <TIM_Base_SetConfig+0x1b4>)
 800c9c2:	4293      	cmp	r3, r2
 800c9c4:	d043      	beq.n	800ca4e <TIM_Base_SetConfig+0x112>
 800c9c6:	687b      	ldr	r3, [r7, #4]
 800c9c8:	4a4a      	ldr	r2, [pc, #296]	; (800caf4 <TIM_Base_SetConfig+0x1b8>)
 800c9ca:	4293      	cmp	r3, r2
 800c9cc:	d03f      	beq.n	800ca4e <TIM_Base_SetConfig+0x112>
 800c9ce:	687b      	ldr	r3, [r7, #4]
 800c9d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c9d4:	d03b      	beq.n	800ca4e <TIM_Base_SetConfig+0x112>
 800c9d6:	687b      	ldr	r3, [r7, #4]
 800c9d8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c9dc:	d037      	beq.n	800ca4e <TIM_Base_SetConfig+0x112>
 800c9de:	687b      	ldr	r3, [r7, #4]
 800c9e0:	4a45      	ldr	r2, [pc, #276]	; (800caf8 <TIM_Base_SetConfig+0x1bc>)
 800c9e2:	4293      	cmp	r3, r2
 800c9e4:	d033      	beq.n	800ca4e <TIM_Base_SetConfig+0x112>
 800c9e6:	687b      	ldr	r3, [r7, #4]
 800c9e8:	4a44      	ldr	r2, [pc, #272]	; (800cafc <TIM_Base_SetConfig+0x1c0>)
 800c9ea:	4293      	cmp	r3, r2
 800c9ec:	d02f      	beq.n	800ca4e <TIM_Base_SetConfig+0x112>
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	4a43      	ldr	r2, [pc, #268]	; (800cb00 <TIM_Base_SetConfig+0x1c4>)
 800c9f2:	4293      	cmp	r3, r2
 800c9f4:	d02b      	beq.n	800ca4e <TIM_Base_SetConfig+0x112>
 800c9f6:	687b      	ldr	r3, [r7, #4]
 800c9f8:	4a42      	ldr	r2, [pc, #264]	; (800cb04 <TIM_Base_SetConfig+0x1c8>)
 800c9fa:	4293      	cmp	r3, r2
 800c9fc:	d027      	beq.n	800ca4e <TIM_Base_SetConfig+0x112>
 800c9fe:	687b      	ldr	r3, [r7, #4]
 800ca00:	4a41      	ldr	r2, [pc, #260]	; (800cb08 <TIM_Base_SetConfig+0x1cc>)
 800ca02:	4293      	cmp	r3, r2
 800ca04:	d023      	beq.n	800ca4e <TIM_Base_SetConfig+0x112>
 800ca06:	687b      	ldr	r3, [r7, #4]
 800ca08:	4a40      	ldr	r2, [pc, #256]	; (800cb0c <TIM_Base_SetConfig+0x1d0>)
 800ca0a:	4293      	cmp	r3, r2
 800ca0c:	d01f      	beq.n	800ca4e <TIM_Base_SetConfig+0x112>
 800ca0e:	687b      	ldr	r3, [r7, #4]
 800ca10:	4a3f      	ldr	r2, [pc, #252]	; (800cb10 <TIM_Base_SetConfig+0x1d4>)
 800ca12:	4293      	cmp	r3, r2
 800ca14:	d01b      	beq.n	800ca4e <TIM_Base_SetConfig+0x112>
 800ca16:	687b      	ldr	r3, [r7, #4]
 800ca18:	4a3e      	ldr	r2, [pc, #248]	; (800cb14 <TIM_Base_SetConfig+0x1d8>)
 800ca1a:	4293      	cmp	r3, r2
 800ca1c:	d017      	beq.n	800ca4e <TIM_Base_SetConfig+0x112>
 800ca1e:	687b      	ldr	r3, [r7, #4]
 800ca20:	4a3d      	ldr	r2, [pc, #244]	; (800cb18 <TIM_Base_SetConfig+0x1dc>)
 800ca22:	4293      	cmp	r3, r2
 800ca24:	d013      	beq.n	800ca4e <TIM_Base_SetConfig+0x112>
 800ca26:	687b      	ldr	r3, [r7, #4]
 800ca28:	4a3c      	ldr	r2, [pc, #240]	; (800cb1c <TIM_Base_SetConfig+0x1e0>)
 800ca2a:	4293      	cmp	r3, r2
 800ca2c:	d00f      	beq.n	800ca4e <TIM_Base_SetConfig+0x112>
 800ca2e:	687b      	ldr	r3, [r7, #4]
 800ca30:	4a3b      	ldr	r2, [pc, #236]	; (800cb20 <TIM_Base_SetConfig+0x1e4>)
 800ca32:	4293      	cmp	r3, r2
 800ca34:	d00b      	beq.n	800ca4e <TIM_Base_SetConfig+0x112>
 800ca36:	687b      	ldr	r3, [r7, #4]
 800ca38:	4a3a      	ldr	r2, [pc, #232]	; (800cb24 <TIM_Base_SetConfig+0x1e8>)
 800ca3a:	4293      	cmp	r3, r2
 800ca3c:	d007      	beq.n	800ca4e <TIM_Base_SetConfig+0x112>
 800ca3e:	687b      	ldr	r3, [r7, #4]
 800ca40:	4a39      	ldr	r2, [pc, #228]	; (800cb28 <TIM_Base_SetConfig+0x1ec>)
 800ca42:	4293      	cmp	r3, r2
 800ca44:	d003      	beq.n	800ca4e <TIM_Base_SetConfig+0x112>
 800ca46:	687b      	ldr	r3, [r7, #4]
 800ca48:	4a38      	ldr	r2, [pc, #224]	; (800cb2c <TIM_Base_SetConfig+0x1f0>)
 800ca4a:	4293      	cmp	r3, r2
 800ca4c:	d108      	bne.n	800ca60 <TIM_Base_SetConfig+0x124>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800ca4e:	68fb      	ldr	r3, [r7, #12]
 800ca50:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ca54:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ca56:	683b      	ldr	r3, [r7, #0]
 800ca58:	68db      	ldr	r3, [r3, #12]
 800ca5a:	68fa      	ldr	r2, [r7, #12]
 800ca5c:	4313      	orrs	r3, r2
 800ca5e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ca60:	68fb      	ldr	r3, [r7, #12]
 800ca62:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800ca66:	683b      	ldr	r3, [r7, #0]
 800ca68:	695b      	ldr	r3, [r3, #20]
 800ca6a:	4313      	orrs	r3, r2
 800ca6c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800ca6e:	687b      	ldr	r3, [r7, #4]
 800ca70:	68fa      	ldr	r2, [r7, #12]
 800ca72:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ca74:	683b      	ldr	r3, [r7, #0]
 800ca76:	689a      	ldr	r2, [r3, #8]
 800ca78:	687b      	ldr	r3, [r7, #4]
 800ca7a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800ca7c:	683b      	ldr	r3, [r7, #0]
 800ca7e:	681a      	ldr	r2, [r3, #0]
 800ca80:	687b      	ldr	r3, [r7, #4]
 800ca82:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800ca84:	687b      	ldr	r3, [r7, #4]
 800ca86:	4a1a      	ldr	r2, [pc, #104]	; (800caf0 <TIM_Base_SetConfig+0x1b4>)
 800ca88:	4293      	cmp	r3, r2
 800ca8a:	d023      	beq.n	800cad4 <TIM_Base_SetConfig+0x198>
 800ca8c:	687b      	ldr	r3, [r7, #4]
 800ca8e:	4a19      	ldr	r2, [pc, #100]	; (800caf4 <TIM_Base_SetConfig+0x1b8>)
 800ca90:	4293      	cmp	r3, r2
 800ca92:	d01f      	beq.n	800cad4 <TIM_Base_SetConfig+0x198>
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	4a1e      	ldr	r2, [pc, #120]	; (800cb10 <TIM_Base_SetConfig+0x1d4>)
 800ca98:	4293      	cmp	r3, r2
 800ca9a:	d01b      	beq.n	800cad4 <TIM_Base_SetConfig+0x198>
 800ca9c:	687b      	ldr	r3, [r7, #4]
 800ca9e:	4a1d      	ldr	r2, [pc, #116]	; (800cb14 <TIM_Base_SetConfig+0x1d8>)
 800caa0:	4293      	cmp	r3, r2
 800caa2:	d017      	beq.n	800cad4 <TIM_Base_SetConfig+0x198>
 800caa4:	687b      	ldr	r3, [r7, #4]
 800caa6:	4a1c      	ldr	r2, [pc, #112]	; (800cb18 <TIM_Base_SetConfig+0x1dc>)
 800caa8:	4293      	cmp	r3, r2
 800caaa:	d013      	beq.n	800cad4 <TIM_Base_SetConfig+0x198>
 800caac:	687b      	ldr	r3, [r7, #4]
 800caae:	4a1b      	ldr	r2, [pc, #108]	; (800cb1c <TIM_Base_SetConfig+0x1e0>)
 800cab0:	4293      	cmp	r3, r2
 800cab2:	d00f      	beq.n	800cad4 <TIM_Base_SetConfig+0x198>
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	4a1a      	ldr	r2, [pc, #104]	; (800cb20 <TIM_Base_SetConfig+0x1e4>)
 800cab8:	4293      	cmp	r3, r2
 800caba:	d00b      	beq.n	800cad4 <TIM_Base_SetConfig+0x198>
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	4a19      	ldr	r2, [pc, #100]	; (800cb24 <TIM_Base_SetConfig+0x1e8>)
 800cac0:	4293      	cmp	r3, r2
 800cac2:	d007      	beq.n	800cad4 <TIM_Base_SetConfig+0x198>
 800cac4:	687b      	ldr	r3, [r7, #4]
 800cac6:	4a18      	ldr	r2, [pc, #96]	; (800cb28 <TIM_Base_SetConfig+0x1ec>)
 800cac8:	4293      	cmp	r3, r2
 800caca:	d003      	beq.n	800cad4 <TIM_Base_SetConfig+0x198>
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	4a17      	ldr	r2, [pc, #92]	; (800cb2c <TIM_Base_SetConfig+0x1f0>)
 800cad0:	4293      	cmp	r3, r2
 800cad2:	d103      	bne.n	800cadc <TIM_Base_SetConfig+0x1a0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800cad4:	683b      	ldr	r3, [r7, #0]
 800cad6:	691a      	ldr	r2, [r3, #16]
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	2201      	movs	r2, #1
 800cae0:	615a      	str	r2, [r3, #20]
}
 800cae2:	bf00      	nop
 800cae4:	3714      	adds	r7, #20
 800cae6:	46bd      	mov	sp, r7
 800cae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caec:	4770      	bx	lr
 800caee:	bf00      	nop
 800caf0:	40012c00 	.word	0x40012c00
 800caf4:	50012c00 	.word	0x50012c00
 800caf8:	40000400 	.word	0x40000400
 800cafc:	50000400 	.word	0x50000400
 800cb00:	40000800 	.word	0x40000800
 800cb04:	50000800 	.word	0x50000800
 800cb08:	40000c00 	.word	0x40000c00
 800cb0c:	50000c00 	.word	0x50000c00
 800cb10:	40013400 	.word	0x40013400
 800cb14:	50013400 	.word	0x50013400
 800cb18:	40014000 	.word	0x40014000
 800cb1c:	50014000 	.word	0x50014000
 800cb20:	40014400 	.word	0x40014400
 800cb24:	50014400 	.word	0x50014400
 800cb28:	40014800 	.word	0x40014800
 800cb2c:	50014800 	.word	0x50014800

0800cb30 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800cb30:	b480      	push	{r7}
 800cb32:	b083      	sub	sp, #12
 800cb34:	af00      	add	r7, sp, #0
 800cb36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800cb38:	bf00      	nop
 800cb3a:	370c      	adds	r7, #12
 800cb3c:	46bd      	mov	sp, r7
 800cb3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb42:	4770      	bx	lr

0800cb44 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800cb44:	b480      	push	{r7}
 800cb46:	b083      	sub	sp, #12
 800cb48:	af00      	add	r7, sp, #0
 800cb4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800cb4c:	bf00      	nop
 800cb4e:	370c      	adds	r7, #12
 800cb50:	46bd      	mov	sp, r7
 800cb52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb56:	4770      	bx	lr

0800cb58 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800cb58:	b480      	push	{r7}
 800cb5a:	b083      	sub	sp, #12
 800cb5c:	af00      	add	r7, sp, #0
 800cb5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800cb60:	bf00      	nop
 800cb62:	370c      	adds	r7, #12
 800cb64:	46bd      	mov	sp, r7
 800cb66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb6a:	4770      	bx	lr

0800cb6c <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800cb6c:	b480      	push	{r7}
 800cb6e:	b083      	sub	sp, #12
 800cb70:	af00      	add	r7, sp, #0
 800cb72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800cb74:	bf00      	nop
 800cb76:	370c      	adds	r7, #12
 800cb78:	46bd      	mov	sp, r7
 800cb7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb7e:	4770      	bx	lr

0800cb80 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800cb80:	b480      	push	{r7}
 800cb82:	b083      	sub	sp, #12
 800cb84:	af00      	add	r7, sp, #0
 800cb86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800cb88:	bf00      	nop
 800cb8a:	370c      	adds	r7, #12
 800cb8c:	46bd      	mov	sp, r7
 800cb8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb92:	4770      	bx	lr

0800cb94 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800cb94:	b480      	push	{r7}
 800cb96:	b083      	sub	sp, #12
 800cb98:	af00      	add	r7, sp, #0
 800cb9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800cb9c:	bf00      	nop
 800cb9e:	370c      	adds	r7, #12
 800cba0:	46bd      	mov	sp, r7
 800cba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cba6:	4770      	bx	lr

0800cba8 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800cba8:	b480      	push	{r7}
 800cbaa:	b083      	sub	sp, #12
 800cbac:	af00      	add	r7, sp, #0
 800cbae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800cbb0:	bf00      	nop
 800cbb2:	370c      	adds	r7, #12
 800cbb4:	46bd      	mov	sp, r7
 800cbb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbba:	4770      	bx	lr

0800cbbc <LL_DLYB_SetDelay>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: the Delay value is set.
  *          - ERROR: the Delay value is not set.
  */
void LL_DLYB_SetDelay(DLYB_TypeDef *DLYBx, LL_DLYB_CfgTypeDef  *pdlyb_cfg)
{
 800cbbc:	b480      	push	{r7}
 800cbbe:	b083      	sub	sp, #12
 800cbc0:	af00      	add	r7, sp, #0
 800cbc2:	6078      	str	r0, [r7, #4]
 800cbc4:	6039      	str	r1, [r7, #0]
  /* Check the DelayBlock instance */
  assert_param(IS_DLYB_ALL_INSTANCE(DLYBx));

  /* Enable the length sampling */
  SET_BIT(DLYBx->CR, DLYB_CR_SEN);
 800cbc6:	687b      	ldr	r3, [r7, #4]
 800cbc8:	681b      	ldr	r3, [r3, #0]
 800cbca:	f043 0202 	orr.w	r2, r3, #2
 800cbce:	687b      	ldr	r3, [r7, #4]
 800cbd0:	601a      	str	r2, [r3, #0]

  /* Update the UNIT and SEL field */
  DLYBx->CFGR = (pdlyb_cfg->PhaseSel) | ((pdlyb_cfg->Units) << DLYB_CFGR_UNIT_Pos);
 800cbd2:	683b      	ldr	r3, [r7, #0]
 800cbd4:	685a      	ldr	r2, [r3, #4]
 800cbd6:	683b      	ldr	r3, [r7, #0]
 800cbd8:	681b      	ldr	r3, [r3, #0]
 800cbda:	021b      	lsls	r3, r3, #8
 800cbdc:	431a      	orrs	r2, r3
 800cbde:	687b      	ldr	r3, [r7, #4]
 800cbe0:	605a      	str	r2, [r3, #4]

  /* Disable the length sampling */
  CLEAR_BIT(DLYBx->CR, DLYB_CR_SEN);
 800cbe2:	687b      	ldr	r3, [r7, #4]
 800cbe4:	681b      	ldr	r3, [r3, #0]
 800cbe6:	f023 0202 	bic.w	r2, r3, #2
 800cbea:	687b      	ldr	r3, [r7, #4]
 800cbec:	601a      	str	r2, [r3, #0]
}
 800cbee:	bf00      	nop
 800cbf0:	370c      	adds	r7, #12
 800cbf2:	46bd      	mov	sp, r7
 800cbf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbf8:	4770      	bx	lr

0800cbfa <LL_DLYB_GetDelay>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: the Delay value is received.
  *          - ERROR: the Delay value is not received.
  */
void LL_DLYB_GetDelay(DLYB_TypeDef *DLYBx, LL_DLYB_CfgTypeDef *pdlyb_cfg)
{
 800cbfa:	b480      	push	{r7}
 800cbfc:	b083      	sub	sp, #12
 800cbfe:	af00      	add	r7, sp, #0
 800cc00:	6078      	str	r0, [r7, #4]
 800cc02:	6039      	str	r1, [r7, #0]
  /* Check the DelayBlock instance */
  assert_param(IS_DLYB_ALL_INSTANCE(DLYBx));

  /* Fill the DelayBlock configuration structure with SEL and UNIT value */
  pdlyb_cfg->Units = ((DLYBx->CFGR & DLYB_CFGR_UNIT) >> DLYB_CFGR_UNIT_Pos);
 800cc04:	687b      	ldr	r3, [r7, #4]
 800cc06:	685b      	ldr	r3, [r3, #4]
 800cc08:	0a1b      	lsrs	r3, r3, #8
 800cc0a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800cc0e:	683b      	ldr	r3, [r7, #0]
 800cc10:	601a      	str	r2, [r3, #0]
  pdlyb_cfg->PhaseSel = (DLYBx->CFGR & DLYB_CFGR_SEL);
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	685b      	ldr	r3, [r3, #4]
 800cc16:	f003 020f 	and.w	r2, r3, #15
 800cc1a:	683b      	ldr	r3, [r7, #0]
 800cc1c:	605a      	str	r2, [r3, #4]
}
 800cc1e:	bf00      	nop
 800cc20:	370c      	adds	r7, #12
 800cc22:	46bd      	mov	sp, r7
 800cc24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc28:	4770      	bx	lr
	...

0800cc2c <LL_DLYB_GetClockPeriod>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: there is a valid period detected and stored in pdlyb_cfg.
  *          - ERROR: there is no valid period detected.
  */
uint32_t LL_DLYB_GetClockPeriod(DLYB_TypeDef *DLYBx, LL_DLYB_CfgTypeDef *pdlyb_cfg)
{
 800cc2c:	b580      	push	{r7, lr}
 800cc2e:	b086      	sub	sp, #24
 800cc30:	af00      	add	r7, sp, #0
 800cc32:	6078      	str	r0, [r7, #4]
 800cc34:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 800cc36:	2300      	movs	r3, #0
 800cc38:	617b      	str	r3, [r7, #20]

  /* Check the DelayBlock instance */
  assert_param(IS_DLYB_ALL_INSTANCE(DLYBx));

  /* Enable the length sampling */
  SET_BIT(DLYBx->CR, DLYB_CR_SEN);
 800cc3a:	687b      	ldr	r3, [r7, #4]
 800cc3c:	681b      	ldr	r3, [r3, #0]
 800cc3e:	f043 0202 	orr.w	r2, r3, #2
 800cc42:	687b      	ldr	r3, [r7, #4]
 800cc44:	601a      	str	r2, [r3, #0]

  /* Delay line length detection */
  while (i < DLYB_MAX_UNIT)
 800cc46:	e02a      	b.n	800cc9e <LL_DLYB_GetClockPeriod+0x72>
  {
    /* Set the Delay of the UNIT(s)*/
    DLYBx->CFGR = DLYB_MAX_SELECT | (i << DLYB_CFGR_UNIT_Pos);
 800cc48:	697b      	ldr	r3, [r7, #20]
 800cc4a:	021b      	lsls	r3, r3, #8
 800cc4c:	f043 020c 	orr.w	r2, r3, #12
 800cc50:	687b      	ldr	r3, [r7, #4]
 800cc52:	605a      	str	r2, [r3, #4]

    /* Waiting for a LNG valid value */
    tickstart =  HAL_GetTick();
 800cc54:	f7f8 fe0c 	bl	8005870 <HAL_GetTick>
 800cc58:	60f8      	str	r0, [r7, #12]
    while ((DLYBx->CFGR & DLYB_CFGR_LNGF) == 0U)
 800cc5a:	e00c      	b.n	800cc76 <LL_DLYB_GetClockPeriod+0x4a>
    {
      if ((HAL_GetTick() - tickstart) >=  DLYB_TIMEOUT)
 800cc5c:	f7f8 fe08 	bl	8005870 <HAL_GetTick>
 800cc60:	4602      	mov	r2, r0
 800cc62:	68fb      	ldr	r3, [r7, #12]
 800cc64:	1ad3      	subs	r3, r2, r3
 800cc66:	2bfe      	cmp	r3, #254	; 0xfe
 800cc68:	d905      	bls.n	800cc76 <LL_DLYB_GetClockPeriod+0x4a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((DLYBx->CFGR & DLYB_CFGR_LNGF) == 0U)
 800cc6a:	687b      	ldr	r3, [r7, #4]
 800cc6c:	685b      	ldr	r3, [r3, #4]
 800cc6e:	2b00      	cmp	r3, #0
 800cc70:	db01      	blt.n	800cc76 <LL_DLYB_GetClockPeriod+0x4a>
        {
          return (uint32_t) HAL_TIMEOUT;
 800cc72:	2303      	movs	r3, #3
 800cc74:	e042      	b.n	800ccfc <LL_DLYB_GetClockPeriod+0xd0>
    while ((DLYBx->CFGR & DLYB_CFGR_LNGF) == 0U)
 800cc76:	687b      	ldr	r3, [r7, #4]
 800cc78:	685b      	ldr	r3, [r3, #4]
 800cc7a:	2b00      	cmp	r3, #0
 800cc7c:	daee      	bge.n	800cc5c <LL_DLYB_GetClockPeriod+0x30>
        }
      }
    }

    if ((DLYBx->CFGR & DLYB_LNG_10_0_MASK) != 0U)
 800cc7e:	687b      	ldr	r3, [r7, #4]
 800cc80:	685a      	ldr	r2, [r3, #4]
 800cc82:	4b20      	ldr	r3, [pc, #128]	; (800cd04 <LL_DLYB_GetClockPeriod+0xd8>)
 800cc84:	4013      	ands	r3, r2
 800cc86:	2b00      	cmp	r3, #0
 800cc88:	d006      	beq.n	800cc98 <LL_DLYB_GetClockPeriod+0x6c>
    {
      if ((DLYBx->CFGR & (DLYB_CFGR_LNG_11 | DLYB_CFGR_LNG_10)) != DLYB_LNG_11_10_MASK)
 800cc8a:	687b      	ldr	r3, [r7, #4]
 800cc8c:	685b      	ldr	r3, [r3, #4]
 800cc8e:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 800cc92:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800cc96:	d106      	bne.n	800cca6 <LL_DLYB_GetClockPeriod+0x7a>
      {
        /* Delay line length is configured to one input clock period*/
        break;
      }
    }
    i++;
 800cc98:	697b      	ldr	r3, [r7, #20]
 800cc9a:	3301      	adds	r3, #1
 800cc9c:	617b      	str	r3, [r7, #20]
  while (i < DLYB_MAX_UNIT)
 800cc9e:	697b      	ldr	r3, [r7, #20]
 800cca0:	2b7f      	cmp	r3, #127	; 0x7f
 800cca2:	d9d1      	bls.n	800cc48 <LL_DLYB_GetClockPeriod+0x1c>
 800cca4:	e000      	b.n	800cca8 <LL_DLYB_GetClockPeriod+0x7c>
        break;
 800cca6:	bf00      	nop
  }

  if (DLYB_MAX_UNIT != i)
 800cca8:	697b      	ldr	r3, [r7, #20]
 800ccaa:	2b80      	cmp	r3, #128	; 0x80
 800ccac:	d022      	beq.n	800ccf4 <LL_DLYB_GetClockPeriod+0xc8>
  {
    /* Determine how many unit delays (nb) span one input clock period */
    lng = (DLYBx->CFGR & DLYB_CFGR_LNG) >> 16U;
 800ccae:	687b      	ldr	r3, [r7, #4]
 800ccb0:	685b      	ldr	r3, [r3, #4]
 800ccb2:	0c1b      	lsrs	r3, r3, #16
 800ccb4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ccb8:	60bb      	str	r3, [r7, #8]
    nb = 10U;
 800ccba:	230a      	movs	r3, #10
 800ccbc:	613b      	str	r3, [r7, #16]
    while ((nb > 0U) && ((lng >> nb) == 0U))
 800ccbe:	e002      	b.n	800ccc6 <LL_DLYB_GetClockPeriod+0x9a>
    {
      nb--;
 800ccc0:	693b      	ldr	r3, [r7, #16]
 800ccc2:	3b01      	subs	r3, #1
 800ccc4:	613b      	str	r3, [r7, #16]
    while ((nb > 0U) && ((lng >> nb) == 0U))
 800ccc6:	693b      	ldr	r3, [r7, #16]
 800ccc8:	2b00      	cmp	r3, #0
 800ccca:	d005      	beq.n	800ccd8 <LL_DLYB_GetClockPeriod+0xac>
 800cccc:	68ba      	ldr	r2, [r7, #8]
 800ccce:	693b      	ldr	r3, [r7, #16]
 800ccd0:	fa22 f303 	lsr.w	r3, r2, r3
 800ccd4:	2b00      	cmp	r3, #0
 800ccd6:	d0f3      	beq.n	800ccc0 <LL_DLYB_GetClockPeriod+0x94>
    }
    if (nb != 0U)
 800ccd8:	693b      	ldr	r3, [r7, #16]
 800ccda:	2b00      	cmp	r3, #0
 800ccdc:	d00a      	beq.n	800ccf4 <LL_DLYB_GetClockPeriod+0xc8>
    {
      pdlyb_cfg->PhaseSel = nb ;
 800ccde:	683b      	ldr	r3, [r7, #0]
 800cce0:	693a      	ldr	r2, [r7, #16]
 800cce2:	605a      	str	r2, [r3, #4]
      pdlyb_cfg->Units = i ;
 800cce4:	683b      	ldr	r3, [r7, #0]
 800cce6:	697a      	ldr	r2, [r7, #20]
 800cce8:	601a      	str	r2, [r3, #0]

      /* Disable the length sampling */
      DLYBx->CR = DLYB_CR_SEN;
 800ccea:	687b      	ldr	r3, [r7, #4]
 800ccec:	2202      	movs	r2, #2
 800ccee:	601a      	str	r2, [r3, #0]

      return (uint32_t)SUCCESS;
 800ccf0:	2300      	movs	r3, #0
 800ccf2:	e003      	b.n	800ccfc <LL_DLYB_GetClockPeriod+0xd0>
    }
  }

  /* Disable the length sampling */
  DLYBx->CR = DLYB_CR_SEN;
 800ccf4:	687b      	ldr	r3, [r7, #4]
 800ccf6:	2202      	movs	r2, #2
 800ccf8:	601a      	str	r2, [r3, #0]

  return (uint32_t)ERROR;
 800ccfa:	2301      	movs	r3, #1

}
 800ccfc:	4618      	mov	r0, r3
 800ccfe:	3718      	adds	r7, #24
 800cd00:	46bd      	mov	sp, r7
 800cd02:	bd80      	pop	{r7, pc}
 800cd04:	07ff0000 	.word	0x07ff0000

0800cd08 <_tx_byte_pool_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_byte_pool_create(TX_BYTE_POOL *pool_ptr, CHAR *name_ptr, VOID *pool_start, ULONG pool_size)
{
 800cd08:	b580      	push	{r7, lr}
 800cd0a:	b08e      	sub	sp, #56	; 0x38
 800cd0c:	af00      	add	r7, sp, #0
 800cd0e:	60f8      	str	r0, [r7, #12]
 800cd10:	60b9      	str	r1, [r7, #8]
 800cd12:	607a      	str	r2, [r7, #4]
 800cd14:	603b      	str	r3, [r7, #0]
TX_BYTE_POOL        *previous_pool;
ALIGN_TYPE          *free_ptr;


    /* Initialize the byte pool control block to all zeros.  */
    TX_MEMSET(pool_ptr, 0, (sizeof(TX_BYTE_POOL)));
 800cd16:	2234      	movs	r2, #52	; 0x34
 800cd18:	2100      	movs	r1, #0
 800cd1a:	68f8      	ldr	r0, [r7, #12]
 800cd1c:	f001 fdee 	bl	800e8fc <memset>

    /* Round the pool size down to something that is evenly divisible by
       an ULONG.  */
    pool_size =   (pool_size/(sizeof(ALIGN_TYPE))) * (sizeof(ALIGN_TYPE));
 800cd20:	683b      	ldr	r3, [r7, #0]
 800cd22:	f023 0303 	bic.w	r3, r3, #3
 800cd26:	603b      	str	r3, [r7, #0]

    /* Setup the basic byte pool fields.  */
    pool_ptr -> tx_byte_pool_name =              name_ptr;
 800cd28:	68fb      	ldr	r3, [r7, #12]
 800cd2a:	68ba      	ldr	r2, [r7, #8]
 800cd2c:	605a      	str	r2, [r3, #4]

    /* Save the start and size of the pool.  */
    pool_ptr -> tx_byte_pool_start =   TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800cd2e:	68fb      	ldr	r3, [r7, #12]
 800cd30:	687a      	ldr	r2, [r7, #4]
 800cd32:	619a      	str	r2, [r3, #24]
    pool_ptr -> tx_byte_pool_size =    pool_size;
 800cd34:	68fb      	ldr	r3, [r7, #12]
 800cd36:	683a      	ldr	r2, [r7, #0]
 800cd38:	61da      	str	r2, [r3, #28]

    /* Setup memory list to the beginning as well as the search pointer.  */
    pool_ptr -> tx_byte_pool_list =    TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800cd3a:	68fb      	ldr	r3, [r7, #12]
 800cd3c:	687a      	ldr	r2, [r7, #4]
 800cd3e:	611a      	str	r2, [r3, #16]
    pool_ptr -> tx_byte_pool_search =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800cd40:	68fb      	ldr	r3, [r7, #12]
 800cd42:	687a      	ldr	r2, [r7, #4]
 800cd44:	615a      	str	r2, [r3, #20]

    /* Initially, the pool will have two blocks.  One large block at the
       beginning that is available and a small allocated block at the end
       of the pool that is there just for the algorithm.  Be sure to count
       the available block's header in the available bytes count.  */
    pool_ptr -> tx_byte_pool_available =   pool_size - ((sizeof(VOID *)) + (sizeof(ALIGN_TYPE)));
 800cd46:	683b      	ldr	r3, [r7, #0]
 800cd48:	f1a3 0208 	sub.w	r2, r3, #8
 800cd4c:	68fb      	ldr	r3, [r7, #12]
 800cd4e:	609a      	str	r2, [r3, #8]
    pool_ptr -> tx_byte_pool_fragments =   ((UINT) 2);
 800cd50:	68fb      	ldr	r3, [r7, #12]
 800cd52:	2202      	movs	r2, #2
 800cd54:	60da      	str	r2, [r3, #12]
    /* Each block contains a "next" pointer that points to the next block in the pool followed by a ALIGN_TYPE
       field that contains either the constant TX_BYTE_BLOCK_FREE (if the block is free) or a pointer to the
       owning pool (if the block is allocated).  */

    /* Calculate the end of the pool's memory area.  */
    block_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800cd56:	687b      	ldr	r3, [r7, #4]
 800cd58:	637b      	str	r3, [r7, #52]	; 0x34
    block_ptr =  TX_UCHAR_POINTER_ADD(block_ptr, pool_size);
 800cd5a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cd5c:	683b      	ldr	r3, [r7, #0]
 800cd5e:	4413      	add	r3, r2
 800cd60:	637b      	str	r3, [r7, #52]	; 0x34

    /* Backup the end of the pool pointer and build the pre-allocated block.  */
    block_ptr =  TX_UCHAR_POINTER_SUB(block_ptr, (sizeof(ALIGN_TYPE)));
 800cd62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cd64:	3b04      	subs	r3, #4
 800cd66:	637b      	str	r3, [r7, #52]	; 0x34

    /* Cast the pool pointer into a ULONG.  */
    temp_ptr =             TX_BYTE_POOL_TO_UCHAR_POINTER_CONVERT(pool_ptr);
 800cd68:	68fb      	ldr	r3, [r7, #12]
 800cd6a:	633b      	str	r3, [r7, #48]	; 0x30
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(block_ptr);
 800cd6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cd6e:	62fb      	str	r3, [r7, #44]	; 0x2c
    *block_indirect_ptr =  temp_ptr;
 800cd70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd72:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cd74:	601a      	str	r2, [r3, #0]

    block_ptr =            TX_UCHAR_POINTER_SUB(block_ptr, (sizeof(UCHAR *)));
 800cd76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cd78:	3b04      	subs	r3, #4
 800cd7a:	637b      	str	r3, [r7, #52]	; 0x34
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(block_ptr);
 800cd7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cd7e:	62fb      	str	r3, [r7, #44]	; 0x2c
    *block_indirect_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800cd80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd82:	687a      	ldr	r2, [r7, #4]
 800cd84:	601a      	str	r2, [r3, #0]

    /* Now setup the large available block in the pool.  */
    temp_ptr =             TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800cd86:	687b      	ldr	r3, [r7, #4]
 800cd88:	633b      	str	r3, [r7, #48]	; 0x30
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(temp_ptr);
 800cd8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd8c:	62fb      	str	r3, [r7, #44]	; 0x2c
    *block_indirect_ptr =  block_ptr;
 800cd8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd90:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cd92:	601a      	str	r2, [r3, #0]
    block_ptr =            TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800cd94:	687b      	ldr	r3, [r7, #4]
 800cd96:	637b      	str	r3, [r7, #52]	; 0x34
    block_ptr =            TX_UCHAR_POINTER_ADD(block_ptr, (sizeof(UCHAR *)));
 800cd98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cd9a:	3304      	adds	r3, #4
 800cd9c:	637b      	str	r3, [r7, #52]	; 0x34
    free_ptr =             TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(block_ptr);
 800cd9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cda0:	62bb      	str	r3, [r7, #40]	; 0x28
    *free_ptr =            TX_BYTE_BLOCK_FREE;
 800cda2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cda4:	4a1f      	ldr	r2, [pc, #124]	; (800ce24 <_tx_byte_pool_create+0x11c>)
 800cda6:	601a      	str	r2, [r3, #0]

    /* Clear the owner id.  */
    pool_ptr -> tx_byte_pool_owner =  TX_NULL;
 800cda8:	68fb      	ldr	r3, [r7, #12]
 800cdaa:	2200      	movs	r2, #0
 800cdac:	621a      	str	r2, [r3, #32]
{
UINT posture;
#ifdef TX_PORT_USE_BASEPRI
    __asm__ volatile ("MRS  %0, BASEPRI ": "=r" (posture));
#else
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800cdae:	f3ef 8310 	mrs	r3, PRIMASK
 800cdb2:	61bb      	str	r3, [r7, #24]
#endif
    return(posture);
 800cdb4:	69bb      	ldr	r3, [r7, #24]

__attribute__( ( always_inline ) ) static inline UINT __disable_interrupts(void)
{
UINT int_posture;

    int_posture = __get_interrupt_posture();
 800cdb6:	617b      	str	r3, [r7, #20]

#ifdef TX_PORT_USE_BASEPRI
    __set_basepri_value(TX_PORT_BASEPRI);
#else
    __asm__ volatile ("CPSID i" : : : "memory");
 800cdb8:	b672      	cpsid	i
#endif
    return(int_posture);
 800cdba:	697b      	ldr	r3, [r7, #20]

    /* Disable interrupts to place the byte pool on the created list.  */
    TX_DISABLE
 800cdbc:	627b      	str	r3, [r7, #36]	; 0x24

    /* Setup the byte pool ID to make it valid.  */
    pool_ptr -> tx_byte_pool_id =  TX_BYTE_POOL_ID;
 800cdbe:	68fb      	ldr	r3, [r7, #12]
 800cdc0:	4a19      	ldr	r2, [pc, #100]	; (800ce28 <_tx_byte_pool_create+0x120>)
 800cdc2:	601a      	str	r2, [r3, #0]

    /* Place the byte pool on the list of created byte pools.  First,
       check for an empty list.  */
    if (_tx_byte_pool_created_count == TX_EMPTY)
 800cdc4:	4b19      	ldr	r3, [pc, #100]	; (800ce2c <_tx_byte_pool_create+0x124>)
 800cdc6:	681b      	ldr	r3, [r3, #0]
 800cdc8:	2b00      	cmp	r3, #0
 800cdca:	d109      	bne.n	800cde0 <_tx_byte_pool_create+0xd8>
    {

        /* The created byte pool list is empty.  Add byte pool to empty list.  */
        _tx_byte_pool_created_ptr =                  pool_ptr;
 800cdcc:	4a18      	ldr	r2, [pc, #96]	; (800ce30 <_tx_byte_pool_create+0x128>)
 800cdce:	68fb      	ldr	r3, [r7, #12]
 800cdd0:	6013      	str	r3, [r2, #0]
        pool_ptr -> tx_byte_pool_created_next =      pool_ptr;
 800cdd2:	68fb      	ldr	r3, [r7, #12]
 800cdd4:	68fa      	ldr	r2, [r7, #12]
 800cdd6:	62da      	str	r2, [r3, #44]	; 0x2c
        pool_ptr -> tx_byte_pool_created_previous =  pool_ptr;
 800cdd8:	68fb      	ldr	r3, [r7, #12]
 800cdda:	68fa      	ldr	r2, [r7, #12]
 800cddc:	631a      	str	r2, [r3, #48]	; 0x30
 800cdde:	e011      	b.n	800ce04 <_tx_byte_pool_create+0xfc>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_pool =      _tx_byte_pool_created_ptr;
 800cde0:	4b13      	ldr	r3, [pc, #76]	; (800ce30 <_tx_byte_pool_create+0x128>)
 800cde2:	681b      	ldr	r3, [r3, #0]
 800cde4:	623b      	str	r3, [r7, #32]
        previous_pool =  next_pool -> tx_byte_pool_created_previous;
 800cde6:	6a3b      	ldr	r3, [r7, #32]
 800cde8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cdea:	61fb      	str	r3, [r7, #28]

        /* Place the new byte pool in the list.  */
        next_pool -> tx_byte_pool_created_previous =  pool_ptr;
 800cdec:	6a3b      	ldr	r3, [r7, #32]
 800cdee:	68fa      	ldr	r2, [r7, #12]
 800cdf0:	631a      	str	r2, [r3, #48]	; 0x30
        previous_pool -> tx_byte_pool_created_next =  pool_ptr;
 800cdf2:	69fb      	ldr	r3, [r7, #28]
 800cdf4:	68fa      	ldr	r2, [r7, #12]
 800cdf6:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Setup this byte pool's created links.  */
        pool_ptr -> tx_byte_pool_created_previous =  previous_pool;
 800cdf8:	68fb      	ldr	r3, [r7, #12]
 800cdfa:	69fa      	ldr	r2, [r7, #28]
 800cdfc:	631a      	str	r2, [r3, #48]	; 0x30
        pool_ptr -> tx_byte_pool_created_next =      next_pool;
 800cdfe:	68fb      	ldr	r3, [r7, #12]
 800ce00:	6a3a      	ldr	r2, [r7, #32]
 800ce02:	62da      	str	r2, [r3, #44]	; 0x2c
    }

    /* Increment the number of created byte pools.  */
    _tx_byte_pool_created_count++;
 800ce04:	4b09      	ldr	r3, [pc, #36]	; (800ce2c <_tx_byte_pool_create+0x124>)
 800ce06:	681b      	ldr	r3, [r3, #0]
 800ce08:	3301      	adds	r3, #1
 800ce0a:	4a08      	ldr	r2, [pc, #32]	; (800ce2c <_tx_byte_pool_create+0x124>)
 800ce0c:	6013      	str	r3, [r2, #0]
 800ce0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce10:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800ce12:	693b      	ldr	r3, [r7, #16]
 800ce14:	f383 8810 	msr	PRIMASK, r3
}
 800ce18:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 800ce1a:	2300      	movs	r3, #0
}
 800ce1c:	4618      	mov	r0, r3
 800ce1e:	3738      	adds	r7, #56	; 0x38
 800ce20:	46bd      	mov	sp, r7
 800ce22:	bd80      	pop	{r7, pc}
 800ce24:	ffffeeee 	.word	0xffffeeee
 800ce28:	42595445 	.word	0x42595445
 800ce2c:	200022d4 	.word	0x200022d4
 800ce30:	200022d0 	.word	0x200022d0

0800ce34 <_tx_event_flags_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_event_flags_create(TX_EVENT_FLAGS_GROUP *group_ptr, CHAR *name_ptr)
{
 800ce34:	b580      	push	{r7, lr}
 800ce36:	b088      	sub	sp, #32
 800ce38:	af00      	add	r7, sp, #0
 800ce3a:	6078      	str	r0, [r7, #4]
 800ce3c:	6039      	str	r1, [r7, #0]
TX_EVENT_FLAGS_GROUP    *next_group;
TX_EVENT_FLAGS_GROUP    *previous_group;


    /* Initialize event flags control block to all zeros.  */
    TX_MEMSET(group_ptr, 0, (sizeof(TX_EVENT_FLAGS_GROUP)));
 800ce3e:	2224      	movs	r2, #36	; 0x24
 800ce40:	2100      	movs	r1, #0
 800ce42:	6878      	ldr	r0, [r7, #4]
 800ce44:	f001 fd5a 	bl	800e8fc <memset>

    /* Setup the basic event flags group fields.  */
    group_ptr -> tx_event_flags_group_name =             name_ptr;
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	683a      	ldr	r2, [r7, #0]
 800ce4c:	605a      	str	r2, [r3, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800ce4e:	f3ef 8310 	mrs	r3, PRIMASK
 800ce52:	613b      	str	r3, [r7, #16]
    return(posture);
 800ce54:	693b      	ldr	r3, [r7, #16]
    int_posture = __get_interrupt_posture();
 800ce56:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("CPSID i" : : : "memory");
 800ce58:	b672      	cpsid	i
    return(int_posture);
 800ce5a:	68fb      	ldr	r3, [r7, #12]

    /* Disable interrupts to put the event flags group on the created list.  */
    TX_DISABLE
 800ce5c:	61fb      	str	r3, [r7, #28]

    /* Setup the event flags ID to make it valid.  */
    group_ptr -> tx_event_flags_group_id =  TX_EVENT_FLAGS_ID;
 800ce5e:	687b      	ldr	r3, [r7, #4]
 800ce60:	4a18      	ldr	r2, [pc, #96]	; (800cec4 <_tx_event_flags_create+0x90>)
 800ce62:	601a      	str	r2, [r3, #0]

    /* Place the group on the list of created event flag groups.  First,
       check for an empty list.  */
    if (_tx_event_flags_created_count == TX_EMPTY)
 800ce64:	4b18      	ldr	r3, [pc, #96]	; (800cec8 <_tx_event_flags_create+0x94>)
 800ce66:	681b      	ldr	r3, [r3, #0]
 800ce68:	2b00      	cmp	r3, #0
 800ce6a:	d109      	bne.n	800ce80 <_tx_event_flags_create+0x4c>
    {

        /* The created event flags list is empty.  Add event flag group to empty list.  */
        _tx_event_flags_created_ptr =                         group_ptr;
 800ce6c:	4a17      	ldr	r2, [pc, #92]	; (800cecc <_tx_event_flags_create+0x98>)
 800ce6e:	687b      	ldr	r3, [r7, #4]
 800ce70:	6013      	str	r3, [r2, #0]
        group_ptr -> tx_event_flags_group_created_next =      group_ptr;
 800ce72:	687b      	ldr	r3, [r7, #4]
 800ce74:	687a      	ldr	r2, [r7, #4]
 800ce76:	619a      	str	r2, [r3, #24]
        group_ptr -> tx_event_flags_group_created_previous =  group_ptr;
 800ce78:	687b      	ldr	r3, [r7, #4]
 800ce7a:	687a      	ldr	r2, [r7, #4]
 800ce7c:	61da      	str	r2, [r3, #28]
 800ce7e:	e011      	b.n	800cea4 <_tx_event_flags_create+0x70>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_group =      _tx_event_flags_created_ptr;
 800ce80:	4b12      	ldr	r3, [pc, #72]	; (800cecc <_tx_event_flags_create+0x98>)
 800ce82:	681b      	ldr	r3, [r3, #0]
 800ce84:	61bb      	str	r3, [r7, #24]
        previous_group =  next_group -> tx_event_flags_group_created_previous;
 800ce86:	69bb      	ldr	r3, [r7, #24]
 800ce88:	69db      	ldr	r3, [r3, #28]
 800ce8a:	617b      	str	r3, [r7, #20]

        /* Place the new event flag group in the list.  */
        next_group -> tx_event_flags_group_created_previous =  group_ptr;
 800ce8c:	69bb      	ldr	r3, [r7, #24]
 800ce8e:	687a      	ldr	r2, [r7, #4]
 800ce90:	61da      	str	r2, [r3, #28]
        previous_group -> tx_event_flags_group_created_next =  group_ptr;
 800ce92:	697b      	ldr	r3, [r7, #20]
 800ce94:	687a      	ldr	r2, [r7, #4]
 800ce96:	619a      	str	r2, [r3, #24]

        /* Setup this group's created links.  */
        group_ptr -> tx_event_flags_group_created_previous =  previous_group;
 800ce98:	687b      	ldr	r3, [r7, #4]
 800ce9a:	697a      	ldr	r2, [r7, #20]
 800ce9c:	61da      	str	r2, [r3, #28]
        group_ptr -> tx_event_flags_group_created_next =      next_group;
 800ce9e:	687b      	ldr	r3, [r7, #4]
 800cea0:	69ba      	ldr	r2, [r7, #24]
 800cea2:	619a      	str	r2, [r3, #24]
    }

    /* Increment the number of created event flag groups.  */
    _tx_event_flags_created_count++;
 800cea4:	4b08      	ldr	r3, [pc, #32]	; (800cec8 <_tx_event_flags_create+0x94>)
 800cea6:	681b      	ldr	r3, [r3, #0]
 800cea8:	3301      	adds	r3, #1
 800ceaa:	4a07      	ldr	r2, [pc, #28]	; (800cec8 <_tx_event_flags_create+0x94>)
 800ceac:	6013      	str	r3, [r2, #0]
 800ceae:	69fb      	ldr	r3, [r7, #28]
 800ceb0:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800ceb2:	68bb      	ldr	r3, [r7, #8]
 800ceb4:	f383 8810 	msr	PRIMASK, r3
}
 800ceb8:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 800ceba:	2300      	movs	r3, #0
}
 800cebc:	4618      	mov	r0, r3
 800cebe:	3720      	adds	r7, #32
 800cec0:	46bd      	mov	sp, r7
 800cec2:	bd80      	pop	{r7, pc}
 800cec4:	4456444e 	.word	0x4456444e
 800cec8:	200022bc 	.word	0x200022bc
 800cecc:	200022b8 	.word	0x200022b8

0800ced0 <_tx_event_flags_set>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_event_flags_set(TX_EVENT_FLAGS_GROUP *group_ptr, ULONG flags_to_set, UINT set_option)
{
 800ced0:	b580      	push	{r7, lr}
 800ced2:	b0a6      	sub	sp, #152	; 0x98
 800ced4:	af00      	add	r7, sp, #0
 800ced6:	60f8      	str	r0, [r7, #12]
 800ced8:	60b9      	str	r1, [r7, #8]
 800ceda:	607a      	str	r2, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800cedc:	f3ef 8310 	mrs	r3, PRIMASK
 800cee0:	64fb      	str	r3, [r7, #76]	; 0x4c
    return(posture);
 800cee2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    int_posture = __get_interrupt_posture();
 800cee4:	64bb      	str	r3, [r7, #72]	; 0x48
    __asm__ volatile ("CPSID i" : : : "memory");
 800cee6:	b672      	cpsid	i
    return(int_posture);
 800cee8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
VOID            (*events_set_notify)(struct TX_EVENT_FLAGS_GROUP_STRUCT *notify_group_ptr);
#endif


    /* Disable interrupts to remove the semaphore from the created list.  */
    TX_DISABLE
 800ceea:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

    /* Log this kernel call.  */
    TX_EL_EVENT_FLAGS_SET_INSERT

    /* Determine how to set this group's event flags.  */
    if ((set_option & TX_EVENT_FLAGS_AND_MASK) == TX_AND)
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	f003 0302 	and.w	r3, r3, #2
 800cef4:	2b00      	cmp	r3, #0
 800cef6:	d023      	beq.n	800cf40 <_tx_event_flags_set+0x70>
    {

#ifndef TX_NOT_INTERRUPTABLE

        /* Set interrupted set request flag to false.  */
        interrupted_set_request =  TX_FALSE;
 800cef8:	2300      	movs	r3, #0
 800cefa:	673b      	str	r3, [r7, #112]	; 0x70

        /* Determine if the suspension list is being processed by an interrupted
           set request.  */
        if (group_ptr -> tx_event_flags_group_suspended_count != TX_NO_SUSPENSIONS)
 800cefc:	68fb      	ldr	r3, [r7, #12]
 800cefe:	695b      	ldr	r3, [r3, #20]
 800cf00:	2b00      	cmp	r3, #0
 800cf02:	d005      	beq.n	800cf10 <_tx_event_flags_set+0x40>
        {

            if (group_ptr -> tx_event_flags_group_suspension_list == TX_NULL)
 800cf04:	68fb      	ldr	r3, [r7, #12]
 800cf06:	691b      	ldr	r3, [r3, #16]
 800cf08:	2b00      	cmp	r3, #0
 800cf0a:	d101      	bne.n	800cf10 <_tx_event_flags_set+0x40>
            {

                /* Set the interrupted set request flag.  */
                interrupted_set_request =  TX_TRUE;
 800cf0c:	2301      	movs	r3, #1
 800cf0e:	673b      	str	r3, [r7, #112]	; 0x70
            }
        }

        /* Was a set request interrupted?  */
        if (interrupted_set_request == TX_TRUE)
 800cf10:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800cf12:	2b01      	cmp	r3, #1
 800cf14:	d107      	bne.n	800cf26 <_tx_event_flags_set+0x56>
            /* A previous set operation was interrupted, we need to defer the
               event clearing until the set operation is complete.  */

            /* Remember the events to clear.  */
            group_ptr -> tx_event_flags_group_delayed_clear =
                                        group_ptr -> tx_event_flags_group_delayed_clear | ~flags_to_set;
 800cf16:	68fb      	ldr	r3, [r7, #12]
 800cf18:	6a1a      	ldr	r2, [r3, #32]
 800cf1a:	68bb      	ldr	r3, [r7, #8]
 800cf1c:	43db      	mvns	r3, r3
 800cf1e:	431a      	orrs	r2, r3
            group_ptr -> tx_event_flags_group_delayed_clear =
 800cf20:	68fb      	ldr	r3, [r7, #12]
 800cf22:	621a      	str	r2, [r3, #32]
 800cf24:	e005      	b.n	800cf32 <_tx_event_flags_set+0x62>

            /* Previous set operation was not interrupted, simply clear the
               specified flags by "ANDing" the flags into the current events
               of the group.  */
            group_ptr -> tx_event_flags_group_current =
                group_ptr -> tx_event_flags_group_current & flags_to_set;
 800cf26:	68fb      	ldr	r3, [r7, #12]
 800cf28:	689a      	ldr	r2, [r3, #8]
 800cf2a:	68bb      	ldr	r3, [r7, #8]
 800cf2c:	401a      	ands	r2, r3
            group_ptr -> tx_event_flags_group_current =
 800cf2e:	68fb      	ldr	r3, [r7, #12]
 800cf30:	609a      	str	r2, [r3, #8]
 800cf32:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800cf36:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800cf38:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cf3a:	f383 8810 	msr	PRIMASK, r3
}
 800cf3e:	e1d4      	b.n	800d2ea <_tx_event_flags_set+0x41a>
        events_set_notify =  group_ptr -> tx_event_flags_group_set_notify;
#endif

        /* "OR" the flags into the current events of the group.  */
        group_ptr -> tx_event_flags_group_current =
            group_ptr -> tx_event_flags_group_current | flags_to_set;
 800cf40:	68fb      	ldr	r3, [r7, #12]
 800cf42:	689a      	ldr	r2, [r3, #8]
 800cf44:	68bb      	ldr	r3, [r7, #8]
 800cf46:	431a      	orrs	r2, r3
        group_ptr -> tx_event_flags_group_current =
 800cf48:	68fb      	ldr	r3, [r7, #12]
 800cf4a:	609a      	str	r2, [r3, #8]

#ifndef TX_NOT_INTERRUPTABLE

        /* Determine if there are any delayed flags to clear.  */
        if (group_ptr -> tx_event_flags_group_delayed_clear != ((ULONG) 0))
 800cf4c:	68fb      	ldr	r3, [r7, #12]
 800cf4e:	6a1b      	ldr	r3, [r3, #32]
 800cf50:	2b00      	cmp	r3, #0
 800cf52:	d006      	beq.n	800cf62 <_tx_event_flags_set+0x92>
        {

            /* Yes, we need to neutralize the delayed clearing as well.  */
            group_ptr -> tx_event_flags_group_delayed_clear =
                                        group_ptr -> tx_event_flags_group_delayed_clear & ~flags_to_set;
 800cf54:	68fb      	ldr	r3, [r7, #12]
 800cf56:	6a1a      	ldr	r2, [r3, #32]
 800cf58:	68bb      	ldr	r3, [r7, #8]
 800cf5a:	43db      	mvns	r3, r3
 800cf5c:	401a      	ands	r2, r3
            group_ptr -> tx_event_flags_group_delayed_clear =
 800cf5e:	68fb      	ldr	r3, [r7, #12]
 800cf60:	621a      	str	r2, [r3, #32]
        }
#endif

        /* Clear the preempt check flag.  */
        preempt_check =  TX_FALSE;
 800cf62:	2300      	movs	r3, #0
 800cf64:	677b      	str	r3, [r7, #116]	; 0x74

        /* Pickup the thread suspended count.  */
        suspended_count =  group_ptr -> tx_event_flags_group_suspended_count;
 800cf66:	68fb      	ldr	r3, [r7, #12]
 800cf68:	695b      	ldr	r3, [r3, #20]
 800cf6a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

        /* Determine if there are any threads suspended on the event flag group.  */
        if (group_ptr -> tx_event_flags_group_suspension_list != TX_NULL)
 800cf6e:	68fb      	ldr	r3, [r7, #12]
 800cf70:	691b      	ldr	r3, [r3, #16]
 800cf72:	2b00      	cmp	r3, #0
 800cf74:	f000 81a6 	beq.w	800d2c4 <_tx_event_flags_set+0x3f4>
        {

            /* Determine if there is just a single thread waiting on the event
               flag group.  */
            if (suspended_count == ((UINT) 1))
 800cf78:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800cf7c:	2b01      	cmp	r3, #1
 800cf7e:	d169      	bne.n	800d054 <_tx_event_flags_set+0x184>

                /* Single thread waiting for event flags.  Bypass the multiple thread
                   logic.  */

                /* Setup thread pointer.  */
                thread_ptr =  group_ptr -> tx_event_flags_group_suspension_list;
 800cf80:	68fb      	ldr	r3, [r7, #12]
 800cf82:	691b      	ldr	r3, [r3, #16]
 800cf84:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

                /* Pickup the current event flags.  */
                current_event_flags =  group_ptr -> tx_event_flags_group_current;
 800cf88:	68fb      	ldr	r3, [r7, #12]
 800cf8a:	689b      	ldr	r3, [r3, #8]
 800cf8c:	67fb      	str	r3, [r7, #124]	; 0x7c

                /* Pickup the suspend information.  */
                requested_flags =  thread_ptr -> tx_thread_suspend_info;
 800cf8e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800cf92:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cf94:	66bb      	str	r3, [r7, #104]	; 0x68

                /* Pickup the suspend option.  */
                get_option =  thread_ptr -> tx_thread_suspend_option;
 800cf96:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800cf9a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800cf9e:	667b      	str	r3, [r7, #100]	; 0x64

                /* Isolate the AND selection.  */
                and_request =  (get_option & TX_AND);
 800cfa0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800cfa2:	f003 0302 	and.w	r3, r3, #2
 800cfa6:	663b      	str	r3, [r7, #96]	; 0x60

                /* Check for AND condition. All flags must be present to satisfy request.  */
                if (and_request == TX_AND)
 800cfa8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800cfaa:	2b02      	cmp	r3, #2
 800cfac:	d10a      	bne.n	800cfc4 <_tx_event_flags_set+0xf4>
                {

                    /* AND request is present.  */

                    /* Calculate the flags present.  */
                    flags_satisfied =  (current_event_flags & requested_flags);
 800cfae:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800cfb0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800cfb2:	4013      	ands	r3, r2
 800cfb4:	67bb      	str	r3, [r7, #120]	; 0x78

                    /* Determine if they satisfy the AND request.  */
                    if (flags_satisfied != requested_flags)
 800cfb6:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800cfb8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800cfba:	429a      	cmp	r2, r3
 800cfbc:	d006      	beq.n	800cfcc <_tx_event_flags_set+0xfc>
                    {

                        /* No, not all the requested flags are present. Clear the flags present variable.  */
                        flags_satisfied =  ((ULONG) 0);
 800cfbe:	2300      	movs	r3, #0
 800cfc0:	67bb      	str	r3, [r7, #120]	; 0x78
 800cfc2:	e003      	b.n	800cfcc <_tx_event_flags_set+0xfc>
                }
                else
                {

                    /* OR request is present. Simply or the requested flags and the current flags.  */
                    flags_satisfied =  (current_event_flags & requested_flags);
 800cfc4:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800cfc6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800cfc8:	4013      	ands	r3, r2
 800cfca:	67bb      	str	r3, [r7, #120]	; 0x78
                }

                /* Determine if the request is satisfied.  */
                if (flags_satisfied != ((ULONG) 0))
 800cfcc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800cfce:	2b00      	cmp	r3, #0
 800cfd0:	f000 817f 	beq.w	800d2d2 <_tx_event_flags_set+0x402>

                    /* Yes, resume the thread and apply any event flag
                       clearing.  */

                    /* Set the preempt check flag.  */
                    preempt_check =  TX_TRUE;
 800cfd4:	2301      	movs	r3, #1
 800cfd6:	677b      	str	r3, [r7, #116]	; 0x74

                    /* Return the actual event flags that satisfied the request.  */
                    suspend_info_ptr =   TX_VOID_TO_ULONG_POINTER_CONVERT(thread_ptr -> tx_thread_additional_suspend_info);
 800cfd8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800cfdc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cfde:	65fb      	str	r3, [r7, #92]	; 0x5c
                    *suspend_info_ptr =  current_event_flags;
 800cfe0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cfe2:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800cfe4:	601a      	str	r2, [r3, #0]

                    /* Pickup the clear bit.  */
                    clear_request =  (get_option & TX_EVENT_FLAGS_CLEAR_MASK);
 800cfe6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800cfe8:	f003 0301 	and.w	r3, r3, #1
 800cfec:	65bb      	str	r3, [r7, #88]	; 0x58

                    /* Determine whether or not clearing needs to take place.  */
                    if (clear_request == TX_TRUE)
 800cfee:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800cff0:	2b01      	cmp	r3, #1
 800cff2:	d106      	bne.n	800d002 <_tx_event_flags_set+0x132>
                    {

                        /* Yes, clear the flags that satisfied this request.  */
                        group_ptr -> tx_event_flags_group_current =  group_ptr -> tx_event_flags_group_current & (~requested_flags);
 800cff4:	68fb      	ldr	r3, [r7, #12]
 800cff6:	689a      	ldr	r2, [r3, #8]
 800cff8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800cffa:	43db      	mvns	r3, r3
 800cffc:	401a      	ands	r2, r3
 800cffe:	68fb      	ldr	r3, [r7, #12]
 800d000:	609a      	str	r2, [r3, #8]
                    }

                    /* Clear the suspension information in the event flag group.  */
                    group_ptr -> tx_event_flags_group_suspension_list =  TX_NULL;
 800d002:	68fb      	ldr	r3, [r7, #12]
 800d004:	2200      	movs	r2, #0
 800d006:	611a      	str	r2, [r3, #16]
                    group_ptr -> tx_event_flags_group_suspended_count =  TX_NO_SUSPENSIONS;
 800d008:	68fb      	ldr	r3, [r7, #12]
 800d00a:	2200      	movs	r2, #0
 800d00c:	615a      	str	r2, [r3, #20]

                    /* Clear cleanup routine to avoid timeout.  */
                    thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800d00e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800d012:	2200      	movs	r2, #0
 800d014:	669a      	str	r2, [r3, #104]	; 0x68

                    /* Put return status into the thread control block.  */
                    thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 800d016:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800d01a:	2200      	movs	r2, #0
 800d01c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                    /* Resume the thread!  */
                    _tx_thread_system_ni_resume(thread_ptr);
#else

                    /* Temporarily disable preemption.  */
                    _tx_thread_preempt_disable++;
 800d020:	4ba7      	ldr	r3, [pc, #668]	; (800d2c0 <_tx_event_flags_set+0x3f0>)
 800d022:	681b      	ldr	r3, [r3, #0]
 800d024:	3301      	adds	r3, #1
 800d026:	4aa6      	ldr	r2, [pc, #664]	; (800d2c0 <_tx_event_flags_set+0x3f0>)
 800d028:	6013      	str	r3, [r2, #0]
 800d02a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800d02e:	63bb      	str	r3, [r7, #56]	; 0x38
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d030:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d032:	f383 8810 	msr	PRIMASK, r3
}
 800d036:	bf00      	nop

                    /* Restore interrupts.  */
                    TX_RESTORE

                    /* Resume thread.  */
                    _tx_thread_system_resume(thread_ptr);
 800d038:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 800d03c:	f000 fcd0 	bl	800d9e0 <_tx_thread_system_resume>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800d040:	f3ef 8310 	mrs	r3, PRIMASK
 800d044:	643b      	str	r3, [r7, #64]	; 0x40
    return(posture);
 800d046:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    int_posture = __get_interrupt_posture();
 800d048:	63fb      	str	r3, [r7, #60]	; 0x3c
    __asm__ volatile ("CPSID i" : : : "memory");
 800d04a:	b672      	cpsid	i
    return(int_posture);
 800d04c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c

                    /* Disable interrupts to remove the semaphore from the created list.  */
                    TX_DISABLE
 800d04e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800d052:	e13e      	b.n	800d2d2 <_tx_event_flags_set+0x402>

                /* Otherwise, the event flag requests of multiple threads must be
                   examined.  */

                /* Setup thread pointer, keep a local copy of the head pointer.  */
                suspended_list =  group_ptr -> tx_event_flags_group_suspension_list;
 800d054:	68fb      	ldr	r3, [r7, #12]
 800d056:	691b      	ldr	r3, [r3, #16]
 800d058:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
                thread_ptr =      suspended_list;
 800d05c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800d060:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

                /* Clear the suspended list head pointer to thwart manipulation of
                   the list in ISR's while we are processing here.  */
                group_ptr -> tx_event_flags_group_suspension_list =  TX_NULL;
 800d064:	68fb      	ldr	r3, [r7, #12]
 800d066:	2200      	movs	r2, #0
 800d068:	611a      	str	r2, [r3, #16]

                /* Setup the satisfied thread pointers.  */
                satisfied_list =  TX_NULL;
 800d06a:	2300      	movs	r3, #0
 800d06c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                last_satisfied =  TX_NULL;
 800d070:	2300      	movs	r3, #0
 800d072:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

                /* Pickup the current event flags.  */
                current_event_flags =  group_ptr -> tx_event_flags_group_current;
 800d076:	68fb      	ldr	r3, [r7, #12]
 800d078:	689b      	ldr	r3, [r3, #8]
 800d07a:	67fb      	str	r3, [r7, #124]	; 0x7c

                /* Disable preemption while we process the suspended list.  */
                _tx_thread_preempt_disable++;
 800d07c:	4b90      	ldr	r3, [pc, #576]	; (800d2c0 <_tx_event_flags_set+0x3f0>)
 800d07e:	681b      	ldr	r3, [r3, #0]
 800d080:	3301      	adds	r3, #1
 800d082:	4a8f      	ldr	r2, [pc, #572]	; (800d2c0 <_tx_event_flags_set+0x3f0>)
 800d084:	6013      	str	r3, [r2, #0]
 800d086:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800d08a:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d08c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d08e:	f383 8810 	msr	PRIMASK, r3
}
 800d092:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800d094:	f3ef 8310 	mrs	r3, PRIMASK
 800d098:	637b      	str	r3, [r7, #52]	; 0x34
    return(posture);
 800d09a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    int_posture = __get_interrupt_posture();
 800d09c:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("CPSID i" : : : "memory");
 800d09e:	b672      	cpsid	i
    return(int_posture);
 800d0a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30

                    /* Restore interrupts temporarily.  */
                    TX_RESTORE

                    /* Disable interrupts again.  */
                    TX_DISABLE
 800d0a2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
#endif

                    /* Determine if we need to reset the search.  */
                    if (group_ptr -> tx_event_flags_group_reset_search != TX_FALSE)
 800d0a6:	68fb      	ldr	r3, [r7, #12]
 800d0a8:	68db      	ldr	r3, [r3, #12]
 800d0aa:	2b00      	cmp	r3, #0
 800d0ac:	d00f      	beq.n	800d0ce <_tx_event_flags_set+0x1fe>
                    {

                        /* Clear the reset search flag.  */
                        group_ptr -> tx_event_flags_group_reset_search =  TX_FALSE;
 800d0ae:	68fb      	ldr	r3, [r7, #12]
 800d0b0:	2200      	movs	r2, #0
 800d0b2:	60da      	str	r2, [r3, #12]

                        /* Move the thread pointer to the beginning of the search list.  */
                        thread_ptr =  suspended_list;
 800d0b4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800d0b8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

                        /* Reset the suspended count.  */
                        suspended_count =  group_ptr -> tx_event_flags_group_suspended_count;
 800d0bc:	68fb      	ldr	r3, [r7, #12]
 800d0be:	695b      	ldr	r3, [r3, #20]
 800d0c0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

                        /* Update the current events with any new ones that might
                           have been set in a nested set events call from an ISR.  */
                        current_event_flags =  current_event_flags | group_ptr -> tx_event_flags_group_current;
 800d0c4:	68fb      	ldr	r3, [r7, #12]
 800d0c6:	689b      	ldr	r3, [r3, #8]
 800d0c8:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800d0ca:	4313      	orrs	r3, r2
 800d0cc:	67fb      	str	r3, [r7, #124]	; 0x7c
                    }

                    /* Save next thread pointer.  */
                    next_thread_ptr =  thread_ptr -> tx_thread_suspended_next;
 800d0ce:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800d0d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d0d4:	66fb      	str	r3, [r7, #108]	; 0x6c

                    /* Pickup the suspend information.  */
                    requested_flags =  thread_ptr -> tx_thread_suspend_info;
 800d0d6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800d0da:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d0dc:	66bb      	str	r3, [r7, #104]	; 0x68

                    /* Pickup this thread's suspension get option.  */
                    get_option =  thread_ptr -> tx_thread_suspend_option;
 800d0de:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800d0e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d0e6:	667b      	str	r3, [r7, #100]	; 0x64

                    /* Isolate the AND selection.  */
                    and_request =  (get_option & TX_AND);
 800d0e8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d0ea:	f003 0302 	and.w	r3, r3, #2
 800d0ee:	663b      	str	r3, [r7, #96]	; 0x60

                    /* Check for AND condition. All flags must be present to satisfy request.  */
                    if (and_request == TX_AND)
 800d0f0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d0f2:	2b02      	cmp	r3, #2
 800d0f4:	d10a      	bne.n	800d10c <_tx_event_flags_set+0x23c>
                    {

                        /* AND request is present.  */

                        /* Calculate the flags present.  */
                        flags_satisfied =  (current_event_flags & requested_flags);
 800d0f6:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800d0f8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d0fa:	4013      	ands	r3, r2
 800d0fc:	67bb      	str	r3, [r7, #120]	; 0x78

                        /* Determine if they satisfy the AND request.  */
                        if (flags_satisfied != requested_flags)
 800d0fe:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800d100:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d102:	429a      	cmp	r2, r3
 800d104:	d006      	beq.n	800d114 <_tx_event_flags_set+0x244>
                        {

                            /* No, not all the requested flags are present. Clear the flags present variable.  */
                            flags_satisfied =  ((ULONG) 0);
 800d106:	2300      	movs	r3, #0
 800d108:	67bb      	str	r3, [r7, #120]	; 0x78
 800d10a:	e003      	b.n	800d114 <_tx_event_flags_set+0x244>
                    }
                    else
                    {

                        /* OR request is present. Simply or the requested flags and the current flags.  */
                        flags_satisfied =  (current_event_flags & requested_flags);
 800d10c:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800d10e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d110:	4013      	ands	r3, r2
 800d112:	67bb      	str	r3, [r7, #120]	; 0x78
                    }

                    /* Check to see if the thread had a timeout or wait abort during the event search processing.
                       If so, just set the flags satisfied to ensure the processing here removes the thread from
                       the suspension list.  */
                    if (thread_ptr -> tx_thread_state != TX_EVENT_FLAG)
 800d114:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800d118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d11a:	2b07      	cmp	r3, #7
 800d11c:	d001      	beq.n	800d122 <_tx_event_flags_set+0x252>
                    {

                       /* Simply set the satisfied flags to 1 in order to remove the thread from the suspension list.  */
                        flags_satisfied =  ((ULONG) 1);
 800d11e:	2301      	movs	r3, #1
 800d120:	67bb      	str	r3, [r7, #120]	; 0x78
                    }

                    /* Determine if the request is satisfied.  */
                    if (flags_satisfied != ((ULONG) 0))
 800d122:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d124:	2b00      	cmp	r3, #0
 800d126:	d06b      	beq.n	800d200 <_tx_event_flags_set+0x330>
                    {

                        /* Yes, this request can be handled now.  */

                        /* Set the preempt check flag.  */
                        preempt_check =  TX_TRUE;
 800d128:	2301      	movs	r3, #1
 800d12a:	677b      	str	r3, [r7, #116]	; 0x74

                        /* Determine if the thread is still suspended on the event flag group. If not, a wait
                           abort must have been done from an ISR.  */
                        if (thread_ptr -> tx_thread_state == TX_EVENT_FLAG)
 800d12c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800d130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d132:	2b07      	cmp	r3, #7
 800d134:	d11d      	bne.n	800d172 <_tx_event_flags_set+0x2a2>
                        {

                            /* Return the actual event flags that satisfied the request.  */
                            suspend_info_ptr =   TX_VOID_TO_ULONG_POINTER_CONVERT(thread_ptr -> tx_thread_additional_suspend_info);
 800d136:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800d13a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d13c:	65fb      	str	r3, [r7, #92]	; 0x5c
                            *suspend_info_ptr =  current_event_flags;
 800d13e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d140:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800d142:	601a      	str	r2, [r3, #0]

                            /* Pickup the clear bit.  */
                            clear_request =  (get_option & TX_EVENT_FLAGS_CLEAR_MASK);
 800d144:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d146:	f003 0301 	and.w	r3, r3, #1
 800d14a:	65bb      	str	r3, [r7, #88]	; 0x58

                            /* Determine whether or not clearing needs to take place.  */
                            if (clear_request == TX_TRUE)
 800d14c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d14e:	2b01      	cmp	r3, #1
 800d150:	d106      	bne.n	800d160 <_tx_event_flags_set+0x290>
                            {

                                /* Yes, clear the flags that satisfied this request.  */
                                group_ptr -> tx_event_flags_group_current =  group_ptr -> tx_event_flags_group_current & ~requested_flags;
 800d152:	68fb      	ldr	r3, [r7, #12]
 800d154:	689a      	ldr	r2, [r3, #8]
 800d156:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d158:	43db      	mvns	r3, r3
 800d15a:	401a      	ands	r2, r3
 800d15c:	68fb      	ldr	r3, [r7, #12]
 800d15e:	609a      	str	r2, [r3, #8]
                            }

                            /* Prepare for resumption of the first thread.  */

                            /* Clear cleanup routine to avoid timeout.  */
                            thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800d160:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800d164:	2200      	movs	r2, #0
 800d166:	669a      	str	r2, [r3, #104]	; 0x68

                            /* Put return status into the thread control block.  */
                            thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 800d168:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800d16c:	2200      	movs	r2, #0
 800d16e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

                        /* We need to remove the thread from the suspension list and place it in the
                           expired list.  */

                        /* See if this is the only suspended thread on the list.  */
                        if (thread_ptr == thread_ptr -> tx_thread_suspended_next)
 800d172:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800d176:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d178:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800d17c:	429a      	cmp	r2, r3
 800d17e:	d103      	bne.n	800d188 <_tx_event_flags_set+0x2b8>
                        {

                            /* Yes, the only suspended thread.  */

                            /* Update the head pointer.  */
                            suspended_list =  TX_NULL;
 800d180:	2300      	movs	r3, #0
 800d182:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800d186:	e018      	b.n	800d1ba <_tx_event_flags_set+0x2ea>
                        {

                            /* At least one more thread is on the same expiration list.  */

                            /* Update the links of the adjacent threads.  */
                            next_thread =                                  thread_ptr -> tx_thread_suspended_next;
 800d188:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800d18c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d18e:	657b      	str	r3, [r7, #84]	; 0x54
                            previous_thread =                              thread_ptr -> tx_thread_suspended_previous;
 800d190:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800d194:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d196:	653b      	str	r3, [r7, #80]	; 0x50
                            next_thread -> tx_thread_suspended_previous =  previous_thread;
 800d198:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d19a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d19c:	675a      	str	r2, [r3, #116]	; 0x74
                            previous_thread -> tx_thread_suspended_next =  next_thread;
 800d19e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d1a0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800d1a2:	671a      	str	r2, [r3, #112]	; 0x70

                            /* Update the list head pointer, if removing the head of the
                               list.  */
                            if (suspended_list == thread_ptr)
 800d1a4:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800d1a8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800d1ac:	429a      	cmp	r2, r3
 800d1ae:	d104      	bne.n	800d1ba <_tx_event_flags_set+0x2ea>
                            {

                                /* Yes, head pointer needs to be updated.  */
                                suspended_list =  thread_ptr -> tx_thread_suspended_next;
 800d1b0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800d1b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d1b6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
                            }
                        }

                        /* Decrement the suspension count.  */
                        group_ptr -> tx_event_flags_group_suspended_count--;
 800d1ba:	68fb      	ldr	r3, [r7, #12]
 800d1bc:	695b      	ldr	r3, [r3, #20]
 800d1be:	1e5a      	subs	r2, r3, #1
 800d1c0:	68fb      	ldr	r3, [r7, #12]
 800d1c2:	615a      	str	r2, [r3, #20]

                        /* Place this thread on the expired list.  */
                        if (satisfied_list == TX_NULL)
 800d1c4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d1c8:	2b00      	cmp	r3, #0
 800d1ca:	d10c      	bne.n	800d1e6 <_tx_event_flags_set+0x316>
                        {

                            /* First thread on the satisfied list.  */
                            satisfied_list =  thread_ptr;
 800d1cc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800d1d0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                            last_satisfied =  thread_ptr;
 800d1d4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800d1d8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

                            /* Setup initial next pointer.  */
                            thread_ptr -> tx_thread_suspended_next =  TX_NULL;
 800d1dc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800d1e0:	2200      	movs	r2, #0
 800d1e2:	671a      	str	r2, [r3, #112]	; 0x70
 800d1e4:	e00c      	b.n	800d200 <_tx_event_flags_set+0x330>
                        {

                            /* Not the first thread on the satisfied list.  */

                            /* Link it up at the end.  */
                            last_satisfied -> tx_thread_suspended_next =  thread_ptr;
 800d1e6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800d1ea:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800d1ee:	671a      	str	r2, [r3, #112]	; 0x70
                            thread_ptr -> tx_thread_suspended_next =      TX_NULL;
 800d1f0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800d1f4:	2200      	movs	r2, #0
 800d1f6:	671a      	str	r2, [r3, #112]	; 0x70
                            last_satisfied =                              thread_ptr;
 800d1f8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800d1fc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                        }
                    }

                    /* Copy next thread pointer to working thread ptr.  */
                    thread_ptr =  next_thread_ptr;
 800d200:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d202:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

                    /* Decrement the suspension count.  */
                    suspended_count--;
 800d206:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800d20a:	3b01      	subs	r3, #1
 800d20c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

                } while (suspended_count != TX_NO_SUSPENSIONS);
 800d210:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800d214:	2b00      	cmp	r3, #0
 800d216:	f47f af36 	bne.w	800d086 <_tx_event_flags_set+0x1b6>

                /* Setup the group's suspension list head again.  */
                group_ptr -> tx_event_flags_group_suspension_list =  suspended_list;
 800d21a:	68fb      	ldr	r3, [r7, #12]
 800d21c:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800d220:	611a      	str	r2, [r3, #16]

#ifndef TX_NOT_INTERRUPTABLE

                /* Determine if there is any delayed event clearing to perform.  */
                if (group_ptr -> tx_event_flags_group_delayed_clear != ((ULONG) 0))
 800d222:	68fb      	ldr	r3, [r7, #12]
 800d224:	6a1b      	ldr	r3, [r3, #32]
 800d226:	2b00      	cmp	r3, #0
 800d228:	d00a      	beq.n	800d240 <_tx_event_flags_set+0x370>
                {

                    /* Perform the delayed event clearing.  */
                    group_ptr -> tx_event_flags_group_current =
                        group_ptr -> tx_event_flags_group_current & ~(group_ptr -> tx_event_flags_group_delayed_clear);
 800d22a:	68fb      	ldr	r3, [r7, #12]
 800d22c:	689a      	ldr	r2, [r3, #8]
 800d22e:	68fb      	ldr	r3, [r7, #12]
 800d230:	6a1b      	ldr	r3, [r3, #32]
 800d232:	43db      	mvns	r3, r3
 800d234:	401a      	ands	r2, r3
                    group_ptr -> tx_event_flags_group_current =
 800d236:	68fb      	ldr	r3, [r7, #12]
 800d238:	609a      	str	r2, [r3, #8]

                    /* Clear the delayed event flag clear value.  */
                    group_ptr -> tx_event_flags_group_delayed_clear =  ((ULONG) 0);
 800d23a:	68fb      	ldr	r3, [r7, #12]
 800d23c:	2200      	movs	r2, #0
 800d23e:	621a      	str	r2, [r3, #32]
 800d240:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800d244:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d246:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d248:	f383 8810 	msr	PRIMASK, r3
}
 800d24c:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Walk through the satisfied list, setup initial thread pointer. */
                thread_ptr =  satisfied_list;
 800d24e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d252:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
                while(thread_ptr != TX_NULL)
 800d256:	e01f      	b.n	800d298 <_tx_event_flags_set+0x3c8>
                {

                    /* Get next pointer first.  */
                    next_thread_ptr =  thread_ptr -> tx_thread_suspended_next;
 800d258:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800d25c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d25e:	66fb      	str	r3, [r7, #108]	; 0x6c
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800d260:	f3ef 8310 	mrs	r3, PRIMASK
 800d264:	623b      	str	r3, [r7, #32]
    return(posture);
 800d266:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800d268:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 800d26a:	b672      	cpsid	i
    return(int_posture);
 800d26c:	69fb      	ldr	r3, [r7, #28]

                    /* Disable interrupts.  */
                    TX_DISABLE
 800d26e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
                    /* Restore interrupts.  */
                    TX_RESTORE
#else

                    /* Disable preemption again.  */
                    _tx_thread_preempt_disable++;
 800d272:	4b13      	ldr	r3, [pc, #76]	; (800d2c0 <_tx_event_flags_set+0x3f0>)
 800d274:	681b      	ldr	r3, [r3, #0]
 800d276:	3301      	adds	r3, #1
 800d278:	4a11      	ldr	r2, [pc, #68]	; (800d2c0 <_tx_event_flags_set+0x3f0>)
 800d27a:	6013      	str	r3, [r2, #0]
 800d27c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800d280:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d284:	f383 8810 	msr	PRIMASK, r3
}
 800d288:	bf00      	nop

                    /* Restore interrupt posture.  */
                    TX_RESTORE

                    /* Resume the thread.  */
                    _tx_thread_system_resume(thread_ptr);
 800d28a:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 800d28e:	f000 fba7 	bl	800d9e0 <_tx_thread_system_resume>
#endif

                    /* Move next thread to current.  */
                    thread_ptr =  next_thread_ptr;
 800d292:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d294:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
                while(thread_ptr != TX_NULL)
 800d298:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800d29c:	2b00      	cmp	r3, #0
 800d29e:	d1db      	bne.n	800d258 <_tx_event_flags_set+0x388>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800d2a0:	f3ef 8310 	mrs	r3, PRIMASK
 800d2a4:	61bb      	str	r3, [r7, #24]
    return(posture);
 800d2a6:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800d2a8:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800d2aa:	b672      	cpsid	i
    return(int_posture);
 800d2ac:	697b      	ldr	r3, [r7, #20]
                }

                /* Disable interrupts.  */
                TX_DISABLE
 800d2ae:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

                /* Release thread preemption disable.  */
                _tx_thread_preempt_disable--;
 800d2b2:	4b03      	ldr	r3, [pc, #12]	; (800d2c0 <_tx_event_flags_set+0x3f0>)
 800d2b4:	681b      	ldr	r3, [r3, #0]
 800d2b6:	3b01      	subs	r3, #1
 800d2b8:	4a01      	ldr	r2, [pc, #4]	; (800d2c0 <_tx_event_flags_set+0x3f0>)
 800d2ba:	6013      	str	r3, [r2, #0]
 800d2bc:	e009      	b.n	800d2d2 <_tx_event_flags_set+0x402>
 800d2be:	bf00      	nop
 800d2c0:	20002378 	.word	0x20002378
        }
        else
        {

            /* Determine if we need to set the reset search field.  */
            if (group_ptr -> tx_event_flags_group_suspended_count != TX_NO_SUSPENSIONS)
 800d2c4:	68fb      	ldr	r3, [r7, #12]
 800d2c6:	695b      	ldr	r3, [r3, #20]
 800d2c8:	2b00      	cmp	r3, #0
 800d2ca:	d002      	beq.n	800d2d2 <_tx_event_flags_set+0x402>
            {

                /* We interrupted a search of an event flag group suspension
                   list.  Make sure we reset the search.  */
                group_ptr -> tx_event_flags_group_reset_search =  TX_TRUE;
 800d2cc:	68fb      	ldr	r3, [r7, #12]
 800d2ce:	2201      	movs	r2, #1
 800d2d0:	60da      	str	r2, [r3, #12]
 800d2d2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800d2d6:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d2d8:	693b      	ldr	r3, [r7, #16]
 800d2da:	f383 8810 	msr	PRIMASK, r3
}
 800d2de:	bf00      	nop
            (events_set_notify)(group_ptr);
        }
#endif

        /* Determine if a check for preemption is necessary.  */
        if (preempt_check == TX_TRUE)
 800d2e0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d2e2:	2b01      	cmp	r3, #1
 800d2e4:	d101      	bne.n	800d2ea <_tx_event_flags_set+0x41a>
        {

            /* Yes, one or more threads were resumed, check for preemption.  */
            _tx_thread_system_preempt_check();
 800d2e6:	f000 fb41 	bl	800d96c <_tx_thread_system_preempt_check>
        }
    }

    /* Return completion status.  */
    return(TX_SUCCESS);
 800d2ea:	2300      	movs	r3, #0
}
 800d2ec:	4618      	mov	r0, r3
 800d2ee:	3798      	adds	r7, #152	; 0x98
 800d2f0:	46bd      	mov	sp, r7
 800d2f2:	bd80      	pop	{r7, pc}

0800d2f4 <_tx_initialize_high_level>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID    _tx_initialize_high_level(VOID)
{
 800d2f4:	b580      	push	{r7, lr}
 800d2f6:	af00      	add	r7, sp, #0

    /* Initialize the event log, if enabled.  */
    TX_EL_INITIALIZE

    /* Call the thread control initialization function.  */
    _tx_thread_initialize();
 800d2f8:	f000 f960 	bl	800d5bc <_tx_thread_initialize>

#ifndef TX_NO_TIMER

    /* Call the timer control initialization function.  */
    _tx_timer_initialize();
 800d2fc:	f000 fe38 	bl	800df70 <_tx_timer_initialize>
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Call the semaphore initialization function.  */
    _tx_semaphore_initialize();
 800d300:	4b12      	ldr	r3, [pc, #72]	; (800d34c <_tx_initialize_high_level+0x58>)
 800d302:	2200      	movs	r2, #0
 800d304:	601a      	str	r2, [r3, #0]
 800d306:	4b12      	ldr	r3, [pc, #72]	; (800d350 <_tx_initialize_high_level+0x5c>)
 800d308:	2200      	movs	r2, #0
 800d30a:	601a      	str	r2, [r3, #0]

    /* Call the queue initialization function.  */
    _tx_queue_initialize();
 800d30c:	4b11      	ldr	r3, [pc, #68]	; (800d354 <_tx_initialize_high_level+0x60>)
 800d30e:	2200      	movs	r2, #0
 800d310:	601a      	str	r2, [r3, #0]
 800d312:	4b11      	ldr	r3, [pc, #68]	; (800d358 <_tx_initialize_high_level+0x64>)
 800d314:	2200      	movs	r2, #0
 800d316:	601a      	str	r2, [r3, #0]

    /* Call the event flag initialization function.  */
    _tx_event_flags_initialize();
 800d318:	4b10      	ldr	r3, [pc, #64]	; (800d35c <_tx_initialize_high_level+0x68>)
 800d31a:	2200      	movs	r2, #0
 800d31c:	601a      	str	r2, [r3, #0]
 800d31e:	4b10      	ldr	r3, [pc, #64]	; (800d360 <_tx_initialize_high_level+0x6c>)
 800d320:	2200      	movs	r2, #0
 800d322:	601a      	str	r2, [r3, #0]

    /* Call the block pool initialization function.  */
    _tx_block_pool_initialize();
 800d324:	4b0f      	ldr	r3, [pc, #60]	; (800d364 <_tx_initialize_high_level+0x70>)
 800d326:	2200      	movs	r2, #0
 800d328:	601a      	str	r2, [r3, #0]
 800d32a:	4b0f      	ldr	r3, [pc, #60]	; (800d368 <_tx_initialize_high_level+0x74>)
 800d32c:	2200      	movs	r2, #0
 800d32e:	601a      	str	r2, [r3, #0]

    /* Call the byte pool initialization function.  */
    _tx_byte_pool_initialize();
 800d330:	4b0e      	ldr	r3, [pc, #56]	; (800d36c <_tx_initialize_high_level+0x78>)
 800d332:	2200      	movs	r2, #0
 800d334:	601a      	str	r2, [r3, #0]
 800d336:	4b0e      	ldr	r3, [pc, #56]	; (800d370 <_tx_initialize_high_level+0x7c>)
 800d338:	2200      	movs	r2, #0
 800d33a:	601a      	str	r2, [r3, #0]

    /* Call the mutex initialization function.  */
    _tx_mutex_initialize();
 800d33c:	4b0d      	ldr	r3, [pc, #52]	; (800d374 <_tx_initialize_high_level+0x80>)
 800d33e:	2200      	movs	r2, #0
 800d340:	601a      	str	r2, [r3, #0]
 800d342:	4b0d      	ldr	r3, [pc, #52]	; (800d378 <_tx_initialize_high_level+0x84>)
 800d344:	2200      	movs	r2, #0
 800d346:	601a      	str	r2, [r3, #0]
#endif
}
 800d348:	bf00      	nop
 800d34a:	bd80      	pop	{r7, pc}
 800d34c:	200022a8 	.word	0x200022a8
 800d350:	200022ac 	.word	0x200022ac
 800d354:	200022b0 	.word	0x200022b0
 800d358:	200022b4 	.word	0x200022b4
 800d35c:	200022b8 	.word	0x200022b8
 800d360:	200022bc 	.word	0x200022bc
 800d364:	200022c8 	.word	0x200022c8
 800d368:	200022cc 	.word	0x200022cc
 800d36c:	200022d0 	.word	0x200022d0
 800d370:	200022d4 	.word	0x200022d4
 800d374:	200022c0 	.word	0x200022c0
 800d378:	200022c4 	.word	0x200022c4

0800d37c <_tx_initialize_kernel_enter>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_initialize_kernel_enter(VOID)
{
 800d37c:	b580      	push	{r7, lr}
 800d37e:	af00      	add	r7, sp, #0

    /* Determine if the compiler has pre-initialized ThreadX.  */
    if (_tx_thread_system_state != TX_INITIALIZE_ALMOST_DONE)
 800d380:	4b10      	ldr	r3, [pc, #64]	; (800d3c4 <_tx_initialize_kernel_enter+0x48>)
 800d382:	681b      	ldr	r3, [r3, #0]
 800d384:	f113 3f0f 	cmn.w	r3, #252645135	; 0xf0f0f0f
 800d388:	d00c      	beq.n	800d3a4 <_tx_initialize_kernel_enter+0x28>
        /* No, the initialization still needs to take place.  */

        /* Ensure that the system state variable is set to indicate
           initialization is in progress.  Note that this variable is
           later used to represent interrupt nesting.  */
        _tx_thread_system_state =  TX_INITIALIZE_IN_PROGRESS;
 800d38a:	4b0e      	ldr	r3, [pc, #56]	; (800d3c4 <_tx_initialize_kernel_enter+0x48>)
 800d38c:	f04f 32f0 	mov.w	r2, #4042322160	; 0xf0f0f0f0
 800d390:	601a      	str	r2, [r3, #0]
        /* Call any port specific preprocessing.  */
        TX_PORT_SPECIFIC_PRE_INITIALIZATION

        /* Invoke the low-level initialization to handle all processor specific
           initialization issues.  */
        _tx_initialize_low_level();
 800d392:	f7f2 ff6f 	bl	8000274 <_tx_initialize_low_level>

        /* Invoke the high-level initialization to exercise all of the
           ThreadX components and the application's initialization
           function.  */
        _tx_initialize_high_level();
 800d396:	f7ff ffad 	bl	800d2f4 <_tx_initialize_high_level>

        /* Call any port specific post-processing.  */
        TX_PORT_SPECIFIC_POST_INITIALIZATION
 800d39a:	4b0b      	ldr	r3, [pc, #44]	; (800d3c8 <_tx_initialize_kernel_enter+0x4c>)
 800d39c:	681b      	ldr	r3, [r3, #0]
 800d39e:	3301      	adds	r3, #1
 800d3a0:	4a09      	ldr	r2, [pc, #36]	; (800d3c8 <_tx_initialize_kernel_enter+0x4c>)
 800d3a2:	6013      	str	r3, [r2, #0]
    TX_INITIALIZE_KERNEL_ENTER_EXTENSION

    /* Ensure that the system state variable is set to indicate
       initialization is in progress.  Note that this variable is
       later used to represent interrupt nesting.  */
    _tx_thread_system_state =  TX_INITIALIZE_IN_PROGRESS;
 800d3a4:	4b07      	ldr	r3, [pc, #28]	; (800d3c4 <_tx_initialize_kernel_enter+0x48>)
 800d3a6:	f04f 32f0 	mov.w	r2, #4042322160	; 0xf0f0f0f0
 800d3aa:	601a      	str	r2, [r3, #0]

    /* Call the application provided initialization function.  Pass the
       first available memory address to it.  */
    tx_application_define(_tx_initialize_unused_memory);
 800d3ac:	4b07      	ldr	r3, [pc, #28]	; (800d3cc <_tx_initialize_kernel_enter+0x50>)
 800d3ae:	681b      	ldr	r3, [r3, #0]
 800d3b0:	4618      	mov	r0, r3
 800d3b2:	f7f3 fc9b 	bl	8000cec <tx_application_define>

    /* Set the system state in preparation for entering the thread
       scheduler.  */
    _tx_thread_system_state =  TX_INITIALIZE_IS_FINISHED;
 800d3b6:	4b03      	ldr	r3, [pc, #12]	; (800d3c4 <_tx_initialize_kernel_enter+0x48>)
 800d3b8:	2200      	movs	r2, #0
 800d3ba:	601a      	str	r2, [r3, #0]

    /* Call any port specific pre-scheduler processing.  */
    TX_PORT_SPECIFIC_PRE_SCHEDULER_INITIALIZATION

    /* Enter the scheduling loop to start executing threads!  */
    _tx_thread_schedule();
 800d3bc:	f7f2 ff96 	bl	80002ec <_tx_thread_schedule>
#ifdef TX_SAFETY_CRITICAL

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif
}
 800d3c0:	bf00      	nop
 800d3c2:	bd80      	pop	{r7, pc}
 800d3c4:	20000010 	.word	0x20000010
 800d3c8:	20002378 	.word	0x20002378
 800d3cc:	200022d8 	.word	0x200022d8

0800d3d0 <_tx_thread_create>:
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_create(TX_THREAD *thread_ptr, CHAR *name_ptr, VOID (*entry_function)(ULONG id), ULONG entry_input,
                            VOID *stack_start, ULONG stack_size, UINT priority, UINT preempt_threshold,
                            ULONG time_slice, UINT auto_start)
{
 800d3d0:	b580      	push	{r7, lr}
 800d3d2:	b092      	sub	sp, #72	; 0x48
 800d3d4:	af00      	add	r7, sp, #0
 800d3d6:	60f8      	str	r0, [r7, #12]
 800d3d8:	60b9      	str	r1, [r7, #8]
 800d3da:	607a      	str	r2, [r7, #4]
 800d3dc:	603b      	str	r3, [r7, #0]
TX_INTERRUPT_SAVE_AREA

TX_THREAD               *next_thread;
TX_THREAD               *previous_thread;
TX_THREAD               *saved_thread_ptr;
UINT                    saved_threshold =  ((UINT) 0);
 800d3de:	2300      	movs	r3, #0
 800d3e0:	643b      	str	r3, [r7, #64]	; 0x40
#ifndef TX_DISABLE_STACK_FILLING

    /* Set the thread stack to a pattern prior to creating the initial
       stack frame.  This pattern is used by the stack checking routines
       to see how much has been used.  */
    TX_MEMSET(stack_start, ((UCHAR) TX_STACK_FILL), stack_size);
 800d3e2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800d3e4:	21ef      	movs	r1, #239	; 0xef
 800d3e6:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800d3e8:	f001 fa88 	bl	800e8fc <memset>

    /* Prepare the thread control block prior to placing it on the created
       list.  */

    /* Initialize thread control block to all zeros.  */
    TX_MEMSET(thread_ptr, 0, (sizeof(TX_THREAD)));
 800d3ec:	22b0      	movs	r2, #176	; 0xb0
 800d3ee:	2100      	movs	r1, #0
 800d3f0:	68f8      	ldr	r0, [r7, #12]
 800d3f2:	f001 fa83 	bl	800e8fc <memset>

    /* Place the supplied parameters into the thread's control block.  */
    thread_ptr -> tx_thread_name =              name_ptr;
 800d3f6:	68fb      	ldr	r3, [r7, #12]
 800d3f8:	68ba      	ldr	r2, [r7, #8]
 800d3fa:	629a      	str	r2, [r3, #40]	; 0x28
    thread_ptr -> tx_thread_entry =             entry_function;
 800d3fc:	68fb      	ldr	r3, [r7, #12]
 800d3fe:	687a      	ldr	r2, [r7, #4]
 800d400:	645a      	str	r2, [r3, #68]	; 0x44
    thread_ptr -> tx_thread_entry_parameter =   entry_input;
 800d402:	68fb      	ldr	r3, [r7, #12]
 800d404:	683a      	ldr	r2, [r7, #0]
 800d406:	649a      	str	r2, [r3, #72]	; 0x48
    thread_ptr -> tx_thread_stack_start =       stack_start;
 800d408:	68fb      	ldr	r3, [r7, #12]
 800d40a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d40c:	60da      	str	r2, [r3, #12]
    thread_ptr -> tx_thread_stack_size =        stack_size;
 800d40e:	68fb      	ldr	r3, [r7, #12]
 800d410:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800d412:	615a      	str	r2, [r3, #20]
    thread_ptr -> tx_thread_priority =          priority;
 800d414:	68fb      	ldr	r3, [r7, #12]
 800d416:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d418:	62da      	str	r2, [r3, #44]	; 0x2c
    thread_ptr -> tx_thread_user_priority =     priority;
 800d41a:	68fb      	ldr	r3, [r7, #12]
 800d41c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d41e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    thread_ptr -> tx_thread_time_slice =        time_slice;
 800d422:	68fb      	ldr	r3, [r7, #12]
 800d424:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800d426:	619a      	str	r2, [r3, #24]
    thread_ptr -> tx_thread_new_time_slice =    time_slice;
 800d428:	68fb      	ldr	r3, [r7, #12]
 800d42a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800d42c:	61da      	str	r2, [r3, #28]
    thread_ptr -> tx_thread_inherit_priority =  ((UINT) TX_MAX_PRIORITIES);
 800d42e:	68fb      	ldr	r3, [r7, #12]
 800d430:	2220      	movs	r2, #32
 800d432:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Calculate the end of the thread's stack area.  */
    temp_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(stack_start);
 800d436:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d438:	63fb      	str	r3, [r7, #60]	; 0x3c
    temp_ptr =  (TX_UCHAR_POINTER_ADD(temp_ptr, (stack_size - ((ULONG) 1))));
 800d43a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d43c:	3b01      	subs	r3, #1
 800d43e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d440:	4413      	add	r3, r2
 800d442:	63fb      	str	r3, [r7, #60]	; 0x3c
    thread_ptr -> tx_thread_stack_end =         TX_UCHAR_TO_VOID_POINTER_CONVERT(temp_ptr);
 800d444:	68fb      	ldr	r3, [r7, #12]
 800d446:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d448:	611a      	str	r2, [r3, #16]
    thread_ptr -> tx_thread_preempt_threshold =       preempt_threshold;
    thread_ptr -> tx_thread_user_preempt_threshold =  preempt_threshold;
#else

    /* Preemption-threshold is disabled, determine if preemption-threshold was required.  */
    if (priority != preempt_threshold)
 800d44a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d44c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d44e:	429a      	cmp	r2, r3
 800d450:	d007      	beq.n	800d462 <_tx_thread_create+0x92>
    {

        /* Preemption-threshold specified. Since specific preemption-threshold is not supported,
           disable all preemption.  */
        thread_ptr -> tx_thread_preempt_threshold =       ((UINT) 0);
 800d452:	68fb      	ldr	r3, [r7, #12]
 800d454:	2200      	movs	r2, #0
 800d456:	63da      	str	r2, [r3, #60]	; 0x3c
        thread_ptr -> tx_thread_user_preempt_threshold =  ((UINT) 0);
 800d458:	68fb      	ldr	r3, [r7, #12]
 800d45a:	2200      	movs	r2, #0
 800d45c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 800d460:	e006      	b.n	800d470 <_tx_thread_create+0xa0>
    }
    else
    {

        /* Preemption-threshold is not specified, just setup with the priority.  */
        thread_ptr -> tx_thread_preempt_threshold =       priority;
 800d462:	68fb      	ldr	r3, [r7, #12]
 800d464:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d466:	63da      	str	r2, [r3, #60]	; 0x3c
        thread_ptr -> tx_thread_user_preempt_threshold =  priority;
 800d468:	68fb      	ldr	r3, [r7, #12]
 800d46a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d46c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    }
#endif

    /* Now fill in the values that are required for thread initialization.  */
    thread_ptr -> tx_thread_state =  TX_SUSPENDED;
 800d470:	68fb      	ldr	r3, [r7, #12]
 800d472:	2203      	movs	r2, #3
 800d474:	631a      	str	r2, [r3, #48]	; 0x30

    /* Setup the necessary fields in the thread timer block.  */
    TX_THREAD_CREATE_TIMEOUT_SETUP(thread_ptr)
 800d476:	68fb      	ldr	r3, [r7, #12]
 800d478:	4a48      	ldr	r2, [pc, #288]	; (800d59c <_tx_thread_create+0x1cc>)
 800d47a:	655a      	str	r2, [r3, #84]	; 0x54
 800d47c:	68fa      	ldr	r2, [r7, #12]
 800d47e:	68fb      	ldr	r3, [r7, #12]
 800d480:	659a      	str	r2, [r3, #88]	; 0x58
    TX_THREAD_CREATE_INTERNAL_EXTENSION(thread_ptr)

    /* Call the target specific stack frame building routine to build the
       thread's initial stack and to setup the actual stack pointer in the
       control block.  */
    _tx_thread_stack_build(thread_ptr, _tx_thread_shell_entry);
 800d482:	4947      	ldr	r1, [pc, #284]	; (800d5a0 <_tx_thread_create+0x1d0>)
 800d484:	68f8      	ldr	r0, [r7, #12]
 800d486:	f7f2 ff97 	bl	80003b8 <_tx_thread_stack_build>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800d48a:	f3ef 8310 	mrs	r3, PRIMASK
 800d48e:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 800d490:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 800d492:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 800d494:	b672      	cpsid	i
    return(int_posture);
 800d496:	6abb      	ldr	r3, [r7, #40]	; 0x28
    /* Setup the highest usage stack pointer.  */
    thread_ptr -> tx_thread_stack_highest_ptr =  thread_ptr -> tx_thread_stack_ptr;
#endif

    /* Prepare to make this thread a member of the created thread list.  */
    TX_DISABLE
 800d498:	63bb      	str	r3, [r7, #56]	; 0x38

    /* Load the thread ID field in the thread control block.  */
    thread_ptr -> tx_thread_id =  TX_THREAD_ID;
 800d49a:	68fb      	ldr	r3, [r7, #12]
 800d49c:	4a41      	ldr	r2, [pc, #260]	; (800d5a4 <_tx_thread_create+0x1d4>)
 800d49e:	601a      	str	r2, [r3, #0]

    /* Place the thread on the list of created threads.  First,
       check for an empty list.  */
    if (_tx_thread_created_count == TX_EMPTY)
 800d4a0:	4b41      	ldr	r3, [pc, #260]	; (800d5a8 <_tx_thread_create+0x1d8>)
 800d4a2:	681b      	ldr	r3, [r3, #0]
 800d4a4:	2b00      	cmp	r3, #0
 800d4a6:	d10b      	bne.n	800d4c0 <_tx_thread_create+0xf0>
    {

        /* The created thread list is empty.  Add thread to empty list.  */
        _tx_thread_created_ptr =                    thread_ptr;
 800d4a8:	4a40      	ldr	r2, [pc, #256]	; (800d5ac <_tx_thread_create+0x1dc>)
 800d4aa:	68fb      	ldr	r3, [r7, #12]
 800d4ac:	6013      	str	r3, [r2, #0]
        thread_ptr -> tx_thread_created_next =      thread_ptr;
 800d4ae:	68fb      	ldr	r3, [r7, #12]
 800d4b0:	68fa      	ldr	r2, [r7, #12]
 800d4b2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        thread_ptr -> tx_thread_created_previous =  thread_ptr;
 800d4b6:	68fb      	ldr	r3, [r7, #12]
 800d4b8:	68fa      	ldr	r2, [r7, #12]
 800d4ba:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 800d4be:	e016      	b.n	800d4ee <_tx_thread_create+0x11e>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_thread =  _tx_thread_created_ptr;
 800d4c0:	4b3a      	ldr	r3, [pc, #232]	; (800d5ac <_tx_thread_create+0x1dc>)
 800d4c2:	681b      	ldr	r3, [r3, #0]
 800d4c4:	637b      	str	r3, [r7, #52]	; 0x34
        previous_thread =  next_thread -> tx_thread_created_previous;
 800d4c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d4c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d4cc:	633b      	str	r3, [r7, #48]	; 0x30

        /* Place the new thread in the list.  */
        next_thread -> tx_thread_created_previous =  thread_ptr;
 800d4ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d4d0:	68fa      	ldr	r2, [r7, #12]
 800d4d2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        previous_thread -> tx_thread_created_next =  thread_ptr;
 800d4d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4d8:	68fa      	ldr	r2, [r7, #12]
 800d4da:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Setup this thread's created links.  */
        thread_ptr -> tx_thread_created_previous =  previous_thread;
 800d4de:	68fb      	ldr	r3, [r7, #12]
 800d4e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d4e2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        thread_ptr -> tx_thread_created_next =      next_thread;
 800d4e6:	68fb      	ldr	r3, [r7, #12]
 800d4e8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d4ea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* Increment the thread created count.  */
    _tx_thread_created_count++;
 800d4ee:	4b2e      	ldr	r3, [pc, #184]	; (800d5a8 <_tx_thread_create+0x1d8>)
 800d4f0:	681b      	ldr	r3, [r3, #0]
 800d4f2:	3301      	adds	r3, #1
 800d4f4:	4a2c      	ldr	r2, [pc, #176]	; (800d5a8 <_tx_thread_create+0x1d8>)
 800d4f6:	6013      	str	r3, [r2, #0]
    TX_EL_THREAD_CREATE_INSERT

#ifndef TX_NOT_INTERRUPTABLE

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 800d4f8:	4b2d      	ldr	r3, [pc, #180]	; (800d5b0 <_tx_thread_create+0x1e0>)
 800d4fa:	681b      	ldr	r3, [r3, #0]
 800d4fc:	3301      	adds	r3, #1
 800d4fe:	4a2c      	ldr	r2, [pc, #176]	; (800d5b0 <_tx_thread_create+0x1e0>)
 800d500:	6013      	str	r3, [r2, #0]
#endif

    /* Determine if an automatic start was requested.  If so, call the resume
       thread function and then check for a preemption condition.  */
    if (auto_start == TX_AUTO_START)
 800d502:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d504:	2b01      	cmp	r3, #1
 800d506:	d129      	bne.n	800d55c <_tx_thread_create+0x18c>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800d508:	f3ef 8305 	mrs	r3, IPSR
 800d50c:	627b      	str	r3, [r7, #36]	; 0x24
    return(ipsr_value);
 800d50e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    {

        /* Determine if the create call is being called from initialization.  */
        if (TX_THREAD_GET_SYSTEM_STATE() >= TX_INITIALIZE_IN_PROGRESS)
 800d510:	4b28      	ldr	r3, [pc, #160]	; (800d5b4 <_tx_thread_create+0x1e4>)
 800d512:	681b      	ldr	r3, [r3, #0]
 800d514:	4313      	orrs	r3, r2
 800d516:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800d51a:	d30d      	bcc.n	800d538 <_tx_thread_create+0x168>

            /* Pickup the current thread execute pointer, which corresponds to the
               highest priority thread ready to execute.  Interrupt lockout is
               not required, since interrupts are assumed to be disabled during
               initialization.  */
            saved_thread_ptr =  _tx_thread_execute_ptr;
 800d51c:	4b26      	ldr	r3, [pc, #152]	; (800d5b8 <_tx_thread_create+0x1e8>)
 800d51e:	681b      	ldr	r3, [r3, #0]
 800d520:	647b      	str	r3, [r7, #68]	; 0x44

            /* Determine if there is thread ready for execution.  */
            if (saved_thread_ptr != TX_NULL)
 800d522:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d524:	2b00      	cmp	r3, #0
 800d526:	d009      	beq.n	800d53c <_tx_thread_create+0x16c>
            {

                /* Yes, a thread is ready for execution when initialization completes.  */

                /* Save the current preemption-threshold.  */
                saved_threshold =  saved_thread_ptr -> tx_thread_preempt_threshold;
 800d528:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d52a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d52c:	643b      	str	r3, [r7, #64]	; 0x40

                /* For initialization, temporarily set the preemption-threshold to the
                   priority level to make sure the highest-priority thread runs once
                   initialization is complete.  */
                saved_thread_ptr -> tx_thread_preempt_threshold =  saved_thread_ptr -> tx_thread_priority;
 800d52e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d530:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d532:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d534:	63da      	str	r2, [r3, #60]	; 0x3c
 800d536:	e001      	b.n	800d53c <_tx_thread_create+0x16c>
        }
        else
        {

            /* Simply set the saved thread pointer to NULL.  */
            saved_thread_ptr =  TX_NULL;
 800d538:	2300      	movs	r3, #0
 800d53a:	647b      	str	r3, [r7, #68]	; 0x44
 800d53c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d53e:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d540:	6a3b      	ldr	r3, [r7, #32]
 800d542:	f383 8810 	msr	PRIMASK, r3
}
 800d546:	bf00      	nop

        /* Perform any additional activities for tool or user purpose.  */
        TX_THREAD_CREATE_EXTENSION(thread_ptr)

        /* Call the resume thread function to make this thread ready.  */
        _tx_thread_system_resume(thread_ptr);
 800d548:	68f8      	ldr	r0, [r7, #12]
 800d54a:	f000 fa49 	bl	800d9e0 <_tx_thread_system_resume>
#endif

        /* Determine if the thread's preemption-threshold needs to be restored.  */
        if (saved_thread_ptr != TX_NULL)
 800d54e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d550:	2b00      	cmp	r3, #0
 800d552:	d01e      	beq.n	800d592 <_tx_thread_create+0x1c2>
        {

            /* Yes, restore the previous highest-priority thread's preemption-threshold. This
               can only happen if this routine is called from initialization.  */
            saved_thread_ptr -> tx_thread_preempt_threshold =  saved_threshold;
 800d554:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d556:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d558:	63da      	str	r2, [r3, #60]	; 0x3c
 800d55a:	e01a      	b.n	800d592 <_tx_thread_create+0x1c2>
 800d55c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d55e:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d560:	693b      	ldr	r3, [r7, #16]
 800d562:	f383 8810 	msr	PRIMASK, r3
}
 800d566:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800d568:	f3ef 8310 	mrs	r3, PRIMASK
 800d56c:	61bb      	str	r3, [r7, #24]
    return(posture);
 800d56e:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800d570:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800d572:	b672      	cpsid	i
    return(int_posture);
 800d574:	697b      	ldr	r3, [r7, #20]

        /* Perform any additional activities for tool or user purpose.  */
        TX_THREAD_CREATE_EXTENSION(thread_ptr)

        /* Disable interrupts.  */
        TX_DISABLE
 800d576:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Re-enable preemption.  */
        _tx_thread_preempt_disable--;
 800d578:	4b0d      	ldr	r3, [pc, #52]	; (800d5b0 <_tx_thread_create+0x1e0>)
 800d57a:	681b      	ldr	r3, [r3, #0]
 800d57c:	3b01      	subs	r3, #1
 800d57e:	4a0c      	ldr	r2, [pc, #48]	; (800d5b0 <_tx_thread_create+0x1e0>)
 800d580:	6013      	str	r3, [r2, #0]
 800d582:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d584:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d586:	69fb      	ldr	r3, [r7, #28]
 800d588:	f383 8810 	msr	PRIMASK, r3
}
 800d58c:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 800d58e:	f000 f9ed 	bl	800d96c <_tx_thread_system_preempt_check>
#endif
    }

    /* Always return a success.  */
    return(TX_SUCCESS);
 800d592:	2300      	movs	r3, #0
}
 800d594:	4618      	mov	r0, r3
 800d596:	3748      	adds	r7, #72	; 0x48
 800d598:	46bd      	mov	sp, r7
 800d59a:	bd80      	pop	{r7, pc}
 800d59c:	0800deb5 	.word	0x0800deb5
 800d5a0:	0800d6f5 	.word	0x0800d6f5
 800d5a4:	54485244 	.word	0x54485244
 800d5a8:	200022ec 	.word	0x200022ec
 800d5ac:	200022e8 	.word	0x200022e8
 800d5b0:	20002378 	.word	0x20002378
 800d5b4:	20000010 	.word	0x20000010
 800d5b8:	200022e4 	.word	0x200022e4

0800d5bc <_tx_thread_initialize>:
/*                                            stack check error handling, */
/*                                            resulting in version 6.1.9  */   
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_initialize(VOID)
{
 800d5bc:	b580      	push	{r7, lr}
 800d5be:	af00      	add	r7, sp, #0
       respectively.  */

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Set current thread pointer to NULL.  */
    TX_THREAD_SET_CURRENT(TX_NULL)
 800d5c0:	4b12      	ldr	r3, [pc, #72]	; (800d60c <_tx_thread_initialize+0x50>)
 800d5c2:	2200      	movs	r2, #0
 800d5c4:	601a      	str	r2, [r3, #0]

    /* Initialize the execute thread pointer to NULL.  */
    _tx_thread_execute_ptr =  TX_NULL;
 800d5c6:	4b12      	ldr	r3, [pc, #72]	; (800d610 <_tx_thread_initialize+0x54>)
 800d5c8:	2200      	movs	r2, #0
 800d5ca:	601a      	str	r2, [r3, #0]
 800d5cc:	4b11      	ldr	r3, [pc, #68]	; (800d614 <_tx_thread_initialize+0x58>)
 800d5ce:	2200      	movs	r2, #0
 800d5d0:	601a      	str	r2, [r3, #0]
#endif
#endif

    /* Setup the highest priority variable to the max, indicating no thread is currently
       ready.  */
    _tx_thread_highest_priority =  ((UINT) TX_MAX_PRIORITIES);
 800d5d2:	4b11      	ldr	r3, [pc, #68]	; (800d618 <_tx_thread_initialize+0x5c>)
 800d5d4:	2220      	movs	r2, #32
 800d5d6:	601a      	str	r2, [r3, #0]


#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the array of priority head pointers.  */
    TX_MEMSET(&_tx_thread_priority_list[0], 0, (sizeof(_tx_thread_priority_list)));
 800d5d8:	2280      	movs	r2, #128	; 0x80
 800d5da:	2100      	movs	r1, #0
 800d5dc:	480f      	ldr	r0, [pc, #60]	; (800d61c <_tx_thread_initialize+0x60>)
 800d5de:	f001 f98d 	bl	800e8fc <memset>

    /* Initialize the head pointer of the created threads list and the
       number of threads created.  */
    _tx_thread_created_ptr =        TX_NULL;
 800d5e2:	4b0f      	ldr	r3, [pc, #60]	; (800d620 <_tx_thread_initialize+0x64>)
 800d5e4:	2200      	movs	r2, #0
 800d5e6:	601a      	str	r2, [r3, #0]
    _tx_thread_created_count =      TX_EMPTY;
 800d5e8:	4b0e      	ldr	r3, [pc, #56]	; (800d624 <_tx_thread_initialize+0x68>)
 800d5ea:	2200      	movs	r2, #0
 800d5ec:	601a      	str	r2, [r3, #0]

    /* Clear the global preempt disable variable.  */
    _tx_thread_preempt_disable =    ((UINT) 0);
 800d5ee:	4b0e      	ldr	r3, [pc, #56]	; (800d628 <_tx_thread_initialize+0x6c>)
 800d5f0:	2200      	movs	r2, #0
 800d5f2:	601a      	str	r2, [r3, #0]

    /* Initialize the thread mutex release function pointer.  */
    _tx_thread_mutex_release =      TX_NULL;
 800d5f4:	4b0d      	ldr	r3, [pc, #52]	; (800d62c <_tx_thread_initialize+0x70>)
 800d5f6:	2200      	movs	r2, #0
 800d5f8:	601a      	str	r2, [r3, #0]
#endif
#ifdef TX_DISABLE_REDUNDANT_CLEARING
                            | (((ULONG) 1) << 18)
#endif
#ifdef TX_DISABLE_NOTIFY_CALLBACKS
                            | (((ULONG) 1) << 17)
 800d5fa:	4b0d      	ldr	r3, [pc, #52]	; (800d630 <_tx_thread_initialize+0x74>)
 800d5fc:	681b      	ldr	r3, [r3, #0]
 800d5fe:	f043 7385 	orr.w	r3, r3, #17432576	; 0x10a0000
    _tx_build_options =  _tx_build_options 
 800d602:	4a0b      	ldr	r2, [pc, #44]	; (800d630 <_tx_thread_initialize+0x74>)
 800d604:	6013      	str	r3, [r2, #0]
#endif
#if TX_PORT_SPECIFIC_BUILD_OPTIONS != 0
                            | TX_PORT_SPECIFIC_BUILD_OPTIONS
#endif
                            ;
}
 800d606:	bf00      	nop
 800d608:	bd80      	pop	{r7, pc}
 800d60a:	bf00      	nop
 800d60c:	200022e0 	.word	0x200022e0
 800d610:	200022e4 	.word	0x200022e4
 800d614:	200022f0 	.word	0x200022f0
 800d618:	200022f4 	.word	0x200022f4
 800d61c:	200022f8 	.word	0x200022f8
 800d620:	200022e8 	.word	0x200022e8
 800d624:	200022ec 	.word	0x200022ec
 800d628:	20002378 	.word	0x20002378
 800d62c:	2000237c 	.word	0x2000237c
 800d630:	20002380 	.word	0x20002380

0800d634 <_tx_thread_resume>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_resume(TX_THREAD *thread_ptr)
{
 800d634:	b580      	push	{r7, lr}
 800d636:	b08c      	sub	sp, #48	; 0x30
 800d638:	af00      	add	r7, sp, #0
 800d63a:	6078      	str	r0, [r7, #4]

TX_INTERRUPT_SAVE_AREA

UINT        status;
TX_THREAD   *saved_thread_ptr;
UINT        saved_threshold =  ((UINT) 0);
 800d63c:	2300      	movs	r3, #0
 800d63e:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800d640:	f3ef 8310 	mrs	r3, PRIMASK
 800d644:	61fb      	str	r3, [r7, #28]
    return(posture);
 800d646:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 800d648:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 800d64a:	b672      	cpsid	i
    return(int_posture);
 800d64c:	69bb      	ldr	r3, [r7, #24]
    TX_THREAD_STACK_CHECK(thread_ptr)
#endif
#endif

    /* Lockout interrupts while the thread is being resumed.  */
    TX_DISABLE
 800d64e:	623b      	str	r3, [r7, #32]
    /* Log this kernel call.  */
    TX_EL_THREAD_RESUME_INSERT

    /* Determine if the thread is suspended or in the process of suspending.
       If so, call the thread resume processing.  */
    if (thread_ptr -> tx_thread_state == TX_SUSPENDED)
 800d650:	687b      	ldr	r3, [r7, #4]
 800d652:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d654:	2b03      	cmp	r3, #3
 800d656:	d12f      	bne.n	800d6b8 <_tx_thread_resume+0x84>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800d658:	f3ef 8305 	mrs	r3, IPSR
 800d65c:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800d65e:	697a      	ldr	r2, [r7, #20]
    {

        /* Determine if the create call is being called from initialization.  */
        if (TX_THREAD_GET_SYSTEM_STATE() >= TX_INITIALIZE_IN_PROGRESS)
 800d660:	4b21      	ldr	r3, [pc, #132]	; (800d6e8 <_tx_thread_resume+0xb4>)
 800d662:	681b      	ldr	r3, [r3, #0]
 800d664:	4313      	orrs	r3, r2
 800d666:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800d66a:	d30d      	bcc.n	800d688 <_tx_thread_resume+0x54>

            /* Pickup the current thread execute pointer, which corresponds to the
               highest priority thread ready to execute.  Interrupt lockout is
               not required, since interrupts are assumed to be disabled during
               initialization.  */
            saved_thread_ptr =  _tx_thread_execute_ptr;
 800d66c:	4b1f      	ldr	r3, [pc, #124]	; (800d6ec <_tx_thread_resume+0xb8>)
 800d66e:	681b      	ldr	r3, [r3, #0]
 800d670:	62bb      	str	r3, [r7, #40]	; 0x28

            /* Determine if there is thread ready for execution.  */
            if (saved_thread_ptr != TX_NULL)
 800d672:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d674:	2b00      	cmp	r3, #0
 800d676:	d009      	beq.n	800d68c <_tx_thread_resume+0x58>
            {

                /* Yes, a thread is ready for execution when initialization completes.  */

                /* Save the current preemption-threshold.  */
                saved_threshold =  saved_thread_ptr -> tx_thread_preempt_threshold;
 800d678:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d67a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d67c:	627b      	str	r3, [r7, #36]	; 0x24

                /* For initialization, temporarily set the preemption-threshold to the
                   priority level to make sure the highest-priority thread runs once
                   initialization is complete.  */
                saved_thread_ptr -> tx_thread_preempt_threshold =  saved_thread_ptr -> tx_thread_priority;
 800d67e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d680:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d682:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d684:	63da      	str	r2, [r3, #60]	; 0x3c
 800d686:	e001      	b.n	800d68c <_tx_thread_resume+0x58>
        }
        else
        {

            /* Simply set the saved thread pointer to NULL.  */
            saved_thread_ptr =  TX_NULL;
 800d688:	2300      	movs	r3, #0
 800d68a:	62bb      	str	r3, [r7, #40]	; 0x28
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Temporarily disable preemption.  */
        _tx_thread_preempt_disable++;
 800d68c:	4b18      	ldr	r3, [pc, #96]	; (800d6f0 <_tx_thread_resume+0xbc>)
 800d68e:	681b      	ldr	r3, [r3, #0]
 800d690:	3301      	adds	r3, #1
 800d692:	4a17      	ldr	r2, [pc, #92]	; (800d6f0 <_tx_thread_resume+0xbc>)
 800d694:	6013      	str	r3, [r2, #0]
 800d696:	6a3b      	ldr	r3, [r7, #32]
 800d698:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d69a:	693b      	ldr	r3, [r7, #16]
 800d69c:	f383 8810 	msr	PRIMASK, r3
}
 800d6a0:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Call the actual resume service to resume the thread.  */
        _tx_thread_system_resume(thread_ptr);
 800d6a2:	6878      	ldr	r0, [r7, #4]
 800d6a4:	f000 f99c 	bl	800d9e0 <_tx_thread_system_resume>
#endif

        /* Determine if the thread's preemption-threshold needs to be restored.  */
        if (saved_thread_ptr != TX_NULL)
 800d6a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6aa:	2b00      	cmp	r3, #0
 800d6ac:	d002      	beq.n	800d6b4 <_tx_thread_resume+0x80>
        {

            /* Yes, restore the previous highest-priority thread's preemption-threshold. This
               can only happen if this routine is called from initialization.  */
            saved_thread_ptr -> tx_thread_preempt_threshold =  saved_threshold;
 800d6ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d6b2:	63da      	str	r2, [r3, #60]	; 0x3c
        /* Setup successful return status.  */
        status =  TX_SUCCESS;
#else

        /* Return successful completion.  */
        return(TX_SUCCESS);
 800d6b4:	2300      	movs	r3, #0
 800d6b6:	e012      	b.n	800d6de <_tx_thread_resume+0xaa>

        /* Setup successful return status.  */
        status =  TX_SUCCESS;
#endif
    }
    else if (thread_ptr -> tx_thread_delayed_suspend == TX_TRUE)
 800d6b8:	687b      	ldr	r3, [r7, #4]
 800d6ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d6bc:	2b01      	cmp	r3, #1
 800d6be:	d105      	bne.n	800d6cc <_tx_thread_resume+0x98>
    {

        /* Clear the delayed suspension.  */
        thread_ptr -> tx_thread_delayed_suspend =  TX_FALSE;
 800d6c0:	687b      	ldr	r3, [r7, #4]
 800d6c2:	2200      	movs	r2, #0
 800d6c4:	635a      	str	r2, [r3, #52]	; 0x34

        /* Setup delayed suspend lifted return status.  */
        status =  TX_SUSPEND_LIFTED;
 800d6c6:	2319      	movs	r3, #25
 800d6c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d6ca:	e001      	b.n	800d6d0 <_tx_thread_resume+0x9c>
    }
    else
    {

        /* Setup invalid resume return status.  */
        status =  TX_RESUME_ERROR;
 800d6cc:	2312      	movs	r3, #18
 800d6ce:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d6d0:	6a3b      	ldr	r3, [r7, #32]
 800d6d2:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d6d4:	68fb      	ldr	r3, [r7, #12]
 800d6d6:	f383 8810 	msr	PRIMASK, r3
}
 800d6da:	bf00      	nop
        }
    }
#endif

    /* Return completion status. */
    return(status);
 800d6dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800d6de:	4618      	mov	r0, r3
 800d6e0:	3730      	adds	r7, #48	; 0x30
 800d6e2:	46bd      	mov	sp, r7
 800d6e4:	bd80      	pop	{r7, pc}
 800d6e6:	bf00      	nop
 800d6e8:	20000010 	.word	0x20000010
 800d6ec:	200022e4 	.word	0x200022e4
 800d6f0:	20002378 	.word	0x20002378

0800d6f4 <_tx_thread_shell_entry>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_shell_entry(VOID)
{
 800d6f4:	b580      	push	{r7, lr}
 800d6f6:	b088      	sub	sp, #32
 800d6f8:	af00      	add	r7, sp, #0
VOID            (*entry_exit_notify)(TX_THREAD *notify_thread_ptr, UINT type);
#endif


    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 800d6fa:	4b21      	ldr	r3, [pc, #132]	; (800d780 <_tx_thread_shell_entry+0x8c>)
 800d6fc:	681b      	ldr	r3, [r3, #0]
 800d6fe:	61fb      	str	r3, [r7, #28]
        (entry_exit_notify)(thread_ptr, TX_THREAD_ENTRY);
    }
#endif

    /* Call current thread's entry function.  */
    (thread_ptr -> tx_thread_entry) (thread_ptr -> tx_thread_entry_parameter);
 800d700:	69fb      	ldr	r3, [r7, #28]
 800d702:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d704:	69fa      	ldr	r2, [r7, #28]
 800d706:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800d708:	4610      	mov	r0, r2
 800d70a:	4798      	blx	r3

    /* Suspend thread with a "completed" state.  */

    /* Determine if the application is using mutexes.  */
    if (_tx_thread_mutex_release != TX_NULL)
 800d70c:	4b1d      	ldr	r3, [pc, #116]	; (800d784 <_tx_thread_shell_entry+0x90>)
 800d70e:	681b      	ldr	r3, [r3, #0]
 800d710:	2b00      	cmp	r3, #0
 800d712:	d003      	beq.n	800d71c <_tx_thread_shell_entry+0x28>
    {

        /* Yes, call the mutex release function via a function pointer that
           is setup during mutex initialization.  */
        (_tx_thread_mutex_release)(thread_ptr);
 800d714:	4b1b      	ldr	r3, [pc, #108]	; (800d784 <_tx_thread_shell_entry+0x90>)
 800d716:	681b      	ldr	r3, [r3, #0]
 800d718:	69f8      	ldr	r0, [r7, #28]
 800d71a:	4798      	blx	r3
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800d71c:	f3ef 8310 	mrs	r3, PRIMASK
 800d720:	607b      	str	r3, [r7, #4]
    return(posture);
 800d722:	687b      	ldr	r3, [r7, #4]
    int_posture = __get_interrupt_posture();
 800d724:	603b      	str	r3, [r7, #0]
    __asm__ volatile ("CPSID i" : : : "memory");
 800d726:	b672      	cpsid	i
    return(int_posture);
 800d728:	683b      	ldr	r3, [r7, #0]
    }

    /* Lockout interrupts while the thread state is setup.  */
    TX_DISABLE
 800d72a:	61bb      	str	r3, [r7, #24]
    entry_exit_notify =  thread_ptr -> tx_thread_entry_exit_notify;
#endif

    /* Set the status to suspending, in order to indicate the suspension
       is in progress.  */
    thread_ptr -> tx_thread_state =  TX_COMPLETED;
 800d72c:	69fb      	ldr	r3, [r7, #28]
 800d72e:	2201      	movs	r2, #1
 800d730:	631a      	str	r2, [r3, #48]	; 0x30
    /* Restore interrupts.  */
    TX_RESTORE
#else

    /* Set the suspending flag. */
    thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800d732:	69fb      	ldr	r3, [r7, #28]
 800d734:	2201      	movs	r2, #1
 800d736:	639a      	str	r2, [r3, #56]	; 0x38

    /* Setup for no timeout period.  */
    thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 800d738:	69fb      	ldr	r3, [r7, #28]
 800d73a:	2200      	movs	r2, #0
 800d73c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 800d73e:	4b12      	ldr	r3, [pc, #72]	; (800d788 <_tx_thread_shell_entry+0x94>)
 800d740:	681b      	ldr	r3, [r3, #0]
 800d742:	3301      	adds	r3, #1
 800d744:	4a10      	ldr	r2, [pc, #64]	; (800d788 <_tx_thread_shell_entry+0x94>)
 800d746:	6013      	str	r3, [r2, #0]
 800d748:	69bb      	ldr	r3, [r7, #24]
 800d74a:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d74c:	68bb      	ldr	r3, [r7, #8]
 800d74e:	f383 8810 	msr	PRIMASK, r3
}
 800d752:	bf00      	nop
    __asm__ volatile (" MRS  %0,CONTROL ": "=r" (control_value) );
 800d754:	f3ef 8314 	mrs	r3, CONTROL
 800d758:	60fb      	str	r3, [r7, #12]
    return(control_value);
 800d75a:	68fb      	ldr	r3, [r7, #12]

    /* Restore interrupts.  */
    TX_RESTORE

    /* Perform any additional activities for tool or user purpose.  */
    TX_THREAD_COMPLETED_EXTENSION(thread_ptr)
 800d75c:	617b      	str	r3, [r7, #20]
 800d75e:	697b      	ldr	r3, [r7, #20]
 800d760:	f023 0304 	bic.w	r3, r3, #4
 800d764:	617b      	str	r3, [r7, #20]
 800d766:	697b      	ldr	r3, [r7, #20]
 800d768:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" MSR  CONTROL,%0": : "r" (control_value): "memory" );
 800d76a:	693b      	ldr	r3, [r7, #16]
 800d76c:	f383 8814 	msr	CONTROL, r3
}
 800d770:	bf00      	nop
        (entry_exit_notify)(thread_ptr, TX_THREAD_EXIT);
    }
#endif

    /* Call actual thread suspension routine.  */
    _tx_thread_system_suspend(thread_ptr);
 800d772:	69f8      	ldr	r0, [r7, #28]
 800d774:	f000 fa34 	bl	800dbe0 <_tx_thread_system_suspend>
#ifdef TX_SAFETY_CRITICAL

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif
}
 800d778:	bf00      	nop
 800d77a:	3720      	adds	r7, #32
 800d77c:	46bd      	mov	sp, r7
 800d77e:	bd80      	pop	{r7, pc}
 800d780:	200022e0 	.word	0x200022e0
 800d784:	2000237c 	.word	0x2000237c
 800d788:	20002378 	.word	0x20002378

0800d78c <_tx_thread_sleep>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_sleep(ULONG timer_ticks)
{
 800d78c:	b580      	push	{r7, lr}
 800d78e:	b08e      	sub	sp, #56	; 0x38
 800d790:	af00      	add	r7, sp, #0
 800d792:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800d794:	f3ef 8310 	mrs	r3, PRIMASK
 800d798:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 800d79a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    int_posture = __get_interrupt_posture();
 800d79c:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 800d79e:	b672      	cpsid	i
    return(int_posture);
 800d7a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
UINT            status;
TX_THREAD       *thread_ptr;


    /* Lockout interrupts while the thread is being resumed.  */
    TX_DISABLE
 800d7a2:	633b      	str	r3, [r7, #48]	; 0x30

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 800d7a4:	4b35      	ldr	r3, [pc, #212]	; (800d87c <_tx_thread_sleep+0xf0>)
 800d7a6:	681b      	ldr	r3, [r3, #0]
 800d7a8:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Determine if this is a legal request.  */

    /* Is there a current thread?  */
    if (thread_ptr == TX_NULL)
 800d7aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7ac:	2b00      	cmp	r3, #0
 800d7ae:	d108      	bne.n	800d7c2 <_tx_thread_sleep+0x36>
 800d7b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7b2:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d7b4:	6a3b      	ldr	r3, [r7, #32]
 800d7b6:	f383 8810 	msr	PRIMASK, r3
}
 800d7ba:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Illegal caller of this service.  */
        status =  TX_CALLER_ERROR;
 800d7bc:	2313      	movs	r3, #19
 800d7be:	637b      	str	r3, [r7, #52]	; 0x34
 800d7c0:	e056      	b.n	800d870 <_tx_thread_sleep+0xe4>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800d7c2:	f3ef 8305 	mrs	r3, IPSR
 800d7c6:	61fb      	str	r3, [r7, #28]
    return(ipsr_value);
 800d7c8:	69fa      	ldr	r2, [r7, #28]
    }

    /* Is the caller an ISR or Initialization?  */
    else if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800d7ca:	4b2d      	ldr	r3, [pc, #180]	; (800d880 <_tx_thread_sleep+0xf4>)
 800d7cc:	681b      	ldr	r3, [r3, #0]
 800d7ce:	4313      	orrs	r3, r2
 800d7d0:	2b00      	cmp	r3, #0
 800d7d2:	d008      	beq.n	800d7e6 <_tx_thread_sleep+0x5a>
 800d7d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7d6:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d7d8:	69bb      	ldr	r3, [r7, #24]
 800d7da:	f383 8810 	msr	PRIMASK, r3
}
 800d7de:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Illegal caller of this service.  */
        status =  TX_CALLER_ERROR;
 800d7e0:	2313      	movs	r3, #19
 800d7e2:	637b      	str	r3, [r7, #52]	; 0x34
 800d7e4:	e044      	b.n	800d870 <_tx_thread_sleep+0xe4>
    }

#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Is the caller the system timer thread?  */
    else if (thread_ptr == &_tx_timer_thread)
 800d7e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7e8:	4a26      	ldr	r2, [pc, #152]	; (800d884 <_tx_thread_sleep+0xf8>)
 800d7ea:	4293      	cmp	r3, r2
 800d7ec:	d108      	bne.n	800d800 <_tx_thread_sleep+0x74>
 800d7ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7f0:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d7f2:	697b      	ldr	r3, [r7, #20]
 800d7f4:	f383 8810 	msr	PRIMASK, r3
}
 800d7f8:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Illegal caller of this service.  */
        status =  TX_CALLER_ERROR;
 800d7fa:	2313      	movs	r3, #19
 800d7fc:	637b      	str	r3, [r7, #52]	; 0x34
 800d7fe:	e037      	b.n	800d870 <_tx_thread_sleep+0xe4>
    }
#endif

    /* Determine if the requested number of ticks is zero.  */
    else if (timer_ticks == ((ULONG) 0))
 800d800:	687b      	ldr	r3, [r7, #4]
 800d802:	2b00      	cmp	r3, #0
 800d804:	d108      	bne.n	800d818 <_tx_thread_sleep+0x8c>
 800d806:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d808:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d80a:	693b      	ldr	r3, [r7, #16]
 800d80c:	f383 8810 	msr	PRIMASK, r3
}
 800d810:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Just return with a successful status.  */
        status =  TX_SUCCESS;
 800d812:	2300      	movs	r3, #0
 800d814:	637b      	str	r3, [r7, #52]	; 0x34
 800d816:	e02b      	b.n	800d870 <_tx_thread_sleep+0xe4>
    }
    else
    {

        /* Determine if the preempt disable flag is non-zero.  */
        if (_tx_thread_preempt_disable != ((UINT) 0))
 800d818:	4b1b      	ldr	r3, [pc, #108]	; (800d888 <_tx_thread_sleep+0xfc>)
 800d81a:	681b      	ldr	r3, [r3, #0]
 800d81c:	2b00      	cmp	r3, #0
 800d81e:	d008      	beq.n	800d832 <_tx_thread_sleep+0xa6>
 800d820:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d822:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d824:	68fb      	ldr	r3, [r7, #12]
 800d826:	f383 8810 	msr	PRIMASK, r3
}
 800d82a:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
            status =  TX_CALLER_ERROR;
 800d82c:	2313      	movs	r3, #19
 800d82e:	637b      	str	r3, [r7, #52]	; 0x34
 800d830:	e01e      	b.n	800d870 <_tx_thread_sleep+0xe4>
            TX_EL_THREAD_SLEEP_INSERT

            /* Suspend the current thread.  */

            /* Set the state to suspended.  */
            thread_ptr -> tx_thread_state =    TX_SLEEP;
 800d832:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d834:	2204      	movs	r2, #4
 800d836:	631a      	str	r2, [r3, #48]	; 0x30
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Set the suspending flag. */
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800d838:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d83a:	2201      	movs	r2, #1
 800d83c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Initialize the status to successful.  */
            thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 800d83e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d840:	2200      	movs	r2, #0
 800d842:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

            /* Setup the timeout period.  */
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  timer_ticks;
 800d846:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d848:	687a      	ldr	r2, [r7, #4]
 800d84a:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 800d84c:	4b0e      	ldr	r3, [pc, #56]	; (800d888 <_tx_thread_sleep+0xfc>)
 800d84e:	681b      	ldr	r3, [r3, #0]
 800d850:	3301      	adds	r3, #1
 800d852:	4a0d      	ldr	r2, [pc, #52]	; (800d888 <_tx_thread_sleep+0xfc>)
 800d854:	6013      	str	r3, [r2, #0]
 800d856:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d858:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d85a:	68bb      	ldr	r3, [r7, #8]
 800d85c:	f383 8810 	msr	PRIMASK, r3
}
 800d860:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Call actual thread suspension routine.  */
            _tx_thread_system_suspend(thread_ptr);
 800d862:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d864:	f000 f9bc 	bl	800dbe0 <_tx_thread_system_suspend>
#endif

            /* Return status to the caller.  */
            status =  thread_ptr -> tx_thread_suspend_status;
 800d868:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d86a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d86e:	637b      	str	r3, [r7, #52]	; 0x34
        }
    }

    /* Return completion status.  */
    return(status);
 800d870:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800d872:	4618      	mov	r0, r3
 800d874:	3738      	adds	r7, #56	; 0x38
 800d876:	46bd      	mov	sp, r7
 800d878:	bd80      	pop	{r7, pc}
 800d87a:	bf00      	nop
 800d87c:	200022e0 	.word	0x200022e0
 800d880:	20000010 	.word	0x20000010
 800d884:	20002428 	.word	0x20002428
 800d888:	20002378 	.word	0x20002378

0800d88c <_tx_thread_suspend>:
/*                                            a MISRA compliance issue,   */
/*                                            resulting in version 6.1.1  */
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_suspend(TX_THREAD *thread_ptr)
{
 800d88c:	b580      	push	{r7, lr}
 800d88e:	b08a      	sub	sp, #40	; 0x28
 800d890:	af00      	add	r7, sp, #0
 800d892:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800d894:	f3ef 8310 	mrs	r3, PRIMASK
 800d898:	61bb      	str	r3, [r7, #24]
    return(posture);
 800d89a:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800d89c:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800d89e:	b672      	cpsid	i
    return(int_posture);
 800d8a0:	697b      	ldr	r3, [r7, #20]


#ifndef TX_INLINE_THREAD_RESUME_SUSPEND

    /* Lockout interrupts while the thread is being suspended.  */
    TX_DISABLE
 800d8a2:	623b      	str	r3, [r7, #32]

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 800d8a4:	4b2e      	ldr	r3, [pc, #184]	; (800d960 <_tx_thread_suspend+0xd4>)
 800d8a6:	681b      	ldr	r3, [r3, #0]
 800d8a8:	61fb      	str	r3, [r7, #28]

    /* Log this kernel call.  */
    TX_EL_THREAD_SUSPEND_INSERT

    /* Check the specified thread's current status.  */
    if (thread_ptr -> tx_thread_state == TX_READY)
 800d8aa:	687b      	ldr	r3, [r7, #4]
 800d8ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d8ae:	2b00      	cmp	r3, #0
 800d8b0:	d130      	bne.n	800d914 <_tx_thread_suspend+0x88>
    {

        /* Initialize status to success.  */
        status =  TX_SUCCESS;
 800d8b2:	2300      	movs	r3, #0
 800d8b4:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800d8b6:	f3ef 8305 	mrs	r3, IPSR
 800d8ba:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 800d8bc:	693a      	ldr	r2, [r7, #16]

        /* Determine if we are in a thread context.  */
        if (TX_THREAD_GET_SYSTEM_STATE() == ((ULONG) 0))
 800d8be:	4b29      	ldr	r3, [pc, #164]	; (800d964 <_tx_thread_suspend+0xd8>)
 800d8c0:	681b      	ldr	r3, [r3, #0]
 800d8c2:	4313      	orrs	r3, r2
 800d8c4:	2b00      	cmp	r3, #0
 800d8c6:	d109      	bne.n	800d8dc <_tx_thread_suspend+0x50>
        {

            /* Yes, we are in a thread context.  */

            /* Determine if the current thread is also the suspending thread.  */
            if (current_thread == thread_ptr)
 800d8c8:	69fa      	ldr	r2, [r7, #28]
 800d8ca:	687b      	ldr	r3, [r7, #4]
 800d8cc:	429a      	cmp	r2, r3
 800d8ce:	d105      	bne.n	800d8dc <_tx_thread_suspend+0x50>
            {

                /* Now determine if the preempt disable flag is non-zero.  */
                if (_tx_thread_preempt_disable != ((UINT) 0))
 800d8d0:	4b25      	ldr	r3, [pc, #148]	; (800d968 <_tx_thread_suspend+0xdc>)
 800d8d2:	681b      	ldr	r3, [r3, #0]
 800d8d4:	2b00      	cmp	r3, #0
 800d8d6:	d001      	beq.n	800d8dc <_tx_thread_suspend+0x50>
                {

                    /* Current thread cannot suspend when the preempt disable flag is non-zero,
                       return an error.  */
                    status =  TX_SUSPEND_ERROR;
 800d8d8:	2314      	movs	r3, #20
 800d8da:	627b      	str	r3, [r7, #36]	; 0x24
                }
            }
        }

        /* Determine if the status is still successful.  */
        if (status == TX_SUCCESS)
 800d8dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8de:	2b00      	cmp	r3, #0
 800d8e0:	d132      	bne.n	800d948 <_tx_thread_suspend+0xbc>
        {

            /* Set the state to suspended.  */
            thread_ptr -> tx_thread_state =    TX_SUSPENDED;
 800d8e2:	687b      	ldr	r3, [r7, #4]
 800d8e4:	2203      	movs	r2, #3
 800d8e6:	631a      	str	r2, [r3, #48]	; 0x30
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Set the suspending flag. */
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800d8e8:	687b      	ldr	r3, [r7, #4]
 800d8ea:	2201      	movs	r2, #1
 800d8ec:	639a      	str	r2, [r3, #56]	; 0x38

            /* Setup for no timeout period.  */
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 800d8ee:	687b      	ldr	r3, [r7, #4]
 800d8f0:	2200      	movs	r2, #0
 800d8f2:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 800d8f4:	4b1c      	ldr	r3, [pc, #112]	; (800d968 <_tx_thread_suspend+0xdc>)
 800d8f6:	681b      	ldr	r3, [r3, #0]
 800d8f8:	3301      	adds	r3, #1
 800d8fa:	4a1b      	ldr	r2, [pc, #108]	; (800d968 <_tx_thread_suspend+0xdc>)
 800d8fc:	6013      	str	r3, [r2, #0]
 800d8fe:	6a3b      	ldr	r3, [r7, #32]
 800d900:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d902:	68fb      	ldr	r3, [r7, #12]
 800d904:	f383 8810 	msr	PRIMASK, r3
}
 800d908:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Call actual thread suspension routine.  */
            _tx_thread_system_suspend(thread_ptr);
 800d90a:	6878      	ldr	r0, [r7, #4]
 800d90c:	f000 f968 	bl	800dbe0 <_tx_thread_system_suspend>
            /* Return success.  */
            status =  TX_SUCCESS;
#else

            /* If MISRA is not enabled, return directly.  */
            return(TX_SUCCESS);
 800d910:	2300      	movs	r3, #0
 800d912:	e020      	b.n	800d956 <_tx_thread_suspend+0xca>
#endif
        }
    }
    else if (thread_ptr -> tx_thread_state == TX_TERMINATED)
 800d914:	687b      	ldr	r3, [r7, #4]
 800d916:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d918:	2b02      	cmp	r3, #2
 800d91a:	d102      	bne.n	800d922 <_tx_thread_suspend+0x96>
    {

        /* Thread is terminated.  */
        status =  TX_SUSPEND_ERROR;
 800d91c:	2314      	movs	r3, #20
 800d91e:	627b      	str	r3, [r7, #36]	; 0x24
 800d920:	e012      	b.n	800d948 <_tx_thread_suspend+0xbc>
    }
    else if (thread_ptr -> tx_thread_state == TX_COMPLETED)
 800d922:	687b      	ldr	r3, [r7, #4]
 800d924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d926:	2b01      	cmp	r3, #1
 800d928:	d102      	bne.n	800d930 <_tx_thread_suspend+0xa4>
    {

        /* Thread is completed.  */
        status =  TX_SUSPEND_ERROR;
 800d92a:	2314      	movs	r3, #20
 800d92c:	627b      	str	r3, [r7, #36]	; 0x24
 800d92e:	e00b      	b.n	800d948 <_tx_thread_suspend+0xbc>
    }
    else if (thread_ptr -> tx_thread_state == TX_SUSPENDED)
 800d930:	687b      	ldr	r3, [r7, #4]
 800d932:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d934:	2b03      	cmp	r3, #3
 800d936:	d102      	bne.n	800d93e <_tx_thread_suspend+0xb2>
    {

        /* Already suspended, just set status to success.  */
        status =  TX_SUCCESS;
 800d938:	2300      	movs	r3, #0
 800d93a:	627b      	str	r3, [r7, #36]	; 0x24
 800d93c:	e004      	b.n	800d948 <_tx_thread_suspend+0xbc>
    }
    else
    {

        /* Just set the delayed suspension flag.  */
        thread_ptr -> tx_thread_delayed_suspend =  TX_TRUE;
 800d93e:	687b      	ldr	r3, [r7, #4]
 800d940:	2201      	movs	r2, #1
 800d942:	635a      	str	r2, [r3, #52]	; 0x34

        /* Set status to success.  */
        status =  TX_SUCCESS;
 800d944:	2300      	movs	r3, #0
 800d946:	627b      	str	r3, [r7, #36]	; 0x24
 800d948:	6a3b      	ldr	r3, [r7, #32]
 800d94a:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d94c:	68bb      	ldr	r3, [r7, #8]
 800d94e:	f383 8810 	msr	PRIMASK, r3
}
 800d952:	bf00      	nop
    /* Restore interrupts.  */
    TX_RESTORE

    /* Always return success, since this function does not perform error
       checking.  */
    return(status);
 800d954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    TX_RESTORE

    /* Return completion status.  */
    return(status);
#endif
}
 800d956:	4618      	mov	r0, r3
 800d958:	3728      	adds	r7, #40	; 0x28
 800d95a:	46bd      	mov	sp, r7
 800d95c:	bd80      	pop	{r7, pc}
 800d95e:	bf00      	nop
 800d960:	200022e0 	.word	0x200022e0
 800d964:	20000010 	.word	0x20000010
 800d968:	20002378 	.word	0x20002378

0800d96c <_tx_thread_system_preempt_check>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_preempt_check(VOID)
{
 800d96c:	b480      	push	{r7}
 800d96e:	b089      	sub	sp, #36	; 0x24
 800d970:	af00      	add	r7, sp, #0
TX_THREAD       *current_thread;
TX_THREAD       *thread_ptr;


    /* Combine the system state and preempt disable flags into one for comparison.  */
    TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 800d972:	4b17      	ldr	r3, [pc, #92]	; (800d9d0 <_tx_thread_system_preempt_check+0x64>)
 800d974:	681b      	ldr	r3, [r3, #0]
 800d976:	61fb      	str	r3, [r7, #28]

    /* Determine if we are in a system state (ISR or Initialization) or internal preemption is disabled.  */
    if (combined_flags == ((ULONG) 0))
 800d978:	69fb      	ldr	r3, [r7, #28]
 800d97a:	2b00      	cmp	r3, #0
 800d97c:	d121      	bne.n	800d9c2 <_tx_thread_system_preempt_check+0x56>
    {

        /* No, at thread execution level so continue checking for preemption.  */

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(current_thread)
 800d97e:	4b15      	ldr	r3, [pc, #84]	; (800d9d4 <_tx_thread_system_preempt_check+0x68>)
 800d980:	681b      	ldr	r3, [r3, #0]
 800d982:	61bb      	str	r3, [r7, #24]

        /* Pickup the next execute pointer.  */
        thread_ptr =  _tx_thread_execute_ptr;
 800d984:	4b14      	ldr	r3, [pc, #80]	; (800d9d8 <_tx_thread_system_preempt_check+0x6c>)
 800d986:	681b      	ldr	r3, [r3, #0]
 800d988:	617b      	str	r3, [r7, #20]

        /* Determine if preemption should take place.  */
        if (current_thread != thread_ptr)
 800d98a:	69ba      	ldr	r2, [r7, #24]
 800d98c:	697b      	ldr	r3, [r7, #20]
 800d98e:	429a      	cmp	r2, r3
 800d990:	d017      	beq.n	800d9c2 <_tx_thread_system_preempt_check+0x56>
__attribute__( ( always_inline ) ) static inline void _tx_thread_system_return_inline(void)
{
UINT interrupt_save;

    /* Set PendSV to invoke ThreadX scheduler.  */
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 800d992:	4b12      	ldr	r3, [pc, #72]	; (800d9dc <_tx_thread_system_preempt_check+0x70>)
 800d994:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d998:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800d99a:	f3ef 8305 	mrs	r3, IPSR
 800d99e:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 800d9a0:	693b      	ldr	r3, [r7, #16]
    if (_tx_ipsr_get() == 0)
 800d9a2:	2b00      	cmp	r3, #0
 800d9a4:	d10c      	bne.n	800d9c0 <_tx_thread_system_preempt_check+0x54>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800d9a6:	f3ef 8310 	mrs	r3, PRIMASK
 800d9aa:	60fb      	str	r3, [r7, #12]
    return(posture);
 800d9ac:	68fb      	ldr	r3, [r7, #12]
    {
        interrupt_save = __get_interrupt_posture();
 800d9ae:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("CPSIE  i": : : "memory");
 800d9b0:	b662      	cpsie	i
}
 800d9b2:	bf00      	nop
 800d9b4:	68bb      	ldr	r3, [r7, #8]
 800d9b6:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d9b8:	687b      	ldr	r3, [r7, #4]
 800d9ba:	f383 8810 	msr	PRIMASK, r3
}
 800d9be:	bf00      	nop
#else
        __enable_interrupts();
#endif
        __restore_interrupt(interrupt_save);
    }
}
 800d9c0:	bf00      	nop

            /* Return to the system so the higher priority thread can be scheduled.  */
            _tx_thread_system_return();
        }
    }
}
 800d9c2:	bf00      	nop
 800d9c4:	3724      	adds	r7, #36	; 0x24
 800d9c6:	46bd      	mov	sp, r7
 800d9c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9cc:	4770      	bx	lr
 800d9ce:	bf00      	nop
 800d9d0:	20002378 	.word	0x20002378
 800d9d4:	200022e0 	.word	0x200022e0
 800d9d8:	200022e4 	.word	0x200022e4
 800d9dc:	e000ed04 	.word	0xe000ed04

0800d9e0 <_tx_thread_system_resume>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_resume(TX_THREAD *thread_ptr)
#ifndef TX_NOT_INTERRUPTABLE
{
 800d9e0:	b580      	push	{r7, lr}
 800d9e2:	b096      	sub	sp, #88	; 0x58
 800d9e4:	af00      	add	r7, sp, #0
 800d9e6:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800d9e8:	f3ef 8310 	mrs	r3, PRIMASK
 800d9ec:	637b      	str	r3, [r7, #52]	; 0x34
    return(posture);
 800d9ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    int_posture = __get_interrupt_posture();
 800d9f0:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("CPSID i" : : : "memory");
 800d9f2:	b672      	cpsid	i
    return(int_posture);
 800d9f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    /* Check this thread's stack.  */
    TX_THREAD_STACK_CHECK(thread_ptr)
#endif

    /* Lockout interrupts while the thread is being resumed.  */
    TX_DISABLE
 800d9f6:	657b      	str	r3, [r7, #84]	; 0x54

#ifndef TX_NO_TIMER

    /* Deactivate the timeout timer if necessary.  */
    if (thread_ptr -> tx_thread_timer.tx_timer_internal_list_head != TX_NULL)
 800d9f8:	687b      	ldr	r3, [r7, #4]
 800d9fa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d9fc:	2b00      	cmp	r3, #0
 800d9fe:	d005      	beq.n	800da0c <_tx_thread_system_resume+0x2c>
    {

        /* Deactivate the thread's timeout timer.  */
        _tx_timer_system_deactivate(&(thread_ptr -> tx_thread_timer));
 800da00:	687b      	ldr	r3, [r7, #4]
 800da02:	334c      	adds	r3, #76	; 0x4c
 800da04:	4618      	mov	r0, r3
 800da06:	f000 fb91 	bl	800e12c <_tx_timer_system_deactivate>
 800da0a:	e002      	b.n	800da12 <_tx_thread_system_resume+0x32>
    }
    else
    {

        /* Clear the remaining time to ensure timer doesn't get activated.  */
        thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 800da0c:	687b      	ldr	r3, [r7, #4]
 800da0e:	2200      	movs	r2, #0
 800da10:	64da      	str	r2, [r3, #76]	; 0x4c
        time_stamp =  entry_ptr -> tx_trace_buffer_entry_time_stamp;
    }
#endif

    /* Decrease the preempt disabled count.  */
    _tx_thread_preempt_disable--;
 800da12:	4b6c      	ldr	r3, [pc, #432]	; (800dbc4 <_tx_thread_system_resume+0x1e4>)
 800da14:	681b      	ldr	r3, [r3, #0]
 800da16:	3b01      	subs	r3, #1
 800da18:	4a6a      	ldr	r2, [pc, #424]	; (800dbc4 <_tx_thread_system_resume+0x1e4>)
 800da1a:	6013      	str	r3, [r2, #0]

    /* Determine if the thread is in the process of suspending.  If so, the thread
       control block is already on the linked list so nothing needs to be done.  */
    if (thread_ptr -> tx_thread_suspending == TX_FALSE)
 800da1c:	687b      	ldr	r3, [r7, #4]
 800da1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800da20:	2b00      	cmp	r3, #0
 800da22:	f040 8083 	bne.w	800db2c <_tx_thread_system_resume+0x14c>
    {

        /* Thread is not in the process of suspending. Now check to make sure the thread
           has not already been resumed.  */
        if (thread_ptr -> tx_thread_state != TX_READY)
 800da26:	687b      	ldr	r3, [r7, #4]
 800da28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800da2a:	2b00      	cmp	r3, #0
 800da2c:	f000 8097 	beq.w	800db5e <_tx_thread_system_resume+0x17e>
        {

            /* No, now check to see if the delayed suspension flag is set.  */
            if (thread_ptr -> tx_thread_delayed_suspend == TX_FALSE)
 800da30:	687b      	ldr	r3, [r7, #4]
 800da32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800da34:	2b00      	cmp	r3, #0
 800da36:	d172      	bne.n	800db1e <_tx_thread_system_resume+0x13e>
                /* Resume the thread!  */

                /* Make this thread ready.  */

                /* Change the state to ready.  */
                thread_ptr -> tx_thread_state =  TX_READY;
 800da38:	687b      	ldr	r3, [r7, #4]
 800da3a:	2200      	movs	r2, #0
 800da3c:	631a      	str	r2, [r3, #48]	; 0x30

                /* Pickup priority of thread.  */
                priority =  thread_ptr -> tx_thread_priority;
 800da3e:	687b      	ldr	r3, [r7, #4]
 800da40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da42:	653b      	str	r3, [r7, #80]	; 0x50
                thread_ptr -> tx_thread_performance_resume_count++;
#endif

                /* Determine if there are other threads at this priority that are
                   ready.  */
                head_ptr =  _tx_thread_priority_list[priority];
 800da44:	4a60      	ldr	r2, [pc, #384]	; (800dbc8 <_tx_thread_system_resume+0x1e8>)
 800da46:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800da48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800da4c:	64fb      	str	r3, [r7, #76]	; 0x4c
                if (head_ptr == TX_NULL)
 800da4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800da50:	2b00      	cmp	r3, #0
 800da52:	d154      	bne.n	800dafe <_tx_thread_system_resume+0x11e>
                {

                    /* First thread at this priority ready.  Add to the front of the list.  */
                    _tx_thread_priority_list[priority] =       thread_ptr;
 800da54:	495c      	ldr	r1, [pc, #368]	; (800dbc8 <_tx_thread_system_resume+0x1e8>)
 800da56:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800da58:	687a      	ldr	r2, [r7, #4]
 800da5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                    thread_ptr -> tx_thread_ready_next =       thread_ptr;
 800da5e:	687b      	ldr	r3, [r7, #4]
 800da60:	687a      	ldr	r2, [r7, #4]
 800da62:	621a      	str	r2, [r3, #32]
                    thread_ptr -> tx_thread_ready_previous =   thread_ptr;
 800da64:	687b      	ldr	r3, [r7, #4]
 800da66:	687a      	ldr	r2, [r7, #4]
 800da68:	625a      	str	r2, [r3, #36]	; 0x24
                    TX_DIV32_BIT_SET(priority, priority_bit)
                    _tx_thread_priority_map_active =  _tx_thread_priority_map_active | priority_bit;
#endif

                    /* Or in the thread's priority bit.  */
                    TX_MOD32_BIT_SET(priority, priority_bit)
 800da6a:	2201      	movs	r2, #1
 800da6c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800da6e:	fa02 f303 	lsl.w	r3, r2, r3
 800da72:	647b      	str	r3, [r7, #68]	; 0x44
                    _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] | priority_bit;
 800da74:	4b55      	ldr	r3, [pc, #340]	; (800dbcc <_tx_thread_system_resume+0x1ec>)
 800da76:	681a      	ldr	r2, [r3, #0]
 800da78:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800da7a:	4313      	orrs	r3, r2
 800da7c:	4a53      	ldr	r2, [pc, #332]	; (800dbcc <_tx_thread_system_resume+0x1ec>)
 800da7e:	6013      	str	r3, [r2, #0]

                    /* Determine if this newly ready thread is the highest priority.  */
                    if (priority < _tx_thread_highest_priority)
 800da80:	4b53      	ldr	r3, [pc, #332]	; (800dbd0 <_tx_thread_system_resume+0x1f0>)
 800da82:	681b      	ldr	r3, [r3, #0]
 800da84:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800da86:	429a      	cmp	r2, r3
 800da88:	d269      	bcs.n	800db5e <_tx_thread_system_resume+0x17e>
                    {

                        /* A new highest priority thread is present. */

                        /* Update the highest priority variable.  */
                        _tx_thread_highest_priority =  priority;
 800da8a:	4a51      	ldr	r2, [pc, #324]	; (800dbd0 <_tx_thread_system_resume+0x1f0>)
 800da8c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800da8e:	6013      	str	r3, [r2, #0]

                        /* Pickup the execute pointer. Since it is going to be referenced multiple
                           times, it is placed in a local variable.  */
                        execute_ptr =  _tx_thread_execute_ptr;
 800da90:	4b50      	ldr	r3, [pc, #320]	; (800dbd4 <_tx_thread_system_resume+0x1f4>)
 800da92:	681b      	ldr	r3, [r3, #0]
 800da94:	643b      	str	r3, [r7, #64]	; 0x40

                        /* Determine if no thread is currently executing.  */
                        if (execute_ptr == TX_NULL)
 800da96:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800da98:	2b00      	cmp	r3, #0
 800da9a:	d103      	bne.n	800daa4 <_tx_thread_system_resume+0xc4>
                        {

                            /* Simply setup the execute pointer.  */
                            _tx_thread_execute_ptr =  thread_ptr;
 800da9c:	4a4d      	ldr	r2, [pc, #308]	; (800dbd4 <_tx_thread_system_resume+0x1f4>)
 800da9e:	687b      	ldr	r3, [r7, #4]
 800daa0:	6013      	str	r3, [r2, #0]
 800daa2:	e05c      	b.n	800db5e <_tx_thread_system_resume+0x17e>
                        {

                            /* Another thread has been scheduled for execution.  */

                            /* Check to see if this is a higher priority thread and determine if preemption is allowed.  */
                            if (priority < execute_ptr -> tx_thread_preempt_threshold)
 800daa4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800daa6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800daa8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800daaa:	429a      	cmp	r2, r3
 800daac:	d257      	bcs.n	800db5e <_tx_thread_system_resume+0x17e>
                                execute_ptr -> tx_thread_performance_last_preempting_thread =  thread_ptr;

#endif

                                /* Yes, modify the execute thread pointer.  */
                                _tx_thread_execute_ptr =  thread_ptr;
 800daae:	4a49      	ldr	r2, [pc, #292]	; (800dbd4 <_tx_thread_system_resume+0x1f4>)
 800dab0:	687b      	ldr	r3, [r7, #4]
 800dab2:	6013      	str	r3, [r2, #0]
 800dab4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800dab6:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800dab8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800daba:	f383 8810 	msr	PRIMASK, r3
}
 800dabe:	bf00      	nop
                                TX_THREAD_STACK_CHECK(thread_ptr)
#endif

                                /* Now determine if preemption should take place. This is only possible if the current thread pointer is
                                   not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
                                TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 800dac0:	4b40      	ldr	r3, [pc, #256]	; (800dbc4 <_tx_thread_system_resume+0x1e4>)
 800dac2:	681b      	ldr	r3, [r3, #0]
 800dac4:	63fb      	str	r3, [r7, #60]	; 0x3c
                                if (combined_flags == ((ULONG) 0))
 800dac6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dac8:	2b00      	cmp	r3, #0
 800daca:	d174      	bne.n	800dbb6 <_tx_thread_system_resume+0x1d6>
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 800dacc:	4b42      	ldr	r3, [pc, #264]	; (800dbd8 <_tx_thread_system_resume+0x1f8>)
 800dace:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dad2:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800dad4:	f3ef 8305 	mrs	r3, IPSR
 800dad8:	62bb      	str	r3, [r7, #40]	; 0x28
    return(ipsr_value);
 800dada:	6abb      	ldr	r3, [r7, #40]	; 0x28
    if (_tx_ipsr_get() == 0)
 800dadc:	2b00      	cmp	r3, #0
 800dade:	d10c      	bne.n	800dafa <_tx_thread_system_resume+0x11a>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800dae0:	f3ef 8310 	mrs	r3, PRIMASK
 800dae4:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 800dae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
        interrupt_save = __get_interrupt_posture();
 800dae8:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSIE  i": : : "memory");
 800daea:	b662      	cpsie	i
}
 800daec:	bf00      	nop
 800daee:	6a3b      	ldr	r3, [r7, #32]
 800daf0:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800daf2:	69fb      	ldr	r3, [r7, #28]
 800daf4:	f383 8810 	msr	PRIMASK, r3
}
 800daf8:	bf00      	nop
}
 800dafa:	bf00      	nop
                                    /* Preemption is needed - return to the system!  */
                                    _tx_thread_system_return();
                                }

                                /* Return in-line when MISRA is not enabled.  */
                                return;
 800dafc:	e05b      	b.n	800dbb6 <_tx_thread_system_resume+0x1d6>
                {

                    /* No, there are other threads at this priority already ready.  */

                    /* Just add this thread to the priority list.  */
                    tail_ptr =                                 head_ptr -> tx_thread_ready_previous;
 800dafe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800db00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800db02:	64bb      	str	r3, [r7, #72]	; 0x48
                    tail_ptr -> tx_thread_ready_next =         thread_ptr;
 800db04:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800db06:	687a      	ldr	r2, [r7, #4]
 800db08:	621a      	str	r2, [r3, #32]
                    head_ptr -> tx_thread_ready_previous =     thread_ptr;
 800db0a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800db0c:	687a      	ldr	r2, [r7, #4]
 800db0e:	625a      	str	r2, [r3, #36]	; 0x24
                    thread_ptr -> tx_thread_ready_previous =   tail_ptr;
 800db10:	687b      	ldr	r3, [r7, #4]
 800db12:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800db14:	625a      	str	r2, [r3, #36]	; 0x24
                    thread_ptr -> tx_thread_ready_next =       head_ptr;
 800db16:	687b      	ldr	r3, [r7, #4]
 800db18:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800db1a:	621a      	str	r2, [r3, #32]
 800db1c:	e01f      	b.n	800db5e <_tx_thread_system_resume+0x17e>
            /* Else, delayed suspend flag was set.  */
            else
            {

                /* Clear the delayed suspend flag and change the state.  */
                thread_ptr -> tx_thread_delayed_suspend =  TX_FALSE;
 800db1e:	687b      	ldr	r3, [r7, #4]
 800db20:	2200      	movs	r2, #0
 800db22:	635a      	str	r2, [r3, #52]	; 0x34
                thread_ptr -> tx_thread_state =            TX_SUSPENDED;
 800db24:	687b      	ldr	r3, [r7, #4]
 800db26:	2203      	movs	r2, #3
 800db28:	631a      	str	r2, [r3, #48]	; 0x30
 800db2a:	e018      	b.n	800db5e <_tx_thread_system_resume+0x17e>
        /* A resumption occurred in the middle of a previous thread suspension.  */

        /* Make sure the type of suspension under way is not a terminate or
           thread completion.  In either of these cases, do not void the
           interrupted suspension processing.  */
        if (thread_ptr -> tx_thread_state != TX_COMPLETED)
 800db2c:	687b      	ldr	r3, [r7, #4]
 800db2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800db30:	2b01      	cmp	r3, #1
 800db32:	d014      	beq.n	800db5e <_tx_thread_system_resume+0x17e>
        {

            /* Make sure the thread isn't terminated.  */
            if (thread_ptr -> tx_thread_state != TX_TERMINATED)
 800db34:	687b      	ldr	r3, [r7, #4]
 800db36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800db38:	2b02      	cmp	r3, #2
 800db3a:	d010      	beq.n	800db5e <_tx_thread_system_resume+0x17e>
            {

                /* No, now check to see if the delayed suspension flag is set.  */
                if (thread_ptr -> tx_thread_delayed_suspend == TX_FALSE)
 800db3c:	687b      	ldr	r3, [r7, #4]
 800db3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800db40:	2b00      	cmp	r3, #0
 800db42:	d106      	bne.n	800db52 <_tx_thread_system_resume+0x172>
                {

                    /* Clear the suspending flag.  */
                    thread_ptr -> tx_thread_suspending =   TX_FALSE;
 800db44:	687b      	ldr	r3, [r7, #4]
 800db46:	2200      	movs	r2, #0
 800db48:	639a      	str	r2, [r3, #56]	; 0x38

                    /* Restore the state to ready.  */
                    thread_ptr -> tx_thread_state =        TX_READY;
 800db4a:	687b      	ldr	r3, [r7, #4]
 800db4c:	2200      	movs	r2, #0
 800db4e:	631a      	str	r2, [r3, #48]	; 0x30
 800db50:	e005      	b.n	800db5e <_tx_thread_system_resume+0x17e>
                }
                else
                {

                    /* Clear the delayed suspend flag and change the state.  */
                    thread_ptr -> tx_thread_delayed_suspend =  TX_FALSE;
 800db52:	687b      	ldr	r3, [r7, #4]
 800db54:	2200      	movs	r2, #0
 800db56:	635a      	str	r2, [r3, #52]	; 0x34
                    thread_ptr -> tx_thread_state =            TX_SUSPENDED;
 800db58:	687b      	ldr	r3, [r7, #4]
 800db5a:	2203      	movs	r2, #3
 800db5c:	631a      	str	r2, [r3, #48]	; 0x30
        }
    }
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 800db5e:	4b1f      	ldr	r3, [pc, #124]	; (800dbdc <_tx_thread_system_resume+0x1fc>)
 800db60:	681b      	ldr	r3, [r3, #0]
 800db62:	63bb      	str	r3, [r7, #56]	; 0x38
 800db64:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800db66:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800db68:	69bb      	ldr	r3, [r7, #24]
 800db6a:	f383 8810 	msr	PRIMASK, r3
}
 800db6e:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Determine if a preemption condition is present.  */
    if (current_thread != _tx_thread_execute_ptr)
 800db70:	4b18      	ldr	r3, [pc, #96]	; (800dbd4 <_tx_thread_system_resume+0x1f4>)
 800db72:	681b      	ldr	r3, [r3, #0]
 800db74:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800db76:	429a      	cmp	r2, r3
 800db78:	d020      	beq.n	800dbbc <_tx_thread_system_resume+0x1dc>
        TX_THREAD_STACK_CHECK(thread_ptr)
#endif

        /* Now determine if preemption should take place. This is only possible if the current thread pointer is
           not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
        TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 800db7a:	4b12      	ldr	r3, [pc, #72]	; (800dbc4 <_tx_thread_system_resume+0x1e4>)
 800db7c:	681b      	ldr	r3, [r3, #0]
 800db7e:	63fb      	str	r3, [r7, #60]	; 0x3c
        if (combined_flags == ((ULONG) 0))
 800db80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800db82:	2b00      	cmp	r3, #0
 800db84:	d11a      	bne.n	800dbbc <_tx_thread_system_resume+0x1dc>
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 800db86:	4b14      	ldr	r3, [pc, #80]	; (800dbd8 <_tx_thread_system_resume+0x1f8>)
 800db88:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800db8c:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800db8e:	f3ef 8305 	mrs	r3, IPSR
 800db92:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800db94:	697b      	ldr	r3, [r7, #20]
    if (_tx_ipsr_get() == 0)
 800db96:	2b00      	cmp	r3, #0
 800db98:	d10f      	bne.n	800dbba <_tx_thread_system_resume+0x1da>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800db9a:	f3ef 8310 	mrs	r3, PRIMASK
 800db9e:	613b      	str	r3, [r7, #16]
    return(posture);
 800dba0:	693b      	ldr	r3, [r7, #16]
        interrupt_save = __get_interrupt_posture();
 800dba2:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("CPSIE  i": : : "memory");
 800dba4:	b662      	cpsie	i
}
 800dba6:	bf00      	nop
 800dba8:	68fb      	ldr	r3, [r7, #12]
 800dbaa:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800dbac:	68bb      	ldr	r3, [r7, #8]
 800dbae:	f383 8810 	msr	PRIMASK, r3
}
 800dbb2:	bf00      	nop
}
 800dbb4:	e001      	b.n	800dbba <_tx_thread_system_resume+0x1da>
                                return;
 800dbb6:	bf00      	nop
 800dbb8:	e000      	b.n	800dbbc <_tx_thread_system_resume+0x1dc>
 800dbba:	bf00      	nop

            /* Preemption is needed - return to the system!  */
            _tx_thread_system_return();
        }
    }
}
 800dbbc:	3758      	adds	r7, #88	; 0x58
 800dbbe:	46bd      	mov	sp, r7
 800dbc0:	bd80      	pop	{r7, pc}
 800dbc2:	bf00      	nop
 800dbc4:	20002378 	.word	0x20002378
 800dbc8:	200022f8 	.word	0x200022f8
 800dbcc:	200022f0 	.word	0x200022f0
 800dbd0:	200022f4 	.word	0x200022f4
 800dbd4:	200022e4 	.word	0x200022e4
 800dbd8:	e000ed04 	.word	0xe000ed04
 800dbdc:	200022e0 	.word	0x200022e0

0800dbe0 <_tx_thread_system_suspend>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_suspend(TX_THREAD *thread_ptr)
#ifndef TX_NOT_INTERRUPTABLE
{
 800dbe0:	b580      	push	{r7, lr}
 800dbe2:	b09e      	sub	sp, #120	; 0x78
 800dbe4:	af00      	add	r7, sp, #0
 800dbe6:	6078      	str	r0, [r7, #4]
TX_TRACE_BUFFER_ENTRY       *entry_ptr;
ULONG                       time_stamp =  ((ULONG) 0);
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 800dbe8:	4b81      	ldr	r3, [pc, #516]	; (800ddf0 <_tx_thread_system_suspend+0x210>)
 800dbea:	681b      	ldr	r3, [r3, #0]
 800dbec:	677b      	str	r3, [r7, #116]	; 0x74
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800dbee:	f3ef 8310 	mrs	r3, PRIMASK
 800dbf2:	64fb      	str	r3, [r7, #76]	; 0x4c
    return(posture);
 800dbf4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    int_posture = __get_interrupt_posture();
 800dbf6:	64bb      	str	r3, [r7, #72]	; 0x48
    __asm__ volatile ("CPSID i" : : : "memory");
 800dbf8:	b672      	cpsid	i
    return(int_posture);
 800dbfa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    /* Check this thread's stack.  */
    TX_THREAD_STACK_CHECK(thread_ptr)
#endif

    /* Lockout interrupts while the thread is being suspended.  */
    TX_DISABLE
 800dbfc:	673b      	str	r3, [r7, #112]	; 0x70

#ifndef TX_NO_TIMER

    /* Is the current thread suspending?  */
    if (thread_ptr == current_thread)
 800dbfe:	687a      	ldr	r2, [r7, #4]
 800dc00:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800dc02:	429a      	cmp	r2, r3
 800dc04:	d112      	bne.n	800dc2c <_tx_thread_system_suspend+0x4c>
    {

        /* Pickup the wait option.  */
        timeout =  thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks;
 800dc06:	687b      	ldr	r3, [r7, #4]
 800dc08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800dc0a:	66fb      	str	r3, [r7, #108]	; 0x6c

        /* Determine if an activation is needed.  */
        if (timeout != TX_NO_WAIT)
 800dc0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dc0e:	2b00      	cmp	r3, #0
 800dc10:	d008      	beq.n	800dc24 <_tx_thread_system_suspend+0x44>
        {

            /* Make sure the suspension is not a wait-forever.  */
            if (timeout != TX_WAIT_FOREVER)
 800dc12:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dc14:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dc18:	d004      	beq.n	800dc24 <_tx_thread_system_suspend+0x44>
            {

                /* Activate the thread timer with the timeout value setup in the caller.  */
                _tx_timer_system_activate(&(thread_ptr -> tx_thread_timer));
 800dc1a:	687b      	ldr	r3, [r7, #4]
 800dc1c:	334c      	adds	r3, #76	; 0x4c
 800dc1e:	4618      	mov	r0, r3
 800dc20:	f000 fa22 	bl	800e068 <_tx_timer_system_activate>
            }
        }

        /* Yes, reset time slice for current thread.  */
        _tx_timer_time_slice =  thread_ptr -> tx_thread_new_time_slice;
 800dc24:	687b      	ldr	r3, [r7, #4]
 800dc26:	69db      	ldr	r3, [r3, #28]
 800dc28:	4a72      	ldr	r2, [pc, #456]	; (800ddf4 <_tx_thread_system_suspend+0x214>)
 800dc2a:	6013      	str	r3, [r2, #0]
    }
#endif

    /* Decrease the preempt disabled count.  */
    _tx_thread_preempt_disable--;
 800dc2c:	4b72      	ldr	r3, [pc, #456]	; (800ddf8 <_tx_thread_system_suspend+0x218>)
 800dc2e:	681b      	ldr	r3, [r3, #0]
 800dc30:	3b01      	subs	r3, #1
 800dc32:	4a71      	ldr	r2, [pc, #452]	; (800ddf8 <_tx_thread_system_suspend+0x218>)
 800dc34:	6013      	str	r3, [r2, #0]
    _tx_thread_performance_suspend_count++;
#endif

    /* Check to make sure the thread suspending flag is still set.  If not, it
       has already been resumed.  */
    if (thread_ptr -> tx_thread_suspending == TX_TRUE)
 800dc36:	687b      	ldr	r3, [r7, #4]
 800dc38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dc3a:	2b01      	cmp	r3, #1
 800dc3c:	f040 80a6 	bne.w	800dd8c <_tx_thread_system_suspend+0x1ac>
            time_stamp =  entry_ptr -> tx_trace_buffer_entry_time_stamp;
        }
#endif

        /* Actually suspend this thread.  But first, clear the suspending flag.  */
        thread_ptr -> tx_thread_suspending =  TX_FALSE;
 800dc40:	687b      	ldr	r3, [r7, #4]
 800dc42:	2200      	movs	r2, #0
 800dc44:	639a      	str	r2, [r3, #56]	; 0x38

        /* Pickup priority of thread.  */
        priority =  thread_ptr -> tx_thread_priority;
 800dc46:	687b      	ldr	r3, [r7, #4]
 800dc48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc4a:	66bb      	str	r3, [r7, #104]	; 0x68

        /* Pickup the next ready thread pointer.  */
        ready_next =      thread_ptr -> tx_thread_ready_next;
 800dc4c:	687b      	ldr	r3, [r7, #4]
 800dc4e:	6a1b      	ldr	r3, [r3, #32]
 800dc50:	667b      	str	r3, [r7, #100]	; 0x64

        /* Determine if there are other threads at this priority that are
           ready.  */
        if (ready_next != thread_ptr)
 800dc52:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800dc54:	687b      	ldr	r3, [r7, #4]
 800dc56:	429a      	cmp	r2, r3
 800dc58:	d015      	beq.n	800dc86 <_tx_thread_system_suspend+0xa6>
        {

            /* Yes, there are other threads at this priority ready.  */

            /* Pickup the previous ready thread pointer.  */
            ready_previous =  thread_ptr -> tx_thread_ready_previous;
 800dc5a:	687b      	ldr	r3, [r7, #4]
 800dc5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc5e:	653b      	str	r3, [r7, #80]	; 0x50

            /* Just remove this thread from the priority list.  */
            ready_next -> tx_thread_ready_previous =    ready_previous;
 800dc60:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800dc62:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800dc64:	625a      	str	r2, [r3, #36]	; 0x24
            ready_previous -> tx_thread_ready_next =    ready_next;
 800dc66:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dc68:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800dc6a:	621a      	str	r2, [r3, #32]

            /* Determine if this is the head of the priority list.  */
            if (_tx_thread_priority_list[priority] == thread_ptr)
 800dc6c:	4a63      	ldr	r2, [pc, #396]	; (800ddfc <_tx_thread_system_suspend+0x21c>)
 800dc6e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800dc70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800dc74:	687a      	ldr	r2, [r7, #4]
 800dc76:	429a      	cmp	r2, r3
 800dc78:	d157      	bne.n	800dd2a <_tx_thread_system_suspend+0x14a>
            {

                /* Update the head pointer of this priority list.  */
                _tx_thread_priority_list[priority] =  ready_next;
 800dc7a:	4960      	ldr	r1, [pc, #384]	; (800ddfc <_tx_thread_system_suspend+0x21c>)
 800dc7c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800dc7e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800dc80:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800dc84:	e051      	b.n	800dd2a <_tx_thread_system_suspend+0x14a>
        else
        {

            /* This is the only thread at this priority ready to run.  Set the head
               pointer to NULL.  */
            _tx_thread_priority_list[priority] =    TX_NULL;
 800dc86:	4a5d      	ldr	r2, [pc, #372]	; (800ddfc <_tx_thread_system_suspend+0x21c>)
 800dc88:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800dc8a:	2100      	movs	r1, #0
 800dc8c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            /* Calculate the index into the bit map array.  */
            map_index =  priority/((UINT) 32);
#endif

            /* Clear this priority bit in the ready priority bit map.  */
            TX_MOD32_BIT_SET(priority, priority_bit)
 800dc90:	2201      	movs	r2, #1
 800dc92:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800dc94:	fa02 f303 	lsl.w	r3, r2, r3
 800dc98:	663b      	str	r3, [r7, #96]	; 0x60
            _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] & (~(priority_bit));
 800dc9a:	4b59      	ldr	r3, [pc, #356]	; (800de00 <_tx_thread_system_suspend+0x220>)
 800dc9c:	681a      	ldr	r2, [r3, #0]
 800dc9e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800dca0:	43db      	mvns	r3, r3
 800dca2:	4013      	ands	r3, r2
 800dca4:	4a56      	ldr	r2, [pc, #344]	; (800de00 <_tx_thread_system_suspend+0x220>)
 800dca6:	6013      	str	r3, [r2, #0]
            /* Calculate the base priority as well.  */
            base_priority =  map_index * ((UINT) 32);
#else

            /* Setup the base priority to zero.  */
            base_priority =   ((UINT) 0);
 800dca8:	2300      	movs	r3, #0
 800dcaa:	65fb      	str	r3, [r7, #92]	; 0x5c
#endif

            /* Setup working variable for the priority map.  */
            priority_map =    _tx_thread_priority_maps[MAP_INDEX];
 800dcac:	4b54      	ldr	r3, [pc, #336]	; (800de00 <_tx_thread_system_suspend+0x220>)
 800dcae:	681b      	ldr	r3, [r3, #0]
 800dcb0:	65bb      	str	r3, [r7, #88]	; 0x58

            /* Make a quick check for no other threads ready for execution.  */
            if (priority_map == ((ULONG) 0))
 800dcb2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800dcb4:	2b00      	cmp	r3, #0
 800dcb6:	d12b      	bne.n	800dd10 <_tx_thread_system_suspend+0x130>
            {

                /* Nothing else is ready.  Set highest priority and execute thread
                   accordingly.  */
                _tx_thread_highest_priority =  ((UINT) TX_MAX_PRIORITIES);
 800dcb8:	4b52      	ldr	r3, [pc, #328]	; (800de04 <_tx_thread_system_suspend+0x224>)
 800dcba:	2220      	movs	r2, #32
 800dcbc:	601a      	str	r2, [r3, #0]
                _tx_thread_execute_ptr =       TX_NULL;
 800dcbe:	4b52      	ldr	r3, [pc, #328]	; (800de08 <_tx_thread_system_suspend+0x228>)
 800dcc0:	2200      	movs	r2, #0
 800dcc2:	601a      	str	r2, [r3, #0]
 800dcc4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800dcc6:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800dcc8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dcca:	f383 8810 	msr	PRIMASK, r3
}
 800dcce:	bf00      	nop
                /* Restore interrupts.  */
                TX_RESTORE

                /* Determine if preemption should take place. This is only possible if the current thread pointer is
                   not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
                TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 800dcd0:	4b49      	ldr	r3, [pc, #292]	; (800ddf8 <_tx_thread_system_suspend+0x218>)
 800dcd2:	681b      	ldr	r3, [r3, #0]
 800dcd4:	657b      	str	r3, [r7, #84]	; 0x54
                if (combined_flags == ((ULONG) 0))
 800dcd6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800dcd8:	2b00      	cmp	r3, #0
 800dcda:	f040 8081 	bne.w	800dde0 <_tx_thread_system_suspend+0x200>
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 800dcde:	4b4b      	ldr	r3, [pc, #300]	; (800de0c <_tx_thread_system_suspend+0x22c>)
 800dce0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dce4:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800dce6:	f3ef 8305 	mrs	r3, IPSR
 800dcea:	643b      	str	r3, [r7, #64]	; 0x40
    return(ipsr_value);
 800dcec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    if (_tx_ipsr_get() == 0)
 800dcee:	2b00      	cmp	r3, #0
 800dcf0:	d10c      	bne.n	800dd0c <_tx_thread_system_suspend+0x12c>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800dcf2:	f3ef 8310 	mrs	r3, PRIMASK
 800dcf6:	63fb      	str	r3, [r7, #60]	; 0x3c
    return(posture);
 800dcf8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
        interrupt_save = __get_interrupt_posture();
 800dcfa:	63bb      	str	r3, [r7, #56]	; 0x38
    __asm__ volatile ("CPSIE  i": : : "memory");
 800dcfc:	b662      	cpsie	i
}
 800dcfe:	bf00      	nop
 800dd00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd02:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800dd04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dd06:	f383 8810 	msr	PRIMASK, r3
}
 800dd0a:	bf00      	nop
}
 800dd0c:	bf00      	nop
                    /* Preemption is needed - return to the system!  */
                    _tx_thread_system_return();
                }

                /* Return to caller.  */
                return;
 800dd0e:	e067      	b.n	800dde0 <_tx_thread_system_suspend+0x200>
            {

                /* Other threads at different priority levels are ready to run.  */

                /* Calculate the lowest bit set in the priority map. */
                TX_LOWEST_SET_BIT_CALCULATE(priority_map, priority_bit)
 800dd10:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800dd12:	fa93 f3a3 	rbit	r3, r3
 800dd16:	65bb      	str	r3, [r7, #88]	; 0x58
 800dd18:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800dd1a:	fab3 f383 	clz	r3, r3
 800dd1e:	663b      	str	r3, [r7, #96]	; 0x60

                /* Setup the next highest priority variable.  */
                _tx_thread_highest_priority =  base_priority + ((UINT) priority_bit);
 800dd20:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800dd22:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800dd24:	4413      	add	r3, r2
 800dd26:	4a37      	ldr	r2, [pc, #220]	; (800de04 <_tx_thread_system_suspend+0x224>)
 800dd28:	6013      	str	r3, [r2, #0]
            }
        }

        /* Determine if the suspending thread is the thread designated to execute.  */
        if (thread_ptr == _tx_thread_execute_ptr)
 800dd2a:	4b37      	ldr	r3, [pc, #220]	; (800de08 <_tx_thread_system_suspend+0x228>)
 800dd2c:	681b      	ldr	r3, [r3, #0]
 800dd2e:	687a      	ldr	r2, [r7, #4]
 800dd30:	429a      	cmp	r2, r3
 800dd32:	d12b      	bne.n	800dd8c <_tx_thread_system_suspend+0x1ac>
        {

            /* Pickup the highest priority thread to execute.  */
            _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 800dd34:	4b33      	ldr	r3, [pc, #204]	; (800de04 <_tx_thread_system_suspend+0x224>)
 800dd36:	681b      	ldr	r3, [r3, #0]
 800dd38:	4a30      	ldr	r2, [pc, #192]	; (800ddfc <_tx_thread_system_suspend+0x21c>)
 800dd3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800dd3e:	4a32      	ldr	r2, [pc, #200]	; (800de08 <_tx_thread_system_suspend+0x228>)
 800dd40:	6013      	str	r3, [r2, #0]
 800dd42:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800dd44:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800dd46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd48:	f383 8810 	msr	PRIMASK, r3
}
 800dd4c:	bf00      	nop
            /* Restore interrupts.  */
            TX_RESTORE

            /* Determine if preemption should take place. This is only possible if the current thread pointer is
               not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
            TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 800dd4e:	4b2a      	ldr	r3, [pc, #168]	; (800ddf8 <_tx_thread_system_suspend+0x218>)
 800dd50:	681b      	ldr	r3, [r3, #0]
 800dd52:	657b      	str	r3, [r7, #84]	; 0x54
            if (combined_flags == ((ULONG) 0))
 800dd54:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800dd56:	2b00      	cmp	r3, #0
 800dd58:	d144      	bne.n	800dde4 <_tx_thread_system_suspend+0x204>
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 800dd5a:	4b2c      	ldr	r3, [pc, #176]	; (800de0c <_tx_thread_system_suspend+0x22c>)
 800dd5c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dd60:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800dd62:	f3ef 8305 	mrs	r3, IPSR
 800dd66:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(ipsr_value);
 800dd68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    if (_tx_ipsr_get() == 0)
 800dd6a:	2b00      	cmp	r3, #0
 800dd6c:	d10c      	bne.n	800dd88 <_tx_thread_system_suspend+0x1a8>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800dd6e:	f3ef 8310 	mrs	r3, PRIMASK
 800dd72:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 800dd74:	6abb      	ldr	r3, [r7, #40]	; 0x28
        interrupt_save = __get_interrupt_posture();
 800dd76:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSIE  i": : : "memory");
 800dd78:	b662      	cpsie	i
}
 800dd7a:	bf00      	nop
 800dd7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd7e:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800dd80:	6a3b      	ldr	r3, [r7, #32]
 800dd82:	f383 8810 	msr	PRIMASK, r3
}
 800dd86:	bf00      	nop
}
 800dd88:	bf00      	nop
                /* Preemption is needed - return to the system!  */
                _tx_thread_system_return();
            }

            /* Return to caller.  */
            return;
 800dd8a:	e02b      	b.n	800dde4 <_tx_thread_system_suspend+0x204>
 800dd8c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800dd8e:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800dd90:	69fb      	ldr	r3, [r7, #28]
 800dd92:	f383 8810 	msr	PRIMASK, r3
}
 800dd96:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Determine if a preemption condition is present.  */
    if (current_thread != _tx_thread_execute_ptr)
 800dd98:	4b1b      	ldr	r3, [pc, #108]	; (800de08 <_tx_thread_system_suspend+0x228>)
 800dd9a:	681b      	ldr	r3, [r3, #0]
 800dd9c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800dd9e:	429a      	cmp	r2, r3
 800dda0:	d022      	beq.n	800dde8 <_tx_thread_system_suspend+0x208>
        TX_THREAD_STACK_CHECK(thread_ptr)
#endif

        /* Determine if preemption should take place. This is only possible if the current thread pointer is
           not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
        TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 800dda2:	4b15      	ldr	r3, [pc, #84]	; (800ddf8 <_tx_thread_system_suspend+0x218>)
 800dda4:	681b      	ldr	r3, [r3, #0]
 800dda6:	657b      	str	r3, [r7, #84]	; 0x54
        if (combined_flags == ((ULONG) 0))
 800dda8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ddaa:	2b00      	cmp	r3, #0
 800ddac:	d11c      	bne.n	800dde8 <_tx_thread_system_suspend+0x208>
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 800ddae:	4b17      	ldr	r3, [pc, #92]	; (800de0c <_tx_thread_system_suspend+0x22c>)
 800ddb0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ddb4:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800ddb6:	f3ef 8305 	mrs	r3, IPSR
 800ddba:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 800ddbc:	69bb      	ldr	r3, [r7, #24]
    if (_tx_ipsr_get() == 0)
 800ddbe:	2b00      	cmp	r3, #0
 800ddc0:	d10c      	bne.n	800dddc <_tx_thread_system_suspend+0x1fc>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800ddc2:	f3ef 8310 	mrs	r3, PRIMASK
 800ddc6:	617b      	str	r3, [r7, #20]
    return(posture);
 800ddc8:	697b      	ldr	r3, [r7, #20]
        interrupt_save = __get_interrupt_posture();
 800ddca:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSIE  i": : : "memory");
 800ddcc:	b662      	cpsie	i
}
 800ddce:	bf00      	nop
 800ddd0:	693b      	ldr	r3, [r7, #16]
 800ddd2:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800ddd4:	68fb      	ldr	r3, [r7, #12]
 800ddd6:	f383 8810 	msr	PRIMASK, r3
}
 800ddda:	bf00      	nop
}
 800dddc:	bf00      	nop
            _tx_thread_system_return();
        }
    }

    /* Return to caller.  */
    return;
 800ddde:	e003      	b.n	800dde8 <_tx_thread_system_suspend+0x208>
                return;
 800dde0:	bf00      	nop
 800dde2:	e002      	b.n	800ddea <_tx_thread_system_suspend+0x20a>
            return;
 800dde4:	bf00      	nop
 800dde6:	e000      	b.n	800ddea <_tx_thread_system_suspend+0x20a>
    return;
 800dde8:	bf00      	nop
}
 800ddea:	3778      	adds	r7, #120	; 0x78
 800ddec:	46bd      	mov	sp, r7
 800ddee:	bd80      	pop	{r7, pc}
 800ddf0:	200022e0 	.word	0x200022e0
 800ddf4:	200028e4 	.word	0x200028e4
 800ddf8:	20002378 	.word	0x20002378
 800ddfc:	200022f8 	.word	0x200022f8
 800de00:	200022f0 	.word	0x200022f0
 800de04:	200022f4 	.word	0x200022f4
 800de08:	200022e4 	.word	0x200022e4
 800de0c:	e000ed04 	.word	0xe000ed04

0800de10 <_tx_thread_time_slice>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_time_slice(VOID)
{
 800de10:	b480      	push	{r7}
 800de12:	b087      	sub	sp, #28
 800de14:	af00      	add	r7, sp, #0
ULONG           system_state;
UINT            preempt_disable;
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 800de16:	4b21      	ldr	r3, [pc, #132]	; (800de9c <_tx_thread_time_slice+0x8c>)
 800de18:	681b      	ldr	r3, [r3, #0]
 800de1a:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800de1c:	f3ef 8310 	mrs	r3, PRIMASK
 800de20:	60fb      	str	r3, [r7, #12]
    return(posture);
 800de22:	68fb      	ldr	r3, [r7, #12]
    int_posture = __get_interrupt_posture();
 800de24:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("CPSID i" : : : "memory");
 800de26:	b672      	cpsid	i
    return(int_posture);
 800de28:	68bb      	ldr	r3, [r7, #8]
    /* Set the next thread pointer to NULL.  */
    next_thread_ptr =  TX_NULL;
#endif

    /* Lockout interrupts while the time-slice is evaluated.  */
    TX_DISABLE
 800de2a:	613b      	str	r3, [r7, #16]

    /* Clear the expired time-slice flag.  */
    _tx_timer_expired_time_slice =  TX_FALSE;
 800de2c:	4b1c      	ldr	r3, [pc, #112]	; (800dea0 <_tx_thread_time_slice+0x90>)
 800de2e:	2200      	movs	r2, #0
 800de30:	601a      	str	r2, [r3, #0]

    /* Make sure the thread pointer is valid.  */
    if (thread_ptr != TX_NULL)
 800de32:	697b      	ldr	r3, [r7, #20]
 800de34:	2b00      	cmp	r3, #0
 800de36:	d024      	beq.n	800de82 <_tx_thread_time_slice+0x72>
    {

        /* Make sure the thread is still active, i.e. not suspended.  */
        if (thread_ptr -> tx_thread_state == TX_READY)
 800de38:	697b      	ldr	r3, [r7, #20]
 800de3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800de3c:	2b00      	cmp	r3, #0
 800de3e:	d120      	bne.n	800de82 <_tx_thread_time_slice+0x72>
        {

            /* Setup a fresh time-slice for the thread.  */
            thread_ptr -> tx_thread_time_slice =  thread_ptr -> tx_thread_new_time_slice;
 800de40:	697b      	ldr	r3, [r7, #20]
 800de42:	69da      	ldr	r2, [r3, #28]
 800de44:	697b      	ldr	r3, [r7, #20]
 800de46:	619a      	str	r2, [r3, #24]

            /* Reset the actual time-slice variable.  */
            _tx_timer_time_slice =  thread_ptr -> tx_thread_time_slice;
 800de48:	697b      	ldr	r3, [r7, #20]
 800de4a:	699b      	ldr	r3, [r3, #24]
 800de4c:	4a15      	ldr	r2, [pc, #84]	; (800dea4 <_tx_thread_time_slice+0x94>)
 800de4e:	6013      	str	r3, [r2, #0]

            /* Determine if there is another thread at the same priority and preemption-threshold
               is not set.  Preemption-threshold overrides time-slicing.  */
            if (thread_ptr -> tx_thread_ready_next != thread_ptr)
 800de50:	697b      	ldr	r3, [r7, #20]
 800de52:	6a1b      	ldr	r3, [r3, #32]
 800de54:	697a      	ldr	r2, [r7, #20]
 800de56:	429a      	cmp	r2, r3
 800de58:	d013      	beq.n	800de82 <_tx_thread_time_slice+0x72>
            {

                /* Check to see if preemption-threshold is not being used.  */
                if (thread_ptr -> tx_thread_priority == thread_ptr -> tx_thread_preempt_threshold)
 800de5a:	697b      	ldr	r3, [r7, #20]
 800de5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800de5e:	697b      	ldr	r3, [r7, #20]
 800de60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800de62:	429a      	cmp	r2, r3
 800de64:	d10d      	bne.n	800de82 <_tx_thread_time_slice+0x72>

                    /* Preemption-threshold is not being used by this thread.  */

                    /* There is another thread at this priority, make it the highest at
                       this priority level.  */
                    _tx_thread_priority_list[thread_ptr -> tx_thread_priority] =  thread_ptr -> tx_thread_ready_next;
 800de66:	697b      	ldr	r3, [r7, #20]
 800de68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800de6a:	697a      	ldr	r2, [r7, #20]
 800de6c:	6a12      	ldr	r2, [r2, #32]
 800de6e:	490e      	ldr	r1, [pc, #56]	; (800dea8 <_tx_thread_time_slice+0x98>)
 800de70:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

                    /* Designate the highest priority thread as the one to execute.  Don't use this
                       thread's priority as an index just in case a higher priority thread is now
                       ready!  */
                    _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 800de74:	4b0d      	ldr	r3, [pc, #52]	; (800deac <_tx_thread_time_slice+0x9c>)
 800de76:	681b      	ldr	r3, [r3, #0]
 800de78:	4a0b      	ldr	r2, [pc, #44]	; (800dea8 <_tx_thread_time_slice+0x98>)
 800de7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800de7e:	4a0c      	ldr	r2, [pc, #48]	; (800deb0 <_tx_thread_time_slice+0xa0>)
 800de80:	6013      	str	r3, [r2, #0]
 800de82:	693b      	ldr	r3, [r7, #16]
 800de84:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800de86:	687b      	ldr	r3, [r7, #4]
 800de88:	f383 8810 	msr	PRIMASK, r3
}
 800de8c:	bf00      	nop

        /* Yes, check this thread's stack.  */
        TX_THREAD_STACK_CHECK(next_thread_ptr)
    }
#endif
}
 800de8e:	bf00      	nop
 800de90:	371c      	adds	r7, #28
 800de92:	46bd      	mov	sp, r7
 800de94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de98:	4770      	bx	lr
 800de9a:	bf00      	nop
 800de9c:	200022e0 	.word	0x200022e0
 800dea0:	20002388 	.word	0x20002388
 800dea4:	200028e4 	.word	0x200028e4
 800dea8:	200022f8 	.word	0x200022f8
 800deac:	200022f4 	.word	0x200022f4
 800deb0:	200022e4 	.word	0x200022e4

0800deb4 <_tx_thread_timeout>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_timeout(ULONG timeout_input)
{
 800deb4:	b580      	push	{r7, lr}
 800deb6:	b08a      	sub	sp, #40	; 0x28
 800deb8:	af00      	add	r7, sp, #0
 800deba:	6078      	str	r0, [r7, #4]
VOID            (*suspend_cleanup)(struct TX_THREAD_STRUCT *suspend_thread_ptr, ULONG suspension_sequence);
ULONG           suspension_sequence;


    /* Pickup the thread pointer.  */
    TX_THREAD_TIMEOUT_POINTER_SETUP(thread_ptr)
 800debc:	687b      	ldr	r3, [r7, #4]
 800debe:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800dec0:	f3ef 8310 	mrs	r3, PRIMASK
 800dec4:	617b      	str	r3, [r7, #20]
    return(posture);
 800dec6:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 800dec8:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 800deca:	b672      	cpsid	i
    return(int_posture);
 800decc:	693b      	ldr	r3, [r7, #16]

    /* Disable interrupts.  */
    TX_DISABLE
 800dece:	623b      	str	r3, [r7, #32]

    /* Determine how the thread is currently suspended.  */
    if (thread_ptr -> tx_thread_state == TX_SLEEP)
 800ded0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ded2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ded4:	2b04      	cmp	r3, #4
 800ded6:	d10e      	bne.n	800def6 <_tx_thread_timeout+0x42>
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Increment the disable preemption flag.  */
        _tx_thread_preempt_disable++;
 800ded8:	4b13      	ldr	r3, [pc, #76]	; (800df28 <_tx_thread_timeout+0x74>)
 800deda:	681b      	ldr	r3, [r3, #0]
 800dedc:	3301      	adds	r3, #1
 800dede:	4a12      	ldr	r2, [pc, #72]	; (800df28 <_tx_thread_timeout+0x74>)
 800dee0:	6013      	str	r3, [r2, #0]
 800dee2:	6a3b      	ldr	r3, [r7, #32]
 800dee4:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800dee6:	68fb      	ldr	r3, [r7, #12]
 800dee8:	f383 8810 	msr	PRIMASK, r3
}
 800deec:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Lift the suspension on the sleeping thread.  */
        _tx_thread_system_resume(thread_ptr);
 800deee:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800def0:	f7ff fd76 	bl	800d9e0 <_tx_thread_system_resume>

        /* Restore interrupts.  */
        TX_RESTORE
#endif
    }
}
 800def4:	e013      	b.n	800df1e <_tx_thread_timeout+0x6a>
        suspend_cleanup =  thread_ptr -> tx_thread_suspend_cleanup;
 800def6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800def8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800defa:	61fb      	str	r3, [r7, #28]
        suspension_sequence =  thread_ptr -> tx_thread_suspension_sequence;
 800defc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800defe:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800df02:	61bb      	str	r3, [r7, #24]
 800df04:	6a3b      	ldr	r3, [r7, #32]
 800df06:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800df08:	68bb      	ldr	r3, [r7, #8]
 800df0a:	f383 8810 	msr	PRIMASK, r3
}
 800df0e:	bf00      	nop
        if (suspend_cleanup != TX_NULL)
 800df10:	69fb      	ldr	r3, [r7, #28]
 800df12:	2b00      	cmp	r3, #0
 800df14:	d003      	beq.n	800df1e <_tx_thread_timeout+0x6a>
            (suspend_cleanup)(thread_ptr, suspension_sequence);
 800df16:	69fb      	ldr	r3, [r7, #28]
 800df18:	69b9      	ldr	r1, [r7, #24]
 800df1a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800df1c:	4798      	blx	r3
}
 800df1e:	bf00      	nop
 800df20:	3728      	adds	r7, #40	; 0x28
 800df22:	46bd      	mov	sp, r7
 800df24:	bd80      	pop	{r7, pc}
 800df26:	bf00      	nop
 800df28:	20002378 	.word	0x20002378

0800df2c <_tx_timer_expiration_process>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_expiration_process(VOID)
{
 800df2c:	b580      	push	{r7, lr}
 800df2e:	b084      	sub	sp, #16
 800df30:	af00      	add	r7, sp, #0
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800df32:	f3ef 8310 	mrs	r3, PRIMASK
 800df36:	607b      	str	r3, [r7, #4]
    return(posture);
 800df38:	687b      	ldr	r3, [r7, #4]
    int_posture = __get_interrupt_posture();
 800df3a:	603b      	str	r3, [r7, #0]
    __asm__ volatile ("CPSID i" : : : "memory");
 800df3c:	b672      	cpsid	i
    return(int_posture);
 800df3e:	683b      	ldr	r3, [r7, #0]

    /* Don't process in the ISR, wakeup the system timer thread to process the
       timer expiration.  */

    /* Disable interrupts.  */
    TX_DISABLE
 800df40:	60fb      	str	r3, [r7, #12]
    /* Restore interrupts.  */
    TX_RESTORE
#else

    /* Increment the preempt disable flag.  */
    _tx_thread_preempt_disable++;
 800df42:	4b09      	ldr	r3, [pc, #36]	; (800df68 <_tx_timer_expiration_process+0x3c>)
 800df44:	681b      	ldr	r3, [r3, #0]
 800df46:	3301      	adds	r3, #1
 800df48:	4a07      	ldr	r2, [pc, #28]	; (800df68 <_tx_timer_expiration_process+0x3c>)
 800df4a:	6013      	str	r3, [r2, #0]
 800df4c:	68fb      	ldr	r3, [r7, #12]
 800df4e:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800df50:	68bb      	ldr	r3, [r7, #8]
 800df52:	f383 8810 	msr	PRIMASK, r3
}
 800df56:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Call the system resume function to activate the timer thread.  */
    _tx_thread_system_resume(&_tx_timer_thread);
 800df58:	4804      	ldr	r0, [pc, #16]	; (800df6c <_tx_timer_expiration_process+0x40>)
 800df5a:	f7ff fd41 	bl	800d9e0 <_tx_thread_system_resume>
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 800df5e:	bf00      	nop
 800df60:	3710      	adds	r7, #16
 800df62:	46bd      	mov	sp, r7
 800df64:	bd80      	pop	{r7, pc}
 800df66:	bf00      	nop
 800df68:	20002378 	.word	0x20002378
 800df6c:	20002428 	.word	0x20002428

0800df70 <_tx_timer_initialize>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_initialize(VOID)
{
 800df70:	b590      	push	{r4, r7, lr}
 800df72:	b089      	sub	sp, #36	; 0x24
 800df74:	af06      	add	r7, sp, #24
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the system clock to 0.  */
    _tx_timer_system_clock =  ((ULONG) 0);
 800df76:	4b28      	ldr	r3, [pc, #160]	; (800e018 <_tx_timer_initialize+0xa8>)
 800df78:	2200      	movs	r2, #0
 800df7a:	601a      	str	r2, [r3, #0]

    /* Initialize the time-slice value to 0 to make sure it is disabled.  */
    _tx_timer_time_slice =  ((ULONG) 0);
 800df7c:	4b27      	ldr	r3, [pc, #156]	; (800e01c <_tx_timer_initialize+0xac>)
 800df7e:	2200      	movs	r2, #0
 800df80:	601a      	str	r2, [r3, #0]

    /* Clear the expired flags.  */
    _tx_timer_expired_time_slice =  TX_FALSE;
 800df82:	4b27      	ldr	r3, [pc, #156]	; (800e020 <_tx_timer_initialize+0xb0>)
 800df84:	2200      	movs	r2, #0
 800df86:	601a      	str	r2, [r3, #0]
    _tx_timer_expired =             TX_FALSE;
 800df88:	4b26      	ldr	r3, [pc, #152]	; (800e024 <_tx_timer_initialize+0xb4>)
 800df8a:	2200      	movs	r2, #0
 800df8c:	601a      	str	r2, [r3, #0]

    /* Set the currently expired timer being processed pointer to NULL.  */
    _tx_timer_expired_timer_ptr =  TX_NULL;
 800df8e:	4b26      	ldr	r3, [pc, #152]	; (800e028 <_tx_timer_initialize+0xb8>)
 800df90:	2200      	movs	r2, #0
 800df92:	601a      	str	r2, [r3, #0]

    /* Initialize the thread and application timer management control structures.  */

    /* First, initialize the timer list.  */
    TX_MEMSET(&_tx_timer_list[0], 0, (sizeof(_tx_timer_list)));
 800df94:	2280      	movs	r2, #128	; 0x80
 800df96:	2100      	movs	r1, #0
 800df98:	4824      	ldr	r0, [pc, #144]	; (800e02c <_tx_timer_initialize+0xbc>)
 800df9a:	f000 fcaf 	bl	800e8fc <memset>
#endif

    /* Initialize all of the list pointers.  */
    _tx_timer_list_start =   &_tx_timer_list[0];
 800df9e:	4b24      	ldr	r3, [pc, #144]	; (800e030 <_tx_timer_initialize+0xc0>)
 800dfa0:	4a22      	ldr	r2, [pc, #136]	; (800e02c <_tx_timer_initialize+0xbc>)
 800dfa2:	601a      	str	r2, [r3, #0]
    _tx_timer_current_ptr =  &_tx_timer_list[0];
 800dfa4:	4b23      	ldr	r3, [pc, #140]	; (800e034 <_tx_timer_initialize+0xc4>)
 800dfa6:	4a21      	ldr	r2, [pc, #132]	; (800e02c <_tx_timer_initialize+0xbc>)
 800dfa8:	601a      	str	r2, [r3, #0]

    /* Set the timer list end pointer to one past the actual timer list.  This is done
       to make the timer interrupt handling in assembly language a little easier.  */
    _tx_timer_list_end =     &_tx_timer_list[TX_TIMER_ENTRIES-((ULONG) 1)];
 800dfaa:	4b23      	ldr	r3, [pc, #140]	; (800e038 <_tx_timer_initialize+0xc8>)
 800dfac:	4a23      	ldr	r2, [pc, #140]	; (800e03c <_tx_timer_initialize+0xcc>)
 800dfae:	601a      	str	r2, [r3, #0]
    _tx_timer_list_end =     TX_TIMER_POINTER_ADD(_tx_timer_list_end, ((ULONG) 1));
 800dfb0:	4b21      	ldr	r3, [pc, #132]	; (800e038 <_tx_timer_initialize+0xc8>)
 800dfb2:	681b      	ldr	r3, [r3, #0]
 800dfb4:	3304      	adds	r3, #4
 800dfb6:	4a20      	ldr	r2, [pc, #128]	; (800e038 <_tx_timer_initialize+0xc8>)
 800dfb8:	6013      	str	r3, [r2, #0]

#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Setup the variables associated with the system timer thread's stack and
       priority.  */
    _tx_timer_stack_start =  (VOID *) &_tx_timer_thread_stack_area[0];
 800dfba:	4b21      	ldr	r3, [pc, #132]	; (800e040 <_tx_timer_initialize+0xd0>)
 800dfbc:	4a21      	ldr	r2, [pc, #132]	; (800e044 <_tx_timer_initialize+0xd4>)
 800dfbe:	601a      	str	r2, [r3, #0]
    _tx_timer_stack_size =   ((ULONG) TX_TIMER_THREAD_STACK_SIZE);
 800dfc0:	4b21      	ldr	r3, [pc, #132]	; (800e048 <_tx_timer_initialize+0xd8>)
 800dfc2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800dfc6:	601a      	str	r2, [r3, #0]
    _tx_timer_priority =     ((UINT) TX_TIMER_THREAD_PRIORITY);
 800dfc8:	4b20      	ldr	r3, [pc, #128]	; (800e04c <_tx_timer_initialize+0xdc>)
 800dfca:	2200      	movs	r2, #0
 800dfcc:	601a      	str	r2, [r3, #0]
       low-level initialization component.  */
    do
    {

        /* Create the system timer thread.  */
        status =  _tx_thread_create(&_tx_timer_thread,
 800dfce:	4b1c      	ldr	r3, [pc, #112]	; (800e040 <_tx_timer_initialize+0xd0>)
 800dfd0:	681b      	ldr	r3, [r3, #0]
 800dfd2:	4a1d      	ldr	r2, [pc, #116]	; (800e048 <_tx_timer_initialize+0xd8>)
 800dfd4:	6812      	ldr	r2, [r2, #0]
 800dfd6:	491d      	ldr	r1, [pc, #116]	; (800e04c <_tx_timer_initialize+0xdc>)
 800dfd8:	6809      	ldr	r1, [r1, #0]
 800dfda:	481c      	ldr	r0, [pc, #112]	; (800e04c <_tx_timer_initialize+0xdc>)
 800dfdc:	6800      	ldr	r0, [r0, #0]
 800dfde:	2400      	movs	r4, #0
 800dfe0:	9405      	str	r4, [sp, #20]
 800dfe2:	2400      	movs	r4, #0
 800dfe4:	9404      	str	r4, [sp, #16]
 800dfe6:	9003      	str	r0, [sp, #12]
 800dfe8:	9102      	str	r1, [sp, #8]
 800dfea:	9201      	str	r2, [sp, #4]
 800dfec:	9300      	str	r3, [sp, #0]
 800dfee:	4b18      	ldr	r3, [pc, #96]	; (800e050 <_tx_timer_initialize+0xe0>)
 800dff0:	4a18      	ldr	r2, [pc, #96]	; (800e054 <_tx_timer_initialize+0xe4>)
 800dff2:	4919      	ldr	r1, [pc, #100]	; (800e058 <_tx_timer_initialize+0xe8>)
 800dff4:	4819      	ldr	r0, [pc, #100]	; (800e05c <_tx_timer_initialize+0xec>)
 800dff6:	f7ff f9eb 	bl	800d3d0 <_tx_thread_create>
 800dffa:	6078      	str	r0, [r7, #4]
#endif

        /* Define timer initialize extension.  */
        TX_TIMER_INITIALIZE_EXTENSION(status)

    } while (status != TX_SUCCESS);
 800dffc:	687b      	ldr	r3, [r7, #4]
 800dffe:	2b00      	cmp	r3, #0
 800e000:	d1e5      	bne.n	800dfce <_tx_timer_initialize+0x5e>
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the head pointer of the created application timer list.  */
    _tx_timer_created_ptr =  TX_NULL;
 800e002:	4b17      	ldr	r3, [pc, #92]	; (800e060 <_tx_timer_initialize+0xf0>)
 800e004:	2200      	movs	r2, #0
 800e006:	601a      	str	r2, [r3, #0]

    /* Set the created count to zero.  */
    _tx_timer_created_count =  TX_EMPTY;
 800e008:	4b16      	ldr	r3, [pc, #88]	; (800e064 <_tx_timer_initialize+0xf4>)
 800e00a:	2200      	movs	r2, #0
 800e00c:	601a      	str	r2, [r3, #0]
    _tx_timer_performance_expiration_count =         ((ULONG) 0);
    _tx_timer_performance__expiration_adjust_count =  ((ULONG) 0);
#endif
#endif
#endif
}
 800e00e:	bf00      	nop
 800e010:	370c      	adds	r7, #12
 800e012:	46bd      	mov	sp, r7
 800e014:	bd90      	pop	{r4, r7, pc}
 800e016:	bf00      	nop
 800e018:	20002384 	.word	0x20002384
 800e01c:	200028e4 	.word	0x200028e4
 800e020:	20002388 	.word	0x20002388
 800e024:	20002418 	.word	0x20002418
 800e028:	20002424 	.word	0x20002424
 800e02c:	2000238c 	.word	0x2000238c
 800e030:	2000240c 	.word	0x2000240c
 800e034:	20002414 	.word	0x20002414
 800e038:	20002410 	.word	0x20002410
 800e03c:	20002408 	.word	0x20002408
 800e040:	200024d8 	.word	0x200024d8
 800e044:	200024e4 	.word	0x200024e4
 800e048:	200024dc 	.word	0x200024dc
 800e04c:	200024e0 	.word	0x200024e0
 800e050:	4154494d 	.word	0x4154494d
 800e054:	0800e19d 	.word	0x0800e19d
 800e058:	0800e9f4 	.word	0x0800e9f4
 800e05c:	20002428 	.word	0x20002428
 800e060:	2000241c 	.word	0x2000241c
 800e064:	20002420 	.word	0x20002420

0800e068 <_tx_timer_system_activate>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_system_activate(TX_TIMER_INTERNAL *timer_ptr)
{
 800e068:	b480      	push	{r7}
 800e06a:	b089      	sub	sp, #36	; 0x24
 800e06c:	af00      	add	r7, sp, #0
 800e06e:	6078      	str	r0, [r7, #4]
ULONG                       remaining_ticks;
ULONG                       expiration_time;


    /* Pickup the remaining ticks.  */
    remaining_ticks =  timer_ptr -> tx_timer_internal_remaining_ticks;
 800e070:	687b      	ldr	r3, [r7, #4]
 800e072:	681b      	ldr	r3, [r3, #0]
 800e074:	617b      	str	r3, [r7, #20]

    /* Determine if there is a timer to activate.  */
    if (remaining_ticks != ((ULONG) 0))
 800e076:	697b      	ldr	r3, [r7, #20]
 800e078:	2b00      	cmp	r3, #0
 800e07a:	d04a      	beq.n	800e112 <_tx_timer_system_activate+0xaa>
    {

        /* Determine if the timer is set to wait forever.  */
        if (remaining_ticks != TX_WAIT_FOREVER)
 800e07c:	697b      	ldr	r3, [r7, #20]
 800e07e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e082:	d046      	beq.n	800e112 <_tx_timer_system_activate+0xaa>
        {

            /* Valid timer activate request.  */

            /* Determine if the timer still needs activation.  */
            if (timer_ptr -> tx_timer_internal_list_head == TX_NULL)
 800e084:	687b      	ldr	r3, [r7, #4]
 800e086:	699b      	ldr	r3, [r3, #24]
 800e088:	2b00      	cmp	r3, #0
 800e08a:	d142      	bne.n	800e112 <_tx_timer_system_activate+0xaa>
            {

                /* Activate the timer.  */

                /* Calculate the amount of time remaining for the timer.  */
                if (remaining_ticks > TX_TIMER_ENTRIES)
 800e08c:	697b      	ldr	r3, [r7, #20]
 800e08e:	2b20      	cmp	r3, #32
 800e090:	d902      	bls.n	800e098 <_tx_timer_system_activate+0x30>
                {

                    /* Set expiration time to the maximum number of entries.  */
                    expiration_time =  TX_TIMER_ENTRIES - ((ULONG) 1);
 800e092:	231f      	movs	r3, #31
 800e094:	61bb      	str	r3, [r7, #24]
 800e096:	e002      	b.n	800e09e <_tx_timer_system_activate+0x36>
                {

                    /* Timer value fits in the timer entries.  */

                    /* Set the expiration time.  */
                    expiration_time =  (remaining_ticks - ((ULONG) 1));
 800e098:	697b      	ldr	r3, [r7, #20]
 800e09a:	3b01      	subs	r3, #1
 800e09c:	61bb      	str	r3, [r7, #24]

                /* At this point, we are ready to put the timer on one of
                   the timer lists.  */

                /* Calculate the proper place for the timer.  */
                timer_list =  TX_TIMER_POINTER_ADD(_tx_timer_current_ptr, expiration_time);
 800e09e:	4b20      	ldr	r3, [pc, #128]	; (800e120 <_tx_timer_system_activate+0xb8>)
 800e0a0:	681a      	ldr	r2, [r3, #0]
 800e0a2:	69bb      	ldr	r3, [r7, #24]
 800e0a4:	009b      	lsls	r3, r3, #2
 800e0a6:	4413      	add	r3, r2
 800e0a8:	61fb      	str	r3, [r7, #28]
                if (TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(timer_list) >= TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(_tx_timer_list_end))
 800e0aa:	4b1e      	ldr	r3, [pc, #120]	; (800e124 <_tx_timer_system_activate+0xbc>)
 800e0ac:	681b      	ldr	r3, [r3, #0]
 800e0ae:	69fa      	ldr	r2, [r7, #28]
 800e0b0:	429a      	cmp	r2, r3
 800e0b2:	d30b      	bcc.n	800e0cc <_tx_timer_system_activate+0x64>
                {

                    /* Wrap from the beginning of the list.  */
                    delta =  TX_TIMER_POINTER_DIF(timer_list, _tx_timer_list_end);
 800e0b4:	4b1b      	ldr	r3, [pc, #108]	; (800e124 <_tx_timer_system_activate+0xbc>)
 800e0b6:	681b      	ldr	r3, [r3, #0]
 800e0b8:	69fa      	ldr	r2, [r7, #28]
 800e0ba:	1ad3      	subs	r3, r2, r3
 800e0bc:	109b      	asrs	r3, r3, #2
 800e0be:	613b      	str	r3, [r7, #16]
                    timer_list =  TX_TIMER_POINTER_ADD(_tx_timer_list_start, delta);
 800e0c0:	4b19      	ldr	r3, [pc, #100]	; (800e128 <_tx_timer_system_activate+0xc0>)
 800e0c2:	681a      	ldr	r2, [r3, #0]
 800e0c4:	693b      	ldr	r3, [r7, #16]
 800e0c6:	009b      	lsls	r3, r3, #2
 800e0c8:	4413      	add	r3, r2
 800e0ca:	61fb      	str	r3, [r7, #28]
                }

                /* Now put the timer on this list.  */
                if ((*timer_list) == TX_NULL)
 800e0cc:	69fb      	ldr	r3, [r7, #28]
 800e0ce:	681b      	ldr	r3, [r3, #0]
 800e0d0:	2b00      	cmp	r3, #0
 800e0d2:	d109      	bne.n	800e0e8 <_tx_timer_system_activate+0x80>
                {

                    /* This list is NULL, just put the new timer on it.  */

                    /* Setup the links in this timer.  */
                    timer_ptr -> tx_timer_internal_active_next =      timer_ptr;
 800e0d4:	687b      	ldr	r3, [r7, #4]
 800e0d6:	687a      	ldr	r2, [r7, #4]
 800e0d8:	611a      	str	r2, [r3, #16]
                    timer_ptr -> tx_timer_internal_active_previous =  timer_ptr;
 800e0da:	687b      	ldr	r3, [r7, #4]
 800e0dc:	687a      	ldr	r2, [r7, #4]
 800e0de:	615a      	str	r2, [r3, #20]

                    /* Setup the list head pointer.  */
                    *timer_list =  timer_ptr;
 800e0e0:	69fb      	ldr	r3, [r7, #28]
 800e0e2:	687a      	ldr	r2, [r7, #4]
 800e0e4:	601a      	str	r2, [r3, #0]
 800e0e6:	e011      	b.n	800e10c <_tx_timer_system_activate+0xa4>
                }
                else
                {

                    /* This list is not NULL, add current timer to the end. */
                    next_timer =                                        *timer_list;
 800e0e8:	69fb      	ldr	r3, [r7, #28]
 800e0ea:	681b      	ldr	r3, [r3, #0]
 800e0ec:	60fb      	str	r3, [r7, #12]
                    previous_timer =                                    next_timer -> tx_timer_internal_active_previous;
 800e0ee:	68fb      	ldr	r3, [r7, #12]
 800e0f0:	695b      	ldr	r3, [r3, #20]
 800e0f2:	60bb      	str	r3, [r7, #8]
                    previous_timer -> tx_timer_internal_active_next =   timer_ptr;
 800e0f4:	68bb      	ldr	r3, [r7, #8]
 800e0f6:	687a      	ldr	r2, [r7, #4]
 800e0f8:	611a      	str	r2, [r3, #16]
                    next_timer -> tx_timer_internal_active_previous =   timer_ptr;
 800e0fa:	68fb      	ldr	r3, [r7, #12]
 800e0fc:	687a      	ldr	r2, [r7, #4]
 800e0fe:	615a      	str	r2, [r3, #20]
                    timer_ptr -> tx_timer_internal_active_next =        next_timer;
 800e100:	687b      	ldr	r3, [r7, #4]
 800e102:	68fa      	ldr	r2, [r7, #12]
 800e104:	611a      	str	r2, [r3, #16]
                    timer_ptr -> tx_timer_internal_active_previous =    previous_timer;
 800e106:	687b      	ldr	r3, [r7, #4]
 800e108:	68ba      	ldr	r2, [r7, #8]
 800e10a:	615a      	str	r2, [r3, #20]
                }

                /* Setup list head pointer.  */
                timer_ptr -> tx_timer_internal_list_head =  timer_list;
 800e10c:	687b      	ldr	r3, [r7, #4]
 800e10e:	69fa      	ldr	r2, [r7, #28]
 800e110:	619a      	str	r2, [r3, #24]
            }
        }
    }
}
 800e112:	bf00      	nop
 800e114:	3724      	adds	r7, #36	; 0x24
 800e116:	46bd      	mov	sp, r7
 800e118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e11c:	4770      	bx	lr
 800e11e:	bf00      	nop
 800e120:	20002414 	.word	0x20002414
 800e124:	20002410 	.word	0x20002410
 800e128:	2000240c 	.word	0x2000240c

0800e12c <_tx_timer_system_deactivate>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_system_deactivate(TX_TIMER_INTERNAL *timer_ptr)
{
 800e12c:	b480      	push	{r7}
 800e12e:	b087      	sub	sp, #28
 800e130:	af00      	add	r7, sp, #0
 800e132:	6078      	str	r0, [r7, #4]
TX_TIMER_INTERNAL   *next_timer;
TX_TIMER_INTERNAL   *previous_timer;


    /* Pickup the list head pointer.  */
    list_head =  timer_ptr -> tx_timer_internal_list_head;
 800e134:	687b      	ldr	r3, [r7, #4]
 800e136:	699b      	ldr	r3, [r3, #24]
 800e138:	617b      	str	r3, [r7, #20]

    /* Determine if the timer still needs deactivation.  */
    if (list_head != TX_NULL)
 800e13a:	697b      	ldr	r3, [r7, #20]
 800e13c:	2b00      	cmp	r3, #0
 800e13e:	d026      	beq.n	800e18e <_tx_timer_system_deactivate+0x62>
    {

        /* Deactivate the timer.  */

        /* Pickup the next active timer.  */
        next_timer =  timer_ptr -> tx_timer_internal_active_next;
 800e140:	687b      	ldr	r3, [r7, #4]
 800e142:	691b      	ldr	r3, [r3, #16]
 800e144:	613b      	str	r3, [r7, #16]

        /* See if this is the only timer in the list.  */
        if (timer_ptr == next_timer)
 800e146:	687a      	ldr	r2, [r7, #4]
 800e148:	693b      	ldr	r3, [r7, #16]
 800e14a:	429a      	cmp	r2, r3
 800e14c:	d108      	bne.n	800e160 <_tx_timer_system_deactivate+0x34>
        {

            /* Yes, the only timer on the list.  */

            /* Determine if the head pointer needs to be updated.  */
            if (*(list_head) == timer_ptr)
 800e14e:	697b      	ldr	r3, [r7, #20]
 800e150:	681b      	ldr	r3, [r3, #0]
 800e152:	687a      	ldr	r2, [r7, #4]
 800e154:	429a      	cmp	r2, r3
 800e156:	d117      	bne.n	800e188 <_tx_timer_system_deactivate+0x5c>
            {

                /* Update the head pointer.  */
                *(list_head) =  TX_NULL;
 800e158:	697b      	ldr	r3, [r7, #20]
 800e15a:	2200      	movs	r2, #0
 800e15c:	601a      	str	r2, [r3, #0]
 800e15e:	e013      	b.n	800e188 <_tx_timer_system_deactivate+0x5c>
        {

            /* At least one more timer is on the same expiration list.  */

            /* Update the links of the adjacent timers.  */
            previous_timer =                                   timer_ptr -> tx_timer_internal_active_previous;
 800e160:	687b      	ldr	r3, [r7, #4]
 800e162:	695b      	ldr	r3, [r3, #20]
 800e164:	60fb      	str	r3, [r7, #12]
            next_timer -> tx_timer_internal_active_previous =  previous_timer;
 800e166:	693b      	ldr	r3, [r7, #16]
 800e168:	68fa      	ldr	r2, [r7, #12]
 800e16a:	615a      	str	r2, [r3, #20]
            previous_timer -> tx_timer_internal_active_next =  next_timer;
 800e16c:	68fb      	ldr	r3, [r7, #12]
 800e16e:	693a      	ldr	r2, [r7, #16]
 800e170:	611a      	str	r2, [r3, #16]

            /* Determine if the head pointer needs to be updated.  */
            if (*(list_head) == timer_ptr)
 800e172:	697b      	ldr	r3, [r7, #20]
 800e174:	681b      	ldr	r3, [r3, #0]
 800e176:	687a      	ldr	r2, [r7, #4]
 800e178:	429a      	cmp	r2, r3
 800e17a:	d105      	bne.n	800e188 <_tx_timer_system_deactivate+0x5c>
            {

                /* Update the next timer in the list with the list head pointer.  */
                next_timer -> tx_timer_internal_list_head =  list_head;
 800e17c:	693b      	ldr	r3, [r7, #16]
 800e17e:	697a      	ldr	r2, [r7, #20]
 800e180:	619a      	str	r2, [r3, #24]

                /* Update the head pointer.  */
                *(list_head) =  next_timer;
 800e182:	697b      	ldr	r3, [r7, #20]
 800e184:	693a      	ldr	r2, [r7, #16]
 800e186:	601a      	str	r2, [r3, #0]
            }
        }

        /* Clear the timer's list head pointer.  */
        timer_ptr -> tx_timer_internal_list_head =  TX_NULL;
 800e188:	687b      	ldr	r3, [r7, #4]
 800e18a:	2200      	movs	r2, #0
 800e18c:	619a      	str	r2, [r3, #24]
    }
}
 800e18e:	bf00      	nop
 800e190:	371c      	adds	r7, #28
 800e192:	46bd      	mov	sp, r7
 800e194:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e198:	4770      	bx	lr
	...

0800e19c <_tx_timer_thread_entry>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
#ifndef TX_TIMER_PROCESS_IN_ISR
VOID  _tx_timer_thread_entry(ULONG timer_thread_input)
{
 800e19c:	b580      	push	{r7, lr}
 800e19e:	b098      	sub	sp, #96	; 0x60
 800e1a0:	af00      	add	r7, sp, #0
 800e1a2:	6078      	str	r0, [r7, #4]
TX_TIMER_INTERNAL           *reactivate_timer;
TX_TIMER_INTERNAL           *next_timer;
TX_TIMER_INTERNAL           *previous_timer;
TX_TIMER_INTERNAL           *current_timer;
VOID                        (*timeout_function)(ULONG id);
ULONG                       timeout_param =  ((ULONG) 0);
 800e1a4:	2300      	movs	r3, #0
 800e1a6:	657b      	str	r3, [r7, #84]	; 0x54
#endif


    /* Make sure the timer input is correct.  This also gets rid of the
       silly compiler warnings.  */
    if (timer_thread_input == TX_TIMER_ID)
 800e1a8:	687b      	ldr	r3, [r7, #4]
 800e1aa:	4a73      	ldr	r2, [pc, #460]	; (800e378 <_tx_timer_thread_entry+0x1dc>)
 800e1ac:	4293      	cmp	r3, r2
 800e1ae:	f040 80de 	bne.w	800e36e <_tx_timer_thread_entry+0x1d2>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800e1b2:	f3ef 8310 	mrs	r3, PRIMASK
 800e1b6:	643b      	str	r3, [r7, #64]	; 0x40
    return(posture);
 800e1b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    int_posture = __get_interrupt_posture();
 800e1ba:	63fb      	str	r3, [r7, #60]	; 0x3c
    __asm__ volatile ("CPSID i" : : : "memory");
 800e1bc:	b672      	cpsid	i
    return(int_posture);
 800e1be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
        {

            /* First, move the current list pointer and clear the timer
               expired value.  This allows the interrupt handling portion
               to continue looking for timer expirations.  */
            TX_DISABLE
 800e1c0:	65fb      	str	r3, [r7, #92]	; 0x5c

            /* Save the current timer expiration list pointer.  */
            expired_timers =  *_tx_timer_current_ptr;
 800e1c2:	4b6e      	ldr	r3, [pc, #440]	; (800e37c <_tx_timer_thread_entry+0x1e0>)
 800e1c4:	681b      	ldr	r3, [r3, #0]
 800e1c6:	681b      	ldr	r3, [r3, #0]
 800e1c8:	60fb      	str	r3, [r7, #12]

            /* Modify the head pointer in the first timer in the list, if there
               is one!  */
            if (expired_timers != TX_NULL)
 800e1ca:	68fb      	ldr	r3, [r7, #12]
 800e1cc:	2b00      	cmp	r3, #0
 800e1ce:	d003      	beq.n	800e1d8 <_tx_timer_thread_entry+0x3c>
            {

                expired_timers -> tx_timer_internal_list_head =  &expired_timers;
 800e1d0:	68fb      	ldr	r3, [r7, #12]
 800e1d2:	f107 020c 	add.w	r2, r7, #12
 800e1d6:	619a      	str	r2, [r3, #24]
            }

            /* Set the current list pointer to NULL.  */
            *_tx_timer_current_ptr =  TX_NULL;
 800e1d8:	4b68      	ldr	r3, [pc, #416]	; (800e37c <_tx_timer_thread_entry+0x1e0>)
 800e1da:	681b      	ldr	r3, [r3, #0]
 800e1dc:	2200      	movs	r2, #0
 800e1de:	601a      	str	r2, [r3, #0]

            /* Move the current pointer up one timer entry wrap if we get to
               the end of the list.  */
            _tx_timer_current_ptr =  TX_TIMER_POINTER_ADD(_tx_timer_current_ptr, 1);
 800e1e0:	4b66      	ldr	r3, [pc, #408]	; (800e37c <_tx_timer_thread_entry+0x1e0>)
 800e1e2:	681b      	ldr	r3, [r3, #0]
 800e1e4:	3304      	adds	r3, #4
 800e1e6:	4a65      	ldr	r2, [pc, #404]	; (800e37c <_tx_timer_thread_entry+0x1e0>)
 800e1e8:	6013      	str	r3, [r2, #0]
            if (_tx_timer_current_ptr == _tx_timer_list_end)
 800e1ea:	4b64      	ldr	r3, [pc, #400]	; (800e37c <_tx_timer_thread_entry+0x1e0>)
 800e1ec:	681a      	ldr	r2, [r3, #0]
 800e1ee:	4b64      	ldr	r3, [pc, #400]	; (800e380 <_tx_timer_thread_entry+0x1e4>)
 800e1f0:	681b      	ldr	r3, [r3, #0]
 800e1f2:	429a      	cmp	r2, r3
 800e1f4:	d103      	bne.n	800e1fe <_tx_timer_thread_entry+0x62>
            {

                _tx_timer_current_ptr =  _tx_timer_list_start;
 800e1f6:	4b63      	ldr	r3, [pc, #396]	; (800e384 <_tx_timer_thread_entry+0x1e8>)
 800e1f8:	681b      	ldr	r3, [r3, #0]
 800e1fa:	4a60      	ldr	r2, [pc, #384]	; (800e37c <_tx_timer_thread_entry+0x1e0>)
 800e1fc:	6013      	str	r3, [r2, #0]
            }

            /* Clear the expired flag.  */
            _tx_timer_expired =  TX_FALSE;
 800e1fe:	4b62      	ldr	r3, [pc, #392]	; (800e388 <_tx_timer_thread_entry+0x1ec>)
 800e200:	2200      	movs	r2, #0
 800e202:	601a      	str	r2, [r3, #0]
 800e204:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e206:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800e208:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e20a:	f383 8810 	msr	PRIMASK, r3
}
 800e20e:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800e210:	f3ef 8310 	mrs	r3, PRIMASK
 800e214:	63bb      	str	r3, [r7, #56]	; 0x38
    return(posture);
 800e216:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    int_posture = __get_interrupt_posture();
 800e218:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile ("CPSID i" : : : "memory");
 800e21a:	b672      	cpsid	i
    return(int_posture);
 800e21c:	6b7b      	ldr	r3, [r7, #52]	; 0x34

            /* Restore interrupts temporarily.  */
            TX_RESTORE

            /* Disable interrupts again.  */
            TX_DISABLE
 800e21e:	65fb      	str	r3, [r7, #92]	; 0x5c

            /* Next, process the expiration of the associated timers at this
               time slot.  */
            while (expired_timers != TX_NULL)
 800e220:	e07f      	b.n	800e322 <_tx_timer_thread_entry+0x186>
            {

                /* Something is on the list.  Remove it and process the expiration.  */
                current_timer =  expired_timers;
 800e222:	68fb      	ldr	r3, [r7, #12]
 800e224:	64fb      	str	r3, [r7, #76]	; 0x4c

                /* Pickup the next timer.  */
                next_timer =  expired_timers -> tx_timer_internal_active_next;
 800e226:	68fb      	ldr	r3, [r7, #12]
 800e228:	691b      	ldr	r3, [r3, #16]
 800e22a:	64bb      	str	r3, [r7, #72]	; 0x48

                /* Set the reactivate_timer to NULL.  */
                reactivate_timer =  TX_NULL;
 800e22c:	2300      	movs	r3, #0
 800e22e:	60bb      	str	r3, [r7, #8]

                /* Determine if this is the only timer.  */
                if (current_timer == next_timer)
 800e230:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800e232:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e234:	429a      	cmp	r2, r3
 800e236:	d102      	bne.n	800e23e <_tx_timer_thread_entry+0xa2>
                {

                    /* Yes, this is the only timer in the list.  */

                    /* Set the head pointer to NULL.  */
                    expired_timers =  TX_NULL;
 800e238:	2300      	movs	r3, #0
 800e23a:	60fb      	str	r3, [r7, #12]
 800e23c:	e00e      	b.n	800e25c <_tx_timer_thread_entry+0xc0>
                {

                    /* No, not the only expired timer.  */

                    /* Remove this timer from the expired list.  */
                    previous_timer =                                   current_timer -> tx_timer_internal_active_previous;
 800e23e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e240:	695b      	ldr	r3, [r3, #20]
 800e242:	647b      	str	r3, [r7, #68]	; 0x44
                    next_timer -> tx_timer_internal_active_previous =  previous_timer;
 800e244:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e246:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e248:	615a      	str	r2, [r3, #20]
                    previous_timer -> tx_timer_internal_active_next =  next_timer;
 800e24a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e24c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e24e:	611a      	str	r2, [r3, #16]

                    /* Modify the next timer's list head to point at the current list head.  */
                    next_timer -> tx_timer_internal_list_head =  &expired_timers;
 800e250:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e252:	f107 020c 	add.w	r2, r7, #12
 800e256:	619a      	str	r2, [r3, #24]

                    /* Set the list head pointer.  */
                    expired_timers =  next_timer;
 800e258:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e25a:	60fb      	str	r3, [r7, #12]

                /* In any case, the timer is now off of the expired list.  */

                /* Determine if the timer has expired or if it is just a really
                   big timer that needs to be placed in the list again.  */
                if (current_timer -> tx_timer_internal_remaining_ticks > TX_TIMER_ENTRIES)
 800e25c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e25e:	681b      	ldr	r3, [r3, #0]
 800e260:	2b20      	cmp	r3, #32
 800e262:	d911      	bls.n	800e288 <_tx_timer_thread_entry+0xec>
                    }
#endif

                    /* Decrement the remaining ticks of the timer.  */
                    current_timer -> tx_timer_internal_remaining_ticks =
                            current_timer -> tx_timer_internal_remaining_ticks - TX_TIMER_ENTRIES;
 800e264:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e266:	681b      	ldr	r3, [r3, #0]
 800e268:	f1a3 0220 	sub.w	r2, r3, #32
                    current_timer -> tx_timer_internal_remaining_ticks =
 800e26c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e26e:	601a      	str	r2, [r3, #0]

                    /* Set the timeout function to NULL in order to bypass the
                       expiration.  */
                    timeout_function =  TX_NULL;
 800e270:	2300      	movs	r3, #0
 800e272:	65bb      	str	r3, [r7, #88]	; 0x58

                    /* Make the timer appear that it is still active while interrupts
                       are enabled.  This will permit proper processing of a timer
                       deactivate from an ISR.  */
                    current_timer -> tx_timer_internal_list_head =    &reactivate_timer;
 800e274:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e276:	f107 0208 	add.w	r2, r7, #8
 800e27a:	619a      	str	r2, [r3, #24]
                    current_timer -> tx_timer_internal_active_next =  current_timer;
 800e27c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e27e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800e280:	611a      	str	r2, [r3, #16]

                    /* Setup the temporary timer list head pointer.  */
                    reactivate_timer =  current_timer;
 800e282:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e284:	60bb      	str	r3, [r7, #8]
 800e286:	e01a      	b.n	800e2be <_tx_timer_thread_entry+0x122>
                    }
#endif

                    /* Copy the calling function and ID into local variables before interrupts
                       are re-enabled.  */
                    timeout_function =  current_timer -> tx_timer_internal_timeout_function;
 800e288:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e28a:	689b      	ldr	r3, [r3, #8]
 800e28c:	65bb      	str	r3, [r7, #88]	; 0x58
                    timeout_param =     current_timer -> tx_timer_internal_timeout_param;
 800e28e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e290:	68db      	ldr	r3, [r3, #12]
 800e292:	657b      	str	r3, [r7, #84]	; 0x54

                    /* Copy the reinitialize ticks into the remaining ticks.  */
                    current_timer -> tx_timer_internal_remaining_ticks =  current_timer -> tx_timer_internal_re_initialize_ticks;
 800e294:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e296:	685a      	ldr	r2, [r3, #4]
 800e298:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e29a:	601a      	str	r2, [r3, #0]

                    /* Determine if the timer should be reactivated.  */
                    if (current_timer -> tx_timer_internal_remaining_ticks != ((ULONG) 0))
 800e29c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e29e:	681b      	ldr	r3, [r3, #0]
 800e2a0:	2b00      	cmp	r3, #0
 800e2a2:	d009      	beq.n	800e2b8 <_tx_timer_thread_entry+0x11c>

                        /* Make the timer appear that it is still active while processing
                           the expiration routine and with interrupts enabled.  This will
                           permit proper processing of a timer deactivate from both the
                           expiration routine and an ISR.  */
                        current_timer -> tx_timer_internal_list_head =    &reactivate_timer;
 800e2a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e2a6:	f107 0208 	add.w	r2, r7, #8
 800e2aa:	619a      	str	r2, [r3, #24]
                        current_timer -> tx_timer_internal_active_next =  current_timer;
 800e2ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e2ae:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800e2b0:	611a      	str	r2, [r3, #16]

                        /* Setup the temporary timer list head pointer.  */
                        reactivate_timer =  current_timer;
 800e2b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e2b4:	60bb      	str	r3, [r7, #8]
 800e2b6:	e002      	b.n	800e2be <_tx_timer_thread_entry+0x122>
                    else
                    {

                        /* Set the list pointer of this timer to NULL.  This is used to indicate
                           the timer is no longer active.  */
                        current_timer -> tx_timer_internal_list_head =  TX_NULL;
 800e2b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e2ba:	2200      	movs	r2, #0
 800e2bc:	619a      	str	r2, [r3, #24]
                    }
                }

                /* Set pointer to indicate the expired timer that is currently being processed.  */
                _tx_timer_expired_timer_ptr =  current_timer;
 800e2be:	4a33      	ldr	r2, [pc, #204]	; (800e38c <_tx_timer_thread_entry+0x1f0>)
 800e2c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e2c2:	6013      	str	r3, [r2, #0]
 800e2c4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e2c6:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800e2c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2ca:	f383 8810 	msr	PRIMASK, r3
}
 800e2ce:	bf00      	nop

                /* Restore interrupts for timer expiration call.  */
                TX_RESTORE

                /* Call the timer-expiration function, if non-NULL.  */
                if (timeout_function != TX_NULL)
 800e2d0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e2d2:	2b00      	cmp	r3, #0
 800e2d4:	d002      	beq.n	800e2dc <_tx_timer_thread_entry+0x140>
                {

                    (timeout_function) (timeout_param);
 800e2d6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e2d8:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800e2da:	4798      	blx	r3
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800e2dc:	f3ef 8310 	mrs	r3, PRIMASK
 800e2e0:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 800e2e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
    int_posture = __get_interrupt_posture();
 800e2e4:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 800e2e6:	b672      	cpsid	i
    return(int_posture);
 800e2e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                }

                /* Lockout interrupts again.  */
                TX_DISABLE
 800e2ea:	65fb      	str	r3, [r7, #92]	; 0x5c

                /* Clear expired timer pointer.  */
                _tx_timer_expired_timer_ptr =  TX_NULL;
 800e2ec:	4b27      	ldr	r3, [pc, #156]	; (800e38c <_tx_timer_thread_entry+0x1f0>)
 800e2ee:	2200      	movs	r2, #0
 800e2f0:	601a      	str	r2, [r3, #0]

                /* Determine if the timer needs to be reactivated.  */
                if (reactivate_timer == current_timer)
 800e2f2:	68bb      	ldr	r3, [r7, #8]
 800e2f4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800e2f6:	429a      	cmp	r2, r3
 800e2f8:	d105      	bne.n	800e306 <_tx_timer_thread_entry+0x16a>
#else

                    /* Reactivate through the timer activate function.  */

                    /* Clear the list head for the timer activate call.  */
                    current_timer -> tx_timer_internal_list_head = TX_NULL;
 800e2fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e2fc:	2200      	movs	r2, #0
 800e2fe:	619a      	str	r2, [r3, #24]

                    /* Activate the current timer.  */
                    _tx_timer_system_activate(current_timer);
 800e300:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800e302:	f7ff feb1 	bl	800e068 <_tx_timer_system_activate>
 800e306:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e308:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800e30a:	69bb      	ldr	r3, [r7, #24]
 800e30c:	f383 8810 	msr	PRIMASK, r3
}
 800e310:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800e312:	f3ef 8310 	mrs	r3, PRIMASK
 800e316:	623b      	str	r3, [r7, #32]
    return(posture);
 800e318:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800e31a:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 800e31c:	b672      	cpsid	i
    return(int_posture);
 800e31e:	69fb      	ldr	r3, [r7, #28]

                /* Restore interrupts.  */
                TX_RESTORE

                /* Lockout interrupts again.  */
                TX_DISABLE
 800e320:	65fb      	str	r3, [r7, #92]	; 0x5c
            while (expired_timers != TX_NULL)
 800e322:	68fb      	ldr	r3, [r7, #12]
 800e324:	2b00      	cmp	r3, #0
 800e326:	f47f af7c 	bne.w	800e222 <_tx_timer_thread_entry+0x86>

            /* Finally, suspend this thread and wait for the next expiration.  */

            /* Determine if another expiration took place while we were in this
               thread.  If so, process another expiration.  */
            if (_tx_timer_expired == TX_FALSE)
 800e32a:	4b17      	ldr	r3, [pc, #92]	; (800e388 <_tx_timer_thread_entry+0x1ec>)
 800e32c:	681b      	ldr	r3, [r3, #0]
 800e32e:	2b00      	cmp	r3, #0
 800e330:	d116      	bne.n	800e360 <_tx_timer_thread_entry+0x1c4>
            {

                /* Otherwise, no timer expiration, so suspend the thread.  */

                /* Build pointer to the timer thread.  */
                thread_ptr =  &_tx_timer_thread;
 800e332:	4b17      	ldr	r3, [pc, #92]	; (800e390 <_tx_timer_thread_entry+0x1f4>)
 800e334:	653b      	str	r3, [r7, #80]	; 0x50

                /* Set the status to suspending, in order to indicate the
                   suspension is in progress.  */
                thread_ptr -> tx_thread_state =  TX_SUSPENDED;
 800e336:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e338:	2203      	movs	r2, #3
 800e33a:	631a      	str	r2, [r3, #48]	; 0x30
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Set the suspending flag. */
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800e33c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e33e:	2201      	movs	r2, #1
 800e340:	639a      	str	r2, [r3, #56]	; 0x38

                /* Increment the preempt disable count prior to suspending.  */
                _tx_thread_preempt_disable++;
 800e342:	4b14      	ldr	r3, [pc, #80]	; (800e394 <_tx_timer_thread_entry+0x1f8>)
 800e344:	681b      	ldr	r3, [r3, #0]
 800e346:	3301      	adds	r3, #1
 800e348:	4a12      	ldr	r2, [pc, #72]	; (800e394 <_tx_timer_thread_entry+0x1f8>)
 800e34a:	6013      	str	r3, [r2, #0]
 800e34c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e34e:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800e350:	697b      	ldr	r3, [r7, #20]
 800e352:	f383 8810 	msr	PRIMASK, r3
}
 800e356:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Call actual thread suspension routine.  */
                _tx_thread_system_suspend(thread_ptr);
 800e358:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800e35a:	f7ff fc41 	bl	800dbe0 <_tx_thread_system_suspend>
 800e35e:	e728      	b.n	800e1b2 <_tx_timer_thread_entry+0x16>
 800e360:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e362:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800e364:	693b      	ldr	r3, [r7, #16]
 800e366:	f383 8810 	msr	PRIMASK, r3
}
 800e36a:	bf00      	nop
            TX_DISABLE
 800e36c:	e721      	b.n	800e1b2 <_tx_timer_thread_entry+0x16>

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif

}
 800e36e:	bf00      	nop
 800e370:	3760      	adds	r7, #96	; 0x60
 800e372:	46bd      	mov	sp, r7
 800e374:	bd80      	pop	{r7, pc}
 800e376:	bf00      	nop
 800e378:	4154494d 	.word	0x4154494d
 800e37c:	20002414 	.word	0x20002414
 800e380:	20002410 	.word	0x20002410
 800e384:	2000240c 	.word	0x2000240c
 800e388:	20002418 	.word	0x20002418
 800e38c:	20002424 	.word	0x20002424
 800e390:	20002428 	.word	0x20002428
 800e394:	20002378 	.word	0x20002378

0800e398 <_txe_byte_pool_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_byte_pool_create(TX_BYTE_POOL *pool_ptr, CHAR *name_ptr, VOID *pool_start, ULONG pool_size, UINT pool_control_block_size)
{
 800e398:	b580      	push	{r7, lr}
 800e39a:	b092      	sub	sp, #72	; 0x48
 800e39c:	af00      	add	r7, sp, #0
 800e39e:	60f8      	str	r0, [r7, #12]
 800e3a0:	60b9      	str	r1, [r7, #8]
 800e3a2:	607a      	str	r2, [r7, #4]
 800e3a4:	603b      	str	r3, [r7, #0]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800e3a6:	2300      	movs	r3, #0
 800e3a8:	647b      	str	r3, [r7, #68]	; 0x44

    /* Check for an invalid byte pool pointer.  */
    if (pool_ptr == TX_NULL)
 800e3aa:	68fb      	ldr	r3, [r7, #12]
 800e3ac:	2b00      	cmp	r3, #0
 800e3ae:	d102      	bne.n	800e3b6 <_txe_byte_pool_create+0x1e>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 800e3b0:	2302      	movs	r3, #2
 800e3b2:	647b      	str	r3, [r7, #68]	; 0x44
 800e3b4:	e075      	b.n	800e4a2 <_txe_byte_pool_create+0x10a>
    }

    /* Now see if the pool control block size is valid.  */
    else if (pool_control_block_size != (sizeof(TX_BYTE_POOL)))
 800e3b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e3b8:	2b34      	cmp	r3, #52	; 0x34
 800e3ba:	d002      	beq.n	800e3c2 <_txe_byte_pool_create+0x2a>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 800e3bc:	2302      	movs	r3, #2
 800e3be:	647b      	str	r3, [r7, #68]	; 0x44
 800e3c0:	e06f      	b.n	800e4a2 <_txe_byte_pool_create+0x10a>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800e3c2:	f3ef 8310 	mrs	r3, PRIMASK
 800e3c6:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 800e3c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 800e3ca:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 800e3cc:	b672      	cpsid	i
    return(int_posture);
 800e3ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 800e3d0:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 800e3d2:	4b3b      	ldr	r3, [pc, #236]	; (800e4c0 <_txe_byte_pool_create+0x128>)
 800e3d4:	681b      	ldr	r3, [r3, #0]
 800e3d6:	3301      	adds	r3, #1
 800e3d8:	4a39      	ldr	r2, [pc, #228]	; (800e4c0 <_txe_byte_pool_create+0x128>)
 800e3da:	6013      	str	r3, [r2, #0]
 800e3dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e3de:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800e3e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e3e2:	f383 8810 	msr	PRIMASK, r3
}
 800e3e6:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_pool =   _tx_byte_pool_created_ptr;
 800e3e8:	4b36      	ldr	r3, [pc, #216]	; (800e4c4 <_txe_byte_pool_create+0x12c>)
 800e3ea:	681b      	ldr	r3, [r3, #0]
 800e3ec:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_byte_pool_created_count; i++)
 800e3ee:	2300      	movs	r3, #0
 800e3f0:	643b      	str	r3, [r7, #64]	; 0x40
 800e3f2:	e009      	b.n	800e408 <_txe_byte_pool_create+0x70>
        {

            /* Determine if this byte pool matches the pool in the list.  */
            if (pool_ptr == next_pool)
 800e3f4:	68fa      	ldr	r2, [r7, #12]
 800e3f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e3f8:	429a      	cmp	r2, r3
 800e3fa:	d00b      	beq.n	800e414 <_txe_byte_pool_create+0x7c>
            }
            else
            {

                /* Move to the next pool.  */
                next_pool =  next_pool -> tx_byte_pool_created_next;
 800e3fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e3fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e400:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_byte_pool_created_count; i++)
 800e402:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e404:	3301      	adds	r3, #1
 800e406:	643b      	str	r3, [r7, #64]	; 0x40
 800e408:	4b2f      	ldr	r3, [pc, #188]	; (800e4c8 <_txe_byte_pool_create+0x130>)
 800e40a:	681b      	ldr	r3, [r3, #0]
 800e40c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e40e:	429a      	cmp	r2, r3
 800e410:	d3f0      	bcc.n	800e3f4 <_txe_byte_pool_create+0x5c>
 800e412:	e000      	b.n	800e416 <_txe_byte_pool_create+0x7e>
                break;
 800e414:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800e416:	f3ef 8310 	mrs	r3, PRIMASK
 800e41a:	623b      	str	r3, [r7, #32]
    return(posture);
 800e41c:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800e41e:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 800e420:	b672      	cpsid	i
    return(int_posture);
 800e422:	69fb      	ldr	r3, [r7, #28]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 800e424:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 800e426:	4b26      	ldr	r3, [pc, #152]	; (800e4c0 <_txe_byte_pool_create+0x128>)
 800e428:	681b      	ldr	r3, [r3, #0]
 800e42a:	3b01      	subs	r3, #1
 800e42c:	4a24      	ldr	r2, [pc, #144]	; (800e4c0 <_txe_byte_pool_create+0x128>)
 800e42e:	6013      	str	r3, [r2, #0]
 800e430:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e432:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800e434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e436:	f383 8810 	msr	PRIMASK, r3
}
 800e43a:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 800e43c:	f7ff fa96 	bl	800d96c <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate pool.  */
        if (pool_ptr == next_pool)
 800e440:	68fa      	ldr	r2, [r7, #12]
 800e442:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e444:	429a      	cmp	r2, r3
 800e446:	d102      	bne.n	800e44e <_txe_byte_pool_create+0xb6>
        {

            /* Pool is already created, return appropriate error code.  */
            status =  TX_POOL_ERROR;
 800e448:	2302      	movs	r3, #2
 800e44a:	647b      	str	r3, [r7, #68]	; 0x44
 800e44c:	e029      	b.n	800e4a2 <_txe_byte_pool_create+0x10a>
        }

        /* Check for an invalid starting address.  */
        else if (pool_start == TX_NULL)
 800e44e:	687b      	ldr	r3, [r7, #4]
 800e450:	2b00      	cmp	r3, #0
 800e452:	d102      	bne.n	800e45a <_txe_byte_pool_create+0xc2>
        {

            /* Null starting address pointer, return appropriate error.  */
            status =  TX_PTR_ERROR;
 800e454:	2303      	movs	r3, #3
 800e456:	647b      	str	r3, [r7, #68]	; 0x44
 800e458:	e023      	b.n	800e4a2 <_txe_byte_pool_create+0x10a>
        }

        /* Check for invalid pool size.  */
        else if (pool_size < TX_BYTE_POOL_MIN)
 800e45a:	683b      	ldr	r3, [r7, #0]
 800e45c:	2b63      	cmp	r3, #99	; 0x63
 800e45e:	d802      	bhi.n	800e466 <_txe_byte_pool_create+0xce>
        {

            /* Pool not big enough, return appropriate error.  */
            status =  TX_SIZE_ERROR;
 800e460:	2305      	movs	r3, #5
 800e462:	647b      	str	r3, [r7, #68]	; 0x44
 800e464:	e01d      	b.n	800e4a2 <_txe_byte_pool_create+0x10a>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 800e466:	4b19      	ldr	r3, [pc, #100]	; (800e4cc <_txe_byte_pool_create+0x134>)
 800e468:	681b      	ldr	r3, [r3, #0]
 800e46a:	637b      	str	r3, [r7, #52]	; 0x34

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (thread_ptr == &_tx_timer_thread)
 800e46c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e46e:	4a18      	ldr	r2, [pc, #96]	; (800e4d0 <_txe_byte_pool_create+0x138>)
 800e470:	4293      	cmp	r3, r2
 800e472:	d101      	bne.n	800e478 <_txe_byte_pool_create+0xe0>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 800e474:	2313      	movs	r3, #19
 800e476:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800e478:	f3ef 8305 	mrs	r3, IPSR
 800e47c:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 800e47e:	69ba      	ldr	r2, [r7, #24]
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800e480:	4b14      	ldr	r3, [pc, #80]	; (800e4d4 <_txe_byte_pool_create+0x13c>)
 800e482:	681b      	ldr	r3, [r3, #0]
 800e484:	4313      	orrs	r3, r2
 800e486:	2b00      	cmp	r3, #0
 800e488:	d00b      	beq.n	800e4a2 <_txe_byte_pool_create+0x10a>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800e48a:	f3ef 8305 	mrs	r3, IPSR
 800e48e:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800e490:	697a      	ldr	r2, [r7, #20]
            {

                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 800e492:	4b10      	ldr	r3, [pc, #64]	; (800e4d4 <_txe_byte_pool_create+0x13c>)
 800e494:	681b      	ldr	r3, [r3, #0]
 800e496:	4313      	orrs	r3, r2
 800e498:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800e49c:	d201      	bcs.n	800e4a2 <_txe_byte_pool_create+0x10a>
                {

                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 800e49e:	2313      	movs	r3, #19
 800e4a0:	647b      	str	r3, [r7, #68]	; 0x44
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800e4a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e4a4:	2b00      	cmp	r3, #0
 800e4a6:	d106      	bne.n	800e4b6 <_txe_byte_pool_create+0x11e>
    {

        /* Call actual byte pool create function.  */
        status =  _tx_byte_pool_create(pool_ptr, name_ptr, pool_start, pool_size);
 800e4a8:	683b      	ldr	r3, [r7, #0]
 800e4aa:	687a      	ldr	r2, [r7, #4]
 800e4ac:	68b9      	ldr	r1, [r7, #8]
 800e4ae:	68f8      	ldr	r0, [r7, #12]
 800e4b0:	f7fe fc2a 	bl	800cd08 <_tx_byte_pool_create>
 800e4b4:	6478      	str	r0, [r7, #68]	; 0x44
    }

    /* Return completion status.  */
    return(status);
 800e4b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 800e4b8:	4618      	mov	r0, r3
 800e4ba:	3748      	adds	r7, #72	; 0x48
 800e4bc:	46bd      	mov	sp, r7
 800e4be:	bd80      	pop	{r7, pc}
 800e4c0:	20002378 	.word	0x20002378
 800e4c4:	200022d0 	.word	0x200022d0
 800e4c8:	200022d4 	.word	0x200022d4
 800e4cc:	200022e0 	.word	0x200022e0
 800e4d0:	20002428 	.word	0x20002428
 800e4d4:	20000010 	.word	0x20000010

0800e4d8 <_txe_event_flags_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_event_flags_create(TX_EVENT_FLAGS_GROUP *group_ptr, CHAR *name_ptr, UINT event_control_block_size)
{
 800e4d8:	b580      	push	{r7, lr}
 800e4da:	b092      	sub	sp, #72	; 0x48
 800e4dc:	af00      	add	r7, sp, #0
 800e4de:	60f8      	str	r0, [r7, #12]
 800e4e0:	60b9      	str	r1, [r7, #8]
 800e4e2:	607a      	str	r2, [r7, #4]
TX_THREAD                   *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800e4e4:	2300      	movs	r3, #0
 800e4e6:	647b      	str	r3, [r7, #68]	; 0x44

    /* Check for an invalid event flags group pointer.  */
    if (group_ptr == TX_NULL)
 800e4e8:	68fb      	ldr	r3, [r7, #12]
 800e4ea:	2b00      	cmp	r3, #0
 800e4ec:	d102      	bne.n	800e4f4 <_txe_event_flags_create+0x1c>
    {

        /* Event flags group pointer is invalid, return appropriate error code.  */
        status =  TX_GROUP_ERROR;
 800e4ee:	2306      	movs	r3, #6
 800e4f0:	647b      	str	r3, [r7, #68]	; 0x44
 800e4f2:	e069      	b.n	800e5c8 <_txe_event_flags_create+0xf0>
    }

    /* Now check for proper control block size.  */
    else if (event_control_block_size != (sizeof(TX_EVENT_FLAGS_GROUP)))
 800e4f4:	687b      	ldr	r3, [r7, #4]
 800e4f6:	2b24      	cmp	r3, #36	; 0x24
 800e4f8:	d002      	beq.n	800e500 <_txe_event_flags_create+0x28>
    {

        /* Event flags group pointer is invalid, return appropriate error code.  */
        status =  TX_GROUP_ERROR;
 800e4fa:	2306      	movs	r3, #6
 800e4fc:	647b      	str	r3, [r7, #68]	; 0x44
 800e4fe:	e063      	b.n	800e5c8 <_txe_event_flags_create+0xf0>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800e500:	f3ef 8310 	mrs	r3, PRIMASK
 800e504:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 800e506:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 800e508:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 800e50a:	b672      	cpsid	i
    return(int_posture);
 800e50c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 800e50e:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 800e510:	4b34      	ldr	r3, [pc, #208]	; (800e5e4 <_txe_event_flags_create+0x10c>)
 800e512:	681b      	ldr	r3, [r3, #0]
 800e514:	3301      	adds	r3, #1
 800e516:	4a33      	ldr	r2, [pc, #204]	; (800e5e4 <_txe_event_flags_create+0x10c>)
 800e518:	6013      	str	r3, [r2, #0]
 800e51a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e51c:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800e51e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e520:	f383 8810 	msr	PRIMASK, r3
}
 800e524:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_group =   _tx_event_flags_created_ptr;
 800e526:	4b30      	ldr	r3, [pc, #192]	; (800e5e8 <_txe_event_flags_create+0x110>)
 800e528:	681b      	ldr	r3, [r3, #0]
 800e52a:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_event_flags_created_count; i++)
 800e52c:	2300      	movs	r3, #0
 800e52e:	643b      	str	r3, [r7, #64]	; 0x40
 800e530:	e009      	b.n	800e546 <_txe_event_flags_create+0x6e>
        {

            /* Determine if this group matches the event flags group in the list.  */
            if (group_ptr == next_group)
 800e532:	68fa      	ldr	r2, [r7, #12]
 800e534:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e536:	429a      	cmp	r2, r3
 800e538:	d00b      	beq.n	800e552 <_txe_event_flags_create+0x7a>
            }
            else
            {

                /* Move to the next group.  */
                next_group =  next_group -> tx_event_flags_group_created_next;
 800e53a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e53c:	699b      	ldr	r3, [r3, #24]
 800e53e:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_event_flags_created_count; i++)
 800e540:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e542:	3301      	adds	r3, #1
 800e544:	643b      	str	r3, [r7, #64]	; 0x40
 800e546:	4b29      	ldr	r3, [pc, #164]	; (800e5ec <_txe_event_flags_create+0x114>)
 800e548:	681b      	ldr	r3, [r3, #0]
 800e54a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e54c:	429a      	cmp	r2, r3
 800e54e:	d3f0      	bcc.n	800e532 <_txe_event_flags_create+0x5a>
 800e550:	e000      	b.n	800e554 <_txe_event_flags_create+0x7c>
                break;
 800e552:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800e554:	f3ef 8310 	mrs	r3, PRIMASK
 800e558:	623b      	str	r3, [r7, #32]
    return(posture);
 800e55a:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800e55c:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 800e55e:	b672      	cpsid	i
    return(int_posture);
 800e560:	69fb      	ldr	r3, [r7, #28]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 800e562:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 800e564:	4b1f      	ldr	r3, [pc, #124]	; (800e5e4 <_txe_event_flags_create+0x10c>)
 800e566:	681b      	ldr	r3, [r3, #0]
 800e568:	3b01      	subs	r3, #1
 800e56a:	4a1e      	ldr	r2, [pc, #120]	; (800e5e4 <_txe_event_flags_create+0x10c>)
 800e56c:	6013      	str	r3, [r2, #0]
 800e56e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e570:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800e572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e574:	f383 8810 	msr	PRIMASK, r3
}
 800e578:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 800e57a:	f7ff f9f7 	bl	800d96c <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate event flag group.  */
        if (group_ptr == next_group)
 800e57e:	68fa      	ldr	r2, [r7, #12]
 800e580:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e582:	429a      	cmp	r2, r3
 800e584:	d102      	bne.n	800e58c <_txe_event_flags_create+0xb4>
        {

            /* Group is already created, return appropriate error code.  */
            status =  TX_GROUP_ERROR;
 800e586:	2306      	movs	r3, #6
 800e588:	647b      	str	r3, [r7, #68]	; 0x44
 800e58a:	e01d      	b.n	800e5c8 <_txe_event_flags_create+0xf0>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 800e58c:	4b18      	ldr	r3, [pc, #96]	; (800e5f0 <_txe_event_flags_create+0x118>)
 800e58e:	681b      	ldr	r3, [r3, #0]
 800e590:	637b      	str	r3, [r7, #52]	; 0x34

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (thread_ptr == &_tx_timer_thread)
 800e592:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e594:	4a17      	ldr	r2, [pc, #92]	; (800e5f4 <_txe_event_flags_create+0x11c>)
 800e596:	4293      	cmp	r3, r2
 800e598:	d101      	bne.n	800e59e <_txe_event_flags_create+0xc6>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 800e59a:	2313      	movs	r3, #19
 800e59c:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800e59e:	f3ef 8305 	mrs	r3, IPSR
 800e5a2:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 800e5a4:	69ba      	ldr	r2, [r7, #24]
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800e5a6:	4b14      	ldr	r3, [pc, #80]	; (800e5f8 <_txe_event_flags_create+0x120>)
 800e5a8:	681b      	ldr	r3, [r3, #0]
 800e5aa:	4313      	orrs	r3, r2
 800e5ac:	2b00      	cmp	r3, #0
 800e5ae:	d00b      	beq.n	800e5c8 <_txe_event_flags_create+0xf0>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800e5b0:	f3ef 8305 	mrs	r3, IPSR
 800e5b4:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800e5b6:	697a      	ldr	r2, [r7, #20]
            {

                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 800e5b8:	4b0f      	ldr	r3, [pc, #60]	; (800e5f8 <_txe_event_flags_create+0x120>)
 800e5ba:	681b      	ldr	r3, [r3, #0]
 800e5bc:	4313      	orrs	r3, r2
 800e5be:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800e5c2:	d201      	bcs.n	800e5c8 <_txe_event_flags_create+0xf0>
                {

                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 800e5c4:	2313      	movs	r3, #19
 800e5c6:	647b      	str	r3, [r7, #68]	; 0x44
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800e5c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e5ca:	2b00      	cmp	r3, #0
 800e5cc:	d104      	bne.n	800e5d8 <_txe_event_flags_create+0x100>
    {

        /* Call actual event flags create function.  */
        status =  _tx_event_flags_create(group_ptr, name_ptr);
 800e5ce:	68b9      	ldr	r1, [r7, #8]
 800e5d0:	68f8      	ldr	r0, [r7, #12]
 800e5d2:	f7fe fc2f 	bl	800ce34 <_tx_event_flags_create>
 800e5d6:	6478      	str	r0, [r7, #68]	; 0x44
    }

    /* Return completion status.  */
    return(status);
 800e5d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 800e5da:	4618      	mov	r0, r3
 800e5dc:	3748      	adds	r7, #72	; 0x48
 800e5de:	46bd      	mov	sp, r7
 800e5e0:	bd80      	pop	{r7, pc}
 800e5e2:	bf00      	nop
 800e5e4:	20002378 	.word	0x20002378
 800e5e8:	200022b8 	.word	0x200022b8
 800e5ec:	200022bc 	.word	0x200022bc
 800e5f0:	200022e0 	.word	0x200022e0
 800e5f4:	20002428 	.word	0x20002428
 800e5f8:	20000010 	.word	0x20000010

0800e5fc <_txe_event_flags_set>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_event_flags_set(TX_EVENT_FLAGS_GROUP *group_ptr, ULONG flags_to_set, UINT set_option)
{
 800e5fc:	b580      	push	{r7, lr}
 800e5fe:	b086      	sub	sp, #24
 800e600:	af00      	add	r7, sp, #0
 800e602:	60f8      	str	r0, [r7, #12]
 800e604:	60b9      	str	r1, [r7, #8]
 800e606:	607a      	str	r2, [r7, #4]

UINT        status;


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800e608:	2300      	movs	r3, #0
 800e60a:	617b      	str	r3, [r7, #20]

    /* Check for an invalid event flag group pointer.  */
    if (group_ptr == TX_NULL)
 800e60c:	68fb      	ldr	r3, [r7, #12]
 800e60e:	2b00      	cmp	r3, #0
 800e610:	d102      	bne.n	800e618 <_txe_event_flags_set+0x1c>
    {

        /* Event flags group pointer is invalid, return appropriate error code.  */
        status =  TX_GROUP_ERROR;
 800e612:	2306      	movs	r3, #6
 800e614:	617b      	str	r3, [r7, #20]
 800e616:	e00f      	b.n	800e638 <_txe_event_flags_set+0x3c>
    }

    /* Now check for invalid event flag group ID.  */
    else if (group_ptr -> tx_event_flags_group_id != TX_EVENT_FLAGS_ID)
 800e618:	68fb      	ldr	r3, [r7, #12]
 800e61a:	681b      	ldr	r3, [r3, #0]
 800e61c:	4a0d      	ldr	r2, [pc, #52]	; (800e654 <_txe_event_flags_set+0x58>)
 800e61e:	4293      	cmp	r3, r2
 800e620:	d002      	beq.n	800e628 <_txe_event_flags_set+0x2c>
    {

        /* Event flags group pointer is invalid, return appropriate error code.  */
        status =  TX_GROUP_ERROR;
 800e622:	2306      	movs	r3, #6
 800e624:	617b      	str	r3, [r7, #20]
 800e626:	e007      	b.n	800e638 <_txe_event_flags_set+0x3c>
    }
    else
    {

        /* Check for invalid set option.  */
        if (set_option != TX_AND)
 800e628:	687b      	ldr	r3, [r7, #4]
 800e62a:	2b02      	cmp	r3, #2
 800e62c:	d004      	beq.n	800e638 <_txe_event_flags_set+0x3c>
        {

            if (set_option != TX_OR)
 800e62e:	687b      	ldr	r3, [r7, #4]
 800e630:	2b00      	cmp	r3, #0
 800e632:	d001      	beq.n	800e638 <_txe_event_flags_set+0x3c>
            {

                /* Invalid set events option, return appropriate error.  */
                status =  TX_OPTION_ERROR;
 800e634:	2308      	movs	r3, #8
 800e636:	617b      	str	r3, [r7, #20]
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800e638:	697b      	ldr	r3, [r7, #20]
 800e63a:	2b00      	cmp	r3, #0
 800e63c:	d105      	bne.n	800e64a <_txe_event_flags_set+0x4e>
    {

        /* Call actual event flags set function.  */
        status =  _tx_event_flags_set(group_ptr, flags_to_set, set_option);
 800e63e:	687a      	ldr	r2, [r7, #4]
 800e640:	68b9      	ldr	r1, [r7, #8]
 800e642:	68f8      	ldr	r0, [r7, #12]
 800e644:	f7fe fc44 	bl	800ced0 <_tx_event_flags_set>
 800e648:	6178      	str	r0, [r7, #20]
    }

    /* Return completion status.  */
    return(status);
 800e64a:	697b      	ldr	r3, [r7, #20]
}
 800e64c:	4618      	mov	r0, r3
 800e64e:	3718      	adds	r7, #24
 800e650:	46bd      	mov	sp, r7
 800e652:	bd80      	pop	{r7, pc}
 800e654:	4456444e 	.word	0x4456444e

0800e658 <_txe_thread_create>:
UINT    _txe_thread_create(TX_THREAD *thread_ptr, CHAR *name_ptr,
                VOID (*entry_function)(ULONG id), ULONG entry_input,
                VOID *stack_start, ULONG stack_size,
                UINT priority, UINT preempt_threshold,
                ULONG time_slice, UINT auto_start, UINT thread_control_block_size)
{
 800e658:	b580      	push	{r7, lr}
 800e65a:	b09a      	sub	sp, #104	; 0x68
 800e65c:	af06      	add	r7, sp, #24
 800e65e:	60f8      	str	r0, [r7, #12]
 800e660:	60b9      	str	r1, [r7, #8]
 800e662:	607a      	str	r2, [r7, #4]
 800e664:	603b      	str	r3, [r7, #0]
TX_THREAD       *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800e666:	2300      	movs	r3, #0
 800e668:	64fb      	str	r3, [r7, #76]	; 0x4c

    /* Check for an invalid thread pointer.  */
    if (thread_ptr == TX_NULL)
 800e66a:	68fb      	ldr	r3, [r7, #12]
 800e66c:	2b00      	cmp	r3, #0
 800e66e:	d102      	bne.n	800e676 <_txe_thread_create+0x1e>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 800e670:	230e      	movs	r3, #14
 800e672:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e674:	e0bb      	b.n	800e7ee <_txe_thread_create+0x196>
    }

    /* Now check for invalid thread control block size.  */
    else if (thread_control_block_size != (sizeof(TX_THREAD)))
 800e676:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e678:	2bb0      	cmp	r3, #176	; 0xb0
 800e67a:	d002      	beq.n	800e682 <_txe_thread_create+0x2a>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 800e67c:	230e      	movs	r3, #14
 800e67e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e680:	e0b5      	b.n	800e7ee <_txe_thread_create+0x196>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800e682:	f3ef 8310 	mrs	r3, PRIMASK
 800e686:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 800e688:	6abb      	ldr	r3, [r7, #40]	; 0x28
    int_posture = __get_interrupt_posture();
 800e68a:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 800e68c:	b672      	cpsid	i
    return(int_posture);
 800e68e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 800e690:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 800e692:	4b64      	ldr	r3, [pc, #400]	; (800e824 <_txe_thread_create+0x1cc>)
 800e694:	681b      	ldr	r3, [r3, #0]
 800e696:	3301      	adds	r3, #1
 800e698:	4a62      	ldr	r2, [pc, #392]	; (800e824 <_txe_thread_create+0x1cc>)
 800e69a:	6013      	str	r3, [r2, #0]
 800e69c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e69e:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800e6a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6a2:	f383 8810 	msr	PRIMASK, r3
}
 800e6a6:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        break_flag =   TX_FALSE;
 800e6a8:	2300      	movs	r3, #0
 800e6aa:	64bb      	str	r3, [r7, #72]	; 0x48
        next_thread =  _tx_thread_created_ptr;
 800e6ac:	4b5e      	ldr	r3, [pc, #376]	; (800e828 <_txe_thread_create+0x1d0>)
 800e6ae:	681b      	ldr	r3, [r3, #0]
 800e6b0:	643b      	str	r3, [r7, #64]	; 0x40
        work_ptr =     TX_VOID_TO_UCHAR_POINTER_CONVERT(stack_start);
 800e6b2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e6b4:	63bb      	str	r3, [r7, #56]	; 0x38
        work_ptr =     TX_UCHAR_POINTER_ADD(work_ptr, (stack_size - ((ULONG) 1)));
 800e6b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e6b8:	3b01      	subs	r3, #1
 800e6ba:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e6bc:	4413      	add	r3, r2
 800e6be:	63bb      	str	r3, [r7, #56]	; 0x38
        stack_end =    TX_UCHAR_TO_VOID_POINTER_CONVERT(work_ptr);
 800e6c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e6c2:	637b      	str	r3, [r7, #52]	; 0x34
        for (i = ((ULONG) 0); i < _tx_thread_created_count; i++)
 800e6c4:	2300      	movs	r3, #0
 800e6c6:	647b      	str	r3, [r7, #68]	; 0x44
 800e6c8:	e02b      	b.n	800e722 <_txe_thread_create+0xca>
        {

            /* Determine if this thread matches the thread in the list.  */
            if (thread_ptr == next_thread)
 800e6ca:	68fa      	ldr	r2, [r7, #12]
 800e6cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e6ce:	429a      	cmp	r2, r3
 800e6d0:	d101      	bne.n	800e6d6 <_txe_thread_create+0x7e>
            {

                /* Set the break flag.  */
                break_flag =  TX_TRUE;
 800e6d2:	2301      	movs	r3, #1
 800e6d4:	64bb      	str	r3, [r7, #72]	; 0x48
            }

            /* Determine if we need to break the loop.  */
            if (break_flag == TX_TRUE)
 800e6d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e6d8:	2b01      	cmp	r3, #1
 800e6da:	d028      	beq.n	800e72e <_txe_thread_create+0xd6>
                /* Yes, break out of the loop.  */
                break;
            }

            /* Check the stack pointer to see if it overlaps with this thread's stack.  */
            if (stack_start >= next_thread -> tx_thread_stack_start)
 800e6dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e6de:	68db      	ldr	r3, [r3, #12]
 800e6e0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800e6e2:	429a      	cmp	r2, r3
 800e6e4:	d308      	bcc.n	800e6f8 <_txe_thread_create+0xa0>
            {

                if (stack_start < next_thread -> tx_thread_stack_end)
 800e6e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e6e8:	691b      	ldr	r3, [r3, #16]
 800e6ea:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800e6ec:	429a      	cmp	r2, r3
 800e6ee:	d203      	bcs.n	800e6f8 <_txe_thread_create+0xa0>
                {

                    /* This stack overlaps with an existing thread, clear the stack pointer to
                       force a stack error below.  */
                    stack_start =  TX_NULL;
 800e6f0:	2300      	movs	r3, #0
 800e6f2:	65bb      	str	r3, [r7, #88]	; 0x58

                    /* Set the break flag.  */
                    break_flag =  TX_TRUE;
 800e6f4:	2301      	movs	r3, #1
 800e6f6:	64bb      	str	r3, [r7, #72]	; 0x48
                }
            }

            /* Check the end of the stack to see if it is inside this thread's stack area as well.  */
            if (stack_end >= next_thread -> tx_thread_stack_start)
 800e6f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e6fa:	68db      	ldr	r3, [r3, #12]
 800e6fc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e6fe:	429a      	cmp	r2, r3
 800e700:	d308      	bcc.n	800e714 <_txe_thread_create+0xbc>
            {

                if (stack_end < next_thread -> tx_thread_stack_end)
 800e702:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e704:	691b      	ldr	r3, [r3, #16]
 800e706:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e708:	429a      	cmp	r2, r3
 800e70a:	d203      	bcs.n	800e714 <_txe_thread_create+0xbc>
                {

                    /* This stack overlaps with an existing thread, clear the stack pointer to
                       force a stack error below.  */
                    stack_start =  TX_NULL;
 800e70c:	2300      	movs	r3, #0
 800e70e:	65bb      	str	r3, [r7, #88]	; 0x58

                    /* Set the break flag.  */
                    break_flag =  TX_TRUE;
 800e710:	2301      	movs	r3, #1
 800e712:	64bb      	str	r3, [r7, #72]	; 0x48
                }
            }

            /* Move to the next thread.  */
            next_thread =  next_thread -> tx_thread_created_next;
 800e714:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e716:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e71a:	643b      	str	r3, [r7, #64]	; 0x40
        for (i = ((ULONG) 0); i < _tx_thread_created_count; i++)
 800e71c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e71e:	3301      	adds	r3, #1
 800e720:	647b      	str	r3, [r7, #68]	; 0x44
 800e722:	4b42      	ldr	r3, [pc, #264]	; (800e82c <_txe_thread_create+0x1d4>)
 800e724:	681b      	ldr	r3, [r3, #0]
 800e726:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e728:	429a      	cmp	r2, r3
 800e72a:	d3ce      	bcc.n	800e6ca <_txe_thread_create+0x72>
 800e72c:	e000      	b.n	800e730 <_txe_thread_create+0xd8>
                break;
 800e72e:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800e730:	f3ef 8310 	mrs	r3, PRIMASK
 800e734:	61fb      	str	r3, [r7, #28]
    return(posture);
 800e736:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 800e738:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 800e73a:	b672      	cpsid	i
    return(int_posture);
 800e73c:	69bb      	ldr	r3, [r7, #24]
        }

        /* Disable interrupts.  */
        TX_DISABLE
 800e73e:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 800e740:	4b38      	ldr	r3, [pc, #224]	; (800e824 <_txe_thread_create+0x1cc>)
 800e742:	681b      	ldr	r3, [r3, #0]
 800e744:	3b01      	subs	r3, #1
 800e746:	4a37      	ldr	r2, [pc, #220]	; (800e824 <_txe_thread_create+0x1cc>)
 800e748:	6013      	str	r3, [r2, #0]
 800e74a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e74c:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800e74e:	6a3b      	ldr	r3, [r7, #32]
 800e750:	f383 8810 	msr	PRIMASK, r3
}
 800e754:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 800e756:	f7ff f909 	bl	800d96c <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate thread.  */
        if (thread_ptr == next_thread)
 800e75a:	68fa      	ldr	r2, [r7, #12]
 800e75c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e75e:	429a      	cmp	r2, r3
 800e760:	d102      	bne.n	800e768 <_txe_thread_create+0x110>
        {

            /* Thread is already created, return appropriate error code.  */
            status =  TX_THREAD_ERROR;
 800e762:	230e      	movs	r3, #14
 800e764:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e766:	e042      	b.n	800e7ee <_txe_thread_create+0x196>
        }

        /* Check for invalid starting address of stack.  */
        else if (stack_start == TX_NULL)
 800e768:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e76a:	2b00      	cmp	r3, #0
 800e76c:	d102      	bne.n	800e774 <_txe_thread_create+0x11c>
        {

            /* Invalid stack or entry point, return appropriate error code.  */
            status =  TX_PTR_ERROR;
 800e76e:	2303      	movs	r3, #3
 800e770:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e772:	e03c      	b.n	800e7ee <_txe_thread_create+0x196>
        }

        /* Check for invalid thread entry point.  */
        else if (entry_function == TX_NULL)
 800e774:	687b      	ldr	r3, [r7, #4]
 800e776:	2b00      	cmp	r3, #0
 800e778:	d102      	bne.n	800e780 <_txe_thread_create+0x128>
        {

            /* Invalid stack or entry point, return appropriate error code.  */
            status =  TX_PTR_ERROR;
 800e77a:	2303      	movs	r3, #3
 800e77c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e77e:	e036      	b.n	800e7ee <_txe_thread_create+0x196>
        }

        /* Check the stack size.  */
        else if (stack_size < ((ULONG) TX_MINIMUM_STACK))
 800e780:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e782:	2bc7      	cmp	r3, #199	; 0xc7
 800e784:	d802      	bhi.n	800e78c <_txe_thread_create+0x134>
        {

            /* Stack is not big enough, return appropriate error code.  */
            status =  TX_SIZE_ERROR;
 800e786:	2305      	movs	r3, #5
 800e788:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e78a:	e030      	b.n	800e7ee <_txe_thread_create+0x196>
        }

        /* Check the priority specified.  */
        else if (priority >= ((UINT) TX_MAX_PRIORITIES))
 800e78c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e78e:	2b1f      	cmp	r3, #31
 800e790:	d902      	bls.n	800e798 <_txe_thread_create+0x140>
        {

            /* Invalid priority selected, return appropriate error code.  */
            status =  TX_PRIORITY_ERROR;
 800e792:	230f      	movs	r3, #15
 800e794:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e796:	e02a      	b.n	800e7ee <_txe_thread_create+0x196>
        }

        /* Check preemption threshold. */
        else if (preempt_threshold > priority)
 800e798:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800e79a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e79c:	429a      	cmp	r2, r3
 800e79e:	d902      	bls.n	800e7a6 <_txe_thread_create+0x14e>
        {

            /* Invalid preempt threshold, return appropriate error code.  */
            status =  TX_THRESH_ERROR;
 800e7a0:	2318      	movs	r3, #24
 800e7a2:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e7a4:	e023      	b.n	800e7ee <_txe_thread_create+0x196>
        }

        /* Check the start selection.  */
        else if (auto_start > TX_AUTO_START)
 800e7a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e7a8:	2b01      	cmp	r3, #1
 800e7aa:	d902      	bls.n	800e7b2 <_txe_thread_create+0x15a>
        {

            /* Invalid auto start selection, return appropriate error code.  */
            status =  TX_START_ERROR;
 800e7ac:	2310      	movs	r3, #16
 800e7ae:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e7b0:	e01d      	b.n	800e7ee <_txe_thread_create+0x196>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(current_thread)
 800e7b2:	4b1f      	ldr	r3, [pc, #124]	; (800e830 <_txe_thread_create+0x1d8>)
 800e7b4:	681b      	ldr	r3, [r3, #0]
 800e7b6:	633b      	str	r3, [r7, #48]	; 0x30

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (current_thread == &_tx_timer_thread)
 800e7b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e7ba:	4a1e      	ldr	r2, [pc, #120]	; (800e834 <_txe_thread_create+0x1dc>)
 800e7bc:	4293      	cmp	r3, r2
 800e7be:	d101      	bne.n	800e7c4 <_txe_thread_create+0x16c>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 800e7c0:	2313      	movs	r3, #19
 800e7c2:	64fb      	str	r3, [r7, #76]	; 0x4c
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800e7c4:	f3ef 8305 	mrs	r3, IPSR
 800e7c8:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800e7ca:	697a      	ldr	r2, [r7, #20]
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800e7cc:	4b1a      	ldr	r3, [pc, #104]	; (800e838 <_txe_thread_create+0x1e0>)
 800e7ce:	681b      	ldr	r3, [r3, #0]
 800e7d0:	4313      	orrs	r3, r2
 800e7d2:	2b00      	cmp	r3, #0
 800e7d4:	d00b      	beq.n	800e7ee <_txe_thread_create+0x196>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800e7d6:	f3ef 8305 	mrs	r3, IPSR
 800e7da:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 800e7dc:	693a      	ldr	r2, [r7, #16]
            {

                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 800e7de:	4b16      	ldr	r3, [pc, #88]	; (800e838 <_txe_thread_create+0x1e0>)
 800e7e0:	681b      	ldr	r3, [r3, #0]
 800e7e2:	4313      	orrs	r3, r2
 800e7e4:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800e7e8:	d201      	bcs.n	800e7ee <_txe_thread_create+0x196>
                {

                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 800e7ea:	2313      	movs	r3, #19
 800e7ec:	64fb      	str	r3, [r7, #76]	; 0x4c
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800e7ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e7f0:	2b00      	cmp	r3, #0
 800e7f2:	d112      	bne.n	800e81a <_txe_thread_create+0x1c2>
    {

        /* Call actual thread create function.  */
        status =  _tx_thread_create(thread_ptr, name_ptr, entry_function, entry_input,
 800e7f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e7f6:	9305      	str	r3, [sp, #20]
 800e7f8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e7fa:	9304      	str	r3, [sp, #16]
 800e7fc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e7fe:	9303      	str	r3, [sp, #12]
 800e800:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e802:	9302      	str	r3, [sp, #8]
 800e804:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e806:	9301      	str	r3, [sp, #4]
 800e808:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e80a:	9300      	str	r3, [sp, #0]
 800e80c:	683b      	ldr	r3, [r7, #0]
 800e80e:	687a      	ldr	r2, [r7, #4]
 800e810:	68b9      	ldr	r1, [r7, #8]
 800e812:	68f8      	ldr	r0, [r7, #12]
 800e814:	f7fe fddc 	bl	800d3d0 <_tx_thread_create>
 800e818:	64f8      	str	r0, [r7, #76]	; 0x4c
                        stack_start, stack_size, priority, preempt_threshold,
                        time_slice, auto_start);
    }

    /* Return completion status.  */
    return(status);
 800e81a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 800e81c:	4618      	mov	r0, r3
 800e81e:	3750      	adds	r7, #80	; 0x50
 800e820:	46bd      	mov	sp, r7
 800e822:	bd80      	pop	{r7, pc}
 800e824:	20002378 	.word	0x20002378
 800e828:	200022e8 	.word	0x200022e8
 800e82c:	200022ec 	.word	0x200022ec
 800e830:	200022e0 	.word	0x200022e0
 800e834:	20002428 	.word	0x20002428
 800e838:	20000010 	.word	0x20000010

0800e83c <_txe_thread_resume>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_thread_resume(TX_THREAD *thread_ptr)
{
 800e83c:	b580      	push	{r7, lr}
 800e83e:	b084      	sub	sp, #16
 800e840:	af00      	add	r7, sp, #0
 800e842:	6078      	str	r0, [r7, #4]

UINT    status;


    /* Check for an invalid thread pointer.  */
    if (thread_ptr == TX_NULL)
 800e844:	687b      	ldr	r3, [r7, #4]
 800e846:	2b00      	cmp	r3, #0
 800e848:	d102      	bne.n	800e850 <_txe_thread_resume+0x14>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 800e84a:	230e      	movs	r3, #14
 800e84c:	60fb      	str	r3, [r7, #12]
 800e84e:	e00b      	b.n	800e868 <_txe_thread_resume+0x2c>
    }

    /* Now check for invalid thread ID.  */
    else if (thread_ptr -> tx_thread_id != TX_THREAD_ID)
 800e850:	687b      	ldr	r3, [r7, #4]
 800e852:	681b      	ldr	r3, [r3, #0]
 800e854:	4a07      	ldr	r2, [pc, #28]	; (800e874 <_txe_thread_resume+0x38>)
 800e856:	4293      	cmp	r3, r2
 800e858:	d002      	beq.n	800e860 <_txe_thread_resume+0x24>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 800e85a:	230e      	movs	r3, #14
 800e85c:	60fb      	str	r3, [r7, #12]
 800e85e:	e003      	b.n	800e868 <_txe_thread_resume+0x2c>
    }
    else
    {

        /* Call actual thread resume function.  */
        status =  _tx_thread_resume(thread_ptr);
 800e860:	6878      	ldr	r0, [r7, #4]
 800e862:	f7fe fee7 	bl	800d634 <_tx_thread_resume>
 800e866:	60f8      	str	r0, [r7, #12]
    }

    /* Return completion status.  */
    return(status);
 800e868:	68fb      	ldr	r3, [r7, #12]
}
 800e86a:	4618      	mov	r0, r3
 800e86c:	3710      	adds	r7, #16
 800e86e:	46bd      	mov	sp, r7
 800e870:	bd80      	pop	{r7, pc}
 800e872:	bf00      	nop
 800e874:	54485244 	.word	0x54485244

0800e878 <_txe_thread_suspend>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_thread_suspend(TX_THREAD *thread_ptr)
{
 800e878:	b580      	push	{r7, lr}
 800e87a:	b084      	sub	sp, #16
 800e87c:	af00      	add	r7, sp, #0
 800e87e:	6078      	str	r0, [r7, #4]

UINT    status;


    /* Check for an invalid thread pointer.  */
    if (thread_ptr == TX_NULL)
 800e880:	687b      	ldr	r3, [r7, #4]
 800e882:	2b00      	cmp	r3, #0
 800e884:	d102      	bne.n	800e88c <_txe_thread_suspend+0x14>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 800e886:	230e      	movs	r3, #14
 800e888:	60fb      	str	r3, [r7, #12]
 800e88a:	e00b      	b.n	800e8a4 <_txe_thread_suspend+0x2c>
    }

    /* Now check for invalid thread ID.  */
    else if (thread_ptr -> tx_thread_id != TX_THREAD_ID)
 800e88c:	687b      	ldr	r3, [r7, #4]
 800e88e:	681b      	ldr	r3, [r3, #0]
 800e890:	4a07      	ldr	r2, [pc, #28]	; (800e8b0 <_txe_thread_suspend+0x38>)
 800e892:	4293      	cmp	r3, r2
 800e894:	d002      	beq.n	800e89c <_txe_thread_suspend+0x24>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 800e896:	230e      	movs	r3, #14
 800e898:	60fb      	str	r3, [r7, #12]
 800e89a:	e003      	b.n	800e8a4 <_txe_thread_suspend+0x2c>
    }
    else
    {

        /* Call actual thread suspend function.  */
        status =  _tx_thread_suspend(thread_ptr);
 800e89c:	6878      	ldr	r0, [r7, #4]
 800e89e:	f7fe fff5 	bl	800d88c <_tx_thread_suspend>
 800e8a2:	60f8      	str	r0, [r7, #12]
    }

    /* Return completion status.  */
    return(status);
 800e8a4:	68fb      	ldr	r3, [r7, #12]
}
 800e8a6:	4618      	mov	r0, r3
 800e8a8:	3710      	adds	r7, #16
 800e8aa:	46bd      	mov	sp, r7
 800e8ac:	bd80      	pop	{r7, pc}
 800e8ae:	bf00      	nop
 800e8b0:	54485244 	.word	0x54485244

0800e8b4 <__libc_init_array>:
 800e8b4:	b570      	push	{r4, r5, r6, lr}
 800e8b6:	4d0d      	ldr	r5, [pc, #52]	; (800e8ec <__libc_init_array+0x38>)
 800e8b8:	2600      	movs	r6, #0
 800e8ba:	4c0d      	ldr	r4, [pc, #52]	; (800e8f0 <__libc_init_array+0x3c>)
 800e8bc:	1b64      	subs	r4, r4, r5
 800e8be:	10a4      	asrs	r4, r4, #2
 800e8c0:	42a6      	cmp	r6, r4
 800e8c2:	d109      	bne.n	800e8d8 <__libc_init_array+0x24>
 800e8c4:	4d0b      	ldr	r5, [pc, #44]	; (800e8f4 <__libc_init_array+0x40>)
 800e8c6:	2600      	movs	r6, #0
 800e8c8:	4c0b      	ldr	r4, [pc, #44]	; (800e8f8 <__libc_init_array+0x44>)
 800e8ca:	f000 f81f 	bl	800e90c <_init>
 800e8ce:	1b64      	subs	r4, r4, r5
 800e8d0:	10a4      	asrs	r4, r4, #2
 800e8d2:	42a6      	cmp	r6, r4
 800e8d4:	d105      	bne.n	800e8e2 <__libc_init_array+0x2e>
 800e8d6:	bd70      	pop	{r4, r5, r6, pc}
 800e8d8:	f855 3b04 	ldr.w	r3, [r5], #4
 800e8dc:	3601      	adds	r6, #1
 800e8de:	4798      	blx	r3
 800e8e0:	e7ee      	b.n	800e8c0 <__libc_init_array+0xc>
 800e8e2:	f855 3b04 	ldr.w	r3, [r5], #4
 800e8e6:	3601      	adds	r6, #1
 800e8e8:	4798      	blx	r3
 800e8ea:	e7f2      	b.n	800e8d2 <__libc_init_array+0x1e>
 800e8ec:	0800ef50 	.word	0x0800ef50
 800e8f0:	0800ef50 	.word	0x0800ef50
 800e8f4:	0800ef50 	.word	0x0800ef50
 800e8f8:	0800ef54 	.word	0x0800ef54

0800e8fc <memset>:
 800e8fc:	4402      	add	r2, r0
 800e8fe:	4603      	mov	r3, r0
 800e900:	4293      	cmp	r3, r2
 800e902:	d100      	bne.n	800e906 <memset+0xa>
 800e904:	4770      	bx	lr
 800e906:	f803 1b01 	strb.w	r1, [r3], #1
 800e90a:	e7f9      	b.n	800e900 <memset+0x4>

0800e90c <_init>:
 800e90c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e90e:	bf00      	nop
 800e910:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e912:	bc08      	pop	{r3}
 800e914:	469e      	mov	lr, r3
 800e916:	4770      	bx	lr

0800e918 <_fini>:
 800e918:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e91a:	bf00      	nop
 800e91c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e91e:	bc08      	pop	{r3}
 800e920:	469e      	mov	lr, r3
 800e922:	4770      	bx	lr
